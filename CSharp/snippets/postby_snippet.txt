11633307Di2015UniqueSeparatorcounter
11633307Di2015UniqueSeparatorprivate void countButtonClick()Di2015NewLine{    Di2015NewLine    int counter = 0;Di2015NewLine    if (!(Session["counter"])){Di2015NewLine       counter = (int)Session["counter"];Di2015NewLine    }Di2015NewLine    counter++;Di2015NewLine    Session["counter"] = counter;Di2015NewLineDi2015NewLine    if (counter >= 1)Di2015NewLine    {Di2015NewLine        Response.Write("You can only select 2 slots! " + DateTime.Now.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11633307Di2015UniqueSeparatorif (!(Page.IsPostBack)){Di2015NewLine   Session["counter"] = null;Di2015NewLine}Di2015NewLine
11633713Di2015UniqueSeparatorOleDbCommand.Parameters.AddWithValue("fieldname", yourobj);
11633713Di2015UniqueSeparatorstring sql = "select * from mytable where MyField LIKE ? and MyOtherField = ?";Di2015NewLineDi2015NewLine// DapperDi2015NewLineDi2015NewLineusing (OleDbConnection dbConn = new OleDbConnection("your connection string))Di2015NewLine{Di2015NewLine    dbConn.Open();Di2015NewLine    var result = dbConn.Query(sql, new { MyField = "some value", MyOtherField = 3 });Di2015NewLineDi2015NewLine    foreach (dynamic myrow in result)Di2015NewLine    {Di2015NewLine        // you can get at your table rows using myrow.MyField, myrow.SomeOtherField etcDi2015NewLine        // To avoid myrow being dynamic, call dbConn.Query<T> where T is some type you Di2015NewLine        // define that matches your table definitionDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// The "old-fashioned" wayDi2015NewLineDi2015NewLineusing (OleDbConnection dbConn = new OleDbConnection("your connection string))Di2015NewLineusing (OleDbCommand dbCmd = dbConn.CreateCommand())Di2015NewLine{Di2015NewLine    dbConn.Open();Di2015NewLine    dbCmd.CommandText = sql;Di2015NewLine    dbCmd.Parameters.AddWithValue("MyField", "some value"));Di2015NewLine    dbCmd.Parameters.AddWithValue("MyOtherField", 3));Di2015NewLineDi2015NewLine    OleDbDataReader reader = dbCmd.ExecuteReader();Di2015NewLine    while (reader.Read())Di2015NewLine    {Di2015NewLine        string myfield = reader["myfield"] == DBNull.Value ? null : (string)reader["myfield"];Di2015NewLineDi2015NewLine        int SomeOtherField = reader["someotherfield"] == DBNull.Value ? 0 : (int)reader["someotherfield"];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11633713Di2015UniqueSeparatorstring sql = "insert into mytable (MyField, MyOtherField) values (?, ?)";Di2015NewLineDi2015NewLine// DapperDi2015NewLineDi2015NewLineusing (OleDbConnection dbConn = new OleDbConnection("your connection string))Di2015NewLine{Di2015NewLine    dbConn.Open();Di2015NewLine    dbConn.Execute(sql, new { MyField = "some value", MyOtherField = 3 });Di2015NewLine}Di2015NewLineDi2015NewLine// The "old-fashioned" wayDi2015NewLineDi2015NewLineusing (OleDbConnection dbConn = new OleDbConnection("your connection string))Di2015NewLineusing (OleDbCommand dbCmd = dbConn.CreateCommand())Di2015NewLine{Di2015NewLine    dbConn.Open();Di2015NewLine    dbCmd.CommandText = sql;Di2015NewLine    dbCmd.Parameters.AddWithValue("MyField", "some value"));Di2015NewLine    dbCmd.Parameters.AddWithValue("MyOtherField", 3));Di2015NewLineDi2015NewLine    dbCmd.ExecuteNonQuery(sql);Di2015NewLine}Di2015NewLine
11634040Di2015UniqueSeparatorprivate void Window_Loaded(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine// Create the interop host control.Di2015NewLineSystem.Windows.Forms.Integration.WindowsFormsHost host =Di2015NewLine    new System.Windows.Forms.Integration.WindowsFormsHost();Di2015NewLineDi2015NewLine// Create the MaskedTextBox control.Di2015NewLineMaskedTextBox mtbDate = new MaskedTextBox("00/00/0000");Di2015NewLineDi2015NewLine// Assign the MaskedTextBox control as the host control's child.Di2015NewLinehost.Child = mtbDate;Di2015NewLineDi2015NewLine// Add the interop host control to the GridDi2015NewLine// control's collection of child controls.Di2015NewLinethis.grid1.Children.Add(host);Di2015NewLine}Di2015NewLine
11634334Di2015UniqueSeparatordata
11634347Di2015UniqueSeparatorConvert.FromBase64String
11634347Di2015UniqueSeparator byte[] temp_backToBytes = Convert.FromBase64String(temp_inBase64);Di2015NewLine
11634355Di2015UniqueSeparatorpublic static String GetIP()Di2015NewLine{Di2015NewLine    String ip = Di2015NewLine        HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];Di2015NewLineDi2015NewLine    if (string.IsNullOrEmpty(ip))Di2015NewLine    {Di2015NewLine        ip = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];Di2015NewLine    }Di2015NewLineDi2015NewLine    return ip;Di2015NewLine}Di2015NewLine
11634411Di2015UniqueSeparatoryield return
11634411Di2015UniqueSeparatorpublic IEnumerable<Favorites> GetFavorites()Di2015NewLine{Di2015NewLine    using (SqlConnection sqlConnection = new SqlConnection(connString))Di2015NewLine    {Di2015NewLine        sqlConnection.Open();Di2015NewLine        using (SqlCommand cmd = sqlConnection.CreateCommand())Di2015NewLine        {Di2015NewLine            cmd.CommandText = "Select * from favorites";Di2015NewLine            cmd.CommandType = CommandType.Text;Di2015NewLine            using (SqlDataReader reader = cmd.ExecuteReader())Di2015NewLine            {Di2015NewLine                while (reader.Read())Di2015NewLine                {Di2015NewLine                    // Create a Favorites instanceDi2015NewLine                    var favorites = new Favorites();Di2015NewLine                    favorites.Foo = reader["foo"];Di2015NewLine                    // ... etc ...Di2015NewLine                    yield return favorites;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11634411Di2015UniqueSeparatorIDataReader
11634411Di2015UniqueSeparatorSqlDataReader
11634449Di2015UniqueSeparator    Console.WriteLine(DateTime.Now.ToString("hh mm ss z"));Di2015NewLine    Console.WriteLine(DateTime.Now.ToUniversalTime().ToString());Di2015NewLine
11634528Di2015UniqueSeparator <ListBox ItemsSource="{TemplateBinding PossibleAnswers}" Tag="{TemplateBinding PossibleAnswersTemplate}" SelectionMode="Multiple"Di2015NewLine                             Style="{StaticResource KinectRadioList}"/>Di2015NewLineDi2015NewLine    <ContentControl ContentTemplate="{TemplateBinding Tag}"/>Di2015NewLine
11634528Di2015UniqueSeparator<ContentControl Margin="2 0 0 0" Content="{Binding}" ContentTemplate="{Binding PossibleAnswersTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:QuestionControl}}}" />Di2015NewLine
11634553Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    ArrayList ReportsTypes = new ArrayList();Di2015NewLine    ReportsTypes.Add(typeof(AgentPPL));Di2015NewLineDi2015NewLineDi2015NewLine    foreach (Type t in ReportsTypes)Di2015NewLine    {Di2015NewLine        InitilizeReports(t);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinestatic void InitilizeReports(Type t)Di2015NewLine{Di2015NewLine    var r = Activator.CreateInstance(t);Di2015NewLine    AgentPPL rr = new AgentPPL();Di2015NewLine    IReportDocument rd = (IReportDocument)r;Di2015NewLine    rd.DocumentName = "SomeReport";Di2015NewLine    ExportReport(rd);Di2015NewLine}Di2015NewLine
11634592Di2015UniqueSeparatorvar query = from g in context.GroupsDi2015NewLine            join m in context.Members on g.Id equals m.GroupId into membersDi2015NewLine            select new Di2015NewLine            {Di2015NewLine              Group = g,Di2015NewLine              MemberCount = members.Count(),Di2015NewLine            };Di2015NewLine
11634650Di2015UniqueSeparator/element/@fooDi2015NewLine/element/@lolDi2015NewLine
11634650Di2015UniqueSeparator  XmlDocument o = new XmlDocument();Di2015NewLine  o.Load(@"c:\\file.xml");Di2015NewLine  var attribute1 = o.SelectSingleNode("/element/@foo");Di2015NewLine
11634730Di2015UniqueSeparator    var provider = new CGDataProvider(bytes, 0, bytes.Length);Di2015NewLine    int bitsPerComponent = 8;Di2015NewLine    int components = 4;Di2015NewLine    int height = bytes.Length / components / width;Di2015NewLine    int bitsPerPixel = components * bitsPerComponent;Di2015NewLine    int bytesPerRow = components * width;   // Tip:  When you create a bitmap graphics context, youâ€™ll get the best performance if you make sure the data and bytesPerRow are 16-byte aligned.Di2015NewLine    bool shouldInterpolate = false;Di2015NewLine    var colorSpace = CGColorSpace.CreateDeviceRGB();Di2015NewLine    var cgImage = new CGImage(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, Di2015NewLine                              colorSpace, CGImageAlphaInfo.Last, provider,Di2015NewLine                              null, shouldInterpolate, CGColorRenderingIntent.Default);Di2015NewLine
11634730Di2015UniqueSeparator    var mono = new CIColorMonochromeDi2015NewLine    {Di2015NewLine        Color = CIColor.FromRgb(1, 1, 1),Di2015NewLine        Intensity = 1.0f,Di2015NewLine        Image = CIImage.FromCGImage(image)Di2015NewLine    };Di2015NewLine    CIImage output = mono.OutputImage;Di2015NewLine    var context = CIContext.FromOptions(null);Di2015NewLine    var renderedImage = context.CreateCGImage(output, output.Extent);Di2015NewLine
11634744Di2015UniqueSeparatorEnvironment.NewLine
11634744Di2015UniqueSeparator'\\n'
11634832Di2015UniqueSeparatorGetType()
11634832Di2015UniqueSeparatorobject o = "Some string";Di2015NewLine
11634832Di2015UniqueSeparatorobject
11634832Di2015UniqueSeparatorstring
11634832Di2015UniqueSeparatorConsole.WriteLine(o.GetType());Di2015NewLine
11634832Di2015UniqueSeparatoro
11634832Di2015UniqueSeparatorSystem.Object
11634832Di2015UniqueSeparatorobject
11634832Di2015UniqueSeparatorint
11634832Di2015UniqueSeparatordouble
11634832Di2015UniqueSeparatorSystem.Guid
11634832Di2015UniqueSeparatornull
11634832Di2015UniqueSeparator// int is a value typeDi2015NewLineint i = 0;Di2015NewLine// Prints True for any value of iDi2015NewLineConsole.WriteLine(i.GetType() == typeof(int));Di2015NewLineDi2015NewLine// string is a sealed reference typeDi2015NewLinestring s = "Foo";Di2015NewLine// Prints True for any value of sDi2015NewLineConsole.WriteLine(s == null || s.GetType() == typeof(string));Di2015NewLineDi2015NewLine// object is an unsealed reference typeDi2015NewLineobject o = new FileInfo("C:\\\\f.txt");Di2015NewLine// Prints False, but could be true for some values of oDi2015NewLineConsole.WriteLine(o == null || o.GetType() == typeof(object));Di2015NewLineDi2015NewLine// FileSystemInfo is an abstract typeDi2015NewLineFileSystemInfo fsi = new DirectoryInfo("C:\\\\");Di2015NewLine// Prints False for all non-null values of fsiDi2015NewLineConsole.WriteLine(fsi == null || fsi.GetType() == typeof(FileSystemInfo));Di2015NewLine
11634934Di2015UniqueSeparator[HttpPost]Di2015NewLine[ValidateAntiForgeryToken]Di2015NewLine
11634934Di2015UniqueSeparator@Html.AntiForgeryToken()Di2015NewLine
11634945Di2015UniqueSeparatorclass PersonDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Gender { get; set; }Di2015NewLine    public string Country { get; set; }Di2015NewLine}Di2015NewLine
11634945Di2015UniqueSeparatorList<Person> result = new List<Person>();Di2015NewLineDi2015NewLinefor (int i = 0; i < list.Count; i += 3) { Di2015NewLine    result.Add(Di2015NewLine        new Person { Name = list[i], Gender = list[i+1], Country = list[i+2] }); Di2015NewLine} Di2015NewLine
11634953Di2015UniqueSeparator<StackPanel>Di2015NewLine    <TextBlock Text="Please select an item!">Di2015NewLine        <TextBlock.Style>Di2015NewLine            <Style TargetType="TextBlock">Di2015NewLine                <Setter Property="Visibility" Value="Collapsed" />Di2015NewLine                <Style.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding SelectedItem, ElementName=lb}" Value="{x:Null}">Di2015NewLine                        <Setter Property="Visibility" Value="Visible" />Di2015NewLine                    </DataTrigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine        </TextBlock.Style>Di2015NewLine    </TextBlock>Di2015NewLine    <ListBox Name="lb" ItemsSource="12345" />Di2015NewLine</StackPanel>Di2015NewLine
11634953Di2015UniqueSeparatorItemsSource="12345"
11635179Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineusing System.Text;Di2015NewLineusing System.Web.Mvc;Di2015NewLineusing System.Web.Mvc.Html;Di2015NewLineDi2015NewLinepublic static class HtmlHelpersDi2015NewLine{Di2015NewLine    public static MvcHtmlString BootstrapFormItem<TModel, TValue>(this HtmlHelper<TModel> helper, Expression<Func<TModel, TValue>> expression)Di2015NewLine    {Di2015NewLine        StringBuilder html = new StringBuilder("<div class=\\"control-group\\">");Di2015NewLine        html.AppendLine(helper.LabelFor(expression).ToString());Di2015NewLine        html.AppendLine("<div class=\\"controls\\">");Di2015NewLine        html.AppendLine(helper.DisplayFor(expression).ToString());Di2015NewLine        html.AppendLine(helper.ValidationMessageFor(expression).ToString());Di2015NewLine        html.AppendLine("</div>");Di2015NewLine        html.AppendLine("</div>");Di2015NewLine        return MvcHtmlString.Create(html.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11635179Di2015UniqueSeparatorHtmlHelper<TModel>
11635179Di2015UniqueSeparator@model MyClassDi2015NewLineDi2015NewLine@Html.BootstrapFormItem(x => x.Name)Di2015NewLine
11635179Di2015UniqueSeparator<div class="control-group">Di2015NewLine    <label for="Name">Name</label>Di2015NewLine    <div class="controls">Di2015NewLine        naspinskiDi2015NewLine        <span class="field-validation-valid" data-valmsg-for="Name" data-valmsg-replace="true"/>Di2015NewLine    </div>Di2015NewLine</div>Di2015NewLine
11635190Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLineDataSet _dataset;Di2015NewLineDi2015NewLinepublic Form1(DataSet dataSet)Di2015NewLine{Di2015NewLine    _dataset = dataset;Di2015NewLine    InitializeComponent();Di2015NewLine}Di2015NewLine//..Di2015NewLineDi2015NewLinepublic partial class Form2 : FormDi2015NewLine{Di2015NewLineDataSet _dataset;Di2015NewLineDi2015NewLinepublic Form2(DataSet dataSet)Di2015NewLine{Di2015NewLine    _dataset = dataset;Di2015NewLine    InitializeComponent();Di2015NewLine}Di2015NewLine//..Di2015NewLineDi2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        DataSet DS = new DataSet();Di2015NewLineDi2015NewLine        Application.Run(new Form1(DS));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11635374Di2015UniqueSeparatorDoWork
11635374Di2015UniqueSeparatorCompleted
11635374Di2015UniqueSeparatorTasks
11635374Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Task.Factory.StartNew(() => doStuffInBackground())Di2015NewLine        .ContinueWith(task => updateUI(), TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine}Di2015NewLineDi2015NewLineprivate void updateUI()Di2015NewLine{Di2015NewLine    throw new NotImplementedException();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void doStuffInBackground()Di2015NewLine{Di2015NewLine    throw new NotImplementedException();Di2015NewLine}Di2015NewLine
11635374Di2015UniqueSeparatorBackgroundWorker
11635427Di2015UniqueSeparatorDictionary<string, Func<object>>
11635427Di2015UniqueSeparatorFunc<object>
11635427Di2015UniqueSeparatorFunc<object>
11635427Di2015UniqueSeparatorEvaluateExpressionUsingTheseValues(values)
11635665Di2015UniqueSeparatorWHERE
11635665Di2015UniqueSeparatorSELECT top(1)@id1 = clintId FROM dbo.Clint WHERE Name = @clintName order by clintId descDi2015NewLineSELECT top(1)@id2 =  itemId from dbo.Item_Configuration WHERE name = @itemName order by itemId descDi2015NewLine
11635762Di2015UniqueSeparatorReading
11635762Di2015UniqueSeparatorWriting
11635762Di2015UniqueSeparatorStreamReader sr = new StreamReader(@"C:/store.dll"); //for readingDi2015NewLineStreamWriter sw = new StreamWriter(@"C:/store.dll"); //for writingDi2015NewLine
11635884Di2015UniqueSeparatorProcess
11635884Di2015UniqueSeparatorProcess.Start(@"C:\\some_location\\myapplication.exe");Di2015NewLine
11635884Di2015UniqueSeparatorProcessStartInfo startInfo = new ProcessStartInfo();Di2015NewLinestartInfo.FileName = @"C:\\some_location\\myapplication.exe";Di2015NewLinestartInfo.Arguments = "header.h";Di2015NewLineProcess.Start(startInfo);Di2015NewLine
11635965Di2015UniqueSeparatorWebDriver driver = new FirefoxDriver();Di2015NewLinedriver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(10));Di2015NewLineIWebElement WaitForPage = driver.FindElement(By.XPath((String)data));Di2015NewLine
11636006Di2015UniqueSeparatorBarUpdateDelegate Delegation = new BarUpdateDelegate(Value, Maximum, Bar); //error CS0149: Method name expectedDi2015NewLineBar.Invoke(Delegation);Di2015NewLine
11636006Di2015UniqueSeparatorInvoke
11636006Di2015UniqueSeparatorBarUpdateDelegate delegation = new BarUpdateDelegate(UpdateBar);Di2015NewLineBar.Invoke(delegation, Value, Maximum, Bar);Di2015NewLine
11636006Di2015UniqueSeparatorAction<...>
11636006Di2015UniqueSeparatorprivate void UpdateBar(int value, int maximum, ProgressBar bar)Di2015NewLine{Di2015NewLine    if (bar.InvokeRequired)Di2015NewLine    {Di2015NewLine        bar.Invoke(new Action<int, int, ProgressBar>(UpdateBar),Di2015NewLine                   value, maximum, bar);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        bar.Maximum = maximum;Di2015NewLine        bar.Value = value;Di2015NewLineDi2015NewLine        // Insert the percentageDi2015NewLine        int percent = value * 100 / maximum;Di2015NewLine        bar.CreateGraphics().DrawString(percent.ToString() + "%", new Font("Arial", 8.25f, FontStyle.Regular), Brushes.Black, bar.Width / 2 - 10, bar.Height / 2 - 7);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11636078Di2015UniqueSeparator12:00 AM
11636078Di2015UniqueSeparator6:00 AM
11636121Di2015UniqueSeparatorIDatabase.GetNewCommand()
11636121Di2015UniqueSeparatorIDbCommand GetNewCommand();Di2015NewLine
11636121Di2015UniqueSeparatorpublic MySqlCommand GetNewCommand()Di2015NewLine{Di2015NewLine    ... Di2015NewLine}Di2015NewLine
11636121Di2015UniqueSeparatorExecuteReaderCommand
11636121Di2015UniqueSeparatorIDbCommand
11636121Di2015UniqueSeparatorIDatabase
11636121Di2015UniqueSeparatorMySqlCommand
11636121Di2015UniqueSeparatorMysqlDatabase
11636121Di2015UniqueSeparatorSqlCommand
11636121Di2015UniqueSeparatorIDatabase
11636121Di2015UniqueSeparatorpublic interface IDatabase<TCommand> where TCommand : IDbCommandDi2015NewLine{Di2015NewLine    DataTable ExecuteReaderCommand(TCommand command);Di2015NewLine    TCommand GetNewCommand();Di2015NewLine}Di2015NewLine
11636130Di2015UniqueSeparatorLEFT JOIN
11636130Di2015UniqueSeparatorOUTER JOIN
11636130Di2015UniqueSeparatorINNER JOIN
11636130Di2015UniqueSeparatorvar LeftJoin = from user in UsersDi2015NewLinejoin chat in ChatsDi2015NewLineon user.Name equals user.Name into JoinedTablesDi2015NewLinefrom row in JoinedTables.DefaultIfEmpty()Di2015NewLineselect new                          Di2015NewLine{Di2015NewLine  Name,Di2015NewLine  AgentStatus,Di2015NewLine  TimeInState,Di2015NewLine  TaskHandled,Di2015NewLine  Region,Di2015NewLine  CChats = chat != null ? chat.CChats : 0Di2015NewLine  AChats = chat != null ? chat.AChats : 0                          Di2015NewLine};Di2015NewLine
11636130Di2015UniqueSeparatorName
11636130Di2015UniqueSeparatorID
11636130Di2015UniqueSeparatorvar result = from table1 in dt1.AsEnumerable()Di2015NewLine             join table2 in dt2.AsEnumerable() Di2015NewLine             on (string)table1["Name"] equals (string)table2["Name"]Di2015NewLine             into joinedDtDi2015NewLine             from table2 in joinedDt.DefaultIfEmpty()Di2015NewLine             select newDi2015NewLine             {Di2015NewLine                 Name = (string)table1["Name"],Di2015NewLine                 Status = (string)table1["Status"],Di2015NewLine                 Time = (double)table1["Time"],Di2015NewLine                 Calls = (double)table1["Calls"],Di2015NewLine                 Region = (string)table1["Region"],Di2015NewLine                 CChats = (table2 != null ? (double)table2["CChats"] : 0)Di2015NewLine             };Di2015NewLine
11636310Di2015UniqueSeparatorpublic class Main : FormDi2015NewLine{Di2015NewLine     // assuming here you have three textboxesDi2015NewLineDi2015NewLine     private void button1_Click(eventargs etc)Di2015NewLine     {Di2015NewLine         OtherForm otherForm = new OtherForm() { Text1 = textbox1.Text, Di2015NewLine                                                 Text2 = textbox2.Text,Di2015NewLine                                                 Text3 = textbox3.Text };Di2015NewLine         otherForm.Show();Di2015NewLine     }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class OtherForm : FormDi2015NewLine{Di2015NewLine    public String Text1 { get; set; }Di2015NewLine    public String Text2 { get; set; }Di2015NewLine    public String Text3 { get; set; }Di2015NewLine}Di2015NewLine
11636322Di2015UniqueSeparatorUnion
11636322Di2015UniqueSeparatorEquals
11636322Di2015UniqueSeparatorEquals
11636322Di2015UniqueSeparatorReferenceEquals
11636322Di2015UniqueSeparatorvar full = leftOuter.Union(rightOuter).Select(Di2015NewLine    i=> new FileMetaData {Di2015NewLine        FilePath = i.FilePath,Di2015NewLine        DbTimestamp = i.DbTimestamp,Di2015NewLine        FsTimestamp = i.FsTimestampDi2015NewLine    });Di2015NewLine
11636322Di2015UniqueSeparatorIEqualityComparer<FileMetaData>
11636322Di2015UniqueSeparatorUnion()
11636322Di2015UniqueSeparatorEquals()
11636322Di2015UniqueSeparatorGetHashCode()
11636322Di2015UniqueSeparatorFileMetaData
11636322Di2015UniqueSeparatorEquals()
11636481Di2015UniqueSeparatorforeach (string value in listBox1.SelectedItems)Di2015NewLine{Di2015NewLine    StreamReader sr = new StreamReader(value);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11636484Di2015UniqueSeparator<system.webServer>Di2015NewLine  <security>Di2015NewLine    <requestFiltering>Di2015NewLine      <requestLimits maxQueryString="nnn"/>Di2015NewLine    </requestFiltering>Di2015NewLine  </security>Di2015NewLine</system.webServer>Di2015NewLine
11636484Di2015UniqueSeparator <httpRuntime maxQueryStringLength="32768" maxUrlLength="65536"/>Di2015NewLine
11636499Di2015UniqueSeparator<configuration>Di2015NewLine    <runtime>Di2015NewLine          <NetFx40_LegacySecurityPolicy enabled="true"/>Di2015NewLine        </runtime>Di2015NewLine</configuration>Di2015NewLine
11636499Di2015UniqueSeparator<runtime>Di2015NewLine<NetFx40_LegacySecurityPolicy enabled="true"/>Di2015NewLine
11636515Di2015UniqueSeparatorCustomerID
11636515Di2015UniqueSeparatorCommandArgument
11636515Di2015UniqueSeparator<asp:LinkButton OnClick="EditCustomer" id="lbtnCustomerName" Di2015NewLine     CommandArgument='<%#Eval("CustomerID")%>'Di2015NewLine     CommandName="CustomerName"Di2015NewLine     OnCommand="LinkButton_Command"Di2015NewLine     Visible="true" runat="server"Di2015NewLine     ToolTip="Click to edit customer."><%# DataBinder.Eval(Container.DataItem, "custLastName") + ", " + DataBinder.Eval(Container.DataItem, "custFirstName" + ", " + DataBinder.Eval(Container.DataItem, "custID")%>Di2015NewLine</asp:LinkButton>Di2015NewLine
11636515Di2015UniqueSeparatorCommand
11636515Di2015UniqueSeparatorvoid LinkButton_Command(Object sender, CommandEventArgs e) Di2015NewLine{Di2015NewLine   String CustomerID = e.CommandArgument.ToString();Di2015NewLine}Di2015NewLine
11636545Di2015UniqueSeparatorusing
11636545Di2015UniqueSeparatorout
11636545Di2015UniqueSeparatorref
11636545Di2015UniqueSeparatorDisposableInt theInt = new DisposableInt(1);Di2015NewLineusing (theInt)Di2015NewLine{Di2015NewLine    AddOne(ref theInt);Di2015NewLine}Di2015NewLine
11636545Di2015UniqueSeparatorref
11636545Di2015UniqueSeparatorref
11636561Di2015UniqueSeparatorItemHeight
11636561Di2015UniqueSeparatorItemWidth
11636604Di2015UniqueSeparatorEnumerable.SelectMany
11636604Di2015UniqueSeparatorList<int> flattened = allLists.SelectMany(l => l).ToList();Di2015NewLine
11636604Di2015UniqueSeparatorTuple<int, int>
11636604Di2015UniqueSeparatorItem1
11636604Di2015UniqueSeparatorItem2
11636604Di2015UniqueSeparator// create sample dataDi2015NewLinevar allLists = new List<List<int>>() { Di2015NewLine    new List<int>(){ 1,2,3 },Di2015NewLine    new List<int>(){ 4,5,6 },Di2015NewLine    new List<int>(){ 7,8,9 },Di2015NewLine};Di2015NewLineDi2015NewLineList<Tuple<int, int>> flattened = allListsDi2015NewLine    .Select((l, i) => new{ List = l, Position = i + 1 })Di2015NewLine    .SelectMany(x => x.List.Select(i => Tuple.Create(x.Position, i)))Di2015NewLine    .ToList();Di2015NewLineDi2015NewLine// now you have all numbers flattened in one list:Di2015NewLineforeach (var t in flattened)Di2015NewLine{Di2015NewLine    Console.WriteLine("Number: " + t.Item2); // prints out the numberDi2015NewLine}Di2015NewLine// unflattenDi2015NewLineallLists = flattened.GroupBy(t => t.Item1)Di2015NewLine                    .Select(g => g.Select(t => t.Item2).ToList())Di2015NewLine                    .ToList();Di2015NewLine
11636717Di2015UniqueSeparator public void findNewPartner(string School, string Major)Di2015NewLine    {Di2015NewLine        SoloUser soloUser = null;Di2015NewLineDi2015NewLine        lock (soloUsers)Di2015NewLine        {Di2015NewLine            soloUser = soloUsers.FirstOrDefault(s => (s.School == School) && (s.Major == Major));Di2015NewLine        }Di2015NewLineDi2015NewLine        string sessionId = null;Di2015NewLineDi2015NewLine        // will we be creating a new soloUser?Di2015NewLine        if (soloUser == null)Di2015NewLine        { Di2015NewLine            // then we'll need a new session for that new userDi2015NewLine            sessionId = TokenHelper.GenerateSession();Di2015NewLine        }Di2015NewLineDi2015NewLine        lock (soloUsers)Di2015NewLine        {Di2015NewLine            soloUser = soloUsers.FirstOrDefault(s => (s.School == School) && (s.Major == Major));Di2015NewLine            if (soloUser != null)Di2015NewLine            {Di2015NewLine                // woops! Guess we don't need that sessionId after all.  Oh well! Carry on...Di2015NewLine                if (soloUser.ConnectionId != Context.ConnectionId)Di2015NewLine                {                                                                     Di2015NewLine                    soloUsers.Remove(soloUser);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {   Di2015NewLine                // use the sessionid computed earlierDi2015NewLine                soloUser = new SoloUserDi2015NewLine                {Di2015NewLine                    Major = Major,Di2015NewLine                    School = School,Di2015NewLine                    SessionId = sessionId,Di2015NewLine                    ConnectionId = Context.ConnectionIdDi2015NewLine                };Di2015NewLineDi2015NewLine                soloUsers.Add(soloUser);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    } Di2015NewLine
11636720Di2015UniqueSeparatornew
11636720Di2015UniqueSeparatorBuffer buffer = new Buffer(4);Di2015NewLinebuffer[0] = 'a';Di2015NewLine
11636747Di2015UniqueSeparator[XmlRoot("SerializableColor")]Di2015NewLinepublic class SerializableColorDi2015NewLine{Di2015NewLine    [XmlAttribute("R")]Di2015NewLine    public int R { get; set; }Di2015NewLine    [XmlAttribute("G")]Di2015NewLine    public int R { get; set; }Di2015NewLine    [XmlAttribute("B")]Di2015NewLine    public int B { get; set; }    Di2015NewLine}Di2015NewLine
11636747Di2015UniqueSeparator    public void ReadXml(XmlReader reader)Di2015NewLine    {Di2015NewLine        string data = null;Di2015NewLineDi2015NewLine        reader.MoveToAttribute("Color");Di2015NewLine        if (reader.ReadAttributeValue())Di2015NewLine        {Di2015NewLine            data = reader.Value;Di2015NewLine        }Di2015NewLine        reader.ReadEndElement();Di2015NewLineDi2015NewLine        var split = data.Split(' ');Di2015NewLine        R = int.Parse(split[0]);Di2015NewLine        G = int.Parse(split[1]);Di2015NewLine        B = int.Parse(split[2]);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteXml(XmlWriter writer)Di2015NewLine    {Di2015NewLine        writer.WriteAttributeString("Color", R + " " + G + " " + B);Di2015NewLine    }Di2015NewLine
11636802Di2015UniqueSeparatorTask.ContinueWith
11636802Di2015UniqueSeparatorTask
11636806Di2015UniqueSeparatorprotected override void SolveInstance(IGH_DataAccess DA)Di2015NewLine
11636808Di2015UniqueSeparator<TextBlock Text="Example" ToolTip="This is an example"Di2015NewLine           ToolTipService.IsEnabled="{Binding TooltipEnabled, Source={x:Static Application.Current}}">Di2015NewLine
11636808Di2015UniqueSeparatorpublic partial class App : Application, INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private bool _tooltipEnabled;Di2015NewLine    public bool TooltipEnabledDi2015NewLine    {Di2015NewLine        get { return _tooltipEnabled; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_tooltipEnabled != value)Di2015NewLine            {Di2015NewLine                _tooltipEnabled = value;Di2015NewLine                RaiseNotifyPropertyChanged("TooltipEnabled");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RaiseNotifyPropertyChanged(string property)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine        {Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(property));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine}Di2015NewLine
11636851Di2015UniqueSeparatortext.Substring(0, text.IndexOf('_'));Di2015NewLine
11636870Di2015UniqueSeparatorList<T>
11636870Di2015UniqueSeparatorList<T>
11636870Di2015UniqueSeparatorConvertAll
11636870Di2015UniqueSeparatorforeach
11636870Di2015UniqueSeparatorToList
11636870Di2015UniqueSeparatorlist1
11636870Di2015UniqueSeparatorlist2
11636870Di2015UniqueSeparatorToList
11636895Di2015UniqueSeparatorFeedData()
11636895Di2015UniqueSeparatorCustomXmlPart
11636895Di2015UniqueSeparatorFeedData()
11636895Di2015UniqueSeparatorMainDocumentPart mainPart = mainDocument.MainDocumentPart;Di2015NewLineDi2015NewLineDim parts = mainPart.CustomXmlPartsDi2015NewLineDi2015NewLineFor Each part As CustomXmlPart In partsDi2015NewLineDi2015NewLine  Dim ms As New MemoryStreamDi2015NewLine  Dim xtw As New XmlTextWriter(ms, Encoding.UTF8)Di2015NewLineDi2015NewLine  ' Create your xml.'Di2015NewLineDi2015NewLine  xtw.WriteStartDocument() Di2015NewLine  xtw.WriteStartElement("bla")Di2015NewLine  xtw.WriteEndElement()Di2015NewLine  xtw.WriteEndDocument()Di2015NewLine  xtw.Flush()Di2015NewLineDi2015NewLine  ms.Seek(0, SeekOrigin.Begin)Di2015NewLineDi2015NewLine  part.FeedData(ms) ' Replace old xml in part stream.'Di2015NewLineDi2015NewLine  xtw.Close()    Di2015NewLineDi2015NewLineNextDi2015NewLine
11636956Di2015UniqueSeparatorType typeDefinition = typeof(MyObject<>);Di2015NewLineType constructedType = typeDefinition.MakeGenericType(t);Di2015NewLineMethodInfo method = constructedType.GetMethod("MyFunction");Di2015NewLinemethod.Invoke(null, null);Di2015NewLine
11637019Di2015UniqueSeparatorpublic class ListToBooleanConverter : IValueConverterDi2015NewLine{Di2015NewLineDi2015NewLine  public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine  {Di2015NewLine    if ((value != null) & (parameter != null)) {Di2015NewLine      try {Di2015NewLine        Int16 itmNum = Convert.ToInt32(parameter);Di2015NewLine        List<bool> lst = value;Di2015NewLine        return lst[itmNum];Di2015NewLine      } catch (Exception ex) {Di2015NewLine        return null;Di2015NewLine      }Di2015NewLine    }Di2015NewLine      return null;Di2015NewLine  }Di2015NewLineDi2015NewLine  public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine  {Di2015NewLine    throw new NotImplementedException("This method or operation is not implemented.");Di2015NewLine  }Di2015NewLine}Di2015NewLine
11637019Di2015UniqueSeparatorIsExpanded="{Binding Path=ListIsExpanded, Converter={StaticResource ListToBooleanConverter}, ConverterParameter=5}">Di2015NewLine
11637046Di2015UniqueSeparatorMain
11637046Di2015UniqueSeparatorMain
11637046Di2015UniqueSeparatorvar returnValue = Program.Main(arguments);Di2015NewLineAssert.AreEqual(Utility.Status.Success, returnValue);Di2015NewLine
11637098Di2015UniqueSeparatorSocket.Send
11637098Di2015UniqueSeparatorStream
11637098Di2015UniqueSeparatorNetworkStream.Write
11637098Di2015UniqueSeparatorSocket.Send
11637098Di2015UniqueSeparatorNetworkStream
11637098Di2015UniqueSeparatorReceive
11637098Di2015UniqueSeparatorSend
11637098Di2015UniqueSeparatorReceive
11637098Di2015UniqueSeparatorStream
11637098Di2015UniqueSeparatorSocket
11637098Di2015UniqueSeparatorStream
11637233Di2015UniqueSeparatorstring SpeakerName = (name.First ?? "") + " " + (name.Last ?? "");Di2015NewLine
11637233Di2015UniqueSeparatorstring SpeakerName = name.First ?? ("" + " "  +  (name.Last ?? ""));Di2015NewLine
11637233Di2015UniqueSeparatorstring SpeakerName = name.First + " " + name.Last;Di2015NewLine
11637233Di2015UniqueSeparatorstring SpeakerName = String.Format("{0} {1}", name.First, name.Last)Di2015NewLine
11637233Di2015UniqueSeparator.Trim()
11637233Di2015UniqueSeparatorstring SpeakerName = name.First + " " + name.Last;Di2015NewLineSpeakerName = SpeakerName == " " ? String.Empty : SpeakerName;Di2015NewLine
11637233Di2015UniqueSeparator.Trim()
11637281Di2015UniqueSeparatorConsole.WriteLine(property.GetValue(customer).ToString());Di2015NewLine
11637281Di2015UniqueSeparatorGetGetMethod
11637410Di2015UniqueSeparatorstring directoryPath = Path.GetDirectoryName(chosenFile); // Returns the directory and the file name to reference the fileDi2015NewLine
11637410Di2015UniqueSeparatorFileStream InputBin = new FileStream(chosenFile, FileMode.Open,FileAccess.Read, FileShare.None);Di2015NewLine
11637410Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    openFD.Title = "Insert a BIN file";Di2015NewLine    openFD.InitialDirectory = "C:"; // Chooses the default location to open the fileDi2015NewLine    openFD.FileName = " "; // Iniitalizes the File nameDi2015NewLine    openFD.Filter = "Binary File|*.bin|Text File|*.txt"; // FIlters the types of files allowed to by chosenDi2015NewLineDi2015NewLine    if (openFD.ShowDialog() != DialogResult.Cancel)Di2015NewLine    {Di2015NewLine        chosenFile = openFD.FileName;Di2015NewLineDi2015NewLine        richTextBox1.Text += chosenFile; //You may want to replace this with = unless you mean to append something that is already there.Di2015NewLineDi2015NewLine        FileStream InputBin = new FileStream(chosenFile, FileMode.Open,FileAccess.Read, FileShare.None);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11637414Di2015UniqueSeparatorSystem.Configuration.SectionInformation.ProtectSection
11637422Di2015UniqueSeparatorList<string>
11637422Di2015UniqueSeparatorstring val = "Name";Di2015NewLinestring toInsert = val;Di2015NewLineint n = 1;Di2015NewLinewhile(list.Contains(toInsert))Di2015NewLine{Di2015NewLine   toInsert = val + n++;Di2015NewLine}Di2015NewLinelist.Add(toInsert);Di2015NewLine
11637432Di2015UniqueSeparatorSystem.String
11637432Di2015UniqueSeparatorIndexOf
11637432Di2015UniqueSeparatorpublic extern int IndexOf(char value, int startIndex, int count);Di2015NewLine
11637583Di2015UniqueSeparatorEnum.ToString
11637583Di2015UniqueSeparatorDictionary<E, string>
11637583Di2015UniqueSeparatorToString()
11637695Di2015UniqueSeparatorYou can use Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine      //your treatment does not contain throw ex.Di2015NewLine      //mute exception in order to not change stateDi2015NewLine    }Di2015NewLineDi2015NewLineYou can use this in your webform or in your gloabl.asax in Application_Error (in order to centralize exception treatment)Di2015NewLine
11637698Di2015UniqueSeparatorint count;Di2015NewLineif (entries != null)Di2015NewLine  count = entries.Count();Di2015NewLine
11637710Di2015UniqueSeparatorAssembly assembly = Assembly.LoadFrom(@"C:\\MyProjectB\\bin\\Debug\\myProjectB.dll");Di2015NewLine
11637710Di2015UniqueSeparatorAssembly assembly = Assembly.LoadFrom(@"..\\..\\..\\MyProjectB\\bin\\Debug\\myProjectB.dll");Di2015NewLine
11637793Di2015UniqueSeparatorreturn View();Di2015NewLine
11637793Di2015UniqueSeparatorvar cm = new CalculaterModel();Di2015NewLinereturn View(cm);Di2015NewLine
11637813Di2015UniqueSeparatorint last = source.IndexOf(end-keyword, first + start-keyword.Length ) Di2015NewLine           + end-keyword.Length;Di2015NewLine
11637822Di2015UniqueSeparatorMain()
11637822Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    public class sampleDi2015NewLine    {Di2015NewLine        public static void Main()Di2015NewLine        {Di2015NewLine            Console.WriteLine("My Output...");Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace ConsoleApplication2Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            sample.Main();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11637822Di2015UniqueSeparatorMain()
11637822Di2015UniqueSeparatorMain()
11637838Di2015UniqueSeparator([a-zA-Z]*):([a-zA-Z0-9,]*)Di2015NewLine
11637838Di2015UniqueSeparator(\\w*):([\\w\\d,]*)Di2015NewLine
11637838Di2015UniqueSeparator[[a-z][A-Z]]
11638154Di2015UniqueSeparator<?phpDi2015NewLine$str = "admin";Di2015NewLine$strUtf32 = mb_convert_encoding($str, "UTF-32LE");Di2015NewLineecho md5($strUtf32);Di2015NewLine?>Di2015NewLine
11638230Di2015UniqueSeparatorInvalidCastException
11638256Di2015UniqueSeparatorcontainer.RegisterType<IB, B>(new InjectionConstructor(container.Resolve<IC>(), "myvalue-value"));Di2015NewLine
11638369Di2015UniqueSeparatorGetHtmlPage
11638369Di2015UniqueSeparatorstring locatorReport = Foo.GetHtmlPage(URL);Di2015NewLine
11638369Di2015UniqueSeparatorFoo
11638369Di2015UniqueSeparatorWebClient
11638369Di2015UniqueSeparatorDownloadString
11638391Di2015UniqueSeparator@Sam I am
11638538Di2015UniqueSeparatorname
11638538Di2015UniqueSeparatorInputHelper
11638538Di2015UniqueSeparatorCheckBoxHelper
11638538Di2015UniqueSeparatorCheckBoxFor
11638538Di2015UniqueSeparatortype
11638538Di2015UniqueSeparatorname
11638538Di2015UniqueSeparatorvalue
11638538Di2015UniqueSeparatorpublic void MergeAttribute(string key, string value)Di2015NewLine{Di2015NewLine    bool flag = false;Di2015NewLine    this.MergeAttribute(key, value, flag);Di2015NewLine}Di2015NewLine
11638538Di2015UniqueSeparatorMergeAttribute
11638538Di2015UniqueSeparatorTagBuilder
11638538Di2015UniqueSeparatorpublic void MergeAttribute(string key, string value, bool replaceExisting)Di2015NewLine{Di2015NewLine    if (!string.IsNullOrEmpty(key))Di2015NewLine    {Di2015NewLine        if (replaceExisting || !this.Attributes.ContainsKey(key))Di2015NewLine        {Di2015NewLine            this.Attributes[key] = value;Di2015NewLine        }Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        throw new ArgumentException(CommonResources.Argument_Cannot_Be_Null_Or_Empty, "key");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11638538Di2015UniqueSeparatorIf
11638538Di2015UniqueSeparatorif
11638538Di2015UniqueSeparatorname
11638538Di2015UniqueSeparatorAttributes
11638538Di2015UniqueSeparatorreturn
11638611Di2015UniqueSeparator$().SPServices.SPArrangeChoices({Di2015NewLinecolumnName: "Hardware Type",Di2015NewLineperRow: 2Di2015NewLine});Di2015NewLine
11638611Di2015UniqueSeparator$().SPServices.SPArrangeChoices({Di2015NewLinecolumnName: "Hardware Type",Di2015NewLineperRow: 7Di2015NewLine});Di2015NewLine
11638695Di2015UniqueSeparatorwhile (vFirstName != "")
11638695Di2015UniqueSeparatorvFirstName
11638695Di2015UniqueSeparator.Value
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatorwhile (true) {Di2015NewLine    // Split the satements Di2015NewLine    var columnACell = sheet.get_Range("A" + vIndex.ToString());Di2015NewLine    var columnBCell = sheet.get_Range("B" + vIndex.ToString());Di2015NewLine    var columnACellValue = columnACell.Value;Di2015NewLine    var columnBCellValue = columnBCell.Value;Di2015NewLineDi2015NewLine    if (columnACellValue != null && columnBCellValue != null) {Di2015NewLine        vFirstName = columnACellValue.ToString();Di2015NewLine        vLastName = columnBCellValue.ToString();Di2015NewLineDi2015NewLine    } else {Di2015NewLine        break;Di2015NewLine    }Di2015NewLineDi2015NewLine    this.SaveNewCustomer(vFirstName, vLastName);Di2015NewLineDi2015NewLine    vIndex++;Di2015NewLineDi2015NewLine};Di2015NewLine
11638695Di2015UniqueSeparatorExcel.Quit()
11638695Di2015UniqueSeparator.Value
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatorsheet
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatorget_Range()
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatorValue
11638695Di2015UniqueSeparatorValue
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatornull
11638695Di2015UniqueSeparatorvar columnACell = sheet.get_Range("A" + vIndex.ToString());Di2015NewLinevar columnBCell = sheet.get_Range("B" + vIndex.ToString())Di2015NewLinevar columnACellValue = columnACell.Value;Di2015NewLinevar columnBCellValue = columnBCell.Value;Di2015NewLineDi2015NewLineif (columnACellValue != null && columnBCellValue != null) {Di2015NewLine    vFirstName = columnACellValue.ToString(); Di2015NewLine    vLastName = columnBCellValue.ToString();Di2015NewLine}Di2015NewLine
11638695Di2015UniqueSeparatorvar
11638740Di2015UniqueSeparatorMath.Sin
11638740Di2015UniqueSeparatorMath.Cos
11638740Di2015UniqueSeparatorpi
11638772Di2015UniqueSeparatorGridVew
11638772Di2015UniqueSeparatorUpdatePanel
11638772Di2015UniqueSeparatorUpdatePanel
11638772Di2015UniqueSeparatorUpdatePanel
11638802Di2015UniqueSeparatorOnModelCreating
11638802Di2015UniqueSeparatornew MyDbContext()
11639070Di2015UniqueSeparatorActionResult
11639070Di2015UniqueSeparatorRedirectResult
11639070Di2015UniqueSeparatorpublic sealed class RedirectResultNoBody : ActionResultDi2015NewLine{Di2015NewLine    private readonly string location;Di2015NewLine    public RedirectResultNoBody(string location) Di2015NewLine    {Di2015NewLine        this.location = location;Di2015NewLine    }Di2015NewLine    public override void ExecuteResult(ControllerContext context) Di2015NewLine    {Di2015NewLine        var response = context.HttpContext.Response;Di2015NewLine        response.StatusCode = 302;Di2015NewLine        response.RedirectLocation = location;Di2015NewLine        response.End();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11639070Di2015UniqueSeparatorpublic ActionResult Redirect()Di2015NewLine{Di2015NewLine    return new RedirectResultNoBody("http://url.com");Di2015NewLine}Di2015NewLine
11639288Di2015UniqueSeparatortask.Wait()
11639434Di2015UniqueSeparatorasync
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparatorScrapeData
11639434Di2015UniqueSeparatorTask<T>
11639434Di2015UniqueSeparatorasync
11639434Di2015UniqueSeparatorasync Task<DataSet> ScrapeDataAsync(Uri url)Di2015NewLine{Di2015NewLine    // Create the HttpClientHandler which will handle cookies.Di2015NewLine    var handler = new HttpClientHandler();Di2015NewLineDi2015NewLine    // Set cookies on handler.Di2015NewLineDi2015NewLine    // Await on an async call to fetch here, convert to a dataDi2015NewLine    // set and return.Di2015NewLine    var client = new HttpClient(handler);Di2015NewLineDi2015NewLine    // Wait for the HttpResponseMessage.Di2015NewLine    HttpResponseMessage response = await client.GetAsync(url);Di2015NewLineDi2015NewLine    // Get the content, await on the string content.Di2015NewLine    string content = await response.Content.ReadAsStringAsync();Di2015NewLineDi2015NewLine    // Process content variable here into a data set and return.Di2015NewLine    DataSet ds = ...;Di2015NewLineDi2015NewLine    // Return the DataSet, it will return Task<DataSet>.Di2015NewLine    return ds;Di2015NewLine}Di2015NewLine
11639434Di2015UniqueSeparatorWebClient
11639434Di2015UniqueSeparatorTask<T>
11639434Di2015UniqueSeparatorHttpClient
11639434Di2015UniqueSeparatorHttpClient
11639434Di2015UniqueSeparatorHttpClientHandler
11639434Di2015UniqueSeparatorCookieContainer
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparatorTask<T>
11639434Di2015UniqueSeparatorDataSet alldata = ...;Di2015NewLineDi2015NewLinevar tasks = new List<Task<DataSet>>();Di2015NewLineDi2015NewLineforeach(var url in the8000urls)Di2015NewLine{Di2015NewLine    // ScrapeData downloads the html from the url with Di2015NewLine    // WebClient.DownloadStringDi2015NewLine    // and scrapes the data into several datatables which Di2015NewLine    // it returns as a dataset.Di2015NewLine    tasks.Add(ScrapeDataAsync(url));Di2015NewLine}Di2015NewLine
11639434Di2015UniqueSeparatorallData
11639434Di2015UniqueSeparatorContinueWith
11639434Di2015UniqueSeparatorTask<T>
11639434Di2015UniqueSeparatorallData
11639434Di2015UniqueSeparatorDataSet alldata = ...;Di2015NewLineDi2015NewLinevar tasks = new List<Task<DataSet>>();Di2015NewLineDi2015NewLineforeach(var url in the8000urls)Di2015NewLine{Di2015NewLine    // ScrapeData downloads the html from the url with Di2015NewLine    // WebClient.DownloadStringDi2015NewLine    // and scrapes the data into several datatables which Di2015NewLine    // it returns as a dataset.Di2015NewLine    tasks.Add(ScrapeDataAsync(url).ContinueWith(t => {Di2015NewLine        // Lock access to the data set, since this isDi2015NewLine        // async now.Di2015NewLine        lock (allData)Di2015NewLine        {Di2015NewLine             // Add the data.Di2015NewLine        }Di2015NewLine    });Di2015NewLine}Di2015NewLine
11639434Di2015UniqueSeparatorWhenAll
11639434Di2015UniqueSeparatorTask
11639434Di2015UniqueSeparatorawait
11639434Di2015UniqueSeparator// After your loop.Di2015NewLineawait Task.WhenAll(tasks);Di2015NewLineDi2015NewLine// Process allDataDi2015NewLine
11639434Di2015UniqueSeparatorforeach
11639434Di2015UniqueSeparatorWhenAll
11639434Di2015UniqueSeparatorIEnumerable<T>
11639434Di2015UniqueSeparatorDataSet alldata;Di2015NewLineDi2015NewLinevar tasks = Di2015NewLine    from url in the8000UrlsDi2015NewLine    select ScrapeDataAsync(url).ContinueWith(t => {Di2015NewLine        // Lock access to the data set, since this isDi2015NewLine        // async now.Di2015NewLine        lock (allData)Di2015NewLine        {Di2015NewLine             // Add the data.Di2015NewLine        }Di2015NewLine    });Di2015NewLineDi2015NewLineawait Task.WhenAll(tasks);Di2015NewLineDi2015NewLine// Process allDataDi2015NewLine
11639434Di2015UniqueSeparatorasync
11639434Di2015UniqueSeparatorWait
11639434Di2015UniqueSeparatorTask
11639434Di2015UniqueSeparatorWhenAll
11639434Di2015UniqueSeparator// This will block, waiting for all tasks to complete, allDi2015NewLine// tasks will run asynchronously and when all are done, then theDi2015NewLine// code will continue to execute.Di2015NewLineTask.WhenAll(tasks).Wait();Di2015NewLineDi2015NewLine// Process allData.Di2015NewLine
11639434Di2015UniqueSeparatorTask
11639434Di2015UniqueSeparatorallData
11639434Di2015UniqueSeparatorallData
11639434Di2015UniqueSeparatorDataSet
11639440Di2015UniqueSeparatorCount()
11639440Di2015UniqueSeparatorSaveChanges()
11639440Di2015UniqueSeparatorAny()
11639440Di2015UniqueSeparatorCount()
11639488Di2015UniqueSeparatorWindow
11639555Di2015UniqueSeparatorSelect
11639555Di2015UniqueSeparatorIEnumerable
11639555Di2015UniqueSeparatorforeach
11639555Di2015UniqueSeparatorList<Customer>
11639555Di2015UniqueSeparatorForEach
11639555Di2015UniqueSeparatorHashSet
11639555Di2015UniqueSeparatorUnionWith
11639555Di2015UniqueSeparatorcustomers.UnionWith(innerCustomers);Di2015NewLine
11639580Di2015UniqueSeparatorREFBOOK_URI
11639580Di2015UniqueSeparatorREFJOURNAL_URI
11639580Di2015UniqueSeparatorREF_ID
11639580Di2015UniqueSeparatorJournal
11639580Di2015UniqueSeparatorBook
11639581Di2015UniqueSeparator;
11639581Di2015UniqueSeparatorApplication Name
11639581Di2015UniqueSeparatorUser ID
11639589Di2015UniqueSeparatorget
11639589Di2015UniqueSeparatorISomeReadOnlyInterface readOnly = new SomeFullObject();Di2015NewLineDi2015NewLine// hah, take that read-only interface!Di2015NewLine((SomeFullObject)readOnly).SomeMutatingMethod();Di2015NewLine
11639589Di2015UniqueSeparatorDictionary<TKey, TValue>
11639600Di2015UniqueSeparatorDisplayDateStart
11639600Di2015UniqueSeparatorDisplayDateStart
11639600Di2015UniqueSeparatorSelectedDate
11639600Di2015UniqueSeparatorprivate void button20_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    // This block sets the TextBlock to a sensible default if dates haven't been pickedDi2015NewLine    if(!datePicker1.SelectedDate.HasValue || !datePicker2.SelectedDate.HasValue)Di2015NewLine    {Di2015NewLine        textBlock10.Text = "Select dates";Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Because the nullable SelectedDate properties must have a value to reach this point, Di2015NewLine    // we can safely reference them - otherwise, these statements throw, as you've discovered.Di2015NewLine    DateTime start = datePicker1.SelectedDate.Value.Date;Di2015NewLine    DateTime finish = datePicker2.SelectedDate.Value.Date;Di2015NewLine    TimeSpan difference = finish.Subtract(start);Di2015NewLine    textBlock10.Text = difference.TotalDays.ToString();Di2015NewLine}Di2015NewLine
11639654Di2015UniqueSeparatorImage1.ImageUrl = "/images/test.png";Di2015NewLine
11639654Di2015UniqueSeparatorImage1.ImageUrl = "~/images/test.png";Di2015NewLine
11639839Di2015UniqueSeparatorvar objectSet = entities.GetType( ).GetProperties( )Di2015NewLine    .Where( p => p.PropertyType.IsGenericType Di2015NewLine         && p.PropertyType.GetGenericArguments( )[ 0 ].Name == typeof( T ).Name )Di2015NewLine    .Select( p => p.GetValue( entities, null ) as ObjectSet<T> )Di2015NewLine    .First( );Di2015NewLinereturn objectSet.ToList( );Di2015NewLine
11639841Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // do not rebind the list if this is a postback; user input would be lost Di2015NewLine    if (this.IsPostBack)Di2015NewLine    {Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    CheckBoxList1.DataSource = GetValues();Di2015NewLine    CheckBoxList1.DataBind();Di2015NewLine}Di2015NewLineDi2015NewLineprivate string[] GetValues()Di2015NewLine{Di2015NewLine    // get data from database, with 'select <columnName> from Importtabs'Di2015NewLine    // populate arrayDi2015NewLine    // return values as a string[]Di2015NewLine}Di2015NewLine
11639856Di2015UniqueSeparatormessage
11639856Di2015UniqueSeparatorciphertext
11639856Di2015UniqueSeparatormessage
11639856Di2015UniqueSeparatorcipherText
11639856Di2015UniqueSeparator[DllImport("HC128.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "EncryptDeviceName")]Di2015NewLine public static extern int EncryptDeviceName([In] byte[] message, [In, Out] byte[] ciphertext, ulong msglength);Di2015NewLine
11639856Di2015UniqueSeparatorIn[Attribute]
11639856Di2015UniqueSeparatorOut[Attribute]
11639856Di2015UniqueSeparator[In, Out]
11639858Di2015UniqueSeparatorConsole.WriteLine
11639858Di2015UniqueSeparatorConsole.WriteLine
11640264Di2015UniqueSeparatorpublic class WorkItem {Di2015NewLine    public string InputString;Di2015NewLine    public List<int> startPos;Di2015NewLine    public List<int> len;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void CalcLotsOfStrings(string s, out List<int> startPos, out List<int> len)Di2015NewLine{Di2015NewLine    WorkItem wi1 = new WorkItem();Di2015NewLine    wi1.InputString = s;Di2015NewLine    Thread t1 = new Thread(InternalCalcThread1);Di2015NewLine    t1.Start(wi1);Di2015NewLine    WorkItem wi2 = new WorkItem();Di2015NewLine    wi2.InputString = s;Di2015NewLine    Thread t2 = new Thread(InternalCalcThread2);Di2015NewLine    t2.Start(wi2);Di2015NewLineDi2015NewLine    // You can now wait for the threads to complete or start new threadsDi2015NewLine    // When you're done, wi1 and wi2 will be filled with the updated dataDi2015NewLine    // but make sure not to use them until the threads are done!Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static void InternalCalcThread1(object item)Di2015NewLine{Di2015NewLine    WorkItem w = item as WorkItem;Di2015NewLine    w.startPos = new List<int>();Di2015NewLine    w.len = new List<int>();Di2015NewLineDi2015NewLine    // Do work here - populate the work item dataDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static void InternalCalcThread2(object item)Di2015NewLine{Di2015NewLine    // Do work hereDi2015NewLine}Di2015NewLine
11640375Di2015UniqueSeparatorfunction UpdateOrCreateAppSetting(XMLDocument doc, string key, string value)Di2015NewLine{Di2015NewLine    var list = from appNode in doc.Descendants("appSettings").Elements()Di2015NewLine            where appNode.Attribute("key").Value == keyDi2015NewLine            select appNode;Di2015NewLine    var e = list.FirstOrDefault();Di2015NewLineDi2015NewLine    // If the element doesn't exist, create itDi2015NewLine    if (e == null) {Di2015NewLine        e = doc.CreateElement("add")Di2015NewLine        e.Attributes.Append("key", key);Di2015NewLine        e.Attributes.Append("value", value);Di2015NewLine        doc.Descendants("appSettings").AppendChild(e);Di2015NewLineDi2015NewLine    // If the element exists, just change its valueDi2015NewLine    } else {Di2015NewLine        e.Attribute("value").SetValue(value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11640417Di2015UniqueSeparatorthis.Controls.Add(myLabel);Di2015NewLine
11640417Di2015UniqueSeparatorPlaceHolders
11640417Di2015UniqueSeparatorPanels
11640417Di2015UniqueSeparatorpage_load
11640417Di2015UniqueSeparatorRepeater
11640426Di2015UniqueSeparatorObjectDisposedException
11640443Di2015UniqueSeparator//This is your MAIN threadDi2015NewLineThread t = new Thread(new ParameterizedThreadStart(t1));Di2015NewLinet.Start(new Class1());Di2015NewLine//...Di2015NewLinelock(c)Di2015NewLine{Di2015NewLine  c.magic_is_done = true;Di2015NewLine}Di2015NewLine//...Di2015NewLineDi2015NewLinepublic static void t1(Class1 c)Di2015NewLine{Di2015NewLine  //this is your SECOND threadDi2015NewLine  bool stop = false;Di2015NewLine  doDi2015NewLine  {Di2015NewLine    Console.Write(".");Di2015NewLine    Thread.Sleep(1000);Di2015NewLineDi2015NewLine    lock(c)Di2015NewLine    {Di2015NewLine      stop = c.magic_is_done;Di2015NewLine    }Di2015NewLine    while(!stop)Di2015NewLine  }Di2015NewLine}Di2015NewLine
11640758Di2015UniqueSeparatoranything
11640758Di2015UniqueSeparatorstring
11640758Di2015UniqueSeparatordouble
11640758Di2015UniqueSeparatoranything
11640758Di2015UniqueSeparatorAge
11640758Di2015UniqueSeparatordouble
11640758Di2015UniqueSeparatordecimal
11640758Di2015UniqueSeparatorint
11640758Di2015UniqueSeparatordouble
11640758Di2015UniqueSeparator==
11640758Di2015UniqueSeparatora == bDi2015NewLine
11640758Di2015UniqueSeparatorobject.Equals
11640758Di2015UniqueSeparatorEquals(a, b)Di2015NewLine
11640758Di2015UniqueSeparatorconst double Epsilon = 0.0000000001;Di2015NewLinevar areEqual = Math.Abs(a - b) < Epsilon;Di2015NewLine
11640766Di2015UniqueSeparatorstring orig = "12467&89- 1&2467'89 12'46789 12467--89";Di2015NewLineDi2015NewLineRegex regex = new Regex("[&' -]+");Di2015NewLineDi2015NewLinestring newString = regex.Replace(orig, "-");Di2015NewLine
11640766Di2015UniqueSeparator12467-89-1-2467-89-12-46789-12467-8Di2015NewLine
11640911Di2015UniqueSeparatorHttpWebRequest
11640911Di2015UniqueSeparatorHttpWebRequest.AllowWriteStreamBuffering
11640911Di2015UniqueSeparatorfalse
11641035Di2015UniqueSeparatorvar records = new SomeFileReader().Records()Di2015NewLine                                  .Where(record => keys.Contains(record.Key));Di2015NewLineDi2015NewLineforeach (var record in records)Di2015NewLine{Di2015NewLine    Process(record);Di2015NewLine}Di2015NewLine
11641035Di2015UniqueSeparatorIntersect
11641035Di2015UniqueSeparatorsecond
11641035Di2015UniqueSeparatorfirst
11641035Di2015UniqueSeparatorIntersect
11641035Di2015UniqueSeparatorHashSet<T>
11641035Di2015UniqueSeparatorsecond
11641035Di2015UniqueSeparatorfirst
11641035Di2015UniqueSeparatorfirst
11641035Di2015UniqueSeparatorsecond
11641035Di2015UniqueSeparatorvar result = streamingRecordsFromFile.Intersect(smallCollectionInMemory);Di2015NewLine
11641201Di2015UniqueSeparatorDataGrid
11641201Di2015UniqueSeparatorMouseDoubleClick
11641201Di2015UniqueSeparatorsender
11641201Di2015UniqueSeparatorDataGrid
11641201Di2015UniqueSeparatorSelectedItem
11641201Di2015UniqueSeparatorSelectedIndex
11641232Di2015UniqueSeparator"Property1.InnerProperty4.InnerProperty7"
11641232Di2015UniqueSeparatorDictionary<string,string>
11641232Di2015UniqueSeparatornamespace MyNamespaceDi2015NewLine{Di2015NewLine    public class ClassA {Di2015NewLine        int p1 = 1;Di2015NewLine        string p2 = "abcdef"; Di2015NewLine        List<string> p3 = new List<string>() { "ghi","lmn" };Di2015NewLine        ClassB p4 = new ClassB();Di2015NewLine        ClassB p5 = null;Di2015NewLineDi2015NewLine        public int PA1 { get { return p1; } }Di2015NewLine        public string PA2 { get { return p2; } }Di2015NewLine        public List<string> PA3 { get { return p3; } }Di2015NewLine        public ClassB PA4 { get { return p4; } }Di2015NewLine        public ClassB PA5 { get { return p5; } }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ClassB{Di2015NewLine        private string p1 = "zeta";Di2015NewLine        public string PB1 { get { return p1; } }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Program {Di2015NewLineDi2015NewLine        public void Main()Di2015NewLine        {Di2015NewLine            ClassA o = new ClassA();Di2015NewLine            Dictionary<string, string> result = GetPropertiesDeepRecursive(o, "[o]", new List<string>() { "MyNamespace" });Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Returns a dictionary of propertyFullname-value pairs of the given object (and deep recursively for its public properties)Di2015NewLine        /// note: it's object oriented (on purpose) and NOT type oriented! so it will just return values of not null object treesDi2015NewLine        /// <param name="includedNamespaces">a list of full namespaces for whose types you want to deep search in the tree</param>Di2015NewLine        /// </summary>        Di2015NewLine        public Dictionary<string, string> GetPropertiesDeepRecursive(object o, string memberChain, List<string> includedNamespaces)Di2015NewLine        {Di2015NewLineDi2015NewLine            List<string> types_to_exclude_by_design = new List<string>() { "System.string", "System.String" };Di2015NewLineDi2015NewLine            //the results bagDi2015NewLine            Dictionary<string, string> r = new Dictionary<string, string>();Di2015NewLineDi2015NewLine            //if o is null just return value = [null]Di2015NewLine            if (o == null)Di2015NewLine            {Di2015NewLine                r.Add(memberChain, "[null]");Di2015NewLine                return r;Di2015NewLine            }Di2015NewLineDi2015NewLine            //the current object argument typeDi2015NewLine            Type type = o.GetType();Di2015NewLineDi2015NewLine            //reserve a special treatment for specific types by design (like string -that's a list of chars and you don't want to iterate on its items)Di2015NewLine            if (types_to_exclude_by_design.Contains(type.FullName))Di2015NewLine            {Di2015NewLine                r.Add(memberChain, o.ToString());Di2015NewLine                return r;Di2015NewLine            }Di2015NewLineDi2015NewLine            //if the type implements the IEnumerable interface...Di2015NewLine            bool isEnumerable =Di2015NewLine                typeDi2015NewLine                .GetInterfaces()Di2015NewLine                .Any(t => t == typeof(System.Collections.IEnumerable));Di2015NewLine            if (isEnumerable)Di2015NewLine            {Di2015NewLine                int i_item = 0;Di2015NewLine                //loop through the collection using the enumerator strategy and collect all items in the result bagDi2015NewLine                //note: if the collection is empty it will not return anything about its existence,Di2015NewLine                //      because the method is supposed to catch value items not the list itself                Di2015NewLine                foreach (object item in (System.Collections.IEnumerable)o)Di2015NewLine                {Di2015NewLine                    string itemInnerMember = string.Format("{0}[{1}]", memberChain, i_item++);Di2015NewLine                    r = r.Concat(GetPropertiesDeepRecursive(item, itemInnerMember, includedNamespaces)).ToDictionary(e => e.Key, e => e.Value);Di2015NewLine                }Di2015NewLine                return r;Di2015NewLine            }Di2015NewLineDi2015NewLine            //here you need a strategy to exclude types you don't want to inspect deeper like int,string and so onDi2015NewLine            //in those cases the method will just return the value using the specific object.ToString() implementationDi2015NewLine            //now we are using a condition to include some specific types on deeper inspection and exclude all the restDi2015NewLine            if (!includedNamespaces.Contains(type.Namespace))Di2015NewLine            {Di2015NewLine                r.Add(memberChain, o.ToString());Di2015NewLine                return r;Di2015NewLine            }Di2015NewLineDi2015NewLine            //otherwise go deeper in the object tree...            Di2015NewLine            //and foreach object public property collect each valueDi2015NewLine            PropertyInfo[] pList = type.GetProperties();Di2015NewLine            foreach (PropertyInfo p in pList)Di2015NewLine            {Di2015NewLine                object innerObject = p.GetValue(o, null);Di2015NewLine                string innerMember = string.Format("{0}.{1}", memberChain, p.Name);Di2015NewLine                r = r.Concat(GetPropertiesDeepRecursive(innerObject, innerMember, includedNamespaces)).ToDictionary(e => e.Key, e => e.Value);Di2015NewLine            }Di2015NewLine            return r;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11641643Di2015UniqueSeparator/// <summary>Di2015NewLine/// Synchronizes steps between threads.Di2015NewLine/// </summary>Di2015NewLinepublic class QueueSynchronizerDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Constructor.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="minWait">Minimum waiting time until the next try.</param>Di2015NewLine    /// <param name="maxWait">Maximum waiting time until the next try.</param>Di2015NewLine    public QueueSynchronizer(Int32 minWait, Int32 maxWait)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    private Mutex mx = new Mutex();Di2015NewLine    /// <summary>Di2015NewLine    /// Minimum waiting time until the next try.Di2015NewLine    /// </summary>Di2015NewLine    private Int32 minWait = 5;Di2015NewLine    /// <summary>Di2015NewLine    /// Maximum waiting time until the next try.Di2015NewLine    /// </summary>Di2015NewLine    private Int32 maxWait = 500;Di2015NewLineDi2015NewLine    int currentStep = 1;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Key: order in the queue; Value: Time to wait.Di2015NewLine    /// </summary>Di2015NewLine    private Dictionary<int, int> waitingTimeForNextMap = new Dictionary<int, int>();Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Synchronizes by the order in the queue. It starts from 1. If is not Di2015NewLine    /// its turn, the thread waits for a moment, after that, it tries again, Di2015NewLine    /// and so on until its turn.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="orderInTheQueue">Order in the queue. It starts from 1.</param>Di2015NewLine    /// <returns>The <see cref="Mutex"/>The mutex that must be released at the end of turn.Di2015NewLine    /// </returns>Di2015NewLine    public Mutex Sincronize(int orderInTheQueue)Di2015NewLine    {Di2015NewLine        doDi2015NewLine        {Di2015NewLine            //while it is not the turn, the thread will stay in this loop and sleeping for 100, 200, ... 1000 msDi2015NewLine            if (orderInTheQueue != this.currentStep)Di2015NewLine            {Di2015NewLine                //The next in queue will be waiting here (other threads).Di2015NewLine                mx.WaitOne();Di2015NewLine                mx.ReleaseMutex();Di2015NewLineDi2015NewLine                //Prevents 100% processing while the current step does not happenDi2015NewLine                if (!waitingTimeForNextMap.ContainsKey(orderInTheQueue))Di2015NewLine                {Di2015NewLine                    waitingTimeForNextMap[orderInTheQueue] = this.minWait;Di2015NewLine                }Di2015NewLine                Thread.Sleep(waitingTimeForNextMap[orderInTheQueue]);Di2015NewLine                waitingTimeForNextMap[orderInTheQueue] = Math.Min(waitingTimeForNextMap[orderInTheQueue] * 2, this.maxWait);Di2015NewLine            }Di2015NewLine        } while (orderInTheQueue != this.currentStep);Di2015NewLineDi2015NewLine        mx.WaitOne();Di2015NewLine        currentStep++;Di2015NewLine        return mx;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11641643Di2015UniqueSeparatorStart()
11641643Di2015UniqueSeparatorClose()
11641643Di2015UniqueSeparatorQueueSynchronizer
11641643Di2015UniqueSeparator//synchronizerDi2015NewLineprivate static QueueSynchronizer queueSynchronizer;Di2015NewLineDi2015NewLineprivate static Thread instanceCaller;Di2015NewLineprivate static WaitForm instance;Di2015NewLineDi2015NewLineprivate static AutoResetEvent waitFormStarted = new AutoResetEvent(false);Di2015NewLineprivate static object locker = new object();Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Initializes WaitForm to start a single taskDi2015NewLine/// </summary>Di2015NewLine/// <param name="header">WaitForm header</param>Di2015NewLine/// <param name="message">Message displayed</param>Di2015NewLine/// <param name="showProgressBar">True if we want a progress bar, else false</param>Di2015NewLinepublic static void Start(string header, string message, bool showProgressBar)Di2015NewLine{Di2015NewLine    queueSynchronizer = new QueueSynchronizer();Di2015NewLine    InitializeCallerThread(showProgressBar, header, message);Di2015NewLine    instanceCaller.Start();Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Initializes caller thread for executing a single commandDi2015NewLine/// </summary>Di2015NewLine/// <param name="showProgressBar"></param>Di2015NewLine/// <param name="header"></param>Di2015NewLine/// <param name="message"></param>Di2015NewLineprivate static void InitializeCallerThread(bool showProgressBar, string header, string message)Di2015NewLine{Di2015NewLine    waitFormStarted.Reset();Di2015NewLineDi2015NewLine    instanceCaller = new Thread(() =>Di2015NewLine    {Di2015NewLine        lock (locker)Di2015NewLine        {Di2015NewLine            //Queuing to run on first.Di2015NewLine            Mutex mx = queueSynchronizer.Sincronize(1);Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                instance = new WaitForm()Di2015NewLine                        {Di2015NewLine                            Header = header,Di2015NewLine                            Message = message,Di2015NewLine                            IsProgressBarVisible = showProgressBarDi2015NewLine                        };Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                //I think is here that ends the first step!?Di2015NewLine                mx.ReleaseMutex();Di2015NewLine            }Di2015NewLineDi2015NewLine            waitFormStarted.Set();Di2015NewLine        }Di2015NewLine        instance.ShowDialog();Di2015NewLine    });Di2015NewLine    instanceCaller.Name = "WaitForm thread";Di2015NewLine    instanceCaller.SetApartmentState(ApartmentState.STA);Di2015NewLine    instanceCaller.IsBackground = true;Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Closes current formDi2015NewLine/// </summary>Di2015NewLinepublic static void Close()Di2015NewLine{Di2015NewLine    //Queuing to run on second.Di2015NewLine    Mutex mx = queueSynchronizer.Sincronize(2);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        lock (locker)Di2015NewLine        {Di2015NewLine            if (instance != null && !instance.IsClosed)Di2015NewLine            {Di2015NewLine                waitFormStarted.WaitOne();Di2015NewLine                instance.FinalizeWork();Di2015NewLine                instance.Dispatcher.Invoke(Di2015NewLine                    new Action(() =>Di2015NewLine                    {Di2015NewLine                        instance.Close();Di2015NewLine                    }));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        mx.ReleaseMutex();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11641671Di2015UniqueSeparatorforeach(Product product in products.OrderBy((Product source)=>source.Name))Di2015NewLine{Di2015NewLine    // Do something...Di2015NewLine}Di2015NewLine
11641671Di2015UniqueSeparatorforeach(Product product in products.OrderBy((x)=>myOrder2(x)))Di2015NewLine{Di2015NewLine   // Do something...Di2015NewLine}Di2015NewLine
11641874Di2015UniqueSeparatorAnotherMethod<object>()
11641874Di2015UniqueSeparatorAnotherMethod
11641874Di2015UniqueSeparatorT
11642211Di2015UniqueSeparatorSystem.Windows.Forms.DataGridViewCellStyle dgvCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();Di2015NewLinedgvCellStyle1.Format = "MM/dd/yyyy";Di2015NewLinedgvCellStyle1.NullValue = null;Di2015NewLinethis.dataGridView1.Columns[0].DefaultCellStyle = dgvCellStyle1;Di2015NewLine
11642299Di2015UniqueSeparatorfrom u in db.EmployeesDi2015NewLinewhere !(from e in db.ExpenseTeamMembersDi2015NewLine        where e.expMgrPk == selectedMgr.pkDi2015NewLine        select e.empPk).Contains(u.pk)Di2015NewLineselect u.NameDi2015NewLine
11642725Di2015UniqueSeparatorBinaryReader reader = new BinaryReader(networkStream);Di2015NewLineint year = reader.ReadUInt16();Di2015NewLineint month = reader.ReadByte();Di2015NewLineint day = reader.ReadByte();Di2015NewLineint hour = reader.ReadByte();Di2015NewLineint minute = reader.ReadByte();Di2015NewLineint ms = reader.ReadUInt16();Di2015NewLineint second = ms >> 10;Di2015NewLineint millist = ms & 1023;Di2015NewLineDateTime dt = new DateTime(year, month, day, hour, minute, second, millis);Di2015NewLine
11642758Di2015UniqueSeparatorpos
11642779Di2015UniqueSeparatorpublic class ParticleDi2015NewLine{Di2015NewLine    public int SomeField;Di2015NewLineDi2015NewLine    public Particle Copy()Di2015NewLine    {Di2015NewLine        return new Particle { SomeField = this.SomeField };Di2015NewLine    }   Di2015NewLineDi2015NewLine    public Particle(Particle copyFrom)Di2015NewLine    {Di2015NewLine        this.SomeField = copyFrom.SomeField;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11642779Di2015UniqueSeparatorList<Particle> copyList = new List<Particle>(originalList.Select(c => c.Copy));Di2015NewLine
11643364Di2015UniqueSeparatorStopwatch s = new Stopwatch();Di2015NewLine// System.Diagnostics StopwatchDi2015NewLineint test = 0;Di2015NewLines.Start();Di2015NewLinefor(int a = 0; a < 100000000; a++)Di2015NewLine    test = a % 50 == 0 ? 1 : 2;Di2015NewLines.Stop();Di2015NewLineDi2015NewLines.Restart();Di2015NewLinefor(int b = 0; b < 100000000; b++)Di2015NewLine{Di2015NewLine    if(b % 50 == 0)Di2015NewLine        test = 1;Di2015NewLine    elseDi2015NewLine        test = 2; Di2015NewLine}Di2015NewLines.Stop();Di2015NewLine
11643379Di2015UniqueSeparator  protected void DropDownVisaType_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  Int32 value = Convert.ToInt32(DropDownVisaType.SelectedItem.Value);Di2015NewLine  DropDownVisaTypeSpecific.DataSource=Method_Name(Value);Di2015NewLine  DropDownVisaTypeSpecific.DataBind();Di2015NewLine}Di2015NewLine
11643476Di2015UniqueSeparatorvar string1 = String.Empty;Di2015NewLinevar string2 = String.Empty;Di2015NewLineDi2015NewLinepublic string MyMethod(out string string1, out string string2)Di2015NewLine{Di2015NewLine    string1 = "string1";Di2015NewLine    string2 = "string2";Di2015NewLine}Di2015NewLine
11643476Di2015UniqueSeparatorclass MyResult {Di2015NewLine   string Property1 { get; set;}Di2015NewLine   string Property2 { get; set;}Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic MyResult MyMethod(){Di2015NewLine    var result = new MyResult();Di2015NewLine    result.Property1 = "string1";Di2015NewLine    result.Property2 = "string2";Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
11643553Di2015UniqueSeparatorHttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://"+ <your mvc action endpoint> )Di2015NewLinerequest.Method = "GET";Di2015NewLine//specify other request propertiesDi2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    response = (HttpWebResponse)request.GetResponse();Di2015NewLine}Di2015NewLine
11643553Di2015UniqueSeparatorstring url = string.Format(Di2015NewLine            "http://mysite/somepage?key1={0}&key2={1}",Di2015NewLine            Uri.EscapeDataString("value1"),Di2015NewLine            Uri.EscapeDataString("value2"));Di2015NewLine
11643553Di2015UniqueSeparatorwebRequest.Method = "POST";Di2015NewLinevar data=string.Format("key1={0}&key2={1}",Uri.EscapeDataString("value1"),Uri.EscapeDataString("value2")");Di2015NewLineStreamWriter requestWriter = new StreamWriter(webRequest.GetRequestStream());Di2015NewLinerequestWriter.Write();Di2015NewLinerequestWriter.Close();Di2015NewLine
11643635Di2015UniqueSeparatorConsole.ReadKey()
11643635Di2015UniqueSeparator    private static void UserEventHandler()Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            inf = Console.ReadKey(true);Di2015NewLine            if (inf.Key != ConsoleKey.Enter)Di2015NewLine                input.Append(inf.KeyChar);Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                input = new StringBuilder();Di2015NewLine                userInput = "";Di2015NewLine            }Di2015NewLine            userInput = input.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11643635Di2015UniqueSeparatorConsole.ReadKey()
11643635Di2015UniqueSeparatortrue
11643750Di2015UniqueSeparatorDequeue
11643750Di2015UniqueSeparatorTryDequeue
11643750Di2015UniqueSeparatorwhile ( !stop )Di2015NewLine{Di2015NewLine    string dir;Di2015NewLine    if(taskQueue.TryDequeue(out dir))Di2015NewLine    {Di2015NewLine    }Di2015NewLine
11643750Di2015UniqueSeparatorConcurrentQueue<T>
11643750Di2015UniqueSeparatorBlockingCollection<T>
11644057Di2015UniqueSeparatorobject
11644057Di2015UniqueSeparatorobject
11644057Di2015UniqueSeparatorstring
11644057Di2015UniqueSeparatorstring
11644057Di2015UniqueSeparatorclass
11644057Di2015UniqueSeparatorstruct
11644057Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class SO11641262Di2015NewLine{Di2015NewLine    [Test]Di2015NewLine    public void Execute()Di2015NewLine    {Di2015NewLine        var model = TypeModel.Create();Di2015NewLine        model.Add(typeof (FooData), true)Di2015NewLine            .AddSubType(1, typeof (FooData<string>))Di2015NewLine            .AddSubType(2, typeof (FooData<int>))Di2015NewLine            .AddSubType(3, typeof (FooData<SomeOtherType>));Di2015NewLineDi2015NewLine        var val = FooData.Create("abc");Di2015NewLine        var clone = (FooData)model.DeepClone(val);Di2015NewLine        Assert.AreEqual("abc", clone.ValueUntyped);Di2015NewLine        Assert.AreEqual(typeof(string), clone.ItemType);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    [ProtoContract]Di2015NewLine    public abstract class FooDataDi2015NewLine    {Di2015NewLine        public static FooData<T> Create<T>(T value)Di2015NewLine        {Di2015NewLine            return new FooData<T> {Value = value};Di2015NewLine        }Di2015NewLine        public abstract Type ItemType { get; }Di2015NewLine        public abstract object ValueUntyped { get; set; }Di2015NewLine    }Di2015NewLine    [ProtoContract]Di2015NewLine    public class FooData<T> : FooDataDi2015NewLine    {Di2015NewLine        [ProtoMember(1)]Di2015NewLine        public T Value { get; set; }Di2015NewLineDi2015NewLine        public override Type ItemTypeDi2015NewLine        {Di2015NewLine            get { return typeof (T); }Di2015NewLine        }Di2015NewLine        public override object ValueUntypedDi2015NewLine        {Di2015NewLine            get { return Value; }Di2015NewLine            set { Value = (T) value; }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    [ProtoContract]Di2015NewLine    public class SomeOtherType {}Di2015NewLine}Di2015NewLine
11644083Di2015UniqueSeparatorBitmap(Int32, Int32, Graphics)
11644083Di2015UniqueSeparatorusing(Bitmap bitmap = new Bitmap(Width, Height))Di2015NewLineusing (Graphics graphics = Graphics.FromImage(bitmap))Di2015NewLine{Di2015NewLine    Rectangle rect = new Rectangle(0, 0, Width, Height);Di2015NewLine    graphics.FillRectangle(new SolidBrush(BackColor), rect);Di2015NewLine    graphics.DrawString("Hello, World", Font, new SolidBrush(ForeColor), rect);Di2015NewLine    bitmap.Save(@"D:\\hello_world.bmp");Di2015NewLine} Di2015NewLine
11644083Di2015UniqueSeparator.bmp
11644087Di2015UniqueSeparatorMax
11644087Di2015UniqueSeparatorMin
11644087Di2015UniqueSeparatorpublic static T Max<T>(T x, T y)Di2015NewLine{Di2015NewLine    return (Comparer<T>.Default.Compare(x, y) > 0) ? x : y;Di2015NewLine}Di2015NewLine
11644099Di2015UniqueSeparatorISearchTechnology<T>
11644228Di2015UniqueSeparatorProcess regeditProcess = Process.Start("regedit.exe", "/s \\"C:\\\\Program Files\\\\Test Folder\\\\sample.reg\\"");Di2015NewLine
11644368Di2015UniqueSeparatorvar query =Di2015NewLine    from c in collection.AsQueryable<C>()Di2015NewLine    where c.A.ContainsAny(new[] { 1, 2, 3 })Di2015NewLine    select c;Di2015NewLine// orDi2015NewLinevar query =Di2015NewLine    collection.AsQueryable<C>()Di2015NewLine    .Where(c => c.A.ContainsAny(new[] { 1, 2, 3 }));Di2015NewLine
11644503Di2015UniqueSeparatorInvokeScript
11644503Di2015UniqueSeparator// get the first child element of the headerDi2015NewLinevar backButton = document.getElementsByTagName("header")[0].firstChild;Di2015NewLineDi2015NewLine// check if it looks like a back buttonDi2015NewLineif(backButton && backButton.innerText == "Back") {Di2015NewLine  // it looks like a back button, remove itDi2015NewLine  document.getElementsByTagName("header")[0].removeChild[backButton];Di2015NewLine}Di2015NewLine
11644503Di2015UniqueSeparatorwebBrowser1.InvokeScript("eval", "(function() { "+ script +"}()");Di2015NewLine
11644503Di2015UniqueSeparatorIsScriptEnabled
11644503Di2015UniqueSeparatortrue
11644545Di2015UniqueSeparatorListView
11644545Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!this.IsPostBack)Di2015NewLine        {Di2015NewLine            this.InitializeListView(this.ListView2);Di2015NewLine            this.InitializeListView(this.ListView3);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void ListView1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.InitializeListView(this.ListView2);Di2015NewLine        this.InitializeListView(this.ListView3);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void ListView2_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.InitializeListView(this.ListView3);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void InitializeListView(ListView listView)Di2015NewLine    {Di2015NewLine        listView.SelectedIndex = -1;Di2015NewLine        listView.EditIndex = -1;Di2015NewLine        listView.DataBind();Di2015NewLineDi2015NewLine        listView.Visible = listView.Items.Count > 0;Di2015NewLine    }Di2015NewLine
11644545Di2015UniqueSeparator     <asp:ListView ID="ListView1" runat="server" DataKeyNames="QuizID" Di2015NewLine                DataSourceID="SqlDataSource1" InsertItemPosition="LastItem" Di2015NewLine                onselectedindexchanged="ListView1_SelectedIndexChanged" >Di2015NewLine.....Di2015NewLineDi2015NewLine <asp:ListView ID="ListView2" runat="server" DataSourceID="SqlDataSource2" Di2015NewLine            DataKeyNames="QuestionID" InsertItemPosition="LastItem"Di2015NewLine            onselectedindexchanged="ListView2_SelectedIndexChanged">Di2015NewLine....Di2015NewLine    <asp:SqlDataSource ID="SqlDataSource2" runat="server" Di2015NewLine            ConnectionString="<%$ ConnectionStrings:QuizSysDBConnectionString %>" Di2015NewLine            SelectCommand="SELECT        QuestionID, Question, QuestionOrder, AnswerExplanationDi2015NewLineFROM            QuestionDi2015NewLineWHERE        (QuestionID INDi2015NewLine                             (SELECT DISTINCT QuestionIDDi2015NewLine                               FROM            QuizContentDi2015NewLine                               WHERE        (QuizID = @QuizID)))"Di2015NewLine            <SelectParameters>Di2015NewLine                <asp:ControlParameter ControlID="ListView1" Name="QuizID" DefaultValue="0" Di2015NewLine                PropertyName="SelectedValue" Type="Int32" />Di2015NewLine            </SelectParameters>Di2015NewLine.....Di2015NewLineDi2015NewLine        <asp:SqlDataSource ID="SqlDataSource3" runat="server" Di2015NewLine            ConnectionString="<%$ ConnectionStrings:QuizSysDBConnectionString %>" Di2015NewLine            SelectCommand="SELECT        AnswerID, AnswerDi2015NewLineFROM            AnswersDi2015NewLineWHERE        (AnswerID INDi2015NewLine                             (SELECT DISTINCT AnswerIDDi2015NewLine                               FROM            QuizContentDi2015NewLine                               WHERE        (QuestionID = @QuestionID)))"Di2015NewLineDi2015NewLine            <SelectParameters>Di2015NewLine                <asp:ControlParameter ControlID="ListView2" Name="QuestionID" DefaultValue="0"Di2015NewLine                    PropertyName="SelectedValue" Type="Int32" />Di2015NewLine            </SelectParameters>Di2015NewLine
11644568Di2015UniqueSeparatorpublic enum MethodIDDi2015NewLine{Di2015NewLine    [EnumTextValue("01")]Di2015NewLine    Inquiry = 1,Di2015NewLineDi2015NewLine    [EnumTextValue("02")]Di2015NewLine    Update = 2,Di2015NewLine}Di2015NewLine
11644568Di2015UniqueSeparatorind id = (int)MethodID.Inquiry;Di2015NewLine
11644568Di2015UniqueSeparator///<summary>Di2015NewLine/// Allows the discovery of an enumeration text value based on the <c>EnumTextValueAttribute</c>Di2015NewLine///</summary>Di2015NewLine/// <param name="e">The enum to get the reader friendly text value for.</param>Di2015NewLine/// <returns><see cref="System.String"/> </returns>Di2015NewLinepublic static string GetEnumTextValue(Enum e)Di2015NewLine{Di2015NewLine    string ret = "";Di2015NewLine    Type t = e.GetType();Di2015NewLine    MemberInfo[] members = t.GetMember(e.ToString());Di2015NewLine    if (members.Length == 1)Di2015NewLine    {Di2015NewLine        object[] attrs = members[0].GetCustomAttributes(typeof (EnumTextValueAttribute), false);Di2015NewLine        if (attrs.Length == 1)Di2015NewLine        {Di2015NewLine            ret = ((EnumTextValueAttribute)attrs[0]).Text;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return ret;Di2015NewLine}Di2015NewLine
11644580Di2015UniqueSeparatorDataContractSerializer
11644640Di2015UniqueSeparatorxml.LoadXml("<root>" & sReceived & "</root>")Di2015NewLine
11644640Di2015UniqueSeparatorXmlDocument
11644640Di2015UniqueSeparatorDim clientVersion = doc.Root.Element("XmlClient").ValueDi2015NewLineDim xmlVersion = doc.Root.Element("XmlVersion").Value Di2015NewLine
11644640Di2015UniqueSeparatorXmlDocument
11644640Di2015UniqueSeparatorDim clientVersionNode = doc.DocumentElement.GetElementsByTagName("XmlClient")(0)Di2015NewLineDim clientVersion = (CType(clientVersionNode, XmlElement)).InnerTextDi2015NewLine
11644640Di2015UniqueSeparatorxmlVersion
11644649Di2015UniqueSeparatorrocks randomValue = values[random.Next(values.Length)];Di2015NewLine
11644649Di2015UniqueSeparatorRocks
11644649Di2015UniqueSeparatorswitch (Rocks)Di2015NewLine{Di2015NewLine    case rocks.uno:Di2015NewLine        drawUno(spriteBatch);Di2015NewLine        break;Di2015NewLine    case rocks.dos:Di2015NewLine        drawDos(spriteBatch);Di2015NewLine        break;Di2015NewLine    case rocks.tres:Di2015NewLine        drawTres(spriteBatch);Di2015NewLine        break;Di2015NewLine    default:Di2015NewLine        break;Di2015NewLine}Di2015NewLine
11644649Di2015UniqueSeparatorrandomValue
11644649Di2015UniqueSeparatorRocks
11644663Di2015UniqueSeparatorCustom Class
11644663Di2015UniqueSeparatorInstall class
11644663Di2015UniqueSeparatorpublic override void Install(IDictionary stateSaver)Di2015NewLine    {Di2015NewLine                base.Install(stateSaver);Di2015NewLine    }Di2015NewLine
11644739Di2015UniqueSeparator.\\SQLEXPRESS
11644739Di2015UniqueSeparatorusing Microsoft.SqlServer.Management.Smo;Di2015NewLineDi2015NewLineServer srv = new Server(".\\\\SQLExpress");Di2015NewLineint i = srv.Databases.Count;Di2015NewLine
11644739Di2015UniqueSeparatorServer
11644829Di2015UniqueSeparatorfrom table1 in dt1.AsEnumerable()Di2015NewLinejoin table2 in dt2.AsEnumerable() on table1["Location"] equals table2["Location"]Di2015NewLineselect newDi2015NewLine{Di2015NewLine    Location = table1["Location"],Di2015NewLine    Visa_Q1 = (int)table1["Visa_Q1"],Di2015NewLine    Visa_Q2 = (int)table1["Visa_Q2"],Di2015NewLine    Visa_Q3 = (int)table2["Visa_Q3"],Di2015NewLine    Visa_Q4 = (int)table2["Visa_Q4"],Di2015NewLine};Di2015NewLine
11644874Di2015UniqueSeparator[HttpPost] // can be HttpGetDi2015NewLinepublic ActionResult Test(string id)Di2015NewLine{Di2015NewLine     bool isValid = yourcheckmethod(); //.. checkDi2015NewLine     var obj = new {Di2015NewLine          valid = isValidDi2015NewLine     };Di2015NewLine     return Json(obj);Di2015NewLine}Di2015NewLine
11644874Di2015UniqueSeparatorfunction checkValidId(checkId)Di2015NewLine{Di2015NewLine    $.ajax({Di2015NewLine         url: 'controllerName/Test',Di2015NewLine         type: 'POST',Di2015NewLine         contentType: 'application/json;',Di2015NewLine         data: JSON.stringify({ id: checkId }),Di2015NewLine         success: function (valid)Di2015NewLine         {Di2015NewLine              if(valid) { //show that id is valid }Di2015NewLine              else { //show that id is not valid }Di2015NewLine         }Di2015NewLine    });Di2015NewLine}Di2015NewLine
11644944Di2015UniqueSeparatordecimal percentage = 80.5M;Di2015NewLineConsole.WriteLine(percentage.ToString("P"));Di2015NewLine
11644944Di2015UniqueSeparatorCultureInfo.CurrentCulture
11644944Di2015UniqueSeparatorCultureInfo.CurrentUICulture
11644944Di2015UniqueSeparatorToString()
11644944Di2015UniqueSeparatordecimal percentage = 80.5M;Di2015NewLine//English (UK)Di2015NewLineConsole.WriteLine(percentage.ToString("P", CultureInfo.CreateSpecificCulture("en-GB"));Di2015NewLine//Turkish (Turkey)Di2015NewLineConsole.WriteLine(percentage.ToString("P", CultureInfo.CreateSpecificCulture("tr-TR"));Di2015NewLine
11644995Di2015UniqueSeparatorif
11644995Di2015UniqueSeparatorelse
11644995Di2015UniqueSeparatorvar a = x != null ? x : y;Di2015NewLine
11644995Di2015UniqueSeparatora
11644995Di2015UniqueSeparatorx
11644995Di2015UniqueSeparatory
11644995Di2015UniqueSeparatorif
11644995Di2015UniqueSeparatorelse
11644995Di2015UniqueSeparatorif
11644995Di2015UniqueSeparatorelse
11644995Di2015UniqueSeparatorif
11644995Di2015UniqueSeparatorelse
11644995Di2015UniqueSeparatorif (correctKey) Correct++; else Missed++;Di2015NewLine
11645074Di2015UniqueSeparatorwhere (p => p.ClubName == "club1")
11645074Di2015UniqueSeparatorvar query = from o in db.ClubsDi2015NewLine            where  o.ClubName == "club1"Di2015NewLine            select o;Di2015NewLine
11645074Di2015UniqueSeparatorvar query = db.Clubs.Where(p => p.ClubName == "club1");Di2015NewLine
11645158Di2015UniqueSeparatorId
11645158Di2015UniqueSeparatorinternal
11645158Di2015UniqueSeparatorprotected
11645158Di2015UniqueSeparatorBindingFlags
11645158Di2015UniqueSeparatorPropertyInfo[] properties = type.GetProperties(Di2015NewLine    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLine
11645158Di2015UniqueSeparatorpublic int Id;Di2015NewLine
11645158Di2015UniqueSeparatorGetFields
11645158Di2015UniqueSeparatorId
11645204Di2015UniqueSeparatorvar age = 0;Di2015NewLineDi2015NewLine    if (IsPost)Di2015NewLine    {Di2015NewLine        age = Request["frmage"].AsInt(0);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine<input class="formTextField" type="text" name="frmAge" size="3" value="@age"/>Di2015NewLine
11645219Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineDi2015NewLineAssembly assembly = Assembly.LoadFrom("\\x\\y\\z.dll");Di2015NewLineVersion ver = assembly.GetName().Version;Di2015NewLine
11645219Di2015UniqueSeparatorusing System.Diagnostics;Di2015NewLineDi2015NewLinestatic string GetDllVersion(string dllPath)Di2015NewLine{Di2015NewLine  FileVersionInfo myFileVersionInfo = FileVersionInfo.GetVersionInfo(dllPath);Di2015NewLine  return myFileVersionInfo.FileVersion;Di2015NewLine}Di2015NewLineDi2015NewLine// Sample invokationDi2015NewLinestring result = GetDllVersion(@"C:\\Program Files (x86)\\Google\\Chrome\\Application\\20.0.1132.57\\chrome.dll");Di2015NewLine// result value **20.0.1132.57**Di2015NewLine
11645332Di2015UniqueSeparatorvar fi = new FileInfo(""\\\\Tests\\Results\\knowles\\project\\LU\\D15\\RUN1\\Results.xml"");Di2015NewLinevar di = fi.Directory;Di2015NewLinevar find = "project";Di2015NewLineDi2015NewLinewhile (di.Name.ToLower() != find.ToLower() && di != null)Di2015NewLine{Di2015NewLine    di = di.Parent;Di2015NewLine}Di2015NewLineDi2015NewLineif (di == null)Di2015NewLine{Di2015NewLine    throw new Exception(string.Format("Directory with name '{0}' was not found.", find));Di2015NewLine}Di2015NewLine
11645332Di2015UniqueSeparatorvar fi = new FileInfo(""\\\\Tests\\Results\\knowles\\project\\LU\\D15\\RUN1\\Results.xml"");Di2015NewLinevar di = fi.Directory;Di2015NewLinevar find = "project";Di2015NewLineDi2015NewLinedi = GetGreatestParent(di, find);Di2015NewLineDi2015NewLineif (di == null)Di2015NewLine{Di2015NewLine    throw new Exception(string.Format("Directory with name '{0}' was not found.", find));Di2015NewLine}Di2015NewLineDi2015NewLinepublic DirectoryInfo GetGreatestParent(DirectoryInfo Dir, string Find)Di2015NewLine{Di2015NewLine    if (Dir != null)Di2015NewLine    {Di2015NewLine        var p = GetGreatestParent(Dir.Parent, string Find);Di2015NewLineDi2015NewLine        if (p != null)Di2015NewLine        {Di2015NewLine            return p;Di2015NewLine        }Di2015NewLine        else if (Dir.Name.ToLower() == Find.ToLower())Di2015NewLine        {Di2015NewLine            return Dir;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return null;Di2015NewLine}Di2015NewLine
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparator.msi
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparatorsetup.exe
11645333Di2015UniqueSeparator.msi
11645338Di2015UniqueSeparatorXDocument messages = XDocument.Load(MapPath("~/_xml/messages.xml"));Di2015NewLinemyMessages.DataSource = Di2015NewLine    messages.Elements("messages")Di2015NewLine    .Elements("contact")Di2015NewLine    .OrderByDescending(m => DateTime.Parse(m.Element("date").Value))Di2015NewLinemyMessages.DataBind();Di2015NewLine
11645338Di2015UniqueSeparator<%# DataBinder.Eval(((XElement)Container.DataItem).Element("date"), "Value")%>Di2015NewLine
11645418Di2015UniqueSeparatorwhere !el.Attribute(attributeName).Value.StartsWith("abc")Di2015NewLine
11645418Di2015UniqueSeparatorwhere
11645418Di2015UniqueSeparatorel
11645418Di2015UniqueSeparatorel
11645418Di2015UniqueSeparatorif
11645418Di2015UniqueSeparatorabc
11645418Di2015UniqueSeparatorValue
11645418Di2015UniqueSeparatorwhere
11645418Di2015UniqueSeparatorselect
11645418Di2015UniqueSeparatorvar elements = xmlFile.Root.Elements(elementName)Di2015NewLine                      .Where(el => !el.Attribute(attributeName).Value.StartsWith("abc"));Di2015NewLine
11645458Di2015UniqueSeparatorif(!Page.IsPostBack)Di2015NewLine{Di2015NewLine}Di2015NewLine
11645505Di2015UniqueSeparatorSetEvent
11645545Di2015UniqueSeparatorConfigElement
11645545Di2015UniqueSeparator protected override void PostDeserialize()Di2015NewLine        {Di2015NewLine            base.PostDeserialize();Di2015NewLine            //Do what you wantDi2015NewLine        }Di2015NewLine
11645599Di2015UniqueSeparatorElementAt
11645599Di2015UniqueSeparatorstring[] lines = File.ReadLines(fileName)Di2015NewLine                     .Skip(firstLine - 1) // Assuming 1-based line numbersDi2015NewLine                     .Take(lastLine - firstLine)Di2015NewLine                     .ToArray();Di2015NewLinelistBox.Items.AddRange(lines);Di2015NewLine
11645619Di2015UniqueSeparatorprogressBar.Maximum = 100;Di2015NewLineDi2015NewLinevar stepPercentage = 50 / step1Objects.Count;Di2015NewLineforeach(SomeObject step1Object in step1Objects)Di2015NewLine{Di2015NewLine    progressBar.Progress += stepPercentage;Di2015NewLine}Di2015NewLineDi2015NewLineprogressBar.Progress = 50;Di2015NewLinestepPercentage = 50 / step2Objects.Count;Di2015NewLineforeach(SomeObject step2Object in step2Objects)Di2015NewLine{Di2015NewLine    progressBar.Progress += (stepPercentage + 50);Di2015NewLine}Di2015NewLine
11645655Di2015UniqueSeparator Program.da2.Fill(Program.ds2); Di2015NewLine
11645655Di2015UniqueSeparatorProgram.tblNamesBS2.DataSource = Program.ds.Tables[0];  Di2015NewLine
11645655Di2015UniqueSeparatorProgram.tblNamesBS2.DataSource = Program.ds2.Tables[0];  Di2015NewLine
11645655Di2015UniqueSeparator customerfirstname.DataBindings.Add(new Binding("Text", Program.tblNamesBS2, "FirstName"));    Di2015NewLine  customerlastname.DataBindings.Add(new Binding("Text", Program.tblNamesBS2, "LastName"));Di2015NewLine
11645948Di2015UniqueSeparatorIQuery
11645948Di2015UniqueSeparatorIQuery<TInput, TOutput>
11645967Di2015UniqueSeparatorRelatedLink
11645967Di2015UniqueSeparatorLink
11645967Di2015UniqueSeparatorusing System;Di2015NewLineusing Microsoft.TeamFoundation.Client;Di2015NewLineusing Microsoft.TeamFoundation.WorkItemTracking.Client;Di2015NewLineDi2015NewLinenamespace WorkItemLinksOfAWorkItemDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            TfsTeamProjectCollection teamProjectCollection = TfsTeamProjectCollectionFactory.GetTeamProjectCollection(new Uri("http://TFSURI"));Di2015NewLineDi2015NewLine            var workItemStore = (WorkItemStore)teamProjectCollection.GetService(typeof(WorkItemStore));Di2015NewLineDi2015NewLine            var workItem = workItemStore.GetWorkItem(123456);Di2015NewLine            LinkCollection links = workItem.Links;Di2015NewLine            foreach (Link link in links)Di2015NewLine            {Di2015NewLine                if (!(link is RelatedLink))Di2015NewLine                    continue;Di2015NewLineDi2015NewLine                var relLink = link as RelatedLink;Di2015NewLine                var relatedWI = workItemStore.GetWorkItem(relLink.RelatedWorkItemId);Di2015NewLine                Console.WriteLine(relatedWI.Id+" "+relatedWI.Type.Name);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11645967Di2015UniqueSeparatorvar workItemTypes = workItemStore.Projects["TeamProjectName"].WorkItemTypes;Di2015NewLinevar workItem = new WorkItem(workItemTypes["Test Case"]) {Title = "Programmatically constructed via TFS-SDK"};Di2015NewLineDi2015NewLinevar relatedLinkToBug = new RelatedLink(123456);Di2015NewLinevar links = workItem.Links;Di2015NewLinelinks.Add(relatedLinkToBug);Di2015NewLineDi2015NewLineworkItem.Save();Di2015NewLine
11646104Di2015UniqueSeparatorpublic Verbose(Simple simple)Di2015NewLine{Di2015NewLine    this.id = Guid.NewGuid();Di2015NewLine    this.email = simple.email;Di2015NewLine}Di2015NewLineDi2015NewLinepublic Simple(Verbose verbose)Di2015NewLine{Di2015NewLine    this.email = verbose.email;Di2015NewLine}Di2015NewLine
11646104Di2015UniqueSeparatorSimple
11646104Di2015UniqueSeparatorVerbose
11646104Di2015UniqueSeparatorVerbose
11646104Di2015UniqueSeparatorSimple
11646197Di2015UniqueSeparatorpath
11646197Di2015UniqueSeparator"blah\\\\blah"
11646197Di2015UniqueSeparatorblah\\blah
11646197Di2015UniqueSeparator@
11646197Di2015UniqueSeparator\\
11646197Di2015UniqueSeparatorpath
11646197Di2015UniqueSeparator@
11646197Di2015UniqueSeparator@"\\"
11646197Di2015UniqueSeparator\\
11646197Di2015UniqueSeparator@""""
11646197Di2015UniqueSeparator"
11646197Di2015UniqueSeparatord:\\project\\Bloomberg\\trunk\\UI.Demo\\
11646197Di2015UniqueSeparator\\
11646197Di2015UniqueSeparatorvar path = "d:\\\\project\\\\Bloomberg\\\\trunk\\\\UI.Demo\\\\";Di2015NewLine
11646197Di2015UniqueSeparator\\
11646197Di2015UniqueSeparatorvar path = @"d:\\project\\Bloomberg\\trunk\\UI.Demo\\";Di2015NewLine
11646251Di2015UniqueSeparatorCompositionContainer
11646251Di2015UniqueSeparatorDirectoryCatalog
11646251Di2015UniqueSeparatorDirectoryCatalog
11646251Di2015UniqueSeparatorComposablePartCatalog
11646251Di2015UniqueSeparatorIControllerFactory
11646251Di2015UniqueSeparatorIDependencyResolver
11646314Di2015UniqueSeparator[DllImport("thedll.dll", EntryPoint="GetEnumerationString")]Di2015NewLineprivate static extern int GetEnumerationString(int type, int value, out IntPtr s);Di2015NewLine
11646333Di2015UniqueSeparator@Date datetimeDi2015NewLine@year datetimeDi2015NewLineASDi2015NewLineBEGINDi2015NewLineSELECT A.ArticleID, A.Name, A.Header, A.Article, A.Date, Di2015NewLine C.Category, C.CategoryID,Di2015NewLine M.FirstName + ' ' + M.LastName as 'Author', A.ArticleLevelDi2015NewLine FROM Article as ADi2015NewLine LEFT JOIN Category as C on A.CategoryID = C.CategoryIDDi2015NewLineLEFT JOIN Member as M ON A.MemberID = M.MemberID            Di2015NewLine WHERE CONVERT(VARCHAR(4), a.Date, 100) + CONVERT(VARCHAR(4), a.Date, 120) =CONVERT(VARCHAR(4), @Date , 100) + CONVERT(VARCHAR(4), @year, 120)'Di2015NewLineORDER BY A.Date, A.ArticleLevel AscDi2015NewLineENDDi2015NewLineexec [usp_GetArticlesForArticleDates] 'juli','2012''Di2015NewLine
11646562Di2015UniqueSeparatorpublic IList<Item> FetchData()Di2015NewLine{Di2015NewLine  using (ItemDataContext context = new ItemDataContext(_connectionString))Di2015NewLine  {Di2015NewLine    //....Di2015NewLine    var results = new List<Item>();Di2015NewLine    foreach (Item it in contextItems)Di2015NewLine    {Di2015NewLine      results.Add(it);Di2015NewLine    }Di2015NewLine    return results;Di2015NewLine  }Di2015NewLine}Di2015NewLinepublic void LoadData()Di2015NewLine{Di2015NewLine  Observable.Start(()=>FetchData())Di2015NewLine            .ObserveOnDispatcher()Di2015NewLine            .Subscribe(list=>Di2015NewLine              {Di2015NewLine                foreach (Item it in contextItems)Di2015NewLine                {Di2015NewLine                  this.Checklist.Add(it);Di2015NewLine                }Di2015NewLine              });Di2015NewLine}Di2015NewLine
11646568Di2015UniqueSeparatorDataSet ds=new DataSet();Di2015NewLineds.ReadXml("xmlfile.xml");Di2015NewLineDi2015NewLinedropWerk.DataSource = ds; or dropWerk.DataSource = ds.Tables[0]; Di2015NewLinedropWerk.TextField = "field name"; // field to display in dropdownDi2015NewLinedropWerk.ValueField="Value Field";Di2015NewLinedropWerk.DataBind();Di2015NewLine
11646568Di2015UniqueSeparatorXmlDocument xdoc=new XmlDocument();Di2015NewLinexdoc.Load("xmlfile.xml");Di2015NewLineDi2015NewLineXmlNodeList node = xdoc.SelectSingleNodes("/NewDataSet/resources/");Di2015NewLineforeach(XmlNode n in node )Di2015NewLine{Di2015NewLineListItem l = new ListItem();Di2015NewLine    l.Text = n.InnerXml.ToString();Di2015NewLine    drpWerk.Items.Add(l);Di2015NewLine}Di2015NewLinedrpWerk.DataBind();Di2015NewLine
11646605Di2015UniqueSeparatorfor (int i = 1; i < iterations; i++)Di2015NewLine{Di2015NewLine    x = start + i * dist;Di2015NewLine    sumT += integralFunction(x - dist / 2, degreeFreedomT, degreeFreedomE);Di2015NewLine    sum += integralFunction(x, degreeFreedomT, degreeFreedomE);Di2015NewLine}Di2015NewLinex = start + iterations * dist;Di2015NewLinesumT += integralFunction(x - dist / 2, degreeFreedomT, degreeFreedomE);Di2015NewLine
11646605Di2015UniqueSeparator-finline-functions
11646605Di2015UniqueSeparatorintegralFunction
11646719Di2015UniqueSeparatorelse
11646719Di2015UniqueSeparatorhitchance = rand.Next(0, 100);Di2015NewLineif (hitchance > 30)Di2015NewLine{Di2015NewLine    attackdamage = CH.GetMonsterDamage(rand);Di2015NewLine    Console.WriteLine("The Monster Attacks!");Di2015NewLine    if (battlechoice == "d" || battlechoice == "D")Di2015NewLine    { //this is so that defend has some sort of benefitDi2015NewLine        attackdamage /= 2;Di2015NewLine    }Di2015NewLine    heroHitPoints -= attackdamage;//subtract the damageDi2015NewLine    Console.WriteLine("The Hero loses {0}hp", attackdamage);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("The monster misses!");Di2015NewLine}Di2015NewLine
11646729Di2015UniqueSeparatorforeach (var grouping in multiples)Di2015NewLine{Di2015NewLine    foreach (var x in grouping.Select(index,item) => new {index, item})Di2015NewLine    {Di2015NewLine        // x.index is the position of the item in this groupDi2015NewLine        // x.item is the item itselfDi2015NewLine    }Di2015NewLine}Di2015NewLine
11646729Di2015UniqueSeparatorCount() > 1
11646729Di2015UniqueSeparatorSkip(1).Any()
11646729Di2015UniqueSeparatorvar multiples = from d in context.Decision_DataDi2015NewLine                group d by d.Client_NoDi2015NewLine                    into cDi2015NewLine                    where c.Skip(1).Any() Di2015NewLine                    select c;Di2015NewLine
11646784Di2015UniqueSeparatorSqlDatasource3
11646784Di2015UniqueSeparator        <asp:SqlDataSource ID="SqlDataSource3" runat="server" Di2015NewLine            ConnectionString="<%$ ConnectionStrings:QuizSysDBConnectionString %>" Di2015NewLine            SelectCommand="SELECT        Answers.*, QuizContent.IsCorrectDi2015NewLineFROM            Answers INNER JOINDi2015NewLine                         QuizContent ON Answers.AnswerID = QuizContent.AnswerIDDi2015NewLineWHERE        (QuizContent.QuestionID = @QuestionID)"Di2015NewLine
11646865Di2015UniqueSeparator.Select(myTable=>myTable)Di2015NewLine
11646865Di2015UniqueSeparatorx => xDi2015NewLine
11646865Di2015UniqueSeparatorFirstOrDefault
11646865Di2015UniqueSeparatorSingleOrDefault
11646865Di2015UniqueSeparatorOrderBy
11646865Di2015UniqueSeparatorFirstOrDefault
11646865Di2015UniqueSeparatorOrderBy
11646865Di2015UniqueSeparatorFirstOrDefault
11646865Di2015UniqueSeparatorAny
11646895Di2015UniqueSeparatorAdd
11646895Di2015UniqueSeparatorAdd
11646895Di2015UniqueSeparatorList<Element> aMyReviewElements = new List<Element>();Di2015NewLine...Di2015NewLinenew Section("My Reviews")Di2015NewLine{Di2015NewLine    from e in aMyReviewElementDi2015NewLine    select eDi2015NewLine};Di2015NewLine
11646914Di2015UniqueSeparatorvar endpoint = RoleEnvironment.Roles["WebRole1"].Instances.First().InstanceEndpoints["Endpoint1"];Di2015NewLinevar siteUrl = String.Format("{0}://{1}", endpoint.Protocol, endpoint.IPEndpoint);Di2015NewLine
11646917Di2015UniqueSeparatornetsh
11646917Di2015UniqueSeparatornetsh http add urlacl http://+:4711/ user=DOMAIN\\USERDi2015NewLine
11646917Di2015UniqueSeparatorRun as administrator
11646917Di2015UniqueSeparatornetsh
11646917Di2015UniqueSeparatornetsh http show urlaclDi2015NewLine
11646980Di2015UniqueSeparatorApplication.Current.Window
11646980Di2015UniqueSeparatorforeach (var wnd in Application.Current.Windows)Di2015NewLine{Di2015NewLine    if (wnd is MyWindow)Di2015NewLine    {Di2015NewLine        // We found one!Di2015NewLine        //Di2015NewLine        // Close it or do something else interesting here.Di2015NewLine    }Di2015NewLine}Di2015NewLine
11646993Di2015UniqueSeparatorvar query = context.GetRoles(ID); Di2015NewLine
11646993Di2015UniqueSeparatorObjectSet<T>,
11647194Di2015UniqueSeparator!
11647194Di2015UniqueSeparator var myProducts = from p in productsDi2015NewLine                  where !productList.Contains(p.ID)Di2015NewLine                  select p;Di2015NewLine
11647240Di2015UniqueSeparatorSPListItem.FileDi2015NewLine
11647259Di2015UniqueSeparatorRegex
11647259Di2015UniqueSeparatorDouble.Parse
11647259Di2015UniqueSeparatorvar inputString = @"v=123.111i=10.123r=1234\\r\\n";Di2015NewLineDi2015NewLineforeach (Match match in Regex.Matches(inputString, @"\\d+[.]?\\d{3}"))Di2015NewLine{Di2015NewLine    double result = Double.Parse(match.Value);Di2015NewLine}Di2015NewLine
11647259Di2015UniqueSeparator\\d+          digits (0-9) Di2015NewLine             (1 or more times, matching the most amount possible)Di2015NewLineDi2015NewLine[.]?         character of: '.' Di2015NewLine             (optional, matching the most amount possible)Di2015NewLineDi2015NewLine\\d{3}        digits (0-9) Di2015NewLine             (3 times)Di2015NewLine
11647259Di2015UniqueSeparatorDouble.Parse
11647259Di2015UniqueSeparatorstring
11647292Di2015UniqueSeparatorExecuteReader
11647292Di2015UniqueSeparatorExecuteReader
11647292Di2015UniqueSeparatorifxDataReaders
11647292Di2015UniqueSeparatorDispose
11647292Di2015UniqueSeparatorClose
11647292Di2015UniqueSeparatorDispose
11647292Di2015UniqueSeparatorifxDataReaders
11647292Di2015UniqueSeparatorusing
11647292Di2015UniqueSeparatorifxDataReaders
11647292Di2015UniqueSeparatorusing
11647400Di2015UniqueSeparatorResponse.Clear();Di2015NewLinestring filePath = "myfile.pdf";Di2015NewLineResponse.contentType = "application/pdf";Di2015NewLineResponse.WriteFile(filePath);Di2015NewLineResponse.End();Di2015NewLine
11647452Di2015UniqueSeparatortry Di2015NewLine{ Di2015NewLine    if( XmlDoc == null) Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException("XmlDoc");Di2015NewLine    } Di2015NewLine    // carry on processing here.Di2015NewLine}Di2015NewLine
11647453Di2015UniqueSeparatorvoid listBox1_DragDrop(object sender, DragEventArgs e)Di2015NewLine{Di2015NewLine  e.Effect = DragDropEffects.Copy;Di2015NewLine}Di2015NewLineDi2015NewLinevoid listBox1_DragEnter(object sender, DragEventArgs e)Di2015NewLine{Di2015NewLine  e.Effect = DragDropEffects.Copy;Di2015NewLine}Di2015NewLine
11647562Di2015UniqueSeparatorConsole.WriteLine("Press any key to stop");Di2015NewLinedo {Di2015NewLine    while (! Console.KeyAvailable) {Di2015NewLine        // Do somethingDi2015NewLine   }       Di2015NewLine} while (Console.ReadKey(true).Key != ConsoleKey.Escape);Di2015NewLine
11647562Di2015UniqueSeparatorif
11647562Di2015UniqueSeparatorConsoleKeyInfo cki;Di2015NewLinewhile (true)Di2015NewLine{Di2015NewLine   cki = Console.ReadKey();Di2015NewLine   if (cki.Key == ConsoleKey.Escape)Di2015NewLine     break;Di2015NewLine}Di2015NewLine
11647562Di2015UniqueSeparatorif
11647635Di2015UniqueSeparatorControls
11647635Di2015UniqueSeparatorclass MyCheckedListBox : CheckedListBoxDi2015NewLine    {Di2015NewLine        protected override void OnDrawItem(DrawItemEventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11647657Di2015UniqueSeparator.val()
11647657Di2015UniqueSeparator$('#customerID').val('some value');Di2015NewLine
11647657Di2015UniqueSeparator<a href="#">Di2015NewLine    <span class="customerId">Di2015NewLine        @customers[i].CustomerId.ToString()Di2015NewLine    </span>Di2015NewLine</a>Di2015NewLine
11647657Di2015UniqueSeparator$(function() {Di2015NewLine    $('.customerId').click(function() {Di2015NewLine        $('#customerId').val($(this).text());Di2015NewLine        return false;Di2015NewLine    });Di2015NewLine});Di2015NewLine
11647787Di2015UniqueSeparatorpublic static UsersAuth()Di2015NewLine{Di2015NewLine    con = new OracleConnection(WebConfigurationManager.ConnectionStrings["conString"].ToString());Di2015NewLine}Di2015NewLine
11647823Di2015UniqueSeparatorValidationSettings
11647823Di2015UniqueSeparatorCaption
11647823Di2015UniqueSeparatorText
11647878Di2015UniqueSeparator SELECT whateverDi2015NewLine FROM thetableDi2015NewLine WHERE ID = @participantIDDi2015NewLine FOR XML AUTODi2015NewLine
11647878Di2015UniqueSeparator var xmlResult = dr[0];Di2015NewLine
11647878Di2015UniqueSeparator        SqlDataAdapter oCMD = new SqlDataAdapter(cmd); Di2015NewLine        oCMD.Fill(oDS, "User"); Di2015NewLine        return oDS.GetXml(); Di2015NewLine
11648165Di2015UniqueSeparator||
11648165Di2015UniqueSeparator(from p in table[this.TableName]Di2015NewLine where (p["Description"] != null || p["Synopsis"] != null)Di2015NewLine select p).First();Di2015NewLine
11648194Di2015UniqueSeparatorif (MasterSet.All(e => SubSet.Contains(e)) || SubSet.All(e => MasterSet.Contains(e)))Di2015NewLine{Di2015NewLine    //do stuffDi2015NewLine}Di2015NewLine
11648194Di2015UniqueSeparatorif (!MasterSet.Except(SubSet).Any() || !SubSet.Except(MasterSet).Any())Di2015NewLine{Di2015NewLine    //do stuffDi2015NewLine}Di2015NewLine
11648194Di2015UniqueSeparatorSubSet { 100, 3, 3 }
11648194Di2015UniqueSeparatorMasterSet = { 100, 100, 3 }
11648194Di2015UniqueSeparatorif (MasterSet.All(e => MasterSet.Count(r => r==e) <= SubSet.Count(r => r==e))Di2015NewLine    || SubSet.All(e => SubSet.Count(r => r==e) <= MasterSet.Count(r => r==e)))Di2015NewLine{Di2015NewLine    //do stuffDi2015NewLine}Di2015NewLine
11648194Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var MasterSet = new List<string>() {"100", "3","4"};Di2015NewLineDi2015NewLine    var SubSets = new[] Di2015NewLine    {Di2015NewLine        new List<string>() {"100", "100", "3"},Di2015NewLine        new List<string>() {"100", "3", "4"},Di2015NewLine        new List<string>() {"32", "3423", "4234", "100", "3", "4", "34234"},Di2015NewLine        new List<string>() {"100", "32", "3423", "4234", "100", "3", "4", "34234"},Di2015NewLine        new List<string>() {"100", "32", "3", "4234", "100", "4", "34234"},Di2015NewLine        new List<string>() {"100", "4", "3"},Di2015NewLine        new List<string>() {"100", "3", "3"},Di2015NewLine        new List<string>() {"100", "3"},Di2015NewLine        new List<string>() {"100", "3", "3", "1"}Di2015NewLine    };Di2015NewLineDi2015NewLine    foreach (var SubSet in SubSets)Di2015NewLine    {Di2015NewLine        if (IsMatch(MasterSet, SubSet))Di2015NewLine            Console.WriteLine(String.Join(", ", SubSet) + " is a \\"subset\\"");Di2015NewLine        else if (IsMatch(SubSet, MasterSet))Di2015NewLine            Console.WriteLine(String.Join(", ", SubSet) + " is a \\"superset\\"");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinebool IsMatch<T>(IEnumerable<T> source, IEnumerable<T> to_test)Di2015NewLine{Di2015NewLine    using (var enumerator = source.GetEnumerator())Di2015NewLine    using (var sub_enumerator = to_test.GetEnumerator())Di2015NewLine        while (sub_enumerator.MoveNext())Di2015NewLine        {Di2015NewLine            if (!enumerator.MoveNext())Di2015NewLine                return false;Di2015NewLine            if (!enumerator.Current.Equals(sub_enumerator.Current))Di2015NewLine                sub_enumerator.Reset();Di2015NewLine        }Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
11648231Di2015UniqueSeparatorchar.IsNumber()
11648231Di2015UniqueSeparatortrue
11648231Di2015UniqueSeparator'0'
11648231Di2015UniqueSeparator'1'
11648231Di2015UniqueSeparator'9'
11648231Di2015UniqueSeparatore.Handled = true
11648231Di2015UniqueSeparatorif (e.KeyChar is a number)Di2015NewLine    Ignore this eventDi2015NewLine
11648231Di2015UniqueSeparator!char.IsNumber()
11648231Di2015UniqueSeparatorChar.IsDigit
11648231Di2015UniqueSeparatorChar.IsNumber
11648231Di2015UniqueSeparatorChar.IsDigit
11648231Di2015UniqueSeparatortrue
11648231Di2015UniqueSeparator'0'
11648231Di2015UniqueSeparator'9'
11648273Di2015UniqueSeparator var entity = _context.Projects.Find(project.ProjectId);Di2015NewLine _context.Entry(entity).CurrentValues.SetValues(project);Di2015NewLine
11648311Di2015UniqueSeparator.Update()
11648455Di2015UniqueSeparatorIEnumerable<T>
11648455Di2015UniqueSeparatorFirst()
11648455Di2015UniqueSeparatorforeach(var val in sequence) return val;Di2015NewLinethrow OopsNoData();Di2015NewLine
11648455Di2015UniqueSeparatorAny()
11648455Di2015UniqueSeparatorforeach(var val in sequence) return true;Di2015NewLinereturn false;Di2015NewLine
11648455Di2015UniqueSeparatorforeach
11648455Di2015UniqueSeparatorIQueryable<T>
11648455Di2015UniqueSeparatorFirst()
11648455Di2015UniqueSeparatorselect TOP 1 ...
11648455Di2015UniqueSeparator.Any()
11648455Di2015UniqueSeparatorexists(...)
11648455Di2015UniqueSeparatorvar obj = someQuery.FirstOrDefault();Di2015NewLineif(obj == null) {Di2015NewLine   // no matchDi2015NewLine} else {Di2015NewLine   // do something with "obj"Di2015NewLine}Di2015NewLine
11648515Di2015UniqueSeparator  SPContentType itemCtype = currentWeb.AvailableContentTypes[SPBuiltInContentTypeId.Item];Di2015NewLine                SPContentType sourceContentType = new SPContentType(itemCtype, currentWeb.ContentTypes, SponsoringCommon.Constants.CONTENTTYPES_SOURCES_NAME);Di2015NewLine                sourceContentType = currentWeb.ContentTypes.Add(sourceContentType);Di2015NewLine
11648527Di2015UniqueSeparatorIterator
11648527Di2015UniqueSeparatorremove()
11648527Di2015UniqueSeparatorConcurrentModificationException
11648527Di2015UniqueSeparatorIterator.next()
11648527Di2015UniqueSeparatorremove()
11648527Di2015UniqueSeparatorCollection.unmodifireableSet()
11648527Di2015UniqueSeparatorCollection.unmodifireableList()
11648654Di2015UniqueSeparator        System.Drawing.Bitmap b0 = LoadBitmap();Di2015NewLine        double scale = 203/96;Di2015NewLine        int width = (int)(b0.Width * scale);Di2015NewLine        int height = (int)(b0.Height * scale);Di2015NewLine        System.Drawing.Bitmap bmpScaled = new System.Drawing.Bitmap(b0,width, height);Di2015NewLine
11648772Di2015UniqueSeparatorMicrosoft.SharePoint.Administration.EventSeverity
11648772Di2015UniqueSeparatorSystem.Diagnostics.EventLogEntryType
11648772Di2015UniqueSeparatorErrorDi2015NewLineWarningDi2015NewLineInformationDi2015NewLineSuccessAuditDi2015NewLineFailureAuditDi2015NewLine
11648798Di2015UniqueSeparatorSystem.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();Di2015NewLinetimer.Interval = 3000;Di2015NewLinetimer.Tick += (source, e) => {label1.Visible = false; timer.Stop();};Di2015NewLinetimer.Start();Di2015NewLine
11648820Di2015UniqueSeparator    public void PromptToSend(NetContext context)Di2015NewLine    {Di2015NewLine        if(Interlocked.CompareExchange(ref writerCount, 1, 0) == 0)Di2015NewLine        { // then **we** are the writerDi2015NewLine            context.Handler.StartSending(this);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11648820Di2015UniqueSeparatorwriterCount
11648820Di2015UniqueSeparatorStartSending
11648820Di2015UniqueSeparatorSendAsync
11648820Di2015UniqueSeparatorif (!connection.Socket.SendAsync(args)) SendCompleted(args);Di2015NewLine
11648820Di2015UniqueSeparatorSendCompleted
11648820Di2015UniqueSeparatorSendCompleted
11648820Di2015UniqueSeparatorSendCompleted
11648820Di2015UniqueSeparator        if (bufferedLength == 0)Di2015NewLine        {  // nothing to do; report this worker as inactiveDi2015NewLine            Interlocked.Exchange(ref writerCount, 0);Di2015NewLine            return 0;Di2015NewLine        }Di2015NewLine
11648824Di2015UniqueSeparator    database.Attach(newsletter); Di2015NewLine    database.DeleteObject(newsletter); Di2015NewLine    database.SaveChanges(); Di2015NewLine
11648824Di2015UniqueSeparatorNewsletter newsletter = database.Newsletters.FirstOrDefault(nl => nl.EmailAddress == emailAddress);Di2015NewLineif (newsletter == null)Di2015NewLine{Di2015NewLine    newsletter = new Newsletter();Di2015NewLine    ...Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    database.Attach(newsletter); Di2015NewLine    database.DeleteObject(newsletter); Di2015NewLine    database.SaveChanges(); Di2015NewLine}Di2015NewLine
11648893Di2015UniqueSeparatorFile.Create(filename);Di2015NewLine
11648893Di2015UniqueSeparatorFilestream f = File.Create(filename);Di2015NewLine...Di2015NewLinef.Dispose();Di2015NewLine
11648902Di2015UniqueSeparatorvar actual = (int)privateInfo.Invoke("SampleMethod", new object[] {0});Di2015NewLine
11648902Di2015UniqueSeparatorInvoke(string name = "SampleMethod", System.Reflection.BindingFlags bindingFlags = Default, object[] args = {object[0]})Di2015NewLine
11648946Di2015UniqueSeparatorPoint
11648946Di2015UniqueSeparatorPoint
11648946Di2015UniqueSeparatorPoint p1 = new Point(1,2);Di2015NewLinePoint p2 = p1;Di2015NewLine
11649062Di2015UniqueSeparatorif(!Page.IsPostBack)Di2015NewLineTextBox1.Text = Initialvalue;Di2015NewLine
11649140Di2015UniqueSeparatorDate
11649140Di2015UniqueSeparatorDateTime
11649140Di2015UniqueSeparatorString
11649140Di2015UniqueSeparatorDateTime.ToShortDateString()
11649140Di2015UniqueSeparatorStartDate = DateTime.Parse(n.Element("HireFromDate").Value).ToShortDateString()Di2015NewLine
11649359Di2015UniqueSeparatorl1.CheckedChanged = (sender, e) => { if (l1.Checked) ModalPopupExtender1.Show(); };Di2015NewLine
11649425Di2015UniqueSeparatorArray.Sort<T>(T[],IComparer<T>)
11649425Di2015UniqueSeparatorvar array = new[] {Di2015NewLine    "09Bananas", "Pears2", "Mangoes39Bad", "100Apples", "Mangoes38Good"Di2015NewLine};Di2015NewLineArray.Sort(array, (a,b) => {Di2015NewLine    a = new string(a.Where(char.IsLetter).ToArray());Di2015NewLine    b = new string(b.Where(char.IsLetter).ToArray());Di2015NewLine    return a.CompareTo(b);Di2015NewLine});Di2015NewLineConsole.WriteLine(string.Join(", ", array));Di2015NewLine
11649425Di2015UniqueSeparatora.Where(char.IsLetter).ToArray()
11649447Di2015UniqueSeparatorint[] i = new int[100] { 1, 2, 3, 4, 5 };Di2015NewLine
11649447Di2015UniqueSeparatorint[] i = new int[] { 1, 2, 3, 4, 5 };Di2015NewLine
11649447Di2015UniqueSeparatorint[]
11649447Di2015UniqueSeparatorvar i = new[] { 1, 2, 3, 4, 5 };Di2015NewLine
11649447Di2015UniqueSeparatorvar i = new List<int> { 1, 2, 3, 4, 5 };Di2015NewLinei.Add(6); // etcDi2015NewLine
11649447Di2015UniqueSeparatorvar iArray = i.ToArray();Di2015NewLine
11649552Di2015UniqueSeparatorpublic interface ITransformer<T>Di2015NewLine{Di2015NewLine     T MapTo(T t); Di2015NewLine}Di2015NewLine
11649552Di2015UniqueSeparatorpublic class Transformer : ITransformer<XmlDocument>, ITransformer<UIPerson>Di2015NewLine
11649686Di2015UniqueSeparatorContinueWith
11649686Di2015UniqueSeparatorTask.Factory.StartNew( () => DoThis())Di2015NewLine   .ContinueWith((t1) => DoThat())Di2015NewLine   .ContinueWith((t2) => UpdateUi(), Di2015NewLine       TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine
11649686Di2015UniqueSeparatorTaskScheduler.FromCurrentSynchronizationContext()
11649764Di2015UniqueSeparator_dataContext.StaticPageLangsDi2015NewLine    .FirstOrDefault(r => r.selected_partial_url_id == partialUrlid)Di2015NewLine
11649794Di2015UniqueSeparator  strInternalFieldName = colFields.AddLookup(strInternalFieldName, targetListID, currentWeb.Site.RootWeb.ID, true);Di2015NewLinethen it works fineDi2015NewLine
11649823Di2015UniqueSeparatorel.Attribute(attributeName) != null
11649823Di2015UniqueSeparatorelements =(from el in xmlFile.Root.Elements(elementName) Di2015NewLine           where ( el.Attribute(attributeName) != nullDi2015NewLine                && !el.Attribute(attributeName).Value.Equals(DBNull.Value) Di2015NewLine                && !el.Attribute(attributeName).Value.StartsWith(searchBeforeStar))Di2015NewLine           select el);Di2015NewLine
11649832Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic interface IiOSAppService : IAppServiceDi2015NewLine
11649832Di2015UniqueSeparatorpublic class iOSAppService : IiOSAppServiceDi2015NewLine
11649832Di2015UniqueSeparator<system.serviceModel>Di2015NewLine  <services>Di2015NewLine    <service name="YourNamespace.iOSAppService">Di2015NewLine      <endpoint binding="webHttpBinding" contract="YourNamespace.IiOSAppService" behaviorConfiguration="web">Di2015NewLine      </endpoint>Di2015NewLine    </service>Di2015NewLine  </services>Di2015NewLine  <behaviors>Di2015NewLine    <endpointBehaviors>Di2015NewLine      <behavior name="web">Di2015NewLine        <webHttp />Di2015NewLine      </behavior>Di2015NewLine    </endpointBehaviors>Di2015NewLine  </behaviors>Di2015NewLine</system.serviceModel>Di2015NewLine
11649868Di2015UniqueSeparatorImagemagick requires you to install ghostscript.Di2015NewLineDi2015NewLineIt's required by ImageMagick to interpret Postscript and PDF.Di2015NewLine
11649882Di2015UniqueSeparator/// <summary>Di2015NewLine/// Sample model binder that manually binds customer modelsDi2015NewLine/// </summary>Di2015NewLinepublic class CustomModelBinder : IModelBinderDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Bind to the given model typeDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="context">Current context</param>Di2015NewLine    /// <param name="modelType">Model type to bind to</param>Di2015NewLine    /// <param name="blackList">Blacklisted property names</param>Di2015NewLine    /// <returns>Bound model</returns>Di2015NewLine    public object Bind(NancyContext context, Type modelType, params string[] blackList)Di2015NewLine    {Di2015NewLine        var parentObject = Activator.CreateInstance(modelType);Di2015NewLineDi2015NewLine        foreach (var key in context.Request.Form)Di2015NewLine        {Di2015NewLine            var value = context.Request.Form[key];Di2015NewLine            this.SetObjectValue(parentObject, modelType, key, value);Di2015NewLine        }Di2015NewLineDi2015NewLine        return parentObject;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Sets the object value.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="instance">The instance.</param>Di2015NewLine    /// <param name="type">The type.</param>Di2015NewLine    /// <param name="key">Name of the property.</param>Di2015NewLine    /// <param name="propertyValue">The property value.</param>Di2015NewLine    private void SetObjectValue(object instance, Type type, string key, string propertyValue)Di2015NewLine    {Di2015NewLine        if (key.Contains("."))Di2015NewLine        {Di2015NewLine            this.SetObjectValueDeep(instance, type, key, propertyValue);Di2015NewLine        }Di2015NewLineDi2015NewLine        PropertyInfo propertyInfo = type.GetProperty(key);Di2015NewLine        if (propertyInfo == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        propertyInfo.SetValue(instance, Convert.ChangeType(propertyValue, propertyInfo.PropertyType), null);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Sets the object value derp.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="instance">The instance.</param>Di2015NewLine    /// <param name="type">The type.</param>Di2015NewLine    /// <param name="key">The key.</param>Di2015NewLine    /// <param name="propertyValue">The property value.</param>Di2015NewLine    private void SetObjectValueDeep(object instance, Type type, string key, string propertyValue)Di2015NewLine    {Di2015NewLine        var propList = key.Split('.').ToList();Di2015NewLineDi2015NewLine        PropertyInfo propertyInfo = type.GetProperty(propList.First());Di2015NewLine        if (propertyInfo == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        var childObject = propertyInfo.GetValue(instance, null);Di2015NewLineDi2015NewLine        if (childObject == null)Di2015NewLine        {Di2015NewLine            childObject = Activator.CreateInstance(propertyInfo.PropertyType);Di2015NewLine            propertyInfo.SetValue(instance, childObject, null);Di2015NewLine        }Di2015NewLineDi2015NewLine        propList.RemoveAt(0);Di2015NewLineDi2015NewLine        var newKey = propList.Aggregate(string.Empty, (current, prop) => current + (prop + ".")).TrimEnd('.');Di2015NewLineDi2015NewLine        if (newKey.Contains("."))Di2015NewLine        {Di2015NewLine            this.SetObjectValueDeep(childObject, childObject.GetType(), newKey, propertyValue);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            this.SetObjectValue(childObject, childObject.GetType(), newKey, propertyValue);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Determines whether this instance can bind the specified model type.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="modelType">Type of the model.</param>Di2015NewLine    /// <returns>Di2015NewLine    ///   <c>true</c> if this instance can bind the specified model type; otherwise, <c>false</c>.Di2015NewLine    /// </returns>Di2015NewLine    public bool CanBind(Type modelType)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11649942Di2015UniqueSeparatorbyte[] buffer = eftExport.ExportToBytes();Di2015NewLine
11649942Di2015UniqueSeparatorrequestStream.Write(buffer, 0, buffer.Length);Di2015NewLine
11649988Di2015UniqueSeparator<asp:SqlDataSource runat="server" ID="MySQLData2"Di2015NewLine    ConnectionString='<%$ConnectionStrings:ConnectionString %>'Di2015NewLine    ProviderName="MySql.Data.MySqlClient"Di2015NewLine    SelectCommand="SELECT * FROM tablename  WHERE id=@SessionVar">Di2015NewLine  <SelectParameters>Di2015NewLine     <asp:SessionParameter Name="SessionVar" SessionField="SessionVariableName" ConvertEmptyStringToNull="true" />Di2015NewLine  </SelectParameters>Di2015NewLine</asp:SqlDataSource>Di2015NewLine
11650031Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLinestring[] splitString = fTextSearch.Split(errorChars, StringSplitOptions.None);Di2015NewLineDi2015NewLineint numNewCharactersAdded = 0;Di2015NewLineforeach( string itm in splitString)Di2015NewLine{Di2015NewLine   sb.Append(itm); //append stringDi2015NewLine   if (fTextSearch.Length > (sb.Length - numNewCharactersAdded))Di2015NewLine   {Di2015NewLine      sb.Append(fTextSearch[sb.Length - numNewCharactersAdded]); //append splitting characterDi2015NewLine      sb.Append(fTextSearch[sb.Length - numNewCharactersAdded - 1]); //append it againDi2015NewLine      numNewCharactersAdded ++;Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLinefTextSearch = sb.ToString();Di2015NewLine
11650088Di2015UniqueSeparatorSelectedValueChanged
11650088Di2015UniqueSeparatorstring selected = null;Di2015NewLineDi2015NewLineprivate void listBox1_SelectedValueChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ListBox lb = sender as ListBox;Di2015NewLine    if (lb == null) { return; }Di2015NewLine    if (lb.SelectedItem != null && lb.SelectedItem.ToString() == selected)Di2015NewLine    {Di2015NewLine        selected = lb.SelectedItem.ToString();Di2015NewLine        lb.SetSelected(lb.SelectedIndex, false);Di2015NewLine    }Di2015NewLine    else Di2015NewLine    {Di2015NewLine        selected = lb.SelectedItem == null ? null : lb.SelectedItem.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11650135Di2015UniqueSeparatorDISTINCT
11650135Di2015UniqueSeparatorSELECT DISTINCT name FROM list WHERE name <> 'NULL'Di2015NewLine
11650135Di2015UniqueSeparatorNULL
11650135Di2015UniqueSeparatorSELECT DISTINCT name FROM list WHERE name is not NULLDi2015NewLine
11650245Di2015UniqueSeparatordynamic
11650245Di2015UniqueSeparatordynamic b = l1.Items.GetItemAt(0); Di2015NewLinevar price = b.Price;Di2015NewLine
11650321Di2015UniqueSeparatorprivate void comboBoxDb_DrawItem(object sender, DrawItemEventArgs e) Di2015NewLine{Di2015NewLine    var combo = sender as ComboBox;Di2015NewLineDi2015NewLine    if((e.State & DrawItemState.Selected) == DrawItemState.Selected)Di2015NewLine    {Di2015NewLine        e.Graphics.FillRectangle(new SolidBrush(Color.BlueViolet), e.Bounds);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        e.Graphics.FillRectangle(new SolidBrush(SystemColors.Window), e.Bounds);Di2015NewLine    }Di2015NewLineDi2015NewLine    e.Graphics.DrawString(combo.Items[e.Index].ToString(),Di2015NewLine                                  e.Font,Di2015NewLine                                  new SolidBrush(Color.Black),Di2015NewLine                                  new Point(e.Bounds.X, e.Bounds.Y));Di2015NewLine}Di2015NewLine
11650421Di2015UniqueSeparatorpublic Type Magic(Action action)Di2015NewLine{Di2015NewLine    return action.Method.GetGenericArguments().First();Di2015NewLine}Di2015NewLine
11650488Di2015UniqueSeparatorTextRange
11650488Di2015UniqueSeparatorTextRange
11650488Di2015UniqueSeparatorStart
11650488Di2015UniqueSeparatorEnd
11650488Di2015UniqueSeparatorSelect
11650488Di2015UniqueSeparatorTextPointer
11650488Di2015UniqueSeparatorprotected TextRange range;Di2015NewLineDi2015NewLineprivate void colorInterval(TextPointer start, TextPointer end)Di2015NewLine{Di2015NewLine  if (range == null)Di2015NewLine    range = new TextRange(start, end);Di2015NewLine  elseDi2015NewLine    range.Select(start, end);Di2015NewLine  ...Di2015NewLine}Di2015NewLine
11650488Di2015UniqueSeparatorTextRange
11650488Di2015UniqueSeparatorTextRange
11650488Di2015UniqueSeparatorTextPointer
11650488Di2015UniqueSeparatorSelect
11650488Di2015UniqueSeparatorcolorInterval
11650488Di2015UniqueSeparatorcolorInterval
11650488Di2015UniqueSeparatorTextRange
11650488Di2015UniqueSeparatorRichTextBox
11650488Di2015UniqueSeparatorTextChanged
11650488Di2015UniqueSeparatorTextChange
11650488Di2015UniqueSeparatorTextRange
11650560Di2015UniqueSeparatorObject
11650560Di2015UniqueSeparatorTest_api.getQualWeight(ConStr, bin_Num, lblResults);Di2015NewLine
11650560Di2015UniqueSeparatorTest_api.getQualWeight(Test_api.ConStr, Test_api.bin_Num, Test_api.lblResults);Di2015NewLine
11650560Di2015UniqueSeparatorConStr
11650560Di2015UniqueSeparatorbin_Num
11650560Di2015UniqueSeparatorlblResults
11650560Di2015UniqueSeparatorTest_api
11650560Di2015UniqueSeparatorString ConStr = "SERVER=myservername; Database=mydb; UID=mylogin; PWD=mypassword;encrypt=no;enlist=false";Di2015NewLineString bin_Num = "201284-11-000";Di2015NewLineLabel lblResults;Di2015NewLine
11650560Di2015UniqueSeparatorstatic String ConStr = "SERVER=myservername; Database=mydb; UID=mylogin; PWD=mypassword;encrypt=no;enlist=false";Di2015NewLinestatic String bin_Num = "201284-11-000";Di2015NewLinestatic Label lblResults;Di2015NewLine
11650574Di2015UniqueSeparatorCultureInfo.GetCultures
11650574Di2015UniqueSeparatorCultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.AllCultures & ~CultureTypes.NeutralCultures);Di2015NewLinestring allTranslatedJanuaries = Di2015NewLine    string.Join(Environment.NewLine, cultures.Select(c =>Di2015NewLine        String.Format("{0}: {1}", c.EnglishName, c.DateTimeFormat.GetMonthName(1))));Di2015NewLine
11650638Di2015UniqueSeparatorOR
11650638Di2015UniqueSeparatorAND
11650638Di2015UniqueSeparator(response != "Y") && (response != "N")Di2015NewLine
11650686Di2015UniqueSeparatordynamic result = new ExpandoObject();Di2015NewLinedt.AsEnumerable()Di2015NewLine  .GroupBy(r => r.Field<String>("type"))Di2015NewLine  .ToList()Di2015NewLine  .ForEach(g=> ((IDictionary<String, Object>)result)["sum" + g.Key.ToUpper()] = g.Sum(r=>r.Field<Int32>("cnt")));Di2015NewLineDi2015NewLineConsole.WriteLine(result.sumAAA);Di2015NewLineConsole.WriteLine(result.sumBBB);Di2015NewLine
11650686Di2015UniqueSeparatortype
11650686Di2015UniqueSeparatoraaa
11650686Di2015UniqueSeparatorbbb
11650742Di2015UniqueSeparator1. EnableViewState=true for your controlDi2015NewLineDi2015NewLine2. In the page load Di2015NewLineDi2015NewLineIf(! IspostBack )Di2015NewLine{Di2015NewLine   Bind()....Di2015NewLine}Di2015NewLineDi2015NewLineAnd set PageIndex Di2015NewLine
11650758Di2015UniqueSeparatorAssert.Inconclusive
11650758Di2015UniqueSeparatorAssert.Fail
11650758Di2015UniqueSeparatorInconclusive
11650789Di2015UniqueSeparator ArrayList alist = new ArrayList();Di2015NewLine        alist.Add("First");Di2015NewLine        alist.Add("Second");Di2015NewLineDi2015NewLine        int loopCount=1;Di2015NewLine        foreach (String s in alist)Di2015NewLine        {Di2015NewLineDi2015NewLine            // add new checkbox with different name for each string in alistDi2015NewLine            CheckBox c = new CheckBox();Di2015NewLine            c.Name = s;Di2015NewLine            c.Text = s;Di2015NewLine            c.Parent = this;Di2015NewLine            c.Visible = true;Di2015NewLineDi2015NewLine            //position the checkboxDi2015NewLine            c.Top = loopCount*c.Height;Di2015NewLineDi2015NewLine            this.Controls.Add(c);Di2015NewLine            loopCount++;Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine
11650792Di2015UniqueSeparatorstring replace = ".new";Di2015NewLinestring p = "blabla.test.bla.text.jpeg";Di2015NewLineConsole.WriteLine(Path.GetFileNameWithoutExtension(p) + replace);Di2015NewLine
11650792Di2015UniqueSeparatorblabla.test.bla.text.newDi2015NewLine
11650915Di2015UniqueSeparatorGET /toll.php HTTP/1.1Di2015NewLineHost: lol.google.comDi2015NewLine
11651007Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function EveryDay() {Di2015NewLine    document.getElementById('RdIsPerDay').checked = true;Di2015NewLine    document.getElementById('RdIsPerWeekDay').checked = false;Di2015NewLine    //add this to your codeDi2015NewLine    document.getElementById('RdIsPerDay').value= true;Di2015NewLine    document.getElementById('RdIsPerWeekDay').value= false;Di2015NewLineDi2015NewLine    document.getElementById("txtPerDay").style.visibility = 'visible';Di2015NewLine    document.getElementById("lblPerday").style.visibility = 'visible';Di2015NewLine}Di2015NewLinefunction EveryWeekDay() {Di2015NewLine    document.getElementById('RdIsPerDay').checked = false;Di2015NewLine    document.getElementById('RdIsPerWeekDay').checked = true;Di2015NewLine    //add this to your codeDi2015NewLine    document.getElementById('RdIsPerDay').value= false;Di2015NewLine    document.getElementById('RdIsPerWeekDay').value= true;Di2015NewLineDi2015NewLine    document.getElementById("txtPerDay").style.visibility = 'hidden';Di2015NewLine    document.getElementById("lblPerday").style.visibility = 'hidden';Di2015NewLine}Di2015NewLine</script>Di2015NewLine
11651077Di2015UniqueSeparatorstring value = Di2015NewLine    System.Web.Configuration.WebConfigurationManager.AppSettings["PsychMon"];Di2015NewLine
11651230Di2015UniqueSeparatorpublic class MyViewModel : INotifyPropertyChanged, IDataErrorInfoDi2015NewLine{Di2015NewLine    public MyViewModel()Di2015NewLine    {Di2015NewLine        Value = 30;Di2015NewLine    }Di2015NewLine    private double _value;Di2015NewLineDi2015NewLine    [Range(1, 80, ErrorMessage = "out of range")]Di2015NewLine    public double ValueDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _value;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _value = value;Di2015NewLine            ValidationMessageSetter("Value", value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ValidationMessageSetter(string propertyName, object value)Di2015NewLine    {Di2015NewLine        Notify(propertyName);Di2015NewLine        string validationresult = ValidateProperty(propertyName, value);Di2015NewLine        if (!string.IsNullOrEmpty(validationresult) && !_dataErrors.ContainsKey(propertyName))Di2015NewLine            _dataErrors.Add(propertyName, validationresult);Di2015NewLine        else if (_dataErrors.ContainsKey(propertyName))Di2015NewLine                _dataErrors.Remove(propertyName);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    #region INotifyPropertyChanged MembersDi2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    private void Notify(string str)Di2015NewLine    { Di2015NewLine        if(PropertyChanged!=null)Di2015NewLine            PropertyChanged(this,new PropertyChangedEventArgs(str));Di2015NewLine    }Di2015NewLineDi2015NewLine    private string ValidateProperty(string propertyName,object value)Di2015NewLine    {Di2015NewLine        var results = new List<ValidationResult>(2);Di2015NewLine        string error = string.Empty;Di2015NewLineDi2015NewLine        bool result = Validator.TryValidateProperty(Di2015NewLine            value,Di2015NewLine            new ValidationContext(this, null, null)Di2015NewLine            {Di2015NewLine                MemberName = propertyNameDi2015NewLine            },Di2015NewLine            results);Di2015NewLineDi2015NewLine        if (!result && (value == null || ((value is int || value is long) && (int)value == 0) || (value is decimal && (decimal)value == 0)))Di2015NewLine            return null;Di2015NewLineDi2015NewLine        if (!result)Di2015NewLine        {Di2015NewLine            ValidationResult validationResult = results.First();Di2015NewLine            error = validationResult.ErrorMessage;Di2015NewLine        }Di2015NewLineDi2015NewLine        return error;    Di2015NewLine    }Di2015NewLineDi2015NewLine    #region IDataErrorInfo MembersDi2015NewLineDi2015NewLine    private Dictionary<string, string> _dataErrors = new Dictionary<string, string>();Di2015NewLineDi2015NewLine    public string ErrorDi2015NewLine    {Di2015NewLine        get { throw new NotImplementedException(); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string this[string columnName]Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_dataErrors.ContainsKey(columnName))Di2015NewLine                return _dataErrors[columnName];Di2015NewLine            elseDi2015NewLine                return null;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLine<TextBox Text="{Binding Value, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine
11651259Di2015UniqueSeparatorout
11651259Di2015UniqueSeparatorref
11651259Di2015UniqueSeparatorout
11651259Di2015UniqueSeparatorref
11651259Di2015UniqueSeparatorvoid DoSomething(int i) { ... }Di2015NewLine
11651259Di2015UniqueSeparatorint x;Di2015NewLineDoSomething(x);Di2015NewLine
11651259Di2015UniqueSeparatorx
11651259Di2015UniqueSeparatorvoid DoSomething(out int i) { ... i = 10; ... }Di2015NewLine
11651259Di2015UniqueSeparatorint x;Di2015NewLineDoSomething(out x);Di2015NewLine
11651259Di2015UniqueSeparatorDoSomething
11651259Di2015UniqueSeparatorDoSomething
11651259Di2015UniqueSeparatori
11651286Di2015UniqueSeparatorINSERT
11651286Di2015UniqueSeparatorCREATE PROCEDURE [dbo].[spSave] (@theDATA As [dbo].[TVP] Readonly)Di2015NewLineASDi2015NewLineBEGIN      Di2015NewLine    INSERT INTO dbo.SaveResponse(ID, myQuestion, PersonWhoResponses,Di2015NewLine                                 Response, [User], [DateTime])Di2015NewLineDi2015NewLine       SELECT Di2015NewLine          ID, myQuestion, PersonWhoResponses,Di2015NewLine          Response, [User], [DateTime]Di2015NewLine       FROMDi2015NewLine          @theDATADi2015NewLineENDDi2015NewLine
11651288Di2015UniqueSeparatorpublic string Foo { private set; get; } Di2015NewLine
11651307Di2015UniqueSeparatorvar someString = "[Hello"Di2015NewLineif(someString.contains("["))Di2015NewLine{Di2015NewLine    someString.Replace("[","");Di2015NewLine}Di2015NewLineif (someString.Contains("]"))Di2015NewLine{ Di2015NewLine    someString.Replace("]","");Di2015NewLine}Di2015NewLine
11651507Di2015UniqueSeparatorvar regex = new Regex("[A-Z]+");Di2015NewLineConsole.WriteLine(regex.IsMatch("A1")); //true - why?Di2015NewLine
11651507Di2015UniqueSeparatorA1
11651507Di2015UniqueSeparator^
11651507Di2015UniqueSeparator$
11651507Di2015UniqueSeparator var regex = new Regex("^[A-Z]+$");Di2015NewLine Console.WriteLine(regex.IsMatch("A1")); Di2015NewLine
11651507Di2015UniqueSeparatorfalse
11651550Di2015UniqueSeparatorHtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLinedoc.Load(//Load document);Di2015NewLineDi2015NewLinevar isLive = doc.DocumentNode.Descendants("span").Where(d => d.Attributes.Contains("id") && d.Attributes["id"].Value.Contains("isLive")).SingleOrDefault();Di2015NewLineDi2015NewLinestring result = isLive.InnerText;Di2015NewLine
11651568Di2015UniqueSeparator"My App's Display Name"
11651568Di2015UniqueSeparator"Microsoft Visual C++ 2008 Redistributable"
11651568Di2015UniqueSeparatorbool isRedistributableFound = false;Di2015NewLinestring regKey = @"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall";Di2015NewLineusing (Microsoft.Win32.RegistryKey uninstallKey = Registry.LocalMachine.OpenSubKey(regKey))Di2015NewLine{Di2015NewLine    if (uninstallKey != null)Di2015NewLine    {Di2015NewLine        string[] productKeys = uninstallKey.GetSubKeyNames();Di2015NewLine        foreach (var keyName in productKeys)Di2015NewLine        {Di2015NewLine            RegistryKey productKey = uninstallKey.OpenSubKey(keyName);Di2015NewLine            if (productKey != null)Di2015NewLine            {Di2015NewLine                isRedistributableFound = productKey.GetValue("DisplayName") == "Microsoft Visual C++ 2008 Redistributable";Di2015NewLine                if (isRedistributableFound)Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineif (!isRedistributableFound)Di2015NewLine    Process.Start("vcredist_x86.exe");Di2015NewLine
11651570Di2015UniqueSeparator for (iCounter = 0; iCounter < frpdReport.Length; iCounter++)Di2015NewLine
11651570Di2015UniqueSeparatorforeach (REPORTDEF frpReportItem in frpdReport)Di2015NewLine
11651570Di2015UniqueSeparatorREPORTDEF fGetReportFile_return = frpdReport.Where( fR => fR.iReportID == iReportID).Single();Di2015NewLine
11651607Di2015UniqueSeparatorhttp://aspalliance.com/732_Display_Hierarchical_Data_with_TreeView_in_ASPNET_20Di2015NewLine
11651615Di2015UniqueSeparatorNotifyPropertyChanged("IsValid")Di2015NewLine
11651620Di2015UniqueSeparatorpublic static int GetMinByteSize(long value, bool signed)Di2015NewLine{Di2015NewLine    ulong v = (ulong)value;Di2015NewLine    // Invert the value when it is negative.Di2015NewLine    if (signed && value < 0)Di2015NewLine        v = ~v;Di2015NewLine    // The minimum length is 1.Di2015NewLine    int length = 1;Di2015NewLine    // Is there any bit set in the upper half?Di2015NewLine    // Move them to the lower half and try again.Di2015NewLine    if ((v & 0xFFFFFFFF00000000) != 0)Di2015NewLine    {Di2015NewLine        length += 4;Di2015NewLine        v >>= 32;Di2015NewLine    }Di2015NewLine    if ((v & 0xFFFF0000) != 0)Di2015NewLine    {Di2015NewLine        length += 2;Di2015NewLine        v >>= 16;Di2015NewLine    }Di2015NewLine    if ((v & 0xFF00) != 0)Di2015NewLine    {Di2015NewLine        length += 1;Di2015NewLine        v >>= 8;Di2015NewLine    }Di2015NewLine    // We have at most 8 bits left.Di2015NewLine    // Is the most significant bit set (or cleared for a negative number),Di2015NewLine    // then we need an extra byte for the sign bit.Di2015NewLine    if (signed && (v & 0x80) != 0)Di2015NewLine        length++;Di2015NewLine    return length;Di2015NewLine}Di2015NewLine
11651681Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class FooBaseDi2015NewLine{Di2015NewLine    [Test]Di2015NewLine    public void GetBarIsNotNullTest()Di2015NewLine    {Di2015NewLine        var foo = IoC.Current.Resolve<IFoo>();Di2015NewLine        Bar actual = foo.GetBar();Di2015NewLine        Assert.IsNotNull(actual);   Di2015NewLine    }Di2015NewLineDi2015NewLine    //many other tests  Di2015NewLine}Di2015NewLine
11651681Di2015UniqueSeparatorFooBase
11651681Di2015UniqueSeparatorSetUp
11651681Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class UnitTestFoo : FooBaseDi2015NewLine{Di2015NewLine    [SetUp]Di2015NewLine    public void SetUp()Di2015NewLine    {Di2015NewLine        IoC.Current.Register<IFoo, FakeFoo>();        Di2015NewLine    }Di2015NewLineDi2015NewLine    //nothing else hereDi2015NewLine}Di2015NewLineDi2015NewLine[TestFixture]Di2015NewLinepublic class IntegrationTestFoo : FooBaseDi2015NewLine{Di2015NewLine    [SetUp]Di2015NewLine    public void SetUp()Di2015NewLine    {Di2015NewLine        IoC.Current.Register<IFoo, RealFoo>();        Di2015NewLine    }Di2015NewLineDi2015NewLine    //nothing else hereDi2015NewLine}Di2015NewLine
11651681Di2015UniqueSeparatorFooBase
11651720Di2015UniqueSeparatorStackOverflow.ExampleCom
11651720Di2015UniqueSeparatorPublic Enum EThingDi2015NewLine    eThingOne = 1Di2015NewLine    eThingTwo = 2Di2015NewLineEnd EnumDi2015NewLinePrivate mThing As EThingDi2015NewLinePrivate Sub Class_Initialize()Di2015NewLine    mThing = eThingOneDi2015NewLineEnd SubDi2015NewLinePublic Property Let Thing(newVal As EThing)Di2015NewLine    mThing = newValDi2015NewLineEnd PropertyDi2015NewLinePublic Property Get Thing() As EThingDi2015NewLine    Thing = mThingDi2015NewLineEnd PropertyDi2015NewLine
11651720Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Runtime.InteropServices.ComTypes;Di2015NewLineusing StackOverflow;Di2015NewLineDi2015NewLinenamespace EnumDemoDi2015NewLine{Di2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("c30d35fe-2c7f-448b-98be-bd9be567ce70")]Di2015NewLine    [InterfaceType(ComInterfaceType.InterfaceIsDual)]Di2015NewLine    public interface IEnumDemoDi2015NewLine    {Di2015NewLine        [DispId(1)]Di2015NewLine        EThing ThingDi2015NewLine        {Di2015NewLine            get;set;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("af328c82-08e3-403e-a248-8c46e27b48f3")]Di2015NewLine    [ClassInterface(ClassInterfaceType.None)]Di2015NewLine    [ProgId("StackOverflow.EnumDemo")]Di2015NewLine    public class EnumDemoDi2015NewLine    {Di2015NewLine        private EThing mThing = EThing.eThingOne;Di2015NewLine        public EThing Thing { get { return mThing; } set { mThing = value; } }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11651720Di2015UniqueSeparatorregasm /tlb:EnumDemo.tlb bin\\Debug\\EnumDemo.dll
11651720Di2015UniqueSeparatorimportlib
11651720Di2015UniqueSeparatorlibrary EnumDemoDi2015NewLine{Di2015NewLine    // TLib :     // TLib :  : {D482D5CB-EE6C-455A-A28A-D26A5AC579D5}Di2015NewLine    importlib("StackOverflow.dll");Di2015NewLine    // TLib : mscorlib.dll : {BED7F4EA-1A96-11D2-8F08-00A0C9A6186D}Di2015NewLine    ...Di2015NewLine    interface IEnumDemo : IDispatch {Di2015NewLine        [id(0x00000001), propget]Di2015NewLine        HRESULT Thing([out, retval] EThing* pRetVal);Di2015NewLine        [id(0x00000001), propput]Di2015NewLine        HRESULT Thing([in] EThing pRetVal);Di2015NewLine    };Di2015NewLine    ...Di2015NewLine
11651750Di2015UniqueSeparator\\\\ICOM\\public.txt
11651750Di2015UniqueSeparatorpublic.txt
11651845Di2015UniqueSeparatorclass PageLocDi2015NewLine{Di2015NewLine    public int Header { get; set; }Di2015NewLine    public int Body { get; set; }Di2015NewLine    public int Footer { get; set; }Di2015NewLineDi2015NewLine    void MoveAll(int distance) {Di2015NewLine        Header += distance;Di2015NewLine        Body += distance;Di2015NewLine        Footer += distance;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11651972Di2015UniqueSeparatorControl
11651981Di2015UniqueSeparatorpublic class UserViewModelDi2015NewLine    {Di2015NewLine        public int UserId { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine        public int RoleId { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine        public List<SelectListItem> Roles { get; set; }Di2015NewLineDi2015NewLine        ...Di2015NewLine    }Di2015NewLine
11651981Di2015UniqueSeparator@model Namespace.UserViewModelDi2015NewLine
11651993Di2015UniqueSeparatorGeometry clip = new RectangleGeometry(new Rect(0,0,this.ActualWidth, this.ActualHeight));Di2015NewLineDi2015NewLinedc.PushClip(clip);Di2015NewLineDi2015NewLinedc.DrawLine(new Pen(Brushes.Red, 2), new Point(0, 0), new Point(this.EndX, 100));Di2015NewLinedc.DrawLine(new Pen(Brushes.Green, 3), new Point(200, 10), new Point(10, 300));Di2015NewLineDi2015NewLinedc.Pop();Di2015NewLine
11651993Di2015UniqueSeparatorRenderOptions.ProcessRenderMode = RenderMode.SoftwareOnly;Di2015NewLine
11652004Di2015UniqueSeparatorRequest.Url.Authority
11652004Di2015UniqueSeparator80
11652004Di2015UniqueSeparatorUri baseUri = new Uri("http://www.test.com:8888/something");Di2015NewLineConsole.WriteLine(myUri.Authority);Di2015NewLineConsole.WriteLine(myUri.Host);  Di2015NewLine
11652004Di2015UniqueSeparatorDnsSafeHost
11652004Di2015UniqueSeparatorhttp://[fe80::200:39ff:fe36:1a2d%4]/temp/example.htm
11652004Di2015UniqueSeparatorfe80::200:39ff:fe36:1a2d%4
11652029Di2015UniqueSeparatorpublic static class ButtonBehaviorsDi2015NewLine{Di2015NewLine    public static object GetButtonDoubleClick(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return obj.GetValue(ButtonDoubleClickProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetButtonDoubleClick(DependencyObject obj, object value)Di2015NewLine    {Di2015NewLine        obj.SetValue(ButtonDoubleClickProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty ButtonDoubleClickProperty =Di2015NewLine        DependencyProperty.RegisterAttached("ButtonDoubleClick", typeof (object), typeof (ButtonBehaviors),Di2015NewLine                                            new UIPropertyMetadata(new PropertyChangedCallback(OnButtonDoubleClickChanged)));Di2015NewLineDi2015NewLine    private static void OnButtonDoubleClickChanged (DependencyObject d, DependencyPropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        var button = d as Button;Di2015NewLine        if(button == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        var command = e.NewValue as ICommand;Di2015NewLine        if(command == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        button.MouseDoubleClick += (o, ev) => command.Execute(button);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11652029Di2015UniqueSeparator<Window x:Class="WpfApplication3.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:WpfApplication3="clr-namespace:WpfApplication3" Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Grid>Di2015NewLine        <Button Content="Button" Di2015NewLine                Height="23" Di2015NewLine                HorizontalAlignment="Left" Di2015NewLine                Margin="173,89,0,0" Di2015NewLine                VerticalAlignment="Top" Di2015NewLine                WpfApplication3:ButtonBehaviors.ButtonDoubleClick="{Binding ButtonDoubleClick}"Di2015NewLine                Width="75" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
11652029Di2015UniqueSeparatorpublic class ViewModelDi2015NewLine{Di2015NewLine    private ICommand _buttonDoubeClick;Di2015NewLineDi2015NewLine    public ICommand ButtonDoubleClickDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_buttonDoubeClick == null)Di2015NewLine            {Di2015NewLine                _buttonDoubeClick = new SimpleDelegateCommand(() => MessageBox.Show("Double click!!"));Di2015NewLine            }Di2015NewLineDi2015NewLine            return _buttonDoubeClick;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11652029Di2015UniqueSeparatorpublic class SimpleDelegateCommand : ICommandDi2015NewLine{Di2015NewLine    private readonly Action _action;Di2015NewLineDi2015NewLine    public SimpleDelegateCommand(Action action)Di2015NewLine    {Di2015NewLine        _action = action;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler CanExecuteChanged;Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        if(_action != null)Di2015NewLine        {Di2015NewLine            _action();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11652036Di2015UniqueSeparator@"([\\d|A-Z]*) ([A-Z|a-z| ]*) ([A-Z|a-z]*)"
11652036Di2015UniqueSeparator@"([A-Z|a-z| ]*) ([A-Z|a-z]*) ([\\d|A-Z]*)"
11652036Di2015UniqueSeparator        Regex regex = new Regex(@"([\\d|A-Z]*) ([A-Z|a-z| ]*) ([A-Z|a-z]*)");Di2015NewLineDi2015NewLine        foreach (Group g in regex.Match("12B Main Road").Groups)Di2015NewLine        {Di2015NewLineDi2015NewLine            Console.WriteLine(g.Value);Di2015NewLine        }Di2015NewLine
11652036Di2015UniqueSeparator12B Main RoadDi2015NewLine12BDi2015NewLineMainDi2015NewLineRoadDi2015NewLinePress any key to continue . . .Di2015NewLine
11652120Di2015UniqueSeparatorddlChoices.ItemsDi2015NewLine.Cast<ListItem>()Di2015NewLine.Where(item => !permittedChoices.Contains(item.Text))Di2015NewLine.ToList()Di2015NewLine.ForEach(ddlChoices.Items.Remove);Di2015NewLine
11652167Di2015UniqueSeparatorif (File.Exists(fName))Di2015NewLine   var s = File.OpenRead(fname);Di2015NewLine
11652167Di2015UniqueSeparatorSystem.IO.Path.GetRandomFileName()
11652199Di2015UniqueSeparatorpublic int Count { get; set; }Di2015NewLine
11652199Di2015UniqueSeparatorpublic int Count {Di2015NewLine    get { /* very complicated logic */ }Di2015NewLine    set { /* even more complicated logic */ }Di2015NewLine}Di2015NewLine
11652274Di2015UniqueSeparatorprivate void button1_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    label1.Content = "In progress..";Di2015NewLine    Task.Factory.StartNew<List<string>>(Di2015NewLine    () =>Di2015NewLine    {Di2015NewLine        List<string> intList = new List<string>();Di2015NewLine        for (long i = 0; i <= 50000000; i++)Di2015NewLine        {Di2015NewLine            intList.Add("Test");Di2015NewLine        }Di2015NewLineDi2015NewLine        return intList;Di2015NewLine    })Di2015NewLine    .ContinueWith(Di2015NewLine        (t) => label1.Content = t.Result.ToString(),Di2015NewLine        TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine}Di2015NewLine
11652537Di2015UniqueSeparatorfunction encrypt128($message) {Di2015NewLine    $vector = "0000000000000000";Di2015NewLine    $key = "00000000000000000000000000000000";Di2015NewLineDi2015NewLine    $block = mcrypt_get_block_size('rijndael_128', 'cbc');Di2015NewLine    $pad = $block - (strlen($message) % $block);Di2015NewLine    $message .= str_repeat(chr($pad), $pad);Di2015NewLineDi2015NewLine    $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');Di2015NewLine    mcrypt_generic_init($cipher, $key, $vector);Di2015NewLine    $result = mcrypt_generic($cipher, $message);Di2015NewLine    mcrypt_generic_deinit($cipher);Di2015NewLineDi2015NewLine    return base64_encode($result);Di2015NewLine}Di2015NewLine
11652537Di2015UniqueSeparatorbyte[] cripted = EncryptStringToBytes("Test", System.Text.Encoding.UTF8.GetBytes("00000000000000000000000000000000"), System.Text.Encoding.UTF8.GetBytes("0000000000000000"));Di2015NewLine
11652592Di2015UniqueSeparatormodified
11652592Di2015UniqueSeparatorpublic class StatefulObjectDi2015NewLine{Di2015NewLine    private string _propertyOne;Di2015NewLineDi2015NewLine    public StatefulObject()Di2015NewLine    {Di2015NewLine        this.Modified = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string PropertyOneDi2015NewLine    {Di2015NewLine        get { return this._propertyOne; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (this._propertyOne != value)Di2015NewLine            {Di2015NewLine                this._propertyOne = value;Di2015NewLine                this.Modified = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Modified { get; private set; }Di2015NewLine}Di2015NewLine
11652662Di2015UniqueSeparatorStyle
11652662Di2015UniqueSeparator<ListBox.Style>
11652727Di2015UniqueSeparatorSocket.Receive()
11652727Di2015UniqueSeparatorHTTP/1.1 200 OK
11652727Di2015UniqueSeparatorReceive()
11652727Di2015UniqueSeparator\\r\\n
11652727Di2015UniqueSeparatorContent-length
11652727Di2015UniqueSeparator\\r\\n
11652727Di2015UniqueSeparatorHEAD
11652727Di2015UniqueSeparatorReceive()
11652764Di2015UniqueSeparator[WebMethod]Di2015NewLine        public void addGame()Di2015NewLine        {Di2015NewLine            XmlDocument xd = new XmlDocument();Di2015NewLine            xd.Load(@"C:\\Users\\bradleya\\Documents\\Visual Studio 2010\\Projects\\Web Services\\Web Services\\addGame.xml");Di2015NewLine            XmlNode documentNode = xd.SelectSingleNode("/NewDataSet/Game");Di2015NewLineDi2015NewLine            int GamePlayID = Convert.ToInt32(documentNode.SelectSingleNode("GamePlayID").InnerText);Di2015NewLine            int ParticipantID = Convert.ToInt32(documentNode.SelectSingleNode("ParticipantID").InnerText);Di2015NewLine            int GameVersionID = Convert.ToInt32(documentNode.SelectSingleNode("ParticipantID").InnerText);Di2015NewLine            string Start = Convert.ToString(documentNode.SelectSingleNode("Start-Time").InnerText);Di2015NewLine            string End = Convert.ToString(documentNode.SelectSingleNode("End-Time").InnerText);Di2015NewLine            string success = Convert.ToString(documentNode.SelectSingleNode("Success").InnerText);Di2015NewLineDi2015NewLine            SqlConnection oConn = new SqlConnection();Di2015NewLine            oConn.ConnectionString = @"Data Source=SNICKERS\\SQLEXPRESS;Initial Catalog=VerveDatabase;Integrated Security=True";Di2015NewLine            oConn.Open();Di2015NewLine            SqlCommand cmd = new SqlCommand();Di2015NewLine            cmd.Connection = oConn;Di2015NewLine            cmd.CommandType = CommandType.StoredProcedure;Di2015NewLine            cmd.CommandText = "addGamePlay";Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@GamePlayID", SqlDbType.Int));Di2015NewLine            cmd.Parameters["@GamePlayID"].Value = GamePlayID;Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@ParticipantID", SqlDbType.Int));Di2015NewLine            cmd.Parameters["@ParticipantID"].Value = @ParticipantID;Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@GameVersionID", SqlDbType.Int));Di2015NewLine            cmd.Parameters["@GameVersionID"].Value = @GameVersionID;Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@Start", SqlDbType.Time));Di2015NewLine            cmd.Parameters["@Start"].Value = Start;Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@End", SqlDbType.Time));Di2015NewLine            cmd.Parameters["@End"].Value = End;Di2015NewLine            cmd.Parameters.Add(new SqlParameter("@success", SqlDbType.VarChar, 10));Di2015NewLine            cmd.Parameters["@success"].Value = success;Di2015NewLine            cmd.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine
11652804Di2015UniqueSeparator@for(int i = 0; i < Model.RoleAccess.Count; i++)Di2015NewLine            {Di2015NewLine                Html.CheckBoxFor(Model.RoleAccess[i].IsEnabled, new { id = Model.RoleAccess[i].MenuID });Di2015NewLine                Html.DisplayFor(Model.RoleAccess[i].MenuDisplayName); // or just Model.RoleAccess[i].MenuDisplayNameDi2015NewLine            }Di2015NewLine
11652902Di2015UniqueSeparator/api
11652902Di2015UniqueSeparatorRestService()'s.
11652902Di2015UniqueSeparator[RestService("/items")]Di2015NewLine[RestService("/items/news")]Di2015NewLine[RestService("/items/news/{provider}")]Di2015NewLine[RestService("/items/news/{provider}/{language}")]Di2015NewLine
11652902Di2015UniqueSeparatordomain.com/api/api/items...
11652902Di2015UniqueSeparatordomain.com/api/metadata
11653066Di2015UniqueSeparatorasync
11653066Di2015UniqueSeparatorawait
11653066Di2015UniqueSeparatorSynchronizationContext
11653066Di2015UniqueSeparatorDispatcher
11653066Di2015UniqueSeparatorTaskAwaiter
11653066Di2015UniqueSeparatorSynchronizationContext
11653066Di2015UniqueSeparatorDispatcher
11653066Di2015UniqueSeparatorasync
11653066Di2015UniqueSeparatorTask
11653066Di2015UniqueSeparatorasync
11653194Di2015UniqueSeparatorvar result = Regex.Replace(input, @"[[\\]()]", "");Di2015NewLine
11653194Di2015UniqueSeparator[...]
11653194Di2015UniqueSeparatorRegex.Replace
11653270Di2015UniqueSeparator<title>
11653270Di2015UniqueSeparator<title>
11653270Di2015UniqueSeparator</head>
11653270Di2015UniqueSeparatorHttpWebRequest
11653270Di2015UniqueSeparatorHttpWebResponse
11653270Di2015UniqueSeparator<title></title>
11653270Di2015UniqueSeparator</head>
11653270Di2015UniqueSeparator</head>
11653270Di2015UniqueSeparatorstring title = "";Di2015NewLinetry {Di2015NewLine    HttpWebRequest request = (HttpWebRequest.Create(url) as HttpWebRequest);Di2015NewLine    HttpWebResponse response = (request.GetResponse() as HttpWebResponse);Di2015NewLineDi2015NewLine    using (Stream stream = response.GetResponseStream()) {Di2015NewLine        // compiled regex to check for <title></title> blockDi2015NewLine        Regex titleCheck = new Regex(@"<title>\\s*(.+?)\\s*</title>", RegexOptions.Compiled | RegexOptions.IgnoreCase);Di2015NewLine        int bytesToRead = 8092;Di2015NewLine        byte[] buffer = new byte[bytesToRead];Di2015NewLine        string contents = "";Di2015NewLine        int length = 0;Di2015NewLine        while ((length = stream.Read(buffer, 0, bytesToRead)) > 0) {Di2015NewLine            // convert the byte-array to a string and add it to the rest of theDi2015NewLine            // contents that have been downloaded so farDi2015NewLine            contents += Encoding.UTF8.GetString(buffer, 0, length);Di2015NewLineDi2015NewLine            Match m = titleCheck.Match(contents);Di2015NewLine            if (m.Success) {Di2015NewLine                // we found a <title></title> match =]Di2015NewLine                title = m.Groups[1].Value.ToString();Di2015NewLine                break;Di2015NewLine            } else if (contents.Contains("</head>")) {Di2015NewLine                // reached end of head-block; no title found =[Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine} catch (Exception e) {Di2015NewLine    Console.WriteLine(e);Di2015NewLine}Di2015NewLine
11653270Di2015UniqueSeparatorRegex
11653270Di2015UniqueSeparatorusing
11653270Di2015UniqueSeparatorStream
11653287Di2015UniqueSeparatorEXPORTSDi2015NewLine??0?$oserializer@Vportable_binary_oarchive@@U?$pair@$$CBHH@std@@@detail@archive@boost@@QEAA@XZ  @1  NONAMEDi2015NewLine
11653287Di2015UniqueSeparatorEXPORTSDi2015NewLine;BEGIN_RENAMING_TAGDi2015NewLine;END_RENAMING_TAGDi2015NewLine
11653287Di2015UniqueSeparator#perl -wDi2015NewLineprint $ARGC;Di2015NewLinedie "ERROR: Provide name of one DEF file to process\\n" if @ARGV != 1;Di2015NewLineDi2015NewLinemy $renaming = 0;Di2015NewLinemy $counter = 1;Di2015NewLinemy $fileName = $ARGV[0];Di2015NewLinemy @lines;Di2015NewLineopen(FILE, $fileName) or die $!;Di2015NewLinewhile(<FILE>)Di2015NewLine{Di2015NewLine    if(/;END_RENAMING_TAG/)Di2015NewLine    {Di2015NewLine        $renaming = 0;Di2015NewLine    }Di2015NewLineDi2015NewLine    if($renaming == 1)Di2015NewLine    {Di2015NewLine        chomp;Di2015NewLine        my $line = $_."\\t@".$counter."\\tNONAME";Di2015NewLine        push(@lines, $line);Di2015NewLine        ++$counter;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        chomp;Di2015NewLine        push(@lines, $_);Di2015NewLine    }Di2015NewLineDi2015NewLine    if(/;BEGIN_RENAMING_TAG/)Di2015NewLine    {Di2015NewLine        $renaming = 1;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclose FILE;Di2015NewLineopen(FILE, ">$fileName") or die $!;Di2015NewLineprint FILE join("\\n", @lines);Di2015NewLineclose FILE;Di2015NewLine
11653287Di2015UniqueSeparator<entry> @<ordinal> NONAME
11653287Di2015UniqueSeparatordllexport
11653287Di2015UniqueSeparatorGetProcAddress
11653289Di2015UniqueSeparatorkernel.Bind(typeof(DbContext)).ToMethod(context => new DbContext(connectionString)).InRequestScope();Di2015NewLinekernel.Bind(typeof(DbContext)).ToMethod(context => new DbContext(connectionString)).WhenInjectedInto<MyTask>();Di2015NewLine
11653295Di2015UniqueSeparatorHtml.Raw()
11653295Di2015UniqueSeparator@Html.Raw(MyStringVar)Di2015NewLine
11653595Di2015UniqueSeparatorxml.LoadXml
11653595Di2015UniqueSeparatorxml.Load(@"..\\..\\..\\ApplicationMonitoring.xml");Di2015NewLine
11653595Di2015UniqueSeparator..\\..\\..\\ApplicationMonitoring.xmlDi2015NewLine
11653595Di2015UniqueSeparatorXmlDocument xml = new XmlDocument();Di2015NewLinexml.Load(@"..\\..\\..\\ApplicationMonitoring.xml");Di2015NewLinestring port = xml.DocumentElement["proxyAgent"].Attributes["listenPort"].Value;Di2015NewLine//And to get stuff more specifically in the tree something like thisDi2015NewLinestring function1 = xml.SelectSingleNode("//function1").Attributes["listenPort"].Value;Di2015NewLine
11653595Di2015UniqueSeparatorxml.SelectNodes("//Application")
11653680Di2015UniqueSeparator[Producer Threads]Di2015NewLineEdit Event -\\                [Database Servicer Thread]Di2015NewLineEdit Event ------> Queue -> Dequeue and Apply to Session -> DatabaseDi2015NewLineEdit Event -/ Di2015NewLine
11653680Di2015UniqueSeparatorBlockingCollection<Action<Session>>
11653680Di2015UniqueSeparator// Assuming you have a work queue defined as Di2015NewLinepublic static BlockingCollection<Action<Session>> myWorkQueue = new BlockingCollection<Action<Session>>();Di2015NewLineDi2015NewLine// and your eventargs looks something like thisDi2015NewLinepublic class MyObjectUpdatedEventArgs : EventArgs {Di2015NewLine    public MyObject MyObject { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// And one of your event handlersDi2015NewLinepublic MyObjectWasChangedEventHandler(object sender, MyObjectUpdatedEventArgs e) {Di2015NewLine    myWorkQueue.Add(s=>SaveOrUpdate(e.MyObject));Di2015NewLine}Di2015NewLineDi2015NewLine// Then a thread in a constant loop processing these items could work:Di2015NewLinepublic void ProcessWorkQueue() {Di2015NewLine    var mySession = mySessionFactory.CreateSession();Di2015NewLine    while (true) {Di2015NewLine        var nextWork = myWorkQueue.Take();Di2015NewLine        nextWork(mySession);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// And to run the above:Di2015NewLinevar dbUpdateThread = new Thread(ProcessWorkQueue);Di2015NewLinedbUpdateThread.IsBackground = true;Di2015NewLinedbUpdateThread.Start();Di2015NewLine
11653717Di2015UniqueSeparatorif (a is MyDataGridView) // Type name changed to protect reader sanityDi2015NewLine{Di2015NewLine}Di2015NewLineelse if (a is DataGridView)Di2015NewLine{Di2015NewLine    // This will include any subclass of DataGridView *other than*Di2015NewLine    // MyDataGridViewDi2015NewLine} Di2015NewLine
11653717Di2015UniqueSeparatorGetType()
11653717Di2015UniqueSeparatorDataGridView
11653717Di2015UniqueSeparatorMyDataGridView
11653721Di2015UniqueSeparatorHttpUtility.HtmlDecode()
11653721Di2015UniqueSeparatorSystem.Web.UI.HtmlControls.HtmlTextArea
11653721Di2015UniqueSeparatornew HtmlGenericControl("input")
11653849Di2015UniqueSeparatorclickedItem.Children
11653849Di2015UniqueSeparatorChildren
11653849Di2015UniqueSeparatorpublic IEnumerable<Child> ChildrenDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        var ret = children;Di2015NewLine        // Mwahahaha! A getter with side-effects. They'll never expect that!Di2015NewLine        children = null; Di2015NewLine        return ret;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11653884Di2015UniqueSeparatorToString
11653884Di2015UniqueSeparatorpublic class Node<T>Di2015NewLine{Di2015NewLine    public T Data { get; set; }Di2015NewLine    public Node<T> Left { get; set; }Di2015NewLine    public Node<T> Right { get; set; }Di2015NewLineDi2015NewLine    public string displayNode()Di2015NewLine    {Di2015NewLine        StringBuilder output = new StringBuilder();Di2015NewLine        displayNode(output, 0);Di2015NewLine        return output.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void displayNode(StringBuilder output, int depth)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (Right != null)Di2015NewLine            Right.displayNode(output, depth+1);Di2015NewLineDi2015NewLine        output.Append('\\t', depth);Di2015NewLine        output.AppendLine(Data.ToString());Di2015NewLineDi2015NewLineDi2015NewLine        if (Left != null)Di2015NewLine            Left.displayNode(output, depth+1);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11653884Di2015UniqueSeparatorNode<string> root = new Node<string>() { Data = "root" };Di2015NewLineroot.Left = new Node<string>() { Data = "1" };Di2015NewLineroot.Right = new Node<string>() { Data = "2" };Di2015NewLineDi2015NewLineroot.Left.Left = new Node<string>() { Data = "3" };Di2015NewLineroot.Left.Right = new Node<string>() { Data = "4" };Di2015NewLineDi2015NewLineConsole.WriteLine(root.displayNode());Di2015NewLine
11653906Di2015UniqueSeparator//book[title[text()='Book123'] and author[text()='Author123']]Di2015NewLine
11654033Di2015UniqueSeparatorBlockingCollection<T>
11654033Di2015UniqueSeparatorTask
11654033Di2015UniqueSeparatorBlockingCollection<T>
11654033Di2015UniqueSeparatorBlockingCollection<T>
11654033Di2015UniqueSeparator    private BlockingCollection<Transaction> _bin = new BlockingCollection<Transaction>();Di2015NewLine    private CancellationTokenSource _tokenSource = new CancellationTokenSource();Di2015NewLine    private Task _consumer;Di2015NewLine
11654033Di2015UniqueSeparator    private void ConsumeTransactions()Di2015NewLine    {Di2015NewLine        // loop until consumer marked completed, or cancellation token setDi2015NewLine        while (!_bin.IsCompleted && !_tokenSource.Token.IsCancelRequested)Di2015NewLine        {Di2015NewLine            Transaction item;Di2015NewLineDi2015NewLine            // try to take item for 100 ms, or until cancelled Di2015NewLine            if (_bin.TryTake(out item, 100, _tokenSource.Token)Di2015NewLine            {Di2015NewLine                // consume the itemDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11654033Di2015UniqueSeparator// when you have a task running for life of your program, make sure youDi2015NewLine// use TaskCreationOptions.LongRunning.  This typically sets up its ownDi2015NewLine// dedicated thread (not pooled) without having to deal with threads directlyDi2015NewLine_consumer = Task.Factory.StartNew(ConsumeTransactions, _tokenSource.Token, Di2015NewLine                                  TaskCreationOptions.LongRunning, TaskScheduler.Default);Di2015NewLine
11654033Di2015UniqueSeparator        _bin.TryAdd(someTransaction);Di2015NewLine
11654033Di2015UniqueSeparatorTransaction
11654033Di2015UniqueSeparator_bin.CompleteAdding();Di2015NewLine
11654033Di2015UniqueSeparatorTryTake()
11654033Di2015UniqueSeparatorfalse
11654033Di2015UniqueSeparator_bin.IsCompleted
11654033Di2015UniqueSeparatortrue
11654035Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class UsersVm : ViewModelBase {}Di2015NewLine
11654094Di2015UniqueSeparatorpublic class DatabaseInitializerDi2015NewLine{Di2015NewLine    private DatabaseInitializer()Di2015NewLine    {Di2015NewLine        init1();Di2015NewLine        init2();Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void init1() { ... }Di2015NewLine    private static void init2() { ... }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11654094Di2015UniqueSeparatorpublic class DatabaseInitializerDi2015NewLine{Di2015NewLine    public static void Init() Di2015NewLine    { Di2015NewLine        init1();Di2015NewLine        init2();Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void init1() { ... }Di2015NewLine    private static void init2() { ... }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11654094Di2015UniqueSeparatorMain()Di2015NewLine{Di2015NewLine    DatabaseInitializer.Init();Di2015NewLine}Di2015NewLine
11654098Di2015UniqueSeparatorDataValueField
11654098Di2015UniqueSeparatorDataTextField
11654098Di2015UniqueSeparatorlistB.DataBind();
11654098Di2015UniqueSeparatorlistB.DataTextField = "Text";Di2015NewLinelistB.DataValueField = "Value";Di2015NewLine
11654115Di2015UniqueSeparatorvar schools = db.SchoolsDi2015NewLine     .Where(x => x.State == "<Whatever>")Di2015NewLine     .Select(x => new {Di2015NewLine          School = x,Di2015NewLine          Bobs = x.Where(y => y.MiddleName == "Bob")Di2015NewLine     }).ToList();Di2015NewLineDi2015NewLineList<Schools> schoolsView = new List<Schools>();Di2015NewLineforeach(var x in schools)Di2015NewLine{Di2015NewLine     schoolsView.Add(new SchoolsViewModel(){Di2015NewLine          //Set Properties hereDi2015NewLine          SchooldID = x.School.ID,Di2015NewLine          SchoolName = x.School.Name,Di2015NewLine          Students = x.Bobs.ToList() //You can project here if needed.Di2015NewLine     };Di2015NewLine}Di2015NewLineDi2015NewLinereturn schoolsView;Di2015NewLine
11654115Di2015UniqueSeparator<ul>Di2015NewLine@foreach(var m in Model)  //Assuming your model is a list of SchoolViewModelsDi2015NewLine{Di2015NewLine     <li>@m.SchoolNameDi2015NewLine          <ul>Di2015NewLine               @foreach(var s in m.Students)Di2015NewLine               {Di2015NewLine                    <li>@s.Name</li>Di2015NewLine               }Di2015NewLine          </ul>Di2015NewLine     </li>Di2015NewLine}Di2015NewLine</ul>Di2015NewLine
11654115Di2015UniqueSeparatorString.Join(",", Model.Students)
11654115Di2015UniqueSeparatorpublic class SchoolDi2015NewLine{ Di2015NewLine   public int SchoolId {get; set;} Di2015NewLine   public string Schoolname {get; set;} Di2015NewLine   public int StateId {get; set;} Di2015NewLine   public virtual IList<Student> Students {get; set; }Di2015NewLine} Di2015NewLine
11654115Di2015UniqueSeparatormodelBuilder.Entity<School>()Di2015NewLine     .HasMany(x => x.Students).WithRequired();Di2015NewLine
11654115Di2015UniqueSeparatordb.SchoolsDi2015NewLine    .Where(x => x.Name.Contains("Some Value"))Di2015NewLine    .Include(x => x.Schools.Where(x => x.MiddleName.Contains("SomeValue")))Di2015NewLine    .ToList();Di2015NewLine
11654127Di2015UniqueSeparatoruser
11654127Di2015UniqueSeparatorInstance
11654127Di2015UniqueSeparatorToolTipEnable
11654127Di2015UniqueSeparatorbind.Path = new PropertyPath("ToolTipEnable")
11654127Di2015UniqueSeparatorToolTipService.IsEnabledProperty
11654127Di2015UniqueSeparatorToolTip.IsEnabledProperty
11654127Di2015UniqueSeparator public sealed class EnvironmentalVariables : INotifyPropertyChanged {Di2015NewLine      private static readonly EnvironmentalVariables instance = new EnvironmentalVariables();Di2015NewLine      public static EnvironmentalVariables Instance {Di2015NewLine           get Di2015NewLine           {Di2015NewLine               return instance;Di2015NewLine           }Di2015NewLine      }Di2015NewLineDi2015NewLine      private EnvironmentalVariables() { }Di2015NewLineDi2015NewLine      private bool tooltipEnable;Di2015NewLine      public bool ToolTipEnable {Di2015NewLine           get {Di2015NewLine                return tooltipEnable;Di2015NewLine           }Di2015NewLine           set {Di2015NewLine                if(tooltipEnable != value) {Di2015NewLine                     tooltipEnable = value;Di2015NewLine                     this.RaiseNotifyPropertyChanged("ToolTipEnable");Di2015NewLine                }Di2015NewLine           }Di2015NewLine      }Di2015NewLineDi2015NewLine      private void RaiseNotifyPropertyChanged(string property) {Di2015NewLine           var handler = PropertyChanged;Di2015NewLine           if(handler != null) {Di2015NewLine                handler (this, new PropertyChangedEventArgs(property));Di2015NewLine           }Di2015NewLine      }Di2015NewLineDi2015NewLine      public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine }Di2015NewLine
11654174Di2015UniqueSeparatorvar result = newDicDi2015NewLine    .Where(kvp => !oldDic.ContainsKey(kvp.Key))Di2015NewLine    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);Di2015NewLine
11654221Di2015UniqueSeparatorString.Concat()
11654221Di2015UniqueSeparatorvar allowedString = String.Concat(inputString.Where(c => allowedChars.Contains(c)));Di2015NewLine
11654235Di2015UniqueSeparator[A-Z1-9]+|([A-Z1-9]+\\.[A-Z1-9]+)Di2015NewLine
11654235Di2015UniqueSeparator+
11654235Di2015UniqueSeparator{n,}
11654247Di2015UniqueSeparatorOrderBy
11654247Di2015UniqueSeparatorpublic static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(Di2015NewLine    this IEnumerable<TSource> source,Di2015NewLine    Func<TSource, TKey> keySelector,Di2015NewLine    IComparer<TKey> comparerDi2015NewLine)Di2015NewLine
11654247Di2015UniqueSeparatorTSource
11654247Di2015UniqueSeparatorTKey
11654247Di2015UniqueSeparatorTSource
11654247Di2015UniqueSeparatorTSource
11654247Di2015UniqueSeparatorIEnumerable
11654247Di2015UniqueSeparatorTKey
11654247Di2015UniqueSeparatorGraphicObjects.OrderBy(graphicObject => graphicObject.Nom, new GraphicObjectComparer(true));Di2015NewLine
11654247Di2015UniqueSeparatorFunc<GraphicObject, string>
11654247Di2015UniqueSeparatorIComparer<GraphicObject>
11654247Di2015UniqueSeparatorTKey = string
11654247Di2015UniqueSeparatorTKey = GraphicObject
11654247Di2015UniqueSeparatorFunc<>
11654247Di2015UniqueSeparatorOrderBy
11654247Di2015UniqueSeparatorIComparer<>
11654247Di2015UniqueSeparatorGraphicObject
11654247Di2015UniqueSeparatorGraphicObjects.OrderBy(go => go, new GraphicObjectComparer(true));Di2015NewLine
11654247Di2015UniqueSeparatorvar asc = GraphicObjects.OrderBy(go => go.Nom);Di2015NewLinevar desc = GraphicObjects.OrderByDescending(go => go.Nom);Di2015NewLine
11654306Di2015UniqueSeparatorvoid webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine     foreach (HtmlElement el in webBrowser1.Document.GetElementsByTagName("input"))Di2015NewLine     {Di2015NewLine         el.AttachEventHandler("onclick", (sender1, e1) => clickEventHandler(el, EventArgs.Empty));Di2015NewLine     }Di2015NewLine}Di2015NewLine
11654306Di2015UniqueSeparatorprivate void AttachClickEventToInputs()Di2015NewLine{Di2015NewLine      var htmlElements = webBrowser1.Document.GetElementsByTagName("input");Di2015NewLine      for (int i = 0; i < htmlElements.Count; i++)Di2015NewLine      {Di2015NewLine          htmlElements[i].AttachEventHandler("onclick", (sender1, e1) => clickEventHandler(htmlElements[i], EventArgs.Empty));Di2015NewLine      }Di2015NewLine }Di2015NewLine
11654306Di2015UniqueSeparatorprivate void AttachClickEventToInputs()Di2015NewLine{Di2015NewLine     var htmlElements = webBrowser1.Document.GetElementsByTagName("input");Di2015NewLine     for (int i = 0; i < htmlElements.Count; i++)Di2015NewLine     {Di2015NewLine          HtmlElement el = htmlElements[i];Di2015NewLine          el.AttachEventHandler("onclick", (sender1, e1) => clickEventHandler(el, EventArgs.Empty));Di2015NewLine     }Di2015NewLine}Di2015NewLine
11654469Di2015UniqueSeparatorIXmlSerializable
11654469Di2015UniqueSeparatorReadXml
11654469Di2015UniqueSeparatorminOccurs
11654469Di2015UniqueSeparatormaxOccurs
11654469Di2015UniqueSeparatorXmlReader
11654469Di2015UniqueSeparatorSchemas
11654469Di2015UniqueSeparatorXmlReaderSettings
11654469Di2015UniqueSeparatorCreate
11654469Di2015UniqueSeparatorCreate
11654469Di2015UniqueSeparatorTextReader
11654597Di2015UniqueSeparatorvar str = System.Text.Encoding.Default.GetString(result);Di2015NewLine
11654641Di2015UniqueSeparatorCompositeTransform
11654701Di2015UniqueSeparatorEncoding.Default
11654701Di2015UniqueSeparatorusing (TextWriter tr2 = new StreamWriter(filename, false, Encoding.Default))Di2015NewLine
11654701Di2015UniqueSeparatorvar memory = new MemoryStream();Di2015NewLinevar writer = new StreamWriter(memory, Encoding.Default);Di2015NewLinesr2.Serialize(writer, arr, ns);Di2015NewLine
11654738Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    public MyClass(int id, string name, DateTime startDate)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public MyClass(int id, string name, string startDate)Di2015NewLine        : this(id, name, DateTime.Parse(startDate))Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
11654815Di2015UniqueSeparator<Grid.Style>Di2015NewLine    <Style TargetType="{x:Type Grid}">Di2015NewLine        <Style.Triggers>Di2015NewLine            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:InfoBar}}, Path=IsError}" Value="True">Di2015NewLine                <Setter Property="Background" Value="LightPink" />Di2015NewLine            </DataTrigger>Di2015NewLine            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:InfoBar}}, Path=IsError}" Value="False">Di2015NewLine                <Setter Property="Background" Value="LightYellow" />Di2015NewLine            </DataTrigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</Grid.Style>Di2015NewLine
11654826Di2015UniqueSeparatorvar result = System.Text.RegularExpressions.Regex.Replace(input, @"[^a-zA-Z0-9]", m =>(m.Value == "'" || m.Value == "_") ? "" : "-");Di2015NewLine
11654933Di2015UniqueSeparatorViewModel
11654933Di2015UniqueSeparatormodels
11654933Di2015UniqueSeparatorView
11654933Di2015UniqueSeparatorpublic class CustomerViewModelDi2015NewLine{Di2015NewLine  public int ID { set;get;}Di2015NewLine  public string Name { set;get;}Di2015NewLine  public Address Address {set;get;}Di2015NewLine  public IList<Order> Orders {set;get;}Di2015NewLineDi2015NewLine  public CustomerViewModel()Di2015NewLine  {Di2015NewLine     if(Address==null)Di2015NewLine         Address=new Address();Di2015NewLineDi2015NewLine     if(Orders ==null)Di2015NewLine         Orders =new List<Order>();Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Address Di2015NewLine{Di2015NewLine  public string AddressLine1 { set;get;} Di2015NewLine  //Other properties Di2015NewLine}Di2015NewLineDi2015NewLinepublic class OrderDi2015NewLine{Di2015NewLine  public int OrderID{ set;get;} Di2015NewLine  public int ItemID { set;get;}Di2015NewLine  //Other properties Di2015NewLine}Di2015NewLine
11654933Di2015UniqueSeparatorpublic ActionResult GetCustomer(int id)Di2015NewLine{Di2015NewLine   CustomerViewModel objVM=repositary.GetCustomerFromId(id);Di2015NewLine   objVm.Address=repositary.GetCustomerAddress(id);Di2015NewLine   objVm.Orders=repositary.GetOrdersForCustomer(id);Di2015NewLine   return View(objVM);Di2015NewLine}Di2015NewLine
11654933Di2015UniqueSeparatorCustomerViewModel
11654933Di2015UniqueSeparator@model CustomerViewModelDi2015NewLine@using(Html.BeginForm())Di2015NewLine{Di2015NewLine  <h2>@Model.Name</h2>Di2015NewLine  <p>@Model.Address.AddressLine1</p>Di2015NewLine  @foreach(var order in Model.Orders)Di2015NewLine  {Di2015NewLine    <p>@order.OrderID.ToString()</p>Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
11654958Di2015UniqueSeparatorvar dir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);Di2015NewLine
11654970Di2015UniqueSeparatorTableWrapper
11654970Di2015UniqueSeparatorItems
11654970Di2015UniqueSeparatorBindingList<IRow>
11654970Di2015UniqueSeparatorSystem.Linq
11654970Di2015UniqueSeparatorpublic class GeoGeekTable : TableWrapper Di2015NewLine{Di2015NewLine    public IList<IRow> GetTableItems()Di2015NewLine    {Di2015NewLine        return this.Items;Di2015NewLine    } Di2015NewLine}Di2015NewLine
11654970Di2015UniqueSeparatorBindingList<T>
11654970Di2015UniqueSeparatorTableWrapper
11654970Di2015UniqueSeparatorTableWrapper
11654970Di2015UniqueSeparatorBindingList<T>
11654970Di2015UniqueSeparatorpublic class GeoGeekTable : TableWrapperDi2015NewLine{Di2015NewLine    protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)Di2015NewLine    {Di2015NewLine        // see http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/22693b0e-8637-4734-973e-abbc72065969/Di2015NewLine    }Di2015NewLine}Di2015NewLine
11655041Di2015UniqueSeparator... Di2015NewLineclass ADi2015NewLine{Di2015NewLine    private ObservableCollection<string> variables = new ObservableCollection<string>();Di2015NewLineDi2015NewLine    ...Di2015NewLine    private void FillVariablesList() Di2015NewLine    {Di2015NewLine        variables.Clear();Di2015NewLine        variables.Add(""); Di2015NewLine        variables.Add(New_Variable); Di2015NewLineDi2015NewLine        foreach (Variable v in this.theTaskHost.Variables) Di2015NewLine        { Di2015NewLine            if (!v.SystemVariable && v.DataType == TypeCode.String) Di2015NewLine                variables.Add(v.Name); Di2015NewLine        }Di2015NewLineDi2015NewLine        this.comboBox.DataSource = null;Di2015NewLine        this.comboBox.DataSource = variables;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11655152Di2015UniqueSeparatorFunc<T>
11655152Di2015UniqueSeparatorthis.cachingService.Get<ObjectResult>(id, ()=> this.queryContainer.Get<ObjectQuery>().Execute(new ObjectParameters(id)));Di2015NewLine
11655191Di2015UniqueSeparatorstring email = "";Di2015NewLineforeach (GridViewRow item in GridView1.Rows)Di2015NewLine{Di2015NewLine      //considering 1st column contains email addressDi2015NewLine      //if not, replace it with correct indexDi2015NewLine      email =  item.Cells[0].Text;Di2015NewLine      //code to send emailDi2015NewLineDi2015NewLine}Di2015NewLine
11655191Di2015UniqueSeparatorpublic void button_click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string email = "";Di2015NewLine    foreach (GridViewRow item in GridView1.Rows)Di2015NewLine    {Di2015NewLineDi2015NewLine          //if not, replace it with correct indexDi2015NewLine          email =  item.Cells[4].Text;Di2015NewLine          //code to send emailDi2015NewLine         //reciever email addDi2015NewLine         MailAddress to = new MailAddress(email);Di2015NewLine         //sender email addressDi2015NewLine         MailAddress from = new MailAddress("your@email");Di2015NewLineDi2015NewLine        MailMessage msg = new MailMessage();Di2015NewLine        //use reason shown in gridDi2015NewLine        msg.Subject = item.Cells[3].Text;Di2015NewLineDi2015NewLine        //you can similar extract FName, LName, Account number from gridDi2015NewLine        // and use it in your message bodyDi2015NewLine        //Keep your message body like Di2015NewLine        str email_msg = "Dear {0} {1}, Your cheque for account number {2} bounced because of    the reason {3}";Di2015NewLine        msg = String.Format(email_msg , item.Cells[0].Text,item.Cells[1].Text,item.Cells[2].Text,item.Cells[3].Text);Di2015NewLine        msg.Body = email_msg ;Di2015NewLine        msg.From = from;Di2015NewLine        msg.To.Add(to);Di2015NewLineDi2015NewLine        SendEMail(msg);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11655313Di2015UniqueSeparatorDateTime date = DateTime.Today;Di2015NewLineDateTime firstOfMonth = new DateTime(date.Year, date.Month, 1);Di2015NewLineDateTime twelveMonthAgoFirstOfMonth = firstOfMonth.AddMonths(-12);Di2015NewLineDi2015NewLine// Generate a collection of the months and years for the last 12 monthsDi2015NewLinevar monthYears = Enumerable.Range(-12, 12).Select(monthOffset => { DateTime monthDate = firstOfMonth.AddMonths(monthOffset); return new { y = monthDate.Year, m = monthDate.Month }; });Di2015NewLineDi2015NewLine// Go through the list of months and years and join them to the users retrieved from the database in the subquery.Di2015NewLinevar data = from monthYear in monthYearsDi2015NewLine           join i in (from i in Database.UsersDi2015NewLine                      where i.RegisterDate >= twelveMonthAgoFirstOfMonth && i.RegisterDate < firstOfMonthDi2015NewLine                      select i) on monthYear equals new { y = i.RegisterDate.Year, m = i.RegisterDate.Month } into gjDi2015NewLine           select new UserStatistic() { Date = new DateTime(monthYear.y, monthYear.m, 1), UserCount = gj.Count() });Di2015NewLine
11655313Di2015UniqueSeparator    DateTime date = DateTime.Today;Di2015NewLine    DateTime firstOfMonth = new DateTime(date.Year, date.Month, 1);Di2015NewLine    DateTime twelveMonthAgoFirstOfMonth = firstOfMonth.AddMonths(-12);Di2015NewLine    var monthYears = Enumerable.Range(-12, 12).Select(monthOffset => { DateTime monthDate = firstOfMonth.AddMonths(monthOffset); return new { y = monthDate.Year, m = monthDate.Month }; });Di2015NewLineDi2015NewLine    var data = (from monthYear in monthYearsDi2015NewLine                join i in (from i in Database.UsersDi2015NewLine                           where i.RegisterDate >= twelveMonthAgoFirstOfMonth && i.RegisterDate < firstOfMonthDi2015NewLine                           group i by new {y = i.RegisterDate.Year, m = i.RegisterDate.Month} into gDi2015NewLine                           select new { Key = g.Key, UserCount = g.Count() }) on monthYear equals i.Key into jDi2015NewLine                 from k in j.DefaultIfEmpty()Di2015NewLine                 select new UserStatistic() { Date = new DateTime(monthYear.y, monthYear.m, 1), UserCount = k != null ? k.UserCount : 0 });Di2015NewLine
11655313Di2015UniqueSeparatornew DateTime
11655313Di2015UniqueSeparatorEntityFunctions.CreateDateTime
11655343Di2015UniqueSeparator.Length
11655343Di2015UniqueSeparatorvoid MyFunction(int[] A, int offset)Di2015NewLine{Di2015NewLine    MyFunction2(A, offset + 1);Di2015NewLine}Di2015NewLine
11655361Di2015UniqueSeparatorPreAuthenticate = true
11655361Di2015UniqueSeparatortrue
11655361Di2015UniqueSeparatorHEAD
11655361Di2015UniqueSeparatorHEAD
11655361Di2015UniqueSeparatorhttp://someurl/aresource
11655361Di2015UniqueSeparator//preAuth the requestDi2015NewLine// You can add logic so that you only pre-authenticate the very first request.Di2015NewLine// You should not have to pre-authenticate each request.Di2015NewLineWRequest = (HttpWebRequest)HttpWebRequest.Create(URL);Di2015NewLine// Set the username and the password.Di2015NewLineWRequest.Credentials = new NetworkCredential(user, password);Di2015NewLineWRequest.PreAuthenticate = true;Di2015NewLineWRequest.UserAgent = "Upload Test";Di2015NewLineWRequest.Method = "HEAD";Di2015NewLineWRequest.Timeout = 10000;Di2015NewLineWResponse = (HttpWebResponse)WRequest.GetResponse(); Di2015NewLineWResponse.Close();Di2015NewLine// Make the real request.Di2015NewLine
11655515Di2015UniqueSeparatorprivate void Send(string value) {Di2015NewLine  byte[] data = Encoding.ASCII.GetBytes(value);Di2015NewLine  try {Di2015NewLine    using (TcpClient client = new TcpClient(txtIPAddress.Text, 8000)) {Di2015NewLine      NetworkStream stream = client.GetStream();Di2015NewLine      stream.Write(data, 0, data.Length);Di2015NewLine    }Di2015NewLine  } catch (Exception err) {Di2015NewLine    // Log the errorDi2015NewLine  }Di2015NewLine}Di2015NewLine
11655515Di2015UniqueSeparatorprivate void Worker_TcpListener(object sender, DoWorkEventArgs e) {Di2015NewLine  BackgroundWorker worker = (BackgroundWorker)sender;Di2015NewLine  do {Di2015NewLine    string eMsg = null;Di2015NewLine    int port = 8000;Di2015NewLine    try {Di2015NewLine      _listener = new TcpListener(IPAddress.Any, port);Di2015NewLine      _listener.Start();Di2015NewLine      TcpClient client = _listener.AcceptTcpClient(); // waits until data is avaiableDi2015NewLine      int MAX = client.ReceiveBufferSize;Di2015NewLine      NetworkStream stream = client.GetStream();Di2015NewLine      Byte[] buffer = new Byte[MAX];Di2015NewLine      int len = stream.Read(buffer, 0, MAX);Di2015NewLine      if (0 < len) {Di2015NewLine        string data = Encoding.UTF8.GetString(buffer);Di2015NewLine        worker.ReportProgress(len, data.Substring(0, len));Di2015NewLine      }Di2015NewLine      stream.Close();Di2015NewLine      client.Close();Di2015NewLine    } catch (Exception err) {Di2015NewLine      // Log your errorDi2015NewLine    }Di2015NewLine    if (!String.IsNullOrEmpty(eMsg)) {Di2015NewLine      worker.ReportProgress(0, eMsg);Di2015NewLine    }Di2015NewLine  } while (!worker.CancellationPending);Di2015NewLine}Di2015NewLine
11655517Di2015UniqueSeparator"$(ProjectDir)lib\\MergeConfiguration.exe" "$(ProjectDir)web.config" "$(ProjectDir)lib\\Delta_Dev.dconfig" "$(ProjectDir)Configurations\\web.config-dev.config"Di2015NewLine
11655526Di2015UniqueSeparatorDataContext
11655526Di2015UniqueSeparatorvar viewModel = (ChildViewModel)this.DataContext;Di2015NewLine
11655598Di2015UniqueSeparatorCREATE TABLE mytable (Di2015NewLine    mytable_id int identity(1, 1) not null primary key,Di2015NewLine    name varchar(50)Di2015NewLine)Di2015NewLine
11655598Di2015UniqueSeparator-- We don't need to insert into mytable_id column; SQL Server does it for us!Di2015NewLineINSERT INTO mytable (name) VALUES ('Bob Roberts')Di2015NewLine
11655598Di2015UniqueSeparator-- Begin a transaction - this means everything within this region will be Di2015NewLine-- executed atomically, meaning that nothing else can interfere.Di2015NewLineBEGIN TRANSACTIONDi2015NewLine    DECLARE @id bigintDi2015NewLineDi2015NewLine    -- Retrieves the maximum order number from the tableDi2015NewLine    SELECT @id = MAX(order_number) FROM order_tableDi2015NewLineDi2015NewLine    -- While you are in this transaction, no other queries can change the order table,Di2015NewLine    -- so this insert statement is guaranteed to succeedDi2015NewLine    INSERT INTO order_table (order_number) VALUES (@id + 1)Di2015NewLineDi2015NewLine-- Committing the transaction releases your lock and allows other programs Di2015NewLine-- to work on the order tableDi2015NewLineCOMMIT TRANSACTIONDi2015NewLine
11655600Di2015UniqueSeparator<asp:gridview id="GridView1" runat="server"> Di2015NewLine        <columns> Di2015NewLine                <asp:templatefield> Di2015NewLine                        <itemtemplate> Di2015NewLine                                <asp:linkbutton id="btnEdit" runat="server" commandname="Edit" enabled='<%# !(Eval("Status").ToString().Equals("Closed") || Eval("Status").ToString().Equals("Cancelled")) %>' Di2015NewLinetext="Edit" /> Di2015NewLine                        </itemtemplate> Di2015NewLine                </asp:templatefield> Di2015NewLine        </columns> Di2015NewLine</asp:gridview>Di2015NewLine
11655627Di2015UniqueSeparator// Project both lists (lazily) to a common anonymous typeDi2015NewLinevar anon1 = list1.Select(foo => new { foo.Id, foo.Information });Di2015NewLinevar anon2 = list2.Select(bar => new { bar.Id, bar.Information });Di2015NewLineDi2015NewLinevar map = anon1.Concat(anon2).ToDictionary(x => x.Id, x => x.Information);Di2015NewLine
11655655Di2015UniqueSeparatorvar list = new JavaScriptSerializer().Deserialize<List<KeyValue>>(json);Di2015NewLineDi2015NewLinepublic class KeyValueDi2015NewLine{Di2015NewLine    public string key;Di2015NewLine    public string value;Di2015NewLine}Di2015NewLine
11655655Di2015UniqueSeparatorKeyValue
11655655Di2015UniqueSeparatorvar dict = new JavaScriptSerializer().Deserialize<List<KeyValue>>(json)Di2015NewLine                                     .ToDictionary(x => x.key, x => x.value);Di2015NewLine
11655655Di2015UniqueSeparatorvar dict = JsonConvert.DeserializeObject<JArray>(json)Di2015NewLine                     .ToDictionary(x => (string)x["key"], x => (string)x["value"]);Di2015NewLine
11655697Di2015UniqueSeparator[Display(Name = "Resource_Key", ResourceType = typeof(DataFieldLabels))]Di2015NewLinepublic string myProperty { get; set; }Di2015NewLine
11655697Di2015UniqueSeparatorResourceSet resset = ResourceManager.GetResourceSet(culture, true, false);Di2015NewLinevar translated = resset.GetString("myToken")Di2015NewLine
11655758Di2015UniqueSeparator   fraSelect_2.Location = fraSelect_1.Location;Di2015NewLine   fraSelect_2.Size = fraSelect_1.Size;Di2015NewLine   ... // move every other groupbox to the same spot....Di2015NewLine
11655762Di2015UniqueSeparatorusing(var connection = new OleDbConnection(@"provider=vfpoledb;data source=c:\\")) {Di2015NewLine    using(var command = connection.CreateCommand()) {Di2015NewLine        connection.Open();Di2015NewLine        command.CommandText = "CREATE TABLE Table1(Column1 v(10), Column2 v(10))";Di2015NewLine        command.ExecuteNonQuery();Di2015NewLine        command.CommandText = "EXECSCRIPT([USE Table1 IN SELECT(0) EXCLUSIVE])";        Di2015NewLine        command.ExecuteNonQuery();Di2015NewLine        command.CommandText = "EXECSCRIPT([INDEX ON Column1 TAG Tag1])";Di2015NewLine        command.ExecuteNonQuery();Di2015NewLine        command.CommandText = "EXECSCRIPT([INDEX ON Column1 + Column2 TAG Tag2])";Di2015NewLine        command.ExecuteNonQuery();          Di2015NewLine        connection.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11655833Di2015UniqueSeparatorBackgroundWorker
11655833Di2015UniqueSeparatorBackgroundWorker
11655833Di2015UniqueSeparatorDoWork
11655833Di2015UniqueSeparatorCompleted
11655833Di2015UniqueSeparatorBackgroundWorker
11655833Di2015UniqueSeparatorProgressReported
11655833Di2015UniqueSeparatorReportProgress
11655951Di2015UniqueSeparatorIEnumerable
11655951Di2015UniqueSeparatorGetEnumerator()
11655951Di2015UniqueSeparatorIEnumerator
11655951Di2015UniqueSeparatorIEnumerator
11655951Di2015UniqueSeparatorIEnumerator
11655951Di2015UniqueSeparatorpublic class EnumeratorList : IEnumeratorDi2015NewLine{Di2015NewLine    private object[] _list = new object[10];Di2015NewLine    private int _currentIndex = -1;Di2015NewLineDi2015NewLine    public object Current { get { return _list[_currentIndex] } };Di2015NewLineDi2015NewLine    public bool MoveNext()Di2015NewLine    {Di2015NewLine        return ++_currentIndex < 10;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Reset()Di2015NewLine    {Di2015NewLine        _currentIndex = -1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11655951Di2015UniqueSeparatorIEnumerator
11655951Di2015UniqueSeparatorpublic class EnumerableList : IEnumerableDi2015NewLine{Di2015NewLine    private object[] _list = new object[10];Di2015NewLineDi2015NewLine    public IEnumerator GetEnumerator()Di2015NewLine    {Di2015NewLine        return new ListEnumerator(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    private object this[int i]Di2015NewLine    {Di2015NewLine        return _list[i];Di2015NewLine    }Di2015NewLineDi2015NewLine    private class ListEnumerator : IEnumeratorDi2015NewLine    {Di2015NewLine        private EnumeratorList _list;Di2015NewLine        private int _currentIndex = -1;Di2015NewLineDi2015NewLine        public ListEnumerator(EnumeratorList list)Di2015NewLine        {Di2015NewLine            _list = list;Di2015NewLine        }Di2015NewLineDi2015NewLine        public object Current { get { return _list[_currentIndex] } };Di2015NewLineDi2015NewLine        public bool MoveNext()Di2015NewLine        {Di2015NewLine            return ++_currentIndex < 10;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Reset()Di2015NewLine        {Di2015NewLine            _currentIndex = -1;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11655969Di2015UniqueSeparatoroperatingSystemVersion
11655969Di2015UniqueSeparatoroperatingSystem
11655969Di2015UniqueSeparatorIsServer
11655969Di2015UniqueSeparatoroperatingSystemVersion
11655969Di2015UniqueSeparatoroperatingSystemVersion
11655993Di2015UniqueSeparator\\G
11655993Di2015UniqueSeparator\\GcatDi2015NewLine
11655993Di2015UniqueSeparatorcatcatcatdogcatDi2015NewLine
11655993Di2015UniqueSeparator(cat)(cat)(cat)dogcatDi2015NewLine
11655993Di2015UniqueSeparator\\G
11655993Di2015UniqueSeparatorRegex.Match(string, int)
11655993Di2015UniqueSeparator\\G
11656082Di2015UniqueSeparatorEnumerableRowCollection
11656082Di2015UniqueSeparatorDataTable
11656082Di2015UniqueSeparatorDataRow
11656082Di2015UniqueSeparatorDataTable
11656089Di2015UniqueSeparatorIsChecked=True
11656089Di2015UniqueSeparatorprivate void MyWindow_Loaded (object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine  Mint.IsChecked = true;Di2015NewLine}Di2015NewLine
11656137Di2015UniqueSeparatorobjMainForm.Enabled = false;Di2015NewLine
11656137Di2015UniqueSeparatorConnectezFrm.ShowDialog();Di2015NewLine
11656137Di2015UniqueSeparatorpublic Connectez(MainFrm objfrm)Di2015NewLine
11656137Di2015UniqueSeparatorDialogResult dr = ConnectezFrm.ShowDialog();Di2015NewLineif (dr != DialogResult.OK) {Di2015NewLine    // Do something e.g. disable certain parts of the formDi2015NewLine    // Be sure to leave a button or something enabled to load ConnectezFrm again :-)Di2015NewLine}Di2015NewLine
11656250Di2015UniqueSeparatorCheckMove
11656250Di2015UniqueSeparatorpublic bool CheckMove(int newY, int newX) {Di2015NewLine    if (grid[newY][newX] == WALL)Di2015NewLine        return false;Di2015NewLine    if (newY < 0 || newY > Y_MAX || newX < 0 || newX > X_MAX)Di2015NewLine        return false;Di2015NewLine    return true;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Move(int dir) {Di2015NewLine    // calc new x & yDi2015NewLineDi2015NewLine    if (!CheckMove(newY, newX)) return;Di2015NewLineDi2015NewLine    // else do the moveDi2015NewLine}Di2015NewLine
11656312Di2015UniqueSeparatorint tester;Di2015NewLineif (!Int32.TryParse(textBox1.Text, out tester))Di2015NewLine{Di2015NewLine    errorProvider1.SetError(textBox1, "must be integer");Di2015NewLine    return;Di2015NewLine}Di2015NewLine
11656330Di2015UniqueSeparatorSystem.Diagnostics.Process.Start(strContractpath);Di2015NewLine
11656330Di2015UniqueSeparator.htm
11656330Di2015UniqueSeparatorserver
11656330Di2015UniqueSeparatorResponse.Redirect(<URL to file>);
11656330Di2015UniqueSeparator...Di2015NewLinecase "Print_Contract":Di2015NewLine     strContractFilePath = ConfigurationManager.AppSettings["CustomerContractsDirectory"].ToString();Di2015NewLine     row1 = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);Di2015NewLine     intId = Convert.ToInt32(grdWebs.DataKeys[row1.RowIndex].Value.ToString());Di2015NewLine     objWeb = QDServiceHelper._QDClient.GetDetails(intId);Di2015NewLine     lstOnlineCustomerDocuments = QDServiceHelper._QDClient.GetOnlineCustomerDocumentsByID(intId);Di2015NewLine     contract = lstOnlineCustomerDocuments.ElementAt(0);Di2015NewLine     strContractpath = contract.DocumentFileName;                    Di2015NewLineDi2015NewLine     //System.Diagnostics.Process.Start(strContractpath);Di2015NewLineDi2015NewLine     StreamReader sr = new StreamReader(strContractpath);Di2015NewLine     while(sr.Peek() >= 0)Di2015NewLine     {Di2015NewLine          line=sr.ReadLine();Di2015NewLine          Response.Write(line);Di2015NewLine     }Di2015NewLineDi2015NewLine     break;               Di2015NewLine...Di2015NewLine
11656401Di2015UniqueSeparatorprotected override void OnLoad(EventArgs e) {Di2015NewLine  bl.Add(new KeyValuePair<int, string>(1, "blah1"));Di2015NewLine  bl.Add(new KeyValuePair<int, string>(2, "blah2"));Di2015NewLine  bl.Add(new KeyValuePair<int, string>(3, "blah3"));Di2015NewLine  bl.Add(new KeyValuePair<int, string>(4, "blah4"));Di2015NewLine  bl.Add(new KeyValuePair<int, string>(5, "blah5"));Di2015NewLine  base.OnLoad(e);Di2015NewLine}Di2015NewLine
11656401Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine  InitializeComponent();Di2015NewLine  savedGLs = new BindingList<KeyValuePair<int, string>>();Di2015NewLine  lstGLs.DisplayMember = "Value";Di2015NewLine  lstGLs.ValueMember = "Key";Di2015NewLine  lstGLs.DataSource = savedGLs;Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnLoad(EventArgs e) {Di2015NewLine  populateMgmtCos();Di2015NewLine  populateSavedGLs();Di2015NewLine}Di2015NewLine
11656508Di2015UniqueSeparatorRandom
11656508Di2015UniqueSeparatorRandom
11656508Di2015UniqueSeparatorRandoms
11656598Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    Grid grid1;Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        int cellCount = 14;Di2015NewLine        int numCols = 3;Di2015NewLine        int numRows = (cellCount + 1) / numCols;Di2015NewLine        grid1 = new Grid();Di2015NewLineDi2015NewLine        this.AddChild(grid1);Di2015NewLineDi2015NewLine        for(int i=0; i<numCols; ++i)Di2015NewLine            this.grid1.ColumnDefinitions.Add(new ColumnDefinition());Di2015NewLine        for (int i = 0; i < numRows; ++i)Di2015NewLine            this.grid1.RowDefinitions.Add(new RowDefinition());Di2015NewLineDi2015NewLine        foreach (var g in this.grid1.RowDefinitions)Di2015NewLine        {Di2015NewLine            g.Height = new GridLength(100);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var g in grid1.ColumnDefinitions)Di2015NewLine        {Di2015NewLine            g.Width = new GridLength(100);Di2015NewLine        }Di2015NewLineDi2015NewLine        for(int i=0; i<cellCount; ++i)Di2015NewLine        {Di2015NewLine            int idx = grid1.Children.Add(new Label());Di2015NewLine            Label x = grid1.Children[idx] as Label;Di2015NewLineDi2015NewLine            x.Content = "Cell " + i;Di2015NewLine            x.SetValue(Grid.RowProperty, i/numCols);Di2015NewLine            x.SetValue(Grid.ColumnProperty, i % numCols);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11656686Di2015UniqueSeparator@Model.Name
11656686Di2015UniqueSeparator @Html.DisplayFor(m => m.Name, "NameTemplate")Di2015NewLine
11656696Di2015UniqueSeparatorConstructorInfo ci = typeof(T).GetConstructor(Type.EmptyTypes);Di2015NewLineif (ci != null)Di2015NewLine    x = (T)ci.Invoke(null);Di2015NewLine
11656696Di2015UniqueSeparatorActivator.CreateInstance<T>()
11656727Di2015UniqueSeparatorprotected internal
11656727Di2015UniqueSeparatorprotected
11656727Di2015UniqueSeparatorinternal
11656727Di2015UniqueSeparatorprotected internal
11656733Di2015UniqueSeparator<form runat="server">Di2015NewLine    <asp:Button ID="CommitBTN" runat="server" Text="Button" onclick="CommitBTN_Click" OnClientClick="document.getElementById('HiddenField').value='Ram'"/>Di2015NewLine    <asp:HiddenField ID="HiddenField" runat="server" />Di2015NewLine</form>Di2015NewLine
11656733Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function setMyHiddenField(myValue) {Di2015NewLine        document.getElementById('HiddenField').value = myValue;Di2015NewLine}Di2015NewLine</script>Di2015NewLineDi2015NewLine<form runat="server">Di2015NewLine<asp:Button ID="CommitBTN" runat="server" Text="Button" onclick="CommitBTN_Click" OnClientClick="setMyHiddenField('Ram')"/>Di2015NewLine<asp:HiddenField ID="HiddenField" runat="server" />Di2015NewLine
11656733Di2015UniqueSeparatorprotected void CommitBTN_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Session["ClickedFlag"] = HiddenField.Value;Di2015NewLine        Response.Write(Session["ClickedFlag"]);Di2015NewLine    }Di2015NewLine
11656773Di2015UniqueSeparatorCheck.DataBindings.Add("Checked", dt, "check");Di2015NewLine
11656861Di2015UniqueSeparator<tables>Di2015NewLine    <table name="test1.txt" checksum="KMDalk4lsmxf#lsfjs_akmf3"/>Di2015NewLine    <table name="test2.txt" checksum="asd6o9iASla0gbd#0saaj234"/>Di2015NewLine    <table name="test3.txt" checksum="S9rk2jalkjf93klsa+jmskl2"/>Di2015NewLine    <table name="test4.txt" checksum="aj54oislkaoi309aSWpoa2JD"/>Di2015NewLine</tables>Di2015NewLine
11656861Di2015UniqueSeparatorname
11656928Di2015UniqueSeparator@(Html.Telerik().Grid(Model)Di2015NewLine    .Name("Grid")Di2015NewLine    .ClientEvents(events => events.OnEdit("Grid_onEdit")))Di2015NewLineDi2015NewLine<script type="text/javascript">Di2015NewLine    function Grid_onEdit(e)Di2015NewLine    {   // focus the first grid element, or the first form element with a validation errorDi2015NewLine        $("#Grid").find(":input:enabled:visible:first:not(:input[type=submit])").focus();Di2015NewLine        $("#Grid").find(".input-validation-error").first().focus();Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
11656955Di2015UniqueSeparatorCollection<object>Di2015NewLine
11656955Di2015UniqueSeparatorinputObject.Add(new MyDefinedObject());Di2015NewLineinputObject.Add(new StringBuilder()));Di2015NewLine
11656955Di2015UniqueSeparatorType t = inputObject[0].GetType();Di2015NewLine
11656955Di2015UniqueSeparatorif (inputObject[0] is MyDefinedObject)Di2015NewLine
11656955Di2015UniqueSeparatorif (inputObject is Collection<MyDefinedObject>)Di2015NewLine
11656955Di2015UniqueSeparatorprivate Collection<object> inputObject;Di2015NewLine
11656955Di2015UniqueSeparatorCollection<object>
11656955Di2015UniqueSeparatorprivate Collection<MyDefinedObject> inputObject;Di2015NewLine
11656955Di2015UniqueSeparatorCollection<object>
11656955Di2015UniqueSeparatorprivate void ProcessCollection<T>(Collection<T> inputObject)Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLine// Somewhere else in your code...Di2015NewLineDi2015NewLineCollection<MyDefinedObject> inputObject = // Initialize this however you do nowDi2015NewLineProcessCollection<MyDefinedObject>(inputObject);Di2015NewLine
11657164Di2015UniqueSeparatorlstprema = (from premalinktags in lstpremalink Di2015NewLine            where premalink.PremalinkID == id select premalinktags).ToList();Di2015NewLine
11657164Di2015UniqueSeparatorpremalinktags
11657164Di2015UniqueSeparatorwhere
11657164Di2015UniqueSeparatorpremalinktags.PremalinkID == id
11657241Di2015UniqueSeparator<Window x:Class="DataGridConverter.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525"Di2015NewLine        xmlns:local="clr-namespace:DataGridConverter"Di2015NewLine        >Di2015NewLine    <Window.Resources>Di2015NewLine        <local:MyValConverter x:Key="myCon" />Di2015NewLine    </Window.Resources>Di2015NewLine    <Grid>Di2015NewLine        <DataGrid Name="grid" AutoGenerateColumns="False">Di2015NewLine            <DataGrid.Columns>Di2015NewLine                <DataGridTextColumn Header="Val" Binding="{Binding val, Converter={StaticResource myCon}}" />Di2015NewLine                <DataGridTextColumn Header="Str" Binding="{Binding str}" />               Di2015NewLine            </DataGrid.Columns>Di2015NewLine        </DataGrid>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
11657241Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Data;Di2015NewLineusing System.Windows.Documents;Di2015NewLineDi2015NewLinenamespace DataGridConverterDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Interaction logic for MainWindow.xamlDi2015NewLine    /// </summary>Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            List<MyClass> _source = new List<MyClass>();Di2015NewLine            for (int i = 0; i < 5; i++)Di2015NewLine            {Di2015NewLine                _source.Add(new MyClass { val = 1, str = "test " + i });Di2015NewLine            }Di2015NewLineDi2015NewLine            _source[2].val = -1;Di2015NewLineDi2015NewLine            grid.ItemsSource = _source;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        public int val { get; set; }Di2015NewLine        public string str { get; set; }Di2015NewLine        const int alwaysSetValue = 10;Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyValConverter : IValueConverterDi2015NewLine    {Di2015NewLine        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine        {Di2015NewLine            return (int)value == -1 ? string.Empty : value;Di2015NewLine        }Di2015NewLineDi2015NewLine        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine        {Di2015NewLine            throw new NotImplementedException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11657331Di2015UniqueSeparatortext-decoration:none !important;
11657331Di2015UniqueSeparatorEB Garamond
11657396Di2015UniqueSeparatorDataGridViewComboBox
11657396Di2015UniqueSeparatorDataGridViewComboBoxColumn c = new DataGridViewComboBoxColumn();Di2015NewLinec.Name = "ComboColumn";Di2015NewLinec.DataSource = dataTable;Di2015NewLinec.ValueMember = "ID";Di2015NewLinec.DisplayMember = "Item";Di2015NewLinedataGridView1.Columns.Add(c);Di2015NewLine
11657396Di2015UniqueSeparatordataGridView1.Rows[rowIndexYouWant].Cells["ComboColumn"].Value = 1;Di2015NewLine
11657396Di2015UniqueSeparatorSystem.FormatException
11657396Di2015UniqueSeparatorSystem.FormatException
11657396Di2015UniqueSeparatordataGridView1.Rows[rowIndexYouWant].Cells["ComboColumn"].Value = "1";Di2015NewLine
11657396Di2015UniqueSeparatorDataGridView
11657396Di2015UniqueSeparatorc.DataPropertyName = "GridDataSourceColumnName";Di2015NewLine
11657559Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static TKey GetKey<TKey, TValue>(this Dictionary<TKey, TValue> dict, TValue value)Di2015NewLine    {Di2015NewLine        int index = dict.Values.ToList().IndexOf(value);Di2015NewLineDi2015NewLine        if (index == -1)Di2015NewLine        {Di2015NewLine            return default(TKey); //or maybe throw an exceptionDi2015NewLine        }Di2015NewLineDi2015NewLine        return dict.Keys.ToList()[index];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11657559Di2015UniqueSeparatorDictionary<int, char> dict = new Dictionary<int, char>();Di2015NewLinedict.Add(1, 'a');Di2015NewLinedict.Add(4, 'b');Di2015NewLinedict.Add(6, 'c');Di2015NewLinedict.Add(5, 'd');Di2015NewLineDi2015NewLineConsole.WriteLine(dict.GetKey('d')); //5Di2015NewLine
11657950Di2015UniqueSeparatorwp
11657950Di2015UniqueSeparatorSelect
11657950Di2015UniqueSeparatorComments = o.Elements(wp + "comment")Di2015NewLine            .Select(comment => Comment.FromXElement(comment))Di2015NewLine            .ToList();Di2015NewLine
11657950Di2015UniqueSeparatorXElement
11657950Di2015UniqueSeparatorFromXElement
11657950Di2015UniqueSeparatorpublic static Comment FromXElement(XElement x)Di2015NewLine{Di2015NewLine    return new Comment((int) x.Element(wp + "comment_id"),Di2015NewLine                       (string) x.Element(wp + "author"),Di2015NewLine                       ...);Di2015NewLine}Di2015NewLine
11658015Di2015UniqueSeparatorDictionary<char,char>()
11658015Di2015UniqueSeparatorDictionary<char,char> dict = new Dictionary<char,char>();Di2015NewLinedict.Add('Ã¥', 'a');Di2015NewLine......Di2015NewLine
11658015Di2015UniqueSeparatorchar retValue;Di2015NewLinechar testValue = 'Ã¥';Di2015NewLineif(dict.TryGetValue(testValue, out retValue) == false)Di2015NewLine   retVal = '-';Di2015NewLine
11658070Di2015UniqueSeparatorDateTime
11658122Di2015UniqueSeparatorvar z = new string[x.length + y.length];Di2015NewLinex.CopyTo(z, 0);Di2015NewLiney.CopyTo(z, x.length);Di2015NewLine
11658243Di2015UniqueSeparator[System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IService",Di2015NewLineProtectionLevel= System.Net.Security.ProtectionLevel.Sign)]Di2015NewLine
11658296Di2015UniqueSeparatorNetworkStream
11658296Di2015UniqueSeparatorvar data = new byte[1024];Di2015NewLinevar dataLength = 0;Di2015NewLinevar dataBuffer = new MyCustomDataBuffer();Di2015NewLinewhile (true)Di2015NewLine{Di2015NewLine    while (stream.DataAvailable)Di2015NewLine    {Di2015NewLine        dataLength = stream.Read(data, 0, data.Length);Di2015NewLine        dataBuffer.Append(data, dataLength);Di2015NewLine        while (dataBuffer.ContainsCompleteMessage())Di2015NewLine        {Di2015NewLine            dataBuffer.ProcessMessage();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11658296Di2015UniqueSeparatorMyCustomDataBuffer
11658296Di2015UniqueSeparator00 02
11658296Di2015UniqueSeparatorContainsCompleteMessage()
11658296Di2015UniqueSeparator// here, 'msg' is a byte array that contains just the message dataDi2015NewLinevar msgString = Encoding.UTF8.GetString(msg, 2, msg.Length - 2);Di2015NewLineswitch (msgString)Di2015NewLine{Di2015NewLine    case "kill": KillServer(); break;Di2015NewLine    // etc. Di2015NewLine}Di2015NewLine
11658322Di2015UniqueSeparatorstring href = webBrowser1.Document.GetElementById("id").GetAttribute("href");Di2015NewLine
11658333Di2015UniqueSeparatorHttpRuntime.AppDomainAppVirtualPath
11658333Di2015UniqueSeparatorUrl.*
11658402Di2015UniqueSeparatorContextMenu
11658402Di2015UniqueSeparatorContextMenuStrip
11658402Di2015UniqueSeparatorStaysOpen
11658402Di2015UniqueSeparatorContextMenu
11658464Di2015UniqueSeparatorempRecord
11658464Di2015UniqueSeparatorGetEmployeeRecord
11658464Di2015UniqueSeparatorpublic static corpEmployee.Employee GetEmployeeRecord(corpEmployee queryData)Di2015NewLine{Di2015NewLine    List<corpEmployee.Employee> empRecord = new List<corpEmployee.Employee>();Di2015NewLine    corpCustomerDAL.GetEmployeeData(empRecord, QueryData);Di2015NewLine    return empRecord.Count == 0 ? null : empRecord[0];  //or empRecord.FirstOrDefault()Di2015NewLine}Di2015NewLine
11658464Di2015UniqueSeparatorPage_Load
11658464Di2015UniqueSeparatorcorpEmployee.Employee queryEmp = new corpEmployee.Employee();Di2015NewLinequeryEmp.EmployeeID = PatientCustomerID.Value;Di2015NewLineDi2015NewLinecorpeEmployee.Employee editEmp = corpCustomerMgr.GetEmployeeRecord(queryEmp);Di2015NewLine
11658516Di2015UniqueSeparatorcomboBoxCurrently.Items.AddRange(PlatypusData.getCurrentlyVals().ToArray());Di2015NewLinecomboBoxCurrently.Items.Remove("Surrounded by purplish-blue Penguins");Di2015NewLine
11658603Di2015UniqueSeparatorpublic DataTable CreateQuery(string queryString, string connectionString )Di2015NewLine    {Di2015NewLine        DataTable results =  new DataTable("Results");Di2015NewLine        using (MySqlConnection connection = new MySqlConnection(connectionString))Di2015NewLine        {Di2015NewLine            using (MySqlCommand command = new MySqlCommand(queryString, connection))Di2015NewLine            {Di2015NewLine                command.Connection.Open();Di2015NewLine                command.ExecuteNonQuery();Di2015NewLineDi2015NewLine                using (MySqlDataReader reader = command.ExecuteReader())Di2015NewLine                    results.Load(reader);Di2015NewLine            }Di2015NewLine        }Di2015NewLine       return results;Di2015NewLine    }Di2015NewLine
11658695Di2015UniqueSeparator_timer
11658695Di2015UniqueSeparatorDispose
11658695Di2015UniqueSeparatorIDisposable
11658695Di2015UniqueSeparatorIDisposable
11658695Di2015UniqueSeparatorTimer
11658695Di2015UniqueSeparatorTimer
11658695Di2015UniqueSeparatorRegisterForPeriodicCallbacks
11658695Di2015UniqueSeparatorTimer
11658695Di2015UniqueSeparatorTimer
11658695Di2015UniqueSeparatorSystem.Timers.Timer
11658695Di2015UniqueSeparatorSystem.Threading.Timer
11658695Di2015UniqueSeparatorStart
11658712Di2015UniqueSeparatorprotected void check1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   string checking = "";Di2015NewLine   for (int z = 0; z < check1.Items.Count; z++)Di2015NewLine   {Di2015NewLine      if (check1.Items[z].Selected)Di2015NewLine      {Di2015NewLine         checking += "\\u2022" + check1.Items[z].Text;Di2015NewLine      }Di2015NewLine   }Di2015NewLineDi2015NewLine   Mail emailsystem = new Mail();Di2015NewLine   emailsystem.GetEmail(comment.Text, StatusList.SelectedValue, checking );Di2015NewLine}Di2015NewLine
11658762Di2015UniqueSeparatorvar query = from l in con.LikesDi2015NewLine            where l.User.UserId == givenUserIdDi2015NewLine            select l.Item;Di2015NewLinevar result = query.ToList();Di2015NewLine
11658800Di2015UniqueSeparatorif (i is string)
11658800Di2015UniqueSeparatorif
11658800Di2015UniqueSeparatorif(string.IsNullOrEmpty(i))Di2015NewLine{Di2015NewLine}Di2015NewLine
11658800Di2015UniqueSeparatorstring[] arr = new string[] { "","A"};Di2015NewLineDi2015NewLine            for (int i = 0; i < arr.Length; i++)Di2015NewLine            {Di2015NewLine                if (string.IsNullOrEmpty(arr[i]))Di2015NewLine                {Di2015NewLine                    arr[i] = "Hello";Di2015NewLine                }Di2015NewLine            }Di2015NewLine
11658802Di2015UniqueSeparatorsmtp.Credentials = new NetworkCredential("sheikh.abm@gmail.com ","somepasswordDi2015NewLine
11658802Di2015UniqueSeparatorgmail.com
11658802Di2015UniqueSeparatorsmtp.Port = 465;   Di2015NewLine
11659042Di2015UniqueSeparatorTestString
11659042Di2015UniqueSeparatorXmlText
11659042Di2015UniqueSeparatorXmlElement
11659185Di2015UniqueSeparatorbasicUser
11659185Di2015UniqueSeparatorpublic class AddDobBindingVisitor : ExpressionVisitorDi2015NewLine{Di2015NewLine    private ParameterExpression parameter;Di2015NewLineDi2015NewLine    protected override Expression VisitLambda<T>(Expression<T> node)Di2015NewLine    {Di2015NewLine        parameter = node.Parameters.Single();Di2015NewLine        return base.VisitLambda(node);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override Expression VisitMemberInit(MemberInitExpression node)Di2015NewLine    {Di2015NewLine        var member = typeof(User).GetProperty("DOB");Di2015NewLine        var newBindings = new[]Di2015NewLine        {Di2015NewLine            Expression.Bind(member, Expression.Property(parameter, "DOB")),Di2015NewLine        };Di2015NewLine        var updatedNode = node.Update(Di2015NewLine            node.NewExpression,Di2015NewLine            node.Bindings.Concat(newBindings));Di2015NewLine        return base.VisitMemberInit(updatedNode);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11659185Di2015UniqueSeparatorExpression<Func<Person, User>> basicUser = person => new User()Di2015NewLine{Di2015NewLine    Name = person.FirstNameDi2015NewLine};Di2015NewLinevar detailedUser = (Expression<Func<Person, User>>)new AddDobBindingVisitor()Di2015NewLine    .Visit(basicUser);Di2015NewLine// detailedUser:Di2015NewLine//     person => new User()Di2015NewLine//     {Di2015NewLine//         Name = person.FirstName,Di2015NewLine//         DOB = person.DOBDi2015NewLine//     }Di2015NewLine
11659462Di2015UniqueSeparatorSelect
11659462Di2015UniqueSeparatorforeach
11659484Di2015UniqueSeparator    private void Add(T data, bool front) {Di2015NewLine        Node<T> newNode = new Node<T>(data, null, null);Di2015NewLine        if (count == 0) {Di2015NewLine            head = tail = newNode;Di2015NewLine        }Di2015NewLine        else if (front) {Di2015NewLine            newNode.Next = head;Di2015NewLine            head.Previous = newNode;Di2015NewLine            head = newNode;Di2015NewLine        else {Di2015NewLine            newNode.Previous = tail;Di2015NewLine            tail.Next = newNode;Di2015NewLine            tail = newNode;Di2015NewLine        }Di2015NewLine        // don't forgetDi2015NewLine        count++;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddFront(T data) {Di2015NewLine        Add(data, true);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddBack(T data) {Di2015NewLine        Add(data, false);Di2015NewLine    }Di2015NewLine
11659644Di2015UniqueSeparatorString.Format
11659644Di2015UniqueSeparatorStringBuilder.AppendFormat
11659644Di2015UniqueSeparatorpublic static string Format(IFormatProvider provider, string format, params object[] args)Di2015NewLine{Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine    // Break up the format string into an array of tokensDi2015NewLine    Token[] tokens = ParseFormatString(format);Di2015NewLineDi2015NewLine    foreach (Token token in tokens)Di2015NewLine    {Di2015NewLine        switch (token.TokenType)Di2015NewLine        {Di2015NewLine            // A Text token is just some text to output directlyDi2015NewLine            case TokenType.Text:Di2015NewLine                sb.Append(token.Text);Di2015NewLine                break;Di2015NewLineDi2015NewLine            // An Index token represents something like {0} or {2:format}Di2015NewLine            //  token.Index is the argument indexDi2015NewLine            //  token.FormatText is the format string inside ('' in the first example, 'format' in the second example)Di2015NewLine            case TokenType.Index:Di2015NewLine                {Di2015NewLine                    object arg = args[token.Index];Di2015NewLineDi2015NewLine                    IFormattable formattable = arg as IFormattable;Di2015NewLine                    if (formattable != null && token.FormatText.Length > 0)Di2015NewLine                    {Di2015NewLine                        // If the argument is IFormattable we pass it the format string specified with the indexDi2015NewLine                        sb.Append(formattable.ToString(token.FormatText, provider));Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        // Otherwise we just use Object.ToStringDi2015NewLine                        sb.Append(arg.ToString());Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                break;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLine
11659644Di2015UniqueSeparatorarg
11659644Di2015UniqueSeparatorToString
11659644Di2015UniqueSeparatorIFormattable
11660059Di2015UniqueSeparatorToInt
11660059Di2015UniqueSeparatorpublic int ToInt(object x) { ... }Di2015NewLine
11660059Di2015UniqueSeparatorpublic int? ToIntOrNull(object x) { ... }Di2015NewLine
11660094Di2015UniqueSeparatorISet<T>
11660094Di2015UniqueSeparatorMySet<T>
11660094Di2015UniqueSeparatorMySet<object>
11660094Di2015UniqueSeparatorMySet<object>
11660094Di2015UniqueSeparatorinstance
11660094Di2015UniqueSeparatorinstance.Contains(instance)
11660094Di2015UniqueSeparatorinstance
11660094Di2015UniqueSeparatorinstance.Contains(instance)
11660094Di2015UniqueSeparatorinstance
11660094Di2015UniqueSeparatorMySet<MySet<object>>
11660094Di2015UniqueSeparatorparadox
11660094Di2015UniqueSeparatorparadox
11660094Di2015UniqueSeparatorMySet<MySet<object>>
11660094Di2015UniqueSeparatorMySet<object>
11660094Di2015UniqueSeparatorparadox.Contains(paradox)
11660094Di2015UniqueSeparatortrue
11660094Di2015UniqueSeparatorparadox
11660094Di2015UniqueSeparatorfalse
11660094Di2015UniqueSeparatorfalse
11660094Di2015UniqueSeparatorparadox
11660094Di2015UniqueSeparatortrue
11660094Di2015UniqueSeparatorContains
11660094Di2015UniqueSeparatorISet<T>
11660094Di2015UniqueSeparatorMySet<T>
11660094Di2015UniqueSeparatorContains
11660094Di2015UniqueSeparatorC#
11660094Di2015UniqueSeparatorMySet<string>
11660094Di2015UniqueSeparatorparadox2
11660094Di2015UniqueSeparatorGetEnumerator
11660094Di2015UniqueSeparatorusing ... //Everything;Di2015NewLineDi2015NewLinepublic static class Decider {Di2015NewLineDi2015NewLine    private MySet<string> _haltingSet = CreateHaltingSet();Di2015NewLineDi2015NewLine    static void Main(string [] args) {Di2015NewLine        Console.WriteLine(_haltingSet.Contains(args[0]));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11660094Di2015UniqueSeparatorContains
11660094Di2015UniqueSeparatorContains
11660094Di2015UniqueSeparatorMySet<T>
11660094Di2015UniqueSeparatorReal
11660094Di2015UniqueSeparatornonHalting
11660094Di2015UniqueSeparatorMySet<Real>
11660094Di2015UniqueSeparatorIsProperSubsetOf
11660094Di2015UniqueSeparatornonHalting
11660157Di2015UniqueSeparatorpublic static unsafe void SwapX4(Byte[] Source)  Di2015NewLine{  Di2015NewLine    fixed (Byte* pSource = &Source[0])  Di2015NewLine    {  Di2015NewLine        Byte* bp = pSource;  Di2015NewLine        Byte* bp_stop = bp + Source.Length;  Di2015NewLineDi2015NewLine        while (bp < bp_stop)  Di2015NewLine        {Di2015NewLine            *(UInt32*)bp = (UInt32)(Di2015NewLine                (*bp       << 24) |Di2015NewLine                (*(bp + 1) << 16) |Di2015NewLine                (*(bp + 2) <<  8) |Di2015NewLine                (*(bp + 3)      ));Di2015NewLine            bp += 4;  Di2015NewLine        }  Di2015NewLine    }  Di2015NewLine}Di2015NewLine
11660204Di2015UniqueSeparator[DllImport("user32.dll", SetLastError = true)]Di2015NewLinestatic extern bool OpenClipboard(IntPtr hWndNewOwner);Di2015NewLineDi2015NewLine[DllImport("user32.dll", SetLastError = true)]Di2015NewLinestatic extern bool CloseClipboard();Di2015NewLine
11660204Di2015UniqueSeparator[DllImport("shell32.dll", CharSet = CharSet.Auto)]Di2015NewLineprivate static extern int DragQueryFile(IntPtr hDrop, uint iFile, StringBuilder lpszFile, int cch);Di2015NewLine
11660204Di2015UniqueSeparator    var dummyFiles = new StringCollection();Di2015NewLine    dummyFiles.Add(Path.GetTempFileName());Di2015NewLine    dummyFiles.Add(Path.GetTempFileName());Di2015NewLineDi2015NewLine    Clipboard.Clear();Di2015NewLine    Clipboard.SetFileDropList(dummyFiles);   Di2015NewLineDi2015NewLine    OpenClipboard(IntPtr.Zero);Di2015NewLineDi2015NewLine    IntPtr hDrop = GetClipboardData(15);Di2015NewLineDi2015NewLine    var count = DragQueryFile(hDrop, uint.MaxValue, null, 0);Di2015NewLineDi2015NewLine    // etc.Di2015NewLineDi2015NewLine    CloseClipboard();Di2015NewLine
11660259Di2015UniqueSeparator public void MyMethod() Di2015NewLine  {Di2015NewLine      //Do whatever;Di2015NewLineDi2015NewLine  }Di2015NewLine
11660259Di2015UniqueSeparator  public string MyText Di2015NewLine  {Di2015NewLine    get { return _MyText; }Di2015NewLineDi2015NewLine    set Di2015NewLine    {Di2015NewLine       _MyText = value;Di2015NewLine       RaisePropertyChanged("MyText")Di2015NewLine       // THen call that methodDi2015NewLine       MyMehtod();Di2015NewLine    }Di2015NewLineDi2015NewLine   }Di2015NewLine
11660259Di2015UniqueSeparator<Textbox Text="{Binding Foo}">Di2015NewLine  <i:Interaction.Triggers>Di2015NewLine    <i:EventTrigger EventName="TextChanged">Di2015NewLine      <i:InvokeCommandAction Command="{Binding TextChangedCommand}" />Di2015NewLine    </i:EventTrigger>Di2015NewLine </i:Interaction.Triggers>Di2015NewLine
11660382Di2015UniqueSeparatorSQLiteDataReader
11660382Di2015UniqueSeparatorlong visitlong = Int64.Parse(dr[5].ToString());Di2015NewLine
11660382Di2015UniqueSeparatordr[5]
11660382Di2015UniqueSeparatorlong visitlong = dr.GetInt64(5);Di2015NewLine
11660382Di2015UniqueSeparatorlong visitlong = dr.GetInt64(dr.GetOrdinal("columnName"));Di2015NewLine
11660418Di2015UniqueSeparatorFind()
11660535Di2015UniqueSeparator// We have an interface...Di2015NewLineinterface InterfaceB {}Di2015NewLineDi2015NewLine// And this class implements the interface.Di2015NewLineclass ImplementsB : InterfaceB {}Di2015NewLineDi2015NewLine// But this class does not.Di2015NewLineclass DoesNotImplementB {}Di2015NewLine
11660535Di2015UniqueSeparatorMethodA
11660535Di2015UniqueSeparatorstatic Type MethodA<TClass, TInterface>()Di2015NewLine    where TClass : TInterfaceDi2015NewLine{Di2015NewLine    return typeof(TClass);Di2015NewLine}Di2015NewLine
11660535Di2015UniqueSeparatorType t = MethodA<ImplementsB, InterfaceB>();Di2015NewLine
11660535Di2015UniqueSeparatorType t = MethodA<DoesNotImplementB, InterfaceB>();Di2015NewLine
11660535Di2015UniqueSeparatorMethodA
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatorTInterface
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatorpublic object Instantiate(Type type)Di2015NewLine{Di2015NewLine    // Call the default constructor.Di2015NewLine    // You can change this to call any constructor you want.Di2015NewLine    var constructor = type.GetConstructor(Type.EmptyTypes);Di2015NewLine    var instance = constructor.Invoke(new object[0]);Di2015NewLine    return instance;Di2015NewLine}Di2015NewLine
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatorTInterface
11660535Di2015UniqueSeparatorpublic TInterface Instantiate<TInterface>(Type type)Di2015NewLine{Di2015NewLine    return (TInterface)Instantiate(type);Di2015NewLine}Di2015NewLine
11660535Di2015UniqueSeparatortype
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatorTInterface
11660535Di2015UniqueSeparatorInvalidCastException
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatorInvalidCastException
11660535Di2015UniqueSeparatorpublic TInterface Instantiate<TInterface>(Type type)Di2015NewLine{Di2015NewLine    if (!typeof(TInterface).IsAssignableFrom(type))Di2015NewLine        throw new Exception("Wrong type!");Di2015NewLine    return (TInterface)Instantiate(type);Di2015NewLine}Di2015NewLine
11660535Di2015UniqueSeparatortypeof(TType)
11660535Di2015UniqueSeparatorType
11660535Di2015UniqueSeparatortypeof()
11660535Di2015UniqueSeparatorType
11660616Di2015UniqueSeparatorFileSystemWatcher
11660616Di2015UniqueSeparator private string GetSpecificFileProperties(string file, params int[] indexes)Di2015NewLine        {Di2015NewLine            string fileName = Path.GetFileName(file);Di2015NewLine            string folderName = Path.GetDirectoryName(file);Di2015NewLine            Shell32.Shell shell = new Shell32.Shell();Di2015NewLine            Shell32.Folder objFolder;Di2015NewLine            objFolder = shell.NameSpace(folderName);Di2015NewLine            StringBuilder sb = new StringBuilder();Di2015NewLine            foreach (Shell32.FolderItem2 item in objFolder.Items())Di2015NewLine            {Di2015NewLine                if (fileName == item.Name)Di2015NewLine                {Di2015NewLine                    for (int i = 0; i < indexes.Length; i++)Di2015NewLine                    {Di2015NewLine                        sb.Append(objFolder.GetDetailsOf(item, indexes[i]) + ",");Di2015NewLine                    }Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            string result = sb.ToString().Trim();Di2015NewLine            if (result.Length == 0)Di2015NewLine            {Di2015NewLine                return string.Empty;Di2015NewLine            }Di2015NewLine            return result.Substring(0, result.Length - 1);Di2015NewLine        }Di2015NewLine
11660616Di2015UniqueSeparatorstring Type = GetSpecificFileProperties(filePath, 2);Di2015NewLinestring ObjectKind = GetSpecificFileProperties(filePath, 11);Di2015NewLineDateTime CreatedDate = Convert.ToDateTime(GetSpecificFileProperties(filePath, 4));Di2015NewLineDateTime LastModifiedDate = Convert.ToDateTime(GetSpecificFileProperties(filePath, 3));Di2015NewLineDateTime LastAccessDate = Convert.ToDateTime(GetSpecificFileProperties(filePath, 5));Di2015NewLinestring LastUser = GetSpecificFileProperties(filePath, 10);Di2015NewLinestring ComputerName = GetSpecificFileProperties(filePath, 53);Di2015NewLinestring FileSize = GetSpecificFileProperties(filePath, 1);Di2015NewLine
11660659Di2015UniqueSeparator\\[.+?\\]Di2015NewLine
11660659Di2015UniqueSeparator\\[[^\\]]+\\]Di2015NewLine
11660696Di2015UniqueSeparatorString.Format
11660696Di2015UniqueSeparator"Date: {0} Time: {1}"
11660696Di2015UniqueSeparator{0}
11660696Di2015UniqueSeparator{1}
11660696Di2015UniqueSeparatorString.Format
11660696Di2015UniqueSeparator13-07-2012
11660696Di2015UniqueSeparator13/07/2012
11660696Di2015UniqueSeparatorCultureInfo
11660696Di2015UniqueSeparatorDateTime date
11660696Di2015UniqueSeparatorCultureInfo
11660696Di2015UniqueSeparatorToString
11660696Di2015UniqueSeparatord
11660696Di2015UniqueSeparatorvar str = date.ToString("d", CultureInfo.InvariantCulture);Di2015NewLine
11660796Di2015UniqueSeparatorDateTime.TryParseExact
11660796Di2015UniqueSeparatorDateTime result;Di2015NewLineif (DateTime.TryParseExact(Di2015NewLine    str,                            // The string you want to parseDi2015NewLine    "dd-MM-yyyy",                   // The format of the string you want to parse.Di2015NewLine    CultureInfo.InvariantCulture,   // The culture that was usedDi2015NewLine                                    // to create the date/time notationDi2015NewLine    DateTimeStyles.None,            // Extra flags that control what assumptionsDi2015NewLine                                    // the parser can make, and where whitespaceDi2015NewLine                                    // may occur that is ignored.Di2015NewLine    out result))                    // Where the parsed result is stored.Di2015NewLine{Di2015NewLine    // Only when the method returns true did the parsing succeed.Di2015NewLine    // Therefore it is in an if-statement and at this pointDi2015NewLine    // 'result' contains a valid DateTime.Di2015NewLine}Di2015NewLine
11660796Di2015UniqueSeparatordd-MM-yyyy
11660796Di2015UniqueSeparatorg
11660796Di2015UniqueSeparator26-07-2012
11660796Di2015UniqueSeparatordd-MM-yyyy
11660796Di2015UniqueSeparator7/26/2012
11660796Di2015UniqueSeparatorM/d/yyyy
11660796Di2015UniqueSeparatorstr
11660796Di2015UniqueSeparatord/M/yyyy
11660796Di2015UniqueSeparator\\d{1,2}\\/\\d{1,2}\\/\\d{4}
11660831Di2015UniqueSeparatorUnmanagedMemoryStream(byte* pointer, long length)
11660831Di2015UniqueSeparatorIntPtr.ToPointer()
11660831Di2015UniqueSeparatorUnmanagedMemoryStream unmanagedmemstream = UnmanagedMemoryStream(p.ToPointer(), 100);Di2015NewLine
11660831Di2015UniqueSeparatorMarshal.Copy(IntPtr source, byte[] destination, int startIndex,int length)
11660831Di2015UniqueSeparatorbyte[] buffer = new byte[100];Di2015NewLineMarshal.Copy(p , buffer, 0, buffer.Lenght);Di2015NewLine
11660852Di2015UniqueSeparatorHttpContent content = new FormUrlEncodedContent(new[]Di2015NewLine{Di2015NewLine    new KeyValuePair<string, string>("username", username),Di2015NewLine    new KeyValuePair<string, string>("password", password),Di2015NewLine    new KeyValuePair<string, string>("login", "Login"),Di2015NewLine    new KeyValuePair<string, string>("keeplogged", "1")Di2015NewLine});Di2015NewLine
11661017Di2015UniqueSeparatorprivate void propertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show(e.NewSelection.Label);Di2015NewLineDi2015NewLine    }Di2015NewLine
11661120Di2015UniqueSeparatortextBox1.Visible = checkBox1.Checked;Di2015NewLine
11661120Di2015UniqueSeparatortextBox1.Visible = !checkBox1.Checked;Di2015NewLine
11661393Di2015UniqueSeparatorprivate IList GetUpdateList(string tableName, int id, DataClassesDataContext db)Di2015NewLine{Di2015NewLine    System.Reflection.PropertyInfo pi = db.GetType().GetProperty(tableName);Di2015NewLineDi2015NewLine    var table = pi.GetValue(db, null);Di2015NewLineDi2015NewLine    // Get type of object within the table.Di2015NewLine    Type genericType = table.GetType().GetGenericArguments()[0];Di2015NewLineDi2015NewLine    var param = Expression.Parameter(genericType, "x");Di2015NewLine    var predicateExpr = Expression.Lambda(Di2015NewLine        Expression.GreaterThan(Di2015NewLine            Expression.Property(param, "Id"),Di2015NewLine            Expression.Constant(id)),Di2015NewLine        param);Di2015NewLineDi2015NewLine    return thisDi2015NewLine        .GetType()Di2015NewLine        .GetMethod("GetUpdateListGeneric")Di2015NewLine        .MakeGenericMethod(genericType)Di2015NewLine        .Invoke(this, new[] { table, predicateExpr }) as IList;Di2015NewLine}Di2015NewLineDi2015NewLineprivate IList<T> GetUpdateListGeneric<T>(Di2015NewLine    Table<T> table, Di2015NewLine    Expression<Func<T, bool>> predicate) where T : classDi2015NewLine{Di2015NewLine    return table.Where(predicate).ToList();Di2015NewLine}Di2015NewLine
11661459Di2015UniqueSeparatorEventLoopScheduler
11661459Di2015UniqueSeparatorvar rnd = new Random();Di2015NewLineDi2015NewLinevar xs =Di2015NewLine    ObservableDi2015NewLine        .Generate(Di2015NewLine            0,Di2015NewLine            x => x < 20,Di2015NewLine            x => x + 1,Di2015NewLine            x => x,Di2015NewLine            x => TimeSpan.FromSeconds(rnd.NextDouble() * 3.0));Di2015NewLine
11661459Di2015UniqueSeparatorvar ys =Di2015NewLine    Observable.Create<int>(o =>Di2015NewLine    {Di2015NewLine        var els = new EventLoopScheduler();Di2015NewLine        return xsDi2015NewLine            .ObserveOn(els)Di2015NewLine            .Do(x => els.Schedule(() => Thread.Sleep(1000)))Di2015NewLine            .Subscribe(o);Di2015NewLine    });Di2015NewLine
11661459Di2015UniqueSeparatorEventLoopScheduler
11661459Di2015UniqueSeparatorOnNext
11661459Di2015UniqueSeparatorOnNext
11661459Di2015UniqueSeparatorysDi2015NewLine    .Timestamp()Di2015NewLine    .Select(x => x.Timestamp.Second + (double)x.Timestamp.Millisecond/1000.0)Di2015NewLine    .Subscribe(x => Console.WriteLine(x));Di2015NewLine
11661777Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    MemberList g = new MemberList("group name");Di2015NewLine    g.members[0] = new Member("mem 1");Di2015NewLine    g.members[1] = new Member("mem 2");Di2015NewLine    g.members[2] = new Member("mem 3");Di2015NewLineDi2015NewLine    StringWriter sw = new StringWriter();Di2015NewLine    XmlTextWriter tw = new XmlTextWriter(sw);Di2015NewLine    tw.Formatting = Formatting.Indented;Di2015NewLine    tw.Indentation = 4;Di2015NewLineDi2015NewLine    XmlSerializer ser = new XmlSerializer(typeof(MemberList));Di2015NewLine    ser.Serialize(tw, g);Di2015NewLineDi2015NewLine    tw.Close();Di2015NewLine    sw.Close();Di2015NewLineDi2015NewLine    Console.WriteLine(sw.ToString());Di2015NewLine}Di2015NewLinecatch(Exception exc)Di2015NewLine{Di2015NewLine    Console.WriteLine(exc.Message);Di2015NewLine}Di2015NewLine
11661829Di2015UniqueSeparator@Html.CheckBox/CheckBoxFor
11661829Di2015UniqueSeparator<input type="checkbox" name="gender" />
11661829Di2015UniqueSeparator@Html.CheckBox/CheckBoxFor
11661873Di2015UniqueSeparatorProperties.Resources
11661922Di2015UniqueSeparator\\t
11661922Di2015UniqueSeparatorString.Format
11661922Di2015UniqueSeparatorline = string.Format("{0}\\t{1}\\t{2}", word1, word2, word3);Di2015NewLine
11661978Di2015UniqueSeparatorvalue
11661978Di2015UniqueSeparator.ReturnsForAnyArgs()
11662044Di2015UniqueSeparator    <Grid>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition Height="50"/>Di2015NewLine        <RowDefinition Height="50"/>Di2015NewLine    </Grid.RowDefinitions>Di2015NewLineDi2015NewLine    <ComboBox Height="23" ItemsSource="{Binding Cars}" DisplayMemberPath="Name" HorizontalAlignment="Left" Margin="244,10,0,0" Name="comboBox1" VerticalAlignment="Top" Width="120"/>Di2015NewLine    <ComboBox Height="23" Grid.Row="1" ItemsSource="{Binding SelectedItem.Series, ElementName=comboBox1}" HorizontalAlignment="Left" Margin="244,10,0,0" Name="comboBox2" VerticalAlignment="Top" Width="120"/>Di2015NewLineDi2015NewLine</Grid>Di2015NewLineDi2015NewLine    public partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Cars = new ObservableCollection<Car>();Di2015NewLine        Cars.Add(new Car() { Name = "Peugeut", Series = new ObservableCollection<string>() { "106", "206", "306" } });Di2015NewLine        Cars.Add(new Car() { Name = "Ford", Series = new ObservableCollection<string>() { "406", "506", "606" } });Di2015NewLine        Cars.Add(new Car() { Name = "BMW", Series = new ObservableCollection<string>() { "706", "806", "906" } });Di2015NewLine        DataContext = this;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public ObservableCollection<Car> Cars { get; set; }Di2015NewLineDi2015NewLine}Di2015NewLinepublic class CarDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public ObservableCollection<string> Series { get; set; }Di2015NewLine}Di2015NewLine
11662337Di2015UniqueSeparatorint
11662337Di2015UniqueSeparatorje
11662337Di2015UniqueSeparatorjne
11662337Di2015UniqueSeparatorjxx
11662337Di2015UniqueSeparator==
11662337Di2015UniqueSeparator!=
11662337Di2015UniqueSeparatorSystem.Diagnostics.Stopwatch
11662337Di2015UniqueSeparatorStart()
11662337Di2015UniqueSeparatorStop()
11662339Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // List of strings that you may consider it from your Di2015NewLine        /// database which is String1Di2015NewLine        List<string> lstStrings = new List<string>();Di2015NewLine        lstStrings.Add("twenty one");Di2015NewLine        lstStrings.Add("twenty two");Di2015NewLine        lstStrings.Add("twenty three");Di2015NewLine        lstStrings.Add("twenty four");Di2015NewLineDi2015NewLine        // The string to compare to which is your String2Di2015NewLine        string strString = "one two four";Di2015NewLineDi2015NewLine        // Splitting the strings to be comparedDi2015NewLine        string[] strArray = strString.Split(' '); Di2015NewLineDi2015NewLine        // The linq that helps you query the data exactly as what you wantedDi2015NewLine        var result = (from string A in lstStringsDi2015NewLine                               from string B in strArrayDi2015NewLine                               where A.Contains(B)Di2015NewLine                               select A).Distinct();Di2015NewLineDi2015NewLine        // Count resultDi2015NewLine        Console.WriteLine(result.Count());Di2015NewLineDi2015NewLine        // Individual valuesDi2015NewLine        foreach (string str in result)Di2015NewLine        {Di2015NewLine            Console.WriteLine(str);Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    } Di2015NewLine}Di2015NewLine
11662416Di2015UniqueSeparatorGetPixel()
11662495Di2015UniqueSeparatorwhile ((c && a < b) || (!c && b < a)) {Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
11662495Di2015UniqueSeparatorwhile (c ? (a < b) : (b < a)) {Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
11662502Di2015UniqueSeparatorout
11662502Di2015UniqueSeparatorpublic void GetTwoNumers(out int num1, out int num2) {Di2015NewLine    num1 = 4;Di2015NewLine    num2 = 2;Di2015NewLine}Di2015NewLine
11662502Di2015UniqueSeparatorWebClient
11662502Di2015UniqueSeparatorJObject
11662502Di2015UniqueSeparatorpublic static JObject WebRequest(string url) {Di2015NewLine    var client = new WebClient();Di2015NewLine    client.Headers.Add("User-Agent", "Nobody");Di2015NewLine    var response = client.DownloadString(new Uri(url));Di2015NewLine    var responsestring = response.ToString();Di2015NewLine    return JObject.Parse(responsestring);Di2015NewLine}Di2015NewLine
11662502Di2015UniqueSeparatorpublic class Item {Di2015NewLine    public int Id { get; private set; }Di2015NewLine    public string Name { get; private set; }Di2015NewLine    public string Category { get; private set; }Di2015NewLine    public float Price { get; private set; }Di2015NewLine    public string Website { get; private set; }Di2015NewLineDi2015NewLine    private Item() {Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Item GetFromUrl(string url) {Di2015NewLine       var o = WebRequest(url);Di2015NewLineDi2015NewLine        return new Item() {Di2015NewLine            Id = (int)o["Id"],Di2015NewLine            Name = (string)o["Name"],Di2015NewLine            Category = (string)o["Category"],Di2015NewLine            Price = (float)o["Price"],Di2015NewLine            Website = (string)o["Website"],Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
11662502Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e) {Di2015NewLine    string url = "...";Di2015NewLine    var item = Item.GetFromUrl(url);Di2015NewLineDi2015NewLine    MessageBox.Show("You found item #" + item.Id + " named " + item.Name);Di2015NewLineDi2015NewLine    txtBoxName.Text = item.Name;Di2015NewLine    txtBoxCat.Text = item.Category;Di2015NewLine}Di2015NewLine
11662502Di2015UniqueSeparatorGetFromUrl
11662547Di2015UniqueSeparatorInvalidate
11662547Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    Bitmap myImage;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void timer1_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        myImage = new Bitmap("Your Image Name Here");Di2015NewLine        Invalidate();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (myImage != null)Di2015NewLine            e.Graphics.DrawImage(myImage,0,0);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
11662547Di2015UniqueSeparatorForm1.ActiveForm
11662547Di2015UniqueSeparatornamespace testimgDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        Bitmap myImage;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void timer1_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            myImage = doimg.picture();Di2015NewLine            Invalidate();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            timer1.Enabled = true;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine        {Di2015NewLine            if (myImage != null)Di2015NewLine                e.Graphics.DrawImage(myImage,0,0);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11662547Di2015UniqueSeparatornamespace testimgDi2015NewLine{Di2015NewLine    static class  doimgDi2015NewLine    {Di2015NewLine        static Color[] clr = new Color[] { Color.Red, Color.Blue, Color.Black, Color.Violet, Color.Wheat };Di2015NewLine        static  int count = 0;Di2015NewLine        static  public Bitmap picture()Di2015NewLine        {Di2015NewLineDi2015NewLine            // some staffs to get a picture, so it's in bmp object now.Di2015NewLine            Bitmap bmp = new Bitmap(200, 200, System.Drawing.Imaging.PixelFormat.Format32bppArgb);Di2015NewLineDi2015NewLine            // Added some drawing to bitmap to test functionalityDi2015NewLine            Graphics gfx = Graphics.FromImage(bmp);Di2015NewLine            gfx.FillEllipse(new SolidBrush(clr[count]),new Rectangle(0,0,199,199));Di2015NewLineDi2015NewLine            gfx.Dispose();Di2015NewLineDi2015NewLine            if (count >= 4)Di2015NewLine                count = 0;Di2015NewLine            elseDi2015NewLine                count += 1;Di2015NewLineDi2015NewLine            return bmp;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11662623Di2015UniqueSeparator/// <summary>Di2015NewLine/// Converts the quaternion to it's matrix representation.Di2015NewLine/// </summary>Di2015NewLine/// <returns>A matrix representing the quaternion.</returns>Di2015NewLinepublic Matrix ToMatrix()Di2015NewLine{Di2015NewLine    if (!this.Normalized)Di2015NewLine        return this.Normalize().ToMatrix();Di2015NewLineDi2015NewLine    double xx = X * X;Di2015NewLine    double xy = X * Y;Di2015NewLine    double xz = X * Z;Di2015NewLine    double xw = X * W;Di2015NewLineDi2015NewLine    double yy = Y * Y;Di2015NewLine    double yz = Y * Z;Di2015NewLine    double yw = Y * W;Di2015NewLineDi2015NewLine    double zz = Z * Z;Di2015NewLine    double zw = Z * W;Di2015NewLineDi2015NewLine    return new Matrix(new double[,]Di2015NewLine    {Di2015NewLine        { 1 - 2 * (yy + zz), 2 * (xy - zw), 2 * (xz + yw), 0 },Di2015NewLine        { 2 * (xy + zw), 1 - 2 * (xx + zz), 2 * (yz - xw), 0 },Di2015NewLine        { 2 * (xz - yw), 2 * (yz + xw), 1 - 2 * (xx + yy), 0 },Di2015NewLine        { 0, 0, 0, 1 }Di2015NewLine    });Di2015NewLine}Di2015NewLine
11662657Di2015UniqueSeparatorXmlElement.InnerText
11662657Di2015UniqueSeparatorXmlText xmlThumb = xmlDoc.CreateTextNode(textBox2.Text.Trim());Di2015NewLineitemEl.AppendChild(xmlThumb);
11662657Di2015UniqueSeparator// new codeDi2015NewLinethumbEl.InnerText = textBox2.Text.Trim();Di2015NewLine
11662672Di2015UniqueSeparator<Button Click="Button_Click" Content="bah">Di2015NewLine        <Button.Style>Di2015NewLine            <Style TargetType="Button">Di2015NewLine                <Style.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Path=DataContext}" Value="{x:Null}" >Di2015NewLine                        <Setter Property="Visibility" Value="Collapsed"/>Di2015NewLine                    </DataTrigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine        </Button.Style>Di2015NewLine    </Button>Di2015NewLine
11662764Di2015UniqueSeparatorNetworkStream.Socket
11662764Di2015UniqueSeparatorNetworkStream.Read
11662764Di2015UniqueSeparatorSocket.Receive
11662798Di2015UniqueSeparatorlock
11662815Di2015UniqueSeparator ((IObjectContextAdapter)db).ObjectContext.Attach((IEntityWithKey)entity); Di2015NewLine
11662815Di2015UniqueSeparatorpublic class Person : IEntityWithKeyDi2015NewLine{Di2015NewLine    public int PersonId { get; set; }Di2015NewLine    public string PersonName { get; set; }Di2015NewLineDi2015NewLine    public EntityKey EntityKey { get; set; }Di2015NewLine}Di2015NewLine
11662984Di2015UniqueSeparatorRegex with Stream
11662984Di2015UniqueSeparatorMono-Project Regex
11662984Di2015UniqueSeparatorRegex
11662984Di2015UniqueSeparatorString.Replace
11662984Di2015UniqueSeparatorFile.WriteAllText(filePath, Di2015NewLine                  File.ReadAllText(filePath).Replace(searchText, replaceText));Di2015NewLine
11663008Di2015UniqueSeparatorField
11663008Di2015UniqueSeparatorFields
11663008Di2015UniqueSeparatorvar q = doc.Descendants("Field").ToList();Di2015NewLine
11663020Di2015UniqueSeparatorname
11663020Di2015UniqueSeparatorh3
11663020Di2015UniqueSeparatorp
11663020Di2015UniqueSeparatorul
11663020Di2015UniqueSeparatorIEnumerable<XElement> GroupedElements(XElement root)Di2015NewLine{Di2015NewLine    var groupedItems =Di2015NewLine        from element in root.Elements()Di2015NewLine        group elementDi2015NewLine        by newDi2015NewLine        {Di2015NewLine            Element = element.Name,Di2015NewLine            Name = (string)element.Attribute("name"),Di2015NewLine        };Di2015NewLine    foreach (var g in groupedItems)Di2015NewLine    {Di2015NewLine        yield return new XElement("h3", g.Key.Name);Di2015NewLine        var isMultiple = g.Skip(1).Any();Di2015NewLine        if (isMultiple)Di2015NewLine            yield return new XElement("ul",Di2015NewLine                from item in gDi2015NewLine                select new XElement("li", item.Value.Trim())Di2015NewLine            );Di2015NewLine        elseDi2015NewLine            yield return new XElement("p", g.Single().Value.Trim());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11663020Di2015UniqueSeparatorvar xmlStr = @"<Items>Di2015NewLine    <Item>Di2015NewLine        <Name name=""Name"">Item 1</Name>Di2015NewLine        <Description name=""Description"">Di2015NewLine            Lorem ipsum dolor sit amet, consectetur adipiscing elit.Di2015NewLine        </Description>Di2015NewLine        <AssociatedItems name=""Associated Items"">Item 2</AssociatedItems>Di2015NewLine        <AssociatedItems name=""Associated Items"">Item 3</AssociatedItems>Di2015NewLine        <AssociatedItems name=""Associated Items"">Item 4</AssociatedItems>Di2015NewLine        <AssociatedItems name=""Associated Items"">Item 5</AssociatedItems>Di2015NewLine    </Item>Di2015NewLine</Items>";Di2015NewLinevar doc = XDocument.Parse(xmlStr);Di2015NewLinevar transformed = new XElement("div", Di2015NewLine    from item in doc.XPathSelectElements("/Items/Item")Di2015NewLine    select GroupedElements(item)Di2015NewLine);Di2015NewLine
11663020Di2015UniqueSeparator<div>Di2015NewLine  <h3>Name</h3>Di2015NewLine  <p>Item 1</p>Di2015NewLine  <h3>Description</h3>Di2015NewLine  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>Di2015NewLine  <h3>Associated Items</h3>Di2015NewLine  <ul>Di2015NewLine    <li>Item 2</li>Di2015NewLine    <li>Item 3</li>Di2015NewLine    <li>Item 4</li>Di2015NewLine    <li>Item 5</li>Di2015NewLine  </ul>Di2015NewLine</div>Di2015NewLine
11663056Di2015UniqueSeparator((IObjectContextAdapter)db).ObjectContext.Attach((IEntityWithKey)entity); Di2015NewLine
11663188Di2015UniqueSeparatorstatic
11663339Di2015UniqueSeparatoris
11663339Di2015UniqueSeparatorview.GetType()
11663339Di2015UniqueSeparatorSubview
11663339Di2015UniqueSeparatorToString()
11663339Di2015UniqueSeparatorClass.Name
11663339Di2015UniqueSeparator@selector("description")
11663339Di2015UniqueSeparatorUIView
11663339Di2015UniqueSeparator// ** using MonoTouch.ObjCRuntime; **Di2015NewLineDi2015NewLineprivate string GetClassName (IntPtr obj) {Di2015NewLine    Selector description = new Selector ("description");Di2015NewLine    Selector cls = new Selector ("class");Di2015NewLine    IntPtr viewcls = Messaging.IntPtr_objc_msgSend (obj, cls.Handle);Di2015NewLine    var name = NSString.FromHandle (Messaging.IntPtr_objc_msgSend (viewcls, description.Handle));Di2015NewLine    return name;Di2015NewLine}Di2015NewLine
11663339Di2015UniqueSeparatorNSObject
11663339Di2015UniqueSeparatordescription
11663339Di2015UniqueSeparator// ** using System.Runtime.InteropServices; **Di2015NewLineDi2015NewLine[DllImport ("/usr/lib/libobjc.dylib")]Di2015NewLineprivate static extern IntPtr object_getClassName (IntPtr obj);Di2015NewLineDi2015NewLineprivate string GetClassName (IntPtr obj) {Di2015NewLine    return Marshal.PtrToStringAuto(object_getClassName(obj));Di2015NewLine}Di2015NewLine
11663339Di2015UniqueSeparatorobject_getClassName()
11663339Di2015UniqueSeparatorforeach (UIView view in cell.Subviews) {Di2015NewLine    if (GetClassName(view.Handle) == "UITableViewCellReorderControl") {Di2015NewLine    }Di2015NewLine}Di2015NewLine
11663355Di2015UniqueSeparatorusing (obj)Di2015NewLine{Di2015NewLine    // Do somethingDi2015NewLine}Di2015NewLine
11663355Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    // Do somethingDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    obj.Dispose();Di2015NewLine}Di2015NewLine
11663355Di2015UniqueSeparatorusing
11663438Di2015UniqueSeparatorvar uri = new Uri("http://stackoverflow.com/questions/ask");Di2015NewLine
11663438Di2015UniqueSeparatoruri.Segments
11663464Di2015UniqueSeparatornew MyClazz().Start();Di2015NewLine
11663464Di2015UniqueSeparatorpublic abstract class MyThreadDi2015NewLine{Di2015NewLine    public abstract void Run();Di2015NewLineDi2015NewLine    public void Start()Di2015NewLine    {Di2015NewLine        new Thread(Run).Start();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClazz : MyThreadDi2015NewLine{Di2015NewLine    public override void Run()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Hello World");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11663549Di2015UniqueSeparatorSqlFunctions
11663549Di2015UniqueSeparatorUserName
11663549Di2015UniqueSeparatorUSER_NAME()
11663549Di2015UniqueSeparatorCurrentUser
11663686Di2015UniqueSeparatorGetClubs("club1");Di2015NewLine
11663686Di2015UniqueSeparator            Club club1 = GetClubs("club1");Di2015NewLine            Club club2 = GetClubs("club2");Di2015NewLine            Club club3 = GetClubs("club3");Di2015NewLineDi2015NewLine            ((IObjectContextAdapter)db).ObjectContext.Attach((IEntityWithKey)club1);Di2015NewLine            ((IObjectContextAdapter)db).ObjectContext.Attach((IEntityWithKey)club2);Di2015NewLine            ((IObjectContextAdapter)db).ObjectContext.Attach((IEntityWithKey)club3);Di2015NewLineDi2015NewLineDi2015NewLine            var test = club2.Members;Di2015NewLine
11663704Di2015UniqueSeparatorDecimal.Parse
11663704Di2015UniqueSeparatorread two line
11663704Di2015UniqueSeparatordoDi2015NewLine{Di2015NewLine    name = myfile.ReadLine();Di2015NewLine    if (name != null)Di2015NewLine    {Di2015NewLine        // read second lineDi2015NewLine        var nums = myfile.ReadLine();Di2015NewLine        if (nums != null)Di2015NewLine        {Di2015NewLine            string[] payNums = nums.Split(new[] {' '});Di2015NewLine            Console.WriteLine("{0}: {1}", Di2015NewLine                              name,Di2015NewLine                              Decimal.Parse(payNums[0])*Di2015NewLine                              Decimal.Parse(payNums[1]));Di2015NewLine        }Di2015NewLine    }Di2015NewLine} while (name != null);Di2015NewLine
11663763Di2015UniqueSeparatorXmlIgnore
11663763Di2015UniqueSeparatorpartial class
11663763Di2015UniqueSeparator// additional (non-xsd) members for PersonDi2015NewLinepartial class Person {Di2015NewLine    [XmlIgnore]Di2015NewLine    public string NickName {get;set;}Di2015NewLine}Di2015NewLine
11663763Di2015UniqueSeparator.Name
11663774Di2015UniqueSeparatornull
11663774Di2015UniqueSeparatorDateTime b = DateTime.ParseExact("MAY09", "MMMyy", CultureInfo.InvariantCulture);Di2015NewLine
11663911Di2015UniqueSeparator        String regex = "^(\\\\+|-)?99\\\\.99$";Di2015NewLine        String str1 = "-99.99";Di2015NewLine        String str2 = "+99.99";Di2015NewLine        String str3 = "99.99";Di2015NewLine        String str4 = "+-99.99";Di2015NewLineDi2015NewLine        System.Console.WriteLine(Regex.IsMatch(str1, regex));Di2015NewLine        System.Console.WriteLine(Regex.IsMatch(str2, regex));Di2015NewLine        System.Console.WriteLine(Regex.IsMatch(str3, regex));Di2015NewLine        System.Console.WriteLine(Regex.IsMatch(str4, regex));Di2015NewLineDi2015NewLine        System.Console.ReadKey();Di2015NewLine
11663911Di2015UniqueSeparator^
11663911Di2015UniqueSeparator(\\\\+|-)
11663911Di2015UniqueSeparator+
11663911Di2015UniqueSeparator-
11663911Di2015UniqueSeparator+
11663911Di2015UniqueSeparator|
11663911Di2015UniqueSeparator?
11663911Di2015UniqueSeparator+
11663911Di2015UniqueSeparator-
11663911Di2015UniqueSeparator99\\\\.99
11663911Di2015UniqueSeparator99.99
11663911Di2015UniqueSeparator.
11663911Di2015UniqueSeparator$
11664003Di2015UniqueSeparatorSelection mode
11664003Di2015UniqueSeparatorList box
11664003Di2015UniqueSeparatorlistBox.SelectionMode = SelectionMode.Multiple;Di2015NewLinelistBox.SelectedItems.Add(seltectedItem1);Di2015NewLinelistBox.SelectedItems.Add(seltectedItem2);Di2015NewLine
11664014Di2015UniqueSeparatortry/catch
11664150Di2015UniqueSeparatorvar values = HttpUtility.ParseQueryString("NG2BEF01-16344-181-E-16344-0-SHW_SHR*16344*MAT*1*2500*1600=0&NG2BEF01-16344-181-E-16344-0-SHW_SHR*16344*MAT*2*5500*6200=0&NG2BEF01-16344-181-E-16344-0-SHW_39S*16344*EVE*1*1500*0=2");Di2015NewLinestring result = string.Join("&", values.Cast<string>().Where(key => values[key] == "2").Select(key => string.Format("{0}={1}", key, HttpUtility.UrlEncode(values[key]))));Di2015NewLine// The result variable will contain only kvps where the value equals 2Di2015NewLine
11664177Di2015UniqueSeparator<foo xmlns="abc"/>
11664177Di2015UniqueSeparator<foo/>
11664177Di2015UniqueSeparator<rootElem xmlns:cfg="namespace1" xmlns:office="namespace2" xmlns="namespace3">Di2015NewLine<Prop1>6</Prop1>Di2015NewLine<Prop2>string</Prop2>Di2015NewLine</rootElem>Di2015NewLine
11664177Di2015UniqueSeparatorProp1
11664177Di2015UniqueSeparatorProp2
11664177Di2015UniqueSeparatornamespace3
11664177Di2015UniqueSeparator[Serializable]Di2015NewLine[DesignerCategory("code")]Di2015NewLine[XmlType(Namespace = Namespace3)]Di2015NewLine[XmlRoot(Namespace = Namespace3, IsNullable = true)]Di2015NewLinepublic partial class rootElemDi2015NewLine{Di2015NewLine    private const string Namespace3 = "namespace3"; // to avoid repetitionDi2015NewLineDi2015NewLine    [XmlElement(Namespace = Namespace3)]Di2015NewLine    public int Prop1 { get; set; }Di2015NewLine}Di2015NewLine
11664183Di2015UniqueSeparatorvar users = names.Select((name,idx) => new VentriloUser(name, numbers[idx*2], numbers[idx*2+1]))Di2015NewLine                 .ToList();Di2015NewLine
11664183Di2015UniqueSeparatorvar users = new List<VentriloUser>();Di2015NewLinefor (int i = 0; i < names.Count; i++)Di2015NewLine{Di2015NewLine    var name = names[i];Di2015NewLine    int j = i * 2;Di2015NewLine    if (j >= numbers.Count - 1)Di2015NewLine        break; // to be safe...Di2015NewLine    users.Add(new VentriloUser(name, numbers[j], numbers[j + 1]));Di2015NewLine}Di2015NewLine
11664187Di2015UniqueSeparatorroot
11664187Di2015UniqueSeparator if (!System.IO.File.Exists(path))Di2015NewLine        {Di2015NewLine            //Create neccessary nodesDi2015NewLine            XmlDeclaration declaration = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes");Di2015NewLine            XmlComment comment = doc.CreateComment("This is an XML Generated File");Di2015NewLine            doc.AppendChild(declaration);Di2015NewLine            doc.AppendChild(comment);Di2015NewLine            doc.AppendChild(doc.CreateElement("Root"));Di2015NewLine        }Di2015NewLine
11664187Di2015UniqueSeparatorstring _file=@"c:\\sample.xml";Di2015NewLineXDocument doc;Di2015NewLineDi2015NewLineif (!File.Exists(_file))Di2015NewLine{Di2015NewLine    doc = new XDocument();Di2015NewLine    doc.Add(new XElement("Root"));Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    doc = XDocument.Load(_file);Di2015NewLine}Di2015NewLineDi2015NewLinedoc.Root.Add(Di2015NewLine      new XElement("data",Di2015NewLine                   new XElement("CompanyCode","C101"),Di2015NewLine                   new XElement("ProductCode","P101")Di2015NewLine            ) Di2015NewLine      );Di2015NewLinedoc.Save(_file);Di2015NewLine
11664208Di2015UniqueSeparatorpublic static class Demoralize {Di2015NewLine    public static void Demoralize(this IDemoralize obj,Di2015NewLine         Func<IDemoralize, bool> CustomDemoralization) {...}Di2015NewLine    public static void WriteModel(this IDemoralize obj,Di2015NewLine         Func<IDemoralize, bool> Write) {...}Di2015NewLine}Di2015NewLine
11664208Di2015UniqueSeparatorvar foo = new CClass();Di2015NewLinefoo.Demoralize(...);Di2015NewLine
11664208Di2015UniqueSeparatorthis.
11664208Di2015UniqueSeparatorDemoralize(...); // does not workDi2015NewLinethis.Demoralize(...); // worksDi2015NewLine
11664319Di2015UniqueSeparatordouble insuranceCost;Di2015NewLineif (this.comboBox5.Text == "Third Party Fire and Theft")Di2015NewLine        {Di2015NewLine          insuranceCost = 1;Di2015NewLine        }Di2015NewLine
11664319Di2015UniqueSeparatordouble insuranceCost = 0;Di2015NewLine
11664319Di2015UniqueSeparatordouble insuranceCost = default(double); // which is 0.0Di2015NewLine
11664411Di2015UniqueSeparatorIntPtr
11664411Di2015UniqueSeparatorACCESS_DENIED_ACE
11664411Di2015UniqueSeparatordeniedAceIntPtr
11664411Di2015UniqueSeparatorSidStart
11664418Di2015UniqueSeparatorRegex
11664418Di2015UniqueSeparator^(\\d{0,7}|(\\d*[a-zA-Z]\\d*)+)$Di2015NewLine
11664418Di2015UniqueSeparatorvar str = new List<string> {"1234567", "1234a5678", "12345678"};Di2015NewLineforeach (string s in str)Di2015NewLine{Di2015NewLine    var isValid = Regex.IsMatch(s, @"^(\\d{0,7}|(\\d*[a-zA-Z]\\d*)+)$");Di2015NewLine}Di2015NewLine
11664550Di2015UniqueSeparator&&
11664550Di2015UniqueSeparator>=
11664550Di2015UniqueSeparator=>
11664550Di2015UniqueSeparatorif (AgeOfCustomer <= 30 && AgeOfCustomer >= 21)Di2015NewLine
11664550Di2015UniqueSeparator=>
11664564Di2015UniqueSeparatorJOIN
11664564Di2015UniqueSeparatorSqlCommand objCmd = new SqlCommand("SELECT CONVERT(char(80), InvDate,3) AS InvDate,InvoiceNo,EmployerCode,TaxAmount + SubTotal AS Amount,'' AS Payment Di2015NewLine                                    FROM Invoice inv INNER JOINDi2015NewLine                                         [YourOtherTable] tab ON inv.[SomeID] = tab.[SomeID]Di2015NewLine                                    WHERE (InvDate >= CONVERT(datetime, '" + dtpFrom.Text + "', 105 )) Di2015NewLine                                    AND (InvDate <= CONVERT(datetime, '" + dtpTo.Text + "', 105))", objConn);Di2015NewLine
11664564Di2015UniqueSeparatorINNER JOIN
11664564Di2015UniqueSeparatorNOT NULL
11664564Di2015UniqueSeparatorLEFT JOIN
11664564Di2015UniqueSeparatorNULL
11664564Di2015UniqueSeparatorFROM Invoice inv INNER JOINDi2015NewLine    [YourOtherTable] tab ON inv.[SomeID] = tab.[SomeID]Di2015NewLine
11664564Di2015UniqueSeparatorFROM [Invoice] inv INNER JOIN Di2015NewLine[PatientDetails] tab ON inv.[MedicalRecordID] = tab.[MedicalRecordID]Di2015NewLine
11664564Di2015UniqueSeparatorPatientDetails
11664564Di2015UniqueSeparatorAND
11664564Di2015UniqueSeparatorWHERE
11664564Di2015UniqueSeparatorAND tab.[LastName] = 'SomeLastName'Di2015NewLine
11664564Di2015UniqueSeparatorSqlCommand objCmd = new SqlCommand("SELECT CONVERT(char(80), inv.[InvDate],3) AS InvDateDi2015NewLine                                         , inv.[InvoiceNo]Di2015NewLine                                         , inv.[TaxAmount] + inv.[SubTotal] AS AmountDi2015NewLine                                         , '' AS Payment Di2015NewLine                                    FROM [Invoice] inv LEFT JOIN Di2015NewLine                                         [PatientDetails] tab ON inv.[MedicalRecordID] = tab.[MedicalRecordID] Di2015NewLine                                    WHERE (inv.[InvDate] >= CONVERT(datetime, '" + dtpFrom.Text + "', 105 )) Di2015NewLine                                    AND (inv.[InvDate] <= CONVERT(datetime, '" + dtpTo.Text + "', 105))", objConn);Di2015NewLine
11664594Di2015UniqueSeparatorclass Foo<T>Di2015NewLine{Di2015NewLine    public T Value { get; set; };Di2015NewLine}Di2015NewLine
11664594Di2015UniqueSeparatorFoo<string> x = new Foo<string>();Di2015NewLinex.Value = "fred";Di2015NewLineDi2015NewLineFoo<int> y = new Foo<int>();Di2015NewLiney.Value = 10;Di2015NewLine
11664594Di2015UniqueSeparatorvar
11664594Di2015UniqueSeparatorvar
11664594Di2015UniqueSeparatordynamic
11664692Di2015UniqueSeparatorcommand.Execute(sender as XmlElement);Di2015NewLine
11664692Di2015UniqueSeparatorXmlElement
11664692Di2015UniqueSeparatornull
11664692Di2015UniqueSeparatorCommandParameter
11664692Di2015UniqueSeparatorXmlElement
11664692Di2015UniqueSeparatorExecute
11664764Di2015UniqueSeparator  <ListBox.Template>Di2015NewLine      <ControlTemplate>Di2015NewLine            <Border BorderThickness="2" BorderBrush="Black">Di2015NewLine                  <Grid>Di2015NewLine                        <Rectangle Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" Fill="Black"/>Di2015NewLine                        <ScrollViewer Padding="{TemplateBinding Padding}">Di2015NewLine                              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />Di2015NewLine                        </ScrollViewer>Di2015NewLine                  </Grid>Di2015NewLine            </Border>Di2015NewLine       </ControlTemplate>Di2015NewLine  </ListBox.Template>Di2015NewLine
11664832Di2015UniqueSeparatorvar deleteList = this.Items.Where(d => d != null && d.Id == guid).ToList();Di2015NewLine
11664832Di2015UniqueSeparatorlock(this.Items)Di2015NewLine{Di2015NewLine    var deleteList = this.Items.Where(d => d != null && d.Id == guid).ToList();Di2015NewLine}Di2015NewLine
11664890Di2015UniqueSeparator   Xc= Wbk * (Xs-Xvp)/Wvp;Di2015NewLine   Yc= Hbk * (Ys-Yvp)/Hvp;Di2015NewLine
11664929Di2015UniqueSeparatorimg src='[^']+'Di2015NewLine
11665003Di2015UniqueSeparatorm
11665003Di2015UniqueSeparatorstring m = null;Di2015NewLine
11665003Di2015UniqueSeparatorwhile
11665003Di2015UniqueSeparatorforeach
11665003Di2015UniqueSeparatorwhile
11665003Di2015UniqueSeparatorforeach
11665003Di2015UniqueSeparatorforeach
11665003Di2015UniqueSeparatorwhile
11665003Di2015UniqueSeparatorfalse
11665003Di2015UniqueSeparatorusing
11665019Di2015UniqueSeparatorcon.Open();Di2015NewLineSqlCommand cmd1 = new SqlCommand("select balance from customer where namee='" Di2015NewLine                        + textBox1.Text + "'", con);Di2015NewLinelabel4.Text = cmd1.ExecuteScalar();Di2015NewLine
11665028Di2015UniqueSeparator        XAttribute attr = doc.Descendants(ns + "SiEventSchedule").Select(x => x.Attribute("deleteStart")).First();Di2015NewLine        attr.SetValue(attr.Value.Replace(oldValue, newValue));Di2015NewLine
11665077Di2015UniqueSeparatorTextBox
11665077Di2015UniqueSeparatorButton
11665077Di2015UniqueSeparatorButton
11665121Di2015UniqueSeparatorEnumerable.Min
11665121Di2015UniqueSeparatornull
11665121Di2015UniqueSeparatorDateTime? smallest = auftragList.Min(a => a.dStart);Di2015NewLine
11665121Di2015UniqueSeparatorOrderBy
11665121Di2015UniqueSeparatorFirst
11665121Di2015UniqueSeparatorEntityAuftrag auft = auftragList.OrderBy(a => a.dStart).First();Di2015NewLine
11665121Di2015UniqueSeparatorEnumerable.OrderByDescending
11665124Di2015UniqueSeparatorMainView
11665124Di2015UniqueSeparatorMainViewModel
11665124Di2015UniqueSeparator[Import]Di2015NewLinepublic FilterFieldsViewModel FilterFieldsViewModel {get; set; }Di2015NewLine
11665124Di2015UniqueSeparator<UserControl ....>Di2015NewLine   ...Di2015NewLine   <SearchUserControl DataContext="{Binding FilterFieldsViewModel}" ... />Di2015NewLine   ...Di2015NewLine</UserControl>Di2015NewLine
11665124Di2015UniqueSeparatorFilterFieldsViewModel
11665124Di2015UniqueSeparatorSearchUserControl
11665124Di2015UniqueSeparatorSearchViewModelBase
11665124Di2015UniqueSeparatorFilterFieldsViewModel
11665214Di2015UniqueSeparatorFind
11665214Di2015UniqueSeparatorFind
11665214Di2015UniqueSeparatorSingleOrDefault
11665214Di2015UniqueSeparatorpublic interface IEntityWithId Di2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine}Di2015NewLine
11665214Di2015UniqueSeparatorpublic E FindByIdWithIncludes<E>(int id, string[] includes) Di2015NewLine    where E : class, IEntityWithIdDi2015NewLine{          Di2015NewLineDi2015NewLine    IQueryable<E> entityQuery = DataContext.Set<E>();Di2015NewLineDi2015NewLine    foreach (var include in includes)Di2015NewLine    {Di2015NewLine            entityQuery = entityQuery.Include(include);Di2015NewLine    }Di2015NewLineDi2015NewLine    return entityQuery.SingleOrDefault(e => e.Id == id); Di2015NewLine}Di2015NewLine
11665219Di2015UniqueSeparatorList<FileInfo> files = directoryDi2015NewLine    .GetFiles("*.txt")Di2015NewLine    .OrderBy(f => f.LastWriteTime)Di2015NewLine    .ToList();Di2015NewLine
11665350Di2015UniqueSeparatorforeach (DataGridViewColumn col in dataGrid.Columns)Di2015NewLine        {Di2015NewLine            col.SortMode = DataGridViewColumnSortMode.NotSortable;Di2015NewLine            col.Selected = false;Di2015NewLine        }Di2015NewLine        dataGrid.SelectionMode = DataGridViewSelectionMode.FullColumnSelect;Di2015NewLine
11665433Di2015UniqueSeparatorinternal static class ResourcesDi2015NewLine{Di2015NewLine    public static readonly Something DefaultSomething = Factory.Create();Di2015NewLineDi2015NewLine    static Resources()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
11665448Di2015UniqueSeparatorpublic int ReadListBoxIndex()Di2015NewLine    {Di2015NewLine        int count = 0;Di2015NewLine        listBox1.Invoke(new MethodInvoker(delegateDi2015NewLine        {Di2015NewLine            count = listBox1.SelectedIndex;Di2015NewLine        }));Di2015NewLine        return count;Di2015NewLine    }Di2015NewLine
11665448Di2015UniqueSeparatorint count = ReadListBoxIndex();Di2015NewLine
11665456Di2015UniqueSeparatorweb.config
11665456Di2015UniqueSeparator<system.web>
11665456Di2015UniqueSeparator  <system.web>Di2015NewLine    <customErrors mode="Off" />Di2015NewLine  ...Di2015NewLine  </system.web>Di2015NewLine
11665458Di2015UniqueSeparatorHasFlags
11665458Di2015UniqueSeparatorvar type = 1.GetType();
11665458Di2015UniqueSeparatorint
11665458Di2015UniqueSeparatorGetType()
11665458Di2015UniqueSeparatorHasFlags
11665458Di2015UniqueSeparatorEnum
11665458Di2015UniqueSeparatorEnum
11665458Di2015UniqueSeparatorValueType
11665458Di2015UniqueSeparatorEnum
11665458Di2015UniqueSeparatorValueType
11665458Di2015UniqueSeparatorobject
11665458Di2015UniqueSeparatorbox
11665458Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var f = Fruit.Apple;Di2015NewLine        var result = f.HasFlag(Fruit.Apple);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[Flags]Di2015NewLineenum FruitDi2015NewLine{Di2015NewLine    AppleDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine.method private hidebysig static Di2015NewLine    void Main (Di2015NewLine        string[] argsDi2015NewLine    ) cil managed Di2015NewLine{Di2015NewLine    // Method begins at RVA 0x2050Di2015NewLine    // Code size 28 (0x1c)Di2015NewLine    .maxstack 2Di2015NewLine    .entrypointDi2015NewLine    .locals init (Di2015NewLine        [0] valuetype ConsoleApplication1.Fruit f,Di2015NewLine        [1] bool resultDi2015NewLine    )Di2015NewLineDi2015NewLine    IL_0000: nopDi2015NewLine    IL_0001: ldc.i4.0Di2015NewLine    IL_0002: stloc.0Di2015NewLine    IL_0003: ldloc.0Di2015NewLine    IL_0004: box ConsoleApplication1.FruitDi2015NewLine    IL_0009: ldc.i4.0Di2015NewLine    IL_000a: box ConsoleApplication1.FruitDi2015NewLine    IL_000f: call instance bool [mscorlib]System.Enum::HasFlag(class [mscorlib]System.Enum)Di2015NewLine    IL_0014: stloc.1Di2015NewLine    IL_0015: call string [mscorlib]System.Console::ReadLine()Di2015NewLine    IL_001a: popDi2015NewLine    IL_001b: retDi2015NewLine} // end of method Program::MainDi2015NewLine
11665458Di2015UniqueSeparatorValueType
11665458Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        int i = 1;Di2015NewLine        ValueType v = i;Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine.method private hidebysig static Di2015NewLine    void Main (Di2015NewLine        string[] argsDi2015NewLine    ) cil managed Di2015NewLine{Di2015NewLine    // Method begins at RVA 0x2050Di2015NewLine    // Code size 17 (0x11)Di2015NewLine    .maxstack 1Di2015NewLine    .entrypointDi2015NewLine    .locals init (Di2015NewLine        [0] int32 i,Di2015NewLine        [1] class [mscorlib]System.ValueType vDi2015NewLine    )Di2015NewLineDi2015NewLine    IL_0000: nopDi2015NewLine    IL_0001: ldc.i4.1Di2015NewLine    IL_0002: stloc.0Di2015NewLine    IL_0003: ldloc.0Di2015NewLine    IL_0004: box [mscorlib]System.Int32Di2015NewLine    IL_0009: stloc.1Di2015NewLine    IL_000a: call string [mscorlib]System.Console::ReadLine()Di2015NewLine    IL_000f: popDi2015NewLine    IL_0010: retDi2015NewLine} // end of method Program::MainDi2015NewLine
11665624Di2015UniqueSeparatorusername/password
11665624Di2015UniqueSeparator//NOTE: This can be made static with no modificationsDi2015NewLinepublic bool ActiveDirectoryAuthenticate(string username, string password)Di2015NewLine{Di2015NewLine    bool result = false;Di2015NewLine    using (DirectoryEntry _entry = new DirectoryEntry())Di2015NewLine    {Di2015NewLine        _entry.Username = username;Di2015NewLine        _entry.Password = password;Di2015NewLine        DirectorySearcher _searcher = new DirectorySearcher(_entry);Di2015NewLine        _searcher.Filter = "(objectclass=user)";Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            SearchResult _sr = _searcher.FindOne();Di2015NewLine            string _name = _sr.Properties["displayname"][0].ToString();Di2015NewLine            result = true;Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        { /* Error handling omitted to keep code short: remember to handle exceptions !*/ }Di2015NewLine    }Di2015NewLineDi2015NewLine    return result; //true = user authenticated!Di2015NewLine}Di2015NewLine
11665661Di2015UniqueSeparatorforeach (Match match in Regex.Matches(inputString, Di2015NewLine                                      @"\\[down\\](?<content>.+)\\[/down\\]"))Di2015NewLine{Di2015NewLine    var content = match.Groups["content"].Value;Di2015NewLineDi2015NewLine    var hrefs = new List<string>();Di2015NewLineDi2015NewLine    foreach (Match matchhref in Regex.Matches(t, @"href=""(?<href>[^""]+)"""))Di2015NewLine    {Di2015NewLine        hrefs.Add(matchhref.Groups["href"].Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11665694Di2015UniqueSeparatorSpatialDatabase
11665694Di2015UniqueSeparatorbase()
11665694Di2015UniqueSeparatorpublic partial class SpatialDatabase : global::System.Data.Objects.ObjectContextDi2015NewLine{Di2015NewLineDi2015NewLine       SpatialDatabase() : base() //Problem is hereDi2015NewLine       {Di2015NewLine       }Di2015NewLineDi2015NewLine}Di2015NewLine
11665710Di2015UniqueSeparatorpublic bool ContainsAny<T>(List<T> valueList, T fieldValueObject)Di2015NewLine{Di2015NewLine    return valueList.Any(x => x.Equals(fieldValueObject));Di2015NewLine}Di2015NewLine
11665710Di2015UniqueSeparatorpublic bool ContainsAny<T>(List<T> valueList, object fieldValueObject)Di2015NewLine{Di2015NewLine    return valueList.Any(x => x.Equals((T)fieldValueObject));Di2015NewLine}Di2015NewLine
11665761Di2015UniqueSeparatorSystem.Security.Principal.WindowsImpersonationContext impersonationContext;Di2015NewLineimpersonationContext = Di2015NewLine    ((System.Security.Principal.WindowsIdentity)User.Identity).Impersonate();Di2015NewLineDi2015NewLine//Insert your code that runs under the security context of the authenticating user here.Di2015NewLineDi2015NewLineimpersonationContext.Undo();Di2015NewLine
11665816Di2015UniqueSeparatorstring format = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;Di2015NewLineString Date = DateTime.Now.ToString(format);Di2015NewLine
11665985Di2015UniqueSeparatorpublic partial class SamplePage : System.Web.UI.PageDi2015NewLine{Di2015NewLine    int UserID;Di2015NewLine  protected void Page_Load(object sender, EventArgs e)Di2015NewLine  {Di2015NewLineDi2015NewLine  }Di2015NewLine protected void btnSearchUser_Click(object sender, EventArgs e)Di2015NewLine {Di2015NewLine    UserID=5;Di2015NewLine    ViewState["UserID"] = UserID;Di2015NewLine }Di2015NewLine protected void btnSubmit_Click(object sender, EventArgs e)Di2015NewLine {Di2015NewLine    if(ViewState["UserID"]!=null)Di2015NewLine    Response.Write(ViewState["UserID"].ToString());Di2015NewLine }Di2015NewLine}Di2015NewLine
11666079Di2015UniqueSeparatorpublic object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine{Di2015NewLine     var item = (DateTime)value;Di2015NewLine     if (item != null)Di2015NewLine     {Di2015NewLine         return item.ToString("MMMyyyy");Di2015NewLine     }Di2015NewLine     return null;Di2015NewLine}Di2015NewLine
11666191Di2015UniqueSeparatorusing Ionic.Zip;Di2015NewLineDi2015NewLinenamespace ConsoleApplication23Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //Zip your files like soDi2015NewLine            ZipFile x = new ZipFile();Di2015NewLine            x.AddFile(@"C:\\myFile");Di2015NewLine            x.AddFile(@"C:\\mySecondFile");Di2015NewLine            x.Save(@"c:\\myZipFile.zip");Di2015NewLineDi2015NewLine            //Unzip like soDi2015NewLine            ZipFile y = ZipFile.Read(@"c:\\myZipFile.zip");Di2015NewLineDi2015NewLine            foreach (ZipEntry e in y)Di2015NewLine            {Di2015NewLine                e.Extract(@"c:\\test", ExtractExistingFileAction.OverwriteSilently);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11666327Di2015UniqueSeparatorIViewModel
11666327Di2015UniqueSeparatorIView
11666327Di2015UniqueSeparatorITiersView
11666327Di2015UniqueSeparator     public interface IViewModelDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IViewDi2015NewLine{Di2015NewLine    IViewModel ViewModelDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface ITiersView : IViewDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLine    //My ViewDi2015NewLine    public partial class Tiers : UserControl , ITiersViewDi2015NewLine    {Di2015NewLine        public Tiers(ITiersViewModel tiersViewModel)Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            ViewModel = tiersViewModel;Di2015NewLine        }Di2015NewLineDi2015NewLine        public SmartStock.Infrastructure.IViewModel ViewModelDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return (ITiersViewModel)DataContext;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                DataContext = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11666327Di2015UniqueSeparator        _container.RegisterType<ITiersView, Tiers>();Di2015NewLine        _container.RegisterType<ITiersViewModel, TiersViewModel>();Di2015NewLine        IRegion Content = _regionManager.Regions[RegionNames.ContentRegion];Di2015NewLine        var TiersView = _container.Resolve<ITiersView>();Di2015NewLine        RibbonRegion.Add(TiersView);Di2015NewLine
11666363Di2015UniqueSeparatori = 4
11666363Di2015UniqueSeparatorfor (int i = 0; i < 4; i++)
11666366Di2015UniqueSeparator        workbook.Save();Di2015NewLine        applicationClass.Quit();Di2015NewLine        while (Marshal.ReleaseComObject(usedRange) > 0) Di2015NewLine        {}Di2015NewLine        while (Marshal.ReleaseComObject(worksheet) > 0) Di2015NewLine        {}Di2015NewLine        while (Marshal.ReleaseComObject(workbook) > 0) Di2015NewLine        {}Di2015NewLine        while (Marshal.ReleaseComObject(applicationClass) > 0) Di2015NewLine        {}Di2015NewLine
11666401Di2015UniqueSeparatorvar accessor = TypeAccessor.Create(typeof(Entity));Di2015NewLine
11666401Di2015UniqueSeparatormemberName
11666401Di2015UniqueSeparatornewValue
11666401Di2015UniqueSeparatoraccessor[obj, memberName] = newValue;Di2015NewLine
11666401Di2015UniqueSeparatorTypeAccessor
11666401Di2015UniqueSeparatorTypeBuilder
11666401Di2015UniqueSeparatorTypeAccessor
11666401Di2015UniqueSeparatorswitch(memberName) {Di2015NewLine    case "Foo": obj.Foo = (int)newValue;Di2015NewLine    case "Bar": obj.Bar = (string)newValue;Di2015NewLine    // etcDi2015NewLine}Di2015NewLine
11666401Di2015UniqueSeparatorILGenerator
11666401Di2015UniqueSeparatorExpression
11666401Di2015UniqueSeparatordynamic
11666401Di2015UniqueSeparatorIDynamicMetaObjectProvider
11666401Di2015UniqueSeparatorFastMember
11666401Di2015UniqueSeparatorMapNameAttribute
11666401Di2015UniqueSeparatorIgnoreMappingAttribute
11666401Di2015UniqueSeparatorWriteGetter
11666401Di2015UniqueSeparatorWriteSetter
11666401Di2015UniqueSeparatoril.Emit(OpCodes.Ldstr, prop.Name);Di2015NewLine
11666401Di2015UniqueSeparatoril.Emit(OpCodes.Ldstr, field.Name);Di2015NewLine
11666401Di2015UniqueSeparatorWriteGetter
11666401Di2015UniqueSeparatorWriteSetter
11666401Di2015UniqueSeparatorcontinue
11666401Di2015UniqueSeparatorforeach
11666418Di2015UniqueSeparatorNumberFormatInfo
11666418Di2015UniqueSeparatorvar nfi = new NumberFormatInfo();Di2015NewLinenfi.NumberDecimalSeparator = ",";Di2015NewLinevar myDouble = 10.156d;Di2015NewLineConsole.WriteLine(myDouble.ToString("0.0000000000000000", nfi));Di2015NewLine
11666418Di2015UniqueSeparator10,1560000000000000
11666469Di2015UniqueSeparator protected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    GridFilterMenu menu = RadGrid1.FilterMenu;Di2015NewLine    foreach (RadMenuItem item in menu.Items)Di2015NewLine    {   Di2015NewLine        if (item.Text == "StartsWith")Di2015NewLine        {Di2015NewLine            item.Text = "Your new text";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11666609Di2015UniqueSeparatorvar ids = new List<int>{1,2,3};Di2015NewLinevar names = conn.Select<string>("select Name from Table where ID in @ids",Di2015NewLine      new {ids}).ToList();Di2015NewLine
11666609Di2015UniqueSeparatorin @ids
11666609Di2015UniqueSeparatorselect Name from Table where ID in (@p__0, @p__1, @p__2)Di2015NewLine
11666609Di2015UniqueSeparatorint id = 12345;Di2015NewLinevar customer = conn.Select<Customer>("select * from Custom where Id = @id",Di2015NewLine    new { id }).Single();Di2015NewLine
11666619Di2015UniqueSeparatorSave
11666619Di2015UniqueSeparatorVisualBasic.SetSettings(activityBuilder, new VisualBasicSettings());Di2015NewLine
11666619Di2015UniqueSeparatoractivityBuilder
11666619Di2015UniqueSeparatorDynamicActivity
11666619Di2015UniqueSeparatorVisualBasic.SetSettings(activityBuilder,Di2015NewLine                        VisualBasic.GetSettings(dynamicActivity));Di2015NewLine
11666635Di2015UniqueSeparatorpublic int ItemsCount Di2015NewLine{Di2015NewLine    get { return ListBox1.Items.Count; }Di2015NewLine}Di2015NewLineDi2015NewLineorDi2015NewLineDi2015NewLinepublic ListBox MyListBox Di2015NewLine{Di2015NewLine    get { return ListBox1; }Di2015NewLine}Di2015NewLine
11666683Di2015UniqueSeparatorGotFocus
11666683Di2015UniqueSeparatorprivate void listBox1_GotFocus(Object sender, EventArgs e) {Di2015NewLineDi2015NewLine   this.Select();//set the form as the active control or even this.Focus();Di2015NewLineDi2015NewLine}Di2015NewLine
11666840Di2015UniqueSeparator.zip
11666840Di2015UniqueSeparator.exe
11666927Di2015UniqueSeparatorclientBaseAddress="http://ip:port"
11667054Di2015UniqueSeparatorSelectedIndexChanged
11667054Di2015UniqueSeparatorprivate void listBox1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var currentImageLocation = listBox1.SelectedItem.ToString();Di2015NewLine    Image myImage = Image.FromFile(currentImageLocation);Di2015NewLine    panel1.BackgroundImage = myImage;Di2015NewLine}Di2015NewLine
11667074Di2015UniqueSeparatorSystem.RuntimeDi2015NewLine      .SerializationDi2015NewLine      .FormattersDi2015NewLine      .BinaryDi2015NewLine      .BinaryFormatter binary = new System.RuntimeDi2015NewLine                                     .SerializationDi2015NewLine                                     .FormattersDi2015NewLine                                     .Binary.BinaryFormatter();Di2015NewLine        using (FileStream fs = File.Create(file))Di2015NewLine        {Di2015NewLine            bs.Serialize(fs, objectArray);Di2015NewLine        }Di2015NewLine
11667074Di2015UniqueSeparator     object []ar={10.20,1,1.2f,1.4,10L,12};Di2015NewLine     using (MemoryStream ms = new MemoryStream())Di2015NewLine     {Di2015NewLine         foreach (dynamic t in ar)Di2015NewLine         {Di2015NewLine            byte[]bytes=BitConverter.GetBytes(t);Di2015NewLine            ms.Write(bytes, 0, bytes.Length);Di2015NewLine         }Di2015NewLine     }Di2015NewLine
11667095Di2015UniqueSeparatorString xmlDateString = XmlConvert.ToString(DateTime.UtcNow,XmlDateTimeSerializationMode.Local);Di2015NewLine
11667605Di2015UniqueSeparatorSample
11667605Di2015UniqueSeparatorsource.Sample(TimeSpan.FromSeconds(60)).Subscribe(x => /* .. */);Di2015NewLine
11667699Di2015UniqueSeparatorthis.NavigationItem.SetRightBarButtonItem(Di2015NewLine        new UIBarButtonItem(UIImage.FromFile("some_image.png")Di2015NewLine        , UIBarButtonItemStyle.PlainDi2015NewLine        , (sender,args) => {Di2015NewLine           // button was clickedDi2015NewLine        })Di2015NewLine    , true);Di2015NewLine
11667702Di2015UniqueSeparatorprivate void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)Di2015NewLine{Di2015NewLine    if (e.RowIndex == 1 && e.ColumnIndex == 2)Di2015NewLine    {Di2015NewLine        e.CellStyle.ForeColor = Color.Red;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11667702Di2015UniqueSeparatordgv[col, row].Style
11667847Di2015UniqueSeparator1. Right click the xml file and Select propertiesDi2015NewLine2. In the Properties Pane Set the BuildAction as Embeded resourceDi2015NewLineSo this Xml becomes a embeded resource when the application is compiledDi2015NewLine
11667847Di2015UniqueSeparator   System.Reflection.Assembly _assembly = Assembly.GetExecutingAssembly();Di2015NewLine   System.IO.Stream _xmlStream = _assembly.GetManifestResourceStream("[[YourNamespace]].[[XMLFileName.xml]]");Di2015NewLine   System.IO.StreamReader _textStreamReader = new System.IO.StreamReader(_xmlStream);Di2015NewLine   string xml = _textStreamReader.ReadToEnd();Di2015NewLine
11667961Di2015UniqueSeparatorTask.Factory.StartNew
11667961Di2015UniqueSeparatort
11667961Di2015UniqueSeparatorStartNew
11667961Di2015UniqueSeparatort
11667961Di2015UniqueSeparatorprivate static Task Wrapper(Action f) {Di2015NewLine    var res = Task.Factory.StartNew(f);Di2015NewLine    Thread.Sleep(1000);Di2015NewLine    return res;Di2015NewLine}Di2015NewLine
11667961Di2015UniqueSeparatorTask.Factory.StartNew
11667961Di2015UniqueSeparatorWrapper
11667961Di2015UniqueSeparatorTask t = null;Di2015NewLinet = Wrapper(() => {Di2015NewLine    MessageBox.Show(t.Id.ToString());Di2015NewLine});Di2015NewLine
11668004Di2015UniqueSeparatorBefore adding the project to solution, project file should be converted toDi2015NewLineVS2012 format.Di2015NewLine
11668004Di2015UniqueSeparatorusing (StreamReader sr = new StreamReader(newFile))Di2015NewLineusing (StreamWriter sw = new StreamWriter(projectFile, false, Encoding.UTF8))Di2015NewLine{Di2015NewLine     while (sr.Peek() >= 0)Di2015NewLine     {Di2015NewLine         string s = sr.ReadLine();Di2015NewLine         if (s.Contains("<Project ToolsVersion=\\"4.0\\""))Di2015NewLine         {Di2015NewLine              s = s + Environment.NewLine + importProject;Di2015NewLine         }Di2015NewLine... and so onDi2015NewLine
11668066Di2015UniqueSeparatorUserTablesDataAdapter.FillSchema(UserTablesDataSet, SchemaType.Mapped);Di2015NewLine
11668309Di2015UniqueSeparatornew BorderedDecorator(new ScrollableDecorator(new View()))
11668364Di2015UniqueSeparatorGetGadgetDomainsForUser
11668364Di2015UniqueSeparatorviewableGadgetIDs
11668364Di2015UniqueSeparatorvar result = db.A2012_Domain_GadgetDi2015NewLine                 .Where(p => p != null)Di2015NewLine                 .Where(p => viewableDomainIDs.Contains(p.DomainID));Di2015NewLine
11668364Di2015UniqueSeparatorviewableIDs.AddRange(Di2015NewLine    db.A2012_Domain_UserDi2015NewLine        .Where(p => p != null)Di2015NewLine        .Where(p => p.UserID == userID)Di2015NewLine        .Select(p => p.DomainID));                        Di2015NewLineDi2015NewLineviewableIDs.ForEach(i =>Di2015NewLine{Di2015NewLine    domains.Add(Di2015NewLine        db.A2012_DomainDi2015NewLine           .Where(p => p != null)Di2015NewLine           .Where(p => p.DomainID == i)Di2015NewLine           .Single());Di2015NewLine});Di2015NewLine
11668364Di2015UniqueSeparatorvar result = db.A2012_Domain_Gadget.Where(p => viewableDomainIDs.Contains(p.DomainID));Di2015NewLine
11668364Di2015UniqueSeparatordb
11668364Di2015UniqueSeparatorp.DomainID
11668455Di2015UniqueSeparatorSystem.Globalization.CultureInfo.CurrentCulture.Name
11668463Di2015UniqueSeparatorclass YourClassDi2015NewLine{Di2015NewLine    public YourClass(ITaskFactory factory)Di2015NewLine    {}Di2015NewLineDi2015NewLine    public void VerifyDataTypesAsync()Di2015NewLine    {Di2015NewLine       Task verificationTask = factory.Create(); // you can pass an instance of a delegate as parameter if you need.  Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass TasksFactory : IFactoryDi2015NewLine{Di2015NewLine   public Task Create()Di2015NewLine   {Di2015NewLineDi2015NewLine   }Di2015NewLine}Di2015NewLine
11668463Di2015UniqueSeparatorvar mockRepository = new MockRepository();Di2015NewLinevar mockObject = mockRepository.CreateMock<IFactory>();Di2015NewLinevar yourClass = new YourClass(mockObject);    Di2015NewLineDi2015NewLineDi2015NewLineExpect.Call(mockObject.Create);Di2015NewLineDi2015NewLinemockRepository.ReplayAll();Di2015NewLineDi2015NewLinemockObject.VerifyDataTypesAsync()Di2015NewLineDi2015NewLinemockRepository.VerifyAll(); // throw Exception if your VerifyDataTypesAsync method doesn't call Create method of IFactory mockDi2015NewLine
11668593Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Sends the message.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="strTo">The STR to.</param>Di2015NewLine    /// <param name="strFrom">The STR from.</param>Di2015NewLine    /// <param name="strSubject">The STR subject.</param>Di2015NewLine    /// <param name="strMessage">The STR message.</param>Di2015NewLine    /// <param name="strAttachment">The STR attachment.</param>Di2015NewLine    /// <param name="strBCC">The STR BCC.</param>Di2015NewLine    /// <returns></returns>Di2015NewLine    private string SendMessage(string strTo, string strFrom, string strSubject, string strMessage, string strAttachment, string strBCC)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            string strEmail = string.Empty;Di2015NewLine            string strSmtpClient = ConfigurationManager.AppSettings["SmtpClient"];Di2015NewLine            string[] arrEmailAddress = strTo.Split(';');Di2015NewLineDi2015NewLine            foreach (string emailAddress in arrEmailAddress)Di2015NewLine            {Di2015NewLine                if (!string.IsNullOrEmpty(emailAddress.Trim()))Di2015NewLine                {Di2015NewLine                    using (System.Net.Mail.MailMessage mailMsg = new MailMessage(strFrom, strEmail, strSubject, strMessage))Di2015NewLine                    {Di2015NewLine                        mailMsg.IsBodyHtml = true;Di2015NewLine                        if (!string.IsNullOrEmpty(strBCC))Di2015NewLine                            mailMsg.Bcc.Add(strBCC);Di2015NewLineDi2015NewLine                        if (!string.IsNullOrEmpty(strAttachment))Di2015NewLine                        {Di2015NewLine                            System.Net.Mail.Attachment attachment;Di2015NewLine                            attachment = new System.Net.Mail.Attachment(strAttachment);Di2015NewLine                            mailMsg.Attachments.Add(attachment);Di2015NewLine                        }Di2015NewLineDi2015NewLine                        using (System.Net.Mail.SmtpClient smtpClient = new System.Net.Mail.SmtpClient(strSmtpClient))Di2015NewLine                        {Di2015NewLine                            smtpClient.UseDefaultCredentials = true;Di2015NewLine                            smtpClient.Port = 25;Di2015NewLine                            smtpClient.Send(mailMsg);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return string.Format("Message sent to {0} at {1}.", strTo, DateTime.Now);Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            return ex.Message;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11668867Di2015UniqueSeparatornode.SelectSingleNode
11668867Di2015UniqueSeparatorInnerXml
11668867Di2015UniqueSeparatorforeach (XmlNode node in xmlNews.SelectNodes("/rss/channel/item"))Di2015NewLine{Di2015NewLine    var titleNode = node.SelectSingleNode("/title");Di2015NewLineDi2015NewLine    if (titleNode != null && !string.IsNullOrEmpty(titleNode.InnerXml))Di2015NewLine        valery.Speak(titleNode.InnerXml);Di2015NewLine}Di2015NewLine
11668867Di2015UniqueSeparatorInnerXml
11668867Di2015UniqueSeparatorSpeak
11668930Di2015UniqueSeparatorFile.ReadLines
11668930Di2015UniqueSeparatorint splitSize = Convert.ToInt32(txtNoOfLines.Text);Di2015NewLineusing (var lineIterator = File.ReadLines(...).GetEnumerator())Di2015NewLine{Di2015NewLine    bool stillGoing = true;Di2015NewLine    for (int chunk = 0; stillGoing; chunk++)Di2015NewLine    {Di2015NewLine        stillGoing = WriteChunk(lineIterator, splitSize, chunk);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineprivate static bool WriteChunk(IEnumerator<string> lineIterator,Di2015NewLine                               int splitSize, int chunk)Di2015NewLine{Di2015NewLine    using (var writer = File.CreateText("file " + chunk + ".txt"))Di2015NewLine    {Di2015NewLine        for (int i = 0; i < splitSize; i++)Di2015NewLine        {Di2015NewLine            if (!lineIterator.MoveNext())Di2015NewLine            {Di2015NewLine                return false;Di2015NewLine            }Di2015NewLine            writer.WriteLine(lineIterator.Current);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
11669020Di2015UniqueSeparatorpublic static void AddIfNotNull<T,U>(this Dictionary<T,U> dic, T key, U value) Di2015NewLinewhere U : class {Di2015NewLine    if (value != null) { dic.Add(key, value); }Di2015NewLine}Di2015NewLine
11669020Di2015UniqueSeparatormyDictionary.AddIfNotNull("...",myObject.whatever);Di2015NewLine
11669111Di2015UniqueSeparatorvar oldObj = keyedObject[key];Di2015NewLinetimedObjects.Remove(oldObj.LastUpdateTime);Di2015NewLinetimedObjects.Add(myUpdatedObject.LastUpdateTime,myUpdatedObject);Di2015NewLinekeyedObject[key] = myUpdatedObject;Di2015NewLine
11669111Di2015UniqueSeparatortimedObjects
11669111Di2015UniqueSeparatorkeyedObject
11669111Di2015UniqueSeparatorRemove
11669111Di2015UniqueSeparatorremoveObject = timedObjects[timeToRemove];Di2015NewLinetimedObjects.Remove(timeToRemove);Di2015NewLinekeyedObject.Remove(removeObject.key);Di2015NewLine
11669176Di2015UniqueSeparatorRouteParameter
11669176Di2015UniqueSeparator.MapHttpRoute
11669176Di2015UniqueSeparatorUrlParameter
11669176Di2015UniqueSeparator.MapRoute
11669176Di2015UniqueSeparatorSystem.Web.Mvc
11669176Di2015UniqueSeparatorRouteParameter
11669224Di2015UniqueSeparatorpublic static string[] ConvertTiffToJpeg(string fileName) Di2015NewLine{ Di2015NewLine        using (Image imageFile = Image.FromFile(fileName)) Di2015NewLine        { Di2015NewLine            FrameDimension frameDimensions = new FrameDimension( Di2015NewLine                imageFile.FrameDimensionsList[0]); Di2015NewLineDi2015NewLine            // Gets the number of pages from the tiff image (if multipage) Di2015NewLine            int frameNum = imageFile.GetFrameCount(frameDimensions); Di2015NewLine            string[] jpegPaths = new string[frameNum]; Di2015NewLineDi2015NewLine            for (int frame = 0; frame < frameNum; frame++) Di2015NewLine            { Di2015NewLine                // Selects one frame at a time and save as jpeg. Di2015NewLine                imageFile.SelectActiveFrame(frameDimensions, frame); Di2015NewLine                using (Bitmap bmp = new Bitmap(imageFile)) Di2015NewLine                { Di2015NewLine                    jpegPaths[frame] = String.Format("{0}\\\\{1}{2}.jpg",  Di2015NewLine                        Path.GetDirectoryName(fileName), Di2015NewLine                        Path.GetFileNameWithoutExtension(fileName),  Di2015NewLine                        frame); Di2015NewLine                    bmp.Save(jpegPaths[frame], ImageFormat.Jpeg); Di2015NewLine                } Di2015NewLine            } Di2015NewLineDi2015NewLine            return jpegPaths; Di2015NewLine        } Di2015NewLine} Di2015NewLine
11669273Di2015UniqueSeparatorProjectionComparer
11669273Di2015UniqueSeparatorvar dummy = new { StartDate = default(DateTime),Di2015NewLine                  EndDate = default(DateTime) };Di2015NewLinevar now = DateTime.Now;Di2015NewLinevar comparer = ProjectionComparer.Create(dummy, x => x.EndDate >= now)Di2015NewLine                                 .ThenBy(x => x.StartDate);Di2015NewLine
11669273Di2015UniqueSeparatorOrderBy(x => x.StartDate).ThenBy(x => x.EndDate)
11669273Di2015UniqueSeparatorvar now = DateTime.Now;Di2015NewLinevar ordered = bankPolicyViewModels.OrderBy(vm => vm.EndDate >= now)Di2015NewLine                                  .ThenBy(vm => vm.StartDate);Di2015NewLine
11669273Di2015UniqueSeparatorEndDate
11669320Di2015UniqueSeparatorwhole = (int)Math.Floor(decimal / 1.5);Di2015NewLine
11669510Di2015UniqueSeparatorpublic class MyRibbon : Ribbon {Di2015NewLineDi2015NewLine  public bool DisableMouseWheel { get; set; }Di2015NewLineDi2015NewLine  protected override void OnMouseWheel(MouseEventArgs e) {Di2015NewLine    if (!this.DisableMouseWheel) {Di2015NewLine      base.OnMouseWheel(e);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
11669510Di2015UniqueSeparatorDisableMouseWheel
11669591Di2015UniqueSeparatorMapper.CreateMap<Enum, String>().ConvertUsing(e => e.ToString().ToLower());Di2015NewLine
11669629Di2015UniqueSeparatorstring value = "Dot Net Perls";Di2015NewLinechar first = value[0];Di2015NewLinechar second = value[1];Di2015NewLinechar last = value[value.Length - 1];Di2015NewLineDi2015NewLine// Write chars.Di2015NewLineConsole.WriteLine("--- 'Dot Net Perls' ---");Di2015NewLineConsole.Write("First char: ");Di2015NewLineConsole.WriteLine(first);Di2015NewLineConsole.Write("Second char: ");Di2015NewLineConsole.WriteLine(second);Di2015NewLineConsole.Write("Last char: ");Di2015NewLineConsole.WriteLine(last);Di2015NewLine
11669629Di2015UniqueSeparator--- 'Dot Net Perls' ---Di2015NewLineFirst char:  DDi2015NewLineSecond char: oDi2015NewLineLast char:   sDi2015NewLine
11669650Di2015UniqueSeparatorTextBlock
11669650Di2015UniqueSeparatorBorder
11669650Di2015UniqueSeparatorLightCoral
11669650Di2015UniqueSeparatorColor.FromArgb()
11669703Di2015UniqueSeparatorprivate static void AddNewPriceSettings(PRICE_SETTING priceSettingsInfo)Di2015NewLine{Di2015NewLine   PRICE_SETTING priceSetting = new PRICE_SETTING();Di2015NewLine   //Di2015NewLine   priceSetting.Prop1 = priceSettingsInfo.Prop1;Di2015NewLine   priceSetting.Prop2 = priceSettingsInfo.Prop2;Di2015NewLine   priceSetting.Prop3 = priceSettingsInfo.Prop3;Di2015NewLine   // ...Di2015NewLine   DataContext.CommonUsers.PRICE_SETTINGs.InsertOnSubmit(priceSetting );          Di2015NewLine   DataContext.CommonUsers.SubmitChanges();Di2015NewLine}Di2015NewLine
11669743Di2015UniqueSeparatorchunk-size[;chunk-extensions]<CRLF>Di2015NewLinechunk-data<CRLF>Di2015NewLine
11669743Di2015UniqueSeparator\\r\\n
11669743Di2015UniqueSeparatorchunk-size
11669743Di2015UniqueSeparator0
11669743Di2015UniqueSeparatorCRLF's
11669743Di2015UniqueSeparatorReadLine()
11669743Di2015UniqueSeparatorchunk-data
11670007Di2015UniqueSeparator.ClientEvents(events => eventsDi2015NewLine            .OnLoad("onLoad")Di2015NewLine            .OnEdit("onEdit")Di2015NewLine            .OnDetailViewCollapse("onDetailViewCollapse")Di2015NewLine            .OnDetailViewExpand("onDetailViewExpand")Di2015NewLine            .OnDelete("onDelete")Di2015NewLine            .OnSave("onSave")Di2015NewLine            .OnDataBinding("onDataBinding")Di2015NewLine            .OnRowDataBound("onRowDataBound")Di2015NewLine            .OnRowSelect("onRowSelect")Di2015NewLine            .OnDataBound("onDataBound")Di2015NewLine            .OnColumnResize("onColumnResize")Di2015NewLine            .OnColumnReorder("onColumnReorder")Di2015NewLine            .OnComplete("onComplete"))Di2015NewLine
11670033Di2015UniqueSeparator.ajax__tab_header_verticalleft
11670033Di2015UniqueSeparator.ajax__tab_header_verticalleft Di2015NewLine{Di2015NewLine    width: 200px;Di2015NewLine}Di2015NewLine
11670094Di2015UniqueSeparator  public static class CustomExtensions {Di2015NewLineDi2015NewLine    public static IDisposable Step<TModel, TValue>(this HtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression) {Di2015NewLine        ModelMetadata metadata = ModelMetadata.FromLambdaExpression(expression, html.ViewData);Di2015NewLine        TextWriter writer = html.ViewContext.Writer;Di2015NewLine        writer.WriteLine("<div class=\\"editable\\" id=\\"Raw_{0}\\" name=\\"Raw_{0}\\">", metadata.PropertyName);Di2015NewLine        var modelValue = metadata.Model == null ? "" : metadata.Model.ToString();Di2015NewLine        writer.WriteLine(modelValue);Di2015NewLine        writer.WriteLine("<input type=\\"hidden\\" id=\\"{0}\\" name=\\"{0}\\" value=\\"{1}\\"/>", metadata.PropertyName, html.Encode(modelValue));Di2015NewLineDi2015NewLine        return new CreationSteps(html, metadata);Di2015NewLine    }Di2015NewLineDi2015NewLine        private class CreationSteps : IDisposable {Di2015NewLineDi2015NewLine            #region | Properties |Di2015NewLine            private readonly TextWriter writer;Di2015NewLine            private bool disposed;Di2015NewLine            private ModelMetadata _metadata;Di2015NewLine            #endregionDi2015NewLineDi2015NewLine            /// <summary>Di2015NewLine            /// Initialize a new instance of <see cref="CreationSteps"/>Di2015NewLine            /// </summary>Di2015NewLine            /// <param name="html"></param>Di2015NewLine            /// <param name="metadata"></param>Di2015NewLine            public CreationSteps(HtmlHelper html, ModelMetadata metadata) {Di2015NewLine                this._metadata = metadata;Di2015NewLine                this.writer = html.ViewContext.Writer;Di2015NewLine            }Di2015NewLineDi2015NewLine            #region | Public Methods |Di2015NewLine            public void Dispose() {Di2015NewLine                if (disposed) return;Di2015NewLine                disposed = true;Di2015NewLine                writer.WriteLine("</div>");Di2015NewLine            }Di2015NewLine            #endregionDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11670094Di2015UniqueSeparator@using (@Html.Step(m => m.HtmlValues)) { Di2015NewLine    <p>Please fill in the above information.</p>Di2015NewLine}Di2015NewLine
11670094Di2015UniqueSeparator$(document).ready(function () {Di2015NewLine    $(".hook-text-event").change(function () {Di2015NewLine        console.log(this.id + " has been changed");Di2015NewLine    });Di2015NewLine    $(".hook-button-event").click(function () {Di2015NewLine        console.log(this.id + " has been clicked");Di2015NewLine    });Di2015NewLine});Di2015NewLine
11670132Di2015UniqueSeparatorprivate readonly BackgroundWorker worker = new BackgroundWorker();Di2015NewLine
11670132Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine  {Di2015NewLine     InitializeComponent();Di2015NewLineDi2015NewLine     worker.DoWork += worker_DoWork;Di2015NewLine  }Di2015NewLine
11670132Di2015UniqueSeparatorvoid worker_DoWork( object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine   // Set up a string to hold our data so we only need to use the dispatcher in one placeDi2015NewLine   string toAppend = "";Di2015NewLine   foreach (DocumentData doc in Docs)Di2015NewLine   {Di2015NewLine      toAppend = "";Di2015NewLine      tryDi2015NewLine      {Di2015NewLine         wsProxy.RefileDocument(doc);Di2015NewLine         toAppend = String.Format("Refilling doc # {0}.{1}\\u2028", doc.DocNum, doc.DocVer);  Di2015NewLine      }Di2015NewLine      catch (Exception exc)Di2015NewLine      {Di2015NewLine         if (exc.Message.Contains("Document is in use"))Di2015NewLine            toAppend = String.Format("There was a problem refilling doc # {0}, it is in use.\\u2028",doc.DocNum);Di2015NewLine         elseDi2015NewLine            toAppend = String.Format("There was a problem refilling doc # {0} : {1}.\\u2028", doc.DocNum, exc.Message);Di2015NewLine      }Di2015NewLineDi2015NewLine      // Update the text from the main thread to avoid exceptionsDi2015NewLine      Dispatcher.Invoke((Action)delegateDi2015NewLine      {Di2015NewLine         MainText.AppendText(toAppend);Di2015NewLine      });Di2015NewLine   }Di2015NewLine}Di2015NewLine
11670132Di2015UniqueSeparatorprivate void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine  {Di2015NewLine     worker.RunWorkerAsync();Di2015NewLine  }Di2015NewLine
11670184Di2015UniqueSeparatorConvert.ToInt32(str_val[0]);Di2015NewLine
11670184Di2015UniqueSeparatorConvert.ToInt32(char val);Di2015NewLine
11670184Di2015UniqueSeparatorConvert.ToInt32(str_val.Substring(0, 1));Di2015NewLine
11670184Di2015UniqueSeparatorConvert.ToInt32(string val);Di2015NewLine
11670205Di2015UniqueSeparatorShowPageNumbers="False"
11670205Di2015UniqueSeparatorShowPageNumbers
11670247Di2015UniqueSeparatorFileObject
11670247Di2015UniqueSeparatorpublic class FileObjectDi2015NewLine{Di2015NewLine    public string FilePath { get; set; }Di2015NewLine    public string FileState { get; set; }Di2015NewLine    public bool Selected { get; set; }Di2015NewLine}Di2015NewLine
11670247Di2015UniqueSeparatorpublic class FileObjectWrapperDi2015NewLine{Di2015NewLine    private FileObject fileObject_;Di2015NewLineDi2015NewLine    FileObjectWrapper()Di2015NewLine    {Di2015NewLine        fileObject_ = new FileObject();Di2015NewLine    }Di2015NewLineDi2015NewLine    FileObjectWrapper(FileObject fo)Di2015NewLine    {Di2015NewLine        fileObject_ = fo;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string FilePathDi2015NewLine    {Di2015NewLine        get { return fileObject_.filePath; }Di2015NewLine        set { fileObject_.filePath = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string FileStateDi2015NewLine    {Di2015NewLine        get { return fileObject_.fileState; }Di2015NewLine        set { fileObject_.fileState= value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Selected { get; set; }Di2015NewLine}Di2015NewLine
11670247Di2015UniqueSeparatorvar fowList = new BindingList<FileObjectWrapper>();Di2015NewLineDi2015NewLineforeach (FileObject fo in // here you have your list of file objects! )Di2015NewLine{Di2015NewLine    fowList.Add(new FileObjectWrapper(fo));Di2015NewLine}Di2015NewLineDi2015NewLinedataGridView1.DataSource = fowList;    Di2015NewLine
11670247Di2015UniqueSeparatorDataGridViewCheckBoxColumn
11670247Di2015UniqueSeparatorDataGridViewCheckBoxColumn c = new DataGridViewCheckBoxColumn();Di2015NewLinec.Name = "Selected";Di2015NewLinedataGridView1.Columns.Add(c);Di2015NewLine
11670247Di2015UniqueSeparatorDataGridViewHeaderCell
11670247Di2015UniqueSeparatorPaint
11670247Di2015UniqueSeparatorOnMouseClick
11670266Di2015UniqueSeparator.Elements()
11670266Di2015UniqueSeparatorvar data = from query in loadedXml.Descendants("person") Di2015NewLine           where ((query.Attribute("name").Value as string).Equals("Kurt Cobain")) Di2015NewLine           select query;Di2015NewLine
11670437Di2015UniqueSeparatorIPrincipal
11670437Di2015UniqueSeparatorSettings
11670437Di2015UniqueSeparatorLanguage
11670437Di2015UniqueSeparatorILanguage
11670437Di2015UniqueSeparatorISettings
11670437Di2015UniqueSeparatorSettings != null
11670437Di2015UniqueSeparatorLanguage != null
11670437Di2015UniqueSeparatornull
11670462Di2015UniqueSeparatorFileUtil.IsSuspiciousPhysicalPath(string physicalPath, out bool pathTooLong)
11670462Di2015UniqueSeparatorstring.Compare(physicalPath, Path.GetFullPath(physicalPath), StringComparison.OrdinalIgnoreCase) != 0;Di2015NewLine
11670462Di2015UniqueSeparatorPath.GetFullPath()
11670462Di2015UniqueSeparatorPath.NormalizePath()
11670462Di2015UniqueSeparatorPath.GetFullPath(@"C:\\Foo \\Bar.txt")
11670462Di2015UniqueSeparatortrue
11670462Di2015UniqueSeparatorServer.MapPath
11670503Di2015UniqueSeparatorpublic static IEnumerable<IEnumerable<T>> SplitColumn<T>( IEnumerable<T> source ) {Di2015NewLine    return sourceDi2015NewLine        .Select( ( x, i ) => new { Index = i, Value = x } )Di2015NewLine        .GroupBy( x => x.Index % 3 )Di2015NewLine        .Select( x => x.Select( v => v.Value ).ToList() )Di2015NewLine        .ToList();Di2015NewLine}Di2015NewLine
11670658Di2015UniqueSeparatorpublic class ItemDi2015NewLine{Di2015NewLine    public ProfileTypeEnum ProfileType { get; set; }Di2015NewLine    public string ProfileName { get; set; }Di2015NewLine    public int ProfileTypeValue { get { return (int)ProfileType; } }Di2015NewLine}Di2015NewLine
11670658Di2015UniqueSeparatorpublic enum ProfileTypeEnumDi2015NewLine{Di2015NewLine    CurrentSettings=0,Di2015NewLine    CustomSettings=1,Di2015NewLine    DefaultSettings=2Di2015NewLine}Di2015NewLine
11670658Di2015UniqueSeparatorProfiles.SortDescriptions.Add(new SortDescription("ProfileTypeValue", ListSortDirection.Ascending));Di2015NewLineProfiles.SortDescriptions.Add(new SortDescription("ProfileName", ListSortDirection.Ascending));Di2015NewLine
11670716Di2015UniqueSeparatorId
11670716Di2015UniqueSeparatorint
11670716Di2015UniqueSeparator0
11670716Di2015UniqueSeparatorsession.Merge()
11670716Di2015UniqueSeparatorEquals()
11670716Di2015UniqueSeparatorGetHashCode()
11670716Di2015UniqueSeparatorEquals()
11670716Di2015UniqueSeparatorGetHashCode()
11670716Di2015UniqueSeparatorEmployee emp; // = your new employee instanceDi2015NewLinesession.CreateQuery(Di2015NewLine           "update Employee set Property1 = :property1, ... " +Di2015NewLine           "where Idc = :idc, Ide = :ide")Di2015NewLine       .SetParameter("idc", emp.Idc)Di2015NewLine       .SetParameter("ide", emp.Ide)Di2015NewLine       .SetParameter("property1", emp.Property1)Di2015NewLine       // other propertiesDi2015NewLine       .ExecuteUpdate();Di2015NewLine
11670716Di2015UniqueSeparatorsession.CreateSQLQuery("...").ExecuteUpdate();
11670716Di2015UniqueSeparatorEmployee emp; // = your new employee instanceDi2015NewLineEmployee oldEmployee = session.Query<Employee>()Di2015NewLine    .Where(x => x.Idc == emp.Idc)Di2015NewLine    .Where(x => x.Ide == emp.Ide)Di2015NewLine    .Single();Di2015NewLineoldEmployee.Property1 = emp.Property1;Di2015NewLineoldEmployee.Property2 = emp.Property2;Di2015NewLine// other propertiesDi2015NewLinesession.SaveOrUpdate(oldEmployee);Di2015NewLine
11670737Di2015UniqueSeparatorTDESAlgorithm.Mode = CipherMode.CBC;
11670737Di2015UniqueSeparatorRNGCryptoServiceProvider
11670938Di2015UniqueSeparatorpublic Benutzer GetUser(string Domain, string Benutzer, string Werk, string GUID)Di2015NewLine{Di2015NewLine    Benutzer result = new Benutzer();Di2015NewLine    DirectoryEntry Entry = new DirectoryEntry("LDAP://<GUID=" + GUID + ">");Di2015NewLine    string filter = "(&(objectClass=user)(objectCategory=person)(cn=*))";Di2015NewLineDi2015NewLine    DirectorySearcher Searcher = new DirectorySearcher(Entry, filter);Di2015NewLine    SearchResult res = Searcher.FindOne();Di2015NewLine    result =new Benutzer()Di2015NewLine    {Di2015NewLine        Benutzername = GetProperty(res, "sAMAccountName"),Di2015NewLine        Vorname = GetProperty(res, "givenName"),Di2015NewLine        Nachname = GetProperty(res, "sn"),Di2015NewLine        eMail = GetProperty(res, "mail"),Di2015NewLine        Unternehmen = GetProperty(res, "company"),Di2015NewLine        Abteilung = GetProperty(res, "Department"),Di2015NewLine        Raum = GetProperty(res, "physicalDeliveryOfficeName"),Di2015NewLine        Beschreibung = GetProperty(res, "Description"),Di2015NewLine        Kostenstelle = GetProperty(res, "extensionAttribute3"),Di2015NewLine        Telefonnummer = GetProperty(res, "telephoneNumber"),Di2015NewLine        Mobilnummer = GetProperty(res, "mobile"),Di2015NewLine        Haustelefon = GetProperty(res, "homePhone"),Di2015NewLine        Fax = GetProperty(res, "facsimileTelephoneNumber"),Di2015NewLine        Pager = GetProperty(res, "pager"),Di2015NewLine        Standort = GetProperty(res, "l")Di2015NewLine    };              Di2015NewLineDi2015NewLine    return result;  Di2015NewLine}Di2015NewLine
11670958Di2015UniqueSeparatorParse
11670958Di2015UniqueSeparatorParseExact
11670958Di2015UniqueSeparatorDateTime date = DateTime.ParseExact("07/26/2012", "MM/dd/yyyy", CultureInfo.InvariantCulture);Di2015NewLine
11670958Di2015UniqueSeparatorInvariantCulture
11670988Di2015UniqueSeparatorprivate Point AddPoints(Point A, Point B)Di2015NewLine{Di2015NewLine    return new Point(A.X + B.X, A.Y + B.Y);Di2015NewLine}Di2015NewLineDi2015NewLineprivate Point SubtractPoints(Point A, Point B)Di2015NewLine{Di2015NewLine    return new Point(A.X - B.X, A.Y - B.Y);Di2015NewLine}Di2015NewLine
11670988Di2015UniqueSeparatorposition.Location = SubtractPoints(AddPoints(e.Location,pic1.Location),bild_posi.Location);Di2015NewLine
11671394Di2015UniqueSeparatorAcceptChanges()
11671394Di2015UniqueSeparatorAcceptChanges()
11671475Di2015UniqueSeparatorDebug.Listeners
11671475Di2015UniqueSeparatorDebug.Write
11671541Di2015UniqueSeparatorpublic static UserProfile GetUserProfile(Guid userID)Di2015NewLine{Di2015NewLine    UserProfile oProfile = null;Di2015NewLineDi2015NewLine    using (var context = new MyEntities())Di2015NewLine    {Di2015NewLine        oProfile = (from c in context.UserProfiles where c.UserID == userID select c).FirstOrDefault();Di2015NewLine    }Di2015NewLineDi2015NewLine    return oProfile;Di2015NewLine}Di2015NewLine
11671589Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {   Di2015NewLine        throw new Exception("Bar");Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine        //I spit on the rules and change the message anywayDi2015NewLine        ex.GetType().GetField("_message", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(ex, "Foo");Di2015NewLine        throw ex;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11671686Di2015UniqueSeparator_SDKObject
11671686Di2015UniqueSeparatorOrganizationServiceProxy
11671686Di2015UniqueSeparator_SDKObject
11671707Di2015UniqueSeparatorInclude
11671707Di2015UniqueSeparatorp.Address
11671707Di2015UniqueSeparatornull
11671707Di2015UniqueSeparatorvar entry = ctx.Entry(p)
11671707Di2015UniqueSeparatorDbContext
11671707Di2015UniqueSeparatorObjectContext
11671707Di2015UniqueSeparatorPerson p = ctx.People.Include(x => x.Address).First();Di2015NewLinep.Address = null;Di2015NewLinevar objCtx = ((IObjectContextAdapter)ctx).ObjectContext;Di2015NewLinevar objentr = objCtx.ObjectStateManager.GetObjectStateEntries(EntityState.Deleted);Di2015NewLine
11671707Di2015UniqueSeparatorobjentr
11671707Di2015UniqueSeparatorRelationshipEntry
11671707Di2015UniqueSeparatorSaveChanges()
11671707Di2015UniqueSeparatorAddress
11671707Di2015UniqueSeparatorPerson
11671707Di2015UniqueSeparatorNULL
11671707Di2015UniqueSeparatorModified
11671758Di2015UniqueSeparatorpublic class FriendDi2015NewLine{Di2015NewLine    public static readonly int MaxDepth = 8; // prevent more than 8 recursionsDi2015NewLineDi2015NewLine    private List<Friend> myFriends_ = new List<Friend>();Di2015NewLineDi2015NewLine    // private implementationDi2015NewLine    private void InternalFriends(int depth, int currDepth, List<Friend> list)Di2015NewLine    {Di2015NewLine        // Add "us"Di2015NewLine        if(currDepth > 1 && !list.Contains(this))Di2015NewLine            list.Add(this);Di2015NewLineDi2015NewLine        if(currDepth <= depth)Di2015NewLine        {Di2015NewLine            foreach(Friend f in myFriends_)Di2015NewLine            {Di2015NewLine                if(!list.Contains(f))Di2015NewLine                    f.InternalFriends(depth, depth + 1, list); // we can all private functions here.Di2015NewLine            }Di2015NewLine        }Di2015NewLine    } // eo InternalFriendsDi2015NewLineDi2015NewLineDi2015NewLine    public List<Friend> GetFriendsOfFriend(int depth)Di2015NewLine    {Di2015NewLine        List<Friend> ret = new List<Friend>();Di2015NewLine        InternalFriends(depth < MaxDepth ? depth : MaxDepth, 1, ret);Di2015NewLine        return ret;Di2015NewLine    }  // eo getFriendsOfFriendDi2015NewLine} // eo class FriendDi2015NewLine
11671758Di2015UniqueSeparatorContains
11671765Di2015UniqueSeparatorDataTable
11671765Di2015UniqueSeparatorDataTable
11671765Di2015UniqueSeparatorDataAdapter.Fill
11671765Di2015UniqueSeparatorDataAdapter
11671765Di2015UniqueSeparatorDataTable
11671839Di2015UniqueSeparatorpublic SomeType SomeProperty { get; protected set; }Di2015NewLine
11671971Di2015UniqueSeparatorint
11671971Di2015UniqueSeparatorInt32
11671971Di2015UniqueSeparatorint
11671971Di2015UniqueSeparatorglobal::System.Int32
11671971Di2015UniqueSeparatorstruct
11671971Di2015UniqueSeparatorint
11671974Di2015UniqueSeparatorOnClientClick
11671974Di2015UniqueSeparatorUpdatePanel
11672102Di2015UniqueSeparatorforeach (var item in mylistview.SelectedItemsDi2015NewLine                               .Cast<ListViewItem>()Di2015NewLine                               .Where(lvi => lvi.Name == "test")Di2015NewLine    item.Remove();Di2015NewLine
11672208Di2015UniqueSeparatorTuple<string, List<MyObject>>
11672208Di2015UniqueSeparatorList<MyObject>
11672208Di2015UniqueSeparatorvar t = new { TheString = "", TheList = new List<MyObject>() };Di2015NewLinevar list = t.TheList;Di2015NewLinevar s = t.TheString;Di2015NewLine
11672208Di2015UniqueSeparatorExpandoObject
11672208Di2015UniqueSeparatorSystem.Dynamic
11672208Di2015UniqueSeparatorvar expando = new ExpandoObject();Di2015NewLineexpando.List = new List<MyObject>();Di2015NewLineexpando.TheString = "";Di2015NewLine
11672208Di2015UniqueSeparatorExpandoObject
11672208Di2015UniqueSeparatorIDictionary<string, object>
11672208Di2015UniqueSeparatorvar dict = (IDictionary<string, object>)expando;Di2015NewLine
11672208Di2015UniqueSeparatorExpandoObject
11672238Di2015UniqueSeparatorSvnClient.Write()
11672238Di2015UniqueSeparatorSvnClient svnClient = new SvnClient();Di2015NewLineSvnUriTarget target = new SvnUriTarget("https://DbDiff.svn.codeplex.com/svn/DbDiffCommon/DataAccess/SqlCommand11.xml", 80088);Di2015NewLineDi2015NewLineStream stream = new MemoryStream();Di2015NewLinesvnClient.Write(target, stream);Di2015NewLine
11672359Di2015UniqueSeparatorDataType1
11672359Di2015UniqueSeparatorDataType2
11672359Di2015UniqueSeparatorBaseDataType
11672359Di2015UniqueSeparatorpublic class MyDynamicTypeConverter : ExpandableObjectConverterDi2015NewLine{Di2015NewLine    public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)Di2015NewLine    {Di2015NewLine        if (destinationType.Equals(typeof(string)))Di2015NewLine        {Di2015NewLine            BaseDataType baseDisplay = GetBaseDisplay(context);Di2015NewLine            if (baseDisplay.ReadFailed)Di2015NewLine            {Di2015NewLine                // Display the error messageDi2015NewLine                return baseDisplay.ErrorMessageReadFailed;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return base.ConvertTo(context, culture, value, destinationType);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool GetPropertiesSupported(ITypeDescriptorContext context)Di2015NewLine    {Di2015NewLine        BaseDataType baseDisplay = GetBaseDisplay(context);Di2015NewLine        if (baseDisplay.ReadFailed)Di2015NewLine        {Di2015NewLine            // If read failed, do not expand the display for this objectDi2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return base.GetPropertiesSupported(context);Di2015NewLine    }Di2015NewLineDi2015NewLine    private BaseDataType GetBaseDisplay(ITypeDescriptorContext context)Di2015NewLine    {Di2015NewLine        // Extract base data type using reflectionsDi2015NewLine        object obj = context.Instance.GetType().GetProperty(context.PropertyDescriptor.Name).GetValue(context.Instance, null);Di2015NewLine        return (BaseDataType)obj;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11672419Di2015UniqueSeparatorthis.reportViewer.LocalReport.DataSources.Clear(); Di2015NewLineDataTable dt = new DataTable(); Di2015NewLinedt = this.inputValuesTableAdapter.GetData();     Di2015NewLineDi2015NewLineMicrosoft.Reporting.WinForms.ReportDataSource rprtDTSource = new Microsoft.Reporting.WinForms.ReportDataSource(dt.TableName, dt); Di2015NewLineDi2015NewLinethis.reportViewer.LocalReport.DataSources.Add(rprtDTSource); Di2015NewLinethis.reportViewer.RefreshReport(); Di2015NewLine
11672430Di2015UniqueSeparator@string.Concat(Model.Name.Substring(0,20), "...")Di2015NewLine
11672430Di2015UniqueSeparator@(Model.Name.Substring(0, 20) + "...")Di2015NewLine
11672433Di2015UniqueSeparator    [global::System.Configuration.UserScopedSettingAttribute()]Di2015NewLine    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]Di2015NewLine    [global::System.Configuration.DefaultSettingValueAttribute(null)]Di2015NewLine    public string TemporaryDirectoryDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (this["TemporaryDirectory"] == null)Di2015NewLine            {Di2015NewLine                return System.IO.Path.GetTempPath();Di2015NewLine            }Di2015NewLine            return ((string)this["TemporaryDirectory"]);Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (System.IO.Directory.Exists(value) == false)Di2015NewLine            {Di2015NewLine                throw new System.IO.DirectoryNotFoundException("Directory does not exist.");Di2015NewLine            }Di2015NewLine            this["TemporaryDirectory"] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11672460Di2015UniqueSeparator        IntPtr parentWindow = (IntPtr)WinApi.FindWindow("Warcraft III", "Warcraft III");Di2015NewLine        int X = 770;Di2015NewLine        int Y = 127;Di2015NewLine        Point temp = new Point(X, Y);Di2015NewLine        IntPtr lParam = (IntPtr)((temp.Y << 16) | temp.X);Di2015NewLine        IntPtr wParam = IntPtr.Zero;Di2015NewLine        WinApi.PostMessage(parentWindow, WM_LBUTTONDOWN, (IntPtr)MK_LBUTTON, lParam);Di2015NewLine        WinApi.PostMessage(parentWindow, WM_LBUTTONUP, wParam, lParam);  Di2015NewLine
11672569Di2015UniqueSeparatorpublic static string WhereSearch(string filename)Di2015NewLine{Di2015NewLine    var paths = new[]{ Environment.CurrentDirectory }Di2015NewLine            .Concat(Environment.GetEnvironmentVariable("PATH").Split(';'));Di2015NewLine    var extensions = new[]{ String.Empty }Di2015NewLine            .Concat(Environment.GetEnvironmentVariable("PATHEXT").Split(';')Di2015NewLine                       .Where(e => e.StartsWith(".")));Di2015NewLine    var combinations = paths.SelectMany(x => extensions,Di2015NewLine            (path, extension) => Path.Combine(path, filename + extension));Di2015NewLine    return combinations.FirstOrDefault(File.Exists);Di2015NewLine}Di2015NewLine
11672595Di2015UniqueSeparator[Authorize]
11672829Di2015UniqueSeparatorDateTime.ParseExact()
11672829Di2015UniqueSeparatorstring dateString = "Your date";Di2015NewLinestring format = "ddd MMM dd HH:mm:ss yyyy %K";Di2015NewLineDateTime dateTime = DateTime.ParseExact(dateString, format, Di2015NewLine              CultureInfo.InvariantCulture);Di2015NewLineConsole.WriteLine(dateTime);Di2015NewLine
11672829Di2015UniqueSeparatorDateTime
11672844Di2015UniqueSeparatorbadness := 0.0Di2015NewLineFor x, y over the entire image:Di2015NewLine  r, g, b := color at x,y in image 1Di2015NewLine  R, G, B := color at x,y in image 2Di2015NewLine  badness += (r-R)*(r-R) + (g-G)*(g-G) + (b-B)*(b-B)Di2015NewLinebadness /= (image width) * (image height)Di2015NewLine
11672859Di2015UniqueSeparatorpublic int LoadTexture(string file)Di2015NewLine{Di2015NewLine    Bitmap bitmap = new Bitmap(file);Di2015NewLineDi2015NewLine    int tex;Di2015NewLine    GL.Hint(HintTarget.PerspectiveCorrectionHint, HintMode.Nicest);Di2015NewLineDi2015NewLine    GL.GenTextures(1, out tex);Di2015NewLine    GL.BindTexture(TextureTarget.Texture2D, tex);Di2015NewLineDi2015NewLine    BitmapData data = bitmap.LockBits(new System.Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height),Di2015NewLine        ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);Di2015NewLineDi2015NewLine    GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0,Di2015NewLine        OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);Di2015NewLine    bitmap.UnlockBits(data);Di2015NewLineDi2015NewLineDi2015NewLine    GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int) TextureMinFilter.Linear);Di2015NewLine    GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int) TextureMagFilter.Linear);Di2015NewLine    GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int) TextureWrapMode.Repeat);Di2015NewLine    GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int) TextureWrapMode.Repeat);Di2015NewLineDi2015NewLine    return tex;Di2015NewLine}Di2015NewLine
11672888Di2015UniqueSeparatorXmlNode cNode = doc.SelectSingleNode("rss/channel/item");Di2015NewLine
11672888Di2015UniqueSeparatoritem
11672888Di2015UniqueSeparatorcNode
11672888Di2015UniqueSeparatorforeach (XmlNode commentNode in itemNode.SelectNodes("wp:comment", nameSpace))Di2015NewLine
11672922Di2015UniqueSeparatorreturn
11672922Di2015UniqueSeparatorcontinue
11673001Di2015UniqueSeparatorAction
11673001Di2015UniqueSeparatorFunc
11673001Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    Action<string> calltoaction;Di2015NewLine    calltoaction = Doit;Di2015NewLine    calltoaction("MyText1");Di2015NewLine    calltoaction = Doit2;Di2015NewLine    calltoaction("MyText2");Di2015NewLine}Di2015NewLineDi2015NewLinevoid Doit(string s)Di2015NewLine{ Text = s; }Di2015NewLineDi2015NewLinevoid Doit2(string s)Di2015NewLine{ textBox1.Text = s; }Di2015NewLine
11673045Di2015UniqueSeparatorMembershipUser u = Membership.GetUser(username);
11673089Di2015UniqueSeparatorpublic class MyList<T> : List<T>Di2015NewLine{Di2015NewLine    public T LastDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return this[this.Count - 1];Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this[this.Count - 1] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11673089Di2015UniqueSeparatorvar m = new MyList<int> { 1, 2, 3 };Di2015NewLinem.Last = 4;Di2015NewLineConsole.WriteLine(m.Last);Di2015NewLine
11673089Di2015UniqueSeparatorLast
11673111Di2015UniqueSeparatorItemDataBound
11673111Di2015UniqueSeparatorDataItem
11673111Di2015UniqueSeparatorNamingContainer
11673111Di2015UniqueSeparatorItemDataBound
11673111Di2015UniqueSeparatorvar repeater = (Repeater)sender;Di2015NewLinevar parentItem = (RepeaterItem)repeater.NamingContainer;Di2015NewLinevar parentDataItem = parentItem.DataItem;Di2015NewLine
11673122Di2015UniqueSeparatorGetImages()
11673122Di2015UniqueSeparatorpublic string GetImages()Di2015NewLine{Di2015NewLine    return "['Desert.jpg', 'Lighthouse.jpg']";Di2015NewLine}Di2015NewLine
11673122Di2015UniqueSeparatorint counter = 0;Di2015NewLinevar ListFromCodeBehind = <%= this.GetImages() %>;Di2015NewLinevar img = ListFromCodeBehind[counter];Di2015NewLine//do some fading stuffDi2015NewLinecount++;Di2015NewLine
11673122Di2015UniqueSeparatorvar ListFromCodeBehind = ['Desert.jpg', 'Lighthouse.jpg'];Di2015NewLine
11673130Di2015UniqueSeparatorint position = yourString.IndexOf('test');Di2015NewLine
11673217Di2015UniqueSeparatorPostMessage()
11673217Di2015UniqueSeparatorSendMessage()
11673217Di2015UniqueSeparator005E09FA
11673217Di2015UniqueSeparatorWM_LBUTTONDOWN = 0x201
11673217Di2015UniqueSeparatorMK_LBUTTON = 0x1
11673217Di2015UniqueSeparator((Y << 16) | X)
11673217Di2015UniqueSeparator005E09FA
11673217Di2015UniqueSeparatorWM_LBUTTONUP = 0x202
11673217Di2015UniqueSeparator0
11673217Di2015UniqueSeparatorIntPtr.Zero
11673217Di2015UniqueSeparator((Y << 16) | X)
11673254Di2015UniqueSeparatorHttpUtility.UrlDecode(...)
11673254Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="SO.WebForm1" %>Di2015NewLineDi2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLineDi2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head runat="server">Di2015NewLine    <title></title>Di2015NewLine    <script>Di2015NewLine        function makeSafe() {Di2015NewLine            document.getElementById('TextBox1').value = window.escape(document.getElementById('TextBox1').value);Di2015NewLine        };Di2015NewLineDi2015NewLine        function makeDangerous() {Di2015NewLine            document.getElementById('TextBox1').value = window.unescape(document.getElementById('TextBox1').value);Di2015NewLine        }Di2015NewLine    </script>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <form id="form1" runat="server" onsubmit="makeSafe();">Di2015NewLine    <div>Di2015NewLine        <asp:TextBox ID="TextBox1" runat="server" TextMode="MultiLine" Rows="10" ClientIDMode="Static"></asp:TextBox>Di2015NewLine    </div>Di2015NewLine    <asp:Button ID="Button1" runat="server" Text="Button" />Di2015NewLine    </form>Di2015NewLineDi2015NewLineDi2015NewLine     <script>Di2015NewLine         makeDangerous();Di2015NewLine    </script>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
11673254Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    $(document).ready(function () {Di2015NewLine        makeDangerous();Di2015NewLine        $("#freqQuestionsUserUpdateButton").click(function () {Di2015NewLine            makeSafe();Di2015NewLine            $("#updateFreqQuestionsUser").submit();Di2015NewLine        });Di2015NewLine    });Di2015NewLineDi2015NewLine    // Adding an ID attribute to the inputs you want to validate is simplestDi2015NewLine    // Better would be to use document.getElementsByTagName and filter the array on NAMEDi2015NewLine    // or use a JQUERY select....Di2015NewLineDi2015NewLine    function makeSafe() {Di2015NewLine        document.getElementById('QuestionAnswer').value = window.escape(document.getElementById('QuestionAnswer').value);Di2015NewLine    };Di2015NewLineDi2015NewLine    // In this case adding the HTML back to a textbox should be 'safe'Di2015NewLine    // You should be very wary though when you use it as actual HTMLDi2015NewLine    // You MUST take steps to ensure the HTML is safe.Di2015NewLine    function makeDangerous() {Di2015NewLine        document.getElementById('QuestionAnswer').value = window.unescape(document.getElementById('QuestionAnswer').value);Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
11673351Di2015UniqueSeparatorstatic int GetLastInteger( string name ) {Di2015NewLineDi2015NewLine    int value;Di2015NewLine    if( int.TryParse( name, out value ) ) {Di2015NewLine        return value;Di2015NewLine    }Di2015NewLine    System.Text.RegularExpressions.Regex r = Di2015NewLine        new System.Text.RegularExpressions.Regex( @"[^0-9](\\d+\\b)" );Di2015NewLineDi2015NewLine    System.Text.RegularExpressions.Match m = Di2015NewLine        r.Match( name );Di2015NewLineDi2015NewLine    string strValue = m.Groups[1].Value;Di2015NewLine    value = ( int.Parse( strValue ) );Di2015NewLine    return value;Di2015NewLine}Di2015NewLine
11673351Di2015UniqueSeparatorforeach (PropertyInfo reqPropertyInfo in requestPropertyInfo)Di2015NewLine{Di2015NewLine  index = GetLastInteger(reqPropertyInfo.Name);Di2015NewLine}Di2015NewLine
11673410Di2015UniqueSeparatorFoo.Bar
11673410Di2015UniqueSeparatorFoo
11673410Di2015UniqueSeparatorSELECT c.nameDi2015NewLineFROM sys.objects oDi2015NewLineJOIN sys.columns cDi2015NewLine    ON o.object_id = c.object_idDi2015NewLineJOIN sys.schemas sDi2015NewLine    ON o.schema_id = s.schema_idDi2015NewLineWHEREDi2015NewLine    s.name = 'Foo'Di2015NewLine    AND o.name = 'Bar'Di2015NewLine
11673410Di2015UniqueSeparatorDbContext
11673410Di2015UniqueSeparatorvar commandText = "<SQL from above>";Di2015NewLinevar contextAdapter = (IObjectContextAdapter) this;Di2015NewLineIEnumerable<string> columnNames = contextAdapter.ObjectContext.ExecuteStoreQuery<string>(commandText);Di2015NewLine
11673410Di2015UniqueSeparator[Invoke] // Use invoke for non-entitiesDi2015NewLinepublic string[] GetColumnNames(string table)Di2015NewLine{Di2015NewLine    // Format the SQL and get the results;Di2015NewLine    return columnNames.ToArray();Di2015NewLine}Di2015NewLine
11673459Di2015UniqueSeparatorcontainer.TearDown()
11673459Di2015UniqueSeparatorLifetimeManagers
11673572Di2015UniqueSeparatorprivate void MouseStuff(MouseEventArgs e) {Di2015NewLine  if (e.Button == MouseButtons.Left || e.Button == MouseButtons.Right)Di2015NewLine  {Di2015NewLine    foreach (Squares point in mySquares) {Di2015NewLine      if (point.Square.Contains(e.Location)) {Di2015NewLine        if (e.Button == MouseButtons.Left) {Di2015NewLine          Pencil(point);Di2015NewLine        } else {Di2015NewLine           Erase(point);Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine    panelGrid.Invalidate();Di2015NewLine  }Di2015NewLine}Di2015NewLine
11673572Di2015UniqueSeparatorprivate void panelGrid_MouseDown(object sender, MouseEventArgs e) {Di2015NewLine  MouseStuff(e);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void panelGrid_MouseMove(object sender, MouseEventArgs e) {Di2015NewLine  MouseStuff(e);Di2015NewLine}Di2015NewLine
11673572Di2015UniqueSeparatorpublic class BufferedPanel : Panel {Di2015NewLine  public BufferedPanel() {Di2015NewLine    this.DoubleBuffered = true;Di2015NewLine    this.ResizeRedraw = true;Di2015NewLine  }Di2015NewLine}Di2015NewLine
11673837Di2015UniqueSeparatorThreadClass
11673837Di2015UniqueSeparator    private Thread nativeThread;Di2015NewLine    public void Run(int strandID)Di2015NewLine    {Di2015NewLine        nativeThread = new Thread(() => this._run(strandID));Di2015NewLine        nativeThread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Join()Di2015NewLine    {Di2015NewLine        nativeThread.Join();Di2015NewLine    }Di2015NewLine
11673837Di2015UniqueSeparatorThreadClass.Join
11673837Di2015UniqueSeparator    var threads = new List<ThreadClass>();Di2015NewLine    for (int i = 0; i <= s.Length; i += lenCutoff)Di2015NewLine    {Di2015NewLine        threads.Add(new ThreadClass(s.Substring(i, lenCutoff), i));Di2015NewLine        threads[threads.Count - 1].Run(strandID);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Waits for each thread to finish in successionDi2015NewLine    threads.ForEach(t => t.Join());Di2015NewLine
11673837Di2015UniqueSeparatorThreadClass
11673837Di2015UniqueSeparatorSystem.Threading.Tasks
11673837Di2015UniqueSeparator// e.g. class Models { Complete; Partial; }Di2015NewLine// private Models Search(string source, int offset, int length, int ID)Di2015NewLinevar tasks = new List<Task<Models>>(Di2015NewLine    from x in Enumerable.Range(0, s.Length / lenCutoff)Di2015NewLine    select Task.Factory.StartNew<Models>(Di2015NewLine        () => Search(s, x, lenCutoff, strandID));Di2015NewLine);Di2015NewLineDi2015NewLine// private Models CombineResults(IEnumerable<Models> results)Di2015NewLinevar combine = Task.Factory.ContinueWhenAll<Models>(Di2015NewLine    tasks.ToArray(),Di2015NewLine    ts => CombineResults(ts.Select(t => t.Result)));Di2015NewLineDi2015NewLinecombine.Wait();Di2015NewLineDi2015NewLineModels combinedModels = combine.Result;Di2015NewLine
11673842Di2015UniqueSeparator// list of items where weight was not zero, but its zero in the newlist.Di2015NewLinevar result1 = from o in oldListDi2015NewLine              join n in newList on o.Key equals n.Key Di2015NewLine              where o.Value != 0 && n.Value == 0Di2015NewLine              select new {Old = o, New = n};Di2015NewLineDi2015NewLine// list of items where weight is not zero and has changed from oldlist.Di2015NewLinevar result2 = from o in oldListDi2015NewLine              join n in newList on o.Key equals n.KeyDi2015NewLine              where o.Value != 0 && o.Value != n.ValueDi2015NewLine              select new { Old = o, New = n };Di2015NewLine
11673986Di2015UniqueSeparatorpublic string[] FieldsToValidate Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return new[]{ txtCreditCardNumber.UniqueID, txtFNameRoom.UniqueID .. etc };Di2015NewLine    }  Di2015NewLine}Di2015NewLine
11673986Di2015UniqueSeparator<% foreach(var id in ControlId.FieldsToValidate) { %>Di2015NewLine    // <script... etcDi2015NewLine    <%= id %>Di2015NewLineDi2015NewLine<% } %> Di2015NewLine....Di2015NewLine<uc1:TestControl ID="ControlId" runat="server" />Di2015NewLine
11674154Di2015UniqueSeparatorrowNum
11674154Di2015UniqueSeparatorSELECT ID1Di2015NewLineFROM Table1Di2015NewLine
11674154Di2015UniqueSeparatorSELECT CAST(ID1 AS nVarChar(50)) AS 'ID1'Di2015NewLineFROM Table1Di2015NewLine
11674154Di2015UniqueSeparatorrowNum
11674178Di2015UniqueSeparatorstring query = "INSERT INTO ticket_elements " +Di2015NewLine"(ticket_id, product_name, price, tax, amount) " +Di2015NewLine"VALUES (@ticket_id, @product_name, @price, @tax, @amount);" + Di2015NewLine"SELECT SCOPE_IDENTITY();",Di2015NewLine// Instantiate SqlCommand object with above query.Di2015NewLinesqlCommand.Parameters.Add("@ticket_id", ticket_id);Di2015NewLinesqlCommand.Parameters.Add("@product_name", pro2.ProductName);Di2015NewLinesqlCommand.Parameters.Add("@price", tPrice);Di2015NewLinesqlCommand.Parameters.Add("@tax", tax);Di2015NewLinesqlCommand.Parameters.Add("@amount", fixedAmountStr);Di2015NewLine
11674205Di2015UniqueSeparatorint crTextColor;Di2015NewLineDi2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    BackColor = Color.Aqua;Di2015NewLine    crTextColor = BackColor.ToArgb();//To numberDi2015NewLine    Text = crTextColor.ToString();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    BackColor = Color.FromArgb(crTextColor);//From numberDi2015NewLine}Di2015NewLine
11674205Di2015UniqueSeparatorCHARFORMAT2
11674205Di2015UniqueSeparatorcrTextColor
11674205Di2015UniqueSeparatorRGB
11674205Di2015UniqueSeparatorRGB
11674205Di2015UniqueSeparator C++Di2015NewLineDi2015NewLineCOLORREF RGB(Di2015NewLine  BYTE byRed,Di2015NewLine  BYTE byGreen,Di2015NewLine  BYTE byBlueDi2015NewLine);Di2015NewLine
11674205Di2015UniqueSeparatorColor.ToArgb
11674205Di2015UniqueSeparatorARGB
11674240Di2015UniqueSeparatorHH
11674240Di2015UniqueSeparatorhh
11674240Di2015UniqueSeparatorddd MMM dd HH:mm:ss \\G\\M\\Tzzz yyyyDi2015NewLine
11674240Di2015UniqueSeparatorSat Apr 10 01:27:00 GMT-0500 2010
11674319Di2015UniqueSeparatorsrc attribute
11674319Di2015UniqueSeparator<style type="text/css">Di2015NewLine@font-face {Di2015NewLine    font-family: "The Example Font";Di2015NewLine    src: url(http://www.examplefonts.com/example.ttf) format("truetype");Di2015NewLine}Di2015NewLinediv.ExampleFont { Di2015NewLine    font-family: "The Example Font", Verdana;Di2015NewLine}Di2015NewLine</style>Di2015NewLine<div class="ExampleFont ">I am using the Example Font</div>Di2015NewLine
11674355Di2015UniqueSeparatorAssociatedObject.SetBinding(TextBox.TextProperty, "dummy");Di2015NewLine
11674355Di2015UniqueSeparatorDataTemplate
11674355Di2015UniqueSeparatorTextBox
11674355Di2015UniqueSeparatorDataTemplate
11674355Di2015UniqueSeparatorBindingOperations.ClearBinding(AssociatedObject, TextBox.TextProperty);Di2015NewLineif (BindingOperations.IsDataBound(AssociatedObject, TextBox.TextProperty))Di2015NewLine    AssociatedObject.SetBinding(TextBox.TextProperty, "dummy");Di2015NewLine
11674379Di2015UniqueSeparator<add key="Password" value="exam&ple"/>Di2015NewLine
11674499Di2015UniqueSeparator HtmlDocument doc = new HtmlDocument();Di2015NewLine doc.Load("file.htm");Di2015NewLineDi2015NewLine List<string> mp3Links = new List<string();Di2015NewLine foreach(HtmlNode link in doc.DocumentElement.SelectNodes("//a[@href"])Di2015NewLine {Di2015NewLine    if(link != null)Di2015NewLine    {Di2015NewLine      if(link["href"].EndsWith(".mp3"))Di2015NewLine      {Di2015NewLine        mp3Links.Add(link["href"].Value);Di2015NewLine      }Di2015NewLine    }Di2015NewLine }Di2015NewLine
11674546Di2015UniqueSeparatorasync
11674546Di2015UniqueSeparatorawait
11674546Di2015UniqueSeparatorasync Task<List<Instance>> StartNewInstances() {Di2015NewLine    List<Instance> instances = await StartInstancesAsync();Di2015NewLine    await instances.ForEachAsync(x => await instance.WaitUntilRunningAsync());Di2015NewLine    await instances.ForEachAsync(x => await instance.WaitToAcceptSSHConnectionAsync());Di2015NewLine    return instances;Di2015NewLine}Di2015NewLine
11674546Di2015UniqueSeparatorIEnumerable<T>
11674546Di2015UniqueSeparatorpublic static Task ForEachAsync<T>(this IEnumerable<T> source,Di2015NewLine                                   Func<T, Task> taskStarter)Di2015NewLine{Di2015NewLine    // Stuff. It's not terribly tricky :(Di2015NewLine}Di2015NewLine
11674741Di2015UniqueSeparatorASP.NET TextBox server control
11674741Di2015UniqueSeparatorText
11674741Di2015UniqueSeparatorstring searchKey=q.Text;Di2015NewLine
11674741Di2015UniqueSeparatorID
11674741Di2015UniqueSeparatorRunat
11674741Di2015UniqueSeparator"Server"
11674741Di2015UniqueSeparator.ASPX
11674741Di2015UniqueSeparator<div id="someInfoDiv" runat="server"> Tim's point is valid</div>Di2015NewLine
11674741Di2015UniqueSeparator someInfoDiv.InnerHtml = "So i am adding that";Di2015NewLine
11674916Di2015UniqueSeparatorserializer.Serialize(stream, new Apple());Di2015NewLineserializer.Serialize(stream, new notAnApple());Di2015NewLine
11674916Di2015UniqueSeparatorApple apple = (Apple)deserialzer.Deserialize(stream);Di2015NewLinenotAnApple peach = (notAnApple)desserializer.Deserialize(stream);Di2015NewLine
11674956Di2015UniqueSeparatorAn invalid form control with name='...' is not focusable
11674956Di2015UniqueSeparatorformnovalidate="formnovalidate"
11674956Di2015UniqueSeparator<asp:Button runat="server" id="submit1" OnClick="submit1_OnClick" text="Submit" formnovalidate="formnovalidate"/>Di2015NewLine
11674991Di2015UniqueSeparatorSession
11674991Di2015UniqueSeparatoras
11674991Di2015UniqueSeparatornull
11674991Di2015UniqueSeparatorHttpContext.Current.Session["Foo"]Di2015NewLineHttpContext                         Probably fineDi2015NewLineHttpContext.Current                 May not existDi2015NewLineHttpContext.Current.Session         Most likely cause (no access to session)Di2015NewLine
11674991Di2015UniqueSeparatorSession
11674991Di2015UniqueSeparatorSession
11675235Di2015UniqueSeparatorPSObject
11675235Di2015UniqueSeparatorout-string
11675235Di2015UniqueSeparatorPSObject
11675235Di2015UniqueSeparatorBaseObject5
11675235Di2015UniqueSeparatorGet-VM
11675235Di2015UniqueSeparatorOut-String
11675384Di2015UniqueSeparatorTable Contains id,Name,department and ageDi2015NewLineDi2015NewLineDi2015NewLine Department :Di2015NewLine        <asp:DropDownList ID="DropDownList1" runat="server" AutoPostBack="True" Di2015NewLine            DataSourceID="SqlDataSource2" DataTextField="Department" Di2015NewLine            DataValueField="Department">Di2015NewLine        </asp:DropDownList>Di2015NewLine        <br />Di2015NewLine        <asp:SqlDataSource ID="SqlDataSource2" runat="server" Di2015NewLine            ConnectionString="<%$ ConnectionStrings:demoConnectionString %>" Di2015NewLine            SelectCommand="SELECT DISTINCT [Department] FROM [profile]">Di2015NewLine        </asp:SqlDataSource>Di2015NewLine        <asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" Di2015NewLine            DataKeyNames="id" DataSourceID="SqlDataSource3">Di2015NewLine            <Columns>Di2015NewLine                <asp:BoundField DataField="id" HeaderText="id" InsertVisible="False" Di2015NewLine                    ReadOnly="True" SortExpression="id" />Di2015NewLine                <asp:BoundField DataField="Name" HeaderText="Name" SortExpression="Name" />Di2015NewLine                <asp:BoundField DataField="Department" HeaderText="Department" Di2015NewLine                    SortExpression="Department" />Di2015NewLine                <asp:BoundField DataField="Age" HeaderText="Age" SortExpression="Age" />Di2015NewLine            </Columns>Di2015NewLine        </asp:GridView>Di2015NewLine        <asp:SqlDataSource ID="SqlDataSource3" runat="server" Di2015NewLine            ConnectionString="<%$ ConnectionStrings:demoConnectionString %>" Di2015NewLine            SelectCommand="SELECT * FROM [profile] WHERE ([Department] = @Department)">Di2015NewLine            <SelectParameters>Di2015NewLine                <asp:ControlParameter ControlID="DropDownList1" Name="Department" Di2015NewLine                    PropertyName="SelectedValue" Type="String" />Di2015NewLine            </SelectParameters>Di2015NewLine        </asp:SqlDataSource>Di2015NewLineDi2015NewLineResult:Di2015NewLine![Result][1]Di2015NewLineDi2015NewLineDi2015NewLine  [1]: http://i.stack.imgur.com/WrfP7.pngDi2015NewLine
11675521Di2015UniqueSeparatorpublic MainWindow () : base(Gtk.WindowType.Toplevel)Di2015NewLine{Di2015NewLine    Build ();Di2015NewLineDi2015NewLine    FileFilter filter  = new FileFilter();Di2015NewLine    filter.Name = "tar.gz files";Di2015NewLine    filter.AddPattern("*.tar.gz");Di2015NewLine    filechooserbutton1.AddFilter(filter);Di2015NewLine}Di2015NewLine
11675540Di2015UniqueSeparatorOnInit()
11675540Di2015UniqueSeparatorPage_Load
11675583Di2015UniqueSeparatorDisposing
11675583Di2015UniqueSeparatorStored Proc
11675583Di2015UniqueSeparatorXML
11675583Di2015UniqueSeparatorDatabase
11675583Di2015UniqueSeparatorDataTable
11675583Di2015UniqueSeparatorBegin TryDi2015NewLine    Set NoCount ONDi2015NewLine    Set XACT_Abort ONDi2015NewLine    Begin TRanDi2015NewLine        --Your queriesDi2015NewLine    Commit TranDi2015NewLineDi2015NewLineBegin TranDi2015NewLineDi2015NewLineBegin CatchDi2015NewLine    Rollback TranDi2015NewLineEnd CatchDi2015NewLine
11675583Di2015UniqueSeparatorDispose
11675583Di2015UniqueSeparatorusing (SqlConnection connection = new SqlConnection())Di2015NewLine{Di2015NewLine    connection.Open();Di2015NewLine    using (SqlTransaction transaction = connection.BeginTransaction())Di2015NewLine    {Di2015NewLine        transaction.Commit();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11675583Di2015UniqueSeparatorSqlCommand
11675583Di2015UniqueSeparatorusing (SqlCommand cmd = new SqlCommand())Di2015NewLine{Di2015NewLine}Di2015NewLine
11675592Di2015UniqueSeparatorCreateBitmapSourceFromMemorySection
11675592Di2015UniqueSeparatorYUY2
11675592Di2015UniqueSeparatormedia.majorType    = MediaType.Video;Di2015NewLinemedia.subType    = MediaSubType.RGB24;Di2015NewLinemedia.formatPtr = IntPtr.Zero;Di2015NewLinehr = sampGrabber.SetMediaType(media);Di2015NewLine
11675595Di2015UniqueSeparatorSELECT TOP 0 ID FROM Data ORDER BY IDDi2015NewLine
11675595Di2015UniqueSeparatorSELECT TOP 0
11675595Di2015UniqueSeparatorSELECT TOP 0
11675595Di2015UniqueSeparatorORDER BY
11675595Di2015UniqueSeparatorORDER BY
11675595Di2015UniqueSeparatorTOP 25
11675726Di2015UniqueSeparatorvar firstRecord = mcout[0];Di2015NewLinevar firstEURO = firstRecord.EURO;Di2015NewLine
11675726Di2015UniqueSeparatorvar firstEURO = mcout[0].EURODi2015NewLine
11675726Di2015UniqueSeparatorvar sortedData = mcout.Orderby(x => x.OOIP);Di2015NewLine
11675726Di2015UniqueSeparatorforeach (var mc in mcout)Di2015NewLine{Di2015NewLine    var euro = mc.EURO;Di2015NewLine}Di2015NewLineDi2015NewLinefor (int i = 0; i < mcout.Count; i++)Di2015NewLine{Di2015NewLine    var euro = mcout[i].EURO;Di2015NewLine}Di2015NewLine
11675737Di2015UniqueSeparatorItemsSource
11675737Di2015UniqueSeparatorItemsControl
11675737Di2015UniqueSeparator<ItemsControl ItemsSource="{Binding}" ...Di2015NewLine
11675737Di2015UniqueSeparator<ItemsControl ItemsSource="{Binding Contacts}" ...Di2015NewLine
11675862Di2015UniqueSeparatorDim parts = Regex.Matches(s, ".{2}").Cast(Of Match)().Select(Function(m) m.Value)Di2015NewLine
11675920Di2015UniqueSeparatorvar secondTable = res.SelectSingleNode("//table[2]");Di2015NewLine
11676352Di2015UniqueSeparatorMethodInfo
11676352Di2015UniqueSeparatorthis
11676352Di2015UniqueSeparatorGetType()
11676366Di2015UniqueSeparatorstring[] bits = text.Split(new[] {' '}, StringSplitOptions.RemoveEmptEntries);Di2015NewLine
11676366Di2015UniqueSeparatortext.Split
11676366Di2015UniqueSeparatornull
11676366Di2015UniqueSeparatorRegex regex = new Regex(@"\\s+");Di2015NewLinestring[] bits = regex.Split(text);Di2015NewLine
11676376Di2015UniqueSeparatornew Regex("web/[0-9]+/").Replace(youxmlstr, "web2/1/");Di2015NewLine
11676382Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace PolymorphismDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        public class CarDi2015NewLine        {Di2015NewLine            public string Drive()Di2015NewLine            {Di2015NewLine                return "Wrrrr!";Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public class Dog Di2015NewLine        {Di2015NewLine            public string Talk()Di2015NewLine            {Di2015NewLine                return "Woof";Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            var car = new Car();Di2015NewLine            var dog = new Dog();Di2015NewLineDi2015NewLine            List<object> list = new List<object>();Di2015NewLine            list.Add(car);Di2015NewLine            list.Add(dog);Di2015NewLineDi2015NewLine            foreach (object o in list)Di2015NewLine            {Di2015NewLine                if (o is Car)Di2015NewLine                    Console.WriteLine((o as Car).Drive());Di2015NewLine                elseDi2015NewLine                    Console.WriteLine((o as Dog).Talk());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11676401Di2015UniqueSeparatorvoid myTreeView_MouseDown(object sender, MouseEventArgs e) {Di2015NewLine  if (e.Button == MouseButtons.Right) {Di2015NewLine    TreeNode tn = myTreeView.GetNodeAt(e.Location);Di2015NewLine    if (tn != null) {Di2015NewLine      myTreeView.SelectedNode = tn;Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
11676445Di2015UniqueSeparatorDispatcher
11676445Di2015UniqueSeparator//...Di2015NewLineDi2015NewLinedbTool = new DBTool();Di2015NewLine// Initialize the connection stringDi2015NewLine// Disable some UIDi2015NewLineThread thread = new Thread(new ThreadStart(Di2015NewLine        delegate()Di2015NewLine        {Di2015NewLine            dbTool.connectToDB();Di2015NewLine            UIControl.Dispatcher.BeginInvoke(Di2015NewLine              new Action(Di2015NewLine                  updateDi2015NewLine            ));Di2015NewLine        }Di2015NewLine));Di2015NewLinethread.Start();Di2015NewLineDi2015NewLine//.....Di2015NewLineDi2015NewLinevoid update()Di2015NewLine{Di2015NewLine    if (dbTool.validString)     // If the connection string was validDi2015NewLine    {Di2015NewLine        // Re-enable controlsDi2015NewLine    }Di2015NewLine    else     // Invalid connection stringDi2015NewLine    {Di2015NewLine        // Keep controls disabled if no connection could be createdDi2015NewLine    }Di2015NewLine}Di2015NewLine
11676528Di2015UniqueSeparatorpublic interface IFileOpenerDi2015NewLine{Di2015NewLine    public bool PresentFileOpenDialogToUser();Di2015NewLine    public string RequestedFilePath { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DefaultFileOpener : IFileOpenerDi2015NewLine{Di2015NewLine    private string filePath = default(string);Di2015NewLineDi2015NewLine    public bool PresentFileOpenDialogToUser()Di2015NewLine    {Di2015NewLine        OpenFileDialog ofd = new OpenFileDialog();Di2015NewLine        DialogResult dr = ofd.ShowDialog();Di2015NewLine        if (dr == DialogResult.Cancel)Di2015NewLine        {Di2015NewLine            this.filePath = default(string);Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            this.filePath = ofd.FileName;Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string RequestedFilePathDi2015NewLine    {Di2015NewLine        get Di2015NewLine        {Di2015NewLine            return this.filePath;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FileOpenerFactoryDi2015NewLine{Di2015NewLine    public static IFileOpener CreateFileOpener()Di2015NewLine    {Di2015NewLine        return new DefaultFileOpener();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11676528Di2015UniqueSeparator    private void btnOpenFile_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        IFileOpener opener = FileOpenerFactory.CreateFileOpener();Di2015NewLine        if (opener.PresentFileOpenDialogToUser())Di2015NewLine        {Di2015NewLine            //do something with opener.RequestedFilePath;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11676528Di2015UniqueSeparator    private void btnOpenFile_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.OpenMyFile();Di2015NewLine    }Di2015NewLine
11676528Di2015UniqueSeparatorpublic partial class Form1Di2015NewLine{Di2015NewLine    private void OpenMyFile()Di2015NewLine    {Di2015NewLine        IFileOpener opener = FileOpenerFactory.CreateFileOpener();Di2015NewLine        if (opener.PresentFileOpenDialogToUser())Di2015NewLine        {Di2015NewLine            //do something with opener.RequestedFilePath;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11676569Di2015UniqueSeparator    public void SendKey(int keyValue, Keys modifiers)Di2015NewLine    {Di2015NewLine        VirtualKeyCode key;Di2015NewLine        if (modifiers.Equals(Keys.None))Di2015NewLine        {Di2015NewLine            if (Enum.TryParse(VkKeyScan(((char)keyValue)).ToString(), out key))Di2015NewLine            {Di2015NewLine                InputSimulator.SimulateKeyDown(key);Di2015NewLine                InputSimulator.SimulateKeyUp(key);Di2015NewLine            }   Di2015NewLine        }Di2015NewLine        else if (modifiers.Equals(Keys.Shift) && keyValue >= (int)Keys.A && keyValue <= (int)Keys.Z)Di2015NewLine        {Di2015NewLine            if (Enum.TryParse(VkKeyScan(((char) keyValue)).ToString(), out key))Di2015NewLine            {Di2015NewLine                InputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.SHIFT, key);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        else if (modifiers.Equals(Keys.Control) && keyValue >= (int)Keys.A && keyValue <= (int)Keys.Z)Di2015NewLine        {Di2015NewLine            if (Enum.TryParse(VkKeyScan(((char)keyValue)).ToString(), out key))Di2015NewLine            {Di2015NewLine                InputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.CONTROL, key);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        else if (modifiers.Equals(Keys.Alt) && keyValue >= (int)Keys.A && keyValue <= (int)Keys.Z)Di2015NewLine        {Di2015NewLine            if (Enum.TryParse(VkKeyScan(((char)keyValue)).ToString(), out key))Di2015NewLine            {Di2015NewLine                //Alt is named MENU for legacy purposes.Di2015NewLine                InputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.MENU, key);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11676638Di2015UniqueSeparatorExpression.Lambda(Expression.New(constructorInfo)).Compile()
11676638Di2015UniqueSeparatorFunc<T>
11676638Di2015UniqueSeparatorType
11676638Di2015UniqueSeparatorcallingObject
11676638Di2015UniqueSeparatorDelegate delegateWithConstructor = Expression.Lambda(Expression.New(constructorInfo)).Compile();Di2015NewLineobject instance = delegateWithConstructor.DynamicInvoke();Di2015NewLine
11676671Di2015UniqueSeparatorMailItem.Body
11676671Di2015UniqueSeparatorstring
11676671Di2015UniqueSeparatorBody
11676671Di2015UniqueSeparator+=
11676671Di2015UniqueSeparator=
11676671Di2015UniqueSeparatorBodyFormat = olFormatHTML
11676671Di2015UniqueSeparatorMailItem.HTMLBody
11676671Di2015UniqueSeparatorHTMLBody
11676671Di2015UniqueSeparatorBodyFormat = olFormatPlain
11676671Di2015UniqueSeparatormail.Body += "<p>TEST</p>";Di2015NewLine
11676671Di2015UniqueSeparatorBodyFormat = olFormatHTML
11676671Di2015UniqueSeparatormail.HTMLBody = mail.HTMLBody.Replace("</body>", "<p>TEST</p></body>");Di2015NewLine
11676784Di2015UniqueSeparatorusing (var wc = new WebClient())Di2015NewLine{Di2015NewLine    string url = "http://derruki.dyndns.org/oe1rip/json-list-source.php";Di2015NewLine    string json = wc.DownloadString(url);Di2015NewLineDi2015NewLine    dynamic dynObj = JsonConvert.DeserializeObject(json);Di2015NewLine    foreach(var item in dynObj)Di2015NewLine    {Di2015NewLine        Console.WriteLine("INFO:{0}\\nTITLE:{1}\\nURL:{2}\\n\\n",Di2015NewLine            item.info, item.short_title, item.url_stream);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11676784Di2015UniqueSeparatorhttp://oe1.orf.at/programm/konsole/tag/20120726
11676784Di2015UniqueSeparatorforeach(var item in dynObj.list)Di2015NewLine
11676834Di2015UniqueSeparatorList<B> bs = YourDBContext.Bs.Where(b => b.A.ID == someID).ToList();
11676977Di2015UniqueSeparatorReportDataSource source = new ReportDataSource("DataSet1", dt);Di2015NewLine
11677164Di2015UniqueSeparatorField<T>
11677164Di2015UniqueSeparatorvar pairs = from row in tblFields.AsEnumerable()Di2015NewLine            where !row.Field<string>("FieldId").StartsWith("0_")Di2015NewLine            let value = row.Field<decimal>("FieldValue")Di2015NewLine            where value != 0.00MDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                Id = row.Field<string>("FieldId"),Di2015NewLine                Value = valueDi2015NewLine            }Di2015NewLine
11677164Di2015UniqueSeparatorField<T>
11677164Di2015UniqueSeparatorvar pairs = from row in tblFields.AsEnumerable()Di2015NewLine            where !row.Field<string>("FieldId").StartsWith("0_")Di2015NewLine            let fieldValueString  = row.Field<string>("FieldValue")Di2015NewLine            let value = String.IsNullOrEmpty(fieldValueString)? 0M : Decimal.Parse(fieldValueString)Di2015NewLine            where value != 0.00MDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                Id = row.Field<string>("FieldId"),Di2015NewLine                Value = valueDi2015NewLine            }Di2015NewLine
11677164Di2015UniqueSeparatorvar pair= from row in tblFields.AsEnumerable()Di2015NewLine          group row by row.Field<string>("FieldId")[0] into idValueGroupDi2015NewLine          where idValueGroup.Key != "0"Di2015NewLine          select newDi2015NewLine          {Di2015NewLine              IdLine = idValueGroup.ElementAt(0),Di2015NewLine              ValueLine = idValueGruop.ElementAt(1)Di2015NewLine          } into linePairDi2015NewLine          where linePair.ValueLine.Field<decimal>("FieldValue") != 0.00MDi2015NewLine          select newDi2015NewLine          {Di2015NewLine              NameId = linePair.IdLine.Field<string>("FieldId"),Di2015NewLine              Name = linePair.IdLine.Field<string>("FieldValue"),Di2015NewLine              ValueId = linePair.ValueLine.Field<string>("FieldId"),Di2015NewLine              Value = linePair.ValueLine.Field<decimal>("FieldValue")Di2015NewLine          }Di2015NewLine
11677181Di2015UniqueSeparator  Uri theRealURL = new Uri(HttpContext.Current.Request.Url.Scheme + "://" +   HttpContext.Current.Request.Url.Authority + HttpContext.Current.Request.RawUrl);Di2015NewLineDi2015NewLine   string yourValue= HttpUtility.ParseQueryString(theRealURL.Query).Get("yourParm"); Di2015NewLine
11677194Di2015UniqueSeparator        var xmlPath = @"C:\\Projects\\Research\\StackOverflow\\StackOverflow\\test.xml";Di2015NewLineDi2015NewLine        // Loading the xml fileDi2015NewLine        var xmlDoc=XDocument.Load(xmlPath);Di2015NewLineDi2015NewLine        // Querying the names of the parents from the above xml file.Di2015NewLine        var parentList = from p in xmlDoc.Descendants("Parent") select new { Name = p.Attribute("Name").Value };Di2015NewLineDi2015NewLine        var PList=parentList.ToList();Di2015NewLineDi2015NewLine        //passing to list to the gridview in asp.net web page:Di2015NewLine         gvParentsList.DataSource = PList;Di2015NewLine         gvParentsList.DataBind();Di2015NewLine
11677194Di2015UniqueSeparator<asp:Label ID="lblParent" runat="server" Text='<%#Bind("Name") %>'></asp:Label>Di2015NewLine
11677347Di2015UniqueSeparatorobject obj = new object[] { null };Di2015NewLine
11677347Di2015UniqueSeparatorobj
11677347Di2015UniqueSeparatorif
11677347Di2015UniqueSeparatorobj
11677347Di2015UniqueSeparatorobject
11677406Di2015UniqueSeparatorFocusVisualStyle
11677406Di2015UniqueSeparator<Label FocusVisualStyle="{x:Null}">Di2015NewLine    My LabelDi2015NewLine</Label> Di2015NewLine
11677556Di2015UniqueSeparatorlblPrompt.Font.Style |=Di2015NewLine    (chkBold.Checked ? FontStyle.Bold : 0)Di2015NewLine    | (chkItalics.Checked ? FontStyle.Italic : 0)Di2015NewLine    | (chkUnderline.Checked ?  FontStyle.Underline : 0);Di2015NewLine
11677569Di2015UniqueSeparatorViewBag
11677569Di2015UniqueSeparatordynamic
11677569Di2015UniqueSeparatorToSeoUrl
11677569Di2015UniqueSeparatorRuntimeBinderException
11677569Di2015UniqueSeparator<h2>@(((string)item.Title).ToSeoUrl())</h2>
11677569Di2015UniqueSeparatorToString()
11677569Di2015UniqueSeparator<h2>@(StringExtensions.ToSeoUrl(item.Title))</h2>
11677592Di2015UniqueSeparatorYouTubeRequest
11677592Di2015UniqueSeparatorVideo
11677592Di2015UniqueSeparatorPageSize
11677592Di2015UniqueSeparatorYouTubeRequestSettings
11677592Di2015UniqueSeparator// Create the request.Di2015NewLinevar request = new YouTubeRequest(Di2015NewLine    new YouTubeRequestSettings("my app", null) { AutoPaging = false });Di2015NewLineDi2015NewLine// Get the video.Di2015NewLinevar video = request.Retrieve<Video>(Di2015NewLine    new Uri("https://gdata.youtube.com/feeds/api/videos/1FJHYqE0RDg"));Di2015NewLine
11677592Di2015UniqueSeparatorYouTubeRequestSettings
11677592Di2015UniqueSeparatorYouTubeRequest
11677592Di2015UniqueSeparatorGetRelatedVideos
11677592Di2015UniqueSeparator// Create the request again.  Set the page size.Di2015NewLinerequest = new YouTubeRequest(Di2015NewLine    new YouTubeRequestSettings("my app", null) { Di2015NewLine        AutoPaging = false, PageSize = 50Di2015NewLine });Di2015NewLineDi2015NewLine // Get the related videos.Di2015NewLine var related = request.GetRelatedVideos(video);Di2015NewLine
11677592Di2015UniqueSeparatorPageSize
11677592Di2015UniqueSeparatormax-results
11677592Di2015UniqueSeparator// Write out how many videos there are.Di2015NewLineConsole.WriteLine(string.Format(CultureInfo.CurrentCulture, Di2015NewLine    "{0} related videos in first page.", related.Entries.Count()));Di2015NewLine
11677912Di2015UniqueSeparator-------------------------------18788734234Di2015NewLineContent-Disposition: form-data; name="nonfile_field"Di2015NewLineDi2015NewLinevalue hereDi2015NewLine-------------------------------18788734234Di2015NewLineContent-Disposition: form-data; name="myfile"; filename="ad.gif"Di2015NewLineContent-Type: image/gifDi2015NewLineDi2015NewLine[ooh -- file contents!]Di2015NewLine-------------------------------18788734234--Di2015NewLine
11677923Di2015UniqueSeparatorpublic string net_adapters() Di2015NewLine{ Di2015NewLine    string value = string.Empty; Di2015NewLine    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces()) Di2015NewLine    { Di2015NewLine        // bug in your original code right here is `=`Di2015NewLine        // you proably meant to do something like value += ", " + nic.NameDi2015NewLine        // which would not work well with listbox Items collectionDi2015NewLine        value = nic.Name; Di2015NewLine    } Di2015NewLine    return value; Di2015NewLine} Di2015NewLine
11677923Di2015UniqueSeparatorpublic System.Collections.Generic.List<String> net_adapters() Di2015NewLine{ Di2015NewLine    List<String> values = new List<String>();Di2015NewLine    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces()) Di2015NewLine    { Di2015NewLine        values.Add(nic.Name);Di2015NewLine    } Di2015NewLine    return values; Di2015NewLine}Di2015NewLine
11677923Di2015UniqueSeparatorIEnumerable<T>
11677923Di2015UniqueSeparatoryield return
11677923Di2015UniqueSeparatorpublic IEnumerable<String> net_adapters() Di2015NewLine{ Di2015NewLine    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces()) Di2015NewLine    { Di2015NewLine        yield return nic.Name;Di2015NewLine    } Di2015NewLine    yield break;Di2015NewLine}Di2015NewLine
11677923Di2015UniqueSeparatorvar obj = new Adapters();    Di2015NewLinevar values = obj.net_adapters();Di2015NewLinelistBox1.ItemsSource = values;Di2015NewLine
11677936Di2015UniqueSeparator// Add the target entity     Di2015NewLineEntity myStubbedEntity = new Entity("account");Di2015NewLine// set properties on myStubbedEntity specific for this test...Di2015NewLineParameterCollection inputParameters = new ParameterCollection();     Di2015NewLineinputParameters.Add("Target", myStubbedEntity);     Di2015NewLinepipelineContext.Stub(x => x.InputParameters).Return(inputParameters); Di2015NewLine
11677936Di2015UniqueSeparatorpublic class MyPluginStepDi2015NewLine{Di2015NewLine    ITaskRepository taskRepository;Di2015NewLine    public MyPluginStep(ITaskRepository repo)Di2015NewLine    {Di2015NewLine        taskRepository = repo;Di2015NewLine    }Di2015NewLine    public MyPluginStep()Di2015NewLine    {Di2015NewLine        taskRepository = new DefaultTaskRepositoryImplementation();Di2015NewLine    }Di2015NewLine    public MyExecuteMethod(mypluginstepparams){Di2015NewLine        Task task = taskRepository.GetTaskByContact(...);Di2015NewLine    }Di2015NewLine
11677988Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLinesb.AppendLine("using System;");Di2015NewLinesb.AppendLine();Di2015NewLinesb.AppendLine("namespace Foo.Bar");Di2015NewLinesb.AppendLine("{");Di2015NewLinesb.AppendLine("\\tpublic class Baz");Di2015NewLinesb.AppendLine("\\t{");Di2015NewLinesb.AppendLine("\\t\\tpublic static void Main()");Di2015NewLinesb.AppendLine("\\t\\t{");Di2015NewLinesb.AppendLine("\\t\\t\\tString[] a = new[]{\\"foo\\",\\"bar\\",\\"baz\\"};");Di2015NewLinesb.AppendLine("\\t\\t\\tforeach (var b in a) Console.WriteLine(b);");Di2015NewLinesb.AppendLine("\\t\\t}");Di2015NewLinesb.AppendLine("\\t}");Di2015NewLinesb.AppendLine("}");Di2015NewLineDi2015NewLineConsole.Write(sb.ToString());Di2015NewLineConsole.WriteLine();Di2015NewLineDi2015NewLineString[] keywords = new String[]{Di2015NewLine  "using", "namespace", "for", "if", "else", "foreach"Di2015NewLine};Di2015NewLineString code = sb.ToString();Di2015NewLineforeach (String keyword in keywords){Di2015NewLine  String pattern = @"(?<=^|[\\s\\.\\(])(" + Regex.Escape(keyword) + @")(?=[\\s\\.\\)])";Di2015NewLine  String replacement = "<span class='keyword'>$1</span>";Di2015NewLine  code = Regex.Replace(code, pattern, replacement);Di2015NewLine}Di2015NewLineConsole.WriteLine(code);Di2015NewLine
11677988Di2015UniqueSeparator<span class='keyword'>using</span> System;Di2015NewLineDi2015NewLine<span class='keyword'>namespace</span> Foo.BarDi2015NewLine{Di2015NewLine  public class BazDi2015NewLine  {Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine      String[] a = new[]{"foo","bar","baz"};Di2015NewLine      <span class='keyword'>foreach</span> (var b in a) Console.WriteLine(b);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
11677988Di2015UniqueSeparatorRegex.Escape
11677988Di2015UniqueSeparatorforeshadow
11677988Di2015UniqueSeparator^|
11678027Di2015UniqueSeparatorvar customer = xDoc.Descendants("Customer")Di2015NewLine        .Select(n => newDi2015NewLine        {Di2015NewLine            Firstname = n.Element("FirstName").Value,Di2015NewLine            Surname = n.Element("LastName").Value,Di2015NewLine            HireFromDate = n.Element("CustomerHireDate")Di2015NewLine                            .Descendents("HireDate").First()Di2015NewLine                            .Descendents("HireFromDate").First().Value,Di2015NewLine            HireFromDate = n.Element("CustomerHireDate")Di2015NewLine                            .Descendents("HireDate").First()Di2015NewLine                            .Descendents("HireToDate").First().ValueDi2015NewLine        })Di2015NewLine        .ToList();Di2015NewLine
11678041Di2015UniqueSeparatorgroupGridView.ItemsSource = groupedItemsViewSource.View.CollectionGroups;Di2015NewLine
11678172Di2015UniqueSeparatorpage_load
11678172Di2015UniqueSeparatorEnableViewState
11678172Di2015UniqueSeparatortrue
11678190Di2015UniqueSeparatorif
11678190Di2015UniqueSeparatornumber = BigInteger.Log(n)/BigInteger.Log(2) - 0.9;Di2015NewLine
11678190Di2015UniqueSeparatorBigInteger.Log(x)
11678190Di2015UniqueSeparatordouble
11678190Di2015UniqueSeparatorif (n.IsPowerOfTwo) {Di2015NewLine    return n/2;Di2015NewLine}Di2015NewLine
11678190Di2015UniqueSeparatorelse
11678190Di2015UniqueSeparatorn
11678190Di2015UniqueSeparatorBigInteger.Log(n) / BigInteger.Log(2)Di2015NewLine
11678190Di2015UniqueSeparatorbig
11678190Di2015UniqueSeparatorn
11678190Di2015UniqueSeparatorBigInteger.Log(n, 2.0)
11678203Di2015UniqueSeparatorDatabase
11678203Di2015UniqueSeparatorSelect Cast(IsNull(Downloaded, 0) as bit) as Downloaded From TableNameDi2015NewLine
11678203Di2015UniqueSeparatorBusiness Logic Layer
11678203Di2015UniqueSeparatorConvert
11678203Di2015UniqueSeparatorDownloaded
11678203Di2015UniqueSeparatorfalse
11678203Di2015UniqueSeparatorNull
11678203Di2015UniqueSeparatorprotected void GridView_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    CheckBox c = e.Row.FindControl("chkDownloaded");Di2015NewLine    (((YourClassName)e.Row.DataItem).YourPropertyName) == null ? false : ((YourClassName)e.Row.DataItem).YourPropertyName;Di2015NewLine}Di2015NewLine
11678356Di2015UniqueSeparatorint name = Di2015NewLine    Int16.Parse(((SomeObectWithATextProperty)cboDataSets.SelectedItem).Text);Di2015NewLine
11678356Di2015UniqueSeparatorint name = Di2015NewLine    Int16.Parse(((string)cboDataSets.SelectedItem));Di2015NewLine
11678356Di2015UniqueSeparatorint name = Di2015NewLine    Int16.Parse(cboDataSets.SelectedItem.ToString());Di2015NewLine
11678409Di2015UniqueSeparatorFunc<Stock, bool> compileTime = (Stock d) => (d.Symbol == "MSFT" && d.CloseDate.Millisecond > 0) || d.Price > 0;Di2015NewLine
11678409Di2015UniqueSeparatorvar line5 = Expression.OrElse(line4, line3);Di2015NewLine
11678409Di2015UniqueSeparatorvar line5 = Expression.OrElse(line3, line4);Di2015NewLine
11678433Di2015UniqueSeparatorMyType inverse = mtGroup1.UsedBitsInverse();Di2015NewLine
11678433Di2015UniqueSeparatorMyType t = UsedBitsOfMyType & ~mtGroup1;Di2015NewLine
11678481Di2015UniqueSeparatorDateTime.UtcNow.Hour
11678509Di2015UniqueSeparatorResponse.Redirect("schoolsearchresult2.aspx?search=" + qry);Di2015NewLine
11678509Di2015UniqueSeparatorResponse.Redirect("schoolsearchresult2.aspx?search=" Di2015NewLine    + HttpServerUtility.UrlEncode(qry));Di2015NewLine
11678520Di2015UniqueSeparatorprivate void removeFields(JToken token, string[] fields)Di2015NewLine{Di2015NewLine    JContainer container = token as JContainer;Di2015NewLine    if (container == null) return;Di2015NewLineDi2015NewLine    List<JToken> removeList = new List<JToken>();Di2015NewLine    foreach (JToken el in container.Children())Di2015NewLine    {Di2015NewLine        JProperty p = el as JProperty;Di2015NewLine        if (p != null && fields.Contains(p.Name))Di2015NewLine        {Di2015NewLine            removeList.Add(el);Di2015NewLine        }Di2015NewLine        removeFields(el, fields);Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (JToken el in removeList)Di2015NewLine    {Di2015NewLine        el.Remove();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11678572Di2015UniqueSeparatorusing Microsoft.Win32
11678572Di2015UniqueSeparatorpublic WindowsConsoleForm1();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        textBox1.Text = Application.UserAppDataRegistry.GetValue("example").ToString();Di2015NewLine    }Di2015NewLine    catch { }Di2015NewLine
11678572Di2015UniqueSeparatortextbox1.text = Path.GetDirectoryName(saveFileDialoge1.FileName);
11678572Di2015UniqueSeparatorApplication.UserAppDataRegistry.SetValue("example", textbox1.text);
11678652Di2015UniqueSeparatorif (e.KeyCode == Keys.Down)Di2015NewLine{Di2015NewLine    if (listView1.Visible && listView1.Items.Count > 0)Di2015NewLine    {Di2015NewLine        index = listView1.SelectedIndices[0];  Di2015NewLine        index = index - 1;Di2015NewLine        this.listView1.Items[index].Selected = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11678652Di2015UniqueSeparatorIndexOutOfBound
11678681Di2015UniqueSeparatortask.Wait()
11678681Di2015UniqueSeparatortask.Wait()
11678789Di2015UniqueSeparatorpublic static int Injector(string parameter)Di2015NewLine{Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    var mainForm = Application.OpenForms.OfType<Form>().FirstOrDefault(form => form.GetType().FullName.EndsWith("MainForm"));Di2015NewLineDi2015NewLine    var builder = new StringBuilder();Di2015NewLine    builder.AppendFormat("process: {0}\\r\\n\\r\\n", Application.ExecutablePath);Di2015NewLine    builder.AppendFormat("type: {0}\\r\\n", mainForm.GetType().FullName);Di2015NewLine    foreach (var field in mainForm.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))Di2015NewLine    {Di2015NewLine      builder.AppendFormat("field {0}: {1}\\r\\n", field.Name, field.GetValue(mainForm));Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    new Form()Di2015NewLine    {Di2015NewLine      Controls = Di2015NewLine      {Di2015NewLine        new TextBoxDi2015NewLine        {Di2015NewLine          Text = builder.ToString(),Di2015NewLine          Multiline = true,Di2015NewLine          Dock = DockStyle.FillDi2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine    .ShowDialog();Di2015NewLine  }Di2015NewLine  catch (Exception exc)Di2015NewLine  {Di2015NewLine    MessageBox.Show(exc.ToString());Di2015NewLine  }Di2015NewLine  return 0;      Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine  var process = System.Diagnostics.Process.GetProcessesByName("PaintDotNet").FirstOrDefault();Di2015NewLineDi2015NewLine  var processHandle = OpenProcess(ProcessAccessFlags.All, false, process.Id);Di2015NewLineDi2015NewLine  var proxyPath = System.IO.Path.Combine(System.Windows.Forms.Application.StartupPath, "NInjector.dll");Di2015NewLineDi2015NewLine  var pathBytes = System.Text.Encoding.ASCII.GetBytes(proxyPath);Di2015NewLineDi2015NewLine  var remoteBuffer = VirtualAllocEx(processHandle, IntPtr.Zero, (uint)pathBytes.Length, AllocationType.Commit, MemoryProtection.ReadWrite);Di2015NewLine  WriteProcessMemory(process.Handle, remoteBuffer, pathBytes, (uint)pathBytes.Length, IntPtr.Zero);Di2015NewLineDi2015NewLineDi2015NewLine  var remoteThread = CreateRemoteThread(processHandle, IntPtr.Zero, 0, GetProcAddress(GetModuleHandle("kernel32"), "LoadLibraryA") , remoteBuffer, 0, IntPtr.Zero);Di2015NewLineDi2015NewLine  WaitForSingleObject(remoteThread, unchecked((uint)-1)); Di2015NewLineDi2015NewLine  CloseHandle(remoteThread);Di2015NewLineDi2015NewLine}Di2015NewLine
11678789Di2015UniqueSeparator#include "MSCorEE.h"Di2015NewLine#pragma comment  (lib, "MSCorEE")Di2015NewLineDi2015NewLinevoid StartTheDotNetRuntime()Di2015NewLine{Di2015NewLine    MessageBox(0, L"Started", L"proxy", 0);Di2015NewLineDi2015NewLine    ICLRRuntimeHost *pClrHost = NULL;Di2015NewLine    HRESULT hr = CorBindToRuntimeEx(Di2015NewLine        NULL, L"wks", 0, CLSID_CLRRuntimeHost,Di2015NewLine        IID_ICLRRuntimeHost, (PVOID*)&pClrHost);Di2015NewLineDi2015NewLineDi2015NewLine    hr = pClrHost->Start();Di2015NewLineDi2015NewLineDi2015NewLine    DWORD dwRet = 0;Di2015NewLine    hr = pClrHost->ExecuteInDefaultAppDomain(Di2015NewLine        L"bla-bla\\\\NInject.exe",Di2015NewLine        L"NInject.NInject_Program", L"Injector", L"MyParameter", &dwRet);Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    hr = pClrHost->Stop();Di2015NewLineDi2015NewLine    pClrHost->Release();Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineBOOL APIENTRY DllMain( HMODULE hModule,Di2015NewLine                       DWORD  ul_reason_for_call,Di2015NewLine                       LPVOID lpReservedDi2015NewLine                     )Di2015NewLine{Di2015NewLine    switch (ul_reason_for_call)Di2015NewLine    {Di2015NewLine    case DLL_PROCESS_ATTACH:Di2015NewLine    StartTheDotNetRuntime();Di2015NewLine    break;Di2015NewLine    case DLL_THREAD_ATTACH:Di2015NewLine    break;Di2015NewLine    case DLL_THREAD_DETACH:Di2015NewLine    case DLL_PROCESS_DETACH:Di2015NewLineDi2015NewLineDi2015NewLine        break;Di2015NewLine    }Di2015NewLine    return TRUE;Di2015NewLine}Di2015NewLine
11678789Di2015UniqueSeparatorprocess: C:\\Program Files\\Paint.NET\\PaintDotNet.exeDi2015NewLineDi2015NewLinetype: PaintDotNet.Dialogs.MainFormDi2015NewLinefield appWorkspace: PaintDotNet.Controls.AppWorkspaceDi2015NewLinefield defaultButton: System.Windows.Forms.Button, Text: Di2015NewLinefield floaters: PaintDotNet.Dialogs.FloatingToolForm[]Di2015NewLinefield floaterOpacityTimer:  [System.Windows.Forms.Timer], Interval: 25Di2015NewLinefield deferredInitializationTimer: Di2015NewLinefield components: System.ComponentModel.ContainerDi2015NewLinefield killAfterInit: FalseDi2015NewLinefield singleInstanceManager: PaintDotNet.SystemLayer.SingleInstanceManagerDi2015NewLinefield queuedInstanceMessages: System.Collections.Generic.List`1[System.String]Di2015NewLinefield processingOpen: FalseDi2015NewLinefield scrollPosition: {X=0,Y=0}Di2015NewLine
11678945Di2015UniqueSeparator  var dpd = DependencyPropertyDescriptor.FromProperty(YourTextBoxClass.TextProperty, typeof(YourTextBoxClass));Di2015NewLine if (dpd != null)Di2015NewLine {Di2015NewLine     dpd.AddValueChanged(this, ThisIsCalledWhenPropertyIsChanged);Di2015NewLine }    Di2015NewLine
11678945Di2015UniqueSeparatorprivate void ThisIsCalledWhenPropertyIsChanged(object sender, EventArgs e) { }Di2015NewLine
11679043Di2015UniqueSeparatorwebBrowser1.ScrollBarsEnabled = false;Di2015NewLine
11679043Di2015UniqueSeparatorvoid webBrowser1_DocumentCompleted(object sender, Di2015NewLine                                   WebBrowserDocumentCompletedEventArgs e) {Di2015NewLine  webBrowser1.Document.Body.Style = "overflow:hidden";Di2015NewLine}Di2015NewLine
11679061Di2015UniqueSeparatorif(Obj1.DueDate.HasValue)Di2015NewLine{Di2015NewLine    litDate.Text = Obj1.DueDate.Value.ToString("d");Di2015NewLine}Di2015NewLine
11679218Di2015UniqueSeparatorSetValue
11679218Di2015UniqueSeparatorDependencyProperty SomeProperty = DependencyProperty.Register(Di2015NewLine    "Some",Di2015NewLine    propertyType,Di2015NewLine    ownerType,Di2015NewLine    new FrameworkPropertyMetadata(defaultValue, OnSomePropertyChanged));Di2015NewLineDi2015NewLinestatic void OnSomePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e) {Di2015NewLine    // "d" is your instance here, cast it to the required typeDi2015NewLine}Di2015NewLine
11679334Di2015UniqueSeparatorprivate void ReasonsLoaded(object sender, wcGetReasonsCompletedEventArgs e)Di2015NewLine{Di2015NewLine    reasonData = new ObservableCollection<ReasonData>(e.Result);Di2015NewLine}Di2015NewLine
11679334Di2015UniqueSeparatorObservableCollection<ReasonData>
11679334Di2015UniqueSeparatorReasonData[]
11679368Di2015UniqueSeparator XDocument input = XDocument.Load( Server.MapPath("~/App_Data/data.xml"));Di2015NewLine    XDocument data =Di2015NewLine        new XDocument(Di2015NewLine            new XElement("POSTBACK",Di2015NewLine                from node in input.Root.Elements()Di2015NewLine                orderby Convert.ToInt32( node.Attribute("id").Value)  ascendingDi2015NewLine                select node));Di2015NewLine
11679372Di2015UniqueSeparatorpublic static class BigMathDi2015NewLine{Di2015NewLine    // digits = number of digits to calculate;Di2015NewLine    // iterations = accuracy (higher the number the more accurate it will be and the longer it will take.)Di2015NewLine    public static BigInteger GetPi(int digits, int iterations)Di2015NewLine    {Di2015NewLine        return 16 * ArcTan1OverX(5, digits).ElementAt(iterations)Di2015NewLine            - 4 * ArcTan1OverX(239, digits).ElementAt(iterations);Di2015NewLine    }Di2015NewLineDi2015NewLine    //arctan(x) = x - x^3/3 + x^5/5 - x^7/7 + x^9/9 - ...Di2015NewLine    public static IEnumerable<BigInteger> ArcTan1OverX(int x, int digits)Di2015NewLine    {Di2015NewLine        var mag = BigInteger.Pow(10, digits);Di2015NewLine        var sum = BigInteger.Zero;Di2015NewLine        bool sign = true;Di2015NewLine        for (int i = 1; true; i += 2)Di2015NewLine        {Di2015NewLine            var cur = mag / (BigInteger.Pow(x, i) * i);Di2015NewLine            if (sign)Di2015NewLine            {Di2015NewLine                sum += cur;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                sum -= cur;Di2015NewLine            }Di2015NewLine            yield return sum;Di2015NewLine            sign = !sign;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11679457Di2015UniqueSeparatorresult
11679457Di2015UniqueSeparator    public void ReturnHire(string carregistration, string hirefromdate, string hiretodate) Di2015NewLine    { Di2015NewLine        if (customermembers.Any(c => c.CustomerCarType.Any(n => String.Equals(n.CarRegistration, carregistration)))Di2015NewLine        { Di2015NewLine            customermembers.ForEach(c => c.CustomerHireDate.RemoveAll(cs => cs.HireFromDate == hirefromdate && cs.HireToDate == hiretodate)); Di2015NewLine            customermembers.ForEach(c => c.CustomerCarType.RemoveAll(cs => cs.CarRegistration == carregistration)); Di2015NewLine        } Di2015NewLine    } Di2015NewLine
11679457Di2015UniqueSeparatorAny
11679457Di2015UniqueSeparatorresult
11679457Di2015UniqueSeparator    public void ReturnHire(string carregistration, string hirefromdate, string hiretodate) Di2015NewLine    { Di2015NewLine        var result = customermembers.Where(c => c.CustomerCarType.Any(n => String.Equals(n.CarRegistration, carregistration));Di2015NewLine        foreach (var customermember in result)Di2015NewLine        { Di2015NewLine            customermember.CustomerHireDate.RemoveAll(cs => cs.HireFromDate == hirefromdate && cs.HireToDate == hiretodate); Di2015NewLine            customermember.CustomerCarType.RemoveAll(cs => cs.CarRegistration == carregistration); Di2015NewLine        } Di2015NewLine    }Di2015NewLine
11679457Di2015UniqueSeparatorWhere
11679457Di2015UniqueSeparatorresult
11679667Di2015UniqueSeparatorBlockingCollection<T>
11679717Di2015UniqueSeparator        Dictionary<string, List<string[]>> allPairs = new Dictionary<string, List<string[]>>();Di2015NewLineDi2015NewLine        foreach (string currentLine in allLines)Di2015NewLine        {Di2015NewLine            string[] lineContent = currentLine.Split(" "); //or something like it. Maybe it should be a TABDi2015NewLine            string[] newPair = new string[2];Di2015NewLine            newPair[0] = lineContent[1];Di2015NewLine            newPair[1] = lineContent[2];Di2015NewLineDi2015NewLine            if (allPairs[lineContent[0]] == null)Di2015NewLine            {Di2015NewLine                allPairs[lineContent[0]] = new List<string[]>();Di2015NewLine            }Di2015NewLineDi2015NewLine            allPairs[lineContent[0]].Add(newPair);Di2015NewLine        }Di2015NewLine
11679735Di2015UniqueSeparatordata
11679815Di2015UniqueSeparatorlong y = Int64.MaxValue; if (x < y)...
11679815Di2015UniqueSeparatorif (x < Int64.MaxValue)
11679815Di2015UniqueSeparatorlong y
11679887Di2015UniqueSeparatorMath.abs(lights[n].X - position.X) == Math.abs(lights[n].Y - position.Y)Di2015NewLine
11679914Di2015UniqueSeparator                    session.SaveOrUpdate(l);Di2015NewLine
11679914Di2015UniqueSeparatorSaveOrUpdate
11679914Di2015UniqueSeparatorl
11679914Di2015UniqueSeparatorFlush
11679914Di2015UniqueSeparatorCommit
11679914Di2015UniqueSeparatorFlush
11679914Di2015UniqueSeparator            using (ITransaction transaction = session.BeginTransaction())Di2015NewLine            {Di2015NewLineDi2015NewLine                tryDi2015NewLine                {Di2015NewLine                    // Business Entity Saved in Tag1/Tag2 TableDi2015NewLine                    session.SaveOrUpdate(l);Di2015NewLine                    session.Flush();  // <<== Write all of our changes so farDi2015NewLine                }Di2015NewLine                catch (Exception ex)Di2015NewLine                {Di2015NewLine                    ErrorLogExceptionHandler.ErrorLog(ref ex);Di2015NewLine                    throw new Exception("Unable to save data");Di2015NewLine                }Di2015NewLine
11679956Di2015UniqueSeparatorint newValue = (int)(oldValue / 50) * 50;Di2015NewLine
11679956Di2015UniqueSeparatorint newValue = (int)((oldValue + 25) / 50) * 50;Di2015NewLine
11680029Di2015UniqueSeparatorclass MyData : Dictionary<string, Dictionary<int, List<string>>>Di2015NewLine{   Di2015NewLine}Di2015NewLine
11680029Di2015UniqueSeparatortypeof
11680029Di2015UniqueSeparatoris
11680029Di2015UniqueSeparatorusing
11680029Di2015UniqueSeparatorusing ListDict = Dictionary<string, Dictionary<int, List<string>>>();Di2015NewLineusing PolyDict = Dictionary<Tuple<string, string>, List<object>>();Di2015NewLine
11680029Di2015UniqueSeparatorList<Foo>
11680029Di2015UniqueSeparatorFooCollection : List<Foo>
11680037Di2015UniqueSeparatorvoid OnClick(object sender, KeyEventArgs e) {Di2015NewLine    PictureEdit editor = (PictureEdit)sender;Di2015NewLine}Di2015NewLineDi2015NewLineSub OnClick(ByVal sender As Object, ByVal e As KeyEventArgs)Di2015NewLine    Dim editor as PictureEdit = CType(sender, PictureEdit)Di2015NewLineEnd SubDi2015NewLine
11680516Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    Method1("{0},{1},{2},{3}","Can","I","do","this").Dump();Di2015NewLine}Di2015NewLineDi2015NewLineString Method1(string format, params object[] list)Di2015NewLine{Di2015NewLine    return String.Format(format,list);Di2015NewLine}Di2015NewLine
11680516Di2015UniqueSeparatorCan,I,do,thisDi2015NewLine
11680557Di2015UniqueSeparator(RegistryKey).GetAccessControl(AccessControlSections.All)
11680557Di2015UniqueSeparator(RegistryKey).GetAccessControl(AccessControlSections.Access)
11680557Di2015UniqueSeparatorAccess
11680557Di2015UniqueSeparator(RegistryKey).GetAccessControl(AccessControlSections.All)
11680557Di2015UniqueSeparator    [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]Di2015NewLine    internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll", ExactSpelling = true)]Di2015NewLine    internal static extern IntPtr GetCurrentProcess();Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]Di2015NewLine    internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtrDi2015NewLine    phtok);Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll", SetLastError = true)]Di2015NewLine    internal static extern bool LookupPrivilegeValue(string host, string name,Di2015NewLine    ref long pluid);Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential, Pack = 1)]Di2015NewLine    internal struct TokPriv1LuidDi2015NewLine    {Di2015NewLine        public int Count;Di2015NewLine        public long Luid;Di2015NewLine        public int Attr;Di2015NewLine    }Di2015NewLineDi2015NewLine    internal const int SE_PRIVILEGE_ENABLED = 0x00000002;Di2015NewLine    internal const int TOKEN_QUERY = 0x00000008;Di2015NewLine    internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;Di2015NewLine    internal const string SeSecurity = "SeSecurityPrivilege";Di2015NewLineDi2015NewLine    private bool SetPriv()Di2015NewLine   {Di2015NewLine       tryDi2015NewLine       {Di2015NewLine           bool retVal;Di2015NewLine           TokPriv1Luid tp;Di2015NewLine           IntPtr hproc = GetCurrentProcess();Di2015NewLine           IntPtr htok = IntPtr.Zero;Di2015NewLine           retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);Di2015NewLine           tp.Count = 1;Di2015NewLine           tp.Luid = 0;Di2015NewLine           tp.Attr = SE_PRIVILEGE_ENABLED;Di2015NewLine           retVal = LookupPrivilegeValue(null, SeSecurity, ref tp.Luid);Di2015NewLine           retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);Di2015NewLine           return retVal;Di2015NewLine       }Di2015NewLine       catch (Exception ex)Di2015NewLine       {Di2015NewLine           throw;Di2015NewLine           return false; Di2015NewLine       }Di2015NewLineDi2015NewLine   }Di2015NewLine
11680585Di2015UniqueSeparatorfileName = System.IO.Path.GetFileName(URLBox.Text);Di2015NewLine
11680585Di2015UniqueSeparatorfileName
11680585Di2015UniqueSeparator"watch?v=pqaARDsiJv4"
11680647Di2015UniqueSeparatorLoadTestSuiteMenuStrip(args);Di2015NewLine
11680647Di2015UniqueSeparatorInvoke(new Action<string[]>(LoadTestSuiteMenuStrip), new object[] { args });Di2015NewLine
11680665Di2015UniqueSeparatorList
11680665Di2015UniqueSeparatorList<T>
11680786Di2015UniqueSeparator<elmah>
11680786Di2015UniqueSeparator   <elmah>Di2015NewLine      <security allowRemoteAccess="true"/>Di2015NewLine   </elmah>Di2015NewLine
11680806Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLineclass MyComponent : Component {Di2015NewLineDi2015NewLine    public bool ShowDialog() {Di2015NewLine        using (var dlg = new WindowsFormsApplication1.Form2()) {Di2015NewLine            if (dlg.ShowDialog() == DialogResult.OK) {Di2015NewLine                // Retrieve propertiesDi2015NewLine                //...Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            else return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Add your own properties hereDi2015NewLine    //...Di2015NewLineDi2015NewLine}Di2015NewLine
11680837Di2015UniqueSeparator         string input = HttpContext.Current.Request.QueryString["term"];Di2015NewLine
11680837Di2015UniqueSeparator              [WebMethod]Di2015NewLinepublic static List<string> GetAutoCompleteData(string Car)Di2015NewLine{Di2015NewLine    string input = HttpContext.Current.Request.QueryString["term"];Di2015NewLine    List<string> result = new List<string>();Di2015NewLine    using (SqlConnection con = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["CarsConnectionString"].ConnectionString))Di2015NewLine    {Di2015NewLine        using (SqlCommand cmd = new SqlCommand("select DISTINCT Car from T_Car where Car like '%'+ @SearchText +'%", con))Di2015NewLine        {Di2015NewLine            con.Open();Di2015NewLine            cmd.Parameters.AddWithValue("@SearchText", input);Di2015NewLine            SqlDataReader dr = cmd.ExecuteReader();Di2015NewLine            while (dr.Read())Di2015NewLine            {Di2015NewLine                result.Add(dr["Car"].ToString());Di2015NewLine            }Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11680837Di2015UniqueSeparator    $(".ui-autocomplete").autocomplete({Di2015NewLine        source: "Admin_home.aspx/GetAutoCompleteData",Di2015NewLine        select: function (event, ui) { }Di2015NewLine      });Di2015NewLine
11680837Di2015UniqueSeparator         <asp:Textbox ID="query" class="ui.autocomplete">Di2015NewLine
11680837Di2015UniqueSeparator          $(".ui-autocomplete").autocomplete({Di2015NewLine
11680837Di2015UniqueSeparator         <asp:Textbox ID="query" class="ui-autocomplete">Di2015NewLine
11680837Di2015UniqueSeparator        using (SqlCommand cmd = new SqlCommand("select DISTINCT Car from T_Car where Car like '%'+ @SearchText +'%", con))Di2015NewLine
11680837Di2015UniqueSeparator         using (SqlCommand cmd = new SqlCommand("select DISTINCT Car from T_Car where Car like '%'+ @SearchText +'%' ", con))Di2015NewLine
11680892Di2015UniqueSeparatorpublic event MyEventHandler OnOperationComplete = (sender, args) => { return null; };Di2015NewLine
11680892Di2015UniqueSeparatorpublic delegate void MyEventHandler(object sender, MyEventArgs e);Di2015NewLine
11680892Di2015UniqueSeparatorpublic delegate EventHandler MyEventHandler(object sender, MyEventArgs e);Di2015NewLine
11680974Di2015UniqueSeparatorstring[] lines = System.IO.File.ReadAllLines(@"C:\\file.txt");Di2015NewLineDi2015NewLineint count = 0;Di2015NewLineforeach (string line in lines)Di2015NewLine{Di2015NewLine    count++;Di2015NewLine    if (line.indexOf("I'm a string") > -1) {Di2015NewLine       // found itDi2015NewLine    }    Di2015NewLineDi2015NewLine}Di2015NewLine
11681036Di2015UniqueSeparatorprotected void submitDisplay_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    displayText.InnerHtml = "";Di2015NewLineDi2015NewLine    int index = folderNames.IndexOf(DropDownList.Text); //drop down boxDi2015NewLineDi2015NewLine    foreach (Char c in textBox.Text)Di2015NewLine    {Di2015NewLine        if(c == ' ')Di2015NewLine        {Di2015NewLine            displayText.InnerHtml += "     ";Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            displayText.InnerHtml += "<img src = 'Alphabets/" + folderNames[index] + "/" + filePrefixes[index] + c + fileSuffixes[index] + ".gif' />";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11681127Di2015UniqueSeparatoruser
11681127Di2015UniqueSeparatoruser
11681127Di2015UniqueSeparator cmd.Parameters.Add("@user", SqlDbType.VarChar, 50).Value = user ?? DBNull.Value;Di2015NewLine
11681127Di2015UniqueSeparator cmd.Parameters.Add("@user", SqlDbType.VarChar, 50).Value = user != null ? user : DBNull.Value;Di2015NewLine
11681127Di2015UniqueSeparatorstring.Empty
11681127Di2015UniqueSeparatorDBNull.Value
11681127Di2015UniqueSeparatorDBNull
11681144Di2015UniqueSeparatorKnownTypeAttribute
11681144Di2015UniqueSeparator[KnownType(typeof(AspError))]Di2015NewLinepublic bool MyMethod(out IMyError error)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11681144Di2015UniqueSeparatorAspError
11681195Di2015UniqueSeparatorray = s + u * d
11681195Di2015UniqueSeparators
11681195Di2015UniqueSeparatord
11681195Di2015UniqueSeparator[1, 1]
11681195Di2015UniqueSeparator[1, -1]
11681195Di2015UniqueSeparator[1, 0]
11681195Di2015UniqueSeparator[0, 1]
11681195Di2015UniqueSeparator|x1 - x2| + |y1 - y2|
11681195Di2015UniqueSeparatorray1 = s1 + u1 * d1Di2015NewLineray2 = s2 + u2 * d2Di2015NewLine
11681195Di2015UniqueSeparatorray1x = s1x + u1 * d1xDi2015NewLineray1y = s1y + u1 * d1yDi2015NewLineray2x = s2x + u2 * d2xDi2015NewLineray2y = s2y + u2 * d2yDi2015NewLine
11681195Di2015UniqueSeparatorray1x = ray2x
11681195Di2015UniqueSeparatorray1y = ray2y
11681195Di2015UniqueSeparators1x + u1 * d1x = s2x + u2 * d2xDi2015NewLines1y + u1 * d1y = s2y + u2 * d2yDi2015NewLine
11681195Di2015UniqueSeparatoru2
11681195Di2015UniqueSeparatoru2 = (s1x - s2x + u1 * d1x) / d2xDi2015NewLineu2 = (s1y - s2y + u1 * d1y) / d2yDi2015NewLineDi2015NewLine(s1x - s2x + u1 * d1x) / d2x = (s1y - s2y + u1 * d1y) / d2yDi2015NewLine(s1x - s2x + u1 * d1x) * d2y = (s1y - s2y + u1 * d1y) * d2xDi2015NewLine
11681195Di2015UniqueSeparatoru1
11681195Di2015UniqueSeparator(s1x - s2x) * d2y + u1 * d1x * d2y = (s1y - s2y) * d2x + u1 * d1y * d2xDi2015NewLineu1 * (d1x * d2y - d1y * d2x) = (s1y - s2y) * d2x - (s1x - s2x) * d2yDi2015NewLineDi2015NewLineu1 = ((s1y - s2y) * d2x - (s1x - s2x) * d2y) / (d1x * d2y - d1y * d2x)Di2015NewLine
11681195Di2015UniqueSeparatoru2
11681195Di2015UniqueSeparatoru2 = ((s2y - s1y) * d1x - (s2x - s1x) * d1y) / (d2x * d1y - d2y * d1x)Di2015NewLine
11681195Di2015UniqueSeparatoru1
11681195Di2015UniqueSeparatoru2
11681195Di2015UniqueSeparators1
11681195Di2015UniqueSeparators2
11681195Di2015UniqueSeparatord1
11681195Di2015UniqueSeparatord2
11681195Di2015UniqueSeparatoru1
11681195Di2015UniqueSeparatoru2
11681195Di2015UniqueSeparatorray
11681195Di2015UniqueSeparatoru1
11681195Di2015UniqueSeparatoru2
11681195Di2015UniqueSeparator[1, 0]
11681195Di2015UniqueSeparator[0, 1]
11681286Di2015UniqueSeparatorint total;Di2015NewLine
11681286Di2015UniqueSeparatorint total = 0;Di2015NewLine
11681286Di2015UniqueSeparatortotal += num;Di2015NewLine
11681286Di2015UniqueSeparatortotal = total + num;Di2015NewLine
11681449Di2015UniqueSeparatorpublic static JToken Rename(JToken json, Dictionary<string, string> map)Di2015NewLine{Di2015NewLine    return Rename(json, name => map.ContainsKey(name) ? map[name] : name);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static JToken Rename(JToken json, Func<string, string> map)Di2015NewLine{Di2015NewLine    JProperty prop = json as JProperty;Di2015NewLine    if (prop != null) Di2015NewLine    {Di2015NewLine        return new JProperty(map(prop.Name), Rename(prop.Value, map));Di2015NewLine    }Di2015NewLineDi2015NewLine    JArray arr = json as JArray;Di2015NewLine    if (arr != null)Di2015NewLine    {Di2015NewLine        var cont = arr.Select(el => Rename(el, map));Di2015NewLine        return new JArray(cont);Di2015NewLine    }Di2015NewLineDi2015NewLine    JObject o = json as JObject;Di2015NewLine    if (o != null)Di2015NewLine    {Di2015NewLine        var cont = o.Properties().Select(el => Rename(el, map));Di2015NewLine        return new JObject(cont);Di2015NewLine    }Di2015NewLineDi2015NewLine    return json;Di2015NewLine}Di2015NewLine
11681449Di2015UniqueSeparatorvar s = @"{ ""A"": { ""B"": 1, ""Test"": ""123"", ""C"": { ""Test"": [ ""1"", ""2"", ""3"" ] } } }";Di2015NewLinevar json = JObject.Parse(s);Di2015NewLineDi2015NewLinevar renamed = Rename(json, name => name == "Test" ? "TestRenamed" : name);Di2015NewLinerenamed.ToString().Dump();  // LINQPad outputDi2015NewLineDi2015NewLinevar dict = new Dictionary<string, string> { { "Test", "TestRenamed"} };Di2015NewLinevar renamedDict = Rename(json, dict);Di2015NewLinerenamedDict.ToString().Dump();  // LINQPad outputDi2015NewLine
11681617Di2015UniqueSeparatorvar offsetTimeStamp = new System.TimeSpan(0,45,0).Add(ss.Elapsed)Di2015NewLine
11681644Di2015UniqueSeparator        DataGridViewButtonColumn buttonCol = new DataGridViewButtonColumn();Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            DataGridViewColumn col = new DataGridViewTextBoxColumn();Di2015NewLine            col.HeaderText = "Dosage";Di2015NewLine            col.Width = 80;Di2015NewLine            int colIndex = dataGridView1.Columns.Add(col);Di2015NewLineDi2015NewLine            DataGridViewColumn col2 = new DataGridViewTextBoxColumn();Di2015NewLine            col2.HeaderText = "Drug";Di2015NewLine            col2.Width = 75;Di2015NewLine            colIndex = dataGridView1.Columns.Add(col2);Di2015NewLineDi2015NewLine            DataGridViewColumn col3 = new DataGridViewTextBoxColumn();Di2015NewLine            col3.HeaderText = "Patient";Di2015NewLine            col3.Width = 75;Di2015NewLine            colIndex = dataGridView1.Columns.Add(col3);Di2015NewLineDi2015NewLine            DataGridViewColumn col4 = new DataGridViewTextBoxColumn();Di2015NewLine            col4.HeaderText = "Date";Di2015NewLine            col4.Width = 40;Di2015NewLine            colIndex = dataGridView1.Columns.Add(col4);Di2015NewLineDi2015NewLineDi2015NewLine            buttonCol.Name = "btnNotes";Di2015NewLine            buttonCol.HeaderText = "Notes";Di2015NewLine            buttonCol.Text = "Notes";Di2015NewLine            buttonCol.Width = 80;Di2015NewLine            buttonCol.UseColumnTextForButtonValue = true;Di2015NewLine            buttonCol.DefaultCellStyle.Font = new Font("Arial", 12);Di2015NewLine            dataGridView1.Columns.Add(buttonCol);Di2015NewLineDi2015NewLine            timer1.Start();Di2015NewLine            timer1.Tick += new EventHandler(timer1_Tick);Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        void timer1_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            int i = 0;Di2015NewLine            foreach (DataGridViewRow row in dataGridView1.Rows)Di2015NewLine            {Di2015NewLine                if (row.Cells[0].Value == null || row.Cells[1].Value == null || row.Cells[2].Value == null || row.Cells[3].Value == null)Di2015NewLine                {Di2015NewLine                    dataGridView1.Rows[i].Cells[4].Style.Font = new Font(dataGridView1.Font, FontStyle.Regular);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    dataGridView1.Rows[i].Cells[4].Style.Font = new Font(dataGridView1.Font, FontStyle.Bold);Di2015NewLine                }Di2015NewLine                i++;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        static DataTable GetTable()Di2015NewLine        {Di2015NewLine        DataTable table = new DataTable();Di2015NewLine        table.Columns.Add("Dosage", typeof(int));Di2015NewLine        table.Columns.Add("Drug", typeof(string));Di2015NewLine        table.Columns.Add("Patient", typeof(string));Di2015NewLine        table.Columns.Add("BlaBlaBla", typeof(string));Di2015NewLineDi2015NewLine        table.Rows.Add(25, "Indocin", "David", "Notes in here");Di2015NewLine        table.Rows.Add(50, "Enebrel", "Sam", "");Di2015NewLine        table.Rows.Add(10, "Hydralazine", "Christoff", "");Di2015NewLine        table.Rows.Add(21, "Combivent", "Janet", "Notes in here");Di2015NewLine        table.Rows.Add(100, "Dilantin", "Melanie", "");Di2015NewLineDi2015NewLine        return table;Di2015NewLine        }Di2015NewLine
11681685Di2015UniqueSeparatorOpen()
11681685Di2015UniqueSeparatorcomPort
11681717Di2015UniqueSeparatorselenium.open(" < your url goes here > ");Di2015NewLine
11681717Di2015UniqueSeparatorselenium.open("https://mail.google.com");
11681802Di2015UniqueSeparatorThread thread = new Thread(() => MyClass.DoX("abc", "def"));Di2015NewLinethread.SetApartmentState(ApartmentState.STA);Di2015NewLinethread.Start();Di2015NewLine
11681802Di2015UniqueSeparatorint retVal = 0;Di2015NewLineThread thread = new Thread(() => {Di2015NewLine    retVal = MyClass.DoX("abc", "def");Di2015NewLine});Di2015NewLinethread.SetApartmentState(ApartmentState.STA);Di2015NewLinethread.Start();Di2015NewLine
11681802Di2015UniqueSeparatorThread thread = new Thread(() => {Di2015NewLine    int retVal = MyClass.DoX("abc", "def");Di2015NewLine    // do something with retValDi2015NewLine});Di2015NewLinethread.SetApartmentState(ApartmentState.STA);Di2015NewLinethread.Start();Di2015NewLine
11682191Di2015UniqueSeparatorvar conditionals = new Dictionary<string, string>();Di2015NewLineDi2015NewLineforeach(Control c in Page.Controls)Di2015NewLine{Di2015NewLine    if (c is TextBox)Di2015NewLine    {Di2015NewLine        if (!String.IsNullOrEmpty(c.Text))Di2015NewLine            conditionals.Add(c.Id, c.Text);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11682296Di2015UniqueSeparatorXmlNamespaceManager xmlnsmgr = new XmlNamespaceManager(INISRecordXMLdoc.NameTable);Di2015NewLinexmlnsmgr.AddNamespace("ns", "http://localhost/gsainis/GsaInisWebService");Di2015NewLineDi2015NewLineforeach (XmlNode node in INISRecordXMLdoc.SelectNodes("//ns:ArrayOfString/ns:string/ns:gsafeed/ns:group/ns:record", xmlnsmgr))Di2015NewLine{Di2015NewLine   // Do somethingDi2015NewLine}Di2015NewLine
11682358Di2015UniqueSeparatorpublic class CommentsModelDi2015NewLine{Di2015NewLine     Public Int64 CommentId {get;set;}Di2015NewLine     ....Di2015NewLine     ....Di2015NewLine     //Introduce a new property in it as:Di2015NewLine     Public CommentsModel[] ChildComments {get;set;}Di2015NewLine}Di2015NewLine
11682358Di2015UniqueSeparator@foreach (var comment in Model.Comments)Di2015NewLine{Di2015NewLine    <div>Di2015NewLine    @comment.CommentContentDi2015NewLine    </div>Di2015NewLine    <br />Di2015NewLine    @if(comment.ChildComments.Length > 0)Di2015NewLine    {Di2015NewLine        // Display Level 1 Comments and so on and so farDi2015NewLine    }Di2015NewLine}Di2015NewLine
11682407Di2015UniqueSeparatorif(!File.Exists(filePath))Di2015NewLine   MessageBox.Show("Not found", "Test", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine
11682407Di2015UniqueSeparatorprivate void menuFileOpen_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        openFileDialog1.CheckFileExists = false;Di2015NewLine        openFileDialog1.CheckPathExists = false;Di2015NewLineDi2015NewLine        DialogResult result = openFileDialog1.ShowDialog(); // Show the dialog.Di2015NewLineDi2015NewLineDi2015NewLine        if (result == DialogResult.OK)Di2015NewLine        {Di2015NewLine            string file = openFileDialog1.FileName;Di2015NewLineDi2015NewLineDi2015NewLine            MessageBox.Show("TEST", "Test", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                MessageBox.Show("TEST", "Test", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine                motelManager.ReadFromFile(this, file); // Smart lÃ¶sning!!Di2015NewLineDi2015NewLine            }Di2015NewLine            catch (FileNotFoundException)Di2015NewLine            {Di2015NewLine                MessageBox.Show("Error message", "Test", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11682407Di2015UniqueSeparator        openFileDialog1.CheckFileExists = false;Di2015NewLine        openFileDialog1.CheckPathExists = false;Di2015NewLine
11682489Di2015UniqueSeparatorDataView dvItems = new DataView((DataTable)ds.Tables["datatable1"]);Di2015NewLineDi2015NewLine if (ddl_itemsorderby.SelectedValue == "MenuGroup")Di2015NewLine     dvItems.Sort = "Menu_Group, Item_Name ASC";Di2015NewLine else if (ddl_itemsorderby.SelectedValue == "Item")Di2015NewLine     dvItems.Sort = "Item_Name, Menu_Group ASC";Di2015NewLine else if (ddl_itemsorderby.SelectedValue == "Rate")Di2015NewLine     dvItems.Sort = "Item_rate, Item_Name ASC";Di2015NewLine else if (ddl_itemsorderby.SelectedValue == "Quantity")Di2015NewLine     dvItems.Sort = "Item_Quantity, Item_Name ASC";Di2015NewLineDi2015NewLine gridview1.DataSource = dvItems;Di2015NewLine gridview1.DataBind();Di2015NewLine
11682544Di2015UniqueSeparatorstring number_s = "TMP-" + RandomNumber(0, 9) + RandomNumber(0, 9) + RandomNumber(0, 9) + RandomNumber(0, 9) + RandomNumber(0, 9) + RandomNumber(0, 9) + RandomNumber(0, 9);Di2015NewLine
11682544Di2015UniqueSeparatorstring number_s = "TMP-" + RandomNumber(1000000, 9999999);Di2015NewLine
11682544Di2015UniqueSeparatorRandomNumber
11682544Di2015UniqueSeparatorprivate static readonly Random random = new Random();Di2015NewLine        private static readonly object syncLock = new object();Di2015NewLine        public int RandomNumber(int min, int max)Di2015NewLine        {Di2015NewLine            lock (syncLock)Di2015NewLine            { // synchronizeDi2015NewLine                return random.Next(min, max);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11682754Di2015UniqueSeparatorpublic ActionResult Pdf()Di2015NewLine{Di2015NewLine    return File(@"d:\\test.pdf", "application/pdf");Di2015NewLine}Di2015NewLine
11682754Di2015UniqueSeparator<iframe src="<%= Url.Action("Pdf", "SomeController") %>"></iframe>Di2015NewLine
11682769Di2015UniqueSeparatorphone://123546Di2015NewLinelocalapp://dataDi2015NewLine
11682769Di2015UniqueSeparator<a href="localapp://data">Open App</a>Di2015NewLine
11682769Di2015UniqueSeparatorResponse.Redirect("localapp://data");Di2015NewLine
11682769Di2015UniqueSeparatorusing System;Di2015NewLineclass LocalApplicationDi2015NewLine{Di2015NewLine  [STAThread]Di2015NewLine  static void Main(string[] args)Di2015NewLine  {Di2015NewLine    Console.WriteLine(args[0]);Di2015NewLine    Console.ReadLine();Di2015NewLine  }Di2015NewLine}Di2015NewLine
11682769Di2015UniqueSeparatorHKEY_CLASSES_ROOT Di2015NewLine     localappDi2015NewLine          (Default) = "URL:Local App"Di2015NewLine          URL Protocol = ""Di2015NewLine          shellDi2015NewLine               openDi2015NewLine                    commandDi2015NewLine                         (Default) = "c:\\localapp.exe" "%1"Di2015NewLine
11682769Di2015UniqueSeparator<a href="localapp://Hello">Start LocalApp</a>Di2015NewLine
11682832Di2015UniqueSeparatorStfld
11682832Di2015UniqueSeparatorExampleMethod
11682832Di2015UniqueSeparatorLdloc_1
11682832Di2015UniqueSeparatorsettableProperties
11682832Di2015UniqueSeparatorFieldInfo
11682832Di2015UniqueSeparatorPropertyInfo
11682832Di2015UniqueSeparator    var dm = new DynamicMethod(string.Format("Deserialize{0}", Guid.NewGuid()), typeof(object), new[] { typeof(Document) }, true);Di2015NewLineDi2015NewLine    var il = dm.GetILGenerator();Di2015NewLineDi2015NewLine    var ctor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null);Di2015NewLine    il.DeclareLocal(type);Di2015NewLine    il.Emit(OpCodes.Newobj, ctor);Di2015NewLine    il.Emit(OpCodes.Stloc_0);Di2015NewLineDi2015NewLine    var getFieldValue = typeof(Document).GetMethod("Get", BindingFlags.Instance | BindingFlags.Public);Di2015NewLineDi2015NewLine    var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance);Di2015NewLine    foreach (var field in fields)Di2015NewLine    {Di2015NewLine        il.Emit(OpCodes.Ldloc_0);// [target]Di2015NewLine        il.Emit(OpCodes.Ldarg_0);Di2015NewLine        il.Emit(OpCodes.Ldstr, field.Name);Di2015NewLine        il.Emit(OpCodes.Callvirt, getFieldValue);Di2015NewLine        il.Emit(OpCodes.Stfld, field);Di2015NewLine    }Di2015NewLine    var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);Di2015NewLine    foreach (var prop in props)Di2015NewLine    {Di2015NewLine        var setter = prop.GetSetMethod();Di2015NewLine        if (setter == null) continue;Di2015NewLine        il.Emit(OpCodes.Ldloc_0);// [target]Di2015NewLine        il.Emit(OpCodes.Ldarg_0);Di2015NewLine        il.Emit(OpCodes.Ldstr, prop.Name);Di2015NewLine        il.Emit(OpCodes.Callvirt, getFieldValue);Di2015NewLine        il.EmitCall(OpCodes.Callvirt, setter, null);Di2015NewLine    }Di2015NewLineDi2015NewLine    il.Emit(OpCodes.Ldloc_0);Di2015NewLine    il.Emit(OpCodes.Ret);Di2015NewLine    return (Func<Document, object>)dm.CreateDelegate(typeof(Func<Document, object>));Di2015NewLine
11682832Di2015UniqueSeparatorExampleMethod
11682832Di2015UniqueSeparator.method public hidebysig static class PocoObject ExampleMethod(class Document document) cil managedDi2015NewLine{Di2015NewLine    .maxstack 3Di2015NewLine    .locals init (Di2015NewLine        [0] class PocoObject poco)Di2015NewLine    L_0000: newobj instance void PocoObject::.ctor()Di2015NewLine    L_0005: stloc.0 Di2015NewLine    L_0006: ldloc.0 Di2015NewLine    L_0007: ldarg.0 Di2015NewLine    L_0008: ldstr "ID"Di2015NewLine    L_000d: callvirt instance string Document::Get(string)Di2015NewLine    L_0012: stfld string PocoObject::IDDi2015NewLine    L_0017: ldloc.0 Di2015NewLine    L_0018: ldarg.0 Di2015NewLine    L_0019: ldstr "DisplayText"Di2015NewLine    L_001e: callvirt instance string Document::Get(string)Di2015NewLine    L_0023: stfld string PocoObject::DisplayTextDi2015NewLine    L_0028: ldloc.0 Di2015NewLine    L_0029: ldarg.0 Di2015NewLine    L_002a: ldstr "PropId"Di2015NewLine    L_002f: callvirt instance string Document::Get(string)Di2015NewLine    L_0034: callvirt instance void PocoObject::set_PropId(string)Di2015NewLine    L_0039: ldloc.0 Di2015NewLine    L_003a: ret Di2015NewLine}Di2015NewLine
11682832Di2015UniqueSeparatornop
11682944Di2015UniqueSeparator'\\0'
11682944Di2015UniqueSeparator'0'
11682944Di2015UniqueSeparator0
11682944Di2015UniqueSeparatorstruct.buffer1[i++] = ch;
11682944Di2015UniqueSeparatori
11682944Di2015UniqueSeparator"foobar"
11682944Di2015UniqueSeparator"   6"
11682944Di2015UniqueSeparator"foobar"
11683004Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        timer1.Enabled = false; // Wait for startDi2015NewLine        timer1.Interval = 1000; // SecondDi2015NewLine        i = 10; // Set CountDown MaximumDi2015NewLine        label1.Text = "CountDown: " + i; // ShowDi2015NewLine        button1.Text = "Start";Di2015NewLine    }Di2015NewLineDi2015NewLine    public int i;Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        // Switch Timer On/OffDi2015NewLine        if (timer1.Enabled == true)Di2015NewLine        { timer1.Enabled = false; button1.Text = "Start"; }Di2015NewLine        else if (timer1.Enabled == false)Di2015NewLine        { timer1.Enabled = true; button1.Text = "Stop"; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void timer1_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (i > 0)Di2015NewLine        {Di2015NewLine            i = i - 1;Di2015NewLine            label1.Text = "CountDown: " + i;Di2015NewLine        }Di2015NewLine        else Di2015NewLine        { timer1.Enabled = false; button1.Text = "Start"; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11683023Di2015UniqueSeparator_providerRepository
11683023Di2015UniqueSeparatorIRepository<Provider>
11683023Di2015UniqueSeparator_providerRepositoryDi2015NewLine   .Setup(mr => mr.FindWhere(It.IsAny<Expression<Func<Provider,bool>>>()))Di2015NewLine   .Returns(expression => _providerData.AsQueryable().Where(expression))Di2015NewLine
11683023Di2015UniqueSeparatorAsQueryable
11683046Di2015UniqueSeparatorDo Stuff
11683046Di2015UniqueSeparatorprogressBar1.Value += 10;Di2015NewLine
11683046Di2015UniqueSeparatorprogressBar1.Value -= 10;Di2015NewLine
11683046Di2015UniqueSeparatorMaximum
11683046Di2015UniqueSeparatorJ Steen
11683071Di2015UniqueSeparator{ "message_id": "1:0408" } - successDi2015NewLine{ "error": "Unavailable" } - should be resentDi2015NewLine{ "error": "InvalidRegistration" } -  had an unrecoverable error (maybe the value got corrupted in the database)Di2015NewLine{ "message_id": "1:1516" } - successDi2015NewLine{ "message_id": "1:2342", "registration_id": "32" } - success, but the registration ID should be updated in the server databaseDi2015NewLine{ "error": "NotRegistered"} - registration ID should be removed from the server database because the application was uninstalled from the deviceDi2015NewLine
11683112Di2015UniqueSeparatorHubTile
11683112Di2015UniqueSeparatorDoubleTap
11683155Di2015UniqueSeparatorcreate vdisk file=c:\\VHD\\Win8.vhd maximum=60000 type=expandableDi2015NewLineDi2015NewLineselect vdisk file=c:\\VHD\\Win8.vhdDi2015NewLineattach vdiskDi2015NewLinecreate partition primaryDi2015NewLineassign letter=vDi2015NewLine
11683155Di2015UniqueSeparatorimagex /info i:\\sources\\intall.wim Di2015NewLineimagex /apply i:\\sources\\install.wim 1 v:\\Di2015NewLine
11683155Di2015UniqueSeparatorC:\\Windows\\System32\\bcdboot v:\\WindowsDi2015NewLine
11683345Di2015UniqueSeparatorvar foobarList = fooDic.Where(kvp => Di2015NewLine    !barlist.ContainsKey(((fooClass)kvp.Value)._fooID))Di2015NewLine    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);Di2015NewLine
11683345Di2015UniqueSeparatorkvp => kvp.Value
11683345Di2015UniqueSeparatorkvp => kvp.Value._foobarValue
11683409Di2015UniqueSeparator    PdfPCell c;Di2015NewLine    c = new PdfPCell(new Paragraph(@"Sample text", font));Di2015NewLine    c.HorizontalAlignment = Element.ALIGN_CENTER;Di2015NewLine    c.VerticalAlignment = Element.ALIGN_MIDDLE;Di2015NewLine    c.BackgroundColor = iTextSharp.text.Color.BLACK;Di2015NewLine    table.AddCell(c);Di2015NewLine
11683542Di2015UniqueSeparatorstring s = number.ToString("0.00");Di2015NewLineif (s.EndsWith("00"))Di2015NewLine{Di2015NewLine    s = number.ToString("0");Di2015NewLine}Di2015NewLine
11683585Di2015UniqueSeparatorreturn context.Employees.OfType<Accountant>().ToList()Di2015NewLine
11683595Di2015UniqueSeparatorIManagerConfiguration
11683676Di2015UniqueSeparatorBind(typeof(IDataProvider<>)).To(typeof(DataProvider<>));Di2015NewLine
11683846Di2015UniqueSeparatorvar d = (ResourceDictionary)App.LoadComponent(new Uri("Dictionary1.xaml",UriKind.Relative));Di2015NewLine
11683856Di2015UniqueSeparatorLiteral
11683856Di2015UniqueSeparator<li>
11683856Di2015UniqueSeparator<li><a href ="#"><asp:Literal ID="lt_name" EnableViewState="false" Di2015NewLine runat="server" Text=""></asp:Literal></a> Di2015NewLine
11683856Di2015UniqueSeparatorvar userName = userBLL.GetUserName(HttpContext.Current.User.Identity.Name);  Di2015NewLineDi2015NewLinelt_name.text = userName.Firstname + " " + username.Lastname;Di2015NewLine
11683968Di2015UniqueSeparator//New implementation, use TryGetValue from Dictionary to check for excising values.Di2015NewLinedynamic value = null;Di2015NewLineobj.TryGetValue(convTable[f.Name], out value);Di2015NewLine
11684010Di2015UniqueSeparatorCeteraQMS.Main_Master.username = _Value;Di2015NewLine
11684010Di2015UniqueSeparatorMain_Master
11684010Di2015UniqueSeparatorCeteraQMS
11684010Di2015UniqueSeparatorteamid
11684010Di2015UniqueSeparatorprojectid
11684010Di2015UniqueSeparatormemberid
11684010Di2015UniqueSeparatorrole
11684026Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition Height="Auto" />Di2015NewLine        <RowDefinition Height="Auto" />Di2015NewLine        <RowDefinition Height="Auto" />Di2015NewLine        <RowDefinition Height="*" />Di2015NewLine    </Grid.RowDefinitions>Di2015NewLine    <TextBox Grid.Row="0" Background="Blue"Di2015NewLine             VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />Di2015NewLine    <GridSplitter Grid.Row="1" Height="4" Background="Red"Di2015NewLine                  ResizeBehavior="PreviousAndNext" ResizeDirection="Rows"Di2015NewLine                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />Di2015NewLine    <DockPanel Grid.Row="2" Height="20" x:Name="toolbox" Background="Chocolate" />Di2015NewLine    <TextBox Grid.Row="3" Background="Blue"Di2015NewLine             VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />Di2015NewLine</Grid>Di2015NewLine
11684032Di2015UniqueSeparator[ProtoContract]
11684032Di2015UniqueSeparatorpublic class MyList : List<string>{}Di2015NewLineDi2015NewLine[Test]        Di2015NewLinepublic void ListSubclassShouldRoundTrip()Di2015NewLine{Di2015NewLine    var list = new MyList { "abc" };Di2015NewLine    var clone = Serializer.DeepClone(list);Di2015NewLine    Assert.AreEqual(1, clone.Count);Di2015NewLine    Assert.AreEqual("abc", clone[0]);Di2015NewLine}Di2015NewLine
11684032Di2015UniqueSeparator[ProtoContract]Di2015NewLinepublic class MyContractList : List<string> { }Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void ContractListSubclassShouldRoundTrip()Di2015NewLine{Di2015NewLine    var list = new MyContractList { "abc" };Di2015NewLine    var clone = Serializer.DeepClone(list);Di2015NewLine    Assert.AreEqual(1, clone.Count);Di2015NewLine    Assert.AreEqual("abc", clone[0]);Di2015NewLine}Di2015NewLine
11684032Di2015UniqueSeparator[ProtoContract]Di2015NewLinepublic class ListWrapperDi2015NewLine{Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public List<string> BasicList { get; set; }Di2015NewLine    [ProtoMember(2)]Di2015NewLine    public MyList MyList { get; set; }Di2015NewLine    [ProtoMember(3)]Di2015NewLine    public MyContractList MyContractList { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void TestBasicListAsMember()Di2015NewLine{Di2015NewLine    var obj = new ListWrapper { BasicList = new List<string> { "abc" } };Di2015NewLine    var clone = Serializer.DeepClone(obj);Di2015NewLine    Assert.IsNull(clone.MyList);Di2015NewLine    Assert.IsNull(clone.MyContractList);Di2015NewLine    Assert.AreEqual(1, clone.BasicList.Count);Di2015NewLine    Assert.AreEqual("abc", clone.BasicList[0]);Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void TestMyListAsMember()Di2015NewLine{Di2015NewLine    var obj = new ListWrapper { MyList = new MyList { "abc" } };Di2015NewLine    var clone = Serializer.DeepClone(obj);Di2015NewLine    Assert.IsNull(clone.BasicList);Di2015NewLine    Assert.IsNull(clone.MyContractList);Di2015NewLine    Assert.AreEqual(1, clone.MyList.Count);Di2015NewLine    Assert.AreEqual("abc", clone.MyList[0]);Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void TestMyContractListAsMember()Di2015NewLine{Di2015NewLine    var obj = new ListWrapper { MyContractList = new MyContractList { "abc" } };Di2015NewLine    var clone = Serializer.DeepClone(obj);Di2015NewLine    Assert.IsNull(clone.BasicList);Di2015NewLine    Assert.IsNull(clone.MyList);Di2015NewLine    Assert.AreEqual(1, clone.MyContractList.Count);Di2015NewLine    Assert.AreEqual("abc", clone.MyContractList[0]);Di2015NewLine}Di2015NewLine
11684129Di2015UniqueSeparatorgenres.Add
11684129Di2015UniqueSeparatorList<T>.Add
11684129Di2015UniqueSeparatorGenre.Add
11684129Di2015UniqueSeparatorGenre
11684129Di2015UniqueSeparatorGenre
11684129Di2015UniqueSeparatordynamic
11684129Di2015UniqueSeparatorvar
11684129Di2015UniqueSeparator.Add
11684129Di2015UniqueSeparatorvar genres = new List<Genre> {Di2015NewLine    new Genre { Name = "Disco" },Di2015NewLine    new Genre { Name = "Jazz" },Di2015NewLine    new Genre { Name = "Rock" }Di2015NewLine};Di2015NewLine
11684129Di2015UniqueSeparatorvar genres = new List<Genre>();Di2015NewLinegenres.Add(new Genre { Name = "Disco" });Di2015NewLinegenres.Add(new Genre { Name = "Jazz" });Di2015NewLinegenres.Add(new Genre { Name = "Rock" });Di2015NewLine
11684129Di2015UniqueSeparator.Add
11684129Di2015UniqueSeparatornew Genre { Name = "Disco" }Di2015NewLine
11684129Di2015UniqueSeparatorvar g = new Genre();Di2015NewLineg.Name = "Disco";Di2015NewLine
11684155Di2015UniqueSeparator=>
11684155Di2015UniqueSeparatorint lineNo = lineList.IndexOf(lineList.Find(delegate(String x)Di2015NewLine{ Di2015NewLine   return x.StartsWith(select);Di2015NewLine}));Di2015NewLine
11684167Di2015UniqueSeparatorBind<IWarrior>().To<Ninja>();Di2015NewLine
11684167Di2015UniqueSeparatorclass ClimberNeeded : Attribute{}Di2015NewLine
11684167Di2015UniqueSeparatorWhenClassHas
11684167Di2015UniqueSeparatorBind<IWarrior>().To<Samurai>().WhenClassHas<ClimberNeeded>();Di2015NewLine
11684167Di2015UniqueSeparator[ClimberNeeded]Di2015NewLineclass MountainousAttack {Di2015NewLine    [Inject]Di2015NewLine    IWarrior StandardMountainWarrior { get; set; }Di2015NewLine}Di2015NewLine
11684167Di2015UniqueSeparatorStandardMountainWarrior
11684167Di2015UniqueSeparatorSamurai
11684167Di2015UniqueSeparatorNinja
11684167Di2015UniqueSeparatorcontainer.Register<IMyInterface, MyImplementation>();Di2015NewLine
11684242Di2015UniqueSeparatorthis.DataBind();Di2015NewLine
11684372Di2015UniqueSeparatorRefCount
11684372Di2015UniqueSeparator   return Observable.Defer(() => onceonly())Di2015NewLine                    .Repeat()Di2015NewLine                    .Publish()Di2015NewLine                    .RefCount();Di2015NewLine
11684499Di2015UniqueSeparatorpublic static DialogResult Show(Di2015NewLine    string text,Di2015NewLine    string captionDi2015NewLine)Di2015NewLine
11684547Di2015UniqueSeparatorstring example_text = "<em>Ich bin ein BÃ¤rliner</em>";Di2015NewLineRegex em = new Regex(@"<em>[^<]*</em>" );Di2015NewLineMatch emMatch = em.Match(example_text);Di2015NewLinewhile (emMatch.Success)Di2015NewLine{Di2015NewLine    Console.WriteLine(emMatch.Value);Di2015NewLine    emMatch = emMatch.NextMatch();Di2015NewLine}Di2015NewLine
11684547Di2015UniqueSeparator<em>Ich bin ein BÃ¤rliner</em>
11684547Di2015UniqueSeparatorRichTextBox
11684547Di2015UniqueSeparatorRtf
11684547Di2015UniqueSeparator\\'e4
11684547Di2015UniqueSeparator.Rtf
11684547Di2015UniqueSeparator{\\rtlch\\fcs1 \\af31507 \\ltrch\\fcs0 \\cf6\\insrsid15946317\\charrsid15946317 test}
11684547Di2015UniqueSeparator.Text
11684560Di2015UniqueSeparator__declspec(dllexport)
11684560Di2015UniqueSeparatorGetProcAddress
11684570Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Grammar g = new CSharpGrammar();Di2015NewLine    LanguageData language = new LanguageData(g);Di2015NewLine    Parser parser = new Parser(language);Di2015NewLine    ParseTree parseTree = parser.Parse("", "class1.cs");Di2015NewLineDi2015NewLine    var r = parseTree.Root;Di2015NewLine}Di2015NewLine
11684608Di2015UniqueSeparatorvar someValueFromGet = Request.QueryString["YourGetPara"];Di2015NewLinevar someValueFromPost = Request.Form["YourPostPara"];Di2015NewLine
11684671Di2015UniqueSeparatorListView.ItemTemplate
11684671Di2015UniqueSeparatorListView.ItemCommand
11684671Di2015UniqueSeparator<asp:ListView ID="lvArticle" runat="server" OnItemCommand="lv_ItemCommand">Di2015NewLine..Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:HiddenField ID="hfBlogID" Value='<%#Eval("BlogID")%>' runat="server" />Di2015NewLine        <p>Di2015NewLine            <%#Eval("BlogTitle")%></p>Di2015NewLine        <p>Di2015NewLine            <%#Eval("BlogDetails")%></p>Di2015NewLine        <asp:Button runat="server" CommandName="find" CommandArgument='<%# Eval("yourIDField") %>' />Di2015NewLine    </ItemTemplate>Di2015NewLine...Di2015NewLine
11684671Di2015UniqueSeparatorprotected void lv_ItemCommand(object sender, ListViewCommandEventArgs e)Di2015NewLine{Di2015NewLine    switch (e.CommandName)Di2015NewLine    {Di2015NewLine        case "find":Di2015NewLine            var hidden = e.Item.FindControl("your hidden id") as HiddenField;Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11684671Di2015UniqueSeparatorListView
11684671Di2015UniqueSeparatorprotected void find_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var hidden = this.lv.Items[this.lv.SelectedIndex].FindControl("your hidden ID") as HiddenField;Di2015NewLine}Di2015NewLine
11684743Di2015UniqueSeparatorHalvard.Prediction
11684743Di2015UniqueSeparatordbo.Prediction
11684744Di2015UniqueSeparatorpublic struct Ref<T>Di2015NewLine{Di2015NewLine    Func<T> get;Di2015NewLine    Action<T> set;Di2015NewLineDi2015NewLine    public Ref(Func<T> get, Action<T> set)Di2015NewLine    {Di2015NewLine        this.get = get;Di2015NewLine        this.set = set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public T Value { get { return get(); } set { set(value); } }Di2015NewLine}Di2015NewLine
11684744Di2015UniqueSeparatorclass Foo { public float bar; }Di2015NewLine
11684744Di2015UniqueSeparatorFoo myFoo = new Foo();Di2015NewLineRef<float> barRef = new Ref<float>(() => myFoo.bar, (v) => myFoo.bar = v);Di2015NewLineDi2015NewLine// Ta-Da:Di2015NewLinebarRef.Value = 12.5f;Di2015NewLineConsole.WriteLine(barRef.Value);Di2015NewLine
11684772Di2015UniqueSeparator/Role/Index
11684772Di2015UniqueSeparator/Role/Index/{user_id}
11684772Di2015UniqueSeparator/Role/IndexForUser
11684772Di2015UniqueSeparatorUser
11684772Di2015UniqueSeparatorIndex
11684807Di2015UniqueSeparatorout
11684807Di2015UniqueSeparatorref
11684807Di2015UniqueSeparatorvoid GetTypeInfoCount(out uint pctinfo);Di2015NewLine
11684807Di2015UniqueSeparatoruint typeInfoCount;Di2015NewLinedispatch.GetTypeInfoCount(out typeInfoCount);Di2015NewLine
11684807Di2015UniqueSeparatorGetTypeInfo
11684807Di2015UniqueSeparatorref
11684807Di2015UniqueSeparatorout
11684807Di2015UniqueSeparatorvoid GetTypeInfo(uint itinfo, uint lcid, out IntPtr pptinfo);Di2015NewLine
11684807Di2015UniqueSeparator[Guid("00020400-0000-0000-C000-000000000046")]Di2015NewLine[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]Di2015NewLineinternal interface IDispatchDi2015NewLine{Di2015NewLine    void GetTypeInfoCount(out uint pctinfo);Di2015NewLine    void GetTypeInfo(uint iTInfo, int lcid, out IntPtr info);Di2015NewLine    void GetIDsOfNames(ref Guid iid, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPWStr, SizeParamIndex=2)] string[] names, uint cNames, int lcid, [Out, MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.I4, SizeParamIndex=2)] int[] rgDispId);Di2015NewLine    void Invoke(int dispIdMember, ref Guid riid, int lcid, INVOKEKIND wFlags, ref DISPPARAMS pDispParams, IntPtr pvarResult, IntPtr pExcepInfo, IntPtr puArgErr);Di2015NewLine}Di2015NewLine
11684835Di2015UniqueSeparatorSELECT * from Task_Report_Table where date between @startdate and @enddateDi2015NewLine
11684835Di2015UniqueSeparatorSqlParameter
11684835Di2015UniqueSeparatorSqlCommand
11684835Di2015UniqueSeparatorSqlCommand command = new SqlCommand(yourSQL, connection);Di2015NewLinecommand.Parameters.Add(new SqlParameter("startdate", DateTime.Parse(txtStartDate.Text)));Di2015NewLinecommand.Parameters.Add(new SqlParameter("enddate", DateTime.Parse(txtEndDate.Text)));Di2015NewLine
11684854Di2015UniqueSeparatorprivate object _latch = new object();Di2015NewLineprivate bool _updating;Di2015NewLineDi2015NewLineprivate void UpdateIfRequired() Di2015NewLine{Di2015NewLine    lock (_latch) Di2015NewLine    {Di2015NewLine        if (_updating) Di2015NewLine        {Di2015NewLine            //wait here and short circuit out when the work is doneDi2015NewLine            while (_updating)Di2015NewLine                Monitor.Wait(_latch);Di2015NewLineDi2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        _updating = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    //do lots of expensive work hereDi2015NewLineDi2015NewLine    lock (_latch)Di2015NewLine    {Di2015NewLine        _updating = false;Di2015NewLine        Monitor.PulseAll(_latch); //let the other threads goDi2015NewLine    }Di2015NewLine}Di2015NewLine
11684872Di2015UniqueSeparatorget_NewLine()
11684872Di2015UniqueSeparatorldstr "\\r\\n"Di2015NewLineretDi2015NewLine
11684872Di2015UniqueSeparatorEnvironment.NewLine
11684872Di2015UniqueSeparatorif (!Environment.UserInteractive)Di2015NewLine{Di2015NewLine    var tw = new SlowWriter(Path.Combine(logPath,"{0}.log"));Di2015NewLine    Console.SetError(tw);Di2015NewLine    Console.SetOut(tw);Di2015NewLine}Di2015NewLine
11684872Di2015UniqueSeparatorSlowWriter
11684872Di2015UniqueSeparatorTextWriter
11684872Di2015UniqueSeparatorclass SlowWriter : TextWriterDi2015NewLine{ // this opens and closs each time; slower, but doesn't lock the fileDi2015NewLine    private readonly string path;Di2015NewLine    public SlowWriter(string path)Di2015NewLine    {Di2015NewLine        this.path = path;Di2015NewLine    }Di2015NewLine    public override System.Text.Encoding EncodingDi2015NewLine    {Di2015NewLine        get { return System.Text.Encoding.UTF8; }Di2015NewLine    }Di2015NewLine    private TextWriter Append()Di2015NewLine    {Di2015NewLine        var finalPath = string.Format(path, DateTime.UtcNow.ToString("yyyyMMdd"));Di2015NewLine        return File.AppendText(finalPath);Di2015NewLine    }Di2015NewLine    public override void Write(string value)Di2015NewLine    {Di2015NewLine        lock (this)Di2015NewLine        {Di2015NewLine            using (var file = Append())Di2015NewLine            {Di2015NewLine                file.Write(value);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public override void Write(char[] buffer, int index, int count)Di2015NewLine    {Di2015NewLine        lock(this)Di2015NewLine        {Di2015NewLine            using (var file = Append())Di2015NewLine            {Di2015NewLine                file.Write(buffer, index, count);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public override void Write(char[] buffer)Di2015NewLine    {Di2015NewLine        lock (this)Di2015NewLine        {Di2015NewLine            using (var file = Append())Di2015NewLine            {Di2015NewLine                file.Write(buffer);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11685010Di2015UniqueSeparatorpublic class MyModule: NancyModuleDi2015NewLine{Di2015NewLine    public MyModule()Di2015NewLine    {Di2015NewLine        Get["/"] = x => {Di2015NewLine            var x = _repo.X();Di2015NewLine            var response = View["my_view", x];Di2015NewLine            using (var ms = new MemoryStream())Di2015NewLine            {Di2015NewLine                response.Contents(ms);Di2015NewLine                ms.Flush();Di2015NewLine                ms.Position = 0;Di2015NewLine                //now ms is a stream with the contents of the response.Di2015NewLine            }Di2015NewLine            return view;Di2015NewLine        };Di2015NewLineDi2015NewLine        After += ctx => {Di2015NewLine           if (ctx.Request.Path == "/"){Di2015NewLine               using (var ms = new MemoryStream())Di2015NewLine               {Di2015NewLine                   ctx.Response.Contents(ms);Di2015NewLine                   ms.Flush();Di2015NewLine                   ms.Position = 0;Di2015NewLine                   //now ms is a stream with the contents of the response.Di2015NewLine               }Di2015NewLine           }Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
11685099Di2015UniqueSeparatorString names = String.Join(", ", fooDic.Select(x => x.Value._barName));Di2015NewLine
11685161Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class ResultsCollection : CollectionBaseDi2015NewLine{Di2015NewLine  // indexerDi2015NewLine  public MyDataSet this[int index] { get { return (MyDataSet)List[index]; } }Di2015NewLine}Di2015NewLine[Serializable]Di2015NewLinepublic class MyDataSet : DataSet, ISerializableDi2015NewLine{Di2015NewLine  // member variable that *overrides* the Tables property of the standard DataSet classDi2015NewLine  public new TablesCollection Tables;Di2015NewLine}Di2015NewLine[Serializable]Di2015NewLinepublic class TablesCollection : CollectionBaseDi2015NewLine{Di2015NewLine  // indexerDi2015NewLine  public MyDataTable this[int index] { get { return (MyDataTable)List[index]; } }Di2015NewLine}Di2015NewLine[Serializable]Di2015NewLinepublic class MyDataTable : DataTable, ISerializableDi2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
11685166Di2015UniqueSeparatorfunction hasInternets() {Di2015NewLine    console.log("hasInternets: " + window.location.href.split("?")[0] + "?" + Math.random());Di2015NewLine    var s = $.ajax({ Di2015NewLine        type: "HEAD",Di2015NewLine        url: window.location.href.split("?")[0] + "?" + Math.random(),Di2015NewLine        async: falseDi2015NewLine    }).status;Di2015NewLine        console.log("s: " +s);Di2015NewLine    //thx http://www.louisremi.com/2011/04/22/navigator-online-alternative-serverreachable/Di2015NewLineDi2015NewLine    return s >= 200 && s < 300 || s === 304; }Di2015NewLine
11685188Di2015UniqueSeparator  declare @DateFrom date='10/18/2012'     Di2015NewLine declare @DateTo date='12/14/2012'Di2015NewLineDi2015NewLine select T.BillID,T.AccountID,T.BilledFrom,T.BillTo,Di2015NewLine     case when BilledFrom<@DateFrom then @DateFrom else BilledFrom end [RangeStart], Di2015NewLine     case when BillTo<@DateTo then BillTo else @DateTo end [RangeEnd],DATEDIFF(D,case when BilledFrom<@DateFrom then @DateFrom else BilledFrom end ,case when BillTo<@DateTo then BillTo else @DateTo end ) [Days],PriceDi2015NewLine     from t_account  TDi2015NewLine
11685267Di2015UniqueSeparatorfor (int i = 0; i < 4; i++)Di2015NewLine{Di2015NewLine    if (!objReader.IsDBNull(i))Di2015NewLine        sw.Write(objReader.GetValue(i).ToString());Di2015NewLine    elseDi2015NewLine        sw.Write("NULL");Di2015NewLineDi2015NewLine    if (i < 3) Di2015NewLine        sw.Write("\\t");Di2015NewLine}Di2015NewLineDi2015NewLinecount += 1;Di2015NewLinesw.WriteLine();Di2015NewLine
11685267Di2015UniqueSeparatorSqlCommand cmd = objConn.CreateCommand();Di2015NewLinecmd.CommandText = @"SELECT inv.[InvDate]Di2015NewLine                          ,inv.[InvoiceNo]Di2015NewLine                          ,inv.[TaxAmount] + inv.[SubTotal] AS AmountDi2015NewLine                          ,tab.GivenNameDi2015NewLine                      FROM [Invoice] inv Di2015NewLine                           LEFT JOIN [PatientDetails] tab Di2015NewLine                                  ON inv.[MedicalRecordID] = tab.[MedicalRecordID] Di2015NewLine                     WHERE inv.[InvDate] BETWEEN @From AND @To";Di2015NewLinecmd.Parameters.AddWithValue("@From", fromDate);Di2015NewLinecmd.Parameters.AddWithValue("@To", toDate);Di2015NewLine
11685267Di2015UniqueSeparatorWHERE inv.[InvDate] >= @From AND inv.[InvDate] <= @To
11685267Di2015UniqueSeparatorBETWEEN
11685268Di2015UniqueSeparator        Regex g;Di2015NewLine        Match m;Di2015NewLine        g = new Regex("//(.*)\\n");  // if you have just alphabet characters replace .* with \\w*Di2015NewLine        m = g.Match(input);Di2015NewLine        if (m.Success == true)Di2015NewLine             output = m.Groups[1].Value;Di2015NewLine
11685328Di2015UniqueSeparatorAND CONTAINS(nt.text, 'orbit gum', LANGUAGE 'English')Di2015NewLine ]Di2015NewLine  Name: wildcard1 - Value: %gum%Di2015NewLine  Name: wildcard0 - Value: %orbit%Di2015NewLine[SQL: Di2015NewLine
11685370Di2015UniqueSeparatorpublic interface IMyDAODi2015NewLine{Di2015NewLine    MyObject GetMyObjectById(int Id);Di2015NewLine}Di2015NewLine
11685370Di2015UniqueSeparatorpublic interface IMyWCFContract Di2015NewLine{Di2015NewLine    [OperationContract]Di2015NewLineÂ  Â  MyObject GetMyObjectById(int Id);Di2015NewLine}Di2015NewLine
11685370Di2015UniqueSeparatorpublic class MyWCFService : IMyWCFContractDi2015NewLine{Di2015NewLine     private MyDAO dao;Di2015NewLineDi2015NewLine     public MyWCFService()Di2015NewLine     {Di2015NewLine        dao = new MyDAO(); Di2015NewLine     }Di2015NewLineDi2015NewLine     public MyObject GetMyObjectById(int id)Di2015NewLine     {Di2015NewLine        return dao.GetMyObjectById(id);Di2015NewLine     }Di2015NewLine}Di2015NewLine
11685469Di2015UniqueSeparator dataTable.Rows[i]["columnNameHere"] = valueYouWantToUse;Di2015NewLine
11685469Di2015UniqueSeparatorDataRow row = dataTable.NewRow();Di2015NewLinerow["columnName"] = valueYouWantToUse;Di2015NewLine//any other information can be put here too, for each column in the row.Di2015NewLinedataTable.Rows.Add(row);Di2015NewLineDi2015NewLine if (parts[i] != "")Di2015NewLine                {Di2015NewLineDi2015NewLine                    dataGridView1.Rows.Add((new Object[] { i, parts[i]}));Di2015NewLineDi2015NewLine                    dataGridView1.Columns.Add("Link", "Name");Di2015NewLine                    DataRow row = dataTable.NewRow();Di2015NewLine                    row["Link"] = i.ToString();Di2015NewLine                    row["Name"] = parts[i].ToString();Di2015NewLineDi2015NewLine                    //here add all your column values for that row in the same manner, then,Di2015NewLine                    dataTable.Rows.Add(row);Di2015NewLine                }Di2015NewLine
11685528Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.Resources>Di2015NewLine        <Style TargetType="{x:Type local:EditableTextBlock}">Di2015NewLine            <Setter Property="Template">Di2015NewLine                <Setter.Value>Di2015NewLine                    <ControlTemplate TargetType="{x:Type local:EditableTextBlock}">Di2015NewLine                        <Grid x:Name="PART_GridContainer">Di2015NewLine                            <RichTextBox x:Name="PART_TbDisplayText" Visibility="Visible" />Di2015NewLine                            <TextBox x:Name="PART_TbEditText" Visibility="Hidden" />Di2015NewLine                        </Grid>Di2015NewLine                    </ControlTemplate>Di2015NewLine                </Setter.Value>Di2015NewLine            </Setter>Di2015NewLine        </Style>Di2015NewLine        <Style TargetType="TextBox">Di2015NewLine            <Setter Property="BorderBrush" Value="Red" />Di2015NewLine        </Style>Di2015NewLine        <Style TargetType="RichTextBox">Di2015NewLine            <Setter Property="BorderBrush" Value="Blue" />Di2015NewLine        </Style>Di2015NewLine    </Grid.Resources>Di2015NewLine    <StackPanel>Di2015NewLine        <local:EditableTextBlock />Di2015NewLine        <Button>Lose focus</Button>Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine
11685528Di2015UniqueSeparator[TemplatePart(Type = typeof(Grid), Name = EditableTextBlock.GRID_NAME)]Di2015NewLine[TemplatePart(Type = typeof(RichTextBox), Name = EditableTextBlock.RICHTEXTBOX_DISPLAYTEXT_NAME)]Di2015NewLine[TemplatePart(Type = typeof(TextBox), Name = EditableTextBlock.TEXTBOX_EDITTEXT_NAME)]Di2015NewLinepublic class EditableTextBlock : ControlDi2015NewLine{Di2015NewLine    private const string GRID_NAME = "PART_GridContainer";Di2015NewLine    private const string RICHTEXTBOX_DISPLAYTEXT_NAME = "PART_TbDisplayText";Di2015NewLine    private const string TEXTBOX_EDITTEXT_NAME = "PART_TbEditText";Di2015NewLineDi2015NewLine    private Grid gridContainer;Di2015NewLine    private RichTextBox richTextBox;Di2015NewLine    private TextBox textBox;Di2015NewLineDi2015NewLine    static EditableTextBlock()Di2015NewLine    {Di2015NewLine        DefaultStyleKeyProperty.OverrideMetadata(typeof(EditableTextBlock), new FrameworkPropertyMetadata(typeof(EditableTextBlock)));Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void OnApplyTemplate()Di2015NewLine    {Di2015NewLine        base.OnApplyTemplate();Di2015NewLine        this.gridContainer = this.Template.FindName(GRID_NAME, this) as Grid;Di2015NewLineDi2015NewLine        if (this.gridContainer != null)Di2015NewLine        {Di2015NewLine            this.richTextBox = this.gridContainer.Children[0] as RichTextBox;Di2015NewLine            this.richTextBox.GotFocus += new RoutedEventHandler(richTextBoxGotFocus);Di2015NewLine            this.textBox = this.gridContainer.Children[1] as TextBox;Di2015NewLine            this.textBox.LostFocus += this.textBoxLostFocus;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void richTextBoxGotFocus(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        this.richTextBox.Visibility = Visibility.Hidden;Di2015NewLine        this.textBox.Visibility = Visibility.Visible;Di2015NewLine        this.textBox.Focus();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void textBoxLostFocus(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        this.richTextBox.Visibility = Visibility.Visible;Di2015NewLine        this.textBox.Visibility = Visibility.Hidden;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11685571Di2015UniqueSeparatorOfType<T>()
11685571Di2015UniqueSeparatorfrom b in db.SellingItems.OfType<Book>()Di2015NewLinewhere b.Title = "my title"Di2015NewLineselect b;Di2015NewLine
11685571Di2015UniqueSeparatorBook b = ...;Di2015NewLinedb.SellingItems.Add(b);Di2015NewLinedb.SaveChanges();Di2015NewLine
11685602Di2015UniqueSeparatorrouteValues
11685602Di2015UniqueSeparatorRouteValueDictionary
11685602Di2015UniqueSeparatorhtmlAttributes
11685602Di2015UniqueSeparatorModel.FirstRouteValues
11685602Di2015UniqueSeparatorRouteValueDictionary
11685602Di2015UniqueSeparatorRouteValueDictionary
11685602Di2015UniqueSeparatorIDictionary<string,object>
11685602Di2015UniqueSeparator<%= Html.ActionLink(Di2015NewLine    SharedResources.Shared_Pagination_First, Di2015NewLine    Model.ActionToExecute, Di2015NewLine    Model.ControllerToExecute, Di2015NewLine    Model.FirstRouteValues, Di2015NewLine    new RouteValueDictionary(Di2015NewLine        new { Di2015NewLine            title = string.Format(SharedResources.Shared_Pagination_LinkTitle, 0) Di2015NewLine        }Di2015NewLine    )Di2015NewLine) %>Di2015NewLine
11685602Di2015UniqueSeparator<%=Html.ActionLink(Di2015NewLineSharedResources.Shared_Pagination_First, Di2015NewLineModel.ActionToExecute, Di2015NewLineModel.ControllerToExecute, Di2015NewLineModel.FirstRouteValues, Di2015NewLinenew Dictionary<string, object> { { "title", somevalue  } })%>Di2015NewLine
11685768Di2015UniqueSeparator// .JchkAll is cssclass of your checkbox on which's click you need to check all Checkboxes
11685768Di2015UniqueSeparatorfunction Selectall() {Di2015NewLine  if ($('.JchkAll').is(':checked')) {Di2015NewLine   // .JchkGrid cssClass will be assigned to all other checkboxes in your controlDi2015NewLine    $('.JchkGrid').attr('checked', 'true');Di2015NewLine  }Di2015NewLine  else {Di2015NewLine    $('.JchkGrid').removeAttr('checked', 'false');Di2015NewLine  }Di2015NewLine}Di2015NewLine
11685768Di2015UniqueSeparator<asp:CheckBox runat="server" onchange="Selectall();" ID="cbSelectAll" Di2015NewLine     Text="Select/Deselect All" CssClass="JchkAll"/>Di2015NewLine
11685768Di2015UniqueSeparator    cbSelectAll.Attributes.Add("onchange","Selectall");Di2015NewLine
11685774Di2015UniqueSeparatorcontrolRenderingCompatibilityVersion=3.5 Di2015NewLine
11685825Di2015UniqueSeparatorXMLControl
11685825Di2015UniqueSeparatorISerializable
11685825Di2015UniqueSeparatorpublic interface IXmlControl: ISerializableDi2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11685825Di2015UniqueSeparatorIXmlControl
11685825Di2015UniqueSeparatorISerializable
11685825Di2015UniqueSeparatorI
11685825Di2015UniqueSeparatorIXmlControl
11685826Di2015UniqueSeparatorException
11685826Di2015UniqueSeparatorcatch (WebException e)Di2015NewLine{Di2015NewLine    WebResponse response = e.Response;Di2015NewLine    // TODO: Check whether the status code is one you can handleDi2015NewLine    // Get the data from here...Di2015NewLine}Di2015NewLine
11685826Di2015UniqueSeparatorusing
11685826Di2015UniqueSeparatorHttpWebResponse
11685828Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLinepublic static extern bool PostMessage(IntPtr hWnd, int msg, IntPtr wp, IntPtr lp);Di2015NewLine
11685873Di2015UniqueSeparatorCarModel
11685873Di2015UniqueSeparatorCarMake
11685873Di2015UniqueSeparatorCarRegistration = n.Element("CarRegistration")!= null ? n.element("CarRegistration").Value : string.Empty,Di2015NewLine                //etc.Di2015NewLine
11685873Di2015UniqueSeparatorvar car = new XElement("CarType");Di2015NewLinecar.Add(new XElement("CarRegistration"), textBox30.Text);Di2015NewLine//etc.Di2015NewLinevar NewStudent = car.ToString();//NewStudent for a car, weird ;)Di2015NewLine
11685961Di2015UniqueSeparator<a href="@Html.Action("Inde........Di2015NewLine    <img src="~/Content/ima....Di2015NewLine</a>Di2015NewLine
11685961Di2015UniqueSeparatorUrl.Action
11685961Di2015UniqueSeparatorHtml.Action
11685961Di2015UniqueSeparator<a href="@Url.Action("Inde........Di2015NewLine    <img src="~/Content/ima....Di2015NewLine</a>Di2015NewLine
11685980Di2015UniqueSeparator<li><a title="[^"]+" href="category[.]php[?]cid=[0-9]+">Di2015NewLine
11685980Di2015UniqueSeparator[^"]+
11685980Di2015UniqueSeparator"
11685980Di2015UniqueSeparator[?]
11685980Di2015UniqueSeparator?
11685980Di2015UniqueSeparator[0-9]+
11685980Di2015UniqueSeparator"
11685980Di2015UniqueSeparator<li><a title=\\"[^\\"]+\\" href=\\"category.php[?]cid=[0-9]+\\">Di2015NewLine
11686059Di2015UniqueSeparatorContract.Requires<ArgumentException>(!level.HasValueDi2015NewLine    || (level.Value >= 0 && level.Value <= 10));Di2015NewLineContract.Ensures(!HierarchyLevel.HasValueDi2015NewLine    || (HierarchyLevel.Value >= 0 && HierarchyLevel.Value <= 10));Di2015NewLine
11686059Di2015UniqueSeparatorContract.Requires<ArgumentException>(!level.HasValueDi2015NewLine    || (level.Value >= 0 && level.Value <= 10);Di2015NewLineContract.Ensures(HierarchyLevel == level);Di2015NewLine
11686059Di2015UniqueSeparatorPureAttribute
11686059Di2015UniqueSeparator[Pure]Di2015NewLinepublic static bool IsInRange(int? value)Di2015NewLine{Di2015NewLine    return !value.HasValueDi2015NewLine        || (value >= 0 && value <= 10);Di2015NewLine}Di2015NewLineDi2015NewLinepublic Employee(int? level)Di2015NewLine{Di2015NewLine    Contract.Requires<ArgumentException>(IsInRange(level));Di2015NewLine    Contract.Ensures(IsInRange(HierarchyLevel));Di2015NewLine    this.HierarchyLevel = level;Di2015NewLine}Di2015NewLine
11686291Di2015UniqueSeparatorList<InvoiceReportItem> cancelResults = Di2015NewLine (from cr in model.InvoiceReportItems Di2015NewLine  join l in model.tblLicences on cr.LicenceAuto equals l.LicenceAuto where cr.Report.Id == id Di2015NewLine  select cr).ToList();Di2015NewLine
11686460Di2015UniqueSeparatorParseExact
11686460Di2015UniqueSeparatorDateTime start = DateTime.ParseExact("20120713",Di2015NewLine                    new[] { "yyyyMMdd", "yyMMdd" },Di2015NewLine                    CultureInfo.InvariantCulture,Di2015NewLine                    DateTimeStyles.None);Di2015NewLineDateTime end = DateTime.ParseExact("120713",Di2015NewLine                    new[] { "yyyyMMdd", "yyMMdd" },Di2015NewLine                    CultureInfo.InvariantCulture,Di2015NewLine                    DateTimeStyles.None);Di2015NewLine
11686460Di2015UniqueSeparatorstart.ToString("dd.MM.yyyy")
11686475Di2015UniqueSeparatorpublic string variable1 {get;set;}Di2015NewLinepublic int variable2 {get;set;}Di2015NewLine// as long as they're public, it doesnt matter what you call them, or there typeDi2015NewLine//(just make sure that you're using the right type, for datagrid's, string is Di2015NewLine//usually fine but you can always convert)Di2015NewLine
11686475Di2015UniqueSeparator Form2 form2 = new Form2();Di2015NewLine form2.variable1 = dataSource[rowIndex]["columnName"]Di2015NewLine form2.variable2 = dataSource[rowIndex2]["columnName2"]Di2015NewLine
11686475Di2015UniqueSeparatordataTable.SelectedRows[0].Index;Di2015NewLine
11686541Di2015UniqueSeparatorSiteMapDatasource
11686541Di2015UniqueSeparator    <asp:Menu ID="Menu1" DataSourceID="SiteMapMenuSrc" runat="server" Di2015NewLine        Orientation="Horizontal" RenderingMode="Table" Di2015NewLine        StaticSubMenuIndent="16px">Di2015NewLine        <StaticSelectedStyle Font-Bold="True" />Di2015NewLine    </asp:Menu>Di2015NewLine
11686702Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine            "Default", // Route nameDi2015NewLine            "{controller}/{action}/{title}", // URL with parametersDi2015NewLine            new { controller = "Home", action = "Index", title = UrlParameter.Optional } // Parameter defaultsDi2015NewLine        );Di2015NewLine
11686702Di2015UniqueSeparatorpublic ActionResult InitPageNav(String title)Di2015NewLine{Di2015NewLine      PageModel page = PageNavHelper.GetPageByTitle(title);Di2015NewLine      return PartialView("UserControls/_PageNavPartial", page);Di2015NewLine}Di2015NewLine
11686702Di2015UniqueSeparator@Html.ActionLink("Link text", "action", "controller", new { title = "whatever" }, null)Di2015NewLine
11686702Di2015UniqueSeparatorpublic static MvcHtmlString CreateMenuItems(this UrlHelper url, string action, string text)Di2015NewLine{Di2015NewLine     var menuItem = new TagBuilder("li");Di2015NewLine     var link = new TagBuilder("a");Di2015NewLineDi2015NewLine     //Get current action from route dataDi2015NewLine     var currentAction = (string)helper.RequestContext.RouteData.Values["action"];Di2015NewLine     link.Attributes.Add("href", url.Action(action, "home", new { title = "whatever" }));Di2015NewLineDi2015NewLine     if (currentAction == action)Di2015NewLine     {Di2015NewLine         menuItem.AddCssClass("selected");Di2015NewLine     }Di2015NewLineDi2015NewLine     link.SetInnerText(text);Di2015NewLine     menuItem.InnerHtml = link.ToString();Di2015NewLineDi2015NewLine     return MvcHtmlString.Create(menuItem.ToString());Di2015NewLine }Di2015NewLine
11686726Di2015UniqueSeparator   public frmLoad()Di2015NewLine    {Di2015NewLineDi2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLineDi2015NewLine        string DisplayQuery = "Select * from TableName";Di2015NewLine         MasterDs = SqlHelper.ExecuteDataset(CommonClass.ConnectionString, CommandType.Text, DisplayQuery);Di2015NewLine        MasterDs.Tables[0].Columns.Add("FLAG", typeof(string));Di2015NewLineDi2015NewLine        MainGrid.DataSource = MasterDs.Tables[0];Di2015NewLine        gridview.PopulateColumns();Di2015NewLineDi2015NewLine        gridview.Columns["ID"].VisibleIndex = -1;Di2015NewLine        gridview.Columns["FLAG"].VisibleIndex = -1;Di2015NewLineDi2015NewLine        DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit selectnew = new DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit();Di2015NewLine        gridview.Columns["ColName"].ColumnEdit = selectnew;Di2015NewLine        selectnew.NullText = "";Di2015NewLine        selectnew.ValueChecked = "Y";Di2015NewLine        selectnew.ValueUnchecked = "N";Di2015NewLine        selectnew.ValueGrayed = "-";Di2015NewLineDi2015NewLine    }Di2015NewLine
11686892Di2015UniqueSeparatornull
11686892Di2015UniqueSeparatorvar obj = Serializer.Deserialize<Aggregate>(stream);Di2015NewLineAssert.AreEqual(typeof(Derived), obj.Base.GetType());Di2015NewLine
11686953Di2015UniqueSeparatorusing System;Di2015NewLineusing Microsoft.Office.Interop.Word;Di2015NewLineDi2015NewLinenamespace PageSetupDi2015NewLine{Di2015NewLine    class TestPageOrientationDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var app = new Microsoft.Office.Interop.Word.Application();Di2015NewLine            app.Visible = true;Di2015NewLineDi2015NewLine            //Load DocumentDi2015NewLine            Document document = app.Documents.Open(@"C:\\Temp\\myDocument.docx");Di2015NewLineDi2015NewLine            document.PageSetup.Orientation = WdOrientation.wdOrientLandscape;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11686955Di2015UniqueSeparatorDataBind()
11686965Di2015UniqueSeparatorIHandler handler = (IHandler)Activator.CreateInstance("assemblyname", "typename");Di2015NewLinehandler.IsValidate();Di2015NewLine
11686965Di2015UniqueSeparatorpublic static class HandlerFactory {Di2015NewLine    private static Object factoryLock = new Object();Di2015NewLine    private static List<IHandler> handlers = null;Di2015NewLineDi2015NewLine    public static IHandler Gethandler(String type) {Di2015NewLine        if (handlers == null) {Di2015NewLine            lock (factoryLock) {Di2015NewLine                if (handlers == null) {Di2015NewLine                    IEnumerable<Type> types = typeof(HandlerFactory).Assembly.GetTypes().Where(t => t.GetInterfaces().Contains(typeof(IHandler)));Di2015NewLine                    handlers = types.Select(t => (IHandler)Activator.CreateInstance(t));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return handlers.Where(h => h.Type == type);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IHandler {Di2015NewLine    String Type { get; }Di2015NewLine    Boolean IsValid(String data);Di2015NewLine}Di2015NewLine
11687013Di2015UniqueSeparatorSellingItem
11687013Di2015UniqueSeparatorPurchase
11687013Di2015UniqueSeparatorPurchase
11687013Di2015UniqueSeparatorId
11687014Di2015UniqueSeparatorSystem.Web.Caching.Cache
11687014Di2015UniqueSeparatorSystem.Web
11687096Di2015UniqueSeparatorC:\\Program Files (x86)\\Microsoft\\Contracts\\Languages\\CSharp
11687096Di2015UniqueSeparatorContractExtensions.cs
11687096Di2015UniqueSeparatorContractAbbreviator
11687096Di2015UniqueSeparator[Conditional("DEBUG")]
11687096Di2015UniqueSeparator[ContractVerification(false)]
11687096Di2015UniqueSeparatorpublic static class AssertDi2015NewLine{Di2015NewLine    [ContractAbbreviator]Di2015NewLine    public static void GreaterThan<T>(T value, T lowerBound)Di2015NewLine        where T : IComparable<T>Di2015NewLine    {Di2015NewLine        Contract.Ensures(value.CompareTo(lowerBound) > 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
11687096Di2015UniqueSeparatora.CompareTo(b) > 0
11687096Di2015UniqueSeparatora > b
11687096Di2015UniqueSeparatorstatic int PlusOne(int value)Di2015NewLine{Di2015NewLine    #region ContractDi2015NewLine    Contract.Requires(value > 0);Di2015NewLine    Assert.GreaterThan(value, 0);Di2015NewLine    #endregionDi2015NewLine    return value + 1;Di2015NewLine}Di2015NewLine
11687096Di2015UniqueSeparatorAssert
11687096Di2015UniqueSeparatorx.CompareTo(y) > 0
11687096Di2015UniqueSeparatorx > y
11687096Di2015UniqueSeparatorpublic int CompareTo(MyType t)Di2015NewLine{Di2015NewLine    // Implementation not consistent with '>'Di2015NewLine    return this.field1 == t.field1 ? -1 : 1;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static operator bool >(MyType left, MyType right)Di2015NewLine{Di2015NewLine    // Implementation not consistent with CompareTo()Di2015NewLine    return left.CompareTo(right) <= 0;Di2015NewLine}Di2015NewLine
11687096Di2015UniqueSeparatorCompareTo
11687104Di2015UniqueSeparatorpublic class UrlMessingModule : IHttpModuleDi2015NewLine{Di2015NewLine    public void Init(HttpApplication context)Di2015NewLine    {Di2015NewLine        context.BeginRequest += Application_BeginRequest;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose() { }Di2015NewLineDi2015NewLine    protected void Application_BeginRequest(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var application = (HttpApplication) sender;Di2015NewLine        var request = application.Request;Di2015NewLine        var response = application.Response;Di2015NewLineDi2015NewLine        var url = request.Url.AbsolutePath;Di2015NewLineDi2015NewLine        if (url.Length > 1 && !url.EndsWith("/"))Di2015NewLine        {Di2015NewLine            response.Clear();Di2015NewLine            response.Status = "301 Moved Permanently";Di2015NewLine            response.StatusCode = (int)HttpStatusCode.MovedPermanently;Di2015NewLine            response.AddHeader("Location", url + "/");Di2015NewLine            response.End();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11687187Di2015UniqueSeparatorusing
11687187Di2015UniqueSeparatorusing(var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["IMS"].ConnectionString)Di2015NewLine{Di2015NewLine}Di2015NewLine
11687240Di2015UniqueSeparatorSelectMany
11687240Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<Tuple<T,T>> CartesianProduct<T>(Di2015NewLine            this IEnumerable<T> source,Di2015NewLine            IEnumerable<T> multiplier)Di2015NewLine    {Di2015NewLine        return source.SelectMany(s => multiplier, (s, m) => Tuple.Create(s, m));   Di2015NewLine    }Di2015NewLine}Di2015NewLine
11687240Di2015UniqueSeparatorRange1.CartesianProduct(Range2).Sum(p => p.item1+17*p.item2);Di2015NewLine
11687240Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<TResult> CartesianProduct<T, TResult>(Di2015NewLine            this IEnumerable<T> source,Di2015NewLine            IEnumerable<T> multiplier,Di2015NewLine            Func<T, T, TResult> combiner)Di2015NewLine    {Di2015NewLine        return source.SelectMany(s => multiplier, (s, m) => combiner(s, m));   Di2015NewLine    }Di2015NewLine}Di2015NewLine
11687240Di2015UniqueSeparatorRange1.CartesianProduct(Range2, (x, y) => x+17*y).Sum();Di2015NewLine
11687356Di2015UniqueSeparator tmpSplitter.BringToFront();Di2015NewLine
11687453Di2015UniqueSeparatorChildClassList = BaseClassList.Cast<ChildClass>().ToList();Di2015NewLine
11687453Di2015UniqueSeparatornull
11687453Di2015UniqueSeparatorChildClassList = BaseClassList.Select(x => x as ChildClass).ToList();Di2015NewLine
11687453Di2015UniqueSeparatorChildClassList = BaseClassList.OfType<ChildClass>().ToList();Di2015NewLine
11687495Di2015UniqueSeparatorDownloadFile
11687495Di2015UniqueSeparatorvar client = new WebClient();Di2015NewLineclient.DownloadFile(strURLFileandPath, strFileSaveFileandPath);Di2015NewLine
11687563Di2015UniqueSeparatorvar filePath = System.Reflection.Assembly.GetExecutingAssembly().Location + "\\\\..\\\\..\\\\Resources\\bar.png";Di2015NewLine
11687563Di2015UniqueSeparatorProperties.Resources
11687583Di2015UniqueSeparator Form childForm = new frmMyFORM();Di2015NewLine                                    childForm.MdiParent = this;Di2015NewLine   **==>>>Crashed HERE**            childForm.Show();Di2015NewLine
11687583Di2015UniqueSeparatorchildForm.MdiParent = this;Di2015NewLine
11687681Di2015UniqueSeparatorbnt.Click += (source, e) =>Di2015NewLine{Di2015NewLine    //type the method's code here, using bnt to reference the button Di2015NewLine};Di2015NewLine
11687740Di2015UniqueSeparatorfunction radioMe(e) {Di2015NewLine  if (!e) e = window.event;Di2015NewLine  var sender = e.target || e.srcElement;Di2015NewLineDi2015NewLine  if (sender.nodeName != 'INPUT') return;Di2015NewLine  var checker = sender;Di2015NewLine  var chkBox = document.getElementById('<%= chks.ClientID %>');Di2015NewLine  var chks = chkBox.getElementsByTagName('INPUT');Di2015NewLine  for (i = 0; i < chks.length; i++) {Di2015NewLine      if (chks[i] != checker)Di2015NewLine      chks[i].checked = false;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine<asp:CheckBoxList runat="server" ID="chks">Di2015NewLine  <asp:ListItem>Item</asp:ListItem>Di2015NewLine  <asp:ListItem>Item</asp:ListItem>Di2015NewLine  <asp:ListItem>Item</asp:ListItem>Di2015NewLine  <asp:ListItem>Item</asp:ListItem>Di2015NewLine</asp:CheckBoxList>Di2015NewLine
11687740Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        chks.Attributes.Add("onclick", "radioMe(event);");Di2015NewLine}Di2015NewLine
11687740Di2015UniqueSeparatorRadioButtonList
11687743Di2015UniqueSeparator[AttributeUsage(AttributeTargets.Property, Inherited = true)]Di2015NewLine[Serializable]Di2015NewLinepublic class MappingAttribute : AttributeDi2015NewLine{Di2015NewLine    public string ColumnName = null;Di2015NewLine}Di2015NewLine
11687743Di2015UniqueSeparatorpublic class ProductDi2015NewLine{Di2015NewLine    [Mapping(ColumnName = "product_id")]Di2015NewLine    public int ProductId { get; private set; }Di2015NewLineDi2015NewLine    [Mapping(ColumnName = "supplier_id")]Di2015NewLine    public int SupplierId { get; private set; }Di2015NewLineDi2015NewLine    [Mapping(ColumnName = "name")]Di2015NewLine    public string Name { get; private set; }Di2015NewLine    [Mapping(ColumnName = "price")]Di2015NewLine    public decimal Price { get; private set; }Di2015NewLine    [Mapping(ColumnName = "total_stock")]Di2015NewLine    public int Stock { get; private set; }Di2015NewLine    [Mapping(ColumnName = "pending_stock")]Di2015NewLine    public int PendingStock { get; private set; }Di2015NewLine}Di2015NewLine
11687743Di2015UniqueSeparatorT MapToClass<T>(SqlDataReader reader) where T : classDi2015NewLine{Di2015NewLine        T returnedObject = Activator.CreateInstance<T>();Di2015NewLine        PropertyInfo[] modelProperties = returnedObject.GetType().GetProperties();Di2015NewLine        for (int i = 0; i < modelProperties.Length; i++)Di2015NewLine        {Di2015NewLine            MappingAttribute[] attributes = Di2015NewLine                modelProperties[i].GetCustomAttributes(typeof(MappingAttribute), true);Di2015NewLine            if (attributes.Length > 0 && attributes[0].ColumnName != null)Di2015NewLine                modelProperties[i].SetValue(returnedObject, Convert.ChangeType(reader[attributes[0].ColumnName], modelProperties[i].PropertyType), null);Di2015NewLine        }Di2015NewLine        return returnedObject;Di2015NewLine}Di2015NewLine
11687753Di2015UniqueSeparatorRequest header = new Request { RequestDetail = new RequestDetail() }Di2015NewLine
11687812Di2015UniqueSeparator// Any reason for FirstOrDefault rather than SingleOrDefault?Di2015NewLinevar purchase = db.Purchases.FirstOrDefault(p => p.PurchaseId == 1);Di2015NewLineDi2015NewLineif (purchase != null)Di2015NewLine{Di2015NewLine    var total = purchase.SellingItemsDi2015NewLine                        .Sum(x => Convert.ToInt32(x.Price));Di2015NewLine    ...Di2015NewLine}Di2015NewLine// TODO: Work out what to do if there aren't any such purchasesDi2015NewLine
11687812Di2015UniqueSeparatorPrice
11687812Di2015UniqueSeparatorint
11687812Di2015UniqueSeparatordecimal
11687855Di2015UniqueSeparatorvar
11687855Di2015UniqueSeparator var x = new Whatever();Di2015NewLine
11687855Di2015UniqueSeparator Whatever x = new Whatever();Di2015NewLine
11687973Di2015UniqueSeparatorList<T>.Exists
11687973Di2015UniqueSeparatorFindIndex
11687973Di2015UniqueSeparatorpublic int FindIndex(int startIndex, int count, Predicate<T> match)Di2015NewLine{Di2015NewLine    if (startIndex > this._size)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.startIndex, ExceptionResource.ArgumentOutOfRange_Index);Di2015NewLine    }Di2015NewLine    if (count < 0 || startIndex > this._size - count)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.count, ExceptionResource.ArgumentOutOfRange_Count);Di2015NewLine    }Di2015NewLine    if (match == null)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.match);Di2015NewLine    }Di2015NewLine    int num = startIndex + count;Di2015NewLine    for (int i = startIndex; i < num; i++)Di2015NewLine    {Di2015NewLine        if (match(this._items[i]))Di2015NewLine        {Di2015NewLine            return i;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return -1;Di2015NewLine}Di2015NewLine
11687973Di2015UniqueSeparatorforeach
11688076Di2015UniqueSeparatorpublic override bool Equals(Object emp)Di2015NewLine{Di2015NewLine    // If parameter is null return false.Di2015NewLine    if (emp == null)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine     // If parameter cannot be cast to Point return false.Di2015NewLine    Employee e = emp as Employee;Di2015NewLine    if ((System.Object)e == null)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Return true if the fields matchDi2015NewLine    return (Name == emp.Name) && (Age == emp.Age);Di2015NewLine}Di2015NewLine
11688076Di2015UniqueSeparatorif(emp1.Equals(emp2))Di2015NewLine{ ... }Di2015NewLine
11688076Di2015UniqueSeparatorif(emp1 == emp2)Di2015NewLine{ ... }Di2015NewLine
11688090Di2015UniqueSeparatorLocalResource localResource = RoleEnvironment.GetLocalResource("DownloadedTemplates");Di2015NewLine
11688186Di2015UniqueSeparatorFlowLayoutPanel
11688186Di2015UniqueSeparatorTableLayoutPanel
11688253Di2015UniqueSeparatorRegisterRoutes
11688253Di2015UniqueSeparator"{controller}/{action}/{id}"
11688253Di2015UniqueSeparatorroutes.MapRoute("AddBuilding", "configuration/building/add",Di2015NewLine  new { controller = "Configuration", action = "AddBuilding" });Di2015NewLine
11688253Di2015UniqueSeparator{id}
11688253Di2015UniqueSeparatorroutes.MapRoute("EditBuilding", "configuration/building/edit/{id}",Di2015NewLine  new { controller = "Configuration", action = "EditBuilding" });Di2015NewLine
11688253Di2015UniqueSeparatorid
11688253Di2015UniqueSeparator/Building/Edit
11688253Di2015UniqueSeparatorpublic class ConfigurationController{Di2015NewLineDi2015NewLine  ////HTTP GET /BuildingsDi2015NewLine  /// DISPLAYS BUILDINGSDi2015NewLine  public ActionResult Buildings(){Di2015NewLine    //get model and return view that shows all buildings with perhaps a Di2015NewLine    //partial in that for creating a new one (or you can use another action)Di2015NewLine    //The HTML form on that view will POST to the URL handled by the method below.Di2015NewLine  }Di2015NewLineDi2015NewLine  ////HTTP POST /BuildingsDi2015NewLine  /// CREATES A NEW BUILDINGDi2015NewLine  //use ActionName here to make this and the method above accessible throughDi2015NewLine  //the same URLDi2015NewLine  [ActionName("Buildings")]Di2015NewLine  [HttpPost]Di2015NewLine  public ActionResult CreateBuilding(BuildingModel model){Di2015NewLine    //validate the model, create the object and return the sameDi2015NewLine    //view as the Buildings() method above (after re-loading all theDi2015NewLine    //buildings.  Or, you can issue a redirect, effectively transferringDi2015NewLine    //control back to the method above.Di2015NewLine  }Di2015NewLineDi2015NewLine  ////HTTP GET /Configuration/Building/idDi2015NewLine  ///DISPLAYS A BUILDINGDi2015NewLine  public ActionResult Building(int id){Di2015NewLine    //get building and return view, which also contains Edit functionalityDi2015NewLine  }Di2015NewLineDi2015NewLine  ////HTTP POST /Configuration/Building/idDi2015NewLine  ///EDITS A BUILDINGDi2015NewLine  [HttpPost]Di2015NewLine  public ActionResult Building(int id, BuildingModel model){Di2015NewLine    //very similar to the CreateBuilding method - and again you mightDi2015NewLine    //either simply return a building view at the end, or redirectDi2015NewLine    //to the method above.Di2015NewLineDi2015NewLine    //Note that we don't need [ActionName] here because this and theDi2015NewLine    //get method can have the same method names, because they are overloadsDi2015NewLine    //i.e. since they have different method signatures we can call them the sameDi2015NewLine    //thing in code.Di2015NewLine  }Di2015NewLine}Di2015NewLine
11688253Di2015UniqueSeparator//handles both GET and POST to this URL, i.e. our view & edit operationsDi2015NewLineroutes.MapRoute("IndividualBuilding", "/configuration/buildings/{id}", Di2015NewLine  new { controller = "Configuration", action = "Building" });Di2015NewLineroutes.MapRoute("Buildings", "/configuration/buildings",Di2015NewLine  new { controller = "Configuration", action = "Buildings" });Di2015NewLine
11688253Di2015UniqueSeparator//handles both GET and POST to this URL, i.e. our view & edit operationsDi2015NewLineroutes.MapRoute("Individual", "/configuration/{controller}/{id}", Di2015NewLine  new { controller = "Configuration", action = "List" });Di2015NewLine//again, handles GET and POSTDi2015NewLineroutes.MapRoute("Collection", "/configuration/{controller}",Di2015NewLine  new { controller = "Configuration", action = "Single" });Di2015NewLine
11688253Di2015UniqueSeparatorBuildings
11688253Di2015UniqueSeparatorActionName
11688253Di2015UniqueSeparatorList
11688253Di2015UniqueSeparatorBuilding
11688253Di2015UniqueSeparatorSingle
11688253Di2015UniqueSeparatorroutes.MapRoute("Default", "{controller}/{action}/{id}", Di2015NewLine  new { controller = "Default", action="Home", id = UrlParameter.Optional });Di2015NewLine
11688253Di2015UniqueSeparator/Buildings/Single/1
11688253Di2015UniqueSeparator/Groups
11688253Di2015UniqueSeparator[ActionName]
11688253Di2015UniqueSeparator":Single"
11688253Di2015UniqueSeparator":List"
11688568Di2015UniqueSeparator.FirstOrDefault()
11688568Di2015UniqueSeparatorstring sGender;Di2015NewLinevar radioButton = groupBox4.Controls.OfType<RadioButton>()Di2015NewLine                    .Where(r => r.Checked).FirstOrDefault();Di2015NewLineif (radioButton == null)Di2015NewLine{Di2015NewLine    sGender = "";Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    sGender = radioButton.Tag.ToString()Di2015NewLine}Di2015NewLine
11688568Di2015UniqueSeparatorstring sGender = groupBox4.Controls.OfType<RadioButton>().Any(r => r.Checked)?Di2015NewLine    groupBox4.Controls.OfType<RadioButton>().Where(r => r.Checked)Di2015NewLine        .First().Tag.ToString(): "";Di2015NewLine
11688611Di2015UniqueSeparatorValue
11688611Di2015UniqueSeparatorToolParameter
11688611Di2015UniqueSeparatorTool
11688611Di2015UniqueSeparatorParameters
11688611Di2015UniqueSeparator<StackPanel>Di2015NewLine    <TextBlock Text="{Binding Title}"/>Di2015NewLine    <TextBlock Text="{Binding Description}"/>Di2015NewLineDi2015NewLine    <!-- showing a ListBox, but can be any ItemsControl -->Di2015NewLine    <ListBox ItemsSource="{Binding Parameters}">Di2015NewLine        <ListBox.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <TextBox Text="{Binding Value}"/>Di2015NewLine            </DataTemplate>Di2015NewLine        </ListBox.ItemTemplate>Di2015NewLine    </ListBox>Di2015NewLine</StackPanel>Di2015NewLine
11688611Di2015UniqueSeparatorTool
11688611Di2015UniqueSeparatorToolParameter
11688808Di2015UniqueSeparatorfalse
11688958Di2015UniqueSeparator1. Add a new window NewWindow  Di2015NewLineDi2015NewLine2. var newWindow= new NewWindow();Di2015NewLinenewWindow.Show(); // worksDi2015NewLineDi2015NewLine//Or use ShowDialog, if parant wait close of child windowDi2015NewLinenewWindow.ShowDialog();Di2015NewLine
11689035Di2015UniqueSeparatorList<Zone> listOfZone = zoneSet.ZoneList.Where(e => e.Any(p => p.MemberWWPN == inputWWPN)).ToList();Di2015NewLine
11689099Di2015UniqueSeparatorInclude
11689099Di2015UniqueSeparatordb.OrderDetails.Include(o => o.Product);Di2015NewLinedb.OrderDetails.Include(o => o.Pack);Di2015NewLinedb.OrderDetails.Include(o => o.Order);Di2015NewLinereturn View(db.OrderDetails);Di2015NewLine
11689170Di2015UniqueSeparatorshowFinalReviewAlert();
11689170Di2015UniqueSeparatorOnClientClick
11689170Di2015UniqueSeparator<input type="submit" Di2015NewLine       id="btnSaveChanges" Di2015NewLine       onclick="return showFinalReviewAlert();WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("btnSaveChanges;, "", true, "", "", false, false))" Di2015NewLine       name="btnSaveChanges">Di2015NewLine
11689170Di2015UniqueSeparatoronclick="return showFinalReviewAlert();WebForm_DoPostBackWithOptions....Di2015NewLine
11689170Di2015UniqueSeparatorshowFinalReviewAlert()
11689170Di2015UniqueSeparatorWebForm_DoPostBackWithOptions
11689170Di2015UniqueSeparator<input type="submit">
11689170Di2015UniqueSeparatorshowFinalReviewAlert
11689170Di2015UniqueSeparatorfalse
11689170Di2015UniqueSeparatorOnClientClick
11689170Di2015UniqueSeparatorOnClientClick="if(showFinalReviewAlert()==false){return false;}"Di2015NewLine
11689170Di2015UniqueSeparatorshowFinalReviewAlert
11689170Di2015UniqueSeparatorfalse
11689170Di2015UniqueSeparatortrue
11689170Di2015UniqueSeparatorshowFinalReviewAlert()
11689170Di2015UniqueSeparatorreturn
11689170Di2015UniqueSeparatorOnClientClick="showFinalReviewAlert();"Di2015NewLine
11689237Di2015UniqueSeparatorWindowState
11689237Di2015UniqueSeparatorNormal
11689325Di2015UniqueSeparatorstring stringOne = "ThE    OlYmpics 2012!";Di2015NewLinestring stringTwo = "THe\\r\\n        OlympiCs 2012!";Di2015NewLineDi2015NewLinestring fixedStringOne = Regex.Replace(stringOne, @"\\s+", String.Empty);Di2015NewLinestring fixedStringTwo = Regex.Replace(stringTwo, @"\\s+", String.Empty);Di2015NewLineDi2015NewLinebool isEqual = String.Equals(fixedStringOne, fixedStringTwo,Di2015NewLine                              StringComparison.OrdinalIgnoreCase);Di2015NewLineDi2015NewLineConsole.WriteLine(isEqual);Di2015NewLineConsole.Read();Di2015NewLine
11689343Di2015UniqueSeparatorIN
11689343Di2015UniqueSeparatorOR
11689343Di2015UniqueSeparator WHERE id IN (1,2,3,4)Di2015NewLine
11689343Di2015UniqueSeparatorstring.Join
11689343Di2015UniqueSeparatorstring query = "SELECT ValueIWantToReturn from table WHERE ID IN ("Di2015NewLine    + string.Join(",", ids)Di2015NewLine    + ")";Di2015NewLine
11689492Di2015UniqueSeparatorprivate void textBox1_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var searchValue = textBox1.Text.Trim();//you can add a ToUpper();Di2015NewLine        var qry = (from p in dc.ProductsDi2015NewLine                   where p.ProductName.StartsWith(searchValue);//you can add a ToUpper() to p.ProductNameDi2015NewLine                   select p).ToList();Di2015NewLine        productDataGridView.DataSource = qry;Di2015NewLine    }Di2015NewLine
11689551Di2015UniqueSeparator fTextSearch = Regex.Replace(fTextSearch, ".*(or|and|etc).*", "\\"$&\\"");Di2015NewLine
11689739Di2015UniqueSeparatorusing(Bitmap pages = (Bitmap)Image.FromFile(SamePolicyPics[0])){Di2015NewLine        int frame = 0;Di2015NewLineDi2015NewLine        foreach (string picture in SamePolicyPics)Di2015NewLine        {Di2015NewLine            if (frame == 0)Di2015NewLine            {Di2015NewLine                pages.Save(AppVars.FinalPolicyImagesDirectory + picture.Substring(29, 7)  + ".tiff", info, ep);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.FrameDimensionPage);Di2015NewLine                using(Bitmap bm = (Bitmap)Image.FromFile(picture)){Di2015NewLine                    pages.SaveAdd(bm, ep);Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            if (frame == SamePolicyPics.Length - 1)Di2015NewLine            {Di2015NewLine                ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.Flush);Di2015NewLine                pages.SaveAdd(ep);Di2015NewLine            }Di2015NewLine            frame++;Di2015NewLine        }}Di2015NewLine
11689837Di2015UniqueSeparator// MainWindow window = new MainWindow();Di2015NewLinethis.WindowState = WindowState.Minimized;Di2015NewLine
11689842Di2015UniqueSeparator<asp:label ID="Label1" runat="server" text="Label"></asp:label>    Di2015NewLine
11689842Di2015UniqueSeparatorPage_Load
11689842Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Label1.Text = (string) Session["sesionicontrol"];Di2015NewLine    }Di2015NewLine
11689842Di2015UniqueSeparatorlogin.NombreUsuario
11689842Di2015UniqueSeparatorSession["sesionicontrol"]
11689842Di2015UniqueSeparatorlogin.NombreUsuario
11689842Di2015UniqueSeparatorstring
11689842Di2015UniqueSeparatorSession
11689842Di2015UniqueSeparator<asp:TextBox ID="TextBox1" runat="server"></asp:TextBox>Di2015NewLine<asp:Button ID="Button1" runat="server" onclick="Button1_Click" Text="Button" />Di2015NewLine
11689842Di2015UniqueSeparator    protected void Button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Session["SomeKey"] = TextBox1.Text;Di2015NewLine        Response.Redirect("WebForm2.aspx"); Di2015NewLine    }Di2015NewLine
11689842Di2015UniqueSeparatorTextBox
11689842Di2015UniqueSeparator<asp:label ID="Label1" runat="server" text="Label"></asp:label>    Di2015NewLine
11689842Di2015UniqueSeparatorpublic partial class WebForm2 : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Label1.Text = (string) Session["someKey"];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11689842Di2015UniqueSeparatorSomeKey
11689842Di2015UniqueSeparatorLabel
11689907Di2015UniqueSeparatorTimer.SynchronizationObject
11689907Di2015UniqueSeparatorSystem.Windows.Forms.Timer
11689907Di2015UniqueSeparatorControl.Invoke
11689907Di2015UniqueSeparatorControl.BeginInvoke
11689918Di2015UniqueSeparatorint rows = 0;Di2015NewLineif(rdr1.Read()) {Di2015NewLine    rows = (int) rdr1["Rows"];Di2015NewLine}Di2015NewLine
11690093Di2015UniqueSeparatorbattle.BattleLoop()
11690093Di2015UniqueSeparatorbattle = new Battle(myhero, monster);
11690152Di2015UniqueSeparatorvar Office = profile[PropertyConstants.Office] != null ? profile[PropertyConstants.Office].Value : String.Empty; Di2015NewLine
11690170Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string data = @"This is a long text Di2015NewLine@[Alphanumeric1](Alphanumeric2:Alphanumeric3) again long text Di2015NewLine@[Alphanumeric11](Alphanumeric22:Alphanumeric33) again long textDi2015NewLine@[Alphanumeric111](Alphanumeric222:Alphanumeric333)";Di2015NewLineDi2015NewLine        Debug.WriteLine(ReplaceData(data));Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string ReplaceData(string data)Di2015NewLine    {Di2015NewLine        return Regex.Replace(data, @"@\\[.+?\\]\\(.*?:(.*?)\\)", match => match.Groups[1].ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11690249Di2015UniqueSeparator<ControlTemplate TargetType="Window" x:Key="WindowTemplate">Di2015NewLine    <AdornerDecorator>Di2015NewLine        <Grid Background="{TemplateBinding Background}">Di2015NewLine            <Grid.RowDefinitions>Di2015NewLine                <RowDefinition Height="Auto" />Di2015NewLine                <RowDefinition Height="*" />Di2015NewLine                <RowDefinition Height="Auto" />Di2015NewLine            </Grid.RowDefinitions>Di2015NewLine            <Control x:Name="FocusCatcher"></Control>Di2015NewLine            <TextBlock>Menu Section</TextBlock>Di2015NewLine            <ContentPresenter Grid.Row="1" />Di2015NewLine            <StatusBar Height="23" VerticalAlignment="Bottom" Grid.Row="2">Di2015NewLine                <TextBlock Text="Current Editing Mode" />Di2015NewLine            </StatusBar>Di2015NewLine        </Grid>Di2015NewLine    </AdornerDecorator>Di2015NewLine</ControlTemplate>Di2015NewLine
11690427Di2015UniqueSeparator       protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine       {Di2015NewLine        String Process = e.Row.Cells[0].Text;Di2015NewLine        HyperLink link = new HyperLink();Di2015NewLine        link.Text = Process;Di2015NewLine        link.NavigateUrl = String.Format("~/IndexSummary.aspx?Process={0}&Machine={1}&Date={2}", Process, Request.QueryString["Machine"], Request.QueryString["Date"]);Di2015NewLine        e.Row.Cells[0].Controls.Add(link);Di2015NewLineDi2015NewLine       }Di2015NewLine
11690433Di2015UniqueSeparatorIDisposable
11690433Di2015UniqueSeparator    public static string Encrypt(string toencrypt, string key, bool usehashing = true)Di2015NewLine    {Di2015NewLine        byte[] keyArray;Di2015NewLineDi2015NewLine        // If hashing use get hash code regards to your keyDi2015NewLine        if (usehashing)Di2015NewLine        {Di2015NewLine            using (var hashmd5 = new MD5CryptoServiceProvider())Di2015NewLine            {Di2015NewLine                keyArray = hashmd5.ComputeHash(Encoding.UTF8.GetBytes(key));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            keyArray = Encoding.UTF8.GetBytes(key);Di2015NewLine        }Di2015NewLineDi2015NewLine        // set the secret key for the tripleDES algorithmDi2015NewLine        // mode of operation. there are other 4 modes.Di2015NewLine        // We choose ECB(Electronic code Book)Di2015NewLine        // padding mode(if any extra byte added)Di2015NewLine        using (var tdes = new TripleDESCryptoServiceProviderDi2015NewLine        {Di2015NewLine            Key = keyArray,Di2015NewLine            Mode = CipherMode.ECB,Di2015NewLine            Padding = PaddingMode.PKCS7Di2015NewLine        })Di2015NewLine        using (var transform = tdes.CreateEncryptor())Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                var toEncryptArray = Encoding.UTF8.GetBytes(toencrypt);Di2015NewLineDi2015NewLine                // transform the specified region of bytes array to resultArrayDi2015NewLine                var resultArray = transform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);Di2015NewLineDi2015NewLine                // Return the encrypted data into unreadable string formatDi2015NewLine                return Convert.ToBase64String(resultArray, 0, resultArray.Length);Di2015NewLine            }Di2015NewLine            catch (Exception)Di2015NewLine            {Di2015NewLine                return string.Empty;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string Decrypt(string todecrypt, string key, bool usehashing = true)Di2015NewLine    {Di2015NewLine        byte[] toEncryptArray;Di2015NewLineDi2015NewLine        // get the byte code of the stringDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            toEncryptArray = Convert.FromBase64String(todecrypt.Replace(" ", "+")); // The replace happens only when spaces exist in the string (hence not a Base64 string in the first place).Di2015NewLine        }Di2015NewLine        catch (Exception)Di2015NewLine        {Di2015NewLine            return string.Empty;Di2015NewLine        }Di2015NewLineDi2015NewLine        byte[] keyArray;Di2015NewLineDi2015NewLine        if (usehashing)Di2015NewLine        {Di2015NewLine            // if hashing was used get the hash code with regards to your keyDi2015NewLine            using (var hashmd5 = new MD5CryptoServiceProvider())Di2015NewLine            {Di2015NewLine                keyArray = hashmd5.ComputeHash(Encoding.UTF8.GetBytes(key));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            // if hashing was not implemented get the byte code of the keyDi2015NewLine            keyArray = Encoding.UTF8.GetBytes(key);Di2015NewLine        }Di2015NewLineDi2015NewLine        // set the secret key for the tripleDES algorithmDi2015NewLine        // mode of operation. there are other 4 modes. Di2015NewLine        // We choose ECB(Electronic code Book)Di2015NewLine        // padding mode(if any extra byte added)Di2015NewLine        using (var tdes = new TripleDESCryptoServiceProviderDi2015NewLine        {Di2015NewLine            Key = keyArray,Di2015NewLine            Mode = CipherMode.ECB,Di2015NewLine            Padding = PaddingMode.PKCS7Di2015NewLine        })Di2015NewLine        using (var transform = tdes.CreateDecryptor())Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                var resultArray = transform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);Di2015NewLineDi2015NewLine                // return the Clear decrypted TEXTDi2015NewLine                return Encoding.UTF8.GetString(resultArray);Di2015NewLine            }Di2015NewLine            catch (Exception)Di2015NewLine            {Di2015NewLine                return string.Empty;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11690526Di2015UniqueSeparatorCA
11690526Di2015UniqueSeparatorCA
11690526Di2015UniqueSeparatorOR
11690526Di2015UniqueSeparatorAZ
11690526Di2015UniqueSeparatorOR
11690526Di2015UniqueSeparatorWA
11690526Di2015UniqueSeparatorCA
11690526Di2015UniqueSeparatorCA
11690526Di2015UniqueSeparatorWA
11690571Di2015UniqueSeparatorFileStream
11690769Di2015UniqueSeparatorthis.className
11690769Di2015UniqueSeparator$(this).attr('class')
11690769Di2015UniqueSeparatorif($(this).attr('class') == "switchRight") {Di2015NewLineDi2015NewLine    $(this).removeClass("switchRight");Di2015NewLine    $(this).addClass("switchLeft");Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineelse if ($(this).attr('class') == "switchLeft") {Di2015NewLine    $(this).removeClass("switchLeft");Di2015NewLine    $(this).addClass("switchRight");Di2015NewLine    break;Di2015NewLineDi2015NewLine}Di2015NewLine
11690769Di2015UniqueSeparatorif(this.className == "switchRight") {Di2015NewLineDi2015NewLine    $(this).removeClass("switchRight");Di2015NewLine    $(this).addClass("switchLeft");Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineelse if (this.className == "switchLeft") {Di2015NewLine    $(this).removeClass("switchLeft");Di2015NewLine    $(this).addClass("switchRight");Di2015NewLine    break;Di2015NewLineDi2015NewLine}Di2015NewLine
11690814Di2015UniqueSeparatorfloat fontHeight = e.Graphics.MeasureString("ABC", Font).Height;Di2015NewLinee.Graphics.DrawString("ABC", Font, b, new RectangleF(0, Height / 2.0f - fontHeight/2.0f, Width, Height), format);Di2015NewLine
11690963Di2015UniqueSeparatorfinallyDi2015NewLine{Di2015NewLine    if(conn!=null) conn.Close();Di2015NewLine}Di2015NewLine
11690963Di2015UniqueSeparatorFetchAds()
11691135Di2015UniqueSeparator<a href="https://ag.de/goto.asp?id=@(Model.LinkDirect)">My direct link</a> Di2015NewLine
11691139Di2015UniqueSeparatorDescrStrDetail
11691139Di2015UniqueSeparatordsd
11691139Di2015UniqueSeparatorMain
11691157Di2015UniqueSeparatorWebClient client = new WebClient(); Di2015NewLineclient.DownloadProgressChanged += new DownloadProgressChangedEventHandler(DownloadProgressCallback); Di2015NewLineclient.DownloadFileCompleted += new AsyncCompletedEventHandler(DownloadFileCallBack2);Di2015NewLinebackgroundWorker1.RunWorkerAsync(client); Di2015NewLineDi2015NewLineDi2015NewLineprivate void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)   Di2015NewLine{   Di2015NewLine    WebClient client = (WebClient)e.Argument;   Di2015NewLine    client.DownloadFile(textBox1.Text, @"D:\\test\\test.zip");   Di2015NewLineDi2015NewLine}   Di2015NewLine
11691190Di2015UniqueSeparator    public static string ToHexString(this byte[] bytes)Di2015NewLine    {Di2015NewLine        return bytes == null ? string.Empty : BitConverter.ToString(bytes).Replace("-", string.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static byte[] FromHexString(this string hexString)Di2015NewLine    {Di2015NewLine        if (hexString == null)Di2015NewLine        {Di2015NewLine            return new byte[0];Di2015NewLine        }Di2015NewLineDi2015NewLine        var numberChars = hexString.Length;Di2015NewLine        var bytes = new byte[numberChars / 2];Di2015NewLineDi2015NewLine        for (var i = 0; i < numberChars; i += 2)Di2015NewLine        {Di2015NewLine            bytes[i / 2] = Convert.ToByte(hexString.Substring(i, 2), 16);Di2015NewLine        }Di2015NewLineDi2015NewLine        return bytes;Di2015NewLine    }Di2015NewLine
11691295Di2015UniqueSeparator <asp:XmlDataSource ID="DataSource1" runat="server" DataFile="C:/Parents.xml"></asp:XmlDataSource>Di2015NewLine<asp:TreeView ID="tvParents" runat="server" DataSourceId ="DataSource1">Di2015NewLine   <DataBindings>Di2015NewLine     <asp:TreeNodeBinding DataMember="Parent" TextField="#InnerText" />Di2015NewLine     <asp:TreeNodeBinding DataMember="Child" TextField="#InnerText" />Di2015NewLine   </DataBindings>Di2015NewLine</asp:TreeView>Di2015NewLine
11691399Di2015UniqueSeparatorconnection establish_connection();Di2015NewLine
11691399Di2015UniqueSeparatorconnection c = establish_connection();Di2015NewLine
11691399Di2015UniqueSeparatorsocket
11691399Di2015UniqueSeparatorconnection
11691399Di2015UniqueSeparatorconnection
11691399Di2015UniqueSeparatorconnection
11691413Di2015UniqueSeparatorFile.Copy(path, path2)
11691413Di2015UniqueSeparatorstring path = Directory.GetCurrentDirectory();
11691413Di2015UniqueSeparatorBitmap myBmp = Bitmap.FromFile("path here");Di2015NewLine
11691413Di2015UniqueSeparatorDataGridView
11691413Di2015UniqueSeparatorDataGridViewImageColumn
11691413Di2015UniqueSeparatoryourDataGridView.Rows.Add(<column1 value>, <column2 value>, myBmp, <column3 value>, <column4 value>);Di2015NewLine
11691422Di2015UniqueSeparatorpublic class MyTreeView : TreeViewDi2015NewLine{Di2015NewLine    public bool GroupContainsSnippet(string group, string snippetName)Di2015NewLine    {Di2015NewLine        return Nodes[group] != null && Nodes[group].Nodes.ContainsKey(snippetName);Di2015NewLine    }    Di2015NewLine}Di2015NewLine
11691488Di2015UniqueSeparatorou = System.DirectoryServices.DirectoryEntry("LDAP://ou=Users,dc=whatever,dc=something,dc=localetc")Di2015NewLinesearch = System.DirectoryServices.DirectorySearcher(ou, "(samAccountName="+acc"+")", Array[str](["distinguishedName"]]))Di2015NewLineresult = search.FindAll() # note 1Di2015NewLineif result.Count != 1:Di2015NewLine    raise BadErrorDi2015NewLineelse:Di2015NewLine    ent = System.DirectoryServices.DirectoryEntry(result[0].Properties["distinguishedName"][0])Di2015NewLine    ent.Username = admin # note 2Di2015NewLine    ent.Password = pwdDi2015NewLine    ent.Invoke("SetPassword", Array[object](["newpassword!"]))Di2015NewLine    ent.Properties["LockOutTime"].Value = 0Di2015NewLine    ent.CommitChanges()Di2015NewLine
11691519Di2015UniqueSeparatorpublic class Bar : Foo<A>     Di2015NewLine{         Di2015NewLine  private static String _tableName = "ATable";Di2015NewLine  public String  TableName {get {return _tableName;}}Di2015NewLine  public Bar() : base(_tableName)         Di2015NewLine  {         Di2015NewLine  }     Di2015NewLine} Di2015NewLine
11691719Di2015UniqueSeparatorlock
11691719Di2015UniqueSeparatorMutex
11691772Di2015UniqueSeparatorpublic class LoggingModule : ModuleDi2015NewLine{Di2015NewLine    protected override void Load(ContainerBuilder builder)Di2015NewLine    {Di2015NewLine        builder.Register((c, p) => GetLogger(p.TypedAs<Type>()));Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void AttachToComponentRegistration(Di2015NewLine        IComponentRegistry registry, IComponentRegistration registration)Di2015NewLine    {Di2015NewLine        registration.Preparing +=Di2015NewLine            (sender, args) =>Di2015NewLine            {Di2015NewLine                var forType = args.Component.Activator.LimitType;Di2015NewLineDi2015NewLine                var logParameter = new ResolvedParameter(Di2015NewLine                    (p, c) => p.ParameterType == typeof (ILog),Di2015NewLine                    (p, c) => c.Resolve<ILog>(TypedParameter.From(forType)));Di2015NewLineDi2015NewLine                args.Parameters = args.Parameters.Union(new[] {logParameter});Di2015NewLine            };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static ILog GetLogger(Type type)Di2015NewLine    {Di2015NewLine        return new Log4NetLogger(type);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface ILogDi2015NewLine{Di2015NewLine    void Debug(string format, params object[] args);Di2015NewLine    void Info(string format, params object[] args);Di2015NewLine    void Warn(string format, params object[] args);Di2015NewLineDi2015NewLine    void Error(string format, params object[] args);Di2015NewLine    void Error(Exception ex);Di2015NewLine    void Error(Exception ex, string format, params object[] args);Di2015NewLineDi2015NewLine    void Fatal(Exception ex, string format, params object[] args);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Log4NetLogger : ILogDi2015NewLine{Di2015NewLine    private readonly log4net.ILog _log;Di2015NewLineDi2015NewLine    static Log4NetLogger()Di2015NewLine    {Di2015NewLine        XmlConfigurator.Configure();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Log4NetLogger(Type type)Di2015NewLine    {Di2015NewLine        _log = LogManager.GetLogger(type);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Debug(string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.DebugFormat(format, args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Info(string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.InfoFormat(format, args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Warn(string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.WarnFormat(format, args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Error(string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.ErrorFormat(format, args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Error(Exception ex)Di2015NewLine    {Di2015NewLine        _log.Error("", ex);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Error(Exception ex, string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.Error(string.Format(format, args), ex);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Fatal(Exception ex, string format, params object[] args)Di2015NewLine    {Di2015NewLine        _log.Fatal(string.Format(format, args), ex);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11692030Di2015UniqueSeparator<UserControl.Resources>Di2015NewLine    <Storyboard Name="FadeOutStoryboard" x:Key="FadeOutStoryboard" >Di2015NewLine        <DoubleAnimation Storyboard.TargetName="userControlStatusPanel" Di2015NewLine                         Storyboard.TargetProperty="Opacity" Di2015NewLine                         From="1" To="0" Duration="0:0:3" RepeatBehavior="Forever"  />Di2015NewLine    </Storyboard>Di2015NewLine</UserControl.Resources>Di2015NewLineDi2015NewLine        Storyboard sb = (Storyboard)UserControl.FindResource("FadeOutStoryboard");Di2015NewLine        LinearGradientBrush myBrush = new LinearGradientBrush();Di2015NewLine        myBrush.EndPoint = new Point(0, 0);Di2015NewLine        myBrush.StartPoint = new Point(1, 1);Di2015NewLineDi2015NewLine        if (runProgress.Percent == 100)Di2015NewLine        {Di2015NewLine            myBrush.GradientStops.Add(new GradientStop(Colors.Green, 0));Di2015NewLine            myBrush.GradientStops.Add(new GradientStop(Colors.Silver, 1));Di2015NewLine            sb.Stop();Di2015NewLine        }Di2015NewLine        else (runProgress.Percent <= 100)Di2015NewLine        {Di2015NewLine            myBrush.GradientStops.Add(new GradientStop(Colors.Red, 0));Di2015NewLine            myBrush.GradientStops.Add(new GradientStop(Colors.Silver, 1));Di2015NewLine            sb.Begin();Di2015NewLine        }Di2015NewLine        UserControl.borderMain.Background = myBrush;Di2015NewLine    }Di2015NewLine
11692036Di2015UniqueSeparatorGrabFile.configData.CreateReader()
11692036Di2015UniqueSeparatorXmlReader
11692036Di2015UniqueSeparatorXmlReader
11692036Di2015UniqueSeparatorXDocument
11692036Di2015UniqueSeparatorXmlReader
11692037Di2015UniqueSeparatorUsers.ItemsSource
11692037Di2015UniqueSeparatorItemCollection
11692037Di2015UniqueSeparatorItemCollection
11692037Di2015UniqueSeparatorCollectionView
11692037Di2015UniqueSeparatorCollectionViewSource.GetDefaultView
11692037Di2015UniqueSeparatorICollectionView
11692037Di2015UniqueSeparatorCollectionView
11692037Di2015UniqueSeparatorListCollectionView
11692037Di2015UniqueSeparatorvar view = CollectionViewSource.GetDefaultView(Users.ItemsSource);Di2015NewLineConsole.WriteLine(view.GetType());Di2015NewLine
11692096Di2015UniqueSeparatorStream outstream = Stream.Null;Di2015NewLine...Di2015NewLinenewdoc.Save(outstream);Di2015NewLine
11692153Di2015UniqueSeparatorref
11692153Di2015UniqueSeparatorWriteFile
11692220Di2015UniqueSeparatort2
11692220Di2015UniqueSeparatort2
11692220Di2015UniqueSeparatorvar t = new List<int[,]>();Di2015NewLinevar t2 = new int[10][,];Di2015NewLinefor (int i = 0; i < t2.Length; ++i)Di2015NewLine{Di2015NewLine    t2[i] = new int[4, 4];Di2015NewLine}Di2015NewLineDi2015NewLinevar r = new List<int[,]>(t);Di2015NewLinevar r2 = new List<int[,]>(t2); // no error!Di2015NewLine
11692423Di2015UniqueSeparatorList<Car> cars = ...Di2015NewLinevar carToFind = cars.FirstOrDefault(car => car.Parts.Any(part => part.Id == idToFind));Di2015NewLine
11692474Di2015UniqueSeparatorPropertyInfo
11692474Di2015UniqueSeparatorPropertyInfo
11692474Di2015UniqueSeparatorType
11692474Di2015UniqueSeparator[ProtoContract]Di2015NewLinepublic class PropertyInfoSurrogate {Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public Type Type { get; set; }Di2015NewLine    [ProtoMember(2)]Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public static operator implicit PropertyInfoSurrogate(PropertyInfo value) {Di2015NewLine        if(value == null) return null;Di2015NewLine        return new PropertyInfoSurrogate {Di2015NewLine             Type = value.DeclaringType, Name = value.NameDi2015NewLine        };Di2015NewLine    }Di2015NewLine    public static operator implicit PropertyInfo(PropertyInfoSurrogate value) {Di2015NewLine        if(value == null) return null;Di2015NewLine        return value.Type.GetProperty(value.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11692474Di2015UniqueSeparatormodel.Add(typeof(PropertyInfo), false)Di2015NewLine    .SetSurrogate(typeof(PropertyInfoSurrogate));Di2015NewLine
11692498Di2015UniqueSeparator<urlMappings enabled="true">Di2015NewLine            <add url="~/Error_Generic.aspx" mappedUrl="~/error.aspx?err=999"/>Di2015NewLine            <add url="~/Error_400.aspx" mappedUrl="~/error.aspx?err=400"/>Di2015NewLine            <add url="~/Error_401.aspx" mappedUrl="~/error.aspx?err=401"/>Di2015NewLine            <add url="~/Error_402.aspx" mappedUrl="~/error.aspx?err=402"/>Di2015NewLine            <add url="~/Error_403.aspx" mappedUrl="~/error.aspx?err=403"/>Di2015NewLine            <add url="~/Error_404.aspx" mappedUrl="~/error.aspx?err=404"/>Di2015NewLine            <add url="~/Error_405.aspx" mappedUrl="~/error.aspx?err=405"/>Di2015NewLine            <add url="~/Error_406.aspx" mappedUrl="~/error.aspx?err=406"/>Di2015NewLine            <add url="~/Error_407.aspx" mappedUrl="~/error.aspx?err=407"/>Di2015NewLine            <add url="~/Error_408.aspx" mappedUrl="~/error.aspx?err=408"/>Di2015NewLine            <add url="~/Error_409.aspx" mappedUrl="~/error.aspx?err=409"/>Di2015NewLine            <add url="~/Error_410.aspx" mappedUrl="~/error.aspx?err=410"/>Di2015NewLine            <add url="~/Error_411.aspx" mappedUrl="~/error.aspx?err=411"/>Di2015NewLine            <add url="~/Error_412.aspx" mappedUrl="~/error.aspx?err=412"/>Di2015NewLine            <add url="~/Error_413.aspx" mappedUrl="~/error.aspx?err=413"/>Di2015NewLine            <add url="~/Error_414.aspx" mappedUrl="~/error.aspx?err=414"/>Di2015NewLine            <add url="~/Error_500.aspx" mappedUrl="~/error.aspx?err=500"/>Di2015NewLine        </urlMappings>Di2015NewLine
11692689Di2015UniqueSeparatortcpListener.Server.Dispose()Di2015NewLine
11692996Di2015UniqueSeparatorpublic List<int> DoSomethingWithList(List<int> list)Di2015NewLine{Di2015NewLine    //do stuffDi2015NewLine    return list;Di2015NewLine}Di2015NewLineDi2015NewLinepublic List<int> DoSomethingElseWithList(List<int> list)Di2015NewLine{Di2015NewLine    //do other stuffDi2015NewLine    return list;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void SomeOtherFunction(string[] args)Di2015NewLine{Di2015NewLine    var list = new List<int>() { 1, 2, 3, 4 }; //create listDi2015NewLine    list = DoSomethingWithList(list); //change listDi2015NewLine    list = DoSomethingElseWithList(list); //change list furtherDi2015NewLine}Di2015NewLine
11692996Di2015UniqueSeparatorList<T>
11692996Di2015UniqueSeparatorpublic class MyBigClassDi2015NewLine{Di2015NewLine    private List<int> myList;Di2015NewLine    public MyBigClass()Di2015NewLine    {Di2015NewLine        //instantiate list in constructorDi2015NewLine        myList = new List<int>() { 1, 2, 3, 4 }; Di2015NewLine    }Di2015NewLineDi2015NewLine    public void PublicListAdder(int val)Di2015NewLine    {Di2015NewLine        myList.Add(val);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void PrivateListCleaner()Di2015NewLine    {Di2015NewLine        //remove all even numbers, just an exampleDi2015NewLine        myList.RemoveAll(x => x % 2 == 0);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11692996Di2015UniqueSeparatorref
11693089Di2015UniqueSeparator<httpRuntime relaxedUrlToFileSystemMapping="true" />Di2015NewLine
11693223Di2015UniqueSeparator<configuration>Di2015NewLine  <uri>Di2015NewLine    <schemeSettings>Di2015NewLine      <add name="http" genericUriParserOptions="DontUnescapePathDotsAndSlashes"/>Di2015NewLine    </schemeSettings>Di2015NewLine  </uri>Di2015NewLine</configuration>Di2015NewLine
11693302Di2015UniqueSeparator        string GuideID = "1989";Di2015NewLine        string Url = "'" + "http://www.example.com/Article.aspx?id=" + GuideID + "'";Di2015NewLineDi2015NewLine        var XmlDoc = new XmlDocument();Di2015NewLineDi2015NewLine        XmlDoc.Load(new FileStream("XMLFile1.xml",FileMode.Open,FileAccess.Read));Di2015NewLine        var nsm = new XmlNamespaceManager(XmlDoc.NameTable);Di2015NewLine        nsm.AddNamespace("s", "http://api.facebook.com/1.0/");Di2015NewLineDi2015NewLine        var node = XmlDoc.SelectSingleNode("s:fql_query_response/s:link_stat[s:normalized_url=" + Url + "]/s:share_count", nsm);Di2015NewLine        var ShareCount = node.InnerText;            Di2015NewLine
11693302Di2015UniqueSeparatorXDocument xdoc = XDocument.Load(new FileStream("XMLFile1.xml", FileMode.Open, FileAccess.Read));Di2015NewLine        var lnode = xdoc.XPathSelectElements("s:fql_query_response/s:link_stat[s:normalized_url=" + Url + "]/s:share_count",nsm).First();Di2015NewLine        var ret = lnode.Value;Di2015NewLine
11693335Di2015UniqueSeparator<table>Di2015NewLine    <% for (int i = 0; i < Model.GetLength(0); i++) { %>Di2015NewLine        <tr>Di2015NewLine            <% for (int j = 0; j < Model.GetLength(1); j++) { %>Di2015NewLine                <td>Di2015NewLine                    <%= Model[i, j] %>Di2015NewLine                </td>            Di2015NewLine            <% } %>Di2015NewLine        </tr>Di2015NewLine    <% } %>Di2015NewLine</table>Di2015NewLine
11693361Di2015UniqueSeparatorDataTrigger
11693361Di2015UniqueSeparatorStyle
11693361Di2015UniqueSeparator<DataGrid.Resources>Di2015NewLine    <Style TargetType="{x:Type DataGridRow}">Di2015NewLine        <Style.Triggers>Di2015NewLine            <DataTrigger Binding="{Binding isBold}" Value="True">Di2015NewLine                <Setter Property="FontWeight" Value="Bold" />Di2015NewLine            </DataTrigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</DataGrid.Resources>Di2015NewLine
11693398Di2015UniqueSeparatorChild
11693398Di2015UniqueSeparatorParent
11693480Di2015UniqueSeparator// Note that _worldsDirectory must be an absolute path)Di2015NewLinestring prefix = Path.Combine(_worldsDirectory, selectedItem, selectedItem);Di2015NewLinelblWorldSize.Text = GetDirectorySizeOrDefault(prefix, "Couldn't find world");Di2015NewLinelblNetherSize.Text = GetDirectorySizeOrDefault(prefix + "_nether",Di2015NewLine                                               "Couldn't find _nether");Di2015NewLinelblTheEndSize.Text = GetDirectorySizeOrDefault(prefix + "_the_end",Di2015NewLine                                               "Couldn't find _the_end");Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinestatic string GetDirectorySizeOrDefault(string directory, string defaultText)Di2015NewLine{Di2015NewLine    return Directory.Exists(directory)Di2015NewLine        ? GetDirectorySize(directory) * 1024 + " kb"Di2015NewLine        : defaultText;Di2015NewLine}Di2015NewLine
11693480Di2015UniqueSeparatorlblWorldSize.Text
11693488Di2015UniqueSeparatorBudgetLineItem actualLi = new BudgetLineItem();Di2015NewLineactualLi.YearId = be.lu_FiscalYear.FirstOrDefault(t => t.Year == actualYear);Di2015NewLineactualLi.TypeId = be.lu_Type.FirstOrDefault(t => t.Name == "Actual");Di2015NewLineactualLi.Dept = be.lu_Department.FirstOrDefault(t => t.Name == DeptName)Di2015NewLineactualLi.LineItemId = be.lu_LineItem.FirstOrDefault(t => t.Name == revenueType)Di2015NewLineactualLi.Amount = actualAmount;Di2015NewLinebe.AddToBudgetLineItems(actualLi);Di2015NewLinebe.SaveChanges();Di2015NewLine
11693503Di2015UniqueSeparatorbatch.Draw(shipLaunch, new Vector2(80, 450) +shipPos, Color.White);Di2015NewLineparticleEngine.Draw(batch);Di2015NewLine
11693508Di2015UniqueSeparatorSqlCommand cmd = new SqlCommand("select * from sys.objects where name like 'Set%'", con);Di2015NewLine
11693508Di2015UniqueSeparatorselect * from sys.tables where name like 'Set%'Di2015NewLine
11693725Di2015UniqueSeparator// Workaround: Focus() forces the dataset value into the bound property of a controlDi2015NewLineDi2015NewLinetabCtlSettings.SelectedTab = tabAccountSettings;  // Activate second tabDi2015NewLineforeach (Control ctl in tabAccountSettings.Controls)Di2015NewLine  ctl.Focus();Di2015NewLineDi2015NewLinetabCtlSettings.SelectedTab = tabOptions;  // Activate first tabDi2015NewLineforeach (Control ctl in tabOptions.Controls)Di2015NewLine    ctl.Focus();Di2015NewLine
11693773Di2015UniqueSeparatorColorizerLibrary.CodeColorizer colorizer = new ColorizerLibrary.CodeColorizer(Di2015NewLine    @"C:\\Program Files (x86)\\EWSoftware\\Sandcastle Help File Builder\\Colorizer\\highlight.xml",Di2015NewLine    @"C:\\Program Files (x86)\\EWSoftware\\Sandcastle Help File Builder\\Colorizer\\highlight.xsl"Di2015NewLine);Di2015NewLinecolorizer.Init();Di2015NewLineDi2015NewLinestring htmlText = "<!DOCTYPE html><html><head><title>Test Page</title></head><body><pre codelanguage=\\"CSharp\\">public string Foo(string a, int b = 4) {\\n\\treturn a + b * 3;\\n}</pre></body></html>";Di2015NewLinereturn colorizer.ProcessAndHighlightText(htmlText);Di2015NewLine
11693773Di2015UniqueSeparatorhead
11693773Di2015UniqueSeparatorColorizerLibrary
11693791Di2015UniqueSeparatorWebClient
11693791Di2015UniqueSeparatorDownloadStringAsync
11693791Di2015UniqueSeparatorWebClient
11693791Di2015UniqueSeparatorCancelAsync
11693791Di2015UniqueSeparatorCompleted
11693791Di2015UniqueSeparatortrue
11693791Di2015UniqueSeparatorCancelAsync
11693791Di2015UniqueSeparator// in some button handler or whereeverDi2015NewLinewebClient.DownloadStringAsync("http://url.com")Di2015NewLineDi2015NewLinevoid OnLeavePage(object sender, EventArgs e) {Di2015NewLine  webClient.CancelAsync();Di2015NewLine}Di2015NewLineDi2015NewLinevoid OnCompleted(object sender, DownloadStringCompletedEventArgs e) {Di2015NewLine  if (e.Cancelled) {Di2015NewLine    return;Di2015NewLine  }Di2015NewLineDi2015NewLine  // do your handlingDi2015NewLine}Di2015NewLine
11693791Di2015UniqueSeparatorCancelAsync
11693791Di2015UniqueSeparatorUserState
11693791Di2015UniqueSeparatorCancelled
11693816Di2015UniqueSeparator//getting only ThingA from mixed arrayDi2015NewLineIEnumerable<ThingA> thingsA = things.OfType<ThingsA>()Di2015NewLine//we know type of thins inside array, so we just need type conversionDi2015NewLineIEnumerable<ThingB> thingsB = things.Cast<ThingB>()Di2015NewLine
11693816Di2015UniqueSeparatorConvert
11693816Di2015UniqueSeparatorstring
11693816Di2015UniqueSeparatorint
11693875Di2015UniqueSeparatorTuple<List<A>, List<B>> Unpack<A, B>(List<Tuple<A, B>> list)Di2015NewLine{Di2015NewLine    return list.Aggregate(Tuple.Create(new List<A>(list.Count), new List<B>(list.Count)),Di2015NewLine                          (unpacked, tuple) =>Di2015NewLine                          {Di2015NewLine                              unpacked.Item1.Add(tuple.Item1);Di2015NewLine                              unpacked.Item2.Add(tuple.Item2);Di2015NewLine                              return unpacked;Di2015NewLine                          });Di2015NewLine}Di2015NewLine
11693953Di2015UniqueSeparator[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]Di2015NewLinepublic class SomeWCFService : ISomeWCFServiceDi2015NewLine
11694024Di2015UniqueSeparatorDataGridViewRow dgvr = dgvCredit.SelectedRows[0];
11694024Di2015UniqueSeparatorprivate void dgvChq_CellValidating(object sender, Di2015NewLine                                   DataGridViewCellValidatingEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex != 5)Di2015NewLine        return;Di2015NewLineDi2015NewLine    HandleCheckedChanged(dgvChq, e, Di2015NewLine                         Convert.ToInt32(dgvChq.Rows[e.RowIndex].Cells[0].Value));Di2015NewLine}Di2015NewLineDi2015NewLineprivate void dgvCredit_CellValidating(object sender, Di2015NewLine                                      DataGridViewCellValidatingEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex != 0)Di2015NewLine        return;Di2015NewLineDi2015NewLine    HandleCheckedChanged(dgvCredit, e, Di2015NewLine                         Convert.ToInt32(dgvCredit.Rows[e.RowIndex].Cells[1].Value));Di2015NewLine}Di2015NewLineDi2015NewLineprivate void HandleCheckedChanged(DataGridView dgv, Di2015NewLine                                  DataGridViewCellValidatingEventArgs e, int id)Di2015NewLine{Di2015NewLine    object toBeDisplayedDateValue = (bool)e.FormattedValue ? (DateTime?)DateTime.Today : null;Di2015NewLineDi2015NewLine    using (SqlCommand cmd = con.CreateCommand())Di2015NewLine    {Di2015NewLine        cmd.CommandText = @"UPDATE Customer.OrderHeader Di2015NewLine                            SET    DateApproved = @approvedDate Di2015NewLine                            WHERE  OrderNumber = @ordNo";Di2015NewLineDi2015NewLine        cmd.Parameters.AddWithValue("@approvedDate", toBeDisplayedDateValue);Di2015NewLine        cmd.Parameters.AddWithValue("@ordNo", id);Di2015NewLineDi2015NewLine        con.Open();Di2015NewLine        cmd.ExecuteNonQuery();Di2015NewLine        con.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    dgv.Rows[e.RowIndex].Cells[4].Value = toBeDisplayedDateValue; //you could just do Di2015NewLine                                                                  //this much Di2015NewLine    //orDi2015NewLineDi2015NewLine    //DataGridViewRow dgvr = dgv.SelectedRows[0]; //this line works only if there Di2015NewLine                                                  //is at least one selected row when Di2015NewLine                                                  //validating cell. For this you Di2015NewLine                                                  //require Di2015NewLine                                                  //dgv.SelectionMode = DataGridViewSelectionMode.FullRowSelectDi2015NewLine}Di2015NewLine
11694024Di2015UniqueSeparator"@ordNo"
11694024Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //---------------------------------------------Di2015NewLine    // load dgv...Di2015NewLine    //---------------------------------------------Di2015NewLineDi2015NewLine    dgvChq.CellValueChanged += dgvChq_CellValueChanged;Di2015NewLine    dgvCredit.CellValueChanged += dgvCredit_CellValueChanged;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void dgvChq_CellValueChanged(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex != 5)Di2015NewLine        return;Di2015NewLineDi2015NewLine    HandleCheckedChanged(dgvChq, e, 0);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void dgvCredit_CellValueChanged(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex != 0)Di2015NewLine        return;Di2015NewLineDi2015NewLine    HandleCheckedChanged(dgvCredit, e, 1);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void HandleCheckedChanged(DataGridView dgv, DataGridViewCellEventArgs e, Di2015NewLine                                  int columnIndexOfOrderNo)Di2015NewLine{Di2015NewLine    DataGridViewCheckBoxCell c = dgv[e.ColumnIndex, e.RowIndex] as DataGridViewCheckBoxCell;Di2015NewLine    object toBeDisplayedDateValue = (bool)c.EditedFormattedValue ? (DateTime?)DateTime.Today : null;Di2015NewLineDi2015NewLine    using (SqlCommand cmd = con.CreateCommand())Di2015NewLine    {Di2015NewLine        cmd.CommandText = @"UPDATE Customer.OrderHeader Di2015NewLine                            SET    DateApproved = @approvedDate Di2015NewLine                            WHERE  OrderNumber = @ordNo";Di2015NewLineDi2015NewLine        cmd.Parameters.AddWithValue("@approvedDate", toBeDisplayedDateValue);Di2015NewLine        cmd.Parameters.AddWithValue("@ordNo", Di2015NewLine                                    Convert.ToInt32(dgv.Rows[e.RowIndex].Cells[columnIndexOfOrderNo].Value));Di2015NewLineDi2015NewLine        con.Open();Di2015NewLine        cmd.ExecuteNonQuery();Di2015NewLine        con.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    dgv.Rows[e.RowIndex].Cells[4].Value = toBeDisplayedDateValue;Di2015NewLine}Di2015NewLine
11694086Di2015UniqueSeparatorAssert.AreEqual(errorMessageList.Count, 1);Di2015NewLine
11694205Di2015UniqueSeparatorList<string> test = new List<string>();Di2015NewLineDi2015NewLineforeach (DataRow row in id.Rows)Di2015NewLine{Di2015NewLine   test.Add(row[0].ToString());Di2015NewLine}Di2015NewLineDi2015NewLineMessageBox.Show(String.Join(",", test.ToArray()));Di2015NewLine
11694241Di2015UniqueSeparatoroTP.Session["SomeKey"] = 5;Di2015NewLine
11694328Di2015UniqueSeparator<form id="form_UploadFile" action="" method="post" enctype="multipart/form-data">Di2015NewLine  <label for="file">Filename:</label>Di2015NewLine  <input type="file" name="file" id="file" />Di2015NewLine</form>Di2015NewLine
11694328Di2015UniqueSeparator$('#form_UploadFile').serialize();Di2015NewLine
11694359Di2015UniqueSeparator/
11694359Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    //Create a treeview with a root node.Di2015NewLine    TreeView tv = new TreeView();Di2015NewLine    tv.ShowNodeToolTips = true; //Turn on tooltips for this demo.Di2015NewLine    tv.Nodes.Add(new TreeNode("Root"));Di2015NewLineDi2015NewLine    //These may need ordering by path before you start.Di2015NewLine    var tfsTestCases = new[]Di2015NewLine    {Di2015NewLine        new WorkItem { Path = "Module/Feature1/SubFeature1/Test1", WorkItemId = 1, },Di2015NewLine        new WorkItem { Path = "Module/Feature1/SubFeature1/Test2", WorkItemId = 2, },Di2015NewLine        new WorkItem { Path = "Module/Feature1/SubFeature2/Test1", WorkItemId = 3, },Di2015NewLine        new WorkItem { Path = "Module/Feature1/SubFeature2/Test2", WorkItemId = 4, },Di2015NewLine        new WorkItem { Path = "Module/Feature2/SubFeature1/Test1", WorkItemId = 5, },Di2015NewLine        new WorkItem { Path = "Module/Feature2/SubFeature1/Test2", WorkItemId = 6, },Di2015NewLine    };Di2015NewLineDi2015NewLine    //Looping through the test cases...Di2015NewLine    foreach (var testCase in tfsTestCases)Di2015NewLine    {Di2015NewLine        //Start at the root of the tree for each work item.Di2015NewLine        TreeNode lastNode = tv.Nodes[0];Di2015NewLineDi2015NewLine        //Loop through each part of the path and create a new node.Di2015NewLine        //Use the NodeCollection from the one we just created each time through the loop.Di2015NewLine        //This allows the next iteration to "walk down" as it goes.Di2015NewLine        foreach (var part in testCase.Path.Split('/'))Di2015NewLine            lastNode = AddTreeNode(lastNode.Nodes, part);Di2015NewLineDi2015NewLine        //Set the Tag on the last node in the loop, this is the one with the actual Test Case.Di2015NewLine        //You can reference the Tag property of "tv.SelectedNode" to get access to the Work Item. If the Tag is null, then it's not a Test Case.Di2015NewLine        lastNode.Tag = testCase;Di2015NewLine        lastNode.ToolTipText = testCase.WorkItemId.ToString();  //Set for this DEMO.Di2015NewLine    }Di2015NewLine    //Display the tree.Di2015NewLine    tv.Dump();Di2015NewLine}Di2015NewLineDi2015NewLineTreeNode AddTreeNode(TreeNodeCollection nodes, String path)Di2015NewLine{Di2015NewLine    //Try and find a node in the collection matching the specified pathPath.Di2015NewLine    var node = nodes.Cast<TreeNode>().Where(node => node.Text == path).SingleOrDefault();Di2015NewLine    //If it's not found, create it and add it to the collection of nodes we just searched.Di2015NewLine    if (node == null)Di2015NewLine    {Di2015NewLine        node = new TreeNode(path);Di2015NewLine        nodes.Add(parentNode);Di2015NewLine    }Di2015NewLine    //We need this later, so pass it back.Di2015NewLine    return node;Di2015NewLine}Di2015NewLineDi2015NewLineclass WorkItemDi2015NewLine{Di2015NewLine    public String Path { get; set; }Di2015NewLine    public Int32 WorkItemId { get; set; }Di2015NewLine    //etc.Di2015NewLine}Di2015NewLine
11694448Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine  static void Main()Di2015NewLine  {Di2015NewLine    string input = "select ceiling(a.interest) as interest, a.myID as mID, a.studentID as sID from mytable";Di2015NewLine    string column = "a.myID";Di2015NewLine    string pattern = "((?<=\\\\bselect)\\\\s+[^,]*\\\\b" + Regex.Escape(column) + "\\\\b[^,]*\\\\s*,?|\\\\s*,\\\\s*[^,]*\\\\b" + Regex.Escape(column) + "\\\\b[^,]*(?=(?:,|\\\\sfrom\\\\b)))";Di2015NewLine    string output = Regex.Replace(input, pattern, "", RegexOptions.IgnoreCase);Di2015NewLine    Console.WriteLine(output);Di2015NewLine  }Di2015NewLine}Di2015NewLine
11694475Di2015UniqueSeparatorq
11694475Di2015UniqueSeparatorArray
11694475Di2015UniqueSeparatorint[]
11694475Di2015UniqueSeparatorstring[]
11694475Di2015UniqueSeparatorobject[]
11694475Di2015UniqueSeparatorArray
11694475Di2015UniqueSeparatorIEnumerable
11694475Di2015UniqueSeparatorIEnumerable<T>
11694475Di2015UniqueSeparatorHotel
11694475Di2015UniqueSeparatorHotel
11694475Di2015UniqueSeparatorHotel[]
11694475Di2015UniqueSeparatorArray
11694503Di2015UniqueSeparatorSystem.Web.Script.Serialization.JavaScriptSerializer oSerializer = Di2015NewLinenew System.Web.Script.Serialization.JavaScriptSerializer();Di2015NewLinestring sJSON = oSerializer.Serialize(YOUR CLASS HERE);Di2015NewLine
11694627Di2015UniqueSeparatorFileArrayAdapter.cs
11694627Di2015UniqueSeparatorList<Option> item
11694627Di2015UniqueSeparatorJava
11694627Di2015UniqueSeparatorObject
11694627Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineusing Android.App;Di2015NewLineusing Android.Content;Di2015NewLineusing Android.OS;Di2015NewLineusing Android.Runtime;Di2015NewLineusing Android.Views;Di2015NewLineusing Android.Widget;Di2015NewLineusing Android.Runtime;Di2015NewLineDi2015NewLinenamespace FileChooserDi2015NewLine{Di2015NewLine    public class FileArrayAdapter : BaseAdapter<Option>Di2015NewLine    {Di2015NewLineDi2015NewLine        private Context c;Di2015NewLine        private int id;Di2015NewLine        private List<Option> items;Di2015NewLineDi2015NewLine        public FileArrayAdapter(Context context, int textViewResourceId,Di2015NewLine                List<Option> objects)Di2015NewLineDi2015NewLine        {Di2015NewLineDi2015NewLine            c = context;Di2015NewLine            id = textViewResourceId;Di2015NewLine            items = objects;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override View GetView(int position, View convertView, ViewGroup parent)Di2015NewLine        {Di2015NewLine            View v = convertView;Di2015NewLine            if (v == null)Di2015NewLine            {Di2015NewLine                LayoutInflater vi = (LayoutInflater)c.GetSystemService(Context.LayoutInflaterService);Di2015NewLine                v = vi.Inflate(id, null);Di2015NewLine            }Di2015NewLine            Option o = items[position];Di2015NewLine            if (o != null)Di2015NewLine            {Di2015NewLine                TextView t1 = (TextView)v.FindViewById(Resource.Id.TextView01);Di2015NewLine                TextView t2 = (TextView)v.FindViewById(Resource.Id.TextView02);Di2015NewLineDi2015NewLine                if (t1 != null)Di2015NewLine                    t1.Text = o.getName().ToString();Di2015NewLine                if (t2 != null)Di2015NewLine                    t2.Text = o.getData().ToString();Di2015NewLineDi2015NewLine            }Di2015NewLine            return v;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        public override Option this[int position]Di2015NewLine        {Di2015NewLine            get { return items[position]; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int CountDi2015NewLine        {Di2015NewLine            get { return items.Count; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public override long GetItemId(int position)Di2015NewLine        {Di2015NewLine            return position;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
11694843Di2015UniqueSeparatorusing(SqlCeConnection Con = new SqlCeConnection("Data Source = 'Database.sdf';" + Di2015NewLine                                                "Password='Password';")Di2015NewLine{ Di2015NewLine    Con.Open(); Di2015NewLine    SqlCeCommand Query = new SqlCeCommand("INSERT INTO Users " + Di2015NewLine                             "(Name,FName,Address,MCode,MNum,Amount) " +Di2015NewLine                             "VALUES (@Name,@FName,@Address,@Code,@Num,@Amount)",Con); Di2015NewLineDi2015NewLine    Query.Parameters.AddWithValue("@Name", NBox.Text);Di2015NewLine    Query.Parameters.AddWithValue("@FName", SOBox.Text)); Di2015NewLine    Query.Parameters.AddWithValue("@Address",AdBox.Text)); Di2015NewLine    Query.Parameters.AddWithValue("@Code", Convert.ToInt32(MCode.Text));Di2015NewLine    Query.Parameters.AddWithValue("@Num", Convert.ToInt32(MNum.Text));Di2015NewLine    Query.Parameters.AddWithValue("@Amount" , Convert.ToInt32(AmBox.Text));Di2015NewLine    Query.ExecuteNonQuery(); Di2015NewLine}Di2015NewLine
11694843Di2015UniqueSeparatorExecuteNonQuery
11694843Di2015UniqueSeparatorstring conString = "Data Source=" + Di2015NewLine        Path.Combine(Di2015NewLine               Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),Di2015NewLine               "MyAppData\\\\database.sdf") + ";Password=yourPassword;";Di2015NewLine
11694902Di2015UniqueSeparatorDateTimeOffset
11694902Di2015UniqueSeparatorstring twitterDate = "Fri Jul 27 15:14:11 +0000 2012";Di2015NewLineDi2015NewLineDateTimeOffset dt = DateTimeOffset.ParseExact(twitterDate, Di2015NewLine    "ddd MMM dd HH:mm:ss zzz yyyy", CultureInfo.InvariantCulture);Di2015NewLine
11694902Di2015UniqueSeparatorzzzz
11694902Di2015UniqueSeparatorDateTimeOffset
11694902Di2015UniqueSeparatorToLocalTime
11694902Di2015UniqueSeparatorDateTimeOffset
11694933Di2015UniqueSeparatorvar a = new List<KeyValuePair<string, string>>()Di2015NewLine{Di2015NewLine    new KeyValuePair<string, string>("A","B"),Di2015NewLine    new KeyValuePair<string, string>("A","B"),Di2015NewLine    new KeyValuePair<string, string>("A","B"),Di2015NewLine};Di2015NewLine
11694933Di2015UniqueSeparator()
11695039Di2015UniqueSeparatorStackOverflowException
11695092Di2015UniqueSeparatorpublic class DataChart<T, U>Di2015NewLine{Di2015NewLine  public Func<T, U> RowLabel  { get; set; }Di2015NewLine}Di2015NewLine
11695092Di2015UniqueSeparatorstring
11695092Di2015UniqueSeparatorstruct
11695092Di2015UniqueSeparatorstring
11695116Di2015UniqueSeparatorDataSource
11695116Di2015UniqueSeparator public class PersonDi2015NewLine    {Di2015NewLine        public int Age { get; set; }Di2015NewLine        public string Name { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyDataSourceDi2015NewLine    {Di2015NewLine        public static List<Person> Persons = new List<Person>Di2015NewLine        {Di2015NewLine            new Person{Age=30,Name="Ram"},Di2015NewLine            new Person{Age=33,Name="Rahim"},Di2015NewLine        };Di2015NewLine    }Di2015NewLine
11695116Di2015UniqueSeparator listBox1.DataSource = MyDataSource.Persons;Di2015NewLine listBox1.DisplayMember = "Age";Di2015NewLine
11695116Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            MyDataSource.Persons[0].Age = 45;Di2015NewLine            listBox1.DataSource = null;Di2015NewLine            listBox1.DataSource = MyDataSource.Persons;Di2015NewLine            listBox1.DisplayMember = "Age";Di2015NewLine        }Di2015NewLine
11695155Di2015UniqueSeparatorIPAddress ipAddress = new IPAddress(new byte[] { 192, 168, 1, 10 });Di2015NewLine
11695216Di2015UniqueSeparator"
11695216Di2015UniqueSeparator"
11695216Di2015UniqueSeparator private static string XmlEncodeQuotes(string target) {Di2015NewLineDi2015NewLine        string result = string.Empty;Di2015NewLine        for (int i = 0; i < target.Length; i++)Di2015NewLine        {Di2015NewLine            if (target[i] == '"')Di2015NewLine            {Di2015NewLine                if (target[i - 1] != '=')Di2015NewLine                    if (!Regex.IsMatch(target.Substring(i), @"^""\\s[a-zA-Z]+="""))Di2015NewLine                    {Di2015NewLine                        result += """;Di2015NewLine                        continue;Di2015NewLine                    }Di2015NewLine            }Di2015NewLine            result += target[i];Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
11695304Di2015UniqueSeparatorList<BALHotelList> searchresult= (from a in bhDi2015NewLine            join b in hr on a.HotelCode equals b.hotelCodeDi2015NewLine            orderby a.HotelNameDi2015NewLine            select new BALHotelListDi2015NewLine                {Di2015NewLine                   HotelCode= a.HotelCode,Di2015NewLine                   ImageURL_Text = a.ImageURL_Text,Di2015NewLine                   HotelName = a.HotelName,Di2015NewLine                   StarRating = a.StarRating,Di2015NewLine                   HotelAddress = a.HotelAddress,Di2015NewLine                   Destination = a.Destination,Di2015NewLine                   Country = a.Country,Di2015NewLine                   HotelInfo = a.HotelInfo,Di2015NewLine                   Latitude = a.Latitude,Di2015NewLine                   Longitude = a.Longitude,Di2015NewLine                   totalPrice = b.totalPrice,Di2015NewLine                   totalPriceSpecified = b.totalPriceSpecified,Di2015NewLine                   totalSalePrice = b.totalSalePrice,Di2015NewLine                   totalSalePriceSpecified = b.totalSalePriceSpecified,Di2015NewLine                   rooms = b.roomsDi2015NewLineDi2015NewLine                }).Tolist();Di2015NewLine
11695359Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        BackgroundWorker bg = new BackgroundWorker();Di2015NewLine        bg.DoWork += new DoWorkEventHandler(bg_DoWork);Di2015NewLine        bg.RunWorkerAsync();Di2015NewLine    }Di2015NewLineDi2015NewLine    void bg_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < 1000000000; i++)Di2015NewLine        {Di2015NewLine            Action action = () => richTextBox1.Text += "Line Number " + i;Di2015NewLine            richTextBox1.Invoke(action); Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11695390Di2015UniqueSeparatorclass RangeMap<T>Di2015NewLine{Di2015NewLine    private SortedList<float, T>  _values;Di2015NewLineDi2015NewLine    public RangeMap()Di2015NewLine    {Di2015NewLine        _values = new SortedList<float, T>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddPoint(float max, T value)Di2015NewLine    {Di2015NewLine        _values[max] = value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public T GetValue(float point)Di2015NewLine    {Di2015NewLine        if (_values.ContainsKey(point)) return _values[point];Di2015NewLineDi2015NewLine        return (from kvp in _values where kvp.Key > point select kvp.Value)Di2015NewLine               .FirstOrDefault();Di2015NewLine    }Di2015NewLine}   Di2015NewLine
11695390Di2015UniqueSeparatorvar  map = new RangeMap<Color>();Di2015NewLinemap.AddPoint(0.0F, Color.Red);Di2015NewLinemap.AddPoint(0.5F, Color.Green);Di2015NewLinemap.AddPoint(1.0F, Color.Blue);Di2015NewLineDi2015NewLineConsole.WriteLine(map.GetValue(-0.25F).Name);Di2015NewLineConsole.WriteLine(map.GetValue( 0.25F).Name);Di2015NewLineConsole.WriteLine(map.GetValue( 0.75F).Name);Di2015NewLineConsole.WriteLine(map.GetValue( 1.25F).Name);Di2015NewLine
11695499Di2015UniqueSeparatorInvocationList.Count
11695499Di2015UniqueSeparatoradd
11695499Di2015UniqueSeparatorprivate EventHandler MyEventDel;       Di2015NewLineDi2015NewLineDi2015NewLine   public event EventHandler ExplicitEventDi2015NewLine    {Di2015NewLine        addDi2015NewLine        {Di2015NewLine            if (MyEventDel.GetInvocationList().Count() < 10)Di2015NewLine            {Di2015NewLine                MyEventDel+= value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        removeDi2015NewLine        {Di2015NewLine            MyEventDel-= value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11695654Di2015UniqueSeparator<form method="post" action="/Home/Create">Di2015NewLineDi2015NewLine    <input type="hidden" name="products.Index" value="cold" />Di2015NewLine    <input type="text" name="products[cold].Name" value="Beer" />Di2015NewLine    <input type="text" name="products[cold].Price" value="7.32" />Di2015NewLineDi2015NewLine    <input type="hidden" name="products.Index" value="123" />Di2015NewLine    <input type="text" name="products[123].Name" value="Chips" />Di2015NewLine    <input type="text" name="products[123].Price" value="2.23" />Di2015NewLineDi2015NewLine    <input type="hidden" name="products.Index" value="caliente" />Di2015NewLine    <input type="text" name="products[caliente].Name" value="Salsa" />Di2015NewLine    <input type="text" name="products[caliente].Price" value="1.23" />Di2015NewLineDi2015NewLine    <input type="submit" />Di2015NewLine</form>Di2015NewLine
11695727Di2015UniqueSeparatorarea = ""
11695727Di2015UniqueSeparator@Html.Action("GetVideoHtml", "Service", new { area = "" })Di2015NewLine
11695813Di2015UniqueSeparatorO(n)
11695813Di2015UniqueSeparatorIndexOf
11695813Di2015UniqueSeparatorRemove(element)
11695813Di2015UniqueSeparatorHashSet
11695813Di2015UniqueSeparatorAdd(element)
11695813Di2015UniqueSeparatorContains(element)
11695813Di2015UniqueSeparatorRemove(element)
11695813Di2015UniqueSeparatorConcurrentHeshSet
11695813Di2015UniqueSeparatorHashSet
11695813Di2015UniqueSeparatorConcurrentDictionary
11695844Di2015UniqueSeparatorJoinAlias
11695844Di2015UniqueSeparator    public long GetIdCompany(long number)Di2015NewLine    {Di2015NewLine        Equipament equipamentAlias = null;Di2015NewLine        return session.QueryOver<Report>()Di2015NewLine                      .Where(x => x.Number == number)Di2015NewLine                      .JoinAlias(x => x.Equipament, () => equipamentAlias)Di2015NewLine                      .Select(x => equipamentAlias.Company.Id)Di2015NewLine                      .SingleOrDefault<long>();Di2015NewLine    }Di2015NewLine
11695890Di2015UniqueSeparatorxml
11695890Di2015UniqueSeparatorXDocument document = XDocument.Parse(xml);Di2015NewLineXNamespace ns = document.Root.GetDefaultNamespace();Di2015NewLineDi2015NewLinevar responsesExcept404s = documentDi2015NewLine    .Descendants(ns + "response")Di2015NewLine    .Where(x => !x.Descendants(ns + "status")Di2015NewLine                  .Single()Di2015NewLine                  .Value.Contains("404"));Di2015NewLine
11695890Di2015UniqueSeparatorns
11695890Di2015UniqueSeparatorxmlns
11695890Di2015UniqueSeparatorDescendants()
11695890Di2015UniqueSeparatorresponsesExcept404s.ToList().ForEach(Console.WriteLine);Di2015NewLine
11695974Di2015UniqueSeparatorRadioButtons
11695974Di2015UniqueSeparatorListBox
11695974Di2015UniqueSeparatorSelectedItem
11695974Di2015UniqueSeparatorRadioButtons
11695974Di2015UniqueSeparatorSelectedItem
11695974Di2015UniqueSeparatorRadioButton
11696004Di2015UniqueSeparatorSystem.Web.Mvc.Controller
11696031Di2015UniqueSeparator    <TextBox  Grid.Column="1" Grid.Row="0" Background="Yellow" Margin="5" FontWeight="Bold" Text="{Binding Path=FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />Di2015NewLine    <TextBlock x:Name="stat1" Grid.Column="2" />Di2015NewLine    <TextBox x:Name="stat2" Grid.Column="1" Grid.Row="1" Background="Yellow" Margin="5" FontWeight="Bold" Text="{Binding Path=LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine    <TextBlock Grid.Column="2" Grid.Row="1" />Di2015NewLine
11696031Di2015UniqueSeparatorTextBlock
11696031Di2015UniqueSeparatorx:Name="stat2"
11696031Di2015UniqueSeparatorTextBox
11696031Di2015UniqueSeparatorLastName
11696031Di2015UniqueSeparatorstat2
11696031Di2015UniqueSeparatorstat2
11696031Di2015UniqueSeparatorTextBox
11696031Di2015UniqueSeparatorLastName
11696031Di2015UniqueSeparatorTwoWay
11696031Di2015UniqueSeparatorstat2
11696031Di2015UniqueSeparatorFirstName
11696031Di2015UniqueSeparatorstat1
11696031Di2015UniqueSeparatorTextBlock
11696031Di2015UniqueSeparatorText
11696043Di2015UniqueSeparatorprivate void Form_MouseMove(object sender, MouseEventArgs e) {Di2015NewLine    if(settingButton.Bounds.Contains(e.Location) && !settingButton.Visible) {Di2015NewLine        settingButton.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11696066Di2015UniqueSeparatorSortedList
11696066Di2015UniqueSeparator<=N
11696066Di2015UniqueSeparatorO(N)
11696066Di2015UniqueSeparatorO(log N)
11696066Di2015UniqueSeparatorO(log N)
11696066Di2015UniqueSeparatorO(N)
11696066Di2015UniqueSeparatorSortedList
11696066Di2015UniqueSeparatorO(log N)
11696066Di2015UniqueSeparatorO(log N)
11696066Di2015UniqueSeparatorSortedSet<T>
11696066Di2015UniqueSeparatorSortedSet<T>.Contains()
11696066Di2015UniqueSeparator    public class LowerBoundSortedSet<T> : SortedSet<T> {Di2015NewLineDi2015NewLine        private ComparerDecorator<T> _comparerDecorator;Di2015NewLineDi2015NewLine        private class ComparerDecorator<T> : IComparer<T> {Di2015NewLineDi2015NewLine            private IComparer<T> _comparer;Di2015NewLineDi2015NewLine            public T LowerBound { get; private set; }Di2015NewLineDi2015NewLine            private bool _reset = true;Di2015NewLineDi2015NewLine            public void Reset()Di2015NewLine            {Di2015NewLine                _reset = true;Di2015NewLine            }Di2015NewLineDi2015NewLine            public ComparerDecorator(IComparer<T> comparer)Di2015NewLine            {Di2015NewLine                _comparer = comparer;Di2015NewLine            }Di2015NewLineDi2015NewLine            public int Compare(T x, T y)Di2015NewLine            {Di2015NewLine                int num = _comparer.Compare(x, y);Di2015NewLine                if (_reset)Di2015NewLine                {Di2015NewLine                    LowerBound = y;Di2015NewLine                }Di2015NewLine                if (num >= 0)Di2015NewLine                {Di2015NewLine                    LowerBound = y;Di2015NewLine                    _reset = false;Di2015NewLine                }Di2015NewLine                return num;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public LowerBoundSortedSet()Di2015NewLine            : this(Comparer<T>.Default) {}Di2015NewLineDi2015NewLine        public LowerBoundSortedSet(IComparer<T> comparer)Di2015NewLine            : base(new ComparerDecorator<T>(comparer)) {Di2015NewLine            _comparerDecorator = (ComparerDecorator<T>)this.Comparer;Di2015NewLine        }Di2015NewLineDi2015NewLine        public T FindLowerBound(T key)Di2015NewLine        {Di2015NewLine            _comparerDecorator.Reset();Di2015NewLine            this.Contains<T>(key);Di2015NewLine            return _comparerDecorator.LowerBound;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11696066Di2015UniqueSeparatorO(log N)
11696066Di2015UniqueSeparatorSortedList
11696066Di2015UniqueSeparatorSortedSet
11696066Di2015UniqueSeparatorSortedDictionary<T>
11696066Di2015UniqueSeparatorSortedSet<T>
11696066Di2015UniqueSeparatorSortedDictionary<T>
11696066Di2015UniqueSeparatorSortedSet<T>.Contains()
11696066Di2015UniqueSeparatorpublic virtual bool Contains(T item)Di2015NewLine{Di2015NewLine  return this.FindNode(item) != null;Di2015NewLine}Di2015NewLineDi2015NewLineinternal virtual SortedSet<T>.Node FindNode(T item)Di2015NewLine{Di2015NewLine  for (SortedSet<T>.Node node = this.root; node != null; {Di2015NewLine    int num;Di2015NewLine    node = num < 0 ? node.Left : node.Right;Di2015NewLine  }Di2015NewLine  )Di2015NewLine  {Di2015NewLine    num = this.comparer.Compare(item, node.Item);Di2015NewLine    if (num == 0)Di2015NewLine      return node;Di2015NewLine  }Di2015NewLine  return (SortedSet<T>.Node) null;Di2015NewLine}Di2015NewLine
11696259Di2015UniqueSeparatorCommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GridViewRowPresenter}}, Path=DataContext}"Di2015NewLine
11696361Di2015UniqueSeparatorDateTime?
11696361Di2015UniqueSeparatoreventLastTriggered = DateTime.Now
11696361Di2015UniqueSeparatorprivate void timer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (eventLastTriggered.HasValueDi2015NewLine        && (DateTime.Now - eventLastTriggered.Value) >= UpdateDelay)Di2015NewLine    {Di2015NewLine        eventLastTriggered = null; // reset it so we don't update againDi2015NewLine        Update();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic readonly TimeSpan UpdateDelay = TimeSpan.FromMilliseconds(whatever);Di2015NewLine
11696363Di2015UniqueSeparatorprotected void Application_BeginRequest()Di2015NewLine{Di2015NewLine    var ci = CultureInfo.GetCultureInfo("en-US");Di2015NewLineDi2015NewLine    if (Thread.CurrentThread.CurrentCulture.DisplayName == ci.DisplayName)Di2015NewLine    {Di2015NewLine        ci = CultureInfo.CreateSpecificCulture("en-US");Di2015NewLine        ci.NumberFormat.CurrencyNegativePattern = 1;Di2015NewLine        Thread.CurrentThread.CurrentCulture = ci;Di2015NewLine        Thread.CurrentThread.CurrentUICulture = ci;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11696438Di2015UniqueSeparatorint FinishedItems = panel.Children.OfType<MyObject>()Di2015NewLine                         .Count(mo => mo.IsFinished);Di2015NewLine
11696674Di2015UniqueSeparator<local:VisibilityConverter x:Key="ColumSpanConverter"/>Di2015NewLine
11696674Di2015UniqueSeparator<local:ColumSpanConverter x:Key="ColumSpanConverter" />Di2015NewLine
11696705Di2015UniqueSeparator    string xml = @"<images>Di2015NewLine    <image href=""http://images1.com/test.jpg"" id=""285"" />Di2015NewLine    <image href=""http://images1.com/test2.jpg"" id=""286"" />        Di2015NewLine</images>";Di2015NewLineDi2015NewLine    List<string> images = new List<string>();Di2015NewLine    using (StringReader sr = new StringReader(xml))Di2015NewLine    using (XmlTextReader xr = new XmlTextReader(sr))Di2015NewLine    {Di2015NewLine        while (!xr.EOF)Di2015NewLine        {Di2015NewLine            xr.MoveToContent();Di2015NewLine            xr.ReadToDescendant("image");Di2015NewLine            xr.MoveToAttribute("href");Di2015NewLine            xr.ReadAttributeValue();            Di2015NewLine            images.Add(xr.Value);Di2015NewLine            xr.MoveToElement();Di2015NewLine            if (xr.Name != "images")Di2015NewLine            {Di2015NewLine                xr.ReadElementString();Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                xr.ReadEndElement();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11696705Di2015UniqueSeparator[XmlRoot("images")]Di2015NewLinepublic class ImageListWrapperDi2015NewLine{Di2015NewLine    public ImageListWrapper()Di2015NewLine    {Di2015NewLine        Images = new List<Image>(); Di2015NewLine    }Di2015NewLineDi2015NewLine    [XmlElement("image")]Di2015NewLine    public List<Image> ImagesDi2015NewLine    {Di2015NewLine        get; set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<string> GetImageLocations()Di2015NewLine    {Di2015NewLine        List<string> imageLocations = new List<string>();Di2015NewLineDi2015NewLine        foreach (Image image in Images)Di2015NewLine        {Di2015NewLine            imageLocations.Add(image.Href);Di2015NewLine        }Di2015NewLineDi2015NewLine        return imageLocations;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[XmlRoot("image")]Di2015NewLinepublic class ImageDi2015NewLine{Di2015NewLine    [XmlAttribute("href")]Di2015NewLine    public string Href { get; set; }Di2015NewLine}Di2015NewLine
11696766Di2015UniqueSeparator    public void Extend(int SessionLimit)Di2015NewLine    {Di2015NewLine        FormsAuthenticationTicket OriginalTicket = ((FormsIdentity)Context.User.Identity).Ticket;Di2015NewLine        FormsAuthenticationTicket NewTicket = new FormsAuthenticationTicket(1, OriginalTicket.Name, DateTime.Now, DateTime.Now.AddMinutes(SessionLimit), false, OriginalTicket.UserData);Di2015NewLine        HttpCookie authCookie = new HttpCookie(FormsAuthentication.FormsCookieName, FormsAuthentication.Encrypt(NewTicket));Di2015NewLine        authCookie.HttpOnly = true;Di2015NewLine        HttpContext.Current.Response.Cookies.Add(authCookie);Di2015NewLine    }Di2015NewLine
11696790Di2015UniqueSeparatorIDisposable
11696875Di2015UniqueSeparatorout
11696875Di2015UniqueSeparatorref
11696927Di2015UniqueSeparatorpublic static IEnumerable<T> FindVisualChildren<T>(DependencyObject depObj) where T : DependencyObjectDi2015NewLine{Di2015NewLine    if (depObj != null)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < VisualTreeHelper.GetChildrenCount(depObj); i++)Di2015NewLine        {Di2015NewLine            DependencyObject child = VisualTreeHelper.GetChild(depObj, i);Di2015NewLine            if (child != null && child is T)Di2015NewLine            {Di2015NewLine                yield return (T)child;Di2015NewLine            }Di2015NewLineDi2015NewLine            foreach (T childOfChild in FindVisualChildren<T>(child))Di2015NewLine            {Di2015NewLine                yield return childOfChild;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11696927Di2015UniqueSeparatorforeach (TextBox txtChild in FindVisualChildren<TextBox>(yourDependencyObjectToSearchIn))Di2015NewLine{Di2015NewLine    // do whatever you want with child of type you were looking forDi2015NewLine    // for example:Di2015NewLine    txtChild.IsReadOnly = true;Di2015NewLine}Di2015NewLine
11697043Di2015UniqueSeparatorMethodA
11697043Di2015UniqueSeparatorMethodB
11697043Di2015UniqueSeparatorMethodC
11697043Di2015UniqueSeparatorMethodB
11697043Di2015UniqueSeparatorMethodA
11697043Di2015UniqueSeparatorMethodB
11697104Di2015UniqueSeparatorusing System.Linq;
11697104Di2015UniqueSeparatorList<FacebookMovie> moviesDetailsList = ...Di2015NewLineMovieDetails movieDetails = ConvertFacebookMovieToStandardMovie(moviesDetailsList).Single();Di2015NewLine
11697104Di2015UniqueSeparator= new [] {movieDetail};
11697201Di2015UniqueSeparator    public partial class Form1 : CustomFormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }            Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CustomForm : FormDi2015NewLine    {        Di2015NewLine        public CustomForm()Di2015NewLine        {Di2015NewLine            this.Text = "your choice";Di2015NewLine            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedToolWindow;Di2015NewLine            //and so on...            Di2015NewLine            //you may even implement your own private InitializeComponent() to instantiate your common child controlsDi2015NewLine            //since this is a constructor with no arguments it will be used by derived types with no need to explicitly call it in their ownDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11697282Di2015UniqueSeparatorMyClass
11697282Di2015UniqueSeparatorIMyInterface
11697306Di2015UniqueSeparatorobject[]
11697306Di2015UniqueSeparatorstring[]
11697306Di2015UniqueSeparatorIEnumerable<DestinationType>
11697749Di2015UniqueSeparatorif (nextAction is ButtonClickedAction) {Di2015NewLine   ...Di2015NewLine}Di2015NewLine
11697749Di2015UniqueSeparatorprivate void DetermineIfActionChanged(IAction lastAction)Di2015NewLine{Di2015NewLine   IAction nextAction = GetNextAction();Di2015NewLine   if (nextAction.GetType() != lastAction.GetType())Di2015NewLine   {Di2015NewLine       DoSomethingAwesome();Di2015NewLine   }Di2015NewLine}Di2015NewLine
11698029Di2015UniqueSeparatorString[]    items = itemList.Split(',');Di2015NewLine
11698079Di2015UniqueSeparatorTextBox3.Text
11698079Di2015UniqueSeparatorVarchar(5)
11698079Di2015UniqueSeparatorTextBox3.Text
11698079Di2015UniqueSeparator"abcdef"
11698307Di2015UniqueSeparatorpublic class EntityDi2015NewLine{Di2015NewLine    public int ID { get; set; }Di2015NewLine    public int ParentID { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public static List<Entity> GetTree(int ID, List<Entity> ListToSearch, bool First = true)Di2015NewLine    {Di2015NewLine        List<Entity> FilteredEntities = new List<Entity>();Di2015NewLineDi2015NewLine        FilteredEntities.AddRange(ListToSearch.Where<Entity>(x => x.ParentID == ID).ToList<Entity>());Di2015NewLineDi2015NewLine        List<Entity> Temp = new List<Entity>();Di2015NewLine        foreach (Entity current in FilteredEntities)Di2015NewLine        {Di2015NewLine            Temp.AddRange(GetTree(current.ID, ListToSearch, false));Di2015NewLine        }Di2015NewLineDi2015NewLine        FilteredEntities.AddRange(Temp);Di2015NewLineDi2015NewLine        if (First)Di2015NewLine        {Di2015NewLine            FilteredEntities.Add(ListToSearch.Where<Entity>(x => x.ID == ID).Single<Entity>());Di2015NewLine        }Di2015NewLineDi2015NewLine        return FilteredEntities;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11698307Di2015UniqueSeparator    List<Entity> filteredEntities = Entity.GetTree(1, entities);Di2015NewLine    List<string> onlyTheNames = filteredEntities.Select<Entity, string>(x => x.Name).ToList<string>();Di2015NewLine
11698395Di2015UniqueSeparatorrepository.fruitRepository.Get()Di2015NewLine    .GroupBy(m => m.type)Di2015NewLine    .Select(m => new { type = m.Key, minPrice = m.Min(f => f.Price) });Di2015NewLine
11698395Di2015UniqueSeparatorvar result = from x in repository.fruitRepository.Get()Di2015NewLine             group x by x.type into typeGroupDi2015NewLine             select newDi2015NewLine             {Di2015NewLine                 type = typeGroup.Key,Di2015NewLine                 minPrice = typeGroup.Min(item => item.Price)Di2015NewLine             };Di2015NewLine
11698463Di2015UniqueSeparatorthrow
11698463Di2015UniqueSeparatorjmp
11698463Di2015UniqueSeparatorcall
11698463Di2015UniqueSeparatortail.call
11698463Di2015UniqueSeparatorret
11698463Di2015UniqueSeparatortail.call
11698463Di2015UniqueSeparatorret
11698463Di2015UniqueSeparatorbr
11698463Di2015UniqueSeparatorbr.s
11698521Di2015UniqueSeparatorListViewItem
11698521Di2015UniqueSeparatorListViewSubItem
11698521Di2015UniqueSeparatorfor (int i = 0; i < table.Rows.Count; i++)Di2015NewLine{ Di2015NewLine   ListViewItem row = new ListViewItem(table.Rows[i][0].ToString());Di2015NewLine   for (int j = 1; j < table.Columns.Count; j++)Di2015NewLine      row.SubItems.Add(table.Rows[i][j].ToString());Di2015NewLine   lstDisplay.Items.Add(row);Di2015NewLine}Di2015NewLine
11698670Di2015UniqueSeparatorControl.Invoke
11698670Di2015UniqueSeparatorprivate void data(string s, double d)Di2015NewLine{Di2015NewLine    if (this.InvokeRequired) {Di2015NewLine        this.Invoke(new Action( () => {data(s, d);} ));Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    myDataStructure.Add(new MyDataObj(s,d));Di2015NewLine}Di2015NewLine
11698670Di2015UniqueSeparatorControl.InvokeRequired
11698670Di2015UniqueSeparatorInvoke()
11698670Di2015UniqueSeparatorInvokeRequired
11698670Di2015UniqueSeparatorfalse
11698709Di2015UniqueSeparatorid
11698709Di2015UniqueSeparatorid="content"
11698709Di2015UniqueSeparatorid="body#content"
11698709Di2015UniqueSeparatorID
11698777Di2015UniqueSeparatorOutOfMemoryException
11698777Di2015UniqueSeparatorint x = 10;Di2015NewLineobject o = x;Di2015NewLine
11698777Di2015UniqueSeparatorint x = 10;Di2015NewLineobject o = new Int32_Wrapper(x);Di2015NewLine
11698777Di2015UniqueSeparatorInt32_Wrapper
11698853Di2015UniqueSeparatorMyStruct val = ...Di2015NewLineobject boxedVal = val;Di2015NewLinefieldInfo.SetValue(boxedVal, newValue);Di2015NewLineval = (MyStruct)boxedVal;Di2015NewLine
11698877Di2015UniqueSeparatormyemail.Body = "<h1>Quiz!</h1><img src=/fulladdress/someimage.png onclick="location.href='myPage.html'">";Di2015NewLineDi2015NewLinemyemail.IsBodyHtml = true; //Send this as plain-textDi2015NewLine
11698877Di2015UniqueSeparator//in this case your newLink would be default.aspx/testid=12Di2015NewLinestring newLink = GetNewLinkFromDB();Di2015NewLineDi2015NewLineDi2015NewLinestring html = "<h1>Quiz!</h1><img src=/fulladdress/someimage.png usemap ="#clickMap">";Di2015NewLinehtml += "<map id =\\"clickMap\\" name=\\"clickMap\\">Di2015NewLine<area shape =\\"rect\\" coords =\\"0,0,82,126\\" href ="+ newLink +" alt=\\"Quiz\\" />Di2015NewLine</map>"Di2015NewLine
11698877Di2015UniqueSeparatorprotected void SendEmail(string toAddresses, string fromAddress, string MailSubject, string MessageBody, bool isBodyHtml)Di2015NewLine    {Di2015NewLine        SmtpClient sc = new SmtpClient("MailServer");Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            MailMessage msg = new MailMessage();Di2015NewLine            msg.From = new MailAddress("test@mailServer.com", "TestSystem");Di2015NewLineDi2015NewLineDi2015NewLine            //QuizLink is appSetting inside your web configDi2015NewLine            string newLink = System.Configuration.ConfigurationManager.AppSettings["QuizLink"].ToString();Di2015NewLineDi2015NewLineDi2015NewLine    string html = "<h1>Quiz!</h1><img src=/fulladdress/someimage.png usemap ="#clickMap">";Di2015NewLine    html += "<map id =\\"clickMap\\" name=\\"clickMap\\">Di2015NewLine    <area shape =\\"rect\\" coords =\\"0,0,82,126\\" href ="+ newLink +" alt=\\"Quiz\\" />Di2015NewLine    </map>"Di2015NewLineDi2015NewLine            msg.Bcc.Add(toAddresses);Di2015NewLine            msg.Subject = MailSubject;Di2015NewLine            msg.Body = html ;Di2015NewLine            msg.IsBodyHtml = isBodyHtml;Di2015NewLine            sc.Send(msg);Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            throw ex;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11698877Di2015UniqueSeparatorstring html = "<h1>Quiz!</h1><img src='" + src + "' usemap ='#clickMap'>";Di2015NewLine            html += "<map id =\\"clickMap\\" name=\\"clickMap\\">" +Di2015NewLine                     "<area shape =\\"rect\\" coords =\\"0,0,82,126\\" href =" + quickLink + "alt=\\"Quiz\\" title='Click For Quiz'/></map>";Di2015NewLine
11698961Di2015UniqueSeparatorswitch (e.ClickedItem.Text.ToLower())Di2015NewLine{Di2015NewLine    case "find":Di2015NewLine        Find find = new Find(customTextBox1);Di2015NewLine        find.Show();Di2015NewLine        break;Di2015NewLine    case "undo": case "redo": case "cut": case "copy": case "paste": case "select all":Di2015NewLine        Type thisType = customTextBox1.GetType();Di2015NewLine        MethodInfo theMethod = thisType.GetMethod(e.ClickedItem.Text.ToLower());Di2015NewLine        theMethod.Invoke(customTextBox1, userParameters);Di2015NewLine        break;Di2015NewLine    case "delete":Di2015NewLine        customTextBox1.SelectedText = "";Di2015NewLine        break;Di2015NewLine    case "refresh":Di2015NewLine        RefreshData();Di2015NewLine        break;Di2015NewLine}Di2015NewLine
11699068Di2015UniqueSeparatorStatic.dll
11699068Di2015UniqueSeparatorDynamic
11699180Di2015UniqueSeparator Console.WriteLine("char: " + sizeof(char).ToString() + "\\n"Di2015NewLine                 + "bool: " + sizeof(bool).ToString());Di2015NewLine
11699180Di2015UniqueSeparatorMarshal.SizeOf()
11699180Di2015UniqueSeparatorstruct
11699363Di2015UniqueSeparatorModifiedDate
11699363Di2015UniqueSeparatorDEFAULT
11699363Di2015UniqueSeparatorAFTER UPDATE
11699363Di2015UniqueSeparatorModifiedDate
11699363Di2015UniqueSeparatorModifiedDate
11699363Di2015UniqueSeparatorAFTER UPDATE
11699363Di2015UniqueSeparatorCREATE TRIGGER trg_UpdateModifiedDateDi2015NewLineON dbo.YourTableHereDi2015NewLineAFTER UPDATEDi2015NewLineASDi2015NewLine     UPDATE dbo.YourTableHereDi2015NewLine     SET ModifiedDate = GETDATE()Di2015NewLine     WHERE AddressID IN (SELECT AddressID FROM Inserted)Di2015NewLine
11699363Di2015UniqueSeparatorYourTableHere
11699363Di2015UniqueSeparatorID
11699363Di2015UniqueSeparatorModifiedDate
11699363Di2015UniqueSeparatorInserted
11699363Di2015UniqueSeparatorUPDATE
11699363Di2015UniqueSeparatorYourTableHere
11699363Di2015UniqueSeparatorModifiedDate
11699363Di2015UniqueSeparatorSELECT Di2015NewLine    c.name, c.is_computed, c.definitionDi2015NewLineFROM Di2015NewLine    sys.computed_columns cDi2015NewLineWHERE Di2015NewLine    object_id = OBJECT_ID('dbo.Contacts')Di2015NewLine    AND c.Name = 'ModifiedDate'Di2015NewLine
11699563Di2015UniqueSeparatorAND IsSent = 1Di2015NewLine
11699563Di2015UniqueSeparatorisSent
11699729Di2015UniqueSeparatorEndReceive
11699729Di2015UniqueSeparatorvar data = Encoding.ASCII.GetBytes("Hello World!");Di2015NewLinevar base64 = Convert.ToBase64String(data);Di2015NewLinevar bytesToSend = Encoding.UTF8.GetBytes(base64);Di2015NewLinevar stringRecieved = Encoding.UTF8.GetString(bytesToSend).Substring(0, 5);Di2015NewLinevar decoded = Convert.FromBase64String(stringRecieved);Di2015NewLinevar result = Encoding.ASCII.GetString(decoded);Di2015NewLineConsole.WriteLine("{0} -> {1} -> {2}", base64, stringRecieved, result);Di2015NewLine
11699729Di2015UniqueSeparator.Substring(0, 5)
11699729Di2015UniqueSeparator.Substring
11699729Di2015UniqueSeparatorvar bytesToSend = Encoding.UTF8.GetBytes("Hello World!");Di2015NewLinevar stringRecieved = Encoding.UTF8.GetString(bytesToSend);Di2015NewLine
11699762Di2015UniqueSeparatorint
11699762Di2015UniqueSeparatorSystem.Int32
11699762Di2015UniqueSeparatorint
11699762Di2015UniqueSeparatorint
11699793Di2015UniqueSeparatorSystem.Linq.Buffer<T>
11699793Di2015UniqueSeparatorOrderBy
11699793Di2015UniqueSeparatorTElement[] array = null;Di2015NewLineint num = 0;Di2015NewLineif (collection != null)Di2015NewLine{Di2015NewLine    num = collection.Count;Di2015NewLine    if (num > 0)Di2015NewLine    {Di2015NewLine        array = new TElement[num];Di2015NewLine        collection.CopyTo(array, 0);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11699793Di2015UniqueSeparatorcollection
11699793Di2015UniqueSeparatorcollection.Count
11699793Di2015UniqueSeparatorcollection.CopyTo
11699793Di2015UniqueSeparatorConcurrentDictionary.ToArray.
11699793Di2015UniqueSeparatorConcurrentDictionary
11699793Di2015UniqueSeparatorwhile (!completed)Di2015NewLine{Di2015NewLine    completed = t.Join(1);Di2015NewLineDi2015NewLine    var q =Di2015NewLine      from pair in wordFrequencies.ToArray() // <-- add ToArray hereDi2015NewLine      orderby pair.Value descending, pair.KeyDi2015NewLine      select new Tuple<string, int>(pair.Key, pair.Value);Di2015NewLineDi2015NewLine    outputter.WriteBatch(q);Di2015NewLine}            Di2015NewLine
11699940Di2015UniqueSeparatortr
11699940Di2015UniqueSeparatortd
11699940Di2015UniqueSeparatorbool first = true;Di2015NewLineforeach (HtmlNode row in doc.DocumentNode.SelectNodes("//tr"))Di2015NewLine{Di2015NewLine    if (first)Di2015NewLine    {Di2015NewLine        row.RemoveChild(row.SelectSingleNode("th[10]"));Di2015NewLine        row.RemoveChild(row.SelectSingleNode("th[9]"));Di2015NewLine        row.RemoveChild(row.SelectSingleNode("th[8]"));Di2015NewLine        first = false;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        row.RemoveChild(row.SelectSingleNode("td[10]"));Di2015NewLine        row.RemoveChild(row.SelectSingleNode("td[9]"));Di2015NewLine        row.RemoveChild(row.SelectSingleNode("td[8]"));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11700203Di2015UniqueSeparatorc.SetCaseNo = sqlSaveCase.ExecuteNonQuery().ToString(); Di2015NewLine
11700235Di2015UniqueSeparatorSqlCommand
11700235Di2015UniqueSeparatorcomm.CommandType = CommandType.StoredProcedure;Di2015NewLine
11700235Di2015UniqueSeparatorcomm
11700235Di2015UniqueSeparator.CommandText
11700235Di2015UniqueSeparatorSqlCommand
11700235Di2015UniqueSeparatorcmd.Parameters.Add("@PromoFront", SqlDbType.Bit).Value = 1;Di2015NewLine
11700235Di2015UniqueSeparatorSqlDbType
11700241Di2015UniqueSeparatorMONTH
11700241Di2015UniqueSeparatorYEAR
11700241Di2015UniqueSeparatorstartdate
11700241Di2015UniqueSeparatorSELECT * FROM employee WHERE MONTH(startdate)=12 AND YEAR(startdate)=2012Di2015NewLine
11700241Di2015UniqueSeparatorSUBSTRING(startdate,3,2)
11700241Di2015UniqueSeparatorSUBSTRING(startdate,6,4)
11700241Di2015UniqueSeparatorMONTH
11700241Di2015UniqueSeparatorYEAR
11700241Di2015UniqueSeparatorvar result = from employees e Di2015NewLine             select e Di2015NewLine             where e.startdate.Month==DateTime.Now.Month Di2015NewLine                   && e.startdate.Year==DateTime.Now.Year;Di2015NewLine
11700241Di2015UniqueSeparatorstartdate
11700241Di2015UniqueSeparatorDATETIME
11700284Di2015UniqueSeparatortextBoxList.AddRange( { textBox1, textBox2, textBox3, textBox4, textBox5 } );Di2015NewLine
11700284Di2015UniqueSeparatortextBoxList.Add(textBox1);Di2015NewLinetextBoxList.Add(textBox2);Di2015NewLinetextBoxList.Add(textBox3);Di2015NewLine...Di2015NewLine
11700336Di2015UniqueSeparatorRowCommand
11700369Di2015UniqueSeparatorlistDouble.Clear()
11700384Di2015UniqueSeparator            // load existing bmps Di2015NewLine        var bmp1 = new Bitmap("test2.bmp");Di2015NewLine        var bmp2 = new Bitmap("test2.bmp");Di2015NewLineDi2015NewLine        // apply transforms to bmp1 Di2015NewLine        var canvas1 = Graphics.FromImage(bmp1);Di2015NewLine        canvas1.ScaleTransform(0.5f, 0.5f);Di2015NewLine        canvas1.RotateTransform(45.0f);Di2015NewLine        canvas1.Save();Di2015NewLine        canvas1.DrawImage(bmp1,100, 0);Di2015NewLine        bmp1.Save("test1res.bmp");Di2015NewLine        var bmpres1 = new Bitmap("test1res.bmp");Di2015NewLineDi2015NewLine        // apply transforms to bmp2Di2015NewLine        var resbmp2 = new Bitmap(1000, 1000);Di2015NewLine        var canvas2 = Graphics.FromImage(bmp2);Di2015NewLine        canvas2.ScaleTransform(0.5f, 0.5f);Di2015NewLine        canvas2.RotateTransform(45.0f);Di2015NewLine        canvas2.Save();Di2015NewLine        canvas2.DrawImage(bmp2, 100, 0);Di2015NewLine        bmp2.Save("test2res.bmp");Di2015NewLine        var bmpres2 = new Bitmap("test2res.bmp");Di2015NewLineDi2015NewLine        // create final merged bmp Di2015NewLine        var mergedBmp = new Bitmap(1000, 1000);Di2015NewLine        mergedBmp.SetResolution(bmp1.HorizontalResolution, bmp1.VerticalResolution);Di2015NewLineDi2015NewLine        // draw transformed images on to final bmp Di2015NewLine        var mergedCanvas = Graphics.FromImage(mergedBmp);Di2015NewLine        mergedCanvas.DrawImage(bmpres1, 0, 0);Di2015NewLine        mergedCanvas.DrawImage(bmpres2, 500, 0);Di2015NewLineDi2015NewLine        mergedCanvas.Save();Di2015NewLine        Graphics graph = mergedCanvas;Di2015NewLine       // Bitmap bmpPicture = new Bitmap("test2.bmp");Di2015NewLine        graph.DrawImage(mergedBmp, 0, 0);Di2015NewLineDi2015NewLine        mergedBmp.Save("res.bmp");Di2015NewLine
11700483Di2015UniqueSeparatorRinse
11700483Di2015UniqueSeparatorWashingMachine
11700559Di2015UniqueSeparator if (selectedItem.Equals("ReservedSeats"))Di2015NewLine
11700559Di2015UniqueSeparator    string[] strSeatInfoStrings = new string[count];Di2015NewLineDi2015NewLine    for (int index = 0; index <= count; index++)Di2015NewLine    {Di2015NewLine        strSeatInfoStrings[index] = GetSeatInfoAt(index); Di2015NewLine    }Di2015NewLineDi2015NewLine    return strSeatInfoStrings;Di2015NewLine
11700559Di2015UniqueSeparator    return new string[0];Di2015NewLine
11700663Di2015UniqueSeparatorstring remoteUri = "http://www.yourSite.com/library/homepage/images/";Di2015NewLinestring fileName = "YourImagegif", Di2015NewLinemyStringWebResource = null;Di2015NewLine// Create a new WebClient instance.Di2015NewLineWebClient myWebClient = new WebClient();Di2015NewLine// Concatenate the domain with the Web resource filename.Di2015NewLinemyStringWebResource = remoteUri + fileName;Di2015NewLineConsole.WriteLine("Downloading File \\"{0}\\" from \\"{1}\\" .......\\n\\n", fileName, myStringWebResource);Di2015NewLine// Download the Web resource and save it into the current filesystem folder.Di2015NewLinemyWebClient.DownloadFile(myStringWebResource,fileName); Di2015NewLine
11700687Di2015UniqueSeparatorif (textBox1.Text != string.Empty && !Regex.IsMatch(textBox1.Text, @"^[0-9]+$"))Di2015NewLine{Di2015NewLine    MessageBox.Show("Please only enter numbers");Di2015NewLine    textBox1.Clear();Di2015NewLine    return; // nothing after this will executeDi2015NewLine}Di2015NewLine
11700687Di2015UniqueSeparatorif
11700687Di2015UniqueSeparatorreturn;
11700736Di2015UniqueSeparatornetTCPBinding
11700736Di2015UniqueSeparator[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]Di2015NewLine[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single)].Di2015NewLine
11700736Di2015UniqueSeparatornetTCPBinding
11700818Di2015UniqueSeparatorClose
11700818Di2015UniqueSeparatorusing
11700818Di2015UniqueSeparatorusing (TcpClient client = ...)Di2015NewLine{Di2015NewLine    // Use the clientDi2015NewLine}Di2015NewLine
11700841Di2015UniqueSeparatorbyte[] data = new byte[DATA_SIZE];Di2015NewLineDi2015NewLinebyte[] result; Di2015NewLineDi2015NewLineSHA1 sha = new SHA1CryptoServiceProvider(); Di2015NewLine    // This is one implementation of the abstract class SHA1.Di2015NewLineDi2015NewLineresult = sha.ComputeHash(data);Di2015NewLine
11700858Di2015UniqueSeparator    public Form1() {Di2015NewLine        InitializeComponent();Di2015NewLine        Application.Idle += new EventHandler((s, ea) => this.Invalidate());Di2015NewLine    }Di2015NewLine
11701144Di2015UniqueSeparator\\d
11701144Di2015UniqueSeparator[]][\\dA-Za-z /.]+.vmx [ ]
11701144Di2015UniqueSeparator\\][\\dA-Za-z\\s/.]+\\.vmx
11701221Di2015UniqueSeparatorbyte[] imageBytes = Convert.FromBase64String(imageData.EncodeTo64());Di2015NewLine
11701221Di2015UniqueSeparatorbyte[] imageBytes = Convert.FromBase64String(imageData);Di2015NewLine
11701221Di2015UniqueSeparatorstring imageDataParsed = imageData.Substring( imageData.IndexOf( ',' ) + 1 );Di2015NewLinebyte[] imageBytes = Convert.FromBase64String( imageDataParsed );Di2015NewLineusing ( var imageStream = new MemoryStream( imageBytes, false ) )Di2015NewLine{Di2015NewLine   Bitmap image = new Bitmap( imageStream );Di2015NewLine}Di2015NewLine
11701226Di2015UniqueSeparatorstring result = string.Format("{0}{1:000}", comp, emp_id+1);Di2015NewLine
11701226Di2015UniqueSeparatorstring result = comp + (emp_id+1).ToString("000");Di2015NewLine
11701293Di2015UniqueSeparatorSaveChanges
11701293Di2015UniqueSeparatorConcurrentDictionary
11701293Di2015UniqueSeparatorforeach(record singleRecord in recordSet)Di2015NewLine{Di2015NewLine    //RecordsInProcess is a globally-available ConcurrentDictionary<recordIdType, recordDi2015NewLine    if (!RecordsInProcess.TryAdd(singleRecord.RecordId, singleRecord))Di2015NewLine       continue; //TryAdd will return false if such an element already existsDi2015NewLineDi2015NewLine    bool result = ProcessRecord();Di2015NewLine    //Mark isProcessed as true Di2015NewLine    if(result)Di2015NewLine        singleRecord.IsProcessed = true;Di2015NewLine    objectContext.Savechanges();Di2015NewLine    record junk; // we don't need itDi2015NewLine    RecordsInProcess.TryRemove(singleRecordId, out junk)Di2015NewLine}Di2015NewLine
11701293Di2015UniqueSeparatorprocessing
11701297Di2015UniqueSeparator@
11701297Di2015UniqueSeparator\\
11701297Di2015UniqueSeparatorstring vmListCommand = "vim-cmd vmsvc/getallvms | sed '1d' | awk '{if ($1 > 0) print $1\\":\\"$2}'";Di2015NewLine
11701297Di2015UniqueSeparator@
11701297Di2015UniqueSeparator@
11701297Di2015UniqueSeparator\\
11701501Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public string SelectedId { get; set; }Di2015NewLine    public IEnumerable<SelectListItem> Items { get; set; }Di2015NewLine}Di2015NewLine
11701501Di2015UniqueSeparatorpublic class ItemsController: ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        var model = new MyViewModelDi2015NewLine        {Di2015NewLine            Items = new[]Di2015NewLine            {Di2015NewLine                new SelectListItem { Value = "1", Text = "item 1" },Di2015NewLine                new SelectListItem { Value = "2", Text = "item 2" },Di2015NewLine                new SelectListItem { Value = "3", Text = "item 3" },Di2015NewLine            }Di2015NewLine        };Di2015NewLine        return PartialView(model);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11701501Di2015UniqueSeparator~/Areas/Admins/Views/Items/Index.cshtml
11701501Di2015UniqueSeparator@model MyViewModelDi2015NewLine@Html.DropDownListFor(x => x.SelectedId, Model.Items)Di2015NewLine
11701501Di2015UniqueSeparator@Html.Action("Index", "Items", new { area = "admin" })Di2015NewLine
11701665Di2015UniqueSeparator00101011 00101010 01000010Di2015NewLine
11701665Di2015UniqueSeparator00101011 00101010 01000010Di2015NewLine-------------^Di2015NewLine(Remember it's 0 based)Di2015NewLine
11701665Di2015UniqueSeparatorm_byteArray[12 / 8] (12 / 8 = 1 so we know we want byte number two at index 1 - byte array is also zero based!)Di2015NewLine
11701665Di2015UniqueSeparator00101010Di2015NewLine----^Di2015NewLine
11701665Di2015UniqueSeparator00101010 & (1 << (12 % 8))Di2015NewLine
11701665Di2015UniqueSeparator00101010 & 00000001 << 4Di2015NewLine
11701665Di2015UniqueSeparator00101010 & 00001000Di2015NewLine
11701665Di2015UniqueSeparator1 & 1Di2015NewLine
11701665Di2015UniqueSeparator1 & 0Di2015NewLine
11701681Di2015UniqueSeparator@"/([A-Za-z0-9/-]+)"Di2015NewLine
11701816Di2015UniqueSeparator// Automatic constructor was invokedDi2015NewLine// This line is same as MyStruct mStruct = new MyStruct();Di2015NewLineMyStruct mStruct; Di2015NewLine
11701816Di2015UniqueSeparatormStruct.i
11701816Di2015UniqueSeparatorMyStruct x1; Di2015NewLineConsole.WriteLine(x1.i); // Error: CS0170: Use of possibly unassigned field 'i'Di2015NewLineDi2015NewLineMyStruct x1 = new MyStruct();Di2015NewLineConsole.WriteLine(x1.i); // No errorDi2015NewLine
11701835Di2015UniqueSeparatorImage Box = new Image();Di2015NewLinemyGrid.Children.Add(Box);Di2015NewLineGrid.SetRow(Box, 1);Di2015NewLineGrid.SetColumn(Box, 1);Di2015NewLine
11701913Di2015UniqueSeparatorclass C<T> : where T : C<T>
11701913Di2015UniqueSeparatorpublic abstract class Numeric<T>Di2015NewLine    where T : Numeric<T>Di2015NewLine{Di2015NewLine    public static Func<T, T, T> Add;Di2015NewLineDi2015NewLine    public static T operator +(Numeric<T> x, Numeric<T> y)Di2015NewLine    {Di2015NewLine        if (x == null) {Di2015NewLine            return (T)y;Di2015NewLine        }Di2015NewLine        if (y == null) {Di2015NewLine            return (T)x;Di2015NewLine        }Di2015NewLine        return Add((T)x, (T)y);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11701913Di2015UniqueSeparatorNumeric<T>
11701913Di2015UniqueSeparatorNumeric<T>
11701913Di2015UniqueSeparatorT
11701913Di2015UniqueSeparatorwhere T : Numeric<T>
11701913Di2015UniqueSeparatorNumeric<T>
11701913Di2015UniqueSeparator+
11701913Di2015UniqueSeparator+=
11701913Di2015UniqueSeparatorpublic class Calculator<T> where T : Numeric<T>Di2015NewLine{Di2015NewLine    public static T AddValues(params T[] values)Di2015NewLine    {Di2015NewLine        T sum = default(T);Di2015NewLine        if (values != null) {Di2015NewLine            for (int i = 0; i < values.Length; i++) {Di2015NewLine                sum += values[i];Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return sum;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11701913Di2015UniqueSeparatorAdd
11701913Di2015UniqueSeparatorpublic class Complex : Numeric<Complex>Di2015NewLine{Di2015NewLine    static Complex()Di2015NewLine    {Di2015NewLine        Add = (x, y) => new Complex(x.Re + y.Re, x.Im + y.Im);Di2015NewLine    }Di2015NewLineDi2015NewLine    public double Re { get; private set; }Di2015NewLine    public double Im { get; private set; }Di2015NewLineDi2015NewLine    public Complex(double re, double im)Di2015NewLine    {Di2015NewLine        Re = re;Di2015NewLine        Im = im;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return String.Format("({0}, {1})", Re, Im);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11701913Di2015UniqueSeparatorstatic class TestDi2015NewLine{Di2015NewLine    public static void AddComplexNumbers()Di2015NewLine    {Di2015NewLine        // Using the calculatorDi2015NewLine        var numbers = new Complex[] { new Complex(2, 7), new Complex(6, -2) };Di2015NewLine        var result = Calculator<Complex>.AddValues(numbers);Di2015NewLine        Console.WriteLine(result); // ==> (8, 5)Di2015NewLineDi2015NewLine        // DirectlyDi2015NewLine        var c1 = new Complex(2, 7);Di2015NewLine        var c2 = new Complex(6, -2);Di2015NewLine        result = c1 + c2;Di2015NewLine        Console.WriteLine(result); // ==> (8, 5)Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11702045Di2015UniqueSeparatorconst int MaxX = 50;Di2015NewLineconst int MaxY = 50;Di2015NewLineconst int b = 6;Di2015NewLineDi2015NewLinevar maxExponent = (int)Math.Log((long)MaxX * MaxY, b);Di2015NewLineDi2015NewLinevar result = new List<Tuple<int, int>>[maxExponent + 1];Di2015NewLinefor (var i = 0; i < result.Length; ++i)Di2015NewLine  result[i] = new List<Tuple<int, int>>();Di2015NewLineDi2015NewLine// Add the trivial caseDi2015NewLineresult[0].Add(Tuple.Create(1, 1));Di2015NewLineDi2015NewLine// Add all (x,y) with x*y = bDi2015NewLinefor (var factor = 1; factor <= (int)Math.Sqrt(b); ++factor)Di2015NewLine  if (b % factor == 0)Di2015NewLine    result[1].Add(Tuple.Create(factor, b / factor));Di2015NewLineDi2015NewLine// Now handle the rest, meaning x > b, y <= x, x != 1, y != 1Di2015NewLinefor (var x = b; x <= MaxX; ++x) {Di2015NewLine  if (x % b != 0)Di2015NewLine    continue;Di2015NewLineDi2015NewLine  // Get the max exponent for b in x and the remaining factorDi2015NewLine  int exp = 1;Di2015NewLine  int lastFactor = x / b;Di2015NewLine  while (lastFactor >= b && lastFactor % b == 0) {Di2015NewLine    ++exp;Di2015NewLine    lastFactor = lastFactor / b;Di2015NewLine  }Di2015NewLineDi2015NewLine  if (lastFactor > 1) {Di2015NewLine    // Find 1 < y < b with x*y yielding a power of bDi2015NewLine    for (var y = 2; y < b; ++y)Di2015NewLine      if (lastFactor * y == b)Di2015NewLine        result[exp + 1].Add(Tuple.Create(x, y));Di2015NewLine  } else {Di2015NewLine    // lastFactor == 1 meaning that x is a power of bDi2015NewLine    // that means that y has to be a power of b (with y <= x)Di2015NewLine    for (var k = 1; k <= exp; ++k)Di2015NewLine      result[exp + k].Add(Tuple.Create(x, (int)Math.Pow(b, k)));Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine// Output the resultDi2015NewLinefor (var i = 0; i < result.Length; ++i) {Di2015NewLine  Console.WriteLine("Exponent {0} - Power {1}:", i, Math.Pow(b, i));Di2015NewLine  foreach (var pair in result[i]) {Di2015NewLine    Console.WriteLine("  {0}", pair);Di2015NewLine    //if (pair.Item1 != pair.Item2)Di2015NewLine    //  Console.WriteLine("  ({0}, {1})", pair.Item2, pair.Item1);Di2015NewLine  }Di2015NewLine}Di2015NewLine
11702164Di2015UniqueSeparator        using (var url = NSUrl.FromString ("http://yoururl.com/yourpic.jpg"))Di2015NewLine        {Di2015NewLine            using (var data = NSData.FromUrl (url))Di2015NewLine            {Di2015NewLine                imageView.Image = UIImage.LoadFromData (data);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11702164Di2015UniqueSeparatorUIImageView
11702253Di2015UniqueSeparatorSvnClient _svnClient = new SvnClient();Di2015NewLine_svnClient.Configuration.SetOption("servers", "global", "ssl-authority-files", "/path/to/cacert.crt");Di2015NewLine_svnClient.Configuration.SetOption("servers", "groups", "myhost", "myhostsdns.com");Di2015NewLine
11702280Di2015UniqueSeparatorentry.Value
11702280Di2015UniqueSeparatorKeyValuePair<,>
11702280Di2015UniqueSeparatorstring
11702280Di2015UniqueSeparatorstring
11702280Di2015UniqueSeparatoritem.SubItems.Add(entry.Key);Di2015NewLineitem.SubItems.Add(entry.Value);Di2015NewLine
11702307Di2015UniqueSeparatorEnvironment.CommandLine
11702351Di2015UniqueSeparatorElement.Name
11702351Di2015UniqueSeparatoryour_file.xml
11702351Di2015UniqueSeparator<root> Di2015NewLine  <list> Di2015NewLine       <FirstName>Abc</FirstName> Di2015NewLine       <LastName>LT</LastName> Di2015NewLine       <Occupation>Eng</Occupation> Di2015NewLine       <BirthDate></BirthDate> Di2015NewLine      ... Di2015NewLine </list> Di2015NewLine</root>Di2015NewLine
11702351Di2015UniqueSeparatorindex_file.xml
11702351Di2015UniqueSeparator<root> Di2015NewLine    <Element Name="FirstName" /> Di2015NewLine    <Element Name="LastName" /> Di2015NewLine    <Element Name="Occupation" /> Di2015NewLine    <Element Name="Java" /> Di2015NewLine    <Element Name="NET" /> Di2015NewLine... Di2015NewLine</root>Di2015NewLine
11702351Di2015UniqueSeparatorPoSH
11702351Di2015UniqueSeparator$xmlIndex = [xml](gc ".\\index_file.xml")Di2015NewLine$xml = [xml](gc ".\\your_file.xml")Di2015NewLine$allValues = @{}; Di2015NewLineDi2015NewLine$xmlIndex.SelectNodes("//Element/@Name") | Di2015NewLine    %{ $nodeName = $_."#text"; $xml.SelectNodes("//$nodeName/text()") } |Di2015NewLine    % { $allvalues[$_.ParentNode.ToString()] = $_.Value };Di2015NewLineDi2015NewLine$allValues | ftDi2015NewLine
11702351Di2015UniqueSeparatorName                           ValueDi2015NewLine----                           -----Di2015NewLineOccupation                     EngDi2015NewLineFirstName                      AbcDi2015NewLineLastName                       LTDi2015NewLine
11702351Di2015UniqueSeparatorName                           ValueDi2015NewLine----                           -----Di2015NewLineNET                            bDi2015NewLineJava                           AbDi2015NewLine
11702354Di2015UniqueSeparatorvar selectedIds = schedule.Instructors.Select(i => i.Id.ToString()).ToList();    Di2015NewLineDi2015NewLinevar instructors = (from instructor in _instructorService.GetAllNonGuestInstructors()Di2015NewLine                   let value = instructor.Id.ToString()Di2015NewLine                   select new SelectListItem()Di2015NewLine                   {Di2015NewLine                       Text = instructor.User.ToFullName(),Di2015NewLine                       Value = value,Di2015NewLine                       Selected = selectedIds.Contains(value)Di2015NewLine                   }).ToList();Di2015NewLine
11702476Di2015UniqueSeparator<img src="img0.jpg">Di2015NewLine<img src="img1.jpg">Di2015NewLine<img src="img2.jpg">Di2015NewLine<img src="img3.jpg">Di2015NewLineDi2015NewLine$(function() {Di2015NewLineDi2015NewLine    var i = 0;Di2015NewLineDi2015NewLine    // Four-second intervalDi2015NewLine    setInterval(function() {Di2015NewLine        $("#img").fadeOut(function() {Di2015NewLine            $(this).attr("src", "img" + i++ % 4 + ".jpg");Di2015NewLine            $(this).fadeIn();Di2015NewLine        });Di2015NewLine    }, 4000);Di2015NewLine}Di2015NewLine
11702500Di2015UniqueSeparatori => (i % 2) == 0Di2015NewLine
11702500Di2015UniqueSeparatorFunc<int,bool>
11702500Di2015UniqueSeparatorPredicate<int>
11702500Di2015UniqueSeparatorAction
11702500Di2015UniqueSeparatorThreadStart
11702500Di2015UniqueSeparatorMethodInvoker
11702500Di2015UniqueSeparatorFunc<int, bool> x = i => (i % 2) == 0;Di2015NewLineExpression<Func<int, bool>> y = i => (i % 2) == 0;Di2015NewLine
11702586Di2015UniqueSeparatorprivate TypeOfICD10 _icd10;Di2015NewLineprivate TypeOfICD10 ICD10Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (_icd10 == null) { // Get from database.Di2015NewLine            _icd10 = Visit.GetSpecificDiagnosis();   Di2015NewLine        }Di2015NewLine        return _icd10;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11702586Di2015UniqueSeparatorprotected void gvGeneralDiagnosis_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string generalDiagnosis = gvGeneralDiagnosis.DataKeys[gvGeneralDiagnosis.SelectedIndex].Values["ICD10Name"].ToString();Di2015NewLine    gvSpecificDiagnosis.DataSource = ICD10Di2015NewLine        .Where(i => i.ICD10Code.Contains(generalDiagnosis))Di2015NewLine        .Select(i => new { i.ICD10Name, i.ICD10Code });Di2015NewLine    gvSpecificDiagnosis.DataBind();Di2015NewLine}Di2015NewLine
11702698Di2015UniqueSeparatordrow[1] = string.IsNullOrWhitespace(imgData)Di2015NewLine           ? (object) imgData : DBNull.Value;Di2015NewLineDi2015NewLinedrow[2] = string.IsNullOrWhitespace(nom.Text)Di2015NewLine           ? (object) nom.Text.ToUpper : DBNull.Value;Di2015NewLine
11702890Di2015UniqueSeparatorpublic class EnumsDi2015NewLine{Di2015NewLine    public enum DeviceTypeDi2015NewLine    {Di2015NewLine        Mouse,Di2015NewLine        HardDisk,Di2015NewLine        CdRom,Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum ServerTransportTypeDi2015NewLine    {Di2015NewLine        Udp,Di2015NewLine        Tcp,Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[Serializable]Di2015NewLinepublic class DeviceDi2015NewLine{Di2015NewLine    public string Username { get; set; }Di2015NewLine    public string AgentName { get; set; }Di2015NewLine    public string Password { get; set; }Di2015NewLine    public string Domain { get; set; }Di2015NewLine    public string PeerURI { get; set; }Di2015NewLine    public string SipURI { get; set; }Di2015NewLine    public string FQDN { get; set; }Di2015NewLine    public Enums.DeviceType Type { get; set; }Di2015NewLine    public Enums.ServerTransportType TransportType { get; set; }Di2015NewLine    public bool IsInitialized { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BinarySerializeDi2015NewLine{Di2015NewLine    public void Test()Di2015NewLine    {Di2015NewLine        var device = new Device();Di2015NewLineDi2015NewLine        device.Username = "userName";Di2015NewLine        device.AgentName = "agentName";Di2015NewLine        device.Password = "password";Di2015NewLine        device.Domain = "domain";Di2015NewLine        device.PeerURI = "peerURI";Di2015NewLine        device.SipURI = "sipURI";Di2015NewLine        device.FQDN = "fqdn";Di2015NewLine        device.Type = Enums.DeviceType.HardDisk;Di2015NewLine        device.TransportType = Enums.ServerTransportType.Tcp;Di2015NewLine        device.IsInitialized = true;Di2015NewLineDi2015NewLine        string fileName = @"C:\\temp\\device.bin";Di2015NewLine        this.Serialize(device, fileName);Di2015NewLineDi2015NewLine        var d = this.Deserialize(fileName);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Serialize(Device device, string fileName)Di2015NewLine    {Di2015NewLine        using (Stream stream = File.Open(fileName, FileMode.Create))Di2015NewLine        {Di2015NewLine            BinaryFormatter bformatter = new BinaryFormatter();Di2015NewLine            bformatter.Serialize(stream, device);Di2015NewLine            stream.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Device Deserialize(string fileName)Di2015NewLine    {Di2015NewLine        var device = new Device();Di2015NewLineDi2015NewLine        using (Stream stream = File.Open(fileName, FileMode.Open))Di2015NewLine        {Di2015NewLine            BinaryFormatter bformatter = new BinaryFormatter();Di2015NewLine            device = (Device)bformatter.Deserialize(stream);Di2015NewLine            stream.Close();Di2015NewLine        }Di2015NewLineDi2015NewLine        return device;Di2015NewLine    }Di2015NewLine
11702983Di2015UniqueSeparatorint beginidx = haystack.IndexOf('{');Di2015NewLinestring needle = haystack.SubString(beginidx,Di2015NewLine                                   haystack.IndexOf('}') - beginidx + 1).Trim();Di2015NewLine
11703154Di2015UniqueSeparator            using(var cnx = DbFactory.CreateConnection(Global.ConnectionString))Di2015NewLine            {Di2015NewLine                using (var multi = cnx.QueryMultiple("mySchema.myStoredProc", new { communityId, categoryId }, commandType: CommandType.StoredProcedure))Di2015NewLine                {Di2015NewLine                    var projectMembers = multi.Read<ProjectMember>().ToList();Di2015NewLine                    var projects = multi.Read<Project>().ToList();Di2015NewLine                    BindProjectMembers(projects, projectMembers);Di2015NewLineDi2015NewLine                    return projects;Di2015NewLine                }Di2015NewLine            }Di2015NewLine
11703173Di2015UniqueSeparatorButton btn = Page.FindControl("Button2");Di2015NewLine
11703173Di2015UniqueSeparatorif (e.Item.ItemType == ListViewItemType.DataItem)Di2015NewLine{Di2015NewLine   ListViewDataItem currentItem = (ListViewDataItem)e.Item;Di2015NewLine   Button btn = (Button)currentItem.FindControl("Button2");Di2015NewLine}Di2015NewLine
11703225Di2015UniqueSeparatorif (str.Length > MaxLength)Di2015NewLine    str = str.SubString(0, MaxLength - 3) + "...";Di2015NewLine
11703335Di2015UniqueSeparatorSuspend()Di2015NewLineResume(), (except in some thread ctors)Di2015NewLineJoin()Di2015NewLineAbort()Di2015NewLineIsAlive()Di2015NewLine
11703341Di2015UniqueSeparatorwhile ((count = (int)Math.Floor(stopwatch.ElapsedMilliseconds/(double)1000)) < finalTime) Di2015NewLine{ Di2015NewLine    currentFrame = getFrame(); Di2015NewLine    ib.Image = currentFrame; Di2015NewLineApplication.DoEvents();               Di2015NewLine    Measurement currentMeasurement = new Measurement(name, currentFrame); Di2015NewLine    measurements.add(currentMeasurement); Di2015NewLine} Di2015NewLine
11703458Di2015UniqueSeparatorif (reader.Read())Di2015NewLine{Di2015NewLine    var loop = true;Di2015NewLine    while (loop)Di2015NewLine    {Di2015NewLine        //1. Here retrive values you need e.g. var myvar = reader.GetBoolean(0);Di2015NewLine        loop = reader.Read();Di2015NewLine        if (!loop)Di2015NewLine        {Di2015NewLine            //You are on the last record. Use values read in 1.Di2015NewLine            //Do some exceptionsDi2015NewLine        }Di2015NewLine        else {Di2015NewLine            //You are not on the last record.Di2015NewLine            //Process values read in 1., e.g. myvarDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11703529Di2015UniqueSeparatorWmiMonitorBrightnessEvent
11703529Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Management;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineDi2015NewLinenamespace GetWMI_InfoDi2015NewLine{Di2015NewLine    public class EventWatcherAsync Di2015NewLine    {Di2015NewLine        private void WmiEventHandler(object sender, EventArrivedEventArgs e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Active :          " + e.NewEvent.Properties["Active"].Value.ToString());Di2015NewLine            Console.WriteLine("Brightness :      " + e.NewEvent.Properties["Brightness"].Value.ToString());Di2015NewLine            Console.WriteLine("InstanceName :    " + e.NewEvent.Properties["InstanceName"].Value.ToString());Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public EventWatcherAsync()Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                string ComputerName = "localhost";Di2015NewLine                string WmiQuery;Di2015NewLine                ManagementEventWatcher Watcher;Di2015NewLine                ManagementScope Scope;   Di2015NewLineDi2015NewLineDi2015NewLine                if (!ComputerName.Equals("localhost", StringComparison.OrdinalIgnoreCase)) Di2015NewLine                {Di2015NewLine                    ConnectionOptions Conn = new ConnectionOptions();Di2015NewLine                    Conn.Username  = "";Di2015NewLine                    Conn.Password  = "";Di2015NewLine                    Conn.Authority = "ntlmdomain:DOMAIN";Di2015NewLine                    Scope = new ManagementScope(String.Format("\\\\\\\\{0}\\\\root\\\\WMI", ComputerName), Conn);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                    Scope = new ManagementScope(String.Format("\\\\\\\\{0}\\\\root\\\\WMI", ComputerName), null);Di2015NewLine                Scope.Connect();Di2015NewLineDi2015NewLine                WmiQuery ="Select * From WmiMonitorBrightnessEvent";Di2015NewLineDi2015NewLine                Watcher = new ManagementEventWatcher(Scope, new EventQuery(WmiQuery));Di2015NewLine                Watcher.EventArrived += new EventArrivedEventHandler(this.WmiEventHandler);Di2015NewLine                Watcher.Start();Di2015NewLine                Console.Read();Di2015NewLine                Watcher.Stop();Di2015NewLine            }Di2015NewLine            catch (Exception e)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Exception {0} Trace {1}", e.Message, e.StackTrace);Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine           Console.WriteLine("Listening {0}", "WmiMonitorBrightnessEvent");Di2015NewLine           Console.WriteLine("Press Enter to exit");Di2015NewLine           EventWatcherAsync eventWatcher = new EventWatcherAsync();Di2015NewLine           Console.Read();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11703529Di2015UniqueSeparatorWMI Delphi Code Creator
11703529Di2015UniqueSeparatorReceiving a WMI Event
11703584Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Timers;Di2015NewLineDi2015NewLinepublic static class TimerExample // In App_Code folderDi2015NewLine{Di2015NewLine    static Timer _timer; // From System.TimersDi2015NewLine    static List<DateTime> _l; // Stores timer resultsDi2015NewLine    public static List<DateTime> DateList // Gets the resultsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (_l == null) // Lazily initialize the timerDi2015NewLine            {Di2015NewLine                Start(); // Start the timerDi2015NewLine            }Di2015NewLine            return _l; // Return the list of datesDi2015NewLine        }Di2015NewLine    }Di2015NewLine    static void Start()Di2015NewLine    {Di2015NewLine        _l = new List<DateTime>(); // Allocate the listDi2015NewLine        _timer = new Timer(3000); // Set up the timer for 3 secondsDi2015NewLine        //Di2015NewLine        // Type "_timer.Elapsed += " and press tab twice.Di2015NewLine        //Di2015NewLine        _timer.Elapsed += new ElapsedEventHandler(_timer_Elapsed);Di2015NewLine        _timer.Enabled = true; // Enable itDi2015NewLine    }Di2015NewLine    static void _timer_Elapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        _l.Add(DateTime.Now); // Add date on each timer eventDi2015NewLine    }Di2015NewLine}Di2015NewLine
11703708Di2015UniqueSeparatorpublic static void write_lines(List<string> thelines, string path)Di2015NewLine{Di2015NewLine    //this.PS_filepath = path;Di2015NewLine    using (StreamWriter writer = new StreamWriter(path, true))Di2015NewLine    {Di2015NewLine      foreach(string line in thelines)Di2015NewLine      {Di2015NewLine          writer.WriteLine(line);Di2015NewLine      }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11703708Di2015UniqueSeparatorusing
11703913Di2015UniqueSeparatorvar input = "009.009.009.900";Di2015NewLinevar result = input.Trim();Di2015NewLine
11703913Di2015UniqueSeparatorString.TrimDi2015NewLineString.TrimEndDi2015NewLineString.TrimStartDi2015NewLineString.RemoveDi2015NewLine
11703995Di2015UniqueSeparatorusing System.Threading;Di2015NewLineDi2015NewLineThread t = new Thread(()=>{Di2015NewLinewhile(true)Di2015NewLine{Di2015NewLine//call your method here...Di2015NewLineThread.Sleep(500); //optional if you want a pause between calls.Di2015NewLine}Di2015NewLine});Di2015NewLinet.IsBackground = true;Di2015NewLinet.Start();Di2015NewLine
11704104Di2015UniqueSeparator    MailMessage objMail = new MailMessage("Sending From", "Sending To","Email Subject", "Email Body");Di2015NewLine    NetworkCredential objNC = new NetworkCredential("Sender Email","Sender Password");Di2015NewLine    SmtpClient objsmtp = new SmtpClient("smtp.live.com", 587); // for hotmailDi2015NewLine    objsmtp.EnableSsl = true;Di2015NewLine    objsmtp.Credentials = objNC;Di2015NewLine    objsmtp.Send(objMail);Di2015NewLine
11704168Di2015UniqueSeparatorpublic JsonResult GetMultipleShowDetailsByFilter(FilterCriterion[] filters, int pageNumber, int itemsPerPage)Di2015NewLine
11704168Di2015UniqueSeparatorPOST
11704168Di2015UniqueSeparatorfilters[0].FilterName = 'aaa'Di2015NewLinefilters[0].FilterValue = 'bbbb'Di2015NewLinefilters[1].FilterName = 'ccc'Di2015NewLinefilters[1].FilterValue = 'ddd'Di2015NewLine...Di2015NewLinefilters[n].FilterName = 'xxx'Di2015NewLinefilters[n].FilterValue = 'yyy'Di2015NewLine
11704168Di2015UniqueSeparatorPOST
11704168Di2015UniqueSeparatorfunction filterChanged() {Di2015NewLine    var activeFilters = $(':checked');Di2015NewLine    var data = {Di2015NewLine        'pageNumber': 1,Di2015NewLine        'itemsPerPage': 10Di2015NewLine    }Di2015NewLine    $.each(activeFilters, function (i, val) {Di2015NewLine        data['filters[' + i + '].FilterName'] = $(val).attr('data-filter-type');Di2015NewLine        data['filters[' + i + '].FilterValue'] = $(val).attr('data-filter-value');Di2015NewLine    });Di2015NewLineDi2015NewLine    $.getJSON('../DatabaseApi/GetMultipleShowDetailsByFilter',Di2015NewLine        data,Di2015NewLine        function(data) {Di2015NewLine            fill(data);Di2015NewLine        });Di2015NewLine}Di2015NewLine
11704191Di2015UniqueSeparatorcmd.ExecuteNoneQuery();Di2015NewLine
11704285Di2015UniqueSeparatorint signal = 0;Di2015NewLineSystem.Timers.Timer t = new System.Timers.Timer(3000);Di2015NewLineprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //----------------------- other parts of code ---------------------Di2015NewLineDi2015NewLine    // at lastDi2015NewLine    t.Elapsed += new System.Timers.ElapsedEventHandler(t_Elapsed);Di2015NewLine    t.Start();Di2015NewLine}Di2015NewLineDi2015NewLinevoid t_Elapsed(object sender, System.Timers.ElapsedEventArgs e)Di2015NewLine{Di2015NewLine    if (signal == 0)Di2015NewLine        return;Di2015NewLineDi2015NewLine    t.Stop();Di2015NewLine    MessageBox.Show("You clicked: " + signal + " before " + t.Interval + " Seconds");Di2015NewLine    signal = 0;Di2015NewLine    t.Start(); //move this to top of msgbox if you want timer to be reset right after poppin the msgbox.Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    signal = 1;Di2015NewLine    t.Stop();Di2015NewLine    t.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    signal = 2;Di2015NewLine    t.Stop();Di2015NewLine    t.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    signal = 3; Di2015NewLine    t.Stop();Di2015NewLine    t.Start();Di2015NewLine}Di2015NewLine
11704372Di2015UniqueSeparatorOfficeIntegration.Excel.Import(Di2015NewLine   this.States, Di2015NewLine    @"C:\\Users\\Mr_Mia_Gie\\My Documents\\ExcelSheet.xls", Di2015NewLine    "Sheet1", Di2015NewLine   "A1:C3"); Di2015NewLine
11704548Di2015UniqueSeparator// start by getting the rootDi2015NewLineprivate void build_file_list(List<Entry> entries)Di2015NewLine{Di2015NewLine    TreeNode root;Di2015NewLine    string[] pathbits;Di2015NewLine    for (int i = 0; i < entries.Count(); i++)Di2015NewLine    {Di2015NewLine        pathbits = entries[i].name.Split(Path.DirectorySeparatorChar);Di2015NewLine        root = get_root(pathbits[0]);Di2015NewLine        add_path(root, pathbits);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// returns existing node or creates a new one as neededDi2015NewLineprivate TreeNode get_root(string key)Di2015NewLine{Di2015NewLine    if (explorer_view.Nodes.ContainsKey(key))Di2015NewLine        return explorer_view.Nodes[key];Di2015NewLine    elseDi2015NewLine        return explorer_view.Nodes.Add(key, key);Di2015NewLine}Di2015NewLineDi2015NewLine// now we have our root so we can start building the restDi2015NewLineprivate void add_path(TreeNode node, string[] pathbits)Di2015NewLine{Di2015NewLine    for (int i = 1; i < pathbits.Count(); i++)Di2015NewLine        node = add_node(node, pathbits[i]);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine// just recursively build nodes until end of file pathDi2015NewLineprivate TreeNode add_node(TreeNode node, string key)Di2015NewLine{Di2015NewLine    if (node.Nodes.ContainsKey(key))Di2015NewLine        return node.Nodes[key];Di2015NewLine    elseDi2015NewLine        return node.Nodes.Add(key, key);Di2015NewLine}Di2015NewLine
11704770Di2015UniqueSeparatorList<T>
11704770Di2015UniqueSeparatorList<List<List<int>>>
11704770Di2015UniqueSeparatorint[][][] data = new data[Int16.MaxValue][Int16.MaxValue][Int16.MaxValue];
11704864Di2015UniqueSeparatorTags
11704864Di2015UniqueSeparatorTag
11704873Di2015UniqueSeparator$OS = Get-WmiObject Win32_OperatingSystemDi2015NewLine$NIC = Get-WmiObject Win32_NetworkAdapterConfiguration | where{$_.IPEnabled -eq â€œTRUEâ€?}Di2015NewLine$PC = Get-WmiObject -class Win32_ComputerSystem Di2015NewLineDi2015NewLineif($NIC.MacAddress -eq $null)Di2015NewLine    {Di2015NewLine    Write-Host "No Network Connection! The PC will not be renamed until the network is enabled"Di2015NewLine    }Di2015NewLineelseDi2015NewLine    {Di2015NewLine    $MacAddress = $NIC.MacAddressDi2015NewLine    $NewPCName = "PC-" + $MacAddress.Substring(0) -replace ':'Di2015NewLineDi2015NewLine    $PC.Rename($NewPCName) Di2015NewLineDi2015NewLine    Write-Host -ForegroundColor Green "New PC Name"Di2015NewLine    $NewPCNameDi2015NewLine    }Di2015NewLine    write-Host "The PC has been renamed and will restart in 5 seconds."Di2015NewLine    start-sleep -s 5Di2015NewLine    restart-computerDi2015NewLine
11704899Di2015UniqueSeparatorpublic static void PlayMp3FromUrl(string url)Di2015NewLine{Di2015NewLine    using (Stream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        using (Stream stream = WebRequest.Create(url)Di2015NewLine            .GetResponse().GetResponseStream())Di2015NewLine        {Di2015NewLine            byte[] buffer = new byte[32768];Di2015NewLine            int read;Di2015NewLine            while ((read = stream.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine            {Di2015NewLine                ms.Write(buffer, 0, read);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        ms.Position = 0;Di2015NewLine        using (WaveStream blockAlignedStream =Di2015NewLine            new BlockAlignReductionStream(Di2015NewLine                WaveFormatConversionStream.CreatePcmStream(Di2015NewLine                    new Mp3FileReader(ms))))Di2015NewLine        {Di2015NewLine            using (WaveOut waveOut = new WaveOut(WaveCallbackInfo.FunctionCallback()))Di2015NewLine            {Di2015NewLine                waveOut.Init(blockAlignedStream);Di2015NewLine                waveOut.Play();                        Di2015NewLine                while (waveOut.PlaybackState == PlaybackState.Playing )                        Di2015NewLine                {Di2015NewLine                    System.Threading.Thread.Sleep(100);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}`Di2015NewLine
11704985Di2015UniqueSeparatorpublic bool CompareNameValueCollections(NameValueCollection nvc1,Di2015NewLine                                        NameValueCollection nvc2)Di2015NewLine{Di2015NewLine    return nvc1.AllKeys.OrderBy(key => key)Di2015NewLine                       .SequenceEqual(nvc2.AllKeys.OrderBy(key => key))Di2015NewLine        && nvc1.AllKeys.All(key => nvc1[key] == nvc2[key]);Di2015NewLine}Di2015NewLine
11704985Di2015UniqueSeparator        && nvc1.AllKeysDi2015NewLine               .All(key => nvc1.GetValues(key)Di2015NewLine                               .OrderBy(val => val)Di2015NewLine                               .SequenceEqual(nvc2.GetValues(key)Di2015NewLine                                                  .OrderBy(val => val)));Di2015NewLine
11705004Di2015UniqueSeparatorpublic class InventoryDi2015NewLine{Di2015NewLineprivate Inventory instance;Di2015NewLineDi2015NewLineprivate Inventory() {}Di2015NewLinepublic Inventory Instance { get {Di2015NewLineif(instance == null) instance = new Inventory();Di2015NewLinereturn instance;Di2015NewLine} Di2015NewLine}Di2015NewLineDi2015NewLine//other code goes hereDi2015NewLine
11705004Di2015UniqueSeparatorInventory.Instance.someMethod()
11705059Di2015UniqueSeparatorElysium.Theme.dll
11705059Di2015UniqueSeparatorMicrosoft.Expression.Interactions.dll
11705059Di2015UniqueSeparatorMicrosoft.Windows.Shell.dll
11705059Di2015UniqueSeparatorSystem.Windows.Interactivity.dll
11705059Di2015UniqueSeparatorxmlns:metro="http://schemas.codeplex.com/elysium/theme"
11705059Di2015UniqueSeparator<Window ..>...</Window>
11705059Di2015UniqueSeparator<metro:Window ..>...</metro:Window>
11705174Di2015UniqueSeparatorusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLinepublic static List<string> ParseUrls(string input) {Di2015NewLine    List<string> urls = new List<string>();Di2015NewLine    const string pattern = "http://"; //here you may use a better expression to include ftp and so onDi2015NewLine    string[] m = Regex.Split(input, pattern);Di2015NewLine    for (int i = 0; i < m.Length; i++)Di2015NewLine        if (i % 2 == 0){Di2015NewLine            Match urlMatch = Regex.Match(m[i],"^(?<url>[a-zA-Z0-9/?=&.]+)", RegexOptions.Singleline);Di2015NewLine            if(urlMatch.Success)Di2015NewLine                urls.Add(string.Format("http://{0}", urlMatch.Groups["url"].Value)); //modify the prefix according to the chosen pattern                            Di2015NewLine        }Di2015NewLine    return urls;Di2015NewLine}Di2015NewLine
11705176Di2015UniqueSeparatorclass CombinedLists<T> : IEnumerable<T> // Add more interfaces here.Di2015NewLine                                        // Maybe IList<T>, but how should it work?Di2015NewLine{Di2015NewLine    private List<List<T>> lists = new List<List<T>>();Di2015NewLineDi2015NewLine    public void AddList(List<T> list)Di2015NewLine    {Di2015NewLine        lists.Add(list);Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<T> GetEnumerator()Di2015NewLine    {Di2015NewLine        return lists.SelectMany(x => x).GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Remove(T t)Di2015NewLine    {Di2015NewLine        foreach (List<T> list in lists)Di2015NewLine        {Di2015NewLine            if (list.Remove(t)) { return true; }Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Implement the other methods.Di2015NewLine}Di2015NewLine
11705176Di2015UniqueSeparatorList<string> list1 = new List<string> { "a", "b", "c" };Di2015NewLineList<string> list2 = new List<string> { "1", "2", "3" };Di2015NewLineCombinedLists<string> c = new CombinedLists<string>();Di2015NewLinec.AddList(list1);Di2015NewLinec.AddList(list2);Di2015NewLineDi2015NewLinec.Remove("a");Di2015NewLinec.Remove("1");Di2015NewLineDi2015NewLineforeach (var x in c) { Console.WriteLine(x); }Di2015NewLineConsole.WriteLine(list1.Count);Di2015NewLineConsole.WriteLine(list2.Count);Di2015NewLine
11705201Di2015UniqueSeparatorString.Substring(startindex)
11705201Di2015UniqueSeparatorpublic string Substring(int startIndex)Di2015NewLine{Di2015NewLine    return this.Substring(startIndex, this.Length - startIndex);Di2015NewLine}Di2015NewLine
11705201Di2015UniqueSeparatorString.Substring(startIndex, length)
11705201Di2015UniqueSeparatorif (length == 0)Di2015NewLine{Di2015NewLine    return Empty;Di2015NewLine}Di2015NewLine
11705401Di2015UniqueSeparatorfor
11705401Di2015UniqueSeparatorImage oImage = new Image();Di2015NewLineWindow.myGrid.Children.Add(oImage);Di2015NewLineDi2015NewLinevar row = i;Di2015NewLinevar col = j;Di2015NewLineoImage.MouseUp += (sender, args) => func(row, col);Di2015NewLine
11705401Di2015UniqueSeparatorMouseUp
11705401Di2015UniqueSeparatorImage
11705401Di2015UniqueSeparatorrow
11705401Di2015UniqueSeparatorcol
11705401Di2015UniqueSeparatorfunc(i,j)
11705401Di2015UniqueSeparatori
11705401Di2015UniqueSeparatorj
11705401Di2015UniqueSeparatorfunc(3,3)
11705516Di2015UniqueSeparatorDataGridTemplateColumn
11705516Di2015UniqueSeparator            <DataGridTemplateColumn Header="Column 1"  Width="150">Di2015NewLine                <DataGridTemplateColumn.CellTemplate  >Di2015NewLine                    <DataTemplate>Di2015NewLine                        <TextBlock Text="{Binding Text}" Foreground="{Binding Color}"  />Di2015NewLine                    </DataTemplate>Di2015NewLine                </DataGridTemplateColumn.CellTemplate>Di2015NewLine            </DataGridTemplateColumn>Di2015NewLine
11705537Di2015UniqueSeparatorString.CompareTo
11705537Di2015UniqueSeparatorint IComparable.CompareTo(Object o) {Di2015NewLine    Friend temp = (Friend)o;Di2015NewLineDi2015NewLine    return this.Name.CompareTo(temp.Name);Di2015NewLine}Di2015NewLine
11705653Di2015UniqueSeparator( )
11705653Di2015UniqueSeparator.+?
11705653Di2015UniqueSeparator\\<ptext\\>\\b(.+?)\\b\\</ptext\\>Di2015NewLine
11705653Di2015UniqueSeparator(like|this)
11705653Di2015UniqueSeparator.+?
11705653Di2015UniqueSeparator\\b
11705653Di2015UniqueSeparator\\<ptext\\>(.+?)\\</ptext\\>
11705653Di2015UniqueSeparatorArray[0] = "This is a sentence"Di2015NewLineArray[1] = "Here's another one."Di2015NewLine
11705654Di2015UniqueSeparator    string[] fruits = { "grape", "passionfruit", "banana", "mango", Di2015NewLine                          "orange", "raspberry", "apple", "blueberry" };Di2015NewLineDi2015NewLine    // Sort the strings first by their length and then Di2015NewLine    //alphabetically by passing the identity selector function.Di2015NewLine    IEnumerable<string> query =Di2015NewLine        fruits.OrderBy(fruit => fruit.Length).ThenBy(fruit => fruit);Di2015NewLine
11705654Di2015UniqueSeparator    ' Create an array of strings.Di2015NewLine    Dim fruits() As String = _Di2015NewLine        {"grape", "passionfruit", "banana", "mango", _Di2015NewLine         "orange", "raspberry", "apple", "blueberry"}Di2015NewLineDi2015NewLine    ' Sort the strings first by their length and then Di2015NewLine    ' alphabetically by passing the identity function.Di2015NewLine    Dim query As IEnumerable(Of String) = _Di2015NewLine        fruits _Di2015NewLine        .OrderBy(Function(fruit) fruit.Length) _Di2015NewLine        .ThenBy(Function(fruit) fruit)Di2015NewLine
11705798Di2015UniqueSeparatorPictureBox
11705798Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    Bitmap nullBitmap = new Bitmap(1, 1); // create a 1 pixel bitmapDi2015NewLine    Bitmap myImage = new Bitmap("Load your Image Here"); // Load your imageDi2015NewLine    bool showImage;  // boolean variable so we know what image is assignedDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        pictureBox1.Image = myImage;Di2015NewLine        showImage = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (showImage)Di2015NewLine        {Di2015NewLine            pictureBox1.Image = nullBitmap;Di2015NewLine            showImage = false; Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            pictureBox1.Image = myImage;Di2015NewLine            showImage = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11705798Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    bool showLines;Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        showLines = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (showLines)Di2015NewLine        {Di2015NewLine            showLines = false;Di2015NewLine            pictureBox1.Invalidate();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            showLines = true;Di2015NewLine            pictureBox1.Invalidate();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void pictureBox1_Paint(object sender, PaintEventArgs e)Di2015NewLine    {Di2015NewLine        if(showLines)Di2015NewLine            e.Graphics.DrawLine(Pens.Purple, 0, 0, 100, 100);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11705918Di2015UniqueSeparatorSystem.Byte[]
11705918Di2015UniqueSeparatordata
11705918Di2015UniqueSeparatordata
11705918Di2015UniqueSeparator        WebClient client = new WebClient();Di2015NewLine        byte[] file = client.DownloadData("example.com");Di2015NewLineDi2015NewLine        File.WriteAllBytes(@"example.txt", file);Di2015NewLineDi2015NewLine        string[] lines = File.ReadAllLines("example.txt");Di2015NewLineDi2015NewLine        richTextBox1.Text = lines;Di2015NewLine
11705918Di2015UniqueSeparatorWebClient.DownloadString
11705918Di2015UniqueSeparatorWebClient client = new WebClient();Di2015NewLinevar data = client.DownloadString("example.com");Di2015NewLinerichTextBox1.Text = data.ToString();Di2015NewLine
11705918Di2015UniqueSeparatorrichTextBox1.Text = client.DownloadString("example.com");Di2015NewLine
11706132Di2015UniqueSeparator    public CollegeCourse(String a, int b, double c)Di2015NewLine    {Di2015NewLine        dep = a;Di2015NewLine        kors = b;Di2015NewLine        cre = c;Di2015NewLineDi2015NewLine    }Di2015NewLine
11706132Di2015UniqueSeparator    public LabCourse(String a, int b, double c)Di2015NewLine        : base(a, b, c)Di2015NewLine    {Di2015NewLine    }Di2015NewLine
11706325Di2015UniqueSeparatorEnemy tmp = enemyGrid[a, b]Di2015NewLine
11706325Di2015UniqueSeparatortmp.canShoot = true;Di2015NewLine
11706325Di2015UniqueSeparatortmpEnemy.canShoot = false;Di2015NewLine
11706340Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true"  CodeFile="Default.aspx.cs" Inherits="_Default" %>Di2015NewLineDi2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLineDi2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head id="Head1" runat="server">Di2015NewLine<title>AutoComplete Box with jQuery</title>Di2015NewLine<link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css"/>Di2015NewLine<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>Di2015NewLine<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/jquery-ui.min.js"></script>  Di2015NewLine<script type="text/javascript">Di2015NewLine    $(document).ready(function() {Di2015NewLine        SearchText();Di2015NewLine    });Di2015NewLine    function SearchText() {Di2015NewLine        $("#txtSearch").autocomplete({Di2015NewLine            source: function(request, response) {Di2015NewLine                $.ajax({Di2015NewLine                    type: "POST",Di2015NewLine                    contentType: "application/json; charset=utf-8",Di2015NewLine                    url: "Default.aspx/GetAutoCompleteData",Di2015NewLine                    data: "{'username':'" + document.getElementById('txtSearch').value + "'}",Di2015NewLine                    dataType: "json",Di2015NewLine                    success: function(data) {Di2015NewLine                        response(data.d);Di2015NewLine                    },Di2015NewLine                    error: function(result) {Di2015NewLine                        alert("Error");Di2015NewLine                    }Di2015NewLine                });Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine</script>Di2015NewLine   </head>Di2015NewLine   <body>Di2015NewLine   <form id="form1" runat="server">Di2015NewLine   <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>Di2015NewLine    <asp:UpdatePanel>Di2015NewLine        <ContentTemplate>Di2015NewLine            <div class="demo">Di2015NewLine        <div class="ui-widget">Di2015NewLine            <label for="tbAuto">Enter UserName: </label>Di2015NewLine            <asp:TextBox ID="txtSearch" runat="server" AutoCompleteType="Search"> </asp:TextBox>Di2015NewLine        </div>Di2015NewLine</div>Di2015NewLine        </ContentTemplate>Di2015NewLine    </asp:UpdatePanel>Di2015NewLineDi2015NewLine</form>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
11706340Di2015UniqueSeparatorpublic partial class _Default : Page Di2015NewLine{Di2015NewLine  protected void Page_Load(object sender, EventArgs e)Di2015NewLine   {Di2015NewLineDi2015NewLine   }Di2015NewLine[WebMethod]Di2015NewLineDi2015NewLinepublic static List<string> GetAutoCompleteData(string username)Di2015NewLine{Di2015NewLine List<string> result = new List<string>();Di2015NewLineDi2015NewLine using (SqlConnection con = new SqlConnection("Data Source=devserver;Initial     Catalog=Catalog;Persist Security Info=True;User ID=userName;Password=Password"))Di2015NewLine{Di2015NewLine using (SqlCommand cmd = new SqlCommand("select (strEmployeeName + ',' + strEmployeeCode) as username from tblEmployee where strEmployeeName LIKE '%'+@SearchText+'%' ", con))Di2015NewLine{Di2015NewLine con.Open();Di2015NewLine cmd.Parameters.AddWithValue("@SearchText", username);Di2015NewLine SqlDataReader dr = cmd.ExecuteReader();Di2015NewLine while (dr.Read())Di2015NewLine{Di2015NewLine result.Add(dr["username"].ToString());Di2015NewLine}Di2015NewLine return result;Di2015NewLine}Di2015NewLine}Di2015NewLine}  Di2015NewLine}Di2015NewLine
11706340Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static List<string> GetAutoCompleteData(string strSearchKey)Di2015NewLine{Di2015NewLine    AutoSearch_BLL objAutoSearch_BLL = new AutoSearch_BLL();Di2015NewLine    List<string> result = new List<string>();Di2015NewLine    result = objAutoSearch_BLL.AutoSearchEmployeesData(strSearchKey);Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
11706439Di2015UniqueSeparatorpublic class Range : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    // Declare the eventDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private string _range_name;Di2015NewLine    private string _range_description;Di2015NewLine    private int _min;Di2015NewLine    private int _max;Di2015NewLineDi2015NewLine    public string range_nameDi2015NewLine    {Di2015NewLine        get { return this._range_name; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _range_name = value;Di2015NewLine            OnPropertyChanged("range_name");  Di2015NewLine        }  // Call OnPropertyChanged whenever the property is updatedDi2015NewLine    }Di2015NewLine    public string range_descriptionDi2015NewLine    {Di2015NewLine        get { return this._range_description; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _range_description = value;Di2015NewLine            OnPropertyChanged("range_description");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public int minDi2015NewLine    {Di2015NewLine        get { return this._min; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _min=value;Di2015NewLine            OnPropertyChanged("min");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public int maxDi2015NewLine    {Di2015NewLine        get { return this._max; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _max = value;Di2015NewLine            OnPropertyChanged("max");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Create the OnPropertyChanged method to raise the eventDi2015NewLine    protected void OnPropertyChanged(string name)Di2015NewLine    {Di2015NewLine        PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLine        if (handler != null)Di2015NewLine        {Di2015NewLine            handler(this, new PropertyChangedEventArgs(name));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11706469Di2015UniqueSeparatorDataList.ItemDataBound
11706469Di2015UniqueSeparatorDataList
11706469Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!this.IsPostBack)Di2015NewLine    {Di2015NewLine        this.dl.DataSource = GetDataSource();Di2015NewLine        this.dl.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11706469Di2015UniqueSeparatorItemDataBound
11706469Di2015UniqueSeparatorprotected void dl_ItemDataBound(object sender, DataListItemEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)Di2015NewLine    {Di2015NewLine        var myDropDownList = e.Item.FindControl("YourDropDownListID") as DropDownList;Di2015NewLine        int currentItemID = int.Parse(this.dl.DataKeys[e.Item.ItemIndex].ToString());Di2015NewLineDi2015NewLine        myDropDownList.DataSource = GetDDLDataSource(currentItemID);Di2015NewLine        myDropDownList.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11706469Di2015UniqueSeparatorDataList
11706469Di2015UniqueSeparator    <asp:DataList ID="dl" runat="server" Di2015NewLine        onitemdatabound="dl_ItemDataBound"Di2015NewLine        DataKeyField="Your_Row_ID"Di2015NewLine    >Di2015NewLine
11706570Di2015UniqueSeparatore.Graphics.MeasureString()
11706570Di2015UniqueSeparatore.Graphics.MeasureString(richTextBox1.SelectedText, richTextBox1.SelectionFont, new PointF(xPosition, yPosition), StringFormat.GenericTypographic).Width;Di2015NewLine
11706570Di2015UniqueSeparatore.Graphics.MeasureString(string, Font)
11706691Di2015UniqueSeparatorTemplate.FindName
11706691Di2015UniqueSeparatorStyle
11706691Di2015UniqueSeparatorSetter
11706691Di2015UniqueSeparatorLabel
11706691Di2015UniqueSeparatorForeground
11706691Di2015UniqueSeparator<Label.Style>Di2015NewLine    <Style TargetType="Label">Di2015NewLine        <Setter Property="Foreground" Value="{TemplateBinding Foreground}"/>Di2015NewLine    </Style>Di2015NewLine</Label.Style>Di2015NewLine
11706691Di2015UniqueSeparatorForeground
11706691Di2015UniqueSeparatorButton
11706691Di2015UniqueSeparatorTrigger
11706691Di2015UniqueSeparatorSetter
11706719Di2015UniqueSeparatorlistViewResultados.SelectedItem
11706875Di2015UniqueSeparatorvar choices = new Dictionary<ChoiceType, Func<ChoiceResult> > (); Di2015NewLine...Di2015NewLineDi2015NewLinepublic ChoiceResult HereWasSwitch(ChoiceType myChoice)Di2015NewLine{Di2015NewLine  return choices[myChoice]();Di2015NewLine}Di2015NewLine
11706953Di2015UniqueSeparatorpublic class ItemDi2015NewLine{Di2015NewLine    public string _name;Di2015NewLine    public double _weight;Di2015NewLine    public decimal _wholesalePrice;Di2015NewLine    public int _quantity;Di2015NewLineDi2015NewLine    public Item(string name, double weight, decimal wholesalePrice, int quantity)Di2015NewLine    {Di2015NewLine        _name = name;Di2015NewLine        _weight = weight;Di2015NewLine        _wholesalePrice = wholesalePrice;Di2015NewLine        _quantity = quantity;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator ==(Item left, Item right)Di2015NewLine    {Di2015NewLine        if (left._name == right._name)Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool operator !=(Item left, Item right)Di2015NewLine    {Di2015NewLine        return !(left == right);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11707191Di2015UniqueSeparator    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label1.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label2.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button3_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label3.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLine    private void button4_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label4.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLine    private void button5_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label5.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLine    private void button6_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        label6.Text = Card_Deck.ReceiveCards();Di2015NewLine    }Di2015NewLine    class Card_DeckDi2015NewLine    {Di2015NewLine        public static Random r = new Random();Di2015NewLine        private static List<string> cards = new List<string>() { "â™£ King 1",Di2015NewLine            "â™¦ King 2", Di2015NewLine            "â™¥ King 3",Di2015NewLine            "â™  King 4", Di2015NewLine            "â™£ Jack 5", Di2015NewLine            "â™¦ Jack 6" };Di2015NewLineDi2015NewLine        public static string ReceiveCards()Di2015NewLine        {Di2015NewLine            if (cards.Count > 0)Di2015NewLine            {Di2015NewLine                int index = r.Next(cards.Count);Di2015NewLine                var card = cards[index];Di2015NewLine                cards.RemoveAt(index);Di2015NewLine                return card;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return "";Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine    } Di2015NewLineDi2015NewLine}Di2015NewLine
11707192Di2015UniqueSeparatorEmpID
11707192Di2015UniqueSeparatorcontact
11707192Di2015UniqueSeparatorEmpID
11707192Di2015UniqueSeparatorEmp
11707340Di2015UniqueSeparatorpublic static double Next() Di2015NewLine{ Di2015NewLine    return rd.NextDouble(); Di2015NewLine} Di2015NewLineDi2015NewLinepublic static double Next(double min, double max) Di2015NewLine{ Di2015NewLine    return (rd.NextDouble() * (max - min)) + min; Di2015NewLine} Di2015NewLineDi2015NewLinepublic static double Next(RangeOnStep r) Di2015NewLine{ Di2015NewLine    int range = (int)Math.Floor((r.max - r.min) / r.step); Di2015NewLine    int stepCount = rd.Next(0, range); Di2015NewLine    return r.min + (step * stepCount); Di2015NewLine} Di2015NewLineDi2015NewLinepublic static double Next(RangeOnDecimalPlace r)) Di2015NewLine{ Di2015NewLine    double step = Math.Pow(10, r.decimals); Di2015NewLine    return Math.Truncate(((rd.NextDouble() * (r.max - r.min)) + r.min) * step) / step; Di2015NewLine} Di2015NewLine
11707350Di2015UniqueSeparatori = 1 and c= 100Di2015NewLineresult is 0.01  -> rounded to 0Di2015NewLine0 * 100 = 0Di2015NewLine
11707350Di2015UniqueSeparatorlong f = ((i++ / (double) c) * 100);Di2015NewLine
11707386Di2015UniqueSeparatorDictionary
11707386Di2015UniqueSeparatorDictionary<string, string>
11707386Di2015UniqueSeparatorHashtable
11707386Di2015UniqueSeparatorHashtable
11707386Di2015UniqueSeparatorDictionary
11707386Di2015UniqueSeparatorBoxing
11707386Di2015UniqueSeparatorUnboxing
11707404Di2015UniqueSeparatordynamic
11707404Di2015UniqueSeparator+
11707404Di2015UniqueSeparatorstring
11707404Di2015UniqueSeparatorint
11707404Di2015UniqueSeparatordynamic
11707404Di2015UniqueSeparatordynamic
11707482Di2015UniqueSeparatorList<string> result = GetListFromString<string>("abc, 123, hij");Di2015NewLine
11707482Di2015UniqueSeparatorList<int> resultInt = GetListFromString<int>("23, 123, 2");Di2015NewLine
11707482Di2015UniqueSeparatorint three = (int)"3";Di2015NewLine
11707482Di2015UniqueSeparatorpublic List<T> GetListFromString<T>(string commaSplited)Di2015NewLine    {Di2015NewLine        return (from e in commaSplited.Split(',') Di2015NewLine                select (T)Convert.ChangeType(e, typeof(T))).ToList();Di2015NewLine    }Di2015NewLine
11707482Di2015UniqueSeparatorList<int> resultIntFail = GetListFromString<int>("23, abc, 2");Di2015NewLine
11707546Di2015UniqueSeparatorvar foo = await GetFooAsync();Di2015NewLine
11707644Di2015UniqueSeparatorstruct
11707644Di2015UniqueSeparatorclass
11707644Di2015UniqueSeparatorfoo?
11707644Di2015UniqueSeparatorfoo
11707748Di2015UniqueSeparatorSELECT        COUNT(*) AS Expr1, name, MONTH(appointment_date) AS appointment_monthDi2015NewLineFROM            ReportingTableDi2015NewLineGROUP BY name, appointment_monthDi2015NewLine
11707754Di2015UniqueSeparatorMyData
11707754Di2015UniqueSeparator//C#Di2015NewLinelabel1.DataContext = new MyData{ DogName = "Lulu" };Di2015NewLineDi2015NewLine//xamlDi2015NewLine<Label Content="{Binding Path=DogName}"/>Di2015NewLine
11707754Di2015UniqueSeparator//C#Di2015NewLineclass MyDataDi2015NewLine{Di2015NewLine  public strig DogName{ get; set; }Di2015NewLine  public strig CatName{ get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinethis.DataContext = new MyData{ DogName = "Lulu", CatName = "Fifi" };Di2015NewLineDi2015NewLine//xamlDi2015NewLine<Label Content="{Binding Path=DogName}"/>Di2015NewLine<Label Content="{Binding Path=CatName}"/>Di2015NewLine
11708136Di2015UniqueSeparatorApplication.Run(testForm);
11708136Di2015UniqueSeparatordrawNewLine()
11708136Di2015UniqueSeparatorInvalidate()
11708136Di2015UniqueSeparatorGraphics
11708136Di2015UniqueSeparatorPen
11708157Di2015UniqueSeparatorString uriStr = @"http://api.webepartners.pl/wydawca/Authorize?login="Di2015NewLine    + HttpUtility.UrlEncode(userName) + "&password=" + HttpUtility.UrlEncode(passsword);Di2015NewLineUri address = new Uri(uriStr);Di2015NewLineHttpWebRequest request = WebRequest.Create(address) as HttpWebRequest;Di2015NewLineDi2015NewLine// Get response Di2015NewLineusing (HttpWebResponse response = request.GetResponse() as HttpWebResponse) // errorDi2015NewLine{Di2015NewLine    // Get the response stream  Di2015NewLine    StreamReader reader = new StreamReader(response.GetResponseStream());Di2015NewLine}Di2015NewLine
11708157Di2015UniqueSeparatorGET http://api.webepartners.pl/wydawca/Authorize?from=2012-07-29%2013:47:05 HTTP/1.1Di2015NewLineContent-Type: text/xml; encoding='utf-8'Di2015NewLineHost: api.webepartners.plDi2015NewLineCookie: .ASPXAUTH=7521F26EBCE8CE487C6860C5E98248B540E5591BD6AE7EC936ECE29B0912AC49C71837B98D7972ABA9C868F18A0C6FCD1EB38B22BE86DBCCCDF8D56D0440170FECF497FF00A1B5D7B268EF6DF27B2B9DB806291E517654A136EC5617A67182DB3E3ECF0D8ADA6F3927C2F955A92E20B7BF7AE6D7DAE2AED0B0D9A7BD406C2CF4Di2015NewLineDi2015NewLineDi2015NewLineHTTP/1.1 403 ForbiddenDi2015NewLineCache-Control: no-cacheDi2015NewLinePragma: no-cacheDi2015NewLineContent-Type: text/htmlDi2015NewLineExpires: -1Di2015NewLineServer: Microsoft-IIS/7.5Di2015NewLineX-AspNet-Version: 4.0.30319Di2015NewLineX-Powered-By: ASP.NETDi2015NewLineDate: Sun, 29 Jul 2012 11:47:03 GMTDi2015NewLineContent-Length: 1233Di2015NewLineDi2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">Di2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head>Di2015NewLine<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>Di2015NewLine<title>403 - Forbidden: Access is denied.</title>Di2015NewLine<style type="text/css">Di2015NewLine<!--Di2015NewLinebody{margin:0;font-size:.7em;font-family:Verdana, Arial, Helvetica, sans-serif;background:#EEEEEE;}Di2015NewLinefieldset{padding:0 15px 10px 15px;} Di2015NewLineh1{font-size:2.4em;margin:0;color:#FFF;}Di2015NewLineh2{font-size:1.7em;margin:0;color:#CC0000;} Di2015NewLineh3{font-size:1.2em;margin:10px 0 0 0;color:#000000;} Di2015NewLine#header{width:96%;margin:0 0 0 0;padding:6px 2% 6px 2%;font-family:"trebuchet MS", Verdana, sans-serif;color:#FFF;Di2015NewLinebackground-color:#555555;}Di2015NewLine#content{margin:0 0 0 2%;position:relative;}Di2015NewLine.content-container{background:#FFF;width:96%;margin-top:8px;padding:10px;position:relative;}Di2015NewLine-->Di2015NewLine</style>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine<div id="header"><h1>Server Error</h1></div>Di2015NewLine<div id="content">Di2015NewLine <div class="content-container"><fieldset>Di2015NewLine  <h2>403 - Forbidden: Access is denied.</h2>Di2015NewLine  <h3>You do not have permission to view this directory or page using the credentials that you supplied.</h3>Di2015NewLine </fieldset></div>Di2015NewLine</div>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
11708343Di2015UniqueSeparatorint orig_width = 1600;Di2015NewLineint orig_height = 1200;Di2015NewLineint design_width = 800;Di2015NewLineint design_height = design_width * orig_height / orig_width; // keeps aspect ratio, or just use 600Di2015NewLineDi2015NewLineint coord_x1 = design_width * 752 / orig_width;Di2015NewLineint coord_y1 = design_height * 394 / orig_height;Di2015NewLineint coord_x2 = design_width * 1394 / orig_width;Di2015NewLineint coord_y2 = design_height * 491 / orig_height;Di2015NewLineDi2015NewLine...Di2015NewLinestring body = @"Good day, <br /><br />   Di2015NewLine    <b> Please participate in the new short safety quiz </b>"   Di2015NewLine    + link +   Di2015NewLine    @"<br /><br /> <h1>Picture</h1><br/><img width='"Di2015NewLine    + design_width +Di2015NewLine    "' height='"Di2015NewLine    + design_height +Di2015NewLine    @"' src='cid:image1' usemap ='#clickMap' alt='Click HERE'>";   Di2015NewLineDi2015NewLine// ...Di2015NewLineDi2015NewLinebody += "<map id ='clickMap' name='clickMap'> " +   Di2015NewLine      "<area shape ='rect' coords ='"Di2015NewLine      + coord_x1 + "," + coord_y1 + "," + coord_x2 + "," + coord_y2 +Di2015NewLine      "' href ='http://localhost/StartQuiz.aspx?testid="Di2015NewLine      + quizid + "' alt='Quiz' /></map>";   Di2015NewLine
11708474Di2015UniqueSeparatorpublic abstract class MyShapeDi2015NewLine{Di2015NewLine   public abstract void Draw(PaintEventArgs args);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyRectangle : MyShapeDi2015NewLine{Di2015NewLine    public int Height { get; set; }Di2015NewLine    public int Width { get;set; }Di2015NewLine    public int X { get; set; }Di2015NewLine    public int Y { get; set; }Di2015NewLineDi2015NewLine    public override void Draw(Graphics graphics)Di2015NewLine    {Di2015NewLine        graphics.FillRectangle(Di2015NewLine            new SolidBrush(Color.Black),Di2015NewLine            new Rectangle(X, Y, Width, Height));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyCircle : MyShapeDi2015NewLine{Di2015NewLine    public int Radius { get; set; }Di2015NewLine    public int X { get; set; }Di2015NewLine    public int Y { get; set; }Di2015NewLineDi2015NewLine    public override void Draw(Graphics graphics)Di2015NewLine    {Di2015NewLine        /* drawing code here */Di2015NewLine    }        Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine{Di2015NewLine    List<MyShape> toDraw = new List<MyShape> Di2015NewLine    {Di2015NewLine        new MyRectangleDi2015NewLine        {Di2015NewLine            Height = 10,Di2015NewLine            Width: 20,Di2015NewLine            X = 0,Di2015NewLine            Y = 0Di2015NewLine        },Di2015NewLine        new MyCircleDi2015NewLine        {Di2015NewLine           Radius = 5,Di2015NewLine           X = 5,Di2015NewLine           Y = 5Di2015NewLine        }Di2015NewLine    };Di2015NewLineDi2015NewLine    toDraw.ForEach(s => s.Draw(e.Graphics));Di2015NewLine}Di2015NewLine
11708474Di2015UniqueSeparatorpublic static class ShapeExtensionsDi2015NewLine{Di2015NewLine    public static void Draw(this Rectangle r, Graphics graphics)Di2015NewLine    {Di2015NewLine        graphics.FillRectangle(new SolidBrush(Color.Black), r);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11708562Di2015UniqueSeparatoradd
11708562Di2015UniqueSeparatorremove
11708562Di2015UniqueSeparatoradd
11708562Di2015UniqueSeparatorremove
11708562Di2015UniqueSeparatorclass B Di2015NewLine{  Di2015NewLine    public event MyDelegate MyEvent;Di2015NewLineDi2015NewLine    protected OnMyEvent(int p_Arg)Di2015NewLine    {Di2015NewLine        // Delegates are immutable and add/remove defaultDi2015NewLine        // implementations always generate a new instance of the Di2015NewLine        // delegate. Therefore, tTmp (if not null) can be safely invokedDi2015NewLine        var tTmp = Di2015NewLine            System.Threading.InterlockedDi2015NewLine            .CompareExchange(ref MyEvent, null, null);Di2015NewLine        if (tTmp != null) {Di2015NewLine            tTmp(p_Arg);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    //Assume this runs in a new thread and calls back data using MyEvent Di2015NewLine    //Have ommited thread code for simplicity Di2015NewLine    public void Run() Di2015NewLine    { Di2015NewLine        for (int i = 0; i < 100; i++) Di2015NewLine        { Di2015NewLine            OnMyEvent(i);Di2015NewLine        }    Di2015NewLine    } Di2015NewLine} Di2015NewLine
11708581Di2015UniqueSeparator            <asp:WebPartZone Height="100px" Width="75%" runat="server" Di2015NewLine                ID="productSummaryZone" HeaderText="Product summary">Di2015NewLine                <ZoneTemplate>Di2015NewLine                    <uc:ProductSummary title="Product summary title" runat="server" ID="productSummary" />Di2015NewLine                </ZoneTemplate>Di2015NewLine            </asp:WebPartZone>Di2015NewLine
11708581Di2015UniqueSeparatorHeaderText="Product summary"
11708581Di2015UniqueSeparator<uc:ProductSummary title="Product summary title" runat="server" ID="productSummary" />
11708581Di2015UniqueSeparatorUserControl
11708581Di2015UniqueSeparatorZoneTemplate
11708581Di2015UniqueSeparatortitle="..."
11708581Di2015UniqueSeparatorUserControl
11708581Di2015UniqueSeparatorWebPart
11708649Di2015UniqueSeparator...Di2015NewLine    void Properties_Completed(object sender, LiveOperationCompletedEventArgs e)//completedDi2015NewLine    {Di2015NewLine        if (e.Error == null)Di2015NewLine        {Di2015NewLine            IDictionary<string,object> result = e.Result;Di2015NewLine            object shr = result["shared_with"];Di2015NewLine            IDictionary<string, object> permission = shr as IDictionary<string, object>;Di2015NewLine            string access = permission["access"].ToString();Di2015NewLine        }Di2015NewLine    {Di2015NewLine
11708844Di2015UniqueSeparatorFile.ReadAllText()
11708844Di2015UniqueSeparatorReadAllText()
11708844Di2015UniqueSeparatorFile.WriteAllText()
11708844Di2015UniqueSeparatorusing (StreamReader sr = new StreamReader("xmlfile.txt")) Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    while ((line = sr.ReadLine()) != null) Di2015NewLine    {Di2015NewLine         File.WriteAllText("mynewxmfile.xml", MyEncryptMethod(line));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11709140Di2015UniqueSeparatorIPathReader
11709140Di2015UniqueSeparatorpublic interface IPathReaderDi2015NewLine{Di2015NewLine    TextReader CreateReader(string path);Di2015NewLine}Di2015NewLine
11709140Di2015UniqueSeparatorStringReader
11709140Di2015UniqueSeparatorStreamReader
11709140Di2015UniqueSeparatorFunc<string, TextReader>
11709204Di2015UniqueSeparatorPage.ResolveUrl
11709204Di2015UniqueSeparatorthis.ResolveUrl
11709204Di2015UniqueSeparatorResolveUrl( (string)Eval("NavigateUrl"))Di2015NewLine
11709306Di2015UniqueSeparatorvar key = "tester";Di2015NewLinevar val = "testing";Di2015NewLineif(myDictionary.ContainsKey(key) && myDictionary[key].Contains(val)) Di2015NewLine{Di2015NewLine    // "tester" key exists and contains "testing" valueDi2015NewLine}Di2015NewLine
11709306Di2015UniqueSeparatorvar key = "tester";Di2015NewLinevar val = "testing";Di2015NewLinevar dicVal = string.Empty;Di2015NewLineif(myDictionary.TryGetValue(key, out dicVal) && dicVal.contains(val)) Di2015NewLine{Di2015NewLine    // "tester" key exists and contains "testing" valueDi2015NewLine}Di2015NewLine
11709328Di2015UniqueSeparatorusing (var context = new MyEntities())Di2015NewLine{Di2015NewLine    context.Attach(client);Di2015NewLine    context.SaveChanges();Di2015NewLine}Di2015NewLine
11709328Di2015UniqueSeparatorusing (var context = new MyEntities())Di2015NewLine{Di2015NewLine    context.Attach(client);Di2015NewLine    client.Name = "Bob";Di2015NewLine    context.SaveChanges();Di2015NewLine}Di2015NewLine
11709338Di2015UniqueSeparatorcmdBars["Script Context"]
11709338Di2015UniqueSeparatorforeach (CommandBar cc in cmdBars)Di2015NewLine{Di2015NewLine    if (cc.Index >= 1 && cc.Index <= 465)Di2015NewLine    {Di2015NewLine        command.AddControl(cmdBars[cc.NameLocal]);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11709338Di2015UniqueSeparator    if (cc.Index >= 1 && cc.Index <= 256)Di2015NewLine    ...Di2015NewLine    if (cc.Index >= 1 && cc.Index <= 128)Di2015NewLine    ...Di2015NewLine    if (cc.Index >= 64 && cc.Index <= 128)Di2015NewLine    ...etc...Di2015NewLine
11709393Di2015UniqueSeparatorprivate static AnimalTypeEnum GetAnimalFromInput()Di2015NewLine{Di2015NewLine    AnimalTypeEnum animal;Di2015NewLine    string s = Console.ReadLine();Di2015NewLine    switch (s.ToLower())Di2015NewLine    {Di2015NewLine        case "dog":Di2015NewLine            animal = AnimalTypeEnum.DOG;Di2015NewLine            break;Di2015NewLine        case "cat":Di2015NewLine            animal = AnimalTypeEnum.CAT;Di2015NewLine            break;Di2015NewLine        case "rabbit":Di2015NewLine            animal = AnimalTypeEnum.RABBIT;Di2015NewLine            break;Di2015NewLine        default:Di2015NewLine            Console.WriteLine(s + " is not valid, please try again");Di2015NewLine            animal = GetAnimalFromInput();Di2015NewLine            break;Di2015NewLine    }Di2015NewLine    return animal;Di2015NewLine}Di2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    AnimalTypeEnum animal = GetAnimalFromInput();Di2015NewLineDi2015NewLine    Console.WriteLine(animal);Di2015NewLine}Di2015NewLine
11709393Di2015UniqueSeparatorif (s.Equals("dog", StringComparison.CurrentCultureIgnoreCase))
11709393Di2015UniqueSeparator"dog"
11709393Di2015UniqueSeparatorDOG
11709393Di2015UniqueSeparatorEnum.TryParse
11709393Di2015UniqueSeparatorprivate static AnimalTypeEnum GetAnimalFromInput()Di2015NewLine{Di2015NewLine    AnimalTypeEnum animal;Di2015NewLine    string s = Console.ReadLine();Di2015NewLine    if (Enum.TryParse(s, true, out animal))Di2015NewLine        return animal;Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        Console.WriteLine(s + " is not valid, please try again");Di2015NewLine        return GetAnimalFromInput();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11709726Di2015UniqueSeparatorbool occupiedPositions[columns, rows];Di2015NewLine
11709726Di2015UniqueSeparatoroccupiedPositons[i, j] = true;Di2015NewLine
11709726Di2015UniqueSeparatorList<Vector2> emptyCells;Di2015NewLineDi2015NewLine// fill it with your NewRandomPosition() contentHouseOne.Count timesDi2015NewLineDi2015NewLineforeach (string buildingPart in contentHouseOne)Di2015NewLine{Di2015NewLine    int positionIndex = random.Next(emptyCells.Count);Di2015NewLine    Vector2 newPosition = emptyCells[positionIndex];Di2015NewLine    emptyCells.RemoveAt(positionIndex);Di2015NewLineDi2015NewLine    // do yout stuff using newPosition hereDi2015NewLine}Di2015NewLine
11709807Di2015UniqueSeparator"http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.historicaldata%20where%20symbol%20%3D%20%22"+symbol+"%22%20and%20startDate%20%3D%20%22"+ startDate +"%22%20and%20endDate%20%3D%20%22"+ endDate +"%22"+ dataFormat
11709807Di2015UniqueSeparatorsymbol
11709807Di2015UniqueSeparatorstartDate
11709807Di2015UniqueSeparatorendDate
11709807Di2015UniqueSeparatordataFormat
11709807Di2015UniqueSeparator&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys
11709889Di2015UniqueSeparatorwhile
11709889Di2015UniqueSeparatorif
11709889Di2015UniqueSeparatorstring strCommandText = "SELECT productName from Products WHERE productID=@ProductID";Di2015NewLineSqlCommand cmd = new SqlCommand(strCommandText, myConnect);Di2015NewLinecmd.Parameters.AddWithValues("@ProductID", productID);Di2015NewLine...Di2015NewLineDi2015NewLineif(reader.Read())Di2015NewLine{Di2015NewLine  //Label1.Text += reader["productName"].ToString();Di2015NewLine  Label1.Text = reader["productName"].ToString();Di2015NewLine}Di2015NewLine
11709906Di2015UniqueSeparatorAccessKey uniqueidentifier not null unique
11709906Di2015UniqueSeparatorGuid.NewGuid()
11709906Di2015UniqueSeparatorpublic static class SecureGuidGeneratorDi2015NewLine{Di2015NewLine    [ThreadStatic]Di2015NewLine    static RandomNumberGenerator rng;Di2015NewLineDi2015NewLine    public static Guid GetNext()Di2015NewLine    {Di2015NewLine        if (rng == null) rng = RandomNumberGenerator.Create();Di2015NewLine        var bytes = new byte[16];Di2015NewLine        rng.GetBytes(bytes);Di2015NewLine        return new Guid(bytes);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11709984Di2015UniqueSeparatorerror
11709984Di2015UniqueSeparatorleveldb_open
11709984Di2015UniqueSeparatorerror
11709984Di2015UniqueSeparatorleveldb_memory
11709984Di2015UniqueSeparatornull
11709984Di2015UniqueSeparatorleveldb_memory error = null;Di2015NewLine
11710084Di2015UniqueSeparatorusing(HttpClient client = new HttpClient()) {Di2015NewLine    await client.PostAsync(uri, new StringContent("my own string");Di2015NewLine}Di2015NewLine
11710084Di2015UniqueSeparatorawait Request.Content.ReadAsStringAsync();Di2015NewLine
11710140Di2015UniqueSeparatorObjectContext
11710140Di2015UniqueSeparatorSaveChanges()
11710140Di2015UniqueSeparatorExecuteStoreCommand()
11710140Di2015UniqueSeparatorObjectContext
11710140Di2015UniqueSeparatorforeign keys=True
11710140Di2015UniqueSeparatorconnectionString
11710140Di2015UniqueSeparator<configuration>Di2015NewLine  <connectionStrings>Di2015NewLine    <add name="DataBaseEntity"Di2015NewLine         connectionString="metadata=res://*/m.csdl|res://*/m.ssdl|res://*/m.msl;provider=System.Data.SQLite;provider connection string="data source=C:\\foo.db;foreign keys=True"" Di2015NewLine         providerName="System.Data.EntityClient" />Di2015NewLine  </connectionStrings>Di2015NewLine</configuration>Di2015NewLine
11710169Di2015UniqueSeparatorDirectory.Exists
11710169Di2015UniqueSeparatorDirectory.GetAccessControl
11710169Di2015UniqueSeparatorpublic static bool CanRead(string path)Di2015NewLine{Di2015NewLine    var readAllow = false;Di2015NewLine    var readDeny = false;Di2015NewLine    var accessControlList = Directory.GetAccessControl(path);Di2015NewLine    if(accessControlList == null)Di2015NewLine        return false;Di2015NewLine    var accessRules = accessControlList.GetAccessRules(true, true, typeof(System.Security.Principal.SecurityIdentifier));Di2015NewLine    if(accessRules ==null)Di2015NewLine       return false;Di2015NewLineDi2015NewLine    foreach (FileSystemAccessRule rule in accessRules)Di2015NewLine    {Di2015NewLine        if ((FileSystemRights.Read & rule.FileSystemRights) != FileSystemRights.Read) continue;Di2015NewLineDi2015NewLine        if (rule.AccessControlType == AccessControlType.Allow)Di2015NewLine            readAllow = true;Di2015NewLine        else if (rule.AccessControlType == AccessControlType.Deny)Di2015NewLine            readDeny = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    return readAllow && !readDeny;Di2015NewLine}Di2015NewLine
11710176Di2015UniqueSeparator               var dte = GetDTE();Di2015NewLine                var debugger = dte.Debugger;Di2015NewLine                var processes = debugger.LocalProcesses;Di2015NewLine                int processIdToAttach; //your process id of second visual studioDi2015NewLine                foreach (var p in processes)Di2015NewLine                {Di2015NewLine                    EnvDTE90.Process3 process3 = (EnvDTE90.Process3)p;Di2015NewLine                    if (process3.ProcessID == processIdToAttach)Di2015NewLine                    {Di2015NewLine                        if (!process3.IsBeingDebugged)Di2015NewLine                        {Di2015NewLine                            if (doMixedModeDebugging)Di2015NewLine                            {Di2015NewLine                                string[] arr = new string[] { "Managed", "Native" };Di2015NewLine                                process3.Attach2(arr);Di2015NewLine                            }Di2015NewLine                            elseDi2015NewLine                            {Di2015NewLine                                process3.Attach();Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine
11710444Di2015UniqueSeparatorlistView1.View= View.List
11710444Di2015UniqueSeparatorLargeIcon
11710478Di2015UniqueSeparator private void ChangeLanguage(string lang)Di2015NewLine        {       Di2015NewLine            Thread.CurrentThread.CurrentCulture = new CultureInfo(lang);Di2015NewLine            Thread.CurrentThread.CurrentUICulture = new CultureInfo(lang);Di2015NewLineDi2015NewLine            //YourFormType should be the name of your formDi2015NewLine            ComponentResourceManager resources = new ComponentResourceManager(typeof(YourFormType));Di2015NewLine            resources.ApplyResources(this, "$this");Di2015NewLineDi2015NewLine            foreach (Control control in this.Controls)Di2015NewLine            {Di2015NewLine                resources.ApplyResources(control , control.Name);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11710581Di2015UniqueSeparatorFreeze
11710613Di2015UniqueSeparator HttpUtility.HtmlDecode("htmlcode");Di2015NewLine
11710798Di2015UniqueSeparatorWhereListIterator
11710798Di2015UniqueSeparatorWhere
11710798Di2015UniqueSeparatorList<Customer>
11710798Di2015UniqueSeparatorIEnumerable
11710798Di2015UniqueSeparatorIList
11710798Di2015UniqueSeparatorIEnumerable
11710798Di2015UniqueSeparatorIEnumerable
11710798Di2015UniqueSeparatorWhere
11710798Di2015UniqueSeparatorIList
11710798Di2015UniqueSeparatorIList
11710798Di2015UniqueSeparatorWhere().ToList()
11710798Di2015UniqueSeparatorRemoveAll
11710826Di2015UniqueSeparator.Net Serialization
11710826Di2015UniqueSeparator [Serializable]Di2015NewLine    class PersonDi2015NewLine    {Di2015NewLine        public int Age { get; set; }Di2015NewLine        public string Name { get; set; }Di2015NewLine    }Di2015NewLine    [Serializable]Di2015NewLine    class AddressDi2015NewLine    {Di2015NewLine        public string City { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLinestatic public void SerializeToXML(Person p, Address add)Di2015NewLine        {Di2015NewLine            IFormatter formatter = new BinaryFormatter();Di2015NewLine            using (FileStream stream = new FileStream(@"C:\\data.xml", FileMode.Create, FileAccess.Write, FileShare.None))Di2015NewLine            {Di2015NewLine                formatter.Serialize(stream, p);Di2015NewLine                formatter.Serialize(stream, add);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        static void DeserializeFromXML()Di2015NewLine        {Di2015NewLine            IFormatter formatter = new BinaryFormatter();Di2015NewLine            using (FileStream stream = new FileStream(@"C:\\data.xml", FileMode.Open, FileAccess.Read, FileShare.None))Di2015NewLine            {Di2015NewLineDi2015NewLine                Person p = (Person)formatter.Deserialize(stream);Di2015NewLine                Address add = (Address)formatter.Deserialize(stream);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11710826Di2015UniqueSeparatorPerson p = new Person { Age = 23, Name = "Ram" };Di2015NewLine            Address add = new Address { City = "Khurja,India" };Di2015NewLine            SerializeToXML(p, add);Di2015NewLine            DeserializeFromXML();Di2015NewLine
11710958Di2015UniqueSeparatorInputBox
11710958Di2015UniqueSeparatornamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            string value = "Document 1";Di2015NewLineDi2015NewLine            if (Tmp.InputBox("New document", "New document name:", ref value, new Bitmap("Your Image Here") == DialogResult.OK)Di2015NewLine            {Di2015NewLine                this.Text = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class Tmp  //Note new field called bitmap for passing your picture to the InputBoxDi2015NewLine    {Di2015NewLine        public static DialogResult InputBox(string title, string promptText, ref string value, Bitmap image)Di2015NewLine        {Di2015NewLine            Form form = new Form();Di2015NewLine            Label label = new Label();Di2015NewLine            TextBox textBox = new TextBox();Di2015NewLine            Button buttonOk = new Button();Di2015NewLine            Button buttonCancel = new Button();Di2015NewLine            PictureBox picture = new PictureBox();Di2015NewLineDi2015NewLineDi2015NewLine            form.Text = title;Di2015NewLine            label.Text = promptText;Di2015NewLine            textBox.Text = value;Di2015NewLine            picture.Image = image;Di2015NewLineDi2015NewLine            buttonOk.Text = "OK";Di2015NewLine            buttonCancel.Text = "Cancel";Di2015NewLine            buttonOk.DialogResult = DialogResult.OK;Di2015NewLine            buttonCancel.DialogResult = DialogResult.Cancel;Di2015NewLineDi2015NewLine            label.SetBounds(9, 20, 372, 13);Di2015NewLine            textBox.SetBounds(12, 36, 372, 20);Di2015NewLine            buttonOk.SetBounds(228, 72, 75, 23);Di2015NewLine            buttonCancel.SetBounds(309, 72, 75, 23);Di2015NewLine            picture.SetBounds(14, 60, 128, 128);Di2015NewLineDi2015NewLine            label.AutoSize = true;Di2015NewLine            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;Di2015NewLine            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;Di2015NewLine            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;Di2015NewLine            picture.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;Di2015NewLineDi2015NewLine            form.ClientSize = new Size(396, 400); //Changed size to see the imageDi2015NewLine            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height); //Changed position so you are not shrinking the available size after the controls are addedDi2015NewLine            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel, picture});Di2015NewLine            form.FormBorderStyle = FormBorderStyle.FixedDialog;Di2015NewLine            form.StartPosition = FormStartPosition.CenterScreen;Di2015NewLine            form.MinimizeBox = false;Di2015NewLine            form.MaximizeBox = false;Di2015NewLine            form.AcceptButton = buttonOk; Di2015NewLine            form.CancelButton = buttonCancel;Di2015NewLineDi2015NewLine            DialogResult dialogResult = form.ShowDialog();Di2015NewLine            value = textBox.Text;Di2015NewLine            return dialogResult;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11710985Di2015UniqueSeparatorundefined
11710985Di2015UniqueSeparator$.when(ajaxCall).then(function() {Di2015NewLine  updateWhatIfPrivacyLevelRemoveSuccess(recordID, correspondingResidentDetailIDs);Di2015NewLine});Di2015NewLine
11710985Di2015UniqueSeparator( )
11710985Di2015UniqueSeparatorundefined
11710985Di2015UniqueSeparator.then()
11710985Di2015UniqueSeparator.then()
11710985Di2015UniqueSeparator.bind()
11711113Di2015UniqueSeparatorfor(int i =0; i <person_list.Count; i++)Di2015NewLine{Di2015NewLine  string name =  person_list[i].FirstName;Di2015NewLine  string email =  person_list[i].Email;Di2015NewLine  string daysLeft =  person_list[i].DaysLeft;Di2015NewLine}Di2015NewLine
11711144Di2015UniqueSeparatorLinkButton
11711144Di2015UniqueSeparatorServer.Transfer
11711144Di2015UniqueSeparatorResponseRedirect
11711144Di2015UniqueSeparator<asp:LinkButton id="LinkButton1" runat="server" Text="1"/>Di2015NewLine<asp:LinkButton id="LinkButton2" runat="server" Text="2"/>Di2015NewLine.....Di2015NewLineDi2015NewLine  void LinkButton1_Click(Object sender, EventArgs e) Di2015NewLine  {Di2015NewLine     Server.Transfer("...");Di2015NewLine  }Di2015NewLine
11711527Di2015UniqueSeparatortr
11711527Di2015UniqueSeparatorvar tr = $('table').children().find('tr');Di2015NewLine
11711527Di2015UniqueSeparatortr
11711527Di2015UniqueSeparatorid
11711527Di2015UniqueSeparator$.each(tr, function(index, value) {Di2015NewLine  var idOfCurrGoal = $(this).attr('id');Di2015NewLine  /* do something */Di2015NewLine});Di2015NewLine
11711527Di2015UniqueSeparatortr
11711527Di2015UniqueSeparatorid
11711527Di2015UniqueSeparatortr
11711527Di2015UniqueSeparatortr
11711527Di2015UniqueSeparatorclosest
11711527Di2015UniqueSeparatortr.on('click', function() {Di2015NewLine   var idOfCurrGoal = $(this).prop('id');Di2015NewLine   /* do something */Di2015NewLine});Di2015NewLine
11711527Di2015UniqueSeparatortr.click(function() {Di2015NewLine   var idOfCurrGoal = $(this).attr('id');Di2015NewLine   /* do something */Di2015NewLine});Di2015NewLine
11711636Di2015UniqueSeparatorSqlDataReader
11711636Di2015UniqueSeparatorstring sql = "Select UserId From User where UserName='Gheorghe'";Di2015NewLineDi2015NewLineSqlCommand cmd=new SqlCommand(sql, connection);Di2015NewLineSqlDataReader rd = cmd.ExecuteReader(); Di2015NewLineif (rd.HasRows) {Di2015NewLine  rd.Read(); // read first rowDi2015NewLine  var userId = rd.GetInt32(0);Di2015NewLine}Di2015NewLine
11711736Di2015UniqueSeparatorint CompareTo(MyClass other)Di2015NewLine{Di2015NewLine    return Id.compareTo(other.Id);Di2015NewLine}Di2015NewLine
11711761Di2015UniqueSeparatorfileSysWatchers[i] = new FileSystemWatcher();Di2015NewLine
11711761Di2015UniqueSeparatorPath
11711761Di2015UniqueSeparatornull
11711838Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static void FilterByPrice(string email)Di2015NewLine{Di2015NewLine    // Use HttpContext.Current.Response insteadDi2015NewLine    // Response.Write("min" + email);Di2015NewLine    //Response.Write("max" + max);Di2015NewLine}Di2015NewLine
11711906Di2015UniqueSeparatorprivate string GetDescriptionFor(HtmlDocument document)Di2015NewLine{Di2015NewLine    string description = CrawlUsingMetadata(XPath.ResourceDescription, document);Di2015NewLine    Regex regex = new Regex(@"(\\r\\n(?:[ ])*|\\n(?:[ ])*){3,}", RegexOptions.Multiline | RegexOptions.IgnoreCase);//(?:[^\\S\\r\\n|\\n]*\\1)+Di2015NewLineDi2015NewLine    string result = regex.Replace(description, "\\n\\n");Di2015NewLine    string decoded = HttpUtility.HtmlDecode(result);Di2015NewLine    return decoded;Di2015NewLine}Di2015NewLine
11711906Di2015UniqueSeparator\\n\\n
11711908Di2015UniqueSeparatorvar filepath = "/vmfs/volumes/50153b66-6aac5486-e942-080027a10080/TestMachine/TestMachine.vmx";Di2015NewLinevar directorypath = filepath.Substring(0, filepath.LastIndexOf("/", StringComparison.Ordinal) + 1);Di2015NewLine// /vmfs/volumes/50153b66-6aac5486-e942-080027a10080/TestMachine/Di2015NewLinevar dir = Path.GetDirectoryName(filepath);Di2015NewLine// \\vmfs\\volumes\\50153b66-6aac5486-e942-080027a10080\\TestMachineDi2015NewLine
11712012Di2015UniqueSeparatorbyte
11712012Di2015UniqueSeparatorchar
11712012Di2015UniqueSeparatorchar
11712012Di2015UniqueSeparatorint
11712012Di2015UniqueSeparatoruint
11712012Di2015UniqueSeparatorint
11712213Di2015UniqueSeparator      _cb = new CheckBox ();Di2015NewLine_cb.Checked = true;Di2015NewLine    _cb. CheckedChanged += my_handler ;Di2015NewLine
11712213Di2015UniqueSeparatorevent
11712213Di2015UniqueSeparatorproperty
11712213Di2015UniqueSeparatorCheckBox
11712213Di2015UniqueSeparator_wp.Children.OfType<CheckBox>().Any();Di2015NewLine
11712244Di2015UniqueSeparatorvar1 && (var2 || var3)
11712244Di2015UniqueSeparatorpublic class LogicalOperatorRewriter : SyntaxRewriterDi2015NewLine{Di2015NewLine    public override SyntaxNode VisitBinaryExpression(BinaryExpressionSyntax node)Di2015NewLine    {Di2015NewLine        SyntaxKind newExpressionKind = GetNewKind(node.Kind);Di2015NewLine        BinaryExpressionSyntax newNode = (BinaryExpressionSyntax)Syntax.BinaryExpression(newExpressionKind, left: node.Left, right: node.Right).Format().GetFormattedRoot();Di2015NewLine        return base.VisitBinaryExpression(newNode);Di2015NewLine    }Di2015NewLineDi2015NewLine    private SyntaxKind GetNewKind(SyntaxKind kind)Di2015NewLine    {Di2015NewLine        switch (kind)Di2015NewLine        {Di2015NewLine            case SyntaxKind.LogicalAndExpression:Di2015NewLine                return SyntaxKind.LogicalOrExpression;Di2015NewLine            case SyntaxKind.LogicalOrExpression:Di2015NewLine                return SyntaxKind.LogicalAndExpression;Di2015NewLine            default: return kind;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11712251Di2015UniqueSeparatorprivate void InitCookies()Di2015NewLine{Di2015NewLine    HttpWebRequest req = (HttpWebRequest)WebRequest.Create( baseUri );Di2015NewLine    req.Method = "GET";Di2015NewLine    req.CookieContainer = this.cookies;Di2015NewLine    req.GetResponse();Di2015NewLine}Di2015NewLine
11712251Di2015UniqueSeparatorusing (req.GetResponse()) {}Di2015NewLine
11712419Di2015UniqueSeparator'declare the eventDi2015NewLinePublic Event ControlClick()Di2015NewLineDi2015NewLine'raise the event when the control is clickedDi2015NewLinePrivate Sub UserControl1_Click(sender As Object, e As System.EventArgs) Handles Me.ClickDi2015NewLine    RaiseEvent ControlClick()Di2015NewLineEnd SubDi2015NewLine
11712419Di2015UniqueSeparatorPrivate Sub UserControl1_ControlClick1() Handles UserControl1.ControlClickDi2015NewLine    MessageBox.Show("Control was clicked")Di2015NewLineEnd SubDi2015NewLine
11712448Di2015UniqueSeparator            ftp.Connect("ftp.domain.com");Di2015NewLine            ftp.Login("user", "pw");Di2015NewLineDi2015NewLine            // If files in : domains/httpdocs/Install/ProgramDi2015NewLine            ftp.ChangeFolder("domains");Di2015NewLine            ftp.ChangeFolder("httpdocs");Di2015NewLine            ftp.ChangeFolder("Install");Di2015NewLineDi2015NewLine            ftp.DownloadFiles("Program",Di2015NewLine            "C:/Program Files/Install/", new RemoteSearchOptions("*.*", true));Di2015NewLineDi2015NewLine            ftp.Close();Di2015NewLine
11712449Di2015UniqueSeparatorTransactionScope
11712449Di2015UniqueSeparatorusing (var tx = new TransactionScope())Di2015NewLine{Di2015NewLine  dll1.class.Insert(data);Di2015NewLine  dll2.className.Insert(relatedData);Di2015NewLineDi2015NewLine  tx.Complete(); // if not executed, transaction will rollbackDi2015NewLine}Di2015NewLine
11712513Di2015UniqueSeparatorRadAjaxManager
11712513Di2015UniqueSeparatorOnRequestStart
11712513Di2015UniqueSeparatorOnRequestStart
11712513Di2015UniqueSeparatorOnRequestStart
11712513Di2015UniqueSeparatorRadAjaxPanel
11712513Di2015UniqueSeparatorOnRequestStart
11712782Di2015UniqueSeparatorhttps?://[\\w\\.]+\\.\\w+(:\\d{1,5})?(/[\\w?&.=]+)?
11712799Di2015UniqueSeparatorUPDATE procInfoDi2015NewLineSET endTime = <end time>Di2015NewLineWHERE id = <process id>Di2015NewLine
11712848Di2015UniqueSeparatorpublic double _weightDi2015NewLine{Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _weight = value;Di2015NewLine    }Di2015NewLine }Di2015NewLine
11712848Di2015UniqueSeparatorpublic struct ItemDi2015NewLine{Di2015NewLine    public string _name { get; set; }Di2015NewLineDi2015NewLine    private double _weightInternal;Di2015NewLine    public double _weightDi2015NewLine    {Di2015NewLine        get Di2015NewLine        {Di2015NewLine            return _weightInternal;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _weightInternal = value;Di2015NewLineDi2015NewLine            //Shipping cost is 100% dependent on weight. Recalculate it now.Di2015NewLine            _shippingCost = 3.25m * (decimal)_weightInternal;Di2015NewLineDi2015NewLine            //Retail price is partially dependent on shipping cost and thus on weight as well.  Make sure retail price stays up to date.Di2015NewLine            _retailPrice = 1.7m * _wholesalePriceInternal * _shippingCost;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private decimal _wholesalePriceInternal;Di2015NewLine    public decimal _wholesalePriceDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _wholesalePriceInternal;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            //Retail price is partially determined by wholesale price.  Make sure  retail price stays up to date.Di2015NewLine            _wholesalePriceInternal = value;Di2015NewLine            _retailPrice = 1.7m * _wholesalePriceInternal * _shippingCost;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public int _quantity { get; set; }Di2015NewLine    public decimal _shippingCost { get; private set; }Di2015NewLine    public decimal _retailPrice { get; private set; }Di2015NewLineDi2015NewLineDi2015NewLine    public Item(string name, double weight, decimal wholesalePrice, int quantity) : this()Di2015NewLine    {Di2015NewLine        _name = name;Di2015NewLine        _weightInternal = weight;Di2015NewLine        _wholesalePriceInternal = wholesalePrice;Di2015NewLine        _quantity = quantity;Di2015NewLine    }Di2015NewLine    //More stuffDi2015NewLine}Di2015NewLine
11712934Di2015UniqueSeparatorrect[x,]
11712934Di2015UniqueSeparatorrect[x+1,]
11712934Di2015UniqueSeparatorrect[,y]
11712934Di2015UniqueSeparatorrect[,y+1]
11712934Di2015UniqueSeparatorParallel.For
11712940Di2015UniqueSeparatorint count = a.count;Di2015NewLinevar current = a;Di2015NewLinefor (int i = 0; i <= count; i++)Di2015NewLine{Di2015NewLine    str += (i > 0 ? "/" : string.empty) + current.Name;Di2015NewLine    current = current.Parent;Di2015NewLine}Di2015NewLine
11712947Di2015UniqueSeparatorusing System.Windows.Automation;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinenamespace FocusChangedDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Automation.AddAutomationFocusChangedEventHandler(OnFocusChangedHandler);Di2015NewLine            Console.WriteLine("Monitoring... Hit enter to end.");Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void OnFocusChangedHandler(object src, AutomationFocusChangedEventArgs args)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Focus changed!");Di2015NewLine            AutomationElement element = src as AutomationElement;Di2015NewLine            if (element != null)Di2015NewLine            {Di2015NewLine                string name = element.Current.Name;Di2015NewLine                string id = element.Current.AutomationId;Di2015NewLine                int processId = element.Current.ProcessId;Di2015NewLine                using (Process process = Process.GetProcessById(processId))Di2015NewLine                {Di2015NewLine                    Console.WriteLine("  Name: {0}, Id: {1}, Process: {2}", name, id, process.ProcessName);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11713078Di2015UniqueSeparatorIde
11713078Di2015UniqueSeparatorpublic class IdeDi2015NewLine{        Di2015NewLine    [DllImport("ole32.dll")]Di2015NewLine    private static extern void CreateBindCtx(int reserved, out IBindCtx ppbc);Di2015NewLineDi2015NewLine    [DllImport("ole32.dll")]Di2015NewLine    private static extern void GetRunningObjectTable(int reserved, out IRunningObjectTable prot);Di2015NewLineDi2015NewLine    public static DTE2 GetDte(string solutionName)Di2015NewLine    {Di2015NewLine        DTE2 dte = null;Di2015NewLineDi2015NewLine        GetDte((displayName, x) =>Di2015NewLine        {Di2015NewLine            if (System.IO.Path.GetFileName(x.Solution.FullName).Contains(solutionName))Di2015NewLine            {Di2015NewLine                dte = x;Di2015NewLine                return false; // we found it stop serachingDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return true; // continue searchingDi2015NewLine            }Di2015NewLineDi2015NewLine        });Di2015NewLineDi2015NewLine        return dte;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static DTE2 GetDte(int processId)Di2015NewLine    {Di2015NewLine        DTE2 dte = null;Di2015NewLineDi2015NewLine        GetDte((displayName, x) =>Di2015NewLine        {Di2015NewLine            if (displayName.Contains(processId.ToString()))Di2015NewLine            {Di2015NewLine                dte = x;Di2015NewLine                return false; // stop searching we found matching dteDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return true; // continue searchingDi2015NewLine            }Di2015NewLine        });Di2015NewLineDi2015NewLine        return dte;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static List<DTE2> GetAllDte()Di2015NewLine    {Di2015NewLine        List<DTE2> list = new List<DTE2>();Di2015NewLine        GetDte((displayName, x) =>Di2015NewLine        {Di2015NewLine            list.Add(x);Di2015NewLine            return true; // continue serching we want all dte'sDi2015NewLine        });Di2015NewLine        return list;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void GetDte(Func<string, DTE2, bool> foo)Di2015NewLine    {Di2015NewLine        Dictionary<string, string> dtesProcessIds = new Dictionary<string, string>();Di2015NewLineDi2015NewLine        //rot entry for visual studio running under current process.            Di2015NewLine        IRunningObjectTable rot;Di2015NewLine        GetRunningObjectTable(0, out rot);Di2015NewLine        IEnumMoniker enumMoniker;Di2015NewLine        rot.EnumRunning(out enumMoniker);Di2015NewLine        enumMoniker.Reset();Di2015NewLine        IntPtr fetched = IntPtr.Zero;Di2015NewLine        IMoniker[] moniker = new IMoniker[1];Di2015NewLine        while (enumMoniker.Next(1, moniker, fetched) == 0)Di2015NewLine        {Di2015NewLine            IBindCtx bindCtx;Di2015NewLine            CreateBindCtx(0, out bindCtx);Di2015NewLine            string displayName;Di2015NewLine            moniker[0].GetDisplayName(bindCtx, null, out displayName);Di2015NewLine            object comObject;Di2015NewLine            rot.GetObject(moniker[0], out comObject);Di2015NewLineDi2015NewLine            if (comObject != null)Di2015NewLine            {Di2015NewLine                DTE2 dteCurrent = null;Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    dteCurrent = (EnvDTE80.DTE2)comObject;Di2015NewLineDi2015NewLine                    // if solution is not open continueDi2015NewLine                    // this will cause an exception if it is not openDi2015NewLine                    var temp = dteCurrent.Solution.IsOpen;Di2015NewLineDi2015NewLine                    string solName = dteCurrent.Solution.FullName;Di2015NewLineDi2015NewLine                    // if there is an instance of visual studio with no solution open continue                        Di2015NewLine                    if (string.IsNullOrEmpty(solName))Di2015NewLine                    {Di2015NewLine                        continue;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    // avoid adding duplicate ide'sDi2015NewLine                    if (dtesProcessIds.ContainsKey(displayName) == false)Di2015NewLine                    {Di2015NewLine                        dtesProcessIds.Add(displayName, displayName);Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        continue;Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLine                catch (System.Runtime.InteropServices.COMException e)Di2015NewLine                {Di2015NewLine                    continue;Di2015NewLine                }Di2015NewLine                catch (Exception e)Di2015NewLine                {Di2015NewLine                    continue;Di2015NewLine                }Di2015NewLine                if (dteCurrent != null)Di2015NewLine                {Di2015NewLine                    var cont = foo(displayName, dteCurrent);Di2015NewLineDi2015NewLine                    if (cont == false)Di2015NewLine                        return;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11713078Di2015UniqueSeparatorConsoleApp1
11713078Di2015UniqueSeparator var dte = Ide.GetDte("ConsoleApp1");Di2015NewLine dte.ActiveDocument.Selection.Insert("My macro is working!");Di2015NewLine
11713078Di2015UniqueSeparatorMy macro is working!
11713190Di2015UniqueSeparatorpublic class ShapeWrapperDi2015NewLine{Di2015NewLine    public IVisio.Shape Shape { get; set; }Di2015NewLineDi2015NewLine    private List<ShapeWrapper> children = new List<ShapeWrapper>();Di2015NewLine    public List<ShapeWrapper> Children { get { return this.children; } }Di2015NewLineDi2015NewLine    public ShapeWrapper(IVisio.Shape shape)Di2015NewLine    {Di2015NewLine        Shape = shape;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void FindChildren(ShapeWrapper shapeWrapper, Di2015NewLine                              List<IVisio.Shape> addedShapes)Di2015NewLine{Di2015NewLine    IVisio.Selection children = shapeWrapperDi2015NewLine       .Shape.SpatialNeighbors[Di2015NewLine            (short)IVisio.VisSpatialRelationCodes.visSpatialContain, Di2015NewLine            0,Di2015NewLine            (short)IVisio.VisSpatialRelationFlags.visSpatialFrontToBack];Di2015NewLineDi2015NewLine    foreach (IVisio.Shape child in children)Di2015NewLine    {Di2015NewLine        if (!addedShapes.Contains(child))Di2015NewLine        {Di2015NewLine             //MessageBox.Show(child.Text);Di2015NewLine             ShapeWrapper childWrapper = new ShapeWrapper(child);Di2015NewLine             shapeWrapper.Children.Add(childWrapper);Di2015NewLineDi2015NewLine             FindChildren(childWrapper, addedShapes);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11713261Di2015UniqueSeparatorRegex regex = new Regex(@"^\\t+", RegexOptions.Multiline);Di2015NewLines = regex.Replace(s, m => new string(' ', 4 * m.Value.Length));Di2015NewLine
11713261Di2015UniqueSeparator<%@ Page Title="Home Page" Language="C#" MasterPageFile="~/Site.master" AutoEventWireup="true"Di2015NewLine    CodeBehind="Default.aspx.cs" Inherits="WebApplication1._Default" %>Di2015NewLineDi2015NewLine<asp:Content ID="HeaderContent" runat="server" ContentPlaceHolderID="HeadContent"></asp:Content>Di2015NewLine<asp:Content ID="BodyContent" runat="server" ContentPlaceHolderID="MainContent">Di2015NewLine    <asp:Button ID="Button1" runat="server" Text="Button" onclick="Button1_Click" />Di2015NewLine    <asp:TextBox ID="TextBox1" runat="server" Height="99px" Width="500px" TextMode="MultiLine"></asp:TextBox>Di2015NewLine</asp:Content>Di2015NewLine
11713261Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLinenamespace WebApplication1Di2015NewLine{Di2015NewLine    public partial class _Default : System.Web.UI.PageDi2015NewLine    {Di2015NewLine        protected void Button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            string code = "protected void Page_Load(object sender, EventArgs e)\\n{\\n\\tResponse.Write(\\"Hello World\\");\\n}";Di2015NewLine            Regex regex = new Regex(@"^\\t+", RegexOptions.Multiline);Di2015NewLine            TextBox1.Text = regex.Replace(code, m => new string('*', 4 * m.Value.Length));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11713261Di2015UniqueSeparator'*'
11713261Di2015UniqueSeparator' '
11713315Di2015UniqueSeparator     lstDepartment.DataSource = oCorp.GetEmployeeList(emp);Di2015NewLine     lstDepartment.DataTextField = "EmployeeID";Di2015NewLine     lstDepartment.DataValueField = "EmployeeID";Di2015NewLine     lstDepartment.DataBind()Di2015NewLine
11713353Di2015UniqueSeparatorFactory
11713353Di2015UniqueSeparatorId
11713353Di2015UniqueSeparatorenum
11713353Di2015UniqueSeparator public class ShapeFactoryDi2015NewLine    {Di2015NewLine        public static IShape GetShape(ShapeType shapeType)Di2015NewLine        {Di2015NewLine            switch (shapeType)Di2015NewLine            {Di2015NewLine                case ShapeType.Square:Di2015NewLine                    return new Square();Di2015NewLineDi2015NewLine                case ShapeType.Rectangle:Di2015NewLine                    return new Rectangle();Di2015NewLine                default:Di2015NewLine                    break;Di2015NewLine            }Di2015NewLineDi2015NewLine            return null;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum ShapeTypeDi2015NewLine    {Di2015NewLine        Square,Di2015NewLine        RectangleDi2015NewLine    }Di2015NewLine
11713534Di2015UniqueSeparatorpublic class FooController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        ViewBag.SelectedTab = "Bar";Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Bar()Di2015NewLine    {Di2015NewLine        if(Request.Headers["X-PJAX"] != null)Di2015NewLine            return PartialView();Di2015NewLine        ViewBag.SelectedTab = "Bar";Di2015NewLine        return View("Index");Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Baz()Di2015NewLine    {Di2015NewLine        if (Request.Headers["X-PJAX"] != null)Di2015NewLine            return PartialView();Di2015NewLine        ViewBag.SelectedTab = "Baz";Di2015NewLine        return View("Index");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11713534Di2015UniqueSeparatorViewBag.SelectedTab
11713534Di2015UniqueSeparator@{Di2015NewLine    ViewBag.Title = "Foo";Di2015NewLine}Di2015NewLineDi2015NewLine<h2>Foo</h2>Di2015NewLineDi2015NewLine<ul>Di2015NewLine    <li><a class="tabs" href="@Url.Action("Bar", "Foo")">Bar</a></li>Di2015NewLine    <li><a class="tabs" href="@Url.Action("Baz", "Foo")">Baz</a></li>Di2015NewLine</ul>Di2015NewLine<div id="tab_content">Di2015NewLine    @if(ViewBag.SelectedTab == "Bar")Di2015NewLine    {Di2015NewLine        @Html.Partial("Bar")Di2015NewLine    }Di2015NewLine    @if (ViewBag.SelectedTab == "Baz")Di2015NewLine    {Di2015NewLine        @Html.Partial("Baz")Di2015NewLine    }Di2015NewLine</div>Di2015NewLineDi2015NewLine@section scriptsDi2015NewLine{Di2015NewLine    <script type="text/javascript">Di2015NewLine        $(function() {Di2015NewLine            $(".tabs").pjax("#tab_content");Di2015NewLine        })Di2015NewLine    </script>Di2015NewLine}Di2015NewLine
11713534Di2015UniqueSeparatortabs
11713534Di2015UniqueSeparatorhref
11713534Di2015UniqueSeparatortab_content
11713534Di2015UniqueSeparatorhref
11713534Di2015UniqueSeparator<p>This is the Bar tab. No pun intended.</p>Di2015NewLine
11713534Di2015UniqueSeparator<p>This is the baz tab.</p>Di2015NewLine
11713559Di2015UniqueSeparatortemp.Replace(temp, temp + "</LI>");Di2015NewLine
11713559Di2015UniqueSeparatortemp = temp.Replace(temp, temp + "</LI>");Di2015NewLine
11713584Di2015UniqueSeparatorList<>
11713584Di2015UniqueSeparator  var sb = new StringBuilder("All", 26+3 +spare);Di2015NewLine  for (char c = 'A'; c <= 'Z'; c++)  sb.Append(c);Di2015NewLineDi2015NewLine  string result = sb.ToString();Di2015NewLine
11713596Di2015UniqueSeparatorSaveAs
11713596Di2015UniqueSeparatorSave
11713596Di2015UniqueSeparatorworkbook.SaveAs (filename, XlFileFormat.xlOpenXMLWorkbookMacroEnabled);Di2015NewLine
11713596Di2015UniqueSeparatorXlFileFormat.xlOpenXMLWorkbookMacroEnabled
11713596Di2015UniqueSeparatorxlsm
11713617Di2015UniqueSeparatoryourfile.txt
11713617Di2015UniqueSeparatorstring path = Path.Combine(System.Environment.GetFolderPathDi2015NewLine    (System.Environment.SpecialFolder.Personal), "yourfile.txt");Di2015NewLineConsole.WriteLine(File.Exists(path));Di2015NewLine
11713617Di2015UniqueSeparator\\
11713617Di2015UniqueSeparatorDirectory.Exists()
11713759Di2015UniqueSeparatorfiles.OrderBy(path => Int32.Parse(Path.GetFileNameWithoutExtension(path)))Di2015NewLine
11713759Di2015UniqueSeparatorLast()
11713855Di2015UniqueSeparator<%@ Register TagPrefix="a" Namespace="nestedcontroltest" Assembly="nestedcontroltest" %>Di2015NewLine
11713855Di2015UniqueSeparator<%@ Register TagPrefix="a" TagName="MyControl" Src="~/MyControl.ascx" %>Di2015NewLine
11713898Di2015UniqueSeparatorvar reader = new StringReader(xmlString);Di2015NewLinevar ser = new XmlSerializer(typeof(Response));Di2015NewLinevar result = (Response) ser.Deserialize(reader);Di2015NewLine
11713898Di2015UniqueSeparator[XmlType("response")]Di2015NewLinepublic class ResponseDi2015NewLine{Di2015NewLine    [XmlElement("response_error_dialogs")]Di2015NewLine    public ErrorDialog ErrorDialog;Di2015NewLine}Di2015NewLineDi2015NewLine[XmlType("response_error_dialogs")]Di2015NewLinepublic class ErrorDialogDi2015NewLine{Di2015NewLine    [XmlArray("error_dialog_list")]Di2015NewLine    public List<ChoiceErrorDialog> ChoiceList;Di2015NewLine}Di2015NewLineDi2015NewLine[XmlType("error_dialog_choice")]Di2015NewLinepublic class ChoiceErrorDialogDi2015NewLine{Di2015NewLine    [XmlElement("error_dialog_id")]Di2015NewLine    public int Id;Di2015NewLineDi2015NewLine    [XmlElement("error_dialog_message")]Di2015NewLine    public string Message;Di2015NewLineDi2015NewLine    [XmlElement("error_dialog_title")]Di2015NewLine    public string Title;Di2015NewLineDi2015NewLine    [XmlElement("error_dialog_is_set")]Di2015NewLine    public bool IsSet;Di2015NewLineDi2015NewLine    [XmlArray("error_dialog_choice_option_list")]Di2015NewLine    public List<Option> OptionList;Di2015NewLine}Di2015NewLineDi2015NewLine[XmlType("error_dialog_choice_option")]Di2015NewLinepublic class OptionDi2015NewLine{Di2015NewLine    [XmlElement("error_dialog_choice_option_id")]Di2015NewLine    public int Id;Di2015NewLineDi2015NewLine    [XmlElement("error_dialog_choice_option_title")]Di2015NewLine    public string Title;Di2015NewLine}Di2015NewLine
11713898Di2015UniqueSeparator<error_dialog_choice>
11713898Di2015UniqueSeparatorXmlArrayItem
11713898Di2015UniqueSeparatorxsd.exe
11713898Di2015UniqueSeparatorsvcutil.exe
11713898Di2015UniqueSeparator.xsd
11713898Di2015UniqueSeparator.wsdl
11713898Di2015UniqueSeparatorxsd.exe
11713898Di2015UniqueSeparator.xml
11713898Di2015UniqueSeparatorxsd.exe /?Di2015NewLinesvcutil.exe /?Di2015NewLine
11713914Di2015UniqueSeparatorList<byte>
11713914Di2015UniqueSeparatorList<byte> list = new List<byte>();Di2015NewLinewhile(reading){ //or whatever your condition isDi2015NewLine    list.add(readByte);Di2015NewLine}Di2015NewLineDi2015NewLinestring output = Encoding.UTF8.GetString(list.ToArray());Di2015NewLine
11713914Di2015UniqueSeparatorStringBuilder
11713914Di2015UniqueSeparatorStringBuilder builder = new StringBuilder();Di2015NewLineDi2015NewLinewhile(reading){Di2015NewLine    builder.Append(readByte);Di2015NewLine}Di2015NewLineDi2015NewLinestring output = builder.ToString();Di2015NewLine
11713963Di2015UniqueSeparator?
11713963Di2015UniqueSeparatorItem?
11713963Di2015UniqueSeparatorItem
11714003Di2015UniqueSeparatorGetHashCode()
11714003Di2015UniqueSeparatorGetHashCode()
11714003Di2015UniqueSeparatorArray.IStructuralEquatable
11714003Di2015UniqueSeparator    int IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { Di2015NewLine        if (comparer == null)Di2015NewLine            throw new ArgumentNullException("comparer"); Di2015NewLine        Contract.EndContractBlock();Di2015NewLineDi2015NewLine        int ret = 0;Di2015NewLineDi2015NewLine        for (int i = (this.Length >= 8 ? this.Length - 8 : 0); i < this.Length; i++) {Di2015NewLine            ret = CombineHashCodes(ret, comparer.GetHashCode(GetValue(0))); Di2015NewLine        } Di2015NewLineDi2015NewLine        return ret; Di2015NewLine    }Di2015NewLine
11714003Di2015UniqueSeparatorret = CombineHashCodes(ret, comparer.GetHashCode(GetValue(
11714003Di2015UniqueSeparator)));
11714003Di2015UniqueSeparator0
11714003Di2015UniqueSeparatori
11714003Di2015UniqueSeparatorGetHashCode()
11714003Di2015UniqueSeparator0
11714003Di2015UniqueSeparatori
11714107Di2015UniqueSeparatorBindingSource
11714107Di2015UniqueSeparatorDataTable
11714107Di2015UniqueSeparatorBindingSource
11714107Di2015UniqueSeparatorDataTable
11714107Di2015UniqueSeparatorBindingSource.ResetBindings(false)
11714107Di2015UniqueSeparatorBindingSource bindingSource = new BindingSource();Di2015NewLinebindingSource.DataSource = myDataTable;Di2015NewLinemyGrid.DataSource = bindingSource;Di2015NewLine
11714107Di2015UniqueSeparatorbindingSource.ResetBindings(false); // put true if your metadata has also changedDi2015NewLine
11714187Di2015UniqueSeparatorUserControl
11714187Di2015UniqueSeparatorUserControl
11714187Di2015UniqueSeparator<!-- ToolBar.xaml -->Di2015NewLine<UserControl ...Di2015NewLine             Name="control">Di2015NewLine    <!-- ... -->Di2015NewLine    <Slider Value="{Binding ScaleValue, ElementName=control}" ... />Di2015NewLine    <!-- ... -->Di2015NewLine</UserControl>Di2015NewLine
11714187Di2015UniqueSeparator// ToolBar.xaml.csDi2015NewLinepublic partial class ToolBar : UserControlDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty ScaleValueProperty =Di2015NewLine        DependencyProperty.Register("ScaleValue", typeof(double), typeof(ToolBar));Di2015NewLine    public double ScaleValueDi2015NewLine    {Di2015NewLine        { get { return (double)GetValue(ScaleValueProperty); }Di2015NewLine        { set { SetValue(ScaleValueProperty, value); }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11714187Di2015UniqueSeparator<ScaleTransform ScaleX="{Binding ElementName=toolbar, Path=ScaleValue}" ... />Di2015NewLine
11714196Di2015UniqueSeparatorProjectDi2015NewLine   |Di2015NewLine   +-- ResourcesDi2015NewLine   |      |Di2015NewLine   |      +--  regexCheck.txtDi2015NewLine   |Di2015NewLine   +-- Resource.resxDi2015NewLine   |      |Di2015NewLine   |      +--  Resource.Designer.csDi2015NewLine
11714196Di2015UniqueSeparatorResource.regexCheck
11714412Di2015UniqueSeparatorpublic RandomController : ControllerDi2015NewLine{Di2015NewLine    ...Di2015NewLine    protected abstract IContext Db { get; }Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic MenuController : RandomControllerDi2015NewLine{Di2015NewLine    private SomeContext db = new SomeContext();Di2015NewLineDi2015NewLine    ...Di2015NewLineDi2015NewLine    protected override IContext Db { get { return db; } }Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
11714435Di2015UniqueSeparatorasync
11714435Di2015UniqueSeparatorawait
11714435Di2015UniqueSeparatorasync
11714435Di2015UniqueSeparatorTask<TResult>
11714435Di2015UniqueSeparatorawait
11714435Di2015UniqueSeparatorpublic static async Task<String> LongTaskAAsync() {Di2015NewLine  await Task.Delay(2000);Di2015NewLine  return await Task.Run(() => {Di2015NewLine    return("AAA");Di2015NewLine  });Di2015NewLine}Di2015NewLine
11714435Di2015UniqueSeparatorTask.FromResult
11714435Di2015UniqueSeparatorTask
11714435Di2015UniqueSeparatorasync
11714435Di2015UniqueSeparatorpublic
11714435Di2015UniqueSeparatorasync
11714435Di2015UniqueSeparatorasync
11714435Di2015UniqueSeparatorpublic static Task<MyClass> GetAsync(int key)Di2015NewLine{Di2015NewLine  if (cache.Contains(key))Di2015NewLine    return Task.FromResult(cache[key]);Di2015NewLine  return CreateAndAddAsync(key);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static async Task<MyClass> CreateAndAddAsync(int key)Di2015NewLine{Di2015NewLine  var result = await CreateAsync(key);Di2015NewLine  cache.Add(key, result);Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
11714624Di2015UniqueSeparatorprotected override void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum,Di2015NewLine    Brush backBrush, Brush foreBrush, bool alignToRight) {Di2015NewLine  DateTime date = (DateTime)GetColumnValueAtRow(source, rowNum);Di2015NewLine  Rectangle rect = bounds;Di2015NewLine  g.FillRectangle(backBrush, rect);Di2015NewLine  rect.Offset(0, 2);Di2015NewLine  rect.Height -= 2;Di2015NewLine  g.DrawString(date.ToString("d"), this.DataGridTableStyle.DataGrid.Font, foreBrush, rect);Di2015NewLine}Di2015NewLine
11714997Di2015UniqueSeparatorpublic class MyDataContext : DbContextDi2015NewLine{Di2015NewLine    public DbSet<Bundle> Bundle { get; set; }Di2015NewLine    public DbSet<Image> Image { get; set; }Di2015NewLine    public DbSet<Product> Product { get; set; }Di2015NewLine    public DbSet<Siteconfig> Siteconfig { get; set; }Di2015NewLine}Di2015NewLine
11714997Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineusing System.ComponentModel.DataAnnotations;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Web.Mvc;Di2015NewLineusing JustAdminIt.Areas.JBI.Models;Di2015NewLineDi2015NewLinenamespace JustAdminIt.Areas.JBI.ViewModelsDi2015NewLine{Di2015NewLine    public class ImageViewModelDi2015NewLine    {Di2015NewLine        public Image Image { get; set; }Di2015NewLine        public Product Product { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11714997Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data;Di2015NewLineusing System.Data.Entity;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.Mvc;Di2015NewLineusing JustAdminIt.Areas.JBI.Models;Di2015NewLineusing JustAdminIt.Areas.JBI.ViewModels;Di2015NewLineusing JustAdminIt.Areas.JBI.DAL;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLinenamespace JustAdminIt.Areas.JBI.ControllersDi2015NewLine{ Di2015NewLinepublic class ImageController : ControllerDi2015NewLine{Di2015NewLine    //private ImageContext db = new ImageContext();Di2015NewLine    //private ProductContext pb = new ProductContext();Di2015NewLineDi2015NewLine    private JustBundleItContext db = new JustBundleItContext();Di2015NewLineDi2015NewLine    //Di2015NewLine    // GET: /JBI/Image/Di2015NewLineDi2015NewLine    public ViewResult Index()Di2015NewLine    {Di2015NewLine        var model = from a in db.ProductDi2015NewLine                    join b in db.ImageDi2015NewLine                    on a.productID equals b.productIDDi2015NewLine                    select new ImageViewModelDi2015NewLine                    {Di2015NewLine                        Product = a,Di2015NewLine                        Image = bDi2015NewLine                    };Di2015NewLine        return View(model.ToList());Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // GET: /JBI/Image/Details/5Di2015NewLineDi2015NewLine    public ViewResult Details(int id)Di2015NewLine    {Di2015NewLine        Image image = db.Image.Find(id);Di2015NewLine        return View(image);Di2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // GET: /JBI/Image/CreateDi2015NewLineDi2015NewLine    public ActionResult Create()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    } Di2015NewLineDi2015NewLine    //Di2015NewLine    // POST: /JBI/Image/CreateDi2015NewLine    //this simply populates the DB values, but does not handle the file uploadDi2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Create(Image image)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            db.Image.Add(image);Di2015NewLine            db.SaveChanges();Di2015NewLine            return RedirectToAction("Index");  Di2015NewLine        }Di2015NewLineDi2015NewLine        return View(image);Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult UploadFile(HttpPostedFileBase Filedata)Di2015NewLine    {Di2015NewLine        // Verify that the user selected a fileDi2015NewLine        if (Filedata != null && Filedata.ContentLength > 0)Di2015NewLine        {Di2015NewLine            // extract only the fielnameDi2015NewLine            var fileName = Path.GetFileName(Filedata.FileName);Di2015NewLine            // store the file inside ~/App_Data/uploads folderDi2015NewLine            var path = Path.Combine(Server.MapPath("~/Content/images/product/"), fileName);Di2015NewLine            Filedata.SaveAs(path);Di2015NewLine        }Di2015NewLine        // redirect back to the index action to show the form once againDi2015NewLine        return RedirectToAction("Index");Di2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // GET: /JBI/Image/Edit/5Di2015NewLineDi2015NewLine    public ActionResult Edit(int id)Di2015NewLine    {Di2015NewLine        Image image = db.Image.Find(id);Di2015NewLine        return View(image);Di2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // POST: /JBI/Image/Edit/5Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Edit(Image image)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            db.Entry(image).State = EntityState.Modified;Di2015NewLine            db.SaveChanges();Di2015NewLine            return RedirectToAction("Index");Di2015NewLine        }Di2015NewLine        return View(image);Di2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // GET: /JBI/Image/Delete/5Di2015NewLineDi2015NewLine    public ActionResult Delete(int id)Di2015NewLine    {Di2015NewLine        Image image = db.Image.Find(id);Di2015NewLine        return View(image);Di2015NewLine    }Di2015NewLineDi2015NewLine    //Di2015NewLine    // POST: /JBI/Image/Delete/5Di2015NewLineDi2015NewLine    [HttpPost, ActionName("Delete")]Di2015NewLine    public ActionResult DeleteConfirmed(int id)Di2015NewLine    {            Di2015NewLine        Image image = db.Image.Find(id);Di2015NewLine        db.Image.Remove(image);Di2015NewLine        db.SaveChanges();Di2015NewLine        return RedirectToAction("Index");Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        db.Dispose();Di2015NewLine        base.Dispose(disposing);Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
11714997Di2015UniqueSeparator@model List<JustAdminIt.Areas.JBI.ViewModels.ImageViewModel>Di2015NewLineDi2015NewLine@{Di2015NewLineViewBag.Title = "Index";Di2015NewLine}Di2015NewLineDi2015NewLine<h2>Index</h2>Di2015NewLineDi2015NewLine<p>Di2015NewLine@Html.ActionLink("Create New", "Create")Di2015NewLine</p>Di2015NewLine<table>Di2015NewLine<tr>Di2015NewLine    <th>Di2015NewLine        Image TitleDi2015NewLine    </th>Di2015NewLine    <th>Di2015NewLine        Image ExcerptDi2015NewLine    </th>Di2015NewLine    <th>Di2015NewLine        Image DescriptionDi2015NewLine    </th>Di2015NewLine    <th>Di2015NewLine        Image Di2015NewLine    </th>Di2015NewLine    <th>Di2015NewLine       Product IDDi2015NewLine    </th>Di2015NewLine    <th></th>Di2015NewLine</tr>Di2015NewLineDi2015NewLine@foreach (var item in Model) {Di2015NewLineDi2015NewLine<tr>Di2015NewLine    <td>Di2015NewLine        @Html.DisplayFor(modelItem => item.Image.imageTitle)Di2015NewLine    </td>Di2015NewLine    <td>Di2015NewLine        @Html.DisplayFor(modelItem => item.Image.imageExcerpt)Di2015NewLine    </td>Di2015NewLine    <td>Di2015NewLine        @Html.DisplayFor(modelItem => item.Image.imageDescription)Di2015NewLine    </td>Di2015NewLine    <td>Di2015NewLine        <img src="@Url.Content("~/Content/images/product/")@Html.DisplayFor(modelItem => item.Image.imageURL)" alt="Product Image" width="150" />Di2015NewLine    </td>Di2015NewLine    <td>Di2015NewLine        @Html.DisplayFor(modelItem => item.Product.productName)Di2015NewLine    </td>Di2015NewLineDi2015NewLine    <td>Di2015NewLine        @Html.ActionLink("Edit", "Edit", new { id = item.Image.imageID }) |Di2015NewLine        @Html.ActionLink("Details", "Details", new { id = item.Image.imageID }) |Di2015NewLine        @Html.ActionLink("Delete", "Delete", new { id = item.Image.imageID })Di2015NewLine    </td>Di2015NewLine</tr>Di2015NewLine}Di2015NewLineDi2015NewLine</table>Di2015NewLine
11715110Di2015UniqueSeparatordecimal
11715110Di2015UniqueSeparator/day
11715110Di2015UniqueSeparator    string str = "25000/day";Di2015NewLine    string[] tempArray = str.Split('/');Di2015NewLine    double number = 0;Di2015NewLine    if(double.TryParse(tempArray[0],out number))Di2015NewLine    {Di2015NewLine        Console.WriteLine("Invalid Number");Di2015NewLine    }Di2015NewLine    Console.WriteLine(number.ToString("###,###.#######") + "/" + tempArray[1]);Di2015NewLine
11715181Di2015UniqueSeparatorVERIFIED
11715181Di2015UniqueSeparator&cmd=_notify-validate
11715377Di2015UniqueSeparator   Excel.Application XlApp = null;Di2015NewLine        Excel.Workbook workbook = null;Di2015NewLine        Excel.Worksheet Ws = null;Di2015NewLine        Excel.Range Range1 = null;Di2015NewLine        Excel.Worksheet X = null;Di2015NewLineDi2015NewLine        XlApp = new Excel.Application();Di2015NewLine        XlApp.Visible = true;Di2015NewLine        workbook = XlApp.Workbooks.Add(XlWBATemplate.xlWBATWorksheet);Di2015NewLine        Ws = (Excel.Worksheet)workbook.Worksheets[1];Di2015NewLine        XlApp.WindowState = XlWindowState.xlMaximized;Di2015NewLineDi2015NewLineDi2015NewLine                Ws = (Excel.Worksheet)workbook.Worksheets[1];Di2015NewLineDi2015NewLine                Ws.Activate();Di2015NewLine                Ws.Name = "MyFirstSheet";Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine              int rowIndex = 1; int columnIndex = 2;Di2015NewLine               xlApp.Cells(rowIndex, columnIndex) = "Blah"Di2015NewLine
11715514Di2015UniqueSeparatorDictionary
11715514Di2015UniqueSeparatorXmlDocument
11715514Di2015UniqueSeparatorvar keyValues = new Dictionary<string, string>();Di2015NewLineDi2015NewLinevar document = new XmlDocument();Di2015NewLinedocument.LoadXml(stringXml);Di2015NewLineforeach (XmlNode node in document.SelectNodes(@"//Field"))Di2015NewLine{Di2015NewLine    keyValues.Add(node.Attributes["Name"].InnerText, Di2015NewLine                  node.InnerText);Di2015NewLine}Di2015NewLine
11715559Di2015UniqueSeparator private List<stations> StationNameList()Di2015NewLine  {Di2015NewLine    using (testEntities Setupctx = new testEntities())Di2015NewLine    {Di2015NewLine        return Setupctx.stations.OrderBy(s => s.Station1).ToList();Di2015NewLine    }Di2015NewLine  }Di2015NewLine
11715559Di2015UniqueSeparatorcbStation.DataSource =StationNameList() ;Di2015NewLinecbStation.DataTextField = "Station1";//it is text field that you want to displayDi2015NewLinecbStation.DataValueField = "idstations";//it is value field of combo boxDi2015NewLinecbStation.DataBind();Di2015NewLine
11715559Di2015UniqueSeparator TS.stationID = cbStation.SelectedValue;Di2015NewLine
11715705Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Xml;Di2015NewLineDi2015NewLinenamespace XmlReadingDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //Create an instance of the XmlTextReader and call Read method to read the file            Di2015NewLine            XmlTextReader textReader = new XmlTextReader("D:\\\\myxml.xml");Di2015NewLine            textReader.Read();Di2015NewLineDi2015NewLine            XmlDocument xmlDoc = new XmlDocument();Di2015NewLine            xmlDoc.Load(textReader);Di2015NewLineDi2015NewLine            XmlNodeList BCode = xmlDoc.GetElementsByTagName("Brandcode");Di2015NewLine            XmlNodeList BName = xmlDoc.GetElementsByTagName("Brandname");Di2015NewLine            for (int i = 0; i < BCode.Count; i++)Di2015NewLine            {Di2015NewLine                if (BCode[i].InnerText == "001")Di2015NewLine                    Console.WriteLine(BName[i].InnerText);                Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11715785Di2015UniqueSeparatorFormatter = "function() { return 'Electricity <b>'+ this.point.value +'</b> units'; }"Di2015NewLine
11715785Di2015UniqueSeparatorHighcharts chart = new Highcharts("ColumnChart")Di2015NewLine            .InitChart(new Chart { DefaultSeriesType = ChartTypes.Column })Di2015NewLine            .SetTitle(new Title { Text = "Monthly Average Rainfall" })Di2015NewLine            .SetSubtitle(new Subtitle { Text = "Source: WorldClimate.com" })Di2015NewLine            .SetXAxis(new XAxis { Categories = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" } })Di2015NewLine            .SetYAxis(new YAxisDi2015NewLine                      {Di2015NewLine                          Min = 0,Di2015NewLine                          Title = new YAxisTitle { Text = "Rainfall (mm)" }Di2015NewLine                      })Di2015NewLine            .SetLegend(new LegendDi2015NewLine                       {Di2015NewLine                           Layout = Layouts.Vertical,Di2015NewLine                           Align = HorizontalAligns.Left,Di2015NewLine                           VerticalAlign = VerticalAligns.Top,Di2015NewLine                           X = 100,Di2015NewLine                           Y = 70,Di2015NewLine                           Floating = true,Di2015NewLine                           BackgroundColor = ColorTranslator.FromHtml("#FFFFFF"),Di2015NewLine                           Shadow = trueDi2015NewLine                       })Di2015NewLine            .SetTooltip(new Tooltip { Formatter = @"function() { return ''+ this.x +': '+ this.y +' mm'; }" })Di2015NewLine            .SetPlotOptions(new PlotOptionsDi2015NewLine                            {Di2015NewLine                                Column = new PlotOptionsColumnDi2015NewLine                                         {Di2015NewLine                                             PointPadding = 0.2,Di2015NewLine                                             BorderWidth = 0Di2015NewLine                                         }Di2015NewLine                            })Di2015NewLine            .SetSeries(new[]Di2015NewLine                       {Di2015NewLine                           new Series { Name = "Tokyo", Data = new Data(new object[] { 49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4 }) },Di2015NewLine                           new Series { Name = "London", Data = new Data(new object[] { 48.9, 38.8, 39.3, 41.4, 47.0, 48.3, 59.0, 59.6, 52.4, 65.2, 59.3, 51.2 }) },Di2015NewLine                           new Series { Name = "New York", Data = new Data(new object[] { 83.6, 78.8, 98.5, 93.4, 106.0, 84.5, 105.0, 104.3, 91.2, 83.5, 106.6, 92.3 }) },Di2015NewLine                           new Series { Name = "Berlin", Data = new Data(new object[] { 42.4, 33.2, 34.5, 39.7, 52.6, 75.5, 57.4, 60.4, 47.6, 39.1, 46.8, 51.1 }) }Di2015NewLine                       });Di2015NewLineDi2015NewLine        return View(chart);Di2015NewLine
11715925Di2015UniqueSeparatorString.PadLeft
11715925Di2015UniqueSeparatormyInteger.ToString().PadLeft(3, '0')
11715925Di2015UniqueSeparator"0"
11715925Di2015UniqueSeparatormyInteger.ToString("000")
11715925Di2015UniqueSeparator"0x31 0x32 0x33"
11715925Di2015UniqueSeparatorString.Join(" ",myInteger.ToString().PadLeft(3,'0').Select(x=>String.Format("0x{0:X}",(int)x))Di2015NewLine
11715925Di2015UniqueSeparatorToString()
11715925Di2015UniqueSeparator123
11715925Di2015UniqueSeparator"123"
11715925Di2015UniqueSeparatorPadLeft(3,'0')
11715925Di2015UniqueSeparator0
11715925Di2015UniqueSeparatorchar
11715925Di2015UniqueSeparator.Select
11715925Di2015UniqueSeparator0x
11715925Di2015UniqueSeparatorchar
11715925Di2015UniqueSeparatorint
11715925Di2015UniqueSeparatorString.Join(" ", ...)
11715938Di2015UniqueSeparator    @using (Html.BeginForm("ACTION NAME", "CONTROLLER NAME"))Di2015NewLine    {Di2015NewLine        <select name="select">Di2015NewLine            <option value="username" selected>User name</option>Di2015NewLine            <option value="userid">User id</option>Di2015NewLine        </select>Di2015NewLine        <input type="submit" />Di2015NewLine    }Di2015NewLine
11715938Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult ACTIONNAME(string select)Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
11715938Di2015UniqueSeparatorACTION NAME
11715938Di2015UniqueSeparatorCONTROLLER NAME
11715938Di2015UniqueSeparatorBeginForm
11715938Di2015UniqueSeparatorselect
11715938Di2015UniqueSeparatorname
11715938Di2015UniqueSeparatorselected
11715976Di2015UniqueSeparatorvar result = from article in db.Entities.Articles Di2015NewLine    let lastPrice = (from sale in article.Sales Di2015NewLine                     orderby sale.Date descending Di2015NewLine                     select sale.Price).FirstOrDefault()Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        article.ID_ART,Di2015NewLine        article.Designation,Di2015NewLine        article.BuyPrice,Di2015NewLine        article.SellPrice,Di2015NewLine        LastPrice = lastPrice ==0 ? article.BuyPrice : lastPriceDi2015NewLine    }Di2015NewLine
11716011Di2015UniqueSeparatordocument.getElementById('ctl00_CphMaster_' + btnSearch).click();
11716011Di2015UniqueSeparatordocument.getElementById('<%= btnSearch.ClientID %>').click();
11716011Di2015UniqueSeparator$("#txtSearch").keyup(function(event){Di2015NewLine    if(event.keyCode == 13){Di2015NewLine        $("#btnSearch").click();Di2015NewLine    }Di2015NewLine});Di2015NewLine
11716011Di2015UniqueSeparator<asp:Panel ID="Panel1" runat="server" DefaultButton="btnSearch">Di2015NewLine    <asp:TextBox ID="txtSearch" MaxLength="50" runat="server" Width="420px" CssClass="txtbox"></asp:TextBox>Di2015NewLine    <asp:Button ID="btnSearch" runat="server" OnClick="btnSearch_Click" />Di2015NewLine    </asp:Panel>Di2015NewLine
11716169Di2015UniqueSeparatorinstance: Returns(instance);
11716169Di2015UniqueSeparatordelegate(Func<T>): Returns(()=>new Foo());
11716169Di2015UniqueSeparatorview.Setup(x => x.GetReference("object2")).Returns((ExplicitType)null);
11716169Di2015UniqueSeparatorview.Setup(x => x.GetReference("object2")).Returns(() => null);
11716509Di2015UniqueSeparatorvar keyCodeEntered = Di2015NewLine     (event.which) ? event.which : Di2015NewLine                 (window.event.keyCode) ? window.event.keyCode : -1;Di2015NewLineif (keyCodeEntered == 8) Di2015NewLine{Di2015NewLine     $(this).val("");Di2015NewLine     return false;Di2015NewLine }Di2015NewLine return false; }Di2015NewLine
11716546Di2015UniqueSeparatorForm.ShowDialog
11716546Di2015UniqueSeparatorForm.OnShown
11716546Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.Shown += Form1_Shown;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_Shown(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    LoginForm loginForm  = new LoginForm ();Di2015NewLineDi2015NewLine    if (loginForm.ShowDialog() == DialogResult.Ok)Di2015NewLine    {Di2015NewLine     ....Di2015NewLine    }Di2015NewLine}Di2015NewLine
11716546Di2015UniqueSeparatorProgram
11716546Di2015UniqueSeparatorLoginForm
11716546Di2015UniqueSeparator//Progrmm.csDi2015NewLineApplication.Run(new Form1());Di2015NewLineDi2015NewLine//LoginForm.csDi2015NewLinepublic partial class LoginForm : FormDi2015NewLine{Di2015NewLine    public LoginForm ()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void buttonLogin_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //check username passwordDi2015NewLine        if(texboxUser == "user" && texboxPassword == "password")Di2015NewLine        {Di2015NewLine            DialogResult = DialogResult.OK;Di2015NewLine            Close();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show("Wrong user pass");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11716559Di2015UniqueSeparatorOUTPUT
11716559Di2015UniqueSeparatorDECLARE @Customers TABLE (Di2015NewLine   CustomerID uniqueidentifier,Di2015NewLine   FirstName varchar(100),Di2015NewLine   LastName varchar(100)Di2015NewLine);Di2015NewLineDi2015NewLineINSERT dbo.Customers Di2015NewLineOUTPUT Inserted.*Di2015NewLineINTO @CustomersDi2015NewLineSELECT newsequentialid(), @FirstName, @LastName, ...;Di2015NewLine-- now you have all the values of the new row in the `@Customers` table variable.Di2015NewLine
11716559Di2015UniqueSeparatorINSERT dbo.RolesDi2015NewLineSELECTDi2015NewLine   CustomerID,Di2015NewLine   @OtherValue,Di2015NewLine   @AnotherValue,Di2015NewLine   AnyotherColumnFrom@CustomersDi2015NewLineFROM @Customers;Di2015NewLine
11716559Di2015UniqueSeparatorOUTPUT
11716559Di2015UniqueSeparatorInserted
11716559Di2015UniqueSeparatorCustomerID
11716559Di2015UniqueSeparatorDECLARE @CustomerID uniqueidentifier = newsequentialid();Di2015NewLineINSERT @Customer VALUES (@CustomerID, ...);Di2015NewLineINSERT @Roles VALUES (..., @CustomerID ...);Di2015NewLine
11716559Di2015UniqueSeparatornewsequentialid()
11716559Di2015UniqueSeparatornewid()
11716559Di2015UniqueSeparatornewid
11716559Di2015UniqueSeparatorDataReader
11716559Di2015UniqueSeparatorNextResult
11716559Di2015UniqueSeparatorNextRecordset
11716620Di2015UniqueSeparatorstring[] contentHouseOne = new string[] { "ruta100x100Red",Di2015NewLine                                          "ruta100x100Grey", Di2015NewLine                                          "ruta100x100Green", Di2015NewLine                                          "ruta100x100Yellow", Di2015NewLine                                          "ruta100x100Blue" };Di2015NewLine
11716620Di2015UniqueSeparatorwhile
11716620Di2015UniqueSeparatori
11716620Di2015UniqueSeparatorwhile (i <= 5);Di2015NewLine
11716620Di2015UniqueSeparatorcontentHouseOne
11716620Di2015UniqueSeparator(i < 5)
11716710Di2015UniqueSeparatornull
11716710Di2015UniqueSeparatorDBNull.Value
11716710Di2015UniqueSeparatornull
11716710Di2015UniqueSeparatorSystem.Nullable
11716710Di2015UniqueSeparatorValue
11716710Di2015UniqueSeparatornull
11716730Di2015UniqueSeparatorprivate void RichTextBox_GotFocus(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    Dispatcher.BeginInvoke(new Action(UpdateTextBoxCaretPosition));Di2015NewLine}Di2015NewLineDi2015NewLinevoid UpdateTextBoxCaretPosition()Di2015NewLine{Di2015NewLine    var textRange = new TextRange(rtfBox.Document.ContentStart, rtfBox.CaretPosition);Di2015NewLine    plainTextBox.Focus();Di2015NewLine    plainTextBox.CaretIndex = textRange.Text.Length;Di2015NewLine}Di2015NewLine
11716895Di2015UniqueSeparator    public void DoMagic(Label label, TextBox textBox)Di2015NewLine    {Di2015NewLine        //...Di2015NewLine    }Di2015NewLine
11716895Di2015UniqueSeparator        foreach (Control currentControl in this.Controls)Di2015NewLine        {Di2015NewLine            if (currentControl is PictureBox)Di2015NewLine            {Di2015NewLine                if (((PictureBox)currentControl).Tag.ToString().Equals("accept"))Di2015NewLine                {Di2015NewLine                    string controlId = currentControl.Name.Remove(0, 11);Di2015NewLine                    string labelName = string.Concat("lbl_roomid", controlId);Di2015NewLine                    string txtName = string.Concat("txt_sdate", controlId);Di2015NewLineDi2015NewLine                    this.DoMagic(this.Controls.Find(labelName, true)[0] as Label, this.Controls.Find(txtName, true)[0] as TextBox);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11716937Di2015UniqueSeparatorCaliburn.Micro.Autofac
11716937Di2015UniqueSeparatorAutofac (>= 2.6.1.841)
11716937Di2015UniqueSeparatorAutofac (2.6.3.862)
11716937Di2015UniqueSeparatorCaliburn.Micro.Autofac
11716937Di2015UniqueSeparator2.6.1.841
11716937Di2015UniqueSeparatorPM> Install-Package Caliburn.MicroDi2015NewLineSuccessfully installed 'Caliburn.Micro 1.3.1'.Di2015NewLineDi2015NewLinePM> Install-Package Autofac -Version 2.6.1.841Di2015NewLineSuccessfully installed 'Autofac 2.6.1.841'.Di2015NewLineDi2015NewLinePM> Install-Package Caliburn.Micro.Autofac -IgnoreDependenciesDi2015NewLineSuccessfully installed 'Caliburn.Micro.Autofac 1.4.1'.Di2015NewLine
11716937Di2015UniqueSeparatorCaliburn.Micro.Autofac
11716937Di2015UniqueSeparatorvar bootstrapper = new Bootstrapper();
11716937Di2015UniqueSeparatorTargetInvocationException
11716937Di2015UniqueSeparatornew Bootstrapper()
11716967Di2015UniqueSeparatorvar xmlStr = @"<UserID>Di2015NewLine  <Total>2</Total>Di2015NewLine  <X1>2</X1>Di2015NewLine  <Y1>4</Y1>Di2015NewLine  <Attached1>2,3,4</Attached1>Di2015NewLine  <X2>7</X2>Di2015NewLine  <Y2>8</Y2>Di2015NewLine  <Attached2>4,5,6</Attached2>Di2015NewLine</UserID>Di2015NewLine";Di2015NewLinevar doc = XDocument.Parse(xmlStr);Di2015NewLinevar users =Di2015NewLine    from user in doc.Descendants("UserID")Di2015NewLine    let total = (int)user.Element("Total")Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        X = Enumerable.Range(1, total)Di2015NewLine                      .Select(i => (int)user.Element("X" + i))Di2015NewLine                      .ToArray(),Di2015NewLine        Y = Enumerable.Range(1, total)Di2015NewLine                      .Select(i => (int)user.Element("Y" + i))Di2015NewLine                      .ToArray(),Di2015NewLine        Attached = Enumerable.Range(1, total)Di2015NewLine                             .Select(i => (string)user.Element("Attached" + i))Di2015NewLine                             .ToArray(),Di2015NewLine    };Di2015NewLine
11716999Di2015UniqueSeparatorActivator.CreateInstance(Type.GetType(strNamespace + strType))Di2015NewLine
11716999Di2015UniqueSeparatorActivator.CreateInstance(strNamespace, strType)Di2015NewLine
11717107Di2015UniqueSeparator[XMLArray("Users")]Di2015NewLinepublic class UserDi2015NewLine{Di2015NewLine    [XmlIgnore]Di2015NewLine    public bool? m_copy;Di2015NewLineDi2015NewLine    [XmlAttribute("copy")]Di2015NewLine    public string copyDi2015NewLine    {Di2015NewLine        get { return (m_copy.HasValue) ? m_copy.ToString() : null; }Di2015NewLine        set { m_copy = !string.IsNullOrEmpty(value) ? bool.Parse(value) : default(bool?); }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11717136Di2015UniqueSeparatorpublic class MyEntities : NerdDinnerEntitiesDi2015NewLine{Di2015NewLine  public MyEntities() : base(GetConnectionString())Di2015NewLine  {Di2015NewLine  }Di2015NewLineDi2015NewLine  private string GetConnectionString()Di2015NewLine  {Di2015NewLine    var connectionString = System.Configuration.ConfigurationManager.Di2015NewLine        ConnectionStrings["connectionStringName"].ConnectionString;Di2015NewLine    var builder = new System.Data.Common.DbConnectionStringBuilder();Di2015NewLine    builder.ConnectionString = connectionString;Di2015NewLine    var internalConnectionString = builder["provider connection string"].ToString();Di2015NewLine    var newConnectionString = internalConnectionString.Replace("oldDBName", "newDBName");Di2015NewLine    builder["provider connection string"] = newConnectionString;Di2015NewLine    return builder.ConnectionString;Di2015NewLine  }Di2015NewLine}Di2015NewLine
11717137Di2015UniqueSeparatorushort
11717137Di2015UniqueSeparatorUInt16
11717137Di2015UniqueSeparatorint
11717137Di2015UniqueSeparatorInt32
11717137Di2015UniqueSeparator:
11717137Di2015UniqueSeparator123.45.67.89:80
11717137Di2015UniqueSeparatorStart >> Run...
11717137Di2015UniqueSeparatorcmd
11717137Di2015UniqueSeparatoripconfig
11717137Di2015UniqueSeparatorWireless LAN adapter Wireless Network Connection
11717137Di2015UniqueSeparatorLAN
11717137Di2015UniqueSeparatorMedia State . . . . . . . . . . . : Media disconnected
11717137Di2015UniqueSeparatorIPv4 Address. . . . . . . . . . . :
11717137Di2015UniqueSeparatorconst int Port = 8500;Di2015NewLine
11717137Di2015UniqueSeparatortcpClient.Connect(ipAddress, Port)Di2015NewLine
11717137Di2015UniqueSeparatorTcpListener tcpListener =  new TcpListener(ipAddress, Port);   Di2015NewLine
11717250Di2015UniqueSeparatorGridView1.Columns.Add(boundField); Di2015NewLine
11717250Di2015UniqueSeparatorGridView1.Columns.Insert(0, boundField);Di2015NewLine
11717301Di2015UniqueSeparatorExpression
11717301Di2015UniqueSeparatorGetDelegate<Func<double,double,double>>("Add")
11717301Di2015UniqueSeparatorArgumentList
11717301Di2015UniqueSeparator()
11717301Di2015UniqueSeparatorExpression
11717301Di2015UniqueSeparatorinnerInvocation
11717301Di2015UniqueSeparatorvar code = "GetDelegate<Func<double,double,double>>(\\"Add\\")()";Di2015NewLinevar outerInvocation = (InvocationExpressionSyntax)Syntax.ParseExpression(code);Di2015NewLinevar innerInvocation = (InvocationExpressionSyntax)outerInvocation.Expression;Di2015NewLine
11717301Di2015UniqueSeparatorReplace()
11717301Di2015UniqueSeparatorvar compilationUnit = â€¦;Di2015NewLineDi2015NewLine// or some other code to locate the invocationDi2015NewLinevar outerInvocation = compilationUnit.DescendantNodes()Di2015NewLine                                     .OfType<InvocationExpressionSyntax>()Di2015NewLine                                     .First();Di2015NewLinevar innerInvocation = (InvocationExpressionSyntax)outerInvocation.Expression;Di2015NewLineDi2015NewLinevar newCompilationUnit = compilationUnit.ReplaceNode(Di2015NewLine    outerInvocation, innerInvocation);Di2015NewLine
11717408Di2015UniqueSeparator"Validate_ErrorNotificationMessageHeader"Di2015NewLine
11717408Di2015UniqueSeparatorInfragistics.Win.Misc
11717408Di2015UniqueSeparatorResourceCustomizer rc = Infragistics.Win.Misc.Resources.Customizer;Di2015NewLinerc.SetCustomizedString("Validate_ErrorNotificationMessageHeader", "Your message here");Di2015NewLine
11717408Di2015UniqueSeparatorGlobalAppUtility.SetInfragisticsResourceStrings()
11717411Di2015UniqueSeparatorpublic int OnProgressBarChanged()
11717411Di2015UniqueSeparatorpublic void OnProgressBarChanged(object o, EventArgs e);Di2015NewLine
11717462Di2015UniqueSeparatorClear
11717487Di2015UniqueSeparator[ProtoContract(IgnoreListHandling = true)]Di2015NewLinepublic class PartCollection : List<Part>Di2015NewLine{Di2015NewLine    public Whole Whole { get; set; }Di2015NewLine}Di2015NewLine
11717487Di2015UniqueSeparatorPartCollection
11717487Di2015UniqueSeparatorWhole
11717487Di2015UniqueSeparator[ProtoContract]Di2015NewLinepublic class PartCollectionSurrogateDi2015NewLine{Di2015NewLine    [ProtoMember(1)]Di2015NewLine    private List<Part> Collection { get; set; }Di2015NewLineDi2015NewLine    [ProtoMember(2, AsReference = true)]Di2015NewLine    private Whole Whole { get; set; }Di2015NewLineDi2015NewLine    public static implicit operator PartCollectionSurrogate(PartCollection value)Di2015NewLine    {Di2015NewLine        if (value == null) return null;Di2015NewLine        return new PartCollectionSurrogate { Collection = value, Whole = value.Whole };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator PartCollection(PartCollectionSurrogate value)Di2015NewLine    {Di2015NewLine        if (value == null) return null;Di2015NewLineDi2015NewLine        PartCollection result = new PartCollection {Whole = value.Whole};Di2015NewLine        if(value.Collection != null)Di2015NewLine        { // add the data we colatedDi2015NewLine            result.AddRange(value.Collection);Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11717487Di2015UniqueSeparatorassemblage.Parts[0]
11717487Di2015UniqueSeparatorwhole.Parts[0]
11717487Di2015UniqueSeparatorassemblage
11717487Di2015UniqueSeparatorwhole
11717487Di2015UniqueSeparatorPart
11717487Di2015UniqueSeparatorWhole
11717487Di2015UniqueSeparatorAssert.AreSame(assemblage.Parts[0].Whole, whole.Parts[0].Whole, "Whole");Di2015NewLine
11717487Di2015UniqueSeparatorPart
11717487Di2015UniqueSeparatorAsReference
11717487Di2015UniqueSeparator        [ProtoMember(1, AsReference = true)]Di2015NewLine        private List<Part> Collection { get; set; }Di2015NewLine
11717487Di2015UniqueSeparatorAssert.AreSame(assemblage.Parts[0].Whole, whole.Parts[0].Whole, "Whole");Di2015NewLineAssert.AreSame(assemblage.Parts[0], whole.Parts[0], "Part");Di2015NewLine
11717687Di2015UniqueSeparatorpath="/home/facebookredirect.axd"Di2015NewLine
11717687Di2015UniqueSeparatorpath="home/facebookredirect.axd"Di2015NewLine
11717687Di2015UniqueSeparatorroutes.IgnoreRoute("home/{resource}.axd");Di2015NewLine
11717737Di2015UniqueSeparatorType dictType = typeof(Dictionary<, >).MakeGenericType(Type1, Type2);Di2015NewLinevar dict = Activator.CreateInstance(dictType);Di2015NewLine
11717737Di2015UniqueSeparatorDictionary
11717737Di2015UniqueSeparatorMakeGenericType
11717737Di2015UniqueSeparatorActivator.CreateInstance
11717784Di2015UniqueSeparatorpublic PersonDetailsViewModelDi2015NewLine{Di2015NewLine  public Person SelectedPerson {get;set;}Di2015NewLine  public ObservableCollection<TypeList> GenderList {get;set;}Di2015NewLine}Di2015NewLine
11717784Di2015UniqueSeparatorDataContext
11717863Di2015UniqueSeparatorSomeCommand x = new ICommand<>();Di2015NewLine
11717863Di2015UniqueSeparatorICommand<> x = new SomeCommand(); Di2015NewLine
11717863Di2015UniqueSeparatorkernel.Bind(x => x.FromThisAssembly()Di2015NewLine                  .SelectAllClasses().InheritedFrom(typeof(ICommandHandler<>))Di2015NewLine                  .BindAllInterfaces());Di2015NewLine
11717885Di2015UniqueSeparatorstring s = "MONEY-ID123456:MONEY-STAT43:MONEY-PAYetr-1232832938";Di2015NewLine            Regex regex = new Regex(@"MONEY-ID(?<moneyId>.*?)\\:MONEY-STAT(?<moneyStat>.*?)\\:MONEY-PAYetr-(?<moneyPaetr>.*?)$"); Match match = regex.Match(s);       Di2015NewLine            if (match.Success)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Money ID: " + match.Groups["moneyId"].Value);Di2015NewLineDi2015NewLineDi2015NewLine                Console.WriteLine("Money Stat: " + match.Groups["moneyStat"].Value);Di2015NewLine                Console.WriteLine("Money Paetr: " + match.Groups["moneyPaetr"].Value);Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine("hit <enter>");Di2015NewLine            Console.ReadLine();Di2015NewLine
11717885Di2015UniqueSeparatorstring s = "MONEY-ID123456:MONEY-STAT43:MONEY-PAYetr-1232832938";Di2015NewLine        var itemsToExtract = new List<string> { "MONEY-STAT", "MONEY-PAYetr-", "MONEY-ID", };Di2015NewLineDi2015NewLine        string regexFormat = @"{0}(?<{1}>[\\d]*?)[^\\w]";//sample - MONEY-ID(?<moneyId>.*?)\\:Di2015NewLine        foreach (var item in itemsToExtract)Di2015NewLine        {Di2015NewLine            string input = s + ":";// quick barbarian fix of lack of my knowledge of regex. SorryDi2015NewLine            var match = Regex.Match(input, string.Format(regexFormat, item, "match"));Di2015NewLine            if (match.Success)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Value of {0} is:{1}", item, match.Groups["match"]);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("hit <enter>");Di2015NewLine        Console.ReadLine();Di2015NewLine
11718084Di2015UniqueSeparator<asp:buttonfield buttontype="Link" commandname="Add" text="Add"/>Di2015NewLine
11718084Di2015UniqueSeparatorvoid GridView_RowCommand(Object sender, GridViewCommandEventArgs e)Di2015NewLine{Di2015NewLine        if(e.CommandName=="Add")Di2015NewLine        {Di2015NewLine           int index = Convert.ToInt32(e.CommandArgument);Di2015NewLineDi2015NewLine           GridViewRow row = ContactsGridView.Rows[index];Di2015NewLineDi2015NewLineDi2015NewLine           Session["YourKey"] = ...;Di2015NewLine        } Di2015NewLineDi2015NewLine}Di2015NewLine
11718240Di2015UniqueSeparator<a href="page.html" target="_blank">link</a>
11718240Di2015UniqueSeparatortarget="myWindow"
11718240Di2015UniqueSeparatorProcess.Start
11718315Di2015UniqueSeparator        string test = "1234";Di2015NewLine        string startTime = test.Substring(0, 2);Di2015NewLine        string Endtime = test.Substring(test.Length - 2);Di2015NewLine        string NewTime = startTime + ":" + Endtime;Di2015NewLine
11718465Di2015UniqueSeparatorvar query = tADi2015NewLine    .Where(a => a.cAuthorizedStatus == "Pending")Di2015NewLine    .Join(tB, a => a.nGroupCode, b => b.nGroupCode, (a, b) => new Di2015NewLine    { Di2015NewLine        cSubGroupName = a.cSubGroupName, Di2015NewLine        cAddedBy = a.cAddedBy, Di2015NewLine        dAddedOn = a.dAddedOn, Di2015NewLine        cGroupName = b.cGroupName Di2015NewLine    });Di2015NewLine
11718465Di2015UniqueSeparatorvar query = tADi2015NewLine    .Join(tB, a => a.nGroupCode, b => b.nGroupCode, (a, b) => new Di2015NewLine    { Di2015NewLine        cSubGroupName = a.cSubGroupName, Di2015NewLine        cAddedBy = a.cAddedBy, Di2015NewLine        dAddedOn = a.dAddedOn, Di2015NewLine        cGroupName = b.cGroupName,Di2015NewLine        cAuthorizedStatus = a.cAuthorizedStatusDi2015NewLine    })Di2015NewLine    .Where(j => j.cAuthorizedStatus == "Pending")Di2015NewLine    .Select(j => newDi2015NewLine    { Di2015NewLine        cSubGroupName = j.cSubGroupName, Di2015NewLine        cAddedBy = j.cAddedBy, Di2015NewLine        dAddedOn = j.dAddedOn, Di2015NewLine        cGroupName = j.cGroupNameDi2015NewLine    });Di2015NewLine
11718465Di2015UniqueSeparatorcAuthorizedStatus
11718474Di2015UniqueSeparatorSqlConnectionStringBuilder
11718639Di2015UniqueSeparatorpublic static Task<T> WaitFor<T>(this IObservable<T> source, Func<T, bool> pred)Di2015NewLine{Di2015NewLine    returnDi2015NewLine        sourceDi2015NewLine            .Where(pred)Di2015NewLine            .DistinctUntilChanged()Di2015NewLine            .Take(1)Di2015NewLine            .ToTask();Di2015NewLine}Di2015NewLine
11718639Di2015UniqueSeparator.ToTask()
11718639Di2015UniqueSeparatorTaskCompletionSource
11718639Di2015UniqueSeparatorSystem.Reactive.Threading.Tasks
11718639Di2015UniqueSeparator.ToTask()
11718639Di2015UniqueSeparatorDistinctUntilChanged
11718639Di2015UniqueSeparatorvar t = xs.WaitFor(x => x > 10);Di2015NewLine
11718639Di2015UniqueSeparatorvar t = xs.Where(x => x > 10).Take(1).ToTask();Di2015NewLine
11718639Di2015UniqueSeparatorWaitFor
11718639Di2015UniqueSeparatorWaitFor
11718639Di2015UniqueSeparatorTakeOneAsTaskWhere
11718639Di2015UniqueSeparatorvar t = xs.TakeOneAsTaskWhere(x => x > 10);Di2015NewLine
11718714Di2015UniqueSeparatorEventArgs
11718714Di2015UniqueSeparatorEventArgs
11718714Di2015UniqueSeparatorenum
11718714Di2015UniqueSeparatorif (Going_in != null)Di2015NewLine{Di2015NewLine   CustomEventArgs cea = new CustomEventArgs();Di2015NewLine   cea.Type = Type.Decrement;Di2015NewLine   Going_in(this, cea);Di2015NewLine}Di2015NewLine
11718714Di2015UniqueSeparatorvoid ProgressBar_DoProgress(object sender, CustomEventArgs e)Di2015NewLine {Di2015NewLine    if(e.Type == Type.Increment)Di2015NewLine       progressBar1.Value++;Di2015NewLineDi2015NewLine    if(e.Type == Type.Decrement)Di2015NewLine       progressBar1.Value--;Di2015NewLine }Di2015NewLine
11718729Di2015UniqueSeparatorstring[] list = b.Split(new string[] { "ab" }, StringSplitOptions.None);Di2015NewLine
11718734Di2015UniqueSeparatorBinding.Source
11718734Di2015UniqueSeparatorDataSourceProviders
11718734Di2015UniqueSeparatorDataSourceProvider
11718734Di2015UniqueSeparatorDataSourceProvider
11718785Di2015UniqueSeparatorpublic void SaveToFile(string filePath)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        string newFilePath = filePath.Replace(".bin", "");Di2015NewLine        filestream = new FileStream(newFilePath + ".bin", FileMode.Create);Di2015NewLine        BinaryFormatter b = new BinaryFormatter();Di2015NewLine        b.Serialize(filestream, animals);Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine        if (filestream != null) filestream.Close();Di2015NewLine        throw;Di2015NewLine        // but don't useDi2015NewLine        // throw ex;Di2015NewLine        // it throws everything sameDi2015NewLine        // except for the stacktraceDi2015NewLine    }Di2015NewLine    // or do it like thisDi2015NewLine    //catch(Exception ex)Di2015NewLine    //{Di2015NewLine    //    throw;Di2015NewLine        // but don't useDi2015NewLine        // throw ex;Di2015NewLine        // it throws everything sameDi2015NewLine        // except for the stacktraceDi2015NewLine    //}Di2015NewLine    //finallyDi2015NewLine    //{Di2015NewLine    //    if (filestream != null) filestream.Close();Di2015NewLine    //}Di2015NewLineDi2015NewLine}Di2015NewLine
11718785Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    motelManager.SaveToFile(file);Di2015NewLine}Di2015NewLinecatch (Exception e)Di2015NewLine{Di2015NewLine    MessageBox.Show("Ett fel uppstod!", "Varning!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine}Di2015NewLine
11718806Di2015UniqueSeparatorRadGrid.DataBind();
11718806Di2015UniqueSeparatorRadTextBox.TextChanged
11718806Di2015UniqueSeparatorItemDataBound
11718897Di2015UniqueSeparatorvar uniqueArea =searchresult.Select(m => m.HotelArea).Where(m => !string.IsNullOrEmpty(m)).Distinct();Di2015NewLine
11719042Di2015UniqueSeparator#ifdef CLIEXPORTDi2015NewLine#define valueDi2015NewLine#endifDi2015NewLineDi2015NewLineCLIEXPORT struct MyCStructDi2015NewLine{Di2015NewLine    unsigned long A;Di2015NewLine    unsigned long B;Di2015NewLine    unsigned long C;Di2015NewLine};Di2015NewLine
11719058Di2015UniqueSeparatorqueryString.Append(string.Format(" Table.Column LIKE '%{0}%' ", ListOfValues[0]));Di2015NewLine
11719058Di2015UniqueSeparatorcommand.Parameters.AddWithValue("@ParamX","%" + value + "%");Di2015NewLine
11719136Di2015UniqueSeparatorTimeSpan.ParseExact(tmp, "hh\\\\:mm\\\\:ss", CultureInfo.InvariantCulture)Di2015NewLine
11719192Di2015UniqueSeparator<toolkit:DataGridTemplateColumn Header="Timer" Width="50">Di2015NewLine                <toolkit:DataGridTemplateColumn.CellTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <Button Content="Start" Click="Button_Click" CommandParameter="{Binding}" />Di2015NewLine                    </DataTemplate>Di2015NewLine                </toolkit:DataGridTemplateColumn.CellTemplate>Di2015NewLine            </toolkit:DataGridTemplateColumn>Di2015NewLine
11719243Di2015UniqueSeparatorXApplication[] appList = (from xapp in applicationXml.Elements("category").Elements("app")Di2015NewLine                           where xapp.Element("name").Value.ToLower().Contains(txtSearch.Text.ToLower())Di2015NewLine                           select new XApplicationDi2015NewLine                           {Di2015NewLine                                Name = xapp.Element("name").Value,Di2015NewLine                                Category = xapp.Parent.Attribute("cat").ValueDi2015NewLineDi2015NewLine                           }).ToArray();Di2015NewLine
11719300Di2015UniqueSeparatorvar collection = new List<KeyValuePair<string, string>>();Di2015NewLinecollection.Add(new KeyValuePair<string, string>("location", Uri.EscapeDataString(locationVal)));Di2015NewLinecollection.Add(new KeyValuePair<string, string>("url", Uri.EscapeDataString(profileUrl)));Di2015NewLine
11719300Di2015UniqueSeparator%25
11719300Di2015UniqueSeparatorOAuthCredential creds = new OAuthCredential(_consumerKey) {Di2015NewLine    CallbackUrl = "http://localhost:44444/account/auth"Di2015NewLine};Di2015NewLine
11719300Di2015UniqueSeparatorCallbackUrl
11719300Di2015UniqueSeparatorOAuthCredential creds = new OAuthCredential(_consumerKey) { Di2015NewLine    CallbackUrl = Uri.EscapeDataString("http://localhost:44444/account/auth")Di2015NewLine};Di2015NewLine
11719300Di2015UniqueSeparatorGenerateAuthHeader
11719300Di2015UniqueSeparatorCallbackUrl
11719300Di2015UniqueSeparator//don't encode it here again.Di2015NewLine//we already did that and auth header doesn't require it to be encoded twiceDi2015NewLineif (!string.IsNullOrEmpty(_oAuthState.Credential.CallbackUrl))Di2015NewLine    sortedDictionary.Add(OAuthCallback, oAuthState.Credential.CallbackUrl);Di2015NewLine
11719307Di2015UniqueSeparatorSELECT UTL_RAW.CAST_TO_RAW(UserImage) FROM UNNAMED_TABLE WHERE ...Di2015NewLine
11719307Di2015UniqueSeparatorbyte[]
11719344Di2015UniqueSeparator Regex isnumber = new Regex(@"^[0-9]+(\\.[0-9]+)?$");Di2015NewLine
11719488Di2015UniqueSeparatorGridView1.Rows[GridView1.SelectedIndex].BackColor = Color.Red
11719488Di2015UniqueSeparatorGridView1_SelectedIndexChanged
11719587Di2015UniqueSeparatorIf the UseDefaultCredentials property is set to false and the Credentials property has not been set, then mail is sent to the server anonymously.
11719623Di2015UniqueSeparator&&
11719623Di2015UniqueSeparator||
11719623Di2015UniqueSeparatorAND
11719623Di2015UniqueSeparatorOR
11719623Di2015UniqueSeparatorUNION
11719623Di2015UniqueSeparatorIEnumerable<int> scoreQuery =  from score in (scores.Union(moreScores))Di2015NewLine                               where score > 80Di2015NewLine                               select score;Di2015NewLine
11719722Di2015UniqueSeparatorvar point = SqlGeography.Point(latitude, longitude, 4326);Di2015NewLine
11719722Di2015UniqueSeparatorvar poly = point.BufferWithTolerance(radiusInMeter, 0.01, true); //0.01 is to simplify the polygon to keep only a few sidesDi2015NewLine
11719722Di2015UniqueSeparatorSqlCommand
11719722Di2015UniqueSeparatorvar param = new SqlParameter(@"Polygon", poly);Di2015NewLineparam.UdtTypeName = "Geography";Di2015NewLinecommand.Add(param);Di2015NewLine
11719745Di2015UniqueSeparatorMONEY-STAT
11719745Di2015UniqueSeparator(?:MONEY-STAT)?
11719745Di2015UniqueSeparatorMONEY-ID(?<moneyId>.*?)\\:(?:MONEY-STAT)?(?<moneyStat>.*?)\\:MONEY-PAYetr-(?<moneyPaetr>.*?)$Di2015NewLine
11719745Di2015UniqueSeparator(?: subexpression)        Defines a noncapturing group. Di2015NewLine?                         Matches the previous element zero or one time.Di2015NewLine
11719800Di2015UniqueSeparatorvar text = textBox.GetLineText(1);Di2015NewLine
11719897Di2015UniqueSeparatorProcess.GetCurrentProcess
11719897Di2015UniqueSeparatorArguments
11719897Di2015UniqueSeparatorProcessStartInfo
11719897Di2015UniqueSeparatorProcess.GetProcessById
11719992Di2015UniqueSeparatorpublic class SubGroupDi2015NewLine{Di2015NewLine    public string Name {get; set;}Di2015NewLine    public string AddedBy {get; set;}        Di2015NewLine    public DateTime AddedOn {get; set;}Di2015NewLine}Di2015NewLine
11719992Di2015UniqueSeparatorpublic IList<SubGroup> GetPendingSubGroups()Di2015NewLine    {Di2015NewLine        using(var db=new DataClasses1DataContext())Di2015NewLine        {Di2015NewLine            var pendingSubGroup = db.sys_Log_Account_SubGroups.Where(subGroup => subGroup.cAuthorizedStatus.Equals("Pending")).Join(db.sys_Account_Primary_Groups, subGroup => subGroup.nGroupCode, group => group.nGroupCode,(subGroup, group) => new SubGroupDi2015NewLine            {Di2015NewLine                Name = subGroup.cSubGroupName,Di2015NewLine                AddedBy = subGroup.cAddedBy,Di2015NewLine                AddedOn = subGroup.dAddedOn Di2015NewLine            }).ToList();  Di2015NewLine            return pendingSubGroup; Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11719992Di2015UniqueSeparator(subGroup, group) => new *SubGroup*Di2015NewLine            {Di2015NewLine                Name = subGroup.cSubGroupName,Di2015NewLine                AddedBy = subGroup.cAddedBy,Di2015NewLine                AddedOn = subGroup.dAddedOn Di2015NewLine            }).ToList();Di2015NewLine
11719995Di2015UniqueSeparatorint result = (int)Math.Ceiling(value);Di2015NewLine
11720057Di2015UniqueSeparatorBegin TryDi2015NewLine    Set NoCount OnDi2015NewLine    Set Xact_Abort OnDi2015NewLine    Begin TranDi2015NewLine        --Your QueryDi2015NewLine    Commit TranDi2015NewLineEnd TryDi2015NewLineDi2015NewLineBegin CatchDi2015NewLine    Rollback TranDi2015NewLineEnd CatchDi2015NewLine
11720057Di2015UniqueSeparatorCREATE PROCEDURE [dbo].[CreateCustomer]Di2015NewLine    @firstName nvarchar(50) = null,Di2015NewLine    @lastName nvarchar(50) = null,Di2015NewLine    @emailAddress nvarchar(50),Di2015NewLine    @contactNumber varchar(15) =null,Di2015NewLine    @street1 nvarchar(50) = null,Di2015NewLine    @street2 nvarchar(50) = null,Di2015NewLine    @city nvarchar(50) = null,Di2015NewLine    @State nvarchar(50)= null,Di2015NewLine    @Country nvarchar(50)=null,Di2015NewLine    @postalCode varchar(5) = null,Di2015NewLine    @middleName nvarchar(50),Di2015NewLine    @password nvarchar(50),Di2015NewLine    @membershipExpieryDate datetime,Di2015NewLine    @status int OUTDi2015NewLineDi2015NewLineASDi2015NewLineBEGIN TRYDi2015NewLine    Set NoCount ONDi2015NewLine    Set XAct_Abort ONDi2015NewLine    DECLARE @lastAccessed datetime = GETDATE()Di2015NewLine    DEClARE @uniqueCustomerID UNIQUEIDENTIFIER= NEWID()Di2015NewLineDi2015NewLine    BEGIN TRANSACTIONDi2015NewLine    INSERT INTO Customers(CustomerID, FirstName, LastName, EmailAddress, LastAccessed, ContactNumber, Di2015NewLine    Street1, Street2, City, State, Country, PostalCode, MiddleName, Password, MembershipExpieryDate)Di2015NewLine    VALUES(@uniqueCustomerID,@firstName, @lastName, @emailAddress, @lastAccessed, @contactNumber, @street1, @street2,Di2015NewLine    @city, @State, @Country, @postalCode, @middleName, @password, @membershipExpieryDate)Di2015NewLineDi2015NewLine    INSERT INTO Roles(CustomersCustomerID,Role) VALUES(@uniqueCustomerID,'V') Di2015NewLine    COMMITDi2015NewLineDi2015NewLine    SELECT CustomerID, FirstName, LastName, EmailAddress, LastAccessed, ContactNumber, Di2015NewLine    Street1, Street2, City, State, Country, PostalCode, MiddleName, MembershipExpieryDate FROM Customers WHERE EmailAddress = @emailAddress  Di2015NewLineDi2015NewLine    SET @status =1Di2015NewLine    COMMIT TranDi2015NewLineEND TRY Di2015NewLineBEGIN CATCHDi2015NewLine    ROLLBACK TRANSACTIONDi2015NewLine    SET @status =2Di2015NewLineEND CATCHDi2015NewLine
11720080Di2015UniqueSeparatorprivate void StartCloseTimer()Di2015NewLine{Di2015NewLine    DispatcherTimer timer = new DispatcherTimer();Di2015NewLine    timer.Interval = TimeSpan.FromSeconds(10d);Di2015NewLine    timer.Tick += TimerTick;Di2015NewLine    timer.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void TimerTick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    DispatcherTimer timer = (DispatcherTimer)sender;Di2015NewLine    timer.Stop();Di2015NewLine    timer.Tick -= TimerTick;Di2015NewLine    Close();Di2015NewLine}Di2015NewLine
11720171Di2015UniqueSeparator[access modifier?] [static?] [return type or void] [name] ([parameters?])Di2015NewLine
11720171Di2015UniqueSeparator// Anyone can call meDi2015NewLinepublic int SomeMethod() { return 1; } Di2015NewLineDi2015NewLine// Only classes in the same assembly (project) can call meDi2015NewLineinternal int SomeMethod() { return 1; } Di2015NewLineDi2015NewLine// I can only be called from within the same classDi2015NewLineprivate int SomeMethod() { return 1; }Di2015NewLineDi2015NewLine// I can only be called from within the same class, or child classesDi2015NewLineprotected int SomeMethod() { return 1; }Di2015NewLine
11720171Di2015UniqueSeparatorStatic
11720171Di2015UniqueSeparatorpublic class TestDi2015NewLine{Di2015NewLine  static int a = 0;Di2015NewLine  public int SomeMethod() { a = a + 1; return a; }Di2015NewLine}Di2015NewLineDi2015NewLineTest t1 = new Test();Di2015NewLinet1.SomeMethod(); // a is now 1Di2015NewLineTest t2 = new Test();Di2015NewLinet2.SomeMethod(); // a is now 2Di2015NewLineDi2015NewLine// If 'a' wasn't static, each Test instance would have its own 'a'Di2015NewLine
11720171Di2015UniqueSeparatorvoid
11720171Di2015UniqueSeparatorpublic void SomeMethod() Di2015NewLine{ Di2015NewLine  /* I don't need to return anything */ Di2015NewLine}Di2015NewLine
11720171Di2015UniqueSeparatorconst
11720171Di2015UniqueSeparatorconst int LIFE = 42;Di2015NewLine// You can't go LIFE = 43 nowDi2015NewLine
11720287Di2015UniqueSeparatorWindows.Form
11720287Di2015UniqueSeparatorThere are three windows used hereDi2015NewLine1. ParentFormDi2015NewLine2. OverlayFormDi2015NewLine3. ChildFormDi2015NewLine
11720287Di2015UniqueSeparator1. Create an instance of the Child form Di2015NewLine2. Create an Instance of the Overlayform, Pass the objects Instances of Child and Parent(current form) as a parameter to the ConstructorDi2015NewLine3. Then Show the OverLay Form by using  ShowDialog Method.Di2015NewLineDi2015NewLineCode:Di2015NewLineDi2015NewLinepublic partial class ParentForm : FormDi2015NewLine{Di2015NewLine    public ParentForm()Di2015NewLine    {Di2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ParentForm_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        ChildForm child1 = new ChildForm();Di2015NewLine        // Create a new form.Di2015NewLine        OverlayForm form2 = new OverlayForm(this, child1);Di2015NewLine        child1.OverLay = form2;Di2015NewLine        // Display the form as a modal dialog box.Di2015NewLine        form2.ShowDialog(this);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11720287Di2015UniqueSeparator1. In the constructor store the childForm and ParentForm object in a local variables. Di2015NewLine       And Set the The properties (like width,height) to the Overlay WindowDi2015NewLine    2. In the OverlayForm_Load show the ChildForm window.Di2015NewLineDi2015NewLinepublic partial class OverlayForm : FormDi2015NewLine{Di2015NewLine    public Form ParentForm { get; set; }Di2015NewLine    public Form child { get; set; }Di2015NewLine    public OverlayForm(Form parent, Form child)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        this.child = child;Di2015NewLine        this.ParentForm = parent;Di2015NewLineDi2015NewLine        this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;Di2015NewLine        this.ShowInTaskbar = false;Di2015NewLine        this.Width = ParentForm.Width;Di2015NewLine        this.Height = ParentForm.Height;Di2015NewLine        this.Top = ParentForm.Top;Di2015NewLine        this.Left = ParentForm.Left;Di2015NewLine        this.StartPosition = ParentForm.StartPosition;Di2015NewLine        // Set the opacity to 75%.Di2015NewLine        this.Opacity = .75;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OverlayForm_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        child.Show();Di2015NewLine        child.TopMost = true;Di2015NewLine        child.Focus();Di2015NewLine        child.BringToFront();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11720287Di2015UniqueSeparator1. Set the object of the Overlay  to a property in Child WindowDi2015NewLine2. And in the Form_Closing event of the child window, close the Overlay window.Di2015NewLineDi2015NewLinepublic partial class ChildForm : FormDi2015NewLine{Di2015NewLine    //This is set in the Parent form where the child form instatce is createdDi2015NewLine    public Form OverLay { get; set; }Di2015NewLine    public ChildForm()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ChildForm_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ChildForm_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine    {Di2015NewLine        this.OverLay.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11720299Di2015UniqueSeparator    protected void Application_BeginRequest(object sender, EventArgs e) Di2015NewLine    {}Di2015NewLine
11720299Di2015UniqueSeparator                HttpRequest currentRequest = HttpContext.Current.Request;Di2015NewLineDi2015NewLine            // Attempt to get the Forms Auth Cookie from the RequestDi2015NewLine            HttpCookie authenticationCookie = currentRequest.Cookies[FormsAuthentication.FormsCookieName];Di2015NewLineDi2015NewLine            if(authenticationCookie != null)Di2015NewLine            {Di2015NewLine                // Crack the Cookie openDi2015NewLine                var formsAuthenticationTicket = FormsAuthentication.Decrypt(authenticationCookie.Value);Di2015NewLineDi2015NewLine                // breakpoint here to see the contents of the ticket.Di2015NewLine                if (formsAuthenticationTicket.Expired)Di2015NewLine                {Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine
11720299Di2015UniqueSeparator    private static void SetImmediateExpiryOnResponse(HttpResponse response)Di2015NewLine    {Di2015NewLine        response.Cache.SetAllowResponseInBrowserHistory(false);Di2015NewLine        response.Cache.SetCacheability(HttpCacheability.NoCache);Di2015NewLine        response.Cache.SetExpires(DateTime.UtcNow.AddMinutes(-1));Di2015NewLine        response.Cache.SetNoStore();Di2015NewLine        response.Cache.SetRevalidation(HttpCacheRevalidation.AllCaches);Di2015NewLine        response.Expires = -1;Di2015NewLine        response.ExpiresAbsolute = DateTime.Now.AddDays(-1);Di2015NewLine        response.CacheControl = "no-cache";Di2015NewLine    }Di2015NewLine
11720756Di2015UniqueSeparatornull
11720756Di2015UniqueSeparatorFirstOrDefault
11720756Di2015UniqueSeparatornull
11720756Di2015UniqueSeparatorCaseOfficer
11720756Di2015UniqueSeparatorclass
11720756Di2015UniqueSeparatorCaseOfficer
11720756Di2015UniqueSeparatorstruct
11720756Di2015UniqueSeparatorCaseOfficer
11720756Di2015UniqueSeparatorclass
11720756Di2015UniqueSeparatorstruct
11720756Di2015UniqueSeparatorFirstOrDefault
11720886Di2015UniqueSeparatorDictionary<string, object> fieldLayout = pageLayout.Where(x => x["FIELD"].ToString() == "123").FirstOrDefault();Di2015NewLine
11720886Di2015UniqueSeparatorDictionary<string, object> fieldLayout = pageLayout.FirstOrDefault(x => x["FIELD"].ToString() == "123");Di2015NewLine
11721001Di2015UniqueSeparatorFile.Delete
11721099Di2015UniqueSeparator/x:standards/x:standardDi2015NewLine
11721099Di2015UniqueSeparatorXmlNamespaceManager
11721099Di2015UniqueSeparator<nums xmlns="some:nums">Di2015NewLine  <num>01</num>Di2015NewLine  <num>02</num>Di2015NewLine  <num>03</num>Di2015NewLine  <num>04</num>Di2015NewLine  <num>05</num>Di2015NewLine  <num>06</num>Di2015NewLine  <num>07</num>Di2015NewLine  <num>08</num>Di2015NewLine  <num>09</num>Di2015NewLine  <num>10</num>Di2015NewLine</nums>Di2015NewLine
11721099Di2015UniqueSeparator<xsl:stylesheet version="1.0"Di2015NewLine xmlns:xsl="http://www.w3.org/1999/XSL/Transform"Di2015NewLine xmlns:x="some:nums">Di2015NewLine <xsl:output method="text"/>Di2015NewLine <xsl:strip-space elements="*"/>Di2015NewLineDi2015NewLine <xsl:template match="/">Di2015NewLine     <xsl:value-of select="/x:nums/x:num[. = 3]"/>Di2015NewLine </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11721099Di2015UniqueSeparator03Di2015NewLine
11721160Di2015UniqueSeparatorif (!IsPostback)Di2015NewLine{ Di2015NewLine    BindYourControl();Di2015NewLine}Di2015NewLine
11721160Di2015UniqueSeparatorEnableViewState = true;Di2015NewLine
11721197Di2015UniqueSeparatorhttp://mysite --> http://mysite/PageContainer/default.aspxDi2015NewLine
11721248Di2015UniqueSeparatorclass UserDi2015NewLine{Di2015NewLine    public User(string username)Di2015NewLine    {Di2015NewLine        this.Username = username;Di2015NewLine        this.RequestQueue = new Queue<string>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public User(string username, string message)Di2015NewLine        : this(username)Di2015NewLine    {Di2015NewLine        this.RequestQueue.Enqueue(message);Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Username { get; set; }Di2015NewLine    public Queue<string> RequestQueue { get; private set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine///......................Di2015NewLineDi2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine    public MyClass()Di2015NewLine    {Di2015NewLine        this.Users = new Dictionary<string, User>();Di2015NewLine        this.UserQueue = new Queue<User>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Dictionary<string, User> Users; //Dictionary of users currently being processedDi2015NewLine    public Queue<User> UserQueue; //List of order for which users should be processedDi2015NewLineDi2015NewLine    public void OnMessageRecievedFromIrcChannel(string username, string request)Di2015NewLine    {Di2015NewLine        lock (this.UserQueue) //For threadsafetyDi2015NewLine        {Di2015NewLine            if (this.Users.ContainsKey(username))Di2015NewLine            {Di2015NewLine                //The user is in the user list. That means he has previously sent request that are awaiting to be processed.Di2015NewLine                //As such, we can safely add his new message at the end of HIS request list.Di2015NewLineDi2015NewLine                this.Users[username].RequestQueue.Enqueue(request); //Add users new message at the end of the listDi2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            //User is not in the user list. Means it's his first request. Create him in the user list and add his messageDi2015NewLine            var user = new User(username, request);Di2015NewLine            this.Users.Add(username, user); //Create the user and his messageDi2015NewLine            this.UserQueue.Enqueue(user); //Add the user to the last of the precessing users.Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    //**********************************Di2015NewLineDi2015NewLine    public void WorkerTick()Di2015NewLine    {Di2015NewLine        //This tick runs every 400ms and processes next message to be sent.Di2015NewLine        lock (this.UserQueue) //For threadsafetyDi2015NewLine        {Di2015NewLine            var user = this.UserQueue.Dequeue(); //Pop the next user to be processed.Di2015NewLine            var message = user.RequestQueue.Dequeue(); //Pop his requestDi2015NewLineDi2015NewLine            /////PROCESSING MESSAGE GOES HEREDi2015NewLineDi2015NewLine            if (user.RequestQueue.Count > 0) //If user has more messages waiting to be processedDi2015NewLine            {Di2015NewLine                this.UserQueue.Enqueue(user); //Add him at the end of the userqueueDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this.Users.Remove(user.Username); //User has no more messages, we can safely remove him from the user listDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11721386Di2015UniqueSeparatorreturnView
11721386Di2015UniqueSeparator  public static string RenderPartialToString(string view, object model, ControllerContext Context)Di2015NewLine        {Di2015NewLine            if (string.IsNullOrEmpty(view))Di2015NewLine            {Di2015NewLine                view = Context.RouteData.GetRequiredString("action");Di2015NewLine            }Di2015NewLineDi2015NewLine            ViewDataDictionary ViewData = new ViewDataDictionary();Di2015NewLineDi2015NewLine            TempDataDictionary TempData = new TempDataDictionary();Di2015NewLineDi2015NewLine            ViewData.Model = model;Di2015NewLineDi2015NewLine            using (StringWriter sw = new StringWriter())Di2015NewLine            {Di2015NewLine                ViewEngineResult viewResult = ViewEngines.Engines.FindPartialView(Context, view);Di2015NewLineDi2015NewLine                ViewContext viewContext = new ViewContext(Context, viewResult.View, ViewData, TempData, sw);Di2015NewLineDi2015NewLine                viewResult.View.Render(viewContext, sw);Di2015NewLineDi2015NewLine                return sw.GetStringBuilder().ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        //"Error" should be name of the partial view, I was just testing with partial error viewDi2015NewLine        //You can put whichever controller you want instead of HomeController it will be the sameDi2015NewLine        //You can pass model instead of nullDi2015NewLine        private string returnView()Di2015NewLine        {Di2015NewLine            var controller = new HomeController();Di2015NewLine            controller.ControllerContext = new ControllerContext(HttpContext,new System.Web.Routing.RouteData(), controller);Di2015NewLine            return RenderPartialToString("Error", null, new ControllerContext(controller.Request.RequestContext, controller));Di2015NewLine        }Di2015NewLine
11721568Di2015UniqueSeparatorpublic static Expression<Func<T, bool>> CreatePredicate<T>(string typeSearch, string searchField, string stringToSearch)Di2015NewLine{Di2015NewLine    var parameter = Expression.Parameter(typeof(T));Di2015NewLine    var predicate = Expression.Lambda<Func<T, bool>>(Di2015NewLine        Expression.Call(Di2015NewLine            Expression.Call(Expression.PropertyOrField(parameter, searchField), "ToUpper", null),Di2015NewLine            "Contains", null,Di2015NewLine            Expression.Constant(stringToSearch.ToUpper())), parameter);Di2015NewLineDi2015NewLine    return predicate;Di2015NewLine}Di2015NewLine
11721677Di2015UniqueSeparator@Html.CheckBoxFor(modelItem => modelItem.DeleteEnabled, Di2015NewLine                  new { style = modelItem.Visible ? Di2015NewLine                                    string.empty : Di2015NewLine                                    "display:none"})Di2015NewLine
11721677Di2015UniqueSeparator@if
11721677Di2015UniqueSeparator@if(modelItem.Visible)Di2015NewLine{Di2015NewLine    @Html.CheckBoxFor(modelItem => modelItem.DeleteEnabled)Di2015NewLine}Di2015NewLine
11721798Di2015UniqueSeparatordataGridView2.Rows.Add
11721798Di2015UniqueSeparatordataGridView2.Row(n).Tag
11721798Di2015UniqueSeparatorint n = dataGridView2.Rows.Add();Di2015NewLineDataGridViewRow newRow = dataGridView2.Rows[n]; Di2015NewLinenewRow.Cells[0].Value  = "ABC";Di2015NewLinenewRow.Cells[1].Value  = 123;Di2015NewLinenewRow.Tag = row;Di2015NewLine
11721804Di2015UniqueSeparatordistance between the center of the circle and your current coordinate
11721810Di2015UniqueSeparatorString.Format("All Strings : {0} on {1}",Di2015NewLine     String.Join(", ", MyObject.MyDictionary.Select(x => x.Key)),Di2015NewLine     MyObject.Type);Di2015NewLine
11721885Di2015UniqueSeparator private SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["MyConnectionString"].ConnectionString);Di2015NewLine
11721885Di2015UniqueSeparatorprivate
11721952Di2015UniqueSeparatornet start <scriptname>
11721953Di2015UniqueSeparatorTimespan remtime = YourLaunchDateTime - DateTime.Now;Di2015NewLine
11721953Di2015UniqueSeparatorremtime.Days
11721953Di2015UniqueSeparatorremtime.Hours
11721953Di2015UniqueSeparatorremtime.Minutes
11721953Di2015UniqueSeparatorremtime.Seconds
11721953Di2015UniqueSeparatorTotal...
11721953Di2015UniqueSeparatorremtime.TotalMinutes
11721962Di2015UniqueSeparatorType.FullName
11721962Di2015UniqueSeparatorType.FullName
11721962Di2015UniqueSeparatorstring[,][,,][,,,]
11721962Di2015UniqueSeparatorstring
11721962Di2015UniqueSeparatorstring[,,,]
11721962Di2015UniqueSeparatorstring[,,,][,,]
11721962Di2015UniqueSeparatorstring[,,,][,,][,]
11721962Di2015UniqueSeparatorFullName
11721962Di2015UniqueSeparatorType
11721962Di2015UniqueSeparatorMakeArrayType
11721962Di2015UniqueSeparatorMakeGenericType
11721974Di2015UniqueSeparatorif (filteredIds != null) Di2015NewLine{Di2015NewLine    result = result.Where(...);Di2015NewLine}Di2015NewLine
11721974Di2015UniqueSeparatorReplace
11721974Di2015UniqueSeparatorTrim
11721988Di2015UniqueSeparatorp.Click += new EventHandler(Pop_Up);Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineprivate void Pop_Up(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  var pb = sender as PictureBox;Di2015NewLine  if(pb != null)Di2015NewLine    MessageBox.Show(pb.ImageLocation);Di2015NewLine}Di2015NewLine
11722006Di2015UniqueSeparator//Build ColumnDi2015NewLineDataColumn column = new DataColumn("MyImage"); Di2015NewLinecolumn.DataType = System.Type.GetType("System.Byte[]"); //Type byte[] to store image bytes.Di2015NewLinecolumn.AllowDBNull = true;Di2015NewLinecolumn.Caption = "My Image";Di2015NewLineDi2015NewLine//Add ColumnDi2015NewLineyourDataTable.Columns.Add(column); Di2015NewLineDi2015NewLine//Build rowDi2015NewLineDataRow row = table.NewRow();Di2015NewLinerow["MyImage"] = <Image byte array>;Di2015NewLineyourDataTable.Rows.Add(row);Di2015NewLine
11722043Di2015UniqueSeparatorimageBytesDi2015NewLine
11722043Di2015UniqueSeparatorlist Di2015NewLine
11722043Di2015UniqueSeparatorlist[index].Attributes["Meaning"].ValueDi2015NewLine
11722122Di2015UniqueSeparatorContent-Type: multipart/form-data; boundary=AaB03xDi2015NewLineDi2015NewLine--AaB03xDi2015NewLineContent-Disposition: form-data; name="submit-name"Di2015NewLineDi2015NewLineLarryDi2015NewLine--AaB03xDi2015NewLineContent-Disposition: form-data; name="files"; filename="file1.txt"Di2015NewLineContent-Type: text/plainDi2015NewLineDi2015NewLine... contents of file1.txt ...Di2015NewLine--AaB03x--Di2015NewLine
11722191Di2015UniqueSeparatorint id = id_of_the_pen_that_i_am_holding;Di2015NewLinePen p = db.Pens.Find(id);Di2015NewLinevar penColorIds = p.Color.Select(m => m.Id).ToList();Di2015NewLinevar list = db.Pencils.Where(pencil => pencil.Color.Any(color => penColorIds.Contains(color.Id));Di2015NewLine
11722239Di2015UniqueSeparatorvar reader = new PdfReader(pdfPath); Di2015NewLineStringWriter output = new StringWriter();  Di2015NewLineDi2015NewLinefor (int i = 1; i <= reader.NumberOfPages; i++) Di2015NewLine    output.WriteLine(PdfTextExtractor.GetTextFromPage(reader, i, new SimpleTextExtractionStrategy()));Di2015NewLineDi2015NewLine//now you can search for the text from outPut.ToString();Di2015NewLine
11722457Di2015UniqueSeparatorvar contacts = db.GetTable<Contact>();Di2015NewLinevar distributionLists = db.GetTable<DistributionList>();Di2015NewLinevar JunctionTable = db.GetTable<ContactsDistribution>();Di2015NewLineDi2015NewLinevar distributionNames = listBox1.SelectedItemsDi2015NewLine                          .Cast<object>()Di2015NewLine                          .Select(t => t.ToString());Di2015NewLineDi2015NewLinevar junctions = JunctionTable.Where(j => distributionNames.Contains(j.DistributionName));Di2015NewLineDi2015NewLinevar contactIds = junctions.Select(j => j.ContactID).Distinct();Di2015NewLineDi2015NewLinevar contacts = contacts.Where(c => contactIds.Contains(c.ContactID));Di2015NewLine
11722540Di2015UniqueSeparator<deny users="*"/>
11722576Di2015UniqueSeparatordatabaseAuthorisation
11722576Di2015UniqueSeparatorGetFormsAuthorisation
11722576Di2015UniqueSeparatordc
11722576Di2015UniqueSeparatordatabaseForms
11722576Di2015UniqueSeparatordc
11722576Di2015UniqueSeparatorpublic Table<FormsAuthorisation> GetFormsAuthorisation()Di2015NewLine{Di2015NewLine    MyDataClassesDataContext dc = new MyDataClassesDataContext();Di2015NewLine    return GetFormsAuthorisation(dc);Di2015NewLine}Di2015NewLineDi2015NewLinepublic Table<FormsAuthorisation> GetFormsAuthorisation(MyDataClassesDataContext dc)Di2015NewLine{Di2015NewLine    //do whatever you already do inside your GetFormsAuthorisation function using dc parameterDi2015NewLine}Di2015NewLine
11722576Di2015UniqueSeparatorMyDataClassesDataContext dc = new MyDataClassesDataContext();Di2015NewLineTable<FormsAuthorisation> databaseAuthorisation = GetFormsAuthorisation(dc);Di2015NewLine//make any changesDi2015NewLinedc.SubmitChanges();Di2015NewLine
11722592Di2015UniqueSeparatorprotected void Save_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        string[] value = painter.Style.Value.Split(';');Di2015NewLine        string hw = painter.InnerHtml;Di2015NewLine        hw = hw.Replace("<br />", Environment.NewLine);Di2015NewLineDi2015NewLine        string width = value[3];Di2015NewLine        string height = value[4];Di2015NewLine        string bgcolor = value[5];Di2015NewLineDi2015NewLine        string[] widthArray = width.Split(':');Di2015NewLine        string[] heightArray = height.Split(':');Di2015NewLine        string[] bgcolorArray = bgcolor.Split(':');Di2015NewLineDi2015NewLine        int w = int.Parse(widthArray[1].Replace("px", ""));Di2015NewLine        int h = int.Parse(heightArray[1].Replace("px", ""));Di2015NewLine        //=====================================================================Di2015NewLine        //Added By RAM:Di2015NewLine        string key = "src=";Di2015NewLine        int start_of_img_address = hw.IndexOf(key) + key.Length+1;Di2015NewLine        int end_of_img_address = hw.Substring(start_of_img_address + 1).IndexOf('"');Di2015NewLine        string image_addres = hw.Substring(start_of_img_address, end_of_img_address+1);Di2015NewLine        image_addres = Server.MapPath(image_addres);Di2015NewLine        Image my_img = Image.FromFile(image_addres);Di2015NewLineDi2015NewLine        key = "<img";Di2015NewLine        int start_of_img_tag = hw.IndexOf(key);Di2015NewLine        int end_of_img_tag = hw.Substring(start_of_img_tag).IndexOf('>')+1;Di2015NewLine        string img_tag = hw.Substring(start_of_img_tag, end_of_img_tag+1);Di2015NewLine        hw=hw.Remove(start_of_img_tag, end_of_img_tag);Di2015NewLine        Response.Write(img_tag);Di2015NewLineDi2015NewLine        //=====================================================================Di2015NewLine        string color = bgcolorArray[1];Di2015NewLineDi2015NewLine        //var overlay = new Bitmap(imagePath2);Di2015NewLineDi2015NewLine        System.Drawing.Color c = System.Drawing.Color.Cyan; //.FromName("#ccccff");Di2015NewLineDi2015NewLine        System.Drawing.Bitmap bt = new System.Drawing.Bitmap(w, h);Di2015NewLine        System.Drawing.Graphics oGraphics = System.Drawing.Graphics.FromImage(bt);Di2015NewLine        System.Drawing.Brush brush = new System.Drawing.SolidBrush(c);Di2015NewLine        oGraphics.FillRectangle(brush, 0, 0, w, h);Di2015NewLine        oGraphics.DrawString(hw, new Font("Arial", 12, FontStyle.Italic), SystemBrushes.WindowText, new PointF(0, 0)); //changed 50 to 0Di2015NewLineDi2015NewLine        //=====================================================================Di2015NewLine        //Added By RAM:Di2015NewLine        oGraphics.DrawImage(my_img, 0, 170, my_img.Width, my_img.Height);Di2015NewLine        //=====================================================================Di2015NewLineDi2015NewLine        bt.Save("E:\\\\image10.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);Di2015NewLine}Di2015NewLine
11722692Di2015UniqueSeparator(?<!\\d)\\d{6}(?:\\d?|\\d{3,4})(?!\\d)Di2015NewLine
11722692Di2015UniqueSeparator(?<!\\d)   # Assert that the previous character (if any) isn't a digitDi2015NewLine\\d{6}     # Match 6 digitsDi2015NewLine(?:       # Either matchDi2015NewLine \\d?      # 0 or 1 digitsDi2015NewLine|         # orDi2015NewLine \\d{3,4}  # 3 or 4 digitsDi2015NewLine)         # End of alternationDi2015NewLine(?!\\d)    # Assert that the next character (if any) isn't a digitDi2015NewLine
11722881Di2015UniqueSeparatorvar lb = new LinkButton() { Text = i.ToString(), CssClass = "hrefia" };Di2015NewLinelb = "btnId" + i.ToString();Di2015NewLine
11722940Di2015UniqueSeparatorList<T>.ForEach
11722940Di2015UniqueSeparatormyList.ForEach(z =>Di2015NewLine                {Di2015NewLine                    z.FirstName = z.FirstName.ToUpper();Di2015NewLine                    z.LastName = z.LastName.ToUpper();Di2015NewLine                });Di2015NewLine
11722940Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public string FirstName { get; set; }Di2015NewLineDi2015NewLine    public string LastName { get; set; }Di2015NewLineDi2015NewLine    public int Age { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class MyHelperDi2015NewLine{Di2015NewLine    public static void UppercaseClassFields<T>(T theInstance)Di2015NewLine    {Di2015NewLine        if (theInstance == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var property in theInstance.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance))Di2015NewLine        {Di2015NewLine            var theValue = property.GetValue(theInstance, null);Di2015NewLine            if (theValue is string)Di2015NewLine            {Di2015NewLine                property.SetValue(theInstance, ((string)theValue).ToUpper(), null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void UppercaseClassFields<T>(IEnumerable<T> theInstance)Di2015NewLine    {Di2015NewLine        if (theInstance == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var theItem in theInstance)Di2015NewLine        {Di2015NewLine            UppercaseClassFields(theItem);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        List<Person> myList = new List<Person>{Di2015NewLine            new Person { FirstName = "Aaa", LastName = "BBB", Age = 2 },Di2015NewLine            new Person{ FirstName = "DeÃ©", LastName = "Ã¨ve", Age = 3 }Di2015NewLine        };Di2015NewLineDi2015NewLine        MyHelper.UppercaseClassFields<Person>(myList);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723118Di2015UniqueSeparatorAtomicObject
11723118Di2015UniqueSeparatorinterface IAtomicObject<out T> where T : class, CopyableDi2015NewLine{Di2015NewLine    public T openRead();Di2015NewLine}Di2015NewLine
11723118Di2015UniqueSeparatorout
11723118Di2015UniqueSeparatorAtomicObject
11723118Di2015UniqueSeparatorforeach (KeyValuePair<object, object> entry in dict)Di2015NewLine{Di2015NewLine    IAtomicObject<Copyable> obj = (IAtomicObject<Copyable>)entry.Key;Di2015NewLine    Copyable dest = obj.openRead();Di2015NewLine}Di2015NewLine
11723127Di2015UniqueSeparatorSendComplete
11723182Di2015UniqueSeparatorCheckboxfor
11723182Di2015UniqueSeparatorfalse
11723182Di2015UniqueSeparator<input type="checkbox" id="networksettings_activesettings_4" name="networksettings.activesettings[4]" value="true" />Di2015NewLine<input type="hidden" id="networksettings_activesettings_4_hidden" name="networksettings.activesettings[4]" value="false" />Di2015NewLine
11723291Di2015UniqueSeparatorpublic class RouteIdentityDi2015NewLine{Di2015NewLine    public string RouteId { get; set; }Di2015NewLine    public string RegionId { get; set; }Di2015NewLine    public DateTime RouteDate { get; set; }Di2015NewLineDi2015NewLine    public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        if (ReferenceEquals(null, obj))Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        if (ReferenceEquals(this, obj))Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        if (obj.GetType() != typeof(RouteIdentity))Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        RouteIdentity other = (RouteIdentity) obj;Di2015NewLineDi2015NewLine        return Equals(other.RouteId, RouteId) && Di2015NewLine               Equals(other.RegionId, RegionId) && Di2015NewLine               other.RouteDate.Equals(RouteDate);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        uncheckedDi2015NewLine        {Di2015NewLine            int result = (RouteId != null ? RouteId.GetHashCode() : 0);Di2015NewLine            result = (result * 397) ^ (RegionId != null ? RegionId.GetHashCode() : 0);Di2015NewLine            result = (result * 397) ^ RouteDate.GetHashCode();Di2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723291Di2015UniqueSeparatornew Dictionary<RouteIdentity, TValue>()
11723291Di2015UniqueSeparatorEqualityComparer<RouteIdentity>.Default
11723291Di2015UniqueSeparatorRouteIdentity
11723294Di2015UniqueSeparatorCheck parenthesis in your codeDi2015NewLineDi2015NewLineXElement xElem = new XElement("root");Di2015NewLinexElem.Add( new XElement("CloseDisconnected", "123") ); // generates what you expectDi2015NewLinexElem.Add( new XElement("CloseDisconnected"), "123"); // generates what you seeDi2015NewLine
11723306Di2015UniqueSeparatorref
11723306Di2015UniqueSeparatorout
11723306Di2015UniqueSeparatorpublic static void SetVariables(out int x, ref int y)Di2015NewLine{Di2015NewLine    // Can't *read* from x at all before it's setDi2015NewLine    x = 10;Di2015NewLine    // Can read and write yDi2015NewLine    y++;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void Foo()Di2015NewLine{Di2015NewLine    int setOnly;Di2015NewLine    int increment = 5;Di2015NewLine    SetVariables(out setOnly, ref increment);Di2015NewLine    Console.WriteLine("{0} {1}", setOnly, increment); // 10 6Di2015NewLine}Di2015NewLine
11723344Di2015UniqueSeparatorOdbcConnection conn = new OdbcConnection(connectionString);Di2015NewLineconn.Open();Di2015NewLine
11723344Di2015UniqueSeparatorstring connectionString = System.Configuration.ConfigurationManager.AppSettings["myConn"].ToString(); //ToString here is optional unless you're doing some weirdness in the web.configDi2015NewLine
11723344Di2015UniqueSeparatorstring command = "SELECT Something FROM SomeTable WHERE SomethingElse = '%" + "@Parameter1" + "%' AND SomethingElseStill LIKE '%" + @Parameter2 + "%' ";Di2015NewLineusing (OdbcConnection connection = new OdbcConnection(connectionString))Di2015NewLine{Di2015NewLine    OdbcCommand command = new OdbcCommand(command, conn);Di2015NewLine    command.Parameters.Add("@Parameter1", OdbcType.VarChar, 255);Di2015NewLine    command.Parameters["@Parameter1"].Value = "SomeString"Di2015NewLine    command.Parameters.Add("@Parameter2", OdbcType.Int);Di2015NewLine    int SomeInteger = 1;Di2015NewLine    command.Parameters["@Parameter2"].Value = SomeInteger;Di2015NewLine    OdbcDataAdapter adapter = new OdbcDataAdapter(command,con);Di2015NewLine    DataSet Data = new DataSet();Di2015NewLine    adapter.Fill(Data);Di2015NewLine}Di2015NewLine
11723344Di2015UniqueSeparatorstring command = "INSERT INTO SomeTable (column1, column2, column3) VALUES '%" + "@Parameter1" + "%', '%" + "@Parameter2" + "%', '%" + "@Parameter3" + "%' ";Di2015NewLineusing (OdbcConnection connection = new OdbcConnection(connectionString))Di2015NewLine{Di2015NewLine    OdbcCommand command = new OdbcCommand(command, conn);Di2015NewLine    command.Parameters.Add("@Parameter1", OdbcType.VarChar, 255);Di2015NewLine    command.Parameters["@Parameter1"].Value = "SomeString"Di2015NewLine    command.Parameters.Add("@Parameter2", OdbcType.Int);Di2015NewLine    int SomeInteger = 1;Di2015NewLine    command.Parameters["@Parameter2"].Value = SomeInteger;Di2015NewLine    command.Parameters.Add("@Parameter3", OdbcType.VarChar, 255);Di2015NewLine    command.Parameters["@Parameter3"].Value = "SomeOtherStringOrSomething";Di2015NewLine    command.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
11723378Di2015UniqueSeparatorIif
11723378Di2015UniqueSeparator=ReportItems!txtTotalFixedAsset.Value /Di2015NewLine     IIf(ReportItems!txtTotalFixedAsset3.Value<> 0Di2015NewLine        , 1Di2015NewLine        , ReportItems!txtTotalFixedAsset3.Value)Di2015NewLine     *100 Di2015NewLine
11723378Di2015UniqueSeparatortxtTotalFixedAsset3
11723378Di2015UniqueSeparatortxtTotalFixedAsset
11723399Di2015UniqueSeparatorvar r = (OfferList.GroupBy(offer => offer.id)Di2015NewLine             .Select(group =>Di2015NewLine                 new { offerid = group.Key,Di2015NewLine                       offers = group.OrderBy(o => o.fromDt),Di2015NewLine                       count = group.Count() })Di2015NewLine             .OrderBy(g => g.offers.First().fromDt) // list with the oldestDi2015NewLine             .ThenByDescending(g => g.count)).Dump()  // then by mostDi2015NewLine        .First().offers.First();   Di2015NewLine
11723404Di2015UniqueSeparatorRoleController.GetRolesByRoleGroup
11723404Di2015UniqueSeparatorPortalSecurity.IsInRoles
11723404Di2015UniqueSeparatorvar roleGroup = RoleController.GetRoleGroupByName(this.PortalId, "Role Group");Di2015NewLinevar shouldSkipQuestions = roleGroup != null Di2015NewLine                          && roleGroup.Roles.Keys.Any(role => _user.IsInRole(role));Di2015NewLine
11723413Di2015UniqueSeparatorvar searchResults = listMembers.DataSource = members.getAllMembers()...Di2015NewLine
11723413Di2015UniqueSeparatorvar searchResults = members.getAllMembers()...;Di2015NewLineDi2015NewLineif (!String.IsNullOrEmpty(search.name))Di2015NewLine{Di2015NewLine    searchResults = searchResults.Where(...);Di2015NewLine}Di2015NewLineDi2015NewLinelistMembers.DataSource = searchResults;Di2015NewLine
11723413Di2015UniqueSeparatorsearchResults
11723413Di2015UniqueSeparatorlistMembers.DataSource
11723413Di2015UniqueSeparatormembers.getAllMembers...
11723413Di2015UniqueSeparatorx = y = z
11723435Di2015UniqueSeparator...Di2015NewLineprivate short[] rawDepthData = new short[640*480]; // assuming your resolution is 640*480Di2015NewLineDi2015NewLineusing (DepthImageFrame depthFrame = e.OpenDepthImageFrame())Di2015NewLine{Di2015NewLine    depthFrame.CopyPixelDataTo(rawDepthData);Di2015NewLine}Di2015NewLineDi2015NewLinepixels1 = GenerateColoredBytes(rawDepthData);    Di2015NewLine...Di2015NewLineDi2015NewLineprivate byte[] GenerateColoredBytes(short[] rawDepthData){...}Di2015NewLine
11723435Di2015UniqueSeparatorprivate WriteableBitmap wBitmap;Di2015NewLineDi2015NewLine//somewhere in your initializationDi2015NewLinewBitmap = new WriteableBitmap(...);Di2015NewLinedepth.Source = wBitmap;Di2015NewLineDi2015NewLine//Then to update the image:Di2015NewLinewBitmap.WritePixels(...);Di2015NewLine
11723455Di2015UniqueSeparatorPlayer
11723455Di2015UniqueSeparatorPath=
11723455Di2015UniqueSeparatorDataTemplate
11723455Di2015UniqueSeparatorPlayer
11723455Di2015UniqueSeparatorItemsSource="{Binding Source={StaticResource PlayerListResource}}"Di2015NewLine
11723455Di2015UniqueSeparatorItemsSource = "{Binding}"Di2015NewLine
11723455Di2015UniqueSeparatorPlayer
11723455Di2015UniqueSeparatorclass Player {Di2015NewLine    public string name { get; set; }Di2015NewLine    public int nrOfTabls { get; set; }Di2015NewLine}Di2015NewLine
11723455Di2015UniqueSeparatorMainWindow.xaml.cs
11723455Di2015UniqueSeparatorpublic partial class MainWindow : Window {Di2015NewLine    private ObservableCollection<Player> players_;Di2015NewLineDi2015NewLine    public MainWindow() {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        players_ =new ObservableCollection<Player> () {Di2015NewLine            new Player() {Di2015NewLine                name = "Alex",Di2015NewLine                nrOfTabls = 1,Di2015NewLine            },Di2015NewLine            new Player() {Di2015NewLine                name = "Brett",Di2015NewLine                nrOfTabls = 2,Di2015NewLine            },Di2015NewLine            new Player() {Di2015NewLine                name="Cindy",Di2015NewLine                nrOfTabls = 231,Di2015NewLine            }Di2015NewLine        };Di2015NewLineDi2015NewLine        ListBox_Players.ItemsSource = players_;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723469Di2015UniqueSeparatorpublic
11723469Di2015UniqueSeparatorpublic Person(String aName, String aSurname, String aAddress1,Di2015NewLine              String aAddress2, String aTelephone, String aFaxNumber)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11723469Di2015UniqueSeparatorinternal
11723469Di2015UniqueSeparatorprotected
11723469Di2015UniqueSeparatorprivate
11723562Di2015UniqueSeparatorWhere
11723562Di2015UniqueSeparatorMemberInfo.IsDefined
11723562Di2015UniqueSeparatorvar myList = typeof(Issuance).GetProperties()Di2015NewLine                             .Where(p => p.IsDefined(typeof(MyAttr), false);Di2015NewLine
11723685Di2015UniqueSeparator&euro;
11723697Di2015UniqueSeparator1. your amount of data has to updateDi2015NewLineDi2015NewLine2. the update frequencyDi2015NewLine
11723697Di2015UniqueSeparator    var adapter = new SqlDataAdapter();Di2015NewLine    var dataSet = new DataSet();Di2015NewLineDi2015NewLine    using(var connection = new SqlConnection(connetionString))Di2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        adapter.SelectCommand = new SqlCommand("Your query", connection);Di2015NewLine        adapter.Fill(dataSet);Di2015NewLine        connection.Close();Di2015NewLineDi2015NewLine        //Print results  Di2015NewLine        for (i = 0; i <= dataSet.Tables[0].Rows.Count - 1; i++)Di2015NewLine        {Di2015NewLine            MessageBox.Show(dataSet.Tables[0].Rows[1].ItemArray[1].ToString());Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11723700Di2015UniqueSeparator%WINCEROOT%\\PUBLIC\\SHELL\\OAK\\HPC\\EXPLORER\\TASKBAR\\taskbar.cpp
11723728Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var rows = new List<Row>();Di2015NewLine        var sr = new StreamReader(@"C:\\so_test.txt");Di2015NewLine        while (!sr.EndOfStream)Di2015NewLine        {Di2015NewLine            string s = sr.ReadLine();Di2015NewLine            if (!String.IsNullOrEmpty(s.Trim()))Di2015NewLine            {Di2015NewLine                rows.Add(new Row(s));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sr.Close();Di2015NewLine        dataGridView1.DataSource = rows;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RowDi2015NewLine{Di2015NewLine    public double Number1 { get; set; }Di2015NewLine    public double Number2 { get; set; }Di2015NewLine    public double Number3 { get; set; }Di2015NewLine    public double Number4 { get; set; }Di2015NewLine    public double Number5 { get; set; }Di2015NewLine    public double Number6 { get; set; }Di2015NewLine    public double Number7 { get; set; }Di2015NewLine    public string Date1 { get; set; }Di2015NewLineDi2015NewLine    public Row(string str)Di2015NewLine    {Di2015NewLine        string[] separator = { "\\t" };Di2015NewLine        var arr = str.Split(separator, StringSplitOptions.None);Di2015NewLine        Number1 = Convert.ToDouble(arr[0]);Di2015NewLine        Number2 = Convert.ToDouble(arr[1]);Di2015NewLine        Number3 = Convert.ToDouble(arr[2]);Di2015NewLine        Number4 = Convert.ToDouble(arr[3]);Di2015NewLine        Number5 = Convert.ToDouble(arr[4]);Di2015NewLine        Number6 = Convert.ToDouble(arr[5]);Di2015NewLine        Number7 = Convert.ToDouble(arr[6]);Di2015NewLine        Date1 = arr[7];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723728Di2015UniqueSeparator    public Row(string str)Di2015NewLine    {Di2015NewLine        Number1 = Convert.ToDouble(str.Substring(4, 6));Di2015NewLine        Number2 = Convert.ToDouble(str.Substring(16, 6));Di2015NewLine        Number3 = Convert.ToDouble(str.Substring(28, 7));Di2015NewLine        Number4 = Convert.ToDouble(str.Substring(40, 7));Di2015NewLine        Number5 = Convert.ToDouble(str.Substring(52, 6));Di2015NewLine        Number6 = Convert.ToDouble(str.Substring(64, 6));Di2015NewLine        Number7 = Convert.ToDouble(str.Substring(76, 6));Di2015NewLine        Date1 = str.Substring(88, 24);Di2015NewLine    }Di2015NewLine
11723738Di2015UniqueSeparatorvideo
11723738Di2015UniqueSeparatorprivate WriteableBitmap wBitmap; Di2015NewLineprivate byte[] pixels;Di2015NewLineDi2015NewLineprivate void WindowLoaded(...)Di2015NewLine{Di2015NewLine    //set up kinect first, but don't start itDi2015NewLine    ...Di2015NewLineDi2015NewLine    pixels = new byte[sensor.ColorStream.FramePixelDataLength];Di2015NewLineDi2015NewLine    wBitmap = new WriteableBitmap(sensor.ColorStream.FrameWidth, sensor.ColorStream.FrameHeight, Di2015NewLine        96, 96, PixelFormats.Bgra32, null);Di2015NewLineDi2015NewLine    video.Source = wBitmap;Di2015NewLineDi2015NewLine    sensor.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ColorFrameReady(object sender, ColorImageFrameReadyArgs e)Di2015NewLine{Di2015NewLine    using (ColorImageFrame colorFrame = e.OpenColorImageFrame())Di2015NewLine    {Di2015NewLine        if (colorFrame == null)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        colorFrame.CopyPixelDataTo(pixels);Di2015NewLineDi2015NewLine        wBitmap.WritePixels(new Int32Rect(0, 0, wBitmap.PixelWidth, wBitmap.PixelHeight),Di2015NewLine            pixels, image.PixelWidth * 4, 0);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723738Di2015UniqueSeparatora
11723741Di2015UniqueSeparatorpublic B(new_args1,new_args2)Di2015NewLine
11723741Di2015UniqueSeparatorpublic B(int new_args1, int new_args2)Di2015NewLine
11723741Di2015UniqueSeparator_b=new B(42, 24);Di2015NewLine
11723741Di2015UniqueSeparatorpublic B(int new_args1, int new_args2)Di2015NewLine{Di2015NewLine    // new_args1 has the value 42Di2015NewLine    // new_args2 has the value 24Di2015NewLine}Di2015NewLine
11723741Di2015UniqueSeparatorpublic class B Di2015NewLine{Di2015NewLine    public int A1 { get; private set; }Di2015NewLine    public int A2 { get; private set; }Di2015NewLine    public B(int new_args1, int new_args2)Di2015NewLine    {Di2015NewLine        // new_args1 has the value 42Di2015NewLine        A1 = new_args1;Di2015NewLine        // new_args2 has the value 24Di2015NewLine        A2 = new_args2;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11723741Di2015UniqueSeparator_b.A1 Di2015NewLine
11723741Di2015UniqueSeparator_b.A2Di2015NewLine
11723820Di2015UniqueSeparator dtCurrentTimePlus15 = 15Di2015NewLine
11723820Di2015UniqueSeparatordtLastLoginAttempt = 2Di2015NewLine
11723820Di2015UniqueSeparatorif ((iLoginAttempts > 4) && (dtLastLoginAttempt < dtCurrentTimePlus15))Di2015NewLine{Di2015NewLine    oCust.CustLoginStatus = "Your account is currently locked.";Di2015NewLine    return false;Di2015NewLine}  Di2015NewLine
11723833Di2015UniqueSeparatorApplication.Current.Dispatcher.Invoke(() => { Di2015NewLine      var win = new Window();Di2015NewLine      win.show(); Di2015NewLine});Di2015NewLine
11723917Di2015UniqueSeparator[XmlElement("Stat")]Di2015NewLinepublic List<Stat> Stats { get; set;}Di2015NewLine
11723917Di2015UniqueSeparatorpublic string FirstNameDi2015NewLine{Di2015NewLine   get { return Stats.GetStat("first_name"); }Di2015NewLine}Di2015NewLine
11723917Di2015UniqueSeparatorpublic static string GetStat(this List<Stat> stats, string key)Di2015NewLine{Di2015NewLine  var val = stats.FirstOrDefault(item => item.Type == key);Di2015NewLineDi2015NewLine  if (val != null)Di2015NewLine    return val.Value ?? String.Empty;Di2015NewLine  return String.Empty;Di2015NewLine} Di2015NewLine
11723924Di2015UniqueSeparator        var xmlDoc = new XmlDocument();Di2015NewLine        xmlDoc.Load(@"http://www.co.frederick.va.us/dev/scrapewarning.xml");Di2015NewLine        var nsm = new XmlNamespaceManager(xmlDoc.NameTable);Di2015NewLine        nsm.AddNamespace("s", "http://www.w3.org/2005/Atom");Di2015NewLine        nsm.AddNamespace("cap", "urn:oasis:names:tc:emergency:cap:1.1");Di2015NewLine        var nodes = xmlDoc.SelectNodes("//s:entry[cap:event]", nsm);Di2015NewLine
11723981Di2015UniqueSeparatorres
11724021Di2015UniqueSeparator/Chapters/{ChapterID}?Book={BookID}Di2015NewLine
11724095Di2015UniqueSeparatord += 0.01;
11724095Di2015UniqueSeparatord = (double)(i + 1) / 100;
11724171Di2015UniqueSeparator^
11724171Di2015UniqueSeparator$
11724171Di2015UniqueSeparatorreturn Regex.IsMatch(id, "^[0-9]{9,10}$");Di2015NewLine
11724245Di2015UniqueSeparatorif (DateTime1.TimeOfDay > DateTime2.TimeOfDay)Di2015NewLine{Di2015NewLine    MessageBox.Show("DateTime1 is later");Di2015NewLine}Di2015NewLine
11724275Di2015UniqueSeparator<xs:element name="ContStats">Di2015NewLine    <xs:complexType>Di2015NewLine      <xs:sequence>Di2015NewLine        <xs:element ref="Extension" minOccurs="0" maxOccurs="unbounded" />Di2015NewLine        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Interval" />Di2015NewLine        <xs:group minOccurs="0" ref="INT-ARRAY" />Di2015NewLine        <xs:group minOccurs="0" maxOccurs="2" ref="NUM-ARRAY" />Di2015NewLine      </xs:sequence>Di2015NewLine      <xs:attribute name="totalValuesSum" type="NUMBER" />Di2015NewLine      <xs:attribute name="totalSquaresSum" type="NUMBER" />Di2015NewLine    </xs:complexType>Di2015NewLine  </xs:element>Di2015NewLine
11724340Di2015UniqueSeparatorpublic virtual MailMessage EMailQuote(QuoteData model)Di2015NewLine{Di2015NewLine    var mailMessage = new MailMessage { Subject = "..." };Di2015NewLineDi2015NewLine    mailMessage.To.Add(model.Step.EMail);Di2015NewLine    mailMessage.To.Add("web@site.com");Di2015NewLineDi2015NewLine    ViewData.Model = model;Di2015NewLine    PopulateBody(mailMessage, viewName: "EMailQuote");Di2015NewLineDi2015NewLine    return mailMessage;Di2015NewLine}Di2015NewLine
11724349Di2015UniqueSeparatorLoad<Type>()
11724349Di2015UniqueSeparatorpublic class BookDi2015NewLine{Di2015NewLine     public string Title {get;set;}Di2015NewLine     public DateTime PublicationDate {get;set;}Di2015NewLine     public decimal Cost {get;set;}Di2015NewLine     public virtual Author {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class AuthorDi2015NewLine{Di2015NewLine     public string Name {get;set;}Di2015NewLine     public DateTime DateOfBirth {get;set;}Di2015NewLine}Di2015NewLine
11724405Di2015UniqueSeparatorusing System.Net;Di2015NewLineusing System.Net.Http;Di2015NewLineusing System.Web.Http.Controllers;Di2015NewLineusing System.Web.Http.Filters;Di2015NewLineDi2015NewLinenamespace System.Web.Http.FiltersDi2015NewLine{Di2015NewLine    public class ValidationActionFilter : ActionFilterAttributeDi2015NewLine    {Di2015NewLine        public override void OnActionExecuting(HttpActionContext actionContext)Di2015NewLine        {Di2015NewLine            var modelState = actionContext.ModelState;Di2015NewLineDi2015NewLine            if (!modelState.IsValid)Di2015NewLine                actionContext.Response = actionContext.RequestDi2015NewLine                     .CreateErrorResponse(HttpStatusCode.BadRequest, modelState);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11724542Di2015UniqueSeparatorTreeNode
11724542Di2015UniqueSeparator        treeView = new TreeView();Di2015NewLine        var node = new TreeNode(Di2015NewLine            string.Format("{0}: {1} / {2} / {3}", name, latitude, longitude, H));Di2015NewLine        treeView.Nodes.Add(node);Di2015NewLine
11724542Di2015UniqueSeparatorTag
11724542Di2015UniqueSeparator        node.Tag = "AnyData";Di2015NewLine
11724577Di2015UniqueSeparator using MyLibraryDi2015NewLine
11724577Di2015UniqueSeparator var result = new MyLibrary.MyMethod()Di2015NewLine
11724619Di2015UniqueSeparatorreturn (int) Math.Floor((1 + Math.Sqrt(1 + 8 * k)) / 2);
11724619Di2015UniqueSeparatorreturn (int) Math.Floor((1 + Math.Sqrt(-7 + 8 * k)) / 2);
11724631Di2015UniqueSeparator.ToString()
11724631Di2015UniqueSeparator<td><%= Convert.ToDateTime(paidOut.Paid_Out_Datetime).ToString("M/d/yy") %></td>Di2015NewLine<td><%= Convert.ToDecimal(paidOut.Paid_Out_Amount).ToString("0.00") %></td>Di2015NewLine
11724647Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public string SelectedValue { get; set; }Di2015NewLine    public IEnumerable<SelectListItem> Values { get; set; }Di2015NewLine}Di2015NewLine
11724647Di2015UniqueSeparatorpublic ActionResult SomeAction()Di2015NewLine{Di2015NewLine    var model = new MyViewModel();Di2015NewLineDi2015NewLine    // preselect an item with Value=2Di2015NewLine    model.SelectedValue = "2"; Di2015NewLineDi2015NewLine    // this could of course come from a database or somethingDi2015NewLine    model.Values = new[]Di2015NewLine    {Di2015NewLine        new SelectListItem { Value = "1", Text = "item 1" },Di2015NewLine        new SelectListItem { Value = "2", Text = "item 2" },Di2015NewLine        new SelectListItem { Value = "3", Text = "item 3" },Di2015NewLine    };Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
11724647Di2015UniqueSeparator@model MyViewModelDi2015NewLine....Di2015NewLineDi2015NewLineDi2015NewLine@Html.DropDownListFor(x => x.SelectedValue, Model.Values, "Select")Di2015NewLine
11724647Di2015UniqueSeparatorpublic ActionResult SomeAction()Di2015NewLine{Di2015NewLine    Dictionary<string, string> values = ......Di2015NewLineDi2015NewLine    var model = new MyViewModel();Di2015NewLine    model.SelectedValue = (string)TempData["name"]; Di2015NewLine    model.Values = values.Select(x => new SelectListItemDi2015NewLine    {Di2015NewLine        Value = x.Key,Di2015NewLine        Text = string.Format("{0} {1}", x.Key, x.Value)Di2015NewLine    });Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
11724648Di2015UniqueSeparatormyCommand.Parameters.Add("@BlogID", SqlDbType.UniqueIdentifier).Value = new Guid("96d5b379-7e1d-4dac-a6ba-1e50db561b04");Di2015NewLine
11724738Di2015UniqueSeparatorCCPoint
11724768Di2015UniqueSeparatorinterface INamable { string Name { get; } }Di2015NewLineDi2015NewLineclass AThingWithAName : INamable Di2015NewLine{Di2015NewLine    public string Name {get {return "thing";}}Di2015NewLine}Di2015NewLineDi2015NewLineclass AnotherThingWithAName : INamable Di2015NewLine{Di2015NewLine    public string Name {get {return "different thing";}}Di2015NewLine}Di2015NewLineDi2015NewLineclass Foo<T> where T : INamableDi2015NewLine{Di2015NewLine    public string Greet(T item) {return "hi " + item;}Di2015NewLine}Di2015NewLine
11724768Di2015UniqueSeparatorclass AThing {}Di2015NewLineclass AnotherUnrelatedThing {}Di2015NewLineDi2015NewLineclass Foo<T>Di2015NewLine{Di2015NewLine    public string Greet(T item, Func<T, string> namingFunction) Di2015NewLine    {Di2015NewLine        return "hi " + namingFunction(item);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11724768Di2015UniqueSeparatorvar foo = new Foo<int>();Di2015NewLinevar res=foo.Greet(2, n=>n.ToString());Di2015NewLine
11724806Di2015UniqueSeparatorcolumns.Bound(p => p.SetupDate).ClientTemplate("<#= ((SetupDate == DateTime.Min) || (SetupDate == null)) ? string.Empty : SetupDate #>")Di2015NewLine
11724806Di2015UniqueSeparatorcolumns.Bound(p => p.SetupDate).ClientTemplate("<# if ((SetupDate != DateTime.Min) && (SetupDate != null)) { #><#= SetupDate #><# } #>")Di2015NewLine
11724806Di2015UniqueSeparatorcolumns.Bound(p => p.SetupDate).ClientTemplate("<#= checkDate(SetupDate) #>")Di2015NewLine
11724806Di2015UniqueSeparator<script>Di2015NewLine  function checkDate(setupDate) {Di2015NewLine    if ((setupDate.getMilliseconds() === 0) || (setupDate === null))Di2015NewLine      return '';Di2015NewLine    elseDi2015NewLine      return setupDate;Di2015NewLine  }Di2015NewLine</script>Di2015NewLine
11724814Di2015UniqueSeparatorpublic interface IActor {Di2015NewLine   Stats Stats {get;}Di2015NewLine   Vector2 Position {get;}Di2015NewLine   bool IsFighting {get;}Di2015NewLine   bool IsActive {get;}  // Or whatever you needDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ActorManager {Di2015NewLineDi2015NewLine     public static readonly Instance = new ActorManager();Di2015NewLineDi2015NewLine     ActorManager();Di2015NewLineDi2015NewLine     List<IActor> _actors = new List<IActor>();Di2015NewLineDi2015NewLine     public IEnumerable<IActor> Actors {get{ return _actors;}}Di2015NewLineDi2015NewLine     public void Addactor(IActor actor) { ... }Di2015NewLineDi2015NewLine     public IEnumerable<IActor> GetActorsNear(IActor actor, float Radius)Di2015NewLine     {Di2015NewLine         return _actors.Where( Di2015NewLine               secondary => actor != secondary Di2015NewLine               && Vector2.Distance(actor.Position, secondary.Position)<Radius);Di2015NewLine     }Di2015NewLineDi2015NewLine     // or whatever you want to do with actorsDi2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class Actor : IActorDi2015NewLine{Di2015NewLine   public Stats Stats {get; protected set;}Di2015NewLine   public Vector2 Position {get;protected set;}Di2015NewLine   public bool IsFighting {get;protected set;}Di2015NewLine   public bool IsActive {get;protected set;} Di2015NewLineDi2015NewLine       public Actor() {Di2015NewLine           ActorManager.Instance.Add(this);Di2015NewLine       }Di2015NewLineDi2015NewLine   public abstract void Controller();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Player : Actor { }  // Implements an input controllerDi2015NewLinepublic class Npc : Actor { } // Implements a cpu IA controllerDi2015NewLine
11724928Di2015UniqueSeparatorWIN
11724928Di2015UniqueSeparatorSendKeys
11724928Di2015UniqueSeparator// open "My Computer"Di2015NewLineSystem.Diagnostics.Process.Start("::{20d04fe0-3aea-1069-a2d8-08002b30309d}");Di2015NewLine
11724928Di2015UniqueSeparatorAdministrative Tools: {D20EA4E1-3957-11d2-A40B-0C5020524153}Di2015NewLineAll Tasks:            {ED7BA470-8E54-465E-825C-99712043E01C}Di2015NewLineControl Panel:        {21EC2020-3AEA-1069-A2DD-08002b30309d}Di2015NewLineConnections:          {241D7C96-F8BF-4F85-B01F-E2B043341A4B}Di2015NewLineFonts:                {D20EA4E1-3957-11d2-A40B-0C5020524152}Di2015NewLineComputer:             {20D04FE0-3AEA-1069-A2D8-08002B30309D}Di2015NewLineDocuments:            {450D8FBA-AD25-11D0-98A8-0800361B1103}Di2015NewLineHistory:              {ff393560-c2a7-11cf-bff4-444553540000}Di2015NewLineNetwork Places:       {208d2c60-3aea-1069-a2d7-08002b30309d}Di2015NewLinePrinters and Faxes:   {2227A280-3AEA-1069-A2DE-08002B30309D}Di2015NewLinePrograms Folder:      {7be9d83c-a729-4d97-b5a7-1b7313c39e0a}Di2015NewLineRecycle Bin:          {645FF040-5081-101B-9F08-00AA002F954E}Di2015NewLineStart Menu:           {48e7caab-b918-4e58-a94d-505519c795dc}Di2015NewLineScheduled Tasks:      {D6277990-4C6A-11CF-8D87-00AA0060F5BF}Di2015NewLine
11724977Di2015UniqueSeparatorbyte[] firstArray = new byte[] {0xFF,0xFF,0xFF,0xFF}; Di2015NewLinebyte[] secondArray = [your data here]Di2015NewLinebyte[] result = firstArray.Concat(secondArray).ToArray(); Di2015NewLine
11725074Di2015UniqueSeparator  System\\Data\\DataTableDi2015NewLine
11725074Di2015UniqueSeparator  myLibrary\\myClass\\nestedClass::myFunction()Di2015NewLine
11725077Di2015UniqueSeparator##/##
11725077Di2015UniqueSeparator\\d+(\\.\\d+)?/\\d+(\\.\\d+)?Di2015NewLine
11725077Di2015UniqueSeparator1
11725077Di2015UniqueSeparator\\d*\\s*Di2015NewLine
11725085Di2015UniqueSeparator[StringLength(40, ErrorMessage = "Name cannot be longer than 40 characters.")]
11725149Di2015UniqueSeparatorpublic class MainWindowViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    private SomeBackgroundThing thing;Di2015NewLineDi2015NewLine    private DataTable wpftable;Di2015NewLine    public DataTable tableDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            lock (wpftable)Di2015NewLine            {Di2015NewLine                return wpftable;Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        setDi2015NewLine        {Di2015NewLine            lock (wpftable)Di2015NewLine            {Di2015NewLine                wpftable = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public MainWindowViewModel(SomeBackgroundThing thing)Di2015NewLine    {Di2015NewLine        wpftable = thing.table.Copy();Di2015NewLine        this.thing = thing;Di2015NewLine        thing.Changed += new EventHandler(thing_Changed);Di2015NewLine    }Di2015NewLineDi2015NewLine    void thing_Changed(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine        {Di2015NewLine            DataTable wpftablecopy = wpftable.Copy();Di2015NewLine            DataTable thintablecopy = thing.table.Copy();Di2015NewLine            int rowcount = wpftablecopy.Rows.Count;Di2015NewLine            for (int col = 0; col < 4; col++)Di2015NewLine            {Di2015NewLine                for (int row = 0; row < rowcount; row++)Di2015NewLine                {Di2015NewLine                    if (wpftablecopy.Rows[row][col] != thintablecopy.Rows[row][col])Di2015NewLine                        wpftable.Rows[row][col] = thintablecopy.Rows[row][col];Di2015NewLine                }Di2015NewLine            }Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs("table"));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11725282Di2015UniqueSeparatorpackage.appxmanifest
11725282Di2015UniqueSeparatorStreamSocketListener
11725282Di2015UniqueSeparatorprivate void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine{ Di2015NewLine    try Di2015NewLine    {Di2015NewLine         StreamSocketListener listener = new StreamSocketListener();Di2015NewLine         greetingOutput.Text = "Hello, " + nameInput.Text + "!";Di2015NewLine    } Di2015NewLine    catch(UnauthorizedAccessException exc) Di2015NewLine    {Di2015NewLine         // Act on the missing capability. Log it and/or warn the user.Di2015NewLine    }Di2015NewLine}Di2015NewLine
11725302Di2015UniqueSeparatormainWindow.Dispatcher.Invoke
11725302Di2015UniqueSeparatorISynchronizeInvoke
11725334Di2015UniqueSeparatorreturn "\\n" + Regex.Replace(testString, "(, {})+$", "") + "};";Di2015NewLine
11725334Di2015UniqueSeparator+
11725471Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineusing System.Net.Sockets;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Net;Di2015NewLineDi2015NewLinenamespace TCPServerTutorialDi2015NewLine{Di2015NewLine  class ServerDi2015NewLine  {Di2015NewLine    private TcpListener tcpListener;Di2015NewLine    private Thread listenThread;Di2015NewLineDi2015NewLine    public Server()Di2015NewLine    {Di2015NewLine      this.tcpListener = new TcpListener(IPAddress.Any, 3000);Di2015NewLine      this.listenThread = new Thread(new ThreadStart(ListenForClients));Di2015NewLine      this.listenThread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private void HandleClientComm(object client)Di2015NewLine    {Di2015NewLine      TcpClient tcpClient = (TcpClient)client;Di2015NewLine      NetworkStream clientStream = tcpClient.GetStream();Di2015NewLineDi2015NewLine      byte[] message = new byte[4096];Di2015NewLine      int bytesRead;Di2015NewLineDi2015NewLine      while (true)Di2015NewLine      {Di2015NewLine        bytesRead = 0;Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine          //blocks until a client sends a messageDi2015NewLine          bytesRead = clientStream.Read(message, 0, 4096);Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine          //a socket error has occuredDi2015NewLine          break;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (bytesRead == 0)Di2015NewLine        {Di2015NewLine          //the client has disconnected from the serverDi2015NewLine          break;Di2015NewLine        }Di2015NewLineDi2015NewLine        //message has successfully been receivedDi2015NewLine        ASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLine        System.Diagnostics.Debug.WriteLine(encoder.GetString(message, 0, bytesRead));Di2015NewLine      }Di2015NewLineDi2015NewLine      tcpClient.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ListenForClients()Di2015NewLine    {Di2015NewLine      this.tcpListener.Start();Di2015NewLineDi2015NewLine      while (true)Di2015NewLine      {Di2015NewLine        //blocks until a client has connected to the serverDi2015NewLine        TcpClient client = this.tcpListener.AcceptTcpClient();Di2015NewLineDi2015NewLine        //create a thread to handle communicationDi2015NewLine        //with connected clientDi2015NewLine        Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClientComm));Di2015NewLine        clientThread.Start(client);Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLine    //you'll have to find a way to pass this argDi2015NewLine    private void SendBack(TcpClient tcpClient)Di2015NewLine    {Di2015NewLine    NetworkStream clientStream = tcpClient.GetStream();Di2015NewLine    ASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLine    byte[] buffer = encoder.GetBytes("Hello Client!");Di2015NewLineDi2015NewLine    clientStream.Write(buffer, 0 , buffer.Length);Di2015NewLine    clientStream.Flush();Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
11725471Di2015UniqueSeparatorprivate void SendToServer(){Di2015NewLine    TcpClient client = new TcpClient();Di2015NewLineDi2015NewLine    //IP of the server: currently loopback, change to whatever you wantDi2015NewLine    IPEndPoint serverEndPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 3000);Di2015NewLineDi2015NewLine    client.Connect(serverEndPoint);Di2015NewLineDi2015NewLine    NetworkStream clientStream = client.GetStream();Di2015NewLineDi2015NewLine    ASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLineDi2015NewLine    //Message being sent: "Hello Server!"Di2015NewLine    byte[] buffer = encoder.GetBytes("Hello Server!");Di2015NewLineDi2015NewLine    clientStream.Write(buffer, 0 , buffer.Length);Di2015NewLine    clientStream.Flush();Di2015NewLine}Di2015NewLine
11725571Di2015UniqueSeparatorMemoryStream
11725571Di2015UniqueSeparatorvar memoryStream = new MemoryStream()Di2015NewLineStreamReader reader = null;Di2015NewLinetry{Di2015NewLine    serializer.WriteObject(memoryStream, myObject);Di2015NewLineDi2015NewLine    memoryStream.Position = 0;Di2015NewLine    reader = new StreamReader(memoryStream)Di2015NewLine    //...Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    if(reader != null)Di2015NewLine        reader.Dispose();Di2015NewLine    elseDi2015NewLine        memoryStream.Dispose();Di2015NewLine}Di2015NewLine
11725627Di2015UniqueSeparator[assembly: AssemblyVersion("1.0.0")]Di2015NewLine
11725627Di2015UniqueSeparator[assembly: AssemblyVersion("1.0.0.*")]Di2015NewLine
11725627Di2015UniqueSeparator[assembly: AssemblyInformationalVersion("1.0.0")]Di2015NewLine
11725627Di2015UniqueSeparatorInstall-Package NuSpec Di2015NewLine
11725627Di2015UniqueSeparator<package>Di2015NewLine  <version>$version</version>Di2015NewLine  ...Di2015NewLine</package>Di2015NewLine
11725627Di2015UniqueSeparatornuget pack MyProject.csprojDi2015NewLine
11725637Di2015UniqueSeparatornamespace ConsoleApplication12Di2015NewLine{Di2015NewLine    public class EmployeeDi2015NewLine    {Di2015NewLine        public string EmpName { get; set; }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return this.EmpName;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class StudentDi2015NewLine    {Di2015NewLine        public string StudName { get; set; }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return this.StudName;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class OtherDi2015NewLine    {Di2015NewLine        public int TestField { get; set; }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return this.TestField.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public interface IRepository<T>Di2015NewLine    {Di2015NewLine        List<T> GetAll();Di2015NewLine    }Di2015NewLineDi2015NewLine    public class PersonRepository : IRepository<Employee>, IRepository<Student>, IRepository<Other>Di2015NewLine    {Di2015NewLine        List<Student> IRepository<Student>.GetAll()Di2015NewLine        {Di2015NewLine            return new List<Student> { new Student { StudName = "test2" } };Di2015NewLine        }Di2015NewLineDi2015NewLine        List<Other> IRepository<Other>.GetAll()Di2015NewLine        {Di2015NewLine            return new List<Other> { new Other { TestField = 42 } };Di2015NewLine        }Di2015NewLineDi2015NewLine        List<Employee> IRepository<Employee>.GetAll()Di2015NewLine        {Di2015NewLine            return new List<Employee> { new Employee { EmpName = "test1" } };Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ProgramDi2015NewLine    {Di2015NewLine        private static void Main(string[] args)Di2015NewLine        {Di2015NewLine            PersonRepository d = new PersonRepository();Di2015NewLineDi2015NewLine            // Returns "test1"Di2015NewLine            Console.WriteLine(((IRepository<Employee>)d).GetAll()[0]);Di2015NewLineDi2015NewLine            // Returns "test2"Di2015NewLine            Console.WriteLine(((IRepository<Student>)d).GetAll()[0]);Di2015NewLineDi2015NewLine            // Returns 42Di2015NewLine            Console.WriteLine(((IRepository<Other>)d).GetAll()[0]);Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11725637Di2015UniqueSeparatorGetAll()
11725703Di2015UniqueSeparatorScheduler
11725793Di2015UniqueSeparatorReportDataSource source = new ReportDataSource("DataTable1", dt);Di2015NewLine
11725861Di2015UniqueSeparatorstatic ProgramDi2015NewLine{Di2015NewLine    private static PerformanceCounter cpuCounter = new PerformanceCounter() { Di2015NewLine        CategoryName = "Processor", Di2015NewLine        CounterName = "% Processor Time", Di2015NewLine        InstanceName = "_Total" };Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        cpuCounter.NextValue();Di2015NewLine        // Do your processing here.Di2015NewLine        float totalCpuUsagePercentage = cpuCounter.NextValue();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11726012Di2015UniqueSeparator<a>
11726012Di2015UniqueSeparator// getting the non-anchor nodes in the reversed orderDi2015NewLinevar nodes = doc.DocumentNode.SelectNodes("//*[name()!='a']")Di2015NewLine    .Reverse()Di2015NewLine    .ToList();Di2015NewLineDi2015NewLine// replacing with the inner htmlDi2015NewLineforeach (var node in nodes)Di2015NewLine{Di2015NewLine    var replacement = doc.CreateTextNode(node.InnerHtml);Di2015NewLine    node.ParentNode.ReplaceChild(replacement, node);Di2015NewLine}Di2015NewLineDi2015NewLine// and getting the outputDi2015NewLinevar output = doc.DocumentNode.OuterHtml;Di2015NewLine
11726012Di2015UniqueSeparatorsome textDi2015NewLinemore text with a <a href='url'>link</a>Di2015NewLinesome more textDi2015NewLine<a href='url'>another link</a> here...Di2015NewLine
11726013Di2015UniqueSeparatorthis.Invoke
11726019Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine  // make sure that we only take public static constDi2015NewLine  // used loop, but can easily be converted to list where linq could be usedDi2015NewLine  foreach (FieldInfo field in typeof(Supplier).GetFields(BindingFlags.Static | BindingFlags.Public).Where(i => i.IsLiteral))Di2015NewLine  {Di2015NewLine    string val = field.GetRawConstantValue().ToString();Di2015NewLine    Console.WriteLine("is " + val + " found: " + (val == "companyA"));Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine// Define other methods and classes hereDi2015NewLinepublic struct Supplier {Di2015NewLine    public const stringDi2015NewLine        NA = "N/A",Di2015NewLine        companyA = "companyA",Di2015NewLine        companyB = "companyB";Di2015NewLine};Di2015NewLine
11726065Di2015UniqueSeparator$1
11726065Di2015UniqueSeparatorreplacement
11726065Di2015UniqueSeparator$1
11726065Di2015UniqueSeparatorint.Parse
11726065Di2015UniqueSeparator(String, String, MatchEvaluator)
11726065Di2015UniqueSeparatorRegex.Replace(overlayHTML, pattern, Di2015NewLinematch => FormatCurrency(GetTiemPriceOnDate(DateTime.Now, currencyID, int.Parse(match.Groups[1].Value)))Di2015NewLine)Di2015NewLine
11726210Di2015UniqueSeparatorAutofac.Integration.Mvc.ILifetimeScopeProvider
11726210Di2015UniqueSeparatorAutofac.Integration.Mvc.RequestLifetimeScopeProvider
11726210Di2015UniqueSeparatorRequestLifetimeScopeProvider
11726210Di2015UniqueSeparatorILifetimeScopeProvider
11726210Di2015UniqueSeparatorILifetimeScopeProvider
11726210Di2015UniqueSeparatorvar scopeProvider = new MyCustomLifetimeScopeProvider(container, configAction);Di2015NewLinevar resolver = new AutofacDependencyResolver(container, scopeProvider);Di2015NewLineDependencyResolver.SetResolver(resolver);Di2015NewLine
11726210Di2015UniqueSeparator[Serializable]
11726210Di2015UniqueSeparatorILifetimeScopeProvider
11726251Di2015UniqueSeparatorToString
11726251Di2015UniqueSeparatorpublic override string ToString()Di2015NewLine{Di2015NewLine    return String.Format("name={0}, email={1}, age={2}", this.name, this.email, this.age);Di2015NewLine}Di2015NewLine
11726251Di2015UniqueSeparatorpublic override string ToString()Di2015NewLine{Di2015NewLine    Type type = this.GetType();Di2015NewLine    FieldInfo[] fields = type.GetFields();Di2015NewLine    PropertyInfo[] properties = type.GetProperties();Di2015NewLine    User user = this;Di2015NewLineDi2015NewLine    Dictionary<string, object> values = new Dictionary<string, object>();Di2015NewLine    Array.ForEach(fields, (field) => values.Add(field.Name, field.GetValue(user)));Di2015NewLine    Array.ForEach(properties, (property) =>Di2015NewLine        {Di2015NewLine            if (property.CanRead)Di2015NewLine                values.Add(property.Name, property.GetValue(user, null));Di2015NewLine        });Di2015NewLineDi2015NewLine    return String.Join(", ", values);Di2015NewLine}Di2015NewLine
11726254Di2015UniqueSeparatordistance
11726254Di2015UniqueSeparatorup
11726254Di2015UniqueSeparatorVector3 center = 0.5 * (object2position + object2position)Di2015NewLineVector3 vec12 = object2position - object1positionDi2015NewLineDi2015NewLineVector3 normal = Cross(vec12, up)Di2015NewLinenormal.Normalize()Di2015NewLineVector3 offset = distance * normalDi2015NewLineDi2015NewLineVector3 cameraA = center + offsetDi2015NewLineVector3 cameraB = center - offsetDi2015NewLine< choose which camera position you want >Di2015NewLine
11726254Di2015UniqueSeparatorLookAt()
11726374Di2015UniqueSeparator    public string GetImage(string path, int width, int height)Di2015NewLine    {Di2015NewLine        var stream = new MemoryStream();Di2015NewLine        var img = Image.FromFile(path);Di2015NewLine        img.Save(stream, System.Drawing.Imaging.ImageFormat.Png);Di2015NewLineDi2015NewLine        var bytes = stream.ToArray();Di2015NewLineDi2015NewLine        var str = BitConverter.ToString(bytes, 0).Replace("-", string.Empty);Di2015NewLineDi2015NewLine        var mpic = @"{\\pict\\pngblip\\picw" + img.Width.ToString() + @"\\pich" + img.Height.ToString() +Di2015NewLine            @"\\picwgoa" + width.ToString() + @"\\pichgoa" + height.ToString() + Di2015NewLine            @"\\hex " + str + "}";Di2015NewLine        return mpic;Di2015NewLine    }Di2015NewLine
11726374Di2015UniqueSeparator    // Determine if the user selected a file name from the saveFileDialog.Di2015NewLine    if (saveFile1.ShowDialog() == System.Windows.Forms.DialogResult.OK &&Di2015NewLine            saveFile1.FileName.Length > 0)Di2015NewLine    {Di2015NewLine        var rtf = richTextBox1.Rtf.Insert(richTextBox1.Rtf.IndexOf("deflang2057") + 11, GetImage(@"c:\\a.png", 5, 5) + @"\\par");Di2015NewLineDi2015NewLine        using (var rtfFile = new StreamWriter(saveFile1.FileName))Di2015NewLine        {Di2015NewLine            rtfFile.Write(rtf);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11726376Di2015UniqueSeparatorwhile(true) {Di2015NewLine    var g = someControl.CreateGraphics();Di2015NewLine    draw(g);Di2015NewLine}Di2015NewLine
11726376Di2015UniqueSeparatorDoEvents()
11726376Di2015UniqueSeparatorCreateGraphics()
11726376Di2015UniqueSeparatorOnPaint
11726376Di2015UniqueSeparatorOnPaint
11726376Di2015UniqueSeparatorInvalidate()
11726376Di2015UniqueSeparatorDoEvents()
11726376Di2015UniqueSeparatorInvalidate()
11726449Di2015UniqueSeparatorSystem.ComponentModel.DataAnnotations
11726449Di2015UniqueSeparatormydomain/completeregistration/7593098573903 whatever
11726654Di2015UniqueSeparatorMailMessage
11726654Di2015UniqueSeparatoremailMessages
11726654Di2015UniqueSeparatorEmailStructure
11726654Di2015UniqueSeparatoremailMessages.Add(new EmailStructure()Di2015NewLine{Di2015NewLine    Email = email,Di2015NewLine    MailId = 42,Di2015NewLine    MailTypeId = 108Di2015NewLine});Di2015NewLine
11726702Di2015UniqueSeparatorDictionary<Type, Delegate>
11726702Di2015UniqueSeparatorDictionary<Type, Delegate>
11726702Di2015UniqueSeparatorpublic class ComparersCollectionDi2015NewLine{Di2015NewLine    private readonly Dictionary<Type, Delegate> _comparers =Di2015NewLine        new Dictionary<Type,Delegate>();Di2015NewLineDi2015NewLine    public void OverrideComparison<T>(Comparison<T> comparison)Di2015NewLine    {Di2015NewLine        if(comparison == null)Di2015NewLine        {Di2015NewLine            _comparers.Remove(typeof(T));Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            _comparers[typeof(T)] = comparison;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Comparison<T> GetComparison<T>()Di2015NewLine    {Di2015NewLine        Delegate comparison;Di2015NewLine        if(_comparers.TryGetValue(typeof(T), out comparison))Di2015NewLine        {Di2015NewLine            return (Comparison<T>)comparison;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return Comparer<T>.Default.Compare;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11726702Di2015UniqueSeparatorComparison <string> myStringComparer = (x, y) => -x.CompareTo(y);Di2015NewLines.CustomizedComparers.OverrideComparison(myStringComparer);Di2015NewLine
11726702Di2015UniqueSeparatorvar comparison = CustomizedComparers.GetComparison<T>();Di2015NewLinereturn comparison(a, b);Di2015NewLine
11726738Di2015UniqueSeparatorresponse.IsSuccess
11726738Di2015UniqueSeparatorModel.IsValid
11726738Di2015UniqueSeparatorResponse
11726738Di2015UniqueSeparatorActionResult
11726738Di2015UniqueSeparatorExecuteResult()
11726819Di2015UniqueSeparator[RegularExpression( @"@(gmail|yahoo|live)\\.com$", ErrorMessage = "Invalid domain in email address. The domain must be gmail.com, yahoo.com or live.com")]Di2015NewLinepublic string EmailAddress { get ; set ; }Di2015NewLine
11726939Di2015UniqueSeparatorIColor desiredColor = //whateverDi2015NewLineint desiredNumber = //whatever elseDi2015NewLineIFoo foo = container.Resolve<IFoo>(new { c = desiredColor, somenumber = desiredArgumentValue });Di2015NewLine
11726939Di2015UniqueSeparatorIColor desiredColor = //whateverDi2015NewLineint desiredNumber = //whateverDi2015NewLineDictionary<string, object> arguments = new Dictionary<string, object>();Di2015NewLinearguments.Add("c", desiredColor);Di2015NewLinearguments.Add("somenumber", desiredNumber);Di2015NewLineIFoo foo = container.Resolve<IFoo>(arguments);Di2015NewLine
11727026Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace BackgroundWorkerThreadExampleDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public delegate void ProgressUpdatedCallaback(ProgressUpdatedEventArgs progress);Di2015NewLine        BackgroundWorker bw = new BackgroundWorker();Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            bw.WorkerReportsProgress = true;Di2015NewLine            bw.WorkerSupportsCancellation = true;Di2015NewLine            bw.DoWork += new DoWorkEventHandler(backgroundWorker_DoWork);Di2015NewLine            bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(backgroundWorker_RunWorkerCompleted);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void backgroundWorker_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine        {Di2015NewLine            DatabaseProcessor.ProgressUpdated += new DatabaseProcessor.ProgressUpdatedEvent(ProgressUpdated);Di2015NewLine            DatabaseProcessor.GetData();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void backgroundWorker_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)Di2015NewLine        {Di2015NewLine            bw.Dispose();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            bw.RunWorkerAsync();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine        {Di2015NewLine            if (bw.IsBusy == true)Di2015NewLine            {Di2015NewLine                bw.CancelAsync();Di2015NewLine            }Di2015NewLine            bw.Dispose();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void ProgressUpdated(ProgressUpdatedEventArgs progressUpdated)Di2015NewLine        {Di2015NewLine            if (InvokeRequired)Di2015NewLine            {Di2015NewLine                Invoke(new ProgressUpdatedCallaback(this.UpdateProgress), new object[] { progressUpdated });Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                UpdateProgress(progressUpdated);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void UpdateProgress(ProgressUpdatedEventArgs args)Di2015NewLine        {Di2015NewLine            ProgressBar pb = new ProgressBar();Di2015NewLine            Label lb = new Label();Di2015NewLineDi2015NewLine            if (args.Message == "")Di2015NewLine            {Di2015NewLine                if (args.PBNum == 1)Di2015NewLine                {Di2015NewLine                    pb = progressBar1;Di2015NewLine                    lb = label1;Di2015NewLine                }Di2015NewLine                else if (args.PBNum == 2)Di2015NewLine                {Di2015NewLine                    pb = progressBar2;Di2015NewLine                    lb = label2;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (pb.Maximum != args.Total)Di2015NewLine                {Di2015NewLine                    // initial setupDi2015NewLine                    pb.Minimum = 0;Di2015NewLine                    pb.Maximum = args.Total;Di2015NewLine                    pb.Style = ProgressBarStyle.Continuous;Di2015NewLine                }Di2015NewLineDi2015NewLine                pb.Value = args.Processed;Di2015NewLineDi2015NewLine                if (args.Total > 0)Di2015NewLine                {Di2015NewLine                    double progress = args.Processed / (args.Total * 1.0);Di2015NewLine                    lb.Text = progress.ToString("P2");Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this.richTextBox1.Text += args.Message;Di2015NewLine                //Goto last lineDi2015NewLine                this.richTextBox1.SelectionStart = this.richTextBox1.Text.Length;Di2015NewLine                this.richTextBox1.ScrollToCaret();Di2015NewLine            }Di2015NewLine            //Application.DoEvents();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class DatabaseProcessorDi2015NewLine    {Di2015NewLine        public delegate void ProgressUpdatedEvent(ProgressUpdatedEventArgs progressUpdated);Di2015NewLine        public static event ProgressUpdatedEvent ProgressUpdated;Di2015NewLineDi2015NewLine        public static void GetData()Di2015NewLine        {Di2015NewLine            int total = 126;Di2015NewLine            Random randomGenerator = new Random();Di2015NewLine            for (int i = 0; i < total; i++)Di2015NewLine            {Di2015NewLine                // Do some processing hereDi2015NewLine                double delay = (double)randomGenerator.Next(2) + randomGenerator.NextDouble();Di2015NewLine                int sleep = (int)delay * 1000;Di2015NewLine                System.Threading.Thread.Sleep(sleep);Di2015NewLine                RaiseEvent(1, total, i + 1);Di2015NewLine                RaiseEvent(0, 0, 0, string.Format("Processing Item {0} \\r\\n", i + 1));Di2015NewLineDi2015NewLine                for (int ii = 0; ii < total; ii++)Di2015NewLine                {Di2015NewLine                    // Do some processing hereDi2015NewLine                    double delay2 = (double)randomGenerator.Next(2) + randomGenerator.NextDouble();Di2015NewLine                    int sleep2 = (int)delay2 * 10;Di2015NewLine                    System.Threading.Thread.Sleep(sleep2);Di2015NewLine                    RaiseEvent(2, total, ii + 1);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void RaiseEvent(int pbNum, int total, int current, string message = "")Di2015NewLine        {Di2015NewLine            if (ProgressUpdated != null)Di2015NewLine            {Di2015NewLine                ProgressUpdatedEventArgs args = new ProgressUpdatedEventArgs(pbNum, total, current, message);Di2015NewLine                ProgressUpdated(args);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ProgressUpdatedEventArgs : EventArgsDi2015NewLine    {Di2015NewLine        public ProgressUpdatedEventArgs(int pbNum, int total, int progress, string message = "")Di2015NewLine        {Di2015NewLine            this.PBNum = pbNum;Di2015NewLine            this.Total = total;Di2015NewLine            this.Processed = progress;Di2015NewLine            this.Message = message;Di2015NewLine        }Di2015NewLine        public string Message { get; private set; }Di2015NewLine        public int PBNum { get; private set; }Di2015NewLineDi2015NewLine        public int Processed { get; private set; }Di2015NewLine        public int Total { get; private set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727143Di2015UniqueSeparatorfor (int i = IBase36.Length -1; i >=0; i--)Di2015NewLine{Di2015NewLine    //Your TreatmentDi2015NewLine}Di2015NewLine
11727253Di2015UniqueSeparatorD
11727253Di2015UniqueSeparatorD=200
11727253Di2015UniqueSeparatorD/sqrt(2)
11727253Di2015UniqueSeparatorD/2
11727253Di2015UniqueSeparator(x1,y1) = 300-D/2, 200+D/2 = 200,300Di2015NewLine(x2,y2) = 700+D/2, 800-D/2 = 800,700Di2015NewLine
11727253Di2015UniqueSeparatorx1<x2
11727253Di2015UniqueSeparatorx1>x2
11727403Di2015UniqueSeparator[MyAttribute(MyClass.MyClassName)]Di2015NewLinepublic MyClassDi2015NewLine{Di2015NewLine    private const string MyClassName = "Test123";Di2015NewLineDi2015NewLine    public string Name Di2015NewLine    {Di2015NewLine       get { return MyClass.MyClassName; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727554Di2015UniqueSeparatorlong bc = (long)Math.Pow(36, ((IBase36.Length - 1) -i));Di2015NewLine
11727557Di2015UniqueSeparator$('myLinkButton').click(function() {Di2015NewLine    $.ajax({Di2015NewLine        type: "POST",Di2015NewLine        contentType: "application/json; charset=utf-8",Di2015NewLine        url: "yourpage.aspx/lnkTag_Click",Di2015NewLine        data: "{'linkText': '" + linkTextValue + "'}",Di2015NewLine        dataType: "json",Di2015NewLine        success: function(data) {Di2015NewLine            //do something if it's successfulDi2015NewLine        },Di2015NewLine        error: function(jqXHR, textStatus, errorThrown) {Di2015NewLine            //do something if there's an errorDi2015NewLine        }Di2015NewLine    });Di2015NewLine});Di2015NewLine
11727630Di2015UniqueSeparatorIDictionary<string, IDictionary<Levels, IList<Problem>>> PackageDictionaryForProblemsDi2015NewLine
11727630Di2015UniqueSeparatorpublic class PackageDictionaryForProblems : IDictionary<string, IDictionary<Levels,     IList<Problem>>>Di2015NewLine{ }Di2015NewLine
11727630Di2015UniqueSeparatorPackageDictionaryForProblems
11727630Di2015UniqueSeparatorIDictionary<string, IDictionary<Levels,     IList<Problem>>>
11727630Di2015UniqueSeparatorIDictionary<string, IDictionary<Levels, IList<Problem>>>
11727647Di2015UniqueSeparatorIt.Is<IMyEvent>(m => Message == expected)Di2015NewLine
11727647Di2015UniqueSeparatorIt.IsAny<IMyEvent>()Di2015NewLine
11727661Di2015UniqueSeparator routes.MapHttpRoute(Di2015NewLine          name: "DefaultApi",Di2015NewLine          routeTemplate: "api/{controller}/{itemId}",Di2015NewLine          defaults: new { itemId = RouteParameter.Optional }Di2015NewLine      );Di2015NewLine
11727715Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic partial class BookmarkServiceDi2015NewLine{Di2015NewLine    [WebInvoke(Method = "PUT", UriTemplate = "users/{username}")]Di2015NewLine    [OperationContract]Di2015NewLine    void PutUserAccount(string username, User user) {...}Di2015NewLineDi2015NewLine    [WebInvoke(Method = "DELETE", UriTemplate = "users/{username}")]Di2015NewLine    [OperationContract]Di2015NewLine    void DeleteUserAccount(string username) {...}Di2015NewLineDi2015NewLine    [WebInvoke(Method = "POST", UriTemplate = "users/{username}/bookmarks")]Di2015NewLine    [OperationContract]Di2015NewLine    void PostBookmark(string username, Bookmark newValue) {...}Di2015NewLineDi2015NewLine    [WebInvoke(Method = "PUT", UriTemplate = "users/{username}/bookmarks/{id")]Di2015NewLine    [OperationContract]Di2015NewLine    void PutBookmark(string username, string id, Bookmark bm) {...}Di2015NewLineDi2015NewLine    [WebInvoke(Method = "DELETE", UriTemplate = "users/{username}/bookmarks/{id}")]Di2015NewLine    [OperationContract]Di2015NewLine    void DeleteBookmark(string username, string id) {...}Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11727717Di2015UniqueSeparatorpublic interface IBucketActionsHandlerFactoryDi2015NewLine{Di2015NewLine    IBucketActionsHandler Create(Di2015NewLine        Bucket largeBucket,Di2015NewLine        Bucket smallBucket,Di2015NewLine        int amountToRetrieve);Di2015NewLine}Di2015NewLine
11727717Di2015UniqueSeparatorpublic class SomeServiceDi2015NewLine{Di2015NewLine    private IBucketActionsHandlerFactory factory;Di2015NewLine    private IBucketRepository repository;Di2015NewLineDi2015NewLine    public SomeService(IBucketActionsHandlerFactory factory,Di2015NewLine        IBucketRepository repository)Di2015NewLine    {Di2015NewLine        this.factory = factory;Di2015NewLine        this.repository = repository;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Handle(int amountToRetrieve)Di2015NewLine    {Di2015NewLine        var largeBucket = this.repository.GetById(LargeBucketId);Di2015NewLine        var smallBucket = this.repository.GetById(SmallBucketId);Di2015NewLineDi2015NewLine        var handler = this.factory.Create(largeBucket, smallBucket,Di2015NewLine            amountToRetrieve);Di2015NewLineDi2015NewLine        handler.CalculateSteps();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727717Di2015UniqueSeparatorIBucketActionsHandler
11727717Di2015UniqueSeparatorpublic class BucketActionsHandlerFactoryDi2015NewLine    : IBucketActionsHandlerFactoryDi2015NewLine{Di2015NewLine    private Container container;Di2015NewLineDi2015NewLine    public class BucketActionsHandlerFactory(Di2015NewLine        Container container)Di2015NewLine    {Di2015NewLine        this.container = container;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IBucketActionsHandler Create(Di2015NewLine        Bucket largeBucket, Bucket smallBucket,Di2015NewLine        int amountToRetrieve)Di2015NewLine    {Di2015NewLine        return new BucketActionsHandler(Di2015NewLine            largeBucket, smallBucket, amountToRetrieve,Di2015NewLine            this.container.Get<IActionLogger>());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727717Di2015UniqueSeparatorBucketActionsHandlerFactory
11727717Di2015UniqueSeparatorBucketActionsHandler
11727717Di2015UniqueSeparatorlargeBucket
11727717Di2015UniqueSeparatorsmallBucket
11727717Di2015UniqueSeparatoramountToRetrieve
11727717Di2015UniqueSeparatorCalculateSteps
11727717Di2015UniqueSeparatorpublic class BucketActionsContextDi2015NewLine{Di2015NewLine    public Bucket LargeBucket { get; set; }Di2015NewLine    public Bucket SmallBucket { get; set; }Di2015NewLine    public int AmountToRetrieve { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BucketActionsHandler : IBucketActionsHandlerDi2015NewLine{Di2015NewLine    private IActionLogger _actionLogger;Di2015NewLineDi2015NewLine    public BucketActionsHandler(IActionLogger actionLogger)Di2015NewLine    {Di2015NewLine        _actionLogger = actionLogger;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void CalculateSteps(Di2015NewLine        BucketActionsContext context)Di2015NewLine    {Di2015NewLine        IAction nextAction;Di2015NewLine        doDi2015NewLine        {Di2015NewLine            nextAction = this.GetNextAction(context);Di2015NewLineDi2015NewLine            if (nextAction == null)Di2015NewLine            {Di2015NewLine                throw new InvalidOperationException(Di2015NewLine                    "No valid action available");Di2015NewLine            }Di2015NewLineDi2015NewLine            nextAction.Execute();Di2015NewLine        } Di2015NewLine        while(!(nextAction is LastAction));Di2015NewLine    }Di2015NewLineDi2015NewLine    private IAction GetNextAction(Di2015NewLine        BucketActionsContext context)Di2015NewLine    {Di2015NewLine        return (Di2015NewLine            from action in this.GetActions(context)Di2015NewLine            where action.SatisfiedCondition()Di2015NewLine            select action)Di2015NewLine            .FirstOrDefault();Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<IAction> GetActions(Di2015NewLine        BucketActionsContext context)Di2015NewLine    {Di2015NewLine        Bucket largeBucket = context.LargeBucket;Di2015NewLine        Bucket smallBucket = context.SmallBucket;Di2015NewLine        int amountToRetrieve = context.AmountToRetrieve;Di2015NewLineDi2015NewLine        yield return new LastAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new EmptySmallerBucketAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new EmptyLargeBucketAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new FillLargeBucketAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new FillSmallBucketAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new TransferToLargeBucketAction(largeBucket, smallBucket, amountToRetrieve);Di2015NewLine        yield return new TransferToSmallBucketAction(largeBucket, smallBucket, amountToRetrieve);    Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727729Di2015UniqueSeparatorvar doc = XDocument.Load(@"C:\\Tools\\test.xml");Di2015NewLinevar doc2 = XDocument.Load(@"C:\\Tools\\test2.xml");Di2015NewLinevar children = doc2.Root.Element("Details");Di2015NewLinevar parentNode = doc.Root.Element("Details");Di2015NewLineparentNode.ReplaceWith(children);Di2015NewLine
11727729Di2015UniqueSeparator<Root>Di2015NewLine    <AgencyName name= "Some Agency"/>Di2015NewLine    <Originator name= "Some other Agency"/>Di2015NewLine    <Type name= "AnonymousType"/>Di2015NewLine    <Details/>Di2015NewLine</Root>Di2015NewLine
11727729Di2015UniqueSeparator<Root>Di2015NewLine    <Details>Di2015NewLine        <Detail1>Di2015NewLine           asdfDi2015NewLine        </Detail1>Di2015NewLine        <Detail2>Di2015NewLine            asdeDi2015NewLine        </Detail2>Di2015NewLine        <Detail3>Di2015NewLine            eereDi2015NewLine        </Detail3>Di2015NewLine    </Details>Di2015NewLine</Root>Di2015NewLine
11727729Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Root>Di2015NewLine  <AgencyName name="Some Agency" />Di2015NewLine  <Originator name="Some other Agency" />Di2015NewLine  <Type name="AnonymousType" />Di2015NewLine  <Details>Di2015NewLine    <Detail1>Di2015NewLine           asdfDi2015NewLine        </Detail1>Di2015NewLine    <Detail2>Di2015NewLine            asdeDi2015NewLine        </Detail2>Di2015NewLine    <Detail3>Di2015NewLine            eereDi2015NewLine        </Detail3>Di2015NewLine  </Details>Di2015NewLine</Root>Di2015NewLine
11727833Di2015UniqueSeparatorpublic bool HasChangesDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return myData == null ? false : this.myData.HasChanges();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11727850Di2015UniqueSeparatorTextChange
11727850Di2015UniqueSeparatore.Changes
11727850Di2015UniqueSeparatorint added = e.Changes.ElementAt(0).AddedLength;Di2015NewLine
11727850Di2015UniqueSeparatorint added = e.Changes.FirstOrDefault().AddedLength;Di2015NewLine
11727850Di2015UniqueSeparatore.Changes
11727850Di2015UniqueSeparatorTextChange
11727850Di2015UniqueSeparatorvar x = e.Changes.GetEnumerator();Di2015NewLinex.MoveNext();Di2015NewLineint added = x.Current.AddedLength;Di2015NewLine
11728137Di2015UniqueSeparator<Window TextBox.GotFocus="textBox1_GotFocus" TextBox.LostFocus="textBox1_LostFocus">Di2015NewLine   <TextBox ... >Di2015NewLine   <TextBox ... >Di2015NewLine   <TextBox ... >Di2015NewLine</Window>Di2015NewLine
11728137Di2015UniqueSeparatorprivate void textBox1_GotFocus(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    ((TextBox)sender).Background = (Brush)new BrushConverter().ConvertFrom("#FFE6E6FF");Di2015NewLine}Di2015NewLine
11728219Di2015UniqueSeparatorinternal InitInternal()
11728219Di2015UniqueSeparatorprotected virtual Init()
11728219Di2015UniqueSeparatorprotected internal virtual Init()
11728219Di2015UniqueSeparatorprotected
11728225Di2015UniqueSeparatorString table = "dbo.tablename";
11728225Di2015UniqueSeparatorString table = "tablename";
11728373Di2015UniqueSeparatorID
11728373Di2015UniqueSeparatorFirst
11728373Di2015UniqueSeparatorvar query = from t in dt.AsEnumerable()Di2015NewLine            group t by t.Field<int>("ID") into gDi2015NewLine            select g.First();Di2015NewLine
11728510Di2015UniqueSeparatorConfigurationManager.AppSettings
11728510Di2015UniqueSeparatorstring[] emails = ConfigurationManager.AppSettings["email"].Split(';');Di2015NewLine
11728510Di2015UniqueSeparator<add key="email" value="email1@email.com;email2@email.com" />Di2015NewLine
11728514Di2015UniqueSeparatorint id = int.Parse(context.Request["Id"] ?? "-1");Di2015NewLine
11728514Di2015UniqueSeparatorint id = person == null ? -1 : person.Id;Di2015NewLine
11728561Di2015UniqueSeparatorldstr
11728561Di2015UniqueSeparatorldstr "Test1"Di2015NewLine
11728561Di2015UniqueSeparatorldstr
11728561Di2015UniqueSeparatorstring x = "abc";Di2015NewLinestring y = "abc";Di2015NewLinebool sameInstance = ReferenceEquals(x,y); // trueDi2015NewLine
11728561Di2015UniqueSeparator"Test"
11728561Di2015UniqueSeparator"Test1"
11728561Di2015UniqueSeparator"Name"
11728561Di2015UniqueSeparatorldstr
11728641Di2015UniqueSeparatorList<SelectListItem> month = Framework.Enums.Month_List().Select(T => new Di2015NewLine     SelectListItem() { Text = T.Key, Value = T.Value.ToString() }).ToList();Di2015NewLine        //make the previous month as "selected"Di2015NewLine        int currentMonth = DateTime.Now.Month;Di2015NewLine        if(currentMonth == 1){Di2015NewLine            month.Find(x=>x.Value == 12).Selected = true;Di2015NewLine        }else{Di2015NewLine           month.Find(x=>x.Value == ((currentMonth - 1).ToString())).Selected = true;Di2015NewLine        }Di2015NewLine        return month;Di2015NewLine
11728661Di2015UniqueSeparatorprivate void displayMessageBox(object sender, FormClosingEventArgs e)Di2015NewLine{Di2015NewLine    DialogResult result = MessageBox.Show("Do you want to save the changes to the document before closing it?", "MyNotepad", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);Di2015NewLine    if (result == DialogResult.Yes)Di2015NewLine    {Di2015NewLine        saveToolStripMenuItem_Click(sender, e);Di2015NewLine    }Di2015NewLine    else if (result == DialogResult.No)Di2015NewLine    {Di2015NewLine        rtbMain.Clear();Di2015NewLine        this.Text = "Untitled - MyNotepad"; Di2015NewLine    }Di2015NewLine    else if (result == DialogResult.Cancel)Di2015NewLine    {Di2015NewLine        // Leave the window open.Di2015NewLine        e.Cancel = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11728661Di2015UniqueSeparatore.Cancel
11728705Di2015UniqueSeparatorhttp://maps.googleapis.com/maps/api/directions/json?origin=Boston,MA&destination=Concord,MA&waypoints=Charlestown,MA|Lexington,MA&sensor=falseDi2015NewLine
11728732Di2015UniqueSeparatorIsotope
11728828Di2015UniqueSeparatorint x = Math.Floor(Math.Sqrt(num_elems));Di2015NewLineint y;Di2015NewLineif (x*x == num_elems)Di2015NewLine{Di2015NewLine    y = x;Di2015NewLine} else {Di2015NewLine    y = x+1;Di2015NewLine    if (x*y < num_elems)Di2015NewLine    {Di2015NewLine        ++x;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11728828Di2015UniqueSeparatornum_elems
11729034Di2015UniqueSeparatorMicrosoft.VisualBasic.FileIO
11729131Di2015UniqueSeparatorVisualStateManager.GoToState(this, "StateB", false);Di2015NewLineVisualStateManager.GoToState(this, "StateA", false);Di2015NewLine
11729131Di2015UniqueSeparator public static readonly DependencyProperty MinValueProperty =Di2015NewLine        DependencyProperty.Register("MinValue", typeof(double), typeof(ScaleValueConverter), new PropertyMetadata(0.0d,OnMinValuePropertyChanged));Di2015NewLine
11729152Di2015UniqueSeparatordr["SortOrder"]
11729152Di2015UniqueSeparatorObject
11729152Di2015UniqueSeparatorObject
11729152Di2015UniqueSeparatordecimal
11729152Di2015UniqueSeparatorobject
11729152Di2015UniqueSeparatorobject
11729152Di2015UniqueSeparatordecimal
11729152Di2015UniqueSeparator if (SortOrders.Contains((decimal)dr["SortOrder"]))Di2015NewLine
11729152Di2015UniqueSeparatordecimal
11729163Di2015UniqueSeparatorDistinct()
11729269Di2015UniqueSeparatorAsEnumerable
11729269Di2015UniqueSeparatorvar sqlQuery = from d in dataDi2015NewLine               group d by new { d.LocationName, d.Year, d.Month, Di2015NewLine                                d.Denominator, d.Numerator } into groupItemDi2015NewLine               orderby groupItem.Key.Year, groupItem.Key.Month, Di2015NewLine                       groupItem.Key.LocationName Di2015NewLine               select newDi2015NewLine               {Di2015NewLine                   IndicatorName,Di2015NewLine                   groupItem.Key.LocationName,Di2015NewLine                   groupItem.Key.Year,Di2015NewLine                   groupItem.Key.Month,Di2015NewLine                   Numerator = groupItem.Sum(x => x.Numerator),Di2015NewLine                   groupItem.Key.Denominator,Di2015NewLine               };Di2015NewLineDi2015NewLinevar finalResult = sqlQuery.AsEnumerable()Di2015NewLine     .Select(item => new {Di2015NewLine                 item.IndicatorName,Di2015NewLine                 item.LocationName,Di2015NewLine                 Year = item.Year == null ? "Not Available" Di2015NewLine                                          : item.Year.ToString(),Di2015NewLine                 Month = item.Month == null ? "Not Available" Di2015NewLine                                            : item.Month.ToString("00"),Di2015NewLine                 item.Numerator,Di2015NewLine                 item.DenominatorDi2015NewLine             })Di2015NewLine     .ToList();Di2015NewLine
11729359Di2015UniqueSeparatorTryParse
11729359Di2015UniqueSeparatorstring
11729359Di2015UniqueSeparatorPoint
11729371Di2015UniqueSeparatorSC_CLOSE
11729371Di2015UniqueSeparatorSendMessage
11729371Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLinePublic static extern int SendMessage(int hWnd,uint Msg,int wParam,int lParam);Di2015NewLinepublic const int WM_SYSCOMMAND = 0x0112;Di2015NewLinepublic const int SC_CLOSE = 0xF060;Di2015NewLineDi2015NewLineIntPtr window = FindWindow(null, "Location Browser Error");Di2015NewLineif (window != IntPtr.Zero)Di2015NewLine{Di2015NewLine   Console.WriteLine("Window found, closing...");Di2015NewLineDi2015NewLine   SendMessage((int) window, WM_SYSCOMMAND, SC_CLOSE, 0);  Di2015NewLine}Di2015NewLine
11729439Di2015UniqueSeparator <authentication mode="Windows">Di2015NewLine <forms Di2015NewLine    name=".ASPXAUTH" Di2015NewLine    loginUrl="login.aspx" Di2015NewLine    defaultUrl="default.aspx" Di2015NewLine    protection="All" Di2015NewLine    timeout="30" Di2015NewLine    path="/" Di2015NewLine    requireSSL="false" Di2015NewLine    slidingExpiration="true" Di2015NewLine    cookieless="UseDeviceProfile" Di2015NewLine    domain="companySite" Di2015NewLine    enableCrossAppRedirects="true">Di2015NewLine    <credentials passwordFormat="SHA1" />Di2015NewLine </forms>Di2015NewLine <passport redirectUrl="internal" />Di2015NewLine </authentication>Di2015NewLine
11729556Di2015UniqueSeparator    tryDi2015NewLine    {Di2015NewLine        if (txtbox1.Text.ToString().Trim() == string.Empty)Di2015NewLine        {Di2015NewLine            MessageBox.Show("Description is required.");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        if (txtbox2.Text.ToString().Trim() == string.Empty)Di2015NewLine        {Di2015NewLine            MessageBox.Show("Abbr is required.");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        DataRow dr = mydataSet.Tables[0].NewRow();Di2015NewLine        dr["Descript"] = txtbox1.Text;Di2015NewLine        dr["Abbr"] = txtbox2.Text;Di2015NewLine        dr["SortOrder"] = Convert.ToDecimal(numericOrder.Value);Di2015NewLine        if (SortOrders.Contains((decimal)dr["SortOrder"]))Di2015NewLine        {Di2015NewLine            MessageBox.Show("Please select another one, this one is already used.");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        mydataSet.Tables[0].Rows.Add(dr);Di2015NewLine        dgv.DataSource = mydataSet.Tables[0];Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        MessageBox.Show(ex.Message);Di2015NewLine    }Di2015NewLine
11729565Di2015UniqueSeparatorstring CategoryName = categoryNode.InnerText;Di2015NewLine
11729611Di2015UniqueSeparatorWhere
11729611Di2015UniqueSeparatorRegEx
11729632Di2015UniqueSeparatorushort
11729632Di2015UniqueSeparatorushort
11729632Di2015UniqueSeparatorushort
11729632Di2015UniqueSeparatorushort
11729632Di2015UniqueSeparatortypeof(MyEnum).Name
11729632Di2015UniqueSeparatorUInt16
11729632Di2015UniqueSeparatorType.GetEnumUnderlyingType
11729632Di2015UniqueSeparatorif (typeof(MyEnum).GetEnumUnderlyingType() == typeof(ushort))Di2015NewLine{Di2015NewLine    // Yup, the underlying type is ushortDi2015NewLine}Di2015NewLine
11729632Di2015UniqueSeparatorMyEnum
11729632Di2015UniqueSeparatorushort
11729632Di2015UniqueSeparatorif (typeof(string) != typeof(object))Di2015NewLine{Di2015NewLine    Debugger.Break();Di2015NewLine}Di2015NewLine
11729632Di2015UniqueSeparatorType.IsAssignableFrom
11729657Di2015UniqueSeparatorif
11729657Di2015UniqueSeparatorNullReferenceException
11729657Di2015UniqueSeparatorpublic static void NullSafeInvoke(this EventHandler handler,Di2015NewLine                                  object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (handler != null)Di2015NewLine    {Di2015NewLine        handler(this, e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11729657Di2015UniqueSeparatorprivate void OnSomethingChanged(EventArgs e)Di2015NewLine{Di2015NewLine    SomethingEvent.NullSafeInvoke(this, e);Di2015NewLine}Di2015NewLine
11729657Di2015UniqueSeparatorEventHandler<T>
11729682Di2015UniqueSeparatorpublic ActionResult Index(int id = 0, string name = "user") { ... }Di2015NewLine
11729700Di2015UniqueSeparatorvar searchRows = Di2015NewLine        rows.Where(tr => tr.ItemArrayDi2015NewLine            .Any(ti => ti.ToString().IndexOf("wildcardSearchString", StringComparison.CurrentCultureIgnoreCase) > 0))Di2015NewLine
11729700Di2015UniqueSeparatorstring searchPattern = "some*string".Replace("*", ".*");Di2015NewLinevar searchRows = Di2015NewLine        rows.Where(tr => tr.ItemArrayDi2015NewLine            .Any(ti => Regex.IsMatch(ti.ToString(), searchPattern)))Di2015NewLine
11729717Di2015UniqueSeparatorList<int> indices = new List<int>();Di2015NewLinefor (int i=0; i<myarray.Length; i++)Di2015NewLine{Di2015NewLine    if (myarray[i] == "reserved") indices.Add(i);Di2015NewLine}Di2015NewLine
11729776Di2015UniqueSeparatornamespace CollectionsWithIntentionsDi2015NewLine{Di2015NewLine    using System.Collections.Generic;Di2015NewLine    using System.Diagnostics;Di2015NewLine    using System.Linq;Di2015NewLineDi2015NewLine    internal class ProgramDi2015NewLine    {Di2015NewLine        #region MethodsDi2015NewLineDi2015NewLine        private static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var communications = new[]Di2015NewLine                {Di2015NewLine                    new Communication { Intention = new Intention { UID = 1 } },Di2015NewLine                    new Communication { Intention = new Intention { UID = 2 } },Di2015NewLine                    new Communication { Intention = new Intention { UID = 3 } },Di2015NewLine                    new Communication { Intention = new Intention { UID = 4 } },Di2015NewLine                };Di2015NewLine            var users = new[]Di2015NewLine                {Di2015NewLine                    new User { UserLocations = new List<UserLocation>(new[] { new UserLocation { LID = 2 },new UserLocation{LID=5}  }) },Di2015NewLine                    new User { UserLocations = new List<UserLocation>(new[] { new UserLocation { LID = 3 } }) }Di2015NewLine                };Di2015NewLineDi2015NewLine            IEnumerable<Communication> res =Di2015NewLine                communications.Where(w => users.Any(a => a.UserLocations.Any(b=>b.LID == w.Intention.UID)));Di2015NewLine            foreach (Communication communication in res)Di2015NewLine            {Di2015NewLine                Trace.WriteLine(communication);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLineDi2015NewLine    internal class CommunicationDi2015NewLine    {Di2015NewLine        #region Public PropertiesDi2015NewLineDi2015NewLine        public Intention Intention { get; set; }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region Public Methods and OperatorsDi2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return string.Concat("Communication-> Intention:", this.Intention.UID);Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLineDi2015NewLine    internal class IntentionDi2015NewLine    {Di2015NewLine        #region Public PropertiesDi2015NewLineDi2015NewLine        public int UID { get; set; }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLineDi2015NewLine    internal class UserDi2015NewLine    {Di2015NewLine        #region Public PropertiesDi2015NewLineDi2015NewLine        public List<UserLocation> UserLocations { get; set; }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLineDi2015NewLine    internal class UserLocationDi2015NewLine    {Di2015NewLine        #region Public PropertiesDi2015NewLineDi2015NewLine        public int LID { get; set; }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLine}Di2015NewLine
11729776Di2015UniqueSeparatorCommunication-> Intention:2Di2015NewLineCommunication-> Intention:3Di2015NewLine
11729958Di2015UniqueSeparator     Response.AddFileDependency("Your folder path");Di2015NewLine
11730035Di2015UniqueSeparatorvar a = "12345";Di2015NewLinevar b = "1234A";Di2015NewLine
11730035Di2015UniqueSeparatora[0]
11730035Di2015UniqueSeparatorb[0]
11730035Di2015UniqueSeparatora[1]
11730035Di2015UniqueSeparatorb[1]
11730035Di2015UniqueSeparator/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Tono NamDi2015NewLineDi2015NewLineDescription:This is the description of the file....Di2015NewLineDi2015NewLine/////*/Di2015NewLine
11730035Di2015UniqueSeparator/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Di2015NewLineDi2015NewLineDescription:Di2015NewLineDi2015NewLine/////*/Di2015NewLine
11730035Di2015UniqueSeparator var regexPattern = @"(?s)(/\\*/*.+Programmer:)(?<name>[^\\r\\n]*?)(\\r.*Description:)(?<desc>[^\\r\\n]*)(\\r.*?/*\\*/)";Di2015NewLine
11730035Di2015UniqueSeparator/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Tono Nam bla bla blaDi2015NewLineDi2015NewLineDescription:THIS IS A DIFFERENT DESCRIPTIONDi2015NewLineDi2015NewLine/////*/Di2015NewLine
11730035Di2015UniqueSeparator/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Di2015NewLineDi2015NewLineDescription:Di2015NewLineDi2015NewLine/////*/Di2015NewLine
11730035Di2015UniqueSeparator// the subject we want to testDi2015NewLine            var subject =Di2015NewLine@"/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Tono NamDi2015NewLineDi2015NewLineDescription:This is the description of the file....Di2015NewLineDi2015NewLine/////*/";Di2015NewLineDi2015NewLine            // the actual pattern this should be a readonly constant type on a real program cause it never should changeDi2015NewLine            var pattern =Di2015NewLine@"/*/////Di2015NewLineDi2015NewLineCopyright content which is a lot goes in here.Di2015NewLineDi2015NewLineProgrammer:Di2015NewLineDi2015NewLineDescription:Di2015NewLineDi2015NewLine/////*/";Di2015NewLineDi2015NewLine            // we use this pattern to turn the first subject into the second if we canDi2015NewLine            var regexPattern = @"(?s)(/\\*/*.+Programmer:)(?<name>[^\\r\\n]*?)(\\r.*Description:)(?<desc>[^\\r\\n]*)(\\r.*?/*\\*/)";Di2015NewLineDi2015NewLine            // note $1 means group 1 so here we are basically removing the groups name and descDi2015NewLine            var newSubject = Regex.Replace(subject, regexPattern, "$1$2$3");Di2015NewLineDi2015NewLine            // at this point if newSubject = pattern we know that the header is formatted correctly!Di2015NewLineDi2015NewLine            // Let's see where they are different!Di2015NewLine            for (int i = 0; i < pattern.Length; i++)Di2015NewLine            {Di2015NewLine                if (pattern[i] != newSubject[i])Di2015NewLine                {Di2015NewLine                    throw new Exception("There is a problem at index " + i);Di2015NewLine                }Di2015NewLine            }Di2015NewLine
11730035Di2015UniqueSeparator/
11730042Di2015UniqueSeparatordate
11730042Di2015UniqueSeparatorDateTime
11730042Di2015UniqueSeparator<span data-livestamp="<%= (date - new DateTime(1970,1,1,0,0,0)).TotalSeconds) %>">Di2015NewLine</span>Di2015NewLine
11730084Di2015UniqueSeparatorpublic interface IExecute { IList Execute(); } Di2015NewLine
11730084Di2015UniqueSeparatorpublic class SimpleExecute : IExecute<int>   Di2015NewLine{   Di2015NewLine   public List<int> Execute()   Di2015NewLine   { return a list of ints... }   Di2015NewLine   IList IExecute.Execute() { return this.Execute(); }Di2015NewLine}Di2015NewLine
11730084Di2015UniqueSeparatorIExecute.Execute()
11730084Di2015UniqueSeparatorList<IExecute> iExecuteList = //whatever;Di2015NewLineforeach (var ix in iExecuteList)Di2015NewLine{Di2015NewLine    IList list = ix.Execute();Di2015NewLine}Di2015NewLine
11730084Di2015UniqueSeparatorIList<string>
11730084Di2015UniqueSeparatorIList<int>
11730084Di2015UniqueSeparatorint
11730084Di2015UniqueSeparatorstring
11730084Di2015UniqueSeparatorobject
11730140Di2015UniqueSeparatorLINQtoXML
11730140Di2015UniqueSeparatorstring items="1,4,6,3";Di2015NewLineXElement elm = new XElement("foo");Di2015NewLineforeach(var  item in items.Split(','))Di2015NewLine{Di2015NewLine    elm.Add(new XElement("id",item));Di2015NewLine}Di2015NewLine
11730140Di2015UniqueSeparatorele
11730224Di2015UniqueSeparatorushort a;Di2015NewLineushort b;Di2015NewLineDi2015NewLine// @mikez pointed a & b are  promoted to int when addedDi2015NewLine// C# spec, 7.3.6.2 Binary numeric promotionsDi2015NewLineushort result = (ushort)(a + b); Di2015NewLine
11730224Di2015UniqueSeparatorulong a;Di2015NewLineulong b;Di2015NewLineDi2015NewLineulong result = a + b;Di2015NewLine
11730224Di2015UniqueSeparatorList<ushort>
11730224Di2015UniqueSeparatorList<ulong>
11730327Di2015UniqueSeparatorpublic class MainObjectDi2015NewLine{Di2015NewLine    public Root root { get; set; }Di2015NewLine}Di2015NewLine
11730327Di2015UniqueSeparatorpublic class RootDi2015NewLine{Di2015NewLine    public List<OuterQSS> qss { get; set; }Di2015NewLine}Di2015NewLine
11730327Di2015UniqueSeparatorpublic class OuterQSSDi2015NewLine{Di2015NewLine    public string id { get; set; }Di2015NewLine    public List<InnerQSS> qss { get; set; }Di2015NewLine}Di2015NewLine
11730327Di2015UniqueSeparatorpublic class InnerQSSDi2015NewLine{Di2015NewLine    public string id { get; set; }Di2015NewLine    public string tp { get; set; }Di2015NewLine    public string ck { get; set; }Di2015NewLine    public string dp { get; set; }Di2015NewLine}Di2015NewLine
11730327Di2015UniqueSeparatorDeserialize<Commn.foo2> Di2015NewLine
11730327Di2015UniqueSeparatorDeserialize<MainObject>Di2015NewLine
11730443Di2015UniqueSeparatorwhile loop
11730443Di2015UniqueSeparatorProgressBar
11730443Di2015UniqueSeparatorInvoke();
11730443Di2015UniqueSeparatorInvoke(new myUpdate(updateProgress), pval);//call invoke whenever you need to update the progress bar assuming pval is an integer with the value to update with. This could be in a thread for instance.Di2015NewLineDi2015NewLine//declare this as a class level delegateDi2015NewLineprivate delegate void myUpdate(int progress);Di2015NewLineDi2015NewLine//method to update progress barDi2015NewLineprivate void updateProgress(int progress)Di2015NewLine{Di2015NewLine    progressBar.Value = progress;Di2015NewLine}Di2015NewLine
11730447Di2015UniqueSeparatorInterlocked.Increment
11730447Di2015UniqueSeparatorobject obj = new object();Di2015NewLineDi2015NewLinevoid thMethod()Di2015NewLine{Di2015NewLine    while (_i < 100)Di2015NewLine    {Di2015NewLine        lock (obj)Di2015NewLine        {Di2015NewLine            Console.WriteLine(_i);Di2015NewLine            _i++;Di2015NewLine        }Di2015NewLine        Thread.Sleep((new Random()).Next(1, 500));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11730532Di2015UniqueSeparatordb.Caglas.Where(c => c.ID == 1).SingleOrDefault();
11730594Di2015UniqueSeparatorString docname = ((FrameworkElement)sender).DataContext.ToString()Di2015NewLine
11730614Di2015UniqueSeparatorpublic partial class ucBuyerList : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine    public delegate void BuyerSelectedEventHandler(object sender, EventArgs e);Di2015NewLineDi2015NewLine    public event BuyerSelectedEventHandler BuyerSelected;Di2015NewLineDi2015NewLine    public string Name;Di2015NewLine    public string AUID;Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Select the first buyer in the list when the user control loadsDi2015NewLineDi2015NewLine        if (!IsPostBack)Di2015NewLine        {Di2015NewLine            lbBuyerList.SelectedIndex = 0;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnBuyerSelected(EventArgs e)Di2015NewLine    {Di2015NewLine        BuyerSelectedEventHandler handler = BuyerSelected;Di2015NewLine        if (handler != null)Di2015NewLine        {Di2015NewLine            handler(this, new EventArgs());Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void lbBuyerList_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Name = lbBuyerList.SelectedItem.Text;Di2015NewLine        AUID = lbBuyerList.SelectedItem.Value;Di2015NewLine        OnBuyerSelected(e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11730643Di2015UniqueSeparator    var selectedValues = listBox1.SelectedItem.ToString().Split('  ');Di2015NewLineDi2015NewLine    if (selectedValues.Length == 3)Di2015NewLine    {Di2015NewLine       var cardName = selectedValues[0];Di2015NewLine       MessageBox.Show(cardName);Di2015NewLine    }Di2015NewLine
11730646Di2015UniqueSeparator<my:HoursWorked x:Key="hwViewSource" />
11730646Di2015UniqueSeparator<Binding Source="{Binding}"
11730695Di2015UniqueSeparator    this.BackgroundImage = base.BackgroundImage;Di2015NewLine
11730695Di2015UniqueSeparatorprotected override void OnPaint(PaintEventArgs e)Di2015NewLine{Di2015NewLine    if (BackgroundImage != null) e.Graphics.DrawImage(BackgroundImage, 0, 0);Di2015NewLine}Di2015NewLine
11730711Di2015UniqueSeparatorpublic sealed class PlaceHolderAttribute:ValidationAttributeDi2015NewLine{Di2015NewLine    private readonly string _placeholderValue;Di2015NewLineDi2015NewLine    public override bool IsValid(object value)Di2015NewLine    {Di2015NewLine        var stringValue = value.ToString();Di2015NewLine        if (stringValue == _placeholderValue)Di2015NewLine        {Di2015NewLine            ErrorMessage = string.Format("Please fill out {0}", _placeholderValue);Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public PlaceHolderAttribute(string placeholderValue)Di2015NewLine    {Di2015NewLine        _placeholderValue = placeholderValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11730711Di2015UniqueSeparator[Required]Di2015NewLine[DataType(DataType.Text)]Di2015NewLine[Display(Name = "First Name")]Di2015NewLine[PlaceHolder("First Name")]Di2015NewLinepublic string FirstName { get; set; }Di2015NewLine
11730873Di2015UniqueSeparator        var pattern =Di2015NewLine@"/+File description/+ Di2015NewLineName: (?<name>.+) Di2015NewLineSize: (?<size>.+) Di2015NewLineDescription: (?<des>.+) Di2015NewLineDate: (?<date>.+) Di2015NewLine/+";Di2015NewLine        var temp = Regex.Replace(data, pattern, new MatchEvaluator(eval));Di2015NewLine        Console.WriteLine("{0}", temp);Di2015NewLine    //...Di2015NewLine    string eval(Match mx)Di2015NewLine    {Di2015NewLine        Stack<Group> stk = new Stack<Group>();Di2015NewLine        for(int i=1; i<mx.Groups.Count; ++i)Di2015NewLine            stk.Push(mx.Groups[i]);Di2015NewLineDi2015NewLine        string result = mx.Groups[0].Value;Di2015NewLine        int offt = mx.Index;Di2015NewLine        while(stk.Count > 0)Di2015NewLine        {Di2015NewLine            var g = stk.Pop();Di2015NewLine            int index = g.Index - offt;Di2015NewLine            result = result.Substring(0,index) + result.Substring(index+g.Length);Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
11730873Di2015UniqueSeparator    string eval2(Match mx)Di2015NewLine    {Di2015NewLine        string data = mx.Value;Di2015NewLine        data = Regex.Replace(data, "Name: .+", "Name: ");Di2015NewLine        data = Regex.Replace(data, "Size: .+", "Size: ");Di2015NewLine        data = Regex.Replace(data, "Description: .+", "Description: ");Di2015NewLine        data = Regex.Replace(data, "Date: .+", "Date: ");Di2015NewLine        return data;Di2015NewLine    }Di2015NewLine
11730919Di2015UniqueSeparatortestArray.Where(c => c).Count();
11730919Di2015UniqueSeparatortestArray.Where(c => !c).Count();
11730969Di2015UniqueSeparator        if (sArray2.Length == sArray1.Length)Di2015NewLine        {Di2015NewLine            sArray2.CopyTo(sArray1, 0);    Di2015NewLine        }Di2015NewLine
11731012Di2015UniqueSeparatorAsEnumerable
11731012Di2015UniqueSeparatorAsQueryable
11731012Di2015UniqueSeparatorAsEnumerable
11731012Di2015UniqueSeparatorAsQueryable
11731012Di2015UniqueSeparatorToList
11731012Di2015UniqueSeparatorToList
11731031Di2015UniqueSeparatorMajor_1
11731031Di2015UniqueSeparatorMajor
11731031Di2015UniqueSeparatorMajor
11731031Di2015UniqueSeparatorfrom s in ctx.StudentsDi2015NewLineselect s.Major_1.MajorNameDi2015NewLine
11731121Di2015UniqueSeparator// Obtain a reference to the navigation property you are interested inDi2015NewLinevar navProp = GetNavigationProperty();Di2015NewLine// Load the metadata workspaceDi2015NewLineMetadataWorkspace metadataWorkspace = null;Di2015NewLinebool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);Di2015NewLineDi2015NewLine// Get the association type from the storage modelDi2015NewLinevar association = metadataWorkspaceDi2015NewLine    .GetItems<AssociationType>(DataSpace.SSpace)Di2015NewLine    .Single(a => a.Name == navProp.RelationshipType.Name)Di2015NewLineDi2015NewLine// Then look at the referential constraintsDi2015NewLinevar toColumns = String.Join(",", Di2015NewLine    association.ReferentialConstraints.SelectMany(rc => rc.ToProperties));Di2015NewLinevar fromColumns = String.Join(",", Di2015NewLine    association.ReferentialConstraints.SelectMany(rc => rc.FromProperties));Di2015NewLine
11731121Di2015UniqueSeparatorNavigationProperty[] foreignKeys = entity.NavigationPropertiesDi2015NewLine  .Where(np => np.DeclaringType == entity &&Di2015NewLine          ((AssociationType)np.RelationshipType).IsForeignKey).ToArray();Di2015NewLineDi2015NewLineforeach (NavigationProperty foreignKey in foreignKeys)Di2015NewLine{Di2015NewLine   foreach(var rc in GetSourceSchemaTypes<AssociationType>()Di2015NewLine       .Single(x => x.Name == foreignKey.RelationshipType.Name)Di2015NewLine       .ReferentialConstraints)Di2015NewLine   {Di2015NewLine       foreach(var tp in rc.ToProperties)Di2015NewLine           WriteLine(tp.Name);Di2015NewLine       foreach(var fp in rc.FromProperties)Di2015NewLine           WriteLine(fp.Name);Di2015NewLine   }Di2015NewLine}Di2015NewLine
11731169Di2015UniqueSeparatorToString("hh':'mm':'ss") Di2015NewLine
11731169Di2015UniqueSeparatorToString("c") Di2015NewLine
11731346Di2015UniqueSeparatorSELECTDi2015NewLine    Category,Di2015NewLine    IF(Date_SUB(CURDATE(), Interval 16 Hour) <= Datez, SUM(1), 0) AS c16hours,Di2015NewLine    IF(Date_SUB(CURDATE(), Interval 1 day) <= Datez, SUM(1), 0) AS c1day,Di2015NewLine    IF(Date_SUB(CURDATE(), Interval 30 days) <= Datez, SUM(1), 0) AS c30days,Di2015NewLine    (...)Di2015NewLineFROM tickets Di2015NewLineGROUP BY CategoryDi2015NewLine
11731618Di2015UniqueSeparator <system.web>Di2015NewLine    <trace enabled="true" pageOutput="true" requestLimit="40" localOnly="false"/>Di2015NewLine  </system.web>Di2015NewLine
11731618Di2015UniqueSeparator<%@ Page Title="Home Page" Trace="true" Language="C#" AutoEventWireup="true"Di2015NewLine    CodeFile="Default.aspx.cs" Inherits="_Default" %>Di2015NewLine
11731702Di2015UniqueSeparatorFooBar
11731702Di2015UniqueSeparatorpublic void Refresh() {Di2015NewLine    var tmp = new Dictionary<Foo, Bar>();Di2015NewLine    // Fill out FooBar from DBDi2015NewLine    FooBar = tmp;Di2015NewLine}Di2015NewLine
11731702Di2015UniqueSeparatorRefresh
11731702Di2015UniqueSeparatorvolatile
11731903Di2015UniqueSeparator/Height 216
11731903Di2015UniqueSeparator/Width 288
11731935Di2015UniqueSeparatorasync
11731935Di2015UniqueSeparatorpublic
11731935Di2015UniqueSeparatorawait
11731935Di2015UniqueSeparatorreturn
11731935Di2015UniqueSeparatorawait
11731935Di2015UniqueSeparatorasync
11731935Di2015UniqueSeparatorasync
11731935Di2015UniqueSeparatorawait
11731984Di2015UniqueSeparator[XmlElement]
11731984Di2015UniqueSeparatorClass ADi2015NewLine{Di2015NewLine   public string propertyA1  { get; set; }Di2015NewLine   [XmlElement("B")]Di2015NewLine   public List<B> bList { get; set; }Di2015NewLine}Di2015NewLine
11732042Di2015UniqueSeparatorfrmNewProduct newProduct = new frmNewProduct(_inventory, Mode.add);Di2015NewLinenewProduct.Show();Di2015NewLineInventory variable = newProduct._inventory;Di2015NewLine
11732042Di2015UniqueSeparatorclass BaseClass {Di2015NewLine}Di2015NewLineDi2015NewLineclass DerivedClass : BaseClass {Di2015NewLine    public int MyProperty { get; set; }Di2015NewLine}Di2015NewLine
11732042Di2015UniqueSeparatorBaseClass base = new DerivedClass();Di2015NewLinebase.MyProperty = 12; // ERRORDi2015NewLine
11732042Di2015UniqueSeparatorDerivedClass derived = new DerivedClass();Di2015NewLinederived.MyProperty = 12; // WorksDi2015NewLine
11732245Di2015UniqueSeparatorException exc = Server.GetLastError();Di2015NewLine
11732251Di2015UniqueSeparatorshort[]
11732251Di2015UniqueSeparatorDepthImageFrame
11732251Di2015UniqueSeparatorStreamWriter
11732251Di2015UniqueSeparatorshort[]
11732251Di2015UniqueSeparatorDepthFrameReadyEventArgs
11732251Di2015UniqueSeparatorAllFramesReadyEventArgs
11732251Di2015UniqueSeparatorDepthImageFrame
11732251Di2015UniqueSeparator short[] depthData;Di2015NewLineDi2015NewLine ...Di2015NewLineDi2015NewLine using (DepthImageFrame depthFrame = e.OpenDepthImageFrame(()) //create a new frame every time one is readyDi2015NewLine {Di2015NewLine       //assign a value to depthDataDi2015NewLine       depthData = new short[depthFrame.PixelDataLength];Di2015NewLine } Di2015NewLine
11732251Di2015UniqueSeparatordepthData
11732251Di2015UniqueSeparatorDepthImageFrame.CopyPixelDataTo
11732251Di2015UniqueSeparator using (DepthImageFrame depthFrame = e.OpenDepthImageFrame(()) //create a new frame every time one is readyDi2015NewLine {Di2015NewLine       //assign a value to depthDataDi2015NewLine       depthData = new short[depthFrame.PixelDataLength];Di2015NewLineDi2015NewLine       //add raw depth data to depthDataDi2015NewLine       depthFrame.CopyPixelDataTo(depthData);Di2015NewLine } Di2015NewLine
11732251Di2015UniqueSeparatorStreamWriter
11732251Di2015UniqueSeparator private void SaveDepthData(short[] depthData)Di2015NewLine {Di2015NewLine       //initialize a StreamWriterDi2015NewLine       StreamWriter sw = new StreamWriter(@"C:/Example.txt");Di2015NewLineDi2015NewLine       //search the depth data and add it to the fileDi2015NewLine       for (int i = 0; i < depthData.Length; i++)Di2015NewLine       {Di2015NewLine            sw.WriteLine(depthData[i] + "\\n"); //\\n for a new lineDi2015NewLine       }Di2015NewLineDi2015NewLine       //dispose of swDi2015NewLine       sw.Close();Di2015NewLine }      Di2015NewLineDi2015NewLine ...Di2015NewLineDi2015NewLine SaveDepthData(depthData);Di2015NewLine
11732261Di2015UniqueSeparatorIntPtr
11732261Di2015UniqueSeparatorMarshal.PtrToStructure
11732261Di2015UniqueSeparatorsockaddr
11732261Di2015UniqueSeparatorsa_family
11732261Di2015UniqueSeparatorMarshal.PtrToStructure
11732289Di2015UniqueSeparatorinternal
11732289Di2015UniqueSeparatorProgram
11732289Di2015UniqueSeparatorpublic
11732289Di2015UniqueSeparatorinternal
11732433Di2015UniqueSeparator//Load customer ID to a comboboxDi2015NewLineprivate void LoadCustomersId()Di2015NewLine{Di2015NewLine    var connectionString = "connection string goes here";Di2015NewLine    using (var connection = new MySqlConnection(connectionString))Di2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        var query = "SELECT Id FROM Customers";Di2015NewLine        using (var command = new MySqlCommand(query, connection))Di2015NewLine        {Di2015NewLine            using (var reader = command.ExecuteReader())Di2015NewLine            {Di2015NewLine                //Iterate through the rows and add it to the combobox's itemsDi2015NewLine                while (reader.Read())Di2015NewLine                {Di2015NewLine                    CustomerIdComboBox.Items.Add(reader.GetString("Id"));    Di2015NewLine                }Di2015NewLine            }    Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//Load customer details using the IDDi2015NewLineprivate void LoadCustomerDetailsById(int id)Di2015NewLine{Di2015NewLine    var connectionString = "connection string goes here";Di2015NewLine    using (var connection = new MySqlConnection(connectionString))Di2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        var query = "SELECT Id, Firstname, Lastname FROM Customer WHERE Id = @customerId";Di2015NewLine        using (var command = new MySqlCommand(query, connection))Di2015NewLine        {Di2015NewLine            //Always use SQL parameters to avoid SQL injection and it automatically escapes charactersDi2015NewLine            command.Parameters.AddWithValue("@customerId", id);Di2015NewLine            using (var reader = command.ExecuteReader())Di2015NewLine            {Di2015NewLine                //No customer found by supplied IDDi2015NewLine                if (!reader.HasRows)Di2015NewLine                    return;Di2015NewLineDi2015NewLine                CustomerIdTextBox.Text = reader.GetInt32("Id").ToString();Di2015NewLine                FirstnameTextBox.Text = reader.GetString("Firstname");Di2015NewLine                LastnameTextBox.Text = reader.GetString("Lastname");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//Pass the selected ID in the combobox to the customer details loader method Di2015NewLineprivate void CustomerIdComboBox_SelectedIndexChanged(object s, EventArgs e)Di2015NewLine{Di2015NewLine    var customerId = Convert.ToInt32(CustomerIdComboBox.Text);Di2015NewLine    LoadCustomerDetailsById(customerId);Di2015NewLine}Di2015NewLine
11732687Di2015UniqueSeparator//auto-generated (or half implemented) codeDi2015NewLinepublic partial UserDi2015NewLine{Di2015NewLine    public partial void OnFirstNameChanged();Di2015NewLineDi2015NewLine    private string _FirstName = "";Di2015NewLine    public string FirstNameDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _FirstName;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _FirstName = value;Di2015NewLine            OnFirstNameChanged();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//MyCustomStuff.csDi2015NewLinepublic partial UserDi2015NewLine{Di2015NewLine    public partial void OnFirstNameChanged()Di2015NewLine    {Di2015NewLine        Console.Write(string.Format("Your name is {0}", FirstName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11732691Di2015UniqueSeparatorSelectedIndex
11732691Di2015UniqueSeparatorint stationID = Convert.ToInt32(cbStation.SelectedItem.ToString());Di2015NewLineint locationID = Convert.ToInt32(cbLocation.SelectedItem.ToString());Di2015NewLine
11732691Di2015UniqueSeparatorint stationID = Convert.ToInt32(cbStation.Text);Di2015NewLineint locationID = Convert.ToInt32(cbLocation.Text);Di2015NewLine
11732691Di2015UniqueSeparatorls.stationID = stationID;Di2015NewLinels.locationID = locationID;Di2015NewLine
11732767Di2015UniqueSeparatorclass ChildForm : Form {Di2015NewLine    private Inventory _inventory;Di2015NewLineDi2015NewLine    public Inventory MyInventory {Di2015NewLine        get {Di2015NewLine            return _inventory;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnAccept_Click(object sender, EventArgs e) {Di2015NewLine        _inventory = <set_inventory_here>;Di2015NewLine        DialogResult = System.Windows.Forms.DialogResult.OK;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11732767Di2015UniqueSeparatorpublic void updateInventoryFromChild(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ChildForm childForm = new ChildForm();Di2015NewLine    if (childForm.ShowDialog() == System.Windows.Forms.DialogResult.OK) {Di2015NewLine        _inventory = childForm.MyInventory;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11732913Di2015UniqueSeparatorint ID = Int32.Parse(lblID.Text);Di2015NewLine
11732913Di2015UniqueSeparatorlblID.Text
11732913Di2015UniqueSeparatorint ID;Di2015NewLineif(!int.TryParse(lblID.Text, out ID))Di2015NewLine{Di2015NewLine   Console.WriteLine("Invalid Number in lblID.Text");Di2015NewLine}Di2015NewLine
11732958Di2015UniqueSeparatorRange("A1").SelectDi2015NewLineActiveCell.FormulaR1C1 = "abc"Di2015NewLineRange("A2").SelectDi2015NewLineActiveCell.FormulaR1C1 = "def"Di2015NewLineRange("A3").SelectDi2015NewLineActiveCell.FormulaR1C1 = "hij"Di2015NewLineRange("A4").SelectDi2015NewLineActiveCell.FormulaR1C1 = "klm"Di2015NewLineRange("A4,A1").Select    'It actually concatenates the cells you've selected, that info isn't ion the clipboard, if I selected three cells in the column it would be Range("A4,A1,A2").SelectDi2015NewLineRange("A1").ActivateDi2015NewLineSelection.Copy  Di2015NewLineDi2015NewLine'Range("B1").SelectDi2015NewLine'ActiveSheet.Paste   'when I paste onto new cells only two rows are taken upDi2015NewLine
11733229Di2015UniqueSeparator    <DataGrid ItemsSource="{Binding}" AutoGenerateColumns="True">//Set your all properties as you wantDi2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTextColumn Header="TOS" Binding="{Binding TOS}"></DataGridTextColumn>Di2015NewLine        <DataGridTextColumn Header="BU" Binding="{Binding BU}"></DataGridTextColumn>Di2015NewLine        <DataGridTextColumn Header="CLOSED" Binding="{Binding CLOSED}"></DataGridTextColumn>Di2015NewLine        <DataGridTemplateColumn>Di2015NewLine            <DataGridTemplateColumn.CellTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <!--This is how we can set Text Wrap-->Di2015NewLine                    <TextBox Text="{Binding CAT}" TextWrapping="Wrap"/> Di2015NewLine                </DataTemplate>Di2015NewLine            </DataGridTemplateColumn.CellTemplate>Di2015NewLine        </DataGridTemplateColumn>Di2015NewLine    </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
11733354Di2015UniqueSeparatornew
11733354Di2015UniqueSeparatorpublic new string ProductName { get; set; }
11733354Di2015UniqueSeparatorMyCompanyProductName
11733457Di2015UniqueSeparator// convert it to a datetimeDi2015NewLine// "d" is the required formatDi2015NewLinevar date = DateTime.ParseExact("7/23/1997", "d", CultureInfo.InvariantCulture);Di2015NewLineDi2015NewLine// now you can output the date in the user's cultureDi2015NewLinevar localizedDateString = date.ToString("d");Di2015NewLine
11733591Di2015UniqueSeparatorIEnumerables
11733591Di2015UniqueSeparatorList<MyEntity> source1 = ...;Di2015NewLineList<MyEntity> source2 = ...;Di2015NewLineIEnumerable<MyEntity> source3 = ...;Di2015NewLineDi2015NewLinevar mergedList = (from item in source1.Contact(source2).Concat(source3)Di2015NewLine                  group item by item.Name into gDi2015NewLine                  select new MyEntity { Name = g.Key, Value = g.Sum(e => e.Value) })Di2015NewLine                  .ToList();Di2015NewLine
11733602Di2015UniqueSeparatorpublic HttpResponseMessage Get()Di2015NewLine{Di2015NewLine    var listInt = new List<int>() { 1, 2 };Di2015NewLine    var listString = new List<string>() { "a", "b" };Di2015NewLineDi2015NewLine    return ControllerContext.RequestDi2015NewLine        .CreateResponse(HttpStatusCode.OK, new { listInt, listString });Di2015NewLine}Di2015NewLine
11733602Di2015UniqueSeparatorpublic object Get()Di2015NewLine{Di2015NewLine    var listInt = new List<int>() { 1, 2 };Di2015NewLine    var listString = new List<string>() { "a", "b" };Di2015NewLineDi2015NewLine    return  new { listInt, listString };Di2015NewLine}Di2015NewLine
11733602Di2015UniqueSeparatorAccept: application/jsonDi2015NewLine
11733668Di2015UniqueSeparatorif (myList.Count > 2)Di2015NewLine{Di2015NewLine    //push a positive to the head of the listDi2015NewLine    var firstPositive = myList.FirstOrDefault(x => x.val1 > 0 && x.val2 > 0);Di2015NewLine    if (firstPositive != null)Di2015NewLine    {Di2015NewLine        myList.Remove(firstPositive);Di2015NewLine        myList.Insert(0, firstPositive);Di2015NewLine    }Di2015NewLineDi2015NewLine    //push a positive to the tail of the listDi2015NewLine    var secondPositive = myList.Skip(1).FirstOrDefault(x => x.val1 > 0 && x.val2 > 0);Di2015NewLine    if (secondPositive != null)Di2015NewLine    {Di2015NewLine        myList.Remove(secondPositive);Di2015NewLine        myList.Add(secondPositive);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11733837Di2015UniqueSeparatortext/json
11733837Di2015UniqueSeparatorapplication/x-www-form-urlencoded
11733837Di2015UniqueSeparator// ...Di2015NewLinerequest.ContentType = "application/x-www-form-urlencoded";Di2015NewLineDi2015NewLinestring json = "json=" + HttpUtility.UrlEncode(data);Di2015NewLine// ...Di2015NewLine
11733837Di2015UniqueSeparatortext/json
11733837Di2015UniqueSeparatorjson
11733837Di2015UniqueSeparatorstring json = data;Di2015NewLine
11733837Di2015UniqueSeparator// on your PHP side:Di2015NewLine$post_body = file_get_contents('php://input');Di2015NewLine$json = json_decode($post_body);Di2015NewLine
11734010Di2015UniqueSeparatorDateTime
11734010Di2015UniqueSeparatorSqlCommand.Parameters
11734010Di2015UniqueSeparatorDateTime
11734010Di2015UniqueSeparatorDateTime.MinValue
11734095Di2015UniqueSeparatorvar carsPartial = cars.Select("new car(name, year)").Cast<car>().ToList();Di2015NewLine
11734372Di2015UniqueSeparatorpublic static byte[] AddTo(this byte[] bytaArray1, byte[] bytaArray2){...}Di2015NewLine
11734449Di2015UniqueSeparatorforeach(var header in file.Headers ?? Enumerable.Empty<T>()){Di2015NewLine  //do stuffDi2015NewLine}Di2015NewLine
11734449Di2015UniqueSeparatorHeaders
11734449Di2015UniqueSeparatornull
11734449Di2015UniqueSeparatorforeach(var header in file.Headers.OrEmptyIfNull()){Di2015NewLine  //do stuffDi2015NewLine}Di2015NewLine
11734507Di2015UniqueSeparator    protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine    {Di2015NewLine      if (e.Row.RowType == DataControlRowType.Footer)Di2015NewLine      {Di2015NewLine         Label lbl = (Label)e.Row.FindControl("lblTotal");Di2015NewLine         lbl.Text = grdTotal.ToString("c");Di2015NewLine      }Di2015NewLine   }Di2015NewLine
11734507Di2015UniqueSeparator        decimal sumFooterValue = 0;Di2015NewLine  protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine        {Di2015NewLine         string sponsorBonus = ((Label)e.Row.FindControl("Label2")).Text;Di2015NewLine         string pairingBonus = ((Label)e.Row.FindControl("Label3")).Text;Di2015NewLine         string staticBonus = ((Label)e.Row.FindControl("Label4")).Text;Di2015NewLine         string leftBonus = ((Label)e.Row.FindControl("Label5")).Text;Di2015NewLine         string rightBonus = ((Label)e.Row.FindControl("Label6")).Text;Di2015NewLine         decimal totalvalue = Convert.ToDecimal(sponsorBonus) + Convert.ToDecimal(pairingBonus) + Convert.ToDecimal(staticBonus) + Convert.ToDecimal(leftBonus) + Convert.ToDecimal(rightBonus);Di2015NewLine         e.Row.Cells[6].Text = totalvalue.ToString();Di2015NewLine        sumFooterValue += totalvalue Di2015NewLine        }Di2015NewLineDi2015NewLine    if (e.Row.RowType == DataControlRowType.Footer)Di2015NewLine        {Di2015NewLine           Label lbl = (Label)e.Row.FindControl("lblTotal");Di2015NewLine           lbl.Text = sumFooterValue.ToString();Di2015NewLine        }Di2015NewLineDi2015NewLine   }Di2015NewLine
11734507Di2015UniqueSeparator <asp:GridView ID="GridView1" runat="server" DataSourceID="SqlDataSource1" Di2015NewLine        AutoGenerateColumns="False" DataKeyNames="ID" CellPadding="4" Di2015NewLine        ForeColor="#333333" GridLines="None" ShowFooter="True" Di2015NewLine                onrowdatabound="GridView1_RowDataBound">Di2015NewLine        <RowStyle BackColor="#EFF3FB" />Di2015NewLine        <Columns>Di2015NewLine            <asp:TemplateField HeaderText="Report Date" SortExpression="reportDate">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox1" runat="server" Text='<%# Bind("reportDate") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label1" runat="server" Di2015NewLine                        Text='<%# Bind("reportDate", "{0:dd MMMM yyyy}") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Sponsor Bonus" SortExpression="sponsorBonus">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox2" runat="server" Text='<%# Bind("sponsorBonus") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label2" runat="server" Di2015NewLine                        Text='<%# Bind("sponsorBonus", "{0:0.00}") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Pairing Bonus" SortExpression="pairingBonus">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox3" runat="server" Text='<%# Bind("pairingBonus") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label3" runat="server" Di2015NewLine                        Text='<%# Bind("pairingBonus", "{0:c}") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Static Bonus" SortExpression="staticBonus">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox4" runat="server" Text='<%# Bind("staticBonus") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label4" runat="server" Text='<%# Bind("staticBonus") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Left Bonus" SortExpression="leftBonus">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox5" runat="server" Text='<%# Bind("leftBonus") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label5" runat="server" Text='<%# Bind("leftBonus") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Right Bonus" SortExpression="rightBonus">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox6" runat="server" Text='<%# Bind("rightBonus") %>'></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label6" runat="server" Text='<%# Bind("rightBonus") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:TemplateField HeaderText="Total" SortExpression="total">Di2015NewLine                <EditItemTemplate>Di2015NewLine                    <asp:TextBox ID="TextBox7" runat="server"></asp:TextBox>Di2015NewLine                </EditItemTemplate>Di2015NewLine                <FooterTemplate>Di2015NewLine                    <asp:Label ID="lbltotal" runat="server" Text="Label"></asp:Label>Di2015NewLine                </FooterTemplate>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="Label7" runat="server"></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine                <ItemStyle Width="100px" />Di2015NewLineDi2015NewLine            </asp:TemplateField>Di2015NewLine        </Columns>Di2015NewLine        <FooterStyle BackColor="#507CD1" Font-Bold="True" ForeColor="White" />Di2015NewLine        <PagerStyle BackColor="#2461BF" ForeColor="White" HorizontalAlign="Center" />Di2015NewLine        <SelectedRowStyle BackColor="#D1DDF1" Font-Bold="True" ForeColor="#333333" />Di2015NewLine        <HeaderStyle BackColor="#507CD1" Font-Bold="True" ForeColor="White" />Di2015NewLine        <EditRowStyle BackColor="#2461BF" />Di2015NewLine        <AlternatingRowStyle BackColor="White" />            Di2015NewLine    </asp:GridView>Di2015NewLine
11734541Di2015UniqueSeparatorpublic partial class Form1 : Form {Di2015NewLine    public Form1() {Di2015NewLine        InitializeComponent();Di2015NewLine        label1.AutoSize = false;Di2015NewLine        label1.Size = new Size(100, 60);Di2015NewLine        label1.Text = "Autosize this";Di2015NewLine        label1.Anchor = AnchorStyles.Left | AnchorStyles.Right;Di2015NewLine        label1.Resize += new EventHandler(label1_Resize);Di2015NewLine    }Di2015NewLineDi2015NewLine    void label1_Resize(object sender, EventArgs e) {Di2015NewLine        using (var gr = label1.CreateGraphics()) {Di2015NewLine            Font font = label1.Font;Di2015NewLine            for (int size = (int)(label1.Height * 72 / gr.DpiY); size >= 8; --size) {Di2015NewLine                font = new Font(label1.Font.FontFamily, size, label1.Font.Style);Di2015NewLine                if (TextRenderer.MeasureText(label1.Text, font).Width <= label1.ClientSize.Width) break;Di2015NewLine            }Di2015NewLine            label1.Font = font;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e) {Di2015NewLine        label1_Resize(this, EventArgs.Empty);Di2015NewLine        base.OnLoad(e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11734624Di2015UniqueSeparatorSession
11734624Di2015UniqueSeparatorprotected void Button9_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Session["carG"] = Label1.Text;Di2015NewLine    Session["buttonKey"] = "carG";Di2015NewLine}Di2015NewLine
11734624Di2015UniqueSeparatorBookingForm.aspx
11734624Di2015UniqueSeparatorprivate string GetSessionValue()Di2015NewLine{Di2015NewLine    var key = Sesssion["buttonKey"] as string;Di2015NewLine    return Session[key] as string;Di2015NewLine}Di2015NewLine
11734659Di2015UniqueSeparatorType excelType = Type.GetTypeFromProgID("Excel.Application");Di2015NewLinedynamic excel = Activator.CreateInstance(excelType);Di2015NewLineexcel.Visible = true;Di2015NewLineexcel.Workbooks.Add();Di2015NewLine
11734669Di2015UniqueSeparatorstring s = new string(Array.ConvertAll(RXBuffer, x => (char)('0' + x)));Di2015NewLine
11734669Di2015UniqueSeparatorchar[]
11734669Di2015UniqueSeparatorToString()
11734669Di2015UniqueSeparatorstring s = new string(Array.ConvertAll(RXBuffer, x => (char)x));Di2015NewLine
11734669Di2015UniqueSeparatorchar[]
11734669Di2015UniqueSeparatorstring s = new string(RXBuffer);Di2015NewLine
11734670Di2015UniqueSeparatorClone
11734670Di2015UniqueSeparatorpublic object Clone()Di2015NewLine{Di2015NewLine    return MemberwiseClone();Di2015NewLine}Di2015NewLine
11734687Di2015UniqueSeparator    var id = (from transactions in testTransactions.TransactionsDi2015NewLine                                          orderby transactions.TransID descending select transactions.TransID).FirstOrDefault();Di2015NewLineif(id!=null)Di2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
11734712Di2015UniqueSeparatorBlendState.Opaque
11734739Di2015UniqueSeparatorListBox abcFeed = LayoutRoot.FindName("abcFeed") as ListBox;Di2015NewLine
11734746Di2015UniqueSeparator<Setting Name="EntityConnectionString2" Type="System.String" Scope="Application">Di2015NewLine  <Value Profile="(Default)">metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=System.Data.SqlClient;provider connection string="data source={0};initial catalog={1};persist security info=True;user id={2};password={3};encrypt=True;trustservercertificate=True;multipleactiveresultsets=True;App=EntityFramework"</Value>Di2015NewLine</Setting>Di2015NewLine
11734746Di2015UniqueSeparatorvar settings = Properties.Settings.Default;  Di2015NewLinestring constring = string.Format(settings.EntityConnectionString2, settings.Server, settings.Database, settings.User, settings.Password);Di2015NewLineNerdDinnerEntities db = new NerdDinnerEntities (constring);  Di2015NewLine
11734761Di2015UniqueSeparatorinputArray.Cast<object>().ToArray()
11734761Di2015UniqueSeparatorobject[]
11734761Di2015UniqueSeparatorOfType
11734813Di2015UniqueSeparatorprotected void Button7_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    bool BindNeeded = false;Di2015NewLineDi2015NewLine    SqlConnection connDelete = new SqlConnection("Data Source=19-20\\\\sqlexpress;" + "Initial Catalog = mpsip; Integrated Security = SSPI");Di2015NewLine    connDelete.Open();Di2015NewLine    String mySQL;Di2015NewLineDi2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLineDi2015NewLine        for (int i = 0; i < Repeater1.Items.Count; i++)Di2015NewLine        {Di2015NewLine            CheckBox CheckBox1 = (CheckBox)Di2015NewLine            Repeater1.Items[i].FindControl("CheckBox1");Di2015NewLine            if (((CheckBox)Repeater1.Items[i].FindControl("CheckBox1")).Checked)Di2015NewLine            {Di2015NewLineDi2015NewLine                //This assumes data type of messageID is integer, change (int) to the right typeDi2015NewLine                CheckBox CheckBox = (CheckBox)Repeater1.Items[i].FindControl("CheckBox1");Di2015NewLine                Literal litMessageId = (Literal)Repeater1.Items[i].FindControl("litMessageId");Di2015NewLineDi2015NewLine                string messageId = litMessageId.Text;Di2015NewLine                mySQL = string.Format("delete from messages where messageID = '{0}'", messageId);Di2015NewLineDi2015NewLine                SqlCommand cmdDelete = new SqlCommand(mySQL, connDelete);Di2015NewLine                cmdDelete.ExecuteNonQuery();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine                // Continue your code hereDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLineDi2015NewLine            }Di2015NewLine        }Di2015NewLine            if (BindNeeded)Di2015NewLine            {Di2015NewLine                Repeater1.DataBind();Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Response.Redirect("Messages.aspx");Di2015NewLine            }Di2015NewLineDi2015NewLine    }Di2015NewLine        catchDi2015NewLine    {Di2015NewLine        Response.Redirect("Messages.aspx");Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
11734908Di2015UniqueSeparatoryourString.Select(c => string.Format(Char.IsUpper(c) ? " {0}" : "{0}", c));Di2015NewLine
11734908Di2015UniqueSeparatorIEnumerable<string>
11734908Di2015UniqueSeparatorstring[] output = string.Split(" ", string.Join("", yourString.Select(c => string.Format(Char.IsUpper(c) ? " {0}" : "{0}", c)));Di2015NewLine
11734940Di2015UniqueSeparatorclasses
11734940Di2015UniqueSeparatormethods
11734940Di2015UniqueSeparatorpublic class Foo {Di2015NewLine   public string bar(){ Di2015NewLine     return "Hello";Di2015NewLine   }Di2015NewLine}Di2015NewLine
11734940Di2015UniqueSeparatorFoo foo=new Foo();Di2015NewLinevar value=foo.bar();Di2015NewLine
11735076Di2015UniqueSeparatorIsSame
11735242Di2015UniqueSeparatorMethodInfo
11735242Di2015UniqueSeparatorGetData
11735242Di2015UniqueSeparatorobject
11735242Di2015UniqueSeparatorvoid Method<TObjectType>(Expression<Func<TObjectType,object>> ex) {...}Di2015NewLine
11735242Di2015UniqueSeparatorvoid Method<TObjectType, TValue>(Expression<Func<TObjectType,TValue>> ex) {...}Di2015NewLine
11735242Di2015UniqueSeparatorMethod<Foo>(x => x.GetData());Di2015NewLine
11735242Di2015UniqueSeparatorvoid Method<TObjectType>(Expression<Func<TObjectType,Func<int>>> ex)Di2015NewLine
11735242Di2015UniqueSeparatorMethod<Foo>(x => x.GetData);Di2015NewLine
11735242Di2015UniqueSeparatorvoid Method<TObjectType, TValue>(Expression<Func<TObjectType,Func<TValue>>> ex)Di2015NewLine
11735242Di2015UniqueSeparatorMethod<Foo, int>(x => x.GetData);Di2015NewLine
11735249Di2015UniqueSeparatorDownload()
11735249Di2015UniqueSeparatorDoc
11735249Di2015UniqueSeparatorpublic class Doc : SomeInterfaceFromTheDllDi2015NewLine{Di2015NewLine  private readonly IVersion version; // An interface from the DLL.Di2015NewLine  private readonly ManualResetEvent _complete = new ManualResetEvent(false);Di2015NewLineDi2015NewLine  private bool downloadSuccessful;Di2015NewLineDi2015NewLine  // ...Di2015NewLineDi2015NewLine  public bool Download()Di2015NewLine  {Di2015NewLine    this.version.DownloadFile(this);Di2015NewLine    // Wait for the event to be signalled...Di2015NewLine    _complete.WaitOne();Di2015NewLine    return this.downloadSuccessful;Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Completed(short reason)Di2015NewLine  {Di2015NewLine    Trace.WriteLine(string.Format("Notify.Completed({0})", reason));Di2015NewLine    this.downloadSuccessful = reason == 0;Di2015NewLine    // Signal that the download is completeDi2015NewLine    _complete.Set();Di2015NewLine  }Di2015NewLineDi2015NewLine  // ...Di2015NewLine}  Di2015NewLine
11735492Di2015UniqueSeparatorlength
11735492Di2015UniqueSeparatorint length = stream.Read(buffer, 0, PACKET_SIZE);Di2015NewLine
11735492Di2015UniqueSeparatorif (length == PACKET_SIZE)Di2015NewLine{...}Di2015NewLine
11735492Di2015UniqueSeparatorPACKET_SIZE
11735492Di2015UniqueSeparatorPACKET_SIZE
11735492Di2015UniqueSeparatorPACKET_SIZE
11735492Di2015UniqueSeparatorint length;Di2015NewLineMemoryStream ms = new MemoryStream();Di2015NewLinewhile((length = stream.Read(buffer, 0, buffer.Length)) > 0) {Di2015NewLine    ms.Write(buffer, 0, length); // append what we just recievedDi2015NewLineDi2015NewLine    // now: could check `ms` to see if we have a "frame" here...Di2015NewLine}Di2015NewLine//...or you could just process the entire recieved data hereDi2015NewLine
11735514Di2015UniqueSeparatorstring sIp = "192.168.0.1";Di2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLinesIp.Split('.').ToList().ForEach(u => sb.Append(u.ToString().PadLeft(3, '0')));Di2015NewLineDi2015NewLine// sb.ToString(); contains the resultDi2015NewLine
11735840Di2015UniqueSeparatorA
11735840Di2015UniqueSeparatorB
11735840Di2015UniqueSeparatorB
11735840Di2015UniqueSeparatorA
11735846Di2015UniqueSeparatorCheckBoxes.Add(check);Di2015NewLine
11735846Di2015UniqueSeparatorforeach (var checkBox in CheckBoxes)Di2015NewLine{Di2015NewLine    if (checkbox.Checked)Di2015NewLine    {Di2015NewLine        // Do stuff...Di2015NewLine    }Di2015NewLine}Di2015NewLine
11735846Di2015UniqueSeparatorCheckBox ckb = this.Controls.OfType<CheckBox>()Di2015NewLine                   .Where(c => c.AccessibleName.Equals(checkName)) as CheckBox;Di2015NewLine
11735846Di2015UniqueSeparatorWhere
11735846Di2015UniqueSeparatorIEnumerable<CheckBox>
11735846Di2015UniqueSeparatorCheckBox
11735846Di2015UniqueSeparatornull
11735846Di2015UniqueSeparatorCheckBox ckb = this.Controls.OfType<CheckBox>()Di2015NewLine                   .Where(c => c.AccessibleName.Equals(checkName)).First();Di2015NewLine
11735846Di2015UniqueSeparatorckb
11735869Di2015UniqueSeparatorvar result = (from p in context.PeopleDi2015NewLine              where p.PS_Lookup.Any(ps => ps.ID == 1)Di2015NewLine              select new { p.ID, p.PersonName })Di2015NewLine             .ToList();Di2015NewLine
11735914Di2015UniqueSeparatorIEnumerable<Customers> Customers = XDocument.Load("Customers.xml").Element("Customers")Di2015NewLine  .Descendants("Customer")Di2015NewLine    .Select(x => new CustomersDi2015NewLine    {Di2015NewLine        Name = x.Element("Name").Value,Di2015NewLine        City = x.Element("City").Value,Di2015NewLine        Address = x.Element("Address").ValueDi2015NewLine    });Di2015NewLine
11736099Di2015UniqueSeparatorHereâ€™s my Controller (FileController.cs)
11736099Di2015UniqueSeparator.NET
11736114Di2015UniqueSeparatorstring arrStr = "192.168.1.1/192.168.1.12/192.168.1.118";Di2015NewLinechar[] separator = new char[] { '/' };Di2015NewLinestring[] strSplitArr = arrStr.Split(separator);Di2015NewLineDi2015NewLinestring IP1 = strSplitArr[0];Di2015NewLinestring IP2 = strSplitArr[1];Di2015NewLinestring IP3 = strSplitArr[2];Di2015NewLine
11736126Di2015UniqueSeparator// client.CheckOut(new Uri("http://localhost:8080/svn/crazycode/branches/"), "C:\\\\Users\\\\TTVERCIN\\\\Desktop\\\\crazycodeee");Di2015NewLine
11736126Di2015UniqueSeparator"C:\\\\Users\\\\TTVERCIN\\\\Desktop\\\\crazycodeee"
11736126Di2015UniqueSeparatorAdd("C:\\\\Users\\\\TTVERCIN\\\\Desktop\\\\CSI_headerFooterMenu_prepaid_kurumsal\\\\");Di2015NewLine
11736126Di2015UniqueSeparatorCSI_headerFootermenu_prepaid_kurumsal
11736126Di2015UniqueSeparatorcrazycodeee
11736207Di2015UniqueSeparatorBoolean writeHeader = (!File.Exists(fileName));Di2015NewLineDi2015NewLineusing (StreamWriter file = new StreamWriter(fileName, true))Di2015NewLine{Di2015NewLine    if (writeHeader)Di2015NewLine    {Di2015NewLine       file.WriteLine(headerLine);Di2015NewLine    }Di2015NewLineDi2015NewLine    file.WriteLine(line);Di2015NewLine}Di2015NewLine
11736274Di2015UniqueSeparatorUri
11736274Di2015UniqueSeparatorvar part = String.Format("{0}://{1}{2}",uri.Scheme,uri.Authority, String.Join("",uri.Segments.Take(7)));Di2015NewLine
11736274Di2015UniqueSeparatorUri
11736274Di2015UniqueSeparatorvar input = "https://uu2020.devuueva.com/portal/mesddsa/usforeer/nance/tings/M3C102d4104/1007/tingjack/default.aspx";Di2015NewLinevar uri = new Uri(input);Di2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLinesb.AppendFormat("{0}://{1}/",uri.Scheme,uri.Authority);Di2015NewLineDi2015NewLinevar parts = uri.PathAndQuery.Split(new char[]{'/'},StringSplitOptions.RemoveEmptyEntries);Di2015NewLinefor(var i=0;i<6;i++){Di2015NewLine    sb.AppendFormat("/{0}",parts[i])   ;Di2015NewLine}Di2015NewLineConsole.WriteLine(sb.ToString());Di2015NewLine
11736346Di2015UniqueSeparatorpublic class Time{Di2015NewLine    [XmlAttrubute]Di2015NewLine    public string value {get; set; }Di2015NewLine    [XmlText]Di2015NewLine    public string Text {get;set;} // this will hold the innerText value ("10") of <Time>Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Prod{Di2015NewLineDi2015NewLine    [XmlAttrubute]Di2015NewLine    public string Name {get; set; }Di2015NewLine    [XmlElement("Time")]Di2015NewLine    public List<Time> Time {get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[XmlRoot("parent")]Di2015NewLinepublic class Parent{Di2015NewLine    [XmlElement(ElementName="ProdToNet", Type=typeof(Prod))]Di2015NewLine    [XmlElement(ElementName="TotProd", Type=typeof(Prod))]Di2015NewLine    public List<Prod> {get; set;}Di2015NewLine}Di2015NewLine
11736346Di2015UniqueSeparatorTime:value
11736346Di2015UniqueSeparatorpublic class Time{Di2015NewLine    [XmlIgnore]Di2015NewLine    public TimeSpan _duration;Di2015NewLineDi2015NewLine    [XmlAttrubute(DataType = "duration")]Di2015NewLine    public string valueDi2015NewLine        getDi2015NewLine        {Di2015NewLine            return XmlConvert.ToString(this._duration);Di2015NewLine        }Di2015NewLineDi2015NewLine        setDi2015NewLine        {Di2015NewLine            this._duration = XmlConvert.ToTimeSpan(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11736381Di2015UniqueSeparator<style type='text/css'>Di2015NewLineoption { border-top: solid 1px gray; }Di2015NewLine</style>Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine<asp:ListBox ...></asp:ListBox>Di2015NewLine
11736381Di2015UniqueSeparator<style type='text/css'>Di2015NewLineselect.table option { border-top: solid 1px gray; }Di2015NewLine</style>Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine<asp:ListBox CssClass="table" ...></asp:ListBox>Di2015NewLine
11736453Di2015UniqueSeparator<Grid>Di2015NewLine    <Rectangle>Di2015NewLine        <Rectangle.Fill>Di2015NewLine            <VideoBrush ... />Di2015NewLine        </Rectangle.Fill>Di2015NewLine    </Rectangle>Di2015NewLine    <Slider HorizontalAlignment="Stretch"Di2015NewLine            VerticalAlignment="Bottom"Di2015NewLine            Margin="50,5,50,5"/>Di2015NewLine</Grid>Di2015NewLine
11736534Di2015UniqueSeparatorresult
11736534Di2015UniqueSeparator    class ProgramDi2015NewLine    {Di2015NewLine        static DataTable GetData()Di2015NewLine        {Di2015NewLine            DataTable table = new DataTable();Di2015NewLine            table.Columns.Add("Visits", typeof(int));Di2015NewLine            table.Columns.Add("URL_Link", typeof(string));Di2015NewLineDi2015NewLine            table.Rows.Add(57, "yahoo.com");Di2015NewLine            table.Rows.Add(130, "google.com");Di2015NewLine            table.Rows.Add(92, "google.com");Di2015NewLine            table.Rows.Add(25, "home.live.com");Di2015NewLine            table.Rows.Add(30, "stackoverflow.com");Di2015NewLine            table.Rows.Add(1, "stackoverflow.com");Di2015NewLine            table.Rows.Add(7, "mysite.org");Di2015NewLine            return table;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var res = GetData()Di2015NewLine                  .AsEnumerable()Di2015NewLine                  .GroupBy(row => row.Field<string>("URL_Link"))Di2015NewLine                  .Select(grp => grp.First());Di2015NewLineDi2015NewLine        foreach (var item in res)Di2015NewLine        {Di2015NewLine            string text = "";Di2015NewLine            foreach (var clm in item.ItemArray)Di2015NewLine                text += string.Format("{0}\\t", clm);Di2015NewLineDi2015NewLine            Console.WriteLine(text);Di2015NewLine        }Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11736534Di2015UniqueSeparator57    yahoo.comDi2015NewLine130   google.comDi2015NewLine25    home.live.comDi2015NewLine30    stackoverflow.comDi2015NewLine7     mysite.comDi2015NewLine
11736534Di2015UniqueSeparatorURL_Link
11736534Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var res = GetData()Di2015NewLine                    .AsEnumerable()Di2015NewLine                    .Select(d=>d.Field<string>("URL_Link"))Di2015NewLine                    .Distinct();Di2015NewLineDi2015NewLine        foreach (var item in res)Di2015NewLine            Console.WriteLine(item.ToString());  Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
11736678Di2015UniqueSeparatorGenericDatabaseStorage<T>
11736678Di2015UniqueSeparatorIDBConnection
11736678Di2015UniqueSeparator[TestClass]Di2015NewLinepublic class GenericDatabaseStorageTestsDi2015NewLine{Di2015NewLine    [TestMethod]Di2015NewLine    public void CurrencyOracleExtractToFile( )Di2015NewLine    {Di2015NewLine        GenericDatabaseStorage<OracleConnection, OracleCommand> storage =Di2015NewLine            new GenericDatabaseStorage<OracleConnection, OracleCommand>( Di2015NewLine                typeof(TestRecord), Di2015NewLine                "User Id=SHELL;Password=shell;Data Source=ora9dev"Di2015NewLine            );Di2015NewLineDi2015NewLine        storage.SelectSql = "SELECT * FROM CURRENCY";Di2015NewLine        storage.FillRecordCallback = new FillRecordHandler( FillRecordOrder );Di2015NewLineDi2015NewLine        FileDataLink.EasyExtractToFile( storage, "tempord.txt" );Di2015NewLineDi2015NewLine        FileDataLink link = new FileDataLink( storage );Di2015NewLine        link.ExtractToFile( "tempord.txt" );Di2015NewLineDi2015NewLine        TestRecord[] res = (TestRecord[])CommonEngine.ReadFile(typeof(TestRecord), "tempord.txt");Di2015NewLineDi2015NewLine        if ( File.Exists( "tempord.txt" ) )Di2015NewLine            File.Delete( "tempord.txt" );Di2015NewLineDi2015NewLine        Assert.AreEqual( 3, res.Length );Di2015NewLineDi2015NewLine        Assert.AreEqual( "AED", res[ 0 ].CurrencyCode );Di2015NewLine        Assert.AreEqual( "AFA", res[ 1 ].CurrencyCode );Di2015NewLine        Assert.AreEqual( "ALL", res[ 2 ].CurrencyCode );Di2015NewLine    }Di2015NewLineDi2015NewLine    public void FillRecordOrder( object rec, object[ ] fields )Di2015NewLine    {Di2015NewLine        TestRecord record = ( TestRecord )rec;Di2015NewLineDi2015NewLine        record.CurrencyCode = ( string )fields[ 0 ];Di2015NewLine        record.Name = ( string )fields[ 1 ];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11736721Di2015UniqueSeparatorusing (FileStream fstr = File.Open(myfile, FileMode.OpenOrCreate, FileAccess.ReadWrite))Di2015NewLineDi2015NewLine                    {Di2015NewLine                        StreamWriter sw = new StreamWriter(fstr);Di2015NewLine                        sw.Write(mystring);Di2015NewLine                        sw.Flush();Di2015NewLine                        sw.Dispose();Di2015NewLine                    }Di2015NewLine
11736721Di2015UniqueSeparatorStreamReader sr = new StreamReader(myfile);Di2015NewLinestring sometext = sr.ReadToEnd();Di2015NewLinesr.Dispose();Di2015NewLine
11736721Di2015UniqueSeparatorFile.ReadAllText(myfile);Di2015NewLine
11736760Di2015UniqueSeparatorvar drdatedisp = from row in dtfullreport.AsEnumerable()Di2015NewLine                  group row by row.Field<string>("Order_Date") into gDi2015NewLine                  select newDi2015NewLine                  {Di2015NewLine                      Order_Date = g.Key,Di2015NewLine                      totalAmt = g.Sum(a => a.Field<int>("Item_Quantity"))Di2015NewLineDi2015NewLine                  };Di2015NewLine DataTable dtdatedisp = new DataTable();Di2015NewLine dtdatedisp.Columns.Add("Order_Date");Di2015NewLine dtdatedisp.Columns.Add("Quantity");Di2015NewLine dtdatedisp.Rows.Clear();Di2015NewLine foreach (var g in drdatedisp)Di2015NewLine {Di2015NewLine     DataRow newRow1 = dtdatedisp.NewRow();Di2015NewLine     newRow1[0] = g.Order_Date;Di2015NewLine     newRow1[1] = g.totalAmt;Di2015NewLine     dtdatedisp.Rows.Add(newRow1);Di2015NewLine }Di2015NewLine
11736805Di2015UniqueSeparatorlstProblemPrasanje.DataTextField = "Text";Di2015NewLinelstProblemPrasanje.DataValueField = "Value";Di2015NewLine
11736805Di2015UniqueSeparatorprotected void btnPrasaj_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    List<ListItem> lista = new List<ListItem>();Di2015NewLine    string prasanje = null;Di2015NewLine    Application.Lock();Di2015NewLine    if (Application["prasanja"] == null) // za prvpat se postavuva prasanjeDi2015NewLine    {Di2015NewLine        prasanje = txtNaslov.Text + "\\n\\n\\n" + txtPrasanje.Text;Di2015NewLine        lista.Add(new ListItem(prasanje, ddltema.SelectedIndex.ToString()));Di2015NewLine        lstProblemPrasanje.DataSource = lista;Di2015NewLine        //lstProblemPrasanje.DataTextField = "Text";Di2015NewLine        //lstProblemPrasanje.DataValueField = "Value";Di2015NewLine        lstProblemPrasanje.DataBind();Di2015NewLine        Application["prasanja"] = lista;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        lista=(List<ListItem>)Application["prasanja"];Di2015NewLine        prasanje = txtNaslov.Text + "\\n\\n\\n" + txtPrasanje.Text;Di2015NewLine        lista.Add(new ListItem(prasanje, ddltema.SelectedIndex.ToString()));Di2015NewLine        lstProblemPrasanje.DataSource = lista;Di2015NewLine        //lstProblemPrasanje.DataTextField = "Text";Di2015NewLine        //lstProblemPrasanje.DataValueField = "Value";Di2015NewLine        lstProblemPrasanje.DataBind();Di2015NewLine        Application["prasanja"] = lista;Di2015NewLine    }Di2015NewLine    Application.UnLock();Di2015NewLine}Di2015NewLine
11736906Di2015UniqueSeparator<div id="container">Di2015NewLine   <%-- Search --%>Di2015NewLine   <asp:ContentPlaceHolder ID="cphSearch" runat="server">Di2015NewLine   </asp:ContentPlaceHolder>Di2015NewLine</div>Di2015NewLine
11736906Di2015UniqueSeparator<asp:Content ID="cntSearch" ContentPlaceHolderID="cphSearch" runat="server">Di2015NewLine<asp:UpdatePanel ID="updSearch" runat="server" UpdateMode="Conditional" ChildrenAsTriggers="true">Di2015NewLine<ContentTemplate>Di2015NewLine<div id="searchPlace" runat="server"> <-- DIV tag moved hereDi2015NewLine    <asp:Button ID="btnChangeColor" runat="server" onclick="changeColor" Text="Button" />Di2015NewLine</div>Di2015NewLine</ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
11736906Di2015UniqueSeparatorsearchPlace.Style.Add(HtmlTextWriterStyle.Height, "300px");Di2015NewLinesearchPlace.Style.Add(HtmlTextWriterStyle.BackgroundColor, "Black");Di2015NewLineupdSearch.Update();Di2015NewLine
11737154Di2015UniqueSeparatorIEnumerable<Cell> cells = workSheetPart.Worksheet.Descendants<Cell>().Where(c => string.Compare(GetColumnName(c.CellReference.Value), strIndex, false) == 0).OrderBy(c => c.CellValue.Text);Di2015NewLine
11737154Di2015UniqueSeparatorint cellCount = cells.Count();Di2015NewLineCell MaxCell = cells.ToArray()[0];Di2015NewLineCell MinCell = cells.ToArray()[cellCount - 1];Di2015NewLine
11737271Di2015UniqueSeparator private void pictureBox1_DragEnter(object sender, DragEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            pictureBox1.Image = null;Di2015NewLine            string[] filename = (string[])e.Data.GetData(DataFormats.FileDrop);Di2015NewLine            pictureBox1.Image = Image.FromFile(filename[0]);Di2015NewLine        }Di2015NewLine        catch (Exception expr)Di2015NewLine        { }Di2015NewLine    }Di2015NewLine
11737321Di2015UniqueSeparator for (int j = 0; j < aNum; j++)Di2015NewLine        {Di2015NewLine            //here is loop-unrolling for bDi2015NewLine            b[0] += a[j];Di2015NewLine            b[1] += a[j + 3];Di2015NewLine            b[2] += a[j + 6];Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine  for(k=0;k<max;k++)Di2015NewLine  {Di2015NewLine  for (int j = 0; j < aNum; j++)Di2015NewLine        {Di2015NewLine            //without loop-unrollingDi2015NewLine            b[k] += a[j+k*3];Di2015NewLineDi2015NewLine        }Di2015NewLine   }Di2015NewLine
11737392Di2015UniqueSeparatorprivate void checkTimer_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            checkTimer.Enabled = false;Di2015NewLine            MessageBox.Show("Test");   Di2015NewLine            for (int i = 0; i < 2000000000; i++)Di2015NewLine            {Di2015NewLineDi2015NewLine            }Di2015NewLine            MessageBox.Show("Test");Di2015NewLine            checkTimer.Enabled = true;Di2015NewLine        }Di2015NewLine
11737443Di2015UniqueSeparatorfunction TreeView_onSelect(e) Di2015NewLine{Di2015NewLine  var treeview = $(this).data('tTreeView');Di2015NewLine  var nodeText = treeview.getItemText(e.item);Di2015NewLine  alert("You select the node: " + nodeText);Di2015NewLine}Di2015NewLine
11737538Di2015UniqueSeparatorTuple<T1, T2>
11737538Di2015UniqueSeparatorMyOperationResult
11737538Di2015UniqueSeparatorout
11737538Di2015UniqueSeparatorout
11737538Di2015UniqueSeparatorpublic bool int.TryParse( string value, out int parsedValue )
11737602Di2015UniqueSeparator<input name="BroadcastSelect[]">
11737602Di2015UniqueSeparatorRequest.Form
11737602Di2015UniqueSeparatorRequest.QueryString
11737602Di2015UniqueSeparatorRequest.Form["BroadcastSelect[]"]
11737602Di2015UniqueSeparatorstring broadcastSelect = Request.Form["BroadcastSelect[]"];Di2015NewLineif (broadcastSelect != null)Di2015NewLine{Di2015NewLine   string[] broadcastSelectParts = broadcastSelect.Split(',');Di2015NewLine   Label1.Text = broadcastSelectParts[0];Di2015NewLine}Di2015NewLine
11737602Di2015UniqueSeparatorLabel1.Text = broadcastSelect.Split(',')[0];Di2015NewLine
11737628Di2015UniqueSeparator(?<![a-zA-Z])keyword(?![a-zA-Z])Di2015NewLine
11737628Di2015UniqueSeparatorbodyText = Regex.Replace(bodyText, "(?<![a-zA-Z])" + article.headword + "(?![a-zA-Z])", "<a class=\\"dic\\" href=\\"#\\">" + article.headword + "</a>");Di2015NewLine
11737638Di2015UniqueSeparatorsp_setapprole
11737653Di2015UniqueSeparator<ItemTemplate>Di2015NewLine                   <asp:hyperlink id="LinkButton3" navigateurl='<%# "Default3.aspx?ID=" + Eval("RegionProjectID")%>' text='<%# Bind("RegionProjectName")%>' runat="server" />  Di2015NewLine                </ItemTemplate>Di2015NewLine
11737703Di2015UniqueSeparatorRegex.Replace(originalXml, Di2015NewLine              @"((?<=</?)\\w+:(?<elem>\\w+)|\\w+:(?<elem>\\w+)(?==\\"))", Di2015NewLine              "${elem}");Di2015NewLine
11737703Di2015UniqueSeparator<wsse:Security soapenv:actor="dont match soapenv:actor attrib">Di2015NewLine    <BinarySecurityToken>authtoken</BinarySecurityToken>Di2015NewLine</Security> Di2015NewLine
11737703Di2015UniqueSeparatorXSL
11737703Di2015UniqueSeparatorXSL
11737703Di2015UniqueSeparatorXslTransform
11737703Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine<xsl:output method="xml" indent="no"/>Di2015NewLineDi2015NewLine<xsl:template match="/|comment()|processing-instruction()">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates/>Di2015NewLine    </xsl:copy>Di2015NewLine</xsl:template>Di2015NewLineDi2015NewLine<xsl:template match="*">Di2015NewLine    <xsl:element name="{local-name()}">Di2015NewLine      <xsl:apply-templates select="@*|node()"/>Di2015NewLine    </xsl:element>Di2015NewLine</xsl:template>Di2015NewLineDi2015NewLine<xsl:template match="@*">Di2015NewLine    <xsl:attribute name="{local-name()}">Di2015NewLine      <xsl:value-of select="."/>Di2015NewLine    </xsl:attribute>Di2015NewLine</xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11737703Di2015UniqueSeparatorRegex
11737703Di2015UniqueSeparatorvar finalXml = Regex.Replace(originalXml, @"<(/?)\\w+:(\\w+/?)>", "<$1$2>");Di2015NewLine
11737757Di2015UniqueSeparatorList
11737757Di2015UniqueSeparatorint[]
11737757Di2015UniqueSeparatorToArray()
11737757Di2015UniqueSeparatorList<int> items = new List<int>();Di2015NewLineitems.ToArray();Di2015NewLine
11737757Di2015UniqueSeparatorArrayList
11737757Di2015UniqueSeparatorToArray()
11737757Di2015UniqueSeparatorList
11737775Di2015UniqueSeparator textbox.text=DtSet.Tables[0].Rows[0]["database column name"].ToString();Di2015NewLine
11738020Di2015UniqueSeparatorpublic sealed class RequiresCheckAttribute : OnMethodBoundaryAspectDi2015NewLine{Di2015NewLine    public override void OnEntry(MethodExecutionEventArgs e)Di2015NewLine    {Di2015NewLine        // Do check here.Di2015NewLine    }Di2015NewLine}Di2015NewLine
11738020Di2015UniqueSeparatorpublic void throwIfCheckFails() {Di2015NewLine    if(myCheck()) throw new Exception(...);Di2015NewLine}Di2015NewLineDi2015NewLinepublic override string Method1 {Di2015NewLine    throwIfCheckFails();Di2015NewLine    // ...Rest of my method1...Di2015NewLine}Di2015NewLine
11738056Di2015UniqueSeparatorAccount__id
11738056Di2015UniqueSeparatorMap(x => x.Account_id)Di2015NewLine
11738058Di2015UniqueSeparatorId1
11738058Di2015UniqueSeparatorId2
11738058Di2015UniqueSeparatorId1 = 0;Di2015NewLineId2 = 0;Di2015NewLineDi2015NewLineif (rdr.Read())Di2015NewLine        {Di2015NewLine            Id1 = (int)rdr["ID1"];Di2015NewLine            Id2 = (int)rdr["ID2"];Di2015NewLine        }Di2015NewLine
11738123Di2015UniqueSeparator    routes.MapHttpRoute(Di2015NewLine        name: "DefaultApi",Di2015NewLine        routeTemplate: "api/{controller}/{action}/{id}/{id2}",Di2015NewLine        defaults: new { id = RouteParameter.Optional, id2 = RouteParameter.Optional }Di2015NewLine    );Di2015NewLine
11738123Di2015UniqueSeparatorpublic HttpResponseMessage AuthenticateUser([FromUri]string id, [FromUri]string id2)Di2015NewLine
11738123Di2015UniqueSeparator        return Redirect(Di2015NewLine            Url.RouteUrl("DefaultApi", Di2015NewLine                new { httproute = "", Di2015NewLine                      controller = "AuthenticationServiceWebApi", Di2015NewLine                      action = "AuthenticateUser", Di2015NewLine                      id = model.UserName,Di2015NewLine                      id2 = model.PasswordDi2015NewLine            }));Di2015NewLine
11738166Di2015UniqueSeparatorEmailService
11738232Di2015UniqueSeparatorDictionary<string, List<string>> dict = new Dictionary<string, List<string>>();Di2015NewLineforeach (XmlNode items in diagramTables)Di2015NewLine{Di2015NewLine  string pkTable = items["PKTABLE_NAME"].InnerText.Replace("_",@"\\_");Di2015NewLine  string fkTable = items["FKTABLE_NAME"].InnerText.Replace("_",@"\\_");Di2015NewLine  if (!dict.ContainsKey(pkTable))Di2015NewLine  {Di2015NewLine    dict.Add(pkTable, new List<string>());Di2015NewLine  }Di2015NewLine  if (!dict[pkTable].Contains(fkTable))Di2015NewLine  {Di2015NewLine      dict[pkTable].Add(fkTable);Di2015NewLine  }Di2015NewLine}Di2015NewLinesb.Append("========================================================="); // making it easier for youDi2015NewLineforeach(KeyValuePair<string, List<string>> kvp in dict)Di2015NewLine{Di2015NewLine  sb.Append(kvp.Key);Di2015NewLine  sb.Append(" got ");Di2015NewLine  sb.AppendLine(String.Join("|", kvp.Value.ToArray()));Di2015NewLine}Di2015NewLinesb.Append("========================================================="); // making it easier for youDi2015NewLine
11738238Di2015UniqueSeparatorWatcher = new FileSystemWatcher(ftpFolder, "*_finish.txt");Di2015NewLine
11738474Di2015UniqueSeparatorGetCursorPos
11738474Di2015UniqueSeparator    [DllImport("user32.dll")]Di2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    static extern bool GetCursorPos(out System.Drawing.Point lpPoint); Di2015NewLine
11738474Di2015UniqueSeparatorSystem.Drawing.Point point;Di2015NewLineif(!GetCursorPos(out point))Di2015NewLine    throw new InvalidOperationException("GetCursorPos failed");Di2015NewLine// point contains cursor's position in screen coordinates.Di2015NewLine
11738576Di2015UniqueSeparatorforeach
11738576Di2015UniqueSeparatorpublic static bool TryGetValue<TKey, TValue>Di2015NewLine(this KeyValuePair<TKey, TValue>[] mapping, TKey key, out TValue value)Di2015NewLine{Di2015NewLine    foreach(var kvp in mapping)Di2015NewLine        if (kvp.Key.Equals(key))Di2015NewLine        {Di2015NewLine            value = kvp.Value;Di2015NewLine            return true;Di2015NewLine        }Di2015NewLineDi2015NewLine    value = default(TValue);Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
11738576Di2015UniqueSeparator.First()
11738576Di2015UniqueSeparatorFirstOrDefault()
11738576Di2015UniqueSeparatorKeyValuePair
11738576Di2015UniqueSeparatornull
11738576Di2015UniqueSeparatorKeyValuePair<TKey, TValue>[]
11738576Di2015UniqueSeparatorIEnumerable<KeyValuePair<TKey, TValue>>
11738617Di2015UniqueSeparatortry
11738617Di2015UniqueSeparatortry {Di2015NewLine  // code to checkDi2015NewLineDi2015NewLine  // code that you want to run if it's all okDi2015NewLine} catch {Di2015NewLine  // errorDi2015NewLine} finally {Di2015NewLine  // cleanupDi2015NewLine}Di2015NewLine
11738653Di2015UniqueSeparatorSession
11738653Di2015UniqueSeparatorpublic static int UserId = 10; // BAD! everyone gets/sets this field's valueDi2015NewLineDi2015NewLine// BAD! everyone gets/sets this property's implicit backing valueDi2015NewLinepublic static int UserId {Di2015NewLine     get;Di2015NewLine     set;Di2015NewLine}Di2015NewLineDi2015NewLine// This case is fine; just a shortcut to avoid instantiating an object.Di2015NewLine// The backing value is segregated by other means, in this case, Session.Di2015NewLinepublic static int UserId{Di2015NewLine    get{Di2015NewLine        return (int)HttpContext.Current.Session["UserId"];Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// While I would question doing work inside a property getter, the fact that Di2015NewLine// it is  static won't cause an issue; every call retrieves data from a Di2015NewLine// database, not from a single memory location.Di2015NewLinepublic static int UserId{Di2015NewLine    get{Di2015NewLine        // return some value from databaseDi2015NewLine    }Di2015NewLine}Di2015NewLine
11738739Di2015UniqueSeparatorWrite-Host
11738739Di2015UniqueSeparatorOpen-Device
11738739Di2015UniqueSeparatorClose-Device
11738841Di2015UniqueSeparatorDependencyResolver.Current.GetService<IRepository<User>>();Di2015NewLine
11738843Di2015UniqueSeparatorb
11738843Di2015UniqueSeparatorobject
11738843Di2015UniqueSeparatorobject
11738843Di2015UniqueSeparatorMyString a = "test";Di2015NewLineobject b = a;Di2015NewLinevar c = (string)b;Di2015NewLinestring d = a;Di2015NewLinevar e = (string)a;Di2015NewLine
11738843Di2015UniqueSeparator(string)a
11738843Di2015UniqueSeparatorMyString
11738885Di2015UniqueSeparator[Obsolete("Please don't use this")]Di2015NewLinepublic void DodgyMethod()Di2015NewLine{Di2015NewLine}Di2015NewLine
11738920Di2015UniqueSeparatorExecuteScaler()
11738920Di2015UniqueSeparatorif( reader.Read() ==true && reader[0] !=DBNull.Value)Di2015NewLine{Di2015NewLinecount++;Di2015NewLine} Di2015NewLine
11738920Di2015UniqueSeparator             int Count = 0;Di2015NewLine            using (SqlConnection conn = new SqlConnection ( " Your ConnectionString" ))Di2015NewLine            {Di2015NewLineDi2015NewLine                using (SqlCommand cmd1 = new SqlCommand ( "Exists", conn ))Di2015NewLine                {Di2015NewLineDi2015NewLine                    cmd1.CommandType = CommandType.StoredProcedure;Di2015NewLine                    cmd1.Parameters.Add ( new SqlParameter ( "@Url", URL ) );Di2015NewLineDi2015NewLine                    conn.Open ();Di2015NewLineDi2015NewLine                    if( Convert.ToInt32 ( cmd1.ExecuteScalar () ) > 0 )Di2015NewLine                    {Di2015NewLine                        Count +=1;Di2015NewLine                    }Di2015NewLine                    conn.Dispose ();Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine
11738920Di2015UniqueSeparatorCount+=1;
11738920Di2015UniqueSeparatorCount = Convert.ToInt32 ( cmd1.ExecuteScalar () );Di2015NewLine
11738932Di2015UniqueSeparatorpublic class LocalizedForm : FormDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Occurs when current UI culture is changedDi2015NewLine    /// </summary>Di2015NewLine    [Browsable(true)]Di2015NewLine    [Description("Occurs when current UI culture is changed")]Di2015NewLine    [EditorBrowsable(EditorBrowsableState.Advanced)]Di2015NewLine    [Category("Property Changed")]Di2015NewLine    public event EventHandler CultureChanged;Di2015NewLineDi2015NewLine    protected CultureInfo culture;Di2015NewLine    protected ComponentResourceManager resManager;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Current culture of this formDi2015NewLine    /// </summary>Di2015NewLine    [Browsable(false)]Di2015NewLine    [Description("Current culture of this form")]Di2015NewLine    [EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLine    public CultureInfo CultureDi2015NewLine    {Di2015NewLine        get { return this.culture; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (this.culture != value)Di2015NewLine            {Di2015NewLine                this.ApplyResources(this, value);Di2015NewLineDi2015NewLine                this.culture = value;Di2015NewLine                this.OnCultureChanged();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public LocalizedForm()Di2015NewLine    {Di2015NewLine        this.resManager = new ComponentResourceManager(this.GetType());Di2015NewLine        this.culture = CultureInfo.CurrentUICulture;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ApplyResources(Control parent, CultureInfo culture)Di2015NewLine    {Di2015NewLine        this.resManager.ApplyResources(parent, parent.Name, culture);Di2015NewLineDi2015NewLine        foreach (Control ctl in parent.Controls)Di2015NewLine        {Di2015NewLine            this.ApplyResources(ctl, culture);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnCultureChanged()Di2015NewLine    {Di2015NewLine        var temp = this.CultureChanged;Di2015NewLine        if (temp != null)Di2015NewLine            temp(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11738932Di2015UniqueSeparatorpublic static CultureInfo GlobalUICultureDi2015NewLine{Di2015NewLine    get { return Thread.CurrentThread.CurrentUICulture; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (GlobalUICulture.Equals(value) == false)Di2015NewLine        {Di2015NewLine            foreach (var form in Application.OpenForms.OfType<LocalizedForm>())Di2015NewLine            {Di2015NewLine                form.Culture = value;Di2015NewLine            }Di2015NewLineDi2015NewLine            Thread.CurrentThread.CurrentUICulture = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11738972Di2015UniqueSeparatorif ((lblemail.Text.ToLower().Trim().Equals("ali.saleem@shakarganj.com.pk")) || Di2015NewLine    (lblemail.Text.ToLower().Trim().Equals("altaf.saleem@shakarganj.com.pk")) ||    Di2015NewLine    (lblemail.Text.ToLower().Trim().Equals("anjum.saleem@shakarganj.com.pk")) || Di2015NewLine    (lblemail.Text.ToLower().Trim().Equals("ibrahim.cheema@shakarganj.com.pk")) || Di2015NewLine    (lblemail.Text.ToLower().Trim().Equals("malik.adeel@shakarganj.com.pk")))Di2015NewLine{Di2015NewLine    GridView2.Visible = true;Di2015NewLine    GridView1.Visible = false;Di2015NewLine}Di2015NewLine
11738996Di2015UniqueSeparatorfor
11738996Di2015UniqueSeparator;
11738996Di2015UniqueSeparatorfalse
11738996Di2015UniqueSeparatortrue
11738996Di2015UniqueSeparatoru--
11738996Di2015UniqueSeparator!= 0
11738996Di2015UniqueSeparatorfor (u = b.size(), v = b.back(); u-- != 0; v = p[v]) Di2015NewLine    b[u] = v; //                     ^^^^ HEREDi2015NewLine
11739112Di2015UniqueSeparatorpublic static Guid EmbedInteger(int id)Di2015NewLine{Di2015NewLine    byte[] bytes = new byte[8];Di2015NewLine    int i = 0;Di2015NewLineDi2015NewLine    while (id > 0)Di2015NewLine    {Di2015NewLine        int remainder = id%100;Di2015NewLine        bytes[i++] = (byte)(16*(remainder/10) + remainder%10);Di2015NewLine        id /= 100;Di2015NewLine    }Di2015NewLineDi2015NewLine    return new Guid(0, 0, 0x4001, bytes[7], bytes[6], bytes[5], bytes[4], bytes[3], bytes[2], bytes[1], bytes[0]);Di2015NewLine}Di2015NewLine
11739112Di2015UniqueSeparatorint remainder = id % 100;Di2015NewLinebytes[0] = (byte)(16 * (remainder / 10) + remainder % 10);Di2015NewLineid /= 100;Di2015NewLineif (id == 0) return;Di2015NewLineremainder = id % 100;Di2015NewLinebytes[1] = (byte)(16 * (remainder / 10) + remainder % 10);Di2015NewLineid /= 100;Di2015NewLineif (id == 0) return;Di2015NewLineremainder = id % 100;Di2015NewLinebytes[2] = (byte)(16 * (remainder / 10) + remainder % 10);Di2015NewLineid /= 100;Di2015NewLineif (id == 0) return;Di2015NewLineremainder = id % 100;Di2015NewLinebytes[3] = (byte)(16 * (remainder / 10) + remainder % 10);Di2015NewLineid /= 100;Di2015NewLineif (id == 0) return;Di2015NewLineremainder = id % 100;Di2015NewLinebytes[4] = (byte)(16 * (remainder / 10) + remainder % 10);Di2015NewLine
11739113Di2015UniqueSeparatorInspectViewModel vm = new InspectViewModel()
11739113Di2015UniqueSeparatorvar vm = (InspectViewModel)Application.Current.Resources["ViewModel"];Di2015NewLine
11739156Di2015UniqueSeparatorprivate string ModifyRegexToAcceptHyphensOfCurrentPage(string regex, int searchedPage)Di2015NewLine    {Di2015NewLine        var indexesToInsertPossibleHyphenation = GetPossibleHyphenPositions(regex, searchedPage);Di2015NewLine        var hyphenationToken = @"(-\\s+)?";Di2015NewLine        return InsertStringTokenInAllPositions(regex, indexesToInsertPossibleHyphenation, hyphenationToken);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string InsertStringTokenInAllPositions(string sourceString, List<int> insertionIndexes, string insertionToken)Di2015NewLine    {Di2015NewLine        if (insertionIndexes == null || string.IsNullOrEmpty(insertionToken)) return sourceString;Di2015NewLineDi2015NewLine        var sb = new StringBuilder(sourceString.Length + insertionIndexes.Count * insertionToken.Length);Di2015NewLine        var linkedInsertionPositions = new LinkedList<int>(insertionIndexes.Distinct().OrderBy(x => x));Di2015NewLine        for (int i = 0; i < sourceString.Length; i++)Di2015NewLine        {Di2015NewLine            if (!linkedInsertionPositions.Any())Di2015NewLine            {Di2015NewLine                sb.Append(sourceString.Substring(i));Di2015NewLine                break;Di2015NewLine            }Di2015NewLine            if (i == linkedInsertionPositions.First.Value)Di2015NewLine            {Di2015NewLine                sb.Append(insertionToken);Di2015NewLine            }Di2015NewLine            if (i >= linkedInsertionPositions.First.Value)Di2015NewLine            {Di2015NewLine                linkedInsertionPositions.RemoveFirst();Di2015NewLine            }Di2015NewLine            sb.Append(sourceString[i]);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    private List<int> GetPossibleHyphenPositions(string regex, int searchedPage)Di2015NewLine    {Di2015NewLine        var originalTextOfThePage = mPagesNotModified[searchedPage];Di2015NewLine        var hyphenatedParts = Regex.Matches(originalTextOfThePage, @"\\w+\\-\\s");Di2015NewLine        var indexesToInsertPossibleHyphenation = new List<int>();Di2015NewLine        //....Di2015NewLine        // Aho-Corasick to find all occurences of all Di2015NewLine        //strings in "hyphenatedParts" in the "regex" stringDi2015NewLine        // ....Di2015NewLine        return indexesToInsertPossibleHyphenation;Di2015NewLine    }Di2015NewLine
11739168Di2015UniqueSeparatorstring Sql="SELECT * FROM MYTABLE WHERE 1=0";Di2015NewLinestring connectionstring = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=MYDATA.MDB;"Di2015NewLineDi2015NewLineOleDbConnection new OleDbConnection(connectionstring);Di2015NewLineconn.Open();Di2015NewLineOleDbCommand cmd = new OleDbCommand(Sql, conn);Di2015NewLineOleDbDataAdapter adapter = new OleDbDataAdapter(cmd);Di2015NewLineDataTable table = new DataTable();Di2015NewLineadapter.Fill(table);Di2015NewLineconn.Close();Di2015NewLine
11739271Di2015UniqueSeparatorInitializeComponent
11739271Di2015UniqueSeparatorpublic partial class
11739271Di2015UniqueSeparatorclass Class1
11739271Di2015UniqueSeparatorpublic partial class Form1 : Form
11739271Di2015UniqueSeparatorusing System.Windows.Forms;
11739311Di2015UniqueSeparatorU.userID = o.CreatedByUserID
11739311Di2015UniqueSeparatoruser.Orders.Count
11739312Di2015UniqueSeparatorConsole.WriteLine
11739312Di2015UniqueSeparator[Test]Di2015NewLinepublic void TaskRun()Di2015NewLine{Di2015NewLine    Console.WriteLine("Before");Di2015NewLine    var task = Task.Run(() => Console.WriteLine(_terminator.IWillBeBack()));Di2015NewLine    Console.WriteLine("After");Di2015NewLine    task.Wait();Di2015NewLine}Di2015NewLine
11739364Di2015UniqueSeparatorBitmap
11739364Di2015UniqueSeparatorPixelFormat
11739364Di2015UniqueSeparatorpublic Bitmap(int width, int height, int stride, PixelFormat format, IntPtr scan0);
11739364Di2015UniqueSeparatorargs.Buffer
11739364Di2015UniqueSeparatorbyte
11739364Di2015UniqueSeparatorBitmap bitmap;Di2015NewLinevar gch = System.Runtime.InteropServices.GCHandle.Alloc(args.Buffer, GCHandleType.Pinned);Di2015NewLinetryDi2015NewLine{Di2015NewLine    bitmap = new Bitmap(Di2015NewLine        args.Width, args.Height, args.Stride,Di2015NewLine        System.Drawing.Imaging.PixelFormat.Format24bppRgb,Di2015NewLine        gch.AddrOfPinnedObject());Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    gch.Free();Di2015NewLine}Di2015NewLine
11739364Di2015UniqueSeparatorBitmap
11739364Di2015UniqueSeparatorbyte[]
11739364Di2015UniqueSeparatorvar bitmap = new Bitmap(args.Width, args.Height, System.Drawing.Imaging.PixelFormat.Format24bppRgb);Di2015NewLinevar data = bitmap.LockBits(Di2015NewLine    new Rectangle(0, 0, args.Width, args.Height),Di2015NewLine    System.Drawing.Imaging.ImageLockMode.WriteOnly,Di2015NewLine    System.Drawing.Imaging.PixelFormat.Format24bppRgb);Di2015NewLineDi2015NewLineif(data.Stride == args.Stride)Di2015NewLine{Di2015NewLine    Marshal.Copy(args.Buffer, 0, data.Scan0, args.Stride * args.Height);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    int arrayOffset = 0;Di2015NewLine    int imageOffset = 0;Di2015NewLine    for(int y = 0; y < args.Height; ++y)Di2015NewLine    {Di2015NewLine        Marshal.Copy(args.Buffer, arrayOffset, (IntPtr)(((long)data.Scan0) + imageOffset), data.Stride);Di2015NewLine        arrayOffset += args.Stride;Di2015NewLine        imageOffset += data.Stride;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinebitmap.UnlockBits(data);Di2015NewLine
11739426Di2015UniqueSeparator<configuration>Di2015NewLine<connectionStrings>Di2015NewLine<add name="First" connectionString="..."/>Di2015NewLine<add name="Second" connectoinString="..."/>Di2015NewLine<add name="Third" connectionString="..."/>Di2015NewLine</connectionStrings>Di2015NewLine</configuration>Di2015NewLine
11739434Di2015UniqueSeparatorpublic IRepository<TEntity> MakeRepository<TEntity>() where TEntity : classDi2015NewLine{Di2015NewLine    var repo = new TradeSiftRepository<TEntity>(new UnitOfWork());Di2015NewLine    return repo;Di2015NewLine}Di2015NewLineDi2015NewLineIRepository<User> userRepository = MakeRepository<User>();Di2015NewLine
11739434Di2015UniqueSeparatorpublic object MakeRepository(string entityTypeName)Di2015NewLine{Di2015NewLine    Assembly common = Assembly.LoadFrom(@"CommonLibrary.dll");Di2015NewLine    Type entityType = common.GetType(entityTypeName);Di2015NewLine    Type repoType = typeof(TradeSiftRepository<>).MakeGenericType(entityType);Di2015NewLineDi2015NewLine    var repo = Activator.CreateInstance(repoType, new UnitOfWork());Di2015NewLine    return repo;Di2015NewLine}Di2015NewLineDi2015NewLineIRepository<User> userRepository = (IRepository<User>)MakeRepository("User");Di2015NewLine
11739434Di2015UniqueSeparatorpublic dynamic MakeRepository(string entityTypeName)Di2015NewLine{Di2015NewLine    Assembly common = Assembly.LoadFrom(@"CommonLibrary.dll");Di2015NewLine    Type entityType = common.GetType(entityTypeName);Di2015NewLine    Type repoType = typeof(TradeSiftRepository<>).MakeGenericType(entityType);Di2015NewLineDi2015NewLine    var repo = Activator.CreateInstance(repoType, new UnitOfWork());Di2015NewLine    return repo;Di2015NewLine}Di2015NewLineDi2015NewLinedynamic userRepository = MakeRepository("ConsoleApplication1.User");Di2015NewLineUser user = userRepository.FindById(1);Di2015NewLine
11739503Di2015UniqueSeparatorDataReader
11739503Di2015UniqueSeparatorDataReader
11739503Di2015UniqueSeparatorIDisposable
11739503Di2015UniqueSeparatorclass Wrapper : IDisposableDi2015NewLine{Di2015NewLine    public OleDbDataReader Reader { get { return reader; } }Di2015NewLine    private OleDbConnection connection;Di2015NewLineDi2015NewLine    public Wrapper(OleDbConnection connection, string QueryStr)Di2015NewLine    { Di2015NewLine        this.connection = connection; Di2015NewLine        OleDbCommand cmd = new OleDbCommand(QueryStr, connection);Di2015NewLine        OleDbDataReader dr = cmd.ExecuteReader();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        reader.Dispose();Di2015NewLine        connection.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass dbFunctionsDi2015NewLine{Di2015NewLine    public static OleDbDataReader QueryString(string QueryStr)Di2015NewLine    {Di2015NewLine        OleDbConnection con = new OleDbConnection(GlobalVar.strAccessConn);Di2015NewLine        con.Open();Di2015NewLine        return new Wrapper(con, QueryStr);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11739503Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    using (var dr = dbFunctions.QueryString("SELECT * FROM seriennummer;"))Di2015NewLine        while (dr.Reader.Read())Di2015NewLine            MessageBox.Show(dr[1].ToString());Di2015NewLine}Di2015NewLine
11739503Di2015UniqueSeparatorDataTable
11739503Di2015UniqueSeparatorclass dbFunctionsDi2015NewLine{Di2015NewLine    public static DataTable QueryString(string QueryStr)Di2015NewLine    {Di2015NewLine        var result = new DataTable();Di2015NewLine        using(OleDbConnection con = new OleDbConnection(GlobalVar.strAccessConn))Di2015NewLine        {Di2015NewLine            con.Open();Di2015NewLine            using(OleDbCommand cmd = new OleDbCommand(QueryStr, con))Di2015NewLine                result.Load(cmd.ExecuteReader());Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var data = dbFunctions.QueryString("SELECT * FROM seriennummer;");Di2015NewLine    foreach(var row in data.Rows)Di2015NewLine        MessageBox.Show(row[1].ToString());Di2015NewLine}Di2015NewLine
11739523Di2015UniqueSeparatorColor color = (Color)(new HexColor(resources.GetValue());Di2015NewLine
11739523Di2015UniqueSeparatorpublic Color ConvertStringToColor(String hex)Di2015NewLine{Di2015NewLine    //remove the # at the frontDi2015NewLine    hex = hex.Replace("#", "");Di2015NewLineDi2015NewLine    byte a = 255;Di2015NewLine    byte r = 255;Di2015NewLine    byte g = 255;Di2015NewLine    byte b = 255;Di2015NewLineDi2015NewLine    int start = 0;Di2015NewLineDi2015NewLine    //handle ARGB strings (8 characters long)Di2015NewLine    if (hex.Length == 8)Di2015NewLine    {Di2015NewLine        a = byte.Parse(hex.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);Di2015NewLine        start = 2;Di2015NewLine    }Di2015NewLineDi2015NewLine    //convert RGB characters to bytesDi2015NewLine    r = byte.Parse(hex.Substring(start, 2), System.Globalization.NumberStyles.HexNumber);Di2015NewLine    g = byte.Parse(hex.Substring(start + 2, 2), System.Globalization.NumberStyles.HexNumber);Di2015NewLine    b = byte.Parse(hex.Substring(start + 4, 2), System.Globalization.NumberStyles.HexNumber);Di2015NewLineDi2015NewLine    return Color.FromArgb(a, r, g, b);Di2015NewLine}Di2015NewLine
11739578Di2015UniqueSeparator  public ActionResult Index(string searchString)Di2015NewLine    {Di2015NewLineDi2015NewLine...Di2015NewLine...Di2015NewLineDi2015NewLine   return View(user.Where(x => x.Order.Username == User.Identity.Name));Di2015NewLine
11739798Di2015UniqueSeparatorvar query = Di2015NewLinectx.upload_t.Where(w1=>w1.biller_id==10)Di2015NewLine.join(ctx.printer, t0=>t0.id.ToString(), t1=>t1.bill.ToString(),Di2015NewLine(t0,t1) => new {t0.id, t0.biller_id, t1.total_statements, t1.total_page, t1.total_bad,t0.date})Di2015NewLine.GroupBy(g1=>new {t0.biller_id,t0.id,t0.date)Di2015NewLine.Select(s1=>new{Di2015NewLine   s1.Key.id, Di2015NewLine   value=s1.Sum(s2=>s2.total_statements),Di2015NewLine   value2=s1.Sum(s2=>s2.total_page-s2.total_statements),Di2015NewLine   value3=s1.Sum(s2=>s2.total_bad),Di2015NewLine   s1.Key.biller_id, s1.Key.date})Di2015NewLine.OrderBy(o1=>o1.date)Di2015NewLine
11739822Di2015UniqueSeparatorFile.Create
11739822Di2015UniqueSeparatorFile.Create
11739822Di2015UniqueSeparatorFile.Create
11739822Di2015UniqueSeparatorStream newFile = File.Create(newPath);Di2015NewLinefw = new StreamWriter(newFile);Di2015NewLine
11739900Di2015UniqueSeparator#if DEBUG
11739900Di2015UniqueSeparator#if DEBUGDi2015NewLine    MessageBox.Show("Message");Di2015NewLine#endifDi2015NewLine
11739900Di2015UniqueSeparator#if DEBUGDi2015NewLine    MessageBox.Show("Message");Di2015NewLine#elseDi2015NewLine    // Write to log fileDi2015NewLine#endifDi2015NewLine
11739904Di2015UniqueSeparator$("#StudentTable tr td").html('');Di2015NewLine
11739904Di2015UniqueSeparator$("#TeachingAssistant option").remove();Di2015NewLine
11739937Di2015UniqueSeparatorEnvironment.GetCommandLineArgs()
11739937Di2015UniqueSeparatorprotected void Form_Load()Di2015NewLine{Di2015NewLine    var args = Environment.GetCommandLineArgs();Di2015NewLine    if (args.Length > 0)Di2015NewLine    {Di2015NewLine        //open the file here...Di2015NewLine    }Di2015NewLine}Di2015NewLine
11739987Di2015UniqueSeparatorRegex.Replace
11739987Di2015UniqueSeparatorstring.Replace
11739995Di2015UniqueSeparatorvar result = one.Intersect(second);Di2015NewLine
11739995Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    List<int> one = new List<int>() {1, 3, 4, 6, 7};Di2015NewLine    List<int> second = new List<int>() {1, 2, 4, 5};Di2015NewLineDi2015NewLine    foreach(int r in one.Intersect(second))Di2015NewLine        Console.WriteLine(r);Di2015NewLine}Di2015NewLine
11740035Di2015UniqueSeparatorDataTable dt1 = new DataTable();  // for temporary storageDi2015NewLineDataSet1TableAdapters.sp_Units_GetUnitState  objAda = new DataSet1TableAdapters.sp_Units_GetUnitState();Di2015NewLinedt1 = objAda.GetData(txtPadidehOrAtkinsCode.Text);Di2015NewLineDi2015NewLine// Now get the state from the datatableDi2015NewLinestring state = dt1.Rows[0][0].ToString();Di2015NewLine
11740307Di2015UniqueSeparatorif (number_to_calculate == 0)Di2015NewLine    {Di2015NewLineDi2015NewLine        StackValue--;Di2015NewLineDi2015NewLine        return 1;Di2015NewLineDi2015NewLine    }...Di2015NewLine
11740307Di2015UniqueSeparatorif (number_to_calculate == 0)Di2015NewLine    {Di2015NewLineDi2015NewLine       result = 1;Di2015NewLineDi2015NewLine    }Di2015NewLine
11740367Di2015UniqueSeparatorSystem.Windows.Forms
11740367Di2015UniqueSeparatorSystem.Windows.Forms
11740379Di2015UniqueSeparator<input type="button" onclick="javascript:SetContent('http://urlhere);" value="Click me at your own risk!">Di2015NewLine
11740536Di2015UniqueSeparatorprivate string direction;Di2015NewLineDi2015NewLinepublic string DirectionDi2015NewLine{Di2015NewLine    get { return direction; }Di2015NewLine    set { direction = value; }Di2015NewLine}Di2015NewLine
11740538Di2015UniqueSeparatorvar contacts = db.GetTable<Contact>();Di2015NewLinevar distributionLists = db.GetTable<DistributionList>();Di2015NewLinevar JunctionTable = db.GetTable<ContactsDistribution>();Di2015NewLineDi2015NewLinevar listBoxItems = listBox1.SelectedItems.Cast<object>().Select(t => t.ToString());Di2015NewLineDi2015NewLinevar email = JunctionTableDi2015NewLine    .Where(item=>item.EmailFlag && listBoxItems.Contains(item.DistributionName))Di2015NewLine    .Select(item=>item.ContactId).Distinct();Di2015NewLinevar sms = JunctionTableDi2015NewLine    .Where(item=>item.SmsFlag && listBoxItems.Contains(item.DistributionName))Di2015NewLine    .Select(item=>item.ContactId).Distinct();Di2015NewLineDi2015NewLineDi2015NewLinevar smsMobileNumbers = contacts.Where(item=>sms.Contains(item.ContactId))Di2015NewLine    .Select(item=>item.MobileNumber).ToList();Di2015NewLineDi2015NewLinevar emailAddresses = contacts.Where(item=>email.Contains(item.ContactId))Di2015NewLine    .Select(item=>item.EmailAddress).ToList();Di2015NewLine
11740548Di2015UniqueSeparatorCONNECT
11740548Di2015UniqueSeparatorCONNECT
11740548Di2015UniqueSeparatorSslStream
11740548Di2015UniqueSeparatorAuthenticateAsClient(...)
11740548Di2015UniqueSeparatorSslStream
11740548Di2015UniqueSeparatorAuthenticateAsServer()
11740654Di2015UniqueSeparatorvar movedPosition = new SkeletonPointDi2015NewLine{Di2015NewLine    X = (float)(mouseJoint.Position.X - 0.4),Di2015NewLine    Y = (float)(mouseJoint.Position.Y - 0.3)Di2015NewLine};Di2015NewLineDi2015NewLinevar movedJoint = new JointDi2015NewLine{Di2015NewLine    Position = movedPositionDi2015NewLine};Di2015NewLine
11740696Di2015UniqueSeparatorCookieContainer
11740696Di2015UniqueSeparatorrequest
11740696Di2015UniqueSeparatorCookieContainer
11740696Di2015UniqueSeparatorCookie
11740696Di2015UniqueSeparatorset-cookie
11740696Di2015UniqueSeparatorCookieContainer
11740696Di2015UniqueSeparatorvar cookies = new CookieContainer();Di2015NewLineDi2015NewLinerequest.CookieContainer = cookies;Di2015NewLine...Di2015NewLineresponse = (HttpWebResponse)request.GetResponse();Di2015NewLine// no need to manually read Cookie header, CookieContainer handles that.Di2015NewLineDi2015NewLinerequest = ...Di2015NewLinerequest.CookieContainer = cookies;Di2015NewLine// no need to manually set/populate CookieContainer, just use the same instance.Di2015NewLine...Di2015NewLineresponse = (HttpWebResponse)request.GetResponse();Di2015NewLine// etcDi2015NewLine
11740776Di2015UniqueSeparatorusing ( FileStream inputStream = File.OpenRead ( aPackage ) )Di2015NewLine{Di2015NewLine    using ( GzipInputStream gzStream = new GzipInputStream ( inputStream ) )Di2015NewLine    {Di2015NewLine        using ( TarInputStream tarStream = new TarInputStream ( gzStream ) )Di2015NewLine        {Di2015NewLine            TarEntry entry = tarStream.GetNextEntry();Di2015NewLine            while ( entry != null )Di2015NewLine            {Di2015NewLine                if ( entry == theOneIWant )Di2015NewLine                {Di2015NewLine                    tarStream.CopyEntryContents (outputStream );Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine                entry = tarStream.GetNextEntry();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11740799Di2015UniqueSeparatorOnItemCommand
11740799Di2015UniqueSeparatorprotected void Test(object sender,DataGridEventArgs e) Di2015NewLine{ Di2015NewLine   if(e.CommandName == "GridView1_RowDeleting")Di2015NewLine   {Di2015NewLine       // do somethingDi2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLine<asp:GridView ID="GridView1"  runat="server" OnItemCommand="Test" AllowPaging="True">Di2015NewLine    <Columns>Di2015NewLine        <asp:TemplateField>Di2015NewLine            <ItemTemplate>Di2015NewLine                <asp:ImageButton  ID="img1"Di2015NewLine                                  runat="server"Di2015NewLine                                  CommandName="GridView1_RowDeleting"Di2015NewLine                                  ImageUrl="~/Images/cross.png" />Di2015NewLineDi2015NewLine            </ItemTemplate>Di2015NewLine        </asp:TemplateField>Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine
11740859Di2015UniqueSeparator/
11740871Di2015UniqueSeparatorItems
11740871Di2015UniqueSeparatorItemsSource
11740871Di2015UniqueSeparatorListViewItem
11740871Di2015UniqueSeparator.View
11740871Di2015UniqueSeparator.ItemsTemplate
11740871Di2015UniqueSeparatorListView
11740871Di2015UniqueSeparatorXmlDataProvider
11740927Di2015UniqueSeparatorStreamReader
11740927Di2015UniqueSeparatorprivate bool LoadSettingsFile(out StreamReader settingsFile)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine         settingsFile = new StreamReader("Settings.txt");Di2015NewLine         return true;Di2015NewLine    }Di2015NewLine    catch (IOException) // specifically handle any IOExceptions       Di2015NewLine    {Di2015NewLine        settingsFile = null;Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11741007Di2015UniqueSeparator//*[@id=42]
11741007Di2015UniqueSeparator//*
11741124Di2015UniqueSeparatorint frame = (int)((CurrentTimeInSeconds / (float)T) * N)Di2015NewLine
11741124Di2015UniqueSeparatorframe
11741228Di2015UniqueSeparator[assembly: InternalsVisibleTo("AssemblyName, PublicKey=xxx")]Di2015NewLine
11741355Di2015UniqueSeparatorpublic class Priority{Di2015NewLine    public int PriorityId {get;set;}Di2015NewLine    public string Label {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CachedItems {Di2015NewLine    private static List<Priority> _priorityList=new List<Priority>();Di2015NewLineDi2015NewLine    public static List<Priority> GetPriorityList() {Di2015NewLine        if (_priorityList==null){Di2015NewLine             // Load DB Items to the _priorityList, Di2015NewLine             // if the app is multithreaded, you might wanna add some locks hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11741355Di2015UniqueSeparatorCachedItems.GetPriorityList()
11741378Di2015UniqueSeparator<#@output
11741378Di2015UniqueSeparatorpublic class DALTable : Template Di2015NewLine{ Di2015NewLine    public DALTable()Di2015NewLine    {Di2015NewLine        Output.Encoding = System.Text.Encoding.UTF8;Di2015NewLine    } Di2015NewLineDi2015NewLine    public override string TransformText() Di2015NewLine    ...Di2015NewLine
11741393Di2015UniqueSeparator value.Split(',').ToList();Di2015NewLine
11741609Di2015UniqueSeparatorConsole.WriteLine
11741609Di2015UniqueSeparator|5| // bDi2015NewLine|1| // aDi2015NewLine
11741609Di2015UniqueSeparatorConsole.WriteLine
11741609Di2015UniqueSeparatorvalue
11741609Di2015UniqueSeparatora
11741609Di2015UniqueSeparator|1| // value = aDi2015NewLine|5| // bDi2015NewLine|1| // aDi2015NewLine
11741609Di2015UniqueSeparator|5| // bDi2015NewLine|1| // aDi2015NewLine
11741710Di2015UniqueSeparator=iif(cdbl("3.14"),"Green","Yellow")
11741710Di2015UniqueSeparator=iif(cdbl("3,14"),"Green","Yellow")
11741772Di2015UniqueSeparatorbody
11741772Di2015UniqueSeparatorXNamespace ns = "whatever the namespace uri is";Di2015NewLinexdoc.Descendants(ns + "body").Single().Add(el); Di2015NewLine
11741784Di2015UniqueSeparatorstring.LastIndexOf
11741784Di2015UniqueSeparatormystring.LastIndexOf(' ', startIndex, endIndex)
11741784Di2015UniqueSeparator0
11741784Di2015UniqueSeparator100
11741795Di2015UniqueSeparatorConvert.ToInt32()
11741795Di2015UniqueSeparatorobject
11741795Di2015UniqueSeparatorIConvertible
11741795Di2015UniqueSeparatorBitConverter.ToInt32()
11741795Di2015UniqueSeparatorInt32.TryParse()
11741942Di2015UniqueSeparatorpublic static void Main(string[] args)Di2015NewLine{Di2015NewLine    ...Di2015NewLineDi2015NewLine    Factorial Fact = new Factorial();Di2015NewLine    Fact.Progression += (s,e) => { /*Do stuff*/ };Di2015NewLine    ...Di2015NewLineDi2015NewLine}Di2015NewLine
11742004Di2015UniqueSeparator.Designer.cs
11742029Di2015UniqueSeparatorStreamWriter
11742029Di2015UniqueSeparatorDispose
11742029Di2015UniqueSeparatorStreamWriter
11742029Di2015UniqueSeparatorStream
11742029Di2015UniqueSeparatorStreamWriter
11742029Di2015UniqueSeparatorDispose
11742029Di2015UniqueSeparatorStreamWriter
11742029Di2015UniqueSeparatorStreamWriter(stream,  StreamWriter.UTF8NoBOM, 1024, false)
11742029Di2015UniqueSeparatornew StreamWriter(new NonDisposableStreamWrapper(stream))
11742029Di2015UniqueSeparatorpublic class NonDisposableStreamWrapper : StreamDi2015NewLine{Di2015NewLine    private Stream wrappedStream;Di2015NewLineDi2015NewLine    public NonDisposableStreamWrapper(Stream wrappedStream)Di2015NewLine    {Di2015NewLine        this.wrappedStream = wrappedStream;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Flush()Di2015NewLine    {Di2015NewLine        wrappedStream.Flush();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long Seek(long offset, SeekOrigin origin)Di2015NewLine    {Di2015NewLine        return wrappedStream.Seek(offset, origin);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void SetLength(long value)Di2015NewLine    {Di2015NewLine        wrappedStream.SetLength(value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int Read(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        return wrappedStream.Read(buffer, offset, count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Write(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        wrappedStream.Write(buffer, offset, count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanReadDi2015NewLine    {Di2015NewLine        get { return wrappedStream.CanRead; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanSeekDi2015NewLine    {Di2015NewLine        get { return wrappedStream.CanSeek; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanWriteDi2015NewLine    {Di2015NewLine        get { return wrappedStream.CanWrite; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long LengthDi2015NewLine    {Di2015NewLine        get { return wrappedStream.Length; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long PositionDi2015NewLine    {Di2015NewLine        get { return wrappedStream.Position; }Di2015NewLine        set { wrappedStream.Position = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11742239Di2015UniqueSeparatorpublic static bool Validate(string firstName, string lastName,string gPA)Di2015NewLine{Di2015NewLine   if(firstName.Length < 1)  Di2015NewLine   .....Di2015NewLineDi2015NewLine   return true;Di2015NewLine}Di2015NewLine
11742239Di2015UniqueSeparatorUtil.Validate(FirstName.Content, LastName.Content, GPA.Content);Di2015NewLine
11742247Di2015UniqueSeparator(color)ColorTranslator.FromHtml(s1);Di2015NewLine
11742342Di2015UniqueSeparatorpublic static T ParseEnum<T>(string value) where T:structDi2015NewLine{Di2015NewLine    return (T)Enum.Parse(typeof(T), value);Di2015NewLine}Di2015NewLine
11742342Di2015UniqueSeparatorvar enumValue = ParseEnum<UserType>(iUserType.ToString());Di2015NewLine
11742342Di2015UniqueSeparatorEnum.TryParse
11742342Di2015UniqueSeparatorUserType userType;Di2015NewLineif (Enum.TryParse<UserType>(iUserType.ToString(), out userType))Di2015NewLine{Di2015NewLine    //Yay! Parse succeeded. The userType variable has the value.Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //Oh noes! The parse failed!Di2015NewLine}Di2015NewLine
11742357Di2015UniqueSeparator@Html.ActionLink("LinkText", "ActionMethodName", Di2015NewLine      new {var1 = val1, var2 = val2, var3 = val3}, new {target = "_blank"})Di2015NewLine
11742390Di2015UniqueSeparator[ForeignKey("FarmID")]Di2015NewLinepublic virtual Farm Farm { get; set; }Di2015NewLine
11742396Di2015UniqueSeparatorpublic class TextBoxViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public TextBoxViewModel()Di2015NewLine    {Di2015NewLine        string label = _labelService.GetSpecificLabel(this, txtExample.Name).Label;Di2015NewLine        this.text = label;Di2015NewLine    }Di2015NewLineDi2015NewLine    private string text;Di2015NewLineDi2015NewLine    public string Text Di2015NewLine    { Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return text;Di2015NewLine        }Di2015NewLineDi2015NewLine        set Di2015NewLine        {Di2015NewLine            text = value;Di2015NewLine            NotifyPropertyChanged("Text");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    private void NotifyPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine        {Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11742396Di2015UniqueSeparator<TextBox Text="{Binding Text}" Height="26" HorizontalAlignment="Left" Margin="77,215,0,0" Name="textBox1" VerticalAlignment="Top" Width="306" />Di2015NewLine
11742396Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    this.DataContext = new TextBoxViewModel();Di2015NewLine}Di2015NewLine
11742457Di2015UniqueSeparatordict.Where(k =>Di2015NewLine    filter.A.Contains(k.Key.A[0]) //CONTAINS !Di2015NewLine    && k.Key.Start.CompareTo(filter.Start) > 0 Di2015NewLine    && k.Key.Start.CompareTo(filter.End) < 0Di2015NewLine)Di2015NewLine
11742499Di2015UniqueSeparatornew XAttribute("onclick", "function(){window.location.href='/Controller/Action?a=' + Va + '&b=' + Vb + '&c=' + Vc;};"),Di2015NewLine
11742499Di2015UniqueSeparatornew XAttribute("onclick", "window.location.href='/Controller/Action?a="+Va+"&b="+Vb+"&c="+Vc+"';"),Di2015NewLine
11742637Di2015UniqueSeparatorct.FieldLinks.Reorder(stringArrayOfInternalFieldNames)
11742687Di2015UniqueSeparatorIEnumerable<string>
11742687Di2015UniqueSeparatorpublic IEnumerable<string> Max_One {Di2015NewLine    get {Di2015NewLine        yield return c.x;Di2015NewLine        yield return c.y;Di2015NewLine        yield return c.z;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11742687Di2015UniqueSeparatorc.x
11742687Di2015UniqueSeparatorc.y
11742687Di2015UniqueSeparatorc.z
11742687Di2015UniqueSeparatorforeach
11742723Di2015UniqueSeparatorAsyncRendering
11742723Di2015UniqueSeparatorSizeReportToContent
11742831Di2015UniqueSeparatorBeginInvoke
11742831Di2015UniqueSeparatorvoid txtHbhakt1_Validated(object sender, EventArgs e) {Di2015NewLine  BeginInvoke(new Action(() => txtHbhakt1.AutoCompleteCustomSource.Add("abcd")));Di2015NewLine  BeginInvoke(new Action(() => txtHbhakt1.AutoCompleteCustomSource.Add("abcd1")));Di2015NewLine  BeginInvoke(new Action(() => txtHbhakt1.AutoCompleteCustomSource.Add("abcd2")));Di2015NewLine  BeginInvoke(new Action(() => txtHbhakt1.AutoCompleteCustomSource.Add("abcd3")));Di2015NewLine}Di2015NewLine
11742895Di2015UniqueSeparatorAppendHeader
11742895Di2015UniqueSeparatorLoad
11742895Di2015UniqueSeparatorInit
11742904Di2015UniqueSeparator"prm.Add\\\\([ ]*"
11742904Di2015UniqueSeparator@"prm.Add\\([ ]*"
11742904Di2015UniqueSeparator"\\n"
11742908Di2015UniqueSeparator    private void btnExport_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        Excel.Application app = new Excel.Application();Di2015NewLine        app.Visible = true;Di2015NewLine        Excel.Workbook wb = app.Workbooks.Add(1);Di2015NewLine        Excel.Worksheet ws = (Excel.Worksheet)wb.Worksheets[1];Di2015NewLine        // changing the name of active sheetDi2015NewLine        ws.Name = "Exported from gridview";Di2015NewLineDi2015NewLine        ws.Rows.HorizontalAlignment = HorizontalAlignment.Center;Di2015NewLine        // storing header part in ExcelDi2015NewLine        for (int i = 1; i < dataGridView1.Columns.Count + 1; i++)Di2015NewLine        {Di2015NewLine            ws.Cells[1, i] = dataGridView1.Columns[i - 1].HeaderText;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        // storing Each row and column value to excel sheetDi2015NewLine        for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < dataGridView1.Columns.Count; j++)Di2015NewLine            {Di2015NewLine                ws.Cells[i + 2, j + 1] = dataGridView1.Rows[i].Cells[j].Value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // sizing the columnsDi2015NewLine        ws.Cells.EntireColumn.AutoFit();Di2015NewLineDi2015NewLine        // save the applicationDi2015NewLine        wb.SaveAs("c:\\\\output.xls",Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive , Type.Missing, Type.Missing, Type.Missing, Type.Missing);Di2015NewLineDi2015NewLine        // Exit from the applicationDi2015NewLine       app.Quit();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11742908Di2015UniqueSeparator    private void btnToSQL_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        string connStr = @"Data Source=(local)\\sqlexpress;Initial Catalog=rTALIS;Integrated Security=True";Di2015NewLine        var cn = new SqlConnection(connStr);Di2015NewLine        var cm = new SqlCommand("exec usp_InsertRecord", cn);Di2015NewLine        cm.CommandType = System.Data.CommandType.StoredProcedure;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            cn.Open();Di2015NewLine            foreach (Row r in rows)Di2015NewLine            {Di2015NewLine                cm.Parameters.Clear();Di2015NewLine                cm.Parameters.AddWithValue("@Number1", r.Number1);Di2015NewLine                cm.Parameters.AddWithValue("@Number2", r.Number2);Di2015NewLine                cm.Parameters.AddWithValue("@Number3", r.Number3);Di2015NewLine                cm.Parameters.AddWithValue("@Number4", r.Number4);Di2015NewLine                cm.Parameters.AddWithValue("@Number5", r.Number5);Di2015NewLine                cm.Parameters.AddWithValue("@Number6", r.Number6);Di2015NewLine                cm.Parameters.AddWithValue("@Number7", r.Number7);Di2015NewLine                cm.Parameters.AddWithValue("@Date1", r.Date1);Di2015NewLine                cm.ExecuteNonQuery();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex.Message);Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            cn.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11742908Di2015UniqueSeparator    List<Row> rows = new List<Row>();Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //var rows = new List<Row>();  //limited scopeDi2015NewLine        var sr = new StreamReader(@"C:\\so_test.txt");Di2015NewLine        while (!sr.EndOfStream)Di2015NewLine        {Di2015NewLine            string s = sr.ReadLine();Di2015NewLine            if (!String.IsNullOrEmpty(s.Trim()))Di2015NewLine            {Di2015NewLine                rows.Add(new Row(s));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sr.Close();Di2015NewLine        dataGridView1.DataSource = rows;Di2015NewLine    }Di2015NewLine
11742911Di2015UniqueSeparatorprivate void OnMyEvent(object sender, MyEventArgs args)Di2015NewLine{Di2015NewLine    var ev = myEvent;Di2015NewLineDi2015NewLine    if (ev != null)Di2015NewLine        ev(sender, args);Di2015NewLine}Di2015NewLineDi2015NewLineOnMyEvent(this, new MyEventArgs("The quick brown fox jumps over the lazy dog"));Di2015NewLine
11742911Di2015UniqueSeparatorMyEventHandler
11742911Di2015UniqueSeparatorMyEventArgs
11743208Di2015UniqueSeparatorerror = GetRequestResult(code);Di2015NewLine
11743208Di2015UniqueSeparatorerror = GetRequestResult(out code);Di2015NewLine
11743208Di2015UniqueSeparatorPChar
11743208Di2015UniqueSeparatorCoTaskMemAlloc
11743208Di2015UniqueSeparatorCoTaskMemFree
11743279Di2015UniqueSeparatorT
11743279Di2015UniqueSeparatorusing System.Linq;Di2015NewLineDi2015NewLinevar array = myEnumerable.ToArray();Di2015NewLinevar list = myEnumerable.ToList();Di2015NewLine
11743279Di2015UniqueSeparatorbyte[]
11743291Di2015UniqueSeparatorpublic interface IHasSize{Di2015NewLine  int Size { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MySize : IHasSize { Di2015NewLine  public int Size { get { return 4; } }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RequiresASize<TSize> where TSize : IHasSize, new()Di2015NewLine{Di2015NewLine  private int _size = new TSize().Size;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProvidesASize : RequiresASize<MySize>{Di2015NewLine  //_size in base class will be 4Di2015NewLine}Di2015NewLine
11743291Di2015UniqueSeparatorRequiresASize<TSize>
11743291Di2015UniqueSeparatorProvidesASize
11743336Di2015UniqueSeparatorSelectionChangeCommitted
11743336Di2015UniqueSeparatorSelectionChange
11743336Di2015UniqueSeparatorSelectionChangeCommitted
11743434Di2015UniqueSeparator<a>
11743473Di2015UniqueSeparatorpublic static class ExtensionDi2015NewLine{Di2015NewLine public static T[][] Split<T>(this T[] arrayIn, int length)Di2015NewLine {Di2015NewLine  bool even = arrayIn.Length % length == 0;Di2015NewLine    .Di2015NewLine    .Di2015NewLine    . // blah blah .. more codeDi2015NewLineDi2015NewLine   return newArray;Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
11743479Di2015UniqueSeparatorGetHashCode
11743479Di2015UniqueSeparatorpublic override int GetHashCode()Di2015NewLine{Di2015NewLine    // omit null-coalesce if we know them to be non-nullDi2015NewLine    return (33 * (this._strA ?? "").GetHashCode())Di2015NewLine         + (this._strB ?? "").GetHashCode();Di2015NewLine}Di2015NewLine
11743479Di2015UniqueSeparatorprivate readonly int _hash;Di2015NewLineDi2015NewLinepublic Sample(string strA, string strB)Di2015NewLine{Di2015NewLine    this._strA = strA;Di2015NewLine    this._strB = strB;Di2015NewLine    this._hash = (33 * (this._strA ?? "").GetHashCode())Di2015NewLine               + (this._strB ?? "").GetHashCode();Di2015NewLine}Di2015NewLineDi2015NewLinepublic override int GetHashCode()Di2015NewLine{Di2015NewLine    return this._hash;Di2015NewLine}Di2015NewLine
11743547Di2015UniqueSeparatorXElement child = x.Descendants(siteNM + "siteMapNode")Di2015NewLine                .First(el => el.Attribute("title") != null && el.Attribute("title").Value == "Home");Di2015NewLine
11743573Di2015UniqueSeparatorMySettings settingsTest = new MySettings();Di2015NewLinesettingsTest.user_credits = new string[user_credits_array, 10];Di2015NewLinesettingsTest.user_credits[new_user_id, 0] = user_name;Di2015NewLinesettingsTest.user_credits[new_user_id, 1] = user_email;Di2015NewLinesettingsTest.user_credits[new_user_id, 2] = user_acc_name;Di2015NewLinesettingsTest.user_credits[new_user_id, 3] = user_acc_pass;Di2015NewLinesettingsTest.user_credits[new_user_id, 4] = sSelectedClient;Di2015NewLinesettingsTest.user_credits[new_user_id, 5] = server_inkomend;Di2015NewLinesettingsTest.user_credits[new_user_id, 6] = server_uitgaand;Di2015NewLinesettingsTest.user_credits[new_user_id, 7] = server_port + "";Di2015NewLinesettingsTest.user_credits[new_user_id, 8] = ssl_state;Di2015NewLineDi2015NewLineDi2015NewLinesettingsTest.Save(MySettings.GetDefaultPath());Di2015NewLineMySettings anotherTest = MySettings.Load(MySettings.GetDefaultPath());Di2015NewLine
11743806Di2015UniqueSeparatorstring.Format("{0:#,##0,,.000}", 1234567890.123m) == "1,234.568"Di2015NewLine
11743819Di2015UniqueSeparatorXmlAttribute.InnerText
11743819Di2015UniqueSeparatorXmlAttribute.InnerText
11743819Di2015UniqueSeparatorAssign
11743889Di2015UniqueSeparatorusing System.Text.RegularExpressions;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinevar str="asd fds 1.4#3";Di2015NewLinevar regex=new Regex("([A-Za-z]+)|([0-9]+)|([.#]+)|(.+?)");Di2015NewLineDi2015NewLinevar result=regex.Matches(str).OfType<Match>().Select(x=>x.Value).ToArray();Di2015NewLine
11743889Di2015UniqueSeparator(.+?)
11743889Di2015UniqueSeparatorvar regex=new Regex(@"(?:[A-Za-z]+)|(?:[0-9]+)|(?:[#.]+)|(?:(?:(.)\\1*)+?)");Di2015NewLine
11743889Di2015UniqueSeparator\\1
11744064Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLine            foreach (SqlParameter param in sqlParams)Di2015NewLine            {Di2015NewLine                sb.Append("declare " + param.ParameterName + " as " + param.SqlDbType + Environment.NewLine);Di2015NewLine                sb.Append("set " + param.ParameterName + " = " + param.Value + Environment.NewLine);Di2015NewLine            }Di2015NewLine            string sqlTestString = sb.ToString();Di2015NewLine
11744128Di2015UniqueSeparatorException
11744128Di2015UniqueSeparatorAggregateException.Handle
11744128Di2015UniqueSeparatort.Exception.Handle
11744128Di2015UniqueSeparatort.Exception.Handle(e =>Di2015NewLine            {Di2015NewLine            Console.WriteLine(e);Di2015NewLine            return true;Di2015NewLine            }Di2015NewLine    );Di2015NewLine
11744168Di2015UniqueSeparatorSOI
11744168Di2015UniqueSeparatorEOI
11744229Di2015UniqueSeparatorMonoObject *
11744229Di2015UniqueSeparatorMonoArray *
11744235Di2015UniqueSeparatorConfigurationManager.AppSettings["Part"]
11744272Di2015UniqueSeparator.Borders[Excel.XlBordersIndex.xlEdgeBottom] Di2015NewLine.Borders[Excel.XlBordersIndex.xlEdgeRight]Di2015NewLine.Borders[Excel.XlBordersIndex.xlEdgeLeft]  Di2015NewLine.Borders[Excel.XlBordersIndex.xlEdgeTop]Di2015NewLine
11744355Di2015UniqueSeparatorresult=string.Format("{0:0.0}",Math.Truncate(value*10)/10);Di2015NewLine
11744463Di2015UniqueSeparatorpublic enum RequestAcceptTypeDi2015NewLine{Di2015NewLine    NotSpecified,Di2015NewLine    Json,Di2015NewLine    XmlDi2015NewLine}Di2015NewLineDi2015NewLinepublic class RequestAcceptTypeModelBinder : IModelBinderDi2015NewLine{Di2015NewLine    public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)Di2015NewLine    {Di2015NewLine        if (bindingContext == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("bindingContext");Di2015NewLine        }Di2015NewLineDi2015NewLine        RequestAcceptType acceptType = RequestAcceptType.NotSpecified;Di2015NewLineDi2015NewLine        // Try for JsonDi2015NewLine        if (controllerContext.HttpContext.Request.AcceptTypes.Contains("application/json") || controllerContext.HttpContext.Request.Url.Query.Contains("application/json"))Di2015NewLine        {Di2015NewLine            acceptType = RequestAcceptType.Json;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Default to XmlDi2015NewLine        if (acceptType == RequestAcceptType.NotSpecified)Di2015NewLine        {Di2015NewLine            acceptType = RequestAcceptType.Xml;Di2015NewLine        }Di2015NewLineDi2015NewLine        return acceptType;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11744463Di2015UniqueSeparatorModelBinders.Binders[typeof(RequestAcceptType)] = new RequestAcceptTypeModelBinder();Di2015NewLine
11744463Di2015UniqueSeparatorpublic ActionResult Index(RequestAcceptType acceptType)Di2015NewLine
11744568Di2015UniqueSeparatorbase
11744568Di2015UniqueSeparatorbase
11744568Di2015UniqueSeparator    protected override void OnStop() {Di2015NewLine        string subject = "Notice: Service Stopped";Di2015NewLine        string body = "This message is to notify you that the service has " +Di2015NewLine            "been stopped. This message was generated automatically.";Di2015NewLine        EmailNotification em = new EmailNotification(subject, body);Di2015NewLine        em.SendNotification();Di2015NewLine        base.OnStop();Di2015NewLine    }Di2015NewLine
11744568Di2015UniqueSeparatorbase
11744691Di2015UniqueSeparator//using System.Net;Di2015NewLineDi2015NewLine    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(ApiProcedure.FunctionUri);Di2015NewLine    request.Credentials = (CredentialCache)Credentials;Di2015NewLine    request.PreAuthenticate = true;Di2015NewLineDi2015NewLine    //define the type of requestDi2015NewLine    request.Method = HttpMethod;Di2015NewLine    request.ContentType = "application/json";Di2015NewLineDi2015NewLine    //executeDi2015NewLine    StreamReader sr = new StreamReader(response.GetResponseStream());Di2015NewLine    return sr.ReadToEnd();Di2015NewLine
11744703Di2015UniqueSeparatorclass CustomConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        return value.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        int x = -1;Di2015NewLine        Int32.TryParse(value.ToString(), out x);Di2015NewLine        return x;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11744904Di2015UniqueSeparator[DllImport("coredll.dll")]Di2015NewLineprivate static extern bool KernelIoControl(Int32 IoControlCode, IntPtr InputBuffer, Int32 InputBufferSize, byte[] OutputBuffer, Int32 OutputBufferSize, ref Int32 BytesReturned);Di2015NewLineDi2015NewLineprivate static string GetDeviceID() {Di2015NewLine  // Reference: http://msdn.microsoft.com/en-us/library/aa446562.aspxDi2015NewLine  byte[] data = new byte[256];Di2015NewLine  Int32 OutputBufferSize, BytesReturned;Di2015NewLine  OutputBufferSize = data.Length;Di2015NewLine  BytesReturned = 0;Di2015NewLine  // Call KernelIoControl passing the previously defined IOCTL_HAL_GET_DEVICEID parameterDi2015NewLine  // We donâ€™t need to pass any input buffers to this callDi2015NewLine  // so InputBuffer and InputBufferSize are set to their null valuesDi2015NewLine  bool retVal = KernelIoControl(IOCTL_HAL_GET_DEVICEID, IntPtr.Zero, 0, data, OutputBufferSize, ref BytesReturned);Di2015NewLine  // If the request failed, exit the method nowDi2015NewLine  if (retVal) {Di2015NewLine    // Examine the OutputBuffer byte array to find the start of the Di2015NewLine    // Preset ID and Platform ID, as well as the size of the PlatformID. Di2015NewLine    // PresetIDOffset â€“ The number of bytes the preset ID is offset from the beginning of the structureDi2015NewLine    // PlatformIDOffset - The number of bytes the platform ID is offset from the beginning of the structureDi2015NewLine    // PlatformIDSize - The number of bytes used to store the platform IDDi2015NewLine    // Use BitConverter.ToInt32() to convert from byte[] to intDi2015NewLine    Int32 PresetIDOffset = BitConverter.ToInt32(data, 4);Di2015NewLine    Int32 PlatformIDOffset = BitConverter.ToInt32(data, 0xc);Di2015NewLine    Int32 PlatformIDSize = BitConverter.ToInt32(data, 0x10);Di2015NewLineDi2015NewLine    // Convert the Preset ID segments into a string so they can be Di2015NewLine    // displayed easily.Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    sb.Append(String.Format("{0:X8}-{1:X4}-{2:X4}-{3:X4}-",Di2015NewLine         BitConverter.ToInt32(data, PresetIDOffset),Di2015NewLine         BitConverter.ToInt16(data, PresetIDOffset + 4),Di2015NewLine         BitConverter.ToInt16(data, PresetIDOffset + 6),Di2015NewLine         BitConverter.ToInt16(data, PresetIDOffset + 8)));Di2015NewLineDi2015NewLine    // Break the Platform ID down into 2-digit hexadecimal numbersDi2015NewLine    // and append them to the Preset ID. This will result in a Di2015NewLine    // string-formatted Device IDDi2015NewLine    for (int i = PlatformIDOffset; i < PlatformIDOffset + PlatformIDSize; i++) {Di2015NewLine      sb.Append(String.Format("{0:X2}", data[i]));Di2015NewLine    }Di2015NewLine    // return the Device ID stringDi2015NewLine    return sb.ToString();Di2015NewLine  }Di2015NewLine  return null;Di2015NewLine}Di2015NewLine
11744934Di2015UniqueSeparatorTemplate
11744934Di2015UniqueSeparator<asp:Repeaters>
11744934Di2015UniqueSeparatorSelectionChanged
11744934Di2015UniqueSeparator<asp:Calendar runat="server" OnSelectionChanged="cal_SelectionChanged"> ... </asp:Calendar>Di2015NewLine
11744934Di2015UniqueSeparatorsender
11744934Di2015UniqueSeparatorcal_SelectionChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  Calendar cal = (Calendar)sender;Di2015NewLine  date = cal.SelectedDate;Di2015NewLine  blah blah...Di2015NewLine}Di2015NewLine
11745030Di2015UniqueSeparatorString ^ CSimpleObjectWrapper::ToString(void) Di2015NewLine{ Di2015NewLine    wchar_t szStr[100]; Di2015NewLine    HRESULT hr = m_impl->ToString(szStr, ARRAYSIZE(szStr)); Di2015NewLine    if (FAILED(hr)) Di2015NewLine    { Di2015NewLine        Marshal::ThrowExceptionForHR(hr); Di2015NewLine    } Di2015NewLine    // Marshal PWSTR to System::String and return it. Di2015NewLine    return gcnew String(szStr); Di2015NewLine} Di2015NewLine
11745257Di2015UniqueSeparatorMetaTitle
11745257Di2015UniqueSeparatorDisplayMetaTitle
11745257Di2015UniqueSeparatorFriendlyMetaTitle
11745257Di2015UniqueSeparatorViewMetaTitle
11745313Di2015UniqueSeparator        List<string> names = new List<string>() {"Mike","Joe","Jane"};Di2015NewLine        Dictionary<string, int> ids = new Dictionary<string, int>()Di2015NewLine                                          {Di2015NewLine                                              {"Mike",1},Di2015NewLine                                              {"Joe",2},Di2015NewLine                                              {"Jane",3},Di2015NewLine                                          };Di2015NewLineDi2015NewLine        // ["Mike","Joe","Jane"]Di2015NewLine        string nameJson = Newtonsoft.Json.JsonConvert.SerializeObject(names);Di2015NewLineDi2015NewLine        //{"Mike":1,"Joe":2,"Jane":3}Di2015NewLine        string idsJSon = Newtonsoft.Json.JsonConvert.SerializeObject(ids);Di2015NewLine
11745701Di2015UniqueSeparatorint x;Di2015NewLinex = 10; // atomicDi2015NewLinedecimal d;Di2015NewLineDi2015NewLined = 10m; // not atomicDi2015NewLine
11745701Di2015UniqueSeparatorprivate String _text;Di2015NewLinepublic void Method(String text)Di2015NewLine{Di2015NewLine  _text = text; // atomicDi2015NewLine}Di2015NewLine
11745763Di2015UniqueSeparatorRange rows = _range.Rows;Di2015NewLinerows.Autfit();Di2015NewLineif (rows != null)Di2015NewLine{Di2015NewLine  Marshal.FinalReleaseComObject(rows);Di2015NewLine}Di2015NewLine
11745765Di2015UniqueSeparator public class ModelList : List<string>Di2015NewLine    {Di2015NewLine        public ModelList()Di2015NewLine        {Di2015NewLine            Add("John");Di2015NewLine            Add("Jack");Di2015NewLine            Add("Sue");Di2015NewLine        }Di2015NewLineDi2015NewLine        public int CurrentIndex = 0;Di2015NewLine        public string CurrentItemDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return this[CurrentIndex];Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11745765Di2015UniqueSeparator      public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        void ContinueAnimation()Di2015NewLine        {Di2015NewLine            ModelList list = Resources["ModelList"] as ModelList;Di2015NewLine            if ( list.CurrentIndex < (list.Count -1))Di2015NewLine            {Di2015NewLine                list.CurrentIndex += 1;Di2015NewLine                Storyboard b = Resources["FadeOut"] as Storyboard;Di2015NewLine                b.Begin();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Start_Click(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLine            ContinueAnimation();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void FadeOut_Completed(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ContinueAnimation();    Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11745765Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:app="clr-namespace:WpfApplication1"Di2015NewLine        Title="MainWindow"Di2015NewLine        Width="1000"Di2015NewLine        Height="1000">Di2015NewLine    <Window.Resources>Di2015NewLine        <app:ModelList x:Key="ModelList" />Di2015NewLine        <Storyboard x:Key="FadeOut" x:Name="FadeOut" Completed="FadeOut_Completed">Di2015NewLine            <DoubleAnimation Duration="0:0:0.5"Di2015NewLine                             Storyboard.TargetName="MyLabel"Di2015NewLine                             Storyboard.TargetProperty="Opacity"Di2015NewLine                             To="0" />Di2015NewLine            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MyLabel" Storyboard.TargetProperty="Text">Di2015NewLine                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{Binding Source={StaticResource ModelList}, Path=CurrentItem}" />Di2015NewLine            </ObjectAnimationUsingKeyFrames>Di2015NewLine            <DoubleAnimation BeginTime="0:0:0.5"Di2015NewLine                             Duration="0:0:1"Di2015NewLine                             Storyboard.TargetName="MyLabel"Di2015NewLine                             Storyboard.TargetProperty="Opacity"Di2015NewLine                             To="1" />Di2015NewLine        </Storyboard>Di2015NewLine    </Window.Resources>Di2015NewLine    <StackPanel>Di2015NewLineDi2015NewLine        <TextBlock Name="MyLabel"Di2015NewLine                   Width="100"Di2015NewLine                   Height="24"Di2015NewLine                   Background="AliceBlue"Di2015NewLine                   Text="{Binding Source={StaticResource ModelList},Di2015NewLine                                  Path=CurrentItem}" />Di2015NewLineDi2015NewLine        <Button Name="Start"Di2015NewLine                Height="30"Di2015NewLine                HorizontalAlignment="Left"Di2015NewLine                Click="Start_Click">Di2015NewLine            StartDi2015NewLine        </Button>Di2015NewLineDi2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
11745801Di2015UniqueSeparatorGetElementbyId()
11745801Di2015UniqueSeparatorHtmlNode node = updoc.GetElementbyId("h");Di2015NewLineXElement e;Di2015NewLinebody.Add(e = new XElement(node.Name, XElement.Parse(node.InnerHtml)));Di2015NewLine
11745801Di2015UniqueSeparatorforeach(HtmlAttribute att in node.Attributes)Di2015NewLine{Di2015NewLine    e.Add(new XAttribute(att.Name, att.Value));Di2015NewLine}Di2015NewLine
11745845Di2015UniqueSeparator    using (InventoryEntities c = new InventoryEntities(Properties.Settings.Default.Connection))Di2015NewLine    {Di2015NewLine        comboBox1.DataSource    = c.Customers;Di2015NewLine        comboBox1.ValueMember   = "id";Di2015NewLine        comboBox1.DisplayMember = "name";Di2015NewLine    }Di2015NewLine
11746009Di2015UniqueSeparator<Button HorizontalAlignment="Left" Margin="20,0,0,20" VerticalAlignment="Bottom" Width="50" Height="25">Di2015NewLine    <Image Source="image.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0">Di2015NewLine    </Image>Di2015NewLine</Button>Di2015NewLine
11746009Di2015UniqueSeparator<Button Focusable="False" Command="{Binding CmdClick}" Margin="0">Di2015NewLine    <Image Source="{Binding ButtonImage}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0">Di2015NewLine    </Image>Di2015NewLine</Button>Di2015NewLine
11746009Di2015UniqueSeparatorprivate Image buttonImage;Di2015NewLineDi2015NewLinepublic Image ButtonImage Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine       return buttonImage;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11746009Di2015UniqueSeparatorBitmapImage src = new BitmapImage();Di2015NewLinesrc.BeginInit();Di2015NewLinesrc.UriSource = new Uri("image.png", UriKind.Relative);Di2015NewLinesrc.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLinesrc.EndInit();Di2015NewLineDi2015NewLinebuttonImage = new Image();Di2015NewLinebuttonImage.Source = src;Di2015NewLine
11746021Di2015UniqueSeparatorXElement root = XElement.Load(path);Di2015NewLineXElement div = root.XPathElement("//div[@id={0}]", 1);Di2015NewLineif(null != div) // which it shouldn't beDi2015NewLine    div.Add(n);Di2015NewLine
11746033Di2015UniqueSeparator// if the build platform of this app is x86 use C:\\windows\\sysnativeDi2015NewLineif(!Environment.Is64BitProcess) Di2015NewLine   System.Diagnostics.Process.Start("C:\\\\Windows\\\\sysnative\\\\SnippingTool.exe");Di2015NewLineelseDi2015NewLine   System.Diagnostics.Process.Start("C:\\\\Windows\\\\system32\\\\SnippingTool.exe");Di2015NewLine
11746033Di2015UniqueSeparatorC:\\Windows\\System32\\
11746033Di2015UniqueSeparatorC:\\Windows\\System32\\
11746033Di2015UniqueSeparatorC:\\Windows\\SysWOW64\\
11746033Di2015UniqueSeparatorsnippingtool.exe
11746033Di2015UniqueSeparatorC:\\Windows\\sysnative\\
11746105Di2015UniqueSeparatorRegex.Matches( s,  "/" ).CountDi2015NewLine
11746111Di2015UniqueSeparatorReSharper | Options -> Code Editing | C# | Formatting style | Line breaks and wrapping -> LineWrapping | Wrap long lines
11746175Di2015UniqueSeparatorBook { BookId, Title, AuthorId, PublisherId, ISBN, ISBN13, PublishedOn, NumberOfPages, etc }Di2015NewLineBookStock { BookStockId, BookId, StockDateTime }Di2015NewLineBookCheckOut { BookCheckOutId, BookStockId, CheckOutDate, CheckInDate, Quantity }Di2015NewLine
11746175Di2015UniqueSeparatorBookStock
11746175Di2015UniqueSeparatorBookCheckOut
11746175Di2015UniqueSeparatorSELECT COUNT(bs.BookStockId) - (SELECT COUNT(bco.BookCheckOutId) FROM BookCheckOut bco WHERE bco.BookStockId = bs.BookStockId AND bco.CheckInDate IS NULL) FROM BookStock bsDi2015NewLine
11746175Di2015UniqueSeparatoractual
11746175Di2015UniqueSeparatorSELECT * FROM BookCheckOut WHERE BookStockId = {id} AND CheckInDate IS NULLDi2015NewLine
11746175Di2015UniqueSeparatorBookStock
11746175Di2015UniqueSeparatorBookStock
11746175Di2015UniqueSeparatorBookCheckOut
11746175Di2015UniqueSeparatorBook
11746383Di2015UniqueSeparatorfloat channels = batchcount / THRESHOLD;Di2015NewLine
11746383Di2015UniqueSeparatorint
11746383Di2015UniqueSeparatorfloat channels
11746383Di2015UniqueSeparatorfloor(batchcount / THRESHOLD)Di2015NewLine
11746383Di2015UniqueSeparatorfor (int channel = 0; channel < idx1; channel++)Di2015NewLine{Di2015NewLine    for (int i = 0; i < items_per_batch; i++)Di2015NewLine
11746383Di2015UniqueSeparatorbatchcount
11746383Di2015UniqueSeparatorchannels
11746383Di2015UniqueSeparatoritems_per_batch
11746383Di2015UniqueSeparatorsubsets[channel][i]
11746413Di2015UniqueSeparator<Window x:Class="ListViewCombo.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Grid>Di2015NewLine        <ListView MinHeight="100" Name="m_taskList" ItemsSource="{Binding Path=MyItems}">Di2015NewLine            <ListView.View>Di2015NewLine                <GridView>Di2015NewLine                    <GridViewColumn Width="140" Header="Task" >Di2015NewLine                        <GridViewColumn.CellTemplate>Di2015NewLine                            <DataTemplate>Di2015NewLine                                <Grid HorizontalAlignment="Stretch">Di2015NewLine                                    <ComboBox Name="m_taskName" DisplayMemberPath="Name" SelectedItem="{Binding Path=SelectedItem}" SelectedValuePath="ID" ItemsSource="{Binding Path=Items}" />Di2015NewLine                                </Grid>Di2015NewLine                    </DataTemplate>Di2015NewLine                </GridViewColumn.CellTemplate>Di2015NewLine            </GridViewColumn>Di2015NewLine            <GridViewColumn Width="140" Header="Duration" >Di2015NewLine                <GridViewColumn.CellTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <Grid >Di2015NewLine                            <TextBox MinWidth="150" Text="{Binding Path=SelectedItem.Duration}" />Di2015NewLine                        </Grid>Di2015NewLine                    </DataTemplate>Di2015NewLine                 </GridViewColumn.CellTemplate>Di2015NewLine             </GridViewColumn>                   Di2015NewLine            </GridView>Di2015NewLine        </ListView.View>Di2015NewLine    </ListView>Di2015NewLine</Grid>Di2015NewLine</Window>Di2015NewLine
11746413Di2015UniqueSeparatorusing System.Collections.ObjectModel;Di2015NewLineusing Microsoft.Practices.Prism.ViewModel;Di2015NewLineDi2015NewLinenamespace ListViewComboDi2015NewLine{Di2015NewLine    class MainViewModel : NotificationObjectDi2015NewLine    {Di2015NewLine        public MainViewModel()Di2015NewLine        {Di2015NewLine            for (int i = 0; i < 3; i++)Di2015NewLine            {Di2015NewLine                ObservableCollection<Task> Source = new ObservableCollection<Task>();Di2015NewLine                for (int j = 0; j < 5; j++)Di2015NewLine                {Di2015NewLine                    Source.Add(new Task { ID = i, Name = "Name_" + i, Duration = (i + 2) * 6 + (3 * j) });Di2015NewLine                }Di2015NewLine                MyItems.Add(new TfsTask { ID = i, Items = Source });Di2015NewLine            }                        Di2015NewLine        }Di2015NewLineDi2015NewLine        private ObservableCollection<TfsTask> _myItems = new ObservableCollection<TfsTask>();Di2015NewLine        public ObservableCollection<TfsTask> MyItemsDi2015NewLine        {Di2015NewLine            get { return _myItems; }Di2015NewLine            set { _myItems = value; RaisePropertyChanged(() => MyItems); }Di2015NewLine        }    Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TaskDi2015NewLine    {Di2015NewLine        public int ID { get; set; }Di2015NewLine        public string Name { get; set; }Di2015NewLine        public int Duration { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TfsTaskDi2015NewLine    {Di2015NewLine        public int ID { get; set; }Di2015NewLine        public ObservableCollection<Task> Items { get; set; }Di2015NewLine        public Task SelectedItem { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11746473Di2015UniqueSeparatorrepo
11746473Di2015UniqueSeparatorformRepository
11746473Di2015UniqueSeparatorformRepository
11746473Di2015UniqueSeparatorrepo
11746473Di2015UniqueSeparatorMedicalPlan
11746473Di2015UniqueSeparatorBenefitsForm
11746473Di2015UniqueSeparatorBenefitsForm form = new BenefitsForm() { UserInfo = new BenefitsUser() }; Di2015NewLineusing(var repo = new Repository()) Di2015NewLine{ Di2015NewLine  form.Medical = repo.Retrieve(new NumericKey(formId))); //this retrieves the coveragelevel with the id I want. Di2015NewLine  repo.Create(form); // this creates a duplicate med plan and 4 duplicate coverage levels. Di2015NewLine  repo.SaveChanges(); Di2015NewLine} Di2015NewLine
11746607Di2015UniqueSeparatorclass Program {Di2015NewLine    static void Main( string[] args ) {Di2015NewLineDi2015NewLine        string prefix = "p22";Di2015NewLine        IEnumerable<Type> types = Assembly.LoadFrom("c:\\\\Sample.Assembly.dll").GetTypes();    Di2015NewLine        Type baseClass = typeof(foo);Di2015NewLine        Type foundType = types.Where(Di2015NewLine            t => t.Name.StartsWith( prefix ) &&Di2015NewLine                t.IsSubclassOf( baseClass )Di2015NewLine                ).SingleOrDefault();Di2015NewLine        foo myClass = (foo)Activator.CreateInstance( foundType );Di2015NewLine                //Do Stuff with myClass Di2015NewLine    }Di2015NewLine}Di2015NewLineabstract class foo { }Di2015NewLineclass p22_notMyClass { }Di2015NewLineclass p22_myclass : foo { }Di2015NewLine}Di2015NewLine
11746616Di2015UniqueSeparatorWM_COPYDATA
11746914Di2015UniqueSeparatorgswin32.exe
11746914Di2015UniqueSeparatorgswin32c.exe
11746914Di2015UniqueSeparator-sDEVICE=pdfwrite
11746914Di2015UniqueSeparator.pdf
11746914Di2015UniqueSeparator-dBATCH
11746914Di2015UniqueSeparator-dBatch
11746914Di2015UniqueSeparator-dBATCH
11746914Di2015UniqueSeparatorGS>
11746914Di2015UniqueSeparatorgswin32.exe ^Di2015NewLine  -dNOPAUSE ^Di2015NewLine  -dBATCH ^Di2015NewLine  -sDEVICE=pdfwrite ^Di2015NewLine  -sOUTPUTFILE=output2.pdf ^Di2015NewLine   "file1.ps" "file2.pdf" "file3.eps"Di2015NewLine
11746965Di2015UniqueSeparator@"my\\x0020bar".Replace(@"\\x0020", " ")Di2015NewLine
11747063Di2015UniqueSeparatornew IPEndPoint(IPAddress.Any, myPort)
11747063Di2015UniqueSeparatormyPort
11747063Di2015UniqueSeparatorvar client = new TcpClient(new IPEndPoint(IPAddress.Any, myPort));Di2015NewLine
11747063Di2015UniqueSeparatornew TcpClient();
11747104Di2015UniqueSeparatorIEnumerable<T>
11747104Di2015UniqueSeparatorIQueryable<T>
11747104Di2015UniqueSeparatorIEnumerable<T>
11747104Di2015UniqueSeparatorIQueryable
11747104Di2015UniqueSeparatorIEnumerable
11747104Di2015UniqueSeparatorIEnumerable
11747126Di2015UniqueSeparatorBackgroundWorker
11747126Di2015UniqueSeparatorDoWork
11747126Di2015UniqueSeparatorDoWork
11747126Di2015UniqueSeparatorCancelAsync
11747126Di2015UniqueSeparatorDoWork
11747126Di2015UniqueSeparatorBackgroundWorker
11747126Di2015UniqueSeparatorDoWork
11747126Di2015UniqueSeparatorCancellationPending
11747126Di2015UniqueSeparatorBackgroundWorker
11747126Di2015UniqueSeparatorworker
11747126Di2015UniqueSeparatorCancelAsync
11747126Di2015UniqueSeparatorBackgroundWorker
11747209Di2015UniqueSeparatorViewState
11747209Di2015UniqueSeparatorSession
11747209Di2015UniqueSeparatorHttpContext.Current.Session
11747209Di2015UniqueSeparatorHttpContext.Current.CurrentHandler
11747209Di2015UniqueSeparatorPage
11747209Di2015UniqueSeparatorViewState
11747209Di2015UniqueSeparatorSystem.Web.UI.Page
11747215Di2015UniqueSeparatorvar query  from a in MyDC.Table1 Di2015NewLine           join b in MyDC.Table2 on a.Property1 equals b.Property2Di2015NewLine           join c in MyDC.Table3 on b.Property1 equals c.Property5Di2015NewLine           join d in MyDC.Table4 on c.Property2 equals d.Property1Di2015NewLineselect ...Di2015NewLine
11747245Di2015UniqueSeparatorSystem.Windows.Forms.Timer
11747245Di2015UniqueSeparatorInvokeRequired
11747245Di2015UniqueSeparatorBeginInvoke
11747245Di2015UniqueSeparatorSystem.Thread.Timer
11747245Di2015UniqueSeparatorHistoricalDownload
11747245Di2015UniqueSeparatorSystem.Windows.Forms.Timer
11747350Di2015UniqueSeparator$("input[type=hidden][id='<%=tabTitle.ClientID%>']").val("Hello World"); Di2015NewLine$("input[type=hidden][id='<%=tabMenu.ClientID%>']").val("Hello World"); Di2015NewLine
11747437Di2015UniqueSeparator^(20|[10]?\\d)$
11747437Di2015UniqueSeparator^(20|[10]?\\d)(?:-(20|[10]?\\d))?$
11747619Di2015UniqueSeparator    <Grid Grid.Row="1" HorizontalAlignment="Stretch">Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="250"/>Di2015NewLine            <ColumnDefinition Width="4*"/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine        <Grid Grid.Column="0" Background="Red" />Di2015NewLine        <Grid Grid.Column="1" Background="Blue" />Di2015NewLine    </Grid>Di2015NewLine
11747688Di2015UniqueSeparator    // Tap GestureDi2015NewLine    UITapGestureRecognizer tapPageGestureRecognizer = new UITapGestureRecognizer();Di2015NewLine    tapPageGestureRecognizer.AddTarget(this, new Selector ("HandleTapPageGestureRecognizer:"));         Di2015NewLine    this.View.AddGestureRecognizer(tapPageGestureRecognizer);Di2015NewLine
11747688Di2015UniqueSeparatorprivate void SetGrandParentViewGestureEnabled(bool enabled)Di2015NewLine{Di2015NewLine    foreach(UIGestureRecognizer g in this.View.Superview.Superview.GestureRecognizers)Di2015NewLine    {Di2015NewLine        g.Enabled = enabled;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevoid HandleButtonSubmitTouchDown (object sender, EventArgs e)Di2015NewLine{Di2015NewLine    SetGrandParentViewGestureEnabled(false);Di2015NewLine}Di2015NewLineDi2015NewLinevoid HandleButtonSubmitTouchUpInside (object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // => Do treatments here!Di2015NewLineDi2015NewLine    SetGrandParentViewGestureEnabled(true);Di2015NewLine}Di2015NewLine
11747688Di2015UniqueSeparatorvoid HandleButtonSubmitTouchUpOutside (object sender, EventArgs e)Di2015NewLine{Di2015NewLine    SetGrandParentViewGestureEnabled(true);Di2015NewLine}Di2015NewLine
11747701Di2015UniqueSeparatorListViewItem item = myListView.ItemContainerGenerator.ContainerFromIndex(index) as ListViewItem;Di2015NewLineitem.Focus();Di2015NewLine
11747701Di2015UniqueSeparatorKeyboard.Focus(item); Di2015NewLine
11747701Di2015UniqueSeparatorListView
11747701Di2015UniqueSeparatormyListView.ScrollIntoView(item);Di2015NewLine
11747701Di2015UniqueSeparatorVirtualizingStackPanel.IsVirtualizing="False"
11747701Di2015UniqueSeparatorListView
11747701Di2015UniqueSeparatorListView
11747701Di2015UniqueSeparatorListViewItems
11747701Di2015UniqueSeparatorContainerFromIndex()
11747701Di2015UniqueSeparatornull
11747758Di2015UniqueSeparatorFileData
11747758Di2015UniqueSeparatorFileData
11747811Di2015UniqueSeparatorprivate void copy_to_clipboard()Di2015NewLine{Di2015NewLine    using (var stream = new MemoryStream())Di2015NewLine    {Di2015NewLine        clipboardStatus.Text = "Copying image to clipboard...";Di2015NewLine        pic_display.Invoke((Action)()=> { Di2015NewLine            if (pic_display.Image != null)Di2015NewLine              pic_display.Image.Save(stream, ImageFormat.Png); Di2015NewLine        });Di2015NewLine        if (stream.Position == 0) return; // No image was savedDi2015NewLine        var data = new DataObject("PNG", stream);Di2015NewLine        Clipboard.Clear();Di2015NewLine        Clipboard.SetDataObject(data, true);Di2015NewLine        clipboardStatus.Text = "Copied successfully!";Di2015NewLine    }Di2015NewLine}Di2015NewLine
11747822Di2015UniqueSeparatorTest.cs(12,29): error CS1026: ) expectedDi2015NewLineTest.cs(12,42): error CS1514: { expectedDi2015NewLineTest.cs(12,42): error CS1525: Invalid expression term ')'Di2015NewLineTest.cs(12,44): error CS1002: ; expectedDi2015NewLineTest.cs(13,9): error CS1525: Invalid expression term 'case'Di2015NewLineTest.cs(13,19): error CS1001: Identifier expectedDi2015NewLineTest.cs(13,19): error CS1525: Invalid expression term ':'Di2015NewLineTest.cs(13,20): error CS1002: ; expectedDi2015NewLineTest.cs(15,9): error CS1525: Invalid expression term 'case'Di2015NewLineTest.cs(15,20): error CS1001: Identifier expectedDi2015NewLineTest.cs(15,20): error CS1525: Invalid expression term ':'Di2015NewLineTest.cs(15,21): error CS1002: ; expectedDi2015NewLine
11747822Di2015UniqueSeparatorForEach
11747822Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    public string Foo { get; set; }    Di2015NewLine    public int Bar { get; set; }Di2015NewLineDi2015NewLine    public void DumpProperties()Di2015NewLine    {Di2015NewLine        this.GetType().GetProperties().ToList()Di2015NewLine            .ForEach(p => Console.WriteLine("{0}: {1}", p.Name,Di2015NewLine                                            p.GetValue(this, null)));Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        new Test { Foo = "Hi", Bar = 20 }.DumpProperties();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11747822Di2015UniqueSeparatorForEach
11747822Di2015UniqueSeparatorforeach
11747822Di2015UniqueSeparatorforeach (var property in GetType().GetProperties())Di2015NewLine{Di2015NewLine    // Use propertyDi2015NewLine}Di2015NewLine
11748015Di2015UniqueSeparatortypeof(Person)
11748015Di2015UniqueSeparatorDOB
11748015Di2015UniqueSeparatorpublic static TValue GetDefaultValue<TClass, TValue>(this TClass val, Expression<Func<TClass, TValue>> getter) {Di2015NewLine    var type = typeof(TClass);Di2015NewLine    var property = type.GetProperties().ToList().Single(p => p.Name == GetFullPropertyName(exp));Di2015NewLine    var defaultValue = (DefaultValueAttribute)property.GetCustomAttributes(typeof(DefaultValueAttribute), false).FirstOrDefault();Di2015NewLine    return (TProperty)defaultValue.Value;Di2015NewLine}Di2015NewLine
11748015Di2015UniqueSeparatorPerson somePerson = GetMeAPerson();Di2015NewLinesomePerson.GetDefaultValue(p=>p.DOB);Di2015NewLine
11748015Di2015UniqueSeparatorpublic static TValue GetDefaultValue<TClass, TValue>(Expression<Func<TClass, TValue>> getter) {Di2015NewLine    var type = typeof(TClass);Di2015NewLine    var property = type.GetProperties().ToList().Single(p => p.Name == GetFullPropertyName(exp));Di2015NewLine    var defaultValue = (DefaultValueAttribute)property.GetCustomAttributes(typeof(DefaultValueAttribute), false).FirstOrDefault();Di2015NewLine    return (TProperty)defaultValue.Value;Di2015NewLine}Di2015NewLine
11748015Di2015UniqueSeparatorvar defaultValue = GetDefaultValue<Person, DateTime>(p => p.DOB);Di2015NewLine
11748059Di2015UniqueSeparatorRestProcess.initilaizeRest()
11748059Di2015UniqueSeparatorIAsyncResult
11748059Di2015UniqueSeparatorotherClass
11748059Di2015UniqueSeparatorListData
11748059Di2015UniqueSeparatorinitilaizeRest()
11748059Di2015UniqueSeparatorotherClass
11748084Di2015UniqueSeparatorpublic class MyHandler : IHttpHandlerDi2015NewLine{Di2015NewLineDi2015NewLine    public void ProcessRequest(HttpContext context)Di2015NewLine    {Di2015NewLine        String fileName = @"c:\\PathToMyFile\\Myfile.jpg";Di2015NewLine        using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read))Di2015NewLine        {Di2015NewLine            var buffer = new byte[fileStream.Length];Di2015NewLine            fileStream.Read(buffer, 0, Convert.ToInt32(fileStream.Length));Di2015NewLine            context.Response.ContentType = "image/jpeg";Di2015NewLine            context.Response.BinaryWrite(buffer);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsReusableDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11748084Di2015UniqueSeparatorpublic partial class MainPage : UserControlDi2015NewLine{Di2015NewLine    public MainPage()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        WebClient client = new WebClient();Di2015NewLine        client.OpenReadCompleted += (s, e) =>Di2015NewLine            {Di2015NewLine                using (Stream stream = e.Result)Di2015NewLine                {Di2015NewLine                    BitmapImage img = new BitmapImage();Di2015NewLine                    img.SetSource(stream);Di2015NewLineDi2015NewLine                    // Update MyImage.Source. Use the Dispatcher to ensure this happens on the UI ThreadDi2015NewLine                    Dispatcher.BeginInvoke(() =>Di2015NewLine                        {Di2015NewLine                            MyImage.Source = img;Di2015NewLine                        });Di2015NewLineDi2015NewLine                }Di2015NewLine            };Di2015NewLine        client.OpenReadAsync(new Uri(String.Format(BaseURL + "MyHandler.ashx")));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11748084Di2015UniqueSeparator<Border x:Name="MyBorder" Width="100" Height="100" Background="Black">Di2015NewLine        <ToolTipService.ToolTip>Di2015NewLine            <Image x:Name="MyImage" />Di2015NewLine        </ToolTipService.ToolTip>Di2015NewLineDi2015NewLine</Border>Di2015NewLine
11748096Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine {Di2015NewLine    if( IsPostBack ) Di2015NewLine    {Di2015NewLine        string senderControl = Request.Params["__EVENTTARGET"].ToString();Di2015NewLine        //senderControl will contain the name of the button/control responsible for PostBackDi2015NewLine    }Di2015NewLine  }Di2015NewLine
11748231Di2015UniqueSeparator((IObjectContextAdapter)context).ObjectContext.CommandTimeout = 180;Di2015NewLine
11748257Di2015UniqueSeparatorSpriteCollection
11748257Di2015UniqueSeparatorTile
11748303Di2015UniqueSeparatorstring s = @"This is a ""quoted"" string.";Di2015NewLines.IndexOf(@"a ""quoted"" string");Di2015NewLine
11748303Di2015UniqueSeparatorstring s = "This is a \\"quoted\\" string.";Di2015NewLines.IndexOf("a \\"quoted\\" string");Di2015NewLine
11748364Di2015UniqueSeparatorControl
11748364Di2015UniqueSeparatorForm
11748364Di2015UniqueSeparatorIDisposable
11748364Di2015UniqueSeparatorIDisposable
11748364Di2015UniqueSeparatorIDisposable
11748364Di2015UniqueSeparatorControls
11748364Di2015UniqueSeparatorIDisposable.Dispose
11748364Di2015UniqueSeparatorDispose
11748405Di2015UniqueSeparator@using (Html.BeginForm("Index", "Account")) {Di2015NewLine    //Di2015NewLine}Di2015NewLine
11748467Di2015UniqueSeparatortxtMainView.Text = txtMainView.Text.Insert(0, "TEST");Di2015NewLine
11748467Di2015UniqueSeparatorString
11748479Di2015UniqueSeparator        PDFNet.Initialize();Di2015NewLineDi2015NewLine        // Relative path to the folder containing test files.Di2015NewLine        string input_path = "../../../../TestFiles/";Di2015NewLine        string output_path = "../../../../TestFiles/Output/";Di2015NewLineDi2015NewLine        PDFDoc doc = new PDFDoc(input_path + "form1.pdf");Di2015NewLine        ElementWriter writer = new ElementWriter();Di2015NewLine        ElementBuilder eb = new ElementBuilder();Di2015NewLine        for (int index = 1; index <= doc.GetPageCount(); index++)Di2015NewLine        {Di2015NewLine            Page page = doc.GetPage(index); Di2015NewLine            writer.Begin(page);Di2015NewLine            eb.Reset();Di2015NewLineDi2015NewLine            // Begin writing a block of textDi2015NewLine            string data = "Page " + index;Di2015NewLine            Element element = eb.CreateTextBegin(Font.Create(doc, Font.StandardType1Font.e_times_roman, true), 10.0);Di2015NewLine            writer.WriteElement(element);Di2015NewLine            eb.CreateTextRun(data);Di2015NewLine            element.SetTextMatrix(10, 0, 0, 10, 100, 100);Di2015NewLine            GState gstate = element.GetGState();Di2015NewLine            gstate.SetTextRenderMode(GState.TextRenderingMode.e_fill_text);Di2015NewLine            gstate.SetStrokeColorSpace(pdftron.PDF.ColorSpace.CreateDeviceRGB());Di2015NewLine            gstate.SetStrokeColor(new pdftron.PDF.ColorPt(1, 0, 0));Di2015NewLineDi2015NewLine            writer.WriteElement(element);Di2015NewLine            writer.WriteElement(eb.CreateTextEnd());  Di2015NewLine            writer.End();Di2015NewLineDi2015NewLine        }Di2015NewLine        writer.Dispose();Di2015NewLine        eb.Dispose();Di2015NewLine        doc.Save(output_path + "element_builder.pdf", SDFDoc.SaveOptions.e_linearized);Di2015NewLine        doc.Close();Di2015NewLine
11748507Di2015UniqueSeparatorlock
11748620Di2015UniqueSeparatorIEnumerable
11748620Di2015UniqueSeparator.Sum()
11748620Di2015UniqueSeparatorsum
11748648Di2015UniqueSeparatorDbContext
11748648Di2015UniqueSeparatorParts
11748653Di2015UniqueSeparatorGetProperies(...)
11748701Di2015UniqueSeparatorpartials
11748732Di2015UniqueSeparatorIXmlSerializable
11748732Di2015UniqueSeparatorBinaryFormatter
11748747Di2015UniqueSeparatorGlobalHost.ConnectionManager.GetHubContext
11748747Di2015UniqueSeparator// get gub contextDi2015NewLineIHubContext context = GlobalHost.ConnectionManager.GetHubContext<ChatHub>();Di2015NewLine// broadcast to all clients in this hubDi2015NewLinecontext.Clients.broadcast("Hello World");Di2015NewLine
11748760Di2015UniqueSeparatorstatic void AdjustAttributes(HtmlNode root, string baseUrl, string attrName)Di2015NewLine{Di2015NewLine    var query =Di2015NewLine        from node in root.Descendants()Di2015NewLine        let attr = node.Attributes[attrName]Di2015NewLine        where attr != nullDi2015NewLine        select attr;Di2015NewLine    foreach (var attr in query)Di2015NewLine    {Di2015NewLine        var url = GetAbsoluteUrlString(baseUrl, attr.Value);Di2015NewLine        attr.Value = url;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic string GetAbsoluteUrlString(string baseUrl, string url)Di2015NewLine{Di2015NewLine    var uri = new Uri(url, UriKind.RelativeOrAbsolute);Di2015NewLine    if (!uri.IsAbsoluteUri)Di2015NewLine        uri = new Uri(new Uri(baseUrl), uri);Di2015NewLine    return uri.ToString();Di2015NewLine}Di2015NewLine
11748760Di2015UniqueSeparatorvar web = new HtmlWeb();Di2015NewLinevar doc = web.Load(pattern);Di2015NewLinevar selectedNodes = doc.DocumentNode.SelectNodes("//li[@class=''] | //li[@class='f']");Di2015NewLineforeach (var node in selectedNodes)Di2015NewLine{Di2015NewLine    AdjustAttributes(node, url, "href");Di2015NewLine    AdjustAttributes(node, url, "src");Di2015NewLine}Di2015NewLine
11748779Di2015UniqueSeparatorreturn File(stream, fileName, "application/pdf")
11748795Di2015UniqueSeparatorYAxis.Cross
11748795Di2015UniqueSeparatorX
11748795Di2015UniqueSeparatorMyZedGraphObject.ZedGraphControl.GraphPane.AddCurve(Di2015NewLine    null, new[] { -0.3, 0.5, 0.9 }, new[] { 0.8, 0.3, 0.1 }, Color.Blue);Di2015NewLineDi2015NewLineMyZedGraphObject.ZedGraphControl.GraphPane.YAxis.Cross = 0.0;Di2015NewLineMyZedGraphObject.ZedGraphControl.GraphPane.AxisChange();Di2015NewLine
11748893Di2015UniqueSeparatornotHashedStr
11748893Di2015UniqueSeparatorrequire 'digest/sha1'Di2015NewLinereturnValue = Digest::SHA1.base64digest 'notHashedStr'Di2015NewLine
11748925Di2015UniqueSeparatorvar ca1 = new CodeArrayCreateExpression("System.Int32", 10);                        Di2015NewLinevar cv1 = new CodeVariableDeclarationStatement("System.Int32[]", "x", ca1);Di2015NewLine
11748925Di2015UniqueSeparatorvar csc = new CSharpCodeProvider( new Dictionary<string, string>() { { "CompilerVersion", "v4.0" } } );Di2015NewLinevar cp = new CompilerParameters() {Di2015NewLine    GenerateExecutable = false,Di2015NewLine    OutputAssembly = outputAssemblyName,Di2015NewLine    GenerateInMemory = trueDi2015NewLine};Di2015NewLineDi2015NewLinecp.ReferencedAssemblies.Add( "mscorlib.dll" );Di2015NewLinecp.ReferencedAssemblies.Add( "System.dll" );Di2015NewLinecp.ReferencedAssemblies.Add( "System.Core.dll" );Di2015NewLineDi2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine// The string can contain any valid c# code, but remember to resolve your referencesDi2015NewLineDi2015NewLinesb.Append( "namespace Foo{" );Di2015NewLinesb.Append( "using System;" );Di2015NewLinesb.Append( "public static class MyClass{");Di2015NewLineDi2015NewLine// your specific scenarioDi2015NewLinesb.Append( @"public static readonly string[] LevelMap = {Di2015NewLine    ""WWWWWWWWWWWWWWWWWWW"",Di2015NewLine    ""WGGGGGGGGGGGGGGGGGW"",Di2015NewLine    ""WGGGGGGGGGGGGGGGGGW"",Di2015NewLine    ""WWWWWWWWWWWWWWWWWWW"" };" );Di2015NewLineDi2015NewLinesb.Append( "}}" );Di2015NewLineDi2015NewLine// "results" will usually contain very detailed error messagesDi2015NewLinevar results = csc.CompileAssemblyFromSource( cp, sb.ToString() );Di2015NewLine
11748960Di2015UniqueSeparatorSqlDataReader
11748960Di2015UniqueSeparatorpublic static IEnumerable<SelectListItem> ToSelectList<T, TTextProperty, TValueProperty>(this IEnumerable<T> instance, Func<T, TTextProperty> text, Func<T, TValueProperty> value, Func<T, bool> selectedItem = null)Di2015NewLine{Di2015NewLine    return instance.Select(t => new SelectListItemDi2015NewLine    {Di2015NewLine        Text = Convert.ToString(text(t)),Di2015NewLine        Value = Convert.ToString(value(t)),Di2015NewLine        Selected = selectedItem != null ? selectedItem(t) : falseDi2015NewLine    });Di2015NewLine}Di2015NewLine
11748960Di2015UniqueSeparatorvar list = SomeQuery();Di2015NewLinelist.ToSelectList(x => x.Name, x => x.id, x => x.id == selectedId);Di2015NewLine
11749081Di2015UniqueSeparatorMemoryStream
11749081Di2015UniqueSeparatorStream.CopyTo
11749081Di2015UniqueSeparatorMemoryStream dataCopy = new MemoryStream();Di2015NewLineusing (var clientRequestStream = _tcpClient.GetStream())Di2015NewLine{Di2015NewLine    clientRequestStream.CopyTo(dataCopy);Di2015NewLine}Di2015NewLinedataCopy.Position = 0;Di2015NewLinevar requestHeader = dataCopy.GetUtf8String();Di2015NewLine
11749081Di2015UniqueSeparatorNetworkStream
11749081Di2015UniqueSeparatorMemoryStream
11749125Di2015UniqueSeparatorSolidBrush
11749218Di2015UniqueSeparatorint ComareResult(int a, int b)Di2015NewLine{Di2015NewLine   var groupA = a <=20 && a >=1;Di2015NewLine   var groupB = b <=20 && b >=1;Di2015NewLine   return groupA == groupB ? 0 : a <b ? -1 : 1;Di2015NewLine}Di2015NewLine
11749233Di2015UniqueSeparatorpublic class MyDataDi2015NewLine{Di2015NewLine    private Dictionary<string, ulong> _prop1=new Dictionary<string, ulong>(8);Di2015NewLineDi2015NewLine    public Dictionary<string, ulong> Prop1Di2015NewLine    {Di2015NewLine        get { return _prop1; }Di2015NewLine        set { _prop1 = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string CityName { get; set; }Di2015NewLineDi2015NewLine    public ulong? Population { get; set; }Di2015NewLine}Di2015NewLine
11749233Di2015UniqueSeparatorvar alotofobject s= new List<MyData>();Di2015NewLine
11749233Di2015UniqueSeparatorvar cities=new Dictionary<string,ulong>(8);Di2015NewLinecities.Add("City1",0);Di2015NewLinecities.Add("City2",0);Di2015NewLinecities.Add("City3",0);Di2015NewLinecities.Add("City4",0);Di2015NewLinecities.Add("City5",0);Di2015NewLinecities.Add("City6",0);Di2015NewLinecities.Add("City7",0);Di2015NewLinecities.Add("City8",0);Di2015NewLine
11749233Di2015UniqueSeparatorcities["City1"]=293238;Di2015NewLineDi2015NewLinevar populationOfCity1=cities["City1"];Di2015NewLine
11749248Di2015UniqueSeparatorINotifyPropertyChanged
11749248Di2015UniqueSeparatorNotifyPropertyChanged("GetCPUUsage")
11749248Di2015UniqueSeparator_cpuUsage = 40;
11749248Di2015UniqueSeparatorGetCPUUsage = 40;
11749248Di2015UniqueSeparatorGetCPUUsage
11749248Di2015UniqueSeparatorCPUUsage
11749422Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Roslyn.Compilers.CSharp;Di2015NewLineDi2015NewLinenamespace RoslynTestDi2015NewLine{Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLineDi2015NewLine            var code = @"Di2015NewLineDi2015NewLine            using System;Di2015NewLineDi2015NewLine            class Program {Di2015NewLine                public void My() {Di2015NewLine                    var i = 5;Di2015NewLine                    do {Di2015NewLine                        Console.WriteLine(""hello world"");Di2015NewLine                        i++;Di2015NewLine                    }Di2015NewLine                    until (i > 10);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            ";Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine            //Parsing input code into a SynaxTree object.Di2015NewLine            var syntaxTree = SyntaxTree.ParseCompilationUnit(code);Di2015NewLineDi2015NewLine            var syntaxRoot = syntaxTree.GetRoot();Di2015NewLineDi2015NewLine            //Here we will keep all nodes to replaceDi2015NewLine            var replaceDictionary = new Dictionary<DoStatementSyntax, DoStatementSyntax>();Di2015NewLineDi2015NewLine            //Looking for do-until statements in all descendant nodesDi2015NewLine            foreach (var doStatement in syntaxRoot.DescendantNodes().OfType<DoStatementSyntax>())Di2015NewLine            {Di2015NewLine                //Until token is treated as an identifier by C# compiler. It doesn't know that in our case it is a keyword.Di2015NewLine                var untilNode = doStatement.Condition.ChildNodes().OfType<IdentifierNameSyntax>().FirstOrDefault((_node =>Di2015NewLine                {Di2015NewLine                    return _node.Identifier.ValueText == "until";Di2015NewLine                }));Di2015NewLineDi2015NewLine                //Condition is treated as an argument listDi2015NewLine                var conditionNode = doStatement.Condition.ChildNodes().OfType<ArgumentListSyntax>().FirstOrDefault();Di2015NewLineDi2015NewLine                if (untilNode != null && conditionNode != null)Di2015NewLine                {Di2015NewLineDi2015NewLine                    //Let's replace identifier w/ correct while keyword and conditionDi2015NewLineDi2015NewLine                    var whileNode = Syntax.ParseToken("while");Di2015NewLineDi2015NewLine                    var condition = Syntax.ParseExpression("(!" + conditionNode.GetFullText() + ")");Di2015NewLineDi2015NewLine                    var newDoStatement = doStatement.WithWhileKeyword(whileNode).WithCondition(condition);Di2015NewLineDi2015NewLine                    //Accumulating all replacementsDi2015NewLine                    replaceDictionary.Add(doStatement, newDoStatement);Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine            syntaxRoot = syntaxRoot.ReplaceNodes(replaceDictionary.Keys, (node1, node2) => replaceDictionary[node1]);Di2015NewLineDi2015NewLine            //Output preprocessed codeDi2015NewLine            Console.WriteLine(syntaxRoot.GetFullText());Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine///////////Di2015NewLine//OUTPUT://Di2015NewLine///////////Di2015NewLine//            using System;Di2015NewLineDi2015NewLine//            class Program {Di2015NewLine//                public void My() {Di2015NewLine//                    var i = 5;Di2015NewLine//                    do {Di2015NewLine//                        Console.WriteLine("hello world");Di2015NewLine//                        i++;Di2015NewLine//                    }Di2015NewLine//while(!(i > 10));Di2015NewLine//                }Di2015NewLine//            }Di2015NewLine
11749448Di2015UniqueSeparatorCompareTo
11749448Di2015UniqueSeparatorobject
11749448Di2015UniqueSeparatorCoordenada
11749448Di2015UniqueSeparatorCoordenada
11749448Di2015UniqueSeparatorint IComparable.CompareTo(object coord1)Di2015NewLine{Di2015NewLine    Coordenada c1 = coord1 as Coordenada;Di2015NewLine    if (c1 == null)Di2015NewLine        return -1;Di2015NewLineDi2015NewLine    if(c1.heuristico < heuristico)Di2015NewLine        return 1;Di2015NewLine    if(c1.heuristico > heuristico)Di2015NewLine        return -1;Di2015NewLineDi2015NewLine    return 0;Di2015NewLine}Di2015NewLine
11749528Di2015UniqueSeparatorComputer
11749528Di2015UniqueSeparatorGPUEnabled
11749528Di2015UniqueSeparatorComputer myComputer = new Computer();Di2015NewLineDi2015NewLinemyComputer.Open();Di2015NewLineDi2015NewLinemyComputer.GPUEnabled = true; //This is the line you are missing.Di2015NewLineDi2015NewLineforeach (var hardwareItem in myComputer.Hardware)Di2015NewLine{Di2015NewLineDi2015NewLine    if (hardwareItem.HardwareType == HardwareType.GpuNvidia)Di2015NewLine    {Di2015NewLine        foreach (var sensor in hardwareItem.Sensors)Di2015NewLine        {Di2015NewLine            if (sensor.SensorType == SensorType.Temperature)Di2015NewLine            {Di2015NewLine                MessageBox.Show(String.Format("The current temperature is {0}", sensor.Value));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
11749528Di2015UniqueSeparatorIHardware
11749528Di2015UniqueSeparator    Timer timer;Di2015NewLineDi2015NewLine    Computer myComputer;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        myComputer = new Computer();Di2015NewLineDi2015NewLine        myComputer.Open();Di2015NewLineDi2015NewLine        myComputer.GPUEnabled = true;Di2015NewLineDi2015NewLine        timer = new Timer();Di2015NewLine        timer.Interval = 5000;Di2015NewLine        timer.Tick += new EventHandler(timer_Tick);Di2015NewLine        timer.Start();Di2015NewLineDi2015NewLine     }Di2015NewLineDi2015NewLine    void timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        foreach (var hardwareItem in myComputer.Hardware)Di2015NewLine        {Di2015NewLineDi2015NewLine            if (hardwareItem.HardwareType == HardwareType.GpuNvidia)Di2015NewLine            {Di2015NewLine                foreach (var sensor in hardwareItem.Sensors)Di2015NewLine                {Di2015NewLine                    if (sensor.SensorType == SensorType.Temperature)Di2015NewLine                    {Di2015NewLine                        MessageBox.Show(String.Format("The current temperature is {0}", sensor.Value));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11749528Di2015UniqueSeparatorWindows.Forms.Timer
11749528Di2015UniqueSeparatorComputer
11749528Di2015UniqueSeparatortick
11749528Di2015UniqueSeparatorSensor
11749528Di2015UniqueSeparatorIHardware
11749619Di2015UniqueSeparator    DataTable dt = new DataTable();Di2015NewLine    using (SqlConnection conn = new SqlConnection("Some SQLConnectionString")) {Di2015NewLine        conn.Open();Di2015NewLine        using (SqlDataAdapter adapter = new SqlDataAdapter("SELECT TOP 0 * FROM SomeTable", conn))Di2015NewLine        {Di2015NewLine            adapter.Fill(dt);Di2015NewLine        };Di2015NewLine    };Di2015NewLine
11749619Di2015UniqueSeparatorSELECT TOP 0
11749643Di2015UniqueSeparatorDECLARE @start_date AS DATETIME = '2012-02-02'; Di2015NewLineWITH L0 AS (SELECT 1 AS C UNION ALL SELECT 1),       --      2 Di2015NewLine     L1 AS (SELECT L0.C FROM L0 CROSS JOIN L0 AS B), --      4 Di2015NewLine     L2 AS (SELECT L1.C FROM L1 CROSS JOIN L1 AS B), --     16 Di2015NewLine     L3 AS (SELECT L2.C FROM L2 CROSS JOIN L2 AS B), --    256 Di2015NewLine     L4 AS (SELECT L3.C FROM L3 CROSS JOIN L3 AS B), --  65536 Di2015NewLine      N AS (SELECT ROW_NUMBER() OVER(ORDER BY L4.C) AS n FROM L4), Di2015NewLine      D AS (SELECT DATEADD(SECOND, n - 1, @start_date) AS d, n FROM N) Di2015NewLineSELECT d from D where n <= (60 * 60 * 24) Di2015NewLine
11749643Di2015UniqueSeparatorSELECT
11749643Di2015UniqueSeparatorWITH Di2015NewLine  MLIS as ( -- Description of what this piece is supposed to mean.Di2015NewLine    SELECT DISTINCT mlis_practice_id, requestor_npi, requestor_first_name, requestor_last_name  Di2015NewLine      FROM complete  Di2015NewLine      WHERE Len(requestor_last_name) > 0 ),Di2015NewLine  Physician as ( -- Description of what this piece is supposed to mean.Di2015NewLine    SELECT *Di2015NewLine      FROM millennium_dw..d_physician  Di2015NewLine      WHERE received_ims_information = 1 ),Di2015NewLine  Client as ( -- Description of what this piece is supposed to mean.Di2015NewLine    SELECT *  Di2015NewLine      FROM millennium_dw..d_client  Di2015NewLine      WHERE rec_active_flg = 1 ), Di2015NewLine  cte_biggie as ( -- Something I've totally bodged that should use the above CTEs.Di2015NewLine    SELECT LEFT('I'+Replicate(' ', 2), 2), ... )Di2015NewLineSELECT * from CTE_BiggieDi2015NewLine
11749704Di2015UniqueSeparatorINSERT INTO UserProfile (Name, Company, RealID) SELECT Name, Company, RealID FROM UserProfile WHERE ID = XDi2015NewLine
11749704Di2015UniqueSeparatorINSERT INTO UserProfile (Name, Company, RealID) SELECT 'New Name', Company, RealID FROM UserProfile WHERE ID = XDi2015NewLine
11749745Di2015UniqueSeparatorHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create("http://www.contoso.com");    Di2015NewLinemyHttpWebRequest.MaximumAutomaticRedirections=1;Di2015NewLinemyHttpWebRequest.AllowAutoRedirect=true;Di2015NewLineHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();Di2015NewLine
11749793Di2015UniqueSeparator<textarea
11749793Di2015UniqueSeparator<head runat="server">
11749861Di2015UniqueSeparatorsw.WriteLine(row["columnname"].ToString());Di2015NewLine
11749945Di2015UniqueSeparatorstring byteStr = input.Substring(2);Di2015NewLinebyte[] bytes = new byte [ byteStr.Length / 2 ];Di2015NewLinefor ( int i = 0, j = 0 ; i < byteStr.Length ; i += 2 , j++ )Di2015NewLine{Di2015NewLine     bytes [ j ] = byte.Parse ( byteStr.Substring ( i , 2 ) , NumberStyles.HexNumber );Di2015NewLine}Di2015NewLinestring str = Encoding.UTF8.GetString ( bytes );Di2015NewLinebyte[] UTF32Bytes = Encoding.UTF32.GetBytes ( str );Di2015NewLine
11750020Di2015UniqueSeparator    Timer timer;Di2015NewLineDi2015NewLine    Computer myComputer;Di2015NewLineDi2015NewLine    ISensor GPUTemperatureSensor;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        myComputer = new Computer();Di2015NewLineDi2015NewLine        myComputer.Open();Di2015NewLineDi2015NewLine        myComputer.GPUEnabled = true;Di2015NewLineDi2015NewLine        foreach (var hardwareItem in myComputer.Hardware)Di2015NewLine        {Di2015NewLineDi2015NewLine            if (hardwareItem.HardwareType == HardwareType.GpuNvidia)Di2015NewLine            {Di2015NewLine                foreach (var sensor in hardwareItem.Sensors)Di2015NewLine                {Di2015NewLine                    if (sensor.SensorType == SensorType.Temperature)Di2015NewLine                    {Di2015NewLine                        GPUTemperatureSensor = sensor;Di2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        timer = new Timer();Di2015NewLine        timer.Interval = 5000;Di2015NewLine        timer.Tick += new EventHandler(timer_Tick);Di2015NewLine        timer.Start();Di2015NewLineDi2015NewLine     }Di2015NewLineDi2015NewLine    void timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if(GPUTemperatureSensor != null)Di2015NewLine        {Di2015NewLine            GPUTemperatureSensor.Hardware.Update();//This line refreshes the sensor valuesDi2015NewLine            textBox1.Text = String.Format("The current temperature is {0}", GPUTemperatureSensor.Value);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            textBox1.Text = "Could not find the GPU Temperature Sensor. Stopping.";Di2015NewLine            timer.Stop(); Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11750066Di2015UniqueSeparatorfrom prod in ArticlesDi2015NewLinefrom kat in MainGroupsDi2015NewLinewhere kat.MainGroupNo == prod.MainGroupNoDi2015NewLineselect new { kat.Name, prod.ArticleNo }Di2015NewLine
11750066Di2015UniqueSeparatorSELECT [t1].[Name], [t0].[ArticleNo]Di2015NewLineFROM [dbo].[Article] AS [t0], [dbo].[MainGroup] AS [t1]Di2015NewLineWHERE [t1].[MainGroupNo] = [t0].[MainGroupNo]Di2015NewLine
11750066Di2015UniqueSeparatorfrom prod in ArticlesDi2015NewLinejoin kat in MainGroups on prod.MainGroupNo equals kat.MainGroupNoDi2015NewLineselect new { kat.Name, prod.ArticleNo }Di2015NewLine
11750066Di2015UniqueSeparatorSELECT [t1].[Name], [t0].[ArticleNo]Di2015NewLineFROM [dbo].[Article] AS [t0]Di2015NewLineINNER JOIN [dbo].[MainGroup] AS [t1] ON [t0].[MainGroupNo] = [t1].[MainGroupNo]Di2015NewLine
11750066Di2015UniqueSeparatorfrom prod in ArticlesDi2015NewLinejoin g1 in MainGroups on prod.MainGroupNo equals g1.MainGroupNo into prodGroupDi2015NewLinefrom kat in prodGroup.DefaultIfEmpty()Di2015NewLineselect new { kat.Name, prod.ArticleNo }Di2015NewLine
11750066Di2015UniqueSeparatorSELECT [t1].[Name] AS [Name], [t0].[ArticleNo]Di2015NewLineFROM [dbo].[Article] AS [t0]Di2015NewLineLEFT OUTER JOIN [dbo].[MainGroup] AS [t1] ON [t0].[MainGroupNo] = [t1].[MainGroupNo]Di2015NewLine
11750074Di2015UniqueSeparatortext = Regex.Replace(text, @"^[\\s,]+|[\\s,]+$", "");Di2015NewLine
11750082Di2015UniqueSeparatorlibrary.books[0].nameDi2015NewLine
11750092Di2015UniqueSeparatorcommand
11750092Di2015UniqueSeparatorSqlConnection
11750092Di2015UniqueSeparatorusing
11750092Di2015UniqueSeparatorusing (var connection = new SqlConnection(...))Di2015NewLineusing (var command = new SqlCommand(..., connection))Di2015NewLine{Di2015NewLine    connection.Open();Di2015NewLine    ...Di2015NewLine    using (var reader = command.ExecuteReader())Di2015NewLine    {Di2015NewLine        return reader.Read() ? (int) reader[0] : 0;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11750139Di2015UniqueSeparator    bool WaitFor_Input = false; //flag to indicate user input statusDi2015NewLineDi2015NewLine    private void ThreadRun()Di2015NewLine    {Di2015NewLine        //THIS IS IN Background worker threadDi2015NewLine        //do taskDi2015NewLine        WaitFor_Input = true;Di2015NewLine        //ask for user inputDi2015NewLine        Dispatcher.BeginInvoke(new Action(Show_Dialogue), null);Di2015NewLine        while (WaitFor_Input); //Background worker waits untill user input is completeDi2015NewLine        //continue further processingDi2015NewLine    }Di2015NewLineDi2015NewLine    private void Show_Dialogue()Di2015NewLine    {Di2015NewLine        //THIS IS IN UI THREADDi2015NewLine        //show your dialogue box here, update data variablesDi2015NewLine        //finally setDi2015NewLine        WaitFor_Input = false;Di2015NewLine    }Di2015NewLine
11750161Di2015UniqueSeparatorprotected override void CreateChildControls()Di2015NewLine    {Di2015NewLine        base.CreateChildControls();Di2015NewLine        //now load your control hereDi2015NewLine    }Di2015NewLine
11750200Di2015UniqueSeparator var query = from a in tableADi2015NewLine             from b in tableBDi2015NewLine             join c in tableC on new { A_ID = a.ID, B_ID = b.ID } Di2015NewLine                          equals new { c.A_ID, c.B_ID }Di2015NewLine             select new RecordClass { A_Value = a.Value, B_Value = b.Value };Di2015NewLine
11750200Di2015UniqueSeparatorvar query = tableC.Select(c => new RecordClass { A_Value = c.A.Value,Di2015NewLine                                                 B_Value = c.B.Value });Di2015NewLine
11750325Di2015UniqueSeparatorpublic void RanToCompletion(Task task)Di2015NewLine    {Di2015NewLine        if (_frmProgress.Dispatcher.CheckAccess())Di2015NewLine            _frmProgress.Close();Di2015NewLine        elseDi2015NewLine            _frmProgress.Dispatcher.Invoke(DispatcherPriority.Normal, new ThreadStart(_frmProgress.Close));Di2015NewLine    }Di2015NewLine
11750385Di2015UniqueSeparatorvar vcontact = from c in context.ContactsDi2015NewLine               orderby c.LastNameDi2015NewLine               where c.Addresses.Any(a => a.City == "Toronto")Di2015NewLine               select new ContactDi2015NewLine               {Di2015NewLine                   LastName = c.LastName;Di2015NewLine                   // map all remaining properties of ContactDi2015NewLine                   Addresses = c.Addresses.Where(a => a.City == "Toronto")Di2015NewLine               }; Di2015NewLine
11750553Di2015UniqueSeparatorPrinterSettings.PrintRange = PrintRange.SomePages
11750639Di2015UniqueSeparatorvar csc = new CSharpCodeProvider( new Dictionary<string, string>() { { "CompilerVersion", "v4.0" } } );Di2015NewLinevar cp = new CompilerParameters() {Di2015NewLine    GenerateExecutable = false,Di2015NewLine    OutputAssembly = outputAssemblyName,Di2015NewLine    GenerateInMemory = trueDi2015NewLine};Di2015NewLineDi2015NewLinecp.ReferencedAssemblies.Add( "mscorlib.dll" );Di2015NewLinecp.ReferencedAssemblies.Add( "System.dll" );Di2015NewLineDi2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine// The string can contain any valid c# codeDi2015NewLineDi2015NewLinesb.Append( "namespace Foo{" );Di2015NewLinesb.Append( "using System;" );Di2015NewLinesb.Append( "public static class MyClass{");Di2015NewLinesb.Append( "}}" );Di2015NewLineDi2015NewLine// "results" will usually contain very detailed error messagesDi2015NewLinevar results = csc.CompileAssemblyFromSource( cp, sb.ToString() );Di2015NewLine
11750664Di2015UniqueSeparatorUpdatePanel
11750664Di2015UniqueSeparatorUpdatePanel
11750664Di2015UniqueSeparatorController
11750664Di2015UniqueSeparatorHttpHandler
11750691Di2015UniqueSeparator==
11750800Di2015UniqueSeparatorResponseStatus
11750800Di2015UniqueSeparator{RequestDtoName}Response
11750800Di2015UniqueSeparatorSetConfig(new EndpointHostConfig { DebugMode = true });
11750800Di2015UniqueSeparatorResponseStatus
11750800Di2015UniqueSeparatorthrow new CustomException("User Defined Error");Di2015NewLine
11750800Di2015UniqueSeparator{"responseStatus":{"errorCode":"CustomException",Di2015NewLine    "message":"User Defined Error","errors":[]}}Di2015NewLine
11750800Di2015UniqueSeparator{}Di2015NewLine
11750800Di2015UniqueSeparator{RequestDto}Response
11750800Di2015UniqueSeparatorIService<T>
11750800Di2015UniqueSeparatorServiceBase<T>
11750800Di2015UniqueSeparatorRestServiceBase<T>
11750804Di2015UniqueSeparatorpublic static void Do<T>(this IUnityContainer container, T args) where T : IMyInterfaceDi2015NewLine{Di2015NewLine    foreach (var s in container.ResolveAll<IDoSomething<T>>())Di2015NewLine        s.DoSomething(args);Di2015NewLine}Di2015NewLine
11750961Di2015UniqueSeparator        this.StartPosition = FormStartPosition.Manual;Di2015NewLine
11750961Di2015UniqueSeparator        this.StartPosition = FormStartPosition.CenterParent;Di2015NewLine
11751075Di2015UniqueSeparatorinfPath
11751075Di2015UniqueSeparatordevices
11751075Di2015UniqueSeparator[DllImport("setupapi.dll")]Di2015NewLine    public static extern bool SetupCopyOEMInf(Di2015NewLine        string SourceInfFileName,Di2015NewLine        string OEMSourceMediaLocation,Di2015NewLine        int OEMSourceMediaType,Di2015NewLine        int CopyStyle,Di2015NewLine        string DestinationInfFileName,Di2015NewLine        int DestinationInfFileNameSize,Di2015NewLine        int RequiredSize,Di2015NewLine        string DestinationInfFileNameComponentDi2015NewLine        );Di2015NewLineDi2015NewLine    [DllImport("newdev.dll")]Di2015NewLine    public static extern bool UpdateDriverForPlugAndPlayDevices(Di2015NewLine        IntPtr hwndParent,Di2015NewLine        string HardwareId,Di2015NewLine        string FullInfPath,Di2015NewLine        uint InstallFlags,Di2015NewLine        bool bRebootRequiredDi2015NewLine        );Di2015NewLineDi2015NewLine    [STAThread]Di2015NewLine    static void Main() {Di2015NewLine      if (SetupCopyOEMInf(infPath, null, 0, 0, null, 0, 0, null)) {Di2015NewLine        foreach (string device in devices) {Di2015NewLine          UpdateDriverForPlugAndPlayDevices(IntPtr.Zero, device, infPath, 0, false);Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine
11751154Di2015UniqueSeparatorContains()
11751154Di2015UniqueSeparatorAdd()
11751154Di2015UniqueSeparatorAddNewToClass()
11751154Di2015UniqueSeparatorContains()
11751169Di2015UniqueSeparator<a class="btn edit-book-link" data-toggle="modal" href="/ControllerName/BookForm/@item.BookID">Di2015NewLine
11751169Di2015UniqueSeparator<div class="modal hide fade in" id="BookEditModal" )>Di2015NewLine    <div class="modal-header">Di2015NewLine        <button type="button" class="close" data-dismiss="modal">Ã—</button>Di2015NewLine        <h3>Edit Book</h3>Di2015NewLine    </div>Di2015NewLine    <div id="modalContent"></div>Di2015NewLine</div>Di2015NewLine
11751169Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic ViewResult BookForm(int id) {Di2015NewLine    return View(id);Di2015NewLine}Di2015NewLine
11751169Di2015UniqueSeparator$(function () {Di2015NewLine    $('.edit-book-link').click(function (e) {Di2015NewLine        $('#modalContent').load($(this).attr('href'), function() {Di2015NewLine            // show your modal dialog here using whatever method you use..Di2015NewLine        });Di2015NewLine        e.preventDefault();Di2015NewLine        return false;Di2015NewLine    });Di2015NewLine});Di2015NewLine
11751312Di2015UniqueSeparatorout
11751312Di2015UniqueSeparatorvar str = "testing";Di2015NewLinestring id;Di2015NewLinetarget.Msg(str, out id); // Msg will always initialize id.Di2015NewLine
11751343Di2015UniqueSeparator    for(int i = 0; i < img.width; i++){Di2015NewLine       for(int j = 0; j < img.height; j++){Di2015NewLine          // 20 is an arbitrary value and subject to your opinion and need.Di2015NewLine          if(img[i][j].color <= 20)Di2015NewLine             //store i and j, those are your pixel locationDi2015NewLine       }Di2015NewLine     }Di2015NewLine
11751653Di2015UniqueSeparatorWHERE
11751653Di2015UniqueSeparatorvar patterns = new List<string>();Di2015NewLineusing (var context = new MyDataContext())Di2015NewLine{Di2015NewLine    var query = (IQueryable<Area>)context.Areas;Di2015NewLineDi2015NewLine    foreach (var pattern in patterns)Di2015NewLine    {Di2015NewLine        query = query.Where(a => a.Description.Contains(pattern));Di2015NewLine    }Di2015NewLineDi2015NewLine    return query.ToList();Di2015NewLine}Di2015NewLine
11751653Di2015UniqueSeparatorToList
11751677Di2015UniqueSeparator        string input = "$00";Di2015NewLineDi2015NewLine        Match m = Regex.Match(input, @"^\\$[0-9a-fA-F][0-9a-fA-F]$");Di2015NewLine        if (m.Success)Di2015NewLine        {Di2015NewLine            foreach (Group g in m.Groups)Di2015NewLine                Console.WriteLine(g.Value);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            Console.WriteLine("Didn't match");Di2015NewLine
11751971Di2015UniqueSeparatorvar result = crabs.Where(c => whales.All(w => w.Id != c.Id));Di2015NewLine
11751979Di2015UniqueSeparatorForm window = new Form();Di2015NewLinewindow.FormBorderStyle = FormBorderStyle.None;Di2015NewLinewindow.BackgroundImage = blurred; //blurred is a BitmapDi2015NewLinewindow.SetBounds(bounds.X, bounds.Y, bounds.Width, bounds.Height); //bounds is a RectangleDi2015NewLinewindow.Show();Di2015NewLine
11751979Di2015UniqueSeparatorForm window = new Form();Di2015NewLinewindow.FormBorderStyle = FormBorderStyle.None;Di2015NewLinewindow.BackgroundImage = blurred; //blurred is a BitmapDi2015NewLinewindow.SetBounds(bounds.X, bounds.Y, bounds.Width, bounds.Height); //bounds is a RectangleDi2015NewLineApplication.Run(window);Di2015NewLine
11751979Di2015UniqueSeparator[STAThread]Di2015NewLinestatic void main() Di2015NewLine{Di2015NewLine   Application.EnableVisualStyles();Di2015NewLine   Application.SetCompatibleTextRenderingDefault(false);Di2015NewLineDi2015NewLine   Form window = new Form();Di2015NewLine   window.StartPosition = FormStartPosition.Manual;Di2015NewLine   window.FormBorderStyle = FormBorderStyle.None;Di2015NewLine   window.BackgroundImage = blurred; //blurred is a BitmapDi2015NewLine   window.SetBounds(bounds.X, bounds.Y, bounds.Width, bounds.Height); Di2015NewLine   Application.Run(window);Di2015NewLine}Di2015NewLine
11752065Di2015UniqueSeparatorstringkoneksi =   @"Data Source=myServerAddress\\SQLEXPRESS;Initial Catalog=UGsimplify;User Id=myUsername;Password=myPassword";Di2015NewLine
11752468Di2015UniqueSeparatorRegular Expression
11752468Di2015UniqueSeparatorstring result = Regex.Replace(fileContent, @"(?<!\\r)\\n+", "");Di2015NewLine
11752546Di2015UniqueSeparator_proxy.ProcessInput("Connected")
11752546Di2015UniqueSeparator((Action)(() => _proxy.ProcessInput("Connected"))).BeginInvoke(null, null);Di2015NewLine
11752574Di2015UniqueSeparatorpublic static void TestSB()Di2015NewLine{Di2015NewLine    var testValue = "{{ \\"id\\" : \\"myID\\", \\"Name\\" : \\"MyDisplayName\\", \\"description\\" : \\"A, MyDescription\\", }\\"hasOverview\\" : true, \\"hasDescription\\" : true, }";Di2015NewLine    var sb = new StringBuilder();Di2015NewLine    sb.Append(testValue);Di2015NewLine    var sbToString = sb.ToString();Di2015NewLineDi2015NewLine    // Prints trueDi2015NewLine    Console.WriteLine(sbToString.Equals(testValue));Di2015NewLine}Di2015NewLine
11752574Di2015UniqueSeparatorpublic static string GetResponseFromRequest(string url)Di2015NewLine{Di2015NewLine    var req = System.Net.WebRequest.Create(url);Di2015NewLine    using (var res = req.GetResponse())Di2015NewLine    using (var sr = new StreamReader(res.GetResponseStream()))Di2015NewLine        return sr.ReadToEnd();Di2015NewLine}Di2015NewLine
11752574Di2015UniqueSeparatorpublic static void TestGetResponse()Di2015NewLine{Di2015NewLine    Console.Out.WriteLine(GetResponseFromRequest("http://www.google.com"));Di2015NewLine}Di2015NewLine
11752574Di2015UniqueSeparatorvar result = new System.Net.WebClient().DownloadString(url)Di2015NewLine
11752699Di2015UniqueSeparatorKeyboard Hooking
11752699Di2015UniqueSeparatorRegisterHotKey
11752699Di2015UniqueSeparatorUnregisterHotKey
11752699Di2015UniqueSeparatorVK_F1 (0x70)
11752718Di2015UniqueSeparator void Wrapper(ref int value, out IEnumerator coroutine)Di2015NewLine {Di2015NewLine     int tmp = ++value;Di2015NewLine     coroutine = Foo(tmp);Di2015NewLine }Di2015NewLine
11752718Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        //Lets get the 'IEnumerable Class' that RandomNum gets compiled down into.Di2015NewLine        var IEnumeratorClass = RandomNum(10, 10);Di2015NewLineDi2015NewLine        //All an IEnumerable is is a class with 'GetEnumerator'... so lets get it!Di2015NewLine        var IEnumerableClass = IEnumeratorClass.GetEnumerator();Di2015NewLineDi2015NewLine        //It can be used like so:Di2015NewLine        while (IEnumerableClass.MoveNext())Di2015NewLine        {Di2015NewLine            Console.WriteLine(IEnumerableClass.Current);Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine(new String('-', 10));Di2015NewLineDi2015NewLine        //Of course, that's a lot of code for a simple job.Di2015NewLine        //Luckily - there's some nice built in functionality to make use of this.Di2015NewLine        //This is the same as above, but much shorterDi2015NewLine        foreach (var random in RandomNum(10, 10)) Console.WriteLine(random);Di2015NewLineDi2015NewLine        Console.WriteLine(new String('-', 10));Di2015NewLineDi2015NewLine        //These simple concepts are behind Unity3D coroutines, and Linq [which uses chaining extensively]Di2015NewLine        Enumerable.Range(0, 100).Where(x => x % 2 == 0).Take(5).ToList().ForEach(Console.WriteLine);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    static Random rnd = new Random();Di2015NewLine    static IEnumerable<int> RandomNum(int max, int count)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < count; i++) yield return rnd.Next(i);Di2015NewLine    }Di2015NewLineDi2015NewLine    //This is an example of what the compiler generates for RandomNum, see how boring it is?Di2015NewLine    public class RandomNumIEnumerableCompiled : IEnumerable<int>Di2015NewLine    {Di2015NewLine        int max, count;Di2015NewLine        Random _rnd;Di2015NewLine        public RandomNumIEnumerableCompiled(int max, int count)Di2015NewLine        {Di2015NewLine            this.max = max;Di2015NewLine            this.count = count;Di2015NewLine            _rnd = rnd;Di2015NewLine        }Di2015NewLineDi2015NewLine        IEnumerator IEnumerable.GetEnumerator()Di2015NewLine        {Di2015NewLine            return new RandomNumIEnumeratorCompiled(max, count, rnd);Di2015NewLine        }Di2015NewLineDi2015NewLine        IEnumerator<int> IEnumerable<int>.GetEnumerator()Di2015NewLine        {Di2015NewLine            return new RandomNumIEnumeratorCompiled(max, count, rnd);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine    public class RandomNumIEnumeratorCompiled : IEnumerator<int>Di2015NewLine    {Di2015NewLine        int max, count;Di2015NewLine        Random _rnd;Di2015NewLine        int current;Di2015NewLine        int currentCount = 0;Di2015NewLine        public RandomNumIEnumeratorCompiled(int max, int count, Random rnd)Di2015NewLine        {Di2015NewLine            this.max = max;Di2015NewLine            this.count = count;Di2015NewLine            _rnd = rnd;Di2015NewLine        }Di2015NewLineDi2015NewLine        int IEnumerator<int>.Current { get { return current; } }Di2015NewLineDi2015NewLine        object IEnumerator.Current { get { return current; } }Di2015NewLineDi2015NewLine        public bool MoveNext()Di2015NewLine        {Di2015NewLine            if (currentCount < count)Di2015NewLine            {Di2015NewLine                currentCount++;Di2015NewLine                current = rnd.Next(max);Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Reset() { currentCount = 0; }Di2015NewLine        public void Dispose() { }Di2015NewLine    }Di2015NewLine
11752760Di2015UniqueSeparatorstring query;Di2015NewLineforeach (Item in SelectedItems)Di2015NewLine{Di2015NewLine   query += "select DocID from DocumentRelation where ItemID =" + Item.Id;Di2015NewLine   query += "INTERSECT";Di2015NewLine}Di2015NewLinequery -= "INTERSECT";Di2015NewLine
11752833Di2015UniqueSeparatorvar nsmgr = new XmlNamespaceManager(document.NameTable);Di2015NewLinensmgr.AddNamespace("aaa", "http://tempuri.org/XMLSchema.xsd");Di2015NewLineDi2015NewLinevar xml = document.DocumentElementDi2015NewLine    .SelectSingleNode("aaa:Foo", nsmgr)Di2015NewLine    .InnerXml;Di2015NewLine
11752833Di2015UniqueSeparatorDefault namespaces
11752833Di2015UniqueSeparatorGetElementsByTagName
11752833Di2015UniqueSeparatorvar xml = document.GetElementsByTagName("Foo", Di2015NewLine             "http://tempuri.org/XMLSchema.xsd")[0].InnerXml;Di2015NewLine
11752999Di2015UniqueSeparator[OutputCache(Duration = 20, VaryByParam = "photoId")]Di2015NewLinepublic ActionResult GetImage(long photoId, long type)Di2015NewLine{Di2015NewLine    byte[] img = System.IO.File.ReadAllBytes(Server.MapPath("~/Images/aspNetHome.png"));Di2015NewLine    return File(img, "image/png");Di2015NewLine}Di2015NewLine
11752999Di2015UniqueSeparator<img src="~/Home/GetImage/1/2" alt="" />Di2015NewLine
11752999Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Upload",Di2015NewLine    "Home/GetImage/{photoId}/{type}",Di2015NewLine    new { controller = "Home", action = "GetImage" }Di2015NewLine);Di2015NewLine
11752999Di2015UniqueSeparatorHTTP/1.1 200 OKDi2015NewLineCache-Control: private, max-age=20Di2015NewLineContent-Type: image/pngDi2015NewLineExpires: Wed, 01 Aug 2012 05:08:25 GMTDi2015NewLineLast-Modified: Wed, 01 Aug 2012 05:08:05 GMTDi2015NewLineServer: Microsoft-IIS/7.5Di2015NewLineX-AspNetMvc-Version: 4.0Di2015NewLineX-AspNet-Version: 4.0.30319Di2015NewLineX-Powered-By: ASP.NETDi2015NewLineDate: Wed, 01 Aug 2012 05:08:10 GMTDi2015NewLineContent-Length: 3736Di2015NewLine
11752999Di2015UniqueSeparatorHTTP/1.1 200 OKDi2015NewLineCache-Control: privateDi2015NewLineContent-Type: image/pngDi2015NewLineServer: Microsoft-IIS/7.5Di2015NewLineX-AspNetMvc-Version: 4.0Di2015NewLineX-AspNet-Version: 4.0.30319Di2015NewLineX-Powered-By: ASP.NETDi2015NewLineDate: Thu, 02 Aug 2012 04:52:02 GMTDi2015NewLineContent-Length: 3736Di2015NewLine
11752999Di2015UniqueSeparatorCache-Control
11752999Di2015UniqueSeparatorprivate
11752999Di2015UniqueSeparatorCache-Control: no-cache, Expires: -1, Pragma: no-cache
11752999Di2015UniqueSeparator<meta http-equiv="cache-control" content="no-cache" />Di2015NewLineDi2015NewLine<meta http-equiv="pragma" content="no-cache" />Di2015NewLineDi2015NewLine<meta http-equiv="expires" content="-1" />Di2015NewLine
11753001Di2015UniqueSeparator<layout type="log4net.Layout.PatternLayout">Di2015NewLine   <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />Di2015NewLine</layout>Di2015NewLine
11753016Di2015UniqueSeparator<ListBox SelectionMode="Multiple">Di2015NewLine<!--<ListBox SelectionMode="Single">-->Di2015NewLine    <ListBox.Items>Di2015NewLine        <TextBlock Text="Test 1" />Di2015NewLine        <TextBlock Text="Test 2" />Di2015NewLine        <TextBlock Text="Test 3" />Di2015NewLine        <TextBlock Text="Test 4" />Di2015NewLine        <TextBlock Text="Test 5" />Di2015NewLine        <TextBlock Text="Test 6" />Di2015NewLine    </ListBox.Items>Di2015NewLine    <ListBox.Style>Di2015NewLine        <Style TargetType="{x:Type ListBox}">Di2015NewLine            <Style.Resources>Di2015NewLine                <DataTemplate x:Key="SingleSelectionModeItemTemplate">Di2015NewLine                    <RadioButton IsChecked="{Binding Path=IsSelected,Di2015NewLine                                                     RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}},Di2015NewLine                                                     Mode=TwoWay}"Di2015NewLine                                 Content="{Binding}" />Di2015NewLine                </DataTemplate>Di2015NewLine                <DataTemplate x:Key="MultiSelectionModeItemTemplate">Di2015NewLine                    <CheckBox IsChecked="{Binding Path=IsSelected,Di2015NewLine                                                  RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}},Di2015NewLine                                                  Mode=TwoWay}"Di2015NewLine                              Content="{Binding}" />Di2015NewLine                </DataTemplate>Di2015NewLine            </Style.Resources>Di2015NewLine            <Style.Triggers>Di2015NewLine                <Trigger Property="SelectionMode"Di2015NewLine                         Value="Single">Di2015NewLine                    <Setter Property="ItemTemplate" Value="{StaticResource SingleSelectionModeItemTemplate}" />Di2015NewLine                </Trigger>Di2015NewLine                <Trigger Property="SelectionMode"Di2015NewLine                         Value="Multiple">Di2015NewLine                    <Setter Property="ItemTemplate" Value="{StaticResource MultiSelectionModeItemTemplate}" />Di2015NewLine                </Trigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </ListBox.Style>Di2015NewLine</ListBox>Di2015NewLine
11753113Di2015UniqueSeparatortextbox.Text="my new text" + textbox.Text;Di2015NewLine
11753113Di2015UniqueSeparator txtbox1.SelectionStart = 0;Di2015NewLine txtbox1.SelectedText = "my new text";Di2015NewLine
11753175Di2015UniqueSeparator[WebMethod]
11753175Di2015UniqueSeparator[WebMethod]Di2015NewLineprotected static string GetListImageFilePath(string fileName)Di2015NewLine{Di2015NewLine
11753175Di2015UniqueSeparatorEnablePageMethods="True"
11753175Di2015UniqueSeparatorvar fileName = args.get_fileName();Di2015NewLinePageMethods.GetListImageFilePath(fileName, function (path) {Di2015NewLine    lstImg.src = path;Di2015NewLine});Di2015NewLine
11753313Di2015UniqueSeparatorDateTime
11753313Di2015UniqueSeparatorint
11753313Di2015UniqueSeparatorstring financialYearText = ViewState["FIN_YR"].ToString();Di2015NewLineint minYear2Digits = int.Parse(financialYearText.Substring(0, 2));Di2015NewLineint maxYear2Digits = int.Parse(financialYearText.Substring(2, 2));Di2015NewLinedtpRemitDate.MinDate = new DateTime(minYear2Digits + 2000, 4, 1);Di2015NewLinedtpRemitDate.MaxDate = new DateTime(maxYear2Digits + 2000, 4, 1);Di2015NewLine
11753379Di2015UniqueSeparatorprivate PictureBox pictureBox1 = new PictureBox();Di2015NewLineDi2015NewLinepictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);Di2015NewLineDi2015NewLineprivate void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)Di2015NewLine{Di2015NewLine   GetPixel_Example(e) ;Di2015NewLine}Di2015NewLine
11753496Di2015UniqueSeparator protected void Button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        OleDbConnection con = new OleDbConnection();Di2015NewLine        con.ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\Users\\jayant\\Documents\\User_Details.accdb";Di2015NewLine        con.Open();Di2015NewLine        adapter = new OleDbDataAdapter("Select * from User_Details",con);Di2015NewLine        adapter.Fill(ds);Di2015NewLine        GridView1.DataSource = ds;Di2015NewLine        Session.Add("Dataset", ds); //Adding Session hereDi2015NewLine        GridView1.DataBind();Di2015NewLine        con.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DataSet ds = (DataSet)Session["Dataset"]; //Retrieving Value from sessionDi2015NewLine        ds.WriteXml("C:\\\\MyUser_Details.xml");Di2015NewLine    }Di2015NewLine
11753639Di2015UniqueSeparatorConsole
11753639Di2015UniqueSeparatorCursorLeft
11753639Di2015UniqueSeparatorCursorTop
11753657Di2015UniqueSeparatorListViewItem.Index Property
11753710Di2015UniqueSeparatorSqlParameter retval = sqlcomm.Parameters.Add("@return_value", SqlDbType.VarChar);Di2015NewLineretval.Direction = ParameterDirection.ReturnValue;Di2015NewLinesqlcomm.ExecuteNonQuery(); Di2015NewLinestring retunvalue = (string)sqlcomm.Parameters["@return_value"].Value; Di2015NewLine
11753710Di2015UniqueSeparatorcreate procedure [dbo].[usp_GetNewSeqVal]Di2015NewLine       @SeqName nvarchar(255)Di2015NewLine as begin Di2015NewLine    declare @NewSeqVal intDi2015NewLine    select @NewSeqVal  =1Di2015NewLine   ---other statementDi2015NewLine    return @NewSeqValDi2015NewLine endDi2015NewLine
11753727Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine  <ItemTemplate>Di2015NewLine    <asp:LinkButton ID="Link" runat="server" PostBackUrl="MyNextPage.aspx">Edit</asp:LinkButton>Di2015NewLine  </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
11753875Di2015UniqueSeparator  <sessionState timeout="330"></sessionState>Di2015NewLine
11753875Di2015UniqueSeparator global.asaxDi2015NewLine
11753923Di2015UniqueSeparatorpublic static IEnumerable<IEnumerable<T>> BreakUp<T>(IEnumerable<T> this source, int size)Di2015NewLine{Di2015NewLine    var max = source.Count();Di2015NewLine    int i = 0;Di2015NewLine    while (i < max)Di2015NewLine    {Di2015NewLine        var current = source.Skip(i).Take(size);Di2015NewLine        if (current.Count() > 1)Di2015NewLine            yield return current;Di2015NewLine        i += size -1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11753923Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    Console.WriteLine("Example 1");Di2015NewLine    var source = new Int32[] {1, 2, 3, 4, 5};Di2015NewLineDi2015NewLine    foreach (var i in BreakUp(source, 2))Di2015NewLine        Console.WriteLine(i);Di2015NewLineDi2015NewLine    Console.WriteLine("Example 2");Di2015NewLineDi2015NewLine    foreach (var i in BreakUp(source, 4))Di2015NewLine        Console.WriteLine(i);Di2015NewLine}Di2015NewLine
11753923Di2015UniqueSeparatorsource
11753923Di2015UniqueSeparatorpublic static IEnumerable<IEnumerable<T>> BreakUp<T>(IEnumerable<T> this source, int size)Di2015NewLine{Di2015NewLine    using(var e = source.GetEnumerator())Di2015NewLine    {Di2015NewLine        T last = default(T);Di2015NewLine        bool has_last = false;Di2015NewLine        while(e.MoveNext())Di2015NewLine        {Di2015NewLine            var current = new List<T>(size);Di2015NewLine            if(has_last)Di2015NewLine                current.Add(last);Di2015NewLineDi2015NewLine            last = (T)e.Current;Di2015NewLine            current.Add(last);Di2015NewLineDi2015NewLine            while(current.Count < size && e.MoveNext())Di2015NewLine            {Di2015NewLine                last = (T)e.Current;Di2015NewLine                current.Add(last);Di2015NewLine                has_last = true;Di2015NewLine            }Di2015NewLineDi2015NewLine            yield return current;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11754081Di2015UniqueSeparatorint.tryParse()
11754081Di2015UniqueSeparator  int a;Di2015NewLine  int b;Di2015NewLine  int.TryParse("a",out a);Di2015NewLine  int.TryParse("5",out b);Di2015NewLine  int totalValue = a * b;Di2015NewLine  Console.WriteLine(totalValue.ToString());Di2015NewLine
11754081Di2015UniqueSeparator  int a;Di2015NewLine  int b;Di2015NewLine  int.TryParse("5",out a);Di2015NewLine  int.TryParse("5",out b);Di2015NewLine  int totalValue = a * b;Di2015NewLine  Console.WriteLine(totalValue.ToString());Di2015NewLine
11754129Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.IO;Di2015NewLineusing System.Data;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var files1 = new List<string>(Directory.GetFiles(args[0],Di2015NewLine                "*.txt",Di2015NewLine                SearchOption.AllDirectories));Di2015NewLineDi2015NewLineDi2015NewLine            List<FileData> ListFiles = new List<FileData>();Di2015NewLineDi2015NewLine            for (int i = 0; i < files1.Count; i++)Di2015NewLine            { Di2015NewLineDi2015NewLineDi2015NewLine            FileInfo file = new FileInfo(files1[i]);Di2015NewLine            FileData _tmpfile = new FileData(file.Name.ToString(), file.Length, Di2015NewLine                File.GetLastWriteTime(files1[1]).ToString("yyyy-MM-dd H:mm:ss"),Di2015NewLine                File.GetLastAccessTime(files1[1]).ToString("yyyy-MM-dd H:mm:ss"));Di2015NewLine            ListFiles.Add(_tmpfile);Di2015NewLine            }Di2015NewLineDi2015NewLine            DataSet sessions = new DataSet();Di2015NewLine            DataTable dt = sessions.Tables["Sessions"];Di2015NewLine            for (int i = 0; i < ListFiles.Count; i++)Di2015NewLine            {Di2015NewLine                //compares every file in folder to databaseDi2015NewLine                FileData _tmp = ListFiles[i];Di2015NewLine                for (int j = 0; j < dt.Rows.Count; j++)Di2015NewLine                {Di2015NewLine                    if (_tmp.GSFileName == dt.Rows[i][0].ToString())Di2015NewLine                    { Di2015NewLine                        //put some code hereDi2015NewLine                        break; Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (_tmp.GSSize == long.Parse(dt.Rows[i][1].ToString()))Di2015NewLine                    {Di2015NewLine                        //put some code hereDi2015NewLine                        break;Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine    public class FileDataDi2015NewLine    {Di2015NewLine        string FileName = "";Di2015NewLineDi2015NewLine        public string GSFileNameDi2015NewLine        {Di2015NewLine            get { return FileName; }Di2015NewLine            set { FileName = value; }Di2015NewLine        }Di2015NewLine        long Size = 0;Di2015NewLineDi2015NewLine        public long GSSizeDi2015NewLine        {Di2015NewLine            get { return Size; }Di2015NewLine            set { Size = value; }Di2015NewLine        }Di2015NewLine        string DateOfModification = "";Di2015NewLineDi2015NewLine        public string GSDateOfModificationDi2015NewLine        {Di2015NewLine            get { return DateOfModification; }Di2015NewLine            set { DateOfModification = value; }Di2015NewLine        }Di2015NewLine        string DateOfLastAccess = "";Di2015NewLineDi2015NewLine        public string GSDateOfLastAccessDi2015NewLine        {Di2015NewLine            get { return DateOfLastAccess; }Di2015NewLine            set { DateOfLastAccess = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public FileData(string fn, long si, string dateofmod, string dateofacc)Di2015NewLine        {Di2015NewLine            FileName = fn;Di2015NewLine            Size = si;Di2015NewLine            DateOfModification = dateofmod;Di2015NewLine            DateOfLastAccess = dateofacc;Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11754173Di2015UniqueSeparator<NS1:Name xsi:type="xsd:string">Abcdefg</NS1:Name><NS1:Id xsi:type="xsd:int">1</NS1:Id>Di2015NewLine
11754320Di2015UniqueSeparatorRepositoryItemComboBox riCmb = new RepositoryItemComboBox();Di2015NewLine
11754320Di2015UniqueSeparatorriCmb.EditValueChanged += riCmb_EditValueChanged;Di2015NewLine
11754320Di2015UniqueSeparatorif(myGridView.GetRowCellValue(myGridView.FocusedRowHandle, "FieldName").ToString() == "1")Di2015NewLine{Di2015NewLine      grvInstruments.SetRowCellValue(grvInstruments.FocusedRowHandle, "FieldName", "One");Di2015NewLine}Di2015NewLine
11754476Di2015UniqueSeparator    public string myParam { get; set; }Di2015NewLine    public void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!IsPostBack)Di2015NewLine        {Di2015NewLine            ddl_CustomerCode.DataSource = OrderDefinitionData.GetCustomers(myParam);Di2015NewLine            ddl_CustomerCode.DataTextField = "CustomerCode";Di2015NewLine            ddl_CustomerCode.DataValueField = "CustomerName";                Di2015NewLine            ddl_CustomerCode.DataBind();Di2015NewLine         }Di2015NewLine    }Di2015NewLine
11754476Di2015UniqueSeparatorWebControl1 x = (WebControl1)Page.LoadControl("Controls/OrderDefinition.ascx");Di2015NewLinex.myParam = "customerNo1";Di2015NewLinePanel1.Controls.Add(x);Di2015NewLine
11754629Di2015UniqueSeparatorpublic static MvcHtmlString EnumDisplayFor<TModel, TEnum>(this HtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TEnum>> expression)Di2015NewLine    {Di2015NewLine        //Get the modelDi2015NewLine        TModel model = htmlHelper.ViewData.Model;Di2015NewLineDi2015NewLine        //Compile expression as FuncDi2015NewLine        Func<TModel, TEnum> method = expression.Compile();Di2015NewLineDi2015NewLine        //Calling compiled expression return TEnumDi2015NewLine        TEnum enumValue = method(model);Di2015NewLineDi2015NewLine        return MvcHtmlString.Create(GetEnumDescription(enumValue));Di2015NewLine    }Di2015NewLine
11754682Di2015UniqueSeparator<script type="text/jscript">Di2015NewLinejQuery(document).ready(function() {Di2015NewLinejQuery("#progressbar").progressbar({ value: 37 });Di2015NewLine});Di2015NewLine</script>Di2015NewLine
11754682Di2015UniqueSeparator$
11754682Di2015UniqueSeparatorjQuery.noConflict();Di2015NewLine(function($) { Di2015NewLine  $(function() {Di2015NewLine    $(document).ready(function() {Di2015NewLine    $("#progressbar").progressbar({ value: 37 });Di2015NewLine    // more code using $ as alias to jQueryDi2015NewLine  });Di2015NewLine})(jQuery);Di2015NewLine
11754682Di2015UniqueSeparatorUpdatePanel
11754682Di2015UniqueSeparatorjQuery.noConflict();Di2015NewLine(function($) { Di2015NewLine  $(function() {Di2015NewLine    $(document).ready(function() {Di2015NewLine    $("#progressbar").progressbar({ value: <asp:Literal runat="server" ID="ProgressPercentage" /> });Di2015NewLine    // more code using $ as alias to jQueryDi2015NewLine  });Di2015NewLine})(jQuery);Di2015NewLine
11754682Di2015UniqueSeparatorProgressPercentage.Text = progress.ToString();Di2015NewLine
11754700Di2015UniqueSeparator        List<string> mylist = market.Trim('~').Split(new string[] { @"\\" }, StringSplitOptions.RemoveEmptyEntries).ToList();Di2015NewLine        if (mylist.Count > 0)Di2015NewLine        {Di2015NewLine            TreeNode root = new TreeNode(mylist[0]);Di2015NewLine            treeView1.Nodes.Add(root);Di2015NewLine            mylist.RemoveAt(0);Di2015NewLineDi2015NewLine            TreeNode temp = root;Di2015NewLine            foreach (string s in mylist)Di2015NewLine            {Di2015NewLine                temp = AddNode(temp, s);Di2015NewLine            }Di2015NewLineDi2015NewLine            treeView1.SelectedNode = root;Di2015NewLine        }Di2015NewLine
11754700Di2015UniqueSeparator           private TreeNode AddNode(TreeNode parent, string header)Di2015NewLine    {Di2015NewLine        foreach (TreeNode subitem in parent.Nodes)Di2015NewLine            if (subitem.Text.ToString() == header)Di2015NewLine                return subitem;Di2015NewLine        TreeNode tvi = new TreeNode(header);Di2015NewLine        parent.Nodes.Add(tvi);Di2015NewLine        return tvi;Di2015NewLine    }Di2015NewLine
11754932Di2015UniqueSeparator-sOutputFile=/path/to/file
11754932Di2015UniqueSeparator"-sOutputFile=/where/it/should/go",Di2015NewLine
11754932Di2015UniqueSeparatorc#
11754932Di2015UniqueSeparator"-c"
11754932Di2015UniqueSeparator-sOutputFile
11754932Di2015UniqueSeparatorc#
11754932Di2015UniqueSeparatortxtwrite
11754932Di2015UniqueSeparatorgswin32c.exe ^Di2015NewLine   -o c:/path/to/output.txt ^Di2015NewLine   -dTextFormat=3 ^Di2015NewLine   -sDEVICE=txtwrite ^Di2015NewLine    input.pdfDi2015NewLine
11754932Di2015UniqueSeparatorgswin64c.exe
11754932Di2015UniqueSeparator-o
11754932Di2015UniqueSeparator-o
11754932Di2015UniqueSeparator-dBATCH
11754932Di2015UniqueSeparator-dNOPAUSE
11754932Di2015UniqueSeparator-o
11754932Di2015UniqueSeparator-dBATCH -dNOPAUSE -sOutputFile=...
11754932Di2015UniqueSeparator-dTextFormat
11754932Di2015UniqueSeparator3
11754932Di2015UniqueSeparator0
11754932Di2015UniqueSeparator1
11754932Di2015UniqueSeparator0
11754932Di2015UniqueSeparator2
11754932Di2015UniqueSeparator3
11754932Di2015UniqueSeparator2
11754932Di2015UniqueSeparatortxtwrite
11754932Di2015UniqueSeparator-dTextFormat
11754932Di2015UniqueSeparatorps2ascii.ps
11754932Di2015UniqueSeparatorgswin32c.exe ^Di2015NewLine   -sstdout=c:/path/to/output.txt ^Di2015NewLine   -dSIMPLE ^Di2015NewLine   -sFONTPATH=c:/windows/fonts ^Di2015NewLine   -dNODISPLAY Di2015NewLine   -dDELAYBIND ^Di2015NewLine   -dWRITESYSTEMDICT ^Di2015NewLine   -f /path/to/ps2ascii.ps ^Di2015NewLine    input.pdfDi2015NewLine
11754932Di2015UniqueSeparatortxtwrite
11754932Di2015UniqueSeparatorps2ascii.ps
11754932Di2015UniqueSeparator/lib
11754932Di2015UniqueSeparator-dSIMPLE
11754932Di2015UniqueSeparatordCOMPLEX
11754932Di2015UniqueSeparator-sstdout=...
11754932Di2015UniqueSeparatorps2ascii.ps
11754932Di2015UniqueSeparator-sstdout=...
11754932Di2015UniqueSeparatormudraw -t
11754932Di2015UniqueSeparatorpdftotext
11754932Di2015UniqueSeparatorpdftotext
11754932Di2015UniqueSeparatorpodofotxtextract
11755039Di2015UniqueSeparatoroperator ==
11755039Di2015UniqueSeparator==
11755057Di2015UniqueSeparatorYourGridView.Columns[0].Visible = false;
11755058Di2015UniqueSeparator    one.HasRequired(t => t.Two)Di2015NewLine        .WithMany(s => s.Ones)Di2015NewLine        .HasForeignKey(t => t.TwoId);Di2015NewLineDi2015NewLine    one.HasRequired(t => t.Three)Di2015NewLine        .WithMany(s => s.Ones)Di2015NewLine        .HasForeignKey(t => t.ThreeId);Di2015NewLine
11755058Di2015UniqueSeparator    one.HasRequired(t => t.Two)Di2015NewLine        .WithMany(s => s.Ones)Di2015NewLine        .HasForeignKey(t => new { t.TwoId, t.ThreeId });Di2015NewLine
11755058Di2015UniqueSeparatorThree
11755058Di2015UniqueSeparatorOne
11755108Di2015UniqueSeparator   WindowsIdentity wi = WindowsIdentity.GetCurrent();Di2015NewLine   var result = wi.Name;Di2015NewLine   var anonymous = wi.IsAnonymous; //For ensure your authentification modeDi2015NewLine
11755108Di2015UniqueSeparatorSystem.Web.HttpContext.Current.User.Identity.NameDi2015NewLine
11755132Di2015UniqueSeparatorasync
11755132Di2015UniqueSeparatorawait
11755356Di2015UniqueSeparator_Service.AssertWasNotCalled(s => s.Login(Di2015NewLine    Arg<string>.Is.Anything,Di2015NewLine    Arg<string>.Is.Anything,Di2015NewLine    Arg<int>.Is.Anything ,Di2015NewLine    out Arg<int>.Out(10).DummyDi2015NewLine));Di2015NewLine
11755356Di2015UniqueSeparatorOut
11755356Di2015UniqueSeparatorDummy
11755362Di2015UniqueSeparatorThe processRequest() method cycles through the page's life cycle in the order listed below.Di2015NewLineDi2015NewLineMethods                 DescriptionDi2015NewLinePage_Init                   Page InitializationDi2015NewLineLoadViewState           View State LoadingDi2015NewLineLoadPostData            Postback Data ProcessingDi2015NewLinePage_Load                   Page LoadingDi2015NewLineRaisePostDataChangedEvent   PostBack Change NotificationDi2015NewLineRaisePostBackEvent          PostBack Event HandlingDi2015NewLinePage_PreRender          Page Pre Rendering PhaseDi2015NewLineSaveViewState           View State SavingDi2015NewLinePage_Render                 Page RenderingDi2015NewLinePage_Unload Page            UnloadingDi2015NewLine
11755386Di2015UniqueSeparatorpublic void Calculate(time, params int[] parameters){ ... }Di2015NewLine
11755386Di2015UniqueSeparatorCalculate(time, 1, 2, 3, 4, 5, 6, ....)Di2015NewLine
11755386Di2015UniqueSeparatorforeach(int item in parameters){}Di2015NewLine
11755467Di2015UniqueSeparatorA
11755467Di2015UniqueSeparatorAdded
11755467Di2015UniqueSeparatorusing (Context context = new Context())Di2015NewLine{Di2015NewLine  context.As.Attach(A);Di2015NewLine  context.Entry(A).State = EntityState.Added;Di2015NewLine  context.SaveChanges();Di2015NewLine}Di2015NewLine
11755503Di2015UniqueSeparatordr1[x]
11755503Di2015UniqueSeparatorSELECT amount FROM contribution_master
11755503Di2015UniqueSeparatoramount
11755503Di2015UniqueSeparatordr1[0]
11755503Di2015UniqueSeparatordr1["amount"]
11755503Di2015UniqueSeparatorwhile (dr1.Read())
11755503Di2015UniqueSeparatorSqlDataAdapter da = new SqlDataAdapter(SQLCmd1);Di2015NewLineDataTable dt = new DataTable();Di2015NewLineda.Fill(dt);Di2015NewLineDi2015NewLineemployer_epf = Convert.ToDouble(dt.Rows[0][0].ToString());Di2015NewLineemployer_admin = Convert.ToDouble(dt.Rows[1][0].ToString());Di2015NewLineemployer_edli = Convert.ToDouble(dt.Rows[2][0].ToString());Di2015NewLineemployer_admin_edli = Convert.ToDouble(dt.Rows[3][0].ToString());Di2015NewLineemployer_esi = Convert.ToDouble(dt.Rows[4][0].ToString());Di2015NewLine
11755617Di2015UniqueSeparatorInputBox
11755617Di2015UniqueSeparatorpublic static DialogResult InputBox(string title, string promptText, ref string value, Action labelClickCallback)Di2015NewLine
11755617Di2015UniqueSeparatorLabel label2 = new Label();Di2015NewLinelabel2.Text = mesaj;Di2015NewLinelabel2.Cursor = Cursors.Hand;Di2015NewLinelabel2.Click += (s, e) => labelClickCallback(); // Create a new event handlerDi2015NewLine
11755617Di2015UniqueSeparatorInputBox
11755617Di2015UniqueSeparatorInputBox
11755617Di2015UniqueSeparatorInputBox("Title", "Text", ref result, sentEmail);Di2015NewLine
11755858Di2015UniqueSeparatorcase "a":Di2015NewLinecase "A":Di2015NewLine    if ( condition1) {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine    else if { condition2}Di2015NewLine        ...Di2015NewLine    }Di2015NewLine    break;Di2015NewLine
11755875Di2015UniqueSeparator  private void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)Di2015NewLine    {Di2015NewLine        this.dataGridView1.ClipboardCopyMode = DataGridViewClipboardCopyMode.Disable;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        this.dataGridView1.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithoutHeaderText;Di2015NewLine    }Di2015NewLine
11755881Di2015UniqueSeparatorList<Holding> holdings = new List<Holding>();Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("01-06-2010"), HoldingId = "1" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("02-06-2010"), HoldingId = "1" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("04-06-2010"), HoldingId = "1" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("02-06-2010"), HoldingId = "2" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("03-06-2010"), HoldingId = "2" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("05-06-2010"), HoldingId = "2" });Di2015NewLineholdings.Add(new Holding(){ date=Convert.ToDateTime("03-06-2010"), HoldingId = "3" });Di2015NewLineDi2015NewLineList<DateTime> dateRange = new List<DateTime>();Di2015NewLinedateRange.Add(Convert.ToDateTime("01-06-2010"));Di2015NewLinedateRange.Add(Convert.ToDateTime("02-06-2010"));Di2015NewLinedateRange.Add(Convert.ToDateTime("03-06-2010"));Di2015NewLinedateRange.Add(Convert.ToDateTime("04-06-2010"));Di2015NewLinedateRange.Add(Convert.ToDateTime("05-06-2010"));Di2015NewLineDi2015NewLineDictionary<string, List<DateTime>> missingHoldings = new Dictionary<string, List<DateTime>>();Di2015NewLineDi2015NewLineforeach(var holdGrp in  holdings.GroupBy (h => h.HoldingId))Di2015NewLine{Di2015NewLine    var missingDates = dateRange.Except(holdGrp.Select(h => h.date)).ToList();Di2015NewLine    missingHoldings.Add(holdGrp.Key, missingDates);Di2015NewLine}Di2015NewLine
11755901Di2015UniqueSeparatorSELECT * FROM coursesDi2015NewLineWHERE course_number IN (Di2015NewLine    SELECT course_id FROM job_courseDi2015NewLine    WHERE course_id NOT IN (Di2015NewLine        SELECT course_id FROM emp_coursesDi2015NewLine        WHERE emp_id = {someid}Di2015NewLine    ) AND job_id = (Di2015NewLine        SELECT job_id FROM employeesDi2015NewLine        WHERE emp_id = {user_input}Di2015NewLine    )Di2015NewLine)Di2015NewLine
11755901Di2015UniqueSeparatorSELECT emp_name FROM employeesDi2015NewLineWHERE emp_id NOT IN (Di2015NewLine    SELECT emp_id FROM emp_coursesDi2015NewLine    WHERE course_id = {user_input}Di2015NewLine)Di2015NewLine
11755901Di2015UniqueSeparatorSELECT emp_name FROM employeesDi2015NewLineWHERE emp_id NOT IN (Di2015NewLine    SELECT emp_id FROM emp_coursesDi2015NewLine    WHERE course_id = (Di2015NewLine        SELECT course_id FROM coursesDi2015NewLine        WHERE course_number = {user_input}Di2015NewLine    )Di2015NewLine)Di2015NewLine
11756009Di2015UniqueSeparatorcontext.YourEntities.Attach(entity);Di2015NewLinecontext.ObjectStateManager.ChangeObjectState(entity, EntityState.Modified);Di2015NewLine
11756009Di2015UniqueSeparatorcontext.YourEntities.AddObject(entity);Di2015NewLine
11756009Di2015UniqueSeparatorcontext.SaveChanges();Di2015NewLine
11756077Di2015UniqueSeparatorBehaviorSubject<int> value = new BehaviorSubject<int>(0);Di2015NewLineDi2015NewLinevalue.Select(v => v < 50).DistinctUntilChanged().Throttle(TimeSpan.FromSeconds(10))Di2015NewLine.Where(x => x).Subscribe(b => DoSomething());Di2015NewLine
11756086Di2015UniqueSeparatordate.ToString("format")
11756086Di2015UniqueSeparator// This will output something like Wed Aug 01 2012Di2015NewLinedate.ToString("ddd MMM dd yyyy");Di2015NewLine
11756167Di2015UniqueSeparatorstring splitter = textbox1.Text.ToString().Substring(1);Di2015NewLineDi2015NewLinetry {Di2015NewLine    int number = Convert.ToInt32(splitter) + 1;Di2015NewLine} catch (FormatException e) {Di2015NewLine    // Not a number...Di2015NewLine}Di2015NewLineDi2015NewLinetextbox1.Text = String.Format("J{0}", number.ToString());Di2015NewLine
11756198Di2015UniqueSeparatorfrm2.Show();Di2015NewLine
11756198Di2015UniqueSeparatornumber1= 5;Di2015NewLine
11756198Di2015UniqueSeparatorForm1
11756198Di2015UniqueSeparatorForm1
11756198Di2015UniqueSeparatorForm2 frm2 = new Form2();Di2015NewLine
11756198Di2015UniqueSeparatorForm2
11756198Di2015UniqueSeparatorForm2
11756198Di2015UniqueSeparatorForm2
11756198Di2015UniqueSeparatorForm2
11756198Di2015UniqueSeparatorForm2
11756198Di2015UniqueSeparatorfrm2
11756198Di2015UniqueSeparatorfrm2.Show();
11756198Di2015UniqueSeparatorpublic
11756198Di2015UniqueSeparatorinternal
11756222Di2015UniqueSeparatorn
11756222Di2015UniqueSeparatorxor
11756222Di2015UniqueSeparatorconst int BITCOUNT = 30;Di2015NewLineconst int BITMASK = (1 << BITCOUNT/2) - 1;Di2015NewLineDi2015NewLinestatic uint roundFunction(uint number) {Di2015NewLine  return (((number ^ 47894) + 25) << 1) & BITMASK;Di2015NewLine}Di2015NewLineDi2015NewLinestatic uint crypt(uint number) {Di2015NewLine  uint left = number >> (BITCOUNT/2);Di2015NewLine  uint right = number & BITMASK;Di2015NewLine  for (int round = 0; round < 10; ++round) {Di2015NewLine    left = left ^ roundFunction(right);Di2015NewLine    uint temp = left; left = right; right = temp;Di2015NewLine  }Di2015NewLine  return left | (right << (BITCOUNT/2));Di2015NewLine}Di2015NewLine
11756222Di2015UniqueSeparatorcrypt(crypt(x))==x
11756222Di2015UniqueSeparatorx
11756222Di2015UniqueSeparator0..2^30-1
11756222Di2015UniqueSeparatorconst string ALPHABET= "AG8FOLE2WVTCPY5ZH3NIUDBXSMQK7946";Di2015NewLinestatic string couponCode(uint number) {Di2015NewLine  StringBuilder b = new StringBuilder();Di2015NewLine  for (int i=0; i<6; ++i) {Di2015NewLine    b.Append(ALPHABET[(int)number&((1 << 5)-1)]);Di2015NewLine    number = number >> 5;Di2015NewLine  }Di2015NewLine  return b.ToString();Di2015NewLine}Di2015NewLinestatic uint codeFromCoupon(string coupon) {Di2015NewLine  uint n = 0;Di2015NewLine  for (int i = 0; i < 6; ++i)Di2015NewLine    n = n | (((uint)ALPHABET.IndexOf(coupon[i])) << (5 * i));Di2015NewLine  return n;Di2015NewLine}Di2015NewLine
11756222Di2015UniqueSeparator0 => 5VZNKBDi2015NewLine1 => HL766ZDi2015NewLine2 => TMGSEYDi2015NewLine3 => P28L4WDi2015NewLine4 => EM5EWDDi2015NewLine5 => WIACCZDi2015NewLine6 => 8DEPDADi2015NewLine7 => OQE33ADi2015NewLine8 => 4SEQ5ADi2015NewLine9 => AVAXS5Di2015NewLine
11756222Di2015UniqueSeparatorBITCOUNT
11756222Di2015UniqueSeparatorfor
11756222Di2015UniqueSeparator4
11756222Di2015UniqueSeparator6
11756222Di2015UniqueSeparatorBITCOUNT
11756222Di2015UniqueSeparatorALPHABET
11756222Di2015UniqueSeparatorfor
11756222Di2015UniqueSeparator5
11756222Di2015UniqueSeparatorcodeFromCoupon
11756222Di2015UniqueSeparatorcrypt
11756303Di2015UniqueSeparator    var list = new List<Tuple<string,string,string,string>>();Di2015NewLineDi2015NewLine    for(int i=0; i<experience.Count; i++)Di2015NewLine       list.Add(new Tuple<string,string,string,string>(experience[i],Cname[i],Clink[i],Ccomp[i]));Di2015NewLineDi2015NewLine    dataGridView.DataSource = list;Di2015NewLine
11756303Di2015UniqueSeparatorDataTable dt = new DataTable("Table");Di2015NewLinedt.Columns.AddRange(new DataColumn[]{ Di2015NewLine    new DataColumn("experience", typeof(string)),Di2015NewLine    new DataColumn("Cname", typeof(string)),Di2015NewLine    new DataColumn("Clink", typeof(string)),Di2015NewLine    new DataColumn("Ccomp", typeof(string))Di2015NewLine });Di2015NewLineDi2015NewLinefor(int i=0; i<experience.Count; i++){Di2015NewLine   var newRow = dt.NewRow();Di2015NewLine    newRow["experience"] = experience[i];Di2015NewLine    newRow["Cname"] = Cname[i];Di2015NewLine    newRow["Clink"] = Clink[i];Di2015NewLine    newRow["Ccomp"] = Ccomp[i];Di2015NewLine    dt.Rows.Add(newRow);Di2015NewLine }Di2015NewLineDi2015NewLinedataGridView.DataSource = dt;Di2015NewLine
11756408Di2015UniqueSeparatorvar rootPath = HostingEnvironment.ApplicationPhysicalPath;Di2015NewLine
11756408Di2015UniqueSeparatorusing System.Web.Hosting;
11756633Di2015UniqueSeparator PrintDocument printDocument1 = new PrintDocument();Di2015NewLineDi2015NewLine        var printerSettings = new System.Drawing.Printing.PrinterSettings();Di2015NewLine        printerSettings.PrinterName = "Printer name";// optionalDi2015NewLine        //printerSettings.PrinterName = "HP Officejet J6400 series";Di2015NewLineDi2015NewLine        printDocument1.PrinterSettings = printerSettings;Di2015NewLineDi2015NewLine        printDocument1.PrintPage += printDocument1_PrintPage;Di2015NewLine        PrintDialog printDialog1 = new PrintDialog();Di2015NewLine        printDialog1.Document = printDocument1;Di2015NewLine// in the dialog, you can set up the paper size, etc.Di2015NewLine        printDialog1.UseEXDialog = true;Di2015NewLine        if (printDialog1.ShowDialog() == DialogResult.OK)Di2015NewLine        {Di2015NewLine        printDocument1.Print();Di2015NewLine        }Di2015NewLine
11756633Di2015UniqueSeparatorprivate void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)Di2015NewLine    {Di2015NewLine//This print form a rich textbox, but you can render pdf here.Di2015NewLine        //e.Graphics.DrawString(richTextBox1.Text, richTextBox1.Font, Brushes.Black, 100, 20);Di2015NewLine        //e.Graphics.PageUnit = GraphicsUnit.Inch;Di2015NewLine    }Di2015NewLine
11756804Di2015UniqueSeparator<UserControlDi2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"Di2015NewLine    x:Class="ItSucks.MainPage"Di2015NewLine    Width="640" Height="480">Di2015NewLine    <UserControl.Resources>Di2015NewLine        <Storyboard x:Name="SuckLeft">Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="0.05" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="0.05" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="248" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="-318" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="45" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="54" Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationX)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine            <DoubleAnimation Duration="0:0:0.5" To="-35" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.SkewX)" Storyboard.TargetName="rectangle" d:IsOptimized="True"/>Di2015NewLine        </Storyboard>Di2015NewLine    </UserControl.Resources>Di2015NewLineDi2015NewLine    <Grid x:Name="LayoutRoot" Background="White">Di2015NewLine        <Rectangle x:Name="rectangle" Fill="#FF1717C8" Margin="212,120,216,124" Stroke="Black" StrokeThickness="8" RenderTransformOrigin="0.5,0.5">Di2015NewLine            <Rectangle.Projection>Di2015NewLine                <PlaneProjection/>Di2015NewLine            </Rectangle.Projection>Di2015NewLine            <Rectangle.RenderTransform>Di2015NewLine                <CompositeTransform/>Di2015NewLine            </Rectangle.RenderTransform>Di2015NewLine        </Rectangle>Di2015NewLine    </Grid>Di2015NewLine</UserControl>Di2015NewLine
11756847Di2015UniqueSeparatorObjectDataSource
11756847Di2015UniqueSeparatorUpdateMethod
11756847Di2015UniqueSeparatorRowUpdating
11756847Di2015UniqueSeparatorUpdateParameters
11756847Di2015UniqueSeparatorObjectDataSource
11756859Di2015UniqueSeparatorOptional
11756941Di2015UniqueSeparatorWriteString
11756941Di2015UniqueSeparatorXmlTextWriter
11756941Di2015UniqueSeparatorMemoryStream m = new MemoryStream();Di2015NewLineMyWriter xmlWriter = new MyWriter(m);Di2015NewLineDi2015NewLineXDocument xDoc = XDocument.Parse(xml);Di2015NewLinexDoc.Save(xmlWriter);Di2015NewLinexmlWriter.Flush();Di2015NewLineDi2015NewLinestring s = Encoding.UTF8.GetString(m.ToArray());Di2015NewLine
11756941Di2015UniqueSeparatorpublic class MyWriter : XmlTextWriterDi2015NewLine{Di2015NewLine    public MyWriter(Stream s) : base(s,Encoding.UTF8)Di2015NewLine    {Di2015NewLine    }Di2015NewLine    public override void WriteString(string text)Di2015NewLine    {Di2015NewLine        base.WriteRaw(HttpUtility.HtmlEncode(text));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11756958Di2015UniqueSeparatorprivate int _progValue1 = 100;Di2015NewLineprivate int _progValue2 = 30;Di2015NewLineDi2015NewLineprotected int ProgValue1 { get { return this._progValue1; }}Di2015NewLineprotected int ProgValue2 { get { return this._progValue2; }}Di2015NewLine
11756958Di2015UniqueSeparator<script>   Di2015NewLine  $(document).ready(function() {   Di2015NewLine    var progValue1 = <%=ProgValue1%>;   Di2015NewLine    var progValue2 = <%=ProgValue2%>;    Di2015NewLine    $("#progressbar").progressbar({ value: progValue1});   Di2015NewLine    $("#progressbar2").progressbar({ value: progValue2 });   Di2015NewLine  });   Di2015NewLine</script>  Di2015NewLine
11756958Di2015UniqueSeparatorthis._progValue1 = 40;Di2015NewLinethis._progValue2 = 20;Di2015NewLine
11757119Di2015UniqueSeparatorSystem.ComponentModel.DataAnnotations
11757171Di2015UniqueSeparatorEnabled="False" Di2015NewLine
11757199Di2015UniqueSeparator   public static void Update(object original, object updated)Di2015NewLine   {Di2015NewLine       var oldProperties = original.GetType().GetProperties();Di2015NewLine       var newProperties = updated.GetType().GetProperties();Di2015NewLine       for (var i = 0; i < oldProperties.Length; i++)Di2015NewLine       {Di2015NewLine           var oldval = oldProperties[i].GetValue(original, null);Di2015NewLine           var newval = newProperties[i].GetValue(updated, null);Di2015NewLine           if (!Equals(oldval,newval))Di2015NewLine               oldProperties[i].SetValue(original, newval, null);Di2015NewLine       }Di2015NewLine   }Di2015NewLine
11757199Di2015UniqueSeparator   public static void Update<T>(T original, T updated)Di2015NewLine   {Di2015NewLine       var properties = typeof(T).GetProperties();Di2015NewLine       for (var i = 0; i < properties.Length; i++)Di2015NewLine       {Di2015NewLine           var oldval = properties[i].GetValue(original, null);Di2015NewLine           var newval = properties[i].GetValue(updated, null);Di2015NewLine           if (!Equals(oldval,newval))Di2015NewLine               properties[i].SetValue(original, newval, null);Di2015NewLine       }Di2015NewLine   }Di2015NewLine
11757238Di2015UniqueSeparator function on_submit(){Di2015NewLine    var pageUrl = 'your_page_name.aspx'Di2015NewLine     $.ajax({Di2015NewLine       type: "POST",Di2015NewLine       url: pageUrl + "/your_web_method",Di2015NewLine       data: '{data1:value1, data2:value2}',Di2015NewLine       contentType: "application/json; charset=utf-8",Di2015NewLine       dataType: "json",Di2015NewLine       success: function(msg) {Di2015NewLine                make your success code hereDi2015NewLine          }Di2015NewLine    });Di2015NewLineDi2015NewLine  in C# Di2015NewLine    [WebMethod]Di2015NewLine    public static void your_web_method(data1, data2)Di2015NewLine    {Di2015NewLine        // your code to store value in databaseDi2015NewLine    }Di2015NewLine
11757333Di2015UniqueSeparatorimage
11757333Di2015UniqueSeparator[Column(TypeName = "image")]Di2015NewLinepublic Byte[] Image { get; set; }Di2015NewLine
11757333Di2015UniqueSeparatormodelBuilder.Entity<...>().Property(e => e.Image).HasColumnType("image");Di2015NewLine
11757513Di2015UniqueSeparatorimg.Width
11757513Di2015UniqueSeparatorimg.Height
11757513Di2015UniqueSeparator    for (int i = 0; i < 50; i++)Di2015NewLine    {Di2015NewLine        for (int j = 0; j < 50; j++)Di2015NewLine        {Di2015NewLine            ...Di2015NewLine
11757593Di2015UniqueSeparatorvar input = Console.ReadLine();Di2015NewLineif (input == "") {Di2015NewLine    break;Di2015NewLine}Di2015NewLineDi2015NewLinenumbers[i] = int.Parse(input);Di2015NewLine// etcDi2015NewLine
11757635Di2015UniqueSeparator//DALDi2015NewLinepublic class DataAccessDi2015NewLine{Di2015NewLine    public static void GetCustomerByNumber(int number)Di2015NewLine    {Di2015NewLine        var objCustomer = dbContext.Customers.Where(c => c.CustCode == number).First();Di2015NewLine        return objCustomer;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//ModelsDi2015NewLinepublic class CustomerDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public int Number { get; set; }Di2015NewLineDi2015NewLine    public Customer GetCustomerByNumber(int number) Di2015NewLine    {Di2015NewLine       return DataAccess.GetCustomerByNumber(number);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ChangeProfile(ProfileInfo profile)Di2015NewLine    {Di2015NewLine       //...Di2015NewLine    }Di2015NewLine}Di2015NewLine
11757698Di2015UniqueSeparatorImageButton
11757698Di2015UniqueSeparatorfor(int i = 0; i < numberOfAnswers; i++){Di2015NewLine    var ib = new ImageButton();Di2015NewLine    var td = new HtmlTableCell();Di2015NewLineDi2015NewLine    // assign values, like ID, Image URL, event handlers, etc. hereDi2015NewLine    ib.ID = "button_" + i;Di2015NewLine    ib.ImageUrl = "foo";Di2015NewLine    ib.Click += ( sender, e ) => {Di2015NewLine        // anonymous event handlerDi2015NewLine    };Di2015NewLineDi2015NewLine    // "container" can be any control on the page, such as a table rowDi2015NewLine    container.Controls.Add( td );Di2015NewLine    td.Controls.Add( ib );Di2015NewLine}Di2015NewLine
11757700Di2015UniqueSeparatorpublic
11757700Di2015UniqueSeparatorpublic class TagContentDi2015NewLine{Di2015NewLine    public String TagName;Di2015NewLine    public String TagValue;Di2015NewLine};Di2015NewLine
11757700Di2015UniqueSeparatorList<>
11757700Di2015UniqueSeparatorvar tags = new List<TagContent>();Di2015NewLineDi2015NewLinetags.Add(new TagContent{TagName = "aaa", TagValue = "vvv"});Di2015NewLineDi2015NewLine// use it:Di2015NewLine// get value of 'TagName' of item 5:Di2015NewLinevar tagname5 = tags[5].TagName;Di2015NewLine
11758260Di2015UniqueSeparator<Rectangle Name="TransparentBack"  Height="10" Width="10">Di2015NewLine    <Rectangle.Fill>Di2015NewLine        <DrawingBrush>Di2015NewLine            <DrawingBrush.Drawing>Di2015NewLine                <DrawingGroup>Di2015NewLine                    <GeometryDrawing Brush="Transparent">Di2015NewLine                        <GeometryDrawing.Geometry>Di2015NewLine                            <RectangleGeometry>Di2015NewLine                                <RectangleGeometry.Rect>Di2015NewLine                                    <Rect Height="1" Width="1"/>Di2015NewLine                                </RectangleGeometry.Rect>Di2015NewLine                            </RectangleGeometry>Di2015NewLine                        </GeometryDrawing.Geometry>Di2015NewLine                    </GeometryDrawing>Di2015NewLine                    <GeometryDrawing Brush="White">Di2015NewLine                        <GeometryDrawing.Geometry>Di2015NewLine                            <PathGeometry>Di2015NewLine                                <PathFigure StartPoint="0,0">Di2015NewLine                                    <LineSegment Point="0,1"/>Di2015NewLine                                    <LineSegment Point="1,1"/>Di2015NewLine                                </PathFigure>Di2015NewLine                            </PathGeometry>Di2015NewLine                        </GeometryDrawing.Geometry>Di2015NewLine                    </GeometryDrawing>Di2015NewLine                </DrawingGroup>Di2015NewLine            </DrawingBrush.Drawing>Di2015NewLine        </DrawingBrush>Di2015NewLine    </Rectangle.Fill>Di2015NewLine</Rectangle>Di2015NewLine
11758271Di2015UniqueSeparatorusing TaskPair = KeyValuePair<Func, object[]>;Di2015NewLine...Di2015NewLineDi2015NewLineprivate Queue<TaskPair> taskQueue;Di2015NewLine...Di2015NewLineDi2015NewLine// generate the queue of tasksDi2015NewLinethis.taskQueue = new Queue<TaskPair>(this.DataGridViewUrg.Rows);Di2015NewLineforeach (DataGridViewRow row in this.DataGridViewUrg.Rows)Di2015NewLine{Di2015NewLine    var task = new TaskPair(Run(DrgDataRowInfo(row.Index)), /* params */);Di2015NewLine    this.taskQueue.Enqueue(task);Di2015NewLine}Di2015NewLine// initiate queue processingDi2015NewLineProcessNextTask();Di2015NewLineDi2015NewLine....Di2015NewLineprivate void ProcessNextTask()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        var item = this.taskQueue.Dequeue();Di2015NewLine        TaskSpin(item.Key, item.Value);Di2015NewLine    }Di2015NewLine    catch(InvalidOperationException)Di2015NewLine    {Di2015NewLine        // queue is emptyDi2015NewLine    }   Di2015NewLine}Di2015NewLineDi2015NewLine....Di2015NewLine// Execute task and process next in queue (if applicable)Di2015NewLinepublic TaskSpin(Func asyncMethod, object[] methodParameters)           Di2015NewLine{            Di2015NewLine    ...           Di2015NewLine    asyncTask = Task.Factory.StartNew<bool>(() =>            Di2015NewLine        asyncMethod(uiScheduler, methodParameters));           Di2015NewLineDi2015NewLine    asyncTask.ContinueWith(task =>           Di2015NewLine    {           Di2015NewLine        // Finish the processing update UI etc.Di2015NewLine        ProcessNextTask();           Di2015NewLine    }  Di2015NewLine    ...                 Di2015NewLine}Di2015NewLine
11758349Di2015UniqueSeparatorpublic void addToQueue(Object obj){Di2015NewLine    if (myQueue.Count > 100)Di2015NewLine        myQueue.Dequeue();Di2015NewLineDi2015NewLine    myQueue.Equeue(obj);Di2015NewLine}Di2015NewLine
11758363Di2015UniqueSeparatorDictionary<string,object>
11758363Di2015UniqueSeparatorvar glossaryEntry = new JavaScriptSerializer().Deserialize<Dictionary<string, object>>(json);Di2015NewLinevar keys = glossaryEntry.Keys.ToList();Di2015NewLineDi2015NewLinevar scoring1 = glossaryEntry["Scoring"];Di2015NewLine//ORDi2015NewLinevar scoring2 = glossaryEntry[keys[0]];Di2015NewLine
11758371Di2015UniqueSeparatorwindow.opener.document.getElementById("tbl_login").style.visibility="hidden";
11758371Di2015UniqueSeparatorxmlHttp.onreadystatechange=stateChanged;Di2015NewLine
11758371Di2015UniqueSeparatorreadystatechangedevent
11758371Di2015UniqueSeparator//After doing the Logic return the status (foreg:- i return here as "success")Di2015NewLineResponse.Clear();Di2015NewLineResponse.ContentType = "text/plain";Di2015NewLineResponse.Write("success");Di2015NewLineResponse.End();Di2015NewLine
11758403Di2015UniqueSeparator/reference:<file path>
11758403Di2015UniqueSeparator/reference
11758523Di2015UniqueSeparator<div class="editor-field">Di2015NewLine    @Html.TextBoxFor(model => model.DOB, new { @class = "date" })Di2015NewLine    @Html.ValidationMessageFor(model => model.DOB)Di2015NewLine</div>Di2015NewLine
11758529Di2015UniqueSeparatorFoo<int>
11758529Di2015UniqueSeparatorFooBase
11758529Di2015UniqueSeparatorFooBase
11758529Di2015UniqueSeparatorFooBase.Do
11758529Di2015UniqueSeparatorFooBase foo = new Foo<int>();Di2015NewLinefoo.Do(5); // This will still call FooBase.DoDi2015NewLine
11758529Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass FooBaseDi2015NewLine{Di2015NewLine    public bool Do(int p) { return false; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Foo<T> : FooBaseDi2015NewLine{Di2015NewLine    public bool Do(T p) { return true; }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        FooBase foo1 = new Foo<int>();Di2015NewLine        Console.WriteLine(foo1.Do(10)); // FalseDi2015NewLineDi2015NewLine        Foo<int> foo2 = new Foo<int>();Di2015NewLine        Console.WriteLine(foo2.Do(10)); // TrueDi2015NewLine    }Di2015NewLine}Di2015NewLine
11758529Di2015UniqueSeparatorFoo<T>
11758529Di2015UniqueSeparatorFooBase
11758529Di2015UniqueSeparatorFooBase.Do
11758596Di2015UniqueSeparatorprivate void treeViewProduct_AfterSelect(object sender, TreeViewEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (insertMode)Di2015NewLine        {Di2015NewLineDi2015NewLine            treeViewProduct.NotifyAboutInsert(e.Node.Index);Di2015NewLine        }Di2015NewLine...Di2015NewLine}Di2015NewLine
11758661Di2015UniqueSeparatorvar Q = (from k in MyList Di2015NewLine             where k.Description!=null && (k.Name.Contains(query) || k.Description.Contains(query))   Di2015NewLine               select k).Count();Di2015NewLineif (Q == 0)Di2015NewLine  continue;Di2015NewLine
11758661Di2015UniqueSeparatorvar Q = (from k in MyList Di2015NewLine             k.Name.Contains(query)  || Di2015NewLine              ( string.IsNullOrEmpty(k.Description)? false :   Di2015NewLine                k.Description.Contains(query))   Di2015NewLine               select k).Count();Di2015NewLineif (Q == 0)Di2015NewLine  continue;Di2015NewLine
11758666Di2015UniqueSeparatorstring line = string.Empty;Di2015NewLinedoDi2015NewLine{Di2015NewLine    line = Console.ReadLine();Di2015NewLine    if (!string.IsNullOrEmpty(line))Di2015NewLine    { Di2015NewLine       numbers[i] = int.Parse(line);Di2015NewLine       i++;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine      ok = true;Di2015NewLine    }Di2015NewLineDi2015NewLine}while (!ok && i<10);Di2015NewLine
11758765Di2015UniqueSeparatorif not exist c:\\somedir\\bin md c:\\somedir\\binDi2015NewLinexcopy /y c:\\yourcodedir\\bin\\abc.txt c:\\somedir\\binDi2015NewLine
11759039Di2015UniqueSeparatorNET USE
11759095Di2015UniqueSeparator private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        dataGridView1.CellContentClick += new DataGridViewCellEventHandler(dataGridView1_CellContentClick);Di2015NewLineDi2015NewLine        DataGridViewButtonColumn select = new DataGridViewButtonColumn();Di2015NewLine        select.Text = "Details";Di2015NewLine        select.HeaderText = "Details";Di2015NewLine        select.Name = "Select";Di2015NewLine        dataGridView1.Columns.Add(select);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.ColumnIndex == dataGridView1.Columns["Select"].Index)Di2015NewLine        {Di2015NewLine            MessageBox.Show(String.Format("Clicked! Row: {0}", e.RowIndex));Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11759107Di2015UniqueSeparatorstring directory = Path.GetDirectoryName(path);
11759113Di2015UniqueSeparatorm_seatMngr.CancelSeat(index)
11759113Di2015UniqueSeparatorif
11759113Di2015UniqueSeparatorif (!m_seatMngr.CancelSeat(index))Di2015NewLine
11759122Di2015UniqueSeparatorvar obj = Globals.NameList;Di2015NewLineArray.Resize(ref obj , 0);Di2015NewLineGlobals.NameList=obj;Di2015NewLine
11759249Di2015UniqueSeparatorvoid AddCategory(List<Category> roots, Category categoryToAdd, string lineage)Di2015NewLine{Di2015NewLine    List<Guid> categoryIdList = lineage.Split('/').Select(id => new Guid(id)).ToList();Di2015NewLineDi2015NewLine    List<Category> currentNodes = roots;Di2015NewLine    Category parentNode = null;Di2015NewLineDi2015NewLine    foreach (Guid categoryId in categoryIdList)Di2015NewLine    {Di2015NewLine        parentNode = currentNodes.Where(category => category.CategoryId == categoryId).Single();Di2015NewLine        currentNodes = parentNode.Children;Di2015NewLine    }Di2015NewLineDi2015NewLine    parentNode.Children.Add(categoryToAdd);Di2015NewLine}Di2015NewLine
11759262Di2015UniqueSeparatorpublic class Something {Di2015NewLine        public int SomethingId { get; set; }Di2015NewLine        [ForeignKey("Layer1")]Di2015NewLine        public int Layer1Id { get; set; }Di2015NewLine        [ForeignKey("Layer2")]Di2015NewLine        public int Layer2Id { get; set; }Di2015NewLine        [ForeignKey("Layer3")]Di2015NewLine        public int Layer3Id { get; set; }Di2015NewLine        [ForeignKey("Layer1Id")]Di2015NewLine        public Layer Layer1 { get; set; }Di2015NewLine        [ForeignKey("Layer2Id")]Di2015NewLine        public Layer Layer2 { get; set; }Di2015NewLine        [ForeignKey("Layer3Id")]Di2015NewLine        public Layer Layer3 { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Layer {Di2015NewLine        public int LayerId { get; set; }Di2015NewLine        [InverseProperty("Layer1")]Di2015NewLine        public Something Something1 { get; set; }Di2015NewLine        [InverseProperty("Layer2")]Di2015NewLine        public Something Something2 { get; set; }Di2015NewLine        [InverseProperty("Layer3")]Di2015NewLine        public Something Something3 { get; set; }Di2015NewLine    }Di2015NewLine
11759272Di2015UniqueSeparatorpublic class EmployeeDi2015NewLine{Di2015NewLine    ...Di2015NewLine    IList<Role> Roles;Di2015NewLine    bool isActive;Di2015NewLineDi2015NewLine    public void TerminateRole(Role role)Di2015NewLine    {Di2015NewLine        Roles.Remove(role);Di2015NewLine        if(Roles.Count == 0)Di2015NewLine        {Di2015NewLine            isActive = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RoleDi2015NewLine{Di2015NewLine    abstract string Name { get;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProgrammerRole : RoleDi2015NewLine{Di2015NewLine    override string Name { get { return "Programmer"; } }Di2015NewLine}Di2015NewLine
11759379Di2015UniqueSeparatorSCOPE_IDENTITY()
11759379Di2015UniqueSeparatorSqlConnection myConnection = new SqlConnection(@"SomeConnection");Di2015NewLinemyConnection.Open();Di2015NewLineSqlCommand myCommand = myConnection.CreateCommand();Di2015NewLinemyCommand.CommandText = "Insert Into Absences (Name, Job) Values ('aName', 'aJob'); SELECT SCOPE_IDENTITY();";Di2015NewLineint currentAbs = (int)myCommand.ExecuteScalar();Di2015NewLine
11759380Di2015UniqueSeparatorname
11759380Di2015UniqueSeparatorSubItems
11759380Di2015UniqueSeparator    ListViewItem lvItem;Di2015NewLine    foreach (DataGridViewRow row in dataGridView1.SelectedRows)Di2015NewLine    {Di2015NewLineDi2015NewLine        lvItem = new ListViewItem();Di2015NewLine        lvItem.SubItems.Add(row.Cells["ID"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Item"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Cost"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Manufacturer"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Quanlity"].Value.ToString());Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine
11759380Di2015UniqueSeparator    foreach (DataGridViewRow row in dataGridView1.SelectedRows)Di2015NewLine    {Di2015NewLineDi2015NewLine        lvItem = new ListViewItem(row.Cells["ID"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Item"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Cost"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Manufacturer"].Value.ToString());Di2015NewLine        lvItem.SubItems.Add(row.Cells["Quanlity"].Value.ToString());Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine
11759381Di2015UniqueSeparatorList<Label> labels = new List<Label>();Di2015NewLinefor (int i = 0; i < 10; i++)Di2015NewLine{Di2015NewLine    Label label = new Label();Di2015NewLine    // Set properties hereDi2015NewLine    labels.Add(label);Di2015NewLine}Di2015NewLine
11759464Di2015UniqueSeparatorpublic class CustomerDi2015NewLine{Di2015NewLine  public int ID { set;get;}Di2015NewLine  public string JsonData { set;get;}Di2015NewLine  [NotMapped]Di2015NewLine  public ICollection<string> Items { set;get;}Di2015NewLine}Di2015NewLine
11759464Di2015UniqueSeparatorJsonData
11759464Di2015UniqueSeparatorItems
11759464Di2015UniqueSeparatorJavaScriptSerializer ser= new JavaScriptSerializer();    Di2015NewLinestring JsonData= ser.Serialize(Items);Di2015NewLine
11759464Di2015UniqueSeparatorJSON
11759584Di2015UniqueSeparatorforeach (XmlNode node in dataNodes)Di2015NewLine{Di2015NewLine     foreach (XmlNode childNode in node.ChildNodes)Di2015NewLine     {Di2015NewLine
11759727Di2015UniqueSeparatorProcess
11759727Di2015UniqueSeparatorRobot
11759736Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineDi2015NewLinenamespace MeasureSizeDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var size = GetTextSize("This is a test!", "Arial", 10, "normal", "bold");Di2015NewLineDi2015NewLine            Console.Write("Width: {0} / Heigth: {1}", size);Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLineDi2015NewLine        public static object[] GetTextSize(object value, object fontFamily, object size, object style, object weight)Di2015NewLine        {Di2015NewLine            if (value == null || fontFamily == null || size == null) { return new object[0]; }Di2015NewLineDi2015NewLine            var result = new object[2];Di2015NewLine            var text = value.ToString();Di2015NewLine            var font = default(Font);Di2015NewLine            var composedStyle = string.Concat(style ?? "normal", "+", weight ?? "normal").ToLowerInvariant();Di2015NewLine            var fontStyle = default(FontStyle);Di2015NewLineDi2015NewLine            switch (composedStyle)Di2015NewLine            {Di2015NewLine                case "normal+normal": fontStyle = FontStyle.Regular | FontStyle.Regular; break;Di2015NewLine                case "normal+bold": fontStyle = FontStyle.Regular | FontStyle.Bold; break;Di2015NewLine                case "italic+normal": fontStyle = FontStyle.Italic | FontStyle.Regular; break;Di2015NewLine                case "italic+bold": fontStyle = FontStyle.Italic | FontStyle.Bold; break;Di2015NewLine            }Di2015NewLineDi2015NewLine            font = new Font(fontFamily.ToString(), Convert.ToSingle(size), fontStyle, GraphicsUnit.Pixel);Di2015NewLineDi2015NewLine            using (var image = new Bitmap(1, 1))Di2015NewLine            using (var graphics = Graphics.FromImage(image))Di2015NewLine            {Di2015NewLine                var sizeF = graphics.MeasureString(text, font);Di2015NewLineDi2015NewLine                result[0] = Math.Round((decimal)sizeF.Width, 0, MidpointRounding.ToEven);Di2015NewLine                result[1] = Math.Round((decimal)sizeF.Height, 0, MidpointRounding.ToEven);Di2015NewLine            }Di2015NewLineDi2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11759956Di2015UniqueSeparatortemperature_label = new Label();Di2015NewLinethis.Controls.Add(temperature_label);Di2015NewLineDi2015NewLinetemperature_label.Location = new Point(260, 200);Di2015NewLine...Di2015NewLinetemperature_label.Tag = The Temperature Now Is - {0}C;Di2015NewLinetemperature_label.Text = "Fetching temperature...";Di2015NewLine
11759956Di2015UniqueSeparator....Di2015NewLineDi2015NewLinetemperature_label.Text = string.Format(temperature_label.Tag, sensor.Value);Di2015NewLineDi2015NewLine....      Di2015NewLine
11759982Di2015UniqueSeparatorEqualityComparer<T>.Default
11759982Di2015UniqueSeparatorIEquatable<T>
11759982Di2015UniqueSeparatorobject.Equals
11759982Di2015UniqueSeparatorNullable<T>
11759982Di2015UniqueSeparatorif(EqualityComparer<T>.Default.Equals(obj,default(T)) {Di2015NewLine    return obj;Di2015NewLine}Di2015NewLine
11759982Di2015UniqueSeparatorNullable<T>
11760014Di2015UniqueSeparator[Flags]
11760014Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum Locations {Di2015NewLine  LocationA = 1 << 0,Di2015NewLine  LocationB = 1 << 1,Di2015NewLine  LocationC = 1 << 2Di2015NewLine}Di2015NewLine
11760018Di2015UniqueSeparatorpublic static MvcHtmlString LabelFor<TModel, TValue>(this HtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, Object htmlAttributes) {Di2015NewLine    ModelMetadata metadata = ModelMetadata.FromLambdaExpression<TModel, TValue>(expression, html.ViewData);Di2015NewLine    String fieldname = ExpressionHelper.GetExpressionText(expression);Di2015NewLineDi2015NewLine    fieldname = metadata.DisplayName ?? metadata.PropertyName ?? fieldname.Split(new Char[] { '.' }).Last<String>();Di2015NewLine    if (String.IsNullOrEmpty(fieldname)) {Di2015NewLine        return MvcHtmlString.Empty;Di2015NewLine    }Di2015NewLine    TagBuilder tagBuilder = new TagBuilder("label");Di2015NewLine    tagBuilder.Attributes.Add("for", TagBuilder.CreateSanitizedId(html.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(fieldname)));Di2015NewLine    tagBuilder.SetInnerText(fieldname);Di2015NewLine    RouteValueDictionary attr = HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes);Di2015NewLine    tagBuilder.MergeAttributes<String, Object>(attr);Di2015NewLine    return tagBuilder.ToMvcHtmlString();Di2015NewLine}Di2015NewLine
11760112Di2015UniqueSeparatorCrossProduct
11760112Di2015UniqueSeparatorCrossProduct
11760157Di2015UniqueSeparator    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);Di2015NewLineDi2015NewLine    [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]Di2015NewLine    static extern int GetWindowTextLength(IntPtr hWnd);Di2015NewLineDi2015NewLine    [DllImport("user32", SetLastError = true)]Di2015NewLine    public static extern int EnumWindows(CallBack x, int y);Di2015NewLineDi2015NewLine    [DllImport("user32.dll", SetLastError = true)]Di2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    static extern bool EnumChildWindows(IntPtr hwndParent, CallBack lpEnumFunc, IntPtr lParam);Di2015NewLineDi2015NewLine    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    public static extern IntPtr SendMessage(HandleRef hWnd, uint Msg, IntPtr wParam, string lParam);Di2015NewLineDi2015NewLine    public const uint WM_SETTEXT = 0x000C;Di2015NewLineDi2015NewLine    public delegate bool CallBack(int hwnd, int lParam);Di2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        CallBack windowsCallback = new CallBack(IterateWindows);Di2015NewLine        EnumWindows(windowsCallback, 0);        Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IterateChildren(int hwnd, int lParam)Di2015NewLine    {Di2015NewLine        string newButtonText = "Some text";Di2015NewLine        bool continueIteratingChildren = true;Di2015NewLine        //Console.WriteLine("Child handle: " + hwnd);Di2015NewLineDi2015NewLine        int length = GetWindowTextLength((IntPtr)hwnd);Di2015NewLine        StringBuilder sb = new StringBuilder(length + 1);Di2015NewLine        GetWindowText((IntPtr)hwnd, sb, sb.Capacity);Di2015NewLine        //Console.WriteLine(sb);Di2015NewLineDi2015NewLine        if (sb.ToString().StartsWith("My Button Text "))Di2015NewLine        {Di2015NewLine            HandleRef hrefHWndTarget = new HandleRef(null, (IntPtr)hwnd);Di2015NewLine            SendMessage(hrefHWndTarget, WM_SETTEXT, IntPtr.Zero, newButtonText);Di2015NewLine            continueIteratingChildren = false;Di2015NewLine        }Di2015NewLine        return continueIteratingChildren;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IterateWindows(int hwnd, int lParam)Di2015NewLine    {Di2015NewLine        bool continueIteratingWindows = true;Di2015NewLine        int windowTextLength = GetWindowTextLength((IntPtr)hwnd);Di2015NewLine        StringBuilder sb = new StringBuilder(windowTextLength + 1);Di2015NewLine        GetWindowText((IntPtr)hwnd, sb, sb.Capacity);Di2015NewLineDi2015NewLine        if (sb.ToString().StartsWith("My Window Caption"))Di2015NewLine        {Di2015NewLine            //Console.Write("Window handle is ");Di2015NewLine            //Console.WriteLine(hwnd);Di2015NewLine            //Console.WriteLine(sb);Di2015NewLine            //Console.WriteLine(Marshal.GetLastWin32Error());Di2015NewLine            var childrenCallback = new CallBack(IterateChildren);Di2015NewLine            EnumChildWindows((IntPtr)hwnd, childrenCallback, IntPtr.Zero);Di2015NewLine            continueIteratingWindows = false;Di2015NewLine        }Di2015NewLine        return continueIteratingWindows;Di2015NewLine    }Di2015NewLine
11760208Di2015UniqueSeparatorBindAttribute
11760208Di2015UniqueSeparatorInclude
11760208Di2015UniqueSeparatorints
11760275Di2015UniqueSeparatorarg.ToString()
11760275Di2015UniqueSeparator"System.Web.UI.WebControls.ServerValidateEventArgs"
11760275Di2015UniqueSeparatorarg.Value
11760275Di2015UniqueSeparatorbool isNum = int.TryParse(arg.ToString(), out num);Di2015NewLine
11760275Di2015UniqueSeparator.Value
11760275Di2015UniqueSeparatorbool isNum = int.TryParse(arg.Value, out num);Di2015NewLine
11760275Di2015UniqueSeparatorprotected void intValidate_Validate(object sender, ServerValidateEventArgs arg)Di2015NewLine{Di2015NewLine    int num;Di2015NewLine    arg.IsValid = int.TryParse(are.Value, out num);Di2015NewLine}Di2015NewLine
11760275Di2015UniqueSeparator<asp:RequiredFieldValidator ...>
11760275Di2015UniqueSeparator<asp:CompareValidator Operator="DataTypeCheck" Type="Integer" ...>
11760275Di2015UniqueSeparator<asp:RangeValidator ...>
11760275Di2015UniqueSeparatorprotected void intValidate_Validate(object sender, ServerValidateEventArgs arg)Di2015NewLine{Di2015NewLine    if (args.Value.Length > 0)Di2015NewLine    {Di2015NewLine        int num;Di2015NewLine        arg.IsValid = int.TryParse(are.Value, out num);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        arg.IsValid = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11760301Di2015UniqueSeparator        routes.MapRoute(Di2015NewLine            name: "Default",Di2015NewLine            url: "{company}/{controller}/{action}/{id}",Di2015NewLine            defaults: new { controller = "CompanyProfile", action = "Index", id = UrlParameter.Optional },Di2015NewLine            constraints: new { company= new CompanyConstraint(companyNames) });Di2015NewLine
11760301Di2015UniqueSeparatorCompanyConstraint
11760301Di2015UniqueSeparatorIRouteConstraint
11760301Di2015UniqueSeparatorinternal class CompanyConstraint: IRouteConstraintDi2015NewLine{Di2015NewLine    public CompanyConstaint(IList<string> companies)Di2015NewLine    {Di2015NewLine        this.companies = companies;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)Di2015NewLine    {Di2015NewLine        object company;Di2015NewLine        if (!values.TryGetValue("company", out company) || company == null)Di2015NewLine        {Di2015NewLine             return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        return companies.Contains(company.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
11760317Di2015UniqueSeparatorclass Less7HolderDi2015NewLine{Di2015NewLine   public List<int> g = new List<int>();Di2015NewLine   public int mySum = 0;Di2015NewLine}Di2015NewLineDi2015NewLinevoid Main()Di2015NewLine{Di2015NewLine    List<int> nu = new List<int>();Di2015NewLine    nu.Add(2);Di2015NewLine    nu.Add(1);Di2015NewLine    nu.Add(3);Di2015NewLine    nu.Add(5);Di2015NewLine    nu.Add(2);Di2015NewLine    nu.Add(1);Di2015NewLine    nu.Add(1);Di2015NewLine    nu.Add(3);Di2015NewLineDi2015NewLine    var result  = nu .Aggregate(Di2015NewLine       new LinkedList<Less7Holder>(),Di2015NewLine       (holder,inItem) => Di2015NewLine       {Di2015NewLine          if ((holder.Last == null) || (holder.Last.Value.mySum + inItem >= 7))Di2015NewLine          {Di2015NewLine            Less7Holder t = new Less7Holder();Di2015NewLine            t.g.Add(inItem);Di2015NewLine            t.mySum = inItem;Di2015NewLine            holder.AddLast(t);Di2015NewLine          }Di2015NewLine          elseDi2015NewLine          {Di2015NewLine            holder.Last.Value.g.Add(inItem);Di2015NewLine            holder.Last.Value.mySum += inItem;Di2015NewLine          }Di2015NewLine          return holder;Di2015NewLine       },Di2015NewLine       (holder) => { return holder.Select((h) => h.g );} );Di2015NewLineDi2015NewLine   result.Dump();Di2015NewLineDi2015NewLine}Di2015NewLine
11760343Di2015UniqueSeparatorText
11760343Di2015UniqueSeparatorError.Text = "";
11760343Di2015UniqueSeparatorelse
11760396Di2015UniqueSeparatornamespace MyNamespace.ClassToTestDi2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
11760457Di2015UniqueSeparatorstring fullName = "MYMACHINE.mydomain.com";Di2015NewLinestring resolvedMachineName = fullName.Split('.')[0];Di2015NewLine
11760537Di2015UniqueSeparatordouble* vertices = (double*)Marshal.AllocHGlobal(Di2015NewLine                          3 * count *  Marshal.SizeOf(typeof(double)));Di2015NewLine
11760537Di2015UniqueSeparator Marshal.FreeHGlobal((IntPtr)vertices);Di2015NewLine
11760570Di2015UniqueSeparatorlistOfPairs.Select(p => new []{ p.First }.Concat(p.Second).ToList()).ToList()Di2015NewLine
11760598Di2015UniqueSeparatorDispose
11760605Di2015UniqueSeparatorpublic class BankPageModel : System.ComponentModel.DataAnnotations.IValidatableObjectDi2015NewLine{Di2015NewLine    public bool AccountRequired { get; set; }Di2015NewLine    public Account NewAccount { get; set; }Di2015NewLineDi2015NewLine    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)Di2015NewLine    {Di2015NewLine        // only perform validation here if account required is checkedDi2015NewLine        if (this.AccountRequired)Di2015NewLine        {Di2015NewLine            // check your regex here for accountDi2015NewLine            if (!RegEx.IsMatch(this.NewAccount.AccountCode, "EXPRESSION"))Di2015NewLine            {Di2015NewLine                yield return new ValidationResult("Error");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}     Di2015NewLine
11760683Di2015UniqueSeparatorJsonConvert.SerializeObject(this, Formatting.None, new IsoDateTimeConverter() { DateTimeFormat = "yyyy-MM-dd hh:mm:ss" });Di2015NewLine
11760686Di2015UniqueSeparator<%# MyProperty %>Di2015NewLine
11760686Di2015UniqueSeparatorPage.DataBind()
11760686Di2015UniqueSeparator<%= MyProperty %>Di2015NewLine
11760686Di2015UniqueSeparatorPage.DataBind()
11760716Di2015UniqueSeparatorfor
11760716Di2015UniqueSeparatorfor (int i = myCollection.Count - 1; i >= 0; i--)Di2015NewLine{Di2015NewLine    var item = myCollection[i];Di2015NewLine    if (ShouldDelete(item))Di2015NewLine    {Di2015NewLine        item.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11760874Di2015UniqueSeparatorsock.Receive(buf, 1024, 0);Di2015NewLine
11760874Di2015UniqueSeparatorsock.Receive(buf,buf.Length,0);Di2015NewLine
11760951Di2015UniqueSeparator<TreeViewItem Header="{Binding TagClassMagic}" />Di2015NewLine<TreeViewItem Header="{Binding TagFileName}" />Di2015NewLine
11760982Di2015UniqueSeparatorBegin
11760982Di2015UniqueSeparatorStop
11760982Di2015UniqueSeparatorsb
11760982Di2015UniqueSeparatorpublic class MainWindowDi2015NewLine{Di2015NewLine    private Storyboard sb = new Storyboard();Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
11761079Di2015UniqueSeparatorDate
11761079Di2015UniqueSeparator==
11761079Di2015UniqueSeparatorDate
11761079Di2015UniqueSeparatorgetTime()
11761103Di2015UniqueSeparatorContactItem
11761103Di2015UniqueSeparatorExplorer.Selection
11761103Di2015UniqueSeparatorContactItem
11761103Di2015UniqueSeparatorContactItems
11761103Di2015UniqueSeparatorOutlook.Selection selection = Globals.ThisAddIn.Application.ActiveExplorer().Selection;Di2015NewLineif (selection.OfType<Outlook.ContactItem>().Count() == 1) // only support single item selectionDi2015NewLine{Di2015NewLine  Outlook.ContactItem contact = selection.OfType<Outlook.ContactItem>().FirstOrDefault();Di2015NewLine  string name = contact.FullName;Di2015NewLine  string company = contact.CompanyName;Di2015NewLine  string address = contact.BusinessAddress;Di2015NewLine}Di2015NewLine
11761107Di2015UniqueSeparatorTimer
11761107Di2015UniqueSeparatorTick
11761122Di2015UniqueSeparatorfrom o in dc.OrdersDi2015NewLinegroup o by new { o.Product.ProdName, o.Size.Size } into gDi2015NewLineselect new { g.Key.ProdName, g.Key.Size, Total = g.Sum(or => or.Qty))};Di2015NewLine
11761312Di2015UniqueSeparator(listView2.Columns.Add("Item Column", -2, HorizontalAlignment.Left);)
11761312Di2015UniqueSeparatorlistView2.View = View.Details;
11761410Di2015UniqueSeparatorprivate void login_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string username = uname.Text;Di2015NewLine    string password = pword.Text;Di2015NewLine    string url = "THE SITE URL HERE";Di2015NewLine    var req = (HttpWebRequest)WebRequest.Create(url);Di2015NewLine    req.Credentials = new NetworkCredential(username, password);Di2015NewLine    var response = req.GetResponse();Di2015NewLine    //Do Stuff with responseDi2015NewLine}Di2015NewLine
11761446Di2015UniqueSeparator<asp:TextBox ID="txtDate" runat="server"></asp:TextBox>Di2015NewLine
11761446Di2015UniqueSeparator $(document).ready(function() {Di2015NewLine    $('#<%= txtDate.ClientID %>').val('<%=(System.DateTime.Now).ToString()%>');Di2015NewLine  });Di2015NewLine
11761446Di2015UniqueSeparator  $(document).ready(function () {Di2015NewLine        $('#<%= lblDate.ClientID %>').text('<%=(System.DateTime.Now).ToString()%>');Di2015NewLine    });Di2015NewLine
11761446Di2015UniqueSeparator <asp:Label ID="lblDate" runat="server"></asp:Label>Di2015NewLine
11761487Di2015UniqueSeparatorpens
11761487Di2015UniqueSeparatorvar colors = pens.SelectMany(p=>p.Colors).Distinct(); Di2015NewLinevar commonColors = db.Pencils.SelectMany (p => p.Colors.Where(c=>colors.Contains(c))).Distinct()Di2015NewLine
11761487Di2015UniqueSeparatorpen
11761487Di2015UniqueSeparatorvar colors = pen.Colors;Di2015NewLinevar commonColors = db.Pencils.SelectMany (p => p.Colors.Where(c=>colors.Contains(c))).Distinct()Di2015NewLine
11761567Di2015UniqueSeparatorint NumberOfRecordsToRetrieve = 10000;Di2015NewLineint StartRecordNumber = 1;Di2015NewLinebool EndOfFile = false;Di2015NewLineDi2015NewLine string queryString = "SELECT OrderID, CustomerID FROM Orders WHERE RECNO() BETWEEN @StartRecordNumber AND @EndRecordNumber"; Di2015NewLineDi2015NewLineWhile (!EndOfFile)Di2015NewLine{Di2015NewLine     using (OleDbConnection connection = new OleDbConnection(connectionString)) Di2015NewLine     { Di2015NewLine         OleDbCommand command = new OleDbCommand(queryString, connection); Di2015NewLine         command.Parameters.Add(new OleDbParameter("@StartRecordNumber", StartRecordNumber)); Di2015NewLine         command.Parameters.Add(new OleDbParameter("@EndRecordNumber", StartRecordNumber + NumberOfRecordsToRetrieve)); Di2015NewLineDi2015NewLine         connection.Open(); Di2015NewLine         OleDbDataReader reader = command.ExecuteReader(); Di2015NewLineDi2015NewLine          EndOfFile = true;Di2015NewLine          while (reader.Read()) Di2015NewLine          { Di2015NewLine               EndOfFile = falseDi2015NewLineDi2015NewLine               //Retrieve records here and do whatever process you wish to doDi2015NewLine           } Di2015NewLine           reader.Close(); Di2015NewLineDi2015NewLine           StartRecordNumber += NumberOfRecordsToRetrieve;Di2015NewLine     } Di2015NewLine}Di2015NewLine
11761620Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Web.Services;Di2015NewLineusing System.Data.SqlClient;Di2015NewLineusing System.Configuration;Di2015NewLineusing System.Data;Di2015NewLineDi2015NewLineDi2015NewLine[WebService]Di2015NewLine[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Di2015NewLine[System.Web.Script.Services.ScriptService]Di2015NewLinepublic class AutoComplete : WebServiceDi2015NewLine{Di2015NewLine    public AutoComplete()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLine    public string[] GetCompletionList(string prefixText, int count)Di2015NewLine    {Di2015NewLine        if (count == 0)Di2015NewLine        {Di2015NewLine            count = 10;Di2015NewLine        }Di2015NewLine        DataTable dt = GetRecords(prefixText);Di2015NewLine        List<string> items = new List<string>(count);Di2015NewLine        for (int i = 0; i < dt.Rows.Count; i++)Di2015NewLine        {Di2015NewLine            string strName = dt.Rows[i][0].ToString();Di2015NewLine            items.Add(strName);Di2015NewLine        }Di2015NewLine        return items.ToArray();Di2015NewLine    }Di2015NewLineDi2015NewLine    public DataTable GetRecords(string strName)Di2015NewLine    {Di2015NewLine        string strConn = ConfigurationManager.ConnectionStrings["ProjectASPConnectionString"].ConnectionString;Di2015NewLine        SqlConnection con = new SqlConnection(strConn);Di2015NewLine        SqlCommand cmd = new SqlCommand();Di2015NewLine        cmd.Connection = con;Di2015NewLine        cmd.CommandType = System.Data.CommandType.Text;Di2015NewLine        cmd.Parameters.AddWithValue("@issueno", strName); ///What name to place hereDi2015NewLine        cmd.CommandText = string.Format("Select distinct issueno as issueno from cet_sepcet where issueno like '{0}%'", strName); //what command to write hereDi2015NewLine        DataSet objDs = new DataSet();Di2015NewLine        SqlDataAdapter dAdapter = new SqlDataAdapter();Di2015NewLine        dAdapter.SelectCommand = cmd;Di2015NewLine        con.Open();Di2015NewLine        dAdapter.Fill(objDs);Di2015NewLine        con.Close();Di2015NewLine        return objDs.Tables[0];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11761636Di2015UniqueSeparator a = b = .... = y = z = "69";Di2015NewLine
11761636Di2015UniqueSeparatorint a,b,c,d......,z;Di2015NewLinea = b = .... = y = z = 69;Di2015NewLine
11761744Di2015UniqueSeparatorclass Config<T> where T: class, new()Di2015NewLine{Di2015NewLine  private T _configuration;Di2015NewLineDi2015NewLine  public static implicit operator T(Config cfg)Di2015NewLine  {Di2015NewLine    return cfg._configuration;Di2015NewLine  }Di2015NewLine}Di2015NewLine
11761744Di2015UniqueSeparatorvar config = new Config<SomeClass>();Di2015NewLineSomeClass realConfig = config;Di2015NewLine
11761781Di2015UniqueSeparatorHtmlEncode = false
11761781Di2015UniqueSeparatorforeach
11761781Di2015UniqueSeparatorrow['link'] = "<a href='..'>..</a>"
11761781Di2015UniqueSeparator<asp:TemplateField HeaderText="Seniority">Di2015NewLine    <ItemTemplate>Di2015NewLine        <a href='example.com/<%# Eval("name")) %>'><%# Eval("name")) %></a>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
11761934Di2015UniqueSeparatorpanel.SendToBack();Di2015NewLine
11761934Di2015UniqueSeparatorcustomControl.BringToFront();Di2015NewLine
11761973Di2015UniqueSeparator        public override void DataBind()Di2015NewLine        {Di2015NewLine             ...Di2015NewLine             GridViewDataTextColumn myCol = new GridViewDataTextColumn();Di2015NewLine             myCol.Caption = "col1";Di2015NewLine             myCol.FieldName = "dataTableField1";Di2015NewLine             myCol.DataItemTemplate = new ColumnDataItemTemplate();Di2015NewLine             theGridView.Columns.Clear();Di2015NewLine             theGridView.Columns.Add(myCol);Di2015NewLine             theGridView.DataSource = AdjustDataSource();Di2015NewLine             theGridView.DataBind();Di2015NewLine             ...Di2015NewLine        }Di2015NewLineDi2015NewLine        public class ColumnDataItemTemplate : ITemplateDi2015NewLine        {Di2015NewLine            public void InstantiateIn(Control container)Di2015NewLine            {Di2015NewLine                GridViewDataItemTemplateContainer Container = (container as GridViewDataItemTemplateContainer);Di2015NewLine                LiteralControl lit = new LiteralControl("<div id='hr' style='height:100%; font-size:x-large;'>" + DataBinder.Eval(Container.DataItem, Container.Column.FieldName) + "</div>");Di2015NewLine                Container.Controls.Add(lit);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11762040Di2015UniqueSeparatorIOException
11762040Di2015UniqueSeparatorDelete()
11762040Di2015UniqueSeparatorDelete
11762040Di2015UniqueSeparatorCopy
11762040Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    if(!IsFileLocked(f))Di2015NewLine    {Di2015NewLine        f.Delete();Di2015NewLine        fTemp.MoveTo(f.FullName);Di2015NewLine        Console.WriteLine("INFO: Old file deleted new file moved in > {0}", f.FullName);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected virtual bool IsFileLocked(FileInfo file)Di2015NewLine{Di2015NewLine    FileStream stream = null;Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine    stream = file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None);Di2015NewLine    }Di2015NewLine    catch (IOException)Di2015NewLine    {Di2015NewLine    //the file is unavailable because it is:Di2015NewLine    //still being written toDi2015NewLine    //or being processed by another threadDi2015NewLine    //or does not exist (has already been processed)Di2015NewLine    return true;Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine    if (stream != null)Di2015NewLine        stream.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    //file is not lockedDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
11762212Di2015UniqueSeparatorstatic Logger log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);Di2015NewLine
11762212Di2015UniqueSeparatorprotected void Application_Error(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        sb.Append("Unhandled error occured in application. Sender: ");Di2015NewLine        sb.AppendLine(Request.RawUrl);Di2015NewLine        sb.Append("Query: ");Di2015NewLine        sb.AppendLine(Request.QueryString.ToString());Di2015NewLineDi2015NewLine        Exception ex = Server.GetLastError().GetBaseException();Di2015NewLineDi2015NewLine        log.Error(sb.ToString(), ex);Di2015NewLine        Server.ClearError();Di2015NewLineDi2015NewLine        Response.Redirect("~/Error.aspx");Di2015NewLine    }Di2015NewLine
11762212Di2015UniqueSeparator<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>Di2015NewLine
11762212Di2015UniqueSeparator<log4net configSource="log.config"/>Di2015NewLine
11762246Di2015UniqueSeparatorDataGridViewComboBoxColumn
11762246Di2015UniqueSeparatorAutoGenerateColumns
11762309Di2015UniqueSeparatorif(dataTable.AsEnumerable().Select(row => row["Data2"]).Distinct().Count() > 1)Di2015NewLine{Di2015NewLine    // Make column invisibleDi2015NewLine}Di2015NewLine
11762337Di2015UniqueSeparatorx
11762337Di2015UniqueSeparator\\n
11762346Di2015UniqueSeparatorprivate void textBoxURL_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            foreach (DsVersions.ASSEMBLY2Row row in dsVersions.ASSEMBLY2.Rows)Di2015NewLine            {Di2015NewLine                row.URL = textBoxURL.Text;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11762499Di2015UniqueSeparator<Button.Style>Di2015NewLine    <Style TargetType="{x:Type Button}">Di2015NewLine        <Setter Property="IsEnabled" Value="True" />Di2015NewLine        <Style.Triggers>Di2015NewLine            <MultiDataTrigger>Di2015NewLine                <MultiDataTrigger.Conditions>Di2015NewLine                    <Condition Binding="{Binding Text, ElementName=textBox1}" Value="{x:Static s:String.Empty}" />Di2015NewLine                    <Condition Binding="{Binding Text, ElementName=textBox2}" Value="{x:Static s:String.Empty}" />Di2015NewLine                    <Condition Binding="{Binding Text, ElementName=TextBoxAge}" Value="{x:Static s:String.Empty}" />Di2015NewLine                </MultiDataTrigger.Conditions>Di2015NewLine                <Setter Property="IsEnabled" Value="False" />Di2015NewLine            </MultiDataTrigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</Button.Style>Di2015NewLine
11762499Di2015UniqueSeparatorxmlns:s="clr-namespace:System;assembly=mscorlib"Di2015NewLine
11762499Di2015UniqueSeparator<Button.Style>Di2015NewLine    <Style TargetType="{x:Type Button}">Di2015NewLine        <Style.Resources>Di2015NewLine            <local:MyTextValidationConverter x:Key="MyTextValidationConverter" />Di2015NewLine        </Style.Resources>Di2015NewLine        <Setter Property="IsEnabled">Di2015NewLine            <Setter.Value>Di2015NewLine                <MultiBinding Converter="{StaticResource MyTextValidationConverter}">Di2015NewLine                    <Binding Path="Text" ElementName="textBox1" />Di2015NewLine                    <Binding Path="Text" ElementName="textBox2" />Di2015NewLine                </MultiBinding>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine</Button.Style>Di2015NewLine
11762499Di2015UniqueSeparatorpublic class MyTextValidationConverter : IMultiValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        string text1 = values[0] as string;Di2015NewLine        if (string.IsNullOrEmpty(text1)) return false;Di2015NewLineDi2015NewLine        string text2 = values[1] as string;Di2015NewLine        if (string.IsNullOrEmpty(text2)) return false;Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11762645Di2015UniqueSeparatorBlockingCollection<T>
11762645Di2015UniqueSeparatorGetConsumingEnumerable()
11762748Di2015UniqueSeparatorDocumentStore
11762762Di2015UniqueSeparatorSELECT (tblUser.FirstName + ' ' + tblUser.LastName) AS 'UserFullName' Di2015NewLineFROM tblUserDi2015NewLine
11762762Di2015UniqueSeparatorSELECT (tblUser.FirstName + ' ' + tblUser.LastName) AS UserFullName Di2015NewLineFROM tblUserDi2015NewLine
11762762Di2015UniqueSeparatorAS
11762881Di2015UniqueSeparatorif value < 50Di2015NewLine  switchDi2015NewLine    ...Di2015NewLine  endDi2015NewLineelse if value < 100Di2015NewLine  switchDi2015NewLine    ...Di2015NewLine  endDi2015NewLineelseDi2015NewLine  ...Di2015NewLineendDi2015NewLine
11763023Di2015UniqueSeparatorExampleClass exampleClass = new ExampleClass() {Di2015NewLine    property1 = "hello",Di2015NewLine    property2 = "world"Di2015NewLine};Di2015NewLine
11763023Di2015UniqueSeparatorExampleClass exampleClass = new ExampleClass();Di2015NewLineexampleClass.property1 = "hello";Di2015NewLineexampleClass.property2 = "world";Di2015NewLine
11763306Di2015UniqueSeparatorasync void RunJobAndShowSuccessMessage()Di2015NewLine{Di2015NewLine     await Database.RunJob();Di2015NewLine     MessageBox.Show("Hi, the job is done!");Di2015NewLine}Di2015NewLine
11763306Di2015UniqueSeparatorasync void RunJobAndShowSuccessMessage()Di2015NewLine{Di2015NewLine    // Spawn a task to run in the background.Di2015NewLine    await Task.Factory.Start(() => Database.RunJob());Di2015NewLine    MessageBox.Show("Hi, the job is done!");Di2015NewLine}Di2015NewLine
11763451Di2015UniqueSeparatorforeach
11763451Di2015UniqueSeparator<table style="width:65%; vertical-align:top" id="sample">Di2015NewLine    <%= Html.EditorFor(x => x.Properties) %>Di2015NewLine</table>Di2015NewLine
11763451Di2015UniqueSeparator~/Views/Shared/EditorTemplates/PropertyModel.ascx
11763451Di2015UniqueSeparator<%@ Control Di2015NewLine    Language="C#" Di2015NewLine    AutoEventWireup="true" Di2015NewLine    Inherits="System.Web.Mvc.ViewUserControl<PropertyModel>" Di2015NewLine%>Di2015NewLine<tr>Di2015NewLine    <td>Di2015NewLine        <%= Html.LabelFor(x => x.ParameterName) %>Di2015NewLine    </td>Di2015NewLine    <td>:</td>Di2015NewLine    <td>Di2015NewLine        <%= Html.TextBoxFor(x => x.ParameterName) %>Di2015NewLine    </td>Di2015NewLine</tr>Di2015NewLine
11763646Di2015UniqueSeparatorvoid context_BeginRequest(object sender, EventArgs e) {Di2015NewLine    HttpApplication app = (HttpApplication)sender;Di2015NewLine    String url = app.Request.Url.OriginalString;Di2015NewLine}Di2015NewLine
11763699Di2015UniqueSeparatorBinding value = new Binding();         Di2015NewLinevalue.Source = (chart.Chart as GuiAnalogQueue);         Di2015NewLinevalue.Path = new PropertyPath("AnalogValue");Di2015NewLineneedle.SetBinding(Needle.ValueProperty, value); Di2015NewLine
11763703Di2015UniqueSeparatorvar allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures);Di2015NewLinevar random = new Random();Di2015NewLineint index = random.Next(0, allCultures.Length);Di2015NewLineDi2015NewLinevar culture = allCultures[index];Di2015NewLineDi2015NewLinestring twoLetterCode = culture.TwoLetterISOLanguageName;Di2015NewLine
11763703Di2015UniqueSeparatorvar uniqueCultureCodes = CultureInfo.GetCultures(CultureTypes.AllCultures)Di2015NewLine                      .Select(c => c.TwoLetterISOLanguageName)Di2015NewLine                      .Distinct()Di2015NewLine                      .ToList();Di2015NewLineDi2015NewLinevar random = new Random();Di2015NewLineint index = random.Next(0, uniqueCultureCodes.Count);Di2015NewLineDi2015NewLinestring twoLetterCode = uniqueCultureCodes[index];Di2015NewLine
11763703Di2015UniqueSeparatorCultureInfo
11763703Di2015UniqueSeparatorCultureInfo culture = new CultureInfo("en");Di2015NewLine
11763713Di2015UniqueSeparatorpublic void WebBrowser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e) Di2015NewLine{Di2015NewLine   var webBrowser = sender as WebBrowser;Di2015NewLine   webBrowser.DocumentCompleted -= WebBrowser_DocumentCompleted;Di2015NewLine   MessageBox.Show(webBrowser.Url.ToString() );Di2015NewLine}    Di2015NewLineDi2015NewLineprivate void navBtnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     var wbrowser = new WebBrowser();Di2015NewLine     wbrowser.DocumentCompleted +=new WebBrowserDocumentCompletedEventHandler(WebBrowser_DocumentCompleted);Di2015NewLine     wbrowser.Navigate("http://www.google.com");Di2015NewLine}Di2015NewLine
11763713Di2015UniqueSeparatorprivate void navBtnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     var browser = new WebBrowser();Di2015NewLine     var docCompleted = Observable.FromEventPattern<WebBrowserDocumentCompletedEventArgs>(browser, "DocumentCompleted")Di2015NewLine     docCompletedDi2015NewLine         .Take(1) // Take only one event firingDi2015NewLine         .Subscribe(i => MessageBox.Show(browser.Url.ToString()));Di2015NewLineDi2015NewLine     browser.Navigate("http://www.google.com");Di2015NewLine}Di2015NewLine
11763745Di2015UniqueSeparator// Simple Base64 conversion (using UTF8 for simplicity)Di2015NewLine// ========Di2015NewLineDi2015NewLine// Assume [sequences] is variable of type [Entities.Application]Di2015NewLinestring xmlString;Di2015NewLinevar xs = new XmlSerializer(typeof(Entities.Application));Di2015NewLineusing (var sw = new StringWriter())Di2015NewLine{Di2015NewLine    xs.Serialize(sw, sequences);Di2015NewLine    xmlString = sw.ToString();Di2015NewLine}Di2015NewLinestring encoded = System.Convert.ToBase64String(Di2015NewLine                    System.Text.Encoding.UTF8.GetBytes(xmlString));Di2015NewLineDi2015NewLine// Converting encoded [Entities.Application] to decoded XML string,Di2015NewLine// using some of your code for consistency.Di2015NewLinestring encoded;Di2015NewLineusing (TextReader textReader = new StreamReader(XMLFile))Di2015NewLine{Di2015NewLine    encoded = textReader.ReadToEnd();Di2015NewLine    textReader.Close();Di2015NewLine}Di2015NewLinestring decoded = System.Text.Encoding.UTF8.GetString(Di2015NewLine                    System.Convert.FromBase64String(encoded));Di2015NewLineXmlSerializer xmlSerializer = new XmlSerializer(typeof(Entities.Application));Di2015NewLineusing (var sr = new StringReader(decoded))Di2015NewLine{Di2015NewLine    sequences = (Entities.Application)xmlSerializer.Deserialize(sr);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine// Inserting Base64 in XmlElementDi2015NewLine// ========Di2015NewLineDi2015NewLine// Optional: the old MSXML.DOMDocument had nodeTypedValue, and youDi2015NewLine// can set the same attributes if you are going to use DOMDocument, althoughDi2015NewLine// it is still a good idea to tag the element so you know its datatype.Di2015NewLinenode.SetAttribute("xmlns:dt", "urn:schemas-microsoft-com:datatypes");Di2015NewLinenode.SetAttribute("dt", "urn:schemas-microsoft-com:datatypes", "bin.base64");Di2015NewLineDi2015NewLine// Assume serialized data has already been encoded as shown aboveDi2015NewLinevar elem = node.AppendChild(xmlDoc.CreateTextNode(encoded));Di2015NewLine
11763793Di2015UniqueSeparatorusing System.Net.Mail;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLine// namespace etcDi2015NewLineDi2015NewLineprivate void SendEmail()Di2015NewLine{Di2015NewLine    string to = "to@somewhere.com,to2@somewhere.com";Di2015NewLineDi2015NewLine    MailDefinition mailDefinition = new MailDefinition();Di2015NewLine    mailDefinition.IsBodyHtml = false;Di2015NewLineDi2015NewLine    string host = "smtpserver";  // Your SMTP server name.Di2015NewLine    string from = "from@somewhere.com";Di2015NewLine    int port = -1;               // Your SMTP port number. Defaults to 25.Di2015NewLineDi2015NewLine    mailDefinition.From = from;Di2015NewLine    mailDefinition.Subject = "Boring email";Di2015NewLine    mailDefinition.CC = "cc@somwhere.com,cc2@somwhere.com";Di2015NewLineDi2015NewLine    List<System.Net.Mail.Attachment> mailAttachments = new List<System.Net.Mail.Attachment>();Di2015NewLine    // Add any attachments hereDi2015NewLineDi2015NewLine    using (MailMessage mailMessage = mailDefinition.CreateMailMessage(to, null, "Email body", new System.Web.UI.Control()))Di2015NewLine    {Di2015NewLine        SmtpClient smtpClient = new SmtpClient(host);Di2015NewLine        if (port != -1)Di2015NewLine        {Di2015NewLine            smtpClient.Port = port;Di2015NewLine        }Di2015NewLine        foreach (System.Net.Mail.Attachment mailAttachment in mailAttachments)Di2015NewLine        {Di2015NewLine            mailMessage.Attachments.Add(mailAttachment);Di2015NewLine        }Di2015NewLine        smtpClient.Send(mailMessage);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11763883Di2015UniqueSeparatorstring line;Di2015NewLineList<string> stdList = new List<string>();Di2015NewLineDi2015NewLineStreamReader file = new StreamReader(myfile);Di2015NewLinewhile ((line = file.ReadLine()) != null)Di2015NewLine{Di2015NewLine    stdList.Add(line);Di2015NewLine    var trash = file.ReadLine();  //this advances to the next line, and doesn't do anything with the resultDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine}Di2015NewLine
11764031Di2015UniqueSeparatorthis.BackColor = Color.Red;Di2015NewLinethis.Size = new Size(1600, 900);Di2015NewLine
11764054Di2015UniqueSeparatorSystem.Security.AccessControl
11764054Di2015UniqueSeparatorRawSecurityDescriptor
11764054Di2015UniqueSeparatorRawAcl
11764054Di2015UniqueSeparatorRawSecurityDescriptor
11764054Di2015UniqueSeparatorRawAcl
11764054Di2015UniqueSeparatorSecurityDescriptor
11764054Di2015UniqueSeparatorRawSecurityDescriptor
11764054Di2015UniqueSeparatorctor
11764054Di2015UniqueSeparatorRawSecurityDescriptor
11764054Di2015UniqueSeparatorGetBinaryForm
11764121Di2015UniqueSeparatorDictionary<ALARM_ITEM, HashSet<ALARM_ITEM>>Di2015NewLine
11764121Di2015UniqueSeparatora
11764121Di2015UniqueSeparatork
11764121Di2015UniqueSeparatora
11764121Di2015UniqueSeparatork
11764121Di2015UniqueSeparatork
11764121Di2015UniqueSeparatorvalues
11764121Di2015UniqueSeparatora
11764121Di2015UniqueSeparator(a, values)
11764121Di2015UniqueSeparatora
11764121Di2015UniqueSeparatorb
11764121Di2015UniqueSeparatorb
11764121Di2015UniqueSeparatorc
11764121Di2015UniqueSeparatora
11764121Di2015UniqueSeparatorc
11764200Di2015UniqueSeparatorControl activeForm = this.FindForm();
11764200Di2015UniqueSeparator((Form1)activeForm).clickTimer.Start();Di2015NewLine
11764209Di2015UniqueSeparatorforeach (Action<object[]> action in taskQueue.GetConsumingEnumerable())Di2015NewLine    action(paramQueue[i]);Di2015NewLine
11764209Di2015UniqueSeparatorTask.Factory.StartNew(() =>Di2015NewLine{Di2015NewLine    foreach (Action<object[]> action in taskQueue.GetConsumingEnumerable())Di2015NewLine        action(paramQueue[i]);Di2015NewLine});Di2015NewLine
11764324Di2015UniqueSeparatorpublic interface IMine Di2015NewLine{ Di2015NewLine  [DispId(1)]Di2015NewLine  [return: MarshalAs(UnmanagedType.Struct, SafeArraySubType = VarEnum.VT_ARRAY)]  Di2015NewLine  object stringSize(string txt, string fontName, float fontSize) Di2015NewLine  { Di2015NewLine    // stuff...Di2015NewLine  } Di2015NewLine} Di2015NewLine
11764480Di2015UniqueSeparatorVehicle
11764480Di2015UniqueSeparatorpublic static IEnumerable<T> FilterByColor<T>(this IEnumerable<T> source, Di2015NewLine    string color) where T : VehicleDi2015NewLine{Di2015NewLine    return source.Where(q => q.Color == color);Di2015NewLine}Di2015NewLine
11764534Di2015UniqueSeparatorload()
11764534Di2015UniqueSeparatorHTML
11764534Di2015UniqueSeparatorjavascript
11764534Di2015UniqueSeparator//Include jQuery libraryDi2015NewLine<div>Di2015NewLine  <a href="Home/about" class="aLink" >About</a>Di2015NewLine  <a href="Home/FAQ" class="aLink" >FAQ</a>Di2015NewLine  <a href="Home/Contact" class="aLink" >Contact</a>Di2015NewLine</div>Di2015NewLine<div id="mainContent">Di2015NewLineDi2015NewLineDi2015NewLine</div>Di2015NewLineDi2015NewLine<script type="text/javascript">Di2015NewLine $(function(){Di2015NewLine    $("a.aLink").click(function(e){Di2015NewLine       e.preventDefault();  // prevent the default navigation behaviourDi2015NewLine       $("#mainContent").load($(this).attr("href"));Di2015NewLine    });Di2015NewLine });Di2015NewLineDi2015NewLine</script>Di2015NewLine
11764797Di2015UniqueSeparatorNaturalDuration.HasTimeSpan
11765009Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        foreach (string x in EndlessBase64Sequence())Di2015NewLine        {Di2015NewLine            Console.WriteLine(x);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static char NextBase36Char(char c)Di2015NewLine    {Di2015NewLine        if ((c >= '0' && c <= '8') ||Di2015NewLine            (c >= 'A' && c <= 'Z'))Di2015NewLine        {Di2015NewLine            return (char) (c + 1);Di2015NewLine        }Di2015NewLine        if (c == '9')Di2015NewLine        {Di2015NewLine            return 'A';Di2015NewLine        }Di2015NewLine        throw new ArgumentException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IEnumerable<string> EndlessBase64Sequence()Di2015NewLine    {Di2015NewLine        char[] chars = { '0' };Di2015NewLineDi2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            yield return new string(chars);Di2015NewLineDi2015NewLine            // Move to the next one...Di2015NewLine            bool done = false;Di2015NewLine            for (int position = chars.Length - 1; position >= 0; position--)Di2015NewLine            {Di2015NewLine                if (chars[position] == 'Z')Di2015NewLine                {Di2015NewLine                    chars[position] = '0';Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    done = true;Di2015NewLine                    chars[position] = NextBase36Char(chars[position]);Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            // Need to expand?Di2015NewLine            if (!done)Di2015NewLine            {Di2015NewLine                chars = new char[chars.Length + 1];Di2015NewLine                chars[0] = '1';Di2015NewLine                for (int i = 1; i < chars.Length; i++)Di2015NewLine                {Di2015NewLine                    chars[i] = '0';Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11765038Di2015UniqueSeparatorpublic T DoSomething<T, TKey, TValue>(T dictionary) where T : IDictionary<TKey, TValue> { ... }Di2015NewLine
11765042Di2015UniqueSeparator    public void DoFizzBuzz()Di2015NewLine    {Di2015NewLine        var combinations = new List<Tuple<int, string>>Di2015NewLine        { Di2015NewLine            new Tuple<int, string> (3, "Fizz"), Di2015NewLine            new Tuple<int, string> (5, "Buzz"), Di2015NewLine        };Di2015NewLineDi2015NewLine        Func<int, int, bool> isMatch = (i, comb) => i % comb == 0;Di2015NewLine        for (int i = 1; i <= 100; i++)Di2015NewLine        {Di2015NewLine            Console.Write(i);Di2015NewLineDi2015NewLine            var matchingCombs = combinations.Where(c => isMatch(i, c.Item1)).ToList();Di2015NewLine            if (matchingCombs.Any())Di2015NewLine            {Di2015NewLine                Console.Write(string.Join("", matchingCombs.Select(c => c.Item2)));Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Console.Write(i);Di2015NewLine            }Di2015NewLine            Console.Write(Environment.NewLine);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11765042Di2015UniqueSeparatorcombinations
11765195Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLinenamespace templaten.com.TemplatenDi2015NewLine{Di2015NewLine    public class tRangeDi2015NewLine    {Di2015NewLine        public int head, toe;Di2015NewLineDi2015NewLine        public tRange(int _head, int _toe)Di2015NewLine        {Di2015NewLine            head = _head;Di2015NewLine            toe = _toe;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum ATypeDi2015NewLine    {Di2015NewLine        VALUE = 0,Di2015NewLine        NAME = 1,Di2015NewLine        OPEN = 2,Di2015NewLine        CLOSE = 3,Di2015NewLine        GROUP = 4Di2015NewLine    }Di2015NewLineDi2015NewLine    public class AtomDi2015NewLine    {Di2015NewLine        private AType kin;Di2015NewLine        private string tag;Di2015NewLine        private object data;Di2015NewLine        private List<Atom> bag;Di2015NewLineDi2015NewLine        public Atom(string _tag = "",Di2015NewLine                    AType _kin = AType.VALUE,Di2015NewLine                    object _data = null)Di2015NewLine        {Di2015NewLine            tag = _tag;Di2015NewLine            if (String.IsNullOrEmpty(_tag))Di2015NewLine                _kin = AType.GROUP;Di2015NewLine            kin = _kin;Di2015NewLineDi2015NewLine            if (_kin == AType.GROUP)Di2015NewLine                bag = new List<Atom>();Di2015NewLine            elseDi2015NewLine                bag = null;Di2015NewLineDi2015NewLine            data = _data;Di2015NewLine        }Di2015NewLineDi2015NewLine        public AType KinDi2015NewLine        {Di2015NewLine            get { return kin; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public string TagDi2015NewLine        {Di2015NewLine            get { return tag; }Di2015NewLine            set { tag = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public List<Atom> BagDi2015NewLine        {Di2015NewLine            get { return bag; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public object DataDi2015NewLine        {Di2015NewLine            get { return data; }Di2015NewLine            set { data = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public int Add(string _tag = "",Di2015NewLine                       AType _kin = AType.VALUE,Di2015NewLine                       object _data = null)Di2015NewLine        {Di2015NewLine            if (bag != null)Di2015NewLine            {Di2015NewLine                bag.Add(new Atom(_tag, _kin, _data));Di2015NewLine                return bag.Count - 1;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return -1;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TempletDi2015NewLine    {Di2015NewLine        private string content;Di2015NewLineDi2015NewLine        string namepat = "\\\\w+";Di2015NewLine        string justName = "(\\\\w+)";Di2015NewLineDi2015NewLine        string namePre = "@";Di2015NewLine        string namePost = "";Di2015NewLineDi2015NewLine        string comment0 = "\\\\<!--\\\\s*";Di2015NewLine        string comment1 = "\\\\s*--\\\\>";Di2015NewLineDi2015NewLine        private Atom tokens;                         // parsed contentsDi2015NewLine        private Dictionary<string, int> iNames;      // name indexDi2015NewLine        private Dictionary<string, tRange> iGroups;  // groups indexDi2015NewLineDi2015NewLine        private Atom buffer;                         // output bufferDi2015NewLine        private Dictionary<string, int> _iname;      // output name indexDi2015NewLine        private Dictionary<string, tRange> _igroup;  // output indexDi2015NewLineDi2015NewLine        public Templet(string Content = null)Di2015NewLine        {Di2015NewLine            Init(Content);Di2015NewLine        }Di2015NewLineDi2015NewLine        private int[] mark(string[] names, string group)Di2015NewLine        {Di2015NewLine            if (names == null || names.Length < 1) return null;Di2015NewLine            tRange t = new tRange(0, buffer.Bag.Count - 1);Di2015NewLine            if (group != null)Di2015NewLine            {Di2015NewLine                if (!_igroup.ContainsKey(group)) return null;Di2015NewLine                t = _igroup[group];Di2015NewLine            }Di2015NewLineDi2015NewLine            int[] marks = new int[names.Length];Di2015NewLineDi2015NewLine            for (int i = 0; i < marks.Length; i++)Di2015NewLine                marks[i] = -1;Di2015NewLineDi2015NewLine            for (int i = t.head; i <= t.toe; i++)Di2015NewLine            {Di2015NewLine                if (buffer.Bag[i].Kin == AType.NAME)Di2015NewLine                {Di2015NewLine                    for (int j = 0; j < names.Length; j++)Di2015NewLine                    {Di2015NewLine                        if (String.Compare(Di2015NewLine                            names[j],Di2015NewLine                            buffer.Bag[i].Tag,Di2015NewLine                            true) == 0)Di2015NewLine                        {Di2015NewLine                            marks[j] = i;Di2015NewLine                            break;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return marks;Di2015NewLine        }Di2015NewLineDi2015NewLine        public Filler Mark(string group, string names)Di2015NewLine        {Di2015NewLine            Filler f = new Filler(this, names);Di2015NewLine            f.di = mark(f.names, group);Di2015NewLine            f.Group = group;Di2015NewLine            tRange t = null;Di2015NewLine            if (_igroup.ContainsKey(group)) t = _igroup[group];Di2015NewLine            f.Range = t;Di2015NewLine            return f;Di2015NewLine        }Di2015NewLineDi2015NewLine        public Filler Mark(string names)Di2015NewLine        {Di2015NewLine            Filler f = new Filler(this, names);Di2015NewLineDi2015NewLine            f.di = mark(f.names, null);Di2015NewLine            f.Group = "";Di2015NewLine            f.Range = null;Di2015NewLine            return f;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Set(int[] locations, object[] x)Di2015NewLine        {Di2015NewLine            int j = Math.Min(x.Length, locations.Length);Di2015NewLine            for (int i = 0; i < j; i++)Di2015NewLine            {Di2015NewLine                int l = locations[i];Di2015NewLineDi2015NewLine                if ((l >= 0) && (buffer.Bag[l] != null))Di2015NewLine                    buffer.Bag[l].Data = x[i];Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void New(string group, int seq = 0)Di2015NewLine        {Di2015NewLine            // place new group copied from old group just below itDi2015NewLineDi2015NewLine            if (!( iGroups.ContainsKey(group)Di2015NewLine                && _igroup.ContainsKey(group)Di2015NewLine                && seq > 0)) return;Di2015NewLineDi2015NewLine            tRange newT = null;Di2015NewLine            tRange t = iGroups[group];Di2015NewLine            int beginRange = _igroup[group].toe + 1;Di2015NewLineDi2015NewLine            for (int i = t.head; i <= t.toe; i++)Di2015NewLine            {Di2015NewLine                buffer.Bag.Insert(beginRange,Di2015NewLine                    new Atom(tokens.Bag[i].Tag,Di2015NewLine                        tokens.Bag[i].Kin,Di2015NewLine                        tokens.Bag[i].Data));Di2015NewLine                beginRange++;Di2015NewLine            }Di2015NewLineDi2015NewLine            newT = new tRange(t.toe + 1, t.toe + (t.toe - t.head + 1));Di2015NewLineDi2015NewLine            // rename past groupDi2015NewLine            string pastGroup = group + "_" + seq;Di2015NewLine            t = _igroup[group];Di2015NewLine            buffer.Bag[t.head].Tag = pastGroup;Di2015NewLine            buffer.Bag[t.toe].Tag = pastGroup;Di2015NewLineDi2015NewLine            _igroup[pastGroup] = t;Di2015NewLineDi2015NewLine            // change group indexesDi2015NewLine            _igroup[group] = newT;Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public void ReMark(Filler f, string group)Di2015NewLine        {Di2015NewLine            if (!_igroup.ContainsKey(group)) return;Di2015NewLine            Map(buffer, _iname, _igroup);Di2015NewLine            f.di = mark(f.names, group);Di2015NewLine            f.Range = _igroup[group];Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void Indexing(string aname,Di2015NewLine            AType kin,Di2015NewLine            int i,Di2015NewLine            Dictionary<string, int> dd,Di2015NewLine            Dictionary<string, tRange> gg)Di2015NewLine        {Di2015NewLine            switch (kin)Di2015NewLine            {Di2015NewLine                case AType.NAME: // index all namesDi2015NewLine                    dd[aname] = i;Di2015NewLine                    break;Di2015NewLine                case AType.OPEN: // index all groupsDi2015NewLine                    if (!gg.ContainsKey(aname))Di2015NewLine                        gg[aname] = new tRange(i, -1);Di2015NewLine                    elseDi2015NewLine                        gg[aname].head = i;Di2015NewLine                    break;Di2015NewLine                case AType.CLOSE:Di2015NewLine                    if (!gg.ContainsKey(aname))Di2015NewLine                        gg[aname] = new tRange(-1, i);Di2015NewLine                    elseDi2015NewLine                        gg[aname].toe = i;Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void Map(Atom oo,Di2015NewLine            Dictionary<string, int> dd,Di2015NewLine            Dictionary<string, tRange> gg)Di2015NewLine        {Di2015NewLineDi2015NewLine            for (int i = 0; i < oo.Bag.Count; i++)Di2015NewLine            {Di2015NewLine                string aname = oo.Bag[i].Tag;Di2015NewLine                Indexing(oo.Bag[i].Tag, oo.Bag[i].Kin, i, dd, gg);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Init(string Content = null)Di2015NewLine        {Di2015NewLine            content = Content;Di2015NewLineDi2015NewLine            tokens = new Atom("", AType.GROUP);Di2015NewLineDi2015NewLine            iNames = new Dictionary<string, int>();Di2015NewLine            iGroups = new Dictionary<string, tRange>();Di2015NewLineDi2015NewLine            // parse content into tokensDi2015NewLine            string namePattern = namePre + namepat + namePost;Di2015NewLine            string patterns =Di2015NewLine                "(?<var>" + namePattern + ")|" +Di2015NewLine                "(?<head>" + comment0 + namePattern + ":" + comment1 + ")|" +Di2015NewLine                "(?<toe>" + comment0 + ":" + namePattern + comment1 + ")";Di2015NewLine            Regex jn = new Regex(justName, RegexOptions.Compiled);Di2015NewLine            Regex r = new Regex(patterns, RegexOptions.Compiled);Di2015NewLine            MatchCollection ms = r.Matches(content);Di2015NewLine            int pre = 0;Di2015NewLine            foreach (Match m in ms)Di2015NewLine            {Di2015NewLine                tokens.Add(content.Substring(pre, m.Index - pre));Di2015NewLine                int idx = -1;Di2015NewLine                if (m.Groups.Count >= 3)Di2015NewLine                {Di2015NewLine                    string aname = "";Di2015NewLine                    MatchCollection x = jn.Matches(m.Value);Di2015NewLine                    if (x.Count > 0 && x[0].Groups.Count > 1)Di2015NewLine                        aname = x[0].Groups[1].ToString();Di2015NewLine                    AType t = AType.VALUE;Di2015NewLineDi2015NewLine                    if (m.Groups[1].Length > 0) t = AType.NAME;Di2015NewLine                    if (m.Groups[2].Length > 0) t = AType.OPEN;Di2015NewLine                    if (m.Groups[3].Length > 0) t = AType.CLOSE;Di2015NewLine                    if (aname.Length > 0)Di2015NewLine                    {Di2015NewLine                        tokens.Add(aname, t);Di2015NewLineDi2015NewLine                        idx = tokens.Bag.Count - 1;Di2015NewLine                    }Di2015NewLine                    Indexing(aname, t, idx, iNames, iGroups);Di2015NewLine                }Di2015NewLine                pre = m.Index + m.Length;Di2015NewLine            }Di2015NewLine            if (pre < content.Length)Di2015NewLine                tokens.Add(content.Substring(pre, content.Length - pre));Di2015NewLineDi2015NewLine            // copy tokens into bufferDi2015NewLine            buffer = new Atom("", AType.GROUP);Di2015NewLine            for (int i = 0; i < tokens.Bag.Count; i++)Di2015NewLine                buffer.Add(tokens.Bag[i].Tag, tokens.Bag[i].Kin);Di2015NewLineDi2015NewLine            // initialize index of output namesDi2015NewLine            _iname = new Dictionary<string, int>();Di2015NewLine            foreach (string k in iNames.Keys)Di2015NewLine                _iname[k] = iNames[k];Di2015NewLineDi2015NewLine            // initialize index of output groupsDi2015NewLine            _igroup = new Dictionary<string, tRange>();Di2015NewLine            foreach (string k in iGroups.Keys)Di2015NewLine            {Di2015NewLine                tRange t = iGroups[k];Di2015NewLine                _igroup[k] = new tRange(t.head, t.toe);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public string Get()Di2015NewLine        {Di2015NewLine            StringBuilder sb = new StringBuilder("");Di2015NewLine            for (int i = 0; i < buffer.Bag.Count; i++)Di2015NewLine            {Di2015NewLine                switch (buffer.Bag[i].Kin)Di2015NewLine                {Di2015NewLine                    case AType.VALUE:Di2015NewLine                        sb.Append(buffer.Bag[i].Tag);Di2015NewLine                        break;Di2015NewLine                    case AType.NAME:Di2015NewLine                        sb.Append(buffer.Bag[i].Data);Di2015NewLine                        break;Di2015NewLine                    case AType.OPEN:Di2015NewLine                    case AType.CLOSE:Di2015NewLine                        break;Di2015NewLine                    default: break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return sb.ToString();Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public class FillerDi2015NewLine    {Di2015NewLine        private Templet t = null;Di2015NewLineDi2015NewLine        public int[] di;Di2015NewLine        public string[] names;Di2015NewLine        public string Group { get; set; }Di2015NewLine        public tRange Range { get; set; }Di2015NewLine        private int seq = 0;Di2015NewLineDi2015NewLine        public Filler(Templet tl, string markers = null)Di2015NewLine        {Di2015NewLine            t = tl;Di2015NewLine            if (markers != null)Di2015NewLine                names = markers.Split(new char[] { ',' },Di2015NewLine                    StringSplitOptions.RemoveEmptyEntries);Di2015NewLine            elseDi2015NewLine                names = null;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void init(int length)Di2015NewLine        {Di2015NewLine            di = new int[length];Di2015NewLine            for (int i = 0; i < length; i++)Di2015NewLine                di[i] = -1;Di2015NewLine            seq = 0;Di2015NewLine            Group = "";Di2015NewLine            Range = null;Di2015NewLine        }Di2015NewLineDi2015NewLine        // clear contents inside marked object or groupDi2015NewLine        public void Clear()Di2015NewLine        {Di2015NewLine            object[] x = new object[di.Length];Di2015NewLine            for (int i = 0; i < di.Length; i++)Di2015NewLine                x[i] = null;Di2015NewLine            t.Set(di, x);Di2015NewLine        }Di2015NewLineDi2015NewLine        // set value for marked object,Di2015NewLine        // or add row to group and set value to columnsDi2015NewLine        public void Set(params object[] x)Di2015NewLine        {Di2015NewLine            t.Set(di, x);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Add(params object[] x)Di2015NewLine        {Di2015NewLine            if (Group.Length > 0)Di2015NewLine            {Di2015NewLine                t.New(Group, seq);Di2015NewLine                ++seq;Di2015NewLine                t.ReMark(this, Group);Di2015NewLine            }Di2015NewLineDi2015NewLine            t.Set(di, x);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11765195Di2015UniqueSeparatorTemplet m = new Templet(html);Di2015NewLineFiller f= m.Mark("title");Di2015NewLinef.Set("Phone book");Di2015NewLineFiller fcontacts = m.Mark("contacts", "id,name,sex,phone");Di2015NewLinefcontacts.Add(1, "Akhmad", "M", "123456");Di2015NewLinefcontacts.Add(2, "Barry", "M", "234567");Di2015NewLinefcontacts.Add(1, "Charles", "M", "345678");Di2015NewLineConsole.Out.WriteLine(m.Get());Di2015NewLine
11765242Di2015UniqueSeparatorHttpWebRequest
11765242Di2015UniqueSeparatorWebClient
11765242Di2015UniqueSeparatorpublic class CookiesAwareWebClient : WebClientDi2015NewLine{Di2015NewLine    private CookieContainer outboundCookies = new CookieContainer();Di2015NewLine    private CookieCollection inboundCookies = new CookieCollection();Di2015NewLineDi2015NewLine    public CookieContainer OutboundCookiesDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return outboundCookies;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public CookieCollection InboundCookiesDi2015NewLine    {Di2015NewLine        getDi2015NewLine        { Di2015NewLine            return inboundCookies; Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IgnoreRedirects { get; set; }Di2015NewLineDi2015NewLine    protected override WebRequest GetWebRequest(Uri address)Di2015NewLine    {Di2015NewLine        WebRequest request = base.GetWebRequest(address);Di2015NewLine        if (request is HttpWebRequest)Di2015NewLine        {Di2015NewLine            (request as HttpWebRequest).CookieContainer = outboundCookies;Di2015NewLine            (request as HttpWebRequest).AllowAutoRedirect = !IgnoreRedirects;Di2015NewLine        }Di2015NewLine        return request;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override WebResponse GetWebResponse(WebRequest request)Di2015NewLine    {Di2015NewLine        WebResponse response = base.GetWebResponse(request);Di2015NewLine        if (response is HttpWebResponse)Di2015NewLine        {Di2015NewLine            inboundCookies = (response as HttpWebResponse).Cookies ?? inboundCookies;Di2015NewLine        }Di2015NewLine        return response;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11765242Di2015UniqueSeparatorWebClient
11765242Di2015UniqueSeparatorpublic NameValueCollection LoginToDatrose()Di2015NewLine{Di2015NewLine    var loginUriBuilder = new UriBuilder();Di2015NewLine    loginUriBuilder.Host = DatroseHostName;Di2015NewLine    loginUriBuilder.Path = BuildURIPath(DatroseBasePath, LOGIN_PAGE);Di2015NewLine    loginUriBuilder.Scheme = "https";Di2015NewLineDi2015NewLine    var postData = new NameValueCollection();Di2015NewLine    postData.Add("LoginName", DatroseUserName);Di2015NewLine    postData.Add("Password", DatrosePassword);Di2015NewLineDi2015NewLine    var responseCookies = new NameValueCollection();Di2015NewLineDi2015NewLine    using (var client = new CookiesAwareWebClient())Di2015NewLine    {Di2015NewLine        client.IgnoreRedirects = true;Di2015NewLine        var clientResponse = client.UploadValues(loginUriBuilder.Uri, "POST", postData);Di2015NewLine        foreach (var nvp in client.InboundCookies.OfType<Cookie>())Di2015NewLine        {Di2015NewLine            responseCookies.Add(nvp.Name, nvp.Value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return responseCookies;Di2015NewLine}Di2015NewLine
11765313Di2015UniqueSeparatorpublic static byte[] ReadAllBytes(string path)Di2015NewLine{Di2015NewLinebyte[] buffer;Di2015NewLineDi2015NewLineusing (FileStream fs = new FileStream(path, FileMode.Open,Di2015NewLineFileAccess.Read, FileShare.Read))Di2015NewLine{Di2015NewLineint offset = 0;Di2015NewLineint count = (int)fs.Length;Di2015NewLinebuffer = new byte[count];Di2015NewLinewhile (count > 0)Di2015NewLine{Di2015NewLineint bytesRead = fs.Read(buffer, offset, count);Di2015NewLineoffset += bytesRead;Di2015NewLinecount -= bytesRead;Di2015NewLine}Di2015NewLine}Di2015NewLineDi2015NewLinereturn buffer;Di2015NewLine}Di2015NewLine
11765313Di2015UniqueSeparator    private void btnStudentPic_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Image picture = (Image)BrowseForPicture();Di2015NewLine        this.picStudent.Image = picture;Di2015NewLine        this.picStudent.SizeMode = PictureBoxSizeMode.StretchImage;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    /// <returns></returns>Di2015NewLine    private Bitmap BrowseForPicture()Di2015NewLine    {Di2015NewLine       // Bitmap picture = null;Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (this.fdlgStudentPic.ShowDialog() == DialogResult.OK)Di2015NewLine            {Di2015NewLine                byte[] imageBytes = File.ReadAllBytes(this.fdlgStudentPic.FileName);Di2015NewLine                StudentPic = new Bitmap( this.fdlgStudentPic.FileName);Di2015NewLine                StuInfo.StudentPic = imageBytes;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                StudentPic = Properties.Resources.NoPhotoAvailable;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception)Di2015NewLine        {Di2015NewLine            MessageBox.Show("That was not a picture.", "Browse for picture");Di2015NewLine            StudentPic = this.BrowseForPicture();Di2015NewLine        }Di2015NewLineDi2015NewLine        return StudentPic;Di2015NewLine    }Di2015NewLine
11765316Di2015UniqueSeparatorvar SearchColumn = from qua in QualDi2015NewLine               join del in deliverables on qua.Q_ID equals del.Q_ID into left_jDi2015NewLine                            from del in left_j.DefaultIfEmpty()Di2015NewLine                            select new { qua.Name + " " + qua.Project + " " + qua.Summary + " " + del.Name + " " + del.Summary).ToLower() };Di2015NewLineDi2015NewLineforeach (var f in searchFilter)Di2015NewLine{Di2015NewLine   var likestr = string.Format("%{0}%", f);Di2015NewLine   SearchColumn = SearchColumn.Where(x => SqlMethods.Like(x.Search_Col, likestr));Di2015NewLine}Di2015NewLine
11765369Di2015UniqueSeparatorusers
11765369Di2015UniqueSeparatoruser_group
11765369Di2015UniqueSeparatoruser_group
11765369Di2015UniqueSeparatorusers
11765369Di2015UniqueSeparatorvar result = users.user_group.FirstOrDefault().group;Di2015NewLine
11765369Di2015UniqueSeparatoruser_group
11765369Di2015UniqueSeparatorusers
11765369Di2015UniqueSeparatoruser_group
11765369Di2015UniqueSeparatorFirst
11765369Di2015UniqueSeparatorgroup
11765394Di2015UniqueSeparatorParallel.ForEach
11765394Di2015UniqueSeparatorParallel.ForEach(files, file => Di2015NewLine{Di2015NewLine    // Do stuff with one fileDi2015NewLine});Di2015NewLine
11765470Di2015UniqueSeparator ProcessStartInfo startInfo = new ProcessStartInfo()Di2015NewLine        {Di2015NewLine            WorkingDirectory = @"C:\\",Di2015NewLine            CreateNoWindow = false,Di2015NewLine            UseShellExecute = false,Di2015NewLine            RedirectStandardError = true,Di2015NewLine            RedirectStandardInput = true,Di2015NewLine            RedirectStandardOutput = trueDi2015NewLineDi2015NewLineDi2015NewLine        };Di2015NewLineDi2015NewLine        startInfo.FileName = "gpg.exe";Di2015NewLine        startInfo.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLine        startInfo.Arguments = @"-e -r myname c:\\MYPATH\\config.xml -o c:\\MYPATH\\config.xml.gpg";Di2015NewLine        using (Process exeProcess = Process.Start(startInfo))Di2015NewLine        {Di2015NewLineDi2015NewLine            exeProcess.WaitForExit();Di2015NewLine        }Di2015NewLine
11765482Di2015UniqueSeparatorpublic IEnumerable<AnEntity> Select(ISpecification<AnEntity> spec)Di2015NewLine{Di2015NewLine    return Session.Query<AnEntity>() Di2015NewLine        .Where(spec.Satisfies)Di2015NewLine        .ToList();Di2015NewLine}Di2015NewLine
11765482Di2015UniqueSeparatorQuery
11765482Di2015UniqueSeparatorNHibernate.Linq.LinqExtensionMethods.Query(this ISession session)
11765525Di2015UniqueSeparatorJsonConvert.DeserializeObject(Of tableT)(myJSON)Di2015NewLine
11765525Di2015UniqueSeparatorJsonConvert.DeserializeObject(Of List(Of Rows))(myJSON)Di2015NewLine
11765525Di2015UniqueSeparatorDim tableOBJ As New tableT Di2015NewLinetableOBJ.AllRows = JsonConvert.DeserializeObject(Of List(Of Rows))(myJSON)Di2015NewLine
11765525Di2015UniqueSeparator{"AllRows": [Di2015NewLine{"name":"fdgd","surname":"ssdt"},Di2015NewLine{"name":"fdsf","surname":"vn"},Di2015NewLine{"name":"dfsb","surname":"mry"},Di2015NewLine{"name":"hsdsdfry","surname":"smh"}Di2015NewLine]}Di2015NewLine
11765525Di2015UniqueSeparatorPublic Class tableTDi2015NewLineDi2015NewLine    Public Zero As New RowsDi2015NewLine    Public One As New RowsDi2015NewLine    Public Two As New RowsDi2015NewLine    Public Three As New RowsDi2015NewLine
11765525Di2015UniqueSeparator{Di2015NewLine"Zero":{"name":"fdgd","surname":"ssdt"},Di2015NewLine"One":{"name":"fdsf","surname":"vn"},Di2015NewLine"Two":{"name":"dfsb","surname":"mry"},Di2015NewLine"Three":{"name":"hsdsdfry","surname":"smh"}Di2015NewLine}Di2015NewLine
11765540Di2015UniqueSeparator                _width = imageSource.Width;Di2015NewLine                _height = imageSource.Height;Di2015NewLineDi2015NewLine                // There are rules for npot textures that we must abide by (wrap = ClampToEdge and filter = Nearest or Linear)Di2015NewLine                if (!MathHelper.IsPowerOfTwo(_width) || !MathHelper.IsPowerOfTwo(_height))Di2015NewLine                {Di2015NewLine                    //filter = ALL11.Linear;Di2015NewLine                    //wrap = ALL11.ClampToEdge;Di2015NewLine                    _width = (int)Math.Pow(2, Math.Min(10, Math.Ceiling(Math.Log10(imageSource.Width) / Math.Log10(2))));Di2015NewLine                    _height = (int)Math.Pow(2, Math.Min(10, Math.Ceiling(Math.Log10(imageSource.Height) / Math.Log10(2))));Di2015NewLine                }Di2015NewLine
11765540Di2015UniqueSeparatorfilter
11765540Di2015UniqueSeparatorwrap
11765540Di2015UniqueSeparatorSamplerState.LinearClamp
11765560Di2015UniqueSeparatorMain
11765560Di2015UniqueSeparatorIUnityContainer container = new UnityContainer();Di2015NewLineDi2015NewLine// register the singleton of your event aggregatorDi2015NewLinecontainer.RegisterType<IEventAggregator, EventAggregator>( new ContainerControlledLifetimeManager() ); Di2015NewLineDi2015NewLineServiceLocator.SetLocatorProvider( () => container );Di2015NewLine
11765560Di2015UniqueSeparatorvar eventAggregator = ServiceLocator.Current.GetInstance<IEventAggregator>();Di2015NewLine
11765560Di2015UniqueSeparatorpublic class CustomBootstrapper : UnityBootstrapper Di2015NewLine{Di2015NewLine}Di2015NewLine
11765560Di2015UniqueSeparatorvar bootstrapper = new CustomBootstrapper();Di2015NewLinebootstrapper.Run();Di2015NewLine
11765560Di2015UniqueSeparatorUnityBootstrapper
11765560Di2015UniqueSeparatorIEventAggregator
11765637Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System.Net;Di2015NewLineusing Newtonsoft.Json.Linq;Di2015NewLine
11765637Di2015UniqueSeparatorstring url = "https://graph.facebook.com/cocacola";Di2015NewLineWebClient client = new WebClient();Di2015NewLinestring jsonData = string.Empty;Di2015NewLineDi2015NewLine// Load the Facebook page infoDi2015NewLineConsole.WriteLine("Connecting to Facebook...");Di2015NewLineusing (Stream data = client.OpenRead(url))Di2015NewLine{Di2015NewLine    using (StreamReader reader = new StreamReader(data))Di2015NewLine    {Di2015NewLine        jsonData = reader.ReadToEnd();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Get number of likes from Json dataDi2015NewLineJObject jsonParsed = JObject.Parse(jsonData);Di2015NewLineint likes = (int)jsonParsed.SelectToken("likes");Di2015NewLineDi2015NewLine// Write out the resultDi2015NewLineConsole.WriteLine("Number of Likes: " + likes);Di2015NewLine
11765799Di2015UniqueSeparator    public  void ClearTextItems(ControlCollection controls)Di2015NewLine    {Di2015NewLine        foreach (Control c in controls)Di2015NewLine        {Di2015NewLine            if (c is System.Web.UI.WebControls.TextBox)Di2015NewLine            {Di2015NewLine                TextBox t = c as TextBox;Di2015NewLine                t.Text = string.Empty;Di2015NewLine            }Di2015NewLine        }Di2015NewLine     }Di2015NewLine
11765801Di2015UniqueSeparatorpublic class PlannedSpecialtyDi2015NewLine{Di2015NewLine   public IEnumerable<SelectListItem> SpecialtyItems { set;get;}Di2015NewLine   public int SelectedSpeciality { set;get;}Di2015NewLineDi2015NewLine  //Other PropertiesDi2015NewLine}Di2015NewLine
11765801Di2015UniqueSeparatorpublic PartialViewResult PlannedSpecialty()Di2015NewLine{ Di2015NewLine    var pgtServ = new PgtService();Di2015NewLine    var vm=new PlannedSpecialty();Di2015NewLine    vm.SpecialtyItems = pgtServ.GetPlannedSpecialtyDropDownItems();    Di2015NewLineDi2015NewLine   //just hard coding for demo. you may get the value from some source.  Di2015NewLine    vm.SelectedSpeciality=25;//  here you are setting the selected value.Di2015NewLine   return View(vm);Di2015NewLine}Di2015NewLine
11765801Di2015UniqueSeparatorHtml.DropDownListFor
11765801Di2015UniqueSeparator@Html.DropDownListFor(x=>x.SelectedSpeciality,Model.SpecialtyItems,"select one ")Di2015NewLine
11765914Di2015UniqueSeparatorevaluationfunction
11765951Di2015UniqueSeparatorpublic float VoltageRange { get; set; }Di2015NewLine
11765951Di2015UniqueSeparatorprivate float _voltageRange;Di2015NewLineprivate float VoltageRangeDi2015NewLine{Di2015NewLine    get { return _voltageRange + ((10F/100F)*_voltageRange); }Di2015NewLine    set { _voltageRange = value; }Di2015NewLine}Di2015NewLine
11765951Di2015UniqueSeparatorprivate float _voltageRange;Di2015NewLineprivate float VoltageRangeDi2015NewLine{Di2015NewLine    get { return (_voltageRange * 11) / 10; }Di2015NewLine    set { _voltageRange = value; }Di2015NewLine}Di2015NewLine
11765951Di2015UniqueSeparatorVoltageRange = VoltageRange;Di2015NewLine
11765951Di2015UniqueSeparatorprivate VoltageRange { get; set; }Di2015NewLineDi2015NewLineprivate EffectiveVoltageRange { get { return VoltageRange * 1.1f; } }Di2015NewLine
11765962Di2015UniqueSeparatorvar rows = from t1 in table1.AsEnumerable()Di2015NewLine           join t2 in table2.AsEnumerable() Di2015NewLine               on t1.Field<int>("COLA") equals t2.Field<int>("COLA") into tgDi2015NewLine           from tcheck in tg.DefaultIfEmpty()Di2015NewLine           where tcheck == nullDi2015NewLine           select t1Di2015NewLine
11765962Di2015UniqueSeparatortable2
11765962Di2015UniqueSeparatortable1
11765962Di2015UniqueSeparatorAny
11765962Di2015UniqueSeparatortable2
11765962Di2015UniqueSeparatortable1
11766027Di2015UniqueSeparatorfrom
11766027Di2015UniqueSeparatorfrom f in gDi2015NewLineselect fDi2015NewLine
11766027Di2015UniqueSeparator.GroupBy(...).SelectMany(g => g)
11766028Di2015UniqueSeparator<dxg:GridColumn FieldName="Patient.RoomTitleCase" />Di2015NewLine
11766028Di2015UniqueSeparatorpublic string RoomTitleCaseDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        System.Globalization.CultureInfo cultureInfo =     Di2015NewLine                 System.Threading.Thread.CurrentThread.CurrentCulture;Di2015NewLine        System.Globalization.TextInfo textInfo = cultureInfo.TextInfo;Di2015NewLineDi2015NewLine        string titleCase = textInfo.ToTitleCase(Room.ToLower());Di2015NewLine        return titleCase;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11766042Di2015UniqueSeparatorhh
11766042Di2015UniqueSeparatorHH
11766179Di2015UniqueSeparatorFunc<IEnumerator<T>>
11766179Di2015UniqueSeparatorpublic partial class ProcessesByStartTimeForm : Form {Di2015NewLineDi2015NewLine    // ... init stuffDi2015NewLineDi2015NewLine    public static readonly IEnumerable<object> ProcessQueryDi2015NewLine        = from p in new DeferredEnumerable<Process>(() => Process.GetProcesses())Di2015NewLine          let startTime = Eval.TryEvalOrDefault<DateTime?>(() => p.StartTime)Di2015NewLine          orderby startTimeDi2015NewLine          select new {Di2015NewLine              Process = p.ProcessName,Di2015NewLine              StartTime = startTime, // could be nullDi2015NewLine              Title = p.MainWindowTitleDi2015NewLine          };Di2015NewLineDi2015NewLine    class DeferredEnumerable<T> : IEnumerable<T> {Di2015NewLine        readonly Func<IEnumerable<T>> f;Di2015NewLineDi2015NewLine        public DeferredEnumerable(Func<IEnumerable<T>> f) {Di2015NewLine            this.f = f;Di2015NewLine        }Di2015NewLineDi2015NewLine        public IEnumerator<T> GetEnumerator() {Di2015NewLine            return this.f().GetEnumerator();Di2015NewLine        }Di2015NewLineDi2015NewLine        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {Di2015NewLine            return this.GetEnumerator();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11766244Di2015UniqueSeparatorprivate void UpdateTabularDataTable(SqlConnection connection)Di2015NewLine{Di2015NewLine      table.Columns.Add(Constants.RejectedUiColumnName, typeof(bool));Di2015NewLine      table.Columns.Add(Constants.RejectedReasonUiColumnName, typeof(string));Di2015NewLineDi2015NewLine      foreach (var row in table.Rows.Cast<DataRow>())Di2015NewLine      {Di2015NewLine        var contourId = (Guid)row.ItemArray[0];Di2015NewLineDi2015NewLine        // this is a Dictionary of objects which are rejected.  The others are accepted.Di2015NewLine        string rejectedReason;Di2015NewLine        var isRejected = _rejectedParticleReasonHolder.TryGetValue(contourId.ToString(), out rejectedReason);Di2015NewLineDi2015NewLine        row[Constants.RejectedUiColumnName] = isRejected;Di2015NewLine        row[Constants.RejectedReasonUiColumnName] = rejectedReason;Di2015NewLineDi2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
11766263Di2015UniqueSeparatorOnPaint
11766263Di2015UniqueSeparatorOnPaint
11766263Di2015UniqueSeparator// Put this in your constructor, or use VisualStudio to create the method for youDi2015NewLinethis.Paint += new System.Windows.Forms.PaintEventHandler(this.paint_Method);Di2015NewLineDi2015NewLineprivate void paint_Method(object sender, PaintEventArgs e)Di2015NewLine{ Di2015NewLine     gg = e.Graphics;Di2015NewLine     p3 = new Pen(Color.Blue,5);Di2015NewLine     b1 = new SolidBrush(Color.Red);Di2015NewLine     p2 = new Pen(Color.Red);Di2015NewLine     Font f=new Font("Arial",16);Di2015NewLine     float ox = this.ClientSize.Width / 2;Di2015NewLine     float oy = this.ClientSize.Height / 2;Di2015NewLine     gg.DrawLine(p3, ox - 500, oy, ox + 500, oy);Di2015NewLine     gg.DrawLine(p3, ox, oy + 300, ox, oy - 300);Di2015NewLine     gg.DrawString("Argument", f, b1, ox - 100, oy - 200);Di2015NewLine     gg.DrawString("<----f(Argument)---->", f, b1, ox + 100, oy + 100);Di2015NewLine     for (int i = 0; i < 1000; i++)Di2015NewLine     {Di2015NewLine         double tem1 = graphValuesCal();Di2015NewLine         double temp2 = functionCal();Di2015NewLine         gg.FillEllipse(b1, ox + (float)tem1/2,oy-20*(float)temp2, 5f, 5f);Di2015NewLine         // Thread.Sleep(10);Di2015NewLine     }Di2015NewLine}Di2015NewLine
11766263Di2015UniqueSeparatorthis.Invalidate()
11766263Di2015UniqueSeparatorgraphToolStripMenuItem_Click
11766286Di2015UniqueSeparatorFindsByAttribute
11766286Di2015UniqueSeparatorFinder
11766286Di2015UniqueSeparator// WARNING: Completely untested code here. Not guaranteed to Di2015NewLine// work correctly, or even to compile.Di2015NewLine[FindsBy(How = How.Id, Using = "test")]Di2015NewLinepublic IWebElement Test { get; set; }Di2015NewLine
11766286Di2015UniqueSeparator// WARNING: Completely untested code here. Not guaranteed to Di2015NewLine// work correctly, or even to compile.Di2015NewLine[FindsBy(How = How.XPath, Using = "//*[@id='test']/iframe")]Di2015NewLinepublic IWebElement Test { get; set; }Di2015NewLine
11766420Di2015UniqueSeparator!dlk
11766446Di2015UniqueSeparatorProperties.Settings.Default.Save();Di2015NewLine
11766468Di2015UniqueSeparatormd5()
11766468Di2015UniqueSeparator$token = md5('60703'); // d0e98b043981d95898b7aa85f8e4978fDi2015NewLine
11766492Di2015UniqueSeparatordouble dbl = reader.GetDouble(reader.GetOrdinal("DoubleColumn"));Di2015NewLine
11766492Di2015UniqueSeparatordouble dbl = (reader["DoubleColumn"] != DBNull.Value ? dr.GetDouble(dr.GetOrdinal("DoubleColumn")) : 0.0);Di2015NewLine
11766610Di2015UniqueSeparatorpublic class ViewModel {Di2015NewLine    [Required]Di2015NewLine    public string UserName { get; set; }Di2015NewLineDi2015NewLine    [Required, DataType(DataTypes.Password)]Di2015NewLine    public string Password { get; set; }Di2015NewLine}Di2015NewLine
11766610Di2015UniqueSeparatorpublic class LoginController : Controller {Di2015NewLine    [HttpGet]Di2015NewLine    public ActionResult Login() {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Login(LoginViewModel model) {Di2015NewLine        if( ModelState.IsValid ) {Di2015NewLine            if( Membership.ValidateUser(model.UserName, model.Password) ) {Di2015NewLine                FormsAuthentication.SetAuthCookie(model.UserName, false);Di2015NewLine                return Redirect("~/");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // If we got this far, something went wrong.Di2015NewLine        // Pass the model back to the view.Di2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11766610Di2015UniqueSeparator@Html.ValidationSummary()Di2015NewLineDi2015NewLineusing(@Html.BeginForm())Di2015NewLine{Di2015NewLine    @Html.EditorForModel()Di2015NewLine}Di2015NewLine
11766610Di2015UniqueSeparatorBeginForm
11766610Di2015UniqueSeparatorEditorForModel
11766610Di2015UniqueSeparatorEditorFor(model => model.UserName)
11766610Di2015UniqueSeparatorEditorFor(model => model.Password)
11766610Di2015UniqueSeparator<input type="text" name="UserName" />
11766610Di2015UniqueSeparatorHttpPost
11766677Di2015UniqueSeparatorloadTreeNode(TreeView.Nodes);Di2015NewLineDi2015NewLineprivate void loadTreeNode(TreeNodeCollection nodes)Di2015NewLine{Di2015NewLine  foreach (TreeNode node in nodes)Di2015NewLine   {Di2015NewLine      Trace.WriteLine(String.Format(node.Tag));Di2015NewLine      loadTreeNode(node.Nodes);Di2015NewLine   }Di2015NewLine}Di2015NewLine
11766719Di2015UniqueSeparatorpublic static IQueryable<T> WhereLike<T>(Di2015NewLine    this IQueryable<T> source,Di2015NewLine    string propertyName,Di2015NewLine    string pattern)Di2015NewLine{Di2015NewLine    if (null == source)Di2015NewLine        throw new ArgumentNullException("source");Di2015NewLine    if (string.IsNullOrEmpty(propertyName))Di2015NewLine        throw new ArgumentNullException("propertyName");Di2015NewLineDi2015NewLine    var a = Expression.Parameter(typeof(T), "a");Di2015NewLineDi2015NewLine    // Wrap the property access in a call to property.ToString()Di2015NewLine    var prop = Expression.Property(a, propertyName);Di2015NewLine    var conv = Expression.Call(prop, "ToString", null);Di2015NewLineDi2015NewLine    // Basically: SqlMethods.Like(Convert.ToString([prop]), pattern)Di2015NewLine    var body = Expression.Call(Di2015NewLine        typeof(SqlMethods), "Like", null,Di2015NewLine        conv,Di2015NewLine        Expression.Constant(pattern));Di2015NewLineDi2015NewLine    var fn = Expression.Lambda<Func<T, bool>>(body, a);Di2015NewLineDi2015NewLine    return source.Where(fn);Di2015NewLine}Di2015NewLine
11766760Di2015UniqueSeparator    public PageInfo PageInfo { get; set; }  Di2015NewLine    public string RequestID { get; set; }  Di2015NewLine    public string RequestDate { get; set; } Di2015NewLine    public List<OrderInfoListResponse> OrderInfoList { get; set; }  Di2015NewLine}Di2015NewLine
11766760Di2015UniqueSeparatorpublic class OrderListResponseBodyDi2015NewLine{Di2015NewLineDi2015NewLine    public PageInfo PageInfo { get; set; }  Di2015NewLine    public string RequestID { get; set; }  Di2015NewLine    public string RequestDate { get; set; } Di2015NewLine    public List<OrderInfo> OrderInfoList { get; set; }  <!-- notice the changeDi2015NewLine}Di2015NewLine
11766844Di2015UniqueSeparatorreturn RedirectToAction(MVC.Products.List(state, null));Di2015NewLine
11766844Di2015UniqueSeparatorreturn RedirectToRoute(new Di2015NewLine{Di2015NewLine    controller = "Products", Di2015NewLine    action = "List", Di2015NewLine    state = state,Di2015NewLine    city = null, Di2015NewLine});Di2015NewLine
11766844Di2015UniqueSeparatorRedirectToRoute
11766844Di2015UniqueSeparatorcity = null
11766844Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "products",Di2015NewLine    "products/in/{state}/{city}",Di2015NewLine    newDi2015NewLine    {Di2015NewLine        controller = "Products",Di2015NewLine        action = "List",Di2015NewLine        // state = UrlParameter.Optional, // only let the last parameter be optionalDi2015NewLine        city = UrlParameter.Optional Di2015NewLine    });Di2015NewLine
11766844Di2015UniqueSeparatorstate
11766844Di2015UniqueSeparatorroutes.MapRoute(null, // I never name my routesDi2015NewLine    "products/in/{state}",Di2015NewLine    newDi2015NewLine    {Di2015NewLine        controller = "Products",Di2015NewLine        action = "List",Di2015NewLine        state = UrlParameter.Optional Di2015NewLine    });Di2015NewLine
11767205Di2015UniqueSeparatorSelectMany
11767205Di2015UniqueSeparatorvar combined = list.Where(c => c.Flag)Di2015NewLine                   .SelectMany(c => new[] { c.Present, c.Previous });Di2015NewLineAssert.AreEqual(4, combined.Count());Di2015NewLine
11767349Di2015UniqueSeparatorResponse.Redirect
11767349Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!IsPostBack)Di2015NewLine        {Di2015NewLine            if (currItem.HasChildren || currItem.TemplateID == new Sitecore.Data.ID("45D58815-A301-4393-9BA0-30A00C9BB993"))Di2015NewLine            {Di2015NewLine                var getFirstChild = (from Item item in currItem.GetChildren()Di2015NewLine                                     select item).First();Di2015NewLine                if (getFirstChild.TemplateID == new Sitecore.Data.ID("45D58815-A301-4393-9BA0-30A00C9BB993") && getFirstChild != null)Di2015NewLine                {Di2015NewLine                    Response.Redirect(getFirstChild.Paths.Path);Di2015NewLine                }Di2015NewLineDi2015NewLine                elseDi2015NewLine                {Di2015NewLine                    //Load Generic Page!Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                //Load Generic Page!!!Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11767349Di2015UniqueSeparatorResponse
11767349Di2015UniqueSeparatorPage
11767425Di2015UniqueSeparatorfinally
11767536Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLineprivate static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);Di2015NewLineDi2015NewLine// console application entry pointDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    // check if process already runs, otherwise start itDi2015NewLine    if(Process.GetProcessesByName("OUTLOOK").Count().Equals(0))Di2015NewLine        Process.Start("OUTLOOK");Di2015NewLineDi2015NewLine    // get running processDi2015NewLine    var process = Process.GetProcessesByName("OUTLOOK").First();Di2015NewLineDi2015NewLine    // as long as the process is activeDi2015NewLine    while (!process.HasExited)Di2015NewLine    {Di2015NewLine        // title equals string.Empty as long as outlook is minimizedDi2015NewLine        // title starts with "Ã¶ffnen" (engl: opening) as long as the programm is loadingDi2015NewLine        string title = Process.GetProcessById(process.Id).MainWindowTitle;Di2015NewLineDi2015NewLine        // "posteingang" is german for inboxDi2015NewLine        if (title.ToLower().StartsWith("posteingang"))Di2015NewLine        {Di2015NewLine            // minimize outlook and end the loopDi2015NewLine            ShowWindowAsync(Process.GetProcessById(process.Id).MainWindowHandle, 2);Di2015NewLine            break;Di2015NewLine        }Di2015NewLineDi2015NewLine        //wait awhileDi2015NewLine        Thread.Sleep(100);Di2015NewLineDi2015NewLine        // place for another exit condition for example: loop running > 1minDi2015NewLine    }Di2015NewLine}Di2015NewLine
11767612Di2015UniqueSeparatorpublic class BaseDi2015NewLine{Di2015NewLine    private string Test = "";Di2015NewLineDi2015NewLine    public Base(string test)Di2015NewLine    {Di2015NewLine        Test = test;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Derived : BaseDi2015NewLine{Di2015NewLine    public Derived(string test) : base(test) // - This will call public Base(string test)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
11767676Di2015UniqueSeparatorvar contacts = _session.All<Contact>()Di2015NewLine    .Where(x => x.IsActiveDi2015NewLine                && ((x.FirstName.ToLower() + " " + x.LastName.ToLower()).Contains(q.ToLower())));Di2015NewLine
11767697Di2015UniqueSeparatorusername
11767697Di2015UniqueSeparatorvalues
11767697Di2015UniqueSeparatorvalues
11767697Di2015UniqueSeparatorvalues
11767697Di2015UniqueSeparator  static void Reproduction(string argument)Di2015NewLine  {Di2015NewLine      Contract.Requires(argument != null); // <-- (1)Di2015NewLineDi2015NewLine      int[] values = new int[1];Di2015NewLine      Debug.Assert(values != null);Di2015NewLineDi2015NewLine      Func<int, bool> d = i => values[i] >= 0; // <-- (2)Di2015NewLineDi2015NewLine      Console.WriteLine(values);Di2015NewLine  }Di2015NewLine
11767697Di2015UniqueSeparatorvalues
11767697Di2015UniqueSeparatorvalues
11767697Di2015UniqueSeparatornull
11767741Di2015UniqueSeparatorSqlClient
11767741Di2015UniqueSeparatorMySql
11767741Di2015UniqueSeparatorMySql
11767741Di2015UniqueSeparatorSqlClient
11767741Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data.Entity;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinenamespace EFIncludeDi2015NewLine{Di2015NewLine    public class HarborDi2015NewLine    {Di2015NewLine        public int HarborId { get; set; }Di2015NewLine        public virtual ICollection<Ship> Ships { get; set; }Di2015NewLineDi2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ShipDi2015NewLine    {Di2015NewLine        public int ShipId { get; set; }Di2015NewLine        public int HarborId { get; set; }Di2015NewLine        public virtual Harbor Harbor { get; set; }Di2015NewLine        public virtual ICollection<CrewMember> CrewMembers { get; set; }Di2015NewLineDi2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CrewMemberDi2015NewLine    {Di2015NewLine        public int CrewMemberId { get; set; }Di2015NewLine        public int ShipId { get; set; }Di2015NewLine        public virtual Ship Ship { get; set; }Di2015NewLine        public int RankId { get; set; }Di2015NewLine        public virtual Rank Rank { get; set; }Di2015NewLine        public int ClearanceId { get; set; }Di2015NewLine        public virtual Clearance Clearance { get; set; }Di2015NewLineDi2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class RankDi2015NewLine    {Di2015NewLine        public int RankId { get; set; }Di2015NewLine        public virtual ICollection<CrewMember> CrewMembers { get; set; }Di2015NewLineDi2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ClearanceDi2015NewLine    {Di2015NewLine        public int ClearanceId { get; set; }Di2015NewLine        public virtual ICollection<CrewMember> CrewMembers { get; set; }Di2015NewLineDi2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyContext : DbContextDi2015NewLine    {Di2015NewLine        public DbSet<Harbor> Harbors { get; set; }Di2015NewLine        public DbSet<Ship> Ships { get; set; }Di2015NewLine        public DbSet<CrewMember> CrewMembers { get; set; }Di2015NewLine        public DbSet<Rank> Ranks { get; set; }Di2015NewLine        public DbSet<Clearance> Clearances { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Database.SetInitializer(new DropCreateDatabaseAlways<MyContext>());Di2015NewLineDi2015NewLine            using (var context = new MyContext())Di2015NewLine            {Di2015NewLine                context.Database.Initialize(true);Di2015NewLineDi2015NewLine                var harbor = new HarborDi2015NewLine                {Di2015NewLine                    Ships = new HashSet<Ship>Di2015NewLine                    {Di2015NewLine                        new ShipDi2015NewLine                        {Di2015NewLine                            CrewMembers = new HashSet<CrewMember>Di2015NewLine                            {Di2015NewLine                                new CrewMemberDi2015NewLine                                {Di2015NewLine                                    Rank = new Rank { Description = "Rank A" },Di2015NewLine                                    Clearance = new Clearance { Description = "Clearance A" },Di2015NewLine                                    Description = "CrewMember A"Di2015NewLine                                },Di2015NewLine                                new CrewMemberDi2015NewLine                                {Di2015NewLine                                    Rank = new Rank { Description = "Rank B" },Di2015NewLine                                    Clearance = new Clearance { Description = "Clearance B" },Di2015NewLine                                    Description = "CrewMember B"Di2015NewLine                                }Di2015NewLine                            },Di2015NewLine                            Description = "Ship AB"Di2015NewLine                        },Di2015NewLine                        new ShipDi2015NewLine                        {Di2015NewLine                            CrewMembers = new HashSet<CrewMember>Di2015NewLine                            {Di2015NewLine                                new CrewMemberDi2015NewLine                                {Di2015NewLine                                    Rank = new Rank { Description = "Rank C" },Di2015NewLine                                    Clearance = new Clearance { Description = "Clearance C" },Di2015NewLine                                    Description = "CrewMember C"Di2015NewLine                                },Di2015NewLine                                new CrewMemberDi2015NewLine                                {Di2015NewLine                                    Rank = new Rank { Description = "Rank D" },Di2015NewLine                                    Clearance = new Clearance { Description = "Clearance D" },Di2015NewLine                                    Description = "CrewMember D"Di2015NewLine                                }Di2015NewLine                            },Di2015NewLine                            Description = "Ship CD"Di2015NewLine                        }Di2015NewLine                    },Di2015NewLine                    Description = "Harbor ABCD"Di2015NewLine                };Di2015NewLineDi2015NewLine                context.Harbors.Add(harbor);Di2015NewLine                context.SaveChanges();Di2015NewLine            }Di2015NewLineDi2015NewLine            using (var context = new MyContext())Di2015NewLine            {Di2015NewLine                DbSet<Harbor> dbSet = context.Set<Harbor>();Di2015NewLine                IQueryable<Harbor> query = dbSet;Di2015NewLine                query = query.Include(entity => entity.Ships);Di2015NewLine                query = query.Include(entity => entity.Ships.Select(s => s.CrewMembers));Di2015NewLine                query = query.Include(entity => entity.Ships.Select(s => s.CrewMembers.Select(cm => cm.Rank)));Di2015NewLine                query = query.Include(entity => entity.Ships.Select(s => s.CrewMembers.Select(cm => cm.Clearance)));Di2015NewLineDi2015NewLine                var sqlString = query.ToString();Di2015NewLine                // see below for the generated SQL queryDi2015NewLineDi2015NewLine                var harbor = query.Single();Di2015NewLineDi2015NewLine                Console.WriteLine("Harbor {0} Description = \\"{1}\\"",Di2015NewLine                    harbor.HarborId, harbor.Description);Di2015NewLine                foreach (var ship in harbor.Ships)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("- Ship {0} Description = \\"{1}\\"",Di2015NewLine                        ship.ShipId, ship.Description);Di2015NewLine                    foreach (var crewMember in ship.CrewMembers)Di2015NewLine                    {Di2015NewLine                        Console.WriteLine("-- CrewMember {0} Description = \\"{1}\\"", Di2015NewLine                            crewMember.CrewMemberId, crewMember.Description);Di2015NewLine                        Console.WriteLine("-- CrewMember {0} Rank Description = \\"{1}\\"",Di2015NewLine                            crewMember.CrewMemberId, crewMember.Rank.Description);Di2015NewLine                        Console.WriteLine("-- CrewMember {0} Clearance Description = \\"{1}\\"",Di2015NewLine                            crewMember.CrewMemberId, crewMember.Clearance.Description);Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                Console.ReadLine();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11767741Di2015UniqueSeparatorvar sqlString = query.ToString();
11767741Di2015UniqueSeparatorsqlString
11767741Di2015UniqueSeparatorSELECT Di2015NewLine[Project1].[HarborId] AS [HarborId], Di2015NewLine[Project1].[Description] AS [Description], Di2015NewLine[Project1].[C2] AS [C1], Di2015NewLine[Project1].[ShipId] AS [ShipId], Di2015NewLine[Project1].[HarborId1] AS [HarborId1], Di2015NewLine[Project1].[Description1] AS [Description1], Di2015NewLine[Project1].[C1] AS [C2], Di2015NewLine[Project1].[CrewMemberId] AS [CrewMemberId], Di2015NewLine[Project1].[ShipId1] AS [ShipId1], Di2015NewLine[Project1].[RankId] AS [RankId], Di2015NewLine[Project1].[ClearanceId] AS [ClearanceId], Di2015NewLine[Project1].[Description2] AS [Description2], Di2015NewLine[Project1].[RankId1] AS [RankId1], Di2015NewLine[Project1].[Description3] AS [Description3], Di2015NewLine[Project1].[ClearanceId1] AS [ClearanceId1], Di2015NewLine[Project1].[Description4] AS [Description4]Di2015NewLineFROM ( SELECT Di2015NewLine    [Extent1].[HarborId] AS [HarborId], Di2015NewLine    [Extent1].[Description] AS [Description], Di2015NewLine    [Join3].[ShipId1] AS [ShipId], Di2015NewLine    [Join3].[HarborId] AS [HarborId1], Di2015NewLine    [Join3].[Description1] AS [Description1], Di2015NewLine    [Join3].[CrewMemberId] AS [CrewMemberId], Di2015NewLine    [Join3].[ShipId2] AS [ShipId1], Di2015NewLine    [Join3].[RankId1] AS [RankId], Di2015NewLine    [Join3].[ClearanceId1] AS [ClearanceId], Di2015NewLine    [Join3].[Description2] AS [Description2], Di2015NewLine    [Join3].[RankId2] AS [RankId1], Di2015NewLine    [Join3].[Description3] AS [Description3], Di2015NewLine    [Join3].[ClearanceId2] AS [ClearanceId1], Di2015NewLine    [Join3].[Description4] AS [Description4], Di2015NewLine    CASE WHEN ([Join3].[ShipId1] IS NULL) THEN CAST(NULL AS int) WHEN ([Join3].[CrewMemberId] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1], Di2015NewLine    CASE WHEN ([Join3].[ShipId1] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C2]Di2015NewLine    FROM  [dbo].[Harbors] AS [Extent1]Di2015NewLine    LEFT OUTER JOIN  (SELECT [Extent2].[ShipId] AS [ShipId1], [Extent2].[HarborId] AS [HarborId], [Extent2].[Description] AS [Description1], [Join2].[CrewMemberId], [Join2].[ShipId2], [Join2].[RankId1], [Join2].[ClearanceId1], [Join2].[Description2], [Join2].[RankId2], [Join2].[Description3], [Join2].[ClearanceId2], [Join2].[Description4]Di2015NewLine        FROM  [dbo].[Ships] AS [Extent2]Di2015NewLine        LEFT OUTER JOIN  (SELECT [Extent3].[CrewMemberId] AS [CrewMemberId], [Extent3].[ShipId] AS [ShipId2], [Extent3].[RankId] AS [RankId1], [Extent3].[ClearanceId] AS [ClearanceId1], [Extent3].[Description] AS [Description2], [Extent4].[RankId] AS [RankId2], [Extent4].[Description] AS [Description3], [Extent5].[ClearanceId] AS [ClearanceId2], [Extent5].[Description] AS [Description4]Di2015NewLine            FROM   [dbo].[CrewMembers] AS [Extent3]Di2015NewLine            INNER JOIN [dbo].[Ranks] AS [Extent4] ON [Extent3].[RankId] = [Extent4].[RankId]Di2015NewLine            LEFT OUTER JOIN [dbo].[Clearances] AS [Extent5] ON [Extent3].[ClearanceId] = [Extent5].[ClearanceId] ) AS [Join2] ON [Extent2].[ShipId] = [Join2].[ShipId2] ) AS [Join3] ON [Extent1].[HarborId] = [Join3].[HarborId]Di2015NewLine)  AS [Project1]Di2015NewLineORDER BY [Project1].[HarborId] ASC, [Project1].[C2] ASC, [Project1].[ShipId] ASC, [Project1].[C1] ASCDi2015NewLine
11767932Di2015UniqueSeparatorSpinWait
11767932Di2015UniqueSeparatorInterlocked.Increment
11767932Di2015UniqueSeparatorpublic void Enqueue(T item)Di2015NewLine{Di2015NewLine  SpinWait spinWait = new SpinWait();Di2015NewLine  while (!this.m_tail.TryAppend(item, ref this.m_tail))Di2015NewLine    spinWait.SpinOnce();Di2015NewLine}Di2015NewLineDi2015NewLine  internal void Grow(ref ConcurrentQueue<T>.Segment tail)Di2015NewLine  {Di2015NewLine    this.m_next = new ConcurrentQueue<T>.Segment(this.m_index + 1L);Di2015NewLine    tail = this.m_next;Di2015NewLine  }Di2015NewLineDi2015NewLine  internal bool TryAppend(T value, ref ConcurrentQueue<T>.Segment tail)Di2015NewLine  {Di2015NewLine    if (this.m_high >= 31)Di2015NewLine      return false;Di2015NewLine    int index = 32;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine      index = Interlocked.Increment(ref this.m_high);Di2015NewLine      if (index <= 31)Di2015NewLine      {Di2015NewLine        this.m_array[index] = value;Di2015NewLine        this.m_state[index] = 1;Di2015NewLine      }Di2015NewLine      if (index == 31)Di2015NewLine        this.Grow(ref tail);Di2015NewLine    }Di2015NewLine    return index <= 31;Di2015NewLine  }Di2015NewLine
11767990Di2015UniqueSeparatorimport clrDi2015NewLineclr.AddReference("MyAssembly") Di2015NewLineimport MyGlobalClassDi2015NewLine
11768119Di2015UniqueSeparatorComputer.CPUEnabled
11768119Di2015UniqueSeparatorComputer.Open
11768119Di2015UniqueSeparatorComputer.Open
11768119Di2015UniqueSeparatorHardware.Update
11768119Di2015UniqueSeparatorNullable<float>
11768119Di2015UniqueSeparatorComputer
11768119Di2015UniqueSeparatorIntelCpu.Update
11768119Di2015UniqueSeparatorRing0.RdmsrTx(IA32_THERM_STATUS_MSR, out eax, out edx, 1UL << cpuid[i][0].Thread)Di2015NewLine
11768119Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing OpenHardwareMonitor.Hardware;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public class MySettings : ISettingsDi2015NewLine    {Di2015NewLine        private IDictionary<string, string> settings = new Dictionary<string, string>();Di2015NewLineDi2015NewLine        public MySettings(IDictionary<string, string> settings)Di2015NewLine        {Di2015NewLine            this.settings = settings;Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool Contains(string name)Di2015NewLine        {Di2015NewLine            return settings.ContainsKey(name);Di2015NewLine        }Di2015NewLineDi2015NewLine        public string GetValue(string name, string value)Di2015NewLine        {Di2015NewLine            string result;Di2015NewLine            if (settings.TryGetValue(name, out result))Di2015NewLine                return result;Di2015NewLine            elseDi2015NewLine                return value;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Remove(string name)Di2015NewLine        {Di2015NewLine            settings.Remove(name);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void SetValue(string name, string value)Di2015NewLine        {Di2015NewLine            settings[name] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Form1 : FormDi2015NewLine    {Di2015NewLine        Computer myComputer;Di2015NewLine        Timer timer = new Timer { Enabled = true, Interval = 1000 };Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            timer.Tick += new EventHandler(timer_Tick);Di2015NewLineDi2015NewLine            MySettings settings = new MySettings(new Dictionary<string, string>Di2015NewLine            {Di2015NewLine                { "/intelcpu/0/temperature/0/values", "H4sIAAAAAAAEAOy9B2AcSZYlJi9tynt/SvVK1+B0oQiAYBMk2JBAEOzBiM3mkuwdaUcjKasqgcplVmVdZhZAzO2dvPfee++999577733ujudTif33/8/XGZkAWz2zkrayZ4hgKrIHz9+fB8/Iu6//MH37x79i9/+NX6N3/TJm9/5f/01fw1+fosnv+A/+OlfS37/jZ/s/Lpv9fff6Ml/NTef/yZPnozc5679b+i193//TQZ+/w2Dd+P9/sZeX/67v/GTf/b3iP3u4/ObBL//73+i+f039+D8Zk/+xz/e/P6beu2TQZju8yH8f6OgzcvPv/U3/Rb8+z/0f/9b/+yfaOn8079X6fr6Cws7ln/iHzNwflPv99/wyS/+xY4+v/evcJ+733+jJ5//Cw7/4ndy9Im3+U2e/Fbnrk31C93vrt/fyPvdb+N//hsF7/4/AQAA//9NLZZ8WAIAAA==" },Di2015NewLine                { "/intelcpu/0/load/0/values", "H4sIAAAAAAAEAOy9B2AcSZYlJi9tynt/SvVK1+B0oQiAYBMk2JBAEOzBiM3mkuwdaUcjKasqgcplVmVdZhZAzO2dvPfee++999577733ujudTif33/8/XGZkAWz2zkrayZ4hgKrIHz9+fB8/Iu6//MH37x79i9++mpwcv/md/9df89egZ/xX/ym/5y/4D37618Lv7ya//u+58+u+5d9/z7/5t/w9/6u5fP5bH/6av+eTkXyefXxp26ONaf/v/dG/sf39D/rvnv4e5vc/0IP56/waK/vuHzf5I38P8/tv+mv8Rbb9f0pwTF9/zr/1X9vP/8I//+/6Pf7Z30N+/zdf/HX29zd/859q4aCNP5b//U+U3/+7f+zXOjZwfqvDX/V7/o9/vPz+a1G/pv0f+fGlhfk7eZ//N3/0v28//5X0u/n8Cxq7+f1X/tHft20A5x8a/W5/02+BP36Nf+j/nv8XfzrT+c2//Ob4p3+vktvUhNs/+xcWikP6e/4T/5jS5M8/sL8vP/5ff49f/Ivl9//sHzv6PX/vXyG//9R/94/9HuZ34P/5vyC//3W/5e/1exa/k+Bw4bUBnU2bP4Xg/1bn0uafeTH6PatfKL//N3/0t2y/gG9+/8+IzqYNxmU+/+jwX7afY67/nwAAAP//GYSA31gCAAA=" },Di2015NewLine            });Di2015NewLineDi2015NewLine            myComputer = new Computer(settings) { CPUEnabled = true };Di2015NewLine            myComputer.Open();Di2015NewLine        }Di2015NewLineDi2015NewLine        void timer_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            Trace.WriteLine("");Di2015NewLine            foreach (var hardwareItem in myComputer.Hardware)Di2015NewLine            {Di2015NewLine                if (hardwareItem.HardwareType == HardwareType.CPU)Di2015NewLine                {Di2015NewLine                    hardwareItem.Update();Di2015NewLine                    foreach (IHardware subHardware in hardwareItem.SubHardware)Di2015NewLine                        subHardware.Update();Di2015NewLineDi2015NewLine                    foreach (var sensor in hardwareItem.Sensors)Di2015NewLine                    {Di2015NewLine                        if (sensor.SensorType == SensorType.Temperature)Di2015NewLine                        {Di2015NewLine                            Trace.WriteLine(String.Format("{0} Temperature = {1}", sensor.Name, sensor.Value.HasValue ? sensor.Value.Value.ToString() : "no value"));Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11768259Di2015UniqueSeparatorDebugger.Launch()
11768259Di2015UniqueSeparator!|BirdCall|Di2015NewLine|birdName|noise|Di2015NewLine|duck|quack|Di2015NewLineDi2015NewLinepublic class SkylarkBunting : fitlibrary.DoFixtureDi2015NewLine{Di2015NewLine    public BirdCall BirdCall;Di2015NewLineDi2015NewLine    public SkylarkBunting(BirdCall birdCall)Di2015NewLine    {Di2015NewLine        BirdCall = birdCall;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string GetCall()Di2015NewLine    {Di2015NewLine        return BirdCall.Noise;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string GetName()Di2015NewLine    {Di2015NewLine        return BirdCall.BirdName;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11768260Di2015UniqueSeparatorinfo.Arguments = @"/c ""cd \\ && dir""";
11768260Di2015UniqueSeparatorinfo.Arguments = @"""MyPerlProgram.pl""";
11768260Di2015UniqueSeparatorinfo.Arguments = @"/c ""perl.exe ""MyPerlProgram.pl""""";
11768260Di2015UniqueSeparatorthis.shellProcess.OutputDataReceived += ProcessOutputHandler;
11768260Di2015UniqueSeparatorpublic static void ProcessOutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
11768260Di2015UniqueSeparatorthis.shellProcess.BeginOutputReadLine();
11768260Di2015UniqueSeparatorprocess.StartInfo.Arguments = @"/c ""python.exe -c ""import sys; print 'Test.';""""";
11768260Di2015UniqueSeparatorpublic static void Main()Di2015NewLine{Di2015NewLine    using (Process process = new Process())Di2015NewLine    {Di2015NewLine        process.StartInfo.UseShellExecute = false;Di2015NewLine        process.StartInfo.RedirectStandardOutput = true;Di2015NewLine        process.StartInfo.RedirectStandardError = true;Di2015NewLine        process.StartInfo.WorkingDirectory = @"C:\\";Di2015NewLine        process.StartInfo.FileName = Path.Combine(Environment.SystemDirectory, "cmd.exe");Di2015NewLineDi2015NewLine        // Redirects the standard input so that commands can be sent to the shell.Di2015NewLine        process.StartInfo.RedirectStandardInput = true;Di2015NewLine        // Runs the specified command and exits the shell immediately.Di2015NewLine        //process.StartInfo.Arguments = @"/c ""dir""";Di2015NewLineDi2015NewLine        process.OutputDataReceived += ProcessOutputDataHandler;Di2015NewLine        process.ErrorDataReceived += ProcessErrorDataHandler;Di2015NewLineDi2015NewLine        process.Start();Di2015NewLine        process.BeginOutputReadLine();Di2015NewLine        process.BeginErrorReadLine();Di2015NewLineDi2015NewLine        // Send a directory command and an exit command to the shellDi2015NewLine        process.StandardInput.WriteLine("dir");Di2015NewLine        process.StandardInput.WriteLine("exit");Di2015NewLineDi2015NewLine        process.WaitForExit();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void ProcessOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)Di2015NewLine{Di2015NewLine    Console.WriteLine(outLine.Data);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void ProcessErrorDataHandler(object sendingProcess, DataReceivedEventArgs outLine)Di2015NewLine{Di2015NewLine    Console.WriteLine(outLine.Data);Di2015NewLine}Di2015NewLine
11768260Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.IO;Di2015NewLineusing System.Timers;Di2015NewLineDi2015NewLinenamespace DummyFormsApplicationDi2015NewLine{Di2015NewLine    class ProcessLauncher : IDisposableDi2015NewLine    {Di2015NewLine        private Form1 form;Di2015NewLine        private Process process;Di2015NewLine        private bool running;Di2015NewLineDi2015NewLine        public bool InteractiveModeDi2015NewLine        {Di2015NewLine            get;Di2015NewLine            private set;Di2015NewLine        }Di2015NewLineDi2015NewLine        public ProcessLauncher(Form1 form)Di2015NewLine        {Di2015NewLine            this.form = form;Di2015NewLineDi2015NewLine            process = new Process();Di2015NewLine            process.StartInfo.UseShellExecute = false;Di2015NewLine            process.StartInfo.RedirectStandardOutput = true;Di2015NewLine            process.StartInfo.RedirectStandardError = true;Di2015NewLine            process.StartInfo.WorkingDirectory = @"C:\\";Di2015NewLine            process.StartInfo.FileName = Path.Combine(Environment.SystemDirectory, "cmd.exe");Di2015NewLineDi2015NewLine            // Redirects the standard input so that commands can be sent to the shell.Di2015NewLine            process.StartInfo.RedirectStandardInput = true;Di2015NewLineDi2015NewLine            process.OutputDataReceived +=new DataReceivedEventHandler(process_OutputDataReceived);Di2015NewLine            process.ErrorDataReceived += new DataReceivedEventHandler(process_ErrorDataReceived);Di2015NewLine            process.Exited += new EventHandler(process_Exited);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Start()Di2015NewLine        {Di2015NewLine            if (running == false)Di2015NewLine            {Di2015NewLine                running = true;Di2015NewLine                InteractiveMode = true;Di2015NewLineDi2015NewLine                // Runs the specified command and exits the shell immediately upon completion.Di2015NewLine                process.StartInfo.Arguments = @"/c ""C:\\python27\\python.exe -i""";Di2015NewLineDi2015NewLine                process.Start();Di2015NewLineDi2015NewLine                process.BeginOutputReadLine();Di2015NewLine                process.BeginErrorReadLine();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Start(string scriptFileName)Di2015NewLine        {Di2015NewLine            if (running == false)Di2015NewLine            {Di2015NewLine                running = true;Di2015NewLine                InteractiveMode = false;Di2015NewLineDi2015NewLine                // Runs the specified command and exits the shell immediately upon completion.Di2015NewLine                process.StartInfo.Arguments = string.Format(@"/c ""C:\\python27\\python.exe ""{0}""""", scriptFileName);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Abort()Di2015NewLine        {Di2015NewLine            process.Kill();Di2015NewLine        }Di2015NewLineDi2015NewLine        public void SendInput(string input)Di2015NewLine        {Di2015NewLine            process.StandardInput.Write(input);Di2015NewLine            process.StandardInput.Flush();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void process_OutputDataReceived(object sendingProcess, DataReceivedEventArgs outLine)Di2015NewLine        {Di2015NewLine            if (outLine.Data != null)Di2015NewLine            {Di2015NewLine                form.Invoke(form.appendConsoleTextDelegate, new object[] { outLine.Data });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void process_ErrorDataReceived(object sendingProcess, DataReceivedEventArgs outLine)Di2015NewLine        {Di2015NewLine            if (outLine.Data != null)Di2015NewLine            {Di2015NewLine                form.Invoke(form.appendConsoleTextDelegate, new object[] { outLine.Data });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void process_Exited(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            running = false;Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Dispose()Di2015NewLine        {Di2015NewLine            if (process != null)Di2015NewLine            {Di2015NewLine                process.Dispose();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11768260Di2015UniqueSeparator    public delegate void AppendConsoleText(string text);Di2015NewLine    public AppendConsoleText appendConsoleTextDelegate;Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        appendConsoleTextDelegate = new AppendConsoleText(textBox1_AppendConsoleText);Di2015NewLine        using (ProcessLauncher launcher = new ProcessLauncher(this))Di2015NewLine        {Di2015NewLine            launcher.Start();Di2015NewLineDi2015NewLine            launcher.SendInput("import sys;\\n");Di2015NewLine            launcher.SendInput("print \\"Test.\\";\\n");Di2015NewLine            launcher.SendInput("exit()\\n");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void textBox1_AppendConsoleText(string text)Di2015NewLine    {Di2015NewLine        textBox1.AppendText(string.Format("{0}\\r\\n", text));Di2015NewLine    }Di2015NewLine
11768260Di2015UniqueSeparator>>>
11768545Di2015UniqueSeparatorDataMember
11768545Di2015UniqueSeparatorDataMemberAttribute
11768545Di2015UniqueSeparatorInherited = false
11768545Di2015UniqueSeparatorInherited
11768545Di2015UniqueSeparatorDataContract
11768545Di2015UniqueSeparatorYoyo
11768545Di2015UniqueSeparatorDataMember
11768664Di2015UniqueSeparatorMyClass my = new MyClass() { PropA = 1, PropB = 2 };Di2015NewLine
11768664Di2015UniqueSeparatorMyClass my = new MyClass(1, 2);Di2015NewLine
11768760Di2015UniqueSeparator  <system.web>Di2015NewLine    <compilation debug="true">Di2015NewLine      <assemblies>Di2015NewLine        <!-- A bunch of other assemblies here-->Di2015NewLine        <add assembly="System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>Di2015NewLine        <add assembly="System.Web.Extensions.Design, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>Di2015NewLine      </assemblies>Di2015NewLine    </compilation>Di2015NewLine    <httpModules>Di2015NewLine      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>Di2015NewLine    </httpModules>Di2015NewLine  </system.web>Di2015NewLine
11768949Di2015UniqueSeparatorPrincipalContext
11768949Di2015UniqueSeparatorComputerPrincipal
11768949Di2015UniqueSeparatorSystem.DirectoryServices.AccountManagement
11768949Di2015UniqueSeparatorstring machineOU;Di2015NewLineusing (var context = new PrincipalContext(ContextType.Domain))Di2015NewLineusing (var comp = ComputerPrincipal.FindByIdentity(context, Environment.MachineName))Di2015NewLine{Di2015NewLine    machineOU = String.Join(",", comp.DistinguishedName.Split(',')Di2015NewLine                                                       .SkipWhile(s => !s.StartsWith("OU="))Di2015NewLine                                                       .ToArray());Di2015NewLine}Di2015NewLine
11768949Di2015UniqueSeparatorOU=...
11768949Di2015UniqueSeparatorSystem.DirectoryServices.AccountManagement
11768949Di2015UniqueSeparatorPrincipalContext
11768949Di2015UniqueSeparatorPrincipalType.Machine
11768949Di2015UniqueSeparatorPrincipalType.Domain
11768949Di2015UniqueSeparatorPrincipalType.ApplicationDirectory
11768949Di2015UniqueSeparatornew PrincipalContext(ContextType.Domain)
11768949Di2015UniqueSeparatorPrincipalContext
11768949Di2015UniqueSeparatorFindBy...()
11768949Di2015UniqueSeparatorUserPrincipal
11768949Di2015UniqueSeparatorComputerPrincipal
11768949Di2015UniqueSeparatorGroupPrincipal
11769071Di2015UniqueSeparatorforeach (string item in lvwPoliciesAvailableForHoldBack.SelectedItems)Di2015NewLine
11769071Di2015UniqueSeparatorforeach (ListViewItem item in lvwPoliciesAvailableForHoldBack.SelectedItems)Di2015NewLine
11769071Di2015UniqueSeparatorDatabase.HoldBackPolicy(item.Text);Di2015NewLine
11769137Di2015UniqueSeparatorWebClient client = new WebClient();Di2015NewLineforeach (string image in files)Di2015NewLine{Di2015NewLine    String imagePath = Path.GetTempFileName();Di2015NewLine    client.DownloadFile(image, imagePath);Di2015NewLineDi2015NewLine    //create a Bitmap from the file and add it to the listDi2015NewLine    System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(imagePath);Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11769144Di2015UniqueSeparatorvar highestDateID = Storage.OrderByDescending(x => x.Date).Select(x => x.Item_Id).FirstOrDefault();Di2015NewLine
11769521Di2015UniqueSeparator<asp:CustomValidator runat="server" Di2015NewLine     id="valAddressType" Di2015NewLine     controltovalidate="ddlAddressType" Di2015NewLine     onservervalidate="cusCustom_ServerValidate" Di2015NewLine     errormessage="Please select address type" />Di2015NewLine
11769521Di2015UniqueSeparatorprotected void cusCustom_ServerValidate(object sender, ServerValidateEventArgs e)Di2015NewLine{Di2015NewLine        if (ddlAddressType.SelectedItem.Value == "1")             Di2015NewLine            e.IsValid = false; // or do any additional validation checks here!    Di2015NewLine        else            Di2015NewLine            e.IsValid = true;   Di2015NewLine}Di2015NewLine
11769549Di2015UniqueSeparatorApplication.Run(new MainAPRSTW());Di2015NewLine
11769549Di2015UniqueSeparatorpublic static Form mainForm;//at top of moduleDi2015NewLinemainForm = new MainAPRSTW();Di2015NewLineApplication.Run(mainForm);Di2015NewLine
11769549Di2015UniqueSeparatorChildNodeForm.MdiParent = mainForm;Di2015NewLine
11769578Di2015UniqueSeparatorstring.Join(",", Encoding.Unicode.GetBytes("10.10.10.11").Select(x => x.ToString("X2")))Di2015NewLine
11769578Di2015UniqueSeparator31,00,30,00,2E,00,31,00,30,00,2E,00,31,00,30,00,2E,00,31,00,31,00Di2015NewLine
11769596Di2015UniqueSeparator  "http://site.com/user/{username}/{*path}"Di2015NewLine
11769824Di2015UniqueSeparatorSortedList
11769824Di2015UniqueSeparatorIEnumerable<T>
11769824Di2015UniqueSeparator.Last
11769885Di2015UniqueSeparatorpublic class SettingsComponentAttributes : GH_ComponentAttributesDi2015NewLine{Di2015NewLine    public SettingsComponentAttributes(IGH_Component SettingsComponent) : base(SettingsComponent) { }Di2015NewLineDi2015NewLine    public override GH_ObjectResponse RespondToMouseDoubleClick(GH_Canvas sender, GH_CanvasMouseEvent e)Di2015NewLine    {Di2015NewLine        ((SettingsComponent)Owner).ShowSettingsGui();Di2015NewLine        return GH_ObjectResponse.Handled;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11769978Di2015UniqueSeparator    static void LaunchInstaller()Di2015NewLine    {Di2015NewLine        const string installdir = @"C:\\Users\\UserOne\\Desktop\\NotepadFolder";Di2015NewLineDi2015NewLine        ProcessStartInfo startInfo = new ProcessStartInfo();Di2015NewLine        startInfo.FileName = @"C:\\Users\\UserOne\\Downloads\\npp.6.1.5.Installer.exe";Di2015NewLine        startInfo.Arguments = "/S /D=" + installdir; //My new codeDi2015NewLine        Process.Start(startInfo);Di2015NewLine    }Di2015NewLine
11770322Di2015UniqueSeparator<Application x:Class="WpfApplication99.App"Di2015NewLine         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine         Startup="App_Startup">Di2015NewLine
11770322Di2015UniqueSeparator    public partial class App : ApplicationDi2015NewLine{Di2015NewLine    void App_Startup(object sender, StartupEventArgs e)Di2015NewLine    {Di2015NewLine        // Application is runningDi2015NewLine        // Process command line argsDi2015NewLine        bool startMinimized = false;Di2015NewLine        for (int i = 0; i != e.Args.Length; ++i)Di2015NewLine        {Di2015NewLine            if (e.Args[i] == "/StartMinimized")Di2015NewLine            {Di2015NewLine                startMinimized = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Create main application window, starting minimized if specifiedDi2015NewLine        MainWindow mainWindow = new MainWindow();Di2015NewLine        if (startMinimized)Di2015NewLine        {Di2015NewLine            mainWindow.WindowState = WindowState.Minimized;Di2015NewLine        }Di2015NewLine        mainWindow.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11770377Di2015UniqueSeparatorNameScope.SetNameScope(layoutControl, new NameScope());Di2015NewLine
11770377Di2015UniqueSeparatorpublic static void InstallItemsInLayoutControl(LayoutControl layoutControl)Di2015NewLine{Di2015NewLine    // FAKE TEST VERSIONDi2015NewLine    Button btn = new Button();Di2015NewLine    btn.Name = "TESTBUTTON";Di2015NewLine    btn.Content = "Test Me";Di2015NewLine    btn.Height = 23;Di2015NewLine    btn.Width = 100;Di2015NewLine    btn.HorizontalAlignment = HorizontalAlignment.Left;Di2015NewLine    btn.VerticalAlignment = VerticalAlignment.Top;Di2015NewLine    btn.Width = 100;Di2015NewLine    layoutControl.RegisterName(btn.Name, btn);  // THIS LINE WAS MISSINGDi2015NewLine    layoutControl.Children.Add(btn);Di2015NewLine}Di2015NewLine
11770466Di2015UniqueSeparator    int nRowIndex = dataGridView1.Rows.Count-2;Di2015NewLine
11770466Di2015UniqueSeparatorString retrieveData = "SELECT CostID, SupplierName, CostPrice FROM CostPrice WHERE PartsID = @inPartsID";Di2015NewLineSqlCommand cmd = new SqlCommand(retrieveData, con);Di2015NewLinecmd.Parameters.Add(new SqlParameter("@inPartsID", textBox1.Text));Di2015NewLine
11770676Di2015UniqueSeparatorXmlDocument doc = (XmlDocument)JsonConvert.DeserializeXmlNode(json, "friends");Di2015NewLine
11770755Di2015UniqueSeparatorNamedPipeClientStream
11770755Di2015UniqueSeparatorConnect(int)
11770755Di2015UniqueSeparatorbool isConnected = false;Di2015NewLinetryDi2015NewLine{Di2015NewLine    pipeClient.Connect(3000);Di2015NewLine    isConnected = true;Di2015NewLine}Di2015NewLinecatch(TimeoutException)Di2015NewLine{Di2015NewLine    // failed to connectDi2015NewLine}Di2015NewLine
11770784Di2015UniqueSeparatorstatic class DateHandler Di2015NewLine{     Di2015NewLine    #region Properties      Di2015NewLine    private static Date Date;Di2015NewLine    private static Dictionary<char, string> properties;Di2015NewLine    private static Dictionary<char, string> Properties Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (properties == null)Di2015NewLine            {Di2015NewLine                properties = new Dictionary<char, string>();Di2015NewLine                SetProperties();Di2015NewLine            }Di2015NewLine            return properties;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            properties = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private static int Properties_Count;      Di2015NewLine    #endregion      Di2015NewLineDi2015NewLine    #region Methods      Di2015NewLineDi2015NewLine    private static void SetProperties()     Di2015NewLine    {         Di2015NewLine        Properties.Add('d', Date.Day + "");         Di2015NewLine        Properties.Add('m', Date.Month + "");         Di2015NewLine        Properties.Add('Y', Date.Year + "");         Di2015NewLine        Properties.Add('y', Date.Year.ToString().Substring(Math.Max(0, Date.Year.ToString().Length - 2)));         Di2015NewLine        Properties_Count = Properties.Count;     Di2015NewLine    }Di2015NewLine    public static string Format(Date date, string FormatString)     Di2015NewLine    {Di2015NewLine        Date = date;Di2015NewLine        int len = FormatString.Length;         Di2015NewLine        if (Properties.ContainsKey(FormatString[0]))         Di2015NewLine        {             Di2015NewLine            FormatString = FormatString.Replace(FormatString[0] + "", Properties[FormatString[0]] + "");         Di2015NewLine        }         Di2015NewLine        for (int i = 1; i < len; i++)         Di2015NewLine        {             Di2015NewLine            if (Properties.ContainsKey(FormatString[i]) && FormatString[i - 1] != '\\\\')             Di2015NewLine            {                 Di2015NewLine                FormatString = FormatString.Replace(FormatString[i] + "", Properties[FormatString[i]] + "");             Di2015NewLine            }         Di2015NewLine        }         Di2015NewLine        return FormatString;     Di2015NewLine    }      Di2015NewLine    #endregion Di2015NewLine} Di2015NewLine
11770784Di2015UniqueSeparator Date d = new Date(1, 1, 2012);Di2015NewLineDi2015NewLine string result = DateHandler.Format(d, "d/m/Y");Di2015NewLine
11771017Di2015UniqueSeparatorPath.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
11771017Di2015UniqueSeparatorHttpContext.Request.PhysicalApplicationPath
11771097Di2015UniqueSeparatornew Random();
11771097Di2015UniqueSeparatorRandom random = new Random();Di2015NewLineint randomNumber  = random.Next(1, strings.Items.Count);Di2015NewLinestrings.Select();Di2015NewLinestrings.SelectedItem = strings.Items[randomNumber];Di2015NewLinevar str = strings.SelectedItem;Di2015NewLineif (str == "stuff")Di2015NewLine{Di2015NewLine    //HereDi2015NewLine}Di2015NewLine
11771097Di2015UniqueSeparatorrandom
11771097Di2015UniqueSeparatorstrings.Items[Convert.ToInt32(random)]Di2015NewLine
11771097Di2015UniqueSeparatorstring.Items
11771097Di2015UniqueSeparatorrandom
11771097Di2015UniqueSeparatorrandom
11771167Di2015UniqueSeparatorpublic class ESVLIntegrationDi2015NewLine{Di2015NewLine    public long? Id { get; set; }Di2015NewLine    public String ProcessId { get; set; }Di2015NewLine    public long UserId { get; set; }Di2015NewLine    public String Status { get; set; }Di2015NewLine    public DateTime StartDate { get; set; }Di2015NewLine    public DateTime EndDate { get; set; }Di2015NewLine    public String Operation { get; set; }Di2015NewLine    public String SNEquip { get; set; }Di2015NewLine    public String CardName { get; set; }Di2015NewLine    public String FilePath { get; set; }Di2015NewLine    public Boolean Processed { get; set; }Di2015NewLine}Di2015NewLine
11771251Di2015UniqueSeparator     var httpClient = new HttpClient();            Di2015NewLine     var contentBytes = await httpClient.GetByteArrayAsync(uri);                          Di2015NewLine     var ims = new InMemoryRandomAccessStream();                Di2015NewLine     var dataWriter = new DataWriter(ims);Di2015NewLine     dataWriter.WriteBytes(contentBytes);Di2015NewLine     await dataWriter.StoreAsync();Di2015NewLine     ims.Seek(0);Di2015NewLineDi2015NewLine     bitmap = new BitmapImage();                Di2015NewLine     bitmap.SetSource(ims);                Di2015NewLineDi2015NewLine     myImage.Source = bitmap;                Di2015NewLine
11771322Di2015UniqueSeparator private void button1_MouseDown(object sender, MouseEventArgs e) {Di2015NewLine      if (e.Button == MouseButtons.Right) {Di2015NewLine        // Do somethingDi2015NewLine        //...Di2015NewLine      }Di2015NewLine    }Di2015NewLine
11771331Di2015UniqueSeparatorattacks.txt
11771331Di2015UniqueSeparatorD:\\Users\\Andrey\\Desktop\\Turn\\character\\
11771331Di2015UniqueSeparator.txt
11771331Di2015UniqueSeparator.txt.somethingelse
11771331Di2015UniqueSeparator\\t
11771331Di2015UniqueSeparator\\\\
11771331Di2015UniqueSeparator@
11771331Di2015UniqueSeparator@"C:\\MyDirectory\\MyFile.txt"
11771599Di2015UniqueSeparatorCALL_REASON
11771599Di2015UniqueSeparatorCALL_reason
11771599Di2015UniqueSeparatorExceptions
11771599Di2015UniqueSeparatorDataRow.Field<String>("CALL_REASON")
11771660Di2015UniqueSeparatorpublic class ViewModel : ViewModelBaseDi2015NewLine{Di2015NewLine    public ViewModel()Di2015NewLine    {Di2015NewLine        this.text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";Di2015NewLine        this.backspaceCommand = new RelayCommand(Di2015NewLine            () => Text = Text.Substring(0, Text.Length - 1), Di2015NewLine            () => !String.IsNullOrEmpty(Text));Di2015NewLine    }Di2015NewLineDi2015NewLine    public String TextDi2015NewLine    {Di2015NewLine        get { return text; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (text != value)Di2015NewLine            {Di2015NewLine                text = value;Di2015NewLine                OnPropertyChanged("Text");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private String text;Di2015NewLineDi2015NewLine    public RelayCommand BackspaceCommandDi2015NewLine    {Di2015NewLine        get { return backspaceCommand; }Di2015NewLine    }Di2015NewLine    private readonly RelayCommand backspaceCommand;Di2015NewLine}Di2015NewLine
11771660Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="114" Width="404">Di2015NewLine    <Grid>Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="*"/>Di2015NewLine            <ColumnDefinition Width="Auto"/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="Auto"/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLineDi2015NewLine        <TextBox Grid.Column="0" Margin="5" x:Name="tbText" Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine        <RepeatButton Grid.Column="1" Margin="5" Content="Backspace" Command="{Binding BackspaceCommand}"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
11771660Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Loaded += (sender, args) => Di2015NewLine        { Di2015NewLine            tbText.Focus(); Di2015NewLine            tbText.CaretIndex = tbText.Text.Length; Di2015NewLine        };Di2015NewLine        DataContext = new ViewModel();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11771660Di2015UniqueSeparatorTextBox
11771660Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="114" Width="404">Di2015NewLine    <Grid>Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="*"/>Di2015NewLine            <ColumnDefinition Width="Auto"/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="Auto"/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLineDi2015NewLine        <TextBox Grid.Column="0" Margin="5" x:Name="tbText" Text="Lorem ipsum dolor sit amet, consectetur adipiscing elit."/>Di2015NewLine        <RepeatButton Grid.Column="1" Margin="5" Focusable="False" Content="Backspace" Click="RepeatButton_Click"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
11771660Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Loaded += (sender, args) => Di2015NewLine        { Di2015NewLine            tbText.Focus(); Di2015NewLine            tbText.CaretIndex = tbText.Text.Length; Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RepeatButton_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        if (!string.IsNullOrEmpty(tbText.Text))Di2015NewLine        {Di2015NewLine            tbText.Text = tbText.Text.Substring(0, tbText.Text.Length - 1);Di2015NewLine            tbText.CaretIndex = tbText.Text.Length;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11771722Di2015UniqueSeparatorListView
11771722Di2015UniqueSeparatorItemsSource
11771754Di2015UniqueSeparatorTrimEnd(',');
11771754Di2015UniqueSeparatorstring.TrimEnd
11771754Di2015UniqueSeparatorquerbuilder = querybuilder.TrimEnd(',');Di2015NewLine
11771866Di2015UniqueSeparatorgroupBox1.Controls.Add(groupBox2);Di2015NewLinegroupBox2.Location = new Point(10, 10);Di2015NewLine
11771866Di2015UniqueSeparatorControl.Location
11771938Di2015UniqueSeparatorEntity        Partition Key              Row Key            Di2015NewLineUser          â€œUâ€? + UserId      Di2015NewLineNote          â€œNâ€? + NoteId(Date)         NodeId(GUID)Di2015NewLineUser Note     â€œXâ€œ  + UserId              NoteId(Date+GUID)Di2015NewLineNote User     â€œYâ€œ  + NoteId(Date+GUID)   UserId    Di2015NewLine
11771938Di2015UniqueSeparatorEntity      Partition Key  Row Key             Note  User           Di2015NewLineUser        UserId      Di2015NewLineUser Note   UserId         NoteId(Date+GUID)   Note          (Contains Note and can query for all notes for a user).Di2015NewLineNote User   NoteId(Date)   NodeId(GUID)              UserId  (Can query for all Users of a note. Join on â€˜User Noteâ€™ to get note.)  Di2015NewLine
11771994Di2015UniqueSeparator"001, B-8345, X543"
11771994Di2015UniqueSeparator"001","B-8345","X543"
11771994Di2015UniqueSeparator[Test, Property("TestCaseVersion", "001, B-8345, X543")]Di2015NewLinepublic void TestContextPropertyTest()Di2015NewLine{Di2015NewLine    Console.WriteLine(TestContext.CurrentContext.Test.Properties["TestCaseVersion"]);Di2015NewLine}Di2015NewLine
11771994Di2015UniqueSeparator[Test, Property("MajorVersion", "001"), Di2015NewLine Property("MinorVersion", "B-8345"), Property("Build", "X543")]Di2015NewLinepublic void TestContextPropertyTest()Di2015NewLine{Di2015NewLine    Console.WriteLine(TestContext.CurrentContext.Test.Properties["MajorVersion"]);Di2015NewLine    Console.WriteLine(TestContext.CurrentContext.Test.Properties["MinorVersion"]);Di2015NewLine    Console.WriteLine(TestContext.CurrentContext.Test.Properties["Build"]);Di2015NewLine}Di2015NewLine
11772022Di2015UniqueSeparatorstatic int extra;Di2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLineDi2015NewLine        foreach (string s in args)Di2015NewLine        {Di2015NewLine            extra = int.Parse(s);Di2015NewLineDi2015NewLineDi2015NewLine            Calculate(extra);Di2015NewLine        }Di2015NewLine     }Di2015NewLine
11772022Di2015UniqueSeparatordouble max = System.Convert.ToDouble(numbers[j]);
11772022Di2015UniqueSeparatordouble max = System.Convert.ToDouble(extra);
11772169Di2015UniqueSeparatorpublic void m() {Di2015NewLine    Console.WriteLine("Parallelable code sample");Di2015NewLine    [Parallel("Begin of a parallel block")] {Di2015NewLine        Console.WriteLine("Code exec by the main thread");Di2015NewLine        [Process("First process")] { /âˆ— Computation here âˆ—/ }Di2015NewLine        [Process] { /âˆ— Computation here âˆ—/ }Di2015NewLine    }Di2015NewLine    Console.WriteLine("Here is sequential");Di2015NewLine}Di2015NewLine
11772169Di2015UniqueSeparator[Parallel("Parallelable code sample", ACSIndex=1)]Di2015NewLine[Process("First process", ACSIndex=2)]Di2015NewLine[Process(ACSIndex=3)]Di2015NewLinepublic void m() {Di2015NewLine    Console.WriteLine("Parallelable code sample");Di2015NewLine    Annotation.Begin(1); { // [Parallel]Di2015NewLine        Console.WriteLine("Code exec by the main thread");Di2015NewLine        Annotation.Begin(2); /âˆ— [Process("First process")] âˆ—/ { Â· Â· Â· }Di2015NewLine        Annotation.End(2);Di2015NewLine        Annotation.Begin(3); /âˆ— [Process] âˆ—/ { Â· Â· Â· }Di2015NewLine        Annotation.End(3);Di2015NewLine    } Di2015NewLine    Annotation.End(1);Di2015NewLine}Di2015NewLine
11772169Di2015UniqueSeparatorBegin(1)
11772169Di2015UniqueSeparatorAnnotation
11772169Di2015UniqueSeparatorASCIndex=1
11772169Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var f = new FooClass();Di2015NewLine    f.Foo();Di2015NewLine}Di2015NewLineDi2015NewLineclass BarClassDi2015NewLine{Di2015NewLine    public static void Bar()Di2015NewLine    {Di2015NewLine        var st = new StackTrace();Di2015NewLine        var frame = st.GetFrame(1);Di2015NewLine        var m = frame.GetMethod();Di2015NewLine        Console.WriteLine(String.Format("'{0}' called me from '{1}'", m.DeclaringType.Name, m));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass FooClassDi2015NewLine{Di2015NewLine    public void Foo()Di2015NewLine    {Di2015NewLine        BarClass.Bar();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11772301Di2015UniqueSeparatorDog { mammal, quadruped }Di2015NewLineMan { mammal, biped }Di2015NewLinePrayingMantis { insect, quadruped }Di2015NewLinePegion { bird, biped }Di2015NewLine
11772301Di2015UniqueSeparator<mammal, Dog>Di2015NewLine<mammal, Man>Di2015NewLine<bird, Pigeon> Di2015NewLine<insect, PrayingMantis>Di2015NewLine<biped, Man>Di2015NewLine<biped, Pigeon>Di2015NewLine<quadruped, Dog>Di2015NewLine<quadruped, PrayingMantis>Di2015NewLine
11772301Di2015UniqueSeparatorKeys
11772301Di2015UniqueSeparatormammal { Dog, Man }Di2015NewLinebird { Pigeon }Di2015NewLineinsect { PrayingMantis }Di2015NewLinebiped { Man,  Pigeon }Di2015NewLinequadruped { Dog, PrayingMantis }Di2015NewLine
11772301Di2015UniqueSeparator//Flatten the groups into a KeyValuePair<string, Contacts> list using LINQ.Di2015NewLinevar flatGroups Di2015NewLine    = listGroups.SelectMany(Di2015NewLine        ctc => ctc.Groups.Select(Di2015NewLine             grp => new KeyValuePair<string, Contact>(grp, ctc))).ToList();          Di2015NewLineDi2015NewLine//Apply CollectionViewSource group on the `Key`.Di2015NewLinevar collectionVwSrc = new CollectionViewSource();Di2015NewLinecollectionVwSrc.Source = flatGroups;Di2015NewLinecollectionVwSrc.GroupDescriptions.Add(new PropertyGroupDescription("Key"));Di2015NewLineDi2015NewLine//Apply groups as itemssource to the TreeView.Di2015NewLineMyGroupsTree.ItemsSource = collectionVwSrc.View.Groups; Di2015NewLine
11772301Di2015UniqueSeparator    <TreeView x:Name="MyGroupsTree">Di2015NewLine        <TreeView.ItemTemplate>Di2015NewLine            <HierarchicalDataTemplate ItemsSource="{Binding Items}">Di2015NewLine                <!--GroupItem.Name--> Di2015NewLine                <TextBlock Text="{Binding Path=Name}" Di2015NewLine                           FontWeight="Bold"/>Di2015NewLine                <HierarchicalDataTemplate.ItemTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <!--Contact.Name-->Di2015NewLine                        <TextBlock Text="{Binding Value.Name}"/>Di2015NewLine                    </DataTemplate>Di2015NewLine                </HierarchicalDataTemplate.ItemTemplate>Di2015NewLine            </HierarchicalDataTemplate>Di2015NewLine        </TreeView.ItemTemplate>Di2015NewLine    </TreeView>Di2015NewLine
11772303Di2015UniqueSeparator<%@ Page Theme="ThemeName" %>Di2015NewLine<%@ Page StyleSheetTheme="ThemeName" %>Di2015NewLine
11772303Di2015UniqueSeparator<configuration>Di2015NewLine    <system.web>Di2015NewLine        <pages StyleSheetTheme="Themename" />Di2015NewLine    </system.web>Di2015NewLine</configuration>Di2015NewLine
11772352Di2015UniqueSeparatorpublic class TestClass Di2015NewLine{Di2015NewLine    public static event OrderUpdateHandler UpdatedOrder;Di2015NewLineDi2015NewLine    public void UpdateData(Order order) Di2015NewLine    {Di2015NewLine        // ...Di2015NewLineDi2015NewLine        OnOrderUpdated(args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Order GetConfirmedOrder(int id, TimeSpan waitToConfirm) Di2015NewLine    {Di2015NewLine        var order = GetOrderFromDatabase();Di2015NewLineDi2015NewLine        if (order.Status == OrderStatus.Pending) Di2015NewLine        {Di2015NewLine             var eventHandle = new EventWaitHandle(false, EventResetMode.AutoReset);Di2015NewLineDi2015NewLine             UpdatedOrderHandler waiter = (s, e) =>Di2015NewLine             {Di2015NewLine                if (e.Order.Id == id)Di2015NewLine                {Di2015NewLine                    order = e.Order;Di2015NewLine                    eventHandle.Set();Di2015NewLine                }Di2015NewLine            };Di2015NewLineDi2015NewLine            UpdatedOrder += waiter;Di2015NewLineDi2015NewLine            if (!eventHandle.WaitOne(waitToConfirm))Di2015NewLine            {                Di2015NewLine                return order;Di2015NewLine            }Di2015NewLineDi2015NewLine            OrderUpdated -= waiter;Di2015NewLine        }Di2015NewLineDi2015NewLine        return order;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11772357Di2015UniqueSeparatorpublic class CommentsController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    { Di2015NewLine        return View("Articles/Index", model );Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ArticlesController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    { Di2015NewLine        return View();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11772381Di2015UniqueSeparatorvar metadata = dependencyProperty.GetMetadata(typeof(SomeDependencyObject));Di2015NewLinevar defaultValue = metadata.DefaultValue;Di2015NewLine
11772429Di2015UniqueSeparator   public virtual HistoryData ReadFirst()Di2015NewLine    {Di2015NewLine        using (HistoryContainer db = new HistoryContainer())Di2015NewLine        {Di2015NewLine            return db.HistoryData.Where(x => x.MP == IpAddress).FirstOrDefault();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11772494Di2015UniqueSeparatorGame
11772494Di2015UniqueSeparatorGame
11772494Di2015UniqueSeparatorIServiceProvider
11772494Di2015UniqueSeparatorContentManager
11772513Di2015UniqueSeparatorTimeSpan difference = dateTime1 - dateTime2;Di2015NewLine
11772513Di2015UniqueSeparatordifference.TotalDays
11772513Di2015UniqueSeparatorvar days = difference.TotalDays;Di2015NewLine
11772543Di2015UniqueSeparatornull
11772543Di2015UniqueSeparator"abc"
11772543Di2015UniqueSeparator""
11772543Di2015UniqueSeparatornull
11772543Di2015UniqueSeparator.String.Set
11772577Di2015UniqueSeparatorHostingEnvironment.RegisterObject
11772577Di2015UniqueSeparatorIRegisteredObject
11772577Di2015UniqueSeparatorMyJobProcessor
11772577Di2015UniqueSeparatorINotifyWhenDisposed
11772577Di2015UniqueSeparatorDisposeNotifyingObject
11772577Di2015UniqueSeparatorpublic class MyJobProcessor : DisposeNotifyingObject, IRegisteredObjectDi2015NewLine{Di2015NewLine    public void Execute() { ... }Di2015NewLine    public void Stop(bool immediate) { ... }Di2015NewLine}Di2015NewLine
11772577Di2015UniqueSeparatorTask.Factory.StartNew(() => Di2015NewLine    { Di2015NewLine        try Di2015NewLine        { Di2015NewLine            processor.Execute(); Di2015NewLine        } Di2015NewLine        finally Di2015NewLine        { Di2015NewLine            processor.Dispose); Di2015NewLine        }Di2015NewLine    });Di2015NewLine
11772577Di2015UniqueSeparatorBind<MyJobProcessor>().ToSelf().Named("MyJobProcessor").DefinesNamedScope("MyJobProcessorScope");Di2015NewLineBind<IUnitOfWork>().To<UnitOfWork>().WhenAnyAnchestorNamed("MyJobProcessor").InNamedScope("MyJobProcessorScope");Di2015NewLine
11772578Di2015UniqueSeparator.csproj
11772578Di2015UniqueSeparator  <Target Name="AfterBuild">Di2015NewLine    <CallTarget Targets="CopyXULRunnerToDeployFolder" />Di2015NewLine  </Target>Di2015NewLine  <Target Name="CopyXULRunnerToDeployFolder">Di2015NewLine      <ItemGroup>Di2015NewLine          <MyFiles Include="XULRunner\\**\\*.*" />Di2015NewLine      </ItemGroup>Di2015NewLine      <Microsoft.Build.Tasks.Copy SourceFiles="@(MyFiles)"  DestinationFiles="@(MyFiles->'$(OutputPath)\\XULRunner\\%(RecursiveDir)%(Filename)%(Extension)')"/>Di2015NewLine  </Target>Di2015NewLine
11772590Di2015UniqueSeparatorwaittime
11772590Di2015UniqueSeparator/t:100
11772590Di2015UniqueSeparator/t
11772590Di2015UniqueSeparatorwaittime
11772590Di2015UniqueSeparatorwaittime
11772590Di2015UniqueSeparatorwaittime
11772590Di2015UniqueSeparatorwaittime = arg[args.Length-1]Di2015NewLine
11772732Di2015UniqueSeparatorToString()
11772732Di2015UniqueSeparatorType.Parse()
11772732Di2015UniqueSeparatortotalValue = int.Parse(Session["price"].ToString()) * int.Parse(Session["day"].ToString()); Di2015NewLinetotalValue += Session["IsChauffeurUsed"].ToString().Equals("yes", StringComparer.CurrentCultureIgnoreCase) ? 30 : 0;Di2015NewLine
11773174Di2015UniqueSeparator  $(document).ready(function () {Di2015NewLine        $('[ID$=txtLastname]').live('keyup.autocomplete', function () {Di2015NewLineDi2015NewLine            $(this).autocomplete({Di2015NewLine                source: function (request, response) {Di2015NewLine                    $.ajax({Di2015NewLine                        url: '<%=ResolveUrl("~/Resources/WebService.asmx/LastName") %>',Di2015NewLine                        data: "{ 'prefix': '" + request.term + "'}",Di2015NewLine                        dataType: "json",Di2015NewLine                        type: "POST",Di2015NewLine                        contentType: "application/json; charset=utf-8",Di2015NewLine                        success: function (data) {Di2015NewLine                            response($.map(data.d, function (item) {Di2015NewLine                                return {Di2015NewLine                                    label: item.split('-')[0],Di2015NewLine                                    val: item.split('-')[1]Di2015NewLine                                }Di2015NewLine                            }))Di2015NewLine                        },Di2015NewLine                        error: function (response) {Di2015NewLine                            alert(response.responseText);Di2015NewLine                        },Di2015NewLine                        failure: function (response) {Di2015NewLine                            alert(response.responseText);Di2015NewLine                        }Di2015NewLine                    });Di2015NewLine                },Di2015NewLine                select: function (e, i) {Di2015NewLine                },Di2015NewLine                minLength: 1Di2015NewLine            });Di2015NewLine        });Di2015NewLine
11773174Di2015UniqueSeparator [WebMethod]Di2015NewLine[ScriptMethod(ResponseFormat = ResponseFormat.Json)]Di2015NewLinepublic string[] LastName(string prefix)Di2015NewLine{Di2015NewLine    List<string> customers = new List<string>();Di2015NewLine    using (SqlConnection conn = new SqlConnection())Di2015NewLine    {Di2015NewLine        string connectionstring = CCMMUtility.GetCacheForWholeApplication();Di2015NewLine        conn.ConnectionString = connectionstring;Di2015NewLine        using (SqlCommand cmd = new SqlCommand())Di2015NewLine        {Di2015NewLine            cmd.CommandText = "select distinct top(10) Lastname from tblusers where  " +Di2015NewLine            "Lastname  like '%'+ @SearchText + '%' order by Lastname";Di2015NewLine            cmd.Parameters.AddWithValue("@SearchText", prefix);Di2015NewLine            cmd.Connection = conn;Di2015NewLine            conn.Open();Di2015NewLine            using (SqlDataReader sdr = cmd.ExecuteReader())Di2015NewLine            {Di2015NewLine                while (sdr.Read())Di2015NewLine                {Di2015NewLine                    customers.Add(string.Format("{0}", sdr["Lastname"]));Di2015NewLine                }Di2015NewLine            }Di2015NewLine            conn.Close();Di2015NewLine        }Di2015NewLine        return customers.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11773195Di2015UniqueSeparatorpublic interface IViewModelDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ViewModelOne : IViewModelDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ViewModelTwo : IViewModelDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class SiteMapper Di2015NewLine{Di2015NewLine    private Dictionary<Site, List<IViewModel>> map { get; set; }Di2015NewLineDi2015NewLine    public void Register(Site site, IViewModel viewModel)Di2015NewLine    {Di2015NewLine        // Add combination to mapDi2015NewLine    }Di2015NewLineDi2015NewLine    public List<IViewModel> MapDomainToViews(Site site) Di2015NewLine    {Di2015NewLine        if (map.ContainsKey(site))Di2015NewLine            return map[site];Di2015NewLine        elseDi2015NewLine            ....Di2015NewLine    }Di2015NewLine}Di2015NewLine
11773224Di2015UniqueSeparatorint totalValue = 0;Di2015NewLine            int total = 0;Di2015NewLine            totalValue = int.Parse("2".ToString()) * int.Parse("2".ToString());Di2015NewLine            string s = "Yes";Di2015NewLine            totalValue += s.Equals("Yes",StringComparison.CurrentCultureIgnoreCase) ? 80 : 0;Di2015NewLine
11773251Di2015UniqueSeparatorDataRow table = sessions.Tables["Sessions"].NewRow();Di2015NewLine
11773251Di2015UniqueSeparatorDataRow table = sessions.Tables["Sessions"].Rows[0];Di2015NewLine
11773251Di2015UniqueSeparatorda
11773367Di2015UniqueSeparatorpublic int WeekNumber(DateTime date)Di2015NewLine{Di2015NewLine    CultureInfo ciCurr = CultureInfo.CurrentCulture;Di2015NewLine    int weekNum = ciCurr.Calendar.GetWeekOfYear(date,Di2015NewLine                                          CalendarWeekRule.FirstFourDayWeek,Di2015NewLine                                          DayOfWeek.Monday);Di2015NewLine    return weekNum;Di2015NewLine}Di2015NewLine
11773388Di2015UniqueSeparatortryMethod1()Di2015NewLine{Di2015NewLine   if (calledEvent1 && calledEvent2 && calledEvent3) {Di2015NewLine       Method1();Di2015NewLine       calledEvent1 = false;Di2015NewLine       calledEvent2 = false;Di2015NewLine       calledEvent3 = false;Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineeventHandler1() {Di2015NewLine    calledEvent1 = true; Di2015NewLine    // do stuffDi2015NewLine    tryMethod1();Di2015NewLine}Di2015NewLine
11773417Di2015UniqueSeparatorSqlDataAdapter SDA = new SqlDataAdapter("SELECT * FROM jadwalkuliah where Subject = '"+ textBox1.Text + "'", Di2015NewLine
11773422Di2015UniqueSeparatorSystem.Web.Caching
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparator100
11773460Di2015UniqueSeparator100
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparator120
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparator121
11773460Di2015UniqueSeparatorvar newValue = i;
11773460Di2015UniqueSeparatori
11773460Di2015UniqueSeparator101
11773460Di2015UniqueSeparatorvar newValue = i
11773460Di2015UniqueSeparator101
11773460Di2015UniqueSeparatoroldValue
11773460Di2015UniqueSeparator120
11773460Di2015UniqueSeparatornewValue
11773460Di2015UniqueSeparator101
11773490Di2015UniqueSeparatorCreate PROCEDURE [dbo].[updateGamePlay]Di2015NewLine    @GamePlayID int,Di2015NewLine    @ParticipantID int,Di2015NewLine    @GameVersionID int,Di2015NewLine    @GameID int,Di2015NewLine    @GameScenarioID int,Di2015NewLine    @Start DateTime,Di2015NewLine    @End DateTime,Di2015NewLine    @Success varchar(10)Di2015NewLineASDi2015NewLine    UPDATE GamePlayDi2015NewLine    OUTPUT INSERTED.GamePlayIDDi2015NewLine    SET Di2015NewLine    ParticipantID = @ParticipantID,GameVersionID = @GameVersionID,GameID = @GameID,GameScenarioID = @GameScenarioID,StartDateTime = @Start,EndDateTime = @End,Success = @SuccessDi2015NewLineWHERE GamePlayID = @GamePlayIDDi2015NewLine
11773568Di2015UniqueSeparatorSystem.BitConverter.ToSingle(..)
11773568Di2015UniqueSeparator<br>Di2015NewLinefloat f1,f2,f3,f4,f5,f6,f7;<br>Di2015NewLinef1 = System.BitConvert.ToSingle(bytearr,0);<br>Di2015NewLinef2 = System.BitConvert.ToSingle(bytearr,4);<br>Di2015NewLinef3 = System.BitConvert.ToSingle(bytearr,8);<br>Di2015NewLine...<br>Di2015NewLinef7 = System.BitConvert.ToSingle(bytearr,24);Di2015NewLine
11773588Di2015UniqueSeparator    public static string InsertStringRepeatedly(string source, int skip, int insertEvery, string toInsert)Di2015NewLine    {Di2015NewLine        var sb = new StringBuilder();Di2015NewLine        using (var sr = new StringReader(source))Di2015NewLine        {Di2015NewLine            var buffer = new char[Math.Max(skip, insertEvery)];Di2015NewLine            var read = sr.Read(buffer, 0, skip);Di2015NewLine            sb.Append(buffer, 0, read);Di2015NewLine            while (sr.Peek() > 0)Di2015NewLine            {Di2015NewLine                sb.Append(toInsert);Di2015NewLine                read = sr.Read(buffer, 0, insertEvery);Di2015NewLine                sb.Append(buffer, 0, read);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine
11773588Di2015UniqueSeparator    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var result = InsertStringRepeatedly("Lorem ipsum dolor sit amet,", 10, 3, "[Here]");Di2015NewLine        Console.Write("\\"");Di2015NewLine        Console.Write(result);Di2015NewLine        Console.WriteLine("\\""); //quotes to show we dealt with edge cases correctlyDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
11773611Di2015UniqueSeparatorvoid GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLineif (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine{            Di2015NewLine   e.Row.CssClass="your css class";Di2015NewLine}Di2015NewLine}Di2015NewLine
11773644Di2015UniqueSeparatorstring IsChauffeurUsed = Session["IsChauffeurUsed"].ToString();Di2015NewLinetotalValue += IsChauffeurUsed.Equals("Yes", StringComparison.CurrentCultureIgnoreCase) ? 80 : 0;Di2015NewLine
11773657Di2015UniqueSeparatorLine Continuation Character
11773657Di2015UniqueSeparator;
11773657Di2015UniqueSeparator+
11773657Di2015UniqueSeparatorLine Continuation Character
11773657Di2015UniqueSeparatorShippingConfirmationLabel.Text = Di2015NewLine            "Using " + Di2015NewLine            ShippingTypeRadioButtonList.SelectedValue + Di2015NewLine            "shipping to:<br>"; Di2015NewLine
11773657Di2015UniqueSeparator;
11773705Di2015UniqueSeparatorpublic class Product{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string ID { get; set; }   Di2015NewLine}Di2015NewLine
11773705Di2015UniqueSeparatorProduct p1 = new Product {Name="Product1",ID="1"};Di2015NewLineProduct p2 = new Product {Name="Product2",ID="2"};Di2015NewLineList<Product> pList = new List<Product>() {p1,p2};Di2015NewLine
11773705Di2015UniqueSeparatorSystem.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();Di2015NewLinestring sJSON = serializer.Serialize(pList);Di2015NewLine
11773777Di2015UniqueSeparatorpublic string getimg(int indexRow)Di2015NewLine{ Di2015NewLine}Di2015NewLine
11773777Di2015UniqueSeparator  if (Convert.ToInt32(myRow["ranking"]) == 1 Di2015NewLine         && Convert.ToInt32(myRow["yourIndex"]) == indexRow ) //in order to select nice rowDi2015NewLine  {  Di2015NewLine     return "price/con1.png"; Di2015NewLine  }Di2015NewLineDi2015NewLine  return "price/con2.png";   Di2015NewLine
11773777Di2015UniqueSeparatorimg style="width:55px;height:55px" alt=""  src="<%# getimg(1) %>" />  //getimg(1) print first row.   Di2015NewLine
11773777Di2015UniqueSeparatorinput type="hidden" runat="server" id="test" value="<%# DataBinder.Eval(Container.DataItem, "YourIndex") />%>" />Di2015NewLine
11773851Di2015UniqueSeparatorstring salt = "AAAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA";Di2015NewLinestring password = "AAAAAAAAA-BBBB-AAAA-AAAA-AAAAAAAAAAAA";Di2015NewLineDi2015NewLinestring EncryptedValue(string data)Di2015NewLine{   Di2015NewLinebyte[] saltBytes = System.Text.Encoding.UTF8.GetBytes(salt);Di2015NewLineDi2015NewLinestring encryptedData = String.Empty;Di2015NewLineusing (System.Security.Cryptography.AesManaged aes = new System.Security.Cryptography.AesManaged())Di2015NewLine{Di2015NewLine    var rfc = new System.Security.Cryptography.Rfc2898DeriveBytes(password, saltBytes);Di2015NewLineDi2015NewLine    aes.BlockSize = aes.LegalBlockSizes[0].MaxSize; Di2015NewLine    aes.KeySize = aes.LegalKeySizes[0].MaxSize; Di2015NewLine    aes.Key = rfc.GetBytes(32); Di2015NewLine    rfc.Reset(); Di2015NewLine    aes.IV = rfc.GetBytes(16);Di2015NewLineDi2015NewLine    // Create a decrytor to perform the stream transform.Di2015NewLine    System.Security.Cryptography.ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);Di2015NewLineDi2015NewLine    // Create the streams used for encryption.Di2015NewLine    using (MemoryStream msEncrypt = new MemoryStream())Di2015NewLine    {Di2015NewLine        using (System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream(msEncrypt, encryptor, System.Security.Cryptography.CryptoStreamMode.Write))Di2015NewLine        {Di2015NewLine            using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))Di2015NewLine            {Di2015NewLine                // Write all data to the stream.Di2015NewLine                swEncrypt.Write(data);Di2015NewLine            }Di2015NewLineDi2015NewLine            encryptedData = Convert.ToBase64String(msEncrypt.ToArray());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinereturn encryptedData;Di2015NewLine}Di2015NewLine
11773851Di2015UniqueSeparatorprotected string Decrypt(string encryptedData)Di2015NewLine    {Di2015NewLine        const string password = "AAAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA";Di2015NewLine        const string salt = "AAAAAAAAA-BBBB-AAAA-AAAA-AAAAAAAAAAAA";Di2015NewLineDi2015NewLine        IBuffer pwBuffer = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);Di2015NewLine        IBuffer saltBuffer = CryptographicBuffer.ConvertStringToBinary(salt, BinaryStringEncoding.Utf8);Di2015NewLine        IBuffer cipherBuffer = CryptographicBuffer.DecodeFromBase64String(encryptedData);Di2015NewLineDi2015NewLine        KeyDerivationAlgorithmProvider keyDerivationProvider = KeyDerivationAlgorithmProvider.OpenAlgorithm("PBKDF2_SHA1");Di2015NewLineDi2015NewLine        KeyDerivationParameters pbkdf2Parms = KeyDerivationParameters.BuildForPbkdf2(saltBuffer, 1000);Di2015NewLineDi2015NewLine        CryptographicKey keyOriginal = keyDerivationProvider.CreateKey(pwBuffer);Di2015NewLine        IBuffer keyMaterial = CryptographicEngine.DeriveKeyMaterial(keyOriginal, pbkdf2Parms, 32);Di2015NewLineDi2015NewLine        CryptographicKey derivedPwKey = keyDerivationProvider.CreateKey(pwBuffer);Di2015NewLineDi2015NewLine        IBuffer saltMaterial = CryptographicEngine.DeriveKeyMaterial(derivedPwKey, pbkdf2Parms, 16);Di2015NewLineDi2015NewLine        SymmetricKeyAlgorithmProvider symProvider = SymmetricKeyAlgorithmProvider.OpenAlgorithm("AES_CBC_PKCS7");Di2015NewLineDi2015NewLine        CryptographicKey symmKey = symProvider.CreateSymmetricKey(keyMaterial);Di2015NewLineDi2015NewLine        IBuffer resultBuffer = CryptographicEngine.Decrypt(symmKey, cipherBuffer, saltMaterial);Di2015NewLineDi2015NewLine        byte[] asd;Di2015NewLine        CryptographicBuffer.CopyToByteArray(resultBuffer, out asd);Di2015NewLine        string result = CryptographicBuffer.ConvertBinaryToString(BinaryStringEncoding.Utf8, resultBuffer);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
11773993Di2015UniqueSeparatorstring.Join(",", Encoding.Unicode.GetBytes("10.10.10.11").Select(x => x.ToString("X2")).ToArray());Di2015NewLine
11773993Di2015UniqueSeparatorString.Join
11773993Di2015UniqueSeparatorIEnumerable<String>
11773993Di2015UniqueSeparatorToArray
11774047Di2015UniqueSeparatorusing Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLine<...>Di2015NewLineDi2015NewLine        formatConditionObj = (FormatCondition)myRange.FormatConditionsDi2015NewLine            .Add(XlFormatConditionType.xlExpression, Di2015NewLine            Type.Missing, true, Type.Missing, Type.Missing, Di2015NewLine            Type.Missing, Type.Missing, Type.Missing);Di2015NewLineDi2015NewLine        formatConditionObj.Interior.ColorIndex = 5;Di2015NewLineDi2015NewLine        Range myNewRange = ws.Range["a10:a15"];Di2015NewLine        formatConditionObj.ModifyAppliesToRange(myNewRange);Di2015NewLineDi2015NewLine <...>Di2015NewLine
11774124Di2015UniqueSeparatorvar items = rawData.Count / 3;Di2015NewLinevar first = rawData.Take(items).ToList();Di2015NewLinevar second = rawData.Skip(items).Take(items).ToList();Di2015NewLinevar third = rawDate.Skip(2 * items).ToList();Di2015NewLine
11774133Di2015UniqueSeparator*
11774133Di2015UniqueSeparator*
11774133Di2015UniqueSeparator^A.*
11774133Di2015UniqueSeparator.
11774133Di2015UniqueSeparatorbool match = actualValue.StartsWith("A");Di2015NewLine
11774171Di2015UniqueSeparatorpublic class BounceProvidersSection : ConfigurationSectionDi2015NewLine{Di2015NewLine    [ConfigurationCollection(typeof(ConfigCollection<BounceProviderConfig>), AddItemName = "Provider")]Di2015NewLine    [ConfigurationProperty("Providers", IsRequired = true)]Di2015NewLine    public ConfigCollection<BounceProviderConfig> ProvidersDi2015NewLine    {Di2015NewLine        get { return (ConfigCollection<BounceProviderConfig>)this["Providers"]; }Di2015NewLine        set { this["Providers"] = value; }Di2015NewLine    }                Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BounceProviderConfig : ConfigurationElementDi2015NewLine{Di2015NewLine    [ConfigurationProperty("Id", IsRequired = true)]Di2015NewLine    public int IdDi2015NewLine    {Di2015NewLine        get { return (int)this["Id"]; }Di2015NewLine        set { this["Id"] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ConfigurationProperty("Columns", IsRequired = false)]Di2015NewLine    public BounceProviderColumns ColumnsDi2015NewLine    {Di2015NewLine        get { return (BounceProviderColumns)this["Columns"]; }Di2015NewLine        set { this["Columns"] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static BounceProviderConfig GetByProviderId(int providerId)Di2015NewLine    {Di2015NewLine        var section = ConfigUtils.GetConfigurationSection<BounceProvidersSection>("BounceProviders");Di2015NewLine        foreach (BounceProviderConfig provider in section.Providers)Di2015NewLine        {Di2015NewLine            if (provider.Id == providerId)Di2015NewLine                return provider;Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BounceProviderColumns : ConfigurationElementDi2015NewLine{Di2015NewLine    [ConfigurationProperty("Email", IsRequired = true)]Di2015NewLine    public ColumnConfig EmailDi2015NewLine    {Di2015NewLine        get { return (ColumnConfig)this["Email"]; }Di2015NewLine        set { this["Email"] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ConfigurationProperty("Date", IsRequired = true)]Di2015NewLine    public DateColumnConfig DateDi2015NewLine    {Di2015NewLine        get { return (DateColumnConfig)this["Date"]; }Di2015NewLine        set { this["Date"] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ConfigurationProperty("Message", IsRequired = true)]Di2015NewLine    public ColumnConfig MessageDi2015NewLine    {Di2015NewLine        get { return (ColumnConfig)this["Message"]; }Di2015NewLine        set { this["Message"] = value; }Di2015NewLine    }        Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ColumnConfig : ConfigurationElementDi2015NewLine{Di2015NewLine    [ConfigurationProperty("Name", IsRequired = true)]Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return (string)this["Name"]; }Di2015NewLine        set { this["Name"] = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11774188Di2015UniqueSeparator<ListView.ItemContainerStyle>Di2015NewLine    <Style TargetType="ListViewItem">Di2015NewLine        <Setter Property="HorizontalContentAlignment" Value="Center"/>Di2015NewLine    </Style>Di2015NewLine</ListView.ItemContainerStyle>Di2015NewLine
11774312Di2015UniqueSeparator<script>Di2015NewLine$("#HiddenField1").Val("Your Value");Di2015NewLine</script>Di2015NewLine
11774312Di2015UniqueSeparatorstring value=HiddenField1.Value;Di2015NewLine
11774314Di2015UniqueSeparatorvar query = from s in TableADi2015NewLine            join r in TableB on s.Email equals r.EmailDi2015NewLine            where s.Title != r.TitleDi2015NewLine            select s.Title;Di2015NewLine
11774314Di2015UniqueSeparatorvar query = from s in TableADi2015NewLine            join r in TableB Di2015NewLine              on new { s.Email, s.Foo } equals new { r.Email, r.Foo }Di2015NewLine            where s.Title != r.TitleDi2015NewLine            select s.Title;Di2015NewLine
11774324Di2015UniqueSeparator<Grid x:Name="BackSpaceButton">Di2015NewLine    <TextBox x:Name="txt_remove" Height="46" Margin="234,119,225,0" TextWrapping="Wrap" VerticalAlignment="Top" GotFocus="txt_remove_GotFocus" TabIndex="2"/>        Di2015NewLine    <RepeatButton x:Name="rbtn_remove" Focusable="False"  Content="Backspace" Delay="400" Interval="100" Margin="415,123,0,0" RenderTransformOrigin="0.667,0.854" Click="rbtn_remove_Click" LostMouseCapture="rbtn_remove_LostMouseCapture" HorizontalAlignment="Left" Height="41" VerticalAlignment="Top" Width="66"/>        Di2015NewLine</Grid>Di2015NewLine
11774324Di2015UniqueSeparator private void rbtn_remove_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        GetInstance = GetTextbox as TextBox;Di2015NewLine        if (GetTextbox != null)Di2015NewLine        {Di2015NewLineDi2015NewLine            string _CurrentValue = GetInstance.Text;Di2015NewLine            var _CareIndex = GetInstance.CaretIndex;Di2015NewLineDi2015NewLine            if (_CareIndex > 0)Di2015NewLine            {Di2015NewLine                string _Backspace = _CurrentValue.Remove(_CareIndex - 1, 1);Di2015NewLine                GetInstance.Text = _Backspace;                   Di2015NewLine                GetInstance.Focus();Di2015NewLine                GetInstance.CaretIndex = _CareIndex - 1;                   Di2015NewLineDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    void txt_remove_GotFocus(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        GetTextbox = (Control)sender;  Di2015NewLine    }Di2015NewLine    private void rbtn_remove_LostMouseCapture(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        GetInstance.Focus();Di2015NewLine    }Di2015NewLine
11774427Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace Example.CustomControlDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Provides an extra event for the numericUpDown control that fires after the value stops scrolling.Di2015NewLine    /// </summary>Di2015NewLine    public class NumericDelayedChange : NumericUpDownDi2015NewLine    {Di2015NewLine        /// <summary>Di2015NewLine        /// Flag that the value has actually changed.Di2015NewLine        /// </summary>Di2015NewLine        /// <devdoc>Di2015NewLine        /// Just in case the control was clicked somewhere other than the up/down buttons.Di2015NewLine        /// </devdoc>Di2015NewLine        private bool valueHasChanged = false;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Fires when the value has stopped being scrolled.Di2015NewLine        /// </summary>Di2015NewLine        public event EventHandler OnAfterScollValueChanged;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Captures that value as having changed.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="e"></param>Di2015NewLine        protected override void OnValueChanged(EventArgs e)Di2015NewLine        {Di2015NewLine            valueHasChanged = true;Di2015NewLine            base.OnValueChanged(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Captures the mouse up event to identify scrolling stopped when used in combination with the value changed flag.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mevent"></param>Di2015NewLine        protected override void OnMouseUp(MouseEventArgs mevent)Di2015NewLine        {Di2015NewLine            base.OnMouseUp(mevent);Di2015NewLine            if (mevent.Button == System.Windows.Forms.MouseButtons.Left)Di2015NewLine            {Di2015NewLine                PerformOnAfterScollValueChanged();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Captures the key up/down events to identify scrolling stopped when used in combination with the value changed flag.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="mevent"></param>Di2015NewLine        protected override void OnKeyUp(KeyEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down)Di2015NewLine            {Di2015NewLine                PerformOnAfterScollValueChanged();Di2015NewLine            }Di2015NewLine            base.OnKeyUp(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Checks the value changed flag and fires the OnAfterScollValueChanged event.Di2015NewLine        /// </summary>Di2015NewLine        private void PerformOnAfterScollValueChanged()Di2015NewLine        {Di2015NewLine            if (valueHasChanged)Di2015NewLine            {Di2015NewLine                valueHasChanged = false;Di2015NewLine                if (OnAfterScollValueChanged != null) { OnAfterScollValueChanged(this, new EventArgs()); }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11774452Di2015UniqueSeparatorfunction show(Hos, mins, secds) {Di2015NewLineDi2015NewLine        var hours = Hos;Di2015NewLine        var minutes = mins;Di2015NewLine        var seconds = parseInt(secds, 10);Di2015NewLineDi2015NewLineDi2015NewLine        if (hours == 0)Di2015NewLine            hours = 12Di2015NewLineDi2015NewLine        if (parseInt(seconds, 10) < 10) {Di2015NewLine            seconds = "0" + parseInt(seconds, 10);Di2015NewLine        }Di2015NewLine        if (parseInt(hours, 10) < 10) {Di2015NewLine            hours= "0" + parseInt(hours, 10);Di2015NewLine        }Di2015NewLine        if (parseInt(minutes, 10) < 10) {Di2015NewLine            minutes= "0" + parseInt(minutes, 10);Di2015NewLine        }Di2015NewLine        document.getElementById('<%= Label1.ClientID %>').innerHTML = hours + ":" + minutes + ":" + seconds + " "Di2015NewLine        if (parseInt(seconds) == 59) {Di2015NewLine            seconds = 0;Di2015NewLine            if (parseInt(minutes, 10) == 59) {Di2015NewLine                if (parseInt(hours, 10) == 24) {Di2015NewLine                    hours = 0;Di2015NewLine                } else {Di2015NewLine                    hours = parseInt(hours, 10) + 1;Di2015NewLine                }Di2015NewLine            } else {Di2015NewLineDi2015NewLine                minutes = parseInt(minutes, 10) + 1;Di2015NewLine            }Di2015NewLine        } else {Di2015NewLine               seconds = parseInt(seconds, 10) + 1;Di2015NewLine       }Di2015NewLine        setTimeout("show('" + hours + "','" + minutes + "','" + seconds + "'" + " )", 1000)Di2015NewLine    }Di2015NewLine
11774770Di2015UniqueSeparatorstring Chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";Di2015NewLineDi2015NewLine    private static string Base10To62(string S) Di2015NewLine    {Di2015NewLine        string R = "";Di2015NewLine        var N = long.Parse(S);Di2015NewLine        do { R += Chars[(int)(N % 0x3E)]; } while ((N /= 0x3E) != 0);Di2015NewLine        return R;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string Base62To10(string S) Di2015NewLine    {Di2015NewLine        long R = 0;Di2015NewLine        int L = S.Length;Di2015NewLine        for (int i = 0; i < L; i++) R += Chars.IndexOf(S[i]) * (long)(System.Math.Pow(0x3E, i));Di2015NewLine        return R.ToString();Di2015NewLine    }Di2015NewLine
11774982Di2015UniqueSeparatorxlWorkSheet[0] = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLinexlWorkSheet[1] = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLinexlWorkSheet[2] = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLine
11774982Di2015UniqueSeparatorget_Item(2)
11774982Di2015UniqueSeparatorget_Item(3)
11775250Di2015UniqueSeparatorObjectContext
11775250Di2015UniqueSeparator this.ContextOptions.LazyLoadingEnabled = true;Di2015NewLine
11775296Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<?xml-stylesheet type="text/xsl" href="cdcatalog.xsl"?>Di2015NewLine<root>Di2015NewLine<employee>Di2015NewLine  <firstname>Kaushal</firstname>Di2015NewLine  <lastname>Parik</lastname>Di2015NewLine</employee>Di2015NewLine<employee>Di2015NewLine  <firstname>Abhishek</firstname>Di2015NewLine  <lastname>Swarnkar</lastname>Di2015NewLine</employee>Di2015NewLine</root>  Di2015NewLine
11775296Di2015UniqueSeparator    public class MyXslExtensionDi2015NewLine{Di2015NewLine    public string FormatName(string name)Di2015NewLine    {Di2015NewLine        return "Mr. " + name;Di2015NewLine    }Di2015NewLine}  Di2015NewLine
11775296Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" Di2015NewLine            xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl"Di2015NewLine            xmlns:myUtils="pda:MyUtils">Di2015NewLine<xsl:output method="xml" indent="yes"/>Di2015NewLine<xsl:variable name="vQ">Mr. </xsl:variable>Di2015NewLine<xsl:template match="@*|node()">Di2015NewLine<xsl:copy>Di2015NewLine  <xsl:apply-templates select="@*|node()"/>Di2015NewLine</xsl:copy>Di2015NewLine</xsl:template>Di2015NewLine<xsl:template match="employee/firstname">Di2015NewLine<xsl:element name="firstname">Di2015NewLine  <xsl:value-of select="myUtils:FormatName(.)" />Di2015NewLine</xsl:element>Di2015NewLine</xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11775296Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        XsltArgumentList arguments = new XsltArgumentList();Di2015NewLine        arguments.AddExtensionObject("pda:MyUtils", new MyXslExtension());Di2015NewLineDi2015NewLine        using (StreamWriter writer = new StreamWriter("books1.xml"))Di2015NewLine        {Di2015NewLine            XslCompiledTransform transform = new XslCompiledTransform();Di2015NewLine            transform.Load("transform.xslt");Di2015NewLine            transform.Transform("books.xml", arguments, writer);Di2015NewLine        }Di2015NewLine    }  Di2015NewLine
11775296Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<?xml-stylesheet type="text/xsl" href="cdcatalog.xsl"?>Di2015NewLine<root>Di2015NewLine<employee>Di2015NewLine<firstname>Mr. Kaushal</firstname>Di2015NewLine<lastname>Parik</lastname>Di2015NewLine</employee>Di2015NewLine<employee>Di2015NewLine<firstname>Mr. Abhishek</firstname>Di2015NewLine<lastname>Swarnkar</lastname>  Di2015NewLine</employee>Di2015NewLine</root>  Di2015NewLine
11775338Di2015UniqueSeparatorvar data = new Dictionary<string, List<TaxBand>>();Di2015NewLinedata = PopulateDataset();Di2015NewLineDi2015NewLinevar data2 = data.ToDictionary(kv => kv.Key, Di2015NewLine                              kv => kv.Value.ToDictionary(t=>t.County,t=>t.Tax) );Di2015NewLineDi2015NewLinevar s = JsonConvert.SerializeObject(data2,Newtonsoft.Json.Formatting.Indented);Di2015NewLine
11775338Di2015UniqueSeparator{Di2015NewLine  "North": {Di2015NewLine    "Merseyside": 5.0,Di2015NewLine    "Greater Manchester": 6.0Di2015NewLine  },Di2015NewLine  "South": {Di2015NewLine    "Greater London": 5.5,Di2015NewLine    "Surry": 6.2Di2015NewLine  }Di2015NewLine}Di2015NewLine
11775350Di2015UniqueSeparator  public class ErrorController : ControllerDi2015NewLine  {Di2015NewLine      public ActionResult Http404()Di2015NewLine      {Di2015NewLine          return View("~/BaseViews/Error/Http404.cshtml");Di2015NewLine      }Di2015NewLine  }Di2015NewLine
11775350Di2015UniqueSeparatorRequest.StatusCode = 200;Di2015NewLine
11775353Di2015UniqueSeparatorlock (this)
11775353Di2015UniqueSeparatorlock (typeof (MyType))
11775353Di2015UniqueSeparatorlock ("myLock")
11775353Di2015UniqueSeparatorlock (this)
11775353Di2015UniqueSeparatorlock (typeof (MyType))
11775353Di2015UniqueSeparatorMyType
11775353Di2015UniqueSeparatorlock("myLock")
11775353Di2015UniqueSeparatorlock (otherProductList) Di2015NewLine{Di2015NewLine    otherProductList = new List<IProduct>(); Di2015NewLine}Di2015NewLine
11775353Di2015UniqueSeparatorobject
11775353Di2015UniqueSeparatorlock
11775416Di2015UniqueSeparatorproject_start <= search_end AND project_end >= search_startDi2015NewLine
11775416Di2015UniqueSeparator(search_end IS NULL OR project_start <= search_end) ANDDi2015NewLine(search_start IS NULL OR project_end >= search_start)Di2015NewLine
11775898Di2015UniqueSeparatorcontinue;
11775898Di2015UniqueSeparatorforeach (ListItem item in cbxlFeatures.Items)Di2015NewLine{Di2015NewLine  foreach (DataRow row in dt.Rows)Di2015NewLine    {Di2015NewLine       if (item.Value.Equals(row["Id"].ToString()))Di2015NewLine        {Di2015NewLine          item.Selected = Convert.ToBoolean(row["Id"]); Di2015NewLineDi2015NewLine          // this is what you need hereDi2015NewLine          continue;Di2015NewLine        }Di2015NewLine         break;Di2015NewLine     }Di2015NewLine }Di2015NewLine
11775909Di2015UniqueSeparatorextern
11776032Di2015UniqueSeparatorDELETE FROM GuestsDi2015NewLine
11776032Di2015UniqueSeparatorTRUNCATE TABLE GuestsDi2015NewLine
11776032Di2015UniqueSeparatorsqlCommand.ExecuteNonQuery();  Di2015NewLine
11776032Di2015UniqueSeparatorEndExecuteNonQuery
11776058Di2015UniqueSeparator/ImagePage.xaml?tag={0}&tag2={1}"Di2015NewLine
11776059Di2015UniqueSeparatorvar res = MyDictionary.Where(kvp => MyList.Any(item => kvp.Value.Contains(item)))Di2015NewLine                      .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);Di2015NewLine
11776086Di2015UniqueSeparatorThread.CurrentThread.Name = "Main Thread";Di2015NewLine
11776549Di2015UniqueSeparatorAcceptButton
11776549Di2015UniqueSeparatorButton
11776657Di2015UniqueSeparatorBinaryFormatter
11776657Di2015UniqueSeparatorISerializable
11776657Di2015UniqueSeparatorSerializationInfo
11776657Di2015UniqueSeparatorStreamingContext
11776746Di2015UniqueSeparatorSplashScreen s = new SplashScreen(assembly, "myImage.png");
11776746Di2015UniqueSeparatorassembly
11776746Di2015UniqueSeparatorvar assembly = Assembly.Load("MyAssembly")
11776746Di2015UniqueSeparator"MyAssembly"
11776766Di2015UniqueSeparatorHtmlNode sibling = strong.SelectSingleNode("following-sibling::text()");Di2015NewLineConsole.WriteLine("Course ID = " + sibling.InnerText.Trim());Di2015NewLine
11776814Di2015UniqueSeparatorSPUtility.CreateISO8601DateTimeFromSystemDateTime(DateTime.Today)Di2015NewLine
11776837Di2015UniqueSeparator<img src="image.png?dummy=8sn7ahh2" />Di2015NewLine
11776862Di2015UniqueSeparatorusing(myDialog d = new myDialog())Di2015NewLine{Di2015NewLine     if(DialogResult.OK == d.ShowDialog())Di2015NewLine     { Di2015NewLine         //do stuff (for example, read some property values on the dialog)Di2015NewLine         if(d.ExecuteSomeAction == true)Di2015NewLine              // Do some action -> call a database query or something.....Di2015NewLine     } Di2015NewLine}Di2015NewLine
11776862Di2015UniqueSeparatorthis.Hide()
11776862Di2015UniqueSeparatorthis.Close()
11776885Di2015UniqueSeparatorpublic void GetProvider(string typeName, ref IStorageProvider provider)Di2015NewLine{Di2015NewLine    if (provider == null)Di2015NewLine    {Di2015NewLine        lock (_lock)Di2015NewLine        {Di2015NewLine            if (provider == null)Di2015NewLine            {Di2015NewLine                var storageProviderType = Type.GetType(typeName);Di2015NewLine                provider = (IStorageProvider)Activator.CreateInstance(storageProviderType);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11776885Di2015UniqueSeparatorprivate static IStorageProvider BAWP8StorageProviderDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        GetProvider(BLL.Providers.ConfigurationProvider.Instance.BAWP8StorageProviderTypeName, ref _BAWP8storageProvider);Di2015NewLine        return _BAWP8StorageProvider;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11776885Di2015UniqueSeparatorref
11776998Di2015UniqueSeparatorreturn
11776998Di2015UniqueSeparatorusing
11776998Di2015UniqueSeparatortry/finally
11776998Di2015UniqueSeparatortrue
11776998Di2015UniqueSeparatorreturn false
11776998Di2015UniqueSeparatorscope.Complete()
11776998Di2015UniqueSeparatorDispose
11776998Di2015UniqueSeparatorvar scope = new TransactionScope())Di2015NewLinetryDi2015NewLine{Di2015NewLine  // my core logicDi2015NewLine  return true; // if condition met elseDi2015NewLine  return false;Di2015NewLine  scope.Complete();Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine  if( scope != null) Di2015NewLine    ((IDisposable)scope).Dispose();Di2015NewLine}Di2015NewLine
11776998Di2015UniqueSeparatorscope.Complete()
11777063Di2015UniqueSeparatorInsertCommand
11777063Di2015UniqueSeparatorpublic void SaveDataToDB(List<Animal> animals)Di2015NewLine{Di2015NewLine    SqlConnection connection = new SqlConnection(connectionString);Di2015NewLine    DataSet dataset = new DataSet();Di2015NewLine    string sql = "SELECT * From Guests";Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);Di2015NewLine        adapter.Fill(dataset, "Guests");Di2015NewLineDi2015NewLine        // Create the InsertCommand.Di2015NewLine        SqlCommand command = new SqlCommand(Di2015NewLine            "INSERT INTO Guests (Name, Age, Gender, ImportantInfo) " +Di2015NewLine            "VALUES (@Name, @Age, @Gender, @ImportantInfo)", connection);Di2015NewLineDi2015NewLine        // Add the parameters for the InsertCommand.Di2015NewLine        command.Parameters.Add("@Name", SqlDbType.NVarChar, 50, "Name");Di2015NewLine        command.Parameters.Add("@Age", SqlDbType.Int, 4, "Age");Di2015NewLine        command.Parameters.Add("@Gender", SqlDbType.NVarChar, 6, "Gender");Di2015NewLine        command.Parameters.Add("@ImportantInfo", SqlDbType.NVarChar, 100, "ImportantInfo");Di2015NewLineDi2015NewLine        foreach (Animal animal in animals)Di2015NewLine        {Di2015NewLine            DataRow row = dataset.Tables["Guests"].NewRow();Di2015NewLine            row["Name"] = animal.Name;Di2015NewLine            row["Age"] = animal.Age;Di2015NewLine            row["Gender"] = animal.Gender;Di2015NewLine            row["Info"] = animal.ImportantInfo;Di2015NewLineDi2015NewLine            dataset.Tables["Guests"].Rows.Add(row);Di2015NewLine        }Di2015NewLine        new SqlCommandBuilder(adapter);Di2015NewLine        adapter.Update(dataset.Tables["Guests"]);Di2015NewLine        connection.Close();Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11777092Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLineclass BlinkingButtonRenderer : ToolStripProfessionalRenderer {Di2015NewLine    public BlinkingButtonRenderer(ToolStrip strip) {Di2015NewLine        this.strip = strip;Di2015NewLine        this.strip.Renderer = this;Di2015NewLine        this.strip.Disposed += new EventHandler(strip_Disposed);Di2015NewLine        this.blinkTimer = new Timer { Interval = 500 };Di2015NewLine        this.blinkTimer.Tick += delegate { blink = !blink; strip.Invalidate(); };Di2015NewLine    }Di2015NewLineDi2015NewLine    public void BlinkButton(ToolStripButton button, bool enable) {Di2015NewLine        if (!enable) blinkButtons.Remove(button);Di2015NewLine        else blinkButtons.Add(button);Di2015NewLine        blinkTimer.Enabled = blinkButtons.Count > 0;Di2015NewLine        strip.Invalidate();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnRenderButtonBackground(ToolStripItemRenderEventArgs e) {Di2015NewLine        var btn = e.Item as ToolStripButton;Di2015NewLine        if (blink && btn != null && blinkButtons.Contains(btn)) {Di2015NewLine            Rectangle bounds = new Rectangle(Point.Empty, e.Item.Size);Di2015NewLine            e.Graphics.FillRectangle(Brushes.Black, bounds);Di2015NewLine        }Di2015NewLine        else base.OnRenderButtonBackground(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void strip_Disposed(object sender, EventArgs e) {Di2015NewLine        blinkTimer.Dispose();Di2015NewLine    }Di2015NewLineDi2015NewLine    private List<ToolStripItem> blinkButtons = new List<ToolStripItem>();Di2015NewLine    private bool blink;Di2015NewLine    private Timer blinkTimer;Di2015NewLine    private ToolStrip strip;Di2015NewLine}Di2015NewLine
11777092Di2015UniqueSeparatorpublic partial class Form1 : Form {Di2015NewLine    public Form1() {Di2015NewLine        InitializeComponent();Di2015NewLine        blinker = new BlinkingButtonRenderer(toolStrip1);Di2015NewLine    }Di2015NewLine    private void toolStripButton1_Click(object sender, EventArgs e) {Di2015NewLine        blink = !blink;Di2015NewLine        blinker.BlinkButton(toolStripButton1, blink);Di2015NewLine    }Di2015NewLine    private bool blink;Di2015NewLine    private BlinkingButtonRenderer blinker;Di2015NewLine}Di2015NewLine
11777137Di2015UniqueSeparatorlosing strong typing
11777137Di2015UniqueSeparatornew {Name="test"}, new{Id=1, Name="test2"})Di2015NewLine
11777137Di2015UniqueSeparatorpublic static class MyHelpersDi2015NewLine{Di2015NewLine        public static Expression<Func<TReport, bool>> CreatePredicate<TReport>(this object predicateObject)Di2015NewLine        {Di2015NewLine            var parameterExpression = Expression.Parameter(typeof(TReport), "item");Di2015NewLine            Expression memberExpression = parameterExpression;Di2015NewLine            var objectDictionary = MakeDictionary(predicateObject);Di2015NewLine            foreach (var entry in objectDictionary.Where(entry => typeof(TReport).GetProperty(entry.Key) == null))Di2015NewLine            {Di2015NewLine               throw new ArgumentException(string.Format("Type {0} has no property {1}", typeof(TReport).Name, entry.Key));Di2015NewLine            }Di2015NewLine            var equalityExpressions = GetBinaryExpressions(objectDictionary, memberExpression).ToList();Di2015NewLine            var body = equalityExpressions.First();Di2015NewLine            body = equalityExpressions.Skip(1).Aggregate(body, Expression.And);Di2015NewLineDi2015NewLine            return Expression.Lambda<Func<TReport, bool>>(body, new[] { parameterExpression });Di2015NewLine        }Di2015NewLine        private static IDictionary<string, object> MakeDictionary(object withProperties)Di2015NewLine        {Di2015NewLine            var properties = TypeDescriptor.GetProperties(withProperties);Di2015NewLine            return properties.Cast<PropertyDescriptor>().ToDictionary(property => property.Name, property => property.GetValue(withProperties));Di2015NewLine        }Di2015NewLineDi2015NewLine        private static IEnumerable<BinaryExpression> GetBinaryExpressions(IDictionary<string, object> dic, Expression expression)Di2015NewLine        {Di2015NewLine            return dic.Select(m => Expression.Equal(Expression.Property(expression, m.Key), Expression.Constant(m.Value)));Di2015NewLine        }Di2015NewLine}Di2015NewLine
11777137Di2015UniqueSeparatorpublic void Update<TReport>(object updateOnly, object predicateObject) {Di2015NewLine   var predicate = predicateObject.CreatePredicate<TReport>();Di2015NewLine   yourGenericApi.Update(updateOnly, predicate);Di2015NewLine}Di2015NewLine
11777137Di2015UniqueSeparatorforeach (var entry in objectDictionary.Where(entry => typeof(TReport).GetProperty(entry.Key) == null))Di2015NewLine{Di2015NewLine    throw new ArgumentException(string.Format("Type {0} has no property {1}", typeof(TReport).Name, entry.Key));Di2015NewLine}Di2015NewLine
11777137Di2015UniqueSeparatorvar objectDictionary = MakeDictionary(predicateObject);Di2015NewLine
11777212Di2015UniqueSeparatorfor (i = 0; i < 1000; i++) Di2015NewLine    { Di2015NewLine        m_streamWriter.BaseStream.Seek(0, SeekOrigin.End); Di2015NewLine        m_streamWriter.WriteLine("{0} ", MethodCall(strURL, strInput)); Di2015NewLine    } Di2015NewLine    m_streamWriter.Flush(); Di2015NewLine    m_streamWriter.Close(); Di2015NewLine
11777218Di2015UniqueSeparator    [PropertiesMustMatch( "Password", "ConfirmPassword", ErrorMessage = "The                    password and confirmation password do not match." )]Di2015NewLine    public class RegisterModelDi2015NewLine    {Di2015NewLine        [Required]Di2015NewLine        [DisplayName( "User name" )]Di2015NewLine        public string UserName { get; set; }Di2015NewLineDi2015NewLine        [Required]Di2015NewLine        [DataType( DataType.EmailAddress )]Di2015NewLine        [DisplayName( "Email address" )]Di2015NewLine        public string Email { get; set; }Di2015NewLineDi2015NewLine        [Required]Di2015NewLine        [ValidatePasswordLength]Di2015NewLine        [DataType( DataType.Password )]Di2015NewLine        [DisplayName( "Password" )]Di2015NewLine        public string Password { get; set; }Di2015NewLineDi2015NewLine        [Required]Di2015NewLine        [DataType( DataType.Password )]Di2015NewLine        [DisplayName( "Confirm password" )]Di2015NewLine        public string ConfirmPassword { get; set; }Di2015NewLine}Di2015NewLine
11777224Di2015UniqueSeparatorPaddingMode
11777224Di2015UniqueSeparatorcipher.BlockSize
11777224Di2015UniqueSeparatorcipher.FeedbackSize
11777224Di2015UniqueSeparatorFlushFinalBlock
11777229Di2015UniqueSeparatorFileInfo
11777229Di2015UniqueSeparatorEquals
11777229Di2015UniqueSeparatorGetHashCode
11777229Di2015UniqueSeparatorFileInfo
11777229Di2015UniqueSeparatorIEqualityComparer<FileInfo>
11777229Di2015UniqueSeparatorIntersect
11777229Di2015UniqueSeparatorIntersectBy
11777229Di2015UniqueSeparatorDistinctBy
11777351Di2015UniqueSeparator<DataTemplate> Di2015NewLine <TextBlock Text="{Binding Path=Status}"> Di2015NewLine <TextBlock.Style> Di2015NewLine   <Style TargetType="TextBlock"> Di2015NewLine     <Setter Property="Foreground" Value="Red"/> Di2015NewLine     <Style.Triggers> Di2015NewLine       <DataTrigger Binding="{Binding Path=Locked}" Value="True"> Di2015NewLine          <Setter Property="Foreground" Value="Green"/> Di2015NewLine        </DataTrigger> Di2015NewLine       <DataTrigger Binding="{Binding Path=Locked}" Value="False"> Di2015NewLine          <Setter Property="Foreground" Value="Red"/> Di2015NewLine        </DataTrigger> Di2015NewLine      </Style.Triggers> Di2015NewLine     </Style> Di2015NewLine   </TextBlock.Style> Di2015NewLine  </TextBlock> Di2015NewLine<DataTemplate>Di2015NewLine
11777398Di2015UniqueSeparatorRadListView
11777398Di2015UniqueSeparatorvoid Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ...Di2015NewLine    RadListView1.DataSource = dataSource;Di2015NewLine    RadListView1.DataBind();Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11777398Di2015UniqueSeparatorvoid Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ...Di2015NewLine    if (!this.IsPostBack)Di2015NewLine    {Di2015NewLine        RadListView1.DataSource = dataSource;Di2015NewLine        RadListView1.DataBind();Di2015NewLine    }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11777398Di2015UniqueSeparatorStandardButton
11777398Di2015UniqueSeparatorCheckedChanged
11777398Di2015UniqueSeparatorToggleButton
11777398Di2015UniqueSeparatorItemCommand
11777398Di2015UniqueSeparatorCommandArgument
11777398Di2015UniqueSeparatorRadButton
11777404Di2015UniqueSeparatoroMsg.Recipients
11777404Di2015UniqueSeparator// I assume that senderForm.getRecipientList() returns List<String>Di2015NewLineforeach(String recipient in senderForm.getRecipientList())Di2015NewLine{Di2015NewLine    Outlook.Recipient oRecip = (Outlook.Recipient)oRecips.Add(recipient);Di2015NewLine    oRecip.Resolve();Di2015NewLine}Di2015NewLine
11777404Di2015UniqueSeparatorsenderForm.getRecipientList().ToString()
11777404Di2015UniqueSeparatorString [] rcpts = senderForm.getRecipientList().ToString().Split(new string[] { "; " }, StringSplitOptions.None);Di2015NewLine
11777404Di2015UniqueSeparatorforeach
11777573Di2015UniqueSeparatorEnvironment.CommandLine
11777573Di2015UniqueSeparatorEnvironment.GetCommandLineArgs
11777704Di2015UniqueSeparatorsql:variable
11777704Di2015UniqueSeparatorUPDATE  temp_xmlloc Di2015NewLineSET     myxml.modify('replace value of (/name/@id[.="XML"])[1] with sql:variable("@myname") ')Di2015NewLinewhere   name = @myname;Di2015NewLine
11777766Di2015UniqueSeparatorprivate ItemViewModel _selectedOne;Di2015NewLineDi2015NewLinepublic ItemViewModel SelectedOne Di2015NewLine{Di2015NewLine    get { return _selectedOne; }Di2015NewLine    set Di2015NewLine    {Di2015NewLineDi2015NewLine        if(_selectedOne != value)Di2015NewLine        _selectedOne = value;Di2015NewLineDi2015NewLine        RaisePropertyChanged("SelectedOne");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11777775Di2015UniqueSeparatorint
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatordecimal?
11777775Di2015UniqueSeparatorint
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatordecimal?
11777775Di2015UniqueSeparatorint
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorint
11777775Di2015UniqueSeparatordecimal?
11777775Di2015UniqueSeparatorint?
11777775Di2015UniqueSeparatorobject o = 1; // BoxingDi2015NewLinedecimal d = (decimal) o; // Unboxing, but to the wrong typeDi2015NewLine
11777843Di2015UniqueSeparatorMicrosoft.Office.Interop.Outlook.Application oApp = Globals.ThisAddIn.Application;Di2015NewLineMicrosoft.Office.Interop.Outlook.MAPIFolder inboxFolder = oApp.GetNamespace("MAPI").GetDefaultFolder(OlDefaultFolders.olFolderInbox);Di2015NewLineDi2015NewLineStorageItem storage = inboxFolder.GetStorage("IPM.Configuration.Autocomplete", OlStorageIdentifierType.olIdentifyByMessageClass);Di2015NewLineDi2015NewLinePropertyAccessor propertyAcc = storage.PropertyAccessor;Di2015NewLineDi2015NewLinebyte[] got = propertyAcc.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x7C090102");Di2015NewLine
11777843Di2015UniqueSeparatorbyte[]
11777911Di2015UniqueSeparatorNewid()
11777961Di2015UniqueSeparator public static void SetFileReadAccess(string FileName, bool SetReadOnly)Di2015NewLine {Di2015NewLine      FileInfo fInfo = new FileInfo(FileName);Di2015NewLineDi2015NewLine      // Set the IsReadOnly property.Di2015NewLine      fInfo.IsReadOnly = SetReadOnly;Di2015NewLineDi2015NewLine }Di2015NewLine
11777961Di2015UniqueSeparatorFile.SetAttributes(yourFilePath, FileAttributes.Hidden);Di2015NewLine
11778159Di2015UniqueSeparatorDataPropertyName
11778159Di2015UniqueSeparatorerrorsGrid.AutoGenerateColumns = false
11778181Di2015UniqueSeparatorprivate
11778378Di2015UniqueSeparatorSystem.IO.File
11778378Di2015UniqueSeparatorMy.Computer.FileSystem
11778378Di2015UniqueSeparatorFile.Move(oldname, newname);  //File renames things just like Unix does- by moving themDi2015NewLineFile.Delete(filename);Di2015NewLine
11778445Di2015UniqueSeparatorToString
11778445Di2015UniqueSeparatorGetResponseStream()
11778445Di2015UniqueSeparatorStream.ToString
11778445Di2015UniqueSeparator// Prefer casting over "as" unless you're going to check it...Di2015NewLineusing (HttpWebResponse response = (HttpWebResponse) request.GetResponse())Di2015NewLine{Di2015NewLine    using (Stream stream = response.GetResponseStream())Di2015NewLine    {Di2015NewLine        // For diagnostics, let's assume UTF-8Di2015NewLine        using (StreamReader reader = new StreamReader(stream))Di2015NewLine        {Di2015NewLine            Console.WriteLine(reader.ReadToEnd());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11778445Di2015UniqueSeparator(with StreamReader)
11778445Di2015UniqueSeparatorXmlDocument.Load
11778445Di2015UniqueSeparator{"messages":{"message":"1 Device(s) returned."},"devices":{"device":Di2015NewLine    {"@id":"00","uuid":"00000000","phonenumber":"000â€Œâ€‹000",Di2015NewLine     "user name":"0000","name":"Guy,Somebody","platform":"platform","os":"III",Di2015NewLine     "version":"1â€Œâ€‹.1.1"}},"appName":"someApp"}Di2015NewLine
11778505Di2015UniqueSeparator string something = " whatever    ";Di2015NewLine List<char> result = something.ToList();Di2015NewLine result.RemoveAll(c => c == ' ');Di2015NewLine something = new string(result.ToArray());Di2015NewLine
11778505Di2015UniqueSeparator  static string TrimWhitespace(string theString)Di2015NewLine    {Di2015NewLine        theString = "  some kind of string example ";Di2015NewLine        theString = theString.TrimEnd();Di2015NewLine        theString = theString.TrimStart();Di2015NewLine        // MessageBox.Show(theString, "");Di2015NewLine        return theString;Di2015NewLine    }Di2015NewLine
11778608Di2015UniqueSeparator// This is the 'strategy' in your caseDi2015NewLinepublic interface IInteractionDi2015NewLine{Di2015NewLine    void Do();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GameObjectDi2015NewLine{Di2015NewLine    // Here is your list of interactions - you can do whatever you want with it.Di2015NewLine    public List<IInteraction> Interactions { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// Here is an interactionDi2015NewLinepublic class Shake : IInteractionDi2015NewLine{Di2015NewLine    public void Do()Di2015NewLine    {Di2015NewLine        ....Di2015NewLine    }Di2015NewLine}Di2015NewLine
11778627Di2015UniqueSeparatorList<MyClass> l = (List<MyClass>)o;Di2015NewLine
11778627Di2015UniqueSeparatorList<MyClass> l = o as List<MyClass>;Di2015NewLine
11778627Di2015UniqueSeparatorList<> l = o as List<>;Di2015NewLine
11778627Di2015UniqueSeparatorclass C<T>Di2015NewLine{Di2015NewLine    public List<T> List = new List<T>();Di2015NewLine}Di2015NewLine
11778627Di2015UniqueSeparatorC<MyClass> c = new C<MyClass>();Di2015NewLinec.List.Add(new MyClass());Di2015NewLine
11778627Di2015UniqueSeparatorType listType = typeof(List<>);Di2015NewLineType targetType = listType.MakeGenericType(typeof(YourClass));Di2015NewLineList<YourClass> list = (List<YourClass>)Activator.CreateInstance(targetType);Di2015NewLine
11778652Di2015UniqueSeparator<xsl:param name="useId" select="/data/listitems[1]/@CtrId" />Di2015NewLineDi2015NewLine<xsl:template match="/">Di2015NewLine  <html>Di2015NewLine    <head>Di2015NewLine      <title>Untitled</title>Di2015NewLine    </head>Di2015NewLine    <body>Di2015NewLine      <xsl:apply-templates select="data/listitems[@CtrId = $useId]"/>Di2015NewLine    </body>Di2015NewLine  </html>Di2015NewLine</xsl:template>Di2015NewLineDi2015NewLine<xsl:template match="listitems">Di2015NewLine  <xsl:value-of select="concat(@name, ' ')" />Di2015NewLine</xsl:template>Di2015NewLine
11778652Di2015UniqueSeparatorhtml
11778652Di2015UniqueSeparatorlistitems
11778652Di2015UniqueSeparator<xsl:param>
11778652Di2015UniqueSeparatorselect="'Id2'"
11778653Di2015UniqueSeparatorpublic enum WaitTime Di2015NewLine{Di2015NewLine     Min, Max, MedDi2015NewLine}Di2015NewLine
11778653Di2015UniqueSeparatorswitch ((WaitTime)Enum.Parse(typeof(WaitTime), arg.Replace("/:", string.Empty)))Di2015NewLine{Di2015NewLine    case WaitTime.Max:Di2015NewLine            return 0;Di2015NewLine    case WaitTime.Med:Di2015NewLine            return 1000;Di2015NewLine    case WaitTime.Min:Di2015NewLine           return 2000;Di2015NewLine    default:Di2015NewLine           return 0;Di2015NewLine}Di2015NewLine
11778774Di2015UniqueSeparatorobject input = db.table.FirstOrDefault();Di2015NewLine
11778774Di2015UniqueSeparatorobject input; Di2015NewLineinput = db.table.FirstOrDefault();Di2015NewLine
11778774Di2015UniqueSeparator!=null
11778831Di2015UniqueSeparatortry/finally
11778831Di2015UniqueSeparatorDispose
11778831Di2015UniqueSeparatorIDisposable tmp = _myDisposableField; Di2015NewLineDi2015NewLineif (tmp != null) Di2015NewLine    tmp.Dispose();Di2015NewLine
11778831Di2015UniqueSeparator_myDisposableField
11778831Di2015UniqueSeparatorIDisposable
11778831Di2015UniqueSeparatorIDisposable
11778831Di2015UniqueSeparatorpublic void Dispose()
11778831Di2015UniqueSeparatortry-finally
11778831Di2015UniqueSeparatorusing
11778831Di2015UniqueSeparatorfinally
11778831Di2015UniqueSeparatorThreadAbortException
11778853Di2015UniqueSeparator listView1.Items.Add(new ListViewItem("new item"));Di2015NewLine listView1.Items.Add("List item text", 3);  // Adds a new item with ImageIndex 3Di2015NewLine listView1.Items.Add("string");Di2015NewLine
11778853Di2015UniqueSeparator ListView1.Items.Add(ListViewDataItem item);Di2015NewLine
11778920Di2015UniqueSeparatorstring test = "<2012-01-01>stuff</2012-01-01><2012-05-01>stuff2</2012-05-01>";Di2015NewLineDi2015NewLinevar regex = new Regex(@"<(/?)(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)>");Di2015NewLinevar result = regex.Replace(test, @"<$1date-$2-$3-$4>");Di2015NewLineDi2015NewLineConsole.WriteLine(result);Di2015NewLineDi2015NewLine//output:Di2015NewLine//<date-2012-01-01>stuff</date-2012-01-01><date-2012-05-01>stuff2</date-2012-05-01>Di2015NewLine
11779110Di2015UniqueSeparatorvar files = (string[])e.Data.GetData(DataFormats.FileDrop);Di2015NewLineforeach (var filename in files)Di2015NewLine{Di2015NewLine    var nameOnly = System.IO.Path.GetFileName(filename);Di2015NewLine}Di2015NewLine
11779168Di2015UniqueSeparatorvar hasOneRole =Di2015NewLine    new [] { "Admin", "Log" }Di2015NewLine    .SelectMany( screen => ( ConfigurationManager.AppSettings[ screen + "ScreenRoles" ] ?? "" ).Split( ',' ) )Di2015NewLine    .Contains( roleName );Di2015NewLine
11779234Di2015UniqueSeparatorUseShellExecute = false
11779234Di2015UniqueSeparatorFileName
11779234Di2015UniqueSeparatorArguments
11779234Di2015UniqueSeparatorRedirectStandardOutput
11779234Di2015UniqueSeparatorUseShellExecute = false
11779234Di2015UniqueSeparatorprivate void run_cmd(string cmd, string args)Di2015NewLine{Di2015NewLine     ProcessStartInfo start = new ProcessStartInfo();Di2015NewLine     start.FileName = "my/full/path/to/python.exe";Di2015NewLine     start.Arguments = string.Format("{0} {1}", cmd, args);Di2015NewLine     start.UseShellExecute = false;Di2015NewLine     start.RedirectStandardOutput = true;Di2015NewLine     using(Process process = Process.Start(start))Di2015NewLine     {Di2015NewLine         using(StreamReader reader = process.StandardOutput)Di2015NewLine         {Di2015NewLine             string result = reader.ReadToEnd();Di2015NewLine             Console.Write(result);Di2015NewLine         }Di2015NewLine     }Di2015NewLine}Di2015NewLine
11779248Di2015UniqueSeparatorSelectNodes
11779248Di2015UniqueSeparatorXmlNodeList result = myXmlNode.SelectNodes("descendant::node()");Di2015NewLine
11779248Di2015UniqueSeparatorXmlnodeList result = myXmlNode.SelectNodes("descendant::node() | descendant::*/@*");Di2015NewLine
11779275Di2015UniqueSeparatoryourWindow.GetType().Assembly.LocationDi2015NewLine
11779360Di2015UniqueSeparatorOrders.Add(row.IsNull(columnName) ? 0 : (int)row[columnName]);Di2015NewLine
11779404Di2015UniqueSeparatorxsd.exe
11779404Di2015UniqueSeparatorPOCO
11779404Di2015UniqueSeparatorListView
11779498Di2015UniqueSeparatorTask
11779498Di2015UniqueSeparatorDoSomethingAsync
11779498Di2015UniqueSeparatorDoSomethingCore
11779498Di2015UniqueSeparatorDoSomethingAsync
11779498Di2015UniqueSeparatorasync
11779498Di2015UniqueSeparatorawait
11779498Di2015UniqueSeparatorConfigureAwait(false)
11779498Di2015UniqueSeparatorawait
11779498Di2015UniqueSeparatorasync
11779498Di2015UniqueSeparatorasync
11779498Di2015UniqueSeparatorTask
11779498Di2015UniqueSeparatorDoSomethingAsync
11779515Di2015UniqueSeparator// In a new Windows Forms Application, drop a GroupBox with a ComboBox and a CheckBox insideDi2015NewLine// Then drop a TextBox outside the ComboBox. Then copy-paste.Di2015NewLineDi2015NewLine// this goes somewhere in your projectDi2015NewLinepublic static class handlerClassDi2015NewLine{Di2015NewLine    public static string ControlChanged(Control whatChanged)Di2015NewLine    {Di2015NewLine        return whatChanged.Name;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// And then you go like this in the Load event of the GroupBox containerDi2015NewLinevoid Form1_Load(object sender, EventArgs args)Di2015NewLine{Di2015NewLine    foreach (Control c in groupBox1.Controls)Di2015NewLine    {Di2015NewLine        if (c is ComboBox) Di2015NewLine            (c as ComboBox).SelectedValueChanged += (s, e) => { textBox1.Text = handlerClass.Handle(c); }; Di2015NewLine        if (c is CheckBox) Di2015NewLine            (c as CheckBox).CheckedChanged += (s, e) => { textBox1.Text = handlerClass.Handle(c); }; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11779515Di2015UniqueSeparatorControl
11779542Di2015UniqueSeparatorCurveItem Curve
11779542Di2015UniqueSeparatordouble startPos = Curve.Points[0].XDi2015NewLinedouble xStep = Curve.Points[Curve.NPts - 1].X / Curve.NPts;Di2015NewLineint xIndex = (int)(xPos / xStep + startPos);Di2015NewLine// Make sure it is in boundsDi2015NewLinexIndex = xIndex < 0 ? 0 : xIndex > Curve.NPts - 1 ? Curve.NPts - 1 : xIndex;Di2015NewLine
11779542Di2015UniqueSeparatorCurveItem n_curve;Di2015NewLineint index;Di2015NewLinezedGraphControl1.GraphPane.FindNearestPoint(mousePt, out n_curve, out index);Di2015NewLine
11779598Di2015UniqueSeparatorExpression.Convert(body, typeof(object))
11779598Di2015UniqueSeparatorprivate static Expression<Func<T, object>> CreateIdQuery()Di2015NewLine{Di2015NewLine    Type type = typeof(T);Di2015NewLine    PropertyInfo idProperty = type.GetProperty("Id");Di2015NewLine    ParameterExpression lambdaParam = Expression.Parameter(type, "x");Di2015NewLine    MemberExpression body = Expression.Property(lambdaParam, idProperty);Di2015NewLine    UnaryExpression converted = Expression.Convert(body, typeof(object));Di2015NewLine    LambdaExpression expr = Expression.Lambda(converted, lambdaParam);Di2015NewLine    return (Expression<Func<T, object>>)expr;Di2015NewLine}Di2015NewLine
11779641Di2015UniqueSeparatorModified
11779641Di2015UniqueSeparatorusing (var ctx = new DatabaseEntities())Di2015NewLine{Di2015NewLine    ctx.Contacts.Attach(cont);Di2015NewLineDi2015NewLine    // Marks all properties as modified, so new values will be pushed to DB on SaveChangesDi2015NewLine    ctx.ObjectStateManager.ChangeObjectState(cont, System.Data.EntityState.Modified);Di2015NewLineDi2015NewLine    ctx.SaveChanges();Di2015NewLine}Di2015NewLine
11779643Di2015UniqueSeparator//establish person objectDi2015NewLine//pass in some salary with it to BLDi2015NewLineBL.CalcPay(somePerson, someSalary);Di2015NewLine
11779643Di2015UniqueSeparator//inside of BLDi2015NewLine//if its a CEO they are lucky, they get paid twice as muchDi2015NewLine decimal toGive = someSalary;Di2015NewLineif(somePerson.IsCEO)Di2015NewLine toGive = toGive * 2; //CEO gets paid more :(Di2015NewLineDi2015NewLine//now call DALDi2015NewLineDAL.CalcPay(somePerson, toGive)Di2015NewLine
11779643Di2015UniqueSeparator//inside of DALDi2015NewLine//perform some update by calling for instance a sprocDi2015NewLineusing(SQL....)Di2015NewLine{Di2015NewLine}Di2015NewLine
11779643Di2015UniqueSeparator//inside UIDi2015NewLinestring s = BL.GetSomeString();Di2015NewLineDi2015NewLine//inside BLDi2015NewLinereturn DAL.GetSomeSomeString();Di2015NewLineDi2015NewLine//inside DALDi2015NewLinereturn someString;Di2015NewLine
11779835Di2015UniqueSeparatorpublic PgeDataContext(IDbConnection connection);Di2015NewLine
11779835Di2015UniqueSeparatorpublic PgeDataContext(IDbConnection connection){ /*blibli*/ }Di2015NewLine
11779835Di2015UniqueSeparatorprotected virtual void SendPropertyChanged(string propertyName);
11779835Di2015UniqueSeparatorprotected virtual void SendPropertyChanged(string propertyName) {Di2015NewLine/*blabla*/Di2015NewLine}
11779900Di2015UniqueSeparator__doPostBack(target, argument)
11779900Di2015UniqueSeparator__EVENTTARGET
11779900Di2015UniqueSeparator__EVENTARGUMENT
11779900Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function Closewindow() {Di2015NewLine        var Result = confirm("Are you sure want to delete?");Di2015NewLine        alert(Result);Di2015NewLine        if (Result == true) {Di2015NewLine            var txtConfirmResult = document.getElementById('txtConfirmresult');Di2015NewLine            txtConfirmResult.value = Result;//assigning to hidden text box Di2015NewLine            alert(txtConfirmresult.value); //displaying for debug purposesDi2015NewLine            __doPostBack( 'txtConfirmresult', Result ); //sending back to server.Di2015NewLine        return true;Di2015NewLine        }Di2015NewLine    else Di2015NewLine    {Di2015NewLine        document.getElementById('txtConfirmresult').value = Result;//assigning to hidden text box Di2015NewLine        alert('BYE');Di2015NewLine         return false;Di2015NewLine        }Di2015NewLine}Di2015NewLine
11779900Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        string target =  Request["__EVENTTARGET"];Di2015NewLine        string argument = Request["__EVENTARGUMENT"];Di2015NewLineDi2015NewLine        if (target != null && target.Equals( "txtConfirmresult" ) )Di2015NewLine        {Di2015NewLine             this.DoSomeGreatServerSideProcessing(argument);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11779900Di2015UniqueSeparatortxtConfirmresult
11779900Di2015UniqueSeparatorrunat="server"
11779900Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function Closewindow() {Di2015NewLine        var Result = confirm("Are you sure want to delete?");Di2015NewLine        document.getElementById('txtConfirmresult').value = Result;//assigning to hidden text box Di2015NewLine        if (Result) {Di2015NewLineDi2015NewLine            __doPostBack( 'UserConfirmedFormSubmission', "CloseWindow" ); //sending back to server.Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        else Di2015NewLine        { Di2015NewLine           return false;Di2015NewLine        }Di2015NewLine}Di2015NewLine
11779900Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        string target = Request["__EVENTTARGET"];Di2015NewLine        string argument = Request["__EVENTARGUMENT"];Di2015NewLineDi2015NewLine        if (!string.IsNullOrEmpty(target) && target.Equals("UserConfirmedFormSubmission"))Di2015NewLine        {Di2015NewLine             if ( !string.IsNullOrEmpty(argument) && argument.equals("CloseWindow"))Di2015NewLine             {Di2015NewLine                this.HandleUserRequestedCloseWinow();Di2015NewLine             }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11779922Di2015UniqueSeparator<Style TargetType="{x:Type TextBox}">Di2015NewLine                <Setter Property="RenderTransform">Di2015NewLine                    <Setter.Value>Di2015NewLine                        <RotateTransform Angle="-90"></RotateTransform>Di2015NewLine                    </Setter.Value>Di2015NewLine                </Setter>Di2015NewLine                <Style.Triggers>Di2015NewLine                    <Trigger Property="IsFocused" Value="True">Di2015NewLine                        <Setter Property="RenderTransform">Di2015NewLine                            <Setter.Value>Di2015NewLine                                <RotateTransform Angle="0"></RotateTransform>Di2015NewLine                            </Setter.Value>Di2015NewLine                        </Setter>Di2015NewLine                    </Trigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine
11779939Di2015UniqueSeparator"SELECT Field1,Field2,Field3 FROM Tbl WHERE Field1 LIKE @FL1"Di2015NewLine
11779939Di2015UniqueSeparatorstring.Format
11780136Di2015UniqueSeparatorc:\\inetpub\\Di2015NewLine    wwwroot\\Di2015NewLine        content\\Di2015NewLine            images\\Di2015NewLine                upload\\Di2015NewLine
11780136Di2015UniqueSeparatorc:\\inetpubDi2015NewLine    upload\\   <-- must be manually created on the web serverDi2015NewLine    wwwroot\\Di2015NewLine        content\\Di2015NewLine            images\\Di2015NewLine
11780137Di2015UniqueSeparatortxtUserID
11780137Di2015UniqueSeparatorTextBox
11780137Di2015UniqueSeparatornew Guid(txtUserID.Text)
11780137Di2015UniqueSeparatorGuid
11780138Di2015UniqueSeparatorusing (AppDataContext context = data.GetDataContext())Di2015NewLine{Di2015NewLine    docList = (from d in context.DocumentsDi2015NewLine                join f in context.DocumentFlags on d.docID equals f.docID into flgDi2015NewLine                where f.usrID == userID Di2015NewLine                from fff in flg.DefaultIfEmpty()Di2015NewLine                select new DocumentDi2015NewLine                {Di2015NewLine                    DocID = d.docID,Di2015NewLine                    DocNr = d.docNr,Di2015NewLine                    ScanTime = d.docScanTime.Value,Di2015NewLine                    UserID = fff.userID,Di2015NewLine                    IsDelete = fff.isDelete.Value,Di2015NewLine                    IsArchive = fff.isArchive.Value,Di2015NewLine                }).ToList<Document>();Di2015NewLine}Di2015NewLine
11780224Di2015UniqueSeparatorif(HttpContext != null && Di2015NewLine   HttpContext.Current != null &&Di2015NewLine   HttpContext.Current.Session != null &&Di2015NewLine   HttpContext.Current.Session[AppConstants.SK_POLICYCLASSID] != null)Di2015NewLine{Di2015NewLine    // Get the value here.Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // Something was null. Either set a default value or throw an ExceptionDi2015NewLine}Di2015NewLine
11780391Di2015UniqueSeparatorprivate void OnConnectionResumed()Di2015NewLine{Di2015NewLine    Task.Factory.StartNew(() =>Di2015NewLine        {Di2015NewLine            var session = connection.CreateSession();Di2015NewLineDi2015NewLine            ...Di2015NewLine        });Di2015NewLine}Di2015NewLine
11780418Di2015UniqueSeparatorLTRIM(RTRIM(
11780418Di2015UniqueSeparatorSingle
11780418Di2015UniqueSeparatorsdi
11780418Di2015UniqueSeparatorSET ANSI_NULLS ONDi2015NewLineGODi2015NewLineDi2015NewLineSET QUOTED_IDENTIFIER ONDi2015NewLineGODi2015NewLineDi2015NewLineCREATE TABLE [dbo].[One](Di2015NewLine    [OneId] [nvarchar](10) NOT NULL,Di2015NewLine    [SomeInt] [int] NOT NULL,Di2015NewLine CONSTRAINT [PK_Delivery] PRIMARY KEY CLUSTERED Di2015NewLine(Di2015NewLine    [OneId] ASCDi2015NewLine)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]Di2015NewLine) ON [PRIMARY]Di2015NewLineGODi2015NewLineDi2015NewLineCREATE TABLE [dbo].[Two](Di2015NewLine    [TwoId] [int] NOT NULL,Di2015NewLine    [OneId] [nvarchar](10) NOT NULL,Di2015NewLine CONSTRAINT [PK_DeliveryItem] PRIMARY KEY CLUSTERED Di2015NewLine(Di2015NewLine    [TwoId] ASC,Di2015NewLine    [OneId] ASCDi2015NewLine)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]Di2015NewLine) ON [PRIMARY]Di2015NewLineDi2015NewLineGODi2015NewLineDi2015NewLineINSERT INTO Two(TwoId, OneId) VALUES (1, '1 ')Di2015NewLineINSERT INTO One(OneId, SomeInt) VALUES ('1', 1.0)Di2015NewLine
11780418Di2015UniqueSeparatorSHOULD NOT BE PRINTED!!!
11780418Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel.DataAnnotations;Di2015NewLineusing System.Data.Entity;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinenamespace EFTestDi2015NewLine{Di2015NewLine    public class TwoDi2015NewLine    {Di2015NewLine        public int TwoId { get; set; }Di2015NewLine        public string OneId { get; set; }Di2015NewLine        public virtual One One { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class OneDi2015NewLine    {Di2015NewLine        public string OneId { get; set; }Di2015NewLine        public virtual ICollection<Two> Twos { get; private set; }Di2015NewLineDi2015NewLine        // Comment out this property and it will workDi2015NewLine        public int SomeInt { get; set; }Di2015NewLineDi2015NewLine        public void AddTwo(Two two)Di2015NewLine        {Di2015NewLine            if (two == null)Di2015NewLine                throw new ArgumentNullException("two");Di2015NewLineDi2015NewLine            if (Twos == null)Di2015NewLine                Twos = new List<Two>();Di2015NewLineDi2015NewLine            if (!Twos.Contains(two))Di2015NewLine                Twos.Add(two);Di2015NewLineDi2015NewLine            two.One = this;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Context : DbContextDi2015NewLine    {Di2015NewLine        public Context(string connectionString)Di2015NewLine            : base(connectionString)Di2015NewLine        {Di2015NewLine            Configuration.LazyLoadingEnabled = true;Di2015NewLine            Ones = Set<One>();Di2015NewLine            Twos = Set<Two>();Di2015NewLine        }Di2015NewLineDi2015NewLine        public DbSet<One> Ones { get; private set; }Di2015NewLine        public DbSet<Two> Twos { get; private set; }Di2015NewLineDi2015NewLine        protected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine        {Di2015NewLine            modelBuilderDi2015NewLine                .Entity<One>()Di2015NewLine                .HasKey(d => d.OneId)Di2015NewLine                .ToTable("One");Di2015NewLineDi2015NewLine            var two = modelBuilder.Entity<Two>();Di2015NewLine            two.ToTable("Two");Di2015NewLine            two.HasKey(d => newDi2015NewLine                                {Di2015NewLine                                    d.OneId,Di2015NewLine                                    d.TwoIdDi2015NewLine                                });Di2015NewLineDi2015NewLine            two.Property(d => d.TwoId)Di2015NewLine                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);Di2015NewLineDi2015NewLine            two.HasRequired(m => m.One)Di2015NewLine                .WithMany(t => t.Twos)Di2015NewLine                .HasForeignKey(d => d.OneId);Di2015NewLineDi2015NewLine            base.OnModelCreating(modelBuilder);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    internal class ProgramDi2015NewLine    {Di2015NewLine        private static void Main()Di2015NewLine        {Di2015NewLine            using (var ctx = new Context(@"your connection string"))Di2015NewLine            {Di2015NewLine                const string oneId = "1";Di2015NewLine                var one = ctx.Ones.Single(o => o.OneId.Equals(oneId));Di2015NewLineDi2015NewLine                if (one == null)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("No row with one ID in the database");Di2015NewLine                    return;Di2015NewLine                }Di2015NewLineDi2015NewLine                var two = ctxDi2015NewLine                    .TwosDi2015NewLine                    .Include(s => s.One)Di2015NewLine                    .Single(s => s.OneId.Equals(oneId));Di2015NewLineDi2015NewLine                Console.WriteLine(two.One == nullDi2015NewLine                                      ? "SHOULD NOT BE PRINTED!!!"Di2015NewLine                                      : "SHOULD BE PRINTED");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11780418Di2015UniqueSeparatorSomeInt
11780418Di2015UniqueSeparatorOne
11780418Di2015UniqueSeparatorUPDATE Two SET OneId = RTRIM(OneId)
11780481Di2015UniqueSeparatornullable
11780481Di2015UniqueSeparatorpublic int MyInt { get; set; }
11780481Di2015UniqueSeparatorpublic int? MyInt { get; set; }
11780545Di2015UniqueSeparatorSystem.IO
11780545Di2015UniqueSeparatorFileNotFoundException
11780545Di2015UniqueSeparatorSqlException
11780545Di2015UniqueSeparatorSystem.Data.SqlClient
11780609Di2015UniqueSeparatorBind<ISession>().ToMethod(ctx => {Di2015NewLine    var uow = (INHibernateUnitOfWork)ctx.Kernel.Get<IUnitOfWork>();Di2015NewLine    return uow.Session;Di2015NewLine});Di2015NewLine
11780654Di2015UniqueSeparatorPage.IsPostBack
11780654Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    if (!Page.IsPostBack) {Di2015NewLineDi2015NewLine        if (Request.QueryString["Drug_INDEX"] != null)Di2015NewLine        {Di2015NewLine            String sIndex = Request.QueryString["Drug_INDEX"].ToString();Di2015NewLineDi2015NewLine            if (!Int32.TryParse(sIndex, out Drug_INDEX)) //Query String not a valid indexDi2015NewLine            {Di2015NewLine                errorMessage.Text = "There was an error retrieving the record.";Di2015NewLine                message.Text = "Please contact you IT administrator.";Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLineDi2015NewLine                Drug_IO dio = new Drug_IO();Di2015NewLine                SqlDataReader drugDataReader = dio.Get_Drug(Drug_INDEX);Di2015NewLine                if (drugDataReader.Read())Di2015NewLine                {Di2015NewLine                    drugNameTxt.Text = drugDataReader["Drug_Name"].ToString();Di2015NewLine                    descriptionTxt.Text = drugDataReader["DrugDescription"].ToString();Di2015NewLine                    toxTxt.Text = drugDataReader["Toxicity"].ToString();Di2015NewLine                    hlTxt.Text = drugDataReader["HalfLife"].ToString();Di2015NewLine                    hlUnitsTxt.Text = drugDataReader["HalfLife_Units"].ToString();Di2015NewLine                    bindingTxt.Text = drugDataReader["ProteinBinding"].ToString();Di2015NewLine                    logPTxt.Text = drugDataReader["LogP"].ToString();Di2015NewLine                    molecularWeightTxt.Text = drugDataReader["MolecularWeight"].ToString();Di2015NewLine                    molecularFormTxt.Text = drugDataReader["MolecularFormula"].ToString();Di2015NewLine                    chemicalForumlaTxt.Text = drugDataReader["ChemicalFormula"].ToString();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11780772Di2015UniqueSeparatorlock
11780772Di2015UniqueSeparatorlock
11780772Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    private static readonly object _gate = new object();Di2015NewLineDi2015NewLine    /* something that can only be accessed by one thread at a time...*/Di2015NewLine    private static MyResourceType MyResource = new MyResourceType();Di2015NewLineDi2015NewLine    public void DoSomething()Di2015NewLine    {Di2015NewLine         lock(_gate)Di2015NewLine         {Di2015NewLine            /* do something with MyResource, just make sure youDi2015NewLine               DO NOT call another method that locks the gateDi2015NewLine               i.e. this.DoSomethingElse(), in those situations,Di2015NewLine               you can take the logic from DoSomethingElse() andDi2015NewLine               toss it in a private method i.e. _DoSomethingElse().Di2015NewLine             */Di2015NewLine         }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void _DoSomethingElse()Di2015NewLine    {Di2015NewLine        /* do something else */Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoSomethingElse()Di2015NewLine    {Di2015NewLine         lock(_gate)Di2015NewLine         {Di2015NewLine             _DoSomethingElse();Di2015NewLine         }Di2015NewLine     }Di2015NewLine}Di2015NewLine
11780772Di2015UniqueSeparatorvar myClass = new MyClass();Di2015NewLinemyClass.DoSomething();Di2015NewLine
11780772Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    public MyResourceType MyResource { get; set; }Di2015NewLine    public void DoFirstThing() { ... }Di2015NewLine    public void DoSecondThing(){ ... }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClassHelperDi2015NewLine{Di2015NewLine    private static readonly object _gate = new Object();Di2015NewLine    private static MyResourceType MyResource = new MyResourceType();Di2015NewLineDi2015NewLine    private MyClass _myClass = new MyClass();        Di2015NewLineDi2015NewLine    public void DoWork(Action<MyClass> action)Di2015NewLine    {Di2015NewLine         lock(_gate)Di2015NewLine         {Di2015NewLine             _myClass.MyResource = MyResource;Di2015NewLine             action(_myClass);Di2015NewLine             _myClass.MyResource = null;Di2015NewLine         }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar myClassHelper = new MyClassHelper();Di2015NewLinemyClassHelper.DoWork(x => Di2015NewLine    {Di2015NewLine        x.DoFirstThing();Di2015NewLine        x.DoSecondThing();Di2015NewLine    });Di2015NewLine
11780912Di2015UniqueSeparatorConfigurationManager.AppSettings.AllKeysDi2015NewLine    .Where( key => key.StartsWith( "Screen" ) )Di2015NewLine    .Select( key => ConfigurationManager.AppSettings[key] )Di2015NewLine
11780912Di2015UniqueSeparatorEnumerable.Range( 1, int.MaxValue )Di2015NewLine    .Select( i => ConfigurationManager.AppSettings[ "Screen" + i ] )Di2015NewLine    .TakeWhile( value => value != null )Di2015NewLine
11780953Di2015UniqueSeparatorWindows.Forms.Timer
11780953Di2015UniqueSeparatorTimer timer = new Timer();Di2015NewLineDi2015NewLinetimer.Interval = 1000; //one secondDi2015NewLinetimer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);Di2015NewLinetimer.Enabled = true;Di2015NewLinetimer.Start();Di2015NewLine
11780953Di2015UniqueSeparatorElapsed
11780953Di2015UniqueSeparatorprivate void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)  Di2015NewLine{Di2015NewLine      MoveButton();       Di2015NewLine}Di2015NewLine
11781001Di2015UniqueSeparator#include <iostream>Di2015NewLine#include <vector>Di2015NewLine#include <numeric>Di2015NewLine#include <algorithm>Di2015NewLineDi2015NewLineusing namespace std;Di2015NewLineDi2015NewLinevector<int> orderTransactions(const vector<int>& input) {Di2015NewLineDi2015NewLine    int max = accumulate(input.begin(), input.end(), 0);Di2015NewLineDi2015NewLine    vector<int> results;Di2015NewLine    // if the sum is negative or zero there are no transactions that can be addedDi2015NewLine    if (max <= 0) {Di2015NewLine        return results;Di2015NewLine    }Di2015NewLineDi2015NewLine    // split the input into positives and negativesDi2015NewLine    vector<int> sorted = vector<int>(input);Di2015NewLine    sort(sorted.begin(), sorted.end());Di2015NewLineDi2015NewLine    vector<int> positives;Di2015NewLine    vector<int> negatives;Di2015NewLineDi2015NewLine    for (int i = 0; i < sorted.size(); i++) {Di2015NewLine        if (sorted[i] >= 0) {Di2015NewLine            positives.push_back(sorted[i]);Di2015NewLine        } else {Di2015NewLine            negatives.push_back(sorted[i]);Di2015NewLine        }Di2015NewLine    }   Di2015NewLineDi2015NewLine    // try to process all the transactionsDi2015NewLine    int sum = 0;Di2015NewLine    while (!positives.empty() || !negatives.empty()) {Di2015NewLine        // find the largest positive transaction that can be added without exceeding the maxDi2015NewLine        bool positiveFound = false;Di2015NewLineDi2015NewLine        for (int i = (int)positives.size()-1; i >= 0; i--) {Di2015NewLine            int n = positives[i];Di2015NewLine            if ((sum + n) <= max) {Di2015NewLine                sum += n;Di2015NewLine                results.push_back(n);Di2015NewLine                positives.erase(positives.begin()+i);Di2015NewLine                positiveFound = true;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        if (positiveFound == true) {Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        // if there is no positive find the smallest negative transaction that keep the sum above 0Di2015NewLine        bool negativeFound = false;Di2015NewLine        for (int i = (int)negatives.size()-1; i >= 0; i--) {Di2015NewLine            int n = negatives[i];Di2015NewLine            if ((sum + n) >= 0) {Di2015NewLine                sum += n;Di2015NewLine                results.push_back(n);Di2015NewLine                negatives.erase(negatives.begin()+i);Di2015NewLine                negativeFound = true;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // if there is neither then this as far as we can go without splitting the transactionsDi2015NewLine        if (!negativeFound) {Di2015NewLine            return results;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return results;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineint main(int argc, const char * argv[]) {Di2015NewLineDi2015NewLine    vector<int> quantities;Di2015NewLine    quantities.push_back(-304);Di2015NewLine    quantities.push_back(-154);Di2015NewLine    quantities.push_back(-491);Di2015NewLine    quantities.push_back(-132);Di2015NewLine    quantities.push_back(276);Di2015NewLine    quantities.push_back(-393);Di2015NewLine    quantities.push_back(136);Di2015NewLine    quantities.push_back(172);Di2015NewLine    quantities.push_back(589);Di2015NewLine    quantities.push_back(-131);Di2015NewLine    quantities.push_back(-331);Di2015NewLine    quantities.push_back(-142);Di2015NewLine    quantities.push_back(321);Di2015NewLine    quantities.push_back(705);Di2015NewLine    quantities.push_back(210);Di2015NewLine    quantities.push_back(731);Di2015NewLine    quantities.push_back(92);Di2015NewLine    quantities.push_back(-90);Di2015NewLineDi2015NewLine    vector<int> results = orderTransactions(quantities);Di2015NewLineDi2015NewLine    if (results.size() != quantities.size()) {Di2015NewLine        cout << "ERROR: Couldn't find a complete ordering for the transactions. This is as far as we got:" << endl;Di2015NewLine    }Di2015NewLineDi2015NewLine    for (int i = 0; i < results.size(); i++) {Di2015NewLine        cout << results[i] << endl;Di2015NewLine    }Di2015NewLineDi2015NewLine    return 0;Di2015NewLine}Di2015NewLine
11781050Di2015UniqueSeparatorp.outputStream.Write(Encoding.ASCII.GetString(file_content)); //write file content after headersDi2015NewLine
11781120Di2015UniqueSeparatorA
11781143Di2015UniqueSeparatorvar today = DateTime.Now;Di2015NewLineDi2015NewLinevar result = mc.AttendingTypesDi2015NewLine             .Where(at => at.FromDate <= today)Di2015NewLine             .GroupBy(at => at.GroupId)Di2015NewLine             .Select(g => g.OrderByDescending(m => m.FromDate).FirstOrDefault())Di2015NewLine             .ToList();Di2015NewLine
11781151Di2015UniqueSeparatorHashSet<T>.CreateSetComparer
11781151Di2015UniqueSeparatornew List<HashSet<int>> {Di2015NewLine    new HashSet<int> { 4 },Di2015NewLine    new HashSet<int> { 4 }Di2015NewLine}.GroupBy (x => x, HashSet<int>.CreateSetComparer())Di2015NewLine
11781159Di2015UniqueSeparatorvar path = column.Text; // or wherever you get the path fromDi2015NewLinepath = Path.Combine(@"C:\\absolute\\path\\", path);Di2015NewLineif (File.Exists(path))Di2015NewLine{Di2015NewLine   // Do somethingDi2015NewLine}Di2015NewLine
11781231Di2015UniqueSeparatorpublic static class GlobalsDi2015NewLine{Di2015NewLine    public static string Name { get; set; }Di2015NewLine    public static int aNumber {get; set; }Di2015NewLine    public static List<string> onlineMembers = new List<string>();Di2015NewLineDi2015NewLine     static Globals()Di2015NewLine     {Di2015NewLine        Name = "starting name";Di2015NewLine        aNumber = 5;Di2015NewLine     }Di2015NewLine}Di2015NewLine
11781231Di2015UniqueSeparatorConsole.WriteLine(Globals.Name);Di2015NewLineGlobals.onlineMemeber.Add("Hogan");Di2015NewLine
11781255Di2015UniqueSeparator// Move the * inside the brackets around [a-zA-Z]Di2015NewLine// Change [a-zA-Z] to \\w, to include digits.Di2015NewLinestring pattern = @"(([@$&#\\[]+)(\\w*)(\\])*)";Di2015NewLine
11781255Di2015UniqueSeparatorreplacements.TryGetValue(match.Value,out lookup);Di2015NewLine
11781255Di2015UniqueSeparatorreplacements.TryGetValue(match.Groups[3].Value,out lookup);Di2015NewLine
11781255Di2015UniqueSeparatorIgnoreCase
11781326Di2015UniqueSeparatorObservableCollection
11781331Di2015UniqueSeparatorallItems = all.SelectMany(a => a.Items)Di2015NewLine              .Where(a => a.Item.TruckItemID.Equals(CarItem.CarItemID));Di2015NewLine
11781482Di2015UniqueSeparatorconst
11781482Di2015UniqueSeparatorFunc
11781490Di2015UniqueSeparatorprivate void PopulateCheckBoxList( List<MyClass> myClassList )Di2015NewLine{Di2015NewLine    foreach ( MyClass m in myClassList )Di2015NewLine    {Di2015NewLine        ListItem item = new ListItem( m.Name, m.Id.ToString() );Di2015NewLine        item.Selected = m.IsActive;Di2015NewLine        cbxlFeatures.Items.Add( item );Di2015NewLine    }Di2015NewLine}Di2015NewLine
11781619Di2015UniqueSeparatorpublic IEnumerable<ProjectComments> LivingComments {Di2015NewLine   get {Di2015NewLine      return this.ProjectComments != null Di2015NewLine         ? this.ProjectComments.Where(m => !m.IsDeleted) Di2015NewLine         : null;Di2015NewLine   }Di2015NewLine}Di2015NewLine
11781619Di2015UniqueSeparatorpublic IEnumerable<ProjectComments> GetLivingComments() {Di2015NewLine     return this.ProjectComments != null Di2015NewLine         ? this.ProjectComments.Where(m => !m.IsDeleted) Di2015NewLine         : null;Di2015NewLine}Di2015NewLine
11781657Di2015UniqueSeparator^(?:%[0-9a-f]{2}|[^%&<>'/])*$Di2015NewLine
11781657Di2015UniqueSeparator^             # Start of stringDi2015NewLine(?:           # Match eitherDi2015NewLine %[0-9a-f]{2} # %xxDi2015NewLine|             # orDi2015NewLine [^%&<>'/]    # any character except the forbidden onesDi2015NewLine)*            # any number of timesDi2015NewLine$             # until end of string.Di2015NewLine
11781657Di2015UniqueSeparator%
11781657Di2015UniqueSeparatorIgnoreCase
11781657Di2015UniqueSeparatora-fA-F
11781714Di2015UniqueSeparatorH
11781714Di2015UniqueSeparator91212
11781719Di2015UniqueSeparator    var products = database.Products.Where(p =>Di2015NewLine            p.PartNumber.ToLower().Contains(term.ToLower()) ||Di2015NewLine            p.PartNumber.ToLower() == term.ToLower() || p.OProductName.ToLower().Contains(term.ToLower()) || p.OProductName.ToLower() == term.ToLower())Di2015NewLine            .OrderBy(p => p.PartNumber)Di2015NewLine            .Skip((Page - 1) * PageSize).Take(PageSize);Di2015NewLine
11781850Di2015UniqueSeparatorPrivate Sub WatchForDrives()Di2015NewLine    Dim monitor As New DeviceStatusMonitor(DeviceClass.FileSystem, False)Di2015NewLine    monitor.StartStatusMonitoring()Di2015NewLine    AddHandler monitor.DeviceNotification, AddressOf MonitorDeviceNotifiedDi2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub MonitorDeviceNotified(ByVal sender As Object, ByVal e As DeviceNotificationArgs)Di2015NewLine    Dim message As String = String.Format("Disk '{0}' has been {1}.", e.DeviceName, If(e.DeviceAttached, "inserted", "removed"))Di2015NewLine    MessageBox.Show(message)Di2015NewLineEnd SubDi2015NewLine
11781956Di2015UniqueSeparator\\r\\n
11781956Di2015UniqueSeparator\\\\r\\\\n
11781956Di2015UniqueSeparatorsrPortSuffix = srPortSuffix.Replace(@"\\r", "\\r").Replace(@"\\n", "\\n");Di2015NewLine
11781956Di2015UniqueSeparator<rPortSuffix>Di2015NewLine</rPortSuffix>Di2015NewLine
11781956Di2015UniqueSeparator<rPortSuffix>Di2015NewLineDi2015NewLine</rPortSuffix>Di2015NewLine
11782059Di2015UniqueSeparatorpublic static IEnumerable<T> Order<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector, bool ascending)Di2015NewLine{Di2015NewLine    if (ascending)Di2015NewLine    {Di2015NewLine        return source.OrderBy(selector);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return source.OrderByDescending(selector);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11782059Di2015UniqueSeparatorlst = lst.Order( s => s.Letter, isAscending );Di2015NewLine
11782059Di2015UniqueSeparator"letter"
11782059Di2015UniqueSeparators => s.Letter
11782059Di2015UniqueSeparatorclass CustomSorterDi2015NewLine{Di2015NewLine    static Dictionary<string, Func<IMyClass, object>> Selectors;Di2015NewLineDi2015NewLine    static CustomSorter()Di2015NewLine    {Di2015NewLine        Selectors = new Dictionary<string, Func<IMyClass, object>>Di2015NewLine        {Di2015NewLine            { "letter", new Func<IMyClass, object>(x => x.Letter) },Di2015NewLine            { "number", new Func<IMyClass, object>(x => x.Number) }Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Sort(IEnumerable<IMyClass> list, string sortField, bool isAscending)Di2015NewLine    {Di2015NewLine        Func<IMyClass, object> selector;Di2015NewLine        if (!Selectors.TryGetValue(sortField, out selector))Di2015NewLine        {Di2015NewLine            throw new ArgumentException(string.Format("'{0}' is not a valid sort field.", sortField));Di2015NewLine        }Di2015NewLineDi2015NewLine        // Using extension method defined above.Di2015NewLine        return list.Order(selector, isAscending);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11782139Di2015UniqueSeparatorSet
11782161Di2015UniqueSeparatorFilterAttributeFilterProvider
11782161Di2015UniqueSeparatorFilterAttributeFilterProvider
11782161Di2015UniqueSeparatorpublic interface IFooDi2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Foo : IFooDi2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
11782161Di2015UniqueSeparatorpublic class MyActionFilterAttribute : ActionFilterAttributeDi2015NewLine{Di2015NewLine    public MyActionFilterAttribute()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void OnActionExecuting(ActionExecutingContext filterContext)Di2015NewLine    {Di2015NewLine        //do something with FooDi2015NewLine        base.OnActionExecuting(filterContext);Di2015NewLine    }Di2015NewLineDi2015NewLine    [Inject]Di2015NewLine    public IFoo Foo { get; set; }Di2015NewLine}Di2015NewLine
11782161Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    [MyActionFilter]Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11782161Di2015UniqueSeparatorpublic class NinjectDependencyResolver : IDependencyResolverDi2015NewLine{Di2015NewLine    private readonly IKernel _kernel;Di2015NewLineDi2015NewLine    public NinjectDependencyResolver(IKernel kernel)Di2015NewLine    {Di2015NewLine        _kernel = kernel;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object GetService(Type serviceType)Di2015NewLine    {Di2015NewLine        return _kernel.TryGet(serviceType);Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<object> GetServices(Type serviceType)Di2015NewLine    {Di2015NewLine        return _kernel.GetAll(serviceType);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11782161Di2015UniqueSeparator    protected void Application_Start()Di2015NewLine    {Di2015NewLine        AreaRegistration.RegisterAllAreas();Di2015NewLineDi2015NewLine        RegisterGlobalFilters(GlobalFilters.Filters);Di2015NewLine        RegisterRoutes(RouteTable.Routes);Di2015NewLineDi2015NewLine        DependencyResolver.SetResolver(new NinjectDependencyResolver(GetKernel()));Di2015NewLine    }Di2015NewLineDi2015NewLine    private IKernel GetKernel()Di2015NewLine    {Di2015NewLine        var kernel = new StandardKernel();Di2015NewLine        kernel.Bind<IFoo>().To<Foo>();Di2015NewLine        return kernel;Di2015NewLine    }Di2015NewLine
11782161Di2015UniqueSeparatorpublic class NinjectFilterProvider : FilterAttributeFilterProviderDi2015NewLine{Di2015NewLine    private readonly IKernel _kernel;Di2015NewLineDi2015NewLine    public NinjectFilterProvider(IKernel kernel)Di2015NewLine    {Di2015NewLine        _kernel = kernel;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override IEnumerable<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor)Di2015NewLine    {Di2015NewLine        var filters = base.GetFilters(controllerContext, actionDescriptor);Di2015NewLineDi2015NewLine        foreach (var filter in filters)Di2015NewLine        {Di2015NewLineDi2015NewLine            _kernel.Inject(filter.Instance);Di2015NewLine        }Di2015NewLineDi2015NewLine        return filters;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11782161Di2015UniqueSeparator    private IKernel GetKernel()Di2015NewLine    {Di2015NewLine        var kernel = new StandardKernel();Di2015NewLine        kernel.Bind<IFoo>().To<Foo>();Di2015NewLine        //use our custom NinjectFilterProviderDi2015NewLine        kernel.Bind<IFilterProvider>().To<NinjectFilterProvider>();Di2015NewLine        return kernel;Di2015NewLine    }Di2015NewLine
11782161Di2015UniqueSeparatorIFilterProvider
11782161Di2015UniqueSeparatorFilterAttributeFilterProvider
11782161Di2015UniqueSeparatorNinjectFilterProvider
11782207Di2015UniqueSeparatoronchange
11782207Di2015UniqueSeparatorOnCheckedChanged
11782207Di2015UniqueSeparatorvalid
11782207Di2015UniqueSeparatorOnCheckedChangedMethod
11782207Di2015UniqueSeparatorcount
11782207Di2015UniqueSeparator<input type="checkbox" id="check2" name = "check2" Checked="True" runat="server" onchange="OnCheckedChangedMethod(7);">Di2015NewLine
11782244Di2015UniqueSeparatorSystem.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();Di2015NewLineTwitterUser user = new TwitterUser();Di2015NewLineDi2015NewLinestring url = "http://api.twitter.com/1/account/verify_credentials.xml";Di2015NewLinestring xml = oAuth.oAuthWebRequest(oAuthTwitter.Method.GET, url, String.Empty);Di2015NewLineDi2015NewLinexmlDoc.LoadXml(xml);Di2015NewLineDi2015NewLineuser.id = xmlDoc.SelectSingleNode("user/id").InnerText;Di2015NewLineuser.screen_name = xmlDoc.SelectSingleNode("user/screen_name").InnerText;Di2015NewLineuser.name = xmlDoc.SelectSingleNode("user/name").InnerText;Di2015NewLine
11782358Di2015UniqueSeparatorStackFrame frame = new StackFrame(1);Di2015NewLineMethodBase method = frame.GetMethod();Di2015NewLinestring message = String.Format("{0}.{1} : {2}",Di2015NewLinemethod.DeclaringType.FullName, method.Name, message);Di2015NewLineConsole.WriteLine(message);Di2015NewLine
11782484Di2015UniqueSeparatorvar orders = new List<order>(Di2015NewLine    from myOrder in xmlDoc.Descendants("order")Di2015NewLine    let purchaseOrder = myOrder.Element("purchaseorder")Di2015NewLine    select new order {Di2015NewLine        IsBulk = Convert.ToBoolean(myOrder.Element("isbulk").Value),Di2015NewLine        PurchaseOrder = new PurchaseOrder {Di2015NewLine            ID = purchaseOrder.Element("id").Value,Di2015NewLine            Quantity = purchaseOrder.Element("quantity").ValueDi2015NewLine        },Di2015NewLine        ListOfProds = new List<prod>(Di2015NewLine            from product in myOrder.Descendants("prod")Di2015NewLine            let loop = product.Element("loop")Di2015NewLine            select new prodDi2015NewLine            {                Di2015NewLine                Seq = product.Element("seq").Value,Di2015NewLine                IssueType = product.Element("issuetype").Value,Di2015NewLine                Proxy = loop.Element("proxy").Value,Di2015NewLine                ServiceCode = loop.Element("servicecode").ValueDi2015NewLine            }Di2015NewLine        )Di2015NewLine    }Di2015NewLine);Di2015NewLine
11782610Di2015UniqueSeparator((DataGridViewImageColumn)this.emptyDataGridViewFromDesigner.Columns["Flags"]).DefaultCellStyle.NullValue = null;Di2015NewLine
11782861Di2015UniqueSeparator<div id="yourdiv" runat="server" ...Di2015NewLine
11782861Di2015UniqueSeparatoryourDiv.Attributes("style","height:"+height_read_from_ViewState+"px;");Di2015NewLine
11782861Di2015UniqueSeparator<asp:hiddenfield id="hdnHeight" runat="server" />Di2015NewLine
11782861Di2015UniqueSeparatorfunction setHeight(value)Di2015NewLine{Di2015NewLine  document.getElementById('<%=hdnHeight.ClientID').value=value;Di2015NewLine}Di2015NewLine
11782861Di2015UniqueSeparatoryourDiv.Attributes("style","height:"+hdnHeight.Value+"px;");Di2015NewLine
11782970Di2015UniqueSeparatorList<Color> listForChannel1 = channelColorInformation["Channel1"];Di2015NewLineColor c1 = listForChannel1[0];    Di2015NewLineColor c2 = listForChannel1[2];    Di2015NewLineColor c3 = listForChannel1[3];Di2015NewLine
11782999Di2015UniqueSeparator<system.web>Di2015NewLine   <authentication mode="Forms">Di2015NewLine      <forms name="Custom" loginUrl="/login.aspx" />       Di2015NewLine   </authentication>Di2015NewLine</system.web>Di2015NewLine
11782999Di2015UniqueSeparator<location path="folders/memberN">Di2015NewLine   <system.web>Di2015NewLine      <authorization>Di2015NewLine         <allow roles="memberN"/>Di2015NewLine         <deny users="*"/>Di2015NewLine      </authorization>Di2015NewLine   </system.web>Di2015NewLine</location>Di2015NewLine
11782999Di2015UniqueSeparator<configuration>Di2015NewLine    <connectionStrings>Di2015NewLine        <add name="SqlServices" Di2015NewLine             connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Di2015NewLine             Catalog=aspnetdb;" />Di2015NewLine    </connectionStrings>Di2015NewLine    <system.web>Di2015NewLine        <roleManager defaultProvider="SqlProvider" Di2015NewLine          enabled="true"Di2015NewLine          cacheRolesInCookie="true"Di2015NewLine          cookieName=".ASPROLES"Di2015NewLine          cookieTimeout="30"Di2015NewLine          cookiePath="/">Di2015NewLine          <providers>Di2015NewLine            <addDi2015NewLine              name="SqlProvider"Di2015NewLine              type="System.Web.Security.SqlRoleProvider"Di2015NewLine              connectionStringName="SqlServices" Di2015NewLine              applicationName="SampleApplication" />Di2015NewLine          </providers>Di2015NewLine        </roleManager>Di2015NewLine        <membership Di2015NewLine             defaultProvider="SqlProvider"Di2015NewLine             userIsOnlineTimeWindow="20">Di2015NewLine             <providers>Di2015NewLine                <remove name="AspNetSqlProvider" />Di2015NewLine                <add name="SqlProvider"Di2015NewLine                    type="System.Web.Security.SqlMembershipProvider"Di2015NewLine                    connectionStringName="SqlServices"Di2015NewLine                    applicationName="/" />Di2015NewLine            </providers>Di2015NewLine        </membership>Di2015NewLine    </system.web>Di2015NewLine</configuration>Di2015NewLine
11782999Di2015UniqueSeparator%WINDOWS%\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_regsql.exe -S <server> -E -d <database> -A allDi2015NewLine
11783074Di2015UniqueSeparatorDataTable dt = conn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, null);Di2015NewLinestring workSheetName = (string)dt.Rows[0]["TABLE_NAME"];Di2015NewLine
11783251Di2015UniqueSeparatorSqlParameter[] parameters =Di2015NewLine{    Di2015NewLine  new SqlParameter("@first_name", SqlDbType.VarChar, 50) { Value = to.FirstName },Di2015NewLine  new SqlParameter("@last_name", SqlDbType.VarChar, 50) { Value = to.LastName },Di2015NewLine  new SqlParameter("@middle_name", SqlDbType.VarChar, 50) { Value = to.MiddleName },Di2015NewLine  new SqlParameter("@empid", SqlDbType.Int) { Value = to.EmpId }Di2015NewLine};Di2015NewLine
11783251Di2015UniqueSeparatorList<SqlParameter> parameters = new List<SqlParameter>Di2015NewLine{    Di2015NewLine  new SqlParameter("@first_name", SqlDbType.VarChar, 50) { Value = to.FirstName },Di2015NewLine  new SqlParameter("@last_name", SqlDbType.VarChar, 50) { Value = to.LastName },Di2015NewLine  new SqlParameter("@middle_name", SqlDbType.VarChar, 50) { Value = to.MiddleName },Di2015NewLine  new SqlParameter("@empid", SqlDbType.Int) { Value = to.EmpId }Di2015NewLine};Di2015NewLine
11783251Di2015UniqueSeparatorSqlParameter
11783251Di2015UniqueSeparatorpublic static SqlParameter WithValue(this SqlParameter parameter, object value)Di2015NewLine{Di2015NewLine    parameter.Value = value;Di2015NewLine    return parameter;Di2015NewLine}Di2015NewLine
11783251Di2015UniqueSeparatorList<SqlParameter> parameters = new List<SqlParameter>Di2015NewLine{    Di2015NewLine  new SqlParameter("@first_name", SqlDbType.VarChar, 50).WithValue(to.FirstName),Di2015NewLine  new SqlParameter("@last_name", SqlDbType.VarChar, 50).WithValue = to.LastName)Di2015NewLine  new SqlParameter("@middle_name", SqlDbType.VarChar, 50).WithValue(to.MiddleName),Di2015NewLine  new SqlParameter("@empid", SqlDbType.Int).WithValue(to.EmpId)Di2015NewLine};Di2015NewLine
11783305Di2015UniqueSeparatorDatePickerTextBox
11783305Di2015UniqueSeparator<Border x:Name="watermark_decorator".../>
11783305Di2015UniqueSeparatorBorderBrush
11783305Di2015UniqueSeparator<Style x:Key="MyDatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">Di2015NewLine    <Setter Property="Template">Di2015NewLine       <Setter.Value>Di2015NewLine         <ControlTemplate TargetType="{x:Type DatePickerTextBox}">Di2015NewLine           <Grid>                 Di2015NewLine           <!-- Visual State Manager stuff -->Di2015NewLine             <Border...>Di2015NewLine               <!-- other stuff... -->Di2015NewLine               <Border x:Name="watermark_decorator" BorderBrush="[THE BRUSH YOU WANT]" BorderThickness="1">Di2015NewLine                 <!-- And so on and so forth... -->Di2015NewLine               </Border>Di2015NewLine             </Border>Di2015NewLine           </Grid>Di2015NewLine         </ControlTemplate>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
11783305Di2015UniqueSeparatorDatePicker
11783305Di2015UniqueSeparator<!-- All DatePicker Template stuff -->Di2015NewLine<controlsPrimitives:DatePickerTextBox x:Name="TextBox" Style="{DynamicResource MyDatePickerTextBoxStyle}" ... />Di2015NewLine
11783305Di2015UniqueSeparatorDatePicker
11783305Di2015UniqueSeparatorVisualStateManager
11783305Di2015UniqueSeparator<!--Start UI-->Di2015NewLine... this is the Button Template ...Di2015NewLine<!-- End UI-->Di2015NewLine
11783305Di2015UniqueSeparator<Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">Di2015NewLine  <Rectangle.Stroke>Di2015NewLine    <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">Di2015NewLine       <GradientStop Color="#FF494949" />Di2015NewLine       <GradientStop Color="#FF9F9F9F" Offset="1" />Di2015NewLine    </LinearGradientBrush>Di2015NewLine  </Rectangle.Stroke>Di2015NewLine  <Rectangle.Fill>Di2015NewLine    <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">Di2015NewLine      <GradientStop Color="#FF4084BD" />Di2015NewLine      <GradientStop Color="#FFAFCFEA" Offset="1" />Di2015NewLine    </LinearGradientBrush>Di2015NewLine  </Rectangle.Fill>Di2015NewLine</Rectangle>Di2015NewLine
11783305Di2015UniqueSeparator<Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1" Stroke="Black" Fill="Green"/>Di2015NewLine
11783305Di2015UniqueSeparatorBorder
11783305Di2015UniqueSeparatorx:Name="BackgroundGradient"
11783383Di2015UniqueSeparatorNotMapped
11783383Di2015UniqueSeparatortrue /false
11783383Di2015UniqueSeparatorpublic Class CustomerDi2015NewLine{Di2015NewLineDi2015NewLine  [NotMapped]Di2015NewLine  public bool MyColumnBool Di2015NewLine  {Di2015NewLine      getDi2015NewLine      {Di2015NewLine         return (MyColumn ==1);Di2015NewLine      }Di2015NewLine  }Di2015NewLineDi2015NewLine  public int MyColumn {get; set;}Di2015NewLine  // other propertiesDi2015NewLineDi2015NewLine}Di2015NewLine
11783497Di2015UniqueSeparatorpublic async Task<string> GetSomeData(CancellationToken token)Di2015NewLine{Di2015NewLine    token.ThrowIfCancellationRequested();Di2015NewLineDi2015NewLine    var initialData = await SomeOtherMethodWhichReturnsTask(token);Di2015NewLineDi2015NewLine    string result = await initialData.MethodWhichAlsoReturnsTask(token);Di2015NewLineDi2015NewLine    return result;Di2015NewLine};Di2015NewLine
11783497Di2015UniqueSeparatorContinueWith
11783497Di2015UniqueSeparatorTask<Task<string>>
11783497Di2015UniqueSeparatorpublic Task<string> GetSomeData(CancellationToken token)Di2015NewLine{Di2015NewLine    Task<Task<string>> task = GetSomeInteger(token)Di2015NewLine                               .ContinueWith(t => Di2015NewLine                               {Di2015NewLine                                   return GetSomeString(t.Result, token);Di2015NewLine                               }, token);Di2015NewLine    return task.Unwrap();Di2015NewLine}Di2015NewLine
11783497Di2015UniqueSeparatorTaskCompletionSource<T>
11783497Di2015UniqueSeparatorpublic Task<string> GetSomeData(CancellationToken token)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<string>();Di2015NewLineDi2015NewLine    Task<int> task1 = GetSomeInteger(token);Di2015NewLine    Task<Task<string>> task2 = task1.ContinueWith(t => GetSomeString(t.Result, token));Di2015NewLine    task2.ContinueWith(t => tcs.SetResult(t.Result.Result));Di2015NewLine    return tcs.Task;Di2015NewLine}Di2015NewLine
11783566Di2015UniqueSeparatorreturn resetEvent.WaitOne(1000) ? "Event occurred within 1000ms"Di2015NewLine                                : "Event did not occur within 1000ms";Di2015NewLine
11783566Di2015UniqueSeparatorWaitHandle.WaitOne
11783566Di2015UniqueSeparatorMonitor.Wait
11783566Di2015UniqueSeparatorbool
11783586Di2015UniqueSeparatorasync-await
11783586Di2015UniqueSeparatorawait
11783586Di2015UniqueSeparatorawait
11783586Di2015UniqueSeparatorTask.WhenAll
11783586Di2015UniqueSeparatorList<string> Syms = ... // Create your list of stringsDi2015NewLineIEnumerable<Task<decimal>> tasks = from Sym in Syms select GoToWeb(Sym);Di2015NewLinedecimal[] results = await Task.WhenAll(tasks);Di2015NewLine
11783587Di2015UniqueSeparatori
11783587Di2015UniqueSeparatorforeach (DataGridViewRow dr in dataGridView1.SelectedRows)Di2015NewLine        {Di2015NewLine         log slog = new log();Di2015NewLineDi2015NewLine         slog.Date = dr.cells(0).Value.ToString();Di2015NewLine         slog.Level = dr.cells(1).Value.ToString();Di2015NewLine         slog.Project = dr.cells(2).Value.ToString();Di2015NewLine         slog.Number = dr.cells(3).Value.ToString();Di2015NewLine         slog.Method = dr.cells(4).Value.ToString();Di2015NewLine         slog.Property = dr.cells(5).Value.ToString();Di2015NewLineDi2015NewLine         logEntity.logs.AddObject(slog);Di2015NewLineDi2015NewLine        }Di2015NewLinelogEntity.SaveChanges();Di2015NewLine
11783646Di2015UniqueSeparatorbutton = (CommandBarButton)Di2015NewLine    cellbar.Controls.Add(MsoControlType.msoControlButton, Di2015NewLine    Missing.Value, Missing.Value,Di2015NewLine    1, true);Di2015NewLine
11783783Di2015UniqueSeparatorFont.Height
11783944Di2015UniqueSeparatorProcessInfo = new ProcessStartInfo(command);Di2015NewLine    ProcessInfo.RedirectStandardOutput = true;Di2015NewLine    ProcessInfo.CreateNoWindow = true;Di2015NewLine    ProcessInfo.UseShellExecute = false;Di2015NewLineDi2015NewLine    Process = Process.Start(ProcessInfo);                    Di2015NewLineDi2015NewLine    Process.Close(); Di2015NewLine
11784103Di2015UniqueSeparatorUPDATE
11784106Di2015UniqueSeparatorcontext.MergeOption = MergeOption.OverwriteChangesDi2015NewLine
11784165Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
11784165Di2015UniqueSeparatorusing
11784165Di2015UniqueSeparatorEnumerable.ElementAt
11784165Di2015UniqueSeparatorSystem.Linq
11784165Di2015UniqueSeparatorusing System.Linq
11784236Di2015UniqueSeparatorpublic void Recursive(int acc)Di2015NewLine{Di2015NewLine    if (acc > myLimit)Di2015NewLine       throw new MyOverflowException(acc); Di2015NewLineDi2015NewLine    Recursive(acc+1);Di2015NewLine}Di2015NewLine
11784236Di2015UniqueSeparatortry { Recursive(0); } catch (MyOverflowException) { /* handle it*/ }Di2015NewLine
11784335Di2015UniqueSeparatorEnumerable.Intersect()
11784335Di2015UniqueSeparator    var list1 = new List<KeyValuePair<string,string>>();Di2015NewLine    var list2 = new List<KeyValuePair<string,string>>();Di2015NewLineDi2015NewLine    list1.Add(new KeyValuePair<string,string>("key1", "value1"));Di2015NewLine    list1.Add(new KeyValuePair<string,string>("key2", "value2"));Di2015NewLine    list2.Add(new KeyValuePair<string,string>("key1", "value1"));Di2015NewLine    list2.Add(new KeyValuePair<string,string>("key3", "value3"));Di2015NewLineDi2015NewLine    var inBothLists = list1.Intersect(list2); // contains only key1,value1Di2015NewLine
11784335Di2015UniqueSeparatorIEqualityComparer<T>
11784395Di2015UniqueSeparatortestUtility.UpdateRegistry();
11784395Di2015UniqueSeparator.WriteToRegistryKey
11784395Di2015UniqueSeparatortestRegistry
11784395Di2015UniqueSeparatortestRegistry.Setup(x => x.WriteToRegistryKey(It.IsAny<string>(), It.IsAny<int>()));
11784395Di2015UniqueSeparatortestRegistry.Verify(x => x.WriteToRegistryKey("MaxNumLogFiles", It.IsAny<object>()));
11784395Di2015UniqueSeparatorIt.IsAny<string>(), It.IsAny<int>()
11784395Di2015UniqueSeparatorIt.IsAny<type>()
11784395Di2015UniqueSeparatornull
11784441Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Defines a thumb for resizing shapes.Di2015NewLine    /// </summary>Di2015NewLine    public class ResizeThumb : ThumbDi2015NewLine    {  Di2015NewLine    /// <summary>Di2015NewLine    /// Holds a designer item.Di2015NewLine    /// </summary>Di2015NewLine    private DesignerItem _designerItem;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Holds a collection of designer items.Di2015NewLine    /// </summary>Di2015NewLine    private DesignerItems _designerItems;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// holds a transform origin of the designer item Di2015NewLine    /// </summary>Di2015NewLine    private Point _transformOrigin;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// holds an angle of the rotation transformation of the designer itemDi2015NewLine    /// </summary>Di2015NewLine    private double _angle = 0.0;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="ResizeThumb"/> class.Di2015NewLine    /// </summary>Di2015NewLine    public ResizeThumb()Di2015NewLine    {Di2015NewLine        DragStarted += ResizeThumbDragStarted;Di2015NewLine        DragDelta += ResizeThumbDragDelta;Di2015NewLine        DragCompleted += ResizeThumbDragCompleted;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Handles notifications when the dragging of the thumb starts.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="sender">the sender object</param>Di2015NewLine    /// <param name="e">the event arguments</param>Di2015NewLine    private void ResizeThumbDragStarted(object sender, DragStartedEventArgs e)Di2015NewLine    {Di2015NewLine        _designerItem = DataContext as DesignerItem;Di2015NewLineDi2015NewLine        if (_designerItem == null) Di2015NewLine            return;Di2015NewLineDi2015NewLine        _designerItem.IsResizing = true;Di2015NewLine        _designerItem.IsDragging = true;Di2015NewLine        _designerItems = _designerItem.GetItemsControl();Di2015NewLineDi2015NewLine        _transformOrigin = _designerItem.RenderTransformOrigin;            Di2015NewLine        var rotateTransform = _designerItem.RenderTransform as RotateTransform;Di2015NewLine        if (rotateTransform != null)Di2015NewLine            _angle = rotateTransform.Angle * Math.PI / 180.0;Di2015NewLine        elseDi2015NewLine            _angle = 0.0;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Handles notifications when the dragging of the thumb completes.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="sender">the sender object</param>Di2015NewLine    /// <param name="e">the event arguments</param>Di2015NewLine    private void ResizeThumbDragCompleted(object sender, DragCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        if (_designerItem != null)Di2015NewLine        {Di2015NewLine            _designerItem.IsResizing = false;Di2015NewLine            _designerItem.IsDragging = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Handles notifications when the thumb has been dragged.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="sender">the sender object</param>Di2015NewLine    /// <param name="e">the event arguments</param>Di2015NewLine    private void ResizeThumbDragDelta(object sender, DragDeltaEventArgs e)Di2015NewLine    {Di2015NewLine        if (_designerItem == null ||Di2015NewLine            _designerItems == null ||Di2015NewLine            !_designerItem.IsSelected)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        var item = _designerItem;Di2015NewLine        var minLeft = double.MaxValue;Di2015NewLine        var minTop = double.MaxValue;Di2015NewLine        var minDeltaHorizontal = double.MaxValue;Di2015NewLine        var minDeltaVertical = double.MaxValue;Di2015NewLineDi2015NewLine        minLeft = Math.Min(Canvas.GetLeft(item), minLeft);Di2015NewLine        minTop = Math.Min(Canvas.GetTop(item), minTop);Di2015NewLineDi2015NewLine        minDeltaVertical = Math.Min(minDeltaVertical, item.ActualHeight - item.MinHeight);Di2015NewLine        minDeltaHorizontal = Math.Min(minDeltaHorizontal, item.ActualWidth - item.MinWidth);Di2015NewLineDi2015NewLine        // stop moving whenDi2015NewLine        // at least one of the selected items is lockedDi2015NewLine        if (item.IsLocked)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        double? dragDeltaVertical = null;Di2015NewLine        switch (VerticalAlignment)Di2015NewLine        {Di2015NewLine            case VerticalAlignment.Bottom:Di2015NewLine                dragDeltaVertical = Math.Min(-e.VerticalChange, minDeltaVertical);Di2015NewLine                break;Di2015NewLine            case VerticalAlignment.Top:Di2015NewLine                dragDeltaVertical = Math.Min(Math.Max(-minTop, e.VerticalChange), minDeltaVertical);Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine        double? dragDeltaHorizontal = null;Di2015NewLine        switch (HorizontalAlignment)Di2015NewLine        {Di2015NewLine            case HorizontalAlignment.Left:Di2015NewLine                dragDeltaHorizontal = Math.Min(Math.Max(-minLeft, e.HorizontalChange), minDeltaHorizontal);Di2015NewLine                break;Di2015NewLine            case HorizontalAlignment.Right:Di2015NewLine                dragDeltaHorizontal = Math.Min(-e.HorizontalChange, minDeltaHorizontal);Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine        // in case the aspect ratio is kept then adjust both width and heightDi2015NewLine        if (item.KeepAspectRatio)Di2015NewLine        {Di2015NewLine            CheckAspectRatio(ref dragDeltaHorizontal, ref dragDeltaVertical, item.ActualHeight / item.ActualWidth);Di2015NewLine        }Di2015NewLineDi2015NewLine        if (dragDeltaVertical.HasValue)Di2015NewLine        {Di2015NewLine            switch (VerticalAlignment)Di2015NewLine            {Di2015NewLine                case System.Windows.VerticalAlignment.Bottom:Di2015NewLine                    Canvas.SetTop(item, Canvas.GetTop(item) + (_transformOrigin.Y * dragDeltaVertical.Value * (1 - Math.Cos(-_angle))));Di2015NewLine                    Canvas.SetLeft(item, Canvas.GetLeft(item) - dragDeltaVertical.Value * _transformOrigin.Y * Math.Sin(-_angle));Di2015NewLine                    break;Di2015NewLine                case System.Windows.VerticalAlignment.Top:Di2015NewLine                    Canvas.SetTop(item, Canvas.GetTop(item) + dragDeltaVertical.Value * Math.Cos(-_angle) + (_transformOrigin.Y * dragDeltaVertical.Value * (1 - Math.Cos(-_angle))));Di2015NewLine                    Canvas.SetLeft(item, Canvas.GetLeft(item) + dragDeltaVertical.Value * Math.Sin(-_angle) - (_transformOrigin.Y * dragDeltaVertical.Value * Math.Sin(-_angle)));Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    break;Di2015NewLine            }Di2015NewLineDi2015NewLine            item.Height = item.ActualHeight - dragDeltaVertical.Value;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (dragDeltaHorizontal.HasValue)Di2015NewLine        {Di2015NewLine            switch (HorizontalAlignment)Di2015NewLine            {Di2015NewLine                case System.Windows.HorizontalAlignment.Left:Di2015NewLine                    Canvas.SetTop(item, Canvas.GetTop(item) + dragDeltaHorizontal.Value * Math.Sin(_angle) - _transformOrigin.X * dragDeltaHorizontal.Value * Math.Sin(_angle));Di2015NewLine                    Canvas.SetLeft(item, Canvas.GetLeft(item) + dragDeltaHorizontal.Value * Math.Cos(_angle) + (_transformOrigin.X * dragDeltaHorizontal.Value * (1 - Math.Cos(_angle))));Di2015NewLine                    break;Di2015NewLine                case System.Windows.HorizontalAlignment.Right:Di2015NewLine                    Canvas.SetTop(item, Canvas.GetTop(item) - _transformOrigin.X * dragDeltaHorizontal.Value * Math.Sin(_angle));Di2015NewLine                    Canvas.SetLeft(item, Canvas.GetLeft(item) + (dragDeltaHorizontal.Value * _transformOrigin.X * (1 - Math.Cos(_angle))));Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    break;Di2015NewLine            }Di2015NewLineDi2015NewLine            item.Width = item.ActualWidth - dragDeltaHorizontal.Value;Di2015NewLine        }Di2015NewLineDi2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Checks the values so that the ratio beween them has a defined value.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="dragDeltaHorizontal">horizontal delta</param>Di2015NewLine    /// <param name="dragDeltaVertical">vertical delta</param>Di2015NewLine    /// <param name="aspectRatio">horizontal to vertical ration</param>Di2015NewLine    private void CheckAspectRatio(ref double? dragDeltaHorizontal, ref double? dragDeltaVertical, double aspectRatio)Di2015NewLine    {Di2015NewLine        double? dragValue = null;Di2015NewLine        if (dragDeltaVertical.HasValue && dragDeltaHorizontal.HasValue)Di2015NewLine        {Di2015NewLine            dragValue = Math.Max(dragDeltaVertical.Value, dragDeltaHorizontal.Value);Di2015NewLine        }Di2015NewLine        else if (dragDeltaVertical.HasValue)Di2015NewLine        {Di2015NewLine            dragValue = dragDeltaVertical;Di2015NewLine        }Di2015NewLine        else if (dragDeltaHorizontal.HasValue)Di2015NewLine        {Di2015NewLine            dragValue = dragDeltaHorizontal;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (dragValue.HasValue)Di2015NewLine        {Di2015NewLine            dragDeltaVertical = dragValue.Value * aspectRatio;Di2015NewLine            dragDeltaHorizontal = dragValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    }Di2015NewLine
11784460Di2015UniqueSeparatorpublic class MyHomeController : ControllerDi2015NewLine{Di2015NewLine  public ActionResult YourAddress()Di2015NewLine  {Di2015NewLine     return View();Di2015NewLine  }Di2015NewLine  public ActionResult YourPhotos()Di2015NewLine  {Di2015NewLine     return View();Di2015NewLine  }Di2015NewLine  public ActionResult YouProfile()Di2015NewLine  {Di2015NewLine     return VieW();Di2015NewLine  }Di2015NewLine  public ActionResult ChangePassword()Di2015NewLine  {Di2015NewLine     return View();Di2015NewLine  }Di2015NewLine  public ActionResult DeActivate()Di2015NewLine  {Di2015NewLine     return View();Di2015NewLine  }Di2015NewLine}Di2015NewLine
11784460Di2015UniqueSeparatorroutes.MapRoute("ChangePass","YourProfile/ChangePassword", Di2015NewLine                      new { controller="MyHome", action="ChangePassword" });Di2015NewLineroutes.MapRoute("DeActivate","YourProfile/DeActivate", Di2015NewLine                      new { controller="MyHome", action="DeActivate" });Di2015NewLineroutes.MapRoute(Di2015NewLine           "Default", Di2015NewLine           "{controller}/{action}/{id}", Di2015NewLine           new { controller = "Home", action = "Index", id = UrlParameter.Optional });Di2015NewLine
11784460Di2015UniqueSeparatorUrl.Action
11784460Di2015UniqueSeparator<div id="tabs"> Di2015NewLine    <ul> Di2015NewLine        <li><a href="@Url.Action("YourAddress","MyHome")">Address</a></li>Di2015NewLine        <li><a href="@Url.Action("YourPhotos","MyHome")">Photos</a></li>Di2015NewLine    </ul>Di2015NewLine</div>Di2015NewLine
11784463Di2015UniqueSeparatorInitializeComponent()
11784463Di2015UniqueSeparatormyDateTimePicker
11784477Di2015UniqueSeparatorCanonPrinter
11784477Di2015UniqueSeparatorEpsonPrinter
11784477Di2015UniqueSeparatorPrinter
11784477Di2015UniqueSeparatorPrinter
11784477Di2015UniqueSeparatorIPrintableDocument<TPrinter>
11784477Di2015UniqueSeparatorTPrinter
11784477Di2015UniqueSeparatorPrinter
11784477Di2015UniqueSeparatorEmployee
11784477Di2015UniqueSeparatorPerson
11784477Di2015UniqueSeparatorICopyDocuments
11784477Di2015UniqueSeparatorIWalkAbout
11784477Di2015UniqueSeparatorIMakeCoffee
11784477Di2015UniqueSeparatorReadOnlyCollection<T>
11784477Di2015UniqueSeparatorIList<T>
11784477Di2015UniqueSeparatorIList<T>
11784477Di2015UniqueSeparatorReadOnlyCollection<T>
11784477Di2015UniqueSeparatorlist.Add
11784477Di2015UniqueSeparatorIList<T>
11784477Di2015UniqueSeparatorReadOnlyCollection<T>
11784485Di2015UniqueSeparatormap = 0's, size of imageDi2015NewLinefunction f(x,y,image,map)Di2015NewLine    if map(x,y) is not  0Di2015NewLine        returnDi2015NewLine    if pixel value at image(x,y)<TDi2015NewLine        map(x,y) = 1;Di2015NewLine        for all neighbors of x,yDi2015NewLine           function([neighbor coordinates],image,map)Di2015NewLine    elseDi2015NewLine        map(x,y) = 2;Di2015NewLine endDi2015NewLine
11784573Di2015UniqueSeparator  WebClient wc = new WebClient();Di2015NewLine  var sas = wc.DownloadString("http://127.0.0.1:47413/api/values/1");Di2015NewLine
11784573Di2015UniqueSeparatorvar correctSAS = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(sas);Di2015NewLine
11784603Di2015UniqueSeparatorif
11784603Di2015UniqueSeparator(statement)
11784603Di2015UniqueSeparatorstring
11784603Di2015UniqueSeparatorDBNull.Value
11784603Di2015UniqueSeparatorstring
11784603Di2015UniqueSeparatorDBNull.Value
11784603Di2015UniqueSeparatorobject
11784603Di2015UniqueSeparatorbase.Database.AddInParameter(Di2015NewLine                             command, Di2015NewLine                             "ColumnX", Di2015NewLine                             DbType.String, Di2015NewLine                             statement ? "StackOverflow" : (object)DBNull.Value);Di2015NewLine
11784781Di2015UniqueSeparatorstruct ObjWr {Di2015NewLine    [FieldOffset (0)] IntPtr ptr;Di2015NewLine    [FieldOffset (0)] object obj;Di2015NewLine}Di2015NewLine
11784849Di2015UniqueSeparatorDim strSQL As String = ("SELECT * FROM myTable WHERE key like '%' + strkey + '%'")Di2015NewLineDi2015NewLineDim i as integerDi2015NewLinei = 0Di2015NewLineDi2015NewLineWhile oReader.Read()Di2015NewLine    With oReaderDi2015NewLine        while trueDi2015NewLine            Dim li As New ListItem(oReader(i).ToString())Di2015NewLine            if (li is Nothing)//isNull checkDi2015NewLine                breakDi2015NewLine            elseDi2015NewLine                fday.Items.Add(li)Di2015NewLine        End While Di2015NewLine    End With Di2015NewLineEnd While Di2015NewLine
11784849Di2015UniqueSeparatori
11784849Di2015UniqueSeparatorfor i = 0; i < X; i++
11784849Di2015UniqueSeparatorDim strSQL As String = ("SELECT field1, field2 FROM myTable WHERE key like '%' + strkey + '%'")Di2015NewLineDi2015NewLineWhile oReader.Read()Di2015NewLine    With oReaderDi2015NewLine        Dim li As New ListItem(oReader(0).ToString())Di2015NewLine        fday.Items.Add(li)Di2015NewLineDi2015NewLine        Dim txt as New TextBox()Di2015NewLine        txt.Text = oReader(1).ToString()Di2015NewLine        //store txt somewhere permanent?Di2015NewLine    End With 'end WithDi2015NewLineEnd While 'End WhileDi2015NewLine
11784930Di2015UniqueSeparatormap.MapRightKey("UserId");Di2015NewLinemap.MapRightKey("RuleId");Di2015NewLine
11784930Di2015UniqueSeparatormap.MapLeftKey("UserId");Di2015NewLinemap.MapRightKey("RuleId");Di2015NewLine
11784935Di2015UniqueSeparatorSecond
11784935Di2015UniqueSeparatorSecond
11784935Di2015UniqueSeparatorFirst
11784935Di2015UniqueSeparatorpublic Second(First f)Di2015NewLine{Di2015NewLine    f.DoSomethingUsingState();Di2015NewLine}Di2015NewLine
11784935Di2015UniqueSeparatorFirst
11784935Di2015UniqueSeparatorreadonly
11785002Di2015UniqueSeparatorvar req = WebRequest.Create(<your url>);Di2015NewLineNetworkCredential creds = new NetworkCredential(<username>, <password>);Di2015NewLinereq.Credentials = creds;Di2015NewLineDi2015NewLinevar rep = req.GetResponse();Di2015NewLine
11785002Di2015UniqueSeparatorpublic void SetBasicAuthHeader(WebRequest req, String userName, String userPassword)Di2015NewLine{Di2015NewLine string authInfo = userName + ":" + userPassword;Di2015NewLine authInfo = Convert.ToBase64String(Encoding.Default.GetBytes(authInfo));Di2015NewLine req.Headers["Authorization"] = "Basic " + authInfo;Di2015NewLine}Di2015NewLine
11785002Di2015UniqueSeparatorvar req = WebRequest.Create(<your url>);Di2015NewLineSetBasicAuthHeader(req, username, password);Di2015NewLinerep = req.GetResponse();Di2015NewLine
11785010Di2015UniqueSeparatorControl.Tag
11785010Di2015UniqueSeparatorobject
11785010Di2015UniqueSeparatorDictionary<int, string>
11785010Di2015UniqueSeparatorDictionary<int, string> dict = (Dictionary<int, string>)myTreeView.Node[0].Tag;Di2015NewLinestring str = dict[2];Di2015NewLine
11785010Di2015UniqueSeparatorvar dict = (Dictionary<int, string>)myTreeView.Node[0].Tag;Di2015NewLinedict[1] = "Spain";Di2015NewLine
11785010Di2015UniqueSeparatorKeyNotFoundException
11785010Di2015UniqueSeparatorTryGetValue
11785010Di2015UniqueSeparatorContainsKey
11785010Di2015UniqueSeparatorif(dict.ContainsKey(key))Di2015NewLine{Di2015NewLine    var value = dict[key];Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine}Di2015NewLine
11785010Di2015UniqueSeparatorstring value;Di2015NewLineif(dict.TryGetValue(key, out value))Di2015NewLine{Di2015NewLine    //use valueDi2015NewLine}Di2015NewLineelse { ... }Di2015NewLine
11785053Di2015UniqueSeparatorvar listOfMyObjectsContainingAnIdFromIdsList = myObjectList.Where(myObject => myObject.Ids.Any(id => idsList.Contains(id)));Di2015NewLine
11785088Di2015UniqueSeparatorif
11785088Di2015UniqueSeparatorswitch
11785088Di2015UniqueSeparatorprivate IDictionary<string, OutPort> ports = new Dictionary<string, OutPort>{Di2015NewLine  {"OutPortA", NXT_Brick.OutPortA},Di2015NewLine  {"OutPortB", NXT_Brick.OutPortB},Di2015NewLine  {"OutPortC", NXT_Brick.OutPortC}Di2015NewLine}Di2015NewLine
11785088Di2015UniqueSeparatorif(ports.Contains(key))Di2015NewLine{Di2015NewLine ports[key].SetOutputState();Di2015NewLine}Di2015NewLine
11785089Di2015UniqueSeparatorvoid wbForPrinting_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine{Di2015NewLine    // Print the document now that it is fully loaded.Di2015NewLine    ((WebBrowser)sender).ShowPrintPreviewDialog();Di2015NewLine    // Dispose the WebBrowser now that the task is complete. Di2015NewLine    ((WebBrowser)sender).Dispose();Di2015NewLine}Di2015NewLine
11785171Di2015UniqueSeparatorswitch
11785171Di2015UniqueSeparatorDictionary<int, char> shiftLookup = new Dictionary<int, char>Di2015NewLine{Di2015NewLine    {9, '('},Di2015NewLine    {8, '*'},Di2015NewLine    {7, '&'},Di2015NewLine    {6, '^'},Di2015NewLine    {5, '%'},Di2015NewLine    {4, '$'},Di2015NewLine    {3, '#'},Di2015NewLine    {2, '@'},Di2015NewLine    {1, '!'},Di2015NewLine    {0, ')'}Di2015NewLine};Di2015NewLine
11785238Di2015UniqueSeparator public virtual DateTime? DueDate { get; set; }Di2015NewLineDi2015NewLine public string DueDateStringDi2015NewLine        {Di2015NewLine            get { return DueDate != null ? DueDate.ToString() : string.Empty; }Di2015NewLine        }Di2015NewLine
11785291Di2015UniqueSeparatorSocketException
11785291Di2015UniqueSeparatorGetHostAddresses
11785291Di2015UniqueSeparatorWSA_NODATA
11785291Di2015UniqueSeparatorGetHostAddresses
11785291Di2015UniqueSeparatorSocketException
11785291Di2015UniqueSeparatorSocketException
11785291Di2015UniqueSeparatorMessage
11785291Di2015UniqueSeparatorWSANOTINITIALIZED
11785291Di2015UniqueSeparatorWSAENETDOWN
11785291Di2015UniqueSeparatorWSAHOST_NOT_FOUND
11785291Di2015UniqueSeparatorWSATRY_AGAIN
11785291Di2015UniqueSeparatorWSANO_RECOVERY
11785291Di2015UniqueSeparatorWSANO_DATA
11785291Di2015UniqueSeparatorWSAEINPROGRESS
11785291Di2015UniqueSeparatorWSAEFAULT
11785291Di2015UniqueSeparatorWSAEINTR
11785312Di2015UniqueSeparator    for (int y = img.Height - 1; y >= 0; --y)Di2015NewLine    {Di2015NewLine        Color rgb = new Color();Di2015NewLine        for (int x = 0; x < img.Width; ++x)Di2015NewLine        {Di2015NewLine            rgb = img.GetPixel(x, y);Di2015NewLineDi2015NewLine            if (rgb.ToArgb().Equals(Color.White.ToArgb()))Di2015NewLine            {Di2015NewLine               textBox1.AppendText(" ");Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                textBox1.AppendText("x");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        textBox1.AppendText(Environment.NewLine);Di2015NewLine    }Di2015NewLine
11785349Di2015UniqueSeparatorGoals
11785349Di2015UniqueSeparatorpublic class SomeThingDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine    public DateTime ModifiedOn { get; set; }Di2015NewLine    public string State { get; set; }Di2015NewLine    public List<Goal> Goals { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GoalDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Description{ get; set; }Di2015NewLine    public int DisplayOrder{ get; set; }Di2015NewLine}Di2015NewLine
11785349Di2015UniqueSeparatorpublic JsonResult Save(SomeThing model)Di2015NewLine{Di2015NewLine   // model.Name ....Di2015NewLine   // model.Id ...Di2015NewLine   // model.Goals is your list of GoalsDi2015NewLineDi2015NewLine   // return JsonDi2015NewLine}Di2015NewLine
11785521Di2015UniqueSeparatorpublic static T UnionCombine<T>(this IEnumerable<T> values) where T : new() {Di2015NewLine    var newItem = new T();Di2015NewLine    var properties = typeof(T).GetProperties();Di2015NewLine    for (var prop in properties) {Di2015NewLine        var pValueFirst = prop.GetValue(values.First(), null);Di2015NewLine        var useDefaultValue = values.Skip(1).Any(v=>!(Object.Equals(pValueFirst, prop.GetValue(v, null))));Di2015NewLine        if (!useDefaultValue) prop.SetValue(newItem, pValueFirst, null);Di2015NewLine    }Di2015NewLine    return newItem;Di2015NewLine}Di2015NewLine
11785554Di2015UniqueSeparator @{Di2015NewLine   int counter=0;Di2015NewLine }Di2015NewLine @foreach (var item in Model)Di2015NewLine { Di2015NewLine   counter++;Di2015NewLine   <div class="@(counter<=3 ? "classRed":"classBlue")">Di2015NewLine       <img src="@item.Blog.Image.img_path" alt="Not Found" />Di2015NewLine       //other markup also hereDi2015NewLineDi2015NewLine   </div>  Di2015NewLine    if (counter == 6)Di2015NewLine    {Di2015NewLine        counter = 0;Di2015NewLine    }Di2015NewLineDi2015NewLine }Di2015NewLine
11785554Di2015UniqueSeparatorclassRed
11785554Di2015UniqueSeparatorclassBlue
11785638Di2015UniqueSeparator<listitems>
11785638Di2015UniqueSeparatorname
11785638Di2015UniqueSeparatorpreceding-sibling
11785638Di2015UniqueSeparator<xsl:for-each select="/data/listitems[@key1=/data/table_1/@dropdown1][not(@name = preceding-sibling::listitems/@name)]">Di2015NewLine
11785638Di2015UniqueSeparator<listitems>
11785638Di2015UniqueSeparatorname
11785656Di2015UniqueSeparatorTask.Factory.StartNew(() => Console.ReadKey()).Wait(TimeSpan.FromSeconds(5.0));Di2015NewLine
11785666Di2015UniqueSeparator private void AddEOFB(string imgFileName)Di2015NewLine    {Di2015NewLine        var fs = new FileStream(imgFileName, FileMode.Append, FileAccess.Write);Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            fs.Seek(0, SeekOrigin.End);Di2015NewLine            var buf = BitConverter.GetBytes(0x00100100);Di2015NewLine            fs.Write(buf, 0, buf.Length);Di2015NewLine        }Di2015NewLine        catch { throw; }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            fs.Close();Di2015NewLine            fs.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11785754Di2015UniqueSeparatorif (someInteger) // C or C++Di2015NewLine
11785754Di2015UniqueSeparatorif (someInteger != 0) // C#Di2015NewLine
11785754Di2015UniqueSeparatorbool
11785754Di2015UniqueSeparatorbool
11785754Di2015UniqueSeparatorint x = ...;Di2015NewLineif (x = 10) // Whoops - meant to be == but it's actually an assignmentDi2015NewLine
11785754Di2015UniqueSeparatorif (10 == x)Di2015NewLine
11785754Di2015UniqueSeparatorbool
11785754Di2015UniqueSeparatorif (((info[i].location & 0x8) != 0)) ||Di2015NewLine    ((info[i].location & 0x100) != 0)) ||Di2015NewLine    ((info[i].location & 0x200) != 0)))Di2015NewLine
11785754Di2015UniqueSeparatorif ((info[i].location & 0x308) != 0)Di2015NewLine
11785754Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum LocationTypesDi2015NewLine{Di2015NewLine    Foo = 1 << 3; // The original 0x8Di2015NewLine    Bar = 1 << 8; // The original 0x100Di2015NewLine    Baz = 1 << 9; // The original 0x200Di2015NewLine}Di2015NewLine
11785754Di2015UniqueSeparatorLocationTypes mask = LocationTypes.Foo | LocationTypes.Bar | LocationTypes.Baz;Di2015NewLineif ((info[i].location) & mask != 0)Di2015NewLine
11785754Di2015UniqueSeparatorLocationTypes mask = LocationTypes.Foo | LocationTypes.Bar | LocationTypes.Baz;Di2015NewLineif (info[i].location.HasAny(mask))Di2015NewLine
11785782Di2015UniqueSeparatoron delete cascade
11785782Di2015UniqueSeparatorpublic class DbCtx : DbContext {Di2015NewLinepublic DbSet<Association> Associations { get; set; }Di2015NewLinepublic DbSet<Page> Pages { get; set; }Di2015NewLineDi2015NewLine    protected override void OnModelCreating(DbModelBuilder modelBuilder) {Di2015NewLine        modelBuilder.Entity<Association>()Di2015NewLine            .HasRequired(x => x.Page)Di2015NewLine            .WithMany(x => x.Associations)Di2015NewLine            .WillCascadeOnDelete(false);Di2015NewLine    }Di2015NewLine
11785782Di2015UniqueSeparatoron delete cascade
11785782Di2015UniqueSeparatorselect * from association where pageId or targetId = the id you are looking for
11785826Di2015UniqueSeparatorFileStream.ReadAsync
11785863Di2015UniqueSeparatorFile.Copy"C:/Gameservers/" + servername + "/server/main/server.cfg",Di2015NewLine         "C:/temp/backups/" + servername + "/server/main"); Di2015NewLineLog.Data("File server.cfg copied for server " + servername); Di2015NewLine
11786012Di2015UniqueSeparatorXElement root = XElement.Load(file);Di2015NewLinevar tables = root.Descendants("Table1")Di2015NewLine                 .Select(t => newDi2015NewLine                 {Di2015NewLine                     Server = t.Element("Server").Value,Di2015NewLine                     Database = t.Element("Database").ValueDi2015NewLine                 });Di2015NewLineDi2015NewLineforeach(var table in tables)Di2015NewLine    grid.Rows.Add(new object[] { table.Server, table.Database });Di2015NewLine
11786034Di2015UniqueSeparatorTarget
11786034Di2015UniqueSeparatorTarget = "_blank"
11786034Di2015UniqueSeparatorpreviewlink.NavigateUrl = ResolveUrl("~/admin/Preview_paper.aspx");Di2015NewLinepreviewlink.Target = "_blank";Di2015NewLine
11786227Di2015UniqueSeparatorvar ids = (from x in outerListDi2015NewLine          from y in x.ListDi2015NewLine          select y).ToList();Di2015NewLine
11786227Di2015UniqueSeparatorvar ids = (from x in outerListDi2015NewLine          from y in x.ListDi2015NewLine          select y).Distinct().ToList();Di2015NewLine
11786227Di2015UniqueSeparatorvar ids = outerList.SelectMany(x => x.List).ToList();Di2015NewLine
11786227Di2015UniqueSeparatorvar ids = outerList.SelectMany(x => x.List).Distinct().ToList();Di2015NewLine
11786239Di2015UniqueSeparatorSystem.Text.RegularExpressions.Regex
11786239Di2015UniqueSeparatorpublic static bool TestStringFromShortStrings(string checkText, string[] pieces) {Di2015NewLine    // Build the expression.  Ultimate result will beDi2015NewLine    // of the form "^(xxx|yyy|zzz)+$".Di2015NewLine    var expr = "^(" + Di2015NewLine               String.Join("|", pieces.Select(Regex.Escape)) + Di2015NewLine               ")+$";Di2015NewLineDi2015NewLine    // Check whether the supplied string matches the expression.Di2015NewLine    return Regex.IsMatch(checkText, expr);Di2015NewLine}Di2015NewLine
11786239Di2015UniqueSeparator"xxx"
11786239Di2015UniqueSeparator"xxxx"
11786316Di2015UniqueSeparator[FromUri]
11786316Di2015UniqueSeparatorparam=
11786316Di2015UniqueSeparator'member1=value&member2=value'
11786316Di2015UniqueSeparatormember1
11786316Di2015UniqueSeparatormember2
11786316Di2015UniqueSeparatorFoo
11786316Di2015UniqueSeparatordata
11786322Di2015UniqueSeparator<%@ Register Src="~/WebUserControl.ascx" TagName="WebUserControl1" TagPrefix="uc1" %>Di2015NewLine
11786438Di2015UniqueSeparatorprotected void dgvAppts_NeedDataSource(object source, EventArgs e)Di2015NewLine
11786438Di2015UniqueSeparatorprotected void BindMyGrid()Di2015NewLine
11786478Di2015UniqueSeparatorprivate static void AreSameParameter(out int one, out int two)Di2015NewLine{Di2015NewLine    one = 1;Di2015NewLine    two = 1;Di2015NewLine    one = 2;Di2015NewLine    if (two == 2)Di2015NewLine        Console.WriteLine("Same");Di2015NewLine    elseDi2015NewLine        Console.WriteLine("Different");Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int a;Di2015NewLine    int b;Di2015NewLine    AreSameParameter(out a, out a); // SameDi2015NewLine    AreSameParameter(out a, out b); // DifferentDi2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
11786677Di2015UniqueSeparatorIEnumerable<workerLog> query =Di2015NewLine
11786677Di2015UniqueSeparatorIEnumerable<WorkerLog>
11786677Di2015UniqueSeparatorIQueryable<WorkerLog>
11786677Di2015UniqueSeparatorvar
11786677Di2015UniqueSeparatorselect top 100 ...Di2015NewLine
11786677Di2015UniqueSeparatorIEnumerable<WorkerLog>
11786677Di2015UniqueSeparatorIQueryable<T>
11786677Di2015UniqueSeparatorIEnumerable<T>
11786725Di2015UniqueSeparatorvar matches = from m in db.CustomersDi2015NewLine    where m.Name.Contains(key)      Di2015NewLine    select m;Di2015NewLine
11786737Di2015UniqueSeparatorvar user = Windows.GetThisUser( me ); //current method (I said pseudo code)Di2015NewLinefunction CheckIfImAdmin( user ) .... //current methodDi2015NewLine
11786737Di2015UniqueSeparatorvar administrativeUsers = Windows.GetUsersInRole( "admin" ); //use a SID here, much more reliableDi2015NewLineforeach(user in administrativeUsers){Di2015NewLine  if (user == me) return true;Di2015NewLine  return false;Di2015NewLine}Di2015NewLine
11786751Di2015UniqueSeparatorpublic static bool saveFile(this Byte[] fileBytes, string filePath, string fileName, int category, string uploadedBy)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        FileStream fileStream = new FileStream(filePath + "/" + fileName, FileMode.Create, FileAccess.ReadWrite);Di2015NewLine        fileStream.Write(fileBytes, 0, fileBytes.Length);Di2015NewLine        fileStream.Dispose();Di2015NewLine        fileStream.Close();Di2015NewLine        FileUpload fileUpload = new FileUpload();Di2015NewLine        return fileUpload.createFileUpload(fileName, category, filePath, uploadedBy, DateTime.Now);Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        mLog.logMessage(ex, HttpContext.Current.Request.Url.ToString(), 1);Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11786756Di2015UniqueSeparator[DllImport("MyNativeC++DLL.dll")]Di2015NewLineprivate static extern void MyMethod(StringBuilder myCharPointerParameter);Di2015NewLine
11786829Di2015UniqueSeparatorSomeMethod
11786829Di2015UniqueSeparatorSomeMethod
11786876Di2015UniqueSeparator\\btest\\b
11786876Di2015UniqueSeparator(?i)\\btest\\b
11786936Di2015UniqueSeparatorcmd.CommandText = "select NUID, FNAME, LNAME from T_USER where NUID like @SearchText + '%' OR FNAME like @SearchText + '%' OR LNAME like @SearchText + '%'";Di2015NewLine
11786941Di2015UniqueSeparatorImageEdit
11786941Di2015UniqueSeparatorthis.tILEDataSet = new MyCompany.ImageEdit.TILEDataSet();Di2015NewLinethis.logosTableAdapter = new MyCompany.ImageEdit.TILEDataSetTableAdapters.LogosTableAdapter();Di2015NewLine
11787122Di2015UniqueSeparatorpublic class Registry<TKey, TValue>Di2015NewLine{Di2015NewLine    private Dictionary<TKey, TValue> dictionary = new Dictionary<TKey, TValue>();Di2015NewLine    private object Lock = new object();Di2015NewLineDi2015NewLine    public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)Di2015NewLine    {Di2015NewLine        TValue value;            Di2015NewLine        if (!dictionary.TryGetValue(key, out value))Di2015NewLine        {Di2015NewLine            lock(Lock)Di2015NewLine            {Di2015NewLine              var snapshot = new Dictionary<TKey, TValue>(dictionary);Di2015NewLine              if (!snapshot.TryGetValue(key, out value))Di2015NewLine              {Di2015NewLine                  value = valueFactory(key);Di2015NewLine                  snapshot.Add(key, value);Di2015NewLine                  dictionary = snapshot;Di2015NewLine              }Di2015NewLine            }   Di2015NewLine        }Di2015NewLine        return value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11787339Di2015UniqueSeparatorvar mousePosition = Mouse.GetPosition(rtb);Di2015NewLinevar textPointer = rtb.GetPositionFromPoint(mousePosition, false);Di2015NewLine
11787339Di2015UniqueSeparatorprivate string GetWordAtPointer(TextPointer textPointer)Di2015NewLine{Di2015NewLine    return string.Join(string.Empty, GetWordCharactersBefore(textPointer), GetWordCharactersAfter(textPointer));Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ReplaceWordAtPointer(TextPointer textPointer, string replacementWord)Di2015NewLine{Di2015NewLine    textPointer.DeleteTextInRun(-GetWordCharactersBefore(textPointer).Count());Di2015NewLine    textPointer.DeleteTextInRun(GetWordCharactersAfter(textPointer).Count());Di2015NewLineDi2015NewLine    textPointer.InsertTextInRun(replacementWord);Di2015NewLine}Di2015NewLineDi2015NewLineprivate string GetWordCharactersBefore(TextPointer textPointer)Di2015NewLine{Di2015NewLine    var backwards = textPointer.GetTextInRun(LogicalDirection.Backward);Di2015NewLine    var wordCharactersBeforePointer = new string(backwards.Reverse().TakeWhile(c => !char.IsSeparator(c) && !char.IsPunctuation(c)).Reverse().ToArray());Di2015NewLineDi2015NewLine    return wordCharactersBeforePointer;Di2015NewLine}Di2015NewLineDi2015NewLineprivate string GetWordCharactersAfter(TextPointer textPointer)Di2015NewLine{Di2015NewLine    var fowards = textPointer.GetTextInRun(LogicalDirection.Forward);Di2015NewLine    var wordCharactersAfterPointer = new string(fowards.TakeWhile(c => !char.IsSeparator(c) && !char.IsPunctuation(c)).ToArray());Di2015NewLineDi2015NewLine    return wordCharactersAfterPointer;Di2015NewLine}Di2015NewLine
11787466Di2015UniqueSeparatorpublic class ChildEntity : IdableEntityDi2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
11787499Di2015UniqueSeparatorpublic class MyConnection : DbConnectionDi2015NewLine{Di2015NewLine    ...Di2015NewLine    public override void Open()Di2015NewLine    {Di2015NewLine        using (SqlCommand cmd = new SqlCommand("SET ANSI_NULLS OFF", (SqlConnection)this.WrappedConnection))Di2015NewLine        {Di2015NewLine            cmd.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11787566Di2015UniqueSeparatorGrid
11787566Di2015UniqueSeparatorPanel
11787566Di2015UniqueSeparatorGrid
11787566Di2015UniqueSeparatorGridSplitters
11787674Di2015UniqueSeparatorvar tb = (TextBox)sender;Di2015NewLineif (Mouse.LeftButton != MouseButtonState.Pressed)Di2015NewLine    tb.SelectAll();Di2015NewLine
11787674Di2015UniqueSeparatorGotKeyboardFocus
11787674Di2015UniqueSeparatorprivate void TextBox_GotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyboardDevice.IsKeyDown(Key.Tab))Di2015NewLine        ((TextBox)sender).SelectAll();Di2015NewLine}Di2015NewLine
11787674Di2015UniqueSeparatorLostKeyboardFocus
11787674Di2015UniqueSeparator((TextBox)sender).Select(0, 0)
11787690Di2015UniqueSeparator(?i)(associate DEGREE in ELECtronics)Di2015NewLine
11787826Di2015UniqueSeparatornamespace TiffExampleDi2015NewLine{Di2015NewLine    using System;Di2015NewLine    using System.IO;Di2015NewLine    using System.Windows.Media;Di2015NewLine    using System.Windows.Media.Imaging;Di2015NewLineDi2015NewLine    public static class ProgramDi2015NewLine    {Di2015NewLine        private const int bytesPerPixel = 4; // This constant must correspond with the pixel format of the converted bitmap.Di2015NewLineDi2015NewLine        private static void Main()Di2015NewLine        {Di2015NewLine            var stream = File.Open("example.tif", FileMode.Open);Di2015NewLine            var tiffDecoder = new TiffBitmapDecoder(Di2015NewLine                stream,Di2015NewLine                BitmapCreateOptions.PreservePixelFormat | BitmapCreateOptions.IgnoreImageCache,Di2015NewLine                BitmapCacheOption.None);Di2015NewLine            stream.Dispose();Di2015NewLineDi2015NewLine            var firstFrame = tiffDecoder.Frames[0];Di2015NewLine            var convertedBitmap = new FormatConvertedBitmap(firstFrame, PixelFormats.Bgra32, null, 0);Di2015NewLineDi2015NewLine            var width = convertedBitmap.PixelWidth;Di2015NewLine            var height = convertedBitmap.PixelHeight;Di2015NewLineDi2015NewLine            var bytes = new byte[width * height * bytesPerPixel];Di2015NewLineDi2015NewLine            convertedBitmap.CopyPixels(bytes, width * bytesPerPixel, 0);Di2015NewLineDi2015NewLine            Console.WriteLine(GetPixel(bytes, 548, 314, width));Di2015NewLineDi2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Color GetPixel(byte[] bgraBytes, int x, int y, int width)Di2015NewLine        {Di2015NewLine            var index = (y * (width * bytesPerPixel) + (x * bytesPerPixel));Di2015NewLineDi2015NewLine            return Color.FromArgb(Di2015NewLine                bgraBytes[index + 3],Di2015NewLine                bgraBytes[index + 2],Di2015NewLine                bgraBytes[index + 1],Di2015NewLine                bgraBytes[index]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11787847Di2015UniqueSeparator    Byte myByte = (Byte)stream.ReadByte();Di2015NewLine    return new CmdDi2015NewLine    {Di2015NewLine        MyByte = myByte,Di2015NewLine        MyString = SomeMethodBasedOnMyFirstByte(myByte)Di2015NewLine    };Di2015NewLine
11787847Di2015UniqueSeparatorByte
11787857Di2015UniqueSeparatorvar syms = new List<string>() { "ANZ", "BHP", };Di2015NewLineDi2015NewLinevar query =Di2015NewLine    from i in Observable.Interval(TimeSpan.FromSeconds(1.0))Di2015NewLine    from sym in syms.ToObservable()Di2015NewLine    from d in GoToWeb(sym).ToObservable()Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        Symbol = sym,Di2015NewLine        Value = d,Di2015NewLine    };Di2015NewLine
11787857Di2015UniqueSeparatorSystem.Reactive.Threading.Tasks
11787857Di2015UniqueSeparatorToObservable()
11787876Di2015UniqueSeparatorgvGrid.HeaderRow.Cells[0].Visible = false;
11787906Di2015UniqueSeparatorxn["Name"].InnerTextDi2015NewLine
11787906Di2015UniqueSeparator/Patient/Patient/Name
11787906Di2015UniqueSeparatorxn.InnerTextDi2015NewLine
11787969Di2015UniqueSeparatorvar regEx_gaid = "";Di2015NewLineDi2015NewLine$.get('regex_gaid.aspx', function(data) {Di2015NewLine  regEx_gaid = data;Di2015NewLine});Di2015NewLine
11788009Di2015UniqueSeparatorContent.RootDirectory = "Content";Di2015NewLine
11788009Di2015UniqueSeparatorplayer.Initialize(Content.Load("player"), playerPosition); Di2015NewLine
11788045Di2015UniqueSeparatornamespace CovarianceDi2015NewLine{Di2015NewLine    public class MyContainerDi2015NewLine    {Di2015NewLine        public string ContainerName { get; set; }Di2015NewLine        public IList<Square> MySquares { get; set; }Di2015NewLine        public IList<Circle> MyCircles { get; set; }Di2015NewLine        public MyContainer() {Di2015NewLine            MySquares = new List<Square>();Di2015NewLine            MyCircles = new List<Circle>();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ShapeDi2015NewLine    {Di2015NewLine        public int Area { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Square : ShapeDi2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Circle : ShapeDi2015NewLine    {Di2015NewLine    }   Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main( string[] args ) {Di2015NewLineDi2015NewLine            MyContainer mc = new MyContainer();Di2015NewLine            mc.MyCircles.Add( new Circle { Area = 60 } );Di2015NewLineDi2015NewLine            Collect( mc );Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void Collect( MyContainer container ) {Di2015NewLine            var properties = container.GetType().GetProperties();Di2015NewLine            foreach( var property in properties ) {Di2015NewLine                if( property.PropertyType.IsGenericType &&Di2015NewLine                    property.PropertyType.GetGenericTypeDefinition() == typeof( IList<> ) &&Di2015NewLine                    typeof( Shape ).IsAssignableFrom( property.PropertyType.GetGenericArguments()[0] ) ) {Di2015NewLine                    var t = property.GetValue( container, null ) as IEnumerable<Shape>;Di2015NewLine                    if( t != null ) {Di2015NewLine                        foreach( Shape shape in t ) {Di2015NewLine                            Console.WriteLine( shape.Area );Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11788064Di2015UniqueSeparatorpublic class MockGolfEntities : DbContext, IContextDi2015NewLine{Di2015NewLine    public MockGolfEntities() {}Di2015NewLineDi2015NewLine    public IDbSet<Golfer> Golfers { get; set;}Di2015NewLineDi2015NewLine}Di2015NewLine
11788067Di2015UniqueSeparator        **comboBox2.DataSource = null;**Di2015NewLine        if (ComboBox1.Text == "Customers")Di2015NewLine        {Di2015NewLine            var qry = (from u in dc.CustomersDi2015NewLine                       select new { u.CustomerID, u.CompanyName }).ToList();Di2015NewLine            comboBox2.ValueMember = "CustomerID";Di2015NewLine            comboBox2.DisplayMember = "CompanyName";Di2015NewLine            comboBox2.DataSource = qry;Di2015NewLine        }Di2015NewLine        if (ComboBox1.Text == "Suppliers")Di2015NewLine        {Di2015NewLine            var qry = (from u in dc.SuppliersDi2015NewLine                       select new { u.SupplierID, u.CompanyName }).ToList();Di2015NewLine            comboBox2.ValueMember = "SupplierID";Di2015NewLine            comboBox2.DisplayMember = "CompanyName";Di2015NewLine            comboBox2.DataSource = qry;Di2015NewLine        }Di2015NewLine
11788560Di2015UniqueSeparatorPublic float TestVectorXDi2015NewLine{Di2015NewLine    get { return TestVector.X; }Di2015NewLine    set { TestVector.X = value; }Di2015NewLine}Di2015NewLineDi2015NewLinePublic float TestVectorYDi2015NewLine{Di2015NewLine    get { return TestVector.Y; }Di2015NewLine    set { TestVector.Y = value; }Di2015NewLine}Di2015NewLine
11788594Di2015UniqueSeparatorprivate static object MyLock = new object();Di2015NewLine
11788594Di2015UniqueSeparatorprivate readonly object MyLock = new object();Di2015NewLine
11788627Di2015UniqueSeparatorStyleSheet styles = new iTextSharp.text.html.simpleparser.StyleSheet();Di2015NewLinestyles.LoadTagStyle("th", "color", "red");Di2015NewLinestyles.LoadTagStyle("th", "frontsize", "5");Di2015NewLinepdfDoc.Add(new Header(iTextSharp.text.html.Markup.HTML_ATTR_STYLESHEET, "Style.css"));Di2015NewLine
11788669Di2015UniqueSeparatorDialogResult
11788669Di2015UniqueSeparatorDialogResult
11788669Di2015UniqueSeparatorif(secondform.ShowDialog() == DialogResult.OK)Di2015NewLine{Di2015NewLine    textBox.Focus();Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11788669Di2015UniqueSeparatorShowDialog()
11788669Di2015UniqueSeparatorsecondform.ShowDialog();Di2015NewLinetextbox.Focus()Di2015NewLine
11788824Di2015UniqueSeparator    [Required(ErrorMessage = "Title is required.")]Di2015NewLine
11788831Di2015UniqueSeparator    foreach (var status in facebookStatus)Di2015NewLine    {Di2015NewLine        Label lblStatus = new Label();Di2015NewLine        lblStatus.Text = status;Di2015NewLine        this.Controls.Add(lblStatus);Di2015NewLine    }Di2015NewLine
11788889Di2015UniqueSeparatortmpString2.IndexOf(@tmpString)
11788889Di2015UniqueSeparatortmpString.IndexOf(@tmpString2)
11788914Di2015UniqueSeparatorstring newConnectionString = _dbaseSetting.ConnectionString;Di2015NewLine
11788914Di2015UniqueSeparatorstring newConnectionString = DatabaseSettings.ConnectionString;Di2015NewLine
11788914Di2015UniqueSeparatorTestConnection
11788914Di2015UniqueSeparatorConnectionString
11788993Di2015UniqueSeparatorTaskbarManager.Instance.SetApplicationIdForSpecificWindow(window, guid);Di2015NewLine
11789167Di2015UniqueSeparatorpublic partial class NewsArticleContainer : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine   List<string> NewsArticle = null;Di2015NewLine   public NewsArticleContainer(List<string> toCreateNewsArticle)Di2015NewLine   {Di2015NewLine      NewsArticle = toCreateNewsArticle;Di2015NewLine   }Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine       foreach(string s in NewsArticle)Di2015NewLine       {Di2015NewLine          //dynamically create your label control and add it to this user controlDi2015NewLine          Label lb = new Label;Di2015NewLine          lb.Text = s;Di2015NewLine          this.Controls.Add(lb);Di2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11789240Di2015UniqueSeparator    public static bool IsNullOrEmpty(this IEnumerable collection)Di2015NewLine    {Di2015NewLine        return collection == null || !collection.Cast<object>().Any();Di2015NewLine    }Di2015NewLine
11789369Di2015UniqueSeparatorHKCU\\Software\\Microsoft\\Windows\\Shell\\BagMRUDi2015NewLineHKCU\\Software\\Microsoft\\Windows\\Shell\\BagsDi2015NewLine
11789397Di2015UniqueSeparatorLinkButton Id
11789397Di2015UniqueSeparatorHiddenField
11789397Di2015UniqueSeparatorModalPopupExtender.Show()
11789397Di2015UniqueSeparator<asp:HiddenField ID="hdnpop" runat="server" />Di2015NewLineDi2015NewLine<asp:ModalPopupExtender runat="server" ID="modelPopupExtender1" TargetControlID="hdnpop"Di2015NewLine            PopupControlID="pan_addEdit" BackgroundCssClass="modalBackground">Di2015NewLine</asp:ModalPopupExtender>Di2015NewLine
11789397Di2015UniqueSeparatorif(RULE)Di2015NewLine{//Do somethingDi2015NewLine    modelPopupExtender1.Show()Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine   //Do something else an dont Show()Di2015NewLine}Di2015NewLine
11789486Di2015UniqueSeparatorSessionTimeOutHandler()
11789486Di2015UniqueSeparator string strconfirm = "<script>" + Di2015NewLine                     "window.setTimeout('SessionTimeOutHandler()', 60000);" + Di2015NewLine"function SessionTimeOutHandler() { "+Di2015NewLine"    if(!window.confirm('Your login session is about to expire. Do you want to extend it?'))"Di2015NewLine+"   {window.location.href='../login.aspx'}</script>"; }";Di2015NewLine
11789496Di2015UniqueSeparatorRandom
11789496Di2015UniqueSeparatorSystem
11789496Di2015UniqueSeparatorusing System;
11789573Di2015UniqueSeparatorlist.BreakRoleInheritance(true);Di2015NewLineSPGroup groupAdmin = web.SiteGroups["IKM Manager"];Di2015NewLineSPRoleAssignment roleAssignmentAdmin = new SPRoleAssignment((SPPrincipal)groupAdmin);Di2015NewLineSPRoleDefinition roleAdmin = web.RoleDefinitions.GetByType(SPRoleType.Administrator);Di2015NewLineroleAssignmentAdmin.RoleDefinitionBindings.Add(roleAdmin);Di2015NewLinelist.RoleAssignments.Add(roleAssignmentAdmin);Di2015NewLinelist.Update();Di2015NewLine
11789618Di2015UniqueSeparator  static void Main()Di2015NewLine  {Di2015NewLine     double y = 1.23456;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLine     y= -12.34567;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLine     y = -0.123456;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLine     y = 1234.567;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLineDi2015NewLine     y = 0.00000234;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLineDi2015NewLine     y = 1.1;Di2015NewLine     Console.WriteLine(FormatNumDigits(y,5));Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine  public string FormatNumDigits(double number, int x) {Di2015NewLine     string asString = (number >= 0? "+":"") + number.ToString("F50",System.Globalization.CultureInfo.InvariantCulture);Di2015NewLineDi2015NewLine     if (asString.Contains('.')) {Di2015NewLine        if (asString.Length > x + 2) {Di2015NewLine           return asString.Substring(0, x + 2);Di2015NewLine        } else {Di2015NewLine           // Pad with zerosDi2015NewLine           return asString.Insert(asString.Length, new String('0', x + 2 - asString.Length));Di2015NewLine        }Di2015NewLine     } else {Di2015NewLine        if (asString.Length > x + 1) {Di2015NewLine           return asString.Substring(0, x + 1);Di2015NewLine        } else {Di2015NewLine           // Pad with zerosDi2015NewLine           return asString.Insert(1, new String('0', x + 1 - asString.Length));Di2015NewLine        }Di2015NewLine     }Di2015NewLine  }Di2015NewLine
11789618Di2015UniqueSeparator  +1.2345Di2015NewLine  -12.345Di2015NewLine  -0.1234Di2015NewLine  +1234.5Di2015NewLine  +0.0000Di2015NewLine  +1.1000Di2015NewLine
11789663Di2015UniqueSeparator String fileToUpload = @"C:\\YourFile.txt";Di2015NewLine        String sharePointSite = "http://yoursite.com/sites/Research/";Di2015NewLine        String documentLibraryName = "Shared Documents";Di2015NewLineDi2015NewLine        using (SPSite oSite = new SPSite(sharePointSite))Di2015NewLine        {Di2015NewLine            using (SPWeb oWeb = oSite.OpenWeb())Di2015NewLine            {Di2015NewLine                if (!System.IO.File.Exists(fileToUpload))Di2015NewLine                    throw new FileNotFoundException("File not found.", fileToUpload);                    Di2015NewLineDi2015NewLine                SPFolder myLibrary = oWeb.Folders[documentLibraryName];Di2015NewLineDi2015NewLine                // Prepare to uploadDi2015NewLine                Boolean replaceExistingFiles = true;Di2015NewLine                String fileName = System.IO.Path.GetFileName(fileToUpload);Di2015NewLine                FileStream fileStream = File.OpenRead(fileToUpload);Di2015NewLineDi2015NewLine                // Upload documentDi2015NewLine                SPFile spfile = myLibrary.Files.Add(fileName, fileStream, replaceExistingFiles);Di2015NewLineDi2015NewLine                // Commit Di2015NewLine                myLibrary.Update();Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11789713Di2015UniqueSeparatorforeach (var item in collection) {Di2015NewLine   <script type="text/javascript">Di2015NewLine     JK();Di2015NewLine   </script>Di2015NewLine}Di2015NewLine
11789713Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine   @foreach (var item in collection) {Di2015NewLine      <text>JK();</text>Di2015NewLine   }Di2015NewLine</script>Di2015NewLine
11789878Di2015UniqueSeparator(?<=\\>[^>]*)the act(?=[^<]*\\<)
11790185Di2015UniqueSeparatorIPGlobalProperties.GetUdpIPv4StatisticsDi2015NewLine
11790219Di2015UniqueSeparatorfirebug
11790219Di2015UniqueSeparatorajax
11790219Di2015UniqueSeparator  data: request.term,Di2015NewLine
11790219Di2015UniqueSeparator  data:  "{'prefixText':'" + request.term+ "'}",Di2015NewLine
11790219Di2015UniqueSeparatorprefixText
11790219Di2015UniqueSeparatorrequest.term
11790219Di2015UniqueSeparator        <script src="js/jquery-1.4.2.min.js" type="text/javascript"></script>Di2015NewLine        <script src="js/jquery-ui-1.8.custom.min.js" type="text/javascript"></script>Di2015NewLine        <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="stylesheet" type="text/css"/>Di2015NewLineDi2015NewLine        <script type="text/javascript">Di2015NewLine            $(document).ready(function() {          Di2015NewLine               $("input#autocomplete").autocomplete({Di2015NewLine                source: function (request, response) {Di2015NewLine                    $.ajax({Di2015NewLine                        url: "/Service/WSDataService.asmx/GetStatesWithAbbr",Di2015NewLine                        data: "{'name':'" + $(autocomplete).val() + "'}",Di2015NewLine                        dataType: "json",Di2015NewLine                        type: "POST",Di2015NewLine                        contentType: "application/json; charset=utf-8",Di2015NewLine                        dataFilter: function (data) { return data; },Di2015NewLine                        success: function (data) {Di2015NewLine                            response($.map(data.d, function (item) {Di2015NewLine                                return {Di2015NewLine                                    label: item.Name,Di2015NewLine                                    value: item.NameDi2015NewLine                                }Di2015NewLine                            }))Di2015NewLine                        }Di2015NewLine                    });Di2015NewLine                },Di2015NewLine                minLength: 1Di2015NewLine              });Di2015NewLine            });Di2015NewLine        </script>Di2015NewLine
11790219Di2015UniqueSeparator     <input id="autocomplete" />Di2015NewLine
11790219Di2015UniqueSeparator   [WebMethod]        Di2015NewLine    public List<State> GetStatesWithAbbr(string name)Di2015NewLine    {Di2015NewLine        List<State> sbStates = new List<State>();Di2015NewLine        //Add states to the ListDi2015NewLine       }Di2015NewLine
11790227Di2015UniqueSeparatorNT Authority\\LocalSystem
11790227Di2015UniqueSeparatorNT Authority\\LocalSystem
11790263Di2015UniqueSeparatorpublic partial class FormTicker : FormDi2015NewLine{Di2015NewLine    Timer timer;Di2015NewLine    public FormTicker()Di2015NewLine    {Di2015NewLine        timer = new Timer();Di2015NewLine        InitializeComponent();Di2015NewLine        timer.Interval = 2000;Di2015NewLine        timer.Tick += new EventHandler(timer_Tick);Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    void timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine        FormMain formMain = new FormMain();Di2015NewLine        formMain.Show();Di2015NewLine        this.Hide();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11790279Di2015UniqueSeparatorNewsArticle
11790279Di2015UniqueSeparatorNewsArticleContainer.ascx
11790279Di2015UniqueSeparatorvar control = (NewsArticleContainer)LoadControl("~/UserControls/NewsArticleContainer.ascx");Di2015NewLinecontrol.NewsArticle = x;Di2015NewLine
11790306Di2015UniqueSeparatorfor(int i=0;i=100;i++)Di2015NewLineDi2015NewLinefor(long i=0;i=1000;i++)Di2015NewLine
11790306Di2015UniqueSeparatorbool
11790497Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ServiceModel;Di2015NewLineusing System.ServiceProcess;Di2015NewLineusing QuickReturns.StockTrading.ExchangeService;Di2015NewLineDi2015NewLinenamespace QuickReturns.StockTrading.ExchangeService.HostsDi2015NewLine{Di2015NewLine    public partial class ExchangeWindowsService : ServiceBaseDi2015NewLine    {Di2015NewLine        ServiceHost host;Di2015NewLineDi2015NewLine        public ExchangeWindowsService()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnStart(string[] args)Di2015NewLine        {Di2015NewLine            Type serviceType = typeof(TradeService);Di2015NewLine            host = new ServiceHost(serviceType);Di2015NewLine            host.Open();Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnStop()Di2015NewLine        {Di2015NewLine            if(host != null)Di2015NewLine               host.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11790755Di2015UniqueSeparatorstring [] items = {"one","two","three","one","two","one"};Di2015NewLineitems =  items.Select(s => s!= "one" ? s : "zero").ToArray();Di2015NewLine
11790758Di2015UniqueSeparatorresponse.Close();
11790758Di2015UniqueSeparatorresponse
11790848Di2015UniqueSeparator.hexdigest()
11790848Di2015UniqueSeparatorConvert.ToBase64String
11790848Di2015UniqueSeparatorpublic static string ToHexString(byte[] array)Di2015NewLine{Di2015NewLine    StringBuilder hex = new StringBuilder(array.Length * 2);Di2015NewLine    foreach (byte b in array)Di2015NewLine    {Di2015NewLine        hex.AppendFormat("{0:x2}", b);Di2015NewLine    }Di2015NewLine    return hex.ToString();Di2015NewLine}Di2015NewLine
11790848Di2015UniqueSeparatorASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLineByte[] code = encoder.GetBytes("ant");Di2015NewLineHMACSHA1 hmSha1 = new HMACSHA1(code);Di2015NewLineByte[] hashMe = encoder.GetBytes("bat");Di2015NewLineByte[] hmBytes = hmSha1.ComputeHash(hashMe);Di2015NewLineConsole.WriteLine(ToHexString(hmBytes));Di2015NewLine
11790848Di2015UniqueSeparator739ebc1e3600d5be6e9fa875bd0a572d6aee9266Di2015NewLine
11790931Di2015UniqueSeparatorDataRow row = ResultDT.NewRow();Di2015NewLinefor (int i = 0; i < ValToAppendDt.Count; i++)Di2015NewLine    {            Di2015NewLine        row[i] = ValToAppendDt[i].ToString();            Di2015NewLine    }Di2015NewLineResultDT.Rows.Add(row);Di2015NewLine
11790937Di2015UniqueSeparatorA myInstance = new A();Di2015NewLineType myType = myInstance.GetType();Di2015NewLineif (myType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | Di2015NewLine                            BindingFlags.Static | BindingFlags.Instance)Di2015NewLine   .Any(property => propoerty.CanRead && property.GetValue(myInstance, null) != null)) Di2015NewLine{ /* something is not null in myInstance */}Di2015NewLine
11790945Di2015UniqueSeparatorMyCompositionPlugin
11790945Di2015UniqueSeparatorCompositionPlugin
11790945Di2015UniqueSeparatorMyCompositionPlugin
11790945Di2015UniqueSeparatorProgram
11790945Di2015UniqueSeparatorMyCompositionPlugin
11790945Di2015UniqueSeparatorpublic CompositionPlugin GetCompositionPlugin(Type ofType)Di2015NewLine{Di2015NewLine    foreach (CompositionPlugin plugin in CompositionPlugins)Di2015NewLine        if (ofType.AssemblyQualifiedName.Equals(plugin.GetType().AssemblyQualifiedName))Di2015NewLine            return plugin;Di2015NewLineDi2015NewLine    throw new ArgumentException("A composition plugin of type " + ofType.FullName + " could not be found");Di2015NewLine}Di2015NewLine
11790995Di2015UniqueSeparator$('#menu-pages').sortable({Di2015NewLine    update: function (event, ui) {Di2015NewLine        $.ajax({Di2015NewLine            url: '@Url.Action("SaveSortable", "Home")',Di2015NewLine            type: 'POST',Di2015NewLine            cache: false,Di2015NewLine            contentType: 'application/json',Di2015NewLine            data: JSON.stringify({ pages: $(this).sortable('toArray') }),Di2015NewLine            success: function(result) {Di2015NewLine                // ...Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine});Di2015NewLine
11790995Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult SaveSortable(string[] pages)Di2015NewLine{Di2015NewLine    // pages will contain what you need => a list of idsDi2015NewLine    ...Di2015NewLine}Di2015NewLine
11790995Di2015UniqueSeparator{"pages":["ID_2","ID_3","ID_1","ID_4"]}Di2015NewLine
11791350Di2015UniqueSeparatorclass SomeClass {Di2015NewLineDi2015NewLine    void myAction(string what)Di2015NewLine    {Di2015NewLine        // whateverDi2015NewLine    }Di2015NewLineDi2015NewLine    void someFunction()Di2015NewLine    {Di2015NewLine          new List<string>().ForEach(item => myAction(item));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11791350Di2015UniqueSeparatorAction<string>
11791350Di2015UniqueSeparatora method with a string parameter which does not return a value
11791370Di2015UniqueSeparator<xsl:value-of select="Single"/>Di2015NewLine
11791370Di2015UniqueSeparator<xsl:value-of select="'Single'"/>Di2015NewLine
11791370Di2015UniqueSeparator<status>Single</status>Di2015NewLine
11791370Di2015UniqueSeparator<xsl:template match="employee">Di2015NewLine   <xsl:copy>Di2015NewLine      <xsl:apply-templates select="@*|node()"/>Di2015NewLine      <status>Single</status>Di2015NewLine   </xsl:copy>Di2015NewLine</xsl:template>Di2015NewLine
11791370Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">Di2015NewLine   <xsl:output method="xml" indent="yes"/>Di2015NewLineDi2015NewLine   <xsl:template match="@*|node()">Di2015NewLine      <xsl:copy>Di2015NewLine         <xsl:apply-templates select="@*|node()"/>Di2015NewLine      </xsl:copy>Di2015NewLine   </xsl:template>Di2015NewLineDi2015NewLine   <xsl:template match="employee">Di2015NewLine      <xsl:copy>Di2015NewLine         <xsl:apply-templates select="@*|node()"/>Di2015NewLine         <status>Single</status>Di2015NewLine      </xsl:copy>Di2015NewLine   </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11791370Di2015UniqueSeparator<root>Di2015NewLine   <employee>Di2015NewLine      <firstname>Kaushal</firstname>Di2015NewLine      <lastname>Parik</lastname>Di2015NewLine      <status>Single</status>Di2015NewLine   </employee>Di2015NewLine   <employee>Di2015NewLine      <firstname>Abhishek</firstname>Di2015NewLine      <lastname>Swarnkar</lastname>Di2015NewLine      <status>Single</status>Di2015NewLine   </employee>Di2015NewLine</root>Di2015NewLine
11791582Di2015UniqueSeparator<script>
11791582Di2015UniqueSeparator<script>Di2015NewLine
11791608Di2015UniqueSeparatortime
11791608Di2015UniqueSeparatorint
11791608Di2015UniqueSeparatorlong
11791608Di2015UniqueSeparatorlong
11791608Di2015UniqueSeparator* 86400000L
11791629Di2015UniqueSeparatorNullable<T>
11791629Di2015UniqueSeparatorstruct
11791629Di2015UniqueSeparatornull
11791629Di2015UniqueSeparatornull
11791629Di2015UniqueSeparatornull
11791629Di2015UniqueSeparatorNullable<T>
11791647Di2015UniqueSeparatorGroups
11791647Di2015UniqueSeparatorString name   = m.Groups[1].Value;Di2015NewLineString number = m.Groups[2].Value;Di2015NewLine
11791714Di2015UniqueSeparatorEndInvoke
11791714Di2015UniqueSeparatorBeginInvoke
11791714Di2015UniqueSeparatorBeginInvoke
11791714Di2015UniqueSeparatorEndInvoke
11791714Di2015UniqueSeparatorCellEndEdit
11791846Di2015UniqueSeparatora.ShowDialog();
11791846Di2015UniqueSeparatora.Show();
11791846Di2015UniqueSeparatora.Activate();
11791846Di2015UniqueSeparatorActivate()
11791927Di2015UniqueSeparatorInnerException
11791927Di2015UniqueSeparatorAssert.Fail("message")
11791982Di2015UniqueSeparatorAddNumber method = r => Di2015NewLine{Di2015NewLine    Console.WriteLine(r + r);Di2015NewLine    Console.Read();Di2015NewLine};Di2015NewLine
11791989Di2015UniqueSeparatorif(args.Length==0)
11791989Di2015UniqueSeparatorargs[0]
11792021Di2015UniqueSeparatorfileNames.AddRange(directory.Files.Select(f => f.Name).Where(a => a.EndsWith(s));Di2015NewLine
11792122Di2015UniqueSeparatorvar data = new[] { 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2 };Di2015NewLineDi2015NewLineFunc<int, bool> acceptPredicate = i => i != 0;Di2015NewLineDi2015NewLine// The reverse of acceptPredicate, but could be otherwiseDi2015NewLineFunc<int, bool> rejectPredicate = i => i == 0; Di2015NewLine
11792122Di2015UniqueSeparatorGroupBy
11792122Di2015UniqueSeparatorvar acceptMode = false;Di2015NewLinevar groupCount = 0;Di2015NewLinevar groups = data.GroupBy(i => {Di2015NewLine    if (acceptMode && rejectPredicate(i)) {Di2015NewLine        acceptMode = false;Di2015NewLine        ++groupCount;Di2015NewLine    }Di2015NewLine    else if (!acceptMode && acceptPredicate(i)) {Di2015NewLine        acceptMode = true;Di2015NewLine        ++groupCount;Di2015NewLine    }Di2015NewLine    return groupCount;Di2015NewLine});Di2015NewLine
11792122Di2015UniqueSeparatorvar result = groups.Where(g => !rejectPredicate(g.First()))Di2015NewLine                   .FirstOrDefault(g => g.Count() >= 5);Di2015NewLine
11792122Di2015UniqueSeparatorrejectPredicate
11792206Di2015UniqueSeparatorXDocument document = XDocument.Load(Server.MapPath("~/App_Data/de_language.xml"));Di2015NewLineXElement element = document.Root.Elements("resources").FirstOrDefault(e => e.Element("id").Value == "id_SearchUser");Di2015NewLinestring text;Di2015NewLineif (element != null)Di2015NewLine  text = element.Element("text").Value;Di2015NewLine
11792206Di2015UniqueSeparatorXDocument
11792206Di2015UniqueSeparatorXmlDocument
11792282Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Net;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace ImgurExampleDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            PostToImgur(@"C:\\Users\\ashwin\\Desktop\\image.jpg", IMGUR_ANONYMOUS_API_KEY);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void PostToImgur(string imagFilePath, string apiKey)Di2015NewLine        {Di2015NewLine            byte[] imageData;Di2015NewLineDi2015NewLine            FileStream fileStream = File.OpenRead(imagFilePath);Di2015NewLine            imageData = new byte[fileStream.Length];Di2015NewLine            fileStream.Read(imageData, 0, imageData.Length);Di2015NewLine            fileStream.Close();Di2015NewLineDi2015NewLine            const int MAX_URI_LENGTH = 32766;Di2015NewLine            string base64img = System.Convert.ToBase64String(imageData);Di2015NewLine            StringBuilder sb = new StringBuilder();Di2015NewLineDi2015NewLine            for(int i = 0; i < base64img.Length; i += MAX_URI_LENGTH) {Di2015NewLine                sb.Append(Uri.EscapeDataString(base64img.Substring(i, Math.Min(MAX_URI_LENGTH, base64img.Length - i))));Di2015NewLine            }Di2015NewLineDi2015NewLine            string uploadRequestString = "image=" + sb.ToString() + "&key=" + imgurApiKey;Di2015NewLineDi2015NewLine            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("http://api.imgur.com/2/upload");Di2015NewLine            webRequest.Method = "POST";Di2015NewLine            webRequest.ContentType = "application/x-www-form-urlencoded";Di2015NewLine            webRequest.ServicePoint.Expect100Continue = false;Di2015NewLineDi2015NewLine            StreamWriter streamWriter = new StreamWriter(webRequest.GetRequestStream());Di2015NewLine            streamWriter.Write(uploadRequestString);Di2015NewLine            streamWriter.Close();Di2015NewLineDi2015NewLine            WebResponse response = webRequest.GetResponse();Di2015NewLine            Stream responseStream = response.GetResponseStream();Di2015NewLine            StreamReader responseReader = new StreamReader(responseStream);Di2015NewLineDi2015NewLine            string responseString = responseReader.ReadToEnd();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11792282Di2015UniqueSeparator{Di2015NewLine    "upload": {Di2015NewLine        "image": {Di2015NewLine            "name": false,Di2015NewLine            "title": "",Di2015NewLine            "caption": "",Di2015NewLine            "hash": "cSNjk",Di2015NewLine            "deletehash": "ZnKGru1reZKoabU",Di2015NewLine            "datetime": "2010-08-16 22:43:22",Di2015NewLine            "type": "image\\/jpeg",Di2015NewLine            "animated": "false",Di2015NewLine            "width": 720,Di2015NewLine            "height": 540,Di2015NewLine            "size": 46174,Di2015NewLine            "views": 0,Di2015NewLine            "bandwidth": 0Di2015NewLine        },Di2015NewLine        "links": {Di2015NewLine            "original": "http:\\/\\/imgur.com\\/cSNjk.jpg",Di2015NewLine            "imgur_page": "http:\\/\\/imgur.com\\/cSNjk",Di2015NewLine            "delete_page": "http:\\/\\/imgur.com\\/delete\\/ZnKGru1reZKoabU",Di2015NewLine            "small_square": "http:\\/\\/imgur.com\\/cSNjks.jpg",Di2015NewLine            "large_thumbnail": "http:\\/\\/imgur.com\\/cSNjkl.jpg"Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11792327Di2015UniqueSeparator<% using (Html.BeginForm("Index", "Hitdossier", FormMethod.Post, new { id = "frmArtiest" })) %>Di2015NewLine<% { %>Di2015NewLine    <label for="ArtiestenLijst">Selecteer artiest:</label>Di2015NewLine    <%= Html.DropDownList("ID_Artiest",Di2015NewLine            new SelectList(ViewBag.ArtiestenLijst, "Value", "Text"),Di2015NewLine            "-- Selecteer artiest --",Di2015NewLine            newDi2015NewLine            {Di2015NewLine                @onchange = "document.getElementById('frmArtiest').submit();"Di2015NewLine            })%>Di2015NewLine    <br />Di2015NewLine    <br />Di2015NewLine    <div id="divPartialView">Di2015NewLine        <%= Html.Action("Detail_Hitdossier", new { AID_Artiest = ViewBag.ID_Artiest })%> <br />Di2015NewLine    </div>Di2015NewLine<%} %> Di2015NewLine
11792327Di2015UniqueSeparatorpublic ActionResult Index(int? AID_Artiest=810000)Di2015NewLine{Di2015NewLine    ReadSelectie(AID_Artiest.Value);Di2015NewLineDi2015NewLine    ViewBag.ID_Artiest = _ArtiestInfoModel.ID_Artiest;Di2015NewLine    ViewBag.ArtiestenLijst = _ArtiestInfoModel.ArtiestenLijst;Di2015NewLineDi2015NewLine    return View();Di2015NewLine}Di2015NewLineDi2015NewLine[HttpPost]Di2015NewLinepublic ActionResult Index(FormCollection ACollection)Di2015NewLine{Di2015NewLine    int iID_Artiest;Di2015NewLine    int.TryParse(ACollection["ID_Artiest"], out iID_Artiest);Di2015NewLine    return Index(iID_Artiest);Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult Detail_Hitdossier(int? AID_Artiest)Di2015NewLine{Di2015NewLine    int iID_Artiest = AID_Artiest ?? 810000;Di2015NewLineDi2015NewLine    return View(GetArtiestData(iID_Artiest));Di2015NewLine}Di2015NewLine
11792399Di2015UniqueSeparatorVertexNormalTexture
11792399Di2015UniqueSeparatorIVertexType
11792399Di2015UniqueSeparatorType
11792408Di2015UniqueSeparatorGridview.Datasource= yourdatasource;Di2015NewLineviewstate["mydatasource"]=yourdatasource;Di2015NewLine
11792408Di2015UniqueSeparatorDatatable dt=viewstate["mydatasource"]as DataTable;Di2015NewLine
11792578Di2015UniqueSeparator var source = "sometext\\n\\t\\t\\t\\t00:00\\n\\t\\t\\t\\t05:32\\n\\t\\t\\t\\t...."Di2015NewLine var result = source.Split(new []{"\\n\\t\\t\\t\\t"}, StringSplitOptions.None);Di2015NewLine
11792637Di2015UniqueSeparatorXPCollection<T>
11792637Di2015UniqueSeparatorXPCollection<MyType> cColl1 = cMemberInfo.GetValue(this) as XPBaseCollection<MyType>;Di2015NewLineXPCollection<MyOtherType> cColl2 = cMemberInfo.GetValue(cObject) as XPBaseCollection<MyOtherType>;Di2015NewLine
11792637Di2015UniqueSeparatorXPBaseCollection
11792637Di2015UniqueSeparatorXPBaseCollection cColl1 = cMemberInfo.GetValue(this) as XPBaseCollection;Di2015NewLineXPBaseCollection cColl2 = cMemberInfo.GetValue(cObject) as XPBaseCollection;Di2015NewLine
11792746Di2015UniqueSeparatorlb
11792746Di2015UniqueSeparatorLabel
11792746Di2015UniqueSeparatorRepeater1
11792746Di2015UniqueSeparatorOnItemDataBound
11792746Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        List<string> str = new List<string>{"I", "You", "They"};Di2015NewLine        Repeater1.DataSource = str;Di2015NewLine        Repeater1.DataBind();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Repeater1_OnItemDataBound(object sender, RepeaterItemEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)Di2015NewLine        {Di2015NewLine            LinkButton lb = (LinkButton)e.Item.FindControl("lb");Di2015NewLine            string str = (string) e.Item.DataItem;Di2015NewLine            lb.Text = str;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11792746Di2015UniqueSeparator<asp:Repeater ID="Repeater1" runat="server" OnItemDataBound="Repeater1_ItemDataBound">Di2015NewLine     <%-- here you can also add some <HeaderTemplate> if you need a headers --%>Di2015NewLine     <ItemTemplate>Di2015NewLine         <%-- here you can put your controls --%>Di2015NewLine         <asp:LinkButton ID="lb" runat="server"/>Di2015NewLine     </ItemTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
11792787Di2015UniqueSeparatorfor
11792787Di2015UniqueSeparatorCsvReader csv = new CsvReader(new StreamReader(fileName), true);Di2015NewLineDi2015NewLinewhile (csv.ReadNextRecord())Di2015NewLine{Di2015NewLine    for (int i = 0; i < 5; i++)Di2015NewLine    {Di2015NewLine        string value = csv[i];Di2015NewLine        // do stuff with valueDi2015NewLine    }Di2015NewLine}Di2015NewLine
11792910Di2015UniqueSeparatorFunc<int, int, Func<int,bool>> func = (x, y) => z=> x + y > z;Di2015NewLinevar list = new List<int> { 1, 2, 3, 4, 5, 6 };Di2015NewLineDi2015NewLineConsole.WriteLine("How many greater than 2+1? {0}", Di2015NewLine                  list.Where(func(1, 2)).Count());Di2015NewLineConsole.WriteLine("How many greater than 3+1? {0}", Di2015NewLine                  list.Where(func(3, 1)).Count());Di2015NewLineConsole.WriteLine("How many greater than 2+3? {0}", Di2015NewLine                  list.Where(func(2, 3)).Count());Di2015NewLineConsole.ReadKey();Di2015NewLine
11792910Di2015UniqueSeparatorFunc<DateTime, DateTime, Expression<Func<RoutePerformanceLog, bool>>> logWithinDateBounds =         Di2015NewLine    (dateFrom, dateTo) => Di2015NewLine       log => log.Date >= dateFrom && log.Date <= dateTo;Di2015NewLine
11792920Di2015UniqueSeparatorRegex reg = new Regex("[^\\"]+\\"([^<]+)<[^\\"]+\\" killed \\"([^<]+)[^\\"]+\\" with \\"([A-Za-z0-9]+)\\"")Di2015NewLine
11792920Di2015UniqueSeparator([A-Za-z0-9]+)Di2015NewLine
11792920Di2015UniqueSeparator([^<]+)Di2015NewLine
11792958Di2015UniqueSeparator        if(  fnProcCmd != null  )Di2015NewLine        {Di2015NewLine            Utils.Log( fnProcCmd.Method.ToString( ) );Di2015NewLine                // prints:Boolean ProcCmd(Byte[])Di2015NewLine            fnProcCmd( bData );     // throws:Di2015NewLine                // Void TcpComm():  System.NullReferenceExceptionDi2015NewLine                // Object reference not set to an instance of an object.Di2015NewLine        }Di2015NewLine
11792958Di2015UniqueSeparatorfnProcCmd
11792958Di2015UniqueSeparatorProcCmd()
11792958Di2015UniqueSeparator public bool     ProcCmd( byte[] bData )Di2015NewLine {Di2015NewLine    //    ...Di2015NewLine    //Di2015NewLine    //    ...Di2015NewLine    return  true;Di2015NewLine }Di2015NewLine
11793061Di2015UniqueSeparatoryourHashSet.First();Di2015NewLine
11793091Di2015UniqueSeparatorpublic void Page_Load() {Di2015NewLine    string xmlfile = Session["language_file"].ToString(); Di2015NewLine    LinkButton lnkBenutzer = (LinkButton)myListView.FindControl("lnkBenutzer");Di2015NewLine    lnkBenutzer.Text = GetXMLElement(xmlfile, "User"); Di2015NewLine}Di2015NewLine
11793091Di2015UniqueSeparator((LinkButton)myListView.FindControl("lnkBenutzer")).Text = GetXMLElement(xmlfile, "User");Di2015NewLine
11793091Di2015UniqueSeparatorpublic void SetText(string controlName, string text)Di2015NewLine{Di2015NewLine    ((LinkButton)myListView.FindControl(controlName)).Text = text;Di2015NewLine}Di2015NewLine
11793091Di2015UniqueSeparatorSetText("lnkBenutzer", GetXMLElement(xmlfile, "User"));Di2015NewLine
11793122Di2015UniqueSeparatorList<twoWords> twoWords = stringlist.Select(words => {Di2015NewLine                                                var ret = new twoWords();Di2015NewLine                                                ret.setvalues(words);Di2015NewLine                                                return ret;Di2015NewLine                                            }Di2015NewLine                                    .ToList();Di2015NewLine
11793122Di2015UniqueSeparatortwoWords
11793122Di2015UniqueSeparatorprivate static twoWords CreateTwoWords(string words)Di2015NewLine{Di2015NewLine    var ret = new twoWords();Di2015NewLine    ret.setvalues(words);Di2015NewLine    return ret;Di2015NewLine}Di2015NewLineDi2015NewLineList<twoWords> twoWords = stringlist.Select(CreateTwoWords)Di2015NewLine                                    .ToList();Di2015NewLine
11793122Di2015UniqueSeparatorList<twoWords> twoWords = (from words in stringlist Di2015NewLine                           select CreateTwoWords(words)).ToList();Di2015NewLine
11793122Di2015UniqueSeparatortwoWords
11793158Di2015UniqueSeparatorList<Record>
11793158Di2015UniqueSeparatorDataReader
11793175Di2015UniqueSeparator    object misValue = System.Reflection.Missing.Value;Di2015NewLine    Microsoft.Office.Interop.Word.Application wordApp = new Microsoft.Office.Interop.Word.Application();Di2015NewLine    object docPth = @"c:\\tmp\\aDoc.doc";Di2015NewLine    Microsoft.Office.Interop.Word.Document aDoc = wordApp.Documents.Open(ref docPth, ref misValue, ref misValue,Di2015NewLine        ref misValue, ref misValue, ref misValue, ref misValue, ref misValue, ref misValue, ref misValue,Di2015NewLine        ref misValue, ref misValue, ref misValue, ref misValue, ref misValue, ref misValue);Di2015NewLine    wordApp.Visible = true;Di2015NewLine    foreach (Microsoft.Office.Interop.Word.Paragraph aPar in aDoc.Paragraphs)Di2015NewLine    {Di2015NewLine        Microsoft.Office.Interop.Word.Range parRng = aPar.Range;Di2015NewLine        string sText = parRng.Text;Di2015NewLine        string sList = parRng.ListFormat.ListString;Di2015NewLine        int nLevel = parRng.ListFormat.ListLevelNumber;Di2015NewLine        MessageBox.Show("Text = " + sText + " - List = " + sList + " - Level " + nLevel.ToString());Di2015NewLine    }Di2015NewLine
11793179Di2015UniqueSeparatorGC.SuppressFinalize()
11793179Di2015UniqueSeparatorIDisposable.Dispose()
11793192Di2015UniqueSeparatornew DateTime()
11793192Di2015UniqueSeparatorDateTime
11793192Di2015UniqueSeparatorDateTime
11793192Di2015UniqueSeparatorDateTime dt = new DateTime();Di2015NewLine
11793192Di2015UniqueSeparatorDateTime dt = DateTime.Parse({some microprocessor API call for the RTC value});Di2015NewLine
11793192Di2015UniqueSeparatorSystem.Windows.Forms.Timer rtc = null; Di2015NewLineDateTime dt;  // NOTE I DON'T INITIALIZE THIS TO ANYTHING AT FIRSTDi2015NewLineDi2015NewLineprivate void StartRTC() Di2015NewLine{ Di2015NewLine    rtc = new System.Windows.Forms.Timer(); Di2015NewLine    rtc.Interval = 1000; Di2015NewLine    rtc.Tick += new EventHandler(rtc_Tick); Di2015NewLine} Di2015NewLineDi2015NewLinevoid rtc_Tick(object sender, EventArgs e) Di2015NewLine{ Di2015NewLine    // NOTE I GOT RID OF i - THAT WASN'T GOING TO WORK LIKE THAT Di2015NewLine    // YOU JUST WANT TO ADD ONE SECOND BECAUSE THE TIMER TICKS EVERY SECOND:Di2015NewLine    textBox17.Text = dt.AddSeconds(1).ToString("HH:mm:ss");Di2015NewLineDi2015NewLine    dt = DateTime.Parse(textBox17.Text);Di2015NewLine}Di2015NewLineDi2015NewLine // I HAVE NO IDEA WHAT YOUR METHOD HANDLER IS CALLED, THIS IS Di2015NewLine // JUST FOR THE EXAMPLEDi2015NewLinevoid buttonSetRtc_Click(object sender, EventArgs e)  Di2015NewLine{Di2015NewLine    // HERE IS YOUR CALL TO THE MICROCONTROLLER FOR THE INITIAL TIME:Di2015NewLine    textBox17.Text = {some call to the microcontroller};  Di2015NewLine    dt = DateTime.Parse(textBox17.Text);  // NOW THIS LINE WON'T FAILDi2015NewLine    rtc.Enabled = true;  // NOTE I MOVED THIS LINE TO KEEP IT FROM FAILINGDi2015NewLine}Di2015NewLine
11793201Di2015UniqueSeparator.MergeArea.Width
11793201Di2015UniqueSeparator.MergeArea.Height
11793201Di2015UniqueSeparatorWidth = float.Parse(cell.MergeArea.Width.ToString());Di2015NewLineHeight = float.Parse(cell.MergeArea.Height.ToString());Di2015NewLine
11793257Di2015UniqueSeparatorDateTime[]
11793257Di2015UniqueSeparatorIEnumerable<DateTime>
11793257Di2015UniqueSeparatorprivate IEnumerable<DateTime> GetDatesOfSundays(DateTime DatMonth)Di2015NewLine
11793257Di2015UniqueSeparatorprivate DateTime[] GetDatesOfSundays(DateTime DatMonth)Di2015NewLine
11793257Di2015UniqueSeparatorIEnumerable
11793257Di2015UniqueSeparatorprivate DateTime[] GetDatesOfSundays(DateTime DatMonth)Di2015NewLine{Di2015NewLine    List<DateTime> lst = new List<DateTime>();Di2015NewLineDi2015NewLine    DatMonth = DatMonth.AddDays(-DatMonth.Day + 1);Di2015NewLine    DateTime DatMonth2 = DatMonth.AddMonths(1).AddDays(System.Convert.ToDouble(-1));Di2015NewLineDi2015NewLine    while (DatMonth < DatMonth2)Di2015NewLine    {Di2015NewLine        if (DatMonth.DayOfWeek == System.DayOfWeek.Sunday)Di2015NewLine        {Di2015NewLine            lst.Add(DatMonth);Di2015NewLine            DatMonth = DatMonth.AddDays(7);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        DatMonth = DatMonth.AddDays(1);Di2015NewLine    }Di2015NewLineDi2015NewLine    return lst.ToArray();Di2015NewLine}Di2015NewLine
11793257Di2015UniqueSeparatorDateTime[] allSundaysInMonth = GetDatesOfSundays(System.DateTime.Now);Di2015NewLine
11793267Di2015UniqueSeparatorvar types = ContainerDi2015NewLine  .RegistrationsDi2015NewLine  .Where(x => typeof (IBaseModel).IsAssignableFrom(x.RegisteredType))Di2015NewLine  .Select(x => x.RegisteredType)Di2015NewLine  .ToList();Di2015NewLineDi2015NewLinevar result = typesDi2015NewLine  .Select(x => (IBaseModel) Container.Resolve(x.UnderlyingSystemType))Di2015NewLine  .ToList();Di2015NewLine
11793386Di2015UniqueSeparatorpublic static TDest Map<TDest>(this object o)Di2015NewLine{Di2015NewLine    // todo check o is not nullDi2015NewLine    return (TDest) Mapper.Map(o, o.GetType(), typeof (TDest));Di2015NewLine}Di2015NewLine
11793386Di2015UniqueSeparatorpublic static TDest Map<TDest>(this object o)Di2015NewLine{Di2015NewLine    return Mapper.Map<TDest>(o);Di2015NewLine}Di2015NewLine
11793396Di2015UniqueSeparatorXmlDocument xmldoc = new XmlDocument();Di2015NewLinexmlDoc.LoadXml(xml);Di2015NewLinestring bvalue = xmlDoc.SelectSingleNode("//dict[key='" + key + "']/dict/string).InnerText;Di2015NewLine
11793396Di2015UniqueSeparator<dict>     Di2015NewLine    <KeyValuePair>Di2015NewLine        <key type="date">A</key>        Di2015NewLine        <value>AVALUE2</value>Di2015NewLine    </KeyValuePair>Di2015NewLine    <KeyValuePair>Di2015NewLine        <key type="string">B</key>        Di2015NewLine        <value>BVALUE2</value>            Di2015NewLine    </KeyValuePair>        Di2015NewLine</dict>  Di2015NewLine
11793396Di2015UniqueSeparatorstring value = xmlDoc.SelectSingleNode("//KeyValuePair[key = 'B']/value").InnerText;Di2015NewLine
11793537Di2015UniqueSeparatorMyInterface shoe = new MyInterface ();Di2015NewLine
11793537Di2015UniqueSeparatorSomeClass: MyInterfaceDi2015NewLine{Di2015NewLine  //implement the methods of MyInterface. All of them, to fulfill the contract.Di2015NewLine}Di2015NewLine
11793537Di2015UniqueSeparatorMyInterface shoe = new SomeClass();Di2015NewLine
11793537Di2015UniqueSeparatorvoid someMethod (MyInterface test)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
11793583Di2015UniqueSeparatorFckEditor editor = new FckEditor(); //You need to create a new instance of the editorDi2015NewLinevar abcd = editor.Value; Di2015NewLine
11793583Di2015UniqueSeparatorvar abcd = server.Htmlencode( editor.Value;)Di2015NewLine
11793619Di2015UniqueSeparatorProjectA.PageNamespace page = new ProjectA.PageNamespace()Di2015NewLine
11793683Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.ColumnDefinitions>Di2015NewLine        <ColumnDefinition />Di2015NewLine        ...Di2015NewLine    </Grid.ColumnDefinitions>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition />Di2015NewLine        ...Di2015NewLine    </Grid.RowDefinitions>Di2015NewLine    <TextBlock Grid.Column="0" Grid.Row="0" Text="{Binding Path=Cells[0][0]}"/>Di2015NewLine    <TextBlock Grid.Column="1" Grid.Row="0" Text="{Binding Path=Cells[1][0]}"/>Di2015NewLine    <TextBlock Grid.Column="2" Grid.Row="0" Text="{Binding Path=Cells[2][0]}"/>Di2015NewLine    ...Di2015NewLine</Grid>Di2015NewLine
11793683Di2015UniqueSeparatorclass SudokuDi2015NewLine{Di2015NewLine    public int[,] Cells = new int[9,9];Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate Sudoku _sudoku;Di2015NewLineDi2015NewLineMainWindow_Loaded(...)Di2015NewLine{Di2015NewLine    _sudoku = new Sudoku();Di2015NewLine    grid.DataContext= _sudoku;Di2015NewLineDi2015NewLine}Di2015NewLine
11793683Di2015UniqueSeparator_sudoku.Cells[2,3]
11793820Di2015UniqueSeparatorImage.GetInstance()
11793820Di2015UniqueSeparatorstring url = "http://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Pollinationn.jpg/320px-Pollinationn.jpg";Di2015NewLineusing (Document document = new Document()) {Di2015NewLine  PdfWriter.GetInstance(document, Response.OutputStream);Di2015NewLine  document.Open();Di2015NewLine  Image img = Image.GetInstance(url);Di2015NewLine  document.Add(img);Di2015NewLine}Di2015NewLine
11793830Di2015UniqueSeparatorcontext.ExecuteFunction<TestSPROCResult>("TestSPROC").ToList();Di2015NewLine
11793967Di2015UniqueSeparatorContentControls
11793967Di2015UniqueSeparatorContentPresenter
11793967Di2015UniqueSeparatorMyClass
11794076Di2015UniqueSeparatorFind
11794076Di2015UniqueSeparatorAvailablePlugin
11794076Di2015UniqueSeparator.Instance
11794076Di2015UniqueSeparatorIGenericPluginMasterInterface
11794076Di2015UniqueSeparator.Instance.ReturnLeaNumber()
11794076Di2015UniqueSeparator.Instance
11794076Di2015UniqueSeparatordynamic
11794076Di2015UniqueSeparatordynamic
11794076Di2015UniqueSeparatordynamic
11794076Di2015UniqueSeparatorIDynamicMetaObjectProvider
11794076Di2015UniqueSeparatorplug
11794076Di2015UniqueSeparatordynamic
11794076Di2015UniqueSeparatordynamic plug = ...
11794126Di2015UniqueSeparator<xsl:template match="Users">Di2015NewLine  <xsl:for-each-group select="User" group-by="(position() - 1) idiv 5000">Di2015NewLine    <xsl:result-document href="file{current-grouping-key()}.xml">Di2015NewLine      <Users>Di2015NewLine        <xsl:copy-of select="current-group()"/>Di2015NewLine      </Users>Di2015NewLine    </xsl:result-document>Di2015NewLine  </xsl:for-each-group>Di2015NewLine</xsl:template>Di2015NewLine
11794234Di2015UniqueSeparatorint num = 45;Di2015NewLineint bcdNum = 16*(num/10)+(num%10);Di2015NewLine
11794249Di2015UniqueSeparatorvar contacts = db.ContactsDi2015NewLine    .Where(cont.Accounts_CustomerID == accountId)Di2015NewLine    .Select(cont => new ContactLightDi2015NewLine                    {Di2015NewLine                        AccountId = cont.Accounts_CustomerID,Di2015NewLine                        FirstName = cont.Firstname,Di2015NewLine                        LastName = cont.Lastname,Di2015NewLine                        EmailAddress = cont.EmailAddressDi2015NewLine                    })Di2015NewLine    .AsEnumerable() //this forces request to client sideDi2015NewLine    .Where(e => ValidEmail(e.EmailAddress));Di2015NewLine
11794507Di2015UniqueSeparatorstring regex = @"^[\\w\\-. ]+$";Di2015NewLine
11794507Di2015UniqueSeparator\\w
11794507Di2015UniqueSeparator[0-9a-zA-Z_]
11794605Di2015UniqueSeparatorws.Cells["B2"].Value = entry1.Text;Di2015NewLinews.Cells["C2"].Value = entry2.Text;Di2015NewLinews.Cells["D2"].Value = entry3.Text;Di2015NewLinews.Cells["E2"].Value = entry4.Text; Di2015NewLinews.Cells["F2"].Value = entry5.Text; Di2015NewLinews.Cells["G2"].Value = entry6.Text;Di2015NewLine
11794605Di2015UniqueSeparator    throw new System.NotImplementedException ();Di2015NewLine
11794621Di2015UniqueSeparatorColumn
11794621Di2015UniqueSeparatorINotifyPropertyChanged
11794621Di2015UniqueSeparatorAnonymize
11794645Di2015UniqueSeparatorvar val = 96.154M;Di2015NewLineDi2015NewLinevar result = Math.Ceiling(val * 100) / 100.0M;Di2015NewLine
11794647Di2015UniqueSeparator[XmlType("link")]Di2015NewLinepublic class LinkFinalVersionDi2015NewLine{Di2015NewLine    [XmlAttribute("href")]Di2015NewLine    public string Url { get; set; }Di2015NewLineDi2015NewLine    [XmlAttribute("rel")]Di2015NewLine    public string Relationship { get; set; }Di2015NewLine}Di2015NewLine
11794647Di2015UniqueSeparatorprivate XmlRootAttribute XmlRootForCollection(Type type)Di2015NewLine{Di2015NewLine    XmlRootAttribute result = null;Di2015NewLineDi2015NewLine    Type typeInner = null;Di2015NewLine    if(type.IsGenericType)Di2015NewLine    {Di2015NewLine        var typeGeneric = type.GetGenericArguments()[0];Di2015NewLine        var typeCollection = typeof (ICollection<>).MakeGenericType(typeGeneric);Di2015NewLine        if(typeCollection.IsAssignableFrom(type))Di2015NewLine            typeInner = typeGeneric;Di2015NewLine    }Di2015NewLine    else if(typeof (ICollection).IsAssignableFrom(type)Di2015NewLine        && type.HasElementType)Di2015NewLine    {Di2015NewLine        typeInner = type.GetElementType();Di2015NewLine    }Di2015NewLineDi2015NewLine    // yeepeeh ! if we are working with a collectionDi2015NewLine    if(typeInner != null)Di2015NewLine    {Di2015NewLine        var attributes = typeInner.GetCustomAttributes(typeof (XmlTypeAttribute), true);Di2015NewLine        if((attributes != null)Di2015NewLine            && (attributes.Length > 0))Di2015NewLine        {Di2015NewLine            var typeName = (attributes[0] as XmlTypeAttribute).TypeName + 's';Di2015NewLine            result = new XmlRootAttribute(typeName);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
11794647Di2015UniqueSeparator// hack : get the XmlRootAttribute if the item is a collectionDi2015NewLinevar root = XmlRootForCollection(type);Di2015NewLine// create the serializerDi2015NewLinevar serializer = new XmlSerializer(type, root);Di2015NewLine
11794647Di2015UniqueSeparator[XmlType("link")]Di2015NewLine[XmlTypeInCollection("links")]Di2015NewLinepublic class LinkFinalVersionDi2015NewLine{Di2015NewLine}Di2015NewLine
11794777Di2015UniqueSeparatorList<string>
11794851Di2015UniqueSeparatortry
11794851Di2015UniqueSeparatorcatch
11794851Di2015UniqueSeparatorIsNetworkAvailable
11794851Di2015UniqueSeparatortrue
11794888Di2015UniqueSeparatorwer@123Di2015NewLineDi2015NewLinewer@123Di2015NewLineerty@098Di2015NewLineDi2015NewLinewer@123Di2015NewLineerty@098Di2015NewLinesdf@645Di2015NewLineDi2015NewLinewer@123Di2015NewLineerty@098Di2015NewLinesdf@645Di2015NewLineytu@432Di2015NewLine
11794888Di2015UniqueSeparatorallcont ac = new allcont();Di2015NewLineac.name = m.Groups[1].Value;Di2015NewLineac.number = m.Groups[2].Value;Di2015NewLinecon.Add(ac);Di2015NewLineforeach (allcont aa in con)Di2015NewLine{Di2015NewLine     ListViewItem i = new ListViewItem(new string[] { aa.name, aa.number });Di2015NewLine     i.Tag = aa;Di2015NewLine     listView1.Items.Add(i);Di2015NewLine }Di2015NewLine
11794888Di2015UniqueSeparatorcon
11794888Di2015UniqueSeparatorforeach (allcont aa in con)Di2015NewLine    {Di2015NewLine         ListViewItem i = new ListViewItem(new string[] { aa.name, aa.number });Di2015NewLine         i.Tag = aa;Di2015NewLine         listView1.Items.Add(i);Di2015NewLine     }Di2015NewLine
11794888Di2015UniqueSeparatorsr.Close
11794900Di2015UniqueSeparatorbool
11794900Di2015UniqueSeparatorSingle
11794900Di2015UniqueSeparatorreturn (from p in ExportIntoStructureDi2015NewLine        // I assume you meant == rather than =Di2015NewLine        where p.issueid == issuekeyDi2015NewLine        select p.export).Single();Di2015NewLine
11794900Di2015UniqueSeparatorSingle
11794900Di2015UniqueSeparatorSingleOrDefault
11794900Di2015UniqueSeparatorFirst
11794900Di2015UniqueSeparatorFirstOrDefault
11794900Di2015UniqueSeparatorLast
11794900Di2015UniqueSeparatorLastOrDefault
11794900Di2015UniqueSeparatorreturn ExportIntoStructure.Where(p => p.issueid == issuekey)Di2015NewLine                          .Select(p => p.export)Di2015NewLine                          .Single();Di2015NewLine
11794900Di2015UniqueSeparatorreturn ExportIntoStructure.Single(p => p.issueid == issuekey)Di2015NewLine                          .export;Di2015NewLine
11794939Di2015UniqueSeparator<asp:ValidationSummary Di2015NewLine     id="programmaticID" Di2015NewLine     DisplayMode="BulletList | List | SingleParagraph" Di2015NewLine     EnableClientScript="true | false"Di2015NewLine     ShowSummary="true | false"Di2015NewLine     ShowMessageBox="true | false"                        Di2015NewLine     HeaderText="You need to resolve the following issues before you are able to continue:"Di2015NewLine     runat="server"/>Di2015NewLine
11795087Di2015UniqueSeparatorvar productQuery = Di2015NewLine    from prod in productsDi2015NewLine    select new { prod.Color, prod.Price };Di2015NewLine
11795087Di2015UniqueSeparator{ prod.Color, prod.Price }
11795087Di2015UniqueSeparatorColor
11795087Di2015UniqueSeparatorPrice
11795087Di2015UniqueSeparatorforeach (var v in productQuery)Di2015NewLine{Di2015NewLine    Console.WriteLine("Color={0}, Price={1}", v.Color, v.Price);Di2015NewLine}Di2015NewLine
11795087Di2015UniqueSeparatorpublic class ColoredPricedItemDi2015NewLine{Di2015NewLine    public Color {get;}Di2015NewLine    public Price {get;}Di2015NewLine}Di2015NewLine
11795087Di2015UniqueSeparatorColor
11795087Di2015UniqueSeparatorPrice
11795286Di2015UniqueSeparatorpublic interface ISomeInterface {Di2015NewLine    void SomeMethod();Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract SomeAbstractClass {Di2015NewLine    public abstract void SomeMethod();Di2015NewLineDi2015NewLine    public void AwesomeMethod() {Di2015NewLine        // I do awesome things; look at my method body!Di2015NewLine    }Di2015NewLine}Di2015NewLine
11795444Di2015UniqueSeparatorEnumerable.Contains
11795444Di2015UniqueSeparatorvar temp = (from e in table where myKeywords.Contains(e.Keyword)).ToArray();Di2015NewLine
11795492Di2015UniqueSeparatorif (root.ID.Equals(id))Di2015NewLine
11795492Di2015UniqueSeparatorif (string.Equals(root.ID, id))Di2015NewLine
11795511Di2015UniqueSeparatorLineObj
11795511Di2015UniqueSeparatorLineItem
11795511Di2015UniqueSeparatorGraphPane.CurveList
11795511Di2015UniqueSeparatorLineItem line = new LineItem(String.Empty, new[] { xPos, xPos },Di2015NewLine                new[] { myPane.YAxis.Scale.Min, myPane.YAxis.Scale.Max }, Di2015NewLine                Color.Black, SymbolType.None);Di2015NewLineline.Line.Style = System.Drawing.Drawing2D.DashStyle.Dash;Di2015NewLineline.Line.Width = 1f;Di2015NewLineDi2015NewLinemyPane.CurveList.Add(line);Di2015NewLine
11795511Di2015UniqueSeparatorline
11795511Di2015UniqueSeparatorline
11795511Di2015UniqueSeparatory
11795511Di2015UniqueSeparatorline
11795511Di2015UniqueSeparatorline
11795511Di2015UniqueSeparatorLineItem
11795537Di2015UniqueSeparatorenableSsl="true"
11795537Di2015UniqueSeparator <mailSettings>Di2015NewLine  <smtp deliveryMethod="Network" from="amrit.enest@gmail.com">Di2015NewLine    <network enableSsl="true" host="smtp.gmail.com" port="25" userName="amrit.enest@gmail.com" password="sending emails's password" />Di2015NewLine  </smtp>Di2015NewLine</mailSettings>Di2015NewLine
11795543Di2015UniqueSeparatormodelBuilder.Entity<Person>()Di2015NewLine  .HasOptional<Address>(p => p.Address)Di2015NewLine  .WithRequired(a => a.Person);Di2015NewLine
11795543Di2015UniqueSeparator_context.Configuration.ProxyCreationEnabled = false;Di2015NewLine
11795595Di2015UniqueSeparatorINotifyPropertyChanged
11795620Di2015UniqueSeparatorDrawPrimitives
11795732Di2015UniqueSeparatorcod OGZkZlVlNmJkDi2015NewLineglobal_login_hash   83a8ead80c5c544c86c51ab9914db0ab891d7223Di2015NewLinesession OWFhMANRVl5dVlVUVFoDCAlTBVFQB1QNDVZQVlFTU11cUAVSVFMDDwpRVVVTVgdZCFZSA1JSYmMyOA==Di2015NewLinesession_login_hash  38d1a6b20f20d7cb7a8cf93d7f3048087d8c9ffbDi2015NewLineurl ODNiOF5HRxICHE1PQUQdA01YEFcYRlI2MzNiDi2015NewLineuser_login  testDi2015NewLineuser_password   testDi2015NewLineversion ADi2015NewLine
11795754Di2015UniqueSeparatorPrivate Sub ButtonAction_Click(sender As Object, e As System.EventArgs) Handles ButtonAction.ClickDi2015NewLineDi2015NewLine    Dim PasswordConnection = New PasswordAuthenticationMethod("test", "test")Di2015NewLine    Dim KeyboardInteractive = New KeyboardInteractiveAuthenticationMethod("test")Di2015NewLine    Dim ConnectionInfo = New ConnectionInfo("192.168.1.1", 22, "test", PasswordConnection, KeyboardInteractive)Di2015NewLineDi2015NewLine    AddHandler KeyboardInteractive.AuthenticationPrompt, _Di2015NewLine    Sub(_sender As Object, _e As Renci.SshNet.Common.AuthenticationPromptEventArgs)Di2015NewLine        For Each prompt In _e.PromptsDi2015NewLine            Debug.Print(prompt.Request)Di2015NewLine            If Not prompt.Request.IndexOf("Password:", StringComparison.InvariantCultureIgnoreCase) = -1 ThenDi2015NewLine                prompt.Response = "test"Di2015NewLine            End IfDi2015NewLine        NextDi2015NewLine    End SubDi2015NewLineDi2015NewLine    sftp = New SftpClient(ConnectionInfo)Di2015NewLine    sftp.Connect()Di2015NewLineDi2015NewLine    sftp.disconnect()Di2015NewLineEnd SubDi2015NewLine
11795816Di2015UniqueSeparatordouble[] yvalues = myList.Select(p => p.Y).ToArray();Di2015NewLine
11795816Di2015UniqueSeparatorSystem.Linq
11795816Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
11795910Di2015UniqueSeparatorResponse.End
11795910Di2015UniqueSeparatorResponse.Close
11795933Di2015UniqueSeparatorUrlParameter.Optional
11795933Di2015UniqueSeparatorRouteParameter.Optional
11795933Di2015UniqueSeparatorGlobalConfiguration.Configuration.Routes.MapHttpRoute(Di2015NewLine    "Api",Di2015NewLine    "api/{controller}/{id}",Di2015NewLine    new { id = RouteParameter.Optional }Di2015NewLine);Di2015NewLine
11795953Di2015UniqueSeparatora = b = c = !(d = e = f = true);Di2015NewLine
11795953Di2015UniqueSeparatortest2 = !(test1 = test3 = true);Di2015NewLine
11795957Di2015UniqueSeparatorvoid Dispose()
11795957Di2015UniqueSeparatorvoid Dispose(bool disposing)
11796092Di2015UniqueSeparatorvar x = new BonusImageHandler("foo");Di2015NewLinevar y = new BonusImageHandler("bar");Di2015NewLine
11796092Di2015UniqueSeparatorstorageProviderType
11796092Di2015UniqueSeparatorx
11796092Di2015UniqueSeparator"foo"
11796092Di2015UniqueSeparatorpublic static void InitProvider(string providerTypeName) {...}Di2015NewLine
11796092Di2015UniqueSeparatorpublic static void InitProvider(Type providerType) {...}Di2015NewLine
11796092Di2015UniqueSeparatorpublic static void InitProvider(IStorageProvider provider) {...}Di2015NewLine
11796092Di2015UniqueSeparatorprivate readonly IStorageProvider provider;Di2015NewLinepublic BonusImageHandler(IStorageProvider provider) {this.provider = provider;}Di2015NewLine
11796164Di2015UniqueSeparatorreal
11796164Di2015UniqueSeparatorComplex
11796164Di2015UniqueSeparatorcomplexSamples = samples.Select(sample => new Complex((double)sample, 0.0)).ToArray();Di2015NewLine
11796164Di2015UniqueSeparatorDFT
11796164Di2015UniqueSeparatorcomplexSamples
11796164Di2015UniqueSeparatorIm
11796240Di2015UniqueSeparatorping
11796240Di2015UniqueSeparator<complexType name="HRSPingRequest">Di2015NewLine    <complexContent>Di2015NewLine        <extension base="tns:HRSRequest">Di2015NewLine            <sequence>Di2015NewLine                <element name="echoData" type="xsd:string"/>Di2015NewLine            </sequence>Di2015NewLine        </extension>Di2015NewLine    </complexContent>Di2015NewLine</complexType>Di2015NewLine
11796240Di2015UniqueSeparator<message name="HRSSoapService_pingRequest">Di2015NewLine    <part name="pingRequest" type="tns:HRSPingRequest"/>Di2015NewLine</message>Di2015NewLine
11796240Di2015UniqueSeparator<binding name="HRSSoapServiceBinding" type="tns:HRSSoapService">Di2015NewLine    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>Di2015NewLine    <operation name="ping">Di2015NewLine        <soap:operation soapAction=""/>Di2015NewLine        <input>Di2015NewLine            <soap:body namespace="com.hrs.soap.hrs" use="literal"/>Di2015NewLine        </input>Di2015NewLine        <output>Di2015NewLine            <soap:body namespace="com.hrs.soap.hrs" use="literal"/>Di2015NewLine        </output>Di2015NewLine        <fault name="HRSException">Di2015NewLine            <soap:fault name="HRSException" use="literal"/>Di2015NewLine        </fault>Di2015NewLine    </operation>Di2015NewLine</binding>Di2015NewLine
11796240Di2015UniqueSeparator<element name="ping" type="tns:HRSPingRequestWrapper" />Di2015NewLine<complexType name="HRSPingRequestWrapper">Di2015NewLine    <sequence>Di2015NewLine        <element name="pingRequest" type="tns:HRSPingRequest" />Di2015NewLine    </sequence>Di2015NewLine</complexType>Di2015NewLine<complexType name="HRSPingRequest">Di2015NewLine    <complexContent>Di2015NewLine        <extension base="tns:HRSRequest">Di2015NewLine            <sequence>Di2015NewLine                <element name="echoData" type="xsd:string"/>Di2015NewLine            </sequence>Di2015NewLine        </extension>Di2015NewLine    </complexContent>Di2015NewLine</complexType>Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine<message name="HRSSoapService_pingRequest">Di2015NewLine    <part name="pingRequest" element="tns:ping"/>Di2015NewLine</message>Di2015NewLine
11796565Di2015UniqueSeparatorRequestFormat
11796565Di2015UniqueSeparatorRequestFormat
11796565Di2015UniqueSeparatorWebGet
11796565Di2015UniqueSeparatorWebGet
11796565Di2015UniqueSeparatorBody
11796565Di2015UniqueSeparatorWebInvoke
11796620Di2015UniqueSeparatorvar filter = new PointedColorFloodFill();Di2015NewLinefilter.FillColor = Color.White;Di2015NewLinefilter.Tolerance = Color.FromArgb(60, 60, 60);Di2015NewLineDi2015NewLinefilter.StartingPoint = new IntPoint(0, 0);Di2015NewLinefilter.ApplyInPlace(image);Di2015NewLinefilter.StartingPoint = new IntPoint(image.Size.Width - 1, 0);Di2015NewLinefilter.ApplyInPlace(image);Di2015NewLinefilter.StartingPoint = new IntPoint(image.Size.Width - 1, image.Size.Height - 1);Di2015NewLinefilter.ApplyInPlace(image);Di2015NewLinefilter.StartingPoint = new IntPoint(0, image.Size.Height - 1);Di2015NewLinefilter.ApplyInPlace(image);Di2015NewLine
11796620Di2015UniqueSeparatorPointedColorFloodFill
11796620Di2015UniqueSeparatorvar grayFilter = new Grayscale(0.3, 0.3, 0.3);Di2015NewLinevar image = grayFilter.Apply(originalImage);Di2015NewLineDi2015NewLinevar bradleyfilter = new BradleyLocalThresholding();Di2015NewLinebradleyfilter.ApplyInPlace(image);Di2015NewLine
11796620Di2015UniqueSeparatorPointedColorFloodFill
11796620Di2015UniqueSeparatorfilter.Tolerance = Color.FromArgb(10, 10, 10);Di2015NewLine
11796667Di2015UniqueSeparator  string query = string.Format("select * from dbo.Function1({0},{1});", int.Parse(e.CurrentRow.Cells["CodeMeli"].Value.ToString()),1);Di2015NewLine
11796667Di2015UniqueSeparator  string query = "select * from dbo.Function1(@pa1,@par2);";Di2015NewLine  cmd.Parametes.Add("@par1", SqlDbType.Int).Value = int.Parse(e.CurrentRow.Cells["CodeMeli"].Value.ToString());  Di2015NewLine  cmd.Parametes.Add("@par2", SqlDbType.Int).Value = 1;Di2015NewLine
11796714Di2015UniqueSeparator    Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.ApplicationClass();Di2015NewLine    xlApp.Visible = true;Di2015NewLine    xlApp.Workbooks.Add(misValue);Di2015NewLine    int nWS = xlApp.ActiveWorkbook.Worksheets.Count;Di2015NewLine    for (int i = nWS; i < l.Count; i++)Di2015NewLine        xlApp.ActiveWorkbook.Worksheets.Add(misValue, misValue, misValue, misValue);Di2015NewLine    int iWS = 1;Di2015NewLine    foreach (float[] ff in l)Di2015NewLine    {Di2015NewLine        Microsoft.Office.Interop.Excel.Worksheet ws = (Microsoft.Office.Interop.Excel.Worksheet)xlApp.ActiveWorkbook.Worksheets[iWS++];Di2015NewLine        int idxRow = 1;Di2015NewLine        foreach (float aFloat in ff)Di2015NewLine            ws.Cells[idxRow++, 1] = aFloat;Di2015NewLine    }Di2015NewLine
11796735Di2015UniqueSeparatorcheckSubjectRequired.Attributes.Add("onclick", "updateValidator(" + Di2015NewLine  txtSubject.ClientID + ")");Di2015NewLine
11796759Di2015UniqueSeparator[DataContract(Name="...", Namespace="http://company.com/schema/series/"]Di2015NewLine
11796764Di2015UniqueSeparatorvar hash = new HashSet<TheType>(List2);Di2015NewLineList1.RemoveAll(hash.Contains);Di2015NewLine
11796764Di2015UniqueSeparatorList<int> List1 = new List<int> {1,2,3};Di2015NewLineList<int> List2 = new List<int> {2,3};Di2015NewLineDi2015NewLinevar hash = new HashSet<int>(List2);Di2015NewLineList1.RemoveAll(hash.Contains);Di2015NewLine// now List1 just has {1}Di2015NewLine
11796820Di2015UniqueSeparatorIsomeclass
11796820Di2015UniqueSeparatorpublic interface Isomeclass<out TUser>Di2015NewLine   where TUser : class, IUserDi2015NewLine{Di2015NewLineDi2015NewLine    string test(TUser user);Di2015NewLine    TUser returnUser();Di2015NewLine}Di2015NewLine
11796820Di2015UniqueSeparatortest
11796820Di2015UniqueSeparatoruser
11796820Di2015UniqueSeparatorIUser
11797021Di2015UniqueSeparatorSettings.Default.PropertyValues["MyPropertyName"].SerializedValue = Settings.Default.Properties["MyPropertyName"].DefaultValue;Di2015NewLineSettings.Default.PropertyValues["MyPropertyName"].Deserialized = false;Di2015NewLine
11797044Di2015UniqueSeparator    public class EventDi2015NewLine    {Di2015NewLine        [XmlAttribute]Di2015NewLine        public string id { get; set; }Di2015NewLineDi2015NewLine        [XmlElement]Di2015NewLine        public DogNumber DogNumber { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class DogNumberDi2015NewLine    {Di2015NewLine        [XmlAttribute]Di2015NewLine        public string id { get; set; }Di2015NewLineDi2015NewLine        [XmlElement]Di2015NewLine        public dogName dogName { get; set; }Di2015NewLineDi2015NewLine        [XmlElement]Di2015NewLine        public string dogBreed { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class dogNameDi2015NewLine    {Di2015NewLine        [XmlAttribute]Di2015NewLine        public string id { get; set; }Di2015NewLineDi2015NewLine        [XmlTextAttribute]Di2015NewLine        public string value { get; set;  }Di2015NewLine    }Di2015NewLine
11797044Di2015UniqueSeparator        Stream input = File.OpenRead("C:\\\\test.xml");Di2015NewLine        XmlSerializer serialier = new XmlSerializer(typeof(Event));Di2015NewLine        Event newevent = serialier.Deserialize(input) as Event;Di2015NewLine        input.Close();Di2015NewLine
11797092Di2015UniqueSeparatorvar dateTime = DateTime.ParseExact(DateCreated, "yyyy-MM-dd HH:mm:ss.fff");Di2015NewLine
11797141Di2015UniqueSeparatorwhere DateStart <= @DatePicker2Di2015NewLine  and DateEnd >= @DatePicker1Di2015NewLine
11797283Di2015UniqueSeparatoronHand = int.Parse(dataGridView1.Rows[counter].Cells["min"].Value.ToString());Di2015NewLine
11797283Di2015UniqueSeparatormin = int.Parse(dataGridView1.Rows[counter].Cells["min"].Value.ToString());Di2015NewLine
11797283Di2015UniqueSeparatormin
11797287Di2015UniqueSeparatorstring[] parts = user.Split(new string[] {"/"},Di2015NewLine                            StringSplitOptions.RemoveEmptyEntries);Di2015NewLinestring user = string.Format("{0}@{1}", parts[1], parts[0]);Di2015NewLine
11797292Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Security.Principal;Di2015NewLineDi2015NewLinenamespace SSRS_Custom_FuctionsDi2015NewLine{Di2015NewLine    public class Class1Di2015NewLine    {Di2015NewLineDi2015NewLine        public static bool IsInGroup(string user, string group)Di2015NewLine        {Di2015NewLineDi2015NewLine        System.Security.Permissions.SecurityPermission sp = new System.Security.Permissions.SecurityPermission(System.Security.Permissions.PermissionState.Unrestricted);Di2015NewLine        sp.Assert();Di2015NewLineDi2015NewLine            using (var identity = new WindowsIdentity(user))Di2015NewLine            {Di2015NewLine                var principal = new WindowsPrincipal(identity);Di2015NewLine                return principal.IsInRole(group);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public static string MyTest()Di2015NewLine        {Di2015NewLine            return "Hello World";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11797377Di2015UniqueSeparatorpublic class YoutubeDi2015NewLine{Di2015NewLine     MainForm m_MainForm = null;Di2015NewLine     public Youtube(MainForm frm)Di2015NewLine     {Di2015NewLine            m_MainForm = frm;Di2015NewLine     }Di2015NewLineDi2015NewLine}  Di2015NewLine
11797418Di2015UniqueSeparatorif (Model.Notes!=null)Di2015NewLine{Di2015NewLineDi2015NewLine  if(Model.Notes.Length == null || Model.Notes.Length < 170)Di2015NewLine  {Di2015NewLine      //do the same awesome thing..Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
11797455Di2015UniqueSeparator [WebMethod]Di2015NewLine            public static Array GetCompletionList(string code)Di2015NewLine    {Di2015NewLine    .....your codeDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine $.ajax({Di2015NewLine                type: "POST",Di2015NewLine                url: "CompletionList.aspx/GetCompletionList",Di2015NewLine                data: '{"code1":"' +code1 + '"}',Di2015NewLine                contentType: "application/json; charset=utf-8",Di2015NewLine                dataType: "json",Di2015NewLine                success: function (c2) {Di2015NewLine                   ....your codeDi2015NewLine                    });Di2015NewLineDi2015NewLine});Di2015NewLine
11797497Di2015UniqueSeparator'post-body-\\d*'
11797497Di2015UniqueSeparatordiv
11797497Di2015UniqueSeparator"<div class='post-body entry-content' id='post-body-\\d*' itemprop='articleBody'>"
11797497Di2015UniqueSeparatorstring htmlText = @"<div kubedfiuabefiudsabiubfg><div class='post-body entry-content' id='post-body-7494158715135407463' itemprop='articleBody'><div kubedfiuabefiudsabiubfg>";Di2015NewLineDi2015NewLineRegex rgx = new Regex(@`"<div class='post-body entry-content' id='post-body-\\d*' itemprop='articleBody'>");Di2015NewLineforeach (Match match in rgx.Matches(htmlText))Di2015NewLine{Di2015NewLine    // Process matchesDi2015NewLine    Console.WriteLine(match.ToString());Di2015NewLine}Di2015NewLine
11797617Di2015UniqueSeparatorstring inClause = "1, 2, 3";Di2015NewLineDi2015NewLinevar sqls = "SELECT * FROM Brands WHERE Name in (" + inClause +")";Di2015NewLine
11797764Di2015UniqueSeparator if ( cell.getFormula().StartsWith(" "))Di2015NewLine                    {Di2015NewLine                        {Di2015NewLine                            for (int i = 0; i < cell.getFormula().Length; i++)Di2015NewLine                            {Di2015NewLine                                if (cell.getFormula()[i] == ' ')Di2015NewLine                                {Di2015NewLineDi2015NewLine                                    emptyBool.Add(" ");Di2015NewLineDi2015NewLine                                }Di2015NewLine                            }Di2015NewLine                            string emptyBoolString = string.Join(" ", emptyBool.ToArray());Di2015NewLine
11797804Di2015UniqueSeparator.ThenBy()
11797804Di2015UniqueSeparator.OrderBy(o => o.OrderDate).ThenBy(o => o.OrderID).Di2015NewLine
11797813Di2015UniqueSeparatorpublic List<string> SplitCSV(string input, List<string> hot)Di2015NewLine    {Di2015NewLineDi2015NewLine        Regex csvSplit = new Regex("(([^,^\\'])*(\\'.*\\')*([^,^\\'])*)(,|$)", RegexOptions.Compiled);Di2015NewLineDi2015NewLine        foreach (Match match in csvSplit.Matches(input))Di2015NewLine        {Di2015NewLine            line.Add(match.Value.TrimStart(','));Di2015NewLine        }Di2015NewLine        return line; Di2015NewLine    }Di2015NewLine
11797842Di2015UniqueSeparatorprivate void GenerateExcel(DataTable dataToExcel, string excelSheetName)Di2015NewLine        {Di2015NewLine            string fileName = "ByteOfCode";Di2015NewLine            string currentDirectorypath = Environment.CurrentDirectory;Di2015NewLine            string finalFileNameWithPath = string.Empty;Di2015NewLineDi2015NewLine            fileName = string.Format("{0}_{1}", fileName, DateTime.Now.ToString("dd-MM-yyyy"));Di2015NewLine            finalFileNameWithPath = string.Format("{0}\\\\{1}.xlsx", currentDirectorypath, fileName);Di2015NewLineDi2015NewLine            //Delete existing file with same file name.Di2015NewLine            if (File.Exists(finalFileNameWithPath))Di2015NewLine                File.Delete(finalFileNameWithPath);Di2015NewLineDi2015NewLine            var newFile = new FileInfo(finalFileNameWithPath);Di2015NewLineDi2015NewLine            //Step 1 : Create object of ExcelPackage class and pass file path to constructor.Di2015NewLine            using (var package = new ExcelPackage(newFile))Di2015NewLine            {Di2015NewLine                //Step 2 : Add a new worksheet to ExcelPackage object and give a suitable nameDi2015NewLine                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add(excelSheetName);Di2015NewLineDi2015NewLine                //Step 3 : Start loading datatable form A1 cell of worksheet.Di2015NewLine                worksheet.Cells["A1"].LoadFromDataTable(dataToExcel, true, TableStyles.None);Di2015NewLineDi2015NewLine                //Step 4 : (Optional) Set the file properties like title, author and subjectDi2015NewLine                package.Workbook.Properties.Title = @"This code is part of tutorials available at http://bytesofcode.hubpages.com";Di2015NewLine                package.Workbook.Properties.Author = "Bytes Of Code";Di2015NewLine                package.Workbook.Properties.Subject = @"Register here for more http://hubpages.com/_bytes/user/new/";Di2015NewLineDi2015NewLine                //Step 5 : Save all changes to ExcelPackage object which will create Excel 2007 file.Di2015NewLine                package.Save();Di2015NewLineDi2015NewLine                MessageBox.Show(string.Format("File name '{0}' generated successfully.", fileName)Di2015NewLine                    , "File generated successfully!", MessageBoxButtons.OK, MessageBoxIcon.Information);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11797855Di2015UniqueSeparatorGC
11797875Di2015UniqueSeparator//Private Function GMT_OFFSET() As IntegerDi2015NewLineint GMT_OFFSET()Di2015NewLine{Di2015NewLine  //'****DECLARE VARIABLESDi2015NewLine  //Dim dtNow As Date, dtEngland As DateDi2015NewLine  DateTime dtNow, dtEngland;Di2015NewLine  //Dim dtGMT As SYSTEMTIMEDi2015NewLine  //'****GET SYSTEM TIME INFORMATIONDi2015NewLine  //Call GetSystemTime(dtGMT)Di2015NewLine  //dtNow = NowDi2015NewLine  //dtEngland = dtGMT.wYear & "-" & dtGMT.wMonth & "-" & dtGMT.wDay & " " & dtGMT.wHour & ":" & dtGMT.wMinute & ":" & dtGMT.wSecondDi2015NewLine  dtEngland = DateTime.UtcNow;Di2015NewLine  dtNow = dtEngland.ToLocalTime;Di2015NewLine  //'****RETURN QUARTER HOURSDi2015NewLine  //GMT_OFFSET = DateDiff("n", dtEngland, dtNow) \\ 15Di2015NewLine  return Convert.ToInt32((dtNow - dtEngland).TotalMinutes) / 15;Di2015NewLine//End FunctionDi2015NewLine}Di2015NewLine
11797875Di2015UniqueSeparatorDateDiff(interval,date1,date2)
11797875Di2015UniqueSeparatordate2 - date1
11797875Di2015UniqueSeparatorreturn Convert.ToInt32(TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow).TotalMinutes) / 15;Di2015NewLine
11798050Di2015UniqueSeparator\\r\\n
11798050Di2015UniqueSeparatorCount
11798050Di2015UniqueSeparatorint cnt = str.Count(c => c == '\\n');Di2015NewLine
11798297Di2015UniqueSeparatorIndexedEnumerator
11798297Di2015UniqueSeparatorpublic override IEnumerable<Tuple<int, int, double>> IndexedEnumerator()Di2015NewLine
11798297Di2015UniqueSeparatorvar mtx = new SparseMatrix(new DiagonalMatrix(3, 3, new[] {1.0, 1, 1}));Di2015NewLineConsole.WriteLine(mtx.NonZerosCount);Di2015NewLineDi2015NewLineforeach (var tuple in mtx.IndexedEnumerator())Di2015NewLine{Di2015NewLine    Console.WriteLine("({0},{1}) = {2}", tuple.Item1, tuple.Item2, tuple.Item3);Di2015NewLine}Di2015NewLine
11798297Di2015UniqueSeparator3Di2015NewLine(0,0) = 1Di2015NewLine(1,1) = 1Di2015NewLine(2,2) = 1Di2015NewLine
11798379Di2015UniqueSeparatorprotected void initMandatoryFieldsMap()Di2015NewLine{Di2015NewLine    super();Di2015NewLine    this.setParmMethodAsMandatory(classNum(AxMobBatchPick),methodStr(AxMobBatchPick,parmPickty));Di2015NewLine}Di2015NewLine
11798518Di2015UniqueSeparatorContainerCmdletProvider
11798518Di2015UniqueSeparatorfunction
11798518Di2015UniqueSeparatorenv
11798518Di2015UniqueSeparatorvariable
11798518Di2015UniqueSeparatorset-location
11798518Di2015UniqueSeparatorget-location
11798518Di2015UniqueSeparatorNavigationCmdletProvider
11798538Di2015UniqueSeparatorvar form = (Form)Form.FromHandle(Window.Handle);Di2015NewLineform.WindowState = FormWindowState.Maximized;Di2015NewLine
11798612Di2015UniqueSeparatororders.OrderBy(o => o.Date).ThenBy(o => o.Price)
11798669Di2015UniqueSeparator[XmlText]Di2015NewLinepublic bool ServiceValue {get;set;}Di2015NewLine
11798680Di2015UniqueSeparatorpublic override void WriteDocType(string name, string pubid, string sysid, string subset)Di2015NewLine{Di2015NewLine    this.wrappedWriter.WriteRaw("-//Apple//DTD PLIST 1.0//EN", "http://www.apple.com/DTDs/PropertyList-1.0.dtd");Di2015NewLine}Di2015NewLine
11798680Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineDi2015NewLinenamespace your.namespace {Di2015NewLine    public class PListWriter : System.Xml.XmlTextWriter  {Di2015NewLineDi2015NewLine        public PListWriter(string filename, System.Text.Encoding encoding) : base(filename, encoding) { }Di2015NewLineDi2015NewLine        public override void WriteDocType(string name = "", string pubid = "", string sysid = "", string subset = "") {Di2015NewLine            this.WriteRaw("<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11798680Di2015UniqueSeparatorPListWriter writer = new PListWriter(pathFichier, null);    Di2015NewLinewriter.Formatting = Formatting.Indented;Di2015NewLinewriter.WriteStartDocument();Di2015NewLinewriter.WriteDocType();Di2015NewLinewriter.WriteStartElement("plist");Di2015NewLinewriter.WriteAttributeString("version", "1.0");Di2015NewLinewriter.WriteFullEndElement(); // plistDi2015NewLinewriter.Close();Di2015NewLine
11798706Di2015UniqueSeparatorprivate void textBox1_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyChar == '\\r')Di2015NewLine    {Di2015NewLine        decimal value;Di2015NewLine        if (decimal.TryParse(Di2015NewLine            textBox1.Text,Di2015NewLine            NumberStyles.Any,Di2015NewLine            CultureInfo.InvariantCulture,Di2015NewLine            out value))Di2015NewLine        {Di2015NewLine            textBox1.Text = value.ToString(Di2015NewLine                "### ### ##0.00",Di2015NewLine                CultureInfo.InvariantCulture).TrimStart().Replace(".", ",");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11798819Di2015UniqueSeparatorpublic void OnNavigatedFrom(NavigationContext navigationContext)Di2015NewLine{Di2015NewLine  ParentView.MyContentControl.Content = null;Di2015NewLine}Di2015NewLine
11798819Di2015UniqueSeparatorpublic void OnNavigatedTo(NavigationContext navigationContext)Di2015NewLine{Di2015NewLine  SharedView view = (SharedView)ServiceLocator.Current.GetInstance(typeof(SharedView));Di2015NewLine  ParentView.MyContentControl.Content = view;Di2015NewLine}Di2015NewLine
11798819Di2015UniqueSeparatorbool isFirstTime = true;Di2015NewLineDi2015NewLinepublic void OnNavigatedTo(NavigationContext navigationContext)Di2015NewLine{Di2015NewLine  if (isFirstTime)Di2015NewLine  {Di2015NewLine    isFirstTime = false;Di2015NewLine    return;Di2015NewLine  }Di2015NewLine  SharedView view = (SharedView)ServiceLocator.Current.GetInstance(typeof(SharedView));Di2015NewLine  ParentView.MyContentControl.Content = view;Di2015NewLine}Di2015NewLine
11798874Di2015UniqueSeparator    SqlBulkCopy sqlBulk = new SqlBulkCopy(con);Di2015NewLine       //Define column mappings Di2015NewLineDi2015NewLine    for (int i = 0; i < dReader.FieldCount; i++)Di2015NewLine    {Di2015NewLine        sqlBulk.ColumnMappings.Add(dReader.GetName(i), dReader.GetName(i));Di2015NewLine     }Di2015NewLine
11799237Di2015UniqueSeparatorEnvironment.StackTrace
11799237Di2015UniqueSeparatorEnvironment.StackTrace
11799423Di2015UniqueSeparator*.g.cs
11799423Di2015UniqueSeparatorvar textblock = new TextBlock();Di2015NewLinetextblock.Inlines.Add(new Run("2") {FontSize = 20});Di2015NewLinetextblock.Inlines.Add(new Run("1/2") {FontSize = 14, BaselineAlignment = BaselineAlignment.TextTop});Di2015NewLine
11799519Di2015UniqueSeparator{ get; set;}
11800117Di2015UniqueSeparator||
11800117Di2015UniqueSeparator||
11800117Di2015UniqueSeparatorforeach (Control ctr in eItem.Controls)Di2015NewLine{Di2015NewLine    if(ctr is Label || ctr is DropDownList)Di2015NewLine    {Di2015NewLine       ctr.Visible = false;Di2015NewLine    }              Di2015NewLine}Di2015NewLine
11800117Di2015UniqueSeparator|
11800117Di2015UniqueSeparator||
11800117Di2015UniqueSeparatorupdatepanel
11800117Di2015UniqueSeparatorforeach (Control ctr in UpdatePanel1.ContentTemplateContainer.Controls)Di2015NewLine {Di2015NewLine  // rest of codeDi2015NewLine   if(ctr is Label || ctr is DropDownList)Di2015NewLine     {Di2015NewLine        ctr.Visible = false;Di2015NewLine     }         Di2015NewLine }  Di2015NewLine
11800217Di2015UniqueSeparator<portType>
11800366Di2015UniqueSeparator//static ZedGraph.ZedGraphControl graph = new ZedGraph.ZedGraphControl();Di2015NewLineZedGraph.GraphPane pane = graph.GraphPane;Di2015NewLinepane.XAxis.Scale.Min = 0.0;Di2015NewLinegraph.AxisChange();Di2015NewLinegraph.RestoreScale(pane);Di2015NewLinegraph.ZoomOut(pane);Di2015NewLine
11800433Di2015UniqueSeparatorXMLSerializer
11800433Di2015UniqueSeparatorXmlReader
11800433Di2015UniqueSeparatorXmlWriter
11800433Di2015UniqueSeparatorXmlReader
11800433Di2015UniqueSeparatorXMLSerializer
11800548Di2015UniqueSeparatorstring mainurl = "http://www.cpso.on.ca/docsearch/details.aspx?view=1&id=+" + numberurl;Di2015NewLine
11800608Di2015UniqueSeparatorout
11800608Di2015UniqueSeparatorref
11800887Di2015UniqueSeparatorSession["OOID"]
11800887Di2015UniqueSeparatorRequest.QueryString["PartNumber"]
11800991Di2015UniqueSeparatorT TryExecute<T>(Func<T> action, int ErrorCode)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        return action();Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        result = Activator.CreateInstance<T>();Di2015NewLine        typeof(T).GetProperty("ErrorMessage").SetValue(result, ex.Message, null);Di2015NewLine        typeof(T).GetProperty("ErrorCode").SetValue(result, ErrorCode, null);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
11800991Di2015UniqueSeparatorpublic interface IErrorDi2015NewLine{Di2015NewLine    public string ErrorMessage { get; set; }Di2015NewLine    public int ErrorCode { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineT TryExecute<T>(Func<T> action, int ErrorCode) where T : IErrorDi2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        return action();Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        result = Activator.CreateInstance<T>();Di2015NewLine        result.ErrorMessage = ex.Message;Di2015NewLine        result.ErrorCode = ErrorCode;Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11800991Di2015UniqueSeparatorreturn TryExecute<Bar>(new Bar().Execute, Bar.ErrorCode);Di2015NewLine
11800991Di2015UniqueSeparatorreturn TryExecute<Baz>(new Baz(stuff).Execute, Baz.ErrorCode);Di2015NewLine
11800997Di2015UniqueSeparatorAllowMultiple = True
11800997Di2015UniqueSeparatorAllowMultiple = false
11800997Di2015UniqueSeparator[AttributeUsageAttribute(AttributeTargets.Assembly, AllowMultiple = false)]Di2015NewLinepublic sealed class PreApplicationStartMethodAttribute : AttributeDi2015NewLine
11801264Di2015UniqueSeparatorreferer
11801264Di2015UniqueSeparatorCHAR
11801264Di2015UniqueSeparatorVARCHAR
11801268Di2015UniqueSeparatorpublic abstract class CmdBodyDi2015NewLine{Di2015NewLine    public static byte[] ToBytes<T>(T cmdBody) where T : CmdBodyDi2015NewLine    {Di2015NewLine         return cmdBody.ToBytes();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected abstract byte[] ToBytes();Di2015NewLineDi2015NewLine    public abstract int GetLength();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CmdBodyA : CmdBodyDi2015NewLine{Di2015NewLine    protected override byte[] ToBytes() Di2015NewLine    { // Implementation }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CmdBodyB : CmdBodyDi2015NewLine{Di2015NewLine    protected override byte[] ToBytes() Di2015NewLine    { // Implementation }Di2015NewLine}Di2015NewLine
11801268Di2015UniqueSeparatorpublic abstract class CmdBodyDi2015NewLine{Di2015NewLine    public abstract byte[] ToBytes();Di2015NewLineDi2015NewLine    public abstract int GetLength();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CmdBodyA : CmdBodyDi2015NewLine{Di2015NewLine    public override byte[] ToBytes() Di2015NewLine    { // Implementation }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CmdBodyB : CmdBodyDi2015NewLine{Di2015NewLine    public override byte[] ToBytes() Di2015NewLine    { // Implementation }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class Cmd<T> where T : CmdBodyDi2015NewLine{ Di2015NewLine    public CmdHeader Header { get; set; }Di2015NewLine    public T Body { get; set; }Di2015NewLineDi2015NewLine    public byte[] ToBytes()Di2015NewLine    {Di2015NewLine        byte[] cmdBytes = new byte[Header.GetLength() + Body.GetLength()];Di2015NewLine        Header.ToBytes().CopyTo(cmdBytes, 0);Di2015NewLine        Body.ToBytes().CopyTo(cmdBytes, Header.GetLength());Di2015NewLineDi2015NewLine        return cmdBytes;Di2015NewLine    } Di2015NewLine}Di2015NewLine
11801442Di2015UniqueSeparatorResponse.Write("will write the content on the form which will return to the client");Di2015NewLine// Response.Cookies will send the cookie to the client browser.Di2015NewLine Response.Cookies.Add(HttpCookie("MyCookie", "MyValue"))Di2015NewLine//and Request.Cookies is used to get the cookie value which is already present in the clinet browswer   Di2015NewLine
11801442Di2015UniqueSeparatorstring a = HttpContext.Current.Request.Cookie["a"].Value;Di2015NewLine// I think this will check the cookie which is present in the client browser [ If client has sent the cookie to the server ]Di2015NewLineDi2015NewLinestring a = HttpContext.Current.Response.Cookie["a"].Value;Di2015NewLine// and this will see the only Response object. If the cookie present in the response object then it will return you otherwise not.Di2015NewLine
11801727Di2015UniqueSeparatorDim req As System.Net.WebRequest = System.Net.WebRequest.Create("[URL here]")Di2015NewLineDim response As System.Net.WebResponse = req.GetResponse()Di2015NewLineDim stream As Stream = response.GetResponseStream()Di2015NewLineDi2015NewLineDim img As System.Drawing.Image = System.Drawing.Image.FromStream(stream)Di2015NewLinestream.Close()Di2015NewLine
11801900Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Windows.Threading;Di2015NewLineusing log4net;Di2015NewLineusing log4net.Core;Di2015NewLineusing log4net.Appender;Di2015NewLineusing log4net.Repository.Hierarchy;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.IO;Di2015NewLineusing COIN.SDK.Diagnostics;Di2015NewLineDi2015NewLinenamespace [Your Namespace]Di2015NewLine{Di2015NewLine    public static class LogDi2015NewLine    {Di2015NewLine        private static bool isConfigured = false;Di2015NewLine        private static ILog iLog;Di2015NewLineDi2015NewLine        public static void Configure()Di2015NewLine        {Di2015NewLine            if (isConfigured)Di2015NewLine                return;Di2015NewLineDi2015NewLine            var loggerName = typeof(DiagnosticsManager).FullName;Di2015NewLineDi2015NewLine            var logger = (log4net.Repository.Hierarchy.Logger)log4net.LogManager.GetRepository().GetLogger(loggerName);Di2015NewLine            var ilogger = log4net.LogManager.GetRepository().GetLogger(loggerName);Di2015NewLineDi2015NewLine            //Add the default log appender if none existDi2015NewLine            if(logger.Appenders.Count == 0)Di2015NewLine            {Di2015NewLine                var directoryName = "[Your directory name here. e.c. 'C:\\ProgramData\\AppName\\Logs']";Di2015NewLineDi2015NewLine                //If the directory doesn't exist then create itDi2015NewLine                if(!Directory.Exists(directoryName))Di2015NewLine                    Directory.CreateDirectory(directoryName);Di2015NewLineDi2015NewLine                var fileName = Path.Combine(directoryName, "[Your static file name here. e.c. 'AppName.log']");Di2015NewLineDi2015NewLine                //Create the rolling file appenderDi2015NewLine                var appender = new log4net.Appender.RollingFileAppender();Di2015NewLine                appender.Name = "RollingFileAppender";Di2015NewLine                appender.File = fileName;Di2015NewLine                appender.StaticLogFileName = true;Di2015NewLine                appender.AppendToFile = false;Di2015NewLine                appender.RollingStyle = log4net.Appender.RollingFileAppender.RollingMode.Size;Di2015NewLine                appender.MaxSizeRollBackups = 10;Di2015NewLine                appender.MaximumFileSize = "10MB";Di2015NewLine                appender.PreserveLogFileNameExtension = true;Di2015NewLineDi2015NewLine                //Configure the layout of the trace message writeDi2015NewLine                var layout = new log4net.Layout.PatternLayout()Di2015NewLine                {Di2015NewLine                    ConversionPattern = "%date{hh:mm:ss.fff} [%thread] %-5level - %message%newline"Di2015NewLine                };Di2015NewLine                appender.Layout = layout;Di2015NewLine                layout.ActivateOptions();Di2015NewLineDi2015NewLine                //Let log4net configure itself based on the values providedDi2015NewLine                appender.ActivateOptions();Di2015NewLine                log4net.Config.BasicConfigurator.Configure(appender);Di2015NewLine            }Di2015NewLineDi2015NewLine            iLog = LogManager.GetLogger(loggerName);Di2015NewLine            isConfigured = true;Di2015NewLineDi2015NewLine            Info("Logging Configured at " + DateTime.Now.ToString("g"));Di2015NewLine        }Di2015NewLineDi2015NewLine        public static event EventHandler<ExceptionLoggedEventArgs> ExceptionLogged;Di2015NewLineDi2015NewLine        public static void Debug(object message) { Configure(); iLog.Debug(message); }Di2015NewLine        public static void Debug(object message, Exception exception) { Configure(); iLog.Debug(message, exception); }Di2015NewLineDi2015NewLine        public static void Error(object message) { Configure(); iLog.Error(message); }Di2015NewLine        public static void Error(object message, Exception exception) { Configure(); iLog.Error(message, exception); }Di2015NewLineDi2015NewLine        public static void Fatal(object message) { Configure(); iLog.Fatal(message); }Di2015NewLine        public static void Fatal(object message, Exception exception) { Configure(); iLog.Fatal(message, exception); }Di2015NewLineDi2015NewLine        public static void Info(object message) { Configure(); iLog.Info(message); }Di2015NewLine        public static void Info(object message, Exception exception) { Configure(); iLog.Info(message, exception); }Di2015NewLineDi2015NewLine        public static void Warn(object message) { Configure(); iLog.Warn(message); }Di2015NewLine        public static void Warn(object message, Exception exception) { Configure(); iLog.Warn(message, exception); }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
11801948Di2015UniqueSeparator foreach (dynamic work in friend.work ?? new List<string>())Di2015NewLine
11801948Di2015UniqueSeparator foreach (dynamic work in friend.work ?? new [] { new { employer = new { name = string.Empty}, position = new { name = string.Empty }}})Di2015NewLine
11801968Di2015UniqueSeparatorpublic static DependencyProperty Thickness = Di2015NewLine    DependencyProperty.Register("Thickness", typeof(double), typeof(Test));Di2015NewLine
11802084Di2015UniqueSeparator// Create total column.Di2015NewLineDataColumn totalColumn = new DataColumn();Di2015NewLinetotalColumn.DataType = System.Type.GetType("System.Decimal");Di2015NewLinetotalColumn.ColumnName = "total";Di2015NewLinetotalColumn.Expression = "AmountSold + AmountUpgraded";Di2015NewLineDi2015NewLine// Add columns to DataTable.Di2015NewLine...Di2015NewLinetable.Columns.Add(totalColumn);Di2015NewLine
11802142Di2015UniqueSeparatorCreateViewAccessor(Int64, Int64, MemoryMappedFileAccess);Di2015NewLine
11802147Di2015UniqueSeparatorpublic ICriteriaItemFactoryDi2015NewLine{Di2015NewLine    ICriteriaItem GetNew();Di2015NewLine}Di2015NewLine
11802147Di2015UniqueSeparatorpublic CriteriaItemFactory : ICriteriaItemFactoryDi2015NewLine{Di2015NewLine    private IKernel _kernel;Di2015NewLineDi2015NewLine    public CriteriaItemFactory(IKernel kernel)Di2015NewLine    {Di2015NewLine        _kernel = kernel;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ICriteriaItem GetNew()Di2015NewLine    {Di2015NewLine        return _kernel.Get<ICriteriaItem>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11802151Di2015UniqueSeparator.ToList()
11802151Di2015UniqueSeparatorDBEntities context = new DBEntities();Di2015NewLineprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var q = (from i in context.myTableDi2015NewLine             select i);Di2015NewLine    DataGridView.DataSource = q;Di2015NewLine}Di2015NewLine
11802151Di2015UniqueSeparatorforeach (Customer customer in bs.List)Di2015NewLine{         Di2015NewLine    // In my db customerId was an identity column set as primary keyDi2015NewLine    if (customer.CustomerId == 0)Di2015NewLine        context.Customers.AddObject(customer);Di2015NewLine}Di2015NewLinecontext.SaveChanges();Di2015NewLine
11802462Di2015UniqueSeparatorvar thirdTable = res.Elements("table").Skip(2).FirstOrDefault();Di2015NewLineif (thirdTable != null)Di2015NewLine{Di2015NewLine    // do stuffDi2015NewLine}Di2015NewLine
11802462Di2015UniqueSeparatorElements()
11802462Di2015UniqueSeparatorSelectNodes()
11802462Di2015UniqueSeparatorvar thirdTable = res.SelectNodes("table").Skip(2).FirstOrDefault();Di2015NewLine
11802508Di2015UniqueSeparatorpublic Class IndexBuilder<T> where T : ADi2015NewLine{Di2015NewLine   List<string> Go(T obj)Di2015NewLine   {Di2015NewLine      string aPt=obj.GetAccessPoint();Di2015NewLine      string pMap=obj.GetPriorityMap();Di2015NewLine   }Di2015NewLine}Di2015NewLine
11802665Di2015UniqueSeparatorusing System.Diagnostics;Di2015NewLineusing log4net.Appender;Di2015NewLineusing log4net.Core;Di2015NewLinenamespace XXX.LoggingDi2015NewLine{Di2015NewLine    public class AzureTraceAppender : TraceAppenderDi2015NewLine    {Di2015NewLine        protected override void Append(LoggingEvent loggingEvent)Di2015NewLine        {Di2015NewLine            var level = loggingEvent.Level;Di2015NewLine            var message = RenderLoggingEvent(loggingEvent);Di2015NewLine            if (level >= Level.Error)Di2015NewLine            Trace.TraceError(message);Di2015NewLine            else if (level >= Level.Warn)Di2015NewLine            Trace.TraceWarning(message);Di2015NewLine            else if (level >= Level.Info)Di2015NewLine            Trace.TraceInformation(message);Di2015NewLine            elseDi2015NewLine            Trace.Write(message);Di2015NewLine            if (ImmediateFlush)Di2015NewLine            Trace.Flush();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11802665Di2015UniqueSeparator<log4net>Di2015NewLine    <appender name="AzureTraceAppender" type="XXX.Logging.AzureTraceAppender">Di2015NewLine        <layout type="log4net.Layout.PatternLayout">Di2015NewLine            <conversionPattern value="%logger - %message" />Di2015NewLine        </layout>Di2015NewLine    </appender>Di2015NewLine    <root>Di2015NewLine        <level value="ALL" />Di2015NewLine        <appender-ref ref="AzureTraceAppender" />Di2015NewLine    </root>Di2015NewLine</log4net>Di2015NewLine
11802716Di2015UniqueSeparatorpublic Phone(string personalPhone)Di2015NewLine    : this(personalPhone, string.Empty)Di2015NewLine
11802716Di2015UniqueSeparatorthis(personalPhone, string.Empty)Di2015NewLine
11802716Di2015UniqueSeparatorpublic Phone(string personalPhone)Di2015NewLine    : this(personalPhone, string.Empty, string.Empty)Di2015NewLine
11802717Di2015UniqueSeparator    private object target;Di2015NewLineDi2015NewLine    public object TargetDi2015NewLine    {Di2015NewLine        get { return this.target; }Di2015NewLineDi2015NewLine        setDi2015NewLine        {Di2015NewLine            this.target = value;Di2015NewLineDi2015NewLine            var array = this.target as Array;Di2015NewLine            this.TargetValues = array ?? new[] { this.target };Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Array TargetValues { get; private set; }Di2015NewLine
11802874Di2015UniqueSeparator>
11802874Di2015UniqueSeparatormysqldump
11802874Di2015UniqueSeparator--result-file
11802874Di2015UniqueSeparatorRedirectStandardOutput
11802874Di2015UniqueSeparatorStartInfo
11802874Di2015UniqueSeparatortrue
11802874Di2015UniqueSeparatorStandardOutput
11802962Di2015UniqueSeparatoroutput
11802962Di2015UniqueSeparatoroutput
11802962Di2015UniqueSeparatorTask<T> LoadThreaded<T>(string path)Di2015NewLine{Di2015NewLine    return Task.Factory.StartNew( () => Loader<T>(path) );Di2015NewLine}Di2015NewLine
11802962Di2015UniqueSeparatoroutput.Result
11803007Di2015UniqueSeparator<ul>Di2015NewLine    <li><asp:HyperLink ID="hypDE" runat="server" Text="DE" NavigateUrl="yourpage.aspx?culture=DE" /></li>Di2015NewLine    <li><asp:HyperLink ID="hypUS" runat="server" Text="US" NavigateUrl="yourpage.aspx?culture=US" /></li>Di2015NewLine</ul>Di2015NewLine
11803007Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine    {Di2015NewLine        string culture = Request.QueryString["culture"];Di2015NewLine    }Di2015NewLine}Di2015NewLine
11803007Di2015UniqueSeparator<asp:Repeater ID="repCultures" runat="server" OnItemDataBound="repCultures_ItemDataBound">Di2015NewLine    <HeaderTemplate>Di2015NewLine        <ul>Di2015NewLine    </HeaderTemplate>Di2015NewLine        <li>Di2015NewLine            <asp:HyperLink ID="hypCulture" runat="server" />Di2015NewLine        </li>Di2015NewLine    <FooterTemplate>Di2015NewLine        </ul>Di2015NewLine    </FooterTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
11803007Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine    {Di2015NewLine        //This is where you would get your cultures out of an xml or databaseDi2015NewLine        //I'm using a non-dynamic list to make a simple representationDi2015NewLine        List<string> cultures = new List<string>() { "de-DE", "en-US", "en-UK" };Di2015NewLine        repCultures.DataSource = cultures;Di2015NewLine        repCultures.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected void repCultures_ItemDataBound(object sender, RepeaterItemEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.Item)Di2015NewLine    {Di2015NewLine        string culture = e.Item.DataItem as string;Di2015NewLine        HyperLink hypCulture = e.Item.FindControl("hypCulture") as HyperLink;Di2015NewLine        hypCulture.Text = culture;Di2015NewLine        hypCulture.NavigateUrl = string.Format("~/yourpage.aspx?culture={0}", culture);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11803007Di2015UniqueSeparator<asp:BulletedList ID="cmbCulture" runat="server" OnClick="cmbCulture_Click" DisplayMode="LinkButton">Di2015NewLine
11803007Di2015UniqueSeparatorprotected void cmbCulture_Click(object sender, BulletedListEventArgs e)Di2015NewLine{Di2015NewLine    //Save Current Culture in Cookie- will be used in InitializeCulture in BasePageDi2015NewLine    Response.Cookies.Add(new HttpCookie("Culture", cmbCulture.Items[e.Index].Value));Di2015NewLine    Response.Redirect(Request.Url.AbsolutePath); //Reload and Clear PostBack DataDi2015NewLine}Di2015NewLine
11803022Di2015UniqueSeparatoritemGrid.Rows[e.RowIndex]
11803022Di2015UniqueSeparatorrow
11803046Di2015UniqueSeparatordevelopers
11803046Di2015UniqueSeparatorDeveloper
11803046Di2015UniqueSeparatorbool
11803046Di2015UniqueSeparatorWhere
11803046Di2015UniqueSeparatorstring
11803046Di2015UniqueSeparatorSelect
11803084Di2015UniqueSeparatorMultipleActiveResultSets=True
11803197Di2015UniqueSeparator((Range)worksheet.Cells[row, col]).Formula = myFormulaDi2015NewLine
11803313Di2015UniqueSeparator(?i)\\bflo\\b
11803313Di2015UniqueSeparatorstring pattern = @"(?i)\\bflo\\b";Di2015NewLinejobTitle = Regex.Replace("Florist of Vinyl Flowers", pattern, string.Empty);Di2015NewLine
11803313Di2015UniqueSeparator(?i)\\b[^ ]*flo[^ ]*\\b
11803401Di2015UniqueSeparatorvoid
11803401Di2015UniqueSeparatorprotected async void CannotChangeSignature()Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11803401Di2015UniqueSeparatorvoid
11803401Di2015UniqueSeparatorTask
11803401Di2015UniqueSeparatorTask<T>
11803401Di2015UniqueSeparatorTask<bool>
11803401Di2015UniqueSeparatorprotected async Task<bool> CannotChangeSignature()Di2015NewLine{Di2015NewLine  ...Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    await ApplicationData.Current.LocalFolder.GetFileAsync(fileName);Di2015NewLine    return true;Di2015NewLine  }Di2015NewLine  catch(FileNotFoundException)Di2015NewLine  {Di2015NewLine    return false;Di2015NewLine  }Di2015NewLine}Di2015NewLine
11803401Di2015UniqueSeparatorAsTask().Wait()
11803401Di2015UniqueSeparatorAggregateException
11803401Di2015UniqueSeparatorFileNotFoundException
11803417Di2015UniqueSeparatorlist.Sort((x,y) => {Di2015NewLine  if(!x.Nullable.HasValue) {Di2015NewLine     if(!y.Nullable.HasValue) return 0; // equalDi2015NewLine     else return -1; // y is greaterDi2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine    if(!y.Nullable.HasValue) return 1; // x is greaterDi2015NewLine    if(x == y) return 0; // equalDi2015NewLine    if(x < y) return -1; // y is greaterDi2015NewLine    else return 1;Di2015NewLine  }Di2015NewLine}Di2015NewLine
11803500Di2015UniqueSeparatorstring.Format()
11803500Di2015UniqueSeparatorstring str = string.Format("CREATE TABLE {0}{1}{2} (" Di2015NewLine+ "quesNo int NOT NULL PRIMARY KEY, question varchar(1000) NOT NULL, " Di2015NewLine+ "ansA varchar(500) NOT NULL, ansB varchar(500) NOT NULL, " Di2015NewLine+ "ansC varchar(500) NOT NULL, ansD varchar(500) NOT NULL, " + Di2015NewLine+ "rightAns varchar(50) NOT NULL )",Di2015NewLineLabel1.Text.Trim(),Di2015NewLinetxtpaperset.Text.Trim(),Di2015NewLinerbtnEng.Text.TrimEnd(arr));Di2015NewLine
11803500Di2015UniqueSeparatorPaperId int identity(1,1)Di2015NewLine
11803500Di2015UniqueSeparatorstr
11803645Di2015UniqueSeparatorstring connStr = "Data Source=SERVER_XYZ;Initial Catalog=DATABASE_XYZ;User ID=us;Password=pass"; Di2015NewLineDi2015NewLinevar csb = new SqlConnectionStringBuilder(connStr);Di2015NewLineDi2015NewLinestring dataSource = csb.DataSource;Di2015NewLinestring initialCatalog = csb.InitialCatalog;Di2015NewLine
11803728Di2015UniqueSeparatorDataTable dt;Di2015NewLineint dataWidth = 5;  //use a loop or something to determine how many columns will have dataDi2015NewLinebool[] emptyCols = new bool[datawidth];  //initialize all values to trueDi2015NewLineforeach(Row r in dt)Di2015NewLine{Di2015NewLine    for(int i = 0; i < dataWidth; i++)Di2015NewLine    {Di2015NewLine        if(r[i].Contents != 0))Di2015NewLine           emptyCols[i] = false;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinefor(int i = 0; i < emptyCols.Length; i++)Di2015NewLine{Di2015NewLine     if(emptyCols[i])Di2015NewLine        dt.Columns.RemoveAt(i);Di2015NewLine}Di2015NewLine
11803761Di2015UniqueSeparator([A-Z_]*):\\s*\\[(\\w*)\\]Di2015NewLine
11803761Di2015UniqueSeparator^([A-Z_]*):\\s*\\[(\\w*)\\]$       // will only match whole linesDi2015NewLine^\\s*([A-Z_]*):\\s*\\[(\\w*)\\]\\s*$ // same as above but ignores extra whitespace Di2015NewLine                               // on the beginning and end of linesDi2015NewLine
11803761Di2015UniqueSeparator[A-Z]       // matches any capital letterDi2015NewLine[A-Za-z]    // matches any letterDi2015NewLine[A-Za-z0-9] // matches any alphanumeric characterDi2015NewLine\\w          // matches any "word character", which is any alnum character or _Di2015NewLine
11804063Di2015UniqueSeparatorclass TextLogger : IDisposableDi2015NewLine{Di2015NewLine    private FileStream m_FileStream;Di2015NewLine    private StreamWriter m_StreamWriter;Di2015NewLine    private object m_Lock = new object();Di2015NewLineDi2015NewLine    void CreateNewLogFile()Di2015NewLine    {Di2015NewLine        lock (m_Lock)Di2015NewLine        {Di2015NewLine            if ( m_FileStream != null )Di2015NewLine                m_StreamWriter = new StreamWriter(m_FileStream);Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    void CalledFromOtherThread()Di2015NewLine    {Di2015NewLine        //Do stuffDi2015NewLineDi2015NewLine        lock (m_Lock)Di2015NewLine        {Di2015NewLine            if (m_FileStream != null)Di2015NewLine                m_FileStream.Dispose();Di2015NewLine            m_FileStream = null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11804063Di2015UniqueSeparatorCalledFromOtherThread
11804063Di2015UniqueSeparatorCreateNewLogFile
11804154Di2015UniqueSeparatorService References
11804154Di2015UniqueSeparatorAdd Service Reference..
11804154Di2015UniqueSeparator  <ItemGroup>Di2015NewLine    <WCFMetadata Include="Service References\\" />Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <WCFMetadataStorage Include="Service References\\ServiceReference1\\" />Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <None Include="Service References\\ServiceReference1\\Foo-Web-Services-Bar.disco" />Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <None Include="Service References\\ServiceReference1\\configuration91.svcinfo" />Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <None Include="Service References\\ServiceReference1\\configuration.svcinfo" />Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <None Include="Service References\\ServiceReference1\\Reference.svcmap">Di2015NewLine      <Generator>WCF Proxy Generator</Generator>Di2015NewLine      <LastGenOutput>Reference.cs</LastGenOutput>Di2015NewLine    </None>Di2015NewLine  </ItemGroup>Di2015NewLine
11804397Di2015UniqueSeparatorxml:space="preserve"Di2015NewLine
11804397Di2015UniqueSeparatorwhite-space:pre
11804419Di2015UniqueSeparatorDataContext
11804419Di2015UniqueSeparatorLogical
11804419Di2015UniqueSeparatorVisualTreeHelpers
11804419Di2015UniqueSeparatorFindName
11804419Di2015UniqueSeparatorFrameworkElement
11804419Di2015UniqueSeparatorStackPanel
11804463Di2015UniqueSeparatorvar toBeRemoved = from m in db.IssuesDi2015NewLine                           where m.Remove.HasValue && m.RemoveDi2015NewLine                           select m;Di2015NewLine
11804519Di2015UniqueSeparatorint randompick = randomnum % 2;Di2015NewLine
11804738Di2015UniqueSeparator    Dictionary<string, string> globalProperties = new Dictionary<string, string>();Di2015NewLineDi2015NewLine    globalProperties.Add("Configuraion", "Debug");Di2015NewLine    globalProperties.Add("Platform", "AnyCPU");Di2015NewLineDi2015NewLine    ProjectCollection pc = new ProjectCollection(globalProperties);Di2015NewLineDi2015NewLine    Project sln = pc.LoadProject(@"my_directory\\My_solution_name.sln.metaproj", "4.0");Di2015NewLineDi2015NewLine    foreach (ProjectItem pi in sln.Items)Di2015NewLine    {Di2015NewLine        if (pi.ItemType == "ProjectReference")Di2015NewLine        {Di2015NewLine            Project p = pc.LoadProject(pi.EvaluatedInclude);Di2015NewLine            ProjectProperty pp = p.GetProperty("OutputPath");Di2015NewLine            if (pp != null)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Project=" + pi.EvaluatedInclude + " OutputPath=" + pp.EvaluatedValue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11805062Di2015UniqueSeparatorSubjects
11805062Di2015UniqueSeparatorprivate void updateTimetableCells()Di2015NewLine{Di2015NewLine    timetableCells.Clear(TType.Second); //WHY DID I WRITE THIS?!Di2015NewLine    foreach (KeyValuePair<Period, Subject> subjectValuePair in Subjects)Di2015NewLine    {Di2015NewLine        TimetableCell cell;Di2015NewLine        if (timetableCells.TryGetByFirst(subjectValuePair.Key, out cell))Di2015NewLine        {Di2015NewLine             cell.SubjectObject = subjectValuePair.Value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    foreach (Period key in timetableCells.Keys)Di2015NewLine    {Di2015NewLine        TimetableCell cell;Di2015NewLine        if (timetableCells.TryGetByFirst(key, out cell))Di2015NewLine        {Di2015NewLine            cell.SubjectObject = Subject.Empty;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11805099Di2015UniqueSeparatorAsEnumerable()
11805099Di2015UniqueSeparatorToList()
11805099Di2015UniqueSeparatorAsEnumerable()
11805099Di2015UniqueSeparatorToList()
11805099Di2015UniqueSeparatorvar statistics = (Di2015NewLine  from record in startTimesDi2015NewLine  group record by record.startTimeDi2015NewLine  into gDi2015NewLine  select g;Di2015NewLine  ).AsEnumerable().Select(Di2015NewLine    g => new e_activeSessionDi2015NewLine    {Di2015NewLine      workerId = wcopy,Di2015NewLine      startTime = g.Key.GetValueOrDefault(),Di2015NewLine      totalTasks = g.Count(),Di2015NewLine      totalTime = g.Max(o => o.record.timeInSession).GetValueOrDefault(),Di2015NewLine      /* ... */Di2015NewLine     });Di2015NewLine
11805099Di2015UniqueSeparatorgroup by
11805099Di2015UniqueSeparatorAsEnumerable()
11805099Di2015UniqueSeparatorToList()
11805099Di2015UniqueSeparatorwcopy
11805099Di2015UniqueSeparatorselect startTime, count(id), max(timeInSession), /* ... */Di2015NewLinefrom tasksDi2015NewLinegroup by startTimeDi2015NewLine
11805099Di2015UniqueSeparatorselect distinct startTime from tasksDi2015NewLine
11805099Di2015UniqueSeparatorselect timeInSession, /* ... */Di2015NewLinefrom tasksDi2015NewLinewhere startTime = @p0Di2015NewLine
11805099Di2015UniqueSeparatorstartTime
11805099Di2015UniqueSeparator@p0
11805099Di2015UniqueSeparatorvar statistics =Di2015NewLine  from record in startTimes.AsEnumerable()Di2015NewLine  group record by record.startTimeDi2015NewLine  into gDi2015NewLine  select new e_activeSessionDi2015NewLine  {Di2015NewLine    workerId = wcopy,Di2015NewLine    startTime = g.Key.GetValueOrDefault(),Di2015NewLine    totalTasks = g.Count(),Di2015NewLine    totalTime = g.Max(o => o.record.timeInSession).GetValueOrDefault(),Di2015NewLine    /* ... */Di2015NewLine  };Di2015NewLine
11805099Di2015UniqueSeparatorvar statistics =Di2015NewLine  from record in (Di2015NewLine    from dbRec in startTimesDi2015NewLine    select new {dbRec.startTime, dbRec.timeInSession, /*...*/}).AsEnumerable()Di2015NewLine    group record by record.startTimeDi2015NewLine    into gDi2015NewLine    select new e_activeSessionDi2015NewLine    {Di2015NewLine      workerId = wcopy,Di2015NewLine      startTime = g.Key.GetValueOrDefault(),Di2015NewLine      totalTasks = g.Count(),Di2015NewLine      totalTime = g.Max(o => o.record.timeInSession).GetValueOrDefault(),Di2015NewLine      /* ... */Di2015NewLine    };Di2015NewLine
11805099Di2015UniqueSeparatorvar statistics = (Di2015NewLine  from record in startTimesDi2015NewLine  group record by record.startTimeDi2015NewLine  into gDi2015NewLine  select new{Di2015NewLine    startTime = g.Key.GetValueOrDefault(),Di2015NewLine    totalTasks = g.Count(),Di2015NewLine    totalTime = g.Max(o => o.record.timeInSession).GetValueOrDefault(),Di2015NewLine    /* ... */Di2015NewLine  }).AsEnumerable().Select(Di2015NewLine    d => new e_activeSessionDi2015NewLine    {Di2015NewLine      workerId = wcopy,Di2015NewLine      startTime = d.startTime,Di2015NewLine      totalTasks = d.totalTasks,Di2015NewLine      /* ... */Di2015NewLine    });Di2015NewLine
11805099Di2015UniqueSeparatorToList()
11805099Di2015UniqueSeparatore_activeSession
11805099Di2015UniqueSeparatorAsEnumerable()
11805187Di2015UniqueSeparatorRegexEvaluator
11805187Di2015UniqueSeparatorpublic
11805187Di2015UniqueSeparatorinternal
11805200Di2015UniqueSeparatorFont Metric Class
11805220Di2015UniqueSeparatorpublic T Create<T>(T mi, MyVersion myv)Di2015NewLine{Di2015NewLine    MyVersionEntity myve = _db.MyVersionEntity.Where(r => r.Id == myv.Id).First();Di2015NewLine    Entity<T> mie = new Entity<T>();Di2015NewLine    myve.EntityAssoc<T>.Add(mie);Di2015NewLine    mie = _updateEntity<T>(mi, mie);Di2015NewLine    mi.Id = mie.Id;Di2015NewLine    return mi;Di2015NewLine}Di2015NewLine
11805220Di2015UniqueSeparator Create<MyResult>(...)Di2015NewLine Create<MyIssue>(...)Di2015NewLine
11805336Di2015UniqueSeparatorTabStripPlacement
11805444Di2015UniqueSeparatorif (!string.IsNullOrEmpty(multiWordPhrase))Di2015NewLine{Di2015NewLine   BooleanQuery bq = new BooleanQuery();Di2015NewLineDi2015NewLine   string[] fieldList = { "Title", "Description", "Url" };Di2015NewLine   List<BooleanClause.Occur> occurs = new List<BooleanClause.Occur>();Di2015NewLine   foreach (string field in fieldList)Di2015NewLine   {Di2015NewLine      occurs.Add(BooleanClause.Occur.SHOULD);Di2015NewLine   }Di2015NewLine   Query qry = MultiFieldQueryParser.Parse(Version.LUCENE_29, multiWordPhrase, fieldList, occurs.ToArray(), new StandardAnalyzer(Version.LUCENE_29));Di2015NewLineDi2015NewLineDi2015NewLine   bq.Add(qry,BooleanClause.Occur.Must);Di2015NewLineDi2015NewLine   //this is the country query (modify the Country field name to whatever you have)Di2015NewLine   string country = "UK";Di2015NewLine   Query q2 = new QueryParser(Version.LUCENE_CURRENT, "Country", analyzer).parse(country);Di2015NewLine   bq.Add(q2,BooleanClause.Occur.Must);Di2015NewLine   searcher = new IndexSearcher(_directory, false);Di2015NewLineDi2015NewLine   TopDocs topDocs = searcher.Search(bq, null, ((PageIndex + 1) * PageSize), Sort.RELEVANCE);Di2015NewLine   ScoreDoc[] scoreDocs = topDocs.ScoreDocs;Di2015NewLine   int resultsCount = topDocs.TotalHits;Di2015NewLine   list.HasData = resultsCount;Di2015NewLine   StartRecPos = (PageIndex * PageSize) + 1;Di2015NewLine   if (topDocs != null)Di2015NewLine   {Di2015NewLine     //loop through your resultsDi2015NewLineDi2015NewLine   }Di2015NewLine
11805496Di2015UniqueSeparator<SpecificVersion>false</SpecificVersion>Di2015NewLine
11805622Di2015UniqueSeparatorPropertyPath
11805622Di2015UniqueSeparatorparamter
11805622Di2015UniqueSeparatorConvert
11805622Di2015UniqueSeparatorb.Path = new PropertyPath("Text");Di2015NewLineb.ConverterParameter = myParamter;Di2015NewLine
11805649Di2015UniqueSeparator    public enum RegistryLocationDi2015NewLine    {Di2015NewLine        ClassesRoot,Di2015NewLine        CurrentUser,Di2015NewLine        LocalMachine,Di2015NewLine        Users,Di2015NewLine        CurrentConfigDi2015NewLine    }Di2015NewLineDi2015NewLine    public RegistryKey GetRegistryLocation(RegistryLocation location)Di2015NewLine    {Di2015NewLine        switch (location)Di2015NewLine        {Di2015NewLine            case RegistryLocation.ClassesRoot:Di2015NewLine                return Registry.ClassesRoot;Di2015NewLineDi2015NewLine            case RegistryLocation.CurrentUser:Di2015NewLine                return Registry.CurrentUser;Di2015NewLineDi2015NewLine            case RegistryLocation.LocalMachine:Di2015NewLine                return Registry.LocalMachine;Di2015NewLineDi2015NewLine            case RegistryLocation.Users:Di2015NewLine                return Registry.Users;Di2015NewLineDi2015NewLine            case RegistryLocation.CurrentConfig:Di2015NewLine                return Registry.CurrentConfig;Di2015NewLineDi2015NewLine            default:Di2015NewLine                return null;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void RegistryWrite(RegistryLocation location, string path, string keyname, string value) {Di2015NewLine         RegistryKey key;Di2015NewLine         key = GetRegistryLocation(location).CreateSubKey(path);Di2015NewLine    }Di2015NewLine
11805712Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine    private void myFun()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Hello, World!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11805712Di2015UniqueSeparatorvar fun = "myFun";Di2015NewLinevar foo = new Foo();Di2015NewLinefooDi2015NewLine    .GetType()Di2015NewLine    .GetMethod(Di2015NewLine        fun,Di2015NewLine        BindingFlags.NonPublicDi2015NewLine            | BindingFlags.InstanceDi2015NewLine            | BindingFlags.InvokeMethod)Di2015NewLine    .Invoke(foo, new object[] { });Di2015NewLine
11805813Di2015UniqueSeparatorpublic int propertyDi2015NewLine{Di2015NewLine    getDi2015NewLine    {             Di2015NewLine         int defaultVal;Di2015NewLine         int.TryParse(tbText.Text, out defaultVal);Di2015NewLine         return defaultVal;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine         tbText.Text = <b>value</b>.ToString();Di2015NewLine    }Di2015NewLine}
11805884Di2015UniqueSeparatorTableA obj = repository.All().Single(w=>w.pid == "1");Di2015NewLineTableB SecondTable = obj.TableB;Di2015NewLine
11805923Di2015UniqueSeparatorConnectionString
11805923Di2015UniqueSeparatorDataFile
11805923Di2015UniqueSeparator<%= %>
11805923Di2015UniqueSeparator<table border="0" cellpadding="0" cellspacing="0">Di2015NewLine    <tr>Di2015NewLine        <td>Di2015NewLine            <asp:DropDownList ID="DropDownEventType"  runat="server" CssClass="dropDownEventType" DataSourceID="spdropDownEventType" Di2015NewLine                DataTextField="yourEventName" Di2015NewLine                DataValueField="yourEventValue">Di2015NewLine            </asp:DropDownList>Di2015NewLine            <asp:AccessDataSource Di2015NewLine                SelectCommand="app_Event_Type_Select" Di2015NewLine                SelectCommandType="StoredProcedure"  Di2015NewLine                ID="spdropDownEventType" Di2015NewLine                runat="server"></asp:AccessDataSource>Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLine</table>Di2015NewLine
11805923Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    spdropDownEventType.DataFile = "your access db file path";Di2015NewLine}Di2015NewLine
11806060Di2015UniqueSeparatorstring conncetionStr = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;Di2015NewLineSqlConnection msSQLConnectoin = new SqlConnection(conncetionStr);Di2015NewLineSqlCommand msSQLCommand = msSQLConnectoin.CreateCommand();Di2015NewLineDi2015NewLinemsSQLCommand.CommandText = "app_Event_Type_Select";Di2015NewLinemsSQLConnectoin.Open();Di2015NewLineSqlDataReader msDataReader = msSQLCommand.ExecuteReader();Di2015NewLineDi2015NewLineDi2015NewLinedropDown.DataSource = msDataReader; Di2015NewLinedropDown.DataTextField = "Name";Di2015NewLinedropDown.DataValueField = "EventTypeID"; Di2015NewLinedropDown.DataBind();Di2015NewLinemsSQLConnectoin.Close();Di2015NewLinemsSQLConnectoin.Dispose();Di2015NewLineDi2015NewLinedropDown.Items.Insert(0, "--Select Name--");Di2015NewLine}Di2015NewLine
11806060Di2015UniqueSeparatormsDataReader["Name"].ToString()
11806060Di2015UniqueSeparatormsDataReader
11806110Di2015UniqueSeparatorAutoGenerateColumns
11806110Di2015UniqueSeparatorfalse
11806110Di2015UniqueSeparatorFillWeight
11806110Di2015UniqueSeparator1
11806110Di2015UniqueSeparatordgv.AutoGenerateColumns = false;Di2015NewLinefor (int i = 1; i <= columns; i++)Di2015NewLine{Di2015NewLine    dgv.Columns.Add("col" + i, "column " + i);Di2015NewLine    dgv.Columns[i - 1].FillWeight = 1;Di2015NewLine}Di2015NewLinefor (int j = 0; j < rows; j++)Di2015NewLine    dgv.Rows.Add();Di2015NewLine
11806120Di2015UniqueSeparatorJsonConvert
11806120Di2015UniqueSeparator public static object DeserializeObject(string value, Type type);Di2015NewLine
11806120Di2015UniqueSeparatorvar result = JsonConvert.DeserializeObject("{ some json }", theType);Di2015NewLine
11806184Di2015UniqueSeparatorprivate void input_KeyDown(object sender, KeyEventArgs e) Di2015NewLine{                        Di2015NewLine    if(e.KeyData == Keys.Enter)   Di2015NewLine    {  Di2015NewLine        MessageBox.Show("Pressed enter.");  Di2015NewLine    }             Di2015NewLine}Di2015NewLine
11806272Di2015UniqueSeparatorToList()
11806272Di2015UniqueSeparatorDataGridFormat
11806502Di2015UniqueSeparatorpublic class ValuesController : ApiControllerDi2015NewLine{Di2015NewLine    private readonly IValueService _valueService;Di2015NewLineDi2015NewLine    public ValuesController(IValueService valueService)Di2015NewLine    {Di2015NewLine        _valueService = valueService;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string[] Get()Di2015NewLine    {Di2015NewLine        return _valueService.GetValues();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Get(int id)Di2015NewLine    {Di2015NewLine        return _valueService.GetValue(id);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11806502Di2015UniqueSeparatorvar valueServiceMock = new Mock<IValueService>();Di2015NewLinevalueServiceMock.Setup(service => service.GetValues())Di2015NewLine            .Returns(new[] { "value1", "value2" });Di2015NewLineDi2015NewLinevar controller = new ValuesController(valueServiceMock.Object);Di2015NewLinevar values = controller.Get();Di2015NewLineDi2015NewLineAssert.AreEqual(values.Length, 2);Di2015NewLineAssert.AreEqual(values[0], "value1");Di2015NewLineAssert.AreEqual(values[1], "value2");Di2015NewLine
11806508Di2015UniqueSeparatorIComparable<T>
11806508Di2015UniqueSeparatorIComparer
11807010Di2015UniqueSeparatorstore.Changes().ForIndex("YourIndex").Subscribe(DoSomething);Di2015NewLine
11807157Di2015UniqueSeparator private void radGridView1_CellFormatting(object sender, CellFormattingEventArgs e)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                if (e.CellElement.ColumnInfo.HeaderText == "Picture") Di2015NewLine                {Di2015NewLine                    e.CellElement.Image = pictureBox1.Image;Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                MessageBox.Show(ex.Message);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11807228Di2015UniqueSeparatorImageGetter
11807228Di2015UniqueSeparatorImage
11807228Di2015UniqueSeparatorstring
11807228Di2015UniqueSeparatorint
11807228Di2015UniqueSeparatorstring
11807228Di2015UniqueSeparatorint
11807228Di2015UniqueSeparatorLargeImageList
11807228Di2015UniqueSeparatorSmallImageList
11807228Di2015UniqueSeparatorEnumerable
11807228Di2015UniqueSeparatorSetObjects
11807228Di2015UniqueSeparatorAddObjects
11807377Di2015UniqueSeparatorList<Jobs>
11807377Di2015UniqueSeparatorQueue<Jobs>
11807377Di2015UniqueSeparator        _currentJob = Jobs.DeQueue();Di2015NewLine        Task.Factory.StartNew(() => {_currentJob.execute();}, Di2015NewLine        () => Di2015NewLine        {Di2015NewLine            //On task completion logicDi2015NewLine            ExecuteNextJobFromQueue();                              Di2015NewLine        }Di2015NewLine
11807726Di2015UniqueSeparatorExecuteScalar
11807740Di2015UniqueSeparator    private RadioButtonEnum _radioButtonEnumDi2015NewLine    public RadioButtonEnum RadioButtonEnumDi2015NewLine    {Di2015NewLine        get { return _radioButtonEnum; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _radioButtonEnum = value;Di2015NewLine            OnPropertyChanged("RadioButtonEnum");Di2015NewLine            RefreshText();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RefreshText()Di2015NewLine    {Di2015NewLine        switch (RadioButtonEnum)Di2015NewLine        {Di2015NewLine            case None:Di2015NewLine                //Do your changes to your TextPropertyDi2015NewLine                break;Di2015NewLine            case All:Di2015NewLine                //Do your changes to your TextPropertyDi2015NewLine                break;Di2015NewLine            case One:Di2015NewLine                //Do your changes to your TextPropertyDi2015NewLine        }Di2015NewLine        OnPropertyChanged("YourTextProperty");Di2015NewLine    }Di2015NewLine
11807781Di2015UniqueSeparatorSession["tmpGrdManageFilterRoom"] = Session["grdManageFilterRoom"];Di2015NewLine
11807781Di2015UniqueSeparatorGetRooms
11807781Di2015UniqueSeparatorSession["tmpGrdManageFilterRoom"]
11807781Di2015UniqueSeparatorSession["grdManageFilterRoom"]
11807817Di2015UniqueSeparatorXMLTextReader reader = new XmlTextReader("FooBar.xml");Di2015NewLineDi2015NewLineResXResourceWriter writer = new ResXResourceWriter("FooBar.resx");Di2015NewLineDi2015NewLinewhile(reader.Read())Di2015NewLine{Di2015NewLine    if(reader.NodeType == XmlNodeType.Element && reader.Name == "string")Di2015NewLine       writer.AddResource(reader.GetAttribute("name"), reader.ReadString());Di2015NewLine}Di2015NewLineDi2015NewLinewriter.Generate();Di2015NewLinewriter.Close();Di2015NewLine
11807832Di2015UniqueSeparator:runtime
11807832Di2015UniqueSeparator:source
11807832Di2015UniqueSeparator+"source c:/path/to/visualstudioinvoke.vim"Di2015NewLine
11807832Di2015UniqueSeparator+"runtime visualstudioinvoke.vim"Di2015NewLine
11807832Di2015UniqueSeparator+cmd
11807832Di2015UniqueSeparator--remote-silent
11807832Di2015UniqueSeparator:help --remote-silent
11807832Di2015UniqueSeparator--remote-silent [+{cmd}] {file} ...Di2015NewLine
11807832Di2015UniqueSeparator+cmd
11807892Di2015UniqueSeparator    <Application /some references to stuff/ Startup="Application_Startup" >Di2015NewLineDi2015NewLine    private void Application_Startup(object sender, StartupEventArgs e)Di2015NewLine    {Di2015NewLine        // your startupcodeDi2015NewLine    }Di2015NewLine
11807949Di2015UniqueSeparatorEndEdit()
11807949Di2015UniqueSeparatorprivate void uxMappingDataGridView_Leave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    SaveGridValuesToXml();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void SaveGridValuesToXml()Di2015NewLine{   Di2015NewLine    uxMappingDataGridView.EndEdit(DataGridViewDataErrorContexts.Commit);Di2015NewLine    xmlData.DataSet.WriteXml(@"C:\\testFile.xml");Di2015NewLine}Di2015NewLine
11808103Di2015UniqueSeparator<li style="padding: 0" class="ui-btn-up-a">Di2015NewLine    @using (Html.BeginForm("Action", "Controller", FormMethod.Post, new { data_ajax = "false", @class = listButton" }))Di2015NewLine    {Di2015NewLine        @Html.AntiForgeryToken()Di2015NewLine        <input type="submit" value="Post me" />Di2015NewLine    }Di2015NewLine</li>Di2015NewLine
11808103Di2015UniqueSeparator.listButton .ui-btn {Di2015NewLine    margin: 0;Di2015NewLine    -webkit-box-shadow: none;Di2015NewLine    -moz-box-shadow: none;Di2015NewLine    box-shadow: none;Di2015NewLine    -webkit-border-radius: 0;Di2015NewLine    -moz-border-radius: 0;Di2015NewLine    border-radius: 0;Di2015NewLine    border: 0;Di2015NewLine    text-align: left;Di2015NewLine}Di2015NewLineDi2015NewLine.listButton .ui-btn-inner {Di2015NewLine    padding: 0.4em 15px;Di2015NewLine    font-size: 16px;Di2015NewLine}Di2015NewLine
11808105Di2015UniqueSeparatorcontext.Response.BinaryWrite
11808105Di2015UniqueSeparatorcontext.Response.ContentType = "image/jpeg";Di2015NewLine
11808184Di2015UniqueSeparatorusing System;Di2015NewLine
11808184Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine
11808184Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        M.Magick.Init();Di2015NewLine        M.Image img = new M.Image("file.jpg");Di2015NewLine        img.Resize(new Size(100, 100));Di2015NewLine        img.Write("newFile.png");Di2015NewLine        MagickNet.Magick.Term();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11808205Di2015UniqueSeparator    using System;Di2015NewLineusing M = MagickNet;Di2015NewLineusing System.Drawing;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            M.Magick.Init();Di2015NewLine            M.Image img = new M.Image("file.jpg");Di2015NewLine            img.Resize(new Size(100, 100));Di2015NewLine            img.Write("newFile.png");Di2015NewLine            MagickNet.Magick.Term();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11808378Di2015UniqueSeparatorPage.ClientScriptDi2015NewLine
11808429Di2015UniqueSeparatorlist.Add(10)
11808429Di2015UniqueSeparatorlist.Where
11808429Di2015UniqueSeparatorlist.Sum
11808429Di2015UniqueSeparatorWhere
11808429Di2015UniqueSeparatorList<int> list = new List<int>();Di2015NewLinelist.Add(-1);Di2015NewLinelist.Add(0);Di2015NewLinelist.Add(1);Di2015NewLinelist.Add(2);Di2015NewLinelist.Add(3);Di2015NewLinelist.Add(4);Di2015NewLine
11808429Di2015UniqueSeparatorList<int> query = new List<int>();Di2015NewLineforeach(var nr in list)Di2015NewLine{Di2015NewLine    if (nr < 3)Di2015NewLine        query.Add(nr);Di2015NewLine}Di2015NewLine
11808429Di2015UniqueSeparatorIEnumerable<int> query = list.Where(nr => nr < 3);Di2015NewLine
11808429Di2015UniqueSeparatorquery
11808429Di2015UniqueSeparatorlist
11808429Di2015UniqueSeparatorIEnumerable<int> query = from nr in listDi2015NewLine                         where nr < 3Di2015NewLine                         select nr;Di2015NewLine
11808429Di2015UniqueSeparatorWhere
11808429Di2015UniqueSeparatorIEnumerable<int>
11808429Di2015UniqueSeparatorforeach
11808433Di2015UniqueSeparator        private void richTextBox1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Button == System.Windows.Forms.MouseButtons.Right)Di2015NewLine        {Di2015NewLine            MessageBox.Show("you got it!");Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
11808512Di2015UniqueSeparator\\n
11808512Di2015UniqueSeparatorDi2015NewLine
11808512Di2015UniqueSeparator\\r
11808512Di2015UniqueSeparatorDi2015NewLine
11808512Di2015UniqueSeparator<![CDATA[]]>
11808580Di2015UniqueSeparatorOutputStream.Flush();Di2015NewLine
11808640Di2015UniqueSeparatorcon
11808675Di2015UniqueSeparator    delegate void voidDelegate();Di2015NewLineDi2015NewLine    private void treeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)Di2015NewLine    {Di2015NewLine        var tree = (TreeView)sender;Di2015NewLine        var selectedItem = tree.SelectedItem as Child;Di2015NewLine        if (selectedItem != null)Di2015NewLine        {Di2015NewLine            int selectionStart = scriptTextBox.SelectionStart;Di2015NewLine            string selectedText = selectedItem.Name;Di2015NewLine            voidDelegate giveFocusDelegate = new  voidDelegate(giveFocus);  Di2015NewLine            Dispatcher.BeginInvoke(giveFocusDelegate, new object[] { });Di2015NewLine            scriptTextBox.SelectedText = selectedText;         Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void giveFocus()Di2015NewLine    {  scriptTextBox.Focus();Di2015NewLine    }   Di2015NewLine
11808683Di2015UniqueSeparatorpublic static void ProcessObject<T>(T x)Di2015NewLine{Di2015NewLine    object o;Di2015NewLine    if (typeof(T) == typeof(int))Di2015NewLine        o = GetObject((int)(object)x);Di2015NewLine    else if (typeof(T) == typeof(string))Di2015NewLine        o = GetObject((string)(object)x);Di2015NewLine    elseDi2015NewLine        throw new Exception();Di2015NewLine    // do stuff with oDi2015NewLine}Di2015NewLine
11808683Di2015UniqueSeparatorint
11808683Di2015UniqueSeparatorstring
11808683Di2015UniqueSeparatorpublic static void ProcessObject(int x)Di2015NewLine{Di2015NewLine    ProcessObject(GetObject(x));Di2015NewLine}Di2015NewLinepublic static void ProcessObject(string x)Di2015NewLine{Di2015NewLine    ProcessObject(GetObject(x));Di2015NewLine}Di2015NewLineprivate static void ProcessObject(object o)Di2015NewLine{Di2015NewLine    // do stuff with oDi2015NewLine}Di2015NewLine
11808683Di2015UniqueSeparatorpublic
11808683Di2015UniqueSeparatorint
11808683Di2015UniqueSeparatorstring
11808683Di2015UniqueSeparator// do stuff with o
11808683Di2015UniqueSeparatorProcessObject
11808683Di2015UniqueSeparatorGetObject
11808789Di2015UniqueSeparatorActualWidth
11808789Di2015UniqueSeparatorActualHeight
11808789Di2015UniqueSeparatorLayoutUpdated
11808830Di2015UniqueSeparator<asp:DataList ID="DataList1" runat="server" DataSourceID="SqlDataSource1" onitemcommand="DataList1_ItemCommand" >Di2015NewLine        <ItemTemplate>Di2015NewLine        <asp:LinkButton ID="LinkButton1" runat="server" Text='<%# Eval("username") %>' CommandArgument='<%# Eval("username") %>' CommandName="Redirect">Di2015NewLine        </asp:LinkButton>Di2015NewLine        .....some other datalist item Di2015NewLine        </ItemTemplate>Di2015NewLine        </asp:DataList>Di2015NewLine
11808830Di2015UniqueSeparatorprotected void DataList1_ItemCommand(object source, DataListCommandEventArgs e)Di2015NewLine{Di2015NewLine    if (e.CommandName == "Redirect")Di2015NewLine    {Di2015NewLine         Session["Picked_username_from_datalist"] = e.CommandArgument;Di2015NewLine         Response.Redirect("newpage.aspx");Di2015NewLine    }Di2015NewLine}Di2015NewLine
11809000Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    UpdatePanel updatePanel = Page.Master.FindControl("UpdatePanel1") as UpdatePanel;Di2015NewLine    UpdatePanelControlTrigger trigger  = new PostBackTrigger();Di2015NewLine    trigger.ControlID = Announcement_Update.UniqueID;Di2015NewLine    updatePanel.Triggers.Add(trigger);Di2015NewLine}Di2015NewLine
11809213Di2015UniqueSeparatorB
11809213Di2015UniqueSeparatorA
11809213Di2015UniqueSeparatorB.Work()
11809213Di2015UniqueSeparatorA.Work()
11809213Di2015UniqueSeparatorB.Work()
11809213Di2015UniqueSeparatorB.Work(T)
11809213Di2015UniqueSeparatorBase.Work()
11809213Di2015UniqueSeparatorA
11809259Di2015UniqueSeparator        tryDi2015NewLine        {Di2015NewLine            // code hereDi2015NewLine        }Di2015NewLine        catch (UnauthorizedAccessException)Di2015NewLine        {Di2015NewLine            Response.Redirect(errorPageUrl, false);Di2015NewLine        }Di2015NewLine        catch (Exception)Di2015NewLine        {Di2015NewLine            Response.Redirect(loginPageUrl, false);Di2015NewLine        }Di2015NewLine
11809423Di2015UniqueSeparatorget
11809423Di2015UniqueSeparatorset
11809463Di2015UniqueSeparatorstatic class ResourceManagerDi2015NewLine{Di2015NewLine    public static string ServerFilesLocation { Di2015NewLine        get { Di2015NewLine            return String.Format(Resources.ServerFilesDirectory, Environment.CurrentDirectory);Di2015NewLine            // ServerFilesDirectory = "{0}\\\\Server Files\\\\" or something similarDi2015NewLine        } Di2015NewLine    }Di2015NewLine}Di2015NewLine
11809463Di2015UniqueSeparatorConsole.WriteLine(ResourceManager.ServerFilesLocation);
11809564Di2015UniqueSeparatorWhere
11809564Di2015UniqueSeparatorc
11809564Di2015UniqueSeparatorcw
11809564Di2015UniqueSeparatorArgumentNullException
11809564Di2015UniqueSeparatorcw == null
11809564Di2015UniqueSeparatorPersons
11809698Di2015UniqueSeparatorSystem.Convert.ToBase64String()
11809698Di2015UniqueSeparatorSystem.Convert.FromBase64String()
11809698Di2015UniqueSeparatorpublic static string EncodeTo64(string toEncode)Di2015NewLine{Di2015NewLine   byte[] toEncodeAsBytes = Encoding.ASCII.GetBytes(toEncode);Di2015NewLine   return Convert.ToBase64String(toEncodeAsBytes);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string DecodeFrom64(string encodedData)Di2015NewLine{Di2015NewLine  byte[] encodedDataAsBytes = Convert.FromBase64String(encodedData);Di2015NewLine  return Encoding.ASCII.GetString(encodedDataAsBytes);Di2015NewLine}Di2015NewLine
11809779Di2015UniqueSeparatorUser_Alias APACHE = wwwrun  Di2015NewLineCmnd_Alias SHUTDOWN = /sbin/shutdown APACHEDi2015NewLineAPACHE ALL = (ALL) NOPASSWD: SHUTDOWNDi2015NewLine
11809779Di2015UniqueSeparator/sbin/sudo
11809779Di2015UniqueSeparator/sbin/shutdown -h now
11810059Di2015UniqueSeparatorint value = 0x51f1;Di2015NewLinebyte s = (byte)(value & 0xf);Di2015NewLinebyte r = (byte)(value>>4 & 0xf);Di2015NewLinebyte q = (byte)(value>>8 & 0xf);Di2015NewLinebyte p = (byte)(value>>12 & 0xf);Di2015NewLine
11810059Di2015UniqueSeparatorint value = p<<12 | q<<8 | r<<4 | s;Di2015NewLine
11810280Di2015UniqueSeparator$xml = [xml]@'Di2015NewLine<?xml version="1.0" encoding="ISO-8859-1"?>Di2015NewLine <bookstore>Di2015NewLine     <book>Di2015NewLine       <title lang="eng">Harry Potter</title>Di2015NewLine       <price>29.99</price>Di2015NewLine     </book>Di2015NewLine     <book>Di2015NewLine       <title lang="eng">Learning XML</title>Di2015NewLine       <price>39.95</price>Di2015NewLine     </book>Di2015NewLine </bookstore> Di2015NewLine'@Di2015NewLineDi2015NewLine$xml.SelectNodes('//*') | Where {$_.ParentNode.Name -eq 'book'}Di2015NewLine
11810280Di2015UniqueSeparatorGet-Process | Foreach {$processName = $_.Name; $_.Modules} | Di2015NewLine              Foreach {"$processName loaded $($_.ModuleName)"}Di2015NewLine
11810280Di2015UniqueSeparatorGet-Process | Select Name -Exp Modules | Foreach {"$($_.Name) loaded $($_.ModuleName)"}Di2015NewLine
11810398Di2015UniqueSeparator public class Foo {Di2015NewLineDi2015NewLine   const string SOMEKEY = "_somekey";Di2015NewLineDi2015NewLine   public static string SingleRequestVariableDi2015NewLine   {Di2015NewLine      getDi2015NewLine      {Di2015NewLine          return (string)HttpContext.Current.Items[SOMEKEY];   Di2015NewLine      }Di2015NewLine      setDi2015NewLine      {Di2015NewLine          HttpContext.Current.Items.Add( SOMEKEY, value );Di2015NewLine      }Di2015NewLine   }Di2015NewLine }Di2015NewLine
11810398Di2015UniqueSeparatorFoo.SingleRequestVariable = "bar"; // somewhereDi2015NewLine...Di2015NewLinestring val = Foo.SingleRequestVariable; // yet somewhere elseDi2015NewLine
11810453Di2015UniqueSeparatorCREATE TABLE [dbo].[SSISVariables]Di2015NewLine(Di2015NewLine[Name] [varchar](50) NULL,Di2015NewLine[Value] [varchar](50) NULLDi2015NewLine)Di2015NewLine
11810453Di2015UniqueSeparatorScript task
11810453Di2015UniqueSeparator[System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]Di2015NewLinepublic partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBaseDi2015NewLine{Di2015NewLine    private static string m_connectionString = @"Data Source=Server Name;Di2015NewLine    Initial Catalog=Practice;Integrated Security=True";Di2015NewLine   public void Main()Di2015NewLine    {Di2015NewLine       List<SSISVariable> _coll = new List<SSISVariable>();Di2015NewLine        Microsoft.SqlServer.Dts.Runtime.Application app = new Microsoft.SqlServer.Dts.Runtime.Application();Di2015NewLine        Package pkg = app.LoadPackage(PackageLocation,Null);Di2015NewLine                   Variables pkgVars = pkg.Variables;Di2015NewLineDi2015NewLine        foreach (Variable pkgVar in pkgVars)Di2015NewLine        {Di2015NewLine            if (pkgVar.Namespace.ToString() == "User")Di2015NewLine            {Di2015NewLine                _coll.Add(new SSISVariable ()Di2015NewLine                {Di2015NewLine                 Name =pkgVar.Name.ToString(),Di2015NewLine                 Val =pkgVar .Value.ToString () Di2015NewLine                });Di2015NewLine           }Di2015NewLine        }Di2015NewLine        InsertIntoTable(_coll);Di2015NewLine        Dts.TaskResult = (int)ScriptResults.Success;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void InsertIntoTable(List<SSISVariable> _collDetails)Di2015NewLine    {  Di2015NewLine       using (SqlConnection conn = new SqlConnection(m_connectionString))Di2015NewLine        {Di2015NewLine            conn.Open();Di2015NewLine            foreach (var item in _collDetails )Di2015NewLine            {Di2015NewLine             SqlCommand command = new SqlCommand("Insert into SSISVariables values (@name,@value)", conn);Di2015NewLine             command.Parameters.Add("@name", SqlDbType.VarChar).Value = item.Name ;Di2015NewLineDi2015NewLine             command.Parameters.Add("@value", SqlDbType.VarChar).Value = item.Val ;Di2015NewLine             command.ExecuteNonQuery();    Di2015NewLine            }Di2015NewLine        }Di2015NewLine     }Di2015NewLine  }Di2015NewLineDi2015NewLine   public class SSISVariableDi2015NewLine   {Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Val { get; set; }Di2015NewLine   }Di2015NewLine
11810453Di2015UniqueSeparatorList<SSISVariable>
11810453Di2015UniqueSeparatorInsertIntoTable
11810453Di2015UniqueSeparatorThere is a performance issue with the above code ,as for every variable Di2015NewLineim hitting the database and inserting the value.You can useDi2015NewLine[TVP][1]( SQL Server 2008)   or stored procedure which takesDi2015NewLine xml( sql server 2005) as input. Di2015NewLine
11810453Di2015UniqueSeparatorVariableCollection
11810453Di2015UniqueSeparatorSystem.Object
11810453Di2015UniqueSeparatorItem
11810453Di2015UniqueSeparatorString
11810453Di2015UniqueSeparatorVariableCollection
11810453Di2015UniqueSeparatorMain Method
11810453Di2015UniqueSeparator  public void Main()Di2015NewLine   {Di2015NewLine     ArrayList _coll = new ArrayList(); Di2015NewLineDi2015NewLine        Microsoft.SqlServer.Dts.Runtime.Application app = new Microsoft.SqlServer.Dts.Runtime.Application();Di2015NewLine        Package pkg = app.LoadPackage(Your Package Location,null);Di2015NewLineDi2015NewLine        Variables pkgVars = pkg.Variables;Di2015NewLine        foreach (Variable pkgVar in pkgVars)Di2015NewLine        {Di2015NewLine            if (pkgVar.Namespace.ToString() == "User")Di2015NewLine            {Di2015NewLine                _coll.Add(string.Concat ( pkgVar.Name,',',pkgVar.Value ));Di2015NewLine            }Di2015NewLine        }Di2015NewLine        Dts.Variables["User::VariableCollection"].Value = _coll;Di2015NewLine        // TODO: Add your code hereDi2015NewLine        Dts.TaskResult = (int)ScriptResults.Success;Di2015NewLine    }Di2015NewLine
11810453Di2015UniqueSeparatorForeach from Variable Enumerator
11810453Di2015UniqueSeparatorUser::Item
11810453Di2015UniqueSeparatorreadonly variables   User::Item Di2015NewLine
11810453Di2015UniqueSeparator   public void Main()Di2015NewLine    {Di2015NewLine      string name = string.Empty;Di2015NewLine      string[] variableCollection;Di2015NewLine      variableCollection = Dts.Variables["User::Item"].Value.ToString().Split(',');Di2015NewLine      using (SqlConnection conn = new SqlConnection(m_connectionString))Di2015NewLine        {Di2015NewLine            conn.Open();Di2015NewLine            SqlCommand command = new SqlCommand("Insert into SSISVariables values (@name,@value)", conn);Di2015NewLine            command.Parameters.Add("@name", SqlDbType.VarChar).Value = variableCollection[0];Di2015NewLineDi2015NewLine            command.Parameters.Add("@value", SqlDbType.VarChar).Value = variableCollection[1];Di2015NewLineDi2015NewLine            command.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine        // TODO: Add your code hereDi2015NewLine        Dts.TaskResult = (int)ScriptResults.Success;Di2015NewLine    }Di2015NewLine
11810453Di2015UniqueSeparator string.Concat ( pkgVar.Name,',',pkgVar.Value )Di2015NewLine
11810504Di2015UniqueSeparatorKeyCode
11810504Di2015UniqueSeparatorControl
11810504Di2015UniqueSeparatorif(e.KeyCode == Keys.C && e.Control) {Di2015NewLine    MessageBox.Show("NOT ALLOWED");Di2015NewLine}Di2015NewLine
11810504Di2015UniqueSeparatore.SuppressKeyPress = true;Di2015NewLine
11810504Di2015UniqueSeparatorClipboard.Clear();Di2015NewLine
11810646Di2015UniqueSeparatorAccessToCsvFileVerificationInputs
11810646Di2015UniqueSeparatorpublic class CsvFilePresenterDi2015NewLine{Di2015NewLine    private ICsvFileView view_;Di2015NewLine    public CsvFilePresenter(ICsvFileView view)Di2015NewLine    {Di2015NewLine        view_ = view;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AccessToCsvFileVerificationInputs(bool access)Di2015NewLine    {Di2015NewLine        // Code omitted for brevityDi2015NewLine    }Di2015NewLine}Di2015NewLine
11810646Di2015UniqueSeparatorpublic void AccessToCsvFileVerificationInputs(bool access)Di2015NewLine{Di2015NewLine    view_.EnableSelectCSVFilePath = access;Di2015NewLine    view_.EnableNumberOfColumns = access;Di2015NewLine    view_.EnableCurrencyPair = access;Di2015NewLineDi2015NewLine    // And so on...Di2015NewLine}Di2015NewLine
11810646Di2015UniqueSeparatorpublic interface ICsvFileView Di2015NewLine{Di2015NewLine    bool EnableSelectCSVFilePath { get; set; }Di2015NewLine    bool EnableNumberOfColumns { get; set; }Di2015NewLine    bool EnableCurrencyPair { get; set; }        Di2015NewLine}Di2015NewLine
11810646Di2015UniqueSeparatorpublic partial class Form3 : Form, ICsvFileViewDi2015NewLine{Di2015NewLine    public Form3()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    bool ICsvFileView.EnableSelectCSVFilePathDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return btnSelectCsvFilePath.Enabled;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            btnSelectCsvFilePath.Enabled = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    bool ICsvFileView.EnableNumberOfColumnsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return nudNumberOfColumns.Enabled;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            nudNumberOfColumns.Enabled = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    bool ICsvFileView.EnableCurrencyPairDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return cbCurrencyPair.Enabled;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            cbCurrencyPair.Enabled = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11810809Di2015UniqueSeparatorFieldInfo[] fields = this.GetType().GetFields(); //if you're using private fields use GetFields(BindingFlags.NonPublic)Di2015NewLineforeach(FieldInfo f in fields){Di2015NewLine     if(f.FieldType == typeof(ApiParameter)){Di2015NewLine        f.SetValue(this, new ApiParameter());Di2015NewLine     }Di2015NewLine}Di2015NewLine
11810852Di2015UniqueSeparatorforeach
11810852Di2015UniqueSeparatorforeach
11810852Di2015UniqueSeparatorfor (int i = 0; i < array.GetLength(0); i++)Di2015NewLine{Di2015NewLine    for (int j = 0; j < array.GetLength(1); j++)Di2015NewLine    {Di2015NewLine        array[i, j] = new Item();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11810852Di2015UniqueSeparatorItem[,]
11810852Di2015UniqueSeparatorItem[][]
11810852Di2015UniqueSeparatorforeach
11810852Di2015UniqueSeparatorforeach (var subarray in array)Di2015NewLine{Di2015NewLine    for (int i = 0; i < subarray.Length; i++)Di2015NewLine    {Di2015NewLine        subarray[i] = new Item();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11811043Di2015UniqueSeparatorvar distinctEvents = (from event in db.eventsDi2015NewLine               join reading in db.readings on event.readingID equals reading.readingIDDi2015NewLine               where reading.bookID == 286Di2015NewLine               select event).Distinct();Di2015NewLine               // if you want to see this bookID is present in Book table, you should add a join statement like "join book in db.books on reading.bookID == book.bookID"Di2015NewLinevar custIdList = from c in db.customersDi2015NewLine                 from event in distinctsEventsDi2015NewLine                 where c.customerID == event.inID || c.customerID == be.outIDDi2015NewLine                 select c.customerID;Di2015NewLineDi2015NewLinereturn custIdList.ToList();Di2015NewLine
11811050Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    Loaded += MainWindow_Loaded;Di2015NewLine}Di2015NewLineDi2015NewLinevoid MainWindow_Loaded( object sender, RoutedEventArgs e )Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
11811068Di2015UniqueSeparator// Download the bitmap data using an instance of WebClient class.Di2015NewLineusing (WebClient webClient = new WebClient())Di2015NewLine{Di2015NewLine    foreach (var url in urls)Di2015NewLine    {Di2015NewLine        byte[] bitmapData;Di2015NewLine        bitmapData = webClient.DownloadData(url);Di2015NewLineDi2015NewLine        // Bitmap data => bitmap => resized bitmap.            Di2015NewLine        using (MemoryStream memoryStream = new MemoryStream(bitmapData))Di2015NewLine        using (Bitmap bitmap = new Bitmap(memoryStream))Di2015NewLine        using (Bitmap resizedBitmap = new Bitmap(bitmap, 50, 50))Di2015NewLine        {Di2015NewLine            // NOTE:Di2015NewLine            // Resized bitmap must be disposed because the imageList.Images.Add() methodDi2015NewLine            // makes a copy (!) of the source bitmap!Di2015NewLine            // For details, see http://stackoverflow.com/questions/9515759/                Di2015NewLine            imageList.Images.Add(resizedBitmap);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11811068Di2015UniqueSeparatorWebClient
11811129Di2015UniqueSeparatorDistinctBy
11811129Di2015UniqueSeparatormessages = messages.DistinctBy(m => new { m.id, m.date }).ToList();Di2015NewLine
11811161Di2015UniqueSeparatorprotected void btnLoad_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  rgCustomers.DataSource = odsCustomers;Di2015NewLine  rgCustomers.DataBind();Di2015NewLine  foreach (GridDataItem row in rgCustomers.Items)Di2015NewLine  {Di2015NewLine  }Di2015NewLine}Di2015NewLine
11811174Di2015UniqueSeparatorStride
11811174Di2015UniqueSeparatorStride
11811224Di2015UniqueSeparatorButtons
11811224Di2015UniqueSeparatorpublic interface IHasButtonsDi2015NewLine{Di2015NewLine  public IEnumerable<ButtonViewModel>  Buttons {get; set;}Di2015NewLine}Di2015NewLine
11811224Di2015UniqueSeparatorpublic class CamerasViewModel : IHasButtonsDi2015NewLine{Di2015NewLine  public IEnumerable<ButtonViewModel> Buttons {get {. . .} set {. . .} }Di2015NewLine  . . .Di2015NewLine}Di2015NewLine
11811302Di2015UniqueSeparator/// <summary>Di2015NewLine/// A class that manages a global low level keyboard hookDi2015NewLine/// </summary>Di2015NewLineclass GlobalKeyboardHookDi2015NewLine{Di2015NewLine    #region Constant, Structure and Delegate DefinitionsDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// defines the callback type for the hookDi2015NewLine    /// </summary>Di2015NewLine    public delegate int KeyboardHookProc(int code, int wParam, ref KeyboardHookStruct lParam);Di2015NewLineDi2015NewLine    public struct KeyboardHookStructDi2015NewLine    {Di2015NewLine        public int vkCode;Di2015NewLine        public int scanCode;Di2015NewLine        public int flags;Di2015NewLine        public int time;Di2015NewLine        public int dwExtraInfo;Di2015NewLine    }Di2015NewLineDi2015NewLine    private const int WH_KEYBOARD_LL = 13;Di2015NewLine    private const int WM_KEYDOWN = 0x100;Di2015NewLine    private const int WM_KEYUP = 0x101;Di2015NewLine    private const int WM_SYSKEYDOWN = 0x104;Di2015NewLine    private const int WM_SYSKEYUP = 0x105;Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// The collections of keys to watch forDi2015NewLine    /// </summary>Di2015NewLine    public List<Keys> HookedKeys = new List<Keys>();Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Handle to the hook, need this to unhook and call the next hookDi2015NewLine    /// </summary>Di2015NewLine    private IntPtr _hhook = IntPtr.Zero;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="GlobalKeyboardHook"/> class and installs the keyboard hook.Di2015NewLine    /// </summary>Di2015NewLine    public GlobalKeyboardHook()Di2015NewLine    {Di2015NewLine        this.Hook();Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Releases unmanaged resources and performs other cleanup operations before theDi2015NewLine    /// <see cref="GlobalKeyboardHook"/> is reclaimed by garbage collection and uninstalls the keyboard hook.Di2015NewLine    /// </summary>Di2015NewLine    ~GlobalKeyboardHook()Di2015NewLine    {Di2015NewLine        this.Unhook();Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Installs the global hookDi2015NewLine    /// </summary>Di2015NewLine    public void Hook()Di2015NewLine    {Di2015NewLine        IntPtr hInstance = LoadLibrary("User32");Di2015NewLine        this._hhook = SetWindowsHookEx(WH_KEYBOARD_LL, this.HookProc, hInstance, 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Uninstalls the global hookDi2015NewLine    /// </summary>Di2015NewLine    public void Unhook()Di2015NewLine    {Di2015NewLine        UnhookWindowsHookEx(this._hhook);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// The callback for the keyboard hookDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="code">The hook code, if it isn't >= 0, the function shouldn't do anyting</param>Di2015NewLine    /// <param name="wParam">The event type</param>Di2015NewLine    /// <param name="lParam">The keyhook event information</param>Di2015NewLine    /// <returns></returns>Di2015NewLine    private int HookProc(int code, int wParam, ref KeyboardHookStruct lParam)Di2015NewLine    {Di2015NewLine        if (code >= 0)Di2015NewLine        {Di2015NewLine            var key = (Keys) lParam.vkCode;Di2015NewLineDi2015NewLine            if (this.HookedKeys.Contains(key))Di2015NewLine            {Di2015NewLine                var handler = this.KeyPressed;Di2015NewLineDi2015NewLine                if ((wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) && (handler != null))Di2015NewLine                {Di2015NewLine                    ModifierKeys mods = 0;Di2015NewLineDi2015NewLine                    if (Keyboard.IsKeyDown(Keys.Control) || Keyboard.IsKeyDown(Keys.ControlKey) ||Di2015NewLine                        Keyboard.IsKeyDown(Keys.LControlKey) || Keyboard.IsKeyDown(Keys.RControlKey))Di2015NewLine                    {Di2015NewLine                        mods |= ModifierKeys.Control;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (Keyboard.IsKeyDown(Keys.Shift) || Keyboard.IsKeyDown(Keys.ShiftKey) ||Di2015NewLine                        Keyboard.IsKeyDown(Keys.LShiftKey) || Keyboard.IsKeyDown(Keys.RShiftKey))Di2015NewLine                    {Di2015NewLine                        mods |= ModifierKeys.Shift;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (Keyboard.IsKeyDown(Keys.LWin) || Keyboard.IsKeyDown(Keys.RWin))Di2015NewLine                    {Di2015NewLine                        mods |= ModifierKeys.Win;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (Keyboard.IsKeyDown(Keys.Alt))Di2015NewLine                    {Di2015NewLine                        mods |= ModifierKeys.Alt;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    handler(this, new KeyPressedEventArgs(mods, key));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return CallNextHookEx(this._hhook, code, wParam, ref lParam);Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler<KeyPressedEventArgs> KeyPressed;Di2015NewLineDi2015NewLine    #region DLL importsDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Sets the windows hook, do the desired event, one of hInstance or threadId must be non-nullDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="idHook">The id of the event you want to hook</param>Di2015NewLine    /// <param name="callback">The callback.</param>Di2015NewLine    /// <param name="hInstance">The handle you want to attach the event to, can be null</param>Di2015NewLine    /// <param name="threadId">The thread you want to attach the event to, can be null</param>Di2015NewLine    /// <returns>a handle to the desired hook</returns>Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern IntPtr SetWindowsHookEx(int idHook, KeyboardHookProc callback, IntPtr hInstance, uint threadId);Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Unhooks the windows hook.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="hInstance">The hook handle that was returned from SetWindowsHookEx</param>Di2015NewLine    /// <returns>True if successful, false otherwise</returns>Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern bool UnhookWindowsHookEx(IntPtr hInstance);Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Calls the next hook.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="idHook">The hook id</param>Di2015NewLine    /// <param name="nCode">The hook code</param>Di2015NewLine    /// <param name="wParam">The wparam.</param>Di2015NewLine    /// <param name="lParam">The lparam.</param>Di2015NewLine    /// <returns></returns>Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern int CallNextHookEx(IntPtr idHook, int nCode, int wParam, ref KeyboardHookStruct lParam);Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Loads the library.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="lpFileName">Name of the library</param>Di2015NewLine    /// <returns>A handle to the library</returns>Di2015NewLine    [DllImport("kernel32.dll")]Di2015NewLine    private static extern IntPtr LoadLibrary(string lpFileName);Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinestatic class KeyboardDi2015NewLine{Di2015NewLine    [Flags]Di2015NewLine    private enum KeyStatesDi2015NewLine    {Di2015NewLine        None = 0,Di2015NewLine        Down = 1,Di2015NewLine        Toggled = 2Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]Di2015NewLine    private static extern short GetKeyState(int keyCode);Di2015NewLineDi2015NewLine    private static KeyStates GetKeyState(Keys key)Di2015NewLine    {Di2015NewLine        KeyStates state = KeyStates.None;Di2015NewLineDi2015NewLine        short retVal = GetKeyState((int)key);Di2015NewLineDi2015NewLine        //If the high-order bit is 1, the key is downDi2015NewLine        //otherwise, it is up.Di2015NewLine        if ((retVal & 0x8000) == 0x8000)Di2015NewLine            state |= KeyStates.Down;Di2015NewLineDi2015NewLine        //If the low-order bit is 1, the key is toggled.Di2015NewLine        if ((retVal & 1) == 1)Di2015NewLine            state |= KeyStates.Toggled;Di2015NewLineDi2015NewLine        return state;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IsKeyDown(Keys key)Di2015NewLine    {Di2015NewLine        return KeyStates.Down == (GetKeyState(key) & KeyStates.Down);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IsKeyToggled(Keys key)Di2015NewLine    {Di2015NewLine        return KeyStates.Toggled == (GetKeyState(key) & KeyStates.Toggled);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Event Args for the event that is fired after the hot key has been pressed.Di2015NewLine/// </summary>Di2015NewLineclass KeyPressedEventArgs : EventArgsDi2015NewLine{Di2015NewLine    internal KeyPressedEventArgs(ModifierKeys modifier, Keys key)Di2015NewLine    {Di2015NewLine        this.Modifier = modifier;Di2015NewLine        this.Key = key;Di2015NewLineDi2015NewLine        this.Ctrl = (modifier & ModifierKeys.Control) != 0;Di2015NewLine        this.Shift = (modifier & ModifierKeys.Shift) != 0;Di2015NewLine        this.Win = (modifier & ModifierKeys.Win) != 0;Di2015NewLine        this.Alt = (modifier & ModifierKeys.Alt) != 0;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ModifierKeys Modifier { get; private set; }Di2015NewLine    public Keys Key { get; private set; }Di2015NewLine    public readonly bool Ctrl;Di2015NewLine    public readonly bool Shift;Di2015NewLine    public readonly bool Win;Di2015NewLine    public readonly bool Alt;Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// The enumeration of possible modifiers.Di2015NewLine/// </summary>Di2015NewLine[Flags]Di2015NewLinepublic enum ModifierKeys : uintDi2015NewLine{Di2015NewLine    Alt = 1,Di2015NewLine    Control = 2,Di2015NewLine    Shift = 4,Di2015NewLine    Win = 8Di2015NewLine}Di2015NewLine
11811321Di2015UniqueSeparator<input />
11811321Di2015UniqueSeparatormethod='get'
11811321Di2015UniqueSeparator<form action='xyz.aspx' method='get'>Di2015NewLine  <input type='hidden' name='site' value='google' />Di2015NewLine  <input type='hidden' name='code' value='123' />Di2015NewLine  <input type='text' name='name1' />Di2015NewLine  <input type='submit' value='submit' />Di2015NewLine</form>Di2015NewLine
11811383Di2015UniqueSeparatordocument.getElementById('<%= hdnExecuteAfterConfirm.ClientID %>').value = "1";  Di2015NewLinedocument.getElementById('<%= btnGuardarEvento.ClientID %>').click();Di2015NewLine
11811383Di2015UniqueSeparatorhdnExecuteAfterConfirm
11811474Di2015UniqueSeparatorprivate void ShowForm2()Di2015NewLine{Di2015NewLine    string value = TheTextBox.Text;Di2015NewLine    Form2 newForm = new Form2();Di2015NewLine    newForm.TheValue = value;Di2015NewLine    newForm.ShowDialog();Di2015NewLine}Di2015NewLine
11811474Di2015UniqueSeparatorprivate string _theValue;Di2015NewLinepublic string TheValue Di2015NewLine{ Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return _theValue;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _theValue = value; Di2015NewLine        // do something with _theValue so that itDi2015NewLine        // appears in the UIDi2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
11811501Di2015UniqueSeparatorTemplate
11811501Di2015UniqueSeparatorItemsControls
11811501Di2015UniqueSeparatorContentPresenters
11811501Di2015UniqueSeparatorTemplate
11811501Di2015UniqueSeparatorItemsControl
11811501Di2015UniqueSeparatorContentControl
11811501Di2015UniqueSeparatorItemsControl.ItemContainerStyle
11811501Di2015UniqueSeparatorTemplate
11811524Di2015UniqueSeparatorSystem.Threading.Timer
11811524Di2015UniqueSeparatorBeginInvoke
11811524Di2015UniqueSeparatorpublic class MyForm : FormDi2015NewLine{Di2015NewLine    private System.Threading.Timer gpuUpdateTimer;Di2015NewLine    private System.Threading.Timer cpuUpdateTimer;Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine        base.OnLoad(e);Di2015NewLineDi2015NewLine        if (!DesignMode)Di2015NewLine        {Di2015NewLine            gpuUpdateTimer = new System.Threading.Timer(UpdateGpuView, null, 0, 1000);Di2015NewLine            cpuUpdateTimer = new System.Threading.Timer(UpdateCpuView, null, 0, 100);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string GpuTextDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (InvokeRequired)Di2015NewLine            {Di2015NewLine                BeginInvoke(new Action(() => gpuLabel.Text = value), null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string TemperatureLabelDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (InvokeRequired)Di2015NewLine            {Di2015NewLine                BeginInvoke(new Action(() => temperatureLabel.Text = value), null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void UpdateCpuView(object state)Di2015NewLine    {Di2015NewLine        // do your stuff hereDi2015NewLine        // Di2015NewLine        // do not access control directly, use BeginInvoke!Di2015NewLine        TemperatureLabel = sensor.Value.ToString() + "c" // whateverDi2015NewLine    }Di2015NewLineDi2015NewLine    private void UpdateGpuView(object state)Di2015NewLine    {Di2015NewLine        // do your stuff hereDi2015NewLine        // Di2015NewLine        // do not access control directly, use BeginInvoke!Di2015NewLine        GpuText = sensor.Value.ToString() + "c";  // whateverDi2015NewLine    }Di2015NewLineDi2015NewLine    protected override void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (disposing)Di2015NewLine        {Di2015NewLine            if (cpuTimer != null)Di2015NewLine            {Di2015NewLine                cpuTimer.Dispose();Di2015NewLine            }Di2015NewLine            if (gpuTimer != null)Di2015NewLine            {Di2015NewLine                gpuTimer.Dispose();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        base.Dispose(disposing);Di2015NewLine    }Di2015NewLine
11811881Di2015UniqueSeparatorGSerjo
11811881Di2015UniqueSeparatorProcesses
11811881Di2015UniqueSeparatorDebug
11811881Di2015UniqueSeparatorDebug > Attach to Process...
11811881Di2015UniqueSeparatorusing System
11811881Di2015UniqueSeparatorMain
11811881Di2015UniqueSeparatorSTAThreadAttribute
11811881Di2015UniqueSeparatorIOleMessageFilter
11811881Di2015UniqueSeparatorComImportAttribute
11811881Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine[ComImport, Guid("00000016-0000-0000-C000-000000000046"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]Di2015NewLinepublic interface IOleMessageFilterDi2015NewLine{Di2015NewLine    [PreserveSig]Di2015NewLine    int HandleInComingCall(int dwCallType, IntPtr hTaskCaller, int dwTickCount, IntPtr lpInterfaceInfo);Di2015NewLineDi2015NewLine    [PreserveSig]Di2015NewLine    int RetryRejectedCall(IntPtr hTaskCallee, int dwTickCount, int dwRejectType);Di2015NewLineDi2015NewLine    [PreserveSig]Di2015NewLine    int MessagePending(IntPtr hTaskCallee, int dwTickCount, int dwPendingType);Di2015NewLine}Di2015NewLine
11811881Di2015UniqueSeparatorpublic class MessageFilter : IOleMessageFilterDi2015NewLine{Di2015NewLine    private const int Handled = 0, RetryAllowed = 2, Retry = 99, Cancel = -1, WaitAndDispatch = 2;Di2015NewLineDi2015NewLine    int IOleMessageFilter.HandleInComingCall(int dwCallType, IntPtr hTaskCaller, int dwTickCount, IntPtr lpInterfaceInfo)Di2015NewLine    {Di2015NewLine        return Handled;Di2015NewLine    }Di2015NewLineDi2015NewLine    int IOleMessageFilter.RetryRejectedCall(IntPtr hTaskCallee, int dwTickCount, int dwRejectType)Di2015NewLine    {Di2015NewLine        return dwRejectType == RetryAllowed ? Retry : Cancel;Di2015NewLine    }Di2015NewLineDi2015NewLine    int IOleMessageFilter.MessagePending(IntPtr hTaskCallee, int dwTickCount, int dwPendingType)Di2015NewLine    {Di2015NewLine        return WaitAndDispatch;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Register()Di2015NewLine    {Di2015NewLine        CoRegisterMessageFilter(new MessageFilter());Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Revoke()Di2015NewLine    {Di2015NewLine        CoRegisterMessageFilter(null);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void CoRegisterMessageFilter(IOleMessageFilter newFilter)Di2015NewLine    {Di2015NewLine        IOleMessageFilter oldFilter;Di2015NewLine        CoRegisterMessageFilter(newFilter, out oldFilter);Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("Ole32.dll")]Di2015NewLine    private static extern int CoRegisterMessageFilter(IOleMessageFilter newFilter, out IOleMessageFilter oldFilter);Di2015NewLine}Di2015NewLine
11811881Di2015UniqueSeparatorextern int CoRegisterMessageFilter
11811881Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineusing EnvDTE;Di2015NewLineDi2015NewLine[STAThread]Di2015NewLinepublic static void Main()Di2015NewLine{Di2015NewLine    MessageFilter.Register();Di2015NewLine    var process = GetProcess(7532);Di2015NewLine    if (process != null)Di2015NewLine    {Di2015NewLine        process.Attach();Di2015NewLine        Console.WriteLine("Attached to {0}", process.Name);Di2015NewLine    }Di2015NewLine    MessageFilter.Revoke();Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static Process GetProcess(int processID)Di2015NewLine{Di2015NewLine    var dte = (DTE)Marshal.GetActiveObject("VisualStudio.DTE.10.0");Di2015NewLine    var processes = dte.Debugger.LocalProcesses.OfType<Process>();Di2015NewLine    return processes.SingleOrDefault(x => x.ProcessID == processID);Di2015NewLine}Di2015NewLine
11811924Di2015UniqueSeparatorFileSystemWatcher
11812125Di2015UniqueSeparator//File1.csDi2015NewLineusing System;Di2015NewLinenamespace Outer.InnerDi2015NewLine{Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        static void Bar()Di2015NewLine        {Di2015NewLine                double d = Math.PI;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// File2.csDi2015NewLinenamespace OuterDi2015NewLine{Di2015NewLine    class MathDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
11812125Di2015UniqueSeparatorMath
11812125Di2015UniqueSeparatorOuter
11812125Di2015UniqueSeparatorSystem
11812125Di2015UniqueSeparatorMath
11812125Di2015UniqueSeparatorPI
11812125Di2015UniqueSeparatorusing System
11812125Di2015UniqueSeparatorMath
11812224Di2015UniqueSeparatorif(planet.ID == 0) Di2015NewLine{ if (planet.Bounds.Contains((int)tl.Position.X, (int)tl.Position.Y)) { changeScreenDelegate(ScreenState.Menu); } }
11812304Di2015UniqueSeparatorSPView yourView = CurrentList.Views[UserView];Di2015NewLineyourView.DefaultView = true;Di2015NewLineyourView.Update();Di2015NewLine
11812372Di2015UniqueSeparator[SqlFunction(FillRowMethodName = "FillRow3")]Di2015NewLinepublic static IEnumerable GetCsv(string csv)Di2015NewLine{Di2015NewLine    string[] arr = csv.Split(',');Di2015NewLine    return arr.Select((x, i) => Tuple.Create(x, i));Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void FillRow3(Object obj, out string val, out int index)Di2015NewLine{Di2015NewLine    var input = (Tuple<string, int>)obj);Di2015NewLine    val = input.Item1;Di2015NewLine    index = input.Item2;Di2015NewLine}Di2015NewLine
11812434Di2015UniqueSeparatorCoreWindow.GetForCurrentThread().KeyDown += Window_KeyDown;Di2015NewLine
11812491Di2015UniqueSeparatore.SuppressKeyPress = true;
11812491Di2015UniqueSeparatorif
11812491Di2015UniqueSeparatorprivate void input_KeyUp(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyData == Keys.Enter)Di2015NewLine    { Di2015NewLine        e.SuppressKeyPress = true;Di2015NewLine        if ((input.Text.ToUpper() == "FURNACE" || input.Text.ToUpper() == "COAL") && count == 3)Di2015NewLine        {Di2015NewLine            end3();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show("Unknown key");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11812512Di2015UniqueSeparator     string[] stopsWords = new string[] { "stop", "break", .... };Di2015NewLine     for (int i = 0; i < stopWords.Length; i++) if (textBox.Text.ToLower() == stopWords[i])Di2015NewLine     {Di2015NewLine          // do what everDi2015NewLine     } Di2015NewLine
11812551Di2015UniqueSeparatorprivate void ExportDataSet(DataSet ds, string destination)Di2015NewLine        {Di2015NewLine            using (var workbook = SpreadsheetDocument.Create(destination, DocumentFormat.OpenXml.SpreadsheetDocumentType.Workbook))Di2015NewLine            {Di2015NewLine                var workbookPart = workbook.AddWorkbookPart();Di2015NewLineDi2015NewLine                workbook.WorkbookPart.Workbook = new DocumentFormat.OpenXml.Spreadsheet.Workbook();Di2015NewLineDi2015NewLine                workbook.WorkbookPart.Workbook.Sheets = new DocumentFormat.OpenXml.Spreadsheet.Sheets();Di2015NewLineDi2015NewLine                foreach (System.Data.DataTable table in ds.Tables) {Di2015NewLineDi2015NewLine                    var sheetPart = workbook.WorkbookPart.AddNewPart<WorksheetPart>();Di2015NewLine                    var sheetData = new DocumentFormat.OpenXml.Spreadsheet.SheetData();Di2015NewLine                    sheetPart.Worksheet = new DocumentFormat.OpenXml.Spreadsheet.Worksheet(sheetData);Di2015NewLineDi2015NewLine                    DocumentFormat.OpenXml.Spreadsheet.Sheets sheets = workbook.WorkbookPart.Workbook.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.Sheets>();Di2015NewLine                    string relationshipId = workbook.WorkbookPart.GetIdOfPart(sheetPart);Di2015NewLineDi2015NewLine                    uint sheetId = 1;Di2015NewLine                    if (sheets.Elements<DocumentFormat.OpenXml.Spreadsheet.Sheet>().Count() > 0)Di2015NewLine                    {Di2015NewLine                        sheetId =Di2015NewLine                            sheets.Elements<DocumentFormat.OpenXml.Spreadsheet.Sheet>().Select(s => s.SheetId.Value).Max() + 1;Di2015NewLine                    }Di2015NewLineDi2015NewLine                    DocumentFormat.OpenXml.Spreadsheet.Sheet sheet = new DocumentFormat.OpenXml.Spreadsheet.Sheet() { Id = relationshipId, SheetId = sheetId, Name = table.TableName };Di2015NewLine                    sheets.Append(sheet);Di2015NewLineDi2015NewLine                    DocumentFormat.OpenXml.Spreadsheet.Row headerRow = new DocumentFormat.OpenXml.Spreadsheet.Row();Di2015NewLineDi2015NewLine                    List<String> columns = new List<string>();Di2015NewLine                    foreach (System.Data.DataColumn column in table.Columns) {Di2015NewLine                        columns.Add(column.ColumnName);Di2015NewLineDi2015NewLine                        DocumentFormat.OpenXml.Spreadsheet.Cell cell = new DocumentFormat.OpenXml.Spreadsheet.Cell();Di2015NewLine                        cell.DataType = DocumentFormat.OpenXml.Spreadsheet.CellValues.String;Di2015NewLine                        cell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(column.ColumnName);Di2015NewLine                        headerRow.AppendChild(cell);Di2015NewLine                    }Di2015NewLineDi2015NewLineDi2015NewLine                    sheetData.AppendChild(headerRow);Di2015NewLineDi2015NewLine                    foreach (System.Data.DataRow dsrow in table.Rows)Di2015NewLine                    {Di2015NewLine                        DocumentFormat.OpenXml.Spreadsheet.Row newRow = new DocumentFormat.OpenXml.Spreadsheet.Row();Di2015NewLine                        foreach (String col in columns)Di2015NewLine                        {Di2015NewLine                            DocumentFormat.OpenXml.Spreadsheet.Cell cell = new DocumentFormat.OpenXml.Spreadsheet.Cell();Di2015NewLine                            cell.DataType = DocumentFormat.OpenXml.Spreadsheet.CellValues.String;Di2015NewLine                            cell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(dsrow[col].ToString()); //Di2015NewLine                            newRow.AppendChild(cell);Di2015NewLine                        }Di2015NewLineDi2015NewLine                        sheetData.AppendChild(newRow);Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
11812675Di2015UniqueSeparatorglobal.asax
11812675Di2015UniqueSeparatorQuartz.dll
11812675Di2015UniqueSeparator    protected void Application_Start()Di2015NewLine    {Di2015NewLine        /*Di2015NewLine         * Include other Application_Start() code...Di2015NewLine         */Di2015NewLineDi2015NewLine        //Job SchedulingDi2015NewLine        try {Di2015NewLine            //Setup the new SchedulerDi2015NewLine            var sf = new StdSchedulerFactory();Di2015NewLine            var sched = sf.GetScheduler();Di2015NewLine            sched.Start();Di2015NewLineDi2015NewLine            //Setup the JobDi2015NewLine            var jobDetail = new JobDetailImpl( "myJob", null, typeof( DocCleanup ) );Di2015NewLineDi2015NewLine            //Create 1 week trigger that will go on foreverDi2015NewLine            var trigger = new SimpleTriggerImpl( "jobTrigger", SimpleTriggerImpl.RepeatIndefinitely, new TimeSpan( 168, 0, 0 ) );Di2015NewLine            trigger.StartTimeUtc = DateTimeOffset.Now;Di2015NewLineDi2015NewLine            //Add the job to the schedulerDi2015NewLine            sched.ScheduleJob( jobDetail, trigger );Di2015NewLine        } catch (Exception ex) { //Implement Exception code... }Di2015NewLine    }Di2015NewLine
11812688Di2015UniqueSeparatorSaveChanges Method
11812688Di2015UniqueSeparatorSaveOptions
11812688Di2015UniqueSeparatorDetectChangesBeforeSave
11812688Di2015UniqueSeparatordb.Entities.SaveChanges(SaveOptions.DetectChangesBeforeSave);Di2015NewLine
11812748Di2015UniqueSeparatorDISTINCT
11812748Di2015UniqueSeparator"INSERT INTO categories (profile_id, name)Di2015NewLine SELECT DISTINCT '"+profileId.ToString()+"', IFNULL(category, 'Uncategorized')Di2015NewLine FROM   productsDi2015NewLine WHERE  category_name NOT IN (Di2015NewLine          SELECT name FROM categories WHERE profile_id = "'+profileId.ToString()+"'Di2015NewLine        )Di2015NewLine"Di2015NewLine
11812748Di2015UniqueSeparatorprofileId.ToString()
11812791Di2015UniqueSeparatorHTTP POST
11812791Di2015UniqueSeparatorHTTP GET
11812791Di2015UniqueSeparator$('#postLink').click(function() {Di2015NewLine    var MyPerson = {Di2015NewLine        ID: 1234,Di2015NewLine        FirstName: 'abc',Di2015NewLine        LastName: 'def'Di2015NewLine    };Di2015NewLineDi2015NewLine    $.ajax({Di2015NewLine        data: MyPerson,Di2015NewLine        url: $(this).attr('href'),Di2015NewLine        type: 'POST',Di2015NewLine        dataType: 'json' /* this really is optional */,Di2015NewLine        success: function (response) {Di2015NewLine            return true;Di2015NewLine        },Di2015NewLine        error: function ( error ) {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    )};Di2015NewLineDi2015NewLine    return false; /* required to stop event propagation */Di2015NewLine});Di2015NewLine
11812791Di2015UniqueSeparator<a>
11812791Di2015UniqueSeparator<a href="/test/Index" id="postLink">Ajax post the person to the server.</a>Di2015NewLine
11812791Di2015UniqueSeparatorPerson
11812791Di2015UniqueSeparatorList<Person>
11812791Di2015UniqueSeparatorPerson
11812791Di2015UniqueSeparatorclass PersonViewModelDi2015NewLine{Di2015NewLine    public int ID { get; set; }Di2015NewLine    public string FirstName { get; set; }Di2015NewLine    public string LastName { get; set; }Di2015NewLine}Di2015NewLine
11812809Di2015UniqueSeparator//Determine which checkboxes are checked and add them to the array.Di2015NewLineDim checkedBoxes New ArrayListDi2015NewLinecheckedBoxes.Add(IIf(chk_first.Checked, "checked", ""))Di2015NewLinecheckedBoxes.Add(IIf(chk_second.Checked, "checked", ""))Di2015NewLinecheckedBoxes.Add(IIf(chk_third.Checked, "checked", ""))Di2015NewLineDi2015NewLine//Then you'd have your email generation code here. This is only the body part of it.Di2015NewLineemail.Body = String.Format(File.ReadAllText([YourTemplateFile]), checkedBoxes.ToArray())Di2015NewLine
11812809Di2015UniqueSeparator<input type="checkbox" name="check1" value="check1" {0} />Di2015NewLine
11812887Di2015UniqueSeparatorTap
11812887Di2015UniqueSeparatorMouseLeftButtonUp
11812887Di2015UniqueSeparatorGeoCoordinate
11812887Di2015UniqueSeparatorpin[i].Tag
11812887Di2015UniqueSeparatorTag
11812887Di2015UniqueSeparatorGeoCoordinate
11812887Di2015UniqueSeparatorUIElements
11812887Di2015UniqueSeparatorTap
11812887Di2015UniqueSeparatorGeoCoordinate
11812887Di2015UniqueSeparatorpressedCoord = (GeoCoordinate)((PushPin)sender).Tag; Di2015NewLine
11812903Di2015UniqueSeparator"ASC"
11813068Di2015UniqueSeparatorTextEdit.Properties.ReadOnly = true
11813638Di2015UniqueSeparatorInvokeScript
11813638Di2015UniqueSeparatorInvokeCommand.InvokeScript(string.Format("Set-Location {0}", fullPath));Di2015NewLine
11813790Di2015UniqueSeparatorToUpper
11813790Di2015UniqueSeparatorvar query2 = namesDi2015NewLine    .Where(n=> n.Contains("a"))Di2015NewLine    .OrderBy(n=>n.Length)Di2015NewLine    .Select(n=>n.ToUpper() /* <<== HERE */);Di2015NewLine
11813927Di2015UniqueSeparatortextString
11813927Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing Excel = Microsoft.Office.Interop.Excel; Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //~~> Change Your String hereDi2015NewLine            String textString = "I'm trying to add a pretty long text into the Excel sheet by using sheet. I use this code:" + Environment.NewLine +Di2015NewLine                               "worksheet.Cells[1, 1] = textString;" + Environment.NewLine +Di2015NewLine                               "The result is here:";Di2015NewLineDi2015NewLine            Clipboard.SetText(textString);Di2015NewLineDi2015NewLine            Microsoft.Office.Interop.Excel.Application xlexcel;Di2015NewLine            Microsoft.Office.Interop.Excel.Workbook xlWorkBook;Di2015NewLine            Microsoft.Office.Interop.Excel.Worksheet xlWorkSheet;Di2015NewLineDi2015NewLine            object misValue = System.Reflection.Missing.Value;Di2015NewLine            xlexcel = new Excel.Application();Di2015NewLine            xlexcel.Visible = true;Di2015NewLineDi2015NewLine            //~~> Add a new a workbookDi2015NewLine            xlWorkBook = xlexcel.Workbooks.Add(misValue);Di2015NewLineDi2015NewLine            //~~> Set Sheet 1 as the sheet you want to work withDi2015NewLine            xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLineDi2015NewLine            //~~> Set your rangeDi2015NewLine            Excel.Range CR = (Excel.Range)xlWorkSheet.Cells[1, 1];Di2015NewLineDi2015NewLine            CR.Select();Di2015NewLineDi2015NewLine            xlWorkSheet.Paste(CR, false);Di2015NewLineDi2015NewLine            // xlWorkBook.Close(true, misValue, misValue);Di2015NewLine            //  xlexcel.Quit();Di2015NewLineDi2015NewLine            // releaseObject(xlWorkSheet);Di2015NewLine            // releaseObject(xlWorkBook);Di2015NewLine            // releaseObject(xlexcel);Di2015NewLine        }Di2015NewLineDi2015NewLine        //private void releaseObject(object obj)Di2015NewLine        //{Di2015NewLine        //    tryDi2015NewLine        //    {Di2015NewLine        //        System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);Di2015NewLine        //        obj = null;Di2015NewLine        //    }Di2015NewLine        //    catch (Exception ex)Di2015NewLine        //    {Di2015NewLine        //        obj = null;Di2015NewLine        //        MessageBox.Show("Unable to release the Object " + ex.ToString());Di2015NewLine        //    }Di2015NewLine        //    finallyDi2015NewLine        //    {Di2015NewLine        //        GC.Collect();Di2015NewLine        //    }Di2015NewLine        //} Di2015NewLine    }Di2015NewLine}Di2015NewLine
11814038Di2015UniqueSeparatorTable<TEntity>
11814038Di2015UniqueSeparatorIQueryable<T>
11814038Di2015UniqueSeparatorDataContext
11814038Di2015UniqueSeparatorIQueryable<T>
11814038Di2015UniqueSeparatorIEnumerable<T>
11814038Di2015UniqueSeparatorIQueryable<T>
11814038Di2015UniqueSeparatorIEnumerable<T>
11814038Di2015UniqueSeparatorTable<TEntity>
11814099Di2015UniqueSeparator<TextBox Name="txtFind" Text="{Binding ElementName=txtSearch, Path=Text}"></TextBox>Di2015NewLine
11814112Di2015UniqueSeparatorInnerException: System.NullReferenceException Message=Object reference not set to an instance of an object. Source=MediaTransferTester StackTrace: at MediaTransferTester.MainWindow.RegisterHandlers() in C:\\Users\\t.said\\documents\\visual studio 2010\\Projects\\MediaTransferTester\\MediaTransferTester\\MainWindow.xaml.cs:line 48 at MediaTransferTester.MainWindow..ctor() in C:\\Users\\t.said\\documents\\visual studio 2010\\Projects\\MediaTransferTester\\MediaTransferTester\\MainWindow.xaml.cs:line 39 InnerException: Di2015NewLine
11814181Di2015UniqueSeparatorMath.Round(num / 3);Di2015NewLine
11814181Di2015UniqueSeparatorMath.Ceiling(num / 3);Di2015NewLine
11814181Di2015UniqueSeparatorMath.Truncate(num / 3);Di2015NewLine
11814257Di2015UniqueSeparatorSelectionMode="Multiple"
11814257Di2015UniqueSeparator<asp:ListBox ID="LBSample" runat="server" SelectionMode="Multiple">Di2015NewLine    <asp:ListItem Text="1" Value="1"></asp:ListItem>Di2015NewLine    <asp:ListItem Text="2" Value="2"></asp:ListItem>Di2015NewLine    <asp:ListItem Text="3" Value="3"></asp:ListItem>Di2015NewLine</asp:ListBox>Di2015NewLine
11814257Di2015UniqueSeparatorList<string> Str = new List<string> { "1", "3" };Di2015NewLineDi2015NewLineforeach (ListItem obj in LBSample.Items)Di2015NewLine{Di2015NewLine    if (Str.Contains(obj.Text))Di2015NewLine        obj.Selected = true;Di2015NewLine}Di2015NewLine
11814281Di2015UniqueSeparatorimport tornado.ioloopDi2015NewLineimport tornado.webDi2015NewLineDi2015NewLineclass MainHandler(tornado.web.RequestHandler):Di2015NewLine    def get(self):Di2015NewLine        # put your calculation logic in here (instead of "Hello World"Di2015NewLine        self.write("Hello, world")Di2015NewLineDi2015NewLineapplication = tornado.web.Application([Di2015NewLine    (r"/", MainHandler),Di2015NewLine])Di2015NewLineDi2015NewLineif __name__ == "__main__":Di2015NewLine    application.listen(8888)Di2015NewLine    tornado.ioloop.IOLoop.instance().start()Di2015NewLine
11814331Di2015UniqueSeparatorlistname.Any(x=>x.TagName==stringName)Di2015NewLine
11814460Di2015UniqueSeparatorpublic form2(string text1, string text2)Di2015NewLine{Di2015NewLine   //work with valuesDi2015NewLine}Di2015NewLine
11814460Di2015UniqueSeparatorprivate void bufferedListView1_DoubleClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    form2 obj = new form2(bufferedListView1.SelectedItems[0].SubItems[0].Text,Di2015NewLine       bufferedListView1.SelectedItems[0].SubItems[1].Text);Di2015NewLine    obj.ShowDialog();Di2015NewLine}Di2015NewLine
11814492Di2015UniqueSeparator dynamic country = new ExpandoObject();Di2015NewLine var countryDic = country as IDictionary<string, object>;Di2015NewLineDi2015NewLine dynamic metadata = new ExpandoObject();Di2015NewLine var metadataDic = metadata as IDictionary<string, object>;Di2015NewLine metadataDic["filePath"] = "your file path";Di2015NewLineDi2015NewLine countryDic["metadata"] = metadata;Di2015NewLine var filePath = country.metadata.filePath;Di2015NewLine
11814501Di2015UniqueSeparatorExpandoObject
11814501Di2015UniqueSeparatorExpandoObject
11814501Di2015UniqueSeparatordynamic employee;Di2015NewLineDi2015NewLineemployee = new ExpandoObject();Di2015NewLineemployee.Name = "John Smith";Di2015NewLineemployee.Age = 33;Di2015NewLine
11814501Di2015UniqueSeparatorExpandoObject
11814501Di2015UniqueSeparatorIDictionary<string,object>
11814501Di2015UniqueSeparatorvar dictEmployee = employee as IDictionary<string,object>;Di2015NewLineDebug.WriteLine(dictEmployee["Age"].ToString);Di2015NewLine
11814887Di2015UniqueSeparatorresolutionDate  >= "-7d"Di2015NewLine
11814887Di2015UniqueSeparatorgetIssuesFromFilterWithLimit
11814887Di2015UniqueSeparatorrequestId
11814978Di2015UniqueSeparatorJOIN
11814978Di2015UniqueSeparatorUPDATE
11814978Di2015UniqueSeparatorUPDATE product_entity_decimal aDi2015NewLineJOIN   product_entity b ON a.entity_id = b.entity_id AND b.sku IN ('p1', 'p3')Di2015NewLineSET    a.value = CASE b.sku WHEN 'p1' THEN 6 WHEN 'p2' THEN 2 ENDDi2015NewLineWHERE  a.attribute_id = 64Di2015NewLine
11814978Di2015UniqueSeparatorUPDATE
11814978Di2015UniqueSeparator// START TRANSACTIONDi2015NewLineDi2015NewLine// For Each Value in arrayDi2015NewLine    // Execute UPDATE statementDi2015NewLineDi2015NewLine// COMMITDi2015NewLine
11815072Di2015UniqueSeparatorvar dateTime = DateTime.Now;Di2015NewLinevar dateString = dateTime.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.GetCultureInfo("ar"));Di2015NewLine
11815115Di2015UniqueSeparator<html>Di2015NewLine<head>Di2015NewLine<link type="text/css" href="jquery-ui-1.8.22.custom.css" rel="Stylesheet" />Di2015NewLineDi2015NewLine<script type="text/javascript" src="jquery-1.7.2.js"></script>Di2015NewLine<script type="text/javascript" src="jquery-ui-1.8.22.custom.min.js"></script>Di2015NewLine<script type="text/javascript">Di2015NewLinevar increase = 0;Di2015NewLinevar decrease = 100;Di2015NewLineDi2015NewLine$(document).ready(function() {Di2015NewLine    var anim = setInterval(function(){Di2015NewLine        $("#progressbar1").progressbar({Di2015NewLine            value: increase ++          Di2015NewLine        });Di2015NewLine        $("#progressbar2").progressbar({Di2015NewLine            value: decrease --          Di2015NewLine        });Di2015NewLine        if(increase == 100){Di2015NewLine            // clearInterval(anim);Di2015NewLine            increase = 0;Di2015NewLine            decrease = 100;Di2015NewLine        }Di2015NewLine    }, 50);Di2015NewLine});Di2015NewLine  </script>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine <div id="progressbar1" style="width: 500px; height: 15px;"></div><br />Di2015NewLine <div id="progressbar2" style="width: 500px; height: 15px;"></div>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
11815115Di2015UniqueSeparatorclearInterval(anim)
11815156Di2015UniqueSeparatorvar employee = new Employee() { Id = someId, Name = "Jack" }Di2015NewLineDb.Employees.Attach(employee);Di2015NewLineDb.Employees.Entry(employee).Property(e => e.Name).IsModified = true;Di2015NewLineDi2015NewLineDb.SaveChanges();Di2015NewLine
11815156Di2015UniqueSeparatorIsModified
11815156Di2015UniqueSeparatorfalse
11815231Di2015UniqueSeparatorDataSet1.CashRow CashRow = MainDataSet.Cash.NewCashRow();Di2015NewLineCashRow.Date = CashItem.Date;Di2015NewLineCashRow.Description = CashItem.Description;Di2015NewLineCashRow.Amount = CashItem.Amount;Di2015NewLineDi2015NewLineMainDataSet.Cash.AddCashRow(CashRow);Di2015NewLineDi2015NewLineCashTableAdapter.Update(MainDataSet);Di2015NewLine
11815231Di2015UniqueSeparatorprivate void CreateCashRow (DateTime date, string description, int amount)Di2015NewLine{Di2015NewLine   DataSet1.CashRow CashRow = MainDataSet.Cash.NewCashRow();Di2015NewLine   CashRow.Date = date;Di2015NewLine   CashRow.Description = description;Di2015NewLine   CashRow.Amount = amount;Di2015NewLineDi2015NewLine   MainDataSet.Cash.AddCashRow(CashRow);Di2015NewLineDi2015NewLine   CashTableAdapter.Update(MainDataSet);Di2015NewLine}Di2015NewLine
11815248Di2015UniqueSeparator    public static readonly DependencyProperty FrontBackgroundProperty =Di2015NewLine        DependencyProperty.Register("FrontBackground", typeof(Brush), typeof(Tile),Di2015NewLine        new PropertyMetadata(new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"])));Di2015NewLineDi2015NewLine    public static readonly DependencyProperty BackBackgroundProperty =Di2015NewLine        DependencyProperty.Register("BackBackground", typeof(Brush), typeof(Tile),Di2015NewLine        new PropertyMetadata(new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"])));Di2015NewLine
11815248Di2015UniqueSeparatornull
11815248Di2015UniqueSeparatorbin
11815248Di2015UniqueSeparatorobj
11815248Di2015UniqueSeparatorTile
11815248Di2015UniqueSeparatorbin
11815248Di2015UniqueSeparatorobj
11815248Di2015UniqueSeparatorTile
11815248Di2015UniqueSeparatorApplication.Current
11815248Di2015UniqueSeparatornull
11815248Di2015UniqueSeparatorApplication.Current.Resources
11815248Di2015UniqueSeparatornull
11815248Di2015UniqueSeparatorApplication.Current.Resources["PhoneAccentColor"]
11815248Di2015UniqueSeparatornull
11815248Di2015UniqueSeparatorColor
11815248Di2015UniqueSeparatorColor
11815248Di2015UniqueSeparatorstruct
11815248Di2015UniqueSeparatorIsTwoSided
11815248Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Defines if the tile has two sides.Di2015NewLine    /// </summary>Di2015NewLine    public bool IsTwoSidedDi2015NewLine    {Di2015NewLine        get { return (bool)GetValue(IsTwoSidedProperty); }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            SetValue(IsTwoSidedProperty, value);Di2015NewLineDi2015NewLine            this.startAnimations();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11815248Di2015UniqueSeparatorstartAnimations
11815248Di2015UniqueSeparatorIsTwoSided
11815248Di2015UniqueSeparatorTile.xaml
11815248Di2015UniqueSeparatorStoryboard
11815248Di2015UniqueSeparator<UserControl.Resources>
11815248Di2015UniqueSeparator    <Storyboard x:Name="SwitchSidesAnimation">Di2015NewLine
11815248Di2015UniqueSeparatorx:Key
11815248Di2015UniqueSeparatorx:Name
11815248Di2015UniqueSeparatorx:Key
11815248Di2015UniqueSeparatorx:Name
11815248Di2015UniqueSeparatorx:Name
11815248Di2015UniqueSeparatorx:Key
11815248Di2015UniqueSeparatorx:Name
11815248Di2015UniqueSeparatorInitializeComponent()
11815248Di2015UniqueSeparatorTile
11815248Di2015UniqueSeparatorTile.g.cs
11815248Di2015UniqueSeparatorx:Name
11815248Di2015UniqueSeparatorSwitchSidesAnimation
11815248Di2015UniqueSeparatorTile.xaml
11815248Di2015UniqueSeparatorSwitchSidesAnimation
11815248Di2015UniqueSeparatornull
11815248Di2015UniqueSeparatorFindName
11815248Di2015UniqueSeparatorTile.g.cs
11815248Di2015UniqueSeparatorx:Key
11815248Di2015UniqueSeparator    this.Resources["SwitchSidesAnimation"] as StoryboardDi2015NewLine
11815248Di2015UniqueSeparatorstartAnimations
11815248Di2015UniqueSeparator    private Storyboard SwitchSidesAnimationDi2015NewLine    {Di2015NewLine        get { return this.Resources["SwitchSidesAnimation"] as Storyboard; }Di2015NewLine    }Di2015NewLine
11815332Di2015UniqueSeparatorstring docPath = Environment.GetFolderPath (Environment.SpecialFolder.Personal);Di2015NewLine
11815355Di2015UniqueSeparatorMessageBox
11815355Di2015UniqueSeparatorMessageBox
11815355Di2015UniqueSeparatorSystem.Linq.Enumerable
11815418Di2015UniqueSeparatorImage newImage = Image.FromFile("view.jpg");Di2015NewLineBitmap img = new Bitmap(newImage, Di2015NewLine                        (int)(newImage.Size.Width / ZoomLevel), Di2015NewLine                        (int)(newImage.Size.Height / ZoomLevel));Di2015NewLinepictureBox1.SizeMode = PictureBoxSizeMode.CenterImage;Di2015NewLinepictureBox1.Image = img;Di2015NewLine
11815418Di2015UniqueSeparatorImage newImage = Image.FromFile("view.jpg");Di2015NewLinepictureBox1.Width = (int)(newImage.Size.Width / 1);Di2015NewLinepictureBox1.Height = (int)(newImage.Size.Height / 1);Di2015NewLineDi2015NewLineBitmap img = new Bitmap(newImage, Di2015NewLine                        (int)(newImage.Size.Width / ZoomLevel), Di2015NewLine                        (int)(newImage.Size.Height / ZoomLevel));Di2015NewLinepictureBox1.SizeMode = PictureBoxSizeMode.CenterImage;Di2015NewLinepictureBox1.Image = img;Di2015NewLine
11815428Di2015UniqueSeparator<copy todir="${target.dir}\\firstsource">Di2015NewLine    <fileset basedir="firstsource">Di2015NewLine        <include name="*.*" />Di2015NewLine    </fileset>Di2015NewLine</copy>Di2015NewLine<copy todir="${target.dir}\\secondsource">Di2015NewLine    <fileset basedir="secondsource">Di2015NewLine        <include name="*.*" />Di2015NewLine    </fileset>Di2015NewLine</copy>Di2015NewLine
11815428Di2015UniqueSeparator <buildpublisher>Di2015NewLine    <sourceDir>$(target.dir)</sourceDir>Di2015NewLine    <publishDir>C:\\inetpub\\wwwroot\\CI</publishDir>Di2015NewLine    <alwaysPublish>false</alwaysPublish>Di2015NewLine  </buildpublisher>Di2015NewLine
11815490Di2015UniqueSeparatorContentPicker
11815619Di2015UniqueSeparatorint iVal = 1;Di2015NewLineDi2015NewLineiVal.ToString("D3")); // = "001"Di2015NewLine
11815859Di2015UniqueSeparator(?i)^[a-z]+
11815859Di2015UniqueSeparatorMatch match = Regex.Match(stringInput, @"(?i)^[a-z]+");Di2015NewLine
11815859Di2015UniqueSeparator(?i)
11815859Di2015UniqueSeparator^
11815859Di2015UniqueSeparator[a-z]
11815859Di2015UniqueSeparator[a-z ]
11815859Di2015UniqueSeparator+
11815886Di2015UniqueSeparatorGetUnitTagList
11815886Di2015UniqueSeparatorSubmitChanges
11816009Di2015UniqueSeparatorDataSet.Dispose()
11816009Di2015UniqueSeparatorusing (DataSet ds = new DataSet())Di2015NewLine{Di2015NewLine    return ds;Di2015NewLine}  // there is a ds.Dispose() here but it does nothing.Di2015NewLine
11816057Di2015UniqueSeparatorint
11816057Di2015UniqueSeparatorcmd = int(data);Di2015NewLine
11816057Di2015UniqueSeparatorcmd = hex(int(data))Di2015NewLineDi2015NewLineDi2015NewLineint(x[, base]) -> integer                                                                           Di2015NewLineDi2015NewLineConvert a string or number to an integer, if possible.  A floating pointDi2015NewLineargument will be truncated towards zero (this does not include a stringDi2015NewLinerepresentation of a floating point number!)  When converting a string, useDi2015NewLinethe optional base.  It is an error to supply a base when converting aDi2015NewLinenon-string.  If base is zero, the proper base is guessed based on theDi2015NewLinestring content.  If the argument is outside the integer range aDi2015NewLinelong object will be returned instead.Di2015NewLineDi2015NewLineDi2015NewLinehex(number) -> string                                                                               Di2015NewLineDi2015NewLineReturn the hexadecimal representation of an integer or long integer.Di2015NewLine
11816217Di2015UniqueSeparatorpublic class GoogleCurrencyServiceDi2015NewLine{Di2015NewLine    private const string RequestUri = "http://www.google.com/ig/calculator?hl=en&q=1{0}%3D%3F{1}";Di2015NewLineDi2015NewLine    public decimal ExchangeRate { get; private set; }Di2015NewLineDi2015NewLine    public decimal GetRateForCurrency(string fromCurrency, string toCurrency)Di2015NewLine    {Di2015NewLine        ExchangeRate = 0;Di2015NewLine        // use a signaler to block this thread and wait for the async call.Di2015NewLine        var signaler = new ManualResetEvent(false);Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            var client = new WebClient();Di2015NewLine            client.DownloadStringCompleted += StringDownloadCompleted;Di2015NewLine            // pass the signaler as user tokenDi2015NewLine            client.DownloadStringAsync(new Uri(String.Format(RequestUri, fromCurrency, toCurrency)), signaler);Di2015NewLineDi2015NewLine            // wait for signal, it will be set by StringDownloadCompletedDi2015NewLine            signaler.WaitOne();Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            signaler.Dispose();Di2015NewLine        }Di2015NewLineDi2015NewLine        return ExchangeRate;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void StringDownloadCompleted(object sender, DownloadStringCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            ExchangeRate = ParseResponseAndGetExchangeRate(e.Result);Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            // set signalDi2015NewLine            ((ManualResetEvent)e.UserState).Set();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private decimal ParseResponseAndGetExchangeRate(string result)Di2015NewLine    {Di2015NewLine        return 123;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816217Di2015UniqueSeparatorpublic class GoogleCurrencyServiceDi2015NewLine{Di2015NewLine    private const string RequestUri = "http://www.google.com/ig/calculator?hl=en&q=1{0}%3D%3F{1}";Di2015NewLineDi2015NewLine    public void GetRateForCurrency(string fromCurrency, string toCurrency, Action<decimal> callback)Di2015NewLine    {Di2015NewLine        var client = new WebClient();Di2015NewLine        client.DownloadStringCompleted += StringDownloadCompleted;Di2015NewLine        // pass the callback as user tokenDi2015NewLine        client.DownloadStringAsync(new Uri(String.Format(RequestUri, fromCurrency, toCurrency)), callback);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void StringDownloadCompleted(object sender, DownloadStringCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        // parse response to get the rate valueDi2015NewLine        var rate = ParseResponseAndGetExchangeRate(e.Result);Di2015NewLineDi2015NewLine        // if a callback was specified, call it passing the rate.Di2015NewLine        var callback = (Action<decimal>)e.UserState;Di2015NewLine        if (callback != null)Di2015NewLine            callback(rate);Di2015NewLine    }Di2015NewLineDi2015NewLine    private decimal ParseResponseAndGetExchangeRate(string result)Di2015NewLine    {Di2015NewLine        return 123;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816217Di2015UniqueSeparator// this is your UI form/control/whateverDi2015NewLinepublic class MyUIDi2015NewLine{Di2015NewLine    public void OnButtonToGetRateClick()Di2015NewLine    {Di2015NewLine        var from = "USD"; // or read from textbox...Di2015NewLine        var to = "EUR";Di2015NewLineDi2015NewLine        // call the rate serviceDi2015NewLine        var service = new GoogleCurrencyService();Di2015NewLine        service.GetRateForCurrency(from, to, (rate) =>Di2015NewLine            {Di2015NewLine                // do stuff here to update UI.Di2015NewLine                // like update ui.Di2015NewLine            });Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816227Di2015UniqueSeparatorDataTable
11816227Di2015UniqueSeparatorLinq To Entities
11816227Di2015UniqueSeparatorEntity Framework
11816304Di2015UniqueSeparatorPath.GetFullPath
11816304Di2015UniqueSeparatorstring fullPath1 = Path.GetFullPath(absolutePath);Di2015NewLinestring fullPath2 = Path.GetFullPath(relativePath);Di2015NewLine
11816304Di2015UniqueSeparatorfullPath1
11816304Di2015UniqueSeparatorfullPath2
11816343Di2015UniqueSeparatorRecord1[] firstRecords = new[]Di2015NewLine    {Di2015NewLine        new Record1Di2015NewLine            {Di2015NewLine                ID = Guid.NewGuid(),Di2015NewLine                Name = "John", Surname = "Doe"Di2015NewLine            },Di2015NewLine        new Record1Di2015NewLine            {Di2015NewLine                ID = Guid.NewGuid(),Di2015NewLine                Name = "Jane", Surname = "Roe"Di2015NewLine            }Di2015NewLine    };Di2015NewLineDi2015NewLineRecord2[] secondRecords = new[]Di2015NewLine    {Di2015NewLine        new Record2 { Age = 20, Sex = Sex.Male },Di2015NewLine        new Record2 { Age = 20, Sex = Sex.Female }Di2015NewLine    };Di2015NewLineDi2015NewLinevar subjects = firstRecordsDi2015NewLine    .Select((first, index) =>Di2015NewLine        {Di2015NewLine            var second = secondRecords[index];Di2015NewLine            var r = newDi2015NewLine                {Di2015NewLine                    ID = first.ID,Di2015NewLine                    Name = first.Name,Di2015NewLine                    Surname = first.Surname,Di2015NewLine                    Age = second.Age,Di2015NewLine                    Sex = second.SexDi2015NewLine                };Di2015NewLine            return Mapper.DynamicMap<Subject>(r);Di2015NewLine        })Di2015NewLine    .ToArray();Di2015NewLine
11816343Di2015UniqueSeparatorSelect()
11816343Di2015UniqueSeparatorvar subjects = firstRecordsDi2015NewLine    .Select((first, index) =>Di2015NewLine        {Di2015NewLine            var second = secondRecords[index];Di2015NewLine            var r = new SubjectDi2015NewLine                {Di2015NewLine                    ID = first.ID,Di2015NewLine                    Name = first.Name,Di2015NewLine                    Surname = first.Surname,Di2015NewLine                    Age = second.Age,Di2015NewLine                    Sex = second.SexDi2015NewLine                };Di2015NewLine            return r;Di2015NewLine        })Di2015NewLine    .ToArray();Di2015NewLine
11816343Di2015UniqueSeparatorInjectFrom()
11816343Di2015UniqueSeparatorvar subjects = firstRecordsDi2015NewLine.Select((first, index) =>Di2015NewLine    {Di2015NewLine        var second = secondRecords[index];Di2015NewLine        var r = new Subject();Di2015NewLine        r.InjectFrom(first).InjectFrom(second);Di2015NewLine        return r;Di2015NewLine    })Di2015NewLine.ToArray();Di2015NewLine
11816366Di2015UniqueSeparatorbyte[] buffer = new byte[512];Di2015NewLinewhile(true) {Di2015NewLine    int space = 512, read, offset = 0;Di2015NewLine    while(space > 0 && (read = stream.Read(buffer, offset, space)) > 0) {Di2015NewLine        space -= read;Di2015NewLine        offset += read;Di2015NewLine    }Di2015NewLine    // either a full buffer, or EOFDi2015NewLine    if(space != 0) { // EOF - finalDi2015NewLine       if(offset != 0) { // something to sendDi2015NewLine         Array.Resize(red buffer, offset);Di2015NewLine         Upload(buffer);Di2015NewLine       }Di2015NewLine       break;Di2015NewLine    } else { // full bufferDi2015NewLine       Upload(buffer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816404Di2015UniqueSeparatorforeach (GridViewRow row in gvMaster.Rows) Di2015NewLine{Di2015NewLine    if (row.RowType == DataControlRowType.DataRow) Di2015NewLine    {Di2015NewLine        GridView gvChild = (GridView) row.FindControl("nestedGridView");Di2015NewLine        // Then do the same method for check box column Di2015NewLine        if (gvChild != null)Di2015NewLine        {Di2015NewLine            foreach (GridViewRow row in gvChild .Rows) Di2015NewLine            {Di2015NewLine                if (row.RowType == DataControlRowType.DataRow) Di2015NewLine                {Di2015NewLine                    CheckBox chk = (CheckBox) row.FindControl("chkselect");Di2015NewLine                    if (chk.Checked)Di2015NewLine                    {Di2015NewLine                        // do your workDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816510Di2015UniqueSeparatorFactory
11816510Di2015UniqueSeparatorstatic class Utils
11816510Di2015UniqueSeparatorMyFactory
11816510Di2015UniqueSeparatorpublic static class UtilsDi2015NewLine{Di2015NewLine    public static IFactory MyFactory {get; private set}Di2015NewLine    static Utils()Di2015NewLine    {  Di2015NewLine        MyFactory = new Factory();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine//usageDi2015NewLinevar myInterface = Utils.MyFactory.Create<IMyInterfrace>()Di2015NewLine
11816684Di2015UniqueSeparatorint i = int.MaxValue;Di2015NewLineshort s = checked((short)i);Di2015NewLine
11816698Di2015UniqueSeparator|=
11816698Di2015UniqueSeparator&=
11816698Di2015UniqueSeparatorEnum.Parse
11816698Di2015UniqueSeparatorvar res = (DaysInWeekIds)Enum.Parse(Di2015NewLine    typeof(DaysInWeekIds)Di2015NewLine,   string.Join(",", daysOfWeek.Select(d => d.ToString()).ToArray())Di2015NewLine);Di2015NewLine
11816698Di2015UniqueSeparator25
11816698Di2015UniqueSeparator{M, Th, F}
11816771Di2015UniqueSeparatorT
11816771Di2015UniqueSeparatorpublic abstract class Producer<T> where T : structDi2015NewLinepublic abstract class Consumer<T> where T : structDi2015NewLine
11816820Di2015UniqueSeparatorBitmap bmp;Di2015NewLinebool isDrawing;Di2015NewLinePoint previous;Di2015NewLineDi2015NewLinevoid pictureBox1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    isDrawing = true;Di2015NewLine    previous = e.Location;Di2015NewLine}Di2015NewLineDi2015NewLinevoid pictureBox1_MouseUp(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    isDrawing = false;Di2015NewLine}Di2015NewLineDi2015NewLinevoid pictureBox1_MouseMove(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if (isDrawing)Di2015NewLine    {Di2015NewLine        using (Graphics g = Graphics.FromImage(bmp))Di2015NewLine        {Di2015NewLine            double wf = (double)bmp.Width / (double)pictureBox1.Width;Di2015NewLine            double hf = (double)bmp.Height / (double)pictureBox1.Height;Di2015NewLine            g.ScaleTransform((float)wf, (float)hf);Di2015NewLine            g.DrawLine(Pens.Black, e.Location, previous);Di2015NewLine        }Di2015NewLineDi2015NewLine        pictureBox1.Refresh();Di2015NewLine        previous = e.Location;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11816931Di2015UniqueSeparatorListBox.Items.Insert(0, "Message");Di2015NewLine
11816939Di2015UniqueSeparatorpublic IQueryable<TEntity> FindAll(Expression<Func<TEntity, bool>> expression)Di2015NewLine{Di2015NewLine    var query = _session.Query<TEntity>();Di2015NewLine    return query.Where(expression);Di2015NewLine}Di2015NewLine
11816939Di2015UniqueSeparatorQueryOver
11816950Di2015UniqueSeparatorIEnumerable<simpletest> ElementsAtDepth(int depth) {Di2015NewLine    if(depth > 0) {Di2015NewLine        foreach(simpletest child in this.Children)Di2015NewLine            foreach(simpletest element in child.ElementsAtDepth(depth - 1))Di2015NewLine                yield return element;Di2015NewLine    }Di2015NewLine    else {Di2015NewLine        foreach(simpletest element in this.Children)Di2015NewLine            yield return element;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11817056Di2015UniqueSeparator <Button HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20" Background="Black">Di2015NewLine            <Button.Content>Di2015NewLine                <Border BorderThickness="3" BorderBrush="White" Margin="5">Di2015NewLine                <StackPanel>Di2015NewLine                    <TextBlock FontWeight="Bold" Foreground="White" Margin="3">primary text</TextBlock>Di2015NewLine                        <TextBlock Foreground="LightGray"Di2015NewLine                                   Margin="3">Lorem ipsum dolor sit amet</TextBlock>Di2015NewLine                </StackPanel>Di2015NewLine                </Border>Di2015NewLine            </Button.Content>Di2015NewLine        </Button>Di2015NewLine
11817165Di2015UniqueSeparatordata = int( conn.recv(32) );Di2015NewLine
11817165Di2015UniqueSeparatorint(string)
11817165Di2015UniqueSeparatorint('42') == 42
11817165Di2015UniqueSeparatorint('-56') == -56
11817165Di2015UniqueSeparator# see python's struct documentation, this defines the format of data you wantDi2015NewLinedata = struct.Struct('>i') Di2015NewLine# this produces an object from the socket that acts more like a fileDi2015NewLinesocket_file = conn.makefile()Di2015NewLine# read the data and unpack itDi2015NewLine# NOTE: this will fail if the connection is lost midway through the bytesDi2015NewLine# dealing with that is left as an exercise to the readerDi2015NewLinevalue, = data.unpack(socket_file.read(data.size))Di2015NewLine
11817380Di2015UniqueSeparatorGet["/"] = _ => View["index"];Di2015NewLine
11817395Di2015UniqueSeparatorstring.format( "SELECT * FROM Win32_Process WHERE Name = '{0}' AND CommandLine LIKE '%{1}%'", "firefox.exe", "firefox" )Di2015NewLine
11817395Di2015UniqueSeparator*
11817527Di2015UniqueSeparatorvoid ReadExact(Socket socket, byte[] buffer, int offset, int count) {Di2015NewLine    int read;Di2015NewLine    while(count > 0 && (read = socket.Receive(Di2015NewLine       buffer, offset, count, flags)) > 0)Di2015NewLine    {Di2015NewLine        offset += read;Di2015NewLine        count -= read;Di2015NewLine    }Di2015NewLine    if(count > 0) throw new EndOfStreamException();Di2015NewLine}Di2015NewLine
11817527Di2015UniqueSeparatorNetworkStream
11817598Di2015UniqueSeparatorstatic SqlConnection CreateConnection(){Di2015NewLine    return new SqlConnection(ConfigurationManager.ConnectionStrings["IMS"].ConnectionString);Di2015NewLine}Di2015NewLine
11817598Di2015UniqueSeparatorstatic SqlConnection CreateConnection()Di2015NewLine{Di2015NewLineDi2015NewLine    if (ConfigurationManager.ConnectionStrings["IMS"] == null)Di2015NewLine    {Di2015NewLine        throw new Exception("Connection string not found in the configuration file.");Di2015NewLine    }Di2015NewLine    var sqlConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["IMS"].ConnectionString);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        sqlConnection.Open();Di2015NewLine    }Di2015NewLine    catch (Exception exception)Di2015NewLine    {Di2015NewLine        throw new Exception("An error occured while connecting to the database. See innerException for details.", exception);Di2015NewLine    }Di2015NewLine    return sqlConnection;Di2015NewLine}Di2015NewLine
11817602Di2015UniqueSeparatorprivate
11817705Di2015UniqueSeparatorstring strConnectionString = ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString1"].ConnectionString;Di2015NewLineDi2015NewLine    SqlConnection myConnect = new SqlConnection(strConnectionString);Di2015NewLineDi2015NewLine    string strCommandText = "SELECT date, starttime, endtime, planner FROM bookings WHERE UserId =@UserId";Di2015NewLine    SqlCommand cmd = new SqlCommand(strCommandText, myConnect);Di2015NewLine  cmd.Parameters.AddWithValue("@UserId", UserId);Di2015NewLineDi2015NewLine    myConnect.Open();Di2015NewLine    SqlDataReader reader = cmd.ExecuteReader();  Di2015NewLine    myGridView.DataSource = reader;Di2015NewLine    myGridView.DataBind();Di2015NewLineDi2015NewLine    reader.Close();Di2015NewLine    myConnect.Close();Di2015NewLine
11817737Di2015UniqueSeparatorSystem.Threading.Interlocked
11817782Di2015UniqueSeparatorprivate void leftFlowLayoutPanel_Layout(object sender, LayoutEventArgs e) {Di2015NewLine    if (this.IsHandleCreated) {Di2015NewLine        this.BeginInvoke((Action)this.OriginalLayoutCode);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11817802Di2015UniqueSeparatorstring wsName = @"worksheetName"; //verbatim string to take special characters literallyDi2015NewLineMatch m = Regex.Match(wsName, @"[\\[/\\?\\]\\*]");Di2015NewLinebool nameIsValid = (m.Success || (string.IsNullOrEmpty(wsName)) || (wsName.Length > 31)) ? false : true;Di2015NewLine
11817899Di2015UniqueSeparator.First()
11817899Di2015UniqueSeparator.FirstOrDefault()
11817899Di2015UniqueSeparatorprivate Tile CheckCollision(Tile[] tiles)Di2015NewLine{Di2015NewLine    return tiles.FirstOrDefault(t => t.Rectangle.IntersectsWith(Rectangle));Di2015NewLine}Di2015NewLine
11817899Di2015UniqueSeparator.First()
11817899Di2015UniqueSeparator.FirstOrDefault()
11817899Di2015UniqueSeparator.Single()
11817899Di2015UniqueSeparator.First()
11817899Di2015UniqueSeparator.Single()
11817899Di2015UniqueSeparator.First()
11817987Di2015UniqueSeparatorFunctionName
11817987Di2015UniqueSeparatorFoo
11817987Di2015UniqueSeparatorvar foo = new Foo();Di2015NewLinevar typeName = "System.Int32";Di2015NewLinevar method = typeof(Foo).GetMethod("FunctionName");Di2015NewLinevar genericMethod = method.MakeGenericMethod(Type.GetType(typeName));Di2015NewLinegenericMethod.Invoke(foo, new Type[0]);Di2015NewLine
11817987Di2015UniqueSeparatorInteger
11817987Di2015UniqueSeparatorint
11817987Di2015UniqueSeparatorInt32
11817987Di2015UniqueSeparatorInt32
11817987Di2015UniqueSeparatorGetType
11817987Di2015UniqueSeparatorint
11817987Di2015UniqueSeparatorType.GetType
11818073Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    [DisplayName("Company")]Di2015NewLine    public int CompanyId { get; set; }Di2015NewLine    public IEnumerable<SelectListItem> Companies { get; set; }Di2015NewLine}Di2015NewLine
11818073Di2015UniqueSeparatorpublic class CompaniesController: ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        List<Company> companies = getCompanies();Di2015NewLineDi2015NewLine        var model = new MyViewModel();Di2015NewLine        model.Companies = companies.Select(x => new SelectListItemDi2015NewLine        {Di2015NewLine            Value = x.companyID.ToString(),Di2015NewLine            Text = x.companyNameDi2015NewLine        });Di2015NewLine        return View(model);Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Index(MyViewModel model)Di2015NewLine    {Di2015NewLine        // model.CompanyId will contain the selected value hereDi2015NewLineDi2015NewLine        return Content(Di2015NewLine            string.Format("You have selected company id: {0}", model.CompanyId)Di2015NewLine        );Di2015NewLine    }Di2015NewLine}Di2015NewLine
11818073Di2015UniqueSeparator@model MyViewModelDi2015NewLine@using (Html.BeginForm())Di2015NewLine{Di2015NewLine    @Html.LabelFor(x => x.CompanyId)Di2015NewLine    @Html.DropDownListFor(x => x.CompanyId, Model.Companies)Di2015NewLine    <button type="submit">OK</button>Di2015NewLine}Di2015NewLine
11818259Di2015UniqueSeparatorToString()
11818259Di2015UniqueSeparatorNullReferenceException
11818259Di2015UniqueSeparatorimgData
11818259Di2015UniqueSeparatornull
11818259Di2015UniqueSeparatornull
11818259Di2015UniqueSeparatorNullReferenceException
11818259Di2015UniqueSeparatordrow[1] = imgData == null ? DBNull.Value : (object)imgData;Di2015NewLine
11818599Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<definitions xmlns:tns="http://localhost/weGotcha/servicehandler/wsdl_service.wsdl"     xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" name="WebService" targetNamespace="http://localhost/weGotcha/servicehandler/wsdl_service.wsdl">Di2015NewLine<types>Di2015NewLine    <xs:schema elementFormDefault="qualified" targetNamespace="http://localhost/weGotcha/servicehandler/wsdl_service.wsdl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://localhost/weGotcha/servicehandler/wsdl_service.wsdl">Di2015NewLine        <xsd:element name="getCustomerID" type="xsd:int"/>Di2015NewLine        <xs:complexType name="Persoon">Di2015NewLine            <xs:sequence>Di2015NewLine                <xs:element name="ID" type="xsd:int"/>Di2015NewLine                <xs:element name="Voornaam" type="xsd:string"/>Di2015NewLine                <xs:element name="Achternaam" type="xsd:string"/>Di2015NewLine                <xs:element name="Adres" type="xsd:string"/>Di2015NewLine                <xs:element name="Postcode" type="xsd:string"/>Di2015NewLine                <xs:element name="Woonplaats" type="xsd:string"/>Di2015NewLine                <xs:element name="Email_adres" type="xsd:string"/>Di2015NewLine                <xs:element name="Telefoonnummer" type="xsd:string"/>Di2015NewLine                <xs:element name="CBR_Kandidaatnummer" type="xsd:string"/>Di2015NewLine                <xs:element name="Rijbewijs" type="xsd:int"/>Di2015NewLine                <xs:element name="Laatste_keer_bewerkt" type="xsd:dateTime"/>Di2015NewLine            </xs:sequence>Di2015NewLine        </xs:complexType>Di2015NewLine        <xs:complexType name="PersoonList">Di2015NewLine            <xs:complexContent>Di2015NewLine                <xs:restriction base="soapenc:Array">Di2015NewLine                    <xs:sequence>Di2015NewLine                        <xs:element name="Persoon" type="tns:Persoon" maxOccurs="unbounded"/>Di2015NewLine                    </xs:sequence>Di2015NewLine                </xs:restriction>Di2015NewLine            </xs:complexContent>Di2015NewLine        </xs:complexType>Di2015NewLine    </xs:schema>Di2015NewLine</types>Di2015NewLine<message name="doGetCustomerID">Di2015NewLine    <part name="CustomerID" type="xsd:int"/>Di2015NewLine</message>Di2015NewLine<message name="doGetPersoonDataResponse">Di2015NewLine    <part name="return" type="tns:PersoonList"/>Di2015NewLine</message>Di2015NewLine<portType name="DataPort">Di2015NewLine    <operation name="getPersoonData">Di2015NewLine        <input message="tns:doGetCustomerID"/>Di2015NewLine        <output message="tns:doGetPersoonDataResponse"/>Di2015NewLine    </operation>Di2015NewLine</portType>Di2015NewLine<binding name="DataBinding" type="tns:DataPort">Di2015NewLine    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>Di2015NewLine    <operation name="getPersoonData">Di2015NewLine        <soap:operation soapAction="urn:getDataAction"/>Di2015NewLine        <input>Di2015NewLine            <soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:GetData"/>Di2015NewLine        </input>Di2015NewLine        <output>Di2015NewLine            <soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:GetData"/>Di2015NewLine        </output>Di2015NewLine    </operation>Di2015NewLine</binding>Di2015NewLine<service name="WeGotchaService">Di2015NewLine    <port name="DataPort" binding="tns:DataBinding">Di2015NewLine        <soap:address location="http://localhost/weGotcha/servicehandler/servicehandler.php"/>Di2015NewLine    </port>Di2015NewLine</service>Di2015NewLine
11818618Di2015UniqueSeparatora = new MyReferenceType();Di2015NewLinea.x = 5;Di2015NewLineb = a;Di2015NewLinea.x = 10;Di2015NewLine// b.x is now also 10, because both a and b reference the same instanceDi2015NewLineDi2015NewLinea = new MyValueType();Di2015NewLinea.x = 5;Di2015NewLineb = a;Di2015NewLinea.x = 10;Di2015NewLine// b.x is still 5, because both a and b are distinct instancesDi2015NewLine
11818618Di2015UniqueSeparatornull
11818751Di2015UniqueSeparatorT
11818751Di2015UniqueSeparatorDictionary<Type, Func<object, object>>
11818751Di2015UniqueSeparatordynamic
11818751Di2015UniqueSeparatorpublic T Foo<T>(T value)Di2015NewLine{Di2015NewLine    dynamic d = value;Di2015NewLine    return Math.Abs(d);Di2015NewLine}Di2015NewLine
11818752Di2015UniqueSeparatorcommonImageLoader( ref bkgrSource[0], ref bkgrBANK[0] ); Di2015NewLineDi2015NewLineprivate void commonImageLoader(ref string source, ref Texture2D destination ) {Di2015NewLine    if ( !string.IsNullOrEmpty( source ) ) {Di2015NewLine        fileName = source;Di2015NewLine        using ( fileStream = new FileStream( @fileName, FileMode.Open ) ) {Di2015NewLine        destination = Texture2D.FromStream( GraphicsDevice, fileStream );Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11818771Di2015UniqueSeparatorDefine UINT to be the unsigned integer type you are using for the grouped bits.Di2015NewLineDefine UMAX to be the maximum value of that type (all bits are on).Di2015NewLineDi2015NewLine// Find first word that has a zero bit.Di2015NewLineint i;Di2015NewLinefor (i = highest word in x; 0 <= i; --i)Di2015NewLine    if (x[i] != UMAX)Di2015NewLine        break;Di2015NewLineDi2015NewLine// Return true if all bits in all of x[] are on.Di2015NewLineif (i < 0)Di2015NewLine    return true;Di2015NewLineDi2015NewLine// Test whether word conforms to the ones-then-zeroes rule.Di2015NewLineUINT y = x[i];Di2015NewLineif (y + (y & -y))Di2015NewLine    return false;Di2015NewLineDi2015NewLine// Test whether all remaining words are zero.Di2015NewLinefor (; 0 <= i; --i)Di2015NewLine    if (x[i])Di2015NewLine        return false;Di2015NewLineDi2015NewLinereturn true;Di2015NewLine
11818771Di2015UniqueSeparatory + (y & -y)
11818771Di2015UniqueSeparatory & -y
11818827Di2015UniqueSeparatoriGame
11818827Di2015UniqueSeparatorTaskWsdlImportExtension
11818832Di2015UniqueSeparatorUpdatePanel1.ContentTemplateContainer.Controls.Add(pn);Di2015NewLine
11818884Di2015UniqueSeparatorDataTable dt
11818884Di2015UniqueSeparatorcurrentOnHandGrid
11818884Di2015UniqueSeparatordt
11818884Di2015UniqueSeparatorcurrentOnHandGrid
11818884Di2015UniqueSeparatordt
11818884Di2015UniqueSeparatorContinue
11818884Di2015UniqueSeparatorcontinue
11818888Di2015UniqueSeparatorwebBrowser1.Document.CookieDi2015NewLine
11818888Di2015UniqueSeparatorHttpWebRequest request = (HttpWebRequest)WebRequest.Create(myUri);Di2015NewLinerequest.CookieContainer = new CookieContainer();Di2015NewLinerequest.CookieContainer.SetCookies(myUri, webBrowser1.Document.Cookie);Di2015NewLine
11819180Di2015UniqueSeparatorif(filename.IndexOfAny(Path.GetInvalidFileNameChars()) != -1)Di2015NewLine   bitmap.Save(textBox4.Text);Di2015NewLineelseDi2015NewLine   MessageBox.Show("Error: the file name contains invalid chars");Di2015NewLine
11819180Di2015UniqueSeparatorif(filename.IndexOfAny(Path.GetInvalidFileNameChars()) != -1)Di2015NewLine   bitmap.Save(@"C:\\" + textBox4.Text + ".jpg");Di2015NewLineelseDi2015NewLine   MessageBox.Show("Error: the file name contains invalid chars");Di2015NewLine
11819208Di2015UniqueSeparatorCount(Func<T, bool>)
11819208Di2015UniqueSeparatorforeach
11819208Di2015UniqueSeparatorConcurrentBag
11819338Di2015UniqueSeparatorInvoke
11819338Di2015UniqueSeparatorobject[]
11819338Di2015UniqueSeparatorobject[]
11819338Di2015UniqueSeparatorobject[] obj = {10};Di2015NewLinecsInfo.Invoke(obj);Di2015NewLine
11819351Di2015UniqueSeparatorPets.Where( p => p.Toy.Owners.Any(o => o.Name == "OwnerNameYourLookingFor") );Di2015NewLine
11819390Di2015UniqueSeparatorimage.jpg?image=randomNumber
11819508Di2015UniqueSeparator        doc.Open();Di2015NewLineDi2015NewLine        PdfWriter writer = PdfWriter.GetInstance(doc, memoryStream);Di2015NewLine        writer.CloseStream = false;Di2015NewLine
11819508Di2015UniqueSeparator        PdfWriter writer = PdfWriter.GetInstance(doc, memoryStream);Di2015NewLine        writer.CloseStream = false;Di2015NewLine        doc.Open();Di2015NewLine        doc.NewPage();Di2015NewLine
11819552Di2015UniqueSeparatoruint[]
11819552Di2015UniqueSeparatornamespace System.NumericsDi2015NewLine{Di2015NewLine    /// <summary>Represents an arbitrarily large signed integer.</summary>Di2015NewLine    [Serializable]Di2015NewLine    public struct BigInteger : IFormattable, IComparable, IComparable<BigInteger>, IEquatable<BigInteger>Di2015NewLine    {Di2015NewLine        internal int _sign;Di2015NewLine        internal uint[] _bits;Di2015NewLine        //SnipDi2015NewLine
11819552Di2015UniqueSeparatorToByteArray()
11819552Di2015UniqueSeparator// System.Numerics.BigIntegerDi2015NewLine/// <summary>Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</summary>Di2015NewLine/// <returns>The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</returns>Di2015NewLinepublic byte[] ToByteArray()Di2015NewLine{Di2015NewLine    if (this._bits == null && this._sign == 0)Di2015NewLine    {Di2015NewLine        return new byte[1];Di2015NewLine    }Di2015NewLine    uint[] array;Di2015NewLine    byte b;Di2015NewLine    if (this._bits == null)Di2015NewLine    {Di2015NewLine        array = new uint[]Di2015NewLine        {Di2015NewLine            (uint)this._signDi2015NewLine        };Di2015NewLine        b = ((this._sign < 0) ? 255 : 0);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        if (this._sign == -1)Di2015NewLine        {Di2015NewLine            array = (uint[])this._bits.Clone();Di2015NewLine            NumericsHelpers.DangerousMakeTwosComplement(array);Di2015NewLine            b = 255;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            array = this._bits;Di2015NewLine            b = 0;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    byte[] array2 = new byte[checked(4 * array.Length)];Di2015NewLine    int num = 0;Di2015NewLine    for (int i = 0; i < array.Length; i++)Di2015NewLine    {Di2015NewLine        uint num2 = array[i];Di2015NewLine        for (int j = 0; j < 4; j++)Di2015NewLine        {Di2015NewLine            array2[num++] = (byte)(num2 & 255u);Di2015NewLine            num2 >>= 8;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    int num3 = array2.Length - 1;Di2015NewLine    while (num3 > 0 && array2[num3] == b)Di2015NewLine    {Di2015NewLine        num3--;Di2015NewLine    }Di2015NewLine    bool flag = (array2[num3] & 128) != (b & 128);Di2015NewLine    byte[] array3 = new byte[num3 + 1 + (flag ? 1 : 0)];Di2015NewLine    Array.Copy(array2, array3, num3 + 1);Di2015NewLine    if (flag)Di2015NewLine    {Di2015NewLine        array3[array3.Length - 1] = b;Di2015NewLine    }Di2015NewLine    return array3;Di2015NewLine}Di2015NewLine
11819599Di2015UniqueSeparator    DBEngine dbe = new DBEngine();Di2015NewLine    Database db = dbe.OpenDatabase(@"z:\\docs\\test.accdb", false, false, "");Di2015NewLine    Recordset rs = db.OpenRecordset("SELECT TheAttachment FROM TheTable", Di2015NewLine        RecordsetTypeEnum.dbOpenDynaset, 0, LockTypeEnum.dbOptimistic);Di2015NewLineDi2015NewLine    Recordset2 rs2 = (Recordset2)rs.Fields["TheAttachment"].Value;Di2015NewLineDi2015NewLine    Field2 f2 = (Field2)rs2.Fields["FileData"];Di2015NewLine    f2.SaveToFile(@"z:\\docs\\ForExample.xls");Di2015NewLine    rs2.Close();Di2015NewLine    rs.Close();Di2015NewLine
11819602Di2015UniqueSeparatormyString = myString.PadLeft(5, '_');Di2015NewLine
11819621Di2015UniqueSeparatorCLASSDEF
11819621Di2015UniqueSeparator"class X"
11819621Di2015UniqueSeparatorCLASSDEF
11819621Di2015UniqueSeparator"class"
11819621Di2015UniqueSeparator"X"
11819621Di2015UniqueSeparatorWS
11819621Di2015UniqueSeparatorCLASSDEF
11819621Di2015UniqueSeparatorCLASSDEF
11819621Di2015UniqueSeparatorfragment
11819621Di2015UniqueSeparatorID
11819621Di2015UniqueSeparatorgrammar T;Di2015NewLineDi2015NewLineoptionsDi2015NewLine{Di2015NewLine  language=CSharp3;     Di2015NewLine  output=AST; Di2015NewLine}Di2015NewLineDi2015NewLinetokens Di2015NewLine{Di2015NewLine  CLASS  = 'class';Di2015NewLine  LPAREN = '(';Di2015NewLine  RPAREN = ')';Di2015NewLine  LBRACK = '{';Di2015NewLine  RBRACK = '}';Di2015NewLine}Di2015NewLineDi2015NewLinepublic programDi2015NewLine : class_def+ EOF!Di2015NewLine ;Di2015NewLineDi2015NewLineclass_defDi2015NewLine : CLASS ID LBRACK RBRACKDi2015NewLine ;Di2015NewLineDi2015NewLineIDDi2015NewLine : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*Di2015NewLine ;Di2015NewLineDi2015NewLineWSDi2015NewLine : (' ' | '\\t' | '\\n' |'\\r' )+ { $channel = Hidden; } Di2015NewLine ;Di2015NewLine
11819621Di2015UniqueSeparator"class foo { }"
11819691Di2015UniqueSeparator<T>
11819691Di2015UniqueSeparatorT
11819691Di2015UniqueSeparatorpublic class MyDataItem<T> : IMyDataItem<T>Di2015NewLine
11819691Di2015UniqueSeparatorT
11819695Di2015UniqueSeparatorToString
11819695Di2015UniqueSeparatorAsEnumerable
11819695Di2015UniqueSeparatorvar ceremonies = db.CeremoniesDi2015NewLine                   .Select(c => new { c.Name, c.Date, c.Id }Di2015NewLine                   .AsEnumerable()Di2015NewLine                   .Select(c => new SelectListItem {Di2015NewLine                               Text = c.Name + "_" + c.Date, Di2015NewLine                               Value = c.Id.ToString()Di2015NewLine                           });Di2015NewLine
11819718Di2015UniqueSeparatorfunction doSomething(message) {Di2015NewLine   debugger;Di2015NewLine   // rest of your codeDi2015NewLine
11819783Di2015UniqueSeparatorusing (WordprocessingDocument doc = WordprocessingDocument.Open(destFileName, true))Di2015NewLine                    {Di2015NewLineDi2015NewLine                        Run run = new Run();Di2015NewLine                        RunProperties runProperties = new RunProperties();Di2015NewLineDi2015NewLine                        runProperties.AppendChild<Underline>(new Underline() { Val = DocumentFormat.OpenXml.Wordprocessing.UnderlineValues.Single });Di2015NewLine                        runProperties.AppendChild<Bold>(new Bold());Di2015NewLine                        run.AppendChild<RunProperties>(runProperties);Di2015NewLine                        run.AppendChild(new Text("test"));Di2015NewLineDi2015NewLine                        //Note: I had to create a paragraph element to place the run into.Di2015NewLine                        Paragraph p = new Paragraph();Di2015NewLine                        p.AppendChild(run);Di2015NewLine                        doc.MainDocumentPart.Document.Body.AppendChild(p);Di2015NewLine                    }Di2015NewLine
11819783Di2015UniqueSeparatornew Underline() { Val = DocumentFormat.OpenXml.Wordprocessing.UnderlineValues.Single }
11819829Di2015UniqueSeparatorPolicyDetailed<T>
11819829Di2015UniqueSeparatorpublic abstract class PolicyDetailedDi2015NewLine{Di2015NewLine    internal abstract DataContainer GetActiveAsset();Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class PolicyDetailed<T> : PolicyDetailed where T : DataContainerDi2015NewLine{Di2015NewLine    internal abstract T GetActiveAssetGeneric();Di2015NewLineDi2015NewLine    internal override DataContainer GetActiveAsset()Di2015NewLine    {Di2015NewLine        return GetActiveAssetGeneric();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PolicyAccident : PolicyDetailed<AccidentContainer>Di2015NewLine{Di2015NewLine    internal override AccidentContainer GetActiveAssetGeneric()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }    Di2015NewLine}Di2015NewLine
11819829Di2015UniqueSeparatorpublic class DataContainer {}Di2015NewLinepublic class AccidentContainer : DataContainer{}Di2015NewLineDi2015NewLinepublic abstract class PolicyDetailedDi2015NewLine{Di2015NewLine    internal abstract DataContainer GetActiveAsset();Di2015NewLine}Di2015NewLineDi2015NewLine// This only exists to satisfy the base class abstract member,Di2015NewLine// but at the same time allowing PolicyDetailed<T> to introduceDi2015NewLine// a new member with the same name.Di2015NewLinepublic abstract class PolicyDetailedBridge<T> : PolicyDetailedDi2015NewLine    where T : DataContainerDi2015NewLine{Di2015NewLine    protected abstract T GetActiveAssetGeneric();Di2015NewLineDi2015NewLine    internal override DataContainer GetActiveAsset()Di2015NewLine    {Di2015NewLine        return GetActiveAssetGeneric();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class PolicyDetailed<T> : PolicyDetailedBridge<T>Di2015NewLine    where T : DataContainerDi2015NewLine{Di2015NewLine    protected sealed override T GetActiveAssetGeneric()Di2015NewLine    {Di2015NewLine        // Call the *new* abstract method. Eek!Di2015NewLine        return GetActiveAsset();Di2015NewLine    }Di2015NewLineDi2015NewLine    internal abstract new T GetActiveAsset();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PolicyAccident : PolicyDetailed<AccidentContainer>Di2015NewLine{Di2015NewLine    internal override AccidentContainer GetActiveAsset()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }            Di2015NewLine}Di2015NewLine
11819829Di2015UniqueSeparatorPolicyDetailed
11820076Di2015UniqueSeparator  private void TextBox_PreviewKeyUp_1(object sender, KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Key == Key.OemPlus || e.Key == Key.Add)Di2015NewLine            MessageBox.Show("Tada");Di2015NewLine    }Di2015NewLine
11820076Di2015UniqueSeparator    <TextBox Text="Hello" PreviewKeyUp="TextBox_PreviewKeyUp_1"/>Di2015NewLine
11820199Di2015UniqueSeparator.\\SQLEXPRESSDi2015NewLine
11820199Di2015UniqueSeparator192.168.1.205\\SQLEXPRESSDi2015NewLineYOURMACHINE\\SQLEXPRESSDi2015NewLine
11820199Di2015UniqueSeparatorInitial Catalog=aspnetdb;
11820199Di2015UniqueSeparator connectionString="data source=192.168.85.124\\SQLEXPRESS;Di2015NewLine   Integrated Security=SSPI;Di2015NewLine   Initial Catalog=aspnetdb;" Di2015NewLine
11820199Di2015UniqueSeparator connectionString="data source=192.168.85.124;Di2015NewLine   Integrated Security=SSPI;Di2015NewLine   Initial Catalog=aspnetdb;" Di2015NewLine
11820199Di2015UniqueSeparator connectionString="data source=192.168.85.124;Di2015NewLine   User ID=username; Password=password;Di2015NewLine   Initial Catalog=aspnetdb;" Di2015NewLine
11820201Di2015UniqueSeparatorv
11820201Di2015UniqueSeparatorcontroller
11820201Di2015UniqueSeparatoraction
11820201Di2015UniqueSeparatorv
11820201Di2015UniqueSeparatori
11820201Di2015UniqueSeparatorDateTime
11820201Di2015UniqueSeparatorint
11820201Di2015UniqueSeparator?id=2
11820201Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Default", // Route nameDi2015NewLine    "{controller}/{action}/{id}", // URL with parametersDi2015NewLine    new { controller = "Home", action = "Index", id = UrlParameter.Optional }Di2015NewLine);Di2015NewLine
11820201Di2015UniqueSeparatorhttp://localhost:50754/home/index/2
11820201Di2015UniqueSeparatorid
11820201Di2015UniqueSeparatorhttp://localhost:50754/home/index/?id=4
11820201Di2015UniqueSeparatorid
11820201Di2015UniqueSeparatorhttp://localhost:50754/home/index/2?id=4
11820201Di2015UniqueSeparatorid
11820201Di2015UniqueSeparatorpublic static void RegisterRoutes(RouteCollection routes)Di2015NewLine{Di2015NewLine    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");Di2015NewLineDi2015NewLine    routes.MapRoute(Di2015NewLine        "visitors", // Route nameDi2015NewLine        "visitor/{action}/{i}/{v}", // URL with parametersDi2015NewLine        newDi2015NewLine        {Di2015NewLine            controller = "Visitor", action = "Test",Di2015NewLine            i = UrlParameter.Optional, v = UrlParameter.OptionalDi2015NewLine        }Di2015NewLine    );Di2015NewLineDi2015NewLine    routes.MapRoute(Di2015NewLine        "Default", // Route nameDi2015NewLine        "{controller}/{action}/{id}", // URL with parametersDi2015NewLine        new { controller = "Home", action = "Index", id = UrlParameter.Optional }Di2015NewLine    );Di2015NewLine}Di2015NewLine
11820201Di2015UniqueSeparator{action}
11820201Di2015UniqueSeparator{controller}/{action}/{id}
11820205Di2015UniqueSeparator public partial class Form1 : FormDi2015NewLine    {Di2015NewLine Form2 frm;Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        frm = new Form2(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        this.Hide();Di2015NewLine        frm.Show();Di2015NewLine    }Di2015NewLine
11820205Di2015UniqueSeparatorpublic partial class Form2 : FormDi2015NewLine    {Di2015NewLine        Form1 frm;Di2015NewLine        public Form2(Form1 fr)Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            frm = fr;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.Hide();Di2015NewLine            frm.Show();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine       }Di2015NewLine    }Di2015NewLine
11820301Di2015UniqueSeparator\\"/win32icon:{0}\\"Di2015NewLine
11820333Di2015UniqueSeparatorDateTime
11820333Di2015UniqueSeparatorAddDays()
11820333Di2015UniqueSeparatorDateTime
11820333Di2015UniqueSeparatorfor(var day = schedule.FromDate; day.Date <= schedule.ToDate; day = day.AddDays(1))Di2015NewLine
11820333Di2015UniqueSeparatorprivate List<WorkoutFormModel> ExtendSchedule(Schedule schedule, IEnumerable<WorkoutInfo> oneWeekWorkouts)Di2015NewLine{Di2015NewLine    var workoutList = new List<WorkoutFormModel>();Di2015NewLine    foreach (var workoutStart = schedule.FromDate; workoutStart <= schedule.ToDate; workoutStart = workoutStart.AddDays(7))Di2015NewLine    {Di2015NewLine        workoutList.AddRange(oneWeekWorkouts.Select(workout => new WorkoutFormModelDi2015NewLine                             {Di2015NewLine                                 ScheduleId = schedule.Id,Di2015NewLine                                 Date = workoutStart.Add(workout.WeekOffset),Di2015NewLine                                 StartTime = ?,Di2015NewLine                                 EndTime = ?,Di2015NewLine                                 InstructorId = workout.Instructor.Id,Di2015NewLine                                 CourseId = workout.Course.IdDi2015NewLine                             }));Di2015NewLine    }Di2015NewLineDi2015NewLine    return workoutList;Di2015NewLine}Di2015NewLine
11820333Di2015UniqueSeparatorWorkoutInfo
11820333Di2015UniqueSeparatorSchedule.Workouts
11820333Di2015UniqueSeparatorWorkoutInfo
11820333Di2015UniqueSeparatorTimeSpan
11820333Di2015UniqueSeparatorWeekOffset
11820333Di2015UniqueSeparatorWorkoutInfo
11820333Di2015UniqueSeparatorWorkout
11820462Di2015UniqueSeparatorvar EventList = (from b in db.bookingsDi2015NewLine                select new DiaryEventDi2015NewLine                {Di2015NewLine                    AllDay = false,Di2015NewLine                    Description = b.bookingDescription,Di2015NewLine                    ID = b.bookingID,Di2015NewLine                    StartDate = (DateTime)b.startDate,Di2015NewLine                    EndDate = (DateTime)b.endDate,Di2015NewLine                    EventTitle = b.bookingName,Di2015NewLine                    Location = b.bookingLocation,Di2015NewLine                    ResourceCalendarID = b.resourceID.ToString(),Di2015NewLine                    ResourceColour = b.bookingColour.Trim()Di2015NewLine                }).ToList();Di2015NewLine
11820467Di2015UniqueSeparator/*/tr[2]/td[2]/p/span/text()Di2015NewLine
11820467Di2015UniqueSeparator<table>Di2015NewLine    <tr>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>text</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>text</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLine    <tr>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>Some text</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>text to extract</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLine    <tr>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>text</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine        <td>Di2015NewLine            <p>Di2015NewLine                <span>text</span>Di2015NewLine            </p>Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLine</table>Di2015NewLine
11820467Di2015UniqueSeparator"text to extract"
11820467Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine <xsl:output omit-xml-declaration="yes" indent="yes"/>Di2015NewLine <xsl:strip-space elements="*"/>Di2015NewLineDi2015NewLine <xsl:template match="node()|@*">Di2015NewLine     "<xsl:copy-of select="/*/tr[2]/td[2]/p/span/text()"/>"Di2015NewLine </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11820467Di2015UniqueSeparator"text to extract"Di2015NewLine
11820467Di2015UniqueSeparatortd
11820467Di2015UniqueSeparator//text()[. = 'text to extract']/ancestor::td[1]Di2015NewLine
11820467Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine <xsl:output omit-xml-declaration="yes" indent="yes"/>Di2015NewLine <xsl:strip-space elements="*"/>Di2015NewLineDi2015NewLine <xsl:template match="node()|@*">Di2015NewLine     <xsl:copy-of select=Di2015NewLine      "//text()[. = 'text to extract']/ancestor::td[1]"/>Di2015NewLine </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11820467Di2015UniqueSeparator<td>Di2015NewLine   <p>Di2015NewLine      <span>text to extract</span>Di2015NewLine   </p>Di2015NewLine</td>Di2015NewLine
11820467Di2015UniqueSeparator//text()[. = 'text to extract']/preceding::text()[1]Di2015NewLine
11820467Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine <xsl:output omit-xml-declaration="yes" indent="yes"/>Di2015NewLine <xsl:strip-space elements="*"/>Di2015NewLineDi2015NewLine <xsl:template match="node()|@*">Di2015NewLine     "<xsl:copy-of select=Di2015NewLine      "//text()[. = 'text to extract']/preceding::text()[1]"/>"Di2015NewLine </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
11820467Di2015UniqueSeparator"Some text"Di2015NewLine
11820467Di2015UniqueSeparator//text()[. = 'This text is static and will never change']/following::text()[1]Di2015NewLine
11820467Di2015UniqueSeparator"Bla bla bla .... more bla bla bla"Di2015NewLine
11820552Di2015UniqueSeparatorprivate void textBox1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (ModifierKeys == Keys.Control)Di2015NewLine        if (e.KeyValue == 221) // You may need to determine this value for your keyboard layout.Di2015NewLine        {Di2015NewLine            textBox1.Text += " + "; // Handle the Key combination.Di2015NewLine            e.SuppressKeyPress = true;  // Prevents key from being passed to underlying controlDi2015NewLine        }Di2015NewLineDi2015NewLine}Di2015NewLine
11820576Di2015UniqueSeparator?Program.Test1()Di2015NewLine
11820617Di2015UniqueSeparatorprivate void OnBrowserClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var ge = e as GeckoDomEventArgs;Di2015NewLine    if (ge.Target.ClassName =="choose_image")Di2015NewLine    {Di2015NewLine       //Handle the click...Di2015NewLine
11820617Di2015UniqueSeparatorvar oldPath = Path.Combine(desDir);Di2015NewLineif(File.Exists(oldPath))Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        File.Delete(oldPath);Di2015NewLine    }Di2015NewLine    catch(Exception error)Di2015NewLine    {Di2015NewLine        //do something about not being able to delete the file yetDi2015NewLine    }Di2015NewLine}Di2015NewLine
11820618Di2015UniqueSeparatorvar oContact = new Contact(txtFirstName.Text, txtLastName.Text);Di2015NewLine
11820618Di2015UniqueSeparatoroContact.ToString()Di2015NewLine
11820624Di2015UniqueSeparatorfor(int index = 0; index < 10; index++)Di2015NewLine{Di2015NewLine  myCombobox.Add(index);Di2015NewLine}Di2015NewLineDi2015NewLineif (myCombobox.SelectedItem != null)Di2015NewLine{Di2015NewLine  int value = ((int)myCombobox.SelectedItem) * 2;Di2015NewLine}Di2015NewLine
11820624Di2015UniqueSeparatorif (myCombobox.SelectedItem != null)Di2015NewLine{Di2015NewLine  int value = int.Parse(myCombobox.SelectedItem.ToString()) * 2;Di2015NewLine}Di2015NewLine
11820640Di2015UniqueSeparatorApplication.Run()
11820711Di2015UniqueSeparatorthis.Database.SqlQuery<TEntity>("EXEC USP_U_Pricing @ProductId", pProductID); Di2015NewLine
11820878Di2015UniqueSeparatorelse ifDi2015NewLine        (Di2015NewLine            ((bytes [b] & 128) == 128) // 10000000Di2015NewLine            || ((bytes [b] & 192) == 192) // 11000000Di2015NewLine            || ((bytes [b] & 224) == 224) // 11100000Di2015NewLine            || ((bytes [b] & 240) == 240) // 11110000Di2015NewLine            || ((bytes [b] & 248) == 248) // 11111000Di2015NewLine            || ((bytes [b] & 252) == 252) // 11111100Di2015NewLine            || ((bytes [b] & 254) == 254) // 11111110Di2015NewLine        )Di2015NewLine
11820878Di2015UniqueSeparatorelse if ((bytes[b] & 128) == 128)
11820878Di2015UniqueSeparatorelse if (bytes[b] == 128Di2015NewLine         || bytes[b] == 192Di2015NewLine         || bytes[b] == 224Di2015NewLine         || bytes[b] == 240Di2015NewLine         || bytes[b] == 248Di2015NewLine         || bytes[b] == 252Di2015NewLine         || bytes[b] == 254Di2015NewLine        )Di2015NewLine
11820878Di2015UniqueSeparatorToByteArray
11821159Di2015UniqueSeparator<ContentControl Content="Test"> Di2015NewLine    <ContentControl.ContentTemplate> Di2015NewLine        <DataTemplate> Di2015NewLine            <Border> Di2015NewLine                <ContentPresenter ContentStringFormat="{}{0}" />Di2015NewLine            </Border> Di2015NewLine        </DataTemplate> Di2015NewLine    </ContentControl.ContentTemplate> Di2015NewLine</ContentControl> Di2015NewLine
11821571Di2015UniqueSeparatorSelectSingleNode
11821571Di2015UniqueSeparatortimeFields = configDoc.SelectNodes("/config/timeDifferenceFields/TimeDifference")
11821856Di2015UniqueSeparatorpublic virtual string SelectedValueDi2015NewLine{Di2015NewLine    get { ... }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (this.Items.Count != 0)Di2015NewLine        {Di2015NewLine            if (value == null || (base.DesignMode && value.Length == 0))Di2015NewLine            {Di2015NewLine                        this.ClearSelection();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            ListItem listItem = this.Items.FindByValue(value);Di2015NewLineDi2015NewLineDi2015NewLine/********** Checks IsPostBack here **********/Di2015NewLine            bool flag = this.Page != null &&Di2015NewLine                        this.Page.IsPostBack &&Di2015NewLine                        this._stateLoaded;Di2015NewLine            if (flag && listItem == null)Di2015NewLine            {Di2015NewLine                throw new ArgumentOutOfRangeException("value",Di2015NewLine                    SR.GetString("ListControl_SelectionOutOfRange", new object[]Di2015NewLine                        {Di2015NewLine                            this.ID,Di2015NewLine                            "SelectedValue"Di2015NewLine                        }));Di2015NewLine            }Di2015NewLine            if (listItem != null)Di2015NewLine            {Di2015NewLine                this.ClearSelection();Di2015NewLine                listItem.Selected = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        this.cachedSelectedValue = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11821952Di2015UniqueSeparatorprivate void CreateUninstaller()Di2015NewLine{Di2015NewLine    using (RegistryKey parent = Registry.LocalMachine.OpenSubKey(Di2015NewLine                 @"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall", true))Di2015NewLine    {Di2015NewLine        if (parent == null)Di2015NewLine        {Di2015NewLine            throw new Exception("Uninstall registry key not found.");Di2015NewLine        }Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            RegistryKey key = null;Di2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                string guidText = UninstallGuid.ToString("B");Di2015NewLine                key = parent.OpenSubKey(guidText, true) ??Di2015NewLine                      parent.CreateSubKey(guidText);Di2015NewLineDi2015NewLine                if (key == null)Di2015NewLine                {Di2015NewLine                    throw new Exception(String.Format("Unable to create uninstaller '{0}\\\\{1}'", UninstallRegKeyPath, guidText));Di2015NewLine                }Di2015NewLineDi2015NewLine                Assembly asm = GetType().Assembly;Di2015NewLine                Version v = asm.GetName().Version;Di2015NewLine                string exe = "\\"" + asm.CodeBase.Substring(8).Replace("/", "\\\\\\\\") + "\\"";Di2015NewLineDi2015NewLine                key.SetValue("DisplayName", "My Program");Di2015NewLine                key.SetValue("ApplicationVersion", v.ToString());Di2015NewLine                key.SetValue("Publisher", "My Company");Di2015NewLine                key.SetValue("DisplayIcon", exe);Di2015NewLine                key.SetValue("DisplayVersion", v.ToString(2));Di2015NewLine                key.SetValue("URLInfoAbout", "http://www.blinemedical.com");Di2015NewLine                key.SetValue("Contact", "support@mycompany.com");Di2015NewLine                key.SetValue("InstallDate", DateTime.Now.ToString("yyyyMMdd"));Di2015NewLine                key.SetValue("UninstallString", exe + " /uninstallprompt");Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                if (key != null)Di2015NewLine                {Di2015NewLine                    key.Close();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            throw new Exception(Di2015NewLine                "An error occurred writing uninstall information to the registry.  The service is fully installed but can only be uninstalled manually through the command line.",Di2015NewLine                ex);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11822172Di2015UniqueSeparatorstring[] textlist = {"a", "b", "c"};Di2015NewLinevar intersecting = from aIndex in Enumerable.Range(0, textlist.Count())Di2015NewLine                   from b in textlist.Skip(aIndex + 1)Di2015NewLine                   let a = textlist.ElementAt(aIndex)Di2015NewLine                   where a != b && a.SomeCondition(b)Di2015NewLine                   select newDi2015NewLine                   {Di2015NewLine                       object1 = a,Di2015NewLine                       object2 = bDi2015NewLine                   };Di2015NewLine
11822278Di2015UniqueSeparatoronMouseDown
11822386Di2015UniqueSeparatorif (RoleManager.IsUserUnrestricted(userId)Di2015NewLine||  element.AllowedRoles.Split(',')Di2015NewLine           .Any(item => roleManager.IsUserInRole(userId, item.Trim()))) {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
11822386Di2015UniqueSeparatorAny
11822585Di2015UniqueSeparatorCommandCollection
11822585Di2015UniqueSeparator[System.Xml.Serialization.XmlRoot("command_strings")]
11822585Di2015UniqueSeparatorversion
11822585Di2015UniqueSeparatorXmlAttribute
11822667Di2015UniqueSeparatorRouteValueDictionary.ContainsKey
11822667Di2015UniqueSeparatorstring.IsNullOrEmpty()
11822667Di2015UniqueSeparatorstring.IsNullOrEmpty()
11822667Di2015UniqueSeparator.ToString()
11822667Di2015UniqueSeparator.ToString()
11822667Di2015UniqueSeparatorif (HttpContext.Current.Request.RequestContext.RouteData.Values.ContainsKey("Language")) {Di2015NewLine    // .. process it hereDi2015NewLine}Di2015NewLine
11822755Di2015UniqueSeparator JustMyImage.Source = new BitmapImage(new Uri(".\\images\\panel.PNG"))Di2015NewLine
11823004Di2015UniqueSeparatorstring sampletext = "text";Di2015NewLineSystem.Security.Cryptography.SHA1 hash = System.Security.Cryptography.SHA1CryptoServiceProvider.Create();Di2015NewLinebyte[] plainTextBytes = Encoding.UTF8.GetBytes(sampletext);Di2015NewLinebyte[] hashBytes = hash.ComputeHash(plainTextBytes);Di2015NewLineDi2015NewLineforeach (byte b in hashBytes) {Di2015NewLine    Console.Write(string.Format("{0:x2}", b));Di2015NewLine}Di2015NewLine
11823065Di2015UniqueSeparatorXmlDataDocument
11823066Di2015UniqueSeparatorpublic static class SomeClassNameDi2015NewLine{Di2015NewLine    public static T CastTo<T>(this object source)Di2015NewLine    {Di2015NewLine        return (T)source;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11823066Di2015UniqueSeparatorif(!eventArg.CastTo<KeyInputArguments>().pressed)Di2015NewLine    Error.Break();Di2015NewLine
11823066Di2015UniqueSeparatorpublic static void HookEvent<TEventType>(....)Di2015NewLine
11823167Di2015UniqueSeparator<html>Di2015NewLine  <head>Di2015NewLine   <meta http-equiv="Content-Type" content="text/html; charset=utf-8">Di2015NewLine   <title>Ð¢ÐµÐ³ LINK</title>  Di2015NewLine   <link rel="stylesheet" type="text/css" href="styles.css">Di2015NewLine   <script type="text/javascript" src="DatePicker.js"></script>Di2015NewLine  </head> Di2015NewLine  <body>Di2015NewLine    <p>...</p>Di2015NewLine  </body>Di2015NewLine</html>Di2015NewLine
11823177Di2015UniqueSeparatorSystem.Xml
11823177Di2015UniqueSeparatorXmlDocument
11823177Di2015UniqueSeparatorSystem.Xml
11823177Di2015UniqueSeparatorXDocument
11823177Di2015UniqueSeparatorSystem.Xml.dll
11823188Di2015UniqueSeparator<script type="text/jscript">Di2015NewLine    function clock(){ Di2015NewLine      var d = new Date(); Di2015NewLine      var h = d.getHours(); Di2015NewLine      var m = d.getMinutes(); Di2015NewLine      var s = d.getSeconds(); Di2015NewLine      $('#clock').html(h+"<span class='colon'>:</span>"+m+"<span class='colon'>:</span>"+s); Di2015NewLine    //  $('.colon').fadeTo(1000, .2); Di2015NewLine      setTimeout(clock, 1000); Di2015NewLine    } Di2015NewLine
11823188Di2015UniqueSeparator<body onload="clock()">
11823188Di2015UniqueSeparator<span id="clock" style="font-family:Calibri;color:White;font-weight:bold;font-size:1.3em;"></span>Di2015NewLine
11823355Di2015UniqueSeparatorConsole.WriteLine(row);
11823355Di2015UniqueSeparatorConsole.WriteLine();
11823355Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        int N;Di2015NewLineDi2015NewLine        doDi2015NewLine        {Di2015NewLine            Console.Write("Please enter N (N >= 20 || N <= 0): ");Di2015NewLine        }Di2015NewLine        while (!int.TryParse(Console.ReadLine(), out N) || N >= 20 || N <= 0);Di2015NewLineDi2015NewLine        for (int row = 1; row <= N; row++)Di2015NewLine        {Di2015NewLine            for (int col = row; col <= row + N - 1; )Di2015NewLine            {Di2015NewLineDi2015NewLine                Console.Write(col + " ");Di2015NewLine                col++;Di2015NewLine            }Di2015NewLine            Console.WriteLine();Di2015NewLine        } Di2015NewLineDi2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLineDi2015NewLinePlease enter N (N >= 20 || N <= 0): 5Di2015NewLine1 2 3 4 5 Di2015NewLine2 3 4 5 6 Di2015NewLine3 4 5 6 7 Di2015NewLine4 5 6 7 8 Di2015NewLine5 6 7 8 9 Di2015NewLine
11823378Di2015UniqueSeparatorConfigure
11823378Di2015UniqueSeparatorcontainer.Register(Di2015NewLine    ClassesDi2015NewLine        .FromAssemblyContaining<IVehicle>()Di2015NewLine        .BasedOn<IVehicle>()Di2015NewLine        .Configure(k => Di2015NewLine            k.DependsOn(new {someGuns = twoPistols, driver = rookie})))Di2015NewLine
11823469Di2015UniqueSeparatorusing Newtonsoft.Json;Di2015NewLineList<Dictionary<string, string>> testDictionary = new List<Dictionary<string, string>()>();Di2015NewLinestring json = JsonConvert.SerializeObject(testDictionary);Di2015NewLine
11823576Di2015UniqueSeparatorreturn ASCIIEncoding.ASCII.GetString(enc);Di2015NewLine...Di2015NewLinebyte[] data = Encoding.ASCII.GetBytes(Data);Di2015NewLine
11823576Di2015UniqueSeparatorreturn Convert.ToBase64String(enc);Di2015NewLine...Di2015NewLinebyte[] data = Convert.FromBase64String(Data);Di2015NewLine
11823588Di2015UniqueSeparatorfile.Replace
11823588Di2015UniqueSeparatorReplace
11823588Di2015UniqueSeparatorfile = file.Replace(pname + "@" + pno, ...);Di2015NewLine
11823588Di2015UniqueSeparatorstring file= sr1.ReadToEnd();Di2015NewLine... // code which doesn't change sr1 ...Di2015NewLinestring efile= sr1.ReadToEnd(); // returns nullDi2015NewLine
11823588Di2015UniqueSeparatorStreamReader
11823588Di2015UniqueSeparatorfile
11823588Di2015UniqueSeparatorReplace
11823588Di2015UniqueSeparatorusing
11823588Di2015UniqueSeparatorprivate void btn_edit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    bufferedListView1.Items.Clear();Di2015NewLine    string fileContents = File.ReadAllText("C:\\\\sample.txt");Di2015NewLine    string replacedContents = fileContenxt.Replace(pname + "@" + pno, Di2015NewLine        txt_editname.Text + "@" + txt_editno.Text);Di2015NewLine    File.WriteAllText("C:\\\\sample.txt", replacedContents);Di2015NewLine    // Rest of codeDi2015NewLine}Di2015NewLine
11823710Di2015UniqueSeparator<asp:PlaceHolder id="placeHolderID" runat="server" />Di2015NewLine
11823710Di2015UniqueSeparatorif (ddl.selectedvalue ==1) Di2015NewLine{Di2015NewLineTextBox txt1 = new TextBox();Di2015NewLinetxt1.ID = "newTxt1";Di2015NewLineplaceHolderID.Controls.Add(txt1);Di2015NewLineDi2015NewLine}Di2015NewLine
11823721Di2015UniqueSeparatorCreateRequest
11823721Di2015UniqueSeparatorpublic static T CreateRequest<T>()Di2015NewLine    where T : new()Di2015NewLine{Di2015NewLine    if(!typeof(Request).IsAssignableFrom(typeof(T)))Di2015NewLine        throw new ArgumentException();Di2015NewLineDi2015NewLine    var result = new T();Di2015NewLine    Request request = (Request)(object)result;Di2015NewLine   // ...Di2015NewLine   // Assign default values, etc.Di2015NewLine   // ...Di2015NewLine   return result ;Di2015NewLine}Di2015NewLine
11823721Di2015UniqueSeparatorCreateRequest
11823721Di2015UniqueSeparatorpublic static object CreateRequest(Type requestType)Di2015NewLine {Di2015NewLine    if(!typeof(Request).IsAssignableFrom(requestType))Di2015NewLine        throw new ArgumentException();Di2015NewLineDi2015NewLine    var result = Activator.CreateInstance(requestType);Di2015NewLine    Request request = (Request)result;Di2015NewLine   // ...Di2015NewLine   // Assign default values, etc.Di2015NewLine   // ...Di2015NewLine   return result ;Di2015NewLine}Di2015NewLine
11823739Di2015UniqueSeparatorOnPaintBackground
11823739Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnPaintBackground(PaintEventArgs e)Di2015NewLine{Di2015NewLine    base.OnPaintBackground(e);Di2015NewLine    Rectangle lasttabrect = tabControl1.GetTabRect(tabControl1.TabPages.Count - 1);Di2015NewLine    RectangleF emptyspacerect = new RectangleF(Di2015NewLine            lasttabrect.X + lasttabrect.Width + tabControl1.Left,Di2015NewLine            tabControl1.Top + lasttabrect.Y, Di2015NewLine            tabControl1.Width - (lasttabrect.X + lasttabrect.Width), Di2015NewLine            lasttabrect.Height);Di2015NewLineDi2015NewLine    Brush b = Brushes.BlueViolet; // the color you wantDi2015NewLine    e.Graphics.FillRectangle(b, emptyspacerect );Di2015NewLine}Di2015NewLine
11824007Di2015UniqueSeparatorpublic class DataRC {Di2015NewLine      public object[] aObj { get; set;}Di2015NewLine      public DateTime dtTime {get; set;}Di2015NewLine}Di2015NewLine
11824007Di2015UniqueSeparatorpublic class ArgsParserDi2015NewLine{Di2015NewLineDi2015NewLine   public DataRC Dispatch(string arg)Di2015NewLine   {Di2015NewLine       DataRC dResult = new DataRC();Di2015NewLine       int time;Di2015NewLine       int i = 0;Di2015NewLine       dResult.aObj = new object[10];Di2015NewLine       if (int.Parse(arg) >= 0 && int.Parse(arg) <= 20)Di2015NewLine       {Di2015NewLine           dResult.aObj[i] = new ComputeParam(int.Parse(arg));Di2015NewLine       }Di2015NewLine       elseDi2015NewLine       {Di2015NewLine           if (arg[0] == '/' && arg[1] == 't')Di2015NewLine           {Di2015NewLine               Options opt = new Options();Di2015NewLine               // Is this where you need the time?Di2015NewLine               dResult.dtTime = opt.Option(arg);Di2015NewLine           }Di2015NewLine       }Di2015NewLine       return dResult;Di2015NewLine   }Di2015NewLine }Di2015NewLine}Di2015NewLine
11824106Di2015UniqueSeparatorISingleObjectBuilder
11824106Di2015UniqueSeparatorISingleObjectBuilder
11824106Di2015UniqueSeparatorISingleObjectBuilder
11824106Di2015UniqueSeparatorISingleObjectBuilder
11824106Di2015UniqueSeparatorISingleObjectBuilder
11824106Di2015UniqueSeparatorusing
11824106Di2015UniqueSeparator.
11824106Di2015UniqueSeparatorIEnumerable<T>
11824106Di2015UniqueSeparatorIEnumerable<T>
11824106Di2015UniqueSeparatorFirst(...)
11824106Di2015UniqueSeparatorFirstOrDefault(...)
11824106Di2015UniqueSeparatorAny(...)
11824106Di2015UniqueSeparatorSelect(...)
11824106Di2015UniqueSeparatorIEnumerable<T>
11824106Di2015UniqueSeparatorT
11824106Di2015UniqueSeparator.First()
11824106Di2015UniqueSeparatorYourType foo = ...Di2015NewLinevar first = foo.First();Di2015NewLine
11824139Di2015UniqueSeparatorkey=(.*?)/photo.jpgDi2015NewLine
11824299Di2015UniqueSeparatorFirstOrDefault()
11824391Di2015UniqueSeparatorvar propInfo = info.GetType().GetProperty(propertyName);Di2015NewLineif (propInfo != null)Di2015NewLine{Di2015NewLine    propInfo.SetValue(info, value, null);Di2015NewLine}Di2015NewLine
11824469Di2015UniqueSeparatorDataTrigger
11824469Di2015UniqueSeparatorBackground
11824469Di2015UniqueSeparatorStyle
11824469Di2015UniqueSeparatorListViewItem
11824469Di2015UniqueSeparator<ListView>Di2015NewLine    <ListView.ItemContainerStyle>Di2015NewLine        <Style TargetType="{x:Type ListViewItem}">Di2015NewLine            <Style.Triggers>Di2015NewLine                <DataTrigger Binding="{Binding Path=PeriodStatus}" Value="Added">Di2015NewLine                    <Setter Property="Background" Value="Green" />Di2015NewLine                </DataTrigger>Di2015NewLine                <DataTrigger Binding="{Binding Path=PeriodStatus}" Value="Deleted">Di2015NewLine                    <Setter Property="Background" Value="Red" />Di2015NewLine                </DataTrigger>Di2015NewLine                <DataTrigger Binding="{Binding Path=PeriodStatus}" Value="Edited">Di2015NewLine                    <Setter Property="Background" Value="Yellow" />Di2015NewLine                </DataTrigger>Di2015NewLine            <Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </ListView.ItemContainerStyle>Di2015NewLine</ListView>Di2015NewLine
11824544Di2015UniqueSeparatormyTreeView.SelectedNode = null;//will deselect itDi2015NewLine
11824614Di2015UniqueSeparatorusing (varconn = new SqlConnection(connectionString)) Di2015NewLineusing (var cmd = conn.CreateCommand(...)))Di2015NewLine{ Di2015NewLine    conn.Open();Di2015NewLineDi2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
11824637Di2015UniqueSeparatorInsertCommand.Parameters["@RETURN_VALUE"].Value;Di2015NewLine
11824637Di2015UniqueSeparatorInsertCommand.Parameters[0].Value;Di2015NewLine
11824637Di2015UniqueSeparator@UserID
11824637Di2015UniqueSeparator@RETURN_VALUE
11824650Di2015UniqueSeparatorforeach (var tag in ArrayNode)Di2015NewLine{Di2015NewLine  Comp = Comp.Replace(tag.TagPointer, tag.TagValue);Di2015NewLine}Di2015NewLine
11824790Di2015UniqueSeparator[DllImport ("ServerTool.dll"), CallingConvention=CallingConvention.StdCall)]Di2015NewLine
11824796Di2015UniqueSeparator[^)]+
11824796Di2015UniqueSeparator.+
11824796Di2015UniqueSeparator.+
11824832Di2015UniqueSeparatorTaskCompletionSource
11824832Di2015UniqueSeparatorTaskCompletionSource.TrySetResult
11824832Di2015UniqueSeparatorTaskCompletionSource.Task
11824832Di2015UniqueSeparatorTask.WaitAny
11824832Di2015UniqueSeparatorTask.WhenAll
11824832Di2015UniqueSeparator{ success, all failed }
11824905Di2015UniqueSeparatorsender
11824905Di2015UniqueSeparatorFindVisualParent
11824905Di2015UniqueSeparatorFindVisualChildren<DependencyObject>
11824905Di2015UniqueSeparatorcontroldefaults
11824905Di2015UniqueSeparatorPanel
11824905Di2015UniqueSeparatorGroupBox
11824924Di2015UniqueSeparator SqlConnection conn = new SqlConnection (yourconnectionstring + ";Connection Timeout=1;");          Di2015NewLine tryDi2015NewLine { Di2015NewLine     conn.Open();Di2015NewLine     conn.Close();Di2015NewLine }Di2015NewLine catch (SqlException ex)Di2015NewLine {Di2015NewLine     if (ex.Number == 18456)Di2015NewLine     {Di2015NewLine          // invalid loginDi2015NewLine     }Di2015NewLine }Di2015NewLine
11825030Di2015UniqueSeparator3rdParty
11825030Di2015UniqueSeparatormy.parts
11825092Di2015UniqueSeparator foreach (RepeaterItem item in rptReports.Items)Di2015NewLine        {Di2015NewLineDi2015NewLine    Label lblReportID= (Label)item.FindControl("lblReportID");Di2015NewLine     string ReportID = lblReportID.Text;Di2015NewLine}Di2015NewLine
11825092Di2015UniqueSeparator <div id="hiddenContent2" runat="server"> Di2015NewLine        <%# Eval("ReportID") %>Di2015NewLine </div>Di2015NewLineDi2015NewLine foreach (RepeaterItem item in rptReports.Items)Di2015NewLine {Di2015NewLineDi2015NewLine        System.Web.UI.HtmlControls.HtmlGenericControl hiddenContent2 = (System.Web.UI.HtmlControls.HtmlGenericControl)item.FindControl("hiddenContent2");Di2015NewLine         string ReportID = hiddenContent2.InnerHtml;Di2015NewLine }Di2015NewLine
11825259Di2015UniqueSeparatorQueryBase..QueryUserInfo.Something()
11825259Di2015UniqueSeparatorQueryBase.QueryStats.Something()
11825381Di2015UniqueSeparatorusing System.Security;Di2015NewLineusing System.Security.Principal;Di2015NewLineDi2015NewLine......Di2015NewLineSecurityIdentifier sid = new SecurityIdentifier("S-1-5-32-544");Di2015NewLinestring name = sid.Translate(typeof(NTAccount)).Value;Di2015NewLineConsole.WriteLine(name);Di2015NewLine
11825381Di2015UniqueSeparator"BUILTIN\\Administrators"Di2015NewLine
11825406Di2015UniqueSeparatorWorksheet.Range["A1","G1"].Interior.Color = Excel.XlRgbColor.rgbDarkBlue;Di2015NewLineWorksheet.Range["A1","G1"].Font.Color = Excel.XlRgbColor.rgbWhite;Di2015NewLine// where "A1" to "G1" is your header rangeDi2015NewLine
11825475Di2015UniqueSeparatorMuallak_tarihi
11825475Di2015UniqueSeparatorDATETIME
11825475Di2015UniqueSeparatorGetDateTime
11825475Di2015UniqueSeparatorg_muallak_tarihi = row_muallakt["Muallak_tarihi"] as DateTime;Di2015NewLine
11825475Di2015UniqueSeparator@parameter
11825475Di2015UniqueSeparatorDATETIME
11825475Di2015UniqueSeparatorToString
11825475Di2015UniqueSeparatorda_muallakt.SelectCommand.Parameters.AddWithValue("@parameter",g_listetarihi);Di2015NewLine
11825629Di2015UniqueSeparator  public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        OrderItemEntity objfrom = (OrderItemEntity)obj;Di2015NewLineDi2015NewLine        return ((this.prg_ordine == objfrom.prg_ordine) && (this.prg_ordine_riga == objfrom.prg_ordine_riga));Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        uncheckedDi2015NewLine        {Di2015NewLine            return ((this.prg_ordine * 100000) + this.prg_ordine_riga);Di2015NewLine        }Di2015NewLine
11825708Di2015UniqueSeparatorObservableCollection
11825708Di2015UniqueSeparatorListedNote
11825708Di2015UniqueSeparatorListedNote
11825708Di2015UniqueSeparatorListedNote
11825708Di2015UniqueSeparatorINotifyPropertyChanged
11825836Di2015UniqueSeparatorProperties.Resources.<name_of_resource>Di2015NewLine
11825836Di2015UniqueSeparatorSoundPlayer myPlayer = new SoundPlayer(yourNamespace.Properties.Resources.mySound);Di2015NewLinemyPlayer.Play();Di2015NewLine
11825856Di2015UniqueSeparator    private IComponentChangeService _changeService;Di2015NewLineDi2015NewLine    public override System.ComponentModel.ISite SiteDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return base.Site;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _changeService = (IComponentChangeService)GetService(typeof(IComponentChangeService));Di2015NewLine            if (_changeService != null)Di2015NewLine                _changeService.ComponentChanged -= new ComponentChangedEventHandler(OnComponentChanged);Di2015NewLine            base.Site = value;Di2015NewLine            if (!DesignMode)Di2015NewLine                return;Di2015NewLine            _changeService = (IComponentChangeService)GetService(typeof(IComponentChangeService));Di2015NewLine            if (_changeService != null)Di2015NewLine                _changeService.ComponentChanged += new ComponentChangedEventHandler(OnComponentChanged);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnComponentChanged(object sender, ComponentChangedEventArgs ce)Di2015NewLine    {Di2015NewLine        CustomButton aBtn = ce.Component as CustomButton;Di2015NewLine        if (aBtn == null || !aBtn.DesignMode)Di2015NewLine            return;Di2015NewLine        if (((IComponent)ce.Component).Site == null || ce.Member == null || ce.Member.Name != "Text")Di2015NewLine            return;Di2015NewLine        if (aBtn.Text == aBtn.Name)Di2015NewLine            aBtn.Text = aBtn.Name.Replace("customButton", "button");Di2015NewLine    }Di2015NewLine
11825942Di2015UniqueSeparatorFor this release of SQL Server, the value of this setting is ignored, and the TIFF image is always rendered as 24-bit.
11826000Di2015UniqueSeparator[ Subject( "Inner join example using entity framework") ]Di2015NewLinepublic class When_getting_towar_by_kategory_and_there_are_2_kategoriesDi2015NewLine{Di2015NewLine    Establish context = () =>Di2015NewLine                        {Di2015NewLine                            myContext = new MyContext();Di2015NewLine                            Database.SetInitializer(new CreateDatabaseIfNotExists<MyContext>());Di2015NewLine                            var first = new Kategory { Nazwa = "First" };Di2015NewLine                            myContext.Kategories.Add(first);Di2015NewLine                            var second = new Kategory { Nazwa = "Second" };Di2015NewLine                            myContext.Kategories.Add(second);Di2015NewLine                            myContext.Towars.Add(new Towar { Cena = "found", Kategory = first });Di2015NewLine                            myContext.Towars.Add(new Towar { Cena = "notFound", Kategory = second });Di2015NewLine                            myContext.SaveChanges();Di2015NewLine                            SUT = new Controller(myContext);Di2015NewLine                        };Di2015NewLineDi2015NewLineDi2015NewLine    private Because of = () => { result = SUT.GetTowarByKategory("First"); };Di2015NewLineDi2015NewLine    private It should_return_list_filtered_by_kategory = () => { result.Select(x => x.Cena).SequenceEqual(new[] { "found" }).Should().BeTrue(); };Di2015NewLine    private static Controller SUT;Di2015NewLine    private static IEnumerable<Towar> result;Di2015NewLine    private static MyContext myContext;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ControllerDi2015NewLine{Di2015NewLine    private readonly MyContext context;Di2015NewLineDi2015NewLine    public Controller(MyContext context)Di2015NewLine    {Di2015NewLine        this.context = context;Di2015NewLine    }Di2015NewLine    public IEnumerable<Towar> GetTowarByKategory(string category)Di2015NewLine    {Di2015NewLine        var res = from t in context.TowarsDi2015NewLine                    where t.Kategory.Nazwa == categoryDi2015NewLine                    select t;Di2015NewLineDi2015NewLine        return res;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class KategoryDi2015NewLine{Di2015NewLine    [Key] Di2015NewLine    public int Id_kat { get; set; }Di2015NewLine    public string Nazwa { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TowarDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    public int Id_tow { get; set; }Di2015NewLine    public Kategory Kategory { get; set; }Di2015NewLine    public string Cena { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyContext : DbContextDi2015NewLine{Di2015NewLine    public DbSet<Kategory> Kategories { get; set; }Di2015NewLine    public DbSet<Towar> Towars { get; set; }Di2015NewLine}Di2015NewLine
11826541Di2015UniqueSeparatorpublic IEnumerable<T> FindVisualChildren<T>( DependencyObject depObj ) where T : DependencyObjectDi2015NewLine        {Di2015NewLine           if( depObj != null )Di2015NewLine           {Di2015NewLine              for( int i = 0; i < VisualTreeHelper.GetChildrenCount( depObj ); i++ )Di2015NewLine              {Di2015NewLine                 DependencyObject child = VisualTreeHelper.GetChild( depObj, i );Di2015NewLine                 if( child != null && child is T )Di2015NewLine                 {Di2015NewLine                    yield return (T)child;Di2015NewLine                 }Di2015NewLineDi2015NewLine                 foreach( T childOfChild in FindVisualChildren<T>( child ) )Di2015NewLine                 {Di2015NewLine                    yield return childOfChild;Di2015NewLine                 }Di2015NewLine              }Di2015NewLine           }Di2015NewLine        }Di2015NewLine
11826541Di2015UniqueSeparatorforeach (var rectangle in FindVisualChildren<Rectangle>(this))Di2015NewLine{Di2015NewLine  if (rectangle.Name == "rectangleBarChart")Di2015NewLine     /*   Your code here  */Di2015NewLine}Di2015NewLine
11826615Di2015UniqueSeparatorpublic static List<BoxPair> CreateBoxPair (int iBoxCount)Di2015NewLine{Di2015NewLine    for (int i = 0; i < iBoxCount; i++)Di2015NewLine    {Di2015NewLine        var primary = new SetTopBox();Di2015NewLine        var backup = new SetTopBox();Di2015NewLineDi2015NewLine        primary.IBoxNumber = i;             Di2015NewLine        primary.SDeviceName = "Box" + (i + 1).ToString("00");Di2015NewLine        primary.Role = Box.ROLE_PRIMARY;Di2015NewLineDi2015NewLine        backup.IBoxNumber = i;Di2015NewLine        backup.SDeviceName = "Box" + (i + 1).ToString("00");Di2015NewLine        backup.Role = Role.ROLE_BACKUP;Di2015NewLineDi2015NewLine        var primaryPair = new BoxPair(primary, Role);Di2015NewLine        var backupPair = new BoxPair(backup, Role);Di2015NewLineDi2015NewLine        lstBoxes.Add(primaryPair);Di2015NewLine        lstBoxes.Add(backupPair);Di2015NewLineDi2015NewLine        Declarations.BOXES.Add(primaryPair);Di2015NewLine        Declarations.BOXES.Add(backupPair);Di2015NewLine    }                        Di2015NewLineDi2015NewLine    return lstBoxes;Di2015NewLine}Di2015NewLine
11826615Di2015UniqueSeparatorprimary
11826615Di2015UniqueSeparatorbackup
11826615Di2015UniqueSeparatorforeach
11826783Di2015UniqueSeparatorstring.Split
11826783Di2015UniqueSeparatorvar parts = pathFolder.Split(new [] {'\\\\'}, StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
11826783Di2015UniqueSeparatorPath
11826954Di2015UniqueSeparatorvar cell = new DataGridViewButtonCell();Di2015NewLinecell.Value = "Button text"Di2015NewLinecell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;Di2015NewLinedataGrid.Rows[rowIndex].Cells[columnIndex] = cell;Di2015NewLine
11826954Di2015UniqueSeparatorfor (int i = 0; i < dataGrid.Rows.Count; i++)Di2015NewLine    if (i % 2 == 1) // whatever the condition isDi2015NewLine        dataGrid.Rows[i].Cells[COLUMN_WITH_BUTTONS] = new DataGridViewTextBoxCell();Di2015NewLine
11826980Di2015UniqueSeparatorstream.Position += 4
11826980Di2015UniqueSeparatorstream.Seek(4, SeekOrigin.Current);
11826980Di2015UniqueSeparatorLength
11826980Di2015UniqueSeparatorCanSeek
11826980Di2015UniqueSeparatorLength
11826980Di2015UniqueSeparatorx / size
11826980Di2015UniqueSeparatorx % size
11826991Di2015UniqueSeparatorgameObj.Add(new GamePlay(gameObj));Di2015NewLine
11826991Di2015UniqueSeparatorgameObj.Add(newGame);Di2015NewLine
11827105Di2015UniqueSeparatorvar obj = new[] { Di2015NewLine    new object[] { "Bondi Beach", -33.890542, 151.274856, 4 },Di2015NewLine    new object[] { "Coogee Beach", -33.923036, 151.259052, 5 },Di2015NewLine    new object[] { "Cronulla Beach", -34.028249, 151.157507, 3 },Di2015NewLine    new object[] { "Manly Beach", -33.80010128657071, 151.28747820854187, 2 },Di2015NewLine    new object[] { "Maroubra Beach", -33.950198, 151.259302, 1 },Di2015NewLine};Di2015NewLinevar json = JsonConvert.SerializeObject(obj);Di2015NewLine
11827180Di2015UniqueSeparatorApplication.Exit()
11827180Di2015UniqueSeparatornull
11827180Di2015UniqueSeparatornull
11827180Di2015UniqueSeparatordo_Login()
11827299Di2015UniqueSeparatorCurrentProgress
11827299Di2015UniqueSeparatorWebBrowserProgressChangedEventArgs
11827299Di2015UniqueSeparator    private void webBrowser1_ProgressChanged(object sender, WebBrowserProgressChangedEventArgs e)Di2015NewLine    {Di2015NewLine        toolStripProgressBar1.Maximum = (int)e.MaximumProgress;Di2015NewLine        toolStripProgressBar1.Value = ((int)e.CurrentProgress < 0 || (int)e.MaximumProgress < (int)e.CurrentProgress) ? (int)e.MaximumProgress : (int)e.CurrentProgress;Di2015NewLine    }Di2015NewLine
11827324Di2015UniqueSeparatordb.createCollection("mycoll6", {capped:true, size:536870913})Di2015NewLine
11827324Di2015UniqueSeparator"errmsg" : "exception: can't map file memory - mongo requires 64 bit build for larger datasets",Di2015NewLine
11827324Di2015UniqueSeparatoruse adminDi2015NewLineshow dbsDi2015NewLine
11827324Di2015UniqueSeparator[smallfiles][2]
11827324Di2015UniqueSeparatorsmallfiles
11827337Di2015UniqueSeparatorglobal.asax
11827337Di2015UniqueSeparatorusing
11827337Di2015UniqueSeparatorusing(var con = new Connection("my connection string"))Di2015NewLine{Di2015NewLine}Di2015NewLine
11827551Di2015UniqueSeparatorStore
11827551Di2015UniqueSeparatorStore
11827551Di2015UniqueSeparatorEquipment
11827551Di2015UniqueSeparatorequipment.StoreId
11827551Di2015UniqueSeparatorEquipment
11827551Di2015UniqueSeparatorStore
11827620Di2015UniqueSeparatorvar sql = "SELECT IDENT_CURRENT('TableName')";Di2015NewLinevar query = session.CreateSQLQuery(sql);Di2015NewLinevar result = query.UniqueResult();Di2015NewLine
11827659Di2015UniqueSeparatorMenu
11827659Di2015UniqueSeparatorpublic class MenuDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Roles { get; set; }Di2015NewLine    public List<Menu> Children { get; set; }Di2015NewLine    /// <summary>Di2015NewLine    /// Checks whether this object or any of its children are in the specified roleDi2015NewLine    /// </summary>        Di2015NewLine    public bool InRole(string role)Di2015NewLine    {Di2015NewLine        if (role == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("role");Di2015NewLine        }Di2015NewLine        var inRole = (this.Roles ?? String.Empty).Contains(role);Di2015NewLine        if (!inRole & Children != null)Di2015NewLine        {Di2015NewLine            return Children.Any(child => child.InRole(role));Di2015NewLine        }Di2015NewLine        return inRole;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11827659Di2015UniqueSeparatorvar inRole = menuList.Where(menu => menu.InRole("admin"));Di2015NewLine
11827772Di2015UniqueSeparatorMarshal.PrelinkAll(Type)
11827772Di2015UniqueSeparatorMarshal.Prelink(MethodInfo)
11827772Di2015UniqueSeparatorDllNotFoundException
11827782Di2015UniqueSeparatorSource
11827782Di2015UniqueSeparatorImage
11827782Di2015UniqueSeparatorprivate void buttonx_Click(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    string path = ... // path to image file hereDi2015NewLine    img1.Source = new BitmapImage(new Uri(path));Di2015NewLine}Di2015NewLine
11827782Di2015UniqueSeparatorprivate void Button_Click(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    Button button = sender as Button;Di2015NewLine    string path = null;Di2015NewLine    if (button == button1)Di2015NewLine    {Di2015NewLine        path = ... // path to image file 1 hereDi2015NewLine    }Di2015NewLine    else if ...Di2015NewLineDi2015NewLine    if (path != null)Di2015NewLine    {Di2015NewLine        img1.Source = new BitmapImage(new Uri(path));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11827782Di2015UniqueSeparator<StackPanel Name="parent">   Di2015NewLine    <StackPanel Name="child" />   Di2015NewLine</StackPanel>  Di2015NewLineDi2015NewLineparent.Children.Remove(child);Di2015NewLineparent.Children.Add(...); // some other control hereDi2015NewLine
11827782Di2015UniqueSeparator<Grid>Di2015NewLine    <StackPanel Name="child1">Di2015NewLine    </StackPanel>Di2015NewLine    <StackPanel Name="child2">Di2015NewLine    </StackPanel>Di2015NewLine    <StackPanel Name="child3">Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine
11827782Di2015UniqueSeparatorZIndex
11827782Di2015UniqueSeparatorprivate void Button_Click(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    ...Di2015NewLine    // reset ZIndex on previous topmost panel to 0 beforeDi2015NewLine    Panel.SetZIndex(child1, 1);Di2015NewLine}Di2015NewLine
11827885Di2015UniqueSeparatoritemColl
11827885Di2015UniqueSeparatornew
11827885Di2015UniqueSeparatorforeach
11827885Di2015UniqueSeparatorint
11827885Di2015UniqueSeparatorIEnumerable<AnonymousType>
11827885Di2015UniqueSeparatorvar itemColl = from p in re.KategorieDi2015NewLine               where p.Nazwa == categoryDi2015NewLine               select p.Id_Kat;Di2015NewLine
11827885Di2015UniqueSeparatorIEnumerable<int>
11827885Di2015UniqueSeparatorId_kat
11827885Di2015UniqueSeparatorforeach (var s in itemColl)Di2015NewLine{Di2015NewLine    Console.WriteLine(s.Id_kat);Di2015NewLine}Di2015NewLine
11827885Di2015UniqueSeparatorint
11827885Di2015UniqueSeparatorIEnumerable<int>
11827919Di2015UniqueSeparator  new Thread(() =>Di2015NewLine  {Di2015NewLine      if (cb.Dispatcher.CheckAccess())Di2015NewLine        {Di2015NewLine           list.Add("Zoop");Di2015NewLine        }Di2015NewLine      elseDi2015NewLine       {Di2015NewLine        cb.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal,Di2015NewLine                new Action(delegate Di2015NewLine                         {Di2015NewLine                           list.Add("Zoop");Di2015NewLine                         }Di2015NewLine       ));Di2015NewLine       }Di2015NewLine  }).Start();Di2015NewLine
11827988Di2015UniqueSeparatorGetHashCode()
11827988Di2015UniqueSeparatorName
11827988Di2015UniqueSeparatorpublic override int GetHashCode() Di2015NewLine{ Di2015NewLine    return Name.ToUpperInvariant().GetHashCode(); Di2015NewLine} Di2015NewLine
11828034Di2015UniqueSeparator SELECT Assignments.Task_No, Assignments.Assignment_No, Assignments.Assignment_Date,Di2015NewLine Task_Information.Client_Name, Emp_Information.F_Name, Emp_Information.L_NameDi2015NewLine  FROM Emp_Information Di2015NewLine  INNER JOIN Task_Information Di2015NewLine  ON Task_Information.Task_No = Assignments.Task_No Di2015NewLine  INNER JOIN Assignments Di2015NewLine  ON Emp_Information.Emp_ID = Assignments.AssigneeDi2015NewLine  WHERE (((Assignments.Assignment_Date) like "%this is just some date the user has to enter...%"))Di2015NewLine
11828098Di2015UniqueSeparatorSubstring
11828098Di2015UniqueSeparatorRemove
11828098Di2015UniqueSeparatorvar start = text.IndexOf("\\\\", StringComparison.InvariantCultureIgnoreCase);Di2015NewLinevar end = text.LastIndexOf("_", StringComparison.InvariantCultureIgnoreCase);Di2015NewLineDi2015NewLine// no error checking: assumes both indexes are positiveDi2015NewLinereturn text.Substring(start + 1, end - start - 1);Di2015NewLine
11828210Di2015UniqueSeparatorSelectedIndexChanged
11828210Di2015UniqueSeparator        XmlDocument doc = new XmlDocument();Di2015NewLine        doc.Load(@"path/to/file.xml");Di2015NewLine        XmlNode subarea = doc.SelectSingleNode("/MerchandiseTrack/Merchandise_Zones/Storage_Location/head/body[@id=" + locationComboBox.SelectedItem.ToString()+ "]/Sub-Area");Di2015NewLine        string[] areas = subarea.InnerText.Split(',');Di2015NewLine        foreach (string area in areas)Di2015NewLine        {Di2015NewLine           subAreaComboBox.Items.Add(area);Di2015NewLine        }Di2015NewLine
11828294Di2015UniqueSeparatorService
11828294Di2015UniqueSeparatorClient
11828294Di2015UniqueSeparatorServiceContracts
11828294Di2015UniqueSeparatorService
11828294Di2015UniqueSeparatorClient
11828294Di2015UniqueSeparatorServiceContracts
11828294Di2015UniqueSeparatorService
11828294Di2015UniqueSeparatorClient
11828294Di2015UniqueSeparatorusing System.ServiceModel;Di2015NewLineusing ServiceContracts;Di2015NewLineDi2015NewLinepublic class ExampleServiceProxy : ClientBase<IExampleService>, IExampleServiceDi2015NewLine{Di2015NewLine    public string ExampleMethod()Di2015NewLine    {Di2015NewLine        return Channel.ExampleMethod();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11828294Di2015UniqueSeparatorconfig
11828294Di2015UniqueSeparatorsvc
11828294Di2015UniqueSeparatorsvc
11828294Di2015UniqueSeparator<%@ ServiceHost Language="C#" Debug="true" Service="Service.ExampleService" Di2015NewLine    CodeBehind="ExampleService.svc.cs" %>Di2015NewLine
11828294Di2015UniqueSeparator.svc.cs
11828294Di2015UniqueSeparatorusing ServiceContracts;Di2015NewLineDi2015NewLinepublic class ExampleService : IExampleServiceDi2015NewLine{Di2015NewLine    public string ExampleMethod()Di2015NewLine    {Di2015NewLine        return string.Empty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11828334Di2015UniqueSeparatorpublic class ComputeParam : IAction    Di2015NewLine{    Di2015NewLine    int _n;    Di2015NewLine    int _time;    Di2015NewLine    public ComputeParam()    Di2015NewLine    {    Di2015NewLine    }    Di2015NewLine    public ComputeParam(int n)    Di2015NewLine    {    Di2015NewLine        this._n = n;    Di2015NewLine    }  Di2015NewLine    public int Time Di2015NewLine    { Di2015NewLine        get { return this._time; }Di2015NewLine        set { this._time = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int NDi2015NewLine    {Di2015NewLine        get { return this._n; }Di2015NewLine        set { this._n = value; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLinefor(int i = 0; i < t.Count; i++) Di2015NewLine{ Di2015NewLine    ((ComputeParam)t[i]).Time = 6;Di2015NewLine}Di2015NewLine
11828439Di2015UniqueSeparatorIEditableObject
11828439Di2015UniqueSeparatorIEditableObject
11828439Di2015UniqueSeparatorBeginEdit()Di2015NewLineCancelEdit()Di2015NewLineEndEdit()Di2015NewLine
11828439Di2015UniqueSeparatorIDataErrorInfo
11828634Di2015UniqueSeparator<a href="javascript:alertDi2015NewLine  ('Your resolution is ' + screen.width + 'x' + screen.height);">Di2015NewLine     Click for your screen resolution </a>Di2015NewLine
11828678Di2015UniqueSeparatorStream
11828678Di2015UniqueSeparatorMemoryStream
11828678Di2015UniqueSeparatorbyte[]
11828678Di2015UniqueSeparatornew MemoryStream(blob)
11828678Di2015UniqueSeparatorMemoryStream
11828678Di2015UniqueSeparatorbyte[]
11828678Di2015UniqueSeparatorbyte[]
11828678Di2015UniqueSeparatorMemoryStream
11828678Di2015UniqueSeparatorbyte[]
11828787Di2015UniqueSeparatorThread
11828787Di2015UniqueSeparatorDownloadFileAsync
11828787Di2015UniqueSeparatorpublic static string DownloadFile(string url, string path, string filename, Action<string,double> progressNotification,Action finishNotification)Di2015NewLine{Di2015NewLine     DownloadProgressChangedEventHandler progressReaction  = (s,e)=>Di2015NewLine              {                               Di2015NewLine                      var progress = "Downloaded " + e.BytesReceived + " of " + e.TotalBytesToReceive;Di2015NewLine                      var percent = Math.Truncate(e.BytesReceived / (double)e.TotalBytesToReceive * 100);Di2015NewLineDi2015NewLine                      while (client.IsBusy)Di2015NewLine                      {Di2015NewLine                         progressNotification(progress, percent);Di2015NewLine                      }                          Di2015NewLine              };Di2015NewLine     WebClient client = new WebClient();Di2015NewLine     client.DownloadProgressChanged += progressReaction;Di2015NewLine     client.DownloadFileCompleted += (s,e) => finishNotification();Di2015NewLine     client.DownloadFileAsync(new Uri(url), path + filename);Di2015NewLine}                           Di2015NewLine
11828787Di2015UniqueSeparatorDownloadFile(url,path,fileName,Di2015NewLine (message,precentage)=>{ /* do some progress bar update or something */ },Di2015NewLine ()=>{ /* hide progressbar or some logic after finish */});Di2015NewLine
11828838Di2015UniqueSeparatorthis
11828838Di2015UniqueSeparatorthis
11828838Di2015UniqueSeparatorprivate readonly Lazy<Progress> m_progress;Di2015NewLinepublic MyType()Di2015NewLine{Di2015NewLine    m_progress = new Lazy<Progress>(() =>Di2015NewLine    {Di2015NewLine        long totalBytes = m_transferManager.TotalSize();Di2015NewLine        return new Progress(totalBytes);Di2015NewLine    });Di2015NewLine}Di2015NewLine
11828838Di2015UniqueSeparatorget
11828915Di2015UniqueSeparatorpartial
11828915Di2015UniqueSeparatorA
11828915Di2015UniqueSeparatornamespace
11828915Di2015UniqueSeparatorpartial
11828915Di2015UniqueSeparatorpublic partial class ADi2015NewLine{Di2015NewLine    public string PropertyA { get; set; }Di2015NewLineDi2015NewLine    public string PropertyB { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class ADi2015NewLine{Di2015NewLine    public string PropertyCDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            var val = this.PropertyA;Di2015NewLine            // some more functionality maybe...Di2015NewLine            return val;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            // some more functionality maybe...Di2015NewLine            this.PropertyA = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11828922Di2015UniqueSeparatorvar resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();Di2015NewLineDi2015NewLinedynamic obj = JsonConvert.DeserializeObject(resp);Di2015NewLinevar messageFromServer = obj.error.message;Di2015NewLine
11829076Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var command = "cmd.exe";Di2015NewLine        var environmentVariables = new System.Collections.Hashtable();Di2015NewLine        environmentVariables.Add("some", "value");Di2015NewLine        environmentVariables.Add("someother", "value");Di2015NewLineDi2015NewLine        var filename = Path.GetTempFileName() + ".cmd";Di2015NewLine        StreamWriter sw = new StreamWriter(filename);Di2015NewLine        sw.WriteLine("@echo off");Di2015NewLine        foreach (DictionaryEntry entry in environmentVariables)Di2015NewLine        {Di2015NewLine            sw.WriteLine("set {0}={1}", entry.Key, entry.Value);Di2015NewLine        } Di2015NewLine        sw.WriteLine("start /w {0}", command);Di2015NewLine        sw.Close();Di2015NewLine        var psi = new ProcessStartInfo(filename) {Di2015NewLine            UseShellExecute = true, Di2015NewLine            Verb="runas"Di2015NewLine        };Di2015NewLine        var ps =  Process.Start(psi);Di2015NewLine        ps.WaitForExit();Di2015NewLine        File.Delete(filename);Di2015NewLine    }Di2015NewLine
11829111Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@date", date.toString);
11829111Di2015UniqueSeparatorAddWithField
11829111Di2015UniqueSeparatorsql = "INSERT INTO YTOODLE_LINKS (YTOODLE_LINKS.TASK_ID,YTOODLE_LINKS.LINK_TITLE,YTOODLE_LINKS.LINK_DESC,YTOODLE_LINKS.LINK_PATH,YTOODLE_LINKS.USER_ID,YTOODLE_LINKS.LAST_USER_EDIT)VALUES (1,'','','',2,'1',@date)";Di2015NewLine
11829266Di2015UniqueSeparatorstrmqtrc.exe
11829266Di2015UniqueSeparator00001F21 11:48:00.351013   7104.1           :       Exception receivedDi2015NewLineSystem.FormatExceptionDi2015NewLineMessage: Input string was not in a correct format.Di2015NewLineStackTrace:Di2015NewLine   at System.Number.ParseSingle(String value, NumberStyles options, NumberFormatInfo numfmt)Di2015NewLine   at System.Convert.ToSingle(String value)Di2015NewLine   at IBM.WMQ.MQMarshalMessageForGet.GetValueAsObject(String dt, String propValue)Di2015NewLine   at IBM.WMQ.MQMarshalMessageForGet.ProcessAllAvailableRFHs()Di2015NewLine00001F22 11:48:00.351115   7104.1           :       We are not sucessful in parsing one of theRFH2Header.Raise the RFH_FORMAT exception and breakfurther processing in loopDi2015NewLine00001F23 11:48:00.351825   7104.1           :       MQException CompCode: 2 Reason: 2421Di2015NewLine
11829266Di2015UniqueSeparatorMQMarshalMessageForGet
11829266Di2015UniqueSeparatorprivate object GetValueAsObject(string dt, string propValue)Di2015NewLine{Di2015NewLine    ...Di2015NewLineDi2015NewLine    switch (dt)Di2015NewLine    {Di2015NewLine        ...Di2015NewLineDi2015NewLine        case "r4":Di2015NewLine            return Convert.ToSingle(propValue);Di2015NewLineDi2015NewLine        case "r8":Di2015NewLine            return Convert.ToDouble(propValue);Di2015NewLineDi2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
11829266Di2015UniqueSeparator[Test]Di2015NewLinepublic void PutAndGetMessageWithFloatProperty() {Di2015NewLine    using (MQQueue queue = _queueManager.AccessQueue(TestQueue, MQC.MQOO_OUTPUT | MQC.MQOO_INPUT_AS_Q_DEF))Di2015NewLine    {Di2015NewLine        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");Di2015NewLineDi2015NewLine        MQMessage message = new MQMessage();Di2015NewLine        message.SetFloatProperty("TEST_SINGLE", 14.879f);Di2015NewLine        message.WriteString("some string");Di2015NewLine        message.Format = MQC.MQFMT_STRING;Di2015NewLineDi2015NewLine        queue.Put(message); // Writes property value as 14.879Di2015NewLineDi2015NewLine        Thread.CurrentThread.CurrentCulture = new CultureInfo("cs-CZ");Di2015NewLineDi2015NewLine        MQMessage readMessage = new MQMessage();Di2015NewLine        queue.Get(readMessage); // Throws MQException because 14,879 is correct formatDi2015NewLineDi2015NewLine        queue.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
11829266Di2015UniqueSeparatorpublic class CultureForThreadScope : IDisposable {Di2015NewLine    private readonly CultureInfo oldCulture;Di2015NewLineDi2015NewLine    public CultureForThreadScope(CultureInfo culture) {Di2015NewLine        oldCulture = Thread.CurrentThread.CurrentCulture;Di2015NewLine        Thread.CurrentThread.CurrentCulture = culture;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose() {Di2015NewLine        Thread.CurrentThread.CurrentCulture = oldCulture;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11829266Di2015UniqueSeparatorGet
11829266Di2015UniqueSeparatorusing (new CultureForThreadScope(CultureInfo.InvariantCulture)) {Di2015NewLine    destination.Get(message, getOptions);Di2015NewLine}Di2015NewLine
11829315Di2015UniqueSeparatorAutoDetectChangesEnabled = false
11829533Di2015UniqueSeparatorarg[]
11829533Di2015UniqueSeparatorarg[j]
11829533Di2015UniqueSeparatorj
11829533Di2015UniqueSeparatori
11829533Di2015UniqueSeparatorpublic List<IAction> Dispatch(string[] arg)Di2015NewLine{Di2015NewLine   int time=0;Di2015NewLine   List<IAction> t = new List<IAction>(10);Di2015NewLine   for (int j = 0; j < arg.Length; j++)Di2015NewLine   {Di2015NewLine       if (!String.IsNullOrEmpty(arg[j]) && arg[j][0] == '/')Di2015NewLine       {Di2015NewLine           Options opt = new Options();                   Di2015NewLineDi2015NewLine           time = opt.Option(arg[j]);Di2015NewLine       }Di2015NewLine       elseDi2015NewLine       {Di2015NewLine           if (int.Parse(arg[j]) >= 0 && int.Parse(arg[j]) <= 20)Di2015NewLine           {Di2015NewLine               t.Add(new ComputeParam(int.Parse(arg[j])));Di2015NewLine               // Don't need to increment i                Di2015NewLine           }Di2015NewLine       }Di2015NewLineDi2015NewLine   }Di2015NewLine   for (int z = 0; z < t.Count; z++)Di2015NewLine   {Di2015NewLine       ((ComputeParam)t[z]).Time = time;Di2015NewLine   }Di2015NewLine   return t;Di2015NewLine}Di2015NewLine
11829683Di2015UniqueSeparator    return new ViewAsPdf()Di2015NewLine    {Di2015NewLine        FileName = "TestView.pdf",Di2015NewLine        PageSize = Size.A3,Di2015NewLine        PageOrientation = Orientation.Landscape,Di2015NewLine        PageMargins = { Left = 0, Right = 0 }, // it's in millimetersDi2015NewLine        PageWidth = 122, // it's in millimetersDi2015NewLine        PageHeight = 44Di2015NewLine    };Di2015NewLine
11829858Di2015UniqueSeparatorThread.Abort()
11829858Di2015UniqueSeparatorvoid waitclientconnection()Di2015NewLine{Di2015NewLine    if (clientOne is connected)Di2015NewLine    {    Di2015NewLine         startserver(); //create new thread to wait connection for next clientDi2015NewLine    }Di2015NewLineDi2015NewLine    while (keepGoing)Di2015NewLine    {Di2015NewLine        ...Di2015NewLineDi2015NewLine        if (clientOne sends "close" message)Di2015NewLine        {Di2015NewLine             keepGoing = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11830216Di2015UniqueSeparator1.Selecting 10's of columns from 10's of columns -- select * from tablename is good way.Di2015NewLineBut this is not good when you consider the query for performance point of view.If your reuirement is to get all the columns of a table then you can use select * from tablename.Di2015NewLineDi2015NewLine2.This is quite obvious that you have to use all 10 columns if u have to change their values.Di2015NewLineUPDATE tablename SETcol1=value1,Di2015NewLine       col1=value1,Di2015NewLine       col1=value1,Di2015NewLine       .....Di2015NewLine
11830287Di2015UniqueSeparatorIEnumerable<MyNode> Flatten(IEnumerable<MyNode> e) {Di2015NewLine    return e.SelectMany(c => Flatten(c.Elements)).Concat(new[] {e});Di2015NewLine}Di2015NewLine
11830287Di2015UniqueSeparatorgroup
11830287Di2015UniqueSeparatorWhere(...)
11830287Di2015UniqueSeparatorFlatten
11830287Di2015UniqueSeparatorpublic static IEnumerable<MyNode> Flatten(this IEnumerable<MyNode> e) {Di2015NewLine    return e.SelectMany(c => c.Elements.Flatten()).Concat(e);Di2015NewLine}Di2015NewLine
11830287Di2015UniqueSeparatorFlatten
11830287Di2015UniqueSeparatorpublic static IEnumerable<T> Flatten<T>(Di2015NewLine    this IEnumerable<T> e,Di2015NewLine    Func<T,IEnumerable<T>> f) Di2015NewLine{Di2015NewLine    return e.SelectMany(c => f(c).Flatten(f)).Concat(e);Di2015NewLine}Di2015NewLine
11830287Di2015UniqueSeparatorIEnumerable<MyNode> tree = ....Di2015NewLinevar res = tree.Flatten(node => node.Elements);Di2015NewLine
11830287Di2015UniqueSeparatorConcat(...)
11830343Di2015UniqueSeparatorConnectionString
11830387Di2015UniqueSeparatorvar json = JsonConvert.SerializeObject(new MyTestClass());Di2015NewLineDi2015NewLinepublic class MyTestClassDi2015NewLine{Di2015NewLine    public string s = "iiiii";Di2015NewLineDi2015NewLine    [JsonConverter(typeof(ByteArrayConvertor))]Di2015NewLine    public byte[] buf = new byte[] {1,2,3,4,5};Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ByteArrayConvertor : Newtonsoft.Json.JsonConverterDi2015NewLine{Di2015NewLineDi2015NewLine    public override bool CanConvert(Type objectType)Di2015NewLine    {Di2015NewLine        return objectType==typeof(byte[]);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        byte[] arr = (byte[])value;Di2015NewLine        writer.WriteRaw(BitConverter.ToString(arr).Replace("-", ""));Di2015NewLine    }Di2015NewLine}Di2015NewLine
11830452Di2015UniqueSeparator // Create a CryptoStream using the MemoryStream and the passed key and initialization vector (IV).Di2015NewLine                using (CryptoStream decryptoStream = new CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Write))Di2015NewLine                {Di2015NewLine                    decryptoStream.Write(encryptedPassword, 0, encryptedPassword.Length);Di2015NewLine                    ///decryptoStream.FlushFinalBlock();Di2015NewLine                }Di2015NewLineDi2015NewLine                byte[] decryptedPassword = memoryStream.ToArray();Di2015NewLineDi2015NewLine                //Convert the buffer into a string and return it.Di2015NewLine                readablePassword = unicodeEncoding.GetString(decryptedPassword, 0, decryptedPassword.Length);Di2015NewLine            }Di2015NewLine
11830452Di2015UniqueSeparator                        // Create a CryptoStream using the MemoryStream and the passed key and initialization vector (IV).Di2015NewLine                    using (CryptoStream decryptoStream = new CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Read))Di2015NewLine                    {Di2015NewLine                        // Create buffer to hold the decrypted data.Di2015NewLine                        byte[] fromEncrypt = new byte[encryptedPassword.Length];Di2015NewLineDi2015NewLine                        decryptoStream.Read(fromEncrypt, 0, fromEncrypt.Length);Di2015NewLineDi2015NewLine                        //Convert the buffer into a string and return it.Di2015NewLine                        readablePassword = unicodeEncoding.GetString(fromEncrypt);Di2015NewLine                        readablePassword = readablePassword.Replace("\\0", string.Empty);Di2015NewLine                    }Di2015NewLine
11830455Di2015UniqueSeparatorstring
11830455Di2015UniqueSeparatorpublic static class StringExtensionsDi2015NewLine{Di2015NewLine    public static string NullIfEmpty(this string theString)Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(theString))Di2015NewLine        {Di2015NewLine            return null;Di2015NewLine        }Di2015NewLineDi2015NewLine        return theString;Di2015NewLine    }Di2015NewLine}Di2015NewLine
11830455Di2015UniqueSeparatorstring modifiedString = r.Description.NullIfEmpty();Di2015NewLine
11830455Di2015UniqueSeparatorstring
11830455Di2015UniqueSeparatorprivate static void Main(string[] args)Di2015NewLine{Di2015NewLine    MrResult r = new MrResultDi2015NewLine    {Di2015NewLine        Owner = string.Empty,Di2015NewLine        Description = string.EmptyDi2015NewLine    };Di2015NewLineDi2015NewLine    foreach (var property in r.GetType().GetProperties())Di2015NewLine    {Di2015NewLine        if (property.PropertyType == typeof(string) && property.CanWrite)Di2015NewLine        {Di2015NewLine            string propertyValueAsString = (string)property.GetValue(r, null);Di2015NewLine            property.SetValue(r, propertyValueAsString.NullIfEmpty(), null);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
11830496Di2015UniqueSeparatorOnMethodBoundaryAspect
11830496Di2015UniqueSeparatorMethodInterceptionAspect
11830496Di2015UniqueSeparatorOnMethodBoundaryAspect
11830496Di2015UniqueSeparatorargs.Method
11830496Di2015UniqueSeparatorMethodBase
11830496Di2015UniqueSeparatorGetParameters()
11830496Di2015UniqueSeparatorParameterInfo
11830496Di2015UniqueSeparatorParameterInfo
11830496Di2015UniqueSeparatorAttributes
11830496Di2015UniqueSeparatorargs.Arguments
11830496Di2015UniqueSeparatorpublic interface IValidatorDi2015NewLine{Di2015NewLine    void Validate(object value);Di2015NewLine}Di2015NewLinepublic class ValidationEmailAttribute : Attribute, IValidatorDi2015NewLine{Di2015NewLine    public Validate(string emailAddress)Di2015NewLine    {Di2015NewLine        // throw exception or whatever if invalidDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ValidateParametersAspect : OnMethodBoundaryAspectDi2015NewLine{Di2015NewLine    public override OnEntry(args)Di2015NewLine    {Di2015NewLine        foreach(i = 0 to args.Method.GetParameters().Count)Di2015NewLine        {Di2015NewLine            var parameter = args.Method.GetParameters()[i];Di2015NewLine            var argument = args.Argument[i]; // get the corresponding argument valueDi2015NewLine            foreach(attribute in parameter.Attributes)Di2015NewLine            {Di2015NewLine                var attributeInstance = Activator.CreateType(attribute.Type);Di2015NewLine                var validator = (IValidator)attributeInstance;Di2015NewLine                validator.Validate(argument);Di2015NewLine            }Di2015NewLine        }Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine    [ValidateParametersAspect]Di2015NewLine    public void SaveEmail([ValidationEmail] string email)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
11830506Di2015UniqueSeparatorDefiningQuery
11830597Di2015UniqueSeparatorif(roles.All(r => r == UserRoles.Salesperson.ToString()))Di2015NewLine
11830696Di2015UniqueSeparatorHttpUtility.UrlDecode("Poluci%C3%B3n"); // returns "PoluciÃ³n"Di2015NewLineUri.UnescapeDataString("Poluci%C3%B3n"); // returns "PoluciÃ³n"Di2015NewLine
11830776Di2015UniqueSeparatorAdminController
11830776Di2015UniqueSeparatorcontext.MapRoute( Di2015NewLine    "Admin_default", Di2015NewLine    "Admin/{controller}/{action}/{id}", Di2015NewLine    new { controller = "Admin", action = "Index", id = UrlParameter.Optional } Di2015NewLine); Di2015NewLine
11830776Di2015UniqueSeparator/admin/admin
11830776Di2015UniqueSeparatorFloorController.Create()
11830776Di2015UniqueSeparator@Html.ActionLink("floors", "create", "floor", new { area = "admin" }, null)Di2015NewLine
11830776Di2015UniqueSeparator/admin // Executes AdminController.Index()Di2015NewLine/admin/floor // Executes FloorController.Index()Di2015NewLine
11830776Di2015UniqueSeparator/admin/admin/
11830776Di2015UniqueSeparator/admin
11830776Di2015UniqueSeparatorAdminController.Index()
11830776Di2015UniqueSeparator/admin/admin
11830778Di2015UniqueSeparatorMyUserControl
11830778Di2015UniqueSeparator[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]Di2015NewLine
11830778Di2015UniqueSeparatorMyCustomClass
11831106Di2015UniqueSeparator/r:System.Numerics.dllDi2015NewLine
11831256Di2015UniqueSeparatorargs
11831256Di2015UniqueSeparatorConsole.Read
11831283Di2015UniqueSeparatorUInt32
11831283Di2015UniqueSeparatorInt32
11831283Di2015UniqueSeparatorInt32 n = Convert.ToInt32(textBox2.Text);Di2015NewLineif (n > 0)Di2015NewLine  //code Di2015NewLineelseDi2015NewLine  //codeDi2015NewLine
11831283Di2015UniqueSeparatorint n;Di2015NewLine// TryParse method tries parsing and returns true on successful parsingDi2015NewLineif (int.TryParse(textBox2.Text, out n))Di2015NewLine{Di2015NewLine    if (n > 0)Di2015NewLine         // code for positive nDi2015NewLine    elseDi2015NewLine         // code for negative nDi2015NewLine}Di2015NewLineelseDi2015NewLine     // handle parsing errorDi2015NewLine
11831334Di2015UniqueSeparatorvar foos = from row in dt.AsEnumerable()Di2015NewLine           select new Foo()Di2015NewLine           {Di2015NewLine              Id = row.Field<int>("id"),Di2015NewLine              Name = row.Field<string>("name")Di2015NewLine           };Di2015NewLineDi2015NewLine// create a new listDi2015NewLineList<Foo> lst = foos.ToList();Di2015NewLineDi2015NewLine// update: add items to an exisiting listDi2015NewLinefooList.AddRange(foos);Di2015NewLine
11831454Di2015UniqueSeparator  qry = string.Format(@"SELECT *Di2015NewLine         FROM YourSchemaUser.CIS_TRANS <-- Fix your schema user nameDi2015NewLine         WHERE BSA_CD like '%{0}%'", BSA_CD);Di2015NewLineDi2015NewLine  qry = @"SELECT * FROM YourSchemaUser.CIS_TRANS"; <-- Fix your schema user nameDi2015NewLine
11831525Di2015UniqueSeparator    public static string mailServer = 'IP address or host name of mail server'Di2015NewLine    public static void Send()Di2015NewLine    {Di2015NewLine        string subject = "test subject";Di2015NewLine        string address =  "test@somedomain.com";Di2015NewLine        string body = "some mail body";Di2015NewLine        MailMessage mm = new MailMessage();Di2015NewLine        mm.From = new MailAddress("no-reply@domain.net"); //on behalf ofDi2015NewLine        mm.To.Add(new MailAddress(address));Di2015NewLineDi2015NewLineDi2015NewLine        mm.IsBodyHtml = true;Di2015NewLine        mm.Subject = subject;Di2015NewLine        mm.Body = body;Di2015NewLine        SmtpClient server = new SmtpClient(mailServer);Di2015NewLine        server.Send(mm);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11831579Di2015UniqueSeparatorMethodA()
11831579Di2015UniqueSeparatorMethodB()
11831579Di2015UniqueSeparatorwarnif count > 0 Di2015NewLinefrom m in Application.Methods whereDi2015NewLine m.IsUsing("MyNamespace.MyClass.MyMethodA()") &&Di2015NewLine!m.IsUsing("MyNamespace.MyClass.MyMethodB()")Di2015NewLineselect mDi2015NewLine
11831693Di2015UniqueSeparatorElements
11831693Di2015UniqueSeparatorElement
11831693Di2015UniqueSeparatorFirstOrDefault
11831693Di2015UniqueSeparator// Still use Element for CONTACTINFO as presumably that's a required elementDi2015NewLineCity = (string) prospect.Element("CONTACTINFO")Di2015NewLine                        .Elements("CITY")Di2015NewLine                        .Elements("ANSWER")Di2015NewLine                        .FirstOrDefault()Di2015NewLine
11831693Di2015UniqueSeparatorElements
11831699Di2015UniqueSeparatorxmlDoc.CreateElementNS("using:Dictionary.Common", "local2:elementName")Di2015NewLine
11831704Di2015UniqueSeparatorProcessCmdKey
11831704Di2015UniqueSeparatorstatic bool insertPressed;Di2015NewLinestatic bool tabPressed;Di2015NewLineDi2015NewLineprotected override bool ProcessCmdKey(ref Message msg, Keys keyData)Di2015NewLine{Di2015NewLine    if(keyData == Keys.Tab)Di2015NewLine    {Di2015NewLine        tabPressed = true;Di2015NewLine        CheckForTabAndInsert();Di2015NewLineDi2015NewLine    }Di2015NewLine    return base.ProcessCmdKey(ref msg, keyData);Di2015NewLine}Di2015NewLineDi2015NewLinestatic void form_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Insert)Di2015NewLine    {Di2015NewLine        insertPressed = true;Di2015NewLine        CheckForTabAndInsert();Di2015NewLine        insertPressed = false;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void form_KeyUp(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Insert) insertPressed = false;Di2015NewLine}Di2015NewLine
11831734Di2015UniqueSeparatordocument.Element("Devices").Add(Di2015NewLine    new XElement("Device",Di2015NewLine       new XAttribute("Number", ID),Di2015NewLine       new XAttribute("Name", Name),Di2015NewLine       new XElement("Functions",Di2015NewLine           functions.Select(f => Di2015NewLine               new XElement("Function",Di2015NewLine                   new XAttribute("Number", f.ID),Di2015NewLine                   new XAttribute("Name", f.Name))))));Di2015NewLine
11831734Di2015UniqueSeparatorList<Function>
11831734Di2015UniqueSeparatorIEnumerable<XElement>
11831734Di2015UniqueSeparatorSelect
11831734Di2015UniqueSeparatorXElement
11831738Di2015UniqueSeparatorindex < m_customers.Count
11831738Di2015UniqueSeparatorclass PersonDi2015NewLine{Di2015NewLine    public string Name {get; set;}Di2015NewLine    public string Address {get; set;}Di2015NewLine    public string Email {get; set;}Di2015NewLine}Di2015NewLine
11831738Di2015UniqueSeparatorList<Person>
11831778Di2015UniqueSeparator// initialize the array and the indexes arrayDi2015NewLinevar a2D = new int[2][];Di2015NewLinea2D[0] = new[] { 3, 14, 15, 92, 65, 35 }; // <-- your array (fake data here)Di2015NewLinea2D[1] = Enumerable.Range(0, a2D[0].Length).ToArray(); // create the indexes rowDi2015NewLineDi2015NewLine// sort the first row and the second one containing the indexesDi2015NewLineArray.Sort(a2D[0], a2D[1]);Di2015NewLineDi2015NewLine// now a2D array contains:Di2015NewLine//  row 0: 3, 14, 15, 35, 65, 92Di2015NewLine//  row 1: 0,  1,  2,  5,  4,  3Di2015NewLineDi2015NewLine// and you can perform binary search on the first row:Di2015NewLineint columnIndexOf35 = Array.BinarySearch(a2D[0], 35);Di2015NewLine// columnIndexOf35 = 3Di2015NewLine// Di2015NewLine// a2D[0][columnIndexOf35] = 35 <- valueDi2015NewLine// a2D[1][columnIndexOf35] = 5  <- original indexDi2015NewLine
11831808Di2015UniqueSeparator        System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, error) =>Di2015NewLine                                                                                 {Di2015NewLine                                                                                     return true;Di2015NewLine                                                                                 };Di2015NewLine
11831975Di2015UniqueSeparatorusing WinRTXamlToolkit.Extensions;Di2015NewLine
11831975Di2015UniqueSeparatorvar scrollViewer = myGridView.GetFirstDescendantOfType<ScrollViewer>()Di2015NewLine
11832069Di2015UniqueSeparatorTimerEventProcessor()
11832069Di2015UniqueSeparatorSystem.Windows.Forms.Timer
11832069Di2015UniqueSeparatorTimerEventProcessor()
11832069Di2015UniqueSeparatortextbox.Invoke()
11832069Di2015UniqueSeparatorApplication.DoEvents()
11832069Di2015UniqueSeparatorTimerEventProcessor()
11832069Di2015UniqueSeparatortextbox.Invoke()
11832069Di2015UniqueSeparatortextbox
11832069Di2015UniqueSeparatortextbox.Invoke()
11832069Di2015UniqueSeparatortextbox
11832069Di2015UniqueSeparatorApplication.DoEvents()
11832069Di2015UniqueSeparatorApplication.DoEvents()
11832069Di2015UniqueSeparatortextbox.Invoke
11832069Di2015UniqueSeparator// Make the request asynchronouslyDi2015NewLineSystem.IAsyncResult asyncResult = textbox.BeginInvoke(Di2015NewLine    new MethodInvoker(Di2015NewLine        delegate { /* insert delegate code here */ }));Di2015NewLineDi2015NewLine// Process the message queue until this request has been completedDi2015NewLinewhile(!asyncResult.IsCompleted) Application.DoEvents();Di2015NewLineDi2015NewLine// Clean up our async requestDi2015NewLinetextbox.EndInvoke(asyncResult);Di2015NewLine
11832128Di2015UniqueSeparator.Where
11832128Di2015UniqueSeparatorIEnumerable<T>
11832128Di2015UniqueSeparatorIEnumerable<T>
11832159Di2015UniqueSeparatorDrawMode
11832159Di2015UniqueSeparatorprivate void lstColor_DrawItem(object sender, System.Windows.Forms.DrawItemEventArgs e)Di2015NewLine{Di2015NewLine    var size = g.MeasureString(data[e.Index], oFont, 500, sf);Di2015NewLine    var width = size.Width + 16;Di2015NewLineDi2015NewLine    e.DrawBackground();Di2015NewLine    e.DrawFocusRectangle();Di2015NewLine    e.Graphics.DrawString(data[e.Index], oFont, new SolidBrush(color[e.Index]), e.Bounds.X, e.Bounds.Y);Di2015NewLine    e.Graphics.DrawString(data[data.Length - 1 - e.Index], oFont, new SolidBrush(color[color.Length - 1 - e.Index]), width, e.Bounds.Y);Di2015NewLine}Di2015NewLine
11832159Di2015UniqueSeparatorprivate void lstColor_MeasureItem(object sender, MeasureItemEventArgs e)Di2015NewLine{Di2015NewLine    var size = g.MeasureString(data[e.Index], oFont, 500, sf);Di2015NewLine    var height = size.Height;Di2015NewLineDi2015NewLine    e.ItemHeight = Convert.ToInt32(height);Di2015NewLine}Di2015NewLine
11832159Di2015UniqueSeparatorprivate string[] data;Di2015NewLineprivate Color[] color;Di2015NewLineprivate Font oFont;Di2015NewLineprivate Graphics g;Di2015NewLineprivate StringFormat sf;Di2015NewLine
11832159Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    oFont = new Font("Arial", 10);Di2015NewLineDi2015NewLine    data = new string[] { "This is Red", "This is Blue", "This is Green", "This is Yellow", "This is Black", "This is Aqua", "This is Brown", "This is Cyan", "This is Gray", "This is Pink" };Di2015NewLine    color = new Color[] {Color.Red, Color.Blue, Color.Green, Color.Yellow, Color.Black, Color.Aqua, Color.Brown, Color.Cyan, Color.Gray,Color.Pink};Di2015NewLine    lstColor.DataSource = data;Di2015NewLine    g = Graphics.FromHwnd(lstColor.Handle);Di2015NewLine    sf = new StringFormat(StringFormat.GenericTypographic);Di2015NewLine}Di2015NewLine
11832207Di2015UniqueSeparatorDataObject d = new DataObject(); Di2015NewLined.SetData(DataFormats.Serializable, myObject); Di2015NewLinemyForm.DoDragDrop(d, DragDropEffects.Copy); Di2015NewLine
11832286Di2015UniqueSeparatorusing (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) Di2015NewLine{Di2015NewLine    // do stuff with fs hereDi2015NewLine}Di2015NewLine// do more stuff afterDi2015NewLine
11832286Di2015UniqueSeparatorFileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)Di2015NewLinetryDi2015NewLine{Di2015NewLine    // do stuff with fs hereDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    if (fs != null)Di2015NewLine    {Di2015NewLine        ((IDisposable)fs).Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine// do more stuff afterDi2015NewLine
11832286Di2015UniqueSeparatornull
11832485Di2015UniqueSeparator    public bool TryDetectNewLine(string path, out string newLine)Di2015NewLine    {Di2015NewLine        using (var fileStream = File.OpenRead(path))Di2015NewLine        {Di2015NewLine            char prevChar = '\\0';Di2015NewLineDi2015NewLine            // Read the first 4000 characters to try and find a newlineDi2015NewLine            for (int i = 0; i < 4000; i++)Di2015NewLine            {Di2015NewLine                int b;Di2015NewLine                if ((b = fileStream.ReadByte()) == -1) break;Di2015NewLineDi2015NewLine                char curChar = (char)b;Di2015NewLineDi2015NewLine                if (curChar == '\\n')Di2015NewLine                {Di2015NewLine                    newLine = prevChar == '\\r' ? "\\r\\n" : "\\n";Di2015NewLine                    return true;Di2015NewLine                }Di2015NewLineDi2015NewLine                prevChar = curChar;Di2015NewLine            }Di2015NewLineDi2015NewLine            // Returning false means could not determine linefeed conventionDi2015NewLine            newLine = Environment.NewLine;Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11832531Di2015UniqueSeparatorfoo2
11832531Di2015UniqueSeparatorfoo2
11832531Di2015UniqueSeparatorint foo2 = foo != default(foo) ? foo : default(int);Di2015NewLine
11832531Di2015UniqueSeparatorfoo == default(foo)
11832531Di2015UniqueSeparator: 0;
11832531Di2015UniqueSeparatordefault(foo)
11832531Di2015UniqueSeparatorInt32
11832531Di2015UniqueSeparatorfoo2 = foo != default(foo) ? foo : foo2;Di2015NewLine
11832531Di2015UniqueSeparatorfoo2
11832531Di2015UniqueSeparatorfoo
11832531Di2015UniqueSeparator// Assumes foo2 is already defined, based on your commentDi2015NewLineif (foo != default(foo))Di2015NewLine    foo2 = foo;Di2015NewLine
11832538Di2015UniqueSeparatorfrom u in TblUsersDi2015NewLinejoin c in TblCompanies on u.FkCompanyID equals c.PkCompanyID into gDi2015NewLinefrom x in g.DefaultIfEmpty()Di2015NewLineselect uDi2015NewLine
11832538Di2015UniqueSeparatorTblUsersDi2015NewLine   .GroupJoin (Di2015NewLine      TblCompanies, Di2015NewLine      u => u.FkCompanyID, Di2015NewLine      c => c.PkCompanyID, Di2015NewLine      (u, g) => Di2015NewLine         new  Di2015NewLine         {Di2015NewLine            u = u, Di2015NewLine            g = gDi2015NewLine         }Di2015NewLine   )Di2015NewLine   .SelectMany (Di2015NewLine      temp0 => temp0.g.DefaultIfEmpty (), Di2015NewLine      (temp0, x) => temp0.uDi2015NewLine   )Di2015NewLine
11832615Di2015UniqueSeparatorstatic DateTime? GetLastMonthSameNthDayOfWeek(DateTime date)Di2015NewLine{Di2015NewLine    int nth = (date.Day-1) / 7; // returns 0 if 1st, 1 if 2nd...Di2015NewLine    var prevMonthDay = date.AddMonths(-1);Di2015NewLineDi2015NewLine    // find the first date of month having the same day of weekDi2015NewLine    var d = new DateTime(prevMonthDay.Year, prevMonthDay.Month, 1);Di2015NewLine    while(d.Day <= 7)Di2015NewLine    {Di2015NewLine        if (d.DayOfWeek == date.DayOfWeek)Di2015NewLine            break;Di2015NewLine        d = d.AddDays(1);Di2015NewLine    }Di2015NewLine    // go to nth day of weekDi2015NewLine    d = d.AddDays(7 * nth);Di2015NewLine    // if we have passed the current month, there's no nth day of weekDi2015NewLine    if (d.Month != prevMonthDay.Month)Di2015NewLine        return null;Di2015NewLine    return d;Di2015NewLine}Di2015NewLine
11832615Di2015UniqueSeparator// 3rd wednesday of August 2012Di2015NewLinevar a = new DateTime(2012, 8, 15);Di2015NewLinevar aPrev = GetLastMonthSameNthDayOfWeek(a);Di2015NewLine// aPrev = July 18th 2012 (i.e. the 3rd wednesday of July 2012)Di2015NewLineDi2015NewLine// 5th wednesday of August 2012Di2015NewLinevar b = new DateTime(2012, 8, 15);Di2015NewLinevar bPrev = GetLastMonthSameNthDayOfWeek(b);Di2015NewLine// bPrev = null, because there's no 5th wednesday of July 2012Di2015NewLine
11832615Di2015UniqueSeparatorint nth = ((date.Day-1) / 7) + 1; // 1 -> 1st, 2 -> 2nd, 3 -> 3rd ...Di2015NewLine
11832620Di2015UniqueSeparatorGetHashCode()
11832620Di2015UniqueSeparatorEquals()
11832620Di2015UniqueSeparatorEquals()
11832626Di2015UniqueSeparatorEndValue = StartValue * ( ( 1 + Percentage ) ^ NumberOfSteps )Di2015NewLine
11832626Di2015UniqueSeparatorNumberOfSteps
11832626Di2015UniqueSeparatorPercentage
11832626Di2015UniqueSeparator^
11832626Di2015UniqueSeparatorEndValue / StartValue = ( 1 + Percentage ) ^ NumberOfStepsDi2015NewLine(EndValue / StartValue) ^ (1 / NumberOfSteps) = 1 + PercentageDi2015NewLinePercentage = ( (EndValue / StartValue) ^ (1 / NumberOfSteps) ) - 1Di2015NewLine
11832626Di2015UniqueSeparatorPercentage
11832626Di2015UniqueSeparatorNumberOfSteps
11832626Di2015UniqueSeparatorint NumberOfSteps = 0;Di2015NewLinefor(double i = StartValue; i < EndValue; i *= (1 + Percentage))Di2015NewLine{Di2015NewLine    ++NumberOfSteps;Di2015NewLine}Di2015NewLine
11832667Di2015UniqueSeparatorType
11832667Di2015UniqueSeparatorMissing
11832667Di2015UniqueSeparatorSystem.Reflection.Missing.Value
11832667Di2015UniqueSeparatorType.Missing
11832667Di2015UniqueSeparatorobject
11832667Di2015UniqueSeparatorMissing.Value
11832667Di2015UniqueSeparatorMissing
11832697Di2015UniqueSeparator[<MonoMac.Foundation.Register("AppDelegate")>]Di2015NewLine
11832697Di2015UniqueSeparatortype
11832697Di2015UniqueSeparator[<DllImport("myUnmanagedDLL.dll")>]
11832697Di2015UniqueSeparator[Attribute]
11832697Di2015UniqueSeparator<Attribute>
11832769Di2015UniqueSeparatorvar newList = Di2015NewLine      list.OrderByDescending(s=>Math.Max(s.DateCreated.Ticks,s.DateUpdated.Ticks));Di2015NewLine
11832828Di2015UniqueSeparatorStringBuilder
11832828Di2015UniqueSeparator        StringBuilder MessageText = new StringBuilder();Di2015NewLine        MessageText.AppendLine(string.Format("Age: {0}", age_Num.Text));Di2015NewLine        MessageText.AppendLine(string.Format("Height: {0}", height_Num.Text));Di2015NewLine        MessageText.AppendLine(string.Format("Weight: {0}", weight_Num.Text));Di2015NewLine        MessageBox.Show(MessageText.ToString());Di2015NewLine
11832877Di2015UniqueSeparatorbin
11833020Di2015UniqueSeparatorpublic void Foo(int id, string name) {Di2015NewLine   var user = Db.Users.Local.SingleOrDefault(u => u.Id == id);Di2015NewLine   if (user == null) {Di2015NewLine      user = new User { Id = id };Di2015NewLine      Db.Users.Attach(user);Di2015NewLine   } Di2015NewLineDi2015NewLine   user.Name = name;Di2015NewLine   Db.SaveChanges();Di2015NewLine}Di2015NewLine
11833195Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@ord", ord);
11833366Di2015UniqueSeparatorList<Customer> myCustomerList;Di2015NewLineDi2015NewLine.....Di2015NewLineusing(Customdialog f = new CustomDialog(myCustomerList))Di2015NewLine{Di2015NewLine    if(DialogResult.OK == f.ShowDialog())Di2015NewLine    {Di2015NewLine        ..... Di2015NewLine    }Di2015NewLine}Di2015NewLine
11833366Di2015UniqueSeparatorpublic class CustomDialogDi2015NewLine{Di2015NewLine    List<Customer> _customerList;Di2015NewLineDi2015NewLine    public CustomDialog(List<Customer> customers)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        _customerList = customers;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CustomDialog_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine         comboBox1.DataSource = _customerList; Di2015NewLine         comboBox1.ValueMember = "Id";  // Supposing the Customer object contains ID propertyDi2015NewLine         comboBox1.DisplayMember = "ClientName";   // The property shown on the combobox itemsDi2015NewLine    }Di2015NewLine}Di2015NewLine
11833491Di2015UniqueSeparatorPage_Init
11833593Di2015UniqueSeparatorstatic Direction VectorToDirection(Vector2 direction)Di2015NewLine{Di2015NewLine  var directions = new Direction[]{Di2015NewLine    Direction.Up, Direction.Down, Direction.Right, Direction.Left };Di2015NewLine  var unit = new Vector2[] {Di2015NewLine   -Vector2.UnitY, Vector2.UnitY, Vector2.UnitX,-Vector2.UnitY};Di2015NewLineDi2015NewLine  var minAngle = 10;Di2015NewLine  var minIndex = -1;Di2015NewLine  for(var index = 0; index < directions.length; index++)Di2015NewLine  {Di2015NewLine    double diff = System.Math.Acos(Vector2.Dot(direction, unit[index]));Di2015NewLine    if (diff < minAngle)Di2015NewLine    { Di2015NewLine      minAngle = diff;Di2015NewLine      minIndex = index;Di2015NewLine    }Di2015NewLineDi2015NewLine  return directions[minIndex];Di2015NewLine}Di2015NewLine
11833672Di2015UniqueSeparatorElements
11833672Di2015UniqueSeparatorSelect
11833672Di2015UniqueSeparatorvar list = documentDi2015NewLine     .Descendants("Device")Di2015NewLine     .Select(x => new Device {Di2015NewLine                     ID = (int) x.Attribute("Number"),Di2015NewLine                     Name = (string) x.Attribute("Name"),Di2015NewLine                     Functions = x.Element("Functions")Di2015NewLine                                  .Elements("Function")Di2015NewLine                                  .Select(f =>Di2015NewLine                                      new Function {Di2015NewLine                                      Number = (int) f.Attribute("Number"),Di2015NewLine                                      Name = (string) f.Attribute("Name")Di2015NewLine                                    }).ToList()Di2015NewLine                  });Di2015NewLine
11833672Di2015UniqueSeparatorFromXElement
11833672Di2015UniqueSeparatorDevice
11833672Di2015UniqueSeparatorFunction
11833672Di2015UniqueSeparatorDevice.FromXElement
11833672Di2015UniqueSeparatorpublic static Device FromXElement(XElement element)Di2015NewLine{Di2015NewLine    return new DeviceDi2015NewLine    {Di2015NewLine        ID = (int) element.Attribute("Number"),Di2015NewLine        Name = (string) element.Attribute("Name"),Di2015NewLine        Functions = element.Element("Functions").Elements("Function")Di2015NewLine                         .Select(Function.FromXElement)Di2015NewLine                         .ToList();Di2015NewLine    };Di2015NewLine}Di2015NewLine
11833845Di2015UniqueSeparatorpublic class PetDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public void Run() { }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Cat: PetDi2015NewLine{Di2015NewLine    public string Meow()Di2015NewLine    {Di2015NewLine        return "Meow";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Dog :PetDi2015NewLine{Di2015NewLine    public string Bark()Di2015NewLine    {Di2015NewLine        return "Whow";Di2015NewLine    }Di2015NewLine}Di2015NewLine
11833845Di2015UniqueSeparatorvar collection = new ObservableCollection<Pet> {new Cat(), new Dog()};Di2015NewLineDi2015NewLineforeach (var pet in collection)Di2015NewLine{Di2015NewLine   pet.Run();Di2015NewLine}Di2015NewLine
11833845Di2015UniqueSeparatorpet.GetType() Di2015NewLine
11833845Di2015UniqueSeparatorvar cat = (Cat)pet;Di2015NewLinecat.Meow();Di2015NewLine
11833861Di2015UniqueSeparatorGet the threads information, including active window
11833861Di2015UniqueSeparatorThe GUITHREADINFO structure
11833861Di2015UniqueSeparatorAnother method of window changing
11833871Di2015UniqueSeparatorSystem.Runtime.Caching.MemoryCache
11833912Di2015UniqueSeparatordb.SubmitChanges()
11833912Di2015UniqueSeparatordb.SubmitChanges()
11833912Di2015UniqueSeparatorforeach (var value in values)Di2015NewLine
11833912Di2015UniqueSeparatorforeach (var value in values.Distinct())Di2015NewLine
11833915Di2015UniqueSeparatorImportXml()
11833994Di2015UniqueSeparator    [FieldOffset(0x0004), MarshalAs(UnmanagedType.ByValTStr, SizeConst = 4)]Di2015NewLine    public string Version;Di2015NewLine
11833994Di2015UniqueSeparator        string path = @"G:\\Games\\BGOrg\\BGII - SoA\\save\\000000001-Quick-Save\\Baldur.gam";Di2015NewLineDi2015NewLine        byte[] content = IoHelper.ReadBinaryFile(path);Di2015NewLineDi2015NewLine        IntPtr unmanagedPointer = Marshal.AllocHGlobal(content.Length);Di2015NewLine        Marshal.Copy(content, 0, unmanagedPointer, content.Length);Di2015NewLineDi2015NewLine        Header header = (Header) Marshal.PtrToStructure(unmanagedPointer, typeof (Header));Di2015NewLine
11834055Di2015UniqueSeparatorSocket.IOControl()
11834055Di2015UniqueSeparatorSocket socket; //Make a good socket before calling the rest of the code.Di2015NewLineint size = sizeof(UInt32);Di2015NewLineUInt32 on = 1;Di2015NewLineUInt32 keepAliveInterval = 10000; //Send a packet once every 10 seconds.Di2015NewLineUInt32 retryInterval = 1000; //If no response, resend every second.Di2015NewLinebyte[] inArray = new byte[size * 3];Di2015NewLineArray.Copy(BitConverter.GetBytes(on), 0, inArray, 0, size);Di2015NewLineArray.Copy(BitConverter.GetBytes(keepAliveInterval), 0, inArray, size, size);Di2015NewLineArray.Copy(BitConverter.GetBytes(retryInterval), 0, inArray, size * 2, size);Di2015NewLinesocket.IOControl(IOControlCode.KeepAliveValues, inArray, null);Di2015NewLine
11834224Di2015UniqueSeparator<d:Page.DataContext>Di2015NewLine    <local:SpecialEvent>Di2015NewLine</d:Page.DataContext>Di2015NewLine
11834224Di2015UniqueSeparatord:DataContext="{d:DesignData Source=../SampleData/SpecialEventSampleData.xaml}" Di2015NewLine
11834314Di2015UniqueSeparatore.SortResult = 0
11834314Di2015UniqueSeparator  private void dataGridView1_SortCompare(object sender,  DataGridViewSortCompareEventArgs e)Di2015NewLine  {Di2015NewLine       DataGridView dg = (DataGridView)sender;Di2015NewLine       if (e.RowIndex1 == 0) {Di2015NewLine           e.SortResult = 0;Di2015NewLine           e.Handled = true;Di2015NewLine       } else {Di2015NewLine         // rest of your comparison codeDi2015NewLine       }Di2015NewLine  }Di2015NewLine
11834314Di2015UniqueSeparator  private void dataGridView1_SortCompare(object sender,  DataGridViewSortCompareEventArgs e)Di2015NewLine  {Di2015NewLine       DataGridView dg = (DataGridView)sender;Di2015NewLine       if (dg.Rows[e.RowIndex1].Frozen) {Di2015NewLine           e.SortResult = -1;Di2015NewLine           e.Handled = true;Di2015NewLine       } else {Di2015NewLine         // rest of your comparison codeDi2015NewLine       }Di2015NewLine  }Di2015NewLine
11834314Di2015UniqueSeparatore.SortResult = 0
11834324Di2015UniqueSeparator<Columns>Di2015NewLine<asp:TemplateField>Di2015NewLine<ItemTemplate>Di2015NewLine<asp:HyperLink Text="TextField" id="myHL" runat="server"Di2015NewLine NavigateUrl='<%# "file:///" + DataBinder.Eval(Container.DataItem, "Path").ToString() %>'></asp:HyperLink>Di2015NewLine</ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine</Columns>Di2015NewLine
11834324Di2015UniqueSeparatorfile:///
11834324Di2015UniqueSeparatorfile:///\\\\server\\location\\file.doc
11834447Di2015UniqueSeparatorpublic class SauvolaAdaptiveThresholding : BaseInPlacePartialFilterDi2015NewLine
11834455Di2015UniqueSeparatorbo.Where(o => !stringList.Contains(o.MyProperty));Di2015NewLine
11834480Di2015UniqueSeparatorvar newqty = Request.Form["Quantity"]; Di2015NewLinevar c = database.Carts.Where(x => x.UserId == Di2015NewLine           uid && x.PartNumber == Di2015NewLine           pnumber && x.OrderId == (string)oid).FirstOrDefault();Di2015NewLinec.Boxes = newqty.AsInt();Di2015NewLinedatabase.SaveChanges();Di2015NewLine
11834724Di2015UniqueSeparatorXmlReader.IsEmptyElement
11834737Di2015UniqueSeparatorinterface IEntity<out T> where T : class { T DataObject { get; } }
11834737Di2015UniqueSeparatorIEntity<Model.AItem> a = //somethingDi2015NewLineIEntity<Model.Item> b = a; //it works!Di2015NewLine
11834785Di2015UniqueSeparatorCookieContainer
11834875Di2015UniqueSeparator<configuration>Di2015NewLine  <web.config>Di2015NewLine    <authorization>Di2015NewLine      <deny users="?"  /> <!-- deny un-authenticated access, everyone not logged in that is -->Di2015NewLine      <allow users="*"   /> <!-- allow everyone else -->Di2015NewLine    </authorization>Di2015NewLine  </web.config>Di2015NewLine</configuration>Di2015NewLine
11834875Di2015UniqueSeparator<configuration>Di2015NewLine  <location path="SomeUnprotectedResource.aspx">Di2015NewLine    <authorization>Di2015NewLine      <allow users="*" /> <!-- anyone can view this page -->Di2015NewLine    </authorization>Di2015NewLine  </location>Di2015NewLine</configuration>Di2015NewLine
11834875Di2015UniqueSeparator<configuration>Di2015NewLine  <location path="OnlyForMe.aspx">Di2015NewLine    <authorization>Di2015NewLine      <allow users="Me" /> <!-- only the user Me can view this page -->Di2015NewLine      <deny users="*" /> <!-- deny everyone else -->Di2015NewLine    </authorization>Di2015NewLine  </location>Di2015NewLine</configuration>Di2015NewLine
11834875Di2015UniqueSeparator<configuration>Di2015NewLine  <location path="styles/login.css">Di2015NewLine    <authorization>Di2015NewLine      <allow users="*" />Di2015NewLine    </authorization>Di2015NewLine  </location>Di2015NewLine  <location path="scripts/login.js">Di2015NewLine    <authorization>Di2015NewLine      <allow users="*" />Di2015NewLine    </authorization>Di2015NewLine  </location>Di2015NewLine</configuration>Di2015NewLine
11834893Di2015UniqueSeparatorSTDEV
11834902Di2015UniqueSeparator.Current
11834902Di2015UniqueSeparatorusing (var it = ndo.GetEnumerator())Di2015NewLine    while (it.MoveNext())Di2015NewLine    {                Di2015NewLine        //// Pass the variable it as parameterDi2015NewLine        SomeFunction(it.Current);Di2015NewLine    }Di2015NewLine
11834999Di2015UniqueSeparatorFile.ReadLines
11834999Di2015UniqueSeparatorIEnumerable<string>
11834999Di2015UniqueSeparatorFile.ReadLines(fileName).Max(line => line.Length)Di2015NewLine
11835012Di2015UniqueSeparatorIsolateApps
11835058Di2015UniqueSeparatorInit
11835058Di2015UniqueSeparatorLoad
11835058Di2015UniqueSeparatorViewState
11835058Di2015UniqueSeparatorSession
11835058Di2015UniqueSeparatorViewState
11835058Di2015UniqueSeparatorDataSet
11835058Di2015UniqueSeparatorViewState
11835108Di2015UniqueSeparatorfor (int i = indexes.Length - 1; i >= 0; i--)Di2015NewLine{Di2015NewLine    Root.Descendants("book").ElementAt(indexes[i]).Remove();Di2015NewLine};Di2015NewLine
11835108Di2015UniqueSeparatorIEnumerable<XElement> books = Root.Descendants("book");Di2015NewLineIList<XElement> booksToRemove = new List<XElement>(indexes.Length);Di2015NewLineDi2015NewLineforeach (int index in indexes)Di2015NewLine{Di2015NewLine    booksToRemove.Add(books.ElementAt(index));Di2015NewLine}Di2015NewLineDi2015NewLineforeach (XElement book in booksToRemove)Di2015NewLine{Di2015NewLine    book.Remove();Di2015NewLine}Di2015NewLine
11835134Di2015UniqueSeparatorhttps://accounts.google.com/o/oauth2/token
11835215Di2015UniqueSeparatorblob.Properties.ContentType = @"text/css";Di2015NewLine
11835263Di2015UniqueSeparatorSELECT
11835263Di2015UniqueSeparatorEnrollmentTable.StudentID
11835263Di2015UniqueSeparatorStudent
11835263Di2015UniqueSeparatorEnrollmentTable.CourseID
11835263Di2015UniqueSeparatorCourse
11835263Di2015UniqueSeparatorpublic class StudentDi2015NewLine{Di2015NewLine    string studentID = string.Empty;Di2015NewLine    public string StudentIDDi2015NewLine    {get { return studentID;}Di2015NewLine     set { studentID = value;}}Di2015NewLine};Di2015NewLineDi2015NewLinepublic class CourseDi2015NewLine{Di2015NewLine    string courseID = string.Empty;Di2015NewLine    public string CourseIDDi2015NewLine    {get { return courseID;}Di2015NewLine     set { courseID = value;}}Di2015NewLine};Di2015NewLineDi2015NewLinepublic class EnrollmentDi2015NewLine{Di2015NewLine    Student studentData = new Student();Di2015NewLine    public Student StudentDataDi2015NewLine    {get { return studentData;}Di2015NewLine     set { studentData = value;}Di2015NewLine    }Di2015NewLine    Course courseData = new Course();Di2015NewLine    public Course CourseDataDi2015NewLine    {get { return courseData; }Di2015NewLine     set { courseData = value; }}Di2015NewLine};Di2015NewLineDi2015NewLinepublic class StudentScoreDi2015NewLine{Di2015NewLine    Enrollment enrollmentData = new Enrollment();Di2015NewLine    public Enrollment EnrollmentDataDi2015NewLine    {get { return enrollmentData;}Di2015NewLine     set { enrollmentData = value;}}Di2015NewLineDi2015NewLine    int score = 0;Di2015NewLine    public int ScoreDi2015NewLine    {get {return score;}Di2015NewLine     set {score = value;}}Di2015NewLine};Di2015NewLineDi2015NewLinepublic List<StudentScore> getScoreList()Di2015NewLine{Di2015NewLine    List<StudentScore> aStudentScore = new List<StudentScore>();Di2015NewLine    StringBuilder tmpSQL = new StringBuilder();Di2015NewLine    tmpSQL.Append("SELECT c.CourseID, en.Score, s.StudentID ");Di2015NewLine    tmpSQL.Append("FROM EnrollmentTable en ");Di2015NewLine    tmpSQL.Append("       INNER JOIN Student s ON en.StudentID = s.StudentID ");Di2015NewLine    tmpSQL.Append("       INNER JOIN Course c ON en.CourseID = c.CourseID ");Di2015NewLine    tryDi2015NewLine    {using (SqlConnection conn = MyDB.GetConnection()){Di2015NewLine       conn.Open();Di2015NewLine       using (SqlCommand command = new SqlCommand(tmpSQL.ToString(), conn)){Di2015NewLine         using (SqlDataReader reader = command.ExecuteReader()){Di2015NewLine           while (reader.Read())Di2015NewLine             {Di2015NewLine              StudentScore score = new StudentScore();Di2015NewLine              score.EnrollmentData.StudentData.StudentID = reader["StudentID"].ToString();Di2015NewLine              score.EnrollmentData.CourseData.CourseID = reader["CourseID"].ToString();Di2015NewLine              score.Score = Convert.ToInt32(reader["Score"]);Di2015NewLine              aStudentScore.Add(score);Di2015NewLine              };Di2015NewLine            };Di2015NewLine         };Di2015NewLine      };Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {throw ex;}Di2015NewLine    return aStudentScore; Di2015NewLine}Di2015NewLine
11835334Di2015UniqueSeparator    private const string KeyId = "Your KeyId";Di2015NewLine    private const string AccessKey = "Your AccessKey";Di2015NewLine    private const string S3Url = "https://s3.amazonaws.com/";Di2015NewLineDi2015NewLine            private static void UploadFile()Di2015NewLine    {Di2015NewLine        var fileData = File.ReadAllBytes(@"C:\\123.zip");Di2015NewLineDi2015NewLine        string timeStamp = string.Format("{0:r}", DateTime.UtcNow);Di2015NewLine        string stringToConvert = "PUT\\n" +                               //Http verbDi2015NewLine            "\\n" +                                                       //content-md5Di2015NewLine            "application/octet-stream\\n" +                               //content-typeDi2015NewLine            "\\n" +                                                       //dateDi2015NewLine            "x-amz-acl:public-read"+"\\n" +                               //dateDi2015NewLine            "x-amz-date:" + timeStamp + "\\n" +                           //optionallDi2015NewLine            "/MyBucket/123.zip";                                         //resourceDi2015NewLine        var ae = new UTF8Encoding();Di2015NewLine        var signature = new HMACSHA1 {Key = ae.GetBytes(AccessKey)};Di2015NewLine        var bytes = ae.GetBytes(stringToConvert);Di2015NewLine        var moreBytes = signature.ComputeHash(bytes);Di2015NewLine        var encodedCanonical = Convert.ToBase64String(moreBytes);Di2015NewLineDi2015NewLine        var url = "https://MyBucket.s3.amazonaws.com/123.zip";Di2015NewLineDi2015NewLine        var request = WebRequest.Create(url) as HttpWebRequest;Di2015NewLine        request.Method = "PUT";Di2015NewLine        request.Headers["x-amz-date"] = timeStamp;Di2015NewLine        request.Headers["x-amz-acl"] = "public-read";Di2015NewLine        request.ContentType = "application/octet-stream";Di2015NewLine        request.ContentLength = fileData.Length;Di2015NewLine        request.Headers["Authorization"] = "AWS " + KeyId + ":" + encodedCanonical;Di2015NewLineDi2015NewLine        var requestStream = request.GetRequestStream();Di2015NewLine        requestStream.Write(fileData, 0, fileData.Length);Di2015NewLine        requestStream.Close();Di2015NewLineDi2015NewLine        using (var response = request.GetResponse() as HttpWebResponse)Di2015NewLine        {Di2015NewLine            var reader = new StreamReader(response.GetResponseStream());Di2015NewLine            var data = reader.ReadToEnd();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
11835362Di2015UniqueSeparatorConductor
11835399Di2015UniqueSeparatorusing (StreamReader reader = new StreamReader(convertInput))Di2015NewLine{Di2015NewLine    string line;Di2015NewLine    Stringbuilder builder = new StringBuilder();Di2015NewLine    writer.WriteLine(formatter, "Original Value", "Converted Value");Di2015NewLine    writer.WriteLine(formatter, "--------------", "---------------");Di2015NewLine    while ((line = reader.ReadLine()) != null)Di2015NewLine    {Di2015NewLine            string str2BeConverted = line;Di2015NewLine            long numHexToDex;Di2015NewLine            if ((Int64.TryParse(line, NumberStyles.HexNumber, null, out numHexToDec)) == false)Di2015NewLine            {Di2015NewLineDi2015NewLine                    builder.AppendLine();Di2015NewLine                    builder.Append(line + " " + "is not a Hexadecimal value.");Di2015NewLine                    continue; //there is ALWAYS an alternative to gotoDi2015NewLine            }Di2015NewLineDi2015NewLine            Int64.TryParse(line, NumberStyles.HexNumber, null, out numHexToDec);Di2015NewLine            string lineChanged = numHexToDec.ToString("G");Di2015NewLine    }Di2015NewLineDi2015NewLine    writer.Write(builder.ToString();Di2015NewLine}Di2015NewLine
11835399Di2015UniqueSeparatorgoto
11835399Di2015UniqueSeparatorcontinue
11835508Di2015UniqueSeparatorstring stm = @"Di2015NewLine    select distinct(position)Di2015NewLine      from plan Di2015NewLine     where region = @regionDi2015NewLine       and market = @marketDi2015NewLine";Di2015NewLineDi2015NewLineDi2015NewLineMySqlCommand cmd = new MySQLCommand(stm);Di2015NewLinecmd.Parameters.AddWithValue("@region",regionvalue);Di2015NewLinecmd.Parameters.AddWithValue("@market",marketvalue);Di2015NewLine
11835530Di2015UniqueSeparatorset /p
11835530Di2015UniqueSeparatorset /p MyPassword = <  path\\to\\file\\Password.txtDi2015NewLinemsbuild ...;Password=%MyPassword%; Di2015NewLine
11835630Di2015UniqueSeparatorVariable v = null;Di2015NewLinev = pkg.Variables.Add("OutputFolder", false, "Template", String.Empty);Di2015NewLinev.EvaluateAsExpression = true;Di2015NewLinev.Expression = pkg.Variables["Template::FolderRoot"].Value + "\\\\Output\\\\";Di2015NewLine
11835648Di2015UniqueSeparatordocument.Root.Elements("Company").Elements()Di2015NewLine                .Where(item => !item.HasElements).ToList();Di2015NewLine
11835832Di2015UniqueSeparatorstatic unsafe void Method()Di2015NewLine{Di2015NewLine    IntPtr pdwSetting = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(uint)));Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        NativeMethods.JidaVgaGetContrast(_handleJida, pdwSetting);Di2015NewLine        var contrast = *(uint*)pdwSetting;Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        Marshal.FreeHGlobal(pdwSetting);Di2015NewLine    }Di2015NewLine}Di2015NewLine
11835832Di2015UniqueSeparatorvoid (*GetContrastPointer)(HANDLE handle, unsigned int* setting);Di2015NewLine
11835832Di2015UniqueSeparator[DllImport("*.dll")]Di2015NewLinevoid GetContrast(IntPtr handle, IntPtr setting); // most probably what you didDi2015NewLine
11835832Di2015UniqueSeparator[DllImport("*.dll")]Di2015NewLinevoid GetContrast(IntPtr handle, ref uint setting);Di2015NewLine
11835832Di2015UniqueSeparatoruint contrast = 0; // or some other invalid valueDi2015NewLineNativeMethods.JidaVgaGetContrast(_handleJida, ref contrast);Di2015NewLine
11835844Di2015UniqueSeparator        control.OK_BTN.Click += (s, args) =>Di2015NewLine        {Di2015NewLine            popup.IsOpen = false;Di2015NewLine            this.IsEnabled = true;Di2015NewLineDi2015NewLine            Dispatcher.BeginInvoke(() =>Di2015NewLine                {Di2015NewLine                    MessageBoxResult result = MessageBox.Show("Do you want to reset the settings ?", "Settings", MessageBoxButton.OKCancel);Di2015NewLineDi2015NewLine                    if (result == MessageBoxResult.OK)Di2015NewLine                    {Di2015NewLine                        changeSettings();Di2015NewLine                    }Di2015NewLine                });Di2015NewLine        };Di2015NewLine
11836138Di2015UniqueSeparatorOperationContextScope
11836138Di2015UniqueSeparatorusing (OperationContextScope scope = new OperationContextScope(wcfClient.InnerChannel))Di2015NewLine      {Di2015NewLine        MessageHeader headerDi2015NewLine          = MessageHeader.CreateHeader(Di2015NewLine          "Service-Bound-CustomHeader",Di2015NewLine          "http://Microsoft.WCF.Documentation",Di2015NewLine          "Custom Happy Value."Di2015NewLine          );Di2015NewLine        OperationContext.Current.OutgoingMessageHeaders.Add(header);Di2015NewLineDi2015NewLine        // Making calls.Di2015NewLine        Console.WriteLine("Enter the greeting to send: ");Di2015NewLine        string greeting = Console.ReadLine();Di2015NewLineDi2015NewLine        //Console.ReadLine();Di2015NewLine        header = MessageHeader.CreateHeader(Di2015NewLine            "Service-Bound-OneWayHeader",Di2015NewLine            "http://Microsoft.WCF.Documentation",Di2015NewLine            "Different Happy Value."Di2015NewLine          );Di2015NewLine        OperationContext.Current.OutgoingMessageHeaders.Add(header);Di2015NewLineDi2015NewLine        // One-wayDi2015NewLine        wcfClient.Push(greeting);Di2015NewLine        this.wait.WaitOne();Di2015NewLineDi2015NewLine        // Done with service. Di2015NewLine        wcfClient.Close();Di2015NewLine        Console.WriteLine("Done!");Di2015NewLine        Console.ReadLine();Di2015NewLine      }Di2015NewLine
11836138Di2015UniqueSeparatorvar messageProperty = new HttpRequestMessageProperty();Di2015NewLinemessageProperty.Headers.Add(HttpRequestHeader.Authorization, AuthorizationHeader);Di2015NewLine
11836277Di2015UniqueSeparator<a href="#" onclick="upvote();" Di2015NewLine    class="<%# ((bool)Eval("CurrentUserHasUpvoted")) ? "on" : "off" %>">Upvote</a>Di2015NewLine
11836384Di2015UniqueSeparator.BindTo(Model,(NavigationBindingFactory<TreeViewItem> mappings) =>Di2015NewLine    {Di2015NewLine        mappings.For<Category>(binding => bindingDi2015NewLine                .ItemDataBound((item, category) =>Di2015NewLine                {Di2015NewLine                    item.Action("Test", "Home", new{text=category.CategoryName});//here you can assign the action method , the last parameter is the route valuesDi2015NewLine                    item.Text = category.CategoryName;Di2015NewLine                })Di2015NewLine     }Di2015NewLine
11836398Di2015UniqueSeparator\\w
11836398Di2015UniqueSeparator\\w*
11836398Di2015UniqueSeparatorJoe Bob
11836398Di2015UniqueSeparatorpersonPattern
11836398Di2015UniqueSeparator"\\\\([ \\\\w]*\\\\)"
11836398Di2015UniqueSeparator.*
11836398Di2015UniqueSeparatorRegex regex = new Regex("(" + datePattern + ") (" + personPattern + ") (.*?(?=$|" + datePattern + "))");Di2015NewLine
11836411Di2015UniqueSeparatorActiveSheet.PageSetup.Pages.CountDi2015NewLine
11836447Di2015UniqueSeparatorpublic static int ReverseEndianness(int num)Di2015NewLine{Di2015NewLine    byte[] bytes = BitConverter.GetBytes(num);Di2015NewLine    byte[] reversedBytes = new byte[bytes.Length];Di2015NewLineDi2015NewLine    for (int i = 0; i < bytes.Length; i++)Di2015NewLine    {Di2015NewLine        reversedBytes[i] = bytes[bytes.Length - 1 - i];Di2015NewLine    }Di2015NewLineDi2015NewLine    return BitConverter.ToInt32(reversedBytes, 0);Di2015NewLine}Di2015NewLine
11836511Di2015UniqueSeparatorawait
11836511Di2015UniqueSeparatorasync
11836511Di2015UniqueSeparatorMain
11836511Di2015UniqueSeparatorasync
11836511Di2015UniqueSeparatorasync
11836511Di2015UniqueSeparatorWait
11836511Di2015UniqueSeparatorTask
11836511Di2015UniqueSeparatorMain
11836511Di2015UniqueSeparatorTask
11836511Di2015UniqueSeparatorRead
11836511Di2015UniqueSeparatorWait
11836511Di2015UniqueSeparatorAggregateException
11836511Di2015UniqueSeparatorasync
11836511Di2015UniqueSeparatorawait
11836518Di2015UniqueSeparatorusing (var db = new YourEntityContext())Di2015NewLine{Di2015NewLine    var result = db.YourFunctionImportName(Di2015NewLine        Convert.ToInt32(ddlWhatever1.SelectedValue),Di2015NewLine        Convert.ToInt32(ddlWhatever2.SelectedValue));Di2015NewLineDi2015NewLine    //Int32 used as an example, use whatever type your function import is expecting.Di2015NewLine    //Do whatever with result.Di2015NewLine}Di2015NewLine
11836523Di2015UniqueSeparatorFillUpEnergy
11836523Di2015UniqueSeparatorFillUpEnergy
11836523Di2015UniqueSeparatorinterface IEnergyProvider {Di2015NewLine    void TakeFuel(EfuelType i_fuelType, int amounOfEnergy);Di2015NewLine    void TakeElectricity(int amounOfEnergy);Di2015NewLine}Di2015NewLineinterface ICar {Di2015NewLine    void FillUpEnergy(IEnergyProvider provider);Di2015NewLine}Di2015NewLine
11836523Di2015UniqueSeparatormyCar.FillUpEnergy(myProvider)
11836523Di2015UniqueSeparatormyProvider.TakeFuel
11836523Di2015UniqueSeparatormyProvider.TakeElectricity
11836640Di2015UniqueSeparator 567.56 + 345.54 or .00097854 - .00021297Di2015NewLine
11836640Di2015UniqueSeparator 567.56 + .00097854    or  345.54  - .00021297Di2015NewLine
11836745Di2015UniqueSeparatorpublic class RegistrationConfig {Di2015NewLine   // private static instanceDi2015NewLine   private static RegistrationConfig _instance = new RegistrationConfig()Di2015NewLineDi2015NewLine   // private constructor prevents the class from being instantiated from outsideDi2015NewLine   private RegistrationConfig() { }Di2015NewLineDi2015NewLine   // instance public accessorDi2015NewLine   public static RegistrationConfig Current { get { return _instance; } }Di2015NewLineDi2015NewLine   public int InvitationToken { get; set; }Di2015NewLine   public int InvitationDollar { get;set; }Di2015NewLine}Di2015NewLine
11836745Di2015UniqueSeparatorvar credit = new Credit();Di2015NewLinecredit.Token = RegistrationConfig.Current.InvitationToken;Di2015NewLine
11836745Di2015UniqueSeparatorpublic class RegistrationConfig {Di2015NewLine   // currentDi2015NewLine   private static RegistrationConfig _current;Di2015NewLineDi2015NewLine   // instance public accessorDi2015NewLine   public static RegistrationConfig Current { get { return _current; } }Di2015NewLineDi2015NewLine   // public setterDi2015NewLine   public static void SetCurrent(RegistrationConfig current)Di2015NewLine   {Di2015NewLine       _current = current;Di2015NewLine   }Di2015NewLineDi2015NewLine   public int InvitationToken { get; set; }Di2015NewLine   public int InvitationDollar { get;set; }Di2015NewLine}Di2015NewLine
11836745Di2015UniqueSeparatorRegistrationConfig.SetCurrent(new RegistrationConfig() { ... });Di2015NewLine
11836745Di2015UniqueSeparatorcredit.Token = RegistrationConfig.Current.InvitationToken;Di2015NewLine
11836764Di2015UniqueSeparatorXmlDocument
11836901Di2015UniqueSeparatorint customerID = (int) Session["customerID"];Di2015NewLine      // orDi2015NewLineint customerID = Convert.ToInt32( Session["customerID"].ToString());Di2015NewLine     // orDi2015NewLineint customerID = int.Parse( Session["customerID"].ToString());Di2015NewLine
11836917Di2015UniqueSeparatorvar data = TESTDB.Where(i => i.ALPHA == 1).Select(i => new {i.A, i.B, i.C}).Distinct();Di2015NewLine
11837174Di2015UniqueSeparatore
11837174Di2015UniqueSeparatorPhoneApplicationPage_Loaded
11837174Di2015UniqueSeparatorRoutedEventArgs
11837174Di2015UniqueSeparatorprivate void PhoneApplicationPage_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    myTextBox.Focus();Di2015NewLine}Di2015NewLine
11837267Di2015UniqueSeparatorint gas = random.Next(heap[1].TotalWeight);Di2015NewLine
11837267Di2015UniqueSeparatorgas >
11837267Di2015UniqueSeparatorgas >=
11837267Di2015UniqueSeparatorgas
11837267Di2015UniqueSeparator>
11837267Di2015UniqueSeparator>=
11837271Di2015UniqueSeparatorprotected void gv_RowCommand(object sender, GridViewCommandEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (e.CommandName == "Insert") //- this is needed to explain that the INSERT command will only work when INSERT is clickedDi2015NewLine        {Di2015NewLine            gv.DataBind();Di2015NewLineDi2015NewLine            DataTable d = dbcon.GetDataTable("SELECT * FROM CIS.CIS_TRANS ORDER BY ID DESC", "ProjectCISConnectionString");Di2015NewLineDi2015NewLine            string transCode = "", fundCode = "", BSA_CD = "", DP_TYPE = "";Di2015NewLineDi2015NewLine            if (d.Rows.Count > 0)Di2015NewLine            {Di2015NewLine                transCode = d.Rows[0]["TRANS_CD"].ToString();Di2015NewLine                fundCode = d.Rows[0]["FUND_CD"].ToString();Di2015NewLine                BSA_CD = d.Rows[0]["BSA_CD"].ToString();Di2015NewLine                DP_TYPE = d.Rows[0]["DP_TYPE"].ToString();Di2015NewLineDi2015NewLine                if (transCode.Trim().Length > 0)Di2015NewLine                {Di2015NewLine                    dbcon.Execute("INSERT INTO CIS.CIS_TRANS (TRANS_CD) VALUES('')", "ProjectCISConnectionString");Di2015NewLineDi2015NewLine                    gv.DataBind();Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            gv.EditIndex = gv.Rows.Count - 1;Di2015NewLineDi2015NewLine        }Di2015NewLine        else if (e.CommandName == "Cancel")Di2015NewLine        {Di2015NewLine            DataTable d = dbcon.GetDataTable("SELECT * FROM CIS.CIS_TRANS ORDER BY ID DESC", "ProjectCISConnectionString");Di2015NewLineDi2015NewLine            string transCode = "";Di2015NewLineDi2015NewLine            if (d.Rows.Count > 0)Di2015NewLine            {Di2015NewLine                transCode = d.Rows[0]["TRANS_CD"].ToString();Di2015NewLineDi2015NewLine                if (transCode.Trim().Length == 0)Di2015NewLine                {Di2015NewLine                    dbcon.Execute(string.Format("DELETE CIS.CIS_TRANS WHERE ID = '{0}'", d.Rows[0]["ID"]), "ProjectCISConnectionString");Di2015NewLineDi2015NewLine                    gv.DataBind();Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
11837357Di2015UniqueSeparatorseries1.Points(1).Format.Fill.ForeColor.RGB = System.Drawing.ColorTranslator.ToOle(Color.Green);Di2015NewLine
11837357Di2015UniqueSeparatorseries1.Points(1).Format.Fill.ForeColor.RGB = Excel.XlRgbColor.rgbGreenDi2015NewLine
11837360Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLineclass Form1 : FormDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine        Application.Run(new Form1());Di2015NewLine    }Di2015NewLineDi2015NewLine    DateTime lastSnmpTime;Di2015NewLine    TimeSpan snmpTime = TimeSpan.FromSeconds(30);Di2015NewLine    DateTime startTime;Di2015NewLine    TextBox elapsedTimeTextBox;Di2015NewLine    Timer timer;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        timer = new Timer { Enabled = false, Interval = 10 };Di2015NewLine        timer.Tick += new EventHandler(timer_Tick);Di2015NewLineDi2015NewLine        elapsedTimeTextBox = new TextBox { Location = new Point(10, 10), ReadOnly = true };Di2015NewLine        Controls.Add(elapsedTimeTextBox);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine        base.OnLoad(e);Di2015NewLineDi2015NewLine        startTime = DateTime.Now;Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    void timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        // Update elapsed timeDi2015NewLine        elapsedTimeTextBox.Text = (DateTime.Now - startTime).ToString("g");Di2015NewLineDi2015NewLine        // Send SNMPDi2015NewLine        if (DateTime.Now - lastSnmpTime >= snmpTime)Di2015NewLine        {Di2015NewLine            lastSnmpTime = DateTime.Now;Di2015NewLineDi2015NewLine            // Do SNMPDi2015NewLineDi2015NewLine            // Adjust snmpTime as neededDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
11837360Di2015UniqueSeparatorlastSnmpTime = DateTime.MinValue
11837360Di2015UniqueSeparator"g"
11837360Di2015UniqueSeparator@"d\\:hh\\:mm\\:ss\\.ff"
11837360Di2015UniqueSeparatorTimeSpan.MaxValue
11837472Di2015UniqueSeparator  var t = Type.GetTypeFromProgID("Exfo.IcSCPIActiveX.IcSCPIAccess", sHost, true);Di2015NewLine  obj = (IcSCPIAccess)Activator.CreateInstance(t);Di2015NewLine
11837518Di2015UniqueSeparator.aspxDi2015NewLineDi2015NewLine<asp:SqlDataSource id="SqlDataSource1"Di2015NewLine      runat="server"Di2015NewLine      ConnectionString="<%$ ConnectionStrings:MyConnString%>"Di2015NewLine      SelectCommand="SELECT * FROM Table">Di2015NewLine  </asp:SqlDataSource>Di2015NewLineDi2015NewLine<asp:ListView ID="lvImages" runat="server" DataSource="SqlDataSource1">Di2015NewLine   <ItemTemplate>Di2015NewLine       <asp:Image ID="imgListImage" runat="server" ImageUrl='<%# Eval("Folder") %>' />Di2015NewLine   </ItemTemplate>Di2015NewLine</asp:ListView>Di2015NewLine
11837643Di2015UniqueSeparatorstring input;      // Your input stringDi2015NewLineList<string> outputs = new List<string>();Di2015NewLineDi2015NewLine// Parse the original stringDi2015NewLineNameValueCollection parms = HttpUtility.ParseQueryString(input);Di2015NewLineDi2015NewLine// Loop over each item, url encodingDi2015NewLineforeach (string key in parms.AllKeys)  {Di2015NewLine    foreach (string val in parms.GetValues(key))Di2015NewLine        outputs.Add(HttpUtility.UrlEncode(key) + "=" + HttpUtility.UrlEncode(val));Di2015NewLine}Di2015NewLineDi2015NewLine// combine the encoded strings, joining with &Di2015NewLinestring result = string.Join("&", outputs);    // the final resultDi2015NewLine
11837643Di2015UniqueSeparatorstring result = HttpUtility.ParseQueryString(postData).ToString();Di2015NewLine
11837729Di2015UniqueSeparatorSomeFunction(42)
11837729Di2015UniqueSeparatorstruct MyStruct { public int V;}Di2015NewLinevoid UpdateStruct(MyStruct x)Di2015NewLine{Di2015NewLine  x.V = 42; // updates copy of passed in object, changes will not be visible outside.Di2015NewLine}Di2015NewLine....Di2015NewLinevar local = new MyStruct{V = 13}Di2015NewLineUpdateStruct(local); // Hope to get local.V == 42Di2015NewLineif (local.V == 13) {Di2015NewLine  // Expected. copy inside UpdateStruct updated,Di2015NewLine  // but this "local" is untouched.Di2015NewLine}Di2015NewLine
11837843Di2015UniqueSeparatorpbMsg.HasField(...)
11837843Di2015UniqueSeparatorIMessage.HasField(...)
11837845Di2015UniqueSeparatorInt32
11837845Di2015UniqueSeparatorint
11837845Di2015UniqueSeparatorglobal::System.Int32
11837918Di2015UniqueSeparatorp = abs(v * 2) - (v > 0 ? 1 : 0)
11837918Di2015UniqueSeparatorv = (p % 2 == 1 ? +1 : -1) * ((2*p + 3) / 4)
11837918Di2015UniqueSeparator(0 <-> 0), (1 <-> 1), (2 <-> -1), (3 <-> 2), (4 <-> -2), (5 <-> 3), (6 <-> -3), ...
11838020Di2015UniqueSeparatorSalesRepository
11838020Di2015UniqueSeparatorSalesPerson
11838020Di2015UniqueSeparatorSalesPeopleRepository
11838020Di2015UniqueSeparatorSalesRepository
11838020Di2015UniqueSeparatorSalesPeopleRepository
11838020Di2015UniqueSeparatorSalesPeopleRepository
11838020Di2015UniqueSeparatorpublic SalesController (ISalesRepository salesRepository, ISalesPeopleRepository salesPeopleRepository)Di2015NewLine{Di2015NewLine   this._salesRepository = salesRepository;Di2015NewLine   this._salesPeopleRepository = salesPeopleRepository;Di2015NewLine}Di2015NewLine
