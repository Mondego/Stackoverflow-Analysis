19763000Di2015UniqueSeparatorreturn Regex.Split(lines, @"[^-'a-zA-Z]")Di2015NewLine                              .Where(x=>!string.IsNullOrWhiteSpace(x)).ToArray();Di2015NewLine
19763046Di2015UniqueSeparatorforeach
19763046Di2015UniqueSeparatorObservableCollection
19763046Di2015UniqueSeparatorPlanningGridHeaderVM
19763046Di2015UniqueSeparatorAddHandler
19763046Di2015UniqueSeparatorToList()
19763046Di2015UniqueSeparatorforeach
19763046Di2015UniqueSeparatorObservableCollection
19763230Di2015UniqueSeparatorSelectedItems
19763230Di2015UniqueSeparator System.Collections.ObjectModel.ObservableCollection<object> selected_items = radTreeListView.SelectedItems;Di2015NewLine        foreach (object item in selected_items)Di2015NewLine        {Di2015NewLine            WarehouseItem warehouseitem = (WarehouseItem)item;Di2015NewLine            MessageBox.Show(warehouseitem.Name);Di2015NewLine        }Di2015NewLine
19763310Di2015UniqueSeparatorproductId
19763310Di2015UniqueSeparatorcustomerId
19763310Di2015UniqueSeparatorsupplierId
19763310Di2015UniqueSeparatorusing(var db = new YourDbContext())Di2015NewLine{Di2015NewLine    var results = db.Orders.Where(o => Di2015NewLine            (customerId == null || o.CustomerId == customerId) Di2015NewLine            && (productId == null || o.ProductId == productId) Di2015NewLine            && (supplierId == null || o.SupplierId == supplierId))Di2015NewLine        .Select(o => new { o.CustomerId, o.ProductId, o.SupplierId }).ToList();Di2015NewLine}Di2015NewLine
19763327Di2015UniqueSeparatorvar transform = new ScaleTransform(1, -1, 0, 0);Di2015NewLine
19763403Di2015UniqueSeparator&(?!nbsp;)Di2015NewLine
19763403Di2015UniqueSeparator&
19763403Di2015UniqueSeparatornbsp;
19763403Di2015UniqueSeparatorDim input = "& and  "Di2015NewLineDim output = Regex.Replace(input, "&(?!nbsp;)", "&")Di2015NewLine
19763403Di2015UniqueSeparator 
19763403Di2015UniqueSeparator&
19763403Di2015UniqueSeparator#
19763403Di2015UniqueSeparator;
19763403Di2015UniqueSeparator&(?!#?\\w+;)Di2015NewLine
19763573Di2015UniqueSeparatorSystem.ServiceProcess
19763573Di2015UniqueSeparatorSystem.ServiceProcess.dll
19763573Di2015UniqueSeparatorC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727
19763578Di2015UniqueSeparatorShowDialog()
19763578Di2015UniqueSeparatorDialogResult result = ofd.ShowDialog();Di2015NewLine
19763578Di2015UniqueSeparatorif(result == DialogResult.OK) {Di2015NewLine    // OK!Di2015NewLine}Di2015NewLineelse if(result == DialogResult.Cancel) {Di2015NewLine    return; // Exit functionDi2015NewLine}Di2015NewLineelse {Di2015NewLine    // Anything else you need to doDi2015NewLine}Di2015NewLine
19763738Di2015UniqueSeparatormovie
19763738Di2015UniqueSeparatorextDic
19763738Di2015UniqueSeparatormovie
19763738Di2015UniqueSeparatormovie.Clear()
19763738Di2015UniqueSeparatorextDic
19763738Di2015UniqueSeparatormovie
19763738Di2015UniqueSeparatornew Dictionary<string, double>()
19763738Di2015UniqueSeparatorstring[] text = System.IO.File.ReadLines(@File path).Take(100).ToArray();Di2015NewLineDi2015NewLine//extDic[username] - [moviename][rating] is the structureDi2015NewLineDi2015NewLineDictionary<string,Dictionary<string,double>> extDic=new Dictionary<string,Dictionary<string,double>>();   Di2015NewLineforeach(string s in text)Di2015NewLine{Di2015NewLine  int rating;Di2015NewLine   //split only onceDi2015NewLine   string[] splitted = s.Split('\\t');Di2015NewLineDi2015NewLine  //UPDATE: skip the current line if the structure is not okDi2015NewLine  if(splitted.Length != 3){Di2015NewLine      continue;Di2015NewLine  }Di2015NewLineDi2015NewLine  string username=splitted[0];Di2015NewLine  string moviename=splitted[1];Di2015NewLine  Int32.TryParse(splitted[2], out rating);Di2015NewLineDi2015NewLine  //UPDATE: skip the current line if the user name or movie name is not validDi2015NewLine  if(string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(moviename)){Di2015NewLine      continue;Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine   if(!extDic.ContainsKey(username)){Di2015NewLine      //create a new Dictionary for every new userDi2015NewLine      extDic.Add(username, new Dictionary<string,double>());Di2015NewLine   }Di2015NewLine   //at this point we are sure to have all the keys set upDi2015NewLine   //let's assign the movie ratingDi2015NewLine   extDic[username][moviename] = rating;Di2015NewLineDi2015NewLine}Di2015NewLine
19763790Di2015UniqueSeparatorplainData
19763790Di2015UniqueSeparatorcryptoStream.Read(...)
19763790Di2015UniqueSeparator1
19763790Di2015UniqueSeparatoraes.Padding = PaddingMode.None;
19763790Di2015UniqueSeparatorcryptoStream.Read(...)
19763790Di2015UniqueSeparator16
19763790Di2015UniqueSeparatorplainData
19763790Di2015UniqueSeparator0xff
19763790Di2015UniqueSeparator0x0f
19763790Di2015UniqueSeparator0x07
19763861Di2015UniqueSeparatorAddressHeader header = AddressHeader.CreateAddressHeader(authorization);Di2015NewLinevar address = new EndpointAddress(ClientConfig.Endpoint, new[] { header });Di2015NewLine
19763887Di2015UniqueSeparatorstring strRegex = @"\\w+$";    Di2015NewLineRegex myRegex = new Regex(strRegex);Di2015NewLinestring strTargetString = @"+CMGR: ""REC UNREAD"",""MSG"","""",""2013/11/04 13:52:18+28""" + "\\r\\n" + @"0E2A0E270E310E2A0E140E350E040E230E310E1A00200E220E340E190E140E350E150E490E2D0E190E230E310E1A0E040E230E310E1A0E170E380E010E460E040E197";Di2015NewLinereturn myRegex.Match(strTargetString);Di2015NewLine
19763887Di2015UniqueSeparatorstrTargetString.Split('\\n')[1]Di2015NewLine
19763928Di2015UniqueSeparator<DataTemplate DataType="{x:Type namespace:ChildrenClass1}">Di2015NewLine<TextBlock Text="{Binding Field2}"/>Di2015NewLine</DataTemplate>Di2015NewLineDi2015NewLine <DataTemplate DataType="{x:Type namespace:ChildrenClass2}">Di2015NewLine<TextBlock Text="{Binding Field3}"/>Di2015NewLine</DataTemplate>Di2015NewLine
19764221Di2015UniqueSeparatorICommand
19764221Di2015UniqueSeparatorpublic class FooCommand : ICommandDi2015NewLine{Di2015NewLine    private bool _canExecute;Di2015NewLine    private Action _delegate;Di2015NewLine    public event EventHandler CanExecuteChanged;Di2015NewLine    public new bool CanExecuteDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _canExecute;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _canExecute = value;Di2015NewLine            if(CanExecuteChanged != null)Di2015NewLine                CanExecuteChanged();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        _delegate();Di2015NewLine    }Di2015NewLineDi2015NewLine    bool ICommand.CanExecute()Di2015NewLine    {Di2015NewLine        return CanExecute;Di2015NewLine    }Di2015NewLineDi2015NewLine    public FooCommand(Action action)Di2015NewLine    {Di2015NewLine        _delegate = action;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19764234Di2015UniqueSeparatorstring cmd = Application.ExecutablePath.ToString() + " /arg1 /arg2 /arg3 .....";Di2015NewLineRegistryKey rk = Registry.CurrentUser.OpenSubKeyDi2015NewLine        ("SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run", true);Di2015NewLine         rk.SetValue(AppName, cmd); Di2015NewLine
19764497Di2015UniqueSeparator private void TextBox_OnLostFocus(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        myControl.Visibility = Visibility.Collapsed;Di2015NewLineDi2015NewLine    }Di2015NewLine
19764497Di2015UniqueSeparator <TextBox LostFocus="TextBox_OnLostFocus"></TextBox>Di2015NewLine
19764771Di2015UniqueSeparator// Set up List ViewDi2015NewLinelistViewFiles.View = View.Details;Di2015NewLinelistViewFiles.Columns.Clear();Di2015NewLinelistViewFiles.Columns.Add("File name");Di2015NewLinelistViewFiles.Columns.Add("File path");Di2015NewLineDi2015NewLine// Populate with files and file pathsDi2015NewLineforeach (string filePath in Directory.GetFiles(path, fileType, SearchOption.AllDirectories))Di2015NewLine{Di2015NewLine    string fileName = Path.GetFileName(filePath);Di2015NewLine    listView1.Items.Add(fileName).SubItems.Add(new FileInfo(fileName).DirectoryName);Di2015NewLine}Di2015NewLine
19764771Di2015UniqueSeparatorDirectoryInfo di = new DirectoryInfo(path);Di2015NewLineforeach (FileInfo fi in di.GetFiles(fileType, SearchOption.AllDirectories))Di2015NewLine    listViewFiles.Items.Add(fi.Name).SubItems.Add(fi.DirectoryName);Di2015NewLine
19764996Di2015UniqueSeparatorGetAdjustmentTable
19764996Di2015UniqueSeparatoradjustmentTable
19764996Di2015UniqueSeparatoradjustmentTable
19764996Di2015UniqueSeparatorprivate DataTable _adjustmentTable;Di2015NewLineDi2015NewLineprivate DataTable GetAdjustmentTable()Di2015NewLine{Di2015NewLine    if (adjustmentTable == null)Di2015NewLine    {Di2015NewLine        adjustmentTable = new DataTable();Di2015NewLine    }Di2015NewLine    ....Di2015NewLine
19765017Di2015UniqueSeparatorvar sortedItems = Items.OrderBy(x => x.PropertyGivingTheOrder).ToList();Di2015NewLineDi2015NewLineItems.Clear();Di2015NewLineDi2015NewLineforeach (var item in sortedItems)Di2015NewLine{Di2015NewLine    Items.Add(item);Di2015NewLine}Di2015NewLine
19765017Di2015UniqueSeparatorpublic override void LoadData()Di2015NewLine{Di2015NewLine    base.LoadData();Di2015NewLineDi2015NewLine    var projectsInDB = _taskDB.Projects.OrderBy(x => x.PropertyGivingTheOrder).ToList();Di2015NewLineDi2015NewLine    Items = new ObservableCollection<Project>(projectsInDB);Di2015NewLine}Di2015NewLine
19765017Di2015UniqueSeparatorpublic override void AddItem(Project item)Di2015NewLine{Di2015NewLine    _taskDB.Projects.InsertOnSubmit(item);Di2015NewLine    _taskDB.SubmitChanges();Di2015NewLineDi2015NewLine    Items.Add(item);Di2015NewLineDi2015NewLine    // Apply sorting again Di2015NewLine}Di2015NewLine
19765045Di2015UniqueSeparator// ...Di2015NewLinevar xmlDoc = new XElement("Stats",Di2015NewLine    new XAttribute("Date", DateTime.Now.ToShortDateString()));Di2015NewLineXElement iteratingElement = null;Di2015NewLinevar length = elementNames.Length + 1;Di2015NewLinefor (int i = 0; i < cells.Count; i++)Di2015NewLine{Di2015NewLine    if (i % ((i == 0) ? 1 : length) == 0)Di2015NewLine    {Di2015NewLine        iteratingElement = new XElement("Player",Di2015NewLine            new XAttribute("Rank", cells[i]));Di2015NewLine        xmlDoc.Add(iteratingElement);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        iteratingElementDi2015NewLine            .Add(new XElement(elementNames[(i % length) - 1], cells[i]));Di2015NewLine    }Di2015NewLine}Di2015NewLinexmlDoc.Save("parsed.xml");Di2015NewLine
19765060Di2015UniqueSeparator<Window x:Class="Playground.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:local="clr-namespace:Playground"Di2015NewLine        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Window.InputBindings>Di2015NewLine        <KeyBinding Modifiers="Alt" Key="LeftAlt" Command="{Binding AltPressedCommand}" />Di2015NewLine    </Window.InputBindings>Di2015NewLine    <Window.Resources>Di2015NewLine        <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter"/>Di2015NewLine    </Window.Resources>Di2015NewLine    <i:Interaction.Triggers>Di2015NewLine        <i:EventTrigger EventName="PreviewKeyUp">Di2015NewLine            <i:InvokeCommandAction Command="{Binding AltUnpressedCommand}"/>Di2015NewLine        </i:EventTrigger>Di2015NewLine    </i:Interaction.Triggers>Di2015NewLine    <Grid>Di2015NewLine        <Button Content="My Button" Visibility="{Binding IsAltPressed, Converter={StaticResource boolToVisibilityConverter}}"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
19765060Di2015UniqueSeparatorpublic class MainWindowViewModel : NotificationObjectDi2015NewLine{Di2015NewLine    public MainWindowViewModel()Di2015NewLine    {Di2015NewLine        AltPressedCommand = new DelegateCommand(() => IsAltPressed = true);Di2015NewLine        AltUnpressedCommand = new DelegateCommand(() => IsAltPressed = false);Di2015NewLine    }Di2015NewLineDi2015NewLine    public DelegateCommand AltPressedCommand { get; set; }Di2015NewLineDi2015NewLine    public DelegateCommand AltUnpressedCommand { get; set; }Di2015NewLineDi2015NewLine    private bool _IsAltPressed;Di2015NewLine    public bool IsAltPressedDi2015NewLine    {Di2015NewLine        get { return _IsAltPressed; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (value != _IsAltPressed)Di2015NewLine            {Di2015NewLine                _IsAltPressed = value;Di2015NewLine                RaisePropertyChanged("IsAltPressed");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19765060Di2015UniqueSeparatorBooleanToVisibilityConverter
19765060Di2015UniqueSeparatorPreviewKeyUp
19765060Di2015UniqueSeparatorpublic class PeviewKeyUpBehavior : Behavior<UIElement>Di2015NewLine{Di2015NewLine    #region PropretiesDi2015NewLineDi2015NewLine    public ICommand CommandDi2015NewLine    {Di2015NewLine        get { return (ICommand)GetValue(CommandProperty); }Di2015NewLine        set { SetValue(CommandProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty CommandProperty =Di2015NewLine        DependencyProperty.Register("Command", typeof(ICommand), typeof(PeviewKeyUpBehavior));Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region MethodsDi2015NewLineDi2015NewLine    protected override void OnAttached()Di2015NewLine    {Di2015NewLine        AssociatedObject.PreviewKeyUp += OnPreviewKeyUp;Di2015NewLine        base.OnAttached();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnPreviewKeyUp(object sender, System.Windows.Input.KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (Command == null) return;Di2015NewLineDi2015NewLineDi2015NewLine        // Execute command and send the key as the command parameterDi2015NewLine        Command.Execute(e.Key == Key.System ? e.SystemKey : e.Key);Di2015NewLine    } Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
19765060Di2015UniqueSeparatorPreviewKeyUp
19765060Di2015UniqueSeparator<!-- Used behaviors instead of triggers -->Di2015NewLine<i:Interaction.Behaviors>Di2015NewLine    <local:PeviewKeyUpBehavior Command="{Binding KeyUnpressedCommand}"/>Di2015NewLine</i:Interaction.Behaviors>Di2015NewLine
19765060Di2015UniqueSeparatorpublic DelegateCommand<Key?> KeyUnpressedCommand { get; set; }Di2015NewLine
19765060Di2015UniqueSeparatorKeyUnpressedCommand = new DelegateCommand<Key?>(key => Di2015NewLine{Di2015NewLine    if (key == Key.LeftAlt)Di2015NewLine        IsAltPressed = false;Di2015NewLine});Di2015NewLine
19765595Di2015UniqueSeparatorplaceholder='<%# CMS.GlobalHelper.ResHelper.GetString("Account.Password") %>'Di2015NewLine
19765595Di2015UniqueSeparator"
19765595Di2015UniqueSeparator#
19765595Di2015UniqueSeparator=
19765595Di2015UniqueSeparatorplaceholder='<%= CMS.GlobalHelper.ResHelper.GetString("Account.Password") %>'Di2015NewLine
19765966Di2015UniqueSeparatorreturn View(...)
19765966Di2015UniqueSeparatorreturn RedirectToAction(...)
19766026Di2015UniqueSeparatoris
19766026Di2015UniqueSeparatorfalse
19766032Di2015UniqueSeparatorKey
19766032Di2015UniqueSeparatorlst.Add(New Makes() With { _Di2015NewLine    .Id = Convert.ToInt32(dr("ID")), _Di2015NewLine    .MakeName = Convert.ToString(dr("CHASSIS_NO")), _Di2015NewLine    .Model = Convert.ToString(dr("MODEL")), _Di2015NewLine    .Color = Convert.ToString(dr("color")), _Di2015NewLine})Di2015NewLine
19766032Di2015UniqueSeparatorKey
19766032Di2015UniqueSeparatorEquals
19766032Di2015UniqueSeparatorGetHashCode
19766036Di2015UniqueSeparator@model ViewModelDi2015NewLineDi2015NewLine<script src="@Url.Content("~/Scripts/knockout.mapping-latest.js")" type="text/javascript"></script>Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine<script type="text/javascript">Di2015NewLine    function ViewModel(initData) {Di2015NewLine        var self = this;Di2015NewLine        ko.mapping.fromJS(initData, {}, self);Di2015NewLineDi2015NewLine        // Add custom view model logicDi2015NewLine        ...Di2015NewLineDi2015NewLine        // Logic for persisting the current state of the model back to the serverDi2015NewLine        self.Save = function() {                Di2015NewLine            $.ajax('/model-uri', {Di2015NewLine              type: 'POST',Di2015NewLine              contentType: "application/json",Di2015NewLine              data: ko.toJSON(self)                  Di2015NewLine         });Di2015NewLine    };Di2015NewLineDi2015NewLine    var initialData = @(Html.Raw(JsonConvert.SerializeObject(Model)));Di2015NewLine    var model = new ViewModel(initialData);Di2015NewLine    ko.applyBindings(model);Di2015NewLine</script>Di2015NewLine
19766036Di2015UniqueSeparatorko.mapping
19766036Di2015UniqueSeparatorko.toJSON
19766054Di2015UniqueSeparator[AccessDeniedAuthorize(Roles="Admin")] Di2015NewLine
19766190Di2015UniqueSeparator12A
19766190Di2015UniqueSeparatorarr
19766190Di2015UniqueSeparator2
19766190Di2015UniqueSeparatorarr[0]=0001Di2015NewLinearr[1]=0010Di2015NewLinearr[2]=1010Di2015NewLine
19766191Di2015UniqueSeparatoras
19766191Di2015UniqueSeparatoras
19766191Di2015UniqueSeparatornull
19766191Di2015UniqueSeparatornull
19766252Di2015UniqueSeparatorgoto
19766252Di2015UniqueSeparatorgoto
19766284Di2015UniqueSeparator(Dispose()
19766284Di2015UniqueSeparatorDispose()
19766284Di2015UniqueSeparatorusing
19766284Di2015UniqueSeparatorFont f = new Font("Calibri", 10.0f);Di2015NewLinetextbox1.Font = f;Di2015NewLinetextbox2.Font = f;Di2015NewLinelabel1.Font = f;Di2015NewLinebutton1.Font = f;Di2015NewLine
19766284Di2015UniqueSeparatorFont
19766284Di2015UniqueSeparatortextbox1.Font = new Font("Calibri", 10.0f);Di2015NewLinetextbox2.Font = new Font("Calibri", 10.0f);Di2015NewLinelabel1.Font = new Font("Calibri", 10.0f);Di2015NewLinebutton1.Font = new Font("Calibri", 10.0f);Di2015NewLine
19766284Di2015UniqueSeparatorDispose()
19766284Di2015UniqueSeparatorIDisposable
19766284Di2015UniqueSeparatorvar font = font;Di2015NewLinetextbox1.Font = font;Di2015NewLinefont.Dispose();Di2015NewLine
19766284Di2015UniqueSeparatortextbox1
19766284Di2015UniqueSeparatorObjectDisposedException
19766284Di2015UniqueSeparatorDispose()
19766284Di2015UniqueSeparatortextbox1
19766284Di2015UniqueSeparatorusing (var font = new Font("Calibri", 10.0f))Di2015NewLine{Di2015NewLine    e.Graphics.DrawText(Text, font, Brushes.Black, ClientRectangle);Di2015NewLine}Di2015NewLine
19766284Di2015UniqueSeparatorfont
19766284Di2015UniqueSeparatorusing
19766451Di2015UniqueSeparatorYes
19766451Di2015UniqueSeparatore.Cancel = true
19766451Di2015UniqueSeparatorNO
19766451Di2015UniqueSeparator    if (txtFormula.Text != string.Empty || txtFormulName.Text != string.Empty){Di2015NewLine        if (XtraMessageBox.Show("Are you sure that you want to close the screen without saving your work?", Di2015NewLine                                "Warning?", Di2015NewLine                                MessageBoxButtons.YesNo, Di2015NewLine                                MessageBoxIcon.Question) != DialogResult.Yes) {Di2015NewLine            e.Cancel = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19766451Di2015UniqueSeparatorCloseReason
19766451Di2015UniqueSeparatore.CloseReason
19766457Di2015UniqueSeparatorClick
19766457Di2015UniqueSeparatorSleep
19766457Di2015UniqueSeparatorDispatcher.Invoke
19766457Di2015UniqueSeparatorbutton.Enabled
19766457Di2015UniqueSeparatorSystem.Threading
19766457Di2015UniqueSeparatorThread.Start
19766472Di2015UniqueSeparatorLast-Modified
19766472Di2015UniqueSeparatorExpires
19766472Di2015UniqueSeparatorCache-Control: must-revalidate
19766497Di2015UniqueSeparatorDataContextProperty.OverrideMetadata(typeof(DataGrid), ...)
19766497Di2015UniqueSeparatorFrameworkElement.DataContext
19766497Di2015UniqueSeparatorclass MyDataGrid : DataGridDi2015NewLine{Di2015NewLine    static MyDataGrid()Di2015NewLine    {Di2015NewLine        DataGrid.DataContextProperty.OverrideMetadata(typeof(MyDataGrid),Di2015NewLine            new FrameworkPropertyMetadata(null, Di2015NewLine                FrameworkPropertyMetadataOptions.Inherits,Di2015NewLine                new PropertyChangedCallback(OnDataContextChanged)));Di2015NewLine    }Di2015NewLine}Di2015NewLine
19766597Di2015UniqueSeparator@{Di2015NewLine    this.ViewContext.HttpContext.Items["Stuff"] = "some-data";Di2015NewLine}Di2015NewLine
19766597Di2015UniqueSeparator@{ var result = Html.Partial("_PartialView"); }Di2015NewLineDi2015NewLine<div id="@this.ViewContext.HttpContext.Items["Stuff"]">Di2015NewLine    @resultDi2015NewLine<div>Di2015NewLine
19766597Di2015UniqueSeparator<div id="@someDataFromPartialSomehow">Di2015NewLine    @Html.Partial("_PartialView")Di2015NewLine</div>Di2015NewLine
19766597Di2015UniqueSeparatorsomeDataFromPartialSomehow
19766614Di2015UniqueSeparatorforeach (var item in Model.LstBagels)Di2015NewLine            {Di2015NewLine @using (Html.BeginForm('ActionName', 'ContollerName', FormMethod.Post) {Di2015NewLine                    @Html.Hidden("txtId", item.BagelId)Di2015NewLine                    <div id="bagel">                     Di2015NewLine                        <div id="bagel-info">                  Di2015NewLine                            <div id="bagel-image">Di2015NewLine                                <img src="@Url.Content(String.Format("~/Resources/Images/{0}.jpg", item.Image))" alt="" />Di2015NewLine                            </div> Di2015NewLineDi2015NewLine                            @if (@BestelBagels.Resources.Views.Index.IndexStrings.Name == "Name")Di2015NewLine                            {Di2015NewLine                                <h2>@Html.DisplayFor(m => item.Name)<br /></h2>Di2015NewLine                            }Di2015NewLine                            elseDi2015NewLine                            {Di2015NewLine                                <h2>@Html.DisplayFor(m => item.NameFr)<br /></h2>Di2015NewLine                            }Di2015NewLine<input class="button widthorder" type="submit" name="BtnOrder" value="@BestelBagels.Resources.Views.Index.IndexStrings.Bestellen"/>Di2015NewLine                        </div> Di2015NewLine
19766614Di2015UniqueSeparator<input class="button widthorder" type="button" name="BtnOrder" onClick="window.location='@Url.Action("ActionName","ControllerName"   , new { txtId= item.BagelId })'" value="@BestelBagels.Resources.Views.Index.IndexStrings.Bestellen"/>Di2015NewLine
19766641Di2015UniqueSeparatorcalcSim
19766641Di2015UniqueSeparatorTask.WhenAll()
19766641Di2015UniqueSeparatorcalcSim
19766641Di2015UniqueSeparatorWaitAll
19766641Di2015UniqueSeparatorWhenAll
19766641Di2015UniqueSeparatorawait Task.WhenAll(t);Di2015NewLine
19766641Di2015UniqueSeparatorawait
19766641Di2015UniqueSeparatorRunAsync3
19766693Di2015UniqueSeparator private void radTreeListView_SelectionChanging(object sender, Telerik.Windows.Controls.SelectionChangingEventArgs e)Di2015NewLine    {Di2015NewLine        if (radTreeListView.SelectedItems.Count >= 5 && e.AddedItems.Count>0)Di2015NewLine            e.Cancel = true;Di2015NewLine    }Di2015NewLine
19766760Di2015UniqueSeparator<%@ Page ... MasterPageFile="~/PathToThePage/YourMasterPage.master" ... %>Di2015NewLine
19766760Di2015UniqueSeparator<asp:Content ID="Content1" ContentPlaceHolderID="ContentHeader" runat="Server">Di2015NewLine    some parts of child pageDi2015NewLine</asp:Content>Di2015NewLine
19766760Di2015UniqueSeparator<asp:ContentPlaceHolder ID="ContentHeader" runat="server">Di2015NewLine    Some part which will be replaced with child pageDi2015NewLine</asp:ContentPlaceHolder>Di2015NewLine
19766921Di2015UniqueSeparatorHolidayEntitlement
19766921Di2015UniqueSeparatorUserLogic
19766921Di2015UniqueSeparatorUserLogic
19766921Di2015UniqueSeparatorIUserRepository
19766921Di2015UniqueSeparatorUserLogic
19766921Di2015UniqueSeparatorHolidayEntitlement
19766921Di2015UniqueSeparatorIUserRepository.GetSingleById
19766921Di2015UniqueSeparatorUserLogic
19766921Di2015UniqueSeparatorIUserRepository
19766921Di2015UniqueSeparatorGetSingleById
19766921Di2015UniqueSeparatorIUserRepository
19766921Di2015UniqueSeparatorUserRepository
19766921Di2015UniqueSeparatorUserRepository
19766921Di2015UniqueSeparatorIUserRepository
19766921Di2015UniqueSeparatorUserRepository
19766924Di2015UniqueSeparatorID  CompanyName  EmployeesDi2015NewLine--  -----------  ---------Di2015NewLine 1  GordCo               3Di2015NewLine 2  SampleCo             7Di2015NewLine 3  BigCo            10000Di2015NewLine
19766924Di2015UniqueSeparatorSELECT Di2015NewLine    Companies.*, Di2015NewLine    Switch([Employees] Between 1 And 4, "1-4", [Employees] Between 5 And 9, "5-9", True, "10 or more") AS EmployeeBandDi2015NewLineFROM Companies;Di2015NewLine
19766924Di2015UniqueSeparatorID  CompanyName  Employees  EmployeeBandDi2015NewLine--  -----------  ---------  ------------Di2015NewLine 1  GordCo               3  1-4         Di2015NewLine 2  SampleCo             7  5-9         Di2015NewLine 3  BigCo            10000  10 or more  Di2015NewLine
19766924Di2015UniqueSeparatorMicrosoft.ACE.OLEDB.12.0
19766924Di2015UniqueSeparatorSwitch()
19767224Di2015UniqueSeparator           click: function() {Di2015NewLineDi2015NewLine                window.X = this.x;Di2015NewLine                window.Y = this.y;Di2015NewLineDi2015NewLine                hs.htmlExpand(null, {Di2015NewLine                    pageOrigin: {Di2015NewLine                        x: this.pageX,Di2015NewLine                        y: this.pageYDi2015NewLine                    },Di2015NewLine                    headingText: this.series.name,Di2015NewLine                    maincontentText: Di2015NewLine                            'Value1:' + this.x +Di2015NewLine                            ' Value2:' + this.y,Di2015NewLine                    width: 300Di2015NewLine                });Di2015NewLine            }Di2015NewLine
19767250Di2015UniqueSeparator   <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>Di2015NewLine
19767285Di2015UniqueSeparatorMonth result;Di2015NewLineif(System.Enum.TryParse(value, true, out result)) {Di2015NewLine    // is definedDi2015NewLine}Di2015NewLine
19767285Di2015UniqueSeparatortrue
19767285Di2015UniqueSeparatorTryParse<Month>(...)
19767285Di2015UniqueSeparator<Month>
19767285Di2015UniqueSeparatorout result
19767285Di2015UniqueSeparatorresult
19767285Di2015UniqueSeparatorMonth
19767477Di2015UniqueSeparator<system.diagnostics>Di2015NewLine<trace autoflush="true" >Di2015NewLine  <listeners>Di2015NewLine    <add name="myListener"Di2015NewLine       type="System.Diagnostics.TextWriterTraceListener"Di2015NewLine       initializeData="D:\\log\\MyProjectTraces.svclog" />Di2015NewLine    <remove name="Default"/>Di2015NewLine  </listeners>Di2015NewLine</trace>Di2015NewLine</system.diagnostics>Di2015NewLine
19767477Di2015UniqueSeparatorcatch (Exception ex)Di2015NewLine{Di2015NewLine    ctx.StatusCode = System.Net.HttpStatusCode.InternalServerError;Di2015NewLine    ctx.SuppressEntityBody = true;Di2015NewLine    System.Diagnostics.Trace.WriteLine(ex.Message, "GetAllUsers"); // log exceptionDi2015NewLine}Di2015NewLine
19767506Di2015UniqueSeparatorT
19767506Di2015UniqueSeparatorout
19767506Di2015UniqueSeparatorinterface IMyInterface { Di2015NewLine}Di2015NewLineDi2015NewLine// note that this one is an interface nowDi2015NewLineinterface IMyClass<out T> where T : IMyInterface { Di2015NewLine}Di2015NewLineDi2015NewLineclass MyInterfaceImplementation : IMyInterface { Di2015NewLine}Di2015NewLineDi2015NewLineclass MySecondClass : IMyClass<MyInterfaceImplementation> { Di2015NewLine}Di2015NewLineDi2015NewLineclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine        IMyClass<IMyInterface> x = new MySecondClass();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19767509Di2015UniqueSeparatorClipToBounds
19767509Di2015UniqueSeparatortrue
19767509Di2015UniqueSeparator<Canvas ClipToBounds="True" ...>Di2015NewLine    ...Di2015NewLine</Canvas>Di2015NewLine
19767537Di2015UniqueSeparatorDllImport
19767537Di2015UniqueSeparatorlong
19767537Di2015UniqueSeparatoruint
19767537Di2015UniqueSeparatorulong
19767537Di2015UniqueSeparator[DllImport("C:/my.dll", CallingConvention = CallingConvention.Cdecl)]Di2015NewLinepublic static extern uint OpenPort(Di2015NewLine    uint ulPort, Di2015NewLine    uint ulBaudRate,Di2015NewLine    uint ulByteSize, Di2015NewLine    uint ulParity, Di2015NewLine    uint ulStopBits, Di2015NewLine    uint ulFlowControlDi2015NewLine);Di2015NewLine
19767537Di2015UniqueSeparatorunsigned long
19767586Di2015UniqueSeparatorUPDATE <table name>Di2015NewLineSET <list of column expressions>Di2015NewLineWHERE <condition>Di2015NewLine
19767586Di2015UniqueSeparatorUPDATE
19767586Di2015UniqueSeparatorcmd.CommandText = "UPDATE [Movimento Ferramentas] SET " + // <<== Changed the orderDi2015NewLine            "Codigo = @codigo, " +                        // <<== Removed (Di2015NewLine            "[Data saida] = @data, " +Di2015NewLine            "[Entidade] = @entidade, " +Di2015NewLine            "[Data Ent] = null, " +Di2015NewLine            "[GT EntT NÂº] = null," +Di2015NewLine            "Estado = 'CalibraÃ§Ã£o', " +Di2015NewLine            "[GT Saida NÂº] = null, " +Di2015NewLine            "[ObservaÃ§Ãµes1] = @observacao," +Di2015NewLine            "Requesitante = null," +Di2015NewLine            "Certificado = @certificado, " +Di2015NewLine            "Resultado = @resultado, " +Di2015NewLine            "Seleccionar = @selecionar," +Di2015NewLine            "[Tipo de IntervenÃ§Ã£o] = null " +             // <<== Removed )Di2015NewLine            "WHERE Certificado = @certificadoAnterior";Di2015NewLine
19767627Di2015UniqueSeparatorCount(*)
19767627Di2015UniqueSeparatorif ((int)sqlCommand.ExecuteScalar() > 0)Di2015NewLine{Di2015NewLine    strMsg = "NB" + strStaffNumber + " already exists.";Di2015NewLine    String Script = "<Script language=\\"javascript\\">alert('" + strMsg + " ') </script>";Di2015NewLine    if (!Page.ClientScript.IsClientScriptBlockRegistered("OpenAlert"))Di2015NewLine        Page.ClientScript.RegisterClientScriptBlock(this.GetType(), "OpenAlert", Script);Di2015NewLine    return;Di2015NewLine}Di2015NewLine
19767753Di2015UniqueSeparator[DataMember]Di2015NewLinepublic List<MyObject> myObjectPropDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return Global.myObject;Di2015NewLine    }Di2015NewLineDi2015NewLine    setDi2015NewLine    {Di2015NewLine        Global.myObject = value;Di2015NewLine    }   Di2015NewLine}Di2015NewLine
19767753Di2015UniqueSeparatormyObject
19767753Di2015UniqueSeparatorstatic
19767829Di2015UniqueSeparatorif(!IspostBack)Di2015NewLine this.LoadListBox(); //your fill methodDi2015NewLine
19767947Di2015UniqueSeparatortry{Di2015NewLine    int input = int.Parse(InputBox.Text);Di2015NewLine    //add any addition logic you need hereDi2015NewLine}Di2015NewLinecatch{Di2015NewLine    Result.Text="Not a number";Di2015NewLine}Di2015NewLine
19767952Di2015UniqueSeparatorvoid step (float a[]) Di2015NewLine
19767952Di2015UniqueSeparatorvoid step (float* a)Di2015NewLine
19767952Di2015UniqueSeparatorstep(&x[2]);Di2015NewLine
19767952Di2015UniqueSeparatorfloat f = a[0];Di2015NewLine
19767952Di2015UniqueSeparatora[27]
19768107Di2015UniqueSeparator  <appSettings>Di2015NewLine    <add key="amazonSecurityNamespace"  value="http://security.amazonaws.com/doc/2007-01-01/" />Di2015NewLine    <add key="accessKeyId"  value="**{put your Id here}**" />Di2015NewLine    <add key="secretKey"  value="**{put your key here}**" />Di2015NewLine  </appSettings>Di2015NewLine  <system.serviceModel>Di2015NewLine    <extensions>Di2015NewLine      <behaviorExtensions>Di2015NewLine        <add name="signingBehavior" type="Amazon.PAAPI.WCF.AmazonSigningBehaviorExtensionElement, Amazon.PAAPI.WCF, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>Di2015NewLine      </behaviorExtensions>Di2015NewLine    </extensions>Di2015NewLine    <behaviors>Di2015NewLine      <endpointBehaviors>Di2015NewLine        <behavior name="amazonEndpointBehavior">Di2015NewLine          <signingBehavior accessKeyId="**{put your Id here}**" secretKey="**{put your key here}**" />Di2015NewLine        </behavior>Di2015NewLine      </endpointBehaviors>Di2015NewLine    </behaviors>Di2015NewLine....Di2015NewLine
19768223Di2015UniqueSeparatorStringEnumConverter
19768223Di2015UniqueSeparatorEnumMember
19768223Di2015UniqueSeparatorenum
19768223Di2015UniqueSeparator[JsonConverter(typeof(StringEnumConverter))]Di2015NewLinepublic enum Animals Di2015NewLine{Di2015NewLine    [EnumMember(Value = "dog")]Di2015NewLine    Dog, Di2015NewLine    [EnumMember(Value = "cat")]Di2015NewLine    Cat, Di2015NewLine    [EnumMember(Value = "black_bear")]Di2015NewLine    BlackBear Di2015NewLine}Di2015NewLine
19768223Di2015UniqueSeparatorAnimals
19768223Di2015UniqueSeparatorAnimal
19768329Di2015UniqueSeparatorUpdatePanel
19768329Di2015UniqueSeparatorOnClick
19768329Di2015UniqueSeparatorrunat="server"
19768329Di2015UniqueSeparatorclass
19768329Di2015UniqueSeparatorLinkButton
19768329Di2015UniqueSeparator<asp:LinkButton ID="ErrorTextLinkButton" runat="server" Text='View Errors' Di2015NewLine                class="error" /> Di2015NewLineDi2015NewLine$(document).ready(function() {Di2015NewLine    $('.error').click(function() {Di2015NewLine        $.ajax({Di2015NewLine            type: "POST",Di2015NewLine            url: "PageName.aspx/GetError",Di2015NewLine            data: "{'id':'7'}",Di2015NewLine            contentType: "application/json; charset=utf-8",Di2015NewLine            dataType: "json",Di2015NewLine            success: function(data) {Di2015NewLine                // Do something error data returned hereDi2015NewLine            }Di2015NewLine        });Di2015NewLine    });Di2015NewLine});Di2015NewLine
19768329Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static string GetError(int id)Di2015NewLine{Di2015NewLine    // Go and get error data from database or service, etc.Di2015NewLine    return "Your error message here";Di2015NewLine}Di2015NewLine
19768330Di2015UniqueSeparatorRowCommand
19768330Di2015UniqueSeparatorOnRowCommand
19768330Di2015UniqueSeparatorEventName="OnRowCommand"Di2015NewLine
19768330Di2015UniqueSeparatorEventName="RowCommand"Di2015NewLine
19768458Di2015UniqueSeparatorTax = dr["TAX"] == DBNull.Value ? 0 : (int)dr["TAX"]Di2015NewLine
19768458Di2015UniqueSeparatornull
19768458Di2015UniqueSeparatorint
19768458Di2015UniqueSeparator0
19768458Di2015UniqueSeparatorresult.Add(new CompanyDetails() { Di2015NewLine    Name = dr["name"].ToString(), Di2015NewLine    City = dr["city"].ToString(), Di2015NewLine    StreetName = dr["streetName"].ToString(), Di2015NewLine    StreetNr = dr["apartmentNr"] == DBNull.Value ? 0 : (int)dr["apartmentNr"]Di2015NewLine    Tax = dr["TAX"] == DBNull.Value ? 0 : (int)dr["TAX"]Di2015NewLine    )});Di2015NewLine
19768458Di2015UniqueSeparatorStreetNr
19768458Di2015UniqueSeparatorTax
19768458Di2015UniqueSeparatorint?
19768458Di2015UniqueSeparatornull
19768458Di2015UniqueSeparator0
19768458Di2015UniqueSeparatorresult.Add(new CompanyDetails() { Di2015NewLine    Name = dr["name"].ToString(), Di2015NewLine    City = dr["city"].ToString(), Di2015NewLine    StreetName = dr["streetName"].ToString(), Di2015NewLine    StreetNr = dr["apartmentNr"] == DBNull.Value ? (int?)null : (int)dr["apartmentNr"]Di2015NewLine    Tax = dr["TAX"] == DBNull.Value ? (int?)null : (int)dr["TAX"]Di2015NewLine    )});Di2015NewLine
19768563Di2015UniqueSeparatorcontentType: "application/json"
19768563Di2015UniqueSeparatorJSON.stringify
19768563Di2015UniqueSeparatorvar lines = new Array();Di2015NewLinelines.push("ABC");Di2015NewLinelines.push("DEF");Di2015NewLinelines.push("GHI");Di2015NewLine$.ajax(Di2015NewLine{Di2015NewLine    url: 'MyController/MyAction/',Di2015NewLine    type: 'POST',Di2015NewLine    data: JSON.stringify({ 'lines': lines }),Di2015NewLine    dataType: 'json',Di2015NewLine    contentType: 'application/json',Di2015NewLine    async: false,Di2015NewLine    success: function (data) {Di2015NewLine        console.log(data);Di2015NewLine    }Di2015NewLine});Di2015NewLine
19768563Di2015UniqueSeparatorpublic JsonResult MyAction(string[] lines)Di2015NewLine{Di2015NewLine    Console.WriteLine(lines); // Display nothingDi2015NewLine    return Json(new { data = 0 });Di2015NewLine}Di2015NewLine
19768563Di2015UniqueSeparatorpublic class MyModel {Di2015NewLine    string[] lines;Di2015NewLine}Di2015NewLine
19768563Di2015UniqueSeparatorpublic JsonResult MyAction(MyModel request)Di2015NewLine{Di2015NewLine    Console.WriteLine(string.Join(", ", request.lines)); // Display nothingDi2015NewLine    return Json(new { data = 0 });Di2015NewLine}Di2015NewLine
19768641Di2015UniqueSeparatorvar result = new Regex(@"\\d+").Matches(s)Di2015NewLine                              .Cast<Match>()Di2015NewLine                              .Select(m => Int32.Parse(m.Value))Di2015NewLine                              .ToArray();Di2015NewLine
19768669Di2015UniqueSeparatorpublic delegate void Draw(byte[] data);Di2015NewLineDi2015NewLineprivate void myPort_DataReceived(object sender, SerialDataReceivedEventArgs e)Di2015NewLine{Di2015NewLine    this.Invoke(new Draw(DrawingAudioData), data);Di2015NewLine}Di2015NewLine
19768669Di2015UniqueSeparatorpublic void DrawingAudioData(byte[] data) {Di2015NewLine
19768677Di2015UniqueSeparatorvar isExtern = (mEnter.MethodImplementationFlagsDi2015NewLine                    & MethodImplAttributes.InternalCall) != 0;Di2015NewLine
19768762Di2015UniqueSeparatorDataTable dt = getListTubas.GetTubaDatabase(null);Di2015NewLine
19769089Di2015UniqueSeparatorSystem.Net.Mail
19769089Di2015UniqueSeparatorEmailComposeTask
19769250Di2015UniqueSeparatorProgram
19769250Di2015UniqueSeparatormob1
19769250Di2015UniqueSeparatorplayer
19769250Di2015UniqueSeparatorhp
19769250Di2015UniqueSeparatorpublic class Player{}
19769250Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    Player mob1 = new Player(); // mob1 and player are now of type PlayerDi2015NewLine    Player player = new Player();Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Next();Di2015NewLine    }Di2015NewLineDi2015NewLine    static public void Next()Di2015NewLine    {Di2015NewLine        mob1.Hp = 50;Di2015NewLine        player.Hp = 100;Di2015NewLine        Console.WriteLine("Player's HP: " + player.Hp);Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PlayerDi2015NewLine{Di2015NewLine    public int Hp {get; set;}Di2015NewLine}Di2015NewLine
19769341Di2015UniqueSeparatorExtender
19769341Di2015UniqueSeparatorDependencyObject
19769341Di2015UniqueSeparatorpublic static readonly DependencyProperty AttachedTextProperty = Di2015NewLine    DependencyProperty.RegisterAttached(Di2015NewLine        "AttachedText",Di2015NewLine        typeof(string),Di2015NewLine        typeof(Extender), // hereDi2015NewLine        new PropertyMetadata(string.Empty));Di2015NewLine
19769415Di2015UniqueSeparatorpublic class EscapeMnemonicsStringConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        string str = value as string;Di2015NewLine        return str != null ? str.Replace("_", "__") : value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19769438Di2015UniqueSeparatoron (word.SearchID + 100000000) equals searchEntry.EventIdDi2015NewLine
19769438Di2015UniqueSeparatoron word.SearchIdUnique equals searchEntry.EventIdDi2015NewLine
19769544Di2015UniqueSeparatornamespace ActivityLibrary2.ActivitiesDi2015NewLine{Di2015NewLine   public class Test{}Di2015NewLine}Di2015NewLine
19769547Di2015UniqueSeparatorHtmlGenericControl
19769547Di2015UniqueSeparator<li>
19769547Di2015UniqueSeparatorHtmlGenericControl
19769547Di2015UniqueSeparatorClass
19769547Di2015UniqueSeparatorCssClass
19769547Di2015UniqueSeparatorAttributes
19769547Di2015UniqueSeparatorvar li = (HtmlGenericControl) Page.FindControl("li" + i);Di2015NewLineli.Attributes["class"] = "myCssClass";Di2015NewLine
19769547Di2015UniqueSeparatorPage.FindControl("li" + i)
19769547Di2015UniqueSeparator<li>
19769547Di2015UniqueSeparator<li runat="server" id="li1">...</li>Di2015NewLine
19769547Di2015UniqueSeparator<li>
19769690Di2015UniqueSeparator public Test()Di2015NewLine    {Di2015NewLine        this.InitializeComponent();Di2015NewLine        BackgroundWorker backgroundWorker = new BackgroundWorkerDi2015NewLine            {Di2015NewLine                 WorkerReportsProgress = true,Di2015NewLine                WorkerSupportsCancellation = trueDi2015NewLine            };Di2015NewLine        backgroundWorker.DoWork += BackgroundWorkerOnDoWork;Di2015NewLine        backgroundWorker.ProgressChanged += BackgroundWorkerOnProgressChanged;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void BackgroundWorkerOnProgressChanged(object sender, ProgressChangedEventArgs e)Di2015NewLine    {Di2015NewLine        object userObject = e.UserState;Di2015NewLine        int percentage = e.ProgressPercentage;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void BackgroundWorkerOnDoWork(object sender, DoWorkEventArgs e)Di2015NewLine    {Di2015NewLine        BackgroundWorker worker = (BackgroundWorker) sender;Di2015NewLine        while (!worker.CancellationPending)Di2015NewLine        {Di2015NewLine            //Do your stuff hereDi2015NewLine            worker.ReportProgress(0, "AN OBJECT TO PASS TO THE UI-THREAD");Di2015NewLine        }        Di2015NewLine    }Di2015NewLine
19769842Di2015UniqueSeparatorEventWaitHandle
19769842Di2015UniqueSeparatorAutoReset
19769842Di2015UniqueSeparatorManualReset
19769842Di2015UniqueSeparatorprotected override void OnStop()Di2015NewLine{Di2015NewLine   this.RequestAdditionalTime(10000);Di2015NewLine   IvrApplication.StopImmediate();Di2015NewLine}Di2015NewLine
19770036Di2015UniqueSeparatorreturn View(unitofwork.DomainRepository.Filter(n => n.Name.Contains(searchFullName), n => (String.IsNullOrEmpty(searchExtension) || n.Extension == searchExtension), n => (String.IsNullOrEmpty(searchProject) || n.Project == searchProject)));Di2015NewLine
19770221Di2015UniqueSeparator <DataTemplate DataType="{x:Type viewModels:POptionValueViewModel}">Di2015NewLine    ......Di2015NewLine </DataTemplate>Di2015NewLine
19770221Di2015UniqueSeparator  <ComboBox  Di2015NewLine      SelectedValue="{Binding SelectedValue, Mode=TwoWay}">Di2015NewLine        ...Di2015NewLine  </ComboBox>Di2015NewLine
19770335Di2015UniqueSeparatorHtmlDocument doc = new HtmlDocument();Di2015NewLinedoc.Load("index.html");Di2015NewLinevar spans = doc.DocumentNode.SelectNodes("//span[contains(., '(x)')]");Di2015NewLineforeach (var span in spans)Di2015NewLine{Di2015NewLine    HtmlNode parent = span.ParentNode;Di2015NewLine    while (parent != null)Di2015NewLine    {Di2015NewLine        if (parent.Name == "div")Di2015NewLine        {Di2015NewLine            parent.Remove();Di2015NewLine            break;Di2015NewLine        }Di2015NewLineDi2015NewLine        parent = parent.ParentNode;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19770335Di2015UniqueSeparatorspan
19770335Di2015UniqueSeparator(x)
19770335Di2015UniqueSeparatordiv
19770335Di2015UniqueSeparatorspan
19770434Di2015UniqueSeparatorAny
19770434Di2015UniqueSeparatorAny
19770463Di2015UniqueSeparatorSELECT        Id, HolidayDateDi2015NewLineFROM            dbo.HolidayDi2015NewLineWHERE         year(holidaydate) = 2013 and month(HolidayDate) = 11Di2015NewLine
19770509Di2015UniqueSeparatorA
19770509Di2015UniqueSeparatorB
19770509Di2015UniqueSeparatorA
19770509Di2015UniqueSeparatorB
19770509Di2015UniqueSeparatorB
19770509Di2015UniqueSeparatorThread
19770509Di2015UniqueSeparatorTask
19770565Di2015UniqueSeparatorprotected void tv_WLG_TreeNodeCheckChanged(object sender, TreeNodeEventArgs e) Di2015NewLine{Di2015NewLine    if (e.Node.Checked) Di2015NewLine    {Di2015NewLine        var stack = new Stack<TreeNode>();Di2015NewLine        stack.Push(e.Node);Di2015NewLine        while (stack.Count > 0) Di2015NewLine        {Di2015NewLine            var node = stack.Pop();Di2015NewLine            node.Checked = true;Di2015NewLine            foreach (TreeNode childNode in node.ChildNodes) Di2015NewLine            {Di2015NewLine                stack.Push(childNode);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19770667Di2015UniqueSeparator from x in context.TableNameDi2015NewLine group x by EntityFunctions.TruncateTime(x.date) into gDi2015NewLine select new {Di2015NewLine     date = g.Key,Di2015NewLine     DistinctCountUser = g.Select(x => x.user).Distinct().Count()Di2015NewLine }Di2015NewLine
19770769Di2015UniqueSeparatorpublic static string GetString(Animal animal)Di2015NewLine{Di2015NewLine    var result = "";Di2015NewLine    var serialized = JsonConvert.SerializeObject(animal);Di2015NewLine    var dict = JsonConvert.DeserializeObject<IDictionary<string, string>>(serialized);Di2015NewLine    foreach (var pair in dict)Di2015NewLine    {Di2015NewLine        if (!string.IsNullOrEmpty(result))Di2015NewLine            result += "&";Di2015NewLine        result += string.Format("{0}={1}", pair.Key, HttpUtility.UrlEncode(pair.Value.ToString()));Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19770769Di2015UniqueSeparatorid=123abc&types=black_rhino&created=%2fDate(1394841600)%2fDi2015NewLine
19770806Di2015UniqueSeparatorlist => list.Select(record => record.MeterName)
19770806Di2015UniqueSeparatorOrderBy
19770806Di2015UniqueSeparatorIEnumerable<string>
19770806Di2015UniqueSeparatorIComparable
19770806Di2015UniqueSeparatorvar orderedMap = outputMapDi2015NewLine    .ToDictionary(Di2015NewLine        x => x.KeyDi2015NewLine    ,   x => x.ValueDi2015NewLine           .OrderBy(element => element.MeterName)Di2015NewLine           .ThenBy(element => element.ChannelName)Di2015NewLine           .ToList()Di2015NewLine    );Di2015NewLine
19770886Di2015UniqueSeparatorif (DropDownListCurrency.Items.FindByValue(row.Cells[8].Text.ToString().Trim()) != null)Di2015NewLine{Di2015NewLine    DropDownListCurrency.SelectedValue = row.Cells[8].Text.ToString().Trim();Di2015NewLine}Di2015NewLine
19770886Di2015UniqueSeparatorTrim()
19770886Di2015UniqueSeparatorprotected void GridView1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    try Di2015NewLine    {Di2015NewLine        GridViewRow row = GridView1.SelectedRow; Di2015NewLineDi2015NewLine        AccountNumber.Text = (string)row.Cells[0].Text;Di2015NewLine         ....Di2015NewLineDi2015NewLine        if (DropDownListCurrency.Items.FindByValue(row.Cells[8].Text.ToString().Trim()) != null)Di2015NewLine        {Di2015NewLine            DropDownListCurrency.SelectedValue = row.Cells[8].Text.ToString().Trim();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0} Exception caught.", ex);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19770939Di2015UniqueSeparatorProgress
19770939Di2015UniqueSeparatorProgress
19770939Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs args)Di2015NewLine{Di2015NewLine    Progress<int> progress = new Progress<int>();Di2015NewLine    progress.ProgressChanged += (p, value) => progressbar1.Value = value;Di2015NewLine    Task.Run(() => SomeOtherClass.DoWork("c:/temp.txt", progress));Di2015NewLine}Di2015NewLine
19770939Di2015UniqueSeparatorProgress
19770939Di2015UniqueSeparatorProgressChanged
19770939Di2015UniqueSeparatorpublic class SomeOtherClassDi2015NewLine{Di2015NewLine    public static void DoWork(string filepath, IProgress<int> progress)Di2015NewLine    {Di2015NewLine        int currentProgress = 0;Di2015NewLine        foreach (var line in File.ReadLines(filepath))Di2015NewLine        {Di2015NewLine            DoSomethingWithLine();Di2015NewLine            currentProgress++;Di2015NewLine            progress.Report(currentProgress);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19770939Di2015UniqueSeparatorSomeOtherClass
19770939Di2015UniqueSeparatorIProgress
19770939Di2015UniqueSeparatorDoWork
19770949Di2015UniqueSeparatorInclude
19770949Di2015UniqueSeparatorList<DevelopmentType> devTypes = Di2015NewLine           defaults.Include(x => x.DefaultCharges)Di2015NewLine                   .Include(x => x.OverrideCharges)Di2015NewLine                   .Select(x => new {Di2015NewLine                        DevType = x.DevelopmentType,Di2015NewLine                        Zones = x.OverrideCharges.Where(oc => oc.ChargingSchedule_RowId == cs.RowId)Di2015NewLine                                                 .Select(oc => oc.Zone).ToList()Di2015NewLine                   })Di2015NewLine                   .Select(x => x.DevType)Di2015NewLine                   .ToList();Di2015NewLine
19770969Di2015UniqueSeparatorcmboBoxPreviousVersion.SelectedItemDi2015NewLine
19770969Di2015UniqueSeparatorcmboBoxPreviousVersion.SelectedIndexDi2015NewLine
19771053Di2015UniqueSeparatorvar xdoc = XDocument.Load(path_to_xml);Di2015NewLinevar names = xdoc.XPathSelectElements("//*[@str_label='Customer']")Di2015NewLine                .Select(e => e.Name);Di2015NewLine
19771053Di2015UniqueSeparatorstring attrName = "str_type";Di2015NewLinestring attrValue = "text";Di2015NewLinevar names = xdoc.Descendants()Di2015NewLine                .Where(e => (string)e.Attribute(attributeName) == attrValue)Di2015NewLine                .Select(e => e.Name);Di2015NewLine
19771053Di2015UniqueSeparatorvar result = String.Join(",", names);Di2015NewLine
19771126Di2015UniqueSeparatorvar uri = new Uri("http://www.example.com/mypage.aspx?myvalue1=hello&myvalue2=goodbye");Di2015NewLinestring path = uri.GetLeftPart(UriPartial.Path);Di2015NewLinereturn Redirect(path);Di2015NewLine
19771137Di2015UniqueSeparatorclass Calculator : ISumCalculator, IProductCalculatorDi2015NewLine{Di2015NewLineDi2015NewLine    int IProductCalculator.Calc(int x, int y)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    int ISumCalculator.Calc(int x, int y)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19771805Di2015UniqueSeparator            return solveSudoku(row++, 0);Di2015NewLine
19771805Di2015UniqueSeparatorrow
19771805Di2015UniqueSeparatorsolveSudoku
19771805Di2015UniqueSeparatorrow
19771805Di2015UniqueSeparatorrow + 1
19771923Di2015UniqueSeparatorstring
19771923Di2015UniqueSeparatorpublic static class CompileExpressionsDi2015NewLine{Di2015NewLine    public static IQueryable<T> SearchTextFieldsOr<T>(this IQueryable<T> source,Di2015NewLine        ICollection<string> wordsFromSearch, params Func<T, string>[] stringSelectors)Di2015NewLine    {Di2015NewLine        Expression<Func<T, bool>> compiledExpression = t => false;Di2015NewLineDi2015NewLine        foreach (var filter in stringSelectors)Di2015NewLine        {Di2015NewLine            compiledExpression = compiledExpression.Or(t => wordsFromSearch.Contains(filter(t)));Di2015NewLine        }Di2015NewLineDi2015NewLine        var compiled = compiledExpression.Compile();Di2015NewLineDi2015NewLine        return source.Where(t => compiled(t));Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IQueryable<T> SearchTextFieldsAnd<T>(this IQueryable<T> source,Di2015NewLine        ICollection<string> wordsFromSearch, params Func<T, string>[] stringSelectors)Di2015NewLine    {Di2015NewLine        foreach (var filter in stringSelectors)Di2015NewLine        {Di2015NewLine            source = source.Where(t => wordsFromSearch.Contains(filter(t)));Di2015NewLine        }Di2015NewLineDi2015NewLine        return source;Di2015NewLine    }Di2015NewLineDi2015NewLine    //Taken from http://www.albahari.com/nutshell/predicatebuilder.aspxDi2015NewLine    public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> expr1,Di2015NewLine                                                Expression<Func<T, bool>> expr2)Di2015NewLine    {Di2015NewLine        var invokedExpr = Expression.Invoke(expr2, expr1.Parameters.Cast<Expression>());Di2015NewLine        return Expression.Lambda<Func<T, bool>>Di2015NewLine              (Expression.OrElse(expr1.Body, invokedExpr), expr1.Parameters);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19771923Di2015UniqueSeparatorpublic class EntityDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Type { get; set; }Di2015NewLine    public string Model { get; set; }Di2015NewLine    public string Colour { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var source = new[]{Di2015NewLine            new Entity { Colour = "Red", Model = "New", Name="Super", Type="Filter"},Di2015NewLine            new Entity { Colour = "Green", Model = "New", Name="Super", Type="Filter"},Di2015NewLine            new Entity { Colour = "Green", Model = "New", Name="Super", Type="Filter"},Di2015NewLine            new Entity { Colour = "Green", Model = "New", Name="Super", Type="Filter"},Di2015NewLine            new Entity { Colour = "Green", Model = "New", Name="Super", Type="Filter"},Di2015NewLine            new Entity { Colour = "Green", Model = "New", Name="Super", Type="Amazing"},Di2015NewLine        };Di2015NewLineDi2015NewLine        var filters = new[] {"Red", "Amazing" };Di2015NewLineDi2015NewLine        var filteredOr = sourceDi2015NewLine               .AsQueryable()Di2015NewLine               .SearchTextFieldsOr(filters, t => t.Colour, t => t.Type)Di2015NewLine               .ToList();Di2015NewLineDi2015NewLine        //2 records found because we're filtering on "Colour" OR "Type"Di2015NewLineDi2015NewLine        var filteredAnd = sourceDi2015NewLine               .AsQueryable()Di2015NewLine               .SearchTextFieldsAnd(filters, t => t.Colour, t => t.Type)Di2015NewLine               .ToList();Di2015NewLineDi2015NewLine         //1 record found because we're filtering on "Colour" AND "Type"Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
19771923Di2015UniqueSeparatorstring
19771923Di2015UniqueSeparatorparams Func<T, string>[]
19771923Di2015UniqueSeparatorstring
19772095Di2015UniqueSeparatorC:\\Windows\\System32
19772095Di2015UniqueSeparatorfoo, Version=1.2.3.4, Culture=en, PublicKeyToken=03689116d3a4ae33
19772228Di2015UniqueSeparatorSystem.IO.File.Copy(oldPathAndName, newPathAndName);Di2015NewLine
19772293Di2015UniqueSeparatorFoo[]
19772293Di2015UniqueSeparatorint[]
19772293Di2015UniqueSeparatorCast<>
19772293Di2015UniqueSeparatorif (source is IEnumerable<T>)Di2015NewLine{Di2015NewLine    return source;Di2015NewLine}Di2015NewLine
19772293Di2015UniqueSeparatora.Cast<int>
19772293Di2015UniqueSeparatora
19772293Di2015UniqueSeparatorFoo[]
19772293Di2015UniqueSeparatorPrintGeneric
19772293Di2015UniqueSeparatorT
19772293Di2015UniqueSeparatorforeach
19772293Di2015UniqueSeparatorIEnumerator<T>.Current
19772293Di2015UniqueSeparatorT
19772293Di2015UniqueSeparatorT
19772293Di2015UniqueSeparatorint
19772293Di2015UniqueSeparatorFoo
19772293Di2015UniqueSeparatorIEnumerable
19772293Di2015UniqueSeparatorCurrent
19772293Di2015UniqueSeparatorIEnumerator
19772293Di2015UniqueSeparatorobject
19772293Di2015UniqueSeparatorConsole.WriteLine(object)
19772293Di2015UniqueSeparatorFoo
19772293Di2015UniqueSeparatorint
19772293Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLineenum Foo { }Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Foo[] x = new Foo[10];Di2015NewLine        // False because the C# compiler is cocky, and "optimizes" it outDi2015NewLine        Console.WriteLine(x is int[]);Di2015NewLineDi2015NewLine        // True because when we put a blindfold in front of the compiler,Di2015NewLine        // the evaluation is left to the CLRDi2015NewLine        Console.WriteLine(((object) x) is int[]);Di2015NewLineDi2015NewLine        // Foo[] and True because Cast returns the same reference backDi2015NewLine        Console.WriteLine(x.Cast<int>().GetType());Di2015NewLine        Console.WriteLine(ReferenceEquals(x, x.Cast<int>()));Di2015NewLine    }Di2015NewLine}Di2015NewLine
19772293Di2015UniqueSeparatoruint[]
19772293Di2015UniqueSeparatorint[]
19772383Di2015UniqueSeparatorMediaOpened
19772383Di2015UniqueSeparatorPlay
19772383Di2015UniqueSeparatorAutoPlay
19772383Di2015UniqueSeparatortrue
19772417Di2015UniqueSeparatorprivate System.IO.Stream Upload(string url, string param1, Stream fileStream, byte[] fileBytes)Di2015NewLine{Di2015NewLine    HttpContent stringContent = new StringContent(param1);Di2015NewLine    HttpContent fileStreamContent = new StreamContent(fileStream);Di2015NewLine    HttpContent bytesContent = new ByteArrayContent(fileBytes);Di2015NewLineDi2015NewLine    using (HttpClient client = new HttpClient())Di2015NewLine    {Di2015NewLine        using (MultipartFormDataContent formData = new MultipartFormDataContent())Di2015NewLine        {Di2015NewLine            formData.Add(stringContent, "param1", "param1");Di2015NewLine            formData.Add(fileStreamContent, "file1", "file1");Di2015NewLine            formData.Add(bytesContent, "file2", "file2");Di2015NewLineDi2015NewLine            using (MD5 md5Hash = MD5.Create())Di2015NewLine            {Di2015NewLine                formData.Headers.ContentMD5 = md5Hash.ComputeHash(formData.ReadAsByteArrayAsync().Result);Di2015NewLine            }Di2015NewLineDi2015NewLine            var response = client.PostAsync(url, formData).Result;Di2015NewLine            if (!response.IsSuccessStatusCode)Di2015NewLine            {Di2015NewLine                return null;Di2015NewLine            }Di2015NewLineDi2015NewLine            return response.Content.ReadAsStreamAsync().Result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19772432Di2015UniqueSeparator@RenderSection("javascript", required: false)Di2015NewLine
19772432Di2015UniqueSeparatorrequired
19772490Di2015UniqueSeparatorOutOfMemoryException
19772497Di2015UniqueSeparatorpublic class CustomerController : ApiControllerDi2015NewLine{Di2015NewLine    [HttpGet]Di2015NewLine    [GET("api/customer/{id}/files")]Di2015NewLine    public HttpResponseMessage Get(int id)Di2015NewLine    {Di2015NewLine    //codeDi2015NewLine    }Di2015NewLineDi2015NewLine    [HttpGet]Di2015NewLine    [GET("api/customer/{id}/files/{fileId}")]Di2015NewLine    public HttpResponseMessage Get(int id, int fileId)Di2015NewLine    {Di2015NewLine    //codeDi2015NewLine    }Di2015NewLine}Di2015NewLine
19772562Di2015UniqueSeparatortextBox2.AppendText(text);Di2015NewLine
19772562Di2015UniqueSeparatortextBox2.AppendText = text;Di2015NewLine
19772562Di2015UniqueSeparatorAppendText
19772654Di2015UniqueSeparatorException in thread "main" java.lang.SecurityException: sealing violation: can't seal package org.splore.so.access: already loadedDi2015NewLineat java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:395)Di2015NewLineat java.net.URLClassLoader.defineClass(URLClassLoader.java:417)Di2015NewLineat java.net.URLClassLoader.access$100(URLClassLoader.java:71)Di2015NewLineat java.net.URLClassLoader$1.run(URLClassLoader.java:361)Di2015NewLineat java.net.URLClassLoader$1.run(URLClassLoader.java:355)Di2015NewLineat java.security.AccessController.doPrivileged(Native Method)Di2015NewLineat java.net.URLClassLoader.findClass(URLClassLoader.java:354)Di2015NewLineat java.lang.ClassLoader.loadClass(ClassLoader.java:424)Di2015NewLineat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)Di2015NewLineat java.lang.ClassLoader.loadClass(ClassLoader.java:357)Di2015NewLineat org.splore.so.access.AccessTestFromOtherPackage.main(AccessTestFromOtherPackage.java:5)Di2015NewLine
19772683Di2015UniqueSeparatorCommandBehavior.CloseConnection
19772683Di2015UniqueSeparatorusing
19772683Di2015UniqueSeparatorreturn connection.Query<T>(cmdText, args).ToList();Di2015NewLine
19772755Di2015UniqueSeparatorvar query1 = Di2015NewLine    from s in context.ArchiveDi2015NewLine    group s by s.Salesman into gDi2015NewLine    orderby g.Sum(o => o.Price) descendingDi2015NewLine    select newDi2015NewLine    {Di2015NewLine        Salesman_ID = g.Key.ID,Di2015NewLine        Salesman_First_name = g.Key.First_name,Di2015NewLine        Salesman_Surname = g.Key.Surname,Di2015NewLine        Sale = g.Sum(o => o.Price),Di2015NewLine    };Di2015NewLine
19772755Di2015UniqueSeparatorvar query1 = Di2015NewLine    from s in context.ArchiveDi2015NewLine    where s.Sold_date >= minDate && s.Sold_date <= maxDateDi2015NewLine    group s by s.Salesman into gDi2015NewLine    orderby g.Sum(o => o.Price) descendingDi2015NewLine    select newDi2015NewLine    {Di2015NewLine        Salesman_ID = g.Key.ID,Di2015NewLine        Salesman_First_name = g.Key.First_name,Di2015NewLine        Salesman_Surname = g.Key.Surname,Di2015NewLine        Sale = g.Sum(o => o.Price),Di2015NewLine    };Di2015NewLine
19772793Di2015UniqueSeparator...Di2015NewLineProcessStartInfo startinfo = new ProcessStartInfo(psExec, psArguments);Di2015NewLinestartinfo.UseShellExecute = false;Di2015NewLinestartinfo.CreateNoWindow = true;Di2015NewLinestartinfo.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLinestartinfo.RedirectStandardOutput = true;Di2015NewLinestartinfo.RedirectStandardError = true;Di2015NewLinestartinfo.RedirectStandardInput = true;                                      Di2015NewLinep = Process.Start(startinfo);Di2015NewLine...Di2015NewLine
19772804Di2015UniqueSeparatorwebBrowser.InvokeScript("eval", new string[] { "document.getElementById('crmContentPanel').ownerDocument.frames[0].Xrm.Page.data.entity.save()" });Di2015NewLine
19772980Di2015UniqueSeparatorvar groupedList = (from ol in objectListDi2015NewLineDi2015NewLine                    group ol by ol.NameDi2015NewLine                        into grpDi2015NewLine                        select new fooDi2015NewLine                        {Di2015NewLine                            Name = grp.Key,Di2015NewLine                            Total= grp.Sum(ex => ex.Total),Di2015NewLine                            City = grp.Select(ex => ex.City).FirstOrDefault(),Di2015NewLine                            Country = grp.Select(ex => ex.Country ).FirstOrDefault(),Di2015NewLine                            Phone = grp.Select(ex => ex.Phone).FirstOrDefault()Di2015NewLine                        }Di2015NewLine    ).ToList();Di2015NewLine
19773017Di2015UniqueSeparator[DefaultValue(false)]Di2015NewLinepublic new bool AllowUserToAddRows {Di2015NewLine  get { return base.AllowUserToAddRows; }Di2015NewLine  set { base.AllowUserToAddRows = value; }Di2015NewLine}Di2015NewLine
19773038Di2015UniqueSeparator(FormattedID = abc123)Di2015NewLine
19773060Di2015UniqueSeparatorResponseCode
19773060Di2015UniqueSeparatorRespCode
19773060Di2015UniqueSeparatorName
19773060Di2015UniqueSeparatorDataMember
19773060Di2015UniqueSeparatord
19773060Di2015UniqueSeparatorResponseClassContainer
19773060Di2015UniqueSeparatorDataContract
19773060Di2015UniqueSeparatord
19773060Di2015UniqueSeparatorprivate string deserializeJSON(string resp, bool code = false)Di2015NewLine{Di2015NewLine    string value = string.Empty;Di2015NewLine    ResponseClass deserialized = null;Di2015NewLine    using (MemoryStream stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(resp)))Di2015NewLine    {Di2015NewLine        stream.Position = 0;Di2015NewLine        var ser = new DataContractJsonSerializer(typeof(ResponseClassContainer));Di2015NewLine        deserialized = (ser.ReadObject(stream) as ResponseClassContainer).d;Di2015NewLine    }Di2015NewLine    value = code ? deserialized.Response : deserialized.ResponseCode.ToString();Di2015NewLine    return value;Di2015NewLine}Di2015NewLine[DataContract]Di2015NewLinepublic class ResponseClassContainerDi2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public ResponseClass d { get; set; }Di2015NewLine}Di2015NewLine[DataContract]Di2015NewLinepublic class ResponseClassDi2015NewLine{Di2015NewLine    [DataMember(Name="RespCode")]Di2015NewLine    public int ResponseCodeDi2015NewLine    { get; set;}Di2015NewLine    [DataMember(Name="RespMess")]Di2015NewLine    public string ResponseMessageDi2015NewLine    { get; set;}Di2015NewLine    [DataMember(Name="Resp")]Di2015NewLine    public string ResponseDi2015NewLine    { get; set;}Di2015NewLine}Di2015NewLine
19773060Di2015UniqueSeparator0
19773060Di2015UniqueSeparatornull
19773090Di2015UniqueSeparatorpublic HttpResponseMessage Post(IEnumerable<MyModel> models)Di2015NewLine{Di2015NewLine    return DoSomething(models);Di2015NewLine}Di2015NewLineDi2015NewLinepublic HttpResponseMessage Post(MyModel model)Di2015NewLine{Di2015NewLine    return DoSomething(new List<MyModel> { model });Di2015NewLine}Di2015NewLineDi2015NewLineprivate HttpResponseMessage DoSomething(IEnumerable<MyModel> models)Di2015NewLine{Di2015NewLine    // Do somethingDi2015NewLine}Di2015NewLine
19773124Di2015UniqueSeparatorAppendResultSuggestion
19773124Di2015UniqueSeparatorIRandomAccessStreamReference
19773124Di2015UniqueSeparatorpublic void AppendResultSuggestion(Di2015NewLine    string text, string detailText, string tag, Di2015NewLine    IRandomAccessStreamReference image, Di2015NewLine    string imageAlternateText)Di2015NewLine
19773124Di2015UniqueSeparatorStorageFile
19773124Di2015UniqueSeparatorCreateFromFile
19773124Di2015UniqueSeparatorRandomAccessStreamReference.CreateFromFile(IStorageFile file)Di2015NewLine
19773124Di2015UniqueSeparatorCreateFromUri
19773124Di2015UniqueSeparatorRandomAccessStreamReference.CreateFromUri(Uri uri)Di2015NewLine
19773124Di2015UniqueSeparatorvar imageUri = new Uri("ms-appx:///test.png");Di2015NewLinevar imageRef = RandomAccessStreamReference.CreateFromUri(imageUri);Di2015NewLineargs.Request.SearchSuggestionCollection.AppendResultSuggestion("foo", "Details", "foo", imageRef, "Result")Di2015NewLine
19773200Di2015UniqueSeparatorvoid timer_Tick(object sender, EventArgs e) {Di2015NewLine  progressBar1.PerformStep();      Di2015NewLine}Di2015NewLineDi2015NewLinevoid button1_MouseDown(object sender, MouseEventArgs e) {Di2015NewLine  timer.Start();Di2015NewLine}Di2015NewLineDi2015NewLinevoid button1_MouseUp(object sender, MouseEventArgs e) {Di2015NewLine  timer.Stop();Di2015NewLine}Di2015NewLine
19773210Di2015UniqueSeparatorEntryCategoriesDi2015NewLine       .Join(TimeReportEntries, ec => ec.Id, tr => tr.WorkItem.Id, (ec, tr) => new { ec, tr })Di2015NewLine       .Join(Timesheets, ecs => ecs.tr.Timesheet.Id, t => t.Id, (ecs, t) => new { ecs, t })Di2015NewLine       .Join(Users, ts => ts.t.User.Id, u => u.Id, (ts, u) => newDi2015NewLine        {Di2015NewLine            WorkItemId = ts.ecs.tr.WorkItem.IdDi2015NewLine            Employee = ts.t.User.FirstName + " " + ts.t.User.LastName,Di2015NewLine            Hours = ts.ecs.tr.HoursDi2015NewLine        })Di2015NewLine       .GroupBy(x => x.WorkItemId)Di2015NewLine       .Select(x => new Di2015NewLine        { Di2015NewLine            WorkItemId = x.Key, Di2015NewLine            Hours = x.Sum(y => y.Hours)Di2015NewLine        });Di2015NewLine
19773593Di2015UniqueSeparatorDirectory.GetDirectories
19773593Di2015UniqueSeparatorDirectory.EnumerateDirectories
19774025Di2015UniqueSeparator.ExecuteSqlCommand
19774025Di2015UniqueSeparatorDbContext.TableName.ExecuteSqlCommand
19774025Di2015UniqueSeparator    db.Database.ExecuteSqlCommand("usp_DeleteExample @ExampleID, @LoggedInUserID, @SessionID, @AppID ", Di2015NewLine        new SqlParameter("LoggedInUserID", variableName), new SqlParameter("SessionID", variableName),new SqlParameter("AppID ", variableName));     Di2015NewLine
19774025Di2015UniqueSeparatorSaveChanges()
19774119Di2015UniqueSeparatorType.GetGenericArguments
19774119Di2015UniqueSeparatorSystem.Type
19774119Di2015UniqueSeparatorFunc<T,bool?>
19774119Di2015UniqueSeparatorDictionary<Type, Delegate>
19774252Di2015UniqueSeparator<script src="/Scripts/jquery-1.7.1.min.js" type="text/javascript"></script>Di2015NewLine<script src="/Scripts/jquery.unobtrusive-ajax.js" type="text/javascript"></script>Di2015NewLine<script src="/Scripts/MicrosoftAjax.js" type="text/javascript"></script>Di2015NewLine<script src="/Scripts/MicrosoftMvcAjax.js" type="text/javascript"></script>Di2015NewLine
19774266Di2015UniqueSeparatorvar totals = from e in <element list>Di2015NewLine             group e by e.<property> into gDi2015NewLine             select new {Di2015NewLine                Property = g.Key,Di2015NewLine                Count = g.Count()Di2015NewLine             }Di2015NewLine
19774266Di2015UniqueSeparatorg
19774266Di2015UniqueSeparatorIGrouping<out TKey, out TElement>
19774266Di2015UniqueSeparatorIEnumerable<T>
19774266Di2015UniqueSeparatorIEnumerable<T>
19774269Di2015UniqueSeparatorSplit
19774269Di2015UniqueSeparator line.Split(new []{' '}, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine
19774269Di2015UniqueSeparatorStringSplitOptins
19774269Di2015UniqueSeparatorString.Split Method (Char[], StringSplitOptions)
19774269Di2015UniqueSeparatorvar Input = File.ReadAllLines(FilePath)Di2015NewLine                .Select(line => line.Split(new []{' '}, StringSplitOptions.RemoveEmptyEntries))Di2015NewLine                .ToArray();Di2015NewLine
19774323Di2015UniqueSeparatorHoursSince2013 = Convert.ToDateTime(stringArray[(i * 5) + 4], CultureInfo.InvariantCulture)Di2015NewLine
19774325Di2015UniqueSeparatorInclude
19774325Di2015UniqueSeparatorInclude
19774325Di2015UniqueSeparatorjoin c in Contacts ... where c.Name == "..."
19774325Di2015UniqueSeparatorUsers
19774325Di2015UniqueSeparatorSELECT
19774325Di2015UniqueSeparatorInclude
19774325Di2015UniqueSeparatorSELECT
19774325Di2015UniqueSeparatorInclude
19774325Di2015UniqueSeparatorInclude
19774325Di2015UniqueSeparatorInclude
19774342Di2015UniqueSeparatorpublic IQueryable<T> Query<T>() where T : class, ITenantDataDi2015NewLine{Di2015NewLine    return _mentorContext.Set<T>().AsNoTracking();Di2015NewLine}Di2015NewLine
19774342Di2015UniqueSeparatorpublic static MentorContextExtensionsDi2015NewLine{Di2015NewLine    public static InterestEntity ByAptitudeId(Di2015NewLine        this IQueryable<InterestEntity> queryable, Di2015NewLine        int aptitudeId)Di2015NewLine    {Di2015NewLine        return queryable.SingleOrDefault(x => x.AptitudeId == aptitudeId);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19774342Di2015UniqueSeparatorIQueryable<T>
19774342Di2015UniqueSeparatordb.Query<InterestEntity>().ByAptitudeId(interest.AptitudeId);Di2015NewLine
19774342Di2015UniqueSeparatorSingleOrDefault
19774342Di2015UniqueSeparatorIQueryables
19774342Di2015UniqueSeparatorIEnumerables
19774342Di2015UniqueSeparator.Where
19774342Di2015UniqueSeparatorbool
19774342Di2015UniqueSeparator.Any
19774342Di2015UniqueSeparator.Find
19774342Di2015UniqueSeparatorIDbSet
19774342Di2015UniqueSeparatorpublic T Find<T>(params object[] keyComponents) where T : class, ITenantDataDi2015NewLine{Di2015NewLine    return _mentorContext.Set<T>().Find(keyComponents);Di2015NewLine}Di2015NewLine
19774342Di2015UniqueSeparatorvar aptitude = db.Find<Aptitude>(interest.AptitudeId);Di2015NewLine
19774342Di2015UniqueSeparator.Find
19774342Di2015UniqueSeparator.Find
19774342Di2015UniqueSeparator.AsNoTracking()
19774342Di2015UniqueSeparator.AsNoTracking
19774342Di2015UniqueSeparator.Find
19774465Di2015UniqueSeparator@
19774465Di2015UniqueSeparatorstring CmdString = @"insert into Team_table (name1, name2, result1, result2) Di2015NewLine                (select t1.name,t2.name,NULL,NULL from teams t2 cross join teams t1)";Di2015NewLine
19774465Di2015UniqueSeparator;
19774465Di2015UniqueSeparator"insert into Team_table (name1, name2, result1, result2) \\r\\n                 (select t1.name,t2.name,NULL,NULL from teams t2 cross join teams t1)"
19774465Di2015UniqueSeparatorstring CmdString = Di2015NewLine    "insert into Team_table (name1, name2, result1, result2) " + Di2015NewLine    "(select t1.name,t2.name,NULL,NULL from teams t2 cross join teams t1)";Di2015NewLine
19774500Di2015UniqueSeparatorclass
19774500Di2015UniqueSeparatorinterface
19774500Di2015UniqueSeparatorgdcSVN.DataSource = _presenter.GetAllFiles().Cast<object>().ToList();Di2015NewLine
19774500Di2015UniqueSeparatorDataSource
19774500Di2015UniqueSeparatorIVersionedFile
19774500Di2015UniqueSeparatorVersionedFile
19774500Di2015UniqueSeparatorIVersionedFile
19774525Di2015UniqueSeparator<MvxRadioGroupDi2015NewLine android:layout_width="fill_parent"Di2015NewLine android:layout_height="wrap_content"Di2015NewLine android:textSize="40dp"Di2015NewLine local:MvxItemTemplate="@layout/item_radio"Di2015NewLine local:MvxBind="ItemsSource Items;SelectedItem SelectedItem"Di2015NewLine />Di2015NewLine
19774593Di2015UniqueSeparatorVirtualKey.CapitalLock
19774593Di2015UniqueSeparatorCoreWindow
19774685Di2015UniqueSeparatorweb.config
19774685Di2015UniqueSeparator<system.web.webPages.razor>Di2015NewLine  <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />Di2015NewLine  <pages pageBaseType="System.Web.Mvc.WebViewPage">Di2015NewLine    <namespaces>Di2015NewLine      <add namespace="System.Web.Mvc" />Di2015NewLine      <add namespace="System.Web.Mvc.Ajax" />Di2015NewLine      <add namespace="System.Web.Mvc.Html" />Di2015NewLine      <add namespace="System.Web.Optimization"/>Di2015NewLine      <add namespace="System.Web.Routing" />Di2015NewLine    </namespaces>Di2015NewLine  </pages>Di2015NewLine</system.web.webPages.razor>Di2015NewLine
19774714Di2015UniqueSeparator\\n
19774714Di2015UniqueSeparatorjsobj["total_count"]
19774714Di2015UniqueSeparatorjsobj["items"][0]
19774714Di2015UniqueSeparatorpublic class SomeResultDi2015NewLine{Di2015NewLine    public int total_count { get; set; }Di2015NewLine    public List<SomeItem> items { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SomeItemDi2015NewLine{Di2015NewLine    public int total_count { get; set; }Di2015NewLine    public DateTime created_at { get; set; }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19774714Di2015UniqueSeparatorSomeResult result = serializer.Deserialize<SomeResult>(response.Content);
19774714Di2015UniqueSeparatorDateTime?
19774788Di2015UniqueSeparatorpublic static IEnumerable<T> EmptyIfNull<T>(this IEnumerable<T> source)Di2015NewLine{Di2015NewLine    return source ?? Enumerable.Empty<T>();Di2015NewLine}Di2015NewLine
19774788Di2015UniqueSeparatorforeach (var vrNodes in vrChildNode.SelectNodes("//href").EmptyIfNull())Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
19774833Di2015UniqueSeparatorPath
19774833Di2015UniqueSeparatorJToken
19774833Di2015UniqueSeparator5.0.8.16617
19774893Di2015UniqueSeparatorif
19774893Di2015UniqueSeparatorpublic static byte[] GetCBuffer(this byte[] data, int len)Di2015NewLine{Di2015NewLine    byte[] tmp = Enumerable.Repeat((byte)204, len).ToArray();Di2015NewLine    for(int i = 0; i < data.Length; i++)Di2015NewLine    {Di2015NewLine      tmp[i] = data[i];Di2015NewLine    }Di2015NewLineDi2015NewLine    return ret;Di2015NewLine}Di2015NewLine
19775143Di2015UniqueSeparatorif
19775143Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        int User;Di2015NewLine        int Array;Di2015NewLine        bool isUserWrong = true;  //This is a flag that we will use to control the flow of the loopDi2015NewLine        StreamWriter outfile = new StreamWriter("C://log.txt");Di2015NewLineDi2015NewLine        while(isUserWrong)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Input an number between 1 and 100");Di2015NewLine            User = Convert.ToInt32(Console.ReadLine());Di2015NewLine            if (User < 101 && User > 0)Di2015NewLine            {Di2015NewLine                for (Array = 1; Array <= User; Array++)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(Array + ", " + Array * 10 * Array);Di2015NewLine                    outfile.WriteLine(Array + ", " + Array * 10 * Array);Di2015NewLine                }Di2015NewLine                isUserWrong = false; // We signal that we may now leave the loopDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Console.WriteLine("Sorry you input an invalid number. ");Di2015NewLine                Console.ReadLine();Di2015NewLine                //Note that here we keep the value of the flag 'true' so the loop continuesDi2015NewLine            }Di2015NewLine        }Di2015NewLine        Console.WriteLine("Press Enter To Exit The Console");Di2015NewLine        outfile.Close();Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19775155Di2015UniqueSeparatorBasicHttpBinding
19775155Di2015UniqueSeparatorSLsvcUtil.exe /directory:C:\\users\\me\\Desktop http://URL.svcDi2015NewLine
19775155Di2015UniqueSeparatorvar binding = new BasicHttpBinding() {Di2015NewLine    Name = "BindingName",Di2015NewLine    MaxBufferSize = 2147483647,Di2015NewLine    MaxReceivedMessageSize = 2147483647Di2015NewLine};Di2015NewLineDi2015NewLinevar endpoint = new EndpointAddress("URL.svc");Di2015NewLineDi2015NewLineMyInterfaceClient client = new MyInterfaceClient(binding, endpoint);Di2015NewLineDi2015NewLineclient.WSFunctionCompleted += (object sender, WSFunctionCompletedEventArgs e) => {Di2015NewLine    //access e.Result hereDi2015NewLine};Di2015NewLineDi2015NewLineclient.WSFunctionAsync("XXXXXX");Di2015NewLine
19775162Di2015UniqueSeparatorTerm
19775162Di2015UniqueSeparatorMiles
19775162Di2015UniqueSeparatorvar sorted = RatesDi2015NewLine               .OrderBy(r=> r.Term)Di2015NewLine               .ThenBy(r=> r.Miles)Di2015NewLine               .ToArray();Di2015NewLine
19775214Di2015UniqueSeparatorif(Membership.ValidateUser(username,password))Di2015NewLine{Di2015NewLine     FormsAuthentication.SetAuthCookie(username,true); Di2015NewLine} //do it in login pageDi2015NewLine
19775284Di2015UniqueSeparator<img>
19775284Di2015UniqueSeparator<div>
19775284Di2015UniqueSeparator<span>
19775284Di2015UniqueSeparatorbackground-image: url(...)
19775284Di2015UniqueSeparatorbackground: url(...)
19775284Di2015UniqueSeparatorList<string> imageUrls = new List<string>();Di2015NewLineHtmlDocument document = new HtmlDocument();Di2015NewLinedocument.Load("url");Di2015NewLineforeach(HtmlNode image in document.DocumentElement.SelectNodes("//img[@src"])Di2015NewLine{Di2015NewLine    HtmlAttribute url = image["src"];Di2015NewLine    imageUrls.Add(url.Value);Di2015NewLine}Di2015NewLine//imageUrls now has all the image URLsDi2015NewLine
19775374Di2015UniqueSeparatorTenant
19775374Di2015UniqueSeparatorSeed
19775374Di2015UniqueSeparatorTenant
19775374Di2015UniqueSeparatorName
19775374Di2015UniqueSeparator"Www"
19775374Di2015UniqueSeparatorTenant
19775374Di2015UniqueSeparatorTenant.Www
19775374Di2015UniqueSeparatorcontext.Tenants.FirstOrDefault(s => s.Name == "Www") != Tenant.WwwDi2015NewLine
19775374Di2015UniqueSeparatorobj != Tenant.Www
19775374Di2015UniqueSeparatorAdd
19775374Di2015UniqueSeparatorAttach
19775374Di2015UniqueSeparatorTenant
19775374Di2015UniqueSeparatorName == "Www"
19775455Di2015UniqueSeparatorSSH_FXP_EXTENDED
19775455Di2015UniqueSeparatorspace-available
19775455Di2015UniqueSeparatorstatvfs@openssh.com
19775455Di2015UniqueSeparatorSftpClient.GetStatus
19775554Di2015UniqueSeparatorAutoResetEvent
19775554Di2015UniqueSeparatorprivate static Random random = new Random();Di2015NewLineprivate static ArrayList buffer = new ArrayList();Di2015NewLinestatic SemaphoreSlim BufferLock = new SemaphoreSlim(1);Di2015NewLinestatic AutoResetEvent ItemAdded = new AutoResetEvent(false);Di2015NewLineDi2015NewLinepublic static void Main (string[] args)Di2015NewLine{Di2015NewLine    BufferLock.Wait();  // initially acquire the semaphore.Di2015NewLine    Thread t1 = new Thread (Add);Di2015NewLine    t1.Start ();Di2015NewLine    Thread t2 = new Thread (Average);Di2015NewLine    t2.Start ();Di2015NewLineDi2015NewLine    // wait for adding thread to finishDi2015NewLine    t1.Wait();Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void Add()Di2015NewLine{Di2015NewLine    int temperature;Di2015NewLine    for (int i=0; i<50; i++)Di2015NewLine    {Di2015NewLine        temperature = random.Next (36, 42);Di2015NewLine        BufferLock.Wait();Di2015NewLine        buffer.Add(temperature);Di2015NewLine        ItemAdded.Set();Di2015NewLine        BufferLock.Release();Di2015NewLine        Console.WriteLine ("Temperature added to buffer: " + temperature);Di2015NewLine        Thread.Sleep (50);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void Average()Di2015NewLine{Di2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        ItemAdded.Wait();  // wait for item to be addedDi2015NewLine        BufferLock.Wait();Di2015NewLine        ComputeAverage();  // however you want to do thisDi2015NewLine        BufferLock.Release();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19775554Di2015UniqueSeparatort2
19775554Di2015UniqueSeparatorArrayList
19775554Di2015UniqueSeparatorArrayList
19775554Di2015UniqueSeparatorAutoResetEvent
19775554Di2015UniqueSeparatorSemaphore
19775661Di2015UniqueSeparatorvar feedUrl = @"http://jobs.huskyenergy.com/RSS";Di2015NewLinetryDi2015NewLine{Di2015NewLine    var webClient = new WebClient();Di2015NewLine    // hide ;-)Di2015NewLine    webClient.Headers.Add ("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)");Di2015NewLine    // fetch feed as stringDi2015NewLine    var content = webClient.OpenRead(feedUrl);Di2015NewLine    var contentReader = new StreamReader(content);Di2015NewLine    var rssFeedAsString = contentReader.ReadToEnd();Di2015NewLine    // convert feed to XML using LINQ to XML and finally create new XmlReader objectDi2015NewLine    var feed = SyndicationFeed.Load(XDocument.Parse(rssFeedAsString).CreateReader());Di2015NewLine    // take the info from the firdst feed entryDi2015NewLine    var firstFeedItem = feed.Items.FirstOrDefault();Di2015NewLine    Console.WriteLine(firstFeedItem.Title.Text);Di2015NewLine    Console.WriteLine(firstFeedItem.Links.FirstOrDefault().Uri.AbsoluteUri);Di2015NewLine}Di2015NewLinecatch (Exception exception)Di2015NewLine{Di2015NewLine    Console.WriteLine(exception.Message);Di2015NewLine}Di2015NewLine
19775661Di2015UniqueSeparatorSummer Student UEO Regulatory & Environment Strategy - (Calgary, AB)Di2015NewLinehttp://jobs.huskyenergy.com/ca/alberta/student/jobid4444904-summer-student-ueo-regulatory--environment-strategy-jobsDi2015NewLine
19775661Di2015UniqueSeparatorvar feedUrl = @"http://jobs.huskyenergy.com/RSS";Di2015NewLinevar feedContent = XDocument.Load(feedUrl);Di2015NewLinefeedContent.Dump();Di2015NewLine//var feed = SyndicationFeed.Load(feedContent.CreateReader());Di2015NewLine//feed.Dump();Di2015NewLine
19775661Di2015UniqueSeparator<!DOCTYPE html []>Di2015NewLine<!--[if IE 7]><html lang="en" prefix="og: http://ogp.me/ns#" class="non-js lt-ie9 lt-ie8"><![endif]-->Di2015NewLine<!--[if IE 8]><html lang="en" prefix="og: http://ogp.me/ns#" class="non-js lt-ie9"><![endif]-->Di2015NewLine<!--[if gt IE 8]><!-->Di2015NewLine<html lang="en" prefix="og: http://ogp.me/ns#" class="non-js">Di2015NewLine  <!--<![endif]-->Di2015NewLine  <head>Di2015NewLine    <meta charset="utf-8" />Di2015NewLine    <meta name="viewport" content="width=device-width" />Di2015NewLine    <title>Di2015NewLine    Service InterruptionDi2015NewLine</title>Di2015NewLine    <link rel="stylesheet" href="http://seostatic.tmp.com/SiteOutage/style.css" />Di2015NewLine  </head>Di2015NewLine  <body>Di2015NewLine    <p id="outageMessage">This system is currently experiencing a service interruption. <br />We apologize for any inconvenience.</p>Di2015NewLine  </body>Di2015NewLine</html>Di2015NewLine
19775676Di2015UniqueSeparatorservice.WaitForStatus(ServiceControllerStatus.Stopped, timeout);Di2015NewLine
19775676Di2015UniqueSeparatortimeout
19775899Di2015UniqueSeparatorprivate void FindTag(Control.ControlCollection controls)Di2015NewLine{Di2015NewLine    foreach (Control c in controls)Di2015NewLine    {Di2015NewLine        if (c.Tag != null)Di2015NewLine        //logicDi2015NewLineDi2015NewLine       if (c.HasChildren)Di2015NewLine           FindTag(c.Controls); //Recursively check all children controls as well; ie groupboxes or tabpagesDi2015NewLine    }Di2015NewLine}Di2015NewLine
19775937Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static void SaveDescriptionAndPrice(string description, decimal price)Di2015NewLine{Di2015NewLine    // Do something here to save valuesDi2015NewLine}Di2015NewLine
19775937Di2015UniqueSeparator.aspx
19775937Di2015UniqueSeparator.ajax()
19775937Di2015UniqueSeparator$(document).ready(function() {Di2015NewLine    $.ajax({Di2015NewLine        type: "POST",Di2015NewLine        url: "singlepage.aspx/SaveDescriptionAndPrice",Di2015NewLine        data: "{'description':'This is a fake description.', 'price':12.99}",Di2015NewLine        contentType: "application/json; charset=utf-8",Di2015NewLine        dataType: "json",Di2015NewLine        success: function(data) {Di2015NewLine            // Do something interesting here.Di2015NewLine        }Di2015NewLine    });Di2015NewLine});Di2015NewLine
19775937Di2015UniqueSeparatorstringify()
19775967Di2015UniqueSeparatorcheck.Visibility = Visibility.Visible;Di2015NewLine
19776009Di2015UniqueSeparatorstring input = "this is a a1234 b5678 test string";Di2015NewLinestring output = "";Di2015NewLinestring[] temp = input.Trim().Split(' ');Di2015NewLinebool previousNum = false;Di2015NewLinestring tempOutput = "";Di2015NewLineforeach (string word in temp)Di2015NewLine{Di2015NewLine    if (word.ToCharArray().Where(x => char.IsDigit(x)).Count() > 0)Di2015NewLine    {Di2015NewLine        previousNum = true;Di2015NewLine        tempOutput = tempOutput + word;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        if (previousNum)Di2015NewLine        {Di2015NewLine            if (tempOutput.Length >= 4) tempOutput = "xxxx" + tempOutput.Substring(tempOutput.Length - 4, 4);Di2015NewLine            output = output + " " + tempOutput;Di2015NewLine            previousNum = false;Di2015NewLine        }Di2015NewLine        output = output + " " + word;Di2015NewLine    }Di2015NewLine}Di2015NewLineif (previousNum)Di2015NewLine{Di2015NewLine    if (tempOutput.Length >= 4) tempOutput = "xxxx" + tempOutput.Substring(tempOutput.Length - 4, 4);Di2015NewLine    output = output + " " + tempOutput;Di2015NewLine    previousNum = false;Di2015NewLine}Di2015NewLine
19776053Di2015UniqueSeparatorrunat="server"Di2015NewLine
19776104Di2015UniqueSeparatorstring connStr = Context.Database.Connection.ConnectionString;Di2015NewLine
19776104Di2015UniqueSeparatorstring dbName = Context.Database.Connection.Database;Di2015NewLine
19776154Di2015UniqueSeparator<>transientClass1
19776154Di2015UniqueSeparatorQuery<T>
19776154Di2015UniqueSeparator<>transientClass1
19776154Di2015UniqueSeparatorQuery< <>transientClass1>
19776154Di2015UniqueSeparatorQuery<T>
19776154Di2015UniqueSeparator<>transientClass1
19776154Di2015UniqueSeparatorQuery<T>
19776233Di2015UniqueSeparator        MyStuffCell cell = tableView.DequeueReusableCell ("MyStuffCell") as MyStuffCell;Di2015NewLine        // if there are no cells to reuse, create a new oneDi2015NewLine        if (cell == null) {Di2015NewLine            cell = MyStuffCell.Create ();Di2015NewLine        }Di2015NewLineDi2015NewLine        MyStuff current = tableItems.ElementAt (indexPath.Row);Di2015NewLine        cell.Update (current);Di2015NewLineDi2015NewLine        return cell;Di2015NewLine
19776277Di2015UniqueSeparator26/10/2013 11:58:03 AM
19776277Di2015UniqueSeparatordd/MM/yyyy
19776277Di2015UniqueSeparatorToday.ToString()
19776277Di2015UniqueSeparatorMM/dd/yyyy
19776277Di2015UniqueSeparatortheDate.ToString(CultureInfo.InvariantCulture)
19776277Di2015UniqueSeparatorConvert.ToDateTime(theString, CultureInfo.InvariantCulture)
19776284Di2015UniqueSeparator<asp:DropDownList ID="statusList" runat="server" SelectedValue='<%# Bind("datafield") %>'>Di2015NewLine
19776284Di2015UniqueSeparator<asp:ControlParameter Name="status" ControlID="DetailsView1$statusDropDownList" PropertyName="SelectedValue" Type="String" />Di2015NewLine
19776383Di2015UniqueSeparatormockContext.Setup(m=> m.Products.First(Moq.It.IsAny<int>())).Returns(the product you want returned);Di2015NewLine
19776391Di2015UniqueSeparatorDictionary<TKey, TValue>
19776419Di2015UniqueSeparatorOnClick
19776419Di2015UniqueSeparatorThreadPool.GetMaxThreads()
19776478Di2015UniqueSeparator6
19776478Di2015UniqueSeparatorprivate int counter = 0;Di2015NewLineprivate void TimerCallback()Di2015NewLine{Di2015NewLine    counter++;Di2015NewLine    if(counter >=6)Di2015NewLine    {Di2015NewLine        //Your 30 seconds code hereDi2015NewLine        counter = 0;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19776610Di2015UniqueSeparator[DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)] Di2015NewLineprivate static extern SafeFileHandle CreateFile(Di2015NewLinestring name, FileAccess access, FileShare share,Di2015NewLineIntPtr security,Di2015NewLineFileMode mode, FileAttributes flags,Di2015NewLineIntPtr template);Di2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        // Opens the ":Zone.Identifier" alternate data stream that blocks the fileDi2015NewLine        using (SafeFileHandle handle = CreateFile(@"\\\\?\\C:\\Temp\\a.txt:Zone.Identifier", FileAccess.ReadWrite, FileShare.None, IntPtr.Zero, FileMode.OpenOrCreate, FileAttributes.Normal, IntPtr.Zero))Di2015NewLine        {Di2015NewLine            // Here add test of CreateFile return codeDi2015NewLine            // Then :Di2015NewLineDi2015NewLine            using (StreamWriter writer = new StreamWriter(new FileStream(handle, FileAccess.ReadWrite), Encoding.ASCII))Di2015NewLine            {Di2015NewLine                writer.WriteLine("[ZoneTransfer]");Di2015NewLine                writer.WriteLine("ZoneId=3");Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19776618Di2015UniqueSeparatorOleDbDataReader reader = myAccessCommand.ExecuteReader();Di2015NewLineDi2015NewLinewhile (reader.Read())Di2015NewLine{Di2015NewLine    //Logic goes here... each iteration is a row returned from the DBDi2015NewLine    int numSemaine = Convert.toInt32(reader["NumeroSemaine"]); //now you have your valueDi2015NewLine}Di2015NewLine
19776618Di2015UniqueSeparatorlaConn.Open();Di2015NewLine
19776682Di2015UniqueSeparator.ToList()
19776682Di2015UniqueSeparatorIEnumerable<T>
19776682Di2015UniqueSeparator.ToList()
19776682Di2015UniqueSeparatorList
19776682Di2015UniqueSeparatorcqs
19776682Di2015UniqueSeparatorIEnumerable<Quality>
19776682Di2015UniqueSeparatorIEnumerable
19776682Di2015UniqueSeparatorpublic IEnumerable<Quality> Get(DateTime param1, DateTime param2, string param3)Di2015NewLine    {     Di2015NewLineDi2015NewLine        var dc = new VideoDataContext(WebApplication.MonitorServer);Di2015NewLineDi2015NewLine        dc.CommandTimeout = 240;Di2015NewLineDi2015NewLine        return dc.Vid_GetQualityForVideo(param1, param2, param3);Di2015NewLine    }Di2015NewLine
19776682Di2015UniqueSeparatorcqs
19776682Di2015UniqueSeparatorIEnumerable
19776682Di2015UniqueSeparatorFilter
19776682Di2015UniqueSeparatorIEnumerable
19776682Di2015UniqueSeparatordc.Vid_GetQualityForVideo(param1, param2, param3)
19776682Di2015UniqueSeparatorToList()
19776699Di2015UniqueSeparatorFileSystemWatcher
19776746Di2015UniqueSeparatorCount
19776746Di2015UniqueSeparatorLength
19776746Di2015UniqueSeparatorusing System.Linq;
19776746Di2015UniqueSeparatorTotalImages
19776746Di2015UniqueSeparatorint TotalImages = fileInfo.Length;Di2015NewLine
19776829Di2015UniqueSeparator    <ProgressBar x:Name="ProgressBar" Di2015NewLine        Value="{Binding Progress}" Di2015NewLine        Maximum="{Binding Maximum}" Di2015NewLine        Minimum="{Binding Minimum}" Di2015NewLine        HorizontalAlignment="Left" Height="37" Margin="10,35,0,0" Di2015NewLine        VerticalAlignment="Top" Width="590"/>Di2015NewLine
19777073Di2015UniqueSeparatorpublic static
19777073Di2015UniqueSeparatorWebMethod
19777073Di2015UniqueSeparatorPage
19777073Di2015UniqueSeparatorPage
19777250Di2015UniqueSeparatorString.Equals
19777250Di2015UniqueSeparatorString.IsNullOrEmpty
19777250Di2015UniqueSeparatorstring.IsNullOrWhiteSpace
19777250Di2015UniqueSeparatortextbox1.Text == ""
19777250Di2015UniqueSeparatortextbox1.Text == string.Empty
19777450Di2015UniqueSeparatorwhere T : INumeric
19777450Di2015UniqueSeparatorBitArray
19777450Di2015UniqueSeparatoruint data_in = 0xdeadbeef;Di2015NewLineushort data_out;Di2015NewLinebyte next_data_out;Di2015NewLine// pay attention to BitConverter.IsLittleEndian here!Di2015NewLine// you might need to write your own conversion methods,Di2015NewLine// or do a Reverse() or find a better libraryDi2015NewLinevar bits = new BitArray(BitConverter.GetBytes(data_in));Di2015NewLineif (bits.TryConvertToUInt16(out data_out, 10))Di2015NewLine{Di2015NewLine    Console.WriteLine(data_out.ToString("X")); // 2EFDi2015NewLine    if (bits.TryConvertToByte(out next_data_out, 6, 10))Di2015NewLine    {Di2015NewLine        Console.WriteLine(next_data_out.ToString("X")); // 2FDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate static bool Validate(BitArray bits, int len, int start, int size)Di2015NewLine{Di2015NewLine    return len < size * 8 && bits.Count > start + len;Di2015NewLine}Di2015NewLinepublic static bool TryConvertToUInt16(this BitArray bits, out ushort output, int len, int start = 0)Di2015NewLine{Di2015NewLine    output = 0;Di2015NewLine    if (!Validate(bits, len, start, sizeof(ushort)))Di2015NewLine        return false;Di2015NewLine    for (int i = start; i < len + start; i++)Di2015NewLine    {Di2015NewLine        output |= (ushort)(bits[i] ? 1 << (i - start) : 0);Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine}Di2015NewLinepublic static bool TryConvertToByte(this BitArray bits, out byte output, int len, int start = 0)Di2015NewLine{Di2015NewLine    output = 0;Di2015NewLine    if (!Validate(bits, len, start, sizeof(byte)))Di2015NewLine        return false;Di2015NewLine    for (int i = start; i < len + start; i++)Di2015NewLine    {Di2015NewLine        output |= (byte)(bits[i] ? 1 << (i - start) : 0);Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
19777487Di2015UniqueSeparatorIKernel
19777487Di2015UniqueSeparatorService Locator
19777487Di2015UniqueSeparatorCompositeControl
19777487Di2015UniqueSeparatorpublic class Global : NinjectHttpApplicationDi2015NewLine{Di2015NewLine    public static IKernel Kernel;Di2015NewLineDi2015NewLine    protected override IKernel CreateKernel()Di2015NewLine    {Di2015NewLine        IKernel kernel = new StandardKernel(new DemoModule());Di2015NewLine        return kernel;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyServerControl : CompositeControlDi2015NewLine{Di2015NewLine    public ICalculate Calculate { get; set; }Di2015NewLineDi2015NewLine    public MyServerControl()Di2015NewLine    {Di2015NewLine        Calculate = Global.Kernel.Get<ICalculate>(); // like service locatorDi2015NewLine    }Di2015NewLine}Di2015NewLine
19777502Di2015UniqueSeparatororderby
19777502Di2015UniqueSeparator from agency in dtAllContacts.AsEnumerable()Di2015NewLine orderby agency.Field<Int32?>("ID") == null ? 0 : agency.Field<Int32>("ID"),Di2015NewLine         agency.Field<Int32>("Level")  Di2015NewLine select agency;Di2015NewLine
19777502Di2015UniqueSeparator orderby agency.Field<int?>("ID").GetValueOrDefault(),Di2015NewLine         agency.Field<int>("Level")Di2015NewLine
19777545Di2015UniqueSeparatorprotected void Application_EndRequest()Di2015NewLine{Di2015NewLine     if (Context.Response.StatusCode == 302 && Context.Request.Headers["X-Requested-With"] == "XMLHttpRequest")Di2015NewLine    {Di2015NewLine        Context.Response.Clear();Di2015NewLine        Context.Response.StatusCode = 401;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19777721Di2015UniqueSeparatorawait
19777721Di2015UniqueSeparatorvar firstTask = getResult1();Di2015NewLinevar secondTask = getResult2();Di2015NewLineawait Task.WhenAll(firstTask, secondTask);Di2015NewLinedoSomething(firstTask.Result, secondTask.Result);Di2015NewLine
19777975Di2015UniqueSeparatorusing Outlook = Microsoft.Office.Interop.Outlook; Di2015NewLineDi2015NewLinepublic void MoveMyEmails()Di2015NewLine    {Di2015NewLine        //set up variablesDi2015NewLine        Outlook.Application oApp = null;Di2015NewLine        Outlook.MAPIFolder oSource = null;Di2015NewLine        Outlook.MAPIFolder oTarget = null;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            //instantiate variablesDi2015NewLine            oApp = new Outlook.Application();Di2015NewLine            oSource = oApp.Session.GetDefaultFolder(Outlook.OlDefaultFolders.olFolderSentMail);Di2015NewLine            oTarget = oApp.Session.Folders["Archive"];Di2015NewLine            //loop through the folders itemsDi2015NewLine            for (int i = oSource.Items.Count; i > 0; i--)Di2015NewLine            {Di2015NewLine                move the itemDi2015NewLine                oSource.Items[i].Move(oTarget);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            //handle exceptionDi2015NewLine        }Di2015NewLine        //release objectsDi2015NewLine        if (oTarget != null)Di2015NewLine        {Di2015NewLine            System.Runtime.InteropServices.Marshal.ReleaseComObject(oTarget);Di2015NewLine            GC.WaitForPendingFinalizers();Di2015NewLine            GC.Collect();Di2015NewLine        }Di2015NewLine        if (oSource != null)Di2015NewLine        {Di2015NewLine            System.Runtime.InteropServices.Marshal.ReleaseComObject(oSource);Di2015NewLine            GC.WaitForPendingFinalizers();Di2015NewLine            GC.Collect();Di2015NewLine        }Di2015NewLine        if (oApp != null)Di2015NewLine        {Di2015NewLine            System.Runtime.InteropServices.Marshal.ReleaseComObject(oApp);Di2015NewLine            GC.WaitForPendingFinalizers();Di2015NewLine            GC.Collect();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
19778216Di2015UniqueSeparatorDataTrigger.EnterActions
19778216Di2015UniqueSeparator<Border BorderBrush="Black" BorderThickness="2" Margin="1" Name="ReviewNote">Di2015NewLine    <Border.Style>Di2015NewLine        <Style TargetType="Border">Di2015NewLine           <Style.Triggers>Di2015NewLine               <DataTrigger Binding="{Binding CanAnimate}" Value="True">Di2015NewLine                   <DataTrigger.EnterActions>Di2015NewLine                       <BeginStoryboard>Di2015NewLine                           <Storyboard>Di2015NewLine                              <DoubleAnimation Di2015NewLine                                    Storyboard.TargetProperty="(Border.Opacity)"Di2015NewLine                                    From="1.0" To="0.0" AutoReverse="True" Di2015NewLine                                    RepeatBehavior="Forever" />Di2015NewLine                            </Storyboard>Di2015NewLine                       </BeginStoryboard>Di2015NewLine                   </DataTrigger.EnterActions>Di2015NewLine               </DataTrigger>Di2015NewLine            </Style.Triggers>Di2015NewLine         </Style>Di2015NewLine    </Border.Style>Di2015NewLine   <TextBlock/>Di2015NewLine</Border>Di2015NewLine
19778420Di2015UniqueSeparatorDisplayMemberPath
19778420Di2015UniqueSeparatorToString()
19778420Di2015UniqueSeparatorlstNews.DisplayMemberPath = "name";Di2015NewLine
19778420Di2015UniqueSeparator<ListView DisplayMemberPath="{Binding name}"/>Di2015NewLine
19778420Di2015UniqueSeparator     <ListView>Di2015NewLine        <ListView.View>Di2015NewLine            <GridView>Di2015NewLine                <GridViewColumn DisplayMemberBinding="{Binding Id}"/>Di2015NewLine                <GridViewColumn DisplayMemberBinding="{Binding name}"/>Di2015NewLine            </GridView>Di2015NewLine        </ListView.View>Di2015NewLine    </ListView>Di2015NewLine
19778736Di2015UniqueSeparatorpizzaOrder
19778736Di2015UniqueSeparatorList<pizzaOrder>
19778736Di2015UniqueSeparator// pizzaOrder aOrder = new pizzaOrder();Di2015NewLinepublic List<pizzaOrder> pizzasOrdered = new List<pizzaOrder>();Di2015NewLine
19778736Di2015UniqueSeparatorInsertOrder
19778736Di2015UniqueSeparatorprivate void InsertOrder_Click_1(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Call a common function that creates an object of pizzaOrder Di2015NewLine    // from the values typed by your user and add it to the ListDi2015NewLine    pizzaOrder aOrder = MakeAnOrder();Di2015NewLine    pizzasOrdered.Add(aOrder);Di2015NewLine}Di2015NewLineDi2015NewLineprivate pizzaOrder MakeAnOrder()Di2015NewLine{Di2015NewLine    double d;Di2015NewLine    int v;Di2015NewLine    pizzaOrder aOrder = new pizzaOrder();Di2015NewLineDi2015NewLine    // If zero is an acceptable value for pizza/cokes and amount thenDi2015NewLine    // you don't need to check the outcome of the tryparse...Di2015NewLine    int.TryParse(textBox1.Text, out v);Di2015NewLine    aOrder.numberOfPizzas = v;Di2015NewLine    int.TryParse(textBox2.Text, out v);Di2015NewLine    aOrder.numberOfCokes = v;Di2015NewLine    double.TryParse(textBox5.Text, out d);Di2015NewLine    aOrder.getAmountPaid = d;Di2015NewLine    return aOrder;Di2015NewLine }Di2015NewLine
19778736Di2015UniqueSeparatorprivate void calculateAmountDue_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    textBox3.Text = Convert.ToString(MakeAnOrder().GetAmountDue());Di2015NewLine}Di2015NewLine.....Di2015NewLine// the same code for the other buttonsDi2015NewLine
19778736Di2015UniqueSeparatorList<pizzaOrder>
19778736Di2015UniqueSeparatorprivate void summaryOfOrdersToolStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    SummaryOfOrdersPlaced myForm = new SummaryOfOrdersPlaced(pizzasOrdered);Di2015NewLine    myForm.Show();Di2015NewLine}Di2015NewLine
19778736Di2015UniqueSeparatorpublic class SummaryOfOrdersPlaced : FormDi2015NewLine{Di2015NewLine    public SummaryOfOrdersPlaced(List<pizzaOrder> orders)Di2015NewLine    {Di2015NewLine        foreach(pizzaOrder o in orders)Di2015NewLine           ... use the passed in variable to loop on orders and create your displayDi2015NewLine    }Di2015NewLine}Di2015NewLine
19778755Di2015UniqueSeparatorpublic async Task<List<CustomerEmail>> GetCustomerDropDownList()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        using (YeagerTechEntities DbContext = new YeagerTechEntities())Di2015NewLine        {Di2015NewLine            DbContext.Configuration.ProxyCreationEnabled = false;Di2015NewLine            DbContext.Database.Connection.Open();Di2015NewLineDi2015NewLine            var customers = await DbContext.Customers.Select(s =>Di2015NewLine            new CustomerEmail()Di2015NewLine            {Di2015NewLine                CustomerID = s.CustomerID,Di2015NewLine                Email = s.EmailDi2015NewLine            }).ToListAsync();Di2015NewLine        }Di2015NewLineDi2015NewLine        return customers;Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        throw ex;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19778767Di2015UniqueSeparatorSQLConnection
19778783Di2015UniqueSeparatorg.Key
19778783Di2015UniqueSeparatorEntityFunctions.TruncateTime
19778783Di2015UniqueSeparatorreturn Json(query.AsEnumerable().Select(r => new Di2015NewLine    {Di2015NewLine        date = r.date.GetValueOrDefault().ToString("dd.MM.yyyy"),Di2015NewLine        users = r.users,Di2015NewLine        visits = r.visitsDi2015NewLine    }), JsonRequestBehavior.AllowGet);Di2015NewLine
19778855Di2015UniqueSeparatorMapper.CreateMap<MyClassA, MyClassB>()Di2015NewLine      .AfterMap((a,b) => b.Foo = a.Foo) // will be mapped if Foo is nullDi2015NewLine      .ForAllMembers(opt => opt.Condition(srs => !srs.IsSourceValueNull));Di2015NewLine
19779001Di2015UniqueSeparatorif (Type.GetType("Full.Name.Space.To.TopographySurface") != null) {Di2015NewLine    TopographySurface.Create(vertices);Di2015NewLine}Di2015NewLineelse {Di2015NewLine    // use alternate method to create a surfaceDi2015NewLine}Di2015NewLine
19779001Di2015UniqueSeparatorTopographySurface
19779001Di2015UniqueSeparatorCreate
19779028Di2015UniqueSeparatorObservable.Return("foo").Count().Subscribe(x => Console.WriteLine(x));Di2015NewLine>>> 1Di2015NewLine
19779028Di2015UniqueSeparatorSubscribe
19779130Di2015UniqueSeparatorclass
19779130Di2015UniqueSeparatorprivate IQueryable<T> FilterTenant<T>(IQueryable<T> values) where T : class, ITenantDataDi2015NewLine{Di2015NewLine    return values.Where(x => x.TenantId == _tenant.TenantId);Di2015NewLine}Di2015NewLine
19779157Di2015UniqueSeparator\\(?#(\\w*[A-Za-z_]+\\w*)\\)?Di2015NewLine
19779208Di2015UniqueSeparator    public TransparentDataGridView()Di2015NewLine    {Di2015NewLine        this.SelectionChanged += TransparentDataGridView_SelectionChanged;Di2015NewLine    }Di2015NewLineDi2015NewLine    void TransparentDataGridView_SelectionChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        ClearSelection();Di2015NewLine    }Di2015NewLine
19779209Di2015UniqueSeparatorfor
19779209Di2015UniqueSeparator-1
19779209Di2015UniqueSeparatorList<int>
19779209Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    List<int> ints = new List<int>();Di2015NewLineDi2015NewLine    //capture numbers from user inputDi2015NewLine    while(true)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Enter a number");Di2015NewLine        int number = Convert.ToInt32(Console.ReadLine());Di2015NewLineDi2015NewLine        if (number == -1) //If user enters magic number, we break out of while loopDi2015NewLine            break;Di2015NewLineDi2015NewLine        ints.Add(number); //Unless we've broken out, add the number to the listDi2015NewLine    }Di2015NewLineDi2015NewLine    //do your bubble sort hereDi2015NewLine    //this is up to you to implement!Di2015NewLineDi2015NewLine    //print the resultsDi2015NewLine    foreach(int sortedNumber in ints)Di2015NewLine    {Di2015NewLine        Console.WriteLine(sortedNumber);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19779224Di2015UniqueSeparatormSpec.ForEach(b =>Di2015NewLine            {Di2015NewLine                if (b != null)Di2015NewLine                    mData.AddRange(b);Di2015NewLine            });Di2015NewLine
19779224Di2015UniqueSeparatorb
19779224Di2015UniqueSeparatorMyClassData
19779224Di2015UniqueSeparatorMyClassData
19779224Di2015UniqueSeparatorMyClassData
19779224Di2015UniqueSeparatorMyClassData
19779309Di2015UniqueSeparatorMyObjectCollection.ToDictionary(x=>makeStructFromMyObject(x), x=>x);Di2015NewLineDi2015NewLineDi2015NewLine//... with...Di2015NewLineDi2015NewLineprivate MyStruct makeStructFromMyObject(MyObject obj)Di2015NewLine{Di2015NewLine   //to be implemented by youDi2015NewLine}Di2015NewLine
19779507Di2015UniqueSeparatorprotected void btnSend_Click(object sender, EventArgs e) {Di2015NewLine    Trace.Write("btnSend_Click initialized");Di2015NewLine    string resp = "An unknown error occured.";Di2015NewLine    using (MailMessage msg = new MailMessage()) {Di2015NewLine        try {Di2015NewLine            msg.To.Add(txtFrom.Text);Di2015NewLine            msg.Subject = txtSubject.Text;Di2015NewLine            msg.Body = txtMessage.Text;Di2015NewLine            SmtpClient smtp = new SmtpClient("localhost");Di2015NewLine            Trace.Write("smtp client created.");Di2015NewLine            smtp.Send(msg);Di2015NewLine            Trace.Write("smtp message sent.");Di2015NewLine            resp = "Your message was sent.";Di2015NewLine        } catch (Exception ex) {Di2015NewLine            Trace.Warn("Smtp Error", ex.Message);Di2015NewLine            resp = "There was an error sending your message.";Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Response.Write(resp);Di2015NewLine    Trace.Write("btnSend_Click completed");Di2015NewLine}Di2015NewLine
19779702Di2015UniqueSeparatorapplication/octet-stream
19779702Di2015UniqueSeparatortext/plain
19779702Di2015UniqueSeparatorapplication/vnd.yourcompany.yourapplicationname
19779702Di2015UniqueSeparatortype/vnd.company
19779702Di2015UniqueSeparatorvar inputfile = "foobar.aaa";Di2015NewLinevar tempdir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());Di2015NewLinevar outZipFile = File.GetTempFileName();Di2015NewLineDi2015NewLineFile.Move(inputfile, tempdir);Di2015NewLineZipFile.CreateFromDirectory(tempdir, outZipFile);Di2015NewLineDirectory.Delete(tempdir, true /* delete the file within */);Di2015NewLineDi2015NewLinevar attachment = new Attachment(outZipFile, "yourFile.zip", "application/octet-stream");Di2015NewLine// send your emailDi2015NewLineFile.Delete(outZipFile);Di2015NewLine
19779727Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var dict = new Dictionary<string, string>();Di2015NewLine        dict.Add("CAT", "Kitty");Di2015NewLine        dict.Add("MOUSE", "Jerry");Di2015NewLineDi2015NewLine        var lines = File.ReadAllText("input.txt");Di2015NewLine        var regex = new Regex(@"(?<=(^=\\[?(?:\\w*?\\.){3}))\\w*?(?=(\\.\\w*?\\]?){3}$?)",Di2015NewLine            RegexOptions.Multiline |Di2015NewLine            RegexOptions.Compiled);Di2015NewLineDi2015NewLine        var result = regex.Replace(lines, m =>Di2015NewLine            dict.ContainsKey(m.Value) ? dict[m.Value] : m.Value);Di2015NewLine        Console.WriteLine(result);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19779746Di2015UniqueSeparatorgetPeople
19779746Di2015UniqueSeparatorLoadPeopleFromDatabase
19779758Di2015UniqueSeparatorSystem.Object
19779758Di2015UniqueSeparatorprivate void TestMethodWrapper(object param)Di2015NewLine{Di2015NewLine   TestMethod1((bool)param);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void TestMethod1(bool param)Di2015NewLine{Di2015NewLine    var something = !param;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void testMethod2()Di2015NewLine{Di2015NewLine    ThreadPool.QueueUserWorkItem(new WaitCallback(TestMethodWrapper), true);Di2015NewLine}Di2015NewLine
19779758Di2015UniqueSeparatorpublic void testMethod2()Di2015NewLine{Di2015NewLine    ThreadPool.QueueUserWorkItem(o => testMethod1(true));Di2015NewLine}Di2015NewLine
19779903Di2015UniqueSeparatorGamePage
19779903Di2015UniqueSeparatorDrawableGameComponent
19780019Di2015UniqueSeparatorinDir
19780019Di2015UniqueSeparatorBlockingCollection
19780019Di2015UniqueSeparatorException e3
19780585Di2015UniqueSeparatorXmlElementAttribute
19780585Di2015UniqueSeparatorpublic class CustomizeDi2015NewLine{Di2015NewLine    [XmlElement("Content")]Di2015NewLine    public List<Content> Content { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("Command")]Di2015NewLine    public List<Command> Command { get; set; }Di2015NewLine}Di2015NewLine
19780585Di2015UniqueSeparatorvar item = new Customize() { Content = new List<Content> { new Content(), new Content() }, Command = new List<Command> { new Command(), new Command(), new Command() } };Di2015NewLineDi2015NewLinestring result;Di2015NewLineDi2015NewLineusing (var writer = new StringWriter())Di2015NewLine{Di2015NewLine    var serializer = new XmlSerializer(typeof(Customize));Di2015NewLine    serializer.Serialize(writer, item);Di2015NewLine    result = writer.ToString();Di2015NewLine}Di2015NewLine
19780585Di2015UniqueSeparator<?xml version="1.0" encoding="utf-16"?>Di2015NewLine<Customize xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <Content />Di2015NewLine  <Content />Di2015NewLine  <Command />Di2015NewLine  <Command />Di2015NewLine  <Command />Di2015NewLine</Customize>Di2015NewLine
19780714Di2015UniqueSeparatorint replyno;Di2015NewLine     string Subject = "Re: Hey :) (1)";Di2015NewLine     if (Subject.Contains("Re:"))Di2015NewLine     {Di2015NewLine         tryDi2015NewLine         {Di2015NewLine             replyno = int.Parse(Regex.Match(Subject, @"(\\d+)").Value);Di2015NewLine             replyno++;Di2015NewLine             Subject = Regex.Replace(Subject,@"(\\d+)", replyno.ToString());Di2015NewLine             TextBoxSubject.Text = Subject ;Di2015NewLine         }Di2015NewLine         catchDi2015NewLine         {Di2015NewLine             TextBoxSubject.Text = Subject + " (1)";Di2015NewLine         }Di2015NewLineDi2015NewLine     }Di2015NewLine     elseDi2015NewLine     {Di2015NewLine         TextBoxSubject.Text = "Re: " + Subject;Di2015NewLine     }Di2015NewLine
19780792Di2015UniqueSeparatorLongListSelector
19780962Di2015UniqueSeparatorint lastRow = dt.Rows.Count - 1;Di2015NewLine// followed byDi2015NewLinerow = dt.Rows[lastRow];Di2015NewLine
19780962Di2015UniqueSeparatordt.Rows.Count == 0
19780962Di2015UniqueSeparatordt.Rows[-1]
19780962Di2015UniqueSeparatordt.Rows
19780962Di2015UniqueSeparatorif (lastRow >= 0) {Di2015NewLine  row = dt.Rows[lastRow];Di2015NewLine  strCols = strCols + row[col1.Ordinal].ToString();Di2015NewLine}Di2015NewLine
19780962Di2015UniqueSeparatorDts.Variables["ResultSet"].Value
19781078Di2015UniqueSeparatorprivate void btnHUp_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine  ThreadStart HUp = new ThreadStart(dothis);Di2015NewLine  t = new Thread(HUp);Di2015NewLine  t.Start();Di2015NewLine}Di2015NewLine
19781078Di2015UniqueSeparatorprivate void btnHUp_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine  Task.Factory.StartNew(dothis);Di2015NewLine}Di2015NewLine
19781078Di2015UniqueSeparatorpublic void dothis()Di2015NewLine{Di2015NewLine  if (intHour < 23) intHour = intHour += intStep;            Di2015NewLine  lblTimerHour.Text = intHour.ToString("00");Di2015NewLine}Di2015NewLine
19781078Di2015UniqueSeparatorpublic void dothis()Di2015NewLine{Di2015NewLine  while (intHour < 23) Di2015NewLine  {Di2015NewLine    intHour = intHour += intStep;       Di2015NewLine    lblTimerHour.Invoke((Action)(Di2015NewLine      () =>Di2015NewLine      {Di2015NewLine        lblTimerHour.Text = intHour.ToString("00");Di2015NewLine      }));Di2015NewLine  }     Di2015NewLine}Di2015NewLine
19781078Di2015UniqueSeparatorprivate void btnHUp_MouseUp(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine   t.Abort();Di2015NewLine}Di2015NewLine
19781078Di2015UniqueSeparatorCancellationTokenSource
19781078Di2015UniqueSeparatorCancellationToken
19781078Di2015UniqueSeparatorprivate CancellationTokenSource cts = null;Di2015NewLineDi2015NewLineprivate void btnHUp_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine  cts = new CancellationTokenSource();Di2015NewLine  Task.Factory.StartNew(() => dothis(cts.Token));Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnHUp_MouseUp(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine   cts.Cancel();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void dothis(CancellationToken token)Di2015NewLine{Di2015NewLine  while (!token.IsCancellationRequested) Di2015NewLine  {Di2015NewLine    intHour += intStep;       Di2015NewLine    lblTimerHour.Invoke((Action)(Di2015NewLine      () =>Di2015NewLine      {Di2015NewLine        lblTimerHour.Text = intHour.ToString("00");Di2015NewLine      }));Di2015NewLine    Thread.Sleep(1000);Di2015NewLine  }     Di2015NewLine}Di2015NewLine
19781113Di2015UniqueSeparatorpublic class DogDi2015NewLine{        Di2015NewLine    public Dog(string name) : base ( name, 4) { } Di2015NewLineDi2015NewLine    //OR thisDi2015NewLineDi2015NewLine    public Dog(string name, int legs = 4) : base ( name, legs) { }Di2015NewLine}Di2015NewLine
19781113Di2015UniqueSeparatornew Dog("MyDog")
19781113Di2015UniqueSeparatornew Dog("MyDog",4)
19781113Di2015UniqueSeparatornew Dog("MyDog",3)
19781257Di2015UniqueSeparatorBars[0].Id = 1Di2015NewLineBars[1].Id = 2Di2015NewLine
19781257Di2015UniqueSeparator//This is just a generic wrapper for the other Reflect methodDi2015NewLineprivate static Dictionary<string, string> Reflect<TModel>(TModel Model)Di2015NewLine{Di2015NewLine  return Reflect(Model.GetType(), Model);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static Dictionary<string, string> Reflect(Type Type, object Object)Di2015NewLine{Di2015NewLine  var result = new Dictionary<string, string>();Di2015NewLineDi2015NewLine  var properties = Type.GetProperties();Di2015NewLineDi2015NewLine  foreach (var property in properties)Di2015NewLine  {Di2015NewLine    if (Di2015NewLine      property.GetCustomAttributes(typeof(ManyToManyAttribute), true).Any() &&Di2015NewLine      property.PropertyType.GetGenericTypeDefinition() == typeof(IList<>))Di2015NewLine    {Di2015NewLine      var genericType = property.PropertyType.GetGenericArguments().FirstOrDefault();Di2015NewLine      var listValue = (IEnumerable)property.GetValue(Object, null);Di2015NewLineDi2015NewLine      int i = 0;Di2015NewLine      foreach (var value in listValue)Di2015NewLine      {Di2015NewLine        var childResult = Reflect(genericType, value);Di2015NewLine        foreach (var kvp in childResult)Di2015NewLine        {Di2015NewLine          var collectionName = property.Name;Di2015NewLine          var index = i;Di2015NewLine          var childPropertyName = kvp.Key;Di2015NewLine          var childPropertyValue = kvp.Value;Di2015NewLineDi2015NewLine          var flattened = string.Format("{0}[{1}].{2}", collectionName, i, childPropertyName);Di2015NewLine          result.Add(flattened, childPropertyValue);Di2015NewLine        }Di2015NewLineDi2015NewLine        i++;Di2015NewLine      }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine      result.Add(property.Name, property.GetValue(Object, null).ToString());Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  return result;Di2015NewLineDi2015NewLine}Di2015NewLine
19781298Di2015UniqueSeparator<?xml version="1.0" encoding="utf-16"?>Di2015NewLine<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <xs:element name="Student">Di2015NewLine    <xs:complexType>Di2015NewLine      <xs:sequence>Di2015NewLine        <xs:element name="FirstName">Di2015NewLine          <xs:simpleType>Di2015NewLine            <xs:restriction base="xs:string">Di2015NewLine              <xs:minLength value="1" />Di2015NewLine            </xs:restriction>Di2015NewLine          </xs:simpleType>Di2015NewLine        </xs:element>Di2015NewLine        <xs:element name="LastName">Di2015NewLine          <xs:simpleType>Di2015NewLine            <xs:restriction base="xs:string">Di2015NewLine              <xs:minLength value="1" />Di2015NewLine            </xs:restriction>Di2015NewLine          </xs:simpleType>Di2015NewLine        </xs:element>Di2015NewLine        <xs:element name="SocialSecurity">Di2015NewLine          <xs:simpleType>Di2015NewLine            <xs:restriction base="xs:string">Di2015NewLine              <xs:pattern value="[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]" />Di2015NewLine            </xs:restriction>Di2015NewLine          </xs:simpleType>Di2015NewLine        </xs:element>Di2015NewLine        <xs:element name="Phone">Di2015NewLine          <xs:complexType>Di2015NewLine            <xs:sequence>Di2015NewLine              <xs:element name="Number">Di2015NewLine                <xs:simpleType>Di2015NewLine                  <xs:restriction base="xs:string">Di2015NewLine                    <xs:pattern value="[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]" />Di2015NewLine                  </xs:restriction>Di2015NewLine                </xs:simpleType>Di2015NewLine              </xs:element>Di2015NewLine            </xs:sequence>Di2015NewLine            <xs:attribute name="type" use="required">Di2015NewLine              <xs:simpleType>Di2015NewLine                <xs:restriction base="xs:string">Di2015NewLine                  <xs:enumeration value="Home" />Di2015NewLine                </xs:restriction>Di2015NewLine              </xs:simpleType>Di2015NewLine            </xs:attribute>Di2015NewLine          </xs:complexType>Di2015NewLine        </xs:element>Di2015NewLine        <xs:element minOccurs="0" name="PhoneNumber">Di2015NewLine          <xs:complexType>Di2015NewLine            <xs:sequence>Di2015NewLine              <xs:element name="Number">Di2015NewLine                <xs:simpleType>Di2015NewLine                  <xs:restriction base="xs:string">Di2015NewLine                    <xs:pattern value="[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]" />Di2015NewLine                  </xs:restriction>Di2015NewLine                </xs:simpleType>Di2015NewLine              </xs:element>Di2015NewLine            </xs:sequence>Di2015NewLine            <xs:attribute name="type" use="required">Di2015NewLine              <xs:simpleType>Di2015NewLine                <xs:restriction base="xs:string">Di2015NewLine                  <xs:enumeration value="Cell" />Di2015NewLine                </xs:restriction>Di2015NewLine              </xs:simpleType>Di2015NewLine            </xs:attribute>Di2015NewLine          </xs:complexType>Di2015NewLine        </xs:element>Di2015NewLine      </xs:sequence>Di2015NewLine      <xs:attribute name="gradYear" type="xs:unsignedShort" use="required" />Di2015NewLine    </xs:complexType>Di2015NewLine  </xs:element>Di2015NewLine</xs:schema>Di2015NewLine
19781321Di2015UniqueSeparatorDataGridView
19781321Di2015UniqueSeparatorList<T>
19781321Di2015UniqueSeparatorColumnHeaderMouseClick
19781321Di2015UniqueSeparatorDataGridView
19781321Di2015UniqueSeparatorprotected void dataGridView1_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine{Di2015NewLine    // Get the information about the column clickedDi2015NewLine    var strColumnName = dataGridView1.Columns[e.ColumnIndex].Name;Di2015NewLine    SortOrder strSortOrder = getSortOrder(e.ColumnIndex);Di2015NewLineDi2015NewLine    // Sort the listDi2015NewLine    StudentList.Sort(new StudentComparer(strColumnName, strSortOrder));Di2015NewLineDi2015NewLine    // Rebind to use sorted listDi2015NewLine    dataGridView1.DataSource = null;Di2015NewLine    dataGridView1.DataSource = StudentList;Di2015NewLineDi2015NewLine    // Update user interface icon for sort order in column clickedDi2015NewLine    dataGridView1.Columns[e.ColumnIndex].HeaderCell.SortGlyphDirection = strSortOrder;Di2015NewLine}Di2015NewLineDi2015NewLineprivate SortOrder getSortOrder(int columnIndex)Di2015NewLine{Di2015NewLine    if (dataGridView1.Columns[columnIndex].HeaderCell.SortGlyphDirection == SortOrder.None ||Di2015NewLine        dataGridView1.Columns[columnIndex].HeaderCell.SortGlyphDirection == SortOrder.Descending)Di2015NewLine    {Di2015NewLine        dataGridView1.Columns[columnIndex].HeaderCell.SortGlyphDirection = SortOrder.Ascending;Di2015NewLine        return SortOrder.Ascending;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        dataGridView1.Columns[columnIndex].HeaderCell.SortGlyphDirection = SortOrder.Descending;Di2015NewLine        return SortOrder.Descending;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class StudentComparer : IComparer<StudentRecord>Di2015NewLine{Di2015NewLine    string memberName = String.Empty;Di2015NewLine    SortOrder sortOrder = SortOrder.None;Di2015NewLineDi2015NewLine    public StudentComparer(string strMemberName, SortOrder sortingOrder)Di2015NewLine    {Di2015NewLine        memberName = strMemberName;Di2015NewLine        sortOrder = sortingOrder;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Compare(StudentRecord student1, StudentRecord student2)Di2015NewLine    {Di2015NewLine        int returnValue = 1;Di2015NewLine        switch (memberName)Di2015NewLine        {Di2015NewLine            case "Name" :Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = student1.Name.CompareTo(student2.Name);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = student2.Name.CompareTo(student1.Name);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            case "Age":Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = student1.Age.CompareTo(student2.Age);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = student2.Age.CompareTo(student1.Age);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            case "PhoneNum":Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = student1.PhoneNum.CompareTo(student2.PhoneNum);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = student2.PhoneNum.CompareTo(student1.PhoneNum);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            case "TestScore1":Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = student1.TestScore1.CompareTo(student2.TestScore1);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = student2.TestScore1.CompareTo(student1.TestScore1);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            case "TestScore1Date":Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = student1.TestScore1Date.CompareTo(student2.TestScore1Date;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = student2.TestScore1Date.CompareTo(student1.TestScore1Date);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            default:Di2015NewLine                if (sortOrder == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    returnValue = Student1.Name.CompareTo(Student2.Name);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    returnValue = Student2.Name.CompareTo(Student1.Name);Di2015NewLine                }Di2015NewLine                break;Di2015NewLine        }Di2015NewLine        return returnValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19781321Di2015UniqueSeparatorName
19781408Di2015UniqueSeparator// To save UserID in sessionDi2015NewLineSession.Add("userID", "123");Di2015NewLine// orDi2015NewLineSession["userID"] = "123";Di2015NewLineDi2015NewLine// Get UserID from sessionDi2015NewLinestring userID = (string)(Session["userID"]);Di2015NewLineDi2015NewLine// Remove from sessionDi2015NewLineSession.Remove("userID");Di2015NewLine
19781461Di2015UniqueSeparatords_dt.Rows[0]
19781461Di2015UniqueSeparatorItem
19781461Di2015UniqueSeparatords_dt.Rows[0].Item["DT_XML"]Di2015NewLine
19781461Di2015UniqueSeparatorprivate void CreateFile(string data)Di2015NewLine{Di2015NewLine    string strpath = @"D:\\MyData\\Example.xml";Di2015NewLine    File.WriteAllText(strPath, data);Di2015NewLine}Di2015NewLine
19781461Di2015UniqueSeparatorCreateFile(ds_dt.Rows[0].ItemArray["DT_XML"].ToString());Di2015NewLine
19781547Di2015UniqueSeparatorIvrService
19781547Di2015UniqueSeparatorSystem.Diagnostics.EventLog.SourceExists
19781547Di2015UniqueSeparatorIvrServiceLog
19781547Di2015UniqueSeparatorSystem.Diagnostics.EventLog.DeleteEventSource("IvrService");Di2015NewLine
19781738Di2015UniqueSeparatorList<Dictionary<string, string>>
19781738Di2015UniqueSeparatorDictionary<string, string>
19781738Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // (Note: json test string is defined as a constant at bottom - scroll down)Di2015NewLineDi2015NewLine        foreach (Dictionary<string, string> crashReport in GetCrashData(json))Di2015NewLine        {Di2015NewLine            foreach (KeyValuePair<string, string> kvp in crashReport)Di2015NewLine            {Di2015NewLine                Console.WriteLine(kvp.Key + ": " + kvp.Value);Di2015NewLine            }Di2015NewLine            Console.WriteLine(new string('-', 60));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static List<Dictionary<string, string>> GetCrashData(string json)Di2015NewLine    {Di2015NewLine        JArray ja = JArray.Parse(json);Di2015NewLine        List<Dictionary<string, string>> list = new List<Dictionary<string, string>>();Di2015NewLine        foreach (JObject jo in ja.Children<JObject>())Di2015NewLine        {Di2015NewLine            Dictionary<string, string> dict = new Dictionary<string, string>();Di2015NewLine            FillDictionaryFromJObject(dict, jo, null);Di2015NewLine            list.Add(dict);Di2015NewLine        }Di2015NewLine        return list;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FillDictionaryFromJObject(Dictionary<string, string> dict, JObject jo, string prefix)Di2015NewLine    {Di2015NewLine        foreach (JProperty prop in jo.Properties())Di2015NewLine        {Di2015NewLine            string name = (string.IsNullOrEmpty(prefix) ? prop.Name : prefix + "." + prop.Name);Di2015NewLine            JToken token = prop.Value;Di2015NewLine            if (token.Type == JTokenType.Object)Di2015NewLine            {Di2015NewLine                FillDictionaryFromJObject(dict, (JObject)token, name);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                dict.Add(name, token.ToString()Di2015NewLine                    .Replace("\\\\n", "\\r\\n")Di2015NewLine                    .Replace("\\\\t", "\\t")Di2015NewLine                    .Replace("\\\\/", "/"));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static readonly string json = @"Di2015NewLine    [Di2015NewLine        {Di2015NewLine            ""CRASH_CONFIGURATION"": {Di2015NewLine                ""hardKeyboardHidden"": ""HARDKEYBOARDHIDDEN_YES"",Di2015NewLine                ""orientation"": ""ORIENTATION_PORTRAIT"",Di2015NewLine                ""keyboard"": ""KEYBOARD_NOKEYS"",Di2015NewLine                ""screenLayout"": ""SCREENLAYOUT_SIZE_NORMAL+SCREENLAYOUT_LONG_NO"",Di2015NewLine                ""mcc"": 310,Di2015NewLine                ""textLayoutDirection"": 0,Di2015NewLine                ""locale"": ""en_US"",Di2015NewLine                ""compatScreenHeightDp"": 455,Di2015NewLine                ""compatSmallestScreenWidthDp"": 320,Di2015NewLine                ""fontScale"": ""1.0"",Di2015NewLine                ""navigationHidden"": ""NAVIGATIONHIDDEN_YES"",Di2015NewLine                ""screenWidthDp"": 320,Di2015NewLine                ""fontTypeIndex"": ""-1"",Di2015NewLine                ""screenHeightDp"": 455,Di2015NewLine                ""uiMode"": ""UI_MODE_TYPE_NORMAL+UI_MODE_NIGHT_NO"",Di2015NewLine                ""userSetLocale"": false,Di2015NewLine                ""navigation"": ""NAVIGATION_NONAV"",Di2015NewLine                ""smallestScreenWidthDp"": 320,Di2015NewLine                ""keyboardHidden"": ""KEYBOARDHIDDEN_NO"",Di2015NewLine                ""seq"": 4,Di2015NewLine                ""mnc"": 410,Di2015NewLine                ""compatScreenWidthDp"": 320,Di2015NewLine                ""touchscreen"": ""TOUCHSCREEN_FINGER""Di2015NewLine            },Di2015NewLine            ""USER_CRASH_DATE"": ""2013-11-01T16:51:01.000-07:00"",Di2015NewLine            ""EVENTSLOG"": ""11-01 16:48:22.499 I\\\\/am_destroy_service(  375): [1096405040,com.android.email\\\\/.Controller$ControllerService,915]\\\\n11-01 16:48:36.229 I\\\\/am_create_service(  375): [1096742288,com.android.defcontainer\\\\/.DefaultContainerService,,19270]\\\\n(...snip...)\\\\n11-01 16:50:37.799 I\\\\/am_destroy_service(  375): [1100388752,com.android.email\\\\/.Controller$ControllerService,915]\\\\n11-01 16:50:52.809 I\\\\/am_create_service(  375): [1100623264,com.android.email\\\\/.Controller$ControllerService,,915]\\\\n11-01 16:50:52.839 I\\\\/am_destroy_service(  375): [1100623264,com.android.email\\\\/.Controller$ControllerService,915]\\\\n"",Di2015NewLine            ""BUILD"": {Di2015NewLine                ""TIME"": 1352162496000,Di2015NewLine                ""FINGERPRINT"": ""lge\\\\/m4_open_eu\\\\/m4:4.0.3\\\\/IML74K\\\\/lge610-V10l.20121106.094022:user\\\\/release-keys"",Di2015NewLine                ""HARDWARE"": ""m4"",Di2015NewLine                ""UNKNOWN"": ""unknown"",Di2015NewLine                ""RADIO"": ""unknown"",Di2015NewLine                ""BOARD"": ""7x27"",Di2015NewLine                ""PRODUCT"": ""m4_open_eu"",Di2015NewLine                ""DISPLAY"": ""IML74K"",Di2015NewLine                ""USER"": ""iamjihoon.kim"",Di2015NewLine                ""HOST"": ""LGEARND1B5"",Di2015NewLine                ""DEVICE"": ""m4"",Di2015NewLine                ""BOOTLOADER"": ""unknown"",Di2015NewLine                ""MODEL"": ""LG-E610"",Di2015NewLine                ""TAGS"": ""release-keys"",Di2015NewLine                ""CPU_ABI"": ""armeabi-v7a"",Di2015NewLine                ""VERSION"": {Di2015NewLine                    ""CODENAME"": ""REL"",Di2015NewLine                    ""INCREMENTAL"": ""lge610-V10l.20121106.094022"",Di2015NewLine                    ""RELEASE"": ""4.0.3"",Di2015NewLine                    ""SDK_INT"": 15,Di2015NewLine                    ""RESOURCES_SDK_INT"": 15,Di2015NewLine                    ""SDK"": 15Di2015NewLine                },Di2015NewLine                ""CPU_ABI2"": ""armeabi"",Di2015NewLine                ""IS_DEBUGGABLE"": false,Di2015NewLine                ""ID"": ""IML74K"",Di2015NewLine                ""SERIAL"": ""96a874bd"",Di2015NewLine                ""BRAND"": ""lge"",Di2015NewLine                ""MANUFACTURER"": ""LGE"",Di2015NewLine                ""TYPE"": ""user""Di2015NewLine            },Di2015NewLine            ""DUMPSYS_MEMINFO"": ""Permission Denial: can't dump meminfo from from pid=19965, uid=10068 without permission android.permission.DUMP\\\\n"",Di2015NewLine            ""localID"": 1,Di2015NewLine            ""userID"": 101,Di2015NewLine            ""locationID"": 999999,Di2015NewLine            ""PHONE_MODEL"": ""LG-E610"",Di2015NewLine            ""STACK_TRACE"": ""java.lang.NullPointerException\\\\n\\\\tat com.caseglobal.guardcommand.mainscreen.ACT_MainScreen$8.onClick(ACT_MainScreen.java:391)\\\\n\\\\tat android.view.View.performClick(View.java:3524)\\\\n\\\\tat android.view.View$PerformClick.run(View.java:14194)\\\\n\\\\tat android.os.Handler.handleCallback(Handler.java:605)\\\\n\\\\tat android.os.Handler.dispatchMessage(Handler.java:92)\\\\n\\\\tat android.os.Looper.loop(Looper.java:137)\\\\n\\\\tat android.app.ActivityThread.main(ActivityThread.java:4476)\\\\n\\\\tat java.lang.reflect.Method.invokeNative(Native Method)\\\\n\\\\tat java.lang.reflect.Method.invoke(Method.java:511)\\\\n\\\\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:816)\\\\n\\\\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:583)\\\\n\\\\tat dalvik.system.NativeStart.main(Native Method)\\\\n"",Di2015NewLine            ""DEVICE_ID"": 353089057998276,Di2015NewLine            ""PRODUCT"": ""m4_open_eu"",Di2015NewLine            ""APP_VERSION_NAME"": ""1.2.4"",Di2015NewLine            ""LOGCAT"": ""11-01 16:50:31.439 D\\\\/StatusBar.NetworkController(  465):  No service\\\\n11-01 16:50:31.449 W\\\\/SignalStrength(  375): charels mCountryCode: mOperatorCode EUOPEN\\\\n11-01 16:50:31.449 W\\\\/SignalStrength(  375): [BRIGHTHY] 0. mDataNetType: 0\\\\n11-01 16:50:31.449 W\\\\/SignalStrength(  375): getGsmLevel=4\\\\n(...snip...)\\\\n11-01 16:51:00.979 W\\\\/dalvikvm(19765): threadid=1: thread exiting with uncaught exception (group=0x40dd51f8)\\\\n11-01 16:51:00.979 E\\\\/ACRA    (19765): ACRA caught a NullPointerException exception for com.caseglobal.guardcommand. Building report.\\\\n11-01 16:51:00.989 D\\\\/ACRA    (19765): Using custom Report Fields\\\\n11-01 16:51:01.069 I\\\\/ACRA    (19765): READ_LOGS granted! ACRA can include LogCat and DropBox data.\\\\n11-01 16:51:01.099 D\\\\/ACRA    (19765): Retrieving logcat output...\\\\n"",Di2015NewLine            ""AVAILABLE_MEM_SIZE"": 2385801216,Di2015NewLine            ""USER_APP_START_DATE"": ""2013-11-01T16:48:45.000-07:00"",Di2015NewLine            ""CUSTOM_DATA"": {},Di2015NewLine            ""BRAND"": ""lge"",Di2015NewLine            ""PACKAGE_NAME"": ""com.mypackage"",Di2015NewLine            ""ANDROID_VERSION"": ""4.0.3"",Di2015NewLine            ""APP_VERSION_CODE"": 16Di2015NewLine        }Di2015NewLine    ]";Di2015NewLineDi2015NewLine}Di2015NewLine
19781738Di2015UniqueSeparatorCRASH_CONFIGURATION.hardKeyboardHidden: HARDKEYBOARDHIDDEN_YESDi2015NewLineCRASH_CONFIGURATION.orientation: ORIENTATION_PORTRAITDi2015NewLineCRASH_CONFIGURATION.keyboard: KEYBOARD_NOKEYSDi2015NewLineCRASH_CONFIGURATION.screenLayout: SCREENLAYOUT_SIZE_NORMAL+SCREENLAYOUT_LONG_NODi2015NewLineCRASH_CONFIGURATION.mcc: 310Di2015NewLineCRASH_CONFIGURATION.textLayoutDirection: 0Di2015NewLineCRASH_CONFIGURATION.locale: en_USDi2015NewLineCRASH_CONFIGURATION.compatScreenHeightDp: 455Di2015NewLineCRASH_CONFIGURATION.compatSmallestScreenWidthDp: 320Di2015NewLineCRASH_CONFIGURATION.fontScale: 1.0Di2015NewLineCRASH_CONFIGURATION.navigationHidden: NAVIGATIONHIDDEN_YESDi2015NewLineCRASH_CONFIGURATION.screenWidthDp: 320Di2015NewLineCRASH_CONFIGURATION.fontTypeIndex: -1Di2015NewLineCRASH_CONFIGURATION.screenHeightDp: 455Di2015NewLineCRASH_CONFIGURATION.uiMode: UI_MODE_TYPE_NORMAL+UI_MODE_NIGHT_NODi2015NewLineCRASH_CONFIGURATION.userSetLocale: FalseDi2015NewLineCRASH_CONFIGURATION.navigation: NAVIGATION_NONAVDi2015NewLineCRASH_CONFIGURATION.smallestScreenWidthDp: 320Di2015NewLineCRASH_CONFIGURATION.keyboardHidden: KEYBOARDHIDDEN_NODi2015NewLineCRASH_CONFIGURATION.seq: 4Di2015NewLineCRASH_CONFIGURATION.mnc: 410Di2015NewLineCRASH_CONFIGURATION.compatScreenWidthDp: 320Di2015NewLineCRASH_CONFIGURATION.touchscreen: TOUCHSCREEN_FINGERDi2015NewLineUSER_CRASH_DATE: 11/1/2013 6:51:01 PMDi2015NewLineEVENTSLOG: 11-01 16:48:22.499 I/am_destroy_service(  375): [1096405040,com.android.email/.Controller$ControllerService,915]Di2015NewLine11-01 16:48:36.229 I/am_create_service(  375): [1096742288,com.android.defcontainer/.DefaultContainerService,,19270]Di2015NewLine(...snip...)Di2015NewLine11-01 16:50:37.799 I/am_destroy_service(  375): [1100388752,com.android.email/.Controller$ControllerService,915]Di2015NewLine11-01 16:50:52.809 I/am_create_service(  375): [1100623264,com.android.email/.Controller$ControllerService,,915]Di2015NewLine11-01 16:50:52.839 I/am_destroy_service(  375): [1100623264,com.android.email/.Controller$ControllerService,915]Di2015NewLineDi2015NewLineBUILD.TIME: 1352162496000Di2015NewLineBUILD.FINGERPRINT: lge/m4_open_eu/m4:4.0.3/IML74K/lge610-V10l.20121106.094022:user/release-keysDi2015NewLineBUILD.HARDWARE: m4Di2015NewLineBUILD.UNKNOWN: unknownDi2015NewLineBUILD.RADIO: unknownDi2015NewLineBUILD.BOARD: 7x27Di2015NewLineBUILD.PRODUCT: m4_open_euDi2015NewLineBUILD.DISPLAY: IML74KDi2015NewLineBUILD.USER: iamjihoon.kimDi2015NewLineBUILD.HOST: LGEARND1B5Di2015NewLineBUILD.DEVICE: m4Di2015NewLineBUILD.BOOTLOADER: unknownDi2015NewLineBUILD.MODEL: LG-E610Di2015NewLineBUILD.TAGS: release-keysDi2015NewLineBUILD.CPU_ABI: armeabi-v7aDi2015NewLineBUILD.VERSION.CODENAME: RELDi2015NewLineBUILD.VERSION.INCREMENTAL: lge610-V10l.20121106.094022Di2015NewLineBUILD.VERSION.RELEASE: 4.0.3Di2015NewLineBUILD.VERSION.SDK_INT: 15Di2015NewLineBUILD.VERSION.RESOURCES_SDK_INT: 15Di2015NewLineBUILD.VERSION.SDK: 15Di2015NewLineBUILD.CPU_ABI2: armeabiDi2015NewLineBUILD.IS_DEBUGGABLE: FalseDi2015NewLineBUILD.ID: IML74KDi2015NewLineBUILD.SERIAL: 96a874bdDi2015NewLineBUILD.BRAND: lgeDi2015NewLineBUILD.MANUFACTURER: LGEDi2015NewLineBUILD.TYPE: userDi2015NewLineDUMPSYS_MEMINFO: Permission Denial: can't dump meminfo from from pid=19965, uid=10068 without permission android.permission.DUMPDi2015NewLineDi2015NewLinelocalID: 1Di2015NewLineuserID: 101Di2015NewLinelocationID: 999999Di2015NewLinePHONE_MODEL: LG-E610Di2015NewLineSTACK_TRACE: java.lang.NullPointerExceptionDi2015NewLine        at com.caseglobal.guardcommand.mainscreen.ACT_MainScreen$8.onClick(ACT_MainScreen.java:391)Di2015NewLine        at android.view.View.performClick(View.java:3524)Di2015NewLine        at android.view.View$PerformClick.run(View.java:14194)Di2015NewLine        at android.os.Handler.handleCallback(Handler.java:605)Di2015NewLine        at android.os.Handler.dispatchMessage(Handler.java:92)Di2015NewLine        at android.os.Looper.loop(Looper.java:137)Di2015NewLine        at android.app.ActivityThread.main(ActivityThread.java:4476)Di2015NewLine        at java.lang.reflect.Method.invokeNative(Native Method)Di2015NewLine        at java.lang.reflect.Method.invoke(Method.java:511)Di2015NewLine        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:816)Di2015NewLine        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:583)Di2015NewLine        at dalvik.system.NativeStart.main(Native Method)Di2015NewLineDi2015NewLineDEVICE_ID: 353089057998276Di2015NewLinePRODUCT: m4_open_euDi2015NewLineAPP_VERSION_NAME: 1.2.4Di2015NewLineLOGCAT: 11-01 16:50:31.439 D/StatusBar.NetworkController(  465):  No serviceDi2015NewLine11-01 16:50:31.449 W/SignalStrength(  375): charels mCountryCode: mOperatorCode EUOPENDi2015NewLine11-01 16:50:31.449 W/SignalStrength(  375): [BRIGHTHY] 0. mDataNetType: 0Di2015NewLine11-01 16:50:31.449 W/SignalStrength(  375): getGsmLevel=4Di2015NewLine(...snip...)Di2015NewLine11-01 16:51:00.979 W/dalvikvm(19765): threadid=1: thread exiting with uncaught exception (group=0x40dd51f8)Di2015NewLine11-01 16:51:00.979 E/ACRA    (19765): ACRA caught a NullPointerException exception for com.caseglobal.guardcommand. Building report.Di2015NewLine11-01 16:51:00.989 D/ACRA    (19765): Using custom Report FieldsDi2015NewLine11-01 16:51:01.069 I/ACRA    (19765): READ_LOGS granted! ACRA can include LogCat and DropBox data.Di2015NewLine11-01 16:51:01.099 D/ACRA    (19765): Retrieving logcat output...Di2015NewLineDi2015NewLineAVAILABLE_MEM_SIZE: 2385801216Di2015NewLineUSER_APP_START_DATE: 11/1/2013 6:48:45 PMDi2015NewLineBRAND: lgeDi2015NewLinePACKAGE_NAME: com.mypackageDi2015NewLineANDROID_VERSION: 4.0.3Di2015NewLineAPP_VERSION_CODE: 16Di2015NewLine------------------------------------------------------------Di2015NewLine
19781747Di2015UniqueSeparatorprotected void MainMenu_OnItemClick(object sender, RadMenuEventArgs e)Di2015NewLine  {Di2015NewLine            if (e.Item.Text == "About")Di2015NewLine            {Di2015NewLinestring script = "function f(){$find(\\"" + RadWindow1.ClientID + "\\").show(); Sys.Application.remove_load(f);}Sys.Application.add_load(f);"; Di2015NewLine    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "key", script, true);  Di2015NewLineDi2015NewLine            }Di2015NewLine  }Di2015NewLine
19781839Di2015UniqueSeparatorPictureBox's
19781839Di2015UniqueSeparatorfor (int i = 0; i < ImagesInFolder.Count; i++) Di2015NewLine{Di2015NewLine    PictureBox I = new PictureBox(); //Initialize a new PictureBox of name IDi2015NewLine    I.Location = new System.Drawing.Point(x, y); //Set the PictureBox location to x,yDi2015NewLine    x += 50; //Sort horizontally; Increment x by 50Di2015NewLine    //y += 50; //Sort vertically; Increment y by 50Di2015NewLine    //Set the Image property of I to i in ImagesInFolder as indexDi2015NewLine    I.Image = ImagesInFolder[i]; Di2015NewLine    //Set the PictureBox Size property to 50,50Di2015NewLine    I.Size = new System.Drawing.Size(80, 80); Di2015NewLine    //Stretch the image; maximum width and height are 50,50Di2015NewLine    I.SizeMode = PictureBoxSizeMode.StretchImage; Di2015NewLine    //Add the Event handler to the click eventDi2015NewLine    I.Click += pictureBox_Click;Di2015NewLineDi2015NewLine    flowLayoutPanel1.Controls.Add(I); //Add the PictureBox to the FlowLayoutPanelDi2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorsender
19781839Di2015UniqueSeparatorPictureBox
19781839Di2015UniqueSeparatorprivate void pictureBox_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    //This is supposing that you have created a custom constructor of your FormtoOpen that can take the ImageDi2015NewLine    //You could also create a Property to do the same thing.Di2015NewLine    FormtoOpen f = new FormtoOpen(((PictureBox)sender).Image);Di2015NewLine    f.Show();Di2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorpublic partial class FormtoOpen : FormDi2015NewLine{Di2015NewLine    public FormtoOpen( Image img)Di2015NewLine    {Di2015NewLine        this.BackgroundImage = img;Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorpublic void setPicture(Image img)Di2015NewLine{Di2015NewLine    this.BackgroundImage = img;Di2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorpictureBox_Click
19781839Di2015UniqueSeparatorprivate void pictureBox1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    FormtoOpen form = new FormtoOpen();Di2015NewLine    form.setPicture(((PictureBox)sender).Image);Di2015NewLine    form.Show();Di2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorTag
19781839Di2015UniqueSeparatorforeach
19781839Di2015UniqueSeparatorforeach (string JPEGImages in Directory.GetFiles(GivenFolder, "*.jpg"))Di2015NewLine{Di2015NewLine    //Add the Image gathered to the List collectionDi2015NewLine    Image img = System.Drawing.Image.FromFile(JPEGImages);Di2015NewLine    img.Tag = JPEGImages;Di2015NewLine    ImagesInFolder.Add(img);Di2015NewLine}Di2015NewLine
19781839Di2015UniqueSeparatorsetPicture
19781839Di2015UniqueSeparatorpublic void setPicture(Image img)Di2015NewLine{Di2015NewLine    this.BackgroundImage = img;Di2015NewLine    this.Text = img.Tag.ToString(); //The image's Tag property is an object so it needs to be converted to a stringDi2015NewLine}Di2015NewLine
19782062Di2015UniqueSeparatorprotected override void Update(GameTime gameTime)Di2015NewLine{Di2015NewLine    // ...Di2015NewLineDi2015NewLine    if (CheckInput(Keys.Enter, 1))Di2015NewLine    {Di2015NewLine        blocks = newMap(map, blocks, console);Di2015NewLine    }Di2015NewLineDi2015NewLine    oldState = Keyboard.GetState();Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLineDi2015NewLine// Method: Checks if a key is/was pressedDi2015NewLinepublic bool CheckInput(Keys key, int checkType)Di2015NewLine{Di2015NewLine    // Get current keyboard stateDi2015NewLine    KeyboardState newState = Keyboard.GetState();Di2015NewLine    bool retType = false; // Return typeDi2015NewLineDi2015NewLine    if (checkType == 0)Di2015NewLine    {Di2015NewLine        // Check Type: Is key currently down?Di2015NewLine        if (newState.IsKeyDown(key))Di2015NewLine        {Di2015NewLine            retType = true;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            retType = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    else if (checkType == 1)Di2015NewLine    {Di2015NewLine        // Check Type: Was the key pressed?Di2015NewLine        if (newState.IsKeyDown(key))Di2015NewLine        {Di2015NewLine            if (!oldState.IsKeyDown(key))Di2015NewLine            {Di2015NewLine                // Key was just pressedDi2015NewLine                retType = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // Key was already pressed, return falseDi2015NewLine                retType = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Return resultDi2015NewLine    return retType;Di2015NewLine}Di2015NewLine
19782201Di2015UniqueSeparatorSystem.IO
19782201Di2015UniqueSeparatorFile
19782229Di2015UniqueSeparatorpublic class ClassName  Di2015NewLine{  Di2015NewLine    public ClassName(IEmailService emailService, IFileRespository fileRepository)  Di2015NewLine    {  Di2015NewLine        // You might want store the reference to these injected services Di2015NewLine        // and later use them to perform useful work Di2015NewLine    }  Di2015NewLine    public void DoSomething()Di2015NewLine    {Di2015NewLine        // Do Something usefullDi2015NewLine    }Di2015NewLine}Di2015NewLine
19782505Di2015UniqueSeparatorint BytesReceived = SocketMain.Receive(BufferArray);Di2015NewLine
19782505Di2015UniqueSeparator// Warning untested! (but you get the idea)Di2015NewLineDi2015NewLine// when sendingDi2015NewLinevar payload = MS.ToArray();Di2015NewLinevar payloadSize = payload.Length;Di2015NewLinemySocket.Send(BitConverter.GetBytes(payloadSize));Di2015NewLinemySocket.Send(payload);Di2015NewLineDi2015NewLine// when recievingDi2015NewLinemySocket.Recieve(myBuffer, sizeof(int), SocketFlags.None);Di2015NewLinevar payloadSize = BitConverter.ToInt32(myBuffer, 0);Di2015NewLinemySocket.Recieve(myBuffer, payloadSize, SocketFlags.None);Di2015NewLine// now myBuffer from index 0 - payloadSize contains the payload you sentDi2015NewLine
19782663Di2015UniqueSeparatortype="button"
19782663Di2015UniqueSeparator<button>
19782663Di2015UniqueSeparatorfunction add(e){Di2015NewLine   e.preventDefault();Di2015NewLine   // your code hereDi2015NewLine}Di2015NewLine
19782668Di2015UniqueSeparatorisRegistered
19782668Di2015UniqueSeparatorFunc<bool>
19782668Di2015UniqueSeparatorrs
19782668Di2015UniqueSeparatorSubscribe(_registeredPlayers, player, PlayerTypes.Player, () => this.OnRegisterPlayer(player));Di2015NewLine
19782760Di2015UniqueSeparatorchar ch1 = '\\u2085';  Di2015NewLinechar ch2 = '\\u8328';Di2015NewLinechar ch3 = '\\u8327';Di2015NewLinechar ch4 = '\\u8326';Di2015NewLinechar ch5 = '\\u8325';Di2015NewLineConsole.WriteLine("" + ch1 + ch2 + ch3 + ch4 + ch5);Di2015NewLine
19782836Di2015UniqueSeparatorfor
19782836Di2015UniqueSeparatorx
19782836Di2015UniqueSeparatory
19782836Di2015UniqueSeparatorx*y
19782836Di2015UniqueSeparatorfor
19782836Di2015UniqueSeparatorfor(int i = 0; i < x; i++)Di2015NewLine    for(int j = 0; j < y; j++)Di2015NewLine        for(int k = 0; k < z; k++)Di2015NewLine            // code here runs x * y * z timesDi2015NewLine
19782836Di2015UniqueSeparatorfor
19782836Di2015UniqueSeparatorfor(int i = 1; i < x; i++)Di2015NewLine    for(int j = 0; j < y * 2; j++)Di2015NewLine        for(int k = 0; k < z; k += 2)Di2015NewLine            // code here runs (x - 1) * (y * 2) * (z / 2) timesDi2015NewLine
19782836Di2015UniqueSeparatorfor
19782836Di2015UniqueSeparatorfor(int i = 0; i < x; i++)Di2015NewLine    for(int j = i; j < y; j++) // notice how `j` starts as `i`Di2015NewLine        // Code here runs `y` times the first time through the outer loop,Di2015NewLine        // then `y - 1` times,Di2015NewLine        // then `y - 2` times,Di2015NewLine        // ...Di2015NewLine        // if x < y, the pattern continues until the xth time,Di2015NewLine        // when this loop runs `y - x` times.Di2015NewLine        // if x > y, the pattern will stop when y == x, andDi2015NewLine        // code here will run 0 times for the remainder ofDi2015NewLine        // the loops.Di2015NewLine
19782836Di2015UniqueSeparatorx < y
19782836Di2015UniqueSeparatory + (y-1) + (y-2) ... + (y-x)
19782900Di2015UniqueSeparatorprivate readonly Queue<ResponseMessageType> _responseQueue = new Queue<ResponseMessageType>();Di2015NewLineDi2015NewLinepublic async Task<bool> Authenticate(string clientId, string clientSecret) {Di2015NewLine    var response = AsyncRequestAResponse(MakeAuthMessage(clientId, clientSecret));Di2015NewLine    return (await response).Type == MessageTypes.AuthenticationResponseDi2015NewLine}Di2015NewLineDi2015NewLinepublic Task<bool> AsyncRequestAResponse(RequestMessageType request) {Di2015NewLine    var responseSource = new TaskCompletionSource<ResponseMessageType>();Di2015NewLine    _responseQueue.Enqueue(responseSource);Di2015NewLine    Send(request);Di2015NewLine    return responseSource.TaskDi2015NewLine}Di2015NewLineDi2015NewLineprivate void Listen() {Di2015NewLine    ...Di2015NewLine    if (_responseQueue.Count == 0)Di2015NewLine        throw new Exception("Erm, why are they responding before we requested anything?");Di2015NewLine    _responseQueue.Dequeue().SetResult(msg);Di2015NewLine}Di2015NewLine
19782900Di2015UniqueSeparatorTaskCompletionSource<T>
19783082Di2015UniqueSeparatorString
19783082Di2015UniqueSeparatorToString()
19783082Di2015UniqueSeparatorcmd = new SqlCeCommand("insert into Deposit values('" + num + "')", con);Di2015NewLine
19783082Di2015UniqueSeparatorcmd = new SqlCeCommand("insert into Deposit values(" + num.ToString() + ")", con);Di2015NewLine
19783089Di2015UniqueSeparatorDBMS_SCHEDULER.RUN
19783089Di2015UniqueSeparatorUSE_CURRENT_SESSION
19783089Di2015UniqueSeparatorTRUE
19783089Di2015UniqueSeparator--Create a test job.Di2015NewLinebeginDi2015NewLine    dbms_scheduler.create_job(Di2015NewLine        job_name => 'TEST_JOB',Di2015NewLine        job_type => 'PLSQL_BLOCK',Di2015NewLine        job_action => 'BEGIN dbms_lock.sleep(3); END;');Di2015NewLineend;Di2015NewLine/Di2015NewLineDi2015NewLine--This fails if run concurrently. Di2015NewLinebeginDi2015NewLine    dbms_scheduler.run_job(job_name => 'TEST_JOB', use_current_session => FALSE);Di2015NewLineend;Di2015NewLine/Di2015NewLineDi2015NewLine--This can run concurrently.Di2015NewLinebeginDi2015NewLine    dbms_scheduler.run_job(job_name => 'TEST_JOB', use_current_session => TRUE);Di2015NewLineend;Di2015NewLine/Di2015NewLine
19783092Di2015UniqueSeparatorTPL
19783092Di2015UniqueSeparatorLinq
19783092Di2015UniqueSeparatorAction
19783092Di2015UniqueSeparatorAction<T>
19783092Di2015UniqueSeparatorFunc<>
19783092Di2015UniqueSeparatorFunc<>
19783092Di2015UniqueSeparatorFunc<>
19783092Di2015UniqueSeparatorAction<>
19783092Di2015UniqueSeparatorLinq
19783092Di2015UniqueSeparatorPredicate
19783092Di2015UniqueSeparatorWhere
19783092Di2015UniqueSeparatorSystem.Delegate
19783092Di2015UniqueSeparatorDynamicInvoke
19783092Di2015UniqueSeparatorDynamicInvoke
19783172Di2015UniqueSeparatorWeb.config
19783172Di2015UniqueSeparator<configuration>
19783172Di2015UniqueSeparator   <connectionStrings>Di2015NewLine<add name="MySqlConnection" connectionString="Data Di2015NewLine  Source=MySqlServer;Initial Catalog=aspnetdb;IntegratedDi2015NewLine  Security=SSPI;" />Di2015NewLine
19783172Di2015UniqueSeparator<authentication>
19783172Di2015UniqueSeparator   <authorization>Di2015NewLine  <deny users="?"/>Di2015NewLine</authorization>Di2015NewLine<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">Di2015NewLine  <providers>Di2015NewLine    <clear/>Di2015NewLine    <add name="SqlProvider" type="System.Web.Security.SqlMembershipProvider" Di2015NewLine         connectionStringName="MySqlConnection" applicationName="MyApplication" Di2015NewLine         enablePasswordRetrieval="false" enablePasswordReset="true" Di2015NewLine         requiresQuestionAndAnswer="true" requiresUniqueEmail="true" Di2015NewLine         passwordFormat="Hashed"/>Di2015NewLine  </providers>Di2015NewLine</membership>Di2015NewLine
19783693Di2015UniqueSeparatorvar result = from tuple in (from address in context.AdressesDi2015NewLine                            join person in context.Persons on address.PersonId equals person.IdDi2015NewLine             select new { person.Id, address.Id1, address.Id2})Di2015NewLine             group tuple by new { tuple.Id1, tuple.Id2 } into myGroupingDi2015NewLine             select Di2015NewLine                 new MyObj Di2015NewLine                     { Di2015NewLine                         Id1 = myGrouping.Key.Id1,Di2015NewLine                         Id2 = myGrouping.Key.Id2,Di2015NewLine                         PersonIds = myGrouping.Select(x => x.PersonId).Distinct()Di2015NewLine                     };Di2015NewLine
19783714Di2015UniqueSeparatorpublic class UserDi2015NewLine{Di2015NewLine   public int ID { get; set; }Di2015NewLine   public virtual Role Role { get; set; }Di2015NewLine}Di2015NewLinepublic class RoleDi2015NewLine{Di2015NewLine   public int ID { get; set; }Di2015NewLine   public string Name { get; set; }Di2015NewLine   public virtual List<User> UsersInRole { get; set; }Di2015NewLine} Di2015NewLine
19783868Di2015UniqueSeparatorDataContext
19783868Di2015UniqueSeparatorlonglistselector
19783868Di2015UniqueSeparatormenuItem
19783868Di2015UniqueSeparatorprivate void Deleting(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    SoundData data1 = (sender as MenuItem).DataContext as SoundData;Di2015NewLineDi2015NewLine    MessageBoxResult message = MessageBox.Show(Di2015NewLine    "The file will be permanently deleted. Continue?",Di2015NewLine    "Delete File", Di2015NewLine    MessageBoxButton.OKCancelDi2015NewLine    );Di2015NewLineDi2015NewLine    if (message == MessageBoxResult.OK)Di2015NewLine    {   Di2015NewLine        //Call the method which deletes the data and pass data1 to it.Di2015NewLine    }Di2015NewLine}Di2015NewLine
19783868Di2015UniqueSeparatorprivate void Delete_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        SoundData data = (sender as MenuItem).DataContext as SoundData;Di2015NewLine        MessageBoxResult result = MessageBox.Show("Do you want to delete this item ?", "Are you sure ?", MessageBoxButton.OKCancel);Di2015NewLineDi2015NewLine        if (result == MessageBoxResult.OK)Di2015NewLine        {Di2015NewLine            if (data == null)Di2015NewLine            {Di2015NewLine                MessageBox.Show("The file doesn't exist");Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            using (var storageFolder = IsolatedStorageFile.GetUserStoreForApplication())Di2015NewLine            {Di2015NewLine                if (storageFolder.FileExists(data.FilePath))Di2015NewLine                {Di2015NewLine                    storageFolder.DeleteFile(data.FilePath);Di2015NewLineDi2015NewLine                    App.ViewModel.CustomSounds.Items.Remove(data);Di2015NewLineDi2015NewLine                    // Save the list of CustomSounds to IsolatedStorage.ApplicationSettingsDi2015NewLine                    var JsonData = JsonConvert.SerializeObject(App.ViewModel.CustomSounds);Di2015NewLineDi2015NewLine                    IsolatedStorageSettings.ApplicationSettings[SoundModel.CustomSoundKey] = JsonData;Di2015NewLine                    IsolatedStorageSettings.ApplicationSettings.Save();Di2015NewLineDi2015NewLine                    App.ViewModel.IsDataLoaded = false;Di2015NewLine                    App.ViewModel.LoadData();Di2015NewLineDi2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    MessageBox.Show("File doesn't exist");Di2015NewLine                    return;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLine    } Di2015NewLine
19783901Di2015UniqueSeparatorWebBrowser
19783901Di2015UniqueSeparatorWebBrowser
19783901Di2015UniqueSeparatorAllowNavigation
19783901Di2015UniqueSeparatorURL
19783901Di2015UniqueSeparatorWebBrowser
19783901Di2015UniqueSeparatorAllowNavigation
19783901Di2015UniqueSeparatorfalse
19783901Di2015UniqueSeparatorShown
19783901Di2015UniqueSeparatorprivate void helpForm_Shown(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    webHelp.AllowNavigation = true;Di2015NewLine}Di2015NewLine
19783901Di2015UniqueSeparatorDocument
19783901Di2015UniqueSeparatorDocument
19783901Di2015UniqueSeparatorURL
19783901Di2015UniqueSeparatorwebHelp.Document.OpenNew(true);
19783901Di2015UniqueSeparatorWebBrowser
19783901Di2015UniqueSeparatorAllowNavigation
19783988Di2015UniqueSeparator public static void SetAccessRule(string directory)Di2015NewLine    {Di2015NewLine        System.Security.AccessControl.DirectorySecurity Security = System.IO.Directory.GetAccessControl(directory);Di2015NewLine        FileSystemAccessRule accountAllow = new FileSystemAccessRule(Environment.UserDomainName + "\\\\" + Environment.UserName, FileSystemRights.FullControl, AccessControlType.Allow);Di2015NewLine        Security.AddAccessRule(accountAllow);Di2015NewLine    }Di2015NewLine
19784210Di2015UniqueSeparator     _token = thing.WeakSubscribe(HandleTheEvent);Di2015NewLine
19784210Di2015UniqueSeparator     _token.Dispose();Di2015NewLine     _token = null;Di2015NewLine
19784210Di2015UniqueSeparator_token
19784231Di2015UniqueSeparatorint GetValue(int[,] array, int x, int y)Di2015NewLine{Di2015NewLine    if (x < 0 || y < 0 ||Di2015NewLine        x >= array.GetLength(0) || y >= array.GetLength(1))Di2015NewLine    {Di2015NewLine        return 0;Di2015NewLine    }Di2015NewLine    return array[x, y];Di2015NewLine}Di2015NewLine
19784231Di2015UniqueSeparatorfor (int x = 0; x < array.GetLength(0); x++)Di2015NewLine{Di2015NewLine    for (int y = 0; y < array.GetLength(0); y++)Di2015NewLine    {Di2015NewLine        int total = GetValue(array, x - 1, y - 1)Di2015NewLine                  + GetValue(array, x, y - 1)Di2015NewLine                  + GetValue(array, x + 1, y - 1)Di2015NewLine                  + GetValue(array, x - 1, y)Di2015NewLine                  + GetValue(array, x + 1, y)Di2015NewLine                  + GetValue(array, x - 1, y + 1)Di2015NewLine                  + GetValue(array, x, y + 1)Di2015NewLine                  + GetValue(array, x + 1, y + 1);Di2015NewLine        // Do something with the totalDi2015NewLine    }Di2015NewLine}Di2015NewLine
19784231Di2015UniqueSeparatorGetLength
19784386Di2015UniqueSeparatorCurrentImage
19784386Di2015UniqueSeparatorImagesEnum
19784386Di2015UniqueSeparatorpublic class ImagesEnumToSourceConverter: IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        if(value is ImagesEnum)Di2015NewLine        {Di2015NewLine            switch((ImagesEnum)value)Di2015NewLine            {Di2015NewLine                case ImagesEnum.Image1:Di2015NewLine                    return "../Resources/MyImages/Image1.png";Di2015NewLine                case ImagesEnum.Image2:Di2015NewLine                    return "../Resources/MyImages/Image2.png";Di2015NewLine                case ImagesEnum.Image3:Di2015NewLine                    return "../Resources/MyImages/Image3.png";Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return DependencyProperty.UnsetValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19784386Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <conv:ImagesEnumToSourceConverter x:Key="ImagesEnumToSource" />Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine.....Di2015NewLineDi2015NewLine<Image Source="{Binding CurrentImage, Converter={StaticResource ImagesEnumToSource}}" />Di2015NewLine
19784438Di2015UniqueSeparatorGet-Service IIS* -computer ... #(all computers in the domain or on the network)Di2015NewLine
19784678Di2015UniqueSeparatorText
19784678Di2015UniqueSeparatorRegex
19784678Di2015UniqueSeparatorstring input = "g.portal.com";Di2015NewLineXmlNode foundNode = null;Di2015NewLineforeach (XmlNode node in xDoc.DocumentElement.ChildNodes)Di2015NewLine{Di2015NewLine    string value = node.Attributes["Text"].Value;Di2015NewLine    string pattern = Regex.Escape(value)Di2015NewLine        .Replace(@"\\*", ".*")Di2015NewLine        .Replace(@"\\?", ".");Di2015NewLine    if (Regex.IsMatch(input, "^" + pattern + "$"))Di2015NewLine    {Di2015NewLine        foundNode = node;Di2015NewLine        break;  //remove if you want to continue searchingDi2015NewLine    }Di2015NewLine}Di2015NewLine
19784678Di2015UniqueSeparatorfoundNode
19784747Di2015UniqueSeparatorstring value = "The items you purchased are:\\r\\n\\r\\n";Di2015NewLineforeach (var item in lbxItemBought.Items)Di2015NewLine{Di2015NewLine   value += "," + item.ToString(); Di2015NewLine}Di2015NewLineDi2015NewLinevalue += "\\r\\n\\r\\nYour total price was:" + lblLastCheckout.Text ;Di2015NewLinetbxReceipt.Text = value; Di2015NewLine
19784850Di2015UniqueSeparatorSplit
19784850Di2015UniqueSeparatorJoin
19784850Di2015UniqueSeparatorIEnumerable<string> values = "test1,test2".Split(',');Di2015NewLinevar matchingRows = from row in datatable.AsEnumerable()Di2015NewLine                   join value in valuesDi2015NewLine                   on row.Field<string>(ColumnName) equals valueDi2015NewLine                   select row;Di2015NewLineDataTable tblResult = matchingRows.CopyToDataTable(); // or ToListDi2015NewLine
19784850Di2015UniqueSeparatorContains
19784850Di2015UniqueSeparatorvar matchingRows = from row in datatable.AsEnumerable()Di2015NewLine                   where values.Contains(row.Field<string>(ColumnName))Di2015NewLine                   select row;Di2015NewLine
19785239Di2015UniqueSeparatoryextremes = chart.yAxis[0].getExtremes();Di2015NewLinexextremes = chart.yAxis[0].getExtremes();Di2015NewLineyMax = yextremes.dataMax;Di2015NewLinexMax = xextremes.dataMax;Di2015NewLineyMin = yextremes.dataMin;Di2015NewLinexMin = xextremes.dataMin;Di2015NewLine
19785278Di2015UniqueSeparatorajax
19785311Di2015UniqueSeparatorpublic class StudentDetailsDi2015NewLine{Di2015NewLine    public string id { get; set; }Di2015NewLine    public string name { get; set; }Di2015NewLine    public int percentage { get; set; }Di2015NewLine    public string type { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class StudentDi2015NewLine{Di2015NewLine    public int code { get; set; }Di2015NewLine    public string message { get; set; }Di2015NewLine    public List<StudentDetails> students { get; set; }Di2015NewLine}Di2015NewLine
19785311Di2015UniqueSeparatorvar parsedResponse = JsonConvert.DeserializeObject<Student>(data);Di2015NewLine
19785311Di2015UniqueSeparator[DataContract]
19785311Di2015UniqueSeparator[DataMember]
19785366Di2015UniqueSeparatorb
19785366Di2015UniqueSeparatora
19785366Di2015UniqueSeparatora
19785366Di2015UniqueSeparatorb
19785366Di2015UniqueSeparatora
19785366Di2015UniqueSeparatorb b1 = new a();
19785366Di2015UniqueSeparatorpublic
19785366Di2015UniqueSeparatorprotected
19785366Di2015UniqueSeparatortestb()
19785366Di2015UniqueSeparatorb
19785366Di2015UniqueSeparatorb b1=new b();
19785395Di2015UniqueSeparatorStandardOutput
19785395Di2015UniqueSeparatorStandardOutput
19785395Di2015UniqueSeparatorOutputDataReceived
19785395Di2015UniqueSeparatorBeginOutputReadLine
19785395Di2015UniqueSeparatorOutputDataReceived
19785395Di2015UniqueSeparatorStandardOutput
19785395Di2015UniqueSeparatorProcess
19785487Di2015UniqueSeparator    namespace MinesweeperDi2015NewLine    {Di2015NewLine      class GameDi2015NewLine      {Di2015NewLine        private int[,] _minenArray;Di2015NewLineDi2015NewLineDi2015NewLine    public Game(int anzahlMinen, System.Random rnd)Di2015NewLine    {Di2015NewLine      _minenArray = new int[5, 5];Di2015NewLineDi2015NewLine      BombenGenerieren(anzahlMinen, rnd);Di2015NewLine      NeighbourCheck();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    public void NeighbourCheck()Di2015NewLine    {Di2015NewLine      for (int x = 0; x <= 4; x++)Di2015NewLine      {Di2015NewLine        for (int y = 0; y <= 4; y++)Di2015NewLine        {Di2015NewLine          if (_minenArray[x, y] == -1)Di2015NewLine          {Di2015NewLine            break;Di2015NewLine          }Di2015NewLineDi2015NewLine          elseDi2015NewLine          {Di2015NewLine            _minenArray[x, y] = 0;Di2015NewLine            for (int e = Math.Max(0,x - 1); e <= x + 1 && e <= 4; e++)Di2015NewLine            {              Di2015NewLine                for (int j = Math.Max(0,y - 1); j <= y + 1 && j <= 4; j++)Di2015NewLine                {Di2015NewLine                 // I think the next check is wrong and you actually wantDi2015NewLine                 // if (e == x && j == y)Di2015NewLine                 // continue;Di2015NewLineDi2015NewLine                  if (_minenArray[e, j] == _minenArray[x, y]) Di2015NewLine                    break;Di2015NewLineDi2015NewLine                  else // else is not required as break stops flow anyhow.Di2015NewLine                  {Di2015NewLine                    if (_minenArray[e, j] == -1)Di2015NewLine                      _minenArray[x, y]++;Di2015NewLine                  }Di2015NewLine                }Di2015NewLine            }Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
19785488Di2015UniqueSeparatorOfType<>
19785488Di2015UniqueSeparatorOfType<BarFoo>
19785502Di2015UniqueSeparatornewWindowCommand
19785502Di2015UniqueSeparatorget {Di2015NewLine    return newWindowCommand ?? (newWindowCommand = new MVVM.RelayCommand(...));Di2015NewLine}Di2015NewLine
19785502Di2015UniqueSeparatornewWindowCommand
19785502Di2015UniqueSeparator??
19785502Di2015UniqueSeparator=
19785502Di2015UniqueSeparator(
19785502Di2015UniqueSeparator)
19785502Di2015UniqueSeparator=
19785502Di2015UniqueSeparator??
19785712Di2015UniqueSeparator{ "strJsonssss":[{"Role_ID":"2","Customer_ID":"155","Brands":"Chloe;","Country_ID":"96;"}]}Di2015NewLine--------------^Di2015NewLine
19785832Di2015UniqueSeparatorif (select.OrderBy != null && select.OrderBy.Count > 0) Di2015NewLine{Di2015NewLine    this.AppendNewLine(Indentation.Same);Di2015NewLine    sb.Append("ORDER BY ");Di2015NewLine    for (int i = 0, n = select.OrderBy.Count; i < n; i++) Di2015NewLine    {Di2015NewLine        OrderExpression exp = select.OrderBy[i];Di2015NewLine        if (i > 0) Di2015NewLine        {Di2015NewLine            sb.Append(", ");Di2015NewLine        }Di2015NewLine        this.Visit(exp.Expression);Di2015NewLine        if (exp.OrderType != OrderType.Ascending) Di2015NewLine        {Di2015NewLine            sb.Append(" DESC");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19786020Di2015UniqueSeparator<asp:ListView...
19786020Di2015UniqueSeparatorSelectMethod
19786020Di2015UniqueSeparatorListViewId_GetData
19786020Di2015UniqueSeparator<asp:ListView SelectMethod="ListView1_GetData" ID="ListView1" runat="server">Di2015NewLine</asp:ListView>Di2015NewLine
19786020Di2015UniqueSeparatorpublic IQueryable ListView1_GetData()Di2015NewLine{Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
19786127Di2015UniqueSeparatorPASSWORD
19786127Di2015UniqueSeparatorUPDATE CUSTOMERS SET [password]=? WHERE userid=?;Di2015NewLine
19786175Di2015UniqueSeparatorpublic class LighteningDi2015NewLine{Di2015NewLine    public Lightening(int start, int end)Di2015NewLine    {Di2015NewLine        StartLocation = start;Di2015NewLine        EndLocation = end;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int StartLocation { get; private set; }Di2015NewLineDi2015NewLine    public int EndLocation { get; private set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class VideoDi2015NewLine{Di2015NewLine    public Video(string name)Di2015NewLine    {Di2015NewLine        Name = name;Di2015NewLine        Lightenings = new List<Lightening>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Name { get; private set; }Di2015NewLineDi2015NewLine    public List<Lightening> Lightenings { get; private set; }Di2015NewLine}Di2015NewLine....Di2015NewLineprivate List<Video> ExtractInfo(string path)Di2015NewLine{Di2015NewLine    var videos = new List<Video>();Di2015NewLine    Video currentVideo = null;Di2015NewLine    using (var file = new System.IO.StreamReader(path))Di2015NewLine    {Di2015NewLine        string line;Di2015NewLine        Regex regex = new Regex(@"\\d+");Di2015NewLine        while((line = file.ReadLine()) != null)Di2015NewLine        {Di2015NewLine            if (line.StartsWith("Video"))Di2015NewLine            {Di2015NewLine                currentVideo = new Video(line.Split(':')[1].Trim());Di2015NewLine                videos.Add(currentVideo);Di2015NewLine            }Di2015NewLine            else if (line.StartsWith("Lightning"))Di2015NewLine            {Di2015NewLine                var matches = regex.Matches(line);Di2015NewLine                if (matches.Count == 2 && currentVideo != null)Di2015NewLine                {Di2015NewLine                    var l = new Lightening(Int32.Parse(matches[0].Value), Int32.Parse(matches[1].Value));Di2015NewLine                    currentVideo.Lightenings.Add(l);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return videos;Di2015NewLine}Di2015NewLine
19786175Di2015UniqueSeparatorfor (int i = 0; i < videos.Count; i++)Di2015NewLine{Di2015NewLine    if (videos[i].Name == videoFile)Di2015NewLine    {Di2015NewLine        foreach (var l in videos[i].Lightenings)Di2015NewLine        {Di2015NewLine            // draw from l.StartLocation to l.EndLocationDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19786346Di2015UniqueSeparator  <ItemGroup Condition=" '$(Configuration)' == 'Debug' ">Di2015NewLine    <XmlInput Include="FileA.xml">Di2015NewLine      <Visible>False</Visible>Di2015NewLine    </XmlInput>Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup Condition=" '$(Configuration)' == 'Release' ">Di2015NewLine    <XmlInput Include="FileB.xml">Di2015NewLine      <Visible>False</Visible>Di2015NewLine    </XmlInput>Di2015NewLine  </ItemGroup>Di2015NewLine  <ItemGroup>Di2015NewLine    <XmlOutput Include="$(OutputPath)\\File.xml">Di2015NewLine      <Visible>False</Visible>Di2015NewLine    </XmlOutput>Di2015NewLine  </ItemGroup>Di2015NewLine  <Target Name="AfterBuild">Di2015NewLine    <Copy SourceFiles="@(XmlInput)" DestinationFiles="@(XmlOutput)" />Di2015NewLine  </Target>Di2015NewLine  <Target Name="BeforeClean">Di2015NewLine    <Delete Files="@(XmlOutput)" />Di2015NewLine  </Target>Di2015NewLine
19786480Di2015UniqueSeparatorprivate void CalculateFiles()Di2015NewLine{Di2015NewLine    var builder = new StringBuilder();Di2015NewLine    var fileGroupByExtension = new DirectoryInfo(this.DirectoryPath)Di2015NewLine                                    .GetFiles(SearchPattern,SearchOption.AllDirectories)Di2015NewLine                                    .GroupBy(file => file.Extension)Di2015NewLine                                    .OrderBy(grp => grp.Key);Di2015NewLine    foreach (var grp in fileGroupByExtension)Di2015NewLine    {Di2015NewLine        var extension = grp.Key;Di2015NewLine        builder.Append(extension);Di2015NewLine        builder.Append(":");Di2015NewLine        builder.AppendLine();Di2015NewLine        foreach (var file in grp.OrderBy(file => file.Name))Di2015NewLine        {Di2015NewLine            builder.Append(file.Name);Di2015NewLine            builder.Append(" ....... ");Di2015NewLine            builder.Append(file.Length / 1000);Di2015NewLine            builder.Append("KB");Di2015NewLine            builder.AppendLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Console.Write(builder.ToString());Di2015NewLine}Di2015NewLine
19786589Di2015UniqueSeparatorFileWatch
19786589Di2015UniqueSeparatorwatcher_change
19786589Di2015UniqueSeparatorPage
19786634Di2015UniqueSeparatorMD
19786705Di2015UniqueSeparatorwindow.location.href = "OtherPage.aspx"Di2015NewLine
19786777Di2015UniqueSeparator[WebMethod]// press alt+shift+f10 after selecting the WebMethod wording to include the libraryDi2015NewLinepublic static bool CheckLogin (string username, string password){Di2015NewLine//Type your method hereDi2015NewLinereturn result;//Result should be BooleanDi2015NewLine}Di2015NewLine
19786777Di2015UniqueSeparator $.ajax({Di2015NewLine        type: "POST",Di2015NewLine        url: "YourWebServiceName.asmx/CheckLogin",Di2015NewLine        data: '{"Username":"' + $('#username').val() + '","password":"' +Di2015NewLine                $('#password').val() + '"}',Di2015NewLine        dataType: "json",Di2015NewLine        contentType: "application/json; charset=utf-8",Di2015NewLine        success: function(message) {Di2015NewLine          alert(message);//will alert 'true'Di2015NewLine           //DO what you want to do on client sideDi2015NewLine        },Di2015NewLine        error: function() {Di2015NewLine          alert(message);//will alert 'false'Di2015NewLine //DO what you want to do on client sideDi2015NewLine        }Di2015NewLine    });Di2015NewLine
19786918Di2015UniqueSeparatorstring filePath = "D:\\\\XML\\\\LanguagePack.xml";Di2015NewLinevar fileInfo = new FileInfo(filePath);Di2015NewLinevar xmlDocument = new XmlDocument();Di2015NewLinexmlDocument.Load(fileInfo.FullName);Di2015NewLineDi2015NewLinevar node = xmlDocument.SelectSingleNode("//*[@id='10001']");Di2015NewLinereturn node.InnerText; // return 'Word1_French'Di2015NewLine
19787051Di2015UniqueSeparatorViewBag
19787051Di2015UniqueSeparator...Di2015NewLine@foreach (var item in items)Di2015NewLine{Di2015NewLine    <span data-refered-type="@item.Item.Value">Di2015NewLine        @if (item.Type.IsSubclassOf(typeof(AFieldFormula)))Di2015NewLine        {Di2015NewLine            var newModel = item.Item.Selected ? Model : Activator.CreateInstance(item.Type);Di2015NewLine            @Html.Partial("~/Views/MemberField/EditorTemplates/AFieldFormula_" + item.Type.Name + ".cshtml", newModel, new ViewDataDictionary { { "vb", ViewBag }})Di2015NewLine        }Di2015NewLine    </span>Di2015NewLine}Di2015NewLine
19787051Di2015UniqueSeparator@model MygLogWeb.Classes.DirectFieldFormulaDi2015NewLineDi2015NewLine@{ var vb = ((dynamic)ViewData["vb"]); }Di2015NewLineDi2015NewLine@if (!vb.ScriptAlreadyIncluded)Di2015NewLine{Di2015NewLine    ...Build a JSON dictionnary...   Di2015NewLine}Di2015NewLineDi2015NewLine<b>DirectFieldFormula</b>Di2015NewLine@Html.EditorFor(model => model.Field)Di2015NewLine@Html.ValidationMessageFor(model => model.Field)Di2015NewLineDi2015NewLine@if (!vb.ScriptAlreadyIncluded)Di2015NewLine{Di2015NewLine    ...Some controls using the JSON dictionnary...Di2015NewLine}Di2015NewLineDi2015NewLine@if (!vb.ScriptAlreadyIncluded)Di2015NewLine{Di2015NewLine    @{ vb.ScriptAlreadyIncluded = true; } // set the flagDi2015NewLine}Di2015NewLine
19787051Di2015UniqueSeparatorRenderPartial("AFieldFormula_DirectFieldFormula")
19787051Di2015UniqueSeparatorViewBag.ScriptAlreadyIncluded
19787051Di2015UniqueSeparatortrue
19787051Di2015UniqueSeparatorViewBag
19787051Di2015UniqueSeparatorScriptAlreadyIncluded
19787062Di2015UniqueSeparatorclass WriteTextFileDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLineDi2015NewLine        // These examples assume a "C:\\Users\\Public\\TestFolder" folder on your machine.Di2015NewLine        // You can modify the path if necessary. Di2015NewLineDi2015NewLine        // Example #1: Write an array of strings to a file. Di2015NewLine        // Create a string array that consists of three lines. Di2015NewLine        string[] lines = { "First line", "Second line", "Third line" };Di2015NewLine        // WriteAllLines creates a file, writes a collection of strings to the file, Di2015NewLine        // and then closes the file.Di2015NewLine        System.IO.File.WriteAllLines(@"C:\\Users\\Public\\TestFolder\\WriteLines.txt", lines);Di2015NewLineDi2015NewLineDi2015NewLine        // Example #2: Write one string to a text file. Di2015NewLine        string text = "A class is the most powerful data type in C#. Like a structure, " +Di2015NewLine                       "a class defines the data and behavior of the data type. ";Di2015NewLine        // WriteAllText creates a file, writes the specified string to the file, Di2015NewLine        // and then closes the file.Di2015NewLine        System.IO.File.WriteAllText(@"C:\\Users\\Public\\TestFolder\\WriteText.txt", text);Di2015NewLineDi2015NewLine        // Example #3: Write only some strings in an array to a file. Di2015NewLine        // The using statement automatically closes the stream and calls  Di2015NewLine        // IDisposable.Dispose on the stream object. Di2015NewLine        using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\\Users\\Public\\TestFolder\\WriteLines2.txt"))Di2015NewLine        {Di2015NewLine            foreach (string line in lines)Di2015NewLine            {Di2015NewLine                // If the line doesn't contain the word 'Second', write the line to the file. Di2015NewLine                if (!line.Contains("Second"))Di2015NewLine                {Di2015NewLine                    file.WriteLine(line);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Example #4: Append new text to an existing file. Di2015NewLine        // The using statement automatically closes the stream and calls  Di2015NewLine        // IDisposable.Dispose on the stream object. Di2015NewLine        using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\\Users\\Public\\TestFolder\\WriteLines2.txt", true))Di2015NewLine        {Di2015NewLine            file.WriteLine("Fourth line");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine //Output (to WriteLines.txt): Di2015NewLine //   First line Di2015NewLine //   Second line Di2015NewLine //   Third line Di2015NewLineDi2015NewLine //Output (to WriteText.txt): Di2015NewLine //   A class is the most powerful data type in C#. Like a structure, a class defines the data and behavior of the data type. Di2015NewLineDi2015NewLine //Output to WriteLines2.txt after Example #3: Di2015NewLine //   First line Di2015NewLine //   Third line Di2015NewLineDi2015NewLine //Output to WriteLines2.txt after Example #4: Di2015NewLine //   First line Di2015NewLine //   Third line Di2015NewLine //   Fourth lineDi2015NewLine
19787142Di2015UniqueSeparatorLEFT OUTER JOIN QS.FB56 ON (KO1007 = FB5601 AND SUBSTR(KO1025, 3, 4) = SUBSTR(FB5605, 1, 4)Di2015NewLine
19787316Di2015UniqueSeparator.Local
19787316Di2015UniqueSeparatorvar attachedEntity = leitner.Set<Person>().SingleOrDefault(x => x.Id == 3);Di2015NewLine
19787316Di2015UniqueSeparatorRemove
19787316Di2015UniqueSeparatorDbSet
19787316Di2015UniqueSeparatorleitner.Set<Person>().Remove(attachedEntity);Di2015NewLine
19787316Di2015UniqueSeparatorSetValues
19787316Di2015UniqueSeparatorDbEntityEntry<Person>
19787316Di2015UniqueSeparatorleitner.Entry(attachedEntity)
19787316Di2015UniqueSeparatorvar p2 = new Person() // for updateDi2015NewLine    {Di2015NewLine        Id = 3,Di2015NewLine        Name = "W",Di2015NewLine        Family = "W",Di2015NewLine        Age = 90Di2015NewLine    };Di2015NewLineleitner.Entry(attachedEntity).Currentvalues.SetValues(p2);Di2015NewLine
19787339Di2015UniqueSeparatorMySql.Data.dll
19787339Di2015UniqueSeparatordll
19787339Di2015UniqueSeparatorPM> Install-Package MySql.DataDi2015NewLine
19787361Di2015UniqueSeparatorvar match = Regex.Match(s, @"onclick=""NewWindow\\('([^']*)',\\s*'([^']*)',.*");Di2015NewLineif (match.Success)Di2015NewLine{Di2015NewLine    string longId = match.Groups[1].Value;Di2015NewLine    string other = match.Groups[2].Value;Di2015NewLine}Di2015NewLine
19787361Di2015UniqueSeparatorU_nQgAjU_tdUnfcA7lT5opoTLyLdslWDTpiNzcdkLoHlobS_HbujMw..Di2015NewLinebpvsid=nvnN2JFJqJc.&dcz=1Di2015NewLine
19787419Di2015UniqueSeparatoron t0.CCL_TMA_ID = SecurityIdMaxDi2015NewLine                             and t0.CCL_DATE <= DateMaxDi2015NewLine                             and t0.CCL_DATE >= DateMax-10Di2015NewLine
19787419Di2015UniqueSeparatorDatetime d = Datetime.Now;Di2015NewLineDatetime lastYear = d.AddYears(-1);Di2015NewLinevar q = from t0 in db.usrCOURSCLOTUREDi2015NewLine        join t1 in db.usrCOURSCLOTURE.where(z => z.CCL_DONNEE.HasValue) Di2015NewLine        on new {a = t0.CCL_DEV_DONNEE, b = t0.CCL_DATE} equals new {a = t1.CCL_TMA_ID, b = t1.CCL_DATE}Di2015NewLine            // the above is how to do a join on multiple conditionsDi2015NewLine        join t2 in (Di2015NewLine            from x0 in db.usrCOURSCLOTURE.where(z => z.CCL_DONNEE.HasValue && z.CCL_DATE < d)Di2015NewLine            .GroupBy(z => z.CCL_TMA_ID)Di2015NewLine            select new {SecurityIdMax = x0.Key, DateMax = x0.Max(z => z.CCL_DATE)}Di2015NewLine            //this is how you get your groupby subqueryDi2015NewLine        )Di2015NewLine        on t0.CCL_TMA_ID equals t2.SecurityIdMaxDi2015NewLine        whereDi2015NewLine          t0.CCL_DATE  > lastYearDi2015NewLine          && t0.CCL_DATE <= t2.DateMaxDi2015NewLine          && t0.CCL_DATE >= SqlFunctions.DateAdd("DAY", -10, t2.DateMax) //nb not sure on the interval - correct this!Di2015NewLine        select new {SecurityId = t0.CCL_TMA_ID,Di2015NewLine                    Date = t0.CCL_DATE,Di2015NewLine                    Price = t0.CCL_DONNEE,Di2015NewLine                    CurrencyPrice = t1.CCL_DONNEE};Di2015NewLine
19787491Di2015UniqueSeparatorpublic class Hjeke
19787491Di2015UniqueSeparatorpublic class Second
19787491Di2015UniqueSeparator"code": 0,Di2015NewLine"message": "success",Di2015NewLine"students": [Di2015NewLine    {Di2015NewLine        "id": "257633000000070001",Di2015NewLine        "name": "hjeke",Di2015NewLine        "percentage": 36,Di2015NewLine        "type": "Good",Di2015NewLine    },Di2015NewLine    {Di2015NewLine        "id": "257633000000073001",Di2015NewLine        "name": "Second",Di2015NewLine        "percentage": 4,Di2015NewLine        "type": "bad",Di2015NewLine    }]Di2015NewLine
19787491Di2015UniqueSeparator"details":{Di2015NewLine    "hjeke": {Di2015NewLine
19787491Di2015UniqueSeparatorpublic List<StudentDetails> students
19787491Di2015UniqueSeparatorstudents
19787569Di2015UniqueSeparatorLINEFEED SPACE SPACE SPACE < ...Di2015NewLineDi2015NewLineDi2015NewLine$ echo "CiAgICAgICAgICAgICAgICA8" | base64 -d | hexdump -C -n 32Di2015NewLine00000000  0a 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |.               |Di2015NewLine00000010  20 3c                                             | <| Di2015NewLine
19787569Di2015UniqueSeparator$ echo "PHN2ZyB4bWxucz0naHR0cDov" | base64 -d | hexdump -C -n 16Di2015NewLine00000000  3c 73 76 67 20 78 6d 6c  6e 73 3d 27 68 74 74 70  |<svg xmlns='http|Di2015NewLine00000010Di2015NewLine
19787687Di2015UniqueSeparatorDataValueField
19787687Di2015UniqueSeparatorDataTextField
19787687Di2015UniqueSeparatorthis.CheckList.DataSource = dataTable;Di2015NewLinethis.CheckList.DataValueField = "UserID";Di2015NewLinethis.CheckList.DataTextField = "UserName";Di2015NewLinethis.CheckList.DataBind();Di2015NewLine
19787716Di2015UniqueSeparatorValidateRequestAsync(userName, password).ResultDi2015NewLine
19787716Di2015UniqueSeparatorTask.Run(async () => await ValidateRequestAsync(userName, password)).Result;Di2015NewLine
19787820Di2015UniqueSeparatorprotected void TextBox1_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Calendar1.SelectedDate = Convert.ToDateTime(TextBox1.Text);Di2015NewLine}Di2015NewLine
19788087Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Security.Cryptography;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace DES_EncryptionDi2015NewLine{Di2015NewLine    class DES_ClassDi2015NewLine    {Di2015NewLine        public static void EncryptAndSaveFile(string InputFilePath, string OutputFilePath, byte[] Key, byte[] IV)Di2015NewLine        {Di2015NewLine            if (((InputFilePath.Length <= 0 || InputFilePath == null) || (Key.Length <= 0 || Key == null) || (IV.Length <= 0 || IV == null)))Di2015NewLine                throw new Exception("All Values must be filled");Di2015NewLineDi2015NewLine            using (FileStream fileCrypt = new FileStream(OutputFilePath, FileMode.Create))Di2015NewLine            {Di2015NewLine                using (DESCryptoServiceProvider encrypt = new DESCryptoServiceProvider())Di2015NewLine                {Di2015NewLine                    using (CryptoStream cs = new CryptoStream(fileCrypt, encrypt.CreateEncryptor(Key, IV), CryptoStreamMode.Write))Di2015NewLine                    {Di2015NewLine                        using (FileStream fileInput = new FileStream(InputFilePath, FileMode.Open))Di2015NewLine                        {Di2015NewLine                            int data;Di2015NewLine                            while ((data = fileInput.ReadByte()) != -1)Di2015NewLine                                cs.WriteByte((byte)data);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public static void DecryptAndSaveFile(string InputFilePath, string OutputFilePath, byte[] Key, byte[] IV)Di2015NewLine        {Di2015NewLine            if (((InputFilePath.Length <= 0 || InputFilePath == null) || (OutputFilePath.Length <= 0 || OutputFilePath == null) Di2015NewLine                || (Key.Length <= 0 || Key == null) || (IV.Length <= 0 || IV == null)))Di2015NewLine                throw new Exception("All Values must be filled");Di2015NewLineDi2015NewLine            using (FileStream fileCrypt = new FileStream(OutputFilePath, FileMode.Create))Di2015NewLine            {Di2015NewLine                using (DESCryptoServiceProvider decrypt = new DESCryptoServiceProvider())Di2015NewLine                {Di2015NewLine                    using (CryptoStream cs = new CryptoStream(fileCrypt, decrypt.CreateDecryptor(Key, IV), CryptoStreamMode.Write))Di2015NewLine                    {Di2015NewLine                        using (FileStream fileInput = new FileStream(InputFilePath, FileMode.Open))Di2015NewLine                        {Di2015NewLine                            int data;Di2015NewLine                            while ((data = fileInput.ReadByte()) != -1)Di2015NewLine                                cs.WriteByte((byte)data);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public static byte[] DecryptFileAndReturnStream(string InputFilePath, byte[] Key, byte[] IV)Di2015NewLine        {Di2015NewLine            if (((InputFilePath.Length <= 0 || InputFilePath == null) || (Key.Length <= 0 || Key == null) || (IV.Length <= 0 || IV == null)))Di2015NewLine                throw new Exception("All Values must be filled");Di2015NewLineDi2015NewLine            using (MemoryStream stream = new MemoryStream())Di2015NewLine            {Di2015NewLine                using (DESCryptoServiceProvider decrypt = new DESCryptoServiceProvider())Di2015NewLine                {Di2015NewLine                    using (CryptoStream cs = new CryptoStream(stream, decrypt.CreateDecryptor(Key, IV), CryptoStreamMode.Write))Di2015NewLine                    {Di2015NewLine                        using (FileStream fileInput = new FileStream(InputFilePath, FileMode.Open))Di2015NewLine                        {Di2015NewLine                            int data;Di2015NewLine                            while ((data = fileInput.ReadByte()) != -1)Di2015NewLine                                cs.WriteByte((byte)data);Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                return stream.ToArray();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public static byte[] StringToByteArray(string cipher)Di2015NewLine        {Di2015NewLine            byte[] ByteArray = Encoding.ASCII.GetBytes(cipher);Di2015NewLine            return ByteArray;Di2015NewLine        }Di2015NewLineDi2015NewLine        public static string ByteArrayToString(byte[] arr)Di2015NewLine        {Di2015NewLine            string ASCII = Encoding.ASCII.GetString(arr);Di2015NewLine            return ASCII;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19788087Di2015UniqueSeparatorprivate AxShockwaveFlashObjects.AxShockwaveFlash AxShockwaveFlash1;Di2015NewLineDi2015NewLinethis.AxShockwaveFlash1 = new AxShockwaveFlashObjects.AxShockwaveFlash();Di2015NewLineDi2015NewLine// Di2015NewLine// AxShockwaveFlash1Di2015NewLine// Di2015NewLinethis.AxShockwaveFlash1.Enabled = true;Di2015NewLinethis.AxShockwaveFlash1.Location = new System.Drawing.Point(6, 19);Di2015NewLinethis.AxShockwaveFlash1.Name = "AxShockwaveFlash1";Di2015NewLinethis.AxShockwaveFlash1.Size = new System.Drawing.Size(643, 294);Di2015NewLinethis.AxShockwaveFlash1.TabIndex = 0;Di2015NewLine
19788087Di2015UniqueSeparator    private void Button_Decrypt_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    byte[] Key = DES_Class.StringToByteArray(TextBox_Encrypt_Key.Text);Di2015NewLine    byte[] IV = DES_Class.StringToByteArray(TextBox_Encrypt_IV.Text);Di2015NewLine    byte[] str = DES_Class.DecryptFileAndReturnStream(TextBox_Encrypt_OuputFilePath.Text,Key, IV);Di2015NewLine    InitFlashMovie(str);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void InitFlashMovie(byte[] swfFile)Di2015NewLine{Di2015NewLine    using (MemoryStream stm = new MemoryStream())Di2015NewLine    {Di2015NewLine        using (BinaryWriter writer = new BinaryWriter(stm))Di2015NewLine        {Di2015NewLine            /* Write length of stream for AxHost.State */Di2015NewLine            writer.Write(8 + swfFile.Length);Di2015NewLine            /* Write Flash magic 'fUfU' */Di2015NewLine            writer.Write(0x55665566);Di2015NewLine            /* Length of swf file */Di2015NewLine            writer.Write(swfFile.Length);Di2015NewLine            writer.Write(swfFile);Di2015NewLine            stm.Seek(0, SeekOrigin.Begin);Di2015NewLine            /* 1 == IPeristStreamInit */Di2015NewLine            AxShockwaveFlash1.OcxState = new AxHost.State(stm, 1, true, null);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19788099Di2015UniqueSeparatorConsole.WriteLine
19788099Di2015UniqueSeparatorConsole.WriteLine(i "\\t");Di2015NewLine
19788099Di2015UniqueSeparatorConsole.Write(i + "\\t"); Di2015NewLine
19788099Di2015UniqueSeparatorConsole.Write("{0}\\t", i); Di2015NewLine
19788133Di2015UniqueSeparator// do something
19788133Di2015UniqueSeparatorawait
19788133Di2015UniqueSeparatorLockerHolder
19788133Di2015UniqueSeparatorstruct
19788133Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinestruct Foo : IDisposableDi2015NewLine{Di2015NewLine    public Foo(string msg)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Init: " + msg);Di2015NewLine    }Di2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Disposed");Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Before");Di2015NewLine        using (new Foo("Hi"))Di2015NewLine        {Di2015NewLine            Console.WriteLine("Do stuff");Di2015NewLine        }Di2015NewLine        Console.WriteLine("After");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19788133Di2015UniqueSeparatorMain
19788133Di2015UniqueSeparatorDispose
19788133Di2015UniqueSeparatorconstrained
19788133Di2015UniqueSeparatorLockHolderCreater.Create
19788133Di2015UniqueSeparatorIDisposable
19788164Di2015UniqueSeparatorobject obj = new {MyProp = 123};Di2015NewLinevar valueOfDynamicProperty = obj.GetType().GetProperty("MyProp").GetValue(obj);Di2015NewLineExpression<Func<Customer, bool>> e1 = DynamicExpression.ParseLambda<Customer, bool>("Age = @0", valueOfDynamicProperty);Di2015NewLine
19788164Di2015UniqueSeparatorobject obj = new {MyProp = 123};Di2015NewLineExpression<Func<Customer, bool>> e1 = DynamicExpression.ParseLambda<Customer, bool>("Age = @0.MyProp", obj);Di2015NewLine
19788164Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine   public int MyProperty {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar obj = new MyClass {MyProperty = 123}; // obj is MyClassDi2015NewLineExpression<Func<Customer, bool>> e1 = DynamicExpression.ParseLambda<Customer, bool>("Age = @0.MyProp", obj);Di2015NewLine
19788365Di2015UniqueSeparator//To Convert the DateTime to a string with yyyy-MM-dd formatDi2015NewLinestring dateString = DateTime.Now.ToString("yyyy-MM-dd");Di2015NewLineDi2015NewLine//To Convert a string with yyyy-MM-dd format to a dateDi2015NewLineDateTime dt = DateTime.ParseExact(dateString, "yyyy-MM-dd", CultureInfo.InvariantCulture);Di2015NewLine
19788447Di2015UniqueSeparatorRequest.Browser.IsMobileDeviceDi2015NewLineRequest.Browser.MobileDeviceManufacturerDi2015NewLineRequest.Browser.MobileDeviceModelDi2015NewLineRequest.Browser.ScreenPixelsWidthDi2015NewLineRequest.Browser.SupportsXmlHttpDi2015NewLine
19788725Di2015UniqueSeparatorthis.Refresh();Di2015NewLine
19788848Di2015UniqueSeparatorstring format = "yyyy-MM-dd";Di2015NewLinestring test = string.Join(",",dtArray.Select(x=>x.ToString(format)));Di2015NewLine
19788848Di2015UniqueSeparatorstring test = string.Join(",",dtArray);Di2015NewLine
19788855Di2015UniqueSeparator// Enjoy the horrible constructor chaining hereDi2015NewLinetry (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream("java.gz"))))) {Di2015NewLine    out.write("Hello world from Java 1.7!");Di2015NewLine    // Make sure everything gets writtenDi2015NewLine    out.flush();Di2015NewLine} // Auto out.close() by using the try-catch-with-resources patternDi2015NewLine
19788855Di2015UniqueSeparatorGZipStream zip = new GZipStream(new FileStream("java.gz", FileMode.Open), CompressionMode.Decompress);Di2015NewLine// Excuse me if there was an easier way to read the strings.Di2015NewLineint character = zip.ReadByte();Di2015NewLinewhile (character != -1)Di2015NewLine{Di2015NewLine    Console.Write((char)character);Di2015NewLine    character = zip.ReadByte();Di2015NewLine}Di2015NewLineConsole.ReadLine();Di2015NewLine
19788855Di2015UniqueSeparatorencode=baos.toByteArray().toString();//.toByteArray().toString();Di2015NewLine
19789041Di2015UniqueSeparatorrtspecialname
19789041Di2015UniqueSeparatorspecialname
19789041Di2015UniqueSeparatorvalue__
19789041Di2015UniqueSeparator.ctor
19789041Di2015UniqueSeparator.cctor
19789092Di2015UniqueSeparatorDATE
19789092Di2015UniqueSeparatorreserved keyword
19789092Di2015UniqueSeparator[DATE]
19789092Di2015UniqueSeparatorparameterized queries
19789092Di2015UniqueSeparatorSQL Injection
19789092Di2015UniqueSeparatorOleDbCommand top = new OleDbCommand(@"INSERT INTO invoice(invoice_number,order_number,customername,status,subtotal,tax,total,[date]) Di2015NewLine                                     VALUES (@invoice_number, @order_number, @customername, @status, @subtotal, @tax, @total, @date)", conn);Di2015NewLinetop.Parameters.AddWithValue("@invoice_number", inno);Di2015NewLinetop.Parameters.AddWithValue("@order_number", odrno);Di2015NewLinetop.Parameters.AddWithValue("@customername", name);Di2015NewLinetop.Parameters.AddWithValue("@status", chk1);Di2015NewLinetop.Parameters.AddWithValue("@subtotal", subtotal);Di2015NewLinetop.Parameters.AddWithValue("@tax", text);Di2015NewLinetop.Parameters.AddWithValue("@total", total);Di2015NewLinetop.Parameters.AddWithValue("@date", date);Di2015NewLine
19789103Di2015UniqueSeparatorMethodInvoker
19789103Di2015UniqueSeparatorInvoke((MethodInvoker)delegateDi2015NewLine{Di2015NewLine    CF.ProgressBar.Value += e.ProgressPercentage; Di2015NewLineDi2015NewLine    if ( e.UserState != null )Di2015NewLine    { Di2015NewLine        CF.ProgressStatusLabel.Text = "Uploading " + e.UserState; Di2015NewLine    }Di2015NewLine}};Di2015NewLine
19789198Di2015UniqueSeparatorMyVirtualizingStackPanel
19789198Di2015UniqueSeparatorassembly=XXX
19789198Di2015UniqueSeparatorMyVirtualizingStackPanel
19789259Di2015UniqueSeparatorpublic class FileController : BaseControllerDi2015NewLine{Di2015NewLine    private IService _childService;Di2015NewLineDi2015NewLine    public IService ChildService { set { _childService = value; } }Di2015NewLineDi2015NewLine    public JsonResult GetAll() { /*lot of code*/}Di2015NewLine    public FileResult Download(int id) { /*lot of code*/}Di2015NewLine    public JsonResult Post() { /*lot of code*/}Di2015NewLine    public JsonResult Delete(IService childService) { /*lot of code*/}Di2015NewLine}Di2015NewLine
19789259Di2015UniqueSeparatorControllerFactory
19789259Di2015UniqueSeparatorDefaultControllerFactory
19789259Di2015UniqueSeparatorGlobal.asax
19789259Di2015UniqueSeparatorControllerFactory
19789259Di2015UniqueSeparatorCreateController
19789322Di2015UniqueSeparatorPOST
19789322Di2015UniqueSeparator/Admin/BeginCopyingData/
19789358Di2015UniqueSeparatorprivate static void regexString()Di2015NewLine{Di2015NewLine    string myString = "[{\\"ta_id\\":97497,\\"partner_id\\":\\"229547\\",\\"partner_url\\":\\"http://partner.com/deeplink/to/229547\\"},{\\"ta_id\\":97832,\\"partner_id\\":\\"id34234\\",\\"partner_url\\":\\"http://partner.com/deeplink/to/id34234\\"}]";Di2015NewLineDi2015NewLine    string[] stringList = Regex.Split(myString, "},{");Di2015NewLineDi2015NewLine    for (int i=0; i<stringList.Length ;i++)Di2015NewLine    {Di2015NewLine        stringList[i] = Regex.Split(Regex.Split(stringList[i], "partner_id\\\\\\":\\\\\\"")[1], "\\\\\\",\\\\\\"partner_url\\\\\\"")[0];Di2015NewLine    }Di2015NewLine}Di2015NewLine
19789431Di2015UniqueSeparatorCanContentScroll
19789431Di2015UniqueSeparatorScrollViewer
19789431Di2015UniqueSeparatorStackPanel
19789431Di2015UniqueSeparatorStackPanel
19789431Di2015UniqueSeparatorButton
19789431Di2015UniqueSeparatorStackPanel
19789431Di2015UniqueSeparator<ScrollViewer>Di2015NewLine    <StackPanel>Di2015NewLine        <StackPanel>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40"/>Di2015NewLine            <Button Height="40" Background="Yellow"/>Di2015NewLine        </StackPanel>Di2015NewLineDi2015NewLine        <StackPanel>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Red"/>Di2015NewLine            <Button Height="40" Background="Green"/>Di2015NewLine        </StackPanel>Di2015NewLine    </StackPanel>Di2015NewLine</ScrollViewer>Di2015NewLine
19789432Di2015UniqueSeparatorHttpPost
19789432Di2015UniqueSeparatorid
19789432Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic ActionResult CreateEntity(int? officeCodeId)Di2015NewLineDi2015NewLine[HttpPost]Di2015NewLinepublic ActionResult CreateEntity(int officeCodeId, EditViewModel model);Di2015NewLine
19789505Di2015UniqueSeparatorController
19789505Di2015UniqueSeparator    public ActionResult DisplayPic()Di2015NewLine    {Di2015NewLine      Picture picture = new Picture();Di2015NewLine      picture.PicPath = GetImagePath();  //Logic to get the image path as stringDi2015NewLine      return View(picture);Di2015NewLine     }Di2015NewLine
19789505Di2015UniqueSeparatorView
19789505Di2015UniqueSeparator@model YourNameSpace.Model.PictureDi2015NewLineDi2015NewLine<img src= "@Url.Content(Model.PicPath)" alt="Image"/>Di2015NewLine
19789609Di2015UniqueSeparatorPage_Load
19789609Di2015UniqueSeparatorif (ScriptManager.GetCurrent(Page).IsInAsyncPostBack == false) {Di2015NewLine}Di2015NewLine
19789612Di2015UniqueSeparatorComboBox
19789612Di2015UniqueSeparatorContentPresenter
19789612Di2015UniqueSeparator<ContentPresenter x:Name="contentPresenter" Di2015NewLine    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Di2015NewLine    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"Di2015NewLine    Content="{TemplateBinding SelectionBoxItem}" Di2015NewLine    ... />Di2015NewLine
19789612Di2015UniqueSeparatorContentPresenter
19789612Di2015UniqueSeparatorContent
19789722Di2015UniqueSeparator.zip64
19789722Di2015UniqueSeparator64
19789722Di2015UniqueSeparator.zip
19789809Di2015UniqueSeparatorList<T>.IsNullOrEmpty()
19789809Di2015UniqueSeparatorpublic static class ListExtDi2015NewLine{Di2015NewLine    public static bool IsNullOrEmpty<T>(this List<T> self)Di2015NewLine    {Di2015NewLine        return (self == null) || (self.Count == 0);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19789809Di2015UniqueSeparatornull
19789809Di2015UniqueSeparatorself
19789809Di2015UniqueSeparatorList<int> lint = null;Di2015NewLineDi2015NewLineif (lint.IsNullOrEmpty())Di2015NewLine{Di2015NewLine    // ...Di2015NewLine
19789809Di2015UniqueSeparatorlint
19789809Di2015UniqueSeparatornull
19789809Di2015UniqueSeparator(self == null)
19789809Di2015UniqueSeparatorfalse
19789809Di2015UniqueSeparatorNullReferenceException
19789814Di2015UniqueSeparatorSample Code
19789814Di2015UniqueSeparatorpublic override void Install(IDictionary stateSaver)Di2015NewLine{Di2015NewLine    base.Install(stateSaver);Di2015NewLineDi2015NewLine    Process process = new Process();Di2015NewLineDi2015NewLine    ProcessStartInfo startInfo = new ProcessStartInfo();Di2015NewLine    process.StartInfo = startInfo;Di2015NewLineDi2015NewLine    startInfo.UseShellExecute = false;Di2015NewLine    startInfo.RedirectStandardError = true;Di2015NewLine    startInfo.FileName = "ConsoleApp.exe";Di2015NewLine    process.Start();Di2015NewLine}Di2015NewLine
19790047Di2015UniqueSeparatorA0h 45h 11h 83h
19790047Di2015UniqueSeparator69d 17d 160d 131d
19790067Di2015UniqueSeparatorpublic static bool IsAjaxRequest(this HttpRequest request)Di2015NewLine{Di2015NewLine    if (request == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException("request");Di2015NewLine    }Di2015NewLineDi2015NewLine    return (request["X-Requested-With"] == "XMLHttpRequest") || ((request.Headers != null) && (request.Headers["X-Requested-With"] == "XMLHttpRequest"));Di2015NewLine}Di2015NewLine
19790067Di2015UniqueSeparatorif(request.IsAjaxRequest())Di2015NewLine
19790179Di2015UniqueSeparator    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        if (ConfigHandler.Instance.Minimized)Di2015NewLine            WindowState = System.Windows.WindowState.Minimized;Di2015NewLine        this.StateChanged += MainWindow_StateChanged;Di2015NewLine    }Di2015NewLine    void MainWindow_StateChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (ConfigHandler.Instance.Fullscreen)Di2015NewLine            WindowState = System.Windows.WindowState.Maximized;Di2015NewLine        this.StateChanged -= MainWindow_StateChanged;//to prevent further effectDi2015NewLine    }Di2015NewLine
19790187Di2015UniqueSeparatorcustomerId
19790187Di2015UniqueSeparatorMemberUserId
19790187Di2015UniqueSeparatorbasePage
19790187Di2015UniqueSeparatorint customerId = MemberUserId;Di2015NewLine
19790187Di2015UniqueSeparatorthis
19790232Di2015UniqueSeparatorStepArgumentTransformation
19790232Di2015UniqueSeparator[When(@"you add the sum of (.*)")]Di2015NewLinepublic void WhenYouAddTheSumOf(int[] p1)Di2015NewLine{Di2015NewLine    ScenarioContext.Current.Pending();Di2015NewLine}Di2015NewLineDi2015NewLine[StepArgumentTransformation(@"(\\d+(?:,\\d+)*)")]Di2015NewLinepublic int[] IntArray(string intCsv)Di2015NewLine{Di2015NewLine    return intCsv.Split(',').Select(int.Parse).ToArray();Di2015NewLine}Di2015NewLine
19790232Di2015UniqueSeparator(\\d+(?:,\\d+)*)
19790232Di2015UniqueSeparator.*
19790266Di2015UniqueSeparatorHttpContext
19790266Di2015UniqueSeparatorIUserContext
19790279Di2015UniqueSeparatorclass CableComparer : IEqualityComparer<Cable>Di2015NewLine{Di2015NewLine    public bool Equals(Cable x, Cable y)Di2015NewLine    {Di2015NewLine        return (x.CablePropertyId == y.CablePropertyId && ...);Di2015NewLine    }Di2015NewLineDi2015NewLine    public int GetHashCode(Cable x) // If you won't create a valid GetHashCode based on values you compare on, Linq won't work properlyDi2015NewLine    {Di2015NewLine        uncheckedDi2015NewLine        {Di2015NewLine            int hash = 17;Di2015NewLine            hash = hash * 23 + x.CablePropertyID;Di2015NewLine            hash = hash * 23 + ...Di2015NewLine        }Di2015NewLine        return hash;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevar diffCables = sourceCables.Except(destinationCables, new CableComparer());Di2015NewLine
19790279Di2015UniqueSeparatorToList()
19790279Di2015UniqueSeparatorIEnumerable
19790279Di2015UniqueSeparatorToList()
19790279Di2015UniqueSeparatorGetHashCode()
19790279Di2015UniqueSeparatorGetHashCode()
19790305Di2015UniqueSeparatorasync void
19790305Di2015UniqueSeparatorProcessRequestMessage
19790305Di2015UniqueSeparatorasync void
19790305Di2015UniqueSeparatorasync void
19790305Di2015UniqueSeparatorFrameworkTaskBase
19790305Di2015UniqueSeparatorpublic class FrameworkTestBase: FrameworkBaseDi2015NewLine{Di2015NewLine  protected abstract Task ProcessRequestMessageAsync();Di2015NewLine  protected override sealed void ProcessRequestMessage()Di2015NewLine  {Di2015NewLine    ProcessRequestMessageAsync().ContinueWith(t =>Di2015NewLine    {Di2015NewLine      if (t.IsFaulted || t.IsCanceled)Di2015NewLine        SetResponseCode(-1);Di2015NewLine      elseDi2015NewLine        SetResponseCode(0);Di2015NewLine    });Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClass: FrameworkBaseDi2015NewLine{Di2015NewLine  protected override async Task ProcessRequestMessageAsync()Di2015NewLine  {Di2015NewLine    //await somethingDi2015NewLine  }Di2015NewLine}Di2015NewLine
19790305Di2015UniqueSeparatorasync void
19790305Di2015UniqueSeparatorpublic class FrameworkTestBase: FrameworkBaseDi2015NewLine{Di2015NewLine  protected abstract Task ProcessRequestMessageAsync();Di2015NewLine  protected override sealed async void ProcessRequestMessage()Di2015NewLine  {Di2015NewLine    tryDi2015NewLine    {Di2015NewLine      await ProcessRequestMessageAsync();Di2015NewLine      SetResponseCode(0);Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine      SetResponseCode(-1);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
19790412Di2015UniqueSeparatorawait
19790412Di2015UniqueSeparatorasync
19790412Di2015UniqueSeparatorawait
19790412Di2015UniqueSeparatorSynchronizationContext
19790412Di2015UniqueSeparatornull
19790412Di2015UniqueSeparatorTaskScheduler
19790412Di2015UniqueSeparatorSynchronizationContext
19790412Di2015UniqueSeparatorStaTaskScheduler
19790412Di2015UniqueSeparatorawait
19790412Di2015UniqueSeparatorStaTaskScheduler
19790412Di2015UniqueSeparatorStaTaskScheduler
19790412Di2015UniqueSeparatorStaTaskScheduler
19790412Di2015UniqueSeparator1
19790413Di2015UniqueSeparator object obj = property.GetValue(this, null);  Di2015NewLine
19790413Di2015UniqueSeparatorobject obj = property.GetValue(currentObject, null);Di2015NewLine
19790413Di2015UniqueSeparatorGetValue
19790413Di2015UniqueSeparatorthis
19790413Di2015UniqueSeparatorthis
19790524Di2015UniqueSeparator[TestClass]Di2015NewLinepublic class UnitTest1Di2015NewLine{Di2015NewLine    public Expression<Predicate<T>> GetFilterPredicate<T, R>(Expression<Func<T, R>> selector, FilterOps operand, R value)Di2015NewLine    {Di2015NewLine        var parameter = selector.Parameters[0];Di2015NewLineDi2015NewLine        var left = selector.Body;Di2015NewLine        var right = Expression.Constant(value);Di2015NewLineDi2015NewLine        var binaryExpression = Expression.MakeBinary(operand.ToExpressionType(), left, right);Di2015NewLine        return Expression.Lambda<Predicate<T>>(binaryExpression, parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public void TestMethod1()Di2015NewLine    {Di2015NewLine        var p1 = this.GetFilterPredicate((User u) => u.Birthday.TimeOfDay.Hours, FilterOps.LessThan, 12);Di2015NewLine        var p2 = this.GetFilterPredicate((User u) => u.Size, FilterOps.Equal, 180);Di2015NewLineDi2015NewLine        var user = new User() { Birthday = new DateTime(2000, 1, 1), Size = 180 };Di2015NewLineDi2015NewLine        Assert.IsTrue(p1.Compile()(user));Di2015NewLine        Assert.IsTrue(p2.Compile()(user));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum FilterOpsDi2015NewLine{Di2015NewLine    GreaterThan, LessThan, EqualDi2015NewLine}Di2015NewLinepublic static class MyExtensionsDi2015NewLine{Di2015NewLine    public static ExpressionType ToExpressionType(this FilterOps operand)Di2015NewLine    {Di2015NewLine        switch (operand)Di2015NewLine        {Di2015NewLine            case FilterOps.GreaterThan: return ExpressionType.GreaterThan;Di2015NewLine            case FilterOps.LessThan: return ExpressionType.LessThan;Di2015NewLine            case FilterOps.Equal: return ExpressionType.Equal;Di2015NewLine            default: throw new NotSupportedException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class User { public DateTime Birthday { get; set; } public int Size { get; set; } }Di2015NewLine
19790561Di2015UniqueSeparator\\W*
19790561Di2015UniqueSeparator[A-Z]\\s*(\\d{2}\\s+){6}Di2015NewLine
19790561Di2015UniqueSeparator\\s+
19790561Di2015UniqueSeparator[A-Z]\\s*(\\d{2}(?:\\s+\\d{2}){5})Di2015NewLine
19790561Di2015UniqueSeparator(?...)
19790561Di2015UniqueSeparator\\s*
19790561Di2015UniqueSeparator[A-Z]
19790627Di2015UniqueSeparatorcurrentFrame
19790627Di2015UniqueSeparatorsourceRect = new Rectangle(currentFrame * spriteWidth, 0, spriteWidth, spriteHeight)Di2015NewLine
19790627Di2015UniqueSeparatorSpriteBatch.Draw (Texture2D, Position, sourceRect, Color)Di2015NewLine
19790648Di2015UniqueSeparatorusing x<T> = List<T>
19790878Di2015UniqueSeparatorProperties
19790878Di2015UniqueSeparatorProperties
19790878Di2015UniqueSeparatorResources
19790934Di2015UniqueSeparatorObjectStateManager
19790934Di2015UniqueSeparatorvar contextAdapter = ((IObjectContextAdapter)dbcontext);            Di2015NewLinecontextAdapter.ObjectContextDi2015NewLine          .ObjectStateManagerDi2015NewLine          .ObjectStateManagerChanged += ObjectStateManagerChanged;Di2015NewLine
19791012Di2015UniqueSeparator.Any()
19791012Di2015UniqueSeparatorif (!Fruits.Any(f => fruit.Weight != null && f.Weight.Equals(fruit.Weight)))Di2015NewLine   Fruits.Add(fruit);Di2015NewLine
19791048Di2015UniqueSeparatorViewState
19791048Di2015UniqueSeparatorMonth
19791048Di2015UniqueSeparatorprotected int MonthDi2015NewLine{Di2015NewLine    get { return this.ViewState["Month"] != null ? (int)this.ViewState["Month"] : 0; }Di2015NewLine    set { this.ViewState["Month"] = value; }Di2015NewLine}Di2015NewLine
19791116Di2015UniqueSeparatorfilename:stream
19791116Di2015UniqueSeparatorZone.Identifier:$DATA
19791116Di2015UniqueSeparatornotepad filename:zone.identifier
19791116Di2015UniqueSeparator[ZoneTransfer]Di2015NewLineZoneId=3Di2015NewLine
19791116Di2015UniqueSeparator:
19791219Di2015UniqueSeparatorpublic abstract override int GetHashCode();Di2015NewLine
19791309Di2015UniqueSeparatorSqlDependency
19791309Di2015UniqueSeparatorSqlDependency
19791309Di2015UniqueSeparatorLinq
19791309Di2015UniqueSeparatorSqlDependency
19791309Di2015UniqueSeparatorStart()
19791309Di2015UniqueSeparatorStop()
19791309Di2015UniqueSeparatorSqlDependency
19791309Di2015UniqueSeparatorStart()
19791309Di2015UniqueSeparatorStop()
19791309Di2015UniqueSeparatorUPDATE
19791309Di2015UniqueSeparatorSET TRANSACTION ISOLATION ...
19791309Di2015UniqueSeparatorClose()
19791309Di2015UniqueSeparatorOpen()
19791309Di2015UniqueSeparatorOpen()
19791355Di2015UniqueSeparatorObservableCollection
19791355Di2015UniqueSeparatorthis.Foos = new ObservableCollection(modelAAA.Foos);Di2015NewLine
19791355Di2015UniqueSeparatorINotifyCollectionChanged
19791493Di2015UniqueSeparatorlowerThanCount
19791493Di2015UniqueSeparatorlength
19791493Di2015UniqueSeparatorunit
19791493Di2015UniqueSeparator0.2
19791493Di2015UniqueSeparator0.5
19791493Di2015UniqueSeparator0
19791493Di2015UniqueSeparatorlowerThanCount = 10
19791493Di2015UniqueSeparatorlength = 20
19791493Di2015UniqueSeparatordouble result = (10 / 20) * 100Di2015NewLine
19791493Di2015UniqueSeparator(10 / 20) = 0.5 * 100Di2015NewLine
19791493Di2015UniqueSeparator0.5
19791493Di2015UniqueSeparator0
19791493Di2015UniqueSeparator0 * 100 = 0;Di2015NewLine
19791493Di2015UniqueSeparatordouble percentile = (double)lowerThanCount / length * 100 Di2015NewLine
19791493Di2015UniqueSeparatorlowerThanCount
19791493Di2015UniqueSeparatorlength
19791493Di2015UniqueSeparatorstring[] n = Interaction.InputBox("Enter the data set. The numbers do not have to  be sorted.")Di2015NewLine                        .Split(',');Di2015NewLineIList<Single> x = n.Select(n => Single.Parse(n))Di2015NewLine                   .OrderBy(x => x);Di2015NewLineSingle score = Single.Parse(Interaction.InputBox("Enter the number."));Di2015NewLineIList<Single> lowerThan = x.Where(s => s < score);Di2015NewLineSingle percentile = (Single)lowerThan.Count / x.Count;Di2015NewLineMessageBox.Show(percentile.ToString("%"));Di2015NewLine
19791539Di2015UniqueSeparatorGetIsNetworkAvailable
19791539Di2015UniqueSeparatorNetworkInterface.NetworkInterfaceType == NetworkInterfaceType.NoneDi2015NewLine
19791661Di2015UniqueSeparatorvoid Run()Di2015NewLine{Di2015NewLine    // list of actions, defines the order of executionDi2015NewLine    var actions = new List<Action<CancellationToken>>() {Di2015NewLine       ct => Step1(ct),Di2015NewLine       ct => Step2(ct),Di2015NewLine       ct => Step3(ct) Di2015NewLine    };Di2015NewLineDi2015NewLine    // execute actions and check for cancellation tokenDi2015NewLine    foreach(var action in actions)Di2015NewLine    {Di2015NewLine        action(cancellationToken);Di2015NewLineDi2015NewLine        if (cancellationToken.IsCancellationRequested)Di2015NewLine            return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    return true;Di2015NewLine}Di2015NewLine
19791661Di2015UniqueSeparatorvar actions = new List<Action>() {Di2015NewLine    Step1, Step2, Step3Di2015NewLine};Di2015NewLine
19791749Di2015UniqueSeparatorLeftWidgetEnabled
19791749Di2015UniqueSeparatorViewModel.MainViewModel
19791749Di2015UniqueSeparatorprivate bool leftWidgetEnabled;Di2015NewLinepublic bool LeftWidgetEnabledDi2015NewLine{Di2015NewLine    get { return leftWidgetEnabled; }Di2015NewLine    set { SetField(ref leftWidgetEnabled, value, "LeftWidgetEnabled"); }Di2015NewLine}Di2015NewLine
19791749Di2015UniqueSeparatorMainViewModel
19791749Di2015UniqueSeparatorMainViewModel
19791749Di2015UniqueSeparatorViewModelBase
19791749Di2015UniqueSeparatorViewModelBase
19791749Di2015UniqueSeparatorpublic class MainViewModel : ViewModelBaseDi2015NewLine{        Di2015NewLine    private bool leftWidgetEnabled;Di2015NewLine    public bool LeftWidgetEnabledDi2015NewLine    {Di2015NewLine        get { return leftWidgetEnabled; }Di2015NewLine        set { SetField(ref leftWidgetEnabled, value, "LeftWidgetEnabled"); }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ViewModelBase : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    // boiler-plateDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLine        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine    protected bool SetField<T>(ref T field, T value, string propertyName)Di2015NewLine    {Di2015NewLine        if (EqualityComparer<T>.Default.Equals(field, value)) return false;Di2015NewLine        field = value;Di2015NewLine        OnPropertyChanged(propertyName);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19791749Di2015UniqueSeparator<ContentPresenter IsEnabled="{Binding Path=LeftWidgetEnabled}" />Di2015NewLine
19791749Di2015UniqueSeparatorDataContext
19791749Di2015UniqueSeparatorUserControl
19791749Di2015UniqueSeparatorContentPresenter
19791749Di2015UniqueSeparatorMainViewModel
19791749Di2015UniqueSeparator<UserControl Di2015NewLine    x:Class="MyApplication.UserControl1"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine    xmlns:viewModels="**PATH TO YOUR VIEWMODELS-ASSEMBLY**"Di2015NewLine    mc:Ignorable="d">Di2015NewLineDi2015NewLine<UserControl.DataContext>Di2015NewLine    <viewModels:MainViewModel />Di2015NewLine</UserControl.DataContext>Di2015NewLineDi2015NewLine    <ContentPresenter IsEnabled="{Binding Path=LeftWidgetEnabled}" />Di2015NewLine</UserControl>Di2015NewLine
19791800Di2015UniqueSeparatorBinding
19791800Di2015UniqueSeparatorBinding
19791800Di2015UniqueSeparator{Binding, Converter={StaticResource ZoomConverter}}Di2015NewLine
19791800Di2015UniqueSeparator{Binding Converter={StaticResource ZoomConverter}}Di2015NewLine
19791906Di2015UniqueSeparatorWebMsgBox.Show("Your message here");
19792179Di2015UniqueSeparatorclass GlobalsDi2015NewLine{Di2015NewLine    internal static string str_variable;Di2015NewLine}Di2015NewLine
19792179Di2015UniqueSeparatorGlobals.str_variable = Textbox1.Text; Di2015NewLine
19792179Di2015UniqueSeparatorstring temp = Globals.str_variable;Di2015NewLine
19792238Di2015UniqueSeparatorPropertyInfo
19792238Di2015UniqueSeparatorPropertyInfo propertyInfo = type1.GetProperties().FirstOrDefault(p=> p.Name == "Remark");Di2015NewLineif (propertyInfo != null)Di2015NewLine{Di2015NewLine    var attributes = propertyInfo.GetCustomAttributes(true);Di2015NewLine}Di2015NewLine
19792372Di2015UniqueSeparatorNavigationService service;Di2015NewLinepublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    service = mainframe.NavigationService;Di2015NewLine    service.Navigate("Page2.xaml");Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Button_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    if (service.CanGoBack)Di2015NewLine        service.GoBack();Di2015NewLine}Di2015NewLine
19792407Di2015UniqueSeparatormyDictionary.ContainsKey(uuidString)
19792407Di2015UniqueSeparatorif(myDictionary.ContainsKey(uuidString))Di2015NewLine
19792407Di2015UniqueSeparatorif(myDictionary.ContainsKey(messages[1])Di2015NewLine
19792477Di2015UniqueSeparatorMicrosoft.Office.Interop.Word.WdRelativeHorizontalPosition
19792477Di2015UniqueSeparatorMicrosoft.Office.Interop.Word.WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage;
19792531Di2015UniqueSeparatorList<T>
19792531Di2015UniqueSeparatorFindIndex
19792531Di2015UniqueSeparatorint indexOfPartial = PartialValuesDi2015NewLine    .FindIndex(partialPrefix => wholeValue.StartsWith(partialPrefix));Di2015NewLine
19792531Di2015UniqueSeparatorint indexOfPartial = PartialValuesDi2015NewLine  .Select((partialPrefix , index) => new{ partialPrefix , index })Di2015NewLine  .Where(x => wholeValue.StartsWith(x.partialPrefix))Di2015NewLine  .Select(x => x.index);Di2015NewLine
19792566Di2015UniqueSeparatorprivate IEnumerable<TreeNode> Flatten(TreeView treeView)Di2015NewLine{Di2015NewLine    Queue<TreeNode> nodes = new Queue<TreeNode>();Di2015NewLine    foreach (TreeNode node in treeView.Nodes)Di2015NewLine        nodes.Enqueue(node);Di2015NewLineDi2015NewLine    while (nodes.Any())Di2015NewLine    {Di2015NewLine        var current = nodes.Dequeue();Di2015NewLine        foreach (TreeNode subNode in current.Nodes)Di2015NewLine            nodes.Enqueue(subNode);Di2015NewLine        yield return current;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19792566Di2015UniqueSeparatorFlatten(treeView1)Di2015NewLine    .Cast<CustomFruitCrateNode>()Di2015NewLine    .GroupBy(n => n.FruitName)Di2015NewLine    .SelectMany(g => g.Skip(1))Di2015NewLine    .ToList()Di2015NewLine    .ForEach(n => n.Remove());Di2015NewLine
19792591Di2015UniqueSeparatorDateTime
19792591Di2015UniqueSeparatorenum
19792591Di2015UniqueSeparatorint
19792591Di2015UniqueSeparatorDays
19792591Di2015UniqueSeparatorTimeSpan
19792591Di2015UniqueSeparatorstatic Working[] DaysArray = { Working.Off, Working.Off, Working.Off, Working.Off, Working.Off, Working.Off, Working.Off, Working.Nights, Working.Nights, Working.Nights, Working.Nights, Working.Off, Working.Off, Working.Off, Working.Days, Working.Days, Working.Days, Working.Off, Working.Nights, Working.Nights, Working.Nights, Working.Off, Working.Off, Working.Off, Working.Days, Working.Days, Working.Days, Working.Days };Di2015NewLinepublic enum WorkingDi2015NewLine{Di2015NewLine    Off,Di2015NewLine    Days,Di2015NewLine    Nights,Di2015NewLine}Di2015NewLinepublic Working GetDayNightOff(DateTime cycleStart, DateTime day)Di2015NewLine{Di2015NewLine    var days = (day - cycleStart).Days;Di2015NewLine    days %= DaysArray.Length;Di2015NewLine    if (days < 0)Di2015NewLine        days += DaysArray.Length;Di2015NewLine    return DaysArray[days];Di2015NewLine}Di2015NewLine
19792591Di2015UniqueSeparatordays
19792591Di2015UniqueSeparatorday
19792591Di2015UniqueSeparatorcycleStart
19792600Di2015UniqueSeparatorarterySignalR/ping
19792691Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Description of MethodDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="GroupID">Description of GroupID Parameter</param>Di2015NewLine    /// <returns>Description of return value</returns>Di2015NewLine
19792692Di2015UniqueSeparator==
19792692Di2015UniqueSeparatorstring
19792791Di2015UniqueSeparatorRequest.CreateResponse<string>(HttpStatusCode statusCode, T value)
19792791Di2015UniqueSeparatorvalue
19792791Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ResponseMessageResult Post(Thing thing)Di2015NewLine{Di2015NewLine    var content = "\\r";Di2015NewLine    var httpResponseMessage = new HttpResponseMessage(HttpStatusCode.Accepted) {Di2015NewLine      RequestMessage = Request,Di2015NewLine      Content = new StringContent(content)Di2015NewLine    };Di2015NewLine    return ResponseMessage(httpResponseMessage);Di2015NewLine}Di2015NewLine
19792893Di2015UniqueSeparatorpublic class AmmoCounter : MonoBehaviour {Di2015NewLineDi2015NewLine    public int ammo;Di2015NewLine    private Pistol _pistol = GetComponentInChildren<Pistol>();     Di2015NewLineDi2015NewLine    void Update () {Di2015NewLine        ammo = _pistol.ammoMagazine;Di2015NewLine        guiText.text = "Pistol: " + ammo + "/7";Di2015NewLine    }Di2015NewLine}Di2015NewLine
19792915Di2015UniqueSeparatorpublic class MyTableDi2015NewLine{Di2015NewLine  [Key, Column(Order = 0)]Di2015NewLine  public string SomeId { get; set; }Di2015NewLineDi2015NewLine  [Key, Column(Order = 1)]Di2015NewLine  public int OtherId { get; set; }Di2015NewLine}Di2015NewLine
19792973Di2015UniqueSeparatorExpression<Func<T, string>>
19792973Di2015UniqueSeparatorExpression<Func<T, bool>>
19792973Di2015UniqueSeparatorpublic static Expression<Func<T, bool>> GetContainsExpression<T>(Expression<Func<T, string>> prop, string searchString)Di2015NewLine{Di2015NewLine    var method = typeof(string).GetMethod("Contains", new[] { typeof(string) });Di2015NewLine    var someValue = Expression.Constant(searchString, typeof(string));Di2015NewLine    var containsMethodExp = Expression.Call(prop.Body, method, someValue);Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<T, bool>>(containsMethodExp, prop.Parameters[0]);Di2015NewLine}Di2015NewLine
19792973Di2015UniqueSeparatorvar predicates = new List<Expression<Func<Customer, bool>>>();Di2015NewLinepredicates.Add(GetContainsExpression((Customer x) => x.Name, this.Name));Di2015NewLinepredicates.Add(GetContainsExpression((Customer x) => x.Description, this.Description));Di2015NewLine
19793043Di2015UniqueSeparatorif(myDictonary.ContainsKey(messages[1]))Di2015NewLine{Di2015NewLine  Value1 = messageCount;Di2015NewLine  Value2 = messageCount;Di2015NewLine  Value3 = messageCount;Di2015NewLine  Value4 = messageCount;Di2015NewLine  Value5 = messageCount;Di2015NewLine  Value6 = messageCount;Di2015NewLine}Di2015NewLine
19793043Di2015UniqueSeparatorif(myDictonary.ContainsKey(messages[1]))Di2015NewLine{Di2015NewLine  myDictonary[messages[1]] = messageCount;Di2015NewLine}Di2015NewLine
19793043Di2015UniqueSeparatormessages[1]
19793190Di2015UniqueSeparatorTemplateField
19793190Di2015UniqueSeparatorHiddenField
19793190Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:HiddenField ID="HiddenFieldDifferentUsers" Value='<%# Eval("DifferentUsers") %>' runat="server" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
19793190Di2015UniqueSeparatorprotected void hoursReportGridView_OnRowDataBound(Object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine    {Di2015NewLine        HiddenField theHiddenField = e.Row.FindControl("HiddenFieldDifferentUsers") as HiddenField;Di2015NewLineDi2015NewLine        // Check that we successfully found hidden field before using itDi2015NewLine        if(theHiddenField != null)Di2015NewLine        {Di2015NewLine            // Do something with hidden field here if you need toDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19793290Di2015UniqueSeparatorusing (var context = new WidgetContext())Di2015NewLine{Di2015NewLine    var selectedTypeIds = from t in SelectedWidgetTypesDi2015NewLine                          where t.SelectedDi2015NewLine                          select t.Id;Di2015NewLineDi2015NewLine    var widgets = from d in context.WidgetsDi2015NewLine                  where selectedTypeIds.Contains(d.WidgetTypeId)                 Di2015NewLine                        // other search criteriaDi2015NewLine                  select d;Di2015NewLineDi2015NewLine    return widgets.ToList();Di2015NewLine}Di2015NewLine
19793316Di2015UniqueSeparatorNewRow
19793316Di2015UniqueSeparatorAdd
19793316Di2015UniqueSeparatorDataRow
19793316Di2015UniqueSeparatorDataRow newRow = Manager.achievementsMine.NewRow();Di2015NewLinenewRow.SetField<int>("CT_Q", count);Di2015NewLinenewRow.SetField<DateTime>("CMPL_D", DateTime.Now);Di2015NewLinenewRow.SetField<string>("USER_LAN_I", Manager.userID);Di2015NewLinenewRow.SetField<string>("ACHV_I", ACHV_I);Di2015NewLineManager.achievementsMine.Rows.Add(newRow);Di2015NewLine
19793316Di2015UniqueSeparatorDataRowColection.Add
19793316Di2015UniqueSeparatorDataRow newRow = Manager.achievementsMine.Rows.Add();Di2015NewLine// you don't need to add this row since it's already added.Di2015NewLine
19793316Di2015UniqueSeparatorAcceptChanges
19793316Di2015UniqueSeparatorAcceptChanges
19793316Di2015UniqueSeparatorRowState
19793316Di2015UniqueSeparatorDataAdapter
19793316Di2015UniqueSeparatorDataAdapter
19793316Di2015UniqueSeparatorUpdate
19793443Di2015UniqueSeparator.Load()
19793443Di2015UniqueSeparator.LoadHtml()
19793443Di2015UniqueSeparatorHtmlWeb website = new HtmlWeb();Di2015NewLineHtmlDocument rootDocument = web.Load("http://www.site.com");Di2015NewLine
19793457Di2015UniqueSeparatorcatch
19793548Di2015UniqueSeparatorConvert.ToInt64((DateTime.UtcNow- new DateTime(1970,1,1,0,0,0,DateTimeKind.Utc)).TotalMilliseconds)Di2015NewLine
19793690Di2015UniqueSeparatorBindingOperations.SetBinding
19793690Di2015UniqueSeparatorBindingOperations.SetBinding(this, myProperty, b);Di2015NewLine
19793690Di2015UniqueSeparatorthis
19793690Di2015UniqueSeparatorDependencyObject
19793690Di2015UniqueSeparatormyProperty
19793702Di2015UniqueSeparatorNumListValues / 10
19793702Di2015UniqueSeparatorTRUNCATE TABLE
19793702Di2015UniqueSeparatorDELETE FROM ...
19793704Di2015UniqueSeparatorSum
19793704Di2015UniqueSeparatorCount()
19793704Di2015UniqueSeparatorPosts
19793704Di2015UniqueSeparatorStatistic
19793704Di2015UniqueSeparatordb.ProjectsDi2015NewLine    .Select(x => new StatisticDi2015NewLine    {Di2015NewLine        Posts = (int?)x.Members.Sum(m => (int?)m.Posts.Count())Di2015NewLine    })Di2015NewLine
19793704Di2015UniqueSeparator.Value
19793704Di2015UniqueSeparator.Value
19793704Di2015UniqueSeparatordb.ProjectsDi2015NewLine    .Select(x => new StatisticDi2015NewLine    {Di2015NewLine        Posts = x.Members.Sum(m => (int?)m.Posts.Count()).ValueDi2015NewLine    })Di2015NewLine
19793718Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Create(Names name)Di2015NewLine{Di2015NewLine    var names = name.Split(new[] { '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine    foreach(var n in names) Di2015NewLine    {Di2015NewLine        unitofwork.Names.Insert(n);Di2015NewLine    }Di2015NewLineDi2015NewLine    unitofwork.save();Di2015NewLineDi2015NewLine    return RedirectToAction("Index");Di2015NewLine}Di2015NewLine
19793776Di2015UniqueSeparatoridentity
19793776Di2015UniqueSeparatoridentity
19793776Di2015UniqueSeparatorSqlBulkCopy
19793776Di2015UniqueSeparatorSystem.Data
19793776Di2015UniqueSeparatorSqlBulkCopy
19793776Di2015UniqueSeparatorSqlBulkCopyOptions.KeepIdentity
19793901Di2015UniqueSeparatorSqlDataAdapter
19793901Di2015UniqueSeparatorSQlDataReader
19793901Di2015UniqueSeparatorSqlDataAdapter
19793901Di2015UniqueSeparatorSqlDataReader
19794040Di2015UniqueSeparator    public async Task DoSomething()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Begin");Di2015NewLine        int i = await DoSomethingElse();Di2015NewLine        Console.WriteLine("End " + i);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Task<int> DoSomethingElse()Di2015NewLine    {Di2015NewLine        return new Task<int>(() =>Di2015NewLine        {Di2015NewLine            // do heavy workDi2015NewLine            Thread.Sleep(1000);Di2015NewLine            return 1;Di2015NewLine        });Di2015NewLineDi2015NewLine    }Di2015NewLine
19794040Di2015UniqueSeparatorpublic int DoSomethingElse
19794040Di2015UniqueSeparatorawait DoSomethingElse
19794040Di2015UniqueSeparatorawait
19794066Di2015UniqueSeparatorthreads
19794066Di2015UniqueSeparatorthreads
19794066Di2015UniqueSeparatorvar thread = new Thread(DoWork)Di2015NewLine{Di2015NewLine   Name = x.ToString()Di2015NewLine};Di2015NewLinereturn thread;Di2015NewLine
19794066Di2015UniqueSeparatorvar listOfThreads = threads.ToList();Di2015NewLine
19794105Di2015UniqueSeparatortable1
19794105Di2015UniqueSeparatorserial
19794105Di2015UniqueSeparatortable2
19794105Di2015UniqueSeparatortable1
19794105Di2015UniqueSeparatorproductnumber
19794105Di2015UniqueSeparatorupdate table2 set table2.productnumber =table1.productnumberDi2015NewLinefrom table2 inner join table1 on table2.serial = table1.serialDi2015NewLine
19794303Di2015UniqueSeparatorString.Format
19794357Di2015UniqueSeparatora += 5
19794357Di2015UniqueSeparatora = a + 5
19794357Di2015UniqueSeparator+=
19794357Di2015UniqueSeparatorx += y
19794357Di2015UniqueSeparatorx = x + y
19794357Di2015UniqueSeparatora
19794357Di2015UniqueSeparatora
19794357Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int a = 10;Di2015NewLine    a += 5;Di2015NewLine    Console.WriteLine(a);Di2015NewLine}Di2015NewLine
19794357Di2015UniqueSeparator.method private hidebysig static void  Main(string[] args) cil managedDi2015NewLine{Di2015NewLine  .entrypointDi2015NewLine  // Code size       14 (0xe)Di2015NewLine  .maxstack  2Di2015NewLine  .locals init ([0] int32 a)Di2015NewLine  IL_0000:  ldc.i4.s   10Di2015NewLine  IL_0002:  stloc.0Di2015NewLine  IL_0003:  ldloc.0Di2015NewLine  IL_0004:  ldc.i4.5Di2015NewLine  IL_0005:  addDi2015NewLine  IL_0006:  stloc.0Di2015NewLine  IL_0007:  ldloc.0Di2015NewLine  IL_0008:  call       void [mscorlib]System.Console::WriteLine(int32)Di2015NewLine  IL_000d:  retDi2015NewLine} // end of method Program::MainDi2015NewLine
19794357Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int a = 10;Di2015NewLine    a = a + 5;Di2015NewLine    Console.WriteLine(a);Di2015NewLine}Di2015NewLine
19794357Di2015UniqueSeparator.method private hidebysig static void  Main(string[] args) cil managedDi2015NewLine{Di2015NewLine  .entrypointDi2015NewLine  // Code size       14 (0xe)Di2015NewLine  .maxstack  2Di2015NewLine  .locals init ([0] int32 a)Di2015NewLine  IL_0000:  ldc.i4.s   10Di2015NewLine  IL_0002:  stloc.0Di2015NewLine  IL_0003:  ldloc.0Di2015NewLine  IL_0004:  ldc.i4.5Di2015NewLine  IL_0005:  addDi2015NewLine  IL_0006:  stloc.0Di2015NewLine  IL_0007:  ldloc.0Di2015NewLine  IL_0008:  call       void [mscorlib]System.Console::WriteLine(int32)Di2015NewLine  IL_000d:  retDi2015NewLine} // end of method Program::MainDi2015NewLine
19794474Di2015UniqueSeparatorcontains
19794474Di2015UniqueSeparatorList<String> AdminLocation= new List<String>();Di2015NewLineAdminLocation.Add("Location1");Di2015NewLineAdminLocation.Add("Location2");Di2015NewLineAdminLocation.Add("Location3");Di2015NewLineDi2015NewLineAdminLocation.Cast<string>().ToList()Di2015NewLineDi2015NewLineContactLocations = LocationsDi2015NewLine    .Where(l => l.Active == "Y").OrderBy(l => l.Name)Di2015NewLine    .Select(l => new Location { DbLocation = l, IsChecked = false, IsEnabled = AdminLocation.Contains(l.Name) })Di2015NewLine    .ToList();Di2015NewLineDi2015NewLinepublic class Location    {Di2015NewLine    public db.Location DbLocation { get; set; }Di2015NewLine    public Boolean IsChecked { get; set; }Di2015NewLine    public Boolean IsEnabled { get; set; }Di2015NewLine}Di2015NewLine
19794475Di2015UniqueSeparatorList
19794475Di2015UniqueSeparator[Browsable(false)]
19794475Di2015UniqueSeparatorCapacity
19794475Di2015UniqueSeparatorCount
19794475Di2015UniqueSeparatorPropertyGrid
19794488Di2015UniqueSeparatormodelBuilder.Entity<SchemaDictionary>()Di2015NewLine    .HasRequired(sd => sd.Schema)Di2015NewLine    .WithOptional(s => s.SchemaDictionary);Di2015NewLine
19794488Di2015UniqueSeparatorSchemaDictionary
19794488Di2015UniqueSeparatorSchema
19794488Di2015UniqueSeparatorHasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
19794488Di2015UniqueSeparatorSchemaDictionaryId
19794488Di2015UniqueSeparatorHasKey
19794488Di2015UniqueSeparatorSchemaId
19794488Di2015UniqueSeparatorSchemaDictionaryID
19794488Di2015UniqueSeparatorIsRequired()
19794495Di2015UniqueSeparatorWebRequest request = (HttpWebRequest)WebRequest.Create("https://yoururl");Di2015NewLinerequest.Headers.Add(HttpRequestHeader.Authorization, "Basic " + Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes("user:password")));Di2015NewLine
19794495Di2015UniqueSeparatorDelegatingHandler
19794495Di2015UniqueSeparatorHttpContext.CurrentPrincipal
19794495Di2015UniqueSeparatorDelegatingHandler
19794495Di2015UniqueSeparatorDelegatingHandler
19794495Di2015UniqueSeparatorActionFilterAttribute
19794495Di2015UniqueSeparatorDelegatingHandler
19794495Di2015UniqueSeparatorActionFilterAttribute
19794596Di2015UniqueSeparatorclass RelationDi2015NewLine{Di2015NewLine   Node Node;  // Node is another classDi2015NewLine   Tuple<Node, Relation> Relation;Di2015NewLine}Di2015NewLine
19794701Di2015UniqueSeparator1-(2*variable_value)Di2015NewLine
19794701Di2015UniqueSeparatorIn [3]: %timeit x= 1 if not random.randint(0,1) else -1 #if statementDi2015NewLine1000000 loops, best of 3: 1.31 us per loopDi2015NewLineDi2015NewLineIn [4]: %timeit x= 1-(2*random.randint(0,1)) #simple mathDi2015NewLine1000000 loops, best of 3: 1.32 us per loopDi2015NewLineDi2015NewLineIn [5]: %timeit x= [1,-1][random.randint(0,1)] #array lookupDi2015NewLine1000000 loops, best of 3: 1.41 us per loopDi2015NewLineDi2015NewLineIn [7]: %timeit x= arr[random.randint(0,1)]Di2015NewLine1000000 loops, best of 3: 1.31 us per loopDi2015NewLine
19794749Di2015UniqueSeparatorBar
19794749Di2015UniqueSeparatorFoo y = new Bar();Di2015NewLiney.Zed = 1;Di2015NewLiney.SetX(3);Di2015NewLineFunc(y);Di2015NewLine
19794749Di2015UniqueSeparatory.Zed == 2
19794749Di2015UniqueSeparatory.x == 2
19794749Di2015UniqueSeparatorFunc
19794974Di2015UniqueSeparatorprofiles.Concat()
19794974Di2015UniqueSeparatorArgumentNullException
19794974Di2015UniqueSeparatorList<Profile> profiles = new List<Profile>();Di2015NewLineprofiles.AddRange(assembly.GetTypes()Di2015NewLine           .Where(t => profileType.IsAssignableFrom(t) &&Di2015NewLine                  t.GetConstructor(Type.EmptyTypes) != null)Di2015NewLine           .Select(Activator.CreateInstance)Di2015NewLine           .Cast<Profile>());Di2015NewLine
19795092Di2015UniqueSeparatorWM_SYSCOMMAND
19795092Di2015UniqueSeparatorpublic partial class Form1 : Form {Di2015NewLine   public Form1(){Di2015NewLine     InitializeComponent();Di2015NewLine   }Di2015NewLine   bool shownModal;//This flag will be used to determine if there is someDi2015NewLine                  //modal dialog opening.Di2015NewLine   protected override void WndProc(ref Message m) {Di2015NewLine        if (m.Msg == 0x112)//WM_SYSCOMMANDDi2015NewLine        {Di2015NewLine            //SC_CLOSE = 0xf060  Di2015NewLine            if (m.WParam.ToInt32() == 0xf060 && Di2015NewLine                m.LParam.ToInt32() == 0 && shownModal)Di2015NewLine            {Di2015NewLine                //Your own code hereDi2015NewLine                //You can close the main form or close the modal dialogDi2015NewLine                Close();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        base.WndProc(ref m);            Di2015NewLine    }Di2015NewLine}Di2015NewLine
19795092Di2015UniqueSeparatorshownModal
19795115Di2015UniqueSeparator<add name="SqlWinApp.Properties.Settings.ConnectionString" connectionString="Server=215-6576;User ID=sa; Database=All-PurposeHandyman; Password=password"Di2015NewLine      providerName="System.Data.SqlClient" />Di2015NewLine
19795115Di2015UniqueSeparatorloadDdlTitles();
19795179Di2015UniqueSeparatorvar line = File.ReadAllLines(as400file).First(line => !string.IsNullOrWhitespace(line));Di2015NewLinestring replaced = Regex.Replace(line, @"[^\\u0000-\\u007F]", String.Empty);Di2015NewLine
19795231Di2015UniqueSeparatorsealed class SomethingChanged : INotifyPropertyChanged, IDisposeableDi2015NewLine{Di2015NewLine    private Something sth;Di2015NewLine    private string _oldName;Di2015NewLine    private System.Timers.Timer _timer;Di2015NewLineDi2015NewLine    public string Name { get { return sth.Name; }Di2015NewLineDi2015NewLine    public SomethingChanged(Something Sth, double polingInterval)Di2015NewLine    {Di2015NewLine        sth = Sth;Di2015NewLine        _oldName = Name;Di2015NewLine        _timer = new System.Timers.Timer();Di2015NewLine        _timer.AutoReset = false;Di2015NewLine        _timer.Interval = polingInterval;Di2015NewLine        _timer.Elapsed += timer_Elapsed;Di2015NewLine        _timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        if(_oldName != Name)Di2015NewLine        {Di2015NewLine           OnPropertyChanged("Name");Di2015NewLine           _oldName = Name;Di2015NewLine        }Di2015NewLineDi2015NewLine        //because we did _timer.AutoReset = false; we need to manually restart the timer.Di2015NewLine        _timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        var tmp = PropertyChanged; //Adding the temp variable prevents a NullRefrenceException in multithreaded environments.Di2015NewLine        if (tmp != null)Di2015NewLine            tmp(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        if(_timer != null)Di2015NewLine        {Di2015NewLine            _timer.Stop();Di2015NewLine            _timer.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19795263Di2015UniqueSeparatorString.Split Method (String[], StringSplitOptions)
19795263Di2015UniqueSeparatorstring[] sentences = text.Split(new string[] { ". " },StringSplitOptions.None);Di2015NewLine
19795263Di2015UniqueSeparator1.2788923 is a decimal numberDi2015NewLine1243818 is an integerDi2015NewLine
19795447Di2015UniqueSeparatorvar result = myList                             // No flatteningDi2015NewLine    .GroupBy(x => x.Code)                       // Group the items by the CodeDi2015NewLine    .ToDictionary(g => g.Key, g => g.Sum(v => v.Value)); // Total up the valuesDi2015NewLine
19795482Di2015UniqueSeparatorvoid OnGUI() Di2015NewLine{Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 100, 150, 100), "value 1 " + myDictonary["11111111"]);Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 120, 200, 100), "value 2 " + myDictonary["22222222"]);Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 140, 250, 100), "value 3 " + myDictonary["33333333"]);Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 160, 300, 100), "value 4 " + myDictonary["44444444"]);Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 180, 350, 100), "value 5 " + myDictonary["55555555"]);Di2015NewLine   GUI.Label(new Rect(100, Screen.height/2 + 200, 400, 100), "value 6 " + myDictonary["66666666"]);    Di2015NewLine }Di2015NewLine
19795482Di2015UniqueSeparatorvoid OnGUI() Di2015NewLine{Di2015NewLine   int top = 100;Di2015NewLine   int left = 150;Di2015NewLine   foreach(var keyValue in myDictonary) {Di2015NewLine      GUI.Label(new Rect(100, Screen.height/2 + top, left, 100), keyValue.Key + " " + keyValue.Value);Di2015NewLine      top += 20;Di2015NewLine      left += 50;Di2015NewLine   }Di2015NewLine}Di2015NewLine
19795512Di2015UniqueSeparatorDictionary<string, int> dic = new Dictionary<string, int>();Di2015NewLineforeach (Match m in Regex.Matches("a=1|b=2|c=3", @"\\w?=\\d?"))Di2015NewLine{Di2015NewLine    string[] val = m.Value.Split('=');Di2015NewLine    dic.Add(val[0], Int32.Parse(val[1]));Di2015NewLine}Di2015NewLine
19795512Di2015UniqueSeparatorstring val = "a";Di2015NewLineInt32.Parse(Regex.Match("a=1|b=2|c=3", val + @"=(\\d)").Groups[1].Value);Di2015NewLine
19795750Di2015UniqueSeparatorOnCheckChanged
19795750Di2015UniqueSeparatorTemplateField
19795750Di2015UniqueSeparator<asp:TemplateField HeaderText="shared?">Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:CheckBox ID="chck7" runat="server" Di2015NewLine                      CssClass="txtBoxNormalmedium" Di2015NewLine                      OnCheckChanged="chck7_CheckChanged"> Di2015NewLine        </asp:CheckBox>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
19795750Di2015UniqueSeparatorOnCheckChanged
19795750Di2015UniqueSeparatorprotected void chk1_CheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Attempt to cast the sender to CheckBox typeDi2015NewLine    CheckBox theCheckBox = sender as CheckBox;Di2015NewLineDi2015NewLine    // Check to see if check box was found before we try to use itDi2015NewLine    if(theCheckBox != null)Di2015NewLine    {Di2015NewLine        // Get the grid view row objectDi2015NewLine        GridViewRow theGridViewRow = theCheckBox.Parent.Parent as GridViewRow;Di2015NewLineDi2015NewLine        // Check to see if grid view row was found before we try to use itDi2015NewLine        if(theGridViewRow != null)Di2015NewLine        {Di2015NewLine            // Is the check box checked or not?Di2015NewLine            if(theCheckBox.Checked)Di2015NewLine            {Di2015NewLine                // Yes, it is checkedDi2015NewLine                // Find amount text box and perform logicDi2015NewLine                TextBox theAmountTextBox = theGridViewRow.FindControl("TextBox7") as TextBox;Di2015NewLineDi2015NewLine                // Check to see if amount text box was found before we try to use itDi2015NewLine                if(theAmountTextBox != null)Di2015NewLine                {Di2015NewLine                    // Do logic here to update amount text box valueDi2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // No, it is not checkedDi2015NewLine                // Do something here if need be; otherwise get rid of elseDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19795909Di2015UniqueSeparatorvar query = managers.SelectMany(manager => Di2015NewLine    manager.students.Select(student => new { manager, student }));Di2015NewLine
19795909Di2015UniqueSeparatorstudent
19795909Di2015UniqueSeparatorvar finalQuery = query.GroupBy(pair => pair.student)Di2015NewLine    .Select(group => new { Student = group.Key, Count = group.Count()});Di2015NewLine
19795912Di2015UniqueSeparatorvar groups = Groups.Where(g => g.Users.Any(u => u.Active));Di2015NewLine
19795912Di2015UniqueSeparatorvar groups = Groups.Where(g => g.Users.All(u => u.Active));Di2015NewLine
19795944Di2015UniqueSeparatorcorrupt color profile
19795944Di2015UniqueSeparatorCreateOptions
19795944Di2015UniqueSeparatorIgnoreColorProfile
19795944Di2015UniqueSeparator<Image>Di2015NewLine  <Image.Source>Di2015NewLine     <BitmapImage CreateOptions="IgnoreColorProfile" Di2015NewLine                  UriSource="C:\\Users\\Bob\\Desktop\\ChromeTest.jpg"/>Di2015NewLine  </Image.Source>Di2015NewLine</Image>Di2015NewLine
19795975Di2015UniqueSeparatorGlobalConfiguration.Configuration.Filters.Add(**new MyFilterAttribute()**)
19795975Di2015UniqueSeparatorGlobalConfiguration.Configuration.Filters.Add((MyFilterAttribute)resolver.GetService(typeof(MyFilterAttribute()));Di2015NewLine
19796139Di2015UniqueSeparatordouble x = ...;Di2015NewLineDi2015NewLinedouble b = 10.0;Di2015NewLinedouble s = 100.0 / (b - 1);Di2015NewLinedouble t = -100.0 / (b - 1);Di2015NewLineDi2015NewLinedouble f = s * Math.Log(x / 30000.0, b) + t;Di2015NewLine
19796144Di2015UniqueSeparatorusing(var wc=new WebClient())Di2015NewLine{Di2015NewLine    var dom = wc.DownloadString(someUrl);Di2015NewLine    var htmlDoc = new HtmlDocument();Di2015NewLine    htmlDoc.LoadHtml(dom);Di2015NewLine    var reqVerTokenElement = htmlDocDi2015NewLine                        .DocumentNodeDi2015NewLine                        .Descendants("input")Di2015NewLine                        .Where(n => n.Attributes["name"]!=null Di2015NewLine                                    && n.Attributes["name"].ValueDi2015NewLine                                        =="__RequestVerificationToken")Di2015NewLine                        .FirstOrDefault();Di2015NewLine    if(reqVerTokenElement!=null)Di2015NewLine    {Di2015NewLine        var tokenValue = reqVerTokenElement.Attributes["value"].Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19796160Di2015UniqueSeparatorControl
19796160Di2015UniqueSeparatorOnPaint
19796160Di2015UniqueSeparatorOnPaint
19796160Di2015UniqueSeparatorpublic class SpriteCanvas : ControlDi2015NewLine{Di2015NewLine    private const int AnimationSteps = 100;Di2015NewLine    private const int AnimationStepSize = 4;Di2015NewLineDi2015NewLine    private System.Windows.Forms.Timer _timer;Di2015NewLine    private Bitmap _buffer;Di2015NewLine    private int _animationStep = 0;Di2015NewLineDi2015NewLine    public SpriteCanvas()Di2015NewLine    {Di2015NewLine        _buffer = new Bitmap(2000, 2000, PixelFormat.Format32bppPArgb);Di2015NewLine        _timer = new System.Windows.Forms.Timer();Di2015NewLine        _timer.Interval = 10;Di2015NewLineDi2015NewLine        _timer.Tick += (s, e) =>Di2015NewLine        {Di2015NewLine            _animationStep += AnimationStepSize;Di2015NewLineDi2015NewLine            if (_animationStep > AnimationSteps)Di2015NewLine                _animationStep = 0;Di2015NewLineDi2015NewLine            this.Invalidate();Di2015NewLine        };Di2015NewLineDi2015NewLine        _timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnPaint(PaintEventArgs e)Di2015NewLine    {Di2015NewLine        using (var g = Graphics.FromImage(_buffer))Di2015NewLine        {Di2015NewLine            // draw sprites based on current _animationStep valueDi2015NewLine            // g.DrawImage(...)Di2015NewLine        }Di2015NewLineDi2015NewLine        e.Graphics.DrawImage(_buffer, new Rectangle(0, 0, _buffer.Width, _buffer.Height), new Rectangle(0, 0, _buffer.Width, _buffer.Height), GraphicsUnit.Pixel);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        base.Dispose(disposing);Di2015NewLine        _timer.Dispose();Di2015NewLine        _buffer.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19796160Di2015UniqueSeparatorInvalidate
19796160Di2015UniqueSeparatorImage buffer = new Bitmap(2000, 2000);              Di2015NewLinebuffer = imageBKG; //Redraw the grid pattern. Di2015NewLine
19796160Di2015UniqueSeparatorBitmap
19796160Di2015UniqueSeparatorIDisposable
19796160Di2015UniqueSeparatorusing
19796160Di2015UniqueSeparatorDispose
19796160Di2015UniqueSeparatorControl
19796160Di2015UniqueSeparatorRefresh
19796160Di2015UniqueSeparatorInvalidate
19796160Di2015UniqueSeparatorRefresh
19796160Di2015UniqueSeparatorGraphics.FromImage
19796163Di2015UniqueSeparatorParallel.Invoke
19796163Di2015UniqueSeparatorasync
19796163Di2015UniqueSeparatorasync
19796163Di2015UniqueSeparatorasync void
19796163Di2015UniqueSeparatorasync void
19796163Di2015UniqueSeparatorSynchronizationContext
19796163Di2015UniqueSeparatorasync void
19796163Di2015UniqueSeparatorParallel.Invoke
19796163Di2015UniqueSeparatorasync
19796163Di2015UniqueSeparatorTask task = Task.Factory.StartNew(async () =>Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Task.WaitAll(Di2015NewLine            _aViewModel.LoadData(_someId),Di2015NewLine            _bViewModel.LoadData(_someId)Di2015NewLine        );Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        exceptions.Enqueue(ex);Di2015NewLine    }Di2015NewLine})...Di2015NewLine
19796163Di2015UniqueSeparatorDispatcher.StartAsync
19796307Di2015UniqueSeparatorJTable table = new JTable(tableModel);Di2015NewLine
19796307Di2015UniqueSeparatortable.setModel(tableModel);Di2015NewLine
19796307Di2015UniqueSeparatorAbstractTableModel
19796519Di2015UniqueSeparatorMatches
19796519Di2015UniqueSeparatorDictionary<string,string> subPatterns = new Dictionary<string,string>();Di2015NewLinesubPatterns[@"^(?i)str\\.*"] = "Strada";Di2015NewLinesubPatterns[@"^(?i)fraz\\.*"] = "Frazione";Di2015NewLinesubPatterns[@"^(?-i)[^vV]\\.*\\w{2}\\s|\\w+\\.\\w*"] = "";Di2015NewLine//build the compositing pattern from sub patternsDi2015NewLinestring pattern = string.Join("|", subPatterns.Select(e=>e.Key));Di2015NewLine//replace itDi2015NewLineStringBuilder address = new StringBuilder();Di2015NewLineint nextStart = 0;Di2015NewLineforeach(Match m in Regex.Matches(sede.Address, pattern)){Di2015NewLine  if(m.Success){Di2015NewLine     address.Append(sede.Address.Substring(nextStart,m.Index));Di2015NewLine     //find the replacementDi2015NewLine     foreach(var pat in subPatterns){Di2015NewLine       if(Regex.IsMatch(m.Value,pat.Key)){Di2015NewLine         address.Append(pat.Value);Di2015NewLine         break;Di2015NewLine       }Di2015NewLine     }Di2015NewLine     nextStart = m.Index + m.Length;         Di2015NewLine  }Di2015NewLine}Di2015NewLinesede.Address = address.ToString();Di2015NewLine
19796607Di2015UniqueSeparatorPerson
19796607Di2015UniqueSeparatorpublic class Person : INotifyPropertyChangedDi2015NewLine{Di2015NewLine   private Guid id;Di2015NewLine   public Guid IdDi2015NewLine   {Di2015NewLine      get { return id; }Di2015NewLine      private setDi2015NewLine      {Di2015NewLine         if(id != value)Di2015NewLine         {Di2015NewLine            id = value;Di2015NewLine            NotifyPropertyChanged("Id");Di2015NewLine         }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    private void NotifyPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine       if (PropertyChanged != null)Di2015NewLine       {Di2015NewLine          PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19796655Di2015UniqueSeparatorvar cookies = cookieContainer.GetCookies(new Uri("http://rtchatserver/account/login"));Di2015NewLine
19796804Di2015UniqueSeparatorIsWindow
19796804Di2015UniqueSeparatorhWnd
19796804Di2015UniqueSeparatorSystem.Diagnostics.Process[] Procs = System.Diagnostics.Process.GetProcessesByName("winword");Di2015NewLineif (Procs.Length >= 1)Di2015NewLine{Di2015NewLine    //There is an opened Word documentDi2015NewLine} Di2015NewLine
19796947Di2015UniqueSeparatorforeach(dynamic row in query) {Di2015NewLine    int id = row.Id;Di2015NewLine    //...Di2015NewLine}Di2015NewLine
19796947Di2015UniqueSeparatorIDictionary<string, object>
19796947Di2015UniqueSeparatorvar when = conn.Query<DateTime>(...).Single();Di2015NewLine
19797013Di2015UniqueSeparatorreadonly
19797091Di2015UniqueSeparator"127.1.1.1"
19797091Di2015UniqueSeparatorIPAddress adresseTest = IPAddress.Parse(ip.Trim());Di2015NewLine
19797091Di2015UniqueSeparatorIPAddress.TryParse
19797091Di2015UniqueSeparatorstring str = "     127.1.1.1       ";Di2015NewLineIPAddress a;Di2015NewLineif (IPAddress.TryParse(str.Trim(), out a))Di2015NewLine{Di2015NewLine    //parsing succesfulDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //invalid stringDi2015NewLine}Di2015NewLine
19797091Di2015UniqueSeparatorstring.Join
19797091Di2015UniqueSeparatorstring ip = string.Join(".", tabtempsoctets1);Di2015NewLine
19797166Di2015UniqueSeparator<asp:RadioButton id="Radio1" Text="something" GroupName="RadioGroup1" runat="server" />Di2015NewLine<asp:RadioButton id="Radio2" Text="another thing" GroupName="RadioGroup1" runat="server" />Di2015NewLine<asp:RadioButton id="Radio3" Text="something else" GroupName="RadioGroup1" runat="server" />Di2015NewLine
19797247Di2015UniqueSeparator<configuration>Di2015NewLine    <location path="images">Di2015NewLine        <system.web>Di2015NewLine            <authorization>Di2015NewLine                <deny users ="?" />Di2015NewLine            </authorization>Di2015NewLine        </system.web>Di2015NewLine    </location>Di2015NewLine</configuration>Di2015NewLine
19797476Di2015UniqueSeparatorExecWait '"$INSTDIR\\YourProgram.exe" "$INSTDIR\\My_Firmware.bin"'Di2015NewLine
19797536Di2015UniqueSeparatorvar sortedTableQuery = table.OrderBy(r => r["NomArtiste"].ToString() == lastName ? 0 : 1).ThenBy(r => r["PrenomArtiste"].ToString() == firstName ? 0 : 1).ThenBy(r => r["NomArtiste"].ToString()).ThenBy(r => r["PrenomArtiste"].ToString());Di2015NewLinevar a = sortedTableQuery.ToArray(); Di2015NewLine
19797592Di2015UniqueSeparatorStyle style = new Style(typeof(ListBoxItem));Di2015NewLinestyle.Setters.Add(new Setter(Control.HorizontalContentAlignment, HorizontalAlignment.Stretch));Di2015NewLine
19797592Di2015UniqueSeparatorlistBox.ItemContainerStyle = style;Di2015NewLine
19797642Di2015UniqueSeparator      PolyTree solutiontree = new PolyTree();Di2015NewLine      cpr.Execute(ClipType.ctDifference, solutiontree, Di2015NewLine          PolyFillType.pftNonZero, PolyFillType.pftNonZero);Di2015NewLine      solution = new Polygons(solutiontree.ChildCount);Di2015NewLine      foreach (PolyNode pn in solutiontree.Childs)Di2015NewLine        solution.Add(pn.Contour);Di2015NewLine
19797705Di2015UniqueSeparator</script>
19797705Di2015UniqueSeparator<%=FormView1.FindControl("chkMap").ClientID%>
19797705Di2015UniqueSeparator#textbox
19797705Di2015UniqueSeparator<asp:CheckBox ... />
19797705Di2015UniqueSeparator<asp:TextBox runat="server" ID="textbox1" />
19797705Di2015UniqueSeparator$('#<%=FormView1.FindControl("textbox1").ClientID%>').val($(this).is(':checked'));Di2015NewLine
19797744Di2015UniqueSeparatorpublic class InventoryItemDi2015NewLine{Di2015NewLine    public virtual object Id{get;set;}Di2015NewLine    public virtual IList<InventoryItemCategory> InventoryItemCategories{get;set;}Di2015NewLine}Di2015NewLinepublic class InventoryItemCategoriyDi2015NewLine{Di2015NewLine    public virtual InventoryItem InventoryItem{get;set;}Di2015NewLine}Di2015NewLinepublic class InventoryItemMap : ClassMap<InventoryItem>Di2015NewLine{Di2015NewLine    public InventoryItem()Di2015NewLine    {Di2015NewLine        Id(x=>x.Id);Di2015NewLine        HasMany(x=>x.InventoryItemCategories).KeyColumn("Inventory_id");Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class InventoryItemCategoryMap:ClassMap<InventoryItemCategory>Di2015NewLine{Di2015NewLine    public InventoryItemCategory()Di2015NewLine    {Di2015NewLine        References(x=>x.InventoryItem).Column("Id");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19797744Di2015UniqueSeparatorsession.Query<InventoryItem>().Where(x=>!x.InventoryItemCategories.Any(c=>c.Id=="EB0DA6DE-DC18-4306-9EF7-E506463555A9")).ToList();Di2015NewLine
19797749Di2015UniqueSeparatorpublic CMAReportVM Reports([FromBody] StatsCriteria criteria)Di2015NewLine
19797749Di2015UniqueSeparatorvar represlt= response.Content.ReadAsAsync<IEnumerable<CMAReportVM>>().Result;Di2015NewLine
19797882Di2015UniqueSeparatorforeach
19797882Di2015UniqueSeparatorpublic ActionResult ChangeActivityShowNewProduct(Action<UserSetting> valueSetter)Di2015NewLine{Di2015NewLine    //...Di2015NewLine    foreach (var setting in x)Di2015NewLine        valueSetter(setting);Di2015NewLine    //...Di2015NewLine}Di2015NewLine
19797882Di2015UniqueSeparatorChangeActivityShowNewProduct(setting => setting.ActivityShowNewProduct = false);Di2015NewLine
19797980Di2015UniqueSeparator[CollectionDataContract(Namespace = "")]Di2015NewLinepublic class MyFooCollection : List<MyFoo>Di2015NewLine{Di2015NewLine}Di2015NewLine
19797980Di2015UniqueSeparator[DataContract(Namespace="")]Di2015NewLinepublic class FooQueryDi2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public /*MyFoo[]*/MyFooCollection FooArray;Di2015NewLine}Di2015NewLine
19797980Di2015UniqueSeparatorMyFooCollection _collection = new MyFooCollection();Di2015NewLine_collection.Add(_myFoo);Di2015NewLinemyOriginalFoo.FooArray = _collection; //new MyFoo[] { _myFoo };Di2015NewLine
19798022Di2015UniqueSeparatorusing (var sr = new StreamReader(path))Di2015NewLine{Di2015NewLine    while (!String.IsNullOrEmpty(sr.ReadLine()))Di2015NewLine        lineCount ++;Di2015NewLine}Di2015NewLine
19798022Di2015UniqueSeparatorvar lineBuffer = new byte[65536]; // 64KbDi2015NewLineusing (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read,Di2015NewLine       FileShare.Read, lineBuffer.Length))Di2015NewLine{Di2015NewLine    int readBuffer = 0;Di2015NewLine    while ((readBuffer = fs.Read(lineBuffer, 0, lineBuffer.Length)) > 0)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < readBuffer; i++)Di2015NewLine        {Di2015NewLine            if (lineBuffer[i] == 0xD) // Carriage return + line feedDi2015NewLine                lineCount++;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19798022Di2015UniqueSeparatorvar tasks = new Task[Environment.ProcessorCount]; // 1 per coreDi2015NewLinevar fileLock = new ReaderWriterLockSlim();Di2015NewLineint bufferSize = 65536; // 64KbDi2015NewLineDi2015NewLineusing (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read,Di2015NewLine        FileShare.Read, bufferSize, FileOptions.RandomAccess))Di2015NewLine{Di2015NewLine    for (int i = 0; i < tasks.Length; i++)Di2015NewLine    {Di2015NewLine        tasks[i] = Task.Factory.StartNew(() =>Di2015NewLine            {Di2015NewLine                int readBuffer = 0;Di2015NewLine                var lineBuffer = new byte[bufferSize];Di2015NewLineDi2015NewLine                while ((fileLock.TryEnterReadLock(10) && Di2015NewLine                       (readBuffer = fs.Read(lineBuffer, 0, lineBuffer.Length)) > 0))Di2015NewLine                {Di2015NewLine                    fileLock.ExitReadLock();Di2015NewLine                    for (int n = 0; n < readBuffer; n++)Di2015NewLine                        if (lineBuffer[n] == 0xD)Di2015NewLine                            Interlocked.Increment(ref lineCount);Di2015NewLine                }Di2015NewLine            });Di2015NewLine    }Di2015NewLine    Task.WaitAll(tasks);Di2015NewLine}Di2015NewLine
19798166Di2015UniqueSeparatorclass A {Di2015NewLine    public A (string m) {}Di2015NewLine}Di2015NewLineDi2015NewLineclass B : A{Di2015NewLine    public B (string m) : base (m) {}Di2015NewLine}Di2015NewLineDi2015NewLineclass C : B {Di2015NewLine    public C (string m) : base (m) {}Di2015NewLine}Di2015NewLine
19798166Di2015UniqueSeparatornew C("hello")
19798166Di2015UniqueSeparatorclass A {Di2015NewLine    public A (string m) {}Di2015NewLine}Di2015NewLineDi2015NewLineclass B : A {Di2015NewLine    public B () : base ("empty") {}Di2015NewLine}Di2015NewLineDi2015NewLineclass C : B {Di2015NewLine    public C (string m) : base (m) {}Di2015NewLine}Di2015NewLine
19798175Di2015UniqueSeparatorName
19798175Di2015UniqueSeparatornull
19798175Di2015UniqueSeparator(!string.IsNullOrEmpty(item.Name))
19798178Di2015UniqueSeparatorObservableCollection<T>(IEnumerable<T>)
19798178Di2015UniqueSeparatorDBContactsInLocation = new ObservableCollection<myDataContext.Person>(l.PersonLocations.Select(pl => pl.personLocation.person).ToList());Di2015NewLine
19798251Di2015UniqueSeparatorRegex.Matches()
19798251Di2015UniqueSeparatorMatchCollection
19798251Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (openFileDialog1.ShowDialog() == DialogResult.OK)Di2015NewLine    {Di2015NewLine        StreamReader sr = new StreamReader(openFileDialog1.FileName);Di2015NewLine        string s = sr.ReadToEnd();Di2015NewLine        richTextBox1.Text = s;Di2015NewLine    }Di2015NewLineDi2015NewLine    string txt = richTextBox1.Text;Di2015NewLine    var foundWords = Regex.Matches(txt, @"(?<=>)(\\w+?)(?=<)");Di2015NewLine    richTextBox1.Text = string.Join("\\n", foundWords.Cast<Match>().Select(x=>x.Value).ToArray());Di2015NewLine}Di2015NewLine
19798564Di2015UniqueSeparatorawait
19798564Di2015UniqueSeparatorforeach
19798564Di2015UniqueSeparatorasync
19798564Di2015UniqueSeparatorawait
19798564Di2015UniqueSeparatorasync
19798564Di2015UniqueSeparatorTask
19798564Di2015UniqueSeparatorTask<T>
19798564Di2015UniqueSeparatorvoid
19798573Di2015UniqueSeparatorViewModel
19798704Di2015UniqueSeparator<add name="MusicStoreEntities" connectionString="Data Source=DBInstanceName;Initial Catalog=MvcMusicStore;Integrated Security=True" providerName="System.Data.SqlClient" />Di2015NewLine
19798769Di2015UniqueSeparator     <DataGridTemplateColumn Header="Priority"  Width="100">Di2015NewLine        <DataGridTemplateColumn.CellTemplate>Di2015NewLine           <DataTemplate>Di2015NewLine              <ComboBox SelectedItem="{Binding Priority}" ItemsSource="{Binding DataContext.PriorityTypes, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />Di2015NewLine           </DataTemplate>Di2015NewLine        </DataGridTemplateColumn.CellTemplate>Di2015NewLine     </DataGridTemplateColumn>Di2015NewLine
19798769Di2015UniqueSeparator     <DataGridTemplateColumn Header="Priority"  Width="100">Di2015NewLine        <DataGridTemplateColumn.CellTemplate>Di2015NewLine           <DataTemplate>Di2015NewLine              <Label Content="{Binding Priority}" />Di2015NewLine           </DataTemplate>Di2015NewLine        </DataGridTemplateColumn.CellTemplate>Di2015NewLine        <DataGridTemplateColumn.CellEditingTemplate>Di2015NewLine           <DataTemplate>Di2015NewLine              <ComboBox SelectedItem="{Binding Priority}" ItemsSource="{Binding DataContext.PriorityTypes, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />Di2015NewLine           </DataTemplate>Di2015NewLine        </DataGridTemplateColumn.CellEditingTemplate>Di2015NewLine     </DataGridTemplateColumn>Di2015NewLine
19798794Di2015UniqueSeparatorWorkbook
19798853Di2015UniqueSeparator<asp:GridView ID="GridView1" runat="server" EnableModelValidation="True">Di2015NewLine    <Columns>Di2015NewLine        <asp:BoundField DataField="Code" HtmlEncode="False" DataFormatString="<a target='_blank' href='Test.aspx?code={0}'>Link Text Goes here</a>" />Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine
19799214Di2015UniqueSeparatorpublic bool IsOverMaximumLength(object value)Di2015NewLine{Di2015NewLine    return (value.ToString().Length > this.MaximumAllowed);Di2015NewLine}Di2015NewLine
19799214Di2015UniqueSeparatorpublic bool IsOverMaximumLengthForInt32(long value)Di2015NewLine{Di2015NewLine    return value > Int32.MaxValue;Di2015NewLine}Di2015NewLineDi2015NewLinepublic bool IsOverMaximumLengthForInt16(int value)Di2015NewLine{Di2015NewLine    return value > Int16.MaxValue;Di2015NewLine}Di2015NewLine
19799214Di2015UniqueSeparatorpublic static bool ExceedsMaximumValue(object source, object destination)Di2015NewLine{Di2015NewLine    Type sourceType = source.GetType();Di2015NewLine    FieldInfo sourceMaxValue = sourceType.GetField("MaxValue");Di2015NewLineDi2015NewLine    if (Object.ReferenceEquals(sourceMaxValue, null))Di2015NewLine    {Di2015NewLine        throw new ArgumentException("The source object type does not have a MaxValue field associated with it.");Di2015NewLine    }Di2015NewLineDi2015NewLine    Type destinationType = destination.GetType();Di2015NewLine    FieldInfo destinationMaxValue = destinationType.GetField("MaxValue");Di2015NewLineDi2015NewLine    if (Object.ReferenceEquals(destinationMaxValue, null))Di2015NewLine    {Di2015NewLine        throw new ArgumentException("The destination object type does not have a MaxValue field associated with it.");Di2015NewLine    }Di2015NewLineDi2015NewLine    object convertedSource;Di2015NewLine    if (destinationType.IsAssignableFrom(sourceType))Di2015NewLine    {Di2015NewLine        convertedSource = source;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        TypeConverter converter = TypeDescriptor.GetConverter(sourceType);Di2015NewLine        if (converter.CanConvertTo(destinationType))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                convertedSource = converter.ConvertTo(source, destinationType);Di2015NewLine            }Di2015NewLine            catch (OverflowException)Di2015NewLine            {Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            throw new ArgumentException("The source object type cannot be converted to the destination object type.");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    Type convertedSourceType = convertedSource.GetType();Di2015NewLineDi2015NewLine    Type[] comparisonMethodParameterTypes = new Type[1]Di2015NewLine    {Di2015NewLine        destinationTypeDi2015NewLine    };Di2015NewLineDi2015NewLine    MethodInfo comparisonMethod = convertedSourceType.GetMethod("CompareTo", comparisonMethodParameterTypes);Di2015NewLine    if (Object.ReferenceEquals(comparisonMethod, null))Di2015NewLine    {Di2015NewLine        throw new ArgumentException("The source object type does not have a CompareTo method.");Di2015NewLine    }Di2015NewLineDi2015NewLine    object[] comparisonMethodParameters = new object[1]Di2015NewLine    {Di2015NewLine        destinationDi2015NewLine    };Di2015NewLineDi2015NewLine    int comparisonResult = (int)comparisonMethod.Invoke(convertedSource, comparisonMethodParameters);Di2015NewLineDi2015NewLine    if (comparisonResult > 0)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19799250Di2015UniqueSeparatorstring fullPath = @"C:\\Program Files\\Rapid-I\\RapidMiner5\\scripts\\rapidminer.bat";Di2015NewLineProcessStartInfo p = new ProcessStartInfo();Di2015NewLinep.FileName = Path.GetFileName(fullPath);Di2015NewLinep.WorkingDirectory = Path.GetDirectoryName(fullPath);Di2015NewLinep.Arguments = @"/c -f ""C:\\Users\\user\\.RapidMiner5\\repositories\\Local Repository\\test.rmp""";Di2015NewLineProcess.Start(p);Di2015NewLine
19799250Di2015UniqueSeparatorstring fullPath = @"C:\\Program Files\\Rapid-I\\RapidMiner5\\scripts\\run.bat";Di2015NewLineProcessStartInfo p = new ProcessStartInfo();Di2015NewLinep.FileName = Path.GetFileName(fullPath);Di2015NewLinep.WorkingDirectory = Path.GetDirectoryName(fullPath);Di2015NewLineProcess.Start(p);Di2015NewLine
19799417Di2015UniqueSeparatordownload
19799417Di2015UniqueSeparatorwhile (bytesProcessed<=0 && bytesRead>0 );Di2015NewLine
19799417Di2015UniqueSeparatorbytesProcessed
19799417Di2015UniqueSeparatorContentLength
19799417Di2015UniqueSeparatorContentLength
19799417Di2015UniqueSeparatorHttpWebRequest
19799455Di2015UniqueSeparatorDictionary<DataType, String[]> d = itemsDi2015NewLine    .GroupBy(x => x.Item1)Di2015NewLine    .ToDictionary(Di2015NewLine        g => g.Key,Di2015NewLine        g => g.Select(t => t.Item2).ToArray()); //the change is on this lineDi2015NewLine
19799455Di2015UniqueSeparatorIGrouping<TKey, TElement>
19799455Di2015UniqueSeparatorValue
19799455Di2015UniqueSeparatorKey
19799455Di2015UniqueSeparatorIEnumerable<TElement>
19799519Di2015UniqueSeparatorvar memoryStream = new MemoryStream();Di2015NewLineusing (memoryStream)Di2015NewLine{Di2015NewLine    StrokeCollection strokeCollection; //Your stroke collection ommitted the declarationDi2015NewLine    strokeCollection.Save(ms);Di2015NewLine    ms.Position = 0;Di2015NewLine}Di2015NewLine
19799536Di2015UniqueSeparatornavigator.geolocation.getCurrentPosition
19799683Di2015UniqueSeparatorstring str = "/CP5/ConPointR/ConPoint/YHO/G1";Di2015NewLinestring newStr = str.Substring(str.IndexOf('/', 1));Di2015NewLine
19799683Di2015UniqueSeparatornewStr = "/ConPointR/ConPoint/YHO/G1"
19799693Di2015UniqueSeparator<input type="file" name="elementName" />Di2015NewLine
19799693Di2015UniqueSeparator<input>
19799856Di2015UniqueSeparator.Max()
19799856Di2015UniqueSeparatorIEnumerable<PropertyInfo>
19799856Di2015UniqueSeparatorvar query = (from d in drugListDi2015NewLine             select d.GetType().GetProperty(jsonString)).Max();Di2015NewLine
19799856Di2015UniqueSeparatorPropertyInfo
19799856Di2015UniqueSeparatorGetValue
19799856Di2015UniqueSeparatorlet property = ...
19799856Di2015UniqueSeparatorDrugs
19799856Di2015UniqueSeparatorvar query = (from d in drugListDi2015NewLine             let property = d.GetType().GetProperty(jsonString)Di2015NewLine             select property.GetValue(d, null)).Max();Di2015NewLine
19799856Di2015UniqueSeparatornull
19799856Di2015UniqueSeparatorGetValue
19799856Di2015UniqueSeparatorproperty.GetValue(d)
19799856Di2015UniqueSeparatorPropertyInfo
19800035Di2015UniqueSeparatortry {Di2015NewLine  // do something dangerousDi2015NewLine} catch(...) {Di2015NewLine  // log the error or somethingDi2015NewLine  throw; // let the exception bubble up to the callerDi2015NewLine} finally {Di2015NewLine  // this always runsDi2015NewLine}Di2015NewLine// this only runs if there was no exceptionDi2015NewLine
19800035Di2015UniqueSeparatortry {Di2015NewLine  // do something dangerousDi2015NewLine} catch(...) {Di2015NewLine  // handle the errorDi2015NewLine  // log the error, which may cause a different exceptionDi2015NewLine} finally {Di2015NewLine  // this runs even if the catch crashedDi2015NewLine}Di2015NewLine// this only runs if there was no exception, or the code in the catch workedDi2015NewLine
19800035Di2015UniqueSeparatorfinally
19800063Di2015UniqueSeparatorpublic class ButtonWithOverture : ButtonDi2015NewLine{Di2015NewLine    public Action Overture { get; set;}        Di2015NewLineDi2015NewLine    protected override void OnClick(EventArgs e)Di2015NewLine    {Di2015NewLine        if (Overture != null)Di2015NewLine            Overture();Di2015NewLineDi2015NewLine        base.OnClick(e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800063Di2015UniqueSeparatorforeach(var button in Controls.OfType<ButtonWithOverture>())    Di2015NewLine    button.Overture = () => mainTextBox.Clear();Di2015NewLine
19800063Di2015UniqueSeparator private void ClearControls()Di2015NewLine {Di2015NewLine      mainTextBox.Clear();Di2015NewLine }Di2015NewLine
19800066Di2015UniqueSeparatorIndexOf
19800066Di2015UniqueSeparatorforeach (DataRow row_ in dt.Rows) {Di2015NewLine  row = row_;Di2015NewLine  foreach (DataColumn col_ in dt.Columns) {Di2015NewLine    col = col_;Di2015NewLine    strMsg = strMsg + col.ColumnName + ": " + row[dt.Columns.IndexOf(col_)].ToString() Di2015NewLine         + Environment.NewLine;Di2015NewLine  }Di2015NewLine  MessageBox.Show(strMsg);Di2015NewLine  strMsg = "";Di2015NewLine}Di2015NewLine
19800066Di2015UniqueSeparatorvar dt = new DataTable();Di2015NewLineDi2015NewLinedt.Columns.Add(new DataColumn());Di2015NewLinedt.Columns.Add(new DataColumn());Di2015NewLineDi2015NewLinevar row1 = dt.NewRow();Di2015NewLinerow1[0] = "0";Di2015NewLinerow1[1] = "1";Di2015NewLinedt.Rows.Add(row1);Di2015NewLineDi2015NewLineforeach (DataRow row in dt.Rows)Di2015NewLine{Di2015NewLine    foreach (DataColumn col in dt.Columns)Di2015NewLine    {Di2015NewLine        var strMsg = col.ColumnName + ": " + row[dt.Columns.IndexOf(col)].ToString();Di2015NewLine        Console.WriteLine(strMsg);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800066Di2015UniqueSeparatorforeach
19800066Di2015UniqueSeparatorstring[] colNames = (from DataColumn col in dt.Columns select col.ColumnName).ToArray();Di2015NewLine
19800116Di2015UniqueSeparatorprotected void Page_PreRender(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var itemIndex = DropDownList1.SelectedIndex;Di2015NewLine    var item = DropDownList1.Items[itemIndex];Di2015NewLine    DropDownList1.Items.RemoveAt(itemIndex);Di2015NewLine    DropDownList1.Items.Insert(0, new ListItem(item.Text, item.Value));Di2015NewLine}Di2015NewLine
19800135Di2015UniqueSeparatorpublic class ThirdPartyClassDi2015NewLine{Di2015NewLine    public int Property1 { get; set; }Di2015NewLine    public string Property2 { get; set; }Di2015NewLine}Di2015NewLine
19800135Di2015UniqueSeparator[DataContract()]Di2015NewLinepublic class ThirdPartyClassSerializableDi2015NewLine{Di2015NewLine    private ThirdPartyClass m_TPC = new ThirdPartyClass();Di2015NewLineDi2015NewLine    public ThirdPartyClassSerializable();Di2015NewLine    public ThirdPartyClassSerializable(ThirdPartyClass oTPC)Di2015NewLine    {Di2015NewLine        m_TPC = oTPC;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ThirdPartyClass GetThirdPartyClass()Di2015NewLine    {Di2015NewLine        return m_TPC;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember()]Di2015NewLine    public int Property1Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return m_TPC.Property1;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            m_TPC.Property1 = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember()]Di2015NewLine    public string Property2Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return m_TPC.Property2;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            m_TPC.Property2 = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800135Di2015UniqueSeparator[DataContract()]Di2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine    private ThirdPartyClass m_ThirdPartyClass;Di2015NewLineDi2015NewLine    public ThirdPartyClass ThirdPartyClassDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return m_ThirdPartyClass;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            m_ThirdPartyClass = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [DataMember()]Di2015NewLine    public ThirdPartyClassSerializable ThirdPartyClassSerializedDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return new ThirdPartyClassSerializable(this.ThirdPartyClassNonSerialized);Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this.ThirdPartyClass = value.GetThirdPartyClass();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800148Di2015UniqueSeparatorhandlersCollection.Add(addElement);Di2015NewLine
19800148Di2015UniqueSeparatorhandlersCollection.AddAt(0, addElement);Di2015NewLine
19800182Di2015UniqueSeparatorSELECT  pt.PreLoadNumber AS [PreLoadNumber]Di2015NewLine       ,( SELECT    SUB.LineToDisplay AS [text()]Di2015NewLine          FROM      [PreLoadTextbox] SUBDi2015NewLine          WHERE     SUB.PreLoadNumber = pt.PreLoadNumberDi2015NewLine          ORDER BY  SUB.DisplayOrderDi2015NewLine        FORDi2015NewLine          XML PATH('')Di2015NewLine        ) AS [LinesToDisplay]Di2015NewLineFROM    ( SELECT DISTINCTDi2015NewLine                    PreLoadNumberDi2015NewLine          FROM      [PreLoadTextbox]Di2015NewLine        ) ptDi2015NewLine
19800182Di2015UniqueSeparatorPreLoadNumber
19800182Di2015UniqueSeparatorLineToDisplay
19800182Di2015UniqueSeparatorDisplayOrder
19800182Di2015UniqueSeparatorSELECT  pt.PreLoadNumber AS [PreLoadNumber]Di2015NewLine       ,STUFF((   SELECT    ',' + SUB.LineToDisplay AS [text()]Di2015NewLine          FROM      [PreLoadTextbox] SUBDi2015NewLine          WHERE     SUB.PreLoadNumber = pt.PreLoadNumberDi2015NewLine          ORDER BY  SUB.DisplayOrderDi2015NewLine        FORDi2015NewLine          XML PATH('')Di2015NewLine        ), 1, 1, '' ) AS [LinesToDisplay]Di2015NewLineFROM    ( SELECT DISTINCTDi2015NewLine                    PreLoadNumberDi2015NewLine          FROM      [PreLoadTextbox]Di2015NewLine        ) ptDi2015NewLine
19800226Di2015UniqueSeparatorSelect
19800226Di2015UniqueSeparatorreturn _strings.Select(x=>x); Di2015NewLine
19800226Di2015UniqueSeparator_strings
19800226Di2015UniqueSeparatorpublic static IEnumerable<T> AsSequence<T>(this IEnumerable<T> sequence)Di2015NewLine{Di2015NewLine    return sequence.Select(x => x);Di2015NewLine}Di2015NewLine
19800377Di2015UniqueSeparatorpublic IEnumerable<string> Get()Di2015NewLine{Di2015NewLine    List<string> retval = new List<string>();Di2015NewLineDi2015NewLine    var qryPairs = Request.GetQueryNameValuePairs();Di2015NewLine    foreach (var q in qryPairs)Di2015NewLine    {Di2015NewLine        retval.Add("Key: " + q.Key + " Value: " + q.Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    return retval;Di2015NewLine}Di2015NewLine
19800403Di2015UniqueSeparatorstring versionText = "11.1.2.3" ;Di2015NewLineVersion versionNumber = new Version( versionText ) ;Di2015NewLine
19800403Di2015UniqueSeparatorVersion.TryParse()
19800403Di2015UniqueSeparatorstring versionText = "11.1.2.3" ;Di2015NewLineVersion versionNumber Di2015NewLinebool parsedOk = Version.TryParse(versionText,out versionNumber) ;Di2015NewLine
19800438Di2015UniqueSeparator.Designer.cs
19800493Di2015UniqueSeparator<pages>Di2015NewLine  <namespaces>Di2015NewLine    <add namespace="TestingGround01.App_Code">Di2015NewLine  </namespaces>Di2015NewLine</pages>Di2015NewLine
19800493Di2015UniqueSeparator@using TestingGround01.App_CodeDi2015NewLine
19800493Di2015UniqueSeparator@{ var s = new SessionHandler(); }Di2015NewLine
19800496Di2015UniqueSeparator[DisplayFormat(DataFormatString = "{0:C0}")]Di2015NewLine
19800496Di2015UniqueSeparatorpublic static string ToCurrencyString(this decimal d)Di2015NewLine{Di2015NewLine    return d.Equals(Decimal.Truncate(d)) ? d.ToString("0 â¬") : d.ToString("0.00 â¬");Di2015NewLine}Di2015NewLine
19800532Di2015UniqueSeparator/// <summary>Show or hide the simulation status window on its own thread.</summary>Di2015NewLineprivate void toggleSimulationStatusWindow(bool show)Di2015NewLine{Di2015NewLine    if (show)Di2015NewLine    {Di2015NewLine        if (statusMonitorThread != null) return;Di2015NewLine        statusMonitorWindow = new AnalysisStatusWindow(ExcelApi.analyisStatusMonitor);Di2015NewLine        statusMonitorThread = new System.Threading.Thread(delegate()Di2015NewLine        {Di2015NewLine            Application.Run(statusMonitorWindow);Di2015NewLine        });Di2015NewLine        statusMonitorThread.Start();Di2015NewLine    }Di2015NewLine    else if (statusMonitorThread != null)Di2015NewLine    {Di2015NewLine        statusMonitorWindow.BeginInvoke((MethodInvoker)delegate { statusMonitorWindow.Close(); });Di2015NewLine        statusMonitorThread.Join();Di2015NewLine        statusMonitorThread = null;Di2015NewLine        statusMonitorWindow = null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800675Di2015UniqueSeparatorvar policyNames =  Container.Model.AllInstances.Where(x => x.PluginType == typeof(IPolicy)).Select(x => x.Name);Di2015NewLine
19800768Di2015UniqueSeparatorpublic abstract class MyBaseClassDi2015NewLine{Di2015NewLine    public virtual void FunctionCall(int i)Di2015NewLine    {Di2015NewLine        this.FunctionCall(i, "");Di2015NewLine    }Di2015NewLine    public virtual void FunctionCall(int i, string s)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyDerivedClass : MyBaseClassDi2015NewLine{Di2015NewLine    public override void FunctionCall(int i)Di2015NewLine    {Di2015NewLine        MessageBox.Show(i.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class YourDerivedClass : MyBaseClassDi2015NewLine{Di2015NewLine    public override void FunctionCall(int i, string s)Di2015NewLine    {Di2015NewLine        MessageBox.Show(s + " " + i.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19800768Di2015UniqueSeparatorpublic abstract class MyBaseClassDi2015NewLine{Di2015NewLine    public abstract void FunctionCall(int i);Di2015NewLine    public abstract void FunctionCall(int i, string s);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyDerivedClass : MyBaseClassDi2015NewLine{Di2015NewLine    public override void FunctionCall(int i, string s)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine    public override void FunctionCall(int i)Di2015NewLine    {Di2015NewLine        MessageBox.Show(i.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class YourDerivedClass : MyBaseClassDi2015NewLine{Di2015NewLine    public override void FunctionCall(int i)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine    public override void FunctionCall(int i, string s)Di2015NewLine    {Di2015NewLine        MessageBox.Show(s + " " + i.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19801000Di2015UniqueSeparatorBaseClass
19801000Di2015UniqueSeparatorDerivedClass
19801000Di2015UniqueSeparatorDerivedClass
19801000Di2015UniqueSeparatorBaseClass
19801000Di2015UniqueSeparatorpublic DerivedClass(BaseClass baseClass) {Di2015NewLine    // Populate common properties, call other derived class constructor, or call base constructorDi2015NewLine}Di2015NewLine
19801000Di2015UniqueSeparator DerivedClass dc = new DerivedClass(MethodThatReturnsBaseClassObject());Di2015NewLine
19801019Di2015UniqueSeparatorfor
19801019Di2015UniqueSeparatormyArray.Cast<double>().Min()
19801019Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    const int SIZE = 3000;Di2015NewLine    static double[,] data = new double[SIZE,SIZE];Di2015NewLineDi2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        if (args.Length >= 1 && args[0] == "/for")Di2015NewLine        {Di2015NewLine            Benchmark(ForLoop);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Benchmark(LinqLoop);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ForLoop()Di2015NewLine    {Di2015NewLine        for (int i = 0; i < SIZE; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < SIZE; j++)Di2015NewLine            {Di2015NewLine                if (double.IsNaN(data[i, j]) || double.IsInfinity(data[i, j])) Console.WriteLine("FOUND!");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void LinqLoop()Di2015NewLine    {Di2015NewLine        if (!data.Cast<double>().Any(d => double.IsNaN(d) || double.IsInfinity(d))) Console.WriteLine("FOUND!");Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Benchmark(Action a)Di2015NewLine    {Di2015NewLine        Stopwatch watch = Stopwatch.StartNew();Di2015NewLine        a();Di2015NewLineDi2015NewLine        TimeSpan span = watch.Elapsed;Di2015NewLine        Console.WriteLine("Milliseconds: " + span.TotalMilliseconds + " ms");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19801349Di2015UniqueSeparator    public static void AddMediaPlayer(Form form1) {Di2015NewLine        Button b1 = new Button();Di2015NewLine        b1.Text = "Button";Di2015NewLine        try {Di2015NewLine            wmPlayer = new AxWMPLib.AxWindowsMediaPlayer();Di2015NewLineDi2015NewLine            ((System.ComponentModel.ISupportInitialize)(wmPlayer)).BeginInit();Di2015NewLine            wmPlayer.Name = "wmPlayer";Di2015NewLine            wmPlayer.Enabled = true;Di2015NewLine            wmPlayer.Dock = System.Windows.Forms.DockStyle.Fill;Di2015NewLine            form1.Controls.Add(wmPlayer);Di2015NewLine            ((System.ComponentModel.ISupportInitialize)(wmPlayer)).EndInit();Di2015NewLineDi2015NewLine            // After initialization you can customize the Media PlayerDi2015NewLine            wmPlayer.uiMode = "none";Di2015NewLine            wmPlayer.URL = @"C:\\ProjectSilver\\assets\\RadarDetectie\\general\\inlog_confirm.ogv";Di2015NewLine            wmPlayer.Ctlcontrols.play();Di2015NewLine        }Di2015NewLine        catch { }Di2015NewLine
19801976Di2015UniqueSeparatorAction<string> action;Di2015NewLineswitch (type) {Di2015NewLine    case 0:Di2015NewLine        action = newVal => someString0 = newVal;Di2015NewLine        break;Di2015NewLine    case 1:Di2015NewLine        action = newVal => someString1 = newVal;Di2015NewLine        break;Di2015NewLine    case 2:Di2015NewLine        action = newVal => someString2 = newVal;Di2015NewLine        break;Di2015NewLine    default:Di2015NewLine        action = null;Di2015NewLine        break;Di2015NewLine}Di2015NewLineif (action != null) action.Invoke("some new value");Di2015NewLine
19801976Di2015UniqueSeparatorswitch (i) {Di2015NewLine    case 0:Di2015NewLine        someString0 = "some new value";Di2015NewLine        break;Di2015NewLine     case 1:Di2015NewLine        someString1 = "some new value";Di2015NewLine        break;Di2015NewLine      case 2:Di2015NewLine        someString2 = "some new value";Di2015NewLine        break;Di2015NewLine      default:Di2015NewLine        break;Di2015NewLine}Di2015NewLine
19802008Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <Style TargetType="TextBlock">Di2015NewLine        <Setter Property="Width" Value="400"/>            Di2015NewLine        <Setter Property="Foreground" Value="White"/>Di2015NewLine        <Setter Property="FontSize" Value="14"/>Di2015NewLine        <Setter Property="TextWrapping" Value="Wrap"/>  Di2015NewLine        <Setter Property="Margin" Value="10"></Setter>Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLine<WrapPanel Orientation="Vertical" Width="850" Background="Black" Height="300" >Di2015NewLine    <TextBlock Text="Focus on questions about an actual problem you have faced. Include details about what you have tried and exactly what you are trying to do."/>Di2015NewLine    <TextBlock Text="Not all questions work well in our format. Avoid questions that are primarily opinion-based, or that are likely to generate discussion rather than answers."/>Di2015NewLine    <TextBlock Text="Questions that need improvement may be closed until someone fixes them."/>Di2015NewLine    <TextBlock Text="All questions are tagged with their subject areas. Each can have up to 5 tags, since a question might be related to several subjects. Click any tag to see a list of questions with that tag, or go to the tag list to browse for topics that interest you."/>Di2015NewLine    <TextBlock Text="Your reputation score goes up when others vote up your questions, answers and edits."/>        Di2015NewLine</WrapPanel>Di2015NewLine
19802028Di2015UniqueSeparatorpublic class UtilityDi2015NewLine{Di2015NewLine    public static void compareFiles() { ... }Di2015NewLine}Di2015NewLine
19802028Di2015UniqueSeparatorUtility.compareFiles();Di2015NewLine
19802107Di2015UniqueSeparator<TextBlock Text="HelloWorld ">Di2015NewLine    <TextBlock.Style>Di2015NewLine        <Style TargetType="TextBlock">Di2015NewLine            <Setter Property="Foreground" Value="LightGray"/>Di2015NewLine            <Style.Triggers>Di2015NewLine                <Trigger Property="IsMouseOver" Value="True">Di2015NewLine                    <Setter Property="Foreground" Value="Red"/>Di2015NewLine                </Trigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </TextBlock.Style>Di2015NewLine</TextBlock>Di2015NewLine
19802340Di2015UniqueSeparatorint bufferSize = 2048;Di2015NewLineint readCount;Di2015NewLinebyte[] buffer = new byte[2048]; // a buffer is createdDi2015NewLineDi2015NewLine// bytes are read from stream into buffer. readCount containsDi2015NewLine// number of bytes actually read. it can be less then 2048 for the last chunk.Di2015NewLine// e.g if there are 3000 bytes of data, first Read will read 2048 bytesDi2015NewLine// and second will read 952 bytesDi2015NewLinereadCount = responseStream.Read(buffer, 0, bufferSize); Di2015NewLineDi2015NewLinewhile (readCount > 0) // as long as we have read some dataDi2015NewLine{Di2015NewLine  writer.Write(buffer, 0, readCount); // write that many bytes from buffer to file               Di2015NewLine  readCount = responseStream.Read(buffer, 0, bufferSize); // then read next chunk               Di2015NewLine}Di2015NewLine
19802465Di2015UniqueSeparatorString.Equals(String, String, StringComparison)
19802465Di2015UniqueSeparatororder.Customer
19802465Di2015UniqueSeparatorvar orders = session.Query<OrderHeader>()Di2015NewLine    .Fetch(x => x.CreatedBy);Di2015NewLine
19802465Di2015UniqueSeparatorvar peopleWithNoOrders = session.Query<Person>()Di2015NewLine    .Where(p => !session.Query<OrderHeader>().Any(o => o.CreatedBy == p));Di2015NewLine
19802465Di2015UniqueSeparatorleft outer join
19802465Di2015UniqueSeparatorinner join
19802524Di2015UniqueSeparatorODataMessageReader
19802524Di2015UniqueSeparatorIODataResponseMessage
19802524Di2015UniqueSeparatorIODataRequestMessage
19802524Di2015UniqueSeparatorIODataRequestMessageAsync request = new ODataHttpRequestMessage(this.Url);Di2015NewLineDi2015NewLineusing (ODataMessageReader reader = new ODataMessageReader(request))Di2015NewLine{Di2015NewLine   ...Di2015NewLine}Di2015NewLine
19802524Di2015UniqueSeparatorIODataResponseMessageAsync response = new ODataHttpResponseMessage();Di2015NewLineDi2015NewLineusing (ODataMessageReader reader = new ODataMessageReader(response))Di2015NewLine{Di2015NewLine   ...Di2015NewLine}Di2015NewLine
19802542Di2015UniqueSeparatorIEnumerator.MoveNext()
19802542Di2015UniqueSeparatorfalse
19802542Di2015UniqueSeparatoryield
19802600Di2015UniqueSeparatorstring json = @"[Di2015NewLine  'Small',Di2015NewLine  'Medium',Di2015NewLine  'Large'Di2015NewLine]";Di2015NewLineDi2015NewLineJArray a = JArray.Parse(json);Di2015NewLine
19802600Di2015UniqueSeparatorJArray aAllValues = JArray.Parse(json);Di2015NewLinevar SampleObjectCollection = new List<SampleObject>();Di2015NewLineDi2015NewLineforeach (JArray aValues in aAllValues)Di2015NewLine{Di2015NewLine    var oSampleObject = new SampleObject();Di2015NewLine    int index = 0;Di2015NewLineDi2015NewLine    foreach (var oProperty in aValues.Children())Di2015NewLine    {Di2015NewLine        switch (index)Di2015NewLine        {Di2015NewLine            case 0:Di2015NewLine                oSampleObject.Letter = oProperty.Value<String>();Di2015NewLine                break;Di2015NewLine            case 1:Di2015NewLine                oSampleObject.FirstNumber = oProperty.Value<String>();Di2015NewLine                break;Di2015NewLine            case 2:Di2015NewLine                oSampleObject.SecondNumber = oProperty.Value<String>();Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine        index++;Di2015NewLine    }Di2015NewLineDi2015NewLine    SampleObjectCollection.Add(oSampleObject);Di2015NewLine}Di2015NewLine
19802663Di2015UniqueSeparator@Html.Partial("partialview"), Model.ValueToSend, new ViewDataDictionary(ViewData) {Di2015NewLineTemplateInfo = new System.Web.Mvc.TemplateInfo {HtmlFieldPrefix = "ValueToSend"Di2015NewLine})Di2015NewLine
19802663Di2015UniqueSeparatorTextBoxFor(model => model, new { @class = .....)Di2015NewLine
19802663Di2015UniqueSeparatorvar id;Di2015NewLine($(".datepickerclass").change(function(){Di2015NewLineid = $(this).attr('id');Di2015NewLine)}Di2015NewLine
19802663Di2015UniqueSeparator$(".datepickerclass").datepicker(Di2015NewLine.....Di2015NewLinebeforeShow:Di2015NewLineid = $(this).attr('id')Di2015NewLine
19802663Di2015UniqueSeparatoronSelect: Di2015NewLinevar val = $(id).val()Di2015NewLine$('#h'+ id).val(val)Di2015NewLine
19802702Di2015UniqueSeparatorRequest.Params[]
19802705Di2015UniqueSeparator)
19802829Di2015UniqueSeparator<[^>]*>
19802829Di2015UniqueSeparatorRegex rgx = new Regex("<[^>]*>");Di2015NewLinestring result = rgx.Replace(yourString,"");Di2015NewLine
19802905Di2015UniqueSeparator0000  // truncated for clarity it would really be 32 0'sDi2015NewLine
19802905Di2015UniqueSeparator0001 Di2015NewLine
19802905Di2015UniqueSeparator0011 // because 2 in binary is ...0010, so ORing 0001 and 0010 -> 0011Di2015NewLine
19802977Di2015UniqueSeparatoronclick="ShowDocument('${DoURL}');"Di2015NewLine
19803279Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine   public void SomeMethod(){}Di2015NewLine   public static void SomeStaticMethod(){}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BDi2015NewLine{Di2015NewLine  public B()Di2015NewLine  {Di2015NewLine     A a = new A();Di2015NewLine     a.SomeMethod();Di2015NewLineDi2015NewLine     A.SomeStaticMethod();Di2015NewLine  }Di2015NewLine}Di2015NewLine
19803279Di2015UniqueSeparatorpublic class A : BDi2015NewLine{Di2015NewLine   public A()Di2015NewLine   {Di2015NewLine      //you can now call the methods defined in BDi2015NewLine      base.SomeMethod();Di2015NewLine   }Di2015NewLine}Di2015NewLine
19803428Di2015UniqueSeparatorEnvironment.GetFolderPath
19803567Di2015UniqueSeparatorIsEnabled={Binding DataContext.LeftWidgetEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}Di2015NewLine
19803817Di2015UniqueSeparatorScreen
19803817Di2015UniqueSeparatorGraphics.CopyFromScreen
19803903Di2015UniqueSeparator public static Frame RootFrame ;Di2015NewLine
19803903Di2015UniqueSeparator App.RootFrame.Navigate((typeof(MainPage)));Di2015NewLine
19804042Di2015UniqueSeparatorItemStyle-CssClass
19804042Di2015UniqueSeparatorButtonField
19804042Di2015UniqueSeparator<Columns>Di2015NewLine <asp:ButtonField ItemStyle-CssClass="gvbutton" ButtonType="Button" Text="ADD" CommandName="addrow" />Di2015NewLine</Columns>Di2015NewLine
19804042Di2015UniqueSeparator.gvbutton input {Di2015NewLine     width: 200px;Di2015NewLine}Di2015NewLine
19804277Di2015UniqueSeparatorvar channel = wInfo.query.results.channel;Di2015NewLinevar title = channel.title;Di2015NewLinevar link = channel.link;Di2015NewLine
19804432Di2015UniqueSeparatorDatasource
19804495Di2015UniqueSeparatorvar responseTask1 = client.PostAsJsonAsync(...);Di2015NewLineThread.Sleep(2000);Di2015NewLinevar responseTask2 = client.PostAsJsonAsync(...);Di2015NewLineDi2015NewLinevar response1 = responseTask1.Result;Di2015NewLinevar response2 = responseTask2.Result;Di2015NewLine
19804495Di2015UniqueSeparator    var response1 = await task1;Di2015NewLine    var response2 = await task2;Di2015NewLineDi2015NewLine    return new[] {response1, response2};Di2015NewLine
19804495Di2015UniqueSeparator    return await Task.WhenAll(task1, task2);Di2015NewLine
19804534Di2015UniqueSeparator//value[text()='Username']/preceding-sibling::idDi2015NewLine
19804626Di2015UniqueSeparator<GroupBox Header="AÃ°gerÃ°ir" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="270,0,0,178" Height="106" Width="176">Di2015NewLine    <StackPanel>Di2015NewLine        <CheckBox Content="CheckBox" HorizontalAlignment="Left" VerticalAlignment="Top"/>Di2015NewLine        <CheckBox Content="CheckBox" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>Di2015NewLine    </StackPanel>    Di2015NewLine</GroupBox>Di2015NewLine
19804785Di2015UniqueSeparator<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">Di2015NewLine  <container>Di2015NewLine    <register type="IA" mapTo="A" />Di2015NewLine    <register type="IB" mapTo="B" />Di2015NewLine    <register type="IC" mapTo="C">Di2015NewLine      <lifetime type="perresolve"/>Di2015NewLine    </register>Di2015NewLine  </container>Di2015NewLine</unity>Di2015NewLine
19804852Di2015UniqueSeparatorConnection
19804852Di2015UniqueSeparatorServerConnect()
19804852Di2015UniqueSeparatorpublic void Connect{Di2015NewLine   public void Foo(){Di2015NewLine     Connection con = new Connection();Di2015NewLine     con.ServerConnect();Di2015NewLine   }Di2015NewLine}Di2015NewLine
19804899Di2015UniqueSeparatorFastMember
19804899Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Data;Di2015NewLineusing FastMember;Di2015NewLineDi2015NewLinenamespace ConsoleScratchPadDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            IList<MyClass> ls = new List<MyClass>();Di2015NewLine            ls.Add(new MyClass { MyColumn1 = "The" });Di2015NewLine            ls.Add(new MyClass { MyColumn1 = "Big" });Di2015NewLine            ls.Add(new MyClass { MyColumn1 = "Ant" });Di2015NewLine            DataTable dt = new DataTable();Di2015NewLine            using (var reader = ObjectReader.Create(ls))Di2015NewLine            {Di2015NewLine                dt.Load(reader);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        public string MyColumn1 { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19805057Di2015UniqueSeparatorcboFrom.SelectedValue.ToString()
19805057Di2015UniqueSeparatorcomboBox1.Items.AddRange(Lookup);
19805057Di2015UniqueSeparatorDi2015NewLine  comboBox1.DataSource=Lookup;
19805057Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            List<MyListItem> item = new List<MyListItem>();Di2015NewLine            item.Add(new MyListItem{Text = "A", Value ="1"});Di2015NewLine            item.Add(new MyListItem { Text = "B", Value = "2" });Di2015NewLine            item.Add(new MyListItem { Text = "C", Value = "3" });Di2015NewLine            comboBox1.DataSource = item;Di2015NewLine            comboBox1.DisplayMember = "Text";Di2015NewLine            comboBox1.ValueMember = "Value";Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            // This one not throw the null refference exceptionDi2015NewLine            var ss = comboBox1.SelectedValue.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    struct MyListItemDi2015NewLine    {Di2015NewLine        public string Text { get; set; }Di2015NewLine        public string Value { get; set; }Di2015NewLine    }Di2015NewLine
19805133Di2015UniqueSeparatorRun
19805133Di2015UniqueSeparatorContextCallback
19805133Di2015UniqueSeparatorExecutionContext.Run(item.Context, Sub(state) item.Callback(item.State), Nothing)Di2015NewLine
19805133Di2015UniqueSeparatorInvoke
19805133Di2015UniqueSeparatorExecutionContext.Run(item.Context, Sub(state) item.Callback.Invoke(item.State), Nothing)Di2015NewLine
19805133Di2015UniqueSeparatorExecutionContext.Run(item.Context, Di2015NewLine    Sub(state) Di2015NewLine        Dim cb = item.CallbackDi2015NewLine        cb(item.State)Di2015NewLine    End Sub, Nothing)Di2015NewLine
19805133Di2015UniqueSeparatorDim contextCallback As ContextCallback = Di2015NewLine    Sub(state) Di2015NewLine        Dim cb = item.CallbackDi2015NewLine        cb(item.State)Di2015NewLine    End SubDi2015NewLineExecutionContext.Run(item.Context, contextCallback, Nothing)Di2015NewLine
19805223Di2015UniqueSeparatorParserResult
19805223Di2015UniqueSeparatorData
19805223Di2015UniqueSeparatorData
19805223Di2015UniqueSeparatorresponse
19805223Di2015UniqueSeparatorParserResult
19805223Di2015UniqueSeparatorprices
19805223Di2015UniqueSeparatorList<Price>
19805223Di2015UniqueSeparatorpublic class DataDi2015NewLine{Di2015NewLine    public Response response { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ResponseDi2015NewLine{Di2015NewLine    public int success { get; set; }Di2015NewLine    public long current_time { get; set; }Di2015NewLine    public IDictionary<int, IDictionary<int, IDictionary<int, Price>>> prices { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PriceDi2015NewLine{Di2015NewLine    public Quote current { get; set; }Di2015NewLine    public Quote previous { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class QuoteDi2015NewLine{Di2015NewLine    public string currency { get; set; }Di2015NewLine    public decimal value { get; set; }Di2015NewLine    public decimal value_high { get; set; }Di2015NewLine    public long date { get; set; }Di2015NewLine}Di2015NewLine
19805223Di2015UniqueSeparatorupdatePrices
19805223Di2015UniqueSeparatorpublic PriceParser updatePrices()Di2015NewLine{Di2015NewLine    var json = File.ReadAllText("test.json");Di2015NewLine    currentPrices = JsonConvert.DeserializeObject<Data>(json);Di2015NewLine    return this;Di2015NewLine}Di2015NewLine
19805223Di2015UniqueSeparatorPriceParser parser = new PriceParser();Di2015NewLineparser.updatePrices();Di2015NewLineDi2015NewLineforeach (var defindex in parser.currentPrices.response.prices)Di2015NewLine{Di2015NewLine    Console.WriteLine("defindex: " + defindex.Key);Di2015NewLine    foreach (var quality in defindex.Value)Di2015NewLine    {Di2015NewLine        Console.WriteLine("\\t quality: " + quality.Key);Di2015NewLine        foreach (var price in quality.Value)Di2015NewLine        {Di2015NewLine            Console.WriteLine("\\t\\t index: " + price.Key);Di2015NewLine            Console.WriteLine("\\t\\t\\t current price:");Di2015NewLine            Console.WriteLine("\\t\\t\\t\\t currency: " + price.Value.current.currency);Di2015NewLine            Console.WriteLine("\\t\\t\\t\\t value: " + price.Value.current.value);Di2015NewLine            Console.WriteLine("\\t\\t\\t\\t value_high: " + price.Value.current.value_high);Di2015NewLine            if (price.Value.previous != null)Di2015NewLine            {Di2015NewLine                Console.WriteLine();Di2015NewLine                Console.WriteLine("\\t\\t\\t previous price:");Di2015NewLine                Console.WriteLine("\\t\\t\\t\\t currency: " + price.Value.previous.currency);Di2015NewLine                Console.WriteLine("\\t\\t\\t\\t value: " + price.Value.previous.value);Di2015NewLine                Console.WriteLine("\\t\\t\\t\\t value_high: " + price.Value.previous.value_high);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19805223Di2015UniqueSeparatordefindex: 35Di2015NewLine         quality: 3Di2015NewLine                 index: 0Di2015NewLine                         current price:Di2015NewLine                                 currency: metalDi2015NewLine                                 value: 0.33Di2015NewLine                                 value_high: 0.66Di2015NewLine         quality: 11Di2015NewLine                 index: 0Di2015NewLine                         current price:Di2015NewLine                                 currency: keysDi2015NewLine                                 value: 39Di2015NewLine                                 value_high: 41Di2015NewLineDi2015NewLine                         previous price:Di2015NewLine                                 currency: keysDi2015NewLine                                 value: 37Di2015NewLine                                 value_high: 39Di2015NewLinedefindex: 5002Di2015NewLine         quality: 6Di2015NewLine                 index: 0Di2015NewLine                         current price:Di2015NewLine                                 currency: usdDi2015NewLine                                 value: 0.39Di2015NewLine                                 value_high: 0.42Di2015NewLinedefindex: 5022Di2015NewLine         quality: 6Di2015NewLine                 index: 1Di2015NewLine                         current price:Di2015NewLine                                 currency: metalDi2015NewLine                                 value: 1.33Di2015NewLine                                 value_high: 1.55Di2015NewLine
19805257Di2015UniqueSeparatorsomeList
19805257Di2015UniqueSeparatorforeach
19805257Di2015UniqueSeparatorz
19805257Di2015UniqueSeparatorz
19805257Di2015UniqueSeparatorsomeList
19805257Di2015UniqueSeparatorpublic int myMethod(int x, out int y, out int z)Di2015NewLine{Di2015NewLine    z = 0; // or whatever default value you likeDi2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
19805257Di2015UniqueSeparatorint
19805257Di2015UniqueSeparatorTuple<int, int, int>
19805283Di2015UniqueSeparatorvar query = (from b in db.BlogsDi2015NewLine                orderby b.TitleDi2015NewLine                select b.Title).ToList();Di2015NewLineDi2015NewLineforeach (var item in query)Di2015NewLine        {Di2015NewLine            mylistbox.items.add(item );Di2015NewLine        }Di2015NewLine
19805359Di2015UniqueSeparatorprivate T Deserialize<T>(string xmlContent)Di2015NewLine
19805359Di2015UniqueSeparatorT
19805359Di2015UniqueSeparatorvar widget = Deserialize<Widget>(someXmlString);Di2015NewLine
19805359Di2015UniqueSeparatorDeserialize
19805359Di2015UniqueSeparatorpublic
19805359Di2015UniqueSeparatorvar widgetDeserializer = new MyDeserializerClass<Widget>();Di2015NewLinevar widget = widgetDeserializer.Deserialize(someXmlString);Di2015NewLine
19805639Di2015UniqueSeparator<UserControl Di2015NewLine    x:Class="Namespace.MyUserControl"Di2015NewLine    x:Name="_this"      <-- NAME GIVEN HERE CAN BE USED AS TAGETNAME FOR STORYBOARDDi2015NewLine    ...Di2015NewLine    Tap="UserControl_Tap">Di2015NewLineDi2015NewLine    <UserControl.Resources>Di2015NewLine        <Storyboard x:Key="Expand">Di2015NewLine            <DoubleAnimation To="400" Storyboard.TargetName="_this" Storyboard.TargetProperty="Width">Di2015NewLine                <DoubleAnimation.EasingFunction>Di2015NewLine                    <CubicEase EasingMode="EaseInOut"/>Di2015NewLine                </DoubleAnimation.EasingFunction>Di2015NewLine            </DoubleAnimation>Di2015NewLine        </Storyboard>Di2015NewLineDi2015NewLine        <Storyboard x:Key="Collaps">Di2015NewLine            ...Di2015NewLine        </Storyboard>Di2015NewLine    </UserControl.Resources>Di2015NewLineDi2015NewLine    <Grid x:Name="LayoutRoot">Di2015NewLine        <Rectangle x:Name="TestRect" Fill="Red" Width="10" Height="10"/>Di2015NewLine    </Grid>Di2015NewLine</UserControl> Di2015NewLine
19805720Di2015UniqueSeparatorDateTime.ToString()
19805720Di2015UniqueSeparatorDateTime.Now
19805720Di2015UniqueSeparator.ToString()
19805795Di2015UniqueSeparatorscore += Minimax(...Di2015NewLine
19805859Di2015UniqueSeparatorICommandResponse Execute(object params)Di2015NewLine
19806017Di2015UniqueSeparatorDebug.Listeners.Add(new TextWriterTraceListener("c:\\\\temp\\\\test.txt"));Di2015NewLineDebug.AutoFlush = true;Di2015NewLineDebug.WriteLine("test");Di2015NewLine
19806138Di2015UniqueSeparatorMessenger
19806138Di2015UniqueSeparatorPublish
19806138Di2015UniqueSeparatorSubscribe
19806138Di2015UniqueSeparatorPurchasesDataEntryViewModel
19806138Di2015UniqueSeparatorFactory
19806138Di2015UniqueSeparatorFactory
19806138Di2015UniqueSeparatorprivate readonly MvxSubscriptionToken _token;Di2015NewLineDi2015NewLinepublic Factory(IMvxMessenger navigator)Di2015NewLine{Di2015NewLine    _token = navigator.Subscribe<NavigationMessage>(OnNavigationMessage);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void OnNavigationMessage(NavigationMessage navigationMessage)Di2015NewLine{Di2015NewLine    switch (navigationMessage.NavType)Di2015NewLine    {Di2015NewLine         case NavType.One:Di2015NewLine             var newOne = new One(navigationMessage.Args);Di2015NewLine             // use newOne;Di2015NewLine             // ...Di2015NewLineDi2015NewLine         // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
19806138Di2015UniqueSeparatorFactory
19806138Di2015UniqueSeparatorView
19806138Di2015UniqueSeparatorViewModel
19806138Di2015UniqueSeparatorIntent
19806138Di2015UniqueSeparatorUri
19806142Di2015UniqueSeparator[]
19806142Di2015UniqueSeparatorenum
19806142Di2015UniqueSeparatorEnum
19806142Di2015UniqueSeparatorpublic enum SecurityDi2015NewLine{Di2015NewLine    Admin,Di2015NewLine    GrantWrites,Di2015NewLine    GrantDeletes,Di2015NewLine    UserDi2015NewLine}Di2015NewLine
19806142Di2015UniqueSeparatorSecurity[]
19806142Di2015UniqueSeparatorpublic UserCrops(etc.., Security[] _Security) Di2015NewLine
19806142Di2015UniqueSeparatorbool
19806258Di2015UniqueSeparator if(FTB.Text.ToString().Trim()!="")Di2015NewLine
19806258Di2015UniqueSeparatorif(!FTB.Text.ToString().Equals(""))Di2015NewLine
19806406Di2015UniqueSeparator$.ajax({Di2015NewLine    type: "get",Di2015NewLine    url: "http://somewhere.com/service",Di2015NewLine    contentType: "application/json",Di2015NewLine    dataType: "json",Di2015NewLine    success: function (x) {Di2015NewLine        console.log(x);Di2015NewLine    }Di2015NewLine});Di2015NewLine
19806508Di2015UniqueSeparatorreadonly Semaphore _semaphore = new Semaphore(0, int.MaxValue);Di2015NewLineDi2015NewLinepublic void Enqueue<T>(T item)Di2015NewLine{Di2015NewLine     _internalQueue.Enqueue(item);Di2015NewLine     _semaphore.Release();  // Informs that deque task to unblock if waiting. Equivalent to the  WaitHandle.Set() method. Increases the semaphore counterDi2015NewLine}Di2015NewLineDi2015NewLinepublic T Dequeue()Di2015NewLine{Di2015NewLine     _semaphore.WaitOne();   // Blocks as long as there are no items in the queue. Decreases the semaphore counter when "let through". Blocks the thread as long as semaphore counter is zero.Di2015NewLine     return _internalQueue.Dequeue();Di2015NewLine}Di2015NewLine
19806550Di2015UniqueSeparatorcorflags /32BITREQ+ result.exeDi2015NewLine
19806554Di2015UniqueSeparatortelnet yourhostorip 1433Di2015NewLine
19806554Di2015UniqueSeparatorsqlcmd -S yourhostorip -U username -P passwordDi2015NewLine
19806554Di2015UniqueSeparatorvar sqlProcess = new ProcessStartInfo();Di2015NewLinesqlProcess.FileName = "SQLCMD.EXE";Di2015NewLinesqlProcess.Arguments = String.Format("-S {0} -U {1} -P {2}",Di2015NewLine                                    server,Di2015NewLine                                    user,Di2015NewLine                                    password);Di2015NewLineProcess.Start(sqlProcess);Di2015NewLine
19806598Di2015UniqueSeparatormap
19806598Di2015UniqueSeparatorSelect
19806598Di2015UniqueSeparatorKeyValuePair<TKey, TValue>
19806598Di2015UniqueSeparatorSelect
19806598Di2015UniqueSeparatorKey
19806598Di2015UniqueSeparatorValue
19806598Di2015UniqueSeparatorservice.HttpResponseHeaders.Select(kvp => kvp.Key + "->" + kvp.Value)Di2015NewLine                           .Aggregate((s, sx) => s + "," + sx);Di2015NewLine
19806847Di2015UniqueSeparatorMapper.CreateMap<EntityClass, EntityClassModel>()Di2015NewLine    .ForMember(m => m.ResolvedLogoPath, Di2015NewLine        opt => opt.ResolveUsing<FilePathResolver<EntityClass, string>>()Di2015NewLine        .ConstructedBy(() => new FilePathResolver<EntityClass, string>(p => p.LogoPath)));Di2015NewLine
19806847Di2015UniqueSeparatorMapper.CreateMap<EntityClass, EntityClassModel>()Di2015NewLine  .ForMember(m => m.ResolvedLogoPath, Di2015NewLine    opt => opt.ResolveUsing(new FilePathResolver<EntityClass, string>(p => p.LogoPath)));Di2015NewLine
19806857Di2015UniqueSeparator^[^IVXMCDL]*$Di2015NewLine
19806857Di2015UniqueSeparator[IVXMCDL]Di2015NewLine
19807331Di2015UniqueSeparatorIEnumerable<JToken>
19807331Di2015UniqueSeparatorIEnumerable<JToken>
19807331Di2015UniqueSeparatorIEnumerable<JToken> test = first.Union(second);Di2015NewLine
19807331Di2015UniqueSeparatorJArray array = new JArray(first.Union(second));Di2015NewLine
19807354Di2015UniqueSeparatorcmd.CommandText = "Select ID_SERVICE From HR.Service Where ID_PERSONEL=@ID_PERSONEL";Di2015NewLinecmd.Parameters.AddWithValue("@ID_PERSONEL", int.Parse(DropDownListVisitor.SelectedValue));Di2015NewLine
19807354Di2015UniqueSeparatorSelectedValue
19807354Di2015UniqueSeparatorDataValueField
19807354Di2015UniqueSeparatorDropDownList
19807376Di2015UniqueSeparator//before you run .Execute method try to set the followings:Di2015NewLinewDoc.MailMerge.Destination = wdSendToPrinter; // vba constantDi2015NewLinewDoc.MailMerge.SuppressBlankLines = True; Di2015NewLinewDoc.MailMerge.DataSource.FirstRecord = wdDefaultFirstRecord; //vba constantDi2015NewLinewDoc.MailMerge.DataSource.LastRecord = wdDefaultLastRecord; //vba constantDi2015NewLine//and now you need to .Execute mailmergeDi2015NewLinewDoc.MailMerge.Execute(ref missing); //or try with False parameter inside ()Di2015NewLine
19807376Di2015UniqueSeparator// ...OpenDataSourceDi2015NewLinewDoc.MailMerge.Destination = Microsoft.Office.Interop.Word.WdMailMergeDestination.wdSendToPrinter;Di2015NewLinewDoc.MailMerge.SuppressBlankLines = true;Di2015NewLinewDoc.MailMerge.DataSource.FirstRecord = (int)Microsoft.Office.Interop.Word.WdMailMergeDefaultRecord.wdDefaultFirstRecord;Di2015NewLinewDoc.MailMerge.DataSource.LastRecord = (int)Microsoft.Office.Interop.Word.WdMailMergeDefaultRecord.wdDefaultLastRecord;Di2015NewLinewDoc.MailMerge.Execute(ref missing);Di2015NewLine// wDoc.Close...Di2015NewLine
19807848Di2015UniqueSeparatorApplicantMessage
19807848Di2015UniqueSeparator<div class="row">Di2015NewLine    <div class="span2"></div>Di2015NewLine    <div class="span4">Di2015NewLine        @Html.DropDownList("Contacts[0].ContactMethod", default(ContactMethod).ValueList(), new{@class="dropdown-slim"})Di2015NewLine        <input type="text" name="Contacts[0].Name" class="new-contact-contact-details"/>Di2015NewLine    </div>Di2015NewLine    <div class="span4">Di2015NewLine        @Html.DropDownList("Contacts[1].ContactMethod", default(ContactMethod).ValueList(), new{@class="dropdown-slim"})Di2015NewLine        <input type="text" name="Contacts[1].Name" class="new-contact-contact-details"/>Di2015NewLine        <a rel="tooltip" href="#" data-original-title="Add a contact" class="icon-plus"></a>Di2015NewLine    </div>Di2015NewLine</div>Di2015NewLine
19808169Di2015UniqueSeparatorINotifyPropertyChanged
19808169Di2015UniqueSeparatorRaisePropertyChanged
19808169Di2015UniqueSeparatorClients = new ObservableCollection<ClientSet>(updatedListOfClientsHere);Di2015NewLine
19808169Di2015UniqueSeparatorClientSet
19808169Di2015UniqueSeparatorINotifyPropertyChanged
19808169Di2015UniqueSeparatorRaisePropertyChanged
19808169Di2015UniqueSeparatorClient.Name = string.empty;
19808236Di2015UniqueSeparatorXmlDocument
19808236Di2015UniqueSeparatorXmlNode newNode = document.CreateNode(XmlNodeType.Element, "product", "");Di2015NewLine
19808236Di2015UniqueSeparatorXmlNode newNode = document.CreateElement("product");Di2015NewLine
19808236Di2015UniqueSeparatornode.ParentNode.AppendChild(newNode);Di2015NewLine
19808236Di2015UniqueSeparatorinsertIntoTable()
19808236Di2015UniqueSeparatorinsertIntoTable(node.ParentNode.AppendChild(newNode));Di2015NewLine
19808236Di2015UniqueSeparatorXmlNodeList
19808236Di2015UniqueSeparatorforeach (var node in productsXml.SelectNodes("/portfolio/products/product"))Di2015NewLine{Di2015NewLine  if (node.Attributes["name"].InnertText.StartsWith("PB_"))Di2015NewLine  {Di2015NewLine    XmlNode newNode = document.CreateElement("product");Di2015NewLine    insertIntoTable(node.ParentNode.AppendChild(newNode));Di2015NewLine  }Di2015NewLineDi2015NewLine  // Move this before previous IF in case it must be processedDi2015NewLine  // before added nodeDi2015NewLine  insertIntoTable(node);Di2015NewLine}Di2015NewLine
19808236Di2015UniqueSeparatorvar list = productsXmlDi2015NewLine    .SelectNodes("/portfolio/products/product")Di2015NewLine    .Cast<XmlNode>();Di2015NewLine    .Where(x.Attributes["name"].InnertText.StartsWith("PB_"));Di2015NewLineDi2015NewLineforeach (var node in list)Di2015NewLine    node.ParentNode.AppendChild(document.CreateElement("product"));Di2015NewLineDi2015NewLineforeach (var node in productsXml.SelectNodes("/portfolio/products/product"))Di2015NewLine    insertIntoTable(node); // Or your real codeDi2015NewLine
19808236Di2015UniqueSeparatorToList()
19808236Di2015UniqueSeparatorvar list = productsXmlDi2015NewLine    .SelectNodes("/portfolio/products/product")Di2015NewLine    .Cast<XmlNode>()Di2015NewLine    .ToList();Di2015NewLineDi2015NewLinefor (int i=0; i < list.Count; ++i)Di2015NewLine{Di2015NewLine    var node = list[i];Di2015NewLineDi2015NewLine    if (node.Attributes["name"].InnertText.StartsWith("PB_"))Di2015NewLine      list.Add(node.ParentNode.AppendChild(document.CreateElement("product"))));Di2015NewLineDi2015NewLine    insertIntoTable(node);Di2015NewLine}Di2015NewLine
19808236Di2015UniqueSeparatorfor
19808236Di2015UniqueSeparatorforeach
19808236Di2015UniqueSeparatorXmlNodeList
19808268Di2015UniqueSeparatorplayer
19808335Di2015UniqueSeparatorvar utenti = from User utente in db.User.AsEnumerable()Di2015NewLine             join amico in amiciParsed on Di2015NewLine                 new { utente.Nome, utente.Cognome } equals Di2015NewLine                 new { Nome = amico.first_name, Cognome = amico.last_name }Di2015NewLine             select utente;Di2015NewLine
19808335Di2015UniqueSeparatorvar utenti = from utente in (from User utente in db.UserDi2015NewLine                             where utente.Name.StartsWith(searchText)Di2015NewLine                             select utente).AsEnumerable()Di2015NewLine             join amico in amiciParsed on Di2015NewLine                 new { utente.Nome, utente.Cognome } equals Di2015NewLine                 new { Nome = amico.first_name, Cognome = amico.last_name }Di2015NewLine             select utente;Di2015NewLine
19808430Di2015UniqueSeparatorMediaElement me = new MediaElement();Di2015NewLine// initialize and do other stuff to MediaElementDi2015NewLinethis.Background = new VisualBrush(me);Di2015NewLine
19808445Di2015UniqueSeparatorcontainer.RegisterOpenGeneric(typeof(ICachePolicy<>), typeof(DefaultCachePolicy<>),Di2015NewLine    Lifestyle.Singleton);Di2015NewLine
19808445Di2015UniqueSeparatorcontainer.RegisterSingle<ICachePolicy<MyQuery>>(new CachePolicy<MyQuery> Di2015NewLine{Di2015NewLine    AbsoluteExpiration = DateTime.Now.AddHour(2)Di2015NewLine});Di2015NewLine
19808445Di2015UniqueSeparator[CachePolicy(AbsoluteExpirationInSeconds = 1 * 60 * 60)]Di2015NewLinepublic class MyQuery : IQuery<string[]> { }Di2015NewLine
19808445Di2015UniqueSeparatorICachePolicy<T>
19808445Di2015UniqueSeparatorpublic sealed class CachingQueryHandlerDecorator<TQuery, TResult>Di2015NewLine    : IQueryHandler<TQuery, TResult>Di2015NewLine    where TQuery : IQuery<TResult>Di2015NewLine{Di2015NewLine    private static readonly bool shouldCache;Di2015NewLine    private static readonly CachingPolicySettings policy;Di2015NewLineDi2015NewLine    private readonly IQueryHandler<TQuery, TResult> _handler;Di2015NewLine    private readonly ObjectCache _cache;Di2015NewLine    private readonly ILog _log;Di2015NewLineDi2015NewLine    static CachingQueryHandlerDecorator()Di2015NewLine    {Di2015NewLine        var attribute = typeof(TQuery).GetCustomAttribute<CachePolicyAttribute>();Di2015NewLineDi2015NewLine        if (attribute != null)Di2015NewLine        {Di2015NewLine            shouldCache = true;Di2015NewLine            policy = attribute.Policy;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public CachingQueryHandlerDecorator(Di2015NewLine        IQueryHandler<TQuery, TResult> handler,Di2015NewLine        ObjectCache cache,Di2015NewLine        ILog log)Di2015NewLine    {Di2015NewLine        _handler = handler;Di2015NewLine        _cache = cache;Di2015NewLine        _log = log;Di2015NewLine    }Di2015NewLineDi2015NewLine    public TResult Handle(TQuery query)Di2015NewLine    {Di2015NewLine        if (!shouldCache)Di2015NewLine        {Di2015NewLine            return this._handler.handle(query);Di2015NewLine        }Di2015NewLineDi2015NewLine        // do your caching stuff here.Di2015NewLine    }Di2015NewLine
19808677Di2015UniqueSeparatorTextBox
19808677Di2015UniqueSeparatorPreviewKeyDown
19808677Di2015UniqueSeparatorPreviewTextInput
19808677Di2015UniqueSeparatorTextBox
19808677Di2015UniqueSeparatorprivate void TextBox_PreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    // Do your text filtering here using e.Key and e.HandledDi2015NewLine}Di2015NewLineDi2015NewLineprivate void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)Di2015NewLine{Di2015NewLine    // Do your text filtering here using e.Text and e.HandledDi2015NewLine}Di2015NewLine
19808888Di2015UniqueSeparatorprivate List<Rectangle> generateRectList()Di2015NewLine{Di2015NewLine    var aRectZero = new List<Rectangle>();Di2015NewLine    for (int i = 0; i < 4; i++)Di2015NewLine        aRectZero.Add(m_Rectdef);Di2015NewLineDi2015NewLine    return aRectZero;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ResetAllData()Di2015NewLine{        Di2015NewLine    m_aRectWBLD.Clear();Di2015NewLineDi2015NewLine    for (int i = 0; i < 2; i++)Di2015NewLine    {Di2015NewLine        m_aRectWBLD.Add(generateRectList());Di2015NewLine    }Di2015NewLineDi2015NewLine    m_aRectWBLD[0][0] = new Rectangle(0, 0, 100, 100);Di2015NewLine}Di2015NewLine
19808888Di2015UniqueSeparatoraRectZero
19808888Di2015UniqueSeparatorm_aRectWBLD
19808888Di2015UniqueSeparatorList
19808888Di2015UniqueSeparatorm_aRectWBLD
19808888Di2015UniqueSeparatorm_aRectWBLD[0][0] = new Rectangle(0, 0, 100, 100);
19808888Di2015UniqueSeparator0
19808888Di2015UniqueSeparator0
19808888Di2015UniqueSeparatorm_aRectWBLD
19808888Di2015UniqueSeparatorm_aRectWBLD[0] // List xDi2015NewLinem_aRectWBLD[1] // List xDi2015NewLine
19808888Di2015UniqueSeparatorList
19808888Di2015UniqueSeparatorList
19808888Di2015UniqueSeparatorreadonly
19808888Di2015UniqueSeparatorRectangle
19808913Di2015UniqueSeparatorSingleInputRotationMode
19808913Di2015UniqueSeparatorSingleInputRotationMode.Disabled
19808980Di2015UniqueSeparatorstring input = "Hello <#= UserName #> from <#= City #>. Bye, <#= UserName #>!";Di2015NewLinevar replacements = new Dictionary<string, string>Di2015NewLine{Di2015NewLine    { "UserName", "Bob" },Di2015NewLine    { "City", "Atlanta" }Di2015NewLine};Di2015NewLineDi2015NewLinevar result = Regex.Replace(input, @"\\<#=\\s*(\\w+)\\s*#\\>", Di2015NewLine                           m => replacements[m.Groups[1].Value] );Di2015NewLine
19808980Di2015UniqueSeparatorvar result = Regex.Replace(input, @"\\<#=\\s*(\\w+)\\s*#\\>", m =>Di2015NewLine{Di2015NewLine    string key = m.Groups[1].Value;Di2015NewLine    if (!replacements.ContainsKey(key))Di2015NewLine    {Di2015NewLine        Logger.Warn("Unknown key found: " + key); // Nice to log this caseDi2015NewLine        return m.Groups[0].Value; // throw, return default, or keep unchangedDi2015NewLine    }Di2015NewLineDi2015NewLine    return replacements[key];Di2015NewLine});Di2015NewLine
19808980Di2015UniqueSeparator"Hello Bob from Atlanta. Bye, Bob!"Di2015NewLine
19808989Di2015UniqueSeparatorvar dates = new[] Di2015NewLine    { Di2015NewLine        new DateTime(2013, 11, 6, 12, 56, 1),Di2015NewLine        new DateTime(2013, 11, 6, 12, 56, 0),  Di2015NewLine        new DateTime(2013, 11, 6, 12, 56, 50),  Di2015NewLine        new DateTime(2013, 11, 6, 12, 10, 0)  Di2015NewLine    };Di2015NewLinevar q = dates.GroupBy(d => d.Ticks / TimeSpan.TicksPerMinute)Di2015NewLine       .Select(g => g.First());Di2015NewLine
19808989Di2015UniqueSeparator2013-11-06 12:56:01Di2015NewLine2013-11-06 12:10:00Di2015NewLine
19809005Di2015UniqueSeparatorvar gridView = sender as GridView;Di2015NewLinevar dataSource = gridView.DataSource as IEnumerable<YourDataObject>;Di2015NewLinee.Row.Cells[3].Text = dataSource.Sum(item => item.YourProperty).ToString();Di2015NewLine
19809353Di2015UniqueSeparatorstring output = Regex.Replace(input, "(<tag )abc(=\\"hello world\\">)", "$1def$2");Di2015NewLine
19809353Di2015UniqueSeparator"abc"
19809353Di2015UniqueSeparator"<tag "
19809353Di2015UniqueSeparator"="hello world">"
19809353Di2015UniqueSeparatorstring output = Regex.Replace(input, "(?<=<tag )abc(?==\\"hello world\\")", "def");Di2015NewLine
19809558Di2015UniqueSeparatorOnApplyTemplate
19809558Di2015UniqueSeparatorCustomControl DependencyProperty
19809558Di2015UniqueSeparatorpublic override void OnApplyTemplate()Di2015NewLine{Di2015NewLine    // Get access to parent control here, thenDi2015NewLine    parentControl.SizeChanged += Parent_SizeChanged;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Parent_SizeChanged(object sender, SizeChangedEventArgs e)Di2015NewLine{Di2015NewLine    Dimension = e.NewSize;Di2015NewLine}Di2015NewLine
19809638Di2015UniqueSeparator$("#report tbody tr").each(function() {Di2015NewLine    // do something here with $(this) which is the row Di2015NewLine});Di2015NewLine
19809729Di2015UniqueSeparatorDim listaRows = ds.Tables(0).AsEnumerable(). _Di2015NewLine                Cast(Of DataRow).ToList()Di2015NewLineDi2015NewLineDim valores = New HashSet(Of String) _Di2015NewLine                          (listaRows.Select(Function(r) r.Field(Of String)("FICHERO")))Di2015NewLineDi2015NewLineDim query = _Di2015NewLine                listaFichero.Where(Function(l) _Di2015NewLine                                       Not valores.Contains(l.FicheroParsed)).ToListDi2015NewLine
19809772Di2015UniqueSeparator public class TestableCsvActionResult : CsvActionResultDi2015NewLine {Di2015NewLine     public TestableCsvActionResult(DataTable dt)Di2015NewLine    : base(dt)Di2015NewLine     {Di2015NewLine     }Di2015NewLineDi2015NewLine     public new void WriteFile(HttpResponseBase response)Di2015NewLine     { base.WriteFile(response); }Di2015NewLine }Di2015NewLine
19809772Di2015UniqueSeparator    [TestMethod]Di2015NewLine    public void CsvActionResultController_ExportToCSV_VerifyResponseContentTypeIsTextCsv()Di2015NewLine    {Di2015NewLine        // ArrangeDi2015NewLine        var httpResponseBaseMock = new Mock<HttpResponseBase>();Di2015NewLine        httpResponseBaseMock.Setup(x => x.OutputStream).Returns(new Mock<Stream>().Object);Di2015NewLine        var sut = new CsvActionResultTestClass(new DataTable());Di2015NewLineDi2015NewLine        //ActDi2015NewLine        sut.WriteFile(httpResponseBaseStub.Object);Di2015NewLineDi2015NewLine        //VerifyDi2015NewLine        httpResponseBaseMock.VerifySet(response => response.ContentType = "text/csv");Di2015NewLine    }Di2015NewLine
19809816Di2015UniqueSeparatorAppendTag
19809816Di2015UniqueSeparatorGetParameters
19809816Di2015UniqueSeparatorArticleInfo
19809866Di2015UniqueSeparatorViewBag
19809866Di2015UniqueSeparatorViewData
19809866Di2015UniqueSeparatorViewDataDictionary
19809866Di2015UniqueSeparatorViewBag.SomeKey
19809866Di2015UniqueSeparatorViewData["SomeKey"]
19809866Di2015UniqueSeparatorforeach(var item in myDictionary)Di2015NewLine{Di2015NewLine    ViewData[item.Key] = item.Value;Di2015NewLine}Di2015NewLine
19809866Di2015UniqueSeparatorViewData["Key"]
19809866Di2015UniqueSeparatorViewBag.Key
19809974Di2015UniqueSeparatorpeverify
19809974Di2015UniqueSeparatorAppendInPlace
19810016Di2015UniqueSeparatorprivate void btend_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    try{Di2015NewLine        tala1 = Convert.ToInt32(tbtala1.Text);Di2015NewLine        tala2 = Convert.ToInt32(tbtala2.Text);Di2015NewLine        svar = Convert.ToInt32(tbsvar.Text);Di2015NewLineDi2015NewLine        if (svar == (tala1 * tala2))Di2015NewLine        {Di2015NewLine            MessageBox.Show("RÃ©tt!");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show("Rangt... :(");Di2015NewLine        }Di2015NewLine    }catch{Di2015NewLine        MessageBox.Show("Invalid input");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19810207Di2015UniqueSeparatorusing
19810207Di2015UniqueSeparatorSystem.ComponentModel.Composition.Hosting
19810207Di2015UniqueSeparatorComposablePart
19810207Di2015UniqueSeparatorobject
19810230Di2015UniqueSeparator    public static TreeNodeCollection SqlToTreeNodeHierarchy(this SqlDataReader dataReader, TreeNode parent)Di2015NewLine    {Di2015NewLine        // create a parent TreeNode if we don't have one, so we can anchor the new TreeNodes to itDi2015NewLine        // I think this will work better than a list since we might be given a real parent..Di2015NewLine        if (parent == null)Di2015NewLine        {Di2015NewLine            parent = new TreeNode("topNode");Di2015NewLine        }Di2015NewLineDi2015NewLine        while (dataReader.Read())Di2015NewLine        {Di2015NewLine            //at the beginning of each row, reset the parentDi2015NewLine            var parentNode = parent;Di2015NewLineDi2015NewLine            for (var i = 0; i < dataReader.FieldCount; i++)Di2015NewLine            {Di2015NewLine                // Adds a new TreeNode as a child of parentNode if it doesn't already existDi2015NewLine                // at this level, else it will return the existing TreeNode and save Di2015NewLine                // it onto parentNode. This way, subsequent TreeNodes will always be a child Di2015NewLine                // of this one, until a new row begins and the parent TreeNode is reset.Di2015NewLine                parentNode = AddUniqueNode(dataReader[i].ToString(), parentNode);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return parent.Nodes;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static TreeNode AddUniqueNode(string text, TreeNode parentNode)Di2015NewLine    {Di2015NewLine        // if parentNode is null, create new treeNode and return itDi2015NewLine        if (parentNode == null)Di2015NewLine        {Di2015NewLine            return new TreeNode {Name = text, Text = text};Di2015NewLine        }Di2015NewLineDi2015NewLine        // if parentNode is not null, do a find for child nodes at this level containing the keyDi2015NewLine        // we're after (text and name have the same value) and return the first one it findsDi2015NewLine        foreach (var childNode in parentNode.Nodes.Find(text, false))Di2015NewLine        {Di2015NewLine            return childNode;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Node does not yet exist, so just add a new node to the parentNode and return thatDi2015NewLine        return parentNode.Nodes.Add(text, text);Di2015NewLine    }Di2015NewLine
19810230Di2015UniqueSeparatorusing (var sqlConn = new SqlConnection(connectionString))Di2015NewLine{Di2015NewLine    sqlConn.Open();Di2015NewLineDi2015NewLine    const string query = "SELECT orderDate, customerName from MAIN";Di2015NewLineDi2015NewLine    using (var sqlCommand = new SqlCommand(query, sqlConn))Di2015NewLine    {Di2015NewLine        using (var sqlDataReader = sqlCommand.ExecuteReader())Di2015NewLine        {Di2015NewLine            var treeNodeCollection = sqlDataReader.SqlToTreeNodeHierarchy(null);Di2015NewLineDi2015NewLine            foreach (TreeNode treeNode in treeNodeCollection)Di2015NewLine            {Di2015NewLine                nativeTreeView.Nodes.Add(treeNode);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19810394Di2015UniqueSeparatorFile.ReadLines
19810394Di2015UniqueSeparatorString.Split
19810394Di2015UniqueSeparatorvar lines = File.ReadLines(@"C:\\Us...nka\\example.txt");Di2015NewLinevar data = lines.Select(l => l.Split());Di2015NewLine
19810394Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public int PersonID { get; set; }Di2015NewLine    public string PersonName { get; set; }Di2015NewLine}Di2015NewLine
19810394Di2015UniqueSeparatorList<Person> allPersons = dataDi2015NewLine   .Where(arr => arr.Length >= 2 && arr[1].Trim().All(Char.IsDigit))Di2015NewLine   .Select(arr => new PersonDi2015NewLine   {Di2015NewLine       PersonName = arr[0].Trim(),Di2015NewLine       PersonID = int.Parse(arr[1].Trim())Di2015NewLine   })Di2015NewLine  .ToList();Di2015NewLine
19810394Di2015UniqueSeparatorBindingSource
19810394Di2015UniqueSeparatorComboBox
19810394Di2015UniqueSeparatorDisplayMember
19810394Di2015UniqueSeparatorValueMember
19810394Di2015UniqueSeparatorvar bindingSourcePersons = new BindingSource();Di2015NewLinebindingSourcePersons.DataSource = allPersons;Di2015NewLinepersonComboBox.DataSource = bindingSourcePersons.DataSource;Di2015NewLinepersonComboBox.ValueMember = "PersonID";Di2015NewLinepersonComboBox.DisplayMember = "PersonName";Di2015NewLine
19810447Di2015UniqueSeparatorInitializeComponent()
19810447Di2015UniqueSeparator: this()
19810447Di2015UniqueSeparatorpublic New_Invoice(string oper, int invoiceno) : this()Di2015NewLine{Di2015NewLine    textEdit5.Text = invoiceno.ToString(); // error shown in this lineDi2015NewLine    textEdit5.Visible = false;Di2015NewLine    getOper = oper;Di2015NewLine} Di2015NewLine
19810447Di2015UniqueSeparatorusing(var form = new NewInvoice())Di2015NewLine{Di2015NewLine    form.Operation = ...;     // (or maybe form.SetInvoiceNumber(...) if theDi2015NewLine    form.InvoiceNumber = ...; // logic is non-trivial)Di2015NewLine    // show the form, etcDi2015NewLine}Di2015NewLine
19810515Di2015UniqueSeparatorAssembly.GetAssembly(typeof(CP.Proj.ILogger)).GetName().NameDi2015NewLine
19810515Di2015UniqueSeparatorstring name = Assembly.GetCallingAssembly().GetName().Name;Di2015NewLine
19810515Di2015UniqueSeparatorpublic static string GetAssemblyShortName()Di2015NewLine{Di2015NewLine    return Assembly.GetCallingAssembly().GetName().Name;Di2015NewLine}Di2015NewLine
19810553Di2015UniqueSeparatorWaveFileWriter
19810553Di2015UniqueSeparatorfloat[] floatOutput = output.Select(s => (float)s).ToArray();Di2015NewLineWaveFormat waveFormat = new WaveFormat(16000, 16, 1);Di2015NewLineusing (WaveFileWriter writer = new WaveFileWriter("C:\\\\track1.wav", waveFormat))Di2015NewLine{Di2015NewLine    writer.WriteSamples(floatOutput, 0, floatOutput.Length);Di2015NewLine}Di2015NewLine
19810657Di2015UniqueSeparatorRegex.IsMatch("test","te[smf]t");Di2015NewLine
19810873Di2015UniqueSeparatorGame
19810873Di2015UniqueSeparatorBombenGenerieren
19810873Di2015UniqueSeparatorBombenGenerieren
19810873Di2015UniqueSeparatorBombenGenerieren
19810873Di2015UniqueSeparatorGame.BombenGenerieren
19810873Di2015UniqueSeparatorGame
19810873Di2015UniqueSeparatorpublic static Game()Di2015NewLine{Di2015NewLine    BombenGenerieren(anzahlMinen);Di2015NewLine}Di2015NewLine
19810873Di2015UniqueSeparatorGame
19810873Di2015UniqueSeparatorBombenGenerieren
19810873Di2015UniqueSeparatorGame
19811193Di2015UniqueSeparatorid
19811193Di2015UniqueSeparatornameOfPerson
19811193Di2015UniqueSeparatornameOfPerson
19811193Di2015UniqueSeparatorid
19811193Di2015UniqueSeparatorpublic IPerson GetSelectedPerson(string id) Di2015NewLine
19811193Di2015UniqueSeparatornameOfPerson
19811193Di2015UniqueSeparator// place after default routeDi2015NewLineconfig.Routes.MapHttpRoute(Di2015NewLine    name: "PersonByNameApi",Di2015NewLine    routeTemplate: "api/{controller}/{nameOfPerson}",Di2015NewLine    defaults: newDi2015NewLine    {Di2015NewLine        nameOfPerson = RouteParameter.OptionalDi2015NewLine    }Di2015NewLine);Di2015NewLine
19811291Di2015UniqueSeparatorWindow
19811291Di2015UniqueSeparatorUserControl
19811291Di2015UniqueSeparatorClose
19811291Di2015UniqueSeparator    private void btnClose_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine         Window parentWindow = Window.GetWindow((DependencyObject)sender);Di2015NewLine         if (parentWindow != null)Di2015NewLine         {Di2015NewLine             parentWindow.Close();Di2015NewLine         }Di2015NewLine    }Di2015NewLine
19811342Di2015UniqueSeparatorIList list = val as IList; // note: non-generic; you could alsoDi2015NewLine                           // use IEnumerable, but that has someDi2015NewLine                           // edge-cases; IList is more predictableDi2015NewLineif(list != null)Di2015NewLine{Di2015NewLine    foreach(object obj in list)Di2015NewLine    {Di2015NewLine        strList.Add(obj.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19811480Di2015UniqueSeparatorTouchLocationState.Released
19811480Di2015UniqueSeparatorhttp://msdn.microsoft.com/en-us/library/microsoft.xna.framework.input.touch.touchlocationstate.aspxDi2015NewLine
19811589Di2015UniqueSeparator    public override int SaveChanges()Di2015NewLine    {Di2015NewLine        using (var scope = new TransactionScope())Di2015NewLine        {Di2015NewLine            var addedEntries = ChangeTracker.Entries().Where(e => e.State == EntityState.Added).ToList();Di2015NewLine            var modifiedEntries = ChangeTracker.Entries().Where(e => e.State == EntityState.Deleted || e.State == EntityState.Modified).ToList();Di2015NewLineDi2015NewLine            foreach (var entry in modifiedEntries)Di2015NewLine            {Di2015NewLine                ApplyAuditLog(entry);Di2015NewLine            }Di2015NewLineDi2015NewLine            int changes = base.SaveChanges();Di2015NewLine            foreach (var entry in addedEntries)Di2015NewLine            {Di2015NewLine                ApplyAuditLog(entry, LogOperation.CreateEntity);Di2015NewLine            }Di2015NewLineDi2015NewLine            base.SaveChanges();Di2015NewLine            scope.Complete();Di2015NewLine            return changes;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ApplyAuditLog(DbEntityEntry entry)Di2015NewLine    {Di2015NewLine        LogOperation operation;Di2015NewLine        switch (entry.State)Di2015NewLine        {Di2015NewLine            case EntityState.Added:Di2015NewLine                operation = LogOperation.CreateEntity;Di2015NewLine                break;Di2015NewLine            case EntityState.Deleted:Di2015NewLine                operation = LogOperation.DeleteEntity;Di2015NewLine                break;Di2015NewLine            case EntityState.Modified:Di2015NewLine                operation = LogOperation.UpdateEntity;Di2015NewLine                break;Di2015NewLine            default:Di2015NewLine                throw new ArgumentOutOfRangeException();Di2015NewLine        }Di2015NewLineDi2015NewLine        ApplyAuditLog(entry, operation);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ApplyAuditLog(DbEntityEntry entry, LogOperation logOperation)Di2015NewLine    {Di2015NewLine        ILog entity = entry.Entity as ILog;Di2015NewLineDi2015NewLine        if (entity != null)Di2015NewLine        {Di2015NewLine            AuditLog log = new AuditLogDi2015NewLine            {Di2015NewLine                Created = DateTime.Now,Di2015NewLine                Entity = entry.Entity.GetType().Name,Di2015NewLine                EntityId = entity.Id,Di2015NewLine                Operation = logOperation,Di2015NewLine            };Di2015NewLine            AuditLog.Add(log);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19811660Di2015UniqueSeparatorConvert.ChangeType
19811660Di2015UniqueSeparatordouble
19811660Di2015UniqueSeparatorNullable.GetUnderlyingType
19811660Di2015UniqueSeparatorreturn value == DBNull.Value ? default(T) : (T)Convert.ChangeType(value,Di2015NewLine      Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T));Di2015NewLine
19811660Di2015UniqueSeparatorNullable<T>
19811660Di2015UniqueSeparatorpublic static T? GetValue<T>(object value) where T : structDi2015NewLine{Di2015NewLine    if(value == null || value is DBNull) return null;Di2015NewLine    if(value is T) return (T)value;Di2015NewLine    return (T)Convert.ChangeType(value, typeof(T));Di2015NewLine}Di2015NewLine
19811716Di2015UniqueSeparatorpublic class CategoryDi2015NewLine{Di2015NewLine  IEnumerable<Category> Children {get;set;}Di2015NewLine  IEnumerable<Product> Products {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic IEnumerable<Category> GetCategory(int? parent)Di2015NewLine{Di2015NewLine  var result = new List<Category>();Di2015NewLine  foreach (var cat in categories.Where(p => p.parentId = parent)Di2015NewLine  {Di2015NewLine     var generatedCategory = new Category();Di2015NewLine     generatedCategory.Children = GetCategory(cat.id);Di2015NewLine     generatedCategory.Products = products.Where(p => p.CategoryId = cat.CategoryId);Di2015NewLine     result.Add(generatedCategory);Di2015NewLine  }Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
19811977Di2015UniqueSeparator ^[a-zA-Z]+$Di2015NewLine
19811987Di2015UniqueSeparatorfor (int i = 0; i < page.Request.Form.Keys.Count; i++)Di2015NewLine        {Di2015NewLine            if (page.Request.Form.Keys[i].Contains("GelleryImagesPager"))Di2015NewLine            {Di2015NewLine               ...Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19812076Di2015UniqueSeparatormock.Setup(x => x.Calculate(It.IsAny<ICredentials>()))Di2015NewLine    .Callback((ICredentials c) => { c.Password = "Pa$$w0rd"; });Di2015NewLine
19812076Di2015UniqueSeparatorICredentials
19812076Di2015UniqueSeparatorCalculate
19812076Di2015UniqueSeparatorPassword
19812154Di2015UniqueSeparatorModel
19812154Di2015UniqueSeparatorModel
19812162Di2015UniqueSeparatorHttpWebRequest
19812162Di2015UniqueSeparatorCredentials
19812170Di2015UniqueSeparatorpublic static class HelperDi2015NewLine{Di2015NewLine    public static U SafeCast<T, U>(this T obj, Expression<Func<T, object>> memberExpression, U defaultValue)Di2015NewLine        where T : classDi2015NewLine        where U : classDi2015NewLine    {Di2015NewLine        if (obj == null)Di2015NewLine        {Di2015NewLine            return defaultValue;Di2015NewLine        }Di2015NewLineDi2015NewLine        var me = memberExpression.Body as MemberExpression;Di2015NewLine        if (me == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentException("memberExpression must be MemberExpression");Di2015NewLine        }Di2015NewLineDi2015NewLine        // TODO : Check for fields, not only propertiesDi2015NewLine        var memberValue = obj.GetType().GetProperty(me.Member.Name).GetValue(obj) as U;Di2015NewLine        if (memberValue != null)Di2015NewLine        {Di2015NewLine            return memberValue;Di2015NewLine        }Di2015NewLineDi2015NewLine        return defaultValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19812170Di2015UniqueSeparatorvar someObj = new SomeObj();Di2015NewLinevar defB = new B();Di2015NewLinevar res = someObj.SafeCast(a => a.Parent, default(A)).SafeCast(a => a.Owner, defB).SafeCast(a => a.Whatever, default(C));Di2015NewLine
19812198Di2015UniqueSeparatorclass
19812198Di2015UniqueSeparatorstruct
19812198Di2015UniqueSeparatorVector temp = v;Di2015NewLinefor(int i = 0; i < 3; i++)Di2015NewLine{Di2015NewLine    temp[i] = 3.0;Di2015NewLine}Di2015NewLinev = temp;Di2015NewLine
19812198Di2015UniqueSeparatorpublic struct VectorDi2015NewLine{Di2015NewLine    ....Di2015NewLineDi2015NewLine    public Vector WithX(double x)Di2015NewLine    {Di2015NewLine        return new Vector(x, this.y, this.z);Di2015NewLine    }Di2015NewLine
19812230Di2015UniqueSeparatorChunkify
19812230Di2015UniqueSeparator/// <summary>Di2015NewLine/// Divides an enumeration into smaller (same-sized) chunks.Di2015NewLine/// </summary>Di2015NewLine/// <typeparam name="T">The type of the elements within the sequence.</typeparam>Di2015NewLine/// <param name="source">The sequence which should be breaked into chunks.</param>Di2015NewLine/// <param name="size">The size of each chunk.</param>Di2015NewLine/// <returns>An IEnumerable<T> that contains an IEnumerable<T> for each chunk.</returns>Di2015NewLinepublic static IEnumerable<IEnumerable<T>> Chunkify<T>(this IEnumerable<T> source, int size)Di2015NewLine{Di2015NewLine    if (source == null)Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException("source");Di2015NewLine    }Di2015NewLineDi2015NewLine    if (size < 1)Di2015NewLine    {Di2015NewLine        throw new ArgumentOutOfRangeException("size");Di2015NewLine    }Di2015NewLineDi2015NewLine    return ChunkifyImpl(source, size);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static IEnumerable<IEnumerable<T>> ChunkifyImpl<T>(IEnumerable<T> source, int size)Di2015NewLine{Di2015NewLine    using (var iter = source.GetEnumerator())Di2015NewLine    {Di2015NewLine        while (iter.MoveNext())Di2015NewLine        {Di2015NewLine            var chunk = new List<T>(size);Di2015NewLine            chunk.Add(iter.Current);Di2015NewLineDi2015NewLine            for (int i = 1; i < size && iter.MoveNext(); i++)Di2015NewLine            {Di2015NewLine                chunk.Add(iter.Current);Di2015NewLine            }Di2015NewLineDi2015NewLine            yield return chunk;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19812230Di2015UniqueSeparatorforeach(var chunk in EntriesList.Chunkify(100))Di2015NewLine{Di2015NewLine    service.InsertEntries(chunk);Di2015NewLine    Thread.Sleep(5000);Di2015NewLine}Di2015NewLine
19812236Di2015UniqueSeparatorprivate void rangeValidate(TextBox textbox)Di2015NewLine
19812236Di2015UniqueSeparatorTextChanged
19812236Di2015UniqueSeparatorprivate void rangeValidate(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    TextBox textbox = sender as TextBox;Di2015NewLine    int mark = Convert.ToInt32(textbox.Text);Di2015NewLine    if (mark >= 0 & mark >= 100)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Please enter a number betwen 0 and 100");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19812336Di2015UniqueSeparatorDataGrid
19812336Di2015UniqueSeparatorDataGrid.ItemsSource
19812336Di2015UniqueSeparatorforeach (Report report in Reports)Di2015NewLine{Di2015NewLine    report.StatusCode = StatusText[report.StatusCode];Di2015NewLine}Di2015NewLine
19812336Di2015UniqueSeparatorStatusCode
19812336Di2015UniqueSeparatorReport
19812336Di2015UniqueSeparatorpublic string StatusDescription { get; set; }Di2015NewLine
19812445Di2015UniqueSeparator$('#SearchString').parent('form').submit(function(e){Di2015NewLine    e.preventDefault();Di2015NewLine});Di2015NewLine
19812447Di2015UniqueSeparatorwhile (Reader2.Read()==false)Di2015NewLine
19812447Di2015UniqueSeparatorwhile (Reader2.Read())Di2015NewLine
19812447Di2015UniqueSeparatorIDisposable
19812456Di2015UniqueSeparator     public Customer Deserialize(string str)Di2015NewLine    {Di2015NewLine        **Customer customer = new Customer();**Di2015NewLine        var strCustomer = str.Split(',');Di2015NewLineDi2015NewLine        customer.Id = int.Parse(strCustomer[0]);Di2015NewLine        customer.FirstName = strCustomer[1];Di2015NewLine        customer.LastName = strCustomer[2];Di2015NewLine        customer.Age = int.Parse(strCustomer[3]);Di2015NewLine        customer.Country = strCustomer[4];Di2015NewLineDi2015NewLine        return customer;Di2015NewLine    }Di2015NewLine
19812546Di2015UniqueSeparatorOnMessage
19812576Di2015UniqueSeparatorreturn new List<Car>Di2015NewLine{Di2015NewLine    new Car {Di2015NewLine        CarId = Guid.NewGuid(),Di2015NewLine        DepoId = now what // it depends, is this a required relationship?Di2015NewLine    },Di2015NewLine    new Car {Di2015NewLine    }Di2015NewLine};Di2015NewLine
19812576Di2015UniqueSeparatorprotected override void Seed(AutoDb context)Di2015NewLine{Di2015NewLine    new Autokereskedes.Models.SampleData.Users().List()Di2015NewLine        .ForEach(u=>context.Users.Add(u));Di2015NewLine    var cars = new Autokereskedes.Models.SampleData.Cars().List();Di2015NewLine    var depos = new Autokereskedes.Models.SampleData.Depos().List();Di2015NewLine    foreach (var car in cars)Di2015NewLine    {Di2015NewLine        car.DepoId = depos.FirstOrDefault(x => x.DepoId == ...?);Di2015NewLineDi2015NewLine        context.Cars.Add(car);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19812576Di2015UniqueSeparatorvar depos = new Autokereskedes.Models.SampleData.Depos().List();Di2015NewLinedepos.ForEach(d => context.Depos.Add(d));Di2015NewLine//context.SaveChanges(); no need for this since your id's are Guid'sDi2015NewLinevar cars = new Autokereskedes.Models.SampleData.Cars().List(depos);Di2015NewLineDi2015NewLinepublic List<Car> List(IEnumerable<Depo> depos)Di2015NewLine{Di2015NewLine    // now you have depos to look for id's inDi2015NewLine    return new List<Car>Di2015NewLine    {Di2015NewLine        new Car {Di2015NewLine            CarId = Guid.NewGuid(),Di2015NewLine            DepoId = depos.SingleOrDefault(x => [your predicate]),Di2015NewLine        },Di2015NewLine        new Car {Di2015NewLine        }Di2015NewLine    };Di2015NewLine}Di2015NewLine
19812708Di2015UniqueSeparatoriframe
19812708Di2015UniqueSeparatorvar data = { "GeneratePdf": false }Di2015NewLineDi2015NewLinevar inputs = '';Di2015NewLineDi2015NewLine$.each(data, function (key, value) {Di2015NewLine    inputs += '<input type="hidden" name="' + key + '" value="' + value + '" />';Di2015NewLine});Di2015NewLineDi2015NewLinevar f = $('<form action="/DownloadHandler.ashx" method="POST">' + inputs + '</form>');Di2015NewLineDi2015NewLineDi2015NewLinevar iframe = $('<iframe src="about:blank"/>')  // should be made tiny/transparent with some cssDi2015NewLine              .appendTo('body');Di2015NewLineDi2015NewLineiframe.contents().find('html').append(f);Di2015NewLinef.submit().remove();Di2015NewLine
19812741Di2015UniqueSeparatorvar query = from r in generateData().AsEnumerable()Di2015NewLine            group r by r.Field<string>("CustomerLocation") into gDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                CustomerLocation = g.Key,Di2015NewLine                SumSubTotal = g.Sum(r => r.Field<int>("SubTotal")),Di2015NewLine                OrderCount = g.Count(),Di2015NewLine                SumCustomerDebt = Di2015NewLine                      g.GroupBy(r => r.Field<int>("CustomerID"))Di2015NewLine                       .Sum(cg => cg.First().Field<int>("CustomerDebt"))Di2015NewLine            };Di2015NewLine
19812789Di2015UniqueSeparatoreval
19812820Di2015UniqueSeparator// Event hander that accepts a parameter of the EventArgs type. Di2015NewLineprivate void MultiHandler(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    label1.Text = System.DateTime.Now.ToString();Di2015NewLine}Di2015NewLineDi2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    // You can use a method that has an EventArgs parameter, Di2015NewLine    // although the event expects the KeyEventArgs parameter. Di2015NewLine    this.button1.KeyDown += this.MultiHandler;Di2015NewLineDi2015NewLine    // You can use the same method  Di2015NewLine    // for an event that expects the MouseEventArgs parameter. Di2015NewLine    this.button1.MouseClick += this.MultiHandler;Di2015NewLine}Di2015NewLine
19812892Di2015UniqueSeparator_del
19812892Di2015UniqueSeparatorstatic MyDel AI(int c) Di2015NewLine{Di2015NewLine    if(c == 'a')Di2015NewLine    {Di2015NewLine        return Attack;Di2015NewLine    }Di2015NewLine    if(c == 'i')Di2015NewLine    {Di2015NewLine        return Idle;Di2015NewLine    }Di2015NewLine    if (c == 's')Di2015NewLine    {Di2015NewLine        return SwingSword;Di2015NewLine    }Di2015NewLine    if (c == 'w')Di2015NewLine    {Di2015NewLine        return (MyDel)Attack + SwingSword;Di2015NewLine    }Di2015NewLine    return Idle;Di2015NewLine}Di2015NewLine
19812892Di2015UniqueSeparatorref
19812892Di2015UniqueSeparatorref
19813137Di2015UniqueSeparatorItems
19813137Di2015UniqueSeparatorlistBox1.Items[listBox1.Items.Count - 1] + " -> This string is added";Di2015NewLine
19813173Di2015UniqueSeparator        public DataTable getMyTable()Di2015NewLine        {           Di2015NewLine            openLocalDatabaseConnection();Di2015NewLine            //used for populating the DataGridViewDi2015NewLine            SqlCommand _com = new SqlCommand(string.Format("select * from tab.myTable where Country = 'Angola' "), _conn);Di2015NewLine            _com.CommandTimeout = _command_timeout;Di2015NewLineDi2015NewLine            DataSet _ds = new DataSet();Di2015NewLine            SqlDataAdapter _adapt = new SqlDataAdapter();Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                _adapt.SelectCommand = _com;Di2015NewLine                int i = _adapt.Fill(_ds, "Asset_Transactions");Di2015NewLine                if (_ds.Tables.Count > 0)Di2015NewLine                {Di2015NewLine                    return _ds.Tables[0];Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    return makeErrorTable("GetMyTable", "No Table Returned for myTable");Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (Exception e)Di2015NewLine            {Di2015NewLine                return makeErrorTable("GetMyTable", e.Message);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19813177Di2015UniqueSeparatorUrlHelper
19813177Di2015UniqueSeparatorApplication_Start
19813177Di2015UniqueSeparatorHttpContextBase
19813177Di2015UniqueSeparatorRequestContext
19813177Di2015UniqueSeparatorMoq
19813177Di2015UniqueSeparatorHttpContext
19813177Di2015UniqueSeparatorRequestContext
19813177Di2015UniqueSeparatorUrlHelper
19813380Di2015UniqueSeparatorCreating FileSystemWatcher
19813380Di2015UniqueSeparator//Define this in the clas levelDi2015NewLineFileSystemWatcher watcher = new FileSystemWatcher();Di2015NewLine
19813380Di2015UniqueSeparatorInitializing
19813380Di2015UniqueSeparatorprivate void InitializeWatcher()Di2015NewLine{ Di2015NewLine  watcher.Created += new FileSystemEventHandler(NotifyChange);Di2015NewLine  watcher.Path = @"E:\\here\\folder";Di2015NewLine  watcher.EnableRaisingEvents = true;Di2015NewLine}Di2015NewLine
19813380Di2015UniqueSeparatorStarting Windows Service when folder is created
19813380Di2015UniqueSeparatorprivate void NotifyChange(object sender, FileSystemEventArgs e)Di2015NewLine{Di2015NewLine   if (e.Name.Equals("FolerName",StringComparison.OrdinalIgnoreCase))Di2015NewLine   {Di2015NewLine      new ServiceController("WindowsServiceName").Start();Di2015NewLine   }Di2015NewLine}Di2015NewLine
19813427Di2015UniqueSeparatorpublic bool Sync() Di2015NewLine{ Di2015NewLine    Task.Run(async () => await MyClass.DoSync());Di2015NewLine}Di2015NewLine
19813453Di2015UniqueSeparator<add name="BlockViewHandler" path="*" verb="*" preCondition="integratedMode" type="System.Web.HttpNotFoundHandler" />Di2015NewLine
19813453Di2015UniqueSeparator<add name="BlockViewHandler" path="*.cshtml" verb="*" preCondition="integratedMode" type="System.Web.HttpNotFoundHandler" />Di2015NewLine
19813474Di2015UniqueSeparatorEnumerable.Join
19813474Di2015UniqueSeparatorvar common = from x in GetTransDetaDi2015NewLine             join id in _GetRecCustDi2015NewLine             on int.Parse(x.Id) equals idDi2015NewLine             select id;Di2015NewLineList<int> commonIDs = common.ToList();Di2015NewLine
19813474Di2015UniqueSeparatorTranobject.Id
19813474Di2015UniqueSeparatornull
19813474Di2015UniqueSeparatorIsNullOrWhiteSpace
19813474Di2015UniqueSeparatorvar common = from x in GetTransDetaDi2015NewLine             where !string.IsNullOrWhiteSpace(x.Id)Di2015NewLine             join id in _GetRecCustDi2015NewLine             on int.Parse(x.Id) equals idDi2015NewLine             select id;  Di2015NewLine
19813500Di2015UniqueSeparatorstring
19813500Di2015UniqueSeparatorUri
19813500Di2015UniqueSeparatorImageSource
19813500Di2015UniqueSeparator<Image ... Source="{Binding ImageUri}" />Di2015NewLine
19813500Di2015UniqueSeparatorDataContext
19813500Di2015UniqueSeparatorContact
19813527Di2015UniqueSeparatorIEnumerable<int> ints = new[] { 1, 2 };Di2015NewLineIEnumerable<object> os = ints;Di2015NewLine
19813527Di2015UniqueSeparatorIEnumerable<TC>
19813527Di2015UniqueSeparatorIEnumerable<T>
19813527Di2015UniqueSeparatorclass
19813527Di2015UniqueSeparatorT
19813527Di2015UniqueSeparatorTC
19813527Di2015UniqueSeparatorinternal class ListIndexable<TC, T> : IIndexable<T> where TC : class, T where T : classDi2015NewLine{Di2015NewLine}Di2015NewLine
19813527Di2015UniqueSeparatorListIndexable
19813527Di2015UniqueSeparatorinternal class ListIndexable<T> : IIndexable<T>Di2015NewLine{Di2015NewLine   private List<T> list;Di2015NewLine   public ListIndexable(List<T> list) { this.list = list; }Di2015NewLineDi2015NewLine   public T this[int i] { get { return list[i]; } }Di2015NewLineDi2015NewLine   public IEnumerator<T> GetEnumerator()Di2015NewLine   {Di2015NewLine      return list.GetEnumerator();Di2015NewLine   }Di2015NewLine}Di2015NewLine
19813527Di2015UniqueSeparatorIIndexable<IAnimal> animals = dogs.AsIIndexable();Di2015NewLine
19813527Di2015UniqueSeparatorAsIndexable
19813527Di2015UniqueSeparatorpublic static ListIndexable<T> AsIndexable<T>(this List<T> list)Di2015NewLine{Di2015NewLine    return new ListIndexable<T>(list);Di2015NewLine}Di2015NewLine
19813541Di2015UniqueSeparator<StackPanel Background="white" HorizontalAlignment="Stretch"  Margin="0">Di2015NewLine        <ListBox Background="white" x:Name="BetsListBox"  VerticalAlignment="Stretch" BorderThickness="0" Di2015NewLine                     ItemsSource="{Binding Path=ItemsCollectionA}" Margin="0" Width="Auto" HorizontalAlignment="Stretch" >Di2015NewLine            <ListBox.Resources>Di2015NewLine                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#F0F0F0"/>Di2015NewLine                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#F0F0F0"/>Di2015NewLine                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>Di2015NewLine            </ListBox.Resources>Di2015NewLine            <ListBox.ItemTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <StackPanel >Di2015NewLine                        <ListBox ItemsSource="{Binding Path=ItemsCollectionB}">Di2015NewLine                            <ListBox.ItemTemplate>Di2015NewLine                                <DataTemplate>Di2015NewLine                                    <StackPanel Orientation="Horizontal">Di2015NewLine                                        <TextBlockText="{Binding Path=varA}" />Di2015NewLine                                        <TextBlockText="{Binding Path=varB}" />Di2015NewLine                                        <TextBlockText="{Binding Path=varC}" />Di2015NewLine                                    </StackPanel>Di2015NewLine                                </DataTemplate>Di2015NewLine                            </ListBox.ItemTemplate>Di2015NewLine                        </ListBox>Di2015NewLine                        <ListBox BorderThickness="0" ItemsSource="{Binding Path=ItemsCollectionC}" >Di2015NewLine                            <ListBox.ItemTemplate>Di2015NewLine                                <DataTemplate>Di2015NewLine                                    <StackPanel  Orientation="Horizontal" >Di2015NewLine                                        <TextBlock Text="{Binding Path=VarA}" ToolTip="{Binding Name}"/>Di2015NewLine                                        <TextBlock Text="{Binding Path=VarB}" ToolTip="{Binding Name}"/>Di2015NewLine                                        <TextBlock Text="{Binding Path=VarC}" ToolTip="{Binding Name}"/>Di2015NewLine                                    </StackPanel>Di2015NewLine                                </DataTemplate>Di2015NewLine                            </ListBox.ItemTemplate>Di2015NewLine                        </ListBox >Di2015NewLine                    </StackPanel>Di2015NewLine                </DataTemplate>Di2015NewLine            </ListBox.ItemTemplate>Di2015NewLine        </ListBox>Di2015NewLine    </StackPanel>Di2015NewLine
19813544Di2015UniqueSeparatorUriMapper
19813544Di2015UniqueSeparator    RootFrame.UriMapper = new MyUriMapper();Di2015NewLine
19813544Di2015UniqueSeparatorpublic class MyUriMapper : UriMapperBaseDi2015NewLine{Di2015NewLine    public override Uri MapUri(Uri uri)Di2015NewLine    {Di2015NewLine        if (uri.OriginalString == "/StartUp")Di2015NewLine        {Di2015NewLine            if (!this.dataOperations.IsLoggedIn())Di2015NewLine            {Di2015NewLine                return Login.Path;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return Main.Path;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return uri;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19813592Di2015UniqueSeparatorent.tbltels.AddObject(tbltel);Di2015NewLine
19813710Di2015UniqueSeparatorin_log
19813710Di2015UniqueSeparatorin_log = new Log(...
19813759Di2015UniqueSeparator#include <stdio.h>Di2015NewLineDi2015NewLine#define SIZE 10Di2015NewLineDi2015NewLinevoid anyfunction(int array[]){  Di2015NewLine    int i=0;Di2015NewLineDi2015NewLine    for(i=0;i<SIZE;i++){Di2015NewLine        array[i] = i;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineint main(){Di2015NewLine    int i=0;Di2015NewLine    int numbers[SIZE] = {0};Di2015NewLineDi2015NewLine    anyfunction(numbers);Di2015NewLineDi2015NewLine    for(i=0;i<SIZE;i++){Di2015NewLine        printf("%d ",numbers[i]);Di2015NewLine    }Di2015NewLineDi2015NewLine    printf("\\n");Di2015NewLine    return 0;   Di2015NewLine}Di2015NewLine
19813759Di2015UniqueSeparatorNotra:Desktop Sukhvir$ ./testDi2015NewLine0 1 2 3 4 5 6 7 8 9 Di2015NewLine
19813810Di2015UniqueSeparator    var singOneJoin =Di2015NewLine        from prod in singOneProd.Table.AsEnumerable()Di2015NewLine        join agg in singOneAgg.Table.AsEnumerable()Di2015NewLine        on new {Di2015NewLine            Print = prod.Field<string>("print"),Di2015NewLine            Id3 = prod.Field<Int32>("id3")Di2015NewLine        } equals new {Di2015NewLine            Print = agg.Field<string>("print"),Di2015NewLine            Id3 = agg.Field<Int32>("id3")Di2015NewLine        } Di2015NewLine        select new {Di2015NewLine            print = prod.Field<string>("print")Di2015NewLine        };Di2015NewLine
19813877Di2015UniqueSeparatorawait
19813877Di2015UniqueSeparatorTask
19813877Di2015UniqueSeparatorasync void
19813877Di2015UniqueSeparatorawait
19813877Di2015UniqueSeparatorSynchronizationContext
19813877Di2015UniqueSeparatorThread.Sleep
19813877Di2015UniqueSeparatorawait
19813877Di2015UniqueSeparatorConfigureAwait(false)
19813877Di2015UniqueSeparatorThread.Sleep
19813877Di2015UniqueSeparatorawait Task.Delay(3000)
19813877Di2015UniqueSeparatorasync
19813877Di2015UniqueSeparatorTask.Run
19814018Di2015UniqueSeparator    private void drawArray(int[] arr, PictureBox box)Di2015NewLine    {Di2015NewLine        using (Graphics g = Graphics.FromImage(drawArea))Di2015NewLine        {Di2015NewLine            Pen mypen = new Pen(Brushes.Black);Di2015NewLine            g.Clear(Color.White);Di2015NewLine            for (int i = 0; i < arr.Length; i++)Di2015NewLine                g.DrawLine(mypen, i * 2, drawArea.Height,Di2015NewLine                  i * 2, drawArea.Height - arr[i]);Di2015NewLine        }Di2015NewLine        box.Invalidate();Di2015NewLine    }Di2015NewLine
19814047Di2015UniqueSeparatorButton
19814047Di2015UniqueSeparatorCommandParameter="{Binding ElementName=yourDataGrid, Path=SelectedItem}"Di2015NewLine
19814047Di2015UniqueSeparatorclientName
19814047Di2015UniqueSeparatorSelectedItem
19814047Di2015UniqueSeparatorCommandParameter="{Binding ElementName=yourDataGrid, Path=SelectedItem.clientName}"Di2015NewLine
19814047Di2015UniqueSeparatorYourCommand = new RelayCommand<ParameterType>(CommandExecMethod);Di2015NewLine
19814047Di2015UniqueSeparatorprivate void CommandExecMethod(ParameterType arg)Di2015NewLine{  Di2015NewLine    //your codeDi2015NewLine}Di2015NewLine
19814097Di2015UniqueSeparatorThread.CurrentThread.CurrentUICulture
19814097Di2015UniqueSeparatoren-US
19814211Di2015UniqueSeparator[DataContract]
19814211Di2015UniqueSeparator[DataMember]
19814211Di2015UniqueSeparatorpublic class TestObjectDi2015NewLine{Di2015NewLine    public int ObjID { get; set; }Di2015NewLine    public string ObjName { get; set; }Di2015NewLineDi2015NewLine    public TestObject() Di2015NewLine    { Di2015NewLine    }Di2015NewLineDi2015NewLine    public TestObject(int id, string name) Di2015NewLine    {Di2015NewLine        ObjID = id;Di2015NewLine        ObjName = name;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19814260Di2015UniqueSeparator<DataGrid AutoGenerateColumns="False"Di2015NewLine          CanUserAddRows="True"Di2015NewLine          CanUserDeleteRows="True"Di2015NewLine          ItemsSource="{Binding contacts}">Di2015NewLine  <DataGrid.Columns>Di2015NewLine    <DataGridTextColumn Binding="{Binding company_ID}"Di2015NewLine                        Visibility="Collapsed" />Di2015NewLine    <DataGridTextColumn Binding="{Binding name}" />Di2015NewLine    <DataGridTextColumn Binding="{Binding title}" />Di2015NewLine    <DataGridTextColumn Binding="{Binding email}" />Di2015NewLine  </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
19814260Di2015UniqueSeparatorDataGridTextColumn
19814260Di2015UniqueSeparatorIsReadonly
19814260Di2015UniqueSeparatorfalse
19814605Di2015UniqueSeparatorTextWriter
19814605Di2015UniqueSeparatorConsole.SetOut
19814605Di2015UniqueSeparatorpublic class MyWriter : TextWriterDi2015NewLine{Di2015NewLine    private List<string> lines = new List<string>();Di2015NewLineDi2015NewLine    private TextWriter original;Di2015NewLine    public MyWriter(TextWriter original)Di2015NewLine    {Di2015NewLine        this.original = original;Di2015NewLine    }Di2015NewLine    public override Encoding EncodingDi2015NewLine    {Di2015NewLine        get { return Encoding.Default; }Di2015NewLine    }Di2015NewLine    public override void WriteLine(string value)Di2015NewLine    {Di2015NewLine        lines.Add(value);Di2015NewLine        original.WriteLine(value);Di2015NewLine    }Di2015NewLine    //You need to override other methods alsoDi2015NewLineDi2015NewLine    public string[] GetLines()Di2015NewLine    {Di2015NewLine        return lines.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19814605Di2015UniqueSeparatorvar writer = new MyWriter(Console.Out);Di2015NewLineConsole.SetOut(writer);Di2015NewLineConsole.WriteLine("Hello world");Di2015NewLineConsole.WriteLine("Bye!");Di2015NewLinevar lines = writer.GetLines();Di2015NewLine
19814750Di2015UniqueSeparatorSystem.IO
19814750Di2015UniqueSeparatorvar myFiles = Directory.GetFiles(@"\\\\10.0.0.1\\myFolder\\test\\")Di2015NewLine
19814900Di2015UniqueSeparatordebugList.ForEach(item => outputContent.text += item);Di2015NewLine
19815115Di2015UniqueSeparatorvar AmountOfNewLines = (SourceDataTable.Columns.Count - 3) / 3;Di2015NewLineDi2015NewLine//the minus comes from the Static dataDi2015NewLine//divide by 3 because every Dynamic part exists out of 3 columnsDi2015NewLine
19815115Di2015UniqueSeparator//Creation of the DestinationTable datatableDi2015NewLinevar DestinationTable = new DataTable("Destination");Di2015NewLineDi2015NewLineDestinationTable.Columns.Add("Invoice", typeof(String)); //Correct Type?Di2015NewLineDestinationTable.Columns.Add("Date", typeof(String));Di2015NewLineDestinationTable.Columns.Add("User", typeof(String));Di2015NewLineDestinationTable.Columns.Add("LineNo", typeof(String));Di2015NewLineDestinationTable.Columns.Add("Article", typeof(String));Di2015NewLineDestinationTable.Columns.Add("Qty", typeof(String));Di2015NewLineDi2015NewLinefor(int i = 0; i < AmountOfNewLines - 1; i++)Di2015NewLine{Di2015NewLine  //Create a new rowDi2015NewLine  //Invoice|Date    |User |LineNo|Article|QtyDi2015NewLine  foreach(DataRow d in SourceDataTable)Di2015NewLine  {Di2015NewLine    //Using the foreach makes the datarow more easier to approachDi2015NewLine    //The Number inside the brackets explains which column is being approached.Di2015NewLine    DestinationTable.Rows.Add(d[0], d[1], d[2], d[3+(3*i)], d[4+(3*i)], d[5+(3*i)])Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
19815138Di2015UniqueSeparatorTopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssemblyDi2015NewLine
19815138Di2015UniqueSeparatorLibraryTest
19815138Di2015UniqueSeparatorFoo
19815138Di2015UniqueSeparatorvar type = Type.GetType("LibraryTest.Foo, LibraryTest");Di2015NewLine
19815251Di2015UniqueSeparatorElse
19815251Di2015UniqueSeparatorElse
19815251Di2015UniqueSeparatorpublic class AddColumnDi2015NewLine{Di2015NewLine    internal AddColumn()Di2015NewLine    {Di2015NewLineDi2015NewLine    } Di2015NewLineDi2015NewLine    public NamedAddColumn Named(string name)Di2015NewLine    {Di2015NewLine        return new NamedAddColumn(name);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class NamedAddColumnDi2015NewLine{Di2015NewLine    protected string Name {get; set;}Di2015NewLineDi2015NewLine    internal NamedAddColumn(string name)Di2015NewLine    {Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    public VarcharTypedAddColumn VarcharDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return new VarcharTypedAddColumn(Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19815251Di2015UniqueSeparatorNamed
19815251Di2015UniqueSeparator        db.AlterTable(tb => tbDi2015NewLine                                .Named("Users")Di2015NewLine                                .AddColumn(column => columnDi2015NewLine                                                         .Named("age")Di2015NewLine                                                         .IntegerDi2015NewLine                                )Di2015NewLine                                .AddColumn(column => columnDi2015NewLine                                                         .Named("username")Di2015NewLine                                                         .VarcharDi2015NewLine                                )Di2015NewLine
19815251Di2015UniqueSeparatorpublic class FluentMatcher<T1, T2, TResult>Di2015NewLine{Di2015NewLine    /*Di2015NewLine       Methods A B CDi2015NewLineDi2015NewLine     */Di2015NewLineDi2015NewLine    public FluentMatcherWithElse<T1, T2, TResult> Else(TResult resultIfElseRequired)Di2015NewLine    {Di2015NewLine        return new FluentMatcherWithElse(resultIfElseRequired);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FluentMatcherWithElse<T1, T2, TResult>Di2015NewLine{Di2015NewLine    internal FluentMatcherWithElse(TResult resultIfElseRequired) { ... }Di2015NewLineDi2015NewLine    /*Di2015NewLine       Methods A B C - but NO else methodDi2015NewLineDi2015NewLine     */Di2015NewLine}Di2015NewLine
19815318Di2015UniqueSeparatorBackgroundWorker
19815318Di2015UniqueSeparatorAppendText
19815318Di2015UniqueSeparatorBeginInvoke
19815318Di2015UniqueSeparatorInvoke
19815441Di2015UniqueSeparator^[A-Za-z0-9]+$Di2015NewLine
19815574Di2015UniqueSeparatorTask<Task>
19815574Di2015UniqueSeparatorTask<Work>
19815574Di2015UniqueSeparatorWork
19815574Di2015UniqueSeparatorGetResultAsync()
19815574Di2015UniqueSeparatorTask
19815574Di2015UniqueSeparatorGetResultAsync()
19815587Di2015UniqueSeparator//Declare the reset eventDi2015NewLineManualResetEvent mre = new ManualResetEvent(false);Di2015NewLineDi2015NewLine//Call the async method and subscribe to the event Di2015NewLinecrawler.PageCrawlCompletedAsync += crawler_ProcessPageCrawlCompleted;Di2015NewLineDi2015NewLine//The application will wait here until the mre is set.Di2015NewLinemre.WaitOne();Di2015NewLine
19815587Di2015UniqueSeparatorprivate void crawler_ProcessPageCrawlCompleted(...)Di2015NewLine{Di2015NewLine   ....Di2015NewLine   mre.Set();Di2015NewLine}Di2015NewLine
19815587Di2015UniqueSeparatorCountdownEvent countdown = new CountdownEvent (10);Di2015NewLineDi2015NewLine//Subscribe to the event Di2015NewLinecrawler.PageCrawlCompletedAsync += crawler_ProcessPageCrawlCompleted;Di2015NewLineDi2015NewLine//Call 10 time the async methodDi2015NewLine....Di2015NewLineDi2015NewLine//Wait for all events to completeDi2015NewLinecountdown.Wait();Di2015NewLine
19815587Di2015UniqueSeparatorprivate void crawler_ProcessPageCrawlCompleted(...)Di2015NewLine{Di2015NewLine    ....Di2015NewLine   mre.Signal();Di2015NewLine}Di2015NewLine
19815623Di2015UniqueSeparatorpublic static double TwoPi = Math.PI * 2f;Di2015NewLinepublic static Vector2 rndV2gtHalf(float scaleFactor)Di2015NewLine{Di2015NewLine    double dir = random.NextDouble() * TwoPi;Di2015NewLine    return new Vector2(Di2015NewLine                            (float)Math.Cos(dir) * scaleFactor,Di2015NewLine                            (float)Math.Sin(dir) * scaleFactorDi2015NewLine                        );Di2015NewLine}Di2015NewLine
19815696Di2015UniqueSeparatorFrameworkElement.Loaded
19815696Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    Loaded += MainWindow_Loaded;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void MainWindow_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    DataContext = new ViewModel();Di2015NewLine}Di2015NewLine
19815696Di2015UniqueSeparatorDataTemplate
19815696Di2015UniqueSeparatorpublic BaseViewModel ViewModel { get; set; } // Implement INotifyPropertyChanged hereDi2015NewLine
19815696Di2015UniqueSeparatorApp.xaml Resources
19815696Di2015UniqueSeparator<DataTemplate DataType="{x:Type ViewModels:FirstViewModel}">Di2015NewLine    <Views:FirstTrackView />Di2015NewLine</DataTemplate>Di2015NewLine...Di2015NewLine<DataTemplate DataType="{x:Type ViewModels:LastViewModel}">Di2015NewLine    <Views:LastTrackView />Di2015NewLine</DataTemplate>Di2015NewLine
19815696Di2015UniqueSeparatorDataContext
19815696Di2015UniqueSeparatorViewModel = new SomeViewModel();Di2015NewLine
19815917Di2015UniqueSeparator boolean[] array = new bolean[128];Di2015NewLine char c = 'a';Di2015NewLine array[(int) c] = true; Di2015NewLine
19815922Di2015UniqueSeparatorSelectedItem
19815922Di2015UniqueSeparatorvoid OnMouseDoubleClick(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    var list = (ListBox)sender;Di2015NewLineDi2015NewLine    // This is your selected itemDi2015NewLine    object item = list.SelectedItem;Di2015NewLine}Di2015NewLine
19815922Di2015UniqueSeparatorIndexFromPoint()
19815922Di2015UniqueSeparatorvoid OnMouseDoubleClick(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    var list = (ListBox)sender;Di2015NewLineDi2015NewLine    int itemIndex = list.IndexFromPoint(e.Location);Di2015NewLine    if (itemIndex != -1)Di2015NewLine    {Di2015NewLine        // This is your double clicked itemDi2015NewLine        object item = list.Items[itemIndex];Di2015NewLine    }Di2015NewLine}Di2015NewLine
19815922Di2015UniqueSeparatorMouseDoubleClick
19815925Di2015UniqueSeparatorpublic class A Di2015NewLine{Di2015NewLine   public Guid Id {get; set;}Di2015NewLineDi2015NewLine   public Account Account{get; set;}Di2015NewLine   // FK-Nav propertyDi2015NewLine   public Guid AccountKey{get;set;}Di2015NewLine   public class EntityConfiguration : EntityConfigurationBase<A>Di2015NewLine   {   Di2015NewLine       public EntityConfiguration()Di2015NewLine       {Di2015NewLineDi2015NewLine           HasOptional(x => x.Account).HasMany().HasForeignKey(x=>x.AccountKey);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19815928Di2015UniqueSeparatorwriter.WriteStartElement("ABSENDER");Di2015NewLine
19815928Di2015UniqueSeparatorwriter.WriteStartElement("", "ABSENDER","http://www.bundesbank.de/xmw/2003-01-01");Di2015NewLine
19816087Di2015UniqueSeparator[assembly: OwinStartup(typeof(YourStartupClass))]. Di2015NewLine
19816087Di2015UniqueSeparator<appSettings>Di2015NewLine <add key="owin:AppStartup" value="<FullyqualifiednameofStartupclass>,<assemblyName>" />Di2015NewLine</appSettings>Di2015NewLine
19816281Di2015UniqueSeparator@using (Html.BeginForm("Results", "Search", FormMethod.Get))Di2015NewLine{Di2015NewLine    @Html.TextBox("searchCriteria")Di2015NewLine    <input type="submit" value='Search' />Di2015NewLine}Di2015NewLine
19816281Di2015UniqueSeparatorpublic class SearchController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Results(string searchCriteria)Di2015NewLine    {Di2015NewLine        var model = // ... filter using searchCriteriaDi2015NewLineDi2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19816281Di2015UniqueSeparatormodel
19816281Di2015UniqueSeparatorResultsViewModel
19816295Di2015UniqueSeparator// GET: /Checkout/CompleteDi2015NewLine[Authorize]Di2015NewLinepublic ActionResult Complete(int id)Di2015NewLine{Di2015NewLine     if (id == WebSecurity.CurrentUserId)Di2015NewLine     {Di2015NewLine     //do stuffDi2015NewLine     }Di2015NewLine     else {Di2015NewLine     //tell user to not do thatDi2015NewLine     }Di2015NewLine}Di2015NewLine
19816295Di2015UniqueSeparatorThe parameters dictionary contains a null entry for parameter 'id' of non-nullable Di2015NewLinetype 'System.Int32' for method 'System.Web.Mvc.ActionResult Complete(Int32)' Di2015NewLine
19816341Di2015UniqueSeparatorDataTrigger
19816341Di2015UniqueSeparatorStyle.Triggers
19816341Di2015UniqueSeparator<Style x:Key="BorderStyle" TargetType="{x:Type Border}">Di2015NewLine    <Setter Property="Background" Value="Gray"/>Di2015NewLine    <Style.Triggers>Di2015NewLine        <DataTrigger Binding="{Binding State}" Value="1">Di2015NewLine            <Setter Property="Background" Value="White" />Di2015NewLine        </DataTrigger>Di2015NewLine        ...Di2015NewLine        <DataTrigger Binding="{Binding State}" Value="4">Di2015NewLine            <Setter Property="Background" Value="Green" />Di2015NewLine        </DataTrigger>Di2015NewLine    </Style.Triggers>Di2015NewLine</Style>Di2015NewLine
19816341Di2015UniqueSeparatorBorder
19816341Di2015UniqueSeparatorDataTemplate
19816341Di2015UniqueSeparatorState
19816341Di2015UniqueSeparatorState
19816487Di2015UniqueSeparatorIControl c = (IControl)obj;Di2015NewLine
19816487Di2015UniqueSeparatorIControl c = obj;Di2015NewLine
19816487Di2015UniqueSeparatorobj.Paint(); // InvalidDi2015NewLine((IControl) obj).Paint(); // ValidDi2015NewLine
19816493Di2015UniqueSeparatorname
19816493Di2015UniqueSeparatordate
19816493Di2015UniqueSeparatorsize
19816493Di2015UniqueSeparatorTuple
19816493Di2015UniqueSeparatorDictionary<Tuple<string, DateTime>, float> dict = new Dictionary<Tuple<string, DateTime>, float>();Di2015NewLinedict[new Tuple<string, DateTime>("aaa", DateTime.Now)] = 0.82f;Di2015NewLine
19816493Di2015UniqueSeparatorname
19816493Di2015UniqueSeparatordate
19816493Di2015UniqueSeparatorAdrian Carneiro
19816723Di2015UniqueSeparatorGet-Service -CN . | Di2015NewLineForEach-Object { Di2015NewLinewrite-host -ForegroundColor 9 "Service name $($_.name)" Di2015NewLineif($_.DependentServices) Di2015NewLine{ write-host -ForegroundColor 3 "`tServices that depend on $($_.name)" Di2015NewLine  foreach($s in $_.DependentServices) Di2015NewLine   { "`t`t" + $s.name } Di2015NewLine} #end if DependentServices Di2015NewLineif($_.RequiredServices) Di2015NewLine{ Write-host -ForegroundColor 10 "`tServices required by $($_.name)" Di2015NewLine  foreach($r in $_.RequiredServices) Di2015NewLine   { "`t`t" + $r.name } Di2015NewLine} #end if DependentServices Di2015NewLinewrite-host #new lineDi2015NewLine} #end foreach-object $o Di2015NewLine
19816844Di2015UniqueSeparatorCREATE VIEW SkillViewDi2015NewLineSELECT Person.PersonIDDi2015NewLine, SkillType.*Di2015NewLine, CASE WHEN PersonHasSkill.SomeColumn IS NULL THEN 0 ELSE 1 END AS HasSkillDi2015NewLineFROM SkillTypeDi2015NewLineCROSS JOIN PersonDi2015NewLineLEFT OUTER JOIN PersonHasSkill Di2015NewLine  ON SkillType.SkillTypeID = PersonHasSkill.SkillTypeID     Di2015NewLine  AND PersonHasSkill.PersonID = Person.PersonIDDi2015NewLine
19816844Di2015UniqueSeparator        <ItemTemplate>Di2015NewLine           <asp:CheckBox ID="chkSelect" runat="server" Checked='<# Eval("HasSkill") />Di2015NewLine        </ItemTemplate>Di2015NewLine
19816844Di2015UniqueSeparatorForEach(GridViewRow row in MyGridView.Rows)Di2015NewLine{Di2015NewLine  if (row.RowType == DataControlRowType.DataRow) //avoid header/footer rows.Di2015NewLine  {Di2015NewLine    var myCheckBox = (CheckBox)row.FindControl("chkSelect");Di2015NewLine    //myCheckBox.Checked tells you if it's checked or not, yay!Di2015NewLine    var myPrimaryKey = (GuidOrIntOrSomething)MyGridView.DataKeys[row.RowIndex].Value;Di2015NewLine    //now you have your Key and the checkbox for whether the user has checked it Di2015NewLine    //and you can do your update/insert/delete/whatever against the DB.Di2015NewLine  }Di2015NewLine}Di2015NewLine
19816896Di2015UniqueSeparator    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        w = new SemaphoreSlim(1);Di2015NewLine        e = new SemaphoreSlim(0);Di2015NewLine        b = new SemaphoreSlim(6);Di2015NewLineDi2015NewLine        this.Load += new EventHandler(Form1_Load);Di2015NewLine    }Di2015NewLineDi2015NewLine    void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Thread t1 = new Thread(randomNr);Di2015NewLine        t1.Start();Di2015NewLineDi2015NewLine        Thread t2 = new Thread(gennemsnit);Di2015NewLine        t2.Start();Di2015NewLine    }Di2015NewLine
19816905Di2015UniqueSeparatorsearch.SearchInformation.TotalResultsDi2015NewLine
19817260Di2015UniqueSeparatordgMainTable
19817260Di2015UniqueSeparatorAutoGenerateColumns
19817260Di2015UniqueSeparatordgMainTable
19817260Di2015UniqueSeparatorColumn1
19817260Di2015UniqueSeparatorColumn2
19817260Di2015UniqueSeparatorColumn3
19817260Di2015UniqueSeparatordtOtherTable
19817260Di2015UniqueSeparatorCol1
19817260Di2015UniqueSeparatorCol2
19817260Di2015UniqueSeparatorCol3
19817260Di2015UniqueSeparatordtOtherTable
19817260Di2015UniqueSeparatordgMainTable
19817260Di2015UniqueSeparatordgMainTable.Columns["Column1"].DataPropertyName = "Col1";Di2015NewLinedgMainTable.Columns["Column2"].DataPropertyName = "Col2";Di2015NewLinedgMainTable.Columns["Column3"].DataPropertyName = "Col3";Di2015NewLine//bind dataDi2015NewLinedgMainTable.DataSource = dtOtherTable;Di2015NewLine
19817590Di2015UniqueSeparator1383734307
19817590Di2015UniqueSeparator1970/01/01
19817590Di2015UniqueSeparatorDateTime
19817590Di2015UniqueSeparatorDateTime dt = new DateTime(1970, 1, 1).AddSeconds(1383734307);Di2015NewLine
19817590Di2015UniqueSeparatordt = {06/11/2013 10:38:27 AM}
19817590Di2015UniqueSeparatorcreated_time
19817590Di2015UniqueSeparatorlong/int
19817590Di2015UniqueSeparatorDateTime dt = new DateTime(1970, 1, 1).AddSeconds(created_time);Di2015NewLine
19817590Di2015UniqueSeparatorlong
19817590Di2015UniqueSeparatorDateTime dt = new DateTime(1970, 1, 1).AddSeconds(Convert.ToInt64(created_time));Di2015NewLine
19817614Di2015UniqueSeparatorFunc<SqlConnection, string>
19817614Di2015UniqueSeparatorSqlConnection
19817614Di2015UniqueSeparatorstring
19817614Di2015UniqueSeparatorvar myParam = "some string";Di2015NewLineSqlInteraction.sqlQueryReturnString(conn => getPKofUserLoggedIn(conn, myParam));Di2015NewLine
19817763Di2015UniqueSeparatorarray = {68,176,83,152,44,38,107,201,112,139,17,80,242,94,158,181,136,198,98,193}Di2015NewLine
19817763Di2015UniqueSeparator2201676219018622422190124192121212501517223823286232147
19817763Di2015UniqueSeparatorarray
19817763Di2015UniqueSeparatorbyte[]
19817763Di2015UniqueSeparatorunpack
19817763Di2015UniqueSeparator$finalString = "201311060930|aabbcc@test.com|test";Di2015NewLine$sHash = sha1($finalString, true);Di2015NewLineecho join(',',unpack('C*', $sHash));Di2015NewLine
19817763Di2015UniqueSeparator68,176,83,152,44,38,107,201,112,139,17,80,242,94,158,181,136,198,98,193Di2015NewLine
19817801Di2015UniqueSeparatorasp:ListView
19817801Di2015UniqueSeparatorDataKeyNames
19817801Di2015UniqueSeparatorid
19817801Di2015UniqueSeparatorDataKeyNames
19817902Di2015UniqueSeparatorHasAssignedAcccessActionInvoker
19817902Di2015UniqueSeparator[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]Di2015NewLinepublic class RequiresAssignedAccess : AuthorizeAttributeDi2015NewLine{Di2015NewLine    public int AccessType { get; private set; }Di2015NewLine    public int IdType { get; private set; }Di2015NewLine    public int IdValue { get; private set; }Di2015NewLine    public int Level { get; private set; }Di2015NewLineDi2015NewLine    public RequiresAssignedAccess(int accessType, int idType, int idValue, int level)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override bool AuthorizeCore(HttpContextBase httpContext)Di2015NewLine    {Di2015NewLine        if (!base.AuthorizeCore(httpContext))Di2015NewLine            return false;Di2015NewLineDi2015NewLine        bool retval = ...Di2015NewLineDi2015NewLine        return retval;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19817902Di2015UniqueSeparatorHasAssignedAcccessActionInvoker
19817902Di2015UniqueSeparatorInvokeAuthorizationFilters
19817902Di2015UniqueSeparatorpublic class HasAssignedAcccessActionInvoker : ControllerActionInvokerDi2015NewLine{Di2015NewLine    protected override AuthorizationContext InvokeAuthorizationFilters(ControllerContext controllerContext, IList<IAuthorizationFilter> filters, ActionDescriptor actionDescriptor)Di2015NewLine    {Di2015NewLine        AuthorizationContext authCtx = new AuthorizationContext(controllerContext, actionDescriptor);Di2015NewLineDi2015NewLine        /*Di2015NewLine         * If any of the filters are RequiresAssignedAccess, default this to false.  One of them must authorize the user.Di2015NewLine         */Di2015NewLine        bool hasAccess = !filters.Any(f => f is RequiresAssignedAccess);Di2015NewLineDi2015NewLine        foreach (IAuthorizationFilter current in filters)Di2015NewLine        {Di2015NewLine            /*Di2015NewLine             * This sets authorizationContext.Result, usually to an instance of HttpUnauthorizedResultDi2015NewLine             */Di2015NewLine            current.OnAuthorization(authCtx);Di2015NewLineDi2015NewLine            if (current is RequiresAssignedAccess)Di2015NewLine            {Di2015NewLine                if (authCtx.Result == null)Di2015NewLine                {Di2015NewLine                    hasAccess = true;Di2015NewLine                }Di2015NewLine                else if (authCtx.Result is HttpUnauthorizedResult)Di2015NewLine                {Di2015NewLine                    authCtx.Result = null;Di2015NewLine                }Di2015NewLineDi2015NewLine                continue;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (authCtx.Result != null)Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (!hasAccess && authCtx.Result == null)Di2015NewLine            authCtx.Result = new HttpUnauthorizedResult();Di2015NewLineDi2015NewLine        return authCtx;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19817902Di2015UniqueSeparatorprotected virtual AuthorizationContext InvokeAuthorizationFilters(ControllerContext controllerContext, IList<IAuthorizationFilter> filters, ActionDescriptor actionDescriptor)Di2015NewLine{Di2015NewLine    AuthorizationContext authorizationContext = new AuthorizationContext(controllerContext, actionDescriptor);Di2015NewLine    foreach (IAuthorizationFilter current in filters)Di2015NewLine    {Di2015NewLine        current.OnAuthorization(authorizationContext);Di2015NewLine        if (authorizationContext.Result != null)Di2015NewLine        {Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return authorizationContext;Di2015NewLine}Di2015NewLine
19817902Di2015UniqueSeparatorBaseController
19817902Di2015UniqueSeparatorpublic class BaseController : ControllerDi2015NewLine{Di2015NewLine    protected override IActionInvoker CreateActionInvoker()Di2015NewLine    {Di2015NewLine        return new HasAssignedAcccessActionInvoker();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19818111Di2015UniqueSeparator var guid = "00000000-0000-0000-0000-" + i.ToString("D12")Di2015NewLine
19818111Di2015UniqueSeparator for (int i = 0; i < 2000; i++)Di2015NewLine {Di2015NewLine     var guidStr = "00000000-0000-0000-0000-" + i.ToString("D12");Di2015NewLine     var guid = new Guid(guidStr);Di2015NewLine     Console.WriteLine(guid);Di2015NewLine }Di2015NewLine
19818150Di2015UniqueSeparatorchar*
19818150Di2015UniqueSeparatorpublic struct ndberror_structDi2015NewLine{      Di2015NewLine    public ndberror_status status;Di2015NewLine    public ndberror_classification classification;Di2015NewLine    public int code;Di2015NewLine    public int mysql_code;Di2015NewLine    public IntPtr message;Di2015NewLine    public IntPtr details;Di2015NewLine}Di2015NewLine
19818150Di2015UniqueSeparator[DllImport("Ndb_CWrapper.dll")]Di2015NewLineprivate static extern ndberror_struct Ndb_getNdbError(IntPtr obj);Di2015NewLine
19818150Di2015UniqueSeparatorIntPtr
19818150Di2015UniqueSeparatorMarshal.PtrToStringAnsi
19818314Di2015UniqueSeparatorEnvelopedCms.Encode()
19818430Di2015UniqueSeparator<telerik:RadGrid ID="rgPermissions" AllowPaging="false" AllowSorting="true" OnNeedDataSource="rgPermissions_NeedDataSource"Di2015NewLine    runat="server">Di2015NewLine    <MasterTableView DataKeyNames="Permission Name" AutoGenerateColumns="true" EditMode="InPlace">Di2015NewLine        <Columns>Di2015NewLine            <telerik:GridEditCommandColumn />Di2015NewLine        </Columns>Di2015NewLine    </MasterTableView>Di2015NewLine</telerik:RadGrid>Di2015NewLine
19818430Di2015UniqueSeparatorprotected void rgPermissions_NeedDataSource(object sender, Telerik.Web.UI.GridNeedDataSourceEventArgs e)Di2015NewLine{Di2015NewLine    // Data AccessDi2015NewLine    PermissionInfoList permissions = PermissionInfoList.GetPermissionInfoList();Di2015NewLine    RoleInfoList roles = RoleInfoList.GetRoleList();Di2015NewLineDi2015NewLine    // create datatable for permissionsDi2015NewLine    DataTable permissionTable = CreatePermissionDataTable(roles);Di2015NewLine    foreach (PermissionInfo permission in permissions)Di2015NewLine    {Di2015NewLine        // Add permission nameDi2015NewLine        DataRow dataRow = permissionTable.NewRow();Di2015NewLine        dataRow["Permission Name"] = permission.PermissionName;Di2015NewLineDi2015NewLine        AddRow(permission, permissionTable, dataRow, roles);Di2015NewLine    }Di2015NewLineDi2015NewLine    rgPermissions.DataSource = permissionTable;Di2015NewLine}Di2015NewLine
19818430Di2015UniqueSeparatorprivate DataTable CreatePermissionDataTable(RoleInfoList roles)Di2015NewLine{Di2015NewLine    DataTable permissions = new DataTable();Di2015NewLine    permissions.Columns.Add("Permission Name", typeof(string));Di2015NewLine    permissions.Columns["Permission Name"].ReadOnly = true;Di2015NewLine    foreach (RoleInfo role in roles)Di2015NewLine    {Di2015NewLine        permissions.Columns.Add(role.Title, typeof(Boolean));Di2015NewLine    }Di2015NewLine    return permissions;Di2015NewLine}Di2015NewLine
19818430Di2015UniqueSeparatorprivate DataTable AddRow(PermissionInfo permission, DataTable permissions, DataRow dataRow, RoleInfoList roles)Di2015NewLine{Di2015NewLineDi2015NewLine    // Add rolesDi2015NewLine    foreach (RoleInfo role in roles)Di2015NewLine    {Di2015NewLine        dataRow[role.Title] = permission.Roles.Any(r => r.RoleId == role.RoleId);Di2015NewLine    }Di2015NewLine    permissions.Rows.Add(dataRow);Di2015NewLineDi2015NewLine    return permissions;Di2015NewLine}Di2015NewLine
19818633Di2015UniqueSeparatorData
19818633Di2015UniqueSeparatorpublic class DataDi2015NewLine{Di2015NewLine    public string mode { get; set; }Di2015NewLine    [JsonProperty("data")]Di2015NewLine    public Dictionary<int, CustomerInfo> customers { get; set; }Di2015NewLine}Di2015NewLine
19818633Di2015UniqueSeparatorCustomerRootObject obj = JsonConvert.DeserializeObject<CustomerRootObject>(json);Di2015NewLine
19818633Di2015UniqueSeparatorforeach (KeyValuePair<int, CustomerInfo> kvp in obj.data.customers)Di2015NewLine{Di2015NewLine    Console.WriteLine("----- Customer " + kvp.Key + " -----");Di2015NewLine    Console.WriteLine("CustomerCode: " + kvp.Value.CustomerCode);Di2015NewLine    Console.WriteLine("Name: " + kvp.Value.Name);Di2015NewLine    Console.WriteLine("Add1: " + kvp.Value.Add1.Replace(";", "\\r\\n"));Di2015NewLine}Di2015NewLine
19818633Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string json = @"Di2015NewLine        {Di2015NewLine            ""success"": true,Di2015NewLine            ""message"": ""Missing ajax operation. Please contact administrator."",Di2015NewLine            ""data"": {Di2015NewLine                ""mode"": ""new"",Di2015NewLine                ""data"": {Di2015NewLine                    ""1"": {Di2015NewLine                        ""CustomerCode"": ""CUST00001"",Di2015NewLine                        ""Name"": ""Dell Asia Pacific Sdn. Bhd."",Di2015NewLine                        ""Add1"": ""Plot 76 Mukim 11, Bukit Tengah Industrial Park; Bukit Mertajam; Pulau Pinang; 14000"",Di2015NewLine                        ""Add2"": """",Di2015NewLine                        ""Add3"": """",Di2015NewLine                        ""Daddr1"": ""Level 21, Suite 21.01, The Gardens South Tower, Mid Valley City, Lingkaran Syed Putra, ; Kuala Lumpur; Wilayah Persekutuan; 59200"",Di2015NewLine                        ""Daddr2"": """",Di2015NewLine                        ""Daddr3"": """",Di2015NewLine                        ""Attn"": """",Di2015NewLine                        ""Phone"": """",Di2015NewLine                        ""PhoneA"": """",Di2015NewLine                        ""Fax"": """",Di2015NewLine                        ""Area"": """",Di2015NewLine                        ""Agent"": """",Di2015NewLine                        ""Email"": """",Di2015NewLine                        ""CurrCode"": ""MYR"",Di2015NewLine                        ""Business"": """",Di2015NewLine                        ""Term"": ""30 Days""Di2015NewLine                    },Di2015NewLine                    ""2"": {Di2015NewLine                        ""CustomerCode"": ""CUST00002"",Di2015NewLine                        ""Name"": ""Intel Technology Sdn Bhd"",Di2015NewLine                        ""Add1"": ""Bayan Lepas Free Industrial Zone,Phase 3,Halaman Kampung Jawa; Bayan Lepas; Pulau Pinang; 11900"",Di2015NewLine                        ""Add2"": """",Di2015NewLine                        ""Add3"": """",Di2015NewLine                        ""Daddr1"": ""1st Flr,Standard Chartered Bank Chambers,Lebuh Pantai;Penang; Kuala Lumpur; Wilayah Persekutuan; 10300"",Di2015NewLine                        ""Daddr2"": """",Di2015NewLine                        ""Daddr3"": """",Di2015NewLine                        ""Attn"": """",Di2015NewLine                        ""Phone"": """",Di2015NewLine                        ""PhoneA"": """",Di2015NewLine                        ""Fax"": """",Di2015NewLine                        ""Area"": """",Di2015NewLine                        ""Agent"": """",Di2015NewLine                        ""Email"": """",Di2015NewLine                        ""CurrCode"": ""MYR"",Di2015NewLine                        ""Business"": """",Di2015NewLine                        ""Term"": ""30 Days""Di2015NewLine                    },Di2015NewLine                    ""3"": {Di2015NewLine                        ""CustomerCode"": ""CUST00003"",Di2015NewLine                        ""Name"": ""Petronas Carigali Sdn. Bhd."",Di2015NewLine                        ""Add1"": ""Tower 1, Petronas Twin Towers,Kuala Lumpur City Centre,; Kuala Lumpur; Wilayah Persekutuan; 50088"",Di2015NewLine                        ""Add2"": """",Di2015NewLine                        ""Add3"": """",Di2015NewLine                        ""Daddr1"": ""Tower 1,Petronas Twin Towers,K.L.City Centre; Kuala Lumpur; Wilayah Persekutuan; 50088"",Di2015NewLine                        ""Daddr2"": """",Di2015NewLine                        ""Daddr3"": """",Di2015NewLine                        ""Attn"": """",Di2015NewLine                        ""Phone"": """",Di2015NewLine                        ""PhoneA"": """",Di2015NewLine                        ""Fax"": """",Di2015NewLine                        ""Area"": """",Di2015NewLine                        ""Agent"": """",Di2015NewLine                        ""Email"": """",Di2015NewLine                        ""CurrCode"": ""MYR"",Di2015NewLine                        ""Business"": """",Di2015NewLine                        ""Term"": ""30 Days""Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }";Di2015NewLineDi2015NewLine        CustomerRootObject obj = JsonConvert.DeserializeObject<CustomerRootObject>(json);Di2015NewLineDi2015NewLine        foreach (KeyValuePair<int, CustomerInfo> kvp in obj.data.customers)Di2015NewLine        {Di2015NewLine            Console.WriteLine("----- Customer " + kvp.Key + " -----");Di2015NewLine            Console.WriteLine("CustomerCode: " + kvp.Value.CustomerCode);Di2015NewLine            Console.WriteLine("Name: " + kvp.Value.Name);Di2015NewLine            Console.WriteLine("Add1: " + kvp.Value.Add1.Replace(";", "\\r\\n"));Di2015NewLine        }Di2015NewLine        Console.WriteLine("\\nPress a key to Exit...");Di2015NewLine        Console.ReadKey();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public class CustomerInfoDi2015NewLine    {Di2015NewLine        public string CustomerCode { get; set; }Di2015NewLine        public string Name { get; set; }Di2015NewLine        public string Add1 { get; set; }Di2015NewLine        public string Add2 { get; set; }Di2015NewLine        public string Add3 { get; set; }Di2015NewLine        public string Daddr1 { get; set; }Di2015NewLine        public string Daddr2 { get; set; }Di2015NewLine        public string Daddr3 { get; set; }Di2015NewLine        public string Attn { get; set; }Di2015NewLine        public string Phone { get; set; }Di2015NewLine        public string PhoneA { get; set; }Di2015NewLine        public string Fax { get; set; }Di2015NewLine        public string Area { get; set; }Di2015NewLine        public string Agent { get; set; }Di2015NewLine        public string Email { get; set; }Di2015NewLine        public string CurrCode { get; set; }Di2015NewLine        public string Business { get; set; }Di2015NewLine        public string Term { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class DataDi2015NewLine    {Di2015NewLine        public string mode { get; set; }Di2015NewLine        [JsonProperty("data")]Di2015NewLine        public Dictionary<int, CustomerInfo> customers { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CustomerRootObjectDi2015NewLine    {Di2015NewLine        public bool success { get; set; }Di2015NewLine        public string message { get; set; }Di2015NewLine        public Data data { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19818633Di2015UniqueSeparator----- Customer 1 -----Di2015NewLineCustomerCode: CUST00001Di2015NewLineName: Dell Asia Pacific Sdn. Bhd.Di2015NewLineAdd1: Plot 76 Mukim 11, Bukit Tengah Industrial ParkDi2015NewLine Bukit MertajamDi2015NewLine Pulau PinangDi2015NewLine 14000Di2015NewLine----- Customer 2 -----Di2015NewLineCustomerCode: CUST00002Di2015NewLineName: Intel Technology Sdn BhdDi2015NewLineAdd1: Bayan Lepas Free Industrial Zone,Phase 3,Halaman Kampung JawaDi2015NewLine Bayan LepasDi2015NewLine Pulau PinangDi2015NewLine 11900Di2015NewLine----- Customer 3 -----Di2015NewLineCustomerCode: CUST00003Di2015NewLineName: Petronas Carigali Sdn. Bhd.Di2015NewLineAdd1: Tower 1, Petronas Twin Towers,Kuala Lumpur City Centre,Di2015NewLine Kuala LumpurDi2015NewLine Wilayah PersekutuanDi2015NewLine 50088Di2015NewLine
19818639Di2015UniqueSeparatorAsNoTracking
19818639Di2015UniqueSeparator static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var sw = new Stopwatch();Di2015NewLine            sw.Start();Di2015NewLine            using (var context = new MyEntities())Di2015NewLine            {Di2015NewLine                var query = (from organizations in context.LargeSampleTable.AsNoTracking()Di2015NewLine                             where organizations.ErrorID != nullDi2015NewLine                             orderby organizations.ErrorIDDi2015NewLine                             select organizations);//large sample table, 146994 rowsDi2015NewLineDi2015NewLine                foreach (MyObject o in query)Di2015NewLine                {Di2015NewLine                    writeRecord(o);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            sw.Stop();Di2015NewLineDi2015NewLine            Console.WriteLine("Completed after: {0}", sw.Elapsed);Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void writeRecord(ApplicationErrorLog o)Di2015NewLine        {Di2015NewLine            ;Di2015NewLine        }Di2015NewLine
19818647Di2015UniqueSeparatorArgumentOutOfRangeException
19818683Di2015UniqueSeparator...Di2015NewLinevar records = db.RecordsDi2015NewLine        .GroupBy(r => r.Group)Di2015NewLine        .Where(g => g.Any(r => r.Action == requestedAction && Di2015NewLine                               r.Username == requestedUsername)));Di2015NewLine...Di2015NewLine
19818837Di2015UniqueSeparatorpublic async void YorCaller()Di2015NewLine{Di2015NewLine    var result = await ConnectAsync(...);Di2015NewLine}Di2015NewLine
19819008Di2015UniqueSeparatorint sum;Di2015NewLine        int input;Di2015NewLineDi2015NewLine        singleDigit(ref firstRandom, ref secondRandom);Di2015NewLineDi2015NewLine        Console.Write("{0} + {1} = : ", firstRandom, secondRandom);Di2015NewLine        input = Convert.ToInt16(Console.ReadLine());Di2015NewLineDi2015NewLine        sum = firstRandom + secondRandom;Di2015NewLineDi2015NewLine        if (firstRandom + secondRandom == sum)Di2015NewLine        {Di2015NewLine            checkanswergradeoneaddition();Di2015NewLine        }Di2015NewLineDi2015NewLine        elseDi2015NewLine        {Di2015NewLine            checkanswergradeoneadditionFalse();Di2015NewLine        }`Di2015NewLine
19819008Di2015UniqueSeparatorint sum;Di2015NewLine        int input;Di2015NewLineDi2015NewLine        singleDigit(ref firstRandom, ref secondRandom);Di2015NewLineDi2015NewLine        Console.Write("{0} + {1} = : ", firstRandom, secondRandom);Di2015NewLine        input = Convert.ToInt16(Console.ReadLine());Di2015NewLineDi2015NewLine        sum = firstRandom + secondRandom;Di2015NewLineDi2015NewLine        // Changed the first 'if' statement to compare the users input with the sum.Di2015NewLine        if (input == sum)Di2015NewLine        {Di2015NewLine            checkanswergradeoneaddition();Di2015NewLine        }Di2015NewLineDi2015NewLine        elseDi2015NewLine        {Di2015NewLine            checkanswergradeoneadditionFalse();Di2015NewLine        }`Di2015NewLine
19819244Di2015UniqueSeparatorsliderValue
19819244Di2015UniqueSeparator<Slider x:Name="WidthSlider" HorizontalAlignment="Left" Margin="6,56,0,0" VerticalAlignment="Top" Width="257" TickFrequency="10" SmallChange="0.01" TickPlacement="BottomRight" IsSnapToTickEnabled="True" Ticks="1, 2, 3, 4, 5, 6, 7, 8, 9, 10" Minimum="1" />Di2015NewLine<Label Content="{Binding ElementName=WidthSlider, Path=Value}" HorizontalAlignment="Left" Margin="262,50,0,0" VerticalAlignment="Top"/>Di2015NewLine
19819244Di2015UniqueSeparatorInitializeComponent()
19819244Di2015UniqueSeparatorwidthSlider
19819244Di2015UniqueSeparatorwidthSlider_ValueChanged
19819244Di2015UniqueSeparatorwidthSlider
19819244Di2015UniqueSeparatorsliderValue
19819244Di2015UniqueSeparatorsliderValue
19819244Di2015UniqueSeparatornull
19819244Di2015UniqueSeparatorif(sliderValue != null)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19819261Di2015UniqueSeparatorString data=TextBox1.SelectedText;Di2015NewLine
19819261Di2015UniqueSeparatorrichTextBox1.SelectionFont = new Font("Arial", 10, FontStyle.Bold);Di2015NewLine
19819267Di2015UniqueSeparatorif(colorVal > 0)Di2015NewLine{Di2015NewLine    var whiteness = 255 - Convert.ToInt32(colorval * 255);Di2015NewLine    myCell.BackColor = Color.FromArgb(whiteness, 255, whiteness); //greenDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    var whiteness = 255 - Convert.ToInt32(colorval * -255);Di2015NewLine    myCell.BackColor = Color.FromArgb(255, whiteness, whiteness); //redDi2015NewLine}Di2015NewLine
19819360Di2015UniqueSeparatorStreamReader.Close()
19819360Di2015UniqueSeparatorusing (var response = request.GetResponse())Di2015NewLineusing (var reader = new StreamReader(response.GetResponseStream()))Di2015NewLine    return reader.ReadToEnd();Di2015NewLine
19819360Di2015UniqueSeparatorusing
19819360Di2015UniqueSeparatorusing (var infile = new FileStream("infile"), outfile = new FileStream("outfile"))Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
19819506Di2015UniqueSeparatorFile.ReadAllLines("the-file-full-path")Di2015NewLine    .Select(x => x.Split('\\t'))Di2015NewLine    .Where(x =>Di2015NewLine           {Di2015NewLine               int i;Di2015NewLine               return int.TryParse(x[0], out i);Di2015NewLine           })Di2015NewLine    .Select(x => new ScoreItemDi2015NewLine                     {Di2015NewLine                         CustomerNo = int.Parse(x[0]),Di2015NewLine                         Offer = int.Parse(x[1]),Di2015NewLine                         Score = double.Parse(x[2])Di2015NewLine                     });Di2015NewLine
19819506Di2015UniqueSeparatordouble.Parse(x[2], CultureInfo.InvariantCulture)
19819750Di2015UniqueSeparator// method definition...Di2015NewLineT ExecuteInTryCatch<T>(Func<T> block)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        return block();Di2015NewLine    }Di2015NewLine    catch (SomeException e)Di2015NewLine    {Di2015NewLine        // handle eDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// using the method...Di2015NewLineint three = ExecuteInTryCatch(() => { return 3; })Di2015NewLine
19819925Di2015UniqueSeparatorvar list = yourList.OfType<B>()Di2015NewLine           .Union(yourList.OfType<C>().Select(x => x.children);Di2015NewLine
19819925Di2015UniqueSeparatorSelectMany
19819925Di2015UniqueSeparatorSelect
19820119Di2015UniqueSeparator        serialPort1.Open();Di2015NewLine        serialPort1.Write(@":01013100010010");Di2015NewLine        Thread.Sleep(200);Di2015NewLine        serialPort1.Close();Di2015NewLine
19820119Di2015UniqueSeparatorportaserial = new SerialPort("COM3", 9600, Parity.None, 8, StopBits.One);Di2015NewLineportaserial.Open();Di2015NewLineportaserial.Write(mensagem.ToString());Di2015NewLineThread.Sleep(500);Di2015NewLineportaserial.Close();Di2015NewLine
19820175Di2015UniqueSeparatorbase.ResolveService<TService>
19820175Di2015UniqueSeparatorpublic object Any(AnotherRequest request)Di2015NewLine{Di2015NewLine    using (var service = base.ResolveService<GetSkillsService>())Di2015NewLine    {Di2015NewLine        List<SkillDto> results = service.Get(new GetSkillsList { ... });Di2015NewLine    }Di2015NewLine} Di2015NewLine
19820175Di2015UniqueSeparatorusing (var service = AppHostBase.ResolveService<GetSkillsService>(HttpContext.Current))Di2015NewLine{Di2015NewLine    List<SkillDto> results = service.Get(new GetSkillsList { ... });Di2015NewLine}Di2015NewLine
19820175Di2015UniqueSeparatorIRestPath
19820175Di2015UniqueSeparatorvar controller = EndpointHost.Config.ServiceController;Di2015NewLinevar restPath = controller.GetRestPathForRequest("GET","/skillslist/5");Di2015NewLine
19820175Di2015UniqueSeparatorvar queryString = new Dictionary<string,string>();Di2015NewLinevar request = restPath.CreateRequest("/skillslist/5", queryString, null); Di2015NewLine
19820175Di2015UniqueSeparatorvar response = controller.Execute(request, base.RequestContext);Di2015NewLine
19820459Di2015UniqueSeparatorError: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.InvalidCastException: Unable to cast object of type 'System.Object' to type 'System.IO.StreamWriter'.Di2015NewLine   at ST_ffrrefr939322939392dfr.csproj.ScriptMain.Main()Di2015NewLine   --- End of inner exception stack trace ---Di2015NewLine   at System.RuntimeMethodHandle._InvokeMethodFast(Object target, Object[] arguments, SignatureStruct& sig, MethodAttributes methodAttributes, RuntimeTypeHandle typeOwner)Di2015NewLine   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)Di2015NewLine   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)Di2015NewLine   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)Di2015NewLine   at Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTATaskScriptingEngine.ExecuteScript()Di2015NewLine
19820597Di2015UniqueSeparatorpublic class PhotoChooserDi2015NewLine{Di2015NewLine    public Task<BitmapImage> ChoosePhoto()Di2015NewLine    {Di2015NewLine        var taskSource = new TaskCompletionSource<BitmapImage>();Di2015NewLine        var chooser = new PhotoChooserTask();Di2015NewLine        chooser.Completed += (s, e) =>Di2015NewLine            {Di2015NewLine                if (e.ChosenPhoto == null)Di2015NewLine                {Di2015NewLine                    taskSource.SetResult(null);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    BitmapImage bmp = new BitmapImage();Di2015NewLine                    bmp.SetSource(e.ChosenPhoto);Di2015NewLine                    taskSource.SetResult(bmp);   Di2015NewLine                }Di2015NewLine            };Di2015NewLine        chooser.Show();Di2015NewLine        return taskSource.Task;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19820597Di2015UniqueSeparatorprivate async void ChoosePhoto_OnClick(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    var chooser = new PhotoChooser();Di2015NewLine    logoQrCodeImage.Source = await chooser.ChoosePhoto();Di2015NewLine}Di2015NewLine
19820615Di2015UniqueSeparatorCount
19820615Di2015UniqueSeparatorvar count = dtDi2015NewLine           .AsEnumerable()Di2015NewLine           .Count(p => p.Field<string>("ContainerTitle") == szContainerName );Di2015NewLine
19820615Di2015UniqueSeparatorCount
19820615Di2015UniqueSeparatorvar count = dtDi2015NewLine           .AsEnumerable()Di2015NewLine           .Where(p => p.Field<string>("ContainerTitle") == szContainerName );Di2015NewLine           .Count();Di2015NewLine
19820675Di2015UniqueSeparatorprivate System.Timers.Timer timer = new System.Timers.Timer();Di2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine    timer.Enabled = false;Di2015NewLine    timer.AutoReset = true;Di2015NewLine    timer.Elapsed += timerEvent;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void TimerButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    getTime = ImgTimeInterval.Text;Di2015NewLine    bool isNumeric = int.TryParse(ImgTimeInterval.Text, out timerMS); //if number place number in timerMSDi2015NewLine    label2.Text = isNumeric.ToString();Di2015NewLine    if (isNumeric)Di2015NewLine    {Di2015NewLine        timer.Interval = timerMS;Di2015NewLine        timer.Enabled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19821034Di2015UniqueSeparatorvar page = query.Take(count)Di2015NewLine
19821054Di2015UniqueSeparatorprivate void newToolStripMenuItem_Click(object sender, EventArgs e)      Di2015NewLine{Di2015NewLine    var f2 = this.MdiChildren.OfType<Form2>().FirstOrDefault();Di2015NewLine    if (f2 != null)Di2015NewLine    {Di2015NewLine        f2.Show();Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    Form2 f = new Form2();Di2015NewLine    f.MdiParent=this;Di2015NewLine    f.Show();Di2015NewLine}Di2015NewLine
19821081Di2015UniqueSeparatorDataTable
19821081Di2015UniqueSeparatorDataRow row = dt.NewRow();Di2015NewLinerow["No"] = "Value for No here";Di2015NewLinerow["productoriginal"] = "Value for productoriginal here";Di2015NewLinedt.Rows.Add(row);Di2015NewLine
19821123Di2015UniqueSeparator    Binding b = new Binding("Text", myObject, "Text", false, DataSourceUpdateMode.OnValidation);Di2015NewLine    b.Format += new ConvertEventHandler(formatHandler);Di2015NewLine    b.Parse += new ConvertEventHandler(parseHandler);Di2015NewLine    textBox1.DataBindings.Add(b);Di2015NewLine    private void formatHandler(object sender, ConvertEventArgs e)Di2015NewLine    {Di2015NewLine        //put code and breakpoint here to inspect e.ValueDi2015NewLine    }Di2015NewLineDi2015NewLine    private void parseHandler(object sender, ConvertEventArgs e)Di2015NewLine    {Di2015NewLine        //put code and breakpoint here to inspect e.ValueDi2015NewLine    }Di2015NewLine
19821292Di2015UniqueSeparator private void Form1_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine            {Di2015NewLine                    // If the Spreadsheet has been changed since the user opened it andDi2015NewLine                    // the user has requested to Close the window, then prompt him to SaveDi2015NewLine                    // the unsaved changes.Di2015NewLine                    if (SpreadSheet.Changed)Di2015NewLine                    {Di2015NewLine                        DialogResult UserChoice = MessageBox.Show("Would you like to save your changes?", "Spreadsheet Utility",Di2015NewLine                                MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);Di2015NewLineDi2015NewLine                        switch (UserChoice)Di2015NewLine                        {Di2015NewLine                            case DialogResult.Yes:Di2015NewLine                                SaveFileOperation();Di2015NewLine                                break;Di2015NewLine                            case DialogResult.No:Di2015NewLine                                break;Di2015NewLine                            case DialogResult.Cancel:Di2015NewLine                                e.Cancel = true;Di2015NewLine                                break;                              Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine            }Di2015NewLine
19821320Di2015UniqueSeparatorDateTime
19821320Di2015UniqueSeparator-
19821320Di2015UniqueSeparatorSubtract
19821320Di2015UniqueSeparatorTimeSpan
19821320Di2015UniqueSeparatorTimeSpan.TotalHours
19821320Di2015UniqueSeparatorDateTime start = new DateTime(2000, 1, 1, 0, 0, 0);Di2015NewLineDateTime end = new DateTime(2000, 1, 1, 0, 30, 0);Di2015NewLineTimeSpan difference = end - start;Di2015NewLineConsole.WriteLine(difference.TotalHours); // 0.5Di2015NewLine
19821320Di2015UniqueSeparatorTimeSpan.Hours
19821320Di2015UniqueSeparatorint
19821361Di2015UniqueSeparatorBinding
19821361Di2015UniqueSeparatorINotifyPropertyChanged
19821361Di2015UniqueSeparatorDependencyProperty
19821361Di2015UniqueSeparatorDependencyProperty
19821361Di2015UniqueSeparatorpublic class GameContainer : DependencyObject {Di2015NewLine  public GameContainer() {Di2015NewLine     Date = new Date();Di2015NewLine  }Di2015NewLine  public static readonly DependencyProperty DateProperty = Di2015NewLine       DependencyProperty.Register("Date", typeof(Date), typeof(GameContainer));Di2015NewLine  public Date Date {Di2015NewLine     get { return (Date) GetValue(DateProperty);}Di2015NewLine     set {Di2015NewLine        SetValue(DateProperty, value);Di2015NewLine     }Di2015NewLine  }Di2015NewLine}Di2015NewLine
19821361Di2015UniqueSeparatorContainer
19821361Di2015UniqueSeparatorLocator
19821361Di2015UniqueSeparatorBinding
19821361Di2015UniqueSeparatorpublic class Locator {       Di2015NewLine   static Locator() {Di2015NewLine    Container = new GameContainer();Di2015NewLine   }Di2015NewLine   public static event EventHandler ContainerChanged;Di2015NewLine   static GameContainer container;Di2015NewLine   public static GameContainer Container {Di2015NewLine     get { return container;}Di2015NewLine     set {Di2015NewLine        if(container != value){Di2015NewLine          container = value;Di2015NewLine          var handler = ContainerChanged;Di2015NewLine          handler(null, EventArgs.Empty);Di2015NewLine        }Di2015NewLine     }Di2015NewLine   }       Di2015NewLine}Di2015NewLine
19821660Di2015UniqueSeparator<TreeView ItemsSource="{Binding BlockingTree.BlockTree}" DisplayMemberPath="DisplayName" SelectedItemChanged="Tree_SelectedItemChanged" PreviewMouseRightButtonDown="Tree_PreviewMouseRightButtonDown" x:Name="TreeViewBox" ... >Di2015NewLineDi2015NewLineDi2015NewLine<TextBox Text="{Binding SelectedItem.DisplayName, ElementName=TreeViewBox}" />Di2015NewLine
19821662Di2015UniqueSeparatorSendMessageDirect
19821810Di2015UniqueSeparatorOwner
19821810Di2015UniqueSeparatorOwned
19821810Di2015UniqueSeparatorLiked
19821810Di2015UniqueSeparatorDisliked
19821810Di2015UniqueSeparator// This is a run-of-the-mill visitorDi2015NewLineinterface IVisitor {Di2015NewLine    void VisitOwner(Owner owner);Di2015NewLine    void VisitOwned(Owned owned);Di2015NewLine}Di2015NewLine// This is a base visitor class; it is abstractDi2015NewLineabstract class DefaultVisitor : IVisitor {Di2015NewLine    public void VisitOwner(Owner owner) {Di2015NewLine        BeginOwner(owner);Di2015NewLine        BeginLiked();Di2015NewLine        foreach (var owned in owner.Liked) {Di2015NewLine            owned.Accept(this);Di2015NewLine        }Di2015NewLine        EndLiked();Di2015NewLine        BeginDisliked();Di2015NewLine        foreach (var owned in owner.Disliked) {Di2015NewLine            owned.Accept(this);Di2015NewLine        }Di2015NewLine        EndDisliked();Di2015NewLine        EndOwner(owner);Di2015NewLine    }Di2015NewLine    public void VisitOwned(Owned owned) {Di2015NewLine        BeginOwned(owned);Di2015NewLine        EndOwned(owned);Di2015NewLine    }Di2015NewLine    public abstract void BeginOwner(Owner owner);Di2015NewLine    public abstract void EndOwner(Owner owner);Di2015NewLine    public abstract void BeginOwned(Owned owned);Di2015NewLine    public abstract void EndOwned(Owned owned);Di2015NewLine    public abstract void BeginLiked();Di2015NewLine    public abstract void EndLiked();Di2015NewLine    public abstract void BeginDisliked();Di2015NewLine    public abstract void EndDisliked();Di2015NewLine}Di2015NewLine
19821810Di2015UniqueSeparatorDefaultVisitor
19821903Di2015UniqueSeparatorx
19821903Di2015UniqueSeparatord2
19821903Di2015UniqueSeparatornull
19821903Di2015UniqueSeparatorList<UDIDInfo> d2Android = d2Di2015NewLine    .Where(x => x != null)Di2015NewLine    .Where(x => x.DeviceOS != null)Di2015NewLine    .Where(x => x.DeviceOS == (byte)DeviceOS.Android)Di2015NewLine    .ToList();Di2015NewLine
19821911Di2015UniqueSeparatorasync
19821911Di2015UniqueSeparatorpublic async Task ConnectAsync();Di2015NewLine
19821911Di2015UniqueSeparatorvm.IsConnecting = true;Di2015NewLineDi2015NewLineawait vm.ConnectAsync();Di2015NewLineDi2015NewLineif (vm.ConnectionClear)Di2015NewLine    this.Frame.Navigate(typeof(MainPage), vm);Di2015NewLineDi2015NewLinevm.IsConnecting = false;Di2015NewLine
19821911Di2015UniqueSeparatorDispatcher
19822201Di2015UniqueSeparatorKeyTrigger
19822201Di2015UniqueSeparatorpublic class KeyTriggerThatWorks : TriggerBase<FrameworkElement>Di2015NewLine{Di2015NewLine    private FrameworkElement _target;Di2015NewLineDi2015NewLine    protected override void OnAttached()Di2015NewLine    {Di2015NewLine        base.OnAttached();Di2015NewLine        AssociatedObject.Loaded += (sender, args) =>Di2015NewLine        {Di2015NewLine            _target = AssociatedObject;Di2015NewLine            _target.KeyDown += new KeyEventHandler(Visual_KeyDown);Di2015NewLine        };  Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnDetaching()Di2015NewLine    {Di2015NewLine        base.OnDetaching();Di2015NewLine        _target.KeyDown -= new KeyEventHandler(Visual_KeyDown);   Di2015NewLine    }Di2015NewLineDi2015NewLine    public Key Key { get; set; }Di2015NewLineDi2015NewLine    void Visual_KeyDown(object sender, KeyEventArgs args)Di2015NewLine    {Di2015NewLine        if (Key == args.Key)Di2015NewLine            InvokeActions(Key);Di2015NewLine    }  Di2015NewLine}Di2015NewLine
19822201Di2015UniqueSeparatorKeyDown
19822201Di2015UniqueSeparatorPopup
19822201Di2015UniqueSeparator<Popup IsOpen="True">Di2015NewLine    <StackPanel>Di2015NewLineDi2015NewLine        <i:Interaction.Triggers>Di2015NewLine            <local:KeyTriggerThatWorks Key="Enter">Di2015NewLine                <ei:ChangePropertyAction TargetName="alert" PropertyName="Visibility" Value="Visible" />Di2015NewLine            </local:KeyTriggerThatWorks>Di2015NewLine        </i:Interaction.Triggers>Di2015NewLineDi2015NewLine        <TextBox />Di2015NewLine        <TextBlock Text="hi" x:Name="alert" Visibility="Collapsed"/>Di2015NewLine    </StackPanel>Di2015NewLine</Popup>Di2015NewLine
19822254Di2015UniqueSeparator.GetComponent()
19822254Di2015UniqueSeparatorDictionary[Component]
19822268Di2015UniqueSeparatorvar dt = new DataTable();Di2015NewLinedt.Columns.Add("Amount", typeof(int));Di2015NewLinedt.Columns.Add("Count", typeof(int));Di2015NewLinedt.Rows.Add(20, 2);Di2015NewLinedt.Rows.Add(42, 1);Di2015NewLinedt.Rows.Add(78, 5);Di2015NewLinedt.Rows.Add(91, 2);Di2015NewLinevar result = from DataRow x in dt.RowsDi2015NewLine                group x by ((int)x["Amount"]) / 50 into grp Di2015NewLine                select new {LowerBoundIncl = grp.Key * 50, Di2015NewLine                        UpperBoundExcl = (grp.Key + 1) * 50, Di2015NewLine                        TotalCount = grp.Sum(y => (int) y["Count"])};Di2015NewLine
19822591Di2015UniqueSeparatorGetDllDirectory
19822591Di2015UniqueSeparatorSetDllDirectory
19822591Di2015UniqueSeparatorGetDllDirectory
19822591Di2015UniqueSeparatorGetLastWin32Error()
19823118Di2015UniqueSeparatorSystem.Globalization
19823118Di2015UniqueSeparatorvar cultureInfo = new CultureInfo("en-US");Di2015NewLineDateTime dateTime = Convert.ToDateTime(strOrder[1], cultureInfo);Di2015NewLine
19823140Di2015UniqueSeparator   public string ExtractAlternateView()Di2015NewLine    {Di2015NewLine        var message = new System.Net.Mail.MailMessage();Di2015NewLine        message.Body = "This is the TEXT version";Di2015NewLineDi2015NewLine        //Add textBody as an AlternateViewDi2015NewLine        message.AlternateViews.Add(Di2015NewLine            System.Net.Mail.AlternateView.CreateAlternateViewFromString(Di2015NewLine                "This is the HTML version",Di2015NewLine                new System.Net.Mime.ContentType("text/html")Di2015NewLine            )Di2015NewLine        );Di2015NewLineDi2015NewLine        var dataStream = Model.AlternateViews[0].ContentStream;Di2015NewLine        byte[] byteBuffer = new byte[dataStream.Length];Di2015NewLine        return System.Text.Encoding.ASCII.GetString(byteBuffer, 0, dataStream.Read(byteBuffer, 0, byteBuffer.Length));Di2015NewLine    }Di2015NewLine
19823140Di2015UniqueSeparatorViewBag.Message= string ExtractAlternateView();Di2015NewLineDi2015NewLine @Html.Raw(ViewBag.Message);Di2015NewLine
19823362Di2015UniqueSeparatorEditButton.Click += (sender, args) => openEditor(temp);Di2015NewLine
19823497Di2015UniqueSeparatorvar newClassNode = classNode.ReplaceNode(propertyDeclaration, propertyDeclaration.WithAdditionalAnnotations(propertyAnnotation));Di2015NewLine
19823497Di2015UniqueSeparatorpropertyDeclaration
19823497Di2015UniqueSeparatorclassDeclaration
19823497Di2015UniqueSeparatorpropertyDeclaration
19823497Di2015UniqueSeparatorclassDeclaration
19823779Di2015UniqueSeparatorref
19823779Di2015UniqueSeparatorpublic
19823779Di2015UniqueSeparatorpublic
19823887Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var myObj = new SomeClass();Di2015NewLine    PrintProperties(myObj);Di2015NewLineDi2015NewLine    myObj.test = "haha";Di2015NewLine    PrintProperties(myObj);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void PrintProperties(SomeClass myObj){Di2015NewLine    foreach(var prop in myObj.GetType().GetProperties()){Di2015NewLine     Console.WriteLine (prop.Name + ": " + prop.GetValue(myObj, null));Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(var field in myObj.GetType().GetFields()){Di2015NewLine     Console.WriteLine (field.Name + ": " + field.GetValue(myObj));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SomeClass {Di2015NewLine public string test {get; set; }Di2015NewLine public string test2 {get; set; }Di2015NewLine public int test3 {get;set;}Di2015NewLine public int test4;Di2015NewLine}Di2015NewLine
19823887Di2015UniqueSeparatortest: Di2015NewLinetest2: Di2015NewLinetest3: 0Di2015NewLinetest4: 0Di2015NewLineDi2015NewLinetest: hahaDi2015NewLinetest2: Di2015NewLinetest3: 0Di2015NewLinetest4: 0Di2015NewLine
19823909Di2015UniqueSeparatorAxInterop.ShockwaveFlashObjects.dll
19823909Di2015UniqueSeparatorAxShockwaveFlash
19823909Di2015UniqueSeparator?autoplay=1
19823909Di2015UniqueSeparatorPlay()
19823909Di2015UniqueSeparatorstring path = @"http://www.youtube.com/v/aHjpOzsQ9YI?autoplay=1";Di2015NewLineaxShockwaveFlash1.LoadMovie(0, path);Di2015NewLine
19824029Di2015UniqueSeparatorprotected void viewHoursButton_OnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Button btn = sender as Button;Di2015NewLine    GridViewRow row = btn.NamingContainer as GridViewRow;Di2015NewLine    string pk = storyGridView.DataKeys[row.RowIndex].Values[0].ToString();Di2015NewLine    System.Diagnostics.Debug.WriteLine(pk);Di2015NewLine}Di2015NewLine
19824103Di2015UniqueSeparator string sURL = "http://api.planets.nu/games/list?limit=1";Di2015NewLine HttpWebRequest wrGetURL = (HttpWebRequest)WebRequest.Create(sURL);Di2015NewLine wrGetURL.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;Di2015NewLine StreamReader objReader = new StreamReader(wrGetURL.GetResponse().GetResponseStream(), Encoding.UTF8);Di2015NewLine string sLine;Di2015NewLine sLine = objReader.ReadToEnd();Di2015NewLine Console.WriteLine(sLine);Di2015NewLine
19824153Di2015UniqueSeparatorforeach (var control in Page.Form.Controls)Di2015NewLine{Di2015NewLine    if (control is HtmlInputControl)Di2015NewLine    {Di2015NewLine        var htmlInputControl = control as HtmlInputControl;Di2015NewLine        string controlName = htmlInputControl.Name;Di2015NewLine        string controlId = htmlInputControl.ID;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19824155Di2015UniqueSeparatorRepository.Clone()
19824155Di2015UniqueSeparatorstring sourceUrl, string workdirPath, [..]
19824155Di2015UniqueSeparatorvar repoUrl = "http://repository-url";Di2015NewLinevar workingDir = @"C:\\git\\ProjectName\\";Di2015NewLinevar repo = new Repository(Repository.Clone(repoUrl, workingDir));Di2015NewLine
19824286Di2015UniqueSeparatorpublic void SaveExcelWorkBook()Di2015NewLine{Di2015NewLine   OpenFileDialog openDlg = new OpenFileDialog();Di2015NewLine   openDlg.InitialDirectory = @"C:\\";Di2015NewLine   openDlg.ShowDialog();Di2015NewLine   string path = openDlg.FileName;Di2015NewLineDi2015NewLine   if (openDlg.ShowDialog() == DialogResult.OK)Di2015NewLine   {Di2015NewLine      tryDi2015NewLine      {Di2015NewLine         Application excelApp = new Application();Di2015NewLine         Workbook workBook = excelApp.Workbooks.Open(path);Di2015NewLine         Worksheet workSheet = (Worksheet)workBook.Worksheets[1];Di2015NewLineDi2015NewLine         // Do your work here inbetween the declaration of your workbook/worksheet  Di2015NewLine         // and the save action below.Di2015NewLineDi2015NewLine         workBook.SaveAs(/*path to save it to*/);  // NOTE: You can use 'Save()' or 'SaveAs()'Di2015NewLine         workBook.Close(); Di2015NewLine      }Di2015NewLineDi2015NewLine      catch (Exception ex)Di2015NewLine      {Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
19824286Di2015UniqueSeparator.Close()
19824286Di2015UniqueSeparatorMarshal.ReleaseComObject(workBook);Di2015NewLine
19824297Di2015UniqueSeparatorRelativeSource TemplatedParent
19824297Di2015UniqueSeparatorControlTemplate
19824508Di2015UniqueSeparatorKeyDown
19824508Di2015UniqueSeparatorprivate void KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Down || e.KeyCode == Keys.Up || e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
19824508Di2015UniqueSeparatorKeyPressed
19824650Di2015UniqueSeparator[ScriptIgnore]
19824650Di2015UniqueSeparator[System.Xml.Serialization.XmlIgnore]
19824650Di2015UniqueSeparator[NonSerialized]
19824650Di2015UniqueSeparator[ScriptIgnore]
19824650Di2015UniqueSeparator[XmlIgnore]
19824730Di2015UniqueSeparatorGroupBy
19824730Di2015UniqueSeparatorvar mostCommonValue = values.GroupBy(v => v)Di2015NewLine                            .OrderByDescending(g => g.Count())Di2015NewLine                            .Select(g => g.Key)Di2015NewLine                            .FirstOrDefault();Di2015NewLine
19824895Di2015UniqueSeparatorIEnumerable<T>.Buffer()
19824895Di2015UniqueSeparatorpublic static EnumerableExtensionsDi2015NewLine{Di2015NewLine    public static BufferEnumerable<T> Buffer(this IEnumerable<T> source)Di2015NewLine    {Di2015NewLine        return new BufferEnumerable<T>(source);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BufferEnumerable<T> : IEnumerable<T>, IDisposableDi2015NewLine{Di2015NewLine    IEnumerator<T> source;Di2015NewLine    List<T> buffer;Di2015NewLine    public BufferEnumerable(IEnumerable<T> source)Di2015NewLine    {Di2015NewLine        this.source = source.GetEnumerator();Di2015NewLine        this.buffer = new List<T>();Di2015NewLine    }Di2015NewLine    public IEnumerator<T> GetEnumerator()Di2015NewLine    {Di2015NewLine        return new BufferEnumerator<T>(source, buffer);Di2015NewLine    }Di2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        source.Dispose()Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BufferEnumerator<T> : IEnumerator<T>Di2015NewLine{Di2015NewLine    IEnumerator<T> source;Di2015NewLine    List<T> buffer;Di2015NewLine    int i = -1;Di2015NewLine    public BufferEnumerator(IEnumerator<T> source, List<T> buffer)Di2015NewLine    {Di2015NewLine        this.source = source;Di2015NewLine        this.buffer = buffer;Di2015NewLine    }Di2015NewLine    public T CurrentDi2015NewLine    {Di2015NewLine        get { return buffer[i]; }Di2015NewLine    }Di2015NewLine    public bool MoveNext()Di2015NewLine    {Di2015NewLine        i++;Di2015NewLine        if (i < buffer.Count)Di2015NewLine            return true;Di2015NewLine        if (!source.MoveNext())Di2015NewLine            return false;Di2015NewLine        buffer.Add(source.Current);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    public void Reset()Di2015NewLine    {Di2015NewLine        i = -1;Di2015NewLine    }Di2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
19824895Di2015UniqueSeparatorusing (var evenNumbers = Numbers.Where(i => i % 2 == 0).Buffer())Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19824895Di2015UniqueSeparatorIEnumerable<T> source
19824895Di2015UniqueSeparatorBuffer
19824895Di2015UniqueSeparatorGetEnumerator
19824895Di2015UniqueSeparatorBuffer
19824895Di2015UniqueSeparatorBuffer
19824900Di2015UniqueSeparatorusing(var scope = new TransactionScope(Di2015NewLine        TransactionScopeOption.RequiresNew,Di2015NewLine        new TransactionOptions() {Di2015NewLine                IsolationLevel = IsolationLevel.ReadCommittedDi2015NewLine            })) {Di2015NewLine    context.Authors.Add(newauthor);Di2015NewLine    context.SaveChanges();Di2015NewLine    newbook.AuthorID = newauthor.IDDi2015NewLine    context.Books.Add(newbook);Di2015NewLine    context.SaveChanges();Di2015NewLine    scope.Complete();Di2015NewLine}Di2015NewLine
19824905Di2015UniqueSeparator<asp:DropDownList ID="DropDownListSpecies" runat="server"Di2015NewLine    Height="27px" Width="107px" DataSourceID="Species"Di2015NewLine    DataTextField="Species" DataValueField="Species" AutoPostBack="True">Di2015NewLine</asp:DropDownList>Di2015NewLine<asp:SqlDataSource ID="Species" runat="server"Di2015NewLine    ConnectionString="<%$ ConnectionStrings:ConnectionString %>"Di2015NewLine    SelectCommand="SELECT DISTINCT [Species] FROM [Breed]"></asp:SqlDataSource>Di2015NewLine<asp:DropDownList ID="DropDownListBreed" runat="server"Di2015NewLine    Height="20px" Width="110px"Di2015NewLine    DataSourceID="breed" DataTextField="Breed" DataValueField="Breed">Di2015NewLine</asp:DropDownList>Di2015NewLine<asp:SqlDataSource ID="breed" runat="server"Di2015NewLine    ConnectionString="<%$ ConnectionStrings:ConnectionString %>"Di2015NewLine    SelectCommand="SELECT DISTINCT [Breed] FROM [Breed] WHERE Species=@Species">Di2015NewLine    <SelectParameters>Di2015NewLine        <asp:ControlParameter ControlID="DropDownListSpecies" PropertyName="SelectedValue"Di2015NewLine            Name="Species " Type="String" DefaultValue="cat" />Di2015NewLine    </SelectParameters>Di2015NewLine</asp:SqlDataSource>Di2015NewLine
19824978Di2015UniqueSeparatorTuple<double[][], string[]> GetElections()Di2015NewLine{Di2015NewLine    var file = @"C:\\Users\\Deines\\Documents\\Election2008.txt";Di2015NewLine    var fileAsLines = File.ReadLines(file).Select(line => line.Split(','));Di2015NewLine    var dataset = fileAsLines.Select(line => new[] Di2015NewLine                                             { Di2015NewLine                                                 Convert.ToDouble(line[1]),Di2015NewLine                                                 Convert.ToDouble(line[2]),Di2015NewLine                                                 Convert.ToDouble(line[3])Di2015NewLine                                             }).ToArray();Di2015NewLine    var labels = fileAsLines.Select(line => line[4]).ToArray();Di2015NewLine    return Tuple.Create(dataset, labels);Di2015NewLine}Di2015NewLine
19824978Di2015UniqueSeparatorclass ElectionResultDi2015NewLine{Di2015NewLine     public ElecationResult(string label, double x, double y, int amount)Di2015NewLine     {Di2015NewLine         this.Label = label;Di2015NewLine         this.Point = new Point(x,y);Di2015NewLine         this.Amount = amount;Di2015NewLine     }Di2015NewLine     string Label { get; private set; }Di2015NewLine     Point Location { get; private set; }Di2015NewLine     int Amount { get; private set; }Di2015NewLine}Di2015NewLineDi2015NewLineIList<ElectionResult> GetElectionResults()Di2015NewLine{Di2015NewLine    var file = @"C:\\Users\\Deines\\Documents\\Election2008.txt";Di2015NewLine    var fileAsLines = File.ReadLines(file).Select(line => line.Split(','));Di2015NewLineDi2015NewLine    return fileAsLines.Select(line => new ElectionResult(line[4],Di2015NewLine                                                 Convert.ToDouble(line[1]),Di2015NewLine                                                 Convert.ToDouble(line[2]),Di2015NewLine                                                 Convert.ToInt32(line[3]))Di2015NewLine                      .ToList();Di2015NewLine}Di2015NewLine
19825329Di2015UniqueSeparatorMessageBox.Show(DateTime.Now.ToString());Di2015NewLine
19825329Di2015UniqueSeparatorMessageBox.Show("Hello, today's date is: " + DateTime.Now.ToString(), "Attention!", Di2015NewLine   MessageBoxButtons.OK, MessageBoxIcon.Information);Di2015NewLine
19825344Di2015UniqueSeparatorpublic void Window_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.IsRepeat) return;Di2015NewLineDi2015NewLine    // rest of your code...Di2015NewLine
19825721Di2015UniqueSeparatorpublic int SpeedDi2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine     return CurrentSpeed + CarAcceleration;Di2015NewLine  {Di2015NewLine}Di2015NewLineDi2015NewLinepublic int CarAcceleration{Di2015NewLine    getDi2015NewLine    { Di2015NewLine        if(Speed >= MaxSpeed)Di2015NewLine        {Di2015NewLine            return MaxSpeedDi2015NewLine        }Di2015NewLineDi2015NewLine        return Speed;Di2015NewLine    }Di2015NewLine    set;Di2015NewLine    }Di2015NewLine
19825819Di2015UniqueSeparatorjavascript:void(0);
19825819Di2015UniqueSeparator<a id="aTag" runat="server">You cannot click me!</a>Di2015NewLineDi2015NewLineif(condition)Di2015NewLine{Di2015NewLine    aTag.HRef = "javascript:void(0);";Di2015NewLine}Di2015NewLine
19825839Di2015UniqueSeparatorrhos[x + (y)*(correct_stride) ] = x;Di2015NewLine
19825839Di2015UniqueSeparatorfloat[] rhos = new float[(int)(image.Width / 60) * (int)(image.Height / 60)];Di2015NewLine
19825903Di2015UniqueSeparator        modelBuilder.Entity<SecureMessage>()Di2015NewLine            .HasOptional(x => x.ParentMessage)Di2015NewLine            .WithOptionalDependent(x => x.ChildMessage);Di2015NewLine
19826258Di2015UniqueSeparatormyABCobject.DoSomething((Action)MySomething);Di2015NewLine
19826258Di2015UniqueSeparatorvar newparameter = (Action) parameter;Di2015NewLine newparameter();Di2015NewLine
19826379Di2015UniqueSeparator public class TelevisionDi2015NewLine    {Di2015NewLine        public int TelevisionID { get; set; }Di2015NewLine        public int ModelID { get; set; }Di2015NewLineDi2015NewLine        public virtual ICollection<Room> Rooms { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class RoomDi2015NewLine    {Di2015NewLine        public int RoomID { get; set; }Di2015NewLine        //Di2015NewLine        public virtual ICollection<Television> Televisions { get; set; }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public class TelevisionRoomDi2015NewLine    {Di2015NewLine        public int TelevisionID { get; set; }Di2015NewLine        public int RoomID { get; set; }Di2015NewLine        public int Quantity { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ModelDi2015NewLine    {Di2015NewLine        public int ModelID { get; set; }Di2015NewLine        public string ModelName { get; set; }Di2015NewLine    }Di2015NewLine
19826502Di2015UniqueSeparatorEmailGT x
19826502Di2015UniqueSeparatorSendEmail
19826502Di2015UniqueSeparatorEmailGT x
19826502Di2015UniqueSeparatorSendEmail
19826502Di2015UniqueSeparatorEmailGT
19826502Di2015UniqueSeparatorclass EmailDi2015NewLine{Di2015NewLine    public void SendEmail(EmailGT x)Di2015NewLine    {Di2015NewLine        string destinatario = x.destinatario;Di2015NewLine        string mensagem = x.mensagem;Di2015NewLine        System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();Di2015NewLine        message.To.Add(destinatario);Di2015NewLine        message.Subject = "something";Di2015NewLine        message.Body = mensagem;Di2015NewLine        // snipDi2015NewLine    }Di2015NewLine}Di2015NewLine
19826502Di2015UniqueSeparatorEmailGT
19826502Di2015UniqueSeparatorSendEmail
19826502Di2015UniqueSeparatorEmailGT x = new EmailGT();Di2015NewLinex.mensagem = "teste 2";Di2015NewLinex.destinatario = "my email";Di2015NewLineDi2015NewLineEmail z = new Email();Di2015NewLinez.SendEmail(x);Di2015NewLine
19826780Di2015UniqueSeparatorMouseDown
19826780Di2015UniqueSeparatorpictureBox1_MouseDown
19826780Di2015UniqueSeparatorMouseMove
19826780Di2015UniqueSeparatorpictureBox1_MouseMove
19826780Di2015UniqueSeparator    bool isDragged = false;Di2015NewLine    Point ptOffset;Di2015NewLineDi2015NewLine    private void button1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Button == MouseButtons.Left)Di2015NewLine        {Di2015NewLine            isDragged = true;Di2015NewLine            Button btn = (Button)sender;Di2015NewLine            ptOffset = new Point(btn.Location.X - Cursor.Position.X, btn.Location.Y - Cursor.Position.Y);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            isDragged = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_MouseMove(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        if (isDragged)Di2015NewLine        {Di2015NewLine            Point newPoint = Cursor.Position;Di2015NewLine            newPoint.Offset(ptOffset);Di2015NewLine            Button btn = (Button)sender;Di2015NewLine            btn.Location = newPoint;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_MouseUp(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        isDragged = false;Di2015NewLine    }Di2015NewLine
19826950Di2015UniqueSeparatorvar tmpList = new HashSet<int>(listId);Di2015NewLinevar filterItems = listObj.Where(x => tmpList.Contains(x.Id));Di2015NewLine
19826950Di2015UniqueSeparatorlistObj
19826950Di2015UniqueSeparatorlistId
19826950Di2015UniqueSeparatorlistObj.Where(x => listId.Contains(x.Id));
19826950Di2015UniqueSeparatorlistObj.Where(x => tmpList.Contains(x.Id))
19826950Di2015UniqueSeparatorvar tmpList = new HashSet<int>(listId);
19826950Di2015UniqueSeparatorlistObj
19826978Di2015UniqueSeparatorport.Open();
19826983Di2015UniqueSeparator1.string originalPath = @"C:\\project\\temp\\code";Di2015NewLine2.string originalPath = "C:\\\\project\\\\temp\\\\code";Di2015NewLine
19826983Di2015UniqueSeparatornewPath = originalPath.Replace("C:\\\\project\\\\temp","C:\\\\project\\\\files");
19826983Di2015UniqueSeparatornewPath = originalPath.Replace(@"C:\\project\\temp", @"C:\\project\\files");
19827174Di2015UniqueSeparatorprivate void abcRenew_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var api = new abcAPI();Di2015NewLineDi2015NewLine    Action<IAsyncResult> callback = asynchronousResult =>Di2015NewLine    {Di2015NewLine        /* Now `api` is in scope */Di2015NewLine    };Di2015NewLineDi2015NewLine    api.CallBack = new AsyncCallback(callback);Di2015NewLine    api.getNewAbc();Di2015NewLine}Di2015NewLine
19827187Di2015UniqueSeparatorDate target = new Date(2011, 4, 1);Di2015NewLinewhile (target < Date.Today) {Di2015NewLine  // do something with target.Month and target.YearDi2015NewLine  target = target.AddMonths(1);Di2015NewLine}Di2015NewLine
19827411Di2015UniqueSeparatorpublic JsonResult getAutoCompletedata(string query)Di2015NewLine{Di2015NewLine    var query = from p in dt.AsEnumerable() //dt is the datatableDi2015NewLine                        where p.Field<string>("code") == queryDi2015NewLine                        select newDi2015NewLine                        {Di2015NewLine                            value = p.Field<string>("yourColumnName"),Di2015NewLine                            lable= p.Field<string>("YourAnotherColumnName")                         Di2015NewLine                        }.ToList();Di2015NewLine    return Json(query, JsonRequestBehavior.AllowGet);Di2015NewLine}Di2015NewLine
19827508Di2015UniqueSeparatorMessageBox
19827508Di2015UniqueSeparatorApplication.DoEvents();Di2015NewLine
19827508Di2015UniqueSeparatorMessageBox.Show();
19827508Di2015UniqueSeparatorcomboBox.Refresh();Di2015NewLine
19827508Di2015UniqueSeparatorcomboBox.Invoke
19827508Di2015UniqueSeparatorPerformLayout
19827508Di2015UniqueSeparatorForm
19827508Di2015UniqueSeparatorControl
19827508Di2015UniqueSeparatorMessageBox.Show
19827692Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine   <ItemTemplate>Di2015NewLine      <asp:HiddenField ID="myHiddenFieldID" runat="server" Di2015NewLine             Value='<%# Eval("SomeJSCLientID") %>' />Di2015NewLine</ItemTemplate>Di2015NewLine
19827692Di2015UniqueSeparatorforeach (GridViewRow row in grid.Rows)Di2015NewLine{Di2015NewLine   if (((HiddenField)row.FindControl("myHiddenFieldID")).Value)Di2015NewLine   {Di2015NewLine    //do your thing          Di2015NewLine   }            Di2015NewLine}Di2015NewLine
19827739Di2015UniqueSeparatorSPListItem
19827739Di2015UniqueSeparatorDateTime
19827739Di2015UniqueSeparatorToUniversalTime()
19827991Di2015UniqueSeparatormanually
19827991Di2015UniqueSeparator public class CategoryDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public Category Parent { get; set; }Di2015NewLine        public ObservableCollection<Category> Items{get;set;}Di2015NewLine        //ConstructorDi2015NewLine        public Category(string Cat_name, Category Cat_parent)Di2015NewLine        {Di2015NewLine            Name = Cat_name;Di2015NewLine            Parent = Cat_parent;Di2015NewLine            Items = new ObservableCollection<Category>();Di2015NewLine        }Di2015NewLine        /// <summary>Di2015NewLine        /// Adds a child to this nodeDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="child"></param>Di2015NewLine        /// <returns></returns>Di2015NewLine        public void AddChild(Category child)Di2015NewLine        {Di2015NewLine            if (child == null) //check if the child is not nullDi2015NewLine                return;Di2015NewLine            Items.Add(child);Di2015NewLine        }Di2015NewLine        /// <summary>Di2015NewLine        /// Returns Root ParentDi2015NewLine        /// </summary>Di2015NewLine        /// <returns></returns>Di2015NewLine        public Category RootPanel()Di2015NewLine        {Di2015NewLine            if (Parent == null)Di2015NewLine            {Di2015NewLine                return this;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return this.Parent.RootPanel();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19827991Di2015UniqueSeparator  public static ObservableCollection<Category> GetCategoryData()Di2015NewLine    {Di2015NewLine        ObservableCollection<Category> data = new ObservableCollection<Category>();Di2015NewLine        Category UK = new Category("UK", null);//Because it's root panel it has no parents so parent should set to nullDi2015NewLine        //Adding sub category of UKDi2015NewLine        Category London = new Category("London", UK);Di2015NewLine        UK.AddChild(London);Di2015NewLine        Category NewCastel = new Category("NewCastel", UK);Di2015NewLine        UK.AddChild(NewCastel);Di2015NewLine        Category LiverPool = new Category("LiverPool", UK);Di2015NewLine        UK.AddChild(LiverPool);Di2015NewLine        //adding childs of London and  NewcastleDi2015NewLine        for (int i = 1; i <= 100; i++)Di2015NewLine        {Di2015NewLine            London.AddChild(new Category("london " + i.ToString(), London));Di2015NewLine        }Di2015NewLine        NewCastel.AddChild(new Category("NewCastle 1", NewCastel));Di2015NewLine        NewCastel.AddChild(new Category("NewCastle 2", NewCastel));Di2015NewLine        NewCastel.AddChild(new Category("NewCastle 3", NewCastel));Di2015NewLine        data.Add(UK);Di2015NewLine        Category USA = new Category("USA", null);Di2015NewLine        USA.AddChild(new Category("NewYork", USA));Di2015NewLine        USA.AddChild(new Category("California", USA));Di2015NewLine        data.Add(USA);Di2015NewLine        Category China = new Category("China", null);Di2015NewLine        China.AddChild(new Category("one", China));Di2015NewLine        China.AddChild(new Category("two", China));Di2015NewLine        China.AddChild(new Category("three", China));Di2015NewLine        data.Add(China);Di2015NewLine        return data;Di2015NewLine    }Di2015NewLine
19827991Di2015UniqueSeparator private void button1_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        radTreeListView.ItemsSource = GetCategoryData();Di2015NewLine    }Di2015NewLine
19827991Di2015UniqueSeparator private void radTreeListView_SelectionChanging(object sender, Telerik.Windows.Controls.SelectionChangingEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.AddedItems.Count>0)Di2015NewLine        {Di2015NewLine            if (radTreeListView.SelectedItems.Count >= 5)Di2015NewLine            {Di2015NewLine                e.Cancel = true;Di2015NewLine            }Di2015NewLine            if (radTreeListView.SelectedItems.Count>=1) // a node has been selected beforeDi2015NewLine            {Di2015NewLine                //Di2015NewLine                Category PreviousSelectedItem = (Category)radTreeListView.SelectedItems[0];Di2015NewLine                Category ItemWhichisSelectedNow = (Category)e.AddedItems[0];Di2015NewLine                if (PreviousSelectedItem.Parent != ItemWhichisSelectedNow.Parent)Di2015NewLine                {Di2015NewLine                    e.Cancel = true;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19827996Di2015UniqueSeparatorif(!Page.IsPostBack)Di2015NewLine{Di2015NewLine   string[] parity = conData.GetParity();Di2015NewLine            ddlParity.DataSource = parity.ToList();Di2015NewLine            ddlParity.DataBind();Di2015NewLine}Di2015NewLine
19828063Di2015UniqueSeparator    while ((line = file.ReadLine()) != null)Di2015NewLine    {Di2015NewLine        string[] fields = line.Split(',');Di2015NewLine        prop.matricula = fields[0].ToString();Di2015NewLine        prop.nombre = fields[1].ToString();Di2015NewLine        prop.sueldo = decimal.Parse(fields[2]); Di2015NewLineDi2015NewLine        for (int i = 0; i < fields.Length; i++)Di2015NewLine        {Di2015NewLine            listBox1.Items.Add(fields[i]);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
19828063Di2015UniqueSeparatorlistBox1.Items.Add(prop.matricula+','+prop.nombre+',prop.sueldo.toString());Di2015NewLine
19828177Di2015UniqueSeparator// Add handlerDi2015NewLine        SpeedChart.Viewport.PropertyChanged += new EventHandler<ExtendedPropertyChangedEventArgs>(Viewport_PropertyChanged);Di2015NewLineDi2015NewLineDi2015NewLine// Respond to changesDi2015NewLine        void Viewport_PropertyChanged(object sender, ExtendedPropertyChangedEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.PropertyName == "Visible")Di2015NewLine            {Di2015NewLine                StrokeChart.Viewport.Visible = new DataRect(SpeedChart.Viewport.Visible.XMin, StrokeChart.Viewport.Visible.YMin, SpeedChart.Viewport.Visible.Width, StrokeChart.Viewport.Visible.Height);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19828372Di2015UniqueSeparatorvar strFileName = "whatever%#.jpg$";Di2015NewLinestrFileName = strFileName.replace(/[^\\0-9a-zA-Z.]/g, "_");Di2015NewLinealert(strFileName);Di2015NewLine
19828372Di2015UniqueSeparator"whatever__.jpg_"
19828372Di2015UniqueSeparator"wh-atever%#.jpg$"
19828372Di2015UniqueSeparator"wh_atever__.jpg_"
19828599Di2015UniqueSeparatorf1 == f2
19828599Di2015UniqueSeparatorFileInfo
19828599Di2015UniqueSeparatorif (f1.FullName.Replace(path, "") == f2.FullName.Replace(path2, ""))Di2015NewLine
19828618Di2015UniqueSeparatorGetGeopositionAsync
19828618Di2015UniqueSeparatorSetMyLocation()
19828618Di2015UniqueSeparatorOnNavigatedTo(...)
19828674Di2015UniqueSeparatorDirectory.GetFiles("","",SearchOption.AllDirectories);Di2015NewLine
19828674Di2015UniqueSeparatorSearchOption
19828722Di2015UniqueSeparatorcspkg
19828722Di2015UniqueSeparatorcscfg
19828722Di2015UniqueSeparatorWeb.Azure
19828722Di2015UniqueSeparatorWeb.Test.Local
19828722Di2015UniqueSeparatorWeb
19828722Di2015UniqueSeparatorWeb.Azure
19828722Di2015UniqueSeparatorWeb.Test.Local
19828722Di2015UniqueSeparatorSqlConnectionString
19828722Di2015UniqueSeparatorWeb.Azure
19828722Di2015UniqueSeparatorWeb.Test.Local
19828722Di2015UniqueSeparatorWeb.Test.Local
19828722Di2015UniqueSeparatorDev
19828722Di2015UniqueSeparatorRelease
19828722Di2015UniqueSeparatorRelease
19828722Di2015UniqueSeparatorcspkg
19828722Di2015UniqueSeparatorzip
19828751Di2015UniqueSeparatortransaction.Commit();
19828751Di2015UniqueSeparatorcmd.ExecuteNonQuery();
19828781Di2015UniqueSeparator<asp:Panel ID="Panel1" runat="server" >                Di2015NewLine<fieldlset>Di2015NewLine<legend><asp:Label id="Label1" runat="server" /></legend>Di2015NewLine</fieldset>Di2015NewLine</asp:Panel>Di2015NewLine
19828781Di2015UniqueSeparatorPanel1.Visible = true; // or falseDi2015NewLine
19828781Di2015UniqueSeparatorLabel1.Text = String.Format("some text {0}",Value_Form_Code);Di2015NewLine
19828907Di2015UniqueSeparatortest.Settings1.Default.SettingTest = "test";Di2015NewLine
19828907Di2015UniqueSeparatorpublic string SettingTest {Di2015NewLine            get {Di2015NewLine                return ((string)(this["SettingTest"]));Di2015NewLine            }Di2015NewLine            set {Di2015NewLine                this["SettingTest"] = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19829041Di2015UniqueSeparatorRESTORE DATABASE [CopyOfMaster] FROM  Di2015NewLineDISK = N'C:\\Temp\\Master.bak' Di2015NewLineWITH  FILE = 1,  Di2015NewLineMOVE N'Master' TO N'C:\\Temp\\copy.mdf',  Di2015NewLineMOVE N'Master_log' TO N'C:\\Temp\\copy_log.ldf',  Di2015NewLineNOUNLOADDi2015NewLineGODi2015NewLine
19829041Di2015UniqueSeparatorDISK
19829041Di2015UniqueSeparatorMOVE
19829142Di2015UniqueSeparatordynamic
19829142Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        var AnonymousInside = GetAnonymousTyped(GetAnonymousObject(), new {Key="",Value=""});Di2015NewLine        Console.Write(AnonymousInside.Key);//All OkDi2015NewLine    }Di2015NewLineDi2015NewLine    public static T GetAnonymousTyped<T>(object o, T _)Di2015NewLine    {Di2015NewLine        return (T)o;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static object GetAnonymousObject()Di2015NewLine    {Di2015NewLine         return new {Key="KeyName",Value="ValueName"};Di2015NewLine    }Di2015NewLine}Di2015NewLine
19829290Di2015UniqueSeparatorYourIQueryableResults.Where(x => filter1!="" && (x.Name == filter1))  Di2015NewLine
19829290Di2015UniqueSeparatorif (filter1!="") { YourIQueryableResults = YourIQueryableResults.Where(x => x.Name == filter1)}  Di2015NewLine
19829447Di2015UniqueSeparatorvar valuesToSet = new Dictionary<string, object> Di2015NewLine                  {Di2015NewLine                        {"BitmapUnembeddableFonts", false}, Di2015NewLine                        {"UsePdaA", true}Di2015NewLine                  };Di2015NewLineDi2015NewLinevar settings = new FixedFormatSettings();Di2015NewLineDi2015NewLinevar properties = settings.GetType()Di2015NewLine                         .GetProperties()Di2015NewLine                         .Where(p => p.CanWrite);Di2015NewLineDi2015NewLineforeach (var property in properties)Di2015NewLine{Di2015NewLine    object valueToSet;Di2015NewLine    if(valuesToSet.TryGetValue(property.Name, out valueToSet))Di2015NewLine    {Di2015NewLine        property.SetValue(settings, valueToSet);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineConsole.WriteLine(settings.BitmapUnembeddableFonts); //falseDi2015NewLineConsole.WriteLine(settings.UsePdaA); //trueDi2015NewLine
19829480Di2015UniqueSeparatorvoid SomeMethodDi2015NewLine{Di2015NewLine    foreach(Touch input in Inputlist){Di2015NewLine        ThreadPool.QueueUserWorkItem(new WaitCallback(FilterInput), input);Di2015NewLine    }Di2015NewLine}Di2015NewLinevoid FilterInput(object unCastUnFilteredInput){Di2015NewLine    Touch UnFilteredInput = (Touch)unCastUnFilteredInput;Di2015NewLine....Di2015NewLine}Di2015NewLine
19829480Di2015UniqueSeparatorconst int MaxConcurrentThreads = 4;Di2015NewLineDi2015NewLineprivate readonly Semaphore _inputLimiter = new Semaphore(MaxConcurrentThreads,MaxConcurrentThreads);Di2015NewLineDi2015NewLinevoid SomeMethodDi2015NewLine{Di2015NewLine    foreach(Touch input in Inputlist){Di2015NewLine        _inputLimiter.WaitOne();Di2015NewLine        ThreadPool.QueueUserWorkItem(new WaitCallback(FilterInput), input);Di2015NewLine    }Di2015NewLine}Di2015NewLinevoid FilterInput(object unCastUnFilteredInput){Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Touch UnFilteredInput = (Touch)unCastUnFilteredInput;Di2015NewLine        ....Di2015NewLine    {Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        //use a try-finally so the semaphore still gets released in the event a exception happens in the .... region.Di2015NewLine        _inputLimiter.Release();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19829540Di2015UniqueSeparatorICommand.Execute
19829540Di2015UniqueSeparatorprivate void Button_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    StartRecordCommand.Execute(null);Di2015NewLine}Di2015NewLine
19829650Di2015UniqueSeparatorExcel.Range xlRng = (Excel.Range)workSheet.get_Range("A1:B6", Type.Missing);Di2015NewLineDictionary<string, string> dic = new Dictionary<string, string>();Di2015NewLineforeach (Excel.Range cell in xlRng)Di2015NewLine{Di2015NewLineDi2015NewLine    string cellIndex = cell.get_AddressLocal(false, false, Excel.XlReferenceStyle.xlA1, Type.Missing, Type.Missing);Di2015NewLine    string cellValue = Convert.ToString(cell.Value2);Di2015NewLine    dic.Add(cellIndex, cellValue);Di2015NewLine }Di2015NewLine
19829650Di2015UniqueSeparatorusing Excel = Microsoft.Office.Interop.Excel;Di2015NewLine
19829686Di2015UniqueSeparatorcomboBox1_SelectedIndexChanged(comboBox1, new EventArgs()); // or (null, null)Di2015NewLine
19829686Di2015UniqueSeparatoratomaras
19829686Di2015UniqueSeparatorOnSelectedIndexChanged
19829695Di2015UniqueSeparatortask
19829695Di2015UniqueSeparatorid
19829695Di2015UniqueSeparatorselect taskDi2015NewLinefrom MineDi2015NewLineorder by id descDi2015NewLinelimit 1Di2015NewLine
19829695Di2015UniqueSeparatorprivate void LoadData()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        SetConnection();Di2015NewLine        sql_con.Open();Di2015NewLine        sql_cmd = sql_con.CreateCommand();Di2015NewLine        string commandText = "select task from Mine order by id desc limit 1";Di2015NewLineDi2015NewLine        sql_cmd.CommandText = commandText;Di2015NewLine        var lsattask = sql_cmd.ExecuteScalar().ToString();Di2015NewLineDi2015NewLine        MessageBox.Show(lsattask);Di2015NewLineDi2015NewLine        sql_con.Close();Di2015NewLine    }Di2015NewLine    catch(Exception exception)Di2015NewLine    {Di2015NewLine        Debug.WriteLine(exception.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19829695Di2015UniqueSeparatorExecuteScalar
19829695Di2015UniqueSeparatorid
19829804Di2015UniqueSeparatorRateInfos[] rt = hr.Select(item => item.RateInfo).ToArray();Di2015NewLine
19830042Di2015UniqueSeparatorGetHashCode()
19830042Di2015UniqueSeparatorEquals(Coordinate)
19830042Di2015UniqueSeparatorpublic class Point : IEquatable<Point>Di2015NewLine{Di2015NewLine    public Coordinate Coordinate { get; private set; }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        return Coordinate.GetHashCode();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        return this.Equals(obj as Point);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(Point point)Di2015NewLine    {Di2015NewLine        if(point == null)Di2015NewLine            return false;Di2015NewLineDi2015NewLine        return this.Coordinate.Equals(point.Coordinate);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19830042Di2015UniqueSeparatorIEquatable<Point>
19830042Di2015UniqueSeparatorstruct
19830042Di2015UniqueSeparatorobject
19830042Di2015UniqueSeparatorbool Equals(object)
19830157Di2015UniqueSeparatordouble
19830157Di2015UniqueSeparatordouble number;Di2015NewLinebool result = double.TryParse(Console.ReadLine(), out number); Di2015NewLine
19830317Di2015UniqueSeparator@.Html.DropDownList
19830317Di2015UniqueSeparator   public ActionResult Index(int id)Di2015NewLine        {Di2015NewLine            ViewBag.ProductCategoryID = new SelectList(db.GetProductCategories.ToList(), "ProductCategoryID", "ProductCategoryName", "Select");Di2015NewLine            return View();Di2015NewLine        }Di2015NewLine
19830317Di2015UniqueSeparator   @Html.DropDownList("ProductCategoryID",null,new {@onchange="submitform('dropdown')"})Di2015NewLine
19830317Di2015UniqueSeparator@.Html.DropDownListFor
19830317Di2015UniqueSeparator   public ActionResult Index(int id)Di2015NewLine        {Di2015NewLine            ViewBag.ProductCategoryID = db.GetProductCategories.ToList();Di2015NewLine            return View();Di2015NewLine        }Di2015NewLine
19830317Di2015UniqueSeparator@Html.DropDownListFor(model => model.ProductCategoryID, (SelectList)ViewBag.ProductCategoryID, "Select", new { onchange = "submitform('dropdown')"})Di2015NewLine
19830317Di2015UniqueSeparator <script type="text/javascript">Di2015NewLine    $(document).ready(function () {Di2015NewLine        var ProductCatID = $("#ProductCategoryID").val();Di2015NewLine        submitform = function (flag) {Di2015NewLine            var param = { ProdCatID: ProductCatID, Flag: flag };Di2015NewLine            var ul = '@Url.Action("Create", "YourControllerName")';Di2015NewLine             $.ajax({Di2015NewLine                 url: ul + "?ProdCatID=" + ProductCatID + "&&Flag=" + flag,Di2015NewLine                 type: 'GET',Di2015NewLine                 datatype: "json",Di2015NewLine                 contentType: "application/json; charset=utf-8",Di2015NewLine                 async: true,Di2015NewLine                 data: JSON.stringify(param),Di2015NewLine                 success: function (response) {Di2015NewLine                     if (response != "") {                               Di2015NewLine                         alert("Record Added Successfully!");Di2015NewLine                     }                        Di2015NewLine                 },Di2015NewLine                 error: function (xhr, status, error) {Di2015NewLine                     alert("R:" + xhr.responseText + " S:" + status + " E:" + error);Di2015NewLine                 }Di2015NewLine             });Di2015NewLine        }Di2015NewLine    });Di2015NewLine</script>Di2015NewLine
19830317Di2015UniqueSeparator public ActionResult Create(string ProdCatID, string flag)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            if (flag == "dropdown")Di2015NewLine            {Di2015NewLine                //your code goes here.Di2015NewLine            }Di2015NewLine            if (flag == "button")Di2015NewLine            {Di2015NewLine                //your code goes here/Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19830317Di2015UniqueSeparator public JsonResult Create(string ProdCatID, string Flag)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            if (flag == "dropdown")Di2015NewLine            {Di2015NewLine                //your code goes here.Di2015NewLine            }Di2015NewLine            if (flag == "button")Di2015NewLine            {Di2015NewLine                //your code goes here/Di2015NewLine            }Di2015NewLine        }Di2015NewLine        var mdoel = db.GetProductCategories.where(id=>id.ProductCategoryID==ProductCatID).ToList();Di2015NewLine        return Json(Model, JsonRequestBehavior.AllowGet);Di2015NewLine    }Di2015NewLine
19830437Di2015UniqueSeparatorwhile(...)
19830437Di2015UniqueSeparatorSystem.Timers.Timer
19830526Di2015UniqueSeparatorpublic string FirstName;Di2015NewLineDi2015NewLinepublic string FirstName { get; set; }Di2015NewLine
19830526Di2015UniqueSeparatorclass
19830526Di2015UniqueSeparator_get()
19830526Di2015UniqueSeparator_set(value)
19830526Di2015UniqueSeparatorpublic class Foo {Di2015NewLine    public int Bar { get; set; }Di2015NewLine}Di2015NewLine
19830526Di2015UniqueSeparatorvar f = Foo();Di2015NewLinef.Bar = 32;Di2015NewLine
19830526Di2015UniqueSeparatorFoo
19830526Di2015UniqueSeparatorpublic class Foo {Di2015NewLine    private int m_bar;Di2015NewLine    public int Bar {Di2015NewLine        get { return m_bar; }Di2015NewLine        set {Di2015NewLine            m_bar = value;Di2015NewLine            OnChanged();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler Changed;Di2015NewLine    protected virtual void OnChanged() {Di2015NewLine        var evt = Changed;Di2015NewLine        if (evt != null)Di2015NewLine            evt(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19830574Di2015UniqueSeparatorSession_Start
19830574Di2015UniqueSeparator  protected void Session_Start(Object sender, EventArgs e)Di2015NewLine  {Di2015NewLine     if (User.Identity.IsAuthenticated)Di2015NewLine     {Di2015NewLine        FormsAuthentication.SignOut();Di2015NewLine        Response.Redirect("~/Account/LogOn");Di2015NewLine     }Di2015NewLine  }Di2015NewLine
19830686Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Excel = Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLinenamespace MergeBooksDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Excel.Application exApp = new Excel.Application();Di2015NewLine            Excel.Workbook wb1 = exApp.Workbooks.Open(@"C:\\wb1.xls");Di2015NewLine            Excel.Workbook wb2 = exApp.Workbooks.Open(@"C:\\wb2.xls");Di2015NewLine            Excel.Worksheet worksheet1 = wb1.Worksheets[1];Di2015NewLine            Excel.Worksheet worksheet2 = wb2.Worksheets[1];Di2015NewLine            worksheet1.Copy(worksheet2);Di2015NewLine            wb2.SaveAs(@"C:\\wb3.xls");Di2015NewLineDi2015NewLine            wb1.Close(false);Di2015NewLine            wb2.Close(false);Di2015NewLine            exApp.Quit();Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19830725Di2015UniqueSeparatorCopyToDataTable
19830725Di2015UniqueSeparatorDataTable dt1 = new DataTable();Di2015NewLineDataRow[] dr = dt.Select("Your string");Di2015NewLineDataTable dt2 = dr.CopyToDataTable();Di2015NewLine
19830769Di2015UniqueSeparator<Style TargetType="ListBox" x:Key="MyListBox">Di2015NewLine  <Setter Property="Template">Di2015NewLine    <Setter.Value>Di2015NewLine      <ControlTemplate>Di2015NewLine        <Grid Background="{TemplateBinding Background}">Di2015NewLine          <ScrollViewer CanContentScroll="True">Di2015NewLine            <ItemsPresenter SnapsToDevicePixels="True" />Di2015NewLine          </ScrollViewer>Di2015NewLine        </Grid>Di2015NewLine      </ControlTemplate>Di2015NewLine    </Setter.Value>      Di2015NewLine  </Setter> Di2015NewLine
19830769Di2015UniqueSeparator<ListBox Style="{StaticResource MyListBox}" /> Di2015NewLine
19830777Di2015UniqueSeparatorstring output=String.Join(",",newItems.Select(x=>"\\""+x+"\\""));Di2015NewLine
19830777Di2015UniqueSeparatorStringBuilder sb=new StringBuilder();Di2015NewLinenewItems.ToList()Di2015NewLine        .ForEach(x=>sb.Append(","+String.Format("\\"{0}\\"",x)));Di2015NewLinestring output=sb.ToString().Trim(',');Di2015NewLine
19830807Di2015UniqueSeparatorXXXX.XX
19830807Di2015UniqueSeparator\\d{1,4}\\.?\\d{0,2} | \\d{5}\\.?\\d |\\d{6}
19830898Di2015UniqueSeparatorshiporder
19830898Di2015UniqueSeparator<?xml version="1.0" encoding="ISO-8859-1" ?>Di2015NewLine<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">Di2015NewLineDi2015NewLine<xs:element name="shiporder">Di2015NewLine  <xs:complexType>Di2015NewLine    <xs:sequence>Di2015NewLine      <xs:element name="orderperson" type="xs:string"/>Di2015NewLine      <xs:element name="shipto">Di2015NewLine        <xs:complexType>Di2015NewLine          <xs:sequence>Di2015NewLine            <xs:element name="name" type="xs:string"/>Di2015NewLine            <xs:element name="address" type="xs:string"/>Di2015NewLine            <xs:element name="city" type="xs:string"/>Di2015NewLine            <xs:element name="country" type="xs:string"/>Di2015NewLine          </xs:sequence>Di2015NewLine        </xs:complexType>Di2015NewLine      </xs:element>Di2015NewLine      <xs:element name="item" maxOccurs="unbounded">Di2015NewLine        <xs:complexType>Di2015NewLine          <xs:sequence>Di2015NewLine            <xs:element name="title" type="xs:string"/>Di2015NewLine            <xs:element name="note" type="xs:string" minOccurs="0"/>Di2015NewLine            <xs:element name="quantity" type="xs:positiveInteger"/>Di2015NewLine            <xs:element name="price" type="xs:decimal"/>Di2015NewLine          </xs:sequence>Di2015NewLine        </xs:complexType>Di2015NewLine      </xs:element>Di2015NewLine    </xs:sequence>Di2015NewLine   <xs:attribute name="orderid" type="xs:string" use="required"/>Di2015NewLine </xs:complexType>Di2015NewLine</xs:element>Di2015NewLineDi2015NewLine</xs:schema>Di2015NewLine
19830898Di2015UniqueSeparator<?xml version="1.0" encoding="ISO-8859-1"?>Di2015NewLineDi2015NewLine<shiporder orderid="889923">Di2015NewLine  <orderperson>John Smith</orderperson>Di2015NewLine    <shipto>Di2015NewLine      <name>Ola Nordmann</name>Di2015NewLine      <address>Langgt 23</address>Di2015NewLine      <city>4000 Stavanger</city>Di2015NewLine      <country>Norway</country>Di2015NewLine   </shipto>Di2015NewLine   <item>Di2015NewLine     <title>Empire Burlesque</title>Di2015NewLine     <note>Special Edition</note>Di2015NewLine     <quantity>1</quantity>Di2015NewLine     <price>10.90</price>Di2015NewLine   </item>Di2015NewLine   <item>Di2015NewLine    <title>Hide your heart</title>Di2015NewLine    <quantity>1</quantity> <!--Change to "one" to see validation error-->Di2015NewLine    <price>9.90</price>Di2015NewLine  </item>Di2015NewLine</shiporder>Di2015NewLine
19830898Di2015UniqueSeparatorXDocument document = XDocument.Load("shiporder.xml");Di2015NewLineXmlSchemaSet schemas = new XmlSchemaSet();Di2015NewLineschemas.Add("", XmlReader.Create("schema.xsd"));Di2015NewLinebool errors = false;Di2015NewLineDi2015NewLinedocument.Validate(schemas, (o, e) =>Di2015NewLine    {Di2015NewLine        Console.WriteLine("Validation error: {0}", e.Message);Di2015NewLine        errors = true;Di2015NewLine    });Di2015NewLineDi2015NewLine    if (!errors)Di2015NewLine    {Di2015NewLine        Console.WriteLine("XML document successfully validated.");Di2015NewLine    }Di2015NewLine    else Di2015NewLine    {Di2015NewLine        Console.WriteLine("XML document does not validate.");Di2015NewLine    }Di2015NewLine
19830898Di2015UniqueSeparator<quantity>
19831039Di2015UniqueSeparatorlabel4
19831039Di2015UniqueSeparatorlabel4.Text = scaned.ToString();Di2015NewLine
19831050Di2015UniqueSeparatorHeader
19831050Di2015UniqueSeparator<Grid>Di2015NewLine    <TreeView Height="200" HorizontalAlignment="Left" Margin="92,24,0,0" Name="treeView1" VerticalAlignment="Top" Width="120">Di2015NewLine        <TreeViewItem Name="Ratata" Header="rere">Di2015NewLine        </TreeViewItem>Di2015NewLine    </TreeView>Di2015NewLine</Grid>Di2015NewLine
19831160Di2015UniqueSeparatorMyObject
19831160Di2015UniqueSeparatorMyObject
19831160Di2015UniqueSeparatorMyOtherObject
19831160Di2015UniqueSeparatorDoSomething<MyOtherObject>()
19831160Di2015UniqueSeparatorTask<MyObject>
19831160Di2015UniqueSeparatorTask<MyOtherObject>
19831160Di2015UniqueSeparatorTask<MyObject>
19831160Di2015UniqueSeparatorTask<MyOtherObject>
19831160Di2015UniqueSeparatorprotected abstract Task<MyObject> DoSomething();Di2015NewLine
19831187Di2015UniqueSeparatorpublic static IObservable<TR> TimeoutDetector<T1, T2, TR>(Di2015NewLine    this IObservable<T1> source,Di2015NewLine    IObservable<T2> clock,Di2015NewLine    int countForTimeout,Di2015NewLine    Func<TR> timedOutSelector,Di2015NewLine    Func<T1, TR> okSelector)Di2015NewLine{Di2015NewLine    return sourceDi2015NewLine        .Select(i => clock.Take(countForTimeout).LastAsync())Di2015NewLine        .Switch().Select(_ => timedOutSelector())Di2015NewLine        .Merge(source.Select(okSelector));Di2015NewLine}Di2015NewLine
19831187Di2015UniqueSeparatorcountForTimeout
19831187Di2015UniqueSeparatorSwitch
19831187Di2015UniqueSeparatorSelect
19831187Di2015UniqueSeparator    [Test]Di2015NewLine    public void AKindOfTimeoutTest()Di2015NewLine    {Di2015NewLine        var scheduler = new TestScheduler();Di2015NewLineDi2015NewLine        var clockStream = scheduler.CreateHotObservable(Di2015NewLine            OnNext(100, Unit.Default),Di2015NewLine            OnNext(200, Unit.Default),Di2015NewLine            OnNext(300, Unit.Default),Di2015NewLine            OnNext(400, Unit.Default),Di2015NewLine            OnNext(500, Unit.Default),Di2015NewLine            OnNext(600, Unit.Default),Di2015NewLine            OnNext(750, Unit.Default), /* make clock funky! */Di2015NewLine            OnNext(800, Unit.Default),Di2015NewLine            OnNext(900, Unit.Default));Di2015NewLineDi2015NewLineDi2015NewLine        var sourceStream = scheduler.CreateColdObservable(Di2015NewLine            OnNext(50, 1),Di2015NewLine            OnNext(150, 2),Di2015NewLine            OnNext(250, 3),Di2015NewLine            OnNext(275, 4),Di2015NewLine            OnNext(400, 5),Di2015NewLine            OnNext(900, 6));Di2015NewLineDi2015NewLineDi2015NewLine        Func<int> timedOutSelector = () => 0;Di2015NewLine        Func<int, int> okSelector = i => i;Di2015NewLineDi2015NewLine        var results = scheduler.CreateObserver<int>();Di2015NewLineDi2015NewLine        sourceStream.TimeoutDetector(clockStream, 3, timedOutSelector, okSelector)Di2015NewLine                    .Subscribe(results);Di2015NewLineDi2015NewLine        scheduler.Start();Di2015NewLineDi2015NewLine        results.Messages.AssertEqual(Di2015NewLine            OnNext(50, 1),Di2015NewLine            OnNext(150, 2),Di2015NewLine            OnNext(250, 3),Di2015NewLine            OnNext(275, 4),Di2015NewLine            OnNext(400, 5),Di2015NewLine            OnNext(750, 0),Di2015NewLine            OnNext(900, 6));Di2015NewLine    }Di2015NewLine}Di2015NewLine
19831343Di2015UniqueSeparatorXDocument xdoc = XDocument.Load(path_to_xml);Di2015NewLine            xdoc.Element("metadata").Add(Di2015NewLine                new XElement("Employee",Di2015NewLine                    new XAttribute("ID", Convert.ToString(Employee.Id)),Di2015NewLine                    new XAttribute("firstName", Convert.ToString(Employee.FirstName)),Di2015NewLine                    new XAttribute("lastName", Convert.ToString(Employee.LastName)),Di2015NewLine                    new XAttribute("Salary", Convert.ToString(Employee.Salary))Di2015NewLine                    ));Di2015NewLine            xdoc.Save(path_to_xml);Di2015NewLine
19831579Di2015UniqueSeparatorbb
19831579Di2015UniqueSeparatorAdd
19831579Di2015UniqueSeparatorfiles.Add(bb)
19831653Di2015UniqueSeparatorpublic class Foo<T>Di2015NewLine{Di2015NewLine    private T item;Di2015NewLineDi2015NewLine    public Foo()Di2015NewLine    {Di2015NewLine        var type = typeof(T);Di2015NewLineDi2015NewLine        if (Nullable.GetUnderlyingType(type) != null)Di2015NewLine            return;Di2015NewLineDi2015NewLine        if (type.IsClass)Di2015NewLine            return;Di2015NewLineDi2015NewLine        throw new InvalidOperationException("Type is not nullable or reference type.");Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsNull()Di2015NewLine    {Di2015NewLine        return item == null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19831653Di2015UniqueSeparatorfoo3
19831653Di2015UniqueSeparatorvar foo1 = new Foo<int?>();Di2015NewLineConsole.WriteLine(foo1.IsNull());Di2015NewLineDi2015NewLinevar foo2 = new Foo<string>();Di2015NewLineConsole.WriteLine(foo2.IsNull());Di2015NewLineDi2015NewLinevar foo3= new Foo<int>();  // THROWSDi2015NewLineConsole.WriteLine(foo3.IsNull());Di2015NewLine
19831659Di2015UniqueSeparatorobj
19831659Di2015UniqueSeparatorDispose
19831706Di2015UniqueSeparator.Close()
19831706Di2015UniqueSeparator.Close()
19831706Di2015UniqueSeparatorusing
19831772Di2015UniqueSeparatorTRANSACTTIME >= '{0}-{1}-01 00:00:00'
19831772Di2015UniqueSeparator var startDate=new DateTime(year,month,1);Di2015NewLine var endDate=new DateTime(yearEnd,monthEnd,1);Di2015NewLineDi2015NewLine string sql =Di2015NewLine        @"select SUM(ORDERQTY * MULTIPLIER) AS VOL_USDDi2015NewLine            from Executions with (nolock)Di2015NewLine            where TRANSACTTIME >= {0}Di2015NewLine                and TRANSACTTIME < {1}Di2015NewLine                and MTCONTEXT in (5,6)Di2015NewLine                and ORDERQTY > 0Di2015NewLine                AND SOURCE = 'INTMT'Di2015NewLine                and LEFT(SYMBOL, 3) = 'USD'";Di2015NewLineDi2015NewLinedecimal usd___Sum = context.ExecuteQuery<decimal>(sql, startDate,endDate).First();Di2015NewLine
19831772Di2015UniqueSeparator string sql =Di2015NewLine        @"select SUM(ORDERQTY * MULTIPLIER) AS VOL_USDDi2015NewLine            from Executions with (nolock)Di2015NewLine            where TRANSACTTIME >= DATETIMEFROMPARTS({0},{1},1,0,0,0,0)Di2015NewLine            ..."Di2015NewLine
19831820Di2015UniqueSeparatorDecoratorPredicateContext
19831820Di2015UniqueSeparatorRegisterDecorator
19831820Di2015UniqueSeparatorvar typeMapping = new Dictionary<Type, Type>();Di2015NewLineDi2015NewLinecontainer.RegisterDecorator(typeof(IInstructionHandler<>), typeof(FakeDecorator<>), c =>Di2015NewLine{Di2015NewLine    typeMapping[c.ServiceType]  = c.ImplementationType;Di2015NewLine    // or perhaps even use c.AppliedDecorators property to see which decorators are applied.Di2015NewLineDi2015NewLine    // return false to prevent the decorator from being applied.Di2015NewLine    return false;Di2015NewLine});Di2015NewLine
19831820Di2015UniqueSeparatorIInstructionHandler<T>
19831820Di2015UniqueSeparatorfalse
19831820Di2015UniqueSeparatorDecoratorPredicateContext
19831820Di2015UniqueSeparatorIDecorator
19831820Di2015UniqueSeparatorIDecorator
19831820Di2015UniqueSeparatorpublic interface IDecoratorDi2015NewLine{Di2015NewLine    object Decoratee { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class DecoratorHelpersDi2015NewLine{Di2015NewLine    public static IEnumerable<object> GetDecoratorChain(IDecorator decorator)Di2015NewLine    {Di2015NewLine        while (decorator != null)Di2015NewLine        {Di2015NewLine            yield return decorator;Di2015NewLineDi2015NewLine            decorator = decorator.Decoratee as IDecorator;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19831820Di2015UniqueSeparatorpublic class SomeDecorator<T> : IInstructionHandler<T>, IDecoratorDi2015NewLine{Di2015NewLine    private readonly IInstructionHandler<T> decoratee;Di2015NewLineDi2015NewLine    public SomeDecorator(IInstructionHandler<T> decoratee)Di2015NewLine    {Di2015NewLine        this.decoratee = decoratee;Di2015NewLine    }Di2015NewLineDi2015NewLine    object IDecorator.Decoratee { get { return this.decoratee; } }Di2015NewLine}Di2015NewLine
19831820Di2015UniqueSeparator var implementationTypes =Di2015NewLine     from handler in container.GetAllInstances<IInstructionHandler<RenderWord>>()Di2015NewLine     let mostInnerDecorator =Di2015NewLine         DecoratorHelpers.GetDecoratorChain(handler as IDecorator).LastOrDefault()Di2015NewLine     let implementation = mostInnerDecorator != null ? mostInnerDecorator.Decoratee : handlerDi2015NewLine     select implementation.GetType()Di2015NewLine
19831820Di2015UniqueSeparatorRegistration
19831820Di2015UniqueSeparatorRegisterAll
19831820Di2015UniqueSeparatorRegistration
19831820Di2015UniqueSeparatortypeMapping[serviceType] = implementationTypes;Di2015NewLinecontainer.RegisterAll(serviceType, implementationTypes);Di2015NewLine
19831916Di2015UniqueSeparatorCollection<PSObject> PSCol = Powershell.Invoke(); Di2015NewLinestring SerializedCollection = PSSerializer.Serialize(PSCol);Di2015NewLine
19831916Di2015UniqueSeparatorPSObject obj = PSSerializer.Deserialize(DeserializedString) as PSObject;Di2015NewLineDi2015NewLineCollection<PSObject> DeserializedCollection = new Collection<PSObject>(((ArrayList)obj.ImmediateBaseObject).Cast<PSObject>().ToArray());Di2015NewLine
19831961Di2015UniqueSeparatorforeach (DataRow sourcerow in dt1.Rows)Di2015NewLine{Di2015NewLine    DataRow destRow = dt2.NewRow();Di2015NewLine    destRow["ID"] = sourcerow["PRODUCT_ID"];Di2015NewLine    destRow["MIN"] = sourcerow["MIN_VALUE"];Di2015NewLine    destRow["MAX"] = sourcerow["MAX_VALUE"];Di2015NewLine    destRow["POINT_TO_ADD"] = sourcerow["AMOUNT"];Di2015NewLine    dt2.Rows.Add(destRow);Di2015NewLine}Di2015NewLine
19832031Di2015UniqueSeparator_boolArray
19832031Di2015UniqueSeparatorreturn false
19832031Di2015UniqueSeparatorpublic bool Gewonnen() Di2015NewLine{Di2015NewLine    for (int y = 0; y < _boolArray.GetLength(0); y++)Di2015NewLine    {Di2015NewLine         for (int x = 0; x < _boolArray.GetLength(1); x++)Di2015NewLine         {Di2015NewLine              if (_boolArray[x, y] == false)Di2015NewLine                  return false;Di2015NewLine              elseDi2015NewLine                  return true;Di2015NewLine         }Di2015NewLine    }Di2015NewLineDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
19832058Di2015UniqueSeparatorPreviewKeyDown
19832058Di2015UniqueSeparatorKeyboard.Modifiers
19832058Di2015UniqueSeparatorModifierKeys.Control
19832058Di2015UniqueSeparatorprivate void PreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Key == Key.C && (Keyboard.Modifiers & ModifierKeys.Control) == Di2015NewLine        ModifierKeys.Control)Di2015NewLine    {Di2015NewLine       MessageBox.Show("CTRL + C was pressed");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19832160Di2015UniqueSeparator@comment
19832160Di2015UniqueSeparator_Comment
19832160Di2015UniqueSeparator"0"
19832160Di2015UniqueSeparator@comment
19832160Di2015UniqueSeparatorif (_Comment != "0")Di2015NewLine    { cmd1.Parameters.AddWithValue("@comment", _Comment); }Di2015NewLineelseDi2015NewLine    { cmd1.Parameters.AddWithValue("@comment", null); }Di2015NewLine
19832469Di2015UniqueSeparatorthis.GetType().GetField("Person",   Di2015NewLine     System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static).GetValue(this)Di2015NewLine
19832571Di2015UniqueSeparatorstring _clientID = HttpUtility.UrlEncode("XXXXXXXXXXX.apps.googleusercontent.com");Di2015NewLinestring _clientSecret = HttpUtility.UrlEncode("XXXXXXXXXX");Di2015NewLinestring _redirectUri = "urn:ietf:wg:oauth:2.0:oob";Di2015NewLinestring _code = HttpUtility.UrlEncode(token);Di2015NewLineDi2015NewLinestring url = "code=" + _code + "&client_id=" + _clientID + "&client_secret=" + _clientSecret + "&redirect_uri=" + _redirectUri + "&grant_type=authorization_code";Di2015NewLineDi2015NewLineTcpClient client = new TcpClient("accounts.google.com", 443);Di2015NewLineStream netStream = client.GetStream();Di2015NewLineSslStream sslStream = new SslStream(netStream);Di2015NewLinesslStream.AuthenticateAsClient("accounts.google.com");Di2015NewLine{Di2015NewLine    byte[] contentAsBytes = Encoding.ASCII.GetBytes(url.ToString());Di2015NewLine    StringBuilder msg = new StringBuilder();Di2015NewLine    msg.AppendLine("POST /o/oauth2/token HTTP/1.1");Di2015NewLine    msg.AppendLine("Host: accounts.google.com");Di2015NewLine    msg.AppendLine("Content-Type: application/x-www-form-urlencoded");Di2015NewLine    msg.AppendLine("Content-Length: " + contentAsBytes.Length.ToString());Di2015NewLine    msg.AppendLine("");Di2015NewLine    Debug.WriteLine("Request");Di2015NewLine    Debug.WriteLine(msg.ToString());Di2015NewLine    Debug.WriteLine(url.ToString());Di2015NewLine    byte[] headerAsBytes = Encoding.ASCII.GetBytes(msg.ToString());Di2015NewLine    sslStream.Write(headerAsBytes);Di2015NewLine    sslStream.Write(contentAsBytes);Di2015NewLine}Di2015NewLineDebug.WriteLine("Response");Di2015NewLineStreamReader reader = new StreamReader(sslStream);Di2015NewLinewhile(true) {  // Print the response line by line to the debug stream for inspection.Di2015NewLine    string line = reader.ReadLine();Di2015NewLine    if(line == null)Di2015NewLine        break;Di2015NewLine    Debug.WriteLine(line);Di2015NewLine}Di2015NewLine
19832571Di2015UniqueSeparatorhttps://accounts.google.com/o/oauth2/token?
19832585Di2015UniqueSeparatorstring firstString = @"Use \\n for line break. ";Di2015NewLinestring secondString = @"Use \\b for backspace";Di2015NewLinereturns firstString + secondString; Di2015NewLine
19832585Di2015UniqueSeparatorUse \\n for line break. Use \\b for backspaceDi2015NewLine
19832585Di2015UniqueSeparatorstring firstString = "Use \\n for line break. ";Di2015NewLinestring secondString = "Use \\b for backspace";Di2015NewLinereturns firstString + secondString; Di2015NewLine
19832585Di2015UniqueSeparatorUseDi2015NewLine for line break. Use for backspaceDi2015NewLine
19832585Di2015UniqueSeparator\\n
19832585Di2015UniqueSeparator\\b
19832585Di2015UniqueSeparatorEscape Sequences
19832685Di2015UniqueSeparatorStretchDirection="DownOnly"Di2015NewLine
19832685Di2015UniqueSeparatorbool showLarge = false;Di2015NewLinevar w = new Window();Di2015NewLineDi2015NewLinew.ResizeMode = ResizeMode.NoResize;Di2015NewLinew.UseLayoutRounding = true;Di2015NewLinew.SizeToContent = SizeToContent.WidthAndHeight;Di2015NewLinew.MaxHeight = 750;Di2015NewLinew.MaxWidth = 750;Di2015NewLineDi2015NewLineImage img = new Image();Di2015NewLineimg.HorizontalAlignment = HorizontalAlignment.Center;Di2015NewLineimg.VerticalAlignment = VerticalAlignment.Center;Di2015NewLineimg.StretchDirection = StretchDirection.DownOnly;Di2015NewLineif(showLarge)Di2015NewLine    img.Source = new BitmapImage(new System.Uri(@"http://i.imgur.com/iaBp2Fv.jpg"));Di2015NewLineelseDi2015NewLine    img.Source = new BitmapImage(new System.Uri(@"http://i.imgur.com/fiRrTJS.jpg"));Di2015NewLineDi2015NewLinew.Content = img;Di2015NewLinew.ShowDialog();Di2015NewLine
19832706Di2015UniqueSeparatorDim sm As ScriptManager = CType(Page.Master.FindControl("ScriptManager1"), ScriptManager)Di2015NewLine        sm.RegisterPostBackControl(Button)Di2015NewLine
19832937Di2015UniqueSeparatorstring deleteStuff = @"Di2015NewLine  DELETE FROM [ProductsImages] WHERE ProductId = @ProductId;Di2015NewLine  DELETE FROM [Products] WHERE ProductId = @ProductId;"Di2015NewLinedb.ExecuteNonQuery(deleteStuff);Di2015NewLine
19833032Di2015UniqueSeparatorstatic DateTime GetDTCTime(ulong nanoseconds, ulong ticksPerNanosecond)Di2015NewLine{Di2015NewLine    DateTime pointOfReference = new DateTime(2000, 1, 1, 0, 0, 0, DateTimeKind.Utc);Di2015NewLine    long ticks = (long)(nanoseconds / ticksPerNanosecond);Di2015NewLine    return pointOfReference.AddTicks(ticks);Di2015NewLine}Di2015NewLineDi2015NewLinestatic DateTime GetDTCTime(ulong nanoseconds)Di2015NewLine{Di2015NewLine    return GetDTCTime(nanoseconds, 100);Di2015NewLine}Di2015NewLine
19833032Di2015UniqueSeparator01 March 2003 14:34:50
19833032Di2015UniqueSeparatorulong timeN = 99844490909448899;//time in nanosecondsDi2015NewLinevar theDate = GetDTCTime(timeN);Di2015NewLine
19833285Di2015UniqueSeparatorClass ProductionManagerDi2015NewLine{Di2015NewLine  List<ProductionItem> _ProductionItemsDi2015NewLineDi2015NewLine  AddProductionItem(ProductionItem)Di2015NewLine  {Di2015NewLine    // Add the production items to _ProductionItems ListDi2015NewLineDi2015NewLine    // Now Di2015NewLine    // 1) enumerate the current collection of _ProductionItemsDi2015NewLine    // 2) keep running totalsDi2015NewLine    // 3) now re-enumerate the current collection of _ProductionItemsDi2015NewLine    //    updating each item with its respective percentage of the totals Di2015NewLine    //    you calculated in step 2.Di2015NewLine    // and populate each ProductionItem with the respective percentagesDi2015NewLine  }Di2015NewLine}Di2015NewLine
19833301Di2015UniqueSeparatorclass AccelerometerReader: INotifyPropertyChanged, IDisposable {Di2015NewLine    #region ConstructorDi2015NewLineDi2015NewLine    public AccelerometerReader() {Di2015NewLine        new Task(ReadAccelerometer).Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine    #region INotifyPropertyChangedDi2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    void FirePropertyChanged(string propertyName) {Di2015NewLine        var propertyChanged = PropertyChanged;Di2015NewLine        if (propertyChanged != null) {Di2015NewLine            propertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine    #region PropertiesDi2015NewLineDi2015NewLine    int _value;Di2015NewLine    public int Value {Di2015NewLine        get { return _value; }Di2015NewLine        set { Di2015NewLine            if (value != _value) {Di2015NewLine                _value = value;Di2015NewLine                FirePropertyChanged("Value");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine    #region Accelerometer readingDi2015NewLineDi2015NewLine    bool _stopLoop = false;Di2015NewLineDi2015NewLine    void StartReadLoop() {Di2015NewLine        while (!_stopLoop) {Di2015NewLine            Value = ReadAccelerometer();Di2015NewLine            // TODO: Delay a littleDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    int ReadAccelerometer() {Di2015NewLine        // TODO: Read from accelerometer...Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine    #region IDisposableDi2015NewLineDi2015NewLine    public void Dispose() {Di2015NewLine        _stopLoop = true;Di2015NewLineDi2015NewLine        // TODO: Add a proper IDisposable implementationDi2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
19833327Di2015UniqueSeparatorpublic class WebSyncDi2015NewLine{Di2015NewLine    private System.Timers.Timer _tmrManifestHandler = new System.Timers.Timer();Di2015NewLine    public WebSync(object id)Di2015NewLine    {Di2015NewLine        _tmrManifestHandler.Elapsed += new System.Timers.ElapsedEventHandler(_tmrManifestHandler_Tick);Di2015NewLine        _tmrManifestHandler.Interval = 100;Di2015NewLine        _tmrManifestHandler.Enabled = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public delegate void delBeginSync();Di2015NewLine    public event delBeginSync evBeginSync;Di2015NewLineDi2015NewLine    public void PreConnect()Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            if (true /* just for testing*/)Di2015NewLine            {Di2015NewLine                evBeginSync();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Connect()Di2015NewLine    {Di2015NewLine        _tmrManifestHandler.Enabled = true;Di2015NewLine        _tmrManifestHandler.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void _tmrManifestHandler_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //NOT BEING 'HIT'Di2015NewLine    }Di2015NewLine}Di2015NewLine
19833560Di2015UniqueSeparatorvar uniqueResult = db.FPTStaticDataRatedFinancialAssetBase.OfType<FPTStaticDataRatedFinancialAssetBase>()Di2015NewLine        .Where(c => c.FORATExcelId == fptexcel || c.FORATExcelId == fptexcelprevious)Di2015NewLine        .GroupBy(x => x.Name)Di2015NewLine        .Where(c => c.Count() == 1)Di2015NewLine        .Select(y => y.FirstOrDefault()).ToList();Di2015NewLine
19833637Di2015UniqueSeparatorselect Di2015NewLine   sum( SoldQty * case ( ( [numrow]-1) /3) Di2015NewLine                  when 0 then 0.2 Di2015NewLine                  when 1 then 0.3 Di2015NewLine                  when 2 then 0.5 Di2015NewLine                  end ) as resultDi2015NewLine   from [yourCalendarTable]Di2015NewLine
19833637Di2015UniqueSeparator( [numrow]-1) /3
19833723Di2015UniqueSeparatorBeginWrite
19833723Di2015UniqueSeparatorIsolatedStorageFileStream
19833723Di2015UniqueSeparatorDispatcher
19833914Di2015UniqueSeparatorILog logger
19833914Di2015UniqueSeparator((log4net.Repository.Hierarchy.Logger)logger.Logger).AddAppender(appender)
19833985Di2015UniqueSeparatorpublic class A Di2015NewLine{Di2015NewLine    public int Prop1;Di2015NewLine    public int Prop2;Di2015NewLine    public int Prop3;Di2015NewLine    public int Prop4;Di2015NewLine    public int Prop5;Di2015NewLineDi2015NewLine    public A()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public A(A a)Di2015NewLine    {Di2015NewLine        this.Prop1 = a.Prop1;Di2015NewLine        this.Prop2 = a.Prop2;Di2015NewLine        this.Prop3 = a.Prop3;Di2015NewLine        this.Prop4 = a.Prop4;Di2015NewLine        this.Prop5 = a.Prop5;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class B:ADi2015NewLine{Di2015NewLine    public int PropB1;Di2015NewLine    public int PropB2;Di2015NewLineDi2015NewLine    public B(A a) : base(a)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class C:ADi2015NewLine{Di2015NewLine    public int PropC1;Di2015NewLineDi2015NewLine    public C(A a) : base(a)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
19833985Di2015UniqueSeparatorvar a = new ADi2015NewLine{Di2015NewLine Prop1 = param1,Di2015NewLine Prop2 = param2,Di2015NewLine Prop3 = param3,Di2015NewLine Prop4 = param4,Di2015NewLine Prop5 = param5Di2015NewLine};Di2015NewLineDi2015NewLinevar b = new B(a)Di2015NewLine{     Di2015NewLine PropB1 = param6,Di2015NewLine PropB2 = param7Di2015NewLine}Di2015NewLineDi2015NewLinevar c = new C(a)Di2015NewLine{Di2015NewLine PropC1 = param8Di2015NewLine}Di2015NewLine
19834044Di2015UniqueSeparator~\\App_Browsers\\BrowserFile.browser
19834044Di2015UniqueSeparator<browsers>Di2015NewLine    <browser refID="Default">Di2015NewLine        <capabilities><!-- To avoid wrong detections of e.g. IE10 -->Di2015NewLine            <capability name="cookies" value="true" />Di2015NewLine            <capability name="ecmascriptversion" value="3.0" />Di2015NewLine        </capabilities>Di2015NewLine    </browser>Di2015NewLine</browsers>Di2015NewLine
19834076Di2015UniqueSeparator@foreach (string n in ViewBag.NyhedsbrevListe)Di2015NewLine{ Di2015NewLine    @:tbody = '<tr><td>' + n + '</td></tr>';Di2015NewLine}Di2015NewLine
19834251Di2015UniqueSeparators = s.Replace(System.Environment.NewLine, "\\\\r\\\\n");Di2015NewLine
19834251Di2015UniqueSeparators = s.Replace(System.Environment.NewLine, @"\\r\\n");Di2015NewLine
19834251Di2015UniqueSeparatorstring str = "abcdef\\nghik\\r\\nb";Di2015NewLinestr = Regex.Replace(Regex.Replace(str,"\\r", @"\\r"),"\\n", @"\\n");Di2015NewLine
19834259Di2015UniqueSeparatorClientScriptManager CSM = Page.ClientScript;Di2015NewLine    string strScript = "<script>";Di2015NewLine    strScript += "alert('There is no Bookmarked Question Available');";Di2015NewLine    strScript += "  document.getElementById('btnReview').onclick();";Di2015NewLineDi2015NewLine    strScript += "</script>";Di2015NewLine    ScriptManager.RegisterStartupScript(this, this.GetType(), "Startup", strScript, false);Di2015NewLine
19834259Di2015UniqueSeparatorClientScriptManager CSM = Page.ClientScript;Di2015NewLine    string strScript = "<script>";Di2015NewLine    strScript += "alert('There is no Bookmarked Question Available');";Di2015NewLine    strScript += "  Display();";Di2015NewLineDi2015NewLine    strScript += "</script>";Di2015NewLine    ScriptManager.RegisterStartupScript(this, this.GetType(), "Startup", strScript, false);Di2015NewLine
19834270Di2015UniqueSeparator@{Di2015NewLine    ViewBag.Title = "Pages";Di2015NewLine}Di2015NewLineDi2015NewLine<h2>Pages</h2>Di2015NewLineDi2015NewLine@Html.Raw(ViewBag.TabStructure)Di2015NewLine
19834309Di2015UniqueSeparatorvar oldanchor = tableLayoutPanel1.Anchor;  // memorize the old anchorDi2015NewLinetableLayoutPanel1.Anchor = AnchorStyles.Left | AnchorStyles.Top;  // reset anchorDi2015NewLinethis.Height = 200;  // change the form's heightDi2015NewLinetableLayoutPanel1.Anchor = oldanchor;  // bring back the old anchorDi2015NewLine
19834357Di2015UniqueSeparatorvar code = "['a', 'b', 'c', 'd']";Di2015NewLine
19834357Di2015UniqueSeparatordynamic result = source.Execute();Di2015NewLine
19834357Di2015UniqueSeparatordynamic function = script.UpdateElements(result);Di2015NewLine
19834357Di2015UniqueSeparatorvar data = new[] { "a", "b", "c", "d" };Di2015NewLinevar engine = Python.CreateEngine();Di2015NewLinedynamic script = engine.ExecuteFile(@"script.py");Di2015NewLinedynamic function = script.UpdateElements(data);Di2015NewLine
19834433Di2015UniqueSeparatorOrderBy
19834433Di2015UniqueSeparatorEnumerable.OrderBy
19834572Di2015UniqueSeparatorjson
19834572Di2015UniqueSeparatorfunction someThingClicked(){Di2015NewLine  var myObject = <%= json_file %>;Di2015NewLineDi2015NewLine  $.ajax({Di2015NewLine    type: "POST",Di2015NewLine    url: "SomeUrl",Di2015NewLine    data: myObject,Di2015NewLine    success: function () { },Di2015NewLine    contentType: "application/json; charset=utf-8",Di2015NewLine    dataType: "json"});Di2015NewLine}Di2015NewLine
19834572Di2015UniqueSeparatorvar myObject = {Di2015NewLine  someField : 'someValue'Di2015NewLine};Di2015NewLine...Di2015NewLine
19834572Di2015UniqueSeparator  var myObject = @Html.Raw(ViewBag.json_file);Di2015NewLine
19834572Di2015UniqueSeparatorjson_file
19834572Di2015UniqueSeparatorViewBag
19834988Di2015UniqueSeparatorpublic override object InitializeLifetimeService()Di2015NewLine    {Di2015NewLine        return null; //remote object lease time foreverDi2015NewLine    }Di2015NewLine
19835019Di2015UniqueSeparatorAdd-Migration InitialCreateDi2015NewLineUpdate-Database -ScriptDi2015NewLine
19835019Di2015UniqueSeparatorcontext.Database.SqlQuery
19835019Di2015UniqueSeparatorcontext.Database.ExecuteSqlCommand
19835061Di2015UniqueSeparatorpublic interface IVatControllableDi2015NewLine{Di2015NewLine    decimal Vat { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IVatGettableDi2015NewLine{Di2015NewLine    decimal Vat { get; }Di2015NewLine}Di2015NewLine
19835061Di2015UniqueSeparatorpublic class Donor : IVatGettableDi2015NewLine{Di2015NewLine    public decimal Vat { get { ... } }Di2015NewLine}Di2015NewLine
19835222Di2015UniqueSeparatorFile
19835222Di2015UniqueSeparator    <input type="file" name="File" id="fileInputType" style="visibility:hidden"/> Di2015NewLine
19835222Di2015UniqueSeparatorHttpPostedFileBase file
19835222Di2015UniqueSeparatorentype
19835222Di2015UniqueSeparatormultipart/form-data
19835222Di2015UniqueSeparator@using (Html.BeginForm("Action", "Controller", FormMethod.Post, new {enctype="multipart/form-data" })Di2015NewLine
19835259Di2015UniqueSeparatorDataTable
19835259Di2015UniqueSeparatorDataTable.Clone
19835259Di2015UniqueSeparatorEnumerable.GroupBy
19835259Di2015UniqueSeparatorDataRow
19835259Di2015UniqueSeparatorvar ownerGroups = dt.AsEnumerable()Di2015NewLine    .GroupBy(row => row.Field<string>("Lead Owners"));Di2015NewLinevar dt2 = dt.Clone();Di2015NewLinevar intColumns = dt2.Columns.Cast<DataColumn>()Di2015NewLine    .Where(c => c.DataType == typeof(int)).ToArray();Di2015NewLineforeach (var grp in ownerGroups)Di2015NewLine{Di2015NewLine    var row = dt2.Rows.Add();Di2015NewLine    row.SetField("Lead Owners", grp.Key);Di2015NewLine    foreach (DataColumn col in intColumns)Di2015NewLine    {Di2015NewLine        bool anyNonNull = grp.Any(r => r.Field<int?>(col.Ordinal).HasValue);Di2015NewLine        int? sum = anyNonNull ? grp.Sum(r => r.Field<int?>(col.Ordinal)) : null;Di2015NewLine        row.SetField(col, sum);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19835259Di2015UniqueSeparatorint
19835259Di2015UniqueSeparatorDan Mahoney                 null        null       1Di2015NewLineRichard James Whitaker      null        7          null Di2015NewLineWayne Dunne                 3           null       null Di2015NewLine
19835358Di2015UniqueSeparator'
19835358Di2015UniqueSeparator"
19835358Di2015UniqueSeparator<li>
19835358Di2015UniqueSeparatoroutput.AppendFormat("<li class=\\"depth-{0}\\"><a href='#' OnClientClick='openNewWin('{1}')><span>{2}</span></a>",currentDepth,row["Href"], row["Name"]);Di2015NewLine
19835358Di2015UniqueSeparator//split to focus on the stringDi2015NewLinevar frmt = "<li class=\\"depth-{0}\\"><a href=\\"#\\" OnClientClick=\\"openNewWin('{1}')\\"><span>{2}</span></a></li>";Di2015NewLineoutput.AppendFormat(frmt, currentDepth, row["Href"], row["Name"]);Di2015NewLine
19835539Di2015UniqueSeparatorC:\\Users\\sew2\\Desktop\\Pictures for c#\\facebook_iconDi2015NewLine
19835589Di2015UniqueSeparator   <ContextMenu.ItemContainerStyle>Di2015NewLine      <Style TargetType="MenuItem"> Di2015NewLine         <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=DataContext.MyCommand}"/>Di2015NewLine      </Style>Di2015NewLine   </ContextMenu.ItemContainerStyle>Di2015NewLine
19835755Di2015UniqueSeparatorItem_Checked
19835755Di2015UniqueSeparatorUserControl
19835755Di2015UniqueSeparatorpublic void DoSomething()Di2015NewLine{Di2015NewLine    object selected = this.GetType().GetField("Person", Di2015NewLine        System.Reflection.BindingFlags.NonPublic | Di2015NewLine        System.Reflection.BindingFlags.Static).GetValue(this);Di2015NewLine    this.PropertyGrid1.SelectedObject = selected;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Item_Checked(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    DoSomething();Di2015NewLine}Di2015NewLine
19835755Di2015UniqueSeparatorWindow
19835755Di2015UniqueSeparatoryourUserControl
19835755Di2015UniqueSeparatorUserControl
19835755Di2015UniqueSeparatorprivate void click_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    yourUserControl.DoSomething();  Di2015NewLine}Di2015NewLine
19835837Di2015UniqueSeparatorcolumn
19835837Di2015UniqueSeparatorstart
19835837Di2015UniqueSeparatorend
19835837Di2015UniqueSeparatorExcel.Range start = xlWorkSheet2.Range["A1"];Di2015NewLineExcel.Range column;Di2015NewLineif (start.Offset[1].Value != null)Di2015NewLine    column = xlWorkSheet2.Range[start, start.End[Excel.XlDirection.xlDown]];Di2015NewLineelseDi2015NewLine    column = start;Di2015NewLine
19835837Di2015UniqueSeparatorExcel.Range start = xlWorkSheet2.Range["A1"];Di2015NewLineExcel.Range bottom = xlWorkSheet2.Range["A" + (ws.UsedRange.Rows.Count + 1)];Di2015NewLineExcel.Range end = bottom.End[Excel.XlDirection.xlUp];Di2015NewLineExcel.Range column = xlWorkSheet2.Range[start, end];Di2015NewLine
19835857Di2015UniqueSeparatorcondition
19835857Di2015UniqueSeparator(A)Di2015NewLinesomeT.With( (x,stopConditionHolder) => { while(!stopConditionHolder.StopNow) dosomething; });Di2015NewLine// of course, now With() has to get the holder object from somewhere..Di2015NewLineDi2015NewLine(B)Di2015NewLinevar stopConditionHolder = new ... ();Di2015NewLinestopConditionHolder.StopNow = false;Di2015NewLinesomeT.With( (x,stopNow) => { while(!stopConditionHolder.StopNow) dosomething; });Di2015NewLineDi2015NewLine// now you can use the holder object to 'abort' at any timeDi2015NewLinestopConditionHolder.StopNow = true; // puff!Di2015NewLineDi2015NewLine(C)Di2015NewLineclass MyActionDi2015NewLine{Di2015NewLine    public bool stopNow = false;Di2015NewLineDi2015NewLine    public void PerformSomething()Di2015NewLine    {Di2015NewLine        while(!stopNow)Di2015NewLine           dosomething;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevar actionObj = new MyAction();Di2015NewLinesomeT.With( actionObj.PerformSomething  );Di2015NewLine// note the syntax: the PerformSomething is PASSED, not called with ().Di2015NewLineDi2015NewLine// now you can use the holder object to 'abort' at any timeDi2015NewLineactionObj.stopNow = true; // puff!Di2015NewLine
19835857Di2015UniqueSeparatorCancellationToken
19835857Di2015UniqueSeparatorCancellationToken
19835876Di2015UniqueSeparatorSelect
19835876Di2015UniqueSeparatorvar ts = _q.GetAll()Di2015NewLine   .Where(m => m.a == 1)Di2015NewLine   .Select((m, index) => new MyClass Di2015NewLine                {Di2015NewLine                    Id = index + 1,Di2015NewLine                    QId = m.qDi2015NewLine                })Di2015NewLine   .ToList();Di2015NewLine
19836011Di2015UniqueSeparator(userData["emails"] as Dictionary<string,object>)["account"]
19836011Di2015UniqueSeparator((Dictionary<string,object>)userData["emails"])["account"]
19836127Di2015UniqueSeparatorPanels
19836127Di2015UniqueSeparatorSystem.Windows.Forms.Panel
19836127Di2015UniqueSeparatorSystem.Windows.Forms.Panel
19836127Di2015UniqueSeparatorabstract class MyPanelBase : PanelDi2015NewLine{Di2015NewLine    public MyPanelBase()Di2015NewLine    {Di2015NewLine        Dock = DockStyle.Fill;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyPanel1 : MyPanelBaseDi2015NewLine{Di2015NewLine}Di2015NewLine
19836127Di2015UniqueSeparatorPanel
19836127Di2015UniqueSeparatorPanel
19836127Di2015UniqueSeparatorMyPanelBase
19836127Di2015UniqueSeparatorMyPanel1
19836127Di2015UniqueSeparatorPanel
19836198Di2015UniqueSeparator@Html.Hidden("PropertyName", item.Id);Di2015NewLine
19836198Di2015UniqueSeparator@Html.TextBox("PropertyName", item.Id);Di2015NewLine
19836239Di2015UniqueSeparatorClients
19836239Di2015UniqueSeparatorId int
19836239Di2015UniqueSeparatorName varchar(100)
19836239Di2015UniqueSeparatorClient
19836239Di2015UniqueSeparatorId
19836239Di2015UniqueSeparatorName
19836239Di2015UniqueSeparator// same namespace as the auto-generated classDi2015NewLinepublic partial class ClientDi2015NewLine{Di2015NewLine    public string MyNameDi2015NewLine    {Di2015NewLine        get { return Name ?? ""; }Di2015NewLine        set { Name = (value == "" ? null : value); }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19836239Di2015UniqueSeparatorMyName
19836239Di2015UniqueSeparatorName
19836239Di2015UniqueSeparatorwhere
19836239Di2015UniqueSeparatorset
19836239Di2015UniqueSeparatorget
19836304Di2015UniqueSeparatorReplace
19836304Di2015UniqueSeparator"{" + Address  + "}<br />"
19836304Di2015UniqueSeparator"{" + Address  + "}<br />\\r\\n<br />"
19836304Di2015UniqueSeparator<br />
19836335Di2015UniqueSeparatorStreamReader().ReadToEnd()
19836335Di2015UniqueSeparatorresponse.GetResponseStream()
19836335Di2015UniqueSeparatorcurrentuser
19836335Di2015UniqueSeparatornull
19836335Di2015UniqueSeparatorpublic void CheckRFID(string RFIDtag)Di2015NewLine{Di2015NewLine    [...SOME WORKING CODE]Di2015NewLine    HttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLine    string responseString = (new StreamReader(response.GetResponseStream())).ReadToEnd();Di2015NewLine    System.Diagnostics.Debug.WriteLine(responseString);  Di2015NewLineDi2015NewLine    currentuser = Newtonsoft.Json.JsonConvert.DeserializeObject<User[]>(responseString);Di2015NewLine    System.Diagnostics.Debug.WriteLine(currentuser[0].UserID);Di2015NewLine}Di2015NewLine
19836335Di2015UniqueSeparatorUserID
19836451Di2015UniqueSeparatorValidationGroup
19836451Di2015UniqueSeparator<asp:CompareValidator ID="ddlto" ... ValidationGroup="MyValidation"... />Di2015NewLineDi2015NewLine<asp:Button ID="MyBtn" ... ValidationGroup="MyValidation"... />Di2015NewLine
19836517Di2015UniqueSeparatorvar exeFiles = Directory.EnumerateFiles(sourceDirectory, Di2015NewLine                                        "*", SearchOption.AllDirectories)Di2015NewLine               .Where(s => s.EndsWith(".exe") && s.Count( c => c == '.') == 2)Di2015NewLine               .ToList();Di2015NewLine
19836661Di2015UniqueSeparatorpublic class IsolateStorageStoreDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// The iosolated settings store.Di2015NewLine    /// </summary>Di2015NewLine    private readonly IsolatedStorageSettings isolatedStorageSettings = IsolatedStorageSettings.ApplicationSettings;Di2015NewLineDi2015NewLine    public T ReadValue<T>(string key)Di2015NewLine    {Di2015NewLine        return isolatedStorageSettings.Contains(key) ? (T)isolatedStorageSettings[key] : default(T);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteValue<T>(string key, T value)Di2015NewLine    {Di2015NewLine        if (isolatedStorageSettings.Contains(key))Di2015NewLine        {Di2015NewLine            isolatedStorageSettings[key] = value;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            isolatedStorageSettings.Add(key, value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19836661Di2015UniqueSeparatorpublic static class IsolatedStorageManagerDi2015NewLine{Di2015NewLine    private static IsolateStorageStore IsolateStorageStore = new IsolateStorageStore();Di2015NewLineDi2015NewLine    public static ItemViewModel FeedItemViewModelDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return IsolateStorageStore.ReadValue<ItemViewModel>("ItemFeedsKey");Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            IsolateStorageStore.WriteValue("ItemFeedsKey", value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static object AnotherItemDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return IsolateStorageStore.ReadValue<object>("AnotherItemKey");Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            IsolateStorageStore.WriteValue("AnotherItemKey", value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19836661Di2015UniqueSeparatorprivate void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        var button = (sender as Button);Di2015NewLineDi2015NewLine        if (button != null)Di2015NewLine        {Di2015NewLine            var data = button.DataContext as ItemViewModel;Di2015NewLineDi2015NewLine            if (data != null)Di2015NewLine            {Di2015NewLine                //Save to isolated storageDi2015NewLine                IsolatedStorageManager.FeedItemViewModel = data;Di2015NewLineDi2015NewLine                //redirect to next Page.Di2015NewLine                this.NavigationService.Navigate(new Uri("/lineThreePage.xaml", UriKind.Relative));Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                MessageBox.Show("An error occured, either the sender is not a button or the data context is not of type ItemViewModel");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show("An error occured, either the sender is not a button or the data context is not of type ItemViewModel");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19836661Di2015UniqueSeparator public lineThreePage()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        BindData();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private void BindData()Di2015NewLine    {Di2015NewLine        var data = IsolatedStorageManager.FeedItemViewModel;Di2015NewLineDi2015NewLine        if (data != null)Di2015NewLine        {Di2015NewLine            //Bind the data to a text box in your xaml named "txtDescription"Di2015NewLine            txtDescription.Text = data.LineTwo;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19836789Di2015UniqueSeparatorfollowing blog post
19836789Di2015UniqueSeparatorHtml.BeginCollectionItem
19836889Di2015UniqueSeparatorwindow.location.href = "@Url.Action("Index", "Packaging")" + "/";Di2015NewLine
19836957Di2015UniqueSeparator title = Regex.Replace(title, "[^a-zA-Z0-9\\\\ ]", "");Di2015NewLine
19836957Di2015UniqueSeparator title = Regex.Replace(title, @"[^\\w\\ ]", "");Di2015NewLine
19837112Di2015UniqueSeparatorOpenField
19837112Di2015UniqueSeparatorpublic int[,] testReturner()Di2015NewLine{Di2015NewLine  return new int[5, 5]; // or _minenArrayDi2015NewLine}Di2015NewLineDi2015NewLinepublic bool[,] testReturnerZwei()Di2015NewLine{Di2015NewLine  return new bool[5, 5]; // or _boolArrayDi2015NewLine}Di2015NewLine
19837129Di2015UniqueSeparatormanage-bde
19837129Di2015UniqueSeparatormanage-bde
19837129Di2015UniqueSeparator<Solution FolderName>\\<Project FolderName>\\bin\\Release
19837129Di2015UniqueSeparator<Solution FolderName>\\<Project FolderName>\\bin\\Debug
19837129Di2015UniqueSeparatormanage-bde
19837129Di2015UniqueSeparatormanage-bde
19837129Di2015UniqueSeparatorProcess process1 = new Process();Di2015NewLineprocess1.StartInfo.RedirectStandardOutput = true;Di2015NewLineprocess1.StartInfo.UseShellExecute = false;Di2015NewLineprocess1.StartInfo.CreateNoWindow = false;Di2015NewLineprocess1.StartInfo.FileName = @"cmd.exe";Di2015NewLineprocess1.StartInfo.Arguments = @"/C C:\\apache-jmeter-2.9\\apache-jmeter-2.9\\bin\\jmeter.bat";Di2015NewLineprocess1.Start();Di2015NewLine
19837174Di2015UniqueSeparatorpublic static void Assert(Func<bool> cond, string message = "")Di2015NewLine{Di2015NewLine    if(cond())Di2015NewLine    {Di2015NewLine        Assert.Ignore(message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19837235Di2015UniqueSeparatorvar num = 256;Di2015NewLinevar ind = Math.Log(num, 2);Di2015NewLine
19837235Di2015UniqueSeparatorind
19837235Di2015UniqueSeparator2
19837456Di2015UniqueSeparatordayofyear()
19837456Di2015UniqueSeparatorIHqlGeneratorForProperty
19837456Di2015UniqueSeparatorBaseHqlGeneratorForProperty
19837456Di2015UniqueSeparatorpublic class DateTimeDayOfYearPropertyHqlGenerator : NHibernate.Linq.Functions.BaseHqlGeneratorForPropertyDi2015NewLine{Di2015NewLine    public DateTimeDayOfYearPropertyHqlGenerator()Di2015NewLine    {Di2015NewLine        SupportedProperties = new[]Di2015NewLine            {Di2015NewLine                ReflectionHelper.GetProperty((DateTime x) => x.DayOfYear)Di2015NewLine            };Di2015NewLine    }Di2015NewLineDi2015NewLine    public override NHibernate.Hql.Ast.HqlTreeNode BuildHql(MemberInfo member, Expression expression, NHibernate.Hql.Ast.HqlTreeBuilder treeBuilder, NHibernate.Linq.Visitors.IHqlExpressionVisitor visitor)Di2015NewLine    {Di2015NewLine        return treeBuilder.MethodCall("dayofyear", visitor.Visit(expression).AsExpression());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19837456Di2015UniqueSeparatorDefaultLinqToHqlGeneratorsRegistry
19837456Di2015UniqueSeparatorpublic class ExtendedLinqToHqlGeneratorsRegistry : DefaultLinqToHqlGeneratorsRegistryDi2015NewLine{Di2015NewLine    public ExtendedLinqToHqlGeneratorsRegistry()Di2015NewLine    {Di2015NewLine        this.Merge(new DateTimeDayOfYearPropertyHqlGenerator());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19837456Di2015UniqueSeparatorconfig.LinqToHqlGeneratorsRegistry<ExtendedLinqToHqlGeneratorsRegistry>();Di2015NewLine
19837456Di2015UniqueSeparator...Di2015NewLine.ExposeConfiguration(cfg =>Di2015NewLine         cfg.SetProperty(NHibernate.Cfg.Environment.LinqToHqlGeneratorsRegistry,Di2015NewLine         typeof(ExtendedLinqToHqlGeneratorsRegistry).AssemblyQualifiedName))Di2015NewLine
19837534Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<!-- For more information on using transformations Di2015NewLine see the web.comfig examples at http://go.microsoft.com/fwlink/?LinkId=214134. -->Di2015NewLine<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">Di2015NewLineDi2015NewLine<appSettings>Di2015NewLine  <add key="logDirectory" value="D:\\releaseLogs" xdt:Transform="Replace" xdt:Locator="Match(key)"/>Di2015NewLine</appSettings>Di2015NewLineDi2015NewLine</configuration>Di2015NewLine
19837667Di2015UniqueSeparatorpublic static string StartCraling(string URI, string Parameters)Di2015NewLine        {Di2015NewLine            WebRequest req = WebRequest.Create(URI);Di2015NewLineDi2015NewLine            req.ContentType = "application/x-www-form-urlencoded";Di2015NewLine            req.Method = "POST";Di2015NewLineDi2015NewLine            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(Parameters);Di2015NewLine            req.ContentLength = bytes.Length;Di2015NewLineDi2015NewLine            using (Stream os = req.GetRequestStream())Di2015NewLine            {Di2015NewLine                os.Write(bytes, 0, bytes.Length); //Push it out thereDi2015NewLine            }Di2015NewLineDi2015NewLine            using (WebResponse resp = req.GetResponse())Di2015NewLine            {Di2015NewLine                using (StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream()))Di2015NewLine                {Di2015NewLine                    return sr.ReadToEnd().Trim();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
19837745Di2015UniqueSeparatorpublic List<T> SearchByCodeType(ECodes codeType, List<T> list)Di2015NewLine{Di2015NewLine    return list.Where((_item, _index) => _item.CodeType == codeType).ToList();Di2015NewLine}Di2015NewLineDi2015NewLinepublic List<T> SearchByCodeType(ECodes codeType, List<T> list)Di2015NewLine{Di2015NewLine    return list.Where(_item => _item.CodeType == codeType).ToList();Di2015NewLine}Di2015NewLine
19837745Di2015UniqueSeparatorusing System.Linq;
19837745Di2015UniqueSeparatorpublic List<T> SearchByCodeType(ECodes codeType, List<T> list)Di2015NewLine{Di2015NewLine    return list.FindAll(_item => _item.CodeType == codeType);Di2015NewLine}Di2015NewLine
19837745Di2015UniqueSeparatorT
19837745Di2015UniqueSeparatorT.CodeType
19837745Di2015UniqueSeparatorclass Foo<T> where T : IHazCodeTypeDi2015NewLine{Di2015NewLine    List<T> SearchByCodeType(ECodes codeType, List<T> list) {...}Di2015NewLine}Di2015NewLineinterface IHazCodeTypeDi2015NewLine{Di2015NewLine    ECodes CodeType {get;}    Di2015NewLine}Di2015NewLine
19837775Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    OracleConnection con = new OracleConnection();Di2015NewLine    con.ConnectionString = "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.0.0.24)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=DEVL)));User Id=aaziz;Password=123211;";Di2015NewLine    con.Open();Di2015NewLine    string cmdQuery = "Insert into M.person (RED_NO, USED_FLAG) VALUES ('12', '0')";Di2015NewLine    OracleCommand cmd = new OracleCommand(cmdQuery);Di2015NewLine    cmd.Connection = con;Di2015NewLine    cmd.CommandType = CommandType.Text;Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLineDi2015NewLine    cmd.Parameters.Clear();Di2015NewLine    cmd.CommandText = "INSERT NEW QUERY HERE";Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLine    cmd.Parameters.Clear();Di2015NewLine    cmd.CommandText = "INSERT NEW QUERY HERE";Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLine    cmd.Parameters.Clear();Di2015NewLine    cmd.CommandText = "INSERT NEW QUERY HERE";Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLine    cmd.Parameters.Clear();Di2015NewLine    cmd.CommandText = "INSERT NEW QUERY HERE";Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLine    con.Dispose();Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    Console.WriteLine(ex.Message);Di2015NewLine
19837971Di2015UniqueSeparatorcellStyle.Setters.Add(new Setter() { Property = CellValuePresenter.TemplateProperty, Value = ((object)new CellValuePresenter() { Template = ct }) });Di2015NewLine
19837971Di2015UniqueSeparatorcellStyle.Setters.Add(new Setter(CellValuePresenter.TemplateProperty, ct));Di2015NewLine
19838180Di2015UniqueSeparatorpublic class ClassUnderTestDi2015NewLine{Di2015NewLine  readonly ISomeDependency a;Di2015NewLine  readonly IOtherDependency b;Di2015NewLineDi2015NewLine  public ClassUnderTest() : this(new SomeDependency(), new OtherDependency())Di2015NewLine  {Di2015NewLine  }Di2015NewLineDi2015NewLine  public ClassUnderTest(ISomeDependency a, IOtherDependency b)Di2015NewLine  {Di2015NewLine     this.a = a;Di2015NewLine     this.b = b;Di2015NewLine  }Di2015NewLine}Di2015NewLine
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparatorArg<Line.EligibleType>Di2015NewLine  .Ref(brBD.Line.EligibleType, Line.EligibleType.skipNone).DummyDi2015NewLine
19838215Di2015UniqueSeparatorArg<T>.Ref
19838215Di2015UniqueSeparator.Dummy
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparatorvar tmp = Arg<Line.EligibleType>.Ref(brBD.Line.EligibleType, Line.EligibleType.skipNone).Dummy;Di2015NewLinereturn s.Eligible(ref tmp)Di2015NewLine
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparator.Dummy
19838215Di2015UniqueSeparatorref
19838215Di2015UniqueSeparator.Dummy
19838215Di2015UniqueSeparatorref
19838309Di2015UniqueSeparatorreader
19838309Di2015UniqueSeparatorprivate Airport BuildAirport(SqlDataReader _reader)Di2015NewLine{Di2015NewLineDi2015NewLine    Airport temAirport = new Airport();Di2015NewLine    temAirport.airportCode = (string) _reader["airportCode"];Di2015NewLine    temAirport.airportName = (string) _reader["airportName"];Di2015NewLine    temAirport.country = (string) _reader["country"];Di2015NewLine    temAirport.city = (string) _reader["city"];Di2015NewLine    return temAirport;Di2015NewLine}Di2015NewLine
19838309Di2015UniqueSeparatorBuildAirport
19838309Di2015UniqueSeparatorFindAirportByCode
19838309Di2015UniqueSeparatorpublic Airport FindAirportByCode(string _airportCode)Di2015NewLine{Di2015NewLine    con.Open();Di2015NewLine    string query = "SELECT * from Airport WHERE airportCode = @airportCode";Di2015NewLine    SqlCommand cmd = new SqlCommand(query, con);Di2015NewLine    cmd.Parameters.AddWithValue("@airportCode", _airportCode);Di2015NewLineDi2015NewLine    SqlDataReader _reader = cmd.ExecuteReader();Di2015NewLineDi2015NewLine    Airport retAirport = null;Di2015NewLine    if (_reader.Read())Di2015NewLine    {Di2015NewLine         retAirport = BuildAirport(_reader);Di2015NewLine    }Di2015NewLineDi2015NewLine    _reader.Close();Di2015NewLine    con.Close();Di2015NewLine    return retAirport;Di2015NewLine}Di2015NewLine
19838348Di2015UniqueSeparator360 - imgOrientation
19838348Di2015UniqueSeparatorimgOrientation
19838357Di2015UniqueSeparatorString  ApplicationFilePath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\\\\", "");Di2015NewLine
19838357Di2015UniqueSeparatorSolutionFolder/ProjectFolder/bin/Debug(or)ReleaseDi2015NewLine
19838712Di2015UniqueSeparatorpublic string ToggleUiVisibility(params bool[] values)Di2015NewLine{Di2015NewLine    // make sure each argument is a bool and trigger the sameDi2015NewLine    // functionality as aboveDi2015NewLine}Di2015NewLine
19838712Di2015UniqueSeparatorToggleUiVisibility(true, false, ...);Di2015NewLine
19838747Di2015UniqueSeparatorReportDocument reportDocument = new ReportDocument();Di2015NewLinereportDocument.Load(reportPath);Di2015NewLinereportDocument.SetParameterValue("@id", QuotationID);Di2015NewLine
19838747Di2015UniqueSeparatorvar exportOptions = reportDocument.ExportOptions;Di2015NewLineexportOptions.ExportDestinationType = ExportDestinationType.NoDestination;Di2015NewLineexportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;Di2015NewLinevar req = new ExportRequestContext {ExportInfo = exportOptions};Di2015NewLinevar stream = reportDocument.FormatEngine.ExportToStream(req);Di2015NewLine
19838920Di2015UniqueSeparatorpublic class LoginValidationDi2015NewLine{Di2015NewLine    [Required]Di2015NewLine    public string Username { get; set; }Di2015NewLine    [Required]Di2015NewLine    public string Password { get; set; }Di2015NewLine}Di2015NewLine
19838920Di2015UniqueSeparatorpublic class ViewModelA : LoginValidationDi2015NewLine{Di2015NewLine    public string SomeOtherProperty { get; set; }Di2015NewLine}Di2015NewLine
19838920Di2015UniqueSeparatorLoginValidation
19838920Di2015UniqueSeparatorpublic class LoginAndDateValidation : LoginValidationDi2015NewLine{Di2015NewLine    [Required]Di2015NewLine    public DateTime StartDate { get; set; }Di2015NewLine    [Required]Di2015NewLine    public DateTime EndDate { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ViewModelA : LoginAndDateValidationDi2015NewLine{Di2015NewLine    public string SomeOtherProperty { get; set; }Di2015NewLine}Di2015NewLine
19839115Di2015UniqueSeparatorif (Convert.ToDouble(cbMoney.SelectedItem.ToString()) < Convert.ToDouble(total))Di2015NewLine{Di2015NewLine  MessageBox.Show("Not Enough Money");Di2015NewLine}Di2015NewLine
19839303Di2015UniqueSeparatorPredicate
19839303Di2015UniqueSeparatorSomeCollection.Where
19839303Di2015UniqueSeparatorSomeCollection = SomeCollection.Where(item => item.ToString().StartsWith(Di2015NewLine    SearchString, true, CultureInfo.CurrentCulture)).Take(10);Di2015NewLinecollectionViewSource.Source = SomeCollection;Di2015NewLine
19839367Di2015UniqueSeparatorpublic interface IRepository<TEntity>Di2015NewLine    where TEntity : classDi2015NewLine{Di2015NewLine    IQueryable<TEntity> GetAll();Di2015NewLine    IQueryable<TEntity> GetBy(Expression<Func<TEntity, bool>> predicate);Di2015NewLine    TEntity GetById(long id);Di2015NewLine    void Add(TEntity entity);Di2015NewLine    void Update(TEntity entity);Di2015NewLine    void Delete(TEntity entity);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Repository<TEntity> : IRepository<TEntity>Di2015NewLine    where TEntity : classDi2015NewLine{Di2015NewLine    protected readonly DbEntities Context;Di2015NewLine    protected readonly DbSet<TEntity> Set;Di2015NewLineDi2015NewLine    public Repository()Di2015NewLine    {Di2015NewLine        Context = new DbEntities();Di2015NewLine        Set = Context.Set<TEntity>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual IQueryable<TEntity> GetAll()Di2015NewLine    {Di2015NewLine        return Set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual IQueryable<TEntity> GetBy(Expression<Func<TEntity, bool>> predicate)Di2015NewLine    {Di2015NewLine        return Set.Where(predicate);Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual TEntity GetById(long id)Di2015NewLine    {Di2015NewLine        return Set.Find(id);Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual void Add(TEntity entity)Di2015NewLine    {Di2015NewLine        Set.Add(entity);Di2015NewLine        Context.SaveChanges();Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual void Update(TEntity entity)Di2015NewLine    {Di2015NewLine        Set.Attach(entity);Di2015NewLine        Context.Entry(entity).State = EntityState.Modified;Di2015NewLine        Context.SaveChanges();Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual void Delete(TEntity entity)Di2015NewLine    {Di2015NewLine        Set.Remove(entity);Di2015NewLine        Context.SaveChanges();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine// And assuming User is a data object with an Id property:Di2015NewLinepublic interface IUserSpecificRepositoryDi2015NewLine{Di2015NewLine    List<User> GetById(long id)Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UserSpecificRepository : IUserSpecificRepository, Repository<User>Di2015NewLine{Di2015NewLine    public virtual List<User> GetById(long id)Di2015NewLine    {Di2015NewLine        return GetBy(x => x.Id = id).ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19839367Di2015UniqueSeparatorGetAll()
19839367Di2015UniqueSeparatorGetBy()
19839367Di2015UniqueSeparatorToList()
19839367Di2015UniqueSeparatorGetAll().ToList()
19839367Di2015UniqueSeparatorGetAll().ToList().Where(x => x.Id = 1)
19839367Di2015UniqueSeparatorGetAll().Where(x => x.Id = 1).ToList()
19839425Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public List<X> Added { get; set; }Di2015NewLine    public List<X> Removed { get; set; }Di2015NewLine}Di2015NewLine
19839425Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    var viewModel = new MyViewModelDi2015NewLine    {Di2015NewLine        Added = ...,Di2015NewLine        Removed = ...Di2015NewLine    };Di2015NewLine    return View(viewModel);Di2015NewLine}Di2015NewLine
19839425Di2015UniqueSeparator@model XXXXX.MyViewModelDi2015NewLine...Di2015NewLine
19839515Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ths.button1_2.PerformClick();Di2015NewLine}Di2015NewLine
19839538Di2015UniqueSeparatormodel.states.push(new State(ko.toJS(state)));Di2015NewLine
19839538Di2015UniqueSeparatorself.citiesFromSelectedState = ko.computed(function() {Di2015NewLine    var state = self.selectedState();Di2015NewLine    return ko.utils.arrayFilter(self.cities(), function(city) {Di2015NewLine        return city.state.id == state;Di2015NewLine    }Di2015NewLine}, self);Di2015NewLine
19839642Di2015UniqueSeparatorBitmapSource
19839642Di2015UniqueSeparatorYou --> XImage --> BitmapSource --> StreamDi2015NewLine
19839642Di2015UniqueSeparatorXImage
19839642Di2015UniqueSeparatorBitmapSource
19839642Di2015UniqueSeparatorBitmapSource
19839642Di2015UniqueSeparatorBitmapSource
19839642Di2015UniqueSeparatorusing (var fsImage = File.Open(tiff_path, FileMode.Open, FileAccess.Read, FileShare.None))Di2015NewLine{Di2015NewLine    var output = new PdfDocument();Di2015NewLine    var input = PdfReader.Open(template_path, PdfDocumentOpenMode.Import);Di2015NewLineDi2015NewLine    var page = input.Pages[0];Di2015NewLine    output.AddPage(page);Di2015NewLine    page = output.Pages[0];Di2015NewLineDi2015NewLine    var gfx = XGraphics.FromPdfPage(page);Di2015NewLineDi2015NewLine    var bitmapSource = new BitmapImage();Di2015NewLine    bitmapSource.BeginInit();Di2015NewLine    bitmapSource.StreamSource = fsImage;Di2015NewLine    bitmapSource.EndInit();Di2015NewLine    using (var image = XImage.FromBitmapSource(bitmapSource))Di2015NewLine    {Di2015NewLine        gfx.DrawImage(image, 500, 200, 400, 400);Di2015NewLine    }Di2015NewLineDi2015NewLine    output.Save(destination_path);Di2015NewLine    output.Close();Di2015NewLine}Di2015NewLine
19839642Di2015UniqueSeparatorBitmapCacheOption
19839642Di2015UniqueSeparatorOnLoad
19839892Di2015UniqueSeparatorAddRef()
19839892Di2015UniqueSeparatorRelease()
19839892Di2015UniqueSeparatorpublic ref class MyLibraryHelper {Di2015NewLineDi2015NewLinepublic:Di2015NewLine    IntPtr MakeCANMsg() { return gcnew IntPtr(new CANMsg()); }Di2015NewLine    void DestroyCANMsg(IntPtr msgPtr) {Di2015NewLine       CANMsg *msg = reinterpret_cast<CANMsg *>(msgPtr.ToPointer());Di2015NewLine       if (msg) delete msg;Di2015NewLine    }Di2015NewLine    void ProjectTo(CSharpCANMsg ^csh, IntPtr msgPtr)Di2015NewLine    {Di2015NewLine       CANMsg *msg = reinterpret_cast<CANMsg *>(msgPtr.ToPointer());Di2015NewLine       if (!msg) return;Di2015NewLine       msg->MsgId = csh->get_MsgId();Di2015NewLine       // etcDi2015NewLine    }Di2015NewLine    void ProjectFrom(IntPtr msgPtr, CSharpCANMsg ^csh)Di2015NewLine    {Di2015NewLine       CANMsg *msg = reinterpret_cast<CANMsg *>(msgPtr.ToPointer());Di2015NewLine       if (!msg) return;Di2015NewLine       csh->set_MsgId(msg->MsgId);Di2015NewLine       // etcDi2015NewLine    }Di2015NewLine}Di2015NewLine
19839892Di2015UniqueSeparator!ClassName()
19839995Di2015UniqueSeparatorHtmlEncode
19839995Di2015UniqueSeparatorHtmlDecode
19839995Di2015UniqueSeparatorstring x = "Ã©Ã­&";Di2015NewLinestring encoded = System.Web.HttpUtility.HtmlEncode(x);Di2015NewLineConsole.WriteLine(encoded);  //éí&Di2015NewLineDi2015NewLinestring decoded = System.Web.HttpUtility.HtmlDecode(encoded);Di2015NewLineConsole.WriteLine(decoded);  //Ã©Ã­&Di2015NewLine
19839995Di2015UniqueSeparatorString decoded = System.Web.HttpUtility.HtmlDecode("November is Fruit's Fresh.");Di2015NewLineConsole.WriteLine(decoded);   //November is Fruit's Fresh.Di2015NewLine
19840082Di2015UniqueSeparatorOpenMappedMachineConfiguration
19840082Di2015UniqueSeparatorvar path = "path to desired machine config";Di2015NewLineConfigurationFileMap cfm = new ConfigurationFileMap(path);Di2015NewLineConfiguration config = ConfigurationManager.OpenMappedMachineConfiguration(cfm);Di2015NewLine
19840097Di2015UniqueSeparator<asp:FormView ID="LanguagesFormView" runat="server" DataSourceID="LanguageSqlDataSource"Di2015NewLine    OnItemInserting="LanguagesFormView_ItemInserting" OnItemDeleting="LanguagesFormView_ItemDeleting" DataKeyNames="LanguageID">Di2015NewLine    <ItemTemplate>Di2015NewLine        ...Di2015NewLine        <dx:ASPxButton ID="deleteLangASPxButton" runat="server" CommandName="Delete" Text="Delete" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:FormView>Di2015NewLine
19840148Di2015UniqueSeparatorUnauthorizedAccessException
19840148Di2015UniqueSeparatorIOException
19840148Di2015UniqueSeparatorFileNotFoundException
19840148Di2015UniqueSeparatorDirectoryNotFoundException
19840148Di2015UniqueSeparatorPathTooLongException
19840148Di2015UniqueSeparatorNotSupportedException
19840148Di2015UniqueSeparatorSecurityException
19840148Di2015UniqueSeparatorArgumentException
19840148Di2015UniqueSeparatorIOException
19840148Di2015UniqueSeparatorIOException
19840148Di2015UniqueSeparatorNotSupportedException
19840148Di2015UniqueSeparatorUnauthorizedAccessException
19840166Di2015UniqueSeparatorFindControl()
19840166Di2015UniqueSeparatorItemTemplate
19840166Di2015UniqueSeparatorprotected void viewHoursButton_OnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var viewHoursPopup = parentGridView.FindControl("viewHoursPopup") as ModalPopupExtender;Di2015NewLine    var viewHoursGridView = parentGridView.FindControl("viewHoursGridView") as GridView;Di2015NewLine    if (viewHoursPopup != null && viewHoursGriView != null)Di2015NewLine    {Di2015NewLine        viewHoursPopup.Show();Di2015NewLine        viewHoursGridView.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19840166Di2015UniqueSeparatorFindControl()
19840166Di2015UniqueSeparatorControl
19840166Di2015UniqueSeparator.Show()
19840166Di2015UniqueSeparatoras
19840166Di2015UniqueSeparatornull
19840166Di2015UniqueSeparatornull
19840186Di2015UniqueSeparatorvar lTest = string.Join(", ", numDayOccurances.Select(e=>e.Key.ToString()));Di2015NewLine
19840331Di2015UniqueSeparatorSystem.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(@"C:\\temp\\output.txt");Di2015NewLinepsi.Verb = "PRINT";Di2015NewLineDi2015NewLineProcess.Start(psi);Di2015NewLine
19840389Di2015UniqueSeparator// 1st alternativeDi2015NewLineservers.OrderBy(s => s.Length).OrderBy(s => s.Name);Di2015NewLineDi2015NewLine// 2nd alternativeDi2015NewLineservers.OrderBy(s => Int32.Parse(s.Substring(6)));Di2015NewLine
19840543Di2015UniqueSeparatorcon.Open();Di2015NewLine
19840543Di2015UniqueSeparatorusing
19840543Di2015UniqueSeparatorusing (SqlConnection con = new SqlConnection("connection string")) Di2015NewLineusing(SqlCommand cmd = new SqlCommand("SELECT EmpName FROM Employee WHERE EmpID=@EmpID", con))Di2015NewLine{Di2015NewLine    cmd.Parameters.AddWithValue("@EmpID", id.Text);Di2015NewLine    con.Open();Di2015NewLine    SqlDataReader reader = cmd.ExecuteReader();Di2015NewLine    //..... your rest of the codeDi2015NewLine}Di2015NewLine
19840550Di2015UniqueSeparatorhttpWebRequest.Method = "GET";Di2015NewLine
19840550Di2015UniqueSeparatorstring _URL = "http://localhost:1035/api/values/getselectedperson?id=" + HttpUtility.UrlEncode(ID);Di2015NewLineDi2015NewLinevar httpWebRequest = (HttpWebRequest)WebRequest.Create(_URL);Di2015NewLinehttpWebRequest.Headers.Add("Culture", "en-US");Di2015NewLinehttpWebRequest.Accept = "application/json";Di2015NewLinehttpWebRequest.Method = "GET";Di2015NewLineDi2015NewLinereturn HandleResponse((HttpWebResponse)httpWebRequest.GetResponse());Di2015NewLine
19840550Di2015UniqueSeparatorpublic IPerson GetSelectedPerson(string id)Di2015NewLine{Di2015NewLine    ....... codeDi2015NewLine}Di2015NewLine
19840595Di2015UniqueSeparator.animated
19840595Di2015UniqueSeparatorimg
19840595Di2015UniqueSeparator<img class="animated bounceInRight"Di2015NewLine     src="~/Themes/Renray/Content/images/small-1.png" />Di2015NewLine
19840595Di2015UniqueSeparator.animated
19840595Di2015UniqueSeparatorbounceInRight
19840595Di2015UniqueSeparatorimg.bounceInRight {Di2015NewLine    -webkit-animation-fill-mode:both;Di2015NewLine    moz-animation-fill-mode:both;Di2015NewLine    -ms-animation-fill-mode:both;Di2015NewLine    animation-fill-mode:both;Di2015NewLine    -webkit-animation-duration:1s;Di2015NewLine    -moz-animation-duration:1s;Di2015NewLine    -ms-animation-duration:1s;Di2015NewLine    -o-animation-duration:1s;Di2015NewLine    animation-duration:1s;Di2015NewLine    -webkit-animation-name: bounceInRight;Di2015NewLine    -moz-animation-name: bounceInRight;Di2015NewLine    animation-name: bounceInRight;Di2015NewLine}  Di2015NewLine
19841025Di2015UniqueSeparatorEntryPoint
19841025Di2015UniqueSeparatordumpbin
19841025Di2015UniqueSeparator__declspec(dllexport)
19841025Di2015UniqueSeparatorextern "C"
19841025Di2015UniqueSeparatorextern "C" Di2015NewLine{Di2015NewLine    __declspec(dllexport) float RGBCompare()Di2015NewLine    {Di2015NewLine        return 100;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19841046Di2015UniqueSeparatorSmtpClient
19841046Di2015UniqueSeparatorusing(Stream fs1 = File.OpenRead(pdfFilePath))Di2015NewLineusing(Stream fs2 = File.OpenRead(pngFilePath))Di2015NewLine{Di2015NewLine   Attachment data = new Attachment(fs1 , GetMimeType(pdfFilePath));Di2015NewLine   Attachment data2 = new Attachment(fs2 , GetMimeType(pngFilePath));Di2015NewLine   message.Attachments.Add(data);Di2015NewLine   message.Attachments.Add(data2);Di2015NewLine   ...Di2015NewLine   client.Send(message);Di2015NewLine}Di2015NewLine
19841046Di2015UniqueSeparatorclient.Dispose()
19841087Di2015UniqueSeparatorRastImage = rendertT.BitmapDi2015NewLine
19841114Di2015UniqueSeparatorMessageBox.Show(Di2015NewLinestring.Join(",", Di2015NewLinenumDayOccurances.Keys.GroupBy(r=> r.DayOfWeek)Di2015NewLine                .Select(grp => string.Format("{0}({1})", grp.Key, grp.Count())));Di2015NewLine
19841114Di2015UniqueSeparatorDisplayDay
19841114Di2015UniqueSeparatorclass DisplayDayDi2015NewLine{Di2015NewLine    public string  DayOfWeek { get; set; }Di2015NewLine}Di2015NewLine
19841157Di2015UniqueSeparatorZip
19841157Di2015UniqueSeparatorpublic static void CopyTo(Stream src, Stream dest) {Di2015NewLine    byte[] bytes = new byte[4096];Di2015NewLineDi2015NewLine    int cnt;Di2015NewLineDi2015NewLine    while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0) {Di2015NewLine        dest.Write(bytes, 0, cnt);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static byte[] Zip(string str) {Di2015NewLine    var bytes = Encoding.UTF8.GetBytes(str);Di2015NewLineDi2015NewLine    using (var msi = new MemoryStream(bytes))Di2015NewLine    using (var mso = new MemoryStream()) {Di2015NewLine        using (var gs = new GZipStream(mso, CompressionMode.Compress)) {Di2015NewLine            //msi.CopyTo(gs);Di2015NewLine            CopyTo(msi, gs);Di2015NewLine        }Di2015NewLineDi2015NewLine        return mso.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string Unzip(byte[] bytes) {Di2015NewLine    using (var msi = new MemoryStream(bytes))Di2015NewLine    using (var mso = new MemoryStream()) {Di2015NewLine        using (var gs = new GZipStream(msi, CompressionMode.Decompress)) {Di2015NewLine            //gs.CopyTo(mso);Di2015NewLine            CopyTo(gs, mso);Di2015NewLine        }Di2015NewLineDi2015NewLine        return Encoding.UTF8.GetString(mso.ToArray());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main(string[] args) {Di2015NewLine    byte[] r1 = Zip("StringStringStringStringStringStringStringStringStringStringStringStringStringString");Di2015NewLine    string r2 = Unzip(r1);Di2015NewLine}Di2015NewLine
19841230Di2015UniqueSeparatorVisualBrush
19841230Di2015UniqueSeparatorBrush
19841230Di2015UniqueSeparatorRectangle
19841230Di2015UniqueSeparatorVisual
19841230Di2015UniqueSeparatorRectangle
19841230Di2015UniqueSeparatorVisual
19841230Di2015UniqueSeparatorRectangle
19841230Di2015UniqueSeparatorViewBox
19841230Di2015UniqueSeparatorVisual
19841230Di2015UniqueSeparatorVisual
19841230Di2015UniqueSeparatorVisualBrush.Visual
19841371Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Runtime.Serialization.Formatters.Binary;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineDi2015NewLinevoid SaveData() Di2015NewLine{Di2015NewLine    // Create a hashtable of values that will eventually be serialized.Di2015NewLine    Hashtable addresses = new Hashtable();Di2015NewLine    addresses.Add("Jeff", "123 Main Street, Redmond, WA 98052");Di2015NewLine    addresses.Add("Fred", "987 Pine Road, Phila., PA 19116");Di2015NewLine    addresses.Add("Mary", "PO Box 112233, Palo Alto, CA 94301");Di2015NewLineDi2015NewLine    // To serialize the hashtable and its key/value pairs,   Di2015NewLine    // you must first open a stream for writing.  Di2015NewLine    // In this case, use a file stream.Di2015NewLine    FileStream fs = new FileStream("DataFile.dat", FileMode.Create);Di2015NewLineDi2015NewLine    // Construct a BinaryFormatter and use it to serialize the data to the stream.Di2015NewLine    BinaryFormatter formatter = new BinaryFormatter();Di2015NewLine    try Di2015NewLine    {Di2015NewLine        formatter.Serialize(fs, addresses);Di2015NewLine    }Di2015NewLine    catch (SerializationException e) Di2015NewLine    {Di2015NewLine        Console.WriteLine("Failed to serialize. Reason: " + e.Message);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine    finally Di2015NewLine    {Di2015NewLine        fs.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinevoid LoadData() Di2015NewLine{Di2015NewLine    // Declare the hashtable reference.Di2015NewLine    Hashtable addresses  = null;Di2015NewLineDi2015NewLine    // Open the file containing the data that you want to deserialize.Di2015NewLine    FileStream fs = new FileStream("DataFile.dat", FileMode.Open);Di2015NewLine    try Di2015NewLine    {Di2015NewLine        BinaryFormatter formatter = new BinaryFormatter();Di2015NewLineDi2015NewLine        // Deserialize the hashtable from the file and  Di2015NewLine        // assign the reference to the local variable.Di2015NewLine        addresses = (Hashtable) formatter.Deserialize(fs);Di2015NewLine    }Di2015NewLine    catch (SerializationException e) Di2015NewLine    {Di2015NewLine        Console.WriteLine("Failed to deserialize. Reason: " + e.Message);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine    finally Di2015NewLine    {Di2015NewLine        fs.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    // To prove that the table deserialized correctly,  Di2015NewLine    // display the key/value pairs. Di2015NewLine    foreach (DictionaryEntry de in addresses) Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0} lives at {1}.", de.Key, de.Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19841545Di2015UniqueSeparator__doPostBack
19841545Di2015UniqueSeparatorfunction doClick(sender, e) { Di2015NewLine__doPostBack(sender,e); Di2015NewLine} Di2015NewLine
19841845Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.IO.Packaging;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Xml;Di2015NewLineDi2015NewLinenamespace OpenXmlDemoDi2015NewLine{Di2015NewLine    class PptOpenXmlDemoDi2015NewLine    {Di2015NewLine        public int PptGetSlideCount(string fileName)Di2015NewLine        {Di2015NewLine            //  Return the number of slides in a PowerPoint document.Di2015NewLine            const string documentRelationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument";Di2015NewLine            const string presentationmlNamespace = "http://schemas.openxmlformats.org/presentationml/2006/main";Di2015NewLineDi2015NewLine            int returnValue = 0;Di2015NewLineDi2015NewLine            using (Package pptPackage = Package.Open(fileName, FileMode.Open, FileAccess.Read))Di2015NewLine            {Di2015NewLine                //  Get the main document part (presentation.xml).Di2015NewLine                foreach (System.IO.Packaging.PackageRelationship relationship in pptPackage.GetRelationshipsByType(documentRelationshipType))Di2015NewLine                {Di2015NewLine                    //  There should be only a single relationship that refers to the document.Di2015NewLine                    Uri documentUri = PackUriHelper.ResolvePartUri(new Uri("/", UriKind.Relative), relationship.TargetUri);Di2015NewLine                    PackagePart documentPart = pptPackage.GetPart(documentUri);Di2015NewLineDi2015NewLine                    //  Get the slide part from the package.Di2015NewLine                    if (documentPart != null)Di2015NewLine                    {Di2015NewLine                        XmlDocument doc = new XmlDocument();Di2015NewLine                        doc.Load(documentPart.GetStream());Di2015NewLineDi2015NewLine                        //  Manage namespaces to perform XPath queries.Di2015NewLine                        XmlNamespaceManager nsManager = new XmlNamespaceManager(doc.NameTable);Di2015NewLine                        nsManager.AddNamespace("p", presentationmlNamespace);Di2015NewLineDi2015NewLine                        //  Retrieve the list of slide references from the document.Di2015NewLine                        XmlNodeList nodes = doc.SelectNodes("//p:sldId", nsManager);Di2015NewLine                        if (nodes != null)Di2015NewLine                        {Di2015NewLine                            returnValue = nodes.Count;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    //  There is only one officeDocument part. Get out of the loop now.Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return returnValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19842174Di2015UniqueSeparatorclass RefHolder<T>Di2015NewLine{Di2015NewLine    public T ptr;Di2015NewLine}Di2015NewLine
19842174Di2015UniqueSeparatorRefHolder<RefHolder<RefHolder<string>>>Di2015NewLine
19842174Di2015UniqueSeparatorRefHolder<string>
19842174Di2015UniqueSeparatorptr
19842174Di2015UniqueSeparatorstring
19842387Di2015UniqueSeparatorvar whitelist = typeof (DocumentTrackerChaseReport)Di2015NewLine    .GetProperties()Di2015NewLine    .Where(x => Attribute.IsDefined(x, typeof (DescriptionAttribute)));Di2015NewLineDi2015NewLinevar rows = things.Select(x => whitelist.Select(y => y.GetValue(x) ?? ""));Di2015NewLine
19842387Di2015UniqueSeparatorIEnumerable<IEnumerable<object>>
19842387Di2015UniqueSeparatorforeach (var header in whitelist) {Di2015NewLine    // print column of header rowDi2015NewLine}Di2015NewLineDi2015NewLineforeach (var row in rows) {Di2015NewLine    foreach (var col in row) {Di2015NewLine        // print an individual cellDi2015NewLine    }Di2015NewLine    // break for a new rowDi2015NewLine}Di2015NewLine
19842477Di2015UniqueSeparatorPanel
19842477Di2015UniqueSeparatorPanel
19842477Di2015UniqueSeparatorclass Direct3DPanel : PanelDi2015NewLine{Di2015NewLine    public Direct3DPanel()Di2015NewLine    {Di2015NewLine        this.SetStyle(ControlStyles.UserPaint | ControlStyles.AllPaintingInWmPaint | ControlStyles.Opaque, true);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19842477Di2015UniqueSeparatorSetStyle
19842477Di2015UniqueSeparatorDirect3DPanel
19842477Di2015UniqueSeparatorPaint
19842477Di2015UniqueSeparatorControlStyles
19842694Di2015UniqueSeparatorSelectMany
19842694Di2015UniqueSeparatorList<List<string>>
19842694Di2015UniqueSeparatorDistinct
19842694Di2015UniqueSeparatorvar input = new List<List<string>> {a,b};Di2015NewLinevar result = input.SelectMany(x=>x).Distinct().ToList();Di2015NewLine
19842835Di2015UniqueSeparatorSearch
19842835Di2015UniqueSeparatorViewBag
19842835Di2015UniqueSeparatorViewData
19842835Di2015UniqueSeparatorViewBag
19842835Di2015UniqueSeparatorViewData
19842835Di2015UniqueSeparator@model
19842835Di2015UniqueSeparator@model TheLibrary.Models.SearchDi2015NewLine
19842835Di2015UniqueSeparatorm
19842835Di2015UniqueSeparator@Model
19842835Di2015UniqueSeparator@Model
19842835Di2015UniqueSeparator<div>Di2015NewLine    @Model.searchCriteriaDi2015NewLine</div>Di2015NewLine
19842835Di2015UniqueSeparatorViewBag
19842835Di2015UniqueSeparatorViewData
19842835Di2015UniqueSeparatorTempData
19842835Di2015UniqueSeparatorpublic ActionResult Result(string text)Di2015NewLine{Di2015NewLine    var model = new Search { searchCriteria = text };Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
19842835Di2015UniqueSeparator@model TheLibrary.Models.SearchDi2015NewLineDi2015NewLine<div>Di2015NewLine    @Model.searchCriteriaDi2015NewLine</div>Di2015NewLine
19842835Di2015UniqueSeparatorsearchCriteria
19842835Di2015UniqueSeparator@using (Html.BeginForm("Result", "Search", FormMethod.Get))Di2015NewLine{Di2015NewLine    @Html.TextBox("text")Di2015NewLine    <input type="submit" value='Search' />Di2015NewLine}Di2015NewLine
19842835Di2015UniqueSeparatorFormMethod.Get
19842835Di2015UniqueSeparatortext
19842835Di2015UniqueSeparatorhttp://somewebsite.com/Search/Result?text=test
19842835Di2015UniqueSeparator@Html.TextBox("text")
19842835Di2015UniqueSeparatorTextBox()
19842835Di2015UniqueSeparatorResult
19842835Di2015UniqueSeparatorsearchCriteria
19842835Di2015UniqueSeparatorResult
19842835Di2015UniqueSeparatortest
19842835Di2015UniqueSeparatorSearch
19842835Di2015UniqueSeparatorResult
19842835Di2015UniqueSeparatortext
19842835Di2015UniqueSeparatortext
19842835Di2015UniqueSeparatorpublic ActionResult Result(string text)Di2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
19842835Di2015UniqueSeparatortext
19842993Di2015UniqueSeparator    public static void TransferXLToTable()Di2015NewLine    {Di2015NewLine        DataTable dt = new DataTable();Di2015NewLine        dt.Columns.Add("City", typeof(string));Di2015NewLine        dt.Columns.Add("State", typeof(string));Di2015NewLine        dt.Columns.Add("Zip", typeof(string));Di2015NewLineDi2015NewLine        using (FileStream stream = new FileStream(OpenFile(), FileMode.Open, FileAccess.Read))Di2015NewLine        {Di2015NewLine            IWorkbook wb = new XSSFWorkbook(stream);Di2015NewLine            ISheet sheet = wb.GetSheet("Sheet1");Di2015NewLine            string holder;Di2015NewLine            int i = 0;Di2015NewLine            doDi2015NewLine            {Di2015NewLine                DataRow dr = dt.NewRow();Di2015NewLine                IRow row = sheet.GetRow(i);Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    holder = row.GetCell(0, MissingCellPolicy.CREATE_NULL_AS_BLANK).ToString();Di2015NewLine                }Di2015NewLine                catch (Exception)Di2015NewLine                {Di2015NewLine                    break;Di2015NewLine                }Di2015NewLineDi2015NewLine                string city = holder.Substring(0, holder.IndexOf(','));Di2015NewLine                string state = holder.Substring(holder.IndexOf(',') + 2, 2);Di2015NewLine                string zip = holder.Substring(holder.IndexOf(',') + 5, 5);Di2015NewLine                dr[0] = city;Di2015NewLine                dr[1] = state;Di2015NewLine                dr[2] = zip;Di2015NewLine                dt.Rows.Add(dr);Di2015NewLine                i++;Di2015NewLine            } while (!String.IsNullOrEmpty(holder));Di2015NewLine        }Di2015NewLineDi2015NewLine        using (FileStream stream = new FileStream(@"C:\\Working\\FieldedAddresses.xlsx", FileMode.Create, FileAccess.Write))Di2015NewLine        {Di2015NewLine            IWorkbook wb = new XSSFWorkbook();Di2015NewLine            ISheet sheet = wb.CreateSheet("Sheet1");Di2015NewLine            ICreationHelper cH = wb.GetCreationHelper();Di2015NewLine            for (int i = 0; i < dt.Rows.Count; i++)Di2015NewLine            {Di2015NewLine                IRow row = sheet.CreateRow(i);Di2015NewLine                for (int j = 0; j < 3; j++)Di2015NewLine                {Di2015NewLine                    ICell cell = row.CreateCell(j);Di2015NewLine                    cell.SetCellValue(cH.CreateRichTextString(dt.Rows[i].ItemArray[j].ToString()));Di2015NewLine                }Di2015NewLine            }Di2015NewLine            wb.Write(stream);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19843014Di2015UniqueSeparatorExtensionLess
19843014Di2015UniqueSeparatorOPTIONS
19843014Di2015UniqueSeparatorOPTIONS
19843083Di2015UniqueSeparatorDataView
19843083Di2015UniqueSeparatorvar arrayNames = (from DataColumn x in stationTable.ColumnsDi2015NewLine                          where !x.ColumnName.Contains("B_")  // note the reversalDi2015NewLine                          select x.ColumnName).ToArray();Di2015NewLineDi2015NewLineDataView dv = new DataView(stationTable);Di2015NewLineDi2015NewLineforeach (string colName in arrayNames)    Di2015NewLine    dv.Table.Columns[colName].ColumnMapping = MappingType.HiddenDi2015NewLine
19843265Di2015UniqueSeparatorDateTime dt = DateTime.ParseExact("10.01.2013", "MM.dd.yyyy", CultureInfo.InvariantCulture);Di2015NewLine
19843364Di2015UniqueSeparatordb.session.find({Code: /3AC/ })Di2015NewLine
19843364Di2015UniqueSeparatordb.session.find({Code: /3AC/i }) Di2015NewLine
19843389Di2015UniqueSeparatorif (visit.See != null) {Di2015NewLine    lblSeeNow.Text = visit.See.ToString();Di2015NewLine}Di2015NewLine
19843389Di2015UniqueSeparatorlblSeeNow.Text
19843399Di2015UniqueSeparator    public void DoSomething()Di2015NewLine    {Di2015NewLine        Console.WriteLine("> Session opened at {0}", DateTime.Now);Di2015NewLine        callback = OperationContext.Current.GetCallbackChannel<IServiceCallback>();Di2015NewLineDi2015NewLine        Timer = new Timer(1000);Di2015NewLine        Timer.Elapsed += OnTimerElapsed;Di2015NewLine        Timer.Enabled = true;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    void OnTimerElapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        callback.OnCallback();Di2015NewLine    }Di2015NewLine
19843399Di2015UniqueSeparatorICommunicationObject
19843399Di2015UniqueSeparatorState
19843399Di2015UniqueSeparatorOpen
19843399Di2015UniqueSeparatorOnCallback
19843541Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Starting timer");             Di2015NewLine        var timer = new System.Timers.Timer(10000);Di2015NewLineDi2015NewLine        // Hook up the Elapsed event for the timer.Di2015NewLine        timer.Elapsed += OnTimer;;Di2015NewLineDi2015NewLine        timer.Enabled = true;Di2015NewLineDi2015NewLine        Console.WriteLine("Press any key to shut down");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void OnTimer(object source, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        // This code will run every 10 secondsDi2015NewLine        Console.WriteLine("In timer");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19843649Di2015UniqueSeparatorObsoleteAttribute
19843649Di2015UniqueSeparatorIsError
19843649Di2015UniqueSeparatortrue
19843695Di2015UniqueSeparatorFile.Exists
19843695Di2015UniqueSeparatorif(!File.ReadLines(filepath).Contains(newStudent))Di2015NewLine{Di2015NewLine    //TODO: Append student to the fileDi2015NewLine}Di2015NewLine
19843761Di2015UniqueSeparatorFuels
19843761Di2015UniqueSeparatorq = q.Where(d => d.FuelDate >= dateEdit1.DateTime && d.FuelDate <= dateEdit2.DateTime);Di2015NewLine
19843776Di2015UniqueSeparator Texture2D texture = this.Content.Load<Texture2D>("MyTexture");Di2015NewLine
19843776Di2015UniqueSeparator Texture2D texturewithmips = Texture2D.New(device, texture.Width, texture.Height, MipMapCount.Auto, texture.Format,Di2015NewLine TextureFlags.ShaderResource | TextureFlags.RenderTarget,Di2015NewLine 1,Direct3D11.ResourceUsage.Default);Di2015NewLine
19843776Di2015UniqueSeparatordevice.Copy(texture, 0, null, t2, 0);Di2015NewLine
19843776Di2015UniqueSeparatort2.GenerateMipMaps(this.GraphicsDevice);Di2015NewLine
19844022Di2015UniqueSeparatorvar a = ko.observable();Di2015NewLine
19844022Di2015UniqueSeparatora
19844022Di2015UniqueSeparatorvar a = ko.observable(null);Di2015NewLine
19844059Di2015UniqueSeparator<ControlTemplate x:Key="PushpinControlTemplate1" TargetType="Maps:Pushpin">Di2015NewLine    <Grid x:Name="ContentGrid" Margin="100" Background="Transparent">Di2015NewLine        <StackPanel Orientation="Vertical">Di2015NewLine            <Grid Background="{TemplateBinding Background}" HorizontalAlignment="Left" MinHeight="31" MinWidth="29">Di2015NewLine                <ContentPresenter HorizontalAlignment="Center"Di2015NewLine                                        Content="{TemplateBinding Content}"Di2015NewLine                                        ContentTemplate="{TemplateBinding ContentTemplate}" Margin="4"/>Di2015NewLine            </Grid>Di2015NewLine            <Polygon Fill="{TemplateBinding Background}" Points="0,0 29,0 0,29" Width="29" Height="29" HorizontalAlignment="Left"/>Di2015NewLine        </StackPanel>Di2015NewLine    </Grid>Di2015NewLine</ControlTemplate>Di2015NewLine
19844059Di2015UniqueSeparator    <Maps:Pushpin Background="{StaticResource PhoneAccentBrush}" Template="{StaticResource PushpinControlTemplate1}"/>Di2015NewLine
19844118Di2015UniqueSeparatorDeclare same style for TextBlock
19844118Di2015UniqueSeparatorin Application resources
19844118Di2015UniqueSeparator<Style TargetType="{x:Type TextBlock}">Di2015NewLine   <Setter Property="FontFamily"Di2015NewLine           Value="Tahoma" />Di2015NewLine   <Setter Property="FontSize"Di2015NewLine           Value="8pt"></Setter>Di2015NewLine   <Setter Property="Background"Di2015NewLine         Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>Di2015NewLine</Style>Di2015NewLine
19844118Di2015UniqueSeparatorLabel
19844118Di2015UniqueSeparatorTextBlock
19844118Di2015UniqueSeparatorControl
19844118Di2015UniqueSeparatorWindow
19844118Di2015UniqueSeparatorLabel
19844118Di2015UniqueSeparatorTextBlock
19844118Di2015UniqueSeparatorControl
19844118Di2015UniqueSeparator   <Style TargetType="Control" x:Key="BaseStyle">Di2015NewLine        <Setter Property="FontFamily" Value="Tahoma" />Di2015NewLine        <Setter Property="FontSize" Value="8pt"></Setter>Di2015NewLine        <Setter Property="Background" Di2015NewLine        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>Di2015NewLine    </Style>Di2015NewLineDi2015NewLine    <Style TargetType="{x:Type Window}"Di2015NewLine           BasedOn="{StaticResource BaseStyle}"/>Di2015NewLine    <Style TargetType="{x:Type Label}"Di2015NewLine           BasedOn="{StaticResource BaseStyle}"/>Di2015NewLine
19844140Di2015UniqueSeparatordataGridViewSummary.ColumnHeadersVisible = false;Di2015NewLine
19844373Di2015UniqueSeparatorprivate Dictionary<object, MyClass> _myStore;Di2015NewLineDi2015NewLine// add an item and return a key    Di2015NewLinepublic object Add(MyClass item)Di2015NewLine{Di2015NewLine    object key = new object();Di2015NewLine    _myStore.Add(key, item);Di2015NewLine    return key;Di2015NewLine}Di2015NewLine
19844373Di2015UniqueSeparatorprivate Dictionary<object, MyClass> _itemForKey;Di2015NewLineprivate Dictionary<MyClass, object> _keyForItem;Di2015NewLineDi2015NewLineDi2015NewLine// add an item and return a key    Di2015NewLinepublic object Add(MyClass item)Di2015NewLine{Di2015NewLine    object key = new object();Di2015NewLine    _itemForKey.Add(key, item);Di2015NewLine    _keyForItem.Add(item, key);Di2015NewLine    return key;Di2015NewLine}Di2015NewLineDi2015NewLineprotected object DeriveKeyFromItem(MyClass item)Di2015NewLine{Di2015NewLine   return _keyForItem[item];Di2015NewLine}Di2015NewLine
19844428Di2015UniqueSeparatorIQueryable<T> FilterTenant<T>(IQueryable<T> values)
19844428Di2015UniqueSeparatorT
19844428Di2015UniqueSeparatorITenantData
19844428Di2015UniqueSeparatorUser
19844428Di2015UniqueSeparatorInvoice.InvoiceLines[].Item.Categories[]
19844428Di2015UniqueSeparatorWhere()
19844428Di2015UniqueSeparatorContactModel.AddressID
19844428Di2015UniqueSeparatorContact
19844428Di2015UniqueSeparatorAddress
19844428Di2015UniqueSeparatorAddressID
19844428Di2015UniqueSeparatorpublic class UserRepositoryDi2015NewLine{Di2015NewLine    // ctor injects _dbContext and _tenantIdDi2015NewLineDi2015NewLine    public IQueryable<User> GetUsers()Di2015NewLine    { Di2015NewLine        var user = _dbContext.Users.Where(u => u.TenantId == _tenantId)Di2015NewLine                                   .Select(u => new UserDi2015NewLine                                   {Di2015NewLine                                       Interests = u.Interests.Where(u => Di2015NewLine                                                     u.TenantId == _tenantId),Di2015NewLine                                       Other = u.Other,Di2015NewLine                                   };                               Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19844428Di2015UniqueSeparatorUser
19844444Di2015UniqueSeparatornextBtn.FlatAppearance.MouseOverBackColor=Color.Transparent;Di2015NewLine
19844448Di2015UniqueSeparatormodelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();Di2015NewLine
19844448Di2015UniqueSeparator.WillCascadeOnDelete(false);Di2015NewLine
19844477Di2015UniqueSeparatorclass
19844477Di2015UniqueSeparatorstruct
19844477Di2015UniqueSeparatorstruct
19844477Di2015UniqueSeparatorList<T>
19844521Di2015UniqueSeparator    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private Point _cellClick;Di2015NewLine    private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        var h = dataGridView1.Rows[0].Height;Di2015NewLineDi2015NewLine        if (MousePosition.Y % h == 0)Di2015NewLine        {Di2015NewLine            _cellClick = new Point(MousePosition.X, MousePosition.Y);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            var y = MousePosition.Y;Di2015NewLineDi2015NewLine            doDi2015NewLine            {Di2015NewLine                y++;Di2015NewLine            } while (y % h != 0);Di2015NewLineDi2015NewLine            _cellClick = new Point(MousePosition.X, y);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var f = new Form2(_cellClick);Di2015NewLine        f.ShowDialog(this);Di2015NewLine    }Di2015NewLine
19844521Di2015UniqueSeparator    private Point loc;Di2015NewLine    public Form2(Point location)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        loc = location;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form2_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.SetDesktopLocation(loc.X, loc.Y);Di2015NewLine    }Di2015NewLine
19844521Di2015UniqueSeparatordataGridView1.Rows[0].Height
19844621Di2015UniqueSeparatorFromJSONString
19844621Di2015UniqueSeparatorT
19844621Di2015UniqueSeparatorTestQuestionHeader
19844621Di2015UniqueSeparatorT
19844621Di2015UniqueSeparatorT
19844621Di2015UniqueSeparatorvar a = JSON.FromJSONString<List<TestQuestionHeader>>(test.Questions);Di2015NewLine
19844706Di2015UniqueSeparator[DataContract]
19844706Di2015UniqueSeparator[DataMember]
19844873Di2015UniqueSeparator//Just use the Class Method no need to instantiate it:Di2015NewLineApplicationLoader.CreateProcessAsUser(string filename, string args)Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine[SuppressUnmanagedCodeSecurity]Di2015NewLineclass ApplicationLoaderDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// No Need to create the class.Di2015NewLine    /// </summary>Di2015NewLine    private ApplicationLoader() { }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    enum TOKEN_INFORMATION_CLASSDi2015NewLine    {Di2015NewLineDi2015NewLine        TokenUser = 1,Di2015NewLine        TokenGroups,Di2015NewLine        TokenPrivileges,Di2015NewLine        TokenOwner,Di2015NewLine        TokenPrimaryGroup,Di2015NewLine        TokenDefaultDacl,Di2015NewLine        TokenSource,Di2015NewLine        TokenType,Di2015NewLine        TokenImpersonationLevel,Di2015NewLine        TokenStatistics,Di2015NewLine        TokenRestrictedSids,Di2015NewLine        TokenSessionId,Di2015NewLine        TokenGroupsAndPrivileges,Di2015NewLine        TokenSessionReference,Di2015NewLine        TokenSandBoxInert,Di2015NewLine        TokenAuditPolicy,Di2015NewLine        TokenOrigin,Di2015NewLine        TokenElevationType,Di2015NewLine        TokenLinkedToken,Di2015NewLine        TokenElevation,Di2015NewLine        TokenHasRestrictions,Di2015NewLine        TokenAccessInformation,Di2015NewLine        TokenVirtualizationAllowed,Di2015NewLine        TokenVirtualizationEnabled,Di2015NewLine        TokenIntegrityLevel,Di2015NewLine        TokenUIAccess,Di2015NewLine        TokenMandatoryPolicy,Di2015NewLine        TokenLogonSid,Di2015NewLine        MaxTokenInfoClassDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct STARTUPINFODi2015NewLine    {Di2015NewLine        public Int32 cb;Di2015NewLine        public string lpReserved;Di2015NewLine        public string lpDesktop;Di2015NewLine        public string lpTitle;Di2015NewLine        public Int32 dwX;Di2015NewLine        public Int32 dwY;Di2015NewLine        public Int32 dwXSize;Di2015NewLine        public Int32 dwXCountChars;Di2015NewLine        public Int32 dwYCountChars;Di2015NewLine        public Int32 dwFillAttribute;Di2015NewLine        public Int32 dwFlags;Di2015NewLine        public Int16 wShowWindow;Di2015NewLine        public Int16 cbReserved2;Di2015NewLine        public IntPtr lpReserved2;Di2015NewLine        public IntPtr hStdInput;Di2015NewLine        public IntPtr hStdOutput;Di2015NewLine        public IntPtr hStdError;Di2015NewLine    }Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct PROCESS_INFORMATIONDi2015NewLine    {Di2015NewLine        public IntPtr hProcess;Di2015NewLine        public IntPtr hThread;Di2015NewLine        public Int32 dwProcessID;Di2015NewLine        public Int32 dwThreadID;Di2015NewLine    }Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct SECURITY_ATTRIBUTESDi2015NewLine    {Di2015NewLine        public Int32 Length;Di2015NewLine        public IntPtr lpSecurityDescriptor;Di2015NewLine        public bool bInheritHandle;Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum SECURITY_IMPERSONATION_LEVELDi2015NewLine    {Di2015NewLine        SecurityAnonymous,Di2015NewLine        SecurityIdentification,Di2015NewLine        SecurityImpersonation,Di2015NewLine        SecurityDelegationDi2015NewLine    }Di2015NewLineDi2015NewLine    public enum TOKEN_TYPEDi2015NewLine    {Di2015NewLine        TokenPrimary = 1,Di2015NewLine        TokenImpersonationDi2015NewLine    }Di2015NewLineDi2015NewLine    public const int GENERIC_ALL_ACCESS = 0x10000000;Di2015NewLine    public const int CREATE_NO_WINDOW = 0x08000000;Di2015NewLineDi2015NewLineDi2015NewLine    [DllImport("advapi32.dll", EntryPoint = "ImpersonateLoggedOnUser", SetLastError = true,Di2015NewLine          CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]Di2015NewLine    public static extern IntPtr ImpersonateLoggedOnUser(IntPtr hToken);Di2015NewLineDi2015NewLine    [Di2015NewLine       DllImport("kernel32.dll",Di2015NewLine          EntryPoint = "CloseHandle", SetLastError = true,Di2015NewLine          CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)Di2015NewLine    ]Di2015NewLine    public static extern bool CloseHandle(IntPtr handle);Di2015NewLineDi2015NewLine    [Di2015NewLine       DllImport("advapi32.dll",Di2015NewLine          EntryPoint = "CreateProcessAsUser", SetLastError = true,Di2015NewLine          CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)Di2015NewLine    ]Di2015NewLine    public static extern boolDi2015NewLine       CreateProcessAsUser(IntPtr hToken, string lpApplicationName, string lpCommandLine,Di2015NewLine                           ref SECURITY_ATTRIBUTES lpProcessAttributes, ref SECURITY_ATTRIBUTES lpThreadAttributes,Di2015NewLine                           bool bInheritHandle, Int32 dwCreationFlags, IntPtr lpEnvrionment,Di2015NewLine                           string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo,Di2015NewLine                           ref PROCESS_INFORMATION lpProcessInformation);Di2015NewLineDi2015NewLine    [Di2015NewLine       DllImport("advapi32.dll",Di2015NewLine          EntryPoint = "DuplicateTokenEx")Di2015NewLine    ]Di2015NewLine    public static extern boolDi2015NewLine       DuplicateTokenEx(IntPtr hExistingToken, Int32 dwDesiredAccess,Di2015NewLine                        ref SECURITY_ATTRIBUTES lpThreadAttributes,Di2015NewLine                        Int32 ImpersonationLevel, Int32 dwTokenType,Di2015NewLine                        ref IntPtr phNewToken);Di2015NewLineDi2015NewLineDi2015NewLine    [DllImport("Kernel32.dll", SetLastError = true)]Di2015NewLine    //[return: MarshalAs(UnmanagedType.U4)]Di2015NewLine    public static extern IntPtr WTSGetActiveConsoleSessionId();Di2015NewLineDi2015NewLine    [DllImport("advapi32.dll")]Di2015NewLine    public static extern IntPtr SetTokenInformation(IntPtr TokenHandle, IntPtr TokenInformationClass, IntPtr TokenInformation, IntPtr TokenInformationLength);Di2015NewLineDi2015NewLineDi2015NewLine    [DllImport("wtsapi32.dll", SetLastError = true)]Di2015NewLine    public static extern bool WTSQueryUserToken(uint sessionId, out IntPtr Token);Di2015NewLineDi2015NewLine    private static int getCurrentUserSessionID()Di2015NewLine    {Di2015NewLine        uint dwSessionId = (uint)WTSGetActiveConsoleSessionId();Di2015NewLineDi2015NewLine        //Gets the ID of the User logged in with WinLogOnDi2015NewLine        Process[] processes = Process.GetProcessesByName("winlogon");Di2015NewLine        foreach (Process p in processes)Di2015NewLine        {Di2015NewLine            if ((uint)p.SessionId == dwSessionId)Di2015NewLine            {Di2015NewLineDi2015NewLine                //this is the process controlled by the same sessionIDDi2015NewLine                return p.SessionId; Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return -1;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Actually calls and creates the application.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="filename"></param>Di2015NewLine    /// <param name="args"></param>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static Process CreateProcessAsUser(string filename, string args)Di2015NewLine    {Di2015NewLine        //var replaces IntPtrDi2015NewLine        var hToken = WindowsIdentity.GetCurrent().Token; //gets Security Token of Current User.Di2015NewLineDi2015NewLineDi2015NewLine        var hDupedToken = IntPtr.Zero;Di2015NewLineDi2015NewLine        var pi = new PROCESS_INFORMATION();Di2015NewLine        var sa = new SECURITY_ATTRIBUTES();Di2015NewLine        sa.Length = Marshal.SizeOf(sa);Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (!DuplicateTokenEx(Di2015NewLine                    hToken,Di2015NewLine                    GENERIC_ALL_ACCESS,Di2015NewLine                    ref sa,Di2015NewLine                    (int)SECURITY_IMPERSONATION_LEVEL.SecurityIdentification,Di2015NewLine                    (int)TOKEN_TYPE.TokenPrimary,Di2015NewLine                    ref hDupedTokenDi2015NewLine                ))Di2015NewLine                throw new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine            var si = new STARTUPINFO();Di2015NewLine            si.cb = Marshal.SizeOf(si);Di2015NewLine            si.lpDesktop = "";Di2015NewLineDi2015NewLine            var path = Path.GetFullPath(filename);Di2015NewLine            var dir = Path.GetDirectoryName(path);Di2015NewLineDi2015NewLine            //TestingDi2015NewLine            uint curSessionid = (uint)ApplicationLoader.getCurrentUserSessionID();Di2015NewLineDi2015NewLine            if (!WTSQueryUserToken(curSessionid,out hDupedToken))Di2015NewLine            {Di2015NewLine                throw new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine            }Di2015NewLineDi2015NewLine            // Revert to self to create the entire process; not doing this mightDi2015NewLine            // require that the currently impersonated user has "Replace a processDi2015NewLine            // level token" rights - we only want our service account to needDi2015NewLine            // that right.Di2015NewLine            using (var ctx = WindowsIdentity.Impersonate(IntPtr.Zero))Di2015NewLine            {Di2015NewLine                if (!CreateProcessAsUser(Di2015NewLine                                        hDupedToken,Di2015NewLine                                        path,Di2015NewLine                                        string.Format("\\"{0}\\" {1}", filename.Replace("\\"", "\\"\\""), args),Di2015NewLine                                        ref sa, ref sa,Di2015NewLine                                        false, CREATE_NO_WINDOW, IntPtr.Zero,Di2015NewLine                                        dir, ref si, ref piDi2015NewLine                                ))Di2015NewLine                    throw new Win32Exception(Marshal.GetLastWin32Error());Di2015NewLine            }Di2015NewLineDi2015NewLine            return Process.GetProcessById(pi.dwProcessID);Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            if (pi.hProcess != IntPtr.Zero)Di2015NewLine                CloseHandle(pi.hProcess);Di2015NewLine            if (pi.hThread != IntPtr.Zero)Di2015NewLine                CloseHandle(pi.hThread);Di2015NewLine            if (hDupedToken != IntPtr.Zero)Di2015NewLine                CloseHandle(hDupedToken);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19844903Di2015UniqueSeparator<table>Di2015NewLine        <tr>Di2015NewLine            @foreach (DtoPaymentPlan item in List)Di2015NewLine            {Di2015NewLine                <td>@item.Date</td>Di2015NewLine            }Di2015NewLine        </tr>Di2015NewLine        <tr>Di2015NewLine            @foreach (DtoPaymentPlan item in List)Di2015NewLine            {Di2015NewLine                <td>@item.Description </td>Di2015NewLine            }Di2015NewLine        </tr>Di2015NewLine        <tr>Di2015NewLine            @foreach (DtoPaymentPlan item in List)Di2015NewLine            {Di2015NewLine                <td>Di2015NewLine                    @for (int i = 0; i < item.Docs.Count; i++)Di2015NewLine                    {Di2015NewLine                        @item.Docs[i]+" " + i.ToString();Di2015NewLine                    }Di2015NewLineDi2015NewLine                </td>Di2015NewLineDi2015NewLineDi2015NewLine            }Di2015NewLine        </tr>Di2015NewLine        <tr>Di2015NewLine            @foreach (DtoPaymentPlan item in List)Di2015NewLine            {Di2015NewLine                <td>@item.Total </td>Di2015NewLineDi2015NewLineDi2015NewLine            }Di2015NewLine        </tr>Di2015NewLine    </table>Di2015NewLine
19844923Di2015UniqueSeparatorr.Email
19844923Di2015UniqueSeparatorr => (r.Email == null ? false : r.Email.Contains(query))Di2015NewLine
19844962Di2015UniqueSeparatorpublic SelectRouteSegmentDialog()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    LineComboBox.Items.Filter += FilterPredicate;Di2015NewLine}Di2015NewLineDi2015NewLineprivate bool FilterPredicate(object obj)Di2015NewLine{Di2015NewLine    Line line = obj as Line;Di2015NewLine    if (string.IsNullOrEmpty(LineComboBox.Text)) return true;Di2015NewLineDi2015NewLine    if (line.SearchText != null)Di2015NewLine    {Di2015NewLine        if (line.SearchText.IndexOf(LineComboBox.Text, StringComparison.CurrentCultureIgnoreCase) >= 0)Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //if the string is null, return falseDi2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void combobox_KeyUp(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if ((e.Key == Key.Enter) || (e.Key == Key.Tab) || (e.Key == Key.Return))Di2015NewLine    {Di2015NewLine        //Formatting optionsDi2015NewLine        LineComboBox.Items.Filter = null;Di2015NewLine    }Di2015NewLine    else if ((e.Key == Key.Down) || (e.Key == Key.Up))Di2015NewLine    {Di2015NewLine        LineComboBox.IsDropDownOpen = true;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        LineComboBox.IsDropDownOpen = true;Di2015NewLine        LineComboBox.Items.Filter += this.FilterPredicate;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19844962Di2015UniqueSeparator   <ComboBox ItemsSource="{Binding AllLines, Mode=OneWay}" Grid.Column="1" SelectedItem="{Binding SelectedLine}" Margin="4"Di2015NewLine             Visibility="{Binding ShowLines, Converter={StaticResource BoolToVisible}}" AlternationCount="2"Di2015NewLine              IsEditable="True" TextSearch.TextPath="SearchText" IsTextSearchEnabled="False"Di2015NewLine              ItemContainerStyle="{StaticResource alternatingWithTriggers}" x:Name="LineComboBox" KeyUp="combobox_KeyUp">Di2015NewLine        <ComboBox.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <StackPanel Orientation="Vertical">Di2015NewLine                    <TextBlock Margin="2,0,2,0" FontWeight="Bold" Text="{Binding DisplayText}"Di2015NewLine                               Visibility="{Binding Description, Converter={StaticResource NullVisibilityConverter}}"></TextBlock>Di2015NewLine                    <TextBlock Margin="2,2,2,4" Text="{Binding Designator}"></TextBlock>Di2015NewLine                </StackPanel>Di2015NewLine            </DataTemplate>Di2015NewLine        </ComboBox.ItemTemplate>                Di2015NewLine    </ComboBox>Di2015NewLine
19844964Di2015UniqueSeparatorforeach
19844964Di2015UniqueSeparator    private static void ReadAllFilesStartingFromDirectory(string topLevelDirectory)Di2015NewLine    {Di2015NewLine        const string searchPattern = "*.txt";Di2015NewLine        var subDirectories = Directory.EnumerateDirectories(topLevelDirectory);Di2015NewLine        var filesInDirectory = Directory.EnumerateFiles(topLevelDirectory, searchPattern);Di2015NewLineDi2015NewLine        foreach (var subDirectory in subDirectories)Di2015NewLine        {Di2015NewLine            ReadAllFilesStartingFromDirectory(subDirectory);//recursionDi2015NewLine        }Di2015NewLineDi2015NewLine        IterateFiles(filesInDirectory, topLevelDirectory);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void IterateFiles(IEnumerable<string> files, string directory)Di2015NewLine    {Di2015NewLine        foreach (var file in files)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}", Path.Combine(directory, file));//for verificationDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                string[] lines = File.ReadAllLines(file);Di2015NewLine                foreach (var line in lines)Di2015NewLine                {Di2015NewLine                    //Console.WriteLine(line);   Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (IOException ex)Di2015NewLine            {Di2015NewLine                //Handle File may be in use...                    Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19845015Di2015UniqueSeparatorclass CircleDi2015NewLine{Di2015NewLine    private double radius;Di2015NewLineDi2015NewLine    public Circle(double radius)Di2015NewLine    {Di2015NewLine        this.radius = radius;Di2015NewLine    }Di2015NewLineDi2015NewLine    public double AreaDi2015NewLine    {Di2015NewLine        get { return Math.PI * Math.Pow(radius, 2); }    Di2015NewLine    }Di2015NewLine}Di2015NewLine
19845136Di2015UniqueSeparatorMp3.Initialize()
19845136Di2015UniqueSeparatorMp3
19845136Di2015UniqueSeparatorprivate static List<Mp3Player> players = new List<Mp3Player>();Di2015NewLineDi2015NewLinestatic Mp3() Di2015NewLine{Di2015NewLine    Initialize();Di2015NewLine}Di2015NewLineDi2015NewLine// This can be private now...Di2015NewLineprivate static void Initialize()Di2015NewLine{Di2015NewLine     ....Di2015NewLine
19845136Di2015UniqueSeparatorArrayList
19845136Di2015UniqueSeparatorList<Mp3Player>
19845289Di2015UniqueSeparatorlives1
19845289Di2015UniqueSeparator0
19845289Di2015UniqueSeparatorlives1
19845289Di2015UniqueSeparator0
19845289Di2015UniqueSeparatorcurrentTag == "a_large"
19845289Di2015UniqueSeparatortrue
19845289Di2015UniqueSeparatorcurrentTag
19845289Di2015UniqueSeparatorcurrentTag
19845289Di2015UniqueSeparatora_large
19845289Di2015UniqueSeparatorlives1
19845289Di2015UniqueSeparatorcurrentTag
19845289Di2015UniqueSeparatora_large
19845289Di2015UniqueSeparatorlives1 <= 0
19845289Di2015UniqueSeparatorif( lives1 == 0 )
19845289Di2015UniqueSeparatorlives1
19845289Di2015UniqueSeparator0
19845359Di2015UniqueSeparatorif (!character.Moving) return; // Or just don't execute the rest of this code.Di2015NewLinecharacter.position += character.speed * elapsedSeconds;Di2015NewLinecharacter.timeToArrival -= elapsedSeconds;Di2015NewLine// Did the character arrive in a tile?Di2015NewLineif (character.timeToArrival <= 0)Di2015NewLine{Di2015NewLine  // This will ensure the character is precisely in the tile, not a few pixels veered off.Di2015NewLine  character.position = character.movingToTile.position; Di2015NewLine  if (character.Path.Count == 0)Di2015NewLine  {Di2015NewLine    character.Moving = false;Di2015NewLine    // We are at final destination.Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine    character.beginMovingToTarget(character.Path[0]);Di2015NewLine    character.Path.RemoveAt(0);Di2015NewLine  }Di2015NewLine}Di2015NewLine
19845359Di2015UniqueSeparatorthis.movingToTile = targetTile;Di2015NewLineVector2 direction;Di2015NewLinedirection = targetTile.position - this.position;Di2015NewLinethis.timeToArrival = direction.Length() / this.speedPerSeconds;Di2015NewLinedirection.Normalize();Di2015NewLinedirection *= this.speedPerSeconds;Di2015NewLinethis.speed = direction;Di2015NewLine// Here, you may also want to change the character's animation, if you want to, or you may do that directly in the Draw() method based on its speed vector.Di2015NewLine
19845407Di2015UniqueSeparatorapp.UseCookieAuthentication(new CookieAuthenticationOptionsDi2015NewLine{Di2015NewLine   AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,Di2015NewLine   LoginPath = new PathString("/Account/Login"),Di2015NewLine   Provider = new CookieAuthenticationProviderDi2015NewLine   {Di2015NewLine      OnApplyRedirect = ctx =>Di2015NewLine      {Di2015NewLine         if (!IsAjaxRequest(ctx.Request))Di2015NewLine         {Di2015NewLine            ctx.Response.Redirect(ctx.RedirectUri);Di2015NewLine         }Di2015NewLine     }Di2015NewLine   }Di2015NewLine});Di2015NewLine
19845430Di2015UniqueSeparatorCellStyle
19845430Di2015UniqueSeparatorDataGridCell
19845430Di2015UniqueSeparatorTextBlock
19845430Di2015UniqueSeparatorDataGrid CellStyle
19845430Di2015UniqueSeparatorDataGridTextColumn CellStyle
19845430Di2015UniqueSeparator     <DataGrid>Di2015NewLine        <DataGrid.CellStyle>Di2015NewLine            <Style TargetType="DataGridCell">Di2015NewLine                <Style.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding MyViewModel.Modified}"Di2015NewLine                                 Value="True">Di2015NewLine                        <Setter Property="Background" Value="Yellow"/>Di2015NewLine                    </DataTrigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine        </DataGrid.CellStyle>Di2015NewLine    </DataGrid>Di2015NewLine
19845430Di2015UniqueSeparator     <DataGrid>Di2015NewLine        <DataGrid.Columns>Di2015NewLine            <DataGridTextColumn Binding="{Binding Name}">Di2015NewLine                <DataGridTextColumn.CellStyle>Di2015NewLine                    <Style TargetType="DataGridCell">Di2015NewLine                        <Style.Triggers>Di2015NewLine                            <DataTrigger Binding="{Binding MyViewModel.Modified}" Di2015NewLine                                         Value="True">Di2015NewLine                                <Setter Property="Background" Value="Yellow"/>Di2015NewLine                            </DataTrigger>Di2015NewLine                        </Style.Triggers>Di2015NewLine                    </Style>Di2015NewLine                </DataGridTextColumn.CellStyle>Di2015NewLine            </DataGridTextColumn>Di2015NewLine        </DataGrid.Columns>Di2015NewLine    </DataGrid>Di2015NewLine
19845497Di2015UniqueSeparatorInclude
19845497Di2015UniqueSeparatorInterests
19845497Di2015UniqueSeparatorUsers
19845497Di2015UniqueSeparatorvar query = from user in db.UsersDi2015NewLine    join interest in db.Interests.Where(s => s.TenantId == tenantId)Di2015NewLine    on user.InterestId equals interest.Id //todo:  will need to be updatedDi2015NewLine    into interests;Di2015NewLine    select new { user, interests};Di2015NewLine
19845858Di2015UniqueSeparatorDEALER
19845858Di2015UniqueSeparatorinproc
19845858Di2015UniqueSeparatorDEALER
19845858Di2015UniqueSeparatorinproc
19845858Di2015UniqueSeparatorROUTER
19845858Di2015UniqueSeparatorDEALER
19845980Di2015UniqueSeparatorvar paramExp = Expression.Parameter(typeof(IDataRecord), "o7thDR");Di2015NewLineDi2015NewLinevar loopIncrementVariableExp = Expression.Parameter(typeof(int), "i");Di2015NewLinevar columnNamesExp = Expression.Parameter(typeof(List<string>), "columnNames");Di2015NewLineDi2015NewLinevar columnCountExp = Expression.Property(paramExp, "FieldCount");Di2015NewLinevar getColumnNameExp = Expression.Call(paramExp, "GetName", Type.EmptyTypes, Di2015NewLine    Expression.PostIncrementAssign(loopIncrementVariableExp));Di2015NewLinevar addToListExp = Expression.Call(columnNamesExp, "Add", Type.EmptyTypes, Di2015NewLine    getColumnNameExp);Di2015NewLinevar labelExp = Expression.Label(columnNamesExp.Type);Di2015NewLineDi2015NewLinevar getColumnNamesExp = Expression.Block(Di2015NewLine    new[] { loopIncrementVariableExp, columnNamesExp },Di2015NewLine    Expression.Assign(columnNamesExp, Expression.New(columnNamesExp.Type)),Di2015NewLine    Expression.Loop(Di2015NewLine        Expression.IfThenElse(Di2015NewLine            Expression.LessThan(loopIncrementVariableExp, columnCountExp),Di2015NewLine            addToListExp,Di2015NewLine            Expression.Break(labelExp, columnNamesExp)),Di2015NewLine        labelExp));Di2015NewLine
19845980Di2015UniqueSeparatorList<string> columnNames = new List<string>();Di2015NewLinefor (int i = 0; i < reader.FieldCount; i++)Di2015NewLine{Di2015NewLine    columnNames.Add(reader.GetName(i));Di2015NewLine}Di2015NewLine
19845980Di2015UniqueSeparatorDictionary<Type, IEnumerable<string>>
19845980Di2015UniqueSeparatorreader[notInTheQueryButOnlyInTheTableColumn]
19845980Di2015UniqueSeparatorprivate static List<string> columnNames;Di2015NewLineDi2015NewLineprivate static Action<IDataReader, T> GetMapFunc()Di2015NewLine{Di2015NewLine    var exps = new List<Expression>();Di2015NewLineDi2015NewLine    var paramExp = Expression.Parameter(typeof(IDataRecord), "o7thDR");Di2015NewLine    var targetExp = Expression.Parameter(typeof(T), "o7thTarget");Di2015NewLineDi2015NewLine    var getPropInfo = typeof(IDataRecord).GetProperty("Item", new[] { typeof(string) });Di2015NewLineDi2015NewLine    foreach (var columnName in columnNames)Di2015NewLine    {Di2015NewLine        var property = typeof(T).GetProperty(columnName);Di2015NewLine        if (property == null)Di2015NewLine            continue;Di2015NewLineDi2015NewLine        // use 'columnName' instead of 'property.Name' to speed up reader lookupsDi2015NewLine        //in case of certain readers.Di2015NewLine        var columnNameExp = Expression.Constant(columnName);Di2015NewLine        var getPropExp = Expression.MakeIndex(Di2015NewLine            paramExp, getPropInfo, new[] { columnNameExp });Di2015NewLine        var castExp = Expression.TypeAs(getPropExp, property.PropertyType);Di2015NewLine        var bindExp = Expression.Assign(Di2015NewLine            Expression.Property(targetExp, property), castExp);Di2015NewLine        exps.Add(bindExp);Di2015NewLine    }Di2015NewLineDi2015NewLine    return Expression.Lambda<Action<IDataReader, T>>(Di2015NewLine        Expression.Block(exps), paramExp, targetExp).Compile();Di2015NewLine}Di2015NewLineDi2015NewLineinternal T CreateItemFromRow(IDataReader dataReader)Di2015NewLine{Di2015NewLine    if (columnNames == null)Di2015NewLine    {Di2015NewLine        columnNames = Enumerable.Range(0, dataReader.FieldCount)Di2015NewLine                                .Select(x => dataReader.GetName(x))Di2015NewLine                                .ToList();Di2015NewLine        _convertAction = (Action<IDataReader, T>)_convertActionMap.GetOrAdd(Di2015NewLine            typeof(T), (t) => GetMapFunc());Di2015NewLine    }Di2015NewLineDi2015NewLine    T result = new T();Di2015NewLine    _convertAction(dataReader, result);Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19845980Di2015UniqueSeparatorprivate IDataReader dataReader;Di2015NewLineDi2015NewLineprivate Action<IDataReader, T> GetMapFunc()Di2015NewLine{Di2015NewLine    var exps = new List<Expression>();Di2015NewLineDi2015NewLine    var paramExp = Expression.Parameter(typeof(IDataRecord), "o7thDR");Di2015NewLine    var targetExp = Expression.Parameter(typeof(T), "o7thTarget");Di2015NewLineDi2015NewLine    var getPropInfo = typeof(IDataRecord).GetProperty("Item", new[] { typeof(string) });Di2015NewLineDi2015NewLine    var columnNames = Enumerable.Range(0, dataReader.FieldCount)Di2015NewLine                                .Select(x => dataReader.GetName(x));Di2015NewLine    foreach (var columnName in columnNames)Di2015NewLine    {Di2015NewLine        var property = typeof(T).GetProperty(columnName);Di2015NewLine        if (property == null)Di2015NewLine            continue;Di2015NewLineDi2015NewLine        // use 'columnName' instead of 'property.Name' to speed up reader lookupsDi2015NewLine        //in case of certain readers.Di2015NewLine        var columnNameExp = Expression.Constant(columnName);Di2015NewLine        var getPropExp = Expression.MakeIndex(Di2015NewLine            paramExp, getPropInfo, new[] { columnNameExp });Di2015NewLine        var castExp = Expression.TypeAs(getPropExp, property.PropertyType);Di2015NewLine        var bindExp = Expression.Assign(Di2015NewLine            Expression.Property(targetExp, property), castExp);Di2015NewLine        exps.Add(bindExp);Di2015NewLine    }Di2015NewLineDi2015NewLine    return Expression.Lambda<Action<IDataReader, T>>(Di2015NewLine        Expression.Block(exps), paramExp, targetExp).Compile();Di2015NewLine}Di2015NewLineDi2015NewLineinternal Converter(IDataReader dataReader)Di2015NewLine{Di2015NewLine    this.dataReader = dataReader;Di2015NewLine    _convertAction = (Action<IDataReader, T>)_convertActionMap.GetOrAdd(Di2015NewLine        typeof(T), (t) => GetMapFunc());Di2015NewLine}Di2015NewLineDi2015NewLineinternal T CreateItemFromRow()Di2015NewLine{Di2015NewLine    T result = new T();Di2015NewLine    _convertAction(dataReader, result);Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19845980Di2015UniqueSeparatorList<T> list = new List<T>();Di2015NewLinevar converter = new Converter<T>(dr);Di2015NewLinewhile (dr.Read())Di2015NewLine{Di2015NewLine    var obj = converter.CreateItemFromRow();Di2015NewLine    list.Add(obj);Di2015NewLine}Di2015NewLine
19845980Di2015UniqueSeparatornew T()
19845980Di2015UniqueSeparatorCreateItemFromRow
19845980Di2015UniqueSeparatorGetProperty
19845980Di2015UniqueSeparatorBindings.Flag
19845980Di2015UniqueSeparatorConcurrentDictionary
19845980Di2015UniqueSeparator<T>
19845980Di2015UniqueSeparatorT
19845980Di2015UniqueSeparatorValue
19845980Di2015UniqueSeparatorConcurrentDictionary
19845980Di2015UniqueSeparatorobject
19845980Di2015UniqueSeparatorAction
19845980Di2015UniqueSeparatorExpression.Convert
19845980Di2015UniqueSeparatorExpression.TypeAs
19845980Di2015UniqueSeparatorobject
19845980Di2015UniqueSeparatorreadonly Func<IDataReader, T> _converter;Di2015NewLinereadonly IDataReader dataReader;Di2015NewLineDi2015NewLineprivate Func<IDataReader, T> GetMapFunc()Di2015NewLine{Di2015NewLine    var exps = new List<Expression>();Di2015NewLineDi2015NewLine    var paramExp = Expression.Parameter(typeof(IDataRecord), "o7thDR");Di2015NewLineDi2015NewLine    var targetExp = Expression.Variable(typeof(T));Di2015NewLine    exps.Add(Expression.Assign(targetExp, Expression.New(targetExp.Type)));Di2015NewLineDi2015NewLine    //does int based lookupDi2015NewLine    var indexerInfo = typeof(IDataRecord).GetProperty("Item", new[] { typeof(int) });Di2015NewLineDi2015NewLine    var columnNames = Enumerable.Range(0, dataReader.FieldCount)Di2015NewLine                                .Select(i => new { i, name = dataReader.GetName(i) });Di2015NewLine    foreach (var column in columnNames)Di2015NewLine    {Di2015NewLine        var property = targetExp.Type.GetProperty(Di2015NewLine            column.name,Di2015NewLine            BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);Di2015NewLine        if (property == null)Di2015NewLine            continue;Di2015NewLineDi2015NewLine        var columnNameExp = Expression.Constant(column.i);Di2015NewLine        var propertyExp = Expression.MakeIndex(Di2015NewLine            paramExp, indexerInfo, new[] { columnNameExp });Di2015NewLine        var convertExp = Expression.Convert(propertyExp, property.PropertyType);Di2015NewLine        var bindExp = Expression.Assign(Di2015NewLine            Expression.Property(targetExp, property), convertExp);Di2015NewLine        exps.Add(bindExp);Di2015NewLine    }Di2015NewLineDi2015NewLine    exps.Add(targetExp);Di2015NewLine    return Expression.Lambda<Func<IDataReader, T>>(Di2015NewLine        Expression.Block(new[] { targetExp }, exps), paramExp).Compile();Di2015NewLine}Di2015NewLineDi2015NewLineinternal Converter(IDataReader dataReader)Di2015NewLine{Di2015NewLine    this.dataReader = dataReader;Di2015NewLine    _converter = GetMapFunc();Di2015NewLine}Di2015NewLineDi2015NewLineinternal T CreateItemFromRow()Di2015NewLine{Di2015NewLine    return _converter(dataReader);Di2015NewLine}Di2015NewLine
19846053Di2015UniqueSeparatorSeed()
19846053Di2015UniqueSeparatorSeed()
19846140Di2015UniqueSeparatorsh@Gmail.com
19846140Di2015UniqueSeparatorsh@gmail.com
19846158Di2015UniqueSeparatorfor (int i =0;i<this.cookies.ToArray().Length;i++)Di2015NewLine
19846158Di2015UniqueSeparatorthis.cookies.toArray().LengthDi2015NewLine
19846165Di2015UniqueSeparatorpublic string NameDi2015NewLine{Di2015NewLine    get { return _name; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _name = value;Di2015NewLine        NotifyPropertyChange(() => Name);Di2015NewLine        NotifyPropertyChange(() => SaveEnabled);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic bool SaveEnabledDi2015NewLine{Di2015NewLine    get { return !string.IsNullOrEmpty(_name); }Di2015NewLine}Di2015NewLine
19846165Di2015UniqueSeparator<TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}">...</TextBox>Di2015NewLine
19846183Di2015UniqueSeparatorConsole.WriteLine(table, "Total cost of paint", ":", paintTotalWithVAT, "\\n"); Di2015NewLine
19846231Di2015UniqueSeparatorSystem.DirectoryServices.AccountManagement
19846231Di2015UniqueSeparator// set up domain contextDi2015NewLineusing (PrincipalContext ctx = new PrincipalContext(ContextType.Domain))Di2015NewLine{Di2015NewLine    // find a userDi2015NewLine    UserPrincipal user = UserPrincipal.FindByIdentity(ctx, "SomeUserName");Di2015NewLineDi2015NewLine    if(user != null)Di2015NewLine    {Di2015NewLine       // do something here....     Di2015NewLine    }Di2015NewLineDi2015NewLine    // find the group in questionDi2015NewLine    GroupPrincipal group = GroupPrincipal.FindByIdentity(ctx, "YourGroupNameHere");Di2015NewLineDi2015NewLine    // if found....Di2015NewLine    if (group != null)Di2015NewLine    {Di2015NewLine       // iterate over membersDi2015NewLine       foreach (Principal p in group.GetMembers())Di2015NewLine       {Di2015NewLine           Console.WriteLine("{0}: {1}", p.StructuralObjectClass, p.DisplayName);Di2015NewLine           // do whatever you need to do to those membersDi2015NewLine       }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19846363Di2015UniqueSeparatorTaskCompletionSource
19846363Di2015UniqueSeparatorpublic static Task<IList<IContactInfo>> WhenContactsSelected(Di2015NewLine    this ContactsSelector selector)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<IList<IContactInfo>>();Di2015NewLine    selector.ContactsSelected += (object sender, ContactsSelectorEventArgs e) =>Di2015NewLine    {Di2015NewLine        tcs.TrySetResult(e.Contacts);Di2015NewLine    };Di2015NewLine    return tcs.Task;Di2015NewLine}Di2015NewLine
19846363Di2015UniqueSeparatorpublic Task<IList<IContactInfo>> SelectContacts()Di2015NewLine{Di2015NewLine    ContactsSelector selector = new ContactsSelector();Di2015NewLine    selector.ShowPicker();Di2015NewLineDi2015NewLine    return selector.WhenContactsSelected();Di2015NewLine}Di2015NewLine
19846363Di2015UniqueSeparatorSelectContacts
19846363Di2015UniqueSeparatorawait
19846363Di2015UniqueSeparatorasync
19846363Di2015UniqueSeparatorawait
19846363Di2015UniqueSeparatorWhenContactsSelected
19846363Di2015UniqueSeparatorasync
19846411Di2015UniqueSeparatorOH_\\w+Di2015NewLine
19846411Di2015UniqueSeparator\\w+
19846411Di2015UniqueSeparatorOH_
19846411Di2015UniqueSeparatorOH_(?:(?!OH_)\\w)+Di2015NewLine
19846411Di2015UniqueSeparatorOH_       # Match OH_.Di2015NewLine(?:       # Start of non-capturing group:Di2015NewLine (?!OH_)  # Assert that we're not at the start of the string OH_,Di2015NewLine \\w       # then match an alnum character.Di2015NewLine)+        # Repeat as often as possible.Di2015NewLine
19846537Di2015UniqueSeparatorprotected void Gridview2_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    TextBox txtboxtotal = (TextBox)Gridview2.SelectedRow.FindControl("txtboxtotal");Di2015NewLine    txtboxtotal.Text = (Convert.ToDecimal(txtboxtotal.Text) / 2).ToString();Di2015NewLine}Di2015NewLine
19846561Di2015UniqueSeparatorpublic virtual ValidationResult Validate(ValidationContext<T> context)
19846561Di2015UniqueSeparatorpublic override ValidationResult Validate(Di2015NewLine      ValidationContext<RequiredSourceViewModel> context)Di2015NewLine{Di2015NewLine     var validator = new SourceValidator();Di2015NewLineDi2015NewLine     var source = Di2015NewLine         Mapper.Map<RequiredSourceViewModel, Source>(context.InstanceToValidate);Di2015NewLineDi2015NewLine     return validator.Validate(source);Di2015NewLine }Di2015NewLine
19846561Di2015UniqueSeparatorvalidator.Validate(object)
19846628Di2015UniqueSeparatorDictionary
19846628Di2015UniqueSeparatorclass valuesDi2015NewLine{Di2015NewLine    IDictionary<string, string> list = new Dictionary<string, string>()Di2015NewLine    {Di2015NewLine        { "value1", "one" },Di2015NewLine        { "value2", "two" },Di2015NewLine        { "value3", "three" },Di2015NewLine    };Di2015NewLineDi2015NewLine    private void method()Di2015NewLine    {Di2015NewLine        foreach(var pair in list)Di2015NewLine        {Di2015NewLine            sqlCommand.Parameters.AddWithValue("@"+pair.Key, pair.Value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19846639Di2015UniqueSeparatorBookmarks -> Tags -> TagDi2015NewLine
19846639Di2015UniqueSeparatorCustomers -> AddressesDi2015NewLine          -> EmailsDi2015NewLine
19846639Di2015UniqueSeparatorselect *Di2015NewLinefromDi2015NewLine    Customer cDi2015NewLine    left outer join CustomerAddress aDi2015NewLine        on c.Id = a.Customer_idDi2015NewLine    left outer join CustomerEmail eDi2015NewLine        on c.Id = e.Customer_idDi2015NewLinewhere c.Id = 12345Di2015NewLine
19846639Di2015UniqueSeparator5 * 5 = 25
19846639Di2015UniqueSeparatorTagsBookmarksCount + BookmarksThatDontHaveTagsCount
19846639Di2015UniqueSeparatorFuture
19846685Di2015UniqueSeparatorpublic Task<bool> MyTask()Di2015NewLine{Di2015NewLine    return TaskEx.FromResult(false);Di2015NewLine}Di2015NewLine
19846750Di2015UniqueSeparatorweb.config
19846750Di2015UniqueSeparator<system.serviceModel> / <services> / <service>
19846750Di2015UniqueSeparatorweb.config
19846750Di2015UniqueSeparator<system.serviceModel>
19846750Di2015UniqueSeparator<service name="...." />
19846750Di2015UniqueSeparator<service>
19846750Di2015UniqueSeparator<system.serviceModel>Di2015NewLine   <services>Di2015NewLine      <service name="NameSpace.YourServiceImplementationClass>Di2015NewLine          <endpoint name="DefaultEndpoint"Di2015NewLine              address=""   -- no need to specify if you're hosting in IISDi2015NewLine              binding="basicHttpBinding"   -- defines the protocol to use to talk to your endpointDi2015NewLine              contract="NameSpace.IYourServiceContract" />Di2015NewLine      </service> Di2015NewLine   </services>Di2015NewLine</system.serviceModel>Di2015NewLine
19847219Di2015UniqueSeparatorIEnumerable
19847219Di2015UniqueSeparatorIEnumerable<T>
19847219Di2015UniqueSeparatorIEnumerable e = obj as IEnumerable;Di2015NewLineif (e != null)Di2015NewLine   count = e.Cast<object>.Count();Di2015NewLine
19847347Di2015UniqueSeparatorouterLoop: // This is a label for the outer loopDi2015NewLinewhile (true) {Di2015NewLine    innerLoop: // This is a label for the inner loopDi2015NewLine    while (true) {Di2015NewLine        // Rather than exiting the inner loop (which is what a plain break wouldDi2015NewLine        // do), this exits the outer loopDi2015NewLine        break outerLoop;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19847347Di2015UniqueSeparatorExpression.Loop
19847347Di2015UniqueSeparatorExpression.Break(label, result)
19847347Di2015UniqueSeparatorExpression.Block
19847347Di2015UniqueSeparatorresult
19847347Di2015UniqueSeparatorExpression.Assign
19847347Di2015UniqueSeparator{                      // Expression.Block(Di2015NewLine    int result;        //   new[] { result },Di2015NewLine    result = 1;        //   Expression.Assign(result, Expression.Constant(1)),Di2015NewLine    while (true)       //   Expression.Loop(Di2015NewLine    {                  Di2015NewLine        if (value > 1) //     Expression.IfThenElse(Di2015NewLine        {              //       Expression.GreaterThan(value, Expression.Constant(1)),Di2015NewLine            result *=  //       Expression.MultiplyAssign(result,Di2015NewLine              value--; //       Expression.PostDecrementAssign(value)),Di2015NewLine        }Di2015NewLine        else             Di2015NewLine        {Di2015NewLine            break;     //       Expression.Break(label, result)Di2015NewLine        }              //     ),Di2015NewLine    }                  //   label)Di2015NewLine}                      // )Di2015NewLine
19847425Di2015UniqueSeparatorIAsyncResult
19847425Di2015UniqueSeparatorSocket.BeginReceive
19847425Di2015UniqueSeparatorEndReceive
19847447Di2015UniqueSeparator.Where(...)
19847447Di2015UniqueSeparator.Where(...)
19847447Di2015UniqueSeparatorif (Tonnage.IsChecked.HasValue && Tonnage.IsChecked.Value)Di2015NewLine{Di2015NewLine    query = query.Where(s => s.Tons != "0" && s.Tons != "")Di2015NewLine}Di2015NewLineDi2015NewLineif (null != FilterWaterWay.SelectedValue)Di2015NewLine{Di2015NewLine    string WaterwaytoFilterBy = FilterWaterWay.SelectedValue.ToString();Di2015NewLineDi2015NewLine    if (!string.IsNullOrWhiteSpace(WaterwaytoFilterBy) && WaterwaytoFilterBy != "[Select WaterWay]")Di2015NewLine    {Di2015NewLine         query = query.Where(s => s.WTWY_NAME == WaterwaytoFilterBy);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineif (null != FilterState.SelectedValue)Di2015NewLine{Di2015NewLine    string StateToFilterBy = FilterState.SelectedValue.ToString();Di2015NewLineDi2015NewLine    if (null != FilterState.SelectedValue && !string.IsNullOrWhiteSpace(StateToFilterBy) && StateToFilterBy != "[Select State]")Di2015NewLine    {Di2015NewLine         query = query.Where(s => s.STATE == StateToFilterBy);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19847447Di2015UniqueSeparatorquery = query.Where(s => s.Tons != "0" && s.Tons != "")Di2015NewLine             .Where(s => s.WTWY_NAME == WaterwaytoFilterBy)Di2015NewLine             .Where(s => s.STATE == StateToFilterBy)Di2015NewLine
19847471Di2015UniqueSeparatorIDisposable
19847471Di2015UniqueSeparatorDispose
19847643Di2015UniqueSeparatorstring numbers = "11,12,15,16,55,33,88,100,121,155,115";Di2015NewLinenumbers = string.Join(",", numbers.Split(',').Where(num => num != "16"));Di2015NewLine
19847643Di2015UniqueSeparatorList<int>
19847742Di2015UniqueSeparatorX509Certificate[] X509Certificates = { certificate };Di2015NewLineX509CertificateCollection certsCollection = new X509CertificateCollection(X509Certificates);Di2015NewLineDi2015NewLinesslStream.AuthenticateAsClient(address, certsCollection, SslProtocols.Default, false);Di2015NewLine
19847742Di2015UniqueSeparator  public static bool ValidateCertificate(Di2015NewLine   object sender,Di2015NewLine   X509Certificate certificate,Di2015NewLine   X509Chain chain,Di2015NewLine   SslPolicyErrors errors)Di2015NewLine   {Di2015NewLine        if (errors == SslPolicyErrors.None)Di2015NewLine            return true;Di2015NewLine        if (certificate != null)Di2015NewLine        {Di2015NewLine            string SendingCertificateName = "";Di2015NewLine            //List<string> Subject = CommaText(certificate.Subject); // decode commalistDi2015NewLine            // SendingCertificateName = ExtractNameValue(Subject, "CN"); // get the CN= valueDi2015NewLine            report = string.Format(CultureInfo.InvariantCulture, "certificatename : {0}, SerialNumber: {1}, {2}, {3}", certificate.Subject, certificate.GetSerialNumberString(), SendingCertificateName, ServerName);Di2015NewLine            Console.WriteLine(report);Di2015NewLine         }Di2015NewLineDi2015NewLine         Console.WriteLine("Certificate error: {0}", errors);Di2015NewLine         int allow = AllowPolicyErrors << 1;  // AllowPolicyErrors property allowing you to pass certain errorsDi2015NewLine         return (allow & (int)sslPolicyErrors) == (int)sslPolicyErrors;  // or just True if you dont't mind.Di2015NewLine    }Di2015NewLine
19847877Di2015UniqueSeparatornamespace ClickAppearBallsDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        private Random randClick;Di2015NewLine        private Graphics paper;Di2015NewLine        private Pen pen;Di2015NewLine        private int circleSize = 30;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            randClick = new Random();Di2015NewLine            paper = picCanvas.CreateGraphics();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private void picCanvas_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            int x, y;Di2015NewLineDi2015NewLine            x = picCanvas.Height / 2;Di2015NewLine            y = picCanvas.Width / 2;Di2015NewLineDi2015NewLine            Color color = Color.FromArgb(randClick.Next(0, 256), randClick.Next(0, 256), randClick.Next(0, 256));Di2015NewLine            Pen pen = new Pen(color);Di2015NewLine            pen.Width = 3;Di2015NewLine            paper.DrawEllipse(pen, x - circleSize/2, y - circleSize/2, circleSize, circleSize);Di2015NewLineDi2015NewLine            circleSize += 10; // increase size hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19847963Di2015UniqueSeparatorvar a = db.NamesToGet.Select(e=>e.Names);Di2015NewLine
19847968Di2015UniqueSeparatorBeginInvoke
19847968Di2015UniqueSeparator// usingDi2015NewLineobject syncObj = new object();Di2015NewLinebool operationPending = false;Di2015NewLineDi2015NewLinewhile (operation)Di2015NewLine{Di2015NewLine   // ... Do workDi2015NewLineDi2015NewLine   // Update, but only if there isn't a pending updateDi2015NewLine   lock(syncObj)Di2015NewLine   {Di2015NewLine       if (!operationPending)Di2015NewLine       {Di2015NewLine           operationPending = true;Di2015NewLine           control.BeginInvoke(new Action( () =>Di2015NewLine           {Di2015NewLine               // Update gaugesDi2015NewLineDi2015NewLine               lock(syncObj)Di2015NewLine                  operationPending = false;Di2015NewLine           }));Di2015NewLine       }Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLine// Update at the end (since you're last update might have been skipped)Di2015NewLinecontrol.Invoke(new Action(UpdateGuagesCompleted));Di2015NewLine
19847968Di2015UniqueSeparatorwhile (operation)Di2015NewLine{Di2015NewLine    int pendingOperations = 0;Di2015NewLine    // ... Do workDi2015NewLineDi2015NewLine    // Update, but only if there isn't a pending updateDi2015NewLine    if (0 == Interlocked.CompareExchange(ref pendingOperations, 1, 0))Di2015NewLine    {Di2015NewLine        control.BeginInvoke(new Action( () =>Di2015NewLine        {   Di2015NewLine            // Update gaugesDi2015NewLineDi2015NewLine            // Restore, so the next UI update can occurDi2015NewLine            Interlocked.Decrement(ref pendingOperations);Di2015NewLine        }));Di2015NewLine    }       Di2015NewLine}Di2015NewLineDi2015NewLine// Update at the end (since you're last update might have been skipped)Di2015NewLinecontrol.Invoke(new Action(UpdateGuagesCompleted));Di2015NewLine
19848063Di2015UniqueSeparatorToList()
19848063Di2015UniqueSeparatorToList()
19848063Di2015UniqueSeparatorParalelosSeleccionadosTempDi2015NewLine    .ForEach(p => p.Horarios.ToList()Di2015NewLine        .ForEach(q => q.DetallesHorarioDi2015NewLine            .RemoveAll(x => feriados.Contains(x.Fecha.Value))));Di2015NewLine
19848063Di2015UniqueSeparatorDetallesHorario
19848063Di2015UniqueSeparatorList<T>
19848063Di2015UniqueSeparatorHorarios
19848063Di2015UniqueSeparatorList<T>
19848063Di2015UniqueSeparatorToList()
19848076Di2015UniqueSeparator$('#Close').click(function () {Di2015NewLine  window.history.back();Di2015NewLine});Di2015NewLine
19848174Di2015UniqueSeparatorXmlElementAttribute
19848174Di2015UniqueSeparator[XmlElement("Violation")]Di2015NewLinepublic List<Violation> Violations {get;set;}Di2015NewLine
19848265Di2015UniqueSeparatorOwinContext owinContext = (OwinContext)webapiHttpRequestMessage.Properties["MS_OwinContext"];Di2015NewLinestring ipaddress = owinContext.Request.RemoteIpAddress;Di2015NewLine
19848356Di2015UniqueSeparatorb
19848356Di2015UniqueSeparatorA
19848356Di2015UniqueSeparatortest<A>(b);Di2015NewLine
19848356Di2015UniqueSeparatorb
19848356Di2015UniqueSeparatorB
19848356Di2015UniqueSeparatordynamic
19848356Di2015UniqueSeparatordynamic b = new B();Di2015NewLinetest(b);Di2015NewLine
19848360Di2015UniqueSeparatorDROP TABLE IF EXISTS sakila.testtable;Di2015NewLine
19848514Di2015UniqueSeparatorSum
19848514Di2015UniqueSeparatorselect
19848514Di2015UniqueSeparatoritems.PasO
19848514Di2015UniqueSeparatorvar load = (from items in myEntities.OrdersDi2015NewLineselect (long)(items.PayO)).DefaultIfEmpty(0).Sum();Di2015NewLine
19848514Di2015UniqueSeparatorDefaultIfEmpty
19848514Di2015UniqueSeparatorlong
19848514Di2015UniqueSeparatorSum
19848530Di2015UniqueSeparatorprivate async void buttonclick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string htmlPage = await login(url, id, pw);Di2015NewLine}Di2015NewLine
19848530Di2015UniqueSeparatorlogin
19848530Di2015UniqueSeparatorTask<string> _pendingLogin = null;Di2015NewLineprivate async void buttonclick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (_pendingLogin != null)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Login pending...");Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        _pendingLogin = login(url, id, pw);Di2015NewLine        string htmlPage = await _pendingLogin;Di2015NewLine        MessageBox.Show("Logged in: " + htmlPage);Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Error in login: " + ex.Message);Di2015NewLine    }Di2015NewLineDi2015NewLine    _pendingLogin = null;Di2015NewLine}Di2015NewLine
19848595Di2015UniqueSeparatorDataContext
19848595Di2015UniqueSeparatorpublic event EventHandler<NotificationEventArgs<string>> DoSomething;Di2015NewLine...Di2015NewLineNotify(DoSomething, new NotificationEventArgs<string>("Message"));Di2015NewLine
19848595Di2015UniqueSeparatorvar vm = DataContext as SomeViewModel; //Get VM from view's DataContextDi2015NewLineif (vm == null) return; //Check if conversion succeededDi2015NewLinevm.DoSomethingNotice += DoSomething; // Subscribe to eventDi2015NewLineDi2015NewLineprivate void DoSomething(object sender, NotificationEventArgs<string> e)Di2015NewLine{Di2015NewLine    // Code    Di2015NewLine}Di2015NewLine
19848708Di2015UniqueSeparatorType attrType = typeof (SerializableAttribute);Di2015NewLineproperties.Where(p => p.IsDefined(attrType));Di2015NewLine
19848708Di2015UniqueSeparatorproperties.Where(p => p.CustomAttributes.Any(Di2015NewLine    attr => attr.AttributeType.Name == "SomeAttribute"));Di2015NewLine
19848708Di2015UniqueSeparatorType
19848708Di2015UniqueSeparatorvar attributeType = entryAssembly.GetTypes()Di2015NewLine                                    .FirstOrDefault(t => t.Name == "SomeAttribute");Di2015NewLineDi2015NewLineif (attributeType != null)Di2015NewLine{Di2015NewLine    //the assembly contains the typeDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //type was not foundDi2015NewLine}Di2015NewLine
19848708Di2015UniqueSeparatorType
19848733Di2015UniqueSeparatorMouseClick
19848733Di2015UniqueSeparatorX
19848733Di2015UniqueSeparatorY
19848733Di2015UniqueSeparatorMouseEventArgs
19848733Di2015UniqueSeparatorprivate void picCanvas_MouseClick(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    int x, y;Di2015NewLineDi2015NewLine    x = picCanvas.Height / 2;Di2015NewLine    y = picCanvas.Width / 2;Di2015NewLineDi2015NewLine    Color color = Color.FromArgb(randClick.Next(0, 256), randClick.Next(0, 256), randClick.Next(0, 256));Di2015NewLine    Pen pen = new Pen(color);Di2015NewLine    pen.Width = 3;Di2015NewLineDi2015NewLine    circleSize += 10;Di2015NewLine    paper.DrawEllipse(pen, e.X - circleSize / 2, e.Y - circleSize / 2, circleSize, circleSize);Di2015NewLine}Di2015NewLine
19848790Di2015UniqueSeparatorEquals()
19848796Di2015UniqueSeparator// the queueDi2015NewLineprivate BlockingCollection<Message> MessagesQueue = new BlockingCollection<Message>();Di2015NewLineDi2015NewLineDi2015NewLine// the consumerDi2015NewLineprivate MessageParser()Di2015NewLine{Di2015NewLine    foreach (var msg in MessagesQueue.GetConsumingEnumerable())Di2015NewLine    {Di2015NewLine        var parsedMessage = ParseMessage(msg);Di2015NewLine        // do something with the parsed messageDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// In your main programDi2015NewLine// start the consumerDi2015NewLinevar consumer = Task.Factory.StartNew(() => MessageParser(),Di2015NewLine    TaskCreationOptions.LongRunning);Di2015NewLineDi2015NewLine// the main loopDi2015NewLinewhile (messageAvailable)Di2015NewLine{Di2015NewLine    var msg = GetMessageFromTcp();Di2015NewLine    // add it to the queueDi2015NewLine    MessagesQueue.Add(msg);Di2015NewLine}Di2015NewLineDi2015NewLine// done receiving messagesDi2015NewLine// tell the consumer that no more messages will be addedDi2015NewLineMessagesQueue.CompleteAdding();Di2015NewLineDi2015NewLine// wait for consumer to finishDi2015NewLineconsumer.Wait();Di2015NewLine
19848811Di2015UniqueSeparator@try
19848811Di2015UniqueSeparator@catch
19848811Di2015UniqueSeparator@finally
19848811Di2015UniqueSeparator@catch
19848811Di2015UniqueSeparatorMyConnection * connection = [ConnectionPool ConnectionWithDetails: @"host/server/port/etc"];Di2015NewLine@try {Di2015NewLine    [connection doSomething];Di2015NewLine}Di2015NewLine@finally {Di2015NewLine    [ConnectionPool ReleaseConnection: connection];Di2015NewLine}Di2015NewLine
19848811Di2015UniqueSeparator@try
19848811Di2015UniqueSeparator@finally
19848879Di2015UniqueSeparatorvar sought = txtCity.Text.Split(',')[0];Di2015NewLinestring.Join(",", cities.FindAll( s => s.Name == sought ).Select(zi => zi.ZipCode.ToString()));Di2015NewLine
19849034Di2015UniqueSeparatorSQLiteConnection
19849067Di2015UniqueSeparator    public class QuizDi2015NewLine    {Di2015NewLine        public string Question { get; set; }Di2015NewLine        public string Answer { get; set; }Di2015NewLine        private bool isAnswered = false;Di2015NewLine        public bool IsAnsweredDi2015NewLine        {Di2015NewLine            get { return isAnswered; }Di2015NewLine            set { isAnswered = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public Quiz(string question,string answer)Di2015NewLine        {Di2015NewLine            Question = question;Di2015NewLine            Answer = answer;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19849067Di2015UniqueSeparator    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        Dictionary<int, Quiz> questions;Di2015NewLine        Random rand = new Random();Di2015NewLine        int position = 0;Di2015NewLine        int correct = 0;Di2015NewLine        int incorrect = 0;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            btnanswer.Enabled = false;Di2015NewLine            questions = new Dictionary<int, Quiz>()Di2015NewLine            {Di2015NewLine                {0,new Quiz("What year did President Eisenhower become relieved of Presidency?","1982")},Di2015NewLine                {1,new Quiz("What U.S. base was bombed forcing the United States to become involved in World War II","PEARL HARBOR")},Di2015NewLine                {2,new Quiz( "What was the profession of Abraham Lincolns' assassin?","ACTOR")},Di2015NewLine            };Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        private void Form1_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            lblquestion.Text = ("Welcome! In this category of Trivia you will be quizzed on questions about movies, actors/actresses, television shows and more! Press 'Start Trivia' when you are ready");Di2015NewLine            txtanswer.Enabled = false;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void KeepScore()Di2015NewLine        {Di2015NewLine            lblcorrect.Text = "Correct: " + correct;Di2015NewLine            lblincorrect.Text = "Incorrect: " + incorrect;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void txtanswer_TextChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //textbox always return empty string but i placed this hereDi2015NewLine            //so no need to create a variable and let you knowDi2015NewLine            //about other options....Di2015NewLine            if (!string.IsNullOrEmpty(txtanswer.Text))Di2015NewLine            {Di2015NewLine                btnanswer.Enabled = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                btnanswer.Enabled = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void ResetPrompt()Di2015NewLine        {Di2015NewLine            lblquestion.Text = "";Di2015NewLine            txtanswer.Text = "";Di2015NewLine        }Di2015NewLineDi2015NewLine        private void AnalyzeQuestion()Di2015NewLine        {Di2015NewLine            if (string.Equals(txtanswer.Text, questions[position].Answer, StringComparison.CurrentCultureIgnoreCase))Di2015NewLine            {Di2015NewLine                MessageBox.Show("You got this one right!", "Correct!");Di2015NewLine                correct += 1;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                MessageBox.Show("You got this one wrong! the correct answer was " + questions[position].Answer);Di2015NewLine                incorrect += 1;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnanswer_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            AnalyzeQuestion();Di2015NewLine            KeepScore();Di2015NewLine            ResetPrompt();Di2015NewLineDi2015NewLine            if (questions.Values.All(b => b.IsAnswered == true))Di2015NewLine            {Di2015NewLine                ResetAll();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            GetQuestion();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnstart_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            btnstart.Enabled = false;Di2015NewLine            GetQuestion();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void GetQuestion()Di2015NewLine        {Di2015NewLine            position = rand.Next(0, 3);Di2015NewLine            if (questions[position].IsAnswered != true)Di2015NewLine            {Di2015NewLine                questions[position].IsAnswered = true;Di2015NewLine                lblquestion.BackColor = Color.Red;Di2015NewLine                lblquestion.Text = questions[position].Question;Di2015NewLine                txtanswer.Enabled = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                while (questions[position].IsAnswered == true)Di2015NewLine                {Di2015NewLine                    position = rand.Next(0, 3);Di2015NewLine                }Di2015NewLine                questions[position].IsAnswered = true;Di2015NewLine                lblquestion.BackColor = Color.Red;Di2015NewLine                lblquestion.Text = questions[position].Question;Di2015NewLine                txtanswer.Enabled = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void ResetAll()Di2015NewLine        {Di2015NewLine            txtanswer.Enabled = false;Di2015NewLine            btnanswer.Enabled = false;Di2015NewLine            position = 0;Di2015NewLine            foreach (var item in questions.Values)Di2015NewLine            {Di2015NewLine                item.IsAnswered = false;Di2015NewLine            }Di2015NewLine            lblquestion.Text = "Game Over!!!...Please Press Start to Play Again.";Di2015NewLine            btnstart.Enabled = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19849121Di2015UniqueSeparatorstring[,] twoDimentionArray = new string[2, 2] { {"Mike","Amy"}, {"Mary","Albert"} }; Di2015NewLinevar doc = new XDocument();Di2015NewLinevar Couples = new XElement("Couples");Di2015NewLinedoc.Add(Couples);Di2015NewLinefor(int x=0;x<2;x++)Di2015NewLine{Di2015NewLine    var couple= new XElement("Couple");Di2015NewLine    couple.Add(new XElement("Person1",twoDimentionArray[x,0]));Di2015NewLine    couple.Add(new XElement("Person2",twoDimentionArray[x,1]));Di2015NewLine    Couples.Add(couple);Di2015NewLine}Di2015NewLineConsole.WriteLine(doc.ToString());Di2015NewLine
19849121Di2015UniqueSeparator<Couples>Di2015NewLine  <Couple>Di2015NewLine    <Person1>Mike</Person1>Di2015NewLine    <Person2>Amy</Person2>Di2015NewLine  </Couple>Di2015NewLine  <Couple>Di2015NewLine    <Person1>Mary</Person1>Di2015NewLine    <Person2>Albert</Person2>Di2015NewLine  </Couple>Di2015NewLine</Couples>Di2015NewLine
19849134Di2015UniqueSeparatorvar observable = this.GetHeartBeat()Di2015NewLine    .TimeInterval()Di2015NewLine    .Buffer(3, 1)Di2015NewLine    .Select((l, i) => string.Format("{0}, {1}", l.Average(x => 60 / x.Interval.TotalSeconds), i))Di2015NewLine    .Subscribe(i => System.Diagnostics.Debug.WriteLine(i));Di2015NewLine
19849179Di2015UniqueSeparator!(weeks > 0)
19849179Di2015UniqueSeparatorweeks <= 0
19849179Di2015UniqueSeparatornew DateTime
19849179Di2015UniqueSeparatoryear, month, day
19849179Di2015UniqueSeparator.Date
19849179Di2015UniqueSeparatorDateTIme
19849179Di2015UniqueSeparatorstartDate.AddDays(7).AddSeconds(-1)
19849179Di2015UniqueSeparator.Date
19849179Di2015UniqueSeparatorcumLeads.StartDate
19849179Di2015UniqueSeparatorpublic JsonResult CumLeadsParameters(CumLeadsReport cumLeads)Di2015NewLine{Di2015NewLine    var weeks = (cumLeads.EndDate - cumLeads.StartDate).TotalDays / 7;Di2015NewLineDi2015NewLine    if (!(weeks > 0))Di2015NewLine    {Di2015NewLine        // means I have less than a week so calculate days and make it as a weeek and Di2015NewLine        var startDate = cumLeads.StartDate.Date;Di2015NewLine        var endDate = startDate.AddDays(7).AddSeconds(-1);Di2015NewLine        var x = _retailerStatsRepository.GetAllRetailersForManufacturerCountrySelectedDates(Di2015NewLine                    manufacturer.Id,Di2015NewLine                    country.Id,Di2015NewLine                    startDate,Di2015NewLine                    endDate);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        cumLeads.StartDate = cumLeads.StartDate.Date;Di2015NewLine        while (weeks > 0)Di2015NewLine        {Di2015NewLine            weekCounter++;Di2015NewLine            cumLeads.EndDate = cumLeads.StartDate.AddDays(7).AddSeconds(-1);Di2015NewLine            var x = _retailerStatsRepository.GetAllRetailersForManufacturerCountrySelectedDates(Di2015NewLine                        manufacturer.Id,Di2015NewLine                        country.Id,Di2015NewLine                        cumLeads.StartDate,Di2015NewLine                        cumLeads.EndDate);Di2015NewLineDi2015NewLine            tuple.Add(new Tuple<int, IQueryable<RetailerStat>, DateTime, DateTime>(Di2015NewLine                weekCounter,Di2015NewLine                x,Di2015NewLine                cumLeads.StartDate,Di2015NewLine                cumLeads.EndDate));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19849260Di2015UniqueSeparatorstring partialString = System.Text.Encoding.Default.GetString(buffer, 0, read);Di2015NewLine
19849260Di2015UniqueSeparatorStreamReader
19849260Di2015UniqueSeparatorBinaryReader
19849391Di2015UniqueSeparatorGetUser(String userName, Int32 id, Boolean withEntities);Di2015NewLine
19849391Di2015UniqueSeparatorGetUser(String userName, Boolean withEntities);Di2015NewLineGetUser(Int32 id, Boolean withEntities);Di2015NewLine
19849391Di2015UniqueSeparatorGetUser(String email, Boolean withEntities)
19849391Di2015UniqueSeparatorUpdateUser...
19849642Di2015UniqueSeparatorpublic class PlayerSpeedChangedMessage {Di2015NewLine    public Guid PlayerId { get; set; }Di2015NewLine    public int OldSpeed { get; set; }Di2015NewLine    public int NewSpeed { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyMessageHandler {Di2015NewLineDi2015NewLine    public MyMessageHandler() {Di2015NewLine        Messenger<PlayerSpeedChangedMessage>.Subscribe(OnDead);Di2015NewLine    }Di2015NewLineDi2015NewLine    HandleSpeedChange(PlayerSpeedChangedMessage message) {Di2015NewLine        // Do stuff with the messageDi2015NewLine    }Di2015NewLine}Di2015NewLine
19849735Di2015UniqueSeparator[AllowAnonymous]
19849776Di2015UniqueSeparatorawait
19849776Di2015UniqueSeparatorforeach (var obj in listobject)Di2015NewLine{Di2015NewLine    Item item = await client.GetItemAsync(auctionInfo);Di2015NewLine    information.Add(new clsinformDi2015NewLine    {Di2015NewLine        param1 = item.PropertyDi2015NewLine    });Di2015NewLine}Di2015NewLine
19849776Di2015UniqueSeparatorasync
19849850Di2015UniqueSeparatormonthCalendar1.Visible = true;Di2015NewLinethis.BeginInvoke(new Action(() => { monthCalendar1.Select(); }));Di2015NewLine
19849906Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace ConsoleApplicationDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        public static async Task Foo(int num)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Thread {0} - Start {1}", Thread.CurrentThread.ManagedThreadId, num);Di2015NewLineDi2015NewLine            await Task.Delay(1000);Di2015NewLineDi2015NewLine            Console.WriteLine("Thread {0} - End {1}", Thread.CurrentThread.ManagedThreadId, num);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static List<Task> TaskList = new List<Task>();Di2015NewLineDi2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < 3; i++)Di2015NewLine            {Di2015NewLine                int idx = i;Di2015NewLine                TaskList.Add(Foo(idx));Di2015NewLine            }Di2015NewLineDi2015NewLine            Task.WaitAll(TaskList.ToArray());Di2015NewLine            Console.WriteLine("Press Enter to exit...");Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19849958Di2015UniqueSeparatorlistofItems.Where(item=>list.Any(startsWithWord=>item.StartsWith(startsWithWord)))Di2015NewLine
19849958Di2015UniqueSeparatorfor
19849958Di2015UniqueSeparatorfor
19849958Di2015UniqueSeparatortrue
19849958Di2015UniqueSeparatorvar filteredList = new List<String>();Di2015NewLineforeach(var item in listOfItems)Di2015NewLine{Di2015NewLine    foreach(var startsWithWord in list)Di2015NewLine    {Di2015NewLine        if(item.StartsWith(startsWithWord))Di2015NewLine        {Di2015NewLine            filteredList.Add(item)Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinereturn filteredList;Di2015NewLine
19850074Di2015UniqueSeparatorstart
19850074Di2015UniqueSeparatorecho majmun1Di2015NewLinestart C:\\OKOLINA\\additionConsoleApplication1.exeDi2015NewLineecho majmun2Di2015NewLinestart C:\\OKOLINA\\addition1\\jWebSocketSamples-2.0.jarDi2015NewLineecho majmun3Di2015NewLinestart firefox.exe C:\\OKOLINA\\addition2\\index.htmlDi2015NewLineecho majmun4Di2015NewLineexitDi2015NewLine
19850074Di2015UniqueSeparatorstart
19850074Di2015UniqueSeparatorcommand 1Di2015NewLineping -w 1000 -n 5 127.0.0.1Di2015NewLinecommand 2Di2015NewLine
19850074Di2015UniqueSeparator-n 5
19850074Di2015UniqueSeparator-w 1000
19850074Di2015UniqueSeparatorcommand 2
19850074Di2015UniqueSeparatorpause
19850102Di2015UniqueSeparatorpublic interface IPartnerServiceDi2015NewLine{Di2015NewLine    void CreatePartner(int partnerId);Di2015NewLine}Di2015NewLine
19850102Di2015UniqueSeparatorpublic class DefaultPartnerService : IPartnerServiceDi2015NewLine{Di2015NewLine    private StoreContext db;Di2015NewLineDi2015NewLine    public DefaultPartnerService()Di2015NewLine    {Di2015NewLine        db = new StoreContext();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void CreatePartner(int partnerId)Di2015NewLine    {Di2015NewLine        // Something interestingDi2015NewLine    }Di2015NewLine}Di2015NewLine
19850102Di2015UniqueSeparatorpublic class BusinessController : ControllerDi2015NewLine{Di2015NewLine    private IPartnerService _partnerService;Di2015NewLineDi2015NewLine    public BusinessController()Di2015NewLine    {Di2015NewLine        _partnerService = new DefaultPartnerService();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Create(Business business)Di2015NewLine    {Di2015NewLine        _partnerService.CreatePartner(business.PartnerId);Di2015NewLine        return RedirectToAction("Index");Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19850454Di2015UniqueSeparatormanage_pages
19850746Di2015UniqueSeparatorpublic partial class MainForm : FormDi2015NewLine{Di2015NewLineDi2015NewLine    Process myProcess = Process.GetProcessesByName("ffxiv").FirstOrDefault();Di2015NewLineDi2015NewLine    public MainForm()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void startButton_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        int bytesRead;Di2015NewLineDi2015NewLine        IntPtr baseAddress = myProcess.MainModule.BaseAddress;Di2015NewLine        Console.WriteLine("Base Address: " + baseAddress);Di2015NewLineDi2015NewLine        IntPtr firstAddress = IntPtr.Add(baseAddress, 0xF8BEFC);Di2015NewLine        IntPtr firstAddressValue = (IntPtr)BitConverter.ToInt32(MemoryHandler.ReadMemory(myProcess, firstAddress, 4, out bytesRead), 0);Di2015NewLine        IntPtr finalAddr = IntPtr.Add(firstAddressValue, 0x1690);Di2015NewLine        Console.WriteLine("Final Address: " + finalAddr.ToString("X"));Di2015NewLineDi2015NewLine        byte[] memoryOutput = MemoryHandler.ReadMemory(myProcess, finalAddr, 4, out bytesRead);Di2015NewLineDi2015NewLine        int value = BitConverter.ToInt32(memoryOutput, 0);Di2015NewLine        Console.WriteLine("Read Value: " + value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19850777Di2015UniqueSeparatorforeach (Excel.HPageBreak pageBreak in worksheet.HPageBreaks)Di2015NewLine{Di2015NewLine    int row = pageBreak.Location.Row - 1;Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
19851048Di2015UniqueSeparator// Create a SortedSet of the reversed entry set, with a custom comparator for sortingDi2015NewLineSortedSet<Map.Entry<Integer, String>> sortedSet = new TreeSet<Map.Entry<Integer, String>>(Di2015NewLine        new Comparator<Map.Entry<Integer, String>>() {Di2015NewLine    public int compare(Map.Entry<Integer, String> o1, Map.Entry<Integer, String> o2) {Di2015NewLine        // sort by key, then by value --> in descending orderDi2015NewLine        int keyCompareResult = -o1.getKey().compareTo(o2.getKey()); // negate --> descendingDi2015NewLine        int valueCompareResult = o1.getValue().compareTo(o2.getValue());Di2015NewLine        return keyCompareResult == 0 ? valueCompareResult : -keyCompareResult;Di2015NewLine    }Di2015NewLine});Di2015NewLineDi2015NewLine// Add all entries of the map to the sorted setDi2015NewLinefor (Map.Entry<String, Integer> entry : map.entrySet()) {Di2015NewLine    Map.Entry<Integer, String> reversedEntry = new AbstractMap.SimpleEntry<Integer, String>(entry.getValue(), entry.getKey());Di2015NewLine    sortedSet.add(reversedEntry);Di2015NewLine}Di2015NewLineDi2015NewLine// Convert the 10 first elements to the resulting listDi2015NewLineint N = 10;Di2015NewLineList<String> result = new ArrayList<String>(N);Di2015NewLineIterator<Map.Entry<Integer,String>> iterator = sortedSet.iterator();Di2015NewLinewhile (iterator.hasNext() && result.size() < N) {Di2015NewLine    Map.Entry<Integer, String> entry = iterator.next();Di2015NewLine    result.add(entry.getValue());Di2015NewLine}Di2015NewLine
19851271Di2015UniqueSeparatorLabel
19851271Di2015UniqueSeparatorpublic class CustomLabel : LabelDi2015NewLine{Di2015NewLine    public CustomLabel()Di2015NewLine    {Di2015NewLine        OutlineForeColor = Color.Green;Di2015NewLine        OutlineWidth = 2;Di2015NewLine    }Di2015NewLine    public Color OutlineForeColor { get; set; }Di2015NewLine    public float OutlineWidth { get; set; }Di2015NewLine    protected override void OnPaint(PaintEventArgs e)Di2015NewLine    {Di2015NewLine        e.Graphics.FillRectangle(new SolidBrush(BackColor), ClientRectangle);Di2015NewLine        using (GraphicsPath gp = new GraphicsPath())Di2015NewLine        using (Pen outline = new Pen(OutlineForeColor, OutlineWidth) { LineJoin = LineJoin.Round})Di2015NewLine        using(StringFormat sf = new StringFormat())Di2015NewLine        using(Brush foreBrush = new SolidBrush(ForeColor))Di2015NewLine        {Di2015NewLine            gp.AddString(Text, Font.FontFamily, (int)Font.Style, Font.Size, ClientRectangle, sf);                                Di2015NewLine            e.Graphics.ScaleTransform(1.3f, 1.35f);Di2015NewLine            e.Graphics.SmoothingMode = SmoothingMode.HighQuality;Di2015NewLine            e.Graphics.DrawPath(outline, gp);                Di2015NewLine            e.Graphics.FillPath(foreBrush, gp);                            Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19851271Di2015UniqueSeparatorOutlineForeColor
19851271Di2015UniqueSeparatorOutlineWidth
19851271Di2015UniqueSeparatorTextAlign
19851271Di2015UniqueSeparatorAlignment
19851271Di2015UniqueSeparatorStringFormat
19851271Di2015UniqueSeparatorsf
19851271Di2015UniqueSeparatorForeColor
19851289Di2015UniqueSeparatorfor(int i = 1; i <= 4; i++){Di2015NewLine  var label = ((Label)FindControl("lbl_Text" + i));Di2015NewLine  if(label != null){Di2015NewLine     label.Text = "hello";Di2015NewLine  }Di2015NewLine}Di2015NewLine
19851403Di2015UniqueSeparatorvar list = securityRepositoryDi2015NewLine    .Query<IsAuthorized>()Di2015NewLine    .Where(Di2015NewLine      ia => ia.SecurableObjectName == objectNameDi2015NewLine      && ia.PermittedActionName == permittedActionNameDi2015NewLine      && ia.ScopeName == scopeName)Di2015NewLine    // .ToList();Di2015NewLine    .Select(ia => ia.PrincipalId);Di2015NewLine
19851403Di2015UniqueSeparatorvar prins = repositoryDi2015NewLine    .Query<Principal>()Di2015NewLine    //.Where(p => list.Any(l => l.PrincipalId == p.Id))Di2015NewLine    .Where(p => list.Contains(p.Id)) // our subQueryDi2015NewLine    .ToList();Di2015NewLine
19851403Di2015UniqueSeparatorSELECT ... Di2015NewLine FROM Pincipal pDi2015NewLine WHERE p.Id IN (SELECT ia.PrincipalId FROM IsAuthorized ia......Di2015NewLine
19851527Di2015UniqueSeparatorstring credentials = String.Format("{0}:{1}", username, password);Di2015NewLinebyte[] bytes = Encoding.ASCII.GetBytes(credentials);Di2015NewLinestring base64 = Convert.ToBase64String(bytes);Di2015NewLinestring authorization = String.Concat("Basic ", base64);Di2015NewLinereq.Headers.Add("Authorization", authorization);Di2015NewLine
19851634Di2015UniqueSeparator1. If item has bulk group idDi2015NewLine2. If item is being inserted, not updatedDi2015NewLine3. Do a select into from a selection of items based on the bulk group idDi2015NewLine
19851634Di2015UniqueSeparator    IF(@BulkGroupInsertId IS NULL OR EXISTS (SELECT * FROM DELETED))Di2015NewLine    BEGINDi2015NewLine        -- Do Single InsertDi2015NewLine    ENDDi2015NewLine    ELSEDi2015NewLine    BEGINDi2015NewLineDi2015NewLine    -- Bulk InsertDi2015NewLineDi2015NewLine        INSERT INTO TeamSubscription (DivisionTeamId, PhoneNumber, DateCreated)Di2015NewLine        SELECT tc.TeamId, p.MobilePhone, GETDATE()Di2015NewLine        FROMDi2015NewLine            -- Commented OutDi2015NewLine        WHERE Di2015NewLine            -- Commented OutDi2015NewLine        GROUP BYDi2015NewLine            -- Commented OutDi2015NewLineDi2015NewLine    END Di2015NewLine
19851795Di2015UniqueSeparator    MultiplexingConverter mc = new MultiplexingConverter();Di2015NewLine    mc.GlobalSettings.Dpi = 300;Di2015NewLine    mc.GlobalSettings.Size.PageSize = PdfPageSize.Letter;Di2015NewLine    PdfMarginSettings pms = new PdfMarginSettings();Di2015NewLine    string halfInch = ".5in";Di2015NewLine    mc.GlobalSettings.Margin.Bottom = halfInch;Di2015NewLine    mc.GlobalSettings.Margin.Left = halfInch;Di2015NewLine    mc.GlobalSettings.Margin.Right = halfInch;Di2015NewLine    mc.GlobalSettings.Margin.Top = halfInch;Di2015NewLine
19851805Di2015UniqueSeparatorvar db = new SQLiteConnection("sqllite.db")
19851805Di2015UniqueSeparatordb.CreateTable<SyncRecord> ();
19851805Di2015UniqueSeparatordb.Insert (new SyncRecord () { SyncDate =  DateTime.UtcNow });
19851805Di2015UniqueSeparatorvar query = db.Table<SyncRecord> ().Where( /* your lambda  to filter*/);
19851975Di2015UniqueSeparator<asp:DropDownList ID="DropDownList1" runat="server" Di2015NewLine    DataSourceID="SqlDataSource1" DataTextField="PatientID" Di2015NewLine    DataValueField="PatientID" AutoPostback="true"></asp:DropDownList>Di2015NewLine
19851975Di2015UniqueSeparatorif(!IsPostback)
19851975Di2015UniqueSeparator<asp:DropDownList ID="DropDownList1" runat="server" Di2015NewLine    DataSourceID="SqlDataSource1" DataTextField="PatientID" Di2015NewLine    DataValueField="PatientID" AutoPostback="true" OnSelectedIndexChanged="DropDownList1_SelectedIndexChanged"></asp:DropDownList>Di2015NewLine
19851975Di2015UniqueSeparatorprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   HospNo.Text = DropDownList1.SelectedItem.Text;Di2015NewLine}Di2015NewLine
19852052Di2015UniqueSeparatorProcess
19852052Di2015UniqueSeparatorshutdown.exe
19852052Di2015UniqueSeparatorUser: shutdown
19852274Di2015UniqueSeparatorContent.DataAccessStuffDi2015NewLine
19852274Di2015UniqueSeparatorusing Content.DataAccessStuff;Di2015NewLine
19852282Di2015UniqueSeparatorpublic static List<someclass> OrderAsc(Di2015NewLine    List<someclass> object, Di2015NewLine    specific_field_by_someone )Di2015NewLine{Di2015NewLine    var data_table = new Dictionary<string, Func<someclass,object>>() Di2015NewLine    {Di2015NewLine        {"id", x => x.id },Di2015NewLine        {"name", x => x.name }Di2015NewLine    }Di2015NewLineDi2015NewLine    return object.OrderBy(data_dable["name"]);Di2015NewLine}Di2015NewLine
19852374Di2015UniqueSeparatorScrollViewer
19852374Di2015UniqueSeparatorScrollViewer contentScroll = new ScrollViewer { Content = container };Di2015NewLinecontentScroll.Height=800;  // or give like this contentScroll.Height=double.NaN;Di2015NewLineDi2015NewLinevar messageBox = new CustomMessageBox()Di2015NewLine{Di2015NewLine    Title = "SELECT ANY ONE-\\n",Di2015NewLine    Content = contentScrollDi2015NewLine};Di2015NewLineDi2015NewLinemessageBox.Show();Di2015NewLine
19852393Di2015UniqueSeparatorOpenPaymentWindow
19852393Di2015UniqueSeparatorfunction OpenPaymentWindow() {Di2015NewLine    // Logic to open payment window hereDi2015NewLineDi2015NewLine    // Show/hide DOM elements hereDi2015NewLine    $('#fsCreditCard').hide();Di2015NewLine    $('#fsAfterCreditCard').show();Di2015NewLine    $('#fsPaymentOptions').hide();Di2015NewLine}Di2015NewLine
19852604Di2015UniqueSeparatorselect Monday from SUMMARY where Key LIKE 'Reds' //Can also match wildcards, SlowerDi2015NewLine
19852604Di2015UniqueSeparatorselect Tuesday from SUMMARY where Key = 'Reds'  //Preferred , Faster Di2015NewLine
19852789Di2015UniqueSeparator<MediaElement Di2015NewLine                       x:Name="player"Di2015NewLine                       LoadedBehavior="Manual"Di2015NewLine                       UnloadedBehavior="Stop"Di2015NewLine                       Stretch="Fill"Di2015NewLine                       MediaOpened="MyMediaPlayer_OnMediaOpened"Di2015NewLine                       MediaEnded="MyMediaPlayer_OnMediaEnded"Di2015NewLine                       Source="{Binding ElementName=mediaControl, Path=Source}" Di2015NewLine                      PreviewKeyDown="Player_OnPreviewKeyDown"Di2015NewLine                      PreviewMouseDown="Player_OnPreviewMouseDown"Di2015NewLine                       MediaFailed="Player_OnMediaFailed"Di2015NewLine                      >Di2015NewLineDi2015NewLine             </MediaElement>Di2015NewLine
19852789Di2015UniqueSeparator            player.LoadedBehavior = MediaState.Manual;Di2015NewLine            player.UnloadedBehavior = MediaState.Stop;Di2015NewLine
19852931Di2015UniqueSeparatorLogInjectionModule
19852931Di2015UniqueSeparatorILog
19852931Di2015UniqueSeparatorbuilder.Register(x => new ClassThatNeedsILog(x.Resolve<ILog>()))
19852931Di2015UniqueSeparatorClassThatNeedsILog
19852931Di2015UniqueSeparatornew ClassThatNeedsILog(...)
19852931Di2015UniqueSeparatorOnComponentPreparing
19852931Di2015UniqueSeparatorILog
19852931Di2015UniqueSeparatorComponentNotRegisteredException
19852931Di2015UniqueSeparatorILog
19852931Di2015UniqueSeparatorClassThatNeedsILog
19852931Di2015UniqueSeparatorILog
19852931Di2015UniqueSeparatorbuilder.RegisterInstance(LogManager.GetLogger("Logger")).As<ILog>();Di2015NewLine
19852931Di2015UniqueSeparatorClassThatNeedsILog
19852931Di2015UniqueSeparatorILog
19852931Di2015UniqueSeparator builder.Register(x => new Di2015NewLine     ClassThatNeedsILog(LogManager.GetLogger(typeof(ClassThatNeedsILog))))Di2015NewLine     .AsImplemenââtedInterfaces();Di2015NewLine
19852931Di2015UniqueSeparator builder.RegisterType<ClassThatNeedsILog>()Di2015NewLine     .AsImplemenââtedInterfaces();Di2015NewLine
19852931Di2015UniqueSeparatorOnComponentPreparing
19852931Di2015UniqueSeparatorWithParameter
19852931Di2015UniqueSeparatorWithParameters
19852931Di2015UniqueSeparator builder.RegisterType<ClassThatNeedsILog>()Di2015NewLine     .AsImplemenââtedInterfaces()Di2015NewLine     .WithParameters(new Parameter[] {Di2015NewLine         ResolvedParameter.ForNamed<IAnotherInterface>("NAME"),Di2015NewLine         ResolvedParameter.ForNamed<IYetAnotherInterface>("ANOTHERNAME")});Di2015NewLine
19852944Di2015UniqueSeparatorgridLookUpEdit.Properties.DisplayMember = "Name";Di2015NewLinegridLookUpEditView.Columns.Add(Di2015NewLine    new GridColumn() { FieldName = "Name", Visible = true });Di2015NewLinegridLookUpEditView.Columns.Add(Di2015NewLine    new GridColumn() { FieldName = "Country.Name", Caption = "Country", Visible = true });Di2015NewLinegridLookUpEdit.Properties.DataSource = new List<City> { Di2015NewLine    new City() { Name="New York", Country = new Country() { Name = "USA" } },Di2015NewLine    new City() { Name="London", Country = new Country() { Name = "UK" } },Di2015NewLine};Di2015NewLine
19852979Di2015UniqueSeparatorUSE [master]Di2015NewLineDi2015NewLineSET QUOTED_IDENTIFIER ONDi2015NewLineDi2015NewLineGODi2015NewLineDi2015NewLine--1. Create DatabaseDi2015NewLineDi2015NewLineIF EXISTS (SELECT name FROM sys.databases WHERE name = N'YourDatabase')Di2015NewLineBEGINDi2015NewLine    ALTER DATABASE [YourDatabase] SET SINGLE_USER WITH ROLLBACK IMMEDIATEDi2015NewLine    DROP DATABASE [YourDatabase]Di2015NewLineENDDi2015NewLineDi2015NewLine/* Create Marketplace_v1_1 database.                                                          */Di2015NewLineUSE [master]Di2015NewLineGODi2015NewLineDi2015NewLineSET QUOTED_IDENTIFIER ONDi2015NewLineGODi2015NewLineDi2015NewLineDi2015NewLineCREATE DATABASE "YourDatabase"  Di2015NewLineGODi2015NewLineUSE [master]Di2015NewLineGODi2015NewLineALTER DATABASE [YourDatabase] MODIFY FILE ( NAME = N'YourDatabase', FILEGROWTH = 10%)Di2015NewLineGODi2015NewLineDi2015NewLineDi2015NewLine--2. Create Login/USerDi2015NewLineDi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineIF  EXISTS (SELECT * FROM sys.database_principals WHERE name = N'YourDatabaseUserName')Di2015NewLine    DROP USER [YourDatabaseUserName]Di2015NewLineGODi2015NewLineDi2015NewLineUSE [master]Di2015NewLineGODi2015NewLineDi2015NewLineIF  EXISTS (SELECT * FROM sys.server_principals WHERE name = N'YourDatabaseUserName')Di2015NewLine    DROP LOGIN [YourDatabaseUserName]Di2015NewLineGO  Di2015NewLineDi2015NewLineDi2015NewLineCREATE LOGIN [YourDatabaseUserName] Di2015NewLine    WITH PASSWORD=N'YourPassword'Di2015NewLine       , DEFAULT_DATABASE=[YourDatabase]Di2015NewLine       , CHECK_EXPIRATION=OFF, CHECK_POLICY=OFFDi2015NewLineGODi2015NewLineDi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineDi2015NewLine--3. Grant Permission to your user, you can remove unecessary permissions depending on your requirementsDi2015NewLineDi2015NewLine--3.1 Permissions To read/write data to tablesDi2015NewLineCREATE USER [YourDatabaseUserName] FOR LOGIN [YourDatabaseUserName]Di2015NewLineEXEC sp_addrolemember N'db_datareader', N'YourDatabaseUserName'Di2015NewLineEXEC sp_addrolemember N'db_datawriter', N'YourDatabaseUserName'Di2015NewLineGODi2015NewLineDi2015NewLine--3.2. Permissions to backup/restore databaseDi2015NewLineDi2015NewLineEXEC master..sp_addsrvrolemember @loginame = N'YourDatabaseUserName', @rolename = N'bulkadmin'Di2015NewLineGODi2015NewLineEXEC master..sp_addsrvrolemember @loginame = N'YourDatabaseUserName', @rolename = N'dbcreator'Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineEXEC sp_addrolemember N'db_owner', N'YourDatabaseUserName'Di2015NewLineGODi2015NewLineEXEC sys.sp_addsrvrolemember @loginame = N'YourDatabaseUserName', @rolename = N'processadmin'Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineEXEC sp_addrolemember N'db_backupoperator', N'YourDatabaseUserName'Di2015NewLineGODi2015NewLineDi2015NewLineDi2015NewLine--3.3. Grant permissions to operate on database objectsDi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CREATE TABLE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT AUTHENTICATE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT BACKUP DATABASE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT BACKUP LOG TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CREATE FUNCTION TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CREATE PROCEDURE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CREATE TYPE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CREATE VIEW TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT DELETE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT EXECUTE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT INSERT TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT SELECT TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT UPDATE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT ALTER ON SCHEMA::dbo TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT REFERENCES TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT ALTER ANY ROLE TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLineUSE [YourDatabase]Di2015NewLineGODi2015NewLineGRANT CONTROL TO [YourDatabaseUserName]Di2015NewLineGODi2015NewLine
19853127Di2015UniqueSeparatorserver=66.147.244.102;Di2015NewLineUser Id=correct username;Di2015NewLinePersist Security Info=True;Di2015NewLinedatabase=correct database nameDi2015NewLine
19853127Di2015UniqueSeparatorSqlConnection
19853127Di2015UniqueSeparatorSqlConnection
19853127Di2015UniqueSeparatorMySqlConnection
19853134Di2015UniqueSeparatorToString()
19853134Di2015UniqueSeparatorItemTemplate
19853134Di2015UniqueSeparator<FlipView x:Name="flpView" Grid.Row="1" Margin="10, 10, 10, 10">Di2015NewLine    <FlipView.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <Image Stretch="UniformToFill" Source="{Binding}" />Di2015NewLine        </DataTemplate>Di2015NewLine    </FlipView.ItemTemplate>Di2015NewLine</FlipView>Di2015NewLine
19853192Di2015UniqueSeparatorAction
19853192Di2015UniqueSeparatorLoadingStartedEventHandler
19853192Di2015UniqueSeparatorLoadingStartedEventHandler handler = ...; // WhateverDi2015NewLineAction action = new Action(handler);Di2015NewLine
19853192Di2015UniqueSeparatorAction<T>
19853192Di2015UniqueSeparatorAction<ReturnState>
19853192Di2015UniqueSeparatorAction
19853192Di2015UniqueSeparatorpublic delegate void LoadingStartedEventHandler();Di2015NewLinepublic delegate void LoadingFinishedEventHandler(ReturnState state);Di2015NewLineDi2015NewLinepublic event LoadingStartedEventHandler LoadingStarted;Di2015NewLinepublic event LoadingFinishedEventHandler LoadingFinished;Di2015NewLine
19853192Di2015UniqueSeparatorpublic event Action LoadingStarted;Di2015NewLinepublic event Action<ReturnState> LoadingFinished;Di2015NewLine
19853192Di2015UniqueSeparatorobject
19853192Di2015UniqueSeparatorEventArgs
19853192Di2015UniqueSeparatorEventArgs
19853192Di2015UniqueSeparatorEventArgs
19853192Di2015UniqueSeparatorReturnState
19853192Di2015UniqueSeparatorpublic event EventHandler LoadingStarted;Di2015NewLinepublic event EventHandler<ReturnStateEventArgs> LoadingFinished;Di2015NewLine
19853192Di2015UniqueSeparatorprivate void RaiseEvent(EventHandler<TEventArgs> handler,Di2015NewLine                        TEventArgs parameter)Di2015NewLine{Di2015NewLine  if(handler != null)Di2015NewLine  {Di2015NewLine    handler(this, parameter);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void RaiseEvent(EventHandler handler)Di2015NewLine{Di2015NewLine  if(handler != null)Di2015NewLine  {Di2015NewLine    handler(this, EventArgs.Empty);Di2015NewLine  }Di2015NewLine}Di2015NewLine
19853289Di2015UniqueSeparatorMasterPageFile="~/MasterPage.master"
19853289Di2015UniqueSeparator<%@ Page Title="" Language="c#" MasterPageFile="~/MasterPage.master" AutoEventWireup="false" CodeFile="ASPXPageName.aspx.cs" Inherits="NamespaceName.ASPXPageName" %>Di2015NewLine
19853570Di2015UniqueSeparatorTextBox Box = new TextBox()Di2015NewLineDi2015NewLineButton Butt = new Button();Di2015NewLineDi2015NewLineBox = (TextBox)e.Item.FindControl("TextBoxComment")Di2015NewLineButt = (Button)e.Item.FindControl("ButtonSubmit")Di2015NewLineDi2015NewLineBox.Visible = false;Di2015NewLine
19853575Di2015UniqueSeparatorIsMatch("XYZ%", "?Y%") // returns true because ?Y% matches a superset of strings matched by "XYZ%"Di2015NewLineIsMatch("%", "?Y%") // returns true because "%" matches a superset of "?Y%"Di2015NewLine
19853575Di2015UniqueSeparatorinput
19853575Di2015UniqueSeparatorpattern
19853575Di2015UniqueSeparatorinput
19853575Di2015UniqueSeparatorinput
19853575Di2015UniqueSeparatorpattern
19853575Di2015UniqueSeparatorIsSubset
19853575Di2015UniqueSeparatorlet c = some character not in `pattern` (lexically speaking)Di2015NewLinelet searchString = replace all occurences of '?' in input with cDi2015NewLineadd searchString to setOfSearchStringsDi2015NewLineforeach occurence of '%' in inputDi2015NewLine    foreach str in setOfSearchStringsDi2015NewLine        replace str with two strings - {str with c in place of '%', str without the '%'}Di2015NewLineDi2015NewLineforeach str in setOfSearchStringsDi2015NewLine   if str doesn't "regex" match with pattern Di2015NewLine       return falseDi2015NewLineDi2015NewLinereturn trueDi2015NewLine
19853575Di2015UniqueSeparatorpattern
19853575Di2015UniqueSeparatorIsMatch(input,pattern) = IsSubset(input,pattern) || IsSubset(pattern,input)Di2015NewLine
19853651Di2015UniqueSeparator$.ajax({Di2015NewLine    type: "POST",Di2015NewLine    url: "HandlerWithPOST.ashx",Di2015NewLine    data: $('#' + txtEmail).val(),                       Di2015NewLine    dataType:"json",                   Di2015NewLine    success: function (data) {Di2015NewLine        // do some magic with your json data, like populating your labelDi2015NewLine    }   Di2015NewLine});Di2015NewLine
19853771Di2015UniqueSeparator    private void CopyWithProgress(string[] filenames)Di2015NewLine    {Di2015NewLine        // Display the ProgressBar control.Di2015NewLine        pBar1.Visible = true;Di2015NewLine        // Set Minimum to 1 to represent the first file being copied.Di2015NewLine        pBar1.Minimum = 1;Di2015NewLine        // Set Maximum to the total number of files to copy.Di2015NewLine        pBar1.Maximum = filenames.Length;Di2015NewLine        // Set the initial value of the ProgressBar.Di2015NewLine        pBar1.Value = 1;Di2015NewLine        // Set the Step property to a value of 1 to represent each file being copied.Di2015NewLine        pBar1.Step = 1;Di2015NewLineDi2015NewLine        // Loop through all files to copy. Di2015NewLine        for (int x = 1; x <= filenames.Length; x++)Di2015NewLine        {Di2015NewLine            // Copy the file and increment the ProgressBar if successful. Di2015NewLine            if(CopyFile(filenames[x-1]) == true)Di2015NewLine            {Di2015NewLine                // Perform the increment on the ProgressBar.Di2015NewLine                pBar1.PerformStep();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19853773Di2015UniqueSeparator        FileStream FS = new FileStream(filepath, FileMode.Open, FileAccess.Read); //create a file stream object associate to user selected file Di2015NewLine        byte[] img = new byte[FS.Length]; //create a byte array with size of user select file stream lengthDi2015NewLine        FS.Read(img, 0, Convert.ToInt32(FS.Length));//read user selected file stream in to byte arrayDi2015NewLine
19853802Di2015UniqueSeparatorLoadCollection
19853802Di2015UniqueSeparatorprotected Dictionary<ButtonMode, Button> buttonCollection =Di2015NewLine    new Dictionary<ButtonMode, Button>();Di2015NewLine
19853802Di2015UniqueSeparatorif(buttonCollection == null) {Di2015NewLine    // I try to keep the assignment exposed;Di2015NewLine    // LoadCollection should load/create and return said collectionDi2015NewLine    // while otherwise avoiding side-effects if possible.Di2015NewLine    buttonCollection = LoadCollection();   Di2015NewLine}Di2015NewLinereturn buttonCollection;Di2015NewLine
19853802Di2015UniqueSeparatorreturn buttonCollection =Di2015NewLine    (buttonCollection ?? LoadCollection());Di2015NewLine
19853883Di2015UniqueSeparatorJoin
19853883Di2015UniqueSeparatorString
19853883Di2015UniqueSeparatorString.Join(", ", GTIDArr)Di2015NewLine
19853883Di2015UniqueSeparator"'" & String.Join("', '", GTIDArr) & "'"Di2015NewLine
19853925Di2015UniqueSeparator<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine    <BitmapImage x:Key="leftImage" UriSource="/MyApp.Infrastructure;Component/Images/left.png" />Di2015NewLine    <BitmapImage x:Key="errorImage" UriSource="/MyApp.Infrastructure;Component/Images/error.png" />Di2015NewLine</ResourceDictionary>Di2015NewLine
19854018Di2015UniqueSeparatorAWSClientFactory
19854440Di2015UniqueSeparatoreventual consistency
19854440Di2015UniqueSeparatorInsertOrReplace
19854440Di2015UniqueSeparatorInsert
19854478Di2015UniqueSeparatorLowLevelKeyboardProc
19854478Di2015UniqueSeparatorKBDLLHOOKSTRUCT.flags
19854478Di2015UniqueSeparatorLLKHF_INJECTED
19854478Di2015UniqueSeparatorGetForegroundWindow
19854478Di2015UniqueSeparatorGetWindowThreadProcessId
19854499Di2015UniqueSeparatorIEqualityComparer<T>
19854499Di2015UniqueSeparatorEqualityComparer<T>.Default
19854499Di2015UniqueSeparatorIEqualityComparer<string>
19854499Di2015UniqueSeparator"" == null
19854499Di2015UniqueSeparatorclass Example<T>Di2015NewLine{Di2015NewLine    private readonly IEqualityComparer<T> comparer;Di2015NewLine    private readonly T defaultValue;Di2015NewLine    private T value;Di2015NewLineDi2015NewLine    public Example(T value, T defaultValue, IEqualityComparer<T> comparer)Di2015NewLine    {Di2015NewLine        this.value = value;Di2015NewLine        this.defaultValue = defaultValue;Di2015NewLine        this.comparer = comparer;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Example(T value, T defaultValue)Di2015NewLine        : this(value, defaultValue, EqualityComparer<T>.Default)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public Example(T value)Di2015NewLine        : this(value, default(T))Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public Example()Di2015NewLine        : this (default(T))Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsDefaultDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (value == null)Di2015NewLine            {Di2015NewLine                return defaultValue == null;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return comparer.Equals(value, defaultValue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19854515Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLinenamespace dimensionrandomwalkDi2015NewLine{Di2015NewLine    class MainClassDi2015NewLine    {Di2015NewLine        public static void Main (string[] args)Di2015NewLine        {Di2015NewLine            Random rnd = new Random();Di2015NewLine            int[] x;Di2015NewLine            x = new int[500];Di2015NewLine            for (int i = 0; i < 500; i++){Di2015NewLine                int L = rnd.Next (0, 2);Di2015NewLineDi2015NewLine                x[i] = (L==0) ? -1 : 1;Di2015NewLineDi2015NewLine                Console.WriteLine (x[i]);Di2015NewLine            }Di2015NewLineDi2015NewLine            int total_value = 0;Di2015NewLine            for (int i = 0; i < 500; i++Di2015NewLine                total_value += x[i];Di2015NewLineDi2015NewLine            Console.WriteLine ("Total: " + total_value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19854515Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLinenamespace dimensionrandomwalkDi2015NewLine{Di2015NewLine    class MainClassDi2015NewLine    {Di2015NewLine        public static void Main (string[] args)Di2015NewLine        {Di2015NewLine            Random rnd = new Random();Di2015NewLineDi2015NewLine            int total_value = 0;Di2015NewLineDi2015NewLine            for (int i = 0; i < 500; i++){Di2015NewLine                int L = rnd.Next (0, 2);Di2015NewLineDi2015NewLine                total_value += (L==0) ? -1 : 1;            Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine ("Total: " + total_value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19854516Di2015UniqueSeparatorawait local.CreateFolderAsync(..).AsTask()Di2015NewLine
19854583Di2015UniqueSeparator//itemGridView.DataContext = data;Di2015NewLineitemGridView.ItemsSource = data;Di2015NewLine
19854619Di2015UniqueSeparatorProperty/Class/Interface
19854687Di2015UniqueSeparatorIntersect
19854687Di2015UniqueSeparatortypeof(List<int>).GetMethod("Intersect")
19854687Di2015UniqueSeparatorEnumerable
19854687Di2015UniqueSeparatorvar intersectMethod = typeof(Enumerable).GetMethods().First(a => a.Name == "Intersect" && a.GetParameters().Count() == 2).MakeGenericMethod(typeof(int));Di2015NewLine
19854687Di2015UniqueSeparatorvar intersectMethod = typeof(Enumerable).GetMember("Intersect").First().MakeGenericMethod(typeof(int));Di2015NewLine
19854713Di2015UniqueSeparatorEmployee
19854713Di2015UniqueSeparatorspecialField
19854713Di2015UniqueSeparatorOtherEmployee
19854713Di2015UniqueSeparatorspecialField
19854713Di2015UniqueSeparatorEmployee otherEmployee = new OtherEmployee();Di2015NewLine
19854713Di2015UniqueSeparatorOtherEmployee
19854713Di2015UniqueSeparatorEmployee
19854713Di2015UniqueSeparatorspecialField
19854713Di2015UniqueSeparator(otherEmployee as OtherEmployee).specialField = yourValue;Di2015NewLine
19854733Di2015UniqueSeparator(&(objectCategory=person)(objectClass=user)(sAMAccountName=JohnSmith3))Di2015NewLine
19854733Di2015UniqueSeparatorstring filter = "(&(objectCategory=person)"Di2015NewLine     + "(objectClass=user)"Di2015NewLine     + "(sAMAccountName=" + samAccountName + "))";Di2015NewLineDirectorySearcher search = new DirectorySearcher(myLdapConnection);Di2015NewLinesearch.Filter = filter;Di2015NewLineSearchResult result = search.FindOne();Di2015NewLineDirectoryEntry de = result.GetDirectoryEntry();Di2015NewLine
19854850Di2015UniqueSeparator select 123456 % 10000Di2015NewLine
19855154Di2015UniqueSeparatorThrow
19855154Di2015UniqueSeparatorApp_Code
19855154Di2015UniqueSeparatorpublic class Throw : RequestFieldValidatorBaseDi2015NewLine{Di2015NewLine    public Throw(string errorMessage)Di2015NewLine        : base(errorMessage)Di2015NewLine    { }Di2015NewLineDi2015NewLine    protected override bool IsValid(System.Web.HttpContextBase httpContext, string value)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19855154Di2015UniqueSeparatorApp_Code
19855154Di2015UniqueSeparatorpublic static class CustomValidatorDi2015NewLine{Di2015NewLine    public static Throw Throw(string errorMessage)Di2015NewLine    {Di2015NewLine        return new Throw(errorMessage);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19855154Di2015UniqueSeparatorif (!usernameIsValid)Di2015NewLine{Di2015NewLine    Validation.Add("username", CustomValidator.Throw("That username is already taken."));Di2015NewLine}Di2015NewLine
19855174Di2015UniqueSeparatorstring year = "2013";Di2015NewLineDi2015NewLineprotected List<string> GetPersons(string year)Di2015NewLine{Di2015NewLine    XElement company= XElement.Load(Server.MapPath(XMLfil));Di2015NewLineDi2015NewLine    var persons= (from a in company.Elements("department").Elements("people").Elements("person")Di2015NewLine                  where (string)a.Element("gender").Value == 'male' && (string)a.Element("datum").Value.StartsWith(year)Di2015NewLine                  select (string)(a.Element("age"))).ToList<string>();Di2015NewLine    return persons;Di2015NewLine}Di2015NewLine
19855396Di2015UniqueSeparatorvar binding = new System.ServiceModel.BasicHttpBinding();Di2015NewLinebinding.SendTimeout = TimeSpan.FromMinutes( 1 );Di2015NewLinebinding.OpenTimeout = TimeSpan.FromMinutes( 1 );Di2015NewLinebinding.CloseTimeout = TimeSpan.FromMinutes( 1 );Di2015NewLinebinding.ReceiveTimeout = TimeSpan.FromMinutes( 10 );Di2015NewLineusing (var client = new SomeServiceSoapClient(binding, new System.ServiceModel.EndpointAddress("http://site.example/SomeService.asmx")))Di2015NewLine{Di2015NewLine    // client.DoWork(...)Di2015NewLine}Di2015NewLine
19855406Di2015UniqueSeparatorunsubscribe
19855406Di2015UniqueSeparatortrue
19855406Di2015UniqueSeparatorfalse
19855406Di2015UniqueSeparatorfalse
19855406Di2015UniqueSeparatorunsubscribe
19855406Di2015UniqueSeparatorhttp://mywebsite.com/unsubscribeme/emailID=xyz@gmail.comDi2015NewLine
19855406Di2015UniqueSeparatoremailID=xyz@gmail.com
19855406Di2015UniqueSeparatorunsubscribe
19855406Di2015UniqueSeparatortrue
19855406Di2015UniqueSeparator //get user EmailID by QueryString as below:Di2015NewLine String EmailID=Reques.QueryString["emailID"].ToString();Di2015NewLineDi2015NewLine//Update the usertable as below:Di2015NewLineString Command ="update usertable set unsubscribe='true' where emailid='"+EmailID+"'";Di2015NewLine
19855518Di2015UniqueSeparatorusers.Where((x=>x.Name == user.Name).SingleOrDefault();Di2015NewLine
19855518Di2015UniqueSeparatorList<User> users = GetUsers();Di2015NewLinevar foundUser =  users.Where((x=>x.Name == user.Name).SingleOrDefault();Di2015NewLineif(foundUser != null) {Di2015NewLine  //DO SOMETHING AS THERE IS A USERDi2015NewLine}Di2015NewLine
19855518Di2015UniqueSeparatorUser
19855518Di2015UniqueSeparatornull
19855539Di2015UniqueSeparatorpublic ActionResult Index_Printc([DataSourceRequest] DataSourceRequest request)Di2015NewLine{Di2015NewLine    return Json(GetCustomers().ToDataSourceResult(request));Di2015NewLine}Di2015NewLine
19855539Di2015UniqueSeparator<%: Html.Kendo().Grid<CustomerTest.Models.ProductViewModel>()Di2015NewLine   .Name("grid")Di2015NewLine      .DataSource(dataSource => dataSourceDi2015NewLine          .Ajax()Di2015NewLine          .Model(model => model.Id(p => p.CustomerID))Di2015NewLine          .Read(read => read.Action("Printc", "Home") Di2015NewLine          )Di2015NewLine      )Di2015NewLine      .Columns(columns =>Di2015NewLine      {Di2015NewLine          columns.Bound(product => product.CustomerID);Di2015NewLine          columns.Bound(product => product.CustomerFName);Di2015NewLine          columns.Bound(product => product.CustomerLName);Di2015NewLine      })Di2015NewLine      .Pageable()Di2015NewLine      .Sortable()Di2015NewLine%>Di2015NewLine
19855717Di2015UniqueSeparatorbtnReview.Visible = false;Di2015NewLine
19855717Di2015UniqueSeparatorbtnReview.Visible = true;Di2015NewLine
19855732Di2015UniqueSeparatorpublic void form_OnLoaded(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     myComboBox.SelectedIndexChanged += mycombobox_SelectedIndexChanged;Di2015NewLine}Di2015NewLine
19855826Di2015UniqueSeparatoroldSP.Select(string.Format("[itemGuid] = '{0}'", itemGuid))Di2015NewLine     .ToList<DataRow>()Di2015NewLine     .ForEach(r => { Di2015NewLine        r["startdate"] = stDate;Di2015NewLine        r["enddate"] = enDate;Di2015NewLine      });Di2015NewLine
19855826Di2015UniqueSeparatorvar rowsToUpdate = Di2015NewLine    oldSP.AsEnumerable().Where(r => r.Field<string>("itemGuid") == itemGuid);Di2015NewLineDi2015NewLineforeach(var row in rowsToUpdate)Di2015NewLine{Di2015NewLine    row.SetField("startdate", stDate);Di2015NewLine    row.SetField("enddate", enDate);Di2015NewLine}Di2015NewLine
19856000Di2015UniqueSeparatorgeneric <class T>Di2015NewLine    public interface class IElementList {Di2015NewLine        property List<T>^ Elements {Di2015NewLine            List<T>^ get();Di2015NewLine        }Di2015NewLine    };Di2015NewLine
19856044Di2015UniqueSeparatormailAttachment.Dispose();Di2015NewLine
19856272Di2015UniqueSeparatorConfirmations.GetString(x)
19856272Di2015UniqueSeparatorRecipients.GetString(x)
19856272Di2015UniqueSeparatorGetString
19856272Di2015UniqueSeparatorGetBoolean
19856272Di2015UniqueSeparatorGetInt32
19856349Di2015UniqueSeparatorclass LoginResponseDetailsDi2015NewLine{Di2015NewLine    public string SessionId {get;set;} // this might be better as a GUIDDi2015NewLineDi2015NewLine    public Hashtable Businesses {get;set;} // this could be Dictionary<string, string> or Dictionary<Guid, string>Di2015NewLineDi2015NewLine    // other properties here...Di2015NewLine}Di2015NewLineDi2015NewLineclass LoginResponseDi2015NewLine{Di2015NewLine    LoginResponseDetails Response {get;set;}Di2015NewLine    // other properties here...Di2015NewLine}Di2015NewLine
19856349Di2015UniqueSeparatorvar response = Newtonsoft.Json.JsonConvert.DeserializeObject<LoginResponse>(jsonData);Di2015NewLinevar sessionId = response.Response.SessionId;Di2015NewLine
19856390Di2015UniqueSeparatorvar group = itemlist1.GroupBy(x=>x.id); // grouped by idDi2015NewLinevar newList = Di2015NewLine      group.Select(g => g.OrderByDescending(y => y.Creationdate).First());Di2015NewLine
19856390Di2015UniqueSeparatorOrderByDescending
19856390Di2015UniqueSeparatorFirst
19856390Di2015UniqueSeparatorSelect
19856413Di2015UniqueSeparatorvoid DataLoaded(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (this.IsActive)Di2015NewLine    {                Di2015NewLine        grid.Focus();Di2015NewLine        grid.SelectedIndex = 0;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19856413Di2015UniqueSeparatorIsActive
19856413Di2015UniqueSeparatorvoid DataLoaded(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var window = this.GetParent<Window>();Di2015NewLine    if (window.IsActive)Di2015NewLine    {         Di2015NewLine        var grid = this.GetChild<DataGrid>();Di2015NewLine        grid.Focus();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19856413Di2015UniqueSeparatorpublic static T GetParent<T>(this DependencyObject child) where T : DependencyObjectDi2015NewLine{Di2015NewLine    if (child == null) return null;Di2015NewLineDi2015NewLine    // get parent itemDi2015NewLine    var parentObject = VisualTreeHelper.GetParent(child);Di2015NewLine    // weâve reached the end of the treeDi2015NewLine    if (parentObject == null) return null;Di2015NewLine    // check if the parent matches the type weâre looking forDi2015NewLine    var parent = parentObject as T;Di2015NewLine    // return parent if match or use recursion to proceed with next levelDi2015NewLine    return parent ?? GetParent<T>(parentObject);            Di2015NewLine}Di2015NewLineDi2015NewLinepublic static T GetChild<T>(this DependencyObject parent) where T : DependencyObjectDi2015NewLine{Di2015NewLine    if (parent == null) return null;Di2015NewLine    T result = null;Di2015NewLineDi2015NewLine    var childrenCount = VisualTreeHelper.GetChildrenCount(parent);Di2015NewLine    for (var i = 0; i < childrenCount; i++)Di2015NewLine    {Di2015NewLine        var childObject = VisualTreeHelper.GetChild(parent, i);Di2015NewLine        var child = childObject as T;Di2015NewLine        if (child == null)Di2015NewLine            result = childObject.GetChild<T>();Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            result = (T) childObject;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }   Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19856573Di2015UniqueSeparatorint GetDepth(XElement element)Di2015NewLine{Di2015NewLine    int depth = 0;Di2015NewLine    while (element != null)Di2015NewLine    {Di2015NewLine        depth++;Di2015NewLine        element = element.Parent;Di2015NewLine    }Di2015NewLine    return depth;Di2015NewLine}Di2015NewLine
19856573Di2015UniqueSeparatorint GetDepth(XElement element)Di2015NewLine{Di2015NewLine    return element == null ? 0 : GetDepth(element.Parent) + 1;Di2015NewLine}Di2015NewLine
19856619Di2015UniqueSeparator(ArrivalToleranceEnum)(int)ArrivalTolerance.HALFHOURDi2015NewLine
19856619Di2015UniqueSeparatorEnum
19856632Di2015UniqueSeparatorRegex rgx = new Regex("%.*?(?:22|$)");Di2015NewLine
19856775Di2015UniqueSeparatorthis.BeginInvoke((Action)(() => MessageBox.Show("Hello")));Di2015NewLine
19856847Di2015UniqueSeparatorthis.Closing += (sender, e) => this.DoWork();Di2015NewLinethis.Resize += (sender, e) => this.DoWork();Di2015NewLineDi2015NewLineprivate void DoWork()Di2015NewLine{Di2015NewLine    // Your code hereDi2015NewLine}Di2015NewLine
19857013Di2015UniqueSeparatorprivate void DoItRecursive(Control parent)Di2015NewLine{Di2015NewLine    foreach (Control c in parent.Controls)Di2015NewLine    {Di2015NewLine        if(c is UserControl)Di2015NewLine            DoItRecursive(c);Di2015NewLine        else if (c is TextBox)Di2015NewLine            c.Enabled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19857013Di2015UniqueSeparatorDoItRecursive(this);Di2015NewLine
19857013Di2015UniqueSeparatorthis
19857013Di2015UniqueSeparatorForm
19857013Di2015UniqueSeparatorc != null
19857013Di2015UniqueSeparatoris
19857013Di2015UniqueSeparatorc
19857013Di2015UniqueSeparatorTextBox
19857068Di2015UniqueSeparatorName
19857068Di2015UniqueSeparatorHeaderText
19857068Di2015UniqueSeparator{ HeaderText = c.AccountCode, Name = "colAccountCode" }Di2015NewLine
19857068Di2015UniqueSeparatorcolAccountCode
19857068Di2015UniqueSeparator foreach (var c in br)Di2015NewLine {Di2015NewLine    dataGridView1.Columns.Add(new DataGridViewTextBoxColumn() { HeaderText = c.AccountCode, Name = "colAccountCode" });Di2015NewLine    int rows = dataGridView1.Rows.Count, rowCtr = 0;Di2015NewLine    if (rows>0) // Make sure there are rows in DataGridViewDi2015NewLine       { Di2015NewLine         foreach (var r in c.TBal)Di2015NewLine         {Di2015NewLine            if (rowCtr < rows) // Make sure that rowCtr is less than Total Rows since index always starts with zeroDi2015NewLine               {Di2015NewLine                 dataGridView1.Rows[rowCtr++].Cells["colAccountCode"].Value = r;Di2015NewLine               }Di2015NewLine         }Di2015NewLine       }Di2015NewLine    }Di2015NewLine
19857092Di2015UniqueSeparatorScriptTimeout
19857283Di2015UniqueSeparatorgetOF
19857283Di2015UniqueSeparatorOFCls.getOF().Tables(0);Di2015NewLine
19857290Di2015UniqueSeparatoritextsharp-dll-core.zip
19857290Di2015UniqueSeparatorusing iTextSharp;
19857318Di2015UniqueSeparatorthis.Master.Master.PropertyName
19857394Di2015UniqueSeparatorinternal
19857394Di2015UniqueSeparatorInternalsVisibleToAttribute
19857394Di2015UniqueSeparatorinternal
19857498Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing Excel = Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLineNamespace WindowsFormsApplication4Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        Public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            Microsoft.Office.Interop.Excel.Application xlexcel;Di2015NewLine            Microsoft.Office.Interop.Excel.Workbook xlWorkBook;Di2015NewLine            Microsoft.Office.Interop.Excel.Worksheet xlWorkSheet;Di2015NewLine            Microsoft.Office.Interop.Excel.Range xlRange;Di2015NewLineDi2015NewLine            object misValue = System.Reflection.Missing.Value;Di2015NewLineDi2015NewLine            xlexcel = new Excel.Application();Di2015NewLine            xlexcel.Visible = true;Di2015NewLineDi2015NewLine            // Open a FileDi2015NewLine            xlWorkBook = xlexcel.Workbooks.Open("C:\\\\Book1.xlsx", 0, true, 5, "", "", true,Di2015NewLine            Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\\t", false, false, 0, true, 1, 0);Di2015NewLineDi2015NewLine            // Set Sheet 1 as the sheet you want to work withDi2015NewLine            xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLineDi2015NewLine            xlRange = xlWorkSheet.UsedRange;Di2015NewLineDi2015NewLine            for (int i = 1; i <= xlRange.Rows.Count; i++)Di2015NewLine            {Di2015NewLine                for (int j = 1; j <=  xlRange.Columns.Count; j++)Di2015NewLine                {Di2015NewLine                    if (xlexcel.WorksheetFunction.CountIf(xlRange.Cells[i, j], "0") > 0)Di2015NewLine                    {Di2015NewLine                        MessageBox.Show("Row " + i + " has 0");Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            //Once done close and quit ExcelDi2015NewLine            xlWorkBook.Close(false, misValue, misValue);Di2015NewLine            xlexcel.Quit();Di2015NewLineDi2015NewLine            releaseObject(xlWorkSheet);Di2015NewLine            releaseObject(xlWorkBook);Di2015NewLine            releaseObject(xlexcel);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void releaseObject(object obj)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);Di2015NewLine                obj = null;Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                obj = null;Di2015NewLine                MessageBox.Show("Unable to release the Object " + ex.ToString());Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                GC.Collect();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19858014Di2015UniqueSeparatorstring dateString = "2013-11-08T10:00:04.000Z";Di2015NewLineDateTime convertedDate = DateTime.Parse(dateString);Di2015NewLineConsole.WriteLine("Converted {0} to {1} time {2}", Di2015NewLine                           dateString, Di2015NewLine                           convertedDate.Kind.ToString(), Di2015NewLine                           convertedDate);Di2015NewLine
19858202Di2015UniqueSeparatorObject entropyResult = ent.entropy(array);Di2015NewLineDouble value = ((Double[,])entropyResult)[0,0]Di2015NewLine
19858218Di2015UniqueSeparatorFileName
19858218Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace TestingFileOpenDialogDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.openFileDialog1.FileName = "pro*";Di2015NewLine            this.openFileDialog1.Filter = "Pdf Files|*.pdf";Di2015NewLine            this.openFileDialog1.ShowDialog();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19858218Di2015UniqueSeparatorpro*
19858285Di2015UniqueSeparatorList<Color> allowedColors = new List<Color>();Di2015NewLineif (redCheckBox.IsChecked)Di2015NewLine  allowedColors.Add(Color.Red);Di2015NewLine.Di2015NewLine.Di2015NewLine.Di2015NewLineList<Texture> allowedTextures = new List<Texture>();Di2015NewLineif (smoothCheckBox.IsChecked)Di2015NewLine  allowedTextures.Add(Texture.Smooth);Di2015NewLine.Di2015NewLine.Di2015NewLine.Di2015NewLineDi2015NewLinefiltered = paintList.Where( p => allowedColors.Contains(p.Color) &&Di2015NewLine                              allowedTextures.Contains(p.Texture));Di2015NewLine
19858285Di2015UniqueSeparatorredCheckBox.Tag = Color.Red;Di2015NewLineblueCheckBox.Tag = Color.Blue;Di2015NewLine// etc...Di2015NewLineDi2015NewLineList<Color> colors = new List<Color>();Di2015NewLineforeach (Object control in checkboxContainer.Children)Di2015NewLine{ Di2015NewLine  var c = (control as CheckBox);Di2015NewLine  if ( null == c )Di2015NewLine    continue;Di2015NewLine  colors.Add(c.Tag as Color);Di2015NewLine} Di2015NewLine
19858288Di2015UniqueSeparatorList<T>
19858625Di2015UniqueSeparator<Popup IsOpen="{Binding PopUpUCIsOpen}">Di2015NewLine<Border Background="Blue">Di2015NewLine    <TextBlock Text="Hej med dig" FontSize="25"/>Di2015NewLine</Border>Di2015NewLine
19858672Di2015UniqueSeparatorXmlElementAttribute
19858672Di2015UniqueSeparatorMyClass
19858672Di2015UniqueSeparatorXmlTypeAttribute
19858672Di2015UniqueSeparator    [XmlType("Customer")]Di2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        [XmlElement("CustId")]Di2015NewLine        public int Id { get; set; }Di2015NewLineDi2015NewLine        [XmlElement("CustName")]Di2015NewLine        public string Name { get; set; }Di2015NewLine    }Di2015NewLine
19858672Di2015UniqueSeparatorXmlSerializer
19858672Di2015UniqueSeparator    public static XmlDocument SerializeObjectToXML(object obj, string sElementName)Di2015NewLine    {Di2015NewLine        XmlSerializer serializer = new XmlSerializer(obj.GetType());Di2015NewLine        XmlDocument xmlDoc = new XmlDocument();Di2015NewLine        using (MemoryStream ms = new MemoryStream())Di2015NewLine        {Di2015NewLineDi2015NewLine            serializer.Serialize(ms, obj);Di2015NewLine            ms.Position = 0;Di2015NewLine            xmlDoc.Load(ms);Di2015NewLine        }Di2015NewLineDi2015NewLine        return xmlDoc;Di2015NewLine    }Di2015NewLine
19858746Di2015UniqueSeparatorResponse.Redirect("~/MyFolder/MyPage.aspx");Di2015NewLine
19858746Di2015UniqueSeparatorhref="../MyFolder/MyPage.aspx"Di2015NewLine
19858826Di2015UniqueSeparatorDataKeyNames="projectID"Di2015NewLine
19858826Di2015UniqueSeparatorstring id = GridView1.DataKeys[e.RowIndex]["projectID"].ToString();Di2015NewLine
19858826Di2015UniqueSeparator<asp:BoundField DataField="projectID" HeaderText="prID" SortExpression="projectID"/>Di2015NewLine
19858826Di2015UniqueSeparator<Columns>Di2015NewLine            <asp:TemplateField HeaderText="prID" SortExpression="prID">Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:Label ID="lblPrId" runat="server" Text='<%# Bind("prID") %>'></asp:Label>Di2015NewLine                </ItemTemplate>Di2015NewLine            </asp:TemplateField>Di2015NewLine            <asp:BoundField DataField="projectName" HeaderText="projectName" Di2015NewLine                    SortExpression="projectName" />Di2015NewLine            <asp:BoundField DataField="projectType" HeaderText="projectType" Di2015NewLine                    SortExpression="projectType" />Di2015NewLine  </Columns>Di2015NewLine
19858826Di2015UniqueSeparatorLabel lblPrId = row.FindControl("lblPrId") as Label;    Di2015NewLinestring prId = lblPrId .Text;Di2015NewLine
19858996Di2015UniqueSeparatorprivate void izlazToolStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.Close();Di2015NewLine}Di2015NewLine
19858996Di2015UniqueSeparatorClosing
19859050Di2015UniqueSeparatorMultiSelectList
19859050Di2015UniqueSeparatorIEnumerable<string> names = item.ChildrenOptions.Where(child => item.ChildrenId.Cast<string>().Contains(child.Value)).Select(child => child.Text);Di2015NewLine
19859050Di2015UniqueSeparatorMultiSelectList
19859050Di2015UniqueSeparatorIEnumerable<string>
19859050Di2015UniqueSeparatormyOtherModel.ChildrenOptionNames = myList.Where(child => myOtherModel.ChildrenId.Contains(child.Id)).Select(child => child.Name);Di2015NewLinereturn View(myOtherModel);Di2015NewLine
19859050Di2015UniqueSeparator@Html.DisplayFor(model => model.ChildrenOptionNames) // It will iterate over your list and display each nameDi2015NewLine
19859050Di2015UniqueSeparator@for(int index = 0; index < Model.ChildrenOptionNames.Count; index++)Di2015NewLine{Di2015NewLine    // apply some formatting, like putting <ul> / <li>Di2015NewLine    @Html.DisplayFor(model => model.ChildrenOptionNames[index]);Di2015NewLine}Di2015NewLine
19859331Di2015UniqueSeparatorUpdatePanel
19859331Di2015UniqueSeparatorUpdatePanel
19859331Di2015UniqueSeparator<asp:UpdatePanel ID="UpdatePanel1" runat="server" UpdateMode="Conditional">Di2015NewLine    <Triggers>Di2015NewLine        <asp:AsyncPostBackTrigger ControlID="ddlActivity" EventName="SelectedIndexChanged" />Di2015NewLine    </Triggers>Di2015NewLine    <ContentTemplate>Di2015NewLine        <div class="form-line">Di2015NewLine            <label>Activity</label>Di2015NewLine            <asp:DropDownList ID="ddlActivity" required="required" CssClass="chosen-select" runat="server" Width="200px" AppendDataBoundItems="true" OnSelectedIndexChanged="SelectedActivity_Changed" AutoPostBack="true" CausesValidation="false">Di2015NewLine            </asp:DropDownList>Di2015NewLine        </div>Di2015NewLine        <div class="form-line">Di2015NewLine            <label>Sub Activity</label> Di2015NewLine            <asp:DropDownList ID="ddlSubActivity" runat="server" Width="200px" required="required" CssClass="chosen-select" AppendDataBoundItems="true" CausesValidation="false">Di2015NewLine            </asp:DropDownList>Di2015NewLine        </div>Di2015NewLine    </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
19859365Di2015UniqueSeparatorSqlConnection[] con = new SqlConnection[4];Di2015NewLine
19859365Di2015UniqueSeparatorcon[0].ConnectionString = "my connection string";Di2015NewLine
19859365Di2015UniqueSeparatorSqlConnection con; // Type defined, but no instance!Di2015NewLinecon.ConnectionString; Di2015NewLine
19859365Di2015UniqueSeparatorSqlConnection con = new SqlConnection();Di2015NewLine// Accessible, since you now have an instance:Di2015NewLinecon.ConnectionString = "some string"; Di2015NewLine
19859365Di2015UniqueSeparatorvar con = new SqlConnection[4];Di2015NewLinecon[0] = new SqlConnection();Di2015NewLinecon[0].ConnectionString = "my connection string"Di2015NewLine
19859426Di2015UniqueSeparatorPoint
19859426Di2015UniqueSeparatorPoint
19859426Di2015UniqueSeparatorbase
19859426Di2015UniqueSeparator    class PointDi2015NewLine    {      Di2015NewLine        public double X { get; set; }Di2015NewLine        public double Y { get; set; }Di2015NewLineDi2015NewLine        public Point(double x, double y)Di2015NewLine        {Di2015NewLine            X = x;Di2015NewLine            Y = y;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class PointM : PointDi2015NewLine    {Di2015NewLine        public double M { set; get; }  Di2015NewLineDi2015NewLine        public PointM(double x, double y, double m) : base(x,y)Di2015NewLine        {Di2015NewLine            M = m;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19859642Di2015UniqueSeparatorArrayList Files = new ArrayList();Di2015NewLineForeach (ListViewItem lvi in LV.Groups[1].Items)Di2015NewLine{Di2015NewLine          Files.Add(Dict[lvi.tag].Clone());Di2015NewLine}Di2015NewLine
19859642Di2015UniqueSeparatorpublic class RFile : ICloanable{Di2015NewLine//Your RFile-code hereDi2015NewLine}Di2015NewLine
19859720Di2015UniqueSeparatorReadAllLines()
19859720Di2015UniqueSeparatorFile
19859720Di2015UniqueSeparatorSystem.IO.File.ReadAllLines(filePath);
19859720Di2015UniqueSeparatorReadAllLines()
19859720Di2015UniqueSeparatorString [] allLines= System.IO.File.ReadAllLines(filePath);
19859720Di2015UniqueSeparatortextBox1.Text = allLines[0];
19859720Di2015UniqueSeparator    String [] allLines = System.IO.File.ReadAllLines(filePath);Di2015NewLine    if(allLines.Length > 0)Di2015NewLine    textBox1.Text = allLines[0];Di2015NewLineDi2015NewLine    if(allLines.Length > 1)Di2015NewLine    textBox2.Text = allLines[1];Di2015NewLineDi2015NewLine    if(allLines.Length > 2)Di2015NewLine    textBox3.Text = allLines[2];Di2015NewLine
19859753Di2015UniqueSeparatorEncoding.UTF8.GetString
19859774Di2015UniqueSeparatorIEnumerable
19859774Di2015UniqueSeparatorForeach
19859774Di2015UniqueSeparatorForeach
19859774Di2015UniqueSeparatorIEnumerable
19859774Di2015UniqueSeparatorToList()
19859774Di2015UniqueSeparatorForeach
19859774Di2015UniqueSeparatorpersons.ToList().ForEach(p => Console.WriteLine("{0} is {1} years old.", p.Name, p.Age));Di2015NewLine
19859774Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Performs the specified action on each element of the System.Collections.Generic.IEnumerable<T>.Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="T">The type of elements.</typeparam>Di2015NewLine    /// <param name="source">The IEnumerable source to perform the method.</param>Di2015NewLine    /// <param name="action">The System.Action<T> delegate to perform on each element of the System.Collections.Generic.IEnumerable<T>.</param>Di2015NewLine    public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)Di2015NewLine    {Di2015NewLine        foreach (var elem in source)Di2015NewLine            action(elem);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19859774Di2015UniqueSeparatorpersons.ForEach(p => Console.WriteLine("{0} is {1} years old.", p.Name, p.Age));Di2015NewLine
19859823Di2015UniqueSeparatorXmlDocument xmlDoc = new XmlDocument();Di2015NewLinexmlDoc.LoadXml(periodID_Value_Before_OffSet); // string storing my XML Di2015NewLinevar items = doc.GetElementsByTagName("value");Di2015NewLinevar xmlActions = new string[items.Count];Di2015NewLinevar xmlActionsone = new string[items.Count];Di2015NewLinefor (int i = 0; i < items.Count; i++)Di2015NewLine{Di2015NewLine    var xmlAttributeCollection = items[i].Attributes;Di2015NewLine    if (xmlAttributeCollection != null)Di2015NewLine    {Di2015NewLine        var periodid= xmlAttributeCollection["periodid"];Di2015NewLine        xmlActions[i] = periodis.Value;Di2015NewLine        var value= xmlAttributeCollection["value"];Di2015NewLine        xmlActionsone[i] = value.Value;Di2015NewLine        string values = "";Di2015NewLine        values += periodid.Value + "," + value.Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19859823Di2015UniqueSeparatorstring counts = values;Di2015NewLinestring[] periods= counts.Split(',');Di2015NewLinestring value1=periods[0];Di2015NewLinestring value1=periods[1];Di2015NewLinestring value1=periods[2];....Di2015NewLine
19859956Di2015UniqueSeparator    if ((state & CoreVirtualKeyStates.Down) == CoreVirtualKeyStates.Down) {Di2015NewLine        console.Text += "^";Di2015NewLine    }Di2015NewLine
19859991Di2015UniqueSeparatorPath.Combine
19859991Di2015UniqueSeparator\\\\
19859991Di2015UniqueSeparator\\
19859991Di2015UniqueSeparator/
19859991Di2015UniqueSeparator\\
19859991Di2015UniqueSeparator\\
19859991Di2015UniqueSeparatorString.Format
19860111Di2015UniqueSeparatorvar smartTemplate = @"Di2015NewLine<div>This is the title</div>Di2015NewLine<div>model name: {Name}</div>Di2015NewLine<div>model description: {Description}</div>Di2015NewLine<div>model rating: {Rating}</div>Di2015NewLine{ItemList:Di2015NewLine    <div>{NestedName} has number equal to {Number}</div> | }Di2015NewLine";Di2015NewLine
19860139Di2015UniqueSeparatorConsole.WriteLine("Please write a Number: ");Di2015NewLineConsole.Write("Number: ");Di2015NewLineint num = int.Parse(Console.ReadLine());Di2015NewLinefor (int i = 0; i <= num; i++)Di2015NewLine{Di2015NewLine    for (int j = num - i; j >= 0; j--)Di2015NewLine    {Di2015NewLine        Console.Write(j);Di2015NewLine    }Di2015NewLine    for (int j = num; j > num - i; j--)Di2015NewLine    {Di2015NewLine        Console.Write(j);Di2015NewLine    }Di2015NewLine    Console.WriteLine();Di2015NewLine}Di2015NewLineConsole.ReadLine();Di2015NewLine
19860344Di2015UniqueSeparator[Binding]
19860344Di2015UniqueSeparatorGiven
19860344Di2015UniqueSeparatorWhen
19860344Di2015UniqueSeparatorThen
19860344Di2015UniqueSeparatorapi/testing/deleteAll
19860466Di2015UniqueSeparatorfor (int i = 0; i < dataGridView1.Rows.Count; i++)Di2015NewLine{Di2015NewLine    sendto.text += dataGridView1.Rows[i].Cells[3].Value.ToString() + (i < (dataGridView1.Rows.Count-1) ? "," : "");Di2015NewLine}Di2015NewLine
19860513Di2015UniqueSeparator<select runat="server" meta:multiple="multiple" id="prop_typeid" name="property_typeid" class="w290">Di2015NewLine
19860513Di2015UniqueSeparatorif (db.prop_typeid != null)Di2015NewLine{Di2015NewLine    ListItem li = prop_typeid.Items.FindByValue(db.prop_typeid.ToString());Di2015NewLine    li.Selected = true;Di2015NewLine}Di2015NewLine
19860533Di2015UniqueSeparatorprivate void ValidateAndSave()Di2015NewLine{Di2015NewLine    //Check for validation errorsDi2015NewLine    if ((this.Details.ValidationResults.HasErrors == false)) {Di2015NewLine        //Save the changes to the databaseDi2015NewLine        try {Di2015NewLine            this.DataWorkspace.DatabaseNameData.SaveChanges();Di2015NewLine        } catch (Exception ex) {Di2015NewLine            this.ShowMessageBox(ex.ToString());Di2015NewLine        }Di2015NewLine    } else {Di2015NewLine        //If validation errors exist,Di2015NewLine        string res = "";Di2015NewLine        //Add each one to a string,Di2015NewLine        foreach (object msg_loopVariable in this.Details.ValidationResults) {Di2015NewLine            msg = msg_loopVariable;Di2015NewLine            res = res + msg.Property.DisplayName + ": " + msg.Message + "\\r\\n";Di2015NewLine        }Di2015NewLineDi2015NewLine        //And display them in a message boxDi2015NewLine        this.ShowMessageBox(res, "Validation error", MessageBoxOption.Ok);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19860603Di2015UniqueSeparator[Required(ErrorMessage="Your Message")]Di2015NewLine
19860668Di2015UniqueSeparatorPropertyChanged
19860668Di2015UniqueSeparatorpublic void CalculateAandB()Di2015NewLine{Di2015NewLine    PropertyA = 12m;Di2015NewLine    PropertyB = 14m;Di2015NewLineDi2015NewLine    PropertyChanged(this, new PropertyChangedEventArgs("PropertyA"));Di2015NewLine    PropertyChanged(this, new PropertyChangedEventArgs("PropertyB"));Di2015NewLine}Di2015NewLine
19860668Di2015UniqueSeparatorclass SubViewModelDi2015NewLine{Di2015NewLine    public decimal PropertyA { get; set; }Di2015NewLine    public decimal PropertyB { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass ViewModelDi2015NewLine{Di2015NewLine    public SubViewModel SubViewModel { get; set; }Di2015NewLineDi2015NewLine    public void CalculateAandB()Di2015NewLine    {Di2015NewLine        SubViewModel.PropertyA = 12m;Di2015NewLine        SubViewModel.PropertyB = 14m;Di2015NewLineDi2015NewLine        PropertyChanged(this, new PropertyChangedEventArgs("SubViewModel"));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine<TextBlock x:Name="A" Text="{Binding SubViewModel.PropertyA}" />Di2015NewLine<TextBlock x:Name="B" Text="{Binding SubViewModel.PropertyB}" />Di2015NewLine
19860690Di2015UniqueSeparatornoscript
19860690Di2015UniqueSeparatornoscript
19860703Di2015UniqueSeparatorKeyChar
19860703Di2015UniqueSeparatorchar
19860703Di2015UniqueSeparatorConsoleKeyInfo
19860703Di2015UniqueSeparatorinput[i] = Console.ReadKey().KeyChar;Di2015NewLine
19860757Di2015UniqueSeparatorhttp://www.w3schools.com/Di2015NewLine
19860757Di2015UniqueSeparatorhttp://www.asp.net/mvcDi2015NewLine
19860846Di2015UniqueSeparatorCustomControl
19860980Di2015UniqueSeparatorIsOneWay
19860980Di2015UniqueSeparatorOperationContractAttribute
19860980Di2015UniqueSeparatorpublic class ProgramDi2015NewLine{Di2015NewLine    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var host = new CompositionHost();Di2015NewLine        new CompositionContainer(new AssemblyCatalog(typeof(Plugin).Assembly)).ComposeParts(host);Di2015NewLine        var plugin = host.Plugin;Di2015NewLine        plugin.Method();Di2015NewLine        Console.ReadLine();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private class CompositionHost: IPartImportsSatisfiedNotificationDi2015NewLine    {Di2015NewLine        [Import(typeof (IPlugin))] private IPlugin _plugin;Di2015NewLineDi2015NewLine        public IPlugin Plugin { get; private set; }Di2015NewLineDi2015NewLine        public void OnImportsSatisfied()Di2015NewLine        {Di2015NewLine            Plugin = _plugin;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IPluginDi2015NewLine{Di2015NewLine    void Method();Di2015NewLine}Di2015NewLineDi2015NewLine[Export(typeof(IPlugin))]Di2015NewLinepublic class Plugin : IPluginDi2015NewLine{Di2015NewLine    public void Method()Di2015NewLine    {Di2015NewLine        //Method BlocksDi2015NewLine        Thread.Sleep(5000);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19860980Di2015UniqueSeparatorplugin.Method()
19860980Di2015UniqueSeparatorpublic interface IAsyncPluginDi2015NewLine{Di2015NewLine    Task Method();Di2015NewLine}Di2015NewLine
19860980Di2015UniqueSeparatorCompositionHost
19860980Di2015UniqueSeparator    private class CompositionHost: IPartImportsSatisfiedNotificationDi2015NewLine    {Di2015NewLine        [Import(typeof (IPlugin))] private IPlugin _plugin;Di2015NewLineDi2015NewLine        public IAsyncPlugin Plugin { get; private set; }Di2015NewLineDi2015NewLine        public void OnImportsSatisfied()Di2015NewLine        {Di2015NewLine            Plugin = new AsyncPlugin(_plugin);Di2015NewLine        }Di2015NewLineDi2015NewLine        private sealed class AsyncPlugin : IAsyncPluginDi2015NewLine        {Di2015NewLine            private readonly IPlugin _plugin;Di2015NewLineDi2015NewLine            public AsyncPlugin(IPlugin plugin)Di2015NewLine            {Di2015NewLine                _plugin = plugin;Di2015NewLine            }Di2015NewLineDi2015NewLine            public Task Method()Di2015NewLine            {Di2015NewLine                return Task.Factory.StartNew(() => _plugin.Method());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19861068Di2015UniqueSeparator@{ Html.RenderAction("Categories", "Controller", new { productId = product.Id }); }Di2015NewLine
19861068Di2015UniqueSeparatorpublic Product product {get;set;}Di2015NewLinepublic IList<Category> Categories {get;set;}Di2015NewLine
19861068Di2015UniqueSeparatorpublic ActionResult Categories(int productId)Di2015NewLine{Di2015NewLine   // populate view model based on  product IdDi2015NewLine   return PartialView("_Categories", viewmodel);Di2015NewLineDi2015NewLine}Di2015NewLine
19861068Di2015UniqueSeparatorpublic class ProductDi2015NewLine{Di2015NewLine   public int Id {get;set;}Di2015NewLine   public string Name {get;set;}Di2015NewLine   public virtual ICollection<Category> Categories {get;set;}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CategoryDi2015NewLine{Di2015NewLine   public int Id {get;set;}Di2015NewLine   public string Name {get;set;}Di2015NewLine   public int ProductId {get;set;}Di2015NewLine   public virtual Product Product {get;set;}Di2015NewLine}Di2015NewLine
19861068Di2015UniqueSeparator@foreach (var category in prodocut.Categories)Di2015NewLine{Di2015NewLine    <td>@category.Name</td>Di2015NewLine}Di2015NewLine
19861182Di2015UniqueSeparatorDbProviderFactories
19861182Di2015UniqueSeparatorvar connectionString = ConfigurationManager.ConnectionStrings["MusicStoreEntities"];Di2015NewLinevar factory = DbProviderFactories.GetFactory(connectionString.ProviderName); Di2015NewLinecontext = new ApplicationDatabaseDataContext(factory.CreateConnection(), mappingSource);Di2015NewLine
19861182Di2015UniqueSeparator<configuration>Di2015NewLine    <!-- Other stuff -->Di2015NewLine    <connectionStrings>Di2015NewLine        <add name="MusicStoreEntities" connectionString="Data Source=|DataDirectory|MvcMusicStore.sdf" providerName="System.Data.SqlServerCe.4.0" />Di2015NewLine    </connectionStrings>Di2015NewLine    <!-- Other stuff -->Di2015NewLine</configuration>Di2015NewLine
19861182Di2015UniqueSeparatorif (ApplicationSettings.ProfileDatabaseQueries)
19861227Di2015UniqueSeparatorusing System.Data.Entity;Di2015NewLine
19861227Di2015UniqueSeparatorpublic class EnrollmentDi2015NewLine{Di2015NewLineDi2015NewLine        public virtual Course Course { get; set; }Di2015NewLine        public virtual Student Student { get; set; }Di2015NewLine}Di2015NewLine
19861256Di2015UniqueSeparator"~\\Report.rpt"
19861264Di2015UniqueSeparatorvar block = Expression.Block(Di2015NewLine               Expression.Assign(Di2015NewLine                   Expression.Property(personParam, "Name"),Di2015NewLine                   Expression.Constant("Joe Bloggs")));Di2015NewLine
19861282Di2015UniqueSeparatorSum
19861282Di2015UniqueSeparator=Sum(Fields!TotalQty.Value - Fields!PSQLevel.Value)
19861334Di2015UniqueSeparatorNumericUpDown
19861334Di2015UniqueSeparatorTextBox
19861334Di2015UniqueSeparatorKeyPress
19861334Di2015UniqueSeparatorTextBox
19861334Di2015UniqueSeparatorprivate void yourTextBox_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine{Di2015NewLine    if (!char.IsControl(e.KeyChar)Di2015NewLine        && !char.IsDigit(e.KeyChar))Di2015NewLine    {Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19861334Di2015UniqueSeparator.
19861344Di2015UniqueSeparator[0-9]+(-[0-9]+)*Di2015NewLine
19861363Di2015UniqueSeparatorserver = db.TLDs.First(x => x.TYP == TLD).Whois_Server;Di2015NewLine
19861363Di2015UniqueSeparatorserver
19861363Di2015UniqueSeparatorTLD
19861439Di2015UniqueSeparator<UserControlDi2015NewLinex:Class="SilverlightApplication2.MainPage"Di2015NewLinexmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLinexmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine<UserControl.Resources>Di2015NewLine    <ControlTemplate x:Key="MySpecialToggleButton" TargetType="ToggleButton">Di2015NewLine        <Grid>Di2015NewLine            <VisualStateManager.VisualStateGroups>Di2015NewLine                <VisualStateGroup x:Name="CheckStates">Di2015NewLine                    <VisualState x:Name="Checked">Di2015NewLine                        <Storyboard>Di2015NewLine                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="RunningIcon">Di2015NewLine                                <DiscreteObjectKeyFrame KeyTime="0">Di2015NewLine                                    <DiscreteObjectKeyFrame.Value>Di2015NewLine                                        <Visibility>Visible</Visibility>Di2015NewLine                                    </DiscreteObjectKeyFrame.Value>Di2015NewLine                                </DiscreteObjectKeyFrame>Di2015NewLine                            </ObjectAnimationUsingKeyFrames>Di2015NewLine                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PausedIcon">Di2015NewLine                                <DiscreteObjectKeyFrame KeyTime="0">Di2015NewLine                                    <DiscreteObjectKeyFrame.Value>Di2015NewLine                                        <Visibility>Collapsed</Visibility>Di2015NewLine                                    </DiscreteObjectKeyFrame.Value>Di2015NewLine                                </DiscreteObjectKeyFrame>Di2015NewLine                            </ObjectAnimationUsingKeyFrames>Di2015NewLine                        </Storyboard>Di2015NewLine                    </VisualState>Di2015NewLine                    <VisualState x:Name="Unchecked"/>Di2015NewLine                </VisualStateGroup>Di2015NewLine            </VisualStateManager.VisualStateGroups>Di2015NewLine            <Image x:Name="PausedIcon" Source="/SilverlightApplication2;component/assets/paused.png" Visibility="Visible" Width="16" Height="16"/>Di2015NewLine            <Image x:Name="RunningIcon" Source="/SilverlightApplication2;component/assets/running.png" Visibility="Collapsed" Width="16" Height="16"/>Di2015NewLine        </Grid>Di2015NewLine    </ControlTemplate>Di2015NewLine</UserControl.Resources>Di2015NewLineDi2015NewLine<ToggleButton Height="20" Width="20" Template="{StaticResource MySpecialToggleButton}"/>Di2015NewLine
19861451Di2015UniqueSeparator    float minHueDiff        = (float)10;  // 0 to 360Di2015NewLine    float minBrightDiff     = (float)0.1; // 0 to 1Di2015NewLine    float minSatDiff        = (float)0.1; // 0 to 1Di2015NewLine
19861451Di2015UniqueSeparatorpublic void AverageColorTest_WebExample_FineTuned()Di2015NewLine{                Di2015NewLine    Bitmap bm = new Bitmap("C:\\\\Users\\\\XXX\\\\Desktop\\\\example1.jpg");Di2015NewLineDi2015NewLine    int width = bm.Width;Di2015NewLine    int height = bm.Height;Di2015NewLine    int red = 0;Di2015NewLine    int green = 0;Di2015NewLine    int blue = 0;Di2015NewLine    float minDiversion = 30 / 100; // drop pixels that do not differ by at least minDiversion between color values (white, gray or black)Di2015NewLine    int dropped = 0; // keep track of dropped pixels                Di2015NewLineDi2015NewLine    int bppModifier = bm.PixelFormat == System.Drawing.Imaging.PixelFormat.Format24bppRgb ? 3 : 4; // cutting corners, will fail on anything else but 32 and 24 bit imagesDi2015NewLine    BitmapData srcData = bm.LockBits(new System.Drawing.Rectangle(0, 0, bm.Width, bm.Height), ImageLockMode.ReadOnly, bm.PixelFormat);Di2015NewLine    int stride = srcData.Stride;Di2015NewLine    IntPtr Scan0 = srcData.Scan0;Di2015NewLineDi2015NewLine    Dictionary<Color, Int64> dicColors = new Dictionary<Color, long>(); // color, pixelcount i.e ('#FFFFFF',100);Di2015NewLineDi2015NewLine    unsafeDi2015NewLine    {Di2015NewLine        byte* p = (byte*)(void*)Scan0;Di2015NewLineDi2015NewLine        for (int y = 0; y < height; y++)Di2015NewLine        {Di2015NewLine            for (int x = 0; x < width; x++)Di2015NewLine            {Di2015NewLine                int idx = (y * stride) + x * bppModifier;Di2015NewLine                red = p[idx + 2];Di2015NewLine                green = p[idx + 1];Di2015NewLine                blue = p[idx];Di2015NewLineDi2015NewLine                if (red == 255 && green == 255 && blue == 255)Di2015NewLine                continue;Di2015NewLineDi2015NewLine                Color GroupedColor = GetNamedWebColor_NearestMatch(red, green, blue);Di2015NewLineDi2015NewLine                if (dicColors.ContainsKey(GroupedColor))Di2015NewLine                {Di2015NewLine                    dicColors[GroupedColor]++;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    dicColors.Add(GroupedColor, 1);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // sort dictionary of colors so that most used is at topDi2015NewLine    dicColors = dicColors.OrderByDescending(x => x.Value).ToDictionary(pair => pair.Key, pair => pair.Value);Di2015NewLineDi2015NewLine    List<Color> MainColors  = null;Di2015NewLine    Int16 numberOf          = 3;Di2015NewLine    float minHueDiff        = (float)10;Di2015NewLine    float minBrightDiff     = (float)0.1;Di2015NewLine    float minSatDiff        = (float)0.1;Di2015NewLineDi2015NewLine    MainColors = GetMainXColors(dicColors.Keys.ToList(), numberOf, minHueDiff, minBrightDiff, minSatDiff);Di2015NewLineDi2015NewLine    foreach (Color MainColor in MainColors)Di2015NewLine    {Di2015NewLine        Console.WriteLine(ColorTranslator.ToHtml(MainColor)); // should ouput main colorsDi2015NewLine    }Di2015NewLineDi2015NewLine}   Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// returns first x many colors that differ by min HSL properties passed inDi2015NewLine/// </summary>Di2015NewLine/// <param name="listIn"></param>Di2015NewLine/// <param name="ReturnMaxNumberOfColors"></param>Di2015NewLine/// <param name="minHueDiff"></param>Di2015NewLine/// <param name="minBrightDiff"></param>Di2015NewLine/// <param name="minSatDiff"></param>Di2015NewLine/// <returns></returns>Di2015NewLineprivate static List<Color> GetMainXColors(List<Color> listIn, Int32 ReturnMaxNumberOfColors, float minHueDiff, float minBrightDiff, float minSatDiff)Di2015NewLine{Di2015NewLine    List<Color> response = new List<Color>();Di2015NewLineDi2015NewLine    Int32 i = 0;Di2015NewLine    while (response.Count < ReturnMaxNumberOfColors && i < listIn.Count)Di2015NewLine    {Di2015NewLine        bool  blnUniqueMainColor = true; // want main colors ie dark brown, gold, silver, not 3 shades of brownDi2015NewLine        Color nextColor          = listIn[i];Di2015NewLineDi2015NewLine        float brightness    = nextColor.GetBrightness();Di2015NewLine        float sat           = nextColor.GetSaturation();Di2015NewLine        float hue           = nextColor.GetHue();Di2015NewLineDi2015NewLine        for (Int32 j = 0; j < response.Count; j++)Di2015NewLine        {Di2015NewLineDi2015NewLine            float brightnessOther   = response[j].GetBrightness();Di2015NewLine            float satOther          = response[j].GetSaturation();Di2015NewLine            float hueOther          = response[j].GetHue();Di2015NewLineDi2015NewLine            // hue is 360 degrees of color, to calculate hue difference                        Di2015NewLine            // need to subtract 360 when either are out by 180 (i.e red is at 0 and 359, diff should be 1 etc)Di2015NewLine            if (hue - hueOther > 180) hue -= 360;Di2015NewLine            if (hueOther - hue > 180) hueOther -= 360;Di2015NewLineDi2015NewLine            float brightdiff        = Math.Abs(brightness - brightnessOther);Di2015NewLine            float satdiff           = Math.Abs(sat - satOther);Di2015NewLine            float huediff           = Math.Abs(hue - hueOther);Di2015NewLine            int matchHSL            = 0;Di2015NewLineDi2015NewLine            if (brightdiff <= minBrightDiff)Di2015NewLine                matchHSL++;Di2015NewLineDi2015NewLine            if (satdiff <= minSatDiff)Di2015NewLine                matchHSL++;Di2015NewLineDi2015NewLine            if (huediff <= minHueDiff) Di2015NewLine                matchHSL++;Di2015NewLineDi2015NewLine            if (matchHSL != 0  & satdiff != 1))Di2015NewLine            {Di2015NewLine                blnUniqueMainColor = false;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        if (blnUniqueMainColor)Di2015NewLine        {       // color differs by min ammount of HSL so add to responseDi2015NewLine            response.Add(nextColor);Di2015NewLine        }Di2015NewLine        i++;Di2015NewLine    }Di2015NewLine    return response;Di2015NewLine}   Di2015NewLineDi2015NewLineprivate static List<Color> WebColors;Di2015NewLine/// <summary>Di2015NewLine/// Returns the "nearest" color from a given "color space"Di2015NewLine/// </summary>Di2015NewLine/// <param name="input_color">The color to be approximated</param>Di2015NewLine/// <returns>The nearest color</returns>        Di2015NewLinepublic static Color GetNamedWebColor_NearestMatch(double dbl_input_red, double dbl_input_green, double dbl_input_blue)Di2015NewLine{Di2015NewLine    // get the colorspace as an ArrayListDi2015NewLine    if (WebColors == null) Di2015NewLine        WebColors = GetWebColors();Di2015NewLine    // the Euclidean distance to be computedDi2015NewLine    // set this to an arbitrary numberDi2015NewLine    // must be greater than the largest possible distance (appr. 441.7)Di2015NewLine    double distance = 500.0;Di2015NewLine    // store the interim resultDi2015NewLine    double temp;Di2015NewLine    // RGB-Values of test colorsDi2015NewLine    double dbl_test_red;Di2015NewLine    double dbl_test_green;Di2015NewLine    double dbl_test_blue;Di2015NewLine    // initialize the resultDi2015NewLine    Color nearest_color = Color.Empty;Di2015NewLine    foreach (Color o in WebColors)Di2015NewLine    {Di2015NewLine        // compute the Euclidean distance between the two colorsDi2015NewLine        // note, that the alpha-component is not used in this example                Di2015NewLine        dbl_test_red    = Math.Pow(Convert.ToDouble(((Color)o).R) - dbl_input_red, 2.0);Di2015NewLine        dbl_test_green  = Math.Pow(Convert.ToDouble(((Color)o).G) - dbl_input_green, 2.0);Di2015NewLine        dbl_test_blue   = Math.Pow(Convert.ToDouble(((Color)o).B) - dbl_input_blue, 2.0);Di2015NewLine        temp            = Math.Sqrt(dbl_test_blue + dbl_test_green + dbl_test_red);Di2015NewLine        // explore the result and store the nearest colorDi2015NewLine        if (temp < distance)Di2015NewLine        {Di2015NewLine            distance = temp;Di2015NewLine            nearest_color = (Color)o;Di2015NewLine        }Di2015NewLine    }            Di2015NewLine    return nearest_color;Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Returns an ArrayList filled with "WebColors"Di2015NewLine/// </summary>Di2015NewLine/// <returns>WebColors</returns>Di2015NewLine/// <remarks></remarks>Di2015NewLineprivate static List<Color> GetWebColors()Di2015NewLine{Di2015NewLine    List<string> listIgnore = new List<string>();Di2015NewLine    listIgnore.Add("transparent");Di2015NewLineDi2015NewLine    Type color = (typeof(Color));Di2015NewLine    PropertyInfo[] propertyInfos = color.GetProperties(BindingFlags.Public | BindingFlags.Static);Di2015NewLine    List<Color> colors = new List<Color>();Di2015NewLineDi2015NewLine    foreach (PropertyInfo pi in propertyInfos)Di2015NewLine    {Di2015NewLine        if (pi.PropertyType.Equals(typeof(Color)))Di2015NewLine        {Di2015NewLine            Color c = (Color)pi.GetValue((object)(typeof(Color)), null);Di2015NewLine            if (listIgnore.Contains(c.Name.ToLower()))Di2015NewLine            continue;Di2015NewLine            colors.Add(c);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return colors;Di2015NewLine}Di2015NewLine
19861547Di2015UniqueSeparatorDocument
19861547Di2015UniqueSeparatorIHTMLDocument2 doc = (webDocument1.Document.DomDocument) as IHTMLDocument2;Di2015NewLineIHTMLStyleSheet style = doc.createStyleSheet("", 0);Di2015NewLinestyle.cssText = @"body { cursor: wait; }";Di2015NewLine
19861547Di2015UniqueSeparatorDocumentStream
19861607Di2015UniqueSeparatorif (value != (T)defaultView.CurrentItem)Di2015NewLine
19861607Di2015UniqueSeparatorobject
19861607Di2015UniqueSeparator!=
19861607Di2015UniqueSeparatorT
19861607Di2015UniqueSeparator!=
19861607Di2015UniqueSeparatorstring
19861607Di2015UniqueSeparator"New"
19861607Di2015UniqueSeparatornew1 != new2
19861607Di2015UniqueSeparatortrue
19861607Di2015UniqueSeparatorEqualityComparer<T>.Default
19861607Di2015UniqueSeparatorT
19861607Di2015UniqueSeparatoroverride
19861607Di2015UniqueSeparatorobject.Equals(object)
19861607Di2015UniqueSeparatorobject.Equals(object, object)
19861607Di2015UniqueSeparatorEqualityComparer<T>.Default
19861607Di2015UniqueSeparatorIEquatable<T>
19861607Di2015UniqueSeparatorif (!object.Equals(value, defaultView.CurrentItem))Di2015NewLine
19861615Di2015UniqueSeparatorvar myObjects = []; Di2015NewLinemyObjects.push({key1:1, key2: 9, value: 22});Di2015NewLinemyObjects.push({key1:-1, key2: 0, value: 2});Di2015NewLine...Di2015NewLine
19861615Di2015UniqueSeparatorvar foundValues = function(key1, key2) {Di2015NewLineDi2015NewLine   var filteredArray = array.filter(function (element) { Di2015NewLine      return element.key1=== key1 && element.key2 === key2;Di2015NewLine   });Di2015NewLineDi2015NewLine   return filteredArray;Di2015NewLine}Di2015NewLine
19861615Di2015UniqueSeparatorvar myObjects = {}; Di2015NewLinemyObjects["1_9"] = 22; Di2015NewLinemyObjects["-1_0"] = 2; Di2015NewLine
19861615Di2015UniqueSeparatorvar foundValues = fucntion(key1, key2) {Di2015NewLineDi2015NewLine   return myObjects[key1.toString() + "_" + key2.toString()];     Di2015NewLineDi2015NewLine}Di2015NewLine
19861857Di2015UniqueSeparatorconnection1
19861857Di2015UniqueSeparatorcommand1
19861857Di2015UniqueSeparatorcommand1.CommandText = "UPDATE Table SET ID=@ID, Name=@Name, TimeIn=@TimeInAM, TimeOut=@TimeOutAM";Di2015NewLinecommand1.Parameters.AddWithValue("@ID", returnValue);Di2015NewLinecommand1.Connection = connection1; // missing thisDi2015NewLineconnection1.Open();Di2015NewLine
19861857Di2015UniqueSeparatorusing
19861880Di2015UniqueSeparatorpublic Form1() {Di2015NewLine  InitializeComponent();Di2015NewLine  ((ToolStripDropDownMenu)FileMenuItem.DropDown).ShowCheckMargin = true;Di2015NewLine  ((ToolStripDropDownMenu)FileMenuItem.DropDown).ShowImageMargin = true;Di2015NewLine}Di2015NewLine
19861981Di2015UniqueSeparator<asp:RegularExpressionValidator runat="server" id="valRgx" ControlToValidate="txtBox" ValidationExpression=".*,.*" ErrorMessage="Must contain a comma" />
19861981Di2015UniqueSeparatorprotected void Page_PreRender(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!NameOfValidator.IsValid) TextBoxName.Text = string.Empty;Di2015NewLine}Di2015NewLine
19861981Di2015UniqueSeparator<asp:RegularExpressionValidator runat="server" id="valRgx" ControlToValidate="txtBox" ValidationExpression="(F4)|(.*,.*)" ErrorMessage="Must contain a comma" />
19862084Di2015UniqueSeparatorAreEqual
19862084Di2015UniqueSeparatorObject.Equals
19862084Di2015UniqueSeparatorObject.GetHashCode
19862084Di2015UniqueSeparatorIEquatable
19862084Di2015UniqueSeparatornunit
19862106Di2015UniqueSeparatorint?
19862106Di2015UniqueSeparator MyNullInt = (it.B == null) ? (int?) null : it.B % 2Di2015NewLine
19862106Di2015UniqueSeparator MyNullInt = (it.B == null) ?  null : (int?) it.B % 2Di2015NewLine
19862187Di2015UniqueSeparatorDraw()
19862187Di2015UniqueSeparatorUpdate()
19862187Di2015UniqueSeparator protected override void Draw(GameTime gameTime)Di2015NewLine {Di2015NewLine     spriteBatch.Begin();Di2015NewLine     //draw all your stuffDi2015NewLine     spriteBatch.End();Di2015NewLine}Di2015NewLine
19862271Di2015UniqueSeparatorpublic override void OnStartPage(PdfWriter writer, Document document)Di2015NewLine{Di2015NewLine    base.OnStartPage(writer, document);Di2015NewLine    Paragraph paragraph = new Paragraph("GENERAL TITLE\\n\\n", FontFactory.GetFont("Arial", 9, iTextSharp.text.Font.BOLD));Di2015NewLine    paragraph.Alignment = Element.ALIGN_CENTER;Di2015NewLine    document.Add(paragraph);Di2015NewLineDi2015NewLine    paragraph = new Paragraph(pintaTitulo(), FontFactory.GetFont("Arial", 9, iTextSharp.text.Font.BOLD));Di2015NewLine    document.Add(paragraph);Di2015NewLine }Di2015NewLine
19862271Di2015UniqueSeparatorclass _EventsInherited : _EventsDi2015NewLine{Di2015NewLine    public _EventsInherited(){}Di2015NewLineDi2015NewLine    public override string pintaTitulo()Di2015NewLine    {Di2015NewLine        return "subTitle"; Di2015NewLine    }Di2015NewLine}Di2015NewLine
19862367Di2015UniqueSeparator((Status)StatusID)
19862367Di2015UniqueSeparator(Status) Enum.Parse(typeof(Status), "Active")Di2015NewLine
19862367Di2015UniqueSeparatorStatus.Active
19862373Di2015UniqueSeparator[0]
19862373Di2015UniqueSeparatoruserObject.Properties[prop][0].ToString()
19862373Di2015UniqueSeparatorCurrentUserEmail = "";Di2015NewLinevar propertyArray = userObject.Properties[prop];Di2015NewLineif (propertyArray.Lenght > 0) CurrentUserEmail = propertyArray[0] as string;Di2015NewLine
19862497Di2015UniqueSeparator"dd-MM-yyyy HH:mm:ss"Di2015NewLine
19862497Di2015UniqueSeparatorDateTime dt = DateTime.ParseExact("08-11-2013 07:38:05", Di2015NewLine                                  "dd-MM-yyyy HH:mm:ss", Di2015NewLine                                   CultureInfo.InvariantCulture); // Instead of NothingDi2015NewLine
19862497Di2015UniqueSeparator"d-M-yyyy HH:mm:ss"
19862497Di2015UniqueSeparatorNothing
19862497Di2015UniqueSeparatornull
19862497Di2015UniqueSeparatorCultureInfo.InvariantCulture
19862565Di2015UniqueSeparator@Html.LabelFor
19862565Di2015UniqueSeparatorDisplayAttribute
19862565Di2015UniqueSeparator@Html.DisplayFor
19862565Di2015UniqueSeparator"Hello this is a different value"
19862565Di2015UniqueSeparator@Html.LabelFor
19862565Di2015UniqueSeparator@Html.DisplayFor
19862627Di2015UniqueSeparatorResolveUsing()
19862627Di2015UniqueSeparatorMapper.CreateMap<Track, TrackDto>()Di2015NewLine    .ForMember(dest => dest.TrackInfo, func => funcDi2015NewLine        .ResolveUsing(src => src.TrackDefinitions));Di2015NewLine
19862652Di2015UniqueSeparator#region Tile and Tile Sheet HandlingDi2015NewLinepublic static int TilesPerRowDi2015NewLine{Di2015NewLine    get { return tileSheet.Width / TileWidth; }Di2015NewLine}Di2015NewLine
19862652Di2015UniqueSeparatorYourClass.TilesPerRow
19862652Di2015UniqueSeparatorget
19862652Di2015UniqueSeparatorset
19862851Di2015UniqueSeparatordecimal
19862851Di2015UniqueSeparatorfloat
19862851Di2015UniqueSeparatordouble
19862851Di2015UniqueSeparatorfloat
19862851Di2015UniqueSeparatordouble
19862851Di2015UniqueSeparatordecimal
19862851Di2015UniqueSeparatorRationalNumber
19862851Di2015UniqueSeparatordecimal
19862851Di2015UniqueSeparatordecimal
19862918Di2015UniqueSeparatorEval()
19862918Di2015UniqueSeparatorEval()
19862918Di2015UniqueSeparator<asp:ListView ID="OrdersListView" runat="server">Di2015NewLine    <ItemTemplate>Di2015NewLine        <tr>Di2015NewLine            <td>Di2015NewLine                <asp:Button ID="EditButton" runat="server" Text="Edit" Di2015NewLine                            CommandName="Edit" />Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <asp:Label ID="OrderID" runat="server" Di2015NewLine                           Text='<%# Eval("SalesOrderID") %>' />Di2015NewLine            </td>Di2015NewLine        </tr>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:ListView>Di2015NewLine
19862918Di2015UniqueSeparator<asp:ListView ID="OrdersListView" runat="server" Di2015NewLine              ItemType="YourNamespace.YourClass">Di2015NewLine    <ItemTemplate>Di2015NewLine        <tr>Di2015NewLine            <td>Di2015NewLine                <asp:Button ID="EditButton" runat="server" Text="Edit" Di2015NewLine                            CommandName="Edit" />Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <asp:Label ID="OrderID" runat="server" Di2015NewLine                           Text='<%#: Item.YourPropertyName %>' />Di2015NewLine            </td>Di2015NewLine        </tr>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:ListView>Di2015NewLine
19862918Di2015UniqueSeparatorItemType
19862918Di2015UniqueSeparatorItem.
19862929Di2015UniqueSeparatorPropertyInfo.GetValue(Object)
19862929Di2015UniqueSeparatorType         type  = obj.myClass.GetType();Di2015NewLinePropertyInfo prop  = type.GetProperty("Attribute");Di2015NewLineobject       value = prop.GetValue(obj.myClass);Di2015NewLine
19862964Di2015UniqueSeparatorInputStreamOptions.Partial
19862964Di2015UniqueSeparatorReadAsync
19862964Di2015UniqueSeparatorReadAsync
19862964Di2015UniqueSeparatorBUFFER_SIZE
19862964Di2015UniqueSeparatorInputStreamOptions.None
19862964Di2015UniqueSeparatorContent-Length
19862964Di2015UniqueSeparator\\r\\n\\r\\n
19863030Di2015UniqueSeparatorvoid Method2()Di2015NewLine
19863030Di2015UniqueSeparator   void ManagedMethod2()Di2015NewLine      { NativePtr->Method2(); } Di2015NewLine
19863030Di2015UniqueSeparatorpublic ref class ManagedTypeDi2015NewLine{Di2015NewLine     NativeType*   NativePtr; Di2015NewLineDi2015NewLinepublic:Di2015NewLine     ManagedType() : NativePtr(new NativeType()) {}Di2015NewLine     ~ManagedType() { delete NativePtr; }Di2015NewLineDi2015NewLine     void ManagedMethod()Di2015NewLine      { NativePtr->NativeMethod(); } Di2015NewLineDi2015NewLine     void ManagedMethod2()Di2015NewLine      { NativePtr->Method2(); } Di2015NewLine}; Di2015NewLine
19863030Di2015UniqueSeparatormt.ManagedMethod2();Di2015NewLine
19863180Di2015UniqueSeparator"SET TRANSACTION ISOLATION LEVEL READ COMMITTED SELECT * FROM tblNewObject WHERE Id = @0"Di2015NewLine
19863265Di2015UniqueSeparator(dbContext as IObjectContextAdapter).ObjectContext.Connection.Open();Di2015NewLineDi2015NewLineusing (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required))Di2015NewLine    {Di2015NewLine        // perform a list of queriesDi2015NewLine        // The connection will not close!Di2015NewLine        scope.Complete();Di2015NewLine        (dbContext as IObjectContextAdapter).ObjectContext.Connection.Close();Di2015NewLine    }Di2015NewLine
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorHttpResponseMessage
19863507Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    return await SendAsyncCore(request, cancellationToken);Di2015NewLine}Di2015NewLinecatch (HttpResponseException httpResponseException)Di2015NewLine{Di2015NewLine    return httpResponseException.Response;Di2015NewLine}Di2015NewLinecatch (Exception exception)Di2015NewLine{Di2015NewLine    exceptionInfo = ExceptionDispatchInfo.Capture(exception);Di2015NewLine}Di2015NewLine
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorHttpResponseMessage
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorHttpResponseMessage
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorIExceptionFilter
19863507Di2015UniqueSeparatorIHttpActionResult
19863507Di2015UniqueSeparatorHttpResponseMessage
19863507Di2015UniqueSeparatorHttpResponseMessage
19863507Di2015UniqueSeparatorHttpResponseException
19863507Di2015UniqueSeparatorIHttpActionResult
19863612Di2015UniqueSeparatorint
19863612Di2015UniqueSeparatorpublic TextString Get(Enum enumeration)Di2015NewLine{Di2015NewLine  string name = enumeration.ToString();Di2015NewLine  int index = Convert.ToInt32(enumeration);Di2015NewLineDi2015NewLine  // ...Di2015NewLine  return null;Di2015NewLine}Di2015NewLine
19863612Di2015UniqueSeparatorenum Range : long { Max = 2147483648L, Min = 255L };Di2015NewLine
19863724Di2015UniqueSeparatorSomeMethod
19863724Di2015UniqueSeparatore.Error
19863812Di2015UniqueSeparator'True'
19863812Di2015UniqueSeparator'False'
19863812Di2015UniqueSeparatortrue
19863812Di2015UniqueSeparatorfalse
19863812Di2015UniqueSeparatorbtn.Attributes.Add("onclick", string.Format("return A({0});", bNeed ? "true" : "false");Di2015NewLine
19863812Di2015UniqueSeparatorbNeed.ToString().ToLowerInvariant()
19863812Di2015UniqueSeparatorbNeed ? "true" : "false"
19863812Di2015UniqueSeparatorBoolean.ToString()
19863812Di2015UniqueSeparator"True"
19863812Di2015UniqueSeparator"False"
19863893Di2015UniqueSeparator!*'();:@&=+$,/?%#[]
19863893Di2015UniqueSeparatorCFURLCreateStringByAddingPercentEscapes
19863893Di2015UniqueSeparatorUri.EscapeUriString
19864066Di2015UniqueSeparatorconfigSection
19864066Di2015UniqueSeparatorlog4net
19864066Di2015UniqueSeparator<configuration>Di2015NewLine    <configSections>Di2015NewLine        <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />Di2015NewLine    </configSections>Di2015NewLineDi2015NewLine    <!-- other configurations, such as appSettings and whatnot -->Di2015NewLineDi2015NewLine    <log4net>Di2015NewLine        <!-- log4net configuration that you already have -->Di2015NewLine    </log4net>Di2015NewLine</configuration>Di2015NewLine
19864066Di2015UniqueSeparatorlog4net
19864066Di2015UniqueSeparatorlog4net.Config.Log4NetConfigurationSectionHandler
19864083Di2015UniqueSeparatorDataTempalte
19864083Di2015UniqueSeparatorListBoxItem
19864083Di2015UniqueSeparator    <phone:LongListSelector x:Name="MyLongListSelector"Di2015NewLine                Margin="0,0,0,0" Di2015NewLine                ItemsSource="{Binding My_Items}"Di2015NewLine                                    SelectionChanged="MyLongListSelector_SelectionChanged">Di2015NewLineDi2015NewLine                <phone:LongListSelector.ItemTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <ListBoxItem >Di2015NewLine                            <StackPanel Margin="0,0,0,7" local:TiltEffect.IsTiltEnabled="True" MinWidth="460">Di2015NewLineDi2015NewLine                                <StackPanel.Background>Di2015NewLine                                    <ImageBrush Stretch="Fill" ImageSource="/Assets/Photos/items.png"/>Di2015NewLine                                </StackPanel.Background>                                Di2015NewLineDi2015NewLine                                <TextBlock Text="{Binding Title}" Di2015NewLine                                           TextWrapping="Wrap" Style="{StaticResource PhoneTextExtraLargeStyle}" Di2015NewLine                                           TextAlignment="Center"Di2015NewLine                                           Margin="0, 5, 0, 15" FontFamily="Assets/Fonts/BNazanin.ttf#B Nazanin"/>                                                                    Di2015NewLine                            </StackPanel>Di2015NewLine                        </ListBoxItem>Di2015NewLine                    </DataTemplate>                        Di2015NewLineDi2015NewLine                </phone:LongListSelector.ItemTemplate>Di2015NewLine            </phone:LongListSelector>Di2015NewLine
19864313Di2015UniqueSeparator    string result ="";Di2015NewLineDi2015NewLine    bool callComplete = false;Di2015NewLine    while (callComplete != true)Di2015NewLine    {Di2015NewLine        var request = (HttpWebRequest)WebRequest.Create(target);Di2015NewLine        request.ContentType = "application/json";Di2015NewLine        request.Headers.Add("Authorization", "Bearer " + oAuthKey);Di2015NewLine        request.AllowAutoRedirect = false;Di2015NewLine                    //...Di2015NewLine
19864344Di2015UniqueSeparator    // Here we have the list of actions (things to be done later)Di2015NewLine    List<Action> ActionsToPerform;Di2015NewLineDi2015NewLine    // And this will store how far we are through the listDi2015NewLine    List<Action>.Enumerator ActionEnumerator;Di2015NewLineDi2015NewLine    // This will allow us to execute a new action after a certain period of timeDi2015NewLine    Timer ActionTimer;Di2015NewLineDi2015NewLine    public ActionsManager()Di2015NewLine    {Di2015NewLine        ActionsToPerform = new List<Action>();Di2015NewLineDi2015NewLine        // We can describe actions in this lambda format, Di2015NewLine        // () means the action has no parameters of its ownDi2015NewLine        // then we put => { //some standard c# code goes here }Di2015NewLine        // to describe the actionDi2015NewLineDi2015NewLine        // CAUTION: See belowDi2015NewLineDi2015NewLine        ActionsToPerform.Add(() => { Function1("Some string"); });Di2015NewLine        ActionsToPerform.Add(() => { Function2(3); });Di2015NewLineDi2015NewLine        // Here we create a timer so that every thousand miliseconds we trigger theDi2015NewLine        // Elapsed eventDi2015NewLine        ActionTimer = new Timer(1000.0f);Di2015NewLine        ActionTimer.Elapsed += new ElapsedEventHandler(ActionTimer_Elapsed);Di2015NewLineDi2015NewLine        // An enumerator starts at the begining of the list and we can work throughDi2015NewLine        // the list sequentiallyDi2015NewLine        ActionEnumerator = ActionsToPerform.GetEnumerator();Di2015NewLineDi2015NewLine        // Move to the start of the listDi2015NewLine        ActionEnumerator.MoveNext();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    // This will be triggered when the elpased event happens in out timerDi2015NewLine    void ActionTimer_Elapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        // First we execute the current action by calling it just like a functionDi2015NewLine        ActionEnumerator.Current();Di2015NewLineDi2015NewLine        // Then we move the enumerator on to the next listDi2015NewLine        bool result = ActionEnumerator.MoveNext();Di2015NewLineDi2015NewLine        // if we got false moving to the next, Di2015NewLine        // we have completed all the actions in the listDi2015NewLine        if (!result)Di2015NewLine        {Di2015NewLine            ActionTimer.Stop();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Some dummy functions...Di2015NewLine    public void Function1(string s)Di2015NewLine    {Di2015NewLine        Console.WriteLine(s);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Function2(int x)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Printing hello {0} times", x);Di2015NewLine        for (int i = 0; i < x; ++i)Di2015NewLine        {Di2015NewLine            Console.WriteLine("hello");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19864344Di2015UniqueSeparatorfor (int i = 0; i < 10; ++i)Di2015NewLine{Di2015NewLine    ActionsToPerform.Add(() => { Function2(i); });Di2015NewLine}Di2015NewLine
19864349Di2015UniqueSeparatorvar invoices = (from r in input.Split(new [] {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries).Select(x => x.Split('|'))Di2015NewLine                let invoiceId = int.Parse(r[0], CultureInfo.InvariantCulture)Di2015NewLine                let amount = decimal.Parse(r[1], CultureInfo.InvariantCulture)Di2015NewLine                let itemSequenceNumber = int.Parse(r[2], CultureInfo.InvariantCulture)Di2015NewLine                let quantity = decimal.Parse(r[3], CultureInfo.InvariantCulture)Di2015NewLine                let pricePerUnit = decimal.Parse(r[4], CultureInfo.InvariantCulture)Di2015NewLine                let account = r[5]Di2015NewLine                let distribution = decimal.Parse(r[6], CultureInfo.InvariantCulture)Di2015NewLine                group new { amount, itemSequenceNumber, quantity, pricePerUnit, account, distribution } by invoiceId into gDi2015NewLine                select new Invoice() {Di2015NewLine                    InvoiceId = g.Key,Di2015NewLine                    Amount = g.First().amount,Di2015NewLine                    LineItems = (from i in gDi2015NewLine                                 group i by i.itemSequenceNumber into g2Di2015NewLine                                 select new LineItem() {Di2015NewLine                                     SequenceNumber = g2.Key,Di2015NewLine                                     Quantity = g2.First().quantity,Di2015NewLine                                     PricePerUnit = g2.First().pricePerUnit,Di2015NewLine                                     Allocations = (from a in g2Di2015NewLine                                                    select new Allocation() {Di2015NewLine                                                        Account = a.account,Di2015NewLine                                                        Distribution = a.distributionDi2015NewLine                                                    }).ToList()Di2015NewLine                                 }).ToList()Di2015NewLine                }).ToList();Di2015NewLine
19864349Di2015UniqueSeparatorforeach(var i in invoices)Di2015NewLine{Di2015NewLine    foreach(var l in i.LineItems)Di2015NewLine    {Di2015NewLine        l.Invoice = i;Di2015NewLine        foreach(var a in l.Allocations)Di2015NewLine        {Di2015NewLine            a.LineItem = l;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19864368Di2015UniqueSeparatormultipart/form
19864368Di2015UniqueSeparatorapplication/octet-stream
19864368Di2015UniqueSeparatorRequest.Content.ReadAsStreamAsync()
19864434Di2015UniqueSeparatorHttpUtility
19864434Di2015UniqueSeparatorSystem.Web.dll
19864434Di2015UniqueSeparatorSystem.String
19864491Di2015UniqueSeparatorModel
19864491Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Edit(PersonEditModel model)Di2015NewLine{Di2015NewLine    // Validation round one, using attributes defined on your propertiesDi2015NewLine    // The model binder checks for you if required fields are submitted, with correct lengthDi2015NewLine    if(ModelState.IsValid)Di2015NewLine    {Di2015NewLine        // Validation round two, we push our model to the business layerDi2015NewLine        var errorMessage = this.personService.Update(model);Di2015NewLineDi2015NewLine        // some error has returned from the business layerDi2015NewLine        if(!string.IsNullOrEmpty(errorMessage))Di2015NewLine        {Di2015NewLine            // Error is added to be displayed to the userDi2015NewLine            ModelState.AddModelError(errorMessage);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            // Update successfullDi2015NewLine            return RedirectToAction("View", "Person", new { ID = model.ID});Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Back to our form with current model values, as they're still in the ModelStateDi2015NewLine    return View();Di2015NewLine}Di2015NewLine
19864608Di2015UniqueSeparatorDim data = "|111|,|2,2|,|room 1|,|13'2'' x 13'8''|,||,||,||,||"Di2015NewLineDim delim = New String() {"|,|"}Di2015NewLineDim results = data.Substring(1, data.Length - 2).Split(delim, StringSplitOptions.None)Di2015NewLineDi2015NewLineFor Each s In resultsDi2015NewLine  Console.WriteLine(s)Di2015NewLineNextDi2015NewLine
19864608Di2015UniqueSeparator111Di2015NewLine2,2Di2015NewLineroom 1Di2015NewLine13'2'' x 13'8''Di2015NewLine""Di2015NewLine""Di2015NewLine""Di2015NewLine""Di2015NewLine
19864624Di2015UniqueSeparator<TabControl>Di2015NewLine    <TabControl.Resources>Di2015NewLine        <Style TargetType="{x:Type Grid}">Di2015NewLine            <Setter Property="Background" Value="Red"/>Di2015NewLine        </Style>Di2015NewLine        <Style TargetType="{x:Type TabPanel}">Di2015NewLine            <Setter Property="HorizontalAlignment" Value="Center"/>Di2015NewLine        </Style>Di2015NewLine    </TabControl.Resources>Di2015NewLine    <TabItem Header="Test 1"/>Di2015NewLine    <TabItem Header="Test 2"/>Di2015NewLine    <TabItem Header="Test 3"/>Di2015NewLine    <TabItem Header="Test 4"/>Di2015NewLine</TabControl>Di2015NewLine
19864649Di2015UniqueSeparator@using (Ajax.BeginForm("userResults", "User", new AjaxOptions()Di2015NewLine                    {Di2015NewLine                        HttpMethod = "GET",Di2015NewLine                        UpdateTargetId = "results",Di2015NewLine                        InsertionMode = InsertionMode.ReplaceDi2015NewLine                    }))Di2015NewLine
19864649Di2015UniqueSeparatorbundles.Add(new ScriptBundle("~/bundles/jquery").Include(Di2015NewLine                    "~/Scripts/jquery-{version}.js"));Di2015NewLineDi2015NewLinebundles.Add(new ScriptBundle("~/bundles/jqueryval").Include(Di2015NewLine                    "~/Scripts/jquery.unobtrusive*"));Di2015NewLine
19864649Di2015UniqueSeparator@Scripts.Render("~/bundles/jquery")Di2015NewLine@Scripts.Render("~/bundles/jqueryval")Di2015NewLine
19864712Di2015UniqueSeparatorContains
19864712Di2015UniqueSeparatorbool Equals(object obj)
19864712Di2015UniqueSeparatorGetHashCode()
19864712Di2015UniqueSeparatorstruct
19864712Di2015UniqueSeparatorpublic struct MyCar : IEquatable<MyCar>Di2015NewLine{Di2015NewLine    public int id { get; set; }Di2015NewLine    public string name { get; set; }Di2015NewLineDi2015NewLine    private static readonly StringComparer stringComparer = StringComparer.Ordinal;Di2015NewLineDi2015NewLine    public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        if (obj is MyCar == false)Di2015NewLine            return false;Di2015NewLine        return Equals((MyCar)obj);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(MyCar car)Di2015NewLine    {Di2015NewLine        return this.id.Equals(car.id) && stringComparer.Equals(this.name,car.name);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        uncheckedDi2015NewLine        {Di2015NewLine            int i = 17;Di2015NewLine            i = i * 23 + id.GetHashCode();Di2015NewLine            i = i * 23 + stringComparer.GetHashCode(name);Di2015NewLine            return i;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19864810Di2015UniqueSeparatorProgram CashRegister = new Program();Di2015NewLineCashRegister.receipt();Di2015NewLine
19864810Di2015UniqueSeparatorProgram.reciept();Di2015NewLine
19864810Di2015UniqueSeparatorreciept();Di2015NewLine
19864810Di2015UniqueSeparatorProgram
19864810Di2015UniqueSeparatorstatic function Main(...
19864810Di2015UniqueSeparatorreciept
19864810Di2015UniqueSeparatorProgram
19864810Di2015UniqueSeparatorstatic
19864810Di2015UniqueSeparatorreceipt()
19864810Di2015UniqueSeparatorstatic
19864810Di2015UniqueSeparatorreciept
19864810Di2015UniqueSeparator... this.reciept() ...Di2015NewLine
19864810Di2015UniqueSeparator... yourInstance.reciept() ...Di2015NewLine
19864810Di2015UniqueSeparator... Type.reciept() ...Di2015NewLine
19864882Di2015UniqueSeparatorSqlDataReader dr = command.ExecuteReader();Di2015NewLineDi2015NewLineif(dr.Read())Di2015NewLine{Di2015NewLine    if (dr[0].ToString() == username)Di2015NewLine    {Di2015NewLine        Session["UserAuthentication"] = username;Di2015NewLine        Session.Timeout = 1;Di2015NewLine        Response.Redirect("About.aspx");Di2015NewLine    }Di2015NewLine    else {Di2015NewLine       // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
19864882Di2015UniqueSeparator.Read()
19864882Di2015UniqueSeparatorSqlDataReader
19864882Di2015UniqueSeparatorwhile (dr.Read())Di2015NewLine{Di2015NewLine     .....Di2015NewLine}Di2015NewLine
19864917Di2015UniqueSeparator.suo
19864917Di2015UniqueSeparator.gitignore
19864917Di2015UniqueSeparator.gitignore
19864919Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    var index = 0;Di2015NewLine    var input = "this FOO is FOO a FOO test";Di2015NewLine    var pattern = "FOO";Di2015NewLine    var result = Regex.Replace(input, pattern, m => "{" + (index++) + "}");Di2015NewLineDi2015NewLine    Console.WriteLine(result); // produces "this {0} is {1} a {2} test"Di2015NewLine}Di2015NewLine
19865031Di2015UniqueSeparatorDataTemplates
19865031Di2015UniqueSeparator<Window>Di2015NewLine    <Window.Resources>Di2015NewLine       <DataTemplate DataType="{x:Type local:VM1}">Di2015NewLine          <!-- View 1 Here -->Di2015NewLine       </DataTemplate>Di2015NewLineDi2015NewLine       <DataTemplate DataType="{x:Type local:VM2}">Di2015NewLine          <!-- View 2 here -->Di2015NewLine       </DataTemplate>Di2015NewLine    <Window.Resources>Di2015NewLineDi2015NewLine    <ContentPresenter Content="{Binding}"/>Di2015NewLineDi2015NewLine</Window>Di2015NewLine
19865031Di2015UniqueSeparatorWindow.DataContext
19865031Di2015UniqueSeparatorVM1
19865031Di2015UniqueSeparatorView1
19865031Di2015UniqueSeparatorWindow.DataContext
19865031Di2015UniqueSeparatorVM2
19865031Di2015UniqueSeparatorView2
19865113Di2015UniqueSeparator[Test]Di2015NewLinepublic void MyTest([Range(0, 10)] int iteration)Di2015NewLine{Di2015NewLine...Di2015NewLine}Di2015NewLine
19865240Di2015UniqueSeparator@Html.RenderPartial("_ProviderRatingWidget", new ViewDataDictionary(Model.RatingInfo));Di2015NewLine
19865270Di2015UniqueSeparatoruserdeleted
19865270Di2015UniqueSeparatorlecturer
19865270Di2015UniqueSeparator'lecturer'
19865270Di2015UniqueSeparatorDELETE FROM COMMENT WHERE USERNAME=lecturerDi2015NewLine
19865270Di2015UniqueSeparatorlecturer
19865270Di2015UniqueSeparatorstring sql="DELETE FROM COMMENT WHERE USERNAME=@username";Di2015NewLine...Di2015NewLineDi2015NewLinesqlcommand.Parameters.Add("@username", SqlDbType.NVarChar).Value = userdeleted;Di2015NewLine
19865284Di2015UniqueSeparatorpublic class KewlButton : Button {Di2015NewLine  public delegate void SetBackColor(Color color);Di2015NewLine  static SetBackColor setBackColor;Di2015NewLine  public KewlButton(){Di2015NewLine    setBackColor += ChangeBackColor;Di2015NewLine    Disposed += (s,e) => {Di2015NewLine       setBackColor -= ChangeBackColor;Di2015NewLine    };Di2015NewLine  }Di2015NewLine  private void ChangeBackColor(Color color){ Di2015NewLine     BackColor = color;Di2015NewLine  }Di2015NewLine  public class Crossdress {Di2015NewLine    public static Color BackColor { Di2015NewLine        set {Di2015NewLine            if(setBackColor!=null) setBackColor(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine//UsageDi2015NewLineKewlButton.Crossdress.BackColor = Color.Red;Di2015NewLine
19865353Di2015UniqueSeparatorpublic class UserAuditDi2015NewLine{Di2015NewLine    [JsonProperty("username")]Di2015NewLine    public string UserName { get; set; }Di2015NewLineDi2015NewLine    [JsonProperty("file/folder")]Di2015NewLine    public string FileFolder { get; set; }Di2015NewLineDi2015NewLine    [JsonProperty("transaction")]Di2015NewLine    public string Transaction { get; set; }Di2015NewLineDi2015NewLine    [JsonProperty("access")]Di2015NewLine    public string Access { get; set; }Di2015NewLineDi2015NewLine    [JsonProperty("time")]Di2015NewLine    public string Time { get; set; }Di2015NewLine}Di2015NewLine
19865380Di2015UniqueSeparatorchart1.Series[0].EmptyPointStyle.Color = Color.Transparent;Di2015NewLine
19865380Di2015UniqueSeparatorBackGradientStyle = GradientStyle.TopBottom,Di2015NewLine
19865431Di2015UniqueSeparatorchar result;Di2015NewLinestring input = Console.ReadLine();Di2015NewLineDi2015NewLineif (char.TryParse(input, out result))Di2015NewLine{Di2015NewLine    //The input is a char - write your code here.Di2015NewLine}Di2015NewLineDi2015NewLine//The input is not a char.Di2015NewLine
19865566Di2015UniqueSeparatorstring query = @"SELECT e.*Di2015NewLine                 FROM EMP eDi2015NewLine                 INNER JOIN Junction j ON e.ID = j.empIDDi2015NewLine                 WHERE j.skillID = @SkillID";Di2015NewLineDi2015NewLineint skillID = 5;Di2015NewLineDi2015NewLineusing (var conn = new SqlConnection("connectionString"))Di2015NewLine{Di2015NewLine    using (var cmd = new SqlCommand(query, conn))Di2015NewLine    {Di2015NewLine        cmd.Parameters.AddWithValue("@SkillID", skillID);Di2015NewLineDi2015NewLine        using (var reader = cmd.ExecuteReader())Di2015NewLine        {Di2015NewLine            while (reader.Read())Di2015NewLine            {Di2015NewLine                int id = (int)reader["ID"];Di2015NewLine                int name = (string)reader["Name"];Di2015NewLineDi2015NewLine                // etc.Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19865566Di2015UniqueSeparatorskillID
19865651Di2015UniqueSeparator    [HttpPost]Di2015NewLine    public JsonResult Edit(string Data)Di2015NewLine    {Di2015NewLine    System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();Di2015NewLine    var formData = js.Deserialize<object>(Data) as IDictionary<string, object>;Di2015NewLineDi2015NewLine    List<SqlDataRecord> sqlDataRecords = new List<SqlDataRecord>(); Di2015NewLineDi2015NewLine    foreach (var item in formData)Di2015NewLine    {Di2015NewLine        // Create sql data record with appropriate properties populated and add to list if applicableDi2015NewLine    }Di2015NewLineDi2015NewLine    SqlParameter[] sqlParameters = new SqlParameter("YourTableTypeParamName", SqlDbType.Structured)Di2015NewLine                        {Di2015NewLine                            Value = sqlDataRecords,Di2015NewLine                            TypeName = "dbo.YourTableType"Di2015NewLine                        };Di2015NewLineDi2015NewLine        SqlConnection conn = ... // define connection hereDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            using (SqlCommand command = conn.CreateCommand())Di2015NewLine            {Di2015NewLine                command.Connection = conn;Di2015NewLine                conn.Open();Di2015NewLineDi2015NewLine                command.CommandText = "YourStoredProcedureName";Di2015NewLine                command.CommandType = CommandType.StoredProcedure;Di2015NewLine                command.Parameters.AddRange(sqlParameters);Di2015NewLineDi2015NewLine                using (DbDataReader reader = command.ExecuteReader())Di2015NewLine                {Di2015NewLine                    // Do something with resultsDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            conn.Close();Di2015NewLine        }Di2015NewLineDi2015NewLine    return null;Di2015NewLine}Di2015NewLine
19865714Di2015UniqueSeparator[Display(Name = "File Name")]    //this is the line you must add.Di2015NewLinepublic string fileName{get;set;} //this is your model property name.Di2015NewLine
19865714Di2015UniqueSeparatorFile Name
19865753Di2015UniqueSeparator@Html.TextBoxFor(u => u.Something, new { @Value = "Add your value here"})Di2015NewLine
19865873Di2015UniqueSeparatorFileCompare
19865873Di2015UniqueSeparatorName
19865873Di2015UniqueSeparatordir1
19865873Di2015UniqueSeparatordir2
19865873Di2015UniqueSeparatorC:\\Users\\Puppie\\Desktop\\KittiesWarWP8\\KWGamePages\\Assets\\AlignmentGrid.png
19865873Di2015UniqueSeparatorC:\\Users\\Puppie\\Desktop\\Logicielpourprojet\\KittiesWarWP8\\KWGamePages\\Assets\\AlignmentGrid.png
19865873Di2015UniqueSeparatorC:\\Users\\Puppie\\Desktop\\Logicielpourprojet\\KittiesWarWP8\\KWGamePages\\AdditionalAssets\\AlignmentGrid.png
19865873Di2015UniqueSeparatorFileCompare
19865873Di2015UniqueSeparatorFileCompare
19865873Di2015UniqueSeparatordir1
19865873Di2015UniqueSeparatordir2
19865873Di2015UniqueSeparatorFileCompare
19865873Di2015UniqueSeparatordir1
19865873Di2015UniqueSeparatordir2
19866013Di2015UniqueSeparatorSPFieldUserValueCollection values = new SPFieldUserValueCollection();Di2015NewLineSPUser user = web.EnsureUser(@"domen\\username");Di2015NewLinevalues.Add(new SPFieldUserValue(web, user.ID, user.Name));      Di2015NewLineitem["Participants"] = values;Di2015NewLine
19866036Di2015UniqueSeparatorb77a5c....
19866036Di2015UniqueSeparator969db8...
19866041Di2015UniqueSeparatorvar transactionFailed = false;Di2015NewLinetryDi2015NewLine{Di2015NewLine    using (var tx = new TransactionScope())Di2015NewLine    {Di2015NewLine        tx.Complete();Di2015NewLine    }Di2015NewLine}Di2015NewLinecatch (TransactionAbortedException ex)Di2015NewLine{Di2015NewLine    transactionFailed = true;Di2015NewLine    writer.WriteLine("TransactionAbortedException Message: {0}", ex.Message);Di2015NewLineDi2015NewLine}Di2015NewLinecatch (ApplicationException ex)Di2015NewLine{Di2015NewLine    transactionFailed = true;Di2015NewLine    writer.WriteLine("ApplicationException Message: {0}", ex.Message);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    transactionFailed = true;Di2015NewLine    writer.WriteLine("Exception Message: {0}", ex.Message);Di2015NewLine}Di2015NewLine
19866148Di2015UniqueSeparatordiff = matches.First().Field<decimal?>("Amt") - Di2015NewLine       matches.Skip(1).First().Field<decimal?>("Amt")Di2015NewLine
19866148Di2015UniqueSeparatordiff
19866148Di2015UniqueSeparator0
19866148Di2015UniqueSeparatorAmt
19866148Di2015UniqueSeparatorGetValueOrDefault()
19866148Di2015UniqueSeparatordiff = matches.First().Field<decimal?>("Amt").GetValueOrDefault() - Di2015NewLine       matches.Skip(1).First().Field<decimal?>("Amt").GetValueOrDefault()Di2015NewLine
19866200Di2015UniqueSeparatorvoid hide(Control el, string cssClass) {Di2015NewLineDi2015NewLine    foreach (WebControl c in el.Controls)Di2015NewLine    {Di2015NewLine        if (c.CssClass == cssClass)Di2015NewLine        {Di2015NewLine            c.Visible = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19866200Di2015UniqueSeparatorhide(this, "someclass");Di2015NewLine
19866368Di2015UniqueSeparatorSystem.Drawing
19866389Di2015UniqueSeparator@helper _href(string url)Di2015NewLine{Di2015NewLine    @VirtualPathUtility.ToAbsolute(url)Di2015NewLine}Di2015NewLine
19866389Di2015UniqueSeparator<a href="@_href("~/page.html")">linky</a>
19866422Di2015UniqueSeparatorDataControlRowType.DataRow
19866422Di2015UniqueSeparator"PF_NonScrumStory"
19866583Di2015UniqueSeparatorpublic enum MyEnumDi2015NewLine{Di2015NewLine    ZenitStPetersburg = 100769,Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19866583Di2015UniqueSeparatorstring text = ((MyEnum)100769).ToString();//You're doneDi2015NewLine
19866583Di2015UniqueSeparatorstring text = ((MyEnum)Enum.ToObject(MyEnum),100769).ToString();Di2015NewLine
19866694Di2015UniqueSeparatorpublic async Task<string> GetContentAsync(string url)Di2015NewLine{Di2015NewLine  ... // Logic here, e.g., using HttpClientDi2015NewLine}Di2015NewLineDi2015NewLinepublic string GetContent(string url)Di2015NewLine{Di2015NewLine  ... // Duplicate logic here, e.g., using WebClientDi2015NewLine}Di2015NewLine
19866701Di2015UniqueSeparatorvar xDoc = XDocument.Parse(@"<?xml version='1.0' encoding='utf-8'?>Di2015NewLine    <A1 xmlns='urn:sample'>Di2015NewLine        <B2>Di2015NewLine            <C3 id='1'>Di2015NewLine                <D7><E5 id='abc' /></D7>Di2015NewLine                <D4 id='1'><E5 id='abc' /></D4>Di2015NewLine                <D4 id='2'><E5 id='abc' /></D4>Di2015NewLine            </C3>Di2015NewLine        </B2>Di2015NewLine    </A1>");Di2015NewLineDi2015NewLine// Notice thisDi2015NewLineXmlNamespaceManager nsmgr = new XmlNamespaceManager(new NameTable());Di2015NewLinensmgr.AddNamespace("sample", "urn:sample");Di2015NewLineDi2015NewLinestring xPath = "//sample:B2/sample:C3/sample:D4";Di2015NewLineDi2015NewLinevar eleList = xDoc.XPathSelectElements(xPath, nsmgr).ToList();Di2015NewLineforeach (var xElement in eleList)Di2015NewLine{Di2015NewLine    Console.WriteLine(xElement);Di2015NewLine}Di2015NewLine
19866832Di2015UniqueSeparator<script>Di2015NewLine    $(function()Di2015NewLine    {Di2015NewLine        $.ajax(Di2015NewLine        {Di2015NewLine            url: "/api/request",Di2015NewLine        }).done(function(responseUrl)Di2015NewLine        {Di2015NewLine            window.location.href = responseUrl;Di2015NewLine        });Di2015NewLine    });Di2015NewLine</script>Di2015NewLine
19866858Di2015UniqueSeparatorprivate bool IsValidCrawler(HttpRequestBase request)Di2015NewLine{Di2015NewLine    bool isCrawler = request.Browser.Crawler;Di2015NewLineDi2015NewLine    return isCrawler;Di2015NewLine}Di2015NewLine
19867026Di2015UniqueSeparatorDeleteCommand="DELETE FROM [TableName] WHERE [ColumnName]=@[ParameterName];">Di2015NewLine            <DeleteParameters>Di2015NewLine                <asp:ControlParameter Name="[ParameterName]" ControlId="storyGridView" PropertyName="SelectedValue" />Di2015NewLine            </DeleteParameters>Di2015NewLine
19867031Di2015UniqueSeparatorpublic class SearchOptionsDataBinder : DefaultModelBinderDi2015NewLine{Di2015NewLine  public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)Di2015NewLine  {Di2015NewLine    if (bindingContext.ModelType == typeof(SearchOptions))Di2015NewLine    {Di2015NewLine      var baseResult = (SearchOptions)base.BindModel(controllerContext, bindingContext);Di2015NewLine      var request = controllerContext.HttpContext.Request;Di2015NewLineDi2015NewLine      baseResult.Contracts = request.QueryStringDi2015NewLine                                    .GetValues("contracts")Di2015NewLine                                    .Select(GetContractTypeByCode)Di2015NewLine                                    .Where(c => !string.IsNullOrEmpty(c.Code))Di2015NewLine                                    .ToArray();Di2015NewLine      return baseResult;Di2015NewLine    }Di2015NewLineDi2015NewLine    return base.BindModel(controllerContext, bindingContext);        Di2015NewLine  }Di2015NewLine} Di2015NewLine
19867031Di2015UniqueSeparatorModelBinders.Binders.Add(typeof(SearchOptions), new SearchOptionsDataBinder());Di2015NewLine
19867043Di2015UniqueSeparator@"<div id=""post_message_\\d+"">(?<Content>(\\r|\\n|.)*)</div>"Di2015NewLine
19867043Di2015UniqueSeparatorstring searchString = @"<div id=""post_message_1234567"">Di2015NewLineDi2015NewLine        <a href=""http://blahblah.com"" target=""_blank""><img src=""http://blahblah.com/iuhiuhuh.gif"" border=""0"" alt="""" /></a> <br />Di2015NewLine<br />Di2015NewLinejofjhoeifjoiwefjoweifj<br />Di2015NewLine blahblahblahpokpoekpfowef<br />Di2015NewLine<br />Di2015NewLinekhfiudhfisduhfiusdfh<br />Di2015NewLine<br />Di2015NewLine<a href=""http://blah.com/img.php?image=trepazoid.jpg"" target=""_blank""><img src=""http://blah.com/loc367/euhfwieufhwifuhiwefuh.jpg"" border=""0"" alt="""" /></a><br />Di2015NewLine<br />Di2015NewLineone<br />Di2015NewLine two*three<br />Di2015NewLine 87879879 nuts<br />Di2015NewLine 11 bananas<br />Di2015NewLine<br />Di2015NewLine<a href=""hjoiwjhfoweif.dat"" target=""_blank"">Monkeys</a>Di2015NewLine        </div>";Di2015NewLineRegex regex = new Regex(@"<div id=""post_message_\\d+"">(?<Content>(\\r|\\n|.)*)</div>");Di2015NewLineMatch match = regex.Match(searchString);Di2015NewLinebool success = match.Success; // TrueDi2015NewLinestring content = match.Groups["Content"].Value;Di2015NewLine
19867043Di2015UniqueSeparatorcontent
19867119Di2015UniqueSeparatorforeach(var v in Enumerable.Range(1,10).Skip(1))Di2015NewLine    v.Dump();Di2015NewLine
19867119Di2015UniqueSeparatorIL_0001:  nop         Di2015NewLineIL_0002:  ldc.i4.1    Di2015NewLineIL_0003:  ldc.i4.s    0A Di2015NewLineIL_0005:  call        System.Linq.Enumerable.RangeDi2015NewLineIL_000A:  ldc.i4.1    Di2015NewLineIL_000B:  call        System.Linq.Enumerable.Skip//Call to SkipDi2015NewLineIL_0010:  callvirt    System.Collections.Generic.IEnumerable<System.Int32>.GetEnumeratorDi2015NewLineIL_0015:  stloc.1     // CS$5$0000Di2015NewLineIL_0016:  br.s        IL_0026Di2015NewLineIL_0018:  ldloc.1     // CS$5$0000Di2015NewLineIL_0019:  callvirt    System.Collections.Generic.IEnumerator<System.Int32>.get_CurrentDi2015NewLineIL_001E:  stloc.0     // vDi2015NewLineIL_001F:  ldloc.0     // vDi2015NewLineIL_0020:  call        LINQPad.Extensions.DumpDi2015NewLineIL_0025:  pop         Di2015NewLineIL_0026:  ldloc.1     // CS$5$0000Di2015NewLineIL_0027:  callvirt    System.Collections.IEnumerator.MoveNextDi2015NewLineIL_002C:  stloc.2     // CS$4$0001Di2015NewLineIL_002D:  ldloc.2     // CS$4$0001Di2015NewLineIL_002E:  brtrue.s    IL_0018Di2015NewLineIL_0030:  leave.s     IL_0042Di2015NewLineIL_0032:  ldloc.1     // CS$5$0000Di2015NewLineIL_0033:  ldnull      Di2015NewLineIL_0034:  ceq         Di2015NewLineIL_0036:  stloc.2     // CS$4$0001Di2015NewLineIL_0037:  ldloc.2     // CS$4$0001Di2015NewLineIL_0038:  brtrue.s    IL_0041Di2015NewLineIL_003A:  ldloc.1     // CS$5$0000Di2015NewLineIL_003B:  callvirt    System.IDisposable.DisposeDi2015NewLineIL_0040:  nop         Di2015NewLineIL_0041:  endfinally  Di2015NewLine
19867119Di2015UniqueSeparatorSkip
19867119Di2015UniqueSeparatorIEnumerator<int> e = ((IEnumerable<int>)values).GetEnumerator();//Get the enumeratorDi2015NewLinetryDi2015NewLine{Di2015NewLine  int m;//This variable is here prior to c#5.0Di2015NewLine  while(e.MoveNext())Di2015NewLine  {//int m; is declared here starting from c#5.0Di2015NewLine    m = (int)(int)e.Current;Di2015NewLine    //Your code hereDi2015NewLine  }Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine  if (e != null) ((IDisposable)e).Dispose();Di2015NewLine}Di2015NewLine
19867119Di2015UniqueSeparatorVeryLongRunningMethodThatReturnsEnumerable
19867119Di2015UniqueSeparatorforeach(var obj in VeryLongRunningMethodThatReturnsEnumerable())Di2015NewLine{Di2015NewLine   //Do something with that objDi2015NewLine}Di2015NewLine
19867268Di2015UniqueSeparatorAsyncTask
19867321Di2015UniqueSeparatorint fingerCount1 = frame.Fingers.Count;Di2015NewLine
19867321Di2015UniqueSeparatorint fingerCount2 = frame.Hands.Sum(x => x.Fingers.Count);Di2015NewLine
19867805Di2015UniqueSeparatorList<T>
19867805Di2015UniqueSeparatorTask.Factory.StartNew
19867805Di2015UniqueSeparatorasync
19867805Di2015UniqueSeparatorawait
19867816Di2015UniqueSeparatorToBrowseDto
19867816Di2015UniqueSeparatorToEditDto
19867991Di2015UniqueSeparatorIf
19867991Di2015UniqueSeparatorIf Decimal.TryParse(txtParts.Text, decParts) ThenDi2015NewLine    If decParts <= 0 ThenDi2015NewLine        MessageBox.Show("ERROR: Value must be a positive number!")Di2015NewLine        Return FalseDi2015NewLine    End IfDi2015NewLineElseDi2015NewLine    MessageBox.Show("ERROR: Value must be numeric!")Di2015NewLine    Return FalseDi2015NewLineEnd IfDi2015NewLine
19867991Di2015UniqueSeparatorElse
19867991Di2015UniqueSeparatorDecimal.TryParse
19868035Di2015UniqueSeparatorint[]
19868035Di2015UniqueSeparatorint
19868035Di2015UniqueSeparatorArraySegment<int>
19868035Di2015UniqueSeparatorint[]
19868082Di2015UniqueSeparatorhttp://localhost/api/controller?s1=<string>
19868082Di2015UniqueSeparatorPOST
19868082Di2015UniqueSeparatorGET
19868082Di2015UniqueSeparator/api/controller
19868082Di2015UniqueSeparatorMethodA
19868082Di2015UniqueSeparatorC
19868082Di2015UniqueSeparatorMethodA
19868082Di2015UniqueSeparatorMethodB
19868082Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine  name: "Default",Di2015NewLine  url: "api/{controller}/{action}/{id}",Di2015NewLine  defaults: new { controller = "Default", action = "Index", id = UrlParameter.Optional }Di2015NewLine);Di2015NewLine
19868082Di2015UniqueSeparatorDefault
19868082Di2015UniqueSeparatorIndex
19868082Di2015UniqueSeparatorapi/controller
19868082Di2015UniqueSeparatorDefault.Index
19868095Di2015UniqueSeparatorObjectFactory.Model.EjectAndRemovePluginTypes(x => Di2015NewLine    x.IsGenericType &&Di2015NewLine    x.GetGenericTypeDefinition() == typeof(IHandle<>)Di2015NewLine    );Di2015NewLine
19868095Di2015UniqueSeparatorSystem.Object
19868095Di2015UniqueSeparatordynamic
19868095Di2015UniqueSeparatorIHandle<ICommand>
19868095Di2015UniqueSeparatorObjectFactory.GetAllInstances<IHandle<ICommand>>();
19868095Di2015UniqueSeparatorIHandle<ICommand>
19868095Di2015UniqueSeparatorIHandle<ICommand>
19868095Di2015UniqueSeparatorObjectFactory.GetAllInstances<IHandle<ICommand>>()
19868095Di2015UniqueSeparatorSystem.Object
19868095Di2015UniqueSeparatordynamic
19868095Di2015UniqueSeparatorIEnumerable<IPluginTypeConfiguration> handlers =Di2015NewLine    ObjectFactory.Model.PluginTypesDi2015NewLine                       .Where(x => x.PluginType.IsGenericType &&Di2015NewLine                                   x.PluginType.GetGenericTypeDefinition() == Di2015NewLine                                                       typeof (IHandle<>));Di2015NewLineDi2015NewLinevar allInstances = new List<object>();Di2015NewLineDi2015NewLineforeach (IPluginTypeConfiguration pluginTypeConfiguration in handlers)Di2015NewLine{Di2015NewLine    var instancesForPluginType = Di2015NewLine              ObjectFactory.GetAllInstances(pluginTypeConfiguration.PluginType)Di2015NewLine                           .OfType<object>();Di2015NewLineDi2015NewLine    allInstances.AddRange(instancesForPluginType);Di2015NewLine}Di2015NewLine
19868095Di2015UniqueSeparatorobject
19868095Di2015UniqueSeparatordynamic
19868273Di2015UniqueSeparatorStyle
19868273Di2015UniqueSeparatorItemContainerStyle
19868273Di2015UniqueSeparatorHierarchicalDataTemplate
19868273Di2015UniqueSeparator<HierarchicalDataTemplate DataType="{x:Type cfg:AppConfig}" ItemsSource="{Binding Path=Services}">Di2015NewLine<!-- Example -->Di2015NewLine<HierarchicalDataTemplate.ItemContainerStyle>Di2015NewLine    <Style TargetType="{x:Type TreeViewItem}">Di2015NewLine        <Setter Property="FontWeight" Value="Normal" />Di2015NewLine        <Setter Property="Foreground" Value="DarkOrange" />Di2015NewLine        <!-- Triggers if required -->Di2015NewLine        <Style.Triggers>Di2015NewLine            <Trigger Property="IsSelected" Value="True">Di2015NewLine                <Setter Property="FontWeight" Value="Bold" />Di2015NewLine                <Setter Property="Foreground" Value="DarkOrange" />Di2015NewLine            </Trigger>Di2015NewLine        <!-- DataTriggers if required -->Di2015NewLine            <DataTrigger Binding="{Binding Path=SomeProperty}" Value="SomeValue">Di2015NewLine                <Setter Property="Foreground" Value="Red" />Di2015NewLine            </DataTrigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</HierarchicalDataTemplate.ItemContainerStyle>Di2015NewLine<!-- End Example -->Di2015NewLineDi2015NewLine    <Border Width="200" BorderBrush="DarkBlue" Background="DarkBlue" BorderThickness="1" CornerRadius="2" Margin="2" Padding="2">Di2015NewLine        <StackPanel Orientation="Horizontal">Di2015NewLine            <TextBlock Text="{Binding Path=ServerName}" FontWeight="Bold" Foreground="White" />Di2015NewLine        </StackPanel>Di2015NewLine    </Border>Di2015NewLine</HierarchicalDataTemplate>Di2015NewLine
19868273Di2015UniqueSeparatorIsSelected
19868297Di2015UniqueSeparatorforeach (XPathNavigator book in NodeIter) { Console.WriteLine(book.Value); }
19868297Di2015UniqueSeparatorNodeIter.MoveNext()
19868297Di2015UniqueSeparatorCurrent.Value
19868398Di2015UniqueSeparatorstring strColor = string.Empty;Di2015NewLinestring strMake = string.Empty;Di2015NewLinedecimal decPrice = 0;Di2015NewLine
19868398Di2015UniqueSeparatorbtnSubmit_Click
19868398Di2015UniqueSeparatorprivate void btnSubmit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string strColor;Di2015NewLine    string strMake;Di2015NewLine    decimal decPrice;Di2015NewLineDi2015NewLine    GetColor(ref strColor);Di2015NewLine    GetMake(ref strMake);Di2015NewLine    GetPrice(ref decPrice);Di2015NewLine    DisplayResult(strColor, strMake, decPrice);Di2015NewLine}Di2015NewLineprivate void GetColor(ref string color)Di2015NewLine{Di2015NewLine    color = lstColor.SelectedItem.ToString();Di2015NewLine}Di2015NewLineprivate void GetMake(ref string make)Di2015NewLine{Di2015NewLine    make = lstMake.SelectedItem.ToString();Di2015NewLine}Di2015NewLineprivate void GetPrice(ref decimal price)Di2015NewLine{Di2015NewLine    if (decimal.TryParse(txtMaxPrice.Text, out price))Di2015NewLine    {Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine            MessageBox.Show("Enter a valid number");Di2015NewLine    }Di2015NewLine}Di2015NewLineprivate void DisplayResult(string color, string make, decimal price)Di2015NewLine{Di2015NewLine   lblMessage.Text = "Color of " + color + " Make of: " + make + " " + price.ToString("c");Di2015NewLine}Di2015NewLine
19868398Di2015UniqueSeparator... in btnSubmit_ClickDi2015NewLineDi2015NewLinestring strColor = GetColor();Di2015NewLinestring strMake = GetMake();Di2015NewLinedecimal decPrice = GetPrice();Di2015NewLineif(decPrice != 0)Di2015NewLine   .....Di2015NewLineDi2015NewLineDi2015NewLineprivate string GetColor()Di2015NewLine{Di2015NewLine    return lstColor.SelectedItem.ToString();Di2015NewLine}Di2015NewLineDi2015NewLineprivate string GetMake()Di2015NewLine{Di2015NewLine    return lstMake.SelectedItem.ToString();Di2015NewLine}Di2015NewLineprivate decimal GetPrice()Di2015NewLine{Di2015NewLine   decimal price;Di2015NewLine   if(!decimal.TryParse(txtMaxPrice.Text, out price))Di2015NewLine   {Di2015NewLine        MessageBox.Show("Enter a valid number");Di2015NewLine   }Di2015NewLine   return price;Di2015NewLine}Di2015NewLine
19868416Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    CultureInfo enUS = new CultureInfo("en-US");Di2015NewLine    string dateString;Di2015NewLine    DateTime dateValue;Di2015NewLineDi2015NewLineDi2015NewLine    dateString = "0501";Di2015NewLineDi2015NewLine    var dateFormats = new String[] {"MM/dd/yy","MM/dd/yy HH:mm","MM/dd/yy HH:mm:ss","HH:mm","HH:mm:ss",Di2015NewLine    "M/d/yy","M/d/yy HH:mm","M/d/yy HH:mm:ss",Di2015NewLine    "MM/dd/yyyy","MM/dd/yyyy HH:mm","MM/dd/yyyy HH:mm:ss",Di2015NewLine    "MMddyy","MMddyyHHmm","MMddyyHHmmss","HHmm","HHmmss",Di2015NewLine    "MMddyyyy","MMddyyyyHHmm","MMddyyyyHHmmss",Di2015NewLine    "MMddyy HHmm","MMddyy HHmmss",Di2015NewLine    "MMddyyyy HHmm","MMddyyyy HHmmss",Di2015NewLine    "yyyyMMdd","yyyyMMddHHmm","yyyyMMddHHmmss", "MMdd"};Di2015NewLineDi2015NewLine    bool matchFound = false;Di2015NewLine    foreach (var dateFormat in dateFormats)Di2015NewLine    {Di2015NewLine        if (DateTime.TryParseExact(dateString, dateFormat, enUS, DateTimeStyles.None, out dateValue))Di2015NewLine        {Di2015NewLine            matchFound = true;Di2015NewLine            Console.WriteLine("Converted '{0}' to {1} ({2}).", dateString, dateValue.ToString("dd MM yyyy"), dateValue.Kind);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (!matchFound)Di2015NewLine        Console.WriteLine("'{0}' is not in an acceptable format.", dateString);Di2015NewLineDi2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
19868505Di2015UniqueSeparatorpublic string[] ToStringArray()Di2015NewLine {Di2015NewLine     //And put it everything you need to storeDi2015NewLine     return new[] {name, id.ToString(), age.ToString()};Di2015NewLine }Di2015NewLine
19868505Di2015UniqueSeparatorSystem.IO.File.WriteAllLines(@"C:\\Users\\1\\AppData\\Roaming\\MYDATA\\hi.txt", somOne.ToStringArray());Di2015NewLine
19868646Di2015UniqueSeparatorZonesFactory
19868646Di2015UniqueSeparatordefaultMinScore
19868646Di2015UniqueSeparatorCreateZones
19868646Di2015UniqueSeparatorpublic class ZonesFactoryDi2015NewLine{Di2015NewLine    private readonly int defaultMinScore;Di2015NewLineDi2015NewLine    public ZonesFactory(int defaultMinScore)Di2015NewLine    {Di2015NewLine        this.defaultMinScore = defaultMinScore;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Zones CreateZones()Di2015NewLine    {Di2015NewLine        return new Zones(defaultMinScore);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19868646Di2015UniqueSeparatorZones
19868646Di2015UniqueSeparatorminScore
19868646Di2015UniqueSeparatorsetMinScore
19868646Di2015UniqueSeparatorZones
19868686Di2015UniqueSeparatorprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine    {Di2015NewLine        if(e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine        {    Di2015NewLine            Button btnAdd = e.Row.FindControl("btnAdd") as Button;Di2015NewLine            btnAdd.Attributes.Add("OnClick", "populateLabel();");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19868686Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function populateLabel() {Di2015NewLine        alert('hi');Di2015NewLine    }Di2015NewLineDi2015NewLine</script>Di2015NewLineDi2015NewLine<asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" DataKeyNames="ID" DataSourceID="DSModels" OnRowDataBound="GridView1_RowDataBound">Di2015NewLine    <Columns>Di2015NewLine        <asp:BoundField DataField="ID" HeaderText="ID" InsertVisible="False" ReadOnly="True" SortExpression="ID" />Di2015NewLine        <asp:BoundField DataField="Name" HeaderText="Name" SortExpression="Name" />Di2015NewLine        <asp:TemplateField ShowHeader="False">Di2015NewLine            <ItemTemplate>Di2015NewLine                <asp:Button ID="btnInfo" runat="server" CausesValidation="false" CommandName="MoreInfo"Di2015NewLine                    Text="More Info" CommandArgument='<%# Eval("ID") %>' />Di2015NewLine            </ItemTemplate>Di2015NewLine        </asp:TemplateField>Di2015NewLine        <asp:TemplateField ShowHeader="False">Di2015NewLine            <ItemTemplate>Di2015NewLine                <asp:Button ID="btnAdd" runat="server" CausesValidation="false" CommandName="AddItem"Di2015NewLine                    Text="Add To Log" CommandArgument='<%# Eval("ID") %>' />Di2015NewLine            </ItemTemplate>Di2015NewLine        </asp:TemplateField>Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine
19868794Di2015UniqueSeparatorpublic class Auto<T> where T: structDi2015NewLine{Di2015NewLine    private T? _value;Di2015NewLineDi2015NewLine    public Auto()Di2015NewLine    {Di2015NewLine        _value = default(T);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Auto(T val)Di2015NewLine    {Di2015NewLine        _value = val;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Auto(T? val)Di2015NewLine    {Di2015NewLine        _value = val;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool HasValueDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _value.HasValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public T ValueDi2015NewLine    {Di2015NewLine        get { return _value.HasValue ? _value.Value : default(T); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator T(Auto<T> d)Di2015NewLine    {Di2015NewLine        return d._value.HasValue ? d._value.Value : default(T);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator Auto<T>(T d)Di2015NewLine    {Di2015NewLine        return new Auto<T>(d);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator T?(Auto<T> d)Di2015NewLine    {Di2015NewLine        return (d._value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator Auto<T>(T? d)Di2015NewLine    {Di2015NewLine        return new Auto<T>(d);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19868794Di2015UniqueSeparatorclass MyEntityDi2015NewLine{Di2015NewLine    public Auto<long> ID;Di2015NewLine    public Auto<short> Status;Di2015NewLine    public String Name;Di2015NewLineDi2015NewLine   //rest of entity code hereDi2015NewLine}Di2015NewLine
19868794Di2015UniqueSeparator.HasValue
19868794Di2015UniqueSeparator.Values
19868794Di2015UniqueSeparatorIsStatusNull()
19868794Di2015UniqueSeparatorHasValue
19868916Di2015UniqueSeparatorplainText
19868916Di2015UniqueSeparatorStream
19868916Di2015UniqueSeparatorusing (MemoryStream base64Stream = new MemoryStream(base64byteArray))Di2015NewLine{Di2015NewLine    using (GZipStream gzip = new GZipStream(Di2015NewLine        base64Stream, CompressionMode.Decompress))Di2015NewLine    {Di2015NewLine        string deserialized = Serializer.Deserialize<string>(gzip);Di2015NewLineDi2015NewLine        Assert.IsNotNull(deserialized);Di2015NewLine        Assert.AreEqual(data, deserialized);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19868916Di2015UniqueSeparatorusing (MemoryStream compressed = new MemoryStream())Di2015NewLine{Di2015NewLine    using (GZipStream gzip = new GZipStream(Di2015NewLine        compressed, CompressionMode.Compress, true))Di2015NewLine    {Di2015NewLine        Serializer.Serialize(gzip, data);Di2015NewLine    }Di2015NewLineDi2015NewLine    serializedBase64 = Convert.ToBase64String(Di2015NewLine        compressed.GetBuffer(), 0, (int)compressed.Length);Di2015NewLine}Di2015NewLine
19868940Di2015UniqueSeparatorpublic class ClassBDi2015NewLine{Di2015NewLine    private string ConstValue {get; set;}Di2015NewLine    public void SetConstValue(string constValue)Di2015NewLine    {Di2015NewLine       ConstValue = constValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void GetConstFromPerson(Person p)Di2015NewLine    {Di2015NewLine       p.GetConstValue(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class PersonDi2015NewLine{Di2015NewLine   private const string MyConst = "A";Di2015NewLineDi2015NewLineDi2015NewLine   public void GetConstValue(ClassB obj)Di2015NewLine   {Di2015NewLine       //todo: contract validationsDi2015NewLine       obj.SetConstValue(MyConst);Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
19869069Di2015UniqueSeparatoremailWorkerDoWork()
19869069Di2015UniqueSeparatorprivate void emailWorkerDoWork(object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    int value = 1 / int.Parse("0");Di2015NewLine}Di2015NewLine
19869120Di2015UniqueSeparatorhas_child
19869120Di2015UniqueSeparatormust
19869120Di2015UniqueSeparatorhas_child
19869120Di2015UniqueSeparatorcustom_score
19869120Di2015UniqueSeparatormust_not
19869120Di2015UniqueSeparatorhas_child
19869175Di2015UniqueSeparator    StringBuilder str = new StringBuilder;Di2015NewLineDi2015NewLine    str.Append("<p>Please print this form and send it with your repair.<br /><b>INSTRUMENT REPAIR FORM</b><p>");Di2015NewLineDi2015NewLine    str.Append("<table style='width: 800px'>");Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine    HttpCookie myCookie = new HttpCookie("InsRepairFormCookie");Di2015NewLine    myCookie.Value = str.ToString();Di2015NewLineDi2015NewLine    Response.Cookies.Add(myCookie);Di2015NewLine
19869680Di2015UniqueSeparatorIQueryable<TableEntity>
19869680Di2015UniqueSeparatorTableEntity
19869680Di2015UniqueSeparatorTable
19869680Di2015UniqueSeparatorDbSet
19869680Di2015UniqueSeparatorIEnumerable<TableEntity>
19869680Di2015UniqueSeparatormyQuery
19869691Di2015UniqueSeparatorpublic Data Get(Request request)Di2015NewLine{Di2015NewLine    using (var connection = new SqlConnection(connectionString))Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            connection.open();Di2015NewLineDi2015NewLine            var data = new Data();Di2015NewLineDi2015NewLine            data = GetData(connection);Di2015NewLine            data.AppleData = GetGrapeData(connection);Di2015NewLine            data.OrangeData = GetGrapeData(connection);Di2015NewLine            data.GrapeData = GetGrapeData(connection);Di2015NewLineDi2015NewLine            return data;Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            connection.close()Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
19869691Di2015UniqueSeparatorprivate Date GetDate(SqlConnection connection)Di2015NewLine{Di2015NewLine    using (var command = connection.CreateCommand())Di2015NewLine    {Di2015NewLine        return ExecuteSP();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19869715Di2015UniqueSeparatorList
19869715Di2015UniqueSeparatorList<System.IO.FileInfo> fileList = new List<System.IO.FileInfo>();Di2015NewLinefor (int i = 0; i < BackgroundWorkerConfiguration.urlsDirectories.Count; i++)Di2015NewLine{Di2015NewLine    System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(BackgroundWorkerConfiguration.urlsDirectories[i]);Di2015NewLine    fileList.AddRange(di.GetFiles("*.*", System.IO.SearchOption.AllDirectories).Where(x => x.Length > 0));Di2015NewLine}Di2015NewLine
19869715Di2015UniqueSeparatorfileList
19869715Di2015UniqueSeparatorFileInfo
19869715Di2015UniqueSeparatorSystem.IO.SearchOption.AllDirectories
19869715Di2015UniqueSeparatorString[] file_array = fileList.OrderBy(x => x.CreationTime).Select(x => x.FullName).ToArray();Di2015NewLine
19869715Di2015UniqueSeparatorString[] file_array = fileList.OrderByDescending(x => x.CreationTime).Select(x => x.FullName).ToArray();Di2015NewLine
19869727Di2015UniqueSeparator@Html.Partial("../Home/Login", model)Di2015NewLine
19869727Di2015UniqueSeparator@Html.Action("action", "controller", parameters)Di2015NewLine
19870098Di2015UniqueSeparatordisplay: "none"
19870098Di2015UniqueSeparatorsClass
19870098Di2015UniqueSeparatoroTable = $("#personnelList").dataTable({Di2015NewLine    // other things Di2015NewLine    "aoColumns": [Di2015NewLine        { "sTitle": "A", "mDataProp": "A", "sType": "string" },Di2015NewLine        { "sTitle": "B", "mDataProp": "B", "sType": "string" },Di2015NewLine        { "sTitle": "C", "mDataProp": "C", "sType": "string" },Di2015NewLine        { "sTitle": "D", "mDataProp": "D", "sType": "string" },Di2015NewLine        { "sTitle": "E", "mDataProp": "E", "sType": "string" },Di2015NewLine        { "sTitle": "F", "mDataProp": "F", "sType": "string" },Di2015NewLine        { "sTitle": "G", "mDataProp": "G", "sType": "string" },Di2015NewLine        { "sTitle": "H", "mDataProp": "H", "sType": "string" },Di2015NewLine        { "sTitle": "I", "mDataProp": "I", "sType": "string"},Di2015NewLine        { "sTitle": "J", "mDataProp": "J", "sType": "string" },Di2015NewLine        { "mDataProp": "K", "sType": "string", "sClass": "ui-helper-hidden" },Di2015NewLine        { "mDataProp": "L", "sType": "string", "sClass": "ui-helper-hidden" }Di2015NewLine    ]Di2015NewLine});Di2015NewLine
19870098Di2015UniqueSeparatorsClass
19870098Di2015UniqueSeparatordisplay: none;
19870098Di2015UniqueSeparator.ui-helper-hidden {Di2015NewLine    display: none;Di2015NewLine}Di2015NewLine
19870128Di2015UniqueSeparatorTextBox
19870128Di2015UniqueSeparatorFindControl
19870128Di2015UniqueSeparatorText
19870128Di2015UniqueSeparatorString.Empty
19870128Di2015UniqueSeparator!IsPostBack
19870128Di2015UniqueSeparatorBindNotes
19870128Di2015UniqueSeparatorPage_Load
19870128Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!IsPostBack)Di2015NewLine        BindNotes();Di2015NewLine}Di2015NewLine
19870230Di2015UniqueSeparatorfile_indxs = file_indxs + 1;Di2015NewLineif (file_indxs >= file_array.Length)Di2015NewLine{Di2015NewLine    file_indxs = 0;Di2015NewLine}Di2015NewLine
19870242Di2015UniqueSeparatorfor(i=0;i<100;i++)Di2015NewLine  retval.add(new List<BaseTile>());Di2015NewLine
19870242Di2015UniqueSeparatorEnumerable.Range(1, 100).Select(_ => new List<T>())Di2015NewLine
19870263Di2015UniqueSeparatorList<int>
19870263Di2015UniqueSeparatorvar list = new List<int>(10);Di2015NewLine
19870263Di2015UniqueSeparatorT
19870263Di2015UniqueSeparatorint
19870263Di2015UniqueSeparatorList<int>(items:10)
19870263Di2015UniqueSeparatorvar list = new List<string>(new[] { "test string 1", "test string 2" });Di2015NewLine
19870263Di2015UniqueSeparatorparams
19870458Di2015UniqueSeparatorcolumn.For( p => p.Role )Di2015NewLine      .HeaderText( "Role" )Di2015NewLine      .DataType( "object" )Di2015NewLine      .FormatterFunction( "function(obj) { if (!obj) return 'None'; return obj.Description; }" );Di2015NewLine
19870482Di2015UniqueSeparatorparams
19870482Di2015UniqueSeparatordata
19870517Di2015UniqueSeparatore.Results
19870517Di2015UniqueSeparatorObjectView
19870517Di2015UniqueSeparatorSystem.Data.Objects.ObjectView
19870517Di2015UniqueSeparatorIEnumrable
19870517Di2015UniqueSeparatorIBindingList
19870517Di2015UniqueSeparatorIEnuerable<T>
19870517Di2015UniqueSeparatorCast<T>
19870517Di2015UniqueSeparatorvar list =  e.Results.Cast<Retailer>();Di2015NewLine
19870537Di2015UniqueSeparatorArrayList myArrayList = whatever;Di2015NewLinestring[] stringArray = myArrayList.OfType<string>().ToArray();Di2015NewLine
19870537Di2015UniqueSeparatorList<object>
19870537Di2015UniqueSeparatorArrayList
19870537Di2015UniqueSeparatorArrayList
19870650Di2015UniqueSeparatorForm.DialogResult
19870650Di2015UniqueSeparatorDatasetProperties.btnOK_Click
19870650Di2015UniqueSeparatorDialogResult.None
19870650Di2015UniqueSeparatorDatasetProperties
19870650Di2015UniqueSeparator// OK button handlerDi2015NewLineprivate void btnOK_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Do data validations hereDi2015NewLine    if (errorsFound)Di2015NewLine    {Di2015NewLine        this.DialogResult = System.Windows.Forms.DialogResult.None;Di2015NewLine        // How to reload/redisplay the form without return to caller?????Di2015NewLine    }Di2015NewLine }Di2015NewLine
19870650Di2015UniqueSeparatorDatasetProperties
19870650Di2015UniqueSeparatorNone
19870673Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing Excel = Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLinenamespace ExcelCutAndInsertColumnDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Excel.Application xlApp = new Excel.Application();Di2015NewLine            Excel.Workbook xlWb = xlApp.Workbooks.Open(@"C:\\stackoverflow.xlsx");Di2015NewLine            Excel.Worksheet xlWs = (Excel.Worksheet)xlWb.Sheets[1]; // Sheet1Di2015NewLineDi2015NewLine            xlApp.Visible = true;Di2015NewLineDi2015NewLine            // cut column B and insert into A, shifting columns rightDi2015NewLine            Excel.Range copyRange = xlWs.Range["B:B"];Di2015NewLine            Excel.Range insertRange = xlWs.Range["A:A"];Di2015NewLineDi2015NewLine            insertRange.Insert(Excel.XlInsertShiftDirection.xlShiftToRight, copyRange.Cut());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19870714Di2015UniqueSeparatorHtmlNode.ElementsFlags.Remove("form")
19870714Di2015UniqueSeparatorpublic static void Main()Di2015NewLine{Di2015NewLine    HtmlNode.ElementsFlags.Remove("form");Di2015NewLineDi2015NewLine    var doc = new HtmlDocument();Di2015NewLine    doc.Load("HtmlPage1.html");Di2015NewLineDi2015NewLine    HtmlNode formNode = doc.DocumentNode.SelectNodes("//form")[0];Di2015NewLine    foreach (HtmlNode innode in formNode.Elements("input"))Di2015NewLine    {Di2015NewLine        Console.WriteLine(innode.OuterHtml);Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.WriteLine("Press Enter to exit...");Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
19870946Di2015UniqueSeparatorxs:assertion
19870971Di2015UniqueSeparatorpublic class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        Console.WriteLine("Who is the best?");Di2015NewLineDi2015NewLine        var answer = Console.ReadLine();Di2015NewLineDi2015NewLine        if (answer.Equals("tim")){Di2015NewLine            Console.WriteLine("You're right!")Di2015NewLine        } else {Di2015NewLine            Console.WriteLine("Wrong!")Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19871025Di2015UniqueSeparatorOr
19871025Di2015UniqueSeparatorpublic static Func<T, bool> Or<T>(this Func<T, bool> expr1, Func<T, bool> expr2)Di2015NewLine{Di2015NewLine    return x => expr1(x) || expr2(x);Di2015NewLine}Di2015NewLine
19871025Di2015UniqueSeparator||
19871025Di2015UniqueSeparatorExpression.Invoke()
19871025Di2015UniqueSeparatorpublic static Expression<Func<T, bool>> Or<T>(Di2015NewLine    this Expression<Func<T, bool>> expr1, Expression<Func<T, bool>> expr2)Di2015NewLine{Di2015NewLine    var parameter = Expression.Parameter(typeof(T), "x");Di2015NewLine    var invokedExpr1 = Expression.Invoke(expr1, parameter);Di2015NewLine    var invokedExpr2 = Expression.Invoke(expr2, parameter);Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<T, bool>>(Di2015NewLine        Expression.OrElse(invokedExpr1, invokedExpr2), parameter);Di2015NewLine}Di2015NewLine
19871025Di2015UniqueSeparatorOr
19871032Di2015UniqueSeparatordo {Di2015NewLine    String text = Interaction.InputBox("Enter a number");Di2015NewLine    if( text == "" ) return -1;Di2015NewLine    Int32 number;Di2015NewLine    if( Int32.TryParse( text, out number ) ) return number;Di2015NewLine} while( true );Di2015NewLine
19871063Di2015UniqueSeparator<Window x:Class="ButtonBackground.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Window.Resources>Di2015NewLine        <Style x:Key="ButtonStyle" TargetType="Button">Di2015NewLine            <Setter Property="Background" Value="Black"/>Di2015NewLine            <Setter Property="FontSize" Value="100"/>Di2015NewLine            <Setter Property="Foreground" Value="White"/>Di2015NewLine            <Style.Triggers>Di2015NewLine                <EventTrigger RoutedEvent="Click">Di2015NewLine                    <BeginStoryboard>Di2015NewLine                        <Storyboard>Di2015NewLine                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Button.Background)" >Di2015NewLine                                <ObjectAnimationUsingKeyFrames.KeyFrames>Di2015NewLine                                    <DiscreteObjectKeyFrame>Di2015NewLine                                        <DiscreteObjectKeyFrame.Value>Di2015NewLine                                            <SolidColorBrush Color="Black"/>Di2015NewLine                                        </DiscreteObjectKeyFrame.Value>Di2015NewLine                                    </DiscreteObjectKeyFrame>Di2015NewLine                                    <DiscreteObjectKeyFrame>Di2015NewLine                                        <DiscreteObjectKeyFrame.Value>Di2015NewLine                                            <!--<SolidColorBrush Color="Pink"/>-->Di2015NewLine                                            <ImageBrush ImageSource="{Binding MyImgSource}" />Di2015NewLine                                        </DiscreteObjectKeyFrame.Value>Di2015NewLine                                    </DiscreteObjectKeyFrame>Di2015NewLine                                </ObjectAnimationUsingKeyFrames.KeyFrames>Di2015NewLine                            </ObjectAnimationUsingKeyFrames>Di2015NewLine                        </Storyboard>Di2015NewLine                    </BeginStoryboard>Di2015NewLine                </EventTrigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </Window.Resources>Di2015NewLine    <Grid>Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition/>Di2015NewLine            <ColumnDefinition/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLine        <Button Grid.Row="0" Grid.Column="0" Content="1" Style="{StaticResource ButtonStyle}" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
19871063Di2015UniqueSeparator        <Style x:Key="ButtonStyle" TargetType="Button">Di2015NewLine            <Setter Property="Background" Value="Black"/>Di2015NewLine            <Setter Property="FontSize" Value="100"/>Di2015NewLine            <Setter Property="Foreground" Value="White"/>Di2015NewLine            <Style.Triggers>Di2015NewLine                <Trigger Property="IsPressed" Value="True">Di2015NewLine                    <Setter Property="Background">Di2015NewLine                        <Setter.Value>Di2015NewLine                            <!--<SolidColorBrush Color="Pink"/>-->Di2015NewLine                            <ImageBrush ImageSource="{Binding MyImgSource}" />Di2015NewLine                        </Setter.Value>Di2015NewLine                    </Setter>Di2015NewLine                </Trigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine
19871288Di2015UniqueSeparatorpublic class MyIdentityProvider : Provider<IIdentifier>Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinekernel.Bind<IIdentifier>().ToProvider<MyIdentityProvider>();Di2015NewLine
19871379Di2015UniqueSeparatordynamic firstCourse = _contentManager.Query("Course").List().First();Di2015NewLinevar myField = firstCourse.Course.MyField as WhateverTypeTheFieldIs;Di2015NewLine
19871379Di2015UniqueSeparatorvar fields = firstCourse.Course.Fields as IEnumerable<ContentField>;Di2015NewLine
19871488Di2015UniqueSeparatorDefaultTraceListener
19871488Di2015UniqueSeparatorTrace.WriteLine("my output string");
19871488Di2015UniqueSeparator// C#Di2015NewLineSystem.Diagnostics.Trace.Listeners.Clear();Di2015NewLineSystem.Diagnostics.Trace.Listeners.Add( Di2015NewLine    new System.Diagnostics.TextWriterTraceListener(Console.Out));Di2015NewLine
19871488Di2015UniqueSeparator  static void Main(string[] args)Di2015NewLine  {Di2015NewLine     Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));Di2015NewLineDi2015NewLine     Trace.WriteLine("my output string");Di2015NewLineDi2015NewLine     Console.Write("Press enter to quit");Di2015NewLine     Console.ReadLine();Di2015NewLine  }Di2015NewLine
19871488Di2015UniqueSeparatorTraceSource
19871488Di2015UniqueSeparatorSourceSwitch sourceSwitch = new SourceSwitch("SourceSwitch", "Verbose");Di2015NewLinet.Switch = sourceSwitch;Di2015NewLine
19871589Di2015UniqueSeparatorstring url = "https://www.google.com";Di2015NewLineHtmlWeb web = new HtmlWeb();Di2015NewLineHtmlDocument doc = web.Load(url);Di2015NewLineforeach (HtmlNode node in doc.DocumentNode.SelectNodes("//a")) Di2015NewLine{Di2015NewLine    outputLabel.Text += node.InnerHtml;Di2015NewLine}Di2015NewLine
19871750Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Data.Common;Di2015NewLineusing System.Data.Entity;Di2015NewLineusing System.Data.Entity.Infrastructure;Di2015NewLineusing System.Data.Entity.Migrations;Di2015NewLineDi2015NewLinenamespace Ef6Test {Di2015NewLinepublic class Program {Di2015NewLine    public static void Main(string[] args) {Di2015NewLine        ExecDb1();Di2015NewLine        ExecDB2();Di2015NewLine       ExecDbCtx3();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void ExecDb1() {Di2015NewLine        Database.SetInitializer(new MigrateDatabaseToLatestVersion<Ef6Ctx, Ef6MigConf>());Di2015NewLine        WhichDb.DbName = "HACKDB1";Di2015NewLine        WhichDb.ConnType = ConnType.CtxViaDbConn;Di2015NewLine        var sqlConn = GetSqlConn4DBName(WhichDb.DbName);Di2015NewLine        var context = new Ef6Ctx(sqlConn);Di2015NewLine        context.Database.Initialize(true);Di2015NewLine        Console.WriteLine(WhichDb.DbName, context.Database.Exists() );Di2015NewLine        AddJunk(context);Di2015NewLine        //sqlConn.Close();  //?? whatever other considerations, dispose of context etc...Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void ExecDB2() {Di2015NewLine        // yes other its default again reset this !!!!Di2015NewLine        WhichDb.DbName = "HACKDB2";Di2015NewLine        WhichDb.ConnType = ConnType.CtxViaDbConn;Di2015NewLine        var sqlConn2 = GetSqlConn4DBName(WhichDb.DbName);Di2015NewLine        var context2 = new Ef6Ctx2(sqlConn2);Di2015NewLine        Console.WriteLine(context2.Database.Exists());Di2015NewLine        Database.SetInitializer(new MigrateDatabaseToLatestVersion<Ef6Ctx2, Ef6MigConf2>());Di2015NewLine        context2.Database.Initialize(true);Di2015NewLine        Console.WriteLine(WhichDb.DbName, context2.Database.Exists());Di2015NewLine        AddJunk(context2);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void ExecDbCtx3() {Di2015NewLine        Database.SetInitializer(new MigrateDatabaseToLatestVersion<Ef6Ctx3, Ef6MigConf3>());Di2015NewLine        // Database.SetInitializer(new CreateDatabaseIfNotExists<Ef6Ctx3>());Di2015NewLine        // Database.SetInitializer(null);Di2015NewLine        WhichDb.ConnectionName = "AppCfgName";Di2015NewLine        WhichDb.ConnType = ConnType.CtxViaConnectionName;Di2015NewLineDi2015NewLine        var context3 = new Ef6Ctx3(WhichDb.ConnectionName);Di2015NewLine        context3.Database.Initialize(true);Di2015NewLine        Console.WriteLine(WhichDb.ConnectionName, context3.Database.Exists());Di2015NewLine        AddJunk(context3);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public static class WhichDb {Di2015NewLine        public static string DbName { get; set; }Di2015NewLine        public static string ConnectionName { get; set; }Di2015NewLine        public static ConnType ConnType { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum ConnType {Di2015NewLine        CtxViaDbConn,Di2015NewLine        CtxViaConnectionNameDi2015NewLine    }Di2015NewLineDi2015NewLine    private static void AddJunk(DbContext context) {Di2015NewLine        var poco = new pocotest();Di2015NewLine        poco.f1 = DateTime.Now.ToString();Di2015NewLine        //  poco.f2 = "Did somebody step on a duck?";  //comment in for second runDi2015NewLine        context.Set<pocotest>().Add(poco);Di2015NewLine        context.SaveChanges();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static DbConnection GetSqlConn4DBName(string dbName) {Di2015NewLine        var sqlConnFact = new SqlConnectionFactory(Di2015NewLine            "Data Source=localhost; Integrated Security=True; MultipleActiveResultSets=True");Di2015NewLine        var sqlConn = sqlConnFact.CreateConnection(dbName);Di2015NewLine        return sqlConn;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MigrationsContextFactory : IDbContextFactory<Ef6Ctx> {Di2015NewLine    public Ef6Ctx Create() {Di2015NewLine        switch (Program.WhichDb.ConnType) {Di2015NewLine            case Program.ConnType.CtxViaDbConn:Di2015NewLine                var sqlConn = Program.GetSqlConn4DBName(Program.WhichDb.DbName); // NASTY but it worksDi2015NewLine                return new Ef6Ctx(sqlConn);Di2015NewLineDi2015NewLine            case Program.ConnType.CtxViaConnectionName:Di2015NewLine                return new Ef6Ctx(Program.WhichDb.ConnectionName);Di2015NewLine            default:Di2015NewLine                throw new ArgumentOutOfRangeException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MigrationsContextFactory2 : IDbContextFactory<Ef6Ctx2> {Di2015NewLine    public Ef6Ctx2 Create() {Di2015NewLine        switch (Program.WhichDb.ConnType) {Di2015NewLine            case Program.ConnType.CtxViaDbConn:Di2015NewLine                var sqlConn = Program.GetSqlConn4DBName(Program.WhichDb.DbName); // NASTY but it worksDi2015NewLine                return new Ef6Ctx2(sqlConn);Di2015NewLineDi2015NewLine            case Program.ConnType.CtxViaConnectionName:Di2015NewLine                return new Ef6Ctx2(Program.WhichDb.ConnectionName);Di2015NewLine            default:Di2015NewLine                throw new ArgumentOutOfRangeException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MigrationsContextFactory3 : IDbContextFactory<Ef6Ctx3> {Di2015NewLine    public Ef6Ctx3 Create() {Di2015NewLine        switch (Program.WhichDb.ConnType) {Di2015NewLine            case Program.ConnType.CtxViaDbConn:Di2015NewLine                var sqlConn = Program.GetSqlConn4DBName(Program.WhichDb.DbName); // NASTY but it worksDi2015NewLine                return new Ef6Ctx3(sqlConn);Di2015NewLineDi2015NewLine            case Program.ConnType.CtxViaConnectionName:Di2015NewLine                return new Ef6Ctx3(Program.WhichDb.ConnectionName);Di2015NewLine            default:Di2015NewLine                throw new ArgumentOutOfRangeException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLinepublic class Ef6MigConf : DbMigrationsConfiguration<Ef6Ctx> {Di2015NewLine    public Ef6MigConf() {Di2015NewLine        AutomaticMigrationsEnabled = true;Di2015NewLine        AutomaticMigrationDataLossAllowed = true;Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLinepublic class Ef6MigConf2 : DbMigrationsConfiguration<Ef6Ctx2> {Di2015NewLine    public Ef6MigConf2() {Di2015NewLine        AutomaticMigrationsEnabled = true;Di2015NewLine        AutomaticMigrationDataLossAllowed = true;Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLine public class Ef6MigConf3 : DbMigrationsConfiguration<Ef6Ctx3> {Di2015NewLine    public Ef6MigConf3() {Di2015NewLine        AutomaticMigrationsEnabled = true;Di2015NewLine        AutomaticMigrationDataLossAllowed = true;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class pocotest {Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string f1 { get; set; }Di2015NewLine public string f2 { get; set; } // comment in for second runDi2015NewLine public string f2a { get; set; } // comment in for second runDi2015NewLine  public string f3 { get; set; } // comment in for second runDi2015NewLine public string f5 { get; set; } // comment in for second runDi2015NewLine public string f6b { get; set; } // comment in for second runDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Ef6Ctx : DbContext {Di2015NewLine    public Ef6Ctx(DbConnection dbConn) : base(dbConn, true) { }Di2015NewLineDi2015NewLine    public Ef6Ctx(string connectionName) : base(connectionName) { }Di2015NewLineDi2015NewLine    public DbSet<pocotest> poco1s { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Ef6Ctx2 : DbContext {Di2015NewLine    public Ef6Ctx2(DbConnection dbConn) : base(dbConn, true) { }Di2015NewLine    public Ef6Ctx2(string connectionName) : base(connectionName) { }Di2015NewLine    public DbSet<pocotest> poco1s { get; set; }Di2015NewLine}Di2015NewLine}Di2015NewLine
19871865Di2015UniqueSeparatorpublic class PageViewModelDi2015NewLine{Di2015NewLine   ViewModel LeftPivot {get; set;}Di2015NewLine   ViewModel CurrentPivot {get; set;}Di2015NewLine   ViewModel RightPivot {get; set;}Di2015NewLineDi2015NewLine   int SelectedPivotIndex {get; set;}Di2015NewLine}Di2015NewLine
19872043Di2015UniqueSeparatordata:
19872061Di2015UniqueSeparator       var cd = new System.Net.Mime.ContentDispositionDi2015NewLine        {Di2015NewLine                // for example foo.bakDi2015NewLine                FileName = "Summary.csv",Di2015NewLineDi2015NewLine                // always prompt the user for downloading, set to true if you want Di2015NewLine                // the browser to try to show the file inlineDi2015NewLine                Inline = false,Di2015NewLine        };Di2015NewLine        Response.AppendHeader("Content-Disposition", cd.ToString());Di2015NewLine        return File(model.SummaryDownload.Content().ToArray(), "text/csv");Di2015NewLine
19872127Di2015UniqueSeparatorbrowser.DocumentCompleted += (s, e) =>Di2015NewLine{Di2015NewLineDi2015NewLine GeckoElementCollection elements = browser.Document.GetElementsByTagName("input");Di2015NewLine foreach (var element in elements)Di2015NewLine {Di2015NewLine  GeckoInputElement input = (GeckoInputElement) element;Di2015NewLine  input.Value = "Auto filled!";Di2015NewLine }Di2015NewLine};Di2015NewLine
19872402Di2015UniqueSeparatorstring sample = @"<a href=""http://example.com"" style='class' data-foo='' data-special-attr=""new text1"">old text1</a>";Di2015NewLinestring output = Regex.Replace(sample, @"<([^>]+) data-special-attr=""([^""]+)"">[^<]*</a>", "<$1>$2</a>");Di2015NewLineDi2015NewLineConsole.WriteLine(sample);Di2015NewLineConsole.WriteLine(output);Di2015NewLine
19872404Di2015UniqueSeparator/log/Scripts/jquery-1.6.4.min.jsDi2015NewLine
19872404Di2015UniqueSeparator*SomeNamespace*Di2015NewLineDi2015NewLinepublic static class UrlHelpersDi2015NewLine{Di2015NewLine  public static string Script<TModel>(this Nancy.ViewEngines.Razor.UrlHelpers<TModel> Self,     string Script)Di2015NewLine  {Di2015NewLine    var rootPath = Self.RenderContext.Context.Request.Path.TrimEnd('/');Di2015NewLine    var scriptPath = string.Format("{0}/Scripts/{1}", rootPath, Script);Di2015NewLine    return scriptPath;Di2015NewLine   }Di2015NewLine}Di2015NewLine
19872404Di2015UniqueSeparator@using SomeNamespaceDi2015NewLine@inherits Nancy.ViewEngines.Razor.NancyRazorViewBaseDi2015NewLine  ...Di2015NewLine  ...Di2015NewLineDi2015NewLine  <script src=@Url.Script("jquery-1.6.4.min.js")></script>Di2015NewLine  <script src=@Url.Script("jquery.signalR-2.0.0.min.js")></script>Di2015NewLine
19872520Di2015UniqueSeparatorif (dtpFrom.DateTime != null) Di2015NewLine{Di2015NewLine    Func<BAL.Receipt , DateTime? > expr = receipt => receipt.Date ;Di2015NewLine}Di2015NewLine
19872525Di2015UniqueSeparatorvar users = dbSession.CreateQuery("from User").List(); // U is in capitalDi2015NewLine
19872560Di2015UniqueSeparatorSelectMany
19872560Di2015UniqueSeparatorvar query = from x in doc.Descendants()Di2015NewLine            where (string)x.Attribute("name") == keyDi2015NewLine            from file in x.Elements("file")Di2015NewLine            select file.Value;Di2015NewLine
19872560Di2015UniqueSeparatorname
19872560Di2015UniqueSeparatorname
19872560Di2015UniqueSeparatorname
19872560Di2015UniqueSeparatornull
19872560Di2015UniqueSeparator(string)x.Attribute("name") == key
19872563Di2015UniqueSeparatornew
19872563Di2015UniqueSeparatorGun gun = new Gun();Di2015NewLineSamurai samurai = new Samurai(gun);Di2015NewLine
19872563Di2015UniqueSeparatorpublic class Gun : Weapon {Di2015NewLine   public Attack(string target) {Di2015NewLine     // Perform attack logic hereDi2015NewLine   }Di2015NewLine}Di2015NewLine
19872563Di2015UniqueSeparatorpublic interface IWeapon {Di2015NewLine  void Attack(string target);Di2015NewLine}Di2015NewLine
19872666Di2015UniqueSeparatorusing Castle.Core;Di2015NewLineusing Castle.MicroKernel;Di2015NewLineusing Castle.MicroKernel.ComponentActivator;Di2015NewLineusing Castle.MicroKernel.Context;Di2015NewLineusing Castle.MicroKernel.Facilities;Di2015NewLineusing Castle.MicroKernel.Registration;Di2015NewLineusing Castle.Windsor;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks; Di2015NewLineDi2015NewLinenamespace ComponentCreaterDi2015NewLine{Di2015NewLinepublic interface IWatchDogServiceDi2015NewLine{Di2015NewLine    Type WatchingType { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchDogService : IWatchDogServiceDi2015NewLine{Di2015NewLine    public Type WatchingType { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class WatchedClassViaConstructorDi2015NewLine{Di2015NewLine    private readonly IWatchDogService watchDogService;Di2015NewLineDi2015NewLine    public WatchedClassViaConstructor(IWatchDogService watchDogService)Di2015NewLine    {Di2015NewLine        this.watchDogService = watchDogService;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Print()Di2015NewLine    {Di2015NewLine        Console.WriteLine(this.watchDogService.WatchingType.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchDogFacility : AbstractFacilityDi2015NewLine{Di2015NewLine    protected override void Init()Di2015NewLine    {Di2015NewLine        this.Kernel.ComponentModelCreated += Kernel_ComponentModelCreated;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Kernel_ComponentModelCreated(ComponentModel model)Di2015NewLine    {Di2015NewLine        model.CustomComponentActivator = typeof(WatchedComponentActivator);   Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchedComponentActivator : DefaultComponentActivatorDi2015NewLine{Di2015NewLine    public WatchedComponentActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)Di2015NewLine        : base(model, kernel, onCreation, onDestruction)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override object CreateInstance(CreationContext context, ConstructorCandidate constructor, object[] arguments)Di2015NewLine    {Di2015NewLine        object component = base.CreateInstance(context, constructor, arguments);Di2015NewLineDi2015NewLine        if (arguments != null)Di2015NewLine        {Di2015NewLine            IWatchDogService watchDogService = arguments.FirstOrDefault(arg => arg is IWatchDogService) as IWatchDogService;Di2015NewLine            if (watchDogService != null)Di2015NewLine            {Di2015NewLine                watchDogService.WatchingType = component.GetType();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return component;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        IWindsorContainer container = new WindsorContainer();Di2015NewLine        container.AddFacility<WatchDogFacility>();Di2015NewLineDi2015NewLine        container.Register(Di2015NewLine            Component.For<IWatchDogService>()Di2015NewLine                .ImplementedBy<WatchDogService>()Di2015NewLine                .LifestyleTransient(),Di2015NewLine            Component.For<WatchedClassViaConstructor>()Di2015NewLine        );Di2015NewLineDi2015NewLine        WatchedClassViaConstructor obj = container.Resolve<WatchedClassViaConstructor>();Di2015NewLine        obj.Print();Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19872666Di2015UniqueSeparatorpublic class WatchedClassViaInheritance : WatchedClassDi2015NewLine{Di2015NewLine    public void Print()Di2015NewLine    {Di2015NewLine        Console.WriteLine(this.WatchDogService.WatchingType.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19872666Di2015UniqueSeparatornamespace ComponentCreater2Di2015NewLine{Di2015NewLineusing Castle.Core;Di2015NewLineusing Castle.MicroKernel;Di2015NewLineusing Castle.MicroKernel.ComponentActivator;Di2015NewLineusing Castle.MicroKernel.Context;Di2015NewLineusing Castle.MicroKernel.Facilities;Di2015NewLineusing Castle.MicroKernel.ModelBuilder;Di2015NewLineusing Castle.MicroKernel.Registration;Di2015NewLineusing Castle.Windsor;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinepublic interface IWatchDogServiceDi2015NewLine{Di2015NewLine    Type WatchingType { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchDogService : IWatchDogServiceDi2015NewLine{Di2015NewLine    public Type WatchingType { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IIsWatchedDi2015NewLine{Di2015NewLine    IWatchDogService WatchDogService { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class WatchedClass : IIsWatchedDi2015NewLine{Di2015NewLine    public IWatchDogService WatchDogService { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchedClassViaInheritance : WatchedClassDi2015NewLine{Di2015NewLine    public void Print()Di2015NewLine    {Di2015NewLine        Console.WriteLine(this.WatchDogService.WatchingType.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchDogFacility : AbstractFacilityDi2015NewLine{Di2015NewLine    protected override void Init()Di2015NewLine    {Di2015NewLine        this.Kernel.ComponentModelCreated += Kernel_ComponentModelCreated;Di2015NewLine        this.Kernel.ComponentModelBuilder.AddContributor(new RequireWatchDogService());Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Kernel_ComponentModelCreated(ComponentModel model)Di2015NewLine    {Di2015NewLine        if (typeof(IIsWatched).IsAssignableFrom(model.Implementation))Di2015NewLine        {Di2015NewLine            model.CustomComponentActivator = typeof(WatchedComponentActivator);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WatchedComponentActivator : DefaultComponentActivatorDi2015NewLine{Di2015NewLine    public WatchedComponentActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)Di2015NewLine        : base(model, kernel, onCreation, onDestruction)Di2015NewLine    {Di2015NewLine    }Di2015NewLine    protected override void SetUpProperties(object instance, CreationContext context)Di2015NewLine    {Di2015NewLine        base.SetUpProperties(instance, context);Di2015NewLineDi2015NewLine        IIsWatched watched = instance as IIsWatched;Di2015NewLineDi2015NewLine        if (watched != null)Di2015NewLine        {Di2015NewLine            watched.WatchDogService.WatchingType = instance.GetType();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RequireWatchDogService : IContributeComponentModelConstructionDi2015NewLine{Di2015NewLine   public void ProcessModel(IKernel kernel, ComponentModel model) Di2015NewLine   { Di2015NewLine       model.Properties.Where(prop => prop.Dependency.TargetType == typeof(IWatchDogService))Di2015NewLine           .All(prop => prop.Dependency.IsOptional = false); Di2015NewLine   } Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineclass Program2Di2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        IWindsorContainer container = new WindsorContainer();Di2015NewLine        container.AddFacility<WatchDogFacility>();Di2015NewLineDi2015NewLine        container.Register(Di2015NewLine            Component.For<IWatchDogService>()Di2015NewLine                .ImplementedBy<WatchDogService>()Di2015NewLine                .LifestyleTransient(),Di2015NewLine            Component.For<WatchedClassViaInheritance>()Di2015NewLine        );Di2015NewLineDi2015NewLine        WatchedClassViaInheritance obj = container.Resolve<WatchedClassViaInheritance>();Di2015NewLine        obj.Print();Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19872712Di2015UniqueSeparatormyMouseDoubleClick
19872712Di2015UniqueSeparatorprivate void myMouseDoubleClick(object sender, MouseEventArgs e)Di2015NewLine            {Di2015NewLine             //  Cut and Pase your MouseSingleClick Event Code here.Di2015NewLine            }Di2015NewLine
19872712Di2015UniqueSeparatorpbGraph_MouseClick
19872712Di2015UniqueSeparatormyMouseDoubleClick
19872712Di2015UniqueSeparatormyMouseDoubleClick
19872712Di2015UniqueSeparator  this.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.myMouseDoubleClick);Di2015NewLine
19872791Di2015UniqueSeparator<sessionState timeout="60" mode="InProc" />Di2015NewLine
19872791Di2015UniqueSeparatormode="InProc"
19872791Di2015UniqueSeparatortimeout="60"
19872821Di2015UniqueSeparatorExpression<Func<BAL.Receipt, bool>> a =Di2015NewLine    x => x.InvoiceNo.StartsWith(txtSearch.Text);Di2015NewLineDi2015NewLineExpression<Func<BAL.Receipt, bool>> b =Di2015NewLine    x => x.Alias.StartsWIth(txtSearch.Text);Di2015NewLineDi2015NewLineList<BAL.Receipt> ac =Di2015NewLine    BAL.ApplicationInfo.db.ReceiptsDi2015NewLine        .Where(a)Di2015NewLine        .Where(b);Di2015NewLine
19872907Di2015UniqueSeparatorshared_ptr<Account>
19872907Di2015UniqueSeparator#include <iostream>Di2015NewLine#include <memory>Di2015NewLineDi2015NewLineusing namespace std;Di2015NewLineDi2015NewLineDi2015NewLineclass AccountDi2015NewLine{Di2015NewLine  public:Di2015NewLine    long Amount;Di2015NewLine};Di2015NewLineDi2015NewLineclass PersonDi2015NewLine{Di2015NewLine  private:Di2015NewLine    shared_ptr<Account> _account = shared_ptr<Account>(new Account());Di2015NewLineDi2015NewLine  public:Di2015NewLine    std::string Name;Di2015NewLine    shared_ptr<Account> GetAccount() { return _account; }Di2015NewLine    shared_ptr<const Account> GetAccount() const { return _account; } // a const Person has a const AccountDi2015NewLine};Di2015NewLineDi2015NewLineint main()Di2015NewLine{Di2015NewLine  Person p;Di2015NewLineDi2015NewLine  shared_ptr<Account> a = p.GetAccount();Di2015NewLine  a->Amount = 1;                          // access p.AccountDi2015NewLine  cout << a->Amount << endl;              // print 1Di2015NewLineDi2015NewLine  Account* b = new Account();Di2015NewLine  b->Amount = 2;Di2015NewLineDi2015NewLine  a.reset(b);                             // doesn't affect p.AccountDi2015NewLineDi2015NewLine  cout << p.GetAccount()->Amount << endl; // still 1Di2015NewLine}Di2015NewLine
19872914Di2015UniqueSeparator.ToArray()
19872914Di2015UniqueSeparatorLoad()
19872914Di2015UniqueSeparatorvar navPropQuery = context.Entry(person).Reference(p => p.Address).Query()Di2015NewLine    as System.Data.Objects.ObjectQuery<Address>;Di2015NewLineDi2015NewLinenavPropQuery.Include( "Country" ).ToArray();Di2015NewLine
19872960Di2015UniqueSeparator<LongListSelector Name="list" ItemsSource="{Binding items}">Di2015NewLine  .....Di2015NewLine</LongListSelector>Di2015NewLine
19872960Di2015UniqueSeparatorUser userObject = new User(obj);Di2015NewLinelist.DataContext = new ViewModel(userObject);Di2015NewLine
19872960Di2015UniqueSeparatorpublic User(JObject obj)Di2015NewLine{Di2015NewLine   this.UserName = (string)obj["UserName"];Di2015NewLine   .....Di2015NewLine   ....Di2015NewLine}Di2015NewLine
19872960Di2015UniqueSeparatorINotifyPropertyChanged
19872960Di2015UniqueSeparatorpublic class ViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine   ObservableCollection<UserDetail> items = new ObservableCollection<UserDetail>();Di2015NewLine   .....Di2015NewLine   .....Di2015NewLine   public ViewModel(User u)Di2015NewLine   {Di2015NewLine     UserDetail ud = new UserDetail(u);Di2015NewLine     //assign your data to this view class here and finally add it to the collectionDi2015NewLine     .....Di2015NewLine     .....Di2015NewLineDi2015NewLine     items.Add(ud);Di2015NewLine   }Di2015NewLine}Di2015NewLine
19873005Di2015UniqueSeparatorround(,2)
19873005Di2015UniqueSeparatorround(Sum(((itemprice*Qty)*(abs(Vt.Rate)/100))),2)
19873098Di2015UniqueSeparatoronebeforeunload
19873098Di2015UniqueSeparatoronbeforeunload = function() {Di2015NewLine    var data = 'id=123';Di2015NewLine    var xhr = new XMLHttpRequest;Di2015NewLine    xhr.open('POST', '/imleavingthepage', false);Di2015NewLine    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");Di2015NewLine    xhr.setRequestHeader("Content-length", data.length);Di2015NewLine    xhr.send(data);Di2015NewLine}Di2015NewLine
19873098Di2015UniqueSeparatoronbeforeunload
19873201Di2015UniqueSeparator// Create a data adapter. Di2015NewLineOleDbDataAdapter adapter = Di2015NewLine    new OleDbDataAdapter("SELECT * FROM gridview", connection);Di2015NewLineDi2015NewLine// Create and fill a dataset. Di2015NewLineDataSet sourceDataSet = new DataSet();Di2015NewLineadapter.Fill(sourceDataSet);Di2015NewLineDi2015NewLine// Specify the data source for the bindingsource. Di2015NewLineinvoiceBindingSource.DataSource = sourceDataSet.Tables[0];Di2015NewLineDi2015NewLine// Specify the data source for the grid control. Di2015NewLinegridControl1.DataSource = invoiceBindingSource;Di2015NewLineDi2015NewLine// error show in this lineDi2015NewLineinvoiceBindingSource.Filter = Di2015NewLine    string.Format("invoice_number = '{0}'", textEdit5.Text);Di2015NewLine
19873651Di2015UniqueSeparatordouble availableQty =(from table in context.InventoryItemDi2015NewLine    where table.ItemDescription == itemNameDi2015NewLine    select table.BalanceQuantity).Sum();Di2015NewLine
19873815Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine      if (!IsPostBack)Di2015NewLine        {Di2015NewLine            MultiView1.ActiveViewIndex = 1;  //index of the view1Di2015NewLineDi2015NewLine           }Di2015NewLine}Di2015NewLine
19873843Di2015UniqueSeparatorac.Where(expFromDate);
19873843Di2015UniqueSeparatorac=ac.Where(expFromDate);
19873920Di2015UniqueSeparatorPOINT
19873920Di2015UniqueSeparatorLongitude
19873920Di2015UniqueSeparatorLatitude
19873920Di2015UniqueSeparatorLatitude
19873920Di2015UniqueSeparatorLongitude
19873920Di2015UniqueSeparator//First latitude then longitude.Di2015NewLinepublic GeoCoordinate(double latitude, double longitude)Di2015NewLine
19873920Di2015UniqueSeparator//First longitude then latitude.Di2015NewLineString.Format("POINT ({0} {1})", location.Longitude, location.Latitude);Di2015NewLine
19873920Di2015UniqueSeparatorvar pointA = DbGeography.FromText("POINT (-2.232121 53.477724)", 4326);Di2015NewLinevar pointB = DbGeography.FromText("POINT (-2.231105 53.478121)", 4326);Di2015NewLineDi2015NewLinevar distanceAB = pointA.Distance(pointB); //distanceAB = 80.6382796064941 metresDi2015NewLine
19873920Di2015UniqueSeparatordouble longitudeA = -2.232121;Di2015NewLinedouble latitudeA = 53.477724;Di2015NewLineDi2015NewLinedouble longitudeB = -2.231105;Di2015NewLinedouble latitudeB = 53.478121;Di2015NewLineDi2015NewLineint coordinateSystemId = 4326;Di2015NewLineDi2015NewLinevar pointA = DbGeography.FromText(String.Format("POINT ({0} {1})", longitudeA, latitudeA), coordinateSystemId);Di2015NewLinevar pointB = DbGeography.FromText(String.Format("POINT ({0} {1})", longitudeB, latitudeB), coordinateSystemId);Di2015NewLineDi2015NewLinevar distanceAB = pointA.Distance(pointB); //distanceAB = 80.6382796064941 metresDi2015NewLine
19873946Di2015UniqueSeparator//use LINQ to obtain the selected id values as stringsDi2015NewLinevar selectedItems = ListBox1.Items.Cast<ListItem>().Where(p => p.Selected == true).Select(p => p.Value).ToList();Di2015NewLineDi2015NewLine//now concat them as a comma seperated stringDi2015NewLinevar idCommaList = string.Join(', ', selectedItems);Di2015NewLineDi2015NewLine//Now use a WHERE IN () statement instead with your query and concat your comma seperated list of ids into the sql statementDi2015NewLinevar query1 = @"SELECT * Di2015NewLine              FROM Emp AS E, Junction AS J Di2015NewLine              WHERE E.E_ID = J.E_ID AND J.S_ID IN (" + idCommaList + ")";Di2015NewLine
19873979Di2015UniqueSeparatorif
19873979Di2015UniqueSeparatorTextWriter outFile;Di2015NewLineif (inFile.Peek() == -1 || inFile == null)Di2015NewLine{Di2015NewLine    outFile = File.AppendText(@"C:\\data\\" + path);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    outFile = new StreamWriter(@"C:\\data\\" + path);Di2015NewLine}Di2015NewLine
19873979Di2015UniqueSeparatorFile.AppendText
19873979Di2015UniqueSeparatorAppendText
19873979Di2015UniqueSeparatorusing
19873979Di2015UniqueSeparator@"C:\\data\\" + path
19873979Di2015UniqueSeparatorstring file = Path.Combine(@"c:\\data", path);Di2015NewLine// Now use file everywhereDi2015NewLine
19873979Di2015UniqueSeparatorFile.AppendText
19873979Di2015UniqueSeparatorStreamWriter
19873979Di2015UniqueSeparatorTextWriter outFile = inFile.Peek() == -1 || inFile == nullDi2015NewLine    ? File.AppendText(file) : new StreamWriter(file);Di2015NewLine
19873984Di2015UniqueSeparatorDirectoryEntry
19873984Di2015UniqueSeparatorSystem.DirectoryServices
19873984Di2015UniqueSeparatorDirectorySearcher
19873984Di2015UniqueSeparatorLDAP://server01/dc=fabrikam,dc=com
19873984Di2015UniqueSeparatorusing (DirectoryEntry entry = new DirectoryEntry("LDAP://<your-ad-server-name>/dc=<domain-name-part>,dc=<domain-name-part>",Di2015NewLine     "Administrator", "Your Secure Password", AuthenticationTypes.Secure))Di2015NewLine{Di2015NewLine  using (DirectorySearcher adSearcher = new DirectorySearcher(entry))Di2015NewLine  {Di2015NewLine    string computerName = "computer01";Di2015NewLine    adSearcher.Filter = "(&(objectClass=computer)(cn=" + computerName + "))";Di2015NewLine    adSearcher.SearchScope = SearchScope.Subtree;Di2015NewLine    adSearcher.PropertiesToLoad.Add("description");Di2015NewLine    SearchResult searchResult = adSearcher.FindOne();Di2015NewLineDi2015NewLine    Console.Out.WriteLine(searchResult.GetDirectoryEntry().Properties["description"].Value);Di2015NewLine  }Di2015NewLine}Di2015NewLine
19873984Di2015UniqueSeparatorLDAP://<your-ad-server-name>/cn=Computers,dc=<domain-name-part>,dc=<domain-name-part>Di2015NewLine
19874016Di2015UniqueSeparatorTextBox playertextbox = new TextBox();Di2015NewLineplayertextbox.Location = new Point(460, 200);Di2015NewLineplayertextbox.Name = "playertxtBox"; // Add some nameDi2015NewLinethis.Controls.Add(playertextbox);Di2015NewLine
19874016Di2015UniqueSeparator //Use that name to search hereDi2015NewLine TextBox playertextbox = ((TextBox) this.Controls.Find("playertxtBox",true)[0]); Di2015NewLine string text = playertextbox.Text;Di2015NewLine
19874075Di2015UniqueSeparatorinternal SearchResult(System.Net.NetworkCredential parentCredentials,Di2015NewLine                         System.DirectoryServices.AuthenticationTypes parentAuthenticationType);Di2015NewLine
19874192Di2015UniqueSeparatorvar bytes = File.ReadAllBytes(pathToFile)Di2015NewLine
19874330Di2015UniqueSeparatorforeach (string line in File.ReadAllLines(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\\\ArchivoaSeparar.txt"))Di2015NewLine            {Di2015NewLine                String checkItem = cadenaTextBox.Text.ToString();Di2015NewLine                string[] parts = line.Split(checkItem.ToCharArray());Di2015NewLineDi2015NewLine                foreach (string item in parts)Di2015NewLine                {Di2015NewLine                    listBox1.Items.Add((line.Contains(checkItem) ? item + checkItem : item));Di2015NewLine                }Di2015NewLine            }Di2015NewLine
19874353Di2015UniqueSeparator1000
19874353Di2015UniqueSeparator1 sec
19874353Di2015UniqueSeparatorfor (int i=1; i < 10; i++)Di2015NewLine        {Di2015NewLine            System.Threading.Thread.Sleep(2000);Di2015NewLine            WMPLib.WindowsMediaPlayer wplayer = new WMPLib.WindowsMediaPlayer();Di2015NewLineDi2015NewLine            wplayer.URL = @"D:\\Project C#\\A-Z\\" + i + ".mp3";Di2015NewLineDi2015NewLine        }Di2015NewLine
19874353Di2015UniqueSeparatorTimer
19874353Di2015UniqueSeparatorTimer timerPlay = new Timer();Di2015NewLine
19874353Di2015UniqueSeparatorprivate void playMyAudioFile(object sender,EventArgs e)Di2015NewLine        {Di2015NewLine           //code for playing your audio fileDi2015NewLine        }Di2015NewLine
19874353Di2015UniqueSeparatorTimerTick
19874353Di2015UniqueSeparator this.timerPlay.Tick += new System.EventHandler(this.playMyAudioFile);Di2015NewLine
19874353Di2015UniqueSeparatorTick
19874353Di2015UniqueSeparatorTimer
19874353Di2015UniqueSeparatorTimer
19874353Di2015UniqueSeparatorInterval
19874353Di2015UniqueSeparatorTimer
19874353Di2015UniqueSeparatorTick
19874353Di2015UniqueSeparator timerPlay.Interval = 2000;Di2015NewLine
19874353Di2015UniqueSeparatorTimer
19874353Di2015UniqueSeparatorStart()
19874353Di2015UniqueSeparatorStop()
19874353Di2015UniqueSeparatortimerPlay.Start();Di2015NewLine
19874353Di2015UniqueSeparatortimerPlay.Stop();Di2015NewLine
19874590Di2015UniqueSeparatorInsertQuery
19874590Di2015UniqueSeparatorpublic class InsertQueryDi2015NewLine{Di2015NewLine    private class ColumnDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public string Value { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly List<Column> columns = new List<Column>();Di2015NewLine    private readonly string tableName;Di2015NewLineDi2015NewLine    public InsertQuery(string tableName)Di2015NewLine    {Di2015NewLine        this.tableName = tableName;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddColumn(string name, string value)Di2015NewLine    {Di2015NewLine        columns.Add(new Column { Name = name, Value = value });Di2015NewLine    }Di2015NewLineDi2015NewLine    public string RemoveColumnByName(string columnName)Di2015NewLine    {Di2015NewLine        var column = columns.First(c => c.Name == columnName);Di2015NewLine        var value = column.Value;Di2015NewLine        columns.Remove(column);Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string RemoveIdColumn()Di2015NewLine    {Di2015NewLine        var column = columns.First();Di2015NewLine        var value = column.Value;Di2015NewLine        columns.RemoveAt(0);Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        var sb = new StringBuilder();Di2015NewLine        sb.Append("INSERT INTO ");Di2015NewLine        sb.Append(tableName);Di2015NewLine        sb.Append(" (");Di2015NewLineDi2015NewLine        // append first all column names and then their valuesDi2015NewLineDi2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19874763Di2015UniqueSeparatorddlGroups.Items.AddRange(EnumerableDi2015NewLine    .Range(0, 85)Di2015NewLine    .Select(i => new ListItem() { Text = "Group " + (i + 1)} );Di2015NewLine
19874766Di2015UniqueSeparator IPEndPoint ep =  new  IPEndPoint(IPAddress.Any, yourportnumber );Di2015NewLine sck.Bind(ep) ; Di2015NewLine
19874766Di2015UniqueSeparatorIPAddress
19874766Di2015UniqueSeparatortextbox
19874766Di2015UniqueSeparatorIPAddress.Loopback
19874785Di2015UniqueSeparatorvar partialName = new CustomAnalyzerDi2015NewLine            {Di2015NewLine                Filter = new List<string> {"lowercase", "name_ngrams", "standard", "asciifolding"},Di2015NewLine                Tokenizer = "standard"Di2015NewLine            };Di2015NewLineDi2015NewLinevar fullName = new CustomAnalyzerDi2015NewLine            {Di2015NewLine                Filter = new List<string> {"standard", "lowercase", "asciifolding"},Di2015NewLine                Tokenizer = "standard"Di2015NewLine            };Di2015NewLineDi2015NewLineclient.CreateIndex("indexname", c => cDi2015NewLine                .Analysis(descriptor => descriptorDi2015NewLine                    .TokenFilters(bases => bases.Add("name_ngrams", new EdgeNGramTokenFilterDi2015NewLine                    {Di2015NewLine                        MaxGram = 20,Di2015NewLine                        MinGram = 2,Di2015NewLine                        Side = "front"Di2015NewLine                    }))Di2015NewLine                    .Analyzers(bases => basesDi2015NewLine                        .Add("partial_name", partialName)Di2015NewLine                        .Add("full_name", fullName))Di2015NewLine                )Di2015NewLine                .AddMapping<Company>(m => mDi2015NewLine                    .Properties(o => oDi2015NewLine                        .String(i => iDi2015NewLine                            .Name(x => x.Name)Di2015NewLine                            .IndexAnalyzer("partial_name")Di2015NewLine                            .SearchAnalyzer("full_name")Di2015NewLine                        ))));Di2015NewLine
19874796Di2015UniqueSeparatorXmlSerializer
19874807Di2015UniqueSeparator<asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False"Di2015NewLineBackColor="White" BorderColor="#336699" BorderStyle="Solid" BorderWidth="1px"  Di2015NewLineCellPadding="0" CellSpacing="0" DataKeyNames="CategoryID" Font-Size="10"Di2015NewLineFont-Names="Arial" GridLines="Vertical" Width="40%">Di2015NewLineDi2015NewLine        <Columns>            Di2015NewLine            <asp:TemplateField>Di2015NewLine                <ItemTemplate>Di2015NewLine                    <asp:CheckBox ID="chkStatus" runat="server"Di2015NewLine                        AutoPostBack="true" OnCheckedChanged="chkStatus_OnCheckedChanged"Di2015NewLine                        Checked='<%# Convert.ToBoolean(Eval("Approved")) %>'Di2015NewLine                        Text='<%# Eval("Approved").ToString().Equals("True") ? " Approved " : " Not Approved " %>' />Di2015NewLine                </ItemTemplate>                   Di2015NewLine            </asp:TemplateField>Di2015NewLineDi2015NewLine            <asp:BoundField DataField="CategoryID" HeaderText="CategoryID" />                   Di2015NewLine            <asp:BoundField DataField="CategoryName" HeaderText="CategoryName"  />Di2015NewLine        </Columns>Di2015NewLineDi2015NewLine<HeaderStyle BackColor="#336699" ForeColor="White" Height="20" />Di2015NewLine
19874941Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;            Di2015NewLineDi2015NewLinevar amount = new List<double>() { 2.5, 1.5, 3.5, 5.5 };Di2015NewLine            var sum = amount.Sum();Di2015NewLine            Console.WriteLine(sum);Di2015NewLineDi2015NewLine            var highest3 = amount.OrderByDescending(a => a).Take(3);Di2015NewLineDi2015NewLine            var i = 1;Di2015NewLine            foreach (var d in highest3)Di2015NewLine            {Di2015NewLine                Console.WriteLine("{0} is position {1}",d,i);Di2015NewLine                i++;Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine
19874941Di2015UniqueSeparatorvar amount = new List<double>() { 2.5, 1.5, 3.5, 5.5 };Di2015NewLine            var sum = 0.0d;Di2015NewLine            foreach (var d in amount)Di2015NewLine            {Di2015NewLine                sum += d;Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine(sum);Di2015NewLineDi2015NewLine            amount.Sort();Di2015NewLine            amount.Reverse();Di2015NewLineDi2015NewLine            lbl_first.Text = amount[0].ToString();Di2015NewLine            lbl_second.Text = amount[1].ToString();Di2015NewLine            lbl_third.Text = amount[2].ToString();Di2015NewLineDi2015NewLine            var i = 1;Di2015NewLine            foreach (var d in amount)Di2015NewLine            {Di2015NewLine                if (i > 3)Di2015NewLine                    break;Di2015NewLineDi2015NewLine                Console.WriteLine("{0} is position {1}",d,i);Di2015NewLine                i++;Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine
19874971Di2015UniqueSeparator    if (slide == 1 && !detectSolidTile(posX + 1, posY))Di2015NewLine    {Di2015NewLine        playerX++;Di2015NewLine    }Di2015NewLine
19874971Di2015UniqueSeparatorint TileWidth = 50; Di2015NewLineint TileHeight = 50;Di2015NewLineint posX = 2; // map X position - same thing as playerX Di2015NewLineint posY = 2; // map Y position - same thing as playerY Di2015NewLine//posX and posY will now hold the position of your player on the map since your conversion from playerX to playerY will only work if you increment a value by 50 or more.Di2015NewLine
19874971Di2015UniqueSeparator    if (map[y, x] == 1) return true;Di2015NewLine    else return false;Di2015NewLine}Di2015NewLine
19874971Di2015UniqueSeparatorposX = (int)(Math.Floor((playerX) / 50)); //drop this you don't need itDi2015NewLineposY = (int)(Math.Floor(playerY / 50)); //drop this too, you are using posX and posY to store locationsDi2015NewLineDi2015NewLine(...)Di2015NewLineDi2015NewLine        if (slide == 1 && !detectSolidTile(posX + 1, posY))Di2015NewLine        {Di2015NewLine            posX++;Di2015NewLine        }Di2015NewLine        if (slide == 2 && !detectSolidTile(posX - 1, posY))Di2015NewLine        {Di2015NewLine            posX--;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (slide == 3 && !detectSolidTile(posX, posY+1))Di2015NewLine        {Di2015NewLine            posY++;Di2015NewLine        }Di2015NewLine        if (slide == 4 && !detectSolidTile(posX, posY-1))Di2015NewLine        {Di2015NewLine            posY--;Di2015NewLine        }Di2015NewLine
19874971Di2015UniqueSeparatorif (slide == 1 && !detectSolidTile((int)(Math.Floor((playerX+1) / 50)) + 1, posY))Di2015NewLine{Di2015NewLine    playerX++;Di2015NewLine} Di2015NewLine
19874991Di2015UniqueSeparator<connectionStrings>Di2015NewLine    <!-- Remove the inherited conn strings  -->Di2015NewLine    <clear />Di2015NewLineDi2015NewLine    <!--   This is your conn string -->Di2015NewLine    <add name="Vina" connectionString="Data Source=.\\sqlexpress;Initial Catalog=MySite;Di2015NewLine               Integrated Security=True"Di2015NewLine               providerName="System.Data.SqlClient" /> Di2015NewLine</connectionStrings>Di2015NewLine
19874991Di2015UniqueSeparator<clear/>
19875064Di2015UniqueSeparatorsession.SaveOrUpdate(e)
19875064Di2015UniqueSeparatorSave(e)
19875064Di2015UniqueSeparatorDatabase.Entities.Add(e)
19875132Di2015UniqueSeparatorSystem.Configuration.Configuration config =Di2015NewLine                ConfigurationManager.OpenExeConfiguration(Di2015NewLine                ConfigurationUserLevel.PerUserRoamingAndLocal);Di2015NewLineDi2015NewLineConfigurationSection connStrings = config.GetSection("userSettings/Progname.Properties.Settings");Di2015NewLineDi2015NewLineconnStrings.SectionInformation.ProtectSection(provider);Di2015NewLine
19875322Di2015UniqueSeparatorTextChanged
19875322Di2015UniqueSeparatorTextChanged
19875322Di2015UniqueSeparatorelse
19875322Di2015UniqueSeparatorprivate void textBox1_TextChanged(object sender, EventArgs e)      Di2015NewLine{Di2015NewLine  if(textBox1.Text != "")Di2015NewLine    if (textBox1.Text == "a")Di2015NewLine    {Di2015NewLine        textBox1.Text = "";Di2015NewLine        MessageBox.Show("Ok");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine         MessageBox.Show("No");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19875328Di2015UniqueSeparatorValueType
19875328Di2015UniqueSeparatorString
19875328Di2015UniqueSeparatorDecimal
19875328Di2015UniqueSeparatorprivate void dataGridView1_CellLeave(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine  dataGridView1.Columns[2].DefaultCellStyle.Format = "N2";Di2015NewLine  dataGridView1.Columns[2].ValueType = typeof(Decimal);Di2015NewLine}Di2015NewLine
19875347Di2015UniqueSeparator(?<=\\")[^,]+?(?=\\")
19875347Di2015UniqueSeparator^.+?(<=|>=|<>|\\|\\||:=|&&|==|<|>|&|\\+|-|\\*|/|\\?).+?$
19875347Di2015UniqueSeparatorstring pattern = "(?<=\\")[^,]+?(?=\\")";Di2015NewLinestring patternSpecial = @"^.+?(<=|>=|<>|\\|\\||:=|&&|==|<|>|&|\\+|-|\\*|/|\\?).+?$";Di2015NewLinestring input = "if(a<=b, strcat(\\" userid <= 'tom' \\",\\" and test = 1\\", \\" and test >= 10 \\"), nop());";  Di2015NewLineDi2015NewLineforeach (Match m in Regex.Matches(input, pattern))Di2015NewLine{Di2015NewLine    if (Regex.IsMatch(m.Value, patternSpecial))Di2015NewLine    {Di2015NewLine        Console.WriteLine(Regex.Match(m.Value, patternSpecial).Value);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineConsole.ReadLine();Di2015NewLine
19875347Di2015UniqueSeparator\\"([^"]+?(<=|>=|<>|\\|\\||:=|&&|==|<|>|&|\\+|-|\\*|/|\\?).+?)\\"Di2015NewLine
19875347Di2015UniqueSeparatorstring pattern = "\\"([^\\"]"+@"+?(<=|>=|<>|\\|\\||:=|&&|==|<|>|&|\\+|-|\\*|/|\\?).+?)"+"\\"";Di2015NewLinestring input = "if(a<=b, strcat(\\" userid <= 'tom' \\",\\" and test = 1\\", \\" and test >= 10 \\"), nop());";  Di2015NewLineDi2015NewLineforeach (Match m in Regex.Matches(input, pattern))Di2015NewLine{Di2015NewLine    Console.WriteLine(m.Groups[1]);Di2015NewLine}Di2015NewLineDi2015NewLineConsole.ReadLine();Di2015NewLine
19875423Di2015UniqueSeparatorObjectContext.Refresh
19875570Di2015UniqueSeparatordatetime.now
19875570Di2015UniqueSeparator string fileName = FileUpload1.FileName;Di2015NewLine                    FileUpload1.PostedFile.SaveAs(FolderPath +assoid);Di2015NewLine                    string imagePath = "server path" +assoid;Di2015NewLine                    face_crop_original.Src = imagePath+"?"+DateTime.Now;Di2015NewLine
19875570Di2015UniqueSeparator face_crop_original.Src = imagePath+"?"+DateTime.Now;Di2015NewLine
19875570Di2015UniqueSeparator"http://xxxxxxxx.com/imagename.jpg?Randomnumber"
19875846Di2015UniqueSeparatorInterlocked.Add(ref long, long)
19875912Di2015UniqueSeparatorItemsControl
19875912Di2015UniqueSeparatorItemsPanel
19875912Di2015UniqueSeparator<ItemsControl.ItemsPanel>Di2015NewLine      <ItemsPanelTemplate>Di2015NewLine          <StackPanel Orientation="Horizontal"/>Di2015NewLine     </ItemsPanelTemplate>Di2015NewLine</ItemsControl.ItemsPanel>Di2015NewLine
19875946Di2015UniqueSeparator<Border Background="Red">Di2015NewLine   <ViewBox />Di2015NewLine</Border>Di2015NewLine
19876033Di2015UniqueSeparatorthe hover color is the same for all of them!Di2015NewLine
19876033Di2015UniqueSeparatorButton
19876033Di2015UniqueSeparatorBackground
19876033Di2015UniqueSeparatorIsMouseOver
19876033Di2015UniqueSeparatorTrue
19876033Di2015UniqueSeparatorbecause it also affects the content of the button and not only the background colorDi2015NewLine
19876033Di2015UniqueSeparatorBorder
19876033Di2015UniqueSeparatorContentPresenter
19876033Di2015UniqueSeparatorContentControl
19876033Di2015UniqueSeparatorOpaciy
19876033Di2015UniqueSeparatorRectangles
19876033Di2015UniqueSeparatorBorders
19876033Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <Style x:Key="FocusVisual">Di2015NewLine        <Setter Property="Control.Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate>Di2015NewLine                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>Di2015NewLine    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>Di2015NewLine    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FF737B7F"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>Di2015NewLine    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>Di2015NewLine    <Style x:Key="MyButtonStyle" TargetType="{x:Type Button}">Di2015NewLine        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>Di2015NewLine        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>Di2015NewLine        <Setter Property="BorderBrush" Value="Transparent"/>Di2015NewLine        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>Di2015NewLine        <Setter Property="HorizontalContentAlignment" Value="Center"/>Di2015NewLine        <Setter Property="VerticalContentAlignment" Value="Center"/>Di2015NewLine        <Setter Property="Padding" Value="4"/>Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="{x:Type Button}">Di2015NewLine                    <Grid SnapsToDevicePixels="true">Di2015NewLine                        <Rectangle x:Name="BackgroundVisual" Fill="{TemplateBinding Background}"/>Di2015NewLine                        <Rectangle x:Name="PressedVisual" Fill="{DynamicResource Button.Pressed.Background}" Opacity="0"/>Di2015NewLine                        <Rectangle x:Name="DisabledVisual" Fill="{DynamicResource Button.Disabled.Background}" Opacity="0"/>Di2015NewLine                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>Di2015NewLine                    </Grid>Di2015NewLine                    <ControlTemplate.Triggers>Di2015NewLine                        <Trigger Property="IsDefaulted" Value="true"/>Di2015NewLine                        <Trigger Property="IsMouseOver" Value="true">Di2015NewLine                            <Setter Property="Opacity" TargetName="BackgroundVisual" Value="0.6"/>Di2015NewLine                        </Trigger>Di2015NewLine                        <Trigger Property="IsPressed" Value="true">Di2015NewLine                            <Setter Property="Opacity" TargetName="PressedVisual" Value="1"/>Di2015NewLine                        </Trigger>Di2015NewLine                        <Trigger Property="IsEnabled" Value="false">Di2015NewLine                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>Di2015NewLine                            <Setter Property="Opacity" TargetName="DisabledVisual" Value="1"/>Di2015NewLine                        </Trigger>Di2015NewLine                    </ControlTemplate.Triggers>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine        <Setter Property="BorderThickness" Value="0"/>Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLine
19876221Di2015UniqueSeparator        int[,] grid = new int[3, 3];Di2015NewLineDi2015NewLine        grid[0, 0] = 1;Di2015NewLine        grid[0, 1] = 2;Di2015NewLine        grid[0, 2] = 3;Di2015NewLine        grid[1, 0] = 0;Di2015NewLine        grid[1, 1] = 5; Di2015NewLine        grid[1, 2] = 6; Di2015NewLine        grid[2, 0] = 0;Di2015NewLine        grid[2, 1] = 8; Di2015NewLine        grid[2, 2] = 9;Di2015NewLineDi2015NewLine        Random randomNumber = new Random();Di2015NewLine        var rowLength = grid.GetLength(0);Di2015NewLine        var colLength = grid.GetLength(1);Di2015NewLineDi2015NewLine        //for (int row = 0; row < rowLength; row++)Di2015NewLine        //{Di2015NewLine        //    for (int col = 0; col < colLength; col++)Di2015NewLine        //    {Di2015NewLine        //        grid[row, col] = randomNumber.Next(6);Di2015NewLine        //        if (row == 1 && col == 0)Di2015NewLine        //            grid[row, col] = 0;Di2015NewLine        //        if (row == 2 && col == 0)Di2015NewLine        //            grid[row, col] = 0;Di2015NewLine        //    }Di2015NewLine        //}Di2015NewLineDi2015NewLine        //  Now, we have the grid with 0's, time to play Tetris with the 0's.Di2015NewLine        for (int row = rowLength - 1; row >= 0; row--)Di2015NewLine        {Di2015NewLine            for (int col = 0; col < colLength; col++)Di2015NewLine            {Di2015NewLine                if (grid[row, col] == 0)Di2015NewLine                {Di2015NewLine                    for (int currentRow = row; currentRow >= 0; currentRow--)Di2015NewLine                    {Di2015NewLine                        if (currentRow == 0)Di2015NewLine                            grid[currentRow, col] = randomNumber.Next(1, 6);Di2015NewLine                        elseDi2015NewLine                        {Di2015NewLine                            grid[currentRow, col] = grid[currentRow - 1, col];Di2015NewLine                            if (grid[currentRow, col] == 0)  //  There was a 0 above our 0.Di2015NewLine                            {Di2015NewLine                                bool replaced = false;Di2015NewLine                                for (int numberOfRowsAbove = 1; numberOfRowsAbove <= currentRow; numberOfRowsAbove++)Di2015NewLine                                {Di2015NewLine                                    if (grid[currentRow - numberOfRowsAbove, col] != 0)Di2015NewLine                                    {Di2015NewLine                                        grid[currentRow, col] = grid[currentRow - numberOfRowsAbove, col];Di2015NewLine                                        replaced = true;Di2015NewLine                                    }Di2015NewLine                                }Di2015NewLine                                if (!replaced)Di2015NewLine                                    grid[currentRow, col] = randomNumber.Next(1, 6);Di2015NewLineDi2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine
19876496Di2015UniqueSeparatorFile.SetAttributes(path, FileAttributes.ReadOnly);Di2015NewLine
19876496Di2015UniqueSeparatorSetAttributes
19876496Di2015UniqueSeparatorSystemException
19876496Di2015UniqueSeparatorException
19876537Di2015UniqueSeparator Randomize[] array= new Randomize[10]; Di2015NewLine
19876537Di2015UniqueSeparator int[] array = new int[10];Di2015NewLine
19876587Di2015UniqueSeparatorpublic partial class Pop_up : FormDi2015NewLine    {Di2015NewLine        public Pop_up(string recipe)Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            FillData(recipe);Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
19876587Di2015UniqueSeparator //R E T R I E V E     B U T T O N Di2015NewLine    private void button3_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine      string recipeName = comboBox1.SelectedItem.ToString();Di2015NewLine      Pop_up p = new Pop_up(recipeName);Di2015NewLine      p.Show();Di2015NewLine    }Di2015NewLine
19876607Di2015UniqueSeparatorrestore filelistonly from disk='path_to_your_backup'
19876626Di2015UniqueSeparator%typemap(cscode) TInt %{Di2015NewLine    //this will be added to the generated wrapper for TInt classDi2015NewLine    public static implicit operator TInt(int d)Di2015NewLine    {Di2015NewLine        return new TInt(d);Di2015NewLine    }Di2015NewLine%}Di2015NewLine
19876705Di2015UniqueSeparatorTextObject textObj = (TextObject)MyReport.Sections[2].ReportObjects[3];Di2015NewLinestring newString = "any thing which you want write as your text";Di2015NewLineTextObject newTextObj = MyReport.Sections[2].AddTextObject(newString, textObj.Left, textObj.Top);Di2015NewLinenewTextObj.Height = textObj.Height;Di2015NewLinenewTextObj.Width = textObj.Width;Di2015NewLinenewTextObj.Font = textObj.Font;Di2015NewLineMyReport.Sections[2].DeleteObject(textObj);Di2015NewLine
19876719Di2015UniqueSeparatorclient .Headers.Add(HttpRequestHeader.UserAgent, "UserAgent,Mozilla/5.0 (Windows NT 5.1; rv:14.0) Gecko/20100101 Firefox/14.0.1");Di2015NewLineclient .Headers.Add(HttpRequestHeader.Cookie, "USER_PW=9b1283bfe37ac47b243a1e0c9c1c9e52; PHPSESSID=f692406a0c84dba2605a7065d55a3b53")Di2015NewLine
19876737Di2015UniqueSeparatorMyClass
19876737Di2015UniqueSeparatorIDictionary
19876737Di2015UniqueSeparatorIDictionary
19876737Di2015UniqueSeparatorIEnumerable
19876737Di2015UniqueSeparatorIList
19876826Di2015UniqueSeparatorstring s = "ApplicationData";Di2015NewLineEnvironment.SpecialFolder sf;Di2015NewLineif(Enum.TryParse<Environment.SpecialFolder>(s, true, out sf))Di2015NewLine     Console.WriteLine(Environment.GetFolderPath(sf));Di2015NewLine
19876826Di2015UniqueSeparatorEnvironment.SpecialFolder sf;Di2015NewLineif(Enum.TryParse<Environment.SpecialFolder>(specialLocation, true, out sf))Di2015NewLine{Di2015NewLine    path = Path.Combine(Environment.GetFolderPath(sf), backupPath);Di2015NewLine    .....Di2015NewLine}Di2015NewLine
19876904Di2015UniqueSeparatorParameter
19876904Di2015UniqueSeparatorParameterCollecion
19876904Di2015UniqueSeparatorAdd(new Parameter)
19876904Di2015UniqueSeparatorAddWithValue(paramName,value)
19876904Di2015UniqueSeparatorSELECT * FROM  targetTable
19876904Di2015UniqueSeparator   mysql> SELECT * FROM targetTable;Di2015NewLine    +---------------+------------+-----+Di2015NewLine    | targetTableID | ForeignKey | arq |Di2015NewLine    +---------------+------------+-----+Di2015NewLine    |             1 |    NULL    | NULL|Di2015NewLine    +---------------+------------+-----+Di2015NewLine    1 row in set (0.00 sec)Di2015NewLine
19876904Di2015UniqueSeparator@
19876904Di2015UniqueSeparator@key
19876904Di2015UniqueSeparator@arq
19876904Di2015UniqueSeparator?key
19876904Di2015UniqueSeparator?arq
19876904Di2015UniqueSeparator    MySqlParameter FKParam = new MySqlParameter("@key", MySqlDbType.Int32,3);Di2015NewLine    FKParam.Value = _value; //Received as a function parameterDi2015NewLine    MySqlParameter fileParam new MySqlParameter("@arq", MySqlDbType.Blob,bytes.length);Di2015NewLine
19876957Di2015UniqueSeparator[MessageHeader(ProtectionLevel=System.Net.Security.ProtectionLevel.Sign)]Di2015NewLine
19877080Di2015UniqueSeparatorvar input = "(long)Row["Id"];";Di2015NewLinevar result = Regex.Replace(input, @"\\(long\\)([^;]+)", "$1.ToLong()");Di2015NewLine
19877080Di2015UniqueSeparator\\(long\\)([^;]+)
19877080Di2015UniqueSeparator\\(
19877080Di2015UniqueSeparator(
19877080Di2015UniqueSeparatorlong
19877080Di2015UniqueSeparator\\)
19877080Di2015UniqueSeparator)
19877080Di2015UniqueSeparator([^;]+)
19877120Di2015UniqueSeparatorSearchAsync
19877120Di2015UniqueSeparatorvoid
19877120Di2015UniqueSeparatorpublic static Task<IEnumerable<Contact>> SearchTaskAsync(this Contacts contacts, string filter, FilterKind filterKind)Di2015NewLine{Di2015NewLine  var tcs = new TaskCompletionSource<IEnumerable<Contact>>();Di2015NewLine  EventHandler<ContactsSearchEventArgs> subscription;Di2015NewLine  subscription = (_, args) =>Di2015NewLine  {Di2015NewLine    contacts.SearchComplete -= subscription;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine      tcs.TrySetResult(args.Results);Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine      tcs.TrySetException(ex);Di2015NewLine    }Di2015NewLine  }Di2015NewLine  contacts.SearchComplete += subscription;Di2015NewLine  contacts.SearchAsync(filter, filterKind, null);Di2015NewLine  return tcs.Task;Di2015NewLine}Di2015NewLine
19877120Di2015UniqueSeparatorSearchTaskAsync
19877120Di2015UniqueSeparatorprivate async Task<string> GetDisplayNameAsync(string number)Di2015NewLine{Di2015NewLine  Contacts contactsBook = new Contacts();Di2015NewLine  var matches = await contactsBook.SearchTaskAsync(number, FilterKind.PhoneNumber);Di2015NewLine  ...Di2015NewLine  return name;Di2015NewLine}Di2015NewLine
19877120Di2015UniqueSeparatorNotifyTaskCompletion
19877120Di2015UniqueSeparatorpublic string NumberDi2015NewLine{Di2015NewLine  get { return _number; }Di2015NewLine  setDi2015NewLine  {Di2015NewLine    _number = value;Di2015NewLine    NumberDisplayName = NotifyTaskCompletion.Create(GetDisplayNameAsync(value));Di2015NewLine    RaisePropertyChanged("Number");Di2015NewLine    RaisePropertyChanged("NumberDisplayName");Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic INotifyTaskCompletion<string> NumberDisplayNameDi2015NewLine{Di2015NewLine  get; private set;Di2015NewLine}Di2015NewLine
19877120Di2015UniqueSeparatorNumberDisplayName.Result
19877120Di2015UniqueSeparatorNumberDisplayName.IsCompleted
19877120Di2015UniqueSeparatorNumberDisplayName.ErrorMessage
19877166Di2015UniqueSeparatorvar newTable = oldTable.Clone();Di2015NewLinenewTable.Columns.Add("NewColumn");Di2015NewLinenewTable = oldTable.AsEnumerable()Di2015NewLine                   .GroupBy(row => row.Field<string>("userID"))Di2015NewLine                   .Select(g => {Di2015NewLine                      var newRow = newTable.NewRow();Di2015NewLine                      var firstRow = g.First();Di2015NewLine                      for(int i = 0; i < 4; i++) newRow[i] = firstRow[i];Di2015NewLine                      newRow["NewColumn"] = string.Join(", ", Di2015NewLine                                            g.Select(row=>row.Field<string>("ProductCode")Di2015NewLine                                                     + ", " + row.Field<decimal>("ProductValue")));Di2015NewLine                      return newRow;Di2015NewLine                    }).CopyToDataTable();Di2015NewLine
19877166Di2015UniqueSeparatoruserId
19877166Di2015UniqueSeparatorNewColumn
19877358Di2015UniqueSeparatorprotected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine{Di2015NewLine    modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();Di2015NewLine    modelBuilder.Entity<Entity1>()Di2015NewLine        .HasMany(b => b.Entities2)Di2015NewLine        .WithMany(p => p.Entities1)Di2015NewLine        .Map(m =>Di2015NewLine        {Di2015NewLine            m.ToTable("Entitie1Entity2");Di2015NewLine            m.MapLeftKey("Entity1Id");Di2015NewLine            m.MapRightKey("Entity2Id");Di2015NewLine        });            Di2015NewLine    }Di2015NewLine
19877369Di2015UniqueSeparatorvar validator = (source as CustomValidator);Di2015NewLinestring controlToValidate = validator.ControlToValidate;            Di2015NewLineTextBox txt = validator.NamingContainer.FindControl(controlToValidate) as TextBox;Di2015NewLine
19877403Di2015UniqueSeparatorContextMenu
19877403Di2015UniqueSeparatorCurrentItem
19877403Di2015UniqueSeparatorCommandParameter
19877403Di2015UniqueSeparatorCommandParameter
19877403Di2015UniqueSeparatorCommandParameter
19877403Di2015UniqueSeparator<Setter Property="CommandParameter" Value="{Binding}" />Di2015NewLine
19877403Di2015UniqueSeparatorMyGuiCommand
19877403Di2015UniqueSeparatorExecute
19877403Di2015UniqueSeparatorparameter
19877655Di2015UniqueSeparatorLessonTitle
19877655Di2015UniqueSeparatorcheckDuplicateTitle()
19877655Di2015UniqueSeparatorLessonTitle
19877655Di2015UniqueSeparatorLessonTitle
19877655Di2015UniqueSeparatorLessonTitle
19877655Di2015UniqueSeparatorLessonTitle
19877655Di2015UniqueSeparatorvoid UpdateLessonTable()Di2015NewLine{Di2015NewLine     SqlConnection cnn = new SqlConnection();Di2015NewLine       SqlCommand cmd = new SqlCommand();Di2015NewLine       SqlDataAdapter da = new SqlDataAdapter();Di2015NewLine       SqlCommandBuilder cb = new SqlCommandBuilder(da);Di2015NewLine       DataSet ds = new DataSet();Di2015NewLine        cnn.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["Project1ConnectionString"].ConnectionString;Di2015NewLine        cnn.Open();Di2015NewLineDi2015NewLine        cmd.CommandText = "select * from  Lesson";Di2015NewLine        cmd.Connection = cnn;Di2015NewLineDi2015NewLine        da.SelectCommand = cmd;Di2015NewLineDi2015NewLine        da.Fill(ds, "Lesson");Di2015NewLineDi2015NewLine     if (!checkDuplicateTitle(ds.Tables["Lesson"].Rows, textBox1.Text.ToString()))Di2015NewLine        {Di2015NewLine        DataRow drow = ds.Tables["Lesson"].NewRow();Di2015NewLineDi2015NewLine        drow["TopicID"] = DropDownList1.Text;Di2015NewLine        drow["LessonTitle"] = TextBox1.Text;Di2015NewLine        drow["LessonDate"] = DateTime.Now;Di2015NewLine        ds.Tables["Lesson"].Rows.Add(drow);Di2015NewLine        da.Update(ds, "Lesson");Di2015NewLine        }Di2015NewLine       elseDi2015NewLine        {Di2015NewLine         //you can display some warning hereDi2015NewLine         // MessageBox.Show("Duplicate Lesson Title!");Di2015NewLine        }Di2015NewLine}Di2015NewLineDi2015NewLine//function for checking duplicate LessonTitleDi2015NewLineDi2015NewLinebool checkDuplicateTitle(DataRowCollection rowTitle,String newTitle)Di2015NewLine        {Di2015NewLine            foreach (DataRow row in rowTitle)Di2015NewLine            {Di2015NewLine               if(row["LessonTitle"].Equals(newTitle))Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine
19877672Di2015UniqueSeparatorIDisposable
19877672Di2015UniqueSeparatorDispose
19877672Di2015UniqueSeparatorDispose
19877672Di2015UniqueSeparatorIDisposable
19877672Di2015UniqueSeparatorBrush
19877672Di2015UniqueSeparatorDeleteObject
19877672Di2015UniqueSeparatorOutOfMemoryException
19877672Di2015UniqueSeparatorBrush
19877672Di2015UniqueSeparatorIDisposable
19877672Di2015UniqueSeparatorusing
19877672Di2015UniqueSeparatorusing
19877672Di2015UniqueSeparatorDispose
19877672Di2015UniqueSeparatorusing(Brush b = New Brush())Di2015NewLine{Di2015NewLine    // use the brushDi2015NewLine}Di2015NewLine
19877672Di2015UniqueSeparatorUsing b As New Brush()Di2015NewLine    ' use the brushDi2015NewLineEnd UsingDi2015NewLine
19877843Di2015UniqueSeparator public abstract class OrderDi2015NewLine    {Di2015NewLine        public abstract void PlaceOrder(); // log the placeing of the ordr, place the order asynchronouslyDi2015NewLine    }Di2015NewLine    public class MicrosoftOrder : Order // default orderDi2015NewLine    {Di2015NewLine        public void PlaceOrder()Di2015NewLine        {Di2015NewLine            // default implementation for placing order.Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public class AppleOrder : Order // for asycn functionalities.Di2015NewLine    {Di2015NewLine        private Order order;Di2015NewLine        public AppleOrder(Order order)Di2015NewLine        {Di2015NewLine            this.order = order;Di2015NewLine        }Di2015NewLine        public void PlaceOrder()Di2015NewLine        {Di2015NewLine            // Implement async functionalities.Di2015NewLine            // you can also call default order asDi2015NewLine            // order.PlaceOrder();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public class GoogleOrder : Order // logged orderDi2015NewLine    {Di2015NewLine        private Order order;Di2015NewLine        public GoogleOrder(Order order)Di2015NewLine        {Di2015NewLine            this.order = order;Di2015NewLine        }Di2015NewLine        public void PlaceOrder()Di2015NewLine        {           Di2015NewLine            // Implement logged orderDi2015NewLine            // you can also call default order asDi2015NewLine            // order.PlaceOrder();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Order order = new MicrosoftOrder();Di2015NewLine            order.PlaceOrder(); // Default Order;Di2015NewLine            Order orderWithAsync = new AppleOrder(order);Di2015NewLine            orderWithAsync.PlaceOrder(); // Place order with asycn Di2015NewLineDi2015NewLine            Order orderWithAsyncAndlogging = new GoogleOrder(orderWithAsync);Di2015NewLine            orderWithAsyncAndlogging.PlaceOrder(); // order with asynch and logging.            Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19877928Di2015UniqueSeparatorGetMD5HashFromStream
19877928Di2015UniqueSeparatorfileStream.Position = 0;Di2015NewLine
19877928Di2015UniqueSeparatorpublic static string GetMD5HashFromStream(Stream stream)Di2015NewLine{Di2015NewLine    using (MD5 md5 = MD5.Create())Di2015NewLine    {Di2015NewLine        byte[] hash = md5.ComputeHash(stream);Di2015NewLine        return Convert.ToBase64String(hash);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19877944Di2015UniqueSeparatorusing
19877944Di2015UniqueSeparatorusing
19877944Di2015UniqueSeparatorDispose()
19877944Di2015UniqueSeparatorIDisposable
19877944Di2015UniqueSeparatorusing
19877944Di2015UniqueSeparatorDispose()
19877944Di2015UniqueSeparatorusing
19878037Di2015UniqueSeparator HttpContext.Current.SetSessionStateBehavior(SessionStateBehavior.Required);Di2015NewLine
19879493Di2015UniqueSeparatorpublic class NodeDi2015NewLine{Di2015NewLine    public string Title { get; set; }Di2015NewLine    public ObservableCollection<Node> Children { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MainViewModelDi2015NewLine{Di2015NewLine    public ObservableCollection<Node> Nodes { get; set; }Di2015NewLineDi2015NewLine    public MainViewModel()Di2015NewLine    {Di2015NewLine        Nodes = ... // load the structure hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
19879493Di2015UniqueSeparator<UserControl x:Class="WP8.HierarchicalDataTemplate.NodeUserControl"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLine    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"Di2015NewLine    xmlns:h="clr-namespace:WP8.HierarchicalDataTemplate">Di2015NewLineDi2015NewLine    <Border BorderThickness="1" BorderBrush="Red">Di2015NewLine        <StackPanel d:DataContext="{d:DesignInstance h:Node}" Margin="15">Di2015NewLine            <TextBlock Text="{Binding Title}" />Di2015NewLine            <ItemsControl ItemsSource="{Binding Children}"Di2015NewLine                ItemTemplate="{StaticResource NodeNestedTemplate}" />Di2015NewLine        </StackPanel>Di2015NewLine    </Border>Di2015NewLine</UserControl>Di2015NewLineDi2015NewLine<!-- on MainPage as root object -->Di2015NewLine<Grid>Di2015NewLine    <ItemsControl Margin="20"Di2015NewLine        ItemsSource="{Binding Nodes, Source={StaticResource model}}"Di2015NewLine        ItemTemplate="{StaticResource NodeNestedTemplate}" />Di2015NewLine</Grid>Di2015NewLine
19879493Di2015UniqueSeparator...Di2015NewLinexmlns:h="clr-namespace:WP8.HierarchicalDataTemplate">Di2015NewLineDi2015NewLine<Application.Resources>Di2015NewLine    <h:MainViewModel x:Key="model"/>Di2015NewLine    <DataTemplate x:Key="NodeNestedTemplate">Di2015NewLine        <h:NodeUserControl />Di2015NewLine    </DataTemplate>Di2015NewLine</Application.Resources>Di2015NewLine...Di2015NewLine
19879886Di2015UniqueSeparator"ddd MMM dd yyyy HH:mm:ss 'GMT'K"
19879886Di2015UniqueSeparatorDateTime.ParseExact
19879886Di2015UniqueSeparatorstring s = "Fri Nov 01 2013 00:00:00 GMT+0100";Di2015NewLineDateTime dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'K", CultureInfo.InvariantCulture);Di2015NewLineConsole.WriteLine(dt);Di2015NewLine
19879886Di2015UniqueSeparator10/31/2013 11:00:00 PMDi2015NewLine
19879886Di2015UniqueSeparatordemonstration
19879886Di2015UniqueSeparatorCustom Date and Time Format Strings
19880048Di2015UniqueSeparator<asp:UpdatePanel runat="server" ChildrenAsTriggers="False"        Di2015NewLine    ID="UpdatePanel1"        Di2015NewLine    UpdateMode="Conditional">Di2015NewLine    <ContentTemplate>Di2015NewLine        <!-- Your panel markup here -->Di2015NewLine    </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
19880048Di2015UniqueSeparator((Panel)contentPlaceHolder.FindControl("PanelVisits")).Visible = true;Di2015NewLineUpdatePanel1.Update();Di2015NewLine
19880108Di2015UniqueSeparatorUserControl
19880108Di2015UniqueSeparatorDependencyProperty
19880108Di2015UniqueSeparatorBind
19880108Di2015UniqueSeparatorUserControl
19880108Di2015UniqueSeparatorUserControl
19880108Di2015UniqueSeparatorpublic static DependencyProperty YourCollectionProperty = DependencyProperty.Register(Di2015NewLine    "YourCollection", typeof(ObservableCollection<string>), typeof(YourUserControl));Di2015NewLineDi2015NewLinepublic ObservableCollection<string> YourCollectionDi2015NewLine{Di2015NewLine    get { return (ObservableCollection<string>)GetValue(YourCollectionProperty); }Di2015NewLine    set { SetValue(YourCollectionProperty, value); }Di2015NewLine}Di2015NewLine
19880108Di2015UniqueSeparatorUserControl
19880108Di2015UniqueSeparator<ListBox ItemsSource="{Binding YourCollection, RelativeSource={RelativeSource Di2015NewLine    AncestorType={x:Type YourUserControl}}}" />Di2015NewLine
19880108Di2015UniqueSeparatorUserControl
19880108Di2015UniqueSeparator<YourXamlNamespacePrefix:YourUserControl YourCollection="{Binding SomeCollection}" />Di2015NewLine
19880108Di2015UniqueSeparator<YourXamlNamespacePrefix:YourUserControl YourCollection="{Binding OtherCollection}" />Di2015NewLine
19880134Di2015UniqueSeparatorpercentprogress.Foreground = new SolidColorBrush(Color.FromArgb(255, 24, 50, 60));Di2015NewLinepercentprogress.Foreground = new SolidColorBrush(Colors.Orange);Di2015NewLine
19880134Di2015UniqueSeparatorpublic static bool ChangeColor;Di2015NewLineprivate void Application_Launching(object sender, LaunchingEventArgs e)Di2015NewLine{Di2015NewLine    ChangeColor = true;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Application_Activated(object sender, ActivatedEventArgs e)Di2015NewLine{Di2015NewLine    ChangeColor = true;Di2015NewLine}Di2015NewLine
19880134Di2015UniqueSeparatorprotected override void OnNavigatedTo(NavigationEventArgs e)Di2015NewLine{Di2015NewLine    base.OnNavigatedTo(e);Di2015NewLineDi2015NewLine    if (App.ChangeColor)Di2015NewLine    {Di2015NewLine        Random m = new Random();Di2015NewLine        percentprogress.Foreground = new SolidColorBrush(Di2015NewLine            Color.FromArgb(255, (byte)m.Next(0, 255), (byte)m.Next(0, 255), (byte)m.Next(0, 255)));Di2015NewLine        App.ChangeColor = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19880177Di2015UniqueSeparatorvistedRoutes
19880177Di2015UniqueSeparator   static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var route1 = new List<int> { 1, 2, 3 };Di2015NewLine        var route2 = new List<int> { 6, 7, 8 };Di2015NewLine        var route3 = new List<int> { 3, 7, 13 };Di2015NewLine        var route4 = new List<int> { 8, 9, 10 };Di2015NewLineDi2015NewLine        List<List<int>> routeList = new List<List<int>>();Di2015NewLine        routeList.Add(route1);Di2015NewLine        routeList.Add(route2);Di2015NewLine        routeList.Add(route3);Di2015NewLine        routeList.Add(route4);Di2015NewLineDi2015NewLine        int start = 3;Di2015NewLine        int end = 9;Di2015NewLineDi2015NewLine        var vistedRoutes = new List<List<int>>();Di2015NewLineDi2015NewLine        foreach(var route in routeList.FindAll(r => r.Contains(start)))Di2015NewLine        {Di2015NewLine            vistedRoutes.Add(route);Di2015NewLine            routeList.Remove(route);Di2015NewLine            FindPath(vistedRoutes, routeList, start, end);Di2015NewLineDi2015NewLine            if (vistedRoutes.Last().Contains(end))Di2015NewLine            {Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("done");Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FindPath(List<List<int>> visitedRoutes, List<List<int>> remainingRoutes, int start, int end)Di2015NewLine    {Di2015NewLine        if (visitedRoutes.Last().Contains(end))Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        for (int i = 0; i < remainingRoutes.Count; i++ )Di2015NewLine        {Di2015NewLine            var route = remainingRoutes[i];Di2015NewLineDi2015NewLine            foreach (var point in route)Di2015NewLine            {Di2015NewLine                if (visitedRoutes.Last().Contains(point))Di2015NewLine                {Di2015NewLine                    visitedRoutes.Add(route);Di2015NewLine                    var newRemainingRoutes = new List<List<int>>(remainingRoutes);Di2015NewLine                    newRemainingRoutes.Remove(route);Di2015NewLine                    FindPath(visitedRoutes, newRemainingRoutes, start, end);Di2015NewLine                    if (visitedRoutes.Last().Contains(end))Di2015NewLine                    {Di2015NewLine                        return;Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        visitedRoutes.Remove(route);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19880201Di2015UniqueSeparatorSystem.IO.Path
19880201Di2015UniqueSeparatorPath
19880201Di2015UniqueSeparatorpublic static Path filePath(string b...Di2015NewLine
19880201Di2015UniqueSeparatorpublic static void filePath(string b...Di2015NewLine
19880201Di2015UniqueSeparatorPath
19880201Di2015UniqueSeparatorpublic static int filePath(string b...Di2015NewLine
19880251Di2015UniqueSeparator    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        BindingList<Shift> bindingList = new BindingList<Shift>();           Di2015NewLine        bindingList.Add(new Shift(ShiftType.SHIFT1));Di2015NewLine        bindingList.Add(new Shift(ShiftType.SHIFT2));Di2015NewLine        bindingList.Add(new Shift(ShiftType.SHIFT3));Di2015NewLine        bindingList.Add(new Shift(ShiftType.SHIFT1));Di2015NewLineDi2015NewLine        var ShiftColumn = new DataGridViewComboBoxColumn();Di2015NewLine        dataGridView1.Columns.Add(ShiftColumn);Di2015NewLineDi2015NewLine        dataGridView1.AutoGenerateColumns = false;Di2015NewLine        dataGridView1.DataSource = bindingList;Di2015NewLine        ShiftColumn.DataPropertyName="shiftType";Di2015NewLine        ShiftColumn.DataSource = new List<ShiftType> { ShiftType.SHIFT1, ShiftType.SHIFT2, ShiftType.SHIFT3 };Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineclass ShiftDi2015NewLine{Di2015NewLineDi2015NewLine    public ShiftType shiftType { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine    public Shift(ShiftType shiftType)Di2015NewLine    {Di2015NewLine        this.shiftType = shiftType;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineenum ShiftTypeDi2015NewLine{Di2015NewLine    SHIFT1 ,Di2015NewLine    SHIFT2,Di2015NewLine    SHIFT3 Di2015NewLine}Di2015NewLine
19881449Di2015UniqueSeparatorSystem.Data.SQLite
19881497Di2015UniqueSeparator//Whatever other usings you wantDi2015NewLineusing System.Windows.Forms;  //Include the win forms namespace so you create the formDi2015NewLineDi2015NewLinenamespace ClassLibrary1Di2015NewLine{Di2015NewLinepublic static class Class1Di2015NewLine{Di2015NewLineDi2015NewLine    public static Form CreateNewForm()Di2015NewLine    {Di2015NewLineDi2015NewLine        var form1 = new Form();Di2015NewLine        form1.Width = 200;Di2015NewLine        form1.Height = 200;Di2015NewLine        form1.Visible = true;Di2015NewLine        form1.Activate();        //Unsure if you need to call Activate...Di2015NewLine        //You're going to want to modify all the values you want the splash screen to have hereDi2015NewLine        return form1;Di2015NewLineDi2015NewLine    }   Di2015NewLineDi2015NewLine}Di2015NewLine
19881497Di2015UniqueSeparatorusing ClassLibrary1; //You'll need to reference thisDi2015NewLineDi2015NewLine    //Standard console app templateDi2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var x = Class1.CreateNewForm(); //Bam form pops up, now just make it a splash screen.Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
19881520Di2015UniqueSeparatorFormCollection
19881520Di2015UniqueSeparatorIEnumerable<string>
19881520Di2015UniqueSeparatorpublic ActionResult Sort(IEnumerable<string> something)Di2015NewLine{Di2015NewLine  // iterates only checked itemsDi2015NewLine  foreach(var item in something)Di2015NewLine  {Di2015NewLine    var correspondingDropdownValue = Request.Form[item]Di2015NewLine  }Di2015NewLine}Di2015NewLine
19881520Di2015UniqueSeparatorname
19881520Di2015UniqueSeparator<input type="checkbox" name="something" value="11111" checked="false" />Di2015NewLine<select name="11111">Di2015NewLine    <option value="1">1</option>Di2015NewLine    <option value="2">2</option>Di2015NewLine    <option value="3">3</option>Di2015NewLine</select>Di2015NewLine
19881546Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    List<MyObject> list = db.MyObjects.Where(x => x.family == "Web").ToList();Di2015NewLine    ViewBag.Files =new SelectList(list,"Id","fileName)";Di2015NewLine    return View();Di2015NewLine}Di2015NewLine
19881546Di2015UniqueSeparator  @Html.DropDownList("File",new SelectList(ViewBag.Files))Di2015NewLine
19881584Di2015UniqueSeparatorPartinioner.Create
19881584Di2015UniqueSeparatorSystem.Collections.Concurrent
19881584Di2015UniqueSeparator    Parallel.ForEach(Partitioner.Create(0, carCoords.Length), (r, loopState) => {Di2015NewLine        var c1 = carCoords;Di2015NewLine        var c2 = otherNode.carCoords;Di2015NewLine        int end = r.Item2;Di2015NewLine        for (int i = r.Item1; i < end; ++i) {Di2015NewLine            if (loopState.IsStopped)Di2015NewLine                return;Di2015NewLine            if (c1[i].x != c2[i].x || c1[i].y != c2[i].y) {Di2015NewLine                loopState.Stop();Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    });Di2015NewLine
19881584Di2015UniqueSeparatorIsStopped
19881584Di2015UniqueSeparatorPartitioner.Create
19881612Di2015UniqueSeparatorstring myString = "";Di2015NewLinestring[] validValues = new string[] { "1", "2", "3" };Di2015NewLinewhile (!validValues.Any(myString.Equals))Di2015NewLine    myString = Console.ReadLine();Di2015NewLine
19881612Di2015UniqueSeparatorstring myString = "";Di2015NewLinestring[] validValues = new string[] { "1", "2", "3" };Di2015NewLinewhile (!validValues.Any(s=>myString.Equals(s))Di2015NewLine    myString = Console.ReadLine();Di2015NewLineDi2015NewLineswitch (myString)Di2015NewLine{Di2015NewLine    case "1":Di2015NewLine        Console.WriteLine("ans 1");Di2015NewLine        break;Di2015NewLine    case "2":Di2015NewLine        Console.WriteLine("ans 2");Di2015NewLine        break;Di2015NewLine    case "3":Di2015NewLine        Console.WriteLine("ans 3");Di2015NewLine        break;Di2015NewLine }Di2015NewLine
19881612Di2015UniqueSeparatorvalidValues.Any
19881612Di2015UniqueSeparators=>myString.Equals(s)
19881612Di2015UniqueSeparators
19881612Di2015UniqueSeparators
19881612Di2015UniqueSeparatorAny
19881612Di2015UniqueSeparator=>
19881612Di2015UniqueSeparators
19881612Di2015UniqueSeparatormyString.Equals(s)
19881612Di2015UniqueSeparatorAny
19881612Di2015UniqueSeparatortrue
19881612Di2015UniqueSeparatorAny
19881612Di2015UniqueSeparatorfalse
19881933Di2015UniqueSeparator.Value
19881933Di2015UniqueSeparator        string[] item = new string[6];Di2015NewLine        item[0] = "red";Di2015NewLine        item[1] = "blue";Di2015NewLine        item[2]= "green";Di2015NewLine        item[3] = "red";Di2015NewLine        item[4]= "red";Di2015NewLine        item[5] = "blue";Di2015NewLine
19881933Di2015UniqueSeparator string[] redArray = item.Where(c => c == "red").ToArray();Di2015NewLine
19881933Di2015UniqueSeparatoritem
19881933Di2015UniqueSeparator.Value
19881933Di2015UniqueSeparatoritem[] redArray = item.Where(c => c.Value == "red").ToArray();Di2015NewLine
19881933Di2015UniqueSeparatorint[] colors = { item.value[0], item.value[1], item.value[2] };Di2015NewLineDi2015NewLinevar Red = colors.Where(c => c.value == "Red").ToArray();Di2015NewLine
19881933Di2015UniqueSeparatorRed
19881988Di2015UniqueSeparatorStream
19881988Di2015UniqueSeparatorConsole.Out
19881988Di2015UniqueSeparatorConsole.In
19882065Di2015UniqueSeparatorpublic int ServerStateDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return serverState;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (InvalidState(Value))Di2015NewLine            {Di2015NewLine                var to = OperationContext.Current.GetCallbackChannel<ISAPUploadServiceReply>();Di2015NewLine                Task.Factory.StartNew(() =>Di2015NewLine                    {Di2015NewLine                        to.Reply(eInvalidState);Di2015NewLine                    });Di2015NewLineDi2015NewLine            }Di2015NewLine            elseDi2015NewLine                serverState = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19882143Di2015UniqueSeparator var html = Mustache.to_html(template, data[0]);Di2015NewLine
19882143Di2015UniqueSeparator//JSDi2015NewLinevar html = Mustache.to_html(template, {data: data});Di2015NewLineDi2015NewLine//templateDi2015NewLineDi2015NewLine{{#data}}Di2015NewLine    <p>{{name}}</p>Di2015NewLine    <p>{{comments}}</p>Di2015NewLine{{/data}}Di2015NewLine
19882224Di2015UniqueSeparatorreturn list1.Concat(list2).Distinct();Di2015NewLine
19882224Di2015UniqueSeparatorSelectMany
19882224Di2015UniqueSeparatorJoinList
19882224Di2015UniqueSeparatorreturn lists.SelectMany(i => i).Distinct().ToList;Di2015NewLine
19882278Di2015UniqueSeparatorpublic Book(int id, string name)Di2015NewLine{Di2015NewLine    id = this.id; // reverse this assignment, and the next line as wellDi2015NewLine    name = this.name;Di2015NewLine}Di2015NewLine
19882278Di2015UniqueSeparatorpublic Book(int id, string name)Di2015NewLine{Di2015NewLine    this.id = id; // this is the correct wayDi2015NewLine    this.name = name;Di2015NewLine}Di2015NewLine
19882371Di2015UniqueSeparator    public override HttpControllerDescriptor SelectController(HttpRequestMessage request)Di2015NewLine    {Di2015NewLine        HttpControllerDescriptor controllerDescriptor = null;Di2015NewLineDi2015NewLine        // get list of all controllers provided by the default selectorDi2015NewLine        IDictionary<string, HttpControllerDescriptor> controllers = GetControllerMapping();Di2015NewLineDi2015NewLine        IHttpRouteData routeData = request.GetRouteData();Di2015NewLineDi2015NewLine        if (routeData == null)Di2015NewLine        {Di2015NewLine            throw new HttpResponseException(HttpStatusCode.NotFound);Di2015NewLine        }Di2015NewLineDi2015NewLine        //check if this route is actually an attribute routeDi2015NewLine        IEnumerable<IHttpRouteData> attributeSubRoutes = routeData.GetSubRoutes();Di2015NewLineDi2015NewLine        var apiVersion = GetVersionFromMediaType(request);Di2015NewLineDi2015NewLine        if (attributeSubRoutes == null)Di2015NewLine        {Di2015NewLine            string controllerName = GetRouteVariable<string>(routeData, "controller");Di2015NewLine            if (controllerName == null)Di2015NewLine            {Di2015NewLine                throw new HttpResponseException(HttpStatusCode.NotFound);Di2015NewLine            }Di2015NewLineDi2015NewLine            string newControllerName = String.Concat(controllerName, "V", apiVersion);Di2015NewLineDi2015NewLine            if (controllers.TryGetValue(newControllerName, out controllerDescriptor))Di2015NewLine            {Di2015NewLine                return controllerDescriptor;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                throw new HttpResponseException(HttpStatusCode.NotFound);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            // we want to find all controller descriptors whose controller type names end withDi2015NewLine            // the following suffix(ex: CustomersV1)Di2015NewLine            string newControllerNameSuffix = String.Concat("V", apiVersion);Di2015NewLineDi2015NewLine            IEnumerable<IHttpRouteData> filteredSubRoutes = attributeSubRoutes.Where(attrRouteData =>Di2015NewLine            {Di2015NewLine                HttpControllerDescriptor currentDescriptor = GetControllerDescriptor(attrRouteData);Di2015NewLineDi2015NewLine                bool match = currentDescriptor.ControllerName.EndsWith(newControllerNameSuffix);Di2015NewLineDi2015NewLine                if (match && (controllerDescriptor == null))Di2015NewLine                {Di2015NewLine                    controllerDescriptor = currentDescriptor;Di2015NewLine                }Di2015NewLineDi2015NewLine                return match;Di2015NewLine            });Di2015NewLineDi2015NewLine            routeData.Values["MS_SubRoutes"] = filteredSubRoutes.ToArray();Di2015NewLine        }Di2015NewLineDi2015NewLine        return controllerDescriptor;Di2015NewLine    }Di2015NewLineDi2015NewLine    private HttpControllerDescriptor GetControllerDescriptor(IHttpRouteData routeData)Di2015NewLine    {Di2015NewLine        return ((HttpActionDescriptor[])routeData.Route.DataTokens["actions"]).First().ControllerDescriptor;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Get a value from the route data, if present.Di2015NewLine    private static T GetRouteVariable<T>(IHttpRouteData routeData, string name)Di2015NewLine    {Di2015NewLine        object result = null;Di2015NewLine        if (routeData.Values.TryGetValue(name, out result))Di2015NewLine        {Di2015NewLine            return (T)result;Di2015NewLine        }Di2015NewLine        return default(T);Di2015NewLine    }Di2015NewLine
19882624Di2015UniqueSeparatorprivate int _x;Di2015NewLinepublic int XDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return _x;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _x = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19882624Di2015UniqueSeparator_x
19882668Di2015UniqueSeparatorMessageBox.<strong>S</strong>how("hello ");
19882668Di2015UniqueSeparatorusing System.Windows.Forms;
19882668Di2015UniqueSeparatorSystem.Windows.Forms.MessageBox.Show("hello ");
19882698Di2015UniqueSeparatorpublish
19882698Di2015UniqueSeparatorvoid Publish<TEvent, TPayload>(TEvent @event) where TEvent : IEvent<TPayload>;Di2015NewLine
19882698Di2015UniqueSeparatorTEvent
19882698Di2015UniqueSeparatorTPayload
19882698Di2015UniqueSeparatorTEvent
19882698Di2015UniqueSeparatorIEvent<TPayload>
19882698Di2015UniqueSeparatorTEvent
19882698Di2015UniqueSeparatorvoid Publish<TEvent>(TEvent @event);Di2015NewLine
19882698Di2015UniqueSeparatormessageBus.Publish( new CorrectorAdded( 10 ) );Di2015NewLine// would be the same asDi2015NewLinemessageBus.Publish<CorrectorAdded>( new CorrectorAdded( 10 ) );Di2015NewLine
19882698Di2015UniqueSeparatorTPayload
19882698Di2015UniqueSeparatorIEvent<TPayload>
19882698Di2015UniqueSeparatorTPayload
19882698Di2015UniqueSeparatorvoid Publish<TEvent, TPayload>(TEvent @event, TPayload payload) where TEvent : IEvent<TPayload>;Di2015NewLine
19882698Di2015UniqueSeparatormessageBus.Publish( new CorrectorAdded( 10 ), new FooThatImplementsTPayload() );Di2015NewLine
19882784Di2015UniqueSeparatorprivate void button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    PowerShell ps = PowerShell.Create();Di2015NewLineDi2015NewLine    ps.AddCommand("Stop-Process");Di2015NewLine    ps.AddParameter("Name", textBox1.Text);Di2015NewLineDi2015NewLine    ps.Invoke();Di2015NewLine} Di2015NewLine
19882836Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine// not hereDi2015NewLineDi2015NewLinenamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLineDi2015NewLine    // not hereDi2015NewLineDi2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLineDi2015NewLine        // put it INSIDE the classDi2015NewLineDi2015NewLine        [DllImport("user32.dll")]Di2015NewLine        public static extern short GetAsyncKeyState(int vKey);Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLineDi2015NewLine            // not inside methods, thoughDi2015NewLineDi2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19882930Di2015UniqueSeparator(\\w+)\\s*=\\s*"(.*?)"Di2015NewLine
19882930Di2015UniqueSeparator(\\w+)
19882930Di2015UniqueSeparator\\s*
19882930Di2015UniqueSeparator=
19882930Di2015UniqueSeparator\\s*
19882930Di2015UniqueSeparator"(.*?)"
19882962Di2015UniqueSeparatorWPF
19882962Di2015UniqueSeparatorTextblocks
19882962Di2015UniqueSeparatorStackPanel
19882962Di2015UniqueSeparatorDataTemplate
19882962Di2015UniqueSeparatorListbox
19882962Di2015UniqueSeparatorItemTemplate
19882962Di2015UniqueSeparatorOrientation
19882962Di2015UniqueSeparatorHorizontal
19882962Di2015UniqueSeparatorTextAlignment
19882962Di2015UniqueSeparatorRight
19882962Di2015UniqueSeparatorLeft
19882962Di2015UniqueSeparatorGridColumns
19882962Di2015UniqueSeparatorTextblocks
19883214Di2015UniqueSeparatorfinished_lines
19883214Di2015UniqueSeparatorA B C D ...Di2015NewLineB C D E ...Di2015NewLineC D E F ...Di2015NewLineD E F G ...Di2015NewLine. . . . ...Di2015NewLine
19883214Di2015UniqueSeparatorParallelExtensionsExtras
19883345Di2015UniqueSeparatorWindowMaxWidth
19883345Di2015UniqueSeparatorWindowMinWidth
19883345Di2015UniqueSeparatorx:Static
19883345Di2015UniqueSeparatornamespace MyNamespaceDi2015NewLine{Di2015NewLine   class ViewModelDi2015NewLine   {Di2015NewLine      public static double WindowMaxWidth = 400;Di2015NewLine      public static double WindowMinWidth = 25;Di2015NewLine   }Di2015NewLine}Di2015NewLine
19883345Di2015UniqueSeparatorxmlns:myns="clr-namespace:MyNamespace"
19883345Di2015UniqueSeparator<DoubleAnimation Storyboard.TargetProperty="Width"Di2015NewLine    To="{x:Static myns:ViewModel.WindowMaxWidth}"Di2015NewLine    Duration="0:0:0:0.2"/>Di2015NewLine
19883434Di2015UniqueSeparatorEquals
19883434Di2015UniqueSeparatorEquals
19883434Di2015UniqueSeparatorGetHashCode
19883434Di2015UniqueSeparatorCar
19883434Di2015UniqueSeparatorIEnumerableComparer<T>
19883434Di2015UniqueSeparatorIEqualityComparer<T>
19883434Di2015UniqueSeparatorEquals
19883434Di2015UniqueSeparatorEquals
19883434Di2015UniqueSeparatorGetHashCode
19883434Di2015UniqueSeparatorclass Car
19883434Di2015UniqueSeparatorstruct Car
19883434Di2015UniqueSeparatorSequenceEqual
19883434Di2015UniqueSeparatorSequenceEqual
19883689Di2015UniqueSeparatorpublic static string GetPropertyName<T, TReturn>(Expression<Func<T, TReturn>> expression)Di2015NewLine{Di2015NewLine    MemberExpression body = (MemberExpression)expression.Body;Di2015NewLine    return body.Member.Name;Di2015NewLine}Di2015NewLine
19883689Di2015UniqueSeparatorvar name = GetPropertyName<MyClass, string>(c => c.FirstName);Di2015NewLine
19883689Di2015UniqueSeparatorMyClass
19883689Di2015UniqueSeparatorpublic static class TypeMember<T>Di2015NewLine{Di2015NewLine    public static string GetPropertyName<TReturn>(Expression<Func<T, TReturn>> expression)Di2015NewLine    {Di2015NewLine        MemberExpression body = (MemberExpression)expression.Body;Di2015NewLine        return body.Member.Name;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19883689Di2015UniqueSeparatorvar name = TypeMember<MyClass>.GetPropertyName(c => c.FirstName);Di2015NewLine
19883818Di2015UniqueSeparatorpublic IEnumerable<int> GetAdjacencies(int vertex)Di2015NewLine{Di2015NewLine    foreach (int i in adj[vertex])Di2015NewLine        yield return i;Di2015NewLine}Di2015NewLine
19883900Di2015UniqueSeparatorcatch
19883900Di2015UniqueSeparatorsqlTrans.Rollback();
19883900Di2015UniqueSeparatorcatch (System.Data.SqlClient.SqlException)Di2015NewLine{Di2015NewLine    sqlTrans.Rollback();Di2015NewLine    throw;Di2015NewLine}Di2015NewLine
19883900Di2015UniqueSeparatorTRUNCATE TABLE
19883900Di2015UniqueSeparatorstring delCmdTxt = "delete from PLODINY";Di2015NewLineSqlCommand cmdDel = spojeni.CreateCommand();Di2015NewLinecmdDel.CommandText = delCmdTxt;Di2015NewLinecmdDel.Transaction = sqlTrans;Di2015NewLinecmdDel.ExecuteNonQuery();Di2015NewLine
19883900Di2015UniqueSeparatorstring insert_sql = "INSERT INTO PLODINY(PLODINA,CENAZAQ,MJ)VALUES(@PLODINA,@CENAZAQ,@MJ)";Di2015NewLineusing(SqlCommand sqlcom = spojeni.CreateCommand())Di2015NewLine{Di2015NewLine    sqlcom.CommandText = insert_sql;Di2015NewLine    sqlcom.Transaction = sqlTrans;Di2015NewLineDi2015NewLine    sqlcom.Parameters.Add("@PLODINA", SqlDbType.NVarChar); //Replace with whatever the correct datatypes areDi2015NewLine    sqlcom.Parameters.Add("@CENAZAQ", SqlDbType.NVarChar);Di2015NewLine    sqlcom.Parameters.Add("@MJ", SqlDbType.NVarChar);Di2015NewLineDi2015NewLine    foreach (DataGridViewRow row in dataGridView1.Rows)Di2015NewLine    {Di2015NewLine        sqlcom.Parameters["@PLODINA"] = row.Cells["PLODINA"].Value;Di2015NewLine        sqlcom.Parameters["@CENAZAQ"] = row.Cells["CENAZAQ"].Value;Di2015NewLine        sqlcom.Parameters["@MJ"] = row.Cells["MJ"].Value;Di2015NewLineDi2015NewLine        sqlcom.ExecuteNonQuery();    Di2015NewLine    }Di2015NewLine}Di2015NewLinesqlTrans.Commit();Di2015NewLine
19883900Di2015UniqueSeparatorprivate string _getDataQuery = "select PLODINA, CENAZAQ, MJ from PLODINY";Di2015NewLineDi2015NewLinepublic void GetData(DataTable data)Di2015NewLine{Di2015NewLine    //You do not need to call open here as SqlDataAdapter does it for you internally.Di2015NewLine    using(var spojeni = new SqlConnection(GetConnectionString())Di2015NewLine    using(var adapter = new SqlDataAdapter(_getDataQuery, spojeni)Di2015NewLine    {Di2015NewLine        data.Clear();Di2015NewLine        adapter.Fill(data);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic void UpdateData(DataTable data)Di2015NewLine{Di2015NewLine    using(var spojeni = new SqlConnection(GetConnectionString())Di2015NewLine    using(var adapter = new SqlDataAdapter(_getDataQuery, spojeni)Di2015NewLine    using(var commandBuilder = new SqlCommandBuilder(adapter)Di2015NewLine    {Di2015NewLine        //This may or may not be nessesary for spojeni.BeginTransaction()Di2015NewLine        spojeni.Open();Di2015NewLineDi2015NewLine        using(var sqlTrans = spojeni.BeginTransaction())Di2015NewLine        {Di2015NewLine            adapter.SelectCommand.Transaction = sqlTrans;Di2015NewLineDi2015NewLine            adapter.UpdateCommand = commandBuilder.GetUpdateCommand();Di2015NewLine            adapter.UpdateCommand.Transaction = sqlTrans;Di2015NewLineDi2015NewLine            adapter.DeleteCommand = commandBuilder.GetDeleteCommand();Di2015NewLine            adapter.DeleteCommand.Transaction = sqlTrans;Di2015NewLineDi2015NewLine            adapter.InsertCommand = commandBuilder.GetInsertCommand()Di2015NewLine            adapter.InsertCommand.Transaction = sqlTrans;Di2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                adapter.Update(data);Di2015NewLine                sqlTrans.Commit();Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                sqlTrans.Rollback();Di2015NewLine                throw;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19883977Di2015UniqueSeparatorList<string>
19883977Di2015UniqueSeparator var myFruits = Session["Fruitname"] as List<string>;Di2015NewLine myFruits.Add(TbxName.Text);Di2015NewLine
19884150Di2015UniqueSeparatorprivate void pass_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  string password = "mypass";Di2015NewLine}Di2015NewLine
19884150Di2015UniqueSeparatorprivate void pass_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  password = "mypass";Di2015NewLine}Di2015NewLine
19884252Di2015UniqueSeparatorpublic ShoppingBasketList()Di2015NewLine{Di2015NewLine    Items = new List<ShoppingBasketItem>();Di2015NewLine}Di2015NewLine
19884252Di2015UniqueSeparatorShoppingBasketList
19884252Di2015UniqueSeparatorShoppingBasket
19884252Di2015UniqueSeparatorShoppingBasketList
19884252Di2015UniqueSeparatorShoppingBasket
19884252Di2015UniqueSeparatorpublic ShoppingBasket()Di2015NewLine{Di2015NewLine    Items = new List<ShoppingBasketItem>();Di2015NewLine}Di2015NewLine
19884277Di2015UniqueSeparatorcharCountOutput.Text = ...Di2015NewLine
19884277Di2015UniqueSeparatorcharCountOutput.Text = userInput.Length.ToString();Di2015NewLine
19884370Di2015UniqueSeparatorint i;Di2015NewLinevar items = Request["important"];Di2015NewLinestring myString = "test ";Di2015NewLinefor (i=0; i < items.Length; i++)Di2015NewLine{Di2015NewLine    myString += items[i];Di2015NewLineDi2015NewLine}Di2015NewLineResponse.Write(myString);Di2015NewLine
19884394Di2015UniqueSeparatorList<Tuple<int,int>>
19884457Di2015UniqueSeparator<runtime>Di2015NewLine    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">Di2015NewLine      <dependentAssembly>Di2015NewLine        <assemblyIdentity name="ServiceStack.Common" culture="neutral" />Di2015NewLine        <bindingRedirect oldVersion="0.0.0.0-3.9.70.0" newVersion="3.9.70.0" />Di2015NewLine      </dependentAssembly>Di2015NewLine   </assemblyBinding>Di2015NewLine</runtime>Di2015NewLine
19884457Di2015UniqueSeparator<configuration></configuration>
19884457Di2015UniqueSeparator<configuration>Di2015NewLine    <runtime>Di2015NewLine        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">Di2015NewLine          <dependentAssembly>Di2015NewLine            <assemblyIdentity name="ServiceStack.Common" culture="neutral" />Di2015NewLine            <bindingRedirect oldVersion="0.0.0.0-3.9.70.0" newVersion="3.9.70.0" />Di2015NewLine          </dependentAssembly>Di2015NewLine       </assemblyBinding>Di2015NewLine    </runtime>Di2015NewLine</configuration>Di2015NewLine
19884506Di2015UniqueSeparatorpeople = Session["mySession"] as List<string>;Di2015NewLine//Create new, if nullDi2015NewLineif(people == null) Di2015NewLine    people = new List<string>();Di2015NewLineDi2015NewLinepeople.Add(TextBox1.Text);Di2015NewLineDi2015NewLineSession["mySession"] = people;Di2015NewLine
19884506Di2015UniqueSeparatorpeople = Session["mySession"] as List<string>;Di2015NewLine//Create new, if nullDi2015NewLineif(people == null) Di2015NewLinepeople = new List<string>();Di2015NewLineListBox1.DataSource = people;Di2015NewLineListBox1.DataBind();Di2015NewLine
19884506Di2015UniqueSeparatorpublic static List<string> GetPeopleFromSession(){Di2015NewLine    var people = HttpContext.Current.Session["mySession"] as List<string>;Di2015NewLine    //Create new, if nullDi2015NewLine    if(people == null) Di2015NewLine        people = new List<string>();Di2015NewLine    return people;Di2015NewLine}Di2015NewLine
19884566Di2015UniqueSeparatorstring
19884566Di2015UniqueSeparatorDateTime
19884566Di2015UniqueSeparatorDateTime.Parse(value)
19884566Di2015UniqueSeparatorDateTime.TryParse(string)
19884566Di2015UniqueSeparatorvar value = "2013/11/07 23:08:53 +0000";Di2015NewLineDi2015NewLineDateTime dateTime;Di2015NewLineDi2015NewLineif(DateTime.TryParse(value, out dateTime))Di2015NewLine{Di2015NewLine    // The string is a valid DateTimeDi2015NewLineDi2015NewLine    // This will output '11:08 PM'Di2015NewLine    Console.WriteLine(dateTime.ToShortTimeString());Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // The string is not a valid DateTimeDi2015NewLine}Di2015NewLine
19884844Di2015UniqueSeparatorprivate void userTextBox_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string userInput = userTextBox.Text;Di2015NewLine    userInput = userInput.Trim();Di2015NewLine    string[] wordCount = userInput.Split(null);Di2015NewLineDi2015NewLine    int charCount = 0;Di2015NewLine    foreach (var word in wordCount)Di2015NewLine        charCount += word.Length;Di2015NewLineDi2015NewLine    wordCountOutput.Text = wordCount.Length.ToString();Di2015NewLine    charCountOutput.Text = charCount.ToString();Di2015NewLine}Di2015NewLine
19885033Di2015UniqueSeparatorIOException
19885323Di2015UniqueSeparatorList<FileInfo>
19885323Di2015UniqueSeparatorList<List<FileInfo>>
19885323Di2015UniqueSeparatorprivate void getfiles() {Di2015NewLine  List<FileInfo> fileList = new List<FileInfo>();Di2015NewLine  for (int i = 0; i < BackgroundWorkerConfiguration.urlsDirectories.Count; i++) {Di2015NewLine    System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(BackgroundWorkerConfiguration.urlsDirectories[i]);Di2015NewLine    fileList.AddRange(di.GetFiles("*.*", System.IO.SearchOption.AllDirectories)Di2015NewLine                        .Where(x => x.Length > 0));Di2015NewLine  }Di2015NewLine  file_array = fileList.OrderBy(x => x.CreationTime)Di2015NewLine                       .GroupBy(x => x.DirectoryName)Di2015NewLine                       .Select(g => g.Select(x => x.FullName).ToList())Di2015NewLine                       .ToArray();Di2015NewLine  timer1.Enabled = true;Di2015NewLine}Di2015NewLine
19885323Di2015UniqueSeparatorfile_array
19885323Di2015UniqueSeparatorList<string>[]
19885323Di2015UniqueSeparatorList<string>
19885323Di2015UniqueSeparatortimer1
19885387Di2015UniqueSeparatorBinaryFormatter
19885387Di2015UniqueSeparator    static private byte[] SerializeStudentPacket(StudentPacket packet)Di2015NewLine    {Di2015NewLine        var bf = new BinaryFormatter();Di2015NewLine        var ms = new MemoryStream();Di2015NewLine        bf.Serialize(ms, packet.age);Di2015NewLine        bf.Serialize(ms, packet.firstName);Di2015NewLine        bf.Serialize(ms, packet.grades);Di2015NewLine        bf.Serialize(ms, packet.height);Di2015NewLine        bf.Serialize(ms, packet.lastName);Di2015NewLine        return ms.ToArray();Di2015NewLine    }Di2015NewLine
19885387Di2015UniqueSeparator    ParameterExpression @object = Expression.Parameter(typeof(StudentPacket), "@object");Di2015NewLine    MethodInfo serializeMethodInfo = typeof(BinaryFormatter).GetMethod("Serialize", new Type[] { typeof(Stream), typeof(object) });Di2015NewLine    MethodInfo toArrayMethodInfo = typeof(MemoryStream).GetMethod("ToArray");Di2015NewLine    var bf = Expression.Variable(typeof(BinaryFormatter), "bf");Di2015NewLine    var ms = Expression.Variable(typeof(System.IO.MemoryStream), "ms");Di2015NewLine    List<Expression> expressions = new List<Expression>();Di2015NewLine    expressions.Add(Di2015NewLine        Expression.Assign(bf, Expression.New(typeof(BinaryFormatter))));Di2015NewLine    expressions.Add(Di2015NewLine        Expression.Assign(ms, Expression.New(typeof(MemoryStream))));Di2015NewLine    foreach (FieldInfo field in typeof(StudentPacket).GetFields())Di2015NewLine    {Di2015NewLine        expressions.Add(Di2015NewLine           Expression.Call(bf, serializeMethodInfo, ms, Di2015NewLine                           Expression.Convert(Expression.Field(@object, field.Name),Di2015NewLine                                              typeof(object))));Di2015NewLine    }Di2015NewLine    expressions.Add(Expression.Call(ms, toArrayMethodInfo));Di2015NewLine    var lambda = Expression.Lambda(Di2015NewLine        Expression.Block(Di2015NewLine            new[] { bf, ms },Di2015NewLine            expressionsDi2015NewLine        ),Di2015NewLine        @object);Di2015NewLine
19885387Di2015UniqueSeparatorlambda.Compile()
19885387Di2015UniqueSeparatorStudentPacket
19885532Di2015UniqueSeparatorstr.Write
19885532Di2015UniqueSeparatorRead(
19885532Di2015UniqueSeparatorWrite(
19885532Di2015UniqueSeparatorRead
19885532Di2015UniqueSeparatorargs = "client 0";Di2015NewLineStream str = tcp.GetStream();Di2015NewLineASCIIEncoding asen = new ASCIIEncoding();Di2015NewLinebyte[] b = asen.GetBytes(args);Di2015NewLineif(b.Length > 255)Di2015NewLine    throw new InvalidDataException("Messages must have a length less than 256");Di2015NewLinestr.WriteByte((byte)b.Length);Di2015NewLinestr.Write(b, 0, b.Length);Di2015NewLine
19885532Di2015UniqueSeparatorbyte[] message = new byte[256]; //This can now be 256 as that is the most messageLength can be.Di2015NewLinewhile (true)Di2015NewLine{Di2015NewLine    //get the length of the messageDi2015NewLine    int messageLength = clientStream.ReadByte();Di2015NewLine    if(messageLength == -1)Di2015NewLine        break;Di2015NewLineDi2015NewLine    // "Read(" can read less than the total length you requested, so you must loop till you have the entire message.Di2015NewLine    int offset = 0;Di2015NewLine    while(offset < messageLength)Di2015NewLine    {Di2015NewLine        offset += clientStream.Read(message, offset, messageLength - offest);Di2015NewLine    }Di2015NewLine    Console.WriteLine("client connected : " + Encoding.UTF8.GetString(message, 0, message.Length));Di2015NewLine}Di2015NewLine
19885532Di2015UniqueSeparatorstr.Write(BitConverter.GetBytes(b.Length), 0, 4)
19885532Di2015UniqueSeparatorint messageLength = BitConverter.ToInt32(message)
19885532Di2015UniqueSeparatorBitConverter.IsLittleEndian
19885532Di2015UniqueSeparatortrue
19885686Di2015UniqueSeparatorContains
19885686Di2015UniqueSeparatorSystem.Boolean
19885715Di2015UniqueSeparatorAnotherDelegateMethod
19885715Di2015UniqueSeparatorAnotherOneDelegateMethod
19885715Di2015UniqueSeparatorprotected virtual ISomeRepositoryInterface CreateRepositoryInstance()
19885785Di2015UniqueSeparatorcanvas.Children[0]
19885785Di2015UniqueSeparatorCustomIsocelesTriangle
19885785Di2015UniqueSeparatorvar shape = canvas.Children[0];Di2015NewLineConsole.WriteLine(shape.GetType());Di2015NewLine// Should print "program_4.CustomIsocelesTriangle"Di2015NewLine
19885785Di2015UniqueSeparatorICustomShape
19885785Di2015UniqueSeparatorCustomShape
19885785Di2015UniqueSeparatorCustomIsocelesTriangle
19885785Di2015UniqueSeparatorICustomShape
19885785Di2015UniqueSeparatorICustomShape shape = new CustomIsocelesTriangle(/* Fake arguments */);Di2015NewLine
19885785Di2015UniqueSeparatorCustomIsocelesTriangle
19885785Di2015UniqueSeparatorICustomShape
19885785Di2015UniqueSeparatorICustomShape
19885785Di2015UniqueSeparatorCustomIsocelesTriangle
19885911Di2015UniqueSeparatorJsonConverter
19885911Di2015UniqueSeparatorpublic class LaxPropertyNameMatchingConverter : JsonConverterDi2015NewLine{Di2015NewLine    public override bool CanConvert(Type objectType)Di2015NewLine    {Di2015NewLine        return objectType.IsClass;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanWriteDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        object instance = objectType.GetConstructor(Type.EmptyTypes).Invoke(null);Di2015NewLine        PropertyInfo[] props = objectType.GetProperties();Di2015NewLineDi2015NewLine        JObject jo = JObject.Load(reader);Di2015NewLine        foreach (JProperty jp in jo.Properties())Di2015NewLine        {Di2015NewLine            string name = Regex.Replace(jp.Name, "[^A-Za-z0-9]+", "");Di2015NewLineDi2015NewLine            PropertyInfo prop = props.FirstOrDefault(pi => Di2015NewLine                pi.CanWrite && string.Equals(pi.Name, name, StringComparison.OrdinalIgnoreCase));Di2015NewLineDi2015NewLine            if (prop != null)Di2015NewLine                prop.SetValue(instance, jp.Value.ToObject(prop.PropertyType, serializer));Di2015NewLine        }Di2015NewLineDi2015NewLine        return instance;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19885911Di2015UniqueSeparator[JsonConverter]
19885911Di2015UniqueSeparator[JsonConverter(typeof(LaxPropertyNameMatchingConverter))]Di2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine    public string MyProperty { get; set; }Di2015NewLine    public string MyOtherProperty { get; set; }Di2015NewLine}Di2015NewLine
19885911Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string json = @"Di2015NewLine        [Di2015NewLine            { Di2015NewLine                ""my property"" : ""foo"",Di2015NewLine                ""my-other-property"" : ""bar"",Di2015NewLine            },Di2015NewLine            { Di2015NewLine                ""(myProperty)"" : ""baz"",Di2015NewLine                ""myOtherProperty"" : ""quux""Di2015NewLine            },Di2015NewLine            { Di2015NewLine                ""MyProperty"" : ""fizz"",Di2015NewLine                ""MY_OTHER_PROPERTY"" : ""bang""Di2015NewLine            }Di2015NewLine        ]";Di2015NewLineDi2015NewLine        List<MyClass> list = JsonConvert.DeserializeObject<List<MyClass>>(json);Di2015NewLineDi2015NewLine        foreach (MyClass mc in list)Di2015NewLine        {Di2015NewLine            Console.WriteLine(mc.MyProperty);Di2015NewLine            Console.WriteLine(mc.MyOtherProperty);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19885911Di2015UniqueSeparatorfooDi2015NewLinebarDi2015NewLinebazDi2015NewLinequuxDi2015NewLinefizzDi2015NewLinebangDi2015NewLine
19885911Di2015UniqueSeparatorNewtonsoft.Json.Serialization.JsonPropertyCollection
19885911Di2015UniqueSeparatorGetClosestMatchProperty()
19885911Di2015UniqueSeparatorpublic JsonProperty GetClosestMatchProperty(string propertyName)Di2015NewLine{Di2015NewLine    JsonProperty property = GetProperty(propertyName, StringComparison.Ordinal);Di2015NewLine    if (property == null)Di2015NewLine        property = GetProperty(propertyName, StringComparison.OrdinalIgnoreCase);Di2015NewLineDi2015NewLine    return property;Di2015NewLine}Di2015NewLine
19885911Di2015UniqueSeparatorJsonPropertyCollection
19885911Di2015UniqueSeparatorpropertyName
19885911Di2015UniqueSeparatorpublic JsonProperty GetClosestMatchProperty(string propertyName)Di2015NewLine{Di2015NewLine    propertyName = Regex.Replace(propertyName, "[^A-Za-z0-9]+", "");Di2015NewLine    JsonProperty property = GetProperty(propertyName, StringComparison.Ordinal);Di2015NewLine    if (property == null)Di2015NewLine        property = GetProperty(propertyName, StringComparison.OrdinalIgnoreCase);Di2015NewLineDi2015NewLine    return property;Di2015NewLine}Di2015NewLine
19886479Di2015UniqueSeparatorpbs[0].Load(file_array[file_indxs]);
19886479Di2015UniqueSeparatorpbs[file_indxs].Load(file_array[file_indxs]);
19886479Di2015UniqueSeparatorfile_indxs
19886479Di2015UniqueSeparator0
19886479Di2015UniqueSeparator//Use this custom PictureBox for convenienceDi2015NewLinepublic class AnimatedPictureBox : PictureBox {Di2015NewLine  List<string> imageFilenames;Di2015NewLine  Timer t = new Timer();Di2015NewLine  public AnimatedPictureBox(){Di2015NewLine    AnimateRate = 100; //It's up to you, the smaller, the faster.Di2015NewLine    t.Tick += Tick_Animate;      Di2015NewLine  }Di2015NewLine  public int AnimateRate {Di2015NewLine    get { return t.Interval; } Di2015NewLine    set { t.Interval = value;}Di2015NewLine  }Di2015NewLine  public void Animate(List<string> imageFilenames){Di2015NewLine    this.imageFilenames = imageFilenames;Di2015NewLine    t.Start();Di2015NewLine  }Di2015NewLine  public void StopAnimate(){Di2015NewLine    t.Stop();Di2015NewLine    i = 0;Di2015NewLine  }Di2015NewLine  int i;Di2015NewLine  private void Tick_Animate(object sender, EventArgs e){Di2015NewLine    if(imageFilenames == null) return;Di2015NewLine    Load(imageFilenames[i]);Di2015NewLine    i = (i+1)%imageFilenames.Count;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine//Now use the AnimatedPictureBox instead of the PictureBoxDi2015NewLineAnimatedPictureBox[] pbs = new AnimatedPictureBox[8];Di2015NewLine//Animate all the PictureBoxesDi2015NewLinefor(int i = 0; i < file_array.Length; i++){Di2015NewLine  pbs[i].Animate(file_array[i]);Di2015NewLine}Di2015NewLine
19886479Di2015UniqueSeparatorgetfiles
19886479Di2015UniqueSeparatorList<string>
19886479Di2015UniqueSeparatorfile_array
19886479Di2015UniqueSeparator//Note that you now don't need your timer1, just remove it.Di2015NewLineprivate List<string>[] getfiles() {Di2015NewLine   //....Di2015NewLine   return file_array;Di2015NewLine}Di2015NewLine//When calling getfiles, Di2015NewLine//you have to assign the file_array variable to the return valueDi2015NewLineList<string>[] file_array; //your variable, you defined it as string[], Di2015NewLine                           //but it won't work, we have to use List<string>[]Di2015NewLinefile_array = getfiles();Di2015NewLine
19886479Di2015UniqueSeparatorStopAnimate
19886627Di2015UniqueSeparatorActor
19886627Di2015UniqueSeparatornull
19886627Di2015UniqueSeparatorActor.PositionToSet
19886627Di2015UniqueSeparatornull
19886627Di2015UniqueSeparatorif(Actor == null){Di2015NewLine    System.Console.WriteLine("Actor is NULL");Di2015NewLine}Di2015NewLineDi2015NewLineif(Actor.PositionToSet == null){Di2015NewLine    System.Console.WriteLine("Actor.PositionToSet is NULL");Di2015NewLine}Di2015NewLine
19886854Di2015UniqueSeparatorstring bla = "blabllabnsdfsdfsd";Di2015NewLineDi2015NewLinebla = Regex.Replace(bla, ".{4}", "$0-");Di2015NewLinebla = bla.Remove(bla.Length - 1);Di2015NewLine
19886890Di2015UniqueSeparatorregasm
19887258Di2015UniqueSeparator<asp:TreeView ID="TV_Question_Summary" runat="server" ImageSet="Simple" Di2015NewLine    ShowLines="True" OnTreeNodeDataBound="TV_Question_Summary_DataBound">Di2015NewLine    ...                                                                                Di2015NewLine
19887270Di2015UniqueSeparatorint statusID =0;Di2015NewLineDi2015NewLineif(Session["statusID"] != null && int.TryParse(Session["statusID"].ToString(), out statusID) && statusID ==1)Di2015NewLine{Di2015NewLine    using(SqlConnection con = new SqlConnection(ConnectionString))// set ConnectionStringDi2015NewLine    {Di2015NewLine        using(SqlCommand cmd = new SqlCommand("update tblstatus set statusID=2 where      expenesesid=@expensesid",con)) // set appropriate queryDi2015NewLine        {Di2015NewLine            sqldatadapter da=new sqldatadapter(cmd) ;Di2015NewLine            con.Open();Di2015NewLine            cmd.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887422Di2015UniqueSeparatorinternal interface IHashCodeProviderDi2015NewLine{Di2015NewLine    int ProvideHashCode(string stringValue);Di2015NewLine}Di2015NewLine
19887422Di2015UniqueSeparatorFunc<string, int>
19887422Di2015UniqueSeparatorx => x.GetHashCode()
19887455Di2015UniqueSeparatorpublic double CalculateCalories(string text, double mass, double time)Di2015NewLine{Di2015NewLine    int index = -1;Di2015NewLineDi2015NewLine    //First we find the index we're interested inDi2015NewLine    for(int i=0; i < activity.count; i++)Di2015NewLine    {Di2015NewLine        string act = activity[i].ToString();Di2015NewLineDi2015NewLine        //If we match the string perfectly, then we know the indexDi2015NewLine        if (act.Equals(text))Di2015NewLine        {Di2015NewLine            index = i;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    if (index.Equals(-1))Di2015NewLine    {Di2015NewLine        //error - throw some sort of exceptionDi2015NewLine    }Di2015NewLineDi2015NewLine    //Now that we know the index, we'll determine which arrayList we look forDi2015NewLineDi2015NewLine    double calorieCount  = 0;Di2015NewLineDi2015NewLine    if (mass < 130)Di2015NewLine    {Di2015NewLine        //take from the small oneDi2015NewLine        calorieCount = rangeSmall[index];Di2015NewLine    }Di2015NewLine    else if (//Follow the same pattern)Di2015NewLine    {Di2015NewLine        //Di2015NewLine    }Di2015NewLineDi2015NewLine    //Then multiply it by time somehow - depending on how your multiplier is set upDi2015NewLineDi2015NewLine    return time*calorieCount;Di2015NewLineDi2015NewLine}Di2015NewLine
19887554Di2015UniqueSeparatorusing System.Web;Di2015NewLineusing System.Text;Di2015NewLineusing System.Web.UI;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// A JavaScript alertDi2015NewLine/// </summary>Di2015NewLinepublicstaticclass AlertDi2015NewLine{Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Shows a client-side JavaScript alert in the browser.Di2015NewLine/// </summary>Di2015NewLine/// <param name="message">The message to appear in the alert.</param>Di2015NewLinepublicstaticvoid Show(string message)Di2015NewLine{Di2015NewLine   // Cleans the message to allow single quotation marksDi2015NewLine   string cleanMessage = message.Replace("'", "\\\\'");Di2015NewLine   string script ="<script type=\\"text/javascript\\">alert('"+ cleanMessage +"');</script>";Di2015NewLineDi2015NewLine   // Gets the executing web pageDi2015NewLine   Page page = HttpContext.Current.CurrentHandler as Page;Di2015NewLineDi2015NewLine   // Checks if the handler is a Page and that the script isn't allready on the PageDi2015NewLine   if (page !=null && !page.ClientScript.IsClientScriptBlockRegistered("alert"))Di2015NewLine   {Di2015NewLine      page.ClientScript.RegisterClientScriptBlock(typeof(Alert), "alert", script);Di2015NewLine   }Di2015NewLine}    Di2015NewLine}Di2015NewLine
19887554Di2015UniqueSeparatorButton.Click
19887554Di2015UniqueSeparatorvoid btnSave_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   tryDi2015NewLine   {Di2015NewLineDi2015NewLine      Alert.Show("Your Message");Di2015NewLine   }Di2015NewLine   catch (Exeception ex )Di2015NewLine   {Di2015NewLine      Alert.Show(ex.Message);Di2015NewLine   }Di2015NewLine}Di2015NewLine
19887554Di2015UniqueSeparatorpublic static class ConnectionDi2015NewLine    {Di2015NewLine        public static ArrayList GetCoffeeByType(string coffeetype)Di2015NewLine        {Di2015NewLine            ArrayList list = new ArrayList();Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                mydbEntities db = new mydbEntities();Di2015NewLine                var query = from p in db.tableabc select p;Di2015NewLine                list = query.ToList();Di2015NewLineDi2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine               Alert.Show(ex.Message);Di2015NewLineDi2015NewLine            }Di2015NewLine            return list;Di2015NewLine        }Di2015NewLine}Di2015NewLine
19887560Di2015UniqueSeparatorRectangle hl_rect = new Rectangle();Di2015NewLinehl_rect.Y = (e.CellBounds.Y + 2);Di2015NewLinehl_rect.Height = (e.CellBounds.Height - 5);Di2015NewLine
19887560Di2015UniqueSeparatorX
19887560Di2015UniqueSeparatorWidth
19887560Di2015UniqueSeparatorTextRenderingHint.AntiAlias
19887560Di2015UniqueSeparatorprivate void dataGridView1_CellPainting(object sender, Di2015NewLine                                        DataGridViewCellPaintingEventArgs e) {Di2015NewLine     if (e.RowIndex > -1 && e.ColumnIndex > -1 && e.Value != null) {Di2015NewLine         string value = e.Value.ToString();Di2015NewLine         foreach (var s in HighlightStrings) {Di2015NewLine            int i = 0;Di2015NewLine            while (i < value.Length && (i = value.IndexOf(s,i))!=-1) {Di2015NewLine              if (!e.Handled){Di2015NewLine                  e.Handled = true;Di2015NewLine                  e.PaintBackground(e.ClipBounds, true);Di2015NewLine               }                        Di2015NewLine               StringFormat sf = StringFormat.GenericTypographic;Di2015NewLine               sf.LineAlignment = StringAlignment.Center; Di2015NewLine               RectangleF textBounds = GetTextBounds(e.Graphics, Di2015NewLine                                                     value, i, s.Length,Di2015NewLine                                                     e.CellBounds, Di2015NewLine                                                     e.CellStyle.Font, sf);Di2015NewLine              //highlight itDi2015NewLine              e.Graphics.FillRectangle(Brushes.Yellow, textBounds);Di2015NewLine              i += s.Length;Di2015NewLine              using (Brush brush = new SolidBrush(e.CellStyle.ForeColor)) {Di2015NewLine                 //draw string , don't use PaintContentDi2015NewLine                 e.Graphics.DrawString(value, e.CellStyle.Font, brush,Di2015NewLine                                       e.CellBounds, sf);Di2015NewLine              }Di2015NewLine            }Di2015NewLine         }                Di2015NewLine     }Di2015NewLine }Di2015NewLine public RectangleF GetTextBounds(Graphics g, string text, Di2015NewLine                                 int subIndex, int subLength, Di2015NewLine                                 RectangleF layout, Di2015NewLine                                 Font font, StringFormat sf) {Di2015NewLine      var charRange = new CharacterRange(0, text.Length);Di2015NewLine      var subCharRange = new CharacterRange(subIndex, subLength);Di2015NewLine      sf.SetMeasurableCharacterRanges(new[]{ charRange, subCharRange });Di2015NewLine      var regions = g.MeasureCharacterRanges(text, font, layout, sf);Di2015NewLine      return regions.Length < 2 ? RectangleF.Empty : regions[1].GetBounds(g);Di2015NewLine }Di2015NewLine
19887560Di2015UniqueSeparatorDrawString
19887560Di2015UniqueSeparatorTextBound
19887560Di2015UniqueSeparatorPaintContent
19887595Di2015UniqueSeparatornamespace ServerProjDi2015NewLine{Di2015NewLine    using System.ServiceModel;Di2015NewLine    using Common;Di2015NewLineDi2015NewLine    [ServiceContract]Di2015NewLine    public interface IRCommServiceDi2015NewLine    {Di2015NewLine        [OperationContract]Di2015NewLine        Result SendMessage(string command, CustomRequest data);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace ServerProjDi2015NewLine{Di2015NewLine    using System.Collections.Generic;Di2015NewLine    using Common;Di2015NewLineDi2015NewLine    public class RCommService : IRCommServiceDi2015NewLine    {Di2015NewLine        public Result SendMessage(string command, CustomRequest data)Di2015NewLine        {   // You can get the value from hereDi2015NewLine            int value = data.MyValue;Di2015NewLineDi2015NewLine            Result result = new Result();Di2015NewLine            List<string> list = new List<string>();Di2015NewLine            list.Add("Sample");Di2015NewLine            result.Rsults = list;Di2015NewLineDi2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887595Di2015UniqueSeparatornamespace CommonDi2015NewLine{Di2015NewLine    using System.Runtime.Serialization;Di2015NewLineDi2015NewLine    [DataContract]Di2015NewLine    public class CustomRequestDi2015NewLine    {Di2015NewLine        [DataMember]Di2015NewLine        public int MyValue { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887595Di2015UniqueSeparatornamespace CommonDi2015NewLine{Di2015NewLine    using System.Collections.Generic;Di2015NewLine    using System.Runtime.Serialization;Di2015NewLineDi2015NewLine    [DataContract]Di2015NewLine    public class ResultDi2015NewLine    {Di2015NewLine        [DataMember]Di2015NewLine        public List<string> Rsults { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887595Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ServiceReference1.RCommServiceClient service = new ServiceReference1.RCommServiceClient();Di2015NewLine            CustomRequest customRequest=new CustomRequest();Di2015NewLine            customRequest.MyValue = 10;Di2015NewLineDi2015NewLine            Result result = service.SendMessage("Test", customRequest);Di2015NewLine        }Di2015NewLine
19887823Di2015UniqueSeparatorlbl_homeCarouselAdd.Text = strDiv.ToString();Di2015NewLine
19887823Di2015UniqueSeparatorlbl_homeCarouselAdd.Text += strDiv.ToString();Di2015NewLine
19887823Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace addlabelsDi2015NewLine{Di2015NewLine    public partial class WebForm1 : System.Web.UI.PageDi2015NewLine    {Di2015NewLineDi2015NewLine        int pressNumberOfTimes;Di2015NewLine        Label lbl_homeCarouselAdd = new Label();Di2015NewLine        static StringBuilder strDiv = new StringBuilder();Di2015NewLine        protected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        protected void add_click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            // Add the panelDi2015NewLine            pressNumberOfTimes++;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine            // Set the label's Text and ID properties.Di2015NewLine            lbl_homeCarouselAdd.ID = "lbl_homeCarouselAdd" + pressNumberOfTimes;Di2015NewLineDi2015NewLineDi2015NewLine            strDiv.Append(string.Format(@"<p class='style'>Hello world</p>"));Di2015NewLineDi2015NewLine            lbl_homeCarouselAdd.Text += strDiv.ToString();Di2015NewLineDi2015NewLineDi2015NewLine            Panel1.Controls.Add(lbl_homeCarouselAdd);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887889Di2015UniqueSeparatorusing (MagickImage sprite = images.AppendHorizontally())Di2015NewLine{Di2015NewLine  sprite.Format = MagickFormat.Jpeg;Di2015NewLine  sprite.Quality = 10;Di2015NewLine  sprite.Resize(40, 40);Di2015NewLine  sprite.Write(spriteFile);Di2015NewLine}Di2015NewLine
19887914Di2015UniqueSeparatorprotected void test()Di2015NewLine{Di2015NewLine    DataTable dt = generateData();Di2015NewLineDi2015NewLine    var result = from row in dt.AsEnumerable()Di2015NewLine                  group row by newDi2015NewLine                  {Di2015NewLine                      CustomerLocation = row.Field<string>("CustomerLocation"),Di2015NewLine                  } into grpDi2015NewLine                  select newDi2015NewLine                  {Di2015NewLine                      CustomerLocation = grp.Key.CustomerLocation,Di2015NewLine                      SumSubTotal = grp.Sum(r => r.Field<int>("SubTotal")),Di2015NewLine                      OrderCount = grp.Count(),Di2015NewLine                      SumCustomerDebt = grp.GroupBy(r=> r.Field<int>("CustomerID"))Di2015NewLine                                           .Sum(g => g.Average(r=> r.Field<int>("CustomerDebt"))),Di2015NewLine                  };Di2015NewLineDi2015NewLineDi2015NewLine    foreach (var item in result)Di2015NewLine    {Di2015NewLine        string info = string.Format("CustomerLocation={0},SumSubTotal={1},OrderCount={2},SumCustomerDebt={3}", item.CustomerLocation, item.SumSubTotal, item.OrderCount, item.SumCustomerDebt);Di2015NewLine        Console.WriteLine(info);    Di2015NewLine    }Di2015NewLine}Di2015NewLine
19887914Di2015UniqueSeparatorCustomerLocation=Chichago,SumSubTotal=80,OrderCount=3,SumCustomerDebt=140Di2015NewLineCustomerLocation=Miami,SumSubTotal=50,OrderCount=1,SumCustomerDebt=20Di2015NewLine
19888060Di2015UniqueSeparatorDATADIRECTORY
19888060Di2015UniqueSeparatorWinForms
19888060Di2015UniqueSeparatorBIN\\DEBUG
19888060Di2015UniqueSeparatorCopy To The Output Directory
19888060Di2015UniqueSeparatorCopy Always
19888060Di2015UniqueSeparatorCopy If Newer
19888060Di2015UniqueSeparatorSERVER EXPLORER
19888064Di2015UniqueSeparatorConvert
19888064Di2015UniqueSeparatorConverters
19888064Di2015UniqueSeparatorinstantiate
19888064Di2015UniqueSeparatorConvert
19888064Di2015UniqueSeparatorpublic Converters {Di2015NewLine   public void Convert(...);Di2015NewLine} Di2015NewLine
19888064Di2015UniqueSeparatorpublic string UploadAsPDF(HttpPostedFileBase fileData)Di2015NewLine     {Di2015NewLine         var fileName = this.Server.MapPath("~/uploads/" + System.IO.Path.GetFileName(fileData.FileName));Di2015NewLine         fileData.SaveAs(fileName);Di2015NewLineDi2015NewLineDi2015NewLine        var converters = new Converters();Di2015NewLine        converters.Convert(outputType, inFile,outFolder,timeout, Di2015NewLine                           topMargin, bottomMargin, leftMargin, rightMargin);Di2015NewLineDi2015NewLine         return "OK"; Di2015NewLine     }Di2015NewLine
19888292Di2015UniqueSeparatorstring viewPath = "...";Di2015NewLinestring template = File.ReadAllText(viewPath);Di2015NewLine
19888292Di2015UniqueSeparatorstring result = Razor.Parse(template, new { Name = "World" });Di2015NewLine
19888294Di2015UniqueSeparatorCREATE TEMPORARY TABLE ##tmptbl (           -- ## needs quotingDi2015NewLine    id int NOT NULL AUTO_INCREMENT,Di2015NewLine    dt DATETIME NOT NULL, Di2015NewLine    qty int11 NOT NULL,                     -- int11 should be int(11)Di2015NewLine    rest int11 NOT NULL,                    -- int11 should be int(11)Di2015NewLine    nom VARCHAR(30) NOT NULL NOT NULL       -- double NOT NULLDi2015NewLine    PRIMARY KEY id,                         -- id needs bracesDi2015NewLine    ENGINE=MEMORY DEFAULT CHARSET=UTF8      -- should go outside the table bracesDi2015NewLine)Di2015NewLine
19888294Di2015UniqueSeparatorCREATE TEMPORARY TABLE `##tmptbl` (Di2015NewLine  id int NOT NULL AUTO_INCREMENT,Di2015NewLine  dt DATETIME NOT NULL, Di2015NewLine  qty int(11) NOT NULL, Di2015NewLine  rest int(11) NOT NULL, Di2015NewLine  nom VARCHAR(30) NOT NULL,Di2015NewLine  PRIMARY KEY (id)Di2015NewLine)Di2015NewLineENGINE=MEMORY DEFAULT CHARSET=UTF8Di2015NewLine
19888369Di2015UniqueSeparatorstopMachineryDelegate
19888369Di2015UniqueSeparatorvoid
19888369Di2015UniqueSeparatorStopMachinery
19888369Di2015UniqueSeparatorStopMachinery
19888369Di2015UniqueSeparatorStopMachinery
19888369Di2015UniqueSeparatorMulticastDelegate
19888369Di2015UniqueSeparatorpainting
19888369Di2015UniqueSeparator // implicitly wrap the `painting` method into a new delegate and Di2015NewLine // assign to the `StopMachinery` fieldDi2015NewLine this.StopMachinery = painting;  Di2015NewLine
19888369Di2015UniqueSeparator+=
19888369Di2015UniqueSeparatorStopMachinery
19888369Di2015UniqueSeparator this.StopMachinery += painting;  Di2015NewLine this.StopMachinery += someOtherMethod;  Di2015NewLine this.StopMachinery += yetAnotherMethod;  Di2015NewLine
19888369Di2015UniqueSeparatorStopMachinery
19888402Di2015UniqueSeparatortypeof(Poco).GetProperty("Email")Di2015NewLine    .AddAttributes(new IndexAttribute { Unique = true });Di2015NewLine
19888402Di2015UniqueSeparator[Index(Unique = true)]
19888430Di2015UniqueSeparatorIsolatedStorageFileStream
19888430Di2015UniqueSeparatorFileMode.Open
19888430Di2015UniqueSeparatorFileMode.CreateNew
19888430Di2015UniqueSeparatorFileMode.CreateOrOpen
19888430Di2015UniqueSeparatorcatch (Exception ex)Di2015NewLine{Di2015NewLine    MessageBox.Show("Exception opening file: " + ex.ToString());Di2015NewLine}Di2015NewLine
19888641Di2015UniqueSeparator.5
19888641Di2015UniqueSeparatorz
19888641Di2015UniqueSeparator+5
19888641Di2015UniqueSeparatorDateTime time = XmlConvert.ToDateTime("2013-11-08T08:08:32+5.5", "yyyy-M-dTH:m:sz.f");Di2015NewLine
19888641Di2015UniqueSeparator.f
19888641Di2015UniqueSeparator.f
19888641Di2015UniqueSeparatorz
19888641Di2015UniqueSeparator:
19888641Di2015UniqueSeparatorz
19888641Di2015UniqueSeparatorzzz
19888641Di2015UniqueSeparatorstring input = "2013-11-08T08:08:32+5.5";Di2015NewLinestring format = "yyyy-M-dTH:m:sz";Di2015NewLinestring correctedInput = input;Di2015NewLinestring correctedFormat = format;Di2015NewLinestring[] temp = input.Split('.');Di2015NewLineif (temp.Length == 2 && temp[1].AsEnumerable().Select(x => char.IsDigit(x)).Count() == temp[1].Length)Di2015NewLine{Di2015NewLine    correctedInput = temp[0] + ":" + Convert.ToString(Math.Round(60 * Convert.ToDecimal(temp[1]) / 10, 2));Di2015NewLine    correctedFormat = "yyyy-M-dTH:m:szzz";Di2015NewLine}Di2015NewLineDateTime time = XmlConvert.ToDateTime(correctedInput, correctedFormat);Di2015NewLine
19888803Di2015UniqueSeparatorJavaScript
19888803Di2015UniqueSeparatorvar result = $('#<%=GridView1.ClientID %> tr td input[id*="chkSelected"][type=checkbox]:checked').map(function () {Di2015NewLineDi2015NewLine    return $(this).closest('tr').find('td').eq(2).text();Di2015NewLineDi2015NewLine    }).get().join();Di2015NewLine
19888884Di2015UniqueSeparatordata:MIMETYPE;base64,CONTENT_AS_BASE64_STRINGDi2015NewLine
19888884Di2015UniqueSeparator<img src=@string.Format("data:{0};base64,{1}", imgMIME[i], Convert.ToBase64String(imgBinary[i]))/> Di2015NewLine
19888884Di2015UniqueSeparator<img src="data:image\\png;base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAABZ0RVh0Q3JlYXRpb24gVGltZQAwOC8xOC8wOaw6EPwAAAAcdEVYdFNvZnR3YXJlAEFkb2JlIEZpcmV3b3JrcyBDUzQGstOgAAACEElEQVRYhcWXQY7TMBSGPyM2SEgUiT25wWRO0CCxeV5xA+YGzA2mF0DM7NjRI7B6b5uROECHFTvCBaCVEEvCIjYKaZraBdpfip7y/GJ/ebZfHNe2LafU/Zxg7/0P4AGwAVbBXQe7AtZAo6pNap8uNQPe+xnwDfgOPEx4ZBfkE+CTqn6AvAyUwb5W1UWAKoFZuMpeXPTNg2/OtlwuQBVsfCtUddVrf7/rQe99fLYA3gI/f1PEKRCRyblwzgGQOmVm5kZACuAzcKuqFcC9pN7+nYpg6+jYmoIx8hztyWQVbBMdx85AXKgnAygAVLU+FcAZ8KXvyAYQkdkhI4eaAb30ZwOIyIKJ/b5HEaA+CEBELoArYC4iywMAimD7xSsNIAz+rud6eQBEFWyTBSAil4PB+xB1xpooYat8TwOIyDXwZiJkzmBOxxS+pI+Au2HbTgARKYFX+zoHzkKWpjS6AyYBgBcJg6fGRoDVsGEKYD3iu6MrJJuE2L8GWPLnnN3Q1YA13RtHiA2w2ANQZAOY2drMSuAceGxml8AFXTltzGwGnJvZzMy2Oh5oDjB2Vtx7Ioqdh4X2lO6Nl0CVMHC/BN+OtScfyczsGrhOje+pCLYZazzG13DnFoTM/4JUOefw3i/oFt3z4K6PBhB0Nbj/ejSAtm1xzj0LtxWAqn4ci00+lucq9XB77CPZlpL/Df+XTp6BXyWzqYOyhB+rAAAAAElFTkSuQmCC" />Di2015NewLine
19888893Di2015UniqueSeparatorRaisePropertyChanged(MyText);
19888893Di2015UniqueSeparatorRaisePropertyChanged("MyText");
19888930Di2015UniqueSeparatorOpenFileDialog
19888930Di2015UniqueSeparatorPictureBox
19888930Di2015UniqueSeparatorprivate string fileName = "";Di2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (openFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK)Di2015NewLine            {Di2015NewLine                fileName = openFileDialog1.FileName;Di2015NewLine                pictureBox1.ImageLocation = fileName; Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button2_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine                ProcessStartInfo info = new ProcessStartInfo();Di2015NewLine                info.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLineDi2015NewLine                info.FileName = "console.exe";Di2015NewLine                info.Arguments = fileName;Di2015NewLine                Process p = new Process();Di2015NewLineDi2015NewLine                p.StartInfo = info;Di2015NewLine                p.Start();Di2015NewLine                p.WaitForExit();Di2015NewLineDi2015NewLine            }Di2015NewLine
19888936Di2015UniqueSeparatorText="{Binding BookedFrom,StringFormat={}{0:HH:mm}}"Di2015NewLine
19889001Di2015UniqueSeparatorDataGridView
19889001Di2015UniqueSeparatorWndProc
19889001Di2015UniqueSeparatorWM_LBUTTONDOWN
19889001Di2015UniqueSeparatorDataGridViewButtonCell
19889001Di2015UniqueSeparatorCellContentClick
19889001Di2015UniqueSeparatorDataGridView
19889001Di2015UniqueSeparatorWM_LBUTTONDOWN
19889001Di2015UniqueSeparatorButton
19889001Di2015UniqueSeparatorpublic class CustomGrid : DataGridViewDi2015NewLine{Di2015NewLine    DataGridViewCell downButton;Di2015NewLine    DataGridViewCell lastHoveredCell;Di2015NewLine    protected override void WndProc(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == 0x201)//WM_LBUTTONDOWN = 0x201Di2015NewLine        {Di2015NewLine            HitTestInfo ht = TryHitTest(m);Di2015NewLine            if (ht.Type == DataGridViewHitTestType.Cell)Di2015NewLine            {Di2015NewLine                downButton = this[ht.ColumnIndex, ht.RowIndex];Di2015NewLine                if (SelectedCells.Count > 1&&downButton is DataGridViewButtonCell){                                    Di2015NewLine                   InvalidateCell(ht.ColumnIndex, ht.RowIndex);Di2015NewLine                   return;Di2015NewLine                }Di2015NewLine            }Di2015NewLine         } else if (m.Msg == 0x202) downButton = null; //WM_LBUTTONUP = 0x202Di2015NewLine         else if (m.Msg == 0x200) { //WM_MOUSEMOVE = 0x200Di2015NewLine            HitTestInfo ht = TryHitTest(m);Di2015NewLine            if (ht.Type == DataGridViewHitTestType.Cell)Di2015NewLine            {Di2015NewLine                if (lastHoveredCell != this[ht.ColumnIndex, ht.RowIndex]){Di2015NewLine                    if(lastHoveredCell != null &&Di2015NewLine                       lastHoveredCell.DataGridView!=null)        Di2015NewLine                       InvalidateCell(lastHoveredCell);                        Di2015NewLine                    lastHoveredCell = this[ht.ColumnIndex, ht.RowIndex];Di2015NewLine                    InvalidateCell(lastHoveredCell);                        Di2015NewLine                }Di2015NewLine            }Di2015NewLine         }            Di2015NewLine         base.WndProc(ref m);            Di2015NewLine    }Di2015NewLine    private HitTestInfo TryHitTest(Message m)Di2015NewLine    {Di2015NewLine        int x = m.LParam.ToInt32() & 0xffff;Di2015NewLine        int y = m.LParam.ToInt32() >> 16;Di2015NewLine        return HitTest(x, y);Di2015NewLine    }Di2015NewLine    protected override void OnCellPainting(DataGridViewCellPaintingEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.ColumnIndex > -1 && e.RowIndex > -1 && this[e.ColumnIndex, e.RowIndex] is DataGridViewButtonCell)Di2015NewLine        {Di2015NewLine            e.Handled = true;Di2015NewLine            e.PaintBackground(e.ClipBounds, false);Di2015NewLine            Rectangle buttonBounds = e.CellBounds;Di2015NewLine            string text = ((DataGridViewButtonColumn)Columns[e.ColumnIndex]).Text;Di2015NewLine            var buttonState = System.Windows.Forms.VisualStyles.PushButtonState.Normal;Di2015NewLine            if(buttonBounds.Contains(PointToClient(MousePosition))){Di2015NewLine                buttonState = MouseButtons == MouseButtons.Left && downButton == this[e.ColumnIndex, e.RowIndex] ?Di2015NewLine                              System.Windows.Forms.VisualStyles.PushButtonState.Pressed :Di2015NewLine                              System.Windows.Forms.VisualStyles.PushButtonState.Hot;Di2015NewLine            }                                Di2015NewLine            ButtonRenderer.DrawButton(e.Graphics, buttonBounds, text, e.CellStyle.Font, false, buttonState);                Di2015NewLine        }Di2015NewLine        else base.OnCellPainting(e);            Di2015NewLine    }Di2015NewLine    protected override void OnColumnWidthChanged(DataGridViewColumnEventArgs e) {Di2015NewLine        base.OnColumnWidthChanged(e);            Di2015NewLine        InvalidateColumn(e.Column.Index);Di2015NewLine    }  Di2015NewLine}Di2015NewLine
19889019Di2015UniqueSeparator// on Windows 8Di2015NewLine// input valueDi2015NewLinestring userName = "John";Di2015NewLineDi2015NewLine// persist dataDi2015NewLineApplicationData.Current.LocalSettings.Values["userName"] = userName;Di2015NewLineDi2015NewLine// read back dataDi2015NewLinestring readUserName = ApplicationData.Current.LocalSettings.Values["userName"] as string;Di2015NewLineDi2015NewLine// on Windows Phone 8Di2015NewLine// input valueDi2015NewLinestring userName = "John";Di2015NewLineDi2015NewLine// persist dataDi2015NewLineIsolatedStorageSettings.ApplicationSettings["userName"] = userName;Di2015NewLineDi2015NewLine// read back dataDi2015NewLinestring readUserName = IsolatedStorageSettings.ApplicationSettings["userName"] as string;Di2015NewLine
19889019Di2015UniqueSeparator// on Windows 8Di2015NewLine// input dataDi2015NewLineint[] value = { 2, 5, 7, 9, 42, 101 };Di2015NewLineDi2015NewLine// persist dataDi2015NewLinestring json = JsonConvert.SerializeObject(value);Di2015NewLineStorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync("myData.json", CreationCollisionOption.ReplaceExisting);Di2015NewLineawait FileIO.WriteTextAsync(file, json);Di2015NewLineDi2015NewLine// read back dataDi2015NewLinestring read = await PathIO.ReadTextAsync("ms-appdata:///local/myData.json");Di2015NewLineint[] values = JsonConvert.DeserializeObject<int[]>(read);Di2015NewLineDi2015NewLineDi2015NewLine// on Windows Phone 8Di2015NewLine// input dataDi2015NewLineint[] value = { 2, 5, 7, 9, 42, 101 };Di2015NewLineDi2015NewLine// persist dataDi2015NewLinestring json = JsonConvert.SerializeObject(value);Di2015NewLineStorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync("myData.json", CreationCollisionOption.ReplaceExisting);Di2015NewLineusing (Stream current = await file.OpenStreamForWriteAsync())Di2015NewLine{Di2015NewLine    using (StreamWriter sw = new StreamWriter(current))Di2015NewLine    {Di2015NewLine        await sw.WriteAsync(json);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// read back dataDi2015NewLineStorageFile file2 = await ApplicationData.Current.LocalFolder.GetFileAsync("myData.json");Di2015NewLinestring read;Di2015NewLineusing (Stream stream = await file2.OpenStreamForReadAsync())Di2015NewLine{Di2015NewLine    using (StreamReader streamReader = new StreamReader(stream))Di2015NewLine    {Di2015NewLine        read = streamReader.ReadToEnd();Di2015NewLine    }Di2015NewLine}Di2015NewLineint[] values = JsonConvert.DeserializeObject<int[]>(read);Di2015NewLine
19889032Di2015UniqueSeparatorprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string item=DropDownList.SelectedItem;Di2015NewLine    Session["selectedItem"]=item;Di2015NewLine    Response.Redirect("TheNextPageURL")Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class TheNextPage : PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if(Session["selectedItem"]!=null)Di2015NewLine        {Di2015NewLine            Label1.Text=Session["selectedItem"].toString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19889083Di2015UniqueSeparatorat Animal.Equals(Animal other)Di2015NewLineat System.Collections.Generic.GenericEqualityComparer`1.IndexOf(T[] array, T value, Int32 startIndex, Int32 count)Di2015NewLineat System.Array.IndexOf[T](T[] array, T value, Int32 startIndex, Int32 count)Di2015NewLineat System.Array.IndexOf[T](T[] array, T value)Di2015NewLineat System.SZArrayHelper.Contains[T](T value)Di2015NewLineat System.Linq.Enumerable.Contains[TSource](IEnumerable`1 source, TSource value) Di2015NewLine
19889083Di2015UniqueSeparatorat Animal.Equals(Object obj)Di2015NewLineat System.Collections.Generic.ObjectEqualityComparer`1.IndexOf(T[] array, T value, Int32 startIndex, Int32 count)Di2015NewLineat System.Array.IndexOf[T](T[] array, T value, Int32 startIndex, Int32 count)Di2015NewLineat System.Array.IndexOf[T](T[] array, T value)Di2015NewLineat System.SZArrayHelper.Contains[T](T value)Di2015NewLineat System.Linq.Enumerable.Contains[TSource](IEnumerable`1 source, TSource value)Di2015NewLine
19889083Di2015UniqueSeparator// Note that T[] : IList<t>, and we want to ensure that if you useDi2015NewLine// IList<yourvaluetype>, we ensure a YourValueType[] can be usedDi2015NewLine// without jitting.  Hence the TypeDependencyAttribute on SZArrayHelper.Di2015NewLine// This is a special hack internally though - see VM\\compile.cpp.Di2015NewLine// The same attribute is on IList<t> and ICollection<t>.Di2015NewLine[TypeDependencyAttribute("System.SZArrayHelper")]Di2015NewLine
19889203Di2015UniqueSeparatorcopy if newer
19889203Di2015UniqueSeparatorcopy always
19889244Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine[DllImport("Info.dll", CharSet=CharSet.Unicode)]Di2015NewLinepublic static extern IntPtr GetInfo(string File1, string File2, double Height, int Num);Di2015NewLine
19889259Di2015UniqueSeparator<input type="hidden" value="@Url.Action("SearchProperties", new { Keyword = "{Prototype}" })" id="BaseSearchURL" />Di2015NewLine
19889259Di2015UniqueSeparator<input type="hidden" value="server/flats-to-rent/{Prototype}" id="BaseSearchURL" />Di2015NewLine
19889259Di2015UniqueSeparator$(document).ready(function() {Di2015NewLine    $('input[type=submit]').submit(function() {Di2015NewLine        var baseURL = $('#BaseSearchURL').val();Di2015NewLine        var keyword = $('input[name=Keyword]');Di2015NewLine        var action = baseURL.replace('{Prototype}', keyword);Di2015NewLine        var form = $(this).parents('form');Di2015NewLine        // Get all parameter except KeywordDi2015NewLine        var params = $('input[name!=Keyword], select, textarea', form).serialize();Di2015NewLine        action += "?" + params;Di2015NewLine        document.location = action;Di2015NewLine    });Di2015NewLine});Di2015NewLine
19889267Di2015UniqueSeparatorvar file = reader[1].ToString();Di2015NewLineDi2015NewLineShapes.DoubleClick += new EventHandler((o, a) => Process.Start(file));Di2015NewLine
19889267Di2015UniqueSeparatorreader[1].ToString()
19889267Di2015UniqueSeparatorDoubelClick
19889511Di2015UniqueSeparator Dim results = From myRow In dt.AsEnumerableDi2015NewLine               Where myRow("Test").StartsWith("Test")Di2015NewLine               Select myRowDi2015NewLine
19889511Di2015UniqueSeparatorContains
19889511Di2015UniqueSeparatorStartsWith
19889511Di2015UniqueSeparatorTest%
19889661Di2015UniqueSeparatorLabel
19889661Di2015UniqueSeparatorAbout
19889661Di2015UniqueSeparatorButton
19889661Di2015UniqueSeparatorCalculate
19889661Di2015UniqueSeparatorcalculatePrice
19889661Di2015UniqueSeparatorTextBox
19889661Di2015UniqueSeparatorLabel
19889661Di2015UniqueSeparatorprotected void ButtonCalculate_Click(sender object, EventArgs e)Di2015NewLine{Di2015NewLine    decimal total = calculatePrice(DropDownList1.SelectedItem.Text,  Di2015NewLine                                   TextBoxQuantity.Text.Trim());Di2015NewLineDi2015NewLine    LabelResult.Text = "You would like " + TextBoxQuantity.Text.Trim() + Di2015NewLine        DropDownList1.SelectedItem.Text + "(s) for a total of $" + Di2015NewLine        total.ToString(); Di2015NewLine}Di2015NewLineDi2015NewLineprivate decimal calculatePrice(string fruitName, int quantity)Di2015NewLine{Di2015NewLine    // Ask the database for the price of this particular piece of fruit by nameDi2015NewLine    decimal costEach = GoToDatabaseAndGetPriceOfFruitByName(fruitName);Di2015NewLineDi2015NewLine    return costEach * quantity;Di2015NewLine}Di2015NewLine
19889684Di2015UniqueSeparatorFunc<KeyCode, bool> checkFire = activeCharacter.continuous_fire ?Di2015NewLine        (Func<KeyCode, bool>)Input.GetKey : Input.GetKeyDown;Di2015NewLine
19889684Di2015UniqueSeparatorinputCheck
19889684Di2015UniqueSeparatorif
19889684Di2015UniqueSeparatordo_fire
19889684Di2015UniqueSeparatorbool do_fire = checkFire(Fire);Di2015NewLine
19889684Di2015UniqueSeparatorPascalCase
19889684Di2015UniqueSeparatorcamelCase
19889684Di2015UniqueSeparatorsnake_case
19889684Di2015UniqueSeparatoractiveCharacter.ContinuousFire
19889684Di2015UniqueSeparatordoFire
19889684Di2015UniqueSeparatorfire
19889728Di2015UniqueSeparatorSELECT COUNT(*) FROM Child c INNER JOIN Parent par on c.ParentId = par.ParentId WHERE par.UserId = ?
19889738Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    public interface IFooDi2015NewLine    {Di2015NewLine        void DoSomething();Di2015NewLine    }Di2015NewLineDi2015NewLine    public interface IGenericFoo<out T> : IFooDi2015NewLine    {Di2015NewLine        T GetDefault();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public class Foo<T> : IGenericFoo<T>Di2015NewLine    {Di2015NewLine        public T GetDefault()Di2015NewLine        {Di2015NewLine            return default(T);Di2015NewLine        }Di2015NewLineDi2015NewLine        public void DoSomething()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Meep!");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private static void Main()Di2015NewLine    {Di2015NewLineDi2015NewLine        var fooCollection = new List<IFoo>Di2015NewLine        {Di2015NewLine            new Foo<string>(), Di2015NewLine            new Foo<StringBuilder>(),Di2015NewLine            new Foo<int>()Di2015NewLineDi2015NewLine        };Di2015NewLine        foreach (var instance in fooCollection)Di2015NewLine            instance.DoSomething();Di2015NewLineDi2015NewLine        // Covariance exampleDi2015NewLine        var fooCollectionGenericI = new List<IGenericFoo<object>>Di2015NewLine        {Di2015NewLine            new Foo<string>(), Di2015NewLine            new Foo<StringBuilder>(),Di2015NewLine            // new Foo<int>() not possible since covariance is not supported on structs :( Di2015NewLine        };Di2015NewLineDi2015NewLine        foreach (var instance in fooCollectionGenericI)Di2015NewLine        {Di2015NewLine            var wxp = instance.GetDefault();Di2015NewLine            Console.WriteLine(wxp == null ? "NULL" : wxp.ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19889755Di2015UniqueSeparator<UserControl...>Di2015NewLine    <Thumb x:Name="root" DragDelta="ResizeThumb_DragDelta">Di2015NewLine        <Thumb.Template>Di2015NewLine            <ControlTemplate>Di2015NewLine                <Rectangle Fill="Blue"/>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Thumb.Template>Di2015NewLine    </Thumb>Di2015NewLine</UserControl>Di2015NewLine
19889755Di2015UniqueSeparator    public double TestDi2015NewLine    {Di2015NewLine        get { return (double)GetValue(TestProperty); }Di2015NewLine        set { SetValue(TestProperty, value); }Di2015NewLine    }Di2015NewLine    public static readonly DependencyProperty TestProperty = DependencyProperty.Register(Di2015NewLine        "Test",Di2015NewLine        typeof(double),Di2015NewLine        typeof(MoveMe));Di2015NewLineDi2015NewLine    private void ResizeThumb_DragDelta(object sender, DragDeltaEventArgs e)Di2015NewLine    {Di2015NewLine        Margin = new Thickness(Margin.Left + e.HorizontalChange,0,0,0);Di2015NewLine        Test = Margin.Left;Di2015NewLine        //or resize ...Di2015NewLine    }Di2015NewLine
19889755Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.Background>Di2015NewLine        <SolidColorBrush Color="LightSkyBlue" Opacity=".1"></SolidColorBrush>Di2015NewLine    </Grid.Background>Di2015NewLine    <myControl:MoveMe Width="30" Cursor="SizeWE" Di2015NewLineTest="{Binding RelativeSource={RelativeSource AncestorType=myControl:MyControl}, Path=ValueOfLeftBorder, Mode=OneWayToSource}"Di2015NewLineMargin="-2 0 0 0" VerticalAlignment="Stretch" HorizontalAlignment="Left" BorderThickness="2" Di2015NewLineBorderBrush="LightGreen"/>Di2015NewLine</Grid>Di2015NewLine
19889755Di2015UniqueSeparatorValueOfLeftBorder
19889755Di2015UniqueSeparatorMoveMe
19889756Di2015UniqueSeparatormultiple ways of extending a class
19889756Di2015UniqueSeparatorcode behind
19889756Di2015UniqueSeparatorpartial class
19889756Di2015UniqueSeparatorpublic partial class MainWindow : Window { }Di2015NewLine
19889756Di2015UniqueSeparatordecouple UI logic from business logic
19889756Di2015UniqueSeparatorunit tested
19889756Di2015UniqueSeparatorView and ViewModel should work oblivious to each other
19889893Di2015UniqueSeparatorText
19889893Di2015UniqueSeparatorRadioButtonList
19889893Di2015UniqueSeparatorValue
19889893Di2015UniqueSeparatorString radioID=RadioButtonList1.SelectedValue.ToString()   Di2015NewLineint intID=Convert.ToInt32(radioID);Di2015NewLine
19889893Di2015UniqueSeparatorintID
19889893Di2015UniqueSeparatorInsertPhotoInfo.InsertPhoto(TextBox1.Text, TextBox2.Text, TextBox3.Text,RadioButtonList1.radioID));Di2015NewLine
19889893Di2015UniqueSeparatorInsertPhotoInfo.InsertPhoto(TextBox1.Text, TextBox2.Text, TextBox3.Text,intID);Di2015NewLine
19890001Di2015UniqueSeparatorsocket.Shutdown(SocketShutdown.Send);
19890001Di2015UniqueSeparatorShutdown
19890001Di2015UniqueSeparatorSocket
19890050Di2015UniqueSeparatorasync
19890050Di2015UniqueSeparatorpublic HttpResponseMessage GetContacts()Di2015NewLine{Di2015NewLine  var result = db.Contacts().ToList();Di2015NewLine  return this.Request.CreateResponse(HttpStatusCode.BadRequest, result);Di2015NewLine}Di2015NewLine
19890050Di2015UniqueSeparatorToList
19890050Di2015UniqueSeparatorToListAsync
19890050Di2015UniqueSeparatorpublic HttpResponseMessage GetContacts()Di2015NewLine{Di2015NewLine  var result = await db.Contacts().ToListAsync();Di2015NewLine  return this.Request.CreateResponse(HttpStatusCode.BadRequest, result);Di2015NewLine}Di2015NewLine
19890050Di2015UniqueSeparatorawait
19890050Di2015UniqueSeparatorasync
19890050Di2015UniqueSeparatorpublic async Task<HttpResponseMessage> GetContactsAsync()Di2015NewLine{Di2015NewLine  var result = await db.Contacts().ToListAsync();Di2015NewLine  return this.Request.CreateResponse(HttpStatusCode.BadRequest, result);Di2015NewLine}Di2015NewLine
19890050Di2015UniqueSeparatorasync
19890110Di2015UniqueSeparatorBigInteger
19890195Di2015UniqueSeparatorMyClass dummy;Di2015NewLineAssert.Throws<InvalidOperationException>(() => Di2015NewLine         dummy = originalValue * badDecimalMultiplier);Di2015NewLine
19890195Di2015UniqueSeparatorAssert.Throws<InvalidOperationException>(() => Di2015NewLine       (originalValue * badDecimalMultiplier).ToString());Di2015NewLine
19890330Di2015UniqueSeparatorpublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> items, Func<T, TKey> property)Di2015NewLine{Di2015NewLine    return items.GroupBy(property).Select(x => x.First());Di2015NewLine}Di2015NewLine
19890330Di2015UniqueSeparator List<Capture> list = db.MyObject.Where(x => x.prop == "Name")Di2015NewLine                     .DistinctBy(y=> y.prop )Di2015NewLine                     .ToList();Di2015NewLine
19890330Di2015UniqueSeparatorDistincyBy
19890337Di2015UniqueSeparatorvar newList = new NewDataModel { Di2015NewLine                  XValues = data.Select(dm => dm.X).ToArray(), Di2015NewLine                  YValues = data.Select(dm => dm.Y).ToArray() };Di2015NewLine
19890466Di2015UniqueSeparatorMyFruit
19890466Di2015UniqueSeparatorSession
19890466Di2015UniqueSeparatorMyFruit = Session["Fruitname"] as List<string>;Di2015NewLine
19890466Di2015UniqueSeparatorif(Session["Fruitname"]!=null)Di2015NewLineMyFruit = Session["Fruitname"] as List<string>;Di2015NewLine
19890466Di2015UniqueSeparatorDropDownList
19890466Di2015UniqueSeparatorSession
19890541Di2015UniqueSeparatordouble
19890541Di2015UniqueSeparatorNumber
19890541Di2015UniqueSeparatorfloat
19890541Di2015UniqueSeparatordouble
19890541Di2015UniqueSeparatorfloat
19890617Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    ViewBag.Files = db.MyObjects.Where(x => x.family == "Web").ToList();Di2015NewLine    return View();Di2015NewLine}Di2015NewLine
19890617Di2015UniqueSeparatorIndex.cshtml
19890617Di2015UniqueSeparator@Html.DropDownList("File", new SelectList(list, "Id", "protocol"), "Select webmail site", new { style = "vertical-align:middle;" })Di2015NewLine
19890629Di2015UniqueSeparatorContextMenu
19890629Di2015UniqueSeparatorRightMouseClick
19890629Di2015UniqueSeparatorTextBox
19890629Di2015UniqueSeparatorForms
19890629Di2015UniqueSeparatorContextMenu
19890629Di2015UniqueSeparatorForm
19890629Di2015UniqueSeparatorContextMenuStrip
19890707Di2015UniqueSeparatorApp.Current.Dispatcher
19890707Di2015UniqueSeparatorApp.Current.Dispatcher.Invoke((Action)delegate { TextBox_1.Text = ""; });Di2015NewLine
19890707Di2015UniqueSeparatorApp.Current.Dispatcher.BeginInvoke((Action)delegate { TextBox_1.Text = ""; });Di2015NewLine
19890937Di2015UniqueSeparatorDatabase.mdf
19891145Di2015UniqueSeparatorN
19891145Di2015UniqueSeparator2^N
19891145Di2015UniqueSeparator1
19891145Di2015UniqueSeparator0
19891145Di2015UniqueSeparator1
19891145Di2015UniqueSeparatorstring
19891145Di2015UniqueSeparatorprivate static List<string> PowerSet(string input)Di2015NewLine{Di2015NewLine    int n = input.Length;Di2015NewLine    // Power set contains 2^N subsets.Di2015NewLine    int powerSetCount = 1 << n;Di2015NewLine    var ans = new List<string>();Di2015NewLineDi2015NewLine    for (int setMask = 0; setMask < powerSetCount; setMask++)Di2015NewLine    {Di2015NewLine        var s = new StringBuilder();Di2015NewLine        for (int i = 0; i < n; i++)Di2015NewLine        {Di2015NewLine            // Checking whether i'th element of input collection should go to the current subset.Di2015NewLine            if ((setMask & (1 << i)) > 0)Di2015NewLine            {Di2015NewLine                s.Append(input[i]);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        ans.Add(s.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    return ans;Di2015NewLine}Di2015NewLine
19891145Di2015UniqueSeparator"xyz"
19891145Di2015UniqueSeparator2^3 == 8
19891145Di2015UniqueSeparator0
19891145Di2015UniqueSeparator7
19891145Di2015UniqueSeparator0   000    ...Di2015NewLine1   001    ..zDi2015NewLine2   010    .y.Di2015NewLine3   011    .yzDi2015NewLine4   100    x..Di2015NewLine5   101    x.zDi2015NewLine6   110    xy.Di2015NewLine7   111    xyzDi2015NewLine
19891145Di2015UniqueSeparator"xyz"
19891145Di2015UniqueSeparatorO(n * 2^n)
19891145Di2015UniqueSeparator    public static T[][] FastPowerSet<T>(T[] seq)Di2015NewLine    {Di2015NewLine        var powerSet = new T[1 << seq.Length][];Di2015NewLine        powerSet[0] = new T[0]; // starting only with empty setDi2015NewLine        for (int i = 0; i < seq.Length; i++)Di2015NewLine        {Di2015NewLine            var cur = seq[i];Di2015NewLine            int count = 1 << i; // doubling list each timeDi2015NewLine            for (int j = 0; j < count; j++)Di2015NewLine            {Di2015NewLine                var source = powerSet[j];Di2015NewLine                var destination = powerSet[count + j] = new T[source.Length + 1];Di2015NewLine                for (int q = 0; q < source.Length; q++)Di2015NewLine                    destination[q] = source[q];Di2015NewLine                destination[source.Length] = cur;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return powerSet;Di2015NewLine    }Di2015NewLine
19891157Di2015UniqueSeparatorfunction GetFileContents( $filename ) {Di2015NewLine    $handle = fopen($filename, "r");Di2015NewLine    $contents = fread($handle, filesize($filename));Di2015NewLine    fclose($handle); Di2015NewLine    return $contents;Di2015NewLine} Di2015NewLine
19891157Di2015UniqueSeparator$decodeContent   = base64_encode(GetFileContents("your file name")); Di2015NewLine$params = array(Di2015NewLine    'FileName' => "test.csv",Di2015NewLine    'buffer' => $decodeContent,Di2015NewLine    'Offset' => 0Di2015NewLine);Di2015NewLine
19891354Di2015UniqueSeparatorvalidationGroup
19891354Di2015UniqueSeparatorvalidationGroup
19891354Di2015UniqueSeparatorTextBox
19891354Di2015UniqueSeparatorRequiredFeildValidator
19891354Di2015UniqueSeparatorValidationGroup
19891354Di2015UniqueSeparatorGroup1
19891354Di2015UniqueSeparatorButton1
19891354Di2015UniqueSeparatorButton1
19891354Di2015UniqueSeparatorGroup1
19891354Di2015UniqueSeparator<asp:TextBox ID="TextBox1" runat="server"></asp:TextBox>Di2015NewLineDi2015NewLineDi2015NewLine<asp:RequiredFieldValidator Di2015NewLineID="RequiredFieldValidator1" Di2015NewLinerunat="server" Di2015NewLineErrorMessage="RequiredFieldValidator"Di2015NewLineValidationGroup="Group1" Di2015NewLineControlToValidate="TextBox1">Di2015NewLine</asp:RequiredFieldValidator>Di2015NewLineDi2015NewLine<asp:Button ID="Button1" runat="server" Text="Button" ValidationGroup="Group1" />Di2015NewLine
19891373Di2015UniqueSeparatorreturn
19891428Di2015UniqueSeparatorSelectList
19891428Di2015UniqueSeparatorDistinct
19891428Di2015UniqueSeparatorpublic sealed class MyObjectByProtocolComparer: IEqualityComparer<MyObject>Di2015NewLine{Di2015NewLine    public bool Equals(MyObject x, MyObject y)Di2015NewLine    {Di2015NewLine        return x.protocol.Equals(y.protocol);Di2015NewLine    }Di2015NewLineDi2015NewLine    public int GetHashCode(MyObject obj)Di2015NewLine    {Di2015NewLine        return obj.protocol.GetHashCode();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19891428Di2015UniqueSeparatorvar list = db.MyObjects.Where(x => x.family == "Web").ToArray();Di2015NewLinelist = list.Distinct(new MyObjectByProtocolComparer())Di2015NewLine           .OrderBy(x => x.fileName)Di2015NewLine           .ToArray();Di2015NewLine
19891498Di2015UniqueSeparatorDateTime
19891498Di2015UniqueSeparatordatetime
19891552Di2015UniqueSeparatorSalad
19891552Di2015UniqueSeparatorDefault
19891552Di2015UniqueSeparatorpublic class Salad : FoodDi2015NewLine  {Di2015NewLine    public Salad (){}Di2015NewLineDi2015NewLine    public Salad(string propertyName) : base(propertyName)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine    public override int CaloriesDi2015NewLine    {Di2015NewLine      getDi2015NewLine      {Di2015NewLine        return 200;Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Eat()Di2015NewLine    {Di2015NewLine      Console.WriteLine( "Eat Salad" );Di2015NewLine    }Di2015NewLine  }Di2015NewLine
19891576Di2015UniqueSeparatorSytem.CodeDOM
19891576Di2015UniqueSeparatorcsc.exe
19891633Di2015UniqueSeparatorLoadComplete
19891633Di2015UniqueSeparatorPage_Load
19891633Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     Page.LoadComplete += new EventHandler(Page_LoadComplete);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void Page_LoadComplete(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  ... now this worksDi2015NewLine}Di2015NewLine
19891642Di2015UniqueSeparator0.0
19891734Di2015UniqueSeparatorvar
19891734Di2015UniqueSeparator=
19891734Di2015UniqueSeparatorvar c = new C();Di2015NewLine
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorC
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorB c = new C();
19891734Di2015UniqueSeparatorvar c = (B)(new C());
19891734Di2015UniqueSeparatorB c = new C()
19891734Di2015UniqueSeparatorC
19891734Di2015UniqueSeparatornew C()
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorB
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorB
19891734Di2015UniqueSeparatorC
19891734Di2015UniqueSeparatorC
19891734Di2015UniqueSeparatorB
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorc
19891734Di2015UniqueSeparatorB
19891734Di2015UniqueSeparatorC
19891739Di2015UniqueSeparatorhttp://192.112.183.42:80/api/platypusItems/DuckbilledPlatypisAreGuysToo/42
19891739Di2015UniqueSeparatorpublic class ItemsController : ApiControllerDi2015NewLine{ Di2015NewLine    [Route("api/{controller}/{id}")]Di2015NewLine    public string GetItemById(int id)Di2015NewLine    {Di2015NewLine         // Find item here ...Di2015NewLineDi2015NewLine         return item.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    [Route("api/{controller}/{name}/{id}")]Di2015NewLine    public string GetItemByNameAndId(string name, int id)Di2015NewLine    {Di2015NewLine         // Find item here ...Di2015NewLineDi2015NewLine         return item.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19891739Di2015UniqueSeparatorhttp://192.112.183.42:80/api/platypusItems/DuckbilledPlatypisAreGuysToo/42
19891739Di2015UniqueSeparatorGetItemByNameAndId
19891739Di2015UniqueSeparatorhttp://192.112.183.42:80/api/platypusItems/42
19891739Di2015UniqueSeparatorGetItemById
19891739Di2015UniqueSeparatorpublic static class WebApiConfigDi2015NewLine{Di2015NewLine    public static void Register(HttpConfiguration config)Di2015NewLine    {Di2015NewLine        config.MapHttpAttributeRoutes();Di2015NewLineDi2015NewLine        config.Routes.MapHttpRoute(Di2015NewLine            name: "DefaultApi",Di2015NewLine            routeTemplate: "api/{controller}/{id}",Di2015NewLine            defaults: new { id = RouteParameter.Optional }Di2015NewLine        );Di2015NewLine    }Di2015NewLine}Di2015NewLine
19891739Di2015UniqueSeparatorpublic class ItemsController : ApiControllerDi2015NewLine{Di2015NewLine    public string GetItemById(int id)Di2015NewLine    {Di2015NewLine         // Find item here ...Di2015NewLineDi2015NewLine         return item.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string GetItemByNameAndId(string name, int id)Di2015NewLine    {Di2015NewLine         // Find item here ...Di2015NewLineDi2015NewLine         return item.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19891739Di2015UniqueSeparatorhttp://192.112.183.42:80/api/platypusItems/42
19891739Di2015UniqueSeparatorGetItemById
19891739Di2015UniqueSeparatorhttp://192.112.183.42:80/api/platypusItems/42?name=DuckbilledPlatypisAreGuysToo
19891739Di2015UniqueSeparatorGetItemByNameAndId
19891739Di2015UniqueSeparatorGetItemById
19892033Di2015UniqueSeparatorcommand.Parameters.Add(new SqlParameterDi2015NewLine{Di2015NewLine    SqlDbType = SqlDbType.VarChar,Di2015NewLine    ParameterName = "url",Di2015NewLine    Value = urlDi2015NewLine});Di2015NewLine
19892135Di2015UniqueSeparatorUnitOfWork
19892135Di2015UniqueSeparatorusing
19892135Di2015UniqueSeparatorusing
19892135Di2015UniqueSeparatorUnitOfWork
19892199Di2015UniqueSeparatorviewController.NavigationController
19892199Di2015UniqueSeparatorUIViewController
19892199Di2015UniqueSeparatorUINavigationController
19892277Di2015UniqueSeparatorSystem.Xml.Serialization.XmlSerializer writer = new System.Xml.Serialization.XmlSerializer(typeof(YourClassType));Di2015NewLineSystem.IO.StreamWriter file = new System.IO.StreamWriter(@"c:\\SerializedData.xml");Di2015NewLinewriter.Serialize(file, youClass);Di2015NewLinefile.Close();Di2015NewLine
19892358Di2015UniqueSeparator<Runtime executionContext="elevated" />
19892358Di2015UniqueSeparator<WorkerRole>
19892359Di2015UniqueSeparatorif
19892359Di2015UniqueSeparatorSession["ediblesession"] = edible;Di2015NewLine
19892359Di2015UniqueSeparatorif
19892359Di2015UniqueSeparatortrue
19892359Di2015UniqueSeparatoredible = (bool)Session["ediblesession"];Di2015NewLine
19892359Di2015UniqueSeparator"ediblesesion"
19892359Di2015UniqueSeparator"ediblesession"
19892359Di2015UniqueSeparatorobject value = Session["ediblesession"];Di2015NewLineif (value != null) {Di2015NewLine  edible = value as bool;Di2015NewLine} else {Di2015NewLine  edible = false; // or whatever you want to do if there is no valueDi2015NewLine}Di2015NewLine
19892536Di2015UniqueSeparator<UserControl ...>Di2015NewLine    <StackPanel Orientation="Horizontal">Di2015NewLine        <Image Source="{Binding ImageSource}" Width="16"/>Di2015NewLine        <TextBlock Text="{Binding Text}" />Di2015NewLine    </StackPanel>Di2015NewLine</UserControl>Di2015NewLine
19892536Di2015UniqueSeparatorText
19892536Di2015UniqueSeparatorImageSource
19892536Di2015UniqueSeparatorState
19892536Di2015UniqueSeparatorAdd/Edit/delete
19892536Di2015UniqueSeparatorStackCtlState
19892536Di2015UniqueSeparatorFrameworkElement
19892536Di2015UniqueSeparatorAdd/Edit/delete
19892536Di2015UniqueSeparator    public StackedImageTextCtl()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        DataContext = this;Di2015NewLine    }Di2015NewLine    //Text Dependency PropertyDi2015NewLine    public string TextDi2015NewLine    {Di2015NewLine        get { return (string)GetValue(TextProperty); }Di2015NewLine        set { SetValue(TextProperty, value); }Di2015NewLine    }Di2015NewLine    public static readonly DependencyProperty TextProperty =Di2015NewLine        DependencyProperty.Register("Text", typeof(string), typeof(StackedImageTextCtl), new UIPropertyMetadata(null));Di2015NewLine    //ImageSource Dependency PropertyDi2015NewLine    public ImageSource ImageSourceDi2015NewLine    {Di2015NewLine        get { return (ImageSource)GetValue(ImageSourceProperty); }Di2015NewLine        set { SetValue(ImageSourceProperty, value); }Di2015NewLine    }Di2015NewLine    public static readonly DependencyProperty ImageSourceProperty =Di2015NewLine        DependencyProperty.Register("ImageSource", typeof(ImageSource), typeof(StackedImageTextCtl), new UIPropertyMetadata(null));Di2015NewLine    //State Dependency PropertyDi2015NewLine    public AddEditDelete StateDi2015NewLine    {Di2015NewLine        get { return (AddEditDelete)GetValue(StateProperty); }Di2015NewLine        set { SetValue(StateProperty, value); }Di2015NewLine    }Di2015NewLine    public static readonly DependencyProperty StateProperty =Di2015NewLine        DependencyProperty.Register("State", typeof(AddEditDelete), typeof(StackedImageTextCtl), new UIPropertyMetadata(AddEditDelete.Add));Di2015NewLineDi2015NewLine    public static AddEditDelete GetStackCtlState(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return (AddEditDelete)obj.GetValue(StackCtlStateProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetStackCtlState(DependencyObject obj, AddEditDelete value)Di2015NewLine    {Di2015NewLine        obj.SetValue(StackCtlStateProperty, value);Di2015NewLine    }Di2015NewLine    public static readonly DependencyProperty StackCtlStateProperty =Di2015NewLine        DependencyProperty.RegisterAttached("StackCtlState", typeof(AddEditDelete), typeof(StackedImageTextCtl), new UIPropertyMetadata(AddEditDelete.Add));Di2015NewLine
19892536Di2015UniqueSeparatorpublic enum AddEditDelete { Add, Edit, Delete }Di2015NewLine
19892536Di2015UniqueSeparatorButton
19892536Di2015UniqueSeparatorToggleButton
19892536Di2015UniqueSeparatorStackCtlState
19892536Di2015UniqueSeparatorButton
19892536Di2015UniqueSeparatorToggleButton
19892536Di2015UniqueSeparatorStackedImageTextCtl
19892536Di2015UniqueSeparatorButton
19892536Di2015UniqueSeparatorToggleButton
19892536Di2015UniqueSeparatorStackedImageTextCtl
19892536Di2015UniqueSeparatorState
19892536Di2015UniqueSeparatorTemplatedParent
19892536Di2015UniqueSeparatorButton
19892536Di2015UniqueSeparatorToggleButton
19892536Di2015UniqueSeparatorTrigger
19892536Di2015UniqueSeparatorState
19892536Di2015UniqueSeparatorStackedImageTextCtl
19892536Di2015UniqueSeparator<Window...Di2015NewLine     xmlns:myNamespace="clr-namespace:WpfApplication1">Di2015NewLineDi2015NewLineDi2015NewLine<Window.Resources>Di2015NewLine    <Style TargetType="{x:Type myNamespace:StackedImageTextCtl}">Di2015NewLine        <Style.Triggers>Di2015NewLine            <Trigger Property="State" Value="Add">Di2015NewLine                <Setter Property="Text" Value="ADD"/>Di2015NewLine                <Setter Property="ImageSource" Value="/blue_1.jpg"/>Di2015NewLine            </Trigger>Di2015NewLine            <Trigger Property="State" Value="Edit">Di2015NewLine                <Setter Property="Text" Value="EDIT"/>Di2015NewLine                <Setter Property="ImageSource" Value="/blue_2.jpg"/>Di2015NewLine            </Trigger>Di2015NewLine            <Trigger Property="State" Value="Delete">Di2015NewLine                <Setter Property="Text" Value="DELETE"/>Di2015NewLine                <Setter Property="ImageSource" Value="/blue_3.jpg"/>Di2015NewLine            </Trigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine    <Style x:Key="stackButtonStyle" TargetType="{x:Type Button}">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate>Di2015NewLine                    <Button>Di2015NewLine                        <myNamespace:StackedImageTextCtl State="{TemplateBinding myNamespace:StackedImageTextCtl.StackCtlState}"/>Di2015NewLine                    </Button>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine    <Style x:Key="stackToggleButtonStyle" TargetType="{x:Type ToggleButton}">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate>Di2015NewLine                    <ToggleButton>Di2015NewLine                        <myNamespace:StackedImageTextCtl State="{TemplateBinding myNamespace:StackedImageTextCtl.StackCtlState}"/>Di2015NewLine                    </ToggleButton>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine<StackPanel>Di2015NewLine    <Button Style="{StaticResource stackButtonStyle}" myNamespace:StackedImageTextCtl.StackCtlState="Add"/>Di2015NewLine    <Button Style="{StaticResource stackButtonStyle}" myNamespace:StackedImageTextCtl.StackCtlState="Edit"/>Di2015NewLine    <ToggleButton Style="{StaticResource stackToggleButtonStyle}" myNamespace:StackedImageTextCtl.StackCtlState="Delete"/>Di2015NewLine</StackPanel>Di2015NewLine
19892650Di2015UniqueSeparatorDataModel
19892650Di2015UniqueSeparatorDatabase
19892650Di2015UniqueSeparatorPath_Thumbnail
19892650Di2015UniqueSeparatorPath_L
19892650Di2015UniqueSeparatorDataModel
19892650Di2015UniqueSeparatorQuery
19892650Di2015UniqueSeparatorINSERT INTO Photo (Name, Description, Caption, TagID, Path_Thumbnail, Path_L) VALUES (@Name,@Description,@Caption,@TagID,@Path_Thumbnail,@Path_L);Di2015NewLine
19892650Di2015UniqueSeparatorThumbnailPath
19892650Di2015UniqueSeparatorImagePath
19892650Di2015UniqueSeparatorDatabase
19892650Di2015UniqueSeparatorPhotoInfo.InsertPhoto(TextBox1.Text, TextBox2.Text, TextBox3.Text,TextBox4.Text);Di2015NewLine
19892650Di2015UniqueSeparatorPhotoInfo.InsertPhoto(TextBox1.Text, TextBox2.Text, TextBox3.Text,TextBox4.Text,Server.MapPath("././Data/Thumbnails/") + FileUpload1.FileName,Server.MapPath("././Data/Normal/") + FileUpload1.FileName);Di2015NewLine
19892650Di2015UniqueSeparatorPhotoInfo.InsertPhoto(TextBox1.Text, TextBox2.Text, TextBox3.Text,TextBox4.Text,"././Data/Thumbnails/" + FileUpload1.FileName,"././Data/Normal/" + FileUpload1.FileName);Di2015NewLine
19892678Di2015UniqueSeparatorTemplateField
19892678Di2015UniqueSeparatorCommandName
19892678Di2015UniqueSeparatorCommandField
19892678Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Button ID="ButtonDelete" runat="server" CommandName="delete"  Di2015NewLine                    CommandArgument='<%# Eval("id") %>' Text="Delete" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
19892678Di2015UniqueSeparatorforeach (GridViewRow row in GridView1.Rows)Di2015NewLine{Di2015NewLine    // Only look in data rowsDi2015NewLine    if (row.RowType == DataControlRowType.DataRow || Di2015NewLine        row.RowType == DataControlRowType.EmptyDataRow)Di2015NewLine    {Di2015NewLine        // Find the delete button by IDDi2015NewLine        Button theDeleteButton = row.FindControl("ButtonDelete") as Button;Di2015NewLineDi2015NewLine        // Verify the button was found before we try to use itDi2015NewLine        if(theDeleteButton != null)Di2015NewLine        {Di2015NewLine            // Make the button invisibleDi2015NewLine            theDeleteButton.Visible = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19892678Di2015UniqueSeparatoras
19892678Di2015UniqueSeparatornull
19892678Di2015UniqueSeparatornull
19892678Di2015UniqueSeparatortheDeleteButton
19892705Di2015UniqueSeparator$server = "server1"Di2015NewLine$port = 22Di2015NewLine$username = "user1"Di2015NewLine$password = "password1"Di2015NewLineDi2015NewLine###############################################################Di2015NewLineDi2015NewLinefunction ReadStream($reader)Di2015NewLine{Di2015NewLine    $line = $reader.ReadLine();Di2015NewLine    while ($line -ne $null)Di2015NewLine    {Di2015NewLine        $lineDi2015NewLine        $line = $reader.ReadLine()Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinefunction WriteStream($cmd, $writer, $stream)Di2015NewLine{Di2015NewLine    $writer.WriteLine($cmd)Di2015NewLine    while ($stream.Length -eq 0)Di2015NewLine    {Di2015NewLine        start-sleep -milliseconds 500Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine###############################################################Di2015NewLineDi2015NewLine$ssh = new-object Renci.SshNet.SshClient($server, $port, $username, $password)Di2015NewLine$ssh.Connect()Di2015NewLineDi2015NewLine$stream = $ssh.CreateShellStream("dumb", 80, 24, 800, 600, 1024)Di2015NewLineDi2015NewLine$reader = new-object System.IO.StreamReader($stream)Di2015NewLine$writer = new-object System.IO.StreamWriter($stream)Di2015NewLine$writer.AutoFlush = $trueDi2015NewLineDi2015NewLinewhile ($stream.Length -eq 0)Di2015NewLine{Di2015NewLine    start-sleep -milliseconds 500Di2015NewLine}Di2015NewLineReadStream $readerDi2015NewLineDi2015NewLineWriteStream "su - root" $writer $streamDi2015NewLineReadStream $readerDi2015NewLineDi2015NewLineWriteStream "password" $writer $streamDi2015NewLineReadStream $readerDi2015NewLineDi2015NewLineWriteStream "pwd" $writer $streamDi2015NewLineReadStream $readerDi2015NewLineDi2015NewLine$stream.Dispose()Di2015NewLine$ssh.Disconnect()Di2015NewLine$ssh.Dispose()Di2015NewLine
19892832Di2015UniqueSeparatorUIWebView
19892832Di2015UniqueSeparatorUITextView
19892832Di2015UniqueSeparatoru.DataDetectorTypes = UIDataDetectorType.Link;
19893047Di2015UniqueSeparatorDataMember
19893047Di2015UniqueSeparatorDataContractSerializer
19893047Di2015UniqueSeparatorDataMemeber
19893182Di2015UniqueSeparatorclass CRUDController<T> : ApiControllerDi2015NewLine{Di2015NewLine    public virtual HttpResponseMessage Get(int id=-1) { // do the read operation }Di2015NewLine    public virtual HttpResponseMessage Post(T obj) { // do the create operation }Di2015NewLine    public virtual HttpResponseMessage Put(T obj) { // do the update operation }Di2015NewLine    public virtual HttpResponseMessage Delete(T obj) { // do the delete operation }Di2015NewLine}Di2015NewLine
19893182Di2015UniqueSeparatorclass BookController : CRUDController<Book>Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19893254Di2015UniqueSeparatorprivate BlockingCollection<string> GetWorkSoruce()Di2015NewLine{Di2015NewLine    List<string> sourceList = GetListOfFiles(); //How you get your list is up to you.Di2015NewLineDi2015NewLine    Shuffle(sourceList); //see http://stackoverflow.com/questions/273313/randomize-a-listt-in-c-sharpDi2015NewLineDi2015NewLine    //Create a thread safe queue that many consumers can pull from.Di2015NewLine    var collection = BlockingCollection<string>(new ConcurrentQueue<string>(sourceList));Di2015NewLine    collection.CompleteAdding();Di2015NewLineDi2015NewLine    return collection;Di2015NewLine}Di2015NewLine
19893254Di2015UniqueSeparatorprivate void WorkerDoWork(BlockingCollection<string> workSource, int itemsToTake)Di2015NewLine{Di2015NewLine    foreach(var imagePath in workSource.GetConsumingEnumerable().Take(itemsToTake))Di2015NewLine    {Di2015NewLine        ProcessImage(imagePath);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19893326Di2015UniqueSeparatorcallback
19893326Di2015UniqueSeparatorAction<T1,T2,T3,T4>
19893326Di2015UniqueSeparatorT1
19893326Di2015UniqueSeparatorvar1
19893326Di2015UniqueSeparatorT2
19893326Di2015UniqueSeparatorvar2
19893326Di2015UniqueSeparatorpublic void Download(string url, Action<T1,..> callback)Di2015NewLine{Di2015NewLine    //....Di2015NewLine    callback(var1,var2,var3,var4);Di2015NewLine    //...Di2015NewLine}Di2015NewLine
19893326Di2015UniqueSeparatorpublic void OnDownload(T1 var1, T2 var2, T3 var3, T4 var4)Di2015NewLine{Di2015NewLine     // do stuff hereDi2015NewLine}Di2015NewLineDi2015NewLine//laterDi2015NewLineDownload("http...", OnDownload);Di2015NewLine
19893326Di2015UniqueSeparatorpublic void Download(string url, Action callback)Di2015NewLine{Di2015NewLine     //...Di2015NewLine     callback();Di2015NewLine     //..Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine Download("http://..", () => OnDownload(42, "request", user, 0.5f));Di2015NewLine
19893703Di2015UniqueSeparator<asp:Repeater ID="Repeater1" runat="server" OnItemDataBound="Repeater1_ItemDataBound">Di2015NewLine    <ItemTemplate>Di2015NewLine        <%# Container.DataItem %>Di2015NewLine    </ItemTemplate>Di2015NewLine    <SeparatorTemplate>Di2015NewLine        <%# (Container.ItemIndex <((ArrayList)Repeater1.DataSource).Count  - 2?",":" and ") %>Di2015NewLine    </SeparatorTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
19893703Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!IsPostBack)Di2015NewLine    {Di2015NewLine        ArrayList values = new ArrayList();Di2015NewLineDi2015NewLine        values.Add("James");Di2015NewLine        values.Add("Bob");Di2015NewLine        values.Add("Joe ");Di2015NewLine        values.Add("Banana");Di2015NewLine        values.Add("Frank");Di2015NewLineDi2015NewLine        Repeater1.DataSource = values;Di2015NewLine        Repeater1.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19893931Di2015UniqueSeparatorSettings1.Default.Value1 = "11";Di2015NewLineSettings1.Default.Save();Di2015NewLineDi2015NewLineSettings2.Default.Value1 = "22";Di2015NewLineSettings2.Default.Save();Di2015NewLine
19893976Di2015UniqueSeparatorPath
19893976Di2015UniqueSeparatorJToken
19893976Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string json = @"Di2015NewLine        {Di2015NewLine            ""car"": {Di2015NewLine                ""type"": [{Di2015NewLine                    ""sedan"": {Di2015NewLine                        ""make"": ""honda"",Di2015NewLine                        ""model"": ""civics""Di2015NewLine                    }Di2015NewLine                },Di2015NewLine                {Di2015NewLine                    ""coupe"": {Di2015NewLine                        ""make"": ""ford"",Di2015NewLine                        ""model"": ""escort""Di2015NewLine                    }Di2015NewLine                }]Di2015NewLine            }Di2015NewLine        }";Di2015NewLineDi2015NewLine        JObject obj = JObject.Parse(json);Di2015NewLine        JToken token = obj["car"]["type"][0]["sedan"]["make"];Di2015NewLine        Console.WriteLine(token.Path + " -> " + token.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19893976Di2015UniqueSeparatorcar.type[0].sedan.make -> hondaDi2015NewLine
19894242Di2015UniqueSeparator    public Form2()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public Action yourAction {get; set;}Di2015NewLineDi2015NewLine    private void callMethod_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Action instance = yourAction;Di2015NewLine        if(instance != null)Di2015NewLine            instance();Di2015NewLine    }Di2015NewLine
19894242Di2015UniqueSeparatorprivate void openf2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Form2 frm = new Form2();Di2015NewLine    frm.yourAction = prikazi;Di2015NewLine    frm.Show();Di2015NewLine}Di2015NewLine
19894242Di2015UniqueSeparator    Form1 ParentForm {get; set;}Di2015NewLineDi2015NewLine    private void callMethod_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (ParentForm != null)Di2015NewLine            ParentForm.prikazi();Di2015NewLine    }Di2015NewLine
19894242Di2015UniqueSeparatorParentForm
19894242Di2015UniqueSeparatorprivate void openf2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Form2 frm = new Form2();Di2015NewLine    frm.ParentForm= this;Di2015NewLine    frm.Show();Di2015NewLine}Di2015NewLine
19894245Di2015UniqueSeparatorLinearInterpolation
19894245Di2015UniqueSeparatorDotProduct
19894245Di2015UniqueSeparatorVectorMath
19894245Di2015UniqueSeparatorVectorAlgorithms
19894297Di2015UniqueSeparatorn+1
19894297Di2015UniqueSeparatorpublic IQueryable<Lifetime> GetLifetimes<T>(IQueryable<T> entities)Di2015NewLine{Di2015NewLine    var machines = entities as IQueryable<Machine>;Di2015NewLine    if (machines != null)Di2015NewLine        return machines.SelectMany (m => m.Items)Di2015NewLine                       .SelectMany (i => i.Tools)Di2015NewLine                       .SelectMany (i => i.Parts)Di2015NewLine                       .SelectMany (i => i.Lifetimes);Di2015NewLineDi2015NewLine    var items = entities as IQueryable<Item>;Di2015NewLine    if (items != null)Di2015NewLine        return items.SelectMany (i => i.Tools)Di2015NewLine                    .SelectMany (i => i.Parts)Di2015NewLine                    .SelectMany (i => i.Lifetimes);Di2015NewLineDi2015NewLine    var tools = entities as IQueryable<Tool>;Di2015NewLine    if (tools != null)Di2015NewLine        return tools.SelectMany (i => i.Parts)Di2015NewLine                    .SelectMany (i => i.Lifetimes);Di2015NewLineDi2015NewLine    var parts = entities as IQueryable<Part>;Di2015NewLine    if (parts != null)Di2015NewLine        return parts.SelectMany (i => i.Lifetimes);Di2015NewLineDi2015NewLine    return Enumerable.Empty<Lifetime>().AsQueryable();Di2015NewLine}Di2015NewLine
19894324Di2015UniqueSeparatorDayOfWeek.Sunday
19894324Di2015UniqueSeparator0
19894324Di2015UniqueSeparator7
19894324Di2015UniqueSeparator//if ((int)thisDate1.DayOfWeek == 6) textBox1.Text = "Even Weekend";Di2015NewLine//if ((int)thisDate1.DayOfWeek == 7) textBox1.Text = "Even Weekend";Di2015NewLine  if (thisDate1.DayOfWeek == DayofWeek.Saturday)  textBox1.Text = "Even Weekend";Di2015NewLine  if (thisDate1.DayOfWeek == DayofWeek.Sunday)    textBox1.Text = "Even Weekend";Di2015NewLine
19894343Di2015UniqueSeparatorDateTime.TryParseExact
19894343Di2015UniqueSeparatorpublic bool ValidateDate(string dateInput)Di2015NewLine{Di2015NewLine    DateTime dt;Di2015NewLine    return DateTime.TryParseExact(dateInput, "MM/dd/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt);Di2015NewLine}Di2015NewLine
19894372Di2015UniqueSeparatorprotected override async void OnNavigatedTo(NavigationEventArgs e)Di2015NewLine{Di2015NewLine    base.OnNavigatedTo(e);Di2015NewLine    // this method is called on each navigation to the pageDi2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnNavigatedFrom(NavigationEventArgs e)Di2015NewLine{Di2015NewLine    base.OnNavigatingFrom(e);Di2015NewLine    // this method is called on each navigation from the pageDi2015NewLine}Di2015NewLine
19894426Di2015UniqueSeparator[]<
19894426Di2015UniqueSeparatora
19894426Di2015UniqueSeparatorb
19894426Di2015UniqueSeparatorc
19894426Di2015UniqueSeparator^    <-----y------>Di2015NewLine| Di2015NewLine|            bDi2015NewLine|    []<        aDi2015NewLinexDi2015NewLine|          cDi2015NewLine|Di2015NewLine|Di2015NewLinevDi2015NewLine
19894426Di2015UniqueSeparator     <-----y------>Di2015NewLineDi2015NewLine^         [ ]Di2015NewLine|          ^Di2015NewLine|            bDi2015NewLinex               aDi2015NewLine|       cDi2015NewLine|Di2015NewLinevDi2015NewLine
19894426Di2015UniqueSeparator            <---------fake y------>Di2015NewLineDi2015NewLine      ^          Di2015NewLine      |         aDi2015NewLine      |       Di2015NewLine fake |       b Di2015NewLine   x: |   []<Di2015NewLine      |             cDi2015NewLine      |Di2015NewLine      vDi2015NewLine
19894603Di2015UniqueSeparatorpublic class MyColorConverter : ColorConverterDi2015NewLine{Di2015NewLine    public override bool GetStandardValuesSupported(ITypeDescriptorContext context)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19894603Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Drawing.Design;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Windows.Forms.Design;Di2015NewLineDi2015NewLinenamespace HelpersLibDi2015NewLine{Di2015NewLine    public class MyColorEditor : UITypeEditorDi2015NewLine    {Di2015NewLine        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)Di2015NewLine        {Di2015NewLine            return UITypeEditorEditStyle.Modal;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)Di2015NewLine        {Di2015NewLine            if (value.GetType() != typeof(Color))Di2015NewLine            {Di2015NewLine                return value;Di2015NewLine            }Di2015NewLineDi2015NewLine            IWindowsFormsEditorService svc = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));Di2015NewLineDi2015NewLine            if (svc != null)Di2015NewLine            {Di2015NewLine                Color color = (Color)value;Di2015NewLineDi2015NewLine                using (DialogColor form = new DialogColor(color))Di2015NewLine                {Di2015NewLine                    if (svc.ShowDialog(form) == DialogResult.OK)Di2015NewLine                    {Di2015NewLine                        return (Color)form.NewColor;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            return value;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override bool GetPaintValueSupported(ITypeDescriptorContext context)Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void PaintValue(PaintValueEventArgs e)Di2015NewLine        {Di2015NewLine            Graphics g = e.Graphics;Di2015NewLine            Color color = (Color)e.Value;Di2015NewLineDi2015NewLine            if (color.A < 255)Di2015NewLine            {Di2015NewLine                using (Image checker = ImageHelpers.CreateCheckers(e.Bounds.Width / 2, e.Bounds.Height / 2, Color.LightGray, Color.White))Di2015NewLine                {Di2015NewLine                    g.DrawImage(checker, e.Bounds);Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            using (SolidBrush brush = new SolidBrush(color))Di2015NewLine            {Di2015NewLine                e.Graphics.FillRectangle(brush, e.Bounds);Di2015NewLine            }Di2015NewLineDi2015NewLine            e.Graphics.DrawRectangleProper(Pens.Black, e.Bounds);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19894603Di2015UniqueSeparator    [DefaultValue(typeof(Color), "Black"),Di2015NewLine    Editor(typeof(MyColorEditor), typeof(UITypeEditor)),Di2015NewLine    TypeConverter(typeof(MyColorConverter))]Di2015NewLine    public Color Color { get; set; }Di2015NewLine
19894604Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function dosth() {Di2015NewLine        document.getElementById('<%=btnload.ClientID%>').click();Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
19894658Di2015UniqueSeparatorConvert.ToString(number, 2).PadLeft(8, '0');
19894699Di2015UniqueSeparatordividendsList.Take(10).Average(m => m.rate)Di2015NewLine
19894699Di2015UniqueSeparatorrate
19894846Di2015UniqueSeparatorComponent.Dispose()
19894846Di2015UniqueSeparatorSqlConnection
19894846Di2015UniqueSeparatorDispose()
19894846Di2015UniqueSeparatorComponent
19894846Di2015UniqueSeparatorSqlConnection
19894846Di2015UniqueSeparator{ }
19894871Di2015UniqueSeparatorpublic bool ValidateLength(string input, int count)Di2015NewLine{Di2015NewLine    string pattern = @"^[a-zA-Z]{0," + count.ToString() + "}$";Di2015NewLine    return Regex.IsMatch(input,regFormat);Di2015NewLine}Di2015NewLine
19894871Di2015UniqueSeparator[a-zA-Z]{" + count.ToString() + "}
19894871Di2015UniqueSeparatorn
19894871Di2015UniqueSeparatorn
19894871Di2015UniqueSeparator{0,n}
19894871Di2015UniqueSeparatorn
19894871Di2015UniqueSeparator^
19894871Di2015UniqueSeparator$
19894905Di2015UniqueSeparatorreturn
19894905Di2015UniqueSeparatorClone()
19894905Di2015UniqueSeparatorICloneable
19894905Di2015UniqueSeparatorString.Concat()
19894905Di2015UniqueSeparatorstring1 + string2
19894905Di2015UniqueSeparator[]
19894983Di2015UniqueSeparatorpublic static class ExtesionsDi2015NewLine{Di2015NewLine    public static DataSet ToDataSet<T>(this IList<T> list)Di2015NewLine    {Di2015NewLine        Type elementType = typeof(T);Di2015NewLine        DataSet ds = new DataSet();Di2015NewLine        DataTable t = new DataTable();Di2015NewLine        ds.Tables.Add(t);Di2015NewLineDi2015NewLine        //add a column to table for each public property on TDi2015NewLine        foreach (var propInfo in elementType.GetProperties())Di2015NewLine        {Di2015NewLine            Type ColType = Nullable.GetUnderlyingType(propInfo.PropertyType) ?? propInfo.PropertyType;Di2015NewLineDi2015NewLine            t.Columns.Add(propInfo.Name, ColType);Di2015NewLine        }Di2015NewLineDi2015NewLine        //go through each property on T and add each value to the tableDi2015NewLine        foreach (T item in list)Di2015NewLine        {Di2015NewLine            DataRow row = t.NewRow();Di2015NewLineDi2015NewLine            foreach (var propInfo in elementType.GetProperties())Di2015NewLine            {Di2015NewLine                row[propInfo.Name] = propInfo.GetValue(item, null) ?? DBNull.Value;Di2015NewLine            }Di2015NewLineDi2015NewLine            t.Rows.Add(row);Di2015NewLine        }Di2015NewLineDi2015NewLine        return ds;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19894983Di2015UniqueSeparatorpublic class EntityDi2015NewLine{Di2015NewLine    public int CompanyId { get; set; }Di2015NewLine    public DateTime EndDate { get; set; }Di2015NewLine    public DateTime StartDate { get; set; }Di2015NewLine    public int DateId { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// ...Di2015NewLineDi2015NewLineList<Entity> res = dbconnect.tblManageDates.Where(i => i.internationalCode == _international).Select(i => new EntityDi2015NewLine{Di2015NewLine    CompanyId = i.companyId,Di2015NewLine    EndDate = i.endDate,Di2015NewLine    StartDate = i.startDate,Di2015NewLine    DateId = i.dateIdDi2015NewLine}).ToList();Di2015NewLineDi2015NewLineDataSet dataSet = res.ToDataSet();Di2015NewLine
19895066Di2015UniqueSeparator  private static string EscapeCharsForRegularExpression( string s )Di2015NewLine  {Di2015NewLine     //note that we must replace the \\ first, because the following statements add backslashesDi2015NewLine     return s.Replace( "\\\\", "\\\\\\\\" ).Replace( ".", "\\\\." ).Replace( "(", "\\\\(" ).Replace( ")", "\\\\)" ).Replace( "<", "\\\\<" ).Replace( "[", "\\\\[" ).Replace( "]", "\\\\]" ).Replace( ">", "\\\\>" ).Replace( "{", "\\\\{" ).Replace( "}", "\\\\}" ).Replace( "*", "\\\\*" ).Replace( "^", "\\\\^" ).Replace( "+", "\\\\+" ).Replace( ":", "\\\\:" );Di2015NewLine  }Di2015NewLine
19895066Di2015UniqueSeparator@"\\["   etc.Di2015NewLine
19895066Di2015UniqueSeparatorRegex.Matches( inputString, @"<!--\\s*(.+?)\\s*-->", RegexOptions.None )[0].Groups[1].Value;Di2015NewLine
19895066Di2015UniqueSeparatorRegex.Matches( inputString, @"'.*?'", RegexOptions.None )[0].Groups[0].Value;Di2015NewLine
19895066Di2015UniqueSeparatorRegex.Matches( inputString, @"'(.*?)'", RegexOptions.None )[0].Groups[1].Value;Di2015NewLine
19895135Di2015UniqueSeparator_ads = (from apartment in context.ConfigurationsDi2015NewLine        let configFloorplan = apartment.Images.SingleOrDefault()Di2015NewLine        select new AdModelDi2015NewLine        {Di2015NewLine            PropertyId = apartment.Property.id,Di2015NewLine            PropertyName = apartment.Property.name,Di2015NewLine            PropertyPhone = apartment.Property.phone,Di2015NewLine            ...Di2015NewLine            PropertyImages = apartment.Property.ImagesDi2015NewLine                                      .Select(img => img.imageContents),Di2015NewLine            FloorplanImage = configFloorplan.imageContents,Di2015NewLine            Floorplan = configFloorplan.idDi2015NewLine        }).ToList();Di2015NewLine
19895135Di2015UniqueSeparatorcontext.Configurations
19895138Di2015UniqueSeparatornvarchar(max)
19895138Di2015UniqueSeparatorvarbinary(max)
19895138Di2015UniqueSeparatorGetBytes
19895138Di2015UniqueSeparatorGetChars
19895145Di2015UniqueSeparatorint result = Int32.Parse("10") + 10;
19895145Di2015UniqueSeparatorGetValue()
19895145Di2015UniqueSeparatori
19895145Di2015UniqueSeparator    for (int i = 0; i < 100; i++)Di2015NewLine    {Di2015NewLine      for(int j = 0; j < 100; j++)Di2015NewLine      {Di2015NewLine        Console.Write(i * j);            Di2015NewLine      }Di2015NewLine    }Di2015NewLine
19895322Di2015UniqueSeparatorGetFieldValueAsync<T>
19895322Di2015UniqueSeparatorIsDBNullAsync
19895322Di2015UniqueSeparatorinternal
19895322Di2015UniqueSeparatorGetBytesAsync
19895322Di2015UniqueSeparatorCommandBehavior.SequentialAccess
19895322Di2015UniqueSeparatorTask<T>
19895322Di2015UniqueSeparatorTask.FromResult<T>
19895322Di2015UniqueSeparatorawait
19895450Di2015UniqueSeparator  new BlogDi2015NewLine    {Di2015NewLine      Id = 1,Di2015NewLine      Name = "Blog 1"Di2015NewLine    }Di2015NewLineDi2015NewLine    new BlogDi2015NewLine    {Di2015NewLine      Id = 2,Di2015NewLine      Name = "Blog 2"Di2015NewLine    }Di2015NewLineDi2015NewLine    new ProductDi2015NewLine    {Di2015NewLine      Id = 1,Di2015NewLine      Name = "Product"Di2015NewLine    }Di2015NewLineDi2015NewLine    new EntityTypeDi2015NewLine    {Di2015NewLine      Id = 1,Di2015NewLine      EntityTypeName = "Blog"Di2015NewLine    }Di2015NewLineDi2015NewLine    new EntityTypeDi2015NewLine    {Di2015NewLine      Id = 2,Di2015NewLine      EntityTypeName = "Product"Di2015NewLine    }Di2015NewLine
19895450Di2015UniqueSeparatorNew EntityTagDi2015NewLine{Di2015NewLine  EntityId = 1,Di2015NewLine  EntityTypeId = 1,Di2015NewLine  Text = "blog test 1 tag"Di2015NewLine};Di2015NewLine
19895450Di2015UniqueSeparatorNew EntityTagDi2015NewLine    {Di2015NewLine      EntityId = 2,Di2015NewLine      EntityTypeId = 1,Di2015NewLine      Text = "blog test 2 tag"Di2015NewLine    };Di2015NewLine
19895450Di2015UniqueSeparator New EntityTagDi2015NewLine    {Di2015NewLine      EntityId = 1,Di2015NewLine      EntityTypeId = 2,Di2015NewLine      Text = "Product tag"Di2015NewLine    };Di2015NewLine
19895508Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Form2 f2 = new Form2();Di2015NewLine        f2.Show(this); // pass in the ownerDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19895508Di2015UniqueSeparatorpublic partial class Form2 : FormDi2015NewLine{Di2015NewLineDi2015NewLine    public Form2()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        this.Shown += new EventHandler(Form2_Shown);Di2015NewLine        this.FormClosed += new FormClosedEventHandler(Form2_FormClosed);Di2015NewLine    }Di2015NewLineDi2015NewLine    void Form2_Shown(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (this.Owner != null)Di2015NewLine        {Di2015NewLine            this.Owner.Hide();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    void Form2_FormClosed(object sender, FormClosedEventArgs e)Di2015NewLine    {Di2015NewLine        if (this.Owner != null)Di2015NewLine        {Di2015NewLine            this.Owner.Show();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19895523Di2015UniqueSeparator   private void Accept()Di2015NewLine    {Di2015NewLine        try {Di2015NewLine            n = server_socket.Accept();Di2015NewLine            richTextBox_server_activity_log.AppendText("Connection Established...");Di2015NewLine        } catch (Exception ex) {Di2015NewLine            richTextBox_server_activity_log.AppendText("Failed to Connect...");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19895612Di2015UniqueSeparatorvar certificate = Di2015NewLine    new X509Certificate2Di2015NewLine    (HttpContext.Current.Server.MapPath("~/Certifications/" + certname), Di2015NewLine    "notasecret", Di2015NewLine    X509KeyStorageFlags.MachineKeySet |Di2015NewLine    X509KeyStorageFlags.PersistKeySet | Di2015NewLine    X509KeyStorageFlags.Exportable);Di2015NewLineDi2015NewLineDi2015NewLineServiceAccountCredential credential = new ServiceAccountCredential(Di2015NewLine    new ServiceAccountCredential.Initializer(accemail)Di2015NewLine    {Di2015NewLine        Scopes = new[] { AnalyticsService.Scope.Analytics.ToLower() }Di2015NewLine    }.FromCertificate(certificate));Di2015NewLineDi2015NewLinereturn credential;Di2015NewLine
19895615Di2015UniqueSeparatorCodeElements
19895615Di2015UniqueSeparatorMembers
19895615Di2015UniqueSeparatorEnvDTE.CodeEnum
19895615Di2015UniqueSeparatorEnvDTE.CodeVariable
19895615Di2015UniqueSeparatorInitExpression
19895615Di2015UniqueSeparator    // C# Enum to reflect Di2015NewLine    public enum MyEnum { Hi = 10, There = 15 }Di2015NewLine
19895615Di2015UniqueSeparator    <#Di2015NewLine      // the enumeration object you already seem to haveDi2015NewLine      EnvDTE.CodeEnum theEnum;Di2015NewLineDi2015NewLine      // iterate all enumeration itemsDi2015NewLine      foreach(EnvDTE.CodeVariable variable in theEnum.Members)Di2015NewLine      {Di2015NewLine          // render name and valueDi2015NewLine          #><#= variable.Prototype #>: <#= variable.InitExpression.ToString #>Di2015NewLine    <#}Di2015NewLine    #>Di2015NewLine
19895615Di2015UniqueSeparator    Hi: 10Di2015NewLine    There: 15Di2015NewLine
19895678Di2015UniqueSeparatoremployee[i]
19895678Di2015UniqueSeparatornew Employee
19895678Di2015UniqueSeparatorNullReferenceException
19895678Di2015UniqueSeparator<=
19895678Di2015UniqueSeparator<
19895678Di2015UniqueSeparatorfor (int i = 0; i < counter; i++)Di2015NewLine        {Di2015NewLine         //actually create an instance of Employee in employee[i]Di2015NewLine            employee[i]  = new Employee();Di2015NewLine            employee[i].Name = NameList[i];Di2015NewLine            employee[i].EmpNumber = EmpNumList[i];Di2015NewLine            employee[i].DateOfHire = DOHList[i];Di2015NewLine            employee[i].Salary = SalaryList[i];Di2015NewLine            employee[i].JobDescription = JobDescList[i];Di2015NewLine            employee[i].Department = DeptList[i];Di2015NewLine        }Di2015NewLine
19895790Di2015UniqueSeparatorIsGenericType
19895790Di2015UniqueSeparatorGetGenericTypeDefinition()==typeof(List<>)
19895790Di2015UniqueSeparatorIList
19895790Di2015UniqueSeparatorobject
19895790Di2015UniqueSeparatorstatic Type GetListType(Type type)Di2015NewLine{Di2015NewLine    if (type == null) return null;Di2015NewLineDi2015NewLine    if (!typeof(IList).IsAssignableFrom(type)) return null;Di2015NewLineDi2015NewLine    var indexer = type.GetProperty("Item", new[] { typeof(int) });Di2015NewLine    if (indexer == null || indexer.PropertyType == typeof(object)) return null;Di2015NewLineDi2015NewLine    return indexer.PropertyType;Di2015NewLine}Di2015NewLine
19895790Di2015UniqueSeparatorpublic void DoStuff<TModel, TCollection>()Di2015NewLine{Di2015NewLine    foreach (var property in typeof(TModel).GetProperties())Di2015NewLine    {Di2015NewLine        var itemType = GetListType(property.PropertyType);Di2015NewLine        if(itemType == typeof(TCollection))Di2015NewLine        {Di2015NewLine            // this is the property we needDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19895794Di2015UniqueSeparatorToList()
19895794Di2015UniqueSeparatorvar queryResult = (from cust in context.CustomerDi2015NewLine            join city in context.Cities on cust.id_city equals city.idDi2015NewLine            join state in context.State on city.id_state equals state.idDi2015NewLine            join reg in context.Region on state.id_region equals reg.idDi2015NewLine            select new Di2015NewLine            {Di2015NewLine               nameCust = cust.name,Di2015NewLine               nameCity = city.name,Di2015NewLine               nameState = state.name,Di2015NewLine               nameRegion = reg.nameDi2015NewLine            }).ToList();Di2015NewLine
19895794Di2015UniqueSeparatorvar queryResult = context.CustomerDi2015NewLine    .Include(customer => customer.City)Di2015NewLine    .Include(customer => customer.State)Di2015NewLine    .Include(customer => customer.Region)Di2015NewLine    .ToList();Di2015NewLine
19895794Di2015UniqueSeparatorToList()
19895830Di2015UniqueSeparatorgetRent
19895830Di2015UniqueSeparatorprintit
19895830Di2015UniqueSeparatorprintit
19895830Di2015UniqueSeparatorgetRent
19895830Di2015UniqueSeparatorif
19895830Di2015UniqueSeparatorfor
19895830Di2015UniqueSeparatorstring2
19895830Di2015UniqueSeparatorprintit
19895830Di2015UniqueSeparatorrent
19895830Di2015UniqueSeparatorif (apartment[i] == apartmentNumber)// match it to apartment arrayDi2015NewLine
19895830Di2015UniqueSeparator{Di2015NewLine    int apartmentRent = rent[i];Di2015NewLine    System.out.println("Rent for apartment # " + apartmentNumber + "is $ " + apartmentRent);Di2015NewLine}Di2015NewLine
19895935Di2015UniqueSeparatorvar serializer = new XmlSerializer(typeof(FieldTranslations));Di2015NewLinevar obj = (FieldTranslations)serializer.Deserialize(source);Di2015NewLine
19895935Di2015UniqueSeparator[XmlRoot("FieldsTranslations")]Di2015NewLinepublic class FieldTranslationsDi2015NewLine{Di2015NewLine    // ... your code as beforeDi2015NewLine}Di2015NewLine
19896023Di2015UniqueSeparatorvar readers = new List<FileReader>();    Di2015NewLineSystem.IO.File.ReadAllLines(@"C:\\Files\\Archivo.txt").ToList()Di2015NewLine.ForEach(l => { Di2015NewLine    string[] splitted = l.Split(','); Di2015NewLine    readers.Add(new FileReader(){ Di2015NewLine        Matricula = splitted[0], Di2015NewLine        Nombre = splitted[1], Di2015NewLine        Sueldo = decimal.Parse(splitted[2])Di2015NewLine    }); Di2015NewLine});Di2015NewLine
19896023Di2015UniqueSeparatorList.AddRange(readers.Select(r => r.Matricula));  Di2015NewLinelistBox1.Items.AddRange(readers.Select(r => r.Matricula));  Di2015NewLinedb.FileReaders.InsertAllOnSubmit(readers);Di2015NewLinedb.SubmitChanges();Di2015NewLine
19896040Di2015UniqueSeparatornamespace MvcApplication4.ControllersDi2015NewLine{Di2015NewLine    public class HomeController : ControllerDi2015NewLine    {Di2015NewLineDi2015NewLine        public ActionResult Index()Di2015NewLine        {Di2015NewLine            return new ViewResult();Di2015NewLine        }Di2015NewLineDi2015NewLine        public ActionResult Media(int id)Di2015NewLine        {Di2015NewLine            string fn = Server.MapPath("~/App_Data/boxed-delete.avi");Di2015NewLine            var memoryStream = new MemoryStream(System.IO.File.ReadAllBytes(fn));Di2015NewLine            return new FileStreamResult(memoryStream, MimeMapping.GetMimeMapping(System.IO.Path.GetFileName(fn)));Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
19896040Di2015UniqueSeparator@{Di2015NewLine    Layout = null;Di2015NewLine}Di2015NewLineDi2015NewLine<!DOCTYPE html>Di2015NewLineDi2015NewLine<html>Di2015NewLine<head>Di2015NewLine    <meta name="viewport" content="width=device-width" />Di2015NewLine    <title>Index</title>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <div>Di2015NewLine        <!-- http://localhost:54941/Home/Media/3  -->Di2015NewLine    <embed width="100%" height="500"  name="plugin" src="~/Home/Media/3" type="video/x-msvideo">     Di2015NewLine    </div>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
19896085Di2015UniqueSeparatorvar account = new pjsua_acc_config();Di2015NewLinevar ptr = Marshal.AllocHGlobal(typeof(pjsua_acc_config));Di2015NewLineMarshal.StructureToPtr(account, ptr, false);Di2015NewLineAccounts.pjsua_acc_config_default(ptr);Di2015NewLineMarshal.PtrToStructure(ptr, account);Di2015NewLineDi2015NewLine... make my changes to object ...Di2015NewLineDi2015NewLineMarshal.StructureToPtr(account, ptr, false);Di2015NewLineDi2015NewLineint id = Constants.PJSUA_INVALID_ID;Di2015NewLineAccounts.pjsua_acc_add(ptr, 1, ref id);Di2015NewLine
19896384Di2015UniqueSeparatorprivate void WebBrowser_OnLoaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    webBrowser1.Navigate(new Uri("http://www.nokia.ie/"));Di2015NewLine    webBrowser1.Navigating += OnNavigating;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void OnNavigating(object sender, NavigatingEventArgs e)Di2015NewLine{Di2015NewLine    //every navigation to any sites that is not www.nokia.ie will be blockedDi2015NewLine    if(e.Uri.OriginalString != "http://www.nokia.ie/")Di2015NewLine    {Di2015NewLine        e.Cancel=true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19896389Di2015UniqueSeparatorBoston Logan International (BOS) | New York John F Kennedy (JFK) | 1200 | 10.11.2013 | Di2015NewLine
19896389Di2015UniqueSeparatorList<string> check = (List<string>)items[0];Di2015NewLineif(check.Count > 2)Di2015NewLine    Console.WriteLine(check[1] + check[2]);Di2015NewLine
19896441Di2015UniqueSeparatorCast<T>
19896441Di2015UniqueSeparatorIEnumerable<T>
19896441Di2015UniqueSeparatorT
19896441Di2015UniqueSeparatorFirst
19896519Di2015UniqueSeparatorXmlDocument xd = new XmlDocument();Di2015NewLinexd.Load("employees.xml");Di2015NewLineXmlNode nl = xd.SelectSingleNode("//Employees");Di2015NewLineXmlDocument xd2 = new XmlDocument();Di2015NewLinexd2.LoadXml("<Employee><ID>20</ID><FirstName>Clair</FirstName><LastName>Doner</LastName><Salary>13000</Salary></Employee>");Di2015NewLineXmlNode n = xd.ImportNode(xd2.FirstChild,true);Di2015NewLinenl.AppendChild(n);Di2015NewLinexd.Save(Console.Out);Di2015NewLine
19896679Di2015UniqueSeparatorOnCreating/OnCreated
19896679Di2015UniqueSeparatorOnPublished
19896679Di2015UniqueSeparatorOnLoading/OnLoaded
19896719Di2015UniqueSeparatorWebException.Status
19896719Di2015UniqueSeparatorWebExceptionStatus
19896719Di2015UniqueSeparatorTimeout
19896719Di2015UniqueSeparatorif (wex.Status == WebExceptionStatus.Timeout)Di2015NewLine{Di2015NewLine   // We have a timeout!Di2015NewLine}Di2015NewLine
19896989Di2015UniqueSeparatorForm1.Shown
19896989Di2015UniqueSeparatorLoad
19896989Di2015UniqueSeparatorprivate void Form1_Shown(Object sender, EventArgs e) {Di2015NewLine    doSomething1(sender, e);Di2015NewLine    doSomething2(sender, e);Di2015NewLine    // The new form I want to open after the main form.Di2015NewLine    Form2 f2 = new Form2();Di2015NewLine    doSomething3(sender, e);Di2015NewLine}Di2015NewLine
19896989Di2015UniqueSeparatordoSomething1
19896989Di2015UniqueSeparatordoSomething2
19896989Di2015UniqueSeparatorShown
19897068Di2015UniqueSeparatorobj/Debug
19897068Di2015UniqueSeparatorobj/Release
19897068Di2015UniqueSeparator.targets
19897068Di2015UniqueSeparator.targets
19897575Di2015UniqueSeparatorpublic class MvcApplication : System.Web.HttpApplicationDi2015NewLine{Di2015NewLine    protected void Application_BeginRequest()Di2015NewLine    {Di2015NewLine        if (String.IsNullOrEmpty(Context.Request.ContentType) && Context.Request.HttpMethod == "POST")Di2015NewLine        {Di2015NewLine            Context.Request.ContentType = "application/x-www-form-urlencoded";Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Application_EndRequest()Di2015NewLine    {Di2015NewLine        Context.Response.AddHeader("Access-Control-Allow-Origin", "*");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19897585Di2015UniqueSeparatorBaseClass
19897585Di2015UniqueSeparatornamespace SportsBaseClassesDi2015NewLine{Di2015NewLine   public class BaseClassDi2015NewLine   {Di2015NewLine
19897689Di2015UniqueSeparatorvar sorted = info.OrderBy(i => i.Name);Di2015NewLine
19897689Di2015UniqueSeparatorthis.DefaultViewModel["Sections"] = info.OrderBy(i => i.Name).ToList();Di2015NewLine
19897769Di2015UniqueSeparatorAnchor
19897769Di2015UniqueSeparatorTop,Right
19897769Di2015UniqueSeparatorAnchor
19897769Di2015UniqueSeparatorRight
19897783Di2015UniqueSeparatorAnimatedPictureBox
19897783Di2015UniqueSeparatorForm1
19897783Di2015UniqueSeparatorWeatherMaps
19897802Di2015UniqueSeparatorNSDictionary.FromObjectsAndKeys(keys,elemarray);
19897802Di2015UniqueSeparatorNSDictionary.FromObjectsAndKeys(elemarray,keys);
19897816Di2015UniqueSeparatorvar dt = DateTime.ParseExact(day.SelectedValue, "M/d/yyyy h:mm:ss tt", CultureInfo.InvariantCulture);Di2015NewLine
19897816Di2015UniqueSeparatorM
19897816Di2015UniqueSeparatord
19897816Di2015UniqueSeparatorh
19897816Di2015UniqueSeparatorDateTime
19897988Di2015UniqueSeparator\\\\x
19897988Di2015UniqueSeparatorx
19897988Di2015UniqueSeparatorx
19897988Di2015UniqueSeparatorsomeRegex([.\\\\-/\\\\\\\\])someOtherRegex\\\\1anotherRegexDi2015NewLine          ^^^^^^^^^^^               ^^^Di2015NewLine            group 1                 here should appear same string as in group 1Di2015NewLine
19897988Di2015UniqueSeparatorString regex = "someRegex([.\\\\-/\\\\\\\\])someOtherRegex\\\\1anotherRegex";Di2015NewLineSystem.out.println("someRegex.someOtherRegex.anotherRegex".matches(regex));Di2015NewLineSystem.out.println("someRegex.someOtherRegex-anotherRegex".matches(regex));Di2015NewLineSystem.out.println("someRegex-someOtherRegex-anotherRegex".matches(regex));Di2015NewLine
19897988Di2015UniqueSeparatortrueDi2015NewLinefalseDi2015NewLinetrueDi2015NewLine
19898248Di2015UniqueSeparatorscxml
19898248Di2015UniqueSeparatorXDocument xdoc = XDocument.Load(path_to_xml);Di2015NewLineXNamespace ns = "http://www.w3.org/2005/07/scxml";Di2015NewLineforeach (var state in xdoc.Descendants(ns + "state"))Di2015NewLine{Di2015NewLine    Console.WriteLine(state.Attribute("id").Value);Di2015NewLine}Di2015NewLine
19898280Di2015UniqueSeparator<asp:Button ID="externalPost" runat="server" PostBackUrl="http://www.somewhere.com/" Text="Post Somewhere" />Di2015NewLine
19898315Di2015UniqueSeparator[XmlRoot("Books")]Di2015NewLinepublic class BookListDi2015NewLine{Di2015NewLine    [XmlElement("Book")]Di2015NewLine    public List<Book> Books { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BookDi2015NewLine{Di2015NewLine    [XmlAttribute("Title")]Di2015NewLine    public string Title { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("Attribute")]Di2015NewLine    public List<AttributePair<String, String>> Attributes { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[Serializable]Di2015NewLine[XmlType(TypeName = "Attribute")]Di2015NewLinepublic struct AttributePair<K, V>Di2015NewLine{Di2015NewLine    public K Key { get; set; }Di2015NewLine    public V Value { get; set; }Di2015NewLineDi2015NewLine    public AttributePair(K key, V val)Di2015NewLine        : this()Di2015NewLine    {Di2015NewLine        Key = key;Di2015NewLine        Value = val;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898315Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<Books xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Di2015NewLine       xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <Book Title="To win a woman">Di2015NewLine    <Attribute>Di2015NewLine      <Key>Author</Key>Di2015NewLine      <Value>Bob</Value>Di2015NewLine    </Attribute>Di2015NewLine    <Attribute>Di2015NewLine      <Key>Publish Date</Key>Di2015NewLine      <Value>1934</Value>Di2015NewLine    </Attribute>Di2015NewLine    <Attribute>Di2015NewLine      <Key>Genre</Key>Di2015NewLine      <Value>Romance</Value>Di2015NewLine    </Attribute>Di2015NewLine  </Book>Di2015NewLine</Books>Di2015NewLine
19898315Di2015UniqueSeparatorusing(var file = File.OpenRead("booklist.xml"))Di2015NewLine{Di2015NewLine    var readBookCollection = (BookList)serializer.Deserialize(file);Di2015NewLineDi2015NewLine    foreach (var book in readBookCollection.Books)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Title: {0}", book.Title);Di2015NewLineDi2015NewLine        foreach (var attributePair in book.Attributes)Di2015NewLine        {Di2015NewLine            Console.CursorLeft = 3;Di2015NewLine            Console.WriteLine("Key: {0}, Value: {1}", Di2015NewLine                attributePair.Key, Di2015NewLine                attributePair.Value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898348Di2015UniqueSeparatorConnectionString
19898348Di2015UniqueSeparatorWeb.Config
19898378Di2015UniqueSeparatorIUserimageUploader
19898470Di2015UniqueSeparator<ScrollView>
19898470Di2015UniqueSeparator<StackPanel>
19898470Di2015UniqueSeparator<TreeView>
19898539Di2015UniqueSeparatorif ((bool)this.Invoke((Func<bool>)delegateDi2015NewLine  {Di2015NewLine  return MessageBox.Show("Test Message", Di2015NewLine                         "Test Title", Di2015NewLine                         MessageBoxButtons.YesNo) == DialogResult.No;Di2015NewLine  }))Di2015NewLine{Di2015NewLine    Console.WriteLine("No was indeed selected.");Di2015NewLine}Di2015NewLine
19898539Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    System.Threading.Thread T = new System.Threading.Thread(Foo);Di2015NewLine    T.Start();Di2015NewLine}Di2015NewLineDi2015NewLinedelegate bool SetTestDelegate(string text);Di2015NewLineprivate bool SetTest(string text)Di2015NewLine{Di2015NewLine    return (MessageBox.Show(text, "", MessageBoxButtons.YesNo) == DialogResult.No);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Foo()Di2015NewLine{Di2015NewLine    if ((bool)this.Invoke(new SetTestDelegate(SetTest), new object[] {"test"}))Di2015NewLine    {Di2015NewLine        Console.WriteLine("No was indeed selected.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898539Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    System.Threading.Thread T = new System.Threading.Thread(Foo);Di2015NewLine    T.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Foo()Di2015NewLine{Di2015NewLine    if (Response("test") == System.Windows.Forms.DialogResult.No)Di2015NewLine    {Di2015NewLine        Console.WriteLine("No was indeed selected.");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinedelegate DialogResult ResponseDelegate(string text);Di2015NewLineprivate DialogResult Response(string text)Di2015NewLine{Di2015NewLine    if (this.InvokeRequired)Di2015NewLine    {Di2015NewLine        return (DialogResult)this.Invoke(new ResponseDelegate(Response), new object[] { "test" });Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return MessageBox.Show(text, "", MessageBoxButtons.YesNo);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898657Di2015UniqueSeparatorif (i == 0 && radB.Checked)Di2015NewLine
19898657Di2015UniqueSeparatorint score = 0;Di2015NewLineint i = -1;Di2015NewLineint a = 0;Di2015NewLineDi2015NewLinestring[] questions = new string[]Di2015NewLine{Di2015NewLine    "What is 9 cubed?", "What is 6+3?", Di2015NewLine    "What type of animal is tuna sandwiches made from?",Di2015NewLine    "What is 18 backwards?"Di2015NewLine};Di2015NewLineDi2015NewLinestring[] answers = new string[] {Di2015NewLine   "9", "81", "729", "2", Di2015NewLine   "4", "2", "9", "1", Di2015NewLine   "zebra", "aardvark", "fish", "gnu", Di2015NewLine   "31", "81", "91", "88"Di2015NewLine};Di2015NewLineDi2015NewLinestring [] quizAnswers=new string[]{"729","9","aardvark","81"};Di2015NewLineprivate     void btnStart_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (i < questions.Length)Di2015NewLine    i++;Di2015NewLine    //txtScore.Text = score;Di2015NewLineDi2015NewLine    lblQuestion.Text = questions[i];Di2015NewLineDi2015NewLine    radA.Text = answers[a];Di2015NewLine    a++;Di2015NewLine    radB.Text = answers[a];Di2015NewLine    a++;Di2015NewLine    radC.Text = answers[a];Di2015NewLine    a++;Di2015NewLine    radD.Text = answers[a];Di2015NewLine    a++;Di2015NewLineDi2015NewLine    btnStart.Visible = false;Di2015NewLine    btnStart.Enabled = false;Di2015NewLine    btnSubmit.Visible = true;Di2015NewLine    btnSubmit.Enabled = true;Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void btnSubmit_Click(object sender, EventArgs e){Di2015NewLineDi2015NewLineDi2015NewLine    if(getSelectedAnswer().Equals(quizAnswers[i]))Di2015NewLine    {Di2015NewLine        MessageBox.Show("Correct");Di2015NewLine        score++;Di2015NewLine        txtScore.Text = Convert.ToString(score);Di2015NewLine        btnSubmit.Enabled = false;Di2015NewLine        btnSubmit.Visible = false;Di2015NewLine        btnStart.Visible = true;Di2015NewLine        btnStart.Enabled = true;Di2015NewLine        btnStart.Text = "Next";Di2015NewLine    }Di2015NewLineDi2015NewLine    elseDi2015NewLine    {Di2015NewLine        MessageBox.Show("Incorrect");Di2015NewLine        score--;Di2015NewLine        txtScore.Text = Convert.ToString(score);Di2015NewLine        btnSubmit.Enabled = false;Di2015NewLine        btnSubmit.Visible = false;Di2015NewLine        btnStart.Visible = true;Di2015NewLine        btnStart.Enabled = true;Di2015NewLine        btnStart.Text = "Next";Di2015NewLine    }Di2015NewLine}Di2015NewLinestring getSelectedAnswer()Di2015NewLine{Di2015NewLine    if (radA.Checked)Di2015NewLine    return radA.Text.ToString();Di2015NewLine    if (radB.Checked)Di2015NewLine    return radB.Text.ToString();Di2015NewLine    if (radC.Checked)Di2015NewLine    return radC.Text.ToString();Di2015NewLine    if (radD.Checked)Di2015NewLine    return radD.Text.ToString();Di2015NewLine    return "";Di2015NewLine}Di2015NewLine
19898825Di2015UniqueSeparator.csproj
19898825Di2015UniqueSeparator<MvcBuildViews>
19898825Di2015UniqueSeparatorfalse
19898825Di2015UniqueSeparatortrue
19898829Di2015UniqueSeparatorPreserveReferencesHandling
19898829Di2015UniqueSeparatorPreserveReferencesHandling
19898829Di2015UniqueSeparatorAll
19898829Di2015UniqueSeparator$id
19898829Di2015UniqueSeparator$ref
19898829Di2015UniqueSeparator{"$id":"1","Id":1,"Field":"Value","NestedObject":{"$ref":"1"}}Di2015NewLine
19898829Di2015UniqueSeparatorJsonConverter
19898829Di2015UniqueSeparatorWriteJson
19898829Di2015UniqueSeparator{Id:1}
19898829Di2015UniqueSeparatorJsonSerializer
19898829Di2015UniqueSeparatorWriteJson
19898829Di2015UniqueSeparatorForm
19898829Di2015UniqueSeparatorNestedObject
19898829Di2015UniqueSeparatorReferenceLoopHandling
19898829Di2015UniqueSeparatorIgnore
19898829Di2015UniqueSeparatorId
19898829Di2015UniqueSeparatorId
19898829Di2015UniqueSeparatorField
19898829Di2015UniqueSeparatorNestedObject
19898829Di2015UniqueSeparatorId
19898829Di2015UniqueSeparatorField
19898829Di2015UniqueSeparatorNestedObject
19898829Di2015UniqueSeparatorJObject
19898829Di2015UniqueSeparatorwriter
19898829Di2015UniqueSeparatorpublic class SerializationConverter : JsonConverterDi2015NewLine{Di2015NewLine    public override bool CanRead { get { return false; } }Di2015NewLine    public override bool CanWrite { get { return true; } }Di2015NewLineDi2015NewLine    public override bool CanConvert(Type objectType)Di2015NewLine    {Di2015NewLine        return objectType == typeof(Form) || typeof(Form).IsAssignableFrom(objectType);Di2015NewLine    }Di2015NewLineDi2015NewLine    private HashSet<Form> serializedForms = new HashSet<Form>();Di2015NewLineDi2015NewLine    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        Form f = (Form)value;Di2015NewLineDi2015NewLine        JObject jo = new JObject();Di2015NewLine        jo.Add("Id", f.Id);Di2015NewLineDi2015NewLine        if (serializedForms.Add(f))Di2015NewLine        {Di2015NewLine            jo.Add("Field", f.Field);Di2015NewLine            if (f.NestedObject != null)Di2015NewLine            {Di2015NewLine                jo.Add("NestedObject", JToken.FromObject(f.NestedObject, serializer));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        jo.WriteTo(writer);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898829Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Form form = new FormDi2015NewLine        {Di2015NewLine            Id = 1,Di2015NewLine            Field = "Value",Di2015NewLine        };Di2015NewLine        form.NestedObject = form;Di2015NewLineDi2015NewLine        JsonSerializerSettings settings = new JsonSerializerSettingsDi2015NewLine        {Di2015NewLine            Converters = new List<JsonConverter> { new SerializationConverter() },Di2015NewLine            ReferenceLoopHandling = ReferenceLoopHandling.Serialize,Di2015NewLine        };Di2015NewLineDi2015NewLine        string json = JsonConvert.SerializeObject(form, settings);Di2015NewLine        Console.WriteLine(json);Di2015NewLine    }Di2015NewLine} Di2015NewLineDi2015NewLineclass FormDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Field { get; set; }Di2015NewLine    public Form NestedObject { get; set; }Di2015NewLine}Di2015NewLine
19898829Di2015UniqueSeparator{"Id":1,"Field":"Value","NestedObject":{"Id":1}}Di2015NewLine
19898829Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        List<Form> forms = new List<Form>Di2015NewLine        {Di2015NewLine            new Form Di2015NewLine            { Di2015NewLine                Id = 1, Di2015NewLine                Field = "One", Di2015NewLine                NestedObject = new FormDi2015NewLine                {Di2015NewLine                    Id = 2,Di2015NewLine                    Field = "Two"Di2015NewLine                }Di2015NewLine            },Di2015NewLine            new FormDi2015NewLine            {Di2015NewLine                Id = 3,Di2015NewLine                Field = "Three"Di2015NewLine            },Di2015NewLine            new FormDi2015NewLine            {Di2015NewLine                Id = 4,Di2015NewLine                Field = "Four"Di2015NewLine            },Di2015NewLine            new FormDi2015NewLine            {Di2015NewLine                Id = 5,Di2015NewLine                Field = "Five"Di2015NewLine            }Di2015NewLine        };Di2015NewLineDi2015NewLine        forms[0].NestedObject.NestedObject = forms[3];Di2015NewLine        forms[1].NestedObject = forms[0].NestedObject;Di2015NewLine        forms[2].NestedObject = forms[1];Di2015NewLineDi2015NewLine        JsonSerializerSettings settings = new JsonSerializerSettingsDi2015NewLine        {Di2015NewLine            Converters = new List<JsonConverter> { new SerializationConverter() },Di2015NewLine            ReferenceLoopHandling = ReferenceLoopHandling.Serialize,Di2015NewLine            Formatting = Formatting.IndentedDi2015NewLine        };Di2015NewLineDi2015NewLine        string json = JsonConvert.SerializeObject(forms, settings);Di2015NewLine        Console.WriteLine(json);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898829Di2015UniqueSeparator[Di2015NewLine  {Di2015NewLine    "Id": 1,Di2015NewLine    "Field": "One",Di2015NewLine    "NestedObject": {Di2015NewLine      "Id": 2,Di2015NewLine      "Field": "Two",Di2015NewLine      "NestedObject": {Di2015NewLine        "Id": 5,Di2015NewLine        "Field": "Five"Di2015NewLine      }Di2015NewLine    }Di2015NewLine  },Di2015NewLine  {Di2015NewLine    "Id": 3,Di2015NewLine    "Field": "Three",Di2015NewLine    "NestedObject": {Di2015NewLine      "Id": 2Di2015NewLine    }Di2015NewLine  },Di2015NewLine  {Di2015NewLine    "Id": 4,Di2015NewLine    "Field": "Four",Di2015NewLine    "NestedObject": {Di2015NewLine      "Id": 3Di2015NewLine    }Di2015NewLine  },Di2015NewLine  {Di2015NewLine    "Id": 5Di2015NewLine  }Di2015NewLine]Di2015NewLine
19898829Di2015UniqueSeparatorForm
19898829Di2015UniqueSeparatorWriteJson
19898829Di2015UniqueSeparatorpublic override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine{Di2015NewLine    Form f = (Form)value;Di2015NewLineDi2015NewLine    JObject jo = new JObject();Di2015NewLine    if (serializedForms.Add(f))Di2015NewLine    {Di2015NewLine        foreach (PropertyInfo prop in value.GetType().GetProperties())Di2015NewLine        {Di2015NewLine            if (prop.CanRead)Di2015NewLine            {Di2015NewLine                object propVal = prop.GetValue(value);Di2015NewLine                if (propVal != null)Di2015NewLine                {Di2015NewLine                    jo.Add(prop.Name, JToken.FromObject(propVal, serializer));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        jo.Add("Id", f.Id);Di2015NewLine    }Di2015NewLineDi2015NewLine    jo.WriteTo(writer);Di2015NewLine}Di2015NewLine
19898850Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Xml;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinepublic static class XmlUtils {Di2015NewLineDi2015NewLine    public static IEnumerable<String> GetImmediateTextValues(XmlNode node) {Di2015NewLine        var values = node.ChildNodes.Cast<XmlNode>().Aggregate(Di2015NewLine            new List<String>(),Di2015NewLine            (xs, x) => { if (x.NodeType == XmlNodeType.Text) { xs.Add(x.Value); } return xs; }Di2015NewLine        );Di2015NewLine        return values;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static String GetImmediateJoinedTextValues(XmlNode node, String delimiter) {Di2015NewLine        var values = GetImmediateTextValues(node);Di2015NewLine        var text = String.Join(delimiter, values.ToArray());Di2015NewLine        return text;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19898850Di2015UniqueSeparatorpublic Bool IsTextNode(HtmlElement element) {Di2015NewLine  var result = false;Di2015NewLine  var nativeNode = element.DomElement as mshtml.IHTMLDOMNode;Di2015NewLine  if (nativeNode != null) {Di2015NewLine      var nodeType = nativeNode.nodeType;Di2015NewLine      result = nodeType == 3; // -- TextNode: http://msdn.microsoft.com/en-us/library/aa704085(v=vs.85).aspxDi2015NewLine  }Di2015NewLine  return resultDi2015NewLine
19899239Di2015UniqueSeparatorpublic partial class MainGameWindow : FormDi2015NewLine{ Di2015NewLine    //sets the room ID to the first room as defaultDi2015NewLine    string roomID = "FirstRoom";Di2015NewLine    //makes a list for the inventoryDi2015NewLineDi2015NewLine    //collection initializer way (thanks to Max bellow!)Di2015NewLine    List<string> Inventory = new List<string>()Di2015NewLine    {Di2015NewLine        "A piece of string...Useless!",Di2015NewLine    };Di2015NewLineDi2015NewLine    //constructor wayDi2015NewLine    public MainGameWindow()Di2015NewLine    {Di2015NewLine        Inventory.Add("A piece of string...Useless!");Di2015NewLine    }Di2015NewLineDi2015NewLine    //method wayDi2015NewLine    public void MethodAddUselessString()Di2015NewLine    {Di2015NewLine        Inventory.Add("A piece of string...Useless!");Di2015NewLine    }Di2015NewLineDi2015NewLine    //function wayDi2015NewLine    public bool FunctionAddUselessString()Di2015NewLine    {Di2015NewLine        Inventory.Add("A piece of string...Useless!");Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }    Di2015NewLine}Di2015NewLine
19899341Di2015UniqueSeparatorvar output = new StringBuilder(fruitString);Di2015NewLineDi2015NewLineforeach (var kvp in fruitDictionary)Di2015NewLine    output.Replace(kvp.Key, kvp.Value);Di2015NewLineDi2015NewLinevar result = output.ToString();Di2015NewLine
19899341Di2015UniqueSeparatorStringBuilder
19899341Di2015UniqueSeparatorfruitString
19899341Di2015UniqueSeparatorDictionary
19899538Di2015UniqueSeparatorControlAdded
19899538Di2015UniqueSeparatorprivate void tabControl1_ControlAdded(object sender, ControlEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Control.GetType() == typeof(TabPage)) {Di2015NewLine        MessageBox.Show("Yippee!"); // Insert code hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
19899589Di2015UniqueSeparatorwriter.AddAttribute(HtmlTextWriterAttribute.Href, "/stdtheme.css");Di2015NewLinewriter.AddAttribute(HtmlTextWriterAttribute.Type, "text/css");Di2015NewLinewriter.RenderBeginTag(HtmlTextWriterTag.Link);Di2015NewLine
19900062Di2015UniqueSeparatorprotected void gvChildGrid_RowEditing(object sender, GridViewEditEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    ((GridView)sender).EditIndex = e.NewEditIndex;Di2015NewLine    BindData();Di2015NewLineDi2015NewLine}Di2015NewLine
19900062Di2015UniqueSeparatorsender
19900227Di2015UniqueSeparator    private bool _isMovingControl = false;Di2015NewLine    private int _prevMouseX;Di2015NewLine    private int _prevMouseY;Di2015NewLineDi2015NewLine    private void pictureBox1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        _prevMouseX = PointToClient(Cursor.Position).X;Di2015NewLine        _prevMouseY = PointToClient(Cursor.Position).Y;Di2015NewLine        _isMovingControl = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void pictureBox1_MouseUp(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        _isMovingControl = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void pictureBox1_MouseMove(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        Point mouseLocation = PointToClient(Cursor.Position);Di2015NewLineDi2015NewLine        if (_isMovingControl && (mouseLocation.X != _prevMouseX || mouseLocation.Y != _prevMouseY) )Di2015NewLine        {Di2015NewLine            if (mouseLocation.X > _prevMouseX)Di2015NewLine            {Di2015NewLine                //  Moved cursor to the right;Di2015NewLineDi2015NewLine                pictureBox1.Left = pictureBox1.Left + (mouseLocation.X - _prevMouseX);Di2015NewLine                _prevMouseX = mouseLocation.X;Di2015NewLine            }Di2015NewLine            else if (mouseLocation.X < _prevMouseX)Di2015NewLine            {Di2015NewLine                //  Moved cursor to the left;Di2015NewLineDi2015NewLine                pictureBox1.Left = pictureBox1.Left - (_prevMouseX - mouseLocation.X);Di2015NewLine                _prevMouseX = mouseLocation.X;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (mouseLocation.Y > _prevMouseY)Di2015NewLine            {Di2015NewLine                //  Moved cursor toward the bottom;Di2015NewLineDi2015NewLine                pictureBox1.Top = pictureBox1.Top + (mouseLocation.Y - _prevMouseY);Di2015NewLine                _prevMouseY = mouseLocation.Y;Di2015NewLine            }Di2015NewLine            else if (mouseLocation.Y < _prevMouseY)Di2015NewLine            {Di2015NewLine                //  Moved cursor toward the topDi2015NewLineDi2015NewLine                pictureBox1.Top = pictureBox1.Top - (_prevMouseY - mouseLocation.Y);Di2015NewLine                _prevMouseY = mouseLocation.Y;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19900444Di2015UniqueSeparatorfunction DropTimeSegments() {Di2015NewLine$(".datepicker").each(function (index, item) {Di2015NewLine    $(item).val(FormatDate(new Date($(item).val())));Di2015NewLine});Di2015NewLineDi2015NewLinefunction FormatDate(Date) {Di2015NewLine    return Date.getFullYear() + '-' + pad(Date.getMonth(), 2) + '-' + pad(Date.getDate(), 2);Di2015NewLine}Di2015NewLineDi2015NewLinefunction pad(num, size) {Di2015NewLine    var s = num + "";Di2015NewLine    while (s.length < size) s = "0" + s;Di2015NewLine    return s;Di2015NewLine}Di2015NewLine
19900548Di2015UniqueSeparatorText
19900548Di2015UniqueSeparatorpublic string WaterMarkDi2015NewLine{Di2015NewLine  get { return (string )this.GetValue(WaterMarkProperty); }Di2015NewLine  set { this.SetValue(WaterMarkProperty, value); } Di2015NewLine}Di2015NewLinepublic static readonly DependencyProperty WaterMarkProperty = DependencyProperty.Register(Di2015NewLine "WaterMark", typeof(string ), typeof(PasswordBoxWin8));Di2015NewLine
19900548Di2015UniqueSeparator<TextBlock Text="{Binding WaterMark, ElementName=YourUserControlName}" />Di2015NewLine
19900548Di2015UniqueSeparatorWaterMark
19900717Di2015UniqueSeparator<script type="text/jscript">Di2015NewLine    function imgclick() {Di2015NewLine        $('#<%= lvlink1.ClientID %>').removeClass().addClass("lv-under1"); //another classDi2015NewLine        $('#<%= lvimg1.ClientID %>').attr('src','<%= ResolveUrl("~/images/1.jpg") %>');Di2015NewLineDi2015NewLine        $('#<%= lvlink2.ClientID %>,#<%= lvlink3.ClientID %>').addClass("lv-under");Di2015NewLine        $('#<%= lvimg2.ClientID %>, #<%= lvimg3.ClientID %>').attr('src', '<%= ResolveUrl("~/images/spacer.gif") %>');Di2015NewLine    };Di2015NewLine</script>Di2015NewLineDi2015NewLine<img src='images/img1.jpg' onclick='return imgclick();' />  // calling scriptDi2015NewLineDi2015NewLine<asp:LinkButton ID="lvlink1" OnClick="lvimg1_Click" CssClass="lv-under" runat="server"  >Di2015NewLine<asp:Image ID="lvimg1" runat="server" ImageUrl="~/images/spacer.gif" />Di2015NewLineDi2015NewLine<asp:LinkButton ID="lvlink2" OnClick="lvimg2_Click" CssClass="lv-under" runat="server"  >Di2015NewLine<asp:Image ID="lvimg2" runat="server" ImageUrl="~/images/spacer.gif" />Di2015NewLineDi2015NewLine<asp:LinkButton ID="lvlink3" OnClick="lvimg3_Click" CssClass="lv-under" runat="server"  >Di2015NewLine<asp:Image ID="lvimg3" runat="server" ImageUrl="~/images/spacer.gif" />Di2015NewLine
19900717Di2015UniqueSeparatorfunction imgclick() {Di2015NewLine    ...Di2015NewLine    $('#<%= lvlblhd.ClientID %>').removeClass().addClass("detailheader").html("<img src='images/spacer.gif' height='8px' width='5px' /><br/>Wake up")Di2015NewLine    $('#<%= lvlblsubhd.ClientID %>').removeClass().addClass("detailsubheader").html("   to a fragrant day..");Di2015NewLine    $('#<%= lvtd.ClientID %>').css('background-color',"#7e65a9");//tdDi2015NewLine    $('#<%= lvlbl.ClientID %>').text("A beautifully fragrance residence");Di2015NewLine    ...Di2015NewLine}Di2015NewLine
19901159Di2015UniqueSeparator[XmlAnyAttribute]Di2015NewLinepublic XmlAttribute[]XAttributes {get; set;}Di2015NewLine
19901184Di2015UniqueSeparatorFolder_Browser
19901184Di2015UniqueSeparatorpublic Folder_Browser(Back_up_Options host)Di2015NewLine
19901184Di2015UniqueSeparatorSchedual_Tasks
19901184Di2015UniqueSeparatorhost
19901184Di2015UniqueSeparatorSchedual_Tasks
19901184Di2015UniqueSeparatorBack_up_Options
19901184Di2015UniqueSeparatorhost
19901184Di2015UniqueSeparatornull
19901184Di2015UniqueSeparatornew Folder_Browser(null).Show();Di2015NewLine
19901184Di2015UniqueSeparatorbackOptions
19901184Di2015UniqueSeparatorif(backOptions != null)Di2015NewLine{Di2015NewLine    deviceSel = backOptions.deviceSel;Di2015NewLine}Di2015NewLineelse Di2015NewLine{Di2015NewLine    deviceSel = null;Di2015NewLine}Di2015NewLine
19901184Di2015UniqueSeparatordeviceSel
19901504Di2015UniqueSeparatorvar dataContacts = Di2015NewLine       {"Contacts":[{"Id":0,"Active":false,"Company":"Rory The Architect\\\\, Melt"}]};Di2015NewLineDi2015NewLinevar contacts = dataContacts.Contacts;Di2015NewLine
19901870Di2015UniqueSeparator// this method is borrowed from http://stackoverflow.com/a/11155102/284240Di2015NewLinepublic static int GetIso8601WeekOfYear(DateTime time)Di2015NewLine{Di2015NewLine    DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);Di2015NewLine    if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)Di2015NewLine    {Di2015NewLine        time = time.AddDays(3);Di2015NewLine    }Di2015NewLineDi2015NewLine    return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);Di2015NewLine} Di2015NewLineDi2015NewLinepublic static DateTime FirstDateOfWeek(int year, int weekOfYear, System.Globalization.CultureInfo ci)Di2015NewLine{Di2015NewLine    DateTime jan1 = new DateTime(year, 1, 1);Di2015NewLine    int daysOffset = (int)ci.DateTimeFormat.FirstDayOfWeek - (int)jan1.DayOfWeek;Di2015NewLine    DateTime firstWeekDay = jan1.AddDays(daysOffset);Di2015NewLine    int firstWeek = ci.Calendar.GetWeekOfYear(jan1, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek);Di2015NewLine    if (firstWeek <= 1 || firstWeek > 50)Di2015NewLine    {Di2015NewLine        weekOfYear -= 1;Di2015NewLine    }Di2015NewLine    return firstWeekDay.AddDays(weekOfYear * 7);Di2015NewLine}Di2015NewLine
19901870Di2015UniqueSeparator// 46Di2015NewLineint thisWeekNumber = GetIso8601WeekOfYear(DateTime.Today); Di2015NewLine// 11/11/2013  Di2015NewLineDateTime firstDayOfWeek= FirstDateOfWeek(2013, thisWeekNumber, CultureInfo.CurrentCulture); Di2015NewLine// 11/12/2012  Di2015NewLineDateTime firstDayOfLastYearWeek = FirstDateOfWeek(2012, thisWeekNumber, CultureInfo.CurrentCulture);   Di2015NewLine
19901958Di2015UniqueSeparator        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConStr"].ConnectionString))Di2015NewLine    {Di2015NewLine        using (SqlCommand cmd = new SqlCommand("select COUNT(*) as PatientCount from Patient_Data where  DummyValue = 'Y' ", cn))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLineDi2015NewLine                cn.Open();Di2015NewLineDi2015NewLine                using (SqlDataReader rdr = cmd.ExecuteReader())Di2015NewLine                {Di2015NewLine                    //int Patcount;Di2015NewLine                    if (rdr.Read())Di2015NewLine                    {Di2015NewLine                        int Patcount = int.Parse(rdr["PatientCount"].ToString());Di2015NewLine                        if (Patcount != 0)Di2015NewLine                        {Di2015NewLine                            Label3.Visible = true;Di2015NewLine                            Label3.Text = "You have already have "+Patcount+" dummy records,Please update those records by clicking Update Dummy Records Link.";Di2015NewLine                            btnSkipSubmit.Visible = false;Di2015NewLine                        }Di2015NewLine                        //Code RequiredDi2015NewLineDi2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLineDi2015NewLine                // handle errors hereDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
19901965Di2015UniqueSeparator0.656
19901965Di2015UniqueSeparator0.67
19901965Di2015UniqueSeparator0.66
19901965Di2015UniqueSeparatorYourNumber.ToString("0.##");Di2015NewLine
19901965Di2015UniqueSeparatorYourNumber.ToString("#,##0.##").Replace("."," ")Di2015NewLine
19902012Di2015UniqueSeparatorEventWaitHandle eW = new EventWaitHandle(false, EventResetMode.AutoReset, "Romasz.Event");Di2015NewLineeW.WaitOne();Di2015NewLine
19902012Di2015UniqueSeparatorEventWaitHandle eW;Di2015NewLinebool yes = EventWaitHandle.TryOpenExisting("Romasz.Event", out eW);Di2015NewLineif (yes) eW.Set();Di2015NewLine
19902489Di2015UniqueSeparatorprivate static string GetMemberName(Expression expression)Di2015NewLine{Di2015NewLine    switch(expression.NodeType)Di2015NewLine    {Di2015NewLine        case ExpressionType.MemberAccess:Di2015NewLine            return ((MemberExpression)expression).Member.Name;Di2015NewLine        case ExpressionType.Convert:Di2015NewLine            return GetMemberName(((UnaryExpression)expression).Operand);Di2015NewLine        default:Di2015NewLine            throw new NotSupportedException(expression.NodeType.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19902489Di2015UniqueSeparatorpublic void Exec<T>(Expression<Func<T, object>> expression)Di2015NewLine{Di2015NewLine    string name = GetMemberName(expression.Body);Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
19902659Di2015UniqueSeparatorRandomArray
19902659Di2015UniqueSeparatorRandomArray(int min, int max)
19902659Di2015UniqueSeparatorclass BubbleSort : RandomArray Di2015NewLine{Di2015NewLine     public BubbleSort(int min, int max)Di2015NewLine         : base(min, max)Di2015NewLine     { }Di2015NewLine}Di2015NewLine
19902659Di2015UniqueSeparatorclass BubbleSort : RandomArray Di2015NewLine{Di2015NewLine     public BubbleSort(int min, int max)Di2015NewLine         : base(min, max)Di2015NewLine     { }Di2015NewLineDi2015NewLine     public BubbleSort()Di2015NewLine         : this(1, 10) Di2015NewLine     { }Di2015NewLine}Di2015NewLine
19902659Di2015UniqueSeparatorinterface ISortAlgorithm<T>Di2015NewLine{Di2015NewLine     void Sort(T[] array);Di2015NewLine}Di2015NewLine
19902659Di2015UniqueSeparatorBubbleSort
19902659Di2015UniqueSeparatorclass BubbleSort : ISortAlgorithm<int>Di2015NewLine{Di2015NewLine     public void Sort(int[] array) Di2015NewLine     { Di2015NewLine         ...Di2015NewLine     }Di2015NewLine}Di2015NewLine
19902694Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    using(var con = new OracleConnection("Data Source=KBETEST; Persist Security Info=TRUE; User ID=dbo; Password=dbo123; Unicode=True"))Di2015NewLine    using(var cmd = new OracleCommand(@"Di2015NewLineinsert into bbbt(bankid,benbrn_code,brn_name,brn_addr,brn_loc,brn_stat,brn_city,coun_code,remarks,ifsc_code,rtgs_stat)Di2015NewLineselect substr(ifsc_code,1,4), substr(ifsc_code,5), n.branch_name, n.address1, n.district, n.state, n.city, 'IN', n.bank_name, n.ifsc_code,n.status from neft_temp n where ifsc_code in (SELECT ifsc_code FROM neft_temp MINUS SELECT ifsc_code FROM bbbt)", con))Di2015NewLine    {Di2015NewLine        con.Open();Di2015NewLine        cmd.ExecuteNonQuery();Di2015NewLine    }       Di2015NewLine    button4.PerformClick();Di2015NewLine}Di2015NewLine
19902694Di2015UniqueSeparatorIDisposable
19902694Di2015UniqueSeparatorusing
19902779Di2015UniqueSeparator// ....Di2015NewLineDi2015NewLineplotCube.MouseDoubleClick += (_e, _a) => {Di2015NewLine    _a.Cancel = true; Di2015NewLine};Di2015NewLine// you may want disable zoom and pan as well? Di2015NewLineplot.AllowZoom = false;Di2015NewLineplot.AllowPan = false; Di2015NewLineDi2015NewLine// continue with your code here...Di2015NewLineilPanel1.Scene = scene;Di2015NewLine
19902779Di2015UniqueSeparatorfalse
19903041Di2015UniqueSeparatorDataContext
19903041Di2015UniqueSeparatorUserControl
19903041Di2015UniqueSeparatorDataTemplate
19903041Di2015UniqueSeparatorApp.xaml
19903041Di2015UniqueSeparator<DataTemplate DataType="{x:Type ViewModels:BlockViewModel}">Di2015NewLine    <Views:BlockView />Di2015NewLine</DataTemplate>Di2015NewLine
19903041Di2015UniqueSeparatorBlockViewModel
19903041Di2015UniqueSeparatorBlockView
19903041Di2015UniqueSeparatorSectorView
19903041Di2015UniqueSeparatorUserControl
19903041Di2015UniqueSeparatorBindable DependencyProperty
19903041Di2015UniqueSeparatorDataContext
19903041Di2015UniqueSeparatorRelativeSource Binding
19903041Di2015UniqueSeparator<TextBlock Grid.Row="0" Grid.Column="0" Text="{Binding DataContext.BlockName, Di2015NewLine    RelativeSource={RelativeSource AncestorType={Di2015NewLine    x:Type YourXmlNamespacePrefix:BlockView}}}" HorizontalAlignment="Left" Di2015NewLine    VerticalAlignment="Center" FontSize="14" Margin="2,6"/>Di2015NewLine
19903041Di2015UniqueSeparatorRelativeSource Binding
19903041Di2015UniqueSeparatorDataContext
19903050Di2015UniqueSeparatorstring[]
19903050Di2015UniqueSeparatorList<string>
19903050Di2015UniqueSeparatorpublic class VehicleDi2015NewLine{Di2015NewLine    [XmlElement("Name")]Di2015NewLine    public List<Vehicle> Names {get { return names; }}Di2015NewLineDi2015NewLine    private readonly List<Vehicle> names = new List<Vehicle>();Di2015NewLine}Di2015NewLine
19903162Di2015UniqueSeparatorrunner[n].StepsTraveled = secondsPassed * (runner[n].StepsPerSecond);Di2015NewLine
19903162Di2015UniqueSeparatorvar runner = this runner for the thread;Di2015NewLinewhile(running) Di2015NewLine{Di2015NewLine  Thread.Sleep(runner.Seconds * 1000); // convert to millisecondsDi2015NewLine  runner.StepsTraveled += runner.Steps;  Di2015NewLine}Di2015NewLine
19903162Di2015UniqueSeparatorrunner
19903198Di2015UniqueSeparatorJArray
19903198Di2015UniqueSeparatorJToken
19903198Di2015UniqueSeparatorJToken
19903198Di2015UniqueSeparatorSelectToken
19903198Di2015UniqueSeparatorOrderByDescending(t => Convert.ToInt32(t.SelectToken("width")))Di2015NewLine
19903290Di2015UniqueSeparatorusing (var myConnection = new OleDbConnection(myConnectionString))Di2015NewLineusing (var myCommand = myConnection.CreateCommand())Di2015NewLine{Di2015NewLine    var idParam = new OleDbParameter("@id", Izbor.SelectedValue);Di2015NewLineDi2015NewLine    myCommand.CommandText = "DELETE FROM Ure WHERE (ID) = @id";Di2015NewLine    myCommand.Parameters.Add(idParam);Di2015NewLineDi2015NewLine    myConnection.Open();Di2015NewLine    myCommand.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
19903425Di2015UniqueSeparatorSearchFiles
19903425Di2015UniqueSeparatorisIdentical
19903425Di2015UniqueSeparatorfalse
19903425Di2015UniqueSeparatortrue
19903425Di2015UniqueSeparatorpublic static Boolean SearchFiles(string path1, string path2)Di2015NewLine{Di2015NewLine    // do some work to assign a value to isIdenticalDi2015NewLine    if (isIdentical == false)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19903425Di2015UniqueSeparatorpublic static void
19903425Di2015UniqueSeparatorreturn
19903425Di2015UniqueSeparatorvoid
19903425Di2015UniqueSeparatorif / else
19903425Di2015UniqueSeparatorforeach
19903425Di2015UniqueSeparatorpublic static Boolean SearchFiles(string path1, string path2)Di2015NewLine{Di2015NewLine    foreach(var item in collection)Di2015NewLine    {Di2015NewLine        // do some work to assign a value to isIdenticalDi2015NewLine        if (isIdentical == false)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    // in case the collection is empty, you need to return somethingDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
19903431Di2015UniqueSeparatorthis.TableWebView.LoadHtmlString("",null);Di2015NewLine
19903609Di2015UniqueSeparator$(document).ready(function () {Di2015NewLine    $('#demo2').change(function () {Di2015NewLine        $.blockUI({Di2015NewLine            css: {Di2015NewLine                border: 'none',Di2015NewLine                padding: '15px',Di2015NewLine                backgroundColor: '#000',Di2015NewLine                    '-webkit-border-radius': '10px',Di2015NewLine                    '-moz-border-radius': '10px',Di2015NewLine                opacity: .5,Di2015NewLine                color: '#fff'Di2015NewLine            }Di2015NewLine        });Di2015NewLineDi2015NewLine        setTimeout($.unblockUI, 2000);Di2015NewLine    });Di2015NewLine}); Di2015NewLine
19903701Di2015UniqueSeparator@xmlns:ns2
19903701Di2015UniqueSeparatorpublic void InitializePatchListArray()Di2015NewLine{Di2015NewLine  ArrayPatchList[0, 0] = "Installed Patch";Di2015NewLine  ArrayPatchList[0, 1] = "/compositeReport/eisRecommendedPatchReport/ns2:recommendedPatchList/ns2:recommendedPatch/ns2:installedPatchId";Di2015NewLine}Di2015NewLine
19903788Di2015UniqueSeparatorFile.Copy
19903788Di2015UniqueSeparatorstrFile + ".new"
19903800Di2015UniqueSeparatorstring sql = "INSERT INTO Products Di2015NewLineVALUES(NEWID(), @cName, @cType)";Di2015NewLineDi2015NewLineSqlCommand cmd = new SqlCommand(sql, conn);Di2015NewLinecmd.Parameters.AddWithValue("@cName", cur.name == null ? (object)DBNull.Value : cur.name);Di2015NewLinecmd.Parameters.AddWithValue("@cName", cur.type == null ? (object)DBNull.Value : cur.type);Di2015NewLineDi2015NewLinecmd.Execute();Di2015NewLine
19903800Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@cName", cur.type == null ? "" : cur.type);Di2015NewLine
19903820Di2015UniqueSeparatorparentRepeater.ItemTemplate = new NestedRepeaterItemTemplate(childRepeater);Di2015NewLine
19903979Di2015UniqueSeparatorElement("author")
19903979Di2015UniqueSeparatorElement("name")
19903979Di2015UniqueSeparatorentry
19903979Di2015UniqueSeparatorvar ns = "http://www.w3.org/2005/Atom"; // Just use an implicit conversionDi2015NewLinevar name = xDoc.Descendants(ns + "entry")Di2015NewLine               .First()Di2015NewLine               .Element(ns + "author")Di2015NewLine               .Element(ns + "name")Di2015NewLine               .Value;Di2015NewLine
19904021Di2015UniqueSeparatorDictionary<int, IItem>
19904021Di2015UniqueSeparatorICollection<IItem>
19904125Di2015UniqueSeparatorstatic void RunServer()Di2015NewLine        {Di2015NewLine            List<string> clientIP = new List<string>();Di2015NewLine            List<string> clientNicks = new List<string>();Di2015NewLine            string responseHandshake = "hello";Di2015NewLine            Int32 serverPort = 1336;Di2015NewLine            IPAddress machineIP = IPAddress.Parse(GetIP());Di2015NewLine            Console.Clear();Di2015NewLine            Console.WriteLine(" - Starting IlanChat server on IP {0}", machineIP);Di2015NewLine            TcpListener server = null;Di2015NewLine            server = new TcpListener(machineIP, serverPort);Di2015NewLine            server.Start();Di2015NewLine            Byte[] buffer = new Byte[256];Di2015NewLine            String data = null;Di2015NewLine            Console.WriteLine("Successfully started IlanChat server!");Di2015NewLine            while (true) // first alpha - only one user at a timeDi2015NewLine            {Di2015NewLine                Console.WriteLine();Di2015NewLine                Console.WriteLine("Waiting for connections..");Di2015NewLine                TcpClient client = server.AcceptTcpClient();Di2015NewLineDi2015NewLine                Task.Run(() => RunClient(client));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void RunClient(TcpClient client)Di2015NewLine        {Di2015NewLine            Byte[] buffer = new Byte[256];Di2015NewLine            Console.WriteLine("User connecting..");Di2015NewLine            Console.WriteLine("Receiving handshake data..");Di2015NewLine            String data = null;Di2015NewLine            string responseHandshake = "hello";Di2015NewLineDi2015NewLine            NetworkStream stream = client.GetStream();Di2015NewLine            int i;Di2015NewLine            while ((i = stream.Read(buffer, 0, buffer.Length)) != 0)Di2015NewLine            {Di2015NewLine                data = System.Text.Encoding.ASCII.GetString(buffer, 0, i);Di2015NewLine                Console.WriteLine("Received handshake data: {0}", data);Di2015NewLine                Console.WriteLine("Processing data.."); // sample handshake: - HANDSHAKE:nick:ipDi2015NewLine                string tempNick = data.Replace("HANDSHAKE:", "");Di2015NewLine                string[] userDetails = tempNick.Split(':'); // should store to 0:nick, 1:ipDi2015NewLine                Console.WriteLine("Received client nick: {0}", userDetails[0]);Di2015NewLine                Console.WriteLine("Received client IP: {0}", userDetails[1]);Di2015NewLine                break;Di2015NewLine            }Di2015NewLine            Thread.Sleep(1100); // sleepDi2015NewLine            buffer = System.Text.Encoding.ASCII.GetBytes(responseHandshake);Di2015NewLine            Console.WriteLine("Sending response handshake..");Di2015NewLine            stream.Write(buffer, 0, buffer.Length);Di2015NewLine        }Di2015NewLine
19904140Di2015UniqueSeparatorSelectList
19904140Di2015UniqueSeparator new SelectList(ViewBag.Files, "PropertyName", "protocol_site")Di2015NewLine
19904305Di2015UniqueSeparator $.ajax({Di2015NewLine    url: "script.aspx",Di2015NewLine    type: "POST",Di2015NewLine    data: { id : menuId },Di2015NewLine    sucess: funxtion(ispresent){if(ispresent)Di2015NewLine    {alert('data is present');    Di2015NewLine        } Di2015NewLine    else{alert('data is not present');    Di2015NewLineDi2015NewLine    });Di2015NewLine
19904430Di2015UniqueSeparatorDateTime
19904488Di2015UniqueSeparatorPriceLineItem
19904488Di2015UniqueSeparatorPriceLineItem
19904488Di2015UniqueSeparatorIssuePriceLineItem
19904488Di2015UniqueSeparatorDbContext
19904488Di2015UniqueSeparator modelBuilder.Entity<IssuePriceLineItem>()Di2015NewLine   .HasOptional(p => p.PriceLineItems)Di2015NewLine   .WithMany()Di2015NewLine   .HasForeignKey(c => c.ParentLineItemId);Di2015NewLine
19904488Di2015UniqueSeparator modelBuilder.Entity<IssuePriceLineItem>()Di2015NewLine   .HasOptional(p => p.ParentLineItem)Di2015NewLine   .WithMany() /* implies ICollection<PriceLineItem> PriceLineItems */Di2015NewLine   .HasForeignKey(c => c.ParentLineItemId);Di2015NewLine
19904488Di2015UniqueSeparator modelBuilder.Entity<IssuePriceLineItem>()Di2015NewLine   .HasMany(p => p.PriceLineItems)Di2015NewLine   .WithOptional() /* implies ParentLineItem navigation property */Di2015NewLine   .HasForeignKey(c => c.ParentLineItemId);Di2015NewLine
19904488Di2015UniqueSeparatorPriceLineItem
19904488Di2015UniqueSeparatorIssuePriceLineItem
19904488Di2015UniqueSeparator  modelBuilder.Entity<PriceLineItem>()Di2015NewLine    .HasOptional(p => p.ParentLineItem)Di2015NewLine    .WithMany(p => p.PriceLineItems)Di2015NewLine    .HasForeignKey(c => c.ParentLineItemId);Di2015NewLine
19904513Di2015UniqueSeparatorstruct
19904513Di2015UniqueSeparatorclass
19904524Di2015UniqueSeparatorDataContext context = new DataContext (newConnectionString);Di2015NewLine
19904582Di2015UniqueSeparatorCreateObjectContext
19904582Di2015UniqueSeparatorprotected override Connection CreateObjectContext()Di2015NewLine{  Di2015NewLine     // Start out by creating the SQL Server connection stringDi2015NewLine     SqlConnectionStringBuilder sqlBuilder = new SqlConnectionStringBuilder();Di2015NewLineDi2015NewLine     // Set the properties for the data source. The IP address network addressDi2015NewLine     sqlBuilder.DataSource = @"10.10.10.10";Di2015NewLineDi2015NewLine     // The name of the database on the serverDi2015NewLine     sqlBuilder.InitialCatalog = "Development";Di2015NewLine     sqlBuilder.IntegratedSecurity = true;Di2015NewLine     sqlBuilder.MultipleActiveResultSets = true;Di2015NewLine     sqlBuilder.ApplicationName = "EntityFramework";Di2015NewLineDi2015NewLine     // Now create the Entity Framework connection stringDi2015NewLine     EntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder();Di2015NewLineDi2015NewLine     //Set the provider name.Di2015NewLine     entityBuilder.Provider = "System.Data.SqlClient";Di2015NewLineDi2015NewLine     // Set the provider-specific connection string.Di2015NewLine     entityBuilder.ProviderConnectionString = sqlBuilder.ToString();Di2015NewLineDi2015NewLine     // Set the Metadata location. Di2015NewLine     entityBuilder.Metadata = @"res://*/Entities.Permission.csdl|res://*/Entities.Permission.ssdl|res://*/Entities.Permission.msl";Di2015NewLineDi2015NewLine     // Create and entity connectionDi2015NewLine     EntityConnection conn = new EntityConnection(entityBuilder.ToString());Di2015NewLineDi2015NewLine     return new Connection(conn);    Di2015NewLine}Di2015NewLine
19904600Di2015UniqueSeparatorvar userId = @User.Id;Di2015NewLinega('set', 'dimension1', userId);Di2015NewLine
19904763Di2015UniqueSeparatorintegration_finale.MvcApplication
19904763Di2015UniqueSeparatorMy Documents\\IISExpress\\config\\appplicationhost.config
19904763Di2015UniqueSeparator<site name="YourWebsiteName" id="1">Di2015NewLine    <application path="/" applicationPool="Clr4IntegratedAppPool">Di2015NewLine        <virtualDirectory path="/" physicalPath="C:\\Source\\WebsiteProject" />Di2015NewLine    </application>Di2015NewLine    <bindings>Di2015NewLine        <binding protocol="http" bindingInformation="*:1234:localhost" />Di2015NewLine    </bindings>Di2015NewLine</site>Di2015NewLine
19904763Di2015UniqueSeparatorphysicalPath
19904763Di2015UniqueSeparatorphysicalPath
19904763Di2015UniqueSeparatorvirtualDirectory
19904763Di2015UniqueSeparatorphysicalPath
19904763Di2015UniqueSeparatorvirtualDirectory
19904786Di2015UniqueSeparatorlock
19904786Di2015UniqueSeparatorprivate static object DatabaseLock = new object();Di2015NewLineDi2015NewLinepublic CustomObject GetObject(string username, string userTeam)Di2015NewLine{Di2015NewLine    lock (DatabaseLock)Di2015NewLine    {Di2015NewLine        int tokenID = Database.GetNextToken(username, userTeam);Di2015NewLineDi2015NewLine        MainDataLayer.LoadData loadData = new MainDataLayer.LoadData();Di2015NewLine        return loadData.GetObject (tokenID);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19904786Di2015UniqueSeparatorConcurrency
19904786Di2015UniqueSeparatorSingle
19904890Di2015UniqueSeparator<formUploadFile>Di2015NewLine    <processor type="scwffm2.Helper.LimiteFileSize, scwffm2.Helper"/>  Di2015NewLine    <processor type="Sitecore.Form.Core.Pipelines.FormUploadFile.ResolveFolder, Sitecore.Forms.Core"/>Di2015NewLine    <processor type="Sitecore.Form.Core.Pipelines.FormUploadFile.Save, Sitecore.Forms.Core"/>Di2015NewLine</formUploadFile>Di2015NewLine
19904890Di2015UniqueSeparator$.validator.addMethod('filesize', function(value, element, param) {Di2015NewLine    // param = size (en bytes) Di2015NewLine    // element = element to validate (<input>)Di2015NewLine    // value = value of the element (file name)Di2015NewLine    return this.optional(element) || (element.files[0].size <= param) Di2015NewLine});Di2015NewLineDi2015NewLine$('#inputid').validate({Di2015NewLine    rules: { input: { required: true, filesize: 1048576  }},Di2015NewLine    messages: { input: "File must be less than 1MB" }Di2015NewLine});Di2015NewLine
19904985Di2015UniqueSeparatorresultText
19904985Di2015UniqueSeparatorprivate async void buttonStringGet_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    JsonWebAsync.JsonWebClient client = new JsonWebAsync.JsonWebClient();Di2015NewLineDi2015NewLine    string result;Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        var resp = await client.DoRequestAsync("myurl");Di2015NewLine        result = resp.ReadToEnd();Di2015NewLine    }Di2015NewLine    catch (WebException ex)Di2015NewLine    {Di2015NewLine         // generic error handlingDi2015NewLine         result = string.Format("Could not get data. {0}", ex);Di2015NewLine    }Di2015NewLineDi2015NewLine    resultText.Text = result;Di2015NewLine}Di2015NewLine
19904985Di2015UniqueSeparatorprivate async void buttonStringGet_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    JsonWebAsync.JsonWebClient client = new JsonWebAsync.JsonWebClient();Di2015NewLineDi2015NewLine    string requestUrl = ComputeRequestUrl(); // I assume this code exists somewhere.Di2015NewLine    System.Diagnostics.Debug.WriteLine("Sending request for {0}", requestUrl);Di2015NewLine    var resp = await client.DoRequestAsync(requestUrl);Di2015NewLine    string result = resp.ReadToEnd();Di2015NewLine    resultText.Text = result;Di2015NewLine}Di2015NewLine
19905011Di2015UniqueSeparatorRepository<T>
19905011Di2015UniqueSeparatorFunc<T>
19905011Di2015UniqueSeparatorpublic class Repository<T> {Di2015NewLineDi2015NewLine    private Func<T> _activator;Di2015NewLineDi2015NewLine    internal Repository<T>(Func<T> activator) {Di2015NewLine        _activator = activator;Di2015NewLine    }Di2015NewLineDi2015NewLine    public T GetById<T>() {Di2015NewLine        return _activator();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19905011Di2015UniqueSeparatorRepository<T>
19905011Di2015UniqueSeparatorEntityRepository = new Repository<Entity>(() => new Entity());Di2015NewLine
19905011Di2015UniqueSeparatorFunc<T>
19905036Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    var orders = db.Orders.Include(o => o.Product)Di2015NewLine        .GroupBy(o => o.Product.Category.Name)Di2015NewLine        .Select(cat => cat.FirstOrDefault());Di2015NewLineDi2015NewLine    var products = db.Orders.Include(o => o.Product);Di2015NewLineDi2015NewLine    return View(Tuple.Create(orders.ToList(), products.ToList()));Di2015NewLine}Di2015NewLine
19905036Di2015UniqueSeparator@foreach (var item in Model.Item1) {Di2015NewLine   <table>Di2015NewLine       <tr>Di2015NewLine           <td>Di2015NewLine               @Html.DisplayFor(catName => item.Product.Category.Name)Di2015NewLine               <br />Di2015NewLineDi2015NewLine               @foreach (var product in Model.Item2)Di2015NewLine               {Di2015NewLine                  if (product.Product.Category.Name == item.Product.Category.Name)Di2015NewLine                  {Di2015NewLine                        @Html.DisplayFor(productName => product.Product.Name)Di2015NewLine                        @Html.DisplayFor(productName => product.Quantity) <br />Di2015NewLine                  }Di2015NewLine               }Di2015NewLineDi2015NewLine           </td>Di2015NewLine        </tr>Di2015NewLine   </table>Di2015NewLine}Di2015NewLine
19905046Di2015UniqueSeparatorSong
19905046Di2015UniqueSeparatorSongName
19905046Di2015UniqueSeparatorSongPath
19905046Di2015UniqueSeparatorOnPropertyChanged
19905065Di2015UniqueSeparatordouble sumP = 0;Di2015NewLinedouble sumF = 0;Di2015NewLineDi2015NewLinefor (int i = 6; i < dataGridView1.Rows.Count-1; ++i)Di2015NewLine{Di2015NewLine    if (dataGridView1.Rows[i].Cells[6].Value.Equals("P"))Di2015NewLine    {Di2015NewLine        sumP += Convert.ToDouble(dataGridView1.Rows[i].Cells[9].Value);Di2015NewLine    }Di2015NewLine    else if (dataGridView1.Rows[i].Cells[6].Value.Equals("F"))Di2015NewLine    {Di2015NewLine        sumF += Convert.ToDouble(dataGridView1.Rows[i].Cells[9].Value);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineIf(sumF>sumP)Di2015NewLine{Di2015NewLine    Label2.text="Fail";Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    label2.text="Pass";Di2015NewLine}Di2015NewLine
19905120Di2015UniqueSeparatorXmlDocument xmlDoc = new XmlDocument();Di2015NewLineserializer.Serialize(ms, obj);Di2015NewLinems.Position = 0;Di2015NewLinexmlDoc.Load(ms);Di2015NewLineDi2015NewLineXmlElement newElem = xmlDoc.CreateElement("Response");Di2015NewLineDi2015NewLine//wrong: works for only 1 child elementDi2015NewLine//kept for edit/referenceDi2015NewLine//foreach (XmlNode item in xmlDoc.DocumentElement.ChildNodes)Di2015NewLine//{Di2015NewLine//    newElem.AppendChild(item);Di2015NewLine//}Di2015NewLineDi2015NewLinewhile (xmlDoc.DocumentElement.ChildNodes.Count != 0)Di2015NewLine{Di2015NewLine    newElem.AppendChild(xmlDoc.DocumentElement.ChildNodes[0]);Di2015NewLine}Di2015NewLineDi2015NewLinexmlDoc.DocumentElement.AppendChild(newElem);Di2015NewLine
19905120Di2015UniqueSeparatorforeach
19905120Di2015UniqueSeparatorwhile
19905169Di2015UniqueSeparator<toolkit:ListPicker x:Name="lstPicker" Grid.Row="1" Margin="25,0,25,15" >Di2015NewLine    <toolkit:ListPicker.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding YourDisplayPropertyOnObject}"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </toolkit:ListPicker.ItemTemplate>Di2015NewLine</toolkit:ListPicker>Di2015NewLine
19905169Di2015UniqueSeparatorToString()
19905178Di2015UniqueSeparatorprivate void WebBrowser_DragOver(object sender, HtmlElementEventArgs e)Di2015NewLine{Di2015NewLine    panel.BringToFront();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Panel_DragLeave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    panel.SendToBack();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Panel_MouseLeave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    panel.SendToBack();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Panel_DragEnter(object sender, DragEventArgs e)Di2015NewLine{Di2015NewLine    e.Effect = DragDropEffects.Move;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Panel_DragDrop(object sender, DragEventArgs e)Di2015NewLine{Di2015NewLine    //Make dragdrop data processingDi2015NewLine}Di2015NewLine
19905574Di2015UniqueSeparatornew releases
19905574Di2015UniqueSeparatorfavorites
19905574Di2015UniqueSeparatornew releases
19905574Di2015UniqueSeparatorfavorites
19905574Di2015UniqueSeparatoradd to favorites
19905574Di2015UniqueSeparatorremove from favorites
19905574Di2015UniqueSeparatorListItem
19905574Di2015UniqueSeparatorListbox.SelectedItem
19905574Di2015UniqueSeparatorObservableCollection
19905574Di2015UniqueSeparatorBook.cs
19905574Di2015UniqueSeparator    private void favoritesListTap(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine    {Di2015NewLine        Book data = (sender as ListBox).SelectedItem as Book;Di2015NewLine        int selectedid = data.unique_id;Di2015NewLineDi2015NewLine        //Now find that item in the `new releases` list which has the same unique_id as the one we just retrivedDi2015NewLineDi2015NewLine         foreach( Book bk in newleases.Items)Di2015NewLine         {Di2015NewLine              if( bk.unique_id == selectedid)Di2015NewLine              {Di2015NewLine                 bk.SetFavoriteIcon = "addtofav.png"; Di2015NewLine                 break;Di2015NewLine              }Di2015NewLine         }Di2015NewLine     }Di2015NewLine
19905574Di2015UniqueSeparatorINotifyPropertyChanged
19905574Di2015UniqueSeparatoradd to favorite
19905606Di2015UniqueSeparatorActiveAdmins
19905606Di2015UniqueSeparatorIsAdmin
19905606Di2015UniqueSeparatorforeach
19905606Di2015UniqueSeparatorif (r.Field<string>("IsAdmin"))Di2015NewLine  if (`ActiveAdmins` <= 1)Di2015NewLine      continue;Di2015NewLine
19905627Di2015UniqueSeparatorGetCompany(id)
19905627Di2015UniqueSeparatorGetCompanyWithBranche(id,int? brandchid)
19905706Di2015UniqueSeparatorTransaction
19905706Di2015UniqueSeparatorReference
19905706Di2015UniqueSeparatorReference
19905706Di2015UniqueSeparatorReference
19905706Di2015UniqueSeparatorPayItem
19905706Di2015UniqueSeparatorEmployee
19905706Di2015UniqueSeparatorDepartment
19905733Di2015UniqueSeparatorJSON
19905733Di2015UniqueSeparatorobject
19905733Di2015UniqueSeparator  private object InvokeRest(string uri)Di2015NewLine    {Di2015NewLine        return InvokeRest(uri, null);Di2015NewLine    }Di2015NewLine    private object InvokeRest(string uri, NetworkCredential networkCredential)Di2015NewLine    {Di2015NewLine        var webRequest = WebRequest.Create(uri);Di2015NewLine        if (networkCredential!=null)Di2015NewLine            webRequest.Credentials = networkCredential;Di2015NewLine        _webResponse = webRequest.GetResponse();Di2015NewLine        var streamReader = new StreamReader(_webResponse.GetResponseStream());Di2015NewLine        var str = streamReader.ReadToEnd();Di2015NewLine        ErrorRecord exRef;Di2015NewLine        var doc = JsonObject.ConvertFromJson(str, out exRef);Di2015NewLine        return doc;Di2015NewLine    }Di2015NewLine
19905733Di2015UniqueSeparatorobject
19905733Di2015UniqueSeparatorPSObject
19905857Di2015UniqueSeparatorFrameworkElement focusedElement = FocusManager.GetFocusedElement() as FrameworkElement;Di2015NewLine        GeneralTransform focusedVisualTransform = parent.TransformToVisual(_scrollViewer);Di2015NewLineDi2015NewLineApplyHorizontalScrolling(focusedElement, focusedVisualTransform);Di2015NewLineDi2015NewLine  private void ApplyHorizontalScrolling(FrameworkElement focusedElement, GeneralTransform focusedVisualTransform)Di2015NewLine    {Di2015NewLine        Rect rectangle = focusedVisualTransform.TransformBounds(new Rect(new Point(focusedElement.Margin.Left, focusedElement.Margin.Top), focusedElement.RenderSize));Di2015NewLine        double horizontalOffset = _scrollViewer.HorizontalOffset + (rectangle.Left);Di2015NewLine        _scrollViewer.ChangeView(horizontalOffset, 0, _scrollViewer.ZoomFactor);Di2015NewLine    }Di2015NewLine
19905984Di2015UniqueSeparatortemplate: '<input type="button" data-id=ID value="Delete" class="popupbutton" id="delButton" onclick="javascript:CheckAck(this);" id="Delete" /><br/>Di2015NewLine
19906093Di2015UniqueSeparatorVerified
19906585Di2015UniqueSeparatorint c;Di2015NewLine
19906585Di2015UniqueSeparatorint c = new int();Di2015NewLine
19906585Di2015UniqueSeparatorint c = 0;Di2015NewLine
19906585Di2015UniqueSeparatorint c;Di2015NewLineint a = c;Di2015NewLine
19906585Di2015UniqueSeparatorint c = 0; // try = new int(); as well if you want toDi2015NewLineint a = c;Di2015NewLine
19906586Di2015UniqueSeparatortrim
19906586Di2015UniqueSeparatorint cas = chk.CompareTo(vchk);Di2015NewLine
19906586Di2015UniqueSeparatorint cas = chk.Trim().CompareTo(vchk.Trim());Di2015NewLine
19906625Di2015UniqueSeparator...Di2015NewLinevar pId = System.Diagnostics.Process.GetCurrentProcess().Id;Di2015NewLinefileLogRoot.File = string.Format(@"C:\\Log\\MyLogFile.{0}.txt", pId);Di2015NewLine...        Di2015NewLine
19906729Di2015UniqueSeparatorx.Documents.Attributes["key"].Equals("15");Di2015NewLine
19906729Di2015UniqueSeparatorx.Documents.Attributes["key"].ToString() == "15";Di2015NewLine
19906729Di2015UniqueSeparatorToString()
19906729Di2015UniqueSeparatorObject
19906729Di2015UniqueSeparatorToString()
19906733Di2015UniqueSeparatordecimal.Parse(s, System.Globalization.CultureInfo.InvariantCulture)
19906756Di2015UniqueSeparatorServiceExceptionHandler
19906756Di2015UniqueSeparatorServiceExceptionHandler += (httpReq, request, exception) => { .. }Di2015NewLine
19906811Di2015UniqueSeparatortypes
19906811Di2015UniqueSeparatorselect id, name, al, cl, slDi2015NewLinefromDi2015NewLine(Di2015NewLine  select e.id, e.name, lt.type, l.days Di2015NewLine  from tblEmp eDi2015NewLine  left outer join tblEmpLeaves l Di2015NewLine    on e.id = l.empIdDi2015NewLine  left outer join tblLeaveType lt Di2015NewLine    on l.leaveId = lt.IdDi2015NewLine) dDi2015NewLinepivotDi2015NewLine(Di2015NewLine  max(days)Di2015NewLine  for type in (al, cl, sl)Di2015NewLine) pivDi2015NewLineorder by id;Di2015NewLine
19906811Di2015UniqueSeparatorDECLARE @cols AS NVARCHAR(MAX),Di2015NewLine    @query  AS NVARCHAR(MAX)Di2015NewLineDi2015NewLineselect @cols = STUFF((SELECT distinct ',' + QUOTENAME(type) Di2015NewLine                    from tblLeaveTypeDi2015NewLine            FOR XML PATH(''), TYPEDi2015NewLine            ).value('.', 'NVARCHAR(MAX)') Di2015NewLine        ,1,1,'')Di2015NewLineDi2015NewLineset @query = 'SELECT id, name,' + @cols + ' Di2015NewLine            from Di2015NewLine            (Di2015NewLine              select e.id, e.name, lt.type, l.days Di2015NewLine              from tblEmp eDi2015NewLine              left outer join tblEmpLeaves l Di2015NewLine                on e.id = l.empIdDi2015NewLine              left outer join tblLeaveType lt Di2015NewLine                on l.leaveId = lt.IdDi2015NewLine            ) xDi2015NewLine            pivot Di2015NewLine            (Di2015NewLine                max(days)Di2015NewLine                for type in (' + @cols + ')Di2015NewLine            ) p Di2015NewLine            order by id'Di2015NewLineDi2015NewLineexecute sp_executesql @query;Di2015NewLine
19906811Di2015UniqueSeparator| ID |  NAME |     AL |     CL |     SL |Di2015NewLine|----|-------|--------|--------|--------|Di2015NewLine|  1 |  john |      5 |      2 | (null) |Di2015NewLine|  2 | smith |      3 | (null) | (null) |Di2015NewLine|  3 |  jack | (null) | (null) |      4 |Di2015NewLine
19906878Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine    {Di2015NewLine        grdCommunication.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19906936Di2015UniqueSeparatorif
19906936Di2015UniqueSeparator@foreach (var item1 in Model.Item1)Di2015NewLine{Di2015NewLine    <tr>    Di2015NewLine        <td>Di2015NewLine            <h3>@Html.DisplayFor(catName => item1.Product.Category.Name)</h3>Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLineDi2015NewLine    foreach (var item2 in Model.Item2)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
19907115Di2015UniqueSeparator<script src="<%= Page.ResolveUrl("~/Scripts/bootstrap.js") %>" type="text/javascript"></script>Di2015NewLine
19907115Di2015UniqueSeparator<script src="<your page root>/Scripts/bootstrap.js" type="text/javascript"></script>Di2015NewLine
19907185Di2015UniqueSeparatorpublic class LargerThanAttribute: ValidationAttribute, IClientValidatableDi2015NewLine{Di2015NewLine     private string _listPropertyName { get; set; }Di2015NewLineDi2015NewLine     public LargerThanAttribute(string listPropertyName)Di2015NewLine     {Di2015NewLine         this._listPropertyName = listPropertyName;Di2015NewLine     }Di2015NewLineDi2015NewLine     protected override ValidationResult IsValid(object value, ValidationContext validationContext)Di2015NewLine     {Di2015NewLine        if(value == null)Di2015NewLine            return new ValidationResult("Not a valid value");Di2015NewLineDi2015NewLine        var listProperty = validationContext.ObjectInstance.GetType().GetProperty(_listPropertyName);Di2015NewLine        double propValue = Convert.ToDouble(listProperty.GetValue(validationContext.ObjectInstance, null));Di2015NewLineDi2015NewLine        if(propValue <= Convert.ToDouble(value))Di2015NewLine            return ValidationResult.Success;Di2015NewLineDi2015NewLine        return new ValidationResult("End value is smaller than start value");Di2015NewLine    }Di2015NewLine}Di2015NewLine
19907185Di2015UniqueSeparatorpublic double ForatFrom { get; set; }Di2015NewLineDi2015NewLine[LargerThan("ForatFrom")]Di2015NewLinepublic double ForatTo { get; set; }Di2015NewLine
19907375Di2015UniqueSeparator"some, text","Other text"Di2015NewLine
19907375Di2015UniqueSeparator"some, text",<space>"Other text"Di2015NewLine
19907428Di2015UniqueSeparatorvar retailer = retailersListToIterate.Where(i => i.Id == weeklyRetailer.RetailerId);Di2015NewLine
19907428Di2015UniqueSeparatorRetailer
19907428Di2015UniqueSeparatorIEnumerable<Retailer>
19907428Di2015UniqueSeparatorElementAt(0)
19907428Di2015UniqueSeparatorvar retailer = retailersListToIterate.SingleOrDefault(i => i.Id == weeklyRetailer.RetailerId);Di2015NewLine
19907428Di2015UniqueSeparatorRetailer
19907428Di2015UniqueSeparatornull
19907428Di2015UniqueSeparatorID
19907428Di2015UniqueSeparatorwhere myListOfIds.Contains(i.Id)
19907428Di2015UniqueSeparatorSELECT FROM IN(ID1, ID2 ...)
19907475Di2015UniqueSeparatorgridControl1.DataSource = new List<Person> { Di2015NewLine    new Person(){ Name="John Smith"},Di2015NewLine    new Person(){ Name="Mary Smith"}Di2015NewLine};Di2015NewLinegridView1.OptionsBehavior.Editable = false; // disable editingDi2015NewLinegridView1.RowCellClick += gridView1_RowCellClick;Di2015NewLine//...Di2015NewLinevoid gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e) {Di2015NewLine    if(e.Clicks == 2) { // Double ClickDi2015NewLine        object cellValue = e.CellValue;Di2015NewLine        //do some stuffDi2015NewLine    }Di2015NewLine}Di2015NewLine//...Di2015NewLineclass Person {Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLine
19907482Di2015UniqueSeparatorsetVisibility(false);Di2015NewLine
19907482Di2015UniqueSeparatorthis.setVisibility(false);Di2015NewLine
19907482Di2015UniqueSeparatorthis
19907482Di2015UniqueSeparatorstatic
19907633Di2015UniqueSeparatorToString
19907633Di2015UniqueSeparatorBubbleSort
19907633Di2015UniqueSeparatorBubbleSort
19907633Di2015UniqueSeparatorclass BubbleSort :  ISortAlgorithm<int>Di2015NewLine{Di2015NewLine   private int[] myArray;Di2015NewLine   public void Sort (int[] array)     Di2015NewLine    {Di2015NewLine        myArray = array;Di2015NewLine        int temp;Di2015NewLine        for (int j = 1; j <= array.Length - 2; j++)Di2015NewLine        {Di2015NewLine            for (int i = 0; i <= array.Length - 2; i++)Di2015NewLine            {Di2015NewLine                if (array[i] > array[i + 1])Di2015NewLine                {Di2015NewLine                    temp = array[i + 1];Di2015NewLine                    array[i + 1] = array[i];Di2015NewLine                    array[i] = temp;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        foreach(int i in myArray)Di2015NewLine        {Di2015NewLine            sb.Append(Convert.ToString(i));Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine
19907765Di2015UniqueSeparatordynamic ds = this.DataSource;Di2015NewLineConsole.WriteLine(ds.First().Member); //compiles and works or fails at runtimeDi2015NewLine
19907765Di2015UniqueSeparatordynamic
19907800Di2015UniqueSeparatorpublic T FindElementByName<T>(FrameworkElement element, string sChildName) where T : FrameworkElementDi2015NewLine    {Di2015NewLine            T childElement = null;Di2015NewLine            var nChildCount = VisualTreeHelper.GetChildrenCount(element);Di2015NewLine            for (int i = 0; i < nChildCount; i++)Di2015NewLine            {Di2015NewLine                FrameworkElement child = VisualTreeHelper.GetChild(element, i) as FrameworkElement;Di2015NewLineDi2015NewLine                if (child == null)Di2015NewLine                    continue;Di2015NewLineDi2015NewLine                if (child is T && child.Name.Equals(sChildName))Di2015NewLine                {Di2015NewLine                    childElement = (T)child;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLineDi2015NewLine                childElement = FindElementByName<T>(child, sChildName);Di2015NewLineDi2015NewLine                if (childElement != null)Di2015NewLine                    break;Di2015NewLine            } Di2015NewLine            return childElement;Di2015NewLine    }Di2015NewLine
19907800Di2015UniqueSeparator private void Button_OnClick(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        var element = FindElementByName<ComboBox>(ccBloodGroup, "cbBloodGroup");Di2015NewLine    }Di2015NewLine
19907846Di2015UniqueSeparatorcursor position
19907846Di2015UniqueSeparatorthis.Cursor = new Cursor(Cursor.Current.Handle);Di2015NewLineCursor.Position = new Point(Cursor.Position.X - 50, Cursor.Position.Y - 50);Di2015NewLineCursor.Clip = new Rectangle(this.Location, this.Size);Di2015NewLine
19907883Di2015UniqueSeparator{controller}/{action}/{id}
19907883Di2015UniqueSeparatorapi/{controller}/{id}
19907883Di2015UniqueSeparator    protected void Application_Start()Di2015NewLine    {Di2015NewLine        AreaRegistration.RegisterAllAreas();Di2015NewLine        GlobalConfiguration.Configure(WebApiConfig.Register);Di2015NewLineDi2015NewLine        RouteConfig.RegisterRoutes(RouteTable.Routes);Di2015NewLine        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);Di2015NewLine        BundleConfig.RegisterBundles(BundleTable.Bundles);Di2015NewLine    }Di2015NewLine
19908110Di2015UniqueSeparatorExpandoObject
19908110Di2015UniqueSeparatordynamic obj = new ExpandoObject();Di2015NewLineobj.Type = "123";//Create Type property dynamicallyDi2015NewLineConsole.WriteLine(obj.Type);//Access dynamically created Type propertyDi2015NewLine
19908113Di2015UniqueSeparatorstring dateString = "01 01 1992";Di2015NewLinestring format = "MM dd yyyy";Di2015NewLineDi2015NewLineDateTime dateTime = DateTime.ParseExact(dateString, format, CultureInfo.InvariantCulture);Di2015NewLine
19908113Di2015UniqueSeparatorDateTime dt = DateTime.Today; // or initialize it as before, with the parsing (but just a regular DateTime dt = DateTime.Parse() or something quite similar)Di2015NewLine
19908113Di2015UniqueSeparatorString formatString = "MM dd YY";Di2015NewLineString.Format("{0:"+ formatString+"}", dt);Di2015NewLine
19908276Di2015UniqueSeparatormaxReceivedMessageSize=""
19908304Di2015UniqueSeparatorList.FindIndex
19908304Di2015UniqueSeparatorEnumerable.Select
19908304Di2015UniqueSeparatorIEnumerable<int> allIndices = myListDi2015NewLine    .Select((item, index) => new { item, index })Di2015NewLine    .Where(x => (x.item <= -Math.PI / 3) || (x.item >= Math.PI / 3))Di2015NewLine    .Select(x => x.index);Di2015NewLine
19908338Di2015UniqueSeparator.edmx
19908338Di2015UniqueSeparatorAssociation
19908338Di2015UniqueSeparator<Association Name="FK_Table1ID">Di2015NewLine          <End Role="Table1" Type="XOneModel.Store.Table1" Multiplicity="1" />Di2015NewLine          <End Role="Table2" Type="XOneModel.Store.Table2" Multiplicity="0..1" />Di2015NewLine          <ReferentialConstraint>Di2015NewLine            <Principal Role="Table1">Di2015NewLine              <PropertyRef Name="id" />Di2015NewLine            </Principal>Di2015NewLine            <Dependent Role="Table2">Di2015NewLine              <PropertyRef Name="Table1Id" />Di2015NewLine            </Dependent>Di2015NewLine          </ReferentialConstraint>Di2015NewLine        </Association>Di2015NewLine
19908338Di2015UniqueSeparatorTable2
19908338Di2015UniqueSeparatorTable1
19908692Di2015UniqueSeparatorView
19908692Di2015UniqueSeparatorreturn View((object)json)Di2015NewLine
19908819Di2015UniqueSeparator<component>
19908819Di2015UniqueSeparator<component>                 <!-- NOTE: I'm omitting the attributes. See docs for details on these. -->Di2015NewLine       <property ...../>Di2015NewLine       <many-to-one .... />Di2015NewLine       ........Di2015NewLine</component>Di2015NewLine
19908819Di2015UniqueSeparatorproperty
19908819Di2015UniqueSeparatormany-to-one
19908819Di2015UniqueSeparatormany-to-one
19908941Di2015UniqueSeparatorDateTime
19908941Di2015UniqueSeparatorvar today = DateTime.Now;Di2015NewLinevar tomorrow = today.AddDays(1);Di2015NewLine
19908941Di2015UniqueSeparatorDateTime
19908941Di2015UniqueSeparatorvar calc = new Calculator(1);Di2015NewLinecalc.Add(1);Di2015NewLinecalc.PrintCurrentValue(); // imaginary method for printing of a current value of equationDi2015NewLine
19908943Di2015UniqueSeparatorrunat="server"
19908943Di2015UniqueSeparatorHtmlControl
19908943Di2015UniqueSeparatorDropDownList
19908943Di2015UniqueSeparator<div class="ui-widget">Di2015NewLine    <asp:DropDownList id="Select1" OnSelectedIndexChanged="Select1_SomethingChange" runat="server">Di2015NewLine        <asp:ListItem Selected="True" Value="White"> White </asp:ListItem>Di2015NewLine        <asp:ListItem Value="Select one...">Select one...</asp:ListItem>Di2015NewLine        <asp:ListItem Value="ActionScript">ActionScript</asp:ListItem>Di2015NewLine        <asp:ListItem Value="AppleScript">AppleScript</asp:ListItem>Di2015NewLine        <asp:ListItem Value="Asp">Asp</asp:ListItem>Di2015NewLine        <asp:ListItem Value="BASIC">BASIC</asp:ListItem>Di2015NewLine    </asp:DropDownList>Di2015NewLine</div>Di2015NewLine
19909003Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections.ObjectModel;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Xml;Di2015NewLineusing System.Xml.Linq;Di2015NewLineDi2015NewLinenamespace ProgramDi2015NewLine{Di2015NewLine    public class ContactPersonTypeDi2015NewLine    {Di2015NewLine        public string ID { get; set; }Di2015NewLine        public string Name { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ContactPersonDi2015NewLine    {Di2015NewLine        public ContactPersonType JobRole { get; set; }Di2015NewLineDi2015NewLine        public static ObservableCollection<ContactPerson> GetContactPerson()Di2015NewLine        {Di2015NewLine            var contactPersons = new ObservableCollection<ContactPerson>();Di2015NewLine            XElement doc = XElement.Load("contactpersoon.xml");Di2015NewLine            var contacts = doc.Elements("contact");Di2015NewLineDi2015NewLine            for (int i = 0; i < contacts.Count(); i++)Di2015NewLine            {Di2015NewLine                contactPersons.Add(new ContactPersonDi2015NewLine                {Di2015NewLine                    JobRole = new ContactPersonTypeDi2015NewLine                    {Di2015NewLine                        ID = i.ToString(),Di2015NewLine                        Name = contacts.ElementAt(i).Element("jobrole").ValueDi2015NewLine                    }Di2015NewLine                });Di2015NewLine            }Di2015NewLineDi2015NewLine            return contactPersons;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19909011Di2015UniqueSeparatorpublic class ModelTestCaseSourceDi2015NewLine{Di2015NewLine    public IEnumerable<TestCaseData> GetTestCases()Di2015NewLine    {Di2015NewLine        DataTable dt = DataTable.New.ReadCsv(@"C:\\datafolder\\regdata.csv");Di2015NewLineDi2015NewLine        foreach (Row row in dt.Rows)Di2015NewLine        {Di2015NewLine            var registrationData = new RegistrationData();Di2015NewLineDi2015NewLine            registrationData.setfirstName(row["FirstName"]);Di2015NewLine            registrationData.setfirstName(row["LastName"]);Di2015NewLine            registrationData.setPhone(row["Phone"]);Di2015NewLine            registrationData.setUserName(row["UserName"]);Di2015NewLine            registrationData.setAddress1(row["Add1"]);Di2015NewLine            registrationData.setAddress2(row["Add2"]);Di2015NewLine            registrationData.setCity(row["City"]);Di2015NewLine            registrationData.setState(row["State"]);Di2015NewLine            registrationData.setPostalcode(row["Postalcode"]);Di2015NewLine            registrationData.setCountry(row["Country"]);Di2015NewLine            registrationData.setEmail(row["Email"]);Di2015NewLine            registrationData.setPassword(row["Password"]);Di2015NewLine            registrationData.setConfimPassword(row["Cpassword"]);Di2015NewLineDi2015NewLine            yield return new TestCaseData(new object[] { registrationData });Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19909011Di2015UniqueSeparator[Test, TestCaseSource(typeof(ModelTestCaseSource), "GetTestCases")]Di2015NewLinepublic void RegisterUserTest(RegistrationData registrationData)Di2015NewLine{Di2015NewLineDi2015NewLine    RegisterNewUser registration = new RegisterNewUser(this.driver);Di2015NewLine    this.driver.Navigate().GoToUrl(baseURL + "/mercuryregister.php");Di2015NewLineDi2015NewLine    registration.registerNewUser(registrationData);Di2015NewLine}Di2015NewLine
19909076Di2015UniqueSeparatorParse
19909076Di2015UniqueSeparatorBinding
19909076Di2015UniqueSeparatorBinding bind = new Binding("Text", yourObject, "DecimalProperty");Di2015NewLinebind.Parse += (s,e) => {Di2015NewLine  if((string)e.Value == "") e.Value = default(decimal?);Di2015NewLine  else e.Value = decimal.Parse((string)e.Value);Di2015NewLine};Di2015NewLinetextBox1.DataBindings.Add(bind);Di2015NewLine
19909076Di2015UniqueSeparatordecimal
19909095Di2015UniqueSeparatorHubCallerContext
19909095Di2015UniqueSeparatorIPrincipal
19909095Di2015UniqueSeparator.IsInRole("admin")
19909095Di2015UniqueSeparatorIRequest
19909095Di2015UniqueSeparator[Test]Di2015NewLinepublic void IsAdmin_CalledByAdmin_ReturnTrue()Di2015NewLine{Di2015NewLine    UserService userService = new UserService();Di2015NewLine    var principalMock = new Mock<IPrincipal>();Di2015NewLine    principalMock.Setup(x => x.IsInRole("admin")).Returns(true);Di2015NewLine    var requestMock = new Mock<IRequest>();Di2015NewLine    requestMock.Setup(x => x.User).Returns(principalMock.Object);Di2015NewLine    var result = userService.IsAdmin(new HubCallerContext(requestMock.Object, ""));Di2015NewLine    Assert.IsTrue( result, "Something is wrong." );Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void IsAdmin_CalledByUser_ReturnFalse()Di2015NewLine{Di2015NewLine    UserService userService = new UserService();Di2015NewLine    var principalMock = new Mock<IPrincipal>();Di2015NewLine    principalMock.Setup(x => x.IsInRole("admin")).Returns(false);Di2015NewLine    var requestMock = new Mock<IRequest>();Di2015NewLine    requestMock.Setup(x => x.User).Returns(principalMock.Object);Di2015NewLine    var result = userService.IsAdmin(new HubCallerContext(requestMock.Object, ""));Di2015NewLine    Assert.IsFalse( result, "Something is wrong." );Di2015NewLine}Di2015NewLine
19909134Di2015UniqueSeparatorpath1
19909134Di2015UniqueSeparatorDirectorySeparatorChar
19909134Di2015UniqueSeparatorpath1
19909134Di2015UniqueSeparatorTempSave[0]
19909134Di2015UniqueSeparator..\\..\\
19909134Di2015UniqueSeparatorstring desiredPath = Path.Combine(Application.UserAppDataPath, @"..\\..\\");Di2015NewLine
19909200Di2015UniqueSeparatorOpenNETCF.Media.WaveAudio
19909200Di2015UniqueSeparatorOpenNETCF.dll
19909200Di2015UniqueSeparatorwindows-phone
19909236Di2015UniqueSeparatorpublic static IEnumerable<Control>Di2015NewLine    FindControlByAttribute(this Control control, string key)Di2015NewLine{Di2015NewLine    var current = control as System.Web.UI.HtmlControls.HtmlControl;Di2015NewLine    if (current != null)Di2015NewLine    {Di2015NewLine        var k = current.Attributes[key];Di2015NewLine        if (k != null)Di2015NewLine            yield return current;Di2015NewLine    }Di2015NewLine    if (control.HasControls())Di2015NewLine    {Di2015NewLine        foreach (Control c in control.Controls)Di2015NewLine        {Di2015NewLine            foreach (Control item in c.FindControlByAttribute(key, value))Di2015NewLine            {Di2015NewLine                yield return item;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19909236Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var controls = thisDi2015NewLine        .FindControlByAttribute("data-id")Di2015NewLine        .ToList();Di2015NewLine}Di2015NewLine
19909236Di2015UniqueSeparatorpublic static IEnumerable<Control>Di2015NewLine    FindControlByAttribute(this Control control, string key, string value)Di2015NewLine{Di2015NewLine    var current = control as System.Web.UI.HtmlControls.HtmlControl;Di2015NewLine    if (current != null)Di2015NewLine    {Di2015NewLine        var k = current.Attributes[key];Di2015NewLine        if (k != null && k == value)Di2015NewLine            yield return current;Di2015NewLine    }Di2015NewLine    if (control.HasControls())Di2015NewLine    {Di2015NewLine        foreach (Control c in control.Controls)Di2015NewLine        {Di2015NewLine            foreach (Control item in c.FindControlByAttribute(key, value))Di2015NewLine            {Di2015NewLine                yield return item;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19909298Di2015UniqueSeparatorpublic abstract class ViewModel<T>Di2015NewLine    where T : EntityModel, new()Di2015NewLine{Di2015NewLine    public static ViewModel<T> FromEntity(T entity)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class EntityModelDi2015NewLine{Di2015NewLine    //... properties, methods etc...Di2015NewLine}Di2015NewLine
19909454Di2015UniqueSeparatorpublic ActionResult RecordBusinesses(FormCollection collection)Di2015NewLine{Di2015NewLine    foreach (var item in collection.GetValues("mycheckboxlist"))Di2015NewLine    {Di2015NewLine        ...Di2015NewLine        return PartialView("_mypartialview", modelentity);Di2015NewLine    }Di2015NewLine    return PartialView("_mypartialview");Di2015NewLine}Di2015NewLine
19909454Di2015UniqueSeparatorreturn
19909454Di2015UniqueSeparatorfor(int i = 0; i <= 10; i++)Di2015NewLine{Di2015NewLine    Console.WriteLine(i);Di2015NewLine    return i;Di2015NewLine}Di2015NewLine
19909454Di2015UniqueSeparator0
19909454Di2015UniqueSeparatorfor (int i = 0; i <= 10; i++)Di2015NewLine{Di2015NewLine    yield return i;Di2015NewLine}Di2015NewLine
19909454Di2015UniqueSeparatorpublic ActionResult RecordBusinesses(FormCollection collection)Di2015NewLine{Di2015NewLine    List<Entity> myEntities = ...;Di2015NewLine    foreach (var item in collection.GetValues("mycheckboxlist"))Di2015NewLine    {Di2015NewLine        ...Di2015NewLine        myEntities.Add(new ...);Di2015NewLine    }Di2015NewLine    return View("SomeContainerView", myEntities);Di2015NewLine}Di2015NewLine
19909454Di2015UniqueSeparator@model System.Collections.Generic.List<Entity>Di2015NewLineDi2015NewLine@foreach (var entity in Model)Di2015NewLine{Di2015NewLine     @Html.RenderPartial("_mypartialview", entity)Di2015NewLine}Di2015NewLine
19909570Di2015UniqueSeparatorCreateProperties
19909570Di2015UniqueSeparatorpublic class CustomPropertySortContractResolver : DefaultContractResolverDi2015NewLine{Di2015NewLine    private const int MaxPropertiesPerContract = 1000;Di2015NewLineDi2015NewLine    protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)Di2015NewLine    {Di2015NewLine        var members = GetSerializableMembers(type);Di2015NewLine        if (members == null)Di2015NewLine        {Di2015NewLine            throw new JsonSerializationException("Null collection of serializable members returned.");Di2015NewLine        }Di2015NewLineDi2015NewLine        return members.Select(member => CreateProperty(member, memberSerialization))Di2015NewLine                      .Where(x => x != null)Di2015NewLine                      .OrderBy(p => (p.OrderDi2015NewLine                                       + (MaxPropertiesPerContract * GetTypeDepth(p.DeclaringType))) Di2015NewLine                                    ?? -1)Di2015NewLine                      .ToList();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static int GetTypeDepth(Type type)Di2015NewLine    {Di2015NewLine        int depth = 0;Di2015NewLine        while ((type = type.BaseType) != null)Di2015NewLine        {Di2015NewLine            depth++;Di2015NewLine        }Di2015NewLineDi2015NewLine        return depth;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19909613Di2015UniqueSeparatorpublic class ScrollViewerWithTouch : ScrollViewer   Di2015NewLine{Di2015NewLine      /// <summary>Di2015NewLine      /// Original panning mode.Di2015NewLine      /// </summary>Di2015NewLine      private PanningMode panningMode;Di2015NewLineDi2015NewLine  /// <summary>Di2015NewLine  /// Set panning mode only once.Di2015NewLine  /// </summary>Di2015NewLine  private bool panningModeSet;Di2015NewLineDi2015NewLine  /// <summary>Di2015NewLine  /// Initializes static members of the <see cref="ScrollViewerWithTouch"/> class.Di2015NewLine  /// </summary>Di2015NewLine  static ScrollViewerWithTouch()Di2015NewLine  {Di2015NewLine     DefaultStyleKeyProperty.OverrideMetadata(typeof(ScrollViewerWithTouch), new FrameworkPropertyMetadata(typeof(ScrollViewerWithTouch)));Di2015NewLine  }Di2015NewLineDi2015NewLine  protected override void OnManipulationCompleted(ManipulationCompletedEventArgs e)Di2015NewLine  {Di2015NewLine     base.OnManipulationCompleted(e);Di2015NewLineDi2015NewLine     // set it backDi2015NewLine     this.PanningMode = this.panningMode;Di2015NewLine  }Di2015NewLineDi2015NewLine  protected override void OnManipulationStarted(ManipulationStartedEventArgs e)Di2015NewLine  {Di2015NewLine     // figure out what has the user touchedDi2015NewLine     var result = VisualTreeHelper.HitTest(this, e.ManipulationOrigin);Di2015NewLine     if (result != null && result.VisualHit != null)Di2015NewLine     {Di2015NewLine        var hasButtonParent = this.HasButtonParent(result.VisualHit);Di2015NewLineDi2015NewLine        // if user touched a button then turn off panning mode, let style bubble down, in other case let it scrollDi2015NewLine        this.PanningMode = hasButtonParent ? PanningMode.None : this.panningMode;Di2015NewLine     }Di2015NewLineDi2015NewLine     base.OnManipulationStarted(e);Di2015NewLine  }Di2015NewLineDi2015NewLine  protected override void OnTouchDown(TouchEventArgs e)Di2015NewLine  {Di2015NewLine     // store panning mode or set it back to it's original state. OnManipulationCompleted does not do it every time, so we need to set it once more.Di2015NewLine     if (this.panningModeSet == false)Di2015NewLine     {Di2015NewLine        this.panningMode = this.PanningMode;Di2015NewLine        this.panningModeSet = true;Di2015NewLine     }Di2015NewLine     elseDi2015NewLine     {Di2015NewLine        this.PanningMode = this.panningMode;Di2015NewLine     }Di2015NewLineDi2015NewLine     base.OnTouchDown(e);         Di2015NewLine  }Di2015NewLineDi2015NewLine  private bool HasButtonParent(DependencyObject obj)Di2015NewLine  {Di2015NewLine     var parent = VisualTreeHelper.GetParent(obj);Di2015NewLineDi2015NewLine     if ((parent != null) && (parent is ButtonBase) == false)Di2015NewLine     {Di2015NewLine        return HasButtonParent(parent);Di2015NewLine     }Di2015NewLineDi2015NewLine     return parent != null;Di2015NewLine  }Di2015NewLine}Di2015NewLine
19909671Di2015UniqueSeparatorGetEnumValues
19909671Di2015UniqueSeparatorArray
19909671Di2015UniqueSeparatorIEnumerable<T>
19909671Di2015UniqueSeparator(IEnumerable<T>)Enum.GetValues(enumType);Di2015NewLine
19909727Di2015UniqueSeparatorpublic static class MyExtDi2015NewLine{Di2015NewLine    public static void MyExtension(this object obj)Di2015NewLine    {Di2015NewLine        //Do somethingDi2015NewLine    }Di2015NewLine}    Di2015NewLinepublic static void Main()Di2015NewLine{Di2015NewLine    object obj = new object();Di2015NewLine    obj.MyExtension();Di2015NewLine    //Above line gets compiled into MyExt.MyExtension(obj);Di2015NewLine}Di2015NewLine
19909727Di2015UniqueSeparatorobj.MyExtension();
19909727Di2015UniqueSeparatorMyExt.MyExtension(obj);
19909727Di2015UniqueSeparatorstatic
19909782Di2015UniqueSeparatorSystem.DirectoryServices.AccountManagement
19909782Di2015UniqueSeparatorusing(PrincipalContext principalContext = new PrincipalContext(ContextType.Domain, (server + ":" + port), loginUsername, loginPassword))Di2015NewLine{Di2015NewLine    //This will force the connection to the server and validate that the credentials are goodDi2015NewLine    //If the connection is good but the credentals are bad it will return "false", if the connection is bad it will throw a exception of some form.Di2015NewLine    if(principalContext.ValidateCredentials(null, null))Di2015NewLine    {Di2015NewLine        // Rest of code here.Di2015NewLineDi2015NewLine        //This is how you do the same check you where doing in your previous quesiton, notice that this is "userName", and "password" not "loginUsername" and "loginPassword"Di2015NewLine        valid = principalContext.ValidateCredentials(userName,password);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
19909857Di2015UniqueSeparatorToString()
19909857Di2015UniqueSeparatorToList()
19909857Di2015UniqueSeparatorvar venue = context.VenueEntitySet.FirstOrDefault(r => r.Venue == venueName))
19909857Di2015UniqueSeparator        var query = from band in context.BandsEntitySetDi2015NewLine                    //not sure the join makes sense. How come every band has a VenueName?Di2015NewLine                    //join venue in context.VenueEntitySet Di2015NewLine                    //on band.VenueName equals venue.NameDi2015NewLine                    //surely there should be a navigation propertyDi2015NewLine                    from venue in band.Venues //using a navigation propertyDi2015NewLine                    where band.ID == 12345Di2015NewLine                    select new { Di2015NewLine                                   BandName = band.Name, Di2015NewLine                                   VenueName = venue.Name, Di2015NewLine                                   PlayDate = venue.PlayDate, Di2015NewLine                                   Address = venue.Address Di2015NewLine                               };Di2015NewLineDi2015NewLine        foreach (var item in query)Di2015NewLine        {                Di2015NewLine            Debug.WriteLine(item.BandName + " is playing in " Di2015NewLine                           + item.VenueName + " on the " + item.PlayDate);Di2015NewLine            Debug.WriteLine("The address of " + item.VenueName + " is " + item.Address);Di2015NewLineDi2015NewLine        }Di2015NewLine
19909859Di2015UniqueSeparator(int)dr.GetDecimal(dr.GetOrdinal("MyCol"))Di2015NewLine
19909962Di2015UniqueSeparatorstring
19909962Di2015UniqueSeparatorprotected string DisplayRespiteDate(object stepRespiteDay)Di2015NewLine{Di2015NewLine    DateTime theDate;Di2015NewLineDi2015NewLine    // Attempt to cast object to DateTimeDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        theDate = (DateTime)stepRespiteDay;Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLine        // Do something with failed conversion here, throw for exampleDi2015NewLine        throw;Di2015NewLine    }Di2015NewLineDi2015NewLine    return theDate.ToString("dddd dd MMMM yyyy");Di2015NewLine}Di2015NewLine
19909962Di2015UniqueSeparator<asp:Label ID="RespiteDay" runat="server" Di2015NewLine           Text='<%# DisplayRespiteDate(Eval("StepRespiteDay"))%>'   Di2015NewLine</asp:Label>Di2015NewLine
19910014Di2015UniqueSeparatorClass1
19910014Di2015UniqueSeparatorClass2
19910014Di2015UniqueSeparatorprivate Class1 _c1;Di2015NewLineDi2015NewLinepublic Class2 (Class1 c1)Di2015NewLine{Di2015NewLine    _c1 = c1;Di2015NewLine}Di2015NewLine
19910014Di2015UniqueSeparator_c1.GetFieldValueDi2015NewLine
19910014Di2015UniqueSeparatorGetFieldValue
19910014Di2015UniqueSeparatorpublic
19910014Di2015UniqueSeparatorinternal
19910014Di2015UniqueSeparatorClass2
19910014Di2015UniqueSeparatorvar c2 = new Class2(c1);Di2015NewLine
19910014Di2015UniqueSeparatorc1
19910014Di2015UniqueSeparatorClass1
19910162Di2015UniqueSeparator@Html.HiddenFor(m => m.FoodName)Di2015NewLine
19910162Di2015UniqueSeparatorFoodName
19910162Di2015UniqueSeparator$('#{name_of_elem}').change(function() {Di2015NewLine    // set yourVal somehow hereDi2015NewLine    var yourVal;Di2015NewLineDi2015NewLine    $('#FoodName').val(yourVal);Di2015NewLine});Di2015NewLine
19910162Di2015UniqueSeparator{name_of_elem}
19910162Di2015UniqueSeparatorproj_price
19910451Di2015UniqueSeparator <LevelOfInvestment>Di2015NewLine    <string>test1</string>Di2015NewLine    <string>test2</string>Di2015NewLine </LevelOfInvestment>Di2015NewLine
19910684Di2015UniqueSeparatorFor Each pb As PictureBox In New PictureBox() {steen1, steen2, steen3, steen4, steen5, steen6}Di2015NewLine  Select Case RandomNumber.Next(1, 7)Di2015NewLine    Case 1 : pb.Image = Game.My.Resources.EenDi2015NewLine    Case 2 : pb.Image = Game.My.Resources.TweeDi2015NewLine    Case 3 : pb.Image = Game.My.Resources.DrieDi2015NewLine    Case 4 : pb.Image = Game.My.Resources.VierDi2015NewLine    Case 5 : pb.Image = Game.My.Resources.VijfDi2015NewLine    Case 6 : pb.Image = Game.My.Resources.ZesDi2015NewLine  End SelectDi2015NewLineNextDi2015NewLine
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatorIA
19910692Di2015UniqueSeparatorA
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatorDisplay
19910692Di2015UniqueSeparatorIA
19910692Di2015UniqueSeparatorDisplay
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatorA.Display
19910692Di2015UniqueSeparatorbase.Display()
19910692Di2015UniqueSeparatornew
19910692Di2015UniqueSeparatorA x = new B(); x.Display();
19910692Di2015UniqueSeparatorA.Display()
19910692Di2015UniqueSeparatorB.Display
19910692Di2015UniqueSeparatorA
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatorB
19910692Di2015UniqueSeparatornew
19910693Di2015UniqueSeparator//get the property indicated by parameter 'field'Di2015NewLine//Use 'GetField' here if they are actually fields as opposed to PropertiesDi2015NewLine//although the merits of a public field are dubious...Di2015NewLine       var prop = object1.GetType().GetProperty(field);Di2015NewLine//if it existsDi2015NewLine        if (prop!=null)Di2015NewLine        {Di2015NewLine          //get its value from the object1 instance, and compareDi2015NewLine          //if using Fields, leave out the 'null' in this next line:Di2015NewLine          var propValue = prop.GetValue(object1,null);Di2015NewLineDi2015NewLine          if (propValue==null) return false;Di2015NewLine          return propValue;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine          //throw an exception for property not foundDi2015NewLine        }Di2015NewLine
19910763Di2015UniqueSeparatorDictionary
19910763Di2015UniqueSeparatorint
19910763Di2015UniqueSeparatorHashSet
19910763Di2015UniqueSeparatorDictionary
19910763Di2015UniqueSeparatorint
19910763Di2015UniqueSeparatorDictionary
19910763Di2015UniqueSeparatorDictionary
19910763Di2015UniqueSeparatorDictionary
19910763Di2015UniqueSeparatorint
19910810Di2015UniqueSeparatorGroupBy
19910810Di2015UniqueSeparatorList<List<string>> urlsPerName = listDi2015NewLine    .Select(u => new { Name = Path.GetFileNameWithoutExtension(u), Full = u })Di2015NewLine    .GroupBy(x => x.Name)Di2015NewLine    .Select(g => g.Select(x => x.Full).ToList())Di2015NewLine    .ToList();Di2015NewLine
19910810Di2015UniqueSeparator        [0] "a.aspx?a=1"    stringDi2015NewLine        [1] "a.aspx?a=2"    stringDi2015NewLine        [2] "a.aspx?a=3"    stringDi2015NewLineDi2015NewLine        [0] "b.aspx?b=1"    stringDi2015NewLine        [1] "b.aspx?b=2"    stringDi2015NewLine        [2] "b.aspx?b=3"    stringDi2015NewLineDi2015NewLine        [0] "c.aspx?c=1"    stringDi2015NewLine        [1] "c.aspx?c=2"    stringDi2015NewLine        [2] "c.aspx?c=3"    stringDi2015NewLine
19910831Di2015UniqueSeparator rundll32.exe dfshim.dll, ShOpenVerbExtension {guid} %1Di2015NewLine
19910831Di2015UniqueSeparatorHKCU\\Software\\Classes\\CLSID\\{guid}
19910831Di2015UniqueSeparator%windir%\\sysnative\\rundll32.exe
19910831Di2015UniqueSeparatorCLSID\\{guid}
19910891Di2015UniqueSeparator%PDF-1.4Di2015NewLine1 0 objDi2015NewLine<<Di2015NewLine/Title (Ã¾Ã¿)Di2015NewLine/Creator (Ã¾Ã¿)Di2015NewLine/Producer (Ã¾Ã¿ Q t   4 . 8 . 2   \\( C \\)   2 0 1 1   N o k i a   C o r p o r a t i o n   a n d / o r   i t s   s u b s i d i a r y \\( - i e s \\))Di2015NewLine/CreationDate (D:20131111142910)Z)Di2015NewLine>>Di2015NewLineendobj Di2015NewLine
19910891Di2015UniqueSeparatorPdfReader
19910924Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing Newtonsoft.Json.Linq;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string json = "{'results':[{'SwiftCode':'','City':'','BankName':'Deutsche    Bank','Bankkey':'10020030','Bankcountry':'DE'},{'SwiftCode':'','City':'10891    Berlin','BankName':'Commerzbank Berlin (West)','Bankkey':'10040000','Bankcountry':'DE'}]}";Di2015NewLineDi2015NewLine        var resultObjects = AllChildren(JObject.Parse(json))Di2015NewLine            .First(c => c.Type == JTokenType.Array && c.Path.Contains("results"))Di2015NewLine            .Children<JObject>();Di2015NewLineDi2015NewLine        foreach (JObject result in resultObjects) {Di2015NewLine            foreach (JProperty property in result.Properties()) {Di2015NewLine                // do something with the property belonging to resultDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // recursively yield all children of jsonDi2015NewLine    private static IEnumerable<JToken> AllChildren(JToken json)Di2015NewLine    {Di2015NewLine        foreach (var c in json.Children()) {Di2015NewLine            yield return c;Di2015NewLine            foreach (var cc in AllChildren(c)) {Di2015NewLine                yield return cc;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19911013Di2015UniqueSeparatorDropDownList ddlFixture = sender as DropDownList;Di2015NewLine
19911013Di2015UniqueSeparatorddlFixture.NamingContainer.FindControl("control_id")Di2015NewLine
19911013Di2015UniqueSeparatorTextBox txtCampus = ddlFixture.NamingContainer.FindControl("txtCampus") as TextBox;Di2015NewLine
19911244Di2015UniqueSeparatorTypeInitializationException
19911249Di2015UniqueSeparatorAlternateView av = AlternateView.CreateAlternateViewFromString(body, null, isHTML ? System.Net.Mime.MediaTypeNames.Text.Html : System.Net.Mime.MediaTypeNames.Text.Plain)Di2015NewLine
19911249Di2015UniqueSeparatorLinkedResource logo = new LinkedResource("SomeRandomValue", System.Net.Mime.MediaTypeNames.Image.Jpeg);Di2015NewLinelogo.ContentId = currentLinkedResource.Key;Di2015NewLinelogo.ContentType = new System.Net.Mime.ContentType("image/jpg");Di2015NewLine
19911249Di2015UniqueSeparatorav.LinkedResources.Add(logo);Di2015NewLine
19911249Di2015UniqueSeparatormsg.AlternativeViews.Add(av);Di2015NewLine
19911249Di2015UniqueSeparator"<img style=\\"width: 157px; height: 60px;\\" alt=\\"blah blah\\" title=\\"my title here\\" src=\\"cid:{0}\\" />";Di2015NewLine
19911249Di2015UniqueSeparatorstring body = "blah blah blah... body goes here with the image tag: <img src=\\"cid:companyLogo\\" width="104" height="27" />";Di2015NewLineDi2015NewLinebyte[] reader = File.ReadAllBytes("E:\\\\TestImage.jpg");Di2015NewLineMemoryStream image1 = new MemoryStream(reader);Di2015NewLineAlternateView av = AlternateView.CreateAlternateViewFromString(body, null, System.Net.Mime.MediaTypeNames.Text.Html);Di2015NewLineDi2015NewLineLinkedResource headerImage = new LinkedResource(image1, System.Net.Mime.MediaTypeNames.Image.Jpeg);Di2015NewLineheaderImage.ContentId = "companyLogo";Di2015NewLineheaderImage.ContentType = new ContentType("image/jpg");Di2015NewLineav.LinkedResources.Add(headerImage);Di2015NewLineDi2015NewLineDi2015NewLineSystem.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();Di2015NewLinemessage.AlternateViews.Add(av);Di2015NewLinemessage.To.Add(emailTo);Di2015NewLinemessage.Subject = " Your order is being processed...";Di2015NewLinemessage.From = new System.Net.Mail.MailAddress("xxx@xxx.com");Di2015NewLineDi2015NewLineDi2015NewLineContentType mimeType = new System.Net.Mime.ContentType("text/html");Di2015NewLineAlternateView alternate = AlternateView.CreateAlternateViewFromString(body, mimeType);Di2015NewLinemessage.AlternateViews.Add(alternate);Di2015NewLine
19911413Di2015UniqueSeparatorINotifyPropertyChanged
19911413Di2015UniqueSeparatorpublic SomeViewModel : ViewModelBase // assuming that you have a base class for thisDi2015NewLine{Di2015NewLine    public string CurrentGroupCodeDi2015NewLine    {Di2015NewLine        get { return Groups.CurrentItem.Code; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine             Groups.CurrentItem.Code = value;          // assuming that the VM has been intialized correctlyDi2015NewLine             RaisePropertyChanged("CurrentGroupCode"); // implemented in base classDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /*Di2015NewLine     * ...Initialization, logic a.s.o.Di2015NewLine     */Di2015NewLine}Di2015NewLine
19911459Di2015UniqueSeparatortrue
19911459Di2015UniqueSeparatorfalse
19911459Di2015UniqueSeparatortrue
19911459Di2015UniqueSeparatorThreadAbortException
19911459Di2015UniqueSeparatorreturn;
19911459Di2015UniqueSeparatorResponse.Redirect()
19911459Di2015UniqueSeparatorreturn;
19911459Di2015UniqueSeparatorResponse.Redirect()
19911459Di2015UniqueSeparatorResponse.Redirect()
19911832Di2015UniqueSeparator    private void removeGridDS()Di2015NewLine    {Di2015NewLine        this.gvTaskCases.Invoke((MethodInvoker)delegateDi2015NewLine        {Di2015NewLine            if (this.gvTaskCases.DataSource != null)Di2015NewLine            {Di2015NewLine                this.gvTaskCases.DataSource = null;Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLineDi2015NewLine    private void clear_gvTaskCases()Di2015NewLine    {Di2015NewLine        this.gvTaskCases.Invoke((MethodInvoker)delegateDi2015NewLine        {Di2015NewLine            if (this.gvTaskCases.Rows.Count != 0)Di2015NewLine            {Di2015NewLine                this.gvTaskCases.Rows.Clear();Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine
19911841Di2015UniqueSeparatorHashMap
19911841Di2015UniqueSeparatorMap<Character, char[]> charMappings = new HashMap<>();Di2015NewLine
19911841Di2015UniqueSeparatorMap<Character, char[]> charMappings = new HashMap<>();Di2015NewLineDi2015NewLinecharMappings.put((char) 5, "lola".toCharArray());Di2015NewLineSystem.out.println(charMappings.get((char) 5));Di2015NewLine
19911841Di2015UniqueSeparatorlolaDi2015NewLine
19911874Di2015UniqueSeparatorprotected void rgEmployees_DeleteCommand(object source, GridCommandEventArgs e) {Di2015NewLine    Employee ee = context.Employee.AsEnumerable().ElementAt(e.Item.ItemIndex); Di2015NewLine    context.Employee.Remove(ee);Di2015NewLine}Di2015NewLine
19911991Di2015UniqueSeparatorprivate void RemoveMenuItem_Click(object sender, EventArgs e) {Di2015NewLine  ToolStripMenuItem ti = sender as ToolStripMenuItem;Di2015NewLine  ContextMenuStrip cs = ti.Owner as ContextMenuStrip;Di2015NewLine  PictureBox pb = cs.SourceControl as PictureBox;Di2015NewLine  MessageBox.Show(pb.Name);  // or pb.Dispose();Di2015NewLine}Di2015NewLine
19911995Di2015UniqueSeparatorMethodInfo
19911995Di2015UniqueSeparatorInvoke
19911995Di2015UniqueSeparatorT
19911995Di2015UniqueSeparatorpublic void DoSomethingWithAllMyTypes(IAllMyTypes allMyTypes)Di2015NewLine{Di2015NewLine    var method = this.GetType().GetMethod("DoSomething", BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);Di2015NewLine    foreach (PropertyInfo propertyInfo in allMyTypes.GetType().GetProperties())Di2015NewLine    {Di2015NewLine        var x = propertyInfo.GetValue(allMyTypes, null);Di2015NewLine        if(x==null) throw new Exception("still wrong");Di2015NewLineDi2015NewLine        // obtain the type from the property - other techniques can be used here.Di2015NewLine        var genericMethod = method.MakeGenericMethod(new[] {propertyInfo.PropertyType.GetGenericArguments()[0]})Di2015NewLine        //execute the generic helperDi2015NewLine        genericMethod.Invoke(this, new[]{x});Di2015NewLine    }Di2015NewLine} Di2015NewLineDi2015NewLinepublic void DoSomething<T>(IList<T> list) where T : MyDataObject {Di2015NewLineDi2015NewLine}Di2015NewLine
19912075Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var doc = XDocument.Load(@"C:\\Test\\test.xml");Di2015NewLineDi2015NewLine    var city = doc.Descendants("address_component").FirstOrDefault(e => e.Element("type") != null Di2015NewLine                            && e.Element("type").Value =="locality");Di2015NewLineDi2015NewLine    if(city != null){                       Di2015NewLine     Console.WriteLine (city.GetElementIfExists("short_name"));Di2015NewLine    } else {Di2015NewLine     Console.WriteLine ("No short name found");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class Extensions {Di2015NewLine public static string GetElementIfExists(this XElement @this, string element){Di2015NewLine   return @this.Element(element) != null ? @this.Element(element).Value : String.Empty;Di2015NewLine }Di2015NewLine}Di2015NewLine
19912110Di2015UniqueSeparator(?<![(@|\\$)\\{])\\bFoo\\bDi2015NewLine
19912110Di2015UniqueSeparator[^(\\@\\{)]
19912110Di2015UniqueSeparator(?<!yourmatch)
19912205Di2015UniqueSeparator\\<tr[\\s\\S]*?\\/tr\\>Di2015NewLine
19912319Di2015UniqueSeparatorLINQ
19912319Di2015UniqueSeparatorvar x = yourDictionary.FirstOrDefault(entry=>object.Equals(entry.Value,events));Di2015NewLineif(!x.Equals(default(KeyValuePair<long,string>))) { Di2015NewLine  var id = x.Key.ToString();Di2015NewLine  //...Di2015NewLine}Di2015NewLine
19912319Di2015UniqueSeparatorKeys
19912319Di2015UniqueSeparatorValues
19912319Di2015UniqueSeparatorValues
19912319Di2015UniqueSeparatorKeys
19912319Di2015UniqueSeparatorvar inverseDictionary = yourDictionary.Select(key=>key.Value, value=>value.Key)Di2015NewLine                                      .ToDictionary();Di2015NewLine//Then use it like this:Di2015NewLinelong x;Di2015NewLineif(inverseDictionary.TryGetValue((string)events,out x)){Di2015NewLine  var id = x.Value.ToString();Di2015NewLine  //...Di2015NewLine}Di2015NewLine
19912353Di2015UniqueSeparator.IndexOf()
19912353Di2015UniqueSeparatorSelectedItem
19912353Di2015UniqueSeparatorSelectedIndex
19912353Di2015UniqueSeparatorSelectedItem
19912353Di2015UniqueSeparatorObject
19912353Di2015UniqueSeparator.Add(yourObject)
19912398Di2015UniqueSeparator<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"Di2015NewLine    android:id="@+id/mapLayout"Di2015NewLine    android:layout_width="fill_parent"Di2015NewLine    android:layout_height="fill_parent">Di2015NewLine        <FrameLayoutDi2015NewLine            android:id="@+id/mapView"Di2015NewLine            android:layout_width="fill_parent"Di2015NewLine            android:layout_height="match_parent" />Di2015NewLine            //other controlsDi2015NewLine</RelativeLayout>Di2015NewLine
19912398Di2015UniqueSeparatorpublic class GoogleMapActivity : Android.Support.V4.App.FragmentActivityDi2015NewLine{Di2015NewLine    private Android.Gms.Maps.GoogleMap _mapView;Di2015NewLine    private Android.Gms.Maps.SupportMapFragment _fragment;Di2015NewLineDi2015NewLine    protected override void OnCreate(Bundle bundle)Di2015NewLine    {Di2015NewLine        base.OnCreate(bundle);Di2015NewLine        SetContentView(Resource.Layout.GoogleMap);Di2015NewLineDi2015NewLine        var mapOptions = new Android.Gms.Maps.GoogleMapOptions()Di2015NewLine            .InvokeMapType(Android.Gms.Maps.GoogleMap.MapTypeNormal)Di2015NewLine            .InvokeZoomControlsEnabled(false)Di2015NewLine            .InvokeCompassEnabled(true);Di2015NewLineDi2015NewLine        var fragTx = SupportFragmentManager.BeginTransaction();Di2015NewLine        var mapFragment = Android.Gms.Maps.SupportMapFragment.NewInstance(mapOptions);Di2015NewLine        fragTx.Add(Resource.Id.mapView, mapFragment, "mapView");Di2015NewLine        fragTx.Commit();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnResume()Di2015NewLine    {Di2015NewLine        base.OnResume();Di2015NewLineDi2015NewLine        _fragment = ((Android.Gms.Maps.SupportMapFragment)SupportFragmentManager.FindFragmentById(Resource.Id.mapView));Di2015NewLine        _mapView = _fragment.Map;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19912439Di2015UniqueSeparatorpublic T Deserialize<T>(string entity)Di2015NewLine    {Di2015NewLine        var obj = Activator.CreateInstance<T>();Di2015NewLine        var stringProps = entity.Split(',');Di2015NewLine        var objProps = obj.GetType().GetProperties();Di2015NewLineDi2015NewLine        var propIndex = 0;Di2015NewLineDi2015NewLine        for (int i = 0; i < stringProps.Length; i++)Di2015NewLine        {Di2015NewLine            if (objProps[propIndex].PropertyType.FullName == "System.String")Di2015NewLine            {Di2015NewLine                objProps[propIndex].SetValue(obj, stringProps[i], null);Di2015NewLine            }Di2015NewLine            else if (objProps[propIndex].PropertyType.FullName == "System.Int32")Di2015NewLine            {Di2015NewLine                objProps[propIndex].SetValue(obj, Convert.ToInt32(stringProps[i]), null);Di2015NewLine            }Di2015NewLine            else if (objProps[propIndex].PropertyType.FullName == "System.DateTime")Di2015NewLine            {Di2015NewLine                var cultureInfo = new CultureInfo("fa-IR");Di2015NewLine                DateTime dateTime = Convert.ToDateTime(stringProps[i], cultureInfo);Di2015NewLine                objProps[propIndex].SetValue(obj, stringProps[i], null);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                i--;Di2015NewLine            }Di2015NewLine            propIndex++;Di2015NewLine        }Di2015NewLine        return obj;Di2015NewLine    }Di2015NewLine
19912447Di2015UniqueSeparatorwhere d.Name = '@StartDate'Di2015NewLine
19912447Di2015UniqueSeparatorwhere d.Name = @StartDateDi2015NewLine
19912493Di2015UniqueSeparatoruse datagrid instead of textboxDi2015NewLineDi2015NewLine//Con = Connection ObjectDi2015NewLine//Create Command ObjectDi2015NewLinestring sql;Di2015NewLineSqlDataAdapter da;Di2015NewLineDataTable dt;Di2015NewLineSqlCommand com = con.createCommand();Di2015NewLineDi2015NewLine//abc = your table nameDi2015NewLine//Provide Statement to Command ObjectDi2015NewLinesql = " SELECT * FROM abc";Di2015NewLine//Create New Datatable to fill with dataDi2015NewLinedt = new DataTable();Di2015NewLineDi2015NewLine//Create DataAdapter to fill data in DataTable via AdapterDi2015NewLineda = new SqlDataAdapter(sql, con);Di2015NewLineda.Fill(dt);Di2015NewLineDi2015NewLine//gridView1 = Your GridView NameDi2015NewLinegridView1.DataSource = dt;Di2015NewLinegridView1.Refresh();Di2015NewLine
19912641Di2015UniqueSeparatorpublic interface IAppearanceDi2015NewLine{Di2015NewLine    void updateAppearanceOf(Control control);Di2015NewLine}Di2015NewLinepublic abstract class Appearance<T> : IAppearance where T : Control Di2015NewLine{Di2015NewLine    void IAppearance.updateAppearanceOf(Control control)Di2015NewLine    {Di2015NewLine        if (control is T) updateAppearanceOf((T)control);Di2015NewLine    }Di2015NewLine    public abstract void updateAppearanceOf(T control);Di2015NewLine}Di2015NewLinepublic class TextBoxAppearance : Appearance<TextBox> {Di2015NewLine    public override void updateAppearanceOf(TextBox control)Di2015NewLine    {Di2015NewLine        // implement update of TextBoxDi2015NewLine    }Di2015NewLine}Di2015NewLine
19912641Di2015UniqueSeparatorAppearance
19912725Di2015UniqueSeparator    public void SaveAs(string filename, bool includeHeaders)Di2015NewLine    {Di2015NewLine        if (!Path.IsPathRooted(filename) && RuntimeConfig.GetConfig(this._context).HttpRuntime.RequireRootedSaveAsPath)Di2015NewLine        {Di2015NewLine            object[] objArray = new object[] { filename };Di2015NewLine            throw new HttpException(SR.GetString("SaveAs_requires_rooted_path", objArray));Di2015NewLine        }Di2015NewLine        FileStream fileStream = new FileStream(filename, FileMode.Create);Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (includeHeaders)Di2015NewLine            {Di2015NewLine                TextWriter streamWriter = new StreamWriter(fileStream);Di2015NewLine                streamWriter.Write(string.Concat(this.HttpMethod, " ", this.Path));Di2015NewLine                string queryStringText = this.QueryStringText;Di2015NewLine                if (!string.IsNullOrEmpty(queryStringText))Di2015NewLine                {Di2015NewLine                    streamWriter.Write(string.Concat("?", queryStringText));Di2015NewLine                }Di2015NewLine                if (this._wr == null)Di2015NewLine                {Di2015NewLine                    streamWriter.Write("\\r\\n");Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    streamWriter.Write(string.Concat(" ", this._wr.GetHttpVersion(), "\\r\\n"));Di2015NewLine                    streamWriter.Write(this.CombineAllHeaders(true));Di2015NewLine                }Di2015NewLine                streamWriter.Write("\\r\\n");Di2015NewLine                streamWriter.Flush();Di2015NewLine            }Di2015NewLine            ((HttpInputStream)this.InputStream).WriteTo(fileStream);Di2015NewLine            fileStream.Flush();Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            fileStream.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19912788Di2015UniqueSeparatorRedirectToAction
19912788Di2015UniqueSeparatorSupplierEditSuccess
19912788Di2015UniqueSeparatorSuccess
19912788Di2015UniqueSeparatorSupplier
19912788Di2015UniqueSeparatorTempData
19912788Di2015UniqueSeparatorthis._service.Update(supplier);
19912788Di2015UniqueSeparatorTempData["UserMessage"]
19912897Di2015UniqueSeparatorDouble height = row.Field<Double>("height");Di2015NewLineDouble fsize = row.Field<Double>("fsize");Di2015NewLineDouble cost = row.Field<Double>("cost");Di2015NewLine
19912897Di2015UniqueSeparatorField<T>
19912909Di2015UniqueSeparatorBusiness
19912909Di2015UniqueSeparatorGlobalClass
19912909Di2015UniqueSeparatorLoginForm
19912909Di2015UniqueSeparatorLoginForm
19912909Di2015UniqueSeparatorGlobalClass.Business
19912921Di2015UniqueSeparator<Window x:Class="ChessBoardSample.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="350" Width="350">Di2015NewLine    <ItemsControl ItemsSource="{Binding Squares}">Di2015NewLine        <ItemsControl.ItemsPanel>Di2015NewLine            <ItemsPanelTemplate>Di2015NewLine                <UniformGrid Rows="8" Columns="8"/>Di2015NewLine            </ItemsPanelTemplate>Di2015NewLine        </ItemsControl.ItemsPanel>Di2015NewLineDi2015NewLine        <ItemsControl.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <Button x:Name="Square"Di2015NewLine                        Command="{Binding DataContext.SquareClickCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"Di2015NewLine                        CommandParameter="{Binding}">Di2015NewLine                    <Button.Template>Di2015NewLine                        <ControlTemplate TargetType="Button">Di2015NewLine                            <Grid Background="{TemplateBinding Background}"/>Di2015NewLine                        </ControlTemplate>Di2015NewLine                    </Button.Template>Di2015NewLine                </Button>Di2015NewLineDi2015NewLine                <DataTemplate.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding IsBlack}" Value="True">Di2015NewLine                        <Setter TargetName="Square" Property="Background" Value="Black"/>Di2015NewLine                    </DataTrigger>Di2015NewLineDi2015NewLine                    <DataTrigger Binding="{Binding IsBlack}" Value="False">Di2015NewLine                        <Setter TargetName="Square" Property="Background" Value="Wheat"/>Di2015NewLine                    </DataTrigger>Di2015NewLine                </DataTemplate.Triggers>Di2015NewLine            </DataTemplate>Di2015NewLine        </ItemsControl.ItemTemplate>Di2015NewLine    </ItemsControl>Di2015NewLine</Window>Di2015NewLine
19912921Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        DataContext = new ChessBoard();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19912921Di2015UniqueSeparatorpublic class ChessBoardDi2015NewLine{Di2015NewLine    public List<ChessSquare> Squares { get; private set; }Di2015NewLineDi2015NewLine    public Command<ChessSquare> SquareClickCommand { get; private set; }Di2015NewLineDi2015NewLine    public ChessBoard()Di2015NewLine    {Di2015NewLine        Squares = new List<ChessSquare>();Di2015NewLineDi2015NewLine        for (int i = 0; i < 8; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < 8; j++)Di2015NewLine            {Di2015NewLine                Squares.Add(new ChessSquare() {Row = i, Column = j});Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        SquareClickCommand = new Command<ChessSquare>(OnSquareClick);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void OnSquareClick(ChessSquare square)Di2015NewLine    {Di2015NewLine        MessageBox.Show("You clicked on Row: " + square.Row + " - Column: " + square.Column);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19912921Di2015UniqueSeparatorpublic class ChessSquareDi2015NewLine{Di2015NewLine    public int Row { get; set; }Di2015NewLineDi2015NewLine    public int Column { get; set; }Di2015NewLineDi2015NewLine    public bool IsBlack { get { return (Row + Column) %2 == 1; }}        Di2015NewLine}Di2015NewLine
19912921Di2015UniqueSeparatorpublic class Command<T>: ICommandDi2015NewLine{Di2015NewLine    public Action<T> Action { get; set; }Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        if (Action != null && parameter is T)Di2015NewLine            Action((T)parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return IsEnabled;Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool _isEnabled = true;Di2015NewLine    public bool IsEnabledDi2015NewLine    {Di2015NewLine        get { return _isEnabled; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _isEnabled = value;Di2015NewLine            if (CanExecuteChanged != null)Di2015NewLine                CanExecuteChanged(this, EventArgs.Empty);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler CanExecuteChanged;Di2015NewLineDi2015NewLine    public Command(Action<T> action)Di2015NewLine    {Di2015NewLine        Action = action;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19912921Di2015UniqueSeparatorCommand
19912921Di2015UniqueSeparatorItemsControl
19912921Di2015UniqueSeparatorDataContext = ...
19912921Di2015UniqueSeparatorDelegateCommand
19912921Di2015UniqueSeparatorOnSquareClick()
19912921Di2015UniqueSeparatorChessSquare
19912921Di2015UniqueSeparatorIsBlack
19912921Di2015UniqueSeparatorFile -> New Project -> WPF Application
19912944Di2015UniqueSeparatorDi2015NewLine Outlook.MailItem mailItem = (Outlook.MailItem)Di2015NewLine                this.Application.CreateItem(Outlook.OlItemType.olMailItem);Di2015NewLine
19912944Di2015UniqueSeparatorDi2015NewLineMicrosoft.Office.Interop.Outlook.Application app = new Microsoft.Office.Interop.Outlook.Application();Di2015NewLine            Microsoft.Office.Interop.Outlook.MailItem mailItem = app.CreateItem(Microsoft.Office.Interop.Outlook.OlItemType.olMailItem);Di2015NewLine
19912977Di2015UniqueSeparatorimageList1.Images.Add(Properties.Resources.myImage);Di2015NewLine
19913005Di2015UniqueSeparatorLabel lbl = new Label();Di2015NewLinePictureBox pb = new PictureBox();Di2015NewLinepb.Tag = lbl;Di2015NewLine
19913005Di2015UniqueSeparator// ...assuming "pb" now refers to the PictureBox that fired the ContextMenu...Di2015NewLine((Control)pb.Tag).Dispose();Di2015NewLinepb.Dispose();Di2015NewLine
19913030Di2015UniqueSeparatorpublic class cProducer {Di2015NewLine    private cConsumer myConsumer = new cConsumer ();Di2015NewLineDi2015NewLine    public void onStart () {Di2015NewLine        myConsumer.OnStart ();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void onStop () {Di2015NewLine        myConsumer.OnStop ();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void OnOrderReceived (cOrder newOrder) {Di2015NewLine        myConsumer.orderQueue.Add (cOrder);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class cConsumer {Di2015NewLine    private CancellationTokenSource stopFlag;Di2015NewLine    public BlockingCollection<cOrder> orderQueue = new BlockingCollection<cOrder> ();Di2015NewLine    private Task processingTask;Di2015NewLineDi2015NewLine    public void OnStart () {Di2015NewLine        stopFlag = new CancellationTokenSource ();Di2015NewLine        processingTask = Task.Factory.StartNew (() => Process ());Di2015NewLine    }Di2015NewLineDi2015NewLine    public void OnStop () {Di2015NewLine        stopFlag.Cancel ();Di2015NewLine        orderQueue.CompleteAdding ();Di2015NewLine        processingTask.Wait ();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Process () {Di2015NewLine        try {Di2015NewLine            foreach (cOrder newOrder in orderQueue.GetConsumingEnumerable (stopFlag.Token)) {Di2015NewLine                // processDi2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (OperationCanceledException) {Di2015NewLine            foreach (cOrder cancelledOrder in orderQueue.GetConsumingEnumerable ()) {Di2015NewLine                // log itDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19913187Di2015UniqueSeparatorFromText
19913187Di2015UniqueSeparatorDbGeography box = DbGeography.FromText(Di2015NewLine    string.Format("POLYGON(({0} {1}, {0} {2}, {3} {2}, {3} {1}, {0} {1}))",Di2015NewLine                         nwLongitude, Di2015NewLine                         nwLatitude,Di2015NewLine                         seLatitude,Di2015NewLine                         seLongitude), 4326);Di2015NewLine
19913226Di2015UniqueSeparatorforeach (string key in Request.QueryString)Di2015NewLine{Di2015NewLine    string value = Request.QueryString[key];Di2015NewLine    // add your other code hereDi2015NewLine}Di2015NewLine
19913226Di2015UniqueSeparatorRequest.QueryString[key]
19913267Di2015UniqueSeparatorBETWEEN (? AND ?)
19913267Di2015UniqueSeparatorBETWEEN (@StartDate AND @EndDate)
19913382Di2015UniqueSeparatorData Source=:C\\Users\\visualstudio\\Project3\\Database1.sdfDi2015NewLine
19913382Di2015UniqueSeparatorData Source=C:\\Users\\visualstudio\\Project3\\Database1.sdfDi2015NewLine
19913389Di2015UniqueSeparator[DllImport(@"SharedLib.dll", CallingConvention = CallingConvention.Cdecl)] Di2015NewLineprivate static extern int StringLength(string str);Di2015NewLine
19913389Di2015UniqueSeparatorStringBuilder
19913389Di2015UniqueSeparator#include "extcode.h"Di2015NewLine#pragma pack(push)Di2015NewLine#pragma pack(1)Di2015NewLineDi2015NewLine#ifdef __cplusplusDi2015NewLineextern "C" {Di2015NewLine#endifDi2015NewLineDi2015NewLine/*!Di2015NewLine * StringLengthDi2015NewLine */Di2015NewLineint32_t __cdecl StringLength(char String[]);Di2015NewLineDi2015NewLinelong __cdecl LVDLLStatus(char *errStr, int errStrLen, void *module);Di2015NewLineDi2015NewLine#ifdef __cplusplusDi2015NewLine} // extern "C"Di2015NewLine#endifDi2015NewLineDi2015NewLine#pragma pack(pop)Di2015NewLine
19913456Di2015UniqueSeparatorUnload()
19913456Di2015UniqueSeparatorDispose()
19913456Di2015UniqueSeparatorIDisposable
19913456Di2015UniqueSeparatorContentManager
19913481Di2015UniqueSeparatortd
19913481Di2015UniqueSeparatortr
19913481Di2015UniqueSeparator$("table[id$='gvListOfMatters'] > tbody > tr > td").bind('contextmenu', function (e) {Di2015NewLine                $("#myMenu").hide();Di2015NewLine                e.preventDefault();Di2015NewLine                $(this).css("cursor", "pointer");Di2015NewLine                iColIndex = $(this).closest("tr td").prevAll("tr td").length;Di2015NewLine                iRowIndex = $(this).closest("tr").prevAll("tr").length;Di2015NewLine                rowid = $(this).parent().children()[0].innerHTML;Di2015NewLine                if (!isNaN(rowid)) {Di2015NewLine                    //call context menu hereDi2015NewLine                    $("#myMenu").css({Di2015NewLine                        top: e.pageY + "px",Di2015NewLine                        left: e.pageX + "px",Di2015NewLine                        position: 'absolute'Di2015NewLine                    });Di2015NewLine                    $("#myMenu").show(100);Di2015NewLine                }Di2015NewLine            });Di2015NewLine
19913489Di2015UniqueSeparatorref
19913489Di2015UniqueSeparatorstatic void DirSearch(string path, ref int count)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        foreach (string dirPath in Directory.GetDirectories(path))Di2015NewLine        {Di2015NewLine            foreach (string filePath in Directory.GetFiles(dirPath))Di2015NewLine            {Di2015NewLine                string filename = Path.GetFileName(filePath);Di2015NewLine                if (filename.Equals("desktop.txt"))Di2015NewLine                {Di2015NewLine                    File.Delete(filePath);Di2015NewLine                    count++Di2015NewLine                }Di2015NewLine                Console.WriteLine(filePath); // print filesDi2015NewLine            }Di2015NewLine            Console.WriteLine(dirPath); // print directoriesDi2015NewLine            DirSearch(dirPath,ref count);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (System.Exception excpt)Di2015NewLine    {Di2015NewLine        Console.WriteLine(excpt.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19913489Di2015UniqueSeparatorint count = 0;Di2015NewLineDi2015NewLineDirSearch(@"C:\\SomePath",ref count);Di2015NewLine
19913489Di2015UniqueSeparatorcount
19913583Di2015UniqueSeparatorAutoSize
19913583Di2015UniqueSeparatorAutoSize
19913583Di2015UniqueSeparatorAutoSize
19913583Di2015UniqueSeparatorAutoSize
19913583Di2015UniqueSeparatorpublic class XCheckBox : CheckBoxDi2015NewLine{        Di2015NewLine    public XCheckBox()Di2015NewLine    {            Di2015NewLine        SetStyle(ControlStyles.Opaque, false);Di2015NewLine        ReadOnlyCheckedColor = Color.Green;Di2015NewLine        ReadOnlyUncheckedColor = Color.Gray;Di2015NewLine    }        Di2015NewLine    public bool ReadOnly { get; set; }Di2015NewLine    public bool AlwaysShowCheck { get; set; }Di2015NewLine    public Color ReadOnlyCheckedColor { get; set; }Di2015NewLine    public Color ReadOnlyUncheckedColor { get; set; }Di2015NewLine    protected override void OnPaint(PaintEventArgs pevent)Di2015NewLine    {Di2015NewLine        if (ReadOnly)Di2015NewLine        {Di2015NewLine            pevent.Graphics.SmoothingMode = SmoothingMode.HighQuality;Di2015NewLine            pevent.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;Di2015NewLine            if (AlwaysShowCheck || Checked)Di2015NewLine            {Di2015NewLine                RenderCheck(pevent.Graphics);Di2015NewLine            }Di2015NewLine            RenderText(pevent.Graphics);                Di2015NewLine        }Di2015NewLine        else base.OnPaint(pevent);                            Di2015NewLine    }Di2015NewLine    private void RenderCheck(Graphics g)Di2015NewLine    {Di2015NewLine        float fontScale = Font.Size / 8.25f;   Di2015NewLine        Size glyphSize = CheckBoxRenderer.GetGlyphSize(g, System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal);            Di2015NewLine        glyphSize.Width = (int) (glyphSize.Width * fontScale);Di2015NewLine        glyphSize.Height = (int)(glyphSize.Height * fontScale);            Di2015NewLine        string checkAlign = CheckAlign.ToString();Di2015NewLine        using (GraphicsPath gp = new GraphicsPath())Di2015NewLine        using (Pen pen = new Pen(Checked ? ReadOnlyCheckedColor : ReadOnlyUncheckedColor, 1.5f)Di2015NewLine        {Di2015NewLine            LineJoin = LineJoin.Round,Di2015NewLine            EndCap = LineCap.Round,Di2015NewLine            StartCap = LineCap.RoundDi2015NewLine        })Di2015NewLine        {Di2015NewLine            gp.AddLine(new Point(3, 7), new Point(5, 10));Di2015NewLine            gp.AddLine(new Point(5, 10), new Point(8, 3));Di2015NewLine            float dx = checkAlign.EndsWith("Right") ? Math.Max(-4*fontScale, ClientSize.Width - glyphSize.Width - 4 * fontScale) :Di2015NewLine                     checkAlign.EndsWith("Center") ? Math.Max(-4*fontScale, (ClientSize.Width - glyphSize.Width) / 2 - 4 * fontScale) : -4;Di2015NewLine            float dy = checkAlign.StartsWith("Bottom") ? Math.Max(-4*fontScale, ClientSize.Height - glyphSize.Height - 4*fontScale) :Di2015NewLine                     checkAlign.StartsWith("Middle") ? Math.Max(-4*fontScale, (ClientSize.Height - glyphSize.Height) / 2 - 4*fontScale) : 0;Di2015NewLineDi2015NewLine            g.TranslateTransform(dx, dy);Di2015NewLine            g.ScaleTransform(1.5f*fontScale, 1.5f*fontScale);Di2015NewLine            g.DrawPath(pen, gp);Di2015NewLine            g.ResetTransform();                Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private void RenderText(Graphics g)Di2015NewLine    {Di2015NewLine        Size glyphSize = CheckBoxRenderer.GetGlyphSize(g, System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal);Di2015NewLine        float fontScale = Font.Size / 8.25f;Di2015NewLine        glyphSize.Width = (int)(glyphSize.Width * fontScale);Di2015NewLine        glyphSize.Height = (int)(glyphSize.Height * fontScale);Di2015NewLine        string checkAlign = CheckAlign.ToString();Di2015NewLine        using (StringFormat sf = new StringFormat())Di2015NewLine        {Di2015NewLine            string alignment = TextAlign.ToString();Di2015NewLine            sf.LineAlignment = alignment.StartsWith("Top") ? StringAlignment.Near :Di2015NewLine                               alignment.StartsWith("Middle") ? StringAlignment.Center : StringAlignment.Far;Di2015NewLine            sf.Alignment = alignment.EndsWith("Left") ? StringAlignment.Near :Di2015NewLine                           alignment.EndsWith("Center") ? StringAlignment.Center : StringAlignment.Far;Di2015NewLine            sf.FormatFlags = StringFormatFlags.NoWrap | StringFormatFlags.NoClip;Di2015NewLine            Rectangle textRectangle = ClientRectangle;Di2015NewLine            if (checkAlign.EndsWith("Left"))Di2015NewLine            {Di2015NewLine                textRectangle.Width -= glyphSize.Width;Di2015NewLine                textRectangle.Offset(glyphSize.Width, 0);Di2015NewLine            }Di2015NewLine            else if (checkAlign.EndsWith("Right"))Di2015NewLine            {Di2015NewLine                textRectangle.Width -= glyphSize.Width;Di2015NewLine                textRectangle.X = 0;Di2015NewLine            }Di2015NewLine            g.DrawString(Text, Font, new SolidBrush(ForeColor), textRectangle, sf);Di2015NewLine        }Di2015NewLine    }        Di2015NewLine    bool suppressCheckedChanged;Di2015NewLine    protected override void OnClick(EventArgs e)Di2015NewLine    {Di2015NewLine        if (ReadOnly) {Di2015NewLine            suppressCheckedChanged = true;Di2015NewLine            Checked = !Checked;Di2015NewLine            suppressCheckedChanged = false;Di2015NewLine        }Di2015NewLine        base.OnClick(e);Di2015NewLine    }Di2015NewLine    protected override void OnCheckedChanged(EventArgs e)Di2015NewLine    {Di2015NewLine        if (suppressCheckedChanged) return;Di2015NewLine        base.OnCheckedChanged(e);Di2015NewLine    }        Di2015NewLine}Di2015NewLine
19913583Di2015UniqueSeparatorAlwaysShowCheck
19913583Di2015UniqueSeparatorReadOnly
19913583Di2015UniqueSeparatorReadOnly
19913583Di2015UniqueSeparatortrue
19913583Di2015UniqueSeparatorAlwaysShowCheck
19913583Di2015UniqueSeparatortrue
19913583Di2015UniqueSeparatorAlwaysShowCheck
19913583Di2015UniqueSeparatorfalse
19913696Di2015UniqueSeparatorType t = ...Di2015NewLineObject o = ...Di2015NewLineDi2015NewLinebool isODerivedFromT = (o == null) || t.IsAssignableFrom(o.GetType());Di2015NewLine
19913720Di2015UniqueSeparatorDBce_TEST2.Properties.Settings.Default.dbLocation = fileName;Di2015NewLineDBce_TEST2.Properties.Settings.Default.Save();Di2015NewLine
19913791Di2015UniqueSeparatorResourceDictionary
19913791Di2015UniqueSeparatorToggleButton
19913791Di2015UniqueSeparatorMetro.MSControls.Core.Implicit.xaml
19913791Di2015UniqueSeparatorToggleButtonStyle
19913791Di2015UniqueSeparator<Style BasedOn="{StaticResource ToggleButtonStyle}" TargetType="{x:Type ToggleButton}" />Di2015NewLine
19913905Di2015UniqueSeparatorFindControl()
19913905Di2015UniqueSeparatorprotected void chkSelectAll_CheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Cast the sender to a CheckBox typeDi2015NewLine    CheckBox chkAll = sender as CheckBox;Di2015NewLineDi2015NewLine    // The as operator will return null if the cast is not successful,Di2015NewLine    // so check for null before we try to use itDi2015NewLine    if(chkAll != null)Di2015NewLine    {Di2015NewLine        if (chkAll.Checked == true)Di2015NewLine        {Di2015NewLine            foreach (GridViewRow gvRow in Repeateremail.Items)Di2015NewLine            {Di2015NewLine                CheckBox chkSel =Di2015NewLine                 (CheckBox)gvRow.FindControl("chkSelect");Di2015NewLine                chkSel.Checked = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            foreach (GridViewRow gvRow in Repeateremail.Items)Di2015NewLine            {Di2015NewLine                CheckBox chkSel = (CheckBox)gvRow.FindControl("chkSelect");Di2015NewLine                chkSel.Checked = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19914246Di2015UniqueSeparator//Count-1 to stop at the second to last itemDi2015NewLinefor(int i = 0; i < dm.Count-1; ++i)Di2015NewLine{Di2015NewLine      mdmList.Add(new ModifiedDefectMap()Di2015NewLine      {                        Di2015NewLine           StartingPoint = dm[i].Start,Di2015NewLine           Length =  dm[i+1].Start - dm[i].StartDi2015NewLine      });Di2015NewLine}Di2015NewLine
19914312Di2015UniqueSeparatorTimer
19914312Di2015UniqueSeparatorvar oldUsers = recentUsersDi2015NewLine               .Select( p => p.Value )Di2015NewLine               .Where( u => u.LastActionTime.AddHours( 1 ) > now );Di2015NewLine
19914312Di2015UniqueSeparatorrecentUsers
19914312Di2015UniqueSeparator<
19914312Di2015UniqueSeparator.Where((now - u.LastActionTime) > TimeSpan.FromHours(1));Di2015NewLine
19914364Di2015UniqueSeparatorx:Key
19914364Di2015UniqueSeparator<Application.Resources>Di2015NewLine    <ResourceDictionary>Di2015NewLine        <ResourceDictionary.MergedDictionaries>Di2015NewLine            <ResourceDictionary Source="Lang.en-US.xaml" />Di2015NewLine        </ResourceDictionary.MergedDictionaries>Di2015NewLine        <ResourceDictionary>Di2015NewLine             <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>Di2015NewLine             <ContextMenu x:Key="MyContextMenu"/>Di2015NewLine        </ResourceDictionary>Di2015NewLine    </ResourceDictionary>Di2015NewLine</Application.Resources>Di2015NewLine
19914404Di2015UniqueSeparatorIF
19914404Di2015UniqueSeparatorELSE
19914404Di2015UniqueSeparatorIF
19914497Di2015UniqueSeparatorif(Request.Cookies["userName"] != null)Di2015NewLine    Label1.Text = Server.HtmlEncode(Request.Cookies["userName"].Value);Di2015NewLine
19914512Di2015UniqueSeparatorSelect [password]Di2015NewLinefrom dbo.users Di2015NewLinewhere [name] = @mynameDi2015NewLine
19914512Di2015UniqueSeparatorstring pword = tableadaptermanager.getpassword(usernamebox1.text).tostring();Di2015NewLineif (pword == passwordbox1.text)Di2015NewLine{Di2015NewLine    do something usefulDi2015NewLine{Di2015NewLine
19914578Di2015UniqueSeparatorstring.IsNullOrEmpty
19914578Di2015UniqueSeparatorvalue = string.IsNullOrEmpty(Company) ? Name : Name + "," + Company;Di2015NewLine
19914578Di2015UniqueSeparatorstring.IsNullOrWhiteSpace
19914585Di2015UniqueSeparatorHtml.TextBoxFor(model => model.SomeValue)Di2015NewLine
19914585Di2015UniqueSeparatorpublic static class InputExtensionsDi2015NewLine{Di2015NewLine    public static MvcHtmlString TextBoxFor<TModel, TProperty>Di2015NewLine        (this HtmlHelper<TModel> htmlHelper, Di2015NewLine         Expression<Func<TModel, TProperty>> expression)Di2015NewLine    {Di2015NewLine        string format = (string) null;Di2015NewLine        return InputExtensionsDi2015NewLine                .TextBoxFor<TModel, TProperty>(htmlHelper, expression, format);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19914585Di2015UniqueSeparatorCar
19914585Di2015UniqueSeparatorCar<Milk>
19914585Di2015UniqueSeparatorMilk
19914585Di2015UniqueSeparatorpublic static class InputExtensionsDi2015NewLine// ^^ this is where Extension Methods must be placed (inside of a static class)Di2015NewLine{Di2015NewLine    public static MvcHtmlString TextBoxFor<TModel, TProperty>Di2015NewLine    //     ^^ they must also be static    ^^ here must be defined all the generic typesDi2015NewLine    //                                       which are involved withing the methodDi2015NewLineDi2015NewLine        (this HtmlHelper<TModel> htmlHelper, Di2015NewLine    //   ^^ the first parameter must have "this"Di2015NewLine    //      this is a parameter which defines the type that the method operates onDi2015NewLine    //      so, in this case, it must be some "HtmlHelper<TModel>" class instanceDi2015NewLineDi2015NewLine         Expression<Func<TModel, TProperty>> expression)Di2015NewLine    //   ^^ the second parameter in the declaration, Di2015NewLine    //      but the first one which appears from caller side (the only one in this very case)Di2015NewLine    {Di2015NewLine        string format = (string) null;Di2015NewLineDi2015NewLine        return InputExtensions.TextBoxFor<TModel, TProperty>Di2015NewLine               (htmlHelper, expression, format);Di2015NewLine        // or might also be (dependently if the types Di2015NewLine        //    can be resolved automatically by compiller (the explanation below))Di2015NewLine        //    as follows:Di2015NewLine        return InputExtensions.TextBoxForDi2015NewLine               (htmlHelper, expression, format);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19914585Di2015UniqueSeparatorpublic static class InputExtensionsDi2015NewLine
19914585Di2015UniqueSeparator    public static MvcHtmlString TextBoxFor<TModel, TProperty>Di2015NewLine
19914585Di2015UniqueSeparatorsomeObject.OurExtensionMethod<string, int>
19914585Di2015UniqueSeparator        (this HtmlHelper<TModel> htmlHelper, Di2015NewLine
19914585Di2015UniqueSeparatorhtmlHelper
19914585Di2015UniqueSeparator(this HtmlHelper<TModel> @this
19914585Di2015UniqueSeparatorstring
19914585Di2015UniqueSeparator(this string @this,
19914585Di2015UniqueSeparator         Expression<Func<TModel, TProperty>> expression)Di2015NewLine
19914585Di2015UniqueSeparatorFunc<TModel, TProperty>
19914585Di2015UniqueSeparatorExpression<Func<TModel, TProperty>>
19914585Di2015UniqueSeparatorCar<Milk>
19914585Di2015UniqueSeparatorMilk
19914585Di2015UniqueSeparatorTModel
19914585Di2015UniqueSeparatorHtml.TextBoxFor(ourKindOfMilkObject => ourKindOfMilkObject.MeasureUnits)
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorFunc
19914585Di2015UniqueSeparatorExspression<Func>
19914585Di2015UniqueSeparatorobject
19914585Di2015UniqueSeparatorExpression<Func<TModel, TProperty>> expression
19914585Di2015UniqueSeparatorobject
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorHtml.TextBoxFor(model => model.SomeValue)
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorHtml.TextBoxFor<ATypeOfYourModel, string>(model => model.SomeValue)
19914585Di2015UniqueSeparatorstring
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorTProperty
19914585Di2015UniqueSeparatorvar html = new HtmlHelper<CustomModel>();Di2015NewLinevar car = new Car<Milk>();Di2015NewLine
19914585Di2015UniqueSeparatorhtml.TextBoxFor<CustomModel, string>(model => model.SomeValue);Di2015NewLinecar.AddATrailer<Milk,ParticularMeasureUnitsType>Di2015NewLine             (theCarProduct => theCarProduct.MeasureUnits);Di2015NewLine
19914585Di2015UniqueSeparatorCar
19914585Di2015UniqueSeparatorMilk
19914585Di2015UniqueSeparatornew Car<Milk>()
19914585Di2015UniqueSeparatorFunc
19914585Di2015UniqueSeparatorSomeValue
19914585Di2015UniqueSeparatorhtml.TextBoxFor(model => model.SomeValue);Di2015NewLinecar.AddATrailer(theCarProduct => theCarProduct.MeasureUnits);Di2015NewLine
19914585Di2015UniqueSeparatorwhere
19914585Di2015UniqueSeparator(this HtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TProperty>> expression)Di2015NewLine        where TModel : CustomModel where some : ParticularValueTypeDi2015NewLine
19914585Di2015UniqueSeparatorobject
19914601Di2015UniqueSeparator    public double EndReportPositionInPixelsDi2015NewLine    {Di2015NewLine        get { return (double)GetValue(ScaleFactorProperty); }Di2015NewLine        set { SetValue(ScaleFactorProperty, value); }Di2015NewLine    }Di2015NewLine
19914601Di2015UniqueSeparatorScaleFactorProperty
19914601Di2015UniqueSeparatorEndReportPositionInPixelsPoperty
19914601Di2015UniqueSeparator    public double EndReportPositionInPixelsDi2015NewLine    {Di2015NewLine        get { return (double)GetValue(EndReportPositionInPixelsPoperty); }Di2015NewLine        set { SetValue(EndReportPositionInPixelsPoperty, value); }Di2015NewLine    }Di2015NewLine
19914628Di2015UniqueSeparatorpolygons.SelectMany(p => p.Points).Distinct()Di2015NewLine
19914811Di2015UniqueSeparator_box.SizeChanged += (sender, args) => _box.SizeMode = _box.Width < _cross.Width || _box.Height < _cross.Height ? PictureBoxSizeMode.Zoom : PictureBoxSizeMode.CenterImage;Di2015NewLine
19914816Di2015UniqueSeparator    public class GuidRole : IdentityRole<Guid, GuidUserRole> { Di2015NewLine        public GuidRole() {Di2015NewLine            Id = Guid.NewGuid();Di2015NewLine        }Di2015NewLine        public GuidRole(string name) : this() { Name = name; }Di2015NewLine    }Di2015NewLine    public class GuidUserRole : IdentityUserRole<Guid> { }Di2015NewLine    public class GuidUserClaim : IdentityUserClaim<Guid> { }Di2015NewLine    public class GuidUserLogin : IdentityUserLogin<Guid> { }Di2015NewLineDi2015NewLine    public class GuidUser : IdentityUser<Guid, GuidUserLogin, GuidUserRole, GuidUserClaim> {Di2015NewLine        public GuidUser() {Di2015NewLine            Id = Guid.NewGuid();Di2015NewLine        }Di2015NewLine        public GuidUser(string name) : this() { UserName = name; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private class GuidUserContext : IdentityDbContext<GuidUser, GuidRole, Guid, GuidUserLogin, GuidUserRole, GuidUserClaim> { }Di2015NewLine    private class GuidUserStore : UserStore<GuidUser, GuidRole, Guid, GuidUserLogin, GuidUserRole, GuidUserClaim> {Di2015NewLine        public GuidUserStore(DbContext context)Di2015NewLine            : base(context) {Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private class GuidRoleStore : RoleStore<GuidRole, Guid, GuidUserRole> {Di2015NewLine        public GuidRoleStore(DbContext context)Di2015NewLine            : base(context) {Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public async Task CustomUserGuidKeyTest() {Di2015NewLine        var manager = new UserManager<GuidUser, Guid>(new GuidUserStore(new GuidUserContext()));Di2015NewLine        GuidUser[] users = {Di2015NewLine            new GuidUser() { UserName = "test" },Di2015NewLine            new GuidUser() { UserName = "test1" }, Di2015NewLine            new GuidUser() { UserName = "test2" },Di2015NewLine            new GuidUser() { UserName = "test3" }Di2015NewLine            };Di2015NewLine        foreach (var user in users) {Di2015NewLine            UnitTestHelper.IsSuccess(await manager.CreateAsync(user));Di2015NewLine        }Di2015NewLine        foreach (var user in users) {Di2015NewLine            var u = await manager.FindByIdAsync(user.Id);Di2015NewLine            Assert.IsNotNull(u);Di2015NewLine            Assert.AreEqual(u.UserName, user.UserName);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19915035Di2015UniqueSeparatorSZArrayHelper
19915035Di2015UniqueSeparatorIList<T>
19915035Di2015UniqueSeparatorcollection.Clear
19915035Di2015UniqueSeparatorSZArrayHelper.Clear
19915153Di2015UniqueSeparator@First name
19915153Di2015UniqueSeparator@Last name
19915153Di2015UniqueSeparator@Staff number
19915153Di2015UniqueSeparator@Postal Code
19915153Di2015UniqueSeparator@Area code
19915153Di2015UniqueSeparator@FirstName
19915153Di2015UniqueSeparator@LastName
19915153Di2015UniqueSeparator@StaffNumber
19915153Di2015UniqueSeparator@PostalCode
19915153Di2015UniqueSeparator@AreaCode
19915178Di2015UniqueSeparatorpublic void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex == 0)Di2015NewLine    {Di2015NewLine        Form2 f = new Form2(e.RowIndex, ds.Tables[0]);Di2015NewLine        f.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19915178Di2015UniqueSeparatorpublic partial class Form2 : FormDi2015NewLine{Di2015NewLine    public Form2(int chartRowNumber, DataTable form1Table)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        listBox1.Items.Add(form1Table.Rows[chartRowNumber].ItemArray[0].ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
19915178Di2015UniqueSeparatorpublic void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine    if (e.ColumnIndex == 0)Di2015NewLine    {Di2015NewLine        Form2 f = new Form2(ds.Tables[0].Rows[e.RowIndex][0].ToString());Di2015NewLine        f.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class Form2 : FormDi2015NewLine{Di2015NewLine    public Form2(string item)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        listBox1.Items.Add(item);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19915257Di2015UniqueSeparatorcontext.Configuration.ProxyCreationEnabled = false;
19915265Di2015UniqueSeparatormap
19915265Di2015UniqueSeparatorindex-many-to-many
19915265Di2015UniqueSeparatormap-key-many-to-many
19915265Di2015UniqueSeparatorcomposite-element
19915265Di2015UniqueSeparatormap
19915265Di2015UniqueSeparatorindex-many-to-many
19915265Di2015UniqueSeparatorIDictionary
19915265Di2015UniqueSeparator<map name="Contracts" lazy="true">Di2015NewLine    <key column="employer_id"/>Di2015NewLine    <index-many-to-many column="employee_id" class="Employee"/>Di2015NewLine    <one-to-many class="Contract"/>Di2015NewLine</map>Di2015NewLineDi2015NewLine<map name="Connections" lazy="true">Di2015NewLine    <key column="node1_id"/>Di2015NewLine    <index-many-to-many column="node2_id" class="Node"/>Di2015NewLine    <many-to-many column="connection_id" class="Connection"/>Di2015NewLine</map>Di2015NewLine
19915265Di2015UniqueSeparatorIDictionary
19915265Di2015UniqueSeparatorcreate table It (Di2015NewLine    A_id int not null,Di2015NewLine    B_id int not null,Di2015NewLine    C_id int not null,Di2015NewLine    primary key (A_id, B_id),Di2015NewLine    foreign key (A_id) references A (Id),Di2015NewLine    foreign key (B_id) references B (Id),Di2015NewLine    foreign key (C_id) references C (Id)Di2015NewLine);Di2015NewLine
19915265Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    public virtual IDictionary<B, C> RelatedCEntities { get; set; }Di2015NewLine}Di2015NewLine
19915265Di2015UniqueSeparator<map name="RelatedCEntities" table="It">Di2015NewLine    <key column="A_id"/>Di2015NewLine    <index-many-to-many column="B_id" class="B"/>Di2015NewLine    <many-to-many column="C_id" class="C"/>Di2015NewLine</map>Di2015NewLine
19915265Di2015UniqueSeparatorIt
19915265Di2015UniqueSeparatormany-to-many
19915265Di2015UniqueSeparatorcomposite-element
19915265Di2015UniqueSeparatorName
19915265Di2015UniqueSeparator<element>
19915265Di2015UniqueSeparator<composite-element>
19915265Di2015UniqueSeparator<set name="SomeNames" table="some_names" lazy="true">Di2015NewLine    <key column="id"/>Di2015NewLine    <composite-element class="Eg.Name, Eg"> <!-- class attribute required -->Di2015NewLine        <property name="Initial"/>Di2015NewLine        <property name="First"/>Di2015NewLine        <property name="Last"/>Di2015NewLine    </composite-element>Di2015NewLine</set>Di2015NewLine
19915265Di2015UniqueSeparatorISet
19915265Di2015UniqueSeparatorEquals()
19915265Di2015UniqueSeparatorGetHashCode()
19915265Di2015UniqueSeparator<class name="Order" .... >Di2015NewLine    ....Di2015NewLine    <set name="PurchasedItems" table="purchase_items" lazy="true">Di2015NewLine        <key column="order_id">Di2015NewLine        <composite-element class="OrderLine">Di2015NewLine            <many-to-one name="PurchaseDetails class="Purchase"/>Di2015NewLine            <many-to-one name="Item" class="Item"/>Di2015NewLine        </composite-element>Di2015NewLine    </set>Di2015NewLine</class>Di2015NewLine
19915265Di2015UniqueSeparatorTuple<T1, T2>
19915265Di2015UniqueSeparatorItem1
19915265Di2015UniqueSeparatorItem2
19915425Di2015UniqueSeparatorServiceAccountCredential.Initializer initializer =Di2015NewLine    new ServiceAccountCredential.Initializer(serviceAccountEmail)Di2015NewLine    {Di2015NewLine        Scopes = serviceAccountScope,Di2015NewLine        User = "user1@myDomain.com"Di2015NewLine    }.FromCertificate(certificate);Di2015NewLineDi2015NewLinevar service1 = new DriveService(new BaseClientService.Initializer()Di2015NewLine{Di2015NewLine    HttpClientInitializer = new ServiceAccountCredential(initializer),Di2015NewLine    ApplicationName = appName,Di2015NewLine});Di2015NewLineDi2015NewLineinitializer.User = "user2@myDomain.com"Di2015NewLinevar service2 = new DriveService(new BaseClientService.Initializer()Di2015NewLine{Di2015NewLine    HttpClientInitializer = new ServiceAccountCredential(initializer),`Di2015NewLine    ApplicationName = appName,Di2015NewLine});Di2015NewLine
19915501Di2015UniqueSeparatorWeekTypeADTO
19915501Di2015UniqueSeparatorWeekTypeBDTO
19915501Di2015UniqueSeparatornull
19915501Di2015UniqueSeparatorpublic class EditSchoolyearDTODi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public DateTime EndDate { get; set; }Di2015NewLine    public WeekType StartWeek { get; set; }Di2015NewLine    public enum WeekType : intDi2015NewLine    {Di2015NewLine        A = 0,Di2015NewLine        AB = 1,Di2015NewLine    }Di2015NewLine    public int UserId { get; set; }Di2015NewLineDi2015NewLine    public WeekTypeADTO SchoolWeekA { get; set; }Di2015NewLine    public WeekTypeBDTO SchoolWeekB { get; set; }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class WeekTypeADTODi2015NewLine{Di2015NewLine    public int MaxPeriodPerWeekA { get; set; }Di2015NewLine    public IEnumerable<int> VisibleWeekDayIndexA {get; set;}Di2015NewLine    public DayOfWeek FirstDayOfWeekA { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WeekTypeBDTODi2015NewLine{Di2015NewLine    public int WeeklyRotation { get; set; }Di2015NewLine    public DayOfWeek FirstDayOfWeekB { get; set; }Di2015NewLine    public IEnumerable<int> VisibleWeekDayIndexB {get; set;}Di2015NewLine    public int MaxPeriodPerWeekB { get; set; }Di2015NewLine}Di2015NewLine
19915604Di2015UniqueSeparatormystring.Replace(".", ",");
19915843Di2015UniqueSeparatoroutput.Text
19915843Di2015UniqueSeparator{output.Text += textinput; n++;}Di2015NewLine
19915843Di2015UniqueSeparator+=
19915843Di2015UniqueSeparatoroutput.Text = output.Text + textinput;Di2015NewLine
19915843Di2015UniqueSeparator{output.Text += textinput + System.Environment.NewLine; n++;}Di2015NewLine
19915843Di2015UniqueSeparatoroutput
19915855Di2015UniqueSeparatorUIElement
19915855Di2015UniqueSeparatorScaleTransform
19915893Di2015UniqueSeparatorXDocument doc = XDocument.Load("input.xml");Di2015NewLineforeach (XElement child in doc.Descendants("Parent").Elements("Child"))Di2015NewLine{Di2015NewLine  Console.WriteLine("Id: {1}, Name: {2}", child.Attribute("ID").Value, child.Attribute("Name").Value);Di2015NewLine}Di2015NewLine
19915998Di2015UniqueSeparator[Simple] class Class1 {...}Di2015NewLine[Simple] interface Interface1 {...}Di2015NewLine
19915998Di2015UniqueSeparator[SimpleAttribute] class Class1 {...}Di2015NewLine[SimpleAttribute] interface Interface1 {...}Di2015NewLine
19916184Di2015UniqueSeparatorDataGridView
19916184Di2015UniqueSeparatorDataTable allDTs = abc;Di2015NewLineint rowCount = allDTs.Rows.Count - 1;Di2015NewLineforeach (DataRow row in t2.Rows)Di2015NewLine{Di2015NewLine    rowCount = rowCount + 1;Di2015NewLine    allDTs.Rows.Add();Di2015NewLineDi2015NewLine    int colCount = -1;Di2015NewLine    foreach (DataColumn col in t2.Columns)Di2015NewLine    {Di2015NewLine        colCount = colCount + 1;Di2015NewLine        if (colCount > allDTs.Columns.Count - 1) allDTs.Columns.Add(col.ColumnName);Di2015NewLine        allDTs.Rows[rowCount][colCount] = row[col];Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinerowCount = allDTs.Rows.Count - 1;Di2015NewLineforeach (DataRow row in t3.Rows)Di2015NewLine{Di2015NewLine    rowCount = rowCount + 1;Di2015NewLine    allDTs.Rows.Add();Di2015NewLineDi2015NewLine    int colCount = -1;Di2015NewLine    foreach (DataColumn col in t3.Columns)Di2015NewLine    {Di2015NewLine        colCount = colCount + 1;Di2015NewLine        if (colCount > allDTs.Columns.Count - 1) allDTs.Columns.Add(col.ColumnName);Di2015NewLine        allDTs.Rows[rowCount][colCount] = row[col];Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinedataGridView1.DataSource = allDTs;Di2015NewLine
19916184Di2015UniqueSeparatorDataTable
19916184Di2015UniqueSeparatorabc
19916184Di2015UniqueSeparatort2
19916184Di2015UniqueSeparatort3
19916195Di2015UniqueSeparatorcontext.Response.OutputStream.Length
19916195Di2015UniqueSeparatorPosition
19916195Di2015UniqueSeparatorid
19916195Di2015UniqueSeparatorFormatException
19916195Di2015UniqueSeparator<img />
19916234Di2015UniqueSeparatorbyte[]
19916234Di2015UniqueSeparatorunsafe
19916234Di2015UniqueSeparatorunsafe
19916234Di2015UniqueSeparatorpublic uint Crc32(byte[] data) {Di2015NewLine  uint result;Di2015NewLine  for (int i= 0; i < data.Length; i++) {Di2015NewLine    byte data_byte = data[i];Di2015NewLine    result = doCrc(...stuff with data_byte...);Di2015NewLine  }Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
19916234Di2015UniqueSeparatorfor
19916234Di2015UniqueSeparatordata.Length
19916248Di2015UniqueSeparatorprivate TreeModel createNewNode()Di2015NewLine{Di2015NewLine    var newNode = new TreeModel();Di2015NewLineDi2015NewLine    newNode.Children.Add(new BlockingTreeModel() {Parent = newNode});Di2015NewLineDi2015NewLine    return newNode;Di2015NewLine}Di2015NewLine
19916248Di2015UniqueSeparatorParent
19916248Di2015UniqueSeparatorprivate TreeModel _parent;Di2015NewLinepublic TreeModel ParentDi2015NewLine{Di2015NewLine    get { return _parent; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _parent = value;Di2015NewLine        NotifyPropertyChange(() => Parent);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19916248Di2015UniqueSeparatorObservableCollection
19916248Di2015UniqueSeparatorAdd()
19916248Di2015UniqueSeparatorpublic class HierarchicalObservableCollection<TParent, TItems> : ObservableCollection<TItems>Di2015NewLine{Di2015NewLine    public TParent Parent { get; protected set; }Di2015NewLineDi2015NewLine    public Action<TItems, TParent> ItemParentSetter { get; protected set; }Di2015NewLineDi2015NewLine    public HierarchicalObservableCollection(TParent parent, Action<TItems, TParent> parentSetter)Di2015NewLine    {Di2015NewLine        Parent = parent;Di2015NewLine        ItemParentSetter = parentSetter;Di2015NewLine    }Di2015NewLineDi2015NewLine    public new void Add(TItems item)Di2015NewLine    {Di2015NewLine        if (item != null)Di2015NewLine            ItemParentSetter(item, Parent);Di2015NewLine        base.Add(item);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19916248Di2015UniqueSeparatorTreeModel
19916248Di2015UniqueSeparatorpublic class TreeModelDi2015NewLine{Di2015NewLine    public TreeModel Parent { get; set; }Di2015NewLineDi2015NewLine    public HierarchicalObservableCollection<TreeModel, TreeModel> Children { get; set; }Di2015NewLineDi2015NewLine    public TreeModel()Di2015NewLine    {Di2015NewLine        Children = new HierarchicalObservableCollection<TreeModel, TreeModel>(this, (i, p) => i.Parent = p);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19916248Di2015UniqueSeparatorreturn new TreeModel()Di2015NewLine{Di2015NewLine    Parent = null,Di2015NewLine    Children =Di2015NewLine    {Di2015NewLine        new BlockingTreeModel() // <- this will call Add() which will set the Parent too.Di2015NewLine    };Di2015NewLine
19916342Di2015UniqueSeparator(from loc in Locations select loc)Di2015NewLine    .Concat(from loc in new[] { "Not Found" } select loc);Di2015NewLine
19916342Di2015UniqueSeparatorLocations.Concat(new[] { "Not Found" });Di2015NewLine
19916459Di2015UniqueSeparator     var context = new SuburbanEntities())Di2015NewLine     context.Attach(globalSetting);Di2015NewLine     context.SaveChanges();Di2015NewLine
19916490Di2015UniqueSeparatorPOST
19916490Di2015UniqueSeparatorpublic HttpResponseMessage Post([FromBody]string value)Di2015NewLine
19916490Di2015UniqueSeparatorPOST
19916490Di2015UniqueSeparatorpublic HttpResponseMessage Post(HttpRequestMessage request)Di2015NewLine
19916521Di2015UniqueSeparatorChoices
19916521Di2015UniqueSeparatorGrammarBuilder
19916521Di2015UniqueSeparatorChoices.Add
19916521Di2015UniqueSeparator  // Create alternatives for female names and add a phrase.Di2015NewLine  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });Di2015NewLine  females.Append("on her");Di2015NewLineDi2015NewLine  // Create alternatives for male names and add a phrase.Di2015NewLine  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });Di2015NewLine  males.Append("on his");Di2015NewLineDi2015NewLine  // Create a Choices object that contains an array of alternativeDi2015NewLine  // GrammarBuilder objects.Di2015NewLine  Choices people = new Choices();Di2015NewLine  people.Add(new Choices(new GrammarBuilder[] {females, males}));Di2015NewLineDi2015NewLine  // Create a Choices object that contains a set of alternative phone types.Di2015NewLine  Choices phoneType = new Choices();Di2015NewLine  phoneType.Add(new string[] { "cell", "home", "work" });Di2015NewLineDi2015NewLine  // Construct the phrase.Di2015NewLine  GrammarBuilder gb = new GrammarBuilder();Di2015NewLine  gb.Append("call");Di2015NewLine  gb.Append(people);Di2015NewLine  gb.Append(phoneType);Di2015NewLine  gb.Append(new GrammarBuilder("phone"), 0, 1);Di2015NewLine
19916521Di2015UniqueSeparatorSemanticResultValues
19916521Di2015UniqueSeparatorChoice
19916521Di2015UniqueSeparatorSemanticResultKeys
19916521Di2015UniqueSeparatorChoice
19916685Di2015UniqueSeparatorpublic partial class NorthwindDataContextDi2015NewLine{Di2015NewLine    public override void SubmitChanges(ConflictMode failureMode)Di2015NewLine    {Di2015NewLine        this.EmptyNullProperties();Di2015NewLineDi2015NewLine        base.SubmitChanges(failureMode);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void EmptyNullProperties()Di2015NewLine    {Di2015NewLine        var propertiesToEmpty =Di2015NewLine            from entity in this.GetChangeSet().InsertsDi2015NewLine            from property in entity.GetType().GetProperties()Di2015NewLine            where property.CanRead && property.CanWriteDi2015NewLine            where property.PropertyType == typeof(string)Di2015NewLine            where property.GetValue(entity) == nullDi2015NewLine            select new { entity, property };Di2015NewLineDi2015NewLine        foreach (var pair in propertiesToEmpty)Di2015NewLine        {Di2015NewLine            pair.property.SetValue(pair.entity, string.Empty);Di2015NewLine        }Di2015NewLine    }Di2015NewLine} Di2015NewLine
19916771Di2015UniqueSeparator    protected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine    {Di2015NewLine        base.OnModelCreating(modelBuilder);Di2015NewLineDi2015NewLine        modelBuilder.Entity<Content>()Di2015NewLine            .HasMany(c => c.Editors)Di2015NewLine            .WithOptional()Di2015NewLine            .WillCascadeOnDelete(false);Di2015NewLineDi2015NewLine        modelBuilder.Entity<Content>()Di2015NewLine            .HasRequired(c => c.Owner)Di2015NewLine            .WithOptional()Di2015NewLine            .WillCascadeOnDelete(false);Di2015NewLineDi2015NewLine        modelBuilder.Entity<IdentityUserLogin>().HasKey<string>(l => l.UserId);Di2015NewLine        modelBuilder.Entity<IdentityRole>().HasKey<string>(r => r.Id);Di2015NewLine        modelBuilder.Entity<IdentityUserRole>().HasKey(r => new { r.RoleId, r.UserId });Di2015NewLine    }Di2015NewLine
19916827Di2015UniqueSeparator<%@ ServiceHostDi2015NewLine  Language="C#"Di2015NewLine  Debug="true"Di2015NewLine  Service="myNameSpace.IReportingService, myNameSpace"Di2015NewLine  Factory="Autofac.Integration.Wcf.AutofacServiceHostFactory, Autofac.Integration.Wcf" %>Di2015NewLine
19916827Di2015UniqueSeparatorbuilder.RegisterType<ReportingService>()Di2015NewLine  .As<IReportingService>()Di2015NewLine  .EnableInterfaceInterceptors()Di2015NewLine  .InterceptedBy(typeof(AuditInterceptor));Di2015NewLine
19916910Di2015UniqueSeparatorElement.setAttribute("width", Element.offsetWidth, 0);Di2015NewLineElement.setAttribute("height", Element.offsetHeight, 0);Di2015NewLineElement.setAttribute("src", "images/newimage.png", 0);Di2015NewLine
19916978Di2015UniqueSeparatorresults.uShorts[0] = (unsigned short)UnsignedShorts[0];Di2015NewLine
19917021Di2015UniqueSeparatorvar
19917021Di2015UniqueSeparatorIEnumerable result = null; //or whatever it isDi2015NewLineDi2015NewLineif(some condition){Di2015NewLine  result=queryexecute(some query);Di2015NewLine}Di2015NewLineDi2015NewLine...Some non dependent code...Di2015NewLineDi2015NewLineif(result != null){Di2015NewLine  ....Di2015NewLine}Di2015NewLine
19917349Di2015UniqueSeparatorfor
19917349Di2015UniqueSeparatorsortNumber1.Text = numbers[0].ToString();Di2015NewLinesortNumber2.Text = numbers[1].ToString();Di2015NewLinesortNumber3.Text = numbers[2].ToString();Di2015NewLinesortNumber4.Text = numbers[3].ToString();Di2015NewLinesortNumber5.Text = numbers[4].ToString();Di2015NewLine
19917379Di2015UniqueSeparatorsettings.Split('\\"');Di2015NewLine
19917379Di2015UniqueSeparator'
19917379Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    string test = "\\"test1\\"test2";Di2015NewLine    var arr = test.Split('"');Di2015NewLine    Console.WriteLine (arr);Di2015NewLine}Di2015NewLine
19917379Di2015UniqueSeparatortest1Di2015NewLinetest2Di2015NewLine
19917379Di2015UniqueSeparatorpublic string[] Split(Di2015NewLine    params char[] separatorDi2015NewLine)Di2015NewLine
19917612Di2015UniqueSeparator  private void HandleClosed(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine      var list = new[]Di2015NewLine      {Di2015NewLine          _service.ExecuteAsync("first task"),Di2015NewLine          _service.ExecuteAsync("second task"),Di2015NewLine          _service.ExecuteAsync("third task")Di2015NewLine      };Di2015NewLineDi2015NewLine      //uncommenting this line blocks all three previous activities as expectedDi2015NewLine      //as it drives the current main thread to wait for other tasks waiting to be executed by the main thread.Di2015NewLineDi2015NewLine      //Task.WaitAll(list);Di2015NewLine  }Di2015NewLine
19917612Di2015UniqueSeparatorTask.WaitAll
19917612Di2015UniqueSeparatorMicrosoft.Bcl.Async
19917612Di2015UniqueSeparatorasync/await
19917612Di2015UniqueSeparatorprivate async void HandleClosed(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var list = new[]Di2015NewLine  {Di2015NewLine      _service.ExecuteAsync("first task"),Di2015NewLine      _service.ExecuteAsync("second task"),Di2015NewLine      _service.ExecuteAsync("third task")Di2015NewLine  };Di2015NewLineDi2015NewLine    //uncommenting this line blocks all three previous activities as expectedDi2015NewLine    //as it drives the current main thread to wait for other tasks waiting to be executed by the main thread.Di2015NewLineDi2015NewLine    await TaskEx.WhenAll(list);Di2015NewLine}Di2015NewLine
19917612Di2015UniqueSeparatorawait TaskEx.WhenAll(list);
19917612Di2015UniqueSeparatorawait
19917612Di2015UniqueSeparatorprivate void runBrowserThread(Uri url) {Di2015NewLine    var th = new Thread(() => {Di2015NewLine        var br = new WebBrowser();Di2015NewLine        br.DocumentCompleted += browser_DocumentCompleted;Di2015NewLine        br.Navigate(url);Di2015NewLine        Application.Run();Di2015NewLine    });Di2015NewLine    th.SetApartmentState(ApartmentState.STA);Di2015NewLine    th.Start();Di2015NewLine}Di2015NewLineDi2015NewLinevoid browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e) {Di2015NewLine    var br = sender as WebBrowser;Di2015NewLine    if (br.Url == e.Url) {Di2015NewLine        Console.WriteLine("Natigated to {0}", e.Url);Di2015NewLine        Application.ExitThread();   // Stops the threadDi2015NewLine    }Di2015NewLine}Di2015NewLine
19917652Di2015UniqueSeparatorvar result = (from row in doc.DocumentNode.SelectNodes("//table[@class='data stats']/tbody/tr")Di2015NewLine                         select newDi2015NewLine                         {Di2015NewLine                             PlayerName = row.ChildNodes[1].InnerText.Trim(),Di2015NewLine                             Team = row.ChildNodes[2].InnerText.Trim(),Di2015NewLine                             Position = row.ChildNodes[3].InnerText.Trim()Di2015NewLine                         }).ToList();Di2015NewLine
19917652Di2015UniqueSeparatorChildNodes
19917652Di2015UniqueSeparatorvar result = (from row in doc.DocumentNode.SelectNodes("//table[@class='data stats']/tbody/tr")Di2015NewLine                          select newDi2015NewLine                          {Di2015NewLine                              PlayerName = row.ChildNodes[1].InnerText.Trim(),Di2015NewLine                              PlayerUrl = row.ChildNodes[1].ChildNodes[0].Attributes["href"].Value,Di2015NewLine                              Team = row.ChildNodes[2].InnerText.Trim(),Di2015NewLine                              Position = row.ChildNodes[3].InnerText.Trim()Di2015NewLine                          }).ToList();Di2015NewLine
19917652Di2015UniqueSeparatorAttributes
19917653Di2015UniqueSeparatori
19917653Di2015UniqueSeparatorwhile (_actionQueue.Count > 0)Di2015NewLine{Di2015NewLine    _actionQueue.Dequeue().Invoke();Di2015NewLine}Di2015NewLine
19917653Di2015UniqueSeparatorint originalCount = _actionQueue.Dequeue();Di2015NewLinefor (int i = 0; i < originalCount; i++)Di2015NewLine{Di2015NewLine    _actionQueue.Dequeue().Invoke();Di2015NewLine}Di2015NewLine
19917660Di2015UniqueSeparatorstring path = @"c:\\temp\\MyIOFile.txt";Di2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLineDi2015NewLine                string file = File.ReadAllText(path);Di2015NewLine                //The code wrote to the right hand side finds the file listed from my C driveDi2015NewLineDi2015NewLine                string longstr = file;Di2015NewLineDi2015NewLine                string[] strs = longstr.Split(':', '*');Di2015NewLineDi2015NewLine                foreach (string ss in strs)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(ss);Di2015NewLine                }Di2015NewLineDi2015NewLine                //before text is written, you say you want to modify itDi2015NewLine                string newText = "*enter new file contents here*";Di2015NewLineDi2015NewLine                //you can add new text (Append) orDi2015NewLine                //change all the contents of the fileDi2015NewLine                //set the value of whatToDo to "Append" to add new text to the fileDi2015NewLine                //set the value of whatToDo to any value other than "Append" to replaceDi2015NewLine                //the entire contents of the filw with the data in variable newTextDi2015NewLine                string whatToDo = "Append";Di2015NewLineDi2015NewLine                if (whatToDo == "Append")Di2015NewLine                {Di2015NewLine                    //append to existing textDi2015NewLine                    //variable file contains old textDi2015NewLine                    //varaible newText contains the new text to be appendedDi2015NewLine                    File.AppendAllText(path, newText);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    //creates new contents in the file.Di2015NewLine                    //varaiable new text contains the new text representingDi2015NewLine                    //file contentsDi2015NewLine                    File.WriteAllText(path, newText);Di2015NewLine                }Di2015NewLineDi2015NewLineDi2015NewLine                //string file = File.AppendAllText(@"C:\\Users\\path\\.......");Di2015NewLineDi2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                Console.WriteLine("*** Error:" + ex.Message);Di2015NewLine            }Di2015NewLine            Console.WriteLine("*** Press Enter key to exit");Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine
19917660Di2015UniqueSeparator    string path = @"c:\\temp\\MyIOFile.txt";Di2015NewLine    if (!File.Exists(path))Di2015NewLine    {Di2015NewLine        // File does not exist - What do you want to do? Di2015NewLine    }Di2015NewLine    tryDi2015NewLine    {Di2015NewLine    // Open the file to read from and store result in a string variableDi2015NewLine    string readText = File.ReadAllText(path);Di2015NewLineDi2015NewLine    // modify the text somehow before appending to fileDi2015NewLine    string appendText =readText+ Environment.NewLine+ "This is extra text";Di2015NewLine    File.AppendAllText(path, appendText, Encoding.UTF8);Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        Console.WriteLine ("***Error:" + ex.Message);Di2015NewLine        // display errorsDi2015NewLine    }Di2015NewLine
19917772Di2015UniqueSeparatorxmlDS.XPath = "/resdat";Di2015NewLine
19917772Di2015UniqueSeparatorxmlDS.XPath = "/resdat/entry";Di2015NewLine
19917772Di2015UniqueSeparator       <asp:GridView ID="adminXML" runat="server" AutoGenerateColumns="False" OnRowCommand="adminXML_RowCommand" >Di2015NewLine        <Columns>Di2015NewLine            <asp:BoundField HeaderText="File Name" DataField="filename" SortExpression="ProductID" />Di2015NewLine            <asp:ButtonField CommandName="Del" Text="Delete" />Di2015NewLine       </Columns>Di2015NewLine       </asp:GridView>Di2015NewLine
19917772Di2015UniqueSeparator    protected void adminXML_RowCommand(object sender, CommandEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.CommandName == "Del")Di2015NewLine        {Di2015NewLine            /*Di2015NewLine            Do DeleteDi2015NewLine            */Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19917772Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!Page.IsPostBack)Di2015NewLine        {Di2015NewLine            BindDataSource();Di2015NewLine            adminXML.Visible = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void adminXML_RowCommand(object sender, CommandEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.CommandName == "Del")Di2015NewLine        {Di2015NewLine            /*Di2015NewLine            Do DeleteDi2015NewLine            */Di2015NewLine            BindDataSource();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void BindDataSource()Di2015NewLine    {Di2015NewLine        XmlDataSource xmlDS = new XmlDataSource();Di2015NewLine        xmlDS.EnableCaching = false;Di2015NewLine        xmlDS.DataFile = "~/App_Data/resdat.xml";Di2015NewLine        xmlDS.TransformFile = "~/App_Data/adminFormat.xslt";Di2015NewLine        xmlDS.XPath = "/resdat/entry";Di2015NewLine        adminXML.DataSource = xmlDS;Di2015NewLine        adminXML.DataBind();Di2015NewLine    }Di2015NewLine
19917796Di2015UniqueSeparatorcatch
19917796Di2015UniqueSeparatorcatch(Exception ex)
19918073Di2015UniqueSeparatorexes
19918073Di2015UniqueSeparatorvar result = fileExceptions.GroupBy(e => e.Ex.GetType().Name)Di2015NewLine    .Select(g => new Di2015NewLine        { Di2015NewLine          g.Key, Files = string.Join("\\r\\n", g.Select(x => x.FileName).ToArray())Di2015NewLine        });Di2015NewLine
19918133Di2015UniqueSeparatorSerializable
19918133Di2015UniqueSeparatorFileStream
19918245Di2015UniqueSeparatorOpenFileDialog
19918245Di2015UniqueSeparatorprivate void openToolStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    OpenFileDialog ofd = new OpenFileDialog();Di2015NewLine    DialogResult result = ofd.ShowDialog();Di2015NewLine    if(result != DialogResult.Cancel)Di2015NewLine    {Di2015NewLine         richTextBox1.Text = File.ReadAllText(ofd.FileName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19918278Di2015UniqueSeparatorList<List<cEspecie>> items1 = new List<List<cEspecie>>();Di2015NewLine// ... add items...Di2015NewLineXamlServices.Save(@"c:\\path\\to\\file.xaml", items1);Di2015NewLine
19918278Di2015UniqueSeparatorvar items2 = XamlServices.Load(@"c:\\path\\to\\file.xaml");Di2015NewLine
19918278Di2015UniqueSeparatorImagen
19918278Di2015UniqueSeparatorBitmapImage
19918278Di2015UniqueSeparatorBitmapSource
19918278Di2015UniqueSeparatorImagen
19918278Di2015UniqueSeparator[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
19918278Di2015UniqueSeparator<List x:TypeArguments="List(w:cEspecie)"Di2015NewLine      Capacity="4"Di2015NewLine      xmlns="clr-namespace:System.Collections.Generic;assembly=mscorlib"Di2015NewLine      xmlns:w="clr-namespace:WpfXUnit;assembly=WpfXUnit"Di2015NewLine      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine  <List x:TypeArguments="w:cEspecie"Di2015NewLine        Capacity="4">Di2015NewLine    <w:cEspecie ColorDeLaGrafica="zomg"Di2015NewLine                Decaimiento="42"Di2015NewLine                Imagen="file:///w:/dump/test.png"Di2015NewLine                Movilidad="76"Di2015NewLine                Nombre="'ello gov'na"Di2015NewLine                Seleccion="True"Di2015NewLine                TiempoDeVida="32"Di2015NewLine                Tipo="1" />Di2015NewLine  </List>Di2015NewLine</List>Di2015NewLine
19918367Di2015UniqueSeparatorWM_SHOWME
19918371Di2015UniqueSeparatorstatic int? _timeout = null;Di2015NewLineDi2015NewLineprivate static int GetTimeout()Di2015NewLine{Di2015NewLine    if (_timeout != null) return (int)_timeout;Di2015NewLine    _timeout = GetTimeoutFromConfig();Di2015NewLine    return (int)_timeout;Di2015NewLine}Di2015NewLine
19918371Di2015UniqueSeparatorstatic int? _timeout = null;Di2015NewLineprivate const int def_timeout = 120;   Di2015NewLineDi2015NewLineprivate static int GetTimeout()Di2015NewLine{Di2015NewLine    if (_timeout != null) return (int)_timeout;Di2015NewLine    int? to = GetTimeoutFromConfig();Di2015NewLine    _timeout = (to ?? def_timeout); Di2015NewLineDi2015NewLine    return (int)_timeout;Di2015NewLine}Di2015NewLine
19918371Di2015UniqueSeparatorprivate int? GetTimeoutFromConfig()Di2015NewLine{Di2015NewLine    int val;Di2015NewLine    bool converted = int.TryParse(ConfigurationManager.AppSettings["TimeoutValue"], out val);Di2015NewLineDi2015NewLine    return (converted ? val : null);Di2015NewLine} Di2015NewLine
19918540Di2015UniqueSeparatorclass SerialThingDi2015NewLine{Di2015NewLineDi2015NewLine    public delegate void DataReceivedDelegate(string data);Di2015NewLine    public event DataReceivedDelegate DataReceived;Di2015NewLineDi2015NewLine    static SerialPort myDevice;Di2015NewLineDi2015NewLine    public SerialThing()Di2015NewLine    {Di2015NewLine        myDevice = new SerialPort();Di2015NewLine        myDevice.DataReceived += new SerialDataReceivedEventHandler(myDevice_DataReceived);Di2015NewLine    }Di2015NewLineDi2015NewLine    void myDevice_DataReceived(object sender, SerialDataReceivedEventArgs e)Di2015NewLine    {Di2015NewLine        // ... grab the data and place into a string called "data" ...Di2015NewLine        string data = "";Di2015NewLineDi2015NewLine        // raise our custom event:Di2015NewLine        if (DataReceived != null)Di2015NewLine        {Di2015NewLine            DataReceived(data);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19918540Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLineDi2015NewLine    SerialThing mySerialThing;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        mySerialThing = new SerialThing();Di2015NewLine        mySerialThing.DataReceived += new SerialThing.DataReceivedDelegate(mySerialThing_DataReceived);Di2015NewLine    }Di2015NewLineDi2015NewLine    private delegate void DataReceivedDelegate(string data);Di2015NewLineDi2015NewLine    void mySerialThing_DataReceived(string data)Di2015NewLine    {Di2015NewLine        if (this.InvokeRequired)Di2015NewLine        {Di2015NewLine            this.Invoke(new DataReceivedDelegate(mySerialThing_DataReceived), new Object[] { data });Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            textBox1.Text = data;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
19918540Di2015UniqueSeparatorthis
19918540Di2015UniqueSeparatorthis.Invoke()
19918540Di2015UniqueSeparatorIf
19918540Di2015UniqueSeparatorthis
19918540Di2015UniqueSeparatorIf
19918540Di2015UniqueSeparatorelse
19918540Di2015UniqueSeparatorIf
19918540Di2015UniqueSeparator    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        mySerialThing = new SerialThing();Di2015NewLine        mySerialThing.DataReceived += delegate (string data)Di2015NewLine        {Di2015NewLine            this.Invoke((MethodInvoker)(delegate() { textBox1.Text = data; }));Di2015NewLine        };Di2015NewLine    }Di2015NewLine
19918784Di2015UniqueSeparatorvar newString = yourString.Replace("ï¿½", "");Di2015NewLine
19918784Di2015UniqueSeparatoryourString
19918784Di2015UniqueSeparatorCafï¿½
19918784Di2015UniqueSeparatorReplace
19918867Di2015UniqueSeparator{Binding}
19918867Di2015UniqueSeparator<Button Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.OpenSessionCommand}" CommandParemeter="{Binding}" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="243" Height="42">Di2015NewLine    <TextBlock TextWrapping="Wrap">Di2015NewLine        <Run Text="{Binding SessionName}"/><LineBreak/>Di2015NewLine        <Run Text="{Binding Genre}"/><Run Text=" - "/>Di2015NewLine        <Run Text="{Binding Tempo}"/>Di2015NewLine    </TextBlock>Di2015NewLine</Button>Di2015NewLine
19918867Di2015UniqueSeparatorpublic class DelegateCommand<T> : ICommand where T : classDi2015NewLine{Di2015NewLine    private readonly Action<T> _command;Di2015NewLine    private readonly Func<T, bool> _canExecute;Di2015NewLine    public event EventHandler CanExecuteChangedDi2015NewLine    {Di2015NewLine        add { CommandManager.RequerySuggested += value; }Di2015NewLine        remove { CommandManager.RequerySuggested -= value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public DelegateCommand(Action<T> command, Func<T, bool> canExecute = null)Di2015NewLine    {Di2015NewLine        if (command == null)Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        _canExecute = canExecute;Di2015NewLine        _command = command;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        _command(parameter as T);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return _canExecute == null || _canExecute(parameter as T);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19918867Di2015UniqueSeparator    public ICommand OpenSessionCommand { get { return new DelegateCommand<Button>(OpenSession); } }Di2015NewLineDi2015NewLine    public void OpenSession(Button button)Di2015NewLine    {Di2015NewLine        ContinueReceiving = false;Di2015NewLine        dispatcherTimer.Stop();Di2015NewLineDi2015NewLine        Messenger.Default.Send<NavigateMessage>(new NavigateMessage(SessionViewModel.ViewName, this));Di2015NewLine    }Di2015NewLine
19918929Di2015UniqueSeparatorBackgroundTaskManager
19919000Di2015UniqueSeparatorPreRequestFilter
19919000Di2015UniqueSeparatorRequest.PathInfo
19919000Di2015UniqueSeparatorPreRequestFilter
19919000Di2015UniqueSeparatorRequestFilters
19919000Di2015UniqueSeparatorrequestDto.GetType()
19919000Di2015UniqueSeparatorhttpReq.PathInfo
19919000Di2015UniqueSeparatorthis.RequestFilters.Add((httpReq, httpResp, requestDto) =>Di2015NewLine{Di2015NewLine    if (AppConfig.RequireSsl) Di2015NewLine        new RequireSslAttribute().Execute(httpReq, httpResp, requestDto);Di2015NewLineDi2015NewLine    // Force authentication if the request is not explicitly made publicDi2015NewLine    if (!AppConfig.IsPublic(httpReq, requestDto.GetType()))Di2015NewLine        new AuthenticateAttribute().Execute(httpReq, httpResp, requestDto);Di2015NewLine});Di2015NewLine
19919036Di2015UniqueSeparatorMain
19919036Di2015UniqueSeparatorMain
19919036Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    // this...Di2015NewLine    static string someValue = SomeObject.FetchSomeValue();Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // no code hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
19919036Di2015UniqueSeparatorTypeInitializationException
19919036Di2015UniqueSeparatorMain()
19919036Di2015UniqueSeparatortry/catch
19919036Di2015UniqueSeparatorTypeInitializationException
19919036Di2015UniqueSeparatorThereIsTooMuchUnvalidatedLogicAtTheClassLevelAndYouShouldPutItInAMethodException
19919109Di2015UniqueSeparatorprivate async void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    string text = TextBlock1.Text;Di2015NewLine    TextBlock1.Text = "Bazinga!";Di2015NewLine    await Task.Delay(5000);Di2015NewLine    TextBlock1.Text = text;Di2015NewLine}Di2015NewLine
19919158Di2015UniqueSeparator var r = new Random();Di2015NewLine r.Next(min,max);Di2015NewLine
19919186Di2015UniqueSeparatorforeach (ListViewItem f in lstProjectFiles.Items)Di2015NewLine{Di2015NewLine    Console.WriteLine(f.SubItems[0].Text);Di2015NewLine    Console.WriteLine(f.SubItems[1].Text);Di2015NewLine}Di2015NewLine
19919216Di2015UniqueSeparatorEquals()
19919216Di2015UniqueSeparatorGetHashCode()
19919361Di2015UniqueSeparatorf
19919361Di2015UniqueSeparatorstring certDate = "25-Oct-13 01.08.24.7320000 PM";Di2015NewLineDateTime certifiedDateTime;Di2015NewLineDateTime.TryParseExact(certDate, "dd-MMM-yy hh.mm.ss.fffffff tt", Di2015NewLine   CultureInfo.InvariantCulture, Di2015NewLine   System.Globalization.DateTimeStyles.None, Di2015NewLine   out certifiedDateTime);Di2015NewLinecertifiedDateTime.Dump();Di2015NewLine
19919361Di2015UniqueSeparator0
19919361Di2015UniqueSeparatorDateTime.TryParseExact(certDate, "dd-MMM-yy hh.mm.ss.fffffff00 tt", Di2015NewLine   CultureInfo.InvariantCulture, Di2015NewLine   System.Globalization.DateTimeStyles.None, Di2015NewLine   out certifiedDateTime);Di2015NewLine
19919403Di2015UniqueSeparatorpublic class TestViewModelDi2015NewLine{Di2015NewLine    [Required]Di2015NewLine    [Display(Name = "Work section")]Di2015NewLine    // This represents the selected ID on the dropdownDi2015NewLine    public int WorkSectionId { get; set; }Di2015NewLine    // The dropdown itselfDi2015NewLine    public SelectList WorkSections { get; set; }Di2015NewLine    // other propertiesDi2015NewLine}Di2015NewLine
19919403Di2015UniqueSeparatorSelectList
19919403Di2015UniqueSeparatorprivate SelectList BuildSelectList<TSource>(IEnumerable<TSource> source,Di2015NewLine    Expression<Func<TSource, int>> valueKey, Expression<Func<TSource, string>> textKey,Di2015NewLine    object selectedValue = null)Di2015NewLine{Di2015NewLine    var selectedValueKey = ((MemberExpression)(MemberExpression)valueKey.Body).Member.Name;Di2015NewLine    var selectedTextKey = ((MemberExpression)(MemberExpression)textKey.Body).Member.Name;Di2015NewLineDi2015NewLine    return new SelectList(source, selectedValueKey, selectedTextKey, selectedValue);Di2015NewLine}Di2015NewLine
19919403Di2015UniqueSeparatorSelectList
19919403Di2015UniqueSeparatorCode
19919403Di2015UniqueSeparatorSource
19919403Di2015UniqueSeparatorWorkSection
19919403Di2015UniqueSeparatorpublic string CodeSourceDi2015NewLine{Di2015NewLine    get { return this.Code + ":" + this.Source; }Di2015NewLine}Di2015NewLine
19919403Di2015UniqueSeparatorSelectList
19919403Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    var workSections = // ... fetch from databaseDi2015NewLineDi2015NewLine    TestViewModel model = new TestViewModel();Di2015NewLine    model.WorkSections = BuildSelectList(workSections, m => m.ID, m => m.CodeSource);Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
19919403Di2015UniqueSeparator@Html.DropDownListFor(m => m.WorkSectionId, Model.WorkSections, "--Please Select--")Di2015NewLine@Html.ValidationMessageFor(m => m.WorkSectionId)Di2015NewLine
19919403Di2015UniqueSeparatorBuildSelectList
19919403Di2015UniqueSeparator[NonAction]
19919403Di2015UniqueSeparatorpublic class BaseController : ControllerDi2015NewLine{Di2015NewLine    [NonAction]Di2015NewLine    public SelectList BuildSelectList<TSource>(IEnumerable<TSource> source,Di2015NewLine        Expression<Func<TSource, int>> valueKey, Expression<Func<TSource, string>> textKey,Di2015NewLine        object selectedValue = null)Di2015NewLine    {Di2015NewLine        var selectedValueKey = ((MemberExpression)(MemberExpression)valueKey.Body).Member.Name;Di2015NewLine        var selectedTextKey = ((MemberExpression)(MemberExpression)textKey.Body).Member.Name;Di2015NewLineDi2015NewLine        return new SelectList(source, selectedValueKey, selectedTextKey, selectedValue);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19919403Di2015UniqueSeparatorBaseController
19919403Di2015UniqueSeparatorpublic HomeController : BaseControllerDi2015NewLine{Di2015NewLine    // Di2015NewLine}Di2015NewLine
19919408Di2015UniqueSeparatordia.DataTextFormatString = "{0:dd/MM/yyyy}";Di2015NewLine
19919430Di2015UniqueSeparatorbyte[] GetImage()Di2015NewLine
19919430Di2015UniqueSeparatorString StartImageDownload()Di2015NewLinebool IsComplete(String token)Di2015NewLinebyte[] ReadData(String token)Di2015NewLine
19919430Di2015UniqueSeparatorws.BeginGetImage(()=>{Di2015NewLine    // this is invoked when the result has arrivedDi2015NewLine    byte[] data = ws.EndGetImage();Di2015NewLine});Di2015NewLine// execution arrives here before the data does - the previous call doesn't blockDi2015NewLine
19919557Di2015UniqueSeparatorTimeSpan ts = new TimeSpan(5,0,0);Di2015NewLinevar earned = DateTime.Now - ts;Di2015NewLineConsole.Write(earned);Di2015NewLine
19919557Di2015UniqueSeparatorstring input = "Attained:17 months ago";Di2015NewLinestring pattern = @"Attained:(?<value>[0-9]+) (?<unit>(years|months|days)) ago";Di2015NewLinevar match = Regex.Match(input, pattern);Di2015NewLineDi2015NewLineif(match.Success)Di2015NewLine{Di2015NewLine    int value = Int32.Parse(match.Groups["value"].Value);Di2015NewLine    string unit = match.Groups["unit"].Value;Di2015NewLine    Console.WriteLine(value);Di2015NewLine    Console.WriteLine(unit);Di2015NewLine}Di2015NewLine
19919659Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing MyEmbbedFile;Di2015NewLineDi2015NewLinenamespace ProjectNameSpaceDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>Di2015NewLine            {Di2015NewLine                var resName = "ProjectNameSpace.MyEmbbedFile.dll";Di2015NewLine                var thisAssembly = Assembly.GetExecutingAssembly();Di2015NewLine                using (var input = thisAssembly.GetManifestResourceStream(resName))Di2015NewLine                {Di2015NewLine                    return input != nullDi2015NewLine                         ? Assembly.Load(StreamToBytes(input))Di2015NewLine                         : null;Di2015NewLine                }Di2015NewLine            };Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            MyEmbbedFileApp app = new MyEmbbedFileApp();Di2015NewLine            app.DoStuff();Di2015NewLine        }Di2015NewLineDi2015NewLine        private static byte[] StreamToBytes(Stream input)Di2015NewLine        {Di2015NewLine            var capacity = input.CanSeek ? (int)input.Length : 0;Di2015NewLine            using (var output = new MemoryStream(capacity))Di2015NewLine            {Di2015NewLine                int readLength;Di2015NewLine                var buffer = new byte[4096];Di2015NewLineDi2015NewLine                doDi2015NewLine                {Di2015NewLine                    readLength = input.Read(buffer, 0, buffer.Length);Di2015NewLine                    output.Write(buffer, 0, readLength);Di2015NewLine                }Di2015NewLine                while (readLength != 0);Di2015NewLineDi2015NewLine                return output.ToArray();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19919768Di2015UniqueSeparatorPageIndex
19919768Di2015UniqueSeparatorPageCount
19919768Di2015UniqueSeparatorPageIndex
19919768Di2015UniqueSeparatorPageCount
19919768Di2015UniqueSeparatorif(GridView1.PageIndex == (GridView1.PageCount -1))Di2015NewLine{Di2015NewLine   GridView1.PageIndex = 0;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine   GridView1.PageIndex = GridView1.PageIndex + 1;Di2015NewLine}Di2015NewLineGridView1.DataBind();Di2015NewLine
19919768Di2015UniqueSeparatorOnTick
19919768Di2015UniqueSeparatorTimer
19919768Di2015UniqueSeparatorAsyncPostBackTrigger
19919825Di2015UniqueSeparatorvar badstringFromDatabase = "Æ`ÆÆÆlÆâ¹Æp[ÆgÆi[âÃâIâÃ°";Di2015NewLinevar hopefullyRecovered = Encoding.GetEncoding(1252).GetBytes(badstringFromDatabase);Di2015NewLinevar oughtToBeJapanese = Encoding.GetEncoding(932).GetString(hopefullyRecovered);Di2015NewLine
19919829Di2015UniqueSeparatorcurrent Value
19919829Di2015UniqueSeparatorpublic void Add(Decimal displayValue) Di2015NewLine{ Di2015NewLine    currentValue += display Value;Di2015NewLine}Di2015NewLine
19919829Di2015UniqueSeparatorbtnAdd_Click
19919829Di2015UniqueSeparatordisplayValue = calc.CurrentValue;Di2015NewLine
19919829Di2015UniqueSeparatorCurrentValue
19919912Di2015UniqueSeparatorulong
19919912Di2015UniqueSeparator[Flags]Di2015NewLineenum Foo : ulongDi2015NewLine{Di2015NewLine  A = 1 ,Di2015NewLine  B = 2 ,Di2015NewLine  C = 4 ,Di2015NewLine  . . .Di2015NewLine}Di2015NewLine
19919912Di2015UniqueSeparatorSave( Foo value )Di2015NewLine{Di2015NewLine  ulong bitfield = (ulong) value ;Di2015NewLine  int hiNibble = (int)( (bitfield>>32) & 0x00000000FFFFFFFF ) ;Di2015NewLine  int loNibble = (int)( (bitfield>>0)  & 0x00000000FFFFFFFF ) ;Di2015NewLineDi2015NewLine  // store the hi and lo nibbles as two integer columns in your databaseDi2015NewLineDi2015NewLine}Di2015NewLine
19919912Di2015UniqueSeparatorcreate table dbo.some_tableDi2015NewLine(Di2015NewLine  hiNibble int ,Di2015NewLine  loNibble int ,Di2015NewLine  bitField as convert(bigint, convert(varbinary,hiNibble) + convert(varbinary,loNibble) )Di2015NewLine)Di2015NewLine
19919912Di2015UniqueSeparatorulong
19920039Di2015UniqueSeparator~/media/
19920039Di2015UniqueSeparatorsitecore/customHandlers
19920039Di2015UniqueSeparator<customHandlers>Di2015NewLine   <handler trigger="~/media/" handler="sitecore_media.ashx" />Di2015NewLine</customHandlers>Di2015NewLine
19920039Di2015UniqueSeparator<setting name="Media.MediaLinkPrefix" value="" />Di2015NewLine
19920039Di2015UniqueSeparator~/media/
19920039Di2015UniqueSeparator<mediaPrefixes>
19920039Di2015UniqueSeparator<!-- MEDIA REQUEST PREFIXESDi2015NewLine     Allows you to configure additional media prefixes (in addition to the prefix defined by the Media.MediaLinkPrefix setting)Di2015NewLine     The prefixes are used by Sitecore to recognize media URLs.Di2015NewLine     Notice: For each custom media prefix, you must also add a corresponding entry to the <customHandlers> sectionDi2015NewLine-->Di2015NewLine<mediaPrefixes>Di2015NewLine  <!-- ExampleDi2015NewLine  <prefix value="-/media"/>Di2015NewLine  -->Di2015NewLine</mediaPrefixes>Di2015NewLine
19920287Di2015UniqueSeparatorfor(int i = 0 ; i <= Student_Max; i++){Di2015NewLine    StudentInfo[i].StudentLine1 = "Student Name";Di2015NewLine    StudentInfo[i].StudentLine1 = YEAR;Di2015NewLine    StudentInfo[i].StudentNo1   = -1;Di2015NewLine    StudentInfo[i].StudentLine2 = "Student Name";Di2015NewLine    StudentInfo[i].StudentLine2 = YEAR;Di2015NewLine    StudentInfo[i].StudentNo2   = -1;Di2015NewLineDi2015NewLineDi2015NewLine    if (qtnt = (Student_Max / 2)Di2015NewLine    {Di2015NewLine        int qtnt1 = qtnt;Di2015NewLine        int qtnt2 = qtnt1 + qtnt;Di2015NewLineDi2015NewLine    temp.Format("StudentName %d", i+1);Di2015NewLineDi2015NewLine    if (i < qtnt1)Di2015NewLine    {Di2015NewLine        StudentInfo[i].StudentLine1 = (new CString(temp))[0];Di2015NewLine        StudentInfo[i].StudentYear1 = STUDENTYEAR;Di2015NewLine        StudentInfo[i].StudentNo1   = i;Di2015NewLine    }Di2015NewLineDi2015NewLine    else if (i < qtnt2)Di2015NewLine    { Di2015NewLine-->        StudentInfo[i - qtnt1].StudentLine2 = (new CString(temp))[0];Di2015NewLine-->        StudentInfo[i - qtnt1].StudentLine2 = STUDENTYEAR;Di2015NewLine-->        StudentInfo[i - qtnt1].StudentNo2   = i;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19920336Di2015UniqueSeparatorvar item = listA.FirstOrDefault(x=>x.ID == varB.ID);Di2015NewLineif (item != null)Di2015NewLine    varB.someDesc = item.someDesc;Di2015NewLine
19920525Di2015UniqueSeparatorlinkField.Url
19920525Di2015UniqueSeparatorSitecore.Links.LinkManager.GetItemUrl(item)
19920525Di2015UniqueSeparatorSitecore.Resources.Media.MediaManager.GetMediaUrl(item)
19920525Di2015UniqueSeparatorpublic static String LinkUrl(this Sitecore.Data.Fields.LinkField lf)Di2015NewLine{Di2015NewLine    switch (lf.LinkType.ToLower())Di2015NewLine    {Di2015NewLine    Â Â case "internal":Di2015NewLine    Â Â Â Â // Use LinkMananger for internal links, if link is not emptyDi2015NewLine    Â Â Â Â return lf.TargetItem != null ? Sitecore.Links.LinkManager.GetItemUrl(lf.TargetItem) : string.Empty;Di2015NewLine    Â Â case "media":Di2015NewLine    Â Â Â Â // Use MediaManager for media links, if link is not emptyDi2015NewLine    Â Â Â Â return lf.TargetItem != null ? Sitecore.Resources.Media.MediaManager.GetMediaUrl(lf.TargetItem) : string.Empty;Di2015NewLine    Â Â case "external":Di2015NewLine    Â Â Â Â // Just return external linksDi2015NewLine    Â Â Â Â return lf.Url;Di2015NewLine    Â Â case "anchor":Di2015NewLine    Â Â Â Â // Prefix anchor link with # if link if not emptyDi2015NewLine    Â Â Â Â return !string.IsNullOrEmpty(lf.Anchor) ? "#" + lf.Anchor : string.Empty;Di2015NewLine    Â Â case "mailto":Di2015NewLine    Â Â Â Â // Just return mailto linkDi2015NewLine    Â Â Â Â return lf.Url;Di2015NewLine    Â Â case "javascript":Di2015NewLine    Â Â Â Â // Just return javascriptDi2015NewLine    Â Â Â Â return lf.Url;Di2015NewLine    Â Â default:Di2015NewLine    Â Â Â Â // Just please the compiler, thisDi2015NewLine    Â Â Â Â // condition will never be metDi2015NewLine    Â Â Â Â return lf.Url;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19920525Di2015UniqueSeparatorSitecore.Data.Fields.LinkField linkField = item.Fields["Link1"];Di2015NewLinelnkMain.NavigateUrl = linkField.LinkUrl();Di2015NewLine
19920525Di2015UniqueSeparator<sc:FieldRender>
19920579Di2015UniqueSeparatorXmlTextWriter
19920579Di2015UniqueSeparator    StorageFile file = await dataFolder.CreateFileAsync(filename, CreationCollisionOption.OpenIfExists);Di2015NewLineDi2015NewLine    // Serialize the objectDi2015NewLine    XmlSerializer serializer = new XmlSerializer(obj.GetType());Di2015NewLineDi2015NewLine    // Write the data from the textbox.Di2015NewLine    using (var s = await file.OpenStreamForWriteAsync())Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            s.Position = s.Seek(0, SeekOrigin.End);Di2015NewLineDi2015NewLine            using (var x = XmlWriter.Create(s, new XmlWriterSettings(){OmitXmlDeclaration = true}))Di2015NewLine            {Di2015NewLine                x.Setting.OmitXmlDeclaration = true;Di2015NewLine                serializer.Serialize(x, obj);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.Out.WriteLine(ex.Message);Di2015NewLine        }Di2015NewLine        finally{Di2015NewLine            s.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19920579Di2015UniqueSeparatornew XmlTextWriter
19920579Di2015UniqueSeparatorXmlWriter.Create
19921377Di2015UniqueSeparatorpublic class PageViewModel : NotifyingObjectDi2015NewLine{Di2015NewLine    public Theme CurrentThemeDi2015NewLine    {Di2015NewLine        get { return _currentTheme; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (value == _currentTheme) return;Di2015NewLine            _currentTheme = value;Di2015NewLine            NotifyPropertyChanged("CurrentTheme");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public IList<Theme> ThemesDi2015NewLine    {Di2015NewLine        get { return _themes; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (value == _themes) return;Di2015NewLine            _themes = value;Di2015NewLine            NotifyPropertyChanged("Themes");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19921377Di2015UniqueSeparatorprotected override void OnNavigatedTo(NavigationEventArgs e)Di2015NewLine{Di2015NewLine    base.OnNavigatedTo(e);Di2015NewLineDi2015NewLine    themeList = new List<Theme>();Di2015NewLine    themeList.Add(new Theme() { Image = new BitmapImage(new Uri("/Assets/Themes/Indigo.png", UriKind.Relative)), Name = "indigo", Color = Color.FromArgb(255, 106, 0, 255) });Di2015NewLine    themeList.Add(new Theme() { Image = new BitmapImage(new Uri("/Assets/Themes/Cyan.png", UriKind.Relative)), Name = "cyan", Color = Color.FromArgb(255, 27, 161, 226) });Di2015NewLine    themeList.Add(new Theme() { Image = new BitmapImage(new Uri("/Assets/Themes/Cobalt.png", UriKind.Relative)), Name = "cobalt", Color = Color.FromArgb(255, 0, 80, 239) });Di2015NewLineDi2015NewLine    var viewModel = new PageViewModel();Di2015NewLine    viewModel.Themes = themeList;Di2015NewLine    DataContext = viewModel;Di2015NewLine}Di2015NewLine
19921377Di2015UniqueSeparator<toolkit:ListPicker ... ItemsSource="{Binding Themes}" .../>Di2015NewLine
19921377Di2015UniqueSeparator<TextBlock Text="{Binding CurrentTheme.Name}" Foreground="{Binding CurrentTheme.Brush}">Di2015NewLine
19921377Di2015UniqueSeparator<toolkit:ListPicker ... SelectedItem="{Binding CurrentTheme, Mode=TwoWay}" >Di2015NewLine
19921377Di2015UniqueSeparatorDataTemplate
19921377Di2015UniqueSeparatorCurrentTheme
19921377Di2015UniqueSeparatorTheme
19921568Di2015UniqueSeparatorint.Parse
19921568Di2015UniqueSeparatorint parseTerminal(string input) {Di2015NewLine    int result = -1;Di2015NewLine    if (!int.TryParse(input, out result)) {Di2015NewLine        result = -99;Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19921568Di2015UniqueSeparatorvar terminalList = sourceListsDi2015NewLine               .Where( t => t.TagNo == tagList && t.FromTerminal.Length > 0 )Di2015NewLine               .Select( t => parseTerminak(t.FromTerminal) )Di2015NewLine               .OrderBy( t=>t )Di2015NewLine               .ToList();Di2015NewLine
19921568Di2015UniqueSeparatorTagNo      FTerminalDi2015NewLine1000       -99Di2015NewLine           1Di2015NewLine           5Di2015NewLine
19921568Di2015UniqueSeparatorint parseTerminal(string input) {Di2015NewLine    int result = -1;Di2015NewLine    if (!int.TryParse(input, out result)) {Di2015NewLine        var temporaryString = string.Empty;Di2015NewLine        var lastInt = -1;Di2015NewLineDi2015NewLine        input.ToList().ForEach( aChar => {Di2015NewLine            if ( aChar >= '0' && aChar <= '9' ) {Di2015NewLine                temporaryString += aChar;Di2015NewLine            }  else {Di2015NewLine                if ( temporaryString.Length >= 0 ) {Di2015NewLine                    int.TryParse( temporaryString, out lastInt );Di2015NewLine                    temporaryString = string.Empty;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        } );Di2015NewLine        if ( temporaryString.Length >= 0 ) {Di2015NewLine            if (!int.TryParse( temporaryString, out lastInt )) {Di2015NewLine                lastInt = -98;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        result = lastInt;Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19921606Di2015UniqueSeparatorXmlNodeList nodeList = doc.DocumentElement.SelectNodes("/urlset/sitemap/lastmod");Di2015NewLine
19921606Di2015UniqueSeparatorXmlNodeList nodeList = doc.GetElementsByTagName("lastmod");Di2015NewLine
19921930Di2015UniqueSeparatorint
19921930Di2015UniqueSeparatorobject
19921930Di2015UniqueSeparatorvar x1 = Expression.Call(Expression.Constant(Id), equals1, Expression.Convert(GetId.Body, typeof(object)));Di2015NewLine
19921930Di2015UniqueSeparatorObject.Equals
19921930Di2015UniqueSeparatorclass TestClass<T>Di2015NewLine    where T : IEquatable<T>Di2015NewLine{Di2015NewLine}Di2015NewLine
19921930Di2015UniqueSeparatorvar x1 = Expression.Call(Expression.Constant(Id), equals1, GetId.Body);Di2015NewLine
19921930Di2015UniqueSeparatorIEquatable<T>.Equals(T)
19921930Di2015UniqueSeparatorObject.Equals
19921930Di2015UniqueSeparatorIEquatable<T>.Equals(T)
19922649Di2015UniqueSeparator"MyApp/Home/Index"
19922649Di2015UniqueSeparator"MyApp/User/Logon"
19922649Di2015UniqueSeparatorUserController
19922649Di2015UniqueSeparatorLogon
19922649Di2015UniqueSeparator"MyApp/default.aspx"
19922649Di2015UniqueSeparator"MyApp/image/image1.png"
19922649Di2015UniqueSeparator"MyApp/Views/User/Logon.aspx"
19922649Di2015UniqueSeparator404
19922649Di2015UniqueSeparatorViews
19922738Di2015UniqueSeparatorAppendLine()
19922738Di2015UniqueSeparator<br />
19922751Di2015UniqueSeparator  delegate void SetProgressBar(int percentage, bool logic);Di2015NewLine        private void SetProgress(int percentage, bool logic)Di2015NewLine        {Di2015NewLine            if (progressBar.InvokeRequired)  Di2015NewLine            {Di2015NewLine                SetProgressBar d = new SetProgressBar(SetProgress);Di2015NewLine                this.Invoke(d, new object[] { percentage, logic });Di2015NewLineDi2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLineDi2015NewLine                progressBar.Style = ProgressBarStyle.Blocks;Di2015NewLine                progressBar.Value = percentage;Di2015NewLine                progressBar.Text = percentage.ToString() + "%";Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine
19922751Di2015UniqueSeparatorprivate void bw_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine {Di2015NewLine            BackgroundWorker worker = sender as BackgroundWorker;Di2015NewLineDi2015NewLineDi2015NewLine  while ((len = objReader.BaseStream.Read(buffer, 0, buffer.Length)) != 0)Di2015NewLine                        {Di2015NewLine                           .....Di2015NewLineDi2015NewLine                          .......Di2015NewLine                            int iProgressPercentage = (int)(dProgressPercentage * 100);Di2015NewLine                            bw.ReportProgress(iProgressPercentage);Di2015NewLineDi2015NewLine                        }Di2015NewLine}Di2015NewLine
19922751Di2015UniqueSeparator   private void bw_ProgressChanged(object sender, ProgressChangedEventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLineDi2015NewLine             SetProgress(e.ProgressPercentage, true);Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine
19922873Di2015UniqueSeparatorinfo
19922873Di2015UniqueSeparatornew info
19922873Di2015UniqueSeparatorSampleDataGroup
19922873Di2015UniqueSeparatordata.PhotoUrl = string.Format("Assets/Images/{0}.jpg", data.Name)Di2015NewLine
19922873Di2015UniqueSeparatorif/else
19922993Di2015UniqueSeparatorquery.ToList()Di2015NewLine
19922993Di2015UniqueSeparatorvar users = SearchProducts().ToList();Di2015NewLineif ((users == null) || (users.Count() == 0))Di2015NewLine{Di2015NewLine    ctx.StatusCode = System.Net.HttpStatusCode.NotFound;Di2015NewLine    ctx.SuppressEntityBody = true;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    usersList = new List<UserProfile>();Di2015NewLine    foreach(User us in users)Di2015NewLine    {Di2015NewLine        usersList.Add(UserProfile.CreateUserView(us, userId));Di2015NewLine    }Di2015NewLine    ctx.StatusCode = System.Net.HttpStatusCode.OK;Di2015NewLine}Di2015NewLine
19923012Di2015UniqueSeparatoradap.InsertCommand
19923012Di2015UniqueSeparatoradap.InsertCommand.Parameters.AddDi2015NewLine
19923012Di2015UniqueSeparatoradap = new OracleDataAdapter("insert into ...", con); Di2015NewLine
19923012Di2015UniqueSeparatorSelectCommand
19923012Di2015UniqueSeparatorInsertCommand
19923012Di2015UniqueSeparatoradap.InsertCommand
19923012Di2015UniqueSeparatoradap.Fill(ds,"A");Di2015NewLine
19923012Di2015UniqueSeparatorSelectCommand
19923012Di2015UniqueSeparatoradap = new OracleDataAdapter("SELECT ... FROM ... WHERE ...", con); Di2015NewLineadap.SelectCommand.Parameters.Add(... any parameters you need ...);Di2015NewLineadap.Fill(ds, "A");Di2015NewLine
19923121Di2015UniqueSeparatorLoadXML()
19923121Di2015UniqueSeparatorGenerateIndexNode()
19923121Di2015UniqueSeparatorpublic XmlNode GenerateIndexNode(XmlDocument xd)Di2015NewLine{Di2015NewLine    XmlElement nodeSite = xd.CreateElement("sitemap");Di2015NewLine    XmlElement nodeLoc = xd.CreateElement("loc");Di2015NewLine    nodeLoc.InnerText = Loc;Di2015NewLine    XmlElement nodeMode = xd.CreateElement("lastmod");Di2015NewLine    nodeMode.InnerText = DateTime.Now.ToString("yyyy-MM-ddThh:mm:ss+00:00");Di2015NewLine    nodeSite.AppendChild(nodeLoc);Di2015NewLine    nodeSite.AppendChild(nodeMode);Di2015NewLine    return nodeSite;Di2015NewLine}Di2015NewLine
19923121Di2015UniqueSeparatorpublic void LoadXML()Di2015NewLine{Di2015NewLine    string sSiteMapFilePath = HttpRuntime.AppDomainAppPath + "sitemap_index.xml";Di2015NewLine    XmlDocument xmlDoc = new XmlDocument();Di2015NewLine    xmlDoc.Load(HttpRuntime.AppDomainAppPath + "sitemap_index.xml");Di2015NewLineDi2015NewLine    XmlNode node=GenerateIndexNode(xmlDoc);Di2015NewLineDi2015NewLine    XmlNode childNode = xmlDoc.DocumentElement;Di2015NewLine    childNode.InsertAfter(node, childNode.LastChild);Di2015NewLine    xmlDoc.Save(sSiteMapFilePath);Di2015NewLine}Di2015NewLine
19923168Di2015UniqueSeparatorint
19923168Di2015UniqueSeparatorpublic enum Rank Di2015NewLine{Di2015NewLine    Value1,Di2015NewLine    Value2Di2015NewLine}Di2015NewLine
19923168Di2015UniqueSeparatorpublic enum Rank : intDi2015NewLine{Di2015NewLine    Value1 = 0,Di2015NewLine    Value2 = 1Di2015NewLine}Di2015NewLine
19923168Di2015UniqueSeparatorint rank = (int)Rank.Value1;Di2015NewLine
19923168Di2015UniqueSeparator(int)
19923168Di2015UniqueSeparatorRank rank = (Rank)1;Di2015NewLine
19923302Di2015UniqueSeparatorvar f = Rank.GroupBy(x => x)Di2015NewLine            .Select(g => new { Value = g.Key, Count = g.Count() })Di2015NewLine            .Where(s => Rank.Contains("FF"));Di2015NewLine
19923302Di2015UniqueSeparatorvar f = Rank.GroupBy(x => x)Di2015NewLine            .Select(g => new { Value = g.Key, Count = g.Count() })Di2015NewLine            .Where(s => s.Value == "FF");Di2015NewLine
19923327Di2015UniqueSeparatorMemoryMappedFile
19923327Di2015UniqueSeparatorSystem.IO.MemoryMappedFiles
19923327Di2015UniqueSeparatorMemoryMappedFile
19923341Di2015UniqueSeparatorvar cmd = new SqlCeCommand(Di2015NewLine    "INSERT INTO Players (PlayerID, PlayerName, Team_Abbreviation) VALUES (@ID, @Name, @Team);", sql);Di2015NewLinecmd.Parameters.AddWithValue("@ID", player.ID.Replace("/ice/player.htm?id=", null));Di2015NewLinecmd.Parameters.AddWithValue("@Name", player.Name);Di2015NewLinecmd.Parameters.AddWithValue("@Team", player.Team);Di2015NewLine
19923467Di2015UniqueSeparatorvar names = assembly.GetTypes().Where(t => baseType.IsAssignableFrom(t)).Select(t => t.Name);Di2015NewLine
19923521Di2015UniqueSeparatorstatic
19923521Di2015UniqueSeparatorContextMenu
19923521Di2015UniqueSeparatorpublic static RoutedCommand MyCommand = new RoutedCommand("MyCommand", typeof(ContextMenu));Di2015NewLine
19923521Di2015UniqueSeparatorMainWindow.xaml.cs
19923521Di2015UniqueSeparatorMainWindow
19923521Di2015UniqueSeparatorprivate void InitializeMenuItemsCommands()Di2015NewLine    {Di2015NewLine        CommandManager.RegisterClassCommandBinding(typeof(ContextMenu), new CommandBinding(DesignerCanvas.TestDialog, OpenTestDialog, CanOpenTestDialog));Di2015NewLine    }Di2015NewLine
19923521Di2015UniqueSeparatorCanExecute
19923521Di2015UniqueSeparatorExecuted
19923521Di2015UniqueSeparatorprivate void CanOpenTestDialog(object sender, CanExecuteRoutedEventArgs e)Di2015NewLine{Di2015NewLine    e.CanExecute = true; // set if MenuItem is enabledDi2015NewLine}Di2015NewLineDi2015NewLineprivate void OpenTestDialog(object sender, ExecutedRoutedEventArgs e)Di2015NewLine{Di2015NewLine    // handle the MenuItem click hereDi2015NewLine}Di2015NewLine
19923521Di2015UniqueSeparatorResourceDictionary
19923521Di2015UniqueSeparatorMenuItem
19923521Di2015UniqueSeparator<MenuItem x:Name="menuItem1" Header="MySubMenuItem 1"Di2015NewLineCommand="{x:Static DesignerItems:DesignerCanvas.MyCommand}">     <<<=== Command BindingDi2015NewLine                <MenuItem.Icon>Di2015NewLine                  <Image Source="myImage.png" Width="20"/>Di2015NewLine                </MenuItem.Icon>Di2015NewLine              </MenuItem>Di2015NewLine
19923567Di2015UniqueSeparator double s=123.345345;Di2015NewLineDi2015NewLine           string str=string.Empty;Di2015NewLineDi2015NewLine           str = s.ToString("#,0.##");Di2015NewLineDi2015NewLine            MessageBox.Show(str);Di2015NewLine
19923710Di2015UniqueSeparator[TestFixture] // NUnit attribute for a test classDi2015NewLinepublic class MyTestsDi2015NewLine{Di2015NewLine    [Test] // NUnit attribute for a test methodDi2015NewLine    public void fetchFilesTest() // name of a method you are testing + Test is a conventionDi2015NewLine    {Di2015NewLine        var files = fetchFiles();Di2015NewLineDi2015NewLine        Assert.NotNull(files); // should pass if there are any files in a directoryDi2015NewLine        Assert. ... // assert any other thing you are sure about, like if there is a particular file, or specific number of files, and so forthDi2015NewLine    }Di2015NewLine}Di2015NewLine
19923743Di2015UniqueSeparatorIsHitTestVisible
19923743Di2015UniqueSeparatorItemTemplate
19923743Di2015UniqueSeparatorItemsControl
19923743Di2015UniqueSeparatorIsHitTestVisible="False"
19923743Di2015UniqueSeparator<ItemsControl.ItemTemplate>Di2015NewLine    <DataTemplate DataType="{x:Type system:String}">Di2015NewLine        <Border Background="Gray" IsHitTestVisible="False">Di2015NewLine            <TextBlock Text="{Binding}" Foreground="White" />Di2015NewLine        </Border>Di2015NewLine    </DataTemplate>Di2015NewLine</ItemsControl.ItemTemplate>Di2015NewLine
19923743Di2015UniqueSeparatorItemsControl
19923743Di2015UniqueSeparatorDrop
19923743Di2015UniqueSeparatorIsHitTestVisible="False"
19923743Di2015UniqueSeparator"."
19923743Di2015UniqueSeparator<ItemsControl.ItemTemplate>Di2015NewLine    <DataTemplate DataType="{x:Type system:String}">Di2015NewLine        <Border Name="AnimalPlace" Background="Gray">Di2015NewLine            <TextBlock Text="{Binding}" Foreground="White" />Di2015NewLine        </Border>Di2015NewLine        <DataTemplate.Triggers>Di2015NewLine            <DataTrigger Binding="{Binding}" Value=".">Di2015NewLine                <Setter TargetName="AnimalPlace" Property="IsHitTestVisible" Value="False" />Di2015NewLine            </DataTrigger>Di2015NewLine        </DataTemplate.Triggers>Di2015NewLine    </DataTemplate>Di2015NewLine</ItemsControl.ItemTemplate>Di2015NewLine
19923895Di2015UniqueSeparatorusing (DataContext pContext = new DataContext())Di2015NewLine{Di2015NewLineDi2015NewLine    using (TransactionScope transaction = new TransactionScope())Di2015NewLine    {Di2015NewLine        //execute commands   Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        pContext.SaveChanges();Di2015NewLineDi2015NewLine        transaction.Complete()Di2015NewLine    }Di2015NewLine}Di2015NewLine
19923931Di2015UniqueSeparator<asp:UpdatePanel ID="upnlGrd" runat="server" >Di2015NewLine  <ContentTemplate>Di2015NewLine    <asp:GridView ID="GrdBarcode" runat="server" Di2015NewLine       AutoGenerateColumns="False" CellPadding="4" Width="100%"Di2015NewLine       EmptyDataText="No records found.">Di2015NewLine      <Columns>Di2015NewLine      </Columns>Di2015NewLine      <HeaderStyle CssClass="TableHeadingNormal" HorizontalAlign="Center" />Di2015NewLine      <RowStyle CssClass="NormalText" VerticalAlign="Top" HorizontalAlign="Left" />Di2015NewLine      <EmptyDataRowStyle CssClass="NormalText" HorizontalAlign="Center" Di2015NewLine             Font-Bold="True" />Di2015NewLine      </asp:GridView>Di2015NewLine   </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLineDi2015NewLine<Table>Di2015NewLine  <tr>Di2015NewLine   <td align="center">Di2015NewLine     <asp:Button ID="btnOk" runat="server" Text="Ok" CssClass="ButtonBlack"   />Di2015NewLine   </td>Di2015NewLine </tr>Di2015NewLine
19923933Di2015UniqueSeparatorbool Match(string str, string[] strArr)Di2015NewLine{Di2015NewLine    return strArr.Intersect(str.Split(':')).Any();Di2015NewLine}Di2015NewLine
19924331Di2015UniqueSeparatorList<string>();
19924331Di2015UniqueSeparatorList<string> datesStrings = new List<string>();     Di2015NewLineDi2015NewLineif (counterDays.DayOfWeek.ToString() == "Monday")Di2015NewLine{Di2015NewLine    datesStrings.Add(counterDays.ToString("yyyy-MM-dd"));         Di2015NewLine}Di2015NewLine
19924331Di2015UniqueSeparatorpublic IEnumerable<DateTime> EachDay(DateTime from, DateTime thru)Di2015NewLine{Di2015NewLine    for(var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1))Di2015NewLine        yield return day;Di2015NewLine}Di2015NewLine
19924331Di2015UniqueSeparatorvar mondaysStrings = EachDay(counterDays, DateTime)Di2015NewLine                   .Where(x=>x.DayOfWeek==DayOfWeek.Monday)Di2015NewLine                   .Select(x=>x.ToString("yyyy-MM-dd"));Di2015NewLine
19924331Di2015UniqueSeparatorcounterDays
19924331Di2015UniqueSeparatorDateTime.Now
19924495Di2015UniqueSeparatorPackageManager
19924495Di2015UniqueSeparatorGetApplicationIcon
19924495Di2015UniqueSeparatorImageDrawable
19924495Di2015UniqueSeparatorView
19924495Di2015UniqueSeparatorvar icon = PackageManager.GetApplicationIcon("com.example.someapp");Di2015NewLineimageView.setImageDrawable(icon);Di2015NewLine
19924527Di2015UniqueSeparatorGetUpperBound(0)
19924527Di2015UniqueSeparatorrow
19924527Di2015UniqueSeparatorcolumn
19924527Di2015UniqueSeparatorr
19924527Di2015UniqueSeparatorc
19924527Di2015UniqueSeparatortxtTable.AppendText...
19924527Di2015UniqueSeparatorinternal class ProgramDi2015NewLine{Di2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var test = new ConsoleTest();Di2015NewLine        var v = test.seachForValue(12);Di2015NewLine        Console.WriteLine(v);Di2015NewLineDi2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ConsoleTestDi2015NewLine{Di2015NewLine    public ConsoleTest()Di2015NewLine    {Di2015NewLine        MultiplicationTable();Di2015NewLine    }Di2015NewLineDi2015NewLine    //CONSTANT ARRAY LENGTHDi2015NewLine    public const int TableSize = 12;Di2015NewLine    //ARRAYDi2015NewLine    public int[,] multiplicationTableArr = new int[TableSize, TableSize];  Di2015NewLineDi2015NewLineDi2015NewLine    //MULTIPLICATION METHODDi2015NewLine    // this will intialize your array to your multiplication table Di2015NewLine    private void MultiplicationTable()Di2015NewLine    {Di2015NewLine        for (int row = 0; row < TableSize; row++)Di2015NewLine        {Di2015NewLine            //NESTED FOR LOOPDi2015NewLine            for (int column = 0; column < TableSize; column++)Di2015NewLine            {Di2015NewLine                multiplicationTableArr[row, column] = (row + 1) * (column + 1);Di2015NewLine            }//NESTED FOR LOOP ENDSDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // SEACHFORVALUE METHODDi2015NewLine    public string seachForValue(int intSearchNumber)Di2015NewLine    {Di2015NewLine        var result = new StringBuilder();Di2015NewLineDi2015NewLine        for (int row = 0; row < TableSize; row++)Di2015NewLine        {Di2015NewLine            for (int col = 0; col < TableSize; col++)Di2015NewLine            {Di2015NewLine                if (intSearchNumber == multiplicationTableArr[row, col])Di2015NewLine                {Di2015NewLine                    result.AppendLine("(" + row + ", " + col + ") -> " + (row + 1) + "*" + (col + 1 )+ "=" + intSearchNumber);Di2015NewLine                }Di2015NewLine            }//NESTED FOR LOOP ENDSDi2015NewLine        }Di2015NewLineDi2015NewLine        return result.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19924561Di2015UniqueSeparatorstring.Join(",", this._previousDayPrices.Take(2).Select(d => string.Format("{0}-{1}-{2}-{3}", d.Price, d.Date,d.EuroExchangeRateDate, d.EuroExchangeRate)).ToArray());Di2015NewLine
19924573Di2015UniqueSeparatorstring myBytes = String.Empty;Di2015NewLinestring dp = "Ã®";                 Di2015NewLineDi2015NewLine//byte[] bdp = Encoding.ASCII.GetBytes(dp);Di2015NewLinebyte[] bdp = Encoding.GetEncoding(437).GetBytes(dp);  //  <----- NOTE 437Di2015NewLineDi2015NewLineforeach (byte b in bdp)Di2015NewLine{Di2015NewLine    myBytes += b.ToString("x") + " ";Di2015NewLine}Di2015NewLine
19924573Di2015UniqueSeparatorÃ®
19924757Di2015UniqueSeparator   string delimeter = ",";Di2015NewLineDi2015NewLine        List<string> str = new List<string>();Di2015NewLine        str.Add("a");Di2015NewLine        str.Add("b");Di2015NewLine        str.Add("c");Di2015NewLine        str.Add("d");Di2015NewLineDi2015NewLine        string result= String.Join(delimeter, str);Di2015NewLine
19924757Di2015UniqueSeparator      string output= str.Aggregate((i, j) => i + delimeter + j);Di2015NewLine
19924829Di2015UniqueSeparatorDataGridView
19924829Di2015UniqueSeparatorList<YourControl>
19924829Di2015UniqueSeparatorDataGridView
19924829Di2015UniqueSeparatorParent
19924829Di2015UniqueSeparatorCellPainting
19924829Di2015UniqueSeparatorLocation
19924829Di2015UniqueSeparatorTag
19924829Di2015UniqueSeparatorDataGridViewCell
19924829Di2015UniqueSeparatorCellTemplate
19924829Di2015UniqueSeparatorDataGridViewColumn
19924829Di2015UniqueSeparatorGDI+
19924829Di2015UniqueSeparatorpublic class DataGridViewRatingColumn : DataGridViewColumn {Di2015NewLine    public DataGridViewRatingColumn() : base(new DataGridViewRatingCell()) {Di2015NewLine        base.ReadOnly = true;Di2015NewLine        RatedStarColor = Color.Green;Di2015NewLine        GrayStarColor = Color.LightGray;Di2015NewLine        StarScale = 1;            Di2015NewLine    }Di2015NewLine    bool readOnly;Di2015NewLine    public new bool ReadOnlyDi2015NewLine    {Di2015NewLine        get {Di2015NewLine            return readOnly;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            readOnly = value;                Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Color ratedStarColor;Di2015NewLine    Color grayStarColor;Di2015NewLine    float starScale;Di2015NewLine    public Color RatedStarColor {Di2015NewLine        get { return ratedStarColor; }Di2015NewLine        set {Di2015NewLine            if (ratedStarColor != value) {Di2015NewLine                ratedStarColor = value;Di2015NewLine                if (DataGridView != null) DataGridView.InvalidateColumn(Index);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public Color GrayStarColorDi2015NewLine    {Di2015NewLine        get { return grayStarColor; }Di2015NewLine        set {Di2015NewLine            if (grayStarColor != value){Di2015NewLine                grayStarColor = value;Di2015NewLine                if(DataGridView != null) DataGridView.InvalidateColumn(Index);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public float StarScale {Di2015NewLine        get { return starScale; }Di2015NewLine        set {Di2015NewLine            if (starScale != value) {Di2015NewLine                starScale = value;Di2015NewLine                DataGridViewRatingCell.UpdateBrushes(value);Di2015NewLine                if (DataGridView != null) DataGridView.InvalidateColumn(Index);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}    Di2015NewLinepublic class DataGridViewRatingCell : DataGridViewTextBoxCell {Di2015NewLine    static DataGridViewRatingCell() {Di2015NewLine        //Init star            Di2015NewLine        List<PointF> points = new List<PointF>();Di2015NewLine        bool largeArc = true;Di2015NewLine        R = 10;Di2015NewLine        r = 4;Di2015NewLine        center = new Point(R, R);Di2015NewLine        for (float alpha = 90; alpha <= 414; alpha += 36)Di2015NewLine        {Di2015NewLine            int d = largeArc ? R : r;Di2015NewLine            double radAlpha = alpha * Math.PI / 180;Di2015NewLine            float x = (float)(d * Math.Cos(radAlpha));Di2015NewLine            float y = (float)(d * Math.Sin(radAlpha));Di2015NewLine            points.Add(new PointF(center.X + x, center.Y + y));Di2015NewLine            largeArc = !largeArc;Di2015NewLine        }Di2015NewLine        star.AddPolygon(points.ToArray());Di2015NewLine        star.Transform(new Matrix(1, 0, 0, -1, 0, center.Y * 2));             Di2015NewLine        //Init starsDi2015NewLine        UpdateBrushes(1);                   Di2015NewLine    }Di2015NewLine    public DataGridViewRatingCell() {Di2015NewLine        ValueType = typeof(int);Di2015NewLine        ratedStarColor = Color.Green;Di2015NewLine        grayStarColor = Color.LightGray;Di2015NewLine        starScale = 1;Di2015NewLine        UseColumnStarColor = true;Di2015NewLine        UseColumnStarScale = true;            Di2015NewLine    }                Di2015NewLine    public override object DefaultNewRowValue {Di2015NewLine        get {Di2015NewLine            return 0;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    internal static void UpdateBrushes(float scale) {Di2015NewLine        int space = 2*R;Di2015NewLine        for (int i = 0; i < 5; i++) {Di2015NewLine            if (stars[i] != null) stars[i].Dispose();Di2015NewLine            stars[i] = (GraphicsPath)star.Clone();Di2015NewLine            stars[i].Transform(new Matrix(scale, 0, 0, scale, space * i * scale, 0));                Di2015NewLine            brushes[i] = CreateBrush(new RectangleF(center.X - R + space * i * scale, center.Y - R, R * 2 * scale, R * 2 * scale));Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private static LinearGradientBrush CreateBrush(RectangleF bounds)Di2015NewLine    {Di2015NewLine        var brush = new LinearGradientBrush(bounds,Color.White, Color.Yellow, LinearGradientMode.ForwardDiagonal);Di2015NewLine        ColorBlend cb = new ColorBlend();Di2015NewLine        Color c = Color.Green;Di2015NewLine        Color lightColor = Color.White;Di2015NewLine        cb.Colors = new Color[] { c, c, lightColor, c, c };Di2015NewLine        cb.Positions = new float[] { 0, 0.4f, 0.5f, 0.6f, 1 };Di2015NewLine        brush.InterpolationColors = cb;            Di2015NewLine        return brush;Di2015NewLine    }Di2015NewLine    private void AdjustBrushColors(LinearGradientBrush brush, Color baseColor, Color lightColor)Di2015NewLine    {Di2015NewLine        //Note how we adjust the colors, using brush.InterpolationColors directly won't work.Di2015NewLine        ColorBlend cb = brush.InterpolationColors;Di2015NewLine        cb.Colors = new Color[] { baseColor, baseColor, lightColor, baseColor, baseColor };Di2015NewLine        brush.InterpolationColors = cb;Di2015NewLine    }        Di2015NewLine    static GraphicsPath star = new GraphicsPath();Di2015NewLine    static GraphicsPath[] stars = new GraphicsPath[5];Di2015NewLine    static LinearGradientBrush[] brushes = new LinearGradientBrush[5];Di2015NewLine    static Point center;Di2015NewLine    static int R, r;Di2015NewLine    int currentValue = -1;Di2015NewLine    bool mouseOver;Di2015NewLine    protected override void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, Di2015NewLine        int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, Di2015NewLine        string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)Di2015NewLine    {Di2015NewLine        base.Paint(graphics, clipBounds, cellBounds, rowIndex, elementState, value, formattedValue,Di2015NewLine            errorText, cellStyle, advancedBorderStyle, paintParts & ~DataGridViewPaintParts.SelectionBackground & ~DataGridViewPaintParts.ContentForeground);             Di2015NewLine        if (rowIndex == RowIndex && (paintParts & DataGridViewPaintParts.ContentForeground) != 0) {Di2015NewLine            graphics.SmoothingMode = SmoothingMode.AntiAlias;Di2015NewLine            if(Value != null) Value = Math.Min(Math.Max(0, (int)Value), 5);Di2015NewLine            if (!mouseOver) currentValue = (int)(Value ?? 0);  Di2015NewLine            PaintStars(graphics, cellBounds, 0, currentValue, true);Di2015NewLine            PaintStars(graphics, cellBounds, currentValue, 5 - currentValue, false);Di2015NewLine            graphics.SmoothingMode = SmoothingMode.Default;             Di2015NewLine        }Di2015NewLine    }Di2015NewLine    protected override void OnMouseMove(DataGridViewCellMouseEventArgs e) {Di2015NewLine        base.OnMouseMove(e);Di2015NewLine        if (!mouseOver) mouseOver = true;Di2015NewLine        if (IsReadOnly()) return;Di2015NewLine        var lastStar = stars.Select((x, i) => new { x, i })Di2015NewLine                            .LastOrDefault(x => x.x.IsVisible(e.Location));Di2015NewLine        if (lastStar != null) {Di2015NewLine            currentValue = lastStar.i + 1;                Di2015NewLine            DataGridView.Cursor = Cursors.Hand;Di2015NewLine        }Di2015NewLine        else if(RowIndex > -1) {Di2015NewLine            currentValue = (int)(Value ?? 0);Di2015NewLine            DataGridView.Cursor = Cursors.Default;Di2015NewLine        }Di2015NewLine        DataGridView.InvalidateCell(this);Di2015NewLine    }        Di2015NewLine    protected override void OnClick(DataGridViewCellEventArgs e) {Di2015NewLine        base.OnClick(e);Di2015NewLine        if (IsReadOnly()) return;Di2015NewLine        Value = currentValue == 1 && (int?) Value == 1 ? 0 : currentValue;Di2015NewLine    }Di2015NewLine    protected override void OnMouseLeave(int rowIndex) {Di2015NewLine        base.OnMouseLeave(rowIndex);Di2015NewLine        mouseOver = false;Di2015NewLine        if (IsReadOnly()) return;Di2015NewLine        if (rowIndex == RowIndex) {Di2015NewLine            currentValue = (int)(Value ?? 0);Di2015NewLine            DataGridView.InvalidateCell(this);Di2015NewLine        }            Di2015NewLine    }        Di2015NewLine    private bool IsReadOnly() {Di2015NewLine        var col = OwningColumn as DataGridViewRatingColumn;Di2015NewLine        return col != null ? col.ReadOnly : false;Di2015NewLine    }Di2015NewLine    private void PaintStars(Graphics g, Rectangle bounds, int startIndex, int count, bool rated) {Di2015NewLine        GraphicsState gs = g.Save();Di2015NewLine       g.TranslateTransform(bounds.Left, bounds.Top);           Di2015NewLine        var col = OwningColumn as DataGridViewRatingColumn;Di2015NewLine        Color ratedColor = col == null ? Color.Yellow :Di2015NewLine            UseColumnStarColor ? col.RatedStarColor : RatedStarColor;Di2015NewLine        Color grayColor = col == null ? Color.LightGray :Di2015NewLine            UseColumnStarColor ? col.GrayStarColor : GrayStarColor;Di2015NewLine        float starScale = col == null ? 1 :Di2015NewLine            UseColumnStarScale ? col.StarScale : StarScale;Di2015NewLine        UpdateBrushes(starScale);Di2015NewLine       for(int i = startIndex; i < startIndex + count; i++) {Di2015NewLine           AdjustBrushColors(brushes[i], rated ? ratedColor : grayColor, rated ? Color.White : grayColor);Di2015NewLine           g.FillPath(brushes[i], stars[i]);Di2015NewLine           //g.DrawPath(Pens.Green, stars[i]);Di2015NewLine       }Di2015NewLine       g.Restore(gs);Di2015NewLine    }        Di2015NewLine    Color ratedStarColor;Di2015NewLine    Color grayStarColor;Di2015NewLine    float starScale;Di2015NewLine    public Color RatedStarColor {Di2015NewLine        get { return ratedStarColor; }Di2015NewLine        set {Di2015NewLine            if (ratedStarColor != value) {Di2015NewLine                ratedStarColor = value;Di2015NewLine                var col = OwningColumn as DataGridViewRatingColumn;Di2015NewLine                if (col != null && col.RatedStarColor != value) {Di2015NewLine                    UseColumnStarColor = false;Di2015NewLine                    DataGridView.InvalidateCell(this);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public Color GrayStarColor {Di2015NewLine        get { return grayStarColor; }Di2015NewLine        set {Di2015NewLine            if (grayStarColor != value) {Di2015NewLine                grayStarColor = value;Di2015NewLine                var col = OwningColumn as DataGridViewRatingColumn;Di2015NewLine                if (col != null && col.GrayStarColor != value) {Di2015NewLine                    UseColumnStarColor = false;Di2015NewLine                    DataGridView.InvalidateCell(this);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    //Change the star size via scaling factor (default by 1)Di2015NewLine    public float StarScale {Di2015NewLine        get { return starScale; }Di2015NewLine        set {Di2015NewLine            if (starScale != value) {Di2015NewLine                starScale = value;Di2015NewLine                var col = OwningColumn as DataGridViewRatingColumn;Di2015NewLine                if (col != null && col.StarScale != value) {Di2015NewLine                    UseColumnStarScale = false;                        Di2015NewLine                    DataGridView.InvalidateCell(this);                        Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public bool UseColumnStarColor { get; set; }Di2015NewLine    public bool UseColumnStarScale { get; set; }Di2015NewLine}Di2015NewLine
19924829Di2015UniqueSeparatorDataGridViewRatingColumn
19924829Di2015UniqueSeparatorDataGridViewRatingCell
19924829Di2015UniqueSeparatorUpdateBrushes
19924829Di2015UniqueSeparatorDataGridViewRatingCell
19924829Di2015UniqueSeparatorDataGridViewRatingColumn
19924829Di2015UniqueSeparatordataGridView1.Columns.Add(new DataGridViewRatingColumn(){Di2015NewLine     //init some properties here ...Di2015NewLine });Di2015NewLine//To change the ReadOnly which allows user to rate or not, you have to castDi2015NewLine//the column to DataGridViewRatingColumn first, this behavior is caused by Di2015NewLine//the failing/abnormal behavior of overriding the ReadOnly (I had to use new instead).Di2015NewLine((DataGridViewRatingColumn)dataGridView1.Columns[0]).ReadOnly = true; (default by false)Di2015NewLineDi2015NewLine//You should also enable DoubleBuffered on your DataGridView to eliminate flickerDi2015NewLinetypeof(Control).GetProperty("DoubleBuffered", System.Reflection.BindingFlags.Instance | Di2015NewLine                                              System.Reflection.BindingFlags.NonPublic)Di2015NewLine               .SetValue(dataGridView1, true, null);Di2015NewLine
19924903Di2015UniqueSeparatorDispatchIfNecessary
19924903Di2015UniqueSeparatorInvoke
19924903Di2015UniqueSeparatorDispatcher.BeginInvoke(action);Di2015NewLine
19925030Di2015UniqueSeparatorvar textValues = element.Nodes()Di2015NewLine                        .Where(n => n.NodeType == XmlNodeType.Text)Di2015NewLine                        .Select(n => n.ToString().Trim());Di2015NewLineDi2015NewLinestring value = string.Join("", textValues); // value is:   This is a test valueDi2015NewLine
19925036Di2015UniqueSeparatorTResult Query<TEntity, TResult>(Func<IQueryable<TEntity>, TResult> queryFunction)Di2015NewLine
19925036Di2015UniqueSeparatorusing(var context = new SomeContext())Di2015NewLine{Di2015NewLine    return queryFunction(context.Set<TEntity>());Di2015NewLine}Di2015NewLine
19925036Di2015UniqueSeparatorvar listOfCars = carService.Query(cars => carsDi2015NewLine    .Select(c => new { Id = c.Id, Name = c.Name })  // c stands for carDi2015NewLine    .GroupBy(a => a.Name) // a stands for "anonymous object"Di2015NewLine    .OrderBy( /* order your group in some fashion */)Di2015NewLine    .ToList()Di2015NewLine);Di2015NewLine
19925151Di2015UniqueSeparatormsdadapter.SelectCommand.Parameters.Add("p_maxsi", MySqlDbType.Decimal).Direction = ParameterDirection.Output;Di2015NewLine
19925311Di2015UniqueSeparator-- declare input - could be the input parameter of a stored procedure or somethingDi2015NewLineDECLARE @input XML = '<Employees><Employee><ID>4040</ID><Vorname>Dieter</Vorname><Nachname>Mueller</Nachname></Employee></Employees>'Di2015NewLineDi2015NewLine-- INSERT INTO your tableDi2015NewLineINSERT INTO dbo.Employee(ID, Vorname, Nachname)Di2015NewLine    -- shred the incoming XML into rows of data, based on the XPath /Employees/EmployeeDi2015NewLineSELECTDi2015NewLine    XEmp.value('(ID)[1]', 'int'),Di2015NewLine    XEmp.value('(Vorname)[1]', 'varchar(50)'),Di2015NewLine    XEmp.value('(Nachname)[1]', 'varchar(50)')Di2015NewLineFROM Di2015NewLine    @input.nodes('/Employees/Employee') AS XTbl(XEmp)Di2015NewLine
19925390Di2015UniqueSeparatorvar type = Type.GetType("AssemblyQualifiedName of my Type");Di2015NewLineDi2015NewLinevar properties = type.GetProperties();Di2015NewLine
19925524Di2015UniqueSeparatorresulted_value = final_resulted_series_name + ":" + period_name + ":" + period_final_value;Di2015NewLine
19925524Di2015UniqueSeparatorresulted_value = "{series_name : \\"" + final_resulted_series_name + "\\",period_name: \\"" + period_name + "\\",period_final_value: \\"" + period_final_value + "\\"}";Di2015NewLine
19925553Di2015UniqueSeparatorSELECT F.QuestionNum,F.Question,F.Answer Di2015NewLineFROM QuestionInsert F Di2015NewLineWHERE (F.CatId='" + DropDownList1.SelectedValue + "' And F.SubCatId='" + DropDownList3.SelectedValue + "')Di2015NewLineAND F.QuestionNum NOT IN (SELECT QuestionNum FROM Question_Papers)Di2015NewLineORDER BY F.QuestionNum DESCDi2015NewLine
19925553Di2015UniqueSeparatorSELECT F.QuestionNum,F.Question,F.Answer Di2015NewLineFROM QuestionInsert F  Di2015NewLineWHERE (F.CatId='" + DropDownList1.SelectedValue + "' Di2015NewLineAND F.SubCatId='" + DropDownList3.SelectedValue + "') Di2015NewLineAND F.QuestionNum IN (SELECT QuestionNum FROM Question_Papers)Di2015NewLineORDER BY F.QuestionNum DESC";Di2015NewLine
19925563Di2015UniqueSeparatorvar form_clean;Di2015NewLinevar checkDirty = true;Di2015NewLineDi2015NewLine//this should be called when the save button is clicked, but prior to the page postDi2015NewLinefunction onSave(){Di2015NewLine    checkDirty = false;Di2015NewLine}Di2015NewLineDi2015NewLinewindow.onbeforeunload = function (e) {Di2015NewLine    if(checkDirty){Di2015NewLine        var form_dirty = $("form").serialize();Di2015NewLine        if (form_clean != form_dirty) {Di2015NewLine            return 'There is unsaved form data.';Di2015NewLine        }Di2015NewLine    }Di2015NewLine};Di2015NewLine
19925563Di2015UniqueSeparatorform_clean
19925563Di2015UniqueSeparator$(document).ready(function(){ Di2015NewLine    form_clean = $("form").serialize(); Di2015NewLine});Di2015NewLine
19925563Di2015UniqueSeparatoronSave
19925563Di2015UniqueSeparator$("#mySubmitButtonID").click(function(){Di2015NewLine    onSave();Di2015NewLine});Di2015NewLine
19925599Di2015UniqueSeparatorpublic static bool IsRegistered<T>(this IUnityContainer container)Di2015NewLine{Di2015NewLine  Guard.ArgumentNotNull((object) container, "container");Di2015NewLine  return UnityContainerExtensions.IsRegistered(container, typeof (T));Di2015NewLine}Di2015NewLine
19925620Di2015UniqueSeparator < asp:ScriptManager ID="smAJAX1" runat="server" ScriptMode="Release" >< /asp:ScriptManager >Di2015NewLine    < asp:UpdatePanel ID="UpdatePanel1" runat="server" >Di2015NewLine        < ContentTemplate >Di2015NewLine            < a href="#" runat="server" class="" title="Help File" onserverclick="helpdoc">help</a >                Di2015NewLine        < /ContentTemplate >Di2015NewLine    </asp:UpdatePanel>Di2015NewLine
19925696Di2015UniqueSeparatorMyColumn INT IDENTITY(100000,1)Di2015NewLine
19925696Di2015UniqueSeparatorDBCC CHECKIDENT (yourtable, reseed, 99999)Di2015NewLine
19925964Di2015UniqueSeparator<TextBlock Grid.Row="1" Text="{Binding Hello}"/>
19925964Di2015UniqueSeparatorOnNavigatedTo
19925964Di2015UniqueSeparatorOnNavigatedFrom
19925964Di2015UniqueSeparatorFirstView.xaml.cs
19925964Di2015UniqueSeparatorFirstViewModel
19925964Di2015UniqueSeparatorFirstView
19925964Di2015UniqueSeparator<Page>
19925964Di2015UniqueSeparator<views:MvxStorePage>
19925964Di2015UniqueSeparatorOnNavigatedTo
19925964Di2015UniqueSeparatorOnNavigatedFrom
19925964Di2015UniqueSeparatorDefaultViewModel
19925964Di2015UniqueSeparatordefaultViewModel
19925964Di2015UniqueSeparatorDataContext
19925964Di2015UniqueSeparator<views:MvxStorePage>
19925964Di2015UniqueSeparatorDataContext
19926055Di2015UniqueSeparatorvar date = new DateTime(1,1,1,0,0,0,DateTimeKind.Utc);Di2015NewLine
19926319Di2015UniqueSeparator    <head>Di2015NewLine    <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">Di2015NewLine    <script src="http://code.jquery.com/jquery-1.8.3.js"></script>Di2015NewLine    <script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>Di2015NewLine    <script src="http://harvesthq.github.com/chosen/chosen/chosen.jquery.js"></script>Di2015NewLine    <link rel="stylesheet" href="http://harvesthq.github.com/chosen/chosen/chosen.css">Di2015NewLine<script type="text/javascript">Di2015NewLine$(function(){Di2015NewLine    $(".chzn-select").chosen();Di2015NewLine});Di2015NewLine</script>Di2015NewLine    </head>Di2015NewLine    <body>Di2015NewLine
19926319Di2015UniqueSeparator<asp:DropDownList ID="dr_list" runat="server" CssClass="chzn-select">Di2015NewLine   <asp:ListItem Value="-1" Text=""></asp:ListItem>Di2015NewLine      </asp:DropDownList>Di2015NewLine
19926345Di2015UniqueSeparator<Reference Include="AssemblyName, Version=3.0.0.0, Culture=neutral, processorArchitecture=MSIL">Di2015NewLine  <HintPath>...</HintPath>Di2015NewLine</Reference>Di2015NewLine
19926422Di2015UniqueSeparatorstring.Format
19926422Di2015UniqueSeparatorDebug.WriteLine
19926422Di2015UniqueSeparatorDebug.WriteLine(string.Format(....));
19926422Di2015UniqueSeparatorDebug.WriteLine("Test Data Value: {0}", data)
19926476Di2015UniqueSeparatorStreamWriter
19926476Di2015UniqueSeparatorusing
19926476Di2015UniqueSeparatorSend(
19926640Di2015UniqueSeparatoraMonster[] bigMonster = new aMonster[51];Di2015NewLine
19926640Di2015UniqueSeparatoraMonster[51]
19926640Di2015UniqueSeparator    for (int i = 0; i < 50; i+=2) Di2015NewLine    {Di2015NewLineDi2015NewLine        bigMonster[i] = new aMonster();Di2015NewLine        bigMonster[i].id = i;Di2015NewLine        bigMonster[i].name = "Gorky";Di2015NewLine        bigMonster[i].race = "Orc";Di2015NewLine        bigMonster[i].age = 320;Di2015NewLine        bigMonster[i].health = 200;Di2015NewLineDi2015NewLineDi2015NewLine        bigMonster[i+1] = new aMonster();Di2015NewLine        bigMonster[i+1].id = i;Di2015NewLine        bigMonster[i+1].name = "Runathu";Di2015NewLine        bigMonster[i+1].race = "Shaman";Di2015NewLine        bigMonster[i+1].age = 670;Di2015NewLine        bigMonster[i+1].health = 100;Di2015NewLineDi2015NewLine    }Di2015NewLine
19926640Di2015UniqueSeparatorList<aMonster>()
19926640Di2015UniqueSeparatorvar bigMonster = new List<aMonster>();Di2015NewLinevar id = 0;Di2015NewLinefor(int i=0; i<30; i++)Di2015NewLine{Di2015NewLine    bigMonster.Add(new aMonster { id=id++,name="Gorky",race="Orc",age=320,health=200 });Di2015NewLine    bigMonster.Add(new aMonster { id=id++,name="Runathu",race="Shaman",age=320,health=200 });Di2015NewLine    //and so onDi2015NewLine}Di2015NewLine
19926771Di2015UniqueSeparatorSCOPE_IDENTITY()
19926771Di2015UniqueSeparatorRETURN
19926771Di2015UniqueSeparatorOUTPUT
19926827Di2015UniqueSeparator     retrurn yourGroup.Items.Count > 1 Di2015NewLine
19926827Di2015UniqueSeparator <ControlTemplate TargetType="{x:Type GroupItem}" x:Key="withExpander">Di2015NewLine     <Expander IsExpanded="True">Di2015NewLine         <Expander.Header>Di2015NewLine               .....Di2015NewLine         </Expander.Header>Di2015NewLine         <ItemsPresenter />Di2015NewLine      </Expander>Di2015NewLine  </ControlTemplate>Di2015NewLineDi2015NewLineDi2015NewLine  <ControlTemplate TargetType="{x:Type GroupItem}" x:Key="withOutExpander">        Di2015NewLine        <ItemsPresenter />          Di2015NewLine  </ControlTemplate>Di2015NewLineDi2015NewLine  <Style x:Key="FirstLevel" TargetType="{x:Type GroupItem}">Di2015NewLine      <Setter Property="Template" Value="{StaticResource withExpander}" />Di2015NewLineDi2015NewLine      <Style.Triggers>Di2015NewLine          <DataTrigger Binding="{Binding , Converter={StaticResource GroupSizeToExpanderConverter}" Value="False">Di2015NewLine                  <Setter Property="Template" Value="{StaticResource withOutExpander}"/>Di2015NewLine          </DataTrigger>    Di2015NewLine      </Style.Triggers>Di2015NewLine  </Style>Di2015NewLine
19926827Di2015UniqueSeparatorpublic class GroupSizeToExpanderConverter: IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        CollectionViewGroup grp = (CollectionViewGroup)value;Di2015NewLine        return grp.Items.Count() > 0; // ALTERNATIVLY grp.ItemCount;             Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19926893Di2015UniqueSeparatorif (Application.Current.Dispatcher.CheckAccess()) Di2015NewLine{ Di2015NewLine     txtframeContainer.Text = Result; Di2015NewLine} Di2015NewLineelse Di2015NewLine{ Di2015NewLine    Application.Current.Dispatcher.Invoke((Action)(() =>Di2015NewLine    {Di2015NewLine        txtframeContainer.Text = "Enter in diagnostic mode   SupplierSpecific --> Ok ";Di2015NewLine    }));Di2015NewLine}Di2015NewLine
19927264Di2015UniqueSeparatorFunc<int, int, IEnumerable<PublicHoliday>>
19927264Di2015UniqueSeparator_publicHolidayFunc
19927264Di2015UniqueSeparatorvar publicHoliday = new PublicHolidayLogic(publicHolidayRepo);Di2015NewLinevar allocationLogic = new AllocationLogic(allocationRepo, Di2015NewLine                                          publicHolidayRepo, Di2015NewLine                                          publicHoliday.PublicHolidaysForTheYear);Di2015NewLine...Di2015NewLine
19927264Di2015UniqueSeparatorif (_publicHolidayRepository != null)Di2015NewLine{Di2015NewLine    var holidays = _publicHolidayFunc(allocation.StartDate.Year, allocation.User.CountryId);Di2015NewLineDi2015NewLine    if (_holidays.Count() > 0)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine
19927322Di2015UniqueSeparatorpublic class AClassDi2015NewLine{Di2015NewLine    public class AnotherClassDi2015NewLine    {Di2015NewLine        public int AProperty { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestVMDi2015NewLine{Di2015NewLine    public List<AClass.AnotherClass> NestedTypeList { get; set; }Di2015NewLine}Di2015NewLine
19927322Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLine        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"Di2015NewLine        xmlns:local="clr-namespace:WpfApplication1"Di2015NewLine        mc:Ignorable="d"Di2015NewLine        d:DataContext="{d:DesignInstance Type=local:TestVM}"Di2015NewLine        Title="MainWindow" Height="354" Width="535">Di2015NewLine    <Grid>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
19927322Di2015UniqueSeparatorError 1   Attempt by method '_.di1.WpfApplication1.TestVM..ctor()' to access method 'System.Collections.Generic.List'1<System.__Canon>..ctor()' failed.
19927332Di2015UniqueSeparatorif (string.IsNullOrEmpty(password) || string.IsNullOrEmpty(username)) return false;Di2015NewLine
19927332Di2015UniqueSeparator    using (var pc = new PrincipalContext(ContextType.Domain, "mydomain.lan")){Di2015NewLineDi2015NewLine    var isOk1 = pc.ValidateCredentials(null,null); //Always trueDi2015NewLine    var isOk2 = pc.ValidateCredentials("notexists","wrong"); //falseDi2015NewLine    var isOk2 = pc.ValidateCredentials("existing","correct"); //trueDi2015NewLine    }Di2015NewLine
19927332Di2015UniqueSeparator    using (var pc = new PrincipalContext(ContextType.Domain, "mydomain.lan", "notright","wrong")){Di2015NewLine        var isOk1 = pc.ValidateCredentials(null,null); //Always trueDi2015NewLine        var isOk2 = pc.ValidateCredentials("notexists","wrong"); //falseDi2015NewLine        var isOk2 = pc.ValidateCredentials("existing","correct"); //trueDi2015NewLine}Di2015NewLine
19927332Di2015UniqueSeparator using (var pc = new PrincipalContext(ContextType.Domain, "domain.lan", username, password))Di2015NewLine            {Di2015NewLine                if (pc.ValidateCredentials(username, password))Di2015NewLine                {Di2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        using (var searcher = new PrincipalSearcher(new UserPrincipal(pc)))Di2015NewLine                        {Di2015NewLine                            searcher.QueryFilter.SamAccountName = username;Di2015NewLine                            Principal u = searcher.FindOne();Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    catch (Exception)Di2015NewLine                    {Di2015NewLine                        return "no rights to work on ad";Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    return "user cannot login";Di2015NewLine                }Di2015NewLine            }Di2015NewLine
19927396Di2015UniqueSeparator<script type="text/javascript">    Di2015NewLine  document.title = "This is the new page title.";Di2015NewLineDi2015NewLine  //or Di2015NewLineDi2015NewLine $(document).attr('title', 'test');Di2015NewLine</script>Di2015NewLine
19927416Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine     <ItemTemplate>Di2015NewLine        <asp:HyperLink runat="server" ID="hf" Visible='<%# Eval("DocumentExists")%>' Text="Download"  NavigateUrl='<%# Eval("DocumentID") %>'/>Di2015NewLine     </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
19927598Di2015UniqueSeparatorfunction test(foo){Di2015NewLinealert(foo);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void TestButton_OnClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    webBrowser.InvokeScript("test", 1234);Di2015NewLine}Di2015NewLine
19927674Di2015UniqueSeparator protected void lnkDownload_Click(object sender, EventArgs e)Di2015NewLineDi2015NewLine{Di2015NewLineDi2015NewLine    string strFileName = "Test.txt";// lnkDownload.Text;Di2015NewLineDi2015NewLine    string path = Server.MapPath("~/Attachments//" + strFileName);Di2015NewLineDi2015NewLine    //tryDi2015NewLineDi2015NewLine    //{Di2015NewLineDi2015NewLine        if (File.Exists(path))Di2015NewLineDi2015NewLine        {Di2015NewLineDi2015NewLine            byte[] bts = System.IO.File.ReadAllBytes(path);Di2015NewLineDi2015NewLine            MemoryStream ms = new MemoryStream(bts);Di2015NewLineDi2015NewLine            Response.Clear();Di2015NewLineDi2015NewLine            Response.AddHeader("Content-Disposition", "attachment;filename=\\"" + strFileName + "\\"");Di2015NewLineDi2015NewLine            Response.TransmitFile(path);Di2015NewLineDi2015NewLine            Response.End();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    //}Di2015NewLineDi2015NewLine    //catch (Exception ex)Di2015NewLineDi2015NewLine    //{Di2015NewLineDi2015NewLine    //    throw ex;Di2015NewLineDi2015NewLine    //}    Di2015NewLineDi2015NewLine}Di2015NewLine
19927933Di2015UniqueSeparatorvar obj = new {Di2015NewLine    series_name = final_resulted_series_name,Di2015NewLine    period_name,Di2015NewLine    period_final_value Di2015NewLine};Di2015NewLinevar json = JsonConvert.SerializeObject(obj);Di2015NewLine
19927933Di2015UniqueSeparatorabc
19927933Di2015UniqueSeparatordef
19927933Di2015UniqueSeparatorghi
19927933Di2015UniqueSeparator{"series_name":"abc","period_name":"def","period_final_value":"ghi"}Di2015NewLine
19928119Di2015UniqueSeparatorif (key.ToLower() != "filter" || key.ToLower() != "page" || key.ToLower() != "gridtype")Di2015NewLine
19928119Di2015UniqueSeparatorif (key.ToLower() != "filter" && key.ToLower() != "page" && key.ToLower() != "gridtype")Di2015NewLine
19928119Di2015UniqueSeparatorkey
19928119Di2015UniqueSeparatorif (key == null) continue; Di2015NewLine
19928119Di2015UniqueSeparator@foreach (string key in Request.QueryString)Di2015NewLine
19928119Di2015UniqueSeparator@foreach (string key in Request.QueryString.AllKeys)Di2015NewLine
19928122Di2015UniqueSeparatorTableLayoutPanel
19928128Di2015UniqueSeparatorElses
19928165Di2015UniqueSeparatorTeacher
19928165Di2015UniqueSeparatorvar query = from th in db.Teachers.Include(t => t.Orders)Di2015NewLine            select th;Di2015NewLine
19928165Di2015UniqueSeparatorusing System.Data.Entity
19928165Di2015UniqueSeparatorInclude()
19928181Di2015UniqueSeparatorpublic partial class Default : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    protected void Button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (Session["Incrementer"] == null)Di2015NewLine        {Di2015NewLine            Session["Incrementer"] = "1";Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            int incrementer = Convert.ToInt32(Session["incrementer"].ToString()) + 1;Di2015NewLine            Session["incrementer"] = incrementer.ToString();Di2015NewLine        }Di2015NewLine        Label1.Text = Session["incrementer"].ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19928250Di2015UniqueSeparatorvar sellMax = _sellOrder.Max(y => y.Price);Di2015NewLinevar t = _buyOrder.Where(x => x.Price > sellMax);Di2015NewLine
19928405Di2015UniqueSeparator<?
19928405Di2015UniqueSeparator<
19928405Di2015UniqueSeparator<
19928405Di2015UniqueSeparator?
19928405Di2015UniqueSeparatorReplace
19928405Di2015UniqueSeparator    xml = Regex.Replace(Di2015NewLine        xmlDi2015NewLine    ,   Regex.Escape("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>")Di2015NewLine    ,   ""Di2015NewLine    ,   RegexOptions.IgnoreCase);Di2015NewLine
19928417Di2015UniqueSeparatorLIKE
19928417Di2015UniqueSeparator[
19928417Di2015UniqueSeparator[[]
19928417Di2015UniqueSeparatorcmd.CommandText =Di2015NewLine    "SELECT * FROM Clients WHERE LastName LIKE ?";Di2015NewLinestring s = "%abc[def%";  // test dataDi2015NewLinecmd.Parameters.AddWithValue("?", s);Di2015NewLineOleDbDataReader rdr = cmd.ExecuteReader();Di2015NewLine
19928417Di2015UniqueSeparatorcmd.CommandText =Di2015NewLine    "SELECT * FROM Clients WHERE LastName LIKE ?";Di2015NewLinestring s = "%abc[def%";  // test dataDi2015NewLinecmd.Parameters.AddWithValue("?", s.Replace("[", "[[]"));Di2015NewLineOleDbDataReader rdr = cmd.ExecuteReader();Di2015NewLine
19928492Di2015UniqueSeparator.ValueMember
19928492Di2015UniqueSeparatorDataGridViewComboBoxColumn
19928492Di2015UniqueSeparator.ValueMember
19928492Di2015UniqueSeparator.DisplayMember
19928492Di2015UniqueSeparatorDataTable
19928492Di2015UniqueSeparatorDataSource
19928492Di2015UniqueSeparatorDataGridViewComboBoxColumn
19928492Di2015UniqueSeparatorDataTable dtPlodiny;Di2015NewLineusing(SqlConnection sqlConn = new SqlConnection(conn))//conn - your connection stringDi2015NewLine{Di2015NewLine    string sqlQuery = @"SELECT ID, Description FROM PLODINY"; //better practice use only fields you needDi2015NewLine    using(SqlCommand cmd = new SqlCommand(sqlQuery, sqlConn))Di2015NewLine    {Di2015NewLine        SqlDataAdapter da = new SqlDataAdapter(cmd);Di2015NewLine        da.Fill(dtPlodiny);Di2015NewLine    }Di2015NewLine}Di2015NewLinecbColumn = new DataGridViewComboBoxColumn();Di2015NewLinecbColumn.Name = "POLOZKAcb" Di2015NewLinecbColumn.DataSource = dtPlodiny; //Changed with DataTableDi2015NewLineDi2015NewLine//add next two rowsDi2015NewLinecbColumn.DisplayMember = "Description" //property from .Datasource you want to show for userDi2015NewLinecbColumn.ValueMember = "ID" //property from .Datasource you want use as Value - reference to DataPropertyNameDi2015NewLineDi2015NewLinecbColumn.DropDownWidth = 100;Di2015NewLinedataGridView1.Columns.Add(cbColumn);Di2015NewLinecbColumn.DisplayIndex = 3;Di2015NewLinecbColumn.HeaderText = "PoloÅ¾ka";Di2015NewLinecbColumn.DataPropertyName = "POLOZKAcb";Di2015NewLine
19928492Di2015UniqueSeparatorthis.MyColumnPolozka.Name...
19928556Di2015UniqueSeparator@Html.ActionLink(Model.Name, "StreamUploadedImage", "Streamer", new {id = "38" })Di2015NewLine
19928556Di2015UniqueSeparator<a href="~/Content/uploads/38.png">@Model.Name</a>Di2015NewLine
19928754Di2015UniqueSeparatorType.IsByRef
19928754Di2015UniqueSeparatorpublic static bool PropertiesEqual<T>(this T self, T other, params string[] skip)Di2015NewLine{Di2015NewLine    if (self == null) return other == null;Di2015NewLine    if (self.Equals(other)) return true;Di2015NewLineDi2015NewLine    var properties = from p in typeof(T).GetProperties()Di2015NewLine                        where !skip.Contains(p.Name)Di2015NewLine                        && !p.PropertyType.IsByRef // take only structs and stringDi2015NewLine                        select p;Di2015NewLineDi2015NewLine    foreach (var p in properties)Di2015NewLine    {Di2015NewLine        var selfValue = p.GetValue(self);Di2015NewLine        var otherValue = p.GetValue(other);Di2015NewLine        if (!object.Equals(selfValue, otherValue))Di2015NewLine            return false;Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
19928827Di2015UniqueSeparatorDictionary<int, string>Di2015NewLine
19928827Di2015UniqueSeparatorvar orderedPositions = columnPositions.OrderBy(x => x.Value);Di2015NewLineforeach(var position in orderedPositions)Di2015NewLine{Di2015NewLine  // do your stuff using position.Key and position.Value Di2015NewLine}Di2015NewLine
19928827Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
19928913Di2015UniqueSeparator<services> Di2015NewLine     <service behaviorConfiguration="Default" name="Example.MyService"> Di2015NewLine       <endpoint address="" behaviorConfiguration="webBehavior" binding="webHttpBinding" contract="Example.IServiceContract" /> Di2015NewLine          <host> Di2015NewLine              <baseAddresses> Di2015NewLine                  <add baseAddress="http://localhost:9000/MYService" /> Di2015NewLine              </baseAddresses> Di2015NewLine          </host> Di2015NewLine        </service> Di2015NewLine    </services> Di2015NewLine    <behaviors> Di2015NewLine        <endpointBehaviors> Di2015NewLine            <behavior name="webBehavior"> Di2015NewLine                <webHttp /> Di2015NewLine            </behavior> Di2015NewLine        </endpointBehaviors> Di2015NewLine
19929062Di2015UniqueSeparatorpublic class SlotDi2015NewLine{Di2015NewLine    private double _LowerBound;Di2015NewLine    private double _UpperBound;Di2015NewLine    private List<double> _Values;Di2015NewLineDi2015NewLine    public Slot(double lowerBound, double upperBound)Di2015NewLine    {Di2015NewLine        if (upperBound < lowerBound)Di2015NewLine            throw new ArgumentOutOfRangeException("The upper bound must be greater or equal the lower bound.");Di2015NewLineDi2015NewLine        _LowerBound = lowerBound;Di2015NewLine        _UpperBound = upperBound;Di2015NewLineDi2015NewLine        _Values = new List<double>();Di2015NewLine        _Values.Add(lowerBound);Di2015NewLine        Values = _Values.AsReadOnly();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ReadOnlyCollection<double> Values { get; private set; }Di2015NewLineDi2015NewLine    public void Add(double value)Di2015NewLine    {Di2015NewLine        if (!IsResponsible(value))Di2015NewLine        {Di2015NewLine            var message = String.Format("The value {0} is not greater or equal {1} or less or equal {2}.", value, _LowerBound, _UpperBound);Di2015NewLine            throw new ArgumentOutOfRangeException(message);Di2015NewLine        }Di2015NewLineDi2015NewLine        _Values.Add(value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsResponsible(double value)Di2015NewLine    {Di2015NewLine        return value >= _LowerBoundDi2015NewLine               && value <= _UpperBound;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return String.Format("Range: {0} - {1}, Elements: {2}", _LowerBound, _UpperBound, _Values.Count);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19929062Di2015UniqueSeparatorpublic class SlotCollection : IEnumerable<KeyValuePair<int, double>>Di2015NewLine{Di2015NewLine    private List<Slot> _Slots;Di2015NewLine    private double _TolerancePerSlot;Di2015NewLineDi2015NewLine    public SlotCollection(double tolerancePerSlot)Di2015NewLine    {Di2015NewLine        if(tolerancePerSlot < 0)Di2015NewLine            throw new ArgumentException("tolerancePerSlot must be greater or equal zero.", "tolerancePerSlot");Di2015NewLineDi2015NewLine        _TolerancePerSlot = tolerancePerSlot;Di2015NewLine        _Slots = new List<Slot>();Di2015NewLine        Slots = new ReadOnlyCollection<Slot>(_Slots);Di2015NewLine    }Di2015NewLineDi2015NewLine    public ReadOnlyCollection<Slot> Slots { get; private set; }Di2015NewLineDi2015NewLine    public void Add(IEnumerable<double> values)Di2015NewLine    {Di2015NewLine        foreach (var value in values)Di2015NewLine        {Di2015NewLine            Add(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<KeyValuePair<int, double>> GetEnumerator()Di2015NewLine    {Di2015NewLine        for (int i = 0; i < _Slots.Count; i++)Di2015NewLine        {Di2015NewLine            yield return new KeyValuePair<int, double>(i, _Slots[i].Values.First());Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Add(double value)Di2015NewLine    {Di2015NewLine        var matchingSlot = _Slots.FirstOrDefault(slot => slot.IsResponsible(value));Di2015NewLineDi2015NewLine        if (matchingSlot == null)Di2015NewLine        {Di2015NewLine            matchingSlot = new Slot(value, value + _TolerancePerSlot);Di2015NewLine            _Slots.Add(matchingSlot);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            matchingSlot.Add(value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19929062Di2015UniqueSeparatorvar inputs = new List<double>()Di2015NewLine{Di2015NewLine    0.01, 0.03, 0.10, 0.18,Di2015NewLine    0.24, 0.28, 0.30, 0.31,Di2015NewLine    0.33, 0.55, 2.34, 3.37,Di2015NewLine    9.19, 9.22, 10.28Di2015NewLine};Di2015NewLine
19929062Di2015UniqueSeparatorvar slots = new SlotCollection(0.02);Di2015NewLineslots.Add(inputs);Di2015NewLineDi2015NewLine// Spit out the desired user output.Di2015NewLineforeach (var kvp in slots)Di2015NewLine{Di2015NewLine    Console.WriteLine(kvp.Key + " " + kvp.Value);Di2015NewLine}Di2015NewLineDi2015NewLineConsole.WriteLine();Di2015NewLineDi2015NewLine// Output a more in depth view of the data distribution.Di2015NewLineforeach (var slot in slots.Slots)Di2015NewLine{Di2015NewLine    Console.WriteLine(slot);Di2015NewLineDi2015NewLine    foreach (var value in slot.Values)Di2015NewLine    {Di2015NewLine        Console.WriteLine("\\t" + value);Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.WriteLine();Di2015NewLine}Di2015NewLine
19929125Di2015UniqueSeparatorContains
19929125Di2015UniqueSeparatorinternal
19929125Di2015UniqueSeparatorContains
19929125Di2015UniqueSeparatorList<T>
19929125Di2015UniqueSeparatorList<T>
19929183Di2015UniqueSeparatorobject resultOfSum = result.Where(Di2015NewLine                       i =>Di2015NewLine                       i.Date >= localStart && i.Date <= localEnd && i.RetailerId !=null ? i.RetailerId== retailer.Id:i.RetailerId==null &&Di2015NewLine                       i.ManufacturerId == manufacturerRow.IdDi2015NewLine                       && i.CountryId == countryRow.Id && i.CategoryId == categoryRow.Id).Sum(i=>(int?)(i.WidgetClicks))??0;Di2015NewLine                    if(resultOfSum!=null)Di2015NewLine                    {Di2015NewLine                        retailerWeeklyClickCount = (Convert.ToInt32(resultOfSum));Di2015NewLine                    }Di2015NewLine
19929189Di2015UniqueSeparatormodified_listofstrings.Add(obj);Di2015NewLine
19929189Di2015UniqueSeparatorjSearializer.Serialize(modified_listofstrings)Di2015NewLine
19929189Di2015UniqueSeparator List<object> modified_listofstrings = new List<object>();Di2015NewLine System.Web.Script.Serialization.JavaScriptSerializer jSearializer =Di2015NewLine             new System.Web.Script.Serialization.JavaScriptSerializer();Di2015NewLine
19929227Di2015UniqueSeparatormodelBuilder.Entity<Link>()Di2015NewLine            .HasRequired(p => p.Subpage)Di2015NewLine            .WithMany(l => l.Links)Di2015NewLine            .HasForeignKey(k => k.SubpageID);Di2015NewLineDi2015NewLinemodelBuilder.Entity<Link>()Di2015NewLine            .HasRequired(p => p.Domain)Di2015NewLine            .WithMany(l => l.Links)Di2015NewLine            .HasForeignKey(k => k.ID);Di2015NewLine
19929257Di2015UniqueSeparatorDispatcher.Invoke
19929257Di2015UniqueSeparatorEmpuje
19929257Di2015UniqueSeparatorTimerClockThread = new Thread( new ParameterizedThreadStart(Empuje));Di2015NewLineDi2015NewLineprivate void Empuje(object objeto)Di2015NewLine{Di2015NewLine   Thread.Sleep(2000); Di2015NewLine   Dispatcher.BeginInvoke(new Action(() => {Di2015NewLine       MessageBox.Show("This should not freeze the window");Di2015NewLine   }));Di2015NewLine   //........ Do stuff.....Di2015NewLine}Di2015NewLine
19929257Di2015UniqueSeparatorasync
19929257Di2015UniqueSeparatorprivate async void EmpujeEvent(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    await Task.Delay(2000);Di2015NewLine    MessageBox.Show(...);Di2015NewLine}Di2015NewLine
19929279Di2015UniqueSeparatorGridView.DataBind()
19929279Di2015UniqueSeparatorPage_Load() {Di2015NewLine    GridView1.Visible = IsPostBack;Di2015NewLine}Di2015NewLineDi2015NewLineDataTable result;Di2015NewLineDi2015NewLineBtn_Click() {Di2015NewLine    // do some calculationsDi2015NewLine    result = ...;Di2015NewLineDi2015NewLine    // calculations finished... bind the gridviewDi2015NewLine    GridView1.DataBind();Di2015NewLine}Di2015NewLineDi2015NewLineGetData() {Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19929305Di2015UniqueSeparatorvar _viewModelFactory = MockRepository.GenerateStub<IViewModelFactory>();Di2015NewLinevar id = 1;Di2015NewLineviewModelFactory.Stub(x => x.Create<ViewModel1>(id))Di2015NewLine                   .Return(new ViewModel1(id));Di2015NewLine
19929305Di2015UniqueSeparatorvar _viewModelFactory = MockRepository.GenerateStub<IViewModelFactory>();Di2015NewLineviewModelFactory.Stub(x => x.Create<ViewModel1>(0))Di2015NewLine                   .IgnoreArguments()Di2015NewLine                   .Return(new ViewModel1(10));Di2015NewLine
19929305Di2015UniqueSeparatorvar _viewModelFactory = MockRepository.GenerateStub<IViewModelFactory>();Di2015NewLineviewModelFactory.Stub(x => x.Create<ViewModel1>(Arg<int>.Is.Anything))Di2015NewLine                   .Return(null)Di2015NewLine                   .WhenCalled(x => {Di2015NewLine                       var id = (int)x.Arguments[0];Di2015NewLine                       x.ReturnValue = new ViewModel1(id);Di2015NewLine                    });Di2015NewLine
19929450Di2015UniqueSeparatorForEach
19929450Di2015UniqueSeparatorList<T>
19929450Di2015UniqueSeparatorli.ForEach(z => z.MarksExamTotalOverAll = 50);Di2015NewLine
19929596Di2015UniqueSeparatorMyTable.Where(x => x.SomeDate == DateTime.Today);Di2015NewLine
19929596Di2015UniqueSeparatorMyTable.Where(x => x.SomeDate >= DateTime.Today && x.SomeDate < DateTime.Today.AddDays(1));Di2015NewLine
19929643Di2015UniqueSeparator<UserControl x:Class="StackTest.TestControl"Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine             mc:Ignorable="d" Di2015NewLine             MouseLeftButtonUp="TestControl_OnMouseLeftButtonUp"Di2015NewLine             MouseDoubleClick="TestControl_OnMouseDoubleClick"Di2015NewLine             MouseLeftButtonDown="TestControl_OnMouseLeftButtonDown">Di2015NewLineDi2015NewLine  <Grid x:Name="LayoutRoot" Background="{StaticResource PhoneChromeBrush}">Di2015NewLine    <StackPanel Orientation="Vertical">Di2015NewLine      <Image  Source="{Binding TabItemImage}" HorizontalAlignment="Center" Stretch="None" VerticalAlignment="Top" />Di2015NewLine      <TextBlock Text="{Binding TabItemText}" FontSize="15" HorizontalAlignment="Center" VerticalAlignment="Bottom" />Di2015NewLine    </StackPanel>Di2015NewLine  </Grid>Di2015NewLineDi2015NewLine</UserControl>Di2015NewLine
19929643Di2015UniqueSeparatorpublic partial class TestControl : UserControlDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty ImageProperty = DependencyProperty.Register("TabItemImage" , typeof(string) , typeof(TabItem) , null);Di2015NewLine    public static readonly DependencyProperty TextProperty = DependencyProperty.Register("TabItemText" , typeof(string) , typeof(TabItem) , null);Di2015NewLineDi2015NewLine    public string TabItemImageDi2015NewLine    {Di2015NewLine        get { return (string)GetValue(ImageProperty); }Di2015NewLine        set { SetValue(ImageProperty , value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string TabItemTextDi2015NewLine    {Di2015NewLine        get { return (string)GetValue(TextProperty); }Di2015NewLine        set { SetValue(TextProperty , value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public TestControl()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        this.DataContext = this;Di2015NewLine    }Di2015NewLineDi2015NewLine    // orDi2015NewLineDi2015NewLine    private void TestControl_OnMouseDoubleClick(object sender, MouseButtonEventArgs e)Di2015NewLine    {Di2015NewLine        // Add logic...Di2015NewLine    }Di2015NewLineDi2015NewLine    // orDi2015NewLineDi2015NewLine    private void TestControl_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine    {Di2015NewLine        // Add logic...Di2015NewLine    }Di2015NewLineDi2015NewLine    // orDi2015NewLineDi2015NewLine    private void TestControl_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)Di2015NewLine    {Di2015NewLine        // Add logic...Di2015NewLine    }Di2015NewLine}Di2015NewLine
19929740Di2015UniqueSeparatorvar lst= new string[]{"_catalog","_register"};Di2015NewLineDi2015NewLinevar qry = (from a in db.Articles Di2015NewLine          join b MetaKeywords on a.ArticleId equals b.ArticleIdDi2015NewLine          where lst.Contains(b.MetaKeyword)Di2015NewLine          group a by a.ArticleId into gDi2015NewLine          where g.Count() >= 2Di2015NewLine          select new {ArticleId = g.Key, Total = g.Count()} );Di2015NewLine
19929740Di2015UniqueSeparatorlst
19929747Di2015UniqueSeparatorString.Substring(...)
19929747Di2015UniqueSeparatorprivate char[] numbers = new char[]{'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};Di2015NewLineDi2015NewLinepublic string ExpandCode(string s)Di2015NewLine{Di2015NewLine    //Find the first numeric char.Di2015NewLine    int index = s.IndexOfAny(numbers);Di2015NewLine    //Insert zeros and return the result. Di2015NewLine    return s.Insert(index, new String('0', 15 - s.Length));Di2015NewLine}Di2015NewLine
19929793Di2015UniqueSeparator        var query = txtQuery.Text;Di2015NewLine        var connectionString = ConfigurationManager.ConnectionStrings["connection"].ConnectionString;Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            string data;Di2015NewLine            string schema;Di2015NewLine            GetSchema(connectionString, query, out data, out schema);Di2015NewLine            txtXML.Text = data;Di2015NewLine            txtXSD.Text = schema;Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            MessageBox.Show(ex.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);Di2015NewLine        }Di2015NewLine
19929793Di2015UniqueSeparatorGetSchema
19929793Di2015UniqueSeparator    private void GetSchema(string connectionString, string query, out string data, out string schema)Di2015NewLine    {Di2015NewLine        using (var conn = new Npgsql.NpgsqlConnection(connectionString))Di2015NewLine        using (var da = new Npgsql.NpgsqlDataAdapter(query, conn))Di2015NewLine        using (var ds = new DataSet())Di2015NewLine        using (var dataStream = new MemoryStream())Di2015NewLine        using (var schemaStream = new MemoryStream())Di2015NewLine        {Di2015NewLine            conn.Open();Di2015NewLine            da.Fill(ds);Di2015NewLine            ds.WriteXml(dataStream);Di2015NewLine            ds.WriteXmlSchema(schemaStream);Di2015NewLine            dataStream.Position = 0;Di2015NewLine            schemaStream.Position = 0;Di2015NewLine            using (var dataReader = new StreamReader(dataStream))Di2015NewLine            using (var schemaReader = new StreamReader(schemaStream))Di2015NewLine            {Di2015NewLine                data = dataReader.ReadToEnd();Di2015NewLine                schema = schemaReader.ReadToEnd();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19929846Di2015UniqueSeparatorview.ToTable()
19929846Di2015UniqueSeparatorview.Table
19929846Di2015UniqueSeparatorDataTable table=GetData();Di2015NewLineDataView view = table.DefaultView;Di2015NewLineview.Sort = "Distance";Di2015NewLineDi2015NewLineDataTable dt = view.ToTable();Di2015NewLine
19929953Di2015UniqueSeparatorbasicHttpBinding
19929987Di2015UniqueSeparator;
19929987Di2015UniqueSeparatorforeach(String line in File.ReadAllLines(path).Skip(1))Di2015NewLine{Di2015NewLine    String[] columns = line.Split(';');Di2015NewLine    String amount = columns[0];Di2015NewLine    String P_price = columns[1];Di2015NewLine    //etcDi2015NewLine}Di2015NewLine
19930084Di2015UniqueSeparatorArgumentException
19930133Di2015UniqueSeparatorMeasureOverride
19930133Di2015UniqueSeparatorArrangeOverride
19930133Di2015UniqueSeparatorMeasureOverride
19930133Di2015UniqueSeparatorArrangeOVerride
19930185Di2015UniqueSeparatorkCCBlockSizeAES128
19930185Di2015UniqueSeparatorkCCKeySizeAES128
19930185Di2015UniqueSeparator+ (NSData *)doCipher:(NSData *)dataInDi2015NewLine                  iv:(NSData *)ivDi2015NewLine                 key:(NSData *)symmetricKeyDi2015NewLine             context:(CCOperation)encryptOrDecryptDi2015NewLine{Di2015NewLine    CCCryptorStatus ccStatus   = kCCSuccess;Di2015NewLine    size_t          cryptBytes = 0;    // Number of bytes moved to buffer.Di2015NewLine    NSMutableData  *dataOut    = [NSMutableData dataWithLength:dataIn.length + kCCBlockSizeAES128];Di2015NewLineDi2015NewLine    ccStatus = CCCrypt( encryptOrDecrypt,Di2015NewLine                       kCCAlgorithmAES128,Di2015NewLine                       kCCOptionPKCS7Padding,Di2015NewLine                       symmetricKey.bytes, Di2015NewLine                       kCCKeySizeAES128,Di2015NewLine                       iv.bytes,Di2015NewLine                       dataIn.bytes, dataIn.length,Di2015NewLine                       dataOut.mutableBytes, dataOut.length,Di2015NewLine                       &cryptBytes);Di2015NewLineDi2015NewLine    if (ccStatus != kCCSuccess) {Di2015NewLine        NSLog(@"CCCrypt status: %d", ccStatus);Di2015NewLine        return nil;Di2015NewLine    }Di2015NewLine    dataOut.length = cryptBytes;Di2015NewLine    return dataOut;Di2015NewLine}Di2015NewLine
19930313Di2015UniqueSeparatorMultiResImageChooser
19930313Di2015UniqueSeparatorMultiResImageChooser
19930313Di2015UniqueSeparatorMultiResImageChooserUri
19930313Di2015UniqueSeparatorpublic class MultiResImageChooserDi2015NewLine{Di2015NewLine    public Uri BestResolutionImageDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            switch (ResolutionHelper.CurrentResolution)Di2015NewLine            {Di2015NewLine                case Resolutions.HD:Di2015NewLine                    return new Uri("/Assets/MyImage.screen-720p.jpg", UriKind.Relative);Di2015NewLine                case Resolutions.WXGA:Di2015NewLine                    return new Uri("/Assets/MyImage.screen-wxga.jpg", UriKind.Relative);Di2015NewLine                case Resolutions.WVGA:Di2015NewLine                    return new Uri("/Assets/MyImage.screen-wvga.jpg", UriKind.Relative);Di2015NewLine                default:Di2015NewLine                    throw new InvalidOperationException("Unknown resolution type");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19930325Di2015UniqueSeparatortableDi2015NewLine   .Where(x=>x.description=="Axxx" && x.filter=="L")Di2015NewLine   .GroupBy(x=>x.description)Di2015NewLine   .Select(x=>new {Di2015NewLine       description=x.Key,Di2015NewLine       mindate=x.Min(z=>z.date),Di2015NewLine       maxdate=x.Max(z=>z.date),Di2015NewLine       sumvalue1=x.Sum(z=>z.value1),Di2015NewLine       sumvalue2=x.Sum(z=>z.value2)Di2015NewLine    });Di2015NewLine
19930344Di2015UniqueSeparatorprivate CancellationTokenSource _tokenSource2;Di2015NewLineprivate CancellationToken _token;Di2015NewLineDi2015NewLineprivate void btnSessions_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    _tokenSource2 = new CancellationTokenSource();Di2015NewLine    _token = _tokenSource2.Token;Di2015NewLineDi2015NewLine    Task task = Task.Run(() => DownloadThread(), _token);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void DownloadThread()Di2015NewLine{Di2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        //do workDi2015NewLineDi2015NewLine        //cancel if neededDi2015NewLine        if (_token.IsCancellationRequested)Di2015NewLine        {Di2015NewLine            _token.ThrowIfCancellationRequested();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnCancel_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Stop the threadDi2015NewLine    _tokenSource2.Cancel();Di2015NewLine}Di2015NewLine
19930344Di2015UniqueSeparatorThread.Abort
19930456Di2015UniqueSeparatorvoid
19930456Di2015UniqueSeparatorTask
19930456Di2015UniqueSeparatorTask<T>
19930456Di2015UniqueSeparatorpublic async Task<int> GetSiteLengthAsync(string url) Di2015NewLine{  Di2015NewLine    HttpClient client = new HttpClient();               <= Sync  Di2015NewLine    Task<string> download1 = client.GetStringAsync(url); <= Sync  Di2015NewLine    string site1 = await download1;   <= Async (Another thread)Di2015NewLine    return site1.Length;              <= Async (Another thread)Di2015NewLine}Di2015NewLine
19930560Di2015UniqueSeparatorforeach(var item in li.Where(w => w.name =="di"))Di2015NewLine{Di2015NewLine   item.age=10;Di2015NewLine}Di2015NewLine
19930617Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            foo(bar);Di2015NewLineDi2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLineDi2015NewLine        public static bool bar(string pVal)Di2015NewLine        {Di2015NewLine            throw new Exception("hello there");Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void foo(Func<string, bool> pFunc)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                pFunc("test");Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Error: "+ ex.Message);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19930730Di2015UniqueSeparatorusing (Transaction acTrans = acDb.TransactionManager.StartTransaction())Di2015NewLine{Di2015NewLine    var acBlkTbl = (BlockTable)acTrans.GetObject(acDb.BlockTableId, OpenMode.ForRead);Di2015NewLine    var acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);Di2015NewLineDi2015NewLine    // Create the rectangleDi2015NewLine    var acPoint = new Point2d(0, 0);Di2015NewLine    var acPoly = new Polyline(4);Di2015NewLine    acPoly.Normal = Vector3d.ZAxis;Di2015NewLine    acPoly.AddVertexAt(0, acPoint, 0, -1, -1);Di2015NewLine    acPoly.AddVertexAt(1, new Point2d(acPoint.X + 20, acPoint.Y), 0, -1, -1);Di2015NewLine    acPoly.AddVertexAt(2, new Point2d(acPoint.X + 20, acPoint.Y + 20), 0.0, -1.0, -1.0);Di2015NewLine    acPoly.AddVertexAt(3, new Point2d(acPoint.X, acPoint.Y + 20), 0.0, -1.0, -1.0);Di2015NewLine    acPoly.Closed = true;Di2015NewLineDi2015NewLine    // Add the rectangle to the block table recordDi2015NewLine    acBlkTblRec.AppendEntity(acPoly);Di2015NewLine    acTrans.AddNewlyCreatedDBObject(acPoly, true);Di2015NewLineDi2015NewLine    // Create the rectangle holeDi2015NewLine    var acHole = new Polyline(4);Di2015NewLine    acHole.Normal = Vector3d.ZAxis;Di2015NewLine    acPoint = new Point2d(5,5);Di2015NewLine    acHole.AddVertexAt(0, acPoint, 0.0, -1.0, -1.0);Di2015NewLine    acHole.AddVertexAt(1, new Point2d(acPoint.X + 5, acPoint.Y), 0.0, -1.0, -1.0);Di2015NewLine    acHole.AddVertexAt(2, new Point2d(acPoint.X + 5, acPoint.Y + 5), 0.0, -1.0, -1.0);Di2015NewLine    acHole.AddVertexAt(3, new Point2d(acPoint.X, acPoint.Y + 5), 0.0, -1.0, -1.0);Di2015NewLine    acHole.Closed = true;Di2015NewLineDi2015NewLine    // Add the hole rectangle to the block table recordDi2015NewLine    acBlkTblRec.AppendEntity(acHole);Di2015NewLine    acTrans.AddNewlyCreatedDBObject(acHole, true);Di2015NewLineDi2015NewLine    // Create the hatchDi2015NewLine    var acHatch = new Hatch();Di2015NewLine    acBlkTblRec.AppendEntity(acHatch);Di2015NewLine    acTrans.AddNewlyCreatedDBObject(acHatch, true);Di2015NewLine    acHatch.SetDatabaseDefaults();Di2015NewLine    acHatch.SetHatchPattern(HatchPatternType.PreDefined, "ANSI31");Di2015NewLine    acHatch.PatternScale = 10;Di2015NewLine    acHatch.Associative = true;Di2015NewLineDi2015NewLine    // Add the outer boundaryDi2015NewLine    acHatch.AppendLoop(HatchLoopTypes.External, new ObjectIdCollection { acPoly.ObjectId });Di2015NewLineDi2015NewLine    // Add the inner boundaryDi2015NewLine    acHatch.AppendLoop(HatchLoopTypes.Default, new ObjectIdCollection { acHole.ObjectId });Di2015NewLineDi2015NewLine    // Validate the hatchDi2015NewLine    acHatch.EvaluateHatch(true);Di2015NewLineDi2015NewLine    acTrans.Commit();Di2015NewLine}Di2015NewLine
19930816Di2015UniqueSeparatorExecuteReader
19930816Di2015UniqueSeparatorExecuteNonQuery
19930816Di2015UniqueSeparatorvar alreadyReg = cmd.CreateParameter();Di2015NewLinealreadyReg.Direction = System.Data.ParameterDirection.Output;Di2015NewLinealreadyReg.ParameterName = "AllreadyReg";Di2015NewLinealreadyReg.DbType = DbType.Int32;Di2015NewLinecmd.Parameters.Add(alreadyReg);Di2015NewLine//...Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLine//...Di2015NewLineint val = (int)alreadyReg.Value;Di2015NewLine
19930816Di2015UniqueSeparatorDbCommand
19930816Di2015UniqueSeparatorDbCommand
19930816Di2015UniqueSeparatorSqlCommand
19930816Di2015UniqueSeparatorvar alreadyReg = cmd.Parameters.Add("AllreadyReg", SqlDbType.Int);Di2015NewLinealreadyReg.Direction = ParameterDirection.Output;Di2015NewLine//...Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLine//...Di2015NewLineint val = (int)alreadyReg.ValueDi2015NewLine
19930860Di2015UniqueSeparatorGetPath
19930860Di2015UniqueSeparator//Save image to media libraryDi2015NewLineMediaLibrary library = new MediaLibrary();Di2015NewLinevar picture = library.SavePicture("Memefy_Photo", toShare);Di2015NewLineDi2015NewLine//Open ShareMediaTaskDi2015NewLinevar task = new ShareMediaTask();Di2015NewLinetask.FilePath = picture.GetPath();Di2015NewLinetask.Show();Di2015NewLine
19930912Di2015UniqueSeparatorGridViewRow row = GridView.SelectedRow;Di2015NewLineDi2015NewLineint id = Convert.ToInt32(GridView.DataKeys[row.RowIndex].Value);Di2015NewLine
19930912Di2015UniqueSeparatorint id = Convert.ToInt32(GridView.DataKeys[row.RowIndex].Values["FirstValue"]);Di2015NewLineDi2015NewLinestring name = Convert.ToString(GridView.DataKeys[row.RowIndex].Values["SecondValue"]);Di2015NewLine
19930950Di2015UniqueSeparatorFileSystemWatcher
19930950Di2015UniqueSeparatorChangesMade
19930950Di2015UniqueSeparatorFileSystemWatcher
19930950Di2015UniqueSeparatorChangesMade
19930950Di2015UniqueSeparatorFileSystemWatcher
19931005Di2015UniqueSeparatorpublic static class GlobalConfigurationDi2015NewLine{Di2015NewLine    public Parents Parents { get; set; }Di2015NewLine}Di2015NewLine
19931005Di2015UniqueSeparatorpublic static class GlobalConfigurationDi2015NewLine{Di2015NewLine    static GlobalConfiguration()Di2015NewLine    {Di2015NewLine        Objects = new Dictionary<string, object>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public readonly IDictionary<string, object> Objects { get; set; }Di2015NewLine}Di2015NewLine
19931005Di2015UniqueSeparatorobject parentsObject;Di2015NewLineDi2015NewLineif(GlobalConfiguration.Objects.TryGetValue("Parents", out parentsObject))Di2015NewLine{Di2015NewLine    var parents = parentsObject as Parents;Di2015NewLine    // use parentsDi2015NewLine}Di2015NewLine
19931151Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace Test {Di2015NewLine  public class Ptr<T> where T : struct {Di2015NewLine    public T Value { get; set; }Di2015NewLine  }Di2015NewLineDi2015NewLine  class Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine      var a = new List<Ptr<int>>();Di2015NewLine      var b = new List<Ptr<int>>();Di2015NewLineDi2015NewLine      var ptr = new Ptr<int> { Value = 7 };Di2015NewLine      a.Add(ptr);Di2015NewLine      b.Add(ptr);Di2015NewLineDi2015NewLine      a[0].Value = 3;Di2015NewLine      Console.Out.WriteLine(b[0].Value);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
19931182Di2015UniqueSeparator$(document).ready(function(){Di2015NewLine    $('.btnDelete').on('click', function(){Di2015NewLine        var tr = $(this).closest('tr');Di2015NewLine        $.ajax({Di2015NewLine            url: '@(Url.Action("Delete", "OtherDoctorDelete"))',Di2015NewLine            type: 'post',Di2015NewLine            data: {Di2015NewLine                Id: $(this).closest('tr').attr('id') //should be able to simplify this to tr.attr('id') but this will workDi2015NewLine            },Di2015NewLine            success: function (result) {Di2015NewLine                //can just do a tr.remove but the link I posted above adds some style to itDi2015NewLine                tr.css("background-color","#FF3700");Di2015NewLine                tr.fadeOut(400, function(){Di2015NewLine                    tr.remove();Di2015NewLine                });Di2015NewLine            }Di2015NewLine        });Di2015NewLine    });Di2015NewLine});Di2015NewLine
19931189Di2015UniqueSeparatorstring animal = "MyNewdogIsVeryPlayful";Di2015NewLinebool isDogContained = animal.Contains("dog");Di2015NewLine
19931189Di2015UniqueSeparatorpublic static bool Contains(this string listOfAnimals, string animalToSearchFor){Di2015NewLine    return listOfAnimals.Contains(animalToSearchFor);Di2015NewLine}Di2015NewLine
19931189Di2015UniqueSeparatorbool doesItContainLion = "MyNewdogIsVeryPlayful".Contains("lion");Di2015NewLine
19931411Di2015UniqueSeparatorreturn result.FirstOrDefault();Di2015NewLine
19931434Di2015UniqueSeparatorvar grid = $telerik.$(".myCustomClass")[0];Di2015NewLineif(grid && grid.control) grid.get_masterTableView().rebind();Di2015NewLine
19931587Di2015UniqueSeparator(?<= )\\s|\\s(?= )Di2015NewLine
19931599Di2015UniqueSeparatorSELECT 'NOT NULL VALUES' as Label, COUNT (*) as Result from [DB_teste].[dbo].[prd] where prd_nome is not null Di2015NewLineUNION Di2015NewLineSELECT 'NULL VALUES', COUNT (*) FROM [DB_teste].[dbo].[prd] WHERE prd_nome IS NULLDi2015NewLine
19931618Di2015UniqueSeparatorDispose()
19931618Di2015UniqueSeparatorvoid Dispose()Di2015NewLine{Di2015NewLine    if(cmd != null)Di2015NewLine        cmd.Dispose();Di2015NewLine    if(transaction != null)Di2015NewLine        transaction.Dispose();Di2015NewLine    if(conn != null)Di2015NewLine        conn.Dispose();Di2015NewLine}Di2015NewLine
19931618Di2015UniqueSeparatorconn.Dispose()
19931618Di2015UniqueSeparatorconn.Close()
19931657Di2015UniqueSeparatorBlockingCollection
19931748Di2015UniqueSeparator<Window x:Class="MyApp.MyForm"Di2015NewLinexmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLinexmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLineTitle="MyForm" Height="346" Width="459">Di2015NewLine<DockPanel LastChildFill="True">Di2015NewLine    <ToolBarTray DockPanel.Dock="Top">Di2015NewLine        <ToolBar>Di2015NewLine            <Button Command="Edit" Content="Edit" />Di2015NewLine            <Button Command="Delete" Content="Delete" />Di2015NewLine            <Button Command="Refresh" Content="Refresh" />Di2015NewLine        </ToolBar>Di2015NewLine    </ToolBarTray>Di2015NewLine<StatusBar Name="statusbar" DockPanel.Dock="Bottom">statusbar</StatusBar>Di2015NewLine<DataGrid Name="grdEmployees" ItemsSource="{Binding EmpCollection}" />Di2015NewLine
19931777Di2015UniqueSeparatora
19931777Di2015UniqueSeparatorAction<Child> aFoo = a => ((Parent1)a).Foo();Di2015NewLine
19931777Di2015UniqueSeparatorParent1
19931777Di2015UniqueSeparatorChild
19931777Di2015UniqueSeparatorParent1
19931777Di2015UniqueSeparatorChild
19931777Di2015UniqueSeparatorAction<Child> aFoo = (Action<Parent1>)(a => a.Foo());Di2015NewLine
19931777Di2015UniqueSeparatorAction<T>
19931869Di2015UniqueSeparatorMessageContext
19931869Di2015UniqueSeparatorMessageContext
19931869Di2015UniqueSeparatorIMessageContext
19931875Di2015UniqueSeparator<Page x:Class="PIRS_Client.View.Staff.StaffDetailsView"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLine    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"Di2015NewLine    xmlns:ignore="http://www.ignore.com"Di2015NewLine    mc:Ignorable="d ignore"Di2015NewLine    DataContext="{Binding StaffDetailsVM, Source={StaticResource Locator}}"Di2015NewLine    Height="576" Width="1163">Di2015NewLineDi2015NewLine<AdornerDecorator>Di2015NewLine    <Grid>        Di2015NewLine        <TextBox HorizontalAlignment="Left" Text="{Binding Model.title, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Height="17" Margin="284,453,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="90"/>Di2015NewLine        <Button Content="Save Changes" Command="{Binding SaveDetailsCommand}" IsEnabled="{Binding Model.IsValid}" HorizontalAlignment="Left" Margin="1007,518,0,0" VerticalAlignment="Top" Width="104" Height="23"/>Di2015NewLine    </Grid>Di2015NewLine</AdornerDecorator>Di2015NewLine
19932017Di2015UniqueSeparator!=
19932017Di2015UniqueSeparatorMyClass userAggregazione;Di2015NewLineif ((userAggregazione = YouTube.Actions.IsAccessTokenValid()) != null)Di2015NewLine{}Di2015NewLine
19932017Di2015UniqueSeparator//my style preference is also to not use 'var' anywayDi2015NewLine//when getting value from a functionDi2015NewLine//because it's not clear what the type is.Di2015NewLineMyClass userAggregazione = YouTube.Actions.IsAccessTokenValid();Di2015NewLineif (userAggregazione != null)Di2015NewLine{}Di2015NewLine
19932071Di2015UniqueSeparatorRegex.Escape(inputStr);Di2015NewLine
19932071Di2015UniqueSeparatorRegEx
19932126Di2015UniqueSeparatorIPlan
19932126Di2015UniqueSeparatorpublic interface IPlanRepositoryDi2015NewLine{Di2015NewLine    IEnumerable<IPlan> GetPlans(IPlan plan);Di2015NewLine    IEnumerable<IPlan> GetAllPlans();Di2015NewLine    IEnumerable<string> DoSomethingElse();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PlanRepository : IPlanRepositoryDi2015NewLine{Di2015NewLine    IEnumerable<IPlan> GetPlans(IPlan plan)Di2015NewLine    {Di2015NewLine        // fill a List with PlansDi2015NewLine    }Di2015NewLine    IEnumerable<IPlan> planList = GetAllPlans();Di2015NewLine    {Di2015NewLine        // fill a List with PlansDi2015NewLine    }Di2015NewLine    //Di2015NewLine    // Do stuff with planList...Di2015NewLine    //Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IPlanDi2015NewLine{Di2015NewLine   // properties and methods relating to a Plan (NOT how to "get" a Plan)Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Plan : IPlanDi2015NewLine{Di2015NewLine    // implementation of properties and methodsDi2015NewLine}Di2015NewLine
19932126Di2015UniqueSeparatorList
19932126Di2015UniqueSeparatorIEnumerable
19932126Di2015UniqueSeparatorIEnumerable<Plan>
19932126Di2015UniqueSeparatorList<Plan>
19932126Di2015UniqueSeparatorPlan[]
19932126Di2015UniqueSeparatorIQueryable<Plan>
19932351Di2015UniqueSeparatorstring filepath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);Di2015NewLineDirectoryInfo path = new DirectoryInfo(filepath);Di2015NewLineDi2015NewLineforeach (var file in path.GetFiles())Di2015NewLine{Di2015NewLine    listBox1.Items.Add("File : " + file.Name);Di2015NewLine}Di2015NewLineDi2015NewLine//  Get files in the "common" desktopDi2015NewLinefilepath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);Di2015NewLinepath = new DirectoryInfo(filepath);Di2015NewLineDi2015NewLineforeach (var file in path.GetFiles())Di2015NewLine{Di2015NewLine    listBox1.Items.Add("File : " + file.Name);Di2015NewLine}Di2015NewLine
19932372Di2015UniqueSeparator               command.CommandText = string.Format("SELECT * FROM {0}.sys.tables", libDatabase.SelectedItem);Di2015NewLine
19932372Di2015UniqueSeparatorsys.databases
19932372Di2015UniqueSeparatormaster
19932372Di2015UniqueSeparatorsys.tables
19932372Di2015UniqueSeparator<ListBox Name="libDatabase" SelectionChanged="libDatabase_SelectionChanged">Di2015NewLine
19932372Di2015UniqueSeparatorprivate void libDatabase_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine    if(libDatabase.SelectedItem != null)Di2015NewLine    {Di2015NewLine        // open a database connection and select your tables here.Di2015NewLine    }Di2015NewLine}Di2015NewLine
19932522Di2015UniqueSeparatorExpression<Func<DateTime?, bool>> foo = x => x.HasValueDi2015NewLine
19932522Di2015UniqueSeparatorFunc<DateTime?, bool> bar = x => x.HasValueDi2015NewLine
19932522Di2015UniqueSeparatorvar bat = x => x.HasValue;Di2015NewLine
19932522Di2015UniqueSeparatorIQueryable
19932522Di2015UniqueSeparatorIEnumerable
19932522Di2015UniqueSeparatorvar filteredCollection = myCollection.Where(e => e.IsActive);Di2015NewLine
19932522Di2015UniqueSeparatorfilteredCollection
19932522Di2015UniqueSeparatorFunc<MyClass, bool>
19932522Di2015UniqueSeparatorIEnumerable
19932522Di2015UniqueSeparatorExpression<Func<MyClass, bool>>
19932522Di2015UniqueSeparatorIQueryable
19932522Di2015UniqueSeparatorpublic static class ExpressionExtensionsDi2015NewLine{Di2015NewLine    public static Expression<Func<T, TProperty>> Lambda<T, TProperty>(this ParameterExpression pe, Expression<Func<T, TProperty>> property)Di2015NewLine    {Di2015NewLine        return Expression.Lambda<Func<T, TProperty>>(property, pe);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19932522Di2015UniqueSeparatorvar pe = Expression.Parameter(typeof(DateTime?));Di2015NewLinevar ex = pe.Lambda<DateTime?, bool>(x => x.HasValue);Di2015NewLine
19932631Di2015UniqueSeparator    public SweepstakesConfiguration()Di2015NewLine    {Di2015NewLine        Property(c => c.Id).HasColumnName("SweepstakesId");Di2015NewLineDi2015NewLine        HasOptional(c => c.WinningApplicant)Di2015NewLine            .WithMany()Di2015NewLine            .HasForeignKey(c => c.WinnerId);Di2015NewLine    }Di2015NewLineDi2015NewLine    public SweepstakesApplicantConfiguration()Di2015NewLine    {Di2015NewLine        Property(a => a.Id).HasColumnName("SweepstakesApplicantId");Di2015NewLineDi2015NewLine        HasRequired(a => a.Sweepstakes)Di2015NewLine            .WithMany(s => s.Applicants)Di2015NewLine            .HasForeignKey(a => a.SweepstakesId)Di2015NewLine            .WillCascadeOnDelete();Di2015NewLineDi2015NewLine        HasRequired(a => a.Buyer)Di2015NewLine            .WithMany(b => b.SweepstakesApplications)Di2015NewLine            .HasForeignKey(a => a.BuyerId);Di2015NewLineDi2015NewLine        HasRequired(a => a.Agent)Di2015NewLine            .WithMany()Di2015NewLine            .HasForeignKey(a => a.AgentId);Di2015NewLine    }Di2015NewLine
19932663Di2015UniqueSeparator$(".topopup").click(function () {Di2015NewLineDi2015NewLine    loading(); // loadingDi2015NewLine    setTimeout(function () { // then show popup, deley in .5 secondDi2015NewLine        loadPopup(); // function show popupDi2015NewLine    }, 500); // .5 secondDi2015NewLine   // return false;    Di2015NewLine});Di2015NewLine
19932663Di2015UniqueSeparatorreturn false
19932663Di2015UniqueSeparatorreturn true
19932680Di2015UniqueSeparator    string str = "APPLE BANANA GRAPES";Di2015NewLineDi2015NewLine    String[] criterias = str.Split(' ');Di2015NewLineDi2015NewLine    XDocument x = XDocument.Parse(yourXmlString);Di2015NewLine    var result =Di2015NewLine        x.Root.Elements()Di2015NewLine         // count # of matches for each elementDi2015NewLine         .Select(e => new {e, num = criterias.Count(c => e.Value.Contains(c))}) Di2015NewLine         // order by # of matches, then alphabeticallyDi2015NewLine         .OrderByDescending(r => r.num).ThenBy(r => r.e.Value)Di2015NewLine         // get a combination e: XElement, num: # of matchesDi2015NewLine         .FirstOrDefault();Di2015NewLine
19932680Di2015UniqueSeparator        var result =Di2015NewLine            x.Root.Elements()Di2015NewLine             // get prefixesDi2015NewLine             .Where(e => str.StartsWith(e.Value))Di2015NewLine             // count matchingsDi2015NewLine             .Select(e=>new {e, num=e.Value.Split(' ').Length})Di2015NewLine             // get max matchingsDi2015NewLine             .OrderByDescending(r => r.num).ThenBy(r => r.e.Value)Di2015NewLine             .FirstOrDefault();Di2015NewLine
19932698Di2015UniqueSeparatorpublic ObservableCollection<string> PlayListNames { get; set; }Di2015NewLine
19932698Di2015UniqueSeparatorBind
19932698Di2015UniqueSeparatorListBox.ItemsSource
19932698Di2015UniqueSeparator<ListBox ItemsSource="{Binding PlayListNames}" ... />Di2015NewLine
19932698Di2015UniqueSeparator<Label x:Name="L_PlayListName" Content="{Binding}" />Di2015NewLine
19932698Di2015UniqueSeparatorBind
19932698Di2015UniqueSeparatorstring
19932698Di2015UniqueSeparatorDataContext
19932698Di2015UniqueSeparatorWindow
19932698Di2015UniqueSeparatorMainWindow.xaml.cs
19932698Di2015UniqueSeparatorDataContext = this;Di2015NewLine
19932701Di2015UniqueSeparatorpublic class ClassCalcDi2015NewLine    {Di2015NewLine        public ClassCalc(double varEm, Di2015NewLine                          List<List<double>> col1, Di2015NewLine                          List<List<double>> col2)Di2015NewLine        {Di2015NewLine          //set fields etc.Di2015NewLine        }Di2015NewLineDi2015NewLine        public void DoWork()Di2015NewLine        {Di2015NewLine             //Run methods in order.Di2015NewLine        }Di2015NewLineDi2015NewLine        private void CalcCols(){Di2015NewLine           //here, I will 'zip' col1/col2 to create List<double> for eachDi2015NewLine        }Di2015NewLineDi2015NewLine        private void CalcStep2(){Di2015NewLine           //this is dependent on the results from CalcCols()Di2015NewLine        }Di2015NewLineDi2015NewLine        private void CalcNonDependent(){Di2015NewLine           //this can be called at any stageDi2015NewLine        }Di2015NewLine}Di2015NewLine
19932866Di2015UniqueSeparatorTypeCode
19932866Di2015UniqueSeparatorvar typeCode = Type.GetTypeCode(type);    Di2015NewLineswitch (typeCode)Di2015NewLine{Di2015NewLine    case TypeCode.Empty:Di2015NewLine        break;Di2015NewLine    case TypeCode.Object:Di2015NewLine        break;Di2015NewLine    case TypeCode.DBNull:Di2015NewLine        break;Di2015NewLine    case TypeCode.Boolean:Di2015NewLine        break;Di2015NewLine    case TypeCode.Char:Di2015NewLine        break;Di2015NewLine    case TypeCode.SByte:Di2015NewLine        break;Di2015NewLine    case TypeCode.Byte:Di2015NewLine        break;Di2015NewLine    case TypeCode.Int16:Di2015NewLine        break;Di2015NewLine    case TypeCode.UInt16:Di2015NewLine        break;Di2015NewLine    case TypeCode.Int32:Di2015NewLine        break;Di2015NewLine    case TypeCode.UInt32:Di2015NewLine        break;Di2015NewLine    case TypeCode.Int64:Di2015NewLine        break;Di2015NewLine    case TypeCode.UInt64:Di2015NewLine        break;Di2015NewLine    case TypeCode.Single:Di2015NewLine        break;Di2015NewLine    case TypeCode.Double:Di2015NewLine        break;Di2015NewLine    case TypeCode.Decimal:Di2015NewLine        break;Di2015NewLine    case TypeCode.DateTime:Di2015NewLine        break;Di2015NewLine    case TypeCode.String:Di2015NewLine        break;Di2015NewLine}Di2015NewLine
19932924Di2015UniqueSeparatorword1|word2|word3
19932924Di2015UniqueSeparatorRegex.Escape
19932924Di2015UniqueSeparatorRegexOptions.IgnoreCase
19932924Di2015UniqueSeparatorstring pattern = String.Join("|", keywords.Select(k => Regex.Escape(k)));Di2015NewLineMatch m = Regex.Match(sentence, pattern, RegexOptions.IgnoreCase);Di2015NewLineDi2015NewLineif (m.Success)Di2015NewLine{Di2015NewLine    Console.WriteLine("Keyword found: {0}", m.Value);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("No keywords found!");Di2015NewLine}Di2015NewLine
19932924Di2015UniqueSeparatorRegex.Matches
19932974Di2015UniqueSeparatorpublic Vector2 VelocitysDi2015NewLine{Di2015NewLine    get { return velocity; }Di2015NewLine    set { velocity = value; }Di2015NewLine}Di2015NewLine
19932974Di2015UniqueSeparatorpublic int Score
19932974Di2015UniqueSeparatorspriteBatch.DrawString(Di2015NewLine                pericles8,Di2015NewLine                "Velocity: " + player.Velocitys.ToString(),Di2015NewLine                Velocitys,Di2015NewLine                Color.White);Di2015NewLine
19933025Di2015UniqueSeparator<span runat="server"> <js code..> </span>Di2015NewLine
19933025Di2015UniqueSeparator<%= CMS.GlobalHelper.ResHelper.GetString("ReceiptsList.ProductName") %>Di2015NewLine
19933026Di2015UniqueSeparatorvar orders = ConfigurationManager.ConnectionStrings.Cast<ConnectionStringSettings>()Di2015NewLine    // filter to the relevant connection stringsDi2015NewLine    .Where(s => s.ConnectionString.ToLower().Contains("metadata"))Di2015NewLine    .SelectMany(s => {Di2015NewLine         // for each connection string, select a data context        Di2015NewLine         using(var context = new NorthwindEntities(s.ConnectionString)) {Di2015NewLine             // for each context, select all relevant ordersDi2015NewLine             return context.Orders.ToArray();Di2015NewLine         } // and dispose of the context when done with itDi2015NewLine     })Di2015NewLine    .Take(10) Di2015NewLine    .ToList();Di2015NewLine
19933138Di2015UniqueSeparatorpublic class ListItems {Di2015NewLine  public int id {get;set;}Di2015NewLine  public List<Items> Items {get;set;}Di2015NewLine}Di2015NewLine
19933138Di2015UniqueSeparatorhttp://localhost/Services/Controller/Method/:id
19933138Di2015UniqueSeparatorpublic ReturnType Method(int id, [FromBody]List<Item> items)Di2015NewLine
19933178Di2015UniqueSeparatorstring value = (string)command.ExecuteScalar();Di2015NewLine
19933178Di2015UniqueSeparatorDataTable
19933178Di2015UniqueSeparator.Rows
19933178Di2015UniqueSeparatorDataRow
19933178Di2015UniqueSeparator   foreach(DataRow row in dtbl.Rows)Di2015NewLine     { Di2015NewLine         if(row["ColumnName"].ToString()=="Name")Di2015NewLine         {Di2015NewLine         }      Di2015NewLine     }Di2015NewLine
19933214Di2015UniqueSeparatorVM2.WhenP1Changes
19933214Di2015UniqueSeparatorthis
19933214Di2015UniqueSeparatorVM3
19933214Di2015UniqueSeparatorVM2
19933214Di2015UniqueSeparatorVM1
19933424Di2015UniqueSeparatorif (!IsPostBack)Di2015NewLine{Di2015NewLine   TextBox1.Attributes.Add("onKeyPress", Di2015NewLine                   "doClick('" + btnSearch.ClientID + "',event)");Di2015NewLine}Di2015NewLine<SCRIPT type=text/javascript>Di2015NewLine    function doClick(buttonName,e)Di2015NewLine    {Di2015NewLine        //the purpose of this function is to allow the enter key to Di2015NewLine        //point to the correct button to click.Di2015NewLine        var key;Di2015NewLineDi2015NewLine         if(window.event)Di2015NewLine              key = window.event.keyCode;     //IEDi2015NewLine         elseDi2015NewLine              key = e.which;     //firefoxDi2015NewLineDi2015NewLine        if (key == 13)Di2015NewLine        {Di2015NewLine            //Get the button the user wants to have clickedDi2015NewLine            var btn = document.getElementById(buttonName);Di2015NewLine            if (btn != null)Di2015NewLine            { //If we find the button click itDi2015NewLine                btn.click();Di2015NewLine                event.keyCode = 0Di2015NewLine            }Di2015NewLine        }Di2015NewLine   }Di2015NewLine</SCRIPT>Di2015NewLine
19933424Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.Form.DefaultButton = this.btnSubmit.UniqueID;Di2015NewLine        }Di2015NewLine
19933590Di2015UniqueSeparator<asp:ScriptManager ID="ScriptManager1" runat="server" AsyncPostBackTimeout="360">Di2015NewLineDi2015NewLine</asp:ScriptManager>Di2015NewLine
19933618Di2015UniqueSeparatorfor (i = 0; i < BdsTabelle.Count; i++)Di2015NewLine
19933618Di2015UniqueSeparatorfor (i = 0; i <= BdsTabelle.Count - 1; i++)Di2015NewLine
19933734Di2015UniqueSeparatoriSubTotal
19933734Di2015UniqueSeparatoriTotal
19933734Di2015UniqueSeparator// ...Di2015NewLineiSubTotal = Convert.ToInt32(Console.ReadLine());Di2015NewLineConsole.WriteLine("The Total is now " + iSubTotal + iTotal);Di2015NewLineiTotal += iNumber;Di2015NewLine// ...Di2015NewLine
19933734Di2015UniqueSeparatorConvert.ToInt32()
19933734Di2015UniqueSeparatorif (int.TryParse(Console.ReadLine(), out iSubTotal))Di2015NewLine{Di2015NewLine    // Parsing to an integer succeeded, iSubTotal now contains the new valueDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // Parsing to an integer failed, respond to the userDi2015NewLine}Di2015NewLine
19933787Di2015UniqueSeparatorExtensionAttribute
19933787Di2015UniqueSeparatorExtensionAttribute
19933862Di2015UniqueSeparatorDateTime?
19933862Di2015UniqueSeparatorDateTime
19933862Di2015UniqueSeparator??
19933862Di2015UniqueSeparator.HasValue;
19933910Di2015UniqueSeparatorlambda-parameters => lambda-expression-bodyDi2015NewLine
19933910Di2015UniqueSeparatorQLike(t => t.Title == "stack" || t.Title == "over" || t.Title == "flow" )Di2015NewLine
19933910Di2015UniqueSeparatorIQueryable
19933910Di2015UniqueSeparatorstring[] titles = { "stack", "over", "flow" };Di2015NewLineQLike(t => titles.Contains(t.Title));Di2015NewLine
19933913Di2015UniqueSeparator<item>
19933913Di2015UniqueSeparator<item>
19933913Di2015UniqueSeparator<item>
19933913Di2015UniqueSeparatorDescendants("item")
19933913Di2015UniqueSeparatorElements("item")
19933913Di2015UniqueSeparatorpremiums
19933913Di2015UniqueSeparatorlinq.Distinct()
19933983Di2015UniqueSeparatorpublic string mood()Di2015NewLine        {Di2015NewLine            var unhappiness = Hunger + Boredom;Di2015NewLine            string m = string.Empty;Di2015NewLine            if (unhappiness < 5)Di2015NewLine            {Di2015NewLine                m = "Happy";Di2015NewLine            }Di2015NewLineDi2015NewLine            if (unhappiness <= 5 && Di2015NewLine                unhappiness <= 10)Di2015NewLine            {Di2015NewLine                m = "Okay";Di2015NewLine            }Di2015NewLineDi2015NewLine            if (unhappiness <= 11 &&Di2015NewLine                unhappiness <= 15)Di2015NewLine            {Di2015NewLine                m = "Frustrated";Di2015NewLine            }Di2015NewLineDi2015NewLine            if (unhappiness <= 16)Di2015NewLine            {Di2015NewLine                m = "Mad";Di2015NewLine            }Di2015NewLine            return m;Di2015NewLine
19934014Di2015UniqueSeparator    Sheet3.AutoFilterMode = FalseDi2015NewLine    Sheet3.QueryTables(1).Refresh BackgroundQuery:=FalseDi2015NewLine    Sheet3.Range("ExternalData_3").AutoFilterDi2015NewLine
19934066Di2015UniqueSeparatorpublic class MyCoolConverter : IMultiValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        // LogicDi2015NewLine    }Di2015NewLineDi2015NewLine    public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19934066Di2015UniqueSeparator<TextBox Text="{Binding CurrentlySelectedTag.TagData, UpdateSourceTrigger=PropertyChanged}">Di2015NewLine    <TextBox.Style>Di2015NewLine        <MultiBinding Converter="{StaticResource TagDataValidationStyleSelector}" UpdateSourceTrigger="PropertyChanged">Di2015NewLine            <Binding Path="CurrentlySelectedTag"/>Di2015NewLine            <Binding Path="CurrentlySelectedTag.TagData" UpdateSourceTrigger="PropertyChanged"/>Di2015NewLine        </MultiBinding>Di2015NewLine    </TextBox.Style>Di2015NewLine</TextBox>Di2015NewLine
19934099Di2015UniqueSeparator<requestedExecutionLevel level="requireAdministrator" uiAccess="false" />Di2015NewLine
19934120Di2015UniqueSeparatorvar a = 2096;Di2015NewLinevar b = 842390;Di2015NewLineDi2015NewLinea ^= b;Di2015NewLineb ^= a;Di2015NewLinea ^= b;Di2015NewLine
19934120Di2015UniqueSeparator    public static void RotateRight(int[] input, int right)Di2015NewLine    {Di2015NewLine        for (var i = 0; i < right; i += 1)Di2015NewLine        {Di2015NewLine            RotateRightOne(input);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void RotateRightOne(int[] input)Di2015NewLine    {Di2015NewLine        var last = input.Length - 1;Di2015NewLine        for (var i = 0; i < last; i += 1)Di2015NewLine        {Di2015NewLine            input[i] ^= input[last];Di2015NewLine            input[last] ^= input[i];Di2015NewLine            input[i] ^= input[last];Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19934120Di2015UniqueSeparator    var arr = new[] {1, 2, 3, 4, 5, 6};Di2015NewLine    RotateRight(arr, 2);Di2015NewLine
19934263Di2015UniqueSeparatorvoid Application_Start(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ...Di2015NewLine    AppDomain.CurrentDomain.DomainUnload += CurrentDomain_DomainUnload;Di2015NewLine}Di2015NewLineDi2015NewLinevoid CurrentDomain_DomainUnload(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Cleanup code hereDi2015NewLine}Di2015NewLine
19934326Di2015UniqueSeparatorprivate void MyLinkClick(object sender, ...)Di2015NewLine{Di2015NewLine    var linkLabel = (LinkLabel) sender;Di2015NewLine    var business = (Business) linkLabel.Tag;Di2015NewLine    /* do something with business */Di2015NewLine}Di2015NewLine
19934326Di2015UniqueSeparatorforeach (var business in GlobalClass.Businesses)Di2015NewLine{Di2015NewLine     var linkLabel = new LinkLabel { Text = business.businessName.ToString(), Tag = business };Di2015NewLine     linkLabel.Click += MyLinkClick;Di2015NewLine     tableLayoutPanel.Controls.Add(linkLabel);Di2015NewLine}Di2015NewLine
19934404Di2015UniqueSeparatorEventAggregator
19934438Di2015UniqueSeparatorAssert.IsTrue(sqlContext.TableName.FirstOrDefault(row => row.PrimaryKey != null) != null);
19934593Di2015UniqueSeparator<%@ Register Assembly="Microsoft.ReportViewer.WebForms, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"Di2015NewLineNamespace="Microsoft.Reporting.WebForms" TagPrefix="rsweb" %>Di2015NewLine
19934593Di2015UniqueSeparator<%@ Register Assembly="Microsoft.ReportViewer.WebForms, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"Di2015NewLineNamespace="Microsoft.Reporting.WebForms" TagPrefix="rsweb" %>Di2015NewLine
19934661Di2015UniqueSeparator"^(?:Control)"
19934661Di2015UniqueSeparator"(?:Office In) (?<slot>\\d+)$"
19934661Di2015UniqueSeparator@"^(?:Control|Office In) (?<slot>\\d+)$"Di2015NewLine
19934796Di2015UniqueSeparatorvar user = new User { UserName = model.UserName, Organisation = userOrg };Di2015NewLinethis.repository.SaveUser(user);Di2015NewLinestring token = WebSecurity.CreateAccount(model.UserName, model.Password, true);Di2015NewLine
19934796Di2015UniqueSeparatorCreateAccount
19934796Di2015UniqueSeparatorCreateUserAndAccount
19934804Di2015UniqueSeparator<location path="bundles">Di2015NewLine  <system.web>Di2015NewLine    <authorization>Di2015NewLine      <allow users="*"/>Di2015NewLine    </authorization>Di2015NewLine  </system.web>Di2015NewLine</location>Di2015NewLine
19934860Di2015UniqueSeparatorAttachment
19934860Di2015UniqueSeparatorStream
19934860Di2015UniqueSeparatorbyte[]
19934860Di2015UniqueSeparatorAttachment
19934860Di2015UniqueSeparatorvar contentType new ContentType(MediaTypeNames.Text.Plain);Di2015NewLinevar attach = new Attachment(new MemoryStream(data), contentType);Di2015NewLine
19934906Di2015UniqueSeparatorpublic int GetPage(int orderId, int sampleId, int itemsPerPage)Di2015NewLine{Di2015NewLine    //protect against divide by zeroDi2015NewLine   if(itemsPerPage < 1)Di2015NewLine      return 1;//or 0 if you want page indexDi2015NewLineDi2015NewLine  int index = _context.Set<Sample>()Di2015NewLine                       .Where(s => s.OrderId == orderId && s.Id < sampleId)Di2015NewLine                       //.OrderBy(s => s.Id) edited after accepted OrderBy not necessaryDi2015NewLine                       .Count();Di2015NewLineDi2015NewLine   //if index is zero return 1Di2015NewLine   //if index == 9 and itemsPerPage == 10 return 1 Di2015NewLine   //if index == 10 and itemsPerPage == 10 return 2Di2015NewLine   //if you want the page index rather than the page number don't add 1Di2015NewLine   return 1 + (index / itemsPerPage);Di2015NewLine}Di2015NewLine
19934906Di2015UniqueSeparatorpublic int GetPage(int orderId, int sampleId, int itemsPerPage)Di2015NewLine{Di2015NewLine    //protect against divide by zeroDi2015NewLine   if(itemsPerPage < 1)Di2015NewLine      return 1;//or 0 if you want page index, or -1 if you want to flag this as invalidDi2015NewLineDi2015NewLine   var result = context.Set<Sample>()Di2015NewLine                .Where(s => s.OrderId == orderId Di2015NewLine                            && s.Id <= sampleId)//this time include sampleIdDi2015NewLine                //.OrderBy(s => s.ID)  edited after accepted OrderBy not necessaryDi2015NewLine                .GroupBy(x => true)Di2015NewLine                .Select(group => newDi2015NewLine                {Di2015NewLine                    MaxID = group.Max(s => s.Id),Di2015NewLine                    Count = group.Count()Di2015NewLine                })Di2015NewLine                .Single();Di2015NewLineDi2015NewLine  //Check the sample is actually in the resultDi2015NewLine  if(result.MaxID != sampleId)Di2015NewLine      return 1;//or 0 if you want page index, or -1 if you want to flag this as invalidDi2015NewLineDi2015NewLine  int index = result.Count - 1;Di2015NewLineDi2015NewLine   //if you want the page index rather than the page number don't add 1Di2015NewLine   return 1 + (index / itemsPerPage);Di2015NewLine}Di2015NewLine
19934959Di2015UniqueSeparatordtpDate
19934959Di2015UniqueSeparatorValue
19934959Di2015UniqueSeparatorstring selectDateAsString = dtpDate.Value.ToString("yyyyMMdd");Di2015NewLine
19934970Di2015UniqueSeparatorpublic override bool IsValid(object value)Di2015NewLine{Di2015NewLine  var objectToValidate = value as MyValidatableClass;Di2015NewLineDi2015NewLine  // some code for validation.Di2015NewLine  if (objectToValidate.SomeProperty != "correct")Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
19935008Di2015UniqueSeparatorLOG: User = IIS APPPOOL\\DefaultAppPoolDi2015NewLineLOG: DisplayName = Laserfiche.I18n83Di2015NewLine (Partial)Di2015NewLineWRN: Partial binding information was supplied for an assembly:Di2015NewLineWRN: Assembly Name: Laserfiche.I18n83 | Domain ID: 5Di2015NewLineWRN: A partial bind occurs when only part of the assembly display name is provided.Di2015NewLineWRN: This might result in the binder loading an incorrect assembly.Di2015NewLineWRN: It is recommended to provide a fully specified textual identity for the assembly,Di2015NewLineWRN: that consists of the simple name, version, culture, and public key token.Di2015NewLineWRN: See whitepaper http://go.microsoft.com/fwlink/?LinkId=109270 for more information and common solutions to this issue.Di2015NewLine
19935008Di2015UniqueSeparatorCopyLocal=true
19935008Di2015UniqueSeparatorCopyLocal=true
19935188Di2015UniqueSeparatorif (int.TryParse(Console.ReadLine(), out iSubTotal))Di2015NewLine
19935188Di2015UniqueSeparatoriSubTotal = Convert.ToInt32(Console.ReadLine());Di2015NewLine
19935188Di2015UniqueSeparatorint iTotal = 0; Di2015NewLineint iSubTotal = 0;Di2015NewLineDi2015NewLine//Prompt user to enter two valuesDi2015NewLineConsole.WriteLine("Enter value you want to add to total value or a negative number to end the loop");Di2015NewLineDi2015NewLineint.TryParse(Console.ReadLine(), out iSubTotal)Di2015NewLineDi2015NewLinewhile (iSubTotal >= 0)Di2015NewLine{Di2015NewLine   iTotal = iTotal + iSubTotal;Di2015NewLine   Console.WriteLine("The Total is now " + iTotal);Di2015NewLine   int.TryParse(Console.ReadLine(), out iSubTotal) //Di2015NewLine}Di2015NewLineDi2015NewLineConsole.WriteLine("You have now passed the loop");Di2015NewLineConsole.WriteLine("The Total is now " + iTotal);Di2015NewLineDi2015NewLine//Prevent program from closingDi2015NewLineConsole.WriteLine("Press any key to close");Di2015NewLineConsole.ReadKey();Di2015NewLine
19935279Di2015UniqueSeparatorFile.WriteAllText()
19935279Di2015UniqueSeparatorFile.WriteAllText(@"C:\\path\\file.txt", yourString);Di2015NewLine
19935279Di2015UniqueSeparatorEncoding
19935279Di2015UniqueSeparatorFile.WriteAllText(@"C:\\path\\file.txt", yourString, Encoding.UTF8);Di2015NewLine
19935279Di2015UniqueSeparatorusing System.IO;
19935298Di2015UniqueSeparator if (xlWorksheet.Cells[k + 5, 0].Text == Convert.ToString(ent.Cells[i, 3].Value   ))Di2015NewLine   { Di2015NewLine     p = k;Di2015NewLine   }Di2015NewLine
19935738Di2015UniqueSeparatorSettings.settings
19935818Di2015UniqueSeparatorQuoteDetail q = new QuoteDetail();Di2015NewLineDi2015NewLineDictionary<int, string> messageDict = SplitMessage(msg);Di2015NewLinestring quoteID;Di2015NewLineif (messageDict.TryGetValue(8, out quoteID))Di2015NewLine{Di2015NewLine    q.QuoteID = quoteID;Di2015NewLine}Di2015NewLine
19935940Di2015UniqueSeparatorprivate static String infoMessages = "", errorMessages = "";Di2015NewLinepublic void setFeedback(String message, bool info)Di2015NewLine{Di2015NewLine    if (info)Di2015NewLine    {Di2015NewLine        if (!infoCell.Visible)Di2015NewLine        {Di2015NewLine            errorCell.Visible = false;Di2015NewLine            infoCell.Visible = true;Di2015NewLine        }Di2015NewLine        infoMessages += String.Format("- {0}<br />", message);Di2015NewLine        lblInfo.Text += infoMessages;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        if (!errorCell.Visible)Di2015NewLine        {Di2015NewLine            infoCell.Visible = false;Di2015NewLine            errorCell.Visible = true;Di2015NewLine        }Di2015NewLine        errorMessages += String.Format("- {0}<br />", message);Di2015NewLine        lblError.Text += errorMessages;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19935995Di2015UniqueSeparatorHeinzi
19935995Di2015UniqueSeparatorpublic static void WriteXmlWithCurrentDate(this DataSet ds, string fileName)Di2015NewLine{Di2015NewLine    // Create the MemoryStream to write with. Di2015NewLine    using (MemoryStream stream = new MemoryStream())Di2015NewLine    {Di2015NewLine        // Write to stream with the WriteXml method.Di2015NewLine        ds.WriteXml(stream);Di2015NewLine        // Reset stream to originDi2015NewLine        stream.Seek(0, SeekOrigin.Begin);Di2015NewLine        // Load stream as XDocumentDi2015NewLine        XDocument xdoc = XDocument.Load(stream);Di2015NewLine        // get current date as stringDi2015NewLine        string today = DateTime.Today.ToString("d", new CultureInfo("ru-RU"));Di2015NewLine        // Set date attribute on root elementDi2015NewLine        xdoc.Root.SetAttributeValue("Date", today);Di2015NewLine        // Save to file as XMLDi2015NewLine        xdoc.Save(fileName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19935995Di2015UniqueSeparatorDataSet ds = new DataSet("Stock");Di2015NewLineds.Tables.Add(new DataTable("Assortment"));Di2015NewLineds.Tables[0].Columns.Add("Item", typeof(string));Di2015NewLineds.Tables[0].Columns.Add("Quantity", typeof(Int16));Di2015NewLineds.Tables[0].Rows.Add("Sock", 1);Di2015NewLineds.Tables[0].Rows.Add("Puppet", 2);Di2015NewLineDi2015NewLineds.WriteXmlWithCurrentDate(@"c:\\temp\\xml.xml");Di2015NewLine
19935995Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Stock Date="13.11.2013">Di2015NewLine  <Assortment>Di2015NewLine    <Item>Sock</Item>Di2015NewLine    <Quantity>1</Quantity>Di2015NewLine  </Assortment>Di2015NewLine  <Assortment>Di2015NewLine    <Item>Puppet</Item>Di2015NewLine    <Quantity>2</Quantity>Di2015NewLine  </Assortment>Di2015NewLine</Stock>Di2015NewLine
19935995Di2015UniqueSeparatorMemoryStream
19935995Di2015UniqueSeparatorMemoryStream
19935995Di2015UniqueSeparatorusing
19935995Di2015UniqueSeparatorDataSet.WriteXml(
19935995Di2015UniqueSeparatorstream
19935995Di2015UniqueSeparator)
19935995Di2015UniqueSeparatorMemoryStream.Seek
19935995Di2015UniqueSeparatorXDocument
19935995Di2015UniqueSeparatorXDocument.Load(
19935995Di2015UniqueSeparatorstream
19935995Di2015UniqueSeparator)
19935995Di2015UniqueSeparatorXDocument.Root
19935995Di2015UniqueSeparatorXElement.SetAttributeValue
19935995Di2015UniqueSeparatorxDocument
19935995Di2015UniqueSeparatorXDocument.Save
19936082Di2015UniqueSeparatorHtml.DisplayFor(y => y.Data.Select(z => z.Name).First().ToString())Di2015NewLine
19936260Di2015UniqueSeparatorRuleFor(x => x)Di2015NewLine        .Must(x => !string.IsNullOrWhiteSpace(x.Email) || !string.IsNullOrWhiteSpace(x.UserName))Di2015NewLine        .WithName(".") // This adds error message to MVC validation summaryDi2015NewLine        .WithMessage("Please enter either a username or email address");Di2015NewLine
19936260Di2015UniqueSeparator@Html.ValidationSummary()
19936260Di2015UniqueSeparatorif (!ModelState.IsValid)Di2015NewLine{Di2015NewLine    if (ModelState["."].Errors.Any())Di2015NewLine    {Di2015NewLine        ModelState.AddModelError(string.Empty, ModelState["."].Errors.First().ErrorMessage);Di2015NewLine    }Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
19936260Di2015UniqueSeparator"."
19936260Di2015UniqueSeparator@Html.ValidationSummary(true)
19936260Di2015UniqueSeparatorunused_property
19936260Di2015UniqueSeparator@Html.ValidationSummaryFor(x => x.unused_property)
19936262Di2015UniqueSeparator   If(Ddl.SelectedValue == "1"){Di2015NewLineDi2015NewLine      GridView1.Visible = true;Di2015NewLine      GridView2.Visible = false;Di2015NewLineDi2015NewLine   }else{Di2015NewLineDi2015NewLine      GridView1.Visible = false;Di2015NewLine      GridView2.Visible = true;Di2015NewLineDi2015NewLine   }Di2015NewLine
19936268Di2015UniqueSeparatorusing System.DirectoryServices.AccountManagement;Di2015NewLineusing System.DirectoryServices.ActiveDirectory;Di2015NewLine
19936268Di2015UniqueSeparatorusing (Domain domain = Domain.GetComputerDomain())Di2015NewLine{Di2015NewLine    foreach (DomainController domainController in domain.DomainControllers)Di2015NewLine    {Di2015NewLine        using (PrincipalContext context = new PrincipalContext(ContextType.Domain, domainController.Name))Di2015NewLine        using (UserPrincipal userPrincipal = new UserPrincipal(context))Di2015NewLine        using (PrincipalSearcher searcher = new PrincipalSearcher(userPrincipal))Di2015NewLine        using (PrincipalSearchResult<Principal> results = searcher.FindAll())Di2015NewLine        {Di2015NewLine            foreach (UserPrincipal user in results.OfType<UserPrincipal>())Di2015NewLine            {Di2015NewLine                context.ValidateCredentials(user.SamAccountName, "THEREISNOWAYTHISISTHECORRECTPASSWORD");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19936677Di2015UniqueSeparatorusing Castle.Core;Di2015NewLineusing Castle.Facilities.TypedFactory;Di2015NewLineusing Castle.MicroKernel;Di2015NewLineusing Castle.MicroKernel.ComponentActivator;Di2015NewLineusing Castle.MicroKernel.Context;Di2015NewLineusing Castle.MicroKernel.Facilities;Di2015NewLineusing Castle.MicroKernel.Registration;Di2015NewLineusing Castle.MicroKernel.SubSystems.Configuration;Di2015NewLineusing Castle.Windsor;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Windows;Di2015NewLineusing ViewFun.Castle;Di2015NewLineusing ViewFun.Common;Di2015NewLineusing ViewFun.View;Di2015NewLineusing ViewFun.ViewModels;Di2015NewLineDi2015NewLinenamespace ViewFunDi2015NewLine{Di2015NewLine    namespace CommonDi2015NewLine    {Di2015NewLine        public interface IViewDi2015NewLine        {Di2015NewLine            void PrintViewModelName();Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface IViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface IViewFactory : IDisposableDi2015NewLine        {Di2015NewLine            TView CreateView<TView>();Di2015NewLine            void DestroyView<TView>(TView view);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    namespace ViewModelsDi2015NewLine    {Di2015NewLine        public interface IMainViewModel : IViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface ISecondaryViewModel : IViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface ISecondary2ViewModel : IViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public class MainViewModel : IMainViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLine        public class SecondaryViewModel : ISecondaryViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLine        public class Secondary2ViewModel : ISecondary2ViewModelDi2015NewLine        {Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    namespace ViewDi2015NewLine    {Di2015NewLine        public interface IMainView : IView, IDisposableDi2015NewLine        {Di2015NewLine            void ShowView<TView>()Di2015NewLine                where TView : IView;Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface ISecondaryView : IViewDi2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface ISecondaryView2 : IViewDi2015NewLine        {Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    namespace WPFImplementationDi2015NewLine    {Di2015NewLine        public class MainWindow : Window, IMainView, IDisposableDi2015NewLine        {Di2015NewLine            private readonly IViewFactory viewFactory;Di2015NewLineDi2015NewLine            public MainWindow(IMainViewModel viewModel, IViewFactory viewFactory)Di2015NewLine            {Di2015NewLine                this.viewFactory = viewFactory;Di2015NewLine            }Di2015NewLineDi2015NewLine            public void PrintViewModelName()Di2015NewLine            {Di2015NewLine                Console.WriteLine(string.Format("The main window is of type {0} with a view model type of {1}", this.GetType(), this.DataContext.GetType().Name));Di2015NewLine                Console.WriteLine();Di2015NewLine                Console.WriteLine();Di2015NewLine            }Di2015NewLineDi2015NewLine            public void ShowView<TView>()Di2015NewLine                where TView : IViewDi2015NewLine            {Di2015NewLine                IView view = this.viewFactory.CreateView<TView>();Di2015NewLine                Console.WriteLine(view.GetType().Name);Di2015NewLine                view.PrintViewModelName();Di2015NewLine            }Di2015NewLineDi2015NewLine            public void Dispose()Di2015NewLine            {Di2015NewLine                this.viewFactory.Dispose();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public class SecondaryWPFView1 : Window, ISecondaryViewDi2015NewLine        {Di2015NewLine            public SecondaryWPFView1(ISecondaryViewModel viewModel)Di2015NewLine            {Di2015NewLine            }Di2015NewLineDi2015NewLine            public void PrintViewModelName()Di2015NewLine            {Di2015NewLine                Console.WriteLine(string.Format("One of the secondary windows is of type {0} with a view model type of {1}", this.GetType(), this.DataContext.GetType().Name));Di2015NewLine                Console.WriteLine();Di2015NewLine                Console.WriteLine();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public class SecondaryWPFView2 : Window, ISecondaryView2Di2015NewLine        {Di2015NewLine            public SecondaryWPFView2(ISecondary2ViewModel viewModel)Di2015NewLine            {Di2015NewLine            }Di2015NewLineDi2015NewLine            public void PrintViewModelName()Di2015NewLine            {Di2015NewLine                Console.WriteLine(string.Format("The other secondary window is of type {0} with a view model type of {1}", this.GetType(), this.DataContext.GetType().Name));Di2015NewLine                Console.WriteLine();Di2015NewLine                Console.WriteLine();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    namespace CastleDi2015NewLine    {Di2015NewLine        public class WpfInstaller : IWindsorInstallerDi2015NewLine        {Di2015NewLine                private static string AssemblyDirectoryDi2015NewLine                {Di2015NewLine                    getDi2015NewLine                    {Di2015NewLine                        string codeBase = Assembly.GetExecutingAssembly().CodeBase;Di2015NewLine                        var uri = new UriBuilder(codeBase);Di2015NewLine                        string path = Uri.UnescapeDataString(uri.Path);Di2015NewLine                        return Path.GetDirectoryName(path);Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                public void Install(IWindsorContainer container, IConfigurationStore store)Di2015NewLine                {Di2015NewLine                    container.AddFacility<WpfViewCreaterFacility>()Di2015NewLine                        .Register(Di2015NewLine                            Classes.FromAssemblyInDirectory(new AssemblyFilter(AssemblyDirectory))Di2015NewLine                                .BasedOn<IView>()Di2015NewLine                                .Configure(c => c.LifestyleTransient().Named(c.Implementation.Name))Di2015NewLine                                .WithService.Base()Di2015NewLine                                .WithService.FromInterface(typeof(IView)),Di2015NewLine                            Classes.FromAssemblyInDirectory(new AssemblyFilter(AssemblyDirectory))Di2015NewLine                                .BasedOn<IViewModel>()Di2015NewLine                                .Configure(c => c.LifestyleTransient().Named(c.Implementation.Name))Di2015NewLine                                .WithService.Base()Di2015NewLine                                .WithService.FromInterface(typeof(IViewModel)),Di2015NewLine                            Component.For<IViewFactory>()Di2015NewLine                                .AsFactory()Di2015NewLine                                .LifestyleTransient());Di2015NewLine                }Di2015NewLine        }Di2015NewLineDi2015NewLine        public class WpfViewCreaterFacility : AbstractFacilityDi2015NewLine        {Di2015NewLine            protected override void Init()Di2015NewLine            {Di2015NewLine                this.Kernel.ComponentModelCreated += this.RegisterComponentActivator;Di2015NewLine            }Di2015NewLineDi2015NewLine            private void RegisterComponentActivator(ComponentModel model)Di2015NewLine            {Di2015NewLine                bool isView = typeof(IView).IsAssignableFrom(model.Services.First());Di2015NewLine                if (!isView)Di2015NewLine                {Di2015NewLine                    return;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (model.CustomComponentActivator == null)Di2015NewLine                {Di2015NewLine                    model.CustomComponentActivator = typeof(WpfViewCreater);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public class WpfViewCreater : DefaultComponentActivatorDi2015NewLine        {Di2015NewLine            public WpfViewCreater(Di2015NewLine                ComponentModel model,Di2015NewLine                IKernel kernel,Di2015NewLine                ComponentInstanceDelegate onCreation,Di2015NewLine                ComponentInstanceDelegate onDestruction)Di2015NewLine                : base(model, kernel, onCreation, onDestruction)Di2015NewLine            {Di2015NewLine            }Di2015NewLineDi2015NewLine            protected override object CreateInstance(Di2015NewLine                CreationContext context, ConstructorCandidate constructor, object[] arguments)Di2015NewLine            {Di2015NewLine                object component = base.CreateInstance(context, constructor, arguments);Di2015NewLineDi2015NewLine                var frameworkElement = component as FrameworkElement;Di2015NewLineDi2015NewLine                if (frameworkElement != null && arguments != null)Di2015NewLine                {Di2015NewLine                    object viewModel = arguments.FirstOrDefault(vm => vm is IViewModel);Di2015NewLine                    if (viewModel != null)Di2015NewLine                    {Di2015NewLine                        frameworkElement.DataContext = viewModel;Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                return component;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        [STAThread]Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            IWindsorContainer container = new WindsorContainer();Di2015NewLine            container.AddFacility<TypedFactoryFacility>();Di2015NewLine            container.Install(new WpfInstaller());Di2015NewLineDi2015NewLine            IMainView mainView = container.Resolve<IMainView>();Di2015NewLine            mainView.PrintViewModelName();Di2015NewLine            mainView.ShowView<ISecondaryView>();Di2015NewLine            mainView.ShowView<ISecondaryView2>();Di2015NewLineDi2015NewLine            mainView.Dispose();Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19936727Di2015UniqueSeparatorTask.Run
19936727Di2015UniqueSeparatorTask.Run
19936817Di2015UniqueSeparator.ToString("G29")
19936823Di2015UniqueSeparatorswitch (headerName) {Di2015NewLine   case "flyer" : return Service.GetFlierHeaderInfo(agentId);Di2015NewLine   case "general" : return  Service.GetHeaderInfo(agentId);Di2015NewLine   default: return 0;Di2015NewLine}Di2015NewLine
19936823Di2015UniqueSeparatorobject headerInfo = 0;Di2015NewLineDi2015NewLineswitch(headerName) {Di2015NewLine     case "flyer" : headerInfo = Service.GetFlierHeaderInfo(agentId);Di2015NewLine     break;Di2015NewLine     case "general" : headerInfo = Service.GetHeaderInfo(agentId);Di2015NewLine     break;Di2015NewLine}Di2015NewLinereturn headerInfo;Di2015NewLine
19936982Di2015UniqueSeparatorDispatcher
19936982Di2015UniqueSeparatorApplication.Current.Dispatcher.Invoke(() => MessageBox.Show(...));Di2015NewLine
19937164Di2015UniqueSeparatorasync void
19937164Di2015UniqueSeparatorvoid
19937164Di2015UniqueSeparatorasync
19937164Di2015UniqueSeparatorasync
19937164Di2015UniqueSeparatorvoid
19937164Di2015UniqueSeparatorasync void
19937164Di2015UniqueSeparatorasync Task
19937164Di2015UniqueSeparatorasync public Task GetInformationAsync(string url)Di2015NewLine{Di2015NewLine  var client = new HttpClient();Di2015NewLine  var response = await client.GetAsync(new Uri(url));Di2015NewLine  result = await response.Content.ReadAsStringAsync();Di2015NewLine}Di2015NewLine
19937164Di2015UniqueSeparatorawait
19937164Di2015UniqueSeparatorpublic string GetResult(string url)Di2015NewLine{Di2015NewLine  await GetInformationAsync(url);Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
19937164Di2015UniqueSeparatorawait
19937164Di2015UniqueSeparatorasync
19937164Di2015UniqueSeparatorpublic async Task<string> GetResultAsync(string url)Di2015NewLine{Di2015NewLine  await GetInformationAsync(url);Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
19937164Di2015UniqueSeparatorawait
19937164Di2015UniqueSeparatorprivate void City_GoButton_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine  ...Di2015NewLine  jsonString = await wr.GetResultAsync(url);Di2015NewLine  formattedString = cityObject.ReturnFormattedString(jsonString);Di2015NewLine}Di2015NewLine
19937164Di2015UniqueSeparatorasync
19937164Di2015UniqueSeparatorasync Task
19937164Di2015UniqueSeparatorasync void
19937164Di2015UniqueSeparatorprivate async void City_GoButton_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine  ...Di2015NewLine  jsonString = await wr.GetResultAsync(url);Di2015NewLine  formattedString = cityObject.ReturnFormattedString(jsonString);Di2015NewLine}Di2015NewLine
19937164Di2015UniqueSeparatorasync
19937195Di2015UniqueSeparatorreturn result.FirstOrDefault()
19937195Di2015UniqueSeparatorwcm.GetPlayerById(9)
19937249Di2015UniqueSeparator[DataContract]Di2015NewLineclass FooDi2015NewLine{Di2015NewLine    [DataMember(Name="IsDeleted")]Di2015NewLine    private bool _isDeleted;Di2015NewLineDi2015NewLine    public bool IsDeleted Di2015NewLine    { Di2015NewLine       get { return _isDeleted; }Di2015NewLine       internal set { _isDeleted = value; } Di2015NewLine    }Di2015NewLine}Di2015NewLine
19937249Di2015UniqueSeparatorFoo
19937249Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public bool IsDeleted { get; set; }Di2015NewLine}Di2015NewLine
19937249Di2015UniqueSeparatorFoo
19937249Di2015UniqueSeparator[DataContract]Di2015NewLineclass FooDi2015NewLine{Di2015NewLine    private bool _isDeleted;Di2015NewLineDi2015NewLine    public bool IsDeleted Di2015NewLine    { Di2015NewLine       get { return _isDeleted; }Di2015NewLine       set {  } Di2015NewLine    }Di2015NewLineDi2015NewLine    internal void SetIsDeletedInternal(bool value)Di2015NewLine    {Di2015NewLine        _isDeleted = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19937249Di2015UniqueSeparatorFoo
19937249Di2015UniqueSeparator_isDeleted
19937249Di2015UniqueSeparatordefault(bool)
19937267Di2015UniqueSeparator{
19937267Di2015UniqueSeparator}
19937267Di2015UniqueSeparatorOemOpenBrackets
19937267Di2015UniqueSeparatorOem4
19937267Di2015UniqueSeparatorOemCloseBrackets
19937267Di2015UniqueSeparatorOem6
19937267Di2015UniqueSeparator[
19937267Di2015UniqueSeparator]
19937267Di2015UniqueSeparatorKeyPress
19937267Di2015UniqueSeparatorKeyChar
19937342Di2015UniqueSeparatorprivate void comboBox1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    comboBox1.Items.Add("peter magdy");Di2015NewLineDi2015NewLine    if (comboBox1.SelectedItem == "peter magdy")Di2015NewLine        textBox.Text = "age 23, male, etc";Di2015NewLine}Di2015NewLine
19937482Di2015UniqueSeparatorBitmapImage bimg = new BitmapImage();                        Di2015NewLinebimg.CreateOptions = BitmapCreateOptions.BackgroundCreation Di2015NewLine                     | BitmapCreateOptions.IgnoreImageCacheDi2015NewLine
19937659Di2015UniqueSeparator[DataMember(Name = "description"]Di2015NewLineprivate object _description;Di2015NewLineDi2015NewLinepublic string DescriptionDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (_description != null)Di2015NewLine        {Di2015NewLine            if (_description is string)Di2015NewLine            {Di2015NewLine                // Do NothingDi2015NewLine                // You can remove this, just putting this here to Di2015NewLine                //   show conditional is implicitDi2015NewLine            }Di2015NewLine            else if (_description is string[])Di2015NewLine            {Di2015NewLine                // Join string[] using '\\n\\n' as the connectorDi2015NewLine                _description = string.Join("\\n\\n", (string[])_description);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return _description as string;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19937686Di2015UniqueSeparatorModelBinders.Binders.Add (typeof (Option), new OptionModelBinder ());Di2015NewLine
19937702Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Button ID="Button1" runat="server" CausesValidation="false" CommandName="edit" Text="Edit" OnCommand="OnGridViewItemCommand" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine<asp:TemplateField HeaderText="Request Letter?">Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Button ID="Button2" runat="server" CausesValidation="false" CommandName="requestLet" Text="Request Letter" OnCommand="OnGridViewItemCommand" />Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
19937702Di2015UniqueSeparatorcode-behind
19937702Di2015UniqueSeparatorOnGridViewItemCommand
19937702Di2015UniqueSeparatorprotected void OnGridViewItemCommand(object sender, CommandEventArgs e)Di2015NewLine{Di2015NewLine    var row = (sender as Button).NamingContainer as GridViewRow;Di2015NewLineDi2015NewLine    int dataItemIndex = row.DataItemIndex; //index of selected item in underlying datasourceDi2015NewLine    int itemIndex = row.RowIndex; // index of selected item in Rows collectionDi2015NewLineDi2015NewLine    switch (e.CommandName)Di2015NewLine    {Di2015NewLine        case "edit":Di2015NewLine            //edit action codeDi2015NewLine            break;Di2015NewLineDi2015NewLine        case "requestLet":Di2015NewLine            //request Letter action codeDi2015NewLine            break;Di2015NewLineDi2015NewLine        default:Di2015NewLine            break;Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
19937862Di2015UniqueSeparatorIEnumerable.SkipWhile()
19937862Di2015UniqueSeparatorvar nextRecord = Di2015NewLine    db.Reports.OrderBy(i => i.ID)Di2015NewLine              .AsEnumerable()Di2015NewLine              .SkipWhile(i => i.ID != id)Di2015NewLine              .Skip(1)Di2015NewLine              .First();                   Di2015NewLine
19937864Di2015UniqueSeparatorSetValuesIfTheKeyStateIsToggled
19937864Di2015UniqueSeparatorTryToSetValues
19937864Di2015UniqueSeparatorpublic void TryToFrob()Di2015NewLine{Di2015NewLine  if (CanFrob()) DoFrob();Di2015NewLine}Di2015NewLineprivate bool CanFrob()Di2015NewLine{Di2015NewLine  return Keyboard.GetKeyStates(Key.CapsLock) == KeyStates.Toggled;Di2015NewLine}Di2015NewLineprivate void DoFrob()Di2015NewLine{Di2015NewLine  // frob!Di2015NewLine}Di2015NewLine
19938115Di2015UniqueSeparatorPath.ChangeExtension()
19938115Di2015UniqueSeparatorFile.Rename
19938115Di2015UniqueSeparatorstring newFilename = Path.ChangeExtension (oldFilename , ".xml");Di2015NewLineFile.Move(oldFilename , newFilename );Di2015NewLine
19938282Di2015UniqueSeparator    var musicians = new List<string>()Di2015NewLine    {Di2015NewLine        "Clarence \\"Gatemouth\\" Brown",Di2015NewLine        "Merle Travis",Di2015NewLine        "Eddie Van Halen",Di2015NewLine        "Rory Gallagher",Di2015NewLine        "Elvin Bishop",Di2015NewLine        "Eric Clapton",Di2015NewLine        "Jimi Hendrix",Di2015NewLine        "Stevie Ray Vaughan",Di2015NewLine        "Robin Trower",Di2015NewLine        "Ritchie Blackmore",Di2015NewLine        "Carlos Santana",Di2015NewLine        "Mark Knopfler",Di2015NewLine        "Pete Anderson",Di2015NewLine    };Di2015NewLineDi2015NewLine    var musician = "Robin";Di2015NewLine    var newMusicians = musicians.Where(m => 0 < String.Compare(m,  musician));Di2015NewLineDi2015NewLine    MessageBox.Show(String.Join(Environment.NewLine, newMusicians.ToArray()));Di2015NewLine
19938282Di2015UniqueSeparatorvar newMusicians = from m in musiciansDi2015NewLine                where 0 < String.Compare(m, musician)Di2015NewLine                select m;Di2015NewLine
19938289Di2015UniqueSeparatorListBox.ItemsSource
19938289Di2015UniqueSeparatorcurrentMyItems
19938289Di2015UniqueSeparatorcurrentMyItems
19938289Di2015UniqueSeparatorcurrentMyItems
19938289Di2015UniqueSeparatorObservableCollection
19938289Di2015UniqueSeparatorList<T>
19938289Di2015UniqueSeparatorObservableCollection<MyItem>
19938289Di2015UniqueSeparatorListBox.ItemsSource
19938289Di2015UniqueSeparator<ListBox x:Name="listMyItems" ItemsSource="{Binding MyItems}" />Di2015NewLine
19938289Di2015UniqueSeparatorMyItems.Add((MyItem)listMyItems.SelectedItem)Di2015NewLineMyItems.Remove((MyItem)listMyItems.SelectedItem)Di2015NewLine
19938414Di2015UniqueSeparatorWHERE StringId IN (@str)Di2015NewLine
19938414Di2015UniqueSeparatorWHERE StringId IN @strDi2015NewLine
19938414Di2015UniqueSeparatorstr
19938414Di2015UniqueSeparatorWHERE 1=0 -- if no valuesDi2015NewLineWHERE StringId = @str -- if exactly one valueDi2015NewLineWHERE StringId IN (@str0, @str1, ...) -- if more than one valueDi2015NewLine
19938541Di2015UniqueSeparatorobj["works"][i]["title"]
19938541Di2015UniqueSeparatorvar Title = obj["works"][i]["title"];Di2015NewLinemyTextbox.Text += "\\n" + Title.ToString();Di2015NewLine
19938657Di2015UniqueSeparatorID
19938657Di2015UniqueSeparatorInvoiceID
19938657Di2015UniqueSeparatorInvoice
19938760Di2015UniqueSeparatorobject
19938760Di2015UniqueSeparatorreader["Seq"]Di2015NewLine
19938760Di2015UniqueSeparatorint seq;Di2015NewLineif (int.TryParse(reader["Seq"].ToString(), out seq))Di2015NewLine    if (seq > 30)Di2015NewLine        Parse1.Add(seq);Di2015NewLine
19938760Di2015UniqueSeparator"Seq"
19938760Di2015UniqueSeparatorreader
19938797Di2015UniqueSeparatorvar ddlEligibility = ((DropDownList)(fvSubscriber.FindControl("ddlEligibility")));Di2015NewLineDi2015NewLineif(ddlEligibility!=null)Di2015NewLine{Di2015NewLine   ddlEligibility.DataSource = program;Di2015NewLine   ddlEligibility.DataBind();Di2015NewLine} Di2015NewLineelseDi2015NewLine{Di2015NewLine   statusMesage.InnerHtml = "IT IS NULL";Di2015NewLine}Di2015NewLine
19938840Di2015UniqueSeparatorstring fieldProperty = "ArrayField1";Di2015NewLineSystem.Reflection.PropertyInfo pi = baseClass.GetType().GetProperty(fieldProperty);Di2015NewLineif (pi.PropertyType.IsArray)Di2015NewLine{Di2015NewLine    Type elementType = pi.PropertyType.GetElementType();Di2015NewLine    System.Reflection.PropertyInfo pi2 = elementType.GetProperty("Color");Di2015NewLine}Di2015NewLine
19938840Di2015UniqueSeparatorstatic System.Reflection.PropertyInfo GetProperty(Type type, string propertyPath)Di2015NewLine{Di2015NewLine    System.Reflection.PropertyInfo result = null;Di2015NewLine    string[] pathSteps = propertyPath.Split('/');Di2015NewLine    Type currentType = type;Di2015NewLine    for (int i = 0; i < pathSteps.Length; ++i)Di2015NewLine    {Di2015NewLine        string currentPathStep = pathSteps[i];Di2015NewLine        result = currentType.GetProperty(currentPathStep);Di2015NewLine        if (result.PropertyType.IsArray)Di2015NewLine        {Di2015NewLine            currentType = result.PropertyType.GetElementType();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            currentType = result.PropertyType;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
19938840Di2015UniqueSeparatorPropertyInfo pi = GetProperty(c1.GetType(), "ArrayField1/Char");Di2015NewLinePropertyInfo pi2 = GetProperty(c2.GetType(), "Color");Di2015NewLine
19938840Di2015UniqueSeparatorstatic object GetPropertyValue(object obj, string propertyPath)Di2015NewLine{Di2015NewLine    System.Reflection.PropertyInfo result = null;Di2015NewLine    string[] pathSteps = propertyPath.Split('/');Di2015NewLine    object currentObj = obj;Di2015NewLine    for (int i = 0; i < pathSteps.Length; ++i)Di2015NewLine    {Di2015NewLine        Type currentType = currentObj.GetType();Di2015NewLine        string currentPathStep = pathSteps[i];Di2015NewLine        var currentPathStepMatches = Regex.Match(currentPathStep, @"(\\w+)(?:\\[(\\d+)\\])?");Di2015NewLine        result = currentType.GetProperty(currentPathStepMatches.Groups[1].Value);Di2015NewLine        if (result.PropertyType.IsArray)Di2015NewLine        {Di2015NewLine            int index = int.Parse(currentPathStepMatches.Groups[2].Value);Di2015NewLine            currentObj = (result.GetValue(currentObj) as Array).GetValue(index);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            currentObj = result.GetValue(currentObj);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine    return currentObj;Di2015NewLine}Di2015NewLine
19938840Di2015UniqueSeparatorvar v = GetPropertyValue(baseClass, "ArrayField1[5]/Char");Di2015NewLine
19938861Di2015UniqueSeparatorcoin
19938861Di2015UniqueSeparatorprivate
19938861Di2015UniqueSeparatorint _playCount;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineprivate void btnCoin_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    _playCount = 5;Di2015NewLine}Di2015NewLine
19938861Di2015UniqueSeparatorprivate void btnPlay_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (_playCount == 0)Di2015NewLine    {Di2015NewLine        // maybe alert them; maybe disable the button; whatever...Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    _playCount--;Di2015NewLine}Di2015NewLine
19938861Di2015UniqueSeparatorprivate void btnPlay_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    _playCount--;Di2015NewLine    btnPlay.Enabled = (_playCount > 0);Di2015NewLine}Di2015NewLine
19938892Di2015UniqueSeparatorGraphics g = panel.CreateGraphics();Di2015NewLine
19938892Di2015UniqueSeparatorg.DrawCurve(parameters);Di2015NewLineg.DrawEllipse(parameters);Di2015NewLineg.DrawLine(parameters);Di2015NewLineg.DrawRectangle(parameters);Di2015NewLine
19938892Di2015UniqueSeparatorg.DrawRectangle(new Pen(panel.BackColor), new Rectangle(new Point(), panel.Size));Di2015NewLine
19938900Di2015UniqueSeparator//Ie 8 and lower have an issue with the "Cache-Control no-cache" and "Cache-Control store-cache" headers.Di2015NewLine//The work around is allowing private caching only but immediately expire it.Di2015NewLineif ((Request.Browser.Browser.ToLower() == "ie") && (Request.Browser.MajorVersion < 9))Di2015NewLine{Di2015NewLine     context.Response.Cache.SetCacheability(HttpCacheability.Private);Di2015NewLine     context.Response.Cache.SetMaxAge(TimeSpan.FromMilliseconds(1));Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine     context.Response.Cache.SetCacheability(HttpCacheability.NoCache);//IE set to not cacheDi2015NewLine     context.Response.Cache.SetNoStore();//Firefox/Chrome not to cacheDi2015NewLine     context.Response.Cache.SetExpires(DateTime.UtcNow); //for safe measure expire it immediatelyDi2015NewLine}Di2015NewLine
19938900Di2015UniqueSeparatorcontext.Response.Cache.SetCacheability(HttpCacheability.NoCache);Di2015NewLine
19938962Di2015UniqueSeparatorpng
19938962Di2015UniqueSeparatorBuild Action
19938962Di2015UniqueSeparatorResource
19938984Di2015UniqueSeparatorCar
19938984Di2015UniqueSeparatorTCar
19938984Di2015UniqueSeparatorcar = datcar
19938984Di2015UniqueSeparatorcar
19938984Di2015UniqueSeparatordatcar
19938984Di2015UniqueSeparatorTCar
19938986Di2015UniqueSeparatorDataGrid
19938986Di2015UniqueSeparatorCanUserAddRows
19938986Di2015UniqueSeparator  <DataGrid CanUserAddRows="True" />Di2015NewLine
19939111Di2015UniqueSeparatorData Source=SAROTH-PC\\SQLEXPRESSDi2015NewLine
19939138Di2015UniqueSeparatorEnableViewState = false
19939138Di2015UniqueSeparator<machinekey>
19939138Di2015UniqueSeparatorAutoGenerate
19939138Di2015UniqueSeparatorEnableViewstateMac
19939255Di2015UniqueSeparatorprivate static readonly string example = "ABC";Di2015NewLine
19939339Di2015UniqueSeparatorForm
19939339Di2015UniqueSeparatorForm f = new Form();Di2015NewLine
19939339Di2015UniqueSeparatorfrmLogin
19939339Di2015UniqueSeparatorfrmLogin.ShowDialog();Di2015NewLine
19939339Di2015UniqueSeparatorfrmLogin login = new frmLogin();Di2015NewLinelogin.ShowDialog();Di2015NewLine
19939339Di2015UniqueSeparatorLoginFormDi2015NewLine
19939339Di2015UniqueSeparatorfrmLogin
19939339Di2015UniqueSeparatorLoginForm frmLogin = new LoginForm();Di2015NewLinefrmLogin.ShowDialog();Di2015NewLine
19939464Di2015UniqueSeparator    private static bool IsDefined(uint i) {Di2015NewLine        var constants = typeof(ObjectTypes).GetFields().Where(f => f.IsLiteral).ToArray();Di2015NewLineDi2015NewLine        foreach(var constant in constants) {Di2015NewLine            if(i == (uint)constant.GetRawConstantValue()) {Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return false;Di2015NewLine    }Di2015NewLine
19939499Di2015UniqueSeparatorIConnectionFactory factory = new ConnectionFactory(new Uri("tcp://localhost:61616?wireformat.version=2"));Di2015NewLineusing (IConnection connection = factory.CreateConnection())Di2015NewLine{Di2015NewLine    connectio.ClientId = "MyClientId";Di2015NewLine    connection.Start();Di2015NewLine    ISession session = connection.CreateSession();Di2015NewLine    ActiveMQTopic topic = new ActiveMQTopic("MARKETADAPTERS.ORDERBOOKSNAPSHOT");Di2015NewLine    consumer = session.CreateDurableConsumer(topic,"OBSnap",null, false);Di2015NewLine}Di2015NewLine
19939499Di2015UniqueSeparatorIConnectionFactory factory = new ConnectionFactory(new Uri("tcp://localhost:61616?wireformat.version=2"));Di2015NewLineusing (IConnection connection = factory.CreateConnection())Di2015NewLine{Di2015NewLine    connection.ClientId = "MyClientId";Di2015NewLine    connection.Start();Di2015NewLine    ISession session = connection.CreateSession();Di2015NewLine    ActiveMQTopic topic = new ActiveMQTopic("MARKETADAPTERS.ORDERBOOKSNAPSHOT");Di2015NewLine    consumer = session.CreateDurableConsumer(topic,"OBSnap",null, false);Di2015NewLine    message = (ActiveMQTextMessage)consumer.Receive(TimeSpan.FromSeconds(vTimeOutSecs));Di2015NewLine}Di2015NewLine
19939632Di2015UniqueSeparatorstring xml = "<rootNode><node1><node11>v1</node11></node1></rootNode>";Di2015NewLineXDocument xDocument = XDocument.Parse(xml);Di2015NewLineXElement xmlElement = xDocument.Element("node11");Di2015NewLinestring value = xmlElement.Value; // v1Di2015NewLine
19939665Di2015UniqueSeparatorCAPTURE_ReadStart
19939665Di2015UniqueSeparatorstdcall
19939665Di2015UniqueSeparatorcdecl
19939665Di2015UniqueSeparator[DllImport("API.dll")]Di2015NewLinepublic static extern int CAPTURE_ReadData(int devId, uint address,Di2015NewLine    uint numBytes, IntPtr pucBuffer);Di2015NewLine
19939665Di2015UniqueSeparatorbyte[]
19939665Di2015UniqueSeparator[DllImport("API.dll")]Di2015NewLinepublic static extern int CAPTURE_ReadData(int devId, uint address,Di2015NewLine    uint numBytes, byte[] pucBuffer);Di2015NewLine
19939819Di2015UniqueSeparatorSystem.String
19939819Di2015UniqueSeparatorIFormattable
19939819Di2015UniqueSeparatorobject x = "a string";Di2015NewLineConsole.WriteLine(x is IFormattable); // FalseDi2015NewLine
19939819Di2015UniqueSeparatorToString()
19939819Di2015UniqueSeparatorobject
19939819Di2015UniqueSeparatorpublic string Foo(object text)Di2015NewLine{Di2015NewLine    var textAsString = text.ToString();Di2015NewLine    // do stuff with textAsString Di2015NewLine    // and return processed stringDi2015NewLine}Di2015NewLine
19939819Di2015UniqueSeparatorToString()
19939819Di2015UniqueSeparatorIFormattable
19939885Di2015UniqueSeparatorvar ext = new List<string> { ".xml", ".dat", ".txt", ".csv", ".zip", ".doc" };Di2015NewLinevar sourceFiles = sourceDirectory.GetFiles()Di2015NewLine                                 .Where(f => ext.Contains(f.Extension.ToLower()));Di2015NewLine
19939885Di2015UniqueSeparatorDirectoryInfo.GetFiles(string searchPattern)
19940044Di2015UniqueSeparatorReadOnly
19940044Di2015UniqueSeparator((BoundField)viewHoursGridView.Columns[0]).ReadOnly = true;Di2015NewLine
19940044Di2015UniqueSeparator<asp:BoundField ReadOnly="True" DataField="ActivityDate" HeaderText="Activity Date" SortExpression="ActivityDate" DataFormatString="{0:MM/dd/yyyy}" />Di2015NewLine
19940213Di2015UniqueSeparatorfilePath
19940213Di2015UniqueSeparatorWriteAllText
19940213Di2015UniqueSeparatorServer.MapPath("~/Temp")
19940213Di2015UniqueSeparatorc:\\websites\\mysite\\Temp
19940213Di2015UniqueSeparatorPath.Combine(filePath, fileName)
19940263Di2015UniqueSeparatorstr
19940263Di2015UniqueSeparatorforeach (PSObject psObject in output)Di2015NewLine{Di2015NewLine    str += "\\n" + psObject;Di2015NewLine}Di2015NewLine
19940263Di2015UniqueSeparatorstring.Join
19940263Di2015UniqueSeparatorstring str = String.Join("\\n", output);Di2015NewLine
19940277Di2015UniqueSeparatorEditorFor
19940277Di2015UniqueSeparatorDisplayFor
19940277Di2015UniqueSeparatorEditor
19940277Di2015UniqueSeparatorDisplay
19940277Di2015UniqueSeparator@foreach (PropertyInfo prop in Model.GetType().GetProperties())Di2015NewLine{Di2015NewLine    <div class="form-group">Di2015NewLine        @Html.Label(prop.Name)Di2015NewLine        <div class="col-sm-9">Di2015NewLine            @Html.Editor(prop.Name)Di2015NewLine            @Html.ValidationMessage(prop.Name)Di2015NewLine        </div>Di2015NewLine    </div>Di2015NewLine}Di2015NewLine
19940337Di2015UniqueSeparatorc.As<Parent1>().Setup(p1 => p1.Foo());Di2015NewLinec.As<Parent2>().Setup(p2 => p2.Foo());Di2015NewLine
19940348Di2015UniqueSeparatorsetInterval
19940601Di2015UniqueSeparatorpublic partial class AwsomeUserControl : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine    public string OnClientClick { get; set; }Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    protected void Page_PreRender(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!string.IsNullOrWhiteSpace(OnClientClick))Di2015NewLine        {Di2015NewLine            ScriptManager.RegisterStartupScript(this, GetType(), "script", Di2015NewLine            OnClientClick, true);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19940601Di2015UniqueSeparator/// Adds the attributes of the <see cref="T:System.Web.UI.WebControls.Button"/> control to the output stream for rendering on the client.Di2015NewLine/// </summary>Di2015NewLine/// <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"/> that contains the output stream to render on the client. </param>Di2015NewLineprotected override void AddAttributesToRender(HtmlTextWriter writer)Di2015NewLine{Di2015NewLine    bool useSubmitBehavior = this.UseSubmitBehavior;Di2015NewLine    if (this.Page != null)Di2015NewLine        this.Page.VerifyRenderingInServerForm((Control)this);Di2015NewLine    if (useSubmitBehavior)Di2015NewLine        writer.AddAttribute(HtmlTextWriterAttribute.Type, "submit");Di2015NewLine    elseDi2015NewLine        writer.AddAttribute(HtmlTextWriterAttribute.Type, "button");Di2015NewLine    PostBackOptions postBackOptions = this.GetPostBackOptions();Di2015NewLine    string uniqueId = this.UniqueID;Di2015NewLine    if (uniqueId != null && (postBackOptions == null || postBackOptions.TargetControl == this))Di2015NewLine        writer.AddAttribute(HtmlTextWriterAttribute.Name, uniqueId);Di2015NewLine    writer.AddAttribute(HtmlTextWriterAttribute.Value, this.Text);Di2015NewLine    bool isEnabled = this.IsEnabled;Di2015NewLine    string firstScript = string.Empty;Di2015NewLine    if (isEnabled)Di2015NewLine    {Di2015NewLine        firstScript = Util.EnsureEndWithSemiColon(this.OnClientClick);Di2015NewLine        if (this.HasAttributes)Di2015NewLine        {Di2015NewLine            string str = this.Attributes["onclick"];Di2015NewLine            if (str != null)Di2015NewLine            {Di2015NewLine                firstScript = firstScript + Util.EnsureEndWithSemiColon(str);Di2015NewLine                this.Attributes.Remove("onclick");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        if (this.Page != null)Di2015NewLine        {Di2015NewLine            string backEventReference = this.Page.ClientScript.GetPostBackEventReference(postBackOptions, false);Di2015NewLine            if (backEventReference != null)Di2015NewLine                firstScript = Util.MergeScript(firstScript, backEventReference);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (this.Page != null)Di2015NewLine        this.Page.ClientScript.RegisterForEventValidation(postBackOptions);Di2015NewLine    if (firstScript.Length > 0)Di2015NewLine    {Di2015NewLine        writer.AddAttribute(HtmlTextWriterAttribute.Onclick, firstScript);Di2015NewLine        if (this.EnableLegacyRendering)Di2015NewLine            writer.AddAttribute("language", "javascript", false);Di2015NewLine    }Di2015NewLine    if (this.Enabled && !isEnabled && this.SupportsDisabledAttribute)Di2015NewLine        writer.AddAttribute(HtmlTextWriterAttribute.Disabled, "disabled");Di2015NewLine    base.AddAttributesToRender(writer);Di2015NewLine}Di2015NewLine
19940673Di2015UniqueSeparatorEnumerable.Range
19940673Di2015UniqueSeparatorString.Format
19940673Di2015UniqueSeparatorstring pattern = "rotate(myposition, {0})";Di2015NewLineint num = 5;Di2015NewLineint count = 5;Di2015NewLineIEnumerable<string> rotates = Enumerable.Range(1, count)Di2015NewLine    .Select(i => string.Format(pattern, num * i));Di2015NewLine
19940673Di2015UniqueSeparatorstring result = string.Join(Environment.NewLine, rotates);Di2015NewLine
19940788Di2015UniqueSeparatorasync
19940788Di2015UniqueSeparatorawait
19940893Di2015UniqueSeparatorwhere
19940893Di2015UniqueSeparatorpublic static byte[] Serialize<T>(this T instance)Di2015NewLine{Di2015NewLine    if (!Attribute.IsDefined(typeof(T), typeof(ProtoContractAttribute)))Di2015NewLine    {Di2015NewLine        throw new Exception(...);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19940920Di2015UniqueSeparatorvar query = QueryableSQL().Where(employee => Di2015NewLine    employee.Interests.Any(interest => interest.Name ==  "Chess"));Di2015NewLine
19940982Di2015UniqueSeparatorTest3
19940982Di2015UniqueSeparatorTest1
19940982Di2015UniqueSeparatorucThis
19940982Di2015UniqueSeparatorElementName
19940982Di2015UniqueSeparatorTest3Control
19940982Di2015UniqueSeparatorTest2
19940982Di2015UniqueSeparatorpublic static readonly DependencyProperty Test3ControlProperty =Di2015NewLine    DependencyProperty.Register("Test3Control", typeof(FrameworkElement),Di2015NewLine    typeof(Test2), Di2015NewLine    new UIPropertyMetadata(null, OnTest3ControlPropertyChanged));Di2015NewLineDi2015NewLineprivate static void OnTest3ControlPropertyChanged(Di2015NewLine    DependencyObject d,Di2015NewLine    DependencyPropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    var source = (Test2)d;Di2015NewLineDi2015NewLine    var oldValue = e.OldValue as FrameworkElement;Di2015NewLine    var newValue = e.NewValue as FrameworkElement;Di2015NewLineDi2015NewLine    if (oldValue != null)Di2015NewLine        source.RemoveLogicalChild(oldValue);Di2015NewLineDi2015NewLine    if (newValue != null)Di2015NewLine        source.AddLogicalChild(newValue);Di2015NewLine}Di2015NewLine
19940982Di2015UniqueSeparatorUIElement
19940982Di2015UniqueSeparatorDecorator
19940982Di2015UniqueSeparatorBorder
19940982Di2015UniqueSeparatorChild
19940982Di2015UniqueSeparatorVisual
19941174Di2015UniqueSeparatorAttachment
19941174Di2015UniqueSeparatorpictureBox1.Image = Image.FromStream(attachment.Data());Di2015NewLine
19941323Di2015UniqueSeparatorpictureBox1.Paint += pictureBox1_Paint;Di2015NewLineDi2015NewLinevoid pictureBox1_Paint(object sender, PaintEventArgs e) {Di2015NewLine  e.Graphics.Clear(Color.White);Di2015NewLine  e.Graphics.FillPolygon(new SolidBrush(Color.Black), Di2015NewLine                         new PointF[] { new Point(100, 200), Di2015NewLine                                        new Point(200, 200),Di2015NewLine                                        new Point(200, 220),Di2015NewLine                                        new Point(100, 220) });Di2015NewLine  e.Graphics.FillPolygon(new SolidBrush(Color.Blue),Di2015NewLine                         new PointF[] { new Point(pointx1, pointy1),Di2015NewLine                                        new Point(pointx2, pointy2),Di2015NewLine                                        new Point(pointx3, pointy3),Di2015NewLine                                        new Point(pointx4, pointy4) });Di2015NewLine}Di2015NewLine
19941323Di2015UniqueSeparatorprivate void timer1_Tick(object sender, EventArgs e) {Di2015NewLine  pointx1++;Di2015NewLine  pointy1++;Di2015NewLine  pointx2++;Di2015NewLine  pointy2++;Di2015NewLine  pointx3++;Di2015NewLine  pointy3++;Di2015NewLine  pointx4++;Di2015NewLine  pointy4++;Di2015NewLine  pictureBox1.Invalidate();Di2015NewLine}Di2015NewLine
19941387Di2015UniqueSeparatorvar myXML = @"<?xml version='1.0' encoding='UTF-8'?>Di2015NewLine<call method="load">Di2015NewLine<credentials login="sampleuser"/>Di2015NewLine<importDataOptions jobsize="false"/>Di2015NewLine<version name="12" isDefault="false" />Di2015NewLine<rowData>";Di2015NewLineDi2015NewLinevar firstRow = true;Di2015NewLineDi2015NewLinewhile(dataset.hasrows){Di2015NewLine    if(firstRow)Di2015NewLine    {Di2015NewLine        firstRow = false;Di2015NewLine        myXML+= "<header>" + 1st row from the data set + "</header><rows>";Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        myXML+= "<row>"+ Nth row from dataset here+"</row>";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinemyXML += @"</rows>Di2015NewLine</rowData>Di2015NewLine</call>";Di2015NewLine
19941406Di2015UniqueSeparatorCSharpCodeProvider
19941406Di2015UniqueSeparatorMicrosoft.CSharp
19941406Di2015UniqueSeparator    string source = "public class Description" +Di2015NewLine                    "{" +Di2015NewLine                    "   public string DescriptionText { get; set; }" +Di2015NewLine                    "   public string Country { get; set; }" +Di2015NewLine                    "}";Di2015NewLineDi2015NewLine    CSharpCodeProvider codeProvider = new CSharpCodeProvider();Di2015NewLine    System.CodeDom.Compiler.CompilerParameters parameters = new CompilerParameters();Di2015NewLine    parameters.GenerateExecutable = false;Di2015NewLine    parameters.GenerateInMemory = true;Di2015NewLine    CompilerResults result = codeProvider.CompileAssemblyFromSource(parameters, source);Di2015NewLine    if (!result.Errors.HasErrors)Di2015NewLine    {Di2015NewLine        Type type = result.CompiledAssembly.GetType("Description");Di2015NewLine        var instance = Activator.CreateInstance(type);Di2015NewLine    }Di2015NewLine
19941470Di2015UniqueSeparatorSystem.ArgumentException
19941470Di2015UniqueSeparator<input type="hidden" id="lat" name="lat" value="1.234" />Di2015NewLine<input type="hidden" id="lng" name="lng" value="5.678" />Di2015NewLine
19941529Di2015UniqueSeparator<table id="tblHelpRow">Di2015NewLine    <thead>Di2015NewLine        <tr class="title">Di2015NewLine            <th>Di2015NewLine                1Di2015NewLine            </th>Di2015NewLine            <th>Di2015NewLine                2Di2015NewLine            </th>Di2015NewLine            <th>Di2015NewLine                3Di2015NewLine            </th>Di2015NewLine            <th>Di2015NewLine                4Di2015NewLine            </th>Di2015NewLine        </tr>Di2015NewLine    </thead>Di2015NewLine    <tbody id="helpRowBody">       Di2015NewLine        @Html.Raw(ViewData["MattersTable"])Di2015NewLine    </tbody>Di2015NewLine</table>Di2015NewLine
19941618Di2015UniqueSeparatorpublic string Email Di2015NewLine{Di2015NewLine   getDi2015NewLine   {Di2015NewLine      return this.Usename;Di2015NewLine   }Di2015NewLine   setDi2015NewLine   {Di2015NewLine      this.Username = value;Di2015NewLine   }Di2015NewLine}Di2015NewLine
19941676Di2015UniqueSeparatorLongListSelector
19941676Di2015UniqueSeparatorGrid
19941676Di2015UniqueSeparatorRadioButtons
19941676Di2015UniqueSeparatorButton
19941676Di2015UniqueSeparatorButton
19941676Di2015UniqueSeparatorRadioButton
19941777Di2015UniqueSeparatorpublic void ChangeCountry(string _Country)Di2015NewLine{Di2015NewLine    _Country = "US";Di2015NewLine}Di2015NewLine
19941777Di2015UniqueSeparatorref
19941777Di2015UniqueSeparatorpublic void ChangeAddress(Address _adr)Di2015NewLine{Di2015NewLine    _adr.Country = "US";Di2015NewLine}Di2015NewLine
19941777Di2015UniqueSeparatorAddress
19941777Di2015UniqueSeparatorAddress
19941777Di2015UniqueSeparatorAddress
19941777Di2015UniqueSeparatorpublic void ChangeAddress(Address _adr)Di2015NewLine{Di2015NewLine    _adr = new Address();Di2015NewLine    _adr.Country = "US";Di2015NewLine}Di2015NewLine
19941777Di2015UniqueSeparatorref
19942012Di2015UniqueSeparatorcAdditional
19942012Di2015UniqueSeparatorcAdditional
19942012Di2015UniqueSeparatorobject
19942012Di2015UniqueSeparatorcAdditional
19942012Di2015UniqueSeparatordynamic
19942072Di2015UniqueSeparatorforeach
19942072Di2015UniqueSeparatorgrowMethod()
19942072Di2015UniqueSeparator.ToList()
19942072Di2015UniqueSeparator.ToArray()
19942072Di2015UniqueSeparatorprivate IEnumerable<Canvas> GetLittleChildren() {Di2015NewLine  lock(lockObject) {Di2015NewLine    return CanvasSimulador.Children.ToArray();Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate IEnumerable<Canvas> AddChild(Canvas littleCanvas) {Di2015NewLine  lock(lockObject) {Di2015NewLine    CanvasSimulador.Children.Add(littleCanvas);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate IEnumerable<Canvas> RemoveChild(Canvas littleCanvas) {Di2015NewLine  lock(lockObject) {Di2015NewLine    CanvasSimulador.Children.Remove(littleCanvas);Di2015NewLine  }Di2015NewLine}Di2015NewLine
19942123Di2015UniqueSeparator<thead>
19942123Di2015UniqueSeparatorXDocument
19942123Di2015UniqueSeparatorvar document = XDocument.Parse(data);Di2015NewLineDi2015NewLinevar headings = document.Element("thead").Elements().Select(x => x.Value);Di2015NewLine
19942123Di2015UniqueSeparatorvar document = XDocument.Parse(string.Format(@"<thead>{0}</thead>", data));Di2015NewLineDi2015NewLinevar headings = document.Element("thead").Elements().Select(x => x.Value);Di2015NewLine
19942123Di2015UniqueSeparator<th>
19942123Di2015UniqueSeparator</th>
19942123Di2015UniqueSeparatorstring.Split
19942123Di2015UniqueSeparatorvar headings = items.Select(x => x.Replace("<th>", "").Replace("</th>", ""));Di2015NewLine
19942215Di2015UniqueSeparator'(?<property>(?:\\\\'|[^'])*)'Di2015NewLine
19942215Di2015UniqueSeparator(?<const>\\w+)\\s*=\\s*'(?<property>(?:\\\\'|[^'])*)'Di2015NewLine
19942302Di2015UniqueSeparatorObservable.Create
19942302Di2015UniqueSeparatorFunc<TSource,TKey>
19942302Di2015UniqueSeparatorTKey
19942302Di2015UniqueSeparatorFunc<TKey,TKey>
19942302Di2015UniqueSeparatorFunc<TSource,TSource,TSource>
19942302Di2015UniqueSeparatori => i
19942302Di2015UniqueSeparator1
19942302Di2015UniqueSeparatork => k+1
19942302Di2015UniqueSeparator(left,right) => left
19942302Di2015UniqueSeparatorSort
19942302Di2015UniqueSeparatorpublic static IObservable<TSource> Sort<TSource, TKey>Di2015NewLine    (this IObservable<TSource> source,Di2015NewLine     Func<TSource, TKey> keySelector,Di2015NewLine     TKey firstKey,Di2015NewLine     Func<TKey, TKey> nextKeyFunc)Di2015NewLine{Di2015NewLine    return Observable.Create<TSource>(o =>Di2015NewLine    {Di2015NewLine        var nextKey = firstKey;Di2015NewLine        var buffer = new Dictionary<TKey, TSource>();Di2015NewLine        return source.Subscribe(i =>Di2015NewLine        {Di2015NewLine            if (keySelector(i).Equals(nextKey))Di2015NewLine            {Di2015NewLine                nextKey = nextKeyFunc(nextKey);Di2015NewLine                o.OnNext(i);Di2015NewLine                TSource nextValue;Di2015NewLine                while (buffer.TryGetValue(nextKey, out nextValue))Di2015NewLine                {Di2015NewLine                    buffer.Remove(nextKey);Di2015NewLine                    o.OnNext(nextValue);Di2015NewLine                    nextKey = nextKeyFunc(nextKey);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            else buffer.Add(keySelector(i), i);Di2015NewLine        });Di2015NewLine    });Di2015NewLine}Di2015NewLine
19942302Di2015UniqueSeparatorGroupByUntil
19942302Di2015UniqueSeparatorpublic static IObservable<TSource> OrderedCollect<TSource, TKey>Di2015NewLine    (this IObservable<TSource> left,Di2015NewLine     IObservable<TSource> right,Di2015NewLine     Func<TSource, TKey> keySelector,Di2015NewLine     TKey firstKey,Di2015NewLine     Func<TKey, TKey> nextKeyFuncDi2015NewLine     Func<TSource,TSource,TSource> resultSelector)Di2015NewLine{Di2015NewLine    return left.Merge(right)Di2015NewLine               .GroupByUntil(keySelector, x => x.Take(2).LastAsync())Di2015NewLine               .SelectMany(x => x.LastAsync())Di2015NewLine               .Sort(keySelector, firstKey, nextKeyFunc);Di2015NewLine}Di2015NewLine
19942302Di2015UniqueSeparatorSelectMany
19942302Di2015UniqueSeparatorZip
19942302Di2015UniqueSeparatorpublic static IObservable<TSource> OrderedCollect<TSource, TKey>Di2015NewLine    (this IObservable<TSource> left,Di2015NewLine     IObservable<TSource> right,Di2015NewLine     Func<TSource, TKey> keySelector,Di2015NewLine     TKey firstKey,Di2015NewLine     Func<TKey, TKey> nextKeyFunc,Di2015NewLine     Func<TSource, TSource, TSource> resultSelector)Di2015NewLine{Di2015NewLine    return Observable.Zip(Di2015NewLine        left.Sort(keySelector, firstKey, nextKeyFunc),Di2015NewLine        right.Sort(keySelector, firstKey, nextKeyFunc),Di2015NewLine        resultSelector);Di2015NewLine}Di2015NewLine
19942302Di2015UniqueSeparatorZip
19942302Di2015UniqueSeparatorrx-testing
19942302Di2015UniqueSeparatornunit
19942302Di2015UniqueSeparatorpublic class ReorderingEventsTests : ReactiveTestDi2015NewLine{Di2015NewLine    [Test]Di2015NewLine    public void ReorderingTest1()Di2015NewLine    {Di2015NewLine        var scheduler = new TestScheduler();Di2015NewLineDi2015NewLine        var s1 = scheduler.CreateColdObservable(Di2015NewLine            OnNext(100, 1),Di2015NewLine            OnNext(200, 2),Di2015NewLine            OnNext(400, 3),Di2015NewLine            OnNext(500, 4));Di2015NewLineDi2015NewLine        var s2 = scheduler.CreateColdObservable(Di2015NewLine            OnNext(100, 1),Di2015NewLine            OnNext(200, 3),Di2015NewLine            OnNext(300, 2),Di2015NewLine            OnNext(500, 4));Di2015NewLineDi2015NewLine        var results = scheduler.CreateObserver<int>();Di2015NewLineDi2015NewLine        s1.OrderedCollect(Di2015NewLine            right: s2,Di2015NewLine            keySelector: i => i,Di2015NewLine            firstKey: 1,Di2015NewLine            nextKeyFunc: i => i + 1,Di2015NewLine            resultSelector: (left,right) => left).Subscribe(results);Di2015NewLineDi2015NewLine        scheduler.Start();Di2015NewLineDi2015NewLine        results.Messages.AssertEqual(Di2015NewLine            OnNext(100, 1),Di2015NewLine            OnNext(300, 2),Di2015NewLine            OnNext(400, 3),Di2015NewLine            OnNext(500, 4));Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void ReorderingTest2()Di2015NewLine    {Di2015NewLine        var scheduler = new TestScheduler();Di2015NewLineDi2015NewLine        var s1 = scheduler.CreateColdObservable(Di2015NewLine            OnNext(100, 1),Di2015NewLine            OnNext(200, 2),Di2015NewLine            OnNext(300, 3),Di2015NewLine            OnNext(400, 4));Di2015NewLineDi2015NewLine        var s2 = scheduler.CreateColdObservable(Di2015NewLine            OnNext(100, 4),Di2015NewLine            OnNext(200, 3),Di2015NewLine            OnNext(300, 2),Di2015NewLine            OnNext(400, 1));Di2015NewLineDi2015NewLine        var results = scheduler.CreateObserver<int>();Di2015NewLineDi2015NewLine        s1.OrderedCollect(Di2015NewLine            right: s2,Di2015NewLine            keySelector: i => i,Di2015NewLine            firstKey: 1,Di2015NewLine            nextKeyFunc: i => i + 1,Di2015NewLine            resultSelector: (left, right) => left).Subscribe(results);Di2015NewLineDi2015NewLine        scheduler.Start();Di2015NewLineDi2015NewLine        results.Messages.AssertEqual(Di2015NewLine            OnNext(400, 1),Di2015NewLine            OnNext(400, 2),Di2015NewLine            OnNext(400, 3),Di2015NewLine            OnNext(400, 4));Di2015NewLine    }Di2015NewLine}Di2015NewLine
19942302Di2015UniqueSeparatorSort
19942302Di2015UniqueSeparatorpublic static IObservable<TSource> OrderedCollect<TSource, TKey>Di2015NewLine    (this IObservable<TSource> left,Di2015NewLine        IObservable<TSource> right,Di2015NewLine        Func<TSource, TKey> keySelector,Di2015NewLine        TKey firstKey,Di2015NewLine        Func<TKey, TKey> nextKeyFunc,Di2015NewLine        Func<TSource, TSource, TSource> resultSelector)Di2015NewLine{Di2015NewLine    Func<IObservable<TSource>, IObservable<TSource>> curriedSort =Di2015NewLine        events => events.Sort(keySelector, firstKey, nextKeyFunc);Di2015NewLineDi2015NewLine    return Observable.Zip(Di2015NewLine        curriedSort(left),Di2015NewLine        curriedSort(right),Di2015NewLine        resultSelector);Di2015NewLine}Di2015NewLine
19942408Di2015UniqueSeparatorvar dbObjects = new Dictionary<int, ObjectModel>();Di2015NewLineforeach(var y in dbObject)Di2015NewLine{Di2015NewLine    dbObjects.Add(y.id, y);Di2015NewLine}Di2015NewLineDi2015NewLineforeach(var x in formObject)Di2015NewLine{Di2015NewLine    ObjectModel y;Di2015NewLine    if(dbObjects.TryGetValue(x.id, out y))Di2015NewLine    {Di2015NewLine        //compare each property and notify user of change if differentDi2015NewLine    }Di2015NewLine}Di2015NewLine
19942413Di2015UniqueSeparator@Html.TextBoxFor
19942413Di2015UniqueSeparator<input type="file" name="File" Id="File/>Di2015NewLine
19942413Di2015UniqueSeparator@using (Html.BeginForm("Upload", "MyControllerName", FormMethod.Post, new { enctype = "multipart/form-data"}))Di2015NewLine{Di2015NewLine    <div id="parameterList">Di2015NewLine        <div id="verifyBtnDiv" style="display:none;">Di2015NewLine            <!-- Chose to just put the one line here instead of calling a partial-->Di2015NewLine            <input type="file" name="File" Id="File/>Di2015NewLine            <input type="submit" id="verifyBtn" value="Verify"/>Di2015NewLine        </div>Di2015NewLine </div>Di2015NewLine}Di2015NewLine
19942697Di2015UniqueSeparatorPictureBox[] catchcardArray = new PictureBox[Form1.pb.Name.Count];Di2015NewLine
19942697Di2015UniqueSeparatorcatchcardArray[i] = new PictureBox;Di2015NewLine
19942769Di2015UniqueSeparator.Value
19942769Di2015UniqueSeparatordataGridView1
19942769Di2015UniqueSeparator.Text
19942769Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  // Adding Values to Data BaseDi2015NewLine  string mySQL = "INSERT INTO Employee_login VALUES ("Di2015NewLine   + Convert.ToInt32(dataGridView1.Rows[RowCount - 1].Cells[0].Value) + ", '"Di2015NewLine   + dataGridView1.Rows[RowCount - 1].Cells[1].Value + "','";Di2015NewLine}Di2015NewLine
19942769Di2015UniqueSeparator.Trim()
19942769Di2015UniqueSeparator.Value
19942863Di2015UniqueSeparator@Model List<MySoftware.Models.Client>Di2015NewLine
19942863Di2015UniqueSeparatorModel[0]Di2015NewLineModel[1]Di2015NewLineModel[2]Di2015NewLine
19942863Di2015UniqueSeparator@Model IEnumerable<MySoftware.Models.Client>Di2015NewLineDi2015NewLinevar i = 0;Di2015NewLineforeach (var client in Model)Di2015NewLine{Di2015NewLine    <div> [client details] </div>Di2015NewLine    i++;Di2015NewLine    if (i % 2 == 1)Di2015NewLine        <br/>Di2015NewLine}Di2015NewLine
19943429Di2015UniqueSeparatorprivate void SetBackgroundImage<T>(T control, string title) where T : ControlDi2015NewLine{Di2015NewLine    control.BackgroundImage = Di2015NewLine                new Bitmap(Di2015NewLine                    typeof(this).Assembly.GetManifestResourceStream(title));Di2015NewLine}Di2015NewLine
19943429Di2015UniqueSeparatorControl
19943429Di2015UniqueSeparatorBackgroundImage
19943429Di2015UniqueSeparatorprivate void SetBackgroundImage(Control control, string title)Di2015NewLine{Di2015NewLine    control.BackgroundImage = Di2015NewLine                new Bitmap(Di2015NewLine                    typeof(this).Assembly.GetManifestResourceStream(title));Di2015NewLine}Di2015NewLine
19943429Di2015UniqueSeparatorSetBackgroundImage(myButton, "MyProject.Resources.ImgHouse_32.png"); // Use appropriate pathDi2015NewLine
19943677Di2015UniqueSeparatorvoid GridView1_RowDataBound(Object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine   if(e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine   {Di2015NewLine      var idLinkBtn = e.Row.FindControl("idLinkBtn") as HyperLink;Di2015NewLineDi2015NewLine      // The as operator will return null if the cast fails,Di2015NewLine      // so check for null before you try to use the hyper linkDi2015NewLine      if(idLinkBtn != null)Di2015NewLine      {Di2015NewLine          idLinkBtn.Visible = true;Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
19943689Di2015UniqueSeparatorToString
19943689Di2015UniqueSeparatorIQueryable
19943689Di2015UniqueSeparatorIQueryable<Employee> query = ...; //your queryDi2015NewLinevar querySql = query.ToString();Di2015NewLine
19943689Di2015UniqueSeparatorLog
19943689Di2015UniqueSeparatorDataContext
19943689Di2015UniqueSeparatorusing (var dc = new TestDataContext()) //your DataContextDi2015NewLine{Di2015NewLine  dc.Log = Console.Out; //it's of TextWriter type, use any suitableDi2015NewLine  IQueryable<Employee> query = ...; //your queryDi2015NewLineDi2015NewLine  //execute the query, as it'll output the query to the Log only after it'sDi2015NewLine  //really executed on the databaseDi2015NewLine  foreach (var s in query)Di2015NewLine  {Di2015NewLine      //...Di2015NewLine  }Di2015NewLine}Di2015NewLine
19943689Di2015UniqueSeparatorObjectQuery
19943689Di2015UniqueSeparatorToTraceString
19943689Di2015UniqueSeparatorusing (var dc = new TestEntities())Di2015NewLine{Di2015NewLine    var query = ...;// your queryDi2015NewLine    var oquery = query as System.Data.Objects.ObjectQuery;Di2015NewLine    Console.WriteLine(oquery.ToTraceString());Di2015NewLine}Di2015NewLine
19943737Di2015UniqueSeparatorpublic String GetExcelType(dynamic thing)Di2015NewLine{   Di2015NewLine    Type type = GetExcelTypeForComObject(thing)Di2015NewLine    if(type == typeof(Microsoft.Office.Interop.Excel.Chart))Di2015NewLine    {Di2015NewLine        return "[CHART]";Di2015NewLine    }Di2015NewLine    else if (type == typeof(Microsoft.Office.Interop.Excel.Range))Di2015NewLine    {Di2015NewLine        return "[TABLE]";Di2015NewLine    }Di2015NewLineDi2015NewLine    return "[UNKNOWN]";Di2015NewLine}Di2015NewLine
19943909Di2015UniqueSeparator<System.Runtime.InteropServices.Di2015NewLineStructLayout(System.Runtime.InteropServices.LayoutKind.Sequential,Di2015NewLineCharSet:=System.Runtime.InteropServices.CharSet.Auto)>Di2015NewLinePublic Structure MenuInfoDi2015NewLine    Public cbSize As UIntegerDi2015NewLine    Public fMask As UIntegerDi2015NewLine    Public dwStyle As UIntegerDi2015NewLine    Public cyMax As UIntegerDi2015NewLine    Public hbrBack As IntPtrDi2015NewLine    Public dwContextHelpID As UIntegerDi2015NewLine    Public dwMenuData As UIntPtrDi2015NewLineEnd StructureDi2015NewLine
19944056Di2015UniqueSeparatorreport.Load(Server.MapPath("MinAgriLogbookEntryRpt.rpt"));
19944056Di2015UniqueSeparatorreport.Load(Application.StartupPath + "MinAgriLogbookEntryRpt.rpt");
19944138Di2015UniqueSeparator[XmlRoot("Merchant")]Di2015NewLinepublic class MerchantDi2015NewLine{Di2015NewLine    [XmlArray("Cuisines"), XmlArrayItem("Cuisine")]Di2015NewLine    public List<String> WebCuisine { get; set; }Di2015NewLine}Di2015NewLine
19944138Di2015UniqueSeparatorXmlObjectSerializer
19944138Di2015UniqueSeparatorpublic class MerchantSerializer : XmlObjectSerializerDi2015NewLine{Di2015NewLine    XmlSerializer serializer;Di2015NewLineDi2015NewLine    public MerchantSerializer()Di2015NewLine    {Di2015NewLine        this.serializer = new XmlSerializer(typeof(Merchant));Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteObject(XmlDictionaryWriter writer, object graph)Di2015NewLine    {Di2015NewLine        XmlSerializerNamespaces ns = new XmlSerializerNamespaces();Di2015NewLine        ns.Add("", "");Di2015NewLine        serializer.Serialize(writer, graph, ns);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool IsStartObject(XmlDictionaryReader reader)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteEndObject(XmlDictionaryWriter writer)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteObjectContent(XmlDictionaryWriter writer, object graph)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteStartObject(XmlDictionaryWriter writer, object graph)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19944138Di2015UniqueSeparatorpublic static void Register(HttpConfiguration config)
19944138Di2015UniqueSeparator  config.Formatters.XmlFormatter.SetSerializer<Merchant>(new MerchantSerializer());Di2015NewLine
19944138Di2015UniqueSeparator<Merchant>Di2015NewLine   <Cuisines>Di2015NewLine       <Cuisine>Japanese</Cuisine>Di2015NewLine       <Cuisine>Korean</Cuisine>Di2015NewLine       <Cuisine>French</Cuisine>Di2015NewLine   </Cuisines>Di2015NewLine</Merchant>Di2015NewLine
19944186Di2015UniqueSeparatordgvEmployee.DataBind();Di2015NewLine
19944186Di2015UniqueSeparatorGridView
19944186Di2015UniqueSeparator.DataBind()
19944186Di2015UniqueSeparatorColumns
19944186Di2015UniqueSeparatorGridView
19944186Di2015UniqueSeparatorAutoGenerateColumns
19944186Di2015UniqueSeparatorTrue
19944186Di2015UniqueSeparator<asp:GridView ID="dgvEmployee" runat="server" AutoGenerateColumns="True">Di2015NewLine</asp:GridView>Di2015NewLine
19944186Di2015UniqueSeparatorAutoGenerateColumns="True"
19944186Di2015UniqueSeparatorAVG_COST
19944186Di2015UniqueSeparatorCUSTOMER_ID
19944186Di2015UniqueSeparator<asp:GridView ID="dgvEmployee" runat="server" AutoGenerateColumns="False">Di2015NewLine    <Columns>Di2015NewLine        <asp:BoundField datafield="CustomerID" headertext="Customer ID"/>Di2015NewLine        <asp:BoundField datafield="CompanyName" headertext="Company Name"/>Di2015NewLine        <asp:Boundfield datafield="Address" headertext="Address"/>Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine
19944186Di2015UniqueSeparatorAutoGenerateColumns
19944186Di2015UniqueSeparatorFalse
19944342Di2015UniqueSeparatorProcess.Start
19944342Di2015UniqueSeparatorProcess
19944342Di2015UniqueSeparatorKill
19944342Di2015UniqueSeparatorImmediately stops the associated process
19944342Di2015UniqueSeparatorForm1
19944342Di2015UniqueSeparatorclass Form1Di2015NewLine{Di2015NewLine    private Process process;Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //running notepad as an exampleDi2015NewLine        process = Process.Start("notepad"); Di2015NewLine    }Di2015NewLineDi2015NewLine    //and then at button handler kill that processDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //consider adding check for nullDi2015NewLine        process.Kill();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19944454Di2015UniqueSeparatorAndroid.Runtime.JNIEnv.AllocObject()
19944454Di2015UniqueSeparatorGooglePlayServices.dll
19944454Di2015UniqueSeparatorAllocObject()
19944454Di2015UniqueSeparatorMissingMethodException
19944496Di2015UniqueSeparatorProvider=Microsoft.ACE.OLEDB.12.0;Data Source=" + pathnam + ";Extended Properties=\\"Excel 12.0;HDR=Yes;IMEX=2\\"Di2015NewLine
19944515Di2015UniqueSeparatorpublic class CategoryDi2015NewLine{Di2015NewLine    public Category() { }Di2015NewLineDi2015NewLine    public string name { get; set; }Di2015NewLine    public Answer first { get; set; }Di2015NewLine    public Answer second { get; set; }Di2015NewLine    public Answer third { get; set; }Di2015NewLine    public Answer fourth { get; set; }Di2015NewLine    public Answer fifth { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class AnswerDi2015NewLine{Di2015NewLine    public decimal points { get; set; }Di2015NewLine    public string answer { get; set; }Di2015NewLine    public string description { get; set; }Di2015NewLineDi2015NewLine    public Answer(decimal points, string answer, string description)Di2015NewLine    {Di2015NewLine        this.points = points;Di2015NewLine        this.answer = answer;Di2015NewLine        this.description = description;Di2015NewLine    }Di2015NewLine}Di2015NewLine
19944515Di2015UniqueSeparatorpublic List<Category> GetCategoryList(string xmlFile)Di2015NewLine{Di2015NewLine    XDocument doc = XDocument.Load(xmlFile);Di2015NewLine    List<Category> categories = (from xElem in doc.Descendants("category")Di2015NewLine                                    select new CategoryDi2015NewLine                                    {Di2015NewLine                                        name = xElem.Attribute("name").Value,Di2015NewLine                                        first = new Answer(decimal.Parse(xElem.Element("first").Attribute("points").Value),Di2015NewLine                                                            xElem.Element("first").Attribute("answer").Value,Di2015NewLine                                                            xElem.Element("first").Value),Di2015NewLine                                        second = new Answer(decimal.Parse(xElem.Element("second").Attribute("points").Value),Di2015NewLine                                                            xElem.Element("second").Attribute("answer").Value,Di2015NewLine                                                            xElem.Element("second").Value),Di2015NewLine                                        third = new Answer(decimal.Parse(xElem.Element("third").Attribute("points").Value),Di2015NewLine                                                            xElem.Element("third").Attribute("answer").Value,Di2015NewLine                                                            xElem.Element("third").Value),Di2015NewLine                                        fourth = new Answer(decimal.Parse(xElem.Element("fourth").Attribute("points").Value),Di2015NewLine                                                            xElem.Element("fourth").Attribute("answer").Value,Di2015NewLine                                                            xElem.Element("fourth").Value),Di2015NewLineDi2015NewLine                                        fifth = new Answer(decimal.Parse(xElem.Element("fifth").Attribute("points").Value),Di2015NewLine                                                            xElem.Element("fifth").Attribute("answer").Value,Di2015NewLine                                                            xElem.Element("fifth").Value),Di2015NewLine                                    }).ToList();Di2015NewLine    return categories;Di2015NewLine}Di2015NewLine
19944515Di2015UniqueSeparatorList<Category> categories = GetCategoryList(@"XMLFile.xml");Di2015NewLineforeach (Category c in categories)Di2015NewLine{Di2015NewLine    //Do get value from Category objectDi2015NewLine}Di2015NewLine
19944612Di2015UniqueSeparatorint input = int.Parse(Console.ReadLine());Di2015NewLine
19944612Di2015UniqueSeparator3
19944612Di2015UniqueSeparator51
19944612Di2015UniqueSeparator(int)'3'
19944612Di2015UniqueSeparator51
19944612Di2015UniqueSeparatorConsole.ReadLine()
19944612Di2015UniqueSeparatorstring
19944612Di2015UniqueSeparatorint.Parse
19944612Di2015UniqueSeparator3
19944612Di2015UniqueSeparatorenter
19944612Di2015UniqueSeparatorint input = int.Parse("3"); //input will have 3 as integerDi2015NewLineint total = 0;Di2015NewLinefor (int i = 0; i <= input; i++)Di2015NewLine{Di2015NewLine    total += i;Di2015NewLine}Di2015NewLineConsole.Write(total); //prints 6Di2015NewLine
19944612Di2015UniqueSeparatorint.TryParse
19944612Di2015UniqueSeparatorFormatException
19944612Di2015UniqueSeparatorint.Parse
19944728Di2015UniqueSeparatorvar rec = new MyClass();Di2015NewLinevar fields = rec.GetType()Di2015NewLine.GetFields()Di2015NewLine.Where(value => value.GetValue(rec) is decimal)Di2015NewLine.ToList();Di2015NewLineDi2015NewLineforeach(var field in fields) {Di2015NewLine     field.setValue(rec, 1.234) Di2015NewLine}Di2015NewLine
19944798Di2015UniqueSeparatorvar sectionName = "[Nationality]";Di2015NewLinestring[] items = Di2015NewLine    File.ReadLines(fileName)                           //read file lazily Di2015NewLine        .SkipWhile(line => line != sectionName)        //search for headerDi2015NewLine        .Skip(1)                                       //skip headerDi2015NewLine        .TakeWhile(line => !string.IsNullOrEmpty(line))//take until next headerDi2015NewLine        .ToArray();                                    //convert to arrayDi2015NewLine
19944798Di2015UniqueSeparatoritems
19944798Di2015UniqueSeparatorAustralian Di2015NewLineAmerican Di2015NewLineSouth African Di2015NewLine
19944810Di2015UniqueSeparator   abstract class AnimalDi2015NewLine   {Di2015NewLine       public string DefaultMessage { get; set; }Di2015NewLineDi2015NewLine       public Animal()Di2015NewLine       {Di2015NewLine           Console.WriteLine("Animal Cstor called");Di2015NewLine           DefaultMessage = "Default Speak";Di2015NewLine       }Di2015NewLine       public virtual void Speak()Di2015NewLine       {Di2015NewLine           Console.WriteLine(DefaultMessage);Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLine    class Dog : AnimalDi2015NewLine    {Di2015NewLine        public Dog(): base()//base() redundant.  There's an implicit call to base here.Di2015NewLine        {Di2015NewLine            Console.WriteLine("Dog cstror called");Di2015NewLine        }Di2015NewLine        public override void Speak()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Custom Speak");//append new behaviorDi2015NewLine            base.Speak();//Re-use base behavior tooDi2015NewLine        }Di2015NewLine    }Di2015NewLine
19944810Di2015UniqueSeparatorAnimal
19944810Di2015UniqueSeparatornew
19944810Di2015UniqueSeparatorDog
19944924Di2015UniqueSeparatorstring sName;Di2015NewLinedouble dAmount;Di2015NewLineint sTotalNames = 0;Di2015NewLinedouble dAmountTotal = 0;Di2015NewLinedouble dAmountAverage;Di2015NewLineDi2015NewLineusing (StreamReader sr = new StreamReader("Donations.txt"))Di2015NewLine{Di2015NewLine    while (sr.Peek() != -1)Di2015NewLine    {Di2015NewLine        sName = sr.ReadLine();Di2015NewLine        Console.WriteLine(sName);Di2015NewLineDi2015NewLine        dAmount = Convert.ToDouble(sr.ReadLine());Di2015NewLine        Console.WriteLine(dAmount);Di2015NewLine        dAmountTotal += dAmount;Di2015NewLine        sTotalNames++;Di2015NewLine    }Di2015NewLine    dAmountAverage = dAmountTotal / sTotalNames;Di2015NewLine    Console.WriteLine("Sum = {0}", dAmountTotal );Di2015NewLine    Console.WriteLine("Total Names = {0}", sTotalNames);Di2015NewLine    Console.WriteLine("Average Amount = {0}", dAmountAverage);Di2015NewLine    Console.WriteLine("Press any key to close");Di2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
19945254Di2015UniqueSeparatorregex = "^I(?:\\s\\$(?:10?0?|20|50?))+$"Di2015NewLine
19945254Di2015UniqueSeparator^I
19945254Di2015UniqueSeparator'I'
19945254Di2015UniqueSeparator(?:\\s\\$
19945254Di2015UniqueSeparator'$'
19945254Di2015UniqueSeparator(?:10?0?|20|50?)
19945254Di2015UniqueSeparator+
19945254Di2015UniqueSeparator$
19945328Di2015UniqueSeparatornull
19945328Di2015UniqueSeparatorpublic item FindItem(int i)Di2015NewLine{Di2015NewLine    return itemList.FirstOrDefault(item => item.itemId == i);Di2015NewLine}Di2015NewLine
19945328Di2015UniqueSeparatorFirstOrDefault
19945328Di2015UniqueSeparatorReturns the first element of a sequence, or a default value if the sequence contains no elements.
19945328Di2015UniqueSeparatoritem
19945328Di2015UniqueSeparatornull
19945328Di2015UniqueSeparatorSelect
19945328Di2015UniqueSeparatorWhere
19945328Di2015UniqueSeparatorA
19945328Di2015UniqueSeparatorB
19945328Di2015UniqueSeparatorFirst
19945328Di2015UniqueSeparatorSingle
19945328Di2015UniqueSeparatorMax
19945328Di2015UniqueSeparatorLast
19945328Di2015UniqueSeparatorAggregate
19945328Di2015UniqueSeparatorA
19945328Di2015UniqueSeparatorA
19945328Di2015UniqueSeparatorFirstOrDefault
19945445Di2015UniqueSeparator.Element("thead")
19945445Di2015UniqueSeparator.Descendants("thead").First()Di2015NewLine
19945445Di2015UniqueSeparatorthead
19945445Di2015UniqueSeparatorhtml
19945445Di2015UniqueSeparator.Descendants("thead").First()
19945445Di2015UniqueSeparatortr
19945445Di2015UniqueSeparatorth
19945445Di2015UniqueSeparatorvar headings = document.Descendants("th")Di2015NewLine                       .Select(th => th.Value);Di2015NewLine
19945639Di2015UniqueSeparatorApplicationData.LocalFolder
19945639Di2015UniqueSeparatorStorageFile
19945639Di2015UniqueSeparatorCreateFileAsync
19945639Di2015UniqueSeparatorStorageFolder
19945639Di2015UniqueSeparatorApplicationData.LocalFolder
19945704Di2015UniqueSeparator\\r
19945704Di2015UniqueSeparator\\n
19945704Di2015UniqueSeparatorstring output = tb_Notizen.Text.Replace(Environment.NewLine, "<br>");Di2015NewLine
19945742Di2015UniqueSeparatorusing(var con = new SqlConnection("DataBase=SOUMENROY-PC;Server=(local)"))Di2015NewLineusing (var cmd = new SqlCommand("select count(*) from login1 where username = @username and password = @password", con))Di2015NewLine{Di2015NewLine    cmd.Parameters.AddWithValue("@username", username);Di2015NewLine    cmd.Parameters.AddWithValue("@password", password);Di2015NewLineDi2015NewLine    con.Open();Di2015NewLine    var result = (int)cmd.ExecuteScalar();Di2015NewLineDi2015NewLine    if (result > 0)Di2015NewLine    {Di2015NewLine        // credentials are validDi2015NewLine    }Di2015NewLine}Di2015NewLine
19945762Di2015UniqueSeparatorprotected void GridView2_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine        {Di2015NewLine            // You can replace this with a switch statementDi2015NewLine            if (DataBinder.Eval(e.Row.DataItem, "Discontinued").ToString() == "False")Di2015NewLine            {Di2015NewLine                TextBox txtTemp = new TextBox();Di2015NewLine                txtTemp.Text = "I am a textbox";Di2015NewLine                e.Row.Cells[10].Controls.Add(txtTemp);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // Add other controls hereDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
19945835Di2015UniqueSeparator<script type="text/javascript" language="javascript">Di2015NewLineDi2015NewLinefunction worker() {Di2015NewLine    __doPostBack('<%=updateComments.ClientID %>', null);Di2015NewLine    setTimeout(worker, 5000); // 5000= 5 seconds i.e section will get refereshed in intervals of 5 secondDi2015NewLine}Di2015NewLineDi2015NewLine</script>Di2015NewLine
19945835Di2015UniqueSeparator<asp:ScriptManager ID="manager" runat="server" ></asp:ScriptManager> Di2015NewLineDi2015NewLine<asp:UpdatePanel ID="updateComments" runat="server">Di2015NewLine     <ContentTemplate>Di2015NewLine          <div id="divConversation"  style="width: 100%;">Di2015NewLine              <div style='background-color: ALICEBLUE; float: left; width: 100%; word-wrap: break-word;Di2015NewLine    font-size: 14px;'>Di2015NewLine    <pre><font color='green'><b>Di2015NewLine        <div style='background-color: ALICEBLUE; margin-right: 410px;'>Di2015NewLine        <asp:Literal ID="ltrlFirst" runat="server"></asp:Literal>Di2015NewLine         Says: </b></font></pre>Di2015NewLine</div>Di2015NewLine<div style='background-color: ALICEBLUE; font-size: 14px; float: left; width: 410px;Di2015NewLine    margin-left: -410px; word-wrap: break-word; font-size: 14px;'>Di2015NewLine    <pre><font>Di2015NewLine    <asp:Literal ID="ltrlSecond" runat="server"></asp:Literal>Di2015NewLine    </font></pre>Di2015NewLine</div>Di2015NewLine<div style='background-color: ALICEBLUE; word-wrap: break-word;'>Di2015NewLine    <p style='color: #8B8A8A; margin-top: 0'>Di2015NewLine        Sent at Di2015NewLine        <asp:Literal ID="ltrlThird" runat="server"></asp:Literal>Di2015NewLine        </p>Di2015NewLine</div>Di2015NewLine          </div>Di2015NewLine     </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
19945835Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine    { Di2015NewLineDi2015NewLine     }Di2015NewLineDi2015NewLine     BindCommentData(); // New method which binds data.Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinePrivate void BindCommentData()Di2015NewLine{Di2015NewLine    // Here you get the dt..Di2015NewLineDi2015NewLine    if(dt.Rows.Count != 0)Di2015NewLine    {Di2015NewLine      ltrlFirst.Text = dt.Rows[i][2].ToString();Di2015NewLine      ltrlSecond.Text = dt.Rows[i][0].ToString();Di2015NewLine      ltrlThird.Text = Convert.ToDateTime(dt.Rows[i][1]).ToLongTimeString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19945886Di2015UniqueSeparatorimage.Source = new BitmapImage(new Uri("/MyNameSpace;images/someimage.png", UriKind.Relative));Di2015NewLine
19945908Di2015UniqueSeparator(dataGridView1.Columns[0] as DataGridViewComboBoxColumn).DataSource Di2015NewLine = new List<string> { "Apples", "Oranges", "Grapes"};    Di2015NewLineDi2015NewLine     for (int i = 0; i < list[0].Count; i++)Di2015NewLine    {Di2015NewLine        int number = dataGridView1.Rows.Add();Di2015NewLine        dataGridView1.Rows[number].Cells[0].Value = list[3][i]; //list[3][1]=="Apples"Di2015NewLine    }Di2015NewLine}Di2015NewLine
19945914Di2015UniqueSeparatorcharArray
19945914Di2015UniqueSeparatortrimmedChars
19945914Di2015UniqueSeparatorIndexOf
19945914Di2015UniqueSeparator!
19945914Di2015UniqueSeparator"foo!bar!"
19945914Di2015UniqueSeparatorpublic void fd() {Di2015NewLine  string input = Console.ReadLine();Di2015NewLine  int index = 0;Di2015NewLine  while (index < input.Length) {Di2015NewLine    if (!Char.IsLetterOrDigit(input, index) && ((index == 0 || !Char.IsLetterOrDigit(input, index - 1)) || (index == input.Length - 1 || !Char.IsLetterOrDigit(input, index + 1)))) {Di2015NewLine      input = input.Remove(index, 1);Di2015NewLine    } else {Di2015NewLine      index++;Di2015NewLine    }Di2015NewLine  }Di2015NewLine  Console.WriteLine(input);Di2015NewLine}Di2015NewLine
19945986Di2015UniqueSeparatorDictionary<int, Label> labelDictionary = new Dictionary<int, Label>Di2015NewLine{Di2015NewLine    {0, SomeLabel},Di2015NewLine    {1, SomeOtherLabel},Di2015NewLine    ...Di2015NewLine};Di2015NewLine
19945986Di2015UniqueSeparatorforeach (KeyValuePair<int, string> checkbox in CheckedDict)Di2015NewLine{Di2015NewLine    labelDictionary[checkbox.Key].Text = checkbox.Value;Di2015NewLine}Di2015NewLine
19946161Di2015UniqueSeparatorInterface A
19946161Di2015UniqueSeparatorInterface B
19946161Di2015UniqueSeparatorFoo
19946161Di2015UniqueSeparatorFoo
19946161Di2015UniqueSeparatorExplicit Interface Implementation
19946161Di2015UniqueSeparatorFoo
19946161Di2015UniqueSeparatorInterfaceA.Foo
19946161Di2015UniqueSeparatorInterfaceB.Foo
19946197Di2015UniqueSeparatorpublic class baseMenuItem : MenuItemDi2015NewLine{        Di2015NewLine    Type windowType;Di2015NewLine    public baseMenuItem()Di2015NewLine    {Di2015NewLine        this.Click += baseMenuItem_Click;Di2015NewLine    }Di2015NewLineDi2015NewLine    void baseMenuItem_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        if(windowType != null){Di2015NewLine            window = (Control)Activator.CreateInstance(windowType);Di2015NewLine            window.Show();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AssignHandleWindow<T>() where T : baseWindow Di2015NewLine    {Di2015NewLine        windowType = typeof(T);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19946227Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLine    public virtual A Plus(A right)Di2015NewLine    {Di2015NewLine        return new A();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static A operator + (A left, A right)Di2015NewLine    {Di2015NewLine        //Calculations and handle left == null case.Di2015NewLine        return left.Plus(right);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass B : ADi2015NewLine{Di2015NewLine    public override B Plus(B right)Di2015NewLine    {Di2015NewLine        //CalculationsDi2015NewLine        base.Plus(right);Di2015NewLine        return new A();Di2015NewLine    }Di2015NewLine}Di2015NewLine
19946279Di2015UniqueSeparator        dt.Columns.Add("Column1");Di2015NewLine        dt.Columns.Add("Column2");Di2015NewLine        dt.Columns.Add("Column3");Di2015NewLine        dt.Columns.Add("Column4");Di2015NewLine
19946366Di2015UniqueSeparatorICloneable
19946366Di2015UniqueSeparatorClone()
19946366Di2015UniqueSeparatorFleetShips.Add((Ship)AllShips[(int)ShipType.Fighter].Clone());Di2015NewLine
19946537Di2015UniqueSeparatorArray.Clear(names, 0, names.Length);Di2015NewLine
19946682Di2015UniqueSeparatorMainPage page = Application.Current.RootVisual as MainPage;Di2015NewLineLoadedPage myPage = page.frame.Content as LoadedPage;Di2015NewLine
19946708Di2015UniqueSeparator        drpDepartments.DataSource = dsDep.Tables["tblDepartment"];// Set DataSource Table FirstDi2015NewLine        drpDepartments.DataTextField = "Department";// Set Column Name of DataTable to set as Text FieldDi2015NewLine        drpDepartments.DataValueField = "DepartmentID";// Set Column Name of DataTable to set as Value FieldDi2015NewLine        drpDepartments.DataBind();Di2015NewLine
19946708Di2015UniqueSeparatorusing System.Web.UI.WebControls;
19946708Di2015UniqueSeparatorDataTextField
19946708Di2015UniqueSeparatorDisplayMember
19946708Di2015UniqueSeparatorValueMember
19946708Di2015UniqueSeparatorDataValueField
19946788Di2015UniqueSeparatorc:\\json
19946788Di2015UniqueSeparatorFile.WriteAllText(System.Web.HttpContext.Current.Server.MapPath("/json"), "json-text");  Di2015NewLine
19946788Di2015UniqueSeparatorServer.MapPath
19946788Di2015UniqueSeparatorc:\\websites\\json-project\\
19946788Di2015UniqueSeparatorServer.MapPath("/foo")
19946788Di2015UniqueSeparatorc:\\websites\\json-project\\foo
19947076Di2015UniqueSeparator  // in xaml ListBox bound to playListDi2015NewLineDi2015NewLine  List<AudioTrack> playList;Di2015NewLineDi2015NewLine  private void playListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine  {Di2015NewLine     if (playListBox.SelectedIndex >= 0)Di2015NewLine     {Di2015NewLine        BackgroundAudioPlayer.Instance.Track = playList[playListBox.SelectedIndex];Di2015NewLine     }Di2015NewLine  }Di2015NewLine
19947076Di2015UniqueSeparator    <ListBox x:Name="playListBox" SelectionChanged="playListBox_SelectionChanged">Di2015NewLine        <ListBox.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <TextBlock Text="{Binding Title}"/>Di2015NewLine            </DataTemplate>Di2015NewLine        </ListBox.ItemTemplate>Di2015NewLine    </ListBox>Di2015NewLine
19947076Di2015UniqueSeparator  ObservableCollection<AudioTrack> playList = new ObservableCollection<AudioTrack>();Di2015NewLineDi2015NewLine  // ConstructorDi2015NewLine  public MainPage()Di2015NewLine  {Di2015NewLine     InitializeComponent();Di2015NewLineDi2015NewLine     for (int i = 1; i < 51; i++)Di2015NewLine     {Di2015NewLine        AudioTrack audioTrack = new AudioTrack(new Uri("http://server.mp3.net/" + i + ".mp3", UriKind.Absolute),Di2015NewLine        "Name" + i.ToString(),Di2015NewLine        null,Di2015NewLine        "",Di2015NewLine        null);Di2015NewLineDi2015NewLine        playList.Add(audioTrack);Di2015NewLine     }Di2015NewLineDi2015NewLine     playListBox.ItemsSource = playList;Di2015NewLine  }Di2015NewLineDi2015NewLine  private void playListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine  {Di2015NewLine     if (playListBox.SelectedIndex >= 0)Di2015NewLine     {Di2015NewLine        BackgroundAudioPlayer.Instance.Track = playList[playListBox.SelectedIndex];Di2015NewLine        BackgroundAudioPlayer.Instance.Play(); // if you want to play it Di2015NewLine     }Di2015NewLine  }Di2015NewLine
19947476Di2015UniqueSeparatorddlfrom.Items.Insert(0, "Select...");Di2015NewLine
19947476Di2015UniqueSeparatordr = new MySqlDataAdapter("select tvl_code, concat_ws(',', tvl_code, citi_name) citiname from code_desc where travel_mode = 'BUS'", conn);Di2015NewLineds1 = new DataSet();Di2015NewLinedr.Fill(ds1);Di2015NewLineddlfrom.DataSource = ds1;Di2015NewLineddlfrom.DataTextField = "citiname";Di2015NewLineddlfrom.DataValueField = "tvl_code";Di2015NewLineddlfrom.DataBind();Di2015NewLineddlfrom.Items.Insert(0, "Select...");Di2015NewLine
19947558Di2015UniqueSeparatorvar block = blocksById.Where(x => x.Value == tracResult.ID)Di2015NewLine                      .Select(x => x.Key)Di2015NewLine                      .FirstOrDefault();Di2015NewLine
19947558Di2015UniqueSeparatornull
19947558Di2015UniqueSeparatorvar block = blocksById.Where(x => x.Value == tracResult.ID)Di2015NewLine                      .Select(x => x.Key)Di2015NewLine                      .FirstOrDefault() ?? somedefaultvalue;Di2015NewLine
19947616Di2015UniqueSeparatorDynamic SQL
19947616Di2015UniqueSeparatorSELECT * FROM @tablenameDi2015NewLineSELECT @colname FROM tblDi2015NewLineSELECT * FROM tbl WHERE x IN (@list)Di2015NewLine
19947616Di2015UniqueSeparatorTable-Valued Parameters
19947720Di2015UniqueSeparator// Load the document and set the root element.Di2015NewLineXmlDocument doc = new XmlDocument();Di2015NewLinedoc.Load(LocalPath);Di2015NewLineXmlNode rootNode = doc.DocumentElement;Di2015NewLinevar dat = rootNode.Attributes["Date"].Value;Di2015NewLine
19947829Di2015UniqueSeparator  if (Regex.IsMatch(Number,@"\\d{9}"))Di2015NewLine   {Di2015NewLine         //Has 9 digits      Di2015NewLine   }Di2015NewLine
19947852Di2015UniqueSeparatorvalidateModal()
19947852Di2015UniqueSeparatorpreventDefault
19947852Di2015UniqueSeparatorreturn false
19947852Di2015UniqueSeparatorvalidateModal
19947879Di2015UniqueSeparatorPhone
19947879Di2015UniqueSeparatordRow["Phone"] = Convert.ToInt64(txtPhone.Text);Di2015NewLine
19947892Di2015UniqueSeparatorautocomplete
19947892Di2015UniqueSeparatorfalse
19947892Di2015UniqueSeparator<asp:TextBox ID="TextBox1" autocomplete="false" runat="server"></asp:TextBox>Di2015NewLine
19947892Di2015UniqueSeparator<form id="myForm" autocomplete="off" method="post" runat="server">Di2015NewLine
19947923Di2015UniqueSeparatorapp.config
19947923Di2015UniqueSeparatorweb.config
19948240Di2015UniqueSeparatorhttp://mydomain/AutoDiscover/AutoDiscover.xmlDi2015NewLine
19948286Di2015UniqueSeparator.cs
19948286Di2015UniqueSeparatorsystem.WebServer
19948286Di2015UniqueSeparator<system.webServer>Di2015NewLine  <modules runAllManagedModulesForAllRequests="true" />Di2015NewLine
19948286Di2015UniqueSeparatorUrlRouting
19948286Di2015UniqueSeparator.NET Framework v4.0.30319
19948286Di2015UniqueSeparatorDOT NET Version 4.5
19948286Di2015UniqueSeparatorTurn Windows Feature On and Off
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorint
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorstring
19948382Di2015UniqueSeparatorint
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorint
19948382Di2015UniqueSeparatorint
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorpublic int? GradeValue {get;set;}Di2015NewLineDi2015NewLine[NotMapped]Di2015NewLine[DisplayFormat(NullDisplayText = "No grade")]Di2015NewLinepublic Grade? Grade Di2015NewLine{ Di2015NewLine    get Di2015NewLine    { Di2015NewLine         return GradeValue.HasValue ? (Grade?) GradeValue.Value : null; Di2015NewLine    } Di2015NewLine}Di2015NewLine
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorenum
19948382Di2015UniqueSeparatorGradeValue
19948382Di2015UniqueSeparatorpublic
19948382Di2015UniqueSeparatorGradeValue
19948382Di2015UniqueSeparatorset
19948578Di2015UniqueSeparatorselect
19948578Di2015UniqueSeparatorfrom device in devicesDi2015NewLineselect new Di2015NewLine{Di2015NewLine    DeviceName = device.Name,Di2015NewLine    TestUsers = device.AllocationsDi2015NewLine}Di2015NewLine
19948578Di2015UniqueSeparator.Where
19948578Di2015UniqueSeparatorAllocations
19948700Di2015UniqueSeparator/// <summary>Di2015NewLine/// Provides a bindable text property to the user controlDi2015NewLine/// </summary>Di2015NewLinepublic static DependencyProperty TextProperty = DependencyProperty.Register("Text", typeof(string), typeof(UserControl1), new PropertyMetadata("", onTextPropertyChanged));Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// optional static call back handler when the property changedDi2015NewLine/// </summary>Di2015NewLine/// <param name="o"></param>Di2015NewLine/// <param name="e"></param>Di2015NewLinestatic void onTextPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    var obj = o as UserControl1;Di2015NewLine    if (obj == null)Di2015NewLine        return;Di2015NewLineDi2015NewLine    //TODO: Changed...Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Gets \\ sets the textDi2015NewLine/// </summary>Di2015NewLinepublic string TextDi2015NewLine{Di2015NewLine    get { return (string)this.GetValue(TextProperty); }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (this.Text != value)Di2015NewLine            this.SetValue(TextProperty, value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
19948700Di2015UniqueSeparatorTextProperty
19948700Di2015UniqueSeparatorUserControl1
19948700Di2015UniqueSeparatorGetValue()
19948700Di2015UniqueSeparatorSetValue()
19948700Di2015UniqueSeparator<UserControl x:Class="WpfApplication1.UserControl1"Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine             mc:Ignorable="d" Di2015NewLine             DataContext="{Binding RelativeSource={RelativeSource Self}}"Di2015NewLine             d:DesignHeight="300" d:DesignWidth="300">Di2015NewLine    <Grid>Di2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition />Di2015NewLine            <ColumnDefinition />Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLine        <Label Grid.Column="0" FontWeight="Bold" Content="Text" VerticalAlignment="Center" />Di2015NewLine        <TextBox Text="{Binding Text, Mode=TwoWay}" Grid.Column="1" VerticalAlignment="Center" Padding="4" />Di2015NewLine    </Grid>Di2015NewLine</UserControl>Di2015NewLine
19948700Di2015UniqueSeparatorpublic class MainWindowModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// the textDi2015NewLine    /// </summary>Di2015NewLine    string myProperty = "This is the default text";Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets \\ sets the textDi2015NewLine    /// </summary>Di2015NewLine    public string MyPropertyDi2015NewLine    {Di2015NewLine        get { return this.myProperty;  }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (this.MyProperty != value)Di2015NewLine            {Di2015NewLine                this.myProperty = value;Di2015NewLine                this.OnPropertyChanged("MyProperty");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// fires the property changed eventDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="propertyName"></param>Di2015NewLine    private void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// the property changed eventDi2015NewLine    /// </summary>Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine}Di2015NewLine
19948700Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:ctrl="clr-namespace:WpfApplication1"Di2015NewLine        Name="Window1"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Window.DataContext>Di2015NewLine        <ctrl:MainWindowModel />Di2015NewLine    </Window.DataContext>Di2015NewLine    <Grid>Di2015NewLine        <ctrl:UserControl1 Text="{Binding Path=DataContext.MyProperty, Mode=TwoWay, ElementName=Window1}" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
