18269382Di2015UniqueSeparatorEmail
18269382Di2015UniqueSeparatorinterface EmailFactory
18269382Di2015UniqueSeparatorprivate EmailFactory emailFactory;Di2015NewLinepublic void SendAdminMail(string subject, string body, string adminAddress)Di2015NewLine{Di2015NewLine    var email = emailFactoryDi2015NewLine        .From(ConfigurationManagerDi2015NewLine                  .AppSettings["Mail.NoReply.Address"]Di2015NewLine                  .ToString(CultureInfo.InvariantCulture))Di2015NewLine        .To(adminAddress)Di2015NewLine        .Subject(subject)Di2015NewLine        .Body(body)Di2015NewLine        .UsingClient(GetOfficeClient());Di2015NewLineDi2015NewLine    email.Message.SubjectEncoding = Encoding.UTF8;Di2015NewLine    email.Message.BodyEncoding = Encoding.UTF8;Di2015NewLineDi2015NewLine    email.Send();Di2015NewLine}Di2015NewLine
18269543Di2015UniqueSeparatorstring selectedValue = Request.Form[ddlDepartment.UniqueID];Di2015NewLine
18269557Di2015UniqueSeparatorstring[] formats= {"yyyy-MM-dd"};Di2015NewLineif (DateTime.TryParseExact(date, formats, System.Globalization.CultureInfo.InvariantCulture, DateTimeStyles.None, out result))Di2015NewLine    returnValue = result;Di2015NewLineelseDi2015NewLine    returnValue = DateTime.Today;Di2015NewLine
18269587Di2015UniqueSeparatorTake_INput_form tcn = new Take_INput_form(listname);Di2015NewLine  tcn.ShowDialog();Di2015NewLine
18269587Di2015UniqueSeparator public Take_INput_form(List<string > input)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        Final_input_display(input);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Final_input_display(List<string> temp)Di2015NewLine    {Di2015NewLine        for (int i = 0; i <temp.Count; i++)Di2015NewLine        {Di2015NewLine            dataGridView1.Rows.Add();Di2015NewLine            dataGridView1.Rows[i].Cells[0].Value = temp [i];Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18269671Di2015UniqueSeparatorSqlCommand sc = new SqlCommand(@"Di2015NewLine    INSERT INTO kliplat (datum,text,castka,akce,subkey,priznak,rocnik) Di2015NewLine    VALUES (@datum,@text,@castka,@akce,@subkey,@priznak,@rocnik);Di2015NewLine    SELECT scope_identity();Di2015NewLine    ", spojeni);Di2015NewLine...Di2015NewLinevar newIdentity = (long) sc.ExecuteScalar();Di2015NewLine
18269998Di2015UniqueSeparatorRead
18269998Di2015UniqueSeparatorresponseStream.Read(buffer, 0, buffer.Length);Di2015NewLinefile.Write(buffer, 0, buffer.Length);Di2015NewLinebyteReaded += bytesCountToRead;Di2015NewLine
18269998Di2015UniqueSeparatorint chunkRead = responseStream.Read(buffer, 0, buffer.Length);Di2015NewLinefile.Write(buffer, 0, chunkRead);Di2015NewLinebyteReaded += chunkRead;Di2015NewLine
18269998Di2015UniqueSeparatorStream.Read
18269998Di2015UniqueSeparatorusing (var responseStream = response.GetResponseStream())Di2015NewLine{Di2015NewLine    using (Stream file = File.Create(filePath))Di2015NewLine    {Di2015NewLine        responseStream.CopyTo(file);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18269998Di2015UniqueSeparatorWebClient
18269998Di2015UniqueSeparatorHttpClient
18270025Di2015UniqueSeparatorJsonWriter
18270025Di2015UniqueSeparatorStream stream = ...;Di2015NewLineDi2015NewLineusing (var streamWriter = new StreamWriter(stream))Di2015NewLineusing (var writer = new JsonTextWriter(streamWriter))Di2015NewLine{Di2015NewLine    writer.Formatting = Formatting.Indented;Di2015NewLineDi2015NewLine    writer.WriteStartArray();Di2015NewLine    {Di2015NewLine        writer.WriteStartObject();Di2015NewLine        {Di2015NewLine            writer.WritePropertyName("foo");Di2015NewLine            writer.WriteValue(1);Di2015NewLine            writer.WritePropertyName("bar");Di2015NewLine            writer.WriteValue(2.3);Di2015NewLine        }Di2015NewLine        writer.WriteEndObject();Di2015NewLine    }Di2015NewLine    writer.WriteEndArray();Di2015NewLine}Di2015NewLine
18270063Di2015UniqueSeparatorUpdateSourceTrigger
18270063Di2015UniqueSeparatorPropertyChanged
18270091Di2015UniqueSeparatorpublic static DataTable ToDataTable<T>(this List<T> iList)Di2015NewLine    {Di2015NewLine        DataTable dataTable = new DataTable();Di2015NewLine        PropertyDescriptorCollection propertyDescriptorCollection =Di2015NewLine            TypeDescriptor.GetProperties(typeof(T));Di2015NewLine        for (int i = 0; i < propertyDescriptorCollection.Count; i++)Di2015NewLine        {Di2015NewLine            PropertyDescriptor propertyDescriptor = propertyDescriptorCollection[i];Di2015NewLine            Type type = propertyDescriptor.PropertyType;Di2015NewLineDi2015NewLine            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))Di2015NewLine                type = Nullable.GetUnderlyingType(type);Di2015NewLineDi2015NewLineDi2015NewLine            dataTable.Columns.Add(propertyDescriptor.Name, type);Di2015NewLine        }Di2015NewLine        object[] values = new object[propertyDescriptorCollection.Count];Di2015NewLine        foreach (T iListItem in iList)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < values.Length; i++)Di2015NewLine            {Di2015NewLine                values[i] = propertyDescriptorCollection[i].GetValue(iListItem);Di2015NewLine            }Di2015NewLine            dataTable.Rows.Add(values);Di2015NewLine        }Di2015NewLine        return dataTable;Di2015NewLine    }Di2015NewLine
18270124Di2015UniqueSeparatorDownloadData
18270124Di2015UniqueSeparatorWebClient client = new WebClient();Di2015NewLinevar data = client.DownloadData(url);Di2015NewLinevar html = Encoding.UTF8.GetString(data);Di2015NewLine
18270533Di2015UniqueSeparator// Firstly, get dirty property informations!Di2015NewLineIEnumerable<PropertyInfo> dirtyProperties = p2.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public)Di2015NewLine              .WhereDi2015NewLine              (Di2015NewLine                   property => allDirtyFields.AnyDi2015NewLine                   (Di2015NewLine                       field => property.Name == fieldDi2015NewLine                   )Di2015NewLine              );Di2015NewLineDi2015NewLine// Then, just iterate the whole property informations, but give theDi2015NewLine// "obj" GetValue/SetValue first argument the references "p2" or "p1" as follows:Di2015NewLineforeach(PropertyInfo dirtyProperty in dirtyProperties)Di2015NewLine{          Di2015NewLine       dirtyProperty.SetValue(p2, dirtyProperty.GetValue(p1)); Di2015NewLine}Di2015NewLine
18270533Di2015UniqueSeparatorPropertyInfo.GetValue(...)
18270533Di2015UniqueSeparatorPropertyInfo.SetValue(...)
18270537Di2015UniqueSeparatorwindow.location = urlDi2015NewLine
18270537Di2015UniqueSeparatorhttp://mysite/myPage?Id=12Di2015NewLine
18270537Di2015UniqueSeparator<input type='button' data-id="12"/>Di2015NewLine
18270537Di2015UniqueSeparatorvar btn = ...get-your-button-by-id-or-class-name-or-whateverDi2015NewLinevar id = btn.data('id');Di2015NewLinewindow.location='http://mysite/myPage?Id='+id;Di2015NewLine
18270784Di2015UniqueSeparator.ShowDialog()
18270784Di2015UniqueSeparatorMyMsgBox.ShowDialog()Di2015NewLine
18270816Di2015UniqueSeparatorstring openexe= @"C:\\Users\\marek\\Documents\\Visual Studio 2012\\Projects\\tours\\tours\\bin\\Debug\\netpokl.exe";Di2015NewLineProcess p = new Process();Di2015NewLinep.StartInfo.FileName = openexe;Di2015NewLinep.Start();Di2015NewLinep.WaitForExit();Di2015NewLine//do stuff hereDi2015NewLine
18270816Di2015UniqueSeparator private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Process p = new Process();Di2015NewLine        string openexe= @"C:\\Users\\marek\\Documents\\Visual Studio 2012\\Projects\\tours\\tours\\bin\\Debug\\netpokl.exe";Di2015NewLine        p.StartInfo.FileName = openexe;Di2015NewLine        p.EnableRaisingEvents = true;Di2015NewLine        p.Exited +=new EventHandler(p_Exited);Di2015NewLine        p.Start();            Di2015NewLine    }Di2015NewLineDi2015NewLine private void p_Exited(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Do stuff hereDi2015NewLine        MessageBox.Show("Exited");Di2015NewLine    }Di2015NewLine
18270877Di2015UniqueSeparator// string strTargetString = @"Acceptance :DT_Ext_0062-12_012ed2 [Describe]";Di2015NewLine// string strTargetString = @"Acceptance : DT_Ext_0062-12_012 (ed.2) , Describe";Di2015NewLinestring strTargetString = @"Acceptance of : DT_Ext_0062-12_012 (ed.2) , Describe to me";Di2015NewLineDi2015NewLine const string strRegex = @"\\.*:\\s*(DT_Ext_\\d{4}-\\d{2}_\\d{3})\\s*\\W*(ed)\\.?(\\d+)(\\W*[,])?(.*)";Di2015NewLineDi2015NewLineDi2015NewLineRegexOptions myRegexOptions = RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant;Di2015NewLineRegex myRegex = new Regex(strRegex, myRegexOptions);Di2015NewLineDi2015NewLineDi2015NewLineforeach(Match myMatch in myRegex.Matches(strTargetString))Di2015NewLine{Di2015NewLine    if(myMatch.Success)Di2015NewLine    {Di2015NewLine        // Add your code hereDi2015NewLine        var value = new {Di2015NewLine            Value1 = myMatch.Groups[1].Value,Di2015NewLine            Value2 = myMatch.Groups[2].Value,Di2015NewLine            Value3 = myMatch.Groups[3].Value,Di2015NewLine            Value4 = myMatch.Groups[5].Value,Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
18270900Di2015UniqueSeparatorIsMatch()
18270900Di2015UniqueSeparatorMatches()
18271118Di2015UniqueSeparatorcountFiles
18271118Di2015UniqueSeparatortotalFiles
18271118Di2015UniqueSeparatortotalFiles
18271118Di2015UniqueSeparatorcountFiles
18271118Di2015UniqueSeparatordouble
18271118Di2015UniqueSeparatorFileBar.Value = (double)countFiles / totalFiles * 100;Di2015NewLine
18271451Di2015UniqueSeparatorXmlArticle.XPath = "/articles/folder/article[contains(body,'" + txbSearch.Text + "')]";Di2015NewLine
18271969Di2015UniqueSeparatorconst string pattern = "(\\\\w)</span>";Di2015NewLineconst string replace = "$1 </span>";Di2015NewLine
18271969Di2015UniqueSeparator()
18271969Di2015UniqueSeparator$1
18271969Di2015UniqueSeparatorconst string pattern = "(?<=\\\\w)</span>";Di2015NewLineconst string replace = " </span>";Di2015NewLine
18271969Di2015UniqueSeparator\\w
18272099Di2015UniqueSeparatorCreateFile
18272099Di2015UniqueSeparator private void hasHighscores()Di2015NewLine {Di2015NewLine        String fileName = "hsc.txt";Di2015NewLine        using  (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication())Di2015NewLine        {Di2015NewLine            if (!isoStorage.FileExists(fileName))Di2015NewLine            {Di2015NewLine                using (var isoStream = isoStorage.CreateFile(fileName))Di2015NewLine                {Di2015NewLine                    using (var fileStream = new StreamWriter(isoStream))Di2015NewLine                    {Di2015NewLine                        fileStream.WriteLine("n1:666,n2:777,n3:888,h1:666,h2:777,h3:888");Di2015NewLine                    }  Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }  Di2015NewLine    }Di2015NewLine
18272099Di2015UniqueSeparatorstream.Close()
18272099Di2015UniqueSeparatorusing
18272158Di2015UniqueSeparatorprivate void ChangeNodesSelection(TreeNodeCollection node,bool doCheck)Di2015NewLine    {Di2015NewLine        foreach (TreeNode n in node)Di2015NewLine        {Di2015NewLine            n.Checked = doCheck;Di2015NewLine            if (n.Nodes.Count > 0)Di2015NewLine            {Di2015NewLine                ChangeNodesSelection(n.Nodes,doCheck);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineprivate void UncheckParentNodes(TreeNodeCollection node)Di2015NewLine    {Di2015NewLine        foreach (TreeNode n in node)Di2015NewLine        {Di2015NewLine            if (n.Parent == null && n.Nodes.Count == 0)Di2015NewLine                n.Checked = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18272187Di2015UniqueSeparator<ComboBox SelectedIndex="-1" Di2015NewLine                  x:Name="SiteLocCombo" Di2015NewLine                  SelectedValuePath="GeneralArea" Di2015NewLine                  DisplayMemberPath="Station" Di2015NewLine                  ItemSource="{Binding}"/>Di2015NewLine        <ComboBox SelectedIndex="-1" Di2015NewLine                  x:Name="SiteCodeCombo" Di2015NewLine                  SelectedValuePath="Station" Di2015NewLine                  DisplayMemberPath="GeneralArea" Di2015NewLine                  ItemSource="{Binding}"Di2015NewLine                  SelectedValue="{Binding ElementName=SiteLocCombo, Path=SelectedValue}"Di2015NewLine                  />Di2015NewLine
18272294Di2015UniqueSeparatorpublic static class ConvertToDatatableDi2015NewLine{Di2015NewLine    public static DataTable ToDataTable<T>(this IEnumerable<T> enumerable)Di2015NewLine    {Di2015NewLine        if (enumerable == null) throw new ArgumentException("enumerable");Di2015NewLine        var dt = new DataTable();Di2015NewLine        var es = enumerable as List<T> ?? enumerable.ToList();Di2015NewLine        var first = es.First();Di2015NewLine        if (first != null)Di2015NewLine        {Di2015NewLine            var props = first.GetType().GetProperties();Di2015NewLine            foreach (var propertyInfo in props)Di2015NewLine            {Di2015NewLine                if (!propertyInfo.PropertyType.IsClass || propertyInfo.PropertyType.Name.Equals("String"))Di2015NewLine                {Di2015NewLine                    dt.Columns.Add(new DataColumn(propertyInfo.Name));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var e in es)Di2015NewLine        {Di2015NewLine            var props = e.GetType().GetProperties();Di2015NewLine            DataRow dr = dt.NewRow();Di2015NewLine            dt.Rows.Add(dr);Di2015NewLine            foreach (var propertyInfo in props)Di2015NewLine            {Di2015NewLine                if (!propertyInfo.PropertyType.IsClass || propertyInfo.PropertyType.Name.Equals("String"))Di2015NewLine                {Di2015NewLine                    dr[propertyInfo.Name] = propertyInfo.GetValue(e);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return dt;Di2015NewLine    }Di2015NewLine
18272358Di2015UniqueSeparatorIEnumerable<Node> list = new[] { item };Di2015NewLine
18272358Di2015UniqueSeparatorIEnumerable<Node> list = new Node[] { item };Di2015NewLine
18272552Di2015UniqueSeparatorKeepDepth
18272552Di2015UniqueSeparatorSvnUpdateArgs
18272552Di2015UniqueSeparator    var updateArgs = new SvnUpdateArgs() { Depth = SvnDepth.Infinity, KeepDepth = true };Di2015NewLine    svnClient.Update(syncConnectionData.RootPath, updateArgs);Di2015NewLine
18272667Di2015UniqueSeparatorCopyToDataTable<T>
18272667Di2015UniqueSeparatorT
18272667Di2015UniqueSeparatorDataRow
18272705Di2015UniqueSeparatorvar sum = 0;Di2015NewLineDi2015NewLinefor(int i=0;i<1000;i++)Di2015NewLine{Di2015NewLine   if(i%3==0||i%5==0) //checks if something is multiple of 3 or 5Di2015NewLine      sum+=i; // sums only when it's multiple of 3 or 5Di2015NewLine}Di2015NewLine
18272705Di2015UniqueSeparatorvar sum = Enumerable.Range(3, 1000).Sum(x => (x % 3 == 0 || x % 5 == 0) ? x : 0);Di2015NewLine
18272705Di2015UniqueSeparatorvar result = SumDivisbleBy(3,999)+SumDivisbleBy(5,999)-SumDivisbleBy(15,999);Di2015NewLineDi2015NewLineprivate int SumDivisbleBy(int n, int p)Di2015NewLine{Di2015NewLine    return n*(p/n)*((p/n)+1)/2;Di2015NewLine}Di2015NewLine
18272733Di2015UniqueSeparatordisplaytable
18272733Di2015UniqueSeparatorwhile (SQLreader.Read())Di2015NewLine{Di2015NewLine    displaytable disp = new displaytable();Di2015NewLine    disp._regno = reader.GetString(0);Di2015NewLine    disp._name = reader.GetString(1);Di2015NewLine    disp._age = reader.GetInt32(2);Di2015NewLine    disp._sex = reader.GetString(3);Di2015NewLine    mystring.Add(disp);Di2015NewLine}Di2015NewLine
18272815Di2015UniqueSeparatortransform.Translate(Camera.main.transform.forward * speed, Space.World);Di2015NewLine
18272825Di2015UniqueSeparator...Di2015NewLine[ConfigurationCollection(typeof(LoggerRegistration), AddItemName = "LoggerRegistration")]Di2015NewLinepublic class LoggerRegistrations : ConfigurationElementCollectionDi2015NewLine{Di2015NewLine...Di2015NewLine.Di2015NewLine...Di2015NewLine[ConfigurationCollection(typeof(LogMapperElement), AddItemName = "LogMapper")]Di2015NewLinepublic class LogMappers : ConfigurationElementCollectionDi2015NewLine...Di2015NewLine
18272993Di2015UniqueSeparator<Application x:Class="SingleInstance.App"Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">Di2015NewLine</Application>Di2015NewLine
18272993Di2015UniqueSeparatorpublic partial class App Di2015NewLine{Di2015NewLine    // give the mutex a  unique nameDi2015NewLine    private const string MutexName = "##||ThisApp||##";Di2015NewLine    // declare the mutexDi2015NewLine    private readonly Mutex _mutex;Di2015NewLine    // overload the constructorDi2015NewLine    bool createdNew;Di2015NewLine    public App() Di2015NewLine    {Di2015NewLine        // overloaded mutex constructor which outs a booleanDi2015NewLine        // telling if the mutex is new or not.Di2015NewLine        // see http://msdn.microsoft.com/en-us/library/System.Threading.Mutex.aspxDi2015NewLine        _mutex = new Mutex(true, MutexName, out createdNew);Di2015NewLine        if (!createdNew)Di2015NewLine        {Di2015NewLine            // if the mutex already exists, notify and quitDi2015NewLine            MessageBox.Show("This program is already running");Di2015NewLine            Application.Current.Shutdown(0);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    protected override void OnStartup(StartupEventArgs e)Di2015NewLine    {Di2015NewLine        if (!createdNew) return;Di2015NewLine        // overload the OnStartup so that the main window Di2015NewLine        // is constructed and visibleDi2015NewLine        MainWindow mw = new MainWindow();Di2015NewLine        mw.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18273001Di2015UniqueSeparatorGroupBy
18273001Di2015UniqueSeparatorFirst
18273001Di2015UniqueSeparatorvar results = source.GroupBy(x => x.Id).Select(g => g.First()).ToList();Di2015NewLine
18273001Di2015UniqueSeparatorvar results = (from i in sourceDi2015NewLine               group i by i.Id into gDi2015NewLine               select g.First()).ToList();Di2015NewLine
18273055Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    private static Dictionary<string, string> myDictionary;Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // initialize your dictionaryDi2015NewLine        myDictionary = new Dictionary<string, string>(); Di2015NewLineDi2015NewLine        // fill the dictionaryDi2015NewLine        // you should fill if from file or database or something!Di2015NewLine        myDictionary.Add("my", "mera");Di2015NewLine        myDictionary.Add("is", "hai");Di2015NewLine        myDictionary.Add("name", "naam");Di2015NewLineDi2015NewLine        // the line you want to define in english:Di2015NewLine        string line = "my name is Shamim";Di2015NewLineDi2015NewLine        // output defined line in hindi:Di2015NewLine        string output = EngLineToHindi(line);Di2015NewLine        Console.WriteLine(output);Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine    static string EngLineToHindi(string line)Di2015NewLine    {Di2015NewLine        // array of words:Di2015NewLine        string[] words = line.Split(' ');Di2015NewLine        string ToReturn = "";Di2015NewLine        foreach (string word in words)Di2015NewLine        {Di2015NewLine            string temp = EngToHindi(word) + " ";Di2015NewLine            ToReturn += temp;Di2015NewLine        }Di2015NewLine        return ToReturn;Di2015NewLine    }Di2015NewLine    static string EngToHindi(string EngWord)Di2015NewLine    {Di2015NewLine        string key1 = EngWord;Di2015NewLine        // if not has the meaning return the same word!Di2015NewLine        if (!myDictionary.ContainsKey(key1)) return EngWord;Di2015NewLine        else return myDictionary[key1];Di2015NewLine    }Di2015NewLine}Di2015NewLine
18273072Di2015UniqueSeparatornull
18273185Di2015UniqueSeparatorvar DTOperators = new DataTable();Di2015NewLinevar UserName = "test";Di2015NewLineDTOperators.Columns.Add("UserName", typeof(string));Di2015NewLineDTOperators.Rows.Add("test1");Di2015NewLineDTOperators.Rows.Add("test");Di2015NewLinevar LoginDetails = from myRow in DTOperators.AsEnumerable()Di2015NewLine                     where myRow.Field<string>(0) == UserNameDi2015NewLine                     select myRow;Di2015NewLine
18273185Di2015UniqueSeparatorvar LoginDetails = DTOperators.RowsDi2015NewLine                              .Cast<DataRow>()Di2015NewLine                              .Where(x => x["UserName"] == UserName).ToList();Di2015NewLine
18273473Di2015UniqueSeparatorDisplayMemberPath
18273473Di2015UniqueSeparatorTextBlock
18273473Di2015UniqueSeparator<ListBox x:Name="lstToys" Style="{DynamicResource ListBoxStyle1}"  Di2015NewLine         ItemsSource="{Binding Strings}" DisplayMemberPath="Toys">Di2015NewLine</ListBox>Di2015NewLine
18273473Di2015UniqueSeparator<ListBox x:Name="lstToys" Style="{DynamicResource ListBoxStyle1}"  Di2015NewLine         ItemsSource="{Binding Strings}">Di2015NewLine    <ListBox.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding Toys}"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListBox.ItemTemplate>Di2015NewLine</ListBox>Di2015NewLine
18273473Di2015UniqueSeparatorDisplayMemberPath
18273473Di2015UniqueSeparatorDataTemplate
18273473Di2015UniqueSeparatorBinding
18273473Di2015UniqueSeparator<ListBox x:Name="lstToys" Style="{DynamicResource ListBoxStyle1}"  Di2015NewLine         ItemsSource="{Binding Strings}">Di2015NewLine    <ListBox.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding Toys}" ToolTip="Here is a tooltip!"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListBox.ItemTemplate>Di2015NewLine</ListBox>Di2015NewLine
18273473Di2015UniqueSeparatorToolTip
18273473Di2015UniqueSeparatorDisplayMemberPath
18273473Di2015UniqueSeparatorItemContainerStyle
18273473Di2015UniqueSeparator<ListBox x:Name="lstToys" Style="{DynamicResource ListBoxStyle1}"  Di2015NewLine         ItemsSource="{Binding Strings}" DisplayMemberPath="Toys">Di2015NewLine    <ListBox.ItemContainerStyle>Di2015NewLine        <Style TargetType="ListBoxItem">Di2015NewLine            <Setter Property="ToolTip" Value="Here's a tooltip!"/>Di2015NewLine        </Style>Di2015NewLine    </ListBox.ItemContainerStyle>Di2015NewLine</ListBox>Di2015NewLine
18273473Di2015UniqueSeparatorDisplayMemberPath
18273504Di2015UniqueSeparator<ListBox ScrollViewer.HorizontalScrollBarVisibility="Disabled" ItemsSource="{Binding YourSource}">Di2015NewLine    <ListBox.ItemsPanel>Di2015NewLine        <ItemsPanelTemplate>Di2015NewLine            <WrapPanel IsItemsHost="True" />Di2015NewLine        </ItemsPanelTemplate>Di2015NewLine    </ListBox.ItemsPanel>Di2015NewLine    ...Di2015NewLine</ListBox>Di2015NewLine
18273504Di2015UniqueSeparator<ItemsControl ItemsControlScrollViewer.HorizontalScrollBarVisibility="Disabled" ItemsSource="{Binding YourSource}">Di2015NewLine     <ItemsControl.ItemsPanel>Di2015NewLine           <ItemsPanelTemplate>Di2015NewLine                   <WrapPanel IsItemsHost="True" />    Di2015NewLine           </ItemsPanelTemplate>Di2015NewLine     </ItemsControl.ItemsPanel>Di2015NewLine     ...Di2015NewLine</ItemsControl>Di2015NewLine
18273617Di2015UniqueSeparator<asp:TextBox runat="server" ID="txt" MaxLength="12"></asp:TextBox>Di2015NewLine<asp:RegularExpressionValidator ID="RegularExpressionValidator1" runat="server" Di2015NewLine        ErrorMessage="Error" ForeColor="Red" ControlToValidate="txt"Di2015NewLine        ValidationExpression="^[0-9]{12}$"></asp:RegularExpressionValidator>Di2015NewLine
18273820Di2015UniqueSeparator_mockRepositoryDi2015NewLine  .Stub(x => x.GetModuleKindPropertyNames(Arg<string>.Is.Anything))Di2015NewLine  .Return(Enumerable.Empty<string>().AsQueryable());Di2015NewLine
18273820Di2015UniqueSeparator_controller.GetModulePropertyName(Arg<string>.Is.Anything);Di2015NewLine
18273820Di2015UniqueSeparator_controller.GetModulePropertyName(string.Empty);Di2015NewLine
18274080Di2015UniqueSeparatorXmlCDataSection
18274080Di2015UniqueSeparatorabc
18274080Di2015UniqueSeparatorXmlElement
18274080Di2015UniqueSeparator[XmlElement("abc")]Di2015NewLinepublic string abc { get; set; }Di2015NewLine
18274080Di2015UniqueSeparatorXmlDocument
18274080Di2015UniqueSeparatorXDocument
18274099Di2015UniqueSeparatorGetHashCode
18274099Di2015UniqueSeparatorint
18274186Di2015UniqueSeparatorTGraphType
18274186Di2015UniqueSeparatorTVertex
18274186Di2015UniqueSeparatorTEgde
18274186Di2015UniqueSeparatorTEdge
18274186Di2015UniqueSeparatorwhere TGraphSubtype : BidirectionalGraph<TVertex, TEdge>Di2015NewLine
18274186Di2015UniqueSeparatorBidirectionalGraph<TVertex, TEdge>
18274186Di2015UniqueSeparatorclass AGraph: BidirectionalGraph<AVertex, AnEdge> { ... }Di2015NewLine...Di2015NewLinevar aGraph = new AGraph();Di2015NewLineaGraph.IncomingEdges(vertex);Di2015NewLine
18274186Di2015UniqueSeparatorAGraph
18274186Di2015UniqueSeparatorBidirectionalGraph<AVertex, AnEdge>
18274186Di2015UniqueSeparatorTVertex
18274186Di2015UniqueSeparatorTEdge
18274186Di2015UniqueSeparatorIGraph<TVertex, TEdge>
18274186Di2015UniqueSeparatorBidirectionalGraph<TVertex, TEdge>
18274186Di2015UniqueSeparatorAGraph
18274186Di2015UniqueSeparatorclass AGraph: IGraph<AVertex, AnEdge>, Di2015NewLine              IGraph<AnotherVertex, AnotherEdge> { ... }Di2015NewLine
18274186Di2015UniqueSeparatorTVertex
18274186Di2015UniqueSeparatorAVertex
18274186Di2015UniqueSeparatorAnotherVertex
18274280Di2015UniqueSeparatorusing (RapidWorkflowDataContext context = new RapidWorkflowDataContext())Di2015NewLine                        {Di2015NewLine                            var query = from w in context.WorkflowInstancesDi2015NewLine                                        join c in context.Workflows on w.WorkflowID equals c.IDDi2015NewLine                                         where EmpWorkflowIDs.Contains((int)w.ID)Di2015NewLine                                         && w.CurrentStateID != c.LastStateIDDi2015NewLine                                         select w;Di2015NewLineDi2015NewLine                            return query.ToList();Di2015NewLine                        }Di2015NewLine
18274404Di2015UniqueSeparatorvar th = new WebsiteThumbnailImage("http://www.google.com", 1024, 768, 256, 192);Di2015NewLinethis.BackgroundImage =  await th.GenerateWebSiteThumbnailImage();Di2015NewLine
18274404Di2015UniqueSeparatorclass WebsiteThumbnailImageDi2015NewLine{Di2015NewLine    public WebsiteThumbnailImage(string Url, int BrowserWidth, int BrowserHeight, int ThumbnailWidth, int ThumbnailHeight)Di2015NewLine    {Di2015NewLine        this.Url = Url;Di2015NewLine        this.BrowserWidth = BrowserWidth;Di2015NewLine        this.BrowserHeight = BrowserHeight;Di2015NewLine        this.ThumbnailHeight = ThumbnailHeight;Di2015NewLine        this.ThumbnailWidth = ThumbnailWidth;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public string Url { set; get; }Di2015NewLine    public int ThumbnailWidth { set; get; }Di2015NewLine    public int ThumbnailHeight { set; get; }Di2015NewLine    public int BrowserWidth { set; get; }Di2015NewLine    public int BrowserHeight { set; get; }Di2015NewLineDi2015NewLine    private Bitmap m_Bitmap = null;Di2015NewLine    public Bitmap ThumbnailImageDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return m_Bitmap;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public Task<Bitmap> GenerateWebSiteThumbnailImage()Di2015NewLine    {Di2015NewLine        var tcs = new TaskCompletionSource<Bitmap>();Di2015NewLineDi2015NewLine        WebBrowserDocumentCompletedEventHandler completed = null;Di2015NewLine        WebBrowser m_WebBrowser = new WebBrowser();Di2015NewLineDi2015NewLine        completed = (o, s) =>Di2015NewLine        {Di2015NewLine            _GenerateWebSiteThumbnailImageInternal(m_WebBrowser);Di2015NewLine            m_WebBrowser.DocumentCompleted -= completed;Di2015NewLine            m_WebBrowser.Dispose();Di2015NewLine            tcs.TrySetResult(m_Bitmap);Di2015NewLine        };Di2015NewLineDi2015NewLine        m_WebBrowser.ScrollBarsEnabled = false;Di2015NewLine        m_WebBrowser.ScriptErrorsSuppressed = true;Di2015NewLine        m_WebBrowser.DocumentCompleted += completed;Di2015NewLine        m_WebBrowser.Navigate(Url);Di2015NewLineDi2015NewLine        return tcs.Task;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void _GenerateWebSiteThumbnailImageInternal(WebBrowser m_WebBrowser)Di2015NewLine    {Di2015NewLine        m_WebBrowser.ClientSize = new Size(this.BrowserWidth, this.BrowserHeight);Di2015NewLine        m_WebBrowser.ScrollBarsEnabled = false;Di2015NewLine        m_Bitmap = new Bitmap(m_WebBrowser.Bounds.Width, m_WebBrowser.Bounds.Height);Di2015NewLine        m_WebBrowser.BringToFront();Di2015NewLine        m_WebBrowser.DrawToBitmap(m_Bitmap, m_WebBrowser.Bounds);Di2015NewLine        m_Bitmap = (Bitmap)m_Bitmap.GetThumbnailImage(ThumbnailWidth, ThumbnailHeight, null, IntPtr.Zero);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18274442Di2015UniqueSeparatorColumnName
18274442Di2015UniqueSeparatorDataTable
18274442Di2015UniqueSeparatorDataTable
18274442Di2015UniqueSeparatorvar source = new DataTable();Di2015NewLinesource.Columns.Add(new DataColumn("TableName", typeof(string)));Di2015NewLinesource.Columns.Add(new DataColumn("RowId", typeof(int)));Di2015NewLinesource.Columns.Add(new DataColumn("ColumnName", typeof(string)));Di2015NewLinesource.Columns.Add(new DataColumn("ColumnValue", typeof(string)));Di2015NewLineDi2015NewLinesource.Rows.Add("A", 1, "C1", "V1");Di2015NewLinesource.Rows.Add("A", 1, "C2", "V2");Di2015NewLinesource.Rows.Add("A", 2, "C1", "V3");Di2015NewLinesource.Rows.Add("A", 2, "C2", "V4");Di2015NewLine
18274442Di2015UniqueSeparatorDataTable
18274442Di2015UniqueSeparatorvar target = new DataTable();Di2015NewLinetarget.Columns.Add(new DataColumn("TableName", typeof(string)));Di2015NewLinetarget.Columns.Add(new DataColumn("RowId", typeof(int)));Di2015NewLine
18274442Di2015UniqueSeparatorvar query = from r in source.AsEnumerable()Di2015NewLine            let i = newDi2015NewLine            {Di2015NewLine                TableName = r.Field<string>("TableName"),Di2015NewLine                Id = r.Field<int>("RowId"),Di2015NewLine                ColumnName = r.Field<string>("ColumnName"),Di2015NewLine                ColumnValue = r.Field<string>("ColumnValue")Di2015NewLine            }Di2015NewLine            group i by new { i.TableName, i.Id } into gDi2015NewLine            select g;Di2015NewLine
18274442Di2015UniqueSeparatortarget
18274442Di2015UniqueSeparatorDataTable
18274442Di2015UniqueSeparatorforeach (var item in query)Di2015NewLine{Di2015NewLine    var newRow = target.NewRow();Di2015NewLineDi2015NewLine    // static columnsDi2015NewLine    newRow["TableName"] = item.Key.TableName;Di2015NewLine    newRow["RowId"] = item.Key.Id;Di2015NewLineDi2015NewLine    // dynamic columnsDi2015NewLine    foreach (var c in item)Di2015NewLine    {Di2015NewLine        if(!target.Columns.Contains(c.ColumnName))Di2015NewLine        {Di2015NewLine            target.Columns.Add(new DataColumn(c.ColumnName, typeof(String)));Di2015NewLine        }Di2015NewLineDi2015NewLine        newRow[c.ColumnName] = c.ColumnValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    target.Rows.Add(newRow);Di2015NewLine}Di2015NewLine
18274495Di2015UniqueSeparatorclass Part {Di2015NewLine    IEnumerable<Part> SubParts {get;set;}Di2015NewLine    public int TotalParts {Di2015NewLine        get {Di2015NewLine            return 1 + SubParts.Sum(p => p.TotalParts);Di2015NewLine            //     ^                       ^Di2015NewLine            //     |                       |Di2015NewLine            // Add one for this part       |Di2015NewLine            //                             |Di2015NewLine            //         Use LINQ to aggregate counts recursivelyDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18274495Di2015UniqueSeparatorPart
18275233Di2015UniqueSeparatorif (GetLastInputInfo(ref LastInput))Di2015NewLine{Di2015NewLine    IdleTime = System.Environment.TickCount - LastInput.dwTime;Di2015NewLine    string s = IdleTime.ToString();Di2015NewLineDi2015NewLine    Dispatcher.BeginInvoke(new Action(() =>Di2015NewLine    {Di2015NewLine        label1.Content = s;Di2015NewLine    }));Di2015NewLine}Di2015NewLine
18275315Di2015UniqueSeparatorInternalsVisibleTo
18275315Di2015UniqueSeparator[assembly:InternalsVisibleTo("MyTest")]Di2015NewLine
18275315Di2015UniqueSeparatorMyTest.dll
18275353Di2015UniqueSeparatorSELECT DISTINCT * FROM TB_Chapter WHERE c_CourseID = '" + _courseID + "' "
18275411Di2015UniqueSeparatorListView
18275487Di2015UniqueSeparatorDataTemplate
18275487Di2015UniqueSeparatorItemWidth
18275487Di2015UniqueSeparatorWrapPanel
18275487Di2015UniqueSeparator<WrapPanel Orientation="Horizontal" Width="245" ItemWidth="33">Di2015NewLine</WrapPanel>Di2015NewLine
18275519Di2015UniqueSeparatorsource.Body
18275519Di2015UniqueSeparatorParameterExpression
18275519Di2015UniqueSeparatoru
18275519Di2015UniqueSeparatorsource.Parameters[0]
18275525Di2015UniqueSeparatorstring image
18275525Di2015UniqueSeparatorStream image
18275525Di2015UniqueSeparatorreturn File
18275647Di2015UniqueSeparator"$(SolutionDir)Lib\\ilmerge" /targetplatform:v4,C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 /out:$(ProjectDir)bin\\Merged\\MyExe.exe MyExe.exe log4net.net40.dllDi2015NewLine
18275728Di2015UniqueSeparatortabControl.SelectedItem = tabControl.Items.OfType<TabItem>().SingleOrDefault(n => n.Name == selectedTabItem);Di2015NewLine
18275735Di2015UniqueSeparatorpublic interface IMyEntityDi2015NewLine{Di2015NewLine    DateTime CreatedAt { get; set; }Di2015NewLine    string CreatedBy { get; set; }Di2015NewLine    // Other properties shared by your entities...Di2015NewLine}Di2015NewLine
18275735Di2015UniqueSeparator[MetadataType(typeof(MyModelMetadata))]Di2015NewLinepublic partial class MyModel : IMyEntityDi2015NewLine{Di2015NewLine   [Bind()]  Di2015NewLine   public class MyModelMetadataDi2015NewLine   {Di2015NewLine      [Required]Di2015NewLine      public object MyProperty { get; set; }Di2015NewLineDi2015NewLine      [Required]Di2015NewLine      public string CreatedBy { get; set; }  Di2015NewLine   }Di2015NewLine}Di2015NewLine
18275807Di2015UniqueSeparator// [drive_letter]:\\ or  \\\\[server]\\ or [drive name]:\\Di2015NewLineprivate const string PathPattern = "^[A-z]:[\\\\\\\\/]|^\\\\\\\\|^.*[A-z]:[\\\\\\\\/]";Di2015NewLinevar matchMaker = new Regex(PathPattern);Di2015NewLinevar success = matchMaker.Matches(inputPath);Di2015NewLine
18275897Di2015UniqueSeparatorViewGroup.LayoutParams lp = view.LayoutParameters;Di2015NewLinelp.Height = 350;Di2015NewLinelp.Width = 150;Di2015NewLineview.LayoutParameters = lp;Di2015NewLine
18275897Di2015UniqueSeparatorAnimationEnd
18275997Di2015UniqueSeparatordo {Di2015NewLine    ...Di2015NewLine    myNetworkStream.Read(buffer, 0, someSizeToCopyEachLoop)Di2015NewLine}Di2015NewLinewhile(myNetworkStream.DataAvailable);Di2015NewLine
18275997Di2015UniqueSeparatorMemoryStream
18275997Di2015UniqueSeparator.Length
18275997Di2015UniqueSeparatorMemoryStream s = new MemoryStream();Di2015NewLinemyNetworkStream.CopyTo(s);Di2015NewLineint length = s.Length;Di2015NewLine
18276026Di2015UniqueSeparatorstatic
18276347Di2015UniqueSeparatorJsonSerializer ser = new JsonSerializer();Di2015NewLinevar jObj = ser.Deserialize(new JReader(new StringReader(json))) as JObject;Di2015NewLineDi2015NewLinevar newJson = jObj.ToString(Newtonsoft.Json.Formatting.None);Di2015NewLine
18276347Di2015UniqueSeparatorpublic class JReader : Newtonsoft.Json.JsonTextReaderDi2015NewLine{Di2015NewLine    public JReader(TextReader r) : base(r)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Read()Di2015NewLine    {Di2015NewLine        bool b = base.Read();Di2015NewLine        if (base.CurrentState == State.Property && ((string)base.Value).Contains(' '))Di2015NewLine        {Di2015NewLine            base.SetToken(JsonToken.PropertyName,((string)base.Value).Replace(" ", "_"));Di2015NewLine        }Di2015NewLine        return b;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18276347Di2015UniqueSeparator{"POI Items":[{"lat":{"value":"00","ab cd":"de fg"}}]}
18276347Di2015UniqueSeparator{"POI_Items":[{"lat":{"value":"00","ab_cd":"de fg"}}]}
18276441Di2015UniqueSeparatorasync
18276441Di2015UniqueSeparatorawait
18276523Di2015UniqueSeparatorPage_Load
18276523Di2015UniqueSeparatorif(!IsPostBack)Di2015NewLine{Di2015NewLine    listBox.DataSource = list;Di2015NewLine    listBox.DataTextField = "name";Di2015NewLine    listBox.DataValueField = "id";Di2015NewLine    listBox.DataBind();Di2015NewLine}Di2015NewLine
18276523Di2015UniqueSeparatorPage_Load
18276690Di2015UniqueSeparator<DataTemplate DataType="l:DefaultViewModel">Di2015NewLine    <lv:DefaultView/>Di2015NewLine</DataTemplate>Di2015NewLine
18276690Di2015UniqueSeparator<DataTemplate DataType="{x:Type l:DefaultViewModel}">Di2015NewLine    <lv:DefaultView/>Di2015NewLine</DataTemplate>Di2015NewLine
18277001Di2015UniqueSeparatorExit
18277016Di2015UniqueSeparatorstring filename = System.IO.Path.GetFileName("/Images/She.jpg");Di2015NewLine
18277027Di2015UniqueSeparatorSystem.Windows.Forms.ToolTip btnToolTip = new System.Windows.Forms.ToolTip();Di2015NewLinebtnToolTip.SetToolTip(this.button, "your tip");Di2015NewLine
18277100Di2015UniqueSeparatorHashSet<string>
18277100Di2015UniqueSeparatorHashSet<string> strings = new HashSet<string>();Di2015NewLineDi2015NewLinestrings.Add("foo");Di2015NewLinestrings.Add("foo");Di2015NewLineDi2015NewLinestrings.Count // 1Di2015NewLine
18277100Di2015UniqueSeparatorUnionWith
18277100Di2015UniqueSeparatorHashSet<string> strings = new HashSet<string>();Di2015NewLineDi2015NewLinewhile(running)Di2015NewLine{Di2015NewLine   string[] newStringArrayToAdd = GetStrings();Di2015NewLine   strings.UnionWith(newStringArrayToAdd);Di2015NewLine}Di2015NewLine
18277328Di2015UniqueSeparatorGetFirstGenericArgument()
18277328Di2015UniqueSeparatorGetGenericTypeDefinition()
18277328Di2015UniqueSeparatorT
18277328Di2015UniqueSeparatort.GetGenericArguments()[0]
18277328Di2015UniqueSeparatorpublic class CollectionHandler<T> {Di2015NewLine    public void Handle(IEnumerable<T> collection) { Di2015NewLine        // Look ma, no reflection!Di2015NewLine    }Di2015NewLine}Di2015NewLine
18277346Di2015UniqueSeparatorMembershipUser newUser = Membership.CreateUser("username", "password", "email@a.com");Di2015NewLine
18277368Di2015UniqueSeparatorInitialSessionState initial = InitialSessionState.CreateDefault();Di2015NewLineRunspace runspace = RunspaceFactory.CreateRunspace(initial);Di2015NewLinerunspace.Open();Di2015NewLinePowerShell ps = PowerShell.Create();Di2015NewLineps.Runspace = runspace;Di2015NewLineps.AddCommand("invoke-command");Di2015NewLineps.AddParameter("ComputerName", "mycomp.mylab.com");Di2015NewLineScriptBlock filter = ScriptBlock.Create("Get-childitem C:\\\\windows");Di2015NewLineps.AddParameter("ScriptBlock", filter);Di2015NewLineforeach (PSObject obj in ps.Invoke())Di2015NewLine{Di2015NewLine   // Do SomethingDi2015NewLine}Di2015NewLine
18277520Di2015UniqueSeparatorM1
18277520Di2015UniqueSeparatorTask
18277520Di2015UniqueSeparatorThread
18277520Di2015UniqueSeparatorM2
18277520Di2015UniqueSeparatorM1
18277520Di2015UniqueSeparatorM2
18277520Di2015UniqueSeparatorM2
18277520Di2015UniqueSeparatorM1
18277520Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine    public event Action A;Di2015NewLine    public event Action B;Di2015NewLineDi2015NewLine    public Foo()Di2015NewLine    {Di2015NewLine        A += M1;Di2015NewLine    }Di2015NewLineDi2015NewLine    private object key = new object();Di2015NewLine    private void M1()Di2015NewLine    {Di2015NewLine        lock (key)Di2015NewLine        {Di2015NewLine            Task.Run(() => M2());Di2015NewLine        }Di2015NewLine    }Di2015NewLine    private void M2()Di2015NewLine    {Di2015NewLine        lock (key)Di2015NewLine        {Di2015NewLine            if (B != null)Di2015NewLine                B();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18277647Di2015UniqueSeparatorclass NulStream : StreamDi2015NewLine{Di2015NewLine    public override bool CanReadDi2015NewLine    {Di2015NewLine        get { return false;  }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanSeekDi2015NewLine    {Di2015NewLine        get { return false; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanWriteDi2015NewLine    {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Flush()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    protected long length;Di2015NewLineDi2015NewLine    public override long LengthDi2015NewLine    {Di2015NewLine        get { return this.length; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long PositionDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return this.length;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            throw new NotSupportedException();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int Read(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override long Seek(long offset, SeekOrigin origin)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void SetLength(long value)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Write(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        this.length += count;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineusing (var nul = new NulStream())Di2015NewLine{Di2015NewLine    xml.Serialize(nul, lst);Di2015NewLine    long length = nul.Length;Di2015NewLine}Di2015NewLine
18277647Di2015UniqueSeparatorSetLength
18277647Di2015UniqueSeparatorWrite
18277871Di2015UniqueSeparatorStreamCount
18277873Di2015UniqueSeparatorpublic class DropDownListModelDi2015NewLine{Di2015NewLine    public DropDownListModel()Di2015NewLine    {Di2015NewLine        List<SelectListItem> items = new List<SelectListItem>();Di2015NewLine        items.Add( new SelectListItem() { Text = "one", Value = "one" } );Di2015NewLine        items.Add( new SelectListItem() { Text = "two", Value = "two" } );Di2015NewLine        VehicleList = new SelectList( items, "Value", "Text" );Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Vehicle { get; set; }Di2015NewLineDi2015NewLine    public SelectList VehicleList { get; set; }Di2015NewLine}Di2015NewLine
18277888Di2015UniqueSeparatorFunc<>
18277888Di2015UniqueSeparator    Expression<Func<B, bool>> MapFun<A, B>(Expression<Func<A, bool>> input)where A : classDi2015NewLine    {Di2015NewLine        var result = DbAccessLayer.TransformPredicateLambda<A,B>(input);Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
18277888Di2015UniqueSeparatorpublic static Expression<Func<TNewTarget, bool>> TransformPredicateLambda<TOldTarget, TNewTarget>(Expression<Func<TOldTarget, bool>> predicate)Di2015NewLine
18277955Di2015UniqueSeparatorTEnum
18277955Di2015UniqueSeparatorint
18277955Di2015UniqueSeparatorpublic bool this[TEnum name]Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        int index = (int)(object)name;Di2015NewLine        return _bits[index];Di2015NewLine    }Di2015NewLine}Di2015NewLine
18277955Di2015UniqueSeparatorenum
18277955Di2015UniqueSeparatorint
18277955Di2015UniqueSeparatorpublic bool this[TEnum name]Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        int index = Convert.ToInt32(name);Di2015NewLine        return _bits[index];Di2015NewLine    }Di2015NewLine}Di2015NewLine
18277955Di2015UniqueSeparatorint
18277955Di2015UniqueSeparatoruint
18277955Di2015UniqueSeparatorlong
18277955Di2015UniqueSeparatorulong
18277955Di2015UniqueSeparatorBitArray
18277955Di2015UniqueSeparatorint
18277963Di2015UniqueSeparatornull
18278007Di2015UniqueSeparator()
18278007Di2015UniqueSeparatoras
18278007Di2015UniqueSeparatornull
18278178Di2015UniqueSeparatorgameState.mainMenu
18278178Di2015UniqueSeparatorif (CurrentGameState != gameState.gameLoading && Di2015NewLine    CurrentGameState != gameState.mainMenu &&Di2015NewLine    keyboardState.IsKeyDown(Keys.Escape))Di2015NewLine
18278347Di2015UniqueSeparator[DataType(DataType.Date)]
18278347Di2015UniqueSeparator<input type="date" />
18278347Di2015UniqueSeparator<input type="text" />
18278347Di2015UniqueSeparatorView
18278347Di2015UniqueSeparator@Html.TextBoxFor(model => model.DateOfBirth, @"{0:yyyy\\/MM\\/dd}", new { @class = "datepicker" })
18278391Di2015UniqueSeparatorConstructorInfo[] constructorInfos = typeof(T).GetConstructors();Di2015NewLineConstructorInfo constructorInfo = constructorInfos[0];Di2015NewLineParameterInfo[] paramsVar = constructorInfo.GetParameters();Di2015NewLineIEnumerable<ParameterInfo> collectionParams = paramsVar.Where(Di2015NewLine    x => typeof(ICollection).IsAssignableFrom(x.ParameterType));Di2015NewLine
18278391Di2015UniqueSeparatorGetElementType
18278391Di2015UniqueSeparatortypeof(ICollection)
18278391Di2015UniqueSeparatorx.ParameterType
18278408Di2015UniqueSeparatorProperties.Settings.Default
18278408Di2015UniqueSeparatorProperties.Settings
18278408Di2015UniqueSeparatorApplicationSettingsBase
18278408Di2015UniqueSeparatorstring
18278408Di2015UniqueSeparatorstring name = frmControlProp[cn].SettingName;Di2015NewLineobject setting = Properties.Settings.Default[name];Di2015NewLine
18278408Di2015UniqueSeparatorstring setting = (string) Properties.Settings.Default[name];Di2015NewLine
18278408Di2015UniqueSeparatorSettingsPropertyNotFoundException
18278408Di2015UniqueSeparatorPropertyValues
18278466Di2015UniqueSeparator<a>
18278466Di2015UniqueSeparator(?:\\G|(?<=</a>))(?:[^<]|<(?!a\\b))Di2015NewLine
18278466Di2015UniqueSeparator(?:            # open a non capturing groupDi2015NewLine    \\G         # contiguous to precedent match or the begining of the stringDi2015NewLine  |            # ORDi2015NewLine    (?<=</a>)  # preceded by the closing "a" tagsDi2015NewLine)              # close the non capturing groupDi2015NewLine(?:            # open a non capturing groupDi2015NewLine    [^<]       # all that is not a <Di2015NewLine  |            # ORDi2015NewLine    <(?!a\\b)   # < not followed by "a" (=not a "a" tag)Di2015NewLine)              # close the non capturing groupDi2015NewLine
18278466Di2015UniqueSeparatorX
18278466Di2015UniqueSeparator\\r
18278466Di2015UniqueSeparator\\n
18278466Di2015UniqueSeparator(?:\\G|(?<=</a>))(?:\\r\\n|[^<]|<(?!a\\b))Di2015NewLine
18278563Di2015UniqueSeparatorif (true)Di2015NewLine{Di2015NewLine   using (SqlConnection conn = new SqlConnection("connectionString"))Di2015NewLine   {Di2015NewLine         //your codeDi2015NewLine   }Di2015NewLine   using (SqlConnection conn = new SqlConnection("connectionString"))Di2015NewLine   {Di2015NewLine        //your codeDi2015NewLine   }Di2015NewLine}Di2015NewLine
18278719Di2015UniqueSeparatorvoid ShowPropertyName<T1, T2>(T1 p, params Expression<Func<T1, T2>>[] properties)Di2015NewLine    {Di2015NewLine        foreach (var e in properties)Di2015NewLine        {Di2015NewLine            var f = e.Compile();Di2015NewLine            var memberExpression = e.Body as MemberExpression;Di2015NewLine            var memberInfo = memberExpression.Member;Di2015NewLine            Console.WriteLine("{0}: {1}", memberInfo.Name, f(p));Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18278719Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    public int P1 { get; set; }Di2015NewLine    public int P2 { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinevar test = new Test {P1 = 5, P2 = 3};Di2015NewLineDi2015NewLineShowPropertyName(test, t => t.P1);Di2015NewLineShowPropertyName(test, t => t.P2, t => t.P1);Di2015NewLine
18278719Di2015UniqueSeparatorP1: 5Di2015NewLineP2: 3Di2015NewLineP1: 5Di2015NewLine
18278719Di2015UniqueSeparatorvoid ShowPropertyName<T1>(T1 p, params Expression<Func<T1, object>>[] properties)Di2015NewLine    {Di2015NewLine        foreach (var e in properties)Di2015NewLine        {Di2015NewLine            var f = e.Compile();Di2015NewLineDi2015NewLine            MemberExpression memberExpression;Di2015NewLine            if (e.Body is UnaryExpression)Di2015NewLine            {Di2015NewLine                var unaryExpression = e.Body as UnaryExpression;Di2015NewLine                memberExpression = unaryExpression.Operand as MemberExpression;Di2015NewLine            }Di2015NewLine            else if(e.Body is MemberExpression)Di2015NewLine            {Di2015NewLine                memberExpression = e.Body as MemberExpression;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Console.WriteLine("Unsupported Body expression of type {0}", e.Body.GetType());Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            var memberInfo = memberExpression.Member;Di2015NewLine            Console.WriteLine("{0}: {1}", memberInfo.Name, f(p));Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18278719Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    public int P1 { get; set; }Di2015NewLine    public int P2 { get; set; }Di2015NewLine    public string P3 { get; set; }Di2015NewLine}Di2015NewLine
18278719Di2015UniqueSeparator        var test = new Test {P1 = 5, P2 = 3, P3 = "hello"};Di2015NewLineDi2015NewLine        ShowPropertyName(test, t => t.P1);Di2015NewLine        ShowPropertyName(test, t => t.P2, t => t.P1, t=> t.P3);Di2015NewLine
18278719Di2015UniqueSeparatorP1: 5Di2015NewLineP2: 3Di2015NewLineP1: 5Di2015NewLineP3: helloDi2015NewLine
18278835Di2015UniqueSeparatorswitch (btn.BackColor.Name)Di2015NewLine{Di2015NewLine   case "Green":Di2015NewLine      break;Di2015NewLine   case "Red":Di2015NewLine      break;Di2015NewLine   case "Gray":Di2015NewLine      break;Di2015NewLine}Di2015NewLine
18278847Di2015UniqueSeparator    var bytes = Encoding.UTF8.GetBytes(Name);Di2015NewLine    var base64 = Convert.ToBase64String(bytes);Di2015NewLine    message.AddHeader('Sender', String.Format("=?UTF-8?B?{0}?= <{1}>", base64, email));Di2015NewLine
18278908Di2015UniqueSeparatorstring.Replace("/", "\\\\")Di2015NewLinestring.Replace("/", @"\\")Di2015NewLine
18279263Di2015UniqueSeparatorRemove
18279263Di2015UniqueSeparatorvar tabToDelete = tabControl.Items.OfType<TabItem>().SingleOrDefault(n => n.Name == stringValue);Di2015NewLineif (tabToDelete != null) // Since you chose to use SingleOrDefault, we have to check to make sure it isn't null before we try to remove it.Di2015NewLinetabControl.Items.Remove(tabToDelete);Di2015NewLine
18279284Di2015UniqueSeparatorcmd.ExecuteReader
18279284Di2015UniqueSeparatorsp_executesql
18279284Di2015UniqueSeparatorDeclare @Sql nvarchar(max);Di2015NewLineSet @Sql = 'Select Count(*) From sys.objects Where object_id > @SomeNum';Di2015NewLineexec sp_executesql @Sql, N'@SomeNum int', 10000;Di2015NewLine
18279284Di2015UniqueSeparatorDeclare @Sql nvarchar(max);Di2015NewLineSet @Sql = 'Select Count(*) From @SomeTable Where object_id > @SomeNum';Di2015NewLineexec sp_executesql @Sql, N'@SomeTable nvarchar(256),@SomeNum int', 'sys.objects', 10000;Di2015NewLine
18279284Di2015UniqueSeparatorMust declare the table variable "@SomeTable"
18279284Di2015UniqueSeparator@SomeTable
18279307Di2015UniqueSeparator    [System.Security.SecurityCritical]  // auto-generatedDi2015NewLine    [ResourceExposure(ResourceScope.None)]Di2015NewLine    [MethodImplAttribute(MethodImplOptions.InternalCall)]Di2015NewLine    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]Di2015NewLine    private static extern bool TrySZBinarySearch(Array sourceArray, Di2015NewLine        int sourceIndex, int count, Object value, out int retVal);Di2015NewLine
18279450Di2015UniqueSeparator    //example jagged arrayDi2015NewLine    string[][] ja = new string[2][];Di2015NewLineDi2015NewLine    for (int i = 0; i < 2; i++)Di2015NewLine        ja[i] = Enumerable.Range(0, 3).Select(k => "Cell [" + i + "," + k + "]").ToArray();Di2015NewLineDi2015NewLine    //conversion to a 2D-arrayDi2015NewLine    string[,] ka = new[] { new string[ja.Length, ja[0].Length] }Di2015NewLine        .Select(_ => new { x = _, y = ja.Select((a, ia) => a.Select((b, ib) => _[ia, ib] = b).Count()).Count() })Di2015NewLine        .Select(_ => _.x)Di2015NewLine        .First();Di2015NewLineDi2015NewLine    //dump resultDi2015NewLine    for (int i = 0; i < 2; i++)Di2015NewLine        for (int k = 0; k < 3; k++)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ka[i, k]);Di2015NewLine        }Di2015NewLine
18279687Di2015UniqueSeparatorTimestamp
18279687Di2015UniqueSeparatorDateTime
18279689Di2015UniqueSeparatorGetType()
18279689Di2015UniqueSeparatorSystem.Type
18279689Di2015UniqueSeparator"StringBuilder"
18279689Di2015UniqueSeparatorStringBuilder sbText = new StringBuilder();Di2015NewLineObject oMyObject = sbText;Di2015NewLineDi2015NewLineConsole.WriteLine(oMyObject.GetType().Name);Di2015NewLine
18279689Di2015UniqueSeparatoris
18279689Di2015UniqueSeparatoras
18279689Di2015UniqueSeparatorType
18279689Di2015UniqueSeparatorStringBuilder sbText = new StringBuilder();Di2015NewLineObject oMyObject = sbText;Di2015NewLineDi2015NewLine//...Di2015NewLineDi2015NewLineStringBuilder sb = oMyObject as StringBuilder;Di2015NewLineif (sb != null)Di2015NewLine{Di2015NewLine    // oMyObject was a StringBuilder - you can use sb as needed:Di2015NewLine    sb.AppendText("Foo");Di2015NewLine}Di2015NewLine
18279826Di2015UniqueSeparator{([^}]+![^}]+)}Di2015NewLine
18279831Di2015UniqueSeparatorList<IDictionary>
18279831Di2015UniqueSeparatorIDictionary
18279948Di2015UniqueSeparatorSystem.Transactions.TransactionScope
18279948Di2015UniqueSeparatorfinallyDi2015NewLine            {Di2015NewLine                cntx.Database.Connection.Close();Di2015NewLine                transaction.Dispose();Di2015NewLine            }Di2015NewLine
18279990Di2015UniqueSeparatorInt intLecturerNum = 1;Di2015NewLine
18279990Di2015UniqueSeparatorintLecturerNum = Convert.ToInt(Console.Readline());Di2015NewLine
18279990Di2015UniqueSeparatorYes
18279990Di2015UniqueSeparatorNo
18279990Di2015UniqueSeparatorXElement lecturelist = XElement.Load("lecturer.xml");Di2015NewLineConsole.WriteLine("Select a lecturer:");Di2015NewLineDi2015NewLineString strProf;Di2015NewLineInt i = 1;Di2015NewLineDi2015NewLineDi2015NewLineforeach (var mainelement in lecturelist.Elements())Di2015NewLine    {Di2015NewLine        Console.Write(i.ToString() + " - ");Di2015NewLine        foreach (var subelement in mainelement.Elements())Di2015NewLine            {Di2015NewLineDi2015NewLineDi2015NewLine                if (subelement.Name == "Name")Di2015NewLine                {Di2015NewLine                    Console.Write("Lecturer: {0}", subelement.Value);Di2015NewLineDi2015NewLine                }Di2015NewLine                if (subelement.Name == "Surname")Di2015NewLine                    Console.Write(", {0}", subelement.Value);Di2015NewLineDi2015NewLine                if (subelement.Name == "Specialisation")Di2015NewLine                    Console.Write(" Subject: {0} \\n", subelement.Value);Di2015NewLineDi2015NewLine                i++;Di2015NewLine            }Di2015NewLine    }Di2015NewLineDi2015NewLine\\\\ somewhere after this is where you read in the answer given by the userDi2015NewLine
18280222Di2015UniqueSeparatorConvert.ToBase64String()
18280277Di2015UniqueSeparator.settings
18280277Di2015UniqueSeparatorThemeName
18280277Di2015UniqueSeparatorGeneral
18280277Di2015UniqueSeparatorSystem.Configuration.ApplicationSettingsBase
18280277Di2015UniqueSeparatorapp.config
18280277Di2015UniqueSeparatorSettings.settings
18280277Di2015UniqueSeparatorThemeName
18280277Di2015UniqueSeparatorstring
18280277Di2015UniqueSeparatorprivate void Window_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    ThemeManager.ApplicationThemeName = Properties.Settings.Default.ThemeName;Di2015NewLine}Di2015NewLine
18280277Di2015UniqueSeparatorpublic void SetTheme(string themeName) {Di2015NewLine    ThemeManager.ApplicationThemeName = themeName;Di2015NewLine    Properties.Settings.Default.ThemeName = themeName;Di2015NewLine    Properties.Settings.Default.Save();Di2015NewLine}Di2015NewLine
18280280Di2015UniqueSeparatorISNULL(prior_supplier, 'N') AS prior_supplierDi2015NewLine
18280280Di2015UniqueSeparator=iif(Fields!prior_supplier.Value = "Y", "Yes", "No")Di2015NewLine
18280357Di2015UniqueSeparatorBusinessResponse<Product[]> reponse = client.GetProductList(2);Di2015NewLine
18280421Di2015UniqueSeparatorEnvironment.OSVersion
18280421Di2015UniqueSeparatorusing (Microsoft.Win32.RegistryKey key = Di2015NewLine       Microsoft.Win32.Registry.LocalMachineDi2015NewLine               .OpenSubKey(@"SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion"))Di2015NewLine{Di2015NewLine    var osVersion = key.GetValue("CurrentVersion");Di2015NewLine}Di2015NewLine
18280421Di2015UniqueSeparatorHKLM "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
18280421Di2015UniqueSeparatorOperating system        Version numberDi2015NewLine-----------------       --------------Di2015NewLineWindows 8                   6.2Di2015NewLineWindows Server 2012         6.2Di2015NewLineWindows 7                   6.1Di2015NewLineWindows Server 2008 R2      6.1Di2015NewLineWindows Server 2008         6.0Di2015NewLineWindows Vista               6.0Di2015NewLineWindows Server 2003 R2      5.2Di2015NewLineWindows Server 2003         5.2Di2015NewLineWindows XP 64-Bit Edition   5.2Di2015NewLineWindows XP                  5.1Di2015NewLineWindows 2000                5.0Di2015NewLine
18280560Di2015UniqueSeparatorSystem.Timers.Timer
18280560Di2015UniqueSeparatorThreadPool
18280560Di2015UniqueSeparatorTimer
18280560Di2015UniqueSeparatorStop
18280560Di2015UniqueSeparatorTimer.AutoReset
18280560Di2015UniqueSeparatorAutoReset
18280560Di2015UniqueSeparatoryourTimer.AutoReset = false;Di2015NewLineDi2015NewLineprivate void Timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)Di2015NewLine{Di2015NewLine     tryDi2015NewLine     {Di2015NewLineDi2015NewLine     }Di2015NewLine     finallyDi2015NewLine     {Di2015NewLine         yourTimer.Enabled = true;// or yourTimer.Start();Di2015NewLine     }Di2015NewLine}Di2015NewLine
18280579Di2015UniqueSeparatorAppendLine
18280579Di2015UniqueSeparatorAppend
18280579Di2015UniqueSeparatorstring returnErrorMsg(Exception exc)Di2015NewLine{Di2015NewLine    //return exc.Message;  // this doesn't prompt for credentials.Di2015NewLineDi2015NewLine    StringBuilder sbError = new StringBuilder();Di2015NewLine    sbError.Append(exc.Message);Di2015NewLine    return sbError.ToString();Di2015NewLine}Di2015NewLine
18280719Di2015UniqueSeparator<input type="hidden"...
18280719Di2015UniqueSeparatorHtml.Hidden
18280719Di2015UniqueSeparator@Html.Hidden("AllDepts", duckbillDeptsCSV, new { id = "hiddenAllDepts" })Di2015NewLine
18280719Di2015UniqueSeparator#
18280719Di2015UniqueSeparator<hiddenAllDepts>
18280719Di2015UniqueSeparatorvar deptsArray = $('#hiddenAllDepts').val();Di2015NewLine
18280812Di2015UniqueSeparatorPaddingMode.PKCS7
18281022Di2015UniqueSeparator_phonenumbers
18281022Di2015UniqueSeparatorIEnumerable<PhoneInfo>
18281022Di2015UniqueSeparator_phoneNumbers = subelement.Element("telephone_number").Elements()Di2015NewLine                .Where(e => e.Name.LocalName.StartsWith("number").Select(e => Di2015NewLine                new PhoneInfoDi2015NewLine                {Di2015NewLine                  Number = e.Value,Di2015NewLine                  Retries = subelement.Element("telephone_Number").Element(Di2015NewLine                  "retries" + e.Name.LocalName.SubString(5)).Value,Di2015NewLine                  NumberType = subelement.Element("telephone_Number").Element(Di2015NewLine                  "numbertype" + e.Name.LocalName.SubString(5)).ValueDi2015NewLine                })Di2015NewLine
18281022Di2015UniqueSeparatorPhoneInfo
18281022Di2015UniqueSeparator<number>
18281275Di2015UniqueSeparatorCompiledQuery
18281312Di2015UniqueSeparatorApplication.ShutdownMode
18281312Di2015UniqueSeparatorOnExplicitShutdown
18281312Di2015UniqueSeparatorOnMainWindowClose
18281312Di2015UniqueSeparatorApplication.MainWindow
18281423Di2015UniqueSeparatorpublic class GrandFatherDi2015NewLine{Di2015NewLine    public virtual void WhoAreYou()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I am a GrandFather");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Father : GrandFatherDi2015NewLine{Di2015NewLine    public new void WhoAreYou()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I am a Father");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Child : FatherDi2015NewLine{Di2015NewLine    public new void WhoAreYou()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I am a Child");            Di2015NewLine    }Di2015NewLine}Di2015NewLine
18281423Di2015UniqueSeparatorChild child = new Child();Di2015NewLine((GrandFather)child).WhoAreYou();Di2015NewLine
18281423Di2015UniqueSeparatornew
18281423Di2015UniqueSeparatorhides the inherited member of base class in derived class
18281475Di2015UniqueSeparatortext-decoration
18281475Di2015UniqueSeparatormyItem.Attributes.Add("style", "text-decoration:underline; color:blue;");Di2015NewLine
18281566Di2015UniqueSeparatorpublic abstract class UserDi2015NewLine{Di2015NewLine//All of the shared properties go hereDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Customer : UserDi2015NewLine{Di2015NewLine//Customer specific propertiesDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Admin : UserDi2015NewLine{Di2015NewLine//Admin specific propertiesDi2015NewLine}Di2015NewLine
18281725Di2015UniqueSeparatorINSERT INTO CARS (CAR_ID, CARNAME)Di2015NewLineSELECT C.CAR_ID, C.CARNAMEDi2015NewLineFROM @CARS CDi2015NewLineLEFT JOIN Cars ON Cars.CAR_ID = C.CAR_IDDi2015NewLineWHERE Cars.Car_ID IS NULL -- the car does not already existDi2015NewLine
18281829Di2015UniqueSeparator    protected override bool ProcessDialogKey(Keys keyData) {Di2015NewLine        switch (keyData) {Di2015NewLine            case Keys.Left:Di2015NewLine                //...Di2015NewLine                return true;Di2015NewLine        }Di2015NewLine        return base.ProcessDialogKey(keyData);Di2015NewLine    }Di2015NewLine
18281870Di2015UniqueSeparatorCREATE PROCEDURE MyTablesUpdate(@TrackingID int, @OrderDate datetime, @CustID int, @CustomerName varchar(250)) Di2015NewLineASDi2015NewLineBEGINDi2015NewLine     UPDATE ORDERS SET OrderDate = @OrderDate WHERE TrackingID = @TrackingID Di2015NewLineDi2015NewLine     UPDATE CUSTOMERS SET CustomerName = @CustomerName WHERE CustID = @CustIDDi2015NewLineENDDi2015NewLine
18281875Di2015UniqueSeparatorvar modelValue = expression.Compile()(htmlHelper.ViewData.Model);Di2015NewLine...Di2015NewLineforeach (var name in names.Where(s => s != modelValue.ToString())Di2015NewLine...Di2015NewLine
18281875Di2015UniqueSeparatorHtmlHelper
18281875Di2015UniqueSeparatorHtmlHelper.ViewData.Model
18281917Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    private IList<HotSpot> hotSpots;Di2015NewLine}Di2015NewLine
18281917Di2015UniqueSeparatorwhere
18281917Di2015UniqueSeparatorpublic class MyClass<T> where T : HotSpotDi2015NewLine{Di2015NewLine    private IList<T> hotSpots;Di2015NewLine}Di2015NewLine
18281971Di2015UniqueSeparatorHeader
18281971Di2015UniqueSeparatorHeader
18281971Di2015UniqueSeparator.ToString()
18281971Di2015UniqueSeparatorHeader
18281971Di2015UniqueSeparatorvar tabToDelete = tabControl.Items.OfType<TabItem>().SingleOrDefault(n => (n.Header as string) == stringValue);Di2015NewLineif (tabToDelete != null)Di2015NewLine    tabControl.Items.Remove(tabToDelete);Di2015NewLine
18281971Di2015UniqueSeparatortabControl.Refresh();Di2015NewLine
18281971Di2015UniqueSeparatorHeader
18281971Di2015UniqueSeparatorToString()
18281971Di2015UniqueSeparatorHeader
18281971Di2015UniqueSeparatornull
18282028Di2015UniqueSeparatorName
18282028Di2015UniqueSeparatorToolStripMenuItem
18282028Di2015UniqueSeparatorToolStripMenuItem t = new ToolStripMenuItem();Di2015NewLineDi2015NewLinet.Name = port; // Set the name of the ToolStripMenuItem to the port.Di2015NewLineDi2015NewLinet.Text = port;Di2015NewLinet.Checked = port == notifier.COMPort;Di2015NewLinet.Click += t_Click;Di2015NewLinesetPortToolStripMenuItem.DropDownItems.Add(t);Di2015NewLine
18282028Di2015UniqueSeparatorContainsKey(s)
18282028Di2015UniqueSeparatorforeach (string s in ports)Di2015NewLine{Di2015NewLine    if (!setPortToolStripMenuItem.DropDownItems.ContainsKey(s))Di2015NewLine    {Di2015NewLine        //....Di2015NewLine    }Di2015NewLine}Di2015NewLine
18282028Di2015UniqueSeparatorstring[] ports = System.IO.Ports.SerialPort.GetPortNames();Di2015NewLineDi2015NewLinevar existingPorts = setPortToolStripMenuItem.DropDownItemsDi2015NewLine    .OfType<ToolStripMenuItem>()Di2015NewLine    .Select(t => t.Text); // Or t.Name if you set that.Di2015NewLineDi2015NewLinevar portsToAdd = ports.Except(existingPorts);Di2015NewLine
18282028Di2015UniqueSeparatorportsToAdd
18282234Di2015UniqueSeparatorFile.ReadAllText(Global.migrationList).Split(',')Di2015NewLine   .Select(x=> Convert.ToInt32(x)).ToList();Di2015NewLine
18282234Di2015UniqueSeparatorfloat
18282234Di2015UniqueSeparatordecimal
18282234Di2015UniqueSeparatordouble
18282234Di2015UniqueSeparatorstring
18282234Di2015UniqueSeparatorstring
18282234Di2015UniqueSeparatorinteger
18282441Di2015UniqueSeparatorXNamespace z = "#RowsetSchema";Di2015NewLineDi2015NewLinevar alerts = xDocument.Descendants(z + "row")Di2015NewLine                    .Select(row => (string)row.Attribute("ows_Alert"))Di2015NewLine                    .ToList();Di2015NewLine
18282445Di2015UniqueSeparatorDataTemplate
18282445Di2015UniqueSeparatorUIElement
18282445Di2015UniqueSeparatorDataTemplate
18282445Di2015UniqueSeparatorObservableCollection<UIElement>
18282445Di2015UniqueSeparatorDataTemplateSelector
18282445Di2015UniqueSeparatorViewModel
18282587Di2015UniqueSeparatorSqlCommand sc = new SqlCommand(string.Format("SELECT doklad FROM netpokl WHERE id_dok='{0}'", newIdentity), spojeni);Di2015NewLineobject obj = sc.ExecuteScalar();Di2015NewLineif(obj == null) ; //Should show some message or throw exceptionDi2015NewLinestring id_dok = obj.ToString().PadRight(20);Di2015NewLine//...Di2015NewLineSqlCommand sc2 = new SqlCommand(string.Format("UPDATE kliplat set doklad=@doklad WHERE id='{0}'",newIdentity), spojeni);Di2015NewLine//...Di2015NewLine
18282587Di2015UniqueSeparatornvarchar(20)
18282614Di2015UniqueSeparatorpublic bool IsRed {get;set;}Di2015NewLineDi2015NewLineDi2015NewLinevoid Ellipse1_Tapped(object sender, etcetera)Di2015NewLine{Di2015NewLine    Ellipse1.Fill = IsRed ? Brushes.Red : Brushes.White;Di2015NewLine    IsRed = !IsRed;Di2015NewLine}Di2015NewLine
18282645Di2015UniqueSeparatorStoryboard
18282645Di2015UniqueSeparatorstoryboard.Children.Add(fadeOut);Di2015NewLine
18282645Di2015UniqueSeparatorFadeOutThemeAnimation
18282645Di2015UniqueSeparatorStoryboard.SetTargetProperty
18282848Di2015UniqueSeparatorpublic class HubDi2015NewLine{Di2015NewLine    private static Lazy<Hub> instance = new Lazy<Hub>(() => new Hub());Di2015NewLineDi2015NewLine    public static Hub Instance { get { return instance.Value; } }Di2015NewLineDi2015NewLine    private Hub()Di2015NewLine    {Di2015NewLine        this.Connection = new HubConnection("http://localhost:58120"); Di2015NewLine        this.Proxy = Connection.CreateHubProxy("AmsHub");Di2015NewLine        this.Proxy.On<string>("receiveServerPush", x => System.Diagnostics.Debug.WriteLine(x));Di2015NewLine        this.Connection.Start().Wait(); Di2015NewLine    }Di2015NewLineDi2015NewLine    public HubConnection Connection { get; private set; }Di2015NewLine    public IHubProxy Proxy { get; private set; }Di2015NewLine}Di2015NewLine
18282848Di2015UniqueSeparatorpublic class TestHandler : IHandleMessages<AMS.Infrastructure.Events.IEvent>Di2015NewLine{Di2015NewLine    public void Handle(AMS.Infrastructure.Events.IEvent message)Di2015NewLine    {Di2015NewLine        Hub.Instance.Proxy.Invoke("ServerFunction", "yodle");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18282848Di2015UniqueSeparatorpublic class HubDi2015NewLine{Di2015NewLine    private static Lazy<Hub> instance = new Lazy<Hub>(() => new Hub());Di2015NewLineDi2015NewLine    public static Hub Instance { get { return instance.Value; } }Di2015NewLineDi2015NewLine    private Hub()Di2015NewLine    {Di2015NewLine        this.Connection = new HubConnection("http://localhost:58120"); Di2015NewLine        this.Proxy = Connection.CreateHubProxy("AmsHub");Di2015NewLine        this.Proxy.On<string>("receiveServerPush", x => System.Diagnostics.Debug.WriteLine(x));Di2015NewLine        this.Connection.Start().Wait(); Di2015NewLine    }Di2015NewLineDi2015NewLine    private HubConnection Connection { get; set; }Di2015NewLine    private IHubProxy Proxy { get; set; }Di2015NewLineDi2015NewLine            public static Task Invoke(string method, params Object[] args)Di2015NewLine            {Di2015NewLine                 return Instance.Proxy.Invoke(method, args);Di2015NewLine            }Di2015NewLineDi2015NewLine            public static Task<T> Invoke<T>(string method, params Object[] args)Di2015NewLine            {Di2015NewLine                 return Instance.Proxy.Invoke<T>(method, args);Di2015NewLine            }Di2015NewLine}Di2015NewLine
18282848Di2015UniqueSeparatorHub.Invoke("ServerFunction", "yodle");
18282853Di2015UniqueSeparatorfor(int i=0; i<10; i++)Di2015NewLine{Di2015NewLine   row = new HtmlTableRow();Di2015NewLine   for(int j=0;j<3;++j)Di2015NewLine   {Di2015NewLine      row.Cells.Add(new HtmlTableCell());Di2015NewLine   }Di2015NewLine   mainTbl.Rows.Add(row);Di2015NewLine}Di2015NewLine
18282998Di2015UniqueSeparatorpublic void TestStuff() Di2015NewLine{Di2015NewLine    string testing = "test";Di2015NewLine    webBrowser2.DocumentCompleted += (s, e) =>Di2015NewLine        {Di2015NewLine            MessageBox.Show(testing);Di2015NewLine        };Di2015NewLine    webBrowser2.Navigate("http://google.com");Di2015NewLine}Di2015NewLine
18283060Di2015UniqueSeparatorDataFormat = DataFormat.Group
18283060Di2015UniqueSeparatorDictionary<string,Dictionary<string,string>>
18283060Di2015UniqueSeparatorKeyValuePair<,>
18283060Di2015UniqueSeparatorDictionary<string,string>
18283060Di2015UniqueSeparator[ProtoContract]Di2015NewLine[ProtoInclude(3, typeof(CustomSourceTableResponse), DataFormat = DataFormat.Group)]Di2015NewLinepublic class CustomBaseResponseDi2015NewLine{Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public bool Success { get; set; }Di2015NewLine    [ProtoMember(2)]Di2015NewLine    public string Error { get; set; }Di2015NewLine}Di2015NewLine[ProtoContract]Di2015NewLinepublic class CustomSourceTableResponse : CustomBaseResponseDi2015NewLine{Di2015NewLine    [ProtoMember(1, DataFormat = DataFormat.Group)]Di2015NewLine    public List<FieldTable> FieldValuesByTableName { get { return fieldValuesByTableName; } }Di2015NewLine    private readonly List<FieldTable> fieldValuesByTableName = new List<FieldTable>();Di2015NewLine}Di2015NewLine[ProtoContract]Di2015NewLinepublic class FieldTableDi2015NewLine{Di2015NewLine    public FieldTable() { }Di2015NewLine    public FieldTable(string tableName)Di2015NewLine    {Di2015NewLine        TableName = tableName;Di2015NewLine    }Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public string TableName { get; set; }Di2015NewLine    [ProtoMember(2, DataFormat = DataFormat.Group)]Di2015NewLine    public List<FieldValue> FieldValues { get { return fieldValues; } }Di2015NewLine    private readonly List<FieldValue> fieldValues = new List<FieldValue>();Di2015NewLine}Di2015NewLine[ProtoContract]Di2015NewLinepublic class FieldValueDi2015NewLine{Di2015NewLine    public FieldValue() { }Di2015NewLine    public FieldValue(string name, string value)Di2015NewLine    {Di2015NewLine        Name = name;Di2015NewLine        Value = value;Di2015NewLine    }Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public string Name { get; set; }Di2015NewLine    [ProtoMember(2)]Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLine
18283060Di2015UniqueSeparatorFieldValue.Name
18283060Di2015UniqueSeparatorclass SomeRow {Di2015NewLine    public int Id {get;set;}Di2015NewLine    public string Name {get;set;}Di2015NewLine    public DateTime DateOfBirth {get;set;}Di2015NewLine}Di2015NewLine
18283060Di2015UniqueSeparator"DateOfBirth"
18283060Di2015UniqueSeparator[ProtoMember(1, AsReference=true)]Di2015NewLinepublic string Name { get; set; }Di2015NewLine[ProtoMember(2)]Di2015NewLinepublic string Value { get; set; }Di2015NewLine
18283090Di2015UniqueSeparatorAllConn
18283090Di2015UniqueSeparatorforeach
18283090Di2015UniqueSeparatorAllConn
18283090Di2015UniqueSeparatorforeach
18283090Di2015UniqueSeparatorprotected string GetAmountStyle()Di2015NewLine{Di2015NewLine    if (AllConn.Any(ProdCurrConn => !Login.Contains(ProdCurrConn.UserName))Di2015NewLine    {Di2015NewLine        if ((Request.Browser.Browser.Contains("IE") == true))Di2015NewLine        {Di2015NewLine            //th1.Attributes.Add("style", "padding-right: 5px;");Di2015NewLine            //return "padding-right: 1px;";Di2015NewLine            return "background-color: #FFFF66;";Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            //th1.Attributes.Add("style", "padding-right: 5px;");Di2015NewLine            return "background-color: #FFFF66;";Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return string.Empty;Di2015NewLine}Di2015NewLine
18283230Di2015UniqueSeparator<source class="video-source" type="video/mp4" src="https://myUrl.cloudfront.net/myKey" />Di2015NewLine
18283339Di2015UniqueSeparatorIsEqualRecord
18283339Di2015UniqueSeparatorExpression<Func<DEntity, bool>>
18283339Di2015UniqueSeparatorvar dbe = dbEntities.Where(MakeEqualityPredicate(me));Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineDi2015NewLineprotected abstract Expression<Func<DEntity, bool>> MakeEqualityPredicate(MEntity m);Di2015NewLine
18283339Di2015UniqueSeparatorMakeEqualityPredicate
18283339Di2015UniqueSeparatorDEntity
18283339Di2015UniqueSeparatorMEntity
18283339Di2015UniqueSeparatorprotected override Expression<Func<DEntity, bool>> MakeEqualityPredicate(MEntity m)Di2015NewLine{Di2015NewLine    return d => d.Id == m.Id;Di2015NewLine}Di2015NewLine
18283450Di2015UniqueSeparatorBundleTable.EnableOptimizations = true;Di2015NewLine
18283479Di2015UniqueSeparator            webBrowser2.DocumentCompleted -= WebBrowserDocumentCompleted;Di2015NewLine            webBrowser2.DocumentCompleted += WebBrowserDocumentCompleted;Di2015NewLine
18283479Di2015UniqueSeparatornew WebBrowserDocumentCompletedEventHandler(WebBrowserDocumentCompleted)
18283479Di2015UniqueSeparator-=
18283479Di2015UniqueSeparator+=
18283479Di2015UniqueSeparatorPortalLogin
18283479Di2015UniqueSeparatorAutoResetEvent
18283479Di2015UniqueSeparatorsignal.WaitOne()
18283479Di2015UniqueSeparatorDocumentCompleted
18283479Di2015UniqueSeparatordocument.getElementById('login')
18283479Di2015UniqueSeparatorsubmit
18283479Di2015UniqueSeparatorInvokeScript
18283479Di2015UniqueSeparator        element.text = "function PortalLogin() { document.getElementById('userid').value = '" + portalEmail + "'; document.getElementById('password').value = '" + portalPassword + "';  }" +Di2015NewLine            "function ExecuteLogin() { document.getElementById('login').submit(); }";Di2015NewLine        head.AppendChild(testScript);Di2015NewLine        webBrowser2.Document.InvokeScript("PortalLogin");Di2015NewLine        // verify document.getElementById('login') hereDi2015NewLine        webBrowser2.Document.InvokeScript("ExecuteLogin");Di2015NewLine
18283479Di2015UniqueSeparatorDocumentCompleted
18283479Di2015UniqueSeparatorDocumentCompleted
18283479Di2015UniqueSeparatorTaskCompletionSource
18283479Di2015UniqueSeparatorasync/await
18283479Di2015UniqueSeparatorMessageBox.Show
18283479Di2015UniqueSeparatorvoid Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var task = DoNavigationAsync();Di2015NewLine    task.ContinueWith((t) =>Di2015NewLine    {Di2015NewLine        MessageBox.Show("Navigation done!");Di2015NewLine    }, TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine}Di2015NewLineDi2015NewLinestruct Void {}; // use an empty struct as parameter to generic TaskCompletionSourceDi2015NewLineDi2015NewLineasync Task DoNavigationAsync()Di2015NewLine{Di2015NewLine    Void v;Di2015NewLine    TaskCompletionSource<Void> tcs = null; Di2015NewLine    WebBrowserDocumentCompletedEventHandler documentComplete = null;Di2015NewLineDi2015NewLine    documentComplete = new WebBrowserDocumentCompletedEventHandler((s, e) =>Di2015NewLine    {Di2015NewLine        // more of DocumentCompleted can possibly be fired due to dynamic navigation inside the web page, we don't want them!Di2015NewLine        this.WB.DocumentCompleted -= documentComplete;              Di2015NewLine        tcs.SetResult(v); // continue from where awaitedDi2015NewLine    });Di2015NewLineDi2015NewLine    // navigate to www.bing.comDi2015NewLine    tcs = new TaskCompletionSource<Void>();Di2015NewLine    this.WB.DocumentCompleted += documentComplete;Di2015NewLine    this.WB.Navigate("http://www.bing.com");Di2015NewLine    await tcs.Task;Di2015NewLine    // do whatever you want with this instance of WB.DocumentDi2015NewLine    MessageBox.Show(this.WB.Document.Url.ToString());Di2015NewLineDi2015NewLine    // navigate to www.google.comDi2015NewLine    tcs = new TaskCompletionSource<Void>();Di2015NewLine    this.WB.DocumentCompleted += documentComplete;Di2015NewLine    this.WB.Navigate("http://www.google.com");Di2015NewLine    await tcs.Task;Di2015NewLine    // do whatever you want with this instance of WB.DocumentDi2015NewLine    MessageBox.Show(this.WB.Document.Url.ToString());Di2015NewLineDi2015NewLine    // navigate to www.yahoo.comDi2015NewLine    tcs = new TaskCompletionSource<Void>();Di2015NewLine    this.WB.DocumentCompleted += documentComplete;Di2015NewLine    this.WB.Navigate("http://www.yahoo.com");Di2015NewLine    await tcs.Task;Di2015NewLine    // do whatever you want with this instance of WB.DocumentDi2015NewLine    MessageBox.Show(this.WB.Document.Url.ToString());Di2015NewLineDi2015NewLine    return;Di2015NewLine}Di2015NewLine
18283570Di2015UniqueSeparatorvolatile
18283570Di2015UniqueSeparatorpublic static volatile int TestVar = 51;Di2015NewLine
18283620Di2015UniqueSeparatorCustomerService
18283620Di2015UniqueSeparatorIRepository<Customer>
18283620Di2015UniqueSeparatorIRepository
18283620Di2015UniqueSeparatorCustomerService.CreateCustomer()
18283620Di2015UniqueSeparatorAssert.Throws<InvalidOperationException>(() => service.CreateCustomer(...));Di2015NewLine
18283662Di2015UniqueSeparatorvoid Session_Start(object sender, EventArgs e) Di2015NewLine{Di2015NewLine    string myself = System.Security.Principal.WindowsIdentity.GetCurrent().Name;Di2015NewLine    string me = User.Identity.Name;Di2015NewLine    Response.Write("myself:" + myself + "<br>me:" + me);Di2015NewLine}Di2015NewLine
18283875Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    pictureBox1.Load("paste some img filepath.jpg");Di2015NewLine}Di2015NewLine
18284054Di2015UniqueSeparator<%@ Register src="WebUserControl2.ascx" tagname="WebUserControl2" tagprefix="uc1" %>Di2015NewLine
18284054Di2015UniqueSeparator <asp:DataList runat="server" ID="DataList1">Di2015NewLine <ItemTemplate>Di2015NewLine     <uc1:WebUserControl2 ID="MyWebUserControl" runat="server" />                Di2015NewLine  </ItemTemplate>Di2015NewLine </asp:DataList>Di2015NewLine
18284054Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Label Label1 = new Label();Di2015NewLineDi2015NewLine    Label1.ID="Label1";Di2015NewLine    Label1.Text = "Please enter info: ";Di2015NewLine    this.Controls.Add(Label1);Di2015NewLineDi2015NewLine    TextBox Textbox1 = new TextBox();Di2015NewLine    Textbox1.ID="Textbox1";Di2015NewLine    this.Controls.Add(Textbox1);Di2015NewLineDi2015NewLineDi2015NewLine    Button Button1 = new Button();Di2015NewLine    Button1.ID = "Button1";Di2015NewLine    Button1.Text = "Submit";Di2015NewLine    this.Controls.Add(Button1);Di2015NewLineDi2015NewLine}Di2015NewLine
18284184Di2015UniqueSeparatorTouchLocation
18284240Di2015UniqueSeparatorRoot
18284240Di2015UniqueSeparatorElement("Users")
18284240Di2015UniqueSeparatorElements
18284240Di2015UniqueSeparatorDescendants
18284240Di2015UniqueSeparatortrans
18284240Di2015UniqueSeparatoritem
18284240Di2015UniqueSeparatoraccts
18284240Di2015UniqueSeparatorvar userAcctInfo =Di2015NewLine    from item in Data.Root.Elements("user")Di2015NewLine    where (string)item.Attribute("usertype") == "Customer" &&Di2015NewLine          (string)item.Attribute("userID") == userIdDi2015NewLine    from accts in item.Elements("account")Di2015NewLine    where (string)accts.Attribute("accounttype") == accountDi2015NewLine    from trans in accts.Elements("trans")Di2015NewLine    select new Transaction((DateTime)trans.Attribute("tranDate"),Di2015NewLine                           (string)trans.Attribute("trantype"),Di2015NewLine                           (decimal)trans.Attribute("tranAmount"),Di2015NewLine                           (decimal)trans.Attribute("tranBalance"));Di2015NewLine
18284254Di2015UniqueSeparator<connectionStrings>Di2015NewLine    <add name="ConnectionString" connectionString="data source=.;Initial Catalog=MyDatabase;Integrated Security=SSPI" providerName="System.Data.SqlClient" />Di2015NewLine</connectionStrings>Di2015NewLine
18284254Di2015UniqueSeparatorSystem.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString
18284254Di2015UniqueSeparatorpublic static bool HasDeposit(int userId)Di2015NewLine{Di2015NewLine    //since executeScalar is intended to retreive only a single valueDi2015NewLine    //from a query, we select the number of results instead of the email addressDi2015NewLine    //of each matching result.Di2015NewLine    const string queryTransaction = "SELECT COUNT(UserID) FROM Transaction WHERE TransactionTypeID = 6 AND UserID = @UserID";Di2015NewLineDi2015NewLine    var constr = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;Di2015NewLineDi2015NewLine    using (var con = new SqlConnection(constr))Di2015NewLine    {Di2015NewLine        using (var cmd = new SqlCommand(queryTransaction, con))Di2015NewLine        {Di2015NewLine            cmd.Parameters.AddWithValue("@UserID", userId);Di2015NewLine            con.Open();Di2015NewLineDi2015NewLine            var result = (int)cmd.ExecuteScalar();Di2015NewLineDi2015NewLine            //returning a boolean comparator works like this :Di2015NewLine            //will return true if the result is greater than zero, but false if it is not.Di2015NewLine            return result > 0;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18284263Di2015UniqueSeparatorfor (int i = 0; i < boxlist.Count; i++)Di2015NewLine{Di2015NewLine    if (player.collisionRect.Intersects(boxlist[i].collisionRect))Di2015NewLine    {Di2015NewLine        ground.Y = boxlist[i].collisionRect.Y;Di2015NewLine        player.setPositionY(0);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        ground.Y = 640;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18284263Di2015UniqueSeparatorground.Y
18284263Di2015UniqueSeparatorbool collided = false;Di2015NewLinefor (int i = 0; i < boxlist.Count; i++)Di2015NewLine{Di2015NewLine    if (player.collisionRect.Intersects(boxlist[i].collisionRect))Di2015NewLine    {Di2015NewLine        ground.Y = boxlist[i].collisionRect.Y;Di2015NewLine        player.setPositionY(0);Di2015NewLine        collided = true;Di2015NewLine        //break; //If you want to only handle one collision you can uncomment thisDi2015NewLine    }Di2015NewLine}Di2015NewLineif (!collided)Di2015NewLine    ground.Y = 640;Di2015NewLine
18284293Di2015UniqueSeparatorUpdateDatabase.UpdateCustomers();
18284293Di2015UniqueSeparatorvar helper = new UpdateDatabase();Di2015NewLinehelper.UpdateCustomers();Di2015NewLine
18284293Di2015UniqueSeparatorpublic static class UpdateDatabase {Di2015NewLine    public static void UpdateDatabase(){}Di2015NewLine}Di2015NewLine
18284354Di2015UniqueSeparatorstring text = textBox1.Text + "hrs, " + Di2015NewLine              textBox2.Text + "min, " + Di2015NewLine              textBox3.Text + "sec.";Di2015NewLineDi2015NewLineif (checkBox1.Checked) text += " Novelty: " + textBox4.Text;Di2015NewLinelistBox1.Items.Add(text);Di2015NewLine
18284376Di2015UniqueSeparatorLazy<T>
18284376Di2015UniqueSeparatorvar myObject = new MyClass()Di2015NewLine{Di2015NewLine    x = new Lazy<string>(() =>Di2015NewLine    {Di2015NewLine        //Do stuff..Di2015NewLine        if (2 + 2 == 5)Di2015NewLine            return "I like cookies";Di2015NewLine        else if (2 + 2 == 3)Di2015NewLine            return "I like muffins";Di2015NewLine        //More conditions...Di2015NewLine        elseDi2015NewLine            return "I'm a bitter old man";Di2015NewLine    }).Value // <-- Evaluate the function hereDi2015NewLine};Di2015NewLine
18284485Di2015UniqueSeparatorDispose()
18284485Di2015UniqueSeparatorGraphics gmp = panelm.CreateGraphics();Di2015NewLine//do workDi2015NewLinegmp.Dispose();Di2015NewLinegmp = panelm.CreateGraphics();Di2015NewLine
18284485Di2015UniqueSeparatorGraphics gmp = panelm.CreateGraphics();Di2015NewLine//do workDi2015NewLinegmp = panelm.CreateGraphics();Di2015NewLine
18284485Di2015UniqueSeparatorDispose()
18284781Di2015UniqueSeparatorMyApp.MyAssemblyWithResources
18284781Di2015UniqueSeparatorMyApp.MyAssemblyWithResources.AffFile
18284781Di2015UniqueSeparatorMyApp.MyAssemblyWithResources.DictFile
18284781Di2015UniqueSeparator// These buffers will receive the content of the embedded resource files.Di2015NewLinebyte[] affFileBytes = null;Di2015NewLinebyte[] dictFileBytes = null;Di2015NewLineDi2015NewLine// We have to load the resource files from the assembly in which they were embedded.Di2015NewLinevar myAssembly = AppDomain.CurrentDomain.GetAssemblies().Where(a => a.FullName.Equals("MyApp.MyAssemblyWithResources")).Single();Di2015NewLineDi2015NewLine// To do so we need to get a stream that allows us to read them.Di2015NewLineusing (var affResourceStream = myAssembly.GetManifestResourceStream("MyApp.MyAssemblyWithResources.AffFile"))Di2015NewLineusing (var dictResourceStream = myAssembly.GetManifestResourceStream("MyApp.MyAssemblyWithResources.DictFile"))Di2015NewLine{Di2015NewLine    // Now we know their size and can allocate room for the buffer.Di2015NewLine    affFileBytes = new byte[affResourceStream.Length];Di2015NewLineDi2015NewLine    // And read them from the resource stream into the buffer.Di2015NewLine    affResourceStream.Read(affFileBytes, 0, affFileBytes.Length);Di2015NewLineDi2015NewLine    // Same thing for the dictionary file.Di2015NewLine    dictFileBytes = new byte[dictResourceStream.Length];Di2015NewLine    dictResourceStream.Read(dictFileBytes, 0, dictFileBytes.Length);Di2015NewLine}Di2015NewLineDi2015NewLine// Now the loaded buffers can be used for the NHunspell instance.Di2015NewLineusing (var hunspell = new Hunspell(affFileBytes, dictFileBytes))Di2015NewLine{Di2015NewLine    // Do stuff with spellin and gramma.Di2015NewLine}Di2015NewLine
18284831Di2015UniqueSeparatorKeyValuePair
18284831Di2015UniqueSeparatorSelect
18284831Di2015UniqueSeparatortopicsDi2015NewLine    .Select(x=> new KeyValuePair<string, double>(x.text, x.textcount))Di2015NewLine    .ToArray();Di2015NewLine
18284920Di2015UniqueSeparatorstartdate
18284920Di2015UniqueSeparatorstring
18284920Di2015UniqueSeparatorParse
18284920Di2015UniqueSeparatorBinding
18284920Di2015UniqueSeparatorBinding bind = new Binding("Value", _ds.Tables["invoice"], "startdate");Di2015NewLinebind.Parse += (s,e) => {Di2015NewLine   e.Value = ((DateTime)e.Value).ToString("yyyy.mm.dd");Di2015NewLine};Di2015NewLinedtStart.DataBindings.Add(bind);Di2015NewLine//Do the same for dtEndDi2015NewLine
18284920Di2015UniqueSeparatorDataGridViewColumn data type
18284920Di2015UniqueSeparatorDateTime
18284920Di2015UniqueSeparatorParsing
18284920Di2015UniqueSeparatordataGridView1.Columns["startdate"].DefaultCellStyle.Format = "yyyy.mm.dd";Di2015NewLine
18284993Di2015UniqueSeparatorGetValue(3)
18284993Di2015UniqueSeparatorstring
18284993Di2015UniqueSeparatorif (string.IsNullOrEmpty(dt.Rows[i].ItemArray.GetValue(3).ToString())) {Di2015NewLine   // hide itDi2015NewLine} else {Di2015NewLine   // show itDi2015NewLine}Di2015NewLine
18285057Di2015UniqueSeparatorusing
18285057Di2015UniqueSeparatorprivate void read1()Di2015NewLine{Di2015NewLine    using (var fs = new FileStream(@"T:\\testfile", FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {Di2015NewLine        using (var tr = new StreamReader(fs)) {Di2015NewLine            string input = null;Di2015NewLine            while ((input = tr.ReadLine()) != null)Di2015NewLine            {Di2015NewLine                if (input.Contains("test"))Di2015NewLine                {Di2015NewLine                    MessageBox.Show(input);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }    Di2015NewLine}Di2015NewLine
18285123Di2015UniqueSeparatorDataTable dt = new DataTable();Di2015NewLinedt.Columns.Add("Date");Di2015NewLinedt.Columns.Add("DateLabel1");Di2015NewLineDi2015NewLineDataRow dr = dt.NewRow();Di2015NewLinedr[0] = date;Di2015NewLinedr[1] = value;Di2015NewLinedt.Rows.Add(dr);Di2015NewLineDi2015NewLinedr = dt.NewRow();Di2015NewLinedr[0] = date1;Di2015NewLinedr[1] = value1;Di2015NewLinedt.Rows.Add(dr);Di2015NewLine
18285187Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data.SqlClient;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    public class PhotoDi2015NewLine    {Di2015NewLine        public Int32 PhotoId { get; set; }Di2015NewLine        public Guid ObjectKey { get; set; }Di2015NewLine        public Int16 Width { get; set; }Di2015NewLine        public Int16 Height { get; set; }Di2015NewLine        public Int32 CategoryId { get; set; }Di2015NewLineDi2015NewLine        public static Photo Load(int id)Di2015NewLine        {Di2015NewLine            using (SqlConnection conn = new SqlConnection("ABC"))Di2015NewLine            {Di2015NewLine                return conn.Get<Photo>(id);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Photo photo = Photo.Load(1);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18285608Di2015UniqueSeparator {Di2015NewLine  tryDi2015NewLine   {Di2015NewLine       if (RemarkTextBox.Text == string.Empty)Di2015NewLine        {Di2015NewLine            BRMessengers.BRInformation(this, "Remarks Cannot Be left Empty.");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        { Di2015NewLine          if (Session["update"].ToString() == ViewState["update"].ToString())Di2015NewLine            {Di2015NewLine                deleteReport(id);Di2015NewLine            }Di2015NewLine       }Di2015NewLine   }Di2015NewLine   catch(Exception)Di2015NewLine   {Di2015NewLine     BrMessanger.BrMessage(this,"server error. Please try again");Di2015NewLine   }Di2015NewLine   finallyDi2015NewLine   {Di2015NewLine      YourGridName.DataSource=loadDetails();Di2015NewLine      YourGridName.DataBind();Di2015NewLine   }Di2015NewLineDi2015NewLine  }Di2015NewLine
18285643Di2015UniqueSeparatorstring myString = "dummy";Di2015NewLinechar x = myString[3];Di2015NewLine
18285643Di2015UniqueSeparatorx
18285643Di2015UniqueSeparatorm
18285643Di2015UniqueSeparatorfor
18285643Di2015UniqueSeparatorchar y;Di2015NewLinefor (int i = 0; i < myString.Length; i ++)Di2015NewLine{Di2015NewLine    y = myString[i];Di2015NewLine}Di2015NewLine
18285643Di2015UniqueSeparatorforeach
18285643Di2015UniqueSeparatorchar
18285643Di2015UniqueSeparatorforeach(char z in myString)Di2015NewLine{Di2015NewLine    // z is already a char so you can just use it here, no need to castDi2015NewLine}Di2015NewLine
18285915Di2015UniqueSeparatorList<int>
18285915Di2015UniqueSeparatorstring
18285940Di2015UniqueSeparator{1}
18285940Di2015UniqueSeparatorString.Format(Di2015NewLine    "//Department[id={0}]/Section[SectionId='{1}']/Room",Di2015NewLine    departmentId,Di2015NewLine    sectionId))Di2015NewLine
18286237Di2015UniqueSeparator\\n
18286237Di2015UniqueSeparator\\n
18286237Di2015UniqueSeparator<br/>
18286241Di2015UniqueSeparatorr=l=1000
18286241Di2015UniqueSeparatorb=t=5000
18286305Di2015UniqueSeparatorActivator.CreateInstance
18286305Di2015UniqueSeparatorType
18286305Di2015UniqueSeparatorpublic static Type GenerateLegacyStructureObject(string libraryName, string className, List<DynamicLibraryProperties> properties)Di2015NewLine{Di2015NewLine    //your codeDi2015NewLine    Type t = legacyBuilder.CreateType(); Di2015NewLine    asmBuilder.Save(library);Di2015NewLine    return t;Di2015NewLine}Di2015NewLine
18286305Di2015UniqueSeparatorType testType = GenerateDynamicClass.GenerateLegacyStructureObject("test", "test", props);Di2015NewLineobject test = Activator.CreateInstance(testType);Di2015NewLine
18286337Di2015UniqueSeparator   [WebMethod]//write [WebMethod]Di2015NewLine   public static string apply()//method must be "pulic static" if it is in aspx pageDi2015NewLine   {Di2015NewLine        return "Hi";Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine $.ajax({Di2015NewLine                type: "POST",Di2015NewLine                contentType: "application/json; charset=utf-8",Di2015NewLine                url: "LeaveSurrender.aspx/apply",Di2015NewLine                dataType: "json",Di2015NewLine                data:'{}',Di2015NewLine                success: function (result) {Di2015NewLine                    alert(result);Di2015NewLine                    // window.location.href = "ClubCreation.aspx";Di2015NewLine                },Di2015NewLine                Error: function () {Di2015NewLine                    alert('error');Di2015NewLine                }Di2015NewLine        });Di2015NewLine
18286454Di2015UniqueSeparatorvar problems = _problemsRepository.GetAll()Di2015NewLine            .Where(p => p.ProblemId == problemId)Di2015NewLine            .Include(p => p.Questions.Select(q => q.Answers))Di2015NewLine            .ToList();Di2015NewLine
18286791Di2015UniqueSeparatorISomeInterface x=new ClassThatImplementsSomeInterface();Di2015NewLine
18286791Di2015UniqueSeparatorClassA
18286791Di2015UniqueSeparatorClassB
18286791Di2015UniqueSeparator ClassB *IS* ClassADi2015NewLine ClassThatImplementsSomeInterface *IS* ISomeInterfaceDi2015NewLine
18286907Di2015UniqueSeparatorif (DR1.HasRows)Di2015NewLine        {Di2015NewLine            while (DR1.Read())Di2015NewLine            {Di2015NewLine                flowLayoutPanel1.Controls.Add(label);Di2015NewLine            }Di2015NewLine        }Di2015NewLineelseDi2015NewLine    MessageBox.Show("No results found")Di2015NewLine
18286923Di2015UniqueSeparatorC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe nomefile.csDi2015NewLine
18286923Di2015UniqueSeparatorC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe nomefile.slnDi2015NewLine
18286923Di2015UniqueSeparatorC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe nomefile.csprojDi2015NewLine
18286923Di2015UniqueSeparator%FrameworkDir%
18286923Di2015UniqueSeparator%FrameworkDir%\\v4.0.30319\\csc.exe ...Di2015NewLineDi2015NewLine%FrameworkDir%\\v4.0.30319\\msbuild.exe ...Di2015NewLine
18287122Di2015UniqueSeparatorvar orderDelegates = new Dictionary<string, LambdaExpression>();Di2015NewLineDi2015NewLineExpression<Func<Image, int>> id = i => i.Id;Di2015NewLineorderDelegates.Add(ContentItem.ORDER_BY_ID, id);Di2015NewLineExpression<Func<Image, IComperable>> title = i => i.Title;Di2015NewLineorderDelegates.Add(ContentItem.ORDER_BY_Title, title);Di2015NewLine//more items...Di2015NewLine
18287122Di2015UniqueSeparatorOrderBy
18287122Di2015UniqueSeparatorvar first = orderDelegates[orderKey ?? defaultKey];Di2015NewLineType firstType = first.GetType().GetGenericArguments()[0].GetGenericArguments()[1];Di2015NewLineDi2015NewLineIOrderedQueryable<T> firstOrder;Di2015NewLineif (firstType == typeof(int))Di2015NewLine    firstOrder = items.OrderBy<T, int>(first, direction);Di2015NewLineelse if (firstType == typeof(bool))Di2015NewLine    firstOrder = items.OrderBy<T, bool>(first, direction);Di2015NewLineelseDi2015NewLine    firstOrder = items.OrderBy<T, IComparable>(first, direction);Di2015NewLineDi2015NewLinevar second = orderDelegates[defaultKey];Di2015NewLineType secondType = second.GetType().GetGenericArguments()[0].GetGenericArguments()[1];Di2015NewLineif (secondType == typeof(int))Di2015NewLine    return firstOrder.ThenBy<T, int>(second, direction);Di2015NewLineelse if (secondType == typeof(bool))Di2015NewLine    return firstOrder.ThenBy<T, bool>(second, direction);Di2015NewLineelseDi2015NewLine    return firstOrder.ThenBy<T, IComparable>(second, direction);Di2015NewLine
18287122Di2015UniqueSeparatorpublic static IOrderedQueryable<T> OrderBy<T, K>(this IQueryable<T> items, LambdaExpression expression, OrderDirection? direction)Di2015NewLine{Di2015NewLine    if (direction == OrderDirection.Ascending || !direction.HasValue)Di2015NewLine        return items.OrderBy(expression as Expression<Func<T, K>>);Di2015NewLine    elseDi2015NewLine        return items.OrderByDescending(expression as Expression<Func<T, K>>);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static IQueryable<T> ThenBy<T, K>(this IOrderedQueryable<T> items, LambdaExpression expression, OrderDirection? direction)Di2015NewLine{Di2015NewLine    if (direction == OrderDirection.Ascending || !direction.HasValue)Di2015NewLine        return items.ThenBy(expression as Expression<Func<T, K>>);Di2015NewLine    elseDi2015NewLine        return items.ThenByDescending(expression as Expression<Func<T, K>>);Di2015NewLine}Di2015NewLine
18287201Di2015UniqueSeparatorIEnumerable
18287201Di2015UniqueSeparatorIEnumerable<Image> items = db.Images.Where(i => i.IsDeleted.Equals(false));Di2015NewLine
18287201Di2015UniqueSeparatorIEnumerable<Image> items = db.Images;Di2015NewLineimages = images.Where(i => !i.IsDeleted);Di2015NewLine
18287201Di2015UniqueSeparatorWhere
18287201Di2015UniqueSeparatorIQueryable
18287201Di2015UniqueSeparatorIEnumerable
18287201Di2015UniqueSeparatorOrderBy
18287201Di2015UniqueSeparatorIQueryable
18287201Di2015UniqueSeparatorExpression<Func<T, K>>
18287201Di2015UniqueSeparatorExpression<Func<T, IComperable>>
18287201Di2015UniqueSeparatorFunc<T, int>
18287201Di2015UniqueSeparatorFunc<T, IComperable>
18287316Di2015UniqueSeparatorToString
18287316Di2015UniqueSeparatorpublic class BrandDi2015NewLine{Di2015NewLine    public int Number { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return Name;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinevoid Method()Di2015NewLine{Di2015NewLine    var brands = new List<Brand>()Di2015NewLine    {Di2015NewLine        new Brand { Number = 1, Name = "a" },Di2015NewLine        new Brand { Number = 2, Name = "b" }Di2015NewLine    };Di2015NewLine    // outputs: a,bDi2015NewLine    Console.WriteLine(string.Join(",", brands));Di2015NewLine}Di2015NewLine
18287316Di2015UniqueSeparatorvar brandsNames = brands.Select(i => i.Name);Di2015NewLinestring joinedNames = string.Join(",", brandsNames);Di2015NewLine
18287316Di2015UniqueSeparatorToString
18287316Di2015UniqueSeparatorpublic static class FormatterDi2015NewLine{Di2015NewLine    public static string GetCommaSeparatedString<T>(IEnumerable<T> input)Di2015NewLine    {Di2015NewLine        return string.Join(",", input);Di2015NewLine    }Di2015NewLine}Di2015NewLine// and thenDi2015NewLinestring brandsStrings = Formatter.GetCommaSeparatedString<Brand>(brands);Di2015NewLine// or justDi2015NewLinestring brandsStrings = Formatter.GetCommaSeparatedString(brands);Di2015NewLine
18287779Di2015UniqueSeparatorpublic static MvcHtmlString ActionLink(Di2015NewLine    this AjaxHelper ajaxHelper,Di2015NewLine    string linkText,Di2015NewLine    string actionName,Di2015NewLine    Object routeValues,Di2015NewLine    AjaxOptions ajaxOptions,Di2015NewLine    Object htmlAttributesDi2015NewLine)Di2015NewLine
18287779Di2015UniqueSeparatornew {class='lnk'}
18287779Di2015UniqueSeparator$(this)
18287779Di2015UniqueSeparator$('.agree').live("click", function(){Di2015NewLine        var currentId2 = $(this).parents(".user").attr('id');Di2015NewLine        alert (currentId2);Di2015NewLine        call the function() you are supposed to call in ActionBeginDi2015NewLineDi2015NewLine});Di2015NewLine
18287779Di2015UniqueSeparatoragree
18287906Di2015UniqueSeparatorCOUNT
18287906Di2015UniqueSeparatorSUM
18287906Di2015UniqueSeparatorSELECTDi2015NewLine    SUM(CASE WHEN status='unpaid' THEN 1 ELSE 0 END) as UnpaidDi2015NewLine,   SUM(CASE WHEN status='paid' THEN 1 ELSE 0 END) as PaidDi2015NewLine,   SUM(CASE WHEN status='finished' THEN 1 ELSE 0 END) as FinishedDi2015NewLineFROM monthlytrackerDi2015NewLineWHERE ... -- the filter conditionDi2015NewLine
18287945Di2015UniqueSeparatorInvalidPluginExecutionException
18287945Di2015UniqueSeparatorInvalidPluginExecutionException
18288056Di2015UniqueSeparatorstring[] tagsToRemove = { "h1", "h2", "h3", h4", "h5", "h6" };Di2015NewLineList<string> tagsToRemoveList = tagsToRemove.ToList();Di2015NewLinedoc.DocumentNode.Descendants()Di2015NewLine    .Where(n => tagsToRemoveList.Contains(n..Name.ToLowerCase()))Di2015NewLine    .ToList()Di2015NewLine    .ForEach(n => n.Remove());Di2015NewLine
18288130Di2015UniqueSeparatorScrollViewer
18288130Di2015UniqueSeparatorFocusable="True"
18288130Di2015UniqueSeparatorScrollViewer
18288130Di2015UniqueSeparatorFocusable="True"
18288130Di2015UniqueSeparatorScrollViewer
18288130Di2015UniqueSeparatorFocusable="False"
18288130Di2015UniqueSeparatorScrollViewer
18288130Di2015UniqueSeparatorFocusVisualStyle
18288130Di2015UniqueSeparatorIsEnabled="False"
18288130Di2015UniqueSeparatore.Handled = true;
18288130Di2015UniqueSeparatorprivate void ScrollViewer_MouseDown(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    e.Handled = true;Di2015NewLineDi2015NewLine    MessageBox.Show("MouseDown!"); // now when you click, it will not be displayedDi2015NewLine}Di2015NewLine
18288219Di2015UniqueSeparator subclasses.Select(a=>a.Subject).AsQueryable();Di2015NewLine
18288230Di2015UniqueSeparatorMyStrongKey.snk
18288230Di2015UniqueSeparatorClassLibrary
18288230Di2015UniqueSeparatorsn -Vr ClassLibrary.dllDi2015NewLine
18288230Di2015UniqueSeparatorClassLibrary
18288230Di2015UniqueSeparatorsn -T ClassLibrary.dllDi2015NewLine
18288230Di2015UniqueSeparatorMicrosoft (R) .NET Framework Strong Name Utility Version 2.0.50727.42Di2015NewLineCopyright (c) Microsoft Corporation. All rights reserved. Public keyDi2015NewLinetoken is b03f5f7f11d50a3aDi2015NewLine
18288230Di2015UniqueSeparatorsn -Vr *,b03f5f7f11d50a3aDi2015NewLine
18288369Di2015UniqueSeparatorbool strarrayContainsX = Array.IndexOf<string>(strarray, "X") >= 0;Di2015NewLine
18288369Di2015UniqueSeparatorHashSet<string> strset = new HashSet<string>(strarray);Di2015NewLinebool strsetContainsX = strset.Contains("X");Di2015NewLine
18288369Di2015UniqueSeparatorvar k = objlist.Where(u => strset.Contains(u.somecol)).ToList();Di2015NewLine
18288410Di2015UniqueSeparator<asp:Timer ID="Timer2" runat="server" ontick="Timer2_Tick" Di2015NewLine            Interval="600000">Di2015NewLine        </asp:Timer>Di2015NewLine
18288410Di2015UniqueSeparatorprotected void Timer2_Tick(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            if (timeLeft > 0)Di2015NewLine            {Di2015NewLine                // Display the new time left Di2015NewLine                // by updating the Time Left label.Di2015NewLine                timeLeft = timeLeft - 1;Di2015NewLine                Label1.Text = timeLeft + " seconds";Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // If the user ran out of time, stop the timer, show Di2015NewLine                // a MessageBox, and fill in the answers.Di2015NewLine                Timer2.Enabled = false;Di2015NewLine                Label1.Text = "Time's up!";Di2015NewLine                MessageBox.Show("You didn't finish in time.", "Sorry");Di2015NewLineDi2015NewLine                Butnupdate.Enabled = false;Di2015NewLine            }Di2015NewLine
18288410Di2015UniqueSeparatortimeLeft = 600;Di2015NewLine                    Label1.Text = DateTime.Now.ToString("HH:mm:ss tt");Di2015NewLine                    Timer2.Enabled = true;Di2015NewLine
18288410Di2015UniqueSeparatorLabel1.Text = DateTime.Now.ToString("HH:mm:ss tt");Di2015NewLine
18288481Di2015UniqueSeparatorBackgroundWorker
18288481Di2015UniqueSeparatorBackgroundWorker bg = new BackgroundWorker();Di2015NewLinebg.DoWork += new DoWorkEventHandler(getExternalIPv4Back);Di2015NewLinebg.RunWorkerCompleted += new RunWorkerCompletedEventHandler(writeLabel);Di2015NewLinebg.RunWorkerAsync();Di2015NewLine//The code below this point will be executed while the BackgroundWorker does its workDi2015NewLine
18288481Di2015UniqueSeparatorgetExternalIPv4Back
18288481Di2015UniqueSeparatorDoWork Event Method
18288481Di2015UniqueSeparatorwriteLabel
18288481Di2015UniqueSeparatorRunWorkerCompleted Event
18288481Di2015UniqueSeparatorprivate void getExternalIPv4Back(object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    IP = "External IPv4: " + getExternalIPv4(); //IP -> Globally defined variableDi2015NewLine}Di2015NewLineDi2015NewLineprivate void writeLabel(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine{Di2015NewLine Â  lblIP4external.Text = IP;Di2015NewLine}Di2015NewLine
18288820Di2015UniqueSeparatorclass P { static void Main() { System.Console.WriteLine("Hello World"); } }Di2015NewLine
18288820Di2015UniqueSeparator%Frameworkdir%\\v4.0.30319\\csc.exe hello.csDi2015NewLine
18288820Di2015UniqueSeparatorAssemblyInfo.cs
18288851Di2015UniqueSeparatorPublic Class ExcelReaderDi2015NewLine    Public Event DataTableLoaded(ByVal dt As DataTable)Di2015NewLine    .......Di2015NewLineDi2015NewLine        Using cn = New System.Data.OleDb.OleDbConnection("provider=Microsoft.ACE.12.0;.......")Di2015NewLine        Using cmd = New System.Data.OleDb.OleDbDataAdapter("select * from [Sheet1$]", cn)Di2015NewLine            cn.Open()Di2015NewLine            cmd.Fill(DT)Di2015NewLine            RaiseEvent DataTableLoaded(DT)Di2015NewLine        End UsingDi2015NewLine        End UsingDi2015NewLine    ....Di2015NewLineEnd ClassDi2015NewLine
18288851Di2015UniqueSeparatorPublic Dim WithEvents readerTableFromExcel = New ExcelReader()Di2015NewLine
18288851Di2015UniqueSeparatorPublic Sub DataTableFromExcel(ByVal dt As System.Data.DataTable) _Di2015NewLine           Handles readerTableFromExcel.DataTableLoadedDi2015NewLine    MsgBox("Table loaded")Di2015NewLineEnd SubDi2015NewLine
18289119Di2015UniqueSeparatorBitmap bmp = new Bitmap(300, 300);Di2015NewLine        using (Graphics g = Graphics.FromImage(bmp))Di2015NewLine        {Di2015NewLine            Font font = new Font("Arial", 20, FontStyle.Bold, GraphicsUnit.Point);Di2015NewLine            g.Clear(Color.White);Di2015NewLine            g.DrawString("Hello", font, Brushes.Black, 0, 0);Di2015NewLine        }Di2015NewLine        System.Drawing.Imaging.BitmapData bmpData = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), System.Drawing.Imaging.ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format1bppIndexed);Di2015NewLine        Bitmap newBitmap = new Bitmap(300, 300, bmpData.Stride, System.Drawing.Imaging.PixelFormat.Format1bppIndexed, bmpData.Scan0);Di2015NewLine        newBitmap.Save(@"c:\\x\\x.bmp");Di2015NewLine
18289160Di2015UniqueSeparatorAnimals[] animals=animalsService.GetAnimals();Di2015NewLine
18289160Di2015UniqueSeparatorList<Animals> animals = animalsService.GetAnimals();Di2015NewLine
18289160Di2015UniqueSeparatorList<Animals> animals=animalsService.GetRequiredAnimals(requiredAnimals);Di2015NewLine
18289246Di2015UniqueSeparator  if (!System.IO.File.Exists(@"C:\\test2.xls"))Di2015NewLine  {Di2015NewLine   xlWorkBook.SaveAs(@"c:\\test2.xls"); Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLineDi2015NewLine   xlWorkBook.SaveAs(@"c:\\test2(Copy).xls"); Di2015NewLineDi2015NewLine  }  Di2015NewLine
18289246Di2015UniqueSeparator   Microsoft.Office.Interop.Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();Di2015NewLineDi2015NewLine  excel.DisplayAlerts = false;Di2015NewLineDi2015NewLine  excelSheePrint.SaveAs(filename, Microsoft.Office.Interop.Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, true, false, XlSaveAsAccessMode.xlNoChange, XlSaveConflictResolution.xlLocalSessionChanges, Type.Missing, Type.Missing);Di2015NewLine
18289312Di2015UniqueSeparatorTResult[,]
18289312Di2015UniqueSeparatorpublic static class EnumerableDi2015NewLine{Di2015NewLine    public static TResult[,] ToRectangularArray<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult[]> selector)Di2015NewLine    {Di2015NewLine        // check if source is nullDi2015NewLine        if (source == null)Di2015NewLine            throw new ArgumentNullException("source");Di2015NewLineDi2015NewLine        // load all items from source and pass it through selector delegateDi2015NewLine        var items = source.Select(x => selector(x)).ToArray();Di2015NewLineDi2015NewLine        // check if we have any items to insert into rectangular arrayDi2015NewLine        if (items.Length == 0)Di2015NewLine            return new TResult[0, 0];Di2015NewLineDi2015NewLine        // create rectangular arrayDi2015NewLine        var width = items[0].Length;Di2015NewLine        var result = new TResult[items.Length, width];Di2015NewLine        TResult[] item;Di2015NewLineDi2015NewLine        for (int i = 0; i < items.Length; i++)Di2015NewLine        {Di2015NewLine            item = items[i];Di2015NewLineDi2015NewLine            // item has different width then first elementDi2015NewLine            if (item.Length != width)Di2015NewLine                throw new ArgumentException("TResult[] returned by selector has to have the same length for all source collection items.", "selector");Di2015NewLineDi2015NewLine            for (int j = 0; j < width; j++)Di2015NewLine                result[i, j] = item[j];Di2015NewLine        }Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18289312Di2015UniqueSeparatorTResult[][]
18289312Di2015UniqueSeparatorstring[,] array = _table.Where(x => x.IsDeleted == false)Di2015NewLine                        .ToRectangularArray(x => new string[] { x.Name, x.Street });Di2015NewLine
18289614Di2015UniqueSeparatorFor i = 0 To dt.Rows.Count - 1Di2015NewLine    flag = TrueDi2015NewLineDi2015NewLine    For j = 0 To dt.Columns.Count - 1Di2015NewLine        If Not(dt.Rows(i).IsNull(j)) AndAlso dt.Rows(i)(j).ToString() <> "" ThenDi2015NewLine            flag = FalseDi2015NewLine            Exit ForDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLineDi2015NewLine    If flag Then dt.Rows(i).Delete()Di2015NewLineNextDi2015NewLineDi2015NewLinedt.AcceptChanges()Di2015NewLine
18289614Di2015UniqueSeparatorFor i = 0 To dt.Columns.Count - 1Di2015NewLine    flag = TrueDi2015NewLineDi2015NewLine    For j = 0 To dt.Rows.Count - 1Di2015NewLine        If Not(dt.Rows(j).IsNull(i)) AndAlso dt.Rows(j)(i).ToString() <> "" ThenDi2015NewLine            flag = FalseDi2015NewLine            Exit ForDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLineDi2015NewLine    If flag Then dt.Columns.RemoveAt(i)Di2015NewLineNextDi2015NewLineDi2015NewLinedt.AcceptChanges()Di2015NewLine
18289836Di2015UniqueSeparatorpowershell.Invoke().First().Members
18289836Di2015UniqueSeparator static void Main(string[] args)Di2015NewLine    {Di2015NewLine        //var scriptText = "Get-Process | Select *";Di2015NewLine        //var scriptText = "Get-Service";Di2015NewLine        var scriptText = "Get-Service | Select ServiceName, Status";Di2015NewLine        PowerShell powershell = PowerShell.Create();Di2015NewLine        powershell.Runspace = RunspaceFactory.CreateRunspace();Di2015NewLine        powershell.Runspace.Open();Di2015NewLine        powershell.AddScript(scriptText);Di2015NewLineDi2015NewLine        Dictionary<string, object> dictprop = new Dictionary<string, object>();Di2015NewLineDi2015NewLine        foreach (PSMemberInfo item in powershell.Invoke().First().Members)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                dictprop.Add(item.Name, item.Value);Di2015NewLine                Console.WriteLine("Name = {0}, Value = {1}", item.Name, item.Value);Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                //Null Value invocation exception.Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLine
18289865Di2015UniqueSeparatorclass ButtonList : ContainerControlDi2015NewLine{Di2015NewLine    // ...Di2015NewLineDi2015NewLine    public ButtonListItemCollection Items { get; private set; }Di2015NewLineDi2015NewLine    protected override void OnPaint(PaintEventArgs pe)Di2015NewLine    {Di2015NewLine        if (this.Site.DesignMode)Di2015NewLine        {Di2015NewLine            this.Items.RemoveAll(x => !this.Controls.Contains(x));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
18289966Di2015UniqueSeparatorGROUP BY
18289966Di2015UniqueSeparatorSELECT
18289966Di2015UniqueSeparatorSELECT i.product, Sum(i.amount) AS SumOfamountDi2015NewLineFROM Invoices_Items AS iDi2015NewLineGROUP BY i.product;Di2015NewLine
18289966Di2015UniqueSeparatorInvoices_Items
18289966Di2015UniqueSeparatorSELECTDi2015NewLine    (Di2015NewLine        SELECT Count(*)Di2015NewLine        FROM qryInvoices_Items1 AS q2Di2015NewLine        WHERE q2.product <= q1.productDi2015NewLine    ) AS row_number,Di2015NewLine    q1.product,Di2015NewLine    q1.SumOfamountDi2015NewLineFROM qryInvoices_Items1 AS q1;Di2015NewLine
18289966Di2015UniqueSeparatorInvoices_Items
18290034Di2015UniqueSeparatorDataGridRow
18290034Di2015UniqueSeparatorStyle
18290034Di2015UniqueSeparator<Style TargetType="DataGridRow" x:Key="MyRowStyle">Di2015NewLine    <!-- Define Triggers -->Di2015NewLine</Style>Di2015NewLine
18290034Di2015UniqueSeparatorStyle
18290034Di2015UniqueSeparatornull
18290034Di2015UniqueSeparatorStyle
18290034Di2015UniqueSeparatordataGrid.RowStyle = _boolCondition ? this.FindResource("MyRowStyle") as Style : null;Di2015NewLine
18290644Di2015UniqueSeparatorSearchInvoiceAdminAsync
18290644Di2015UniqueSeparator        private async Task ProcessSearchAsync()Di2015NewLine        {Di2015NewLineDi2015NewLine            Data.SeekWCF seekWcf = new Data.SeekWCF();Di2015NewLine            _ds = await seekWcf.SearchInvoiceAdminAsync(new Guid(cboEmployer.Value.ToString()), new Guid(cboGroup.Value.ToString()), txtSearchInvoiceNumber.Text, chkSearchLike.Checked, txtSearchFolio.Text, Convert.ToInt32(txtYear.Value));Di2015NewLine            seekWcf.Dispose();Di2015NewLine        }Di2015NewLine
18290644Di2015UniqueSeparator// UI ThreadDi2015NewLineDi2015NewLineTask _pendingTask = null;Di2015NewLineDi2015NewLinevoid button_click()Di2015NewLine{Di2015NewLine    if ( _pendingTask != null)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Still working!");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        _pendingTask = ProcessSearchAsync();Di2015NewLineDi2015NewLineDi2015NewLine        _pendingTask.ContinueWith((t) =>Di2015NewLine        {Di2015NewLine            MessageBox.Show("Task is done!");Di2015NewLine            // check _pendingTask.IsFaulted hereDi2015NewLine            _pendingTask = null;Di2015NewLine        }, TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine    }Di2015NewLine}Di2015NewLine
18290644Di2015UniqueSeparatorTaskScheduler
18290644Di2015UniqueSeparatorContinueWith
18290644Di2015UniqueSeparatorcontinuationAction
18290675Di2015UniqueSeparatorexec someInsertProc 123, 'ABC', out @idDi2015NewLine
18290675Di2015UniqueSeparatorint i;Di2015NewLineif(int.TryParse(s, out i)) {Di2015NewLine
18290688Di2015UniqueSeparator_container.RegisterType<Music>(new InjectionConstructor(Di2015NewLine    new Album("Non-singleton", "Non-singleton")));Di2015NewLine
18290688Di2015UniqueSeparatorMusic
18290688Di2015UniqueSeparatorAlbum
18290688Di2015UniqueSeparatornew Album("Non-singleton", "Non-singleton")
18290688Di2015UniqueSeparatorMusic(Album album)
18290688Di2015UniqueSeparatorMusic
18290688Di2015UniqueSeparator_container.RegisterType<Music>(new ContainerControlledLifetimeManager());Di2015NewLine
18290688Di2015UniqueSeparatorMusic
18290688Di2015UniqueSeparatorunityContainer.RegisterType<Music>(new InjectionConstructor(new Album("Non-singleton", "Non-singleton")));Di2015NewLineDi2015NewLineunityContainer.RegisterType<Music>(new ContainerControlledLifetimeManager());Di2015NewLineDi2015NewLinevar music = unityContainer.Resolve<Music>();Di2015NewLinevar music2 = unityContainer.Resolve<Music>();Di2015NewLineDi2015NewLinebool areEqual = ReferenceEquals(music, music2);Di2015NewLine
18290688Di2015UniqueSeparator// Named registrationDi2015NewLineunityContainer.RegisterType<Music>("NonSingleton Name",Di2015NewLine    new InjectionConstructor(new Album("Non-singleton", "Non-singleton")));Di2015NewLineDi2015NewLine// Default (null) registrationDi2015NewLineunityContainer.RegisterType<Music>(new ContainerControlledLifetimeManager());Di2015NewLine
18290688Di2015UniqueSeparatorunityContainer.RegisterType<Music>(new InjectionConstructor(Di2015NewLine    new Album("Non-singleton", "Non-singleton")));Di2015NewLineDi2015NewLineunityContainer.RegisterType<Music>(new ContainerControlledLifetimeManager(),Di2015NewLine    new InjectionConstructor(new Album("singleton", "singleton")));Di2015NewLine
18290688Di2015UniqueSeparatorunityContainer.RegisterType<Music>(new InjectionConstructor(Di2015NewLine    new Album("Non-singleton", "Non-singleton")));Di2015NewLineDi2015NewLineunityContainer.RegisterType<Music>(new ContainerControlledLifetimeManager(),Di2015NewLine    new ClearInjectionConstructor());Di2015NewLineDi2015NewLinepublic class ClearInjectionConstructor : InjectionMemberDi2015NewLine{Di2015NewLine    public override void AddPolicies(Type serviceType, Di2015NewLine        Type implementationType, Di2015NewLine        string name, Di2015NewLine        Microsoft.Practices.ObjectBuilder2.IPolicyList policies)Di2015NewLine    {Di2015NewLine        policies.Clear<IConstructorSelectorPolicy>(Di2015NewLine            new NamedTypeBuildKey(implementationType, name));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18290801Di2015UniqueSeparatorwhere <TypeParam> : <Constraint1>,<Constraint2>, etc..
18290826Di2015UniqueSeparatorHTML Helpers
18290826Di2015UniqueSeparator@Html.EditorFor(m => m.CommentContent);Di2015NewLine
18290826Di2015UniqueSeparatorCommentContent
18290826Di2015UniqueSeparatorPOSTED
18290826Di2015UniqueSeparatorAJAX
18290826Di2015UniqueSeparator @Html.TextBoxFor(m => m.CommentContent, new { @class = "form-control" });Di2015NewLine
18290826Di2015UniqueSeparatortext
18290826Di2015UniqueSeparatorCSS
18290826Di2015UniqueSeparatorform-control
18291019Di2015UniqueSeparatorMemberStateModel
18291035Di2015UniqueSeparatorconst
18291035Di2015UniqueSeparatorreadonly
18291035Di2015UniqueSeparatorpublic class SemaphoreDi2015NewLine{Di2015NewLine    public static int Red = 0;Di2015NewLine    public static int Yellow = 1;Di2015NewLine    public static int Green = 2;Di2015NewLine}Di2015NewLineDi2015NewLineclass TransitDi2015NewLine{Di2015NewLine    readonly int Red = Semaphore.Red;Di2015NewLine}Di2015NewLine
18291065Di2015UniqueSeparatorGetVenues
18291065Di2015UniqueSeparatorGetVenuesByLocation(string search)
18291065Di2015UniqueSeparatorVenue
18291065Di2015UniqueSeparatorabstract
18291158Di2015UniqueSeparatorprivate bool isSearching = false;Di2015NewLineDi2015NewLineprivate void btnSearch_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (isSearching)Di2015NewLine        return;Di2015NewLine    // shows loading animationDi2015NewLine    ShowPleaseWait(Translate("Searching data. Please wait..."));Di2015NewLine    ProcessSearch();Di2015NewLine}Di2015NewLineDi2015NewLineprivate async void ProcessSearch()Di2015NewLine{Di2015NewLine    isSearching = true;Di2015NewLineDi2015NewLine    // do other stuffDi2015NewLineDi2015NewLine    isSearching = false;Di2015NewLine}Di2015NewLine
18291158Di2015UniqueSeparatorlock
18291158Di2015UniqueSeparatorprivate bool isSearching = false;Di2015NewLineprivate object lockObj = new object();Di2015NewLineDi2015NewLineprivate void btnSearch_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    lock (lockObj)Di2015NewLine    {Di2015NewLine        if (isSearching)Di2015NewLine            return;Di2015NewLine        elseDi2015NewLine            isSearching = true;Di2015NewLine    }Di2015NewLine    // shows loading animationDi2015NewLine    ShowPleaseWait(Translate("Searching data. Please wait..."));Di2015NewLine    ProcessSearch();Di2015NewLine}Di2015NewLineDi2015NewLineprivate async void ProcessSearch()Di2015NewLine{Di2015NewLine    // do other stuffDi2015NewLineDi2015NewLine    isSearching = false;Di2015NewLine}Di2015NewLine
18291165Di2015UniqueSeparator                DataRow row = dataTable.NewRow();Di2015NewLineDi2015NewLine                string barcode = "*" + ID.ToString() + VALOR_VENDA.Value.ToString() + "*";Di2015NewLineDi2015NewLine                row["nome"] = NOME_PRODUTO;Di2015NewLine                row["preco"] = VALOR_VENDA.Value;Di2015NewLineDi2015NewLine                int w = barcode.Length * 40;Di2015NewLine                Bitmap oBitmap = new Bitmap(w, 100);Di2015NewLine                Graphics oGraphics = Graphics.FromImage(oBitmap);Di2015NewLine                Font oFont = new Font("IDAutomationHC39M", 18);Di2015NewLine                PointF oPoint = new PointF(2f, 2f);Di2015NewLine                SolidBrush oBrushWrite = new SolidBrush(Color.Black);Di2015NewLine                SolidBrush oBrush = new SolidBrush(Color.White);Di2015NewLine                oGraphics.FillRectangle(oBrush, 0, 0, w, 100);Di2015NewLine                oGraphics.DrawString(barcode, oFont, oBrushWrite, oPoint);Di2015NewLine
18291165Di2015UniqueSeparator                using (MemoryStream ms = new MemoryStream())Di2015NewLine                {Di2015NewLine                    oBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);Di2015NewLine                    byte[] byteImage = ms.ToArray();Di2015NewLine                    row["barcode"] = byteImage;Di2015NewLine                }Di2015NewLine                dataTable.Rows.Add(row);Di2015NewLine
18291182Di2015UniqueSeparator<asp:TextBox ID="date" runat="server" />Di2015NewLine    <asp:ScriptManager ID="Manager" runat="server" />Di2015NewLine    <script type="text/javascript">Di2015NewLine        function pageLoaded()Di2015NewLine        {Di2015NewLine            var textBox = document.getElementById( '<% =date.ClientID %>' );Di2015NewLine            var submitButton = document.getElementById( '<% =submit.ClientID %>' );Di2015NewLine            textBox.onchange = function ()Di2015NewLine            {Di2015NewLine                submitButton.disabled = true;Di2015NewLine            };Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        var prm = Sys.WebForms.PageRequestManager.getInstance();Di2015NewLine        prm.add_pageLoaded( pageLoaded );Di2015NewLine    </script>Di2015NewLine    <asp:UpdatePanel ID="setDate" runat="server" UpdateMode="Conditional" ChildrenAsTriggers="true">Di2015NewLine        <ContentTemplate>Di2015NewLine             <asp:Label ID="checkRes" runat="server" /> <asp:Label ID="range" runat="server" /><br />Di2015NewLine            <asp:ImageButton ID="check" runat="server" ImageUrl="http://static.adzerk.net/Advertisers/d18eea9d28f3490b8dcbfa9e38f8336e.jpg"Di2015NewLine                OnClick="check_Click" CausesValidation="false" UseSubmitBehavior="false" />Di2015NewLine            <br />Di2015NewLine            <asp:Button ID="submit" runat="server" Text="Submit" CausesValidation="true" Enabled="false" />Di2015NewLineDi2015NewLine            <asp:UpdateProgress ID="UpdateProgress1" runat="server" AssociatedUpdatePanelID="setDate">Di2015NewLine                <ProgressTemplate>Di2015NewLine                    <asp:Image ID="loader" runat="server" ImageUrl="~/img/loader.gif" />Di2015NewLine                </ProgressTemplate>Di2015NewLine            </asp:UpdateProgress>Di2015NewLine        </ContentTemplate>Di2015NewLine        <Triggers>Di2015NewLine            <asp:AsyncPostBackTrigger ControlID="check" EventName="Click" />Di2015NewLine        </Triggers>Di2015NewLine    </asp:UpdatePanel>Di2015NewLine
18291250Di2015UniqueSeparatorstatic class DefaultResourceManagerDi2015NewLine{Di2015NewLine    private static ContentManager Manager;Di2015NewLineDi2015NewLine    public static void Initialize(ContentManager manager)Di2015NewLine    {Di2015NewLine         Manager = manager;Di2015NewLineDi2015NewLine         // Load resources and export them as public properties / methodsDi2015NewLine    }Di2015NewLine}Di2015NewLine
18291250Di2015UniqueSeparatorclass MyAwesomeGame : GameDi2015NewLine{Di2015NewLine    public override void LoadContent()Di2015NewLine    {Di2015NewLine        DefaultResourceManager.Initialize(this.content);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18291250Di2015UniqueSeparatorclass DefaultResourceManagerDi2015NewLine{Di2015NewLine    private ContentManager manager;Di2015NewLineDi2015NewLine    public DefaultResourceManager(ContentManager manager)Di2015NewLine    {Di2015NewLine        this.manager = manager;     Di2015NewLine        // Load resources and export them as public properties / methodsDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyAwesomeGame : GameDi2015NewLine{Di2015NewLine    private DefaultResourceManager manager;Di2015NewLineDi2015NewLine    public override void LoadContent()Di2015NewLine    {Di2015NewLine        this.manager = new DefaultResourceManager(this.content);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18291295Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Net;Di2015NewLineusing System.Net.Sockets;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace tcpsocks5Di2015NewLine{Di2015NewLine  static class ProgramDi2015NewLine  {Di2015NewLine    static void ReadAll(this NetworkStream stream, byte[] buffer, int offset, int size)Di2015NewLine    {Di2015NewLine      while (size != 0) {Di2015NewLine        var read = stream.Read(buffer, offset, size);Di2015NewLine        if (read < 0) {Di2015NewLine          throw new IOException("Premature end");Di2015NewLine        }Di2015NewLine        size -= read;Di2015NewLine        offset += read;Di2015NewLine      }Di2015NewLine    }Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine      using (var client = new TcpClient()) {Di2015NewLine        client.Connect(ip, port); // Provide IP, Port yourselfDi2015NewLine        using (var stream = client.GetStream()) {Di2015NewLine          // AuthDi2015NewLine          var buf = new byte[300];Di2015NewLine          buf[0] = 0x05; // VersionDi2015NewLine          buf[1] = 0x01; // NMETHODSDi2015NewLine          buf[2] = 0x00; // No auth-methodDi2015NewLine          stream.Write(buf, 0, 3);Di2015NewLineDi2015NewLine          stream.ReadAll(buf, 0, 2);Di2015NewLine          if (buf[0] != 0x05) {Di2015NewLine            throw new IOException("Invalid Socks Version");Di2015NewLine          }Di2015NewLine          if (buf[1] == 0xff) {Di2015NewLine            throw new IOException("Socks Server does not support no-auth");Di2015NewLine          }Di2015NewLine          if (buf[1] != 0x00) {Di2015NewLine            throw new Exception("Socks Server did choose bogus auth");Di2015NewLine          }Di2015NewLineDi2015NewLine          // RequestDi2015NewLine          buf[0] = 0x05; // VersionDi2015NewLine          buf[1] = 0x01; // Connect (TCP)Di2015NewLine          buf[2] = 0x00; // ReservedDi2015NewLine          buf[3] = 0x03; // Dest.Addr: Domain nameDi2015NewLine          var domain = Encoding.ASCII.GetBytes("google.com");Di2015NewLine          buf[4] = (byte)domain.Length; // Domain name length (octet)Di2015NewLine          Array.Copy(domain, 0, buf, 5, domain.Length);Di2015NewLine          var port = BitConverter.GetBytes(Di2015NewLine            IPAddress.HostToNetworkOrder((short)80));Di2015NewLine          buf[5 + domain.Length] = port[0];Di2015NewLine          buf[6 + domain.Length] = port[1];Di2015NewLine          stream.Write(buf, 0, domain.Length + 7);Di2015NewLineDi2015NewLine          // ReplyDi2015NewLine          stream.ReadAll(buf, 0, 4);Di2015NewLine          if (buf[0] != 0x05) {Di2015NewLine            throw new IOException("Invalid Socks Version");Di2015NewLine          }Di2015NewLine          if (buf[1] != 0x00) {Di2015NewLine            throw new IOException(string.Format("Socks Error {0:X}", buf[1]));Di2015NewLine          }Di2015NewLine          var rdest = string.Empty;Di2015NewLine          switch (buf[3]) {Di2015NewLine            case 0x01: // IPv4Di2015NewLine              stream.ReadAll(buf, 0, 4);Di2015NewLine              var v4 = BitConverter.ToUInt32(buf, 0);Di2015NewLine              rdest = new IPAddress(v4).ToString();Di2015NewLine              break;Di2015NewLine            case 0x03: // Domain nameDi2015NewLine              stream.ReadAll(buf, 0, 1);Di2015NewLine              if (buf[0] == 0xff) {Di2015NewLine                throw new IOException("Invalid Domain Name");Di2015NewLine              }Di2015NewLine              stream.ReadAll(buf, 1, buf[0]);Di2015NewLine              rdest = Encoding.ASCII.GetString(buf, 1, buf[0]);Di2015NewLine              break;Di2015NewLine            case 0x04: // IPv6Di2015NewLine              var octets = new byte[16];Di2015NewLine              stream.ReadAll(octets, 0, 16);Di2015NewLine              rdest = new IPAddress(octets).ToString();Di2015NewLine              break;Di2015NewLine            default:Di2015NewLine              throw new IOException("Invalid Address type");Di2015NewLine          }Di2015NewLine          stream.ReadAll(buf, 0, 2);Di2015NewLine          var rport = (ushort)IPAddress.NetworkToHostOrder((short)BitConverter.ToUInt16(buf, 0));Di2015NewLine          Console.WriteLine("Connected via {0}:{1}", rdest, rport);Di2015NewLineDi2015NewLine          // Make an HTTP request, aka. "do stuff ..."Di2015NewLine          using (var writer = new StreamWriter(stream)) {Di2015NewLine            writer.Write("GET / HTTP/1.1\\r\\nHost: google.com\\r\\n\\r\\n");Di2015NewLine            writer.Flush();Di2015NewLine            using (var reader = new StreamReader(stream)) {Di2015NewLine              while (true) {Di2015NewLine                var line = reader.ReadLine();Di2015NewLine                if (string.IsNullOrEmpty(line)) {Di2015NewLine                  break;Di2015NewLine                }Di2015NewLine              }Di2015NewLine            }Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
18291407Di2015UniqueSeparatorclass InvoiceItemDi2015NewLine{Di2015NewLine    public string ItemName { get; set; }Di2015NewLine    public List<InvoiceOption> Options { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass InvoiceOptionDi2015NewLine{Di2015NewLine    public string OptionName { get; set; }Di2015NewLine}Di2015NewLine
18291407Di2015UniqueSeparator<ListView x:Name="temsReceipt" ItemsSource="{Binding}">Di2015NewLine    <ListView.Resources>Di2015NewLine        <Style TargetType="ListViewItem">Di2015NewLine            <Setter Property="HorizontalContentAlignment" Value="Stretch" />Di2015NewLine        </Style>Di2015NewLine    </ListView.Resources>Di2015NewLine    <ListView.View>Di2015NewLine        <GridView>Di2015NewLine            <GridViewColumn>Di2015NewLine                <GridViewColumn.CellTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <TextBlock Height="40" Width="50"></TextBlock>Di2015NewLine                    </DataTemplate>Di2015NewLine                </GridViewColumn.CellTemplate>Di2015NewLine            </GridViewColumn>Di2015NewLine            <GridViewColumn Header="Item Name" Width="230" >Di2015NewLine                <GridViewColumn.CellTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <Grid HorizontalAlignment="Stretch">Di2015NewLine                            <Grid.RowDefinitions>Di2015NewLine                                <RowDefinition Height="40" />Di2015NewLine                                <RowDefinition Height="*" />Di2015NewLine                            </Grid.RowDefinitions>                                   Di2015NewLine                            <TextBlock Text="{Binding ItemName}" VerticalAlignment="Center" Di2015NewLine                                       FontWeight="Bold" FontSize="18"/>Di2015NewLine                            <ListBox ItemsSource="{Binding Options}" Grid.Row="1" Background="Yellow" Di2015NewLine                                     HorizontalAlignment="Stretch">Di2015NewLine                                <ListBox.ItemTemplate>Di2015NewLine                                    <DataTemplate>Di2015NewLine                                        <TextBlock Text="{Binding OptionName}" />Di2015NewLine                                    </DataTemplate>Di2015NewLine                                </ListBox.ItemTemplate>Di2015NewLine                            </ListBox>Di2015NewLine                        </Grid>                                Di2015NewLine                    </DataTemplate>Di2015NewLine                </GridViewColumn.CellTemplate>Di2015NewLine            </GridViewColumn>Di2015NewLine            <GridViewColumn Header="Item Price" Width="100" DisplayMemberBinding="{Binding ItemPrice}"/>Di2015NewLine        </GridView>Di2015NewLine    </ListView.View>Di2015NewLine</ListView>Di2015NewLine
18291407Di2015UniqueSeparator<DataGrid ItemsSource="{Binding}" AutoGenerateColumns="False">Di2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTextColumn Header="Name" Binding="{Binding ItemName}" />Di2015NewLine    </DataGrid.Columns>Di2015NewLine    <DataGrid.RowDetailsTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <StackPanel Margin="2" Background="Yellow">Di2015NewLine                <TextBlock Text="Options:" />Di2015NewLine                <ListBox ItemsSource="{Binding Options}">Di2015NewLine                    <ListBox.ItemTemplate>Di2015NewLine                        <DataTemplate>Di2015NewLine                            <TextBlock Text="{Binding OptionName}" />Di2015NewLine                        </DataTemplate>Di2015NewLine                    </ListBox.ItemTemplate>Di2015NewLine                </ListBox>Di2015NewLine            </StackPanel>Di2015NewLine        </DataTemplate>Di2015NewLine    </DataGrid.RowDetailsTemplate>Di2015NewLine</DataGrid>Di2015NewLine
18291407Di2015UniqueSeparator...Di2015NewLinepublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    List<InvoiceItem> _source = new List<InvoiceItem>Di2015NewLine    {Di2015NewLine        new InvoiceItemDi2015NewLine        {Di2015NewLine          ItemName = "Item1",Di2015NewLine          Options = new List<InvoiceOption>Di2015NewLine          {Di2015NewLine              new InvoiceOption { OptionName = "Option1" },Di2015NewLine              new InvoiceOption { OptionName = "Option2" }Di2015NewLine          }Di2015NewLine        },Di2015NewLine        new InvoiceItemDi2015NewLine        {Di2015NewLine          ItemName = "Item2",Di2015NewLine          Options = new List<InvoiceOption>Di2015NewLine          {Di2015NewLine              new InvoiceOption { OptionName = "Option3" },Di2015NewLine              new InvoiceOption { OptionName = "Option4" }Di2015NewLine          }Di2015NewLine        }Di2015NewLine    };Di2015NewLineDi2015NewLine    this.DataContext = _source;Di2015NewLine}Di2015NewLine...Di2015NewLine
18291461Di2015UniqueSeparatorProcessSearchAsync
18291461Di2015UniqueSeparatorinvoiceTypes == null
18291461Di2015UniqueSeparator_invoiceAccounts == null
18291461Di2015UniqueSeparatorprivate async Task ProcessSearchAsync()Di2015NewLine{Di2015NewLineDi2015NewLine    Data.ConfigurationWCF confWcf = new Data.ConfigurationWCF();Di2015NewLine    Task</*typeof _invoiceTypes*/> t1;Di2015NewLine    Task</*typeof _invoiceAccounts*/> t2;Di2015NewLineDi2015NewLine    if (_invoiceTypes == null)Di2015NewLine        t1 = confWcf.GetInvoiceTypesAsync(MainForm.State.Entity);Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        var tsc1 = new TaskCompletionSource</*typeof _invoiceTypes*/>();Di2015NewLine        t1 = tsc1.Task;Di2015NewLine        tsc1.SetResult(_invoiceTypes);Di2015NewLine    }Di2015NewLineDi2015NewLine    if ( _invoiceAccounts == null )Di2015NewLine        t2 = confWcf.GetInvoiceAccountsAsync(MainForm.State.Entity);Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        var tsc2 = new TaskCompletionSource</*typeof _invoiceAccounts*/>();Di2015NewLine        t2 = tsc2.Task;Di2015NewLine        tsc2.SetResult(_invoiceAccounts);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    DataSeekWCF seekWcf = new DataSeekWCF();Di2015NewLine    Task</*typeof _ds*/> t3 = seekWcf.SearchInvoiceAdminAsync(new Guid(cboEmployer.Value.ToString()), new Guid(cboGroup.Value.ToString()), txtSearchInvoiceNumber.Text, chkSearchLike.Checked, txtSearchFolio.Text, Convert.ToInt32(txtYear.Value));Di2015NewLineDi2015NewLine    await Task.WhenAll(new Task[] {t1, t2, t3});Di2015NewLine    _invoiceTypes = t1.Result;Di2015NewLine    _invoiceAccounts = t2.Result;Di2015NewLine    ds = t3.Result;Di2015NewLineDi2015NewLine    if (_ds != null)Di2015NewLine    {Di2015NewLine        SetupInvoiceGrid();Di2015NewLine    }Di2015NewLineDi2015NewLine    confWcf.Dispose();Di2015NewLine    seekWcf.Dispose();Di2015NewLine}Di2015NewLine
18291693Di2015UniqueSeparatorreturn PartialView()
18291734Di2015UniqueSeparatorName
18291734Di2015UniqueSeparatorId
18291734Di2015UniqueSeparatorName
18291734Di2015UniqueSeparatorId
18291734Di2015UniqueSeparatorId
18291734Di2015UniqueSeparatorint empId = 0;Di2015NewLineif(!int.TryParse(textbox1.Text, out empId))Di2015NewLine{Di2015NewLine    empId = -1;// or some invalid Id which won't appear in DBDi2015NewLine}Di2015NewLinemySqlCommand1.Parameters.AddWithValue("@EmployeeID", empId);Di2015NewLine
18291767Di2015UniqueSeparatorfillCell < (siteTitles.Count / numOfCols)Di2015NewLine
18291767Di2015UniqueSeparatornumOfCols
18291767Di2015UniqueSeparatorfor (int i = 0; i < siteTitles.Count; i++)Di2015NewLine{Di2015NewLine    int row = i / numOfCols;Di2015NewLine    int col = i % numOfCols;Di2015NewLine    // Fill in things using row, col and iDi2015NewLine}Di2015NewLine
18291767Di2015UniqueSeparatorsiteTitles
18291767Di2015UniqueSeparatortempSites
18291767Di2015UniqueSeparatorfillRow
18291885Di2015UniqueSeparatorAccountBalance[]
18291885Di2015UniqueSeparatorstring[]
18291885Di2015UniqueSeparatorstring[]
18291885Di2015UniqueSeparatorAccountBalance[]
18291885Di2015UniqueSeparatorprivate void docorpaccounts()Di2015NewLine{Di2015NewLine    AccountBalance[] corpbal = cwaa.CorpAccounts(CORP_KEY, CORP_API, USER).ToArray();Di2015NewLine}Di2015NewLine
18291885Di2015UniqueSeparatorAccountBalance
18291885Di2015UniqueSeparatorstring
18291885Di2015UniqueSeparatorToString
18291885Di2015UniqueSeparatorprivate void docorpaccounts()Di2015NewLine{Di2015NewLine    string[] corpbal = cwaa.CorpAccounts(CORP_KEY, CORP_API, USER)Di2015NewLine                           .Select(x => x.ToString())Di2015NewLine                           .ToArray();Di2015NewLine}Di2015NewLine
18291885Di2015UniqueSeparatorprivate void docorpaccounts()Di2015NewLine{Di2015NewLine    string[] corpbal = cwaa.CorpAccounts(CORP_KEY, CORP_API, USER)Di2015NewLine                           .Select(x => x.MyStringProperty)Di2015NewLine                           .ToArray();Di2015NewLine}Di2015NewLine
18291920Di2015UniqueSeparatorwhile (upload.Peek() != null)Di2015NewLine
18291920Di2015UniqueSeparatorStreamReader.Peek()
18291920Di2015UniqueSeparatornull
18291920Di2015UniqueSeparatorwhile (upload.Peek() != -1)Di2015NewLine
18292009Di2015UniqueSeparator    foreach (char letter in blockText)Di2015NewLine    {Di2015NewLine        bool _specialCharFound = false;Di2015NewLineDi2015NewLine        for (int i = 0; i < specialChars.Length; i++)Di2015NewLine        {Di2015NewLine            if (letter == specialChars[i])Di2015NewLine            {Di2015NewLine                _specialCharFound = true;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        if (_specialCharFound)Di2015NewLine            SendKeys.Send("{" + letter.ToString() + "}");Di2015NewLine        elseDi2015NewLine            SendKeys.Send(letter.ToString());Di2015NewLine    }Di2015NewLine
18292255Di2015UniqueSeparatorstring input = "..........1............1...";Di2015NewLineint start = input.IndexOf('1');Di2015NewLineint end = input.LastIndexOf('1');Di2015NewLineDi2015NewLinechar[] content = input.ToCharArray();Di2015NewLinefor (int i = start; i <= end; i++)Di2015NewLine{Di2015NewLine    content[i] = content[i] == '1' ? '.' : '1'; //invertDi2015NewLine}Di2015NewLinestring output = new string(content);Di2015NewLine
18292265Di2015UniqueSeparatorclass Adventurer : IPerson { }Di2015NewLineclass NPC : IPerson { }Di2015NewLineDi2015NewLinepublic void MyMethod(ObservableCollection<IPerson> collection)Di2015NewLine{Di2015NewLine    collection.Add(new NPC());Di2015NewLine}Di2015NewLineDi2015NewLinevar collectionOfAdventurers = new ObservableCollection<Adventurer>();Di2015NewLineMyMethod(collectionOfAdventurers);Di2015NewLine
18292265Di2015UniqueSeparatorAdventurer
18292265Di2015UniqueSeparatorNPC
18292265Di2015UniqueSeparatorMyMethod
18292265Di2015UniqueSeparatorpublic void MyMethod(IEnumerable<IPerson> enumerable)Di2015NewLine
18292265Di2015UniqueSeparatorpublic void MyMethod(INotifyCollectionChanged collection)Di2015NewLine
18292265Di2015UniqueSeparatorpublic void MyMethod<T>(ObservableCollection<T> collection) where T : IPersonDi2015NewLine
18292290Di2015UniqueSeparator.scrollIntoView()
18292290Di2015UniqueSeparator.focus()
18292299Di2015UniqueSeparator<a href="@Url.Action("Index", "KnowledgeBase")#Bookmark">TextLink</a>Di2015NewLine
18292397Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic interface IProviderDi2015NewLine{Di2015NewLineDi2015NewLine    [OperationContract]Di2015NewLine    int MyApiCall_1(string param);Di2015NewLineDi2015NewLine    [OperationContract]Di2015NewLine    string MyApiCall_2(int number);Di2015NewLine}Di2015NewLine
18292397Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic interface INewProvider : IProviderDi2015NewLine{Di2015NewLineDi2015NewLine    [OperationContract]Di2015NewLine    double MyApiCall_3();Di2015NewLine}Di2015NewLine
18292397Di2015UniqueSeparatorNewProvider
18292397Di2015UniqueSeparatorNewProvider
18292397Di2015UniqueSeparatorProvider
18292421Di2015UniqueSeparatorConvertTimeBySystemTimeZoneId
18292421Di2015UniqueSeparatorConvertTimeFromUtc
18292421Di2015UniqueSeparatorDateTime
18292421Di2015UniqueSeparator.Kind
18292421Di2015UniqueSeparatorDateTime
18292421Di2015UniqueSeparatorUtc
18292421Di2015UniqueSeparatorLocal
18292421Di2015UniqueSeparatorUnspecified
18292421Di2015UniqueSeparatorDateTime
18292421Di2015UniqueSeparator.Kind
18292421Di2015UniqueSeparatorUnspecified
18292421Di2015UniqueSeparatorConvertTimeBySystemTimeZoneId
18292421Di2015UniqueSeparatorLocal
18292421Di2015UniqueSeparatorConvertTimeFromUtc
18292421Di2015UniqueSeparatorUtc
18292421Di2015UniqueSeparatorConvertTimeFromUtc
18292421Di2015UniqueSeparator.Kind
18292421Di2015UniqueSeparatorUtc
18292421Di2015UniqueSeparatorfoo.MyDateTime = (DateTime) dataReader["MyDateTime"]Di2015NewLine
18292421Di2015UniqueSeparatorfoo.MyDateTime = DateTime.SpecifyKind(Di2015NewLine                   (DateTime) dataReader["MyDateTime"],Di2015NewLine                   DateTimeKind.Utc);Di2015NewLine
18292421Di2015UniqueSeparatorDataReader
18292595Di2015UniqueSeparator.Parameters
18292595Di2015UniqueSeparatormySqlCommand1.Parameters.Add("@Parameter1", SqlDbType.Int);Di2015NewLinemySqlCommand1.Parameters.Add("@Parameter2", SqlDbType.VarChar, 50);Di2015NewLine...Di2015NewLine
18292595Di2015UniqueSeparatorforeach (SqlParameter parameter in mySqlCommand1.Parameters)Di2015NewLine{Di2015NewLine    parameter.Value = someValue;  Di2015NewLine}Di2015NewLine
18292595Di2015UniqueSeparator.Parameters
18292595Di2015UniqueSeparator@Parameter1
18292595Di2015UniqueSeparatorforeach (SqlParameter parameter in mySqlCommand1.Parameters)Di2015NewLine{Di2015NewLine    if(parameter.ParameterName != "@Parameter1") Di2015NewLine    { Di2015NewLine        parameter.Value = someValue;  Di2015NewLine    }Di2015NewLine} Di2015NewLine
18292630Di2015UniqueSeparatorvar TheOutput = (from t in TheDC.SomeTableDi2015NewLineDi2015NewLine                 where TheIDs.Contains(t.ID) && (Di2015NewLine                 t.column1.Contains(TheSearchTerm) ||Di2015NewLine                 t.column2.Contains(TheSearchTerm) ||Di2015NewLine                 t.column3.Contains(TheSearchTerm) )           Di2015NewLine                 select t.ID).ToList();Di2015NewLine}Di2015NewLine
18292630Di2015UniqueSeparator||
18292633Di2015UniqueSeparatorConditionExpression condition1 = new Microsoft.Xrm.Sdk.Query.ConditionExpressionDi2015NewLine{Di2015NewLine    AttributeName = "statecode",Di2015NewLine    Operator = ConditionOperator.Equal,Di2015NewLine    Values = { "Active" } //or SomeEnum.Active.ToString() if you want use good practiceDi2015NewLine};Di2015NewLine
18292633Di2015UniqueSeparatorValues = {(int)SomeEnum.Active}
18292821Di2015UniqueSeparatorTimeSpan.Parse
18292821Di2015UniqueSeparatorTimeSpan ts = TimeSpan.Parse("-07:00");Di2015NewLineConsole.WriteLine(ts);   // -07:00:00Di2015NewLine
18292821Di2015UniqueSeparatorTimeSpan.TryParse
18292821Di2015UniqueSeparatorTimeSpan ts;Di2015NewLineif (TimeSpan.TryParse("-07:00", out ts))Di2015NewLine    Console.WriteLine(ts);   // -07:00:00Di2015NewLine
18292821Di2015UniqueSeparatorDateTime localDateTime = utcDateTime.ToLocalTime();Di2015NewLine
18292821Di2015UniqueSeparatorTimeZoneInfo tzi = TimeZoneInfo.FindSystemTimeZoneById(toTimeZoneDesc);Di2015NewLineDateTime localDateTime = TimeZoneInfo.ConvertTime(utcDateTime, tzi);Di2015NewLine
18293005Di2015UniqueSeparatorstring html = "<h1>[PAGE_TITLE]<h1/>[STUDENTS]";Di2015NewLine//get your values hereDi2015NewLine...Di2015NewLineDi2015NewLinehtml = html.Replace("[PAGE_TITLE]", MyPageTitle);Di2015NewLinehtml = html.Replace("[STUDENTS]", MyStudentsTableHtml);Di2015NewLine
18293005Di2015UniqueSeparator// Create a Document objectDi2015NewLinevar document = new Document(PageSize.A4, 50, 50, 25, 25);Di2015NewLineDi2015NewLine// Create a new PdfWriter object, specifying the output streamDi2015NewLinevar output = new MemoryStream();Di2015NewLinevar writer = PdfWriter.GetInstance(document, output);Di2015NewLineDi2015NewLine// Open the Document for writingDi2015NewLinedocument.Open();Di2015NewLineDi2015NewLinevar parsedHtmlElements = HTMLWorker.ParseToList(new StringReader(html), null);Di2015NewLineforeach (var htmlElement in parsedHtmlElements)Di2015NewLine{Di2015NewLine    document.Add(htmlElement as IElement);Di2015NewLine}Di2015NewLineDi2015NewLinedocument.Close();Di2015NewLineDi2015NewLineResponse.ContentType = "application/pdf";Di2015NewLineResponse.AddHeader("Content-Disposition",  String.Format("attachment;filename=students{0}.pdf", YourStudendsPrintingId));Di2015NewLineResponse.BinaryWrite(output.ToArray()); Di2015NewLine
18293029Di2015UniqueSeparatordynamic
18293029Di2015UniqueSeparatorforeach (dynamic result in results)Di2015NewLine{Di2015NewLine    var msg = String.Format{"User: {0}, Application: {1}, RequestGUID: {2}", Di2015NewLine                            result.User, result.Application, result.RequestGUID);Di2015NewLine    MessageBox.Show(msg);Di2015NewLine}Di2015NewLine
18293198Di2015UniqueSeparator    <asp:Button ID="hiddenButton" runat="server" Text="" style="display:none;" />Di2015NewLine    <ajaxToolkit:ModalPopupExtender ID="ModalPopupExtender1" runat="server" Enabled="True" TargetControlID="hiddenButton" PopupControlID="upModal" BehaviorID="modalbehavior" BackgroundCssClass="modalBackground"  OnCancelScript="cancelClick();" CancelControlID="closePopup">Di2015NewLine    </ajaxToolkit:ModalPopupExtender>Di2015NewLineDi2015NewLine    <asp:UpdatePanel runat="server" ID="upModal" UpdateMode="Conditional">Di2015NewLine        <ContentTemplate>Di2015NewLineDi2015NewLine            <asp:Panel id="pnlPopup" runat="server" class="ModalPanel" >Di2015NewLineDi2015NewLine                <table cellpadding="5" cellspacing="5" class="topBanner" style="width:100%;">Di2015NewLine                    <tr>Di2015NewLine                        <td width="50">Di2015NewLine                            <asp:LinkButton ID="closePopup" runat="server" onclick="LinkButton1_Click" CssClass="ClosePopupCls">Close Di2015NewLine                            [x]</asp:LinkButton>Di2015NewLine                        </td>Di2015NewLine                        <td align="center">Di2015NewLine                            <asp:Label ID="lbl" runat="server" Text="Status"></asp:Label>Di2015NewLine                        </td>Di2015NewLine                        <td width="25">Di2015NewLine                        </td>Di2015NewLine                    </tr>Di2015NewLine                    <tr>Di2015NewLine                        <td colspan="3">Di2015NewLine                            <asp:GridView ID="gvRecords" runat="server" AllowPaging="True" Di2015NewLine                                BackColor="White" EmptyDataText="No Record Found" Di2015NewLine                                EnableSortingAndPagingCallbacks="True" ForeColor="GrayText" Height="600" Di2015NewLine                                onpageindexchanging="gvRecords_PageIndexChanging" Width="800">Di2015NewLine                            </asp:GridView>Di2015NewLine                        </td>Di2015NewLine                    </tr>Di2015NewLine                </table>Di2015NewLine            </asp:Panel>Di2015NewLineDi2015NewLine        </ContentTemplate>Di2015NewLine    </asp:UpdatePanel>Di2015NewLine
18293200Di2015UniqueSeparatordata
18293200Di2015UniqueSeparator$.ajax({Di2015NewLine    url: '/Api/ServiceFeature',Di2015NewLine    type: 'PUT',Di2015NewLine    data: {Di2015NewLine        "Id": 8,Di2015NewLine        "ServiceId": 1,Di2015NewLine        "Name": "Wrap",Di2015NewLine        "Description": "Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc",Di2015NewLine        "Comments": null,Di2015NewLine        "DateAdded": "2013-08-17T22:40:53.2387243+02:00",Di2015NewLine        "DateUpdated": "2013-08-17T00:00:00+02:00",Di2015NewLine        "IsEnabled": trueDi2015NewLine    },Di2015NewLine    success: function() {Di2015NewLine        alert('Done');Di2015NewLine    },Di2015NewLine    error: function(textStatus) {Di2015NewLine        alert(textStatus);Di2015NewLine    }Di2015NewLine});Di2015NewLine
18293200Di2015UniqueSeparatorId=8&ServiceId=3&Name=Wrap&Description=Claritas+est+etiam+processus+dynamicus%2C+qui+sequitur+mutationem+consuetudium+lectorum.+Mirum+est+notare+quam+littera+gothica%2C+quam+nunc&Comments=sdfdsdssd&DateAdded=2013-07-29T23%3A39%3A19.46&DateUpdated=08%2F17%2F2013&IsEnabled=trueDi2015NewLine
18293200Di2015UniqueSeparatorContent-Type:application/x-www-form-urlencoded; charset=UTF-8
18293411Di2015UniqueSeparatorBitConverter
18293411Di2015UniqueSeparatorunsafe
18293411Di2015UniqueSeparatorpublic unsafe static byte[] GetBytes(int value)Di2015NewLine{Di2015NewLine    byte[] array = new byte[4];Di2015NewLine    fixed (byte* ptr = array)Di2015NewLine    {Di2015NewLine        *(int*)ptr = value;Di2015NewLine    }Di2015NewLine    return array;Di2015NewLine}Di2015NewLine
18293411Di2015UniqueSeparatorint
18293411Di2015UniqueSeparatorpublic unsafe static int ToInt32(byte[] value, int startIndex)Di2015NewLine{Di2015NewLine    if (value == null)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.value);Di2015NewLine    }Di2015NewLine    if ((ulong)startIndex >= (ulong)((long)value.Length))Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.startIndex, ExceptionResource.ArgumentOutOfRange_Index);Di2015NewLine    }Di2015NewLine    if (startIndex > value.Length - 4)Di2015NewLine    {Di2015NewLine        ThrowHelper.ThrowArgumentException(ExceptionResource.Arg_ArrayPlusOffTooSmall);Di2015NewLine    }Di2015NewLine    int result;Di2015NewLine    if (startIndex % 4 == 0)Di2015NewLine    {Di2015NewLine        result = *(int*)(&value[startIndex]);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        if (BitConverter.IsLittleEndian)Di2015NewLine        {Di2015NewLine            result = ((int)(*(&value[startIndex])) | (int)(&value[startIndex])[(IntPtr)1 / 1] << 8 | (int)(&value[startIndex])[(IntPtr)2 / 1] << 16 | (int)(&value[startIndex])[(IntPtr)3 / 1] << 24);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            result = ((int)(*(&value[startIndex])) << 24 | (int)(&value[startIndex])[(IntPtr)1 / 1] << 16 | (int)(&value[startIndex])[(IntPtr)2 / 1] << 8 | (int)(&value[startIndex])[(IntPtr)3 / 1]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
18293484Di2015UniqueSeparatormscoree.dll
18293528Di2015UniqueSeparatorvar range = worksheet.get_Range("A1", System.Type.Missing).CurrentRegion;Di2015NewLine
18293604Di2015UniqueSeparatorvalues
18293604Di2015UniqueSeparatorpublic float[,] values = new float[1, 1];    // new 1 by 1 arrayDi2015NewLine
18293604Di2015UniqueSeparatorpublic float[,] values;Di2015NewLineDi2015NewLinepublic GRID() {Di2015NewLine    this.values = new float[1, 1];           // new 1 by 1 arrayDi2015NewLine}Di2015NewLine
18293604Di2015UniqueSeparatorGRID grid = new GRID();Di2015NewLinegrid.values = new float[1, 1];               // new 1 by 1 arrayDi2015NewLinethis.lblFirstVal.Text = "First Value (0,0): " + grid.values[0, 0];Di2015NewLine
18293628Di2015UniqueSeparatorforeach (XmlNode node in xDoc.SelectNodes("musicstore/album"))Di2015NewLine
18293628Di2015UniqueSeparator/
18293641Di2015UniqueSeparatorWndProc
18293641Di2015UniqueSeparatorWM_SETCURSOR
18293641Di2015UniqueSeparatorWndProc
18293722Di2015UniqueSeparator.gestures(0)
18293722Di2015UniqueSeparator.gestures[0]
18293722Di2015UniqueSeparatorusing UnityEngine;Di2015NewLineusing System.Collections;Di2015NewLineusing Leap;Di2015NewLineDi2015NewLinepublic class LeapTest : Leap.Listener {Di2015NewLine    public Leap.Controller Controller;Di2015NewLineDi2015NewLine    // Use this for initializationDi2015NewLine    public void Start () {Di2015NewLine        Controller = new Leap.Controller(this);Di2015NewLine        Debug.Log("Leap start");Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void OnConnect(Controller controller){Di2015NewLine        Debug.Log("Leap Connected");Di2015NewLine        controller.EnableGesture(Gesture.GestureType.TYPECIRCLE,true);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void OnFrame(Controller controller)Di2015NewLine    {Di2015NewLine        Frame frame = controller.Frame();Di2015NewLine        GestureList gestures = frame.Gestures();Di2015NewLine        for (int i = 0; i < gestures.Count; i++)Di2015NewLine        {Di2015NewLine            Gesture gesture = gestures[0];Di2015NewLine            switch(gesture.Type){Di2015NewLine                case Gesture.GestureType.TYPECIRCLE:Di2015NewLine                    Debug.Log("Circle");Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    Debug.Log("Bad gesture type");Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18293734Di2015UniqueSeparatorMerge
18293734Di2015UniqueSeparatorGroupBy
18293734Di2015UniqueSeparatorMerge
18293734Di2015UniqueSeparatorMerge
18293734Di2015UniqueSeparatorIObservable<T> requests = ...;Di2015NewLinerequests.GroupBy(request => PickExternalSystem(request))Di2015NewLine    .Select(group => group // group.Key is the TExternalSystemDi2015NewLine        .Select(request => Observable.Defer(() => group.Key.ExecuteAsync(request)))Di2015NewLine        .Merge(maxConcurrency: group.Key.MaxConcurrency))Di2015NewLine    .Merge() // merge the results of each group back together againDi2015NewLine    .Subscribe(result => ...);Di2015NewLine
18293795Di2015UniqueSeparatorform>
18293795Di2015UniqueSeparator@HTML.BeginForm
18293795Di2015UniqueSeparatorHTML
18293795Di2015UniqueSeparator<form action"/Controller/Method" method="POST" id="signInForm">Di2015NewLine    <input type="text" name="form1" />Di2015NewLine    <input type="text" name="form2" />Di2015NewLine    <input type="submit" value="Sign in" />Di2015NewLine</form>Di2015NewLineDi2015NewLine$( function() {Di2015NewLine    $( 'signInForm' ).submit( function( evt ) {Di2015NewLine        //prevent the browsers default functionDi2015NewLine        evt.preventDefault();Di2015NewLine        //grab the form and wrap it with jQueryDi2015NewLine        var $form = $( this );Di2015NewLine        //if client side validation fails, don't do anythingDi2015NewLine        if( !$form.valid() ) return;Di2015NewLine        //send your ajax requestDi2015NewLine        $.ajax( {Di2015NewLine            type: $form.prop( 'method' ),Di2015NewLine            url: $form.prop( 'action' ),Di2015NewLine            data: $form.serialize(),Di2015NewLine            dataType: "json",Di2015NewLine            traditional: true,Di2015NewLine            success: function( response ) {Di2015NewLine                document.body.innerHTML = response;Di2015NewLine            }Di2015NewLine        });Di2015NewLine    });Di2015NewLine});Di2015NewLine
18293795Di2015UniqueSeparator@Url.Action
18293795Di2015UniqueSeparator<form action"@Url.Action("Controller", "Method")" method="POST" id="signInForm">Di2015NewLine    <input type="text" name="form1" />Di2015NewLine    <input type="text" name="form2" />Di2015NewLine    <input type="submit" value="Sign in" />Di2015NewLine</form>Di2015NewLine
18293795Di2015UniqueSeparatorDisclaimer, I am a contributor to the TakeCommand project
18293847Di2015UniqueSeparator// populate this in constructor, via service, setter, etc - whatever makes senseDi2015NewLineprivate string[] data;Di2015NewLineDi2015NewLine// how many rows are in the tableDi2015NewLinepublic int NumberOfRowsInTableView(NSTableView table)Di2015NewLine{Di2015NewLine  return data.length;Di2015NewLine}Di2015NewLineDi2015NewLine// what to draw in the tableDi2015NewLinepublic NSObject ObjectValueForTableColumn (NSTableView table, NSTableColumn col, int row)Di2015NewLine{Di2015NewLine  // assume you've setup your tableview in IB with two columns, "Index" and "Value"Di2015NewLineDi2015NewLine  string text = string.Empty;Di2015NewLineDi2015NewLine  if (col.HeaderCell.Title == "Index") {Di2015NewLinetext = row.ToString();Di2015NewLine  } else {Di2015NewLine    text = data [row];Di2015NewLine  }Di2015NewLineDi2015NewLine  return new NSString (text);Di2015NewLine}Di2015NewLine
18294113Di2015UniqueSeparatorAttributes are prefixed with an @ and should be at the start of the object.Di2015NewLine
18294113Di2015UniqueSeparator"@length": "3",
18294113Di2015UniqueSeparator[XmlRoot(ElementName="array")]Di2015NewLineclass JsonToXmlTranslationObject {Di2015NewLineDi2015NewLine     [XmlElement(ElementName="item")]Di2015NewLine     public int[] item { get; set; }Di2015NewLineDi2015NewLine     [XmlAttribute]Di2015NewLine     public int length { get; set; }Di2015NewLine}Di2015NewLine
18294113Di2015UniqueSeparatorJsonToXmlTranslationObject
18294120Di2015UniqueSeparatorrouteValues
18294120Di2015UniqueSeparatorrouteValues
18294120Di2015UniqueSeparator<table class="table table-condensed">Di2015NewLine    <thead>Di2015NewLine        <tr>Di2015NewLine            <th>#</th>Di2015NewLine            <th>Benutzername</th>Di2015NewLine            <th>Aktiviert</th>Di2015NewLine            <th>S0Pin Ansicht</th>Di2015NewLine            <th>Einstellungen</th>Di2015NewLine            <th>Aktionen</th>Di2015NewLine        </tr>Di2015NewLine    </thead>Di2015NewLine    <tbody>Di2015NewLine        @if (Model != null && Model.Count > 0) {Di2015NewLine            foreach (var item in Model) {Di2015NewLine            <tr>Di2015NewLine                <td>@item.ID</td>Di2015NewLine                <td>@item.Username</td>Di2015NewLine                @if (item.Activated) {Di2015NewLine                    <td><i id="active_@item.ID" class="icon-ok" /></td>Di2015NewLine                } else {Di2015NewLine                    <td><i id="active_@item.ID" class="icon-remove" /></td>Di2015NewLine                }Di2015NewLine                @if (item.S0PinAllowed) {Di2015NewLine                    <td><i id="support_@item.ID" class="icon-ok" /></td>Di2015NewLine                } else {Di2015NewLine                    <td><i id="support_@item.ID" class="icon-remove" /></td>Di2015NewLine                }Di2015NewLine                @if (item.SettingsAllowed) {Di2015NewLine                    <td><i id="settings_@item.ID" class="icon-ok" /></td>Di2015NewLine                } else {Di2015NewLine                    <td><i id="settings_@item.ID" class="icon-remove" /></td>Di2015NewLine                }Di2015NewLine                <td>Di2015NewLine                    @if (item.Username == User.Identity.Name) {Di2015NewLine                        <span>Keine Aktionen verfÃ¼gbar</span>Di2015NewLine                    } else {Di2015NewLine                        using (Ajax.BeginForm(item.Activated ? "DeactivateUser" : "ActivateUser", "Settings", new { username = item.Username }, new AjaxOptions() {Di2015NewLine                            HttpMethod = "POST",Di2015NewLine                            UpdateTargetId = "usertable"Di2015NewLine                        }, new {Di2015NewLine                            id = "formlogin_" + item.ID,Di2015NewLine                        })) {Di2015NewLine                            var user = item as Token.Creator.Site.Models.User;Di2015NewLine                        @Html.Hidden("first", Model.First)Di2015NewLine                        @Html.Hidden("count", Model.Fetch)Di2015NewLine                            if (item.Activated) {Di2015NewLine                        <input class="btn btn-danger btn-small pull-left" type="submit" id="sublogin_@item.ID" value="Deaktivieren" />Di2015NewLine                            } else { Di2015NewLine                        <input class="btn btn-success btn-small pull-left" type="submit" id="sublogin_@item.ID" value="Aktivieren" />Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        using (Ajax.BeginForm(item.S0PinAllowed ? "DeactivateSupportUser" : "ActivateSupportUser", "Settings", new { username = item.Username }, new AjaxOptions() {Di2015NewLine                            HttpMethod = "POST",Di2015NewLine                            UpdateTargetId = "usertable"Di2015NewLine                        }, new {Di2015NewLine                            id = "formsupport_" + item.IDDi2015NewLine                        })) {Di2015NewLine                            var user = item as Token.Creator.Site.Models.User;Di2015NewLine                        @Html.Hidden("first", Model.First)Di2015NewLine                        @Html.Hidden("count", Model.Fetch)Di2015NewLine                            if (item.S0PinAllowed) {Di2015NewLine                        <input class="btn btn-danger btn-small pull-left" type="submit" id="subsupport_@item.ID" value="Support verweigern" />Di2015NewLine                            } else { Di2015NewLine                        <input class="btn btn-success btn-small pull-left" type="submit" id="subsupport_@item.ID" value="Support erlauben" />Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                        using (Ajax.BeginForm(item.SettingsAllowed ? "DeactivateSettingsUser" : "ActivateSettingsUser", "Settings", new { username = item.Username }, new AjaxOptions() {Di2015NewLine                            HttpMethod = "POST",Di2015NewLine                            UpdateTargetId = "usertable"Di2015NewLine                        }, new {Di2015NewLine                            id = "formsettings_" + item.IDDi2015NewLine                        })) {Di2015NewLine                            var user = item as Token.Creator.Site.Models.User;Di2015NewLine                        @Html.Hidden("first", Model.First)Di2015NewLine                        @Html.Hidden("count", Model.Fetch)Di2015NewLine                            if (item.SettingsAllowed) {Di2015NewLine                        <input class="btn btn-danger btn-small pull-left" type="submit" id="subsettings_@item.ID" value="Einstellungen verweigern" />Di2015NewLine                            } else {Di2015NewLine                        <input class="btn btn-success btn-small pull-left" type="submit" id="subsettings_@item.ID" value="Einstellungen erlauben" />Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                </td>Di2015NewLine            </tr>Di2015NewLine            }Di2015NewLine        } else {Di2015NewLine            <tr class="alert alert-info">Di2015NewLine                <td colspan="6">Leider sind keine Daten verfÃ¼gbar :(</td>Di2015NewLine            </tr>Di2015NewLine        }Di2015NewLine    </tbody>Di2015NewLine</table>Di2015NewLine
18294163Di2015UniqueSeparatorpublic IQueryable<System.Web.Security.MembershipUser> GridView1_GetData()Di2015NewLine{Di2015NewLine  return Membership.GetAllUsers().Cast<MembershipUser>().AsQueryable<MembershipUser>();            Di2015NewLine}Di2015NewLine
18294482Di2015UniqueSeparatorHtmlWeb web = new HtmlWeb();Di2015NewLineweb.OverrideEncoding = Encoding.GetEncoding(932);Di2015NewLinedoc = web.Load(url);Di2015NewLine
18294636Di2015UniqueSeparatorTextBoxFor
18294636Di2015UniqueSeparatorHtml.TextBoxFor(...);
18294636Di2015UniqueSeparatorMvcHtmlString
18294636Di2015UniqueSeparator@Html.TextBoxFor(model => model.Title)   Di2015NewLine
18294636Di2015UniqueSeparator@
18294636Di2015UniqueSeparatorResponse.Write
18294636Di2015UniqueSeparator@using (Html.BeginForm())Di2015NewLine{Di2015NewLine    @Html.TextBoxFor(model => model.Title)Di2015NewLine    @Html.TextBoxFor(model => model.Author)Di2015NewLine    @Html.TextBoxFor(model => model.PublishingCompany)Di2015NewLine    @Html.TextBoxFor(model => model.ReleaseYear)Di2015NewLine    @Html.TextBoxFor(model => model.Summary)Di2015NewLine}Di2015NewLine
18294636Di2015UniqueSeparator<div class="editor-label">Di2015NewLine    @Html.LabelFor(model => model.Title)Di2015NewLine</div>Di2015NewLine<div class="editor-field">Di2015NewLine    @Html.EditorFor(model => model.Title)Di2015NewLine    @Html.ValidationMessageFor(model => model.Title)Di2015NewLine</div>Di2015NewLine
18294636Di2015UniqueSeparatorEditorFor
18294789Di2015UniqueSeparatorLinq
18294789Di2015UniqueSeparatorchar.IsDigit
18294789Di2015UniqueSeparatorchar.IsLetter
18294789Di2015UniqueSeparator    string input = "dentist: 800-483-9767";Di2015NewLineDi2015NewLine    string digits = new string(input.Where(char.IsDigit).ToArray());Di2015NewLine    string letters = new string(input.Where(char.IsLetter).ToArray());Di2015NewLine
18294789Di2015UniqueSeparatorinput = "dentist: 800-483-9767";Di2015NewLinedigits = "8004839767"Di2015NewLineletters = "dentist"Di2015NewLineDi2015NewLineinput = "john (232)233-2323";Di2015NewLinedigits = "2322332323"Di2015NewLineletters = "john"Di2015NewLine
18294844Di2015UniqueSeparatorvar valids = new List<String>();Di2015NewLineforeach(String c in countries)Di2015NewLine   if(c.ToUpper().StartsWith(input.ToUpper()))Di2015NewLine       valids.Add(c);Di2015NewLineDi2015NewLinereturn (valids.Any()) ? String.Join(",",valids) : "No Matches";Di2015NewLine
18294844Di2015UniqueSeparatorvar valids = countries.Select(c => c.ToUpper().StartsWith(input.ToUpper())).ToList();Di2015NewLinereturn (valids.Any()) ? String.Join(",",valids) : "No Matches";Di2015NewLine
18294873Di2015UniqueSeparatorsb.Append(i + ",");
18294873Di2015UniqueSeparatori.ToString()
18294873Di2015UniqueSeparatorStringBuilder.Append(string.Concat((object)i, (object)","));Di2015NewLine
18294873Di2015UniqueSeparatorstring.Concat
18294873Di2015UniqueSeparatorToString()
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparator(object)i
18294873Di2015UniqueSeparatorIL_000c:  box        [mscorlib]System.Int32Di2015NewLineIL_0011:  ldstr      ","Di2015NewLineIL_0016:  call       string [mscorlib]System.String::Concat(object,Di2015NewLine                                                            object)Di2015NewLineIL_001b:  callvirt   instance class [mscorlib]System.Text.StringBuilder Di2015NewLine                     [mscorlib]System.Text.StringBuilder::Append(string)Di2015NewLine
18294873Di2015UniqueSeparatorbox
18294873Di2015UniqueSeparatorConcat
18294873Di2015UniqueSeparatorAppend
18294873Di2015UniqueSeparatori.ToString()
18294873Di2015UniqueSeparatorstring.Concat()
18294873Di2015UniqueSeparatorfor (int i = 0; i < 50; i++)Di2015NewLine{Di2015NewLine    sb.Append(i.ToString());Di2015NewLine    sb.Append(",");Di2015NewLine}Di2015NewLine
18294873Di2015UniqueSeparatorIL_000b:  ldloca.s   iDi2015NewLineIL_000d:  call       instance string [mscorlib]System.Int32::ToString()Di2015NewLineIL_0012:  callvirt   instance class [mscorlib]System.Text.StringBuilderDi2015NewLine                     [mscorlib]System.Text.StringBuilder::Append(string)Di2015NewLineIL_0017:  popDi2015NewLineIL_0018:  ldloc.0Di2015NewLineIL_0019:  ldstr      ","Di2015NewLineIL_001e:  callvirt   instance class [mscorlib]System.Text.StringBuilderDi2015NewLine                     [mscorlib]System.Text.StringBuilder::Append(string)Di2015NewLine
18294873Di2015UniqueSeparatorString.Concat
18294873Di2015UniqueSeparatorAppend()
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparatorstring.Format()
18294873Di2015UniqueSeparator<valuetype>.ToString()
18294873Di2015UniqueSeparatorstring
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparatorif (boxing occurs && overload has string)
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparatorstring
18294873Di2015UniqueSeparatorToString()
18294873Di2015UniqueSeparatorstring
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparatorint
18294873Di2015UniqueSeparatorobject
18294873Di2015UniqueSeparatorToString()
18294873Di2015UniqueSeparatorstring.Concat
18294873Di2015UniqueSeparatorint
18294873Di2015UniqueSeparatordouble
18294873Di2015UniqueSeparatorstring.Concat(int, int)
18294873Di2015UniqueSeparatorToString
18294873Di2015UniqueSeparatorstring.Concat(int, string)
18294873Di2015UniqueSeparator(int, string)
18294873Di2015UniqueSeparator(string, int)
18294934Di2015UniqueSeparator<system.net><mailSettings>
18295136Di2015UniqueSeparator<ListBox x:Name="Recent" Margin="8"Di2015NewLine                 SelectionChanged="recent_SelectionChanged" toolkit:TiltEffect.IsTiltEnabled="True"Di2015NewLine                 ItemContainerStyle="{StaticResource MyStyle}">Di2015NewLine    <ListBox.ItemsPanel> <!-- This is removing virtualization-->Di2015NewLine         <ItemsPanelTemplate>Di2015NewLine            <toolkit:WrapPanel Orientation="Horizontal" />Di2015NewLine         </ItemsPanelTemplate>Di2015NewLine    </ListBox.ItemsPanel>Di2015NewLine</ListBox>Di2015NewLine
18295148Di2015UniqueSeparatorResponse.Write
18295321Di2015UniqueSeparatorHttpMethod
18295321Di2015UniqueSeparatorAjaxOptions
18295363Di2015UniqueSeparatorpublic partial class tbIndexUI : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine    public int numColumnsDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            ViewState["numOfCols"] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int itemsPerColumnDi2015NewLine    {Di2015NewLine        setDi2015NewLine        {Di2015NewLine            ViewState["itemsPerCol"] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static void passData(int numOfCol, int itemsPerCol)Di2015NewLine    {Di2015NewLine        numColumns = numOfCol;Di2015NewLine        itemsPerColumn = itemsPerCol;Di2015NewLine    }Di2015NewLineDi2015NewLine    //when you need to use the stored valuesDi2015NewLine    int _numOfCols = ViewState["numOfCols"] ;Di2015NewLine    int itemsPerCol = ViewState["itemsPerCol"] ;Di2015NewLine }Di2015NewLine
18295465Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine        return;Di2015NewLine    Control control = null;Di2015NewLine    string controlName = Page.Request.Params["__EVENTTARGET"];Di2015NewLine    if (!String.IsNullOrEmpty(controlName))Di2015NewLine    {Di2015NewLine        control = Page.FindControl(controlName);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        string controlId;Di2015NewLine        Control foundControl;Di2015NewLine        foreach (string ctl in Page.Request.Form)Di2015NewLine        {Di2015NewLine            if (ctl.EndsWith(".x") || ctl.EndsWith(".y"))Di2015NewLine            {Di2015NewLine                controlId = ctl.Substring(0, ctl.Length - 2);Di2015NewLine                foundControl = Page.FindControl(controlId);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                foundControl = Page.FindControl(ctl);Di2015NewLine            }Di2015NewLine            if (!(foundControl is Button || foundControl is ImageButton)) continue;Di2015NewLine            control = foundControl;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Label1.Text = control.ID; // label1 must be in UpdatePanelDi2015NewLine}Di2015NewLine
18295572Di2015UniqueSeparator protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DetailsView dv = new DetailsView();Di2015NewLine        dv.ID = "MyDv";Di2015NewLine        dv.DataSource = GetDataSet(); // returns a dataset filled using Select QueryDi2015NewLineDi2015NewLine        TemplateField tf = new TemplateField();Di2015NewLine        tf.ItemTemplate = new AddTemplateToDetailsView(ListItemType.Item);Di2015NewLineDi2015NewLine        dv.Fields.Add(tf);Di2015NewLineDi2015NewLine        dv.DataBind();Di2015NewLine        placeholder1.Controls.Add(dv);Di2015NewLineDi2015NewLine    }Di2015NewLine
18295572Di2015UniqueSeparator<asp:TemplateField>
18295572Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Data;Di2015NewLineDi2015NewLinepublic class AddTemplateToDetailsView : ITemplateDi2015NewLine{Di2015NewLine   private ListItemType _ListItemType;Di2015NewLineDi2015NewLine    public AddTemplateToDetailsView(ListItemType listItemType)Di2015NewLine    {Di2015NewLine       _ListItemType = listItemType;Di2015NewLine    }Di2015NewLine    public void InstantiateIn(System.Web.UI.Control container)Di2015NewLine    {Di2015NewLine        if (_ListItemType == ListItemType.Item)Di2015NewLine        {Di2015NewLine            Label lblID = new Label();Di2015NewLine            lblID.DataBinding += new EventHandler(lblID_DataBinding);Di2015NewLine            container.Controls.Add(lblID);    Di2015NewLine        }    Di2015NewLine    }    Di2015NewLine    void lblID_DataBinding(object sender, EventArgs e)Di2015NewLine    {    Di2015NewLine        Label lblID = (Label)sender;Di2015NewLine        DetailsView container = (DetailsView)lblID.NamingContainer;Di2015NewLine        lblID.Text = ((DataRowView)container.DataItem)["CustomerID"].ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18295572Di2015UniqueSeparatorInsertItemTemplate
18295572Di2015UniqueSeparatorEditItemTemplate
18295572Di2015UniqueSeparatorPage_Init()
18295572Di2015UniqueSeparatorITemplate
18295572Di2015UniqueSeparatorprotected void Page_Init(object sender, EventArgs e)Di2015NewLine{Di2015NewLinethis.DetailsView1.EditItemTemplate = Page.LoadTemplate("UserControlEdit.ascx");Di2015NewLinethis.DetailsView1.InsertItemTemplate = Page.LoadTemplate("UserControlInsert.ascx");Di2015NewLine}Di2015NewLine
18295641Di2015UniqueSeparator    public static void ShowControl(Control c)Di2015NewLine    {Di2015NewLine        c.Show();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void HideControl(Control c)Di2015NewLine    {Di2015NewLine        c.Hide();Di2015NewLine    }Di2015NewLine
18295641Di2015UniqueSeparatorpublic static class ControlsUtilityDi2015NewLine{Di2015NewLine    public static void ShowControl(Control c)Di2015NewLine    {Di2015NewLine        c.Show();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void HideControl(Control c)Di2015NewLine    {Di2015NewLine        c.Hide();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18295789Di2015UniqueSeparator<description="(.+)">Di2015NewLine
18295789Di2015UniqueSeparator<description=" Literal <description="Di2015NewLine1st Capturing group (.+) Di2015NewLine    . 1 to infinite times [greedy] Any character (except newline)Di2015NewLine"> Literal ">Di2015NewLine
18295789Di2015UniqueSeparator<description="This chapter builds upon the information in part 1 ("Introduction to Dynamic Equations")">Di2015NewLine
18295789Di2015UniqueSeparatorThis chapter builds upon the information in part 1 ("Introduction to Dynamic Equations")
18295899Di2015UniqueSeparator<asp:ScriptManager ID="ScriptManager1" runat="server">Di2015NewLine</asp:ScriptManager>Di2015NewLine<asp:Label ID="Label3" runat="server"></asp:Label>Di2015NewLine<br />Di2015NewLine<asp:UpdatePanel ID="UpdatePanel1" runat="server">Di2015NewLine    <ContentTemplate>Di2015NewLine        <asp:TextBox ID="TextBox1" runat="server"></asp:TextBox>Di2015NewLine<br />Di2015NewLine        <asp:Button ID="Button1" runat="server" onclick="Button1_Click2" Text="OK" />Di2015NewLine        <br />Di2015NewLine        <asp:Label ID="Label2" runat="server"></asp:Label>Di2015NewLine    </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
18295948Di2015UniqueSeparatorList<string> files = new List<string>();Di2015NewLineDi2015NewLineDi2015NewLine        int charIndex = 0;Di2015NewLine        int numericIndex = -1;Di2015NewLineDi2015NewLine        foreach (var file in files.Select(path => new FileInfo(path)))Di2015NewLine        {Di2015NewLine            // Create new Filename - This may needs some tuning Di2015NewLine            // to really remove only the extension ad the endDi2015NewLine            // It doesnt take care of things likeDi2015NewLine            // file.bmp.bmp.bmp ...Di2015NewLine            string newFileName =  String.Format("{0}_{1}{2}.{3}", Di2015NewLine                file.FullName.Replace(file.Extension,String.Empty),Di2015NewLine                (char)(charIndex++ + 97), Di2015NewLine                (numericIndex > -1 ? String.Format("{0:D4}", numericIndex) : String.Empty), Di2015NewLine                file.Extension);Di2015NewLineDi2015NewLine            // Rename the FileDi2015NewLine            file.MoveTo(newFileName);Di2015NewLineDi2015NewLine            // Increment Counters.Di2015NewLine            if (charIndex > 25)Di2015NewLine            {Di2015NewLine                charIndex = 0;Di2015NewLine                numericIndex++;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18296188Di2015UniqueSeparatorvar
18296188Di2015UniqueSeparatorView
18296188Di2015UniqueSeparatorIView
18296188Di2015UniqueSeparatorIView
18296323Di2015UniqueSeparator                if (dr["Username"].ToString().Trim() == userText && dr["Password"].ToString().Trim() == passText)Di2015NewLine                {Di2015NewLineDi2015NewLine                    MessageBox.Show("This message won't Display");Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine                }Di2015NewLine
18296323Di2015UniqueSeparator                if (dr["Username"].ToString().Trim() == userText && dr["Password"].ToString().Trim() == passText)Di2015NewLine                {Di2015NewLineDi2015NewLine                    MessageBox.Show("This message won't Display");Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine                } else {Di2015NewLine                    MessageBox.Show(string.Format("{0}!={1}, {2}!={3}"Di2015NewLine                        ,dr["Username"].ToString().Trim(),userText,Di2015NewLine                         dr["Password"].ToString().Trim(),passTextDi2015NewLine                    );Di2015NewLine                } Di2015NewLine
18296585Di2015UniqueSeparatorMigrateDatabaseToLatestVersion
18296585Di2015UniqueSeparatorSql()
18296585Di2015UniqueSeparatorDropCreateDatabaseIfModelChanges
18296585Di2015UniqueSeparatorDropCreateDatabaseAlways
18296600Di2015UniqueSeparator[ValidateInput(false)]
18296600Di2015UniqueSeparator@Html.Raw
18296600Di2015UniqueSeparator[HttpPost]Di2015NewLine[ValidateInput(false)]Di2015NewLinepublic ActionResult Index(string search)Di2015NewLine{Di2015NewLine    ViewBag.Message = search;Di2015NewLine    return View();Di2015NewLine}Di2015NewLine
18296600Di2015UniqueSeparator<h2>@Html.Raw(ViewBag.Message)</h2>Di2015NewLine
18296829Di2015UniqueSeparatorprivate void ShowRandomImages()Di2015NewLine{Di2015NewLine    List<int> selectedImages = new List<int>();Di2015NewLine    foreach (var pictureBox in pictureBoxes)Di2015NewLine    {Di2015NewLine        if (filesToShow != null && !filesToShow.Any())Di2015NewLine        {Di2015NewLine            filesToShow = GetFilesToShow();Di2015NewLine        }Di2015NewLineDi2015NewLine        if (filesToShow != null && filesToShow.Any()) // If any files then allow the code to delete the shown imagesDi2015NewLine        {Di2015NewLine            int index = -1;Di2015NewLine            if (filesToShow.Count >= pictureBoxes.Count)Di2015NewLine            {Di2015NewLine                bool bOk = false;Di2015NewLine                while( !bOk )Di2015NewLine                { Di2015NewLine                    index = random.Next(0, filesToShow.Count);Di2015NewLine                    bOk = selectedImages.IndexOf(index) == -1;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                index = random.Next(0, filesToShow.Count);Di2015NewLine            }Di2015NewLineDi2015NewLine            selectedImages.Add(index);Di2015NewLine            string fileToShow = filesToShow[index];Di2015NewLine            pictureBox.ImageLocation = filesToShow[index];Di2015NewLine            filesToShow.RemoveAt(index);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18296832Di2015UniqueSeparatorvar queue = new Queue<int>(Enumerable.Range(0, 10000));Di2015NewLine
18296832Di2015UniqueSeparatorvar queue = new Queue<int>(10000);Di2015NewLinefor (int i = 0; i < 10000; i++)Di2015NewLine    queue.Enqueue(i);Di2015NewLine
18296911Di2015UniqueSeparatorSystem.Windows.Data
18296911Di2015UniqueSeparatorPresentationFramework.dll
18296911Di2015UniqueSeparatorxmlns:sysWinData="clr-namespace:System.Windows.Data;assembly=PresentationFramework"
18296981Di2015UniqueSeparatorresponse.setHeader("Cache-Control", "no-cache");Di2015NewLine
18297301Di2015UniqueSeparator  <connectionStrings>Di2015NewLine    <!-- Original Connection String -->Di2015NewLine    <!--Di2015NewLine    <add name="DefaultConnection" connectionString="Data Source=(LocalDb)\\v11.0;Di2015NewLine         Initial Catalog=aspnet-AspnetIdentitySample-20130627083537_2;Integrated Security=True"Di2015NewLine      providerName="System.Data.SqlClient" />Di2015NewLine    -->Di2015NewLine    <!-- New Connection String -->Di2015NewLine    <add name="MyConnectionString" connectionString="Data Source=(LocalDb)\\v11.0;Di2015NewLine         Initial Catalog=MyAspnetIdentitySample_1;Integrated Security=True"Di2015NewLine      providerName="System.Data.SqlClient" />Di2015NewLine  </connectionStrings>Di2015NewLine
18297301Di2015UniqueSeparator    public class MyDbContext : IdentityDbContext<MyUser, UserClaim, UserSecret, UserLogin, Role, UserRole>Di2015NewLine    {Di2015NewLine    }Di2015NewLine
18297301Di2015UniqueSeparator    public class MyDbContext : IdentityDbContext<MyUser, UserClaim, UserSecret, UserLogin, Role, UserRole>Di2015NewLine    {Di2015NewLine        public MyDbContext() : base("MyConnectionString") { }Di2015NewLine    }Di2015NewLine
18297301Di2015UniqueSeparatorPM> enable-migrationsDi2015NewLine
18297301Di2015UniqueSeparator    public Configuration()Di2015NewLine    {Di2015NewLine        AutomaticMigrationsEnabled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void Seed(AspnetIdentitySample.Models.MyDbContext context)Di2015NewLine    {Di2015NewLineDi2015NewLine        context.Users.AddOrUpdate(Di2015NewLine            p => p.UserName,Di2015NewLine            new MyUser { UserName = "John Doe" }Di2015NewLine        );Di2015NewLine    }Di2015NewLine
18297301Di2015UniqueSeparatorPM> update-databaseDi2015NewLine
18297394Di2015UniqueSeparatorString s = "abc055667788abc";Di2015NewLinestring phoneNumber;Di2015NewLineforeach(char c in s)Di2015NewLine{Di2015NewLine    if(Char.isNumber(c) || c == " " || c == "+")Di2015NewLine    {Di2015NewLine        phoneNumber = phoneNumber + c;Di2015NewLine        minimumDigits++;Di2015NewLine        if(minimumDigits >= 9)Di2015NewLine        {Di2015NewLine            NumberDetected(phoneNumber);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        minimumDigits = 0;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineNumberDetected(string rawNumber)Di2015NewLine{ Di2015NewLine    int plusses = 0;Di2015NewLine    foreach(char c in rawNumber)Di2015NewLine    {Di2015NewLine        if(c == "+")Di2015NewLine        {Di2015NewLine            plusses++;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if(plusses <= 1)Di2015NewLine    {Di2015NewLine        if(rawNumber.StartsWith("+")Di2015NewLine        {Di2015NewLine            NumberDone(rawNumber);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        MessageBox.Show("Number contained too many plusses!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18297545Di2015UniqueSeparatorDropDownList1.DataSource  = dtTable;  Di2015NewLineDropDownList1.DataTextField = "Name";Di2015NewLineDropDownList1.DataValueField= "Id";Di2015NewLineDropDownList.DataBind();Di2015NewLine
18297670Di2015UniqueSeparatorentryString
18297670Di2015UniqueSeparatorXmlElement
18297670Di2015UniqueSeparatorBits
18297670Di2015UniqueSeparatorBits
18297670Di2015UniqueSeparatorXmlText
18297670Di2015UniqueSeparator[XmlElement(ElementName = "Bits")]Di2015NewLinepublic String entryString { get; set; }Di2015NewLine
18297670Di2015UniqueSeparator[XmlText]Di2015NewLinepublic String entryString { get; set; }Di2015NewLine
18297964Di2015UniqueSeparator<asp:ListView OnItemDataBound="YourListView_ItemDataBound" ID="ul_HeaderMenu" runat="server" ClientIDMode="Static">Di2015NewLine    <ItemTemplate >Di2015NewLine        <li ID="listItem" class="li-HeaderMenu"  runat="server"  ><%# Eval("Name") %>Di2015NewLine             <div class="TopMenuActive"></div>Di2015NewLine        </li>Di2015NewLine    <ItemTemplate>Di2015NewLine</asp:ListView>Di2015NewLine
18297964Di2015UniqueSeparatorprotected void YourListView_ItemDataBound(object sender, ListViewItemEventArgs e)Di2015NewLine{Di2015NewLine    HtmlGenericControl myLi = (HtmlGenericControl)e.Item.FindControl("listItem");Di2015NewLine    myLi.Attributes.Add("class", myLi.Attributes["class"].ToString() + " yournewclass");Di2015NewLine}Di2015NewLine
18298023Di2015UniqueSeparator=
18298023Di2015UniqueSeparator==
18298023Di2015UniqueSeparatora = b = c
18298023Di2015UniqueSeparatorc
18298023Di2015UniqueSeparatorb
18298023Di2015UniqueSeparatora
18298023Di2015UniqueSeparatorif
18298023Di2015UniqueSeparatorb = c;Di2015NewLinea = b;Di2015NewLineif (a) { }Di2015NewLine
18298023Di2015UniqueSeparator// no need to check if a == cDi2015NewLineif (a == b && b == c) {  }Di2015NewLine
18298221Di2015UniqueSeparatorpublic static class MyClassFactoryDi2015NewLine{Di2015NewLine  public static MyClass Create(ISomeService serviceA, ISomeOtherService serviceB)Di2015NewLine  {Di2015NewLine    return new MyClass(serviceA, serviceB);Di2015NewLine  }Di2015NewLineDi2015NewLine  public static MyClass CreateEmpty()Di2015NewLine  {Di2015NewLine    return new MyClass();Di2015NewLine  }Di2015NewLineDi2015NewLine//Just an example, but in general not really recommended.Di2015NewLine//May be acceptable for simple projects, but for large onesDi2015NewLine//remembering what does "Default" mean is an unnecessary burdenDi2015NewLine//and it somehow reduces readability.Di2015NewLine  public static MyClass CreateWithDefaultServices()      Di2015NewLine  {Di2015NewLine    return new MyClass(/*...*/);Di2015NewLine  }Di2015NewLine  //...Di2015NewLine}Di2015NewLine
18298221Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void it_should_do_something()Di2015NewLine{Di2015NewLine    //ArrangeDi2015NewLine    var myClass = MyClassFactory.Create(serviceA, serviceB);Di2015NewLineDi2015NewLine    //ActDi2015NewLine    MyClass.DoSomething();Di2015NewLineDi2015NewLine    //AssertDi2015NewLine    //...Di2015NewLine}Di2015NewLine
18298221Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void it_should_do_something()Di2015NewLine{Di2015NewLine    //ArrangeDi2015NewLine    var myClass = MyClassFactory.Create(Di2015NewLine        MyServiceFactory.CreateStubWithTemperature(45),Di2015NewLine        MyOtherServiceFactory.CreateStubWithContents("test string"));Di2015NewLineDi2015NewLine    //ActDi2015NewLine    MyClass.DoSomething();Di2015NewLineDi2015NewLine    //AssertDi2015NewLine    //...Di2015NewLine}Di2015NewLine
18298221Di2015UniqueSeparatorpublic static MyClassTestExtensionsDi2015NewLine{Di2015NewLine  public static MyClass WithService(Di2015NewLine      this MyClass @this,Di2015NewLine      ISomeService service)Di2015NewLine  {Di2015NewLine    @this.SomeService = service; //or something like thisDi2015NewLine    return @this;Di2015NewLine  }Di2015NewLineDi2015NewLine  public static MyClass WithOtherService(Di2015NewLine      this MyClass @this,Di2015NewLine      ISomeOtherService service)Di2015NewLine  {Di2015NewLine    @this.SomeOtherService = service; //or something like thisDi2015NewLine    return @this;Di2015NewLine  }Di2015NewLine}Di2015NewLine
18298221Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void it_should_do_something()Di2015NewLine{Di2015NewLine    //ArrangeDi2015NewLine    var serviceA = MyServiceFactory.CreateStubWithTemperature(45);Di2015NewLine    var serviceB = MyOtherServiceFactory.CreateStubWithContents("test string");Di2015NewLine    var myClass = MyClassFactoryDi2015NewLine        .CreateEmpty()Di2015NewLine        .WithService(serviceA)Di2015NewLine        .WithOtherService(serviceB);Di2015NewLineDi2015NewLine    //ActDi2015NewLine    MyClass.DoSomething();Di2015NewLineDi2015NewLine    //AssertDi2015NewLine    //...Di2015NewLine}Di2015NewLine
18298221Di2015UniqueSeparator//serviceA and serviceB creationDi2015NewLinevar myClass = MyClassFactoryDi2015NewLine  .WithServiceA(serviceA)Di2015NewLine  .WithServiceB(serviceB)Di2015NewLine  .CreateMyClass();Di2015NewLine
18298366Di2015UniqueSeparatorstring s = "âAugust â11, â2013, â?â11:00:00 PM";Di2015NewLine
18298366Di2015UniqueSeparatorAugust
18298366Di2015UniqueSeparatorvar chars = s.ToCharArray();Di2015NewLine
18298366Di2015UniqueSeparatorvar newstr = new string(s.Where(c => c <128).ToArray())Di2015NewLine
18298432Di2015UniqueSeparatorint input = ...Di2015NewLineswitch (input)Di2015NewLine{Di2015NewLine    case 0:Di2015NewLine        Console.WriteLine("Zero");Di2015NewLine        default;Di2015NewLine    default:Di2015NewLine        switch (input < 100)Di2015NewLine        {Di2015NewLine            case true:Di2015NewLine                switch (Math.Abs(input) % 10)Di2015NewLine                {Di2015NewLine                    case 0:Di2015NewLine                        Console.WriteLine("Multiple of 10");Di2015NewLine                        break;Di2015NewLine                    case 2:Di2015NewLine                    case 4:Di2015NewLine                    case 6:Di2015NewLine                    case 8:Di2015NewLine                        Console.WriteLine("Even");Di2015NewLine                        break;Di2015NewLine                    default:Di2015NewLine                        Console.WriteLine("Odd");Di2015NewLine                        break;Di2015NewLine                }Di2015NewLine                break;Di2015NewLine            default:Di2015NewLine                Console.WriteLine("Too large");Di2015NewLine                break;Di2015NewLine        }Di2015NewLine        break;Di2015NewLine}Di2015NewLine
18298432Di2015UniqueSeparatorswitch
18298432Di2015UniqueSeparatorSelect
18298432Di2015UniqueSeparatorswitch
18298782Di2015UniqueSeparator//test to see if the DataGridView has any rowsDi2015NewLineif (gridIn.RowCount > 0)Di2015NewLine{Di2015NewLine    string value = "";Di2015NewLine    DataGridViewRow dr = new DataGridViewRow();Di2015NewLine    StreamWriter swOut = new StreamWriter(outputFile);Di2015NewLineDi2015NewLine    //write header rows to csvDi2015NewLine    for (int i = 0; i <= gridIn.Columns.Count - 1; i++)Di2015NewLine    {Di2015NewLine        if (i > 0)Di2015NewLine        {Di2015NewLine            swOut.Write(",");Di2015NewLine        }Di2015NewLine        swOut.Write(gridIn.Columns[i].HeaderText);Di2015NewLine    }Di2015NewLineDi2015NewLine    swOut.WriteLine();Di2015NewLineDi2015NewLine    //write DataGridView rows to csvDi2015NewLine    bool previousSkipped = false;Di2015NewLine    for (int j = 0; j <= gridIn.Rows.Count - 1; j++)Di2015NewLine    {Di2015NewLine        if (j > 0 && !previousSkipped)Di2015NewLine        {Di2015NewLine            swOut.WriteLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        dr = gridIn.Rows[j];Di2015NewLineDi2015NewLine        for (int i = 0; i <= gridIn.Columns.Count - 1; i++)Di2015NewLine        {Di2015NewLine            if (dr.Cells[2].Value.ToString().ToLower().Contains(Selected_Combo.ToLower()))Di2015NewLine            {Di2015NewLine                if (i > 0)Di2015NewLine                {Di2015NewLine                    swOut.Write(",");Di2015NewLine                }Di2015NewLineDi2015NewLine                value = dr.Cells[i].Value.ToString();Di2015NewLine                //replace comma's with spacesDi2015NewLine                value = value.Replace(',', ' ');Di2015NewLine                //replace embedded newlines with spacesDi2015NewLine                value = value.Replace(Environment.NewLine, " ");Di2015NewLineDi2015NewLine                swOut.Write(value);Di2015NewLine                previousSkipped = false;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                previousSkipped = true; //To avoid using swOut.WriteLine(); more than requiredDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    swOut.Close();Di2015NewLine}Di2015NewLine
18298782Di2015UniqueSeparatorSelected_Combo
18298782Di2015UniqueSeparatorToLower()
18298796Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     ListViewItem item = new ListViewItem(textBox1.Text);Di2015NewLine     Form1 f1 = new Form();Di2015NewLine     f1.listView1.Items.Add(item);Di2015NewLine}Di2015NewLine
18299043Di2015UniqueSeparatornew Vector2(position.X + (texture.Width / 2), position.Y +(texture.Height / 2))Di2015NewLine
18299043Di2015UniqueSeparatornew Vector2(texture.Width / 2, texture.Height / 2)Di2015NewLine
18299089Di2015UniqueSeparatorawait
18299089Di2015UniqueSeparatorasync/await
18299207Di2015UniqueSeparatorFrameworkElement
18299207Di2015UniqueSeparatorFrameworkElement.VisibilityProperty
18299207Di2015UniqueSeparatorAddElementConvention<FrameworkElement>(Di2015NewLine    FrameworkElement.VisibilityProperty, "DataContext", "Loaded");Di2015NewLine
18299207Di2015UniqueSeparatorMicrosoft.Phone.Controls.DatePicker
18299207Di2015UniqueSeparatorDateTimePickerBase
18299207Di2015UniqueSeparatorControl
18299207Di2015UniqueSeparatorFrameworkElement
18299207Di2015UniqueSeparatorDateTime
18299207Di2015UniqueSeparatorDatePicker
18299207Di2015UniqueSeparatorVisibilityProperty
18299207Di2015UniqueSeparator<toolkit:DatePicker Value="{Bidning DateOfBirth}" />
18299207Di2015UniqueSeparatorConventionManager.AddElementConvention<DatePicker>(Di2015NewLine     DateTimePickerBase.ValueProperty, "Value", "SelectedDate");Di2015NewLine
18299207Di2015UniqueSeparatorAddElementConvention<DatePicker>
18299249Di2015UniqueSeparatorIEnumerable.GetEnumerator()
18299249Di2015UniqueSeparatorIEnumerable
18299249Di2015UniqueSeparatorEnumerableItem
18299249Di2015UniqueSeparatorEnumerableDllItem
18299249Di2015UniqueSeparatorIEnumerable
18299249Di2015UniqueSeparatorItemEnumerable<T>
18299249Di2015UniqueSeparatorDllItemEnumerable<T>
18299249Di2015UniqueSeparatorIEnumerable
18299249Di2015UniqueSeparatorDLL<T>
18299249Di2015UniqueSeparatorDLL<T>
18299249Di2015UniqueSeparatorItemEnumerable<T>
18299249Di2015UniqueSeparatorDllItemEnumerable<T>
18299388Di2015UniqueSeparatorstring txt = Regex.Replace(txt1.Text, "[+^%~()]", "{$0}");Di2015NewLineSendKeys.Send(txt);Di2015NewLine
18299388Di2015UniqueSeparator[+^%~()]
18299407Di2015UniqueSeparatorRenderOptions.EdgeMode
18299407Di2015UniqueSeparatorAliased
18299407Di2015UniqueSeparator<Window x:Class="Test.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    Title="MainWindow" Height="350" Width="525">Di2015NewLine<Grid>Di2015NewLine    <ScrollViewer HorizontalAlignment="Stretch" Name="scrollViewer1" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">Di2015NewLine        <Grid>Di2015NewLine            <Grid Background="Black" Width="500" Height="500" VerticalAlignment="Top" HorizontalAlignment="Left" RenderOptions.EdgeMode="Aliased"/>Di2015NewLine            <Grid Background="Black" Width="500" Height="500" Margin="500,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" RenderOptions.EdgeMode="Aliased"/>Di2015NewLine            <Grid Background="Black" Width="500" Height="500" Margin="500,500,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" RenderOptions.EdgeMode="Aliased"/>Di2015NewLine            <Grid Background="Black" Width="500" Height="500" Margin="0,500,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" RenderOptions.EdgeMode="Aliased"/>Di2015NewLine        </Grid>Di2015NewLine    </ScrollViewer>Di2015NewLine</Grid>Di2015NewLine
18299766Di2015UniqueSeparatorif (textBox1.Text = " ")Di2015NewLine
18299766Di2015UniqueSeparatorif (textBox1.Text == " ")Di2015NewLine
18299766Di2015UniqueSeparator=
18299766Di2015UniqueSeparator==
18299766Di2015UniqueSeparatorSqlCommand cmd = new SqlCommand(" DELETE from Records WHERE [Student ID] = @studentID", con);Di2015NewLinecmd.Parameters.AddWithValue("@studentID", textBox1.Text);Di2015NewLineMessageBox.Show("Data Deleted!", "Information ... ", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);Di2015NewLineDi2015NewLinetextBox1.Text = " ";Di2015NewLineDi2015NewLineif (String.IsNullOrWhiteSpace(textBox1.Text)) Di2015NewLine{Di2015NewLine    MessageBox.Show("Please enter Student ID", "Delete Failed",MessageBoxButtons.OK,MessageBoxIcon.Error,MessageBoxDefaultButton.Button1);Di2015NewLine}Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLinecon.Close();Di2015NewLine
18299766Di2015UniqueSeparatorString.IsNullOrWhiteSpace
18299766Di2015UniqueSeparatortextBox1.Text = " ";Di2015NewLineDi2015NewLineif (String.IsNullOrWhiteSpace(textBox1.Text)) Di2015NewLine
18299815Di2015UniqueSeparatorif (! pattern.IsMatch(txtCustName.Text))Di2015NewLine
18299829Di2015UniqueSeparator"select * from apps.drinks where drink_name is ='" + listBox1.Text + "'; "Di2015NewLine
18299829Di2015UniqueSeparatoris =
18299829Di2015UniqueSeparatoris
18299829Di2015UniqueSeparator"select * from apps.drinks where drink_name ='" + listBox1.Text + "'; "Di2015NewLine
18300053Di2015UniqueSeparator<asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" DataSourceID="Project_List" Di2015NewLine    Width="800px" EditRowStyle-Width="800px" RowStyle-BackColor="#D8D8D8" Di2015NewLine    AlternatingRowStyle-BackColor="#ffffff" DataKeyNames="project_id">Di2015NewLine    <Columns>Di2015NewLine        <asp:TemplateField HeaderText="Updates">Di2015NewLine            <ItemTemplate>Di2015NewLine                <asp:ImageButton ID="gridEditButton" runat="server" CommandName="Edit" ImageUrl="~/images/edit.png" ToolTip="Edit" />Di2015NewLine                <asp:ImageButton ID="gridDeleteButton" runat="server" CommandArgument="Delete" CommandName="Delete" ImageUrl="~/images/cancel.png" ToolTip="Delete"  OnClientClick="return confirm('Are you sure you want to delete this record?');" />Di2015NewLine            </ItemTemplate>Di2015NewLine            <EditItemTemplate>Di2015NewLine                <asp:ImageButton ID="gridUpdateButton" runat="server" CommandName="Update" ImageUrl="~/images/save.png" ToolTip="Update"/>Di2015NewLine                <asp:ImageButton ID="gridCancelButton" runat="server" CommandName="Cancel" ImageUrl="~/images/cancel.png" ToolTip="Cancel"/>Di2015NewLine            </EditItemTemplate>Di2015NewLine        </asp:TemplateField>Di2015NewLineDi2015NewLine        <asp:BoundField DataField="project_id" ItemStyle-CssClass="hiddencol"  HeaderStyle-CssClass="hiddencol" />Di2015NewLine        <asp:BoundField DataField="functional_sponsor" HeaderText="Functional Sponsor" SortExpression="functional_sponsor" />Di2015NewLine        <asp:BoundField DataField="program_name" HeaderText="Program" SortExpression="program_name" />Di2015NewLine        <asp:BoundField DataField="project_name" HeaderText="Project" SortExpression="project_name" />Di2015NewLine        <asp:BoundField DataField="approval_status" HeaderText="Approval Status" SortExpression="approval_status" />Di2015NewLine        <asp:BoundField DataField="approved_date" HeaderText="Approved Date" SortExpression="approved_date" />Di2015NewLine        <asp:BoundField DataField="approved_by" HeaderText="Approved By" SortExpression="approved_by" />Di2015NewLine        <asp:BoundField DataField="charge_code" HeaderText="Charge Code" SortExpression="charge_code" />Di2015NewLine        <asp:BoundField DataField="open_date" HeaderText="Open Date" SortExpression="open_date" />Di2015NewLine        <asp:BoundField DataField="close_date" HeaderText="Close Date" SortExpression="close_date" />Di2015NewLine        <asp:BoundField DataField="project_sponsor" HeaderText="Sponsor" SortExpression="project_sponsor" />Di2015NewLine        <asp:BoundField DataField="project_manager" HeaderText="Project Manager" SortExpression="project_manager" />Di2015NewLine        <asp:BoundField DataField="technical_lead" HeaderText="Technical Lead" SortExpression="technical_lead" />Di2015NewLine        <asp:BoundField DataField="approved_amount" HeaderText="Approved Amount ($K)" SortExpression="approved_amount" />Di2015NewLine        <asp:BoundField DataField="requested_amount" HeaderText="Requested Amount ($K)" SortExpression="requested_amount" />Di2015NewLine    </Columns>Di2015NewLine</asp:GridView>Di2015NewLine<asp:SqlDataSource ID="Project_List" runat="server" Di2015NewLine    ConnectionString="<%$ ConnectionStrings:ProjectDB %>" Di2015NewLine    SelectCommand="SELECT * FROM [vw_IT_Portfolio] ORDER BY [functional_sponsor], [program_name], [project_name]"Di2015NewLine    DeleteCommand="DELETE FROM [vw_IT_Portfolio] WHERE [project_id] = @project_id" Di2015NewLineDi2015NewLine    UpdateCommand="UPDATE [vw_IT_Portfolio] SET [functional_sponsor] = @functional_sponsor, [program_name] = @program_name, [project_name] = @project_name, [approval_status] = @approval_status, [approved_date] = @approved_date, [approved_by] = @approved_by, [charge_code] = @charge_code, [open_date] = @open_date, [close_date] = @close_date, [project_sponsor] = @project_sponsor, [project_manager] = @project_manager, [technical_lead] = @technical_lead, [approved_amount] = @approved_amount, [requested_amount] = @requested_amount WHERE [project_id] = @project_id">Di2015NewLine    <DeleteParameters>Di2015NewLine         <asp:Parameter Name="project_id" Type="Int32" />Di2015NewLine    </DeleteParameters>Di2015NewLine    <UpdateParameters>Di2015NewLine        <asp:Parameter Type="Int32" Name="project_id"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="functional_sponsor"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="program_name"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="project_name"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="approval_status"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="approved_date"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="approved_by"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="charge_code"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="open_date"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="close_date"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="project_sponsor"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="project_manager"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="String" Name="technical_lead"></asp:Parameter>Di2015NewLine        <asp:Parameter Type="Decimal" Name="approved_amount"></asp:Parameter>Di2015NewLine        <asp:Parameter Name="requested_amount" Type="String" />Di2015NewLine    </UpdateParameters>Di2015NewLine</asp:SqlDataSource>Di2015NewLine
18300091Di2015UniqueSeparatoryourTextBox.MaxLengh = (int)yourComboBox.Value;Di2015NewLine
18300091Di2015UniqueSeparator// ...Di2015NewLinestring sType = myReader.ToString();Di2015NewLineDi2015NewLineswitch(sType){Di2015NewLine    case "Low": txtDesc.MaxLength= 50; break;Di2015NewLine    case "Medium": txtDesc.MaxLength= 100; break;Di2015NewLine    case "High": txtDesc.MaxLength= 150; break;Di2015NewLine}Di2015NewLineDi2015NewLine// ...Di2015NewLine
18300092Di2015UniqueSeparatoroneDocument[key]
18300092Di2015UniqueSeparatoroneDocument[value]
18300092Di2015UniqueSeparatorusing MongoDB.Driver;Di2015NewLineusing MongoDB.Bson;Di2015NewLineusing MongoDB.Driver.Builders;Di2015NewLinevar client = new MongoClient("mongodb://localhost");Di2015NewLinevar coll = client.GetServer().GetDatabase("local").GetCollection("test1");Di2015NewLinevar doc = new BsonDocument();Di2015NewLinedoc.Add("Name","John");Di2015NewLinedoc.Add("Color","Red");Di2015NewLinecoll.Insert(doc);Di2015NewLinevar query = Query.EQ("Name", "John");Di2015NewLinevar doc2 = coll.FindOne(query);Di2015NewLinevar value = doc2["Color"];Di2015NewLine
18300092Di2015UniqueSeparator"Red"
18300198Di2015UniqueSeparatorSELECT MAX() + 1
18300198Di2015UniqueSeparatorID INT IDENTITY(1,1)
18300198Di2015UniqueSeparatorCREATE TABLE dbo.tblCompanyDi2015NewLine  (ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,Di2015NewLine   CompanyID AS 'CP-' + RIGHT('00000' + CAST(ID AS VARCHAR(5)), 5) PERSISTED,Di2015NewLine   .... your other columns here....Di2015NewLine  )Di2015NewLine
18300198Di2015UniqueSeparatortblCompany
18300198Di2015UniqueSeparatorID
18300198Di2015UniqueSeparatorCompanyID
18300198Di2015UniqueSeparatorINSERT INTO dbo.tblCompany(Col1, Col2, ..., ColN)Di2015NewLineVALUES (Val1, Val2, ....., ValN)Di2015NewLine
18300198Di2015UniqueSeparatorID
18300198Di2015UniqueSeparatorCompanyID
18300198Di2015UniqueSeparatorCP-00001
18300198Di2015UniqueSeparatorCP-00002
18300198Di2015UniqueSeparatorCompanyID
18300198Di2015UniqueSeparatorCREATE TABLE dbo.tblCompanyDi2015NewLine  (ID INT IDENTITY(1,1) NOT NULL,Di2015NewLine   CompanyID AS 'CP-' + RIGHT('00000' + CAST(ID AS VARCHAR(5)), 5) PERSISTEDDi2015NewLine      CONSTRAINT PK_tblCompany PRIMARY KEY NONCLUSTERED,Di2015NewLine   .... your other columns here....Di2015NewLine  )Di2015NewLineDi2015NewLineCREATE CLUSTERED INDEX CIX_Company ON dbo.tblCompany(ID);Di2015NewLine
18300198Di2015UniqueSeparatorID
18300198Di2015UniqueSeparatorCompanyID
18300304Di2015UniqueSeparatorHostingEnvironment.RegisterVirtualPathProvider
18300304Di2015UniqueSeparatorApplication_Start
18300304Di2015UniqueSeparatorglobal.asax.cs
18300304Di2015UniqueSeparatorprotected void Application_Start() {Di2015NewLine    HostingEnvirontment.RegisterVirtualPathProvider(new MyVPProvider());Di2015NewLine}Di2015NewLine
18300351Di2015UniqueSeparatorList<MyClass> list1 = new List<MyClass>();Di2015NewLineList<MyClass> list2  = new List<MyClass>();Di2015NewLine
18300351Di2015UniqueSeparator// Merge two ListDi2015NewLinelist1.AddRange(list2);Di2015NewLine
18300351Di2015UniqueSeparatorList<MyClass> sortedList = list1.OrderBy(x => x.row).ThenBy(x => x.column).ToList();Di2015NewLine
18300675Di2015UniqueSeparator_
18300675Di2015UniqueSeparatorx
18300675Di2015UniqueSeparator_
18300675Di2015UniqueSeparator_
18300773Di2015UniqueSeparatordouble larger = 16.1d; //Assign closest double representation of 16.1.Di2015NewLinedouble smaller = 6.1; //Assign closest double representation of 6.1.Di2015NewLinedouble diff = larger - smaller; //Assign closest diff between larger and  Di2015NewLine                                //smaller, but since a smaller value has a  Di2015NewLine                                //larger precision the result will have better  Di2015NewLine                                //precision than larger but worse than smaller. Di2015NewLine                                //The difference shows up as the ...000002.Di2015NewLine
18300773Di2015UniqueSeparatorAssert.Equal
18300773Di2015UniqueSeparatordelta
18300773Di2015UniqueSeparatordecimal
18300773Di2015UniqueSeparator10
18300849Di2015UniqueSeparator<Grid>Di2015NewLineDi2015NewLine    <Grid.Resources>Di2015NewLine        <x:Array Type="{x:Type sys:String}" x:Key="cmbCarListItems">Di2015NewLine            <sys:String>Toyota</sys:String>Di2015NewLine            <sys:String>Kia</sys:String>Di2015NewLine            <sys:String>Audi</sys:String>Di2015NewLine        </x:Array>Di2015NewLine    </Grid.Resources>Di2015NewLineDi2015NewLine    <!-- Not using IsSynchronizedWithCurrentItem="True" -->Di2015NewLine    <ComboBox Name="cmbCarList" Di2015NewLine              Text="--Select Cars--" Di2015NewLine              IsEditable="True"Di2015NewLine              Cursor="Hand"Di2015NewLine              ItemsSource="{StaticResource cmbCarListItems}"  Di2015NewLine              SelectionChanged="cmbCarList_SelectionChanged">Di2015NewLine    </ComboBox>Di2015NewLineDi2015NewLine</Grid>Di2015NewLine
18301145Di2015UniqueSeparatorDirectory image
18301145Di2015UniqueSeparator0
18301145Di2015UniqueSeparatorimagelist
18301145Di2015UniqueSeparatorFile image
18301145Di2015UniqueSeparator1
18301145Di2015UniqueSeparatorprivate static TreeNode CreateDirectoryNode(DirectoryInfo directoryInfo)Di2015NewLine{Di2015NewLine    var directoryNode = new TreeNode(directoryInfo.Name){ImageIndex=0};Di2015NewLineDi2015NewLine    foreach (var directory in directoryInfo.GetDirectories())Di2015NewLine    {Di2015NewLine        directoryNode.Nodes.Add(CreateDirectoryNode(directory));Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    foreach (var file in directoryInfo.GetFiles())Di2015NewLine    {Di2015NewLine        directoryNode.Nodes.Add(new TreeNode(file.Name){ImageIndex=1});Di2015NewLine    }Di2015NewLine    return directoryNode;Di2015NewLine}Di2015NewLine
18301153Di2015UniqueSeparatorstring query ="SELECT MAX(ID) FROM Customer";Di2015NewLineSqlCeCommand comSelect = new SqlCeCommand(query, connection);Di2015NewLineint ID = (int)comSelect.ExecuteScalar();Di2015NewLine
18301153Di2015UniqueSeparatorSELECT MAX(ID)
18301153Di2015UniqueSeparatorstring query ="INSERT INTO Customers (Name, Address, .....) VALUES (.....)";Di2015NewLineSqlCeCommand comInsert = new SqlCeCommand(query, connection);Di2015NewLinecomInsert.ExecuteNonQuery();Di2015NewLinequery ="SELECT @@IDENTITY";Di2015NewLineSqlCeCommand comSelect = new SqlCeCommand(query, connection);Di2015NewLineint ID = (int)comSelect.ExecuteScalar();Di2015NewLine
18301173Di2015UniqueSeparatorpublic class ViewModelBase Di2015NewLine{Di2015NewLine    private string _aProperty = "A";Di2015NewLine    public virtual string AProperty Di2015NewLine    {Di2015NewLine        get { return _aProperty; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoSomething() Di2015NewLine    {Di2015NewLine        Console.WriteLine(AProperty);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DerivedViewModel : ViewModelBase Di2015NewLine{Di2015NewLine    private string _bProperty = "B";Di2015NewLine    public override string AProperty Di2015NewLine    {Di2015NewLine        get { return _bProperty; }Di2015NewLine    } Di2015NewLine}Di2015NewLineDi2015NewLineDerivedViewModel dr = new DerivedViewModel();Di2015NewLinedr.DoSomething();//Prints BDi2015NewLine
18301564Di2015UniqueSeparatorHighlightBrushKey
18301564Di2015UniqueSeparatorTimePickerControl
18301564Di2015UniqueSeparatorRed
18301564Di2015UniqueSeparator<TimePicker.Resources>Di2015NewLine    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"Di2015NewLine                     Color="Red"/>Di2015NewLine</TimePicker.Resources>Di2015NewLine
18301640Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // INITIALIZE Di2015NewLine    using(SqlConnection conn = new SqlConnection("......"))Di2015NewLine    {Di2015NewLine         // OPENDi2015NewLine         conn.Open();Di2015NewLine         string query = "INSERT INTO empleados VALUES (@Nombre, @Apellidos, @Departamento, @Carnet)";Di2015NewLine         // USEDi2015NewLine         using(SqlCommand vCom = new SqlCommand(query, conn))Di2015NewLine         {Di2015NewLine             ....Di2015NewLine         }Di2015NewLine    } // <- CLOSE & DISPOSEDi2015NewLine}Di2015NewLine
18301669Di2015UniqueSeparatorStream.Read()
18301669Di2015UniqueSeparatorstatic void CopyStream(Stream from, Stream to)Di2015NewLine{Di2015NewLine    var buffer = new byte[2048];Di2015NewLine    while(true)Di2015NewLine    {Di2015NewLine        int bytesRead = from.Read(buffer, 0, buffer.Length);Di2015NewLine        if(bytesRead == 0) break; // 0 means end of streamDi2015NewLine        to.Write(buffer, 0, bytesRead);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinelocalSide() { CopyStream(local, remote); }Di2015NewLineremoteSide() { CopyStream(remote, local); }Di2015NewLine
18301678Di2015UniqueSeparatorpublic int this_Methode()Di2015NewLine{Di2015NewLineDi2015NewLine    if (Machine.BMW == null){Di2015NewLine        Machine.BMW = new _car();Di2015NewLine        return 1;Di2015NewLine    }Di2015NewLine    return 0;Di2015NewLine}Di2015NewLineDi2015NewLine    int i=this_Methode();  //i = 1 as new car was created.Di2015NewLineDi2015NewLine    i+=this_Methode();  Unless there is some other code running, this_Methode() will return zero as the car was already created.Di2015NewLine
18301678Di2015UniqueSeparatoryou tell me i's value? Is 0 or 1 or 2?
18301775Di2015UniqueSeparatorController.Post(testString)
18301775Di2015UniqueSeparator.Customize(x => x.WaitForNonStaleResults())Di2015NewLine
18301802Di2015UniqueSeparator<items>Di2015NewLine
18301802Di2015UniqueSeparator<items xmlns="">Di2015NewLine
18302046Di2015UniqueSeparatorForms Authentication
18302260Di2015UniqueSeparatorTestCaseAttribute
18302260Di2015UniqueSeparator[Test]Di2015NewLine[TestCase("5*5", 25)]Di2015NewLine[TestCase("5*5*5", 125)]Di2015NewLine[TestCase("5+5", 10)]Di2015NewLine// etcDi2015NewLinepublic void Parse_SimpleValues_Calculated(string input, int expectedOutput)Di2015NewLine{Di2015NewLine    Assert.AreEqual(expectedOutput, test.ParseCalculationString(input));Di2015NewLine}Di2015NewLine
18302260Di2015UniqueSeparatorTestCaseSourceAttribute
18302667Di2015UniqueSeparatorvar web = new HtmlAgilityPack.HtmlWeb();Di2015NewLinevar doc = web.Load(url);Di2015NewLinevar list = doc.DocumentNode.SelectNodes("//a[@class='name notranslate']")Di2015NewLine               .Select(a => a.Attributes["href"].Value)Di2015NewLine               .ToList();Di2015NewLine
18302671Di2015UniqueSeparatorSource
18302671Di2015UniqueSeparatorvar webClient = new WebClient();Di2015NewLinevar url = ((currentDevice as AUDIO).AlbumArt;Di2015NewLinevar bitmap = new BitmapImage();Di2015NewLineDi2015NewLineusing (var stream = new MemoryStream(webClient.DownloadData(url)))Di2015NewLine{Di2015NewLine    bitmap.BeginInit();Di2015NewLine    bitmap.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine    bitmap.StreamSource = stream;Di2015NewLine    bitmap.EndInit();Di2015NewLine}Di2015NewLineDi2015NewLineimage.Source = bitmap;Di2015NewLine
18302671Di2015UniqueSeparatorFreeze
18302671Di2015UniqueSeparatorSource
18302671Di2015UniqueSeparatorvar bitmap = new BitmapImage();Di2015NewLineDi2015NewLineusing (var stream = new MemoryStream(webClient.DownloadData(url)))Di2015NewLine{Di2015NewLine    bitmap.BeginInit();Di2015NewLine    bitmap.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine    bitmap.StreamSource = stream;Di2015NewLine    bitmap.EndInit();Di2015NewLine}Di2015NewLineDi2015NewLinebitmap.Freeze();Di2015NewLineimage.Dispatcher.Invoke((Action)(() => image.Source = bitmap));Di2015NewLine
18302709Di2015UniqueSeparatorFullModeItemTemplate
18302709Di2015UniqueSeparator<toolkit:ListPicker x:Name="sightingTypesPicker" ItemsSource="{Binding sightingTypes, ElementName=this}">Di2015NewLine    <toolkit:ListPicker.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <StackPanel>Di2015NewLine                <TextBlock Text="{Binding Name}" FontSize="{StaticResource PhoneFontSizeSmall}"/>Di2015NewLine            </StackPanel>Di2015NewLine        </DataTemplate>Di2015NewLine    </toolkit:ListPicker.ItemTemplate>Di2015NewLine    <toolkit:ListPicker.FullModeItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <StackPanel>Di2015NewLine                <TextBlock Text="{Binding Name}" FontSize="{StaticResource PhoneFontSizeSmall}"/>Di2015NewLine                <TextBlock Text="{Binding SomeOtherProp}" FontSize="{StaticResource PhoneFontSizeSmall}"/>Di2015NewLine            </StackPanel>Di2015NewLine        </DataTemplate>Di2015NewLine    </toolkit:ListPicker.FullModeItemTemplate>Di2015NewLine</toolkit:ListPicker>Di2015NewLine
18302709Di2015UniqueSeparator<toolkit:ListPicker x:Name="sightingTypesPicker" Di2015NewLine                    ItemsSource="{Binding SightingTypes}"Di2015NewLine                    SelectedItem="{Binding SelectedSigntingType, Mode=TwoWay}">Di2015NewLine
18302709Di2015UniqueSeparatorsightingTypesPicker.SelectionChanged += (s, e) => {Di2015NewLine    MessageBox.Show(((SightingType)e.AddedItems[0]).ID);Di2015NewLine};Di2015NewLine
18302846Di2015UniqueSeparatorpublic void Read()Di2015NewLine{Di2015NewLine     HtmlDocument topDocument = LoadDocument("blah.uk");Di2015NewLine     IEnumerable<HtmlNode> topLinks = ReadLinks(topDocument, "main_nav");Di2015NewLine     foreach (HtmlNode topLink in topLinks) {Di2015NewLine         HtmlDocument catDoc = LoadDocument("littletreasurespartybags" + toplink.Attributes["href"].Value);Di2015NewLine         IEnumerable<HtmlNode> catLinks = ReadLinks(topDocument, "main_nav");Di2015NewLine         foreach (HtmlNode catLink in catLinks) {Di2015NewLine             .....Di2015NewLine         }Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLineprivate HtmlDocument LoadDocument(string Url) { ..... }Di2015NewLineprivate IEnumerable<HtmlNode> ReadLinks(HtmlDocument document, string topElement) { ....}Di2015NewLine
18303022Di2015UniqueSeparatorparameters
18303022Di2015UniqueSeparatorGet["/query"]
18303022Di2015UniqueSeparatorRequest.Query
18303022Di2015UniqueSeparator Get["/query"] = parameters =>Di2015NewLine    {Di2015NewLine        var rawStart = Request.Quert.start;Di2015NewLine        var rawEnd = Request.Query.end;Di2015NewLine        var metrics = Request.Query.metrics;Di2015NewLineDi2015NewLine        return Response.AsJson(0);Di2015NewLine    };Di2015NewLine
18303051Di2015UniqueSeparatorForm1
18303051Di2015UniqueSeparatorForm2
18303051Di2015UniqueSeparatorSystem.Windows.Forms.Form
18303051Di2015UniqueSeparatorusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static void OpenForm<T>(this T frm, Form parent) where T : Form, new()Di2015NewLine    {Di2015NewLine        if (frm != null && FormOpen(frm.Text))Di2015NewLine            frm.Activate();Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            frm = new T();Di2015NewLine            frm.MdiParent = parent;Di2015NewLine            frm.FormClosed += (sender, args) => {frm.Dispose(); frm = null;};Di2015NewLine            frm.Show();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static bool FormOpen(string name)Di2015NewLine    {Di2015NewLine        FormCollection fc = Application.OpenForms;Di2015NewLineDi2015NewLine        foreach (Form frm in fc)Di2015NewLine        {Di2015NewLine            if (frm.Text == name)Di2015NewLine                return true;Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18303051Di2015UniqueSeparatorExtensions.cs
18303051Di2015UniqueSeparatorForm1
18303051Di2015UniqueSeparatornewform1.OpenForm(this)
18303245Di2015UniqueSeparatorpublic string @protected {get; set; }
18303245Di2015UniqueSeparatorprivate string _protected;Di2015NewLineDi2015NewLinepublic string @protected Di2015NewLine{Di2015NewLine    get Di2015NewLine    {Di2015NewLine       //any additional code you wantDi2015NewLine        return _protected;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine       //any additional code you wantDi2015NewLine        _protected = value;Di2015NewLine    }Di2015NewLine} Di2015NewLine
18303342Di2015UniqueSeparatorSomeObject
18303342Di2015UniqueSeparatorclass CDi2015NewLine{Di2015NewLine  void MethodCalledMillionsOfTimes()Di2015NewLine  {Di2015NewLine    var so = new SomeObject();Di2015NewLine    // some use of soDi2015NewLine  }Di2015NewLine}Di2015NewLine
18303342Di2015UniqueSeparatorclass CDi2015NewLine{Di2015NewLine  SomeObject soField;Di2015NewLineDi2015NewLine  void MethodCalledMillionsOfTimes()Di2015NewLine  {Di2015NewLine    soField = new SomeObject();Di2015NewLine    // some use of soFieldDi2015NewLine  }Di2015NewLine}Di2015NewLine
18303342Di2015UniqueSeparatorclass CDi2015NewLine{Di2015NewLine  SomeObject soField = new SomeObject();Di2015NewLineDi2015NewLine  void MethodCalledMillionsOfTimes()Di2015NewLine  {Di2015NewLine    // some use of soFieldDi2015NewLine  }Di2015NewLine}Di2015NewLine
18303342Di2015UniqueSeparatorC
18303342Di2015UniqueSeparatorSomeObject
18303342Di2015UniqueSeparatorsoField
18303342Di2015UniqueSeparatorclass CDi2015NewLine{Di2015NewLine  static SomeObject soStaticField = new SomeObject();Di2015NewLineDi2015NewLine  void MethodCalledMillionsOfTimes()Di2015NewLine  {Di2015NewLine    // some use of soStaticFieldDi2015NewLine  }Di2015NewLine}Di2015NewLine
18303342Di2015UniqueSeparatorC
18303342Di2015UniqueSeparatorSomeObject
18303506Di2015UniqueSeparatorint
18303506Di2015UniqueSeparatorstring
18303506Di2015UniqueSeparatorvar scope = new Dictionary<byte, Dictionary<byte, Dictionary<byte, Dictionary<byte, string>>>>Di2015NewLine{Di2015NewLine    { 0, new Dictionary<byte, Dictionary<byte, Dictionary<byte, string>>>Di2015NewLine          {Di2015NewLine             { 0,  new Dictionary<byte, Dictionary<byte, string>>Di2015NewLine                  ...Di2015NewLine             }Di2015NewLine          }Di2015NewLine    },Di2015NewLine    { 1, new Dictionary<byte, Dictionary<byte, Dictionary<byte, string>>>Di2015NewLine          {Di2015NewLine             ...Di2015NewLine          }Di2015NewLine    },Di2015NewLineDi2015NewLine};Di2015NewLine
18303506Di2015UniqueSeparatorbyte
18303506Di2015UniqueSeparatorint
18303583Di2015UniqueSeparatorState
18303583Di2015UniqueSeparatorn
18303583Di2015UniqueSeparator45
18303583Di2015UniqueSeparator45
18303659Di2015UniqueSeparatorvar $form = $(this).attr("data-acme-target");
18303659Di2015UniqueSeparator'data-acme-target'
18303659Di2015UniqueSeparator$form.attr('action')
18303659Di2015UniqueSeparator$($(this).attr("data-acme-target"));
18303814Di2015UniqueSeparatorTimeline
18303814Di2015UniqueSeparatorStoryboard
18303814Di2015UniqueSeparatorStopStoryboard
18303814Di2015UniqueSeparatorStoryboard
18303814Di2015UniqueSeparatorStopStoryboard
18303814Di2015UniqueSeparatorEnterActions
18303814Di2015UniqueSeparatorDataTrigger
18303814Di2015UniqueSeparator<TextBlock.Style>Di2015NewLine    <Style TargetType="{x:Type TextBlock}">Di2015NewLine        <Style.Triggers>Di2015NewLine            <DataTrigger Binding="{Binding SystemIsReady, Mode=TwoWay, NotifyOnSourceUpdated=True}"  Value="False">Di2015NewLine                <DataTrigger.EnterActions>Di2015NewLine                    <BeginStoryboard Name="FadeOut">Di2015NewLine                        <Storyboard>Di2015NewLine                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0"  To="0.5"  Duration="0:0:1.5"/>Di2015NewLine                        </Storyboard>Di2015NewLine                    </BeginStoryboard>Di2015NewLine                </DataTrigger.EnterActions>Di2015NewLine            </DataTrigger>Di2015NewLine            <DataTrigger Binding="{Binding SystemIsReady, Mode=TwoWay, NotifyOnSourceUpdated=True}" Value="True">Di2015NewLine                <Setter Property="Opacity" Value="1.0"/>Di2015NewLine                <DataTrigger.EnterActions>Di2015NewLine                    <StopStoryboard BeginStoryboardName="FadeOut" />Di2015NewLine                </DataTrigger.EnterActions>Di2015NewLine            </DataTrigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</TextBlock.Style>Di2015NewLine
18303815Di2015UniqueSeparator        //Prompt for inputDi2015NewLine        System.Console.WriteLine( "Please enter the name" );Di2015NewLine        System.Console.Write( "Name> " );Di2015NewLine        string name = System.Console.ReadLine();Di2015NewLineDi2015NewLine        /*Di2015NewLine         *  Notice how I don't load the files here?Di2015NewLine         *  If one of the files is 100 MB, your program will use 100 MB of memory and possibly more.Di2015NewLine        */Di2015NewLine        string text;Di2015NewLineDi2015NewLine        //Display the attributes to the console.Di2015NewLine        System.Console.WriteLine( " " );Di2015NewLineDi2015NewLineDi2015NewLine        // Add a conditional switch statement.Di2015NewLine        switch ( name ) // This is similar to using if-else statements.Di2015NewLine        {Di2015NewLine            case "Jack":Di2015NewLine                text = System.IO.File.ReadAllText( @"D:\\Users\\Jack\\Documents\\Test\\Jack.txt" );Di2015NewLine                Console.WriteLine( text );Di2015NewLineDi2015NewLine                break; // This is used to leave the switch statement.Di2015NewLineDi2015NewLine            case "Ken":Di2015NewLine                text = System.IO.File.ReadAllText( @"D:\\Users\\Jack\\Documents\\Test\\Ken.txt" );Di2015NewLine                Console.WriteLine( text );Di2015NewLineDi2015NewLine                break;Di2015NewLineDi2015NewLine            case "Wizard":Di2015NewLine                text = System.IO.File.ReadAllText( @"D:\\Users\\Jack\\Documents\\Test\\Wizard.txt" );Di2015NewLine                Console.WriteLine( text );Di2015NewLineDi2015NewLine                break;Di2015NewLineDi2015NewLine            default: // This is when the program can't match any values above.Di2015NewLine                Console.WriteLine( "Error! No-one exists with that name!" );Di2015NewLineDi2015NewLine                break;Di2015NewLine        }Di2015NewLine
18303907Di2015UniqueSeparatorTheList.Distinct().Count() == TheList.Count()Di2015NewLine
18303942Di2015UniqueSeparatorMenuChoiceCommand
18303942Di2015UniqueSeparatorCommand
18303942Di2015UniqueSeparatorXMLBackedObject<Command>
18303942Di2015UniqueSeparatorXMLBackedObject<MenuChoiceCommand>
18303942Di2015UniqueSeparatorSave
18303942Di2015UniqueSeparatorCommand
18303942Di2015UniqueSeparatorMenuChoiceCommand
18303942Di2015UniqueSeparatorMenuChoiceCommand
18303942Di2015UniqueSeparatorXMLBackedObject<MenuChoiceCommand>
18303942Di2015UniqueSeparatorCommand
18303942Di2015UniqueSeparatorpublic static class XmlHelperDi2015NewLine{Di2015NewLine    public static T Load<T>(string filePath)Di2015NewLine    {Di2015NewLine        XmlSerializer serializer = new XmlSerializer(typeof(T));Di2015NewLine        using(FileStream stream = new FileStream(filePath, FileMode.Open))Di2015NewLine        {Di2015NewLine            return (T)serializer.Deserialize(stream);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Save<T>(T obj, string filePath)Di2015NewLine    {Di2015NewLine        XmlSerializer serializer = new XmlSerializer(typeof(T));Di2015NewLine        using(FileStream stream = new FileStream(filePath, FileMode.Create))Di2015NewLine        {Di2015NewLine            serializer.Serialize(stream, obj);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18304125Di2015UniqueSeparatorstring connectionString = @"Data Source=Storage\\Comments.sdf;Persist Security Info=False;";Di2015NewLineSqlCeConnectionconnection = new SqlCeConnection(connectionString);Di2015NewLineconnection.Open();Di2015NewLine
18304235Di2015UniqueSeparatortxtAAADi2015NewLinetxtBBBDi2015NewLinetxtCCCDi2015NewLine...etcDi2015NewLine
18304235Di2015UniqueSeparatortxt
18304235Di2015UniqueSeparatorvar data = XElement.Load("C:\\\\Test.xml").Descendants("box");Di2015NewLineDi2015NewLineforeach (var textbox in Controls.OfType<TextBox>())Di2015NewLine{Di2015NewLine    var value = data.FirstOrDefault(v => v.Attribute("id").Value == textbox.Name.Replace("txt","").ToLower());Di2015NewLine    if (value != null)Di2015NewLine    {Di2015NewLine        textbox.Text = value.Attribute("value").Value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18304250Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public string fname { get; set; }Di2015NewLine    public string lname { get; set; }Di2015NewLine    public int id { get; set; }Di2015NewLine}Di2015NewLine
18304250Di2015UniqueSeparatorvar person = new Person();Di2015NewLineperson.fname = "John";Di2015NewLineperson.lname = "Jones";Di2015NewLineperson.id = 7;Di2015NewLine
18304250Di2015UniqueSeparatorvar person = new Person {Di2015NewLine    fname = "John",Di2015NewLine    lname = "Jones",Di2015NewLine    id = 7Di2015NewLine};Di2015NewLine
18304427Di2015UniqueSeparatorMessageBox
18304427Di2015UniqueSeparatorForm
18304427Di2015UniqueSeparatorMessageBox
18304427Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    BackgroundWorker w = new BackgroundWorker();Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        w.DoWork += new DoWorkEventHandler(w_DoWork);Di2015NewLine    }Di2015NewLineDi2015NewLine    void w_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine    {Di2015NewLine        Thread.Sleep(1000);Di2015NewLine        Invoke(new Action(doit));Di2015NewLine    }Di2015NewLineDi2015NewLine    void doit()Di2015NewLine    {Di2015NewLine        Text = "Changed";Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        w.RunWorkerAsync();Di2015NewLine        MessageBox.Show("Random Text");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18304591Di2015UniqueSeparator..\\..\\..\\bin\\Silverlight\\Debug\\Caliburn.Micro.dll
18304635Di2015UniqueSeparatorItemsSource
18304635Di2015UniqueSeparator<ListView ItemsSource="{Binding Exchanges}"Di2015NewLine        Grid.Row="0" Di2015NewLine        Grid.Column="0"Di2015NewLine        SelectionMode="Single" >Di2015NewLine        <ListView.View>Di2015NewLine            <GridView>Di2015NewLine                <GridViewColumnDi2015NewLine                    DisplayMemberBinding="{Binding}"Di2015NewLine                    Header = "Exchange">Di2015NewLine                </GridViewColumn>Di2015NewLine            </GridView>Di2015NewLine        </ListView.View>Di2015NewLine    </ListView>Di2015NewLine
18304637Di2015UniqueSeparatorpublic class SchoolModelDi2015NewLine{Di2015NewLine    public string SchoolName {get; set;}Di2015NewLine    public string Address {get;set;}Di2015NewLine    public string CreatedBy {get;set;}Di2015NewLine}Di2015NewLine
18304637Di2015UniqueSeparatorpublic class HomeController : Controller Di2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        //getting info from database to variablesDi2015NewLineDi2015NewLine        SchoolModel schoolModel = new SchoolModel();Di2015NewLineDi2015NewLine        schoolModel.SchoolName = //school retrieved from database, something like context.Schools.NameDi2015NewLine        schoolModel.Address = // something like context.Schools.AddressDi2015NewLine        schoolModel.CreatedBy = // context.Users.Where(x => x.id == yourIdOrSomething)Di2015NewLine        return View(schoolModel);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18304637Di2015UniqueSeparator@model Models.SchoolModelDi2015NewLineDi2015NewLineschool: @Model.SchoolNameDi2015NewLineaddress: @Model.AddressDi2015NewLinecreated by : @Model.CreatedByDi2015NewLine
18304656Di2015UniqueSeparatorforeach
18304656Di2015UniqueSeparatoritem
18304656Di2015UniqueSeparatori
18304656Di2015UniqueSeparatorfor
18304656Di2015UniqueSeparatorint[]
18304656Di2015UniqueSeparatorint
18304656Di2015UniqueSeparatorforeach
18304656Di2015UniqueSeparatoritem
18304670Di2015UniqueSeparatorDictionary<byte, Action> actions = new Dictionary<byte, Action>()Di2015NewLine{Di2015NewLine    { 1, MyFunction1 },Di2015NewLine    { 2, MyFunction2 },Di2015NewLine    ...Di2015NewLine    { 6, MyFunction6 }Di2015NewLine};Di2015NewLineDi2015NewLineList<byte> actionList = new List<byte>() { 1, 3, 5, 6 };Di2015NewLineDi2015NewLineParallel.Invoke((from action in actionList select actions[action]).ToArray());Di2015NewLine
18304691Di2015UniqueSeparatorRichTextBox
18304691Di2015UniqueSeparatorEnableAutoDragDrop
18304691Di2015UniqueSeparatortrue
18304691Di2015UniqueSeparatorrichTextBox1.EnableAutoDragDrop = true; //Just this even without AllowDrop = trueDi2015NewLine//RichTextBox doesn't even have DragOver event exposed, we have to cast it to Control to expose the base DragOver eventDi2015NewLine((Control)richTextBox1).DragOver += (s, e) => Di2015NewLine{Di2015NewLine    e.Effect = DragDropEffects.Copy;Di2015NewLine};Di2015NewLine
18304758Di2015UniqueSeparator$.cookie
18304758Di2015UniqueSeparator$.cookie('UniqueID')
18304758Di2015UniqueSeparatorpath
18304758Di2015UniqueSeparatorpath:'/'
18304758Di2015UniqueSeparatordocument.cookie
18304866Di2015UniqueSeparatorweather is the List<Weather> object .. not the Weather object. Di2015NewLine
18304866Di2015UniqueSeparatorweather.main
18304866Di2015UniqueSeparatorweather[0].main
18305009Di2015UniqueSeparatorMp3FileReader
18305009Di2015UniqueSeparatorSystem.IO.Stream
18305009Di2015UniqueSeparatorProperties/Resources.resx
18305009Di2015UniqueSeparatorProperties.Resources
18305009Di2015UniqueSeparatorbyte[]
18305009Di2015UniqueSeparatorMemoryStream
18305009Di2015UniqueSeparatorMp3FileReader
18305009Di2015UniqueSeparatorMemoryStream mp3file = new MemoryStream(Properties.Resources.MP3file);Di2015NewLineMp3FileReader mp3reader = new Mp3FileReader(mp3file);Di2015NewLine
18305009Di2015UniqueSeparatorEmbedded Resource
18305009Di2015UniqueSeparatorpublic Stream GetResourceStream(string filename)Di2015NewLine{Di2015NewLine    Assembly asm = Assembly.GetExecutingAssembly();Di2015NewLine    string resname = asm.GetName().Name + "." + filename;Di2015NewLine    return asm.GetManifestResourceStream(resname);Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineStream mp3file = GetResourceStream("some file.mp3");Di2015NewLineMp3FileReader mp3reader = new Mp3FileReader(mp3file);Di2015NewLine
18305009Di2015UniqueSeparatorpack:...
18305009Di2015UniqueSeparatorApplication.GetResourceStream
18305057Di2015UniqueSeparatorWord
18305057Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class WordDi2015NewLine{Di2015NewLine    public string WordID;Di2015NewLine    public List<string> similes;Di2015NewLine}Di2015NewLine
18305057Di2015UniqueSeparator<Word>Di2015NewLine    <WordID>1</WordID>Di2015NewLine    <Similes>Di2015NewLine        <string>Hello</string>Di2015NewLine        <string>Hi</string>Di2015NewLine    </Similes>Di2015NewLine</Word>Di2015NewLine
18305057Di2015UniqueSeparatorpublic class LexiconDi2015NewLine{Di2015NewLine    public List<string> wordIDs;Di2015NewLine}Di2015NewLine
18305057Di2015UniqueSeparator<Lexicon>Di2015NewLine    <WordIDs>Di2015NewLine        <string>1</string>Di2015NewLine        <string>2</string>            Di2015NewLine    </WordIDs>Di2015NewLine</Lexicon>Di2015NewLine
18305394Di2015UniqueSeparatorpublic int CalcUsing(IClass myClass, int x)Di2015NewLine{Di2015NewLine     int result = myclass.Calculate(x);Di2015NewLine     return result;Di2015NewLine}Di2015NewLineDi2015NewLineclass SomeClass : IClassDi2015NewLine{Di2015NewLine     //Implement the Calculate(int) method hereDi2015NewLine}Di2015NewLineDi2015NewLine//Then the user of your class can do this with an instance of your form due to Di2015NewLine//SomeClass inheriting the IClass typeDi2015NewLineMainForm.CalcUsing(new SomeClass(), x);Di2015NewLine
18305466Di2015UniqueSeparatorstrlen
18305466Di2015UniqueSeparatordata
18305466Di2015UniqueSeparatorstrlen
18305466Di2015UniqueSeparatorint strlen = 4 - (data.Length % 4);Di2015NewLine
18305466Di2015UniqueSeparatorint strlen = 4 - (data.Length % 4) + data.Length;Di2015NewLine
18305466Di2015UniqueSeparatorstring datapad = data.PadRight(strlen + data.Length, pad);Di2015NewLine
18305663Di2015UniqueSeparatorpublic double TotalMillisecondsDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine      return (double) _ticks  / TicksPerMillisecond;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18305677Di2015UniqueSeparator    public TimeSpan (long ticks)Di2015NewLine    {Di2015NewLine        _ticks = ticks;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public TimeSpan (int hours, int minutes, int seconds)Di2015NewLine    {Di2015NewLine        CalculateTicks (0, hours, minutes, seconds, 0, true, out _ticks);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public TimeSpan (int days, int hours, int minutes, int seconds)Di2015NewLine    {Di2015NewLine        CalculateTicks (days, hours, minutes, seconds, 0, true, out _ticks);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds)Di2015NewLine    {Di2015NewLine        CalculateTicks (days, hours, minutes, seconds, milliseconds, true, out _ticks);Di2015NewLine    }Di2015NewLine
18305717Di2015UniqueSeparatorWebBrowser
18305717Di2015UniqueSeparatorasync/await
18305717Di2015UniqueSeparatorasync Task DoNavigationAsync()Di2015NewLine{Di2015NewLine    TaskCompletionSource<bool> tcsNavigation = null;Di2015NewLine    TaskCompletionSource<bool> tcsDocument = null;Di2015NewLineDi2015NewLine    this.WB.Navigated += (s, e) =>Di2015NewLine    {Di2015NewLine        if (tcsNavigation.Task.IsCompleted)Di2015NewLine            return;Di2015NewLine        tcsNavigation.SetResult(true);Di2015NewLine    };Di2015NewLineDi2015NewLine    this.WB.DocumentCompleted += (s, e) =>Di2015NewLine    {Di2015NewLine        if (this.WB.ReadyState != WebBrowserReadyState.Complete)Di2015NewLine            return;Di2015NewLine        if (tcsDocument.Task.IsCompleted)Di2015NewLine            return;Di2015NewLine        tcsDocument.SetResult(true); Di2015NewLine    };Di2015NewLineDi2015NewLine    for (var i = 0; i <= 21; i++)Di2015NewLine    {Di2015NewLine        tcsNavigation = new TaskCompletionSource<bool>();Di2015NewLine        tcsDocument = new TaskCompletionSource<bool>();Di2015NewLineDi2015NewLine        this.WB.Navigate("http://www.example.com?i=" + i.ToString());Di2015NewLine        await tcsNavigation.Task;Di2015NewLine        Debug.Print("Navigated: {0}", this.WB.Document.Url);Di2015NewLine        // navigation completed, but the document may still be loadingDi2015NewLineDi2015NewLine        await tcsDocument.Task;Di2015NewLine        Debug.Print("Loaded: {0}", this.WB.DocumentText);Di2015NewLine        // the document has been fully loaded, you can access DOM hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
18305717Di2015UniqueSeparatorDoNavigationAsync
18305717Di2015UniqueSeparatorForm_Load
18305717Di2015UniqueSeparatorvoid Form_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var task = DoNavigationAsync();Di2015NewLine    task.ContinueWith((t) =>Di2015NewLine    {Di2015NewLine        MessageBox.Show("Navigation done!");Di2015NewLine    }, TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine}Di2015NewLine
18306128Di2015UniqueSeparatorEncoding
18306128Di2015UniqueSeparatorstring
18306128Di2015UniqueSeparatorbyte[]
18306128Di2015UniqueSeparatorUTF8
18306128Di2015UniqueSeparatorstring S = Encoding.UTF8.GetString(B);Di2015NewLinebyte[] B = Encoding.UTF8.GetBytes(S);Di2015NewLine
18306128Di2015UniqueSeparatorEncoding.UnicodeDi2015NewLineEncoding.ASCIIDi2015NewLine...Di2015NewLine
18306304Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!IsPostBack)Di2015NewLine    {Di2015NewLine        BindData();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected void btnSubmit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //Insert / Update data of sql data tableDi2015NewLineDi2015NewLine   BindData();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void BindData()Di2015NewLine{Di2015NewLine    String policeid = (String)Session["policeid"];Di2015NewLine    SqlConnection con = new SqlConnection("Data Source = localhost; Initial Catalog = MajorProject; Integrated Security= SSPI");Di2015NewLine    con.Open();Di2015NewLine    DataSet ds = new DataSet();Di2015NewLine    SqlDataAdapter da = new SqlDataAdapter("Select mr.memberreportid From PoliceAccount pa, MemberReport mr Where pa.policeid = '" + policeid + "' And pa.handle = mr.memberreportid And mr.caseprogress = 'ongoing'", con);Di2015NewLine    da.Fill(ds);Di2015NewLine    ddlMemberReportID.DataSource = ds;Di2015NewLine    ddlMemberReportID.DataTextField = "memberreportid";Di2015NewLine    ddlMemberReportID.DataValueField = "memberreportid";Di2015NewLine    ddlMemberReportID.DataBind();Di2015NewLine    con.Close();Di2015NewLine}Di2015NewLine
18306304Di2015UniqueSeparatorPage_Load(null, EventArgs.Empty);
18306393Di2015UniqueSeparatorMessageBox
18306393Di2015UniqueSeparatorpublic interface ISelectListsWrapperDi2015NewLine{Di2015NewLine    SelectList ContactClassifications(bool includeDeleted);Di2015NewLine}Di2015NewLine
18306393Di2015UniqueSeparatorpublic class SelectListsWrapper : ISelectListsWrapperDi2015NewLine{Di2015NewLine    public SelectList ContactClassifications(bool includeDeleted)Di2015NewLine    {Di2015NewLine        return SelectLists.ContactClassifications(includeDeleted);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18306393Di2015UniqueSeparatorprivate readonly ISelectListsWrapper selectLists;Di2015NewLineDi2015NewLinepublic CustomerController(ICustomerManager customerMan, ISelectListsWrapper selectLists)Di2015NewLine{Di2015NewLine    cm = customerMan;Di2015NewLine    this.selectLists = selectLists;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void InitializeContactVM(ContactVM model)Di2015NewLine{Di2015NewLine    model.Customer = cm.GetViewFindCustomerDetails((int)model.CustomerId);Di2015NewLine    model.ContactClassificationList = AddBlankToList(this.selectLists.ContactClassifications(false)); Di2015NewLine    model.ContactSourceList = AddBlankToList(this.selectLists.ContactSources(false));Di2015NewLine}Di2015NewLine
18306895Di2015UniqueSeparator<asp:DataList ID="dtlist" runat="server" RepeatColumns="3" CellPadding="5">Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Image Width="150" ID="Image1" ImageUrl='<%# DataBinder.Eval(Container.DataItem, "Image") %>' runat="server" />Di2015NewLine        <br />Di2015NewLine        <asp:HyperLink ID="HyperLink12" Text='<%# DataBinder.Eval(Container.DataItem, "Name") %>' NavigateUrl='<%# DataBinder.Eval(Container.DataItem, "Image") %>' runat="server"/>                                               Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:DataList>Di2015NewLine
18306895Di2015UniqueSeparator    string albumName = Context.Request.QueryString["Album"];Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        DirectoryInfo dir = new DirectoryInfo(MapPath(string.Format("Images/{0}", albumName)));Di2015NewLineDi2015NewLine        var dataToBeBound = dir.GetFiles().Select(x => newDi2015NewLine        {Di2015NewLine            Name = x.Name,Di2015NewLine            Image = string.Format("~/Images/{0}/{1}", albumName, x.Name)Di2015NewLineDi2015NewLine        }).ToList();Di2015NewLine        dtlist.DataSource = dataToBeBound;Di2015NewLine        dtList.DataBind();Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLineDi2015NewLine        throw;Di2015NewLine    }Di2015NewLine
18307029Di2015UniqueSeparatorInvalidValueBehavior
18307029Di2015UniqueSeparatorAllowLeaveEditor
18307029Di2015UniqueSeparator<dxe:TextEdit x:Name="txtMappingName" Grid.Column="1" Height="23" Margin="0,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" MaxLength="100" Grid.RowSpan="2" GotFocus="txtMappingName_GotFocus" Validate="txtMappingName_Validate" InvalidValueBehavior="AllowLeaveEditor"/>Di2015NewLine
18307033Di2015UniqueSeparatorList<string> finalLines = richTextBox1.Lines.ToList();Di2015NewLinefinalLines.RemoveAll(x => x.StartsWith("ALTER TABLE") && x.Contains("MOVE STORAGE"));Di2015NewLinerichTextBox1.Lines = finalLines.ToArray();Di2015NewLine
18307040Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <!-- Main style for all controls -->Di2015NewLine    <Style x:Key="BaseStyle" TargetType="{x:Type Control}">Di2015NewLine        <Setter Property="FontFamily" Value="Arial" />Di2015NewLine        <Setter Property="FontSize" Value="11px" />Di2015NewLine        <Setter Property="Foreground" Value="Black" />Di2015NewLine        <Setter Property="Width" Value="200" />Di2015NewLine        <Setter Property="Height" Value="25" />Di2015NewLine    </Style>Di2015NewLineDi2015NewLine    <!-- This style inherits all the settings from the base style, but set the background -->Di2015NewLine    <Style x:Key="DefaultBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">Di2015NewLine        <Setter Property="Background" Value="Green" />Di2015NewLine    </Style>Di2015NewLineDi2015NewLine    <!-- This style inherits only the width and height -->Di2015NewLine    <Style x:Key="NotDefaultBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">Di2015NewLine        <Setter Property="Background" Value="Black" />Di2015NewLine        <Setter Property="Foreground" Value="White" />Di2015NewLine        <Setter Property="FontFamily" Value="Courier New" />Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine<Grid>Di2015NewLine    <StackPanel>Di2015NewLine        <TextBox Style="{StaticResource DefaultBaseStyle}" Text="Default base style" Margin="0,10,0,0" />Di2015NewLine        <TextBox Style="{StaticResource NotDefaultBaseStyle}" Text="Not default base style" Margin="0,10,0,0" />Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine
18307040Di2015UniqueSeparatorOutput
18307040Di2015UniqueSeparatorButton
18307040Di2015UniqueSeparatorTextBox
18307040Di2015UniqueSeparatorEDIT:
18307040Di2015UniqueSeparatorProject -> Properties -> Parameters
18307040Di2015UniqueSeparatorMyColor
18307040Di2015UniqueSeparatorxmlns:properties="clr-namespace:DynamicStyleHelp.Properties"Di2015NewLineDi2015NewLine<Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MyColor, Mode=TwoWay}" />Di2015NewLine
18307040Di2015UniqueSeparator// your namespace.Properties.Settings.Default.your name of propertyDi2015NewLineDynamicStyleHelp.Properties.Settings.Default.MyColor = "Red";   Di2015NewLine
18307040Di2015UniqueSeparatorXAML
18307040Di2015UniqueSeparator<Window x:Class="DynamicStyleHelp.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:properties="clr-namespace:DynamicStyleHelp.Properties"Di2015NewLine    Title="MainWindow" Height="350" Width="525"Di2015NewLine    WindowStartupLocation="CenterScreen">Di2015NewLineDi2015NewLine<Window.Resources>Di2015NewLine    <Style x:Key="BaseStyle" TargetType="{x:Type Control}">Di2015NewLine        <Setter Property="FontFamily" Value="Arial" />Di2015NewLine        <Setter Property="FontSize" Value="11px" />Di2015NewLine        <Setter Property="Background" Value="{Binding Source={x:Static properties:Settings.Default}, Path=MyColor, Mode=TwoWay}" />Di2015NewLine        <Setter Property="Width" Value="200" />Di2015NewLine        <Setter Property="Height" Value="25" />Di2015NewLine    </Style>Di2015NewLineDi2015NewLine    <Style x:Key="DefaultBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">Di2015NewLine        <Setter Property="Foreground" Value="Black" />Di2015NewLine    </Style>Di2015NewLineDi2015NewLine    <Style x:Key="NotDefaultBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">Di2015NewLine        <Setter Property="Foreground" Value="White" />Di2015NewLine        <Setter Property="FontFamily" Value="Courier New" />Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine<Grid>Di2015NewLine    <StackPanel>Di2015NewLine        <TextBox Style="{StaticResource DefaultBaseStyle}" Text="Default base style" Margin="0,10,0,0" />Di2015NewLine        <TextBox Style="{StaticResource NotDefaultBaseStyle}" Text="Not default base style" Margin="0,10,0,0" />Di2015NewLineDi2015NewLine        <Button Name="ChangeButton" Width="100" Height="30" Content="ChangeButton" Margin="0,10,0,0" Click="ChangeButton_Click" />Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine</Window>Di2015NewLine
18307040Di2015UniqueSeparatorCode behind
18307040Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ChangeButton_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        DynamicStyleHelp.Properties.Settings.Default.MyColor = "Red";Di2015NewLine    }Di2015NewLine}Di2015NewLine
18307260Di2015UniqueSeparatorimage.SetSource(picture.GetThumbnail());Di2015NewLine
18307299Di2015UniqueSeparatorController
18307299Di2015UniqueSeparatorControllerBase
18307299Di2015UniqueSeparatorHttpContext
18307299Di2015UniqueSeparatorSystem.Web
18307299Di2015UniqueSeparatorpublic static string SesssionIdDi2015NewLine{Di2015NewLine     get { return System.Web.HttpContext.Current.Session["SessionId"]; }Di2015NewLine}Di2015NewLine
18307511Di2015UniqueSeparatorinternal static partial class IOUtilitiesDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Move a file to an archive folderDi2015NewLine    /// </summary>Di2015NewLine    /// <remarks>Renames file if necessary to avoid collision.Di2015NewLine    /// See <see cref="File.Move"/> for exceptions</remarks>Di2015NewLine    /// <param name="file">path to file to move</param>Di2015NewLine    /// <param name="targetFolder">folder to move file to</param>Di2015NewLine    public static void ArchiveFile(string file, string targetFolder) {Di2015NewLine        if (file == null)Di2015NewLine            throw new ArgumentNullException("file");Di2015NewLine        if (targetFolder == null)Di2015NewLine            throw new ArgumentNullException("targetFolder");Di2015NewLineDi2015NewLine        string targetFilename = Path.Combine(targetFolder, Path.GetFileName(file));Di2015NewLine        File.Move(file, FindAvailableFilename(targetFilename));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Archive file in the same folderDi2015NewLine    /// </summary>Di2015NewLine    /// <remarks>Renames file by adding first free "(n)" suffixDi2015NewLine    /// See <see cref="File.Move"/> for exceptions</remarks>Di2015NewLine    /// <param name="file">path to file to archive</param>Di2015NewLine    public static void ArchiveFile(string file) {Di2015NewLine        if (file == null)Di2015NewLine            throw new ArgumentNullException("file");Di2015NewLineDi2015NewLine        File.Move(file, FindAvailableFilename(file));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Find a "free" filename by adding (2),(3)...Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="targetFilename">Complete path to target filename</param>Di2015NewLine    /// <returns>First available filename</returns>Di2015NewLine    private static string FindAvailableFilename(string targetFilename) {Di2015NewLine        if (!File.Exists(targetFilename))Di2015NewLine            return targetFilename;Di2015NewLineDi2015NewLine        string filenameFormat = Path.GetFileNameWithoutExtension(targetFilename) + "({0})" + Path.GetExtension(targetFilename);Di2015NewLine        string format = Path.Combine(Path.GetDirectoryName(targetFilename), filenameFormat);Di2015NewLine        for (int ii = 2;; ++ii) {Di2015NewLine            // until we find a filename that doesn't existDi2015NewLine            string newFilename = string.Format(CultureInfo.InvariantCulture, format, ii);Di2015NewLine            if (!File.Exists(newFilename)) // returns false on illegal paths, security problems etcDi2015NewLine                return newFilename;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18307764Di2015UniqueSeparatorint[] a = new int[] { 1, 2, 3 };Di2015NewLine
18307886Di2015UniqueSeparatormsconfig.exe
18307886Di2015UniqueSeparatorAnyCPU
18307886Di2015UniqueSeparatorPrefer 32-bit
18307886Di2015UniqueSeparator64-bit
18307886Di2015UniqueSeparatorPrefer 32-bit
18308035Di2015UniqueSeparatorforeach window in EnumWindows()Di2015NewLine    if GetWindowModuleFileName(window) == "program.exe"Di2015NewLine        SetWindowPos(window, ...)Di2015NewLine
18308054Di2015UniqueSeparatorIEnumerable<string> groups =  Enumerable.Range(0, binaryString.Length / 8)Di2015NewLine                                        .Select(i => binaryString.Substring(i * 8, 8));Di2015NewLine
18308135Di2015UniqueSeparatorconst string pattern  = "(\\\\w)</span>(?![.])";Di2015NewLine
18308135Di2015UniqueSeparatorconst string pattern  = "(\\\\w)</span>(?!\\s*[.])";Di2015NewLine
18308270Di2015UniqueSeparatorpublic static void SomeMethod<TProperty>(Expression<Func<TProperty>> property)Di2015NewLine{Di2015NewLine    var propertyName = property.Name;Di2015NewLine    // Do something,Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SomeMethod<TProperty>(object sender, PropertyInfo property)Di2015NewLine{Di2015NewLine    SomeMethod(Expression.Lambda<Func<TProperty>>(Expression.Property(Expression.Constant(sender), property)));Di2015NewLine}Di2015NewLineDi2015NewLinepublic static MethodInfo someMethod = typeof(TypeContainingSomeMethod).GetMethod("SomeMethod", BindingFlags.Public | BindingFlags.Static, null, new[] { typeof(object), typeof(PropertyInfo) }, null);Di2015NewLineDi2015NewLinestatic void EventHandler(object sender, PropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    var propertyInfo = sender.GetType().GetProperty(e.PropertyName);Di2015NewLine    someMethod.MakeGenericMethod(propertyInfo.PropertyType).Invoke(null, new[] { sender, propertyInfo });Di2015NewLine}Di2015NewLine
18308270Di2015UniqueSeparatorSomeMethod<object>(...)
18308270Di2015UniqueSeparatorSomeMethod<object>(Expression.Lambda<Func<object>>(Expression.Convert(Expression.Property(Expression.Constant(sender), propertyInfo), typeof(object))));Di2015NewLine
18308292Di2015UniqueSeparator[System.ServiceModel.XmlSerializerFormatAttribute(Style = System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults = true)]Di2015NewLine
18308292Di2015UniqueSeparator[System.ServiceModel.XmlSerializerFormatAttribute(Style = System.ServiceModel.OperationFormatStyle.Document, SupportFaults = true)]Di2015NewLine
18308304Di2015UniqueSeparatorINotifyPropertyChanged
18308304Di2015UniqueSeparatorINotifyPropertyChanged
18308396Di2015UniqueSeparatorstring SQL = "INSERT INTO logHistory (ip, [action], userid, [time])" +Di2015NewLine                  "VALUES (@val1, @val2, @val3, @time)";Di2015NewLine
18308474Di2015UniqueSeparator//suppose dog1 is an instance of your dog classDi2015NewLine//here is the Tick event handler of your timer1Di2015NewLineprivate void timer1_Tick(object sender, EventArgs e){Di2015NewLine    timer1.Enable = !dog1.testrun();Di2015NewLine}Di2015NewLine
18308652Di2015UniqueSeparator"Insert into Users(... pic,passwords) values (... '"+password+"',@pic)";Di2015NewLine
18308652Di2015UniqueSeparatorpic
18308652Di2015UniqueSeparatorpasswords
18308685Di2015UniqueSeparator[DebuggerStepThrough]
18308685Di2015UniqueSeparatorpublic class LoggerDi2015NewLine{Di2015NewLine    [DebuggerStepThrough]Di2015NewLine    public void Log(string message);Di2015NewLine}Di2015NewLine
18308740Di2015UniqueSeparatorprotected void AdminUserControl_ItemEditing(object sender, ListViewEditEventArgs e)Di2015NewLine    {Di2015NewLine        AdminUserControl.EditIndex = e.NewEditIndex;Di2015NewLine        UserBLL userbll = new UserBLL();Di2015NewLine        AdminUserControl.DataSource = userbll.GetAllUsers();Di2015NewLine        AdminUserControl.DataBind();Di2015NewLineDi2015NewLine    }Di2015NewLine    protected void AdminUserControl_ItemUpdating(object sender, ListViewUpdateEventArgs e)Di2015NewLine    {Di2015NewLine        UserBLL userbll = new UserBLL();Di2015NewLineDi2015NewLine        TextBox fname= (TextBox)e.NewValues["fname"];Di2015NewLine        TextBox lname= (TextBox)e.NewValues["lname"];Di2015NewLine        TextBox company= (TextBox)e.NewValues["company"];Di2015NewLine        TextBox email= (TextBox)e.NewValues["email"];Di2015NewLineDi2015NewLine        user = new User();Di2015NewLine        user.fname= Convert.ToInt16(fname.Text);Di2015NewLine        user.lname= lname.Text;Di2015NewLine        user.company= company.Text;Di2015NewLine        user.email= email.Text;Di2015NewLineDi2015NewLine        admin.UpdateUsers(user);Di2015NewLine    }Di2015NewLine
18308772Di2015UniqueSeparatorprivate void reverseButton_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    Storyboard sbActive = bRotateClockwisely ? clockwiseStoryboard : counterClockwiseStoryboard;Di2015NewLine    Storyboard sbPaused = bRotateClockwisely ? counterClockwiseStoryboard : clockwiseStoryboard;Di2015NewLineDi2015NewLineDi2015NewLine    //I want the other storyboard can seek to where the animation is paused.Di2015NewLine    dProgress = sbActive.GetCurrentProgress();Di2015NewLine    dProgress = 1.0 - dProgress;Di2015NewLineDi2015NewLine    sbActive.Stop();           Di2015NewLineDi2015NewLine    sbPaused.Begin();Di2015NewLine    sbPaused.Seek(new TimeSpan((long)(duration.Ticks * dProgress)), TimeSeekOrigin.BeginTime);Di2015NewLineDi2015NewLine    bRotateClockwisely = !bRotateClockwisely;            Di2015NewLine}Di2015NewLine
18308888Di2015UniqueSeparatorvar iq = XElement.Parse(xml).DescendantsAndSelf("iq").FirstOrDefault();Di2015NewLineif (iq != null)Di2015NewLine{Di2015NewLine}Di2015NewLine
18308993Di2015UniqueSeparatorpublic String Sample()Di2015NewLine    { Di2015NewLine        String SOAP_ACTION = "http://MTKAndroidService.org/Sample";Di2015NewLine        String METHOD_NAME = "Sample";Di2015NewLine//      URL =  "http://10.0.2.2:49923/Service1.asmx";   // to be adjusted to the URL above once this code is added into WebService;Di2015NewLine        String IP_LIST="";Di2015NewLine        SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME); Di2015NewLine        List<String> logs =  new ArrayList<String>();Di2015NewLine        logs.add("hello");Di2015NewLine        logs.add("world");Di2015NewLine        SoapObject soapLogs = new SoapObject(NAMESPACE, "logs");Di2015NewLine        for (String i : logs){Di2015NewLine            soapLogs.addProperty("string", i);Di2015NewLine        }Di2015NewLine        request.addSoapObject(soapLogs);Di2015NewLineDi2015NewLine        SoapSerializationEnvelope IPenvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);Di2015NewLine        IPenvelope.dotNet = true;Di2015NewLine        IPenvelope.setOutputSoapObject(request);Di2015NewLine        HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);Di2015NewLineDi2015NewLine            try Di2015NewLine            {Di2015NewLine                androidHttpTransport.call(SOAP_ACTION, IPenvelope);Di2015NewLine                SoapPrimitive response = (SoapPrimitive)IPenvelope.getResponse();Di2015NewLine                Log.i("myApp", response.toString());Di2015NewLine                IP_LIST= response.toString();Di2015NewLine            } Di2015NewLine            catch (Exception e) Di2015NewLine            {Di2015NewLine                e.printStackTrace();Di2015NewLine            }Di2015NewLine            return IP_LIST;Di2015NewLine    }Di2015NewLine
18309207Di2015UniqueSeparatorpublic class Test<A, B> {Di2015NewLineDi2015NewLine    static Test() {Di2015NewLine        if (typeof(B) == typeof(A)) {Di2015NewLine            throw new NotSupportedException("Argument B is not supported.");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18309281Di2015UniqueSeparatorSystem.Web
18309281Di2015UniqueSeparatorusing System.Web;Di2015NewLine
18309281Di2015UniqueSeparatorSystem.Web
18309281Di2015UniqueSeparator System.Web.HttpContext.CurrentDi2015NewLine
18309480Di2015UniqueSeparatorListView.SelectedItems
18309480Di2015UniqueSeparatorif (listView.SelectedItems.Count == 0)Di2015NewLine{Di2015NewLine    MessageBox.Show("Please Select At least one Column");Di2015NewLine}Di2015NewLine
18309537Di2015UniqueSeparatorDELETE FROM UserTable WHERE DATEDIFF(day,getdate(),DateAdded) < -1Di2015NewLine
18309537Di2015UniqueSeparatorSQL server
18309537Di2015UniqueSeparatorC#
18309586Di2015UniqueSeparatorISerializable
18309586Di2015UniqueSeparatorprotected Device(SerializationInfo info, StreamingContext context)Di2015NewLine{Di2015NewLine    Name = info.GetString("Name");Di2015NewLine    //...Di2015NewLine    AssociatedMibEntity = (MibEntity)info.GetValue(Di2015NewLine        "AssociatedMibEntity", typeof(MibEntity)); Di2015NewLine}Di2015NewLinevoid ISerializable.GetObjectData(Di2015NewLine    SerializationInfo info, StreamingContext context)Di2015NewLine{Di2015NewLine    info.AddValue("Name", Name);Di2015NewLine    //...Di2015NewLine    info.AddValue("AssociatedMibEntity", AssociatedMibEntity);Di2015NewLine}Di2015NewLine
18309586Di2015UniqueSeparatorusing (var ms = new MemoryStream())Di2015NewLine{Di2015NewLine    var bf = new BinaryFormatter();Di2015NewLine    bf.Serialize(ms, new Device {Di2015NewLine        AssociatedMibEntity = new MibEntity { Name = "Foo"}});Di2015NewLine    ms.Position = 0;Di2015NewLine    var clone = (Device)bf.Deserialize(ms);Di2015NewLine    Console.WriteLine(clone.AssociatedMibEntity.Name); // FooDi2015NewLine}Di2015NewLine
18309586Di2015UniqueSeparatorISerializable
18309586Di2015UniqueSeparatorISerializable
18309586Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class Device : IDisposable // <=== no ISerializable; also removedDi2015NewLine                                  // GetObjectData and custom .ctorDi2015NewLine
18309586Di2015UniqueSeparatorBinaryFormatter
18309624Di2015UniqueSeparatorpublic string MyCustomStructValue { get { return MyCustomStruct.ToString(); } }Di2015NewLine
18309624Di2015UniqueSeparator[IgnoreDataMember]
18309624Di2015UniqueSeparator[IgnoreDataMember]Di2015NewLinepublic CustomStruct MyCustomStruct { get; set; }Di2015NewLine
18309624Di2015UniqueSeparatorpublic IEnumerable<CustomClass> Get()Di2015NewLine{Di2015NewLine    return GetResults();Di2015NewLine}Di2015NewLine
18309750Di2015UniqueSeparatorvar yourList = yourGeoCode.ResultsDi2015NewLine                          .Select(x=>x.geometry.location).ToList();Di2015NewLine
18309750Di2015UniqueSeparatorLL
18309750Di2015UniqueSeparatorlat
18309750Di2015UniqueSeparatorlng
18309750Di2015UniqueSeparatorlat
18309750Di2015UniqueSeparatorlng
18309750Di2015UniqueSeparatordouble lat = yourList[2].lat;Di2015NewLinedouble lng = yourList[2].lng;Di2015NewLine
18309750Di2015UniqueSeparatorLat
18309750Di2015UniqueSeparatorlat
18309830Di2015UniqueSeparatorType
18309830Di2015UniqueSeparatorpublic void AddControl(Type c)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
18309830Di2015UniqueSeparatorActivator.CreateInstance()
18309830Di2015UniqueSeparatorpublic void AddControl(Type c)Di2015NewLine{Di2015NewLine    object o = Activator.CreateInstance(c);Di2015NewLine}Di2015NewLine
18309830Di2015UniqueSeparatorAddControl(typeof(RadioBoxOfItemsControl));Di2015NewLine
18309832Di2015UniqueSeparatorthis.Invoke((MethodInvoker) delegateDi2015NewLine        {Di2015NewLine            // close the form on the forms threadDi2015NewLine            this.Close();Di2015NewLine        });Di2015NewLine
18310067Di2015UniqueSeparatorOrderedDictionary
18310067Di2015UniqueSeparatorSortedDictionary
18310283Di2015UniqueSeparatorPublish Web Site
18310283Di2015UniqueSeparatorRelease
18310316Di2015UniqueSeparatorstring
18310316Di2015UniqueSeparatorobject
18310316Di2015UniqueSeparatornull
18310316Di2015UniqueSeparatorstring
18310448Di2015UniqueSeparatorstring path = Environment.ExpandEnvironmentVariables(@"%ABC%/file.txt");Di2015NewLine
18310497Di2015UniqueSeparatorFindControl
18310497Di2015UniqueSeparatornull
18310497Di2015UniqueSeparator<%=dvSOItem.FindControl("txtInsertSOID") != null ? dvSOItem.FindControl("txtInsertSOID").ClientID : string.Empty %>Di2015NewLine
18310497Di2015UniqueSeparatorfunction Renew()Di2015NewLine{         Di2015NewLine    var txtID = document.getElementById('<%=dvSOItem.FindControl("txtInsertSOID") != null ? dvSOItem.FindControl("txtInsertSOID").ClientID : string.Empty %>');   Di2015NewLine    if(txtID != null){ Di2015NewLine        var ID = getCookie('SOIDTextCookie');Di2015NewLine        txtID.value = ID;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18310669Di2015UniqueSeparatorResolve
18310737Di2015UniqueSeparatorTreeView
18310737Di2015UniqueSeparatorListBox
18310737Di2015UniqueSeparatorHierarchicalDataTemplate
18310826Di2015UniqueSeparatorstring strRegex = @"http.*720.mp4";Di2015NewLineRegexOptions myRegexOptions = RegexOptions.None;Di2015NewLineRegex myRegex = new Regex(strRegex, myRegexOptions);Di2015NewLinestring strTargetString = @"<html> " + "\\n" + @"    ....." + "\\n" + @"    <script>" + "\\n" + @"        {" + "\\n" + @"           http:\\\\\\/\\\\\\/cs513404v4.vk.me\\\\\\/u3692175\\\\\\/videos\\\\\\/49a2e8d28c.720.mp4 " + "\\n" + @"        }" + "\\n" + @"        ....." + "\\n" + @"    </script>" + "\\n" + @"  </html>";Di2015NewLineDi2015NewLineforeach (Match myMatch in myRegex.Matches(strTargetString))Di2015NewLine{Di2015NewLine  if (myMatch.Success)Di2015NewLine  {Di2015NewLine    // Add your code hereDi2015NewLine  }Di2015NewLine}Di2015NewLine
18310964Di2015UniqueSeparator        myReader = cmdDataBase.ExecuteReader();Di2015NewLine        if(myReader.Read())Di2015NewLine        {Di2015NewLine            string sType = myReader["name_of_field"].ToString();Di2015NewLine            switch (sType)Di2015NewLine            {Di2015NewLine                case "Low": txtDesc.MaxLength = 5; break;Di2015NewLine                case "Medium": txtDesc.MaxLength = 10; break;Di2015NewLine               case "High": txtDesc.MaxLength = 1; break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18310964Di2015UniqueSeparator    string constring = "Data Source=.;Initial Catalog=db.MDF;Integrated Security=True";Di2015NewLine    string Query = "select * from RePriorities where Priority=@priority";Di2015NewLine    using(SqlConnection conDataBase = new SqlConnection(constring))Di2015NewLine    using(SqlCommand cmdDataBase = new SqlCommand(Query, conDataBase))Di2015NewLine    {Di2015NewLine        conDataBase.Open();Di2015NewLine        cmdDataBase.Parameters.AddWithValue("@priority", cbType.SelectedItem.ToString());Di2015NewLineDi2015NewLine        ......Di2015NewLineDi2015NewLine        // the rest of your codeDi2015NewLine    }Di2015NewLine
18311079Di2015UniqueSeparator[Flags]Di2015NewLineprivate enum MyEnum Di2015NewLine{Di2015NewLine  Apple = 1,Di2015NewLine  Orange = 2,Di2015NewLine  Tomato = 4,Di2015NewLine  Potato = 8,Di2015NewLine  Melon =  16,Di2015NewLine  Watermelon = 32,Di2015NewLineDi2015NewLine  Fruit = Apple | Orange,Di2015NewLine  Vegetable = Tomato | Potato,Di2015NewLine  Berry = Melon | Watermelon,Di2015NewLine}Di2015NewLine
18311079Di2015UniqueSeparator[Flags]
18311079Di2015UniqueSeparatorToString()
18311079Di2015UniqueSeparatorprivate void Checking(string data)Di2015NewLine{Di2015NewLine  //MyEnum v = (MyEnum) Enum.Parse(data);Di2015NewLine    MyEnum v = (MyEnum) Enum.Parse(typeof(MyEnum), data);Di2015NewLineDi2015NewLine    if((MyEnum.Fruit & v) != 0) MessageBox.Show("Fruit"); Di2015NewLine    ...Di2015NewLine}Di2015NewLine
18311079Di2015UniqueSeparatorParse()
18311102Di2015UniqueSeparatorWhenAll
18311267Di2015UniqueSeparatorindex
18311267Di2015UniqueSeparatorcount
18311267Di2015UniqueSeparatorfor (int i = 0; i <= dataGridView1.Rows.Count ; i++)Di2015NewLine
18311267Di2015UniqueSeparatorfor (int i = 0; i < dataGridView1.Rows.Count ; i++)Di2015NewLine
18311752Di2015UniqueSeparator <connectionStrings> Di2015NewLine     <clear />  Di2015NewLine     <add name=â?MyConnStringâ? connectionString=âWhateverâ  /> Di2015NewLine  </connectionStrings> Di2015NewLine
18311752Di2015UniqueSeparator<configuration>Di2015NewLine  <connectionStrings>Di2015NewLine    <clear />Di2015NewLine    <add name="cbuddydb"  connectionString=Di2015NewLine       "Driver={MySQL ODBC 5.1 Driver};Server=localhost;Database=myDataBase;Persist Security Info=True;Di2015NewLine        User=@username;Password=@password;Option=3" providerName="MySql.Data.MySqlClient"/>Di2015NewLine  </connectionStrings>Di2015NewLineDi2015NewLine  <appSettings >        Di2015NewLine    <add key="username" value ="6/0RUNnSmUBsbdNoCg+9Sw=="/>Di2015NewLine    <add key="password" value =""/>Di2015NewLine  </appSettings>Di2015NewLineDi2015NewLine  <system.data>Di2015NewLine....Di2015NewLine
18311862Di2015UniqueSeparator@functions
18311862Di2015UniqueSeparator@model TimeSpanDi2015NewLineDi2015NewLine@functions{Di2015NewLine    public string FormatElement(int value, string text){Di2015NewLine        if (value == 0) return string.Empty;Di2015NewLine        if (value > 1) text +="s";Di2015NewLine        return string.Format("{0} {1}", value, text);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine@string.Join(", ",  new[]{Di2015NewLine                        FormatElement(Model.Days, "day"), Di2015NewLine                        FormatElement(Model.Hours, "hour"), Di2015NewLine                        FormatElement(Model.Minutes, "minute")Di2015NewLine                    }Di2015NewLine                   .Where(m => m != string.Empty));Di2015NewLine
18311878Di2015UniqueSeparatorpublic class RelayCommand : ICommandDi2015NewLine{Di2015NewLine    readonly Action<object> _execute;Di2015NewLine    readonly Predicate<object> _canExecute;Di2015NewLineDi2015NewLine    public RelayCommand(Action<object> execute) : this(execute, null)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public RelayCommand(Action<object> execute, Predicate<object> canExecute)Di2015NewLine    {Di2015NewLine        if (execute == null)Di2015NewLine            throw new ArgumentNullException("execute");Di2015NewLineDi2015NewLine        _execute = execute;Di2015NewLine        _canExecute = canExecute;           Di2015NewLine    }Di2015NewLineDi2015NewLine    #region ICommand MembersDi2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return _canExecute == null ? true : _canExecute(parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        _execute(parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler CanExecuteChangedDi2015NewLine    {Di2015NewLine        add { CommandManager.RequerySuggested += value; }Di2015NewLine        remove { CommandManager.RequerySuggested -= value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
18311878Di2015UniqueSeparator<Button Command="{Binding MyCommand}" .../>Di2015NewLine
18311878Di2015UniqueSeparatorICommand
18311878Di2015UniqueSeparatorpublic ICommand MyCommand { get; private set; }Di2015NewLineDi2015NewLine//in constructor:Di2015NewLineMyCommand = new RelayCommand(_ => SomeActionOnButtonClick(), _ => HasChanges);Di2015NewLine
18311878Di2015UniqueSeparatorCommandManager.InvalidateRequerySuggested
18312005Di2015UniqueSeparatorvar rows = dt.AsEnumerable();Di2015NewLinevar firstCol = string.Join(",", rows.Select(r => r.Field<string>(0)));Di2015NewLinevar otherColumns = dt.Columns.Cast<DataColumn>().Skip(1)Di2015NewLine    .Select(dc => string.Format("{0},{1}", Di2015NewLine        dc.ColumnName, Di2015NewLine        string.Join(",", rows.Select(r => r.Field<int>(dc)))));Di2015NewLinestring sDataTableOutput = string.Format("{0}|{1}", Di2015NewLine    firstCol, Di2015NewLine    string.Join("|", otherColumns));Di2015NewLine
18312005Di2015UniqueSeparatorA,B,C|Value1,5,6,4|Value2,5,3,9|Value3,0,1,9
18312066Di2015UniqueSeparatordelegate long GetLengthCallback (IntPtr handle);Di2015NewLineDi2015NewLine// Xamarin.iOS needs to the MonoPInvokeCallback attributeDi2015NewLine// so that the AOT compiler can emit a methodDi2015NewLine// that can be called directly from native code.Di2015NewLine[MonoPInvokeCallback (typeof (GetLengthCallback)]Di2015NewLinestatic long GetLengthFromStream (IntPtr handle)Di2015NewLine{Di2015NewLine    var stream = (Stream) GCHandle.FromIntPtr (handle).Target;Di2015NewLine    return stream.Length;Di2015NewLine}Di2015NewLineDi2015NewLinestatic List<object> delegates = new List<object> ();Di2015NewLineDi2015NewLinestatic void SetCallbacks (Stream stream)Di2015NewLine{Di2015NewLine    NativeMethods.SetStreamObject (new GCHandle (stream).ToIntPtr ());Di2015NewLineDi2015NewLine    var delGetLength = new GetLengthCallback (GetLengthFromStream);Di2015NewLine    // This is required so that the GC doesn't free the delegateDi2015NewLine    delegates.Add (delGetLength);Di2015NewLine    NativeMethods.SetStreamGetLengthCallback (delGetLength);Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
18312105Di2015UniqueSeparatorMagicSource(StringsProvider)Di2015NewLine    .Select(inner=>inner.Finally(CleanUp))Di2015NewLine    .Switch()Di2015NewLine    .Subscribe(r => {/*...*/});Di2015NewLine
18312105Di2015UniqueSeparatorInitially(Action)
18312105Di2015UniqueSeparatorpublic static class ObservableExDi2015NewLine{Di2015NewLine    public static IObservable<T> Initially<T>(this IObservable<T> source, Action onSubscribe)Di2015NewLine    {Di2015NewLine        return Observable.Create<T>(o=>{Di2015NewLine            tryDi2015NewLine            {           Di2015NewLine                onSubscribe();Di2015NewLine                return source.Subscribe(o);Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                o.OnError(ex);Di2015NewLine                return Disposable.Empty;Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine}Di2015NewLine
18312105Di2015UniqueSeparatorMagicSource(StringsProvider)Di2015NewLine    .Select(inner=>inner.Initially(Prepare))Di2015NewLine    .Switch()Di2015NewLine    .Subscribe(r => {/*...*/});Di2015NewLine
18312367Di2015UniqueSeparatorMapHttpRoute
18312367Di2015UniqueSeparatorApiController
18312367Di2015UniqueSeparatorHomeController
18312367Di2015UniqueSeparatorController
18312386Di2015UniqueSeparatorpublic int GetMaxPK<T>(this IQueryable<T> query, string pkPropertyName)Di2015NewLine{Di2015NewLine    // TODO: add argument checksDi2015NewLine    var parameter = Expression.Parameter(typeof(T));Di2015NewLine    var body = Expression.Property(parameter, pkPropertyName);Di2015NewLine    var lambda = Expression.Lambda<Func<T,int>>(body, parameter);Di2015NewLine    var result = query.Max (lambda);Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
18312601Di2015UniqueSeparatorEncoding.Default
18312601Di2015UniqueSeparatorContent-Type
18312601Di2015UniqueSeparator<meta http-equiv="Content-Type" content='text/html; charset=utf-8'>
18312601Di2015UniqueSeparatorvar bytes = Encoding.Default.GetBytes(myString);Di2015NewLinevar correctString = Encoding.UTF8.GetString(bytes);Di2015NewLine
18312601Di2015UniqueSeparatorEncoding.Default
18312635Di2015UniqueSeparatorvar result = input.Select(converter).ToArray();Di2015NewLine
18312810Di2015UniqueSeparatorDataTable dst = new DataTable();Di2015NewLinedst = (DataTable)dgvMyMembers.DataSource;Di2015NewLinedst.TableName = "DataGridviewTpXml";Di2015NewLinedst.WriteXml(@"Filepath", true);Di2015NewLine
18312810Di2015UniqueSeparatorDataTable dst = new DataTable();Di2015NewLinedst.Columns.Add("no", typeof(int));Di2015NewLinedst.Columns.Add("name", typeof(string));Di2015NewLineDataRow row = dst.NewRow();Di2015NewLinerow[0] = 1;Di2015NewLinerow[1] = "name1";Di2015NewLineDi2015NewLineDataRow row1 = dst.NewRow();Di2015NewLinerow1[0] = 2;Di2015NewLinerow1[1] = "name2";Di2015NewLinedst.Rows.Add(row);Di2015NewLinedst.Rows.Add(row1);Di2015NewLinedst.TableName = "DataGridviewTpXml";Di2015NewLinedst.WriteXml(@"C:\\Users\\prabu\\Desktop\\myxml.xml", true);Di2015NewLine
18312810Di2015UniqueSeparator    <?xml version="1.0" standalone="true"?>Di2015NewLine    <DocumentElement>Di2015NewLine       <DataGridviewTpXml>Di2015NewLine          <no>1</no>Di2015NewLine          <name>name1</name>Di2015NewLine       </DataGridviewTpXml>Di2015NewLine       <DataGridviewTpXml>Di2015NewLine          <no>2</no>Di2015NewLine          <name>name2</name>Di2015NewLine       </DataGridviewTpXml>Di2015NewLine    </DocumentElement>Di2015NewLine
18312979Di2015UniqueSeparatorIf item IsNot Nothing ThenDi2015NewLine
18313068Di2015UniqueSeparatorDebug.Log(hit.point.ToString("F4"));Di2015NewLine
18313068Di2015UniqueSeparator"F4"
18313093Di2015UniqueSeparatorTaskScheduler.Current
18313093Di2015UniqueSeparatorpublic Task ContinueWith(Action<Task<TResult>> continuationAction)Di2015NewLine{Di2015NewLine  StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;Di2015NewLine  return this.ContinueWith(continuationAction, TaskScheduler.Current, new CancellationToken(), TaskContinuationOptions.None, ref stackMark);Di2015NewLine}Di2015NewLine
18313093Di2015UniqueSeparatorTaskScheduler.Current
18313093Di2015UniqueSeparatorTaskScheduler.Default
18313093Di2015UniqueSeparatorawait
18313410Di2015UniqueSeparatorButton1.Style.Add("display", "block");Di2015NewLine
18313410Di2015UniqueSeparatorButton1.Style["display"] = "block";Di2015NewLine
18313410Di2015UniqueSeparatorvisible
18313410Di2015UniqueSeparatorloginLoader.Visible = true;Di2015NewLine
18313554Di2015UniqueSeparatorImage
18313554Di2015UniqueSeparatorImage
18313554Di2015UniqueSeparatorImage.FromFile(filename)Di2015NewLine
18313554Di2015UniqueSeparatorImage
18313554Di2015UniqueSeparatorStream dataStream = File.OpenRead(filename);Di2015NewLineimage.rawData = new byte[(int) dataStream.Length];Di2015NewLinedataStream.Read(image.rawData, 0, (int) dataStream.Length);Di2015NewLine
18313554Di2015UniqueSeparatorImage
18313554Di2015UniqueSeparatorImage
18313554Di2015UniqueSeparatorFileInfo
18313554Di2015UniqueSeparatorImage
18313686Di2015UniqueSeparator    [DllImport("user32.dll")]Di2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    static extern bool IsWindowVisible(IntPtr hWnd);Di2015NewLineDi2015NewLine    msg = REDMESSAGE;Di2015NewLine    if (hwnd == IntPtr.Zero)Di2015NewLine        hwnd = FindWindow(null, "Winforms Application");Di2015NewLine    IntPtr hwnd1 = FindWindow(null, "ClientApp");Di2015NewLineDi2015NewLine    if (IsWindowVisible(hwnd1))Di2015NewLine    {Di2015NewLine         if (hwnd != IntPtr.Zero)Di2015NewLine              SetBackColor(hwnd, msg);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine         msg = YELLOWMESSAGE;Di2015NewLine         SetBackColor(hwnd, msg);Di2015NewLine    }Di2015NewLine
18313782Di2015UniqueSeparatordynamic-linq
18313782Di2015UniqueSeparatorMath
18313782Di2015UniqueSeparatorConvert
18313782Di2015UniqueSeparatorint
18313782Di2015UniqueSeparatorfloat
18313782Di2015UniqueSeparatorstring
18313782Di2015UniqueSeparatorGuid
18313782Di2015UniqueSeparatorTimespan
18313782Di2015UniqueSeparatorDateTime
18313782Di2015UniqueSeparatorSystem.Linq.Dynamic.ExpressionParser.predefinedTypes
18313782Di2015UniqueSeparator.Select("Guid.NewGuid().ToString()").Cast<string>().ToArray()
18313782Di2015UniqueSeparatorvar type = typeof(DynamicQueryable).Assembly.GetType("System.Linq.Dynamic.ExpressionParser");Di2015NewLineDi2015NewLineFieldInfo field = type.GetField("predefinedTypes", BindingFlags.Static | BindingFlags.NonPublic);Di2015NewLineDi2015NewLineType[] predefinedTypes = (Type[])field.GetValue(null);Di2015NewLineDi2015NewLineArray.Resize(ref predefinedTypes, predefinedTypes.Length + 1);Di2015NewLinepredefinedTypes[predefinedTypes.Length - 1] = typeof(A); // Your typeDi2015NewLineDi2015NewLinefield.SetValue(null, predefinedTypes);Di2015NewLine
18313912Di2015UniqueSeparatorDispatcher.BeginInvoke(() => datelistbox.SelectedIndex = 0);Di2015NewLine
18314022Di2015UniqueSeparatorGC.Collect();
18314173Di2015UniqueSeparatorChildForm childForm1 = new ChildForm();Di2015NewLinechildForm1.ShowDialog(this);Di2015NewLine
18314179Di2015UniqueSeparatorC:\\Program Files\\Di2015NewLine
18314179Di2015UniqueSeparatorstring docs = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);Di2015NewLinedocs += "\\\\Speech.wav";Di2015NewLineRecognizer.SetInputToWaveFile(docs);Di2015NewLine
18314179Di2015UniqueSeparatorRecognizer.SetInputToWaveFileDi2015NewLine
18314207Di2015UniqueSeparator// You can use replace windows authentication with any user credentials who has proper permissions.Di2015NewLineusing (SqlConnection connection = new SqlConnection(@"server=(local);database=master;Integrated Security=SSPI"))Di2015NewLine{Di2015NewLine    connection.Open();Di2015NewLineDi2015NewLine    using (SqlCommand command = connection.CreateCommand())Di2015NewLine    {Di2015NewLine        command.CommandText = "CREATE DATABASE [XYZ]";Di2015NewLine        command.ExecuteNonQuery();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Quering the XYZ database createdDi2015NewLineusing (SqlConnection connection = new SqlConnection(@"server=(local);database=XYZ;Integrated Security=SSPI"))Di2015NewLine{Di2015NewLine    connection.Open();Di2015NewLineDi2015NewLine    using (SqlCommand command = connection.CreateCommand())Di2015NewLine    {Di2015NewLine        command.CommandText = "select * from sys.objects";Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
18314226Di2015UniqueSeparatornew
18314226Di2015UniqueSeparatorFileFacades
18314226Di2015UniqueSeparatorDirectoryFacade
18314226Di2015UniqueSeparatorFileFacade
18314226Di2015UniqueSeparatorFileFacadeFactory
18314226Di2015UniqueSeparatorConfigurationParser
18314226Di2015UniqueSeparatorKeyword
18314226Di2015UniqueSeparatorpublic class MyPublicAPIDi2015NewLine{Di2015NewLine    public MyPublicAPI()Di2015NewLine        : this(new Configuration(Di2015NewLine            new ConfigurationParser()))Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    internal MyPublicAPI(IConfiguration configuration)Di2015NewLine    {Di2015NewLine        this.configuration = configuration;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18314239Di2015UniqueSeparatorTasks
18314239Di2015UniqueSeparatorTask
18314239Di2015UniqueSeparatorException
18314239Di2015UniqueSeparatorTask
18314239Di2015UniqueSeparatorTask.WhenAll
18314239Di2015UniqueSeparatorTaskFactory.ContinueWhenAll
18314244Di2015UniqueSeparatorPath
18314244Di2015UniqueSeparatorElementName
18314244Di2015UniqueSeparatorRelativeSource
18314244Di2015UniqueSeparatorSource
18314260Di2015UniqueSeparatorRegex reg = new Regex(@"(-){2,}");Di2015NewLinestring s = reg.Replace("-----regex----is---cool", "$1");//=> -regex-is-coolDi2015NewLine
18314303Di2015UniqueSeparatorCostPageRow
18314303Di2015UniqueSeparatorCostPageParent
18314303Di2015UniqueSeparatorCostPageRow
18314303Di2015UniqueSeparatorCostPageParent
18314303Di2015UniqueSeparatorCostPageParent
18314303Di2015UniqueSeparatorCostPageSelection
18314303Di2015UniqueSeparatorCostPageParent
18314303Di2015UniqueSeparatorIGrouping<T>.Key
18314303Di2015UniqueSeparatorvar groups = costPageRowsDi2015NewLine    .GroupBy(x => new CostPageParent()Di2015NewLine        {Di2015NewLine            CostPage = x.CostPage,Di2015NewLine            Description = x.Description,Di2015NewLine            BillTypeDirect =  x.BillTypeDirect,Di2015NewLine            BillTypeWarehouse = x.BillTypeWarehouse,Di2015NewLine            OrderType = x.OrderType,Di2015NewLine            Vendor = x.VendorDi2015NewLine        }, Di2015NewLine        new CostPageParentEqualityComparer())Di2015NewLine    .Select(y => new CostPageSelectionDi2015NewLine        {Di2015NewLine            CostPageParent = y.Key,Di2015NewLine            ChildItems = y.Select(i => Di2015NewLine                new ItemChild()Di2015NewLine                { Di2015NewLine                    BrandCode = i.BrandCode,Di2015NewLine                    ItemDescription = i.ItemDescription,Di2015NewLine                    ItemID = i.ItemID,Di2015NewLine                    PackSize = i.PackSizeDi2015NewLine                })Di2015NewLine                .ToList()Di2015NewLine        })Di2015NewLine    .ToList();Di2015NewLine
18314303Di2015UniqueSeparatorIEqualityComparer<CostPageParent>
18314303Di2015UniqueSeparatorclass CostPageParentEqualityComparer : IEqualityComparer<CostPageParent>Di2015NewLine{Di2015NewLine    public bool Equals(CostPageParent x, CostPageParent y)Di2015NewLine    {Di2015NewLine        if (x == null)Di2015NewLine            return y == null;Di2015NewLineDi2015NewLine        if (object.ReferenceEquals(x, y))Di2015NewLine            return true;Di2015NewLineDi2015NewLine        return Di2015NewLine            x.BillTypeDirect == y.BillTypeDirect &&Di2015NewLine            x.BillTypeWarehouse == y.BillTypeWarehouse &&Di2015NewLine            ...Di2015NewLine    }Di2015NewLineDi2015NewLine    public int GetHashCode(CostPageParent obj)Di2015NewLine    {Di2015NewLine        var x = 31;Di2015NewLine        x = x * 17 + obj.BillTypeDirect.GetHashCode();Di2015NewLine        x = x * 17 + obj.BillTypeWarehouse.GetHashCode();Di2015NewLine        ...Di2015NewLine        return x;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18314388Di2015UniqueSeparatorpszIconFile
18314388Di2015UniqueSeparatoriIconIndex
18314461Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?> Di2015NewLine<configuration>Di2015NewLine    <system.webServer>Di2015NewLine        <rewrite>Di2015NewLine            <rules>Di2015NewLine                <rule name="ProjectPageContent_Redirect" stopProcessing="true">Di2015NewLine                    <match url="^/Project/Page/(\\d+)/Content.*" />Di2015NewLine                    <action type="Redirect" url="/Project/Page/{R:1}/Content" />Di2015NewLine                </rule>Di2015NewLine            </rules>Di2015NewLine        </rewrite>Di2015NewLine    </system.webServer>Di2015NewLine</configuration>Di2015NewLine
18314461Di2015UniqueSeparatorRedirectPermanent
18314461Di2015UniqueSeparatorpublic class RedirectController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult ProjectPageContent(Int32 id)Di2015NewLine    {Di2015NewLine        return RedirectPermanent(String.Format("/Project/Page/{0}/Content", id));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18314461Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    name: "ProjectPageContent_Redirect",Di2015NewLine    url: "/Project/Page/{id}/Contact{*extra}",Di2015NewLine    defaults: new { controller = "Redirect", action = "ProjectPageContent" }Di2015NewLine);Di2015NewLine
18314518Di2015UniqueSeparatorpublic static string ShortDescription(string Description)Di2015NewLine    {Di2015NewLine        string result = Description;Di2015NewLine        if (result.Length > 50)Di2015NewLine        {Di2015NewLine            result = result.Substring(0, 50);Di2015NewLine            result += "....";Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine
18314518Di2015UniqueSeparator<p>Di2015NewLine  <%# ShortDescription(Eval("Description").ToString())%>Di2015NewLine  <a href='ShowDescription.aspx?Id=<%# Eval("Id") %>'>Read more. . . </a>Di2015NewLine</p>Di2015NewLine
18314631Di2015UniqueSeparator(?<funcName>\\w+)\\(IN: ?|OUT: ?|\\G(?<inParam>[^,;()]+)?(?=[^)(;]*;)\\s*[,;]\\s*|\\G(?<outParam>[^,()]+)(?=[^;]*\\s*\\))\\s*[,)]\\s*Di2015NewLine
18314631Di2015UniqueSeparator    (?<funcName>\\w+)\\(IN: ?  # capture the function name and match "(IN: "Di2015NewLine  |                          # ORDi2015NewLine    OUT: ?                   # match "OUT: "Di2015NewLine  |                          # ORDi2015NewLine    \\G(?<inParam>[^,;()]+)?  # contiguous match, that captures a IN paramDi2015NewLine    (?=[^)(;]*;)             # check that it is always followed by ";"Di2015NewLine    \\s*[,;]\\s*               # match "," or ";" (to be always contiguous)Di2015NewLine  |                          # ORDi2015NewLine    \\G(?<outParam>[^,()]+)?  # contiguous match, that captures a OUT param Di2015NewLine    (?=[^;]*\\s*\\))           # check that it is always followed by ")"Di2015NewLine    \\s*[,)]\\s*               # match "," (to be always contiguous) or ")"Di2015NewLine
18314631Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    string subject = @"Add_func(IN: port_0, in_port_1; OUT: out_port99)Di2015NewLine        Some_func(IN:;OUT: abc_P1)Di2015NewLine        shift_data(IN:po1_p0;OUT: po1_p1, po1_p2)Di2015NewLine        Some_func2(IN: input_portA;OUT:)";Di2015NewLine    string pattern = @"(?<funcName>\\w+)\\(IN: ?|OUT: ?|\\G(?<inParam>[^,;()]+)?(?=[^)(;]*;)\\s*[,;]\\s*|\\G(?<outParam>[^,()]+)(?=[^;]*\\s*\\))\\s*[,)]\\s*";Di2015NewLine    Match m = Regex.Match(subject, pattern);Di2015NewLine    while (m.Success)Di2015NewLine    {Di2015NewLine        if (m.Groups["funcName"].ToString() != "")Di2015NewLine        {Di2015NewLine            Console.WriteLine("\\nfunction name: " + m.Groups["funcName"]);Di2015NewLine        }Di2015NewLine        if (m.Groups["inParam"].ToString() != "")Di2015NewLine        {Di2015NewLine            Console.WriteLine("IN param: " + m.Groups["inParam"]);Di2015NewLine        }Di2015NewLine        if (m.Groups["outParam"].ToString() != "")Di2015NewLine        {Di2015NewLine            Console.WriteLine("OUT param: "+m.Groups["outParam"]);Di2015NewLine        }Di2015NewLine        m = m.NextMatch();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18314631Di2015UniqueSeparator\\s*,\\s*
18314631Di2015UniqueSeparatorstring pattern = @"(?<funcName>\\w+)\\(\\s*IN:\\s*(?<inParams>[^;]*?)\\s*;\\s*OUT\\s*:\\s*(?<outParams>[^)]*?)\\s*\\)";Di2015NewLineMatch m = Regex.Match(subject, pattern);Di2015NewLinewhile (m.Success)Di2015NewLine{Di2015NewLine    string functionName = m.Groups["function name"].ToString();Di2015NewLine    string[] inParams = Regex.Split(m.Groups["inParams"].ToString(), @"\\s*,\\s*");Di2015NewLine    string[] outParams = Regex.Split(m.Groups["outParams"].ToString(), @"\\s*,\\s*");Di2015NewLine    // Why not construct a "function" object to store all these valuesDi2015NewLine    m = m.NextMatch();Di2015NewLine}Di2015NewLine
18314836Di2015UniqueSeparatorabstract class
18314836Di2015UniqueSeparatorabstract class
18314836Di2015UniqueSeparatorclass
18314836Di2015UniqueSeparatorabstract
18314858Di2015UniqueSeparatorCurrency
18314858Di2015UniqueSeparatorNumeric
18314858Di2015UniqueSeparatorToNumber(SUM({Table1.GrossAmt}, {Table1.ID})) - SUM({Table1.Total}, {Table1.ID}) - SUM({Table1.Insurance}, {Table1.ID})Di2015NewLine
18314896Di2015UniqueSeparatortable.setLockedWidth(true);Di2015NewLine
18314896Di2015UniqueSeparatortable.writeSelectedRows(0, 2, 0, -1, 236, 806, canvas);Di2015NewLine
18314896Di2015UniqueSeparator0
18314896Di2015UniqueSeparator2
18314896Di2015UniqueSeparatortable.writeSelectedRows(2, -1, 0, -1, 36, 806, canvas);Di2015NewLine
18314896Di2015UniqueSeparator2
18314896Di2015UniqueSeparator-1
18314896Di2015UniqueSeparator0
18314896Di2015UniqueSeparator-1
18314896Di2015UniqueSeparator36
18314896Di2015UniqueSeparator806
18315071Di2015UniqueSeparatorTextBoxFor
18315071Di2015UniqueSeparatortype
18315071Di2015UniqueSeparatorpublic HttpPostedFileBase MyImageFile { get; set; }Di2015NewLine
18315071Di2015UniqueSeparator@Html.TextBoxFor(m => m.MyImageFile , new { type = "file" })Di2015NewLine
18315093Di2015UniqueSeparatorclass BadClassDi2015NewLine{Di2015NewLine    public int Value; // <- NOT preferredDi2015NewLine}Di2015NewLineDi2015NewLineclass GoodClassDi2015NewLine{Di2015NewLine    private int value;Di2015NewLineDi2015NewLine    public int ValueDi2015NewLine    {Di2015NewLine        get { return this.value; }Di2015NewLine        set { this.value = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18315093Di2015UniqueSeparatorclass GoodClass : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private int value;Di2015NewLineDi2015NewLine    public int ValueDi2015NewLine    {Di2015NewLine        get { return this.value; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this.value = value;Di2015NewLine            this.OnPropertyChanged("Value");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    private void OnPropertyChanged(string name)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine        {Di2015NewLine            this.PropertyChanged(this, new PropertyChangedEventArgs(name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18315093Di2015UniqueSeparatorvoid SomeMethod()Di2015NewLine{Di2015NewLine    var instance = new GoodClass();Di2015NewLine    instance.PropertyChanged += this.OnPropertyChanged;Di2015NewLine}Di2015NewLineDi2015NewLinevoid OnPropertyChanged(object sender, PropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    if (e.PropertyName == "Value")Di2015NewLine    {Di2015NewLine        // Do something here.Di2015NewLine    }Di2015NewLine}Di2015NewLine
18315093Di2015UniqueSeparatorValue
18315093Di2015UniqueSeparatorPropertyChanged
18315104Di2015UniqueSeparatorCloneObject
18315104Di2015UniqueSeparatorproperty.SetValue(target, CloneObject(value));
18315104Di2015UniqueSeparatorvar value = ...
18315104Di2015UniqueSeparatorif
18315104Di2015UniqueSeparator    var value = @event.OldState[i];Di2015NewLineDi2015NewLine    if (property.CanWrite && !(@event.Persister.PropertyTypes[i] is CollectionType)) {Di2015NewLine        if (value != null && (@event.Persister.PropertyTypes[i] is ComponentType || @event.Persister.PropertyTypes[i] is EntityType))Di2015NewLine
18315104Di2015UniqueSeparator    if (property.CanWrite && !(@event.Persister.PropertyTypes[i] is CollectionType)) {Di2015NewLine        var value = @event.OldState[i];Di2015NewLine        if (value != null && (@event.Persister.PropertyTypes[i] is ComponentType || @event.Persister.PropertyTypes[i] is EntityType))Di2015NewLine
18315104Di2015UniqueSeparator    var value = property.GetValue(source, null);Di2015NewLineDi2015NewLine    if (property.CanWrite && (property.PropertyType == typeof(string) || !typeof(IEnumerable).IsAssignableFrom(property.PropertyType)) && !property.PropertyType.IsInterface) {Di2015NewLine        if (value != null && typeof(IEntity).IsAssignableFrom(property.PropertyType))Di2015NewLine
18315104Di2015UniqueSeparator    if (property.CanWrite && (property.PropertyType == typeof(string) || !typeof(IEnumerable).IsAssignableFrom(property.PropertyType)) && !property.PropertyType.IsInterface) {Di2015NewLine        var value = property.GetValue(source, null);Di2015NewLine        if (value != null && typeof(IEntity).IsAssignableFrom(property.PropertyType))Di2015NewLine
18315331Di2015UniqueSeparator    var records = from t in queryDi2015NewLine    let maxversion =Di2015NewLine            (from v in _context.tblTradeSpendsDi2015NewLine            where v.Customer == t.CustomerDi2015NewLine            && v.LineOfBusiness == t.LineOfBusinessDi2015NewLine            && v.DealYear == t.DealYearDi2015NewLine            select v.VersionDate).Max()Di2015NewLine    where t.PlanType == "Planner" &&Di2015NewLine    t.VersionDate == maxversionDi2015NewLine    select tDi2015NewLine
18315395Di2015UniqueSeparatorclass AnimalDi2015NewLine{Di2015NewLine   // Factory methodDi2015NewLine   public static Animal Create(string name)Di2015NewLine   {Di2015NewLine      Animal animal = null;Di2015NewLine      ...  // logic based on 'name'Di2015NewLine      return animal;Di2015NewLine   }Di2015NewLine}Di2015NewLine
18315424Di2015UniqueSeparatornew
18315424Di2015UniqueSeparatorcurrent
18315578Di2015UniqueSeparatorinterface
18315638Di2015UniqueSeparatorpublic class CountEnumDi2015NewLine{Di2015NewLine   public static readonly CountEnum DEFAULT = new CountEnum();Di2015NewLine   private static readonly List<CountEnum> AllInstances = new List<CountEnum>();Di2015NewLineDi2015NewLine   private CountEnum()Di2015NewLine   {Di2015NewLine       AllInstances.Add(this);Di2015NewLine   }Di2015NewLine}Di2015NewLine
18315638Di2015UniqueSeparatorCountEnum
18315638Di2015UniqueSeparatorNullReferenceException
18315638Di2015UniqueSeparatorCountEnum
18315638Di2015UniqueSeparatorCountEnum
18315638Di2015UniqueSeparatorInnerException: System.NullReferenceExceptionDi2015NewLine     Message=Object reference not set to an instance of an object.Di2015NewLine     Source=CP.DataObjectDi2015NewLine     StackTrace:Di2015NewLine          at CP.Types.CountEnum..ctor(String code, String name) in C:\\...\\CountEnum.cs:line 23Di2015NewLine          at CP.Types.CountEnum..cctor() in C:\\...\\CountEnum.cs:line 8Di2015NewLine
18315638Di2015UniqueSeparatorCountEnum.cs
18315638Di2015UniqueSeparatorpublic static readonly CountEnum CANADA = new CountEnum("CA", "Canada");Di2015NewLinepublic static readonly CountEnum DEFAULT = new CountEnum();Di2015NewLineprivate static readonly EnumDataTypeList OPTIONS = new EnumDataTypeList();Di2015NewLine
18315638Di2015UniqueSeparatorCountEnum("CA", "Canada")
18315638Di2015UniqueSeparatorOPTIONS
18315638Di2015UniqueSeparatorOPTIONS
18315638Di2015UniqueSeparatorOPTIONS
18315638Di2015UniqueSeparatorprivate static readonly EnumDataTypeList OPTIONS = new EnumDataTypeList();Di2015NewLinepublic static readonly CountEnum CANADA = new CountEnum("CA", "Canada");Di2015NewLinepublic static readonly CountEnum DEFAULT = new CountEnum();Di2015NewLine
18315698Di2015UniqueSeparatorusing input = System.Int32;Di2015NewLine
18315698Di2015UniqueSeparatorpublic input? data;Di2015NewLine
18315698Di2015UniqueSeparatorList<T>
18315700Di2015UniqueSeparatorTimeSpan
18315700Di2015UniqueSeparatorINTEGER
18315700Di2015UniqueSeparatorTimeSpan.Ticks
18315700Di2015UniqueSeparatorINTEGER
18315700Di2015UniqueSeparatorTimeSpan.FromTicks
18315700Di2015UniqueSeparatornew TimeSpan(ticks)
18315700Di2015UniqueSeparatorTimeSpan.TotalSeconds
18315700Di2015UniqueSeparatorINTEGER
18315700Di2015UniqueSeparatorTimeSpan.FromSeconds
18315829Di2015UniqueSeparatorMessageBoxResult
18315829Di2015UniqueSeparatorDialogResult
18315829Di2015UniqueSeparatorMessageBoxResult messageBoxResult = System.Windows.MessageBox.Show("Are you sure?", "Delete Confirmation", System.Windows.MessageBoxButton.YesNo);Di2015NewLine        if (messageBoxResult == MessageBoxResult.Yes)Di2015NewLine //...........Di2015NewLine
18315953Di2015UniqueSeparatorgpedit.msc
18315953Di2015UniqueSeparator<configuration>Di2015NewLine    <runtime>Di2015NewLine        <generatePublisherEvidence enabled="false"/>Di2015NewLine    </runtime>Di2015NewLine</configuration>Di2015NewLine
18315957Di2015UniqueSeparatortypeof(TEntity).GetProperty("MyProp", BindingFlags.Public | BindingFlags.Static)Di2015NewLine
18315989Di2015UniqueSeparator 
18315989Di2015UniqueSeparator 
18315989Di2015UniqueSeparatortestDir1 = currentDir + "\\\\" + System.Net.WebUtility.HtmlDecode(@" ") + "\\\\";Di2015NewLine
18315989Di2015UniqueSeparatortestDir1 = currentDir + "\\\\" + System.Net.WebUtility.HtmlDecode(@" ") + "\\\\";    Di2015NewLine
18316083Di2015UniqueSeparatorpublic class CommentDi2015NewLine{Di2015NewLine    // snip - see aboveDi2015NewLineDi2015NewLine    public int UserId {get; set;}Di2015NewLine    public virtual UserProfile User { get; set; }Di2015NewLine}Di2015NewLine
18316083Di2015UniqueSeparatorpublic class UserProfileDi2015NewLine    {Di2015NewLine        [Key]Di2015NewLine        [DatabaseGeneratedAttribute(DatabaseGeneratedOption.Identity)]Di2015NewLine        public int UserId { get; set; }Di2015NewLine        public string UserName { get; set; }Di2015NewLine        public virtual ICollection<Comment> Comments { get; set; }Di2015NewLine    }Di2015NewLine
18316170Di2015UniqueSeparatordiv = weightSum != 0 ? weightedValueSum / weightSum : -1Di2015NewLine
18316170Di2015UniqueSeparatorvar res = scores.GroupBy(p => p.Date.Year)Di2015NewLine                .Select(p => new { Di2015NewLine                    Year = p.Key,Di2015NewLine                    weightedValueSum = p.Sum(x => x.PossScore * x.Weight), Di2015NewLine                    weightSum = p.Sum(x => x.Weight) Di2015NewLine                })Di2015NewLine                .Select(p => new {Di2015NewLine                    Year = p.Year,Di2015NewLine                    wa2 = p.weightSum != 0 ? p.weightedValueSum / p.weightSum : -1Di2015NewLine                })Di2015NewLine                .ToArray();Di2015NewLine
18316170Di2015UniqueSeparatorvar res2 = (from p in scoresDi2015NewLine            group p by p.Date.Year into pDi2015NewLine            let Year = p.KeyDi2015NewLine            let weightedValueSum = p.Sum(x => x.PossScore * x.Weight)Di2015NewLine            let weightSum = p.Sum(x => x.Weight)Di2015NewLine            select new {Di2015NewLine                Year = Year,Di2015NewLine                wa2 = weightSum != 0 ? weightedValueSum / weightSum : -1Di2015NewLine            }).ToArray();Di2015NewLine
18316194Di2015UniqueSeparatorControl.FindControl( ... )
18316194Di2015UniqueSeparator<asp:Panel ID="CheckboxContainer" runat="server"> .... checkboxes .... </asp:Panel>Di2015NewLine
18316194Di2015UniqueSeparatorvar check = CheckboxContainer.FindControl( clist[i] ) as CheckBox;Di2015NewLine
18316194Di2015UniqueSeparatorCheckBox
18316194Di2015UniqueSeparator.Checked
18316376Di2015UniqueSeparatortitle: "TÃ¢che: @Model.Get_List_Tache()[i].Tache_description"Di2015NewLine
18316376Di2015UniqueSeparator"TÃ¢che: "
18316376Di2015UniqueSeparator"dÃ©veloppement"
18316376Di2015UniqueSeparator@Html.Raw( ... dynamic text ... )
18316376Di2015UniqueSeparator;
18316376Di2015UniqueSeparator"
18316511Di2015UniqueSeparatorMapVirtualKey(vk, MAPVK_VK_TO_VSC)
18316555Di2015UniqueSeparatorSqlException
18316555Di2015UniqueSeparator547
18316567Di2015UniqueSeparatorthrows
18316750Di2015UniqueSeparatorsession.clear()
18316750Di2015UniqueSeparatorsession.flush()
18316779Di2015UniqueSeparatorreturn 0;Di2015NewLine
18316842Di2015UniqueSeparatorDataTable dt = new DataTable();Di2015NewLineusing (var con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString))Di2015NewLineusing (var cmd = new SqlCommand(" SELECT FName" +Di2015NewLine                                        " FROM EmployeeTable " +Di2015NewLine                                        " WHERE EmployeeId = @empId",Di2015NewLine                                        con))Di2015NewLine{Di2015NewLine    cmd.Parameters.Add(new SqlParameter("@empId",empId));Di2015NewLine    tryDi2015NewLine    {Di2015NewLine           con.open();Di2015NewLine           dt.Load(cmd.ExecuteReader());Di2015NewLine    }Di2015NewLine    catch(Exception) //BAD BAD BAD!!! Why are you doing this!Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLinereturn dt;Di2015NewLine
18316842Di2015UniqueSeparatorArgumentException
18316879Di2015UniqueSeparatorConcurrentDictionary
18316989Di2015UniqueSeparator public void GetImageData(string BitmapName, TextBox ImageName, TextBox ImageCreated, TextBox Size, TextBox Width, TextBox Height, TextBox HResolution, TextBox VResolution, TextBox Type, PictureBox Preview)Di2015NewLine    {Di2015NewLine      tryDi2015NewLine      {Di2015NewLine        FileInfo fileinfo = new FileInfo(BitmapName);Di2015NewLine        ImageName.Text = fileinfo.Name;Di2015NewLine        ImageCreated.Text = fileinfo.CreationTime.ToString();Di2015NewLine        Size.Text = (fileinfo.Length / 1024).ToString() + " Kilobytes";Di2015NewLine        Image image = Image.FromFile(BitmapName);Di2015NewLine        using (Bitmap Bit = new Bitmap(image))Di2015NewLine        {Di2015NewLine          Height.Text = Bit.Height.ToString() + " px";Di2015NewLine          Width.Text = Bit.Width.ToString() + " px";Di2015NewLine          HResolution.Text = Bit.HorizontalResolution.ToString() + " dpi";Di2015NewLine          VResolution.Text = Bit.VerticalResolution.ToString() + " dpi";Di2015NewLine          if (fileinfo.Extension == ".bmp" || fileinfo.Extension == ".BMP")Di2015NewLine          {Di2015NewLine            Type.Text = "Bitmap Image";Di2015NewLine          }Di2015NewLine          else if (fileinfo.Extension == ".jpeg" || fileinfo.Extension == ".JPEG")Di2015NewLine          {Di2015NewLine            Type.Text = "Jpeg Image";Di2015NewLine          }Di2015NewLine          else if (fileinfo.Extension == ".jpg" || fileinfo.Extension == ".JPG")Di2015NewLine          {Di2015NewLine            Type.Text = "Jpg Image";Di2015NewLine          }Di2015NewLine          else if (fileinfo.Extension == ".png" || fileinfo.Extension == ".PNG")Di2015NewLine          {Di2015NewLine            Type.Text = "Png Image";Di2015NewLine          }Di2015NewLine          else if (fileinfo.Extension == ".gif" || fileinfo.Extension == ".GIF")Di2015NewLine          {Di2015NewLine            Type.Text = "GIF Image";Di2015NewLine          }Di2015NewLine          if (Preview.Image != null)Di2015NewLine            Preview.Image.Dispose();Di2015NewLine          Preview.Image = image;Di2015NewLine        }Di2015NewLine      }Di2015NewLine      catch (OutOfMemoryException)Di2015NewLine      {Di2015NewLine        Preview.Image = Properties.Resources.InvalidImage;Di2015NewLine      }Di2015NewLine    }Di2015NewLine
18317048Di2015UniqueSeparatorthis._lmsDb.rptRentPaid
18317048Di2015UniqueSeparatorCategory
18317048Di2015UniqueSeparatorvar searchResults = (from s in resultDi2015NewLine                     from c in paymentCategoryValues Di2015NewLine                     where (IN_SiteId <= 0 || s.SiteId == IN_SiteId)Di2015NewLine                            && (IN_LandownerId <= 0 || s.LandownerId == IN_LandownerId)Di2015NewLine                            && (IN_PaymentCategoryId <= 0 || s.PaymentCategoryId == IN_PaymentCategoryId)Di2015NewLine                            && (IN_PaymentTypeId <= 0 || s.PaymentTypeId == IN_PaymentTypeId)Di2015NewLine                            && (s.PaymentCategoryId == c.Key)Di2015NewLine                         select new {Di2015NewLine                             SiteId = s.SiteId,Di2015NewLine                             LandownerId = s.LandownerId,Di2015NewLine                             PaymentCategoryId = s.PaymentCategoryId,Di2015NewLine                             PaymentTypeId = s.PaymentTypeId,Di2015NewLine                             Category = c.CategoryDi2015NewLine                         });Di2015NewLine
18317048Di2015UniqueSeparatorRentPaidReportRecord
18317048Di2015UniqueSeparatorCategory
18317048Di2015UniqueSeparatorIQueryable<RentPaidReportRecord>
18317048Di2015UniqueSeparatorCategoryId
18317048Di2015UniqueSeparatorPaymentCategory
18317048Di2015UniqueSeparatorpublic static class SomeCategoriesDi2015NewLine{Di2015NewLine    public enum PaymentCategoryDi2015NewLine    {Di2015NewLine        Category1 = 1,Di2015NewLine        Category2 = 2,Di2015NewLine        Category3 = 3,Di2015NewLine        Category4 = 4,Di2015NewLine        Category5 = 5,Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string ToDescription(this PaymentCategory category)Di2015NewLine    {Di2015NewLine        return category.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class SomeRentDbDi2015NewLine{Di2015NewLine    static SomeRentRecord[] _records = new[]Di2015NewLine    {Di2015NewLine        new SomeRentRecord() { SiteId = 1, LandOwnerId = 2, PaymentCategoryId = 4, PaymentTypeId = 3, PropertyName = "Propery 1" },Di2015NewLine        new SomeRentRecord() { SiteId = 1, LandOwnerId = 4, PaymentCategoryId = 2, PaymentTypeId = 4, PropertyName = "Propery 2" },Di2015NewLine        new SomeRentRecord() { SiteId = 2, LandOwnerId = 4, PaymentCategoryId = 3, PaymentTypeId = 5, PropertyName = "Propery 3" },Di2015NewLine        new SomeRentRecord() { SiteId = 3, LandOwnerId = 5, PaymentCategoryId = 4, PaymentTypeId = 6, PropertyName = "Propery 4" },Di2015NewLine        new SomeRentRecord() { SiteId = 4, LandOwnerId = 4, PaymentCategoryId = 1, PaymentTypeId = 7, PropertyName = "Propery 5" },Di2015NewLine        new SomeRentRecord() { SiteId = 5, LandOwnerId = 5, PaymentCategoryId = 5, PaymentTypeId = 8, PropertyName = "Propery 6" },Di2015NewLine    };Di2015NewLineDi2015NewLine    public class SomeRentRecordDi2015NewLine    {Di2015NewLine        public int SiteId;Di2015NewLine        public int LandOwnerId;Di2015NewLine        public int PaymentCategoryId;Di2015NewLine        public int PaymentTypeId;Di2015NewLine        public string PropertyName;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IQueryable<SomeRentRecord> AllDi2015NewLine    {Di2015NewLine        get { return _records.AsQueryable(); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IQueryable<SomeRentRecord> RecordsWhere(Expression<Func<SomeRentRecord, bool>> expr)Di2015NewLine    {Di2015NewLine        return _records.AsQueryable().Where(expr);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RentPaidReportRecordDi2015NewLine{Di2015NewLine    public int SiteId;Di2015NewLine    public int LandOwnerId;Di2015NewLine    public int PaymentCategoryId;Di2015NewLine    public int PaymentTypeId;Di2015NewLine    public string PropertyName;Di2015NewLine    public string Category;Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var db = new SomeRentDb();Di2015NewLine        var result = db.All;Di2015NewLineDi2015NewLine        var paymentCategoryValues =Di2015NewLine                Enum.GetValues(typeof(SomeCategories.PaymentCategory)).Cast<SomeCategories.PaymentCategory>().SelectDi2015NewLine                    (r => new KeyValuePair<int, string>((int)r, r.ToDescription()));Di2015NewLineDi2015NewLine        var paymentCategoryDictionary = EnumDi2015NewLine            .GetValues(typeof(SomeCategories.PaymentCategory))Di2015NewLine            .Cast<SomeCategories.PaymentCategory>()Di2015NewLine            .ToDictionary(r => (int)r, r => r.ToDescription());Di2015NewLineDi2015NewLine        var searchResults = from s in resultDi2015NewLine                            from c in paymentCategoryValuesDi2015NewLine                            where s.LandOwnerId == 4 && s.PaymentCategoryId == c.KeyDi2015NewLine                            select new RentPaidReportRecord()Di2015NewLine                            {Di2015NewLine                                SiteId = s.SiteId,Di2015NewLine                                LandOwnerId = s.LandOwnerId,Di2015NewLine                                PaymentCategoryId = s.PaymentCategoryId,Di2015NewLine                                PaymentTypeId = s.PaymentTypeId,Di2015NewLine                                PropertyName = s.PropertyName,Di2015NewLine                                Category = c.ValueDi2015NewLine                            };Di2015NewLine        var searchResults2 = from s in resultDi2015NewLine                             from c in paymentCategoryValuesDi2015NewLine                             where s.LandOwnerId == 4 && s.PaymentCategoryId == c.KeyDi2015NewLine                             select new Di2015NewLine                             {Di2015NewLine                                 SiteId = s.SiteId,Di2015NewLine                                 LandOwnerId = s.LandOwnerId,Di2015NewLine                                 PaymentCategoryId = s.PaymentCategoryId,Di2015NewLine                                 PaymentTypeId = s.PaymentTypeId,Di2015NewLine                                 PropertyName = s.PropertyName,Di2015NewLine                                 Category = c.ValueDi2015NewLine                             };Di2015NewLine        var searchResults3 = from s in resultDi2015NewLine                             where s.LandOwnerId == 4Di2015NewLine                             select newDi2015NewLine                             {Di2015NewLine                                 SiteId = s.SiteId,Di2015NewLine                                 LandOwnerId = s.LandOwnerId,Di2015NewLine                                 PaymentCategoryId = s.PaymentCategoryId,Di2015NewLine                                 PaymentTypeId = s.PaymentTypeId,Di2015NewLine                                 PropertyName = s.PropertyName,Di2015NewLine                                 Category = paymentCategoryDictionary[s.PaymentCategoryId]Di2015NewLine                             };Di2015NewLine        foreach (var r in searchResults)Di2015NewLine            Console.WriteLine("{0} - {1}", r.PropertyName, r.Category);Di2015NewLine        foreach (var r in searchResults2)Di2015NewLine            Console.WriteLine("{0} - {1}", r.PropertyName, r.Category);Di2015NewLine        foreach (var r in searchResults3)Di2015NewLine            Console.WriteLine("{0} - {1}", r.PropertyName, r.Category);Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18317150Di2015UniqueSeparatorAssembly.GetCallingAssembly
18317150Di2015UniqueSeparator[MethodImpl(MethodImplOptions.NoInlining)]Di2015NewLinepublic static string JndGetEmailTextForDebuggingExceptionError(this Exception Ex)Di2015NewLine{Di2015NewLine    StackFrame sf = Ex.JndGetStackFrame();Di2015NewLineDi2015NewLine    string OutputHTML =         "<i><b><u>For Developer Use Only: </u></b></i>"                    + "<br>" + Di2015NewLine                                                                                                     "<br>" +Di2015NewLine                                "Project Name:   "  + Assembly.GetCallingAssembly().GetName().Name + "<br>" +Di2015NewLine                                "File Name:      "  + sf.GetFileName()                             + "<br>" +Di2015NewLine                                "Class Name:     "  + sf.GetMethod().DeclaringType                 + "<br>" +Di2015NewLine                                "Method Name:    "  + sf.GetMethod()                               + "<br>" +Di2015NewLine                                "Line Number:    "  + sf.GetFileLineNumber()                       + "<br>" +Di2015NewLine                                "Line Column:    "  + sf.GetFileColumnNumber()                     + "<br>" +Di2015NewLine                                "Error Message:  "  + Ex.Message                                   + "<br>" +Di2015NewLine                                "Inner Message : "  + Ex.InnerException.Message                    + "<br>";Di2015NewLineDi2015NewLine    return OutputHTML;Di2015NewLine}Di2015NewLine
18317150Di2015UniqueSeparatorNoInlining
18317150Di2015UniqueSeparatorCallerFilePath
18317150Di2015UniqueSeparatorpublic static string JndGetEmailTextForDebuggingExceptionErrorDi2015NewLine              (this Exception Ex, [CallerFilePath] string filePath = "")Di2015NewLine{Di2015NewLine    StackFrame sf = Ex.JndGetStackFrame();Di2015NewLineDi2015NewLine    string OutputHTML =         "<i><b><u>For Developer Use Only: </u></b></i>" + "<br><br>" +Di2015NewLine                                "Source File Path:   "  + filePath + "<br>" +Di2015NewLine...Di2015NewLine
18317163Di2015UniqueSeparatorDataAdapter
18317163Di2015UniqueSeparatorDataSet
18317163Di2015UniqueSeparatorSqlConnection conn = new SqlConnection(connString);Di2015NewLineSqlCommand cmd = new SqlCommand("SELECT * FROM tbl_tblname", conn);Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLineDi2015NewLine     conn.Open();Di2015NewLine     DataSet ds = new DataSet();Di2015NewLine     SqlDataAdapter da = new SqlDataAdapter();Di2015NewLine     da.SelectCommand = cmd; // Set the select command for the DataAdapterDi2015NewLine     da.Fill(ds); // Fill the DataSet with the DataAdapterDi2015NewLine     DataGridView1.DataSource = ds.Tables[0]; // I just displayed the results in a grid view for simplicity.  If Asp.Net you will have to call a DataBind of course.Di2015NewLineDi2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine     conn.Close();Di2015NewLine     conn.Dispose();Di2015NewLine}Di2015NewLine
18317185Di2015UniqueSeparatorpublic static IList<node> BuildTree(this IEnumerable<node> source)Di2015NewLine{Di2015NewLine    var groups = source.GroupBy(i => i.parentKey);Di2015NewLineDi2015NewLine    var roots = groups.FirstOrDefault(g => g.Key==null).ToList();Di2015NewLineDi2015NewLine    if (roots.Count > 0)Di2015NewLine    {Di2015NewLine        var dict = groups.Where(g => g.Key!=null).ToDictionary(g => g.Key, g => g.ToList());Di2015NewLine        for (int i = 0; i < roots.Count; i++)Di2015NewLine            AddChildren(roots[i], dict);Di2015NewLine    }Di2015NewLineDi2015NewLine    return roots;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void AddChildren(node node, IDictionary<string, List<node>> source)Di2015NewLine{Di2015NewLine    if (source.ContainsKey(node.key))Di2015NewLine    {Di2015NewLine        node.Children = source[node.key];Di2015NewLine        for (int i = 0; i < node.Children.Count; i++)Di2015NewLine            AddChildren(node.Children[i], source);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        node.Children = new List<node>();Di2015NewLine    }Di2015NewLine} }Di2015NewLine
18317285Di2015UniqueSeparatorCtrl+\\
18317285Di2015UniqueSeparatorCtrl 1
18317285Di2015UniqueSeparatorCtrl+\\
18317285Di2015UniqueSeparatorCtrl 2
18317285Di2015UniqueSeparatorCtrl+\\
18317285Di2015UniqueSeparatorCtrl 3
18317285Di2015UniqueSeparatorCtrl+\\
18317285Di2015UniqueSeparatorCtrl 4
18317315Di2015UniqueSeparatorPropertyChangedCallback
18317315Di2015UniqueSeparatorMouseOverImage
18317315Di2015UniqueSeparatorControl
18317315Di2015UniqueSeparator<Style TargetType="local:MouseOverImage">Di2015NewLine    <Setter Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate TargetType="local:MouseOverImage">Di2015NewLine                <Grid>Di2015NewLine                    <Image Name="SourceImage" Source="{TemplateBinding Source}" />Di2015NewLine                    <Image Name="Source2Image" Source="{TemplateBinding Source2}" Visibility="Hidden" />Di2015NewLine                </Grid>Di2015NewLine                <ControlTemplate.Triggers>Di2015NewLine                    <Trigger Property="IsMouseOver" Value="True">Di2015NewLine                        <Setter TargetName="SourceImage" Property="Visibility" Value="Hidden" />Di2015NewLine                        <Setter TargetName="Source2Image" Property="Visibility" Value="Visible" />Di2015NewLine                    </Trigger>Di2015NewLine                </ControlTemplate.Triggers>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
18317315Di2015UniqueSeparatorMouseLeave
18317315Di2015UniqueSeparatorSource
18317315Di2015UniqueSeparatorSource2
18317315Di2015UniqueSeparatorHitTestCore
18317315Di2015UniqueSeparatorActualWidth
18317315Di2015UniqueSeparatorsource.PixelWidth
18317315Di2015UniqueSeparatorvar x = (int)hitTestParameters.HitPoint.X;Di2015NewLinevar y = (int)hitTestParameters.HitPoint.Y; Di2015NewLine
18317344Di2015UniqueSeparatorAttachThreadInput
18317380Di2015UniqueSeparator    [Fact]Di2015NewLine    public void SOQuestion18302092()Di2015NewLine    {Di2015NewLine        var link = new Link();Di2015NewLine        link.Target = new Uri("http://www.myBase.com/get{?a,b}");Di2015NewLineDi2015NewLine        link.SetParameter("a","1");Di2015NewLine        link.SetParameter("b", "c");Di2015NewLineDi2015NewLine        var request = link.CreateRequest();Di2015NewLine        Assert.Equal("http://www.myBase.com/get?a=1&b=c", request.RequestUri.OriginalString);Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
18317481Di2015UniqueSeparatorstring hashedString = GetCrypt(inputString);Di2015NewLine
18317481Di2015UniqueSeparatorhashedString
18317481Di2015UniqueSeparatoralg.ComputeHash()
18317481Di2015UniqueSeparatorEncoding.UTF8.GetString()
18317481Di2015UniqueSeparatorConvert.ToBase64String()
18317941Di2015UniqueSeparatorSystem.Diagnostics.Process process = new System.Diagnostics.Process();Di2015NewLineSystem.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();Di2015NewLinestartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;Di2015NewLinestartInfo.FileName = "bash.exe";Di2015NewLinestartInfo.Arguments = "-l -c 'ls -l /your/msys/path'";Di2015NewLine# Or other examples with windows path:Di2015NewLine#   startInfo.Arguments = "-l -c 'ls -l /c/your/path'";Di2015NewLine#   startInfo.Arguments = "-l -c 'ls -l C:/your/path'";Di2015NewLine#   startInfo.Arguments = "-l -c 'ls -l C:\\\\your\\\\path'";Di2015NewLineprocess.StartInfo = startInfo;Di2015NewLineprocess.Start();Di2015NewLine
18317960Di2015UniqueSeparatorControl Panel >> Programs >> Default ProgramsDi2015NewLine
18317960Di2015UniqueSeparatorStart >> Run >> Default ProgramsDi2015NewLine
18318007Di2015UniqueSeparatorvbcrlf
18318007Di2015UniqueSeparator"\\r\\n"
18318007Di2015UniqueSeparatorSystem.Environment.NewLine
18318007Di2015UniqueSeparator"\\r\\n"
18318007Di2015UniqueSeparator"\\n"
18318007Di2015UniqueSeparatorvbcrlf
18318031Di2015UniqueSeparatorvar results = this.Controls.OfType<TextBox>().Where(c =>Di2015NewLine    Convert.ToString(c.Attributes["class"]).Contains("required"));Di2015NewLine
18318031Di2015UniqueSeparatorforeach (var tb in results)Di2015NewLine{Di2015NewLine    if (string.IsNullOrEmpty(tb.Text))Di2015NewLine    {Di2015NewLine        // do something here because this TextBox is emptyDi2015NewLine    }Di2015NewLine}Di2015NewLine
18318031Di2015UniqueSeparatorRequiredFieldValidator
18318031Di2015UniqueSeparatorthis.Validate()
18318031Di2015UniqueSeparatorPage
18318031Di2015UniqueSeparatorthis.IsValid
18318031Di2015UniqueSeparatorPage
18318074Di2015UniqueSeparatorprivate void FillComboFromColumnIndex(int columnIndex){Di2015NewLine  yourDataTable.AsEnumerable()Di2015NewLine               .Select(r=>r[columnIndex])Di2015NewLine               .Where(x=>x != null)Di2015NewLine               .Distinct().ToList()Di2015NewLine               .ForEach(x=>yourComboBox.Items.Add(x));Di2015NewLine}Di2015NewLine//To add all the items in column at index 1, do thisDi2015NewLineFillComboFromColumnIndex(1);Di2015NewLine
18318221Di2015UniqueSeparator      name = recognizer.Recognize(result);Di2015NewLine       //CHECK IF name IS EMPTY, IF EMPTY STOP!Di2015NewLineDi2015NewLine        //Draw the label for each face detected and recognizedDi2015NewLine        currentFrame.Draw(name, ref font, new Point(f.rect.X - 2, f.rect.Y - 2), new Bgr(Color.LightGreen));Di2015NewLine
18318420Di2015UniqueSeparatorprivate bool _preventMove = false;Di2015NewLineDi2015NewLineprotected override void WndProc(ref Message message)Di2015NewLine{Di2015NewLine    const int WM_SYSCOMMAND = 0Ã0112;Di2015NewLine    const int SC_MOVE = 0xF010;Di2015NewLineDi2015NewLine    if(_preventMove) Di2015NewLine    {Di2015NewLine        switch(message.Msg)Di2015NewLine        {Di2015NewLine            case WM_SYSCOMMAND:Di2015NewLine               int command = message.WParam.ToInt32() & 0xfff0;Di2015NewLine               if (command == SC_MOVE)Di2015NewLine                  return;Di2015NewLine               break;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    base.WndProc(ref message);Di2015NewLine}Di2015NewLine
18318496Di2015UniqueSeparatorobject.function
18318496Di2015UniqueSeparatorobject.function
18318496Di2015UniqueSeparatorobject.function
18318496Di2015UniqueSeparator[SqlTrigger(Name="UserNameAudit", Target="Users", Event="FOR INSERT")]
18318496Di2015UniqueSeparatorobject.method
18318522Di2015UniqueSeparatorXmlElement gamePrefs_playerName = xmlDoc.CreateElement("playerName");Di2015NewLinegamePrefs_playerName.InnerText = gamePrefs_playerName.ToString();Di2015NewLine
18318522Di2015UniqueSeparatorXmlElement
18318522Di2015UniqueSeparator.ToString()
18318522Di2015UniqueSeparatorInnerText
18318522Di2015UniqueSeparatorplayerName
18318522Di2015UniqueSeparatorXmlElement
18318522Di2015UniqueSeparatorXmlElement gamePrefs_companyName = xmlDoc.CreateElement("companyName");Di2015NewLinegamePrefs_companyName.InnerText = companyName; Di2015NewLineDi2015NewLineXmlElement gamePrefs_playerName = xmlDoc.CreateElement("playerName");Di2015NewLinegamePrefs_playerName.InnerText = playerName;Di2015NewLine
18318522Di2015UniqueSeparatorToString();
18318522Di2015UniqueSeparatorplayerName/companyName
18318522Di2015UniqueSeparatorLoadGamePrefs()
18318709Di2015UniqueSeparatorGetZZ()
18318709Di2015UniqueSeparatorHttpRequest
18318709Di2015UniqueSeparatorvar httpRequest = new Mock<HttpRequestBase>();Di2015NewLinevar stream = new MemoryStream(Encoding.Default.GetBytes("Hello world"));Di2015NewLinehttpRequest.Setup(r => r.InputStream).Returns(stream);Di2015NewLineDi2015NewLinevar httpContext = new Mock<HttpContextBase>();Di2015NewLinehttpContext.Setup(c => c.Request).Returns(httpRequest.Object);Di2015NewLineDi2015NewLinevar controller = new HomeController();Di2015NewLinevar routeData = new RouteData();Di2015NewLinecontroller.ControllerContext = // set mocked contextDi2015NewLine     new ControllerContext(httpContext.Object, routeData, controller);Di2015NewLineDi2015NewLinevar result = (JsonResult)controller.GetZZ();Di2015NewLineAssert.That(result.Data, Is.EqualTo(42)); // your assertions hereDi2015NewLine
18318709Di2015UniqueSeparatorpublic interface IFooDi2015NewLine{Di2015NewLine    string Bar();Di2015NewLine}Di2015NewLine
18318709Di2015UniqueSeparatorpublic class Foo : IFooDi2015NewLine{Di2015NewLine   public string Bar()Di2015NewLine   {Di2015NewLine      using (var str = new StreamReader(HttpContext.Current.Request.InputStream))Di2015NewLine      {Di2015NewLine          string inputData = str.ReadToEnd();Di2015NewLine          return inputData;Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
18318709Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    private readonly IFoo _foo;Di2015NewLineDi2015NewLine    public HomeController(IFoo foo) // inject dependencyDi2015NewLine    {Di2015NewLine        _foo = foo;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult GetZZ()Di2015NewLine    {Di2015NewLine        ApplyResponseHeaders();Di2015NewLine        var result = new JsonResult();            Di2015NewLine        MyFunction(_foo.Bar(), result); // use dependencyDi2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18318709Di2015UniqueSeparatorvar foo = new Mock<IFoo>();Di2015NewLinefoo.Setup(f => f.Bar()).Returns("Hello, TDD");Di2015NewLinevar controller = new HomeController(foo.Object);Di2015NewLinevar result = (JsonResult)controller.GetZZ();Di2015NewLineAssert.That(result.Data, Is.EqualTo(42));Di2015NewLine
18318759Di2015UniqueSeparatorMyClass Di2015NewLine{ Di2015NewLine    Rectangle _rect;Di2015NewLine    public Rectangle rect { get { return _rect; } set { _rect = value; } }Di2015NewLineDi2015NewLine    public void AddWidth(int width)Di2015NewLine    {Di2015NewLine        rect = new Rectangle(rect.X, rect.Y, rect.Width + width, rect.Height);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18318775Di2015UniqueSeparatorMouseRightButtonDown
18318775Di2015UniqueSeparatorListBoxItem
18318775Di2015UniqueSeparatorSelectedItem
18318775Di2015UniqueSeparatorMouseRightButtonDown
18318775Di2015UniqueSeparator<ListBox x:Name="listBox1"Di2015NewLine         ItemsSource="{Binding}"Di2015NewLine         ItemTemplateSelector="{StaticResource templateSelector}"Di2015NewLine         Margin="0,131,0,59"Di2015NewLine         SelectionMode="Single" Di2015NewLine         PreviewMouseRightButtonDown="listBox1_MouseRightClick" />Di2015NewLine
18318775Di2015UniqueSeparatorlistBox1.MouseDown += new MouseButtonEventHandler(listBox1_MouseRightClick);Di2015NewLine
18318775Di2015UniqueSeparatorsender
18318775Di2015UniqueSeparatorsender
18318775Di2015UniqueSeparatorListBox
18318775Di2015UniqueSeparatorprivate void listBox1_MouseRightClick(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine      Harvest_TimeSheetEntry entryToDelete = (Harvest_TimeSheetEntry)listBox1.SelectedItem;Di2015NewLine      if(entryToDelete != null)Di2015NewLine      {Di2015NewLine          //Do workDi2015NewLine      }Di2015NewLine}Di2015NewLine
18318918Di2015UniqueSeparator        Excel.Application xlApp;Di2015NewLine        Excel.Workbook xlWorkBook;Di2015NewLine        Excel.Worksheet xlWorkSheet;Di2015NewLine        object misValue = System.Reflection.Missing.Value;Di2015NewLineDi2015NewLine        xlApp = new Excel.Application();Di2015NewLine        xlWorkBook = xlApp.Workbooks.Add(misValue);Di2015NewLine        xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);Di2015NewLine        double t2 = 20;Di2015NewLine        int t1 = 10;Di2015NewLine        int i, j;Di2015NewLine        double []s= new double[10];Di2015NewLineDi2015NewLineDi2015NewLine for (i = 0; i <= t1; i++)Di2015NewLine {Di2015NewLine for (j = 0; j <= t2; j++)Di2015NewLine {Di2015NewLineDi2015NewLine      xlWorkSheet.Cells[(i+1), (j+1)] = s[(j / 2)];Di2015NewLineDi2015NewLine     Excel.Range chartRange;Di2015NewLineDi2015NewLine     Excel.ChartObjects xlCharts = (Excel.ChartObjects)xlWorkSheet.ChartObjects(Type.Missing);Di2015NewLine     Excel.ChartObject myChart = (Excel.ChartObject)xlCharts.Add(100, 80, 300, 250);Di2015NewLineDi2015NewLine     Excel.Chart chartPage = myChart.Chart;Di2015NewLineDi2015NewLine     chartRange = xlWorkSheet.get_Range("A1", "Z10");Di2015NewLineDi2015NewLine     j += 1;Di2015NewLine     chartPage.SetSourceData(chartRange, misValue);Di2015NewLineDi2015NewLine     chartPage.ChartType = Excel.XlChartType.xlXYScatterSmooth;Di2015NewLineDi2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine    xlWorkBook.SaveAs("link1.xls", Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue)Di2015NewLine
18318957Di2015UniqueSeparatorfunction () { ... }Di2015NewLine
18318957Di2015UniqueSeparatorfunction () {{ ... }}Di2015NewLine
18318957Di2015UniqueSeparatorprivate const string GoogleAnalyticsFormat = @"<script type=""text/javascript"">Di2015NewLine    var _gaq = _gaq || [];Di2015NewLine    _gaq.push(['_setAccount', '{0}']);Di2015NewLine    _gaq.push(['_trackPageview']);Di2015NewLine    (function () {{Di2015NewLine        var ga = document.createElement('script');Di2015NewLine        ga.type = 'text/javascript';Di2015NewLine        ga.async = true;Di2015NewLine        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';Di2015NewLine        var s = document.getElementsByTagName('script')[0];Di2015NewLine        s.parentNode.insertBefore(ga, s);Di2015NewLine    }})();Di2015NewLine    </script>";Di2015NewLine
18318959Di2015UniqueSeparatorEventHandler<T>
18318959Di2015UniqueSeparatorEventArgs
18318959Di2015UniqueSeparatorpublic class MySaveCompleteEventArgs : EventArgsDi2015NewLine{Di2015NewLine    public MySaveCompleteEventArgs(int id)Di2015NewLine    {Di2015NewLine       ID = id;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int ID { get; private set; }Di2015NewLine}Di2015NewLine
18318959Di2015UniqueSeparatorEventHandler<T>
18318959Di2015UniqueSeparatorpublic event EventHandler<MySaveCompleteEventArgs> MySaveComplete;Di2015NewLine
18318959Di2015UniqueSeparatorprotected void OnMySaveComplete(int id)Di2015NewLine{Di2015NewLine    if (MySaveComplete == null)Di2015NewLine        return;Di2015NewLineDi2015NewLine    MySaveComplete(this, new MySaveCompleteEventArgs(id));Di2015NewLine}Di2015NewLine
18318959Di2015UniqueSeparatorAction<int>
18318971Di2015UniqueSeparatorStopWatch
18318971Di2015UniqueSeparatorSystem.Windows.Forms.Timer
18318971Di2015UniqueSeparatorSystem.Timers.Timer
18318971Di2015UniqueSeparatorSynchronizationObject
18318971Di2015UniqueSeparatorSystem.Threading.Timer
18319048Di2015UniqueSeparatorWHERE VisitRefNo=VisitRefNo";
18319048Di2015UniqueSeparatorWHERE VisitRefNo=@VisitRefNo";
18319133Di2015UniqueSeparatorpublic ActionResult Index(string xml)Di2015NewLine{Di2015NewLine    // parse xml into some custom model classDi2015NewLine    XmlParserModel model = ParseXml(xml);Di2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
18319133Di2015UniqueSeparatorXmlParseModel
18319133Di2015UniqueSeparatorindex.cshtml
18319133Di2015UniqueSeparatorhome
18319135Di2015UniqueSeparatorbyte[] foo = { 0x32, 0x00, 0x1E, 0x00 };Di2015NewLine
18319135Di2015UniqueSeparatorbyte[] foo = new byte[4];Di2015NewLinefoo[0] = 0x32;Di2015NewLinefoo[1] = 0x00;Di2015NewLinefoo[2] = 0x1E;Di2015NewLinefoo[3] = 0x00;Di2015NewLine
18319135Di2015UniqueSeparatorpublic byte[] SetSpeed;Di2015NewLineprivate void trackBar1_Scroll(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (trackBar1.Value == 0)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            stop = true;Di2015NewLine            UpdateSThread.Abort();Di2015NewLine            Thread.Sleep(350);Di2015NewLine        }Di2015NewLine        catch { }Di2015NewLineDi2015NewLine        //note it will always create a new arrayDi2015NewLine        SetSpeed = new byte[]{0x00,0x00,0x00,0x00}; Di2015NewLine        WriteMem(GetPlayer() + STATUS_OFFSET, SetSpeed);Di2015NewLine        label1.Text = "Normal";              Di2015NewLine    }Di2015NewLine}Di2015NewLine
18319241Di2015UniqueSeparatorforeach (XElement step in document.Descendants("Step"))Di2015NewLine{Di2015NewLine    // Start looping through that step's checksDi2015NewLine    foreach (XElement substep in step.Elements())Di2015NewLine    {Di2015NewLine        Console.WriteLine(step.Attribute("Name").Value + "" Di2015NewLine                        + substep.Attribute("Name").Value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18319241Di2015UniqueSeparatorA1Di2015NewLineA2Di2015NewLineB3Di2015NewLine
18319245Di2015UniqueSeparatorprivate Visibility isVisible {get; set;}Di2015NewLine
18319245Di2015UniqueSeparatorprivate Visibility isVisible;Di2015NewLine
18319245Di2015UniqueSeparatorIsVisible
18319262Di2015UniqueSeparator/clr
18319262Di2015UniqueSeparatorclr
18319262Di2015UniqueSeparator/clr
18319262Di2015UniqueSeparator/clr
18319262Di2015UniqueSeparatorAdd -> New Project -> OtherDi2015NewLinelanguages -> VC++ -> CLR empty project
18319262Di2015UniqueSeparatorProperties -> Configuration Properties ->Di2015NewLineC/C++ -> Code Generation -> Runtime Library to Multi threaded DLL: Di2015NewLine/MD[d]
18319262Di2015UniqueSeparatorProperties -> Configuration Properties -> C/C++ ->Di2015NewLineGeneral -> Additional Include Directories
18319262Di2015UniqueSeparatorProperties -> Common Properties ->Di2015NewLineFramework and Reference -> Add New Reference
18319262Di2015UniqueSeparatorProperties -> Common Properties ->Di2015NewLineFramework and References -> Add New Reference -> <Select the C# orDi2015NewLinewhatever external DLL you would want to call from P2>
18319262Di2015UniqueSeparatorDLL
18319262Di2015UniqueSeparatorPropertiesDi2015NewLine-> Configuration Properties -> General -> Project Defaults -> Configuration Type -> Dynamic Library (DLL)
18319262Di2015UniqueSeparatorOutput Directory
18319262Di2015UniqueSeparatorIntermediate Directory
18319262Di2015UniqueSeparatorProperties -> Configuration Properties ->Di2015NewLineLinker -> General -> Ignore Import Library -> No
18319262Di2015UniqueSeparator__declspec(dllexport)
18319262Di2015UniqueSeparator__declspec(dllimport)
18319262Di2015UniqueSeparator/clr
18319431Di2015UniqueSeparatorReadOnlyDictionary
18319431Di2015UniqueSeparatorIReadOnlyDictionary
18319431Di2015UniqueSeparatortarget = new ReadOnlyDictionary<string, IReadOnlyDictionary<Guid, int>>(Di2015NewLine    data.ToDictionary(Di2015NewLine            i => i.Item,Di2015NewLine            v => (IReadOnlyDictionary<Guid, int>)new ReadOnlyDictionary<Guid, int>(Di2015NewLine                v.Values.ToDictionary(Di2015NewLine                    a => Guid.NewGuid(),Di2015NewLine                    b => b))));Di2015NewLine
18319431Di2015UniqueSeparatorToDictionary
18319431Di2015UniqueSeparatortarget = new ReadOnlyDictionary<string, IReadOnlyDictionary<Guid, int>>(Di2015NewLine    data.ToDictionary<string, IReadOnlyDictionary<Guid, int>>(Di2015NewLine            i => i.Item,Di2015NewLine            v => new ReadOnlyDictionary<Guid, int>(Di2015NewLine                v.Values.ToDictionary(Di2015NewLine                    a => Guid.NewGuid(),Di2015NewLine                    b => b))));Di2015NewLine
18319457Di2015UniqueSeparatorconfiguration.SetListener(ListenerType.FlushEntity, this);Di2015NewLine
18319457Di2015UniqueSeparator    // WRONG!Di2015NewLine    public void OnFlushEntity(FlushEntityEvent @event)Di2015NewLine    {Di2015NewLine    }Di2015NewLine
18319627Di2015UniqueSeparatorToList()
18319627Di2015UniqueSeparatorpublic List<Item> SearchItems(string itemid, string description)Di2015NewLine{Di2015NewLine    IQueryable<Item> query = _dbc.Items.Where(x => SqlMethods.Like(x.Number, itemid));Di2015NewLineDi2015NewLine    foreach(var word in description.Split(new char[] { '%' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine    {Di2015NewLine        query = query.Where(x => SqlMethods.Like(x.Description,Di2015NewLine                                                 string.format("%{0}%", word)));Di2015NewLine    }Di2015NewLineDi2015NewLine    return query.ToList();Di2015NewLine}Di2015NewLine
18319688Di2015UniqueSeparator(<.+?\\/>)(?=\\1)
18319857Di2015UniqueSeparatorWebUtility.HtmlDecode()
18319888Di2015UniqueSeparatorEverything up-to-date
18319888Di2015UniqueSeparatorgithub push -u origin master
18319888Di2015UniqueSeparatorgit add . # Add everything in the current directory (".")Di2015NewLinegit commitDi2015NewLinegit push origin master # Now you can push.Di2015NewLine
18319888Di2015UniqueSeparatorcd <your-visual-studio-project-folder>Di2015NewLinegit initDi2015NewLinegit add . # Add everything in the current directory (".")Di2015NewLinegit commitDi2015NewLineDi2015NewLinegit add remote origin <url-for-your-remote>Di2015NewLinegit fetch originDi2015NewLineDi2015NewLine# Rebase your local root commit onto the remote root commitDi2015NewLinegit rebase --onto origin/master --rootDi2015NewLineDi2015NewLine# Now you can push to your remoteDi2015NewLinegit push origin masterDi2015NewLine
18320253Di2015UniqueSeparator        Console.WriteLine("\\nStreamed Content: \\n");Di2015NewLine        int count = 0;Di2015NewLineDi2015NewLine        (from strm in twitterCtx.UserStreamDi2015NewLine         where strm.Type == UserStreamType.Site &&Di2015NewLine               strm.Follow == "15411837,16761255"Di2015NewLine         select strm)Di2015NewLine        .StreamingCallback(strm =>Di2015NewLine        {Di2015NewLine            Console.WriteLine(strm.Content + "\\n");Di2015NewLineDi2015NewLine            if (count++ >= 10)Di2015NewLine            {Di2015NewLine                strm.CloseStream();Di2015NewLine            }Di2015NewLine        })Di2015NewLine        .SingleOrDefault();Di2015NewLine
18320414Di2015UniqueSeparatorstring
18320414Di2015UniqueSeparatorstring test = "foo";Di2015NewLinevar result = StaticClass.WordCount(test);Di2015NewLine
18320414Di2015UniqueSeparatorstring test = "foo";Di2015NewLinevar result = test.WordCount();Di2015NewLine
18320425Di2015UniqueSeparatorupdatepanel
18320425Di2015UniqueSeparatorUploadFile
18320425Di2015UniqueSeparatorUploadFile
18320425Di2015UniqueSeparatorUploadFile
18320425Di2015UniqueSeparatorinput:file
18320425Di2015UniqueSeparatortriggers
18320425Di2015UniqueSeparatorUploadFile
18320425Di2015UniqueSeparatorPage_Load
18320425Di2015UniqueSeparatorRequest.Files
18320443Di2015UniqueSeparatorColor
18320443Di2015UniqueSeparatorPaint
18320443Di2015UniqueSeparator public static Paint AsPaint(this Color color)Di2015NewLine {Di2015NewLine    Paint paint = new Paint ();Di2015NewLine    paint.Color = color;Di2015NewLine    return paint;          Di2015NewLine }Di2015NewLine
18320443Di2015UniqueSeparatorcanvas.DrawRect(..., Color.Red.AsPaint());Di2015NewLine
18320443Di2015UniqueSeparatorPaint
18320443Di2015UniqueSeparatorColors.Red
18320443Di2015UniqueSeparatorColor
18320443Di2015UniqueSeparatorPaint
18320443Di2015UniqueSeparatorColors
18320443Di2015UniqueSeparatorColor
18320465Di2015UniqueSeparatorpublic class InvalidCompanyKeyException : ArgumentException {Di2015NewLine   public InvalidCompanyKeyException() : base() {}Di2015NewLine   public InvalidCompanyKeyException(string message) : base(message) {}Di2015NewLine   public InvalidCompanyKeyException(string message, Exception inner) : base(message, inner) {}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PriceAgreementIdNotFoundException : ArgumentException {Di2015NewLine   public PriceAgreementIdNotFoundException() : base() {}Di2015NewLine   public PriceAgreementIdNotFoundException(string message) : base(message) {}Di2015NewLine   public PriceAgreementIdNotFoundException(string message, Exception inner) : base(message, inner) {}Di2015NewLine}Di2015NewLine
18320465Di2015UniqueSeparatorArgumentException
18320600Di2015UniqueSeparatorHtml.Raw
18320600Di2015UniqueSeparatori
18320600Di2015UniqueSeparatori
18320600Di2015UniqueSeparatorfor (int i = 0; i < Model.First().Data.Count; i++)Di2015NewLine{Di2015NewLine    int local = i;Di2015NewLine    cols.Add(grid.Column(Model.First().Data[i].Name, Model.First().Data[i].Label, Di2015NewLine        format: item => Html.Raw("<text>" + item.Data[local].Value + "</text>")Di2015NewLine    ));Di2015NewLine}Di2015NewLine
18320600Di2015UniqueSeparatorformat: item => @item.Data[local].ValueDi2015NewLine
18320650Di2015UniqueSeparatorEntry
18320650Di2015UniqueSeparatorTextView
18320650Di2015UniqueSeparatorBuffer
18320650Di2015UniqueSeparatorTextBuffer.Text
18320650Di2015UniqueSeparatorTextView
18320650Di2015UniqueSeparatorTextView
18320695Di2015UniqueSeparatorpublic class UserViewModelDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLineDi2015NewLine    [Required]Di2015NewLine    public string Email { get; set; }Di2015NewLineDi2015NewLine    [Required]Di2015NewLine    public string Password { get; set; }Di2015NewLine}Di2015NewLine
18320710Di2015UniqueSeparatorbin\\Debug
18320710Di2015UniqueSeparatorbin\\Release
18320774Di2015UniqueSeparatorInt32 number = default(Int32); // returns 0Di2015NewLineObject myObject = default(Object); // returns nullDi2015NewLinebool flag = default(bool);  // return falseDi2015NewLine
18320781Di2015UniqueSeparatornewESS
18320781Di2015UniqueSeparatorif
18320924Di2015UniqueSeparatorSettings.settings
18320924Di2015UniqueSeparatorSettings.Designer.cs
18320924Di2015UniqueSeparatorSettings
18320924Di2015UniqueSeparatorAssembly asm = Assembly.LoadFrom("MyDll.dll");Di2015NewLineType[] allTypes = asm.GetTypes();Di2015NewLineforeach (Type type in allTypes)Di2015NewLine{Di2015NewLine    // Only scan objects that are not abstract and implements the interfaceDi2015NewLine    if (!type.IsAbstract && typeof(IMyInterface).IsAssignableFrom(type));Di2015NewLine    {Di2015NewLine        // Create a instance of that class...Di2015NewLine        var inst = (IMyInterface)Activator.CreateInstance(type);Di2015NewLineDi2015NewLine        //do your work here, may be called more than once if more than one class implements IMyInterfaceDi2015NewLine    }Di2015NewLine}Di2015NewLine
18320962Di2015UniqueSeparatorStreamWriter
18320962Di2015UniqueSeparatorMemoryStream
18320962Di2015UniqueSeparatorMemoryStream
18320962Di2015UniqueSeparatorBufferedStream
18320962Di2015UniqueSeparatorusing (var fs = new FileStream(...))Di2015NewLine{Di2015NewLine    using (var buff = new CustomBufferedStream(fs))Di2015NewLine    {Di2015NewLine        using (var writer = new StreamWriter(buff, encoding))Di2015NewLine        {Di2015NewLine            ... do your output hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18320962Di2015UniqueSeparatorStreamWriter
18320962Di2015UniqueSeparatorFlush
18320962Di2015UniqueSeparatorStreamWriter.Flush
18320962Di2015UniqueSeparatorBaseStream.Flush
18320990Di2015UniqueSeparatorStyle
18320990Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <Style TargetType="{x:Type TreeViewItem}">Di2015NewLine        <Style.Resources>Di2015NewLine            <!-- Set Highlight Background color -->Di2015NewLine            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Black" />Di2015NewLine        </Style.Resources>Di2015NewLineDi2015NewLine        <Style.Triggers>Di2015NewLine            <Trigger Property="IsSelected" Value="True">Di2015NewLine                <!-- Set Foreground color -->Di2015NewLine                <Setter Property="Foreground" Value="White" />Di2015NewLine            </Trigger>Di2015NewLine        </Style.Triggers>Di2015NewLine    </Style>Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine<Grid>Di2015NewLine    <TreeView>Di2015NewLine        <TreeViewItem Header="Root">Di2015NewLine            <TreeViewItem Header="Child1" />Di2015NewLine            <TreeViewItem Header="Child2" />Di2015NewLine            <TreeViewItem Header="Child3" />Di2015NewLine            <TreeViewItem Header="Child4" />Di2015NewLine        </TreeViewItem>Di2015NewLine    </TreeView>Di2015NewLine</Grid>Di2015NewLine
18320990Di2015UniqueSeparatorEDIT
18320990Di2015UniqueSeparatorpublic TreeViewItem newItem = new TreeViewItem() //Child NodeDi2015NewLine{Di2015NewLine    Header = new StackPanel Di2015NewLine    {Di2015NewLine        Orientation = Orientation.Horizontal,Di2015NewLineDi2015NewLine        Children =Di2015NewLine        {Di2015NewLine            new Border Di2015NewLine            {Di2015NewLine                Width = 12,Di2015NewLine                Height = 14,Di2015NewLineDi2015NewLine                Background = Brushes.Blue,Di2015NewLine                BorderThickness = new Thickness(1.0),Di2015NewLine                BorderBrush = Brushes.BlackDi2015NewLine            },Di2015NewLineDi2015NewLine            new Label Di2015NewLine            {Di2015NewLine                Content = "Node1",Di2015NewLine                Foreground = Brushes.Black,Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine};Di2015NewLineDi2015NewLineprivate void AddItem_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    // Set Selected handler on Selected eventDi2015NewLine    newItem.Selected += new RoutedEventHandler(newItem_Selected);Di2015NewLineDi2015NewLine    // Set Unselected handler on Unselected eventDi2015NewLine    newItem.Unselected += new RoutedEventHandler(newItem_Unselected);Di2015NewLineDi2015NewLine    // Add your itemDi2015NewLine    MyTreeView.Items.Add(newItem);Di2015NewLine}Di2015NewLineDi2015NewLine// Set the black color for foregroundDi2015NewLineprivate void newItem_Unselected(object sender, RoutedEventArgs e) Di2015NewLine{Di2015NewLine    TreeViewItem MyTreeViewItem = sender as TreeViewItem;Di2015NewLine    StackPanel MyStackPanel = MyTreeViewItem.Header as StackPanel;Di2015NewLine    Label MyLabel = MyStackPanel.Children[1] as Label;Di2015NewLineDi2015NewLine    MyLabel.Foreground = Brushes.Black;Di2015NewLine}Di2015NewLineDi2015NewLine// Set the white color for foregroundDi2015NewLineprivate void newItem_Selected(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    TreeViewItem MyTreeViewItem = sender as TreeViewItem;Di2015NewLine    StackPanel MyStackPanel = MyTreeViewItem.Header as StackPanel;Di2015NewLine    Label MyLabel = MyStackPanel.Children[1] as Label;Di2015NewLineDi2015NewLine    MyLabel.Foreground = Brushes.White;         Di2015NewLine}Di2015NewLine
18320990Di2015UniqueSeparatorNote:
18320990Di2015UniqueSeparatorTreeViewItem
18321093Di2015UniqueSeparatorinternal void GetYourData()Di2015NewLine{Di2015NewLine    //... code to get the relevant Workbook and relevant/new Excel ApplicationDi2015NewLineDi2015NewLine    Tuple<string, string> pupil;Di2015NewLine    string searchTerm = "ABC";Di2015NewLineDi2015NewLine    //Get the cell of the matchDi2015NewLine    Range match = FindFirstOccurrenceInWorkbook(workbook, searchTerm);Di2015NewLine    if (match != null)Di2015NewLine    {Di2015NewLine        //Do whatever - per your data structure, it is probably easiest to just use .Offset(row, column) propertyDi2015NewLine        pupil = new Tuple<string, string>((string)match.Offset(0, -1).Value, (string)match.Offset(0, 1).Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    //... code to do whatever with your resultsDi2015NewLine}Di2015NewLineDi2015NewLineinternal static Range FindFirstOccurrenceInWorkbook(Workbook workbook, string searchTerm)Di2015NewLine{Di2015NewLine    if (workbook == null) throw new ArgumentNullException("workbook");Di2015NewLine    if (searchTerm == null) throw new ArgumentNullException("searchTerm");Di2015NewLineDi2015NewLine    Sheets wss = workbook.Worksheets;Di2015NewLine    Range match = null;Di2015NewLineDi2015NewLine    foreach (Worksheet ws in wss)Di2015NewLine    {Di2015NewLine        Range cells = ws.Cells;Di2015NewLine        //Add more args as needed - this is just an exampleDi2015NewLine        match = cells.Find(Di2015NewLine                what: searchTerm,Di2015NewLine                after: Type.Missing,Di2015NewLine                lookIn: XlFindLookIn.xlFormulas,Di2015NewLine                lookAt: XlLookAt.xlPart);Di2015NewLine        System.Runtime.InteropServices.Marshal.ReleaseComObject(cells);Di2015NewLine        System.Runtime.InteropServices.Marshal.ReleaseComObject(ws);Di2015NewLine        if (match != null)Di2015NewLine        {Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    System.Runtime.InteropServices.Marshal.ReleaseComObject(wss);Di2015NewLine    GC.Collect();Di2015NewLine    GC.WaitForPendingFinalizers();Di2015NewLine    GC.Collect();Di2015NewLineDi2015NewLine    return match;Di2015NewLine}Di2015NewLine
18321266Di2015UniqueSeparatorMakeGenericMethod
18321266Di2015UniqueSeparatordynamic
18321266Di2015UniqueSeparatorMakeGenericMethod
18321266Di2015UniqueSeparatorWhere
18321266Di2015UniqueSeparatorIQueryable<Foo> source = new[] { new Foo { Bar = 123 } }.AsQueryable();Di2015NewLineExpression<Func<Foo,bool>> typed =  x=>x.Bar == 123;Di2015NewLineDi2015NewLineLambdaExpression untyped = typed;Di2015NewLineIQueryable<Foo> filtered = Queryable.Where(source, (dynamic)untyped);Di2015NewLine
18321266Di2015UniqueSeparatorQueryable.*
18321266Di2015UniqueSeparatorOrderBy
18321266Di2015UniqueSeparatorvar parameter = Expression.Parameter(typeof(Foo));Di2015NewLinevar memberExpression = Expression.Property(parameter, "Bar");Di2015NewLinevar lambdaExpression = Expression.Lambda(memberExpression, parameter);Di2015NewLineLambdaExpression untyped = lambdaExpression;Di2015NewLineDi2015NewLineIQueryable<Foo> sorted = Queryable.OrderBy(source, (dynamic)untyped);Di2015NewLineDi2015NewLinevar all = sorted.ToArray();Di2015NewLine
18321266Di2015UniqueSeparatorvar parameter = Expression.Parameter(typeof(IRelationship));Di2015NewLinevar memberExpression = Expression.Property(Di2015NewLine    Expression.Convert(parameter, typeof(IContract)), data.SortColumn);Di2015NewLinevar orderBy = Expression.Lambda(memberExpression, parameter);Di2015NewLine
18321371Di2015UniqueSeparator[HttpPost]Di2015NewLine[ValidateInput(false)]Di2015NewLinepublic ActionResult Index()Di2015NewLine{Di2015NewLine    string xml = "";Di2015NewLine    if(Request.InputStream != null){Di2015NewLine        StreamReader stream = new StreamReader(Request.InputStream);Di2015NewLine        string x = stream.ReadToEnd();Di2015NewLine        xml = HttpUtility.UrlDecode(x);Di2015NewLine    }Di2015NewLine    ...Di2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
18321395Di2015UniqueSeparator    private void brewMethodSelectionChange(object sender, SelectionChangedEventArgs e)Di2015NewLine    {Di2015NewLine        var brewMethodList = sender as ListPicker;Di2015NewLine        if (brewMethodList.SelectedItem == manual_list)Di2015NewLine        {Di2015NewLine            brewMethod = MANUAL;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            brewMethod = AUTO_DRIP;Di2015NewLine        }Di2015NewLine        update();Di2015NewLine    }Di2015NewLine
18321450Di2015UniqueSeparator  function Validate_Click() {Di2015NewLineDi2015NewLine    //using asp.net checkbox so have to go this route to get boolDi2015NewLine    var checked = $('#<%= cbCertify.ClientID %>').is(':checked');Di2015NewLineDi2015NewLine    if (checked) {Di2015NewLine        $('.lblConfirmCertifyError').hide();Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    else {Di2015NewLine        $('.lblConfirmCertifyError').show();Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18321450Di2015UniqueSeparator<asp:Panel runat="server" ID="pnlConfirm" Style="display: none; background-color: White;Di2015NewLine        border: solid 1px Gray; width: 90%; height: 100%; padding: 10px">Di2015NewLine        popup text hereDi2015NewLine        <asp:CheckBox runat="server" ID="cbCertify" Text="I Certify" CssClass="cbCertify">Di2015NewLine        </asp:CheckBox>Di2015NewLine        <br />Di2015NewLine        <asp:Label runat="server" ID="lblConfirmCertifyError" Text="Required." ForeColor="Red"Di2015NewLine            Style="display: none" CssClass="lblConfirmCertifyError"></asp:Label>Di2015NewLine        <br />Di2015NewLine        <div style="text-align: center">Di2015NewLine            <asp:Button runat="server" ID="btnConfirmCertify" Text="OK" CssClass="btnConfirmCertify" OnClientClick="return Validate_Click()" />Di2015NewLine            <asp:Button runat="server" ID="btnCancel" Text="Cancel" />Di2015NewLine            <asp:Button runat="server" ID="btnDummy" Text="" Style="display: none" />Di2015NewLine        </div>Di2015NewLine    </asp:Panel>Di2015NewLine
18321496Di2015UniqueSeparatorvar formInfo = new FormInfo1();Di2015NewLineformInfo.Flags = 0;Di2015NewLineformInfo.pName = paperName;Di2015NewLine// all sizes in 1000ths of millimetersDi2015NewLineformInfo.Size.width = (int)(widthMm * 1000.0); Di2015NewLineformInfo.Size.height = (int)(heightMm * 1000.0);Di2015NewLineformInfo.ImageableArea.left = 0;Di2015NewLineformInfo.ImageableArea.right = formInfo.Size.width;Di2015NewLineformInfo.ImageableArea.top = 0;Di2015NewLineformInfo.ImageableArea.bottom = formInfo.Size.height;Di2015NewLineDi2015NewLine// Add the paper size to the printer's list of available paper sizes:Di2015NewLinebool bFormAdded = AddForm(hPrinter, 1, ref formInfo);Di2015NewLine
18321509Di2015UniqueSeparatorHide()
18321620Di2015UniqueSeparator[EnableClientAccess()]Di2015NewLine[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple)]Di2015NewLinepublic partial class SomeService : LinqToEntitiesDomainService<SomeEntities>Di2015NewLine{Di2015NewLine
18321620Di2015UniqueSeparatorConcurrencyMode.Single
18321620Di2015UniqueSeparatorlist
18321687Di2015UniqueSeparatorBitmapCacheOption.OnLoad
18321687Di2015UniqueSeparatorEndInit
18321687Di2015UniqueSeparatorif (!string.IsNullOrEmpty(myImgURL))Di2015NewLine{Di2015NewLine    var imgBitmap = new BitmapImage(new Uri(myImgURL));Di2015NewLine    myImgControl.Source = imgBitmap;Di2015NewLineDi2015NewLine    if (imgBitmap.IsDownloading)Di2015NewLine    {Di2015NewLine        // start download animation hereDi2015NewLineDi2015NewLine        imgBitmap.DownloadCompleted += (o, e) =>Di2015NewLine        {Di2015NewLine            // stop download animation hereDi2015NewLine        };Di2015NewLineDi2015NewLine        imgBitmap.DownloadFailed += (o, e) =>Di2015NewLine        {Di2015NewLine            // stop download animation hereDi2015NewLine        };Di2015NewLine    }Di2015NewLine
18321706Di2015UniqueSeparator Form1 form1 = new Form1();Di2015NewLine //Subscribe event hereDi2015NewLine form1.MdiParent = this;Di2015NewLine form1.Show();Di2015NewLine
18321706Di2015UniqueSeparatorISynchronizationInvoke's
18321706Di2015UniqueSeparatorInvoke
18321706Di2015UniqueSeparatorBeginInvoke
18321706Di2015UniqueSeparatorControl
18321706Di2015UniqueSeparatorRegisterWindowMessage
18321706Di2015UniqueSeparatorThreadMethodEntry
18321706Di2015UniqueSeparatorQueue
18321706Di2015UniqueSeparatorRegisterWindowMessage
18321706Di2015UniqueSeparatorPostMessage
18321706Di2015UniqueSeparatorWndProc
18321706Di2015UniqueSeparatormessageId
18321706Di2015UniqueSeparatorThreadMethodEntry
18321706Di2015UniqueSeparatorForm.Show
18321706Di2015UniqueSeparatorOnLoad
18321706Di2015UniqueSeparatorOnShown
18321706Di2015UniqueSeparatorBeginInvoke
18321706Di2015UniqueSeparatorif (base.IsHandleCreated)Di2015NewLine{Di2015NewLine    base.BeginInvoke(new MethodInvoker(this.CallShownEvent));//reflected codeDi2015NewLine}Di2015NewLine
18321706Di2015UniqueSeparatorWindowMessage
18321706Di2015UniqueSeparatorform1.MdiParent = this;
18321706Di2015UniqueSeparatorDestroy
18321706Di2015UniqueSeparatorReCreate
18321706Di2015UniqueSeparatorDestroyHandle
18321706Di2015UniqueSeparatorPeekMessage
18321706Di2015UniqueSeparatorQueue
18321706Di2015UniqueSeparatorObjectDisposedException
18321706Di2015UniqueSeparatorForm1 form1 = new Form1();Di2015NewLineform1.Show();Di2015NewLineAction del = () =>Di2015NewLine{Di2015NewLine    Console.WriteLine("This will never be called");//our custom delegates too fails to be invokedDi2015NewLine};Di2015NewLinevar res = form1.BeginInvoke(del);Di2015NewLine//after some more codeDi2015NewLineform1.EndInvoke(res);//throws `ObjectDisposedException` which was marked previouslyDi2015NewLineform1.MdiParent = this;Di2015NewLine
18321706Di2015UniqueSeparatorObjectDisposedException("Control")
18321706Di2015UniqueSeparatorApplication.DoEvents();
18321706Di2015UniqueSeparatorform1.MdiParent = this;
18321706Di2015UniqueSeparatorDoEvents
18321738Di2015UniqueSeparatormemory.Position
18321738Di2015UniqueSeparatorCount
18321738Di2015UniqueSeparatorclientSocket.BeginSend(...)
18321805Di2015UniqueSeparatorprivate void o(object sender, KeyEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.KeyCode == Keys.O)Di2015NewLine        {Di2015NewLine            openFileDialog1.ShowDialog();Di2015NewLine        }Di2015NewLineDi2015NewLine        else if (e.KeyCode == Keys.P)Di2015NewLine        {Di2015NewLine            player.Play();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18321806Di2015UniqueSeparatorITypeConverter
18321806Di2015UniqueSeparatorResources
18321806Di2015UniqueSeparatorMarkupExtension
18321806Di2015UniqueSeparatorpublic class ToCommand : MarkupExtension, IValueConverterDi2015NewLine{Di2015NewLine    public override object ProvideValue(IServiceProvider serviceProvider)Di2015NewLine    {Di2015NewLine        return this;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Convert(object value, Di2015NewLine                          Type targetType, Di2015NewLine                          object parameter, Di2015NewLine                          CultureInfo culture)Di2015NewLine    {Di2015NewLine        if (targetType != tyepof(ICommand))Di2015NewLine            return Binding.DoNothing;Di2015NewLineDi2015NewLine        return new DelegateCommand<object>(x => { });Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Di2015NewLine                              Type targetType, Di2015NewLine                              object parameter, Di2015NewLine                              CultureInfo culture)Di2015NewLine    {Di2015NewLine        return Binding.DoNothing;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18321806Di2015UniqueSeparator<Button Content="Execute" Di2015NewLine        Command="{Binding CustomObject, Converter={lcl:ToCommand}}" />Di2015NewLine
18321812Di2015UniqueSeparatorswitch
18321812Di2015UniqueSeparatorstring result;Di2015NewLineswitch(num) {Di2015NewLine    case 0: result = "UH"; break;Di2015NewLine    //...Di2015NewLine    case 48: result = "OL"; break;Di2015NewLine    default: throw new ArgumentOutOfRangeException();Di2015NewLine}Di2015NewLineConsole.WriteLine(result);Di2015NewLine
18321812Di2015UniqueSeparatorstatic readonly Dictionary<int,string> map = new Dictionary<int,string> {Di2015NewLine    {0, "UH"},Di2015NewLine    //...Di2015NewLine    {48, "OL"}Di2015NewLine};Di2015NewLine...Di2015NewLinestring result;Di2015NewLineif(!map.TryGetValue(num, out result))Di2015NewLine    throw new ArgumentOutOfRangeException();Di2015NewLineConsole.WriteLine(result);Di2015NewLine
18321812Di2015UniqueSeparatorenum
18321812Di2015UniqueSeparatorenum Map {Di2015NewLine  UH = 0,Di2015NewLine  //...Di2015NewLine  OL = 48Di2015NewLine}Di2015NewLine...Di2015NewLineMap mapped = (Map)num;Di2015NewLineConsole.WriteLine(mapped);Di2015NewLine// also, string result = mapped.ToString(); if you really needDi2015NewLine
18321912Di2015UniqueSeparator    var l = new List<Union3<string, DateTime, int>>  {Di2015NewLine            new Union3<string, DateTime, int>(DateTime.Now),Di2015NewLine            new Union3<string, DateTime, int>(42),Di2015NewLine            new Union3<string, DateTime, int>("test"),Di2015NewLine            new Union3<string, DateTime, int>("one more test")Di2015NewLine    };Di2015NewLineDi2015NewLine        foreach (Union3<string, DateTime, int> union in l)Di2015NewLine        {Di2015NewLine            string value = union.Match(Di2015NewLine                str => str,Di2015NewLine                dt => dt.ToString("yyyy-MM-dd"),Di2015NewLine                i => i.ToString());Di2015NewLineDi2015NewLine            Console.WriteLine("Matched union with value '{0}'", value);Di2015NewLine        }Di2015NewLine
18322046Di2015UniqueSeparator#include
18322115Di2015UniqueSeparatorScrollWheelValue
18322115Di2015UniqueSeparatorScrollWheelValue
18322115Di2015UniqueSeparatorcurrentMouseState.ScrollWheelValue.Equals(0);Di2015NewLine
18322115Di2015UniqueSeparatorprivate int previousScrollValue;
18322115Di2015UniqueSeparatorInitialize
18322115Di2015UniqueSeparatorpreviousScrollValue = originalMouseState.ScrollWheelValue;
18322115Di2015UniqueSeparatorif (currentMouseState.ScrollWheelValue < previousScrollValue)Di2015NewLine{Di2015NewLine    cameraPosition += new Vector3(0, -1, 0);Di2015NewLine    UpdateViewMatrix();Di2015NewLine}Di2015NewLineelse if (currentMouseState.ScrollWheelValue > previousScrollValue)Di2015NewLine{Di2015NewLine    cameraPosition += new Vector3(0, 1, 0);Di2015NewLine    UpdateViewMatrix();Di2015NewLine}Di2015NewLinepreviousScrollValue = currentMouseState.ScrollWheelValue;Di2015NewLine
18322190Di2015UniqueSeparator"\\"
18322190Di2015UniqueSeparatorPath.Combine
18322190Di2015UniqueSeparatorFile.AppendAllText
18322190Di2015UniqueSeparatorvar file = Path.Combine(variable1, variable2 + ".txt");Di2015NewLineFile.AppendAllText(file, textBox.Text);Di2015NewLine
18322190Di2015UniqueSeparatorusing
18322333Di2015UniqueSeparatorprivate void listbox1_tapped(object sender, TappedRoutedEventArgs e)Di2015NewLine        {Di2015NewLine           var selectedSong = (Song)listbox1.SelectedItem;Di2015NewLine           if (selectedSong != null) {Di2015NewLine              var val = selectedSong.Value;Di2015NewLine              }Di2015NewLine        }Di2015NewLine
18322333Di2015UniqueSeparatorSelectedItem
18322333Di2015UniqueSeparatorObject
18322333Di2015UniqueSeparatorValue
18322333Di2015UniqueSeparatorSong
18322333Di2015UniqueSeparatorValue
18322333Di2015UniqueSeparatorproperty
18322333Di2015UniqueSeparatormethod
18322389Di2015UniqueSeparatorDropDownList
18322389Di2015UniqueSeparatorValue
18322455Di2015UniqueSeparatorpublic partial class MyPage : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected bool showField = false;Di2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        showField = Authentication.IsAuthorized(User.Identity.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18322455Di2015UniqueSeparator<asp:Label ID="lblHiddenField" runat="server" Visible='<%# showField %>' />Di2015NewLine
18322503Di2015UniqueSeparatorpublic static class DynamicQuerierDi2015NewLine{Di2015NewLine    private delegate IQueryable<TResult> QueryableMonad<TInput, TResult>(IQueryable<TInput> input, Expression<Func<TInput, TResult>> mapper);Di2015NewLineDi2015NewLine    public static IQueryable<TResult> Select<TInput, TResult>(this IQueryable<TInput> input, string propertyName)Di2015NewLine    {Di2015NewLine        var property = typeof (TInput).GetProperty(propertyName);Di2015NewLine        return CreateSelector<TInput, TResult>(input, property, Queryable.Select);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static IQueryable<TResult> CreateSelector<TInput, TResult>(IQueryable<TInput> input, MemberInfo property, QueryableMonad<TInput, TResult> method)Di2015NewLine    {Di2015NewLine        var source = Expression.Parameter(typeof(TInput), "x");Di2015NewLine        Expression propertyAccessor = Expression.MakeMemberAccess(source, property);Di2015NewLine        var expression = Expression.Lambda<Func<TInput, TResult>>(propertyAccessor, source);Di2015NewLine        return method(input, expression);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18322503Di2015UniqueSeparatorTests
18322503Di2015UniqueSeparatorProperty2
18322503Di2015UniqueSeparatorvar values = context.Tests.Select<Test, int>("Property2").Distinct();Di2015NewLine
18322539Di2015UniqueSeparator<div class="accordion-inner no_border" >Di2015NewLine    <div data-bind="foreach: Children">Di2015NewLine        <div class="element">Di2015NewLine        </div>Di2015NewLine    </div>Di2015NewLine    <span data-bind="if : Children().length == 0">No items in group</span>Di2015NewLine<div>Di2015NewLine
18322576Di2015UniqueSeparatorpublic void UpdateCategory(Models.Category catData)Di2015NewLine{Di2015NewLine    if (catData == null) return;Di2015NewLine    using (var cntx = new DataContext())Di2015NewLine    {Di2015NewLine        //IN THE LINE BELOW A CONNECTION IS DEFINITELY OPENED BUT IS IT Di2015NewLine        //IMMEDIATELY CLOSE? => YES!Di2015NewLine        var cat = cntx.Set<Category>()Di2015NewLine                          .FirstOrDefault(c => c.CategoryId == catData.CategoryId);Di2015NewLineDi2015NewLine        if (cat == null) return;Di2015NewLineDi2015NewLine        if (!cat.LastChanged.Matches(catData.LastChanged))Di2015NewLine            throw new ConcurrencyException(cat.GetType().ToString());Di2015NewLineDi2015NewLine        cat.CategoryName = catData.CategoryName;Di2015NewLineDi2015NewLine        cntx.DbContext.Entry<Category>(cat).State = System.Data.EntityState.Modified;Di2015NewLineDi2015NewLine        //AFTER THE NEXT LINE DO I HAVE 2 CONNECTIONS OPENED? => NODi2015NewLine        cntx.SaveChanges();Di2015NewLineDi2015NewLineDi2015NewLine        catData.LastChanged = cat.LastChanged;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18322586Di2015UniqueSeparatorContent
18322586Di2015UniqueSeparatorFreezable
18322586Di2015UniqueSeparatorStyle
18322586Di2015UniqueSeparatorContentPresenter
18322586Di2015UniqueSeparatorContent
18322586Di2015UniqueSeparatorSetter
18322588Di2015UniqueSeparatorEditMode
18322588Di2015UniqueSeparatorEditMode
18322588Di2015UniqueSeparatorItemTemplate
18322588Di2015UniqueSeparatorLinkButton lbClose = (LinkButton)e.Row.Cells[5].FindControl("lbClose");Di2015NewLineif (lbClose == null) { return; }Di2015NewLine
18322616Di2015UniqueSeparatorthis.Focus();Di2015NewLine
18322644Di2015UniqueSeparatorinterface IMyData Di2015NewLine{Di2015NewLine      string GetLastName();Di2015NewLine}Di2015NewLineDi2015NewLineclass MyDataFromOldWebServiceDi2015NewLine{Di2015NewLine    MyApi.MyApiV1 service;Di2015NewLine    MyDataFromOldWebService(MyApi.MyApiV1 service)Di2015NewLine    {Di2015NewLine      this.service = service;Di2015NewLine    }Di2015NewLine    public string GetLastName()...Di2015NewLine}Di2015NewLineDi2015NewLineDictionary<string, IMyData> services = new Dictionary<string, IMyData>()Di2015NewLine  {Di2015NewLine      { "Old Service", new MyDataFromOldWebService(new MyApi.MyApiV1(url))}Di2015NewLine  };Di2015NewLine
18322785Di2015UniqueSeparatorif (firstRun)Di2015NewLine        {Di2015NewLine            ergebniss = Convert.ToDouble(txtZahl.Text);Di2015NewLine            firstRun = false;Di2015NewLine            return;Di2015NewLine        }Di2015NewLine
18322785Di2015UniqueSeparatortxtZahl.Text = ergebniss.ToString();Di2015NewLine
18322864Di2015UniqueSeparatordecimal
18322864Di2015UniqueSeparatorint integralPart = 123;Di2015NewLineint decimalPart = 12345;Di2015NewLineDi2015NewLinedecimal result = decimalPart;Di2015NewLinewhile (result>=1m) result/=10m; // CAVEAT: see belowDi2015NewLineDi2015NewLineresult+=integralPart;Di2015NewLine
18322864Di2015UniqueSeparatorwhile
18322864Di2015UniqueSeparatorresult = integralPart + decimalPart / 1000000m; // fixed scale factorDi2015NewLine
18323053Di2015UniqueSeparatorpublic class AuthMessageHandler : DelegatingHandlerDi2015NewLine{Di2015NewLine    protected ITokenProvider TokenProvider { get; private set; }Di2015NewLine    protected IPrincipalProvider PrincipalProvider { get; private set; }Di2015NewLineDi2015NewLine    public AuthMessageHandler(ITokenProvider tokenProvider, IPrincipalProvider principalProvider)Di2015NewLine    {Di2015NewLine        TokenProvider = tokenProvider;Di2015NewLine        PrincipalProvider = principalProvider;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)Di2015NewLine    {Di2015NewLine        Identity identity = null;Di2015NewLine        string token = ExtractToken(request);Di2015NewLineDi2015NewLine        if (token != null && TokenProvider.Verify(token, out identity))Di2015NewLine        {Di2015NewLine            request.Properties.Add(Constants.IdentityKey, identity);Di2015NewLine            var principal = PrincipalProvider.CreatePrincipal(identity);Di2015NewLine            Thread.CurrentPrincipal = principal;Di2015NewLine            HttpContext.Current.User = principal;Di2015NewLine        }Di2015NewLineDi2015NewLine        return base.SendAsync(request, cancellationToken);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private string ExtractToken(HttpRequestMessage request)Di2015NewLine    {Di2015NewLine        IEnumerable<string> tokenValues = null;Di2015NewLine        if (request.Headers.TryGetValues(Constants.TokenHeaderKey, out tokenValues))Di2015NewLine            return tokenValues.First();Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18323115Di2015UniqueSeparatorclass UserDi2015NewLine{Di2015NewLine    //..Di2015NewLine}Di2015NewLineDi2015NewLineinterface IUserRepositoryDi2015NewLine{Di2015NewLine    public function getAllUsers();Di2015NewLine}Di2015NewLineDi2015NewLineclass UserRepository extends DoctrineRepository implements IUserRepositoryDi2015NewLine{Di2015NewLine    public function getAllUsers()Di2015NewLine    {Di2015NewLine        return $this->findAll();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass AdminController extends ControllerDi2015NewLine{Di2015NewLine    private $repository;Di2015NewLine    public function __Construct(IUserRepository $repository )Di2015NewLine    {Di2015NewLine        $this->repository = $repository;Di2015NewLine    }Di2015NewLine    public function ActionResult_ListUsers()Di2015NewLine    {Di2015NewLine        $users = $this->repository->getAllUsers();Di2015NewLine        // Do some clever View method thing with $users as the modelDi2015NewLine    }Di2015NewLine
18323193Di2015UniqueSeparatorbit-wise OR
18323193Di2015UniqueSeparatormyenums
18323193Di2015UniqueSeparatorpossibleUpdate
18323193Di2015UniqueSeparator//Does myenums contain all the flags in 'possibleUpdate'?  Di2015NewLineif (myenums & possibleUpdate != possibleUpdate)Di2015NewLine    //If not add the missing flags to myenumsDi2015NewLine    myenums = myenums | possibleUpdate;Di2015NewLine
18323256Di2015UniqueSeparatorSetter
18323256Di2015UniqueSeparatorTargetName
18323256Di2015UniqueSeparatorTemplate
18323256Di2015UniqueSeparatorTrigger
18323256Di2015UniqueSeparatorDataTemplate
18323256Di2015UniqueSeparatorControlTemplate
18323256Di2015UniqueSeparatorIValueConverter
18323256Di2015UniqueSeparatorBooleanToVisibilityConverter
18323256Di2015UniqueSeparatorVisibility.Collapsed
18323860Di2015UniqueSeparatorSortMemberPath
18323860Di2015UniqueSeparatorDataGridTemplateColumn
18323860Di2015UniqueSeparator  <DataGridTemplateColumn SortMemberPath="KeyIndex" CellTemplate="{StaticResource readOnlyCellUpdatedStyle}"  IsReadOnly="True"/>Di2015NewLine
18324013Di2015UniqueSeparatorActivator.CreateInstance
18324013Di2015UniqueSeparatorforeach ( var type in cmdTypes )Di2015NewLine{Di2015NewLine    if ( type.Name.ToLowerInvariant() == Name.ToLowerInvariant() )Di2015NewLine    {Di2015NewLine        Command cmd = Activator.CreateInstance(type) as Command;Di2015NewLine        if(cmd != null)  // cmd is a Command!Di2015NewLine            return cmd.execute(cmdParams);Di2015NewLine        elseDi2015NewLine            // what should you do?Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //Command not found!Di2015NewLine        return 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18324284Di2015UniqueSeparatorint [][] Boxes = new int[][] {Di2015NewLine      new int[] {1,0}, new int[] {1,0,1,0},Di2015NewLine      new int[] {0,1}, new int[] {0,0,0,1}, Di2015NewLine      new int[] {1,1}, new int[] {1,1,1,0}, Di2015NewLine      new int[] {2,0}, new int[] {1,1,0,0},Di2015NewLine      new int[] {2,1}, new int[] {0,0,0,1}, Di2015NewLine      new int[] {3,1}, new int[] {1,0,1,0}, Di2015NewLine      new int[] {0,2}, new int[] {0,0,1,1}, Di2015NewLine      new int[] {1,2}, new int[] {1,0,1,0}, Di2015NewLine      new int[] {2,2}, new int[] {0,1,1,0}};Di2015NewLine
18324284Di2015UniqueSeparatornew int [2][4]
18324407Di2015UniqueSeparator<!\\[CDATA\\[
18324421Di2015UniqueSeparatornull
18324421Di2015UniqueSeparatorAccountController
18324421Di2015UniqueSeparatorRegister()
18324421Di2015UniqueSeparator_appellationRepository.GetAppellationByDescription("Mr")Di2015NewLine_countryRepository.GetCountryByName("United Kingdom")Di2015NewLine_corporationRepository.GetCorporationByName("Samsung")Di2015NewLine
18324421Di2015UniqueSeparatornull
18324421Di2015UniqueSeparator.Id
18324421Di2015UniqueSeparatorvar country = _countryRepository.GetCountryByName("United Kingdom");Di2015NewLineDi2015NewLineif (country == null) Di2015NewLine    // Log the error or give a more descriptive errorDi2015NewLine
18324522Di2015UniqueSeparatorpublic abstract class ViewModelBase : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    bool _isCurrentPage;Di2015NewLineDi2015NewLine    protected MyData MyData { get; private set; }Di2015NewLineDi2015NewLine    public ViewModelBase(MyData myData)Di2015NewLine    {Di2015NewLine        MyData = myData;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WelcomePageViewModel : ViewModelBaseDi2015NewLine{  Di2015NewLine    public WelcomePageViewModel(MyData myData)Di2015NewLine        : base(myData)Di2015NewLine    {Di2015NewLine       // Access the protected propertyDi2015NewLine       MyLogger.WriteLine("Grabbed an instance of myData: " + MyData.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
18324704Di2015UniqueSeparatorprivate DateTimePicker cellDateTimePicker;Di2015NewLineprivate List<int> dateColumnsIndexes;Di2015NewLineDi2015NewLinepublic MainForm()Di2015NewLine{Di2015NewLine  InitializeComponent();Di2015NewLineDi2015NewLine  /// Di2015NewLine  this.cellDateTimePicker = new DateTimePicker();Di2015NewLine  this.cellDateTimePicker.ValueChanged += new EventHandler(cellDateTimePickerValueChanged);Di2015NewLine  this.cellDateTimePicker.Visible = false;Di2015NewLine  this.cellDateTimePicker.CustomFormat = "dd/MM/yyyy";Di2015NewLine  this.cellDateTimePicker.Format = DateTimePickerFormat.Custom;Di2015NewLine  this.dataGridView1.Controls.Add(cellDateTimePicker);Di2015NewLine  (...)Di2015NewLine}Di2015NewLineDi2015NewLineprivate void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)Di2015NewLine{Di2015NewLine  var index = masterDataGridView.CurrentCell.ColumnIndex;Di2015NewLine  if (this.dateColumnsIndexes.Contains(index))Di2015NewLine  {Di2015NewLine    Rectangle tempRect = this.dataGridView1.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, false);          Di2015NewLine    cellDateTimePicker.Location = tempRect.Location;Di2015NewLine    cellDateTimePicker.Width = tempRect.Width;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine      cellDateTimePicker.Value = DateTime.Parse(dataGridView1.CurrentCell.Value.ToString());Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine      cellDateTimePicker.Value = DateTime.Now;Di2015NewLine    }Di2015NewLine    cellDateTimePicker.Visible = true;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinevoid cellDateTimePickerValueChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  masterDataGridView.CurrentCell.Value = cellDateTimePicker.Value.ToString("dd/MM/yyyy");Di2015NewLine  cellDateTimePicker.Visible = false;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void AddCalendars(DataGridView dtgv)Di2015NewLine{Di2015NewLine  dateColumnsIndexes = new List<int>();Di2015NewLine  dtgv.DataSource = controller.getEmptyDataTable();     // DataTable provided by excel readerDi2015NewLine  var l = dtgv.Columns.Count;Di2015NewLine  string[] dateColumns = {"date_received", "date_of_birth"};Di2015NewLine  for (var i = 0; i < l; ++i)Di2015NewLine  {Di2015NewLine    if ( dateColumns.Any( dtgv.Columns[i].HeaderText.Contains )Di2015NewLine    {Di2015NewLine      dateColumnsIndexes.add(i);Di2015NewLine    }Di2015NewLine }Di2015NewLine
18325054Di2015UniqueSeparatorcomboBox1.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine
18325135Di2015UniqueSeparator<!--#element attribute=value attribute=value ... -->Di2015NewLine
18325320Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var restaurants = new List<Restaurant>();Di2015NewLine    restaurants.Add(new Restaurant(1, "McDonalds"));Di2015NewLine    restaurants.Add(new Restaurant(2, "Wendy's"));Di2015NewLine    restaurants.Add(new Restaurant(3, "KFC"));Di2015NewLineDi2015NewLine    var comments = new List<Comment>();Di2015NewLine    comments.Add(new Comment(1, 1, "I love clowns!", 9.5));Di2015NewLine    comments.Add(new Comment(2, 1, "Disgusting", 1.0));Di2015NewLine    comments.Add(new Comment(3, 1, "Average", 5.0));Di2015NewLine    comments.Add(new Comment(4, 2, "Hmmm tasty", 8.5));Di2015NewLine    comments.Add(new Comment(5, 2, "Yuck", 4.0));Di2015NewLineDi2015NewLine    // Edit - removed comment for KFC, updated code below to handle nullsDi2015NewLine    var restaurantsWithRatings = restaurants.Select(r => new {Di2015NewLine            RestaurantId = r.RestaurantId,Di2015NewLine            Name = r.Name,Di2015NewLine            Rating = (Di2015NewLine                comments.Where(c => c.RestaurantId == r.RestaurantId)Di2015NewLine                    .Select(c => c.Rating)Di2015NewLine                    .DefaultIfEmpty(0)Di2015NewLine            ).Average()Di2015NewLine        });Di2015NewLineDi2015NewLine    foreach(var r in restaurantsWithRatings)Di2015NewLine        Console.WriteLine("{0}: {1}", r.Name, r.Rating);Di2015NewLine}Di2015NewLineDi2015NewLineclass RestaurantDi2015NewLine{Di2015NewLine    public Restaurant(int restaurantId, string name)Di2015NewLine    {Di2015NewLine        RestaurantId = restaurantId;Di2015NewLine        Name = name;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int RestaurantId { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass CommentDi2015NewLine{Di2015NewLine    public Comment(int commentId, int restaurantId, string message, double rating)Di2015NewLine    {Di2015NewLine        CommentId = commentId;Di2015NewLine        RestaurantId = restaurantId;Di2015NewLine        Message = message;Di2015NewLine        Rating = rating;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int CommentId { get; set; }Di2015NewLine    public int RestaurantId { get; set; }Di2015NewLine    public string Message { get; set; }Di2015NewLine    public double Rating { get; set; }Di2015NewLine}Di2015NewLine
18325322Di2015UniqueSeparatorSystem.Data.Linq.Binary
18325322Di2015UniqueSeparatorbyte[]
18325322Di2015UniqueSeparatorw.Document = new System.Data.Linq.Binary(bytes);Di2015NewLine
18325587Di2015UniqueSeparatorDi2015NewLineDi2015NewLine    using System;Di2015NewLine    using System.Collections.Generic;Di2015NewLine    using System.Linq;Di2015NewLine    using System.Text;Di2015NewLine    using System.IO;Di2015NewLineDi2015NewLine    namespace CopyDi2015NewLine    {Di2015NewLine        class CopyDirTimestampsDi2015NewLine        {Di2015NewLine            public static bool CopyTimestamps(Di2015NewLine                string sourceDirName, string destDirName, bool copySubDirs)Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    CopyForDir(sourceDirName, destDirName, copySubDirs, false);Di2015NewLine                    return true;Di2015NewLine                }Di2015NewLine                catch (Exception)Di2015NewLine                {Di2015NewLine                    return false;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLineDi2015NewLine            private static void CopyForDir(Di2015NewLine                string sourceDirName, string destDirName, bool copySubDirs, bool isSubDir)Di2015NewLine            {Di2015NewLine                DirectoryInfo dir = new DirectoryInfo(sourceDirName);Di2015NewLine                DirectoryInfo[] dirs = dir.GetDirectories();Di2015NewLineDi2015NewLine                // If the source directory does not exist, throw an exception.Di2015NewLine                if (!dir.Exists)Di2015NewLine                {Di2015NewLine                    throw new DirectoryNotFoundException(Di2015NewLine                        "Source directory does not exist or could not be found: "Di2015NewLine                        + sourceDirName);Di2015NewLine                }Di2015NewLineDi2015NewLine                if (!Directory.Exists(destDirName)) return;Di2015NewLineDi2015NewLine                DirectoryInfo destDir = new DirectoryInfo(destDirName);Di2015NewLineDi2015NewLine                // If copySubDirs is true, copy the subdirectories.Di2015NewLine                if (copySubDirs)Di2015NewLine                {Di2015NewLine                    foreach (DirectoryInfo subdir in dirs)Di2015NewLine                    {Di2015NewLine                        // Create the subdirectory.Di2015NewLine                        string temppath = Path.Combine(destDirName, subdir.Name);Di2015NewLineDi2015NewLine                        // Copy the subdirectories.Di2015NewLine                        CopyForDir(subdir.FullName, temppath, copySubDirs, true);Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                if (isSubDir)Di2015NewLine                {Di2015NewLine                    destDir.CreationTime = dir.CreationTime;Di2015NewLine                    destDir.LastAccessTime = dir.LastAccessTime;Di2015NewLine                    destDir.LastWriteTime = dir.LastWriteTime;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine
18325845Di2015UniqueSeparator@
18325845Di2015UniqueSeparatorstring example = Di2015NewLine@"This isDi2015NewLinea multiline string.";Di2015NewLine
18326163Di2015UniqueSeparatorrichTextBox1.Text
18326163Di2015UniqueSeparatorALTER TABLE
18326163Di2015UniqueSeparator richTextBox1.Text = richTextBox1.Text.Replace("REFERENCES \\"USER1\\".", "REFERENCES ");Di2015NewLine
18326163Di2015UniqueSeparatorALTER TABLE
18326163Di2015UniqueSeparatorRegEx
18326163Di2015UniqueSeparatorRegex reg = new Regex("(ALTER TABLE .+ REFERENCES\\\\s+)\\"USER1\\"[.](.+)");Di2015NewLinerichTextBox1.Text = reg.Replace(richTextBox1.Text, "$1$2");            Di2015NewLine
18326814Di2015UniqueSeparatorSmtpClient smtpClient = new SmtpClient("mail.MyWebsiteDomainName.com", 25);Di2015NewLineDi2015NewLinesmtpClient.Credentials = new System.Net.NetworkCredential("info@MyWebsiteDomainName.com", "myIDPassword");Di2015NewLine            smtpClient.UseDefaultCredentials = true;Di2015NewLine            smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;Di2015NewLine            smtpClient.EnableSsl = true;Di2015NewLine            MailMessage mail = new MailMessage();Di2015NewLineDi2015NewLineDi2015NewLine            //Setting From , To and CCDi2015NewLine            mail.From = new MailAddress("info@MyWebsiteDomainName", "MyWeb Site");Di2015NewLine            mail.To.Add(new MailAddress("info@MyWebsiteDomainName"));Di2015NewLine            mail.CC.Add(new MailAddress("MyEmailID@gmail.com"));Di2015NewLineDi2015NewLineDi2015NewLinesmtpClient.Send(mail);Di2015NewLine
18326832Di2015UniqueSeparator/
18326832Di2015UniqueSeparator/
18326832Di2015UniqueSeparator\\/
18326832Di2015UniqueSeparator\\.
18326832Di2015UniqueSeparator[]
18326832Di2015UniqueSeparatorg
18326832Di2015UniqueSeparatorvar pattern = new Regex(@"(http|https)://(www\\.)?[\\w-_.]+\\.[a-zA-Z]+/((([\\w-_/]+)/)?[\\w-_.]+\\.(png|gif|jpg))");Di2015NewLine
18326832Di2015UniqueSeparatorRegexOptions.Multiline
18327007Di2015UniqueSeparator string val = @"1000*2=2000$500*1=500$100*0=0$50*0=0$20*0=0";Di2015NewLine List<string> fields = new List<string>(val.Split(new[] { '$' }));Di2015NewLine
18327007Di2015UniqueSeparator gridView1.DataSource = fields;Di2015NewLine gridView1.DataBind();Di2015NewLine
18327046Di2015UniqueSeparatorprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DataSet ds = new DataSet();Di2015NewLine        SqlConnection con = new SqlConnection(connectionString);Di2015NewLine        SqlCommand cmd = new SqlCommand("InsertIntoEmployee", con);Di2015NewLine        cmd.CommandType = CommandType.StoredProcedure;            Di2015NewLine        cmd.Parameters.Add("@LastName", SqlDbType.NVarChar(MAX)).Value = LastName.Text;Di2015NewLine         cmd.Parameters.Add("@FirstName", SqlDbType.NVarChar(MAX)).Value = FirstName.Text;Di2015NewLine          cmd.Parameters.Add("@Phone1", SqlDbType.NVarChar(MAX)).Value = Phone1.Text;Di2015NewLine         cmd.Parameters.Add("@Phone2", SqlDbType.NVarChar(MAX)).Value = Phone2.Text;Di2015NewLine        con.Open();Di2015NewLine        cmd.ExecuteNonQuery();Di2015NewLine        con.Close();Di2015NewLineDi2015NewLine      //  gvQuarterlyReport.DataBind();Di2015NewLine    }Di2015NewLine
18327058Di2015UniqueSeparatorvar q =Di2015NewLine    from pv in ProductVariantsDi2015NewLine    join p in Product on pv.ProductID equals p.ProductIDDi2015NewLine    select new { //... };Di2015NewLineDi2015NewLineforeach (var v in q)Di2015NewLine{Di2015NewLine    Console.WriteLine(v.Name + ", " + v.Description);Di2015NewLine    Console.WriteLine(v.FrontImage + ", " + v.BackImage+ ", " +v.Price);Di2015NewLine}Di2015NewLine
18327223Di2015UniqueSeparatortranslation.X = e.Delta.Translation.X;Di2015NewLinetranslation.Y = e.Delta.Translation.YDi2015NewLineDi2015NewLine// Since we are checking the left point subtract your shapes width from the canvas rightDi2015NewLine// bounds.  If X is greater than this set it instead to that maximum bound.Di2015NewLineif (translation.X > (canvasright - shape.Width))Di2015NewLine    translation.X = canvasright - shape.Width;Di2015NewLineDi2015NewLine/// Same for top.  If Y is less than the canvas top set it instead right at the boundary.Di2015NewLineif (translation.Y < canvastop)Di2015NewLine    translation.Y = canvastop;Di2015NewLineDi2015NewLine// Do the same for bottom and leftDi2015NewLine
18327316Di2015UniqueSeparatorThumbnailToolBarButton
18327375Di2015UniqueSeparatorSystem.Data.OleDb
18327375Di2015UniqueSeparator?
18327375Di2015UniqueSeparator"UPDATE [Student] SET Name = ? Where Id = ?";Di2015NewLine
18327375Di2015UniqueSeparatorSystem.Data.OleDb
18327375Di2015UniqueSeparator@
18327375Di2015UniqueSeparatorDbProviderFactory dbFactory = DbProviderFactories.GetFactory("System.Data.OleDb");Di2015NewLine
18327375Di2015UniqueSeparatorDbProviderFactory dbFactory = DbProviderFactories.GetFactory("System.Data.SqlClient");Di2015NewLine
18327533Di2015UniqueSeparatorstr.Append(" WHERE 1=1 ");Di2015NewLine
18327533Di2015UniqueSeparatorselect * from yourTable where 1=1 and condition1 and condition2 ....Di2015NewLine
18327829Di2015UniqueSeparatorpublic int DepthDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (Items.Count == 0)Di2015NewLine            return 0;Di2015NewLine        var subMenu = Items.Select(b => b as MenuGroup);Di2015NewLine        if (!subMenu.Any())Di2015NewLine            return 1;Di2015NewLine        var subLevel = subMenu.Cast<MenuGroup>().Select(x = > x.Depth);Di2015NewLine        return !subLevel.Any() ? 1 : subLevel.Max() + 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18327829Di2015UniqueSeparatorMenuGroup
18327829Di2015UniqueSeparatorOfType
18327829Di2015UniqueSeparatorSelect
18327829Di2015UniqueSeparatorCast
18327829Di2015UniqueSeparatorpublic int DepthDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        // Completely empty menu (not even any straight items). 0 depth.Di2015NewLine        if (Items.Count == 0)Di2015NewLine        {Di2015NewLine            return 0;Di2015NewLine        }Di2015NewLine        // We've either got items (which would give us a depth of 1) orDi2015NewLine        // items and groups, so find the maximum depth of any subgroups,Di2015NewLine        // and add 1.Di2015NewLine        return Items.OfType<MenuGroup>()Di2015NewLine                    .Select(x => x.Depth)Di2015NewLine                    .DefaultIfEmpty() // 0 if we have no subgroupsDi2015NewLine                    .Max() + 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18327870Di2015UniqueSeparator    <Grid.DataContext>Di2015NewLine        <local:ucvm/>Di2015NewLine    </Grid.DataContext>Di2015NewLine
18328056Di2015UniqueSeparator<section name="SecuritySettings" type="ServicesConfigSection.ServicesSection, ConfigSecHandler"/>Di2015NewLine
18328077Di2015UniqueSeparatorForeColor
18328077Di2015UniqueSeparatorprotected override void OnPaint(PaintEventArgs e)Di2015NewLine{Di2015NewLine     SolidBrush drawBrush = new SolidBrush(ForeColor);Di2015NewLine     // Draw string to screen.Di2015NewLine     e.Graphics.DrawString(Text, Font, drawBrush, 0f,0f); Di2015NewLine}Di2015NewLineset the ControlStyles to "UserPaint"Di2015NewLineDi2015NewLinepublic MyTextBox()//constructorDi2015NewLine{Di2015NewLine     // This call is required by the Windows.Forms Form Designer.Di2015NewLine     this.SetStyle(ControlStyles.UserPaint,true);Di2015NewLineDi2015NewLine     InitializeComponent();Di2015NewLineDi2015NewLine     // TODO: Add any initialization after the InitForm callDi2015NewLine}Di2015NewLine
18328141Di2015UniqueSeparator public static Status ExecuteRequests(params Func<Result>[] actions){Di2015NewLine  foreach (Func<Result> action in actions) {Di2015NewLine    Result r = action();Di2015NewLine    if (!r.Success) {Di2015NewLine      Status s = new Status() { Failed = action.Target.GetType().ToString() };Di2015NewLine      return s;Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  return new Status() { Success = true };Di2015NewLine}Di2015NewLine
18328141Di2015UniqueSeparator  ExecuteRequests(Di2015NewLine    () => A.doSomething(), Di2015NewLine    () => B.doSomethingElse(42));Di2015NewLine
18328207Di2015UniqueSeparator public static void Start() {Di2015NewLine            lock (initLock) {Di2015NewLine                if (!hasInited) {Di2015NewLine                    // Go through all the bin assembliesDi2015NewLine                    foreach (var assemblyFile in GetAssemblyFiles()) {Di2015NewLine                        var assembly = Assembly.LoadFrom(assemblyFile);Di2015NewLineDi2015NewLine                        // Go through all the PreApplicationStartMethodAttribute attributesDi2015NewLine                        // Note that this is *our* attribute, not the System.Web namesakeDi2015NewLine                        foreach (PreApplicationStartMethodAttribute preStartAttrib in assembly.GetCustomAttributes(Di2015NewLine                            typeof(PreApplicationStartMethodAttribute),Di2015NewLine                            inherit: false)) {Di2015NewLineDi2015NewLine                            // If it asks to be called after global.asax App_Start, keep track of the method. Otherwise call it nowDi2015NewLine                            if (preStartAttrib.CallAfterGlobalAppStart && HostingEnvironment.IsHosted) {Di2015NewLine                                attribsToCallAfterStart.Add(preStartAttrib);Di2015NewLine                            }Di2015NewLine                            else {Di2015NewLine                                // Invoke the method that the attribute points toDi2015NewLine                                preStartAttrib.InvokeMethod();Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine
18328207Di2015UniqueSeparatorprivate static IEnumerable<Assembly> AssembliesDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (_assemblies == null)Di2015NewLine        {Di2015NewLine            // Cache the list of relevant assemblies, since we need it for both Pre and PostDi2015NewLine            _assemblies = new List<Assembly>();Di2015NewLine            foreach (var assemblyFile in GetAssemblyFiles())Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    // Ignore assemblies we can't load. They could be native, etc...Di2015NewLine                    _assemblies.Add(Assembly.LoadFrom(assemblyFile));Di2015NewLine                }Di2015NewLine                catchDi2015NewLine                {Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return _assemblies;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18328362Di2015UniqueSeparatorThe MouseUp event is not fired on clicking the button.
18328362Di2015UniqueSeparatorButton.Click
18328362Di2015UniqueSeparatorMouseUp
18328362Di2015UniqueSeparatorButton
18328362Di2015UniqueSeparatorLabel
18328405Di2015UniqueSeparatorpublic byte[] GetExcelByteStream(string filename)Di2015NewLine{Di2015NewLine    using (var workbook = new XLWorkbook(filename))Di2015NewLine    {Di2015NewLine            var worksheet = workbook.Worksheets.Add("Sample Sheet");Di2015NewLine            worksheet.Cell("A1").Value = "Hello World!";Di2015NewLine            using (var ms = new MemoryStream())Di2015NewLine            {Di2015NewLine                workbook.SaveAs(ms);Di2015NewLine                return ms.ToArray();Di2015NewLine            }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18328405Di2015UniqueSeparatorvar excelStream = GetExcelByteStream("MyExcelFilename");Di2015NewLinecontext.Response.Clear(); Di2015NewLinecontext.Response.AddHeader("Content-Disposition",  "attachment;filename="+context.Request.Form["txtFileName"].ToString()); Di2015NewLinecontext.Response.AddHeader("Content-Length", excelStream.Length.ToString()); Di2015NewLinecontext.Response.ContentType = "application/octet-stream"; Di2015NewLinecontext.Response.BinaryWrite(excelStream); Di2015NewLine
18328531Di2015UniqueSeparatoractions[actions.ContainsKey(pair.Key) ? pair.key : ""](pair.Value, pair.Key);Di2015NewLine
18328718Di2015UniqueSeparatorif (comboBox1.SelectedItem.ToString() == "master" && comboBox2.SelectedItem.ToString() == "master.sql")Di2015NewLine{Di2015NewLineoConnection.Open();Di2015NewLine***SqlCommand SqlCmd = new SqlCommand();Di2015NewLineSqlCmd.CommandText = textentry;Di2015NewLineSqlCmd.Connection = oConnection;Di2015NewLinevar output = SqlCmd.ExecuteNonQuery();***Di2015NewLineif (MessageBox.Show("Execute " + comboBox2.SelectedItem.ToString() + " in the database " + comboBox1.SelectedItem.ToString() + " ?", "Execute?", MessageBoxButtons.YesNo) == DialogResult.Yes)Di2015NewLine{Di2015NewLine if (!output.Equals(0))Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            MessageBox.Show(comboBox2.SelectedItem.ToString() + " executed successfully in " + comboBox1.SelectedItem.ToString() + " database");Di2015NewLine        }Di2015NewLine        catch (Exception exc)Di2015NewLine        {Di2015NewLine            MessageBox.Show("Script Execution Failed,"+exc);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    MessageBox.Show("Execution cancelled by the user");Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    MessageBox.Show("Either the database or the sql script file selected is wrong!!");Di2015NewLine}Di2015NewLine
18328778Di2015UniqueSeparatorDisplayMessage0.Text = "Record already exist.";Di2015NewLine// this is a different field ...Di2015NewLineDisplayMessage.Visible = true;Di2015NewLine
18328778Di2015UniqueSeparatorDisplayMessage0.Text = "Record already exist.";Di2015NewLineDisplayMessage0.Visible = true;Di2015NewLine
18328778Di2015UniqueSeparatorcatch
18328782Di2015UniqueSeparatorSystem.Threading.Timer t = new System.Threading.Timer(End, null, N * 60 * 1000, Timeout.Infinite);Di2015NewLineDi2015NewLine  private static void End(object state)Di2015NewLine  {Di2015NewLine     // Tell the user and end the programDi2015NewLine  }Di2015NewLine
18328782Di2015UniqueSeparatorSystem.Threading.Timer t2 = new System.Threading.Timer(End, null, M * 60 * 1000, Timeout.Infinite);Di2015NewLine
18328782Di2015UniqueSeparator t2.Change(M * 60 * 1000, Timeout.Infinite);Di2015NewLine
18328782Di2015UniqueSeparatorEnvironment.Exit(0);Di2015NewLine
18328782Di2015UniqueSeparatorMessageBox.Show(this, "what message you want to give the user");Di2015NewLine
18328825Di2015UniqueSeparatorRequest.Url.PathAndQuery
18328825Di2015UniqueSeparatorRequest.FilePath
18328923Di2015UniqueSeparatorProcess.Responding
18328923Di2015UniqueSeparatorProcess.Responding
18329054Di2015UniqueSeparator#if !(SILVERLIGHT || NETFX_CORE || PORTABLE || PORTABLE40)Di2015NewLine    IgnoreSerializableAttribute = true;Di2015NewLine#endifDi2015NewLine
18329085Di2015UniqueSeparatorBoolean.TryParse
18329085Di2015UniqueSeparatorstring value = "false";Di2015NewLineBoolean parsedValue;Di2015NewLineDi2015NewLineif (Boolean.TryParse(value, out parsedValue))Di2015NewLine{Di2015NewLine      if (parsedValue)Di2015NewLine      {Di2015NewLine         // do stuffDi2015NewLine      }Di2015NewLine      elseDi2015NewLine      {Di2015NewLine         // do other stuffDi2015NewLine      }Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine   // unable to parseDi2015NewLine}Di2015NewLine
18329224Di2015UniqueSeparator<ScrollViewer>Di2015NewLine<Grid>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition Height="921*" />Di2015NewLine        <RowDefinition Height="0*" />Di2015NewLine    </Grid.RowDefinitions>Di2015NewLine</Grid>Di2015NewLine</ScrollViewer>Di2015NewLine
18329239Di2015UniqueSeparatorenum MyEnumDi2015NewLine{Di2015NewLine    [Description("abc")]Di2015NewLine    AaaVal1,Di2015NewLine    [Description("dft")]Di2015NewLine    AaaVal2,Di2015NewLine    AaaVal3,Di2015NewLine} Di2015NewLine
18329239Di2015UniqueSeparatorswitch (myEnum)Di2015NewLine{Di2015NewLine    case MyEnum.AaaVal1: return "abc";Di2015NewLine    case MyEnum.AaaVal2: return "dft";Di2015NewLine    default:             return "fsdfds";Di2015NewLine}Di2015NewLine
18329239Di2015UniqueSeparatorDictionary<MyEnum, string>
18329239Di2015UniqueSeparatorprivate static Dictionary<MyEnum, string> EnumDescriptions = Di2015NewLine    new Dictionary<MyEnum, string>Di2015NewLine{Di2015NewLine    { MyEnum.AaaVal1, "abc" },Di2015NewLine    { MyEnum.AaaVal2, "dft" },        Di2015NewLine};Di2015NewLine
18329323Di2015UniqueSeparatorprivate void GetRequestStreamCallback(IAsyncResult asynchronousResult)Di2015NewLine{Di2015NewLine    Dispatcher.BeginInvoke(() => Di2015NewLine    {Di2015NewLine        MessageBox.Show("inside get request stream");Di2015NewLine    });Di2015NewLineDi2015NewLine    HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;Di2015NewLineDi2015NewLine    // End the operationDi2015NewLine    Stream postStream = request.EndGetRequestStream(asynchronousResult);Di2015NewLineDi2015NewLine    //Console.WriteLine("Please enter the input data to be posted:");Di2015NewLine    string postData = "Message = Hello";Di2015NewLineDi2015NewLine    // Convert the string into a byte array. Di2015NewLine    byte[] byteArray = Encoding.UTF8.GetBytes(postData);Di2015NewLineDi2015NewLine    // Write to the request stream.Di2015NewLine    postStream.Write(byteArray, 0, postData.Length);Di2015NewLine    postStream.Close();Di2015NewLineDi2015NewLine    // Start the asynchronous operation to get the responseDi2015NewLine    request.BeginGetResponse(new AsyncCallback(GetResponseCallback), request);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void GetResponseCallback(IAsyncResult asynchronousResult)Di2015NewLine{Di2015NewLineDi2015NewLine    Dispatcher.BeginInvoke(() => Di2015NewLine    {Di2015NewLine        MessageBox.Show("inside get response");Di2015NewLine    });Di2015NewLineDi2015NewLine    HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;Di2015NewLineDi2015NewLine    // End the operationDi2015NewLine    HttpWebResponse response = (HttpWebResponse)request.EndGetResponse(asynchronousResult);Di2015NewLine    Stream streamResponse = response.GetResponseStream();Di2015NewLine    StreamReader streamRead = new StreamReader(streamResponse);Di2015NewLine    string responseString = streamRead.ReadToEnd();Di2015NewLine    Console.WriteLine(responseString);Di2015NewLine    // Close the stream objectDi2015NewLine    streamResponse.Close();Di2015NewLine    streamRead.Close();Di2015NewLineDi2015NewLine    // Release the HttpWebResponseDi2015NewLine    response.Close();Di2015NewLine    allDone.Set();Di2015NewLine}       Di2015NewLine
18329460Di2015UniqueSeparator    using (var hunspell = new Hunspell(enAff, enDic))Di2015NewLine    {Di2015NewLine        correct = hunspell.Spell(inputword);Di2015NewLine    }Di2015NewLine
18329460Di2015UniqueSeparatorHunspell hunspell = null;Di2015NewLinetryDi2015NewLine{Di2015NewLine    hunspell = new Hunspell(enAff, enDic)Di2015NewLineDi2015NewLine    for( ... )Di2015NewLine    {Di2015NewLine      hunspell.Spell(inputword[i]);Di2015NewLine    }Di2015NewLine    }Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    if( hunspell != null ) hunspell.Dispose();Di2015NewLine}Di2015NewLine
18329464Di2015UniqueSeparatorList<Project> projects = JsonConvert.DeserializeObject<List<Project>>(response.Content);Di2015NewLine
18329580Di2015UniqueSeparatorList<T>
18329580Di2015UniqueSeparatorIEnumerable<T>
18329580Di2015UniqueSeparatorIEnumerable
18329580Di2015UniqueSeparatorpublic IEnumerable<string> GetData()Di2015NewLine{Di2015NewLine    List<string> myList = new List<string>{" data"};Di2015NewLine    return myList; //worksDi2015NewLine}Di2015NewLine
18329580Di2015UniqueSeparatorIEnumerable<T>
18329580Di2015UniqueSeparatorList<T>
18329580Di2015UniqueSeparatorIEnumerable<T>
18329580Di2015UniqueSeparatorList<T>
18329580Di2015UniqueSeparatorIEnumerable<string> result = GetData();Di2015NewLineConsole.Write(result.First()); // " data";Di2015NewLineDi2015NewLineList<string> resultAsList = (result as List<string>);Di2015NewLineresultAsList.Insert(0, "other data");Di2015NewLineDi2015NewLineConsole.Write(result.First()); // "other data";Di2015NewLine
18329580Di2015UniqueSeparator.AsReadOnly
18329580Di2015UniqueSeparatorReadOnlyCollection<T>
18329580Di2015UniqueSeparatorIEnumerable<T>
18329580Di2015UniqueSeparatorpublic IEnumerable<string> GetData()Di2015NewLine{Di2015NewLine    List<string> myList = new List<string>{" data"};Di2015NewLine    return myList.AsReadOnly();Di2015NewLine}Di2015NewLine
18329712Di2015UniqueSeparatorQ.Append(")");Di2015NewLine
18329712Di2015UniqueSeparatorif (col_no > 0)Di2015NewLine{Di2015NewLine    Q.Length--;Di2015NewLine}Di2015NewLineDi2015NewLineQ.Append(")");Di2015NewLine
18329712Di2015UniqueSeparatorif (col_no > 0)
18329712Di2015UniqueSeparatorStringBuilder
18329814Di2015UniqueSeparator[Serializable]
18329814Di2015UniqueSeparatornew {...}
18329814Di2015UniqueSeparatorreturn parentMenus.Select(m => new SomeNewMenuTypeYouNeedToCreateDi2015NewLine{Di2015NewLine    MenuId = m.MenuId,Di2015NewLine    Name = m.Name,Di2015NewLine    Icon = m.Icon,Di2015NewLine    Children = m.ChildrenDi2015NewLine});Di2015NewLine
18329814Di2015UniqueSeparatorparentMenu.Children = menusDi2015NewLine    .Select(m => new AnotherMenuTypeYouNeedToCreateDi2015NewLine    {Di2015NewLine        ParentId = m.ParentId,Di2015NewLine        MenuId = m.MenuId,Di2015NewLine        Name = m.Name,Di2015NewLine        Url = m.Url,Di2015NewLine        Icon = m.Icon,Di2015NewLine        ActivityView = m.ActivityViewDi2015NewLine    })Di2015NewLine    .Where(m => m.ParentId == parentMenu.MenuId && m.ActivityView==true)Di2015NewLine    .ToList<object>();Di2015NewLine
18329814Di2015UniqueSeparator[Serializable]
18329929Di2015UniqueSeparatorInThreadScope
18329929Di2015UniqueSeparatorIDisposable
18329929Di2015UniqueSeparatorInSingletonScope
18329929Di2015UniqueSeparatorInThreadScope
18329929Di2015UniqueSeparatorInScope
18330029Di2015UniqueSeparatorprivate struct SMultivalueStructureDi2015NewLine  {Di2015NewLine     public ushort PropType; // Type of returned valueDi2015NewLine     public ushort Command; //Command we entered (PR_EMS_PROXY...)Di2015NewLine     public uint dwAlignPad; // Reserved - usually 4 bytes of 0Di2015NewLine     public uint stringArrayLength; // SWStringArray lengthDi2015NewLine     public uint pStringArrayMemoryAddress; //SWStringArray pointer to string arrayDi2015NewLine  }Di2015NewLine
18330029Di2015UniqueSeparatorSMultivalueStructure propValue = (SMultivalueStructure)Marshal.PtrToStructure(pPropValue, typeof(SMultivalueStructure));Di2015NewLine
18330029Di2015UniqueSeparatorIntPtr[] pStrings = new IntPtr[propValue.stringArrayLength];Di2015NewLine
18330029Di2015UniqueSeparatorMarshal.Copy(new IntPtr(propValue.pStringArrayMemoryAddress), pStrings, 0, (int)propValue.stringArrayLength);Di2015NewLine
18330029Di2015UniqueSeparatorfor (int i = 0; i < pStrings.Length; ++i)Di2015NewLine   {Di2015NewLine        string smtpTest = Marshal.PtrToStringAnsi(pStrings[i]);Di2015NewLine   }Di2015NewLine
18330121Di2015UniqueSeparatorString[] arr = { "val1", "val2", "val3" };Di2015NewLine
18330121Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Foo foo = new Foo();Di2015NewLine    foo.bar = new[]{"val1", "val2", "val3"};Di2015NewLine}Di2015NewLine
18330121Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Foo foo = new Foo();Di2015NewLine    foo.bar = new string[3]{"val1", "val2", "val3"};Di2015NewLine}Di2015NewLine
18330121Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    var foo = new Foo { bar = new[] {"val1", "val2", "val3"} };Di2015NewLine}Di2015NewLine
18330227Di2015UniqueSeparatorpublic class BuildDataDi2015NewLine{Di2015NewLine    public int BuildQty {get;set;}Di2015NewLine    public int FailQty {get;set;}Di2015NewLine    public int ShiftHours {get;set;}Di2015NewLine}Di2015NewLine
18330227Di2015UniqueSeparatorList<BuildData> BuildDataList = new List<BuildData>();Di2015NewLine
18330227Di2015UniqueSeparatorwhile (ResultSet.Read())Di2015NewLine{Di2015NewLineDi2015NewLine     BuildData data = new BuildData();Di2015NewLine     data.BuildQty = Convert.ToInt64(ResultSet["BUILD_QTY"];Di2015NewLine     data.FailQty = Convert.ToInt64(ResultSet["FAIL_QTY"];Di2015NewLine     data.ShiftHours = Convert.ToInt64(ResultSet["SHIFT_HOURS "];Di2015NewLine     BuildDataList.Add(data);  Di2015NewLine}Di2015NewLineDi2015NewLinereturn BuildDataList;Di2015NewLine
18330259Di2015UniqueSeparatorStaticResource
18330259Di2015UniqueSeparator<DataGrid>Di2015NewLine    <DataGrid.Resources>Di2015NewLine       <local:MyConverter x:Key="MyConverter"/>Di2015NewLine    </DataGrid.Resources>Di2015NewLine    .....Di2015NewLineDi2015NewLine    <DataGridTextColumn Binding="{Binding Path=xxx, Mode=OneWay,Di2015NewLine                                  Converter={StaticResource MyConverter}}"Di2015NewLine                    Width="140" Header="Some Header"/>Di2015NewLine<DataGrid>Di2015NewLine
18330259Di2015UniqueSeparatorlocal
18330259Di2015UniqueSeparatorxmlns:local="clr-namespace:YourNamespace"Di2015NewLine
18330436Di2015UniqueSeparatorvar verTrabajo = (from o in baseDeDatos.Pelos2sDi2015NewLine                                  where o.num == guar.numDi2015NewLine                                  select o);Di2015NewLine
18330436Di2015UniqueSeparatorvar verTrabajo = (from o in baseDeDatos.Pelos2sDi2015NewLine                                  where o.num == guar.numDi2015NewLine                                  select o).SingleOrDefault();Di2015NewLine
18330436Di2015UniqueSeparatornull
18330550Di2015UniqueSeparatorvar result = selected.SelectMany(item => Di2015NewLine    _repo.GetAllDCategories(item).Select(cat =>Di2015NewLine        newDi2015NewLine        {Di2015NewLine            Label = cat.Name,Di2015NewLine            Value = cat.IdDi2015NewLine        });Di2015NewLine
18330550Di2015UniqueSeparatorSelectMany
18330550Di2015UniqueSeparatorIEnumerable<IEnumerable<T>>
18330550Di2015UniqueSeparatorIEnumerable<T>
18330550Di2015UniqueSeparatorIEnumerable<KeyValuePair<string, int>> GetSelectedCategories(Di2015NewLine        IEnumerable<string> selected)Di2015NewLine{Di2015NewLine    foreach (var item in selected)Di2015NewLine    {Di2015NewLine        foreach (var category in _repo.GetAllDCategories(item))Di2015NewLine        {Di2015NewLine            yield return new KeyValuePair<string, int>(Di2015NewLine                category.Name,Di2015NewLine                category.Id);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18330635Di2015UniqueSeparatorstring matchString = Regex.Match(original_text, "<img.+?src=[\\"'](.+?)[\\"'].+?>", RegexOptions.IgnoreCase).Groups[1].Value;Di2015NewLine
18330670Di2015UniqueSeparatorfinally
18330670Di2015UniqueSeparatorThreadAbortException
18330670Di2015UniqueSeparatorThreadAbortException
18330670Di2015UniqueSeparatortry... catch
18330670Di2015UniqueSeparatorThreadAbortException
18330670Di2015UniqueSeparatorThreadAbortException
18330670Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // The Thread.Abort "happens" hereDi2015NewLine        Thread.Sleep(Timeout.Infinite);Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLinecatch Di2015NewLine{Di2015NewLine}Di2015NewLine
18330670Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    // The Thread.Abort "happens" hereDi2015NewLine    Thread.Sleep(Timeout.Infinite);Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine}Di2015NewLine
18330875Di2015UniqueSeparatordbEntry.Questions.Clear();Di2015NewLine
18330875Di2015UniqueSeparatordbEntry.Questions = questionpack.Questions;Di2015NewLine
18331080Di2015UniqueSeparator A. Create C++ proxy class from WSDL fileDi2015NewLine B. Use that proxy class in your Code for communicating with Server. You will have to maintain Channel opening and closing.Di2015NewLine
18331307Di2015UniqueSeparatorvar timeLeft= $.cookies('timeLeft') || ORIGINAL_VALUE;Di2015NewLinevar timer = setTimeout(myFunc, timeLeft);Di2015NewLine$(window).unload(function(){Di2015NewLine  var timeLeftToSave = getTimeLeft(timer);Di2015NewLine  $.cookies('timeLeft', timeLeftToSave, { path: '/' });Di2015NewLine})Di2015NewLineDi2015NewLine//Use code from the second link hereDi2015NewLinefunction getTimeLeft(timer){Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLinefunction myFunc(){/*YOUR CODE HERE*/}Di2015NewLine
18331352Di2015UniqueSeparatorMultiHandleSliderExtender
18331352Di2015UniqueSeparatorIsReadOnly
18331405Di2015UniqueSeparatorpublic class PaymentDetailInfo : INotifyPropertyChangedDi2015NewLine{Di2015NewLineDi2015NewLine/// <summary> The payment model.Di2015NewLine/// </summary>Di2015NewLineprivate Payment _model = null;Di2015NewLineDi2015NewLine/// <summary> Constructor.Di2015NewLine/// </summary>Di2015NewLinepublic PaymentDetailInfo(Payment payment)Di2015NewLine{Di2015NewLine    _model = payment;Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary> Wrapper around Payment.ConsideredValidNormalOverTime.Di2015NewLine/// </summary>Di2015NewLinepublic int ConsideredValidNormalOverTimeDi2015NewLine{Di2015NewLine    get { return _model.ConsideredValidNormalOverTime; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _model.ConsideredValidNormalOverTime = value;Di2015NewLineDi2015NewLine        // make sure to set the property and not the backing field, otherwise OnPropertyChanged won't be Di2015NewLine        // called and the value of _sumOfValidNormalOverTimePrice will be incorrectDi2015NewLine        SumOfValidNormalOverTimePrice = value;Di2015NewLineDi2015NewLine        OnPropertyChanged(new PropertyChangedEventArgs("ConsideredValidNormalOverTime"));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate int _sumOfValidNormalOverTimePrice = 0;Di2015NewLinepublic int SumOfValidNormalOverTimePriceDi2015NewLine{Di2015NewLine    get { return _sumOfValidNormalOverTimePrice; }Di2015NewLine    private setDi2015NewLine    {Di2015NewLine        _sumOfValidNormalOverTimePrice = 100 * value / 60;Di2015NewLine        OnPropertyChanged(new PropertyChangedEventArgs("SumOfValidNormalOverTimePrice"));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLinepublic void OnPropertyChanged(PropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    if (PropertyChanged != null)Di2015NewLine        PropertyChanged(this, e);Di2015NewLine}Di2015NewLine}Di2015NewLine
18331405Di2015UniqueSeparatorpublic class PaymentDi2015NewLine{Di2015NewLine    public PaymentDetailInfo DetailInfo = new PaymentDetailInfo();Di2015NewLineDi2015NewLine    private int _consideredValidNormalOverTime = 0;Di2015NewLine    public int ConsideredValidNormalOverTimeDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            _return _consideredValidNormalOverTime;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _consideredValidNormalOverTime = value;Di2015NewLine            DetailInfo.SumOfValidNormalOverTimePrice = _consideredValidNormalOverTime;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PaymentDetailInfo : INotifyPropertyChangedDi2015NewLine{    Di2015NewLine    private int _sumOfValidNormalOverTimePrice = 0;Di2015NewLine    public int SumOfValidNormalOverTimePriceDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return __sumOfValidNormalOverTimePrice;            Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            __sumOfValidNormalOverTimePrice = 100 * value / 60;Di2015NewLine            OnPropertyChanged(new PropertyChangedEventArgs("SumOfValidNormalOverTimePrice"));Di2015NewLine        }Di2015NewLine    }    Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    public void OnPropertyChanged(PropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18331405Di2015UniqueSeparatorpublic class Foo: INotifyPropertyChangedDi2015NewLine{Di2015NewLine    #region field and propertiesDi2015NewLineDi2015NewLine    private string _name = String.Empty;Di2015NewLineDi2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return _name; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _name = value;Di2015NewLine            OnPropertyChanged(new PropertyChangedEventArgs("Name"));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region INotifyPropertyChanged implementationDi2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    public void OnPropertyChanged(PropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, e);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine
18331483Di2015UniqueSeparatorprivate TimeReport paramTR;Di2015NewLineprivate ZevUser zevUser;Di2015NewLineDi2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.getParameters();Di2015NewLineDi2015NewLine    if (!this.IsPostBack)Di2015NewLine    {Di2015NewLine        if ((this.paramTR != null) &&Di2015NewLine            (this.paramTR.ZevUser != null) &&Di2015NewLine            (this.paramTR.ZevUser.Active == 0))Di2015NewLine        {Di2015NewLine            this.Response.Redirect("~/TimeReporting/TimeReportPanel.aspx");Di2015NewLine        }Di2015NewLineDi2015NewLine        this.bindData();Di2015NewLine    }Di2015NewLineDi2015NewLine    string sessionId = Session["SessionId"] as string;Di2015NewLineDi2015NewLine    if (sessionId != null)Di2015NewLine    {Di2015NewLine        int session = int32.Parse(sessionId);Di2015NewLineDi2015NewLine        ZevUser user = ZevUser.GetById(session);Di2015NewLineDi2015NewLine        if (user == null)Di2015NewLine        {Di2015NewLine            this.Response.Redirect("~/About.aspx");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18331483Di2015UniqueSeparatorZevUser.GetById()
18331483Di2015UniqueSeparatorZevUser.GetBySessionId()
18331484Di2015UniqueSeparatorregions.Where(x => addresses.Any(addr => addr.Region == x.RegionName));Di2015NewLine//.ToList() or .Any();Di2015NewLine
18331577Di2015UniqueSeparatorShowDialog
18331577Di2015UniqueSeparatorShowFormParameter
18331577Di2015UniqueSeparatorpublic bool ShowFormParameter(IWin32Window parent)Di2015NewLine{Di2015NewLine   // This creates (and automatically disposes of) a new instance of your dialog.Di2015NewLine   // NOTE: ParameterDialog should be the name of your form class.Di2015NewLine   using (ParameterDialog dlg = new ParameterDialog())Di2015NewLine   {Di2015NewLine       // Call the ShowDialog member function to display the dialog.Di2015NewLine       if (dlg.ShowDialog(parent) == DialogResult.OK)Di2015NewLine       {Di2015NewLine           // If the user clicked OK when closing the dialog, we want toDi2015NewLine           // save its settings and update the display.Di2015NewLine           //Di2015NewLine           // You need to write code here to save the settings.Di2015NewLine           // It appears the caller (menuItem7_Click) is updating the display.Di2015NewLine           ... Di2015NewLineDi2015NewLine           return true;               Di2015NewLine       }Di2015NewLine   }Di2015NewLine   return false;  // the user canceled the dialog, so don't save anythingDi2015NewLine}Di2015NewLine
18331605Di2015UniqueSeparator[HttpGet]     Di2015NewLinepublic Object GetPatients(String team)Di2015NewLine{Di2015NewLine // return the patientsDi2015NewLine}Di2015NewLine
18331605Di2015UniqueSeparatorself.searchPatients = function () {Di2015NewLine    $.getJSON("/api/API/GetPatients", { team: self.selectedTeam() }, function (data) {Di2015NewLine        ko.mapping.fromJS(data, {}, self.patients);Di2015NewLine    });Di2015NewLine};Di2015NewLine
18331605Di2015UniqueSeparator self.selectedTeam() // returns the value of the observable.Di2015NewLine
18331639Di2015UniqueSeparatorlvTwoOrMoreOptions.SelectedItems
18331639Di2015UniqueSeparatorlvTwoOrMoreOptions.SelectedItems[0].SubItems[0]
18331702Di2015UniqueSeparatorIComparable
18331702Di2015UniqueSeparatorIComparable<>
18331702Di2015UniqueSeparatorvar OrderByOptions = (from p in typeof(Project).GetProperties()Di2015NewLine                      let type = p.PropertyTypeDi2015NewLine                      where typeof(IComparable).IsAssignableFrom(type) || Di2015NewLine                            typeof(IComparable<>).MakeGenericType(type).IsAssignableFrom(type)Di2015NewLine                      select p.Name).ToArray();Di2015NewLine
18331702Di2015UniqueSeparatorIComparable
18331702Di2015UniqueSeparatorIComparable<T>
18331702Di2015UniqueSeparatorbool b1 = typeof(IComparable).IsAssignableFrom(typeof(int?));Di2015NewLinebool b2 = typeof(IComparable<int?>).IsAssignableFrom(typeof(int?));Di2015NewLine
18331702Di2015UniqueSeparatorpublic static readonly HashSet<Type> ComparableTypes = new HashSet<Type>Di2015NewLine{Di2015NewLine    typeof(bool), typeof(bool?),Di2015NewLine    typeof(char), typeof(char?),Di2015NewLine    typeof(string),Di2015NewLine    typeof(sbyte), typeof(sbyte?), typeof(byte), typeof(byte?),Di2015NewLine    typeof(short), typeof(short?), typeof(ushort), typeof(ushort?),Di2015NewLine    typeof(int), typeof(int?), typeof(uint), typeof(uint?),Di2015NewLine    typeof(long), typeof(long?), typeof(ulong), typeof(ulong?),Di2015NewLine    typeof(float), typeof(float?),Di2015NewLine    typeof(double), typeof(double?),Di2015NewLine    typeof(decimal), typeof(decimal?),Di2015NewLine    typeof(DateTime), typeof(DateTime?),Di2015NewLine    typeof(DateTimeOffset), typeof(DateTimeOffset?),                Di2015NewLine    typeof(TimeSpan), typeof(TimeSpan?),Di2015NewLine    typeof(Guid), typeof(Guid?),Di2015NewLine};Di2015NewLineDi2015NewLinevar OrderByOptions = (from p in typeof(Project).GetProperties()Di2015NewLine                      let type = p.PropertyTypeDi2015NewLine                      where ComparableTypes.Contains(type)Di2015NewLine                      select p.Name).ToArray();Di2015NewLine
18331882Di2015UniqueSeparatorint i = RbList.SelectedIndex;Di2015NewLineif (i == 0)Di2015NewLine   {Di2015NewLinelbltest.Text = "You have click on male";Di2015NewLine    }Di2015NewLineelse if (i == 1)Di2015NewLine{ lbltest.Text = "You have click on female"; }Di2015NewLine
18331920Di2015UniqueSeparatorWM_KEYDOWN
18331988Di2015UniqueSeparator<input type="text" name="Child1_Name" />Di2015NewLine
18331988Di2015UniqueSeparatorChild1.Name
18331988Di2015UniqueSeparatorParentModel
18331988Di2015UniqueSeparatorChild1.Name
18332017Di2015UniqueSeparatorvar ztotal = (from z in context.TransactionsDi2015NewLinewhere z.ZTotaled == nullDi2015NewLineselect new { z.NumerPeople, z.PricePaid, z.ZTotaled, z.DateTime }).ToList(); Di2015NewLineDi2015NewLineDi2015NewLinevar ztotal2 = from z in ztotalDi2015NewLinewhere z.ZTotaled == null && z.DateTime.Hour == 18 && z.DateTime.Minute < 30Di2015NewLineselect new { z.NumerPeople, z.PricePaid };Di2015NewLineDi2015NewLineDi2015NewLinetotalPeople = ztotal2.Sum(o => o.NumerPeople);Di2015NewLinetotalPaid = ztotal2.Sum(o => o.PricePaid);Di2015NewLineDi2015NewLineDi2015NewLinesb2.Append(string.Format("{0}{1,10}{2,16}", "18.00 - 18.30", totalPeople.ToString(),      totalPaid.ToString()) + Environment.NewLine);Di2015NewLine
18332021Di2015UniqueSeparatormessage.DeliveryNotificationOptions = System.Net.Mail.DeliveryNotificationOptions.OnSuccess;Di2015NewLine
18332358Di2015UniqueSeparator<Grid>Di2015NewLine  <ContentControl Content="{Binding CurrentView}"/>Di2015NewLine</Grid>Di2015NewLine
18332495Di2015UniqueSeparatorpublic static class myMethodsDi2015NewLine{Di2015NewLine    public static string getName(){  Di2015NewLine      string name = "";  Di2015NewLine      ConnectionStringSettings myConnectionString = ConfigurationManager.ConnectionStrings["LibrarySystem.Properties.Settings.LibraryConnectionString"];Di2015NewLine      using (SqlConnection myDatabaseConnection = new SqlConnection(myConnectionString.ConnectionString))Di2015NewLine      {Di2015NewLine        myDatabaseConnection.Open();Di2015NewLine        using (SqlCommand mySqlCommand = new SqlCommand("select Top 1 * from Setting Order By SettingID Desc", myDatabaseConnection))Di2015NewLine        using (SqlDataReader sqlreader = mySqlCommand.ExecuteReader())Di2015NewLine        {Di2015NewLine            if (sqlreader.Read())Di2015NewLine            {Di2015NewLine                name = sqlreader["Name"].ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLine      }Di2015NewLine      return name;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineForm:Di2015NewLineprivate void Button1_Click(object sender, EventArgs e)Di2015NewLine{     Di2015NewLine    textBox1.Text = myMethods.getName();Di2015NewLine}Di2015NewLine
18332495Di2015UniqueSeparatorpublic static class myMethodsDi2015NewLine{Di2015NewLine    public static void getName(out string name){  Di2015NewLine      //.....Di2015NewLine    }Di2015NewLine}Di2015NewLineprivate void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string name;Di2015NewLine    myMethods.getName(out name);Di2015NewLine    textBox1.Text = name;Di2015NewLine}Di2015NewLine
18332608Di2015UniqueSeparatorsharpUserX.Size = sharpUserSizeDi2015NewLinePnlSharpUsers.Controls.Add(sharpUserX)Di2015NewLinesharpUserX.Location = pnlAddBtn.LocationDi2015NewLine
18332883Di2015UniqueSeparator// instances of this type user should edit in data gridDi2015NewLinepublic class Item : IEditableObjectDi2015NewLine{Di2015NewLine    // the item identifierDi2015NewLine    public int Id { get; set; }Di2015NewLineDi2015NewLine    // some data-bound propertiesDi2015NewLineDi2015NewLine    #region IEditableObject MembersDi2015NewLineDi2015NewLine    public void BeginEdit()Di2015NewLine    {            Di2015NewLine    }Di2015NewLineDi2015NewLine    public void CancelEdit()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public void EndEdit()Di2015NewLine    {Di2015NewLine        // new items has identifier, set to 0Di2015NewLine        if (Id == 0)Di2015NewLine        {Di2015NewLine            // post changes hereDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLine
18332883Di2015UniqueSeparatorDataGrid
18332883Di2015UniqueSeparatorIEditableObject
18332904Di2015UniqueSeparatortry {Di2015NewLine    somethingThatShouldThrowAnAcception();Di2015NewLine    Assert.Fail(); // If it gets to this line, no exception was thrownDi2015NewLine} catch (GoodException) { }Di2015NewLine
18332904Di2015UniqueSeparator} catch (GoodException) {Di2015NewLine} catch (Exception) {Di2015NewLine    // don't want this exceptionDi2015NewLine    Assert.Fail();Di2015NewLine}Di2015NewLine
18332904Di2015UniqueSeparatortry {Di2015NewLine    somethingThatShouldThrowAnAcception();Di2015NewLine    Assert.Fail();Di2015NewLine} catch (Exception) { }Di2015NewLine
18332904Di2015UniqueSeparatortry {Di2015NewLine    somethingThatShouldThrowAnAcception();Di2015NewLine    Assert.Fail("no exception thrown");Di2015NewLine} catch (Exception ex) {Di2015NewLine    Assert.IsTrue(ex is SpecificExceptionType);Di2015NewLine}Di2015NewLine
18332923Di2015UniqueSeparatormain
18332923Di2015UniqueSeparator     Application.EnableVisualStyles();Di2015NewLine     Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine     Application.Run(new Form1());Di2015NewLine
18332923Di2015UniqueSeparatorForm frm = new Form();// Creating a formDi2015NewLinefrm.Show();// displaying the formDi2015NewLine
18332923Di2015UniqueSeparatorShowDialog
18332923Di2015UniqueSeparatorshow
18333092Di2015UniqueSeparatorSession["confirmBooking"] = "confirm";Di2015NewLineSession["totalBooking"] = calculateTextBox.Text;Di2015NewLineResponse.Redirect("RoomBookingMain.aspx");Di2015NewLine
18333160Di2015UniqueSeparatorMaybe
18333307Di2015UniqueSeparatorSelect
18333307Di2015UniqueSeparatorFirst()
18333307Di2015UniqueSeparatorreturn _session.Query<Data.Model.User>()Di2015NewLine               .Where(x => x.Username == username)Di2015NewLine               .Select(_userMapper.CreateUser)Di2015NewLine               .First();Di2015NewLine
18333307Di2015UniqueSeparatorreturn _session.Query<Data.Model.User>()Di2015NewLine               .Select(_userMapper.CreateUser)Di2015NewLine               .First(x => x.Username == username);Di2015NewLine
18333333Di2015UniqueSeparatorList<Action> actions = new List<Action>();Di2015NewLineDi2015NewLineforeach(var yIndex in yRange)Di2015NewLine  foreach(var xIndex in xRange)Di2015NewLine    actions.Add(() => someAction(yIndex));Di2015NewLineDi2015NewLineParallel.Invoke(actions.ToArray());Di2015NewLine
18333339Di2015UniqueSeparatorDistincyBy
18333452Di2015UniqueSeparator@Resources.ResourceManager.GetString(Model.Title)Di2015NewLine
18333452Di2015UniqueSeparatorCultureInfo
18333452Di2015UniqueSeparatorThread.CurrentThread.CurrentUICulture
18333601Di2015UniqueSeparatordynamic
18333601Di2015UniqueSeparatordynamic dynObj = JsonConvert.DeserializeObject(json); Di2015NewLineConsole.WriteLine(dynObj.users[0].location);Di2015NewLine
18333690Di2015UniqueSeparatorprivate int entered = 0;Di2015NewLine
18333690Di2015UniqueSeparatorif (Interlocked.Increment(ref entered) != 1)Di2015NewLine{Di2015NewLine    return;Di2015NewLine}Di2015NewLine
18333690Di2015UniqueSeparatorentered
18333690Di2015UniqueSeparatorentered
18333690Di2015UniqueSeparatorInterlocked.Exchange(ref entered, 0);Di2015NewLine
18333690Di2015UniqueSeparatorlock
18333690Di2015UniqueSeparatorMonitor.*
18333690Di2015UniqueSeparatorawait
18333690Di2015UniqueSeparatorInterlocked.CompareExchange()
18333690Di2015UniqueSeparatorif (Interlocked.CompareExchange(ref entered, 1, 0) != 0)Di2015NewLine{Di2015NewLine    return;Di2015NewLine}Di2015NewLine
18333690Di2015UniqueSeparatorCompareExchange
18333830Di2015UniqueSeparatorProcess.StartWithCreateProcess(ProcessStartInfo startInfo)
18333830Di2015UniqueSeparatornum2
18333830Di2015UniqueSeparatordwCreationFlags
18333830Di2015UniqueSeparatorStartWithCreateProcess
18333830Di2015UniqueSeparatorCREATE_NO_WINDOW
18333830Di2015UniqueSeparatorCreateNoWindow
18333830Di2015UniqueSeparatorCREATE_UNICODE_ENVIRONMENT
18333942Di2015UniqueSeparatorforeach (var task in project.tasks)Di2015NewLine{Di2015NewLine    // do some stuffDi2015NewLine}Di2015NewLine
18333942Di2015UniqueSeparatorforeach (var task in project.tasks.Where(t => t.id == "-1"))Di2015NewLine{Di2015NewLine    // do some stuffDi2015NewLine}Di2015NewLine
18333945Di2015UniqueSeparator<Payload Name="de\\CustomUi.resources.dll" SourceFile="Lib\\de\\CustomUi.resources.dll"/>
18333982Di2015UniqueSeparatorFEATURE_BROWSER_EMULATION
18333982Di2015UniqueSeparatorprivate void SetBrowserFeatureControlKey(string feature, string appName, uint value)Di2015NewLine{Di2015NewLine    using (var key = Registry.CurrentUser.CreateSubKey(Di2015NewLine        String.Concat(@"Software\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\", feature), Di2015NewLine        RegistryKeyPermissionCheck.ReadWriteSubTree))Di2015NewLine    {Di2015NewLine        key.SetValue(appName, (UInt32)value, RegistryValueKind.DWord);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18333982Di2015UniqueSeparatorprivate void SetBrowserFeatureControl()Di2015NewLine{Di2015NewLine    // http://msdn.microsoft.com/en-us/library/ee330720(v=vs.85).aspxDi2015NewLineDi2015NewLine    // FeatureControl settings are per-processDi2015NewLine    var fileName = System.IO.Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName);Di2015NewLineDi2015NewLine    // make the control is not running inside Visual Studio DesignerDi2015NewLine    if (String.Compare(fileName, "devenv.exe", true) == 0 || String.Compare(fileName, "XDesProc.exe", true) == 0) Di2015NewLine        return;Di2015NewLineDi2015NewLine    SetBrowserFeatureControlKey("FEATURE_BROWSER_EMULATION", fileName, GetBrowserEmulationMode()); // Webpages containing standards-based !DOCTYPE directives are displayed in IE10 Standards mode.Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_AJAX_CONNECTIONEVENTS", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_ENABLE_CLIPCHILDREN_OPTIMIZATION", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_MANAGE_SCRIPT_CIRCULAR_REFS", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_DOMSTORAGE ", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_GPU_RENDERING ", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_IVIEWOBJECTDRAW_DMLT9_WITH_GDI  ", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_NINPUT_LEGACYMODE", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_DISABLE_LEGACY_COMPRESSION", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_LOCALMACHINE_LOCKDOWN", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_BLOCK_LMZ_OBJECT", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_BLOCK_LMZ_SCRIPT", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_DISABLE_NAVIGATION_SOUNDS", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_SCRIPTURL_MITIGATION", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_SPELLCHECKING", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_STATUS_BAR_THROTTLING", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_TABBED_BROWSING", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_VALIDATE_NAVIGATE_URL", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_WEBOC_DOCUMENT_ZOOM", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_WEBOC_POPUPMANAGEMENT", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_WEBOC_MOVESIZECHILD", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_ADDON_MANAGEMENT", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_WEBSOCKET", fileName, 1);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_WINDOW_RESTRICTIONS ", fileName, 0);Di2015NewLine    SetBrowserFeatureControlKey("FEATURE_XMLHTTP", fileName, 1);Di2015NewLine}Di2015NewLineDi2015NewLineprivate UInt32 GetBrowserEmulationMode()Di2015NewLine{Di2015NewLine    int browserVersion = 7;Di2015NewLine    using (var ieKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\\Microsoft\\Internet Explorer",Di2015NewLine        RegistryKeyPermissionCheck.ReadSubTree,Di2015NewLine        System.Security.AccessControl.RegistryRights.QueryValues))Di2015NewLine    {Di2015NewLine        var version = ieKey.GetValue("svcVersion");Di2015NewLine        if (null == version)Di2015NewLine        {Di2015NewLine            version = ieKey.GetValue("Version");Di2015NewLine            if (null == version)Di2015NewLine                throw new ApplicationException("Microsoft Internet Explorer is required!");Di2015NewLine        }Di2015NewLine        int.TryParse(version.ToString().Split('.')[0], out browserVersion);Di2015NewLine    }Di2015NewLineDi2015NewLine    UInt32 mode = 10000; // Internet Explorer 10. Webpages containing standards-based !DOCTYPE directives are displayed in IE10 Standards mode. Default value for Internet Explorer 10.Di2015NewLine    switch (browserVersion)Di2015NewLine    {Di2015NewLine        case 7:Di2015NewLine            mode = 7000; // Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode. Default value for applications hosting the WebBrowser Control.Di2015NewLine            break;Di2015NewLine        case 8:Di2015NewLine            mode = 8000; // Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode. Default value for Internet Explorer 8Di2015NewLine            break;Di2015NewLine        case 9:Di2015NewLine            mode = 9000; // Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode. Default value for Internet Explorer 9.Di2015NewLine            break;Di2015NewLine        default:Di2015NewLine            // use IE10 mode by defaultDi2015NewLine            break;Di2015NewLine    }Di2015NewLineDi2015NewLine    return mode;Di2015NewLine}Di2015NewLine
18333982Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    SetBrowserFeatureControl();Di2015NewLineDi2015NewLine    InitializeComponent();Di2015NewLine//...Di2015NewLine}Di2015NewLine
18334051Di2015UniqueSeparatorpublic static string ReplaceAll(string source, string word)Di2015NewLine{Di2015NewLine    string pattern = @"\\b" + Regex.Escape(word) + @"\\b";Di2015NewLine    var rx = new Regex(pattern, RegexOptions.IgnoreCase);Di2015NewLine    return rx.Replace(source, "<span class='highlight'>$0</span>");Di2015NewLine}Di2015NewLine
18334339Di2015UniqueSeparatorUserControl
18334339Di2015UniqueSeparatorprivate
18334339Di2015UniqueSeparatorDependencyProperty
18334339Di2015UniqueSeparatorpublic
18334339Di2015UniqueSeparatorRead Only DependencyProperty
18334339Di2015UniqueSeparatorprivate
18334339Di2015UniqueSeparatorDependencyPropertyKey
18334339Di2015UniqueSeparatorprivate static readonly DependencyPropertyKey ComboBoxVisiblityPropertyKeyDi2015NewLine    = DependencyProperty.RegisterReadOnly("ComboBoxVisiblity", typeof(int), Di2015NewLine    typeof(SearchUserControl), new PropertyMetadata(Visibility.Collapsed));Di2015NewLineDi2015NewLinepublic static readonly DependencyProperty ComboBoxVisiblityPropertyDi2015NewLine    = ComboBoxVisiblityPropertyKey.DependencyProperty;Di2015NewLineDi2015NewLinepublic int ComboBoxVisiblityDi2015NewLine{Di2015NewLine    get { return (int)GetValue(ComboBoxVisiblityProperty); }Di2015NewLine    protected set { SetValue(ComboBoxVisiblityPropertyKey, value); }Di2015NewLine}Di2015NewLine
18334339Di2015UniqueSeparatorVisibility
18334339Di2015UniqueSeparatorbool
18334339Di2015UniqueSeparatorBoolToVisibilityConverter
18334505Di2015UniqueSeparatorfor(int i = 1; i <= count; i++)Di2015NewLine{Di2015NewLine    //do something with iDi2015NewLine}Di2015NewLine
18334505Di2015UniqueSeparatorfor
18334505Di2015UniqueSeparatori
18334505Di2015UniqueSeparatori
18334505Di2015UniqueSeparatori <= count
18334505Di2015UniqueSeparatori
18334505Di2015UniqueSeparatorcount
18334505Di2015UniqueSeparatori
18334505Di2015UniqueSeparatori++
18334505Di2015UniqueSeparatori++
18334505Di2015UniqueSeparatori <= count
18334518Di2015UniqueSeparatorrequiredLoanType.Enabled = false/true;Di2015NewLine
18334518Di2015UniqueSeparatorvar validator = document.getElementById("<%=requiredLoanType.ClientID %>");Di2015NewLineValidatorEnable(validator, true/false); Di2015NewLine
18334761Di2015UniqueSeparatorpublic string HOLD { get; set; }Di2015NewLine
18334761Di2015UniqueSeparatorMap(m => m.HOLD).Name("Hold").Default(1);Di2015NewLine
18334761Di2015UniqueSeparatorshort
18334761Di2015UniqueSeparator"1"
18334761Di2015UniqueSeparatorshort
18334896Di2015UniqueSeparatorIQueryable<MyClass>
18334896Di2015UniqueSeparatorobject
18334898Di2015UniqueSeparatorHeight
18334898Di2015UniqueSeparatorWidth
18334898Di2015UniqueSeparatorHeight
18334898Di2015UniqueSeparatorWidth
18334898Di2015UniqueSeparator<UserControl x:Class="X.UserControl1"Di2015NewLine         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine         xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine         mc:Ignorable="d" />Di2015NewLine    <!-- Your Code -->         Di2015NewLine</UserControl>Di2015NewLine
18334994Di2015UniqueSeparatordr.GetValue(0)
18334994Di2015UniqueSeparatorstring insertstring = @"insert into configtest valuesDi2015NewLine     (" + dr.GetValue(0) + ",'"Di2015NewLine         + dr.GetValue(1) +  "')";Di2015NewLine
18334994Di2015UniqueSeparatordr.GetValue(0)
18334994Di2015UniqueSeparatorstring insertstring = @"insert into configtest valuesDi2015NewLine         (" + (dr.GetValue(0) == null ? System.Data.SqlTypes.SqlInt32.Null : dr.GetValue(0)) + ",'"Di2015NewLine            + (dr.GetValue(1) == null ? string.Empty : dr.GetValue(1)) +  "')";Di2015NewLine
18335412Di2015UniqueSeparator.Where(x => !Regex.IsMatch(x, "[\\r\\n]+"))Di2015NewLine
18335412Di2015UniqueSeparatortry..catch
18335466Di2015UniqueSeparatorstring specialCharacters = @"\\~|!|\\@|\\#|\\$|%|\\^|\\&|\\*|_|\\+|\\||\\{|\\}|:\\""|\\<|\\>|\\?|\\[|\\]|;|'|/|=|\\\\|â";Di2015NewLineDi2015NewLinepublic bool ValidateCharacters(string pattern, AddressViewModel model)Di2015NewLine{Di2015NewLine    var reg = new Regex(pattern);Di2015NewLineDi2015NewLine    return reg.IsMatch(model.Index) == false && reg.IsMatch(model.Area) == false;Di2015NewLine}Di2015NewLine
18335485Di2015UniqueSeparatorBrush
18335485Di2015UniqueSeparatorBorder
18335485Di2015UniqueSeparatorSolidColorBrush
18335485Di2015UniqueSeparatorBackground
18335485Di2015UniqueSeparatorOpacityMask
18335485Di2015UniqueSeparatorImage
18335485Di2015UniqueSeparatorOpacityMask
18335555Di2015UniqueSeparatorProject
18335555Di2015UniqueSeparatorProjectItems
18335555Di2015UniqueSeparatorProjectItem
18335555Di2015UniqueSeparatorFileCodeModel
18335555Di2015UniqueSeparatorCodeElements
18335555Di2015UniqueSeparatorKind
18335555Di2015UniqueSeparator= vsCMElementInterface
18335555Di2015UniqueSeparator// Container for resultsDi2015NewLineList<string> classes = new List<string> ();Di2015NewLineList<string> interfaces = new List<string> ();Di2015NewLineDi2015NewLine// Get selected projects from solution explorerDi2015NewLineArray projects = (Array)_applicationObject.ActiveSolutionProjects;Di2015NewLineDi2015NewLine// Get all ProjectItems inside of the selected ProjectsDi2015NewLinevar projectItems = projectsDi2015NewLine    .OfType<Project> ()Di2015NewLine    .Where ( p => p.ProjectItems != null )Di2015NewLine    .SelectMany ( p => p.ProjectItems.OfType<ProjectItem> ().Where ( pi => pi.FileCodeModel != null ) );Di2015NewLineDi2015NewLine// Iterate over all of these ProjectItems Di2015NewLineforeach ( ProjectItem projectItem in projectItems )Di2015NewLine{Di2015NewLine    // Get all of the CodeElements (Interfaces and Classes) inside of the current ProjectItem (recursively)Di2015NewLine    var elements = projectItem.FileCodeModel.CodeElementsDi2015NewLine        .OfType<CodeElement> ()Di2015NewLine        .SelectMany ( ce => this.GetCodeElements ( ce ) );Di2015NewLineDi2015NewLine    // Do something with the CodeElements that were foundDi2015NewLine    classes.AddRange ( elements.Where ( el => el.Kind == vsCMElement.vsCMElementClass ).Select ( el => el.Name ) );Di2015NewLine    interfaces.AddRange ( elements.Where ( el => el.Kind == vsCMElement.vsCMElementInterface).Select ( el => el.Name ) );Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine// Possible implementation of GetCodeElements:Di2015NewLineprivate IEnumerable<CodeElement> GetCodeElements ( CodeElement root )Di2015NewLine{Di2015NewLine    List<CodeElement> result = new List<CodeElement> ();Di2015NewLine    if ( root == null )Di2015NewLine        return result;Di2015NewLineDi2015NewLine    // If the current CodeElement is an Interface or a class, add it to the resultsDi2015NewLine    if ( root.Kind == vsCMElement.vsCMElementClass || root.Kind == vsCMElement.vsCMElementInterface )Di2015NewLine    {Di2015NewLine        result.Add ( root );Di2015NewLine    }Di2015NewLineDi2015NewLine    // Check children recursivelyDi2015NewLine    if ( root.Children != null && root.Children.Count > 0 )Di2015NewLine    {Di2015NewLine        foreach ( var item in root.Children.OfType<CodeElement> () )Di2015NewLine        {Di2015NewLine            result.AddRange ( this.GetCodeElements ( item ) );Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18335577Di2015UniqueSeparatorchar
18335577Di2015UniqueSeparator+
18335577Di2015UniqueSeparatora
18335577Di2015UniqueSeparatorb
18335577Di2015UniqueSeparatora+b
18335577Di2015UniqueSeparatorint
18335577Di2015UniqueSeparator+
18335577Di2015UniqueSeparatorstring.Format
18335577Di2015UniqueSeparatorstring res = string.Format("{0}{1}", charA, charB);Di2015NewLine
18335731Di2015UniqueSeparatorSystem.Environment.GetFolderPath
18335731Di2015UniqueSeparatorSpecialFolder.ApplicationData
18335731Di2015UniqueSeparatorSpecialFolder.CommonApplicationData
18335747Di2015UniqueSeparatorb.cBestellNr = '718'
18335747Di2015UniqueSeparatorvar result = from l in context.tLieferscheinDi2015NewLine   join b in context.tbestellung on l.kBestellung equals b.kBestellungDi2015NewLine   join k in context.tkunde on b.tKunde_kKunde equals k.kKundeDi2015NewLine   where b.nStorno == 0 && (from x in context.tLieferscheinPos join y in context.tbestellpos on x.kBestellPos equals y.kBestellPos && x.kLieferschein equals l.kLieferschein select new {x, y}).Count() > 0Di2015NewLine   && b.cBestellNr == 718Di2015NewLine   orderby l.dErstellt descendingDi2015NewLine   select new {l, b, k};Di2015NewLine
18335747Di2015UniqueSeparator(from x in context.tLieferscheinPos join y in context.tbestellpos Di2015NewLine on x.kBestellPos.GetValueOrDefault(0) equals Convert.ToInt32(y.kBestellPos) && x.kLieferschein equals l.kLieferscheinDi2015NewLine select new {x, y}).Count() > 0Di2015NewLine
18335783Di2015UniqueSeparatorif(di.Exists)Di2015NewLine
18335831Di2015UniqueSeparator        var c2Items = new c2[] Di2015NewLine        {Di2015NewLine            new c2 { st1 = "value 1", str2 = "value 2" },Di2015NewLine            new c2 { st1 = "value 2", str2 = "value 1" },Di2015NewLine            new c2 { st1 = "value 1", str2 = "value 2" }Di2015NewLine        };Di2015NewLineDi2015NewLine        var parent = new cl() { c2List = new List<c2>(c2Items) };Di2015NewLineDi2015NewLine        IEnumerable<c2> distinctitems = Di2015NewLine            parentDi2015NewLine                .c2ListDi2015NewLine                .GroupBy(o => new { o.st1, o.str2 })Di2015NewLine                .Select(o => o.First());Di2015NewLine
18335870Di2015UniqueSeparatorstring MyNumberPhone = "060000000000";Di2015NewLineDi2015NewLinePhoneCallTask phoneCallTask = new PhoneCallTask();Di2015NewLinephoneCallTask.PhoneNumber = MyNumberPhone ;Di2015NewLinephoneCallTask.DisplayName = "UserName";Di2015NewLinephoneCallTask.Show();Di2015NewLine
18335900Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Write("0.bin");Di2015NewLine    Write("1.bin");Di2015NewLine    Write("2.bin");Di2015NewLineDi2015NewLine    ReadAllFile("2.bin"); // warmupDi2015NewLineDi2015NewLine    var sw = new Stopwatch();Di2015NewLine    sw.Start();Di2015NewLine    ReadAllFile("0.bin");Di2015NewLine    ReadAllFile("1.bin");Di2015NewLine    ReadAllFile("2.bin");Di2015NewLine    sw.Stop();Di2015NewLineDi2015NewLine    Console.WriteLine("Sync: " + sw.Elapsed);Di2015NewLineDi2015NewLine    ReadAllFileAsync("2.bin").Wait(); // warmupDi2015NewLineDi2015NewLine    sw.Restart();Di2015NewLine    ReadAllFileAsync("0.bin").Wait();Di2015NewLine    ReadAllFileAsync("1.bin").Wait();Di2015NewLine    ReadAllFileAsync("2.bin").Wait();Di2015NewLine    sw.Stop();Di2015NewLineDi2015NewLine    Console.WriteLine("Async: " + sw.Elapsed);Di2015NewLineDi2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLineDi2015NewLinestatic void ReadAllFile(string filename)Di2015NewLine{Di2015NewLine    using (var file = new FileStream(filename, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, false))Di2015NewLine    {Di2015NewLine        byte[] buff = new byte[file.Length];Di2015NewLine        file.Read(buff, 0, (int)file.Length);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic async Task ReadAllFileAsync(string filename)Di2015NewLine{Di2015NewLine    using (var file = new FileStream(filename, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, true))Di2015NewLine    {Di2015NewLine        byte[] buff = new byte[file.Length];Di2015NewLine        await file.ReadAsync(buff, 0, (int)file.Length);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Write(string filename)Di2015NewLine{Di2015NewLine    int size = 1024 * 1024 * 256;Di2015NewLine    var data = new byte[size];Di2015NewLine    var random = new Random();Di2015NewLine    random.NextBytes(data);Di2015NewLine    File.WriteAllBytes(filename, data);Di2015NewLine}Di2015NewLine
18335900Di2015UniqueSeparatorSync: 00:00:00.4461936Di2015NewLineAsync: 00:00:00.4429566Di2015NewLine
18335919Di2015UniqueSeparatorfirstList.All(x=>secondList.Contains(x));Di2015NewLine
18335919Di2015UniqueSeparatorfirstList.All(secondList.Contains)Di2015NewLine
18335919Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
18335919Di2015UniqueSeparatorContains
18335919Di2015UniqueSeparatorAll
18336123Di2015UniqueSeparatorPlacementTarget
18336123Di2015UniqueSeparatorContextMenu
18336123Di2015UniqueSeparatorif (element.ContextMenu != null )Di2015NewLine{Di2015NewLine    element.ContextMenu.PlacementTarget = element;Di2015NewLine    element.ContextMenu.IsOpen = true;Di2015NewLine}Di2015NewLine
18336123Di2015UniqueSeparatorContextMenu
18336123Di2015UniqueSeparatorContextMenu.HorizontalOffset
18336123Di2015UniqueSeparatorContextMenu.HorizontalOffset
18336295Di2015UniqueSeparatorTreeView
18336295Di2015UniqueSeparatorprivate void SetSelectedItem()Di2015NewLine{Di2015NewLine     MainWindowViewModel.SelectedItem = TreeOne.SelectedItem;Di2015NewLine}Di2015NewLine
18336295Di2015UniqueSeparatorprivate void TreeOne_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)Di2015NewLine{Di2015NewLine    SetSelectedItem();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void TreeOne_MouseRightButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    SetSelectedItem();Di2015NewLine}Di2015NewLine
18336494Di2015UniqueSeparatornamespace myParserDi2015NewLine{Di2015NewLinepublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    string filePath;Di2015NewLine    string[] files;Di2015NewLine    int fileCount = 0;Di2015NewLine    int numberOfFiles;Di2015NewLine    int lineCount = 0;Di2015NewLine    int numberOfLines;Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        pbFilesProcessed.Visible = false;Di2015NewLine        pbLinesProcessed.Visible = false;Di2015NewLine        btnParse.Visible = false;Di2015NewLine        lbProcessedFiles.Visible = false;Di2015NewLine        lbProcessedLines.Visible = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnOpen_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DialogResult result = folderBrowserDialog1.ShowDialog();Di2015NewLine        if (result == DialogResult.OK)Di2015NewLine        {Di2015NewLine            //counts the number of files in the folderDi2015NewLine            files = Directory.GetFiles(folderBrowserDialog1.SelectedPath);Di2015NewLineDi2015NewLine            filePath = folderBrowserDialog1.SelectedPath.ToString();Di2015NewLineDi2015NewLine            char[] delimiterChars = { '\\\\' };Di2015NewLine            string[] filePathParts = filePath.Split(delimiterChars);Di2015NewLineDi2015NewLine            string folder = filePathParts[4];Di2015NewLineDi2015NewLine            tbFolderName.Text = folder;Di2015NewLineDi2015NewLine            btnParse.Visible = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnParse_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        btnParse.Visible = false;Di2015NewLine        btnOpen.Visible = false;Di2015NewLineDi2015NewLine        lbProcessedFiles.Visible = true;Di2015NewLine        pbFilesProcessed.Visible = true;Di2015NewLine        lbProcessedLines.Visible = true;Di2015NewLine        pbLinesProcessed.Visible = true;Di2015NewLine        lbProcessedLines.Text = "Lines: 0 / 0";Di2015NewLineDi2015NewLine        pbFilesProcessed.Maximum = Convert.ToInt32(files.Length.ToString());Di2015NewLineDi2015NewLine        backgroundWorker1.RunWorkerAsync();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        foreach (var csvFile in Directory.GetFiles(folderBrowserDialog1.SelectedPath))Di2015NewLine        {Di2015NewLine            numberOfFiles = Convert.ToInt32(files.Length.ToString());Di2015NewLineDi2015NewLine            string fileName = "Waveforms.csv";Di2015NewLine            lineCount = 0;Di2015NewLine            string lines;Di2015NewLine            string newLines;Di2015NewLine            string csvFullFilePath = csvFile.ToString();Di2015NewLine            string[] filePathSplit = csvFullFilePath.Split('\\\\');Di2015NewLine            string pointName = filePathSplit[4].ToString();Di2015NewLine            string[] pathDirectionSplit = filePathSplit[5].ToString().Split('_');Di2015NewLine            string[] swingDirectionSplit = pathDirectionSplit[3].Split('.');Di2015NewLine            string swingDirection = swingDirectionSplit[0];Di2015NewLineDi2015NewLine            numberOfLines = File.ReadLines(csvFile).Count();Di2015NewLineDi2015NewLine            using (StreamReader r = new StreamReader(csvFile))Di2015NewLine            {Di2015NewLine                while ((lines = r.ReadLine()) != null)Di2015NewLine                {Di2015NewLine                    if (lineCount == 0)Di2015NewLine                    {Di2015NewLine                        lines.Remove(0);Di2015NewLine                        lineCount++;Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        newLines = Regex.Replace(lines, ",{2,}", ",").ToString();Di2015NewLine                        File.AppendAllText(@"Simulator\\\\" + fileName, pointName + "," + swingDirection + "," + newLines + System.Environment.NewLine);Di2015NewLine                        backgroundWorker1.ReportProgress(lineCount);Di2015NewLine                        lineCount++;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                r.Close();Di2015NewLine            }Di2015NewLine            backgroundWorker1.ReportProgress(fileCount);Di2015NewLine            fileCount++;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)Di2015NewLine    {Di2015NewLine        pbFilesProcessed.PerformStep();Di2015NewLine        lbProcessedFiles.Text = "Files: " + fileCount.ToString() + "/" + files.Length.ToString();Di2015NewLine        pbLinesProcessed.PerformStep();Di2015NewLine        lbProcessedLines.Text = "Lines: " + lineCount + "/" + Convert.ToInt32(numberOfLines.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        btnParse.Visible = false;Di2015NewLine        MessageBox.Show("Done");Di2015NewLine        btnOpen.Visible = true;Di2015NewLine    }  Di2015NewLine}Di2015NewLine
18336530Di2015UniqueSeparatorreturn letters.Any(c => c == 'a' || c == 'b' || c == 'c');Di2015NewLine
18336530Di2015UniqueSeparatorvar lettersToLookFor = "abc";Di2015NewLinereturn letters.Any(c => lettersToLookFor.Contains(c));Di2015NewLine
18336530Di2015UniqueSeparatorreturn letters.Any(lettersToLookFor.Contains);Di2015NewLine
18336734Di2015UniqueSeparatorpublic static byte[] Encrypt(byte[] data, byte[] key, byte[] iv)Di2015NewLine{Di2015NewLine    BufferedBlockCipher cipher = new CtsBlockCipher(new CbcBlockCipher(new AesEngine()));Di2015NewLine    ICipherParameters keyParam = new ParametersWithIV(new KeyParameter(key), iv);Di2015NewLine    cipher.Init(true, keyParam);Di2015NewLine    return cipher.DoFinal(data, 0, data.Length);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static byte[] Decrypt(byte[] data, byte[] key, byte[] iv)Di2015NewLine{Di2015NewLine    BufferedBlockCipher cipher = new CtsBlockCipher(new CbcBlockCipher(new AesEngine()));Di2015NewLine    ICipherParameters keyParam = new ParametersWithIV(new KeyParameter(key), iv);Di2015NewLine    cipher.Init(false, keyParam);Di2015NewLine    return cipher.DoFinal(data, 0, data.Length);Di2015NewLine}Di2015NewLine
18336768Di2015UniqueSeparatorpublic void CompareXml(string _feedList, string _feedRequest, string _resultPath)Di2015NewLine    {Di2015NewLine        FileInfo feedList = new FileInfo(_feedList);Di2015NewLine        FileInfo feedRequest = new FileInfo(_feedRequest);Di2015NewLineDi2015NewLine        // Load the documentsDi2015NewLine        XmlDocument feedListXmlDoc = new XmlDocument();Di2015NewLine        feedListXmlDoc.Load(_feedList);Di2015NewLineDi2015NewLine        // Load the documentsDi2015NewLine        XmlDocument feedRequestXmlDoc = new XmlDocument();Di2015NewLine        feedRequestXmlDoc.Load(_feedRequest);Di2015NewLineDi2015NewLine        // Define a single nodeDi2015NewLine        XmlNode feedListNode;Di2015NewLine        XmlNode feedRequestNode;Di2015NewLineDi2015NewLine        // Get the root Xml elementDi2015NewLine        XmlElement feedListRoot = feedListXmlDoc.DocumentElement;Di2015NewLine        XmlElement feedRequestRoot = feedRequestXmlDoc.DocumentElement;Di2015NewLineDi2015NewLine        // Get a list of feeds for the stored list and the requestDi2015NewLine        XmlNodeList feedListXml = feedListRoot.GetElementsByTagName("Feed");Di2015NewLine        XmlNodeList feedRequestXml = feedRequestRoot.GetElementsByTagName("Feed");Di2015NewLineDi2015NewLine        bool feedLocated = false;Di2015NewLine        int j = 0;Di2015NewLineDi2015NewLine        try Di2015NewLine        {Di2015NewLine            // loop through list of current feedsDi2015NewLine            for (int i = 0; i < feedListXml.Count; i++)Di2015NewLine            {Di2015NewLine                feedListNode = feedListXml.Item(i);Di2015NewLine                //create status attributeDi2015NewLine                XmlAttribute attr = feedListXmlDoc.CreateAttribute("status");Di2015NewLineDi2015NewLine                string feedListName = feedListNode.Attributes["name"].Value.ToString();Di2015NewLine                string feedListHash = feedListXml.Item(i).InnerText.ToString();Di2015NewLineDi2015NewLine                //check feed request list for a matchDi2015NewLine                while (j < feedRequestXml.Count && feedLocated == false)Di2015NewLine                {Di2015NewLine                    feedRequestNode = feedRequestXml.Item(j);Di2015NewLine                    string feedRequestName = feedRequestNode.Attributes["name"].Value.ToString();Di2015NewLineDi2015NewLine                    //checks to see if feed names matchDi2015NewLine                    if (feedRequestName == feedListName)Di2015NewLine                    {Di2015NewLine                        string feedRequestHash = feedRequestXml.Item(j).InnerText.ToString();Di2015NewLineDi2015NewLine                        //checks to see if hashCodes matchDi2015NewLine                        if (feedListHash == feedRequestHash)Di2015NewLine                        {Di2015NewLine                            //if name and code match, set status to okDi2015NewLine                            attr.Value = "ok";Di2015NewLineDi2015NewLine                            Debug.WriteLine(feedListName + " name and hash match. Status: 'ok'");Di2015NewLine                        }Di2015NewLine                        else Di2015NewLine                        {Di2015NewLine                            //if hashCodes don't match, set status attribute to updatedDi2015NewLine                            attr.Value = "updated";Di2015NewLineDi2015NewLine                            Debug.WriteLine(feedListName + " name matched but hash did not. Status: 'updated'");Di2015NewLine                        }Di2015NewLine                        feedListNode.Attributes.Append(attr);Di2015NewLine                        feedLocated = true;Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        //names didn't match, checking to see if we're at the end of  the request listDi2015NewLine                        if (j + 1 == feedRequestXml.Count)Di2015NewLine                        {Di2015NewLine                            //file name wasn't found in the request list, set status attribute to missingDi2015NewLine                            attr.Value = "missing";Di2015NewLine                            feedListNode.Attributes.Append(attr);Di2015NewLine                            feedLocated = true;Di2015NewLine                            j = 0;Di2015NewLineDi2015NewLine                            Debug.WriteLine("Reached the end of the file request list without a match. Status: 'missing'");Di2015NewLine                        }Di2015NewLine                        //file name wasn't located on this pass, move to next recordDi2015NewLine                        j++;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                feedLocated = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            Debug.WriteLine("Result file has been written out at " + _resultPath);Di2015NewLine        }Di2015NewLineDi2015NewLine        feedListXmlDoc.Save(_resultPath);Di2015NewLine    }Di2015NewLine
18336940Di2015UniqueSeparatorprivate const string UCFolderName = "~/Controls/";Di2015NewLine...    Di2015NewLinevar usercontrolA= Page.LoadControl(UCFolderName + "UsercontrolA.ascx");Di2015NewLineDi2015NewLineServercontrolContainer.Controls.Add(UsercontrolA);Di2015NewLine
18336940Di2015UniqueSeparatorServercontrolContainer
18336940Di2015UniqueSeparator.ascx
18336965Di2015UniqueSeparatorint?
18336965Di2015UniqueSeparator[Range(0, 999999, ErrorMessage = "category_id must be a valid number")]Di2015NewLinepublic int? category_id { get; set; }Di2015NewLineDi2015NewLine// when we pass a good numberDi2015NewLineMyAction?category_id=123Di2015NewLinevalidation: successfulDi2015NewLineDi2015NewLine// when we pass a bad numberDi2015NewLine// validation ignores it. not what we want. Di2015NewLineMyAction?category_id=abcDi2015NewLinevalidation: successfulDi2015NewLine
18336965Di2015UniqueSeparatorint
18336965Di2015UniqueSeparator[Range(0, 999999, ErrorMessage = "category_id must be a valid number")]Di2015NewLinepublic int? category_id { get; set; }Di2015NewLineDi2015NewLine// when we pass a good numberDi2015NewLineMyAction?category_id=123Di2015NewLinevalidation: successfulDi2015NewLineDi2015NewLine// when we pass an bad numberDi2015NewLineMyAction?category_id=abcDi2015NewLinevalidation: "category_id must be a valid number"Di2015NewLineDi2015NewLine// BUT, when we don't pass any number at all ... Di2015NewLineMyAction Di2015NewLinevalidation: "category_id must be a valid number"Di2015NewLine
18336965Di2015UniqueSeparatorstring
18336965Di2015UniqueSeparatorint
18336965Di2015UniqueSeparator[Range]
18336965Di2015UniqueSeparator[Range(0, 999999, ErrorMessage = "category_id must be a valid number")]Di2015NewLinepublic string category_id { get; set; }Di2015NewLineDi2015NewLine// when we pass a good numberDi2015NewLineMyAction?category_id=123Di2015NewLinevalidation: successfulDi2015NewLineDi2015NewLine// when we pass a bad numberDi2015NewLineMyAction?category_id=abcDi2015NewLinevalidation: "category_id must be a valid number"Di2015NewLineDi2015NewLine// no number, no validation. hooray!Di2015NewLineMyAction Di2015NewLinevalidation: successfulDi2015NewLine
18336999Di2015UniqueSeparatorExplicitColumns
18336999Di2015UniqueSeparatorResultColumn
18336999Di2015UniqueSeparatornamespace Site.Models {Di2015NewLine    [TableName("Hotel")]Di2015NewLine    [PrimaryKey("HotelID")]Di2015NewLine    [ExplicitColumns]Di2015NewLine    public class Hotel {Di2015NewLine        [PetaPoco.Column("HotelID")]Di2015NewLine        public int HotelID { get; set; }Di2015NewLineDi2015NewLine        [PetaPoco.Column("HotelClaseID")]Di2015NewLine        public int? HotelClaseID { get; set; }Di2015NewLineDi2015NewLine        [ResultColumn]Di2015NewLine        public string HotelClase { get; set; }Di2015NewLineDi2015NewLine        [PetaPoco.Column("Nombre")]Di2015NewLine        [Required(]Di2015NewLine        public String Nombre { get; set; }Di2015NewLineDi2015NewLine        ....Di2015NewLine
18337000Di2015UniqueSeparatorpooling=false
18337000Di2015UniqueSeparatorSqlConnection.Close()
18337040Di2015UniqueSeparatorpublic static class RetriesDi2015NewLine{Di2015NewLine    public enum ResultDi2015NewLine    {Di2015NewLine        Success,Di2015NewLine        Timeout, Di2015NewLine        Canceled,Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Task<Result> RetryUntilTimedOutOrCanceled(this Func<bool> func, CancellationToken cancel, TimeSpan timeOut)Di2015NewLine    {Di2015NewLine        return Task.Factory.StartNew(() =>Di2015NewLine        {Di2015NewLine            var start = DateTime.UtcNow;Di2015NewLine            var end = start + timeOut;Di2015NewLine            while (true)Di2015NewLine            {Di2015NewLine                var now = DateTime.UtcNow;Di2015NewLine                if (end < now)Di2015NewLine                    return Result.Timeout;Di2015NewLine                var curTimeOut = end - now;Di2015NewLine                Task<bool> curTask = null;Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    if (cancel.IsCancellationRequested)Di2015NewLine                        return Result.Canceled;Di2015NewLine                    curTask = Task.Factory.StartNew(func, cancel);Di2015NewLine                    curTask.Wait((int)curTimeOut.TotalMilliseconds, cancel);Di2015NewLine                    if (curTask.IsCanceled)Di2015NewLine                        return Result.Canceled;Di2015NewLine                    if (curTask.Result == true)Di2015NewLine                        return Result.Success;Di2015NewLine                }Di2015NewLine                catch (TimeoutException)Di2015NewLine                {Di2015NewLine                    return Result.Timeout;Di2015NewLine                }Di2015NewLine                catch (TaskCanceledException)Di2015NewLine                {Di2015NewLine                    return Result.Canceled;Di2015NewLine                }Di2015NewLine                catch (OperationCanceledException)Di2015NewLine                {Di2015NewLine                    return Result.Canceled;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine}Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var cancelSource = new CancellationTokenSource();Di2015NewLine        Func<bool> AllwaysFalse = () => false;Di2015NewLine        Func<bool> AllwaysTrue = () => true;Di2015NewLineDi2015NewLine        var result = AllwaysFalse.RetryUntilTimedOutOrCanceled(cancelSource.Token, TimeSpan.FromSeconds(3)).Result;Di2015NewLine        Console.WriteLine(result);Di2015NewLineDi2015NewLine        result = AllwaysTrue.RetryUntilTimedOutOrCanceled(cancelSource.Token, TimeSpan.FromSeconds(3)).Result;Di2015NewLine        Console.WriteLine(result);Di2015NewLineDi2015NewLine        var rTask = AllwaysFalse.RetryUntilTimedOutOrCanceled(cancelSource.Token, TimeSpan.FromSeconds(100));Di2015NewLine        System.Threading.Thread.Sleep(1000);Di2015NewLine        cancelSource.Cancel();Di2015NewLine        result = rTask.Result;Di2015NewLine        Console.WriteLine(result);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18337166Di2015UniqueSeparatorroutes.MapRoute("Product", "products/{productName}", Di2015NewLine    new {controller = "products", action="index"});Di2015NewLine
18337166Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic ActionResult Index(string productName) {Di2015NewLine    // Lookup product from DBDi2015NewLineDi2015NewLine    // do stuffDi2015NewLine    var viewModel = ...;Di2015NewLine    return View(viewModel);Di2015NewLine}Di2015NewLine
18337284Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class ValidationDi2015NewLine{Di2015NewLine    public static void ValidateName(this Person person)Di2015NewLine    {Di2015NewLine        if(person.Name.Contains("0", ..., "9"))Di2015NewLine            throw new Exception("Name can't contain numbers.")Di2015NewLine    }Di2015NewLine}Di2015NewLine
18337284Di2015UniqueSeparatorvar person = new Person() { Name = "Test123" };Di2015NewLineperson.ValidateName();Di2015NewLine
18337284Di2015UniqueSeparatorPeople
18337284Di2015UniqueSeparatorPerson
18337285Di2015UniqueSeparatorResources.resxDi2015NewLineResources.en.resxDi2015NewLineResources.fr.resxDi2015NewLineResources.fr-FR.resxDi2015NewLine
18337285Di2015UniqueSeparatorResources.resx
18337285Di2015UniqueSeparatorResources.fr.resx
18337285Di2015UniqueSeparatorResources.fr-FR.resx
18337285Di2015UniqueSeparatorfr-CA
18337285Di2015UniqueSeparatorResources.fr.resxDi2015NewLineResources.resxDi2015NewLine
18337363Di2015UniqueSeparatorAsEnumerable
18337363Di2015UniqueSeparatorIQueryable
18337363Di2015UniqueSeparatorField<T>
18337363Di2015UniqueSeparatorvar query = from l in DbConfig.Tables["table2"]Di2015NewLine            join s in DbConfig.Tables["table1"]Di2015NewLine            on l.Field<string>("itemB") equals s.Field<string>("item1")Di2015NewLine            where l.Field<string>("itemA") == nameDi2015NewLine            select new { Di2015NewLine                item = s.Field<string>("item"), Di2015NewLine                item2 = s.Field<string>("item2"), Di2015NewLine                itemA = l.Field<string>("itemA"), Di2015NewLine                itemB = l.Field<string>("itemB") Di2015NewLine            };Di2015NewLine
18337363Di2015UniqueSeparatorpublic class MyResultType {Di2015NewLine    public string item { get; set; }Di2015NewLine    public string item2 { get; set; }Di2015NewLine    public string itemA { get; set; }Di2015NewLine    public string itemB { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinevar query = from l in DbConfig.Tables["table2"]Di2015NewLine            join s in DbConfig.Tables["table1"] Di2015NewLine            on l.Field<string>("itemB") equals s.Field<string>("item1")Di2015NewLine            where l.Field<string>("itemA") == nameDi2015NewLine            select new MyResultType { Di2015NewLine                item = s.Field<string>("item"), Di2015NewLine                item2 = s.Field<string>("item2"), Di2015NewLine                itemA = l.Field<string>("itemA"), Di2015NewLine                itemB = l.Field<string>("itemB") Di2015NewLine            };Di2015NewLine
18337635Di2015UniqueSeparatorWriteLog()
18337809Di2015UniqueSeparator{id}
18337809Di2015UniqueSeparator{pageNumber}
18337809Di2015UniqueSeparator{pageNumber}
18337809Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    name: "PageNumber",Di2015NewLine    url: "Products/ShowProductsPerPage/{pageNumber}",Di2015NewLine    defaults: new { controller = "Products", action = "ShowProductsPerPage" }Di2015NewLine );Di2015NewLine
18337809Di2015UniqueSeparatorpageNumber
18337809Di2015UniqueSeparator/Products/ShowProductsPerPage?pageNumber=5
18337957Di2015UniqueSeparatorViewBag.SuccessMessage = "<p>Success!</p>";Di2015NewLine
18337957Di2015UniqueSeparator@ViewBag.SuccessMessageDi2015NewLine
18337957Di2015UniqueSeparatorpublic MyViewModel{Di2015NewLine    public bool IsSuccess {get;set;}Di2015NewLine}Di2015NewLine
18337957Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Update(MyViewModel vm){Di2015NewLine    //Glorious code!Di2015NewLineDi2015NewLine   return View(vm)Di2015NewLine}Di2015NewLine
18337957Di2015UniqueSeparator@if(vm.IsSuccess){Di2015NewLine     <p>Here is an amazing success message!</p>Di2015NewLine}Di2015NewLine
18337957Di2015UniqueSeparatorTempData["SuccessMessage"] = "Success!";Di2015NewLine
18338096Di2015UniqueSeparatorvar SomeComponentType myReferenceToThatComponent;Di2015NewLineDi2015NewLineon Awake(){Di2015NewLine    if(myReferenceToThatComponent==null){Di2015NewLine        myReferenceToThatComponent = GetComponent<SomeComponentType>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18338096Di2015UniqueSeparatormyReferenceToThatComponent.done = true;Di2015NewLinemyReferenceToThatComponent.SomeMethod( true );Di2015NewLine
18338096Di2015UniqueSeparatorusing ( WWW www = new WWW( url, form ) ) {Di2015NewLine    yield return www;Di2015NewLineDi2015NewLine}Di2015NewLine
18338096Di2015UniqueSeparatorvoid Start() {Di2015NewLine    StartCoroutine( BaseRoutine() );Di2015NewLine}Di2015NewLineDi2015NewLineIEnumerator BaseRoutine() {Di2015NewLine    for ( int i = 0; i < 10; i++ ) {Di2015NewLine        yield return StartCoroutine( ChildRoutine( i ) );Di2015NewLine    }       Di2015NewLine}Di2015NewLineDi2015NewLineIEnumerator ChildRoutine( int i ) {Di2015NewLine    Debug.Log( "ChildRoutine number: " + i );Di2015NewLine    yield return new WaitForSeconds( 1 ); // Put your yield return WWW here for exampleDi2015NewLine}Di2015NewLine
18338193Di2015UniqueSeparatorcommand.Parameters.AddWithValue("@ScheduledDateTime", DateTime.Parse(ScheduledDateTime.Text));Di2015NewLine
18338193Di2015UniqueSeparatorcommand.Parameters.Add("@ScheduledDateTime", SqlDbType.DateTime).Value = DateTime.Parse(ScheduledDateTime.Text);Di2015NewLine
18338202Di2015UniqueSeparatorContainsKey
18338202Di2015UniqueSeparatorO(1)
18338202Di2015UniqueSeparatorDictionary<TKey, TValue>.ContainsKey
18338330Di2015UniqueSeparatorassert
18338390Di2015UniqueSeparatorvar subject = oFolder.Items.GetLast().Subject;
18338390Di2015UniqueSeparatorItems
18338390Di2015UniqueSeparatorApplication  olApp = new Application();Di2015NewLineNameSpace olNS = olApp.GetNamespace("MAPI");Di2015NewLineMAPIFolder oFolder = olNS.GetDefaultFolder(OlDefaultFolders.olFolderInbox);Di2015NewLineDi2015NewLineItems items = oFolder.Items;Di2015NewLineitems.Sort("[ReceivedTime]");Di2015NewLineDi2015NewLinevar subject = items.GetLast().Subject;Di2015NewLine
18338436Di2015UniqueSeparatorprogressBar9
18338441Di2015UniqueSeparatorpublic object CallTheMethod(Delegate theMethod, params object[] parameters)Di2015NewLine{Di2015NewLine    return theMethod.DynamicInvoke(parameters);Di2015NewLine}Di2015NewLine
18338441Di2015UniqueSeparatorDelegate
18338441Di2015UniqueSeparatorDynamicInvoke
18338476Di2015UniqueSeparatorFilter
18338476Di2015UniqueSeparatorFilter
18338476Di2015UniqueSeparatorcontext.Table.Where(x => x.Name.Length > 500);Di2015NewLine
18338476Di2015UniqueSeparatorExpression<Func<YourEntity, bool>> FilterByNameLength(int length)Di2015NewLine{Di2015NewLine    return x => x.Name.Length > length;Di2015NewLine}Di2015NewLine
18338476Di2015UniqueSeparatorcontext.Table.Where(FilterByNameLength(500));Di2015NewLine
18338476Di2015UniqueSeparatorFilterByNameLength
18338476Di2015UniqueSeparatorWhere
18338479Di2015UniqueSeparatorIDisposable
18338479Di2015UniqueSeparator((IDisposable)eng).Dispose();Di2015NewLine
18338502Di2015UniqueSeparatorEventManager manager = new EventManager();Di2015NewLinetryDi2015NewLine{Di2015NewLine    EventDates = manager.GetWhatsOn(Request.QueryString["category"]);Di2015NewLineDi2015NewLine    rptEventDates.DataSource = EventDates;Di2015NewLine    rptEventDates.DataBind();Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    manager.Dispose();Di2015NewLine}Di2015NewLine
18338502Di2015UniqueSeparatorEventManager
18338502Di2015UniqueSeparatorusing
18338503Di2015UniqueSeparator    private void dateTimePicker1_ValueChanged(object sender, EventArgs e) {Di2015NewLine        monthCalendar1.SetDate(dateTimePicker1.Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e) {Di2015NewLine        dateTimePicker1.Value = monthCalendar1.SelectionStart;Di2015NewLine    }Di2015NewLine
18338534Di2015UniqueSeparatorWebUtility.HtmlDecode()
18338534Di2015UniqueSeparator
18338534Di2015UniqueSeparatorWebUtility
18338534Di2015UniqueSeparatorHttpUtility
18338549Di2015UniqueSeparatorthis.KeyDown += new KeyEventHandler(Form1_KeyDown);Di2015NewLine
18338549Di2015UniqueSeparatorvoid Form1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Key == Key.Return)Di2015NewLine    {Di2015NewLine        TextBox textbox = new TextBox();Di2015NewLine        this.Controls.Add(textbox);Di2015NewLine        textbox.Focus(); Di2015NewLine    }Di2015NewLine}Di2015NewLine
18338710Di2015UniqueSeparatorsomeObject
18338789Di2015UniqueSeparatorDim ContentPlaceHolder As ContentPlaceHolderDi2015NewLineDim gv As GridViewDi2015NewLineContentPlaceHolder = CType(Master.FindControl("GridViewPlaceHolder"), ContentPlaceHolder)Di2015NewLineIf Not ContentPlaceHolder Is Nothing ThenDi2015NewLine    gv = CType(ContentPlaceHolder.FindControl("GridView1"), GridView)Di2015NewLine      If Not gv Is Nothing ThenDi2015NewLine        Dim es As EntityDataSource = EntityDataSource1Di2015NewLine        gv.DataSource = esDi2015NewLine        gv.DataBind()Di2015NewLine    End IfDi2015NewLineEnd IfDi2015NewLine
18338791Di2015UniqueSeparatorprotected override void OnActivated(EventArgs e) {Di2015NewLine  base.OnActivated(e);Di2015NewLineDi2015NewLine  List<Form> closeForms = new List<Form>();Di2015NewLine  foreach (Form f in Application.OpenForms) {Di2015NewLine    if (!f.Equals(this)) {Di2015NewLine      closeForms.Add(f);Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  foreach (Form f in closeForms) {Di2015NewLine    f.Dispose();Di2015NewLine  }Di2015NewLine}Di2015NewLine
18338843Di2015UniqueSeparatorclass CustomExceptionHandler : ICallHandlerDi2015NewLine{Di2015NewLine  public IMethodReturn Invoke(IMethodInvocation input,Di2015NewLine    GetNextHandlerDelegate getNext)Di2015NewLine  {Di2015NewLine    WriteLog(String.Format("Invoking method {0} at {1}",Di2015NewLine      input.MethodBase, DateTime.Now.ToLongTimeString()));Di2015NewLineDi2015NewLine    // Invoke the next handler in the chainDi2015NewLine    var result = getNext().Invoke(input, getNext);Di2015NewLineDi2015NewLine    // After invoking the method on the original targetDi2015NewLine    if (result.Exception != null)Di2015NewLine    {Di2015NewLine      // This could cause an exception if the Type is invalidDi2015NewLine      result.ReturnValue = -1;Di2015NewLine      result.Exception = null;    Di2015NewLine    }Di2015NewLineDi2015NewLine    return result;Di2015NewLine  }Di2015NewLineDi2015NewLine  public int OrderDi2015NewLine  {Di2015NewLine    get;Di2015NewLine    set;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineclass CustomExceptionHandlerAttribute : HandlerAttributeDi2015NewLine{Di2015NewLine  private readonly int order;Di2015NewLineDi2015NewLine  public CustomExceptionHandlerAttribute(int order)Di2015NewLine  {Di2015NewLine    this.order = order;Di2015NewLine  }Di2015NewLineDi2015NewLine  public override ICallHandler CreateHandler(IUnityContainer container)Di2015NewLine  {Di2015NewLine    return new CustomExceptionHandler() { Order = order };Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass TenantStore : ITenantStoreDi2015NewLine{Di2015NewLine    [CustomExceptionHandler(1)]Di2015NewLine    public int Process()Di2015NewLine    {Di2015NewLine        throw new Exception("TEST");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinecontainer.RegisterType<ITenantStore, TenantStore>(Di2015NewLine    new InterceptionBehavior<PolicyInjectionBehavior>(),Di2015NewLine    new Interceptor<InterfaceInterceptor>());Di2015NewLine
18339032Di2015UniqueSeparatorThreadPool
18339032Di2015UniqueSeparatorThreadPool
18339059Di2015UniqueSeparatorlbClose
18339059Di2015UniqueSeparatorprotected void btnStartTrans_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Loop through all rows in the gridDi2015NewLine    foreach (GridViewRow row in grid.Rows)Di2015NewLine    {Di2015NewLine        // Only look for `lbClose` in data rows, ignore header and footer rows, etc.Di2015NewLine        if (row.RowType == DataControlRowType.DataRow)Di2015NewLine        {Di2015NewLine            // Find the `lbClose` LinkButton control in the rowDi2015NewLine            LinkButton theLinkButton = (LinkButton)row.FindControl("lbClose");Di2015NewLineDi2015NewLine            // Make sure control is not nullDi2015NewLine            if(theLinkButton != null)Di2015NewLine            {Di2015NewLine                // Enable the link buttonDi2015NewLine                theLinkButton.Enabled = true;Di2015NewLine            }Di2015NewLine        }            Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339095Di2015UniqueSeparatorstatic IEnumerable<IEnumerable<T>> CartesianProduct<T>(this IEnumerable<IEnumerable<T>> sequences) Di2015NewLine{ Di2015NewLine    // base case: Di2015NewLine    IEnumerable<IEnumerable<T>> result = new[] { Enumerable.Empty<T>() }; Di2015NewLine    foreach(var sequence in sequences) Di2015NewLine    { Di2015NewLine        var s = sequence; // don't close over the loop variable Di2015NewLine        // recursive case: use SelectMany to build the new product out of the old one Di2015NewLine        result = Di2015NewLine          from seq in result Di2015NewLine          from item in s Di2015NewLine          select seq.Concat(new[] {item}); Di2015NewLine    } Di2015NewLineDi2015NewLine    return result; Di2015NewLine}Di2015NewLine
18339095Di2015UniqueSeparatorprivate List<int[]> cmbs = new List<int[]>();Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine// build cmbs listDi2015NewLinecmbs.Add(cmb1);Di2015NewLinecmbs.Add(cmb2);Di2015NewLinecmbs.Add(cmb3);Di2015NewLinecmbs.Add(cmb4);Di2015NewLinecmbs.Add(cmb5);Di2015NewLineDi2015NewLine// loop through cmbsDi2015NewLinevar count = 0;Di2015NewLineforeach(var result in cmbs.CartesianProduct().Skip(1)) // Skip the first resultDi2015NewLine{Di2015NewLine    if (result.Sum() <= 20) Di2015NewLine    {Di2015NewLine        Console.WriteLine(count + "_" + String.Join(" ", result));Di2015NewLine        count = count + 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339289Di2015UniqueSeparatorprivate void NewProject()Di2015NewLine{Di2015NewLine    var saveFolderDlg = new FolderBrowserDialog();Di2015NewLineDi2015NewLine    DialogResult dlgResult = saveFolderDlg.ShowDialog();Di2015NewLineDi2015NewLine    if (dlgResult == System.Windows.Forms.DialogResult.OK)Di2015NewLine    {Di2015NewLineDi2015NewLine        saveFolderDlg.RootFolder = Environment.SpecialFolder.Desktop;Di2015NewLine        saveFolderDlg.ShowNewFolderButton = true;Di2015NewLine        string projectPath = saveFolderDlg.SelectedPath;Di2015NewLine        string prjFileName = System.IO.Path.GetFileName(projectPath);Di2015NewLine        string newPath = System.IO.Path.Combine(projectPath, prjFileName);Di2015NewLineDi2015NewLine        if (!System.IO.File.Exists(newPath + ".rnd"))Di2015NewLine        {Di2015NewLine            CreateNewProejct(projectPath);//works fineDi2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            string msgBoxTxt = "Project already exists, Override?";Di2015NewLine            MessageBoxButton button = MessageBoxButton.YesNoCancel;Di2015NewLine            string caption = "New porject";Di2015NewLine            MessageBoxImage icon = MessageBoxImage.Warning;Di2015NewLine            MessageBoxResult result = MessageBox.Show(msgBoxTxt, caption, button, icon);Di2015NewLineDi2015NewLine            switch (result)Di2015NewLine            {Di2015NewLine                case MessageBoxResult.No:Di2015NewLine                    NewProject();Di2015NewLine                    break;Di2015NewLine                case MessageBoxResult.Cancel:Di2015NewLine                    break;Di2015NewLine                case MessageBoxResult.Yes:Di2015NewLine                    CreateNewProejct(projectPath);Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339337Di2015UniqueSeparatorActionLink
18339337Di2015UniqueSeparator@Html.ActionLink("text for link", "ActionName", "ControllerName")Di2015NewLine
18339337Di2015UniqueSeparator@Html.ActionLink("text for link", "ActionName", "ControllerName", new { @p1 = 1, @p2 = 2 }, null)Di2015NewLine
18339337Di2015UniqueSeparatornull
18339337Di2015UniqueSeparator<a>
18339337Di2015UniqueSeparator@Html.ActionLink("text for link", "ActionName", "ControllerName", new { @p1 = 1, @p2 = 2 }, new { @class = "MyClass" })Di2015NewLine
18339337Di2015UniqueSeparator#
18339337Di2015UniqueSeparatorhref
18339337Di2015UniqueSeparator<a href="http://URL/">@T("Cancel")</a>Di2015NewLine
18339337Di2015UniqueSeparatorT()
18339337Di2015UniqueSeparator<a href="@(Url.Action("ActionName"))">@T("Cancel")</a>Di2015NewLine
18339337Di2015UniqueSeparator<a href="@(Url.Action("ActionName", "ControllerName"))">@T("Cancel")</a>Di2015NewLine
18339406Di2015UniqueSeparatorIErrorHandler
18339406Di2015UniqueSeparatorProvideFault
18339442Di2015UniqueSeparatorxDoc.Descendants("moduleid").Select(x => (string)x);Di2015NewLine
18339442Di2015UniqueSeparatorxDoc.Root.Elements("moduleid").Select(x => (string)x);Di2015NewLine
18339459Di2015UniqueSeparatorusing System;Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Change();Di2015NewLine        Replace();Di2015NewLine        Inner();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Change()Di2015NewLine    {Di2015NewLine        try {Di2015NewLine            try {Di2015NewLine                throw new Exception("This is a message");Di2015NewLine            } catch (Exception e) {Di2015NewLine                e.Data.Add("foo", "bar");Di2015NewLine                throw;Di2015NewLine            }Di2015NewLine        } catch (Exception e) {Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Message);Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Data["foo"]);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Replace()Di2015NewLine    {Di2015NewLine        try {Di2015NewLine            try {Di2015NewLine                throw new Exception("This is a message");Di2015NewLine            } catch (Exception e) {Di2015NewLine                e = new Exception("Different message", e);Di2015NewLine                e.Data.Add("foo", "bar");Di2015NewLine                throw;Di2015NewLine            }Di2015NewLine        } catch (Exception e) {Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Message);Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Data["foo"]);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Inner()Di2015NewLine    {Di2015NewLine        try {Di2015NewLine            try {Di2015NewLine                throw new Exception("This is a message");Di2015NewLine            } catch (Exception e) {Di2015NewLine                e.Data.Add("foo1", "bar1");Di2015NewLine                e = new Exception("Different message", e);Di2015NewLine                e.Data.Add("foo2", "bar2");Di2015NewLine                throw e;Di2015NewLine            }Di2015NewLine        } catch (Exception e) {Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Message);Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.Data["foo2"]);Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.InnerException.Message);Di2015NewLine            System.Diagnostics.Trace.WriteLine(e.InnerException.Data["foo1"]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339459Di2015UniqueSeparatorException
18339459Di2015UniqueSeparatorChange
18339459Di2015UniqueSeparatorReplace
18339459Di2015UniqueSeparatorException
18339459Di2015UniqueSeparatorthrow
18339459Di2015UniqueSeparatorInnerException
18339459Di2015UniqueSeparatorInner
18339515Di2015UniqueSeparator.
18339515Di2015UniqueSeparator^(?<One>\\d+)\\s(?<Two>[\\w\\s]+\\.)\\s(?<Three>\\w+)\\.$Di2015NewLine
18339584Di2015UniqueSeparatorvar filtered = bigList.GroupBy(c=>c.Id)Di2015NewLine                      .Select(g=> {Di2015NewLine                                    var f = g.First();Di2015NewLine                                    f.Count = g.Sum(c=>c.Count);Di2015NewLine                                    return f;Di2015NewLine                                  });Di2015NewLine
18339616Di2015UniqueSeparatorvar myData = {};Di2015NewLinemyData.DrugName' = $(ui.draggable).find("span").text();Di2015NewLinemyData.DrugColor' = $(ui.draggable).css("background-color");Di2015NewLineDi2015NewLine// Create a data transfer object (DTO) with the proper structure, which is what we will pass to the service.Di2015NewLinevar DTO = { 'theData' : myData };Di2015NewLineDi2015NewLine$.ajax({Di2015NewLine    type: "POST",Di2015NewLine    contentType: "application/json; charset=utf-8",Di2015NewLine    url: "SendDrugName.asmx/InsertDrugNameToDatabase",Di2015NewLine    data: JSON.stringify(DTO),Di2015NewLine    dataType: "json",Di2015NewLine    success: function (data) {Di2015NewLine        //response(data.d);Di2015NewLine    },Di2015NewLine    error: function (xhr, ajaxOptions, thrownError) {Di2015NewLine        console.log(xhr.status);Di2015NewLine        console.log(thrownError);Di2015NewLine    }Di2015NewLine});Di2015NewLine
18339616Di2015UniqueSeparatorpublic class ServiceDataDi2015NewLine{Di2015NewLine    public string DrugName { get; set; }Di2015NewLine    public string DrugColor { get; set; }Di2015NewLine}Di2015NewLine
18339616Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic void InsertDrugNameAndColorToDatabase(ServiceData theData)Di2015NewLine{Di2015NewLine    string cs = ConfigurationManager.ConnectionStrings["dbcs"].ConnectionString;Di2015NewLine    using (var con = new SqlConnection(cs))Di2015NewLine    {Di2015NewLine        using (var cmd = new SqlCommand("spInsertDrugText", con))Di2015NewLine        {Di2015NewLine            con.Open();Di2015NewLine            cmd.CommandType = CommandType.StoredProcedure;Di2015NewLine            cmd.Parameters.AddWithValue("@drugName", theData.DrugName);Di2015NewLine            cmd.Parameters.AddWithValue("@drugColor", theData.DrugColor);Di2015NewLine            cmd.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339616Di2015UniqueSeparatorServiceData
18339719Di2015UniqueSeparatorlistView1.Items[SelectedItemIndex].Bounds.IntersectsWith(listView1.ClientRectangle)Di2015NewLine
18339738Di2015UniqueSeparatorRefresh
18339894Di2015UniqueSeparatorpublic void SerializeObject<T>(T obj)Di2015NewLine{Di2015NewLine    using (StreamWriter sw = new StreamWriter("your path"))Di2015NewLine    {Di2015NewLine        new XmlSerializer(typeof(T)).Serialize(sw, obj);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic T DeserializeObject<T>()Di2015NewLine{Di2015NewLine    T obj;Di2015NewLine    using (StreamReader sr = new StreamReader("your path"))Di2015NewLine    {Di2015NewLine        obj = (T)new XmlSerializer(typeof(T)).Deserialize(sr);Di2015NewLine    }Di2015NewLineDi2015NewLine    return obj;Di2015NewLine}Di2015NewLine
18339894Di2015UniqueSeparatorPerson p = new Person();Di2015NewLineSerializeObject(p);Di2015NewLine
18339894Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Person xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <FirstName>f</FirstName>Di2015NewLine  <LastName>l</LastName>Di2015NewLine  <Age>50</Age>Di2015NewLine  <Addresses>Di2015NewLine    <Address>Di2015NewLine      <Street>s</Street>Di2015NewLine      <Number>1</Number>Di2015NewLine      <Zipcode>1</Zipcode>Di2015NewLine      <Locality>l</Locality>Di2015NewLine    </Address>Di2015NewLine    <Address>Di2015NewLine      <Street>s2</Street>Di2015NewLine      <Number>12</Number>Di2015NewLine      <Zipcode>12</Zipcode>Di2015NewLine      <Locality>l2</Locality>Di2015NewLine    </Address>Di2015NewLine  </Addresses>Di2015NewLine</Person>Di2015NewLine
18339909Di2015UniqueSeparatorcontext
18339945Di2015UniqueSeparatorclass PressureModelDi2015NewLine{Di2015NewLine    private double interval = 70;Di2015NewLine    private double pressure = 2.5;Di2015NewLine    private DateTime startTime;Di2015NewLine    private Timer timer;Di2015NewLineDi2015NewLine    // assuming rho, y, g, x, and mu are defined somewhere in here?Di2015NewLineDi2015NewLine    public PressureModel()Di2015NewLine    {Di2015NewLine        timer = new Timer(interval);Di2015NewLine        timer.Elapsed += (sender, args) => PressureEvent(sender, args);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void TimerStart() Di2015NewLine    {Di2015NewLine        startTime = DateTime.Now;Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void TimerStop()Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void PressureEvent(object sender, EventElapsedArgs args)Di2015NewLine    {Di2015NewLine        // calculate total elapsed time in msDi2015NewLine        double time = (double)((args.SignalTime - startTime).TotalMilliseconds);Di2015NewLine        // calculate vDi2015NewLine        double v = CalculateV(time);Di2015NewLine        //Di2015NewLine        ... do you other work here ...Di2015NewLine    }Di2015NewLineDi2015NewLine    private double CalculateV(double time)Di2015NewLine    {Di2015NewLine        double p = this.pressure;Di2015NewLine        // not sure where the other variables come from...Di2015NewLine        return (((p/(rho*y))-g)*time)/(1.0+(mu*time/(rho*y*x)));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18339945Di2015UniqueSeparatorPressureEvent
18339945Di2015UniqueSeparatorv
18339945Di2015UniqueSeparatorv
18340204Di2015UniqueSeparatorprivate void Output(Person p)Di2015NewLine{Di2015NewLine     idBox.Text = p.id;Di2015NewLine     fnameBox.Text = p.name;Di2015NewLine     lNameBox.Text = p.lName;Di2015NewLine}Di2015NewLine
18340214Di2015UniqueSeparatorShoppingCart
18340214Di2015UniqueSeparatorShoppingCart.Instance
18340362Di2015UniqueSeparator.method public hidebysig instance void DoStuff(!T 'value') cil managedDi2015NewLine{Di2015NewLine    .maxstack 8Di2015NewLine    L_0000: nop Di2015NewLine    L_0001: ldarg.0 Di2015NewLine    L_0002: ldarg.1 Di2015NewLine    L_0003: call instance voidDi2015NewLine            ConsoleApplication1.A`1<!T>::InternalDoStuff(!0) <-- Generic versionDi2015NewLine    L_0008: nop Di2015NewLine    L_0009: ret Di2015NewLine}Di2015NewLine
18340362Di2015UniqueSeparatorpublic void DoStuff(T value)Di2015NewLine{Di2015NewLine   dynamic dynamicValue = value;Di2015NewLine   InternalDoStuff(dynamicValue);Di2015NewLine} Di2015NewLine
18340463Di2015UniqueSeparatorSelected
18340463Di2015UniqueSeparatorFocused
18340463Di2015UniqueSeparator    private void timer1_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        // before addingDi2015NewLine        if (listView1.SelectedIndices.Count > 0)Di2015NewLine        {Di2015NewLine            if (!listView1.Items[listView1.SelectedIndices[0]].Bounds.IntersectsWith(listView1.ClientRectangle))Di2015NewLine                listView1.TopItem.Focused = true;Di2015NewLine            elseDi2015NewLine                listView1.Items[listView1.SelectedIndices[0]].Focused = true;Di2015NewLine        }Di2015NewLine        // add itemDi2015NewLine        listView1.VirtualListSize++;Di2015NewLine    }Di2015NewLine
18340463Di2015UniqueSeparatorTopItem
18340575Di2015UniqueSeparator1,2
18340575Di2015UniqueSeparatorCREATE TYPE dbo.Integers AS TABLEDi2015NewLine(Di2015NewLine  RowNumber INT PRIMARY KEYDi2015NewLine);Di2015NewLine
18340575Di2015UniqueSeparatorCREATE PROCEDURE dbo.Delete_RecordDi2015NewLine  @RowNums dbo.Integers READONLYDi2015NewLineASDi2015NewLineBEGINDi2015NewLine  SET NOCOUNT ON;Di2015NewLineDi2015NewLine  ;WITH REC_ROW AS (...your CTE unchanged here...)Di2015NewLine  DELETE REC_ROWDi2015NewLine   FROM REC_ROW INNER JOIN @RowNums AS rDi2015NewLine   ON r.RowNumber = REC_ROW.RN;Di2015NewLineENDDi2015NewLineGODi2015NewLine
18340575Di2015UniqueSeparatorCREATE FUNCTION dbo.SplitIntsDi2015NewLine(Di2015NewLine   @List      VARCHAR(MAX),Di2015NewLine   @Delimiter VARCHAR(255)Di2015NewLine)Di2015NewLineRETURNS TABLE WITH SCHEMABINDING Di2015NewLineASDi2015NewLine  RETURN Di2015NewLine  (  Di2015NewLine    SELECT Item = y.i.value('(./text())[1]', 'int')Di2015NewLine    FROM ( SELECT x = CONVERT(XML, '<i>' Di2015NewLine        + REPLACE(@List, @Delimiter, '</i><i>') Di2015NewLine        + '</i>').query('.')) AS a Di2015NewLine    CROSS APPLY x.nodes('i') AS y(i));Di2015NewLineGODi2015NewLine
18340575Di2015UniqueSeparatorCREATE PROCEDURE dbo.Delete_Record -- always use a schema prefix!Di2015NewLine  @RowNums VARCHAR(MAX)Di2015NewLineAS Di2015NewLineBEGINDi2015NewLine  SET NOCOUNT ON;Di2015NewLineDi2015NewLine  ;WITH REC_ROW ASDi2015NewLine  (Di2015NewLine    SELECT *, ROW_NUMBER() OVER (ORDER BY [Record Number]) AS RNDi2015NewLine        FROM dbo.User_DataDi2015NewLine  )Di2015NewLine  DELETE REC_ROWDi2015NewLine    FROM REC_ROW Di2015NewLine    INNER JOIN dbo.SplitInts(@RowNums, ',') AS rDi2015NewLine    ON r.Item = REC_ROW.RN;Di2015NewLineENDDi2015NewLineGODi2015NewLine
18340608Di2015UniqueSeparatorusing System.Web.Script.Serialization;Di2015NewLineDi2015NewLine[HttpPost]Di2015NewLinepublic ActionResult Index(HttpPostedFileBase file)Di2015NewLine{Di2015NewLine    if (file.ContentLength > 0)Di2015NewLine    {Di2015NewLine        // get contents to stringDi2015NewLine        string str = (new StreamReader(file.InputStream)).ReadToEnd();Di2015NewLineDi2015NewLine        // deserializes string into objectDi2015NewLine        JavaScriptSerializer jss = new JavaScriptSerializer();Di2015NewLine        var d = jss.Deserialize<dynamic>(str);Di2015NewLineDi2015NewLine        // once it's an object, you can use do with it whatever you wantDi2015NewLine    }Di2015NewLine}Di2015NewLine
18340670Di2015UniqueSeparatorXmlElementAttribute
18340670Di2015UniqueSeparatorXmlArrayItemAttribute
18340670Di2015UniqueSeparatorMappings
18340670Di2015UniqueSeparator[XmlType("PropertiesMapping")]Di2015NewLinepublic class PropertyMappingDi2015NewLine{Di2015NewLine    public PropertyMapping()Di2015NewLine    {Di2015NewLine        Properties = new List<Property>();Di2015NewLine    }Di2015NewLineDi2015NewLine    [XmlElement("Property")]Di2015NewLine    public List<Property> Properties { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PropertyDi2015NewLine{Di2015NewLine    public Property()Di2015NewLine    {Di2015NewLine        Mappings = new List<Mapping>();Di2015NewLine    }Di2015NewLineDi2015NewLine    [XmlElement("WEB_Class")]Di2015NewLine    public string WebClass { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("COM_Class")]Di2015NewLine    public string ComClass { get; set; }Di2015NewLineDi2015NewLine    [XmlArray("Mappings")]Di2015NewLine    [XmlArrayItem("Map")]Di2015NewLine    public List<Mapping> Mappings { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[XmlType("Map")]Di2015NewLinepublic class MappingDi2015NewLine{Di2015NewLine    [XmlElement("WEB_Property")]Di2015NewLine    public string WebProperty { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("COM_Property")]Di2015NewLine    public string ComProperty { get; set; }Di2015NewLine}Di2015NewLine
18340670Di2015UniqueSeparatorPropertyMapping result;Di2015NewLineDi2015NewLinevar serializer = new XmlSerializer(typeof(PropertyMapping));Di2015NewLineDi2015NewLineusing(var stream = new StringReader(data))Di2015NewLineusing(var reader = XmlReader.Create(stream))Di2015NewLine{Di2015NewLine    result = (PropertyMapping) serializer.Deserialize(reader);Di2015NewLine}Di2015NewLine
18340739Di2015UniqueSeparatorbreak
18340739Di2015UniqueSeparatortriLoop
18340739Di2015UniqueSeparatorfalse
18340782Di2015UniqueSeparator// Creating table KeynoteInformationRecordDi2015NewLineSchemaBuilder.CreateTable("KeynoteInformationRecord", table => tableDi2015NewLine    .Column("Id", DbType.Int32, column => column.PrimaryKey().Identity())Di2015NewLine    .Column("KeynotePartId", DbType.Int32)Di2015NewLine    .Column("Title", DbType.String, column => column.Unlimited())Di2015NewLine    .Column("Description", DbType.String, column => column.Unlimited())Di2015NewLine    .Column("StartDate", DbType.DateTime)Di2015NewLine    .Column("EndDate", DbType.DateTime)Di2015NewLine    .Column("HasEvaluation", DbType.Boolean)Di2015NewLine    .Column("IsDeleted", DbType.Boolean)Di2015NewLine);Di2015NewLine
18340782Di2015UniqueSeparatorpublic class KeynoteInformationRecordDi2015NewLine{Di2015NewLine    public virtual int Id { get; set; }Di2015NewLine    public virtual int KeynotePartId { get; set; }Di2015NewLine    [StringLengthMax]Di2015NewLine    public virtual string Title { get; set; }Di2015NewLine    [StringLengthMax]Di2015NewLine    public virtual string Description { get; set; }Di2015NewLine    public virtual DateTime StartDate { get; set; }Di2015NewLine    public virtual DateTime EndDate { get; set; }Di2015NewLine    public virtual bool HasEvaluation { get; set; }Di2015NewLine    public virtual bool IsDeleted { get; set; }Di2015NewLine}Di2015NewLine
18340783Di2015UniqueSeparatorPdfContentByte canvas = writer.DirectContent;Di2015NewLinecanvas.SetTextMatrix(50, 50);Di2015NewLine
18340783Di2015UniqueSeparatorDirectContent
18340783Di2015UniqueSeparatorBT
18340783Di2015UniqueSeparatorBeginText()
18340783Di2015UniqueSeparatorET
18340783Di2015UniqueSeparatorEndText
18340783Di2015UniqueSeparatorwriteSelectedRows()
18340783Di2015UniqueSeparatorcanvas.SetTextMatrix(50, 50);
18340783Di2015UniqueSeparatorwriteSelectedRows()
18340783Di2015UniqueSeparatorBT
18340783Di2015UniqueSeparatorET
18340783Di2015UniqueSeparatorBT
18340783Di2015UniqueSeparatorBT
18340783Di2015UniqueSeparatorBT
18340783Di2015UniqueSeparatorsetTextMatrix()
18340783Di2015UniqueSeparatorBT
18340797Di2015UniqueSeparatorGET
18340797Di2015UniqueSeparator_settings
18340797Di2015UniqueSeparatorindex.refresh_interval
18340797Di2015UniqueSeparator_settings
18340901Di2015UniqueSeparatorw3svc.Invoke("Recycle", null);
18340901Di2015UniqueSeparatorw3svc.Invoke("Stop", null);
18340901Di2015UniqueSeparatorRecycle
18340901Di2015UniqueSeparatorRecycle
18340901Di2015UniqueSeparatorWindows Features
18340901Di2015UniqueSeparatorIIS 6 Management Compatibility
18340901Di2015UniqueSeparatorIIS Admin Service
18341034Di2015UniqueSeparatorbool selected - 1 byteDi2015NewLinestring account - 100 bytesDi2015NewLinestring email - 100 bytesDi2015NewLinestring PDFfileName - 100 bytesDi2015NewLinestring PDFpassword - 100 bytesDi2015NewLineDateTime reportDate - 8 bytesDi2015NewLineint sendStatus - 4 bytesDi2015NewLinestring sendStatusDesc - 100 bytesDi2015NewLineDateTime sendStatusDate - 8 bytesDi2015NewLinestring parameters - 100 bytesDi2015NewLinestring extensions - 100 bytesDi2015NewLineTotal - 721 bytesDi2015NewLine
18341044Di2015UniqueSeparatorif ($(data).length === 1)
18341044Di2015UniqueSeparatordebugger;
18341044Di2015UniqueSeparatordata.objects[0].id
18341119Di2015UniqueSeparator// Build a set of {Value, Count} pairs using LINQDi2015NewLinevar counts = dataDi2015NewLine    .GroupBy(v => v)Di2015NewLine    .Select(g => new {Di2015NewLine        Value = g => KeyDi2015NewLine    ,   Count = g.Count()Di2015NewLine    }).OrderByDescending(p => p.Count)Di2015NewLine    .Take(5);Di2015NewLine
18341119Di2015UniqueSeparatorint counts = new int[256];Di2015NewLineforeach (var b in data) {Di2015NewLine    counts[b]++;Di2015NewLine}Di2015NewLine
18341119Di2015UniqueSeparatorQuickSelect
18341119Di2015UniqueSeparatorvar fifth = QuickSelect(counts, 5);Di2015NewLinevar res = new List<KeyValuePair<int,int>>();Di2015NewLinefor (int i = 0 ; i != counts.Length && res.Length != 5 ; i++) {Di2015NewLine    if (counts[i] >= fifth) {Di2015NewLine        res.Add(new KeyValuePair<int,int>(i, counts[i]));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18341179Di2015UniqueSeparatorpublic class PostalCodeAttribute : AttributeDi2015NewLine{Di2015NewLine    public string Country { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IPostalCodeModelDi2015NewLine{Di2015NewLine    string PostalCode { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UsModel : IPostalCodeModelDi2015NewLine{Di2015NewLine    [PostalCode(Country = "en-US")]Di2015NewLine    public string PostalCode { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class GbModel : IPostalCodeModelDi2015NewLine{Di2015NewLine    [PostalCode(Country = "en-GB")]Di2015NewLine    public string PostalCode { get; set; }Di2015NewLine}Di2015NewLine
18341179Di2015UniqueSeparatorpublic class PostalCodeValidatorDi2015NewLine{Di2015NewLine    private readonly IRegularExpressionService _regularExpressionService;Di2015NewLineDi2015NewLine    public PostalCodeValidator(IRegularExpressionService regularExpressionService)Di2015NewLine    {Di2015NewLine        _regularExpressionService = regularExpressionService;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsValid(IPostalCodeModel model)Di2015NewLine    {Di2015NewLine        var postalCodeProperty = model.GetType().GetProperty("PostalCode");Di2015NewLineDi2015NewLine        var attribute = postalCodeProperty.GetCustomAttribute(typeof(PostalCodeAttribute)) as PostalCodeAttribute;Di2015NewLineDi2015NewLine        // Model doesn't implement PostalCodeAttributeDi2015NewLine        if(attribute == null) return true;Di2015NewLineDi2015NewLine        return ValidatePostalCode(_regularExpressionService, model, attribute.Country);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static bool ValidatePostalCode(Di2015NewLine        IRegularExpressionService regularExpressionService,Di2015NewLine        IPostalCodeModel model,Di2015NewLine        string countryDi2015NewLine    )Di2015NewLine    {Di2015NewLine        var regex = regularExpressionService.GetPostalCodeRegex(country);Di2015NewLine        return Regex.IsMatch(model.PostalCode, regex);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18341246Di2015UniqueSeparatorpublic static T CreateProxyChannel<T>()Di2015NewLine{Di2015NewLine    string endpointUri = GetServiceEndpoint(typeof(T));Di2015NewLineDi2015NewLine    ChannelFactory<T> factory = new ChannelFactory<T>(myBinding, new EndpointAddress(new Uri(endpointUri)));Di2015NewLineDi2015NewLine    return factory.CreateChannel();Di2015NewLine}Di2015NewLine
18341246Di2015UniqueSeparatorGetServiceEndpoint
18341246Di2015UniqueSeparatorprivate static string GetServiceEndpoint(Type service)Di2015NewLine{Di2015NewLine    string serviceTypeName = service.Name;Di2015NewLineDi2015NewLine    // Code to get and return the endpoint for this service typeDi2015NewLine}Di2015NewLine
18341246Di2015UniqueSeparatorIService1
18341246Di2015UniqueSeparatorhttp://localhost/Service1.svc
18341246Di2015UniqueSeparatorIService1 serviceProxy1 = CreateProxyChannel<IService1>();Di2015NewLineserviceProxy1.MyMethod();Di2015NewLineDi2015NewLineIService2 serviceProxy2 = CreateProxyChannel<IService2>();Di2015NewLineserviceProxy2.AnotherMethod();Di2015NewLine
18341322Di2015UniqueSeparator^
18341322Di2015UniqueSeparatorMath.Pow
18341322Di2015UniqueSeparatorlong divided = bytes >> (n * 10);Di2015NewLinereturn divided.ToString() + ...;Di2015NewLine
18341322Di2015UniqueSeparatorpublic enum ByteConversionConstant : longDi2015NewLine{Di2015NewLine    B = 1L << 0,Di2015NewLine    KB = 1L << 10,Di2015NewLine    MB = 1L << 20,Di2015NewLine    GB = 1L << 30,Di2015NewLine    TB = 1L << 40,Di2015NewLine    PB = 1L << 50Di2015NewLine}Di2015NewLine
18341322Di2015UniqueSeparatorlong divided = n / (long) constant;Di2015NewLine
18341347Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    timer1.Stop();Di2015NewLine    if(saveFileDialog1.ShowDialog() == DialogResult.OK)Di2015NewLine    {Di2015NewLine        System.IO.StreamWriter file = new System.IO.StreamWriter(saveFileDialog1.FileName);Di2015NewLine        file.WriteLine(" Time and date:\\r\\n " + textBox2.Text + "\\r\\n \\r\\n Memory:\\r\\n " + textBox1.Text + "\\r\\n " + textBox10.Text + "\\r\\n " + textBox4.Text + "\\r\\n " + textBox5.Text + "\\r\\n \\r\\n CPU:\\r\\n " + textBox6.Text + "\\r\\n " + textBox11.Text + "\\r\\n " + textBox12.Text + "\\r\\n " + textBox13.Text + "\\r\\n \\r\\n Network:\\r\\n " + textBox7.Text + "\\r\\n " + textBox3.Text + "\\r\\n " + textBox8.Text + "\\r\\n " + textBox9.Text + "\\r\\n ");Di2015NewLine        file.Close();Di2015NewLine    }Di2015NewLine    timer1.Start();Di2015NewLine}Di2015NewLine
18341373Di2015UniqueSeparator    char[][] numbers = new char[][]Di2015NewLine    {Di2015NewLine        "0123456789".ToCharArray(),"persian numbers 0-9 here".ToCharArray()Di2015NewLine    };Di2015NewLine    public void Convert(string problem)Di2015NewLine    {Di2015NewLine        for (int x = 0; x <= 9; x++)Di2015NewLine        {Di2015NewLine            problem.Replace(numbers[0][x], numbers[1][x]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18341486Di2015UniqueSeparator    tryDi2015NewLine    {Di2015NewLine        // Your Code HereDi2015NewLine    }Di2015NewLine    catch (OleDbException e)Di2015NewLine    {Di2015NewLine        Messagebox.Show(e.InnerException.Message);Di2015NewLine    }Di2015NewLine
18341499Di2015UniqueSeparator[HttpGet]
18341550Di2015UniqueSeparatorFocused
18341550Di2015UniqueSeparatorprivate void SelectAllCheckBox_CheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!((CheckBox)sender).Focused) Di2015NewLine       return;Di2015NewLine    //your code to uncheck/check all CheckedListBox hereDi2015NewLine}Di2015NewLine
18341705Di2015UniqueSeparatorPanel
18341821Di2015UniqueSeparatorWindowStyle
18341821Di2015UniqueSeparatorNone
18341821Di2015UniqueSeparatorResizeMode
18341821Di2015UniqueSeparatorNoResize
18341821Di2015UniqueSeparatorDataTemplate
18341850Di2015UniqueSeparatorinstance1
18341850Di2015UniqueSeparatornew SampleClass()
18341952Di2015UniqueSeparatorPixels
18341952Di2015UniqueSeparatorSave
18341952Di2015UniqueSeparatormember val Pixels = Array2D.create width height Color.WhiteDi2015NewLine
18341955Di2015UniqueSeparatorArtist artist1 = new Artist(...); Song song1 = new Song(..., artist1);
18341955Di2015UniqueSeparator using System.Linq; // For lambda operationsDi2015NewLineDi2015NewLine (...)Di2015NewLineDi2015NewLine Songs = new ObservableCollection<Song>()Di2015NewLine {Di2015NewLine    new Song() {Artist = Artists.FirstOrDefault(x => x.Name == "Francis Albert Sinatra"), SingerName = ...}Di2015NewLine    (...)Di2015NewLine }Di2015NewLine
18341955Di2015UniqueSeparatorArtists.FirstOrDefault(...)
18341955Di2015UniqueSeparatorArtists
18342052Di2015UniqueSeparatorrunas /user:domain\\admin /savecred "\\"%temp%\\MyProgram - 4.6.0.0\\Setup.exe\\" /silent >> \\"%userprofile%\\Desktop\\BatchLog.txt\\""Di2015NewLine
18342076Di2015UniqueSeparatorNameCLR
18342076Di2015UniqueSeparatorNameDP
18342076Di2015UniqueSeparatorDependencyProperty.Register
18342113Di2015UniqueSeparatorDbContext.Set<TEntity>()
18342113Di2015UniqueSeparatorT
18342113Di2015UniqueSeparatorSet<TEntity>()
18342113Di2015UniqueSeparatorpublic class BaseRepository<T, U> where T : classDi2015NewLine{Di2015NewLine    public virtual IEnumerable<U> GetAll()Di2015NewLine    {Di2015NewLine        using (ApplicationEntities context = new ApplicationEntities())Di2015NewLine        {Di2015NewLine            IEnumerable<T> models = context.Set<T>();Di2015NewLine            return Mapper.Map<IEnumerable<T>, IEnumerable<U>>(models);                Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18342239Di2015UniqueSeparatorEM = 0x00 || 0x02 || PS || 0x00 || M.Di2015NewLine
18342239Di2015UniqueSeparatorEM
18342239Di2015UniqueSeparatorPS
18342239Di2015UniqueSeparatorM
18342239Di2015UniqueSeparatordef RemovePKCS15Padding( padded_msg ):Di2015NewLine    if len(padded_msg) < 2 or padded_msg[0]!='\\x02':Di2015NewLine        raise PaddingError # or whateverDi2015NewLine    p = padded_msg.find('\\x00')Di2015NewLine    if p < 0:Di2015NewLine        raise PaddingError # or whateverDi2015NewLine    return padded_msg[p+1:]Di2015NewLine
18342265Di2015UniqueSeparatoralways good
18342265Di2015UniqueSeparatornative language of a platform
18342265Di2015UniqueSeparatormost expensive cost is lack of support
18342265Di2015UniqueSeparatorJava
18342265Di2015UniqueSeparatorC#
18342275Di2015UniqueSeparatorEnumerable.Range(0, Some2dList.FirstOrDefault().Count)Di2015NewLine   .Select(columnIndex => Di2015NewLine       Some2dList.Max(row => row[columnIndex]))Di2015NewLine   .ToList();Di2015NewLine
18342527Di2015UniqueSeparatornull
18342527Di2015UniqueSeparatorobject.Equals
18342527Di2015UniqueSeparator!=
18342527Di2015UniqueSeparatorpublic T Compare<T>(T first, T second) where T : new()Di2015NewLine{Di2015NewLine    T result = new T();Di2015NewLine    Type t = typeof(T);Di2015NewLine    PropertyInfo[] propertyInfoList =  t.GetProperties();Di2015NewLineDi2015NewLine    foreach (PropertyInfo propertyInfo in propertyInfoList)Di2015NewLine    {Di2015NewLine        object value1 = propertyInfo.GetValue(first, null);Di2015NewLine        object value2 = propertyInfo.GetValue(second, null);Di2015NewLineDi2015NewLine        if (!object.Equals(value1, value2))Di2015NewLine            propertyInfo.SetValue(result, value2, null);Di2015NewLine    }Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
18342527Di2015UniqueSeparatorMyEntity entity1 = new MyEntity() { FirstName = "Jon", LastName = "Doh" };Di2015NewLineMyEntity entity2 = new MyEntity() { FirstName = "Jon", LastName = "The Great" };Di2015NewLineMyEntity diffEntity = Compare(entity1, entity2);Di2015NewLine
18342541Di2015UniqueSeparatorprivate MenuItem mnuPushTeamProfile;Di2015NewLinethis.mnuPushTeamProfile = new System.Windows.Forms.MenuItem();Di2015NewLinethis.mnuPushTeamProfile.Click += new System.EventHandler(this.mnuPushTeamProfile_Click); Di2015NewLineDi2015NewLineprivate void mnuPushTeamProfile_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   //something like thisDi2015NewLine   TreeNode thisNode = tvUsersAndGroups.SelectedNode;Di2015NewLineDi2015NewLine   //You should be able to now work with your nodesDi2015NewLine   //Really should not need to have to work with that TreeViewCancelEventHandlerDi2015NewLine}Di2015NewLine
18342673Di2015UniqueSeparatorpublic class ResultType Di2015NewLine{Di2015NewLine    public ClassOne ClassOne { get; set; }Di2015NewLine    public string SomeOtherVar { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinereturn  Di2015NewLine    from e in Context.pClassOneList Di2015NewLine    from r in SomeOtherList Di2015NewLine    select new ResultTypeDi2015NewLine    {Di2015NewLine        ClassOne = e,Di2015NewLine        SomeOtherVar = r.SomeOtherVarDi2015NewLine    };Di2015NewLine
18342731Di2015UniqueSeparatorfor (each item in input)Di2015NewLine  for (each item in input)Di2015NewLine    // do somethingDi2015NewLine
18342744Di2015UniqueSeparator        ProcessStartInfo start = new ProcessStartInfo(BaseIoConstantsProvider.CommandProcessor)Di2015NewLine            {Di2015NewLine                Arguments = BaseIoConstantsProvider.KeepAlive,Di2015NewLine                UseShellExecute = false,Di2015NewLine                CreateNoWindow = BaseIoConstantsProvider.NoDosWindow,Di2015NewLine                RedirectStandardOutput = true,Di2015NewLine                RedirectStandardInput = true,Di2015NewLine                RedirectStandardError = true,Di2015NewLine                WindowStyle = ProcessWindowStyle.Hidden,Di2015NewLine            };Di2015NewLine
18342744Di2015UniqueSeparator        Process p = new Process { StartInfo = start, EnableRaisingEvents = true };Di2015NewLine        p.ErrorDataReceived += PErrorDataReceived;Di2015NewLine        p.Exited += PExited;Di2015NewLine        p.Start();Di2015NewLine        p.StandardInput.AutoFlush = true;Di2015NewLine        p.StandardInput.WriteLine(cmdLine);Di2015NewLine        p.BeginOutputReadLine();Di2015NewLine
18342870Di2015UniqueSeparatorINotifyPropertyChanged
18342870Di2015UniqueSeparatorResult
18342870Di2015UniqueSeparatorListBoxItem
18342938Di2015UniqueSeparatortextBox1.Text += sOutput1;
18342938Di2015UniqueSeparator+=
18342938Di2015UniqueSeparator=
18343194Di2015UniqueSeparatorSystem.Windows.Forms.Form.ActiveForm.Opacity = ((double)(trackBar1.Value) /100.0)Di2015NewLine
18343294Di2015UniqueSeparatorToolStripManager.Merge((ToolStrip)this.ActiveMdiChild.Controls["toolStrip1"] , toolStrip1);Di2015NewLine
18343294Di2015UniqueSeparator()
18343294Di2015UniqueSeparator[]
18343294Di2015UniqueSeparator()
18343328Di2015UniqueSeparatorint big = 500;Di2015NewLineString s;Di2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLinefor (int i = 0; i < 100; ++i)Di2015NewLine{Di2015NewLine    sb.Append("cat mouse");Di2015NewLine}Di2015NewLines = sb.ToString();Di2015NewLineDi2015NewLineStopwatch sw = new Stopwatch();Di2015NewLinesw.Start();Di2015NewLinefor (int i = 0; i < big; ++i)Di2015NewLine{ Di2015NewLine    s = s.Replace("cat", "moo"); Di2015NewLine    s = s.Replace("moo", "cat"); Di2015NewLine}Di2015NewLinesw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds); sw.Reset(); sw.Start();Di2015NewLinefor (int i = 0; i < big; ++i)Di2015NewLine{Di2015NewLine    sb.Replace("cat", "moo");Di2015NewLine    sb.Replace("moo", "cat");Di2015NewLine}Di2015NewLinesw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds); sw.Reset(); sw.Start();Di2015NewLinefor (int i = 0; i < big; ++i)Di2015NewLine{Di2015NewLine    s = s.Replace("cat", "mooo");Di2015NewLine    s = s.Replace("mooo", "cat");Di2015NewLine}Di2015NewLinesw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds); sw.Reset(); sw.Start();Di2015NewLinefor (int i = 0; i < big; ++i)Di2015NewLine{Di2015NewLine    sb.Replace("cat", "mooo");Di2015NewLine    sb.Replace("mooo", "cat");Di2015NewLine}Di2015NewLinesw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds);Di2015NewLine
18343328Di2015UniqueSeparator9Di2015NewLine11Di2015NewLine7Di2015NewLine1977Di2015NewLine
18343328Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Text;Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var repl = GenerateRandomStrings(4, 500);Di2015NewLine        String s;Di2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        for (int i = 0; i < 100; ++i)Di2015NewLine        {Di2015NewLine            sb.Append("cat mouse");Di2015NewLine        }Di2015NewLine        s = sb.ToString();Di2015NewLine        Stopwatch sw = new Stopwatch();Di2015NewLine        sw.Start();Di2015NewLine        foreach (string str in repl)Di2015NewLine        {Di2015NewLine            s = s.Replace("cat", str);Di2015NewLine            s = s.Replace(str, "cat");Di2015NewLine        }Di2015NewLine        sw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds); sw.Reset(); sw.Start();Di2015NewLine        foreach (string str in repl)Di2015NewLine        {Di2015NewLine            sb.Replace("cat", str);Di2015NewLine            sb.Replace(str, "cat");Di2015NewLine        }Di2015NewLine        sw.Stop(); Trace.WriteLine(sw.ElapsedMilliseconds);Di2015NewLine    }Di2015NewLineDi2015NewLine    static HashSet<string> GenerateRandomStrings(int length, int amount)Di2015NewLine    {Di2015NewLine        HashSet<string> strings = new HashSet<string>();Di2015NewLine        while (strings.Count < amount)Di2015NewLine            strings.Add(RandomString(length));           Di2015NewLine        return strings;Di2015NewLine    }Di2015NewLineDi2015NewLine    static Random rnd = new Random();Di2015NewLine    static string RandomString(int length)Di2015NewLine    {Di2015NewLine        StringBuilder b = new StringBuilder();Di2015NewLine        for (int i = 0; i < length; ++i)Di2015NewLine            b.Append(Convert.ToChar(rnd.Next(97, 122)));Di2015NewLine        return b.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18343328Di2015UniqueSeparator8Di2015NewLine1933Di2015NewLine
18343328Di2015UniqueSeparator138Di2015NewLine328Di2015NewLine
18343328Di2015UniqueSeparator8Di2015NewLine11Di2015NewLine160Di2015NewLine326Di2015NewLine
18343415Di2015UniqueSeparatorif (File.Exists(nFile2)) File.Delete(nFile2);Di2015NewLine                traceFile2 =  new FileStream(nFile2, FileMode.Open, FileAccess.Write, FileShare.ReadWrite);Di2015NewLine                if (traceFile2 != null)Di2015NewLine                {Di2015NewLine                    var twt2 = new TextWriterTraceListener(traceFile2);Di2015NewLineDi2015NewLine                    // http://www.helixoft.com/blog/archives/20Di2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        if (twt2.Writer is StreamWriter)Di2015NewLine                        {Di2015NewLine                            (twt2.Writer as StreamWriter).AutoFlush = true;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    catch { }Di2015NewLineDi2015NewLine                    var indiceTraceFile2 = Trace.Listeners.Add(twt2);Di2015NewLine                    System.Diagnostics.Trace.WriteLine("INICIO: " + DateTime.Now.ToString());Di2015NewLine
18343415Di2015UniqueSeparatorusing (FileStream fileStream = new FileStream(f, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))Di2015NewLine                    {Di2015NewLine                        var messageAttachment = new Attachment(fileStream, Path.GetFileName(f));Di2015NewLine                        msgMail.Attachments.Add(messageAttachment);Di2015NewLine                    }Di2015NewLine
18343469Di2015UniqueSeparatorpublic static string RenderViewToString(ControllerContext context, string viewName, object model)Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(viewName))Di2015NewLine            viewName = context.RouteData.GetRequiredString("action");Di2015NewLineDi2015NewLine        var viewData = new ViewDataDictionary(model);Di2015NewLineDi2015NewLine        using (var sw = new StringWriter())Di2015NewLine        {Di2015NewLine            var viewResult = ViewEngines.Engines.FindPartialView(context, viewName);Di2015NewLine            var viewContext = new ViewContext(context, viewResult.View, viewData, new TempDataDictionary(), sw);Di2015NewLine            viewResult.View.Render(viewContext, sw);Di2015NewLineDi2015NewLine            return sw.GetStringBuilder().ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18343771Di2015UniqueSeparatorhttp://143.166.84.118/services/assetservice.asmx?WSDLDi2015NewLine
18343771Di2015UniqueSeparator            string ServiceTag = "your service tag here";Di2015NewLine            DellServiceReference.AssetServiceSoapClient svc = new DellServiceReference.AssetServiceSoapClient();Di2015NewLine            Guid DellFeeder = new Guid("12345678-1234-1234-1234-123456789012");Di2015NewLine            DellServiceReference.Asset[] assets = svc.GetAssetInformation(DellFeeder, "dellwarrantycheck", ServiceTag);Di2015NewLineDi2015NewLine            // go through each warrantyDi2015NewLine            DellServiceReference.EntitlementData[] entitlements = assets[0].Entitlements;Di2015NewLine            foreach (DellServiceReference.EntitlementData warr in entitlements)Di2015NewLine            {Di2015NewLine                DateTime start = warr.StartDate;Di2015NewLine                DateTime stop = warr.EndDate;Di2015NewLine                // do stuff with thisDi2015NewLine            }Di2015NewLine
18343847Di2015UniqueSeparator$(document).ready(function () {Di2015NewLine    $("#schools").change(function () {Di2015NewLine        var selection = $("#schools").val();Di2015NewLine        var link = $("#Download");Di2015NewLineDi2015NewLine        //Change textDi2015NewLine        link.text(selection);Di2015NewLineDi2015NewLine        //Change hrefDi2015NewLine        link.attr("href", "linkHref" + selection)Di2015NewLine    });Di2015NewLine});Di2015NewLine
18343929Di2015UniqueSeparatorgroups1.Where(g => false == groups2.Contains(g))
18344299Di2015UniqueSeparatorType.IsEnum
18344432Di2015UniqueSeparatorstring input = @"Date: 8/20/2013 12:00:00 AM Source Path: \\\\build\\PM\\11.0.25.9\\ Destination Path: C:\\Users\\Documents\\testing\\11.0.25.9\\etc\\ Folder Updated: 11.0.25.9 File Copied: 11052_0_X.pts";Di2015NewLinestring pattern = @"Source Path:(.+?)Destination Path:";Di2015NewLineDi2015NewLinevar src = Regex.Match(input,pattern).Groups[1].Value.Trim();Di2015NewLine
18344466Di2015UniqueSeparatorpublic partial class usr_CustomerDi2015NewLine{Di2015NewLine    public usr_Customer()Di2015NewLine    {Di2015NewLine        MerchantID = string.Empty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18344466Di2015UniqueSeparatorpublic override int SaveChanges()Di2015NewLine{Di2015NewLine    var changeSet = ChangeTracker.Entries();Di2015NewLineDi2015NewLine    if (changeSet != null)Di2015NewLine    {Di2015NewLine        foreach (var entry in changeSet.Where(c => c.State == EntityState.Added))Di2015NewLine        {Di2015NewLine            Type entityType = entry.GetType();Di2015NewLine            //Get all the propertiesDi2015NewLine            var properties = entityType.GetProperties();Di2015NewLine            foreach(var property in properties)Di2015NewLine            {Di2015NewLine                var value = property.GetValue(entry);Di2015NewLine                //If the property value is null, initialize with a default valueDi2015NewLine                if(value == null)Di2015NewLine                {Di2015NewLine                    //Get the default value of the propertyDi2015NewLine                    var defaultValue = Activator.CreateInstance(property.PropertyType);Di2015NewLine                    property.SetValue(defaultValue, entry, null);Di2015NewLine                }Di2015NewLine             }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return base.SaveChanges();Di2015NewLineDi2015NewLine}Di2015NewLine
18344633Di2015UniqueSeparator//Solution 1Di2015NewLine//Simply you have to add the ComboBox to the parent control firstDi2015NewLine//before assigning its DataSourceDi2015NewLinethis.Controls.Add(cbo);   //<---- This goes firstDi2015NewLinecbo.DataSource = DBCaller.GetListAsDataTable(fieldID); //<--- This goes afterDi2015NewLinecbo.SelectedValue = value;Di2015NewLineDi2015NewLine//Solution 2Di2015NewLine//This is very strange and interesting, you can also add your ComboBox to Di2015NewLine//the parent control after assigning its DataSource (as in your code).Di2015NewLine//But you have to ACCESS to the BindingContext property of your ComboBoxDi2015NewLine//I would like to emphasize the ACCESS, you can perform any kind of access (Read and Write).Di2015NewLine//Here are some examples of such access:Di2015NewLinecbo.DataSource = DBCaller.GetListAsDataTable(fieldID);Di2015NewLinethis.Controls.Add(cbo);  //<--- like in your code, this is placed here after the DataSource is assignedDi2015NewLine//here you can ACCESS the BindingContextDi2015NewLinevar whatEver = cbo.BindingContext;//READ accessDi2015NewLineif(cbo.BindingContext == null) Text = "????"; //READ access and of course it's not nullDi2015NewLinecbo.BindingContext = new BindingContext();//WRITE accessDi2015NewLinecbo.SelectedValue = value; //<---- This should be placed here after all.Di2015NewLine
18344638Di2015UniqueSeparatorstring a = "C:/aaa/bbb/eee.txt"" ;Di2015NewLinestring b = a.Replace("C:/aaa/bbb/", "OUT:/");Di2015NewLine
18344815Di2015UniqueSeparator.Focus()
18344815Di2015UniqueSeparatorLinkButton1.Focus();Di2015NewLine
18344860Di2015UniqueSeparatorSortedDictionary
18345045Di2015UniqueSeparatorFormClosing += new FormClosingEventHandler(Form1_FormClosing);Di2015NewLine
18345045Di2015UniqueSeparatorvoid Form1_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine{Di2015NewLine    if (MessageBox.Show("...","...", MessageBoxButtons.OKCancel) == DialogResult.OK)Di2015NewLine        e.Cancel = true;Di2015NewLine}Di2015NewLine
18345145Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Reflection.Emit;Di2015NewLineusing System.Runtime.Remoting.Messaging;Di2015NewLineusing System.Runtime.Remoting.Proxies;Di2015NewLineDi2015NewLinenamespace ConsoleApplication17Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            MyProxy<IFoo> proxy = new MyProxy<IFoo>(new Foo());Di2015NewLineDi2015NewLine            IFoo proxiedFoo = (IFoo)proxy.GetTransparentProxy();Di2015NewLineDi2015NewLine            // make a proxied call...Di2015NewLine            proxiedFoo.DoSomething();Di2015NewLineDi2015NewLine            // cast proxiedFoo to IDisposable and dispose of it...Di2015NewLine            IDisposable disposableFoo = proxiedFoo as IDisposable;Di2015NewLineDi2015NewLine            // disposableFoo is null at this point.Di2015NewLineDi2015NewLine            disposableFoo.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public interface IFooDi2015NewLine    {Di2015NewLine        void DoSomething();Di2015NewLine    }Di2015NewLineDi2015NewLine    public class Foo : IFoo, IDisposableDi2015NewLine    {Di2015NewLine        #region IFoo MembersDi2015NewLineDi2015NewLine        public void DoSomething()Di2015NewLine        {Di2015NewLine            Console.WriteLine("DoSomething called!");Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region IDisposable MembersDi2015NewLineDi2015NewLine        public void Dispose()Di2015NewLine        {Di2015NewLine            // disposeDi2015NewLine            Console.WriteLine("Disposing Foo!");Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLine    }Di2015NewLineDi2015NewLine    public class MyProxy<T> : RealProxy where T : classDi2015NewLine    {Di2015NewLine        private T _target;Di2015NewLineDi2015NewLine        public MyProxy(T target) :Di2015NewLine            base(CombineType(typeof(T), typeof(IDisposable)))Di2015NewLine        {Di2015NewLine            this._target = target;Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Type CombineType(Type type1, Type type2)Di2015NewLine        {Di2015NewLine            // How to implement this method, Reflection.Emit????Di2015NewLine            return DynamicInterfaceFactory.GenerateCombinedInterfaceType(type1, type2);Di2015NewLine        }Di2015NewLineDi2015NewLine        public override System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg)Di2015NewLine        {Di2015NewLine            return InvokeRemoteCall((IMethodCallMessage)msg, this._target);Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Invokes the remote call.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="methodCall">The method call.</param>Di2015NewLine        /// <param name="target">The target.</param>Di2015NewLine        /// <returns>A <see cref="ReturnMessage"/></returns>Di2015NewLine        private static IMessage InvokeRemoteCall(IMethodCallMessage methodCall, object target)Di2015NewLine        {Di2015NewLine            MethodInfo method = methodCall.MethodBase as MethodInfo;Di2015NewLineDi2015NewLine            object callResult = (target != null) ? method.Invoke(target, methodCall.InArgs) : null;Di2015NewLineDi2015NewLine            LogicalCallContext context = methodCall.LogicalCallContext;Di2015NewLineDi2015NewLine            var query = method.GetParameters().Where(param => ((ParameterInfo)param).IsOut);Di2015NewLineDi2015NewLine            ParameterInfo[] outParameters = query.ToArray();Di2015NewLineDi2015NewLine            return new ReturnMessage(callResult, outParameters, outParameters.Count(), context, methodCall);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class DynamicInterfaceFactoryDi2015NewLine    {Di2015NewLine        public static Type GenerateCombinedInterfaceType(Type type1, Type type2)Di2015NewLine        {            Di2015NewLine            if (!type1.IsInterface)Di2015NewLine                throw new ArgumentException("Type type1 is not an interface", "type1");Di2015NewLineDi2015NewLine            if (!type2.IsInterface)Di2015NewLine                throw new ArgumentException("Type type2 is not an interface", "type2");Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLine            // Module and Assembly CreationDi2015NewLineDi2015NewLine            var orginalAssemblyName = type1.Assembly.GetName().Name;Di2015NewLineDi2015NewLine            ModuleBuilder moduleBuilder;Di2015NewLineDi2015NewLine            var tempAssemblyName = new AssemblyName(Guid.NewGuid().ToString());Di2015NewLineDi2015NewLine            var dynamicAssembly = AppDomain.CurrentDomain.DefineDynamicAssembly(Di2015NewLine                tempAssemblyName,Di2015NewLine                System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect);Di2015NewLineDi2015NewLine            moduleBuilder = dynamicAssembly.DefineDynamicModule(Di2015NewLine                tempAssemblyName.Name,Di2015NewLine                tempAssemblyName + ".dll");Di2015NewLineDi2015NewLineDi2015NewLine            var assemblyName = moduleBuilder.Assembly.GetName();Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLine            // Create the TypeBuilderDi2015NewLineDi2015NewLine            var typeBuilder = moduleBuilder.DefineType(Di2015NewLine                type1.FullName,Di2015NewLine                TypeAttributes.Public | TypeAttributes.Interface | TypeAttributes.Abstract);Di2015NewLineDi2015NewLine            typeBuilder.AddInterfaceImplementation(type1);Di2015NewLine            typeBuilder.AddInterfaceImplementation(type2);Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLine            // Create and return the defined typeDi2015NewLineDi2015NewLine            Type newType = typeBuilder.CreateType();Di2015NewLineDi2015NewLine            return newType;Di2015NewLineDi2015NewLine            //////////////////////////////////////////////Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18345145Di2015UniqueSeparatorprivate static Type CombineType(Type type1, Type type2)Di2015NewLine{Di2015NewLine    // How to implement this method, Reflection.Emit????Di2015NewLine    return DynamicInterfaceFactory.GenerateCombinedInterfaceType(type1, type2);Di2015NewLine}Di2015NewLine
18345145Di2015UniqueSeparatorpublic static class DynamicInterfaceFactoryDi2015NewLine{Di2015NewLine    public static Type GenerateCombinedInterfaceType(Type type1, Type type2)Di2015NewLine    {            Di2015NewLine        if (!type1.IsInterface)Di2015NewLine            throw new ArgumentException("Type type1 is not an interface", "type1");Di2015NewLineDi2015NewLine        if (!type2.IsInterface)Di2015NewLine            throw new ArgumentException("Type type2 is not an interface", "type2");Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLine        // Module and Assembly CreationDi2015NewLineDi2015NewLine        var orginalAssemblyName = type1.Assembly.GetName().Name;Di2015NewLineDi2015NewLine        ModuleBuilder moduleBuilder;Di2015NewLineDi2015NewLine        var tempAssemblyName = new AssemblyName(Guid.NewGuid().ToString());Di2015NewLineDi2015NewLine        var dynamicAssembly = AppDomain.CurrentDomain.DefineDynamicAssembly(Di2015NewLine            tempAssemblyName,Di2015NewLine            System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect);Di2015NewLineDi2015NewLine        moduleBuilder = dynamicAssembly.DefineDynamicModule(Di2015NewLine            tempAssemblyName.Name,Di2015NewLine            tempAssemblyName + ".dll");Di2015NewLineDi2015NewLineDi2015NewLine        var assemblyName = moduleBuilder.Assembly.GetName();Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLine        // Create the TypeBuilderDi2015NewLineDi2015NewLine        var typeBuilder = moduleBuilder.DefineType(Di2015NewLine            type1.FullName,Di2015NewLine            TypeAttributes.Public | TypeAttributes.Interface | TypeAttributes.Abstract);Di2015NewLineDi2015NewLine        typeBuilder.AddInterfaceImplementation(type1);Di2015NewLine        typeBuilder.AddInterfaceImplementation(type2);Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLine        // Create and return the defined typeDi2015NewLineDi2015NewLine        Type newType = typeBuilder.CreateType();Di2015NewLineDi2015NewLine        return newType;Di2015NewLineDi2015NewLine        //////////////////////////////////////////////Di2015NewLine    }Di2015NewLine}Di2015NewLine
18345145Di2015UniqueSeparatorpublic class MyProxy<T> : RealProxy where T : classDi2015NewLine{Di2015NewLine    private T _target;Di2015NewLineDi2015NewLine    public MyProxy(T target) :Di2015NewLine        base(CombineType(typeof(T), typeof(IDisposable)))Di2015NewLine    {Di2015NewLine        this._target = target;Di2015NewLine    }Di2015NewLine
18345145Di2015UniqueSeparatorDoSomething called!Di2015NewLineDisposing Foo!Di2015NewLinePress any key to continue . . .Di2015NewLine
18345223Di2015UniqueSeparator^
18345223Di2015UniqueSeparator$
18345223Di2015UniqueSeparator+
18345223Di2015UniqueSeparatorRegex regex = new Regex(@"^(?:(Private Bag)|[0-9]+)$");Di2015NewLine
18345223Di2015UniqueSeparatorPrivate Bag
18345223Di2015UniqueSeparatorRegex regex = new Regex(@"^(Private Bag|[0-9]+)$");Di2015NewLine
18345232Di2015UniqueSeparatorvar locs = Location.DeserializedJson(json);Di2015NewLine
18345232Di2015UniqueSeparatorpublic class LocationDi2015NewLine{Di2015NewLineDi2015NewLine    public string Precision;Di2015NewLine    public double Latitude;Di2015NewLine    public double Longitude;Di2015NewLine    public string Address;Di2015NewLine    public string City;Di2015NewLine    public string State;Di2015NewLine    public string Zip;Di2015NewLine    public string Country;Di2015NewLineDi2015NewLine    public static Location[] DeserializedJson(string responseJson)Di2015NewLine    {Di2015NewLine        JavaScriptSerializer jsSerializer = new JavaScriptSerializer();Di2015NewLine        return jsSerializer.Deserialize<Location[]>(responseJson);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18345232Di2015UniqueSeparator[Serializable]
18345236Di2015UniqueSeparatorNullReferencException
18345236Di2015UniqueSeparatorpeopleEntering
18345236Di2015UniqueSeparatornull
18345236Di2015UniqueSeparatorList<PersonEntered>
18345236Di2015UniqueSeparatorprivate List<PersonEntered> peopleEntering = new List<PersonEntered>();Di2015NewLine
18345302Di2015UniqueSeparatorCommandHandler<TCommand>
18345302Di2015UniqueSeparatorICommandHandler
18345302Di2015UniqueSeparatorICommand
18345302Di2015UniqueSeparatorCommandHandler<FooCommand> fooHandler = HandleFoo;Di2015NewLineICommandHandler generalHandler = new ICommandHandler(fooHandler);Di2015NewLine
18345302Di2015UniqueSeparatorgeneralHandler(new BarCommand());Di2015NewLine
18345302Di2015UniqueSeparatorHandleFoo
18345302Di2015UniqueSeparatorICommandHandler
18345302Di2015UniqueSeparatorCommandHandler<TCommand>
18345302Di2015UniqueSeparatorTCommand
18345302Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinedelegate void CommandHandler<TCommand>(TCommand command)Di2015NewLine    where TCommand : ICommand;Di2015NewLinedelegate void ICommandHandler(ICommand command);Di2015NewLineDi2015NewLineinterface ICommand {}Di2015NewLineDi2015NewLineclass Command : ICommand {}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        ICommandHandler x = null;Di2015NewLine        CommandHandler<Command> y = new CommandHandler<Command>(x);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18345302Di2015UniqueSeparatorDictionary<Type, Delegate> mCommandHandlers;Di2015NewLine
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatortime
18345493Di2015UniqueSeparatorDateTime.TimeOfDay
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatorTime
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatortime
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatorTimeSpan.FromHours(26)
18345493Di2015UniqueSeparatorTimeSpan.FromHours(26).ToString()
18345493Di2015UniqueSeparator"1.02:00:00"
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatorTimeSpan.Ticks
18345493Di2015UniqueSeparatorbigint
18345493Di2015UniqueSeparatorTimeSpan.TotalSeconds
18345493Di2015UniqueSeparatorint
18345493Di2015UniqueSeparatorTimeSpan.FromSeconds
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparatorDuration
18345493Di2015UniqueSeparatorLocalTime
18345493Di2015UniqueSeparator"26:00:00"
18345493Di2015UniqueSeparatorTimeSpan
18345493Di2015UniqueSeparator// starting from this stringDi2015NewLinestring s = "26:00:00";Di2015NewLineDi2015NewLine// Parse as a Duration using the Noda Time Pattern APIDi2015NewLineDurationPattern pattern = DurationPattern.CreateWithInvariantCulture("H:mm:ss");Di2015NewLineDuration d = pattern.Parse(s).Value;Di2015NewLineDebug.WriteLine(pattern.Format(d));  // 26:00:00Di2015NewLineDi2015NewLine// if you want a TimeSpan, you can still get one.Di2015NewLineTimeSpan ts = d.ToTimeSpan();Di2015NewLineDebug.WriteLine(ts);  // 1.02:00:00Di2015NewLine
18345599Di2015UniqueSeparatorprivate bool HasContent(Control ctrl)Di2015NewLine{Di2015NewLine    var sb = new System.Text.StringBuilder();Di2015NewLine    using (var sw = new System.IO.StringWriter(sb)) Di2015NewLine    {Di2015NewLine        using(var tw = new HtmlTextWriter(sw))Di2015NewLine        {Di2015NewLine            ctrl.RenderControl(tw);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    var output = sb.ToString().Trim();Di2015NewLineDi2015NewLine    return !String.IsNullOrEmpty(output);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void Page_PreRender(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var placeholder = Master.FindControl("FeaturedContent");Di2015NewLine    var hasContent = HasContent(placeholder);Di2015NewLine}Di2015NewLine
18346353Di2015UniqueSeparatorint? total = report.SelectMany(p => p.SnapshotRecords)Di2015NewLine  .Where(record => record.Zip == "63103")Di2015NewLine  .GroupBy(g => newDi2015NewLine    {Di2015NewLine      g.Zip,Di2015NewLine      g.ProductIDDi2015NewLine    })Di2015NewLine  .Sum(s => new int?[]Di2015NewLine    {Di2015NewLine      s.Sum(g => g.Monday),Di2015NewLine      s.Sum(g => g.Tuesday),Di2015NewLine      s.Sum(g => g.Wednesday),Di2015NewLine      s.Sum(g => g.Thursday),Di2015NewLine      s.Sum(g => g.Friday),Di2015NewLine      s.Sum(g => g.Saturday),Di2015NewLine      s.Sum(g => g.Sunday)Di2015NewLine    }.Max()Di2015NewLine  );Di2015NewLine
18346366Di2015UniqueSeparator(?<=\\1.*)(<[^>]+>)
18346366Di2015UniqueSeparator(?<=(\\w))\\1Di2015NewLine
18346366Di2015UniqueSeparatorhello
18346366Di2015UniqueSeparatorl
18346427Di2015UniqueSeparatorFixture
18346427Di2015UniqueSeparatorAutoNSubstituteCustomization
18346427Di2015UniqueSeparatorvar fixture = new Fixture().Customize(Di2015NewLine    new AutoPopulatedNSubstitutePropertiesCustomization());Di2015NewLineDi2015NewLinevar result = fixture.Create<IPersonEntity>();Di2015NewLine// -> All properties should be populated now.Di2015NewLine
18346427Di2015UniqueSeparatorAutoPopulatedNSubstitutePropertiesCustomization
18346427Di2015UniqueSeparatorinternal class AutoPopulatedNSubstitutePropertiesCustomizationDi2015NewLine    : ICustomizationDi2015NewLine{Di2015NewLine    public void Customize(IFixture fixture)Di2015NewLine    {Di2015NewLine        fixture.ResidueCollectors.Add(Di2015NewLine            new Postprocessor(Di2015NewLine                new NSubstituteBuilder(Di2015NewLine                    new MethodInvoker(Di2015NewLine                        new NSubstituteMethodQuery())),Di2015NewLine                new AutoPropertiesCommand(Di2015NewLine                    new PropertiesOnlySpecification())));Di2015NewLine    }Di2015NewLineDi2015NewLine    private class PropertiesOnlySpecification : IRequestSpecificationDi2015NewLine    {Di2015NewLine        public bool IsSatisfiedBy(object request)Di2015NewLine        {Di2015NewLine            return request is PropertyInfo;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18346427Di2015UniqueSeparatorAutoNSubstituteCustomization
18346427Di2015UniqueSeparatorPostprocessor
18346481Di2015UniqueSeparatorcustom html helper mvc tutorial
18346588Di2015UniqueSeparatorEnableClientScript = "false"
18346588Di2015UniqueSeparator<input runat="server" id="LastName" type="text" name="LastName"/>Di2015NewLine<asp:RequiredFieldValidator ID="rvLastName" runat="server" EnableClientScript="false" ErrorMessage="Please type last name" ControlToValidate="LastName">Last Name Required</asp:RequiredFieldValidator>   Di2015NewLineDi2015NewLine<input runat="server" id="FirstName" type="text" name="FirstName"/>Di2015NewLine<required first Name>Di2015NewLine<input runat="server" id="MiddleName" type="text" name="MiddleName"/>Di2015NewLine<required middle name>Di2015NewLine<input runat="server" id="EmailAddress" type="text" name="EmailAddress"/>Di2015NewLine<required emailaddress>Di2015NewLine<asp:Button ID="btnSubmit" runat="server" Text="Submit" OnClick="btnSubmit_Click" />Di2015NewLine
18346588Di2015UniqueSeparatorprotected void btnSubmit_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    if (Page.IsValid)Di2015NewLine    {Di2015NewLine        //Do other tasksDi2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //Do tasks even if validation failsDi2015NewLine    }Di2015NewLine}Di2015NewLine
18346593Di2015UniqueSeparatorConvert.ToInt32
18346593Di2015UniqueSeparatorint value = Convert.ToInt32(this.textBox1.Text);Di2015NewLine
18346593Di2015UniqueSeparatorInt32.TryParse
18346637Di2015UniqueSeparatorpublic class TempClass {Di2015NewLine    private static ILog Log;Di2015NewLineDi2015NewLine    public static void LogSomething(string something) {Di2015NewLine        if (Log == null)Di2015NewLine            Log = LogManager.GetLog(typeof(TempClass));Di2015NewLineDi2015NewLine        Log.Info(something);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18346711Di2015UniqueSeparator@model TLDReporter.Models.TLDSalesReceiptCriteriaModelDi2015NewLine
18346711Di2015UniqueSeparatorvar model = new TLDReporter.Models.TLDSalesReceiptCriteriaModel();Di2015NewLinereturn View(model);Di2015NewLine
18346748Di2015UniqueSeparator    /// <summary>Returns a string resource from a DLL.</summary>Di2015NewLine    /// <param name="DLLHandle">The handle of the DLL (from LoadLibrary()).</param>Di2015NewLine    /// <param name="ResID">The resource ID.</param>Di2015NewLine    /// <returns>The name from the DLL.</returns>Di2015NewLine    static string GetStringResource(IntPtr handle, uint resourceId) {Di2015NewLine        StringBuilder buffer = new StringBuilder(8192);     //Buffer for output from LoadString()Di2015NewLineDi2015NewLine        int length = NativeMethods.LoadString(handle, resourceId, buffer, buffer.Capacity);Di2015NewLineDi2015NewLine        return buffer.ToString(0, length);      //Return the part of the buffer that was used.Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    static class NativeMethods {Di2015NewLine        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true, BestFitMapping = false, ThrowOnUnmappableChar = true)]Di2015NewLine        internal static extern IntPtr LoadLibrary(string lpLibFileName);Di2015NewLineDi2015NewLine        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true, BestFitMapping = false, ThrowOnUnmappableChar = true)]Di2015NewLine        internal static extern int LoadString(IntPtr hInstance, uint wID, StringBuilder lpBuffer, int nBufferMax);Di2015NewLineDi2015NewLine        [DllImport("kernel32.dll")]Di2015NewLine        public static extern int FreeLibrary(IntPtr hLibModule);Di2015NewLine    }Di2015NewLine
18346832Di2015UniqueSeparatorTask<T>
18346832Di2015UniqueSeparatorIProgress<T>
18346832Di2015UniqueSeparatorIObservable<T>
18346832Di2015UniqueSeparatorObservable
18346832Di2015UniqueSeparatorEither<TLeft, TRight>
18346850Di2015UniqueSeparatorprivate static void OrderingTest()Di2015NewLine    {Di2015NewLine        Database.SetInitializer(new DropCreateDatabaseAlways<Test1Context>());Di2015NewLine        var context = new TestContext();Di2015NewLineDi2015NewLine        context.Customers.Add(new Company { Denomination = "A" });Di2015NewLine        context.Customers.Add(new Company { Denomination = "C" });Di2015NewLine        context.Customers.Add(new Person { LastName = "B" });Di2015NewLine        context.Customers.Add(new Person { LastName = "D" });Di2015NewLine        context.SaveChanges();Di2015NewLineDi2015NewLine        var a = (from customer in context.Customers.OfType<Company>()Di2015NewLine                 select new CustomerInfo { Name = customer.Denomination, Customer = customer }Di2015NewLine                )Di2015NewLine                .UnionDi2015NewLine                (from customer in context.Customers.OfType<Person>()Di2015NewLine                 select new CustomerInfo { Name = customer.LastName, Customer = customer }Di2015NewLine                 );Di2015NewLine        var customerInfoList = a.OrderBy(item => item.Name);Di2015NewLine        var customers = customerInfoList.ToList().Select(item => item.Customer);Di2015NewLine    }Di2015NewLineDi2015NewLine    class CustomerInfoDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public Customer Customer { get; set; }Di2015NewLine    }Di2015NewLine
18346850Di2015UniqueSeparatorpublic Person AsPersonDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return this as Person;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18346850Di2015UniqueSeparatorcase "SourceName":                            Di2015NewLineList<Source> sources = data.ToList();Di2015NewLine
18346850Di2015UniqueSeparatorIQueryable<Source> data = e.Sources.Where(element => element.IsActive == true).OrderBy(el => el.EntityBaseKey);Di2015NewLine
18346850Di2015UniqueSeparatorIQueryable<EntityBase> data = e.Entities.Where(entityBase => entityBase.Source.IsActive).OrderBy(entityBase => entityBase.Source.EntityBaseKey);Di2015NewLine
18346850Di2015UniqueSeparator  var entities = (from entity in data.OfType<Company>()Di2015NewLine                  select new EntityBaseInfo { Name = entity.CompanyName, EntityBase = entity }Di2015NewLine                 )Di2015NewLine                 .UnionDi2015NewLine                 (from entity in data.OfType<Person>()Di2015NewLine                  select new EntityBaseInfo { Name = entity.FirstName + " " + entity.LastName, EntityBase = entity }Di2015NewLine                 );Di2015NewLine  var orderedEntities = entities.OrderBy(item => item.Name).Select(item => item.EntityBase);Di2015NewLine
18346850Di2015UniqueSeparatorforeach (EntityBase entity in orderedEntities.ToList())Di2015NewLine{Di2015NewLine    sources.Add(new SourceViewDi2015NewLine    {Di2015NewLine        EntityBaseKey = entity.Source.EntityBaseKey,Di2015NewLine        SourceName = entity.EntityName,           Di2015NewLine    });Di2015NewLine}Di2015NewLine
18346891Di2015UniqueSeparatorprivate void CreateAnimation()Di2015NewLine{Di2015NewLine    DoubleAnimation doubleAnimation = new DoubleAnimation();Di2015NewLine    doubleAnimation.From = -LabelNameSong.ActualWidth;Di2015NewLine    doubleAnimation.To = canMain.ActualWidth;Di2015NewLine    doubleAnimation.RepeatBehavior = RepeatBehavior.Forever;Di2015NewLine    doubleAnimation.Duration = new Duration(TimeSpan.Parse("0:0:10"));Di2015NewLine    LabelNameSong.BeginAnimation(Canvas.RightProperty, doubleAnimation);Di2015NewLine}Di2015NewLineDi2015NewLinevoid Window1_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    CreateAnimation();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void LabelNameSong_SizeChanged(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    CreateAnimation();Di2015NewLine}Di2015NewLine
18346891Di2015UniqueSeparator <Label x:Name="LabelNameSong" Content="Hello" >Di2015NewLine    <Label.Resources>Di2015NewLine        <Storyboard x:Key="scroll">Di2015NewLine            <DoubleAnimation To="{Binding ActualWidth, ElementName=LabelNameSong}" Duration="00:00:10"Di2015NewLine              Storyboard.TargetProperty="(Canvas.Right)"Di2015NewLine              Storyboard.TargetName="LabelNameSong"Di2015NewLine              RepeatBehavior="Forever"/>Di2015NewLine        </Storyboard>Di2015NewLine    </Label.Resources>Di2015NewLineDi2015NewLine    <Label.Triggers>Di2015NewLine        <EventTrigger RoutedEvent="Label.Loaded">Di2015NewLine            <BeginStoryboard Storyboard="{StaticResource scroll}" />Di2015NewLine        </EventTrigger>Di2015NewLine        <EventTrigger RoutedEvent="Label.SizeChanged">Di2015NewLine            <BeginStoryboard Storyboard="{StaticResource scroll}" />Di2015NewLine        </EventTrigger>Di2015NewLine    </Label.Triggers>Di2015NewLine</Label>Di2015NewLine
18346909Di2015UniqueSeparatorpublic partial class settingsForm : FormDi2015NewLine{Di2015NewLine    private formControlTracker _cTracker;Di2015NewLineDi2015NewLine    public settingsForm()Di2015NewLine    {Di2015NewLine        //set the field value in the constructor.Di2015NewLine        _cTracker = new formControlTracker(this);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public void lDirtyControls()Di2015NewLine    {Di2015NewLine        //use the field variable hereDi2015NewLine        /*foreach (string con in _cTracker.getDirtyControls())Di2015NewLine        {Di2015NewLine            MessageBox.Show(con);Di2015NewLine        }*/Di2015NewLine    }Di2015NewLine}Di2015NewLine
18347015Di2015UniqueSeparatorpublic static void RegisterBundles(BundleCollection bundles)Di2015NewLine    {Di2015NewLine        //some bundling code here, deleted for clarityDi2015NewLineDi2015NewLine        BundleTable.EnableOptimizations = false;Di2015NewLine    }Di2015NewLine
18347023Di2015UniqueSeparatorStream
18347023Di2015UniqueSeparatorpublic class TeeStream : StreamDi2015NewLine{Di2015NewLine    private readonly Stream m_underlyingStream;Di2015NewLine    private readonly Action<byte[], int> m_readCallback;Di2015NewLineDi2015NewLine    public TeeStream(Stream underlyingStream, Action<byte[], int> readCallback)Di2015NewLine    {Di2015NewLine        m_underlyingStream = underlyingStream;Di2015NewLine        m_readCallback = readCallback;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int Read(byte[] buffer, int offset, int count)Di2015NewLine    {Di2015NewLine        var read = m_underlyingStream.Read(buffer, offset, count);Di2015NewLineDi2015NewLine        m_readCallback(buffer, read);Di2015NewLineDi2015NewLine        return read;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override async Task<int> ReadAsync(Di2015NewLine        byte[] buffer, int offset, int count,Di2015NewLine        CancellationToken cancellationToken)Di2015NewLine    {Di2015NewLine        var read = await m_underlyingStream.ReadAsync(Di2015NewLine            buffer, offset, count, cancellationToken);Di2015NewLineDi2015NewLine        m_readCallback(buffer, read);Di2015NewLineDi2015NewLine        return read;Di2015NewLine    }Di2015NewLineDi2015NewLine    // the remaining members that have to be overriddenDi2015NewLine    // just call the same member of underlyingStreamDi2015NewLine}Di2015NewLine
18347023Di2015UniqueSeparatorvar teeStream = new TeeStream(sslStream, (bytes, read) => /* whatever */);Di2015NewLineDi2015NewLineusing (XmlReader reader = XmlReader.Create(Di2015NewLine    teeStream, new XmlReaderSettings { Async = true }))Di2015NewLineâ¦Di2015NewLine
18347136Di2015UniqueSeparatorString signature = "770bb ... 1c7ca";Di2015NewLine...Di2015NewLinebyte[] expectedSig = System.Convert.FromBase64String(signature);Di2015NewLine
18347136Di2015UniqueSeparatorDecodeX509PublicKey
18347136Di2015UniqueSeparatorArray.Reverse(modulus); //convert to big-endianDi2015NewLine
18347136Di2015UniqueSeparatorArray.Reverse(exponent); //convert to big-endianDi2015NewLine
18347136Di2015UniqueSeparatorsign
18347136Di2015UniqueSeparatorSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());Di2015NewLine
18347136Di2015UniqueSeparatorsigner
18347136Di2015UniqueSeparatorsigner
18347136Di2015UniqueSeparatorstatic
18347136Di2015UniqueSeparatorinsertProviderAt
18347136Di2015UniqueSeparatorstatic {Di2015NewLine    try {Di2015NewLine        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());Di2015NewLine    } catch (Exception e) {Di2015NewLine        e.printStackTrace();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineString signed = null;Di2015NewLinetry {Di2015NewLine    java.security.Signature signer = java.security.Signature.getInstance("SHA1withRSA", "BC");Di2015NewLine    byte[] data = clearText.getBytes("UTF-8");Di2015NewLine    signer.initSign(getPrivateKey());Di2015NewLineDi2015NewLine...Di2015NewLine
18347178Di2015UniqueSeparator    WebRequest req = WebRequest.Create(@"https://sub.domain.com/api/operations?param=value&param2=value");Di2015NewLine    req.Method = "GET";Di2015NewLine    req.Headers["Authorization"] = "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes("username:password"));Di2015NewLine    //req.Credentials = new NetworkCredential("username", "password");Di2015NewLine    HttpWebResponse resp = req.GetResponse() as HttpWebResponse;Di2015NewLine
18347178Di2015UniqueSeparator"username"
18347178Di2015UniqueSeparator"password"
18347181Di2015UniqueSeparatorUIApplication.SharedApplication.Windows[1].AddSubview(myView);Di2015NewLine
18347241Di2015UniqueSeparator<x><xsl:value-of select="$x"/></x>Di2015NewLine<y><xsl:value-of select="$y"/></y>Di2015NewLine<text x="{$x}" y="{$y}" font-family="sans-serif" font-size="24px" fill="black">TEST</text>Di2015NewLine
18347296Di2015UniqueSeparatorValueCollection
18347296Di2015UniqueSeparatorICollection<Component>
18347296Di2015UniqueSeparatorICollection<T>
18347296Di2015UniqueSeparatorT
18347296Di2015UniqueSeparatorComponent
18347296Di2015UniqueSeparatorT
18347296Di2015UniqueSeparatorICollection<Component>
18347296Di2015UniqueSeparatorcomponentEntityDatabase
18347296Di2015UniqueSeparatorT
18347296Di2015UniqueSeparatorentityRegistry
18347296Di2015UniqueSeparatorDictionary<Entity, T>
18347296Di2015UniqueSeparatorOfType
18347296Di2015UniqueSeparatorT
18347296Di2015UniqueSeparatorretval = entityRegistry.Values.OfType<T>().ToList();  // turn into a List to get back to `ICollection<T>`  Di2015NewLine
18347296Di2015UniqueSeparatorT
18347296Di2015UniqueSeparatorOfType
18347344Di2015UniqueSeparatorvoid testfunction(){Di2015NewLine   for(int j=0;j<100000;j++){Di2015NewLine      int x = j*2;Di2015NewLine      //x used for a lot of stuffDi2015NewLine   }Di2015NewLine}Di2015NewLine
18347344Di2015UniqueSeparatorx
18347344Di2015UniqueSeparatorvoid testfunction(){Di2015NewLine   int x=0;Di2015NewLine   for(int j=0;j<100000;j++){Di2015NewLine      x = j*2;Di2015NewLine      //x used for a lot of stuffDi2015NewLine   }Di2015NewLine}Di2015NewLine
18347344Di2015UniqueSeparatorx
18347344Di2015UniqueSeparatorint x=0;Di2015NewLinevoid testfunction(){Di2015NewLine   for(int j=0;j<100000;j++){Di2015NewLine      x=j*2;Di2015NewLine      //x used for a lot of stuffDi2015NewLine   }Di2015NewLine}Di2015NewLine
18347344Di2015UniqueSeparatortestfunction
18347344Di2015UniqueSeparatortestfunction
18347344Di2015UniqueSeparatorx
18347368Di2015UniqueSeparator<requestedExecutionLevel level="requireAdministrator" uiAccess="false" />Di2015NewLine
18347480Di2015UniqueSeparatorvar listWithChildren = list.Where(l => l.Children.Any());Di2015NewLine
18347480Di2015UniqueSeparatorvar listWithParent = list.Where(l => l.FK_ID != null);Di2015NewLine
18347480Di2015UniqueSeparatorvar listWithChildren = from item in listDi2015NewLine                       where item.Children.Any()Di2015NewLine                       select item;Di2015NewLine
18347480Di2015UniqueSeparatorvar updatedList = from item in listDi2015NewLine                  select new Di2015NewLine                  {Di2015NewLine                    Item = item,Di2015NewLine                    HasChildren = item.Children.Any()Di2015NewLine                  };Di2015NewLine
18347594Di2015UniqueSeparatorprotected void btnExit_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        // this line allows the capture of selected values Di2015NewLine        gvSelection_SelectedIndexChanged(sender, e); Di2015NewLine        ClientScript.RegisterStartupScript(typeof(Page), "", "window.close();window.opener.location.reload();", true);Di2015NewLine    }Di2015NewLine
18347595Di2015UniqueSeparatorApplication.Idle
18347595Di2015UniqueSeparator//Names concatenation of persons recognizedDi2015NewLinebool foundMuhand = false;Di2015NewLinefor (int nnn = 0; nnn < facesDetected[0].Length; nnn++)Di2015NewLine{Di2015NewLine    // check for VIPDi2015NewLine    if (NamePersons[nnn] == "Muhand") {Di2015NewLine        foundMuhand = true;Di2015NewLine    }Di2015NewLine    names = names + NamePersons[nnn] + ", ";Di2015NewLine}Di2015NewLine//Show the faces procesed and recognizedDi2015NewLineimageBoxFrameGrabber.Image = currentFrame;Di2015NewLinelabel4.Text = names;Di2015NewLinenames = "";Di2015NewLine//Clear the list(vector) of namesDi2015NewLineNamePersons.Clear();Di2015NewLineDi2015NewLine// show message box after the other UI is updatedDi2015NewLineif (foundMuhand) {Di2015NewLine    MessageBox.Show("Hi Muhand!");Di2015NewLine}Di2015NewLine
18347603Di2015UniqueSeparatorTrigger
18347603Di2015UniqueSeparatorOpacity
18347603Di2015UniqueSeparatorText
18347603Di2015UniqueSeparatorObjectAnimation
18347603Di2015UniqueSeparator<BeginStoryboard Name="FadeOut">Di2015NewLine    <Storyboard >Di2015NewLine        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0"  To="0.0" Duration="0:0:3.5"/>Di2015NewLine        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Text" BeginTime="0:0:3.5" >Di2015NewLine            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Ready" />Di2015NewLine        </ObjectAnimationUsingKeyFrames>Di2015NewLine        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0"  To="1.0" BeginTime="0:0:3.5"/>Di2015NewLine    </Storyboard>Di2015NewLine</BeginStoryboard>Di2015NewLine
18347603Di2015UniqueSeparatorText
18347603Di2015UniqueSeparatorReady
18347603Di2015UniqueSeparatorStatusMessage
18347603Di2015UniqueSeparatorReady
18347652Di2015UniqueSeparator815382334
18347652Di2015UniqueSeparatorsum = 0Di2015NewLinefor pos = 0 to 6 inclusive:Di2015NewLine    sum = sum + num_at(pos) * (8 - pos)Di2015NewLine
18347652Di2015UniqueSeparator8
18347652Di2015UniqueSeparator2
18347652Di2015UniqueSeparatorsum
18347652Di2015UniqueSeparatornum_at()
18347652Di2015UniqueSeparator0x30
18347652Di2015UniqueSeparator0x39
18347652Di2015UniqueSeparatorpos  num_at(pos)  8-pos  add  sumDi2015NewLine---  -----------  -----  ---  ---Di2015NewLine                                0Di2015NewLine 0        8          8    64   64Di2015NewLine 1        1          7     7   71Di2015NewLine 2        5          6    30  101Di2015NewLine 3        3          5    15  116Di2015NewLine 4        8          4    32  148Di2015NewLine 5        2          3     6  154Di2015NewLine 6        3          2     6  160Di2015NewLine
18347652Di2015UniqueSeparatorwhile sum > 0:Di2015NewLine    sum = sum - 97Di2015NewLine
18347652Di2015UniqueSeparatorsumDi2015NewLine---Di2015NewLine160Di2015NewLine 63Di2015NewLine 34-Di2015NewLine
18347652Di2015UniqueSeparatorsum = sum + num_at(7) * 10 + num_at(8)Di2015NewLinereturn (sum == 0);Di2015NewLine
18347652Di2015UniqueSeparator3
18347652Di2015UniqueSeparator4
18347652Di2015UniqueSeparatornum_at(7) * 10 + num_at(8)
18347652Di2015UniqueSeparator34
18347652Di2015UniqueSeparatorsum = 0Di2015NewLinefor pos = 0 to 6 inclusive:Di2015NewLine    sum = sum + num_at(pos) * (8 - pos)Di2015NewLinereturn ((sum % 97) + num_at(7) * 10 + num_at(8) == 97);Di2015NewLine
18347652Di2015UniqueSeparatorsum % 97
18347652Di2015UniqueSeparator160 % 97
18347652Di2015UniqueSeparator63
18347652Di2015UniqueSeparator63 + 34
18347652Di2015UniqueSeparator97
18347796Di2015UniqueSeparatorUtility
18347796Di2015UniqueSeparatorstatic
18347796Di2015UniqueSeparatorpublic class UtilityDi2015NewLine{Di2015NewLine   public static DataTable LINQToDataTable<T>(IEnumerable<T> varlist)Di2015NewLine   {Di2015NewLine      // code ....Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
18347796Di2015UniqueSeparatorDataTable gridTable = Utility.LINQToDataTable(GetGrids); Di2015NewLine
18347807Di2015UniqueSeparatorace.config.set("basePath", "/Scripts/FullPathToMy/AceEditorDirectory");Di2015NewLine
18348076Di2015UniqueSeparatorvar json = @"{'Warranty':[{'EndDate':'ValueIWant','ServiceLevelDescription':'ValueIWant'}]}";Di2015NewLineDi2015NewLinevar j = JObject.Parse(json);Di2015NewLineDi2015NewLineforeach(var o in j["Warranty"])Di2015NewLine{Di2015NewLine    Console.WriteLine("Warranty end date: {0}", (string)o["EndDate"]);Di2015NewLine    Console.WriteLine("Warranty service level description: {0}", (string)o["ServiceLevelDescription"]);Di2015NewLine}Di2015NewLine
18348171Di2015UniqueSeparatorN
18348171Di2015UniqueSeparatorM
18348171Di2015UniqueSeparatorN*M
18348171Di2015UniqueSeparatorM+N
18348171Di2015UniqueSeparatorvar setA = new HashSet<int>(listA);Di2015NewLineforeach (var b in listB) {Di2015NewLine    if (setA.Contains(b)) {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
18348171Di2015UniqueSeparatorforeach (var ab in listA.Intersect(listB)) {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
18348190Di2015UniqueSeparatorRaven-Entity-Name
18348190Di2015UniqueSeparatoro=>o.CustomerId
18348190Di2015UniqueSeparatorCustomerId
18348190Di2015UniqueSeparatorSale
18348190Di2015UniqueSeparatorsession.Load
18348190Di2015UniqueSeparatorCustomer
18348190Di2015UniqueSeparatorsession.Load<Customer>
18348190Di2015UniqueSeparator"customers/123"
18348190Di2015UniqueSeparatorusing
18348190Di2015UniqueSeparatoro=>o.PrimaryCustomerId
18348190Di2015UniqueSeparatoro=>o.SecondaryCustomerId
18348190Di2015UniqueSeparator"customers/123"
18348190Di2015UniqueSeparatorSale.CustomerId
18348190Di2015UniqueSeparator123
18348190Di2015UniqueSeparator.Include<Sale>(o=> "customers/" + o.CustomerId)
18348217Di2015UniqueSeparatorvar threeSides = TriangleSideLengths.Select(int.Parse).ToArray();Di2015NewLine
18348217Di2015UniqueSeparatorArray.Sort(threeSides);Di2015NewLineif (threeSides[0]+threeSides[1] > threeSides[2]) {Di2015NewLine    ...Di2015NewLine}Di2015NewLine
18348598Di2015UniqueSeparatorprivate TaxonomyFieldValueCollection TaxonomyFieldToCollection(object item)Di2015NewLine    {Di2015NewLine        if (item != null)Di2015NewLine        {Di2015NewLine            TaxonomyFieldValue temp = item as TaxonomyFieldValue;Di2015NewLine            TaxonomyFieldValueCollection tempCol = new TaxonomyFieldValueCollection(temp.ValidatedString);Di2015NewLine            return tempCol;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            TaxonomyFieldValueCollection tempCol = new TaxonomyFieldValueCollection(string.Empty);Di2015NewLine            tempCol.Clear();Di2015NewLine            return tempCol;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18348598Di2015UniqueSeparatorforeach (TaxonomyFieldValue value in currentCustomerItem.Country)Di2015NewLine{Di2015NewLine     orderedCustomerList = orderedCustomerList.ThenByDescending(o => o.Country.ToString().Contains(value.Label));Di2015NewLine}Di2015NewLine
18348878Di2015UniqueSeparatorDebug.WriteLine("OnEvent:" + Thread.CurrentThread.ManagedThreadId)
18348878Di2015UniqueSeparatorOnEvent
18348878Di2015UniqueSeparatorTimer
18348878Di2015UniqueSeparatorTimer
18348878Di2015UniqueSeparatorSend
18348878Di2015UniqueSeparatorPost
18348896Di2015UniqueSeparator^([1-9]{1,2},){4}[1-9]{1,2}$
18348896Di2015UniqueSeparator([1-9]{1,2},){4}[1-9]{1,2}
18348896Di2015UniqueSeparatorStart
18348896Di2015UniqueSeparatorEnd
18349033Di2015UniqueSeparatorDrawImage
18349033Di2015UniqueSeparatorImage DrawText(string text, Font font, Color textColor, Color backColor) {Di2015NewLine    Size textSize;Di2015NewLine    using(Image tmp = new Bitmap(1, 1)) {Di2015NewLine        using(Graphics g = Graphics.FromImage(tmp)) {Di2015NewLine            textSize = Size.Ceiling(g.MeasureString(text, font));Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Bitmap bitmap = new Bitmap(textSize.Width, textSize.Height);Di2015NewLine    using(Graphics g = Graphics.FromImage(bitmap)) {Di2015NewLine        g.Clear(backColor);Di2015NewLine        using(Brush textBrush = new SolidBrush(textColor)) {Di2015NewLine            g.DrawString(text, font, textBrush, 0, 0);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    const double Distortion = 2.0;Di2015NewLine    const double F = Math.PI / 64.0;Di2015NewLine    using(Bitmap copy = bitmap.Clone() as Bitmap) {Di2015NewLine        for(int y = 0; y < textSize.Height; y++) {Di2015NewLine            for(int x = 0; x < textSize.Width; x++) {Di2015NewLine                int newX = (int)(x + Distortion * Math.Sin(F * y));Di2015NewLine                int newY = (int)(y + Distortion * Math.Cos(F * x));Di2015NewLine                if(newX < 0 || newX >= textSize.Width) newX = 0;Di2015NewLine                if(newY < 0 || newY >= textSize.Height) newY = 0;Di2015NewLine                bitmap.SetPixel(x, y, copy.GetPixel(newX, newY));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return bitmap;Di2015NewLine}Di2015NewLine
18349120Di2015UniqueSeparatorstring Server_URL = "https://www.sandbox.paypal.com/cgi-bin/webscr?";Di2015NewLine
18349237Di2015UniqueSeparatorvar pound1 = 151.10;Di2015NewLinevar pound2 = 142.19;Di2015NewLinevar poundDiff = (pound1 - pound2);Di2015NewLineDi2015NewLinevar finalPoundValue = (int) poundDiff;Di2015NewLinevar finalOunceValue = (int) ((poundDiff - finalPoundValue) * 16);Di2015NewLine
18349306Di2015UniqueSeparatorvar foo = new int[] { 1,2,3,4,5 };Di2015NewLinefoo = foo.Select(x=>x/2).ToArray();Di2015NewLine
18349469Di2015UniqueSeparatorpublic static object GetDefault(Type type)Di2015NewLine{Di2015NewLine   if(type.IsValueType)Di2015NewLine   {Di2015NewLine      return Activator.CreateInstance(type);Di2015NewLine   }Di2015NewLine   return null;Di2015NewLine}Di2015NewLine
18349508Di2015UniqueSeparatorfloat.Parse
18349508Di2015UniqueSeparatorfloat value = float.Parse(string.Format("{0}.{1}", a.ToString(), b.ToString()));Di2015NewLine
18349729Di2015UniqueSeparatorBorder
18349729Di2015UniqueSeparator    <Border Margin="5" Padding="5" BorderThickness="1" BorderBrush="Red" Background="AntiqueWhite" CornerRadius="10">Di2015NewLine        <TextBlock Text="Lorem ipsum"/>Di2015NewLine    </Border>Di2015NewLine
18349805Di2015UniqueSeparatorpublic string FullNameDi2015NewLine{Di2015NewLine    // This is assuming you've also fixed the property names to be conventionalDi2015NewLine    // I'd also suggest changing "Name" to "GivenName" or "FirstName".Di2015NewLine    get { return string.Format("{0} {1} {2}", Name, LastName, Age); }Di2015NewLine}Di2015NewLine
18349805Di2015UniqueSeparatorFullName
18350115Di2015UniqueSeparatormyList1 = myList1.Concat(myList2).ToList();Di2015NewLine
18350145Di2015UniqueSeparatorvar items = from t in sourceDi2015NewLine    select new { a = t, b = t.Type == "Ask" ? -t.Price : t.Price };Di2015NewLinevar sorted = from x in itemsDi2015NewLine     orderby x.a.Type, x.bDi2015NewLine     select x.a;Di2015NewLine
18350342Di2015UniqueSeparatorDateSeparator
18350342Di2015UniqueSeparator.
18350342Di2015UniqueSeparator/
18350342Di2015UniqueSeparator/
18350342Di2015UniqueSeparatorCultureInfo c = new CultureInfo("de-DE");Di2015NewLineConsole.WriteLine(c.DateTimeFormat.DateSeparator); //Prints . (dot)Di2015NewLine
18350342Di2015UniqueSeparatorThe "/" Custom Format Specifier
18350791Di2015UniqueSeparatorPUBLIC
18350809Di2015UniqueSeparatorprivate void updateDg()Di2015NewLine{Di2015NewLine  frmChild2 _frmChild2 = new frmChild2(this);Di2015NewLine  _frmChild2.Show();Di2015NewLine  _frmChild2.InsertDataGridview1("1,2,3,4","A^BB^CCC^DDDD");Di2015NewLine}Di2015NewLine
18350809Di2015UniqueSeparatorInitializeComponent
18350905Di2015UniqueSeparatorGridView
18350905Di2015UniqueSeparatoronClick
18350905Di2015UniqueSeparatorchild-view1 inside the item, also made them
18350905Di2015UniqueSeparator. Every time you click on each child-view, display popup (or switch that
18350905Di2015UniqueSeparator) with an
18350905Di2015UniqueSeparatoror
18350905Di2015UniqueSeparatoror whatever fit with you data, change them, save, refresh
18350948Di2015UniqueSeparatorselect MemNo, MemDOB, MemberType, MemShrBalDi2015NewLine  From MembershipDi2015NewLine  Where (MemberType = 1 or MemberType = 2)Di2015NewLine  and MemDOB > '1973/12/31' Di2015NewLine  and MemShrBal = 250.00Di2015NewLine
18350948Di2015UniqueSeparatorand
18350948Di2015UniqueSeparatoror
18350948Di2015UniqueSeparator  MemberType = 1Di2015NewLineDi2015NewLine  orDi2015NewLine      MemberType = 2Di2015NewLine      and MemDOB > '1973/12/31' Di2015NewLine      and MemShrBal = 250.00Di2015NewLine
18351126Di2015UniqueSeparator((TextBox)List1[i]).Text = "new string";Di2015NewLine
18351126Di2015UniqueSeparatorList<TextBox> instead of ArrayListDi2015NewLine
18351135Di2015UniqueSeparatorHow about adapter pattern?Di2015NewLine
18351153Di2015UniqueSeparatorpublic Stream GetStream(Stream cursorStream)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine       //getting streamDi2015NewLine    }Di2015NewLine    catch(IOE)Di2015NewLine    {Di2015NewLine        MessageBox.Show(this, "Unable to get stream, your temporaryDi2015NewLine                              folder may be full, do you want to try deleting Di2015NewLine                                some and try again?");Di2015NewLine         if(yes)Di2015NewLine         tryDi2015NewLine         {Di2015NewLine             //delete and try againDi2015NewLine             return GetStream(cursorStream);Di2015NewLine         }Di2015NewLine         catch(IOE)Di2015NewLine          {Di2015NewLine                //no luckDi2015NewLine           }Di2015NewLine          elseDi2015NewLine              return null;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18351153Di2015UniqueSeparatorDirectory.EnumerateFiles(Path.GetTempPath(), "*", SearchOption.TopLevelOnly)Di2015NewLine  .Count() == ushort.MaxValue;Di2015NewLine
18351329Di2015UniqueSeparatorPathGradientBrush
18351377Di2015UniqueSeparatorXslCompiledTransform xsltTrans = new XslCompiledTransform();Di2015NewLinestring htmlResult;Di2015NewLinestring xmlContents = @"L:\\ProjectGroup\\GK\\XML documents\\Parent-Child.xml";Di2015NewLineDi2015NewLinepublic String getHTMLresult()Di2015NewLine{Di2015NewLine    xsltTrans.Load(@"L:\\ProjectGroup\\GK\\XML documents\\blah.xsl");Di2015NewLine    StringWriter sw = new StringWriter();Di2015NewLine    XmlTextWriter xw = new XmlTextWriter(sw);Di2015NewLine    xsltTrans.Transform(xmlContents, null, xw);Di2015NewLine    htmlResult = sw.ToString();Di2015NewLine    return htmlResult;Di2015NewLine}Di2015NewLine
18351393Di2015UniqueSeparatorShowDialog
18351393Di2015UniqueSeparatornewForm.ShowDialog()
18351393Di2015UniqueSeparatorthis.Close()
18351393Di2015UniqueSeparatorthis.Hide()
18351393Di2015UniqueSeparatorthis.Hide();Di2015NewLineDi2015NewLinenewForm.ShowDialog();Di2015NewLineDi2015NewLinethis.Close();Di2015NewLine
18351393Di2015UniqueSeparatorthis.Hide()
18351393Di2015UniqueSeparatorif(this.InvokeRequired){Di2015NewLine     Action act = () => {Di2015NewLine          this.Hide();Di2015NewLine     }Di2015NewLine     this.Invoke(act)Di2015NewLine}Di2015NewLineelse{Di2015NewLine     this.Hide();Di2015NewLine}Di2015NewLine
18351393Di2015UniqueSeparatorprivate void AddNewForm(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ...Di2015NewLineDi2015NewLine    if(this.InvokeRequired)Di2015NewLine    {Di2015NewLine        Action act = () =>Di2015NewLine        {Di2015NewLine            this.Hide();Di2015NewLine        };Di2015NewLineDi2015NewLine      this.Invoke(act);Di2015NewLine    }Di2015NewLineDi2015NewLine    elseDi2015NewLine    {Di2015NewLine      this.Hide();Di2015NewLine    }Di2015NewLineDi2015NewLine    newForm.ShowDialog();Di2015NewLineDi2015NewLine}Di2015NewLine
18351407Di2015UniqueSeparator(string[])dr["objective"]Di2015NewLine
18351407Di2015UniqueSeparatordr["objective"]
18351407Di2015UniqueSeparatorstring[]
18351407Di2015UniqueSeparatorobjectiveStringList.Add((string)dr["objective"]);Di2015NewLine
18351522Di2015UniqueSeparatorSystem.Drawing.Color col = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");Di2015NewLine
18351686Di2015UniqueSeparatorEquals
18351698Di2015UniqueSeparatormsbuild
18351698Di2015UniqueSeparator<Target Name="AfterBuild">Di2015NewLine   <ItemGroup>Di2015NewLine       <Copy Condition="!Exist('$(DestinationFolder)\\$(FileName)')" SourceFiles="$(ProjectFilePath)\\$(FileName)" DestinationFolder="$(DestinationFolder)" />Di2015NewLine   </ItemGroup>Di2015NewLine</Target>Di2015NewLine
18351706Di2015UniqueSeparatorList<string>
18351706Di2015UniqueSeparatorList<string> allFiles = new List<string>();Di2015NewLineif(Session["f_name"] != null)Di2015NewLine    allFiles = (List<string>)Session["f_name"];Di2015NewLineelseDi2015NewLine    Session["f_name"] = allFiles;Di2015NewLineDi2015NewLineallFiles.Add(filename);Di2015NewLineDi2015NewLineforeach(string fileName in allFiles)Di2015NewLine{Di2015NewLine    // now create the LinkButtons ...Di2015NewLine}Di2015NewLine
18351706Di2015UniqueSeparatorUploadButton
18351706Di2015UniqueSeparatorPage_Init
18351706Di2015UniqueSeparatorPage_Load
18351706Di2015UniqueSeparatorLinkButtons
18351767Di2015UniqueSeparatorBuild
18351874Di2015UniqueSeparatorthis.columnName.ValueType = typeof(long); Di2015NewLine
18351908Di2015UniqueSeparatorusing
18351908Di2015UniqueSeparatorprivate void SaveControl(byte userControlType, ISelectableViewModel viewModel, Guid guid)Di2015NewLine{Di2015NewLine    using(var context = new EntitiesNew())Di2015NewLine    {Di2015NewLine        var instrumentSettings = //...Di2015NewLineDi2015NewLine        //...Di2015NewLineDi2015NewLine         context.SaveChanges();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18351908Di2015UniqueSeparatorpublic static void InitializeDatabaseConnection()Di2015NewLine{Di2015NewLine    using(var context = new EntitiesNew())Di2015NewLine    {Di2015NewLine        context.Database.Initialize(false);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18351908Di2015UniqueSeparatorpublic static void Main(string[] args)Di2015NewLine{Di2015NewLine    //Assumes you put the function inside the EntitiesNew classDi2015NewLine    Task.Run(() => EntitiesNew.InitializeDatabaseConnection()); Di2015NewLineDi2015NewLine    Application.Run(new Form1());Di2015NewLine}Di2015NewLine
18352010Di2015UniqueSeparator"fr-FR"
18352010Di2015UniqueSeparatorResource.resx
18352010Di2015UniqueSeparatorResource.resx
18352010Di2015UniqueSeparatorResource.fr-FR.resx
18352010Di2015UniqueSeparatorResource.nl-NL.resx
18352010Di2015UniqueSeparatorTestData
18352010Di2015UniqueSeparatorText
18352010Di2015UniqueSeparatorResource.resx
18352010Di2015UniqueSeparatorResource.fr-FR.resx
18352180Di2015UniqueSeparatorclass Physics {Di2015NewLineDi2015NewLine public Vector3 Traslation;Di2015NewLine public Vector3 Scale;Di2015NewLine public Quaternion Rotation;Di2015NewLineDi2015NewLine public Physics Parent;Di2015NewLine public List<Physics> Children;Di2015NewLine public Matrix World;Di2015NewLineDi2015NewLineDi2015NewLine public Update() {Di2015NewLine      World =   Matrix.CreateScale(Scale) Di2015NewLine              * Matrix.CreateFromQuaternion(Rotation) Di2015NewLine              * Matrix.CreateTranslation;Di2015NewLine      if (Parent!=null) {Di2015NewLine         World *= Parent.World ;Di2015NewLine      }    Di2015NewLine      foreach (var child in children) child.Update();         Di2015NewLine }Di2015NewLine}Di2015NewLine
18352401Di2015UniqueSeparatorASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLinebyte[] data = encoder.GetBytes(serializedObject); // a json object, or xml, whatever...Di2015NewLineDi2015NewLineHttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;Di2015NewLinerequest.Method = "POST";Di2015NewLinerequest.ContentType = "application/json";Di2015NewLinerequest.ContentLength = data.Length;Di2015NewLinerequest.Expect = "application/json";Di2015NewLineDi2015NewLinerequest.GetRequestStream().Write(data, 0, data.Length);Di2015NewLineDi2015NewLineHttpWebResponse response = request.GetResponse() as HttpWebResponse;Di2015NewLine
18352405Di2015UniqueSeparatorprivate DateTime m_LastDateTime;Di2015NewLineDi2015NewLineprivate void Cld_SelectedDateChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    m_LastDateTime = e.Start;Di2015NewLine    textBox1.Text = m_LastDateTime.ToString();Di2015NewLine    txtHH.Text =m_LastDateTime.Hour.ToString();Di2015NewLine    txtMM.Text =m_LastDateTime.Minute.ToString();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnAddHour_Click( object sender, RoutedEventArgs e )Di2015NewLine{Di2015NewLine    m_LastDateTime = m_LastDateTime.AddHours(1);Di2015NewLine    txtHH.Text = m_LastDateTime.ToString("HH");Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnAddMinute_Click( object sender, RoutedEventArgs e )Di2015NewLine{Di2015NewLine    m_LastDateTime = m_LastDateTime.AddMinutes(1);Di2015NewLine    txtMM.Text = m_LastDateTime.ToString( "mm" );Di2015NewLine}Di2015NewLine
18352410Di2015UniqueSeparatorclass DisplayNameLanguage : DisplayNameAttributeDi2015NewLine{Di2015NewLine    private readonly string resourceName;Di2015NewLine    public DisplayNameLanguage(string resourceName)Di2015NewLine        : base()Di2015NewLine    {Di2015NewLine        this.resourceName = resourceName;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override string DisplayNameDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return getDescriptionForLanguage(resourceName);Di2015NewLine        }Di2015NewLine     }Di2015NewLine}Di2015NewLine
18352410Di2015UniqueSeparatorgetDescriptionForLanguage
18352410Di2015UniqueSeparator[MetadataType(typeof(TestMD))]Di2015NewLinepublic partial class Test { }Di2015NewLinepublic partial class TestMDDi2015NewLine{Di2015NewLine    [DisplayNameLanguage("Test")]Di2015NewLine    public string Prop1 { get; set; }Di2015NewLine}Di2015NewLine
18352428Di2015UniqueSeparatorSwitchPage
18352504Di2015UniqueSeparatorAltChunk
18352504Di2015UniqueSeparatoraltchunk
18352504Di2015UniqueSeparatorUsing myDoc = DocumentFormat.OpenXml.Packaging.WordprocessingDocument.Open("D:\\\\Test.docx", True)Di2015NewLine        Dim altChunkId = "AltChunkId" + DateTime.Now.Ticks.ToString().Substring(0, 2)Di2015NewLine        Dim mainPart = myDoc.MainDocumentPartDi2015NewLine        Dim chunk = mainPart.AddAlternativeFormatImportPart(Di2015NewLine            DocumentFormat.OpenXml.Packaging.AlternativeFormatImportPartType.WordprocessingML, altChunkId)Di2015NewLine        Using fileStream As IO.FileStream = IO.File.Open("D:\\\\Test1.docx", IO.FileMode.Open)Di2015NewLine            chunk.FeedData(fileStream)Di2015NewLine        End UsingDi2015NewLine        Dim altChunk = New DocumentFormat.OpenXml.Wordprocessing.AltChunk()Di2015NewLine        altChunk.Id = altChunkIdDi2015NewLine        mainPart.Document.Body.InsertAfter(altChunk, mainPart.Document.Body.Elements(Of DocumentFormat.OpenXml.Wordprocessing.Paragraph).Last())Di2015NewLine        mainPart.Document.Save()Di2015NewLineEnd UsingDi2015NewLine
18352504Di2015UniqueSeparatoraltchunkid
18352504Di2015UniqueSeparatorAlternativeFormatImportPart
18352504Di2015UniqueSeparatormainDocumentPart
18352504Di2015UniqueSeparatorId
18352504Di2015UniqueSeparatorAltchunk
18352504Di2015UniqueSeparatorid
18352504Di2015UniqueSeparatorAlternativeFormatImportPart
18352504Di2015UniqueSeparatorAltChunks
18352504Di2015UniqueSeparatorstring altChunkId = "AltChunkId" + DateTime.Now.Ticks.ToString().Substring(0, 2);
18352504Di2015UniqueSeparatorAltChunkId
18352504Di2015UniqueSeparatorAlternativeFormatImportPart
18352504Di2015UniqueSeparatorDim chunk As AlternativeFormatImportPart = mainPart.AddAlternativeFormatImportPart(DocumentFormat.OpenXml.Packaging.AlternativeFormatImportPartType.WordprocessingML)Di2015NewLineDim altchunkid As String = mainPart.GetIdOfPart(chunk)Di2015NewLine
18352504Di2015UniqueSeparatorAlternativeFormatImportPart chunk = mainPart.AddAlternativeFormatImportPart(DocumentFormat.OpenXml.Packaging.AlternativeFormatImportPartType.WordprocessingML);Di2015NewLinestring altchunkid = mainPart.GetIdOfPart(chunk);Di2015NewLine
18352548Di2015UniqueSeparatorRegex rgx = new Regex(pattern);Di2015NewLinestring input = "This is   text with   far  too   much   " + Di2015NewLine                 "whitespace.";Di2015NewLinestring pattern = "\\\\s*!\\\\s*";Di2015NewLinestring replacement = "!";Di2015NewLineRegex rgx = new Regex(pattern);Di2015NewLinestring result = rgx.Replace(input, replacement);Di2015NewLine
18352613Di2015UniqueSeparatorEditorBrowsableAttribute
18352613Di2015UniqueSeparator[EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLinepublic class BananaHumanDi2015NewLine{Di2015NewLine    //....Di2015NewLine}Di2015NewLine
18352613Di2015UniqueSeparatorBananaHuman
18352613Di2015UniqueSeparatorBananaHuman
18352613Di2015UniqueSeparatorEditorBrowsable
18352643Di2015UniqueSeparatorUPDATE LDi2015NewLineSET <col> = <value>Di2015NewLineFROM Lessons AS LDi2015NewLineINNER JOIN CLasses ON L.LessonID = Classes.ClassIDDi2015NewLine
18352658Di2015UniqueSeparatorGuid PersonId
18352658Di2015UniqueSeparatorPerson
18352853Di2015UniqueSeparatorCommandBehavior.CloseConnection
18352853Di2015UniqueSeparatorExecuteReader
18352853Di2015UniqueSeparatorstring region = "North";Di2015NewLineusing(var conn = dbProvider.CreateConnection()) {Di2015NewLine    return conn.Query<Custom>(Di2015NewLine        "select * from Customers where Region=@region",Di2015NewLine        new { region } // full parameterization, the easy wayDi2015NewLine    ).ToList(); // Query<T> returns IEnumerable<T>, ideal for LINQ-to-ObjectsDi2015NewLine}Di2015NewLine
18352867Di2015UniqueSeparatorinternal class PropertyNameOmitter : ISpecimenBuilderDi2015NewLine{Di2015NewLine    private readonly IEnumerable<string> names;Di2015NewLineDi2015NewLine    internal PropertyNameOmitter(params string[] names)Di2015NewLine    {Di2015NewLine        this.names = names;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object Create(object request, ISpecimenContext context)Di2015NewLine    {Di2015NewLine        var propInfo = request as PropertyInfo;Di2015NewLine        if (propInfo != null && names.Contains(propInfo.Name))Di2015NewLine            return new OmitSpecimen();Di2015NewLineDi2015NewLine        return new NoSpecimen(request);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18352867Di2015UniqueSeparatorvar fixture = new Fixture();Di2015NewLinefixture.Customizations.Add(Di2015NewLine    new PropertyNameOmitter("AllContacts"));Di2015NewLineDi2015NewLinevar sut = fixture.Create<OfficeBuilding>();Di2015NewLine// -> The 'AllContacts' property should be omitted now.Di2015NewLine
18352957Di2015UniqueSeparatorvar items = (from p in db.tbl_film select p).ToList();Di2015NewLineforeach (var item in items)Di2015NewLine{Di2015NewLine    // Create your ListViewItem hereDi2015NewLine    // Then add it to your listView here.Di2015NewLine}Di2015NewLine
18352957Di2015UniqueSeparatorFirstOrDefault()
18353125Di2015UniqueSeparatorsender
18353125Di2015UniqueSeparatorDataContext
18353125Di2015UniqueSeparatorprivate void GetName_Tap(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine{Di2015NewLine   var element = (FrameworkElement)sender;Di2015NewLine   StaffData data = (StaffData)element.DataContext;Di2015NewLine   MessageBox.Show(data.Name);Di2015NewLine}Di2015NewLine
18353202Di2015UniqueSeparatorZipArchive
18353202Di2015UniqueSeparatorvar zArch = new ZipArchive(file.InputStream);Di2015NewLineXDocument xDoc = null;Di2015NewLineusing (var stream = zArch.GetEntry("yourFile.xml").Open())Di2015NewLine    xDoc = XDocument.Load(stream);Di2015NewLineif (xDoc != null) //be safe not sorryDi2015NewLine    //manipulate the XDocument.Di2015NewLine
18353275Di2015UniqueSeparatorvar uri = new Uri(LDAPConnectionString);Di2015NewLinevar host = uri.Host;Di2015NewLinevar Container =uri.Segments[1];Di2015NewLine
18353356Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static int ITERATIONS = 100000;Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var pass_packet = Enumerable.Range(0, 1024).Select(i => (byte)i).ToArray();Di2015NewLineDi2015NewLine        int local_index = 5;Di2015NewLineDi2015NewLine        var sw = Stopwatch.StartNew();Di2015NewLine        var result = StringBuilderTEST(pass_packet, local_index);Di2015NewLineDi2015NewLine        Console.WriteLine(result + " in {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        //second optionDi2015NewLine        sw.Restart();Di2015NewLine        var result2 = ArrayReversalTEST(pass_packet, local_index);Di2015NewLine        Console.WriteLine(result2 + " in {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        sw.Restart();Di2015NewLine        var result3 = ArrayReversal2TEST(pass_packet, local_index);Di2015NewLine        Console.WriteLine(result3 + " in {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        sw.Restart();Di2015NewLine        var result4 = StupidlyFastTEST(pass_packet, local_index);Di2015NewLine        Console.WriteLine(result4 + " in {0}ms", sw.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        Console.WriteLine("Results are equal?  " + (result == result2 && result == result3 && result == result4));Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string StringBuilderTEST(byte[] pass_packet, int local_index)Di2015NewLine    {Di2015NewLine        string result = null;Di2015NewLine        for (int b = 0; b < ITERATIONS; b++)Di2015NewLine        {Di2015NewLine            var sb = new StringBuilder();Di2015NewLine            for (int i = 511; i >= 400; i--)Di2015NewLine                sb.Append(BitConverter.ToString(pass_packet, local_index + i, 1));Di2015NewLine            result = sb.ToString();Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string ArrayReversalTEST(byte[] pass_packet, int local_index)Di2015NewLine    {Di2015NewLine        string result = null;Di2015NewLine        for (int b = 0; b < ITERATIONS; b++)Di2015NewLine        {Di2015NewLine            var selectedData = pass_packet.Skip(400 + local_index).Take(112).Reverse().ToArray();Di2015NewLine            result = BitConverter.ToString(selectedData).Replace("-", "");Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string ArrayReversal2TEST(byte[] pass_packet, int local_index)Di2015NewLine    {Di2015NewLine        string result = null;Di2015NewLine        for (int b = 0; b < ITERATIONS; b++)Di2015NewLine        {Di2015NewLine            var tempArray = new byte[112];Di2015NewLine            Array.Copy(pass_packet, 400 + local_index, tempArray, 0, 112);Di2015NewLine            Array.Reverse(tempArray);Di2015NewLine            result = BitConverter.ToString(tempArray).Replace("-", "");Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine    private static string StupidlyFastTEST(byte[] pass_packet, int local_index)Di2015NewLine    {Di2015NewLine        string result = null;Di2015NewLine        string hex = "0123456789ABCDEF";Di2015NewLine        for (int it = 0; it < ITERATIONS; it++)Di2015NewLine        {Di2015NewLine            var tempArray = new char[112 * 2];Di2015NewLine            int tempArrayIndex = 0;Di2015NewLine            for (int i = 511; i >= 400; i--)Di2015NewLine            {Di2015NewLine                var b = pass_packet[local_index + i];Di2015NewLine                tempArray[tempArrayIndex++] = hex[b >> 4];Di2015NewLine                tempArray[tempArrayIndex++] = hex[b & 0x0F];Di2015NewLine            }Di2015NewLine            result = new string(tempArray);Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18353356Di2015UniqueSeparatorTest 1 in 478msDi2015NewLineTest 2 in 1134msDi2015NewLineTest 3 in 516msDi2015NewLineTest 4 in 114msDi2015NewLineResults are equal?  TrueDi2015NewLine
18353356Di2015UniqueSeparator//Without String.Replace in tests 2 and 3Di2015NewLineTest 1 in 475msDi2015NewLineTest 2 in 704msDi2015NewLineTest 3 in 92msDi2015NewLineTest 4 in 115msDi2015NewLineResults are equal?  FalseDi2015NewLine
18353663Di2015UniqueSeparatorstring result = dateObject.Value.ToString("d", Model.Culture);Di2015NewLine
18353663Di2015UniqueSeparatorSystem.Threading.Thread.CurrentThread.CurrentCulture = Model.Culture;Di2015NewLinestring result = dateObject.Value.ToShortDateString();Di2015NewLine
18353833Di2015UniqueSeparatorFooList = FooList.Except(remList).ToList();Di2015NewLine
18353844Di2015UniqueSeparatorGlimpse
18353844Di2015UniqueSeparatorweb.config
18353844Di2015UniqueSeparator<glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">Di2015NewLine<inspectors>Di2015NewLine      <ignoredTypes>Di2015NewLine        <add type="Glimpse.AspNet.Inspector.RoutesInspector, Glimpse.AspNet"/>Di2015NewLine      </ignoredTypes>Di2015NewLine    </inspectors>Di2015NewLine</glimpse>Di2015NewLine
18353853Di2015UniqueSeparatorpublic  static string ConvertToDate(string persianDate)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (persianDate.Length != 10)Di2015NewLine            {Di2015NewLine                char a = Convert.ToChar(persianDate.Substring(4, 1));Di2015NewLine                char b = Convert.ToChar(persianDate.Substring(6, 1));Di2015NewLine                if (a == '/' && b == '/')Di2015NewLine                {Di2015NewLine                    if (persianDate.Length == 9)Di2015NewLine                    {Di2015NewLine                        persianDate = persianDate.Insert(5, '0'.ToString());Di2015NewLine                    }Di2015NewLine                    if (persianDate.Length == 8)Di2015NewLine                    {Di2015NewLine                        persianDate = persianDate.Insert(5, '0'.ToString());Di2015NewLine                        persianDate = persianDate.Insert(8, '0'.ToString());Di2015NewLine                    }Di2015NewLineDi2015NewLineDi2015NewLine                }Di2015NewLine                char c = Convert.ToChar(persianDate.Substring(7, 1));Di2015NewLine                if (c == '/')Di2015NewLine                {Di2015NewLine                    if (persianDate.Length == 9)Di2015NewLine                    {Di2015NewLine                        persianDate = persianDate.Insert(8, '0'.ToString());Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            return persianDate;Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine           ExceptionkeeperBll.LogFileWrite(ex);Di2015NewLine            return null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18353921Di2015UniqueSeparatorobject
18353921Di2015UniqueSeparatornew ActiveXObject("AxControls.HelloWorld")
18353921Di2015UniqueSeparatoraxHello.SaveImgFromClipBoard();Di2015NewLine
18353921Di2015UniqueSeparatorIObjectSafety
18353921Di2015UniqueSeparatoriexplore.exe
18354255Di2015UniqueSeparatorStream
18354255Di2015UniqueSeparatorelse
18354255Di2015UniqueSeparatorStreamWriter File = new StreamWriter(test);Di2015NewLineFile.Close();Di2015NewLineMessageBox.Show(test + " Has been created");Di2015NewLine
18354503Di2015UniqueSeparatorpublic abstract class PetDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Dog : PetDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Cat : PetDi2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
18354503Di2015UniqueSeparatorpublic class PetFilter<T> : IFilter<T> where T : PetDi2015NewLine{Di2015NewLine    public IEnumerable<T> ApplyFilter(IEnumerable<T> list)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18354558Di2015UniqueSeparatorpublic static void OnClientConnect(IAsyncResult asyn)Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    Socket m_socWorkerInstance = m_socListener.EndAccept(asyn);Di2015NewLine                    clientSocketList.Add(m_socWorkerInstance);Di2015NewLineDi2015NewLine                    WaitForData(m_socWorkerInstance);Di2015NewLine                }Di2015NewLine                catch (ObjectDisposedException)Di2015NewLine                {Di2015NewLine                    System.Diagnostics.Debugger.Log(0, "1", "\\n OnClientConnection: Socket has been closed\\n");Di2015NewLine                }Di2015NewLine                catch (SocketException se)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(se.Message);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine    public static void WaitForData(System.Net.Sockets.Socket soc)Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    if (pfnWorkerCallBack == null)Di2015NewLine                    {Di2015NewLine                        pfnWorkerCallBack = new AsyncCallback(OnDataReceived);Di2015NewLine                    }Di2015NewLine                    CSocketPacket theSocPkt = new CSocketPacket();Di2015NewLine                    theSocPkt.thisSocket = soc;Di2015NewLine                    // now start to listen for any data...Di2015NewLine                    soc.BeginReceive(theSocPkt.dataBuffer, 0, theSocPkt.dataBuffer.Length, SocketFlags.None, pfnWorkerCallBack, theSocPkt);Di2015NewLine                    m_socListener.BeginAccept(new AsyncCallback(OnClientConnect), null);Di2015NewLine                }Di2015NewLine                catch (SocketException se)Di2015NewLine                {Di2015NewLine                    Console.WriteLine(se.Message);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine
18354578Di2015UniqueSeparatorcatch
18354578Di2015UniqueSeparator_persistentConnection
18354578Di2015UniqueSeparatorBeginReceive()
18354626Di2015UniqueSeparatorSystem.Xml.Xsl.XslTransform
18354626Di2015UniqueSeparatorSystem.Xml.Xsl.XslCompiledTransform
18354626Di2015UniqueSeparatorSystem.Xml.dll
18354626Di2015UniqueSeparatorXslCompiledTransform
18354626Di2015UniqueSeparatorXslTransform
18354626Di2015UniqueSeparatorXslCompiledTransform
18354626Di2015UniqueSeparatorXslTransform
18354678Di2015UniqueSeparatorvar example = JsonConvert.DeserializeObject<List<readqueriesObject>>(json);Di2015NewLine
18354678Di2015UniqueSeparatorlistreadqueries
18354678Di2015UniqueSeparator{queries:[...]}
18354695Di2015UniqueSeparatorDataTable
18354695Di2015UniqueSeparatorDataBind()
18354695Di2015UniqueSeparatorusing
18354871Di2015UniqueSeparatorstatic int nextCatID;Di2015NewLineprivate readonly int catID;Di2015NewLineprivate string category;Di2015NewLine...Di2015NewLinepublic Category(string category)Di2015NewLine{Di2015NewLine    catID = Interlocked.Increment(ref nextCatID);Di2015NewLine    this.category = categoryDi2015NewLine}Di2015NewLine
18354871Di2015UniqueSeparatorcatID
18354871Di2015UniqueSeparatorstatic int nextCatID;Di2015NewLine[NonSerialized]Di2015NewLineprivate int catID;Di2015NewLine
18354871Di2015UniqueSeparatorreadonly
18354871Di2015UniqueSeparator[OnDeserialized()]Di2015NewLineprivate void OnDeserialized(StreamingContext context)Di2015NewLine{Di2015NewLine    catID = Interlocked.Increment(ref nextCatID);Di2015NewLine}Di2015NewLine
18354908Di2015UniqueSeparator  for (int i = 0; i < listView1.Items.Count; i++)Di2015NewLine    {Di2015NewLine    if (listView1.Items[i].Selected)Di2015NewLine      {Di2015NewLine        string var1 = listView1.Items[i].ToString();  // <-------Di2015NewLine        string var2 = var1.Substring(31, 5); Di2015NewLine        ... // code for other actionsDi2015NewLine        listView1.Items[i].Remove();Di2015NewLine        i--;Di2015NewLine      }Di2015NewLine    }Di2015NewLine
18355022Di2015UniqueSeparatora
18355022Di2015UniqueSeparatorRead()
18355022Di2015UniqueSeparatorReadLine()
18355022Di2015UniqueSeparatorReadLine()
18355022Di2015UniqueSeparator7->[enter]->5->[enter]
18355022Di2015UniqueSeparatora + b = 12
18355022Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Int32 a = 3;Di2015NewLine    Int32 b = 5;Di2015NewLineDi2015NewLine    a = Convert.ToInt32(Console.ReadLine());Di2015NewLine    b = Convert.ToInt32(Console.ReadLine());Di2015NewLineDi2015NewLine    Int32 a_plus_b = a + b;Di2015NewLine    Console.WriteLine("a + b =" + a_plus_b.ToString());Di2015NewLine}Di2015NewLine
18355184Di2015UniqueSeparatorIQueryable<dynamic>
18355184Di2015UniqueSeparatorvar qry = s.VideosDi2015NewLine.GroupBy(v => new { v.Name })Di2015NewLine.Select(g => newDi2015NewLine{Di2015NewLine    g.Key.Name,Di2015NewLine    TotalVideoHours = EntityFunctions.Truncate(g.Sum(c => SqlFunctions.DateDiff("s", c.RecordingStarted, c.RecordingEnded) / 3600.0), 2)Di2015NewLine});Di2015NewLine
18355189Di2015UniqueSeparator public static Vector3 PixelToScreen(GraphicsDevice device, float X, float Y)Di2015NewLine    {Di2015NewLine        X -= 0.5f; // Offset the "pixel value" by half a pixelDi2015NewLine        Y -= 0.5f; // To provide "expected results" use negative valueDi2015NewLine        float xscale = (float)device.Viewport.Width / 2;Di2015NewLine        float yscale = (float)device.Viewport.Height / 2;Di2015NewLine        return new Vector3((X / xscale) - 1f, 1f - (Y / yscale), 0);Di2015NewLine    }Di2015NewLine
18355200Di2015UniqueSeparatorTimer
18355200Di2015UniqueSeparatorpublic class NotATimer : TimerDi2015NewLine{Di2015NewLine    public NotATimer()Di2015NewLine    { }Di2015NewLine }Di2015NewLine
18355557Di2015UniqueSeparator private void OnLoad(object sender, EventArgs eventArgs)Di2015NewLine {Di2015NewLine    int selectedItem = Properties.Settings.Default.SelectedItem;Di2015NewLine    if (selectedItem != -1)Di2015NewLine    {Di2015NewLine       this.listView1.Items[selectedItem].Selected = true;Di2015NewLine    }Di2015NewLine  }Di2015NewLine
18355636Di2015UniqueSeparatorstring.Format
18355636Di2015UniqueSeparatorstring temp = @"DECLARE @rolename varchar(max)Di2015NewLineSET @rolename ='{0}' Di2015NewLineEXEC sp_addrolemember N'db_execute',@rolename";Di2015NewLineDi2015NewLinestring result = string.Format(temp, object.variable);Di2015NewLine
18355636Di2015UniqueSeparatorobject.variable
18355708Di2015UniqueSeparatorstring[] list = {"a","b","a","f","a",null,"a","e","a","e"};Di2015NewLinevar distinctList = list.Distinct();Di2015NewLineDi2015NewLineforeach (var str in distinctList)//Distinct list of valuesDi2015NewLine{Di2015NewLine    Console.Write(str); Di2015NewLine}Di2015NewLine
18355742Di2015UniqueSeparatorpublic ActionResult Log()Di2015NewLine {Di2015NewLine    var fileContents = System.IO.File.ReadAllText(Server.MapPath("~/Views/Builder/TestLogger.txt"));Di2015NewLine    return Content(fileContents);Di2015NewLine }Di2015NewLine
18355744Di2015UniqueSeparatorFill
18355744Di2015UniqueSeparatorint
18355744Di2015UniqueSeparatormyConnection
18355744Di2015UniqueSeparatorprivate static int ReadFirma()Di2015NewLine{Di2015NewLine    string queryString = "SELECT rocnik from FIRMA";Di2015NewLine    using (var connection = Di2015NewLine        new SqlConnection(myConnection.DataSource.ConnectionString))Di2015NewLine    using(var command = new SqlCommand(queryString, connection))Di2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        return Convert.ToInt32(command.ExecuteScalar());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinevoid SomeMethod()Di2015NewLine{Di2015NewLine    this.klientTableAdapter.Fill(ReadFirma());Di2015NewLine}Di2015NewLine
18355877Di2015UniqueSeparatorIEnumerable<T>
18355877Di2015UniqueSeparatorIEnumerable
18355877Di2015UniqueSeparatorGetEnumerator()
18355877Di2015UniqueSeparatorIEnumerator IEnumerable.GetEnumerator()Di2015NewLine{Di2015NewLine    return this.GetEnumerator();Di2015NewLine}Di2015NewLine
18355935Di2015UniqueSeparatorRegex.IsMatch("12345678901234.12", @"^\\d{1,14}(?:\\.\\d{1,2}){0,1}$")Di2015NewLine
18355935Di2015UniqueSeparator  private void TextBox1_TextChanged(object sender, TextChangedEventArgs e)Di2015NewLine  {Di2015NewLine     if (!Regex.IsMatch(TextBox1.Text, @"^\\d{1,14}(?:\\.\\d{0,2}){0,1}$"))Di2015NewLine     {Di2015NewLine        TextBox1.Text = TextBox1.Text.Substring(0, TextBox1.Text.Length - e.Changes.Last().AddedLength);Di2015NewLine        TextBox1.CaretIndex = TextBox1.Text.Length;Di2015NewLine     }Di2015NewLine  }Di2015NewLine
18356094Di2015UniqueSeparatorVisibilityFormatter
18356094Di2015UniqueSeparatorFormatter
18356094Di2015UniqueSeparatorFormatter
18356094Di2015UniqueSeparatorVisibilityFormatter
18356094Di2015UniqueSeparatorXXXConverter
18356094Di2015UniqueSeparatorXXXFormatter
18356113Di2015UniqueSeparator~Foo
18356113Di2015UniqueSeparatorMyCollection
18356113Di2015UniqueSeparatorMyCollection
18356113Di2015UniqueSeparator~Foo
18356113Di2015UniqueSeparatorIDisposable
18356159Di2015UniqueSeparatorRegister-PSSessionConfiguration -Name MyShell -StartupScript 'MyInitScript.ps1'Di2015NewLine
18356159Di2015UniqueSeparator        string shell = "http://schemas.microsoft.com/powershell/MyShell";Di2015NewLine        var target = new Uri("https://myserver:port/wsman");Di2015NewLine        var secured = new SecureString();Di2015NewLine        foreach (char letter in "password")Di2015NewLine        {Di2015NewLine            secured.AppendChar(letter);Di2015NewLine        }Di2015NewLine        secured.MakeReadOnly();Di2015NewLineDi2015NewLine        var credential = new PSCredential("username", secured);Di2015NewLine        var connectionInfo = new WSManConnectionInfo(target, shell, credential);Di2015NewLineDi2015NewLine        using (Runspace runspace = RunspaceFactory.CreateRunspace(connectionInfo))Di2015NewLine        {Di2015NewLine            runspace.Open();Di2015NewLineDi2015NewLine            using (var ps = PowerShell.Create())Di2015NewLine            {Di2015NewLine                ps.Runspace = runspace;Di2015NewLine                ps.AddCommand("Get-NAVServerInstance");Di2015NewLine                var output = ps.Invoke();Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18356238Di2015UniqueSeparator Uri.Compare(uri1, uri2, UriComponents.HostAndPort, ...) == 0 &&Di2015NewLine (url1.PathAndQueryStartsWith(url2.PathAndQuery) || url.PathAndQueryStartsWith(...));Di2015NewLine
18356238Di2015UniqueSeparator    var result = String.Compare(url1.Host, url2.Host);Di2015NewLine    if (result == 0)Di2015NewLine        return true;Di2015NewLine    elseDi2015NewLine        return false;Di2015NewLine
18356238Di2015UniqueSeparatorreturn String.Compare(url1.Host, url2.Host) == 0;Di2015NewLine
18356254Di2015UniqueSeparator    private void registrationButton_Click(object sender, EventArgs e) {Di2015NewLine        var btn = (Control)sender;Di2015NewLine        btn.FindForm().Close();Di2015NewLine    }Di2015NewLine
18356315Di2015UniqueSeparatorCompositionTarget.Rendering
18356315Di2015UniqueSeparatorINotifyPropertyChanged
18356315Di2015UniqueSeparatorX
18356315Di2015UniqueSeparatorY
18356315Di2015UniqueSeparatorDirectionVector
18356315Di2015UniqueSeparatorSize
18356315Di2015UniqueSeparatorMove
18356315Di2015UniqueSeparatorSwim
18356315Di2015UniqueSeparatorFish
18356315Di2015UniqueSeparatorX
18356315Di2015UniqueSeparatorY
18356315Di2015UniqueSeparatorDirectionVector
18356315Di2015UniqueSeparatorListBox
18356315Di2015UniqueSeparatorListBox.ItemsSource
18356315Di2015UniqueSeparatorDataTemplate
18356315Di2015UniqueSeparatorFish
18356315Di2015UniqueSeparatorPath
18356315Di2015UniqueSeparatorRotateTransform
18356315Di2015UniqueSeparatorDirectionVector
18356315Di2015UniqueSeparatorDataTemplate
18356315Di2015UniqueSeparatorX
18356315Di2015UniqueSeparatorY
18356315Di2015UniqueSeparatorMove()
18356315Di2015UniqueSeparatorListBox
18356469Di2015UniqueSeparatorSave
18356469Di2015UniqueSeparatorCommit
18356469Di2015UniqueSeparatorSave
18356511Di2015UniqueSeparator.mdf
18356511Di2015UniqueSeparatorApp_Data
18356511Di2015UniqueSeparator.\\bin\\debug
18356511Di2015UniqueSeparatorINSERT
18356511Di2015UniqueSeparatorMyDatabase
18356511Di2015UniqueSeparatorData Source=.\\\\SQLEXPRESS;Database=MyDatabase;Integrated Security=TrueDi2015NewLine
18356641Di2015UniqueSeparatorToString()
18356762Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    public virtual void Foo()Di2015NewLine    {Di2015NewLine        if (true)Di2015NewLine             throw new System.Exception();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyDerivedClass : MyClassDi2015NewLine{   Di2015NewLine    public override void Foo() Di2015NewLine    {Di2015NewLine        if (true)Di2015NewLine            throw new ArgumentNullException();Di2015NewLine        }Di2015NewLine    }           Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            // a factory creating the correct Di2015NewLine            // MyClass derived instanceDi2015NewLine            var myClass = someFactory.Create();Di2015NewLineDi2015NewLine            myClass.Foo();Di2015NewLine        }Di2015NewLine        catch (Exception)Di2015NewLine        {Di2015NewLine            // will work.Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18356762Di2015UniqueSeparatorArgumentNullException
18356762Di2015UniqueSeparatorException
18356762Di2015UniqueSeparatorArgumentNullException
18356762Di2015UniqueSeparatorException
18356762Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    public virtual void Foo()Di2015NewLine    {Di2015NewLine        if (true)Di2015NewLine             throw new ArgumentNullException();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyDerivedClass : MyClassDi2015NewLine{   Di2015NewLine    public override void Foo() Di2015NewLine    {Di2015NewLine        if (true)Di2015NewLine            throw new Exception();Di2015NewLine        }Di2015NewLine    }           Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            // a factory creating the correct Di2015NewLine            // MyClass derived instanceDi2015NewLine            var myClass = someFactory.Create();Di2015NewLineDi2015NewLine            myClass.Foo();Di2015NewLine        }Di2015NewLine        catch (ArgumentNullException)Di2015NewLine        {Di2015NewLine            // won't work since the subclass Di2015NewLine            // violates LSPDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18356852Di2015UniqueSeparator[__DynamicallyInvokable]Di2015NewLinepublic const double Epsilon = 4.94065645841247E-324;Di2015NewLine
18356911Di2015UniqueSeparatorEnableViewState="true"Di2015NewLineImageStorageMode="UseImageLocation"Di2015NewLine
18356911Di2015UniqueSeparatorSystem.IO.MemoryStream imagestream = new System.IO.MemoryStream();Di2015NewLineChart1.SaveImage(imagestream, System.Web.UI.DataVisualization.Charting.ChartImageFormat.Png);Di2015NewLinebyte[] imageByte = imagestream.ToArray();Di2015NewLine
18356936Di2015UniqueSeparatorpublic interface IWithIDDi2015NewLine{Di2015NewLine    // For your method the set(ter) isn't necessaryDi2015NewLine    // public int ID { get; set; } Di2015NewLine    public int ID { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void createDictionary<T>(IEnumerable<T> myRecords)Di2015NewLine        where T: IWithIDDi2015NewLine
18356936Di2015UniqueSeparatorpublic abstract class WithIDDi2015NewLine{Di2015NewLine    // public int ID; // non readonlyDi2015NewLine    public readonly int ID; // can even be a fieldDi2015NewLine}Di2015NewLineDi2015NewLinepublic static void createDictionary<T>(IEnumerable<T> myRecords)Di2015NewLine        where T: WithIDDi2015NewLine
18356936Di2015UniqueSeparatorpublic static void createDictionary<T>(IEnumerable<T> myRecords, Di2015NewLine                                       Func<T, int> getID)Di2015NewLine
18356936Di2015UniqueSeparatorGetID
18356936Di2015UniqueSeparatormyRecords.ToDictionary(getID)
18357151Di2015UniqueSeparatorTask
18357151Di2015UniqueSeparatorIDisposable
18357151Di2015UniqueSeparatorIAsyncResult.AsyncWaitHandle
18357186Di2015UniqueSeparator@Html.Partial("propertySummary", property)Di2015NewLine
18357220Di2015UniqueSeparatorList<string>
18357220Di2015UniqueSeparatorList<object>
18357220Di2015UniqueSeparatorList<string>
18357220Di2015UniqueSeparatorobject
18357220Di2015UniqueSeparatorpublic static void Log<T>(IList<T> objects)Di2015NewLine{Di2015NewLine    foreach (var obj in objects)Di2015NewLine    {Di2015NewLine        Console.WriteLine(obj);Di2015NewLine    }Di2015NewLine}  Di2015NewLine
18357220Di2015UniqueSeparatorpublic static void Log<T>(IEnumerable<T> objects)Di2015NewLine{Di2015NewLine    foreach (var obj in objects)Di2015NewLine    {Di2015NewLine        Console.WriteLine(obj);Di2015NewLine    }Di2015NewLine}  Di2015NewLine
18357220Di2015UniqueSeparatorpublic static void Log(params object[] objects)Di2015NewLine{Di2015NewLine    foreach (var obj in objects)Di2015NewLine    {Di2015NewLine        Console.WriteLine(obj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18357220Di2015UniqueSeparatorLog("Test","Test2");Di2015NewLine
18357286Di2015UniqueSeparatorOnBackKeyPress
18357286Di2015UniqueSeparatore.Cancel
18357286Di2015UniqueSeparatorprotected override void OnBackKeyPress(CancelEventArgs e)Di2015NewLine{Di2015NewLine    if (EHeightCanvas.Visibility == System.Windows.Visibility.Visible)Di2015NewLine    {Di2015NewLine        e.Cancel = true;Di2015NewLine        EHeightCanvas.Visibility = System.Windows.Visibility.Collapsed;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18357422Di2015UniqueSeparatorStackpanel
18357422Di2015UniqueSeparatorStackpanel
18357422Di2015UniqueSeparatorItemTemplate
18357422Di2015UniqueSeparatorItemTemplate
18357422Di2015UniqueSeparatorItemsControl
18357422Di2015UniqueSeparatorStackPanel
18357422Di2015UniqueSeparatorStackpanel
18357422Di2015UniqueSeparatorItemsPanelTemplate
18357422Di2015UniqueSeparatorItemsControl
18357422Di2015UniqueSeparator<ItemsControl ItemsSource="{Binding Buttons}">Di2015NewLine   <ItemsControl.ItemTemplate>Di2015NewLine     <DataTemplate>Di2015NewLine       <Button Content="{Binding Path=LabelString}" Command="{Binding Path=ButtonCommand}"/>Di2015NewLine     </DataTemplate>Di2015NewLine   <ItemsControl.ItemsPanel>Di2015NewLine     <ItemsPanelTemplate>Di2015NewLine       <StackPanel x:Name="BtnStackPanel" Orientation="Horizontal">Di2015NewLine     </ItemsPanelTemplate>  Di2015NewLine   <ItemsControl.ItemsPanel>Di2015NewLine</ItemsControl>Di2015NewLine
18357422Di2015UniqueSeparator <ItemsControl x:Name="Groups" ItemsSource="{Binding Groups}">Di2015NewLine   <ItemsControl.ItemTemplate>Di2015NewLine     <DataTemplate>         Di2015NewLine       <GroupBox Header="{Binding Path=GroupName}">Di2015NewLine          <ItemsControl ItemsSource="{Binding Buttons}">Di2015NewLine             <ItemsControl.ItemTemplate>Di2015NewLine               <DataTemplate>Di2015NewLine                 <Button Content="{Binding Path=LabelString}" Command="{Binding Path=ButtonCommand}"/>Di2015NewLine               </DataTemplate>Di2015NewLine             <ItemsControl.ItemsPanel>Di2015NewLine               <ItemsPanelTemplate>Di2015NewLine                 <StackPanel x:Name="BtnStackPanel" Orientation="Horizontal"/>Di2015NewLine               </ItemsPanelTemplate>  Di2015NewLine             <ItemsControl.ItemsPanel>Di2015NewLine          </ItemsControl>Di2015NewLine        </GroupBox>Di2015NewLine     </DataTemplate>Di2015NewLine   </ItemsControl.ItemTemplate>Di2015NewLine   <ItemsControl.ItemsPanel>Di2015NewLine     <ItemsPanelTemplate>Di2015NewLine       <StackPanel x:Name="GroupStackPanel" Orientation="Horizontal"/>Di2015NewLine     </ItemsPanelTemplate>Di2015NewLine   <ItemsControl.ItemsPanel>Di2015NewLine </ItemsControl>Di2015NewLine
18357465Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    private string _user;Di2015NewLine    public string userDi2015NewLine    { get { return this._user; } set { this._user = value; } }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic string YourFunction()Di2015NewLine{Di2015NewLine   MyClass m = new MyClass();Di2015NewLine   m.user = "abc"Di2015NewLine   return m.user;Di2015NewLineDi2015NewLine}Di2015NewLine
18357465Di2015UniqueSeparatorstring x = YourFunction();Di2015NewLine
18357498Di2015UniqueSeparatorToString(format)
18357498Di2015UniqueSeparatorConvert.ToString(value, format)
18357498Di2015UniqueSeparator.ToString("F")
18357561Di2015UniqueSeparatorPersonal
18357561Di2015UniqueSeparatorAddress
18357561Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class PersonalDi2015NewLine{Di2015NewLine    public string FirstName { get; set; }Di2015NewLine    public string LastName { get; set; }Di2015NewLine    public string Gender { get; set; }Di2015NewLine    public string BirthDate { get; set; }Di2015NewLine    public string Occupation { get; set; }Di2015NewLine    public string Website { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[Serializable]Di2015NewLinepublic class AddressDi2015NewLine{Di2015NewLine    public string Country { get; set; }Di2015NewLine    public string Address { get; set; }Di2015NewLine    public string AptNumber { get; set; }Di2015NewLine    public string City { get; set; }Di2015NewLine    public string State { get; set; }Di2015NewLine    public string PostalCode { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[Serializable]Di2015NewLinepublic class ProfileInfoDi2015NewLine{Di2015NewLine    public Personal Personal { get; set; }Di2015NewLine    public Address Address { get; set; }Di2015NewLine}Di2015NewLine
18357607Di2015UniqueSeparator                if (ddlhour.Items.Contains(ddlhour.Items.FindByValue(time[0].ToString())))Di2015NewLine                {Di2015NewLine                    ddlhour.Items.FindByValue(time[0].ToString()).Selected = true;Di2015NewLine                }Di2015NewLine
18357666Di2015UniqueSeparatorSELECT t.*, (CASE WHEN [Reg Hrs Jc] > 40 THEN [Reg Hrs Jc] - 40 ELSE 0 END) AS [Ot Hrs Jc]Di2015NewLineFROM Di2015NewLine   (SELECT [Co Code], [Empl No], [Task CD], [Day No], [Fund Co Code], [Job No], [Equip Cost Cde], SUM([Reg Hrs Jc]) AS [Reg Hrs Jc] FROM dbo.MIS_FTTIMECARD_OTDi2015NewLine   WHERE ([Date Worked] BETWEEN '8/11/2013' AND '8/17/2013')Di2015NewLine   GROUP BY [Co Code], [Empl No], [Task CD], [Day No], [Fund Co Code], [Job No], [Equip Cost Cde]) AS tDi2015NewLine
18357686Di2015UniqueSeparatorfor (index=0x5D39, temp=0x80000000; temp != 0; temp>>=1)Di2015NewLine
18357686Di2015UniqueSeparatorif ((temp & seed) != 0)Di2015NewLine
18357686Di2015UniqueSeparatorif ((temp & NC_UDS_KEYMASK) != 0)Di2015NewLine
18357686Di2015UniqueSeparatortemp
18357686Di2015UniqueSeparatorseed
18357686Di2015UniqueSeparatorNC_UDS_KEYMASK
18357716Di2015UniqueSeparatorCategory
18357716Di2015UniqueSeparatorDepartmentID
18357716Di2015UniqueSeparator.Attach()
18357716Di2015UniqueSeparatorEntityState.Modified
18357969Di2015UniqueSeparatorforeach
18357969Di2015UniqueSeparatorSystem.Web.HttpContext.Current.Response.Write (string.Format("{0} (Length: {1}) = {2} (Length: {3})<br/>", cert.SerialNumber, cert.SerialNumber.Length oauthCertificateFindValue, oauthCertificateFindValue.Length);Di2015NewLine
18358179Di2015UniqueSeparatorDEBUG
18358202Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class IsoDateSerializationTestDi2015NewLine{Di2015NewLine    [Test]Di2015NewLine    public void Test()Di2015NewLine    {Di2015NewLine        JToken jtoken = JObject.Parse(@"{ IsoDate: ""1994-11-05T13:15:30Z"" }");Di2015NewLine        Type deserializeType = typeof (MessageWithIsoDate);Di2015NewLine        JsonSerializer serializer = new JsonSerializer();Di2015NewLine        object obj;Di2015NewLineDi2015NewLine        using (var jsonReader = new JTokenReader(jtoken))Di2015NewLine        {Di2015NewLine            obj = serializer.Deserialize(jsonReader, deserializeType);Di2015NewLine        }Di2015NewLineDi2015NewLine        MessageWithIsoDate msg = obj as MessageWithIsoDate;Di2015NewLine        Assert.That(msg.IsoDate, Is.EqualTo("1994-11-05T13:15:30Z"));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MessageWithIsoDateDi2015NewLine{Di2015NewLine    public String IsoDate { get; set; }Di2015NewLine}Di2015NewLine
18358302Di2015UniqueSeparatorList<string>
18358302Di2015UniqueSeparatorSelect
18358302Di2015UniqueSeparatorvar list = new List<SomeClass>();Di2015NewLineDi2015NewLinevar titleList = list.Select(x => x.title).ToList();Di2015NewLine
18358302Di2015UniqueSeparatorvar entityList = list.Select(x => new { x.title, x.id, x.description }).ToList();Di2015NewLine
18358302Di2015UniqueSeparatorvar list = new List<SomeClass>();Di2015NewLinevar titleList = new List<string>(list.Count);Di2015NewLineDi2015NewLineforeach(var item in list)Di2015NewLine{Di2015NewLine    titleList.Add(item.title);Di2015NewLine}Di2015NewLine
18358302Di2015UniqueSeparatorforeach
18358319Di2015UniqueSeparatorClass c = new BaseClass() as Class;Di2015NewLine
18358319Di2015UniqueSeparatorClass
18358319Di2015UniqueSeparatorBaseClass
18358319Di2015UniqueSeparatornull
18358319Di2015UniqueSeparatorClass c = new BaseClass()Di2015NewLine
18358319Di2015UniqueSeparatorvar c = new BaseClass() as Class;Di2015NewLine
18358319Di2015UniqueSeparatorc
18358319Di2015UniqueSeparatorClass
18358319Di2015UniqueSeparatorBaseClass
18358319Di2015UniqueSeparatorClass c = new BaseClass();
18358319Di2015UniqueSeparatoras
18358319Di2015UniqueSeparator()
18358319Di2015UniqueSeparatorimplicit
18358319Di2015UniqueSeparatorexplicit
18358319Di2015UniqueSeparatorclass BaseClassDi2015NewLine{Di2015NewLine    public static implicit operator Class(BaseClass b)Di2015NewLine    {Di2015NewLine        return new Class();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ClassDi2015NewLine{            Di2015NewLine}Di2015NewLineDi2015NewLineClass c = new BaseClass() as Class;Di2015NewLine
18358346Di2015UniqueSeparatorReplace
18358346Di2015UniqueSeparatorvar path = "Source Path: \\build\\PM\\11.0.25.9\\11025_0_X.pts Destination Path:"Di2015NewLine    .Replace("Source Path: ", "")Di2015NewLine    .Replace(" Destination Path:", "");Di2015NewLine
18358380Di2015UniqueSeparatorRfc2898DeriveBytes
18358380Di2015UniqueSeparatorvar salt = new byte [32]; // do not use it empty :)Di2015NewLinevar key = new Rfc2898DeriveBytes ("passphrase", salt, 1000).GetBytes (length);Di2015NewLine
18358398Di2015UniqueSeparatorTileGrid[x] = new Tile[NumberOfColumns];Di2015NewLine
18358398Di2015UniqueSeparatornull
18358398Di2015UniqueSeparatorTileGrid = new Tile[NumberOfRows][];Di2015NewLinefor (int x = 0; x < TileGrid.Length; x++)Di2015NewLine{Di2015NewLine    TileGrid[x] = new Tile[NumberOfColumns];Di2015NewLine    for (int y = 0; y < TileGrid[x].Length; y++)Di2015NewLine    {Di2015NewLine        TileGrid[x][y] = new Tile();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18358399Di2015UniqueSeparator object nulldate = (maskedTextBox2.Text = read.GetDateTime(24).ToShortDateString());Di2015NewLine
18358399Di2015UniqueSeparator object nulldate = (maskedTextBox2.Text = read.IsDBNull(24) ? string.Empty : read.GetDateTime(24).ToShortDateString()); Di2015NewLine
18358560Di2015UniqueSeparatorwhile (true) {Di2015NewLine  Task.Factory.StartNew(() => DoWork());Di2015NewLine}Di2015NewLine
18358560Di2015UniqueSeparatorwhile (true) {Di2015NewLine  job = FetchJobFromQueue();Di2015NewLine  if( job != null ){Di2015NewLine    Task.Factory.StartNew(() => DoWork(job));Di2015NewLine  }Di2015NewLine  else {Di2015NewLine    Thread.Sleep(1000);Di2015NewLine  }Di2015NewLine}Di2015NewLine
18358581Di2015UniqueSeparatorenum
18358581Di2015UniqueSeparatorenum
18358587Di2015UniqueSeparator                foreach (var myVar in Vydajna1Menus)Di2015NewLine                {  Di2015NewLine                _myDataForLunchGrid.Add(new BindingDataDi2015NewLine                {Di2015NewLine                    vydajnaMenus = myVar,Di2015NewLine                    vydajnaNumber ="0"+numberOfFood.ToString()Di2015NewLine                });Di2015NewLine                }Di2015NewLine                OnPropertyChanged("MyDataForLunchGrid");Di2015NewLine
18358603Di2015UniqueSeparatorJsonSerializerSettings' TypeNameHandling
18358603Di2015UniqueSeparatorvar settings = new JsonSerializerSettings() { TypeNameHandling = TypeNameHandling.All };Di2015NewLineDi2015NewLinevar dataJson = JsonConvert.SerializeObject(data, settings);Di2015NewLinedata = JsonConvert.DeserializeObject<Data>(dataJson, settings);Di2015NewLine
18358680Di2015UniqueSeparator string htmlBody = "<html><body><h1>Picture</h1><br><img src=\\"cid:filename\\"></body></html>";Di2015NewLine AlternateView avHtml = AlternateView.CreateAlternateViewFromStringDi2015NewLine    (htmlBody, null, MediaTypeNames.Text.Html);Di2015NewLineDi2015NewLine LinkedResource inline = new LinkedResource("filename.jpg", MediaTypeNames.Image.Jpeg);Di2015NewLine inline.ContentId = Guid.NewGuid().ToString();Di2015NewLine avHtml.LinkedResources.Add(inline);Di2015NewLineDi2015NewLine MailMessage mail = new MailMessage();Di2015NewLine mail.AlternateViews.Add(avHtml);Di2015NewLineDi2015NewLine Attachment att = new Attachment(filePath);Di2015NewLine att.ContentDisposition.Inline = true;Di2015NewLineDi2015NewLine mail.From = from_email;Di2015NewLine mail.To.Add(data.email);Di2015NewLine mail.Subject = "Client: " + data.client_id + " Has Sent You A Screenshot";Di2015NewLine mail.Body = String.Format(Di2015NewLine            "<h3>Client: " + data.client_id + " Has Sent You A Screenshot</h3>" +Di2015NewLine            @"<img src=""cid:{0}"" />", inline.ContentId);Di2015NewLineDi2015NewLine mail.IsBodyHtml = true;Di2015NewLine mail.Attachments.Add(att);Di2015NewLine
18358687Di2015UniqueSeparator  webBrowser1.Url = new Uri("http://tel.search.ch/?what=" + forename + "+" + surname + "&where=" + livingplace);Di2015NewLine
18358687Di2015UniqueSeparatorforename
18358687Di2015UniqueSeparatorsurname
18358687Di2015UniqueSeparatorlivingplace
18358687Di2015UniqueSeparatorhttp://tel.search.ch/?what=+&where=
18358687Di2015UniqueSeparator+
18358687Di2015UniqueSeparatorforename + "+" + surname
18358687Di2015UniqueSeparator webBrowser1.Url = new Uri("http://tel.search.ch/?was="+forename + " " + surname+ "&wo=" + livingplace);Di2015NewLine
18358714Di2015UniqueSeparatorOR Region <> 0Di2015NewLine
18358821Di2015UniqueSeparatorDateTime.FromOADate()
18358821Di2015UniqueSeparator1.5 is January 1, 1900 @ Noon
18358821Di2015UniqueSeparator41507.25 = August 21, 2013 @ 6:00 am
18358845Di2015UniqueSeparatorHTTP response
18358845Di2015UniqueSeparatorif (product == null)Di2015NewLine{Di2015NewLine    return HttpNotFound();Di2015NewLine}Di2015NewLine
18358957Di2015UniqueSeparatorEncoding
18358957Di2015UniqueSeparatorStream
18358957Di2015UniqueSeparatorStreamReader
18358957Di2015UniqueSeparatorEncoding
18358957Di2015UniqueSeparatorStream
18358957Di2015UniqueSeparatorEncoding
18358957Di2015UniqueSeparatorEncoding
18358957Di2015UniqueSeparatorusing(var ms = new MemoryStream(bytes))Di2015NewLineusing(var inflate = new GZipStream(ms, CompressionMode.Decompress))Di2015NewLine{Di2015NewLine    // now read from 'inflate'Di2015NewLine}Di2015NewLine
18358957Di2015UniqueSeparatorl 73
18358957Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.IO.Compression;Di2015NewLineusing System.Text;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        using (var file = File.OpenRead("my.txt"))Di2015NewLine        using (var buffer = new MemoryStream())Di2015NewLine        {Di2015NewLine            List<string> lines = new List<string>();Di2015NewLine            string line;Di2015NewLine            while ((line = ReadToCRLF(file, buffer)) != null)Di2015NewLine            {Di2015NewLine                lines.Add(line);Di2015NewLine                Console.WriteLine(line);Di2015NewLine                if (line == "mark" && lines.Count >= 2)Di2015NewLine                {Di2015NewLine                    var match = Regex.Match(lines[lines.Count - 2], "^l ([0-9]+)$");Di2015NewLine                    int bytes;Di2015NewLine                    if (match.Success && int.TryParse(match.Groups[1].Value, out bytes))Di2015NewLine                    {Di2015NewLine                        ReadBytes(file, buffer, bytes);Di2015NewLine                        string inflated = Inflate(buffer);Di2015NewLine                        lines.Add(inflated); // or something similarDi2015NewLine                        Console.WriteLine(inflated);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine    static string Inflate(Stream source)Di2015NewLine    {Di2015NewLine        using (var deflate = new DeflateStream(source, CompressionMode.Decompress, true))Di2015NewLine        using (var reader = new StreamReader(deflate, Encoding.ASCII))Di2015NewLine        {Di2015NewLine            return reader.ReadToEnd();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    static void ReadBytes(Stream source, MemoryStream buffer, int count)Di2015NewLine    {Di2015NewLine        buffer.SetLength(count);Di2015NewLine        int read, offset = 0;Di2015NewLine        while (count > 0 && (read = source.Read(buffer.GetBuffer(), offset, count)) > 0)Di2015NewLine        {Di2015NewLine            count -= read;Di2015NewLine            offset += read;Di2015NewLine        }Di2015NewLine        if (count != 0) throw new EndOfStreamException();Di2015NewLine        buffer.Position = 0;Di2015NewLine    }Di2015NewLine    static string ReadToCRLF(Stream source, MemoryStream buffer)Di2015NewLine    {Di2015NewLine        buffer.SetLength(0);Di2015NewLine        int next;Di2015NewLine        bool wasCr = false;Di2015NewLine        while ((next = source.ReadByte()) >= 0)Di2015NewLine        {Di2015NewLine            if(next == 10 && wasCr) { // CRLFDi2015NewLine                // end of line (minus the CR)Di2015NewLine                return Encoding.ASCII.GetString(Di2015NewLine                     buffer.GetBuffer(), 0, (int)buffer.Length - 1);Di2015NewLine            }Di2015NewLine            buffer.WriteByte((byte)next);Di2015NewLine            wasCr = next == 13;Di2015NewLine        }Di2015NewLine        // end of fileDi2015NewLine        if (buffer.Length == 0) return null;Di2015NewLine        return Encoding.ASCII.GetString(buffer.GetBuffer(), 0, (int)buffer.Length);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18359132Di2015UniqueSeparatorStretch
18359132Di2015UniqueSeparatorNone
18359132Di2015UniqueSeparatorSource
18359132Di2015UniqueSeparatorWidth
18359132Di2015UniqueSeparatorHeight
18359132Di2015UniqueSeparator<Viewbox>Di2015NewLine    <Grid>Di2015NewLine        <Image Source="C:\\Users\\Public\\Pictures\\Sample Pictures\\Koala.jpg"Di2015NewLine               Stretch="None"/>Di2015NewLine        <Canvas>Di2015NewLine            <Ellipse Canvas.Left="420" Canvas.Top="480"Di2015NewLine                     Fill="Red" Width="100" Height="100"/>Di2015NewLine            ... more shapes here ...Di2015NewLine        </Canvas>Di2015NewLine    </Grid>Di2015NewLine</Viewbox>Di2015NewLine
18359173Di2015UniqueSeparatorpublic string A{get;set;} //Auto propertyDi2015NewLineDi2015NewLinepublic string ADi2015NewLine{Di2015NewLine  get{return a;}`Di2015NewLine  set{Di2015NewLine//Do some check-ProcessingDi2015NewLine    if(value != null)Di2015NewLine       a=value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18359556Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine    <soap:Body>Di2015NewLine        <ProcessShipmentRequest xmlns="http://fedex.com/ws/ship/v12">Di2015NewLine            <WebAuthenticationDetail>Di2015NewLine                <CspCredential>Di2015NewLine                    <Key>CSP_KEY(IF YOU ARE ONE)</Key>Di2015NewLine                    <Password>CIS_PASSWORD(IF YOU ARE ONE)</Password>Di2015NewLine                </CspCredential>Di2015NewLine                <UserCredential>Di2015NewLine                    <Key>CSP_USER_KEY(IF YOU BELONG TO THE CSP)</Key>Di2015NewLine                    <Password>CSP_PASSWORD(IF YOU BELONG TO THE CSP)</Password>Di2015NewLine                </UserCredential>Di2015NewLine            </WebAuthenticationDetail>Di2015NewLine            <ClientDetail>Di2015NewLine                <AccountNumber>ACCOUNT_NUMBER</AccountNumber>Di2015NewLine                <MeterNumber>METER_NUMBER</MeterNumber>Di2015NewLine                <ClientProductId>CLIENT_PRODUCT_ID(IF ONE IS PROVIDED)</ClientProductId>Di2015NewLine                <ClientProductVersion>CLIENT_VERSION(IF ONE IS PROVIDED)</ClientProductVersion>Di2015NewLine            </ClientDetail>Di2015NewLine            <TransactionDetail>Di2015NewLine                <CustomerTransactionId>261</CustomerTransactionId>Di2015NewLine            </TransactionDetail>Di2015NewLine            <Version>Di2015NewLine                <ServiceId>ship</ServiceId>Di2015NewLine                <Major>12</Major>Di2015NewLine                <Intermediate>0</Intermediate>Di2015NewLine                <Minor>0</Minor>Di2015NewLine            </Version>Di2015NewLine            <RequestedShipment>Di2015NewLine                <ShipTimestamp>2013-08-21T14:00:00-04:00</ShipTimestamp>Di2015NewLine                <DropoffType>REGULAR_PICKUP</DropoffType>Di2015NewLine                <ServiceType>PRIORITY_OVERNIGHT</ServiceType>Di2015NewLine                <PackagingType>YOUR_PACKAGING</PackagingType>Di2015NewLine                <Shipper>Di2015NewLine                    <AccountNumber>ACCOUNT_NUMBER</AccountNumber>Di2015NewLine                    <Contact>Di2015NewLine                        <PersonName>323199 323199</PersonName>Di2015NewLine                        <CompanyName>CSP Testing</CompanyName>Di2015NewLine                        <PhoneNumber>9012633035</PhoneNumber>Di2015NewLine                        <EMailAddress>csp@fedex.com</EMailAddress>Di2015NewLine                    </Contact>Di2015NewLine                    <Address>Di2015NewLine                        <StreetLines>99 Fedex parkway</StreetLines>Di2015NewLine                        <City>ALAMEDA</City>Di2015NewLine                        <StateOrProvinceCode>CA</StateOrProvinceCode>Di2015NewLine                        <PostalCode>94501</PostalCode>Di2015NewLine                        <CountryCode>US</CountryCode>Di2015NewLine                    </Address>Di2015NewLine                </Shipper>Di2015NewLine                <Recipient>Di2015NewLine                    <Contact>Di2015NewLine                        <PersonName>323257 323257</PersonName>Di2015NewLine                        <CompanyName>CSP Testing</CompanyName>Di2015NewLine                        <PhoneNumber>9012633035</PhoneNumber>Di2015NewLine                        <EMailAddress>csp@fedex.com</EMailAddress>Di2015NewLine                    </Contact>Di2015NewLine                    <Address>Di2015NewLine                        <StreetLines>124 Fedex parkway</StreetLines>Di2015NewLine                        <City>PADUCAH</City>Di2015NewLine                        <StateOrProvinceCode>KY</StateOrProvinceCode>Di2015NewLine                        <PostalCode>42001</PostalCode>Di2015NewLine                        <CountryCode>US</CountryCode>Di2015NewLine                    </Address>Di2015NewLine                </Recipient>Di2015NewLine                <Origin>Di2015NewLine                    <Contact>Di2015NewLine                        <PersonName>323199 323199</PersonName>Di2015NewLine                        <CompanyName>CSP Testing</CompanyName>Di2015NewLine                        <PhoneNumber>9012633035</PhoneNumber>Di2015NewLine                        <EMailAddress>csp@fedex.com</EMailAddress>Di2015NewLine                    </Contact>Di2015NewLine                    <Address>Di2015NewLine                        <StreetLines>99 Fedex parkway</StreetLines>Di2015NewLine                        <City>ALAMEDA</City>Di2015NewLine                        <StateOrProvinceCode>CA</StateOrProvinceCode>Di2015NewLine                        <PostalCode>94501</PostalCode>Di2015NewLine                        <CountryCode>US</CountryCode>Di2015NewLine                    </Address>Di2015NewLine                </Origin>Di2015NewLine                <ShippingChargesPayment>Di2015NewLine                    <PaymentType>SENDER</PaymentType>Di2015NewLine                    <Payor>Di2015NewLine                        <ResponsibleParty>Di2015NewLine                            <AccountNumber>ACCOUNT_NUMBER</AccountNumber>Di2015NewLine                            <Contact>Di2015NewLine                                <PersonName>CSP Testing</PersonName>Di2015NewLine                                <CompanyName>RTC Testing</CompanyName>Di2015NewLine                            </Contact>Di2015NewLine                            <Address>Di2015NewLine                                <CountryCode>US</CountryCode>Di2015NewLine                            </Address>Di2015NewLine                        </ResponsibleParty>Di2015NewLine                    </Payor>Di2015NewLine                </ShippingChargesPayment>Di2015NewLine                <SpecialServicesRequested>Di2015NewLine                    <SpecialServiceTypes>COD</SpecialServiceTypes>Di2015NewLine                    <CodDetail>Di2015NewLine                        <CodCollectionAmount>Di2015NewLine                            <Currency>USD</Currency>Di2015NewLine                            <Amount>50</Amount>Di2015NewLine                        </CodCollectionAmount>Di2015NewLine                        <CollectionType>ANY</CollectionType>Di2015NewLine                        <ReferenceIndicator>INVOICE</ReferenceIndicator>Di2015NewLine                    </CodDetail>Di2015NewLine                </SpecialServicesRequested>Di2015NewLine                <CustomsClearanceDetail>Di2015NewLine                    <DocumentContent>NON_DOCUMENTS</DocumentContent>Di2015NewLine                </CustomsClearanceDetail>Di2015NewLine                <LabelSpecification>Di2015NewLine                    <LabelFormatType>COMMON2D</LabelFormatType>Di2015NewLine                    <ImageType>PNG</ImageType>Di2015NewLine                    <LabelStockType>PAPER_4X6</LabelStockType>Di2015NewLine                </LabelSpecification>Di2015NewLine                <RateRequestTypes>ACCOUNTACCOUNT</RateRequestTypes>Di2015NewLine                <PackageCount>1</PackageCount>Di2015NewLine                <RequestedPackageLineItems>Di2015NewLine                    <SequenceNumber>1</SequenceNumber>Di2015NewLine                    <GroupPackageCount>1</GroupPackageCount>Di2015NewLine                    <InsuredValue>Di2015NewLine                        <Currency>USD</Currency>Di2015NewLine                        <Amount>5000</Amount>Di2015NewLine                    </InsuredValue>Di2015NewLine                    <Weight>Di2015NewLine                        <Units>LB</Units>Di2015NewLine                        <Value>20</Value>Di2015NewLine                    </Weight>Di2015NewLine                    <PhysicalPackaging>OTHER</PhysicalPackaging>Di2015NewLine                    <ItemDescription>MacBook Pro</ItemDescription>Di2015NewLine                    <CustomerReferences>Di2015NewLine                        <CustomerReferenceType>INVOICE_NUMBER</CustomerReferenceType>Di2015NewLine                        <Value>INVOICE12345</Value>Di2015NewLine                    </CustomerReferences>Di2015NewLine                    <SpecialServicesRequested>Di2015NewLine                        <SpecialServiceTypes>SIGNATURE_OPTION</SpecialServiceTypes>Di2015NewLine                        <SignatureOptionDetail>Di2015NewLine                            <OptionType>SERVICE_DEFAULT</OptionType>Di2015NewLine                        </SignatureOptionDetail>Di2015NewLine                    </SpecialServicesRequested>Di2015NewLine                </RequestedPackageLineItems>Di2015NewLine            </RequestedShipment>Di2015NewLine        </ProcessShipmentRequest>Di2015NewLine    </soap:Body>Di2015NewLine</soap:Envelope>Di2015NewLine
18359677Di2015UniqueSeparator^[^|]*\\|[^|]*\\|[^|]*\\|\\|.*Di2015NewLine
18359677Di2015UniqueSeparator^
18359677Di2015UniqueSeparator[^|]
18359677Di2015UniqueSeparator|
18359677Di2015UniqueSeparator[^|]*
18359677Di2015UniqueSeparator|
18359677Di2015UniqueSeparator+
18359677Di2015UniqueSeparator.*
18359686Di2015UniqueSeparatorSUM
18359686Di2015UniqueSeparatorISNULL
18359686Di2015UniqueSeparatorSELECT ISNULL(SUM(payment), 0)Di2015NewLine
18359686Di2015UniqueSeparatorDBNull.Value
18359686Di2015UniqueSeparatorvar result = sc.ExecuteScalar();Di2015NewLineint intResult = result == DBNull.Value ? 0 : Convert.ToInt32(result);Di2015NewLine
18360007Di2015UniqueSeparator(message.Length <= 160) ? 1 : (message.Length + 151) / 152)Di2015NewLine
18360007Di2015UniqueSeparatormessage
18360007Di2015UniqueSeparator+ 151
18360018Di2015UniqueSeparatorprivate delegate void DoStuff(); //delegate for the actionDi2015NewLineDi2015NewLineprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //create the delegateDi2015NewLine    DoStuff myAction = new DoStuff(DownloadStuff); Di2015NewLineDi2015NewLine    //invoke it asynchronously, control passes to next statementDi2015NewLine    myAction.BeginInvoke(null, null);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void DownloadStuff() { Di2015NewLine  // your functionality here - this can also go in a code libraryDi2015NewLine}Di2015NewLine
18360132Di2015UniqueSeparatorRender
18360132Di2015UniqueSeparatorRender
18360132Di2015UniqueSeparatorprotected override void Render(HtmlTextWriter writer)Di2015NewLine{Di2015NewLine    // Your logic hereDi2015NewLine}Di2015NewLine
18360171Di2015UniqueSeparatorref
18360171Di2015UniqueSeparatorpublic void CopyTo(KeyValuePair<TKey, TValue>[] destination, int start)Di2015NewLine{Di2015NewLine    pairs.CopyTo(destination, start);Di2015NewLine}Di2015NewLine
18360217Di2015UniqueSeparatorusing (PrincipalContext context = new PrincipalContext(ContextType.Domain, "TEST");)Di2015NewLine{Di2015NewLine    UserPrincipal user = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, "A_User_Name");Di2015NewLine    foreach (var group in user.GetGroups())Di2015NewLine    {Di2015NewLine        Console.WriteLine(group.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18360308Di2015UniqueSeparatorvar request = (HttpWebRequest)HttpWebRequest.Create("http://hoteladmin.laterooms.com/en/SignIn.aspx?ReturnUrl=%2fmain.aspx");Di2015NewLinevar container = new CookieContainer();Di2015NewLine//Di2015NewLinerequest.CookieContainer = container;Di2015NewLine//Di2015NewLinevar response = request.GetResponse();Di2015NewLineDi2015NewLineDi2015NewLinevar bufferIntitial = new byte[512];Di2015NewLinestring responseTextInitial = "";Di2015NewLineusing (var responseStream = response.GetResponseStream())Di2015NewLine{Di2015NewLine    while (responseStream.Read(bufferIntitial, 0, 512) > 0)Di2015NewLine    {Di2015NewLine        responseTextInitial += Encoding.UTF8.GetString(bufferIntitial);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine/// NEW REQUESTDi2015NewLineDi2015NewLinevar loginRequest = (HttpWebRequest)HttpWebRequest.Create("http://hoteladmin.laterooms.com/en/SignIn.aspx?ReturnUrl=%2fmain.aspx");Di2015NewLine// Resuse the cookie container containing the cookies received from our initial request.Di2015NewLineloginRequest.CookieContainer = container;Di2015NewLineDi2015NewLinevar requestFormData = new StringBuilder();Di2015NewLinerequestFormData.Append("__VIEWSTATE=" + HttpUtility.HtmlEncode(ExtractViewState(responseTextInitial)) + "&");Di2015NewLinerequestFormData.Append("_ctl1:userName=" + HttpUtility.HtmlEncode("user123") + "&");Di2015NewLinerequestFormData.Append("_ctl1:userPass=" + HttpUtility.HtmlEncode("pass123") + "&");Di2015NewLinerequestFormData.Append("_ctl1:btnLogin=" + HttpUtility.HtmlEncode("Login"));Di2015NewLineDi2015NewLinevar requestFormDataByte = Encoding.ASCII.GetBytes(requestFormData.ToString());Di2015NewLineDi2015NewLineloginRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36";Di2015NewLineloginRequest.Method = "POST";Di2015NewLineloginRequest.ContentLength = requestFormDataByte.Length;Di2015NewLineloginRequest.ContentType = "application/x-www-form-urlencoded";Di2015NewLineDi2015NewLineusing (var requestStream = loginRequest.GetRequestStream())Di2015NewLine{Di2015NewLine    requestStream.Write(requestFormDataByte, 0, requestFormDataByte.Length);Di2015NewLine}Di2015NewLineDi2015NewLinevar loginResponse = loginRequest.GetResponse();Di2015NewLineDi2015NewLinevar buffer = new byte[512];Di2015NewLinestring responseText = "";Di2015NewLineusing (var responseStream = loginResponse.GetResponseStream())Di2015NewLine{Di2015NewLine    while (responseStream.Read(buffer, 0, 512) > 0)Di2015NewLine    {Di2015NewLine        responseText += Encoding.UTF8.GetString(buffer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18360308Di2015UniqueSeparatorprivate static string ExtractViewState(string s)Di2015NewLine{Di2015NewLine    string viewStateNameDelimiter = "__VIEWSTATE";Di2015NewLine    string valueDelimiter = "value=\\"";Di2015NewLineDi2015NewLine    int viewStateNamePosition = s.IndexOf(viewStateNameDelimiter);Di2015NewLine    int viewStateValuePosition = s.IndexOf(valueDelimiter, viewStateNamePosition);Di2015NewLineDi2015NewLine    int viewStateStartPosition = viewStateValuePosition + valueDelimiter.Length;Di2015NewLine    int viewStateEndPosition = s.IndexOf("\\"", viewStateStartPosition);Di2015NewLineDi2015NewLine    return s.Substring(viewStateStartPosition, viewStateEndPosition - viewStateStartPosition);Di2015NewLine} Di2015NewLine
18360542Di2015UniqueSeparator    public override IInterceptor CreateInterceptor(IProxyRequest request) {Di2015NewLine        AuthorizationInterceptor attr = (AuthorizationInterceptor)request.Context.Kernel.Get<IAuthorizationInterceptor>();Di2015NewLine        attr.Init(AttributeParameters);Di2015NewLine        return attr;Di2015NewLine    }Di2015NewLine
18360542Di2015UniqueSeparator    public void Init(params string[] parameters) {Di2015NewLine        AttributeParameters = parameters;Di2015NewLine    }Di2015NewLine
18360625Di2015UniqueSeparatorcsharp.xslt
18360625Di2015UniqueSeparatorclass
18360625Di2015UniqueSeparatorstruct
18360625Di2015UniqueSeparatorcsharp.xslt
18360625Di2015UniqueSeparator-t
18360709Di2015UniqueSeparator    // ************************************************************************Di2015NewLine    private void DockingManager_DocumentClosing(object sender, Xceed.Wpf.AvalonDock.DocumentClosingEventArgs e)Di2015NewLine    {Di2015NewLine        e.Document.CanClose = false;Di2015NewLineDi2015NewLine        DocumentModel documentModel = e.Document.Content as DocumentModel;Di2015NewLine        if (documentModel != null)Di2015NewLine        {Di2015NewLine            Dispatcher.BeginInvoke(new Action(() => this.Model.DocumentItems.Remove(documentModel)), DispatcherPriority.Background);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18360790Di2015UniqueSeparatorpublic void DoSomething(String inputA)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic void DoSomething(String inputB)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
18360790Di2015UniqueSeparatorMyClass.DoSomething("TEST");Di2015NewLine
18360790Di2015UniqueSeparatorpublic void DoThingA(String input)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic void DoThingB(String input)Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
18360790Di2015UniqueSeparatorpublic void DoSomething(String input, object operationType) //where object is whatever type you see fit...Di2015NewLine{Di2015NewLine    if(operationType == ...)Di2015NewLine    {Di2015NewLine        DoThingA(input);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        DoThingB(input);Di2015NewLine    } Di2015NewLine}Di2015NewLine
18360790Di2015UniqueSeparatorpublic void DoSomething(String input)Di2015NewLine{Di2015NewLine    switch(input)Di2015NewLine    {Di2015NewLine        case "A":Di2015NewLine            ...Di2015NewLine            break;Di2015NewLine        case "B":Di2015NewLine            ...Di2015NewLine            break;Di2015NewLine        default:Di2015NewLine            ...Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18360793Di2015UniqueSeparatorDataGridComboBoxColumn
18360793Di2015UniqueSeparatorDataGridTemplateColumn
18360793Di2015UniqueSeparatorCellTemplate
18360793Di2015UniqueSeparatorTextBlock
18360793Di2015UniqueSeparatorItemsSource
18360793Di2015UniqueSeparatorComboBox
18360793Di2015UniqueSeparatorComboBox
18360793Di2015UniqueSeparator        DataGridTemplateColumn cboColumn = new DataGridTemplateColumn();Di2015NewLine        cboColumn.Header = colName;Di2015NewLineDi2015NewLine        //DataTemplate for CellTemplateDi2015NewLine        DataTemplate cellTemplate = new DataTemplate();Di2015NewLine        FrameworkElementFactory txtBlkFactory = new FrameworkElementFactory(typeof(TextBlock));Di2015NewLine        txtBlkFactory.SetValue(TextBlock.TextProperty, textBinding);Di2015NewLine        cellTemplate.VisualTree = txtBlkFactory;Di2015NewLine        cboColumn.CellTemplate = cellTemplate;Di2015NewLineDi2015NewLine        //DataTemplate for CellEditingTemplateDi2015NewLine        DataTemplate editTemplate = new DataTemplate();Di2015NewLine        FrameworkElementFactory cboFactory = new FrameworkElementFactory(typeof(ComboBox));Di2015NewLine        cboFactory.SetValue(ComboBox.TextProperty, textBinding);Di2015NewLine        cboFactory.SetValue(ComboBox.ItemsSourceProperty, statusItemsList);Di2015NewLine        cboFactory.SetValue(ComboBox.IsEditableProperty, true);Di2015NewLineDi2015NewLine        MouseEventHandler handler = new MouseEventHandler(delegate(object sender, MouseEventArgs args)Di2015NewLine        {Di2015NewLine            ComboBox cboBox = (ComboBox)sender;Di2015NewLine            cboBox.IsDropDownOpen = true;Di2015NewLine        });Di2015NewLineDi2015NewLine        cboFactory.AddHandler(ComboBox.MouseEnterEvent, handler);Di2015NewLineDi2015NewLine        editTemplate.VisualTree = cboFactory;Di2015NewLine        cboColumn.CellEditingTemplate = editTemplate;Di2015NewLine
18360856Di2015UniqueSeparatorUpdatePanel
18360940Di2015UniqueSeparatorIQueryable<Guid?>
18360940Di2015UniqueSeparatorIQueryable<Guid?> guids = Di2015NewLine    from R in Table1Di2015NewLine    join P in Table2Di2015NewLine    on R.Id equals P.Id2Di2015NewLine    where R.Name == 'blah blah' Di2015NewLine    select R.Id;Di2015NewLine
18360940Di2015UniqueSeparatorFirst
18360940Di2015UniqueSeparatorSingle
18360940Di2015UniqueSeparatorFirstOrDefault
18360940Di2015UniqueSeparatorSingleOrDefault
18360940Di2015UniqueSeparatorGuild? guid = guids.FirstOrDefault();Di2015NewLine
18360940Di2015UniqueSeparatorGuid? guid = Table1.Where(R => R.Name == "blah")Di2015NewLine                   .Join(Table2, R => R.Id, P => P.Id2, (R,P) => R.Id)Di2015NewLine                   .FirstOrDefault();Di2015NewLine
18360940Di2015UniqueSeparatorFirstOrDefault
18360940Di2015UniqueSeparatorGuid? guid =  (from R in Table1Di2015NewLine               join P in Table2Di2015NewLine               on R.Id equals P.Id2Di2015NewLine               where R.Name == 'blah blah' Di2015NewLine               select R.Id).FirstOrDefault();Di2015NewLine
18361049Di2015UniqueSeparatorHttpRequest
18361049Di2015UniqueSeparatorQueryString
18361049Di2015UniqueSeparatorQueryString
18361049Di2015UniqueSeparatorif (!String.IsNullOrEmpty(Request.QueryString["pID"]))Di2015NewLine{Di2015NewLine    // Query string value is there so now use itDi2015NewLine    int thePID = Convert.ToInt32(Request.QueryString["pID"]);Di2015NewLine}Di2015NewLine
18361218Di2015UniqueSeparatorclass Test {Di2015NewLine    static Test instance = new Test();Di2015NewLine    static int x = 1;Di2015NewLineDi2015NewLine    public Test() {Di2015NewLine        System.out.printf("x=%d\\n", x);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void main(String[] args) {Di2015NewLine        Test t = new Test();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatormain
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparatorinstance
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparator0
18361218Di2015UniqueSeparatornull
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparator0
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatorinstance
18361218Di2015UniqueSeparatorTest()
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparator0
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparator1
18361218Di2015UniqueSeparator0
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparatormain
18361218Di2015UniqueSeparatormain
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatorx
18361218Di2015UniqueSeparator1
18361218Di2015UniqueSeparatorx=0Di2015NewLinex=1Di2015NewLine
18361218Di2015UniqueSeparatorclass Test {Di2015NewLine    Test buggy = new Test();Di2015NewLine}Di2015NewLine
18361218Di2015UniqueSeparatorbuggy
18361218Di2015UniqueSeparatornull
18361218Di2015UniqueSeparatorTest
18361218Di2015UniqueSeparatornull
18361218Di2015UniqueSeparatorclass Chain {Di2015NewLine    Chain link = null;Di2015NewLine    public Chain(int length) {Di2015NewLine        if (length > 1) link = new Chain(length-1);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18361287Di2015UniqueSeparatorLarsTech
18361287Di2015UniqueSeparator listBox1.DrawMode = DrawMode.OwnerDrawVariable;Di2015NewLine //First add some items to your listBox1.Items     Di2015NewLine //MeasureItem event handler for your ListBoxDi2015NewLine private void listBox1_MeasureItem(object sender, MeasureItemEventArgs e)Di2015NewLine {Di2015NewLine   if (e.Index == 2) e.ItemHeight = 50;//Set the Height of the item at index 2 to 50Di2015NewLine }Di2015NewLine //DrawItem event handler for your ListBoxDi2015NewLine private void listBox1_DrawItem(object sender, DrawItemEventArgs e)Di2015NewLine {Di2015NewLine   e.DrawBackground();Di2015NewLine   e.Graphics.DrawString(listBox1.Items[e.Index].ToString(), e.Font, new SolidBrush(e.ForeColor), e.Bounds);Di2015NewLine }Di2015NewLine
18361311Di2015UniqueSeparatorfloat f = 158136.422f;Di2015NewLine
18361311Di2015UniqueSeparatorf
18361311Di2015UniqueSeparator158136.421875
18361311Di2015UniqueSeparatorfloat f = 158136.422f;Di2015NewLineConsole.WriteLine(f);Di2015NewLineConsole.WriteLine(f.ToString("r"));Di2015NewLine
18361311Di2015UniqueSeparator158136.4Di2015NewLine158136.422Di2015NewLine
18361440Di2015UniqueSeparatorpublic static bool Login(string userName, string password, bool persistCookie = false)Di2015NewLine{Di2015NewLine    WebSecurity.VerifyProvider();Di2015NewLine    bool flag = Membership.ValidateUser(userName, password);Di2015NewLine    if (flag)Di2015NewLine    {Di2015NewLine        FormsAuthentication.SetAuthCookie(userName, persistCookie);Di2015NewLine    }Di2015NewLine    return flag;Di2015NewLine}Di2015NewLine
18361440Di2015UniqueSeparatorpublic static bool MyLogin(string userName, string password, bool persistCookie = false)Di2015NewLine{Di2015NewLine    bool flag = CheckADUser(userName, password);Di2015NewLineDi2015NewLine    if (flag)Di2015NewLine    {Di2015NewLine        string mappedUsername = GetMappedUser(userName);Di2015NewLine        if(mappedUsername != "")Di2015NewLine        {Di2015NewLine            FormsAuthentication.SetAuthCookie(userName, persistCookie);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            flag = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return flag;Di2015NewLine}Di2015NewLine
18361572Di2015UniqueSeparatorpublic string[] GetHeaders(string feature){Di2015NewLine  var result = dataGridView1.ColumnsDi2015NewLine                            .OfType<DataGridViewColumn>()Di2015NewLine                            .Where(c=>dataGridView1.RowsDi2015NewLine                                                   .OfType<DataGridViewRow>()Di2015NewLine                                                   .Any(r=>r.Cells["feature"].Value.ToString() == feature) &&     Di2015NewLine                                                   r.Cells[c.Name].Value.ToString() == "yes"))Di2015NewLine                            .Select(c=>c.HeaderText)Di2015NewLine                            .ToArray();                  Di2015NewLine  return result;Di2015NewLine}Di2015NewLine
18361572Di2015UniqueSeparator public string[] GetHeaders(string feature){Di2015NewLine    var row = dataGridView1.RowsDi2015NewLine                           .OfType<DataGridViewRow>()Di2015NewLine                           .FirstOrDefault(r=>r.Cells["feature"].Value.Equals(feature));Di2015NewLine    if(row == null) return null;Di2015NewLine    return row.Cells.OfType<DataGridViewCell>()Di2015NewLine                    .Where(c=>c.Value.Equals("yes"))Di2015NewLine                    .Select(c=>c.OwningColumn.HeaderText)Di2015NewLine                    .ToArray();Di2015NewLine }Di2015NewLine
18361589Di2015UniqueSeparatorCancellationToken
18361646Di2015UniqueSeparatorpublic class ErrorController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        return View("500");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18361646Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    name: "Error",Di2015NewLine    url: "500",Di2015NewLine    defaults: new { controller = "Error", action = "Index" }Di2015NewLine);Di2015NewLine
18361646Di2015UniqueSeparatorhttp://example.com/500
18361646Di2015UniqueSeparatorIndex
18361646Di2015UniqueSeparatorErrorController
18361646Di2015UniqueSeparator500.aspx
18361681Di2015UniqueSeparatorpublic static class LoginSettingsDi2015NewLine{Di2015NewLine    public static string UserName { get; set; }Di2015NewLine    public static string Password { get; set; }Di2015NewLine    public static string Server { get; set; }Di2015NewLine}Di2015NewLine
18361681Di2015UniqueSeparatorLoginSettings.UserName = txtUserName.Text;Di2015NewLine...Di2015NewLine
18361681Di2015UniqueSeparatorvar userName = LoginSettings.UserName;Di2015NewLine...Di2015NewLine
18361814Di2015UniqueSeparatorTrim()
18361814Di2015UniqueSeparatorDistinct()
18361814Di2015UniqueSeparatorvar list = new[] {" string", "string "};Di2015NewLinevar distinctList = list.Select(s => s.Trim()).Distinct();Di2015NewLine
18361814Di2015UniqueSeparatorvar list = new[] {" String", "string "};Di2015NewLinevar distinctList = list.Select(s => s.Trim())Di2015NewLine                       .Distinct(StringComparer.InvariantCultureIgnoreCase);Di2015NewLine
18361814Di2015UniqueSeparatornull
18361814Di2015UniqueSeparatorvar list = new[] {" String", "string ", null};Di2015NewLineDi2015NewLinevar distinctList = list.Where(s => !string.IsNullOrEmpty(s))Di2015NewLine                       .Select(s => s.Trim())Di2015NewLine                       .Distinct(StringComparer.InvariantCultureIgnoreCase);Di2015NewLine
18361814Di2015UniqueSeparatornull
18361814Di2015UniqueSeparatorTrim()
18361814Di2015UniqueSeparator    public static string CusTrim(this string @this)Di2015NewLine    {Di2015NewLine        return @this == null ? null : @this.Trim();Di2015NewLine    }Di2015NewLine
18361814Di2015UniqueSeparatorvar distinctList = list.Select(s => s.CusTrim())Di2015NewLine                       .Distinct(StringComparer.InvariantCultureIgnoreCase);Di2015NewLine
18361962Di2015UniqueSeparatorstring bar = Regex.Replace(foo, "^test0. ", "$0- ");Di2015NewLine
18361962Di2015UniqueSeparator$0
18361962Di2015UniqueSeparatorreplacementText
18361962Di2015UniqueSeparator"$0- "
18362017Di2015UniqueSeparatorvar files = top_directory.EnumerateFiles(file_pattern);
18362017Di2015UniqueSeparatorfilename = excludedExtensionList.Any(e => e == file.Extension) ? null : file.FullName;Di2015NewLine
18362088Di2015UniqueSeparatorstring extension = System.IO.Path.GetExtension(textBox_Choose.Text);Di2015NewLineif (extension == ".txt")Di2015NewLine    dotxt();Di2015NewLineelse if(extension == ".csv")Di2015NewLine    doexcel();Di2015NewLineelseDi2015NewLine{Di2015NewLine    //deal with an unexpected caseDi2015NewLine}Di2015NewLine
18362110Di2015UniqueSeparatorWhere
18362110Di2015UniqueSeparatorAND
18362110Di2015UniqueSeparatorIQueryable<Event>
18362110Di2015UniqueSeparatorpublic IQueryable<Event> GetBySearch(EventFilter search)Di2015NewLine{Di2015NewLine    IQueryable<Event> events = this.Context.Events; //(I assume Events is an IQueryable<Event>)Di2015NewLineDi2015NewLine    if (search.CategoryId != 0)Di2015NewLine    {Di2015NewLine        events = events.Where(x => x.CategoryId == search.CategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    if (search.SubCategoryId != 0)Di2015NewLine    {Di2015NewLine        events = events.Where(x => x.SubCategoryId == search.SubCategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    return events;Di2015NewLine}Di2015NewLine
18362110Di2015UniqueSeparatorthis.Context.Events.Where(x => x.CategoryId == search.CategoryId).Where(x => x.SubCategoryId == search.SubCategoryId);Di2015NewLine
18362110Di2015UniqueSeparatorthis.Context.Events.Where(x => x.CategoryId == search.CategoryId && x.SubCategoryId == search.SubCategoryId);Di2015NewLine
18362155Di2015UniqueSeparatorstring
18362215Di2015UniqueSeparatorstatic
18362215Di2015UniqueSeparatorScreenCapture
18362215Di2015UniqueSeparatorControlPanel
18362215Di2015UniqueSeparatorstatic
18362215Di2015UniqueSeparatorpublic event StatusUpdateHandler OnUpdateStatus;Di2015NewLineDi2015NewLinepublic bool saveToClipboard = true;Di2015NewLineDi2015NewLinepublic void CaptureImage(bool showCursor, Size curSize, // ...Di2015NewLine
18362215Di2015UniqueSeparatorusing
18362215Di2015UniqueSeparatorbitmap
18362215Di2015UniqueSeparatorusing
18362215Di2015UniqueSeparatorusing
18362215Di2015UniqueSeparatorBitmap bitmap = new Bitmap(SelectionRectangle.Width, SelectionRectangle.Height);Di2015NewLineusing (Graphics g = Graphics.FromImage(bitmap)) { // ...Di2015NewLine
18362215Di2015UniqueSeparatorbitmap
18362215Di2015UniqueSeparatorCaptureImage
18362215Di2015UniqueSeparatorif (OnUpdateStatus != null) {Di2015NewLine    OnUpdateState(this, ProgressEventArgs(img));Di2015NewLine}Di2015NewLine
18362215Di2015UniqueSeparatorScreenCapture
18362215Di2015UniqueSeparator// _screenCap = new ScreenCapture();Di2015NewLineScreenCapture.OnUpdateStatus += _screen_CapOnUpdateStatus;Di2015NewLine
18362215Di2015UniqueSeparator_screenCap = new ScreenCapture();Di2015NewLine_screenCap.OnUpdateStatus += _screen_CapOnUpdateStatus;Di2015NewLine
18362215Di2015UniqueSeparator_screen_CapOnUpdateStatus(object source, ProgressEventArgs e) {Di2015NewLine     imagePreview.Image = e.Image;Di2015NewLine}Di2015NewLine
18362215Di2015UniqueSeparatorprivate set
18362215Di2015UniqueSeparatorCapturedImage
18362215Di2015UniqueSeparatorpublic Image CapturedImage { get; private set; }Di2015NewLinepublic ProgressEventArgs(Image img)Di2015NewLine{Di2015NewLine    CapturedImage = img;Di2015NewLine}Di2015NewLine
18362218Di2015UniqueSeparatorTreeViewItem parentItem = (TreeViewItem)selectedItem.Parent;Di2015NewLineint curNumber = getNumber(parentItem.Header.ToString());Di2015NewLine
18362218Di2015UniqueSeparatorgetNumber
18362218Di2015UniqueSeparatorprivate int getNumber(string parentNodeHeader)Di2015NewLine{Di2015NewLine    int curNumber = 0;Di2015NewLineDi2015NewLine    //Required string-analysis actionsDi2015NewLine    //Sample functionality: extract all the numbers in the given stringDi2015NewLine    string outString = "";Di2015NewLine    int count = -1;Di2015NewLine    doDi2015NewLine    {Di2015NewLine        count = count + 1;Di2015NewLine        Char curChar = Convert.ToChar(parentNodeHeader.Substring(count, 1));Di2015NewLine        if (Char.IsNumber(curChar))Di2015NewLine        {Di2015NewLine            outString = outString + parentNodeHeader.Substring(count, 1);Di2015NewLine        }Di2015NewLine    } while (count < parentNodeHeader.Length - 1);Di2015NewLineDi2015NewLine    if (outString != "")Di2015NewLine    {Di2015NewLine        curNumber = Convert.ToInt32(outString);Di2015NewLine    }Di2015NewLineDi2015NewLine    return curNumber;Di2015NewLine}Di2015NewLine
18362218Di2015UniqueSeparator .OfType<TabItem>().SingleOrDefault(n => n.Header.ToString() == selectedItem.Header.ToString() + curNumber.ToString());Di2015NewLine
18362218Di2015UniqueSeparatorRegex
18362218Di2015UniqueSeparatorprivate int getNumber(string parentNodeHeader)Di2015NewLine{Di2015NewLine    System.Text.RegularExpressions.Match m = System.Text.RegularExpressions.Regex.Match(parentNodeHeader, @"\\d+");Di2015NewLine    return Convert.ToInt32(m.Value);Di2015NewLine}Di2015NewLine
18362299Di2015UniqueSeparatorOnClientClick
18362299Di2015UniqueSeparator<asp:button runat="server" text="Submit" onclick="code_behind_function" onclientclick="javascriptfunction()"/>Di2015NewLine
18362459Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    using System;Di2015NewLine    using System.Reflection;Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var DLL = Assembly.LoadFile(@"C:\\visual studio 2012\\Projects\\ConsoleApplication1\\ConsoleApplication1\\DLL.dll");Di2015NewLineDi2015NewLine            foreach(Type type in DLL.GetExportedTypes())Di2015NewLine            {Di2015NewLine                var c = Activator.CreateInstance(type);Di2015NewLine                type.InvokeMember("Output", BindingFlags.InvokeMethod, null, c, new object[] {@"Hello"});Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18362459Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    using System;Di2015NewLine    using System.Reflection;Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var DLL = Assembly.LoadFile(@"C:\\visual studio 2012\\Projects\\ConsoleApplication1\\ConsoleApplication1\\DLL.dll");Di2015NewLineDi2015NewLine            foreach(Type type in DLL.GetExportedTypes())Di2015NewLine            {Di2015NewLine                dynamic c = Activator.CreateInstance(type);Di2015NewLine                c.Output(@"Hello");Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18362513Di2015UniqueSeparatorGraphScript()
18362607Di2015UniqueSeparatorHtmlHelper
18362607Di2015UniqueSeparatorusing Sysem.Web.Mvc;Di2015NewLineusing Sysem.Web.Mvc.Html;Di2015NewLineDi2015NewLinepublic static class PartialHelperDi2015NewLine{Di2015NewLine    public static void RenderMostRecent(this HtmlHelper html)Di2015NewLine    {Di2015NewLine        html.RenderAction("MostPopular", "Blog");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18362607Di2015UniqueSeparatorPartialHelper
18362607Di2015UniqueSeparator@{Html.RenderMostRecent();}Di2015NewLine
18362607Di2015UniqueSeparatorAction
18362607Di2015UniqueSeparatorRenderAction
18362607Di2015UniqueSeparatorpublic static class PartialHelperDi2015NewLine{Di2015NewLine    public static IHtmlString RenderMostRecent(this HtmlHelper html)Di2015NewLine    {Di2015NewLine        return html.Action("MostPopular", "Blog");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18362607Di2015UniqueSeparator@Html.RenderMostRecent()Di2015NewLine
18362842Di2015UniqueSeparatorCD[] cdLibrary = new CD[20];Di2015NewLine
18362842Di2015UniqueSeparatornull
18362842Di2015UniqueSeparatorCD
18362877Di2015UniqueSeparatorpublic static String Serialize(Object toSerialize)Di2015NewLine    {Di2015NewLine        Random random = new Random();Di2015NewLine        int randomNumber = random.Next(100000, 1000000000);Di2015NewLine        String fileName = randomNumber + ".txt";Di2015NewLineDi2015NewLine        fileName = "EmployeeInfo.txt";Di2015NewLineDi2015NewLine        MemoryStream stream = new MemoryStream();Di2015NewLineDi2015NewLine        BinaryFormatter bformatter = new BinaryFormatter();Di2015NewLine        bformatter.Serialize(stream, toSerialize);Di2015NewLineDi2015NewLine        String fileContent = Convert.ToBase64String(stream.ToArray());Di2015NewLine        stream.Close();Di2015NewLineDi2015NewLine        return fileContent;Di2015NewLine    }Di2015NewLine
18362877Di2015UniqueSeparator public static Object Deserialize(String stringObject)Di2015NewLine    {Di2015NewLine        Object returnObject;Di2015NewLine        byte[] bytes = Convert.FromBase64String(stringObject);Di2015NewLineDi2015NewLine        MemoryStream stream = new MemoryStream(bytes);Di2015NewLineDi2015NewLine        BinaryFormatter bformatter = new BinaryFormatter();Di2015NewLine        returnObject = bformatter.Deserialize(stream);Di2015NewLineDi2015NewLine        return returnObject;Di2015NewLine    }Di2015NewLine
18363052Di2015UniqueSeparatorpublic static Guid Create(Guid namespaceId, string name)Di2015NewLine{Di2015NewLine    if (name == null)Di2015NewLine        throw new ArgumentNullException("name");Di2015NewLineDi2015NewLine    // convert the name to a sequence of octets (as defined by the standard or conventions of its namespace) (step 3)Di2015NewLine    // ASSUME: UTF-8 encoding is always appropriateDi2015NewLine    byte[] nameBytes = Encoding.UTF8.GetBytes(name);Di2015NewLineDi2015NewLine    // convert the namespace UUID to network order (step 3)Di2015NewLine    byte[] namespaceBytes = namespaceId.ToByteArray();Di2015NewLine    SwapByteOrder(namespaceBytes);Di2015NewLineDi2015NewLine    // comput the hash of the name space ID concatenated with the name (step 4)Di2015NewLine    byte[] hash;Di2015NewLine    using (HashAlgorithm algorithm =  SHA1.Create())Di2015NewLine    {Di2015NewLine        algorithm.TransformBlock(namespaceBytes, 0, namespaceBytes.Length, null, 0);Di2015NewLine        algorithm.TransformFinalBlock(nameBytes, 0, nameBytes.Length);Di2015NewLine        hash = algorithm.Hash;Di2015NewLine    }Di2015NewLineDi2015NewLine    // most bytes from the hash are copied straight to the bytes of the new GUID (steps 5-7, 9, 11-12)Di2015NewLine    byte[] newGuid = new byte[16];Di2015NewLine    Array.Copy(hash, 0, newGuid, 0, 16);Di2015NewLineDi2015NewLine    // set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number from Section 4.1.3 (step 8)Di2015NewLine    newGuid[6] = (byte)((newGuid[6] & 0x0F) | (5 << 4));Di2015NewLineDi2015NewLine    // set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively (step 10)Di2015NewLine    newGuid[8] = (byte)((newGuid[8] & 0x3F) | 0x80);Di2015NewLineDi2015NewLine    // convert the resulting UUID to local byte order (step 13)Di2015NewLine    SwapByteOrder(newGuid);Di2015NewLine    return new Guid(newGuid);Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// The namespace for fully-qualified domain names (from RFC 4122, Appendix C).Di2015NewLine/// </summary>Di2015NewLinepublic static readonly Guid DnsNamespace = new Guid("6ba7b810-9dad-11d1-80b4-00c04fd430c8");Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// The namespace for URLs (from RFC 4122, Appendix C).Di2015NewLine/// </summary>Di2015NewLinepublic static readonly Guid UrlNamespace = new Guid("6ba7b811-9dad-11d1-80b4-00c04fd430c8");Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// The namespace for ISO OIDs (from RFC 4122, Appendix C).Di2015NewLine/// </summary>Di2015NewLinepublic static readonly Guid IsoOidNamespace = new Guid("6ba7b812-9dad-11d1-80b4-00c04fd430c8");Di2015NewLineDi2015NewLine// Converts a GUID (expressed as a byte array) to/from network order (MSB-first).Di2015NewLineinternal static void SwapByteOrder(byte[] guid)Di2015NewLine{Di2015NewLine    SwapBytes(guid, 0, 3);Di2015NewLine    SwapBytes(guid, 1, 2);Di2015NewLine    SwapBytes(guid, 4, 5);Di2015NewLine    SwapBytes(guid, 6, 7);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void SwapBytes(byte[] guid, int left, int right)Di2015NewLine{Di2015NewLine    byte temp = guid[left];Di2015NewLine    guid[left] = guid[right];Di2015NewLine    guid[right] = temp;Di2015NewLine}Di2015NewLine
18363076Di2015UniqueSeparatore.Delta.Translation.X
18363076Di2015UniqueSeparatore.Delta.Translation.Y
18363076Di2015UniqueSeparatorActualWidth
18363076Di2015UniqueSeparatorActualHeight
18363190Di2015UniqueSeparatorcustom message handler
18363190Di2015UniqueSeparatorpublic class ApiKeyHandler : DelegatingHandlerDi2015NewLine{Di2015NewLine    public string Key { get; set; }Di2015NewLineDi2015NewLine    public ApiKeyHandler(string key)Di2015NewLine    {Di2015NewLine        this.Key = key;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override Task<HttpResponseMessage> SendAsync(Di2015NewLine        HttpRequestMessage request, CancellationToken cancellationToken)Di2015NewLine    {Di2015NewLine        if (!ValidateKey(request))Di2015NewLine        {Di2015NewLine            var response = new HttpResponseMessage(HttpStatusCode.Forbidden);Di2015NewLine            var tsc = new TaskCompletionSource<HttpResponseMessage>();Di2015NewLine            tsc.SetResult(response);    Di2015NewLine            return tsc.Task;Di2015NewLine        }Di2015NewLine        return base.SendAsync(request, cancellationToken);Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool ValidateKey(HttpRequestMessage message)Di2015NewLine    {Di2015NewLine        var query = message.RequestUri.ParseQueryString();Di2015NewLine        string key = query["key"];Di2015NewLine        return (key == Key);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18363323Di2015UniqueSeparatorprotected void UpdateUsers()Di2015NewLine{Di2015NewLine    Configuration config = (Configuration)WebConfigurationManager.OpenWebConfiguration("~");Di2015NewLine    AuthorizationSection root_section = (AuthorizationSection)config.GetSection("system.web/authorization");Di2015NewLineDi2015NewLine    //Remove all Current Users to root location.Di2015NewLine    root_section.Rules.Clear();Di2015NewLineDi2015NewLine    //Add New Users to root location.Di2015NewLine    AuthorizationRule rootAuth = new AuthorizationRule(AuthorizationRuleAction.Allow);Di2015NewLine    rootAuth.Users.Add("domain\\\\rootusername1");Di2015NewLine    rootAuth.Users.Add("domain\\\\rootusername2");Di2015NewLine    rootAuth.Users.Add("domain\\\\rootusername3"); Di2015NewLine    root_section.Rules.Add(rootAuth);Di2015NewLineDi2015NewLine    ////Add Deny All Users to root location.Di2015NewLine    AuthorizationRule rootDeny = new AuthorizationRule(AuthorizationRuleAction.Deny);Di2015NewLine    rootDeny.Users.Add("*");Di2015NewLine    root_section.Rules.Add(rootDeny);Di2015NewLineDi2015NewLine    root_section.CurrentConfiguration.Save();Di2015NewLineDi2015NewLine    //Other Locations  Di2015NewLine    ConfigurationLocationCollection section = config.Locations;Di2015NewLineDi2015NewLine    foreach (ConfigurationLocation location in section)Di2015NewLine    {Di2015NewLine        if (location.Path == "admin") //This is case SensitiveDi2015NewLine        {Di2015NewLine            Configuration adminConfig = (Configuration)location.OpenConfiguration();Di2015NewLine            AuthorizationSection admin_section = (AuthorizationSection)adminConfig.GetSection("system.web/authorization");Di2015NewLineDi2015NewLine            //Remove all Current Users to admin location.Di2015NewLine            admin_section.Rules.Clear();Di2015NewLineDi2015NewLine            ////Add New Users to admin location.Di2015NewLine            AuthorizationRule adminAuth = new AuthorizationRule(AuthorizationRuleAction.Allow);Di2015NewLine            adminAuth.Users.Add("domain\\\\adminusername1");Di2015NewLine            adminAuth.Users.Add("domain\\\\adminusername2");Di2015NewLine            adminAuth.Users.Add("domain\\\\adminusername3");Di2015NewLine            adminAuth.Users.Add("domain\\\\adminusername4");Di2015NewLine            admin_section.Rules.Add(adminAuth);Di2015NewLine            adminAuth = null;Di2015NewLineDi2015NewLine            ////Add Deny All Users to root location.Di2015NewLine            AuthorizationRule adminDeny = new AuthorizationRule(AuthorizationRuleAction.Deny);Di2015NewLine            adminDeny.Users.Add("?"); // For some reason if I remove this line it says "Object reference not set to an instance of an object"Di2015NewLine            adminDeny.Users.Add("*");Di2015NewLine            admin_section.Rules.Add(adminDeny);Di2015NewLineDi2015NewLine            admin_section.CurrentConfiguration.Save();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18363388Di2015UniqueSeparatorstring[] lines = richTextBox1.Lines;Di2015NewLineList<string> linesToAdd = new List<string>();Di2015NewLinestring filterString = "\\"HERE\\".";Di2015NewLineforeach (string s in lines)Di2015NewLine{Di2015NewLine    string temp = s;Di2015NewLine    if (s.StartsWith("Hello Worlds") && s.EndsWith(";") && s.Contains(filterString))Di2015NewLine       temp = s.Replace(filterString, string.Empty);Di2015NewLine    linesToAdd.Add(temp);Di2015NewLine }Di2015NewLine richTextBox1.Lines = linesToAdd.ToArray();     Di2015NewLine
18363390Di2015UniqueSeparatorref class
18363390Di2015UniqueSeparatorIList<T>
18363390Di2015UniqueSeparatorIList<T>
18363435Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic ActionResult FollowUp(string contacted, string pid, int? id) Di2015NewLine{Di2015NewLine   if(!string.IsNullOrEmpty(contacted) && !string.IsNullOrEmpty(pid)) {Di2015NewLine      // do your logic.Di2015NewLine   }Di2015NewLine   else if(!string.IsNullOrEmpty(contacted) && id != null) {Di2015NewLine      // do your logic.Di2015NewLine   }Di2015NewLine}Di2015NewLine
18363435Di2015UniqueSeparatorid
18363435Di2015UniqueSeparatornullable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorIDisposable
18363451Di2015UniqueSeparatorDispose
18363492Di2015UniqueSeparatorlocalWWW
18363492Di2015UniqueSeparatornull
18363492Di2015UniqueSeparatorGetWWW
18363492Di2015UniqueSeparatorfloat elapsedTime = 0.0f;Di2015NewLinefloat waitTime = 2.5f;Di2015NewLinebool isDownloading = false;Di2015NewLineWWW theWWW = null;Di2015NewLinevoid Update () {Di2015NewLine    elapsedTime += Time.deltaTime;Di2015NewLine    if(elapsedTime >= waitTime && isDownloading){Di2015NewLine        StopCoroutine("Download");Di2015NewLine        theWWW.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineIEnumerator Download(string url){Di2015NewLine    elapsedTime = 0.0f;Di2015NewLine    isDownloading = true;Di2015NewLineDi2015NewLine    theWWW = new WWW(url);Di2015NewLine    yield return theWWW;Di2015NewLineDi2015NewLine    Debug.Log("Download finished");Di2015NewLine}Di2015NewLine
18363495Di2015UniqueSeparatorFunc<T>
18363495Di2015UniqueSeparatorFunc<TArg,TResult>
18363495Di2015UniqueSeparatorpublic Func<T> EnableP4<T>(Func<T> function)Di2015NewLine
18363495Di2015UniqueSeparatorvar newFunc = EnableP4(() => SomeFunc(arg1, arg2, arg3));Di2015NewLine
18363714Di2015UniqueSeparatorselect distinct table_name Di2015NewLinefrom .information_schema.columns c Di2015NewLineinner .sis.tables t Di2015NewLineon c.table_name = t.name order by table_name Di2015NewLine
18363856Di2015UniqueSeparatorxsl:with-param
18363856Di2015UniqueSeparator<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>Di2015NewLine    <xsl:output indent="yes"/>Di2015NewLine    <xsl:param name='width' select ="270"/>Di2015NewLine    <xsl:param name='height' select="180"/>Di2015NewLineDi2015NewLine    <xsl:template match="/">Di2015NewLine        <svg xmlns="http://www.w3.org/2000/svg" version="1.1">          Di2015NewLine            <xsl:call-template name="while"/>Di2015NewLine        </svg>Di2015NewLine    </xsl:template>Di2015NewLineDi2015NewLine    <xsl:template name="while">Di2015NewLine        <xsl:param name="currentCount" select="0"/>Di2015NewLine        <line x1="{$currentCount}" y1="0.5" x2="{$currentCount}" y2="10.5" stroke="black" stroke-width="1" />Di2015NewLine        <xsl:variable name="counter" select="$currentCount + 10" />Di2015NewLine        <xsl:if test="$counter < $width">Di2015NewLine            <xsl:call-template name="while">Di2015NewLine                <xsl:with-param name="currentCount" select="$counter"/>Di2015NewLine            </xsl:call-template>Di2015NewLine        </xsl:if>Di2015NewLine    </xsl:template>Di2015NewLineDi2015NewLine</xsl:stylesheet>Di2015NewLine
18363858Di2015UniqueSeparatortags[]
18363858Di2015UniqueSeparatortags
18363858Di2015UniqueSeparator<input type="checkbox" name="tags" id="categorieOne" value="1" />Di2015NewLine<input type="checkbox" name="tags" id="categorieTwo" value="2" />Di2015NewLine
18363858Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult SomeAction(string[] tags)Di2015NewLine{Di2015NewLine    ... the tags array will contain the selected values (1, 2, ...)Di2015NewLine}Di2015NewLine
18363981Di2015UniqueSeparatorDictionary<TKey, TValue>
18363981Di2015UniqueSeparatorentries
18363981Di2015UniqueSeparatorEntry[]
18363981Di2015UniqueSeparatorEntry
18363981Di2015UniqueSeparatorprivate struct Entry {Di2015NewLine  public int hashCode;Di2015NewLine  public int next;Di2015NewLine  public TKey key;Di2015NewLine  public TValue value;Di2015NewLine}Di2015NewLine
18363981Di2015UniqueSeparatorEntry
18363981Di2015UniqueSeparatorTKey
18363981Di2015UniqueSeparatorTValue
18363981Di2015UniqueSeparatorsizeof
18363981Di2015UniqueSeparatorint.MaxValue / (2*16)
18363981Di2015UniqueSeparatorTKey
18363981Di2015UniqueSeparatorTValue
18363981Di2015UniqueSeparatorIDictionary<TKey, TValue>
18364073Di2015UniqueSeparator<asp:SqlDataSource ID="SqlDataSource1" runat="server" ConnectionString="<%$ ConnectionStrings:SiteSqlServer %>" SelectCommand="SPNAME" SelectCommandType="StoredProcedure">Di2015NewLine                <SelectParameters>Di2015NewLine                    <asp:Parameter Name="Id" Type="Int32" />Di2015NewLine                </SelectParameters>Di2015NewLine            </asp:SqlDataSource>Di2015NewLine
18364073Di2015UniqueSeparator  foreach (var s in System.Web.Configuration.WebConfigurationManager.ConnectionStrings)  {Di2015NewLine    Response.Write(s);  }Di2015NewLine
18364080Di2015UniqueSeparator<%= %> is the equivalent of `Response.Write()`Di2015NewLine<% %> runs server-side code, like an if-else blockDi2015NewLine<%: %> is for HTML-encoding the dataDi2015NewLine<%# %> is for data-binding expressionsDi2015NewLine<%@ %> is for directives, usually page directives in ASP.NETDi2015NewLine
18364129Di2015UniqueSeparatorsender
18364129Di2015UniqueSeparatorTag
18364129Di2015UniqueSeparator//...Di2015NewLinecaption1.Tag = 0;Di2015NewLinecaption2.Tag = 1;Di2015NewLine//...Di2015NewLine
18364129Di2015UniqueSeparatorTag
18364129Di2015UniqueSeparatorprivate void caption_Validated(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    TextBox textBox = sender as TextBox;Di2015NewLine    captions[(int)textBox.Tag] = disallowChar(textBox.Text);Di2015NewLine    textBox.Text = captions[(int)textBox.Tag];Di2015NewLine}Di2015NewLine
18364129Di2015UniqueSeparatorcaptions
18364129Di2015UniqueSeparatorText
18364233Di2015UniqueSeparatorInvoke
18364233Di2015UniqueSeparatorthis
18364233Di2015UniqueSeparatorForm
18364233Di2015UniqueSeparatorUserControl
18364233Di2015UniqueSeparatorControl.Invoke
18364233Di2015UniqueSeparatorInvoke
18364233Di2015UniqueSeparatorInvoke
18364233Di2015UniqueSeparatornull
18364357Di2015UniqueSeparatorpublic class EntityDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public virtual string Title { get; set; }Di2015NewLine}Di2015NewLine
18364357Di2015UniqueSeparatorpublic class City : EntityDi2015NewLine{Di2015NewLine    public int Population { get; set; }Di2015NewLineDi2015NewLine    [Required(ErrorMessage = "Please name your city")]Di2015NewLine    public override string TitleDi2015NewLine    {Di2015NewLine        get { return base.Title; }Di2015NewLine        set { base.Title = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18364357Di2015UniqueSeparatorFluentValidation.NET
18364357Di2015UniqueSeparatorpublic class CityValidator: AbstractValidator<City>Di2015NewLine{Di2015NewLine    public CityValidator()Di2015NewLine    {Di2015NewLine        thisDi2015NewLine            .RuleFor(x => x.Title)Di2015NewLine            .NotEmpty()Di2015NewLine            .WithMessage("Please name your city");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CarValidator: AbstractValidator<Car>Di2015NewLine{Di2015NewLineÂ  Â  public CityValidator()Di2015NewLineÂ  Â  {Di2015NewLineÂ  Â  Â  Â  thisDi2015NewLineÂ  Â  Â  Â  Â  Â  .RuleFor(x => x.Title)Di2015NewLineÂ  Â  Â  Â  Â  Â  .NotEmpty()Di2015NewLineÂ  Â  Â  Â  Â  Â  .WithMessage("You should specify a name for your car");Di2015NewLineÂ  Â  }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLine
18364498Di2015UniqueSeparatoryield foreach
18364498Di2015UniqueSeparatorIEnumerable
18364498Di2015UniqueSeparatorIEnumerator
18364498Di2015UniqueSeparatoryield foreach Bar()
18364529Di2015UniqueSeparatorEnter, Focus, LostFocus, Leave
18364529Di2015UniqueSeparatorButton
18364529Di2015UniqueSeparatorFocused
18364529Di2015UniqueSeparatorButton
18364529Di2015UniqueSeparatorActiveControl
18364529Di2015UniqueSeparatorTextBox
18364529Di2015UniqueSeparatorTextBoxes
18364529Di2015UniqueSeparatorlastFocused
18364529Di2015UniqueSeparatorTextBox lastFocused;Di2015NewLine//Enter event handler for all your TextBoxesDi2015NewLineprivate void TextBoxes_Enter(object sender, EventArgs e){Di2015NewLine  lastFocused = sender as TextBox;Di2015NewLine}Di2015NewLine//Click event handler for your buttonDi2015NewLineprivate void btn_one_Click(object sender, EventArgs e){Di2015NewLine  if(lastFocused != null) lastFocused.Text += btn_one.Text;Di2015NewLine}Di2015NewLine
18364546Di2015UniqueSeparatorswitch
18364546Di2015UniqueSeparatorFilterMessage
18364546Di2015UniqueSeparatorLayoutAnchorableFloatingWindowControl.cs
18364546Di2015UniqueSeparator            case Win32Helper.WM_NCLBUTTONDBLCLK:Di2015NewLine                _model.Descendents().OfType<LayoutAnchorablePane>().First(p => p.ChildrenCount > 0 && p.SelectedContent != null).SelectedContent.Dock();Di2015NewLine                break;Di2015NewLine
18364546Di2015UniqueSeparatorswitch
18364546Di2015UniqueSeparatorFilterMessage
18364546Di2015UniqueSeparatorLayoutDocumentFloatingWindowControl.cs
18364546Di2015UniqueSeparator            case Win32Helper.WM_NCLBUTTONDBLCLK:Di2015NewLine                _model.RootDocument.Dock();Di2015NewLine                break;Di2015NewLine
18364562Di2015UniqueSeparatorTimeSpan ts = TimeSpan.FromDays(value);Di2015NewLine
18364615Di2015UniqueSeparatorSwitchToThisWindow(proc.MainWindowHandle);Di2015NewLine
18364787Di2015UniqueSeparator        dataGridView1.DataSource = null;Di2015NewLine        dataGridView1.Columns.Clear();Di2015NewLine        dtCompanyInfo = GetCompanyInfo();Di2015NewLine        if (dtCompanyInfo.Rows.Count > 0)Di2015NewLine        {Di2015NewLine            dataGridView1.DataSource = dtCompanyInfo;Di2015NewLine            DataGridViewCheckBoxColumn checkColumn = new DataGridViewCheckBoxColumn();Di2015NewLine            checkColumn.Name = "";Di2015NewLine            checkColumn.HeaderText = "Select";Di2015NewLine            checkColumn.Width = 50;Di2015NewLine            checkColumn.ReadOnly = false;Di2015NewLine            checkColumn.FillWeight = 10; //if the datagridview is resized (on form resize) the checkbox won't take up too much; value is relative to the other columns' fill values\\\\Di2015NewLine            dataGridView1.Columns.Add(checkColumn);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
18364936Di2015UniqueSeparatorMediaLibraryExtensions
18364936Di2015UniqueSeparatorMediaLibrary library=new MediaLibrary();Di2015NewLineSongMetadata smd=new SongMetadata()Di2015NewLine{Di2015NewLine    AlbumName = "AlbumName",Di2015NewLine    Duration = TimeSpan.FromMinutes(2.50),Di2015NewLine    Name = "SongName" Di2015NewLine};Di2015NewLineMediaLibraryExtensions.SaveSong(library, new Uri(filePath, UriKind.RelativeOrAbsolute), smd, SaveSongOperation.CopyToLibrary);Di2015NewLine
18365028Di2015UniqueSeparator<toolkit:ListPicker.ItemTemplate>Di2015NewLine    <DataTemplate>Di2015NewLine        <StackPanel Orientation="Horizontal">Di2015NewLine            <toolkit:PhoneTextBox Hint="firstname" Style="{StaticResource TransparentToolkitTextBoxStyle}" Text="{Binding FirstName}"/>Di2015NewLine        </StackPanel>Di2015NewLine    </DataTemplate>Di2015NewLine</toolkit:ListPicker.ItemTemplate>Di2015NewLine
18365028Di2015UniqueSeparatorOnNavigatedTo
18365053Di2015UniqueSeparator!= "&nbsp"
18365053Di2015UniqueSeparatorstring.IsNullOrEmpty
18365053Di2015UniqueSeparatorprivate bool IsVar1Blank(string var1)Di2015NewLine{Di2015NewLine    return string.IsNullOrWhiteSpace(var1);Di2015NewLine}Di2015NewLineDi2015NewLineprivate bool IsVar2SetToYes(string var2)Di2015NewLine{Di2015NewLine    return var2 == "YES";Di2015NewLine}Di2015NewLineDi2015NewLineprivate bool IsAnOtherVariableNotSetToNo(string var3, string var4, string var5)Di2015NewLine{Di2015NewLine    return var3 != ("NO") || var4 != ("NO") || var5 != ("NO");Di2015NewLine}Di2015NewLine
18365053Di2015UniqueSeparatorif (!IsVar1Blank(var1) && !IsVar2SetToYes(var2) && IsAnOtherVariableNotSetToNo(var3, var4, var5)Di2015NewLine{Di2015NewLine    sendEmail();Di2015NewLine}Di2015NewLine
18365162Di2015UniqueSeparator    private string GetPermissionFilerValue()Di2015NewLine    {Di2015NewLine        object[] attributes = typeof(YourControllerType).GetType().GetMethod("Index").GetCustomAttributes(typeof (PermissionFilterAttribute));Di2015NewLineDi2015NewLine        return attributes[0].Roles;Di2015NewLine    }Di2015NewLine
18365171Di2015UniqueSeparatorvar catalog = new DirectoryCatalog(".", "My.Company*.dll"); // asemblies to loadDi2015NewLine
18365171Di2015UniqueSeparator var catalog = new AggregateCatalog();Di2015NewLine catalog.Catalogs.Add(new DirectoryCatalog(".")); // load only *.dll'sDi2015NewLine catalog.Catalogs.Add(new DirectoryCatalog(".", "*.exe")); // load *.exeDi2015NewLineDi2015NewLine Bootstrapper.CompositionContainer = new CompositionContainer(catalog, true); Di2015NewLine
18365194Di2015UniqueSeparatorToString()
18365194Di2015UniqueSeparatorExpression
18365194Di2015UniqueSeparatorRowFilter
18365194Di2015UniqueSeparatorlbxTracks.DataSource = new DataView(das.Tables[0], "TrackID + '' LIKE '" + idNo + "'", "TrackName", DataViewRowState.CurrentRows);Di2015NewLine
18365194Di2015UniqueSeparator+ ''
18365194Di2015UniqueSeparatorTrackID
18365194Di2015UniqueSeparatorstring
18365194Di2015UniqueSeparatorLIKE
18365194Di2015UniqueSeparatorToString()
18365194Di2015UniqueSeparatorRowFilter
18365194Di2015UniqueSeparatorstring.Format()
18365194Di2015UniqueSeparator%
18365194Di2015UniqueSeparatorLIKE
18365194Di2015UniqueSeparator=
18365372Di2015UniqueSeparator<file value="%USERPROFILE%\\My Documents\\MyApp\\log.txt"/>Di2015NewLine
18365372Di2015UniqueSeparator<file type="log4net.Util.PatternString" value="%envFolderPath{MyDocuments}\\MyApp\\log.txt" />Di2015NewLine
18365383Di2015UniqueSeparatorvar orgs =  context.OrganizationsDi2015NewLine                   .Where(O => O.AddedBy.Equals("Joe") || Di2015NewLine                               O.Comments.Any(C => C.AddedBy.Equals("joe")) ||Di2015NewLine                               O.Proposals.Any(P => P.AddedBy.Equals("joe")));Di2015NewLine
18365399Di2015UniqueSeparator/bin/Debug
18365399Di2015UniqueSeparator/bin/Release
18365403Di2015UniqueSeparator.ClientTemplate()
18365403Di2015UniqueSeparator    .Columns(columns =>Di2015NewLine    {Di2015NewLine        columns.Bound(o => o.DisplayName).Width(200);        Di2015NewLine        columns.Bound(o => o.Controller)Di2015NewLine            .ClientTemplate("<a href='/<#= Controller #>' class='t-button'>View</a>")Di2015NewLine            .Filterable(false)Di2015NewLine            .Sortable(false)Di2015NewLine            .Title("");         Di2015NewLine    })Di2015NewLine
18365407Di2015UniqueSeparator<input type="file" id="file1" />Di2015NewLine<br />Di2015NewLine<input type="file" id="file2" />Di2015NewLine
18365407Di2015UniqueSeparatorHttpPostedFile file = Request.Files["file1"]; // Gets contents passed in file1 elementDi2015NewLineHttpPostedFile file2 = Request.Files["file2"]; // Gets contents passed in file2 elementDi2015NewLineStream uploadFileStream = file.InputStream;Di2015NewLine// TODO:  Add code to read the streamsDi2015NewLine
18365489Di2015UniqueSeparator"Could not load assembly 'SportsStore.WebUI'
18365546Di2015UniqueSeparatorJSConfig.includeTypeInfo = true;
18365546Di2015UniqueSeparatorDictionary
18365553Di2015UniqueSeparator<ComboBox Loaded="ComboBox_Loaded">Di2015NewLine    <ComboBox.ItemsSource>Di2015NewLine        <CompositeCollection>Di2015NewLine            <ComboBoxItem Content="All" />Di2015NewLine            <CollectionContainer Collection="{Binding Source={StaticResource AllBitsSource}}" />Di2015NewLine        </CompositeCollection>Di2015NewLine    </ComboBox.ItemsSource>Di2015NewLine</ComboBox>Di2015NewLine
18365553Di2015UniqueSeparatorprivate void ComboBox_Loaded(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    (sender as ComboBox).SelectedIndex = 0;Di2015NewLine}Di2015NewLine
18365555Di2015UniqueSeparatorIEnumerable<dynamic>
18365555Di2015UniqueSeparatorIEnumerable<int>
18365555Di2015UniqueSeparator@{Di2015NewLine    Layout = null;Di2015NewLine}Di2015NewLineDi2015NewLine<!DOCTYPE html>Di2015NewLine<html>Di2015NewLine<head>Di2015NewLine    <meta name="viewport" content="width=device-width" />Di2015NewLineDi2015NewLine    @{Di2015NewLine        List<dynamic> obj1 = new List<dynamic>(){ 1, 2, 3, 4 };     Di2015NewLine        var grid = new WebGrid(obj1);Di2015NewLine    }Di2015NewLineDi2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <div>Di2015NewLine        @grid.GetHtml()Di2015NewLine    </div>Di2015NewLine</body>Di2015NewLine
18365695Di2015UniqueSeparatorsomeShiftAreWanted
18365695Di2015UniqueSeparatorAvail
18365695Di2015UniqueSeparatorvar someShiftAreWanted = aSelectedDataRowList.Where(x => x.Avail.Contains("WANTED")).Count();Di2015NewLine
18365897Di2015UniqueSeparatorPage
18365897Di2015UniqueSeparatorpublic class PageDi2015NewLine{Di2015NewLine    public List<Attribute> AssociatedAttributesDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return new List<Attribute>() { Di2015NewLine                new Attribute { Value = "a" }, Di2015NewLine                new Attribute { Value = "b" }, Di2015NewLine                new Attribute { Value = "c" }, Di2015NewLine            };Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18365897Di2015UniqueSeparatorAssociatedAttributes
18365897Di2015UniqueSeparatorAssociatedAttributes
18365897Di2015UniqueSeparatorAttribute
18365897Di2015UniqueSeparatorAttribute
18365897Di2015UniqueSeparatorEquals
18365897Di2015UniqueSeparatorGetHashCode
18365897Di2015UniqueSeparatorobject
18365897Di2015UniqueSeparatorAttribute
18365897Di2015UniqueSeparatorIComparable
18365897Di2015UniqueSeparatorEquals
18365897Di2015UniqueSeparatorGetHashCode
18365897Di2015UniqueSeparatorAttribute
18365897Di2015UniqueSeparatorGetHashCode
18365897Di2015UniqueSeparatorIEquatable
18365897Di2015UniqueSeparatorEquals
18365897Di2015UniqueSeparatorGetHashCode
18365897Di2015UniqueSeparatorIEquatable
18365897Di2015UniqueSeparatorIEqualityComparer<Attribute>
18365897Di2015UniqueSeparatorAttribute
18365897Di2015UniqueSeparatorEquals
18365897Di2015UniqueSeparatorGetHashCode
18365897Di2015UniqueSeparatorIntersect
18365897Di2015UniqueSeparatorDistinct
18365900Di2015UniqueSeparator var s = "your string";Di2015NewLine s = s.Substring(6,s.Length-12);Di2015NewLine
18365900Di2015UniqueSeparatorRegex reg = new Regex(@"\\s.+@.+\\s");//This is not a FULL regex for an email addressDi2015NewLines = reg.Match(s).Value.Trim();Di2015NewLine
18365900Di2015UniqueSeparatorstring upperLetters = new string(Enumerable.Range(65, 26).Select(c => (char)c).ToArray());Di2015NewLineRegex reg = new Regex(string.Format("[(]([{0}]{{2}}.+?)[)]", upperLetters));Di2015NewLines = reg.Match(s).Groups[1].Value;Di2015NewLine
18366004Di2015UniqueSeparatorclass MyStopwatch {Di2015NewLine    private DateTime _startTime;Di2015NewLine    private DateTime _stopTime;Di2015NewLineDi2015NewLine    public void start() {Di2015NewLine        _running = true;Di2015NewLine        _startTime = DateTime.Now;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void stop() {Di2015NewLine        _stopTime = DateTime.Now;Di2015NewLine        _running = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public double getTimePassed() {Di2015NewLine        if(_running) {Di2015NewLine            return (DateTime.Now - _startTime).TotalMilliseconds;Di2015NewLine        } else {Di2015NewLine            return (_stopTime - _startTime).TotalMilliseconds;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18366052Di2015UniqueSeparator<ItemTemplate>Di2015NewLine   <asp:LinkButton ID="lnkRemediation" runat="server" CausesValidation="False" Di2015NewLine      CommandArgument='<%# Eval("AlertId") %>' CommandName="Remediation" Di2015NewLine      Text="Ready" Visible='<%# !string.IsNullOrEmpty(Eval("WorkOrder").ToString()) %>'>Di2015NewLine   </asp:LinkButton>Di2015NewLine</ItemTemplate>Di2015NewLine
18366196Di2015UniqueSeparatorToShortDateString()
18366196Di2015UniqueSeparatorToString()
18366196Di2015UniqueSeparatorToString("d")
18366196Di2015UniqueSeparatorDateTime
18366196Di2015UniqueSeparatorif (dataKey != null)Di2015NewLine    txtPurchaseDate.Text = ((DateTime)dataKey["PurchaseDate"]).ToShortDateString();Di2015NewLineif (dataKey != null)Di2015NewLine    txtWarrantyDate.Text = ((DateTime)dataKey["WarrantyExpDate"]).ToString("d");Di2015NewLine
18366372Di2015UniqueSeparatorusing System.ComponentModel.Composition
18366372Di2015UniqueSeparatorimport using System.Composition
18366464Di2015UniqueSeparatorIEnumerable<OfferVM>
18366464Di2015UniqueSeparatorWhere
18366464Di2015UniqueSeparatorIList<OfferVM>
18366464Di2015UniqueSeparatorToList()
18366464Di2015UniqueSeparator vm.Offers = Mapper.Map<IList<Offer>, IList<OfferVM>>(offers)Di2015NewLine       .Where(x => x.RoomName1s==true)Di2015NewLine       .ToList();Di2015NewLine
18366497Di2015UniqueSeparatorApp.Current.Dispatcher.Invoke((Action)delegateDi2015NewLine{Di2015NewLine      System.Windows.Media.Animation.Storyboard sb =Di2015NewLine            (System.Windows.Media.Animation.Storyboard)FindResource("sbClose");Di2015NewLine      BeginStoryboard(sb);Di2015NewLine});Di2015NewLine
18366498Di2015UniqueSeparatortrue
18366498Di2015UniqueSeparatorint
18366498Di2015UniqueSeparatorif (new[] { 1, 2, 3, 4 }.Contains(myint))Di2015NewLine    //Do somethingDi2015NewLine
18366498Di2015UniqueSeparatornew[] { 1, 2, 3, 4 }
18366498Di2015UniqueSeparatorContains
18366498Di2015UniqueSeparatorIEnumerable<T>
18366747Di2015UniqueSeparatorrole
18366747Di2015UniqueSeparatorRole roleAlias = null; // <-- these two lines are missing from your code.Di2015NewLinePerson personAlias = null; Di2015NewLineDi2015NewLinevar x = session.QueryOver<Role>(() => roleAlias)Di2015NewLine    .JoinAlias(r => r.People, () => personAlias)Di2015NewLine    // ...Di2015NewLine
18366747Di2015UniqueSeparatorISession.QueryOver<T>(...)
18366747Di2015UniqueSeparator.QueryOver<T>()
18366747Di2015UniqueSeparator.QueryOver<T>(Expression<Func<T>> alias)
18366747Di2015UniqueSeparator.QueryOver<T>(string entityName)
18366747Di2015UniqueSeparator.QueryOver<T>(string entityName, Expression<Func<T>> alias)
18366747Di2015UniqueSeparatorrole
18366747Di2015UniqueSeparator.QueryOver<T>(string entityName)
18366810Di2015UniqueSeparatorChildForm form = new ChildForm(); // Create new Child Form instanceDi2015NewLinethis.Hide(); // Hide Main formDi2015NewLineform.ShowDialog(); // Show Child form, wait for closingDi2015NewLinethis.Show();Di2015NewLine
18366810Di2015UniqueSeparatorpublic MainForm()Di2015NewLine{Di2015NewLine    ChildForm form = new ChildForm();Di2015NewLine    form.FormClosed += OnClosed;  Di2015NewLine}Di2015NewLinepublic void OnClosed(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     this.Show();Di2015NewLine}Di2015NewLine
18366864Di2015UniqueSeparator: ITableAdaper
18366864Di2015UniqueSeparatorDataInterop<T>
18366864Di2015UniqueSeparatorpublic class DataInterop<T>: ITableAdapter where T: ITableAdapterDi2015NewLine{Di2015NewLine    private ITableAdapter tableAdapter;Di2015NewLineDi2015NewLine    public DataInterop(T tableAdapter)Di2015NewLine    {Di2015NewLine        this.tableAdapter = tableAdapter;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18366864Di2015UniqueSeparatorAdapter Pattern
18366864Di2015UniqueSeparatorDecorator Pattern
18366871Di2015UniqueSeparatorprotected override bool ProcessCmdKey(ref Message msg, Keys keyData)Di2015NewLine{Di2015NewLine     if (keyData == Keys.Right)Di2015NewLine    {Di2015NewLineDi2015NewLine        numericUpDown1.Value = Convert.ToDecimal(numericUpDown1.Value + 1);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine     if (keyData == Keys.Left)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            numericUpDown1.Value = Convert.ToDecimal(numericUpDown1.Value - 1);Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        catch { }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18366910Di2015UniqueSeparatorpublic static string GetTableAndSchema<T>(this ObjectContext context) where T : classDi2015NewLine{Di2015NewLine    var sql = context.CreateObjectSet<T>.ToTraceString();Di2015NewLine    var startTrim = sql.LastIndexOf("FROM") + 5;Di2015NewLine    var initialTrim = sql.SubString(startTrim);Di2015NewLine    var endTrim = initialTrim.IndexOf("AS");Di2015NewLineDi2015NewLine    return sql.Substring(startTrim, endTrim).Replace("[","").Replace("]","");Di2015NewLine}Di2015NewLine
18366910Di2015UniqueSeparatorpublic GenericRepository<TEntity> : IGenericRepository<TEntity> where TEntity : EntityBaseClass{Di2015NewLine    //REMOVED IRRELEVANT CODEDi2015NewLineDi2015NewLine    private MyContextType _context;Di2015NewLineDi2015NewLine    public virtual void AddBulk<IEnumerable<TEntity> toAdd, string connectionString, int batchSize)Di2015NewLine    {Di2015NewLine        using (SqlBulkCopy sbc = new SqlBulkCopy(connectionString, SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.CheckContstraints | SqlBulkCopyOptions.KeepIdentity))Di2015NewLine        {Di2015NewLine            sbc.DestinationTableName = _context.GetTableAndSchema<TEntity>();Di2015NewLineDi2015NewLine            //DO THE REST OF SQL BULK COPYDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18366943Di2015UniqueSeparatorEnvironment.CurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;Di2015NewLine
18367024Di2015UniqueSeparatorpublic void InsertLineBreaks(List<LineChart> inputList, int sampleInterval)Di2015NewLine{Di2015NewLine    List<LineChart> breaklinesList = new List<LineChart> { };Di2015NewLine    for (int i = 1; i <= inputList.Count; i++)Di2015NewLine    {Di2015NewLine        if ((inputList[i].X - inputList[i - 1].X).TotalMinutes > sampleInterval)Di2015NewLine        {Di2015NewLine            LineChart breakline = inputList[i];Di2015NewLine            breakline.BreakLine = 1;Di2015NewLine            breaklinesList.Add(breakline);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine inputList.AddRange(breaklinesList);Di2015NewLineDi2015NewLine}Di2015NewLine
18367160Di2015UniqueSeparatorforeach(Bar p in fooList.SelectMany(a => a.Bars.Where(b => b.BarID == barID)))Di2015NewLine            {Di2015NewLine                if (p.Bazes == null)Di2015NewLine                {Di2015NewLine                    p.Bazes = new List<Baz>();Di2015NewLine                }Di2015NewLine                p.Bazes.Add(bazID);Di2015NewLine            }Di2015NewLine
18367160Di2015UniqueSeparatorforeach(Bar p in fooList.Where(a => a.Bars !=null).SelectMany(a => a.Bars.Where(b => b.BarID == barID)))Di2015NewLine            {Di2015NewLine                if (p.Bazes == null)Di2015NewLine                {Di2015NewLine                    p.Bazes = new List<Baz>();Di2015NewLine                }Di2015NewLine                p.Bazes.Add(bazID);Di2015NewLine            }Di2015NewLine
18367212Di2015UniqueSeparatorbuttonRect.Frame = new RectangleF (Di2015NewLine    centerX - (buttonRect.Frame.Width / 2) ,Di2015NewLine    centerY - buttonRect.Frame.Height - 20 ,Di2015NewLine    buttonRect.Frame.Width ,Di2015NewLine    buttonRect.Frame.Height);Di2015NewLine
18367212Di2015UniqueSeparatorvar buttonWidth = 100;Di2015NewLinevar buttonHeight = 50;Di2015NewLinebuttonRect.Frame = new RectangleF (Di2015NewLine    centerX - buttonWidth / 2 ,Di2015NewLine    centerY - buttonHeight - 20 ,Di2015NewLine    buttonWidth ,Di2015NewLine    buttonHeight);Di2015NewLine
18367288Di2015UniqueSeparatorMath.Pow
18367288Di2015UniqueSeparatorMath.Exp
18367288Di2015UniqueSeparatorMath.Pow(Math.E, d)
18367288Di2015UniqueSeparatorMath.Exp(d)
18367288Di2015UniqueSeparatorMath.Exp
18367288Di2015UniqueSeparatorMath.Pow
18367288Di2015UniqueSeparatorTrial Operations       Pow       ExpDi2015NewLine    1       1000 0.0002037 0.0001344 (seconds)Di2015NewLine    2     100000 0.0106623 0.0046347 Di2015NewLine    3   10000000 1.0892492 0.4677785 Di2015NewLine
18367324Di2015UniqueSeparatorThisAddIn_Startup
18367324Di2015UniqueSeparatorThisAddInStartup
18367324Di2015UniqueSeparatorprivate void ThisAddIn_Startup(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    // Hook into the workbook open eventDi2015NewLine    this.Application.WorkbookOpen += new AppEvents_WorkbookOpenEventHandler(WorkWithWorkbook);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void WorkWithWorkbook(Microsoft.Office.Interop.Excel.Workbook workbook)Di2015NewLine{Di2015NewLine    // Workbook has been opened. Do stuff here.Di2015NewLine}Di2015NewLine
18367419Di2015UniqueSeparatorvar refContainer = new RefContainer() { Target = obj };Di2015NewLine
18367419Di2015UniqueSeparatorvar tmp = new RefContainer();Di2015NewLinetmp.Target = obj;Di2015NewLinevar refContainer = tmp;Di2015NewLine
18367419Di2015UniqueSeparatorobj = null;
18367419Di2015UniqueSeparatorrefContainer = null;
18367500Di2015UniqueSeparatorasync
18367500Di2015UniqueSeparatorTask.Run
18367500Di2015UniqueSeparatorGetAllErrorLogsAsync
18367500Di2015UniqueSeparatorGetAllErrorLogs
18367500Di2015UniqueSeparatorawait Task.Run
18367500Di2015UniqueSeparatorGetAllErrorLogsAsync
18367500Di2015UniqueSeparatorTask.WhenAll
18367500Di2015UniqueSeparatorGetAllErrorLogs
18367500Di2015UniqueSeparatorTask.Run
18367500Di2015UniqueSeparatorTask.WhenAll
18367500Di2015UniqueSeparatorasync
18367545Di2015UniqueSeparatorFunc<IFoo>
18367545Di2015UniqueSeparatorcontainer.Resolve<IFoo>()
18367545Di2015UniqueSeparatorbuilder.Register<IElement>((c, p) => {Di2015NewLine    var dom= p.Named<IHtml>("dom");Di2015NewLine    switch (dom.ElementType)Di2015NewLine    {Di2015NewLine        case "table":Di2015NewLine            return new TableElement(dom);Di2015NewLine        case "div":Di2015NewLine            return new DivElement(dom);Di2015NewLine        case "span":Di2015NewLine            return new SpanElement(dom);Di2015NewLine    }Di2015NewLine    return new PassthroughElement(dom);Di2015NewLine  });Di2015NewLineDi2015NewLine//usageDi2015NewLinecontainer.Resolve<IElement>(new NamedParameter("dom", domInstance))Di2015NewLine
18367545Di2015UniqueSeparatorbuilder.Register<Func<IHtml, IElement>>(dom =>Di2015NewLine{Di2015NewLine    switch (dom.ElementType)Di2015NewLine    {Di2015NewLine        case "table":Di2015NewLine            return new TableElement(dom);Di2015NewLine        case "div":Di2015NewLine            return new DivElement(dom);Di2015NewLine        case "span":Di2015NewLine            return new SpanElement(dom);Di2015NewLine    }Di2015NewLine    return new PassthroughElement(dom);Di2015NewLine});Di2015NewLineDi2015NewLineDi2015NewLinepublic class NeedsAnElementFactory //also registered in AutoFacDi2015NewLine{Di2015NewLine    protected Func<IHtml,IElement> CreateElement {get; private set;}Di2015NewLineDi2015NewLine    //AutoFac will constructor-inject the Func you registeredDi2015NewLine    //whenever this class is resolved.Di2015NewLine    public NeedsAnElementFactory(Func<IHtml,IElement> elementFactory)Di2015NewLine    {Di2015NewLine        CreateElement = elementFactory;Di2015NewLine    }  Di2015NewLineDi2015NewLine    public void MethodUsingElementFactory()Di2015NewLine    {Di2015NewLine        IHtml domInstance = GetTheDOM();Di2015NewLineDi2015NewLine        var element = CreateElement(domInstance);Di2015NewLineDi2015NewLine        //the next line won't compile;Di2015NewLine        //the factory method is strongly typed to IHtmlDi2015NewLine        var element2 = CreateElement("foo");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18367545Di2015UniqueSeparatorpublic class ElementFactoryDi2015NewLine{Di2015NewLine    public static IElement Create(IHtml dom)Di2015NewLine    {Di2015NewLine        switch (dom.ElementType)Di2015NewLine        {Di2015NewLine            case "table":Di2015NewLine                return new TableElement(dom);Di2015NewLine            case "div":Di2015NewLine                return new DivElement(dom);Di2015NewLine            case "span":Di2015NewLine                return new SpanElement(dom);Di2015NewLine        }Di2015NewLine        return new PassthroughElement(dom);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinebuilder.Register<Func<IHtml, IElement>>(ElementFactory.Create);Di2015NewLine
18367576Di2015UniqueSeparatorpublic void DisplayEditors(DataGridView grid, DataGridViewRow row)Di2015NewLine        {Di2015NewLine            foreach (DataGridViewCell cell in row.Cells)Di2015NewLine            {Di2015NewLine                if (cell.ReadOnly == false)Di2015NewLine                {Di2015NewLine                    var place = grid.GetCellDisplayRectangle(cell.ColumnIndex, cell.RowIndex, true);Di2015NewLine                    var name = string.Format("EDITOR-{0}-{1}", cell.ColumnIndex, cell.RowIndex);Di2015NewLine                    var editor = grid.Controls.Find(name, false).FirstOrDefault();Di2015NewLineDi2015NewLine                    if (editor == null)Di2015NewLine                    {Di2015NewLine                        editor = new TextBox();Di2015NewLineDi2015NewLine                        (editor as TextBox).Name = name;Di2015NewLineDi2015NewLine                        grid.Controls.Add(editor);Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        editor.Show();Di2015NewLine                    }Di2015NewLineDi2015NewLine                    editor.Size = place.Size;Di2015NewLine                    editor.Location = place.Location;Di2015NewLine                    editor.Text = Convert.ToString(cell.Value);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18367760Di2015UniqueSeparatornames
18367760Di2015UniqueSeparatorvar names = businessNames.Select(item => item.Name).ToList();Di2015NewLine
18367760Di2015UniqueSeparatorList<T>
18367760Di2015UniqueSeparatorConvertAll
18367760Di2015UniqueSeparatorvar names = buisnessNames.ConvertAll(item => item.Name);Di2015NewLine
18367760Di2015UniqueSeparatorvar names = new List<string>();Di2015NewLine//some codeDi2015NewLineif (names.Any())Di2015NewLine    names.AddRange(/*your selected method*/);Di2015NewLineelseDi2015NewLine    names = //your selected method;Di2015NewLine
18367815Di2015UniqueSeparatorF5
18367815Di2015UniqueSeparator[DllImport("user32")]Di2015NewLineprivate static extern int PostMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);Di2015NewLine[DllImport("user32")]Di2015NewLineprivate static extern IntPtr FindWindow(string className, string caption);Di2015NewLine[DllImport("user32")]Di2015NewLineprivate static extern IntPtr FindWindowEx(IntPtr parent, IntPtr startChild, string className, string caption);Di2015NewLinepublic void RefreshDesktop(){      Di2015NewLine  IntPtr d = FindWindow("Progman", "Program Manager");Di2015NewLine  d = FindWindowEx(d, IntPtr.Zero, "SHELLDLL_DefView", null);Di2015NewLine  d = FindWindowEx(d, IntPtr.Zero, "SysListView32", null);      Di2015NewLine  PostMessage(d, 0x100, new IntPtr(0x74), IntPtr.Zero);//WM_KEYDOWN = 0x100  VK_F5 = 0x74Di2015NewLine  PostMessage(d, 0x101, new IntPtr(0x74), new IntPtr(1 << 31));//WM_KEYUP = 0x101Di2015NewLine}Di2015NewLine
18368005Di2015UniqueSeparator        static void Main(string[] args)Di2015NewLine    {Di2015NewLine        CreateApp();Di2015NewLineDi2015NewLine        RenameApp();Di2015NewLineDi2015NewLine        EditApp();Di2015NewLineDi2015NewLine        DeleteApp();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void EditApp()Di2015NewLine    {Di2015NewLine        using (ServerManager mgr = new ServerManager())Di2015NewLine        {Di2015NewLine            Application app = mgr.Sites["Default Web Site"].Applications["/TestAppNew"];Di2015NewLine            VirtualDirectory vdir = app.VirtualDirectories["/"];Di2015NewLine            vdir.UserName = "SomeUser";Di2015NewLine            vdir.Password = "SomePassword";Di2015NewLine            mgr.CommitChanges();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void DeleteApp()Di2015NewLine    {Di2015NewLine        using (ServerManager mgr = new ServerManager())Di2015NewLine        {Di2015NewLineDi2015NewLine            Application app = mgr.Sites["Default Web Site"].Applications["/TestAppNew"];Di2015NewLine            mgr.Sites["Default Web Site"].Applications.Remove(app);Di2015NewLine            mgr.CommitChanges();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void RenameApp()Di2015NewLine    {Di2015NewLine        using (ServerManager mgr = new ServerManager())Di2015NewLine        {Di2015NewLineDi2015NewLine            Application app = mgr.Sites["Default Web Site"].Applications["/TestApp"];Di2015NewLine            app.Path = "/TestAppNew";Di2015NewLineDi2015NewLine            mgr.CommitChanges();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void CreateApp()Di2015NewLine    {Di2015NewLine        using (ServerManager mgr = new ServerManager())Di2015NewLine        {Di2015NewLineDi2015NewLine            mgr.Sites["Default Web Site"].Applications.Add("/TestApp", @"c:\\inetpub\\wwwroot");Di2015NewLineDi2015NewLine            mgr.CommitChanges();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18368043Di2015UniqueSeparatordataType: "json"
18368043Di2015UniqueSeparator$.ajax
18368191Di2015UniqueSeparator[XmlRoot("return")]Di2015NewLinepublic class ResultWrapperDi2015NewLine{Di2015NewLine    [XmlElement("LuckNumber")] Di2015NewLine    public List<GenerateNumberResult> numberList;Di2015NewLine}Di2015NewLine
18368191Di2015UniqueSeparatorResultWrapper result = ProccessResult<ResultWrapper>(xml);Di2015NewLine
18368223Di2015UniqueSeparator<form action="/Enrollment/Create" data-courselistaction="..." id="YearCourseFormId" method="post">Di2015NewLineDi2015NewLine</form>Di2015NewLine
18368223Di2015UniqueSeparator$('#YearCourseFormId').data('courselistaction');Di2015NewLine$('#YearCourseFormId').attr('data-courselistaction');Di2015NewLine$('#YearCourseFormId').attr('data-courseListAction');Di2015NewLine
18368223Di2015UniqueSeparatordata()
18368223Di2015UniqueSeparatorattr()
18368253Di2015UniqueSeparatorint percentage = (x * 100) / Rows;Di2015NewLineif (percentage % 5 == 0)Di2015NewLine{Di2015NewLine    Console.WriteLine("{0}%", percentage);Di2015NewLine}Di2015NewLine
18368253Di2015UniqueSeparator// Before the loopDi2015NewLineint lastPrintedPercentage = -5; // So that we always print on the first loopDi2015NewLineDi2015NewLine// Within the loopDi2015NewLineint percentage = (x * 100) / Rows;Di2015NewLineif (percentage >= lastPrintedPercentage + 5)Di2015NewLine{Di2015NewLine    Console.WriteLine("{0}%", percentage);Di2015NewLine    lastPrintedPercentage = percentage;Di2015NewLine}Di2015NewLine
18368331Di2015UniqueSeparator  bool track = sk.Joints[JointType.Head].TrackingState == JointTrackingState.TrackedDi2015NewLine            && sk.Joints[JointType.WristLeft].TrackingState == JointTrackingState.TrackedDi2015NewLine            && sk.Joints[JointType.WristRight].TrackingState == JointTrackingState.TrackedDi2015NewLine            && sk.Joints[JointType.HipLeft].TrackingState == JointTrackingState.TrackedDi2015NewLine            && sk.Joints[JointType.HipRight].TrackingState == JointTrackingState.Tracked;Di2015NewLineDi2015NewLine  if (track) {Di2015NewLine    var head   = sk.Joints[JointType.Head].Position;Di2015NewLine    var kludge = sk.Joints[JointType.FootLeft].Position;Di2015NewLine    var diff = Math.Abs(head.Y - kludge.Y) * 100;Di2015NewLine    track = diff > 80;Di2015NewLine  }Di2015NewLine
18368361Di2015UniqueSeparator,
18368361Di2015UniqueSeparator "A","B","C"Di2015NewLine
18368361Di2015UniqueSeparator"A"
18368361Di2015UniqueSeparator"B"
18368361Di2015UniqueSeparator"C"
18368361Di2015UniqueSeparator"
18368361Di2015UniqueSeparator"
18368361Di2015UniqueSeparator if (data.left(1) == "\\"" && data.right(1) == "\\"") {Di2015NewLine      data = data.trimleft(1).trimright(1)Di2015NewLine }Di2015NewLine
18368361Di2015UniqueSeparator"\\""
18368467Di2015UniqueSeparatorpublic class Type1Di2015NewLine{Di2015NewLine    public string IPAddress { get; set; }            Di2015NewLine    public string ConnectionId { get; set; }Di2015NewLine}Di2015NewLine
18368467Di2015UniqueSeparatorpublic ActionResult Debug2(string arg1)Di2015NewLine{Di2015NewLine    var model = new List<Type1>();Di2015NewLine    model.Add(new Type1 { IPAddress = "192.168.1.1", ConnectionId = "123" });Di2015NewLine    model.Add(new Type1 { IPAddress = "192.168.1.2", ConnectionId = "345" });Di2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
18368467Di2015UniqueSeparator@model IList<Type1>Di2015NewLine@{Di2015NewLine    Layout = null;Di2015NewLine}   Di2015NewLine<!DOCTYPE html>Di2015NewLine<html>Di2015NewLine<head>Di2015NewLine    <script type="text/javascript" src="~/Scripts/jquery-1.8.2.js"></script>Di2015NewLine    <script type="text/javascript" src="~/Scripts/jquery.signalR-1.1.3.js"></script>Di2015NewLine    <script type="text/javascript" src="~/signalr/hubs"></script>Di2015NewLine    @{Di2015NewLine        var grid = new WebGrid(Model);Di2015NewLine    }Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <div>Di2015NewLine        @grid.GetHtml()Di2015NewLine    </div>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
18368523Di2015UniqueSeparatorMedia mediaAlias = null;Di2015NewLineMediaCategory categoryAlias = null;Di2015NewLineDi2015NewLinereturn session.QueryOver<Product>()Di2015NewLine    .JoinAlias(x => x.Medias, () => mediaAlias)Di2015NewLine    .JoinAlias(() => mediaAlias.Categories, () => categoryAlias)Di2015NewLine    .Fetch(x => x.Sellers).EagerDi2015NewLine    .Where(() => categoryAlias.Id == mediaCategoryId)Di2015NewLine    .List();Di2015NewLine
18368523Di2015UniqueSeparatorJoinAlias
18368523Di2015UniqueSeparatorFetch(...).Eager
18368523Di2015UniqueSeparatorJoinAlias
18368523Di2015UniqueSeparatorFuture()
18368523Di2015UniqueSeparatormediaCategoryId
18368636Di2015UniqueSeparatorbin/debug
18368636Di2015UniqueSeparatorbin/debug
18368636Di2015UniqueSeparatorProcessStartInfo
18368636Di2015UniqueSeparatorvar linkerPath = Path.Combine(Di2015NewLine        Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86),Di2015NewLine      "\\\\Microsoft Visual Studio 11.0\\\\VC\\\\bin\\\\link.exe");Di2015NewLineDi2015NewLineProcessStartInfo startInfo = new ProcessStartInfo {Di2015NewLine    FileName = linkerPath,Di2015NewLine    WorkingDirectory = Path.GetDirectoryName(linkerPath)};Di2015NewLineDi2015NewLineProcess p = new Process{Di2015NewLine    StartInfo = startInfo};Di2015NewLine
18368843Di2015UniqueSeparatorvar task1 = proxy.PrintCustomerHistoryAsync(customerListOne, @"c:\\DestinationOne\\");Di2015NewLinevar task2 = proxy.PrintCustomerHistoryAsync(customerListTwo, @"c:\\DestinationTwo\\");Di2015NewLineDi2015NewLine// The two tasks are running, if you need to wait until they're done:Di2015NewLineawait Task.WhenAll(task1, task2);Di2015NewLine
18368969Di2015UniqueSeparatorpublic Param<T> : ParamDi2015NewLine{Di2015NewLine    public T Value { get; set; }Di2015NewLine}Di2015NewLine
18368969Di2015UniqueSeparatornew Param<string>() { Label = "Param 1", Type = Param.ParamType.Text, Value = "text" },Di2015NewLinenew Param<string>() { Label = "Param 1", Type = Param.ParamType.Text, Value = "text" },Di2015NewLinenew Param<bool>() { Label = "Param 1", Type = Param.ParamType.CheckBox, Value = true }Di2015NewLine
18368969Di2015UniqueSeparatorParam
18368969Di2015UniqueSeparatorpublic class Param Di2015NewLine{Di2015NewLine    ...Di2015NewLine    public static Param<T> From<T>(string label, ParamType type, T value)Di2015NewLine    {Di2015NewLine        return new Param<T>() Di2015NewLine        {Di2015NewLine            Label = label, Di2015NewLine            Type = type, Di2015NewLine            Value = value Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18368969Di2015UniqueSeparatorParam.From("Param 1", Param.ParamType.Text, "text"),Di2015NewLineParam.From("Param 1", Param.ParamType.Text, "text"),Di2015NewLineParam.From("Param 1", Param.ParamType.CheckBox, true)Di2015NewLine
18368974Di2015UniqueSeparatorasync
18368974Di2015UniqueSeparatorBuildActual
18368974Di2015UniqueSeparatorBuildActualAsync
18368974Di2015UniqueSeparatorDoStuff
18368974Di2015UniqueSeparatorMakeTimeSeries
18368974Di2015UniqueSeparatorTask.Run
18368974Di2015UniqueSeparatorTaskFactory.StartNew
18368974Di2015UniqueSeparatorBuildActual
18368974Di2015UniqueSeparatorDoMoreStuff
18368974Di2015UniqueSeparatorDoMoreStuff
18368974Di2015UniqueSeparatorDebug.WriteLine
18368974Di2015UniqueSeparatorStopwatch
18368974Di2015UniqueSeparatorasync void
18368974Di2015UniqueSeparatorasync
18369102Di2015UniqueSeparatortable.CreateIfNotExists
18369129Di2015UniqueSeparatorTryParse
18369129Di2015UniqueSeparatorprivate void btnResult_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    int a, b;Di2015NewLine    if (int.TryParse(first, out a) && int.TryParse(second, out b))Di2015NewLine    {Di2015NewLine        int c = a + b;Di2015NewLine        txtResult.Text = c.ToString();Di2015NewLine    } Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        MessageBox.Show("Invalid Input!");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18369129Di2015UniqueSeparatorpublic partial class frmAdd : Form Di2015NewLine{ Di2015NewLine    int first;   // changed to intDi2015NewLine    int second;Di2015NewLineDi2015NewLine    private void btnFirst_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!int.TryParse(txtNumber.Text, out this.first))Di2015NewLine        {Di2015NewLine            MessageBox.Show("Invalid Input!");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnSecond_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (!int.TryParse(txtNumber.Text, out this.second))Di2015NewLine        {Di2015NewLine            MessageBox.Show("Invalid Input!");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnResult_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        int c = first + second;Di2015NewLine        txtResult.Text = c.ToString();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18369317Di2015UniqueSeparatorXElement mapping = XElement.Parse(ds.GetXml().ToString());Di2015NewLinevar query = from d in mapping.Descendants("Details")Di2015NewLine            select new {Di2015NewLine                Name = (string)d.Element("Name"),Di2015NewLine                Number = (int)d.Element("Number")Di2015NewLine            };Di2015NewLine
18369317Di2015UniqueSeparatorvar headers = from d in mapping.Element("Header")Di2015NewLine                               .Element("Row").Elements("Details")Di2015NewLine              select new Header {Di2015NewLine                  Name = (string)d.Element("Name"),Di2015NewLine                  Number = (int)d.Element("Number")Di2015NewLine              };Di2015NewLine
18369317Di2015UniqueSeparator"Footer"
18369317Di2015UniqueSeparatorvar headers = from d in mapping.XPathSelectElements("Header/Row/Details")Di2015NewLine              select new Header {Di2015NewLine                  Name = (string)d.Element("Name"),Di2015NewLine                  Number = (int)d.Element("Number")Di2015NewLine              };Di2015NewLine
18369384Di2015UniqueSeparatorConcurrentDictionary
18369727Di2015UniqueSeparator<type = FirstDataProvider, alias = "FirstProvider">
18369727Di2015UniqueSeparator<configuration>Di2015NewLine  <configSections>Di2015NewLine    <section name="DataProviders" type="WebApplication2010.DataProviders" Di2015NewLine        requirePermission="false"/>Di2015NewLine  </configSections>Di2015NewLine  <DataProviders>Di2015NewLine    <Provider type="FirstDataProvider" alias="FirstProvider"/>Di2015NewLine    <Provider type="SecondDataProvider" alias="SecondProvider"/>Di2015NewLine  </DataProviders>Di2015NewLine  ....Di2015NewLine</configuration>Di2015NewLine
18369727Di2015UniqueSeparatorpublic class DataProviders : IConfigurationSectionHandlerDi2015NewLine{Di2015NewLine    private static bool _initialized;Di2015NewLine    public static List<Provider> _providers;Di2015NewLineDi2015NewLine    public object Create(object parent, object configContext, XmlNode section)Di2015NewLine    {Di2015NewLine        XmlNodeList providers = section.SelectNodes("Provider");Di2015NewLineDi2015NewLine        _providers = new List<Provider>();Di2015NewLineDi2015NewLine        foreach (XmlNode provider in providers)Di2015NewLine        {Di2015NewLine            _providers.Add(new ProviderDi2015NewLine            {Di2015NewLine                Type = provider.Attributes["type"].Value,Di2015NewLine                Alias = provider.Attributes["alias"].Value,Di2015NewLine            });Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Init()Di2015NewLine    {Di2015NewLine        if (!_initialized)Di2015NewLine        {Di2015NewLine            ConfigurationManager.GetSection("DataProviders");Di2015NewLine            _initialized = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IEnumerable<Provider> GetData(string dataProviderAlias)Di2015NewLine    {Di2015NewLine        return _providers.Where(p => p.Alias == dataProviderAlias);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProviderDi2015NewLine{Di2015NewLine    public string Type { get; set; }Di2015NewLine    public string Alias { get; set; }Di2015NewLine}Di2015NewLine
18369727Di2015UniqueSeparatorpublic class Global : System.Web.HttpApplicationDi2015NewLine{Di2015NewLine    void Application_BeginRequest(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DataProviders.Init();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18369727Di2015UniqueSeparatorvar providers = DataProviders.GetData("FirstProvider").ToList();Di2015NewLine
18369815Di2015UniqueSeparatory = (char)Console.Read();
18369815Di2015UniqueSeparatory = Console.ReadLine().Trim()[0];Di2015NewLine
18369932Di2015UniqueSeparator/target:winexe
18370185Di2015UniqueSeparatorpublic static SelectList GetNonRacingHorses(int id, int raceId)Di2015NewLine{Di2015NewLine    HorseTracker entities = new HorseTracker();Di2015NewLineDi2015NewLine    var race = entities.Races.Single(r => r.Id == raceId);Di2015NewLine    var racehorses = from h in race.RacingHorsesDi2015NewLine                     select h.Id;Di2015NewLineDi2015NewLine    var userhorses = (from h in entities.HorsesDi2015NewLine                      whereDi2015NewLine                          h.UserId == idDi2015NewLine                      orderby h.NameDi2015NewLine                      select h);Di2015NewLineDi2015NewLine    var nonracinghorses = from h in userhorsesDi2015NewLine                          where !racehorses.Contains(h.Id)Di2015NewLine                        select h;Di2015NewLineDi2015NewLine    List<SelectListItem> sli = new List<SelectListItem>();Di2015NewLineDi2015NewLine    foreach (Horse horse in nonracinghorses)Di2015NewLine    {Di2015NewLine        sli.Add(new SelectListItem { Text = horse.Name, Value = horse.Id.ToString(), Selected = false});Di2015NewLine    }Di2015NewLineDi2015NewLine    return new SelectList(sli, "Value", "Text");Di2015NewLine}Di2015NewLine
18370195Di2015UniqueSeparatorlock {}
18370195Di2015UniqueSeparatorSyncRoot
18370253Di2015UniqueSeparatorg.key.num
18370253Di2015UniqueSeparatorm.num
18370253Di2015UniqueSeparatorvar query =Di2015NewLine(from m in lstDi2015NewLinegroup m by new { m.id, m.num } into gDi2015NewLinewhere g.Count() < g.key.num).ToList();Di2015NewLine
18370293Di2015UniqueSeparatorreader.Name
18370293Di2015UniqueSeparatorif (reader.IsStartElement())Di2015NewLine{Di2015NewLine     if (reader.Name == "settings")Di2015NewLine     {Di2015NewLine          //do stuffDi2015NewLine
18370368Di2015UniqueSeparatorMicrosoft.Bcl.Async
18370790Di2015UniqueSeparatorGraphics
18370807Di2015UniqueSeparatorawait
18370807Di2015UniqueSeparatorreturn;
18370807Di2015UniqueSeparatorTask<T>
18370807Di2015UniqueSeparatorawait
18370807Di2015UniqueSeparatornew Thread()
18370956Di2015UniqueSeparatorprivate void getObjectiveCompletedHandler(object sender, getObjectiveCompletedEventArgs e)Di2015NewLine    {Di2015NewLine      List<string> namesList = new List<string>();Di2015NewLineDi2015NewLine      foreach (string name in e.Result)Di2015NewLine       {Di2015NewLine        namesList.Add(name);Di2015NewLine       }Di2015NewLine    }Di2015NewLine
18370962Di2015UniqueSeparatorvar myFloors = Di2015NewLine(from f in db.FloorDi2015NewLinewhere f.BuildingId == txBuildingIdDi2015NewLineselect f.FloorId);Di2015NewLine
18370962Di2015UniqueSeparatorvar myFloors = db.Floor.Where(f => f.BuildingId == txBuildingId)Di2015NewLine                       .Select(f => f.FloorId);Di2015NewLine
18370962Di2015UniqueSeparatorvar model = db.Room.Where(r => myFloors.Contains(r.FloorId))Di2015NewLine                   .Select(r => new {Di2015NewLine                        label = r.Name,Di2015NewLine                        value = r.RoomId    Di2015NewLine                    });Di2015NewLine
18371137Di2015UniqueSeparatorMembershipUser
18371278Di2015UniqueSeparatorSystem.Xml.XPath
18371278Di2015UniqueSeparatorusing System.Xml.XPath;Di2015NewLine
18371278Di2015UniqueSeparatorx_el = new XElement("project",Di2015NewLine    new XElement("child",Di2015NewLine        new XElement("grand-child", "Hello World!")Di2015NewLine));Di2015NewLine// XPathSelectElement method return XElement not string , use var or XElement Di2015NewLineXElement element = x_el.XPathSelectElement("child/grand-child");Di2015NewLinestring get_string = element.ToString()Di2015NewLine
18371278Di2015UniqueSeparatorvar get_string = x_el.XPathSelectElement("child/grand-child").ToString();Di2015NewLine
18371362Di2015UniqueSeparatorButton[] buttonArray;Di2015NewLinebuttonArray = {Button1, Button2};Di2015NewLine
18371362Di2015UniqueSeparatorarray initialization
18371362Di2015UniqueSeparatorbuttonArray
18371362Di2015UniqueSeparatorvoid MyMethod()Di2015NewLine{Di2015NewLine    string[] s;Di2015NewLine    { Di2015NewLine        int i = 0; Di2015NewLine    }Di2015NewLine}Di2015NewLine
18371362Di2015UniqueSeparatorvoid MyMethod()Di2015NewLine{Di2015NewLine    string[] s;Di2015NewLine    s = Di2015NewLine    {Di2015NewLine        int i = 0; Di2015NewLine    }; //Totally INVALID!Di2015NewLine}Di2015NewLine
18371362Di2015UniqueSeparatornew
18371362Di2015UniqueSeparatorButton[] buttonArray = { Button1, Button2 }; //ValidDi2015NewLineDi2015NewLineButton[] buttonArray;Di2015NewLinebuttonArray = new Button[] { Button1, Button2 }; //Also valid!Di2015NewLine
18371416Di2015UniqueSeparatorList<T>
18371416Di2015UniqueSeparatorArrayList
18371694Di2015UniqueSeparatorpublic static class NameDoesNotMatter {Di2015NewLine   public static string smartSingleQuote(this string s) {Di2015NewLine      string result = s.Replace("'","''");Di2015NewLine      return result;Di2015NewLine   } Di2015NewLine}Di2015NewLine
18371694Di2015UniqueSeparatorstring s = "the cat's mat sat";Di2015NewLinestring sql = s.smartsingleQuote();Di2015NewLine
18371740Di2015UniqueSeparatorProcess.start("http:\\\\\\\\someurl.com");Di2015NewLine
18371773Di2015UniqueSeparatorDocumentComplete
18371773Di2015UniqueSeparatorwindow.onload
18371773Di2015UniqueSeparatorwindow.onload
18371815Di2015UniqueSeparator[DataContract]Di2015NewLinepublic enum TransferState : intDi2015NewLine{Di2015NewLine    [EnumMember]Di2015NewLine    OPEN = 0,Di2015NewLine    PENDING = 1,Di2015NewLine    CLOSE = 2Di2015NewLine}Di2015NewLine
18371815Di2015UniqueSeparator[DataContract]Di2015NewLinepublic enum TransferState : intDi2015NewLine{Di2015NewLine    [EnumMember]Di2015NewLine    OPEN = 0,Di2015NewLine    [EnumMember]Di2015NewLine    PENDING = 1,Di2015NewLine    [EnumMember]Di2015NewLine    CLOSE = 2Di2015NewLine}Di2015NewLine
18371821Di2015UniqueSeparatorbool result = false;Di2015NewLine    using (WebClient client = new WebClient())Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            Stream stream = client.OpenRead(url);Di2015NewLine            if (stream != null)Di2015NewLine            {Di2015NewLine                result = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                result = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine            //Any exception will returns false.Di2015NewLine            result = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine
18372104Di2015UniqueSeparatorMath.Sign()
18372104Di2015UniqueSeparatorint myNum = -4;Di2015NewLineint sign = Math.Sign(myNum);Di2015NewLinemyNum += 8 / 2 % 4; //some operationDi2015NewLinemyNum = Math.Abs(myNum) * sign;Di2015NewLine
18372104Di2015UniqueSeparatorMath.Sign()
18372104Di2015UniqueSeparatorint origNum = -4;Di2015NewLineint newNum = origNum + (8 / 2 % 4); //some operationDi2015NewLineDi2015NewLineint signMask = (origNum ^ newNum) >> 31; // flip the sign of newNum if origNumDi2015NewLinenewNum = (newNum ^ signMask) - signMask; // and newNum have different signs.Di2015NewLine
18372104Di2015UniqueSeparatordouble myNum = -4.0;Di2015NewLinelong sign = GetSign(myNum);Di2015NewLinemyNum += 8.0 / 2.0 % 4.0; //some operationDi2015NewLinemyNum = SetSign(myNum, sign);Di2015NewLineDi2015NewLinestatic long GetSign(double x)Di2015NewLine{Di2015NewLine    return BitConverter.DoubleToInt64Bits(x) & signMask;Di2015NewLine}Di2015NewLineDi2015NewLinestatic double SetSign(double x, long sign)Di2015NewLine{Di2015NewLine    return BitConverter.Int64BitsToDouble(BitConverter.DoubleToInt64Bits(x) & ~signMask | sign);Di2015NewLine}Di2015NewLineDi2015NewLineconst long signMask = unchecked((long)(1UL << 63));Di2015NewLine
18372135Di2015UniqueSeparatorinventory.ItemID = 1;
18372135Di2015UniqueSeparatorInventory.ItemID = 1;
18372135Di2015UniqueSeparatorplayer.GetComponent<Inventory>();
18372135Di2015UniqueSeparatorInventory
18372135Di2015UniqueSeparatorinventory
18372202Di2015UniqueSeparator   object[] _items = _row.ItemArray;Di2015NewLine
18372352Di2015UniqueSeparatorrow_no
18372352Di2015UniqueSeparatorfor (int r=0; r< grid_detail.RowCount; r++)Di2015NewLine{Di2015NewLine    // your code...Di2015NewLine    //int r = 0; comment this line Di2015NewLine    // your code...Di2015NewLine    //.............Di2015NewLine            for (i = 0; i < col_no; i++) Di2015NewLine            {Di2015NewLine                //fill in the Array with values from cellsDi2015NewLine                col_value[i] = Convert.ToString(grid_detail.Rows[r].Cells[i].Value); // use row r Di2015NewLine            }Di2015NewLine    //.............Di2015NewLine    // your code...Di2015NewLineDi2015NewLine}Di2015NewLine
18372352Di2015UniqueSeparatorforeach (GridViewRow row in GridView1.Rows)Di2015NewLine{Di2015NewLine    string sql = GenerateSql(row);Di2015NewLine    if (!string.IsNullOrEmpty(sql))Di2015NewLine        ExecuteNonQuery(sql);Di2015NewLine}Di2015NewLineprivate void ExecuteNonQuery(string query)Di2015NewLine{Di2015NewLine    using (SqlConnection conn = new SqlConnection(connectionString))Di2015NewLine    using (SqlCommand cmd_server = new SqlCommand(query, conn))Di2015NewLine    {Di2015NewLine        conn.Open();Di2015NewLine        cmd_server.ExecuteNonQuery();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate string GenerateSql(GridViewRow row)Di2015NewLine{Di2015NewLine    var values = row.Cells.Cast<TableCell>().Select(x => x.Text).ToArray();Di2015NewLine    if (values.Any(string.IsNullOrEmpty))Di2015NewLine    {Di2015NewLine        return string.Empty;Di2015NewLine    }Di2015NewLine    var sql = string.Format("INSERT INTO  [Ref].[{0}] VALUES ({1})", _lstview_item, string.Join(",", values));Di2015NewLineDi2015NewLine    return sql;    Di2015NewLineDi2015NewLine}Di2015NewLine
18372409Di2015UniqueSeparatorLua.LoadString
18372436Di2015UniqueSeparatorICommand
18372436Di2015UniqueSeparator<Button Content="Previous" Command="{Binding PreviousCommand}"/>Di2015NewLine<Button Content="Next" Command="{Binding NextCommand}"/>Di2015NewLine
18372436Di2015UniqueSeparatorICommand
18372436Di2015UniqueSeparatorRelayCommand
18372436Di2015UniqueSeparatorDelegateCommand
18372436Di2015UniqueSeparatorICommand
18372436Di2015UniqueSeparatorCanExecute
18372436Di2015UniqueSeparatorfalse
18372436Di2015UniqueSeparatorbutton_Click
18372436Di2015UniqueSeparatorIsNextEnabled
18372436Di2015UniqueSeparatorIsPreviousEnabled
18372436Di2015UniqueSeparatorCanExecute
18372468Di2015UniqueSeparatorif (line.Equals(Environment.NewLine) || line == "\\n")Di2015NewLine
18372468Di2015UniqueSeparatorif ((line.length > 0 && line[0] == '\\n') || (line.length > 1 && line[0] == '\\r' && line[1] == '\\n'))Di2015NewLine
18372506Di2015UniqueSeparatorpublic static bool IsRegistered<T>(this IUnityContainer container);Di2015NewLine
18372506Di2015UniqueSeparatorif (container.IsRegistered<IBus>())Di2015NewLine    IBus = container.Resolve<IBus>();Di2015NewLine
18372506Di2015UniqueSeparatorpublic static class UnityExtensionsDi2015NewLine{Di2015NewLine    public static T TryResolve<T>(this IUnityContainer container)Di2015NewLine    {Di2015NewLine        if (container.IsRegistered<T>())Di2015NewLine            return container.Resolve<T>();Di2015NewLineDi2015NewLine        return default(T);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// TryResolve returns the default type (null in this case) if the type is not configuredDi2015NewLineIBus = container.TryResolve<IBus>();Di2015NewLine
18372604Di2015UniqueSeparatorstring url = string.Format(Di2015NewLine    "https://graph.facebook.com/{0}?fields=access_token&access_token={1}",Di2015NewLine    pageID, user_access_token);Di2015NewLine
18372935Di2015UniqueSeparatorprivate ReportObject GetReportObject(string reportObjectName) Di2015NewLine{Di2015NewLine     ReportObject reportObject;Di2015NewLineDi2015NewLine     reportObject = Di2015NewLine            Report.ReportDefinition.ReportObjects[reportObjectName];Di2015NewLine         return reportObject;Di2015NewLine}Di2015NewLineDi2015NewLine GetReportObject("CrystalReports.rpt");Di2015NewLine
18373037Di2015UniqueSeparatororderedItems = items.OrderBy(x => x.Date);Di2015NewLineDi2015NewLinevar result = items.First();Di2015NewLineresult.Comment = items.Last().Comment;Di2015NewLine
18373169Di2015UniqueSeparatorDataSet ds = new DataSet("ITEMS");Di2015NewLine
18373343Di2015UniqueSeparator  string fileText = File.ReadAllText("filePath");Di2015NewLine  if (fileText.Contains("apple"))Di2015NewLine  {Di2015NewLine       Messagebox.Show("This word is exist");Di2015NewLine  }Di2015NewLine  elseDi2015NewLine  {Di2015NewLine       Messagebox.Show("The word does not exist!");Di2015NewLine       File.AppendAllText(@"filePAth", "The word does not exixt in the text file" + Environment.NewLine);Di2015NewLine  }Di2015NewLine
18373351Di2015UniqueSeparatorT1
18373351Di2015UniqueSeparatorT2
18373351Di2015UniqueSeparatorType name: Foo`1[T2]Di2015NewLineIs generic type definition: FalseDi2015NewLineGeneric ags: T2Di2015NewLineTypes in generic:T2Di2015NewLineDi2015NewLineDi2015NewLineType name: Foo`1[T1]Di2015NewLineIs generic type definition: TrueDi2015NewLineGeneric ags: T1Di2015NewLineTypes in generic:Di2015NewLine
18373351Di2015UniqueSeparatortypeof(Bar<>).BaseType
18373351Di2015UniqueSeparatorBar<>
18373351Di2015UniqueSeparatorBar<>
18373351Di2015UniqueSeparatorFoo<>
18373351Di2015UniqueSeparatortypeof(Bar<>).BaseType
18373351Di2015UniqueSeparatortypeof(Foo<>)
18373351Di2015UniqueSeparatorType.IsConstructedGenericType
18373351Di2015UniqueSeparatorclass X1 : Foo<string> {}Di2015NewLineclass X2<T> : Foo<string> {}Di2015NewLineclass X3<TKey, TValue> : Foo<TKey> {}Di2015NewLineclass X4<TKey, TValue> : Foo<TValue> {}Di2015NewLine
18373351Di2015UniqueSeparatortypeof(Foo<>)
18373351Di2015UniqueSeparatorFoo<string>
18373351Di2015UniqueSeparatorFoo<>
18373356Di2015UniqueSeparatordynamic object = JObject.Parse(yorjsonstring);Di2015NewLineDi2015NewLineobject.Operations[0].OperationObjectID;Di2015NewLineobject.Operations[0].Method;Di2015NewLineobject.Operations[0].OperationResult;Di2015NewLine
18373356Di2015UniqueSeparatorpublic class OperationParameterDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class OperationCallerDi2015NewLine{Di2015NewLine    public string UserPrincipalName { get; set; }Di2015NewLine    public string ClientIPAddress { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class OperationRequestDi2015NewLine{Di2015NewLine    public string Method { get; set; }Di2015NewLine    public string Url { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class OperationDi2015NewLine{Di2015NewLine    public string OperationId { get; set; }Di2015NewLine    public string OperationObjectId { get; set; }Di2015NewLine    public string OperationName { get; set; }Di2015NewLine    public List<OperationParameter> OperationParameters { get; set; }Di2015NewLine    public OperationCaller OperationCaller { get; set; }Di2015NewLine    public string OperationResult { get; set; }Di2015NewLine    public int OperationStatus { get; set; }Di2015NewLine    public OperationRequest OperationRequest { get; set; }Di2015NewLine    public string OperationStartedTime { get; set; }Di2015NewLine    public string OperationCompletedTime { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RootObjectDi2015NewLine{Di2015NewLine    public List<Operation> Operations { get; set; }Di2015NewLine    public object ContinuationToken { get; set; }Di2015NewLine}Di2015NewLine
18373356Di2015UniqueSeparatorRootObject obj = JsonConvert.DeserializeObject<RootObject>(jsonstring);Di2015NewLineobj.Operations[0].OperationObjectID;Di2015NewLine
18373391Di2015UniqueSeparatorSelectMany
18373391Di2015UniqueSeparatorIEnumerable
18373391Di2015UniqueSeparatorSelect
18373391Di2015UniqueSeparatorSFC.OrderFormModifiedMonitoringRecordsDi2015NewLine   .OrderBy(t => t.DateModify)Di2015NewLine   .ThenBy(t => t.TimeModify)Di2015NewLine   .Select(t => new { RowID = t.rowID, OFnum = t.OFNo })Di2015NewLine   .Distinct();Di2015NewLine
18373391Di2015UniqueSeparator(from t in SFC.OrderFormModifiedMonitoringRecordsDi2015NewLine orderby t.DateModify, t.TimeModifyDi2015NewLine select new { RowID = t.rowID, OFnum = t.OFNo })Di2015NewLine.Distinct();Di2015NewLine
18373391Di2015UniqueSeparatorDateModify
18373391Di2015UniqueSeparatorTimeModify
18373391Di2015UniqueSeparatorrowID
18373391Di2015UniqueSeparatorOFNo
18373451Di2015UniqueSeparator<asp:Content ID="Content1" ContentPlaceHolderID="head" runat="Server">Di2015NewLineDi2015NewLine<script type="text/javascript" language="javascript">Di2015NewLineDi2015NewLinefunction divexpandcollapse(divname) {Di2015NewLine    var div = document.getElementById(divname);Di2015NewLine    var img = document.getElementById('img' + divname);Di2015NewLine    if (div.style.display == "none") {Di2015NewLine        div.style.display = "block";Di2015NewLine        img.src = "../kjl_images/closed.gif";Di2015NewLine    } else {Di2015NewLine        div.style.display = "none";Di2015NewLine        img.src = "../kjl_images/open.gif";Di2015NewLine    }Di2015NewLine}Di2015NewLine</script>Di2015NewLine
18373452Di2015UniqueSeparator<asp:FileUpload ID="fileupload1" runat="server" /> <br /> <br /> <asp:Button ID="button1" Text="Upload" runat="server" Width="73px" onclick="button1_Click" /> Di2015NewLine            <asp:Label ID="Label1" runat="server" Font-Bold="True" ForeColor="#000099"></asp:Label>Di2015NewLine
18373452Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLinepublic partial class FileUpload : System.Web.UI.PageDi2015NewLine{Di2015NewLine    protected void  Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if(fileupload1.HasFile)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                if(fileupload1.PostedFile.ContentType == "image/jpeg")Di2015NewLine                {Di2015NewLine                    if(fileupload1.PostedFile.ContentLength < 512000)Di2015NewLine                    {Di2015NewLine                        stringDi2015NewLine                        filename = Path.GetFileName(fileupload1.FileName);Di2015NewLine                        fileupload1.SaveAs(Server.MapPath("~/") +   filename);Di2015NewLine                        Label1.Text ="File uploaded successfully!";Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLineDi2015NewLine                        Label1.Text =  "File maximum size is 500 Kb";Di2015NewLine                }Di2015NewLine                elseDi2015NewLineDi2015NewLine                    Label1.Text =  "Only JPEG files are accepted!";Di2015NewLine            }Di2015NewLine            catch (Exception exc)Di2015NewLine            {Di2015NewLine                Label1.Text = "The file could not be uploaded. The following error occured: " + exc.Message;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18373524Di2015UniqueSeparatorusing(SqlCommand cmd=new SqlCommand("INSERT INTO Mem_Basic(Mem_Na,Mem_Occ) output INSERTED.ID VALUES(@na,@occ)",con))Di2015NewLine        {Di2015NewLine            cmd.Parameters.AddWithValue("@na", Mem_NA);Di2015NewLine            cmd.Parameters.AddWithValue("@occ", Mem_Occ);Di2015NewLine             con.Open();Di2015NewLine            int modified = cmd.ExecuteScalar();Di2015NewLine            if (con.State == System.Data.ConnectionState.Open) Di2015NewLine                con.Close();Di2015NewLine            return modified;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
18373524Di2015UniqueSeparator using(SqlCommand cmd=new SqlCommand("INSERT INTO Mem_Basic(Mem_Na,Mem_Occ)  VALUES(@na,@occ);SELECT SCOPE_IDENTITY();",con))Di2015NewLine        {Di2015NewLine            cmd.Parameters.AddWithValue("@na", Mem_NA);Di2015NewLine            cmd.Parameters.AddWithValue("@occ", Mem_Occ);Di2015NewLine             con.Open();Di2015NewLine            int modified = cmd.ExecuteScalar();Di2015NewLine            if (con.State == System.Data.ConnectionState.Open) con.Close();Di2015NewLine            return modified;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
18373605Di2015UniqueSeparatorMicrosoft.Build
18373605Di2015UniqueSeparatorMicrosoft.Build.Evaluation
18373605Di2015UniqueSeparatorvar project = new Project(@"..\\..\\StackOverflow.csproj");Di2015NewLineDi2015NewLine        var itemsToCopy = new List<ProjectItem>();Di2015NewLineDi2015NewLine        var projectItems = project.Items;Di2015NewLine        foreach (var projectItem in projectItems)Di2015NewLine        {Di2015NewLine            // e.g get all elements with CopyToOutputDirectory == "Always"Di2015NewLine            var projectMetadata = projectItem.GetMetadata("CopyToOutputDirectory");Di2015NewLine            if (projectMetadata != null && projectMetadata.EvaluatedValue == "Always")Di2015NewLine                itemsToCopy.Add(projectItem);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var projectItem in itemsToCopy)Di2015NewLine        {Di2015NewLine            // e.g get then Include-Attribute from <None Include="Configs\\Config.config">Di2015NewLine            var evaluatedInclude = projectItem.EvaluatedInclude;Di2015NewLine        }Di2015NewLineDi2015NewLine        // get the resources that are not set to CopyToOutputDirectory == "Always"Di2015NewLine        var collection = project.GetItems("Resources");Di2015NewLine        var resources = collection.Except(itemsToCopy);Di2015NewLine        foreach (var projectItem in resources)Di2015NewLine        {Di2015NewLine            // e.g get then Include-Attribute from <Resource Include="Resources\\Icons\\icon8.png" />Di2015NewLine            var evaluatedInclude = projectItem.EvaluatedInclude;Di2015NewLine        }Di2015NewLine
18373690Di2015UniqueSeparator<trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">Di2015NewLine  <security>Di2015NewLine    <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">Di2015NewLine      <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />Di2015NewLine    </requestedPrivileges>Di2015NewLine  </security>Di2015NewLine</trustInfo>Di2015NewLine
18373735Di2015UniqueSeparatorFlight
18373735Di2015UniqueSeparatorRoute
18373735Di2015UniqueSeparatorpublic class Route {Di2015NewLine    public int Number { get; private set; }Di2015NewLineDi2015NewLine    public string Port { get; private set; }Di2015NewLineDi2015NewLine    public string Destination { get; private set; }Di2015NewLineDi2015NewLine    public Route(int number, string port, string destination) {Di2015NewLine        Number = number;Di2015NewLine        Port = port;Di2015NewLine        Destination = destination;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Flight {Di2015NewLine    public DateTime DepartureTime { get; private set; }Di2015NewLineDi2015NewLine    public int Capacity { get; private set; }Di2015NewLineDi2015NewLine    public Route Route { get; private set; }Di2015NewLineDi2015NewLine    public Flight(DateTime departureTime, int capacity, Route route) {Di2015NewLine        DepartureTime = departureTime;Di2015NewLine        Capacity = capacity;Di2015NewLine        Route = route;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18373754Di2015UniqueSeparatorConvert.ToInt32 Method (String, Int32)
18373754Di2015UniqueSeparatoruint i = Convert.ToUInt32("010101", 2); //21Di2015NewLine
18373768Di2015UniqueSeparatorfrom spl in SpeciesLists Di2015NewLine             join ar in Areas on spl.Station.Area equals ar.Id Di2015NewLine             join ground  in Grounds on ar.Ground equals ground.Id Di2015NewLine             join re in Regions on ground.Region  equals re.Id Di2015NewLine             where spl.Station.Trip.year ==2013Di2015NewLine             && spl.Station.Trip.ProtectedArea == 1Di2015NewLine             group spl by new { slp.Description, ar.description, ground.Code } into ResultDi2015NewLine             select new Di2015NewLine               {Di2015NewLine                  SpciesCommonName = Result.Key.Description,Di2015NewLine                  Are = Result.Key.description,Di2015NewLine                  Ground = Result.Key.Code,Di2015NewLine                  NumberOfTripsInProtectedAreas = Result.Count()Di2015NewLine               }Di2015NewLine
18373803Di2015UniqueSeparatorStreamReader(System.String filepath, System.Text.Encoding.UTF8)Di2015NewLine
18374042Di2015UniqueSeparatorUserControl.RefreshData(value);Di2015NewLine
18374042Di2015UniqueSeparator Public static RefreshData(<datatype>data)Di2015NewLine {Di2015NewLine   //Assign the value to the property Di2015NewLine   //Get the data from database Di2015NewLine   //Bind the data Di2015NewLine }Di2015NewLine
18374144Di2015UniqueSeparatorSystem.Linq
18374144Di2015UniqueSeparatorSystem.Xml.Linq
18374144Di2015UniqueSeparator// Load XmlDi2015NewLinestring xml = "";Di2015NewLineXDocument doc = XDocument.Parse(xml);Di2015NewLineDi2015NewLine// Get and modify elementDi2015NewLineif (doc.Root != null)Di2015NewLine{Di2015NewLine    var elementToModify = doc.Root.Elements("Customer").SingleOrDefault(x => x.Attribute("Id").Value == "2");Di2015NewLine    if (elementToModify != null) elementToModify.SetAttributeValue("Name", "aaabbbccc");Di2015NewLine}Di2015NewLineDi2015NewLine// Add new ElementDi2015NewLineXElement customer = doc.Descendants("Customers").FirstOrDefault();Di2015NewLineif (customer != null) customer.Add(new XElement("Customer", new XAttribute("Id", 3), new XAttribute("Name", "test")));Di2015NewLineDi2015NewLine// OR (maddy's answer)Di2015NewLinedoc.Element("Customers").Add(new XElement("Customer", new XAttribute("Id", 3), new XAttribute("Name", "test")));Di2015NewLineDi2015NewLine// OR (Richard's answer)Di2015NewLinedoc.Root.LastNode.AddAfterSelf(new XElement("Customer", new XAttribute("Id", 3), new XAttribute("Name", "test")));Di2015NewLine
18374144Di2015UniqueSeparator// Get the Name attribute for a specified Id.Di2015NewLineXElement element = doc.Root.Elements("Customer").Single(x => x.Attribute("Id").Value == "1");Di2015NewLinestring name = element.Attribute("Name").Value; // will be "abc"Di2015NewLine
18374267Di2015UniqueSeparatorhttp://<address>:<port>/odata
18374267Di2015UniqueSeparatorhttp://<address>:<port>/odata/$metadata
18374365Di2015UniqueSeparatorGetCharIndexFromPosition
18374365Di2015UniqueSeparatorRichTextBox
18374365Di2015UniqueSeparatorChar index
18374365Di2015UniqueSeparatorMouse Pointer
18374365Di2015UniqueSeparatorTooltip popup
18374365Di2015UniqueSeparator    string punctuations = " ,.;!?'\\")]}\\n";Di2015NewLine    //This saves your words with their corresponding definitions/detailsDi2015NewLine    Dictionary<string, string> dict = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);Di2015NewLine    ToolTip tt = new ToolTip();Di2015NewLine    int k;Di2015NewLine    int lineBreakIndex = 60;Di2015NewLine    int textHeight;Di2015NewLine    //MouseMove event handler for your richTextBox1Di2015NewLine    private void richTextBox1_MouseMove(object sender, MouseEventArgs e){Di2015NewLine        if (richTextBox1.TextLength == 0) return;Di2015NewLine        Point lastCharPoint = richTextBox1.GetPositionFromCharIndex(richTextBox1.TextLength - 1);Di2015NewLine        if (e.Y > textHeight ||  (e.Y  >= lastCharPoint.Y && e.X > lastCharPoint.X + textHeight - lastCharPoint.Y))            Di2015NewLine        {Di2015NewLine            tt.Hide(richTextBox1);Di2015NewLine            k = -1;Di2015NewLine            return;Di2015NewLine        } Di2015NewLine        int i = richTextBox1.GetCharIndexFromPosition(e.Location);            Di2015NewLine        int m = i, n = i;Di2015NewLine        while (m>-1&&!punctuations.Contains(richTextBox1.Text[m])) m--;            Di2015NewLine        m++;Di2015NewLine        while (n<richTextBox1.TextLength&&!punctuations.Contains(richTextBox1.Text[n])) n++;Di2015NewLine        if (n > m){Di2015NewLine            string word = richTextBox1.Text.Substring(m, n - m);Di2015NewLine            if (dict.ContainsKey(word)){Di2015NewLine                if (k != m){Di2015NewLine                    tt.ToolTipTitle = word;Di2015NewLine                    tt.Show(dict[word], richTextBox1, e.X, e.Y + 10);Di2015NewLine                    k = m;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            else{Di2015NewLine                tt.Hide(richTextBox1);Di2015NewLine                k = -1;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    //This will get the entry text with lines broken.Di2015NewLine    private string GetEntryText(string key){Di2015NewLine        string s = dict[key];Di2015NewLine        int lastLineEnd = lineBreakIndex;Di2015NewLine        for (int i = lastLineEnd; i < s.Length; i += lineBreakIndex)Di2015NewLine        {Di2015NewLine            while (s[i] != ' '){Di2015NewLine                if (--i < 0) break;                    Di2015NewLine            }Di2015NewLine            i++;Di2015NewLine            s = s.Insert(i, "\\n");Di2015NewLine            lastLineEnd = i+1;Di2015NewLine        }Di2015NewLine        return s;Di2015NewLine    }Di2015NewLine    //MouseLeave event handler for your richTextBox1Di2015NewLine    private void richTextBox1_MouseLeave(object sender, EventArgs e){Di2015NewLine        tt.Hide(richTextBox1);Di2015NewLine        k = -1;Di2015NewLine    }Di2015NewLine    //ContentsResized event handler for your richTextBox1Di2015NewLine    private void richTextBox1_ContentsResized(object sender, ContentsResizedEventArgs e)Di2015NewLine    {Di2015NewLine        textHeight = e.NewRectangle.Height;Di2015NewLine    }Di2015NewLine    //Here are some sample words with definitions:Di2015NewLine    dict.Add("world", "- World is a common name for the whole of human civilization, specifically human experience, history, or the human condition in general, worldwide, i.e. anywhere on Earth.");Di2015NewLine    dict.Add("geek", "- A person who is single-minded or accomplished in scientific or technical pursuits but is felt to be socially inept");Di2015NewLine
18374387Di2015UniqueSeparatorasync
18374387Di2015UniqueSeparatorawait
18374387Di2015UniqueSeparatorasync
18374387Di2015UniqueSeparatorasync
18374387Di2015UniqueSeparatorusing System.Threading.Tasks;
18374387Di2015UniqueSeparatorTask.Delay
18374387Di2015UniqueSeparatorSystem.Threading.Thread.Sleep
18374387Di2015UniqueSeparatorawait
18374387Di2015UniqueSeparatorTask.Delay
18374387Di2015UniqueSeparatorTask.Delay
18374387Di2015UniqueSeparatorasync
18374387Di2015UniqueSeparator    private async void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine      textBox1.Text += "\\r\\nThread Sleeps!";Di2015NewLine      await Task.Delay(3000);Di2015NewLine      textBox1.Text += "\\r\\nThread awakens!";Di2015NewLine    }Di2015NewLine
18374410Di2015UniqueSeparatorFileStream
18374410Di2015UniqueSeparatorDirectory.CreateDirectory
18374410Di2015UniqueSeparatorstring fullName = Path.Combine(pathName, fileName);Di2015NewLinewriter = PdfWriter.GetInstance(document, new FileStream(fullName, FileMode.Create));Di2015NewLine
18374419Di2015UniqueSeparator   using System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace SmartDeviceProject3Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Required designer variable.Di2015NewLine        /// </summary>Di2015NewLine        private System.ComponentModel.IContainer components = null;Di2015NewLine        private System.Windows.Forms.MainMenu mainMenu1;Di2015NewLine        private TreeViewEx treeView1;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            this.mainMenu1 = new System.Windows.Forms.MainMenu();Di2015NewLine            this.treeView1 = new TreeViewEx();Di2015NewLineDi2015NewLine            this.SuspendLayout();Di2015NewLine            this.treeView1.Dock = System.Windows.Forms.DockStyle.Fill;Di2015NewLine            this.treeView1.Location = new System.Drawing.Point(0, 0);Di2015NewLine            this.treeView1.Name = "treeView1";Di2015NewLine            this.treeView1.Size = new System.Drawing.Size(240, 268);Di2015NewLine            this.treeView1.TabIndex = 0;Di2015NewLine            this.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);Di2015NewLine            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;Di2015NewLine            this.AutoScroll = true;Di2015NewLine            this.ClientSize = new System.Drawing.Size(240, 268);Di2015NewLine            this.Controls.Add(this.treeView1);Di2015NewLine            this.Menu = this.mainMenu1;Di2015NewLine            this.Name = "Form1";Di2015NewLine            this.Text = "Form1";Di2015NewLine            this.ResumeLayout(false);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnLoad(EventArgs e)Di2015NewLine        {Di2015NewLine            base.OnLoad(e);Di2015NewLineDi2015NewLine            treeView1.Nodes.Add(new TreeViewNodeEx()Di2015NewLine            {Di2015NewLine                Text = "Enabled"Di2015NewLine            });Di2015NewLine            treeView1.Nodes.Add(new TreeViewNodeEx()Di2015NewLine            {Di2015NewLine                Text = "Disabled",Di2015NewLine                Enabled = false,Di2015NewLine            });Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Clean up any resources being used.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>Di2015NewLine        protected override void Dispose(bool disposing)Di2015NewLine        {Di2015NewLine            if (disposing && (components != null))Di2015NewLine            {Di2015NewLine                components.Dispose();Di2015NewLine            }Di2015NewLine            base.Dispose(disposing);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public class TreeViewEx Di2015NewLine        : TreeViewDi2015NewLine    {Di2015NewLine        protected override void OnAfterSelect(TreeViewEventArgs e)Di2015NewLine        {Di2015NewLine            var node = e.Node as TreeViewNodeEx;Di2015NewLine            if (node != null && !node.Enabled)Di2015NewLine            {Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            base.OnAfterSelect(e);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TreeViewNodeEx Di2015NewLine        : TreeNodeDi2015NewLine    {Di2015NewLine        private bool _enabled = true;Di2015NewLine        public bool EnabledDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return _enabled;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                if (_enabled != value)Di2015NewLine                {Di2015NewLine                    _enabled = value;Di2015NewLine                    if (_enabled)Di2015NewLine                    {Di2015NewLine                        this.ForeColor = Color.Black;Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        this.ForeColor = Color.Gray;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18374502Di2015UniqueSeparatorGeneraContraseÃ±a
18374525Di2015UniqueSeparator private void DrawTree(HtmlGenericControl ParentULTag, int count)Di2015NewLine    {Di2015NewLineDi2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            HtmlGenericControl ChildLi = new HtmlGenericControl("li");Di2015NewLine            HtmlGenericControl ChildUl = new HtmlGenericControl("ul");Di2015NewLine            ChildLi.InnerText = i.ToString();Di2015NewLine            ChildLi.Controls.Add(ChildUl);Di2015NewLine            DrawTree(ChildUl, i);Di2015NewLine            ParentULTag.Controls.Add(ChildLi);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18374525Di2015UniqueSeparatorChildLi.InnerText = i.ToString();
18374552Di2015UniqueSeparator  Uri branches = new Uri(@"https://127.0.0.1:8443/svn/CXB1/Validation/branches/");Di2015NewLine  Uri testBranch = new Uri(branches, "test");Di2015NewLine
18374582Di2015UniqueSeparatorTabControl.ControlRemoved
18374582Di2015UniqueSeparatorControlEventArgs
18374582Di2015UniqueSeparatore.Control
18374719Di2015UniqueSeparatorlong
18374719Di2015UniqueSeparatorint
18374719Di2015UniqueSeparator.net
18374719Di2015UniqueSeparatorIntPtr
18374719Di2015UniqueSeparator[UnmanagedFunctionPointer(CallingConvention.StdCall)] Di2015NewLineprivate delegate int delConnect(int a, int b, int c, int d, int e, int f, int g, int h);Di2015NewLine
18374719Di2015UniqueSeparatorStdCall
18374719Di2015UniqueSeparatorCdecl
18374719Di2015UniqueSeparator[UnmanagedFunctionPointer(CallingConvention.Cdecl)] Di2015NewLine
18374719Di2015UniqueSeparatorDllImport
18374719Di2015UniqueSeparator[DllImport("kernel32.dll", CharSet=CharSet.Auto)]Di2015NewLine
18374720Di2015UniqueSeparatorSystem.Web.Fakes.ShimHttpClientCertificate.ConstructorHttpContext = (o, httpCont) => { };Di2015NewLine
18374720Di2015UniqueSeparatorbyte[] clientCertBytes = {0x30, 0x82, 0x03, ...., 0xd3};Di2015NewLineSystem.Web.Fakes.ShimHttpClientCertificate.AllInstances.CertificateGet = (o) =>Di2015NewLine  {Di2015NewLine    return clientCertBytes;Di2015NewLine  };Di2015NewLine
18374860Di2015UniqueSeparator<asp:HiddenField>
18374860Di2015UniqueSeparator<asp:HiddenField runat="server" ID="myHiddenField"/>Di2015NewLineDi2015NewLine$('#<%= myHiddenField.ClientID %>').val(myNewValue);Di2015NewLine
18374943Di2015UniqueSeparatorDataContext
18374943Di2015UniqueSeparatorpublic MyPage()Di2015NewLine{Di2015NewLine   DataContext = new colors();Di2015NewLine}Di2015NewLine
18374943Di2015UniqueSeparatorxmlns:vm="clr-namespace:MyNamespace"Di2015NewLine
18374943Di2015UniqueSeparator<phone:PhoneApplicationPage.Resources>Di2015NewLine    <vm:colors x:Key="vmColors"  />Di2015NewLine</phone:PhoneApplicationPage.Resources>Di2015NewLine
18374943Di2015UniqueSeparatorvmColors
18374943Di2015UniqueSeparator<Grid DataContext="{StaticResource vmColors}">Di2015NewLine   <Rectangle Fill="{Binding Gray}" />Di2015NewLine</Grid>Di2015NewLine
18374943Di2015UniqueSeparator<phone:PhoneApplicationPageDi2015NewLine    x:Class="MyClass.MyPage"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"Di2015NewLine    xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLine    xmlns:vm="clr-namespace:MyNamespace" // << IMPORT NAMESPACEDi2015NewLine    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"Di2015NewLine    FontFamily="{StaticResource PhoneFontFamilyNormal}"Di2015NewLine    FontSize="{StaticResource PhoneFontSizeNormal}"Di2015NewLine    Foreground="{StaticResource PhoneForegroundBrush}"Di2015NewLine    SupportedOrientations="Portrait" Orientation="Portrait"Di2015NewLine    mc:Ignorable="d">Di2015NewLineDi2015NewLineDi2015NewLine    //ALLOW THE CLASS TO BE ACCESSED VIA STATICRESOURCEDi2015NewLine    <phone:PhoneApplicationPage.Resources>Di2015NewLine        <vm:colors x:Key="vmColors"/> Di2015NewLine    </phone:PhoneApplicationPage.Resources>Di2015NewLineDi2015NewLineDi2015NewLine    <Grid x:Name="LayoutRoot" Background="Transparent">      Di2015NewLineDi2015NewLine        //SET THE DATACONTEXT OF THE GRID TO THE COLORS CLASSDi2015NewLine        <Grid DataContext="{StaticResource vmColors}">Di2015NewLine            <Rectangle Fill="{Binding Gray}" />Di2015NewLine        </Grid>Di2015NewLine    </Grid>Di2015NewLineDi2015NewLine</phone:PhoneApplicationPage>Di2015NewLine
18375020Di2015UniqueSeparatorpublic static class DateTimeExtensionsDi2015NewLine{Di2015NewLine    public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek)Di2015NewLine    {Di2015NewLine        int diff = dt.DayOfWeek - startOfWeek;Di2015NewLine        if (diff < 0)Di2015NewLine        {Di2015NewLine            diff += 7;Di2015NewLine        }Di2015NewLineDi2015NewLine        return dt.AddDays(-1 * diff).Date;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18375020Di2015UniqueSeparatorDateTime monday = mcCalendar.SelectionEnd.StartOfWeek(DayOfWeek.Monday);Di2015NewLineList<int> days = new List<int>();Di2015NewLinefor (int i = 0; i < 7; i++)Di2015NewLine{Di2015NewLine    days.Add(monday.AddDays(i).Day);Di2015NewLine}Di2015NewLine
18375023Di2015UniqueSeparatorInternetExplorers()
18375023Di2015UniqueSeparatornew IECollection(true);
18375023Di2015UniqueSeparatorIECollection
18375023Di2015UniqueSeparatorWatiN.Core.Native.InternetExplorer.ShellWindows2()
18375023Di2015UniqueSeparatorvar allBrowsers = new WatiN.Core.Native.InternetExplorer.ShellWindows2().Where(x => x.Visible == false);Di2015NewLineDi2015NewLineforeach (SHDocVw.IWebBrowser2 internetExplorer in allBrowsers)Di2015NewLine{Di2015NewLine    //do somthing.Di2015NewLine}Di2015NewLine
18375172Di2015UniqueSeparatorpublic IQueryable<Event> GetBySearch(EventFilter search)Di2015NewLine{Di2015NewLine    IQueryable<Event> query = this.Context.Events.AsQueryable();Di2015NewLineDi2015NewLine    if (search.CategoryId != 0)Di2015NewLine    {Di2015NewLine        query = query.Where(x => x.CategoryId == search.CategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    if (search.SubCategoryId != 0)Di2015NewLine    {Di2015NewLine        query = query.Where(x => x.SubCategoryId == search.SubCategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    return query;Di2015NewLine}Di2015NewLine
18375172Di2015UniqueSeparatorpublic List<Event> GetBySearch(EventFilter search)Di2015NewLine{Di2015NewLine    IQueryable<Event> query = this.Context.Events.AsQueryable();Di2015NewLineDi2015NewLine    if (search.CategoryId != 0)Di2015NewLine    {Di2015NewLine        query = query.Where(x => x.CategoryId == search.CategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    if (search.SubCategoryId != 0)Di2015NewLine    {Di2015NewLine        query = query.Where(x => x.SubCategoryId == search.SubCategoryId);Di2015NewLine    }Di2015NewLineDi2015NewLine    return query.ToList();Di2015NewLine}Di2015NewLine
18375199Di2015UniqueSeparatorbillNumber
18375199Di2015UniqueSeparatorstatic
18375199Di2015UniqueSeparatorlastBillNumber
18375199Di2015UniqueSeparatorstatic
18375199Di2015UniqueSeparatorbillNumber
18375199Di2015UniqueSeparatorlastBillNumber
18375199Di2015UniqueSeparatorlastBillNumber+1
18375199Di2015UniqueSeparatorclass BillNumberGeneratorDi2015NewLine{Di2015NewLine    protected int LastBillNumber;Di2015NewLineDi2015NewLine    public GetNewBillNumber()Di2015NewLine    {Di2015NewLine        LastBillNumber++;Di2015NewLine        return LastBillNumber;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic BillNumberGenerator MyBillNumberGenerator = new BillNumberGenerator();Di2015NewLine
18375199Di2015UniqueSeparatorSupplier
18375199Di2015UniqueSeparatorBill
18375199Di2015UniqueSeparatorBillNumberGenerator
18375220Di2015UniqueSeparatorType.GetType(System.String)
18375220Di2015UniqueSeparatorType stringType = Type.GetType("System.String");Di2015NewLine
18375220Di2015UniqueSeparatorType dependencyPropertyType = Type.GetType("System.Windows.DependencyProperty, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");Di2015NewLine
18375262Di2015UniqueSeparatorStream
18375262Di2015UniqueSeparatorwc.DownloadFile("http://images.thenews.com.pk/21-08-2013/ethenews/t-24895.htm",Di2015NewLine    @"D:\\testsharp.txt");Di2015NewLine
18375262Di2015UniqueSeparatorsr.CurrentEncoding
18375359Di2015UniqueSeparatorstring sql = "SELECT ColumnName = col.column_name FROM information_schema.table_constraints tc INNER JOIN information_schema.key_column_usage col ON col.Constraint_Name = tc.Constraint_Name AND col.Constraint_schema = tc.Constraint_schema WHERE tc.Constraint_Type = 'Primary Key' AND col.Table_name = '" + _lstview_item + "'";Di2015NewLine
18375375Di2015UniqueSeparatorpublic decimal PerformOperation (string op, decimal x)Di2015NewLine{Di2015NewLine    return (decimal)(functions[op].DynamicInvoke(x));Di2015NewLine}  Di2015NewLine
18375375Di2015UniqueSeparatorDictionary<string, Func<decimal, decimal>> func1;Di2015NewLineDictionary<string, Func<decimal, decimal, decimal>> func2;Di2015NewLineDi2015NewLinepublic void AddFunction (Func<decimal, decimal> f, string name)Di2015NewLine{Di2015NewLine    func1.Add(name, f);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void AddFunction (Func<decimal, decimal, decimal> f, string name)Di2015NewLine{Di2015NewLine    func2.Add(name, f);Di2015NewLine} Di2015NewLineDi2015NewLinepublic decimal PerformOperation (string op, decimal x)Di2015NewLine{Di2015NewLine    return func1[op](x);Di2015NewLine}Di2015NewLineDi2015NewLinepublic decimal PerformOperation (string op, decimal x, decimal y)Di2015NewLine{Di2015NewLine    return func2[op](x, y);Di2015NewLine}Di2015NewLine
18375438Di2015UniqueSeparator<img src="thumbnail.jpg" width="251" height="201">Di2015NewLine
18375495Di2015UniqueSeparatorTabIndex
18375495Di2015UniqueSeparatorTabStop
18375495Di2015UniqueSeparatorTextBox1.TabIndex = 2;Di2015NewLineTextBox2.TabStop = false;Di2015NewLineTextBox3.TabIndex = 99;Di2015NewLine
18375495Di2015UniqueSeparatorTextBox1
18375495Di2015UniqueSeparatorTextBox3
18375495Di2015UniqueSeparatorTextBox1
18375495Di2015UniqueSeparatorTextBox2
18375601Di2015UniqueSeparatorResource
18375601Di2015UniqueSeparator<ImageBrush ImageSource="Resources/grid_bg.png"/>Di2015NewLine
18375601Di2015UniqueSeparatorResources
18375601Di2015UniqueSeparatorSystem.Drawing.Bitmap
18375730Di2015UniqueSeparatorDailyStatisticsDi2015NewLine.JoinDi2015NewLine(Di2015NewLine    DailyStatistics,Di2015NewLine    x=>new{x.EntryDate, x.SiteID},Di2015NewLine    x=>new{x.EntryDate, x.SiteID},Di2015NewLine    (o,i)=>new Di2015NewLine    {Di2015NewLine        VisitorEntry=i.Metric,Di2015NewLine        VisitEntry=o.Metric,Di2015NewLine        VisitorDate = i.EntryDate ,Di2015NewLine        VisitDate = o.EntryDate ,Di2015NewLine        i.SiteID,Di2015NewLine        VisitorValue = i.Value,Di2015NewLine        VisitValue = o.ValueDi2015NewLine    }Di2015NewLine)Di2015NewLine.GroupByDi2015NewLine(Di2015NewLine    x=>Di2015NewLine    newDi2015NewLine    {Di2015NewLine        x.SiteID,Di2015NewLine        x.VisitDateDi2015NewLine    }Di2015NewLine)Di2015NewLine.WhereDi2015NewLine(Di2015NewLine    x=>Di2015NewLine    x.VisitorEntry == "MyVisitors" &&Di2015NewLine    x.VisitEntry== "MyVisits" &&Di2015NewLine    x.VisitDate >= DateTime.Parse("2013-08-15")  &&Di2015NewLine    x.VisitDate <= DateTime.Parse("2013-08-21")Di2015NewLine)Di2015NewLine.SelectDi2015NewLine(Di2015NewLine    x=>Di2015NewLine    newDi2015NewLine    {Di2015NewLine        x.Key.SiteID, Di2015NewLine        x.Key.VisitDate, Di2015NewLine        SumVisits = s.Sum(t => t.VisitValue ), Di2015NewLine        SumVisitors = s.Sum(x => x.VisitorValue ) Di2015NewLine    }Di2015NewLine)Di2015NewLine.OrderByDi2015NewLine(Di2015NewLine    x=>x.VisitDateDi2015NewLine)Di2015NewLine
18375926Di2015UniqueSeparatorWM_PAINT
18376022Di2015UniqueSeparatorlist = list.OrderBy(x => x.Name != "Orange").ToList();Di2015NewLine
18376022Di2015UniqueSeparatorfalse
18376022Di2015UniqueSeparatortrue
18376022Di2015UniqueSeparatorList.OrderBy(x => x != "Orange")Di2015NewLine
18376022Di2015UniqueSeparatorOrange // falseDi2015NewLineBanana // trueDi2015NewLineApple  // trueDi2015NewLineOlive  // trueDi2015NewLine
18376164Di2015UniqueSeparatorref
18376164Di2015UniqueSeparatorout
18376164Di2015UniqueSeparatorobject
18376164Di2015UniqueSeparatordynamic
18376164Di2015UniqueSeparatorEnum
18376164Di2015UniqueSeparatorValueType
18376164Di2015UniqueSeparatorValueType
18376164Di2015UniqueSeparatorISomeInterface
18376180Di2015UniqueSeparatorprivate static DispatcherTimer myClickWaitTimer = Di2015NewLine    new DispatcherTimer(Di2015NewLine        new TimeSpan(0, 0, 0, 1), Di2015NewLine        DispatcherPriority.Background, Di2015NewLine        mouseWaitTimer_Tick, Di2015NewLine        Dispatcher.CurrentDispatcher);Di2015NewLineDi2015NewLineprivate void Button_MouseDoubleClick(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    // Stop the timer from ticking.Di2015NewLine    myClickWaitTimer.Stop();Di2015NewLineDi2015NewLine    Trace.WriteLine("Double Click");Di2015NewLine    e.Handled = true;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Button_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    myClickWaitTimer.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void mouseWaitTimer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    myClickWaitTimer.Stop();Di2015NewLineDi2015NewLine    // Handle Single Click ActionsDi2015NewLine    Trace.WriteLine("Single Click");Di2015NewLine}Di2015NewLine
18376251Di2015UniqueSeparatorpublic static class UtilsDi2015NewLine{Di2015NewLine     public static string fn()Di2015NewLine     {Di2015NewLine         //code...Di2015NewLine     }Di2015NewLine}Di2015NewLine
18376251Di2015UniqueSeparatorA.cs
18376251Di2015UniqueSeparatorB.cs
18376251Di2015UniqueSeparatorA foo = new A();Di2015NewLinefoo.Property = Utils.fn();Di2015NewLine
18376251Di2015UniqueSeparatorBaseClass
18376251Di2015UniqueSeparatorpublic class BaseClassDi2015NewLine{Di2015NewLine    public BaseClass() { }Di2015NewLine    public virtual string fn()Di2015NewLine    {Di2015NewLine        return "hello world";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class A : BaseClassDi2015NewLine{Di2015NewLine    public A() { }Di2015NewLine}Di2015NewLine
18376251Di2015UniqueSeparatorfn()
18376251Di2015UniqueSeparatorA foo = new A();Di2015NewLinestring x = foo.fn();Di2015NewLine
18376288Di2015UniqueSeparatorpublic interface IMyWcfService {Di2015NewLine    void DoSomething();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClass {Di2015NewLine    private readonly IMyWcfService myService;Di2015NewLineDi2015NewLine    public MyClass(IMyWcfService myService) {Di2015NewLine        this.myService = myService;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoIt() {Di2015NewLine        myService.DoSomething();Di2015NewLine    }Di2015NewLine}    Di2015NewLine
18376288Di2015UniqueSeparatorpublic interface IService : IDisposable {Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DefaultService : IService {Di2015NewLine    public void Dispose() {Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IServiceProvider {Di2015NewLine    IService GetService();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DefaultServiceProvider : IServiceProvider {Di2015NewLine    public IService GetService() {Di2015NewLine        return new DefaultService();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Consumer {Di2015NewLineDi2015NewLine    private readonly IServiceProvider serviceProvider;Di2015NewLineDi2015NewLine    public Consumer() : this (new DefaultServiceProvider()){Di2015NewLine    }Di2015NewLineDi2015NewLine    internal Consumer(IServiceProvider serviceProvider) {Di2015NewLine        this.serviceProvider = serviceProvider;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public void DoIt() {Di2015NewLine        using (var service = serviceProvider.GetService()) {Di2015NewLine          // do stuff                               Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18376457Di2015UniqueSeparatorvar parts = "1-Mar-13 92230".Split(' ');Di2015NewLineDi2015NewLineif (parts[1].Length == 5)Di2015NewLine{Di2015NewLine    parts[1] = "0" + parts[1];Di2015NewLine}Di2015NewLineDi2015NewLinevar newDate = parts[0] + " " + parts[1];Di2015NewLineDi2015NewLinevar date = DateTime.ParseExact(newDate, "d-MMM-yy HHmmss",  System.Globalization.CultureInfo.CurrentCulture);Di2015NewLine
18376498Di2015UniqueSeparatoridMso="exiting tabids"
18376498Di2015UniqueSeparatorid="customtab1"
18376498Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?>Di2015NewLine<customUI xmlns="http://schemas.microsoft.com/office/2009/07/customui" onLoad="Ribbon_Load">Di2015NewLine  <ribbon>Di2015NewLine    <tabs>Di2015NewLine      <tab idMso="TabAddIns" label="Ribbon1">Di2015NewLine        <group id="MyGroup"Di2015NewLine               label="My Group">Di2015NewLine        </group>Di2015NewLine      </tab>Di2015NewLine      <tab id="CustomAddin" label="Ribbon2">Di2015NewLine      <group id="CustomAddinGroup"Di2015NewLine             label="My Group">Di2015NewLine      </group>Di2015NewLine      </tab>Di2015NewLine    </tabs>Di2015NewLine  </ribbon>Di2015NewLine</customUI>Di2015NewLine
18376498Di2015UniqueSeparatorprotected override Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject()Di2015NewLine{Di2015NewLine   return new Ribbon1();Di2015NewLine}Di2015NewLine
18376579Di2015UniqueSeparatorprotected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)Di2015NewLine{Di2015NewLine    base.OnNavigatedTo(e);Di2015NewLine    if (this.NavigationContext.QueryString.ContainsKey("param1"))Di2015NewLine    {Di2015NewLine        string param = this.NavigationContext.QueryString["param1"]; //Get "Param" this QueryString. Di2015NewLineDi2015NewLine        // .. Do StuffDi2015NewLineDi2015NewLine        NavigationService.Navigate(new Uri("/MainPage.xaml", UriKind.Relative));Di2015NewLine        NavigationService.RemoveBackEntry();Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18376920Di2015UniqueSeparatorPublic Shared Iterator Function Lexicograph(characters As List(Of String), length As Integer) As IEnumerable(Of String)Di2015NewLine    For i = 0 To characters.Count - 1Di2015NewLine        If length = 1 ThenDi2015NewLine            Yield characters(i)Di2015NewLine        ElseDi2015NewLine            For Each nxt In Lexicograph(characters.GetRange(i + 1, characters.Count - (i + 1)), length - 1)Di2015NewLine                Yield characters(i) & " " & nxtDi2015NewLine            NextDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLineEnd FunctionDi2015NewLine
18376920Di2015UniqueSeparatorPublic Shared Function LexicographNonLazy(characters As List(Of String), length As Integer) As IEnumerable(Of String)Di2015NewLine    Dim result = new List(Of String)Di2015NewLine    For i = 0 To characters.Count - 1Di2015NewLine        If length = 1 ThenDi2015NewLine            result.Add(characters(i))Di2015NewLine        ElseDi2015NewLine            For Each nxt In Lexicograph(characters.GetRange(i + 1, characters.Count - (i + 1)), length - 1)Di2015NewLine                result.Add(characters(i) & " " & nxt)Di2015NewLine            NextDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLine    Return resultDi2015NewLineEnd FunctionDi2015NewLine
18377145Di2015UniqueSeparatorvar subQuer = from vms in this.currentSession.Query<Entities.VirtualMachine>()Di2015NewLine              group vms by vms.RequestId into vmReqsDi2015NewLine              select vmReqs.Max(vms => vms.SequenceId);Di2015NewLineDi2015NewLinevar outerQuery = from vm in this.currentSession.Query<Entities.VirtualMachine>()Di2015NewLine                 where subQuery.Contains(vm.SequenceId) && vm.DeletedBy == null;Di2015NewLine
18377276Di2015UniqueSeparatorpublic bool SaveData(...)Di2015NewLine{Di2015NewLine  using (var session = Deneme.Config.FluentlyConfigure.SessionFactory.OpenSession())Di2015NewLine  {Di2015NewLine    using (var tran = session.BeginTransaction())Di2015NewLine    {Di2015NewLine      Address adress = new Address();Di2015NewLine      adress.City= City;Di2015NewLine      ...Di2015NewLine      session.Save(address);Di2015NewLine      tran.commit();Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  return true;Di2015NewLine}Di2015NewLine
18377276Di2015UniqueSeparatorFluentlyConfig
18377276Di2015UniqueSeparatorSessionFactory
18377439Di2015UniqueSeparatorFormatterServices.GetUninitializedObject
18377439Di2015UniqueSeparatorvar obj = FormatterServices.GetUninitializedObject(typeof(MyClass));Di2015NewLinevar ctor = obj.GetType().GetConstructor(Di2015NewLine    BindingFlags.Instance | BindingFlags.Public| BindingFlags.NonPublic,Di2015NewLine    null,Di2015NewLine    new[] { typeof(SerializationInfo), typeof(StreamingContext) },Di2015NewLine    null);Di2015NewLinector.Invoke(obj, new object[2]);Di2015NewLine
18377439Di2015UniqueSeparatorISerializable
18377439Di2015UniqueSeparator.ctor: MyClassDi2015NewLine> serializingDi2015NewLineOnSerializingMethod: MyClassDi2015NewLineGetObjectData: MyClassDi2015NewLineOnSerializedMethod: MyClassDi2015NewLine< serializingDi2015NewLine> deserializingDi2015NewLineOnDeserializingMethod: MyClassDi2015NewLine.ctor: MyClassDi2015NewLineOnDeserializedMethod: MyClassDi2015NewLine< deserializingDi2015NewLine
18377439Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineusing System.Runtime.Serialization.Formatters.Binary;Di2015NewLine[Serializable]Di2015NewLineclass MyClass : ISerializableDi2015NewLine{Di2015NewLine    public MyClass() { Trace(); }Di2015NewLine    protected MyClass(SerializationInfo info, StreamingContext context) { Trace(); }Di2015NewLine    public void GetObjectData(SerializationInfo info, StreamingContext context) { Trace(); }Di2015NewLine    void Trace([CallerMemberName] string caller = null)Di2015NewLine    {Di2015NewLine        System.Console.WriteLine("{0}: {1}", caller, GetType().Name);Di2015NewLine    }Di2015NewLine    [OnDeserializing()]Di2015NewLine    internal void OnDeserializingMethod(StreamingContext context) { Trace(); }Di2015NewLineDi2015NewLine    [OnDeserialized()]Di2015NewLine    internal void OnDeserializedMethod(StreamingContext context) { Trace(); }Di2015NewLineDi2015NewLine    [OnSerializing()]Di2015NewLine    internal void OnSerializingMethod(StreamingContext context) { Trace(); }Di2015NewLineDi2015NewLine    [OnSerialized()]Di2015NewLine    internal void OnSerializedMethod(StreamingContext context) { Trace(); }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        using (var ms = new MemoryStream())Di2015NewLine        {Di2015NewLine            var orig = new MyClass();Di2015NewLine            var ser = new BinaryFormatter();Di2015NewLine            System.Console.WriteLine("> serializing");Di2015NewLine            ser.Serialize(ms, orig);Di2015NewLine            System.Console.WriteLine("< serializing");Di2015NewLine            ms.Position = 0;Di2015NewLine            System.Console.WriteLine("> deserializing");Di2015NewLine            ser.Deserialize(ms);Di2015NewLine            System.Console.WriteLine("< deserializing");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18377522Di2015UniqueSeparatorDoubleNAND a = new ...Di2015NewLineDoubleNAND b = new ...Di2015NewLinea = b; // this means that now both a and b refer to the same objectDi2015NewLine
18377522Di2015UniqueSeparatora = b;Di2015NewLinevar equal = object.ReferenceEquals(a, b); // equal == False !!!Di2015NewLineequal = a.Equals(b); // equal == False!!! - depending on Equal implementation Di2015NewLine
18377522Di2015UniqueSeparatorClone()
18377750Di2015UniqueSeparatorXmlRootAttribute
18377750Di2015UniqueSeparatorxmlns="http://tempuri.org/XMLGateResponse"
18377753Di2015UniqueSeparatorstatic void dirSearch(string dir)Di2015NewLine{Di2015NewLine    foreach (string item in Directory.GetDirectories(dir))Di2015NewLine    {Di2015NewLine        Console.WriteLine(item);Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            foreach (string str in Directory.GetFiles(item))Di2015NewLine            {Di2015NewLine                Console.WriteLine("\\t" + str);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex.Message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18377753Di2015UniqueSeparatordirSearch
18377753Di2015UniqueSeparatorstatic void dirSearch(string dir)Di2015NewLine{Di2015NewLine    Console.WriteLine(dir);Di2015NewLine    foreach (string item in Directory.GetDirectories(dir))Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            dirSearch(item);Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex.Message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    foreach (string str in Directory.GetFiles(dir))Di2015NewLine    {Di2015NewLine        Console.WriteLine("\\t" + str);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18377761Di2015UniqueSeparatorLazy<T>
18377761Di2015UniqueSeparatorT
18377783Di2015UniqueSeparatorName="FitToLargest"
18377783Di2015UniqueSeparator//this will be a path to your XML file or a string containing the XMLDi2015NewLine//I've used 'tbLoad.Text' as I don't know where you're getting the XML fromDi2015NewLineXDocument xml = XDocument.Load(tbLoad.Text);Di2015NewLineDi2015NewLinexml.Descendants().Elements("Hmi.Screen.Property")Di2015NewLine                 .Where(e => e.Attribute("Name").Value == "FitToLargest").Remove();Di2015NewLinexml.Save("file path here...");Di2015NewLine
18377783Di2015UniqueSeparatorHmi.Screen.Property
18377783Di2015UniqueSeparatorFitToLargest
18377783Di2015UniqueSeparatorName
18377816Di2015UniqueSeparatorpublic class LanguageDi2015NewLine{Di2015NewLine    public static Language Instance { get; private set; }Di2015NewLine    static Language() { Instance = new Language(); }Di2015NewLine    private Language() { Name = "Name"; }Di2015NewLineDi2015NewLine    public string Name {get;private set;}Di2015NewLine}Di2015NewLine
18377816Di2015UniqueSeparatorpublic class Language : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public static Language Instance { get; private set; }Di2015NewLine    static Language() { Instance = new Language(); }Di2015NewLine    private Language() { }Di2015NewLineDi2015NewLine    private string name = "Name";Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return name; }Di2015NewLine        set { SetValue(ref name, value);}Di2015NewLine    }Di2015NewLine    protected void SetValue<T>(ref T field, T value,Di2015NewLine        [CallerMemberName]string propertyName=null)Di2015NewLine    {Di2015NewLine        if (!EqualityComparer<T>.Default.Equals(field, value))Di2015NewLine        {Di2015NewLine            field = value;Di2015NewLine            OnPropertyChanged(propertyName);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    protected virtual void OnPropertyChanged(Di2015NewLine        [CallerMemberName]string propertyName=null)Di2015NewLine    {Di2015NewLine        var handler = PropertyChanged;Di2015NewLine        if (handler != null)Di2015NewLine            handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine}Di2015NewLine
18377850Di2015UniqueSeparatorAutoGenerateColumns="false"
18377850Di2015UniqueSeparator   <asp:GridView ID="custdet" AutoGenerateColumns="false" runat="server">Di2015NewLine    <Columns>Di2015NewLine    <asp:BoundField DataField="CustAccNo" HeaderText ="AccNo" />Di2015NewLine    <asp:BoundField DataField="Name" HeaderText="Customer Name" />    Di2015NewLine    </Columns>Di2015NewLine   </asp:GridView>Di2015NewLine
18377913Di2015UniqueSeparatorlist = list.GroupBy(s => s.Split(':')[0].ToLower())Di2015NewLine           .Select(g => g.Last())Di2015NewLine           .ToList();Di2015NewLine
18378018Di2015UniqueSeparatorScreenCapture
18378018Di2015UniqueSeparatorEventArgs
18378018Di2015UniqueSeparatorpublic class ScreenCapture : EventArgsDi2015NewLine
18378018Di2015UniqueSeparatorScreenCaptureEventArgs
18378018Di2015UniqueSeparatorScreenCaptureEventArgs
18378018Di2015UniqueSeparatorEventArgs
18378018Di2015UniqueSeparatorScreenCapture
18378018Di2015UniqueSeparatorpublic class ScreenCaptureEventArgs : EventArgsDi2015NewLine{Di2015NewLine    public ScreenCaptureEventArgs(ScreenCapture c)Di2015NewLine    {Di2015NewLine        Capture = c;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ScreenCapture Capture { get; private set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic event EventHandler<ScreenCaptureEventArgs> ScreenCaptured;Di2015NewLine
18378019Di2015UniqueSeparator((^|, )(\\d{5}|\\d{5}-\\d{4}))*$Di2015NewLine
18378019Di2015UniqueSeparator(^|, )
18378019Di2015UniqueSeparator,
18378019Di2015UniqueSeparator\\d
18378019Di2015UniqueSeparatorÙ Ù¡Ù¢Ù£Ù¤
18378019Di2015UniqueSeparator\\d
18378019Di2015UniqueSeparator\\d
18378019Di2015UniqueSeparator[0-9]
18378109Di2015UniqueSeparatorDbEntityValidationException
18378109Di2015UniqueSeparatorFaultException
18378109Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class ValidationFaultDi2015NewLine{Di2015NewLine}Di2015NewLine
18378109Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic interface IUserDi2015NewLine{Di2015NewLine    [OperationContract]Di2015NewLine    [FaultContract(typeof(ValidationFault))]Di2015NewLine    User AddUser(User user);Di2015NewLine}Di2015NewLine
18378109Di2015UniqueSeparatorpublic class UserService: IUserDi2015NewLine{Di2015NewLine    public User AddUser(User user)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            IUserRepository _user = new UserRepository(); //I've used EF Repository Pattern.Di2015NewLine            return _user.Add(user);Di2015NewLine        }Di2015NewLine        catch (DbEntityValidationException ex)Di2015NewLine        {Di2015NewLine            throw new FaultException<ValidationFault>(new ValidationFault(), ex.Message);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18378109Di2015UniqueSeparatorDbEntityValidationResult
18378109Di2015UniqueSeparatorEntityValidationErrors
18378109Di2015UniqueSeparatorDbEntityValidationException
18378109Di2015UniqueSeparatorPropertyName
18378109Di2015UniqueSeparatorErrorMessage
18378109Di2015UniqueSeparatorValidationFaultAspect
18378310Di2015UniqueSeparatorpublic void master_Page_PreLoad(object sender, EventArgs e)Di2015NewLine
18378353Di2015UniqueSeparatorProcessStartInfo psi = new ProcessStartInfo("Microsoft.Dynamics.Nav.Client.exe",Di2015NewLine            "DynamicsNAV://localhost:7046/DynamicsNAV70/CRONUS%20UK%20Ltd./RunPage?Page=50000&No=10");Di2015NewLineProcess.Start(psi);Di2015NewLine
18378369Di2015UniqueSeparatorprivate Point lastPos;Di2015NewLinepublic Timer_tick(s,e)Di2015NewLine{Di2015NewLine    if(mousePosition != lastPos)Di2015NewLine    {Di2015NewLine       MouseHasntMoved();Di2015NewLine       timer.Stop();Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic override MouseMove(s,e)Di2015NewLine{Di2015NewLine    timer.Reset();Di2015NewLine    lastPos = mousePosition;Di2015NewLine}Di2015NewLinepublic void MouseHasntMoved()Di2015NewLine{Di2015NewLine//Do somethingDi2015NewLine}Di2015NewLine
18378512Di2015UniqueSeparatorprivate void CreateGraph(ZedGraphControl zgc)Di2015NewLine{Di2015NewLineDi2015NewLine    textBox3.Hide();Di2015NewLine    textBox4.Hide();Di2015NewLine    label3.Hide();Di2015NewLine    label5.Hide();Di2015NewLine    button2.Hide();Di2015NewLine
18378524Di2015UniqueSeparatorItem
18378524Di2015UniqueSeparatorstruct
18378524Di2015UniqueSeparatorclass
18378524Di2015UniqueSeparatorclass
18378524Di2015UniqueSeparatorWeight
18378524Di2015UniqueSeparatorValue
18378524Di2015UniqueSeparatorstruct
18378665Di2015UniqueSeparator<Label Grid.RowSpan="2" Grid.Row="1" Grid.Column="2" Style="{StaticResource TaxTableCellStyle}" BorderThickness="0,0,1,1" HorizontalAlignment="Stretch" FlowDirection="RightToLeft">ÐÑÑÑÑ</Label>Di2015NewLine
18378991Di2015UniqueSeparatorLoadString
18378991Di2015UniqueSeparatorShell32.dll
18378991Di2015UniqueSeparatorSHChangeNotifyRegister
18378991Di2015UniqueSeparatorExplorer
18378991Di2015UniqueSeparatorSHChangeNotify
18379052Di2015UniqueSeparatorList<DataGridCell> CellList = new List<DataGridCell>();Di2015NewLine
18379052Di2015UniqueSeparatorDataGridCell currentCell = DataGridExtension.GetCurrentCell(dataGrid1);Di2015NewLineCellList.Add(currentCell);Di2015NewLine
18379052Di2015UniqueSeparatorforeach (DataGridCell cell in CellList)Di2015NewLine{Di2015NewLine    cell.Background = Brushes.LightGray;Di2015NewLine}Di2015NewLine
18379094Di2015UniqueSeparator,
18379094Di2015UniqueSeparator.
18379094Di2015UniqueSeparator(0.5).ToString()
18379094Di2015UniqueSeparator0.5
18379094Di2015UniqueSeparator0,5
18379094Di2015UniqueSeparatorReplace
18379094Di2015UniqueSeparatorvar culture = new CultureInfo("someculturegoeshere");Di2015NewLine
18379094Di2015UniqueSeparatorDecimal Cbm = Decimal.Parse(strCbm, culture); Di2015NewLine
18379231Di2015UniqueSeparatorValueChanged
18379231Di2015UniqueSeparatorprivate void firstDateTimePicker_ValueChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //add code to validate selected value (handle errors etc...)Di2015NewLine    //...        Di2015NewLineDi2015NewLine    secondDateTimePicker.MinDate = firstDateTimePicker.Value;Di2015NewLine}Di2015NewLine
18379298Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic ActionResult GetImage(int id)Di2015NewLine{Di2015NewLine    byte[] buffer;Di2015NewLine    if (HttpContext.Cache["image_" + id] == null)Di2015NewLine    {Di2015NewLine        var dbMediaItem = m_database.MediaItems.Single(i => i.Id.Equals(id));Di2015NewLine        string path = string.Format(Server.MapPath("~/{base path}/{0}"), dbMediaItem.Filename);Di2015NewLine        using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))Di2015NewLine        {Di2015NewLine            buffer = new byte[fs.Length];Di2015NewLine            fs.Read(buffer, 0, buffer.Length);Di2015NewLine            HttpContext.Cache.Add("image_" + id, Convert.ToBase64String(buffer), null, Cache.NoAbsoluteExpiration, TimeSpan.FromMinutes(20), CacheItemPriority.Normal, null);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        buffer = Convert.FromBase64String(HttpContext.Cache["image_" + id].ToString());Di2015NewLine    }Di2015NewLine    return base.File(buffer, "image/png");Di2015NewLine}Di2015NewLine
18379406Di2015UniqueSeparatorfor (int i = 0, n = size + size - 1; i < n; i++) {Di2015NewLine    int j = min(i, size - 1);Di2015NewLine    for (int col = i - j; col <= j; col++) {Di2015NewLine        int row = i - col;Di2015NewLineDi2015NewLine        /* case 1 */Di2015NewLine        F(row, col);Di2015NewLineDi2015NewLine        /* case 2 */Di2015NewLine        F(size - row - 1, size - col - 1);Di2015NewLine    }Di2015NewLine}        Di2015NewLine
18379585Di2015UniqueSeparator        //Initialize a new PDF DocumentDi2015NewLine        Document _document = new Document();   Di2015NewLineDi2015NewLine        _document.Title = "Ð?pitron Sample";Di2015NewLine        _document.Author = "StanlyF";Di2015NewLine        _document.Creator = "Ð?PItron LTD.";Di2015NewLineDi2015NewLine        Page page = null;Di2015NewLine        PDFGraphics graphics = null;Di2015NewLineDi2015NewLine        Table _table =  new Table();Di2015NewLine        _table.Columns.Add(30);Di2015NewLine        Row row = new Row(_table);Di2015NewLine        row.Height = 25;Di2015NewLine        row.Cells.Add("ABC");Di2015NewLine        _table.Rows.Add(row);Di2015NewLine        while (_table != null)Di2015NewLine        {Di2015NewLine            //Initialize new page with default PageSize A4Di2015NewLine            page = new Page(PageSize.A4);Di2015NewLineDi2015NewLine            //Add page to documentDi2015NewLine            _document.Pages.Add(page);Di2015NewLine            //Get the PDFGraphics object for drawing to the page.Di2015NewLine            graphics = page.Graphics;Di2015NewLine            _table = graphics.DrawTable(100,200, _table); Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        using(FileStream _fs = new FileStream("Table_Sample.pdf", System.IO.FileMode.Create, System.IO.FileAccess.Write))  Di2015NewLine        {Di2015NewLine            //Generate PDF to the streamDi2015NewLine            _document.Generate(_fs);Di2015NewLine            Process.Start("Table_Sample.pdf");Di2015NewLine        }Di2015NewLine
18379603Di2015UniqueSeparatorprivate static T ExecuteQuery<T>(ContextObject contextObject, string query)Di2015NewLine{Di2015NewLine    T result;Di2015NewLine    using (SqlConnection con = con = new SqlConnection(contextObject.ConnectionString))Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            con.Open();Di2015NewLine            using (SqlCommand cmd = cmd = new SqlCommand(query, con))Di2015NewLine            {Di2015NewLine                result = (T)cmd.ExecuteScalar();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine            result = null;Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            con.Close();Di2015NewLine        }Di2015NewLineDi2015NewLine    }   Di2015NewLine    returnr result;  Di2015NewLine}Di2015NewLine
18379603Di2015UniqueSeparatorTOP 1
18379603Di2015UniqueSeparatorvar resultComment = ExecuteQuery<string>("SELECT TOP 1 Comments From dbo.TransactionHistory WHERE TransactionID = '" + transactionId + "'");Di2015NewLinevar resultTransactionId = ExecuteQuery<int>("SELECT TOP 1 TransactionID  From dbo.TransactionHistory WHERE Comments = '" + comment + "'")Di2015NewLine
18379626Di2015UniqueSeparatorstring input = "   a.1.2.3 #4567   ";Di2015NewLineint poundIndex = input.IndexOf("#");Di2015NewLineif(poundIndex >= 0)Di2015NewLine{Di2015NewLine    string relevantPart = input.Substring(0, poundIndex).Trim();Di2015NewLine    IEnumerable<Char> numPart = relevantPart.SkipWhile(c => !Char.IsDigit(c));Di2015NewLine    string result = new string(numPart.ToArray());Di2015NewLine}Di2015NewLine
18379856Di2015UniqueSeparatorstring.Join
18379856Di2015UniqueSeparatorvar commaSeperated = string.Join(", ", node.ChildNodes[i].Attributes.Select(a => a.Name));Di2015NewLine
18380039Di2015UniqueSeparatorcontainer.Configure(r => rDi2015NewLine    .For(typeof(IFoo<>))Di2015NewLine    .Use(typeof(Foo<>)));Di2015NewLine
18380039Di2015UniqueSeparatorFoo<SomeType>
18380039Di2015UniqueSeparatorIFoo<SomeType>
18380197Di2015UniqueSeparatorServiceBase.RequestAdditionalTime(4000); // add 4 secondsDi2015NewLine
18380220Di2015UniqueSeparatorAcceptedItems
18380220Di2015UniqueSeparatorBuildSomething()
18380220Di2015UniqueSeparatorTestMethod()
18380220Di2015UniqueSeparatorList<T>
18380220Di2015UniqueSeparatorAcceptedItems
18380220Di2015UniqueSeparatorreadonly
18380220Di2015UniqueSeparatorAcceptedItems.Add(item)
18380220Di2015UniqueSeparatorAcceptedItems.Remove(item)
18380242Di2015UniqueSeparatorOrganizationServiceProxy
18380242Di2015UniqueSeparatorusing (var proxy = ProxyHelper.GetOrganizationServiceProxy())Di2015NewLine{Di2015NewLine    var setStateReq = new SetStateRequestDi2015NewLine    {Di2015NewLine        EntityMoniker = new EntityReference("new_entityname", Di2015NewLine        entityname.new_entitynameid),Di2015NewLine        State = new OptionSetValue(1),Di2015NewLine        Status = new OptionSetValue(2),Di2015NewLine    };Di2015NewLineDi2015NewLine    proxy.Execute(setStateReq);Di2015NewLine}Di2015NewLine
18380385Di2015UniqueSeparatorASCIIEncoding encoder = new ASCIIEncoding();Di2015NewLinebyte[] data = encoder.GetBytes(serializedObject); // the data you wanted to sendDi2015NewLineDi2015NewLineHttpWebRequest request = new WebRequest.Create("https://api.twitter.com/oauth/request_token") as HttpWebRequest;Di2015NewLinerequest.Method = "POST";Di2015NewLinerequest.ContentType = "application/x-www-form-urlencoded";Di2015NewLinerequest.ContentLength = data.Length;Di2015NewLineDi2015NewLinerequest.GetRequestCode().Write(data, 0, data.Length);Di2015NewLine
18380425Di2015UniqueSeparatorPartitioner
18380425Di2015UniqueSeparatorManualParallelSum()
18380425Di2015UniqueSeparatorPartitioner
18380425Di2015UniqueSeparatorManualParallelSum()
18380425Di2015UniqueSeparatorprivate static int PartitionSum(int[] numbers)Di2015NewLine{Di2015NewLine    int result = 0;Di2015NewLine    var rangePartitioner = Partitioner.Create(0, numbers.Length);Di2015NewLineDi2015NewLine    Parallel.ForEach(rangePartitioner, (range, loopState) =>Di2015NewLine    {Di2015NewLine        int subtotal = 0;Di2015NewLineDi2015NewLine        for (int i = range.Item1; i < range.Item2; i++)Di2015NewLine            subtotal += numbers[i];Di2015NewLineDi2015NewLine        Interlocked.Add(ref result, subtotal);Di2015NewLine    });Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
18380537Di2015UniqueSeparatortemp = (from c in tempDi2015NewLine        let maxDate = (string.IsNullOrEmpty(c.ExtendedDealine)) ? c.Deadline : c.ExtendedDealineDi2015NewLine        where (string.IsNullOrEmpty(maxDate) || Convert.ToDateTime(maxDate) <= System.Convert.ToDateTime(deadline))Di2015NewLine        select c).ToList();  Di2015NewLine
18380537Di2015UniqueSeparatorDateTime
18380735Di2015UniqueSeparatorGuid.NewGuid()
18380735Di2015UniqueSeparatorvar result = data.GroupBy(d => new { Condition = d.SomeValue > 1 Di2015NewLine                                     ? "true"Di2015NewLine                                     : Guid.NewGuid().ToString() })Di2015NewLine
18380735Di2015UniqueSeparatorCondition
18380735Di2015UniqueSeparatorvar result = data.GroupBy(d => d.SomeValue > 1 Di2015NewLine                               ? Guid.Empty Di2015NewLine                               : Guid.NewGuid() )Di2015NewLine
18381160Di2015UniqueSeparator<DataGrid ItemsSource="{Binding Source={StaticResource employeeInfo}, Path=EmployeeList}" AutoGenerateColumns="False" Height="300" Width="300" >Di2015NewLine   <DataGrid.Columns>Di2015NewLine      <DataGridTextColumn Binding="{Binding Path=EmployeeId}" Header="Employee Id" Width="300"/>Di2015NewLine      <DataGridTextColumn Binding="{Binding Path=EmployeeName}" Header="Employee Name" Width="300"/>Di2015NewLine   </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
18381160Di2015UniqueSeparatorItemsSource
18381160Di2015UniqueSeparatorEmloyeeInfo
18381160Di2015UniqueSeparatorObservableCollection<Employee>
18381160Di2015UniqueSeparatorDataGrid.Columns
18381168Di2015UniqueSeparatorBindingList<Information> resultsList = new BindingList<Information>();Di2015NewLine
18381168Di2015UniqueSeparatorBindingSource resultsBindingSource = new BindingSource();Di2015NewLineDi2015NewLinethis.resultsBindingSource.DataSource = resultsList;Di2015NewLinethis.dgvSavedResults.DataSource = this.resultsBindingSource ;Di2015NewLine
18381168Di2015UniqueSeparatorprivate void bSave_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Information info = new Information();Di2015NewLine        info.Value1 = tbTal1.Text;Di2015NewLine        info.Value2 = tbTal2.Text;Di2015NewLine        info.Result = tbResultat.Text;     Di2015NewLine        resultsList.Add(info);                   Di2015NewLine    }Di2015NewLine
18381168Di2015UniqueSeparatordgvSavedResults.AutoGenerateColumns=true;Di2015NewLine
18381233Di2015UniqueSeparatorPlease Change ,( comma) to & (and)
18381233Di2015UniqueSeparator protected void Application_Error(Object sender, System.EventArgs e)Di2015NewLine        {Di2015NewLine            System.Web.HttpContext context = HttpContext.Current;Di2015NewLine            System.Exception exception = Context.Server.GetLastError();Di2015NewLine            var stackTraceExcep = new StackTrace(exception, true); Di2015NewLine            var stackTrace = stackTraceExcep.GetFrames()         Di2015NewLine                          .Select(frame => newDi2015NewLine                          {                   // get the infoDi2015NewLine                              FileName = frame.GetFileName(),Di2015NewLine                              LineNumber = frame.GetFileLineNumber(),Di2015NewLine                              ColumnNumber = frame.GetFileColumnNumber(),Di2015NewLine                              Method = frame.GetMethod(),Di2015NewLine                              Class = frame.GetMethod().DeclaringType,Di2015NewLine                          }).FirstOrDefault();Di2015NewLineDi2015NewLineDi2015NewLine            **string FileName = !string.IsNullOrEmpty(stackTrace.FileName) ? Server.UrlEncode(stackTrace.FileName) : "";**Di2015NewLine            string LineNumber = stackTrace.LineNumber.ToString();Di2015NewLine            string ColumnNumber = stackTrace.ColumnNumber.ToString();Di2015NewLine            string MethodName = stackTrace.Method.Name;Di2015NewLine            string ClassName = stackTrace.Class.Name;Di2015NewLine            if (!string.IsNullOrEmpty(exception.Message))Di2015NewLine            {Di2015NewLine                Response.Redirect(String.Format("~/Error/{0}/?errorMessage={1}&fileName={2}&lineNumber={3}&columnNumber={4}&methodName={5}&className={6}", "App_Error", exception.Message, FileName, LineNumber, ColumnNumber, MethodName, ClassName));Di2015NewLineDi2015NewLine            }Di2015NewLine            context.Server.ClearError();Di2015NewLine        }Di2015NewLine
18381238Di2015UniqueSeparatorTopLeftHeaderCell
18381238Di2015UniqueSeparatordataGridView1.TopLeftHeaderCell.Value = "abc";Di2015NewLine
18381238Di2015UniqueSeparatorCellClick
18381238Di2015UniqueSeparatore.ColumnIndex = -1
18381238Di2015UniqueSeparatore.RowIndex = -1
18381238Di2015UniqueSeparator  private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)Di2015NewLine  {Di2015NewLine        if (e.ColumnIndex == -1 && e.RowIndex == -1)Di2015NewLine        {Di2015NewLine            //TopLeftHeaderCell clickedDi2015NewLine        }Di2015NewLine  }Di2015NewLine
18381238Di2015UniqueSeparatorRowHeaderCell
18381238Di2015UniqueSeparator dataGridView1.Rows[0].HeaderCell.Value = "1";Di2015NewLine
18381238Di2015UniqueSeparatorRow Number
18381254Di2015UniqueSeparatormirrorLookAt
18381254Di2015UniqueSeparatorMatrix.CreateLookAt
18381254Di2015UniqueSeparatorroom.DrawRoom
18381254Di2015UniqueSeparatormirrorLookAt
18381254Di2015UniqueSeparatorVector3 vectorToMirror = new Vector3(mirrorPos.X-camera.position.Y, mirrorPos.Y-camera.position.Y, mirrorPos.Z-camera.position.Z);Di2015NewLineVector3 mirrorReflectionVector = new Vector3(vectorToMirror-2*(Vector3.Dot(vectorToMirror, mirrorNormal)) * mirrorNormal);Di2015NewLine
18381254Di2015UniqueSeparatormirrorLookAt
18381254Di2015UniqueSeparatorMatrix mirrorLookAt = Matrix.CreateLookAt(mirrorPos, mirrorReflectionVector, Vector3.Up);Di2015NewLine
18381254Di2015UniqueSeparatorif (camera.isCrouched) camerafinalPosition.Y -= (camera.characterOffset.Y * 6 / 20);Di2015NewLine
18381254Di2015UniqueSeparatorIsCrouched
18381254Di2015UniqueSeparatorCrouch()
18381254Di2015UniqueSeparatorDrawRoom
18381254Di2015UniqueSeparatorcamera.position
18381281Di2015UniqueSeparatorprivate void SimpleLambda()Di2015NewLine{Di2015NewLine  Action<string> showMessage =  x => MessageBox.Show(x);Di2015NewLineDi2015NewLine  showMessage("Hello World!");Di2015NewLine}Di2015NewLine
18381492Di2015UniqueSeparatorbyte[]
18381542Di2015UniqueSeparatorthis.form.submit()
18381542Di2015UniqueSeparatorthis.formname.submit()
18381609Di2015UniqueSeparator~\\Uploads\\
18381609Di2015UniqueSeparatorServer.MapPath
18381609Di2015UniqueSeparatorDim GFolder As String = Server.MapPath("~\\Uploads\\")Di2015NewLineDim GPath As String = System.IO.Path.Combine(GFolder, GetGalleryID()))Di2015NewLine
18381659Di2015UniqueSeparatorstring strFileName = @"C:\\Users\\L\\Desktop\\NOHEL" + number + ".xml";Di2015NewLine
18381659Di2015UniqueSeparator\\
18381659Di2015UniqueSeparator@
18381675Di2015UniqueSeparatorprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    if (e.Row.RowType == DataControlRowType.DataRow))Di2015NewLine    {Di2015NewLineDi2015NewLine        DataRow row = ((DataRowView)e.Row.DataItem).Row;Di2015NewLineDi2015NewLine        DropdownList ddlxxx= (DropDownList)e.Row.FindControl("ddlName");               Di2015NewLine         //This will make your ddl readonly Di2015NewLine         ddlxxx.Enabled = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18381700Di2015UniqueSeparatorParameterExpression param = expression.Parameters.Single();Di2015NewLinevar lambda = Expression.Lambda<Func<T, bool>>(Di2015NewLine    Expression.GreaterThanOrEqual(expression.Body, Expression.Constant(date)),Di2015NewLine    param);Di2015NewLine
18381748Di2015UniqueSeparatorMainViewModel
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorBaseDataType
18381748Di2015UniqueSeparatorINotifyPropertyChanged
18381748Di2015UniqueSeparatorManager
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorCommand
18381748Di2015UniqueSeparatorMainViewModel
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorMainWindow.xaml
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorpublic BaseViewModel ViewModelDi2015NewLine{Di2015NewLine    get { return viewModel; }Di2015NewLine    set Di2015NewLine    {Di2015NewLine        if (viewModel != value) Di2015NewLine        { Di2015NewLine            viewModel = value;Di2015NewLine            NotifyPropertyChanged("ViewModel");Di2015NewLine        } Di2015NewLine    }Di2015NewLine}Di2015NewLine
18381748Di2015UniqueSeparatorBaseViewModel
18381748Di2015UniqueSeparatorMainWindow.xaml
18381748Di2015UniqueSeparator...Di2015NewLine<Grid Grid.Row="1" Background="{StaticResource Windows7LightBackground}">Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition Height="Auto" />Di2015NewLine        <RowDefinition Height="*" />Di2015NewLine    </Grid.RowDefinitions>Di2015NewLine    <ContentControl Grid.RowSpan="2" Content="{Binding ViewModel}" Margin="5" />Di2015NewLine</Grid>Di2015NewLine<Controls:FeedbackControl Grid.Row="0" Feedback="{Binding FeedbackManager.Feedback}" Di2015NewLineVerticalAlignment="Top" HorizontalAlignment="Stretch" MaxWidth="750" Di2015NewLineMargin="100,22,100,0" />Di2015NewLine...Di2015NewLine
18381748Di2015UniqueSeparatorGrid
18381748Di2015UniqueSeparatorRibbon
18381748Di2015UniqueSeparatorContentControl
18381748Di2015UniqueSeparatorViewModel
18381748Di2015UniqueSeparatorFeedbackControl
18381748Di2015UniqueSeparatorApp.xaml
18381748Di2015UniqueSeparatorDataTemplate
18381748Di2015UniqueSeparator...Di2015NewLine<DataTemplate DataType="{x:Type ViewModels:HomeViewModel}">Di2015NewLine    <Views:HomeView />Di2015NewLine</DataTemplate>Di2015NewLine<DataTemplate DataType="{x:Type ViewModels:MainViewModel}">Di2015NewLine    <Views:MainView />Di2015NewLine</DataTemplate>Di2015NewLine...Di2015NewLine
18381796Di2015UniqueSeparatorMouse.WindowHandle
18381796Di2015UniqueSeparatorMainForm
18381796Di2015UniqueSeparatorMouse.WindowHandle = this.Handle;Di2015NewLine
18381796Di2015UniqueSeparatorusing Microsoft.Xna.Framework.Input;
18381846Di2015UniqueSeparatorDataTable dt = reader.GetSchemaTable();Di2015NewLinestring query;Di2015NewLineList<string> list = new List<string>();Di2015NewLineDi2015NewLineforeach (DataRow columns in dt.Rows)Di2015NewLine{Di2015NewLine   foreach (DataColumn properties in dt.Columns)Di2015NewLine   {Di2015NewLine       list.Add(properties.ColumnName + " " + properties.DataType);Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLinequery = string.Join(",", list);Di2015NewLine
18381846Di2015UniqueSeparatorCreate Table [TableName] (Di2015NewLine   [append string here]Di2015NewLine)Di2015NewLine
18381864Di2015UniqueSeparator[DataContract]Di2015NewLine[KnownType(typeof(A))]Di2015NewLine[KnownType(typeof(B))]Di2015NewLinepublic class SerializablionHelperDi2015NewLine{Di2015NewLine  public SerializablionHelper()Di2015NewLine  {Di2015NewLine    //this.Entities = new Collection<Base>();Di2015NewLine  }Di2015NewLine    // public ICollection<Base> Entities { get; set; }Di2015NewLineDi2015NewLine  public Base A { get; set; }Di2015NewLineDi2015NewLine  public Base B { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class BaseDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLine[DataContract]Di2015NewLinepublic class A : BaseDi2015NewLine{Di2015NewLine  public int IntTest { get; set; }Di2015NewLineDi2015NewLine  [DataMember]Di2015NewLine  public string StringTest { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[DataContract]Di2015NewLinepublic class B : BaseDi2015NewLine{Di2015NewLine  [DataMember]Di2015NewLine  public int IntTest { get; set; }Di2015NewLineDi2015NewLine  [DataMember]Di2015NewLine  public string StringTest { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static void Main(string[] args)Di2015NewLine{Di2015NewLine  var objectA = new A { IntTest = 5, StringTest = "TestA" };Di2015NewLine  var objectB = new B { IntTest = 25, StringTest = "TestB" };Di2015NewLineDi2015NewLine  var serList = new SerializablionHelper { A = objectA, B = objectB };Di2015NewLine  var dcSerializer = new DataContractSerializer(typeof(SerializablionHelper));Di2015NewLineDi2015NewLineDi2015NewLine  var xmlWriterSetting = new XmlWriterSettings() { Indent = true };Di2015NewLine  using (var xmlWriter = XmlWriter.Create("C:\\\\test.xml", xmlWriterSetting))Di2015NewLine  {Di2015NewLine    dcSerializer.WriteObject(xmlWriter, serList);Di2015NewLine  }Di2015NewLine}Di2015NewLine
18381940Di2015UniqueSeparatorXDocument.Load
18381940Di2015UniqueSeparatorXDocument.Parse
18381940Di2015UniqueSeparatorXDocument.Parse
18381940Di2015UniqueSeparatorvar xDoc = XDocument.Load(requestedURL);Di2015NewLineXNamespace ns = "http://www.w3.org/2005/Atom";Di2015NewLinevar count = xDoc.Descendants(ns + "entry").Count();Di2015NewLine
18381969Di2015UniqueSeparatorImage.FromFile()
18381969Di2015UniqueSeparatorDirectory.EnumerateFiles
18381969Di2015UniqueSeparator(@"C:\\temp")
18381969Di2015UniqueSeparatorImage.FromFile()
18382163Di2015UniqueSeparatorpublic void OtherMethod<T>() where T : class {Di2015NewLine    if (typeof(IMyInterface).IsAssignableFrom(typeof(T))) {Di2015NewLine        MethodInfo method = this.GetType().GetMethod("DoStuff");Di2015NewLine        MethodInfo generic = method.MakeGenericMethod(typeof(T));Di2015NewLine        generic.Invoke(this, null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18382198Di2015UniqueSeparatorvar address = Dns.GetHostAddresses("server.myaddress.com")[0];Di2015NewLineIPAddress address = IPAddress.Parse(address);Di2015NewLine
18382273Di2015UniqueSeparatorList<T> GetObjectList<T>(byte objectType, Func<T> singleObjectGetter)Di2015NewLine
18382273Di2015UniqueSeparatorList<Car> cars = GetObjectList<Car>(CAR, GetOneCar);Di2015NewLine
18382273Di2015UniqueSeparatorList<Car> cars = GetObjectList(CAR, GetOneCar);Di2015NewLine
18382273Di2015UniqueSeparatorFunc<int, T>
18382275Di2015UniqueSeparator//class scope variablesDi2015NewLineBoundingFrustum boundingFrustum;Di2015NewLineDi2015NewLine//in the init methodDi2015NewLineboundingFrustum = new BoundingFrustum();Di2015NewLineDi2015NewLine//In the Update method or wherever you need to run a check checkDi2015NewLineboundingFrustum.Matrix = view * projection;Di2015NewLineDi2015NewLinebool isPointInView = boundingFrustum.Contains(Vector3ToTest);Di2015NewLine
18382379Di2015UniqueSeparatorvar values = HttpUtility.ParseQueryString(Request.RequestUri.Query);Di2015NewLine
18382379Di2015UniqueSeparatorpublic class MyModelBinder : DefaultModelBinderDi2015NewLine{Di2015NewLine    public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)Di2015NewLine    {Di2015NewLine        var request = controllerContext.HttpContext.Request;Di2015NewLineDi2015NewLine        // Default binderDi2015NewLine        var temp = base.BindModel(controllerContext, bindingContext);Di2015NewLineDi2015NewLine        var nulledValue = request.QueryString["test"];Di2015NewLine        if (nulledValue == "0.0")Di2015NewLine        {Di2015NewLine            // cast your temp to MyInvoice and set the property here...Di2015NewLine        }Di2015NewLineDi2015NewLine        return temp;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18382511Di2015UniqueSeparatorJavascriptSerializer
18382600Di2015UniqueSeparator   from r in context.ViewDi2015NewLine   where (ValOne == null || r.ColOne.Equals(ValOne)) && Di2015NewLine      (ValTwo == null ||r.ColTwo.Equals(ValTwo)) && Di2015NewLine      (Start == null || (r.ODate >= Start && r.ODate <= End)) Di2015NewLine   select rDi2015NewLine
18382610Di2015UniqueSeparatorDropDown
18382610Di2015UniqueSeparatorpublic class UserRoleViewModelDi2015NewLine{Di2015NewLine    // Display Attribute will appear in the Html.LabelForDi2015NewLine    [Display(Name = "User Role")]Di2015NewLine    public int SelectedUserRoleId { get; set; }Di2015NewLine    public IEnumerable<SelectListItem> UserRoles { get; set; }Di2015NewLine}Di2015NewLine
18382610Di2015UniqueSeparatorDisplayAttribute
18382610Di2015UniqueSeparatorUserRole
18382610Di2015UniqueSeparatorprivate IEnumerable<SelectListItem> GetRoles()Di2015NewLine{Di2015NewLine    var dbUserRoles = new DbUserRoles();Di2015NewLine    var roles = dbUserRolesDi2015NewLine                .GetRoles()Di2015NewLine                .Select(x =>Di2015NewLine                        new SelectListItemDi2015NewLine                            {Di2015NewLine                                Value = x.UserRoleId.ToString(),Di2015NewLine                                Text = x.UserRoleDi2015NewLine                            });Di2015NewLineDi2015NewLine    return new SelectList(roles, "Value", "Text");Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult AddNewUser()Di2015NewLine{Di2015NewLine    var model = new UserRoleViewModelDi2015NewLine                    {Di2015NewLine                        UserRoles = GetRoles()Di2015NewLine                    };Di2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
18382610Di2015UniqueSeparatorSelectListItem
18382610Di2015UniqueSeparatorSelectList Constructor (IEnumerable, String, String)
18382610Di2015UniqueSeparator@model UserRoleViewModelDi2015NewLineDi2015NewLine@Html.LabelFor(m => m.SelectedUserRoleId)Di2015NewLine@Html.DropDownListFor(m => m.SelectedUserRoleId, Model.UserRoles)Di2015NewLine
18382610Di2015UniqueSeparatorLabelExtensions.LabelFor
18382610Di2015UniqueSeparatorSelectExtensions.DropDownListFor
18382610Di2015UniqueSeparator<label for="SelectedUserRoleId">User Role</label>Di2015NewLine<select id="SelectedUserRoleId" name="SelectedUserRoleId">Di2015NewLine    <option value="1">First Role</option>Di2015NewLine    <option value="2">Second Role</option>Di2015NewLine    <option value="3">Etc...</option>Di2015NewLine</select>Di2015NewLine
18382659Di2015UniqueSeparatorQPointF p;Di2015NewLinedouble xSum = 0;Di2015NewLinedouble ySum = 0;Di2015NewLinefor(QVector::iterator it=this->begin(); it!=this->end(); it++)Di2015NewLine{Di2015NewLine    xSum = xSum + it->rx();Di2015NewLine    ySum = ySum + it->ry();Di2015NewLine}Di2015NewLine
18382712Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public MyCommand ButtonClick { get; set; }Di2015NewLineDi2015NewLine    public MyViewModel()Di2015NewLine    {Di2015NewLine        ButtonClick = new MyCommand();Di2015NewLine        ButtonClick.CanExecuteFunc = ButtonClickCanExecute;Di2015NewLine        ButtonClick.ExecuteFunc = ButtonClickFunc;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool ButtonClickCanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ButtonClickFunc(object parameter)Di2015NewLine    {Di2015NewLine        // Do stuff here Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class MyCommand : ICommand Di2015NewLine{Di2015NewLine    public event EventHandler CanExecuteChanged;Di2015NewLine    public Predicate<object> CanExecuteFunc { get; set; }Di2015NewLine    public Action<object> ExecuteFunc { get; set; }Di2015NewLineDi2015NewLine    public bool CanExecute(object parameter)Di2015NewLine    {Di2015NewLine        return CanExecuteFunc(parameter);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Execute(object parameter)Di2015NewLine    {Di2015NewLine        ExecuteFunc(parameter);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18382712Di2015UniqueSeparatorCanExecute
18382712Di2015UniqueSeparatorMyCommand
18382712Di2015UniqueSeparator<Button Command="{Binding ButtonClick}">Action</Button>Di2015NewLine
18382776Di2015UniqueSeparator_serverStream.Flush()
18382803Di2015UniqueSeparator    literal double Invalid = -1;Di2015NewLine
18382848Di2015UniqueSeparatoryt
18382848Di2015UniqueSeparatorvar xDoc = XDocument.Load(@"https://gdata.youtube.com/feeds/api/users/djfonplaz/subscriptions?v=2");Di2015NewLinevar ns = XNamespace.Get("http://www.w3.org/2005/Atom");Di2015NewLinevar yt = XNamespace.Get("http://gdata.youtube.com/schemas/2007");Di2015NewLinevar m_oListaMeteo = xDoc.Descendants(ns + "entry").Select(n =>Di2015NewLine{Di2015NewLine    return newDi2015NewLine    {Di2015NewLine        username = n.Element(yt + "username").ValueDi2015NewLine    };Di2015NewLine});Di2015NewLine
18382862Di2015UniqueSeparatorstring originalUri = "http://www.example.org/etc?query=string&query2=&query3=";Di2015NewLineDi2015NewLine// Create the URI builder object which will give us access to the query string.Di2015NewLinevar uri = new UriBuilder(originalUri);Di2015NewLineDi2015NewLine// Parse the querystring into partsDi2015NewLinevar query = System.Web.HttpUtility.ParseQueryString(uri.Query);Di2015NewLineDi2015NewLine// Loop through the parts to select only the ones where the value is not null or empty  Di2015NewLinevar resultQuery = query.AllKeysDi2015NewLine                       .Where(k => !string.IsNullOrEmpty(query[k]))Di2015NewLine                       .Select(k => string.Format("{0}={1}", k, query[k]));Di2015NewLineDi2015NewLine// Set the querystring part to the parsed version with blank values removedDi2015NewLineuri.Query = string.Join("&",resultQuery);Di2015NewLineDi2015NewLine// Done, uri now contains "http://www.example.org/etc?query=string"Di2015NewLine
18383051Di2015UniqueSeparatorpublic enum MyOptionsDi2015NewLine{Di2015NewLine    Option1,Di2015NewLine    Option2,Di2015NewLine    Option3Di2015NewLine}Di2015NewLine
18383051Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public MyOptions SelectedOption {get;set;} //NotifyPropertyChange() is required.Di2015NewLine}Di2015NewLine
18383051Di2015UniqueSeparatorRadioButtons
18383051Di2015UniqueSeparatorEnumToBoolConverter
18383051Di2015UniqueSeparator<RadioButton IsChecked="{Binding SelectedOption, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Option1}"/>Di2015NewLine<RadioButton IsChecked="{Binding SelectedOption, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Option2}"/>Di2015NewLine<RadioButton IsChecked="{Binding SelectedOption, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Option3}"/>Di2015NewLine
18383051Di2015UniqueSeparatorswitch
18383051Di2015UniqueSeparatorpublic void SomeMethod()Di2015NewLine{Di2015NewLine   switch (SelectedOption)Di2015NewLine   {Di2015NewLine      case MyOptions.Option1:Di2015NewLine           ...Di2015NewLine      case MyOptions.Option2:Di2015NewLine           ...Di2015NewLine      case MyOptions.Option3:Di2015NewLine           ...Di2015NewLine   }Di2015NewLine}Di2015NewLine
18383278Di2015UniqueSeparator[IntroduceMember( Visibility = Visibility.Private )]Di2015NewLine//public CommandFactory<TCommands> CommandFactoryDi2015NewLinepublic object CommandFactoryDi2015NewLine{Di2015NewLine    get { return _commandFactory; }Di2015NewLine    private set { _commandFactory = value; }Di2015NewLine}Di2015NewLine
18383278Di2015UniqueSeparatorLaevo.ViewModel.Main
18383278Di2015UniqueSeparatorprivate object CommandFactoryDi2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    return ((ViewModelAspect<Laevo.ViewModel.ActivityOverview.Binding.Properties, Laevo.ViewModel.ActivityOverview.Binding.Commands>) this.\\u003C\\u003Ez__aspect35).CommandFactory;Di2015NewLine  }Di2015NewLine}Di2015NewLine
18383423Di2015UniqueSeparator[Register("MySourceList")]Di2015NewLineprivate class MySourceList : NSOutlineViewDi2015NewLine{Di2015NewLine    // Need this constructor for items created in .xibDi2015NewLine    public MySourceList(IntPtr handle) : base(handle)Di2015NewLine    { }Di2015NewLine
18383516Di2015UniqueSeparatorstring.Join(",", parts)
18383516Di2015UniqueSeparatorString.Join
18383516Di2015UniqueSeparator"some, field" Di2015NewLine
18383516Di2015UniqueSeparatorsome, field Di2015NewLine
18383516Di2015UniqueSeparatorstring[] fields = parser.ReadFields();Di2015NewLine// insert your logic here ....Di2015NewLinevar newFields = fields Di2015NewLine    .Select(f => f.Contains(",") ? string.Format("\\"{0}\\"", f) : f);Di2015NewLinelines.Add(string.Join(",", newFields));Di2015NewLine
18383516Di2015UniqueSeparatorvar newFields = fields.Select(f => string.Format("\\"{0}\\"", f));Di2015NewLine
18383527Di2015UniqueSeparatorScreenCapture capture = new ScreenCapture();Di2015NewLinecapture.CaptureImage(...);Di2015NewLine
18383527Di2015UniqueSeparatorScreenCapture
18383527Di2015UniqueSeparatornull
18383527Di2015UniqueSeparatorOnUpdateStatus
18383527Di2015UniqueSeparatorControlPanel
18383527Di2015UniqueSeparatorForm1
18383607Di2015UniqueSeparatorContent-Disposition
18383607Di2015UniqueSeparatorpublic HttpResponseMessage Get()Di2015NewLine{Di2015NewLine    XDocument xDoc = GetXMLDocument();Di2015NewLineDi2015NewLine    var response = this.Request.CreateResponse(Di2015NewLine        HttpStatusCode.OK, Di2015NewLine        xDoc.ToString(), Di2015NewLine        this.Configuration.Formatters.XmlFormatterDi2015NewLine    );Di2015NewLine    response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment")Di2015NewLine    {Di2015NewLine        FileName = "statistics.xml"Di2015NewLine    };Di2015NewLine    response.Headers.Add("Publisher", "Bill John");Di2015NewLine    return response;Di2015NewLine}Di2015NewLine
18383668Di2015UniqueSeparatordouble.TryParse
18383668Di2015UniqueSeparatordouble val;Di2015NewLineif (double.TryParse(values8[x], out val))Di2015NewLine{Di2015NewLine    // you can safely use the val variable hereDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // parsing failedDi2015NewLine}Di2015NewLine
18383668Di2015UniqueSeparatordouble val;Di2015NewLinevar culture = new CultureInfo("fr-FR");Di2015NewLineif (double.TryParse(values8[x], NumberStyles.None, culture, out val))Di2015NewLine{Di2015NewLine    // you can safely use the val variable hereDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    // parsing failedDi2015NewLine}Di2015NewLine
18383677Di2015UniqueSeparatorpublic string doSomething(string param1, int status)Di2015NewLine{Di2015NewLine    if (IsValidEnum<Status>(status))Di2015NewLine    {Di2015NewLine        Account.Status = (Status)status;Di2015NewLine    }Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineprivate bool IsValidEnum<T>(int value)Di2015NewLine{Di2015NewLine    var validValues = Enum.GetValues(typeof(T));Di2015NewLine    var validIntValues = validValues.Cast<int>();Di2015NewLine    return validIntValues.Any(v => v == value);Di2015NewLine}Di2015NewLine
18383709Di2015UniqueSeparator<TextBlock Name="ContactResults" Style="{StaticResource PhoneFontSizeMedium}" Text="{Binding Path=DisplayName, Mode=OneWay}" />Di2015NewLine
18383709Di2015UniqueSeparatorPhoneFontSizeMedium
18383709Di2015UniqueSeparator<TextBlock Name="ContactResults" FontSize="{StaticResource PhoneFontSizeMedium}" Text="{Binding Path=DisplayName, Mode=OneWay}" />Di2015NewLine
18383817Di2015UniqueSeparatorInt32.TryParse
18383817Di2015UniqueSeparator//Gets the number contained in a Node's headerDi2015NewLinepublic static int getNumber(string parentNodeHeader)Di2015NewLine{Di2015NewLine      int curNumber;Di2015NewLine      //if parse to Int32 fails, curNumber will still be 0Di2015NewLine      Int32.TryParse(parentNodeHeader, out curNumber);Di2015NewLine      return curNumber;Di2015NewLine}Di2015NewLine
18383817Di2015UniqueSeparator//Initializing a parent TreeView ItemDi2015NewLinevar parentItem = (TreeViewItem)SelectedItem.Parent;Di2015NewLinevar header = (TextBlock)parentItem.Header;Di2015NewLineint curNumber = getNumber(header.Text);Di2015NewLine
18383822Di2015UniqueSeparatorcount
18383822Di2015UniqueSeparator2
18383822Di2015UniqueSeparator1
18383822Di2015UniqueSeparatorif (count > 501)Di2015NewLine
18383822Di2015UniqueSeparator500
18383822Di2015UniqueSeparator501
18383822Di2015UniqueSeparatorcount > 500
18383822Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Console.WriteLine(Find());Di2015NewLine}Di2015NewLineDi2015NewLinepublic static int Find()Di2015NewLine{Di2015NewLine    int number = 0;Di2015NewLine    for (int i = 1; ; i++)Di2015NewLine    {Di2015NewLine        number += i; // number is triangle number iDi2015NewLine        if (CountDivisorsOfNumber(number) > 500)Di2015NewLine            return number;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate static int CountDivisorsOfNumber(int number)Di2015NewLine{Di2015NewLine     int count = 0;Di2015NewLine     int end = (int)Math.Sqrt(number);Di2015NewLine     for (int i = 1; i < end; i++)Di2015NewLine     {Di2015NewLine         if (number % i == 0)Di2015NewLine             count += 2;Di2015NewLine     }Di2015NewLine     if (end * end == number) // Perfect squareDi2015NewLine         count++;Di2015NewLine     return count;Di2015NewLine}Di2015NewLine
18383822Di2015UniqueSeparator76576500
18383959Di2015UniqueSeparatorlead.InternalCompany = nvCollection["ic"] ?? string.Empty;Di2015NewLine
18383986Di2015UniqueSeparatorchild.Weight
18383986Di2015UniqueSeparatorAttached Property
18383986Di2015UniqueSeparatorvar weight = WeightedPanel.GetWeight(child);Di2015NewLine
18383986Di2015UniqueSeparatorGrid
18383986Di2015UniqueSeparatorGrid
18383986Di2015UniqueSeparator<Grid>Di2015NewLine   <Grid.ColumnDefinitions>Di2015NewLine      <ColumnDefinition Width="1.5*"/>Di2015NewLine      <ColumnDefinition Width="2*"/>Di2015NewLine      <ColumnDefinition Width="1*"/>Di2015NewLine      <ColumnDefinition Width="1*"/>Di2015NewLine      <ColumnDefinition Width="1*"/>Di2015NewLine      <ColumnDefinition Width="1*"/>Di2015NewLine  </Grid.ColumnDefinitions>Di2015NewLine</Grid>Di2015NewLine
18384101Di2015UniqueSeparatortry-catch
18384101Di2015UniqueSeparatorUSE CollegeRecruitingDi2015NewLine
18384101Di2015UniqueSeparatorusing (SqlConnection c = new SqlConnection(connString))Di2015NewLineusing (SqlCommand cmd = new SqlCommand("INSERT INTO ... VALUES (@field1...)"), c)Di2015NewLine{Di2015NewLine    cmd.Parameters.AddWithValue("@field1", txtField1.Text);Di2015NewLineDi2015NewLine    c.Open();Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
18384116Di2015UniqueSeparatorhttp://tempuri.org/MySchema.xsd
18384116Di2015UniqueSeparatorDotNetConfig.xsd
18384253Di2015UniqueSeparatorasync
18384253Di2015UniqueSeparatorawait
18384253Di2015UniqueSeparatorhttpRuntime.targetFramework
18384253Di2015UniqueSeparator4.5
18384253Di2015UniqueSeparatorappSettings
18384253Di2015UniqueSeparatoraspnet:UseTaskFriendlySynchronizationContext
18384253Di2015UniqueSeparatortrue
18384294Di2015UniqueSeparatorrange request
18384294Di2015UniqueSeparator206 Partial Content
18384294Di2015UniqueSeparator200 OK
18384294Di2015UniqueSeparatorRange: bytes=0-
18384294Di2015UniqueSeparatorRange: bytes=0-1
18384294Di2015UniqueSeparatorRange: bytes=0-fullsize
18384294Di2015UniqueSeparatorResponse.StatusCode = 206
18384294Di2015UniqueSeparatorrange
18384294Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine       if ( Request["filename"] != null)Di2015NewLine       {Di2015NewLine           string FilePath = MapPath(Request["filename"]);Di2015NewLine           long fSize = (new System.IO.FileInfo(FilePath)).Length;Di2015NewLine           long startbyte = 0;Di2015NewLine           long endbyte=fSize-1;Di2015NewLine           int statusCode =200;Di2015NewLine           if ((Request.Headers["Range"] != null))Di2015NewLine           {Di2015NewLine               //Get the actual byte range from the range header string, and set the starting byte.Di2015NewLine               string[] range = Request.Headers["Range"].Split(new char[] { '=','-'});Di2015NewLine               startbyte = Convert.ToInt64(range[1]);Di2015NewLine               if (range.Length >2 && range[2]!="")  endbyte =  Convert.ToInt64(range[2]);Di2015NewLine               //If the start byte is not equal to zero, that means the user is requesting partial content.Di2015NewLine               if (startbyte != 0 || endbyte != fSize - 1 || range.Length > 2 && range[2] == "")Di2015NewLine               {statusCode = 206;}//Set the status code of the response to 206 (Partial Content) and add a content range header.                                    Di2015NewLine           }Di2015NewLine           long desSize = endbyte - startbyte + 1;Di2015NewLine           //HeadersDi2015NewLine           Response.StatusCode = statusCode;Di2015NewLine           Response.ContentType = "audio/mp3";Di2015NewLine           Response.AddHeader("Content-Length",desSize.ToString()); Di2015NewLine           Response.AddHeader("Content-Range", string.Format("bytes {0}-{1}/{2}", startbyte, endbyte , fSize));Di2015NewLine           //DataDi2015NewLine           Response.WriteFile(FilePath,startbyte,desSize);Di2015NewLine           Response.End(); Di2015NewLine       };      Di2015NewLine    }Di2015NewLine
18384294Di2015UniqueSeparatorContent-Disposition
18384294Di2015UniqueSeparatorAccept-Ranges
18384294Di2015UniqueSeparatorAccess-Control-Allow-Origin
18384294Di2015UniqueSeparator<audio>
18384294Di2015UniqueSeparator<video>
18384328Di2015UniqueSeparator$.ajax({Di2015NewLine    type: "POST",Di2015NewLine    url: "Default.aspx/ajxTest",Di2015NewLine    contentType: "application/json; charset=utf-8",Di2015NewLine    dataType: "json",Di2015NewLine    success: function (data) {Di2015NewLine        alert('success');Di2015NewLine    },Di2015NewLine    error: function (data) {Di2015NewLine        alert('fail');Di2015NewLine    }Di2015NewLine});Di2015NewLine
18384328Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static string ajxTest()Di2015NewLine{Di2015NewLine    return @"{ ""hello"":""hola"" }";Di2015NewLine}Di2015NewLine
18384453Di2015UniqueSeparatorXDocument xDoc = XDocument.Load("XMLFile1.xml");Di2015NewLineList<XElement> distinctDocs = xDoc.Descendants().GroupBy(x => x.Name).Where(x => x.Count() == 1).Select(g => g.Single()).ToList();Di2015NewLine
18384632Di2015UniqueSeparator    public ActionResult Login(LogOnModel model, string returnUrl)Di2015NewLine    {Di2015NewLine        if (ModelState.IsValid)Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                var authService = AppHostBase.Resolve<AuthService>();Di2015NewLine                authService.RequestContext = System.Web.HttpContext.Current.ToRequestContext();Di2015NewLine                var response = authService.Authenticate(new AuthDi2015NewLine                {Di2015NewLine                    UserName = model.UserName,Di2015NewLine                    Password = model.Password,Di2015NewLine                    RememberMe = model.RememberMeDi2015NewLine                });Di2015NewLineDi2015NewLine                // add ASP.NET auth cookieDi2015NewLine                FormsAuthentication.SetAuthCookie(model.UserName, model.RememberMe);Di2015NewLineDi2015NewLine                return RedirectToLocal(returnUrl);Di2015NewLine            }Di2015NewLine            catch (HttpError)Di2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // If we got this far, something failed, redisplay formDi2015NewLine        ModelState.AddModelError("", "The user name or password provided is incorrect.");Di2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine
18384632Di2015UniqueSeparator           //Default route: /auth/{provider}Di2015NewLine            Plugins.Add(new AuthFeature(() => new CustomUserSession(),Di2015NewLine            new IAuthProvider[] {Di2015NewLine                new CustomCredentialsAuthProvider(),Di2015NewLine                new CustomBasicAuthProvider()Di2015NewLine            }));Di2015NewLine
18384632Di2015UniqueSeparatorpublic class CustomCredentialsAuthProvider : CredentialsAuthProviderDi2015NewLine{  Di2015NewLine    public override bool TryAuthenticate(IServiceBase authService, string userName, string password)Di2015NewLine    {Di2015NewLine        return UserLogUtil.LogUser(authService, userName, password);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class CustomBasicAuthProvider : BasicAuthProviderDi2015NewLine{Di2015NewLine    public override bool TryAuthenticate(IServiceBase authService, string userName, string password)Di2015NewLine    {Di2015NewLine        return UserLogUtil.LogUser(authService, userName, password);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18384632Di2015UniqueSeparatorinternal static class UserLogUtilDi2015NewLine{Di2015NewLine    public static bool LogUser(IServiceBase authService, string userName, string password)Di2015NewLine    {Di2015NewLine        var userService = new UserService(); //This can be a webservice; or, you can just call your repository from hereDi2015NewLine        var loggingResponse = (UserLogResponse)userService.Post(new LoggingUser { UserName = userName, Password = password });Di2015NewLineDi2015NewLine        if (loggingResponse.User != null && loggingResponse.ResponseStatus == null)Di2015NewLine        {Di2015NewLine            var session = (CustomUserSession)authService.GetSession(false);Di2015NewLine            session.DisplayName = loggingResponse.User.FName.ValOrEmpty() + " " + loggingResponse.User.LName.ValOrEmpty();Di2015NewLine            session.UserAuthId = userName;Di2015NewLine            session.IsAuthenticated = true;Di2015NewLine            session.Id = loggingResponse.User.UserID.ToString();Di2015NewLineDi2015NewLine            // add roles and permissionsDi2015NewLine            //session.Roles = new List<string>();Di2015NewLine            //session.Permissions = new List<string>();Di2015NewLine            //session.Roles.Add("Admin);Di2015NewLine            //session.Permissions.Add("Admin");Di2015NewLineDi2015NewLine            return true;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18384787Di2015UniqueSeparatorShowMessage("1", "2", "3");
18384787Di2015UniqueSeparator2
18384787Di2015UniqueSeparatorcultureKeyTitle
18384787Di2015UniqueSeparatorparams
18384787Di2015UniqueSeparatorparams
18384787Di2015UniqueSeparatorcultureKeyTitle
18384787Di2015UniqueSeparatorShowMessage("1", fields: new[] { "2", "3" });Di2015NewLine
18384795Di2015UniqueSeparatorDateTime
18384795Di2015UniqueSeparatorint
18384900Di2015UniqueSeparatorTranslateTo
18384900Di2015UniqueSeparatorPopulateWith
18384900Di2015UniqueSeparatorPopulateWithNonDefaultValues
18384902Di2015UniqueSeparatorif (RadUpload1.UploadedFiles.Count > 1)Di2015NewLine{Di2015NewLine    for (int fileBuffer = 0; fileBuffer < RadUpload1.UploadedFiles.Count-1; fileBuffer++)Di2015NewLine    {Di2015NewLine        for (int fileList = fileBuffer + 1; fileList < RadUpload1.UploadedFiles.Count; fileList++)Di2015NewLine        {Di2015NewLine            if (RadUpload1.UploadedFiles[fileBuffer] != RadUpload1.UploadedFiles[fileList])Di2015NewLine            {Di2015NewLine//....Di2015NewLine
18384935Di2015UniqueSeparatortestFlag
18384935Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    //can create user but not read the information backDi2015NewLine    var userCanBeCreatedPermission = Permissions.Create | Permissions.User;Di2015NewLineDi2015NewLine    //can create and readbackDi2015NewLine    var userCanBeCreatedAndReadBackPermission = userCanBeCreatedPermission | Permissions.Read;Di2015NewLineDi2015NewLine    userCanBeCreatedPermission.HasFlag(Permissions.User).Dump(); //returns trueDi2015NewLineDi2015NewLine    (userCanBeCreatedPermission.HasFlag(Permissions.User) && userCanBeCreatedPermission.HasFlag(Permissions.Read)).Dump(); //returns falseDi2015NewLineDi2015NewLine    //alternative way of checking flags is to combine the flags and do an And mask checkDi2015NewLine    //the above can be written asDi2015NewLine    ((userCanBeCreatedPermission & (Permissions.User | Permissions.Read)) == (Permissions.User | Permissions.Read)).Dump(); //returns falseDi2015NewLineDi2015NewLine    //using a variable to have combined permissions for readibility & using And mask:Di2015NewLine    var desiredPermissions = Permissions.User | Permissions.Read;Di2015NewLineDi2015NewLine    //checking with user that has both Create & Read permissionsDi2015NewLineDi2015NewLine    ((userCanBeCreatedAndReadBackPermission & desiredPermissions) == desiredPermissions).Dump(); // returns true because the user information can be read back by this userDi2015NewLineDi2015NewLine    ((userCanBeCreatedAndReadBackPermission & Permissions.Delete) == Permissions.Delete).Dump(); // returns false because the user can't be deletedDi2015NewLine}Di2015NewLineDi2015NewLine[Flags]Di2015NewLinepublic enum PermissionsDi2015NewLine{Di2015NewLine   None = 0,Di2015NewLine   Create = 1 << 0,Di2015NewLine   Read = 1 << 1,Di2015NewLine   Update = 1 << 2,Di2015NewLine   Delete = 1 << 3,Di2015NewLineDi2015NewLine   User = 1 << 4,Di2015NewLine   Group = 1 << 5Di2015NewLine}Di2015NewLine
18385147Di2015UniqueSeparatorDictionary<DateTime, List<Double>> map;Di2015NewLineforeach (var pair in map) {Di2015NewLine  DateTime dt = pair.Key;Di2015NewLine  foreach (double value in pair.Value) {Di2015NewLine    // Now you have the DateTime and Double valuesDi2015NewLine  }Di2015NewLine}Di2015NewLine
18385295Di2015UniqueSeparatorTestStruct ts = new TestStruct Di2015NewLine{Di2015NewLine     TestField = "something";Di2015NewLine};Di2015NewLine
18385295Di2015UniqueSeparatorTestStruct ts;Di2015NewLinevar tmp = new TestStruct();Di2015NewLinetmp.TestField = "something"; //this is not possibleDi2015NewLinets = tmp;Di2015NewLine
18385319Di2015UniqueSeparatorSnippingTool
18385336Di2015UniqueSeparatorSelect()
18385336Di2015UniqueSeparatorSelectMany()
18385336Di2015UniqueSeparatorkey
18385336Di2015UniqueSeparatorModelState.Keys.SelectMany(key => this.ModelState[key].Errors.Select(x => key + ": " + x.ErrorMessage));Di2015NewLine
18385336Di2015UniqueSeparatorfrom kvp in ModelStateDi2015NewLinefrom e in kvp.Value.ErrorsDi2015NewLineselect kvp.Key + ": " + e.ErrorMessageDi2015NewLine
18385383Di2015UniqueSeparatorUserState
18385383Di2015UniqueSeparatorProgressChanged
18385383Di2015UniqueSeparatorUserState
18385383Di2015UniqueSeparatorReportProgress
18385383Di2015UniqueSeparatorReportProgress(1, "Loading data");Di2015NewLine
18385383Di2015UniqueSeparatorProgressChanged
18385383Di2015UniqueSeparator// This event handler updates the progress. Di2015NewLineprivate void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)Di2015NewLine{Di2015NewLine    resultLabel.Text = (string)e.UserStateDi2015NewLine}Di2015NewLine
18385443Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Data;Di2015NewLineusing System.Data.SqlClient;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace WorkingDi2015NewLine{Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string DsQuery = "INSERT INTO table (param1,param2)VALUES(@param1,@param2)"; Di2015NewLine        string TgtServer = @".\\SQLEXPRESS";Di2015NewLine        DataSet dsServers = new DataSet();Di2015NewLine        dsServers = ExecQuery(DsQuery, TgtServer, "InitialCatalog");Di2015NewLine    }Di2015NewLineDi2015NewLine    private static DataSet ExecQuery(string strQuery, string strServer, string strIC)Di2015NewLine    {Di2015NewLineDi2015NewLine        string connectionString = @"Data Source=" + strServer + ";Initial Catalog=" + strIC + ";Integrated Security=SSPI";Di2015NewLine        string commandString = strQuery;Di2015NewLineDi2015NewLine        DataSet ds = new DataSet();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            SqlDataAdapter da = new SqlDataAdapter(commandString, connectionString);Di2015NewLine            da.Fill(ds, "Table");Di2015NewLine        }Di2015NewLine        catch (SqlException e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("An SQL Exception Occured: " + e.Message);Di2015NewLineDi2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("An General Exception Occured: " + e.Message);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        return ds;Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18385616Di2015UniqueSeparator Run(()=>myAction(arg1, arg2));Di2015NewLine
18385694Di2015UniqueSeparator<binding name="BasicHttpEndpointBinding">Di2015NewLine      <security mode="TransportCredentialOnly">Di2015NewLine        <transport clientCredentialType="Windows" />Di2015NewLine      </security>Di2015NewLine</binding>Di2015NewLine
18385708Di2015UniqueSeparatorHeight = 10
18385708Di2015UniqueSeparatorAFrameworkElement
18385708Di2015UniqueSeparatorHeight
18385757Di2015UniqueSeparatorSystem.Diagnostics.Process[] proc = System.Diagnostics.Process.GetProcessesByName("ProcessName");//Add visuals procname hereDi2015NewLine            if (proc.Length > 0)Di2015NewLine            {Di2015NewLine                MessageBox.Show("Process running");Di2015NewLine                if (timer1.Enabled == false)Di2015NewLine                {Di2015NewLine                    timer1.Start();//Starts the countdown}Di2015NewLine                    System.Threading.Thread.Sleep(1000);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    MessageBox.Show("Process not running");Di2015NewLine                    if (timer1.Enabled == true)Di2015NewLine                    {Di2015NewLine                        timer1.Stop();//Stops the countdown}Di2015NewLine                        System.Threading.Thread.Sleep(1000);Di2015NewLine                    }Di2015NewLine
18385849Di2015UniqueSeparator<a>
18385849Di2015UniqueSeparator[HttpPost]
18385849Di2015UniqueSeparator@using (Html.BeginForm("LogOff", "Account", FormMethod.Post))Di2015NewLine{Di2015NewLine    @Html.AntiForgeryToken()Di2015NewLine    <button type="submit">Logout ?</button>Di2015NewLine}Di2015NewLine
18385849Di2015UniqueSeparator[ValidateAntiForgeryToken]
18385889Di2015UniqueSeparatorxml-poke
18385889Di2015UniqueSeparatorxml-transform
18385889Di2015UniqueSeparator<appsettings>
18385889Di2015UniqueSeparatorConfigurationManager.AppSettings
18385949Di2015UniqueSeparatorRaiseCanExecuteChanged()
18385949Di2015UniqueSeparatorState
18385949Di2015UniqueSeparatorpublic RelayCommand StartStopCommand { get; set; }Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinepublic MainViewModel() {Di2015NewLine  StartStopCommand = new RelayCommand(async () => {Di2015NewLine    switch (State) {Di2015NewLine      case WorkState.Idle:Di2015NewLine        State = WorkState.Working;Di2015NewLine        break;Di2015NewLine      case WorkState.Working:Di2015NewLine        State = WorkState.Stopping;Di2015NewLine        await Task.Delay(5000);Di2015NewLine        State = WorkState.Idle;Di2015NewLine        break;Di2015NewLine    }Di2015NewLine  }, () => State == WorkState.Idle || State == WorkState.Working);Di2015NewLine}Di2015NewLine
18385949Di2015UniqueSeparatorButton
18385949Di2015UniqueSeparatorThread
18385949Di2015UniqueSeparatornew Thread(Di2015NewLine  () => {Di2015NewLine    Thread.Sleep(5000);Di2015NewLine    Application.Current.Dispatcher.BeginInvoke(Di2015NewLine      new Action(() => State = WorkState.Idle));Di2015NewLine  }).Start();Di2015NewLine
18385955Di2015UniqueSeparatorScheduler.PauseTrigger
18385955Di2015UniqueSeparatorScheduler.PauseJob
18385955Di2015UniqueSeparatorInternalTriggerState.Paused
18385955Di2015UniqueSeparatorvar trigger = TriggerBuilder.Create()Di2015NewLine    .ForJob(job)Di2015NewLine    .WithSimpleSchedule(schedule => schedule.WithIntervalInMinutes(1).RepeatForever())Di2015NewLine    .StartAt(SystemTime.UtcNow().AddSeconds(5))Di2015NewLine    .Build();Di2015NewLineDi2015NewLinescheduler.ScheduleJob(job, trigger);Di2015NewLineDi2015NewLinescheduler.PauseTrigger(trigger.Key);Di2015NewLine
18386001Di2015UniqueSeparatorpublic static void ConnectToPUServer()Di2015NewLine{Di2015NewLine    var client = new WebClient();Di2015NewLine    while (i < 500 && networkIsAvailable)Di2015NewLine    {Di2015NewLine        string html = client.DownloadString(URI);Di2015NewLine        //some data processingDi2015NewLine        Console.WriteLine(i);Di2015NewLine        i++;Di2015NewLine        URI = "http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/" + i + "/";Di2015NewLine    }Di2015NewLine    Console.WriteLine("Complete.");Di2015NewLine    writer.Close();Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinestatic void NetworkChange_NetworkAvailabilityChanged(object sender, NetworkAvailabilityEventArgs e)Di2015NewLine{Di2015NewLine    networkIsAvailable = e.IsAvailable;Di2015NewLine    if (!networkIsAvailable)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Internet connection not available! We resume as soon as network is available...");Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        ConnectToPUServer();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18386228Di2015UniqueSeparator<GridView Di2015NewLine    x:Name="itemGridView"Di2015NewLine    IsItemClickEnabled="True"Di2015NewLine    ItemsSource="{Binding Timesheets}"Di2015NewLine    ItemTemplate="{StaticResource TimesheetTemplate}" Di2015NewLine    Margin="10"Di2015NewLine    Grid.Column="0"Di2015NewLine    SelectionMode="Multiple"Di2015NewLine    helpers:ItemClickCommand.Command="{Binding NavigateTimesheetCommand}" Di2015NewLine    helpers:SelectionChangedCommand.Command="{Binding SelectionChangedCommand}Di2015NewLine    "RenderTransformOrigin="0.738,0.55"  >Di2015NewLine</GridView>Di2015NewLine
18386228Di2015UniqueSeparatornamespace TimesheetManager.HelpersDi2015NewLine{Di2015NewLine    public class SelectionChangedCommandDi2015NewLine    {Di2015NewLine        public static readonly DependencyProperty CommandProperty =Di2015NewLine            DependencyProperty.RegisterAttached("Command", typeof(ICommand),Di2015NewLine            typeof(SelectionChangedCommand), new PropertyMetadata(null, Di2015NewLine            OnCommandPropertyChanged));Di2015NewLineDi2015NewLine        public static void SetCommand(DependencyObject d, ICommand value)Di2015NewLine        {Di2015NewLine            d.SetValue(CommandProperty, value);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static ICommand GetCommand(DependencyObject d)Di2015NewLine        {Di2015NewLine            return (ICommand)d.GetValue(CommandProperty);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void OnCommandPropertyChanged(DependencyObject d,Di2015NewLine            DependencyPropertyChangedEventArgs e)Di2015NewLine        {Di2015NewLine            var control = d as ListViewBase;Di2015NewLineDi2015NewLine            if (control != null)Di2015NewLine                control.SelectionChanged += OnSelectionChanged;Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void OnSelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine        {Di2015NewLine            var control = sender as ListViewBase;Di2015NewLine            var command = GetCommand(control);Di2015NewLineDi2015NewLine            if (command != null && command.CanExecute(e))Di2015NewLine                command.Execute(e);Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18386228Di2015UniqueSeparatorprivate RelayCommand<object> _selectionChangedCommand;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Gets the SelectionChangedCommand.Di2015NewLine/// </summary>Di2015NewLinepublic RelayCommand<object> SelectionChangedCommandDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return _selectionChangedCommand ?? (_selectionChangedCommand = new RelayCommand<object>Di2015NewLine        ((param) => ExecuteSelectionChangedCommand(param)));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ExecuteSelectionChangedCommand(object sender)Di2015NewLine{Di2015NewLine    var x = sender as SelectionChangedEventArgs;Di2015NewLineDi2015NewLine    foreach (var item in x.AddedItems)Di2015NewLine            ((TimesheetViewModel)item).IsSelected = true;Di2015NewLineDi2015NewLine    foreach (var item in x.RemovedItems)Di2015NewLine            ((TimesheetViewModel)item).IsSelected = false;Di2015NewLineDi2015NewLine}Di2015NewLine
18386231Di2015UniqueSeparatorPartialExtensions.Partial Method (HtmlHelper, String, Object)Di2015NewLine
18386231Di2015UniqueSeparator<input id="txtSomethingElse_@Model.ToString()" class="input"/>
18386231Di2015UniqueSeparatorint
18386231Di2015UniqueSeparator<div id=element1>Di2015NewLine    @Htm.Partial("CommonView", 1)Di2015NewLine    @*Other data...*@Di2015NewLine</div>Di2015NewLine<div id=element2>Di2015NewLine    @Htm.Partial("CommonView", 2)Di2015NewLine    @*Some other data...*@Di2015NewLine</div>Di2015NewLine<div id=element3>Di2015NewLine    @Htm.Partial("CommonView", 3)Di2015NewLine    @*More other data...*@        Di2015NewLine</div>Di2015NewLine
18386310Di2015UniqueSeparatorelement
18386310Di2015UniqueSeparatorparent
18386310Di2015UniqueSeparatorXmlNodeList XMLChilds = XMLDocument.SelectNodes("toolbox/parent[@caption='" + Parent_Caption  + "']/element");Di2015NewLine
18386310Di2015UniqueSeparatorXmlNodeList XMLChilds = xmlparent.SelectNodes("element");Di2015NewLine
18386394Di2015UniqueSeparatorform1
18386394Di2015UniqueSeparatorform1
18386394Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    Image CapturedImage;Di2015NewLineDi2015NewLine    public Form1(Image imgObj) //"you need to pass _screenCap to the constructor of Form1"Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        CapturedImage = imgObj; //"which would need to store it in a field"Di2015NewLine    }Di2015NewLine}Di2015NewLine
18386394Di2015UniqueSeparatorpicturebox
18386394Di2015UniqueSeparatorpicturebox.Image = CapturedImage;Di2015NewLine
18386394Di2015UniqueSeparatorScreenCapture
18386394Di2015UniqueSeparatorImage CapturedImageObj = capture.CaptureImage(showCursor, curSize, curPosition, startPoint, Point.Empty, bounds, _screenPath, fi);Di2015NewLine
18386394Di2015UniqueSeparatorform1
18386394Di2015UniqueSeparatorform1 ImageForm = new form1(CapturedImageObj);Di2015NewLine
18386394Di2015UniqueSeparatorform1.Show();Di2015NewLine
18386396Di2015UniqueSeparatorevent
18386396Di2015UniqueSeparatorevent
18386396Di2015UniqueSeparatorevent
18386396Di2015UniqueSeparatorAction
18386396Di2015UniqueSeparatorevent
18386396Di2015UniqueSeparatorDelegate
18386396Di2015UniqueSeparatorevent
18386396Di2015UniqueSeparatorEvent
18386499Di2015UniqueSeparatorint IComparable<Person>.CompareTo(Person p)Di2015NewLine
18386499Di2015UniqueSeparatorIComparable
18386561Di2015UniqueSeparatorMetadataProperty
18386561Di2015UniqueSeparatorMetadataItem.MetadataProperties
18386561Di2015UniqueSeparatorMetadataItem.AddAnnotation
18386561Di2015UniqueSeparatorMetadataItem.RemoveAnnotation
18386695Di2015UniqueSeparatorisiFile.ReadLine()
18386695Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    OpenFileDialog buka = new OpenFileDialog();Di2015NewLine    buka.InitialDirectory = "";Di2015NewLine    buka.Filter = "Text files(*.txt)|*.txt|All files (*.*)|*.*";Di2015NewLine    buka.FilterIndex = 2;Di2015NewLine    buka.RestoreDirectory = true;Di2015NewLine    buka.Title = "Cari";Di2015NewLineDi2015NewLine    buka.ShowDialog();Di2015NewLine    string bukafile = buka.FileName;Di2015NewLine    if (!String.IsNullOrEmpty(bukafile))Di2015NewLine    {Di2015NewLine        StreamReader isiFile = File.OpenText(bukafile);Di2015NewLine        while (isiFile.Peek() != -1)Di2015NewLine        {Di2015NewLine            // use local variable hereDi2015NewLine            string line = isiFile.ReadLine();Di2015NewLine            if (!listBox1.Items.Contains(line))Di2015NewLine            {Di2015NewLine                listBox1.Items.Add(line);Di2015NewLine            }Di2015NewLine        }Di2015NewLine            isiFile.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18386760Di2015UniqueSeparatorRegex regex = new Regex(@"^.*?\\W" + Regex.Escape(wordToFind) + @"\\W.*?$");Di2015NewLine
18386760Di2015UniqueSeparator^
18386760Di2015UniqueSeparator$
18386760Di2015UniqueSeparator.*?
18386760Di2015UniqueSeparator\\W
18386760Di2015UniqueSeparator\\s
18386760Di2015UniqueSeparator\\W
18387051Di2015UniqueSeparatorqueryDatatable = (DataTable)((ReportDataSource)rptViewModel.GetReportDataSources().GetValue(0)).Value;Di2015NewLine
18387162Di2015UniqueSeparatorpublic class MyPackageService : IPackageServiceDi2015NewLine{Di2015NewLine    public MyPackageService(PackageService packageService)Di2015NewLine    {Di2015NewLine        _PackageService = packageService;Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly PackageService _PackageService;Di2015NewLineDi2015NewLine    public void CreatePackage(HttpContextBase context)Di2015NewLine    {Di2015NewLine        _PackageService.CreatePackage(context);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DeletePackage(HttpContextBase context)Di2015NewLine    {Di2015NewLine        _PackageService.DeletePackage(context);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DownloadPackage(HttpContextBase context)Di2015NewLine    {Di2015NewLine        // LOG HEREDi2015NewLine        Log(context);Di2015NewLine        _PackageService.DownloadPackage(context);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void PublishPackage(HttpContextBase context)Di2015NewLine    {Di2015NewLine        _PackageService.PublishPackage(context);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387162Di2015UniqueSeparatorMyPackageService
18387162Di2015UniqueSeparatorpublic static class NuGetRoutes {Di2015NewLineDi2015NewLine    public static void Start() {Di2015NewLine        NinjectBootstrapper.Kernel.Rebind<IPackageService>().To<MyPackageService>();Di2015NewLine        MapRoutes(RouteTable.Routes);Di2015NewLine    }Di2015NewLineDi2015NewLine    //...Di2015NewLine}Di2015NewLine
18387345Di2015UniqueSeparator<Window x:Class="MiscSamples.MVVMDataGrid"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MVVMDataGrid" Height="300" Width="300">Di2015NewLine    <DataGrid ItemsSource="{Binding}" AutoGenerateColumns="False"Di2015NewLine              CanUserAddRows="False">Di2015NewLine        <DataGrid.Columns>Di2015NewLine            <DataGridTextColumn Binding="{Binding Name}"/>Di2015NewLine            <DataGridTemplateColumn>Di2015NewLine                <DataGridTemplateColumn.CellTemplate>Di2015NewLine                    <DataTemplate>Di2015NewLine                        <Grid>Di2015NewLine                            <Button Command="{Binding CancelCommand}" Content="Resend" Di2015NewLine                                    Height="20" Width="45" Margin="0,0,0,0" x:Name="btn" />Di2015NewLine                        </Grid>Di2015NewLineDi2015NewLine                        <DataTemplate.Triggers>Di2015NewLine                            <DataTrigger Binding="{Binding IsRunning}" Value="True">Di2015NewLine                                <Setter TargetName="btn" Property="Content" Value="Cancel"/>Di2015NewLine                            </DataTrigger>Di2015NewLine                        </DataTemplate.Triggers>Di2015NewLineDi2015NewLine                    </DataTemplate>Di2015NewLine                </DataGridTemplateColumn.CellTemplate>Di2015NewLine            </DataGridTemplateColumn>Di2015NewLine        </DataGrid.Columns>Di2015NewLine    </DataGrid>Di2015NewLine</Window>Di2015NewLine
18387345Di2015UniqueSeparatorpublic partial class MVVMDataGrid : WindowDi2015NewLine{Di2015NewLine    public MVVMDataGrid()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        DataContext = Enumerable.Range(1, 5)Di2015NewLine                                .Select(x => new Job {Name = "Job" + x})Di2015NewLine                                .ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387345Di2015UniqueSeparatorpublic class Job: PropertyChangedBaseDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    private bool _isRunning;Di2015NewLine    public bool IsRunningDi2015NewLine    {Di2015NewLine        get { return _isRunning; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _isRunning = value;Di2015NewLine            OnPropertyChanged("IsRunning");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Command CancelCommand { get; set; }Di2015NewLineDi2015NewLine    public Job()Di2015NewLine    {Di2015NewLine        CancelCommand = new Command(() => IsRunning = !IsRunning);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387345Di2015UniqueSeparatorpublic class PropertyChangedBase:INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLine        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387345Di2015UniqueSeparator //Dead-simple implementation of ICommandDi2015NewLine    //Serves as an abstraction of Actions performed by the user via interaction with the UI (for instance, Button Click)Di2015NewLine    public class Command : ICommandDi2015NewLine    {Di2015NewLine        public Action Action { get; set; }Di2015NewLineDi2015NewLine        public void Execute(object parameter)Di2015NewLine        {Di2015NewLine            if (Action != null)Di2015NewLine                Action();Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool CanExecute(object parameter)Di2015NewLine        {Di2015NewLine            return IsEnabled;Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool _isEnabled = true;Di2015NewLine        public bool IsEnabledDi2015NewLine        {Di2015NewLine            get { return _isEnabled; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _isEnabled = value;Di2015NewLine                if (CanExecuteChanged != null)Di2015NewLine                    CanExecuteChanged(this, EventArgs.Empty);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public event EventHandler CanExecuteChanged;Di2015NewLineDi2015NewLine        public Command(Action action)Di2015NewLine        {Di2015NewLine            Action = action;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18387345Di2015UniqueSeparatorFile -> New Project -> WPF Application
18387429Di2015UniqueSeparatorfunction encodeBody() {Di2015NewLine    document.getElementById(hiddenfield).value = encodeURI(document.getElementById(txtBodyID).value);Di2015NewLine}Di2015NewLine
18387489Di2015UniqueSeparatorpublic class CustomContactDi2015NewLine{Di2015NewLine   public string Name { get; set; }Di2015NewLine   public string Number { get; set; }Di2015NewLineDi2015NewLine   public CustomContact()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    //CTOR that takes in a Contact object and extract the two fields we need (can add more fields)Di2015NewLine    public CustomContact(Contact contact)Di2015NewLine    {Di2015NewLine        DisplayName = contact.DisplayName;Di2015NewLine        var number = contact.PhoneNumbers.FirstOrDefault();Di2015NewLine        if(number != null)Di2015NewLine            Number = number.PhoneNumber;Di2015NewLine        elseDi2015NewLine            Number = "";Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387489Di2015UniqueSeparatorList<CustomContact> listOfContacts = new List<CustomContact>();Di2015NewLineforeach (var c in e.Results)Di2015NewLine{Di2015NewLine    CustomContact contact  = new CustomContact();Di2015NewLine    contact.DisplayName = c.DisplayName;Di2015NewLine    var number = c.PhoneNumbers.FirstOrDefault(); //change this to whatever number you wantDi2015NewLine    if (number != null)Di2015NewLine        contact.Number = number.PhoneNumber;Di2015NewLine    elseDi2015NewLine        contact.Number = "";Di2015NewLineDi2015NewLine    listOfContacts.Add(contact);Di2015NewLine}Di2015NewLineContactResultsData.DataContext = listOfContacts;Di2015NewLine
18387489Di2015UniqueSeparatorforeach
18387489Di2015UniqueSeparatorlistOfContacts = e.Results.Select(x => new CustomContact() Di2015NewLine                                  { Di2015NewLine                                     Number = x.PhoneNumbers.FirstOrDefault() != null ? x.PhoneNumbers.FirstOrDefault().PhoneNumber : "", Di2015NewLine                                     DisplayName = x.DisplayName Di2015NewLine                                  }).ToList();Di2015NewLine
18387489Di2015UniqueSeparatorContact
18387489Di2015UniqueSeparatorCustomContact
18387489Di2015UniqueSeparatorContact
18387489Di2015UniqueSeparatorContact
18387489Di2015UniqueSeparatorCustomContact
18387489Di2015UniqueSeparatorprivate void ContactResultsData_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine    Contact contact = ContactResultsData.SelectedItem as Contact;Di2015NewLine    if (contact != null)Di2015NewLine    {Di2015NewLine        CustomContact customContact = new CustomContact(contact);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18387548Di2015UniqueSeparator List<String> permutations(String original, int numberOfWildcards) {Di2015NewLine        //add 1 more wildcard to each posible position in the original stringDi2015NewLine        List<String> perm = new List<String>();Di2015NewLine        for (int i = 0; i < original.Length; ++i)Di2015NewLine        {Di2015NewLine            if (original[i] != '_')Di2015NewLine                perm.Add(original.Substring(0, i) + "_" + original.Substring(i + 1, original.Length));Di2015NewLine        }Di2015NewLine        if ( numberOfWildcards == 1)Di2015NewLine        {Di2015NewLine              return perm;Di2015NewLine        }Di2015NewLineDi2015NewLine        //now if we need to search deeper we recusively do this for each substringDi2015NewLine        List<String> permWithMoreWildmark = new List<String>();Di2015NewLine        foreach (var str in perm)Di2015NewLine        {Di2015NewLine            permWithMoreWildmark.AddRange(permutations(str,numberOfWildcards-1));Di2015NewLine        }Di2015NewLine        return permWithMoreWildmark;Di2015NewLine    } Di2015NewLine
18387554Di2015UniqueSeparatorvar carTurns = new[] { ct1, ct2, ct3, ct4 };Di2015NewLinevar groupedCarTurns = carTurns.GroupBy(ct => ct.Car);Di2015NewLinevar oneSideCount = groupedCarTurns.Count(group =>Di2015NewLine    group.All(ct => ct.Turn == right) ||Di2015NewLine    group.All(ct => ct.Turn == left);Di2015NewLinevar bothSides = groupedCarTurns.Count(group =>Di2015NewLine    group.Any(ct => ct.Turn == right) &&Di2015NewLine    group.Any(ct => ct.Turn == left);Di2015NewLine
18387732Di2015UniqueSeparatorstring mailbox = _mailBoxTextBox.Text;Di2015NewLine...Di2015NewLinepowershell.AddParameter("Mailbox", mailbox);Di2015NewLine
18387765Di2015UniqueSeparatorprivate async void Update(...)Di2015NewLine{Di2015NewLine    //... do some stuff ... Di2015NewLine   await _repository.Save(listing);Di2015NewLine}Di2015NewLineDi2015NewLineprotected override async Task Save(...)Di2015NewLine{Di2015NewLineDi2015NewLine        ... do some stuff ...Di2015NewLine        _logger.Debug("All Done!!!");Di2015NewLine}Di2015NewLine
18387805Di2015UniqueSeparatorpublic void Test()Di2015NewLine{Di2015NewLine  MyMembershipProvider provider = new MyMembershipProvder();Di2015NewLine  provider.UserRepository = mock.Object;Di2015NewLineDi2015NewLine  // Do test stuff hereDi2015NewLineDi2015NewLine  // Verify mock conditionsDi2015NewLine}Di2015NewLine
18387890Di2015UniqueSeparatorTestStrings.txt
18387890Di2015UniqueSeparatorstring myString = File.ReadAllText(@"TestStrings.txt");         Di2015NewLineDi2015NewLinevar myStringRef = new WeakReference(myString);Di2015NewLinemyString = null;Di2015NewLineDi2015NewLineGC.Collect();Di2015NewLineAssert.IsFalse(myStringRef.IsAlive);Di2015NewLine
18387953Di2015UniqueSeparator  public partial class Form1 : FormDi2015NewLine  {Di2015NewLine    System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer { Interval = 2000 };Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        ShowForm3();Di2015NewLine        (new Form2()).ShowDialog(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    void ShowForm3()Di2015NewLine    {Di2015NewLine        Form3 f3 = new Form3();Di2015NewLine        f3.Show();Di2015NewLine        timer.Tick += (sender, e) => f3.Close();Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLine  }Di2015NewLine
18387960Di2015UniqueSeparatormymethod(string param1, bool param2)Di2015NewLine
18387960Di2015UniqueSeparatormymethod(string param1, bool param2, bool hasParam2)Di2015NewLine
18388491Di2015UniqueSeparatorasync
18388491Di2015UniqueSeparatorawait
18388491Di2015UniqueSeparatorTask.WaitAll
18388520Di2015UniqueSeparator// Load the style sheet.Di2015NewLineXslCompiledTransform xslt = new XslCompiledTransform();Di2015NewLinexslt.Load("xsl_style_sheet");Di2015NewLineDi2015NewLine// Create the writer.Di2015NewLineXmlWriterSettings settings = new XmlWriterSettings();Di2015NewLinesettings.Indent = true;Di2015NewLinesettings.IndentChars = "\\t";Di2015NewLineusing(XmlWriter writer = XmlWriter.Create("fullpath/transformedFileName", settings))Di2015NewLine{Di2015NewLine   using(XmlReader reader = XmlReader.Create("fullpath/xmlfilename"))Di2015NewLine   {Di2015NewLine     reader.MoveToContent();Di2015NewLine     xslt.Transform(reader, writer);Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineusing(XmlReader reader = XmlReader.Create("fullpath/transformedFileName"))Di2015NewLine{Di2015NewLine   XElement xEle = XElement.Load(reader);Di2015NewLine   // do all other stuff you need to do hereDi2015NewLineDi2015NewLineDi2015NewLine   // after this the file will be closedDi2015NewLine}Di2015NewLine
18388556Di2015UniqueSeparatorpublic event EventHandler SomeEvent;
18388556Di2015UniqueSeparatorSubscribersClass
18388556Di2015UniqueSeparatorpublisher
18388556Di2015UniqueSeparatorsubscriber
18388556Di2015UniqueSeparatoradd
18388556Di2015UniqueSeparatorremove
18388556Di2015UniqueSeparatorGC.Collect
18388583Di2015UniqueSeparatorif(!File.Exists(FilePath)){Di2015NewLine    File.Create(FilePath).Close();}Di2015NewLine    File.WriteAllText(FileText);Di2015NewLine
18388644Di2015UniqueSeparatordomain account
18388973Di2015UniqueSeparatorListB.Where(x=>FilterListA.Any(y=>y==x.ClassA));Di2015NewLine
18388973Di2015UniqueSeparatorContains
18388973Di2015UniqueSeparatorListB.Where(x=>FilterListA.Contains(x.ClassA));Di2015NewLine
18389126Di2015UniqueSeparatorDispose(bool)
18389126Di2015UniqueSeparatorSqlTransaction
18389126Di2015UniqueSeparator// System.Data.SqlClient.SqlTransactionDi2015NewLineprotected override void Dispose(bool disposing)Di2015NewLine{Di2015NewLine    if (disposing)Di2015NewLine    {Di2015NewLine        SNIHandle target = null;Di2015NewLine        RuntimeHelpers.PrepareConstrainedRegions();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            target = SqlInternalConnection.GetBestEffortCleanupTarget(this._connection);Di2015NewLine            if (!this.IsZombied && !this.IsYukonPartialZombie)Di2015NewLine            {Di2015NewLine                this._internalTransaction.Dispose();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (OutOfMemoryException e)Di2015NewLine        {Di2015NewLine            this._connection.Abort(e);Di2015NewLine            throw;Di2015NewLine        }Di2015NewLine        catch (StackOverflowException e2)Di2015NewLine        {Di2015NewLine            this._connection.Abort(e2);Di2015NewLine            throw;Di2015NewLine        }Di2015NewLine        catch (ThreadAbortException e3)Di2015NewLine        {Di2015NewLine            this._connection.Abort(e3);Di2015NewLine            SqlInternalConnection.BestEffortCleanup(target);Di2015NewLine            throw;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    base.Dispose(disposing);Di2015NewLine}Di2015NewLine
18389126Di2015UniqueSeparatorthis._internalTransaction.Dispose();
18389126Di2015UniqueSeparatorGetBestEffortCleanupTarget
18389126Di2015UniqueSeparatorZombied
18389126Di2015UniqueSeparatorRollback
18389126Di2015UniqueSeparator_internalTransaction.Dispose()
18389126Di2015UniqueSeparatorfalse
18389126Di2015UniqueSeparatorRollback()
18389190Di2015UniqueSeparatorDataGrid
18389190Di2015UniqueSeparator<Button/>Di2015NewLine<Button/>Di2015NewLine
18389190Di2015UniqueSeparatorControlTemplate
18389190Di2015UniqueSeparator<Border Name="bd" Background="{TemplateBinding Background}">...</Border>Di2015NewLine<Border Name="bd" Background="{TemplateBinding Background}">...</Border>Di2015NewLine
18389190Di2015UniqueSeparatorDataTemplates
18389190Di2015UniqueSeparatorItemsControls
18389190Di2015UniqueSeparator<TextBox Name="tb" Text="Test"/>Di2015NewLine<ItemsControl ItemsSource="ABC">Di2015NewLine    <ItemsControl.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding Text, ElementName=tb}"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </ItemsControl.ItemTemplate>Di2015NewLine</ItemsControl>Di2015NewLine
18389323Di2015UniqueSeparatorleft
18389323Di2015UniqueSeparatorright
18389323Di2015UniqueSeparatorleft
18389323Di2015UniqueSeparatorright
18389323Di2015UniqueSeparatorif (left < right)Di2015NewLine{Di2015NewLine    int temp = myArray[right];Di2015NewLine    myArray[right] = myArray[left];Di2015NewLine    myArray[left] = temp;Di2015NewLine    left++;Di2015NewLine    right--;Di2015NewLine}Di2015NewLine
18389323Di2015UniqueSeparatormyArray[left]
18389323Di2015UniqueSeparatorpivot
18389323Di2015UniqueSeparatormyArray[right]
18389323Di2015UniqueSeparatorpivot
18389323Di2015UniqueSeparatorleft
18389323Di2015UniqueSeparatorright
18389323Di2015UniqueSeparatorwhile (true)
18389323Di2015UniqueSeparatorwhile
18389323Di2015UniqueSeparatorif
18389323Di2015UniqueSeparatorleft
18389323Di2015UniqueSeparatorright
18389323Di2015UniqueSeparatorlength
18389323Di2015UniqueSeparatorlengthTwo
18389323Di2015UniqueSeparatorlength
18389393Di2015UniqueSeparatorclass MyClass Di2015NewLine{Di2015NewLine    public static implicit operator MyClass(DateTime date)Di2015NewLine    {Di2015NewLine         return new MyClass ();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18389393Di2015UniqueSeparatorDateTime
18389393Di2015UniqueSeparatorDateTime
18389393Di2015UniqueSeparatorMyClass
18389393Di2015UniqueSeparatorDateTime?
18389393Di2015UniqueSeparatorMyClass
18389393Di2015UniqueSeparatorDateTime? nullableDateTime = XXX;Di2015NewLineMyClass myClass = nullableDateTime;  // implicit conversion from nullable!Di2015NewLine
18389393Di2015UniqueSeparatorS
18389393Di2015UniqueSeparatorT
18389393Di2015UniqueSeparatorS
18389393Di2015UniqueSeparatorDateTime?
18389393Di2015UniqueSeparatorT
18389393Di2015UniqueSeparatorMyClass
18389393Di2015UniqueSeparatorS0
18389393Di2015UniqueSeparatorSx
18389393Di2015UniqueSeparatorDateTime
18389393Di2015UniqueSeparatornullableDateTime
18389393Di2015UniqueSeparatornullableDateTime
18389393Di2015UniqueSeparatormyClass
18389393Di2015UniqueSeparatornull
18389393Di2015UniqueSeparatornull
18389393Di2015UniqueSeparatornull
18389393Di2015UniqueSeparatornull
18389393Di2015UniqueSeparatornull
18389431Di2015UniqueSeparatorTimer timer = new Timer();Di2015NewLine
18389431Di2015UniqueSeparatortimer.Tick += new EventHandler(timer_Tick); Di2015NewLinetimer.Interval = (1000 * 60 * 5);           Di2015NewLinetimer.Enabled = true;       Di2015NewLinetimer.Start();           Di2015NewLine
18389431Di2015UniqueSeparatorvoid timer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //run query, play noiseDi2015NewLine}Di2015NewLine
18389506Di2015UniqueSeparator((Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[myRow, 25]).Value2 = Di2015NewLinerawDTCs[x];Di2015NewLine
18389515Di2015UniqueSeparatorpublic static IHtmlString MyHelperFor<TModel, TValue>(Di2015NewLine    this HtmlHelper<TModel> html, Di2015NewLine    Expression<Func<TModel, TValue>> expressionDi2015NewLine)Di2015NewLine{Di2015NewLine    var metadata = ModelMetadata.FromLambdaExpression(expression, html.ViewData);Di2015NewLine    string name = metadata.DisplayName;Di2015NewLineDi2015NewLine    return new HtmlString(string.Format("<th>{0}</th>", html.Encode(name)));Di2015NewLine}Di2015NewLine
18389515Di2015UniqueSeparator@model MyViewModelDi2015NewLine...Di2015NewLine@Html.MyHelperFor(x => x.SomeProperty)Di2015NewLine
18389515Di2015UniqueSeparatorSomeProperty
18389515Di2015UniqueSeparator[Display]
18389515Di2015UniqueSeparator[DisplayName]
18389515Di2015UniqueSeparator[DisplayName("foo bar")]Di2015NewLinepublic string SomeProperty { get; set; }Di2015NewLine
18389515Di2015UniqueSeparator[Display(Name = "foo bar")]Di2015NewLinepublic string SomeProperty { get; set; }Di2015NewLine
18389515Di2015UniqueSeparator<th>foo bar</th>Di2015NewLine
18389617Di2015UniqueSeparatorDictionary<string,Thumbnail>Di2015NewLine
18389627Di2015UniqueSeparatorHTML Agility Pack
18389627Di2015UniqueSeparatorthis post
18389631Di2015UniqueSeparatorJoin
18389631Di2015UniqueSeparatorJoin
18389631Di2015UniqueSeparatorvar stateCityPairs = from state in finalListDi2015NewLine                        join city in cityListDi2015NewLine                        on state.IdState equals city.IdStateDi2015NewLine                        select new { state, city };Di2015NewLineDi2015NewLineforeach (var pair in stateCityPairs)Di2015NewLine    pair.state.AddCity(pair.city);Di2015NewLineDi2015NewLineDi2015NewLinevar cityCompanyPairs = from city in cityListDi2015NewLine                        join company in companyListDi2015NewLine                        on city.IdCity equals company.IdCityDi2015NewLine                        select new { city, company };Di2015NewLineDi2015NewLineforeach (var pair in cityCompanyPairs)Di2015NewLine    pair.city.AddCompany(pair.company);Di2015NewLine
18389752Di2015UniqueSeparatorList<List<string>> rows = (from myRow in data.AsEnumerable()Di2015NewLine                            select new List<string> {myRow["FirstName"].ToString(),Di2015NewLine                                myRow["LastName"].ToString(),Di2015NewLine                                myRow["Department"].ToString(),Di2015NewLine                                myRow["Birthdate"].ToString(),Di2015NewLine                                myRow["Description"].ToString()Di2015NewLine                            }).ToList();Di2015NewLine
18389852Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class QuestConf:List<object>Di2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public Question question { get; set; }Di2015NewLine    [DataMember]Di2015NewLine    public List<Answer> answers { get; set; }Di2015NewLine}Di2015NewLine
18390129Di2015UniqueSeparatormsbuild.exe [your app with necessary options]Di2015NewLineC:/mongodb/bin/mongod.exe [options]Di2015NewLine
18390272Di2015UniqueSeparatorpublic UserModels(string id, string searchcriteria) Di2015NewLine{Di2015NewLine    // your code hereDi2015NewLine}Di2015NewLine
18390272Di2015UniqueSeparatorpublic List<UserData> GetUserModels(string id, string searchcriteria) Di2015NewLine{    Di2015NewLine    SSO_Methods sso = new SSO_Methods();Di2015NewLine    List<UserData> userObject = sso.GetUserObject(id, searchcriteria);Di2015NewLine    return userObject;Di2015NewLine}Di2015NewLine
18390450Di2015UniqueSeparatorforeach (var emailJob in db.Emailing_SelectSend(1))Di2015NewLine
18390450Di2015UniqueSeparator// MockDB is a static configured as `MockDB.Enqueue(new EmailJob{Id = 1})`Di2015NewLineDi2015NewLineprivate static IEnumerable<EmailJob> GetJobFromDB()Di2015NewLine{Di2015NewLine    return new List<EmailJob>{MockDB.Peek()};Di2015NewLine}Di2015NewLine
18390450Di2015UniqueSeparatorprivate static IEnumerable<EmailJob> GetJobFromDB()Di2015NewLine{Di2015NewLine    var list = new List<EmailJob>();Di2015NewLineDi2015NewLine    if (MockDB.Any())Di2015NewLine        list.Add(MockDB.Dequeue());Di2015NewLineDi2015NewLine    return list;Di2015NewLine}Di2015NewLine
18390479Di2015UniqueSeparatorpublic partial class App : ApplicationDi2015NewLine{Di2015NewLine    public NotificationIcon NotifyIcon {get;set;}Di2015NewLineDi2015NewLine    protected override void OnStartup(StartupEventArgs e)Di2015NewLine    {Di2015NewLine        base.OnStartup(e);Di2015NewLineDi2015NewLine        NotifyIcon = new NotificationIcon();Di2015NewLine        NotifyIcon.ApplicationExit += notificationIcon_ApplicationExit;Di2015NewLine    }Di2015NewLineDi2015NewLine    void notificationIcon_ApplicationExit(object sender, EventArgs eventArgs)Di2015NewLine    {Di2015NewLine        Application.Current.Shutdown();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18390727Di2015UniqueSeparatorConsole.Write("Number = ");Di2015NewLineint n = int.Parse(Console.ReadLine());Di2015NewLinestring counter = "";Di2015NewLineDi2015NewLinewhile (n >= 1)Di2015NewLine{Di2015NewLine   counter = (n % 2) + counter;Di2015NewLine   n = n / 2;Di2015NewLine}Di2015NewLineConsole.Write(counter);Di2015NewLine
18390753Di2015UniqueSeparatorpublic class PlaceDi2015NewLine{Di2015NewLine    private string[][] places = new string[2][]Di2015NewLine    {Di2015NewLine        new string[] { "Canada", "United States" },Di2015NewLine        new string[] { "Calgary", "Edmonton", "Toronto" },Di2015NewLine    };Di2015NewLineDi2015NewLine    public void enumerate()Di2015NewLine    {Di2015NewLine        Console.WriteLine(places[0][1]);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18390966Di2015UniqueSeparatorFooWrapper
18390966Di2015UniqueSeparatorFoo
18390966Di2015UniqueSeparatoris
18390966Di2015UniqueSeparatoras
18390966Di2015UniqueSeparatoris
18390966Di2015UniqueSeparatorfrob
18390966Di2015UniqueSeparatoras
18390966Di2015UniqueSeparatorx frob Foo
18390966Di2015UniqueSeparatorFoo
18390966Di2015UniqueSeparatorx
18390966Di2015UniqueSeparatorFooWrapper
18391262Di2015UniqueSeparator   private string _pinMessafe;Di2015NewLine     public string pinmesssageDi2015NewLine     {Di2015NewLine         get {Di2015NewLine             if (_pinMessafe != null)Di2015NewLine                 return _pinMessafe;Di2015NewLine                                }Di2015NewLine         set { _pinMessafe = value; }Di2015NewLine     }Di2015NewLine
18391262Di2015UniqueSeparator   private string _pinMessafe;Di2015NewLine     public string pinmesssageDi2015NewLine     {Di2015NewLine         get {Di2015NewLine             return _pinMessafe ?? GetMessage()Di2015NewLine         }Di2015NewLine         set { _pinMessafe = value; }Di2015NewLine     }Di2015NewLine
18391262Di2015UniqueSeparatorGetMessage()
18391343Di2015UniqueSeparatorpublic
18391343Di2015UniqueSeparatorprivate
18391423Di2015UniqueSeparatorprivate void FitToContent()Di2015NewLine    {Di2015NewLine        int numCols ;Di2015NewLine        int i ;Di2015NewLineDi2015NewLine        numCols = dg.Columns.Count() ;Di2015NewLine        i = 0 ;Di2015NewLineDi2015NewLine        // where dg is your data grid's name...Di2015NewLine        foreach (DataGridColumn column in dg.Columns)Di2015NewLine        {Di2015NewLine            if(i < numCols - 1)Di2015NewLine            { Di2015NewLine                //if you want to size ur column as per the cell contentDi2015NewLine                column.Width = new DataGridLength(1.0, DataGridLengthUnitType.SizeToCells);Di2015NewLine                //if you want to size ur column as per the column headerDi2015NewLine                column.Width = new DataGridLength(1.0, DataGridLengthUnitType.SizeToHeader);Di2015NewLine                //if you want to size ur column as per both header and cell contentDi2015NewLine                column.Width = new DataGridLength(1.0, DataGridLengthUnitType.Auto);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                column.Width = new DataGridLength(1.0, DataGridLengthUnitType.Star);Di2015NewLine            }Di2015NewLine            i++ ;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18391467Di2015UniqueSeparatorChannelFactory
18391467Di2015UniqueSeparatorChannelFactory
18391467Di2015UniqueSeparatorChannel
18391467Di2015UniqueSeparatorprivate CachedWebServiceChannelFactory<ICmsDataServiceWcf> factory;Di2015NewLineDi2015NewLinepublic ICmsDataServiceWcf GetDataService()Di2015NewLine{Di2015NewLine    if (factory == null) // or factory needs rebuildingDi2015NewLine    {Di2015NewLine        string url = ConfigurationManager.AppSettings["service_url"];Di2015NewLine        EndpointAddress endPoint = new EndpointAddress(url);Di2015NewLine        var binding = new WSHttpBinding(SecurityMode.None);Di2015NewLineDi2015NewLine        factory = new CachedWebServiceChannelFactory<ICmsDataServiceWcf>Di2015NewLine            (binding, endPoint);Di2015NewLine    }Di2015NewLineDi2015NewLine    return factory.CreateChannel();Di2015NewLine}Di2015NewLine
18391467Di2015UniqueSeparatorusing
18391467Di2015UniqueSeparatorusing (var client = GetDataService())Di2015NewLine{Di2015NewLine    // do stuffDi2015NewLine} // client will be disposed upon reaching the end of the using blockDi2015NewLine
18391520Di2015UniqueSeparatorEPPlus\\Drawings\\ExcelDrawings.cs
18391520Di2015UniqueSeparatorpublic ExcelShape CloneShape(string SourceName, string TargetName)Di2015NewLine{Di2015NewLine    if ( _drawingNames.ContainsKey(TargetName.ToLower()))Di2015NewLine    {Di2015NewLine        throw new Exception("Target name already exists in the drawings collection");Di2015NewLine    }Di2015NewLineDi2015NewLine    if (!_drawingNames.ContainsKey(SourceName.ToLower()))Di2015NewLine    {Di2015NewLine        throw new Exception("Source shape does not exist in the drawings collection");Di2015NewLine    }Di2015NewLineDi2015NewLine    ExcelShape shape = new ExcelShape(this, this._drawingsXml,Di2015NewLine                               (ExcelShape) this[SourceName]);Di2015NewLine    shape.Name = TargetName;Di2015NewLine    _drawings.Add(shape);Di2015NewLine    _drawingNames.Add(TargetName.ToLower(), _drawings.Count - 1);Di2015NewLine    return shape;Di2015NewLine}Di2015NewLine
18391520Di2015UniqueSeparatorExcelShape.cs
18391520Di2015UniqueSeparatorinternal ExcelShape(ExcelDrawings drawings, XmlDocument DrawingsXml, ExcelShape shapeSource) :Di2015NewLine            base(drawings, shapeSource._topNode.Clone(), "xdr:sp/xdr:nvSpPr/xdr:cNvPr/@name")Di2015NewLineDi2015NewLine{Di2015NewLine     this.init();Di2015NewLine     XmlNode colNode = DrawingsXml.SelectSingleNode("//xdr:wsDr", NameSpaceManager);             Di2015NewLine     colNode.AppendChild(this._topNode);Di2015NewLine}Di2015NewLine
18391549Di2015UniqueSeparatorExecuteScalar()
18391549Di2015UniqueSeparatorExecute()
18391553Di2015UniqueSeparatorSelectionChanged
18391553Di2015UniqueSeparatorLongListSelectorSelectionChanged()Di2015NewLineDi2015NewLine  - if(SelectedItem in LIST2)Di2015NewLineDi2015NewLine    Display quantity in the textboxDi2015NewLine    returnDi2015NewLineDi2015NewLine  - else Di2015NewLineDi2015NewLine    Add the SelectedItem in the LIST2Di2015NewLine    returnDi2015NewLine
18391590Di2015UniqueSeparatordouble
18391590Di2015UniqueSeparatormovsx rax, dword ptr[rsp+<offset>]Di2015NewLine
18391598Di2015UniqueSeparatorApplicaiton.Run
18391598Di2015UniqueSeparatorNavigate
18391598Di2015UniqueSeparatorDocumentCompleted
18391680Di2015UniqueSeparatorpublic interface IDataDi2015NewLine{Di2015NewLine    String Name { get; set; }Di2015NewLine}Di2015NewLine
18391680Di2015UniqueSeparatorpublic interface ISettableDataDi2015NewLine{Di2015NewLine    String Name { set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IData : ISettableDataDi2015NewLine{Di2015NewLine    String Name { get; set; }Di2015NewLine}Di2015NewLine
18391680Di2015UniqueSeparatorpublic class Data1 : IDataDi2015NewLine{Di2015NewLine    public String Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Data2 : ISettableDataDi2015NewLine{Di2015NewLine    public String Name { set; }Di2015NewLine}Di2015NewLine
18391698Di2015UniqueSeparatordelegate
18391698Di2015UniqueSeparatordelegate
18391698Di2015UniqueSeparatorpublic delegate bool ShowMessageBoxDelegate(string text);Di2015NewLine
18391698Di2015UniqueSeparatordelegate
18391698Di2015UniqueSeparatorpublic ShowMessageBoxDelegate ShowMessageBoxDelegateProperty { get; set; }Di2015NewLine
18391698Di2015UniqueSeparatorShowMessageBox
18391698Di2015UniqueSeparatordelegate
18391698Di2015UniqueSeparatorpublic bool ShowMessageBox(string text)Di2015NewLine{Di2015NewLine    var result = MessageBox.Show(text, "", MessageBoxButton.YesNo);Di2015NewLine    if (result.Equals(MessageBoxResult.Yes))Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
18391698Di2015UniqueSeparatorShowMessageBoxDelegateProperty
18391698Di2015UniqueSeparatorShowMessageBoxDelegateProperty = ShowMessageBox;Di2015NewLine
18391698Di2015UniqueSeparatordelegate
18391698Di2015UniqueSeparatorShowMessageBoxDelegateProperty += ShowMessageBox;Di2015NewLine
18391698Di2015UniqueSeparatorpublic void ProxyShowMessageBox(ShowMessageBoxDelegate showMessageBoxDelegate)Di2015NewLine{Di2015NewLine    if (showMessageBoxDelegate != null)Di2015NewLine    {Di2015NewLine        bool result = showMessageBoxDelegate("MessageBox message");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18391698Di2015UniqueSeparatorProxyShowMessageBox(ShowMessageBox);Di2015NewLine
18391716Di2015UniqueSeparatorfor(int i = args[0].Length; i >= 1; i--)
18391716Di2015UniqueSeparatorfor(int i = args[0].Length - 1; i >= 0; i--)
18391722Di2015UniqueSeparatorUriBuilder
18391722Di2015UniqueSeparatorpublic Uri BuildUri() Di2015NewLine{Di2015NewLine    var viewType = ViewLocator.LocateTypeForModelType(typeof(TViewModel), null, null);Di2015NewLineDi2015NewLine    if(viewType == null) Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException(string.Format("No view was found for {0}. See the log for searched views.", typeof(TViewModel).FullName));Di2015NewLine    }Di2015NewLineDi2015NewLine    var packUri = ViewLocator.DeterminePackUriFromType(typeof(TViewModel), viewType);Di2015NewLine    var qs = BuildQueryString();Di2015NewLineDi2015NewLine    return new Uri(packUri + qs, UriKind.Relative);Di2015NewLine}Di2015NewLine
18391722Di2015UniqueSeparatornavigationService
18391722Di2015UniqueSeparatorMakeGenericMethod
18391722Di2015UniqueSeparatortypeof
18391722Di2015UniqueSeparatorviewModel.GetType()
18391728Di2015UniqueSeparatorAssert.Ignore()
18391728Di2015UniqueSeparatorAssert.Inconclusive()
18392157Di2015UniqueSeparator[namespace A]Di2015NewLinePage.aspx Di2015NewLinePage.aspx.csDi2015NewLinePage.aspx.designer.csDi2015NewLine
18392157Di2015UniqueSeparator[namespace B]Di2015NewLinePage.aspx Di2015NewLinePage.aspx.csDi2015NewLinePage.aspx.designer.csDi2015NewLine
18392157Di2015UniqueSeparator[namespace COMMON]Di2015NewLinePage.csDi2015NewLine
18392157Di2015UniqueSeparator<%@ Page Title="Page" Language="C#" MasterPageFile="~/Page.Master" AutoEventWireup="true" CodeBehind="Page.aspx.cs" Inherits="Project.A.Page" %>Di2015NewLine<asp:Content ID="ContentB" ContentPlaceHolderID="cBody" runat="server">Di2015NewLine    <asp:TextBox ID="txbTest" runat="server" MaxLength="75"></asp:TextBox>Di2015NewLine</asp:Content>Di2015NewLine
18392157Di2015UniqueSeparatornamespace Project.ADi2015NewLine{Di2015NewLine    public partial class Page: BasePageDi2015NewLine    {Di2015NewLine        protected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.txbTest.Text = "Hello";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18392157Di2015UniqueSeparatornamespace Project.A {Di2015NewLine    public partial class Page{Di2015NewLine        protected global::System.Web.UI.WebControls.TextBox txbTest;                Di2015NewLine    }Di2015NewLine}Di2015NewLine
18392157Di2015UniqueSeparator<%@ Page Title="Page" Language="C#" MasterPageFile="~/Page.Master" AutoEventWireup="true" CodeBehind="Page.cs" Inherits="Project.COMMON.Page" %>Di2015NewLine<asp:Content ID="ContentB" ContentPlaceHolderID="cBody" runat="server">Di2015NewLine    <asp:TextBox ID="txbTest" runat="server" MaxLength="75"></asp:TextBox>Di2015NewLine</asp:Content>Di2015NewLine
18392157Di2015UniqueSeparatornamespace Project.COMMONDi2015NewLine{Di2015NewLine    public partial class Page: BasePageDi2015NewLine    {Di2015NewLine        protected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.txbTest.Text = "Hello";Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public partial class Page{Di2015NewLine        protected global::System.Web.UI.WebControls.TextBox txbTest;                Di2015NewLine    }Di2015NewLine}`enter code here`Di2015NewLine
18392157Di2015UniqueSeparator~/A/Page.aspxDi2015NewLine~/B/Page.aspxDi2015NewLine~/COMMON/Page.csDi2015NewLine
18392183Di2015UniqueSeparatorWHERE length(signature) BETWEEN 6 AND 8 AND signature LIKE 'ABCCBAA'Di2015NewLine
18392183Di2015UniqueSeparatorOR length(signature) BETWEEN 6 AND 8
18392183Di2015UniqueSeparatorstring sql = @"SELECT * FROM signatures Di2015NewLine               WHERE length(signature) BETWEEN 6 AND 8 Di2015NewLine               AND (signature LIKE 'ABCCBAA' OR signature LIKE '_BCCBAA' ...)";Di2015NewLine
18392190Di2015UniqueSeparatorWeed
18392190Di2015UniqueSeparator[DataContract]
18392190Di2015UniqueSeparatorDataContractSerializer
18392466Di2015UniqueSeparator[DataContract(IsReference = true)]
18392466Di2015UniqueSeparator[Serializable]Di2015NewLine[DataContract(IsReference = true)]Di2015NewLinepublic class WeedFamilyDi2015NewLineDi2015NewLine[Serializable]Di2015NewLine[DataContract(IsReference = true)]Di2015NewLinepublic class WeedDi2015NewLine
18392633Di2015UniqueSeparator // Given a distance function:Di2015NewLine double DistSq(float[] point1, float[] point2)Di2015NewLine {Di2015NewLine      return (point1[0] - point2[0]) * (point1[0] - point2[0]) Di2015NewLine      + (point1[1] - point2[1]) * (point1[1] - point2[1]) Di2015NewLine      + (point1[2] - point2[2]) * (point1[2] - point2[2]); Di2015NewLine }Di2015NewLine
18392633Di2015UniqueSeparator distance = 5; // How far apart can 2 points be...Di2015NewLine double distSq = distance * distance;Di2015NewLine var pointsWithoutOutliers = Positions.Where(p => Positions.Any(o => !Object.ReferenceEquals(o,p) && DistSq(p,0)<distSq));Di2015NewLine
18392731Di2015UniqueSeparatorvar app = angular.module('app', ['ui.select2', 'ui.bootstrap'])Di2015NewLine    .config(['$httpProvider', function ($httpProvider) {Di2015NewLine        delete $httpProvider.defaults.headers.common['X-Requested-With'];Di2015NewLine        $httpProvider.defaults.transformRequest = function (data) {Di2015NewLine            if (data === undefined) {Di2015NewLine                return data;Di2015NewLine            }Di2015NewLine            return $.param(data);Di2015NewLine        };Di2015NewLine}]);Di2015NewLine
18392753Di2015UniqueSeparator        [HttpGet]Di2015NewLine        public ActionResult Edit(int id)Di2015NewLine        {Di2015NewLine            DbUser editedDbUser = context.Users.Single(x => x.UserId == id);Di2015NewLine            User editeduser = Mapper.Map<DbUser, User>(editedDbUser);Di2015NewLine            return View("AccountInfo", editeduser);Di2015NewLine        }Di2015NewLine
18392753Di2015UniqueSeparator            <tr>Di2015NewLine                <td>@(i + 1)</td>Di2015NewLine                <td>@usersModel[i].LastName</td>Di2015NewLine                <td>@usersModel[i].FirstName</td>Di2015NewLine                <td>@usersModel[i].Email</td>Di2015NewLine                <td>@Html.ActionLink("Edit", "Edit", new { id = @usersModel[i].UserId })</td>Di2015NewLine            </tr>Di2015NewLine
18392753Di2015UniqueSeparatorpublic class UsersDi2015NewLine    {Di2015NewLine        public List<User> UsersBag { get; set; }Di2015NewLine    }Di2015NewLine
18392823Di2015UniqueSeparator var client = new GwebSearchClient("http://www.google.com");Di2015NewLine        var results = client.Search("google api for .NET", 100);Di2015NewLine        foreach (var webResult in results)Di2015NewLine        {Di2015NewLine            //Console.WriteLine("{0}, {1}, {2}", webResult.Title, webResult.Url, webResult.Content);Di2015NewLine            listBox1.Items.Add(webResult.ToString ());Di2015NewLine        }Di2015NewLine
18392936Di2015UniqueSeparatorCryptoStream
18392936Di2015UniqueSeparatorBinaryWriter
18393104Di2015UniqueSeparatorAlternationCount
18393104Di2015UniqueSeparatorScript.Count
18393104Di2015UniqueSeparatorAlternationIndex
18393104Di2015UniqueSeparatorItemsControl
18393104Di2015UniqueSeparatorTextbox
18393104Di2015UniqueSeparatorTag
18393104Di2015UniqueSeparatorGotFocus
18393104Di2015UniqueSeparator    <ListBox Name="ScriptEditor" Margin="10" Height="291" ItemsSource="{Binding Script}" AlternationCount="{Binding Script.Count}" >Di2015NewLine        <ListBox.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <TextBox Text="{Binding ., Mode=OneWay}" GotFocus="ScriptEditor_GotFocus"Di2015NewLine                         Tag="{Binding Path=(ItemsControl.AlternationIndex), Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" />Di2015NewLine            </DataTemplate>Di2015NewLine        </ListBox.ItemTemplate>Di2015NewLine    </ListBox>Di2015NewLineDi2015NewLineDi2015NewLine    private void ScriptEditor_GotFocus(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        int index = (int)(sender as TextBox).Tag;Di2015NewLine    }Di2015NewLine
18393317Di2015UniqueSeparatorIEnumerable<Library3.DAL.PrmTbl_Level>
18393317Di2015UniqueSeparatorPrmTbl_Level
18393317Di2015UniqueSeparatorpublic class MyCustomModelDi2015NewLine{Di2015NewLine    public MyCustomModel()Di2015NewLine    {Di2015NewLine        MyList = new List<PrmTbl_Level>();Di2015NewLine        MyItemToCreate = new PrmTbl_Level();Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<PrmTbl_Level> MyList { get; set; }Di2015NewLine    public PrmTbl_Level MyItemToCreate { get; set; }Di2015NewLine}Di2015NewLine
18393317Di2015UniqueSeparatormodel => model.LevelID
18393317Di2015UniqueSeparatormodel => model.MyList.LevelID
18393433Di2015UniqueSeparatorOperations
18393433Di2015UniqueSeparator//
18393433Di2015UniqueSeparatorOperationId
18393433Di2015UniqueSeparatornode
18393433Di2015UniqueSeparatorOperations
18393433Di2015UniqueSeparatorOperationId
18393433Di2015UniqueSeparatorOperationIdDi2015NewLine
18393433Di2015UniqueSeparatorSelectSingleNode()
18393433Di2015UniqueSeparatorSelectNodes
18393433Di2015UniqueSeparatornode.SelectSingleNode("OperationId").InnerTextDi2015NewLine
18393433Di2015UniqueSeparatorvar query = doc.SelectNodes("/root/Operations");Di2015NewLineforeach (XmlNode node in query)Di2015NewLine{Di2015NewLine    Console.WriteLine("Operation ID: {0}", node["OperationId"].InnerText);Di2015NewLine}Di2015NewLine
18393447Di2015UniqueSeparatorDictionary<string, string>
18393447Di2015UniqueSeparatormyList.Add("acura", "Acura"); // myList["acura"] == "Acura"Di2015NewLine
18393595Di2015UniqueSeparatorpublic xSecForm(string dataReceived)Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    xSavedList.Text = dataReceived;Di2015NewLine}Di2015NewLineDi2015NewLinepublic xSecForm()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine}Di2015NewLine
18393595Di2015UniqueSeparatorpublic string SavedListDataDi2015NewLine{Di2015NewLine    set { xSavedList.Text = value; }Di2015NewLine    get { return xSavedList.Text; }Di2015NewLine}Di2015NewLine
18393595Di2015UniqueSeparatorxSecForm f2 = new xSecForm();Di2015NewLinef2.SavedListData = "asdf";Di2015NewLinef2.Show();Di2015NewLine
18393758Di2015UniqueSeparatorSelectNodes("//*[matches(text(), '^[A-Z]')]");Di2015NewLine
18393787Di2015UniqueSeparatorif (Request.QueryString[TextBox1.Text] != null) {Di2015NewLine    ResultsQuery = Request.QueryString[TextBox1.Text].Split(' ');    Di2015NewLine}Di2015NewLine
18393807Di2015UniqueSeparatorRelayCommand
18393807Di2015UniqueSeparatorCanExecute
18393807Di2015UniqueSeparatorNotifyPropertyChanged
18393807Di2015UniqueSeparatorButton
18393807Di2015UniqueSeparator<Window x:Class="WpfApplication8.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow" Height="315" Width="258" Name="UI">Di2015NewLineDi2015NewLine    <Grid DataContext="{Binding ElementName=UI}">Di2015NewLine        <DataGrid Name="dataGrid" CanUserAddRows="False" CanUserReorderColumns="False"  HeadersVisibility="Column"  AutoGenerateColumns="False" ItemsSource="{Binding Activities}" SelectedItem="{Binding SelectedActivity, Mode=TwoWay}" Margin="10,10,10,37" >Di2015NewLine            <DataGrid.Columns>Di2015NewLine                <DataGridTextColumn Header="Column1" Binding="{Binding Column1}" />Di2015NewLine                <DataGridTemplateColumn Header="Enabled">Di2015NewLine                    <DataGridTemplateColumn.CellTemplate>Di2015NewLine                        <DataTemplate>Di2015NewLine                            <CheckBox HorizontalAlignment="Center" VerticalAlignment="Center" IsChecked="{Binding Enabled, UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine                        </DataTemplate>Di2015NewLine                    </DataGridTemplateColumn.CellTemplate>Di2015NewLine                </DataGridTemplateColumn>Di2015NewLine            </DataGrid.Columns>Di2015NewLine        </DataGrid>Di2015NewLine        <Button Command="{Binding MyButtonCommand}" Content="Is any checked & is any 'Item6' " Margin="10,0,9,10" Height="22" VerticalAlignment="Bottom"/>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
18393807Di2015UniqueSeparatornamespace WpfApplication8Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Interaction logic for MainWindow.xamlDi2015NewLine    /// </summary>Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        private ObservableCollection<TestObject> myVar = new ObservableCollection<TestObject>();Di2015NewLineDi2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            MyButtonCommand = new RelayCommand(ExecuteButtonAction, CanButtonExecute);Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            for (int i = 0; i < 100; i++)Di2015NewLine            {Di2015NewLine                Activities.Add(new TestObject { Column1 = "Item" + i, Enabled = false });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICommand MyButtonCommand { get; set; }Di2015NewLineDi2015NewLine        public ObservableCollection<TestObject> ActivitiesDi2015NewLine        {Di2015NewLine            get { return myVar; }Di2015NewLine            set { myVar = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool CanButtonExecute()Di2015NewLine        {Di2015NewLine            return Activities.Any(x => x.Enabled) && Activities.Any(x => x.Column1 == "Item2");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void ExecuteButtonAction()Di2015NewLine        {Di2015NewLine            // button clickedDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public class TestObject : INotifyPropertyChangedDi2015NewLine    {Di2015NewLineDi2015NewLine        private string _column1;Di2015NewLine        private bool _enabled;Di2015NewLineDi2015NewLine        public string Column1Di2015NewLine        {Di2015NewLine            get { return _column1; }Di2015NewLine            set { _column1 = value; NotifyPropertyChanged(); }Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool EnabledDi2015NewLine        {Di2015NewLine            get { return _enabled; }Di2015NewLine            set { _enabled = value; NotifyPropertyChanged(); }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine        public void NotifyPropertyChanged([CallerMemberName]string propertyName = null)Di2015NewLine        {Di2015NewLine            if (PropertyChanged != null)Di2015NewLine            {Di2015NewLine                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class RelayCommand : ICommandDi2015NewLine    {Di2015NewLine        private readonly Action _execute;Di2015NewLine        private readonly Func<bool> _canExecute;Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a new command that can always execute.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="execute">The execution logic.</param>Di2015NewLine        public RelayCommand(Action execute)Di2015NewLine            : this(execute, null)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Creates a new command.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="execute">The execution logic.</param>Di2015NewLine        /// <param name="canExecute">The execution status logic.</param>Di2015NewLine        public RelayCommand(Action execute, Func<bool> canExecute)Di2015NewLine        {Di2015NewLine            if (execute == null)Di2015NewLine                throw new ArgumentNullException("execute");Di2015NewLineDi2015NewLine            _execute = execute;Di2015NewLine            _canExecute = canExecute;Di2015NewLine        }Di2015NewLineDi2015NewLine        [DebuggerStepThrough]Di2015NewLine        public bool CanExecute(object parameter)Di2015NewLine        {Di2015NewLine            return _canExecute == null ? true : _canExecute();Di2015NewLine        }Di2015NewLineDi2015NewLine        public event EventHandler CanExecuteChangedDi2015NewLine        {Di2015NewLine            addDi2015NewLine            {Di2015NewLine                if (_canExecute != null)Di2015NewLine                {Di2015NewLine                    CommandManager.RequerySuggested += value;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            removeDi2015NewLine            {Di2015NewLine                if (_canExecute != null)Di2015NewLine                {Di2015NewLine                    CommandManager.RequerySuggested -= value;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Execute(object parameter)Di2015NewLine        {Di2015NewLine            _execute();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18393881Di2015UniqueSeparatorIEnumerable
18393881Di2015UniqueSeparatorAny
18393881Di2015UniqueSeparatorpublic static bool Any<TSource>(this IEnumerable<TSource> source, Di2015NewLine                                Func<TSource, bool> predicate)Di2015NewLine{Di2015NewLine    if (source == null)Di2015NewLine    {Di2015NewLine        throw Error.ArgumentNull("source");Di2015NewLine    }Di2015NewLine    if (predicate == null)Di2015NewLine    {Di2015NewLine        throw Error.ArgumentNull("predicate");Di2015NewLine    }Di2015NewLine    foreach (TSource local in source)Di2015NewLine    {Di2015NewLine        if (predicate(local))Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
18393915Di2015UniqueSeparatorif (_cache == null) Di2015NewLine    _cache = new Dictionary<IDictionary<string, string>, IEnumerable<Fishtank>>();Di2015NewLine
18394005Di2015UniqueSeparator@{Di2015NewLine    string getFileUrl = Url.Action("GetFile");Di2015NewLine}Di2015NewLine
18394005Di2015UniqueSeparator/* in your viewModel, depend how you are doing it, you can do inside your item */
18394005Di2015UniqueSeparatoritem.getFileUrl = '@getFileUrl' + ?id= this.id;
18394005Di2015UniqueSeparator<div data-bind="foreach: item">Di2015NewLine    <a data-bind="attr : { href = getFileUrl}">get file</a>Di2015NewLine</div>Di2015NewLine
18394005Di2015UniqueSeparatoronDataClick: function (row) {Di2015NewLine    //Call the method from controller to allow downloading fileDi2015NewLine    window.open('@getFileUrl' + '?id=' + row.id, "_blank");Di2015NewLine},Di2015NewLine
18394013Di2015UniqueSeparator    internal class OpenTSDBResponseDi2015NewLine    {Di2015NewLine        [JsonProperty("metric")]Di2015NewLine        public string Metric { get; set; }Di2015NewLineDi2015NewLine        [JsonProperty("tags")]Di2015NewLine        public Tags Tags { get; set; }Di2015NewLineDi2015NewLine        [JsonProperty("aggregateTags")]Di2015NewLine        public string[] AggregateTags { get; set; }Di2015NewLineDi2015NewLine        [JsonProperty("dps")]Di2015NewLine        public Dictionary<string,double> TimeValues { get; set; }Di2015NewLine    }Di2015NewLine
18394142Di2015UniqueSeparator    <UpdateParameters>Di2015NewLine    <asp:ControlParameter Name="TestData" ControlId="updateTest" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="MoreData" ControlId="updateMore" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="ID" ControlId="DropDownList2" PropertyName="SelectedValue" />Di2015NewLine</UpdateParameters>Di2015NewLine
18394142Di2015UniqueSeparator<InsertParameters>Di2015NewLine<asp:ControlParameter Name="InsertTestData" ControlId="insertTest" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="InsertID" ControlId="insertIDD" PropertyName="SelectedValue" />Di2015NewLine    <asp:ControlParameter Name="InsertMoreData" ControlId="insertMore" PropertyName="Text" />Di2015NewLine</InsertParameters>Di2015NewLine
18394142Di2015UniqueSeparator<asp:sqldatasource  ID="datasource" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" ProviderName="<%$ ConnectionStrings:ConnectionString.ProviderName %>" Di2015NewLineSelectCommand="SELECT [ID], [Test Data] AS Test_Data, [More Data] AS More_Data FROM [Main]" Di2015NewLineUpdateCommand="UPDATE [Main] SET [Test Data]=@TestData, [More Data]=@MoreData WHERE [ID]=@ID" Di2015NewLineInsertCommand="INSERT INTO [Main] ([ID], [Test Data], [More Data]) VALUES (@InsertID, @InsertTestData, @InsertMoreData)" Di2015NewLineDeleteCommand="" >Di2015NewLine<UpdateParameters>Di2015NewLine    <asp:ControlParameter Name="TestData" ControlId="updateTest" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="MoreData" ControlId="updateMore" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="ID" ControlId="DropDownList2" PropertyName="SelectedValue" />Di2015NewLine</UpdateParameters>Di2015NewLine<InsertParameters>Di2015NewLine<asp:ControlParameter Name="InsertTestData" ControlId="insertTest" PropertyName="Text" />Di2015NewLine    <asp:ControlParameter Name="InsertID" ControlId="insertIDD" PropertyName="SelectedValue" />Di2015NewLine    <asp:ControlParameter Name="InsertMoreData" ControlId="insertMore" PropertyName="Text" />Di2015NewLine</InsertParameters>Di2015NewLine</asp:sqldatasource>Di2015NewLine
18394201Di2015UniqueSeparatorpublic
18394201Di2015UniqueSeparatorprivate
18394201Di2015UniqueSeparatorMyClass.Something = somethingElse;
18394201Di2015UniqueSeparatorSystem.Console.Write(MyClass.Something);
18394221Di2015UniqueSeparatorint
18394221Di2015UniqueSeparatorreturn (int)Invoke(d, new object[] { thing });Di2015NewLine
18394225Di2015UniqueSeparatorstring SqlInsertStatement = @"select * from trial.dbo.Student where Student.SearchName where '" + criteria;Di2015NewLine
18394225Di2015UniqueSeparator   string SqlInsertStatement = @"select * from trial.dbo.Student where " + criteria;Di2015NewLine
18394230Di2015UniqueSeparatorGetFooList()
18394230Di2015UniqueSeparatorFoo[0]
18394230Di2015UniqueSeparatorint i = Foo.IndexOf(something);Di2015NewLineBar b1 = Foo[i];Di2015NewLineFoo = GetNewFooList(); // happens asynchronouslyDi2015NewLineBar b2 = Foo[i];Di2015NewLine
18394230Di2015UniqueSeparatori >= Foo.Count
18394230Di2015UniqueSeparatorfor (int i = 0; i < Foo.Count; ++i)Di2015NewLine{Di2015NewLine    // At this point, the other thread gets a new list,Di2015NewLine    // whose Count <= iDi2015NewLine    Bar b = Foo[i];  // throws an exceptionDi2015NewLine    // whateverDi2015NewLine}Di2015NewLine
18394230Di2015UniqueSeparatorforeach
18394230Di2015UniqueSeparatorFoo
18394299Di2015UniqueSeparatorusing System.Configuration;Di2015NewLineDi2015NewLinestring fileUploadDirectory = ConfigurationManager.AppSettings["FileUploadDirectory"];Di2015NewLineDi2015NewLine// using Substring(1) to skip the ~ that is stored in the database and is returned by GetfileURL()Di2015NewLinestring fullFilePath = Path.Combine(fileUploadDirectory ,daoWordPuzzle.GetfileURL().Substring(1)) Di2015NewLine
18394438Di2015UniqueSeparator$(document).ready(function() {Di2015NewLine  var prev;Di2015NewLine$('select[name=listBoxB] option').each(function() {Di2015NewLine    if (this.text == prev)Di2015NewLine     {Di2015NewLine        $(this).remove();Di2015NewLine     }Di2015NewLine    prev= this.text;Di2015NewLine});Di2015NewLine});Di2015NewLine
18394536Di2015UniqueSeparatorstring[] word = new string[5];Di2015NewLinefor (int i = 0;i<= word.length ; i++)Di2015NewLine            {Di2015NewLineDi2015NewLine               Console.WriteLine("Type in a word");Di2015NewLine                word[i] = Console.ReadLine();Di2015NewLine            }Di2015NewLine            int min = word[0].Length;Di2015NewLine            int max = word[0].Length;Di2015NewLine            string maxx="";Di2015NewLine            string minn="";Di2015NewLinefor (int i = 0; i<=word.length ; i++)Di2015NewLine            {Di2015NewLine              int length = word[i].Length;   Di2015NewLine              if (length > max)Di2015NewLine                 {Di2015NewLine                   maxx = word[i];Di2015NewLineDi2015NewLine                  }Di2015NewLine             if (length < min) Di2015NewLine              {Di2015NewLine                 minn = word[i];Di2015NewLine                Console.Write("Longest");Di2015NewLine              }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine         }Di2015NewLine  Console.Write("Shortest:"+maxx);Di2015NewLine  Console.Write("Longest"+minn);Di2015NewLine  Console.ReadKey(true);Di2015NewLine    }Di2015NewLine
18394764Di2015UniqueSeparatorAssembly.GetTypes()
18394764Di2015UniqueSeparatorassembly = Assembly.LoadFrom(@"C:\\Users\\c_desaik\\Desktop\\PowerTool.exe");Di2015NewLineDi2015NewLineforeach(Type type in assembly.GetTypes())Di2015NewLine    Console.WriteLine(type.ToString());Di2015NewLine
18394764Di2015UniqueSeparatorGetExportedTypes
18394764Di2015UniqueSeparatorforeach(Type type in assembly.GetExportedTypes())Di2015NewLine    Console.WriteLine(type.ToString());Di2015NewLine
18394785Di2015UniqueSeparator5 * (rand5() - 1) + (rand5() - 1);Di2015NewLine
18394785Di2015UniqueSeparator% 7
18394785Di2015UniqueSeparatorA           B              numDi2015NewLinerand5()-1   rand5()-1      5 * A + B        num % 7 + 1Di2015NewLine---------   ---------      ---------        -----------Di2015NewLine0           0              0                1Di2015NewLine1           0              5                6Di2015NewLine2           0              10               4Di2015NewLine3           0              15               2Di2015NewLine4           0              20               7Di2015NewLine0           1              1                2Di2015NewLine1           1              6                7Di2015NewLine2           1              11               5Di2015NewLine3           1              16               3Di2015NewLine4           1              21               rejectDi2015NewLine0           2              2                3Di2015NewLine1           2              7                1Di2015NewLine2           2              12               6Di2015NewLine3           2              17               4Di2015NewLine4           2              22               rejectDi2015NewLine0           3              3                4Di2015NewLine1           3              8                2Di2015NewLine2           3              13               7Di2015NewLine3           3              18               5Di2015NewLine4           3              23               rejectDi2015NewLine0           4              4                5Di2015NewLine1           4              9                3Di2015NewLine2           4              14               1Di2015NewLine3           4              19               6Di2015NewLine4           4              24               rejectDi2015NewLine
18394785Di2015UniqueSeparatorrand5()
18394785Di2015UniqueSeparator1 + 7 * (rand5() - 1) / 5
18394785Di2015UniqueSeparatorrand5()
18394973Di2015UniqueSeparatorURI currentURI = ((App)Application.Current).RootFrame.CurrentSource;Di2015NewLine
18395011Di2015UniqueSeparatorResponse.TransmitFile
18395011Di2015UniqueSeparatorResponse.Clear(); Di2015NewLineResponse.ContentType = "application/pdf";Di2015NewLineResponse.AppendHeader("Content-Disposition", "attachment; filename=buylist.pdf");Di2015NewLineResponse.TransmitFile(Server.MapPath("~/myfile.pdf"));Di2015NewLine
18395101Di2015UniqueSeparator__doPostBack('<%= savebtn.UniqueIDÂ %>',Â "");Di2015NewLine
18395232Di2015UniqueSeparator<div />
18395232Di2015UniqueSeparator       @{Di2015NewLine           int groupings = 3;Di2015NewLine           var grouped = Model.Select((x,i) => new { x, i = i / groupings  })Di2015NewLine                         .GroupBy(x => x.i, x => x.x);Di2015NewLine       }Di2015NewLineDi2015NewLine       <table id="memberlist">Di2015NewLine       <tbody>Di2015NewLine        @foreach(var items in grouped)Di2015NewLine         {Di2015NewLine          <tr>Di2015NewLine             @foreach(var item in items)Di2015NewLine             {Di2015NewLine                 <td>Rtn. @item.Mem_NA<br />(@item.Mem_Occ)</td>Di2015NewLine             }Di2015NewLine          </tr>Di2015NewLine         }Di2015NewLine       </tbody>Di2015NewLine       </table>Di2015NewLine
18395232Di2015UniqueSeparator    @foreach(var item in Model)Di2015NewLine     {Di2015NewLine         <div style="float:left;">Rtn. @item.Mem_NA<br />(@item.Mem_Occ)</div>Di2015NewLine     }Di2015NewLine
18395292Di2015UniqueSeparatorMenuItemIcon
18395292Di2015UniqueSeparatorTemplateBinding
18395292Di2015UniqueSeparatorMSDN
18395292Di2015UniqueSeparatorVisualBrush
18395292Di2015UniqueSeparator<VisualBrush Visual="{TemplateBinding Source}" />Di2015NewLine
18395292Di2015UniqueSeparator{RelativeSource TemplatedParent}
18395292Di2015UniqueSeparatorPath
18395292Di2015UniqueSeparator<Style TargetType="{x:Type local:MenuItemIcon}">Di2015NewLine    <Setter Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate TargetType="{x:Type local:MenuItemIcon}">Di2015NewLine                <Rectangle Width="22" Height="22">Di2015NewLine                    <Rectangle.Fill>Di2015NewLine                        <VisualBrush Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Source}" />                                Di2015NewLine                    </Rectangle.Fill>Di2015NewLine                </Rectangle>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
18395454Di2015UniqueSeparatorAddBedCommand.CommandType
18395454Di2015UniqueSeparatorCommandType.StoredProcedure
18395533Di2015UniqueSeparatorfunction SomeFunc: PAnsiChar; stdcall;Di2015NewLinevarDi2015NewLine  SomeString: AnsiString;Di2015NewLine  ByteCount: Integer;Di2015NewLinebeginDi2015NewLine  SomeString := ...Di2015NewLine  ByteCount := (Length(SomeString)+1)*SizeOf(SomeString[1]);Di2015NewLine  Result := CoTaskMemAlloc(ByteCount);Di2015NewLine  Move(PAnsiChar(SomeString)^, Result^, ByteCount);Di2015NewLineend;Di2015NewLine
18395533Di2015UniqueSeparator[DllImport("SomeDelphi.dll")]Di2015NewLinepublic static extern string SomeFunc();Di2015NewLine
18395533Di2015UniqueSeparatorfunction COMHeapAllocatedString(const s: AnsiString): PAnsiChar; stdcall;Di2015NewLinevarDi2015NewLine  ByteCount: Integer;Di2015NewLinebeginDi2015NewLine  ByteCount := (Length(s)+1)*SizeOf(s[1]);Di2015NewLine  Result := CoTaskMemAlloc(ByteCount);Di2015NewLine  Move(PAnsiChar(s)^, Result^, ByteCount);Di2015NewLineend;Di2015NewLine
18395656Di2015UniqueSeparatorpublic static Expression<Func<T, V?>> ToNullableExpression<T, V> Di2015NewLine    (this Expression<Func<T, V>> source) where V : structDi2015NewLine{ Di2015NewLine    if(source == null)Di2015NewLine       throw new ArgumentNullException("source");Di2015NewLineDi2015NewLine    var body = Expression.Convert(source.Body, typeof(V?));Di2015NewLine    var parameters = source.Parameters;Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<T, V?>>(body, parameters);Di2015NewLine}Di2015NewLine
18396043Di2015UniqueSeparatorTimeSpan
18396043Di2015UniqueSeparatorDateTime parsed = DateTime.ParseExact(endTime.Trim(), "hh:mm tt",Di2015NewLine                                      CultureInfo.InvariantCulture);Di2015NewLineDi2015NewLine// If you need a stringDi2015NewLineclient.EndTime = parsed.ToString("HH:mm:ss", CultureInfo.InvariantCulture);Di2015NewLineDi2015NewLine// If you just need a TimeSpanDi2015NewLineclient.EndTime = parsed.TimeOfDay;Di2015NewLine
18396043Di2015UniqueSeparatorDateTime.TryParseExact
18396043Di2015UniqueSeparatorParseExact
18396043Di2015UniqueSeparatorclient.EndTime
18396043Di2015UniqueSeparatorLocalTime
18396163Di2015UniqueSeparatorforeach
18396163Di2015UniqueSeparatorusing(var e1 = list1.GetEnumerator())Di2015NewLineusing(var e2 = list2.GetEnumerator())Di2015NewLine{Di2015NewLine    while(e1.MoveNext() && e2.MoveNext())Di2015NewLine    {Di2015NewLine         var item1 = e1.Current;Di2015NewLine         var item2 = e2.Current;Di2015NewLineDi2015NewLine         // use item1 and item2Di2015NewLine    }Di2015NewLine}Di2015NewLine
18396163Di2015UniqueSeparatorpublic static void ZipDo<T1, T2>( this IEnumerable<T1> first, IEnumerable<T2> second, Action<T1, T2> action)Di2015NewLine{Di2015NewLine    using (var e1 = first.GetEnumerator())Di2015NewLine    using (var e2 = second.GetEnumerator())Di2015NewLine    {Di2015NewLine        while (e1.MoveNext() && e2.MoveNext())Di2015NewLine        {Di2015NewLine            action(e1.Current, e2.Current);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18396163Di2015UniqueSeparatorlist1.ZipDo(list2, (i1,i2) => i1.Use(i2));Di2015NewLine
18396163Di2015UniqueSeparatorpublic static void ZipDo<T1, T2, T3>(this IEnumerable<T1> first,Di2015NewLine    IEnumerable<T2> second, IEnumerable<T3> third,Di2015NewLine    Action<T1, T2, T3> action)Di2015NewLine{Di2015NewLine    using (var e1 = first.GetEnumerator())Di2015NewLine    using (var e2 = second.GetEnumerator())Di2015NewLine    using (var e3 = third.GetEnumerator())Di2015NewLine    {Di2015NewLine        while (e1.MoveNext() && e2.MoveNext() && e3.MoveNext())Di2015NewLine        {Di2015NewLine            action(e1.Current, e2.Current, e3.Current);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18396163Di2015UniqueSeparatorIEnumerable<T>
18396163Di2015UniqueSeparatorpublic static void ZipAll<T>(this IEnumerable<IEnumerable<T>> all, Action<IEnumerable<T>> action)Di2015NewLine{Di2015NewLine    var enumerators = all.Select(e => e.GetEnumerator()).ToList();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        while (enumerators.All(e => e.MoveNext()))Di2015NewLine            action(enumerators.Select(e => e.Current));Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        foreach (var e in enumerators) Di2015NewLine            e.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18396163Di2015UniqueSeparatorvar lists = new[] {Di2015NewLine     new[]{ 1, 1, 1 }, Di2015NewLine     new[]{ 2, 2, 2 }, Di2015NewLine     new[]{ 3, 3, 3 }};Di2015NewLineDi2015NewLinelists.ZipAll(nums => Console.WriteLine(nums.Sum()));Di2015NewLine// 6Di2015NewLine// 6Di2015NewLine// 6Di2015NewLine
18396642Di2015UniqueSeparatorpublic class ElementDi2015NewLine{Di2015NewLine    [XmlAttribute]Di2015NewLine    public string Attr { get; set; }Di2015NewLineDi2015NewLine    [XmlText]Di2015NewLine    public string Body { get; set; }Di2015NewLine}Di2015NewLine
18396671Di2015UniqueSeparator// Enumerate by nearest spaceDi2015NewLine// Split String value by closest to length spacesDi2015NewLine// e.g. for length = 3 Di2015NewLine// "abcd efghihjkl m n p qrstsf" -> "abcd", "efghihjkl", "m n", "p", "qrstsf" Di2015NewLinepublic static IEnumerable<String> EnumByNearestSpace(this String value, int length) {Di2015NewLine  if (String.IsNullOrEmpty(value))Di2015NewLine    yield break;Di2015NewLineDi2015NewLine  int bestDelta = int.MaxValue;Di2015NewLine  int bestSplit = -1;Di2015NewLineDi2015NewLine  int from = 0;Di2015NewLineDi2015NewLine  for (int i = 0; i < value.Length; ++i) {Di2015NewLine    var Ch = value[i];Di2015NewLineDi2015NewLine    if (Ch != ' ')Di2015NewLine      continue;Di2015NewLineDi2015NewLine    int size = (i - from);Di2015NewLine    int delta = (size - length > 0) ? size - length : length - size;Di2015NewLineDi2015NewLine    if ((bestSplit < 0) || (delta < bestDelta)) {Di2015NewLine      bestSplit = i;Di2015NewLine      bestDelta = delta;Di2015NewLine    }Di2015NewLine    else {Di2015NewLine      yield return value.Substring(from, bestSplit - from);Di2015NewLineDi2015NewLine      i = bestSplit;Di2015NewLineDi2015NewLine      from = i + 1;Di2015NewLine      bestSplit = -1;Di2015NewLine      bestDelta = int.MaxValue;Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  // String's tailDi2015NewLine  if (from < value.Length) {Di2015NewLine    if (bestSplit >= 0) {Di2015NewLine      if (bestDelta < value.Length - from)Di2015NewLine        yield return value.Substring(from, bestSplit - from);Di2015NewLineDi2015NewLine      from = bestSplit + 1;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (from < value.Length)Di2015NewLine      yield return value.Substring(from);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar list = data.EnumByNearestSpace(150).ToList();Di2015NewLine
18396679Di2015UniqueSeparatorfor (buf = input.ReadLine(); ; buf = input.ReadLine())Di2015NewLine
18396679Di2015UniqueSeparatorbuf = input.ReadLine()
18396679Di2015UniqueSeparatorbuf != null
18396679Di2015UniqueSeparatorbuf = input.ReadLine();
18396679Di2015UniqueSeparatorif (buf[0] != ':') continue;
18396679Di2015UniqueSeparator//Process each line received from irc serverDi2015NewLinebuf = input.ReadLine();Di2015NewLinewhile (buf != null)Di2015NewLine{Di2015NewLineDi2015NewLine  //Display received irc messageDi2015NewLine  Console.WriteLine(buf);Di2015NewLineDi2015NewLine  if (buf.StartsWith("ERROR")) break;Di2015NewLineDi2015NewLine  //Send pong reply to any ping messagesDi2015NewLine  if (buf.StartsWith("PING ")) { output.Write(buf.Replace("PING", "PONG") + "\\r\\n"); output.Flush(); }Di2015NewLine  if (buf[0] != ':') continue;Di2015NewLineDi2015NewLine  //After server sends 001 command, we can set mode to bot and join a channelDi2015NewLine  if (buf.Split(' ')[1] == "001")Di2015NewLine  {Di2015NewLine    output.Write(Di2015NewLine      "MODE " + nick + " +B\\r\\n" +Di2015NewLine      "JOIN " + chan + "\\r\\n"Di2015NewLine    );Di2015NewLine    output.Flush();Di2015NewLine  }Di2015NewLine  buf = input.ReadLine();Di2015NewLine}Di2015NewLine
18396840Di2015UniqueSeparatorpublic enum CityTypeDi2015NewLine    {Di2015NewLine        [Description("Select City")]Di2015NewLine        Select = 0,Di2015NewLineDi2015NewLine        [Description("A")]Di2015NewLine        NewDelhi = 1,Di2015NewLineDi2015NewLine        [Description("B")]Di2015NewLine        Mumbai = 2,Di2015NewLineDi2015NewLine        [Description("C")]Di2015NewLine        Bangalore = 3,Di2015NewLineDi2015NewLine        [Description("D")]Di2015NewLine        Buxar = 4,Di2015NewLineDi2015NewLine        [Description("E")]Di2015NewLine        Jabalpur = 5Di2015NewLine    }Di2015NewLineDi2015NewLineIList<SelectListItem> list = Enum.GetValues(typeof(CityType)).Cast<CityType>().Select(x =>    new SelectListItem(){ Di2015NewLine    Text = EnumHelper.GetDescription(x), Di2015NewLine    Value = ((int)x).ToString()Di2015NewLine}).ToList(); Di2015NewLineDi2015NewLine    int city=0; Di2015NewLine    if (userModel.HomeCity != null) city= (int)userModel.HomeCity;Di2015NewLineViewData["HomeCity"] = new SelectList(list, "Value", "Text", city);Di2015NewLineDi2015NewLineDi2015NewLine @Html.DropDownList("HomeCity",null,new { @style = "width:155px;", @class = "form-control" })Di2015NewLine
18396942Di2015UniqueSeparatorexe
18396942Di2015UniqueSeparatorConsole.WriteLine
18397053Di2015UniqueSeparatorvar pattern = "*" + txtNameSubstring.Text + "*";Di2015NewLinevar directories = System.IO.Directory.GetDirectories("C:\\\\Temp", pattern);Di2015NewLine
18397163Di2015UniqueSeparatorapplication/msword
18397163Di2015UniqueSeparatorapplication/vnd.openxmlformats-officedocument.wordprocessingml.document
18397163Di2015UniqueSeparatorResponse.Flush()
18397163Di2015UniqueSeparatorResponse.End()
18397163Di2015UniqueSeparatorCompleteRequest()
18397237Di2015UniqueSeparatorobtenerImagen
18397237Di2015UniqueSeparatorvar obtenerImagen = (from n in basedeDatos.tablaProductos               Di2015NewLine                             select n.imagenProducto).ToList(); Di2015NewLine
18397237Di2015UniqueSeparatorstring imageSource = obtenerImagen.FirstOrDefault();Di2015NewLine
18397461Di2015UniqueSeparatorGetDateTimeFormats
18397461Di2015UniqueSeparatorToString
18397461Di2015UniqueSeparatorGetDateTimeFormats
18397461Di2015UniqueSeparatorToString
18397461Di2015UniqueSeparatorGetDateTimeFormats
18397468Di2015UniqueSeparatorShowWindow(handle, SW_MAXIMIZE);Di2015NewLine// for a split second you might see a maximized window hereDi2015NewLineMoveWindow(handle, 0, 0, Screen.PrimaryScreen.WorkingArea.Width / 2, Screen.PrimaryScreen.WorkingArea.Height, true);Di2015NewLine
18397537Di2015UniqueSeparator var files = Directory.GetFiles(@"C:\\temp\\", "*.jpg");Di2015NewLineDi2015NewLine        foreach (var i in files)Di2015NewLine        {         Di2015NewLine            var objPrintDoc = new PrintDocument();Di2015NewLine            objPrintDoc.PrintPage += (obj, eve) =>Di2015NewLine                {Di2015NewLine                    System.Drawing.Image img = System.Drawing.Image.FromFile(i);Di2015NewLine                    Point loc = new Point(100, 100);Di2015NewLine                    eve.Graphics.DrawImage(img, loc);Di2015NewLine                };Di2015NewLine            objPrintDoc.Print();       Di2015NewLine        }Di2015NewLine
18397659Di2015UniqueSeparatordataGridView1.DataSource = BS;Di2015NewLine
18397659Di2015UniqueSeparatorBindingSource
18397659Di2015UniqueSeparatorvar bindingSource = dataGridView1.DataSource as BindingSource; Di2015NewLineif(bindingSource.Count == 0) {Di2015NewLine  MessageBox.Show("EMPTY");Di2015NewLine}Di2015NewLine
18397742Di2015UniqueSeparatorDataServiceProcessingPipeline
18397742Di2015UniqueSeparatorProcessedRequest
18397742Di2015UniqueSeparatorProcessingPipeline.ProcessedRequest += ProcessingPipeline_ProcessedRequest;Di2015NewLineDi2015NewLinevoid ProcessingPipeline_ProcessedRequest(object sender, DataServiceProcessingPipelineEventArgs e)Di2015NewLine{Di2015NewLine    int statusCode = e.OperationContext.ResponseStatusCode;Di2015NewLine}Di2015NewLine
18397798Di2015UniqueSeparatorFilePathResult
18397798Di2015UniqueSeparatorpublic FilePathResult  ImageRetrive(int imgname)Di2015NewLine{Di2015NewLine    string keyword=image.ToString();Di2015NewLine    string imagefolderpath = Server.MapPath("~/Content/Member/MemberPhotos");Di2015NewLine    string currentimage  = new Member().GetImage(imagefolderpath,keyword);Di2015NewLine    string fullpath = "~/Content/Member/MemberPhotos/" + currentimage;Di2015NewLineDi2015NewLine    return File(fullpath, "image/png"); //Changed hereDi2015NewLine}Di2015NewLine
18397798Di2015UniqueSeparatorpublic FileContentResult Retrive(int imgname)Di2015NewLine{Di2015NewLine    return File(ConvertToByteArray(YourFile), "image/png"); //Changed hereDi2015NewLine}Di2015NewLine
18397802Di2015UniqueSeparatorasync void
18397802Di2015UniqueSeparator    CancellationTokenSource _source;Di2015NewLineDi2015NewLine    public void Start()Di2015NewLine    {Di2015NewLine        _source = new CancellationTokenSource();            Di2015NewLine        Task.Factory.StartNew(() => Listen(1, _source.Token),_source.Token);Di2015NewLine        Task.Factory.StartNew(() => Listen(2, _source.Token), _source.Token);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Stop()Di2015NewLine    {Di2015NewLine        _source.Cancel();Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private async Task Listen(int port,CancellationToken token)Di2015NewLine    {Di2015NewLine        var tcp = new TcpClient();Di2015NewLine        while(!token.IsCancellationRequested)Di2015NewLine        {Di2015NewLine            await tcp.ConnectAsync(ip, port);Di2015NewLine            using (var stream=tcp.GetStream())Di2015NewLine            {Di2015NewLine                ...Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    await stream.ReadAsync(buffer, offset, count, token);Di2015NewLine                }Di2015NewLine                catch (OperationCanceledException ex)Di2015NewLine                {Di2015NewLine                    //Handle CancellationDi2015NewLine                }Di2015NewLine                ...Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18397802Di2015UniqueSeparatortry/catch
18397802Di2015UniqueSeparatorawait
18397802Di2015UniqueSeparator    private async Task Listen(int port,CancellationToken token)Di2015NewLine    {Di2015NewLine        var tcp = new TcpClient();Di2015NewLine        while(!token.IsCancellationRequested)Di2015NewLine        {Di2015NewLine            await tcp.ConnectAsync(ip, port);Di2015NewLine            using (var stream=tcp.GetStream())Di2015NewLine            {Di2015NewLine                ///...Di2015NewLine                await stream.ReadAsync(buffer, offset, count, token)Di2015NewLine                    .ContinueWith(t =>Di2015NewLine                    {Di2015NewLine                        if (t.IsCanceled)Di2015NewLine                        {Di2015NewLine                            //Do some cleanup?Di2015NewLine                        }Di2015NewLine                        elseDi2015NewLine                        {Di2015NewLine                            //Process the buffer and send notificationsDi2015NewLine                        }Di2015NewLine                    });Di2015NewLine                ///...Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18397802Di2015UniqueSeparatorawait
18397802Di2015UniqueSeparatorTask
18397842Di2015UniqueSeparatorLazy<T>
18397842Di2015UniqueSeparatorbeforefieldinit
18397864Di2015UniqueSeparatorp
18397864Di2015UniqueSeparatorh1
18397864Di2015UniqueSeparator        HtmlDocument doc = new HtmlDocument();Di2015NewLine        doc.Load(yourhtml);Di2015NewLine        doc.Save(Console.Out);Di2015NewLine
18397864Di2015UniqueSeparator<div><h1> hello Hi</h1></div> <div>hi <p></div>Di2015NewLine
18397864Di2015UniqueSeparator        HtmlNode.ElementsFlags["p"] = HtmlElementFlag.Closed;Di2015NewLine        HtmlDocument doc = new HtmlDocument();Di2015NewLine        doc.Load(yourhtml);Di2015NewLine        doc.Save(Console.Out);Di2015NewLine
18397864Di2015UniqueSeparator<div><h1> hello Hi</h1></div> <div>hi <p></p></div>Di2015NewLine
18397937Di2015UniqueSeparator//td
18397937Di2015UniqueSeparator/
18397937Di2015UniqueSeparator/
18397937Di2015UniqueSeparatorvar cells = row.SelectNodes(".//td");Di2015NewLine
18397937Di2015UniqueSeparator.
18398013Di2015UniqueSeparatorobject [] table
18398013Di2015UniqueSeparatortable
18398013Di2015UniqueSeparatorobject
18398013Di2015UniqueSeparatortable[3] = 10
18398013Di2015UniqueSeparatortable[3] = 10
18398013Di2015UniqueSeparatorDecimal
18398261Di2015UniqueSeparator     <td>Di2015NewLine <asp:TextBox ID="txtSuppRePwd" runat="server" Height="21px" MaxLength="50" TextMode="Password" Width="60%"></asp:TextBox>Di2015NewLine </td>Di2015NewLine
18398261Di2015UniqueSeparatorTextMode
18398261Di2015UniqueSeparator protected void txtbx_TextChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            string txtValue = txtbx.Text;Di2015NewLine            ViewState["xyz"]= txtValue;   Di2015NewLine        }Di2015NewLine
18398261Di2015UniqueSeparatorViewState
18398261Di2015UniqueSeparatorbtnClick
18398261Di2015UniqueSeparator  OR Di2015NewLine
18398261Di2015UniqueSeparatortextbox
18398261Di2015UniqueSeparatorPage_Load
18398261Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine {Di2015NewLine      txtbx.Attributes.Add("value", txtbx.Text);Di2015NewLine
18398282Di2015UniqueSeparatoridentity
18398350Di2015UniqueSeparatorTreeView TreeView1 = new TreeView();Di2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    BuildTree(@"C:\\temp");Di2015NewLine    form1.Controls.Add(TreeView1);Di2015NewLine}Di2015NewLineprivate void BuildTree(string root)Di2015NewLine{Di2015NewLine    DirectoryInfo rootDir = new DirectoryInfo(root);Di2015NewLine    TreeNode rootNode = new TreeNode(rootDir.Name, rootDir.FullName);Di2015NewLine    TraverseTree(rootDir, TreeView1.Nodes);Di2015NewLine}Di2015NewLineprivate void TraverseTree(DirectoryInfo currentDir, TreeNodeCollection nodeCollection)Di2015NewLine{Di2015NewLine    foreach (DirectoryInfo dir in currentDir.GetDirectories())Di2015NewLine    {Di2015NewLine        TreeNode node = new TreeNode(dir.Name, dir.FullName);Di2015NewLine        nodeCollection.Add(node);                Di2015NewLine        TraverseTree(dir, node.ChildNodes);Di2015NewLine    }Di2015NewLine    foreach (FileInfo file in currentDir.GetFiles())Di2015NewLine    {Di2015NewLine        TreeNode nodeFile = new TreeNode(file.Name, file.FullName);Di2015NewLine        nodeCollection.Add(nodeFile);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18398350Di2015UniqueSeparatorAddToNode
18398380Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential)]    Di2015NewLineprivate struct ICONINFODi2015NewLine{Di2015NewLine    public bool fIcon;Di2015NewLine    public int xHotspot;Di2015NewLine    public int yHotspot;Di2015NewLine    public IntPtr hbmMask;Di2015NewLine    public IntPtr hbmColor;Di2015NewLine}Di2015NewLineDi2015NewLine[DllImport("user32")]Di2015NewLineprivate static extern bool GetIconInfo(IntPtr hIcon, out ICONINFO pIconInfo);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern IntPtr LoadCursorFromFile(string lpFileName);Di2015NewLineDi2015NewLine[DllImport("gdi32.dll", SetLastError = true)]Di2015NewLineprivate static extern bool DeleteObject(IntPtr hObject);Di2015NewLineDi2015NewLineprivate Bitmap BitmapFromCursor(Cursor cur)Di2015NewLine{Di2015NewLine    ICONINFO ii;Di2015NewLine    GetIconInfo(cur.Handle, out ii);Di2015NewLineDi2015NewLine    Bitmap bmp = Bitmap.FromHbitmap(ii.hbmColor);Di2015NewLine    DeleteObject(ii.hbmColor);Di2015NewLine    DeleteObject(ii.hbmMask);Di2015NewLineDi2015NewLine    BitmapData bmData = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadOnly, bmp.PixelFormat);Di2015NewLine    Bitmap dstBitmap = new Bitmap(bmData.Width, bmData.Height, bmData.Stride, PixelFormat.Format32bppArgb, bmData.Scan0);Di2015NewLine    bmp.UnlockBits(bmData);Di2015NewLineDi2015NewLine    return new Bitmap(dstBitmap);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)Di2015NewLine{Di2015NewLine    //Using LoadCursorFromFile from user32.dll, get a handle to the iconDi2015NewLine    IntPtr hCursor = LoadCursorFromFile("C:\\\\Windows\\\\Cursors\\\\Windows Aero\\\\aero_busy.ani");Di2015NewLineDi2015NewLine    //Create a Cursor object from that handleDi2015NewLine    Cursor cursor = new Cursor(hCursor);Di2015NewLineDi2015NewLine    //Convert that cursor into a bitmapDi2015NewLine    using (Bitmap cursorBitmap = BitmapFromCursor(cursor))Di2015NewLine    {Di2015NewLine        //Draw that cursor bitmap directly to the form canvasDi2015NewLine        e.Graphics.DrawImage(cursorBitmap, 50, 50);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18398380Di2015UniqueSeparatorIcon.ExtractAssociatedIcon
18398380Di2015UniqueSeparatorSystem.Drawing.Icon i = System.Drawing.Icon.ExtractAssociatedIcon(@"C:\\Windows\\Cursors\\arrow_rl.cur");Di2015NewLineSystem.Drawing.Bitmap b = i.ToBitmap();Di2015NewLine
18398525Di2015UniqueSeparatorArguements
18398525Di2015UniqueSeparatorCMD
18398525Di2015UniqueSeparatorIPCONFIG
18398525Di2015UniqueSeparator        ProcessStartInfo startInfo = new ProcessStartInfo();Di2015NewLine        startInfo.FileName = @"C:\\Windows\\system32\\cmd.exe";Di2015NewLine        startInfo.Arguments = "/k ipconfig";Di2015NewLine        Process myProcess = new Process();Di2015NewLine        myProcess.StartInfo = startInfo;Di2015NewLine        myProcess.Start();Di2015NewLine
18398660Di2015UniqueSeparatorDictionary
18398660Di2015UniqueSeparatorswitch
18398660Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    private static Dictionary<string, Func<UnitDescriptor>> dict = new Dictionary<string, Func<UnitDescriptor>>();Di2015NewLineDi2015NewLine    static MyClass()Di2015NewLine    {Di2015NewLine        dict.Add(UnitCode.DEG_C, () => new UnitDescriptorDegC());Di2015NewLine        dict.Add(UnitCode.DEG_F, () => new UnitDescriptorDegF());Di2015NewLine        // Other mappings...Di2015NewLine    }Di2015NewLineDi2015NewLine    private static UnitDescriptor createUnitDescriptor(string code)Di2015NewLine    {Di2015NewLine        Func<UnitDescriptor> value;Di2015NewLine        if (dict.TryGetValue(code, out value))Di2015NewLine        {Di2015NewLine            return value();Di2015NewLine        }Di2015NewLineDi2015NewLine        throw new SystemException(string.Format("unknown code: {0}", code));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18398729Di2015UniqueSeparatorpublic class MemberLoanDi2015NewLine{Di2015NewLine   public string LoandProviderCode { get; set; }Di2015NewLine   public virtual Membership Membership { get; set; }Di2015NewLine}Di2015NewLine
18398729Di2015UniqueSeparatorpublic class MemberLoanProxy : MemberLoanDi2015NewLine{Di2015NewLine    private CosisEntities db;Di2015NewLine    private int membershipId;Di2015NewLine    private Membership membership;Di2015NewLineDi2015NewLine    public override Membership Membership Di2015NewLine    { Di2015NewLine       get Di2015NewLine       {Di2015NewLine          if (membership == null)Di2015NewLine              membership = db.Memberships.Find(membershipId);Di2015NewLine          return membership;Di2015NewLine       }Di2015NewLine       set { membership = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18398729Di2015UniqueSeparatorusing
18398729Di2015UniqueSeparatorIQueryable<MemberLoan> query = db.MemberLoans.Include(m => m.Membership);Di2015NewLine
18398853Di2015UniqueSeparatorXmlSerializer
18398853Di2015UniqueSeparatorDefaultValue
18398853Di2015UniqueSeparatorDefaultValueAttribute
18398853Di2015UniqueSeparatorDescriptionAttribute
18398853Di2015UniqueSeparatorEavInitAttribute
18398853Di2015UniqueSeparator[EavInit(41, "name")]Di2015NewLinepublic uint Name {get;set;}Di2015NewLine
18398853Di2015UniqueSeparatorpublic bool ShouldSerializeName() { return true; }Di2015NewLine
18398853Di2015UniqueSeparatorpublic
18398853Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineusing System.Xml.Serialization;Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var obj = new CustomClass();Di2015NewLine        Console.WriteLine(obj.Name);Di2015NewLineDi2015NewLine        // show it working via XmlSerializerDi2015NewLine        new XmlSerializer(obj.GetType()).Serialize(Console.Out, obj);Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class CustomClass : EavBaseDi2015NewLine{Di2015NewLine    [EavInit(42, "name")]Di2015NewLine    public uint NameDi2015NewLine    {Di2015NewLine        get { return GetEav(); }Di2015NewLine        set { SetEav(value); }Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic abstract class EavBaseDi2015NewLine{Di2015NewLine    private Dictionary<string, uint> values;Di2015NewLine    protected uint GetEav([CallerMemberName] string propertyName = null)Di2015NewLine    {Di2015NewLine        if (values == null) values = new Dictionary<string, uint>();Di2015NewLine        uint value;Di2015NewLine        if (!values.TryGetValue(propertyName, out value))Di2015NewLine        {Di2015NewLine            value = 0;Di2015NewLine            var prop = GetType().GetProperty(propertyName);Di2015NewLine            if (prop != null)Di2015NewLine            {Di2015NewLine                var attrib = (EavInitAttribute)Attribute.GetCustomAttribute(Di2015NewLine                    prop, typeof(EavInitAttribute));Di2015NewLine                if (attrib != null)Di2015NewLine                {Di2015NewLine                    value = attrib.DefaultValue;Di2015NewLine                    if (!string.IsNullOrEmpty(attrib.Key))Di2015NewLine                    {Di2015NewLine                        value = LookupDefaultValueFromDatabase(attrib.Key);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            values.Add(propertyName, value);Di2015NewLine        }Di2015NewLine        return value;Di2015NewLine    }Di2015NewLine    protected void SetEav(uint value, [CallerMemberName] string propertyName = null)Di2015NewLine    {Di2015NewLine        (values ?? (values = new Dictionary<string, uint>()))[propertyName] = value;Di2015NewLine    }Di2015NewLine    private static uint LookupDefaultValueFromDatabase(string key)Di2015NewLine    {Di2015NewLine        // TODO: real code hereDi2015NewLine        switch (key)Di2015NewLine        {Di2015NewLine            case "name":Di2015NewLine                return 7;Di2015NewLine            default:Di2015NewLine                return 234;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]Di2015NewLine    protected class EavInitAttribute : AttributeDi2015NewLine    {Di2015NewLine        public uint DefaultValue { get; private set; }Di2015NewLine        public string Key { get; private set; }Di2015NewLine        public EavInitAttribute(uint defaultValue) : this(defaultValue, "") { }Di2015NewLine        public EavInitAttribute(string key) : this(0, key) { }Di2015NewLine        public EavInitAttribute(uint defaultValue, string key)Di2015NewLine        {Di2015NewLine            DefaultValue = defaultValue;Di2015NewLine            Key = key ?? "";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18398872Di2015UniqueSeparatorConvert.ToDecimal(variableData[this.value1Name]) == this.value2LiteralDi2015NewLine
18398886Di2015UniqueSeparatorNextValue
18398886Di2015UniqueSeparatorPerformanceCounter
18398886Di2015UniqueSeparatorNextValue
18398886Di2015UniqueSeparatorPage_Load
18398886Di2015UniqueSeparator        float cpuUsage = 0.00F;Di2015NewLineDi2015NewLine        this.theCPUCounter.NextValue();Di2015NewLine        cpuUsage = this.theCPUCounter.NextValue();Di2015NewLine
18398886Di2015UniqueSeparatorPage_Load
18398977Di2015UniqueSeparatorCOMException
18398977Di2015UniqueSeparatorHResult
18398977Di2015UniqueSeparatoruncheckedDi2015NewLine{Di2015NewLine    var msg = Marshal.GetExceptionForHR((int)0x80004005).Message;Di2015NewLine}Di2015NewLine
18399028Di2015UniqueSeparatorWait
18399028Di2015UniqueSeparatorResult
18399041Di2015UniqueSeparatorFileInfo newFile = new FileInfo(fileName);Di2015NewLineif (newFile.Exists)Di2015NewLine File.Delete(fileName);Di2015NewLineExcelPackage pck = new ExcelPackage(newFile);Di2015NewLine..... //work with worksheetsDi2015NewLinepck.Save();Di2015NewLine
18399066Di2015UniqueSeparatorDecimal.Parse("Infinity", System.Globalization.CultureInfo.InvariantCulture);Di2015NewLine
18399415Di2015UniqueSeparatorConsole.WriteLine("array[{0}] = {1}", j, array[j]);Di2015NewLine
18399434Di2015UniqueSeparatorXmlNode xnode = xd.SelectNodes("/Table/row/queryId[normalize-space(.)='" + id.Trim() + "']").[0];Di2015NewLine
18399560Di2015UniqueSeparator<IMG SRC="BarCode.aspx?par1=HelloWorld40OrWhatever" />Di2015NewLine
18399560Di2015UniqueSeparatorBarCode.aspx
18399560Di2015UniqueSeparatorCode39BarcodeDraw barcode39 = BarcodeDrawFactory.Code39WithoutChecksum;Di2015NewLineSystem.Drawing.Image img = barcode39.Draw("Hello World", 40);Di2015NewLineDi2015NewLineResponse.Clear();Di2015NewLineResponse.Type = "image/png";Di2015NewLineimg.Save(Response.OutputStream, Imaging.ImageFormat.Png);Di2015NewLineResponse.Flush();Di2015NewLineResponse.End();Di2015NewLine
18399632Di2015UniqueSeparatorImage
18399632Di2015UniqueSeparatorEffect
18399632Di2015UniqueSeparatorDropShadowEffect
18399632Di2015UniqueSeparatorIsMouseOver=True
18399632Di2015UniqueSeparator<Image Source="/WpfApplication1;component/myimage.png">Di2015NewLine   <Image.Style>Di2015NewLine      <Style TargetType="{x:Type Image}">Di2015NewLine         <Style.Triggers>Di2015NewLine            <Trigger Property="IsMouseOver" Value="True">Di2015NewLine               <Setter Property="Effect">Di2015NewLine                  <Setter.Value>Di2015NewLine                     <DropShadowEffect ShadowDepth="0" Color="Blue" Opacity="1" BlurRadius="20"/>Di2015NewLine                  </Setter.Value>Di2015NewLine               </Setter>Di2015NewLine            </Trigger>Di2015NewLine         </Style.Triggers>Di2015NewLine      </Style>Di2015NewLine   </Image.Style>Di2015NewLine</Image>Di2015NewLine
18399715Di2015UniqueSeparatorstrFileName
18399715Di2015UniqueSeparatorGenerovaniVse
18399736Di2015UniqueSeparatorstring s = doc.DocumentNode.OuterHtml;Di2015NewLine
18399736Di2015UniqueSeparatorvar sw = new StringWriter();Di2015NewLinedoc.Save(sw);Di2015NewLinevar s = sw.ToString();Di2015NewLine
18399760Di2015UniqueSeparatorpublic class GenericClassOfGenericType<TGeneric, TValue>Di2015NewLine    where TGeneric : IList<TValue> Di2015NewLine
18399811Di2015UniqueSeparatornewError.Help += new EventHandler(Showhelp);Di2015NewLine
18399811Di2015UniqueSeparatorstatic void Showhelp(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        // Put your code hereDi2015NewLine}Di2015NewLine
18399813Di2015UniqueSeparatorExcel.Worksheet ws = Globals.ThisAddIn.Application.ActiveSheet;Di2015NewLinews.SelectionChange += new   Excel.DocEvents_SelectionChangeEventHandler(ColRangeSelChange);Di2015NewLine
18399813Di2015UniqueSeparatorColRangeSelChange
18399813Di2015UniqueSeparatorpublic void ColRangeSelChange(Excel.Range target) Di2015NewLine{Di2015NewLine    System.Windows.Forms.MessageBox.Show(target.AddressLocal);Di2015NewLine}Di2015NewLine
18399813Di2015UniqueSeparatorColRangeSelChange
18399813Di2015UniqueSeparatorActiveSheet
18399813Di2015UniqueSeparatorCreateColumn()
18399813Di2015UniqueSeparatorsmartTemplateBtn_Click
18399818Di2015UniqueSeparatorPlaylist
18399818Di2015UniqueSeparatorvar filepicker = new FileOpenPicker();Di2015NewLinefilepicker.SuggestedStartLocation = PickerLocationId.MusicLibrary;Di2015NewLinefilepicker.FileTypeFilter.Add(".wpl");Di2015NewLinefilepicker.FileTypeFilter.Add(".zpl");Di2015NewLinefilepicker.FileTypeFilter.Add(".m3u");Di2015NewLinevar file = await filepicker.PickSingleFileAsync();Di2015NewLineDi2015NewLineif (file != null)Di2015NewLine{Di2015NewLine    var playlist = await Playlist.LoadAsync(file); Di2015NewLine    var allMediaFiles = playlist.Files;Di2015NewLine}Di2015NewLine
18399818Di2015UniqueSeparatorMediaElement
18399818Di2015UniqueSeparatorStorageFile
18399818Di2015UniqueSeparatorMediaElement
18399818Di2015UniqueSeparatorMediaEnded
18399818Di2015UniqueSeparatorMediaElement
18399818Di2015UniqueSeparatorSource
18399877Di2015UniqueSeparatorMy Code (autoit)Di2015NewLineRegWrite('HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon','Shell',"REG_SZ",'Explorer.exe')Di2015NewLineRun('userinit.exe')Di2015NewLineProcessWait('explorer.exe')Di2015NewLineRegWrite('HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon','Shell',"REG_SZ",@ScriptFullPath)Di2015NewLine
18399877Di2015UniqueSeparatordebug = true
18399917Di2015UniqueSeparatorvar dic = db.GetTable<History>()Di2015NewLine            .Select(p => new { p.Title, p.Date }).Where(x => x.Date >= startDateFilter && x.Date <= endDateFilter)Di2015NewLine            .DistinctBy(x=>x.Title) Di2015NewLine            .AsEnumerable()Di2015NewLine            .ToDictionary(k => k.Title, v => v.Date);Di2015NewLine
18399949Di2015UniqueSeparatormyPurge.TeachMeCSharp(MSDN)
18400211Di2015UniqueSeparatordispose
18400211Di2015UniqueSeparatorDispose
18400291Di2015UniqueSeparatoronRowDataBound()
18400291Di2015UniqueSeparator<AlternatingItemStyle BackColor="White" />Di2015NewLine <ItemStyle BackColor="#EFF3FB" />Di2015NewLine
18400291Di2015UniqueSeparator<Columns>Di2015NewLine    <asp:TemplateField>Di2015NewLine        <ItemTemplate>Di2015NewLine            <asp:Label runat="server" ID="lbl_Bind" Text='Eval(YOUR DATA HERE)' CssClass="CSS-CLASSS" />Di2015NewLine        </ItemTemplate>Di2015NewLine    </asp:TemplateField>Di2015NewLine</Columns>Di2015NewLine
18400323Di2015UniqueSeparatorList<IUnit> army = new List<IUnit>(); Di2015NewLineInfantry infantry = new Infantry();    Di2015NewLineDi2015NewLinefor(int i = 0; i < 10; i++)Di2015NewLine{Di2015NewLine    // adds same instance each time        Di2015NewLine    army.Add(infantry);Di2015NewLine}Di2015NewLine
18400323Di2015UniqueSeparatorList<IUnit> army = new List<IUnit>(); Di2015NewLineDi2015NewLinefor(int i = 0; i < 10; i++)Di2015NewLine{Di2015NewLine    // create new instance each timeDi2015NewLine    Infantry infantry = new Infantry();Di2015NewLine    army.Add(infantry);Di2015NewLine}Di2015NewLine
18400323Di2015UniqueSeparatorref
18400323Di2015UniqueSeparatorpublic void ShotRandomGuy(List<IUnit> army)Di2015NewLine{Di2015NewLine    Random r = new Random();Di2015NewLine    var unit = army[r.Next(army.Count)];Di2015NewLine    unit.HealthPoints -= 25;Di2015NewLine}Di2015NewLine
18400671Di2015UniqueSeparatornode.Attributes.Add("class","active");Di2015NewLine
18400685Di2015UniqueSeparatorINSERT
18400773Di2015UniqueSeparatormodelBuilder.Entity<ProductTag>()Di2015NewLine            .HasRequired(c => c.Product)Di2015NewLine            .WithMany(c => c.Tags)Di2015NewLine            .HasForeignKey(c => c.ProductId);Di2015NewLine
18400773Di2015UniqueSeparatormodelBuilder.Entity<BaseProduct>()Di2015NewLine            .HasMany(p => p.Tags)Di2015NewLine            .WithRequired(t => t.Product)Di2015NewLine            .HasForeignKey(t => t.ProductId);Di2015NewLine
18401023Di2015UniqueSeparatorApplication.EnableVisualStyles();Di2015NewLineApplication.SetCompatibleTextRenderingDefault(false);Di2015NewLineForm f = new Form2();Di2015NewLineif(f.ShowDialog() == DialogResult.OK)  // note the change here.Di2015NewLine    Application.Run(new Form1());Di2015NewLine
18401063Di2015UniqueSeparator^\\d{5,6}(\\|\\d{5,6})*$Di2015NewLine
18401092Di2015UniqueSeparatorvar settings = new JsonSerializerSettings() { Di2015NewLine                     TypeNameHandling = TypeNameHandling.All };Di2015NewLineDi2015NewLinevar json = JsonConvert.SerializeObject(obj, settings);Di2015NewLinevar newObj = JsonConvert.DeserializeObject<SomeType>(json, settings);Di2015NewLine
18401148Di2015UniqueSeparator<security authenticationMode="...">Di2015NewLine           <localClientSettings maxClockSkew="00:07:00" />Di2015NewLine           <localServiceSettings maxClockSkew="00:07:00" />Di2015NewLine           <secureConversationBootstrap>Di2015NewLine              <localClientSettings maxClockSkew="00:30:00" />Di2015NewLine              <localServiceSettings maxClockSkew="00:30:00" />Di2015NewLine           </secureConversationBootstrap>Di2015NewLine</security>Di2015NewLine
18401199Di2015UniqueSeparatorCaptureImage
18401199Di2015UniqueSeparatorImage
18401199Di2015UniqueSeparatorvoid/nothing
18401199Di2015UniqueSeparatorif (OnUpdateStatus == null)
18401199Di2015UniqueSeparatorif
18401199Di2015UniqueSeparatorNot all code paths return a value
18401199Di2015UniqueSeparator public Image CaptureImage(bool showCursor, Size curSize, Point curPos, Point SourcePoint, Point DestinationPoint, Rectangle SelectionRectangle, string FilePath, string extension)Di2015NewLine{Di2015NewLine    Bitmap bitmap = new Bitmap(SelectionRectangle.Width, SelectionRectangle.Height);Di2015NewLineDi2015NewLine    using (Graphics g = Graphics.FromImage(bitmap))Di2015NewLine    {Di2015NewLine        g.CopyFromScreen(SourcePoint, DestinationPoint, SelectionRectangle.Size);Di2015NewLineDi2015NewLine        if (showCursor)Di2015NewLine        {Di2015NewLine            Rectangle cursorBounds = new Rectangle(curPos, curSize);Di2015NewLine            Cursors.Default.Draw(g, cursorBounds);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    if (saveToClipboard)Di2015NewLine    {Di2015NewLine        Image img = (Image)bitmap;Di2015NewLineDi2015NewLine        if (OnUpdateStatus == null) return bitmap;//<--- hereDi2015NewLineDi2015NewLine        ProgressEventArgs args = new ProgressEventArgs(img);Di2015NewLine        OnUpdateStatus(this, args);Di2015NewLineDi2015NewLine    }Di2015NewLine    return bitmap;//<--- and hereDi2015NewLine }Di2015NewLine
18401327Di2015UniqueSeparatorcomboBoxColumn.DataPropertyName = "Table_ID";Di2015NewLine
18401374Di2015UniqueSeparatorList.FindIndex()
18401374Di2015UniqueSeparatorCalling Via FindIndex() 100 times took 00:00:00.9326057Di2015NewLineCalling Via Linq 100 times took 00:00:04.0014677Di2015NewLineCalling Via FindIndex() 100 times took 00:00:00.8994282Di2015NewLineCalling Via Linq 100 times took 00:00:03.9179414Di2015NewLineCalling Via FindIndex() 100 times took 00:00:00.8971618Di2015NewLineCalling Via Linq 100 times took 00:00:03.9134804Di2015NewLineCalling Via FindIndex() 100 times took 00:00:00.8963758Di2015NewLine
18401374Di2015UniqueSeparatorList.FindIndex()
18401374Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinenamespace DemoDi2015NewLine{Di2015NewLine    class TestDi2015NewLine    {Di2015NewLine        public string FilePath;Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        private void run()Di2015NewLine        {Di2015NewLine            int count = 1000000;Di2015NewLineDi2015NewLine            List<Test> list = new List<Test>(count);Di2015NewLineDi2015NewLine            for (int i = 0; i < count; ++i)Di2015NewLine                list.Add(new Test{ FilePath = i.ToString()});Di2015NewLineDi2015NewLine            string target = (count-1).ToString();Di2015NewLineDi2015NewLine            for (int trial = 0; trial < 4; ++trial)Di2015NewLine            {Di2015NewLine                Action viaFindIndex =Di2015NewLine                (Di2015NewLine                    () =>Di2015NewLine                    {Di2015NewLine                        int index = list.FindIndex(x => (x != null) && (x.FilePath == target));Di2015NewLine                    }Di2015NewLine                );Di2015NewLineDi2015NewLine                Action viaLinq =Di2015NewLine                (Di2015NewLine                    () =>Di2015NewLine                    {Di2015NewLine                        int index = list.Select((x, i) => new { Item = x, Index = i })Di2015NewLine                        .First(x => (x != null) && (x.Item.FilePath == target))Di2015NewLine                        .Index;Di2015NewLine                    }Di2015NewLine                );Di2015NewLineDi2015NewLine                viaFindIndex.TimeThis("Via FindIndex()", 100);Di2015NewLine                viaLinq.TimeThis("Via Linq", 100);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void Main()Di2015NewLine        {Di2015NewLine            new Program().run();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static class DemoUtilDi2015NewLine    {Di2015NewLine        public static void TimeThis(this Action action, string title, int count = 1)Di2015NewLine        {Di2015NewLine            var sw = Stopwatch.StartNew();Di2015NewLineDi2015NewLine            for (int i = 0; i < count; ++i)Di2015NewLine                action();Di2015NewLineDi2015NewLine            Console.WriteLine("Calling {0} {1} times took {2}", title, count, sw.Elapsed);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18401374Di2015UniqueSeparatorList.FindIndex()
18401374Di2015UniqueSeparatorint index = list.FindIndex(x => (x != null) && (x.FilePath == target));Di2015NewLine
18401374Di2015UniqueSeparatorint index = list.Select((x, i) => new { Item = x, Index = i })Di2015NewLine            .First(x => (x != null) && (x.Item.FilePath == target))Di2015NewLine            .Index;Di2015NewLine
18401383Di2015UniqueSeparatorILeaveCalculation expectedCalculator = new MyCalculator();Di2015NewLineLeaveCalculationType expectedCalculationType = LeaveCalculationType.MyType;Di2015NewLineDi2015NewLineILeaveFactoryCategory factoryMock = MockRepository.GenerateMock<ILeaveFactoryCategory >();Di2015NewLineDi2015NewLinefactoryMock.Expect(f => f.GetCategory(Arg<LeaveCalculationType>.Is.Equal(expectedCalculationType)).Returns(expectedCalculator);Di2015NewLineDi2015NewLinevar proRataClass = new ProRata(factoryMock);Di2015NewLinevar availableLeaveCount = proRataClass.Calculate(employee, systemDateTime.Now.Date, leaveCount);Di2015NewLineDi2015NewLinefactoryMock.VerifyAllExpectations();Di2015NewLine
18401442Di2015UniqueSeparatorthis.CordovaView.Browser.Navigated += Browser_Navigated;
18401442Di2015UniqueSeparatorprivate void Browser_Navigated(object sender, System.Windows.Navigation.NavigationEventArgs e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Browser_Navigated:" + sender);Di2015NewLineDi2015NewLine            String currentURL = "";Di2015NewLine            Boolean isAbsolute = this.CordovaView.Browser.Source.IsAbsoluteUri;Di2015NewLine            ApplicationBar = new ApplicationBar();Di2015NewLine            ApplicationBar.Mode =ApplicationBarMode.Minimized;Di2015NewLine            if (isAbsolute)Di2015NewLine            {Di2015NewLine                currentURL = this.CordovaView.Browser.Source.AbsoluteUri;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine                ApplicationBarMenuItem clearCache = new ApplicationBarMenuItem();Di2015NewLine                clearCache.Text = "Reset user settings";Di2015NewLine                ApplicationBar.MenuItems.Add(clearCache);Di2015NewLine                clearCache.Click += new EventHandler(OnClearCache);Di2015NewLineDi2015NewLine                if (! currentURL.EndsWith("LoginSP.aspx")) Di2015NewLine                {Di2015NewLine                    ApplicationBarMenuItem logOut = new ApplicationBarMenuItem();Di2015NewLine                    logOut.Text = "Log out";Di2015NewLine                    ApplicationBar.MenuItems.Add(logOut);Di2015NewLine                    logOut.Click += new EventHandler(OnLogOut);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                currentURL = "x-wmapp1:" + this.CordovaView.Browser.Source.OriginalString;Di2015NewLine                ApplicationBar.IsVisible = false;Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine("currentURL:" + currentURL);Di2015NewLine        }Di2015NewLine
18401454Di2015UniqueSeparatordbo.sp_start_job
18401907Di2015UniqueSeparatorFunc<>
18401907Di2015UniqueSeparatorbyte[] hash = ...Di2015NewLinekernel.Bind<Func<byte[]>>().Di2015NewLine            ToConstant(new Func<byte[]>(() => hash)).Di2015NewLine            WhenTargetHas<AKeyAttribute>();Di2015NewLineDi2015NewLinepublic A([AKey] Func<byte[]> key)Di2015NewLine
18401907Di2015UniqueSeparatorFunc<>
18401918Di2015UniqueSeparatorprivate void btnDonate_Click(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    string url = "";Di2015NewLineDi2015NewLine    string business     = "my@paypalemail.com";  // your paypal emailDi2015NewLine    string description  = "Donation";            // '%20' represents a space. remember HTML!Di2015NewLine    string country      = "AU";                  // AU, US, etc.Di2015NewLine    string currency     = "AUD";                 // AUD, USD, etc.Di2015NewLineDi2015NewLine    url += "https://www.paypal.com/cgi-bin/webscr" +Di2015NewLine        "?cmd=" + "_donations" +Di2015NewLine        "&business=" + business +Di2015NewLine        "&lc=" + country +Di2015NewLine        "&item_name=" + description +Di2015NewLine        "&currency_code=" + currency +Di2015NewLine        "&bn=" + "PP%2dDonationsBF";Di2015NewLineDi2015NewLine    System.Diagnostics.Process.Start(url);Di2015NewLine}Di2015NewLine
18401975Di2015UniqueSeparatorpublic delegate void ButtonClickedEvent(object sender);Di2015NewLinepublic event ButtonClickedEvent Form1ButtonClicked;Di2015NewLineDi2015NewLineprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (Form1ButtonClicked != null)Di2015NewLine    {Di2015NewLine        Form1ButtonClicked(sender);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18401975Di2015UniqueSeparatorpublic Form2()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    Form1 f = new Form1();Di2015NewLine    f.Form1ButtonClicked += new Form1.ButtonClickedEvent(f_Form1ButtonClicked);Di2015NewLine    f.Show();Di2015NewLine}Di2015NewLineDi2015NewLinevoid f_Form1ButtonClicked(object sender)Di2015NewLine{Di2015NewLine    comboBox1.Enabled = false;Di2015NewLine}Di2015NewLine
18402028Di2015UniqueSeparatorpublic interface IHaveLinksDi2015NewLine{Di2015NewLine  [IgnoreDataMember]Di2015NewLine  IEnumerable<Link> Links { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class LinkDi2015NewLine{Di2015NewLine  public string Name { get; set; }Di2015NewLine  public IReturn Request { get; set; }Di2015NewLine  public string Method { get; set; }Di2015NewLine}Di2015NewLine
18402028Di2015UniqueSeparatorthis.ResponseFilters.Add((req, res, dto) =>Di2015NewLine{Di2015NewLine  if (!(dto is IHaveLinks))Di2015NewLine    return;Di2015NewLineDi2015NewLine  var links = (dto as IHaveLinks).LinksDi2015NewLineDi2015NewLine  if(links == null || !links.Any())Di2015NewLine    return;Di2015NewLineDi2015NewLine  var linksText = linksDi2015NewLine    .Select(x => string.Format("<{0}>; rel={1}"), x.Request.ToUrl(x.Method), x.Name));Di2015NewLineDi2015NewLine  var linkHeader = string.Join(", ", linksText);Di2015NewLineDi2015NewLine  res.AddHeader("Link", linkHeader);Di2015NewLine});Di2015NewLine
18402028Di2015UniqueSeparatorLink
18402028Di2015UniqueSeparatorMethod
18402028Di2015UniqueSeparatorpublic class ExampleService : ServiceDi2015NewLine{Di2015NewLine  public ExamplesResponse Get(ExamplesRequest request)Di2015NewLine  {Di2015NewLine    var page = request.Page;Di2015NewLine    var data = // get data;Di2015NewLineDi2015NewLine    return new ExamplesResponseDi2015NewLine      {Di2015NewLine        Examples = data,Di2015NewLine        Links = new []Di2015NewLine          {Di2015NewLine            new Link { Name = "next", Request = request.AddPage(1), Method = "GET" },Di2015NewLine            new Link { Name = "previous", Request = request.AddPage(-1), Method = "GET" },Di2015NewLine          }Di2015NewLine      }Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLine[Route("/examples/{Page}")]Di2015NewLinepublic class ExamplesRequest : IReturn<ExamplesResponse>Di2015NewLine{Di2015NewLine  public int Page { get; set; }Di2015NewLineDi2015NewLine  // ...Di2015NewLine}Di2015NewLine
18402028Di2015UniqueSeparatorAddPage
18402031Di2015UniqueSeparator[Table]Di2015NewLineclass NumberDi2015NewLine{Di2015NewLine    [Column(IsPrimaryKey = true, IsDbGenerated = true)]Di2015NewLine    public int NumberID { get; set; }Di2015NewLineDi2015NewLine    [Column]Di2015NewLine    public int _personID { get; set; }Di2015NewLineDi2015NewLine    [Column]Di2015NewLine    public int PhoneNumber { get; set; }Di2015NewLineDi2015NewLine    private EntityRef<Person> _person;Di2015NewLine    [Association(Storage = "_person", ThisKey = "_personID", OtherKey = "PersonID", IsForeignKey = true)]Di2015NewLine    public Person PersonDi2015NewLine    {Di2015NewLine        get { return this._person.Entity; }Di2015NewLine        set { Di2015NewLine            this._person.Entity = value;Di2015NewLine            if (value != null)Di2015NewLine            {Di2015NewLine                this._personID = value.PersonID;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }  Di2015NewLine}Di2015NewLine
18402031Di2015UniqueSeparatorpublic Person()Di2015NewLine{Di2015NewLine    this._numbers = new EntitySet<Number>(Di2015NewLine    delegate (Number entity)Di2015NewLine    {Di2015NewLine        entity.Person = this;Di2015NewLine    },Di2015NewLine    delegate (Number entity)Di2015NewLine    {Di2015NewLine        entity.Person = null;Di2015NewLine    });Di2015NewLine}Di2015NewLine
18402031Di2015UniqueSeparatorvar numbers = db.Numbers.ToList();Di2015NewLine
18402031Di2015UniqueSeparator_db = new DBContext("isostore:/mydb.sdf");Di2015NewLineDataLoadOptions loadOptions = new DataLoadOptions();Di2015NewLineloadOptions.LoadWith<Person>(p => p.Numbers);Di2015NewLine_db.LoadOptions = loadOptions;Di2015NewLine
18402310Di2015UniqueSeparatorarray.Select((num, index) => Math.Pow(num, items.Length - index - 1)).Sum();Di2015NewLine
18402375Di2015UniqueSeparatorDataTable copyDataTable;Di2015NewLinecopyDataTable = table.Copy();Di2015NewLinecopyDataTable.Columns.Remove("ColB");Di2015NewLine
18402375Di2015UniqueSeparatorint columnIndex = 1;//this will remove the second columnDi2015NewLineDataTable copyDataTable;Di2015NewLinecopyDataTable = table.Copy();Di2015NewLinecopyDataTable.Columns.RemoveAt(columnIndex);Di2015NewLine
18402568Di2015UniqueSeparatorusing (SqlConnection c = new SqlConnection(connString))Di2015NewLineusing (SqlCommand cmd = new SqlCommand(sql, c))Di2015NewLine{Di2015NewLine    cmd.Parameters.AddWithValue("@field1", myDgrow.Cells["field1"].Value);Di2015NewLine    ...Di2015NewLineDi2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
18402568Di2015UniqueSeparatorsql
18402568Di2015UniqueSeparatorUPDATE table SET field1 = @field1, field2 = @field2 WHERE fieldId = @fieldIdDi2015NewLine
18402568Di2015UniqueSeparatorforeach
18402568Di2015UniqueSeparatormyCmd
18402568Di2015UniqueSeparatorcmd
18402568Di2015UniqueSeparatorsql
18402568Di2015UniqueSeparatorINSERT
18402583Di2015UniqueSeparatorFillClosedCurve
18402583Di2015UniqueSeparatorprivate void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine{Di2015NewLine    PointF[] arrayDuplicatedPointAtStartAndEnd =Di2015NewLine    {Di2015NewLine        new PointF(20.0F, 20.0F),Di2015NewLine        new PointF(150.0F, 50.0F),Di2015NewLine        new PointF(150.0F, 150.0F),Di2015NewLine        new PointF(20.0F, 20.0F),Di2015NewLine    };Di2015NewLineDi2015NewLine    PointF[] arrayWithoutPointOverlap =Di2015NewLine    {Di2015NewLine        new PointF(20.0F, 20.0F),Di2015NewLine        new PointF(150.0F, 50.0F),Di2015NewLine        new PointF(150.0F, 150.0F)Di2015NewLine    };Di2015NewLineDi2015NewLine    float tension = 0.4F;Di2015NewLineDi2015NewLine    using (SolidBrush redBrush = new SolidBrush(Color.Red))Di2015NewLine    {Di2015NewLine        e.Graphics.FillClosedCurve(redBrush, arrayDuplicatedPointAtStartAndEnd, FillMode.Winding, tension);Di2015NewLine    }Di2015NewLineDi2015NewLine    e.Graphics.TranslateTransform(110.0f, 0.0f, MatrixOrder.Prepend);Di2015NewLineDi2015NewLine    using (SolidBrush blueBrush = new SolidBrush(Color.Blue))Di2015NewLine    {Di2015NewLine        e.Graphics.FillClosedCurve(blueBrush, arrayWithoutPointOverlap, FillMode.Winding, tension);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18402629Di2015UniqueSeparatorIVsEditorFactory
18402629Di2015UniqueSeparatorFileExtensionToContentTypeDefinitionAttribute
18402629Di2015UniqueSeparatorDjangoEditorFactory
18402629Di2015UniqueSeparatorTextBufferEventListener
18402807Di2015UniqueSeparatorDateTime.Now - TimeSpan.FromSeconds(Settings.Default.Hold)
18402807Di2015UniqueSeparatorentry
18402807Di2015UniqueSeparatorselect *Di2015NewLinefrom [SomeTable]Di2015NewLinewhere @foo > lasthelloDi2015NewLineand isConnect <> 'Disconnected'Di2015NewLine
18402807Di2015UniqueSeparatordatediff
18402833Di2015UniqueSeparator... "|sox \\"path with spaces/file1.mp3\\" ..."
18403024Di2015UniqueSeparatorget
18403024Di2015UniqueSeparatorTest
18403024Di2015UniqueSeparatorget
18403042Di2015UniqueSeparatorForEach
18403042Di2015UniqueSeparator.ForEach(x => {Di2015NewLine    x.BtnColor = Color.Red.ToString();Di2015NewLine    x.OtherColor = Color.Blue.ToString();Di2015NewLine});Di2015NewLine
18403042Di2015UniqueSeparatorforeach
18403042Di2015UniqueSeparatorvar itemsToChange = objFreecusatomization.AllCustomizationButtonListDi2015NewLine     .Where(p => p.CategoryID == btnObj.CategoryIDDi2015NewLine                 && p.IsSelectedDi2015NewLine                 && p.ID == btnObj.ID);Di2015NewLineDi2015NewLineforeach (var item in itemsToChange)Di2015NewLine{Di2015NewLine    item.BtnColor = Color.Red.ToString();Di2015NewLine    item.OtherColor = Color.Blue.ToString();Di2015NewLine}Di2015NewLine
18403042Di2015UniqueSeparatorforeach
18403059Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    name: "Plugin",Di2015NewLine    url: "{pluginName}/{controller}/{action}/{id}",Di2015NewLine    defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }Di2015NewLine);Di2015NewLineDi2015NewLineroutes.MapRoute(Di2015NewLine    name: "Default",Di2015NewLine    url: "{controller}/{action}/{id}",Di2015NewLine    defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }Di2015NewLine);Di2015NewLine
18403312Di2015UniqueSeparatormSum
18403312Di2015UniqueSeparatormSum = mSum + 1
18403312Di2015UniqueSeparator5)
18403312Di2015UniqueSeparatorThread2
18403312Di2015UniqueSeparatormSum = mSum + 1
18403312Di2015UniqueSeparatormSum + 1
18403481Di2015UniqueSeparatorprivate static void OpenProcessIfNeeded(String file)Di2015NewLine{Di2015NewLine    using (ManagementObjectSearcher mos = new ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process"))Di2015NewLine    {Di2015NewLine        foreach (ManagementObject mo in mos.Get())Di2015NewLine        {Di2015NewLine            if (mo["CommandLine"] != null &&Di2015NewLine                mo["CommandLine"].ToString().IndexOf(file, StringComparison.InvariantCultureIgnoreCase) > -1)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Found!: " + mo["CommandLine"]);Di2015NewLine                return;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    Process.Start(file);Di2015NewLine}Di2015NewLine
18403543Di2015UniqueSeparatorListViewItem
18403543Di2015UniqueSeparator ListViewItem item = new ListViewItem();Di2015NewLine
18403543Di2015UniqueSeparator item.Text = "url ..." // Column 0 (Url)Di2015NewLine
18403543Di2015UniqueSeparator item.SubItems.Add("time..."); // Column 1 (Time)Di2015NewLine
18403543Di2015UniqueSeparatorListViewItem
18403543Di2015UniqueSeparator listViewCookies.Items.Add(item);Di2015NewLine
18403543Di2015UniqueSeparator   listViewCookies.Columns.Add("TYPED URL", 300);Di2015NewLine   listViewCookies.Columns.Add("TIME", 400);Di2015NewLineDi2015NewLine        ListViewItem item = new ListViewItem();Di2015NewLineDi2015NewLineDi2015NewLine        using (RegistryKey rk = Registry.Users.OpenSubKey(strSID + @"\\Software\\Microsoft\\Internet Explorer\\TypedURLs"))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                foreach (string u in rk.GetValueNames())Di2015NewLine                {Di2015NewLineDi2015NewLine                    item.Text = rk.GetValue(u).ToString();Di2015NewLineDi2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine            catch { }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        using (RegistryKey rk = Registry.Users.OpenSubKey(strSID + @"\\Software\\Microsoft\\Internet Explorer\\TypedURLsTime"))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                foreach (string u in rk.GetValueNames())Di2015NewLine                {Di2015NewLineDi2015NewLine                    object val = rk.GetValue(u);Di2015NewLineDi2015NewLine                    DateTime output = DateTime.MinValue;Di2015NewLine                    if (val is byte[] && ((byte[])val).Length == 8)Di2015NewLine                    {Di2015NewLine                        byte[] bytes = (byte[])val;Di2015NewLineDi2015NewLine                        System.Runtime.InteropServices.ComTypes.FILETIME ft = new System.Runtime.InteropServices.ComTypes.FILETIME();Di2015NewLine                        int valLow = bytes[0] + 256 * (bytes[1] + 256 * (bytes[2] + 256 * bytes[3]));Di2015NewLine                        int valTwo = bytes[4] + 256 * (bytes[5] + 256 * (bytes[6] + 256 * bytes[7]));Di2015NewLine                        ft.dwLowDateTime = valLow;Di2015NewLine                        ft.dwHighDateTime = valTwo;Di2015NewLineDi2015NewLine                        DateTime UTC = DateTime.FromFileTimeUtc((((long)ft.dwHighDateTime) << 32) + ft.dwLowDateTime);Di2015NewLine                        TimeZoneInfo lcl = TimeZoneInfo.Local;Di2015NewLine                        TimeZoneInfo utc = TimeZoneInfo.Utc;Di2015NewLine                        output = TimeZoneInfo.ConvertTime(UTC, utc, lcl);Di2015NewLineDi2015NewLine                        item.SubItems.Add(output.ToString());Di2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            catch { }Di2015NewLine        }Di2015NewLineDi2015NewLine        listViewCookies.Items.Add(item);Di2015NewLineDi2015NewLine    }Di2015NewLine
18403674Di2015UniqueSeparatorPageSize.A4
18403674Di2015UniqueSeparatorRectangle
18403674Di2015UniqueSeparatorDocument
18403674Di2015UniqueSeparatorX
18403674Di2015UniqueSeparatorY
18403674Di2015UniqueSeparatorRectangle
18403674Di2015UniqueSeparatorimage.setAbsolutePosition(rect.Left, rect.Top - image.ScaledHeight);Di2015NewLine
18403674Di2015UniqueSeparatorrect
18403674Di2015UniqueSeparatorOnEndPage()
18403674Di2015UniqueSeparatoronEndPage
18403674Di2015UniqueSeparatorrect = reader.GetCropBox(page);Di2015NewLine
18403674Di2015UniqueSeparatorrect = reader.GetPageSize(page);Di2015NewLine
18403674Di2015UniqueSeparatorpage
18403674Di2015UniqueSeparator1
18403674Di2015UniqueSeparatorrect
18403674Di2015UniqueSeparatorx = 0
18403674Di2015UniqueSeparatory = 0
18403674Di2015UniqueSeparator(0, 0)
18403693Di2015UniqueSeparatorhotkey = new GlobalHotkeys();Di2015NewLinehotkey.RegisterGlobalHotKey( (int) Keys.F11, GlobalHotkeys.MOD_CONTROL, this.Handle);Di2015NewLine
18403705Di2015UniqueSeparatorforeach (var ps in new MyEntity().MyObject.Select(o => new { o.p1, o.p2 }))Di2015NewLine       {Di2015NewLine            p1Sum += ps.p1;Di2015NewLine            p2Sum += ps.p2;   Di2015NewLine       } Di2015NewLine
18403842Di2015UniqueSeparatortextToFind
18403842Di2015UniqueSeparator/* " */
18403842Di2015UniqueSeparator/*
18403842Di2015UniqueSeparator*/
18403842Di2015UniqueSeparatortextToFind
18403842Di2015UniqueSeparator'
18403891Di2015UniqueSeparatorIs
18403891Di2015UniqueSeparatorHas
18403891Di2015UniqueSeparatorCan
18403891Di2015UniqueSeparatorIsDeleted
18403891Di2015UniqueSeparatorIs
18403891Di2015UniqueSeparatorif (object.IsDeleted)Di2015NewLine
18403922Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    HttpWebRequest req = WebRequest.Create(url) as HttpWebRequest;Di2015NewLineDi2015NewLine    WebResponse wr = req.GetResponse();Di2015NewLine}Di2015NewLinecatch (WebException wex)Di2015NewLine{Di2015NewLine    var pageContent = new StreamReader(wex.Response.GetResponseStream())Di2015NewLine                          .ReadToEnd();Di2015NewLine}Di2015NewLine
18404062Di2015UniqueSeparatorsuppliers.Where(s => stringlist.Contains(s.CompanyName))Di2015NewLine         .Select(s => s.CompanyName) // remove if you need whole supplier objectDi2015NewLine         .Distinct();Di2015NewLine
18404062Di2015UniqueSeparatorSELECT DISTINCT [t0].[FCompanyName]Di2015NewLineFROM [dbo].[Supplier] AS [t0]Di2015NewLineWHERE [t0].[CompanyName] IN (@p0, @p1, @p2)Di2015NewLine
18404062Di2015UniqueSeparatorcompanyNames
18404062Di2015UniqueSeparatorstringlist
18404112Di2015UniqueSeparator@Html.CheckBoxFor(model => model.Employees[0].IsChecked)Di2015NewLine@Html.HiddenFor(model => model.Employees[0].LastName)Di2015NewLine@Html.HiddenFor(model => model.Employees[0].FirstName)Di2015NewLine@Html.HiddenFor(model => model.Employees[0].EmployeeId)Di2015NewLine@Html.HiddenFor(model => model.Employees[0].Building)Di2015NewLine
18404112Di2015UniqueSeparatorEmployeeForList
18404112Di2015UniqueSeparatorEmployees
18404112Di2015UniqueSeparatormodel
18404112Di2015UniqueSeparatorIndexModel
18404116Di2015UniqueSeparatorforeach (var item in MyList)Di2015NewLine    MyListBox.Items.Add(item.WhateverFieldYouWantToBind, false); // second param is whether it's checked or notDi2015NewLine
18404180Di2015UniqueSeparatorwriter.BaseStream.Length % 2 == 0Di2015NewLine
18404284Di2015UniqueSeparatorTimeSpan.FromMinutes(minutesInDouble)
18404288Di2015UniqueSeparatorTreeViewItem.IsSelected
18404288Di2015UniqueSeparatorHierarchicalDataTemplate
18404288Di2015UniqueSeparatorItemContainerStyle
18404288Di2015UniqueSeparatorTreeView
18404288Di2015UniqueSeparator<TreeView>Di2015NewLine    <TreeView.ItemContainerStyle>Di2015NewLine        <Style TargetType="{x:Type TreeViewItem}">Di2015NewLine        <!-- put logic for handling expansion here -->Di2015NewLine        </Style>Di2015NewLine    </TreeView.ItemContainerStyle>Di2015NewLine</TreeView>Di2015NewLine
18404288Di2015UniqueSeparatorTrigger
18404288Di2015UniqueSeparatorDependencyProperty
18404288Di2015UniqueSeparatorIValueConverter
18404288Di2015UniqueSeparatorMyStatus
18404288Di2015UniqueSeparatorbool
18404288Di2015UniqueSeparatorTwoWay
18404288Di2015UniqueSeparatorSetter
18404288Di2015UniqueSeparatorStyle
18404288Di2015UniqueSeparator<Style TargetType="{x:Type TreeViewItem}">Di2015NewLine    <Setter Property="IsExpanded" Di2015NewLine            Value="{Binding MyStatus, Converter={StaticResource statusToBool}}" />Di2015NewLine</Style>Di2015NewLine
18404288Di2015UniqueSeparatorpublic object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine{Di2015NewLine    return ((MyStatus)value) == MyStatus.Opened;Di2015NewLine}Di2015NewLineDi2015NewLinepublic object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine{Di2015NewLine    return ((bool)value) ? MyStatus.Opened : MyStatus.Closed;Di2015NewLine}Di2015NewLine
18404390Di2015UniqueSeparatorClassB
18404390Di2015UniqueSeparatorClassB
18404390Di2015UniqueSeparatorinternal
18404390Di2015UniqueSeparatorpublic
18404390Di2015UniqueSeparatorpublic ClassB() { } Di2015NewLine
18404528Di2015UniqueSeparator[DllImport("advapi32.dll", EntryPoint="ChangeServiceConfig2")]Di2015NewLinepublic static extern bool Di2015NewLineChangeServiceFailureActions( IntPtr hService, int dwInfoLevel,Di2015NewLine[ MarshalAs( UnmanagedType.Struct ) ] ref SERVICE_FAILURE_ACTIONS lpInfo );Di2015NewLineDi2015NewLineDi2015NewLine[DllImport("advapi32.dll", EntryPoint="ChangeServiceConfig2")]Di2015NewLinepublic static extern bool Di2015NewLineChangeServiceDescription( IntPtr hService, int dwInfoLevel, Di2015NewLine[ MarshalAs( UnmanagedType.Struct ) ] ref SERVICE_DESCRIPTION lpInfo );Di2015NewLine
18404662Di2015UniqueSeparatorAreaRegistration.RegisterAllAreas()
18404666Di2015UniqueSeparatorif(list[number] != 0)Di2015NewLine
18404666Di2015UniqueSeparatorfor(int j = 0; j <= 1000001; j++)Di2015NewLine{Di2015NewLine    list.Add(0);Di2015NewLine}Di2015NewLine
18404732Di2015UniqueSeparatorvar result = (from p in context.PermissionsDi2015NewLine                      join px in m.RolePermissions on p.roleID equals px.roleIDDi2015NewLine                      select p);Di2015NewLine
18404751Di2015UniqueSeparatorkernel
18404751Di2015UniqueSeparatorkernel
18404751Di2015UniqueSeparator// option a (recommended)Di2015NewLinevar kernel = new StandardKernel(new Bindings());Di2015NewLinevar bar = kernel.Get<IDependency>();Di2015NewLineAssert.IsFalse(bar.DependencyIsNull());Di2015NewLineDi2015NewLine// option b (not recommended.. but do-able)Di2015NewLinevar kernel = new StandardKernel(new Bindings());Di2015NewLinevar bar = new Depender();Di2015NewLinekernel.Inject(bar); // injects after the factDi2015NewLineAssert.IsFalse(bar.DependencyIsNull());Di2015NewLine
18404751Di2015UniqueSeparatorDependencyIsNull
18404751Di2015UniqueSeparatorpublic interface IDependency {Di2015NewLine    bool DependencyIsNull();Di2015NewLine}Di2015NewLine
18404804Di2015UniqueSeparatorDouble rDouble;Di2015NewLineif (Double.TryParse(response.Radius, out rDouble))Di2015NewLine{Di2015NewLine    var radius = Math.Round(Math.Min(Int16.MaxValue, Math.Max(Int16.MinValue, rDouble)));Di2015NewLine    if (radius.ToString() != response.Radius))Di2015NewLine    {Di2015NewLine        Logger.Info(String.Format("Response: Received range value {0} is outside the range of SmallInt, thus it is capped to nearest value of SmallInt i.e. {1}", response.Radius, radius));Di2015NewLine    }Di2015NewLine    response.Radius = radius.ToString();Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Logger.Info("Response: Range " + response.Radius + " is not a valid number");Di2015NewLine}Di2015NewLine
18404935Di2015UniqueSeparatorListBox
18404935Di2015UniqueSeparatorGrid
18404935Di2015UniqueSeparatorCheckBox
18404935Di2015UniqueSeparatorGrid
18404935Di2015UniqueSeparatorImage
18404935Di2015UniqueSeparatorTextBlock
18404935Di2015UniqueSeparatorCheckBox
18404935Di2015UniqueSeparatorMicrosoft.VisualStudio.PlatformUI.ImageCheckBox
18404935Di2015UniqueSeparatorBorder
18404935Di2015UniqueSeparatorImage
18404935Di2015UniqueSeparatorImage
18404935Di2015UniqueSeparatorpack://application:,,,/Microsoft.VisualStudio.Shell.11.0;component/UI/Images/pinned normal.pngDi2015NewLineDi2015NewLinepack://application:,,,/Microsoft.VisualStudio.Shell.11.0;component/UI/Images/unpinned normal.pngDi2015NewLine
18404935Di2015UniqueSeparatorText
18404935Di2015UniqueSeparatorIsPinned
18404935Di2015UniqueSeparatorCheckBox
18404935Di2015UniqueSeparatorControlTemplate
18404935Di2015UniqueSeparatorControlTemplate.Triggers
18404935Di2015UniqueSeparatorIsChecked
18404935Di2015UniqueSeparatorImage.Source
18404935Di2015UniqueSeparatorDataTemplate
18404935Di2015UniqueSeparatorListBox.ItemTemplate
18404935Di2015UniqueSeparatorStackPanel
18404935Di2015UniqueSeparatorOrientation="Horizontal"
18404935Di2015UniqueSeparatorStyle
18404935Di2015UniqueSeparatorTextBlock
18404935Di2015UniqueSeparatorCheckBox.IsChecked
18404935Di2015UniqueSeparatorDataTemplate
18404935Di2015UniqueSeparator{Binding IsPinned}
18404935Di2015UniqueSeparatorTextBlock.Text
18404935Di2015UniqueSeparator{Binding Text}
18404935Di2015UniqueSeparatorListBox.ItemContainerStyle
18404935Di2015UniqueSeparatorHorizontalContentAlignment="Stretch"
18404935Di2015UniqueSeparatorDataTemplate
18404973Di2015UniqueSeparatorvar q = context.Istc0.Include("Interests").Where(a => a.IIsin == listKey).Select(a => newDi2015NewLine    {Di2015NewLine        Istc0 = a,Di2015NewLine        Interests = a.Interests.Where(d => d.InDat >= date)Di2015NewLine    }).ToList();Di2015NewLineDi2015NewLineDi2015NewLinevar xxx = q[0].Istc0;Di2015NewLinevar yyy = q.OrderByDescending(d => d.InDat).Take(1).SingleOrDefault().Istc0;Di2015NewLineDi2015NewLineDictionary<string,decimal> result = new Dictionary<string,decimal>();Di2015NewLineDi2015NewLineresult.Add("all",xxx);Di2015NewLineresult.Add("previous",yyy);Di2015NewLineDi2015NewLinereturn result;Di2015NewLine
18404973Di2015UniqueSeparatorpublic void GetInterestRates(string listKey, out decimal currentRate, out decimal previousRate)Di2015NewLine{Di2015NewLine    var q = context.Istc0.Include("Interests").Where(a => a.IIsin == listKey).Select(a => newDi2015NewLine        {Di2015NewLine            Istc0 = a,Di2015NewLine            Interests = a.Interests.Where(d => d.InDat >= date)Di2015NewLine        }).ToList();Di2015NewLineDi2015NewLineDi2015NewLine    var currentRate = q[0].Istc0;Di2015NewLine    var previousRate = q.OrderByDescending(d => d.InDat).Take(1).SingleOrDefault().Istc0;Di2015NewLineDi2015NewLine}Di2015NewLine
18404973Di2015UniqueSeparatordecimal currentRate , previousRate;Di2015NewLineGetInterestRates(listKey, currentRate , previousRate);Di2015NewLine
18405056Di2015UniqueSeparatorprotected
18405056Di2015UniqueSeparatorinternal
18405056Di2015UniqueSeparatorSomeOtherClass
18405056Di2015UniqueSeparatorSomeOtherClass
18405056Di2015UniqueSeparatorSomeOtherClass
18405056Di2015UniqueSeparatorSomeClass
18405056Di2015UniqueSeparatorinternal class UnitTestDi2015NewLine{Di2015NewLine    [Fact]Di2015NewLine    public TestDbInterface()Di2015NewLine    {Di2015NewLine        var someClass = new SomeClass(new MockedSomeOtherClass())Di2015NewLineDi2015NewLine        var result = someClass.SomeMethod()Di2015NewLineDi2015NewLine        Assert.AreEqual("42", result);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18405089Di2015UniqueSeparatorMonitor
18405089Di2015UniqueSeparatorpublic sealed class SignallerDi2015NewLine{Di2015NewLine    public void PulseAll()Di2015NewLine    {Di2015NewLine        lock (_lock)Di2015NewLine        {Di2015NewLine            Monitor.PulseAll(_lock);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Wait()Di2015NewLine    {Di2015NewLine        Wait(Timeout.Infinite);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Wait(int timeoutMilliseconds)Di2015NewLine    {Di2015NewLine        lock (_lock)Di2015NewLine        {Di2015NewLine            return Monitor.Wait(_lock, timeoutMilliseconds);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly object _lock = new object();Di2015NewLine}Di2015NewLine
18405089Di2015UniqueSeparatorpublic static class ProgramDi2015NewLine{Di2015NewLine    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        _startCounter = new CountdownEvent(NUM_THREADS);Di2015NewLineDi2015NewLine        for (int i = 0; i < NUM_THREADS; ++i)Di2015NewLine        {Di2015NewLine            int id = i;Di2015NewLine            Task.Factory.StartNew(() => test(id));Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Waiting for " + NUM_THREADS + " threads to start");Di2015NewLine        _startCounter.Wait(); // Wait for all threads to have started.Di2015NewLine        Thread.Sleep(100);Di2015NewLine        Console.WriteLine("Threads all started. Setting signal now.");Di2015NewLine        _signal.PulseAll();Di2015NewLine        Thread.Sleep(1000);Di2015NewLine        Console.WriteLine("\\n{0}/{1} threads received the signal.\\n\\n", _signalledCount, NUM_THREADS);Di2015NewLine        Console.WriteLine("Press any key to exit.");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void test(int id)Di2015NewLine    {Di2015NewLine        _startCounter.Signal(); // Used so main thread knows when all threads have started.Di2015NewLine        _signal.Wait();Di2015NewLine        Interlocked.Increment(ref _signalledCount);Di2015NewLine        Console.WriteLine("Task " + id + " received the signal.");Di2015NewLine    }Di2015NewLineDi2015NewLine    private const int NUM_THREADS = 20;Di2015NewLineDi2015NewLine    private static readonly Signaller _signal = new Signaller();Di2015NewLine    private static CountdownEvent _startCounter;Di2015NewLine    private static int _signalledCount;Di2015NewLine}Di2015NewLine
18405202Di2015UniqueSeparator// just for testing NO magic numbers!Di2015NewLinevar pagamentoId = 1;Di2015NewLinevar duplicata = new Duplicata();Di2015NewLineduplicata.PAGAMENTO_ID = pagamentoId;Di2015NewLineduplicata.VALOR = 1000;Di2015NewLineduplicata.CLIENTE_ID = 23;Di2015NewLineDi2015NewLine// add the rest of propertiesDi2015NewLineDi2015NewLineDi2015NewLine// then...Di2015NewLinecontext.AddObject("Duplicatas", duplicata);Di2015NewLinecontext.SaveChanges();Di2015NewLine
18405219Di2015UniqueSeparatorpublic IEnumerable<Location> Get()Di2015NewLine{Di2015NewLine    return _sessionDi2015NewLine            .QueryOver<Data.Model.Location>()Di2015NewLine            .Fetch(x => x.Departments).EagerDi2015NewLine            .List()Di2015NewLine            .Select(_locationMapper.CreateLocation);Di2015NewLine}Di2015NewLine
18405295Di2015UniqueSeparatorbyteWidth = Math.Ceiling(bitmapDataWidth / 8.0);Di2015NewLine
18405317Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    var contacts = new List<Contact>();Di2015NewLineDi2015NewLine    contacts.Add(new Contact { Firstname = "name 1", Lastname = "lastname 1", Email = "email 1", PhoneNumber = "phone 1" });Di2015NewLine    contacts.Add(new Contact { Firstname = "name 2", Lastname = "lastname 2", Email = "email 2", PhoneNumber = "phone 2" });Di2015NewLineDi2015NewLine    Excel.Application app = new Excel.Application();Di2015NewLine    app.Visible = true;Di2015NewLine    var workbook = app.Workbooks.Open(@"C:\\testit.xlsx");Di2015NewLine    _Worksheet worksheet = workbook.Sheets["Sheet1"];Di2015NewLine    Range xlRange = worksheet.UsedRange;Di2015NewLine    worksheet = (_Worksheet)workbook.ActiveSheet;Di2015NewLineDi2015NewLine    worksheet.Cells[1, 1] = "First Name";Di2015NewLine    worksheet.Cells[1, 2] = "Last Name";Di2015NewLine    worksheet.Cells[1, 3] = "Email";Di2015NewLineDi2015NewLine    int row = 4;Di2015NewLineDi2015NewLine    foreach (var contact in contacts)Di2015NewLine    {Di2015NewLine        row++;Di2015NewLineDi2015NewLine        worksheet.Cells[row, 1] = contact.Firstname;Di2015NewLine        worksheet.Cells[row, 2] = contact.Lastname;Di2015NewLine        worksheet.Cells[row, 3] = contact.Email;Di2015NewLine        worksheet.Cells[row, 4] = contact.PhoneNumber;Di2015NewLine    }Di2015NewLineDi2015NewLine    app.UserControl = true;Di2015NewLine    app.Quit();Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ContactDi2015NewLine{Di2015NewLine    public string Firstname { get; set; }Di2015NewLine    public string Lastname { get; set; }Di2015NewLine    public string Email { get; set; }Di2015NewLine    public string PhoneNumber { get; set; }Di2015NewLine}Di2015NewLine
18405327Di2015UniqueSeparatorprivate Steema.TeeChart.TChart tChart1; Di2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine  InitializeComponent();Di2015NewLine  tChart1 = new Steema.TeeChart.TChart();Di2015NewLine  this.Controls.Add(tChart1);Di2015NewLine  tChart1.Left = 100;Di2015NewLine  tChart1.Top = 50;Di2015NewLine  tChart1.Width = 500;Di2015NewLine  tChart1.Height = 350; Di2015NewLine  tChart1.Dock = DockStyle.Fill; Di2015NewLine  InitialzieChart(); Di2015NewLine}Di2015NewLineprivate void InitialzieChart()Di2015NewLine{Di2015NewLine  Steema.TeeChart.Styles.Bar bar1 = new Steema.TeeChart.Styles.Bar(tChart1.Chart);Di2015NewLine  DateTime dt = DateTime.Today;Di2015NewLine  Random rnd = new Random();Di2015NewLine  bar1.XValues.DateTime = true; Di2015NewLine  //bar1.dateDi2015NewLine  for (int i = 0; i < 20; i++)Di2015NewLine  {Di2015NewLine    bar1.Add(dt, rnd.Next(100));Di2015NewLine    dt = dt.AddDays(5); Di2015NewLine  }Di2015NewLineDi2015NewLine  tChart1.Axes.Bottom.Labels.Angle = 45;Di2015NewLine  tChart1.Panel.MarginLeft = 10;Di2015NewLine  tChart1.Legend.Alignment = Steema.TeeChart.LegendAlignments.Bottom; Di2015NewLine  AddCustomLabels(); Di2015NewLine}Di2015NewLineprivate void AddCustomLabels()Di2015NewLine{Di2015NewLine  tChart1.Axes.Bottom.Labels.Items.Clear();Di2015NewLine  for (int i = 0; i < tChart1[0].Count; i++)Di2015NewLine  {Di2015NewLine    tChart1.Axes.Bottom.Labels.Items.Add(tChart1[0].XValues[i], DateTime.FromOADate(tChart1[0].XValues[i]).ToLongDateString()); Di2015NewLine  }Di2015NewLine}Di2015NewLine
18405711Di2015UniqueSeparatorvar str =   "<ControlTemplate TargetType=\\"HyperlinkButton\\" xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\">" +Di2015NewLine            "   <TextBlock HorizontalAlignment=\\"{TemplateBinding HorizontalContentAlignment}\\" Text=\\"{TemplateBinding Content}\\" VerticalAlignment=\\"{TemplateBinding VerticalContentAlignment}\\"/>" +Di2015NewLine            "</ControlTemplate>";Di2015NewLineDi2015NewLinevar template = (ControlTemplate)XamlReader.Load(str);  Di2015NewLineDi2015NewLineHyperlinkButton hyperlinkButton = new HyperlinkButton()Di2015NewLine{Di2015NewLine    Content = "Click me",Di2015NewLine    HorizontalAlignment = HorizontalAlignment.Left,Di2015NewLine    NavigateUri = new Uri("http://my-link-com", UriKind.Absolute),Di2015NewLine    Template = templateDi2015NewLine};Di2015NewLine
18405951Di2015UniqueSeparatorforeach (var pd in PatientDrugs)Di2015NewLine{Di2015NewLine    context.PatientDrugsDi2015NewLine        .AddOrUpdate(p => new { p.DispenseDate, p.DrugId }, pd);Di2015NewLine}Di2015NewLine
18405993Di2015UniqueSeparatorreturn id.ToString() + " " + name + " " + dob.ToString(); Di2015NewLine
18405993Di2015UniqueSeparatorreturn id.ToString() + " " + name.ToString() + " " + dob.ToString();Di2015NewLine
18406046Di2015UniqueSeparatorServiceController sc = new ServiceController("ArcGIS Server", "192.168.36.22");Di2015NewLineDi2015NewLinesc.Start();Di2015NewLinesc.Stop();Di2015NewLine
18406134Di2015UniqueSeparatorContextMenu
18406134Di2015UniqueSeparatorDiagramSurface
18406134Di2015UniqueSeparatorDiagramSurface
18406134Di2015UniqueSeparatorContextMenu
18406134Di2015UniqueSeparatorResources
18406134Di2015UniqueSeparator<Application.Resources>Di2015NewLine    <ContextMenu x:Key="ContextMenu">Di2015NewLine        <MenuItem Header="Save" Click="MenuItem_Click"/>Di2015NewLine    </ContextMenu>Di2015NewLine</Application.Resources>Di2015NewLine
18406134Di2015UniqueSeparatorContextMenu
18406134Di2015UniqueSeparatorContextMenu menu = (ContextMenu)Application.Current.FindResource("ContextMenu");Di2015NewLineelement.ContextMenu = contextMenu;Di2015NewLine
18406158Di2015UniqueSeparatorproper type
18406158Di2015UniqueSeparatorconstraints: new { httpMethod = new System.Web.Http.Routing.HttpMethodConstraint(HttpMethod.Get) }Di2015NewLine
18406158Di2015UniqueSeparatorSystem.Web.Routing.HttpMethodConstraint
18406272Di2015UniqueSeparator<Primitives:DatePickerTextBox x:Name="TextBox"Di2015NewLine                                                      BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                                                      BorderThickness="{TemplateBinding BorderThickness}"Di2015NewLine                                                      IsTabStop="False"Di2015NewLine                                                      Background="{TemplateBinding Background}"Di2015NewLine                                                      Grid.Column="0"Di2015NewLine                                                      Padding="{TemplateBinding Padding}"Di2015NewLine                                                      SelectionBackground="{TemplateBinding SelectionBackground}" />Di2015NewLine
18406315Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        object d = new Person();Di2015NewLine        d.GetType().GetField("Parent").SetValue(d,new Person("Test"));Di2015NewLine        Console.WriteLine(((Person)d).Parent.name);Di2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Person{Di2015NewLine    public String name = "";Di2015NewLine    public Person Parent;Di2015NewLineDi2015NewLine    public Person()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    public Person(String s)Di2015NewLine    {Di2015NewLine        name = s;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18406315Di2015UniqueSeparatorvar assembly = Assembly.LoadFrom("//path");Di2015NewLineDi2015NewLineType type = assembly.GetType("TestFrameWork.University");Di2015NewLinevar Uni = Activator.CreateInstance(type); Di2015NewLinetype = assembly.GetType("TestFrameWork.Student");Di2015NewLinevar student = Activator.CreateInstance(type); Di2015NewLinestudent.University = Uni;Di2015NewLine
18406315Di2015UniqueSeparator class ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Person p = new Person();Di2015NewLineDi2015NewLine        Type t = p.Enuminator.GetType();Di2015NewLine        dynamic e = Activator.CreateInstance(t);Di2015NewLine        FieldInfo [] FieldArray = t.GetFields();Di2015NewLineDi2015NewLine        p.GetType().GetField("Enuminator").SetValue(p, FieldArray[3].GetValue(e));Di2015NewLineDi2015NewLine        Console.WriteLine(p.Enuminator);Di2015NewLine        Console.Read();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Person{Di2015NewLine    public String name = "";Di2015NewLine    public Person Parent;Di2015NewLine    public Enumtest Enuminator;Di2015NewLineDi2015NewLine    public Person()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    public Person(String s)Di2015NewLine    {Di2015NewLine        name = s;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum EnumtestDi2015NewLine{Di2015NewLine    chicken,Di2015NewLine    monkey,Di2015NewLine    frogDi2015NewLine}Di2015NewLine
18406365Di2015UniqueSeparatorIEnumerable<MailItem> mailItems = readPst(@"C:\\Users\\Toseef Abbasi\\AppDataDi2015NewLineDi2015NewLine             \\Local\\Microsoft\\Outlook", "Outltoseefabbasi@hotmail.com-0000000b");Di2015NewLine
18406365Di2015UniqueSeparatorIEnumerable<MailItem> mailItems = readPst(@"C:\\Users\\Toseef Abbasi\\AppDataDi2015NewLineDi2015NewLine             \\Local\\Microsoft\\Outlook\\pstname.pst", "Outltoseefabbasi@hotmail.com-0000000b");Di2015NewLine
18406426Di2015UniqueSeparatorvariable
18406426Di2015UniqueSeparator//first, you have to set the lastChecked = radioButton1 (or another of your radioButtons)Di2015NewLineRadioButton lastChecked;Di2015NewLine//Click event handler used for all the radioButtonsDi2015NewLineprivate void RadiosClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   RadioButton radio = sender as RadioButton;Di2015NewLine   if (radio != lastChecked){Di2015NewLine      radio.Checked = true;Di2015NewLine      lastChecked.Checked = false;Di2015NewLine      lastChecked = radio;Di2015NewLine   }Di2015NewLine   //else radio.Checked = !radio.Checked;     Di2015NewLine}Di2015NewLine
18406426Di2015UniqueSeparatoruncheck
18406426Di2015UniqueSeparator//
18406426Di2015UniqueSeparatorelse
18406581Di2015UniqueSeparator[JsonProperty(propertyName: "address")]Di2015NewLine
18406581Di2015UniqueSeparator"address"
18406581Di2015UniqueSeparatorstring json = Newtonsoft.Json.JsonConvert.SerializeObject(Class);Di2015NewLine
18406910Di2015UniqueSeparatorXmlSerializer
18406921Di2015UniqueSeparatorPage.IsPostBack
18406921Di2015UniqueSeparatorObjectDataSource
18406921Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if (!Page.IsPostBack)Di2015NewLine   {Di2015NewLine     //bind your datasource here (something like below)Di2015NewLine     userDropDown.DataSource = GetCustomers();Di2015NewLine     userDropDown.DataBind();Di2015NewLine   }Di2015NewLine}Di2015NewLine
18406963Di2015UniqueSeparatorIDENTITY_INSERT
18407164Di2015UniqueSeparatornewContext.YourEntity.Attach(YourAlreadyPopulatedObject)
18407567Di2015UniqueSeparatorfrom item in xdoc.Descendants("situation id")Di2015NewLine//                                      ^Di2015NewLine
18407567Di2015UniqueSeparator"situation"
18407567Di2015UniqueSeparator<situation>
18407567Di2015UniqueSeparator<d2LogicalModel xmlns="http://datex2.eu/schema/1_0/1_0" modelBaseVersion="1.0">Di2015NewLine
18407567Di2015UniqueSeparatorvar ns = xdoc.Root.Name.Namespace;Di2015NewLine
18407567Di2015UniqueSeparatorfrom item in xdoc.Descendants(ns + "situation")Di2015NewLine// ...Di2015NewLineitem.Element(ns + "impactOnTraffic").ValueDi2015NewLineitem.Element(ns + "trafficRestrictionType").ValueDi2015NewLine
18407567Di2015UniqueSeparator<impactOnTraffic>
18407567Di2015UniqueSeparator<trafficRestrictionType>
18407567Di2015UniqueSeparator<situation>
18407567Di2015UniqueSeparatorTitle = items.Descendants(ns + "impactOnTraffic").Single().Value,Di2015NewLineDescription = item.Descendants(ns + "trafficRestrictionType").Single().ValueDi2015NewLine
18407730Di2015UniqueSeparatorchat.server.send($('#msg').val());Di2015NewLine
18407822Di2015UniqueSeparatorExcept
18407822Di2015UniqueSeparatorvar toDelete = files.Where(x => x.Contains(file)).OrderByDescending(x => x).Skip(1);Di2015NewLine
18407876Di2015UniqueSeparatorStaticResource
18407876Di2015UniqueSeparatorx:Key
18407876Di2015UniqueSeparatorObjectDataProvider
18407876Di2015UniqueSeparator<ObjectDataProvider x:Key="NAME1" ObjectType="{x:Type local:TYPENAME}"/>Di2015NewLine<ObjectDataProvider x:Key="NAME2" ObjectInstance="{StaticResource NAME1}" MethodName="METHODNAME"/>Di2015NewLine
18407876Di2015UniqueSeparatorBinding
18407876Di2015UniqueSeparatorStaticResource
18407876Di2015UniqueSeparatorObjectDataProvider
18407876Di2015UniqueSeparatorNAME1
18407876Di2015UniqueSeparatorNAME2
18407876Di2015UniqueSeparatorStaticResource
18407876Di2015UniqueSeparatorclr-namespace
18407876Di2015UniqueSeparatorpublic
18407876Di2015UniqueSeparatorinternal
18408027Di2015UniqueSeparatoriTextSharp.text.html.simpleparser.HTMLWorker
18408038Di2015UniqueSeparatorViewState
18408038Di2015UniqueSeparatorSession
18408038Di2015UniqueSeparator[WebMethod(EnableSession = true)]Di2015NewLine[ScriptMethod]Di2015NewLinepublic static string populateModels(string[] makeIds)Di2015NewLine{Di2015NewLine    // Check if value is in SessionDi2015NewLine    if(HttpContext.Current.Session["SuperSecret"] != null)Di2015NewLine    {Di2015NewLine        // Getting the value out of SessionDi2015NewLine        var superSecretValue = HttpContext.Current.Session["SuperSecret"].ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Storing the value in SessionDi2015NewLine    HttpContext.Current.Session["SuperSecret"] = mySuperSecretValue;Di2015NewLine}Di2015NewLine
18408038Di2015UniqueSeparatorSession
18408188Di2015UniqueSeparator-> { type == QueryType.Decimal }?   ^(DECIMALQUERY[$QUERY] ID)Di2015NewLine-> { type == QueryType.Date }?      ^(DATEQUERY[$QUERY] ID)Di2015NewLine-> { type == QueryType.String }?    ^(STRINGQUERY[$QUERY] ID)Di2015NewLine->                                  ^(INVALIDQUERY[$QUERY] ID)Di2015NewLine
18408188Di2015UniqueSeparatorINVALIDQUERY
18408188Di2015UniqueSeparator[$QUERY]
18408192Di2015UniqueSeparator\\\\COMPUTER2\\Share\\Path\\file.ext
18408321Di2015UniqueSeparatorHashSet<string>
18408321Di2015UniqueSeparatorvar types = new HashSet<string>(Addresses.Select(aa => aa.AddressType));Di2015NewLineif (types.Count < Addresses.Count)Di2015NewLine{Di2015NewLine    // You have a duplicate...Di2015NewLine    // ...not necessarily easy to know WHO is the duplicateDi2015NewLine}Di2015NewLine
18408321Di2015UniqueSeparatorAddressType
18408321Di2015UniqueSeparator// And an ISet<T> of existing itemsDi2015NewLinevar types = new HashSet<string>();Di2015NewLineDi2015NewLineforeach (string typeToAdd in Addresses.Select(aa => aa.AddressType))Di2015NewLine{Di2015NewLine    // you can test if typeToAdd is really a new itemDi2015NewLine    // through the return value of ISet<T>.Add:Di2015NewLine    if (!types.Add(typeToAdd))Di2015NewLine    {Di2015NewLine        // ISet<T>.Add returned false, typeToAdd already existsDi2015NewLine    }Di2015NewLine}Di2015NewLine
18408321Di2015UniqueSeparatorCanExecute
18408321Di2015UniqueSeparatorthis.AddCommand = new DelegateCommand<Address>(Di2015NewLine    aa => this.Addresses.Add(aa),Di2015NewLine    aa => !this.Addresses.Any(xx => xx.AddressType == aa.AddressType));Di2015NewLine
18408342Di2015UniqueSeparatorList<OrderInfo> orders = CommerceLibAccess.GetOrdersByRecent(recordCount);Di2015NewLine
18408342Di2015UniqueSeparatorreturn ConvertDataTableToOrders (GenericDataAccess.ExecuteSelectCommand (comm));Di2015NewLine
18408396Di2015UniqueSeparatorEnvironment.SpecialFolder.ApplicationData
18408545Di2015UniqueSeparatorpublic static BatchInfo CreateBatch(IEnumerable<IEnumerable<object>> rows)Di2015NewLine{Di2015NewLine
18408578Di2015UniqueSeparatorActionService
18408578Di2015UniqueSeparatorWeakReference
18408578Di2015UniqueSeparatorRefresh
18408578Di2015UniqueSeparatorViewDidAppear
18408578Di2015UniqueSeparatorOnNavigatedTo
18408578Di2015UniqueSeparatorOnResume
18408578Di2015UniqueSeparatorINotifyPropertyChanged
18408578Di2015UniqueSeparatorINotifyCollectionChanged
18408578Di2015UniqueSeparatorWeakReference
18408617Di2015UniqueSeparatorvar doc = new XmlDocument();Di2015NewLinedoc.Load(fname);Di2015NewLineDi2015NewLineList<string> list = new List<string>();Di2015NewLineforeach(XmlNode node in doc.GetElementsByTagName("D"))Di2015NewLine{Di2015NewLine    list.Add(node.Attributes["cc"].Value);Di2015NewLine}Di2015NewLine
18408641Di2015UniqueSeparatorusing (var g = Graphics.FromImage(pictureBox1.Image)) {Di2015NewLine   g.FillRectangle(Brushes.Tomato, MousePosition.X, MousePosition.Y, 50, 100);Di2015NewLine   pictureBox1.Invalidate();Di2015NewLine}Di2015NewLine
18408702Di2015UniqueSeparatorObservableCollection
18408702Di2015UniqueSeparatorCollectionChanged
18408764Di2015UniqueSeparatorParallel.ForEach()
18408764Di2015UniqueSeparatorTask
18408764Di2015UniqueSeparatorTask
18408764Di2015UniqueSeparatorawait
18408764Di2015UniqueSeparatorMaxDegreeOfParallelism
18408798Di2015UniqueSeparatortestesiteEntities db = new testesiteEntities();//create objectDi2015NewLineDi2015NewLine//select objectDi2015NewLinerblCategoria.DataValueField = "codcategoria"; Di2015NewLinerblCategoria.DataTextField = "dsccategoria";Di2015NewLinerblCategoria.DataSource = db.categoria.Select().ToList();Di2015NewLinerblCategoria.DataBind();//define valores no bullet listDi2015NewLine
18409253Di2015UniqueSeparatorx
18409253Di2015UniqueSeparatorx
18409253Di2015UniqueSeparatorx
18409253Di2015UniqueSeparatorSession["x"] = x;
18409253Di2015UniqueSeparatorViewState["x"] = x;
18409358Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@email", email);Di2015NewLinecmd.Parameters.AddWithValue("@str", str);Di2015NewLinecmd.Parameters.AddWithValue("@base", base1);Di2015NewLineDi2015NewLinecmd.ExecuteNonQuery(); // <--- this line hereDi2015NewLineDi2015NewLinecon.Close(); Di2015NewLine
18409358Di2015UniqueSeparatorusing
18409358Di2015UniqueSeparatorusing(SqlConnection con = new SqlConnection(...))Di2015NewLine{Di2015NewLine    con.Open();Di2015NewLineDi2015NewLine    /*Di2015NewLine        rest of code hereDi2015NewLine    */Di2015NewLineDi2015NewLine    con.Close();Di2015NewLine}Di2015NewLine
18409486Di2015UniqueSeparatorSomeClass
18409486Di2015UniqueSeparatorstatic
18409486Di2015UniqueSeparator: this(...)
18409486Di2015UniqueSeparator: base(...)
18409486Di2015UniqueSeparatorSystem.out
18409486Di2015UniqueSeparatorSystem.Console
18409486Di2015UniqueSeparatorpublic class SomeClass Di2015NewLine{Di2015NewLine    private int x;Di2015NewLine    private int y;Di2015NewLineDi2015NewLine    public SomeClass () : this(90,90) { }Di2015NewLine    public SomeClass(int x, int y) { this.x = x; this.y = y; }Di2015NewLine    public void ShowMeValues ()Di2015NewLine    {Di2015NewLine        Console.WriteLine(this.x);Di2015NewLine        Console.WriteLine(this.y);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18409628Di2015UniqueSeparatorPage p = (Page)Application.LoadComponent(new Uri(@"relative/uri/to/xaml/file.xaml", UriKind.Relative));Di2015NewLine
18409655Di2015UniqueSeparatorTask
18409655Di2015UniqueSeparatorTask workOne = Task.Factory.StartNew( () => ProcessThread1());Di2015NewLineDi2015NewLineworkOne.ContinueWith(t =>Di2015NewLine{Di2015NewLine     // Update UI hereDi2015NewLine}, TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine
18409655Di2015UniqueSeparatorasync
18409655Di2015UniqueSeparatorvar workOne = Task.Run(ProcessThread1);Di2015NewLinevar workTwo = Task.Run(ProcessThread2);Di2015NewLineDi2015NewLine// asynchronously wait for both tasks to complete...Di2015NewLineawait Task.WhenAll(workOne, workTwo);Di2015NewLineDi2015NewLine// Update UI here.Di2015NewLine
18409674Di2015UniqueSeparatortemp
18409674Di2015UniqueSeparatori
18409674Di2015UniqueSeparatorfor (int i = 0; i < 4; i++)Di2015NewLine{Di2015NewLine   int temp = i;              // outside the lambdaDi2015NewLine   ts[i] = new Thread(() =>Di2015NewLine   {Di2015NewLine        //int temp = i;       // not hereDi2015NewLine        CallService(temp);Di2015NewLine   });Di2015NewLine   ts[i].Start();Di2015NewLine}Di2015NewLine
18409821Di2015UniqueSeparatorSelectMany
18409821Di2015UniqueSeparatorvar result = lists.SelectMany(x => x.Select((s, inx) => new { s, inx }))Di2015NewLine                .GroupBy(x => x.inx)Di2015NewLine                .SelectMany(x => x.Select(y => y.s))Di2015NewLine                .ToList();Di2015NewLine
18409821Di2015UniqueSeparatorList<List<string>> lists = new List<List<string>>()Di2015NewLine        {Di2015NewLine            new List<string>(){ "Apple", "Blueberry", "Cranberry" },Di2015NewLine            new List<string>(){ "Anteater", "Baboon", "Camel", "Dodo"},Di2015NewLine            new List<string>(){ "Albatross", "Blackbird", "Chicken"},Di2015NewLine        };Di2015NewLine
18409821Di2015UniqueSeparatorApple,Anteater,Albatross,Blueberry,Baboon,Blackbird,Cranberry,Camel,Chicken,Dodo
18409855Di2015UniqueSeparatornewList
18409855Di2015UniqueSeparatorProperty1 = Property2
18409855Di2015UniqueSeparatorvar newList = theList.SelectMany((x,i)=>Di2015NewLine                                 theList.Where((y,j)=>j>i && y.Propery2 == x.Propery1)Di2015NewLine                                        .Select(a=> new ReportObject{Di2015NewLine                                                      Property1=x.Property1,Di2015NewLine                                                      Property2=x.Property1Di2015NewLine                                                      });Di2015NewLine
18409926Di2015UniqueSeparatorJson()
18409926Di2015UniqueSeparatorreturn Content(jsonString, "application/json");Di2015NewLine
18409948Di2015UniqueSeparatorvar myControllers = Assembly.Load(yourAssemblyName)Di2015NewLine    .GetTypes()Di2015NewLine    .Where(t => typeof(t).IsAssignableFrom(ApiController))Di2015NewLine    .ToList();Di2015NewLine
18410103Di2015UniqueSeparatordpv_answer
18410103Di2015UniqueSeparatorzip
18410103Di2015UniqueSeparator[XmlRoot("results")]Di2015NewLinepublic class StandardAddressDi2015NewLine{Di2015NewLine    [XmlElement(ElementName = "dpv_answer")]Di2015NewLine    public dpv_answer dpv_answer { get; set; }Di2015NewLineDi2015NewLine    [XmlElement(ElementName = "zip")]Di2015NewLine    public zip zip { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class dpv_answerDi2015NewLine{Di2015NewLine    [XmlAttribute("value")]Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class zipDi2015NewLine{Di2015NewLine    [XmlAttribute("value")]Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLine
18410177Di2015UniqueSeparatortrue
18410177Di2015UniqueSeparatorusing (StreamWriter sw1 = new StreamWriter("DataNames.txt",true))Di2015NewLine
18410446Di2015UniqueSeparatorNameValueCollection nvCollection = HttpUtility.ParseQueryString(queryString.Replace("?","&"));Di2015NewLine
18410531Di2015UniqueSeparatorthis.webBrowser1.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(this.webBrowser1_Navigating);Di2015NewLine
18410531Di2015UniqueSeparatorprivate void webBrowser1_Navigating(object sender, WebBrowserNavigatingEventArgs e)Di2015NewLine{Di2015NewLine    Console.WriteLine("Navigating to: " + e.Url);Di2015NewLine}Di2015NewLine
18410531Di2015UniqueSeparatorNavigating to: javascript:void((function(){document.open();document.domain='costco.com';document.write('<!DOCTYPE html>');document.close();})())Di2015NewLineNavigating to: about:blankDi2015NewLineNavigating to: javascript:void((function(){document.open();document.domain='costco.com';document.write('<!DOCTYPE html>');document.close();})())Di2015NewLineNavigating to: about:blankDi2015NewLineNavigating to: javascript:void((function(){document.open();document.domain='costco.com';document.write('<!DOCTYPE html>');document.close();})())Di2015NewLineNavigating to: about:blankDi2015NewLineNavigating to: javascript:void((function(){document.open();document.domain='costco.com';document.write('<!DOCTYPE html>');document.close();})())Di2015NewLine
18410531Di2015UniqueSeparator private void webBrowser1_Navigated(object sender, WebBrowserNavigatedEventArgs e)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Navigated to: " + e.Url);Di2015NewLine        isNavigating = false;Di2015NewLine        webBrowser1.AllowNavigation = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    bool isNavigating = false;Di2015NewLine    private void webBrowser1_Navigating(object sender, WebBrowserNavigatingEventArgs e)Di2015NewLine    {Di2015NewLine        if (isNavigating && e.Url.ToString().Contains("javascript:void((function(){document.open();document.domain='costco.com'"))Di2015NewLine        {Di2015NewLine            webBrowser1.Stop();Di2015NewLine            webBrowser1.AllowNavigation = false;Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        isNavigating = true;Di2015NewLine        Console.WriteLine("Navigating to: " + e.Url);Di2015NewLine    }Di2015NewLine
18410541Di2015UniqueSeparatorselect * from table where foo like '567???'Di2015NewLine
18410589Di2015UniqueSeparatorField.GetValue
18410589Di2015UniqueSeparatortype.GetProperty("St").SetValue(student, type3.GetField("Good").GetValue(instance), null);Di2015NewLine
18410589Di2015UniqueSeparatorType.GetField
18410589Di2015UniqueSeparatorFieldInfo
18410589Di2015UniqueSeparatorGood
18410589Di2015UniqueSeparatortype3
18410589Di2015UniqueSeparatorStudentType
18410769Di2015UniqueSeparatorvar dict3 = dict2.Except(dict1).ToDictionary(x => x.Key, x => x.Value);Di2015NewLine
18410822Di2015UniqueSeparatorProcess.Start("shutdown", "-s");Di2015NewLine
18411119Di2015UniqueSeparatorVariables
18411119Di2015UniqueSeparatorobj.cs
18411119Di2015UniqueSeparatorform1.cs
18411119Di2015UniqueSeparatorpublic partial class obj : FormDi2015NewLine{Di2015NewLine    public static string text; //This is a variable that can be reached from Di2015NewLineDi2015NewLine    public obj()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void mÃ¡quinaToolStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        machinename open = new machinename();Di2015NewLine        open.ShowDialog(); //I put ShowDialog instead of ShowDi2015NewLine        addItem(); //This method is called when the showed dialog is closed (machinename.cs)Di2015NewLine    }Di2015NewLineDi2015NewLine    private void addItem()Di2015NewLine    {Di2015NewLine        listMachine.Items.Add(text);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411119Di2015UniqueSeparatormachinename.cs
18411119Di2015UniqueSeparatorpublic partial class machinename : FormDi2015NewLine{Di2015NewLine    public machinename()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void buttonAceitarnome_Click(object sender, EventArgs e) //This one can be privateDi2015NewLine    {Di2015NewLine        if (textBoxnomenova.TextLength == 0)Di2015NewLine        {Di2015NewLine            //Something hereDi2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            obj.text = textBoxnomenova.Text; //Initializing the public static variable                Di2015NewLine            this.Close(); //Closes the form, next step will be to run the method in obj.csDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411266Di2015UniqueSeparatorSearchCriteria
18411266Di2015UniqueSeparatorpublic class SearchCriteriaDi2015NewLine{Di2015NewLine    private string _strName;Di2015NewLine    private string _strCode;Di2015NewLineDi2015NewLine    public string strNameDi2015NewLine    {Di2015NewLine        set { _strName = value; }Di2015NewLine        get { return _strName; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string strCodeDi2015NewLine    {Di2015NewLine        set { _strCode = value; }Di2015NewLine        get { return _strCode; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411266Di2015UniqueSeparatorSearchCriteria objSearch = new SearchCriteria();Di2015NewLineobjSearch.strName =  txtFirstName.Text;Di2015NewLineobjSearch.strCode = txtCode.Text ;Di2015NewLineDi2015NewLineif (Session["SearchCriteria"] != null)Di2015NewLine{Di2015NewLine   Session.Remove("SearchCriteria");Di2015NewLine   Session["SearchCriteria"] = objSearch;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine   Session["SearchCriteria"] = objSearch;Di2015NewLine}Di2015NewLine
18411266Di2015UniqueSeparatorBack
18411266Di2015UniqueSeparatorQueryString
18411266Di2015UniqueSeparatorprotected void btnBack_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Response.Redirect("Default.aspx?PostBack=1", false);Di2015NewLine}  Di2015NewLine
18411266Di2015UniqueSeparatorPage_Load
18411266Di2015UniqueSeparatorif (Request.QueryString["PostBack"] != null)Di2015NewLine{Di2015NewLine    SearchCriteria objSearch = new SearchCriteria();Di2015NewLine    if (Session["SearchCriteria"] != null)Di2015NewLine    {Di2015NewLine         objSearch = (SearchCriteria)Session["SearchCriteria"];Di2015NewLine         txtFirstName.Text = objSearch.strName;Di2015NewLine        txtCode.Text = objSearch.strCode;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411272Di2015UniqueSeparatorUri.EscapeDataString(yourLinkHere);
18411276Di2015UniqueSeparatorData Source=.\\SQLEXPRESS;Di2015NewLineAttachDbFilename="D:\\Users\\ITAFinal\\Documents\\Visual Studio Di2015NewLine    2010\\Projects\\employee.mdf";Di2015NewLineIntegrated Security=True;Di2015NewLineConnect Timeout=30;Di2015NewLineUser Instance=True;Di2015NewLineMultipleActiveResultSets=TrueDi2015NewLine
18411276Di2015UniqueSeparatorInitial Catalog
18411276Di2015UniqueSeparatorInitial Catalog=MyDbName;Di2015NewLine
18411276Di2015UniqueSeparatorIntegrated Security=True;
18411334Di2015UniqueSeparator((DataSet)Session["xyz"]).Merge(ds1) ;Di2015NewLine
18411396Di2015UniqueSeparatorpublic int UserId { get; set; }  // user that created the video, unrelatedDi2015NewLine
18411396Di2015UniqueSeparatorUserId
18411396Di2015UniqueSeparatorUserProfile
18411396Di2015UniqueSeparatorint
18411396Di2015UniqueSeparatorUpvotedVideos
18411396Di2015UniqueSeparatorUserId
18411396Di2015UniqueSeparatorpublic int CreatorId { get; set; }  // user that created the video, unrelatedDi2015NewLine
18411396Di2015UniqueSeparatorUpvotedVideos
18411396Di2015UniqueSeparatormodelBuilder.Entity<UserProfile>()Di2015NewLine    .HasMany(u => u.UpvotedVidoes)Di2015NewLine    .WithOptional()Di2015NewLine    .Map(m => m.MapKey("UpvoterId")); // <- FK column nameDi2015NewLine
18411396Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class VideoDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    [DataMember(IsRequired = false)]Di2015NewLine    public int VideoId { get; set; }Di2015NewLineDi2015NewLine    [DataMember(IsRequired = false)]Di2015NewLine    public int UserId { get; set; } // user that created the video, unrelatedDi2015NewLineDi2015NewLine    public int? UpvoterId { get; set; }Di2015NewLineDi2015NewLine    [Required]Di2015NewLine    [DataMember]Di2015NewLine    public virtual IList<Tag> Tags { get; set; }Di2015NewLine}Di2015NewLine
18411396Di2015UniqueSeparatorUserProfile
18411396Di2015UniqueSeparator[ForeignKey("UpvoterId")]Di2015NewLinepublic virtual List<Video> UpvotedVideos { get; set; }Di2015NewLine
18411396Di2015UniqueSeparatorVideo
18411488Di2015UniqueSeparatorTabPage
18411488Di2015UniqueSeparatorTabControl
18411488Di2015UniqueSeparatorTabPage tab = new TabPage(){Text = System.IO.Path.GetFileName(Chosen_File)};Di2015NewLinetabControl1.TabPages.Add(tab);Di2015NewLinetabControl1.SelectedTab = tab;Di2015NewLineRichTextBox rich = new RichTextBox{Parent = tab, Dock = DockStyle.Fill};Di2015NewLinerich.LoadFile(Chosen_File, RichTextBoxStreamType.PlainText);Di2015NewLine
18411590Di2015UniqueSeparatorprivate void comboBox4_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine}Di2015NewLine
18411590Di2015UniqueSeparatorthis.comboBox4.SelectedIndexChanged += new System.EventHandler(this.comboBox4_SelectedIndexChanged);
18411593Di2015UniqueSeparatorreturn "background-color: #FFC6C6;";Di2015NewLine
18411593Di2015UniqueSeparatorusing(var testDBconn = new SqlConnection(...)) {Di2015NewLine   testDBconn.Open();Di2015NewLine   // do whatever you like with connection, it will close automaticallyDi2015NewLine   using(var dr = CurrAllsessions.ExecuteReader()) {Di2015NewLine     // do whatever you like with data readerDi2015NewLine   }Di2015NewLine}Di2015NewLine
18411653Di2015UniqueSeparatorclass TestSpecDi2015NewLine{Di2015NewLine   public TestSpec(int expectation, int value)Di2015NewLine   {  Di2015NewLine       Expectation = expectation;Di2015NewLine       Value = value;Di2015NewLine   }Di2015NewLineDi2015NewLine   public override string ToString()Di2015NewLine   {Di2015NewLine      return Expectation + " - " + value;Di2015NewLine   }Di2015NewLineDi2015NewLine   public int Expectation { get; set; }Di2015NewLine   public int Value { get; set; }  Di2015NewLine}Di2015NewLine
18411653Di2015UniqueSeparatorpublic static IEnumerable<TestSpec> TestData()Di2015NewLine{Di2015NewLine   return new []Di2015NewLine   {Di2015NewLine        new TestSpec(1,  1),Di2015NewLine        new TestSpec(4,  2),Di2015NewLine        new TestSpec(9,  3),Di2015NewLine        new TestSpec(16, 4),Di2015NewLine   };     Di2015NewLine}Di2015NewLine
18411707Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Rally.RestApi;Di2015NewLineusing Rally.RestApi.Response;Di2015NewLineDi2015NewLinenamespace aRestApp_CollectionOfTasksDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //Initialize the REST APIDi2015NewLine            RallyRestApi restApi;Di2015NewLine            restApi = new RallyRestApi("user@co.com", "secret", "https://rally1.rallydev.com", "v2.0");Di2015NewLineDi2015NewLine            //Set our Workspace and Project scopingsDi2015NewLine            String workspaceRef = "/workspace/11111"; //please replace this OID with an OID of your workspaceDi2015NewLine            String projectRef = "/project/22222";     //please replace this OID with an OID of your projectDi2015NewLine            bool projectScopingUp = false;Di2015NewLine            bool projectScopingDown = true;Di2015NewLineDi2015NewLine            Request storyRequest = new Request("HierarchicalRequirement");Di2015NewLineDi2015NewLineDi2015NewLine            storyRequest.Workspace = workspaceRef;Di2015NewLine            storyRequest.Project = projectRef;Di2015NewLine            storyRequest.ProjectScopeUp = projectScopingUp;Di2015NewLine            storyRequest.ProjectScopeDown = projectScopingDown;Di2015NewLineDi2015NewLine            storyRequest.Fetch = new List<string>()Di2015NewLine                {Di2015NewLine                    "Name",Di2015NewLine                    "FormattedID",Di2015NewLine                    "Tasks",Di2015NewLine                    "Estimate"Di2015NewLineDi2015NewLineDi2015NewLine                };Di2015NewLine            storyRequest.Query = new Query("LastUpdateDate", Query.Operator.GreaterThan, "2013-08-01");      Di2015NewLine            QueryResult queryStoryResults = restApi.Query(storyRequest);Di2015NewLineDi2015NewLine            foreach (var s in queryStoryResults.Results)Di2015NewLine            {Di2015NewLine                Console.WriteLine("----------");Di2015NewLine                Console.WriteLine("FormattedID: " + s["FormattedID"] + " Name: " + s["Name"]);Di2015NewLine                //Console.WriteLine("Tasks ref: " + s["Tasks"]._ref);Di2015NewLine                Request taskRequest = new Request(s["Tasks"]);Di2015NewLine                QueryResult queryTaskResult = restApi.Query(taskRequest);Di2015NewLine                if (queryTaskResult.TotalResultCount > 0)Di2015NewLine                {Di2015NewLine                    foreach (var t in queryTaskResult.Results)Di2015NewLine                    {Di2015NewLine                        var taskEstimate = t["Estimate"];Di2015NewLine                        var taskName = t["Name"];Di2015NewLine                        Console.WriteLine("Task Name: " + taskName + " Estimate: " + taskEstimate);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    Console.WriteLine("no tasks found");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411821Di2015UniqueSeparatorDispose
18411821Di2015UniqueSeparatorpublic class Connection : IDisposable  // <== Inherit from IDisposable interfaceDi2015NewLine{Di2015NewLine    public const int Port = 50000;// Can be any range between 49152 and 65536Di2015NewLineDi2015NewLine    private SomeType webserv; // Use whatever real type is appropriate here.Di2015NewLine    private Information information = new Information();  // or whateverDi2015NewLineDi2015NewLine    // This is a real constructor.Di2015NewLine    public Connection()Di2015NewLine    {Di2015NewLine        //SetInformationDi2015NewLine        information.Id = 545;Di2015NewLineDi2015NewLine        webServ = new ClientSDKSoapClient("ClientSDKSoap"))Di2015NewLine        webserv.ContinueConnection.WaitOne();Di2015NewLine        webServ.ClientLogin(information);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Implement IDisposable interfaceDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        webServ.ClientLogout(information);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18411821Di2015UniqueSeparatorusing (var connection = new Connection())Di2015NewLine{Di2015NewLine    // Use the connection here.Di2015NewLine}Di2015NewLine
18411821Di2015UniqueSeparatorusing
18411896Di2015UniqueSeparator.SetHeader(key, value);
18411896Di2015UniqueSeparatorMessageHeaderManager
18411896Di2015UniqueSeparatorIMutateOutgoingTransportMessages
18411896Di2015UniqueSeparatormessageHeaders
18411896Di2015UniqueSeparatorstaticOutgoingHeaders
18411896Di2015UniqueSeparatormessageHeaders
18411896Di2015UniqueSeparatorstaticOutgoingHeaders
18411896Di2015UniqueSeparatortransportMessage.Headers
18411896Di2015UniqueSeparatorHeaders.Add(key, value)
18411896Di2015UniqueSeparatorHeaders[key] = value
18412137Di2015UniqueSeparatorif (aStringObject.IsNullEmptyOrWhiteSpace())Di2015NewLine
18412137Di2015UniqueSeparatorString
18412251Di2015UniqueSeparator XmlDocument doc = new XmlDocument();Di2015NewLine doc.Load(ofd.Filename);Di2015NewLine
18412251Di2015UniqueSeparator XmlNode rootNode = doc.SelectSingleNode("Dados");Di2015NewLine
18412251Di2015UniqueSeparator XmlNode nomeNode = rootNode.SelectSingleNode("Nome");Di2015NewLine XmlNode saxoNode = rootNode.SelectSingleNode("Saxo");Di2015NewLine
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorDoJob()
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorinterface ITool {Di2015NewLine    DoJob();Di2015NewLine}Di2015NewLineDi2015NewLineclass Manager {Di2015NewLineDi2015NewLine    public Manager(IEnumberable<ITool> tools);Di2015NewLineDi2015NewLine    public AddTool(ITool tool);Di2015NewLine} Di2015NewLine
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorManager
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorManager
18412371Di2015UniqueSeparatorIToolRepository
18412371Di2015UniqueSeparatorITool
18412371Di2015UniqueSeparatorinterface ITool {Di2015NewLine    DoJob();Di2015NewLine}Di2015NewLineDi2015NewLineclass Hammer : ITool { // impl details }Di2015NewLineDi2015NewLineinterface IToolRepository {Di2015NewLine    IEnumerable<ITool> GetTools();Di2015NewLine}Di2015NewLineDi2015NewLineclass ToolsRepository : IToolRepository {Di2015NewLine    IEnumerable<ITool> GetTools() {Di2015NewLine        // return ITool implementations from this assembly usingDi2015NewLine        //any method you like, whether from database, web service, or reflection, etc ..Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic RepositoryFactory {Di2015NewLine    IToolRepository CreateRepository() { // returns concrete repository };Di2015NewLine}Di2015NewLine
18412371Di2015UniqueSeparatorManager
18412371Di2015UniqueSeparatorclass Manager {Di2015NewLineDi2015NewLine    public Manager(IToolRepository repository);Di2015NewLineDi2015NewLine    public Manager(IEnumberable<ITool> tools);Di2015NewLineDi2015NewLine    public AddTool(ITool tool);Di2015NewLine}Di2015NewLine
18412371Di2015UniqueSeparatorManager
18412371Di2015UniqueSeparatorRepositoryFactory.CreateRepository()
18412371Di2015UniqueSeparatorManager
18412371Di2015UniqueSeparatornew Manager(RepositoryFactory.CreateRepository());Di2015NewLine
18412443Di2015UniqueSeparatorManagementObjectSearcher()
18412501Di2015UniqueSeparatorModalPopupExtender
18412501Di2015UniqueSeparatormpAlert.Show();Di2015NewLine
18412501Di2015UniqueSeparatorTargetControlID
18412501Di2015UniqueSeparatorModalPopupExtender
18412501Di2015UniqueSeparator<asp:Button ID="Hid_ShowDialog" Style="display: none" runat="server" />Di2015NewLine
18412579Di2015UniqueSeparatorstring
18412579Di2015UniqueSeparatorstring
18412579Di2015UniqueSeparatorchar
18412579Di2015UniqueSeparatorstring number = "";Di2015NewLineint numb = 0;Di2015NewLineDi2015NewLineConsole.WriteLine("Please enter the telephone number...");Di2015NewLinenumber = Console.ReadLine();Di2015NewLineDi2015NewLinefor(int i=0; i<number.Count; i++)Di2015NewLine{Di2015NewLine    if (number[i] == 'A')Di2015NewLine    {Di2015NewLine        //...Di2015NewLine    }Di2015NewLine}Di2015NewLine
18412583Di2015UniqueSeparatorsb.Completed += (s,e) => StoryboardCompleted(sb, i);Di2015NewLineDi2015NewLine ....Di2015NewLineDi2015NewLineprivate void StoryboardCompleted(Storyboard storyboard, Image image)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
18412594Di2015UniqueSeparatorpublic abstract class DataObject<T> {Di2015NewLine     public abstract T Save();Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class InvoiceObject<T> : DataObject<T> {Di2015NewLine    // base data for the class goes here    Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Invoice : InvoiceObject<Invoice> {Di2015NewLine    public override Invoice Save() {            Di2015NewLine        return this;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18412594Di2015UniqueSeparatorDataObject<T>
18412594Di2015UniqueSeparatorreturn this;
18412594Di2015UniqueSeparatorDataObject<T>
18412594Di2015UniqueSeparatorDataObject<T>
18412594Di2015UniqueSeparatorpublic abstract class DataObject<T> where T : DataObject<T>{Di2015NewLine     public virtual DataObject<T> Save(){Di2015NewLine        return this;Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class InvoiceObject<T> : DataObject<T> where T : DataObject<T> {Di2015NewLine    // base data for the class goes here    Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Invoice : InvoiceObject<Invoice> {Di2015NewLineDi2015NewLine}Di2015NewLine
18412718Di2015UniqueSeparatorstatic string Encr(string plainText, string key)Di2015NewLine{Di2015NewLine    char[] chars = new char[plainText.Length];Di2015NewLine    int h = 0;Di2015NewLine    for (int i = 0; i < plainText.Length; i++)Di2015NewLine    {Di2015NewLine        if (h == key.Length)Di2015NewLine            h = 0;Di2015NewLine        int j = plainText[i] + key[h];Di2015NewLine        chars[i] = (char)j;Di2015NewLine        h++;Di2015NewLine    }Di2015NewLineDi2015NewLine    File.WriteAllBytes(FILE_NAME, System.Text.Encoding.UTF8.GetBytes(chars));Di2015NewLineDi2015NewLine    return new String(chars, System.Text.Encoding.UTF8);Di2015NewLine}Di2015NewLine
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorprs
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorprs
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorCustomer
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorInvalidCastException
18412772Di2015UniqueSeparatorSurName
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorCustomer
18412772Di2015UniqueSeparatorConsultant
18412772Di2015UniqueSeparatorStore
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorList<Person>
18412772Di2015UniqueSeparatorEmployee
18412772Di2015UniqueSeparatorCustomer
18412772Di2015UniqueSeparatorConsultant
18412772Di2015UniqueSeparatorPerson
18412772Di2015UniqueSeparatorpeopleInMyStore.Add(MyEmployee);Di2015NewLinepeopleInMyStore.Add(MyCustomer);Di2015NewLinepeopleInMyStore.Add(MyConsultant);Di2015NewLine
18412772Di2015UniqueSeparatorforeach (Person p in peopleInMyStore)Di2015NewLine{Di2015NewLine     Console.WriteLine(p.Name);Di2015NewLine}Di2015NewLine
18412772Di2015UniqueSeparatorApiTestSuite
18412772Di2015UniqueSeparatorSpecificApiTestSuite
18412772Di2015UniqueSeparator ApiTestSuite tests;Di2015NewLine if (args[0] == "api1")Di2015NewLine     tests = new Api1TestSuite();Di2015NewLine elseDi2015NewLine     tests = new Api2TestSuite();Di2015NewLine tests.RunTests();Di2015NewLine
18412786Di2015UniqueSeparatorlist.OrderByDescending(o => o.Field2)Di2015NewLine    .ThenByDescending(o => o.Field1);Di2015NewLine
18412851Di2015UniqueSeparatoryourToolStrip.Dock = DockStyle.Top;Di2015NewLineyourTabControl.Dock = DockStyle.Fill;Di2015NewLineyourTabControl.BringToFront();Di2015NewLine
18413071Di2015UniqueSeparatorActionLink
18413071Di2015UniqueSeparator@Html.ActionLink("Export to Excel","ReturnExcelOfViewableResponses",Model.SearchObject)Di2015NewLine
18413191Di2015UniqueSeparatorFROM
18413191Di2015UniqueSeparator[DOCUMENT]
18413191Di2015UniqueSeparatorFROM\\\\s+(?<table>\\\\S+)Di2015NewLine
18413505Di2015UniqueSeparator!IsPostBack
18413505Di2015UniqueSeparatorPage_Load
18413505Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!IsPostBack)Di2015NewLine    {Di2015NewLine        // Put logic here to bindDi2015NewLine        DropDownList2.DataSource = modelsList;  Di2015NewLine        DropDownList2.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18413556Di2015UniqueSeparatorICollection<TimeSheet>
18413556Di2015UniqueSeparatorIQueryable<T>
18413556Di2015UniqueSeparatorIEnumerable<T>
18413556Di2015UniqueSeparatorIQueryable
18413556Di2015UniqueSeparatorOrderBy
18413556Di2015UniqueSeparatorSelectMany
18413556Di2015UniqueSeparatorSelect
18413556Di2015UniqueSeparatorvar allTimeSheets = ctx.PersonTeamDi2015NewLine                       .Where(y => y.Person.name == supervisor_name Di2015NewLine                                && y.is_supervisor == true)Di2015NewLine                       .SelectMany(z => z.Team, (z, t) => t.TimeSheet);Di2015NewLine
18413556Di2015UniqueSeparatorTimeSheet[]
18413556Di2015UniqueSeparatorIQueryable<ICollection<TimeSheet>>
18413556Di2015UniqueSeparatorIQueryable<TimeSheet>
18413556Di2015UniqueSeparatorToArray
18413556Di2015UniqueSeparatorToList
18413556Di2015UniqueSeparatorto cast to an
18413556Di2015UniqueSeparatorto convert the query to Linq-To-Objects, which has better support for custom functions in sorts, filters, etc.  Note that calling
18413627Di2015UniqueSeparatorIQueryable<T>
18413627Di2015UniqueSeparatorExpression<Func<T, int>>
18413627Di2015UniqueSeparatorFunc<T, int>
18413627Di2015UniqueSeparatorFunc<T, int>
18413627Di2015UniqueSeparatorIEnumerable<T>
18413627Di2015UniqueSeparatorWhere
18413627Di2015UniqueSeparatorIQueryable<T>
18413627Di2015UniqueSeparatorIEnumerable<T>
18413627Di2015UniqueSeparatorrepository.Items.FirstOrDefault(x => keyExtractor(x) == id)
18414071Di2015UniqueSeparatorBinding.UpdateSourceTrigger
18414105Di2015UniqueSeparatorString text = TextBox.Text;Di2015NewLinetry{Di2015NewLine    long value = long.parse(text.trim());Di2015NewLine    if(value > 0 && value < 101){Di2015NewLine       //do something hereDi2015NewLine    }Di2015NewLine    else{Di2015NewLine       //Do something elseDi2015NewLine    }Di2015NewLine}Di2015NewLinecatch(Exception e){Di2015NewLine   Messagebox.Show("Please check you input and try again");Di2015NewLine}Di2015NewLine
18414107Di2015UniqueSeparatorclass ProgramDi2015NewLine{ Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        int x = 0;Di2015NewLine        string userInput;Di2015NewLineDi2015NewLine        Console.WriteLine("Please enter the 10 digit telephone number. ");Di2015NewLine        userInput = Console.ReadLine();Di2015NewLineDi2015NewLine        // Did the user type in more than 10 characters?Di2015NewLine        if(userInput.Length > 10)Di2015NewLine        {Di2015NewLine            // Get the first ten letters, no matter how many letters the user enteredDi2015NewLine            userInput = userInput.Substring(0, 10);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Force values to upper case for comparisonDi2015NewLine        userInput = userInput.ToUpper();Di2015NewLineDi2015NewLine        string systemOutput = String.Empty;Di2015NewLine        foreach(var c in userInput) Di2015NewLine        {Di2015NewLine            switch (c)Di2015NewLine            {Di2015NewLine                case "1":Di2015NewLine                    systemOutput += "1";Di2015NewLine                    break;Di2015NewLine                case "A":Di2015NewLine                case "B":Di2015NewLine                case "C":Di2015NewLine                case "2":Di2015NewLine                    systemOutput += "2";Di2015NewLine                    break;Di2015NewLine                case "D":Di2015NewLine                case "E":Di2015NewLine                case "F":Di2015NewLine                case "3":Di2015NewLine                    systemOutput += "3";Di2015NewLine                    break;Di2015NewLine                case "G":Di2015NewLine                case "H":Di2015NewLine                case "I":Di2015NewLine                case "4":Di2015NewLine                    systemOutput += "4";Di2015NewLine                    break;Di2015NewLine                case "J":Di2015NewLine                case "K":Di2015NewLine                case "L":Di2015NewLine                case "5":Di2015NewLine                    systemOutput += "5";Di2015NewLine                    break;Di2015NewLine                case "M":Di2015NewLine                case "N":Di2015NewLine                case "O":Di2015NewLine                case "6":Di2015NewLine                    systemOutput += "6";Di2015NewLine                    break;Di2015NewLine                case "P":Di2015NewLine                case "Q":Di2015NewLine                case "R":Di2015NewLine                case "7":Di2015NewLine                    systemOutput += "7";Di2015NewLine                    break;Di2015NewLine                case "S":Di2015NewLine                case "T":Di2015NewLine                case "U":Di2015NewLine                case "8":Di2015NewLine                    systemOutput += "8";Di2015NewLine                    break;Di2015NewLine                case "V":Di2015NewLine                case "W":Di2015NewLine                case "X":Di2015NewLine                case "Y":Di2015NewLine                case "Z":Di2015NewLine                    systemOutput += "9";Di2015NewLine                    break;Di2015NewLine                case "0":Di2015NewLine                    systemOutput += "0";Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine(systemOutput);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18414167Di2015UniqueSeparatorreturn View(new UserModel());Di2015NewLine
18414167Di2015UniqueSeparatorreturn View();Di2015NewLine
18414186Di2015UniqueSeparatorFormat24bppRgb
18414186Di2015UniqueSeparatorframe = new byte[1280 * 960 * 3]; // 24bpp = 3 bytesDi2015NewLine
18414231Di2015UniqueSeparatorInitializeComponent
18414231Di2015UniqueSeparatorScriptErrorsSuppressed = true
18414231Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing Microsoft.Win32;Di2015NewLineDi2015NewLinenamespace WinformsWBDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine         public Form1()Di2015NewLine        {Di2015NewLine            SetBrowserFeatureControl();Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            this.webBrowser1.ScriptErrorsSuppressed = true;Di2015NewLine            this.webBrowser1.Navigate("http://www.popuptest.com/");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void SetBrowserFeatureControlKey(string feature, string appName, uint value)Di2015NewLine        {Di2015NewLine            using (var key = Registry.CurrentUser.CreateSubKey(Di2015NewLine                String.Concat(@"Software\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\", feature),Di2015NewLine                RegistryKeyPermissionCheck.ReadWriteSubTree))Di2015NewLine            {Di2015NewLine                key.SetValue(appName, (UInt32)value, RegistryValueKind.DWord);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void SetBrowserFeatureControl()Di2015NewLine        {Di2015NewLine            // http://msdn.microsoft.com/en-us/library/ee330720(v=vs.85).aspxDi2015NewLineDi2015NewLine            // FeatureControl settings are per-processDi2015NewLine            var fileName = System.IO.Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName);Di2015NewLineDi2015NewLine            // make the control is not running inside Visual Studio DesignerDi2015NewLine            if (String.Compare(fileName, "devenv.exe", true) == 0 || String.Compare(fileName, "XDesProc.exe", true) == 0)Di2015NewLine                return;Di2015NewLineDi2015NewLine            // TODO: FEATURE_BROWSER_MODE - what is it?Di2015NewLine            SetBrowserFeatureControlKey("FEATURE_BROWSER_EMULATION", fileName, 9000); // Webpages containing standards-based !DOCTYPE directives are displayed in IE10 Standards mode.Di2015NewLine            SetBrowserFeatureControlKey("FEATURE_DISABLE_NAVIGATION_SOUNDS", fileName, 1);Di2015NewLine            SetBrowserFeatureControlKey("FEATURE_WEBOC_POPUPMANAGEMENT", fileName, 1);Di2015NewLine            SetBrowserFeatureControlKey("FEATURE_BLOCK_INPUT_PROMPTS", fileName, 1);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18414247Di2015UniqueSeparatorpublic class TestBase {Di2015NewLine     public TestBase() {Di2015NewLine       // Global setupDi2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyTest : TestBase {Di2015NewLine     // TestsDi2015NewLine}Di2015NewLine
18414318Di2015UniqueSeparatorinternal class ToolText : ToolObjectDi2015NewLine{Di2015NewLinepublic ToolText()Di2015NewLine{Di2015NewLine    Cursor = new Cursor(GetType(), "Rectangle.cur");Di2015NewLine}Di2015NewLinepublic override void OnMouseDown(DrawArea drawArea, MouseEventArgs e)Di2015NewLine{Di2015NewLine    Point p = drawArea.BackTrackMouse(new Point(e.X, e.Y));Di2015NewLineTextDialog td = new TextDialog();Di2015NewLinetd.Location = new Point(e.X, e.Y + drawArea.Top + td.Height);Di2015NewLine    if (td.ShowDialog() ==Di2015NewLine    DialogResult.OK)Di2015NewLine    {Di2015NewLine    string t = td.TheText;Di2015NewLine    Color c = td.TheColor;Di2015NewLine    Font f = td.TheFont;Di2015NewLine    AddNewObject(drawArea, new DrawText(p.X, p.Y, t, f, c));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18414318Di2015UniqueSeparatorpublic override void Draw(Graphics g)Di2015NewLine{Di2015NewLine    Pen pen = new Pen(Color);Di2015NewLine    GraphicsPath gp = new GraphicsPath();Di2015NewLine    StringFormat format = StringFormat.GenericDefault;Di2015NewLine    gp.AddString(_theText, _font.FontFamily, (int)_font.Style, _font.SizeInPoints,Di2015NewLine                    new PointF(Rectangle.X, Rectangle.Y), format);Di2015NewLine    // Rotate the path about it's center if necessaryDi2015NewLine    if (Rotation != 0)Di2015NewLine    {Di2015NewLine        RectangleF pathBounds = gp.GetBounds();Di2015NewLine        Matrix m = new Matrix();Di2015NewLine        m.RotateAt(Rotation, new PointF(pathBounds.Left + (pathBounds.Width / 2), pathBounds.Top + (pathBounds.Height / 2)),Di2015NewLine                    MatrixOrder.Append);Di2015NewLine        gp.Transform(m);Di2015NewLine    }Di2015NewLine    g.DrawPath(pen, gp);Di2015NewLine    rectangle.Size = g.MeasureString(_theText, _font).ToSize();Di2015NewLine    pen.Dispose();Di2015NewLine}Di2015NewLine
18414436Di2015UniqueSeparatorpartial
18414483Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    var workers = new Array();Di2015NewLine    function addWorker() {Di2015NewLine        workers.push($("#TextToAdd").val());Di2015NewLine    }Di2015NewLineDi2015NewLine    function submit() {Di2015NewLine        var postData = { names: workers };Di2015NewLine        $.ajaxSettings.traditional = true;Di2015NewLine        $.ajax({Di2015NewLine            url: '@Url.Action("AddWorker", "Home")',Di2015NewLine            type: "POST",Di2015NewLine            dataType: 'json',Di2015NewLine            data: postData,Di2015NewLine            success: function () {Di2015NewLine                alert("Added");Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
18414483Di2015UniqueSeparator@Html.TextBoxFor(x => x.TextToAdd)Di2015NewLine@Html.DropDownList("workerList", items);Di2015NewLine<input type="button" value="addlocal" onclick="addWorker();" />Di2015NewLine<input type="button" value="Post" onclick="submit();" />Di2015NewLine
18414483Di2015UniqueSeparator    public ActionResult AddWorker(List<string> names)Di2015NewLine    {Di2015NewLineDi2015NewLine        List<String> strings = new List<string>();Di2015NewLine        if (Session["List"] != null)Di2015NewLine        {Di2015NewLine            strings = (List<String>)Session["List"];Di2015NewLine        }Di2015NewLine        foreach (var s in names)Di2015NewLine        {Di2015NewLine            strings.Add(s);Di2015NewLine        }Di2015NewLineDi2015NewLine        Session["List"] = strings;Di2015NewLine        return Json(strings);Di2015NewLine    }Di2015NewLine
18414808Di2015UniqueSeparatorFile
18414808Di2015UniqueSeparatorNew Web Site...
18414946Di2015UniqueSeparatorrouteTemplate: "api/{controller}/{action}/{name}"Di2015NewLine
18414946Di2015UniqueSeparatorrouteTemplate: "api/{controller}/{action}/{text}",Di2015NewLine
18415040Di2015UniqueSeparatorpublic enum MyEnumDi2015NewLine{Di2015NewLine    [Description("I like beer")]Di2015NewLine    Beer = 1,Di2015NewLine    [Description("I hate vodka")]Di2015NewLine    Vodka = 2,Di2015NewLine    [Description("Meh, rum")]Di2015NewLine    Rum = 3Di2015NewLine};Di2015NewLine
18415040Di2015UniqueSeparatorMyEnum sampleEnum = MyEnum.Beer;Di2015NewLinevar attr = typeof(MyEnum)Di2015NewLine    .GetMember(sampleEnum.ToString())Di2015NewLine    .First()Di2015NewLine    .GetCustomAttributes(typeof(DescriptionAttribute), false)Di2015NewLine    .First() as DescriptionAttribute;Di2015NewLinestring description = attr.Description;Di2015NewLine
18415040Di2015UniqueSeparatorpublic static string GetDescriptionOrDefault<T>(this T enumValue, string defaultValue = null)Di2015NewLine{Di2015NewLine    var attr = typeof(T)Di2015NewLine        .GetMember(enumValue.ToString())Di2015NewLine        .First()Di2015NewLine        .GetCustomAttributes(typeof(DescriptionAttribute), false)Di2015NewLine        .FirstOrDefault() as DescriptionAttribute;Di2015NewLine    return attr == null ? (defaultValue ?? enumValue.ToString()) : attr.Description;Di2015NewLine}Di2015NewLine
18415040Di2015UniqueSeparatorMyEnum sampleEnum = MyEnum.Beer;Di2015NewLinestring description = sampleEnum.GetDescriptionOrDefault();Di2015NewLine
18415165Di2015UniqueSeparator(Double.Parse(dataGridView1.Rows[i].Cells[2].Value.ToString()) + Double.Parse(dataGridView2.Rows[i].Cells[1].Value.ToString())).ToString();Di2015NewLine
18415165Di2015UniqueSeparatorrowindex
18415165Di2015UniqueSeparatori = 2
18415165Di2015UniqueSeparatorUPDATE  Table_2 SET Di2015NewLineStock = CAST(Di2015NewLine        CAST(Stock AS DECIMAL(19,4)) + CAST(@Stock AS DECIMAL(19,4)) Di2015NewLine        AS VARCHAR(MAX)) Di2015NewLineWHERE itemID = @itemID"Di2015NewLine
18415165Di2015UniqueSeparatordatagridview1
18415165Di2015UniqueSeparatordanan.UpdateCommand.Parameters.Add("@itemID", SqlDbType.VarChar).Value = Convert.ToString(dataGridView1.Rows[i].Cells[1].Value).ToString();Di2015NewLineDi2015NewLine// Di2015NewLinedanan.UpdateCommand.Parameters.Add("@Stock", SqlDbType.VarChar).Value = (Double.Parse(dataGridView1.Rows[i].Cells[2].Value.ToString())Di2015NewLine
18415165Di2015UniqueSeparatorDouble
18415165Di2015UniqueSeparatorDecimal
18415165Di2015UniqueSeparatorVARCHAR
18415442Di2015UniqueSeparatorpublic void MyFunc<T>() where T : IMyInterface {Di2015NewLine}Di2015NewLine
18415473Di2015UniqueSeparatorData Source=SERVER\\SQL;Initial Catalog=database;Integrated Security=True
18415473Di2015UniqueSeparatorprivate void InitConnection() {Di2015NewLine        this._connection = new global::System.Data.SqlClient.SqlConnection();Di2015NewLine        this._connection.ConnectionString = global::tours.Properties.Settings.Default.toursConnectionString1;Di2015NewLine    }Di2015NewLine
18415473Di2015UniqueSeparator private void InitConnection() {Di2015NewLine        this._connection = new global::System.Data.SqlClient.SqlConnection();Di2015NewLine        this._connection.ConnectionString = myConnection.DataSource.ConnectionString;Di2015NewLine    }Di2015NewLine
18415620Di2015UniqueSeparatorbasicHttpBinding
18415620Di2015UniqueSeparatorBasicHttpBinding
18415620Di2015UniqueSeparator<services>
18415620Di2015UniqueSeparator<system.serviceModel>Di2015NewLine  <bindings>Di2015NewLine    <basicHttpBinding>Di2015NewLine      <binding name="basicHttp" />Di2015NewLine    </basicHttpBinding>Di2015NewLine    <webHttpBinding>Di2015NewLine      <binding name="JsonBinding" />Di2015NewLine    </webHttpBinding>Di2015NewLine  </bindings>Di2015NewLine  <services>Di2015NewLine    <service name="CouponParkingWCF.CouponService">Di2015NewLine      <endpoint address="SOAP"Di2015NewLine                binding="basicHttpBinding" Di2015NewLine                contract="CouponParkingWCF.ICouponService"Di2015NewLine                name="BasicHttpBinding_ICouponService" />Di2015NewLine      <endpoint address="JSON"Di2015NewLine                binding="webHttpBinding" bindingConfiguration="JsonBinding"Di2015NewLine                contract="CouponParkingWCF.ICouponService" name="Json" Di2015NewLine                kind="" endpointConfiguration="">Di2015NewLine        <identity>Di2015NewLine          <certificateReference storeName="My" storeLocation="LocalMachine"Di2015NewLine                                x509FindType="FindBySubjectDistinguishedName" />Di2015NewLine        </identity>Di2015NewLine      </endpoint>Di2015NewLine    </service>Di2015NewLine  </services>Di2015NewLine
18415620Di2015UniqueSeparatorhttp://localhost:8707/CouponParking.svc/SOAPDi2015NewLinehttp://localhost:8707/CouponParking.svc/JSONDi2015NewLine
18415620Di2015UniqueSeparatorBasicHttpBinding
18415620Di2015UniqueSeparatorWebHttpBinding
18415895Di2015UniqueSeparatorpublic class ConnectionResultEventArgs : EventArgsDi2015NewLine{Di2015NewLine    public bool Available { get; set; }Di2015NewLine}Di2015NewLine
18415895Di2015UniqueSeparator//Create Event and HandlerDi2015NewLine    public delegate void ConnectionResultEventHandler(object sender, ConnectionResultEventArgs e);Di2015NewLine    public event ConnectionResultEventHandler ConnectionResultEvent;Di2015NewLineDi2015NewLine//Method to run when the event has been receieved, include a delegate in case you try to interact with the UI threadDi2015NewLine    delegate void ConnectionResultDelegate(object sender, ConnectionResultEventArgs e);Di2015NewLine    void ConnectionResultReceived(object sender, ConnectionResultEventArgs e)Di2015NewLine    {Di2015NewLine        //Check if the request has come from a seperate thread, if so this will raise an exception unless you invoke.Di2015NewLine        if (InvokeRequired)Di2015NewLine        {Di2015NewLine            BeginInvoke(new ConnectionResultDelegate(ConnectionResultReceived), new object[] { this, e });Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        //Do StuffDi2015NewLine        if (e.Available)Di2015NewLine        {Di2015NewLine            label1.Text = "Connection Good!";Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        label1.Text = "Connection Bad";Di2015NewLine    }Di2015NewLine
18415895Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Subscribe to the the results event.Di2015NewLine        ConnectionResultEvent += ConnectionResultReceived;Di2015NewLine    }Di2015NewLine
18415895Di2015UniqueSeparator//Check the connectionDi2015NewLine    void BeginCheck()Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            HttpWebRequest reqFP = (HttpWebRequest)HttpWebRequest.Create("http://google.co.uk");Di2015NewLineDi2015NewLine            HttpWebResponse rspFP = (HttpWebResponse)reqFP.GetResponse();Di2015NewLine            if (HttpStatusCode.OK == rspFP.StatusCode)Di2015NewLine            {Di2015NewLine                // HTTP = 200 - Internet connection available, server onlineDi2015NewLine                rspFP.Close();Di2015NewLineDi2015NewLine                ConnectionResultEvent(this, new ConnectionResultEventArgs {Available = true});Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // Other status - Server or connection not availableDi2015NewLine                rspFP.Close();Di2015NewLineDi2015NewLine                ConnectionResultEvent(this, new ConnectionResultEventArgs { Available = false });Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (WebException)Di2015NewLine        {Di2015NewLineDi2015NewLine            // Exception - connection not availableDi2015NewLine            //Raise the Event - Connection FalseDi2015NewLine            ConnectionResultEvent(this, new ConnectionResultEventArgs { Available = false });Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //loading graphic, screen or whateverDi2015NewLine        label1.Text = "Checking Connection...";Di2015NewLineDi2015NewLine        //Begin the checks - Start this in a new threadDi2015NewLine        Thread t = new Thread(BeginCheck);Di2015NewLine        t.Start();Di2015NewLine    }Di2015NewLine
18416135Di2015UniqueSeparator-4
18416135Di2015UniqueSeparatorProcessStartInfo pf = new ProcessStartInfo(Di2015NewLine       Path.Combine(Environment.SystemDirectory, "msconfig.exe"));Di2015NewLinepf.Verb = "runas";Di2015NewLinepf.Arguments ="-4";Di2015NewLineProcess.Start(pf);Di2015NewLine
18416135Di2015UniqueSeparator+--------------------+Di2015NewLine|   Arg  |    Tab    |Di2015NewLine+--------------------+Di2015NewLine|   -1   | General   |Di2015NewLine|   -2   | Boot      |Di2015NewLine|   -3   | Services  |Di2015NewLine|   -4   | Startup   |Di2015NewLine|   -5   | Tools     |Di2015NewLine+--------------------+Di2015NewLine
18416213Di2015UniqueSeparatorMicrosoft.ReportViewer.PorcessingObjectMode.dll
18416213Di2015UniqueSeparatorversion 11.0.0.0
18416213Di2015UniqueSeparatorWindows 8
18416213Di2015UniqueSeparatorcd ..
18416213Di2015UniqueSeparatorC:\\ >
18416213Di2015UniqueSeparatorCd windows\\assembly\\gac_msil\\Microsoft.ReportViewer.pro*
18416213Di2015UniqueSeparatorcd 11*
18416213Di2015UniqueSeparatorcopy * c:\\
18416213Di2015UniqueSeparator.dll
18416213Di2015UniqueSeparatorC
18416213Di2015UniqueSeparatorProgram Files
18416213Di2015UniqueSeparatorWindows XP machine
18416475Di2015UniqueSeparatorIsOfType
18416475Di2015UniqueSeparatoradd
18416475Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        object o = new CustomArgsTransmitter();Di2015NewLineDi2015NewLine        // make sure we've got the interfaceDi2015NewLine        var interf = o.GetType().GetInterface("ICustomTransmitter`1");Di2015NewLineDi2015NewLine        // get the arg type.Di2015NewLine        var argType = interf.GetGenericArguments()[0];Di2015NewLineDi2015NewLine        // create a delegate for the handler based on the arg type aboveDi2015NewLine        var handlerMethodInfo = typeof(Program).GetMethod("Handler", BindingFlags.Static | BindingFlags.Public)Di2015NewLine        var del = Delegate.CreateDelegate(typeof(EventHandler<>).MakeGenericType(argType), handlerMethodInfo);Di2015NewLineDi2015NewLine        // Invoke the add method of the event.Di2015NewLine        o.GetType().InvokeMember("add_DataEvent", BindingFlags.InvokeMethod, null, o, new object[] { del });Di2015NewLineDi2015NewLine        //  just test code at this point.Di2015NewLine        // fire event to make sure it is signed up.Di2015NewLine        // It should print a message to the console.Di2015NewLine        ((CustomArgsTransmitter)o).FireEvent();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public static void Handler(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Got event {0} from {1}", e, sender);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IDataTransmitter { }Di2015NewLineDi2015NewLinepublic interface ICustomTransmitter<T> : IDataTransmitter where T : EventArgsDi2015NewLine{Di2015NewLine    event EventHandler<T> DataEvent;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyArgs : EventArgs { }Di2015NewLineDi2015NewLinepublic class CustomArgsTransmitter : ICustomTransmitter<MyArgs>Di2015NewLine{Di2015NewLine    public event EventHandler<MyArgs> DataEvent;Di2015NewLineDi2015NewLine    public void FireEvent()Di2015NewLine    {Di2015NewLine        DataEvent(this, new MyArgs());Di2015NewLine    }Di2015NewLine}Di2015NewLine
18416494Di2015UniqueSeparatorprivate void textBox1_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine    {Di2015NewLine        e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);Di2015NewLine    }Di2015NewLine
18416624Di2015UniqueSeparator<PropertyGroup Condition="'$(VisualStudioVersion)' == '10.0'">Di2015NewLine  <DefineConstants>$(DefineConstants);VS_10;</DefineConstants>Di2015NewLine</PropertyGroup>Di2015NewLine<PropertyGroup Condition="'$(VisualStudioVersion)' == '11.0'">Di2015NewLine  <DefineConstants>$(DefineConstants);VS_11;</DefineConstants>Di2015NewLine</PropertyGroup>Di2015NewLine
18416624Di2015UniqueSeparatorVS_10
18416624Di2015UniqueSeparatorVS_11
18416937Di2015UniqueSeparator    // Define queriesDi2015NewLine    var query1 = from results in db.FindWords(term)Di2015NewLine                 orderby results.wordDi2015NewLine                 select results.word;Di2015NewLineDi2015NewLine    var query2 = query1.Take(100);Di2015NewLineDi2015NewLine    // Run queriesDi2015NewLine    int totalCountBeforeTake = query1.Count();Di2015NewLineDi2015NewLine    foreach (var result in query2)Di2015NewLine    {Di2015NewLine        Console.Write(result.ToString());Di2015NewLine    }Di2015NewLine
18416945Di2015UniqueSeparatorBeginInvoke
18416945Di2015UniqueSeparatorInvoke
18416945Di2015UniqueSeparatorEndInvoke
18416945Di2015UniqueSeparatorBeginInvoke
18416945Di2015UniqueSeparatorMulticastDelegate.GetInvocationList
18416945Di2015UniqueSeparatorParallel.Invoke
18417048Di2015UniqueSeparatorModelState
18417048Di2015UniqueSeparator ModelState.Remove("StartTime"); Di2015NewLine ModelState.Remove("EndTime");Di2015NewLineDi2015NewLine bookingViewModel.StartTime = Convert.ToDateTime(startTime);Di2015NewLine bookingViewModel.EndTime = Convert.ToDateTime(endTime);Di2015NewLineDi2015NewLine return View("Booking", bookingViewModel);Di2015NewLine
18417063Di2015UniqueSeparatorinterface IFooDi2015NewLine{Di2015NewLine    void Foo();Di2015NewLine}Di2015NewLineDi2015NewLinestruct Bar : IFooDi2015NewLine{Di2015NewLine    public void Foo()Di2015NewLine    {Di2015NewLine        // Do somethingDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void DoFoo<T>(T value) where T : IFooDi2015NewLine    {Di2015NewLine        value.Foo();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Bar bar = new Bar();Di2015NewLine        DoFoo(bar); // No boxing involvedDi2015NewLine    }Di2015NewLine}Di2015NewLine
18417063Di2015UniqueSeparatorDoFoo
18417063Di2015UniqueSeparator.method private hidebysig static void  DoFoo<(IFoo) T>(!!T 'value') cil managedDi2015NewLine{Di2015NewLine  // Code size       16 (0x10)Di2015NewLine  .maxstack  8Di2015NewLine  IL_0000:  nopDi2015NewLine  IL_0001:  ldarga.s   'value'Di2015NewLine  IL_0003:  constrained. !!TDi2015NewLine  IL_0009:  callvirt   instance void IFoo::Foo()Di2015NewLine  IL_000e:  nopDi2015NewLine  IL_000f:  retDi2015NewLine} // end of method Test::DoFooDi2015NewLine
18417063Di2015UniqueSeparatorconstrained.
18417063Di2015UniqueSeparatorvalue
18417063Di2015UniqueSeparatorIFoo
18417063Di2015UniqueSeparatorT
18417063Di2015UniqueSeparatorIFoo copy = value; // Might boxDi2015NewLine
18417166Di2015UniqueSeparatorFileFormat
18417166Di2015UniqueSeparatorSaveAs
18417166Di2015UniqueSeparator.xls
18417166Di2015UniqueSeparatorSaveAs
18417166Di2015UniqueSeparatorSaveAs
18417166Di2015UniqueSeparatorFileFormat
18417166Di2015UniqueSeparatorxlWorkbookDefault
18417166Di2015UniqueSeparatorxlExcel8
18417166Di2015UniqueSeparatorxlXMLSpreadsheet
18417166Di2015UniqueSeparatorFileFormat
18417166Di2015UniqueSeparatorApplication.DisplayAlerts
18417166Di2015UniqueSeparatorfalse
18417177Di2015UniqueSeparator    [HttpPost]Di2015NewLine    public ActionResult Post(Class Model, IEnumerable<HttpPostedFileBase> Photos, IEnumerable<HttpPostedFileBase> Logos, IEnumerable<HttpPostedFileBase> Videos)Di2015NewLine    { Di2015NewLine        // proceed Di2015NewLine    }Di2015NewLine
18417290Di2015UniqueSeparatorpublic class CompareWithDisplayName : CompareAttributeDi2015NewLine{Di2015NewLine    public CompareWithDisplayName(string otherProperty) : base(otherProperty)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
18417290Di2015UniqueSeparator[Display(Name = "New Password")]Di2015NewLinepublic string New { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine[Display(Name = "Confirm Password")]Di2015NewLine[CompareWithDisplayName("New")]Di2015NewLinepublic string ConfirmPassword { get; set; }Di2015NewLine
18417290Di2015UniqueSeparatorDataAnnotationsModelValidatorProvider.RegisterAdapter(typeof(CompareWithDisplayName), typeof(CompareAttributeAdapter))Di2015NewLine
18417514Di2015UniqueSeparatorstring[] mails = new string[4];Di2015NewLine    ListViewItem itm;Di2015NewLine    Private Outlook.Application app = new Outlook.Application();Di2015NewLineDi2015NewLine    private void comboBoxFolder_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (comboBoxFolder.SelectedIndex == 0)Di2015NewLine        {Di2015NewLineDi2015NewLine                Outlook.NameSpace outlookNs = app.GetNamespace("MAPI");Di2015NewLine                Outlook.MAPIFolder emailFolder = outlookNs.GetDefaultFolder(Microsoft.Office.Interop.Outlook.OlDefaultFolders.olFolderInbox);Di2015NewLineDi2015NewLine                foreach (Outlook.MailItem item in emailFolder.Items)Di2015NewLine                {Di2015NewLine                    mails[0] = item.SenderEmailAddress;Di2015NewLine                    mails[1] = item.To;Di2015NewLine                    mails[2] = item.Subject;Di2015NewLine                    mails[3] = Convert.ToString(item.ReceivedTime);Di2015NewLineDi2015NewLine                    itm = new ListViewItem(mails);Di2015NewLine                    listViewEmail.Items.Add(itm);Di2015NewLineDi2015NewLine                }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
18417521Di2015UniqueSeparatorprivate async void photoChooserTask_Completed(object sender, PhotoResult e)Di2015NewLine{Di2015NewLine    if (e.TaskResult == TaskResult.OK)Di2015NewLine    {Di2015NewLine        // Load the image source into a writeable bitmapDi2015NewLine        BitmapImage bi = new BitmapImage();Di2015NewLine        bi.SetSource(e.ChosenPhoto);Di2015NewLine        WriteableBitmap wb = new WriteableBitmap(bi);Di2015NewLineDi2015NewLine        // Buffer the photo content in memory (90% quality; adjust parameter as needed)Di2015NewLine        byte[] buffer = null;Di2015NewLineDi2015NewLine        using (var ms = new System.IO.MemoryStream())Di2015NewLine        {Di2015NewLine            int quality = 90;Di2015NewLine            e.ChosenPhoto.Seek(0, SeekOrigin.Begin);Di2015NewLineDi2015NewLine            // TODO: Crop or rotate here if neededDi2015NewLine            // Resize the photo by changing parameters to SaveJpeg() below if desiredDi2015NewLineDi2015NewLine            wb.SaveJpeg(ms, wb.PixelWidth, wb.PixelHeight, 0, quality);Di2015NewLine            buffer = ms.ToArray();Di2015NewLine        }Di2015NewLineDi2015NewLine        // Save the image to isolated storage with new Win 8 APIsDi2015NewLine        var isoFolder = Windows.Storage.ApplicationData.Current.LocalFolder;Di2015NewLine        var nextImageName = Guid.NewGuid() + ".jpg";Di2015NewLine        var newImageFile = await isoFolder.CreateFileAsync(nextImageName, Windows.Storage.CreationCollisionOption.FailIfExists);Di2015NewLine        using (var wfs = await newImageFile.OpenStreamForWriteAsync())Di2015NewLine        {Di2015NewLine            wfs.Write(buffer, 0, buffer.Length);Di2015NewLine        }Di2015NewLineDi2015NewLine        // Use the path property of the StorageFile to set the lock screen URIDi2015NewLine        Windows.Phone.System.UserProfile.LockScreen.SetImageUri(new Uri(newImageFile.Path, UriKind.Absolute));Di2015NewLine    }Di2015NewLine}Di2015NewLine
18417525Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public Model ModelDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        Model=new Model();Di2015NewLineDi2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        this.DataContext = this;Di2015NewLine    }Di2015NewLine} Di2015NewLine
18417525Di2015UniqueSeparator<ListView ItemsSource="{Binding Model,Converter={StaticResource PropConverter}}"/>Di2015NewLine
18417525Di2015UniqueSeparatorViewModel
18417525Di2015UniqueSeparatorpublic class MainViewModelDi2015NewLine{Di2015NewLine    public MainViewModel()Di2015NewLine    {Di2015NewLine        Model = new Model();Di2015NewLine    }Di2015NewLine    public Model ModelDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18417525Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    MainViewModel _vm;Di2015NewLineDi2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        _vm = new MainViewModel();Di2015NewLine        this.DataContext = _vm;Di2015NewLine    }Di2015NewLine} Di2015NewLine
18417665Di2015UniqueSeparatorTDerived
18417665Di2015UniqueSeparatorBase
18417665Di2015UniqueSeparatorCast
18417665Di2015UniqueSeparatorTDerived
18417665Di2015UniqueSeparatorIEnumerable
18417665Di2015UniqueSeparatorvoid Test3<TDerived>(IEnumerable<TDerived> derived) where TDerived : BaseDi2015NewLine{Di2015NewLine    IEnumerable<Base> b = derived;Di2015NewLine}Di2015NewLine
18417665Di2015UniqueSeparatorclass
18417665Di2015UniqueSeparatorTDerived
18417665Di2015UniqueSeparatorvoid Test3<TDerived, TBase>(IEnumerable<TDerived> derived)Di2015NewLine    where TDerived : class, TBaseDi2015NewLine{Di2015NewLine    IEnumerable<TBase> b = derived;Di2015NewLine}Di2015NewLine
18417689Di2015UniqueSeparatorStopwatch
18417710Di2015UniqueSeparatorFont usefont = DatabaseHandler.GetFont();Di2015NewLineList<Form> formList = new List<Form>();Di2015NewLineformList.Add(Form1);Di2015NewLineformList.Add(Form2);Di2015NewLineforeach (Form frm in formList) {Di2015NewLine   foreach (Control ctl in frm.Controls) {Di2015NewLine       ctl.Font = usefont;Di2015NewLine   }Di2015NewLine}Di2015NewLine
18418045Di2015UniqueSeparator<input type='button' onclick='onClick()' value='Find country code'></input>Di2015NewLine
18418065Di2015UniqueSeparatorInclude
18418065Di2015UniqueSeparatorSalesOrderHeaders.Include(s => s.SalesOrderDetailsDi2015NewLine                                .Select(d => d.SpecialOfferProduct))Di2015NewLine                 .Where(s => s.SalesOrderID == 43659)Di2015NewLine                 .Single().SalesOrderDetailsDi2015NewLine
18418065Di2015UniqueSeparator.Include(s => s.SalesOrderDetails.Where(sod => sod.OrderQty > 3)Di2015NewLine               .Select(d => d.SpecialOfferProduct))Di2015NewLine
18418065Di2015UniqueSeparatorSalesOrderDetails
18418065Di2015UniqueSeparatorSpecialProducts
18418065Di2015UniqueSeparatorIQueryable
18418142Di2015UniqueSeparatorInvokeRequired
18418142Di2015UniqueSeparatorInvoke
18418246Di2015UniqueSeparatorLandingController
18418246Di2015UniqueSeparatorLandedAttribute
18418246Di2015UniqueSeparator[AllowAnonymous]
18418246Di2015UniqueSeparator[AllowAnonymous]Di2015NewLinepublic ActionResult Accept()Di2015NewLine{Di2015NewLine    // body of the action here.Di2015NewLine}Di2015NewLine
18418246Di2015UniqueSeparatorLandedAttribute
18418246Di2015UniqueSeparatorHttpContext.Current.Response
18418246Di2015UniqueSeparatorRequest
18418246Di2015UniqueSeparatorResponse
18418344Di2015UniqueSeparator// Simple synchronous file move operations with no user interface. Di2015NewLinepublic class SimpleFileMoveDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string sourceFile = @"C:\\Users\\Public\\public\\test.txt";Di2015NewLine        string destinationFile = @"C:\\Users\\Public\\private\\test.txt";Di2015NewLineDi2015NewLine        // To move a file or folder to a new location:Di2015NewLine        System.IO.File.Move(sourceFile, destinationFile);Di2015NewLineDi2015NewLine        // To move an entire directory. To programmatically modify or combine Di2015NewLine        // path strings, use the System.IO.Path class.Di2015NewLine        System.IO.Directory.Move(@"C:\\Users\\Public\\public\\test\\", @"C:\\Users\\Public\\private");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18418381Di2015UniqueSeparator   txtSettings.Text = System.IO.File.ReadAllText(path_to_file);Di2015NewLine
18418381Di2015UniqueSeparator   System.IO.File.WriteAllText(path_to_file, txtSettings.Text);Di2015NewLine
18418464Di2015UniqueSeparatorPropertyInfo.GetValue
18418464Di2015UniqueSeparatorvar properties = new Expression<Func<SqueezeProperties, object>>[]Di2015NewLine{Di2015NewLine    o => o.WidthField,Di2015NewLine    o => o.Width_unit,Di2015NewLine    //...Di2015NewLine};Di2015NewLineforeach (var exp in properties)Di2015NewLine{Di2015NewLine    var mem = (MemberExpression)exp.Body;Di2015NewLine    var prop = (PropertyInfo)mem.Member;Di2015NewLineDi2015NewLine    oSheet.Cells[r, c++] = prop.GetValue(squeezePropertiesInstance, null);Di2015NewLine}Di2015NewLine
18418484Di2015UniqueSeparatorstring path = "C:\\\\Users1\\\\Users2\\\\Users122\\\\Users13\\\\Users133\\\\filename.xml";Di2015NewLinepath = path.Replace("\\\\TestResults", string.Empty);Di2015NewLine// you will get "C:\\Users222333\\filename.xml"Di2015NewLine
18418484Di2015UniqueSeparatorpath = string.Join(Path.DirectorySeparatorChar.ToString(),      Di2015NewLine           path.Split(Path.DirectorySeparatorChar).Where(x=> x!="Users1").ToArray()));Di2015NewLineDi2015NewLine//C:\\Users2\\Users122\\Users13\\Users133\\filename.xmlDi2015NewLine
18418607Di2015UniqueSeparatorNormalize(NormalizationForm.FormKC)
18418607Di2015UniqueSeparator"ï¼".Normalize(NormalizationForm.FormKC); // returns "6"Di2015NewLine"6".Normalize(NormalizationForm.FormKC); // also returns "6"Di2015NewLine
18418607Di2015UniqueSeparatorstatic bool IsEqualAfterNormalizingKC(string s1, string s2) {Di2015NewLine    if (s1 == null && s2 == null) return true;Di2015NewLine    if (s1 == null || s2 == null) return false;Di2015NewLine    return s1.Normalize(NormalizationForm.FormKC) == s2.Normalize(NormalizationForm.FormKC);Di2015NewLine}Di2015NewLineIsEqualAfterNormalizingKC("ï¼", "6"); // trueDi2015NewLine
18418642Di2015UniqueSeparator    System.Text.RegularExpressions.RegexDi2015NewLine        dayParseRegex = new System.Text.RegularExpressions.Regex(@"(?<days>\\d)( days\\))$");Di2015NewLine    HtmlAgilityPack.HtmlDocument currentHTML = new HtmlAgilityPack.HtmlDocument();Di2015NewLine    HtmlWeb webget = new HtmlWeb();Di2015NewLine    currentHTML = webget.Load("http://www.aliexpress.com/item/-/255859073.html");Di2015NewLineDi2015NewLine    //Extract nodeDi2015NewLine    var handlingTimeNode = currentHTML.DocumentNode.SelectSingleNode("//*[@id=\\"product-info-shipping-sub\\"]");Di2015NewLineDi2015NewLine    //Run RegEx against textDi2015NewLine    var match = dayParseRegex.Match(handlingTimeNode.InnerText);Di2015NewLineDi2015NewLine    //Convert the days to an integer from the resultant groupDi2015NewLine    int shippingDays = Convert.ToInt32(match.Groups["days"].Value);Di2015NewLine
18418733Di2015UniqueSeparatorstring.Format
18418733Di2015UniqueSeparator Console.WriteLine("Earnings this week: " +string.Format("{0:0.00}", answer));Di2015NewLine
18418883Di2015UniqueSeparatorHttpUtility.ParseQueryString
18418883Di2015UniqueSeparator// Parse the query string variables into a NameValueCollection.Di2015NewLineNameValueCollection qscoll = HttpUtility.ParseQueryString(querystring);Di2015NewLine
18419008Di2015UniqueSeparatorprivate void button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  listBox3.Items.Add(string.Format("{0} {1}", listBox1.Items[0].ToString().Trim() , listBox2.Items[0].ToString().Trim()));Di2015NewLine}Di2015NewLine
18419008Di2015UniqueSeparatorprivate void button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  listBox3.Items.Add( string.Format("{0} {1}", string.Join(" ", listBox1.Items.Cast<string>()) , string.Join(" ", listBox2.Items.Cast<string>())));Di2015NewLine}Di2015NewLine
18419008Di2015UniqueSeparatorprivate void button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  listBox3.Items.AddRange(listBox1.Items.Cast<string>().Zip(listBox2.Items.Cast<string>(), (first, second) => first + " " + second).ToArray());Di2015NewLine}Di2015NewLine
18419017Di2015UniqueSeparatorMemoryStream
18419017Di2015UniqueSeparatorvar fileStream = System.IO.File.ReadAllBytes(@"path/to/document.doc");Di2015NewLinevar stream = new MemoryStream(fileStream);Di2015NewLinestream.WriteTo(Response.OutputStream);Di2015NewLineResponse.AddHeader("Content-Disposition","Attachment;filename=documentName.doc");Di2015NewLineResponse.ContentType = "application/msword";Di2015NewLine
18419020Di2015UniqueSeparatorSystem.Data.SqlServerCe
18419020Di2015UniqueSeparatorSqlCeConnection conn = new SqlCeConnection(source);Di2015NewLine
18419020Di2015UniqueSeparator    string source = "Data Source=E:\\\\Documents\\\\Database\\\\MyDatabase.sdf;" +Di2015NewLine                    "Password=password;" +Di2015NewLine                    "Persist Security Info=False;";Di2015NewLine
18419054Di2015UniqueSeparatorSubscribe
18419054Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine  Observable.Timer(DateTimeOffset.Now, TimeSpan.FromSeconds(0.5))Di2015NewLine            .Subscribe(x => Console.WriteLine("Got " + x));Di2015NewLine}Di2015NewLine
18419054Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Observable.Timer(DateTimeOffset.Now, TimeSpan.FromSeconds(0.5))Di2015NewLine               .Subscribe(x => Console.WriteLine("Got " + x));Di2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
18419054Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Observable.Timer(DateTimeOffset.Now, TimeSpan.FromSeconds(0.5))Di2015NewLine              .Subscribe(x => Console.WriteLine("Got " + x));Di2015NewLineDi2015NewLine    while (Console.ReadKey().Key != ConsoleKey.Q)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
18419164Di2015UniqueSeparatorpublic class Item {Di2015NewLine    private List<Operation> _operations = new List<Operation>();Di2015NewLine    private List<int> _operationsID = new List<int>();Di2015NewLineDi2015NewLine    public void addOperation(Operation o) {Di2015NewLine        _operations.Add(o);Di2015NewLine        _operationsID.Add(getIdentifier(o));Di2015NewLine    }Di2015NewLineDi2015NewLine    public void removeOperation(Operation o) {Di2015NewLine        _operations.Remove(o);Di2015NewLine        _operationsID.Remove(getIdentifier(o));Di2015NewLine    }Di2015NewLineDi2015NewLine    public void clear() {Di2015NewLine        _operations.clear();Di2015NewLine        _operationsID.clear();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void findOperationMatching(Foobar foo) {Di2015NewLine        //Di2015NewLine    }Di2015NewLineDi2015NewLine    private int getIdentifier(Operation id) {Di2015NewLine        //Di2015NewLine    }Di2015NewLine}Di2015NewLine
18419253Di2015UniqueSeparator    #region Windows Form Designer generated codeDi2015NewLine
18419253Di2015UniqueSeparator    protected override void Dispose(bool disposing) {Di2015NewLine        if (disposing) Queue.Dispose();Di2015NewLine        if (disposing && (components != null)) {Di2015NewLine            components.Dispose();Di2015NewLine        }Di2015NewLine        base.Dispose(disposing);Di2015NewLine    }Di2015NewLine
18419260Di2015UniqueSeparatorIFoo
18419260Di2015UniqueSeparatorName
18419260Di2015UniqueSeparatorobject property = typeof(IFoo).GetProperty("Name").GetValue(foo);Di2015NewLine
18419260Di2015UniqueSeparatorIFoo
18419260Di2015UniqueSeparatorpublic interface IBaseDi2015NewLine{Di2015NewLine    string Name { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IFoo : IBaseDi2015NewLine{Di2015NewLine}Di2015NewLine
18419260Di2015UniqueSeparatorName
18419269Di2015UniqueSeparatorPictures library
18419269Di2015UniqueSeparator    private async void SetImageSource()Di2015NewLine    {Di2015NewLine        var file = await Di2015NewLine          Windows.Storage.KnownFolders.PicturesLibrary.GetFileAsync("about.png");Di2015NewLine        var stream = await file.OpenReadAsync();Di2015NewLine        var bitmapImage = new BitmapImage();Di2015NewLine        bitmapImage.SetSource(stream);Di2015NewLineDi2015NewLine        image1.Source = bitmapImage;Di2015NewLine    }Di2015NewLine
18419269Di2015UniqueSeparator    public MainPage()Di2015NewLine    {Di2015NewLine        this.InitializeComponent();Di2015NewLine        Uri uri = new Uri(BaseUri, "about.png");Di2015NewLine        BitmapImage imgSource = new BitmapImage(uri);Di2015NewLine        this.image1.Source = imgSource;Di2015NewLine    }Di2015NewLine
18419269Di2015UniqueSeparator<Image x:Name="image1" Source="ms-appx:/about.png"/>Di2015NewLine
18419269Di2015UniqueSeparatorPackage.appxmanifest
18419269Di2015UniqueSeparatorPictures Library
18419317Di2015UniqueSeparatorSelectedItems
18419317Di2015UniqueSeparatorListBoxControl
18419317Di2015UniqueSeparatorListBoxControl
18419317Di2015UniqueSeparator// populate the listbox with a list of all ProductsDi2015NewLine// allProducts is an IEnumerable<Product> where Product has a Description propertyDi2015NewLinelistBoxControl1.Items.AddRange(allProducts.Select(x => x.Description).ToArray());Di2015NewLine
18419317Di2015UniqueSeparator// "client" is type Client which contains a collection of selected ProductsDi2015NewLineforeach (var product in client.Products)Di2015NewLine{Di2015NewLine    var idx = listBoxControl1.FindStringExact(product.Description);Di2015NewLine    listBoxControl1.SetSelected(idx, true);Di2015NewLine}Di2015NewLine
18419317Di2015UniqueSeparatorListBoxControl.SelectedItems
18419332Di2015UniqueSeparatorbool filesDeleted;Di2015NewLinebool dirsDeleted;Di2015NewLine
18419332Di2015UniqueSeparatorbool filesDeleted = false;Di2015NewLinebool dirsDeleted = false;Di2015NewLine
18419332Di2015UniqueSeparator5.1.7 Local variables
18419353Di2015UniqueSeparatorref
18419353Di2015UniqueSeparatorcompare()
18419353Di2015UniqueSeparatorBase_strategy
18419353Di2015UniqueSeparatorBase_strategy
18419353Di2015UniqueSeparatorplayer1
18419353Di2015UniqueSeparatorplayer2
18419353Di2015UniqueSeparatorstatic public void compare(Base_strategy player1, Base_strategy player2)Di2015NewLine{Di2015NewLine    /* stuff */Di2015NewLine}Di2015NewLine
18419439Di2015UniqueSeparator        protected override CreateParams CreateParamsDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                CreateParams result = base.CreateParams;Di2015NewLine                result.ExStyle |= 0x02000000; // WS_EX_COMPOSITED Di2015NewLine                return result;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18419478Di2015UniqueSeparatorclass TestAttribute : Attribute {Di2015NewLine    public TestAttribute(object value) { }Di2015NewLine}Di2015NewLineDi2015NewLine[Test(1.2m)]         // NOTE: CS0182Di2015NewLineclass Example { }Di2015NewLine
18419522Di2015UniqueSeparator        //Update() methodDi2015NewLine        if (CurrentGameState == gameState.gameLoading)Di2015NewLine        {Di2015NewLine            if (Keyboard.GetState().IsKeyDown(Keys.Enter))Di2015NewLine            {Di2015NewLine                graphics.ToggleFullScreen(); //?Di2015NewLine            }Di2015NewLine            graphics.ApplyChanges();Di2015NewLine        }Di2015NewLine
18419571Di2015UniqueSeparatordiag:PresentationTraceSources.TraceLevel=High
18419571Di2015UniqueSeparatorSomeClassProp
18419571Di2015UniqueSeparatorSomeClassProp
18419571Di2015UniqueSeparatorInitializeComponent()
18419571Di2015UniqueSeparatorMainWindow
18419571Di2015UniqueSeparatorElementName
18419571Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    SomeClassProp = new SomeClass();Di2015NewLine    InitializeComponent();Di2015NewLine}Di2015NewLine
18419571Di2015UniqueSeparatorRelativeSource
18419571Di2015UniqueSeparatorSystem.Windows.Data Warning: 66 : BindingExpression (hash=28713467): RelativeSource (FindAncestor) requires tree contextDi2015NewLineSystem.Windows.Data Warning: 65 : BindingExpression (hash=28713467): Resolve source deferredDi2015NewLine
18419571Di2015UniqueSeparatorRelativeSource
18419571Di2015UniqueSeparatorWindow
18419571Di2015UniqueSeparatorSomeClassProperty
18419802Di2015UniqueSeparatorlistbox3.items.add(listbox1.SelectedItem.ToString() + listbox2.SelectedItem.ToString());Di2015NewLine
18419802Di2015UniqueSeparatorWebRequest request = WebRequest.Create(listBox1.SelectedItem.ToString() +   Di2015NewLinelistBox2.SelectedItem.ToString());Di2015NewLine
18419802Di2015UniqueSeparatorIf exception occurs and different url is expected then do select different url entries    Di2015NewLinefrom both listbox1 and listbox2 and click the button to check. Also keep correct Di2015NewLineentries in both the listboxes to avoid exception.Di2015NewLine
18420261Di2015UniqueSeparatorGrid
18420261Di2015UniqueSeparator<TextBox>Di2015NewLine    <TextBox.Template>Di2015NewLine        <ControlTemplate TargetType="{x:Type TextBox}">Di2015NewLine            <Grid Background="Gray" Margin="5" Width="100">Di2015NewLine                <Grid.ColumnDefinitions>Di2015NewLine                    <ColumnDefinition Width="*" />Di2015NewLine                    <ColumnDefinition Width="23" />Di2015NewLine                </Grid.ColumnDefinitions>Di2015NewLine                <TextBox Background="Transparent" BorderThickness="0" Text="{TemplateBinding Text}" />Di2015NewLine                <Image Grid.Column="1"                    Di2015NewLine                   Source="http://png.findicons.com/files/icons/1742/ecqlipse_2/128/microphone.png" />Di2015NewLine            </Grid>Di2015NewLine        </ControlTemplate>Di2015NewLine    </TextBox.Template>Di2015NewLine</TextBox>Di2015NewLine
18420296Di2015UniqueSeparatorif (aProperty.PropertyType.IsGenericType &&Di2015NewLine    aProperty.GetGenericTypeDefinition() == typeof(MyGenericProperty<>))Di2015NewLine
18420296Di2015UniqueSeparatorMyGenericProperty<>
18420296Di2015UniqueSeparatorMyGenericProperty
18420296Di2015UniqueSeparatorif (aProperty.PropertyType.IsGenericType &&Di2015NewLine    aProperty.GetGenericTypeDefinition() == typeof(MyGenericProperty<>))Di2015NewLine{Di2015NewLine    var value = (MyGenericProperty) aProperty.GetValue(sourceObject, null);Di2015NewLine    // Use valueDi2015NewLine}Di2015NewLine
18420296Di2015UniqueSeparatorType.IsAssignableFrom
18420296Di2015UniqueSeparatorif (typeof(MyGenericProperty).IsAssignableFrom(aProperty.PropertyType))Di2015NewLine{Di2015NewLine    var value = (MyGenericProperty) aProperty.GetValue(sourceObject, null);Di2015NewLine    // Use valueDi2015NewLine}Di2015NewLine
18420322Di2015UniqueSeparator<customBinding>Di2015NewLine  <binding name="NewBinding0">Di2015NewLine    <transactionFlow />Di2015NewLine    <security authenticationMode="SecureConversation" messageSecurityVersion="WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10">Di2015NewLine      <secureConversationBootstrap authenticationMode="UserNameForSslNegotiated" messageSecurityVersion="WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />Di2015NewLine    </security>Di2015NewLine    <textMessageEncoding />Di2015NewLine    <httpTransport />Di2015NewLine  </binding>Di2015NewLine</customBinding>Di2015NewLine
18420416Di2015UniqueSeparatorIDbContextFactory<TContext>
18420416Di2015UniqueSeparatorDefaultContextFactory<MyContext>
18420416Di2015UniqueSeparator_context = contextFactory.Create();
18420416Di2015UniqueSeparator_context.WhatEver()
18420416Di2015UniqueSeparatorModuleLoader
18420416Di2015UniqueSeparatorBind<IRepository>().To<DefaultRepository>().InTransientScope()
18420435Di2015UniqueSeparatorTextBlock
18420435Di2015UniqueSeparatorXAML
18420435Di2015UniqueSeparator<Grid>Di2015NewLine    <TextBlock Name="SampleTextBlock" Width="200" Height="30" Di2015NewLine               Background="AntiqueWhite" Text="Sample TextBlock" Di2015NewLine               local:MyDependencyClass.MyPropertyForTextBlock="TestString" />Di2015NewLineDi2015NewLine    <StackPanel Width="100" Height="100" HorizontalAlignment="Left">Di2015NewLine        <Button Name="GetValueButton" Content="GetValueButton" Click="GetValue_Click" />Di2015NewLine        <Button Name="SetValueButton" Content="SetValueButton" Click="SetValue_Click" />Di2015NewLine    </StackPanel>Di2015NewLine</Grid>Di2015NewLine
18420435Di2015UniqueSeparatorCode behind
18420435Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void GetValue_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show(MyDependencyClass.GetMyPropertyForTextBlock(SampleTextBlock));Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SetValue_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        MyDependencyClass.SetMyPropertyForTextBlock(SampleTextBlock, "New Value");Di2015NewLineDi2015NewLine        MessageBox.Show(MyDependencyClass.GetMyPropertyForTextBlock(SampleTextBlock));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyDependencyClass : DependencyObjectDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty MyPropertyForTextBlockProperty;Di2015NewLineDi2015NewLine    public static void SetMyPropertyForTextBlock(DependencyObject DepObject, string value)Di2015NewLine    {Di2015NewLine        DepObject.SetValue(MyPropertyForTextBlockProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string GetMyPropertyForTextBlock(DependencyObject DepObject)Di2015NewLine    {Di2015NewLine        return (string)DepObject.GetValue(MyPropertyForTextBlockProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    static MyDependencyClass()Di2015NewLine    {Di2015NewLine        PropertyMetadata MyPropertyMetadata = new PropertyMetadata(string.Empty);Di2015NewLineDi2015NewLine        MyPropertyForTextBlockProperty = DependencyProperty.RegisterAttached("MyPropertyForTextBlock",Di2015NewLine                                                            typeof(string),Di2015NewLine                                                            typeof(MyDependencyClass),Di2015NewLine                                                            MyPropertyMetadata);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18420435Di2015UniqueSeparatorTag
18420435Di2015UniqueSeparatorValueForAnimation
18420435Di2015UniqueSeparatorStringId
18420435Di2015UniqueSeparatorCanScrolling
18420488Di2015UniqueSeparatorWebSecurity.InitializeDatabaseConnection("DefaultConnection", "UserProfile", "UserId", "UserName", autoCreateTables: true);
18420506Di2015UniqueSeparatorClient.GetAreaHeaders()
18420506Di2015UniqueSeparatorAreaModel
18420506Di2015UniqueSeparatorClient
18420506Di2015UniqueSeparatorClient
18420506Di2015UniqueSeparatorvar c = Areas;
18420506Di2015UniqueSeparatorAreas
18420506Di2015UniqueSeparatorClient.GetAreaHeaders()
18420506Di2015UniqueSeparatorvar c = Client;
18420506Di2015UniqueSeparatorc
18420506Di2015UniqueSeparatorClient
18420506Di2015UniqueSeparatorvar c = Areas;
18420506Di2015UniqueSeparatorAreas
18420506Di2015UniqueSeparatorc
18420506Di2015UniqueSeparator_client
18420506Di2015UniqueSeparatorClient
18420506Di2015UniqueSeparatorAreaModel
18420506Di2015UniqueSeparatorClient
18420506Di2015UniqueSeparatorAreas
18420506Di2015UniqueSeparatorClient
18420858Di2015UniqueSeparatorCanvas
18420858Di2015UniqueSeparatorPath
18420858Di2015UniqueSeparatorPath
18420858Di2015UniqueSeparator<Canvas>Di2015NewLine    <Path Stroke="Red" StrokeThickness="3" Di2015NewLine        Data="M 241,200 Di2015NewLine              A 20,20 0 0 0 200,240Di2015NewLine              C 210,250 240,270 240,270Di2015NewLine              C 240,270 260,260 280,240Di2015NewLine              A 20,20 0 0 0 239,200Di2015NewLine              " />Di2015NewLine</Canvas>Di2015NewLine
18420858Di2015UniqueSeparatorM 241,200             // Move to (241, 200)Di2015NewLineA 20,20 0 0 0 200,240 // Draw an arc from current position to (200,240), with a size of 20x20 pixelsDi2015NewLineC 210,250 240,270 240,270 // Draw a cubic Bezier to point (240,270) with control points at (210,250), (240,270).Di2015NewLine
18420902Di2015UniqueSeparatorusing System.Collections.Generic
18421076Di2015UniqueSeparatorint
18421076Di2015UniqueSeparatorpublic static final int IAC = 255;Di2015NewLine...Di2015NewLinevoid parseBuffer(byte[] bb, int len) {Di2015NewLine    try {Di2015NewLine        for(int i = 0; i < len; i++) {Di2015NewLine            int value = bb[i] & 0xff; // To get a value in the range [0, 255]Di2015NewLine            if (value == IAC) {Di2015NewLine                DoSomething();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18421142Di2015UniqueSeparatorAutoZoom = false
18421142Di2015UniqueSeparatordlg.PrintPreviewControl.AutoZoom = false;Di2015NewLine
18421142Di2015UniqueSeparatorPrintPreviewControl
18421142Di2015UniqueSeparatorAutoZoom
18421142Di2015UniqueSeparatorZoom
18421142Di2015UniqueSeparatorToolStrip
18421142Di2015UniqueSeparatorPrintPreviewDialog
18421142Di2015UniqueSeparatorPrintPreviewControl
18421142Di2015UniqueSeparatorPrintPreviewControl
18421142Di2015UniqueSeparatorToolStrip
18421142Di2015UniqueSeparatorItems
18421142Di2015UniqueSeparatorToolStripSplitButton
18421142Di2015UniqueSeparatorDropDownItems
18421142Di2015UniqueSeparator100%
18421142Di2015UniqueSeparatorPerformClick
18421142Di2015UniqueSeparatorToolStripSplitButton zoomButton = ((ToolStrip)dlg.Controls[1]).Items[1] as ToolStripSplitButton;Di2015NewLinezoomButton.DropDownItems[4].PerformClick();//Check the 100% item in the zoom listDi2015NewLine
18421200Di2015UniqueSeparatorIsolatedStorageFile.CreateFile
18421200Di2015UniqueSeparatorIsolatedStorageFileStream
18421275Di2015UniqueSeparator             doc = page.Documents.Open(Application.StartupPath + "\\\\old\\\\" + fi);Di2015NewLine            if (doc != null)Di2015NewLine            {Di2015NewLine                for (int x = 1; x <= doc.Words.Count - 1; x++)Di2015NewLine                {Di2015NewLine                        if (doc.Words[x].Underline != word.WdUnderline.wdUnderlineNone && doc.Words[x].Underline != word.WdUnderline.wdUnderlineDouble)Di2015NewLine                            doc.Words[x].Font = new word.Font() { Name = "Times New Roman", Bold = 4, Size = 12 };Di2015NewLine                        elseDi2015NewLine                            doc.Words[x].Font = new word.Font() { Name = "Times New Roman", Size = 8 };Di2015NewLine                }Di2015NewLine
18421327Di2015UniqueSeparatorvoid onCollisionEnter()Di2015NewLine
18421327Di2015UniqueSeparatorvoid OnCollisionEnter(Collision collision)Di2015NewLine
18421493Di2015UniqueSeparator@using (Html.BeginForm())Di2015NewLine{Di2015NewLine    @(Html.EditorFor(m => m.ContactInfo));Di2015NewLine}Di2015NewLine
18421493Di2015UniqueSeparatorEmployeeContactInfo.cshtml
18421493Di2015UniqueSeparatorstring
18421493Di2015UniqueSeparatorbool
18421493Di2015UniqueSeparator@model EmployeeContactInfoDi2015NewLineDi2015NewLine@Html.LabelFor(m => m.Email)Di2015NewLine@Html.TextBoxFor(m => m.Email)Di2015NewLine
18421624Di2015UniqueSeparatorProcessStartInfo startInfo = new ProcessStartInfo();Di2015NewLinestartInfo.FileName = "C:\\\\Python27\\\\Scripts\\\\path\\\\file.py";Di2015NewLinestartInfo.Arguments = "myvariable";Di2015NewLineDi2015NewLinetry Di2015NewLine{Di2015NewLine    using (Process exeProcess = Process.Start(startInfo))Di2015NewLine    {Di2015NewLine         //dostuffDi2015NewLine         exeProcess.WaitForExit();Di2015NewLine    }Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    //logDi2015NewLine    throw;Di2015NewLine}Di2015NewLine
18421686Di2015UniqueSeparatorDataGrid
18421686Di2015UniqueSeparatorAutoGenerateEditButton
18421686Di2015UniqueSeparatorGridView
18421686Di2015UniqueSeparatorGridView
18421686Di2015UniqueSeparatorDataGrid
18421794Di2015UniqueSeparatorInvalidCastException
18421794Di2015UniqueSeparatorx.Field<Int32>("userid")
18421794Di2015UniqueSeparatorField<T>
18421794Di2015UniqueSeparatorInvalidCastException
18421794Di2015UniqueSeparatorField<T>
18421794Di2015UniqueSeparatoruserid
18421794Di2015UniqueSeparatorInt32
18421794Di2015UniqueSeparatoruserid
18421794Di2015UniqueSeparatorUInt32
18421794Di2015UniqueSeparatorInt32
18421794Di2015UniqueSeparatorx.Field<UInt32>("userid")Di2015NewLine
18421936Di2015UniqueSeparatorpublic static int[,][,] values = new int[factor, factor][,];Di2015NewLine
18421936Di2015UniqueSeparatornull
18421936Di2015UniqueSeparatorNullReferenceException
18421936Di2015UniqueSeparatorvalues[panelX, panelY][squareX, squareY] = conversion[count];Di2015NewLine
18421936Di2015UniqueSeparatorvalues[panelX, panelY] = new int[factor, factor];Di2015NewLinefor (int squareX = 0; squareX < factor; squareX++)Di2015NewLine
18421954Di2015UniqueSeparatorFile.Create(s2);
18421954Di2015UniqueSeparatorusing( File.Create(s2) );
18421954Di2015UniqueSeparatorFile.Create(s2).Close();
18422043Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{  Di2015NewLine   richTextBox1.SelectedText = "";Di2015NewLine}Di2015NewLine
18422043Di2015UniqueSeparatorimmutable
18422043Di2015UniqueSeparatorrichTextBox1.SelectedText
18422043Di2015UniqueSeparatorReplace
18422043Di2015UniqueSeparatorInsert
18422043Di2015UniqueSeparatorstring
18422043Di2015UniqueSeparatorstring
18422113Di2015UniqueSeparator   dynamic reply= JsonConvert.DeserializeObject(jsonstring)Di2015NewLine
18422125Di2015UniqueSeparatorO(1)
18422125Di2015UniqueSeparatorO(1)
18422125Di2015UniqueSeparatorDictionary
18422352Di2015UniqueSeparatorProcess.GetProcessesByName
18422352Di2015UniqueSeparatorProcess[] Runningcmd = Process.GetProcessesByName("cmd");Di2015NewLineif (Runningcmd.Length == 0)Di2015NewLine  Console.WriteLine("Command Line is not running");Di2015NewLineelseDi2015NewLine    foreach(var p in Runningcmd )Di2015NewLine    {Di2015NewLine       p.Kill();Di2015NewLine    }Di2015NewLine
18422439Di2015UniqueSeparatorpublic static void DeleteDirectoryRecursively(this IsolatedStorageFile storageFile, String dirName)Di2015NewLine{Di2015NewLine    String pattern = dirName + @"\\*";Di2015NewLine    String[] files = storageFile.GetFileNames(pattern);Di2015NewLine    foreach (var fName in files)Di2015NewLine    {Di2015NewLine        storageFile.DeleteFile(Path.Combine(dirName, fName));Di2015NewLine    }Di2015NewLine    String[] dirs = storageFile.GetDirectoryNames(pattern);Di2015NewLine    foreach (var dName in dirs)Di2015NewLine    {Di2015NewLine        DeleteDirectoryRecursively(storageFile, Path.Combine(dirName, dName));Di2015NewLine    }Di2015NewLine    storageFile.DeleteDirectory(dirName);Di2015NewLine}Di2015NewLine
18422528Di2015UniqueSeparatorHow much is (.*)\\?Di2015NewLine
18422528Di2015UniqueSeparatorHow much is (?:(\\w+)\\s*)+\\?Di2015NewLineDi2015NewLineRegex regexWords = new Regex(@"How much is (?:(\\w+)\\s*)+\\?");Di2015NewLineDi2015NewLineforeach(Capture word in regexWords.Match(input).Groups[1].Captures)Di2015NewLine{Di2015NewLine    // word.Value contains one word.Di2015NewLine}Di2015NewLine
18422563Di2015UniqueSeparatorvar d1 = new Dictionary<string, int>() { { "key1", 5 }, { "key2", 3 } };Di2015NewLinevar d2 = new Dictionary<string, int>() { { "key2", 1 } };Di2015NewLinevar d3 = new Dictionary<string, int>() { { "key1", 2 }, { "key3", 17 } };Di2015NewLineDi2015NewLineDi2015NewLinevar dict = new[] { d1, d2, d3 }.SelectMany(x => x)Di2015NewLine                    .GroupBy(x => x.Key)Di2015NewLine                    .ToDictionary(x => x.Key, x => x.Sum(y => y.Value));Di2015NewLine
18422577Di2015UniqueSeparatorstring rawdata = @"24 august 2013 Ð³.,,14:00,00:00,;Di2015NewLine24 august 2013 Ð³.,,14:00,00:00,;Di2015NewLine24 august 2013 Ð³.,2342,14:00,00:00,23424;Di2015NewLine24 august 2013 Ð³.,2342,14:00,19:00,23424;";//consider this is raw fileDi2015NewLineDi2015NewLinestring[] lines = rawdata.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLineList<string> result = new List<string>();Di2015NewLineforeach (var line in lines)Di2015NewLine{Di2015NewLine    if (!line.Contains("24 august 2013 Ð³.,2342"))Di2015NewLine    {Di2015NewLine        result.Add(line);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18422577Di2015UniqueSeparatorresult
18422952Di2015UniqueSeparatorgameState
18422952Di2015UniqueSeparatorUpdate
18422952Di2015UniqueSeparatorgameState
18423056Di2015UniqueSeparatorforeach (String a in split)Di2015NewLine{Di2015NewLine    conversion.Add(Convert.ToInt32(a));Di2015NewLine}Di2015NewLine
18423156Di2015UniqueSeparatorFileUpload
18423156Di2015UniqueSeparatorHttpPostedFile
18423156Di2015UniqueSeparatorInputStream
18423156Di2015UniqueSeparatorFileName
18423156Di2015UniqueSeparatorSaveAs
18423156Di2015UniqueSeparatorFileUpload2.SaveAs("C:\\\\Temp\\\\" + FileUpload2.FileName);Di2015NewLine
18423156Di2015UniqueSeparatorFileContent
18423156Di2015UniqueSeparatorusing (var sr = new StreamReader(FileUpload2.FileContent)) Di2015NewLine{Di2015NewLine    while ((var line = sr.ReadLine()) != null) Di2015NewLine    {Di2015NewLine        //Do something with 'line'Di2015NewLine    }Di2015NewLine}Di2015NewLine
18423269Di2015UniqueSeparator.assembly extern mscorlibDi2015NewLine{Di2015NewLine  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 ) Di2015NewLine  .ver 2:0:0:0Di2015NewLine}Di2015NewLine
18423269Di2015UniqueSeparator.ver
18423269Di2015UniqueSeparator.publickeytoken
18423332Di2015UniqueSeparatorconn
18423332Di2015UniqueSeparatorconn = new SqlConnection(connString);Di2015NewLine
18423374Di2015UniqueSeparatorRegister
18423374Di2015UniqueSeparatorpublic static readonly DependencyProperty ColProperty =Di2015NewLine    DependencyProperty.Register("Col", typeof(ObservableCollection<string>), typeof(ViewModel1), new PropertyMetadata(null));Di2015NewLine
18423374Di2015UniqueSeparatorCol
18423451Di2015UniqueSeparator// group by the replacement string and gather all the replacementsDi2015NewLinevar result = from a in context.ADi2015NewLine    join b in context.B on a.code equals b.codeDi2015NewLine    join c in context.C on a.id equals c.idDi2015NewLine    group new {b.text, c.key, c.val} by b.code into grpDi2015NewLine    select grp;Di2015NewLineDi2015NewLineDi2015NewLine// loop through each group and apply replacementsDi2015NewLineforeach(var r in result) {Di2015NewLine    var text = r.First().text;Di2015NewLineDi2015NewLine    foreach(var c in r) {Di2015NewLine        text = text.Replace(c.key, c.val);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18423609Di2015UniqueSeparator    System.Windows.Forms.Timer _timer = new System.Windows.Forms.Timer();Di2015NewLineDi2015NewLine    void CreateTimer()Di2015NewLine    {Di2015NewLine        _timer = new System.Windows.Forms.Timer();Di2015NewLine        _timer.Tick += new EventHandler(_timer_Tick);Di2015NewLine        _timer.Interval = 5000;Di2015NewLine        _timer.Enabled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    void _timer_Tick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        // do something.Di2015NewLine    }Di2015NewLine
18423880Di2015UniqueSeparatorsource.Provider.CreateQuery(Di2015NewLine    Expression.Call(Di2015NewLine        typeof(Queryable),Di2015NewLine        "Select",Di2015NewLine        new Type[] { source.ElementType, dynamicType },Di2015NewLine        Expression.Constant(source),Di2015NewLine        selector));Di2015NewLine
18423880Di2015UniqueSeparatorsource.Provider.CreateQuery(Di2015NewLine    Expression.Call(Di2015NewLine        typeof(Queryable),Di2015NewLine        "Select",Di2015NewLine        new Type[] { source.ElementType, lambda.Body.Type },Di2015NewLine        source.Expression,Di2015NewLine        Expression.Quote(lambda)));Di2015NewLine
18424114Di2015UniqueSeparatorif(products.Any(x=>x.code.Equals(Code.Text) && !x.id.Equals(Id.Text))){Di2015NewLine     CodeExists = true;Di2015NewLine}Di2015NewLine
18424136Di2015UniqueSeparatori
18424136Di2015UniqueSeparatortimers[i].Tick += (sender, e) => Tick(targs[5])
18424136Di2015UniqueSeparatorint locali = i
18424136Di2015UniqueSeparatorfor (i = 0; i <= 4; i++)Di2015NewLine{Di2015NewLine    int locali = i;Di2015NewLine    timers[locali].Tick += (sender, e) => Tick(targs[locali]);Di2015NewLine} Di2015NewLine
18424136Di2015UniqueSeparatori
18424136Di2015UniqueSeparatortargs[5]
18424136Di2015UniqueSeparatorIndexOutOfRangeException
18424136Di2015UniqueSeparatorlocali
18424136Di2015UniqueSeparatortimers[i].Tick
18424182Di2015UniqueSeparatortd
18424182Di2015UniqueSeparatortd
18424182Di2015UniqueSeparatortd
18424182Di2015UniqueSeparator<tr>Di2015NewLine <td class="title">         00-01           </td>Di2015NewLine <td class="spacer"></td>Di2015NewLine <td class="r">â¬/MWh</td>Di2015NewLine <td class="spacer"></td>Di2015NewLine <td>35.34</td>Di2015NewLine <td class="spacer"></td>Di2015NewLine <td>34.02</td>Di2015NewLine <td class="spacer"></td>Di2015NewLine <td>34.02</td>Di2015NewLine</tr>Di2015NewLine
18424182Di2015UniqueSeparatortable.SelectNodes("//td[@class='title'][.='            00-01          ']")
18424182Di2015UniqueSeparatorHtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLinedoc.LoadHtml(htmlCode);Di2015NewLineforeach (HtmlNode row in doc2.DocumentNode.SelectNodes("//td[@class='title'][(normalize-space(.)='00-01')]/ancestor::table"))Di2015NewLine{Di2015NewLine    foreach (var cell in row.SelectNodes("./tr/td"))Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(cell.InnerText.Trim()))Di2015NewLine            continue;Di2015NewLine        Console.WriteLine(cell.InnerText.Trim());Di2015NewLine    }Di2015NewLine}Di2015NewLine
18424182Di2015UniqueSeparatorHtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLinedoc.LoadHtml(htmlCode);Di2015NewLineforeach (HtmlNode row in doc.DocumentNode.SelectNodes("//td[@class='title']"))Di2015NewLine{Di2015NewLine    if (row.InnerText.Trim() == "00-01")Di2015NewLine    {Di2015NewLine        foreach (var cell in row.ParentNode.ChildNodes)Di2015NewLine        {Di2015NewLine            if (string.IsNullOrEmpty(cell.InnerText.Trim()))Di2015NewLine                continue;Di2015NewLine            Console.WriteLine(cell.InnerText.Trim());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18424182Di2015UniqueSeparatorHtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLinedoc.LoadHtml(htmlCode);Di2015NewLineforeach (HtmlNode row in doc2.DocumentNode.SelectNodes("//td[@class='title'][(normalize-space(.)='00-01')]"))Di2015NewLine{Di2015NewLine    foreach (var cell in row.ParentNode.ChildNodes)Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(cell.InnerText.Trim()))Di2015NewLine            continue;Di2015NewLine        Console.WriteLine(cell.InnerText.Trim());Di2015NewLine    }Di2015NewLine}Di2015NewLine
18424418Di2015UniqueSeparatoritems
18424418Di2015UniqueSeparatoritem
18424434Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    //download dataDi2015NewLine    //import dataDi2015NewLine}Di2015NewLinecatch (Exception e) //something went wrongDi2015NewLine{Di2015NewLine   //log the errorDi2015NewLine   UpdateFullImportJobTrigger(sched);Di2015NewLine}Di2015NewLineDi2015NewLine//Reschedule FullImportJob to run at a time of your choosing. Di2015NewLinepublic void UpdateFullImportJobTrigger(IScheduler sched)Di2015NewLine{Di2015NewLine   Trigger oldTrigger = sched.getTrigger(triggerKey("oldTrigger", "group1");Di2015NewLine   TriggerBuilder tb = oldTrigger.getTriggerBuilder();Di2015NewLineDi2015NewLine   //if you want it to run based on a schedule use this:Di2015NewLine   Trigger newTrigger = tb.withSchedule(simpleSchedule()Di2015NewLine  .withIntervalInSeconds(10)Di2015NewLine  .withRepeatCount(10)Di2015NewLine  .build();Di2015NewLineDi2015NewLine   sched.rescheduleJob(oldTrigger.getKey(), newTrigger);Di2015NewLineDi2015NewLine   //or use simple trigger if you want it to run immediately and only once so that Di2015NewLine   //it runs again on schedule the next time.Di2015NewLine}Di2015NewLine
18424434Di2015UniqueSeparator//this is done from FullImportJobDi2015NewLine//how you retrieve triggerKey will depend on whetherDi2015NewLine//you are using RAMJobStore or ADO.NET JobStoreDi2015NewLinepublic void Execute(IJobExecutionContext context)Di2015NewLine{Di2015NewLine    ITrigger incImportJobTrigger = context.Scheduler.GetTrigger(triggerKey);Di2015NewLineDi2015NewLine    //if the job has been rescheduled with a new time quartz will set this to nullDi2015NewLine    if (!incImportJobTrigger.GetPreviousFireTimeUtc().HasValue) return;Di2015NewLineDi2015NewLine    DateTimeOffset utcTime = incImportJobTrigger.GetPreviousFireTimeUtc().Value;Di2015NewLine    DateTime previousTireTime = utcTime.LocalDateTime;Di2015NewLineDi2015NewLine    if (previousTireTime.Day == DateTime.Now.Day) return; Di2015NewLineDi2015NewLine    //IncrementalImportJob has not ran today, let's run FullImportJob Di2015NewLine}Di2015NewLine
18424589Di2015UniqueSeparatorInvalidate()
18424589Di2015UniqueSeparatorInvalidate()
18424589Di2015UniqueSeparatorRectangle
18424589Di2015UniqueSeparatorOnPaint
18424589Di2015UniqueSeparatore.ClipRectangle
18424589Di2015UniqueSeparatorOnPaint
18424589Di2015UniqueSeparatorPen
18424589Di2015UniqueSeparatorSolidBrush
18424589Di2015UniqueSeparatorOnPaint
18424589Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication3Di2015NewLine{Di2015NewLine    public partial class CaptureScreen : FormDi2015NewLine    {Di2015NewLine        public Image Image { get; set; }Di2015NewLineDi2015NewLine        private Rectangle selection;Di2015NewLine        private Rectangle previousselection;Di2015NewLine        private Point startPoint;Di2015NewLineDi2015NewLine        public static Image Snip()Di2015NewLine        {Di2015NewLine            using (var bmp = new Bitmap(SystemInformation.VirtualScreen.Width, SystemInformation.VirtualScreen.Height, System.Drawing.Imaging.PixelFormat.Format32bppPArgb))Di2015NewLine            {Di2015NewLine                using (var graphics = Graphics.FromImage(bmp)) graphics.CopyFromScreen(SystemInformation.VirtualScreen.Left, SystemInformation.VirtualScreen.Top, 0, 0, bmp.Size);Di2015NewLine                using (var snipper = new CaptureScreen(bmp, new Point(SystemInformation.VirtualScreen.Left, SystemInformation.VirtualScreen.Top)))Di2015NewLine                {Di2015NewLine                    if (snipper.ShowDialog() == DialogResult.OK) return snipper.Image;Di2015NewLine                }Di2015NewLine                return null;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public CaptureScreen(Image screenShot, Point startPos)Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            Cursor = Cursors.Cross;Di2015NewLine            BackgroundImage = screenShot;Di2015NewLine            ShowInTaskbar = false;Di2015NewLine            FormBorderStyle = FormBorderStyle.None;Di2015NewLine            StartPosition = FormStartPosition.Manual;Di2015NewLine            Size = screenShot.Size;Di2015NewLine            Location = startPos;Di2015NewLine            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnMouseDown(MouseEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.Button != MouseButtons.Left) return;Di2015NewLine            startPoint = e.Location;Di2015NewLine            selection = new Rectangle(e.Location, new Size(0, 0));Di2015NewLine            previousselection = selection;Di2015NewLine            Invalidate();Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnMouseMove(MouseEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.Button != MouseButtons.Left) return;Di2015NewLine            var x1 = Math.Min(e.X, startPoint.X);Di2015NewLine            var y1 = Math.Min(e.Y, startPoint.Y);Di2015NewLine            var x2 = Math.Max(e.X, startPoint.X);Di2015NewLine            var y2 = Math.Max(e.Y, startPoint.Y);Di2015NewLine            Invalidate(previousselection); // invalidate old rect area so it gets blanked outDi2015NewLine            previousselection = selection;Di2015NewLine            selection = new Rectangle(x1, y1, x2 - x1, y2 - y1);Di2015NewLine            Invalidate(selection); // invalidate new rect area so it gets drawnDi2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnMouseUp(MouseEventArgs e)Di2015NewLine        {Di2015NewLine            if (selection.Width <= 0 || selection.Height <= 0) return;Di2015NewLine            Image = new Bitmap(selection.Width, selection.Height);Di2015NewLine            using (var gr = Graphics.FromImage(Image))Di2015NewLine            {Di2015NewLine                gr.DrawImage(BackgroundImage, new Rectangle(0, 0, Image.Width, Image.Height),Di2015NewLine                    selection, GraphicsUnit.Pixel);Di2015NewLine            }Di2015NewLine            DialogResult = DialogResult.OK;Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnPaint(PaintEventArgs e)Di2015NewLine        {Di2015NewLine            using (var br = new SolidBrush(Color.FromArgb(127, Color.White)))Di2015NewLine            using (var pen = new Pen(Color.Red, 1))Di2015NewLine            using (Region region = new Region(new Rectangle(0,0,Width,Height)))Di2015NewLine            {Di2015NewLine                region.Exclude(selection);Di2015NewLine                region.Intersect(e.ClipRectangle);Di2015NewLine                e.Graphics.FillRegion(br, region);Di2015NewLine                e.Graphics.DrawRectangle(pen, selection.X, selection.Y, selection.Width - 1, selection.Height - 1);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18424656Di2015UniqueSeparatorComboBox.Click
18424656Di2015UniqueSeparatorprivate void ComboBox1_Click(System.Object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    ComboBox1.DroppedDown = true;Di2015NewLine}Di2015NewLine
18424656Di2015UniqueSeparatorif ((MousePosition.Y - this.PointToScreen(NumericUpDown1.Location).Y < NumericUpDown1.Height / 2)) Di2015NewLine{Di2015NewLine    NumericUpDown1.Value += 1;Di2015NewLine}Di2015NewLineelse Di2015NewLine{Di2015NewLine    NumericUpDown1.Value -= 1;Di2015NewLine}Di2015NewLine
18424658Di2015UniqueSeparatorCurrentCulture
18424658Di2015UniqueSeparatorCurrentUICulture
18424692Di2015UniqueSeparator  <%= Html.ActionLink("download", "printDetails", "MyController", null, new {id = "someID" }) %> Di2015NewLine
18424692Di2015UniqueSeparator <a href="/MyController/printDetails" id="someID">download</a>Di2015NewLine
18424692Di2015UniqueSeparator$('#someID').attr('href','/MyController/printDetails?id='+fromdb);Di2015NewLine
18424692Di2015UniqueSeparatordocument.getElementById('someID').href='/MyController/printDetails?id='+fromdb;Di2015NewLine
18425006Di2015UniqueSeparatorasync
18425006Di2015UniqueSeparatorConfigureAwait(continueOnCapturedContext: false)
18425006Di2015UniqueSeparatorConfigureAwait
18425006Di2015UniqueSeparatorasync
18425006Di2015UniqueSeparatorTask
18425006Di2015UniqueSeparatorasync
18425006Di2015UniqueSeparatorTask
18425006Di2015UniqueSeparatorTask<Task<TestObject>>
18425006Di2015UniqueSeparatorTask.Factory.StartNew
18425006Di2015UniqueSeparatorTask.Run
18425006Di2015UniqueSeparatorasync
18425020Di2015UniqueSeparatorprotected void submitButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    //string constr = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=~\\App_Data\\TravelJoansDB.accdb";Di2015NewLine    string constr = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|\\Database21.accdb;";Di2015NewLine    string cmdstr = "INSERT INTO Comments(commentText,datePosted,personName) VALUES (@txtComments, @datePosted, @personName)";Di2015NewLine    OleDbConnection con = new OleDbConnection(constr);Di2015NewLine    OleDbCommand com = new OleDbCommand(cmdstr, con);Di2015NewLine    TextBox tComments = (TextBox)FormView1.FindControl("txtComments");Di2015NewLine    HiddenField tDate = (HiddenField)FormView1.FindControl("hidTimeDate");Di2015NewLine    TextBox tName = (TextBox)FormView1.FindControl("txtName");Di2015NewLine    con.Open();Di2015NewLine    com.Parameters.AddWithValue("@txtComments", tComments.Text);Di2015NewLine    com.Parameters.AddWithValue("@datePosted", DateTime.Now.ToString());Di2015NewLine    //com.Parameters.AddWithValue("@datePosted", tDate.Value.ToString());Di2015NewLine    com.Parameters.AddWithValue("@personName", tName.Text);Di2015NewLine    com.ExecuteNonQuery();Di2015NewLine    con.Close();Di2015NewLine}Di2015NewLineprotected void FormView1_ItemInserting(object sender, FormViewInsertEventArgs e)Di2015NewLine{ Di2015NewLine}Di2015NewLine
18425020Di2015UniqueSeparator<asp:FormView ID="FormView1" runat="server" DefaultMode="Insert" Di2015NewLine    oniteminserting="FormView1_ItemInserting">Di2015NewLine    <InsertItemTemplate>Di2015NewLine        Name: <asp:TextBox ID="txtName" runat="server" Di2015NewLine    Text='<%# Bind("personName") %>'></asp:TextBox><br />Di2015NewLineComments:<br />Di2015NewLine<asp:TextBox ID="txtComments" runat="server" Text='<%# Bind("commentText") %>'Di2015NewLine            TextMode="MultiLine" Rows="4" Columns="50"></asp:TextBox>Di2015NewLine            <br />Di2015NewLine<asp:HiddenField ID="hidTimeDate" runat="server" Value='<%# Bind("datePosted") %>' />Di2015NewLine<asp:Button ID="InsertButton" runat="server" CausesValidation="True" Di2015NewLine                CommandName="Insert" Text="Submit" OnClick="submitButton_Click" />Di2015NewLine    </InsertItemTemplate>Di2015NewLine</asp:FormView>Di2015NewLine
18425119Di2015UniqueSeparatorclass Factory { Di2015NewLine  public abstract Node CreateNode(); Di2015NewLine}Di2015NewLine
18425119Di2015UniqueSeparatorFactory
18425119Di2015UniqueSeparatorNode
18425119Di2015UniqueSeparatorNode
18425119Di2015UniqueSeparatorFactory
18425119Di2015UniqueSeparatorNode
18425119Di2015UniqueSeparatorpublic virtual Node CreateNode() { Di2015NewLine  return ???;Di2015NewLine}Di2015NewLine
18425272Di2015UniqueSeparator// First option - like this better because it has less cruft than multiple Has invocationsDi2015NewLineDi2015NewLinevar modelBuilder = new DbModelBuilder();Di2015NewLinevar modelConfiguration = new ModelConfigurator(modelBuilder);Di2015NewLineDi2015NewLinemodelConfiguration.Entity<Product>().Has(e => {Di2015NewLine                                         e.Property(en => en.Name).IsRequired();Di2015NewLine                                         e.Property(en => en.UPC).IsRequired();Di2015NewLine                                         e.Property(en => en.Price).IsRequired();Di2015NewLine                                         e.Property(en => en.Description).IsRequired();}Di2015NewLine                                        );           Di2015NewLine
18425272Di2015UniqueSeparatorvar modelBuilder = new DbModelBuilder();Di2015NewLinevar modelConfiguration = new ModelConfigurator(modelBuilder);Di2015NewLinemodelConfiguration.Entity<Product>().Has(e => e.Property(en => en.Name).IsRequired())Di2015NewLine                                    .Has(e => e.Property(en => en.UPC).IsRequired())Di2015NewLine                                    .Has(e => e.Property(en => en.Price).IsRequired())Di2015NewLine                                    .Has(e => e.Property(en => en.Description).IsRequired());Di2015NewLineDi2015NewLine// continue configuring properties, and creating methods on ModelConfigurator as neededDi2015NewLine
18425272Di2015UniqueSeparator  public class Product{Di2015NewLine        public string Name {get;set;}Di2015NewLine        public double Price {get;set;}Di2015NewLine        public string UPC {get;set;}Di2015NewLine        public string Description {get;set;}Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public class ModelConfigurator{Di2015NewLineDi2015NewLine        public DbModelBuilder ModelBuilder{get;set;}Di2015NewLineDi2015NewLine        public ModelConfigurator(DbModelBuilder modelBuilder){Di2015NewLine            ModelBuilder = modelBuilder;Di2015NewLine        }Di2015NewLineDi2015NewLine        public EntityConfigurator<TEntity> Entity<TEntity>() where TEntity : class {Di2015NewLine            var entity = ModelBuilder.Entity<TEntity>();Di2015NewLine            return new EntityConfigurator<TEntity>(entity);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class EntityConfigurator<TEntity> where TEntity : class{Di2015NewLineDi2015NewLine        public EntityTypeConfiguration<TEntity> EntityTypeConfiguration {get;set;}Di2015NewLineDi2015NewLine        public EntityConfigurator(EntityTypeConfiguration<TEntity> entityTypeConfiguration){Di2015NewLine            EntityTypeConfiguration = entityTypeConfiguration;Di2015NewLine        }Di2015NewLineDi2015NewLine        public EntityConfigurator<TEntity> Has(Action<EntityTypeConfiguration<TEntity>> a){Di2015NewLine            a(this.EntityTypeConfiguration);Di2015NewLine            return this;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18425316Di2015UniqueSeparatorCursor
18425316Di2015UniqueSeparatorCursor oC;Di2015NewLineDi2015NewLineusing ( MemoryStream oMS = new MemoryStream ( Properties.Resources.Cursor1 ) )Di2015NewLine{Di2015NewLine    oC = new Cursor ( oMS );Di2015NewLineDi2015NewLine    this.Cursor = oC;Di2015NewLine}Di2015NewLine
18425316Di2015UniqueSeparatorthis
18425316Di2015UniqueSeparatorLoadCursorFromFile
18425316Di2015UniqueSeparatorPath.GetTempFileName
18425364Di2015UniqueSeparatorConsole.ReadLine();Di2015NewLine
18425536Di2015UniqueSeparatorSqlCommand cmd = con.CreateCommand();Di2015NewLinecmd.CommandText = "INSERT INTO Records Di2015NewLine               ([Student ID], [First Name], [Last Name], [Middle Initial], Di2015NewLine                 Gender, Address, Status, Year, Email, Course, Di2015NewLine                [Contact Number]) Di2015NewLine                VALUES (@StudentID, @FirstName, @LastName , @MiddleInitial, Di2015NewLine                        @Gender, @Address, @Status, @Year, @Email, @Course, Di2015NewLine                        @ContactNumber)";Di2015NewLineControl[] controls = {textBox1,textBox2, textBox3, textBox4, textBox5, textBox6, comboBox1, comboBox2, comboBox3, comboBox4, comboBox5};Di2015NewLineforeach(Control c in controls){Di2015NewLine  if(c.Text.Trim() == "") {Di2015NewLine      MessageBox.Show("Please complete the fields", "Information...", Di2015NewLine                   MessageBoxButtons.OK, MessageBoxIcon.Warning, Di2015NewLine                   MessageBoxDefaultButton.Button1);Di2015NewLine      c.Focus();//Focus it to let user enter some value again.Di2015NewLine      return;Di2015NewLineDi2015NewLine  }Di2015NewLine}Di2015NewLine//Initialize your parameters hereDi2015NewLine//....Di2015NewLine//....Di2015NewLine//....Di2015NewLineDi2015NewLinetry {Di2015NewLine  cmd.ExecuteNonQuery();        Di2015NewLine  MessageBox.Show("Data Inserted!", "Information ... ", Di2015NewLine                   MessageBoxButtons.OK, MessageBoxIcon.Information, Di2015NewLine                   MessageBoxDefaultButton.Button1);Di2015NewLine  foreach(Control c in controls) c.Text = "";Di2015NewLine}catch{}Di2015NewLinefinally {Di2015NewLine  con.Close();Di2015NewLine}Di2015NewLine
18425578Di2015UniqueSeparatorPlace_name
18425578Di2015UniqueSeparatorPlace_code
18425578Di2015UniqueSeparatorWHERE
18425578Di2015UniqueSeparatorSqlDataAdapter a = new SqlDataAdapter(string.Format("SELECT Place_name FROM PlaceCodeName, DeviceConfig, DevInOut WHERE Cardserial = '{0}' AND PlaceCodeName.Place_code = DeviceConfig.Place_code AND DeviceConfig.IP = DevInOut.IP",textBox12.Text), con);Di2015NewLine
18425782Di2015UniqueSeparatorIImageRepositoryService
18425782Di2015UniqueSeparator<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">Di2015NewLine  <container>Di2015NewLine    <register type ="UnityTest.IImageRepositoryService, UnityTest" mapTo="UnityTest.ImageRepositoryService, UnityTest">Di2015NewLine      <constructor />Di2015NewLine    </register>Di2015NewLine    <register name="ParameterizedRepository" Di2015NewLine              type="UnityTest.IImageRepositoryService, UnityTest" Di2015NewLine              mapTo="UnityTest.ImageRepositoryService, UnityTest">Di2015NewLine      <constructor>Di2015NewLine        <param name="filterName" value="dummyValue" />Di2015NewLine      </constructor>Di2015NewLine    </register>Di2015NewLine  </container>Di2015NewLine</unity>Di2015NewLine
18425782Di2015UniqueSeparatorvar imageRepositoryService = container.Resolve<IImageRepositoryService>(Di2015NewLine    "ParameterizedRepository", Di2015NewLine    new ParameterOverride("filterName", "filter2"));Di2015NewLine
18425782Di2015UniqueSeparatorpublic static class ContractResolverDi2015NewLine{Di2015NewLine    //NEW CHANGE: This is the new function that suppose to return the instance of parameterised constructorDi2015NewLine    public static T Resolve<T>(string name, params ParameterOverride[] parameterOverrides)Di2015NewLine    {Di2015NewLine        IUnityContainer container = new UnityContainer();Di2015NewLine        var section = (UnityConfigurationSection)ConfigurationManager.GetSection("unity");Di2015NewLine        section.Containers.Default.Configure(container);Di2015NewLine        return container.Resolve<T>(name, parameterOverrides);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18425782Di2015UniqueSeparatorLoadConfiguration()
18425782Di2015UniqueSeparatorContractResolver.Resolve()
18425782Di2015UniqueSeparatorContractResolver
18425782Di2015UniqueSeparatorParameterOverride
18425977Di2015UniqueSeparatorCOUNT()
18425977Di2015UniqueSeparatorOleDbCommand cmd = new OleDbCommand("SELECT COUNT([Username]) FROM [Member] WHERE [Username] = ?", conn);Di2015NewLinecmd.Parameters.Add(textBox1.Text);Di2015NewLine
18425985Di2015UniqueSeparatorusing (StreamWriter sw1 = new StreamWriter(@"c:\\someFolder\\DataNames.txt",true))Di2015NewLine
18425985Di2015UniqueSeparatorusing (StreamWriter sw1 = new StreamWriter("c:\\\\someFolder\\\\DataNames.txt",true))Di2015NewLine
18425985Di2015UniqueSeparator\\
18425985Di2015UniqueSeparator\\\\
18426053Di2015UniqueSeparatorList<string>
18426067Di2015UniqueSeparatoryour_nodeview.NodeSelection.SelectedNode
18426067Di2015UniqueSeparatorNodeView.NodeSelection.Changed
18426067Di2015UniqueSeparatorEventBox.ButtonPressEvent
18426067Di2015UniqueSeparatorNodeView.NodeSelection.Changed
18426447Di2015UniqueSeparatorXmlReader
18426447Di2015UniqueSeparatorXDocument.Load
18426447Di2015UniqueSeparatorXmlReader
18426447Di2015UniqueSeparatorIsEmptyElement
18426447Di2015UniqueSeparatorRead
18426447Di2015UniqueSeparatorinstance
18426447Di2015UniqueSeparatorXDocument doc = XDocument.Load("file.xml");Di2015NewLineforeach (var instance in doc.Descendants("instance"))Di2015NewLine{Di2015NewLine    Logger.Log(instance.Attribute("name").Value);Di2015NewLine}Di2015NewLine
18426511Di2015UniqueSeparatorstring text = new string('y', 4);Di2015NewLine
18426535Di2015UniqueSeparatorMatchCollection
18426535Di2015UniqueSeparatorTake
18426535Di2015UniqueSeparatorStringBuilder
18426535Di2015UniqueSeparatorStringBuilder builder = new StringBuilder(...);Di2015NewLineforeach (var match in matches.Cast<Match>().Take(3))Di2015NewLine{Di2015NewLine    builder.AppendFormat("... {0} ...", matches[i].Value);Di2015NewLine}Di2015NewLine
18426535Di2015UniqueSeparatorStringBuilder
18426535Di2015UniqueSeparatorCast
18426535Di2015UniqueSeparatorEnumerable.Take
18426535Di2015UniqueSeparatorIEnumerable<T>
18426777Di2015UniqueSeparatorfunction GetAny(pFileName: string): PChar; external 'a.dll'Di2015NewLineDi2015NewLineprocedure GetWrapper(url: PChar; out value: WideString); stdcall;Di2015NewLinevarDi2015NewLine  P: PChar;Di2015NewLinebeginDi2015NewLine    P := GetAny(url);Di2015NewLine    if Assigned(P) thenDi2015NewLine      Value := PDi2015NewLine    elseDi2015NewLine      Value := '';Di2015NewLineend;Di2015NewLine
18426777Di2015UniqueSeparator[DllImport("wrapper.dll"]Di2015NewLinepublic static extern void GetWrapper(Di2015NewLine    string url,Di2015NewLine    [MarshalAs(UnmanagedType.BStr)]Di2015NewLine    out string valueDi2015NewLine);Di2015NewLine
18426854Di2015UniqueSeparatorpublic InputBox(string title, string question)Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    this.Text = title;Di2015NewLine    Label1.Text = question;Di2015NewLine}Di2015NewLine
18427073Di2015UniqueSeparatorda1.Fill
18427073Di2015UniqueSeparatorda.fill
18427073Di2015UniqueSeparatorda
18427073Di2015UniqueSeparatorDataAdapter
18427073Di2015UniqueSeparatorDatasets
18427073Di2015UniqueSeparatorda1.Fill(ds1, "aa");Di2015NewLine
18427086Di2015UniqueSeparator.Parse()
18427086Di2015UniqueSeparator.DeserializeObject<T>()
18427086Di2015UniqueSeparatornew JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All }Di2015NewLine
18427086Di2015UniqueSeparatorJsonConvert.Deserialize(input, null, settings)Di2015NewLine
18427087Di2015UniqueSeparatorpublic int x;Di2015NewLineDi2015NewLineprotected void method()Di2015NewLine{Di2015NewLine}Di2015NewLine
18427087Di2015UniqueSeparatorFastMethods
18427087Di2015UniqueSeparatorpublic class FastMethodsDi2015NewLine{Di2015NewLine   public void MeMethod()Di2015NewLine   {Di2015NewLine      // Your codeDi2015NewLine   }Di2015NewLine}Di2015NewLine
18427087Di2015UniqueSeparatorFastMethods fm = new FastMethods();// Initiate the classDi2015NewLinefm.MeMethod();// Call the methodDi2015NewLine
18427181Di2015UniqueSeparator    Stopwatch stopWatch = new Stopwatch();Di2015NewLine    stopWatch.Start();Di2015NewLineDi2015NewLine    // stuff you want to time here...Di2015NewLineDi2015NewLine    stopWatch.Stop();Di2015NewLineDi2015NewLine    // Get the elapsed time as a TimeSpan value.Di2015NewLine    TimeSpan ts = stopWatch.Elapsed;Di2015NewLineDi2015NewLine    // Format and display the TimeSpan value. Di2015NewLine    string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",Di2015NewLine        ts.Hours, ts.Minutes, ts.Seconds,Di2015NewLine        ts.Milliseconds / 10);Di2015NewLine    Console.WriteLine("RunTime " + elapsedTime);Di2015NewLine
18427266Di2015UniqueSeparatorWaitHandle.WaitAny
18427266Di2015UniqueSeparatormillisecond timeout
18427266Di2015UniqueSeparatortrue
18427266Di2015UniqueSeparatorfalse
18427266Di2015UniqueSeparatorList<Thread> threads = new List<Thread>();Di2015NewLineDi2015NewLinewhile (!threads.Any(x=> x.Join(100)))Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
18427266Di2015UniqueSeparatorJoin
18427350Di2015UniqueSeparatorServer.MapPath
18427350Di2015UniqueSeparatorDirectory.GetFiles
18427350Di2015UniqueSeparatorddlBackground.DataSource = Directory.GetFiles(Server.MapPath("~/Images"), "*.jpg")Di2015NewLine                 .Select(Path.GetFileNameWithoutExtension).ToList();Di2015NewLine
18427357Di2015UniqueSeparatorvar song = "foo2.mp3";Di2015NewLinevar number = 2;Di2015NewLineDi2015NewLinevar query =Di2015NewLine    from x in xd.Root.Elements("file")Di2015NewLine    where x.Element("song").Value == songDi2015NewLine    from y in x.Elements("listen")Di2015NewLine    where (int)y.Element("number") == numberDi2015NewLine    select y.Element("data");Di2015NewLine
18427423Di2015UniqueSeparatorBinding
18427423Di2015UniqueSeparatorSelectedTime
18427423Di2015UniqueSeparator<Controls:TimePicker Name="TimePickerEndTime"Di2015NewLine                  Grid.Row="2"Di2015NewLine                  Grid.Column="1"Di2015NewLine                  SelectedHour="11" Di2015NewLine                  SelectedMinute="20" Di2015NewLine                  SelectedSecond="0"Di2015NewLine                     >Di2015NewLine     <Controls:TimePicker.SelectedTime>Di2015NewLine        <Binding Path="EndTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">Di2015NewLine            <Binding.ValidationRules>Di2015NewLine                <Validators:MyCustomTimepickerValidation ErrorMessage="{DynamicResource NumberValidatorMesage}"/>Di2015NewLine            </Binding.ValidationRules>Di2015NewLine        </Binding>Di2015NewLine     </Controls:TimePicker.SelectedTime>Di2015NewLine</Controls:TimePicker>Di2015NewLine
18427423Di2015UniqueSeparatorValidationRules
18427423Di2015UniqueSeparatorTimePicker
18427423Di2015UniqueSeparator<Style x:Key="timePickerInError" TargetType="{x:Type Controls:TimePicker}">Di2015NewLine    <Style.Triggers>Di2015NewLine        <Trigger Property="Validation.HasError" Value="true">Di2015NewLine            <Setter Property="ToolTip"Di2015NewLine                  Value="{Binding RelativeSource={x:Static RelativeSource.Self},Di2015NewLine                      Path=(Validation.Errors)[0].ErrorContent}"/>Di2015NewLine            <Setter Property="Background" Value="Red" />Di2015NewLine        </Trigger>Di2015NewLine    </Style.Triggers>Di2015NewLine</Style>Di2015NewLine
18427423Di2015UniqueSeparatorValidationRule
18427423Di2015UniqueSeparatorpublic class TimeRangeRule : ValidationRuleDi2015NewLine{Di2015NewLine    private TimeSpan _min;Di2015NewLine    private TimeSpan _max;Di2015NewLineDi2015NewLine    public TimeRangeRule()Di2015NewLine    {          Di2015NewLine    }Di2015NewLineDi2015NewLine    public TimeSpan MinDi2015NewLine    {Di2015NewLine        get { return _min; }Di2015NewLine        set { _min = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public TimeSpan MaxDi2015NewLine    {Di2015NewLine        get { return _max; }Di2015NewLine        set { _max = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override ValidationResult Validate(object value, System.Globalization.CultureInfo cultureInfo)Di2015NewLine    {Di2015NewLine        if (value != null)Di2015NewLine        {Di2015NewLine            TimeSpan time = (TimeSpan)value;Di2015NewLineDi2015NewLine            if ((time < Min) || (time > Max))Di2015NewLine            {Di2015NewLine                return new ValidationResult(false,Di2015NewLine                  "Please enter the time in the range: " + Min + " - " + Max + ".");Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return new ValidationResult(true, null);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            return new ValidationResult(true, null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18427423Di2015UniqueSeparator<Controls:TimePicker Name="TimePickerEndTime"                               Di2015NewLine          Style="{StaticResource timePickerInError}" >Di2015NewLine    <Controls:TimePicker.SelectedTime>Di2015NewLine        <Binding Path="EndTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >Di2015NewLine            <Binding.ValidationRules>Di2015NewLine                <Validators:TimeRangeRule Min="10:00:00" Max="15:00:00"/>Di2015NewLine            </Binding.ValidationRules>Di2015NewLine        </Binding>Di2015NewLine    </Controls:TimePicker.SelectedTime>Di2015NewLine</Controls:TimePicker>Di2015NewLine
18427722Di2015UniqueSeparatorSystem.Linq.Dynamic
18427722Di2015UniqueSeparatorList<string> orderstr = new List<string>();Di2015NewLineorderstr.Add((name != null)? name.Equals(SortEnum.ASC)? "Name ASC": "Name DESC" : string.Empty);Di2015NewLineorderstr.Add((surname != null)? surname.Equals(SortEnum.ASC)? "Surname ASC": "Surname DESC" : string.Empty);Di2015NewLinevar reslt = employees.OrderBy(string.Join(", ",orderstr.Where(x=>!string.IsNullOrEmpty(x))));Di2015NewLine
18427724Di2015UniqueSeparatorSHDocVw.dll
18427724Di2015UniqueSeparatorTlbImp.exe ieframe.dll
18427724Di2015UniqueSeparatorvar ie = (SHDocVw.WebBrowser)Activator.CreateInstance(Type.GetTypeFromProgID("InternetExplorer.Application"));Di2015NewLineie.Visible = true;Di2015NewLineie.Navigate("http://www.example.com");Di2015NewLine
18427724Di2015UniqueSeparatorWebBrowser
18427724Di2015UniqueSeparatorWebBrowser
18427724Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace WinformsIEDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine         public Form1()Di2015NewLine        {Di2015NewLine            SetBrowserFeatureControl();Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Load(object sender, EventArgs ev)Di2015NewLine        {Di2015NewLine            var ie = (SHDocVw.InternetExplorer)Activator.CreateInstance(Type.GetTypeFromProgID("InternetExplorer.Application"));Di2015NewLine            ie.Visible = true;Di2015NewLine            Debug.Print("Main thread: {0}", Thread.CurrentThread.ManagedThreadId);Di2015NewLine            ie.DocumentComplete += (object browser, ref object URL) =>Di2015NewLine            {Di2015NewLine                string url = URL.ToString();Di2015NewLine                Debug.Print("Event thread: {0}", Thread.CurrentThread.ManagedThreadId);Di2015NewLine                this.Invoke(new Action(() =>Di2015NewLine                {Di2015NewLine                    Debug.Print("Action thread: {0}", Thread.CurrentThread.ManagedThreadId);Di2015NewLine                    var message = String.Format("Page loaded: {0}", url);Di2015NewLine                    MessageBox.Show(message);Di2015NewLine                }));Di2015NewLine            };Di2015NewLine            ie.Navigate("http://www.example.com");Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
18427796Di2015UniqueSeparatorNewData
18427796Di2015UniqueSeparatordata Stuff = Small Int | Big String Double BoolDi2015NewLine
18427796Di2015UniqueSeparatorSmall 5
18427796Di2015UniqueSeparatorStuff
18427796Di2015UniqueSeparatorBig "Foo" 7.3 True
18427796Di2015UniqueSeparatorStuff
18427796Di2015UniqueSeparatordata Colour = Red | Green | BlueDi2015NewLine
18427796Di2015UniqueSeparatorenum Colour {Red, Green, Blue}Di2015NewLine
18427796Di2015UniqueSeparatorColour = int;Di2015NewLineconst int Red = 0;Di2015NewLineconst int Green = 1;Di2015NewLineconst int Blue = 2;Di2015NewLine
18427796Di2015UniqueSeparatorColour temp = 52;Di2015NewLine
18427796Di2015UniqueSeparatorColour
18427796Di2015UniqueSeparatorRed
18427796Di2015UniqueSeparatorGreen
18427796Di2015UniqueSeparatorBlue
18427796Di2015UniqueSeparatorstruct
18427796Di2015UniqueSeparatorpublic readonly
18427796Di2015UniqueSeparatornewtype
18427796Di2015UniqueSeparatornewtype
18427796Di2015UniqueSeparatorInt
18427796Di2015UniqueSeparatornewtype UserID = ID IntDi2015NewLine
18427796Di2015UniqueSeparatorUserID
18427796Di2015UniqueSeparatorInt
18427796Di2015UniqueSeparatorUserID
18427796Di2015UniqueSeparatorInt
18427796Di2015UniqueSeparatorInt
18427796Di2015UniqueSeparatorUserID
18427796Di2015UniqueSeparatordata
18427796Di2015UniqueSeparatordata UserID = ID IntDi2015NewLine
18427796Di2015UniqueSeparatorUserID
18427796Di2015UniqueSeparatornewtype
18427796Di2015UniqueSeparatorUserID
18427796Di2015UniqueSeparatornewtype
18427796Di2015UniqueSeparatordata UserID = ID !IntDi2015NewLine
18428112Di2015UniqueSeparatorFile.WriteAllLines
18428112Di2015UniqueSeparatorFile.WriteAllText
18428112Di2015UniqueSeparatorEncoding
18428112Di2015UniqueSeparatorEncoding
18428147Di2015UniqueSeparatormatch.Groups[1].Value
18428147Di2015UniqueSeparatorstring msg = @"""id"":""456138988365628440_103920"",""user""657852231654""";Di2015NewLinevar reg = new Regex(@"""id"":""([0-9_]*)"",""user""", RegexOptions.IgnoreCase);Di2015NewLinevar results = reg.Matches(msg);Di2015NewLineforeach (Match match in results)Di2015NewLine{Di2015NewLine    Console.WriteLine(match.Groups[1].Value);Di2015NewLine}Di2015NewLine
18428369Di2015UniqueSeparatorvm.DataList.SingleOrDefault(g => g.Any(x => x.Name == "Milan"))Di2015NewLine
18428398Di2015UniqueSeparatorSystem.Web.Security.RoleProvider
18428398Di2015UniqueSeparatorIsUserInRole(string username, string roleName)
18428398Di2015UniqueSeparatorIsUserInRole
18428449Di2015UniqueSeparatorvar sortOrder = correctItemOrder.Split(new[] { ", " }, StringSplitOptions.None);Di2015NewLine
18428449Di2015UniqueSeparatorvar sortedCollection = new Collection<T>(collection.OrderBy(x => Array.IndexOf(sortOrder, x.Name)).ToList());Di2015NewLine
18428449Di2015UniqueSeparatorvar dict = collection.ToDictionary(x => x.Name);Di2015NewLinevar sortedCollection = new Collection<T>(sortOrder.Select(x => dict[x]).ToList());Di2015NewLine
18428449Di2015UniqueSeparatorvar dict = sortOrder.Select((x, i) => new { x, i }).ToDictionary(x => x.x, x => x.i);Di2015NewLinevar sortedCollection = new Collection<T>(collection.OrderBy(x => dict[x.Name]).ToList());Di2015NewLine
18428449Di2015UniqueSeparatorvar lookup = sortOrder.Select((x, i) => new {x, i}).ToLookup(x => x.x, x => x.i);Di2015NewLinevar sortedCollection = new Collection<T>(collection.OrderBy(x => lookup[x.Name].DefaultIfEmpty(Int32.MaxValue).First()).ToList());Di2015NewLine
18428673Di2015UniqueSeparatorFile.Copy(sourcePath, destinationPath);Di2015NewLine
18428673Di2015UniqueSeparator//Keep pdf file locationsDi2015NewLineList<string> pdfFiles = new List<string>();Di2015NewLineDi2015NewLine// Browse pdf and get their pathsDi2015NewLineprivate void btnPdfBrowser_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    OpenFileDialog openFileDialog = new OpenFileDialog();Di2015NewLine    openFileDialog.CheckFileExists = true;Di2015NewLine    openFileDialog.AddExtension = true;Di2015NewLine    openFileDialog.Multiselect = true;Di2015NewLine    openFileDialog.Filter = "PDF files (*.pdf)|*.pdf";Di2015NewLineDi2015NewLine    if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)Di2015NewLine    {Di2015NewLine        pdfFiles = new List<string>();  Di2015NewLine        foreach (string fileName in openFileDialog.FileNames)Di2015NewLine            pdfFiles.Add(fileName);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnUploadFile_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string installedPath = Application.StartupPath + "pdf";Di2015NewLineDi2015NewLine    //Check whether folder path is existDi2015NewLine    if (!System.IO.Directory.Exists(installedPath))Di2015NewLine    {Di2015NewLine        // If not create new folderDi2015NewLine        System.IO.Directory.CreateDirectory(installedPath);Di2015NewLine    }Di2015NewLine    //Save pdf files in installedPathDi2015NewLine    foreach (string sourceFileName in pdfFiles) Di2015NewLine    {Di2015NewLine        string destinationFileName = System.IO.Path.Combine(installedPath, IO.Path.GetFileName(sourceFileName));Di2015NewLine        System.IO.File.Copy(sourceFileName, destinationFileName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18428702Di2015UniqueSeparatorIF ('$(SqlAgent)' = 'exists')Di2015NewLineBeginDi2015NewLine    Exec ...Di2015NewLineEndDi2015NewLine
18428813Di2015UniqueSeparatorcomboBox.Style = ComboBoxStyle.DropDownList;Di2015NewLine
18428877Di2015UniqueSeparatorsealed
18428877Di2015UniqueSeparatorsealed
18428877Di2015UniqueSeparatorsealed
18428900Di2015UniqueSeparatorsumFunc
18428900Di2015UniqueSeparatorimport clrDi2015NewLineclr.addReferenceToFileAndPath(...path do dll...)Di2015NewLineDi2015NewLinefrom DLLTest import MyDllTestDi2015NewLineDi2015NewLinetest = MyDllTest()Di2015NewLinetest.sumFunc(33, 44)Di2015NewLine
18428946Di2015UniqueSeparatorIQuery query = session.CreateQuery("FROM Person AS P LEFT JOIN FETCH P.CountryObject");Di2015NewLinereturn query.List<Person>();Di2015NewLine
18428946Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" auto-import="true">Di2015NewLine  <class name="NHibernateLeftJoin.Models.Person, NHibernateLeftJoin" lazy="true">Di2015NewLine    <id name="PersonId">Di2015NewLine      <generator class="native" />Di2015NewLine    </id>Di2015NewLine    <property name="Name" />Di2015NewLine    <property name="CountryId" />Di2015NewLine    <many-to-one name="CountryObject" class="NHibernateLeftJoin.Models.Country"Di2015NewLine                 column="CountryId" not-found="ignore"Di2015NewLine                 cascade="none" />Di2015NewLine  </class>Di2015NewLine</hibernate-mapping>Di2015NewLine
18429211Di2015UniqueSeparatorcalled
18429211Di2015UniqueSeparatortest
18429211Di2015UniqueSeparatortest
18429211Di2015UniqueSeparatorcalled
18429211Di2015UniqueSeparatortest
18429211Di2015UniqueSeparatorcalled
18429211Di2015UniqueSeparatortest
18429211Di2015UniqueSeparatorcalled
18429211Di2015UniqueSeparatortest
18429211Di2015UniqueSeparatorfoo()
18429211Di2015UniqueSeparatorcalled()
18429211Di2015UniqueSeparatorEnabled
18429211Di2015UniqueSeparatorfoo()
18429211Di2015UniqueSeparatorcalled()
18429211Di2015UniqueSeparatorEnabled
18429211Di2015UniqueSeparatorfoo()
18429211Di2015UniqueSeparatorvar test = new test();Di2015NewLinetest.foo();Di2015NewLineAssert(test.Enabled, Is.False);Di2015NewLineDi2015NewLinevar test = new test();Di2015NewLinetest.start();Di2015NewLinetest.foo();Di2015NewLineAssert(test.Enabled, Is.True);Di2015NewLine
18429217Di2015UniqueSeparatorstatic async void  DoWork()Di2015NewLine{Di2015NewLine    var html = await GetHtmlAsync("http://www.google.com/");Di2015NewLine}Di2015NewLine
18429217Di2015UniqueSeparatorstatic Task<string> GetHtmlAsync(string url)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<string>();Di2015NewLineDi2015NewLine    var thread = new Thread(() =>Di2015NewLine    {Di2015NewLine        WebBrowser wb = new WebBrowser();Di2015NewLineDi2015NewLine        WebBrowserDocumentCompletedEventHandler documentCompleted = null;Di2015NewLine        documentCompleted = async (o, s) =>Di2015NewLine        {Di2015NewLine            wb.DocumentCompleted -= documentCompleted;Di2015NewLine            await Task.Delay(2000); //Run JS a few seconds moreDi2015NewLineDi2015NewLine            tcs.TrySetResult(wb.DocumentText);Di2015NewLine            wb.Dispose();Di2015NewLine            Application.ExitThread();Di2015NewLine        };Di2015NewLineDi2015NewLine        wb.ScriptErrorsSuppressed = true;Di2015NewLine        wb.DocumentCompleted += documentCompleted;Di2015NewLine        wb.Navigate(url);Di2015NewLine        Application.Run();Di2015NewLine    });Di2015NewLineDi2015NewLine    thread.SetApartmentState(ApartmentState.STA);Di2015NewLine    thread.Start();Di2015NewLineDi2015NewLine    return tcs.Task;Di2015NewLine}Di2015NewLine
18429276Di2015UniqueSeparatorSELECT * FROM hmdb WHERE shamsidate MATCH '1376/05/24 1385/11/12'Di2015NewLineINTERSECTDi2015NewLineSELECT * FROM hmdb WHERE hmdb MATCH 'content:red OR keyword:red v_other:true'Di2015NewLine
18429374Di2015UniqueSeparatormodelBuilder.Entity<Customer>()Di2015NewLine    .HasOptional(c => c.Inquiry)Di2015NewLine    .WithRequired()Di2015NewLine    .WillCascadeOnDelete(true);Di2015NewLine
18429374Di2015UniqueSeparatorCustomer
18429374Di2015UniqueSeparatorInquiry
18429374Di2015UniqueSeparatorInquiry
18429374Di2015UniqueSeparatorCustomer
18429463Di2015UniqueSeparatorHeight
18429463Di2015UniqueSeparatorWindow caption
18429463Di2015UniqueSeparatorint captionHeight = yourForm.PointToScreen(Point.Empty).Y - yourForm.Top;    Di2015NewLine
18429463Di2015UniqueSeparatorWidth
18429463Di2015UniqueSeparatorint borderWidth = yourForm.PointToScreen(Point.Empty).X - yourForm.Left;Di2015NewLine
18429463Di2015UniqueSeparatorSystemInformation.CaptionHeight
18429463Di2015UniqueSeparatorCaptureBox
18429463Di2015UniqueSeparatorPointToScreen
18429463Di2015UniqueSeparatorPoint loc = CaptureBox.PointToScreen(Point.Empty);Di2015NewLine
18429537Di2015UniqueSeparatorSendKeys
18429537Di2015UniqueSeparatorSendKeys::Send("{ENTER}");Di2015NewLine
18429543Di2015UniqueSeparatorrequest.GetResponse()
18429543Di2015UniqueSeparatorprivate void button2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        for (i = 0; i < listBox1.Items.Count; i++)Di2015NewLine        {      Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(listBox1.Items[i].ToString());Di2015NewLine                if (response.StatusCode == HttpStatusCode.OK)Di2015NewLine                {Di2015NewLine                    listBox3.Items.Add(listBox1.Items[i].ToString());Di2015NewLine                }Di2015NewLine            }Di2015NewLine            catch(Exception)Di2015NewLine            {Di2015NewLine                // do whatever you wantDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18429669Di2015UniqueSeparator public MyDbContext()Di2015NewLine        : base("Name=MyDbContext")Di2015NewLine    {Di2015NewLine    }Di2015NewLine
18429669Di2015UniqueSeparator<connectionStrings>Di2015NewLine    <add name="MyDbContext" connectionString="data source=.\\sqlexpress;initial catalog=YourDbName;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework" providerName="System.Data.SqlClient"/>Di2015NewLine  </connectionStrings>Di2015NewLine
18429749Di2015UniqueSeparatoropenssl genrsa -out private.pem 1024Di2015NewLineopenssl rsa -in private.pem -out public.pem -outform PEM -puboutDi2015NewLine
18429749Di2015UniqueSeparator<?phpDi2015NewLineinclude('Crypt/RSA.php');Di2015NewLineDi2015NewLine$privateKey="-----BEGIN RSA PRIVATE KEY-----Di2015NewLineMIICXQIBAAKBgQDr5KvAc6JX22BdpsfQbWam8rjkwJzTC954XQzhLOPeGiAGfkPmDi2015NewLineCLYhBrmxZN6NxiseivpN9yzrRjYeccr+s3A/8q1EbdhmmM4+AxdNzATEsUxL//MSDi2015NewLineVXCaoJhGOfXswokFT8HQod9M6VMmuyDaw9iEorLavV6J/nCmq2HIutcbbwIDAQABDi2015NewLineAoGBAMt2dgnN8zXSW2ELrIcDBapz6rQrylhigWXR5H0IKhb087CGEeyEkQsVcO8oDi2015NewLineMKmaRrDWcKT00IKyEZXa0pszjFmD6f90H6TrV6BwZKEynAUVqaX4CCn6x9wgppMADi2015NewLinehWg3eYgoUME3Xgr1Iugb4rqtocEL7Vww/NoUgLXhzHH4RNz5AkEA+mZN2189Te3mDi2015NewLineLmXFIJhV+GxrDmYrgJ0csjoEFHAxKJ52lsXTe1VODWbGWAv59jOrbUKe/aQaj4N1Di2015NewLineIcTinF3jBQJBAPErTwBKvHznU9dC0eY+JRpwm4Xb9zCNqaG/Ir5N8Gc1U0YLJh9DDi2015NewLinevRhtyT9+shwRPznklkc8DKwFaEU7HSiw9uMCQGLK9FLmG6jggN2zd3gpwlmWZRK0Di2015NewLineStueoVDMRQnPTgXpp35LJOpXOMle0EiyyPdTYYJlM5d9JKGUyyT8qi/pdwUCQQCEDi2015NewLinejp9vs6SCqsukh+/DM+lE7RwuqUbnAxZ39wzruP8oW2EYIMylZqArKzzwj3zqfHhaDi2015NewLineI9CN+u2kJ5y2YNWYJhytAkA53cDUSL9Wo9pq5hw1C1SWNcimteeQmfQ8f0SMegDWDi2015NewLinefZ4rCjGczF82UpB12Cqo8SiK8xrCZAxfnSmSI248oCWeDi2015NewLine-----END RSA PRIVATE KEY-----";Di2015NewLine$publicKey="-----BEGIN PUBLIC KEY-----Di2015NewLineMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDr5KvAc6JX22BdpsfQbWam8rjkDi2015NewLinewJzTC954XQzhLOPeGiAGfkPmCLYhBrmxZN6NxiseivpN9yzrRjYeccr+s3A/8q1EDi2015NewLinebdhmmM4+AxdNzATEsUxL//MSVXCaoJhGOfXswokFT8HQod9M6VMmuyDaw9iEorLaDi2015NewLinevV6J/nCmq2HIutcbbwIDAQABDi2015NewLine-----END PUBLIC KEY-----";Di2015NewLineDi2015NewLine$rsa = new Crypt_RSA();Di2015NewLine$rsa->loadKey($publicKey); // public keyDi2015NewLineDi2015NewLine$plaintext = 'I am a secret.. shhhhhh.';Di2015NewLineDi2015NewLine$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);Di2015NewLine$ciphertext = $rsa->encrypt($plaintext);Di2015NewLineDi2015NewLine$rsa->loadKey($privateKey); // private keyDi2015NewLineecho $rsa->decrypt($ciphertext);Di2015NewLine?>Di2015NewLine
18429807Di2015UniqueSeparatorpublic static class DynamicProxyGenerator  Di2015NewLine{  Di2015NewLine    public static T GetInstanceFor<T>()  Di2015NewLine    {  Di2015NewLine        Type typeOfT = typeof(T);  Di2015NewLine        var methodInfos = typeOfT.GetMethods();  Di2015NewLine        AssemblyName assName = new AssemblyName("testAssembly");  Di2015NewLine        var assBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assName, AssemblyBuilderAccess.RunAndSave);  Di2015NewLine        var moduleBuilder = assBuilder.DefineDynamicModule("testModule", "test.dll");  Di2015NewLine        var typeBuilder = moduleBuilder.DefineType(typeOfT.Name + "Proxy", TypeAttributes.Public);  Di2015NewLineDi2015NewLine        typeBuilder.AddInterfaceImplementation(typeOfT);  Di2015NewLine        var ctorBuilder = typeBuilder.DefineConstructor(  Di2015NewLine                  MethodAttributes.Public,  Di2015NewLine                  CallingConventions.Standard,  Di2015NewLine                  new Type[] { });  Di2015NewLine        var ilGenerator = ctorBuilder.GetILGenerator();  Di2015NewLine        ilGenerator.EmitWriteLine("Creating Proxy instance");  Di2015NewLine        ilGenerator.Emit(OpCodes.Ret);  Di2015NewLine        foreach (var methodInfo in methodInfos)  Di2015NewLine        {  Di2015NewLine            var methodBuilder = typeBuilder.DefineMethod(  Di2015NewLine                methodInfo.Name,  Di2015NewLine                MethodAttributes.Public | MethodAttributes.Virtual,  Di2015NewLine                methodInfo.ReturnType,  Di2015NewLine                methodInfo.GetParameters().Select(p => p.GetType()).ToArray()  Di2015NewLine                );  Di2015NewLine            var methodILGen = methodBuilder.GetILGenerator();               Di2015NewLine            if (methodInfo.ReturnType == typeof(void))  Di2015NewLine            {  Di2015NewLine                methodILGen.Emit(OpCodes.Ret);  Di2015NewLine            }  Di2015NewLine            else  Di2015NewLine            {  Di2015NewLine                if (methodInfo.ReturnType.IsValueType || methodInfo.ReturnType.IsEnum)  Di2015NewLine                {  Di2015NewLine                    MethodInfo getMethod = typeof(Activator).GetMethod(/span>"CreateInstance",new Type[]{typeof((Type)});                          Di2015NewLine                    LocalBuilder lb = methodILGen.DeclareLocal(methodInfo.ReturnType);  Di2015NewLine                    methodILGen.Emit(OpCodes.Ldtoken, lb.LocalType);  Di2015NewLine                    methodILGen.Emit(OpCodes.Call, typeofype).GetMethod("GetTypeFromHandle"));  ));  Di2015NewLine                    methodILGen.Emit(OpCodes.Callvirt, getMethod);  Di2015NewLine                    methodILGen.Emit(OpCodes.Unbox_Any, lb.LocalType);  Di2015NewLineDi2015NewLine                }  Di2015NewLine                 else  Di2015NewLine                {  Di2015NewLine                    methodILGen.Emit(OpCodes.Ldnull);  Di2015NewLine                }  Di2015NewLine                methodILGen.Emit(OpCodes.Ret);  Di2015NewLine            }  Di2015NewLine            typeBuilder.DefineMethodOverride(methodBuilder, methodInfo);  Di2015NewLine        }  Di2015NewLineDi2015NewLine        Type constructedType = typeBuilder.CreateType();  Di2015NewLine        var instance = Activator.CreateInstance(constructedType);  Di2015NewLine        return (T)instance;  Di2015NewLine    }  Di2015NewLine}  Di2015NewLine
18429845Di2015UniqueSeparatorRun()
18429949Di2015UniqueSeparatorVerifyProvider
18429949Di2015UniqueSeparatorSimpleMembershipProvider
18429949Di2015UniqueSeparatorExtendedMembershipProvider
18429949Di2015UniqueSeparatorWebSecurity.InitializeDatabaseConnection
18429949Di2015UniqueSeparatorExtendedMembershipProvider
18429949Di2015UniqueSeparatorSimpleMembershipProvider
18430267Di2015UniqueSeparator[HttpGet("products")]Di2015NewLinepublic PageResult<ProductViewModel> GetAllProducts(ODataQueryOptions<ProductViewModel> options)Di2015NewLine
18430327Di2015UniqueSeparatorpublic void OutputSequence(int length){Di2015NewLine    Recurse(length-1, Enumerable.Range(1, length).ToArray(), new int[length]);  Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Recurse(int position, int[] arr, int[] state){  Di2015NewLine    if (position == -1){Di2015NewLine        PrintState(state);  Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    for (int i = 0; i < arr.Length; i++)Di2015NewLine    {           Di2015NewLine        state[position] = arr[i];Di2015NewLine        Recurse(position-1, arr, state);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic void PrintState(int[] state){Di2015NewLine    for (int i = 0; i < state.Length; i++)Di2015NewLine        Console.WriteLine ("{0} {1}",i+1, state[i]);        Di2015NewLineDi2015NewLine        Console.WriteLine ();Di2015NewLine}Di2015NewLine
18430327Di2015UniqueSeparatorOutputSequence(5);
18430327Di2015UniqueSeparatorvar pairs = from i in Enumerable.Range(1, 5)Di2015NewLine            from j in Enumerable.Range(1, 5)Di2015NewLine            select new {i, j};Di2015NewLineDi2015NewLineforeach(var p in pairs)Di2015NewLine    Console.WriteLine ("{0} {1}", p.i, p.j);Di2015NewLine
18430327Di2015UniqueSeparatorpublic IEnumerable<IEnumerable<int>> NAryCartesianProduct(int upper, int times){Di2015NewLine    if (times == 0)Di2015NewLine        return Enumerable.Empty<IEnumerable<int>>();Di2015NewLineDi2015NewLine    var nums = Enumerable.Range(1, upper);          Di2015NewLine    IEnumerable<IEnumerable<int>> products = nums.Select(i => new[]{i});Di2015NewLineDi2015NewLine    for (int i = 1; i < times; i++)Di2015NewLine    {Di2015NewLine        products = from p in productsDi2015NewLine                   from n in numsDi2015NewLine                   select p.Concat(new [] {n});                                     Di2015NewLine    }       Di2015NewLineDi2015NewLine    return products;Di2015NewLine}Di2015NewLine
18430327Di2015UniqueSeparatorvar p = NAryCartesianProduct(5, 2);Di2015NewLineDi2015NewLineforeach(var i in p)Di2015NewLine    Console.WriteLine (i);Di2015NewLine
18430342Di2015UniqueSeparatorTestProfile
18430342Di2015UniqueSeparatorTestProfileAsync
18430342Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        NewTask.Combine taskcombine = new NewTask.Combine();Di2015NewLine        ProfileClient profilesws = new ProfileClient();Di2015NewLine        var profileRecords = profilesws.GetAllProfiles();Di2015NewLineDi2015NewLine        var tasks = new List<Task<ResultClass>>();Di2015NewLineDi2015NewLine        foreach (var profile in profileRecords.ProfileRecords)Di2015NewLine        {Di2015NewLine            var testProfile = new NewTask.Profile();Di2015NewLine            testProfile.Id = profile.Id;Di2015NewLine            testProfile.Name = profile.Name;Di2015NewLineDi2015NewLine            tasks.Add(taskcombine.TestProfileAsync(testProfile))Di2015NewLine        }Di2015NewLineDi2015NewLine        int completedIndex = Task.WaitAny(tasks.ToArray());Di2015NewLineDi2015NewLine        var result = tasks[completedIndex].Result;Di2015NewLineDi2015NewLine        profilesws.Close();Di2015NewLine        taskcombine.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18430342Di2015UniqueSeparatortasks.Add(Task<ResultClass>.Factory.Start(() => taskcombine.TestProfile(testProfile)));Di2015NewLine
18430342Di2015UniqueSeparatortaskcombine.TestProfile
18430342Di2015UniqueSeparatortaskcombine.TestProfile
18430342Di2015UniqueSeparatortasks.Add(Task<ResultClass>.Factory.Start(() => Di2015NewLine{Di2015NewLine     NewTask.Combine taskcombine = new NewTask.Combine(); //Move the declaration inside the task so a new Combine gets created per task.Di2015NewLine     return taskcombine.TestProfile(testProfile);Di2015NewLine}));Di2015NewLine
18430342Di2015UniqueSeparatorTask<ResultClass> TestProfileAsync(NewTask.Profile a, CancllationToken token)
18430342Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        NewTask.Combine taskcombine = new NewTask.Combine();Di2015NewLine        ProfileClient profilesws = new ProfileClient();Di2015NewLine        var profileRecords = profilesws.GetAllProfiles();Di2015NewLineDi2015NewLine        var tasks = new List<Task<ResultClass>>();Di2015NewLine        var cts = new CancellationTokenSource();Di2015NewLine        var token = cts.Token;            Di2015NewLineDi2015NewLine        foreach (var profile in profileRecords.ProfileRecords)Di2015NewLine        {Di2015NewLine            var testProfile = new NewTask.Profile();Di2015NewLine            testProfile.Id = profile.Id;Di2015NewLine            testProfile.Name = profile.Name;Di2015NewLineDi2015NewLine            tasks.Add(taskcombine.TestProfileAsync(testProfile, token))Di2015NewLine        }Di2015NewLineDi2015NewLine        int completedIndex = Task.WaitAny(tasks.ToArray());Di2015NewLineDi2015NewLine        //This should stop any tasks before they even start.Di2015NewLine        cts.Cancel();Di2015NewLineDi2015NewLine        var result = tasks[completedIndex].Result;Di2015NewLineDi2015NewLine        profilesws.Close();Di2015NewLine        taskcombine.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18430342Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        NewTask.Combine taskcombine = new NewTask.Combine();Di2015NewLine        ProfileClient profilesws = new ProfileClient();Di2015NewLine        var profileRecords = profilesws.GetAllProfiles();Di2015NewLineDi2015NewLine        var tasks = new List<Task<ResultClass>>();Di2015NewLine        var cts = new CancellationTokenSource();Di2015NewLine        var token = cts.Token;            Di2015NewLineDi2015NewLine        foreach (var profile in profileRecords.ProfileRecords)Di2015NewLine        {Di2015NewLine            var testProfile = new NewTask.Profile();Di2015NewLine            testProfile.Id = profile.Id;Di2015NewLine            testProfile.Name = profile.Name;Di2015NewLineDi2015NewLine            //If the token is canceled before the task gets to start itself it should never start and go stright to the "Canceled" state.Di2015NewLine            tasks.Add(Task.Run(() => Di2015NewLine                       {Di2015NewLine                           token.ThrowIfCancellationRequested(); //In case the task started but we did get a result before the last Di2015NewLine                           return taskcombine.TestProfile(testProfile); //Assumes "taskcombine.TestProfile(...)" is thread safe.Di2015NewLine                       }, token));Di2015NewLine        }Di2015NewLineDi2015NewLine        var result = Task.WhenAny(tasks).Result;Di2015NewLineDi2015NewLine        //This should stop any tasks that have not spun up yet from spinning upDi2015NewLine        cts.Cancel();Di2015NewLineDi2015NewLine        profilesws.Close();Di2015NewLine        taskcombine.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18430532Di2015UniqueSeparatorIStatusCodeHandler
18430532Di2015UniqueSeparatorcontext.Response
18430532Di2015UniqueSeparatorJsonResponse
18430532Di2015UniqueSeparator    if(!(context.Response Is JsonResponse))Di2015NewLine    {Di2015NewLine            context.Response = new TextResponse(JsonConvert.SerializeObject(new { Message = "Resource not found" }, Formatting.Indented))Di2015NewLine            {Di2015NewLine                StatusCode = statusCode,Di2015NewLine                ContentType = "application/json"Di2015NewLine            };Di2015NewLine    }Di2015NewLine
18430532Di2015UniqueSeparatorNancyContext
18430532Di2015UniqueSeparatorRequest
18430532Di2015UniqueSeparatorResponse
18430532Di2015UniqueSeparatorNancyContext.Items
18430627Di2015UniqueSeparatorprog()
18430627Di2015UniqueSeparatorprog
18430627Di2015UniqueSeparatorcompilationUnit
18430627Di2015UniqueSeparatorcompilationUnit()
18430672Di2015UniqueSeparatorbodylist
18430672Di2015UniqueSeparatorBodylistContext
18430672Di2015UniqueSeparatorbodyset()
18430672Di2015UniqueSeparatorBodysetContext
18430672Di2015UniqueSeparatorbodyset
18430672Di2015UniqueSeparatoroutput=AST
18430702Di2015UniqueSeparatorpublic static class UIElementExtension {Di2015NewLine    public static void AttachActionMessage(this DependancyObject control, string eventName, string methodName, object parameter) {Di2015NewLine        var action = new ActionMessage();Di2015NewLine        action.MethodName = methodName;Di2015NewLine        action.Parameters.Add(new Parameter { Value = parameter });Di2015NewLineDi2015NewLine        var trigger = new System.Windows.Interactivity.EventTrigger();Di2015NewLine        trigger.EventName = eventName;Di2015NewLine        trigger.SourceObject = control;Di2015NewLine        trigger.Actions.Add(action);Di2015NewLineDi2015NewLine        Interaction.GetTriggers(control).Add(trigger);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18430702Di2015UniqueSeparatorAttachActionMessage()
18430702Di2015UniqueSeparatorvar button = new Button { Content = "Click Me" };Di2015NewLinebutton.AttachActionMessage("Click", "ModifyList", DataContext);Di2015NewLine
18430786Di2015UniqueSeparator()
18430786Di2015UniqueSeparator[]
18430786Di2015UniqueSeparatorDictionary
18430786Di2015UniqueSeparatorCreateEditMaterial.materialDesc = LotMaterialList(CreateEditMaterial.materialId);Di2015NewLine
18430786Di2015UniqueSeparatorCreateEditMaterial.materialDesc = LotMaterialList[CreateEditMaterial.materialId];Di2015NewLine
18430868Di2015UniqueSeparatori
18430868Di2015UniqueSeparatorList<Action> actions = new List<Action>();Di2015NewLinefor (int i = 0; i < 100; ++i) {Di2015NewLine    int temp = i;Di2015NewLine    actions.Add(() => Execute(100100100 + temp));Di2015NewLine}Di2015NewLine
18430868Di2015UniqueSeparatorExecute
18430868Di2015UniqueSeparatorvar exec = typeof(Test).GetMethod("Execute"); // <<== Use your type hereDi2015NewLinevar actions = new List<Action>();Di2015NewLinefor (int i = 0 ; i != 100 ; i++) {Di2015NewLine    var val = Expression.Constant(i+100100100);Di2015NewLine    // This assumes that Execute(int) is static.Di2015NewLine    // For non-static calls use a different overload.Di2015NewLine    var call = Expression.Call(exec, val);Di2015NewLine    var lambda = Expression.Lambda(typeof(Action), call, new ParameterExpression[0]);Di2015NewLine    actions.Add((Action)lambda.Compile());Di2015NewLine}Di2015NewLine
18430958Di2015UniqueSeparatorC = A.ToDictionary(x => x.Value, v=>B.ToDictionary(y => y.Value, y => 0));Di2015NewLine
18430981Di2015UniqueSeparatordateAdded
18430981Di2015UniqueSeparatorinterface ICustomClass {Di2015NewLine  DateTime dateAdded { get; set; }Di2015NewLine}Di2015NewLine
18430981Di2015UniqueSeparatorpublic void assignData(IEnumerable<ICustomClass> enumerable) {Di2015NewLine  foreach (var customData in enumerable) {Di2015NewLine    customData.dateAdded = newValue;Di2015NewLine  }Di2015NewLine}Di2015NewLine
18430981Di2015UniqueSeparatordynamic
18430981Di2015UniqueSeparatorpublic void assignData(IEnumerable<object> enumerable) {Di2015NewLine  foreach (dynamic customData in enumerable) {Di2015NewLine    try { Di2015NewLine      customData.dateAdded = newValue;Di2015NewLine    } catch { Di2015NewLine      // Object doesn't have dateAdded so just move onDi2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
18431045Di2015UniqueSeparatorpublic int Id { get; set; }Di2015NewLine
18431045Di2015UniqueSeparatorpublic virtual User LastUpdatedByUser { get; set; }Di2015NewLine
18431068Di2015UniqueSeparatorpublic class ClassADi2015NewLine{Di2015NewLine    private ReferenceClassB reference;Di2015NewLine    public ClassA()Di2015NewLine    {Di2015NewLine        reference = new ReferenceClassB(this);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class ReferenceClassBDi2015NewLine{Di2015NewLine    private ClassA referencedClass;Di2015NewLine    public ReferenceClassB(ClassA reference)Di2015NewLine    {Di2015NewLine        referencedClass = reference;Di2015NewLine    }Di2015NewLine}Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        ClassA a = new ClassA();Di2015NewLine        ReferenceClassB b = (ReferenceClassB) a.GetType().GetField("reference", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(a);Di2015NewLine        WeakReference weakA = new WeakReference(a);Di2015NewLine        WeakReference weakB = new WeakReference(b);Di2015NewLine        a = null;Di2015NewLine        b = null;Di2015NewLine        GC.Collect();Di2015NewLine        Debug.Assert(weakA.IsAlive==false);Di2015NewLine        Debug.Assert(weakB.IsAlive==false);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18431121Di2015UniqueSeparator// Code size       47 (0x2f)Di2015NewLine.maxstack  8Di2015NewLineIL_0000:  ldarg.0Di2015NewLineIL_0001:  isinst     TestApp.Program/CarDi2015NewLineIL_0006:  brfalse.s  IL_002eDi2015NewLineIL_0008:  ldarg.0Di2015NewLineIL_0009:  isinst     TestApp.Program/CarDi2015NewLineIL_000e:  callvirt   instance int32 TestApp.Program/Car::get_numWheels()Di2015NewLineIL_0013:  ldc.i4.4Di2015NewLineIL_0014:  bne.un.s   IL_002eDi2015NewLineIL_0016:  ldarg.0Di2015NewLineIL_0017:  isinst     TestApp.Program/CarDi2015NewLineIL_001c:  callvirt   instance bool TestApp.Program/Car::get_hasGas()Di2015NewLineIL_0021:  brfalse.s  IL_002eDi2015NewLineIL_0023:  ldarg.0Di2015NewLineIL_0024:  isinst     TestApp.Program/CarDi2015NewLineIL_0029:  callvirt   instance void TestApp.Program/Car::drive()Di2015NewLineIL_002e:  retDi2015NewLine
18431121Di2015UniqueSeparator// Code size       34 (0x22)Di2015NewLine.maxstack  2Di2015NewLine.locals init ([0] class TestApp.Program/Car c)Di2015NewLineIL_0000:  ldarg.0Di2015NewLineIL_0001:  isinst     TestApp.Program/CarDi2015NewLineIL_0006:  stloc.0Di2015NewLineIL_0007:  ldloc.0Di2015NewLineIL_0008:  brfalse.s  IL_0021Di2015NewLineIL_000a:  ldloc.0Di2015NewLineIL_000b:  callvirt   instance int32 TestApp.Program/Car::get_numWheels()Di2015NewLineIL_0010:  ldc.i4.4Di2015NewLineIL_0011:  bne.un.s   IL_0021Di2015NewLineIL_0013:  ldloc.0Di2015NewLineIL_0014:  callvirt   instance bool TestApp.Program/Car::get_hasGas()Di2015NewLineIL_0019:  brfalse.s  IL_0021Di2015NewLineIL_001b:  ldloc.0Di2015NewLineIL_001c:  callvirt   instance void TestApp.Program/Car::drive()Di2015NewLineIL_0021:  retDi2015NewLine
18431121Di2015UniqueSeparatorisinst
18431220Di2015UniqueSeparatorpublic List<List<string >> retListTable()Di2015NewLine    {Di2015NewLineDi2015NewLine        DataTable dt = new DataTable();Di2015NewLine        adap.Fill(dt);Di2015NewLineDi2015NewLine        List<List<string>> lstTable = new List<List<string>>();Di2015NewLineDi2015NewLine        foreach (DataRow row in dt.Rows)Di2015NewLine        {Di2015NewLine            List<string> lstRow = new List<string>();Di2015NewLine            foreach (var item in row.ItemArray )Di2015NewLine            {Di2015NewLine                lstRow.Add(item.ToString().Replace("\\r\\n", string.Empty));Di2015NewLine            }Di2015NewLine            lstTable.Add(lstRow );Di2015NewLine        }Di2015NewLineDi2015NewLine        return lstTable ;Di2015NewLineDi2015NewLine    }Di2015NewLine
18431284Di2015UniqueSeparatorRoot/Sensor/
18431284Di2015UniqueSeparatorvalue-of
18431284Di2015UniqueSeparatorfor-each
18431284Di2015UniqueSeparatorSensor
18431284Di2015UniqueSeparator<xsl:value-of select="sequence_number" />Di2015NewLine
18431284Di2015UniqueSeparatortransform
18431284Di2015UniqueSeparatorposition_x
18431284Di2015UniqueSeparatorposition_y
18431284Di2015UniqueSeparator<g transform="translate({position_x},{position_y})" id="S">Di2015NewLine
18431284Di2015UniqueSeparator<?xml version='1.0'?>Di2015NewLine<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>Di2015NewLine  <xsl:template match='/'>Di2015NewLine    <svg xmlns="http://www.w3.org/2000/svg" version="1.1">Di2015NewLine      <xsl:for-each select="Root/Sensor">Di2015NewLine        <g transform="translate({position_x},{position_y})" id="S">Di2015NewLine          <text x="118" y="20" font-family="sans-serif" font-size="18px" font-weight="bold" fill="black"><xsl:value-of select="sequence_number" /></text>Di2015NewLine          <rect x="12" y="32" width="8" height="18" fill="#FFFFFF" stroke="black" stroke-width="1" />Di2015NewLine          <text x="23" y="97" font-family="sans-serif" font-size="16px" fill="black"><xsl:value-of select="id_number" /></text>Di2015NewLine          <text x="23" y="117" font-family="sans-serif" font-size="16px" fill="black"><xsl:value-of select="channel_number" /></text>Di2015NewLine          <text x="142" y="80" font-family="sans-serif" font-size="20px" font-weight="bold" fill="black">S<xsl:value-of select="module_number" /></text>Di2015NewLine        </g>Di2015NewLine      </xsl:for-each>Di2015NewLine    </svg>Di2015NewLine  </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
18431763Di2015UniqueSeparatorpnlAjax_IFrame
18431763Di2015UniqueSeparatorfrmAjax = parent.frames[0].LoadVehStore2();Di2015NewLine
18431829Di2015UniqueSeparatorLoad()
18431829Di2015UniqueSeparator <script>Di2015NewLine   $(function () {Di2015NewLine   $('#text-email').click(function () {Di2015NewLine       var areavalue = $('#search-User').val();Di2015NewLine       $(".YourDivForResults").Load('/Allusers/SearchUser/?Email=' + areavalue)                       Di2015NewLine                    });Di2015NewLine                });Di2015NewLine</script>Di2015NewLine
18431829Di2015UniqueSeparatorsystem = system.Where(c => c.Email.ToUpper().Trim().Contains(Email.ToUpper().Trim()));Di2015NewLine
18431952Di2015UniqueSeparator private ActionResult ShowSignOutPage(string returnUrl)Di2015NewLine {Di2015NewLine   ....Di2015NewLine   FederatedAuthentication.SessionAuthenticationModule.DeleteSessionTokenCookie(); //added thisDi2015NewLine   return View("Signout", realms);Di2015NewLine }Di2015NewLine
18432002Di2015UniqueSeparatorList< int > allowedDays = new List<int> {0,1,4};Di2015NewLineDi2015NewLineif (allowedDays.Contains((int)DateTime.Now.DayOfWeek))Di2015NewLine                // do soemthingDi2015NewLine
18432521Di2015UniqueSeparator public partial class WiiMoteControl: PictureBox {Di2015NewLineDi2015NewLine    public Bitmap wiimote;Di2015NewLine    private float _angle;Di2015NewLine    public float Angle { Di2015NewLine         get { return _angle; } Di2015NewLine         set { _angle = value; Invalidate( ); } Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnPaint( PaintEventArgs pe ) {Di2015NewLine        base.OnPaint( pe );Di2015NewLine        pe.Graphics.ResetTransform( );Di2015NewLine        pe.Graphics.TranslateTransform( Size.Width / 2, Size.Height / 2 );Di2015NewLine        pe.Graphics.RotateTransform( Angle );Di2015NewLine        pe.Graphics.TranslateTransform( -Size.Width / 2, -Size.Height / 2 );Di2015NewLine        if (wiimote != null) {Di2015NewLine            pe.Graphics.DrawImage( wiimote, 0, 0, Size.Width, Size.Height );Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18432523Di2015UniqueSeparatorNextButtonClick
18432523Di2015UniqueSeparatorFalse
18432523Di2015UniqueSeparatorResult
18432523Di2015UniqueSeparatorTrue
18432523Di2015UniqueSeparatorResult
18432523Di2015UniqueSeparatorfunction ValidateSerialNumber(const SerialNumber: string): Boolean;Di2015NewLinevarDi2015NewLine  WinHttpReq: Variant;Di2015NewLinebeginDi2015NewLine  Result := False;Di2015NewLineDi2015NewLine  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');Di2015NewLine  WinHttpReq.Open('POST', 'http://localhost:1024/WebService1/Service.asmx?op=ValidateMe', False);Di2015NewLine  WinHttpReq.Send(SerialNumber);Di2015NewLineDi2015NewLine  Result := WinHttpReq.Status = 200;Di2015NewLineend;Di2015NewLineDi2015NewLinefunction NextButtonClick(CurPageID: Integer): Boolean;Di2015NewLinevarDi2015NewLine  SerialNumber: string;Di2015NewLinebeginDi2015NewLine  Result := True;Di2015NewLineDi2015NewLine  if CurPageID = SerialPage.ID thenDi2015NewLine  beginDi2015NewLine    SerialNumber := GetSerialNumber('-');Di2015NewLine    Result := ValidateSerialNumber(SerialNumber);Di2015NewLine  end;Di2015NewLineend;Di2015NewLine
18432555Di2015UniqueSeparatorstruct Normalize
18432555Di2015UniqueSeparatorclass Normalize
18432635Di2015UniqueSeparatorcontext.Entry(page).State = EntityState.Modified;Di2015NewLinecontext.SaveChanges();Di2015NewLine
18432661Di2015UniqueSeparatorstring number = wholeNumber + "." + decimalDi2015NewLinedouble doubleNumber = Double.Parse(number);Di2015NewLine
18432661Di2015UniqueSeparatorstring number = wholeNumber + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparââator + decimalDi2015NewLinedouble doubleNumber = Double.Parse(number);Di2015NewLine
18432816Di2015UniqueSeparatordefault(T)
18432816Di2015UniqueSeparatornull
18432816Di2015UniqueSeparatordefault(T)
18432816Di2015UniqueSeparatornull
18432816Di2015UniqueSeparatordefault
18432816Di2015UniqueSeparatorSystem.Nullable<T>
18432862Di2015UniqueSeparatorvar jObj = JObject.Parse(json);Di2015NewLinevar props = jObj["data"][0].Select(x => ((JProperty)x).Name).ToList();Di2015NewLine
18432862Di2015UniqueSeparator{data:[Di2015NewLine { "id":"1", Di2015NewLine        "name":"aa",Di2015NewLine        "email":"aa@aa.com",Di2015NewLine        "address":"11"Di2015NewLine    },Di2015NewLine    {"id":"2",Di2015NewLine        "name":"bb",Di2015NewLine        "email":"bb@bb.com",Di2015NewLine        "address":"22"Di2015NewLine    }Di2015NewLine]}Di2015NewLine
18432862Di2015UniqueSeparator"
18432862Di2015UniqueSeparatordata:
18432870Di2015UniqueSeparatorPBKDF2_MD5
18432870Di2015UniqueSeparatorKeyDerivationParameters params = KeyDerivationParameters.BuildForPbkdf2(Di2015NewLine                                  passwordBuffer,   // SaltDi2015NewLine                                  10000);           // PBKDF2 Iteration CountDi2015NewLineDi2015NewLineKeyDerivationAlgorithmProvider.OpenAlgorithm("PBKDF2_MD5")Di2015NewLine                                 .CreateKey(passwordBuffer);Di2015NewLineDi2015NewLineIBuffer derived = CryptographicEngine.DeriveKeyMaterial(key, params, 64);Di2015NewLine
18432918Di2015UniqueSeparatorpublic class ClassBEventArgs : EventArgsDi2015NewLine{Di2015NewLine    bool treatmentIsOK = false;Di2015NewLine}Di2015NewLine
18432918Di2015UniqueSeparatornamespace ClassBNameSpaceDi2015NewLine{Di2015NewLine   public delagate fooEventHandlerDelegate void (object sender, ClassBEventArgs e);Di2015NewLineDi2015NewLine   public ClassB Di2015NewLine   {Di2015NewLineDi2015NewLine   public event fooEventHandlerDelegate fooEventHandler;Di2015NewLineDi2015NewLine   .........Di2015NewLine
18432918Di2015UniqueSeparator.......Di2015NewLineif (this.fooEventHandler != null)Di2015NewLine{Di2015NewLine    ClassBEventArgs customEventArgs = new ClassBEventArgs();Di2015NewLine     this.fooEventHandler (this,customEventArgs);Di2015NewLine     if (customEventArgs.treatmentIsOK )Di2015NewLine     {Di2015NewLine        this.isOK();  ==> Your codeDi2015NewLine     }Di2015NewLine     elseDi2015NewLine     {Di2015NewLine        this.isOK();  ==> Your codeDi2015NewLine     }Di2015NewLine}Di2015NewLine.......Di2015NewLine
18432947Di2015UniqueSeparator    oldLatitude = Math.PI * oldLatitude / 180;Di2015NewLine    oldLongitude = Math.PI * oldLongitude / 180;Di2015NewLine    currentDirection = Math.PI * currentDirection / 180.0;Di2015NewLine
18432947Di2015UniqueSeparator            newLatitude = 180 * newLatitude / Math.PI;Di2015NewLine            newLongitude = 180 * newLongitude / Math.PI;Di2015NewLine
18433138Di2015UniqueSeparatorprivate void checkBox1_Checkedchanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!textBox1.Visible) {Di2015NewLine        textBox1.Location = new Point(textBox1.Left + panel1.AutoScrollPosition.X,Di2015NewLine                                      textBox1.Top  + panel1.AutoScrollPosition.Y);Di2015NewLine        textBox1.Visible = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18433138Di2015UniqueSeparatorprivate void checkBox1_Checkedchanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    textBox1.Enabled = true;Di2015NewLine}Di2015NewLine
18433375Di2015UniqueSeparator<table id="table1" runat="server">Di2015NewLine
18433375Di2015UniqueSeparatortable1.Style.Add("display", "none");Di2015NewLine
18433375Di2015UniqueSeparatorif(table1.Style["display"] == "none")Di2015NewLine{Di2015NewLine    // Do what you need to Di2015NewLine}Di2015NewLine
18433701Di2015UniqueSeparatorTouch.FrameReported -= OnTouchFrameReported;Di2015NewLine
18433701Di2015UniqueSeparator<Image MouseLeftButtonDown="mouseDown" MouseLeftButtonUp="mouseUp"/>Di2015NewLine
18433701Di2015UniqueSeparatorpublic void mouseDown(object sender, MouseButtonEventArgs m)Di2015NewLine{Di2015NewLine  Touch.FrameReported += OnTouchFrameReported;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void mouseUp(object sender, MouseButtonEventArgs m)Di2015NewLine{Di2015NewLine  Touch.FrameReported -= OnTouchFrameReported;Di2015NewLine }Di2015NewLine
18433728Di2015UniqueSeparatorCannot access the file...
18433728Di2015UniqueSeparatorbin
18433728Di2015UniqueSeparatorobj
18433788Di2015UniqueSeparatorusing System.Web.Security;Di2015NewLine
18433928Di2015UniqueSeparatorasync/await
18433928Di2015UniqueSeparatorTask.delay
18433928Di2015UniqueSeparatorfor (int i = 0; i < livello; i++)Di2015NewLine{Di2015NewLine   // Your switch caseDi2015NewLine    await Task.Delay(1000);Di2015NewLine}Di2015NewLine
18433928Di2015UniqueSeparatorasync void IniziaGioco()Di2015NewLine
18433990Di2015UniqueSeparatorUserStats.ActivityLevel.XXX
18433990Di2015UniqueSeparatorpublic enum ActivityLevelDi2015NewLine{Di2015NewLine   Sedentary,Di2015NewLine   LightActivity,Di2015NewLine   Moderate,Di2015NewLine   Active,Di2015NewLine   ExtraDi2015NewLine}Di2015NewLineDi2015NewLinepublic class UserStatsDi2015NewLine{Di2015NewLineDi2015NewLine    public ActivityLevel ActivitySelected { get; set; }Di2015NewLineDi2015NewLine    [Key]Di2015NewLine    public int UserID { get; set; }Di2015NewLine
18434079Di2015UniqueSeparatorvar fs1 = new FileStream("test.mkv", FileMode.Open, FileAccess.Read, FileShare.Read);Di2015NewLinevar fs2 = new FileStream("test.mkv", FileMode.Open, FileAccess.Read, FileShare.Read);Di2015NewLine
18434262Di2015UniqueSeparatorExpression.Lambda
18434262Di2015UniqueSeparatorpublic IQueryable<TModel> Search<TModel>(IQueryable<TModel> model, string selector, string searchFor)Di2015NewLine{Di2015NewLine    var param = Expression.Parameter(typeof(TModel), "x");Di2015NewLine        var contains = Expression.Call(Di2015NewLine            Expression.PropertyOrField(param, selector),Di2015NewLine            "Contains", null, Expression.Constant(searchFor)Di2015NewLine        );Di2015NewLine        var predicate = Expression.Lambda<Func<TModel, bool>>(contains, param);Di2015NewLineDi2015NewLine        model = model.Where(predicate);Di2015NewLine    return model;Di2015NewLine}Di2015NewLine
18434262Di2015UniqueSeparatorpublic IQueryable<TModel> Search<TModel>(IQueryable<TModel> model, string selector, object searchFor)Di2015NewLine{Di2015NewLine    var param = Expression.Parameter(typeof(TModel), "x");Di2015NewLine    var tostring = Expression.Call(Di2015NewLine        Expression.PropertyOrField(param, selector),Di2015NewLine        "ToString", null, nullDi2015NewLine        );Di2015NewLine    var tolower = Expression.Call(Di2015NewLine        tostring,Di2015NewLine        "ToLower", null, nullDi2015NewLine        );Di2015NewLine    var contains = Expression.Call(Di2015NewLine        tolower,Di2015NewLine        "Contains", null, Expression.Constant(searchFor)Di2015NewLine                );Di2015NewLine    var predicate = Expression.Lambda<Func<TModel, bool>>(contains, param);Di2015NewLineDi2015NewLine    model = model.Where(predicate);Di2015NewLineDi2015NewLine        return model;Di2015NewLine}Di2015NewLine
18434289Di2015UniqueSeparatorTextBox[,] textboxes = ...Di2015NewLineDi2015NewLineprivate void reset_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    for(int i = 0; i < textboxes.GetLength(0); i++)Di2015NewLine    {Di2015NewLine        for (int j = 0; j < textboxes.GetLength(1); j++)Di2015NewLine        {Di2015NewLine            textboxes[i,j].Text = "";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18434289Di2015UniqueSeparatorTextBox[][] textboxes = ...Di2015NewLineDi2015NewLineprivate void reset_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    for(int i = 0; i < textboxes.Length; i++)Di2015NewLine    {Di2015NewLine        for (int j = 0; j < textboxes[i].Length; j++)Di2015NewLine        {Di2015NewLine            textboxes[i][j].Text = "";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18434484Di2015UniqueSeparatorGetEnumerator()
18434484Di2015UniqueSeparatorExecute()
18434484Di2015UniqueSeparatorExecute()
18434484Di2015UniqueSeparatorGetEnumerator()
18434484Di2015UniqueSeparatorExecute()
18434484Di2015UniqueSeparatorGetEnumerator()
18434484Di2015UniqueSeparatorGetEnumerator()
18434484Di2015UniqueSeparatorTranslatingEnumerator
18434596Di2015UniqueSeparatorNullable
18434596Di2015UniqueSeparatorFalse
18434596Di2015UniqueSeparatorNullable
18434596Di2015UniqueSeparatorRun Custom Tool
18434911Di2015UniqueSeparatortest:"aobjectname"
18434911Di2015UniqueSeparator{hello: "world", test: "aobjectname"}Di2015NewLine
18434911Di2015UniqueSeparator{hello: "world", test: 1}Di2015NewLine
18434911Di2015UniqueSeparator"aobjectname"
18434911Di2015UniqueSeparatorEnum.Parse
18435198Di2015UniqueSeparatorx = 0
18435198Di2015UniqueSeparatorx = -Window.ClientBounds.Width
18435198Di2015UniqueSeparatorx
18435198Di2015UniqueSeparatorUpdate
18435198Di2015UniqueSeparatorx
18435198Di2015UniqueSeparatorWindow.ClientBounds.Width
18435198Di2015UniqueSeparatorif (stringPosition1.x >= Window.ClientBounds.Width)Di2015NewLine  stringPosition1.x -= 2 * Window.ClientBounds.Width;Di2015NewLine
18435244Di2015UniqueSeparatorV1OAuth2APIConnector
18435244Di2015UniqueSeparatorV1OAuth2APIConnector
18435244Di2015UniqueSeparatorVersionOne.SDK.APIClient
18435264Di2015UniqueSeparatorstatic public List<Name> GetNamedRangesInOrder(Workbook activeWorkbook)Di2015NewLine{Di2015NewLine    List<Name> namedRanges = GetNamedRanges(activeWorkbook);Di2015NewLineDi2015NewLine    List<string> lstStringNameRanges = new List<string>();Di2015NewLine    foreach (var item in namedRanges)Di2015NewLine    {Di2015NewLine        lstStringNameRanges.Add(RemoveDigits(item.RefersTo.ToString()));Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerable<string> results = SortByLengthAndName(lstStringNameRanges);Di2015NewLine    List<Name> sortedNamedRanges = new List<Name>();Di2015NewLine    foreach (var item in results)Di2015NewLine    {Di2015NewLine        int index = -1;Di2015NewLine        for (int i=0; i < namedRanges.Count; i++)Di2015NewLine        {Di2015NewLine            if (RemoveDigits(namedRanges[i].RefersTo.ToString()) == item.ToString())Di2015NewLine            {Di2015NewLine                index = i;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sortedNamedRanges.Add(namedRanges[index]);Di2015NewLine    }Di2015NewLine    return sortedNamedRanges;Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinestatic public IEnumerable<string> SortByLengthAndName(IEnumerable<string> e)Di2015NewLine{Di2015NewLine    IEnumerable<string> query = e.OrderBy(x => x.Length).ThenBy(x => x).ToList();Di2015NewLine    return query;Di2015NewLine}Di2015NewLineDi2015NewLinestatic public string RemoveDigits(string e)Di2015NewLine{Di2015NewLine    string str = new string((from c in eDi2015NewLine            where char.IsLetter(c) || char.IsSymbol(c)Di2015NewLine            select c).ToArray());Di2015NewLineDi2015NewLine    return str;Di2015NewLine}Di2015NewLine
18435292Di2015UniqueSeparatorDrawingData
18435292Di2015UniqueSeparatornamespace DrawingTextDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        private Point mouseDownPosition = new Point(0, 0);Di2015NewLine        private Point mouseMovePosition = new Point(0, 0);Di2015NewLine        private int mousePressdDown;Di2015NewLine        private ArrayList drawnItemsList;Di2015NewLine        Random rnd;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            drawnItemsList = new ArrayList();Di2015NewLine            this.rnd = new Random();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_MouseUp(object sender, MouseEventArgs e)Di2015NewLine        {Di2015NewLine            if (mousePressdDown == 1)Di2015NewLine            {Di2015NewLine                label1.Text = "X: " + mouseMovePosition.X.ToString();Di2015NewLine                label2.Text = "Y: " + mouseMovePosition.Y.ToString();Di2015NewLine                this.Invalidate();Di2015NewLine            }Di2015NewLine            DrawingData a = new DrawingData(mouseMovePosition, mouseDownPosition, rnd.Next().ToString());Di2015NewLine            drawnItemsList.Add(a);Di2015NewLine            mousePressdDown = 0;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Form1_Paint(object sender, PaintEventArgs e)Di2015NewLine        {Di2015NewLine            foreach (DrawingData a in drawnItemsList)Di2015NewLine            {Di2015NewLine                draw(e.Graphics, a);Di2015NewLine            }Di2015NewLine            draw(e.Graphics, mouseDownPosition, mouseMovePosition);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void draw(Graphics e, DrawingData a)Di2015NewLine        {Di2015NewLine            Pen p = new Pen(Color.Black, 2);Di2015NewLineDi2015NewLine            using (Font useFont = new Font("Gotham Medium", 28, FontStyle.Bold))Di2015NewLine            {Di2015NewLine                RectangleF header2Rect = new RectangleF();Di2015NewLine                int moldX = a.old.X - 5;Di2015NewLine                int moldY = a.old.Y;Di2015NewLineDi2015NewLine                header2Rect.Location = new Point(moldX, moldY);Di2015NewLine                header2Rect.Size = new Size(600, ((int)e.MeasureString(header2, useFont, 600, StringFormat.GenericTypographic).Height));Di2015NewLine                e.DrawString(a.Rand, useFont, Brushes.Black, header2Rect);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18435292Di2015UniqueSeparatornamespace DrawingTextDi2015NewLine{Di2015NewLine    [Serializable]Di2015NewLine    public class DrawingDataDi2015NewLine    {Di2015NewLine        private Point mold; // mouseDown positionDi2015NewLine        private Point mcur; // mouseUp poslitionDi2015NewLine        private string randValue; // random data valueDi2015NewLineDi2015NewLine        public DrawingData()Di2015NewLine        {Di2015NewLine            mold = new Point(0, 0);Di2015NewLine            mcur = new Point(0, 0);Di2015NewLine            randValue = String.Empty;Di2015NewLine        }Di2015NewLineDi2015NewLine        public DrawingData(Point old, Point cur, string rand)Di2015NewLine        {Di2015NewLine            mold = old;Di2015NewLine            mcur = cur;Di2015NewLine            randValue = rand;Di2015NewLine        }Di2015NewLineDi2015NewLine        public Point oldDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return mold;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                mold = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public Point curDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return mcur;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                mcur = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public sting RandDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return randValue;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                randValue = value;Di2015NewLine            }Di2015NewLine     }Di2015NewLine}Di2015NewLine
18435439Di2015UniqueSeparatorScene
18435439Di2015UniqueSeparatorScene
18435439Di2015UniqueSeparator public class SceneDi2015NewLine {Di2015NewLine      public Scene(string name)Di2015NewLine      {Di2015NewLine          Name = name;Di2015NewLine      }Di2015NewLineDi2015NewLine      public string Name { get; set; }Di2015NewLineDi2015NewLine      // ... more propertiesDi2015NewLineDi2015NewLine      public void Draw()Di2015NewLine      {Di2015NewLine          // logic for drawingDi2015NewLine      }Di2015NewLineDi2015NewLine      // ... more methods.Di2015NewLineDi2015NewLine      public override string ToString()Di2015NewLine      {Di2015NewLine          // here return what you would want to have asDi2015NewLine          // a string representation of a Scene object.Di2015NewLine          return "Scene " + Name;Di2015NewLine      }Di2015NewLine }Di2015NewLineDi2015NewLineDi2015NewLine // in a different part of your code, create and add the Scene objectsDi2015NewLine var scenesList = new List<Scene>();Di2015NewLineDi2015NewLine scenesList.Add(new Scene("Some scene name"));Di2015NewLine // add moreDi2015NewLineDi2015NewLine // Now you can print them to the console like this:Di2015NewLine foreach (var scene in scenesList)Di2015NewLine     Console.WriteLine(scene);Di2015NewLine
18435443Di2015UniqueSeparatorvar query = from c in db.COMPANYDi2015NewLine            where (from u in db.USER_COMPANYDi2015NewLine                   where u.UserId == UserIdDi2015NewLine                   select u.KEY).Contains(c.KEY)Di2015NewLine            orderby c.NAMEDi2015NewLine            select c.KEY, c.NAME;Di2015NewLine
18435697Di2015UniqueSeparatorint.Parse(Request.QueryString["id"])
18435725Di2015UniqueSeparatortabCom com = db.tabCom.Single(tab => tab.PrimaryKeyColumn == 3);Di2015NewLine
18435764Di2015UniqueSeparatorScriptManager.RegisterStartupScript(Di2015NewLine                UpdatePanelID,Di2015NewLine                UpdatePanelID.GetType(), Di2015NewLine                "Create Time Table", Di2015NewLine                " alert('Time Table Created Successfully.'); window.location.href = 'create.aspx';",Di2015NewLine                true);Di2015NewLine
18435921Di2015UniqueSeparatorvar image = new Image();Di2015NewLinevar fullFilePath = @"http://www.americanlayout.com/wp/wp-content/uploads/2012/08/C-To-Go-300x300.png";Di2015NewLineDi2015NewLineBitmapImage bitmap = new BitmapImage();Di2015NewLinebitmap.BeginInit();Di2015NewLinebitmap.UriSource = new Uri(fullFilePath, UriKind.Absolute);Di2015NewLinebitmap.EndInit();Di2015NewLineDi2015NewLineimage.Source = bitmap;Di2015NewLinewrapPanel1.Children.Add(image);Di2015NewLine
18435921Di2015UniqueSeparator<ListBox ItemsSource={Binding lstQuestions}>Di2015NewLine    <ListBox.ItemsPanel>Di2015NewLine        <ItemsPanelTemplate>Di2015NewLine            <WrapPanel/>Di2015NewLine        </ItemsPanelTemplate>Di2015NewLine    </ListBox.ItemsPanel>Di2015NewLine    <ListBox.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <Image Source="{Binding Path, Converter={StaticResource MyPathConverter}}"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListBox.ItemTemplate>Di2015NewLine</ListBox>Di2015NewLine
18435921Di2015UniqueSeparatorpublic class PathConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        string path = value.ToString();Di2015NewLine        if (path.StartsWith("\\\\")Di2015NewLine            path = path.Substring(1);Di2015NewLineDi2015NewLine        return Path.Combine("whateveryourbasepathis", path);Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18435965Di2015UniqueSeparatorEnvironment
18435965Di2015UniqueSeparatorEnvironment
18435965Di2015UniqueSeparatorRequest
18435965Di2015UniqueSeparatorSystem.Web.HttpContext.Current.Request.LogonUserIdentity
18436087Di2015UniqueSeparatorMdi Form
18436087Di2015UniqueSeparatorForm
18436087Di2015UniqueSeparatorMdi Form
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorchild forms
18436087Di2015UniqueSeparatorChild forms
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorMdi Form
18436087Di2015UniqueSeparatorControls
18436087Di2015UniqueSeparatorMdi Form
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorMdi Form
18436087Di2015UniqueSeparatorChild forms
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorBringToFont()
18436087Di2015UniqueSeparatorChild form
18436087Di2015UniqueSeparatorVisible
18436087Di2015UniqueSeparatorSendToBack()
18436087Di2015UniqueSeparatorMdiClient
18436087Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        IsMdiContainer = true;Di2015NewLine        //Find the MdiClient and hold it by a variableDi2015NewLine        client = Controls.OfType<MdiClient>().First();Di2015NewLine        //This will check whenever client gets focused and there aren't anyDi2015NewLine        //child forms opened, Send the client to back so that the other controls can be shown back.Di2015NewLine        client.GotFocus += (s, e) => {Di2015NewLine            if (!MdiChildren.Any(x => x.Visible)) client.SendToBack();Di2015NewLine        };Di2015NewLine    }Di2015NewLine    MdiClient client;Di2015NewLine    //This is used to show a child formDi2015NewLine    //Note that we have to call client.BringToFront();Di2015NewLine    private void ShowForm(Form childForm)Di2015NewLine    {Di2015NewLine        client.BringToFront();//This will make your child form shown on top.Di2015NewLine        childForm.Show();            Di2015NewLine    }Di2015NewLine    //button1 is a button on your Form1 (Mdi container)Di2015NewLine    //clicking it to show a child form and see it in actionDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Form2 f = new Form2 { MdiParent = this };Di2015NewLine        ShowForm(f);         Di2015NewLine    }     Di2015NewLine}Di2015NewLine
18436155Di2015UniqueSeparatorchars
18436155Di2015UniqueSeparatorbyte[]
18436155Di2015UniqueSeparatorstring
18436155Di2015UniqueSeparatorSystem.Text.Encoding.UTF8.GetString(message)
18436155Di2015UniqueSeparatorSystem.Text.Encoding.UTF8.GetString(message).TrimEnd('\\0', '\\n');Di2015NewLine
18436208Di2015UniqueSeparatorH:mm:ss
18436208Di2015UniqueSeparatorhh:mm:ss
18436208Di2015UniqueSeparatorH
18436208Di2015UniqueSeparatorhh
18436208Di2015UniqueSeparatornew SqlParameter("@StartDate", SqlDbType.DateTime)Di2015NewLine{ Di2015NewLine    Value = startDate Di2015NewLine}Di2015NewLine
18436290Di2015UniqueSeparatorobject
18436559Di2015UniqueSeparatorpublic interface IElementDi2015NewLine{Di2015NewLine    string DoSomething(string param);Di2015NewLine}Di2015NewLine
18436559Di2015UniqueSeparatorpublic class ProcessorClassDi2015NewLine{Di2015NewLine    private SerializationBinder _binder;Di2015NewLineDi2015NewLine    public ProcessorClass(SerializationBinder binder)Di2015NewLine    {Di2015NewLine        _binder = binder;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string CallDoSomething(Stream s)Di2015NewLine    {Di2015NewLine        var formatter = new BinaryFormatter();Di2015NewLineDi2015NewLine        formatter.Binder = _binder;Di2015NewLineDi2015NewLine       var i = (IElement)formatter.Deserialize(s);Di2015NewLineDi2015NewLine        return i.DoSomething("the processor");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18436559Di2015UniqueSeparatorClassA
18436559Di2015UniqueSeparatorclass Binder : SerializationBinderDi2015NewLine{Di2015NewLine    //WARNING: demonstration only, DO NOT USE in production codeDi2015NewLine    public override Type BindToType(string assemblyName, string typeName)Di2015NewLine    {Di2015NewLine        return Type.GetType("ClassA");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18436559Di2015UniqueSeparatorvar ms = new MemoryStream();Di2015NewLineDi2015NewLinevar formatter = new BinaryFormatter();Di2015NewLineDi2015NewLinevar theObject = new ClassA();Di2015NewLineDi2015NewLineformatter.Serialize(ms, theObject);Di2015NewLineDi2015NewLinevar processor = new ProcessorClass(new Binder());Di2015NewLineDi2015NewLinems.Seek(0, SeekOrigin.Begin);Di2015NewLineDi2015NewLinestring result = processor.CallDoSomething(ms);Di2015NewLine
18436838Di2015UniqueSeparatorSingle
18436838Di2015UniqueSeparatorFirst
18436838Di2015UniqueSeparatorSingle
18436838Di2015UniqueSeparatorFirst
18436838Di2015UniqueSeparatorFirstOrDefault
18436838Di2015UniqueSeparatorSide = category.Select(p => p.Side).FirstOrDefault()Di2015NewLine
18436876Di2015UniqueSeparatorCountofIssuerCode = l.Field4.Count()Di2015NewLine
18436876Di2015UniqueSeparatorCountofIssuerCode = lstISSHDR.Where(x=>x.IssuerGroupSequence == l.IssuerGroupSequence).Select(x=>x.Field4).Count()Di2015NewLine
18437210Di2015UniqueSeparatorhttp://localhost:4242/api/suggest?type=metrics&q=sys&max=10 Di2015NewLine
18437210Di2015UniqueSeparator{Di2015NewLine  "type":"metrics",Di2015NewLine  "q":"sys",Di2015NewLine  "max":10Di2015NewLine}Di2015NewLine
18437537Di2015UniqueSeparatorpublic MemberModelDi2015NewLine{Di2015NewLine    List<SelectListItem> MemberList { get; set; }Di2015NewLine}Di2015NewLine
18437537Di2015UniqueSeparatorpublic ActionResult Register()Di2015NewLine{Di2015NewLine    MemberModel model = new MemberModel();Di2015NewLineDi2015NewLine    model.MemberList = GetAllMembers()Di2015NewLine        .Select(m => new SelectListItemDi2015NewLine        {Di2015NewLine            Text = string.format("{0}, {1}", m.Mem_NA, m.Mem_Occ),Di2015NewLine            Value = m.IdDi2015NewLine        });Di2015NewLineDi2015NewLine    SelectListItem default = new SelectListItemDi2015NewLine    {Di2015NewLine        Text = "-- SELECT --",Di2015NewLine        Value = 0Di2015NewLine    };Di2015NewLineDi2015NewLine    model.MemberList.Insert(0, default);Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
18437537Di2015UniqueSeparator@Html.DropDownList(Model.MemberList);Di2015NewLine
18437543Di2015UniqueSeparatorxdRunResultDoc.Root
18437543Di2015UniqueSeparator<RunRdesult>
18437543Di2015UniqueSeparatorElement("RunResult")
18437543Di2015UniqueSeparator(int)
18437543Di2015UniqueSeparatorXElement
18437543Di2015UniqueSeparatorConvert.ToInt32
18437543Di2015UniqueSeparatorXElement Explicit Conversion (XElement to Int32)
18437543Di2015UniqueSeparatorint NofRecords = (int)xdRunResultDoc.Root.Element("RecordsProcessed");Di2015NewLine
18437583Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    dataGridView.ScrollBars = ScrollBars.Both;Di2015NewLineDi2015NewLine    dConn.Open();Di2015NewLine    dAdapter4.Fill(ds4,"activities");Di2015NewLine    dConn.Close();    Di2015NewLine    dataGridView.DataSource = ds4.Tables[0].DefaultView;Di2015NewLine}Di2015NewLine
18437831Di2015UniqueSeparator<asp:HyperLink ID="Title"  runat="server" Text='<%# Bind("Title") %>'  NavigateUrl='<%# Eval("link") %>' style='<%# Eval("link").ToString()!=""? "text-decoration:underline;color:Blue;":""%>'></asp:HyperLink>Di2015NewLine
18437832Di2015UniqueSeparatorCursor.Clip
18437832Di2015UniqueSeparatorMouseMove
18437832Di2015UniqueSeparator    Point downPoint;Di2015NewLine    //MouseDown event handler for your label1Di2015NewLine    private void label1_MouseDown(object sender, MouseEventArgs e){Di2015NewLine        downPoint = e.Location;Di2015NewLine        //this is the most important code to make it worksDi2015NewLine        Cursor.Clip = yourPanel.RectangleToScreen(new Rectangle(e.X, e.Y, yourPanel.ClientSize.Width - label1.Width, yourPanel.ClientSize.Height - label1.Height));Di2015NewLine    }Di2015NewLine    //MouseMove event handler for your label1Di2015NewLine    private void label1_MouseMove(object sender, MouseEventArgs e) {Di2015NewLine        if (e.Button == MouseButtons.Left) {Di2015NewLine            label1.Left += e.X - downPoint.X;Di2015NewLine            label1.Top += e.Y - downPoint.Y;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    //MouseUp event handler for your label1Di2015NewLine    private void label1_MouseUp(object sender, MouseEventArgs e){Di2015NewLine        Cursor.Clip = Rectangle.Empty;Di2015NewLine    }Di2015NewLine
18437931Di2015UniqueSeparator// use the DLL of the project which is currently runningDi2015NewLinevar runningAssembly = Assembly.GetExecutingAssemby();Di2015NewLineDi2015NewLine// all classes have a "Type" which exposes information about the classDi2015NewLinevar organismType = typeof(Organism);Di2015NewLineDi2015NewLine// to keep track of all organism classes that we've found.Di2015NewLinevar allOrganismTypes = new List<Type>();Di2015NewLineDi2015NewLine// go through all types in our project and locate those who inherit our Di2015NewLine// organism classDi2015NewLineforeach (var type in runningAssembly.GetTypes())Di2015NewLine{Di2015NewLine    if (organismType.IsAssignableFrom(type))Di2015NewLine        allOrganismTypes.Add(type);Di2015NewLine}Di2015NewLineDi2015NewLine// Find a random index here (do it yourself)Di2015NewLinevar theRandomIndex = 10;Di2015NewLineDi2015NewLineDi2015NewLinevar selectedType = allOrganismTypes[theRandomIndex];Di2015NewLineDi2015NewLine// activator is a class in .NET which can create new objects Di2015NewLine// with the help of a typeDi2015NewLinevar selected = (Organism)Activator.CreateInstance(selectedType);Di2015NewLine
18438027Di2015UniqueSeparator<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneAccentBrush}"/>Di2015NewLine
18438027Di2015UniqueSeparator<DiscreteObjectKeyFrame KeyTime="0" Value="3"/>Di2015NewLine
18438027Di2015UniqueSeparator<phone:PhoneApplicationPage.Resources>Di2015NewLine    <Style x:Key="PhoneButtonBase" TargetType="ButtonBase">Di2015NewLine        <Setter Property="Background" Value="Transparent"/>Di2015NewLine        <Setter Property="BorderBrush" Value="{StaticResource PhoneForegroundBrush}"/>Di2015NewLine        <Setter Property="Foreground" Value="{StaticResource PhoneForegroundBrush}"/>Di2015NewLine        <Setter Property="BorderThickness" Value="{StaticResource PhoneBorderThickness}"/>Di2015NewLine        <Setter Property="FontFamily" Value="{StaticResource PhoneFontFamilySemiBold}"/>Di2015NewLine        <Setter Property="FontSize" Value="{StaticResource PhoneFontSizeMedium}"/>Di2015NewLine        <Setter Property="Padding" Value="10,5,10,6"/>Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="ButtonBase">Di2015NewLine                    <Grid Background="Transparent">Di2015NewLine                        <VisualStateManager.VisualStateGroups>Di2015NewLine                            <VisualStateGroup x:Name="CommonStates">Di2015NewLine                                <VisualState x:Name="Normal"/>Di2015NewLine                                <VisualState x:Name="MouseOver"/>Di2015NewLine                                <VisualState x:Name="Pressed">Di2015NewLine                                    <Storyboard>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="ContentContainer">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneButtonBasePressedForegroundBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="ButtonBackground">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneAccentBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    </Storyboard>Di2015NewLine                                </VisualState>Di2015NewLine                                <VisualState x:Name="Disabled">Di2015NewLine                                    <Storyboard>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="ContentContainer">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneDisabledBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="ButtonBackground">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneDisabledBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="ButtonBackground">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="Transparent"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    </Storyboard>Di2015NewLine                                </VisualState>Di2015NewLine                            </VisualStateGroup>Di2015NewLine                        </VisualStateManager.VisualStateGroups>Di2015NewLine                        <Border x:Name="ButtonBackground" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0" Margin="{StaticResource PhoneTouchTargetOverhang}">Di2015NewLine                            <ContentControl x:Name="ContentContainer" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>Di2015NewLine                        </Border>Di2015NewLine                    </Grid>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine    <Style x:Key="PhoneRadioButtonCheckBoxBase" BasedOn="{StaticResource PhoneButtonBase}" TargetType="ToggleButton">Di2015NewLine        <Setter Property="Background" Value="{StaticResource PhoneRadioCheckBoxBrush}"/>Di2015NewLine        <Setter Property="BorderBrush" Value="{StaticResource PhoneRadioCheckBoxBorderBrush}"/>Di2015NewLine        <Setter Property="FontSize" Value="{StaticResource PhoneFontSizeMedium}"/>Di2015NewLine        <Setter Property="FontFamily" Value="{StaticResource PhoneFontFamilyNormal}"/>Di2015NewLine        <Setter Property="HorizontalContentAlignment" Value="Left"/>Di2015NewLine        <Setter Property="VerticalContentAlignment" Value="Center"/>Di2015NewLine        <Setter Property="Padding" Value="0"/>Di2015NewLine    </Style>Di2015NewLine    <Style x:Key="RadioButtonStyle1" BasedOn="{StaticResource PhoneRadioButtonCheckBoxBase}" TargetType="RadioButton">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="RadioButton">Di2015NewLine                    <Grid Background="Transparent">Di2015NewLine                        <VisualStateManager.VisualStateGroups>Di2015NewLine                            <VisualStateGroup x:Name="CommonStates">Di2015NewLine                                <VisualState x:Name="Normal"/>Di2015NewLine                                <VisualState x:Name="MouseOver"/>Di2015NewLine                                <VisualState x:Name="Pressed"/>Di2015NewLine                                <VisualState x:Name="Disabled">Di2015NewLine                                    <Storyboard>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="ContentContainer">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneDisabledBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    </Storyboard>Di2015NewLine                                </VisualState>Di2015NewLine                            </VisualStateGroup>Di2015NewLine                            <VisualStateGroup x:Name="CheckStates">Di2015NewLine                                <VisualState x:Name="Checked"/>Di2015NewLine                                <VisualState x:Name="Unchecked"/>Di2015NewLine                                <VisualState x:Name="Indeterminate"/>Di2015NewLine                            </VisualStateGroup>Di2015NewLine                        </VisualStateManager.VisualStateGroups>Di2015NewLine                        <ContentControl x:Name="ContentContainer" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>Di2015NewLine                    </Grid>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine</phone:PhoneApplicationPage.Resources>Di2015NewLine
18438027Di2015UniqueSeparator        <phone:LongListSelector x:Name="Recent" Margin="0"Di2015NewLine            toolkit:TiltEffect.IsTiltEnabled="True"Di2015NewLine            LayoutMode="Grid" GridCellSize="108,108" >Di2015NewLineDi2015NewLine            <phone:LongListSelector.ItemTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <ContentControl HorizontalAlignment="Stretch" HorizontalContentAlignment="Left">Di2015NewLine                        <ContentControl.Resources>Di2015NewLine                            <Storyboard x:Name="CheckedStoryboard">Di2015NewLine                                <ColorAnimation Duration="0" To="Red" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="brd" d:IsOptimized="True"/>Di2015NewLine                            </Storyboard>Di2015NewLine                        </ContentControl.Resources>Di2015NewLine                        <RadioButton x:Name="radioButton" HorizontalAlignment="Stretch" Margin="0,0,0,0" GroupName="A" Background="Black" Style="{StaticResource RadioButtonStyle1}" >Di2015NewLine                            <i:Interaction.Triggers>Di2015NewLine                                <i:EventTrigger EventName="Click">Di2015NewLine                                    <eim:ControlStoryboardAction Storyboard="{StaticResource CheckedStoryboard}"/>Di2015NewLine                                </i:EventTrigger>Di2015NewLine                                <i:EventTrigger EventName="Unchecked">Di2015NewLine                                    <eim:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource CheckedStoryboard}"/>Di2015NewLine                                </i:EventTrigger>Di2015NewLine                            </i:Interaction.Triggers>Di2015NewLine                            <Border x:Name="MyBorder" Background="Transparent">Di2015NewLine                                <Border x:Name="brd" CornerRadius="10" Width="Auto" BorderThickness="3" BorderBrush="Transparent">Di2015NewLine                                    <toolkit:ContextMenuService.ContextMenu>Di2015NewLine                                        <toolkit:ContextMenu x:Name="imgListContextMenu" Background="{StaticResource PhoneChromeBrush}">Di2015NewLine                                            <toolkit:MenuItem Foreground="{StaticResource PhoneForegroundBrush}" Header="edit"/>Di2015NewLine                                            <toolkit:MenuItem Foreground="{StaticResource PhoneForegroundBrush}" Header="favorite"/>Di2015NewLine                                            <toolkit:MenuItem Foreground="{StaticResource PhoneForegroundBrush}" Header="delete"/>Di2015NewLine                                        </toolkit:ContextMenu>Di2015NewLine                                    </toolkit:ContextMenuService.ContextMenu>Di2015NewLine                                    <Viewbox Width="108" Height="108">Di2015NewLine                                        <Image x:Name="recentImage" Source="{Binding Source}" Margin="6,6" Width="108"/>Di2015NewLine                                    </Viewbox>Di2015NewLine                                </Border>Di2015NewLine                            </Border>Di2015NewLine                        </RadioButton>Di2015NewLine                    </ContentControl>Di2015NewLine                </DataTemplate>Di2015NewLine            </phone:LongListSelector.ItemTemplate>Di2015NewLineDi2015NewLine        </phone:LongListSelector>Di2015NewLine
18438027Di2015UniqueSeparatorxmlns:toolkit="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit"Di2015NewLinexmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"Di2015NewLinexmlns:eim="clr-namespace:Microsoft.Expression.Interactivity.Media;assembly=Microsoft.Expression.Interactions"Di2015NewLine
18438091Di2015UniqueSeparator@model IEnumerable<....Members.Models.MemberBasicData>Di2015NewLine@Html.DropDownListFor(model => model.Mem_Na, (SelectList)ViewBag.Users, "--Select Users--")Di2015NewLine
18438091Di2015UniqueSeparator@model ....Members.Models.MemberBasicDataDi2015NewLine@Html.DropDownListFor(model => model.Id,new SelectList(ViewBag.Users,"Id","Mem_NA"), "--Select Users--")Di2015NewLine
18438346Di2015UniqueSeparator<Image Source="YouImage.jpg">Di2015NewLine    <Image.Clip>Di2015NewLine        <EllipseGeometry Center="50,50" RadiusX="50" RadiusY="50" />Di2015NewLine    </Image.Clip>Di2015NewLine</Image>Di2015NewLine
18438399Di2015UniqueSeparatorpublic class PersonWithApprove : Person { // TODO: replace with non disgusting nameDi2015NewLine    public bool Approved { get; set; }Di2015NewLine    // etc...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Student : PersonWithApprove {Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Faculty : PersonWithApprove {Di2015NewLine}Di2015NewLine
18438399Di2015UniqueSeparatorpublic interface IApprove {Di2015NewLine    bool Approved { get; set; }Di2015NewLine    // etcDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Student : Person, IApprove {Di2015NewLine}Di2015NewLine
18438399Di2015UniqueSeparatorApprove
18438399Di2015UniqueSeparatorpublic class Student : Person {Di2015NewLine    Approve _approve = new Approve();Di2015NewLine    public Approve Approve {Di2015NewLine        get { return _approve; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18438849Di2015UniqueSeparatorIsDBNull
18438849Di2015UniqueSeparatorif(!precti2.IsDBNull(59))Di2015NewLine{Di2015NewLine    s_ub_cen.Text = precti2.GetDecimal(59).ToString();Di2015NewLine}Di2015NewLine
18438849Di2015UniqueSeparatorSqlCommand command = new SqlCommand("SELECT * FROM zajezd WHERE akce='" + akce + "' and rocnik='" + klientClass.Rocnik() + "'", spojeni);Di2015NewLine
18438849Di2015UniqueSeparatorusing(var command = new SqlCommand("SELECT * FROM zajezd WHERE akce=@akce and rocnik=@rocnik", spojeni))Di2015NewLine{Di2015NewLine    command.Paramaters.AddWithValue("@akce", akce);Di2015NewLine    command.Paramaters.AddWithValue("@rocnik", klientClass.Rocnik());Di2015NewLine    // ....Di2015NewLine}Di2015NewLine
18438849Di2015UniqueSeparatorpublic static class DataExtensionsDi2015NewLine{Di2015NewLine    public static string GetSafeString(this SqlDataReader reader, int colIndex)Di2015NewLine    {Di2015NewLine        if (!reader.IsDBNull(colIndex))Di2015NewLine            return reader[colIndex].ToString();Di2015NewLine        elseDi2015NewLine            return string.Empty;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18438849Di2015UniqueSeparator_ub_cen.Text = reader.GetSafeString(59);Di2015NewLine
18439115Di2015UniqueSeparator<input id="theCheckBox" type="checkbox" onchange="DisableRow(this)" />Di2015NewLineDi2015NewLinefunction DisableRow(checkBox)Di2015NewLine{Di2015NewLine   var $trElement= $(checkBox).closest("tr");Di2015NewLine   $trElement.find("input").attr("disabled", "disabled");Di2015NewLine}Di2015NewLine
18439222Di2015UniqueSeparatorMailItem OutlookMail = (MailItem)OutlookApplication.CreateItem(OlItemType.olMailItem);Di2015NewLine
18439222Di2015UniqueSeparatormail item
18439222Di2015UniqueSeparatorOutlookMail
18439265Di2015UniqueSeparator$(document).ready(function(){Di2015NewLine        GetValue();Di2015NewLine        var l_count= parseInt($("#txtcount").val());Di2015NewLineDi2015NewLine        $("#sliderlicense").progressbar({Di2015NewLine            max: 100,Di2015NewLine            value: l_countDi2015NewLine        });Di2015NewLineDi2015NewLine    });Di2015NewLine})Di2015NewLinefunction GetValue() {Di2015NewLine    $.ajax({Di2015NewLine        type: "POST",Di2015NewLine        url: "MyPage.aspx/GetCount", //url to point your webmethod     Di2015NewLine        contentType: "application/json; charset=utf-8",Di2015NewLine        dataType: "json",Di2015NewLine        async:false,Di2015NewLine        success: function (Result) {Di2015NewLine            $("#txtcount").val(Result.d);Di2015NewLine        },Di2015NewLine        error: function () { alert('error'); }Di2015NewLine    });Di2015NewLine}Di2015NewLine
18439349Di2015UniqueSeparatorvar queryOptions = new QueryOptions(CommonFileQuery.DefaultQuery, new[] { ".mp4" });Di2015NewLinequeryOptions.FolderDepth = FolderDepth.Deep;Di2015NewLinevar query = Windows.Storage.KnownFolders.VideosLibrary.CreateFileQueryWithOptions(queryOptions);Di2015NewLinevar files = await query.GetFilesAsync();Di2015NewLine
18439402Di2015UniqueSeparatorTask.WhenAll( new Task[] {Di2015NewLine    Task.Run(()=> { //... do work A1... },Di2015NewLine    Task.Run(()=> { //... do work A2... },Di2015NewLine    Task.Run(()=> { //... do work A3... }})Di2015NewLine    .ContinueWith(()=> {//... do work B... });Di2015NewLine
18439402Di2015UniqueSeparatorTask.Run
18439402Di2015UniqueSeparatorCompleted
18439402Di2015UniqueSeparatorTask.Run
18439402Di2015UniqueSeparatorCompleted
18439402Di2015UniqueSeparatorStoryboard
18439402Di2015UniqueSeparatorpublic static Task<Storyboard> BeginAsync(this Storyboard sb)Di2015NewLine{Di2015NewLine   var tcs = new TaskCompletionSource<Storyboard>();Di2015NewLine   sb.Completed += (s, a) => tcs.TrySetResult(sb);Di2015NewLine   sb.Begin();Di2015NewLine   return tcs.Task;Di2015NewLine}Di2015NewLine
18439402Di2015UniqueSeparatorCompleted
18439402Di2015UniqueSeparatorvar sb1 = (Storyboard)mainWindow.FindResource("Storyboard1");Di2015NewLinevar sb2 = (Storyboard)mainWindow.FindResource("Storyboard2");Di2015NewLinevar sb3 = (Storyboard)mainWindow.FindResource("Storyboard3");Di2015NewLineDi2015NewLineTask.WhenAll( new Task[] {Di2015NewLine    sb1.BeginAsync(),Di2015NewLine    sb2.BeginAsync(),Di2015NewLine    sb3.BeginAsync() })Di2015NewLine    .ContinueWith(() => MessageBox.Show("All done!"),Di2015NewLine        TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine
18439402Di2015UniqueSeparatorTaskScheduler.FromCurrentSynchronizationContext()
18439493Di2015UniqueSeparatornew StreamReader(stream, Encoding.UTF8)) Di2015NewLine
18439493Di2015UniqueSeparatornew StreamReader(stream, Encoding.UTF8, false)) Di2015NewLine
18439493Di2015UniqueSeparatorfalse
18439506Di2015UniqueSeparatorif (this.WindowState == FormWindowState.Minimized)Di2015NewLine      {Di2015NewLine         toolStrip.Visible = true;Di2015NewLine      }Di2015NewLine         elseDi2015NewLine      {Di2015NewLine         toolStrip.Visible = false;Di2015NewLine      }Di2015NewLine
18439506Di2015UniqueSeparatorusing myApplication.Properties;Di2015NewLineprivate void MainForm_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine     {Di2015NewLine         Settings.Default.Visible = toolStrip.Visible ;Di2015NewLine         Settings.Default.Save(); Di2015NewLine     }Di2015NewLine
18439511Di2015UniqueSeparatorRegistries
18439511Di2015UniqueSeparatorpublic class FooRegistry : Registry {Di2015NewLine    public FooRegistry() {Di2015NewLine        For<IFoo>().Use<Foo>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18439511Di2015UniqueSeparatorvar container = new Container(new FooRegistry());Di2015NewLine
18439511Di2015UniqueSeparatorvar container = new Container(x => {Di2015NewLine    x.Scan(scanner =>Di2015NewLine    {Di2015NewLine        scanner.TheCallingAssembly()Di2015NewLine       scanner.LookForRegistries();Di2015NewLine    });Di2015NewLine});Di2015NewLine
18439652Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@cislo1", doc);Di2015NewLine
18439652Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@cislo1", cislo);Di2015NewLine
18439716Di2015UniqueSeparator<GridView Name="searchPanelGrid"  SelectionMode="Single" Di2015NewLine                                HorizontalAlignment="Left"Di2015NewLine                                ScrollViewer.IsHorizontalScrollChainingEnabled="True"Di2015NewLine                                ScrollViewer.IsVerticalScrollChainingEnabled ="True"Di2015NewLine                                ScrollViewer.HorizontalScrollBarVisibility="Auto"Di2015NewLine                                ScrollViewer.VerticalScrollBarVisibility="Auto"Di2015NewLine                                ScrollViewer.HorizontalScrollMode="Enabled"Di2015NewLine                                ScrollViewer.VerticalScrollMode="Enabled"Di2015NewLine                                ItemsSource="{Binding Source={StaticResource CollectionItems}}" Grid.Row="2" SelectionChanged="searchPanelGrid_SelectionChanged">Di2015NewLine        <GridView.ItemsPanel>Di2015NewLine            <ItemsPanelTemplate>Di2015NewLine                <WrapGrid Orientation="Horizontal" />Di2015NewLine            </ItemsPanelTemplate>Di2015NewLine        </GridView.ItemsPanel>Di2015NewLine        <GridView.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <Grid Margin="6" Height="175" Width="150" Background="#FFFAFAFA">Di2015NewLine                    <Grid.RowDefinitions>Di2015NewLine                        <RowDefinition Height="85"/>Di2015NewLine                        <RowDefinition Height="50"/>Di2015NewLine                        <RowDefinition Height="30"/>Di2015NewLine                    </Grid.RowDefinitions>Di2015NewLine                    <StackPanel Background="#FF0A56BF" Width="150" Height="85" Grid.Row="0">Di2015NewLine                        <Image Source="{Binding Path=ThumnailUrl}" Stretch="UniformToFill" HorizontalAlignment="Left" VerticalAlignment="Top"/>Di2015NewLine                    </StackPanel>Di2015NewLine                    <TextBlock Text="{Binding Path=VideoName}" TextWrapping="Wrap" Foreground="#FF017DD5" Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Top" Height="Auto" FontSize="12"/>Di2015NewLine                    <Button x:Name="downloadButton" Grid.Row="3" Content="Download Video" HorizontalAlignment="Left" VerticalAlignment="Bottom" Style="{StaticResource DownloadButtonStyle}" Click="downloadButton_Click" IsEnabled="{Binding IsSelected}" />Di2015NewLine                </Grid>Di2015NewLine            </DataTemplate>Di2015NewLine        </GridView.ItemTemplate>Di2015NewLine    </GridView>Di2015NewLine
18439716Di2015UniqueSeparatorpublic class VideoInfo : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private bool isSelected;Di2015NewLine    public bool IsSelectedDi2015NewLine    {Di2015NewLine        get { return isSelected; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            isSelected = value;Di2015NewLine            NotifyPropertyChanged("IsSelected");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string thumnailUrl;Di2015NewLine    public string ThumnailUrlDi2015NewLine    {Di2015NewLine        get { return thumnailUrl; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            thumnailUrl = value;Di2015NewLine            NotifyPropertyChanged("ThumnailUrl");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string videoName;Di2015NewLine    public string VideoNameDi2015NewLine    {Di2015NewLine        get { return videoName; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            videoName = value;Di2015NewLine            NotifyPropertyChanged("VideoName");Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    private void NotifyPropertyChanged(string info)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine        {Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(info));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18439716Di2015UniqueSeparatorprivate void searchPanelGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine    {Di2015NewLine        MovieInfo info = (e.AddedItems[0]) as MovieInfo;Di2015NewLine        info.IsSelected = true;Di2015NewLine    }Di2015NewLine
18439775Di2015UniqueSeparatorvar message = SQLQueue.Dequeue();Di2015NewLine
18439775Di2015UniqueSeparator// ZMQ Context, server socketDi2015NewLineusing (ZmqContext context = ZmqContext.Create())Di2015NewLineusing (ZmqSocket server = context.CreateSocket(SocketType.REP))Di2015NewLine{Di2015NewLine    server.Bind("tcp://*:5555");Di2015NewLineDi2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        // Wait for next request from clientDi2015NewLine        string message = server.Receive(Encoding.Unicode);Di2015NewLine        ...Di2015NewLine
18439775Di2015UniqueSeparatorBlocking Collection Take
18439905Di2015UniqueSeparatorLabel
18439905Di2015UniqueSeparatorLiteral
18439905Di2015UniqueSeparatorLabel
18439905Di2015UniqueSeparatorLiteral
18439905Di2015UniqueSeparatorLiteral
18439905Di2015UniqueSeparatorLabel
18440160Di2015UniqueSeparatori
18440160Di2015UniqueSeparatorfor (int j = 0; j < map.GetLength(1); j++)Di2015NewLine
18440185Di2015UniqueSeparatordatagrid.ItemsSource = myview.GetList();Di2015NewLine
18440185Di2015UniqueSeparatorprivate void datagrid_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine  objToAdd = datagrid.SelectedItem as clsName; //Entity ObjectDi2015NewLine}Di2015NewLine
18440185Di2015UniqueSeparatorprivate void datagrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            FrameworkElement element1 = datagrid.Columns[0].GetCellContent(e.Row);Di2015NewLine            if (element1.GetType() == typeof(TextBox))Di2015NewLine            {Di2015NewLine                var colomn1 = ((TextBox)element1).Text;Di2015NewLine                objToAdd.Column1 = Convert.ToInt32(Column1);Di2015NewLine            }Di2015NewLine            FrameworkElement element2 = datagrid.Columns[1].GetCellContent(e.Row);Di2015NewLine            if (element2.GetType() == typeof(TextBox))Di2015NewLine            {Di2015NewLine                var colomn2 = ((TextBox)element2).Text;Di2015NewLine                objToAdd.Column2 = Convert.ToInt32(Column2);Di2015NewLine            }Di2015NewLine            FrameworkElement element3 = datagrid.Columns[2].GetCellContent(e.Row);Di2015NewLine            if (element3.GetType() == typeof(TextBox))Di2015NewLine            {Di2015NewLine                var colomn3 = ((TextBox)element3).Text;Di2015NewLine                objToAdd.Column3 = Convert.ToInt32(Column3);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            MessageBox.Show(ex.Message); Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18440185Di2015UniqueSeparatorprivate void datagrid_RowEditEnding(object sender, DataGridRowEditEndingEventArgs e)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            var Res = MessageBox.Show("Do you want to Create this new entry", "Confirm", MessageBoxButton.YesNo);Di2015NewLine            if (Res == MessageBoxResult.Yes)Di2015NewLine            {Di2015NewLine                EntityObject.InsertEmployee(objToAdd);Di2015NewLine                EntityObject.SaveChanges();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            MessageBox.Show(ex.Message); Di2015NewLine        }Di2015NewLine    }Di2015NewLine
18440254Di2015UniqueSeparator// Setting command timeout to 2 minutesDi2015NewLinescGetruntotals.CommandTimeout = 120;Di2015NewLine
18440376Di2015UniqueSeparatorControlTemplate
18440461Di2015UniqueSeparatorWindow
18440461Di2015UniqueSeparatorAddClientView
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorMessenger
18440461Di2015UniqueSeparatorEventAggregator
18440461Di2015UniqueSeparatorAddClientViewModel
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorSuggestedAddresses.Count > 0
18440461Di2015UniqueSeparatorAddClientView
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorAddClientView.xaml.cs
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparator.Show()
18440461Di2015UniqueSeparatorDataContext
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorSuggestedAddressesViewModel
18440461Di2015UniqueSeparatorAddClientViewModel
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorSuggestedAddressesView
18440461Di2015UniqueSeparatorView
18440461Di2015UniqueSeparator.Hide()
18440461Di2015UniqueSeparator.Close()
18440461Di2015UniqueSeparatorMessenger
18440494Di2015UniqueSeparator  if (!l.Contains((dateTimePicker1.Text.ToString().Trim() + ','+ Di2015NewLine    eventNameDeleteTextBox.Text.ToString().Trim()+',')))Di2015NewLine     finalData.Add(l);Di2015NewLine
18440699Di2015UniqueSeparatorDriveInfo[] Drive_info = DriveInfo.GetDrives();Di2015NewLineDi2015NewLineList<string> list = Drive_info.Select(x => x.RootDirectory.FullName).ToList();Di2015NewLine
18440748Di2015UniqueSeparatorusing
18440817Di2015UniqueSeparatorXmlDataProvider
18440817Di2015UniqueSeparatorSource
18440817Di2015UniqueSeparatorXPath
18440817Di2015UniqueSeparatorSource
18440817Di2015UniqueSeparator<TextBlock Text="{Binding Source={StaticResource dataProvider}, XPath='//BLOCK[@id=1]/ITEMS/ITEM[@id=2]/@value'}"/>Di2015NewLine
18440817Di2015UniqueSeparatorDataContext
18440866Di2015UniqueSeparator    TreeNode tn = new TreeNode();Di2015NewLine    if (imageShouldBeFolderImage)Di2015NewLine        tn.ImageIndex = 0;Di2015NewLineDi2015NewLine    // If you want to show another image for other cases, Di2015NewLine    // If you want no image ignore this else partDi2015NewLine    else            Di2015NewLine        tn.ImageIndex = 1;Di2015NewLine
18440866Di2015UniqueSeparatorTreeNode tn = new TreeNode();Di2015NewLineif (imageShouldBeFolderImage)Di2015NewLine{Di2015NewLine    tn.ImageIndex = 0;Di2015NewLine    tn.SelectedImageIndex = 0;Di2015NewLine}Di2015NewLineelseDi2015NewLine{            Di2015NewLine    tn.ImageIndex = 1;//the index of the empty imageDi2015NewLine    tn.SelectedImageIndex = 1;Di2015NewLine}Di2015NewLine
18440983Di2015UniqueSeparatorSystem.Web
18440983Di2015UniqueSeparatorvar decodedXml = System.Web.HttpUtility.UrlDecode(xml);Di2015NewLine
18441078Di2015UniqueSeparatorImage uploaded6 = Image.FromFile("/image/defaultImage.jpg");Di2015NewLine
18441078Di2015UniqueSeparatorImage uploaded6 = Image.FromFile(Server.MapPath("~/image/defaultImage.jpg"));Di2015NewLine
18441131Di2015UniqueSeparatorstring destination = Path.Combine(dir, Path.GetFileName(file));Di2015NewLineDirectory.CreateDirectory(dir);Di2015NewLineFile.Copy(file, destination);Di2015NewLine
18441267Di2015UniqueSeparatorEncoding.GetPreamble()
18441267Di2015UniqueSeparator</p>Di2015NewLineDi2015NewLine<pre><code>        StreamReader sourceStream = new StreamReader(@"C:\\\\Users\\\\L\\\\Desktop\\\\data.xml");Di2015NewLineDi2015NewLine        //Get Preamble and File ContentsDi2015NewLine        byte[] bom = Encoding.Unicode.GetPreamble();Di2015NewLine        byte[] content = Encoding.Unicode.GetBytes(sourceStream.ReadToEnd());Di2015NewLineDi2015NewLine        //Create Destination arrayDi2015NewLine        byte[] fileContents = new Byte[bom.Length + content.Length];Di2015NewLineDi2015NewLine        //Copy arrays into destination appending bom if availableDi2015NewLine        Array.Copy(bom, 0, fileContents, 0, bom.Length);Di2015NewLine        Array.Copy(content, 0, fileContents, bom.Length, content.Length);Di2015NewLineDi2015NewLineDi2015NewLine        request.ContentLength = fileContents.Length;Di2015NewLine        long ftp_vel = request.ContentLength;Di2015NewLine        Stream requestStream = request.GetRequestStream();Di2015NewLine        requestStream.Write(fileContents, 0, fileContents.Length);Di2015NewLine        requestStream.Close();Di2015NewLine        FtpWebResponse response = (FtpWebResponse)request.GetResponse();Di2015NewLine        if (original_vel == ftp_vel)Di2015NewLine        {Di2015NewLine            response.Close();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Odesilani();Di2015NewLine        }Di2015NewLine
18441342Di2015UniqueSeparator private void dataGridView1_CurrentCellDirtyStateChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (dataGridView1.IsCurrentCellDirty)Di2015NewLine        {Di2015NewLine            dataGridView1.CommitEdit(DataGridViewDataErrorContexts.Commit);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)Di2015NewLine    {Di2015NewLine        if (((e.ColumnIndex) == 1) && ((bool)dataGridView1.Rows[e.RowIndex].Cells[1].Value))Di2015NewLine        {Di2015NewLine            MessageBox.Show(dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString());Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
18441422Di2015UniqueSeparatorServerList_SelectionChanged
18441422Di2015UniqueSeparatorreadqueriesObject
18441422Di2015UniqueSeparatorSelectedIndex
18441422Di2015UniqueSeparator-1
18441422Di2015UniqueSeparatorSelectionChanged
18441422Di2015UniqueSeparatorServerList.SelectedItem
18441422Di2015UniqueSeparatornull
18441422Di2015UniqueSeparatorpublic void ServerList_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine    var current = ServerList.SelectedItem as readqueriesObject;Di2015NewLine    if (current != null)Di2015NewLine    {Di2015NewLine        NavigationService.Navigate(new Uri("/singlequery.xaml?selectedItem=" +current.Query_Id , UriKind.Relative));Di2015NewLine        // Reset selected index to -1 (no selection)Di2015NewLine        ServerList.SelectedIndex = -1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18441728Di2015UniqueSeparatorAddMonths
18441728Di2015UniqueSeparatorvar updatedTime = yourDateTime.AddMonths(-1);Di2015NewLine
18441728Di2015UniqueSeparatorAddMonths
18441914Di2015UniqueSeparator<div runat="server" id="divPopup" style="display:none">Di2015NewLine</div>Di2015NewLine
18441914Di2015UniqueSeparatordivPopup.InnerHtml="items.... (with html)";Di2015NewLine
18441914Di2015UniqueSeparator<a class="fancybox" id="inline" href="#divPopup">Show Popup</a>Di2015NewLine
18441914Di2015UniqueSeparator<!-- Add jQuery library -->Di2015NewLine<script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script>Di2015NewLineDi2015NewLine<!-- Add mousewheel plugin (this is optional) -->Di2015NewLine<script type="text/javascript" src="/fancybox/lib/jquery.mousewheel-3.0.6.pack.js"></script>Di2015NewLineDi2015NewLine<!-- Add fancyBox -->Di2015NewLine<link rel="stylesheet" href="/fancybox/source/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />Di2015NewLine<script type="text/javascript" src="/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>Di2015NewLineDi2015NewLine<!-- Optionally add helpers - button, thumbnail and/or media -->Di2015NewLine<link rel="stylesheet" href="/fancybox/source/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen" />Di2015NewLine<script type="text/javascript" src="/fancybox/source/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>Di2015NewLine<script type="text/javascript" src="/fancybox/source/helpers/jquery.fancybox-media.js?v=1.0.6"></script>Di2015NewLineDi2015NewLine<link rel="stylesheet" href="/fancybox/source/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen" />Di2015NewLine<script type="text/javascript" src="/fancybox/source/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>Di2015NewLine
18441939Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        stringDi2015NewLine            input = "Hello World!",Di2015NewLine            keyword = "Hello";Di2015NewLineDi2015NewLine        var result = RegexDi2015NewLine            .Replace(input, keyword, m => Di2015NewLine                String.Format("<b>{0}</b>", m.Value));Di2015NewLine        Console.WriteLine(result);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18442223Di2015UniqueSeparator@Html.Partial("_MyTemplate",ViewBag.Data)
18442573Di2015UniqueSeparatort.Field<string>("db_code").ToString()Di2015NewLine
18442573Di2015UniqueSeparatort.Field<short>("db_code").ToString()Di2015NewLine
18442573Di2015UniqueSeparatort.Field<Int16>("db_code").ToString()Di2015NewLine
18442578Di2015UniqueSeparatorprint.PrintDocument(FixedDocument.DocumentPaginator, "Print")Di2015NewLine
18442578Di2015UniqueSeparator PrintQueue selectedPrntQueue = printDialog.PrintQueue;     Di2015NewLine XpsDocumentWriter writer = PrintQueue.CreateXpsDocumentWriter(selectedPrntQueue);Di2015NewLine SerializerWriterCollator collator = writer.CreateVisualsCollator();Di2015NewLine collator.BeginBatchWrite();Di2015NewLine var paginator = FixedDocument.DocumentPaginator;Di2015NewLine FixedPage fixedPage = paginator.GetFixedPage(printedPageCount)Di2015NewLine ContainerVisual newPage = new ContainerVisual();Di2015NewLine Size sz = new Size(pageSize.Height.Value, pageSize.Width.Value);Di2015NewLine fixedPage.Measure(sz);Di2015NewLine fixedPage.Arrange(new Rect(new Point(), sz));Di2015NewLine fixedPage.UpdateLayout();Di2015NewLine newPage.Children.Add(fixedPage);Di2015NewLine collator.Write(newPage);Di2015NewLine
18442826Di2015UniqueSeparatorEnvironment.OSVersion.Platform
18443024Di2015UniqueSeparatortestcase
18443024Di2015UniqueSeparatortc.name = node.SelectSingleNode("name").InnerText;Di2015NewLinetc.date = node.SelectSingleNode("date").InnerText;Di2015NewLinetc.sub = node.SelectSingleNode("subject").InnerText;Di2015NewLine
18443024Di2015UniqueSeparatorvar testCases = nodelistDi2015NewLine    .Cast<XmlNode>()Di2015NewLine    .Select(x => new CommonLib.TestCase()Di2015NewLine    {Di2015NewLine        name = x.SelectSingleNode("name").InnerText,Di2015NewLine        date = x.SelectSingleNode("date").InnerText,Di2015NewLine        sub = x.SelectSingleNode("subject").InnerTextDi2015NewLine    })Di2015NewLine    .ToList();Di2015NewLine
18443116Di2015UniqueSeparatorDataGridView.AutoGenerateColumns
18443116Di2015UniqueSeparatorDataSource
18443116Di2015UniqueSeparatorDatagridView
18443116Di2015UniqueSeparatorform_Load
18443116Di2015UniqueSeparatorform_Load
18443116Di2015UniqueSeparatorDataGridView.DataBindingComplete
18443202Di2015UniqueSeparator// Define out custom delegate for eventDi2015NewLinepublic delegate void StringEventHandler(String^ /*msg*/);Di2015NewLineDi2015NewLineref class WrapperClass{Di2015NewLine  // ... rest of class declaration ...Di2015NewLinepublic:Di2015NewLine   event StringEventHandler^ MyEvent;Di2015NewLine  // ...Di2015NewLine}Di2015NewLine
18443202Di2015UniqueSeparator// ... codeDi2015NewLinevoid WrapperClass::callback(char* msg)Di2015NewLine{Di2015NewLine   // Our method to marshal to String from char*Di2015NewLine   String^ managedString = NativeString2ManagedString(char* msg);Di2015NewLineDi2015NewLine   // Call the event delegateDi2015NewLine   MyEvent(managedString);Di2015NewLine}Di2015NewLine// ... more codeDi2015NewLine
18443202Di2015UniqueSeparator// c++/cliDi2015NewLinewrapperClassInstance->MyEvent += gcnew StringEventHandler(obj, OtherClass::Method);Di2015NewLine// c#Di2015NewLinewrapperClassInstance.MyEvent += obj.Method;Di2015NewLine
18443210Di2015UniqueSeparatorfor (int i = 0; i < comboBox1.Items.Count; i++)Di2015NewLine{Di2015NewLine     string value = ComboBox.GetItemText(comboBox1.Items[i]); Di2015NewLine}Di2015NewLine
18443222Di2015UniqueSeparatorawait
18443222Di2015UniqueSeparatorGetStringAsync
18443505Di2015UniqueSeparatorUri MyUrl = Request.UrlReferrer;Di2015NewLineConsole.WriteLine(MyUrl);Di2015NewLineResponse.Write("Referrer URL : " + MyUrl.AbsolutePath);Di2015NewLine
18443505Di2015UniqueSeparatorNullReferenceException
18443505Di2015UniqueSeparatorMyUrl
18443505Di2015UniqueSeparatornull
18443505Di2015UniqueSeparatorUrlReferer
18443505Di2015UniqueSeparatorUri MyUrl = Request.UrlReferrer;Di2015NewLineConsole.WriteLine(MyUrl);Di2015NewLineif (MyUrl != null)Di2015NewLine   Response.Write("Referrer URL : " + MyUrl.AbsolutePath);Di2015NewLine
18443505Di2015UniqueSeparatorUrlReferer
18443505Di2015UniqueSeparatornull
18443505Di2015UniqueSeparatorResponse.Redirect
18443558Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!IsPostBack)Di2015NewLine    {Di2015NewLine       LoadCountriesInDropDown(ddlCountry);Di2015NewLine       ddlCountry.SelectedValue = "5" //For eg:Di2015NewLine       LoadCitiesByCountrySelected(ddlCity, ddlCountry.SelectedValue);  // selected country value was set here as 5Di2015NewLine       ddlCountry_SelectedIndexChanged(null, null);Di2015NewLine    }Di2015NewLine}Di2015NewLineprotected void ddlCountry_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(ddlCountry.SelectedItem.Text == "Select")Di2015NewLine    {Di2015NewLine        ddlCity.Items.Clear();Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        LoadCitiesByCountrySelected(ddlCity, ddlCountry.SelectedValue);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
18443686Di2015UniqueSeparator<configuration>Di2015NewLine<connectionStrings>Di2015NewLine    <add name="DSVUShort" connectionString="Data Source=.\\SQLEXPRESS;AttachDbFilename=|DataDirectory|\\Database.mdf;Integrated Security=True;User Instance=True" providerName="System.Data.SqlClient"/>Di2015NewLine</connectionStrings>Di2015NewLine<system.web>Di2015NewLine    <compilation debug="true" targetFramework="4.0"/>Di2015NewLine</system.web>Di2015NewLine
18443686Di2015UniqueSeparatorSqlConnection Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DSVUShort"].ToString());  Di2015NewLineConnection.Open();Di2015NewLine
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator(?<!\\?)\\+Di2015NewLine
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator??+
18443738Di2015UniqueSeparator???+
18443738Di2015UniqueSeparator????+
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator+
18443738Di2015UniqueSeparator?
18443738Di2015UniqueSeparator(?<!(^|[^?])(\\?\\?)*\\?)\\+Di2015NewLine
18443766Di2015UniqueSeparatorif (richTextBox1.SelectionLength > 0)Di2015NewLine// Copy the selected text to the ClipboardDi2015NewLineClipboard.SetText(richTextBox1.SelectedText, TextDataFormat.Text);Di2015NewLine
18443848Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    var p1 = Person.Single(x => x.Id == 1);Di2015NewLine    p1.Name = "Test";Di2015NewLine    SaveChanges();Di2015NewLine}Di2015NewLine
18443898Di2015UniqueSeparatorstring abs = "X:/A/B/Q";Di2015NewLinestring rel = "../../B/W";Di2015NewLinevar path = Path.GetFullPath(Path.Combine(abs,rel));Di2015NewLine
18443949Di2015UniqueSeparatorusing(var wc = new WebClient())Di2015NewLine{Di2015NewLine    wc.UploadData("http://scriptlocation.html", "POST", data);Di2015NewLine}Di2015NewLine
18444043Di2015UniqueSeparatorGroupBy
18444043Di2015UniqueSeparatorvar results = db.TableName.GroupBy(x => new { x.Room, x.ObjectCode })Di2015NewLine                          .Select(g => new { g.Key.Room, g.Key.ObjectCode, Count = g.Sum(x => x.Code) })Di2015NewLine                          .ToList();Di2015NewLine
18444154Di2015UniqueSeparatorSystem.Threading.Timer _timeoutTimer;Di2015NewLine//...Di2015NewLineint timeout = (int)TimeSpan.FromSeconds(1).TotalMilliseconds;Di2015NewLine_timeoutTimer = new System.Threading.Timer(OnTimerElapsed, Di2015NewLine    null, timeout, System.Threading.Timeout.Infinite);Di2015NewLine//...Di2015NewLinevoid OnTimerElapsed(object state) {Di2015NewLine     // do somethingDi2015NewLine    _timeoutTimer.Dispose();Di2015NewLine}Di2015NewLine
18444158Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e) {Di2015NewLineDi2015NewLine{Di2015NewLine   if(!IsPostBack)Di2015NewLine    {Di2015NewLine    if (Session["beachBach"] != null)Di2015NewLine    {Di2015NewLineDi2015NewLine        numberOfBeachBookingInteger += 1;Di2015NewLine       beachBachLabel.Text = numberOfBeachBookingInteger.ToString();Di2015NewLineDi2015NewLine    }Di2015NewLine  }Di2015NewLine
18444221Di2015UniqueSeparatorPoint point = chart.View.Axes[2].PointToData(e.GetPosition(chart))Di2015NewLine
18444540Di2015UniqueSeparatorstring pattern = @"^[^\\[\\]]*" +Di2015NewLine                @"(" +Di2015NewLine                @"((?'Open'\\[)[^\\[\\]]*)+" +Di2015NewLine                @"((?'Close-Open'\\])[^\\[\\]]*)+" +Di2015NewLine                @")*" +Di2015NewLine                @"(?(Open)(?!))$";Di2015NewLineDi2015NewLinevar results =Di2015NewLine    Regex.Match(input, pattern)Di2015NewLine    .Groups["Close"].ValueDi2015NewLine    .Split(new char[] { '=', ',' });Di2015NewLine
18444540Di2015UniqueSeparatorSalespersonDi2015NewLine"James Almond"Di2015NewLineAreaDi2015NewLine"Europe "Area 1" (Germany)"Di2015NewLineAreaDi2015NewLine"North America"Di2015NewLineAreaDi2015NewLine"North America [Level A]"Di2015NewLine
18444570Di2015UniqueSeparatorpublic byte[] imageToByteArray(System.Drawing.Image imageIn)Di2015NewLine{Di2015NewLine    MemoryStream ms = new MemoryStream();Di2015NewLine    imageIn.Save(ms,System.Drawing.Imaging.ImageFormat.Gif);Di2015NewLine    return  ms.ToArray();Di2015NewLine}Di2015NewLine
18444570Di2015UniqueSeparator byte[] bytes = File.ReadAllBytes("imagepath");Di2015NewLine
18444724Di2015UniqueSeparatorIsReadOnly
18444724Di2015UniqueSeparator<DataGridTemplateColumn>Di2015NewLine    <DataGridTemplateColumn.CellTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBlock Text="{Binding Path=myProperty}" />Di2015NewLine        </DataTemplate>Di2015NewLine    </DataGridTemplateColumn.CellTemplate>Di2015NewLine    <DataGridTemplateColumn.CellEditingTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <TextBox IsEnabled="{Binding Path=myBool}" Text="{Binding Path=myProperty, Mode=TwoWay}" />Di2015NewLine        </DataTemplate>Di2015NewLine    </DataGridTemplateColumn.CellEditingTemplate>Di2015NewLine</DataGridTemplateColumn>Di2015NewLine
18444804Di2015UniqueSeparatordbContext.Database.ExecuteSqlCommand("DELETE FROM AB WHERE (A_UID = 1)");Di2015NewLine
18444804Di2015UniqueSeparatorClear
18444804Di2015UniqueSeparatorvar tempA = new A { UID = 1, B = new List<B>() }Di2015NewLinetempA.B.Add(new B { UID = 2 });Di2015NewLineDi2015NewLineusing (var dbContext = new MyContext())Di2015NewLine{Di2015NewLine    dbContext.A.Attach(tempA);Di2015NewLine    tempA.B.Clear();Di2015NewLine    dbContext.SaveChanges();Di2015NewLine}Di2015NewLine
18444929Di2015UniqueSeparatortrue
18444929Di2015UniqueSeparatorfalse
18444929Di2015UniqueSeparatornull
18444929Di2015UniqueSeparatorbool?
18444929Di2015UniqueSeparatorXmlSerializer
18444929Di2015UniqueSeparatori:nil="true"
18444929Di2015UniqueSeparatornull
18444929Di2015UniqueSeparatornull
18444955Di2015UniqueSeparatorvar
18444955Di2015UniqueSeparator //var thisChannel = XmlDeserializeFromString(XMLString, typeof(Channel));Di2015NewLine Channel thisChannel = XmlDeserializeFromString(XMLString, typeof(Channel));Di2015NewLine
18444955Di2015UniqueSeparatorobject XmlDeserializeFromString()
18444955Di2015UniqueSeparator Channel thisChannel = XmlDeserializeFromString<Channel>(XMLString);Di2015NewLine
18445283Di2015UniqueSeparatorRowKey
18445283Di2015UniqueSeparatorPartition Boundary
18445283Di2015UniqueSeparatorFiddler
18445315Di2015UniqueSeparatorBaseFont
18445315Di2015UniqueSeparatorvar arialFontPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "ARIALUNI.TTF");Di2015NewLinevar arialBaseFont = BaseFont.CreateFont(arialFontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);Di2015NewLine
18445315Di2015UniqueSeparatorpdfFormFields.SetFieldProperty("position", "textfont", arialBaseFont, null);Di2015NewLine
18445315Di2015UniqueSeparatorpdfFormFields.AddSubstitutionFont(arialBaseFont);Di2015NewLine
18445328Di2015UniqueSeparatorstring userName = "Name";Di2015NewLinestring password = "Password";Di2015NewLinevar proxy = new TokenServiceClient();Di2015NewLinevar token = proxy.issueToken(userName, password);Di2015NewLineproxy.Close();Di2015NewLine
18445351Di2015UniqueSeparatorpublic List<string> myList {get; private set;}Di2015NewLine
18445370Di2015UniqueSeparatorROWNUMBER BETWEEN ((Page - 1) * PageSize) + 1 AND Page * PageSize
18445370Di2015UniqueSeparator.Skip((Page - 1) * PageSize).Take(PageSize)
18445398Di2015UniqueSeparatorexecuteScalar()
18445398Di2015UniqueSeparatorOpen()
18445398Di2015UniqueSeparatorDispose()
18445398Di2015UniqueSeparatorusing
18445446Di2015UniqueSeparatorvar task = myReq.GetResponseAsync();Di2015NewLine
18445446Di2015UniqueSeparatorpublic Task<HttpWebResponse> GetAsync(HttpWebRequest req)Di2015NewLine{Di2015NewLine    var tcs = new TaskCompletionSource<HttpWebResponse>();Di2015NewLine    req.BeginGetResponse(e =>Di2015NewLine        {Di2015NewLine            if(e.IsCompleted)Di2015NewLine                tcs.TrySetResult((HttpWebResponse)req.EndGetResponse(e));Di2015NewLine        }, null);Di2015NewLine    return tcs.Task;Di2015NewLine}Di2015NewLine
18445693Di2015UniqueSeparatorPerson
18445693Di2015UniqueSeparatorINotifyPropertyChanged
18445693Di2015UniqueSeparatorPropertyChanged
18445693Di2015UniqueSeparatorSalary
18445693Di2015UniqueSeparatorPropertyChanged
18445693Di2015UniqueSeparatorCalculatedProperty
18445693Di2015UniqueSeparatorvoid PersonPropertyChanged(object sender, PropertyChangedEventArgs e)Di2015NewLine{Di2015NewLine    if(e.PropertyName == "Salary")Di2015NewLine        OnPropertyChanged("CalculatedProperty");Di2015NewLine}Di2015NewLine
18445693Di2015UniqueSeparatorprivate Person _person;Di2015NewLinepublic Person PersonDi2015NewLine{Di2015NewLine    get { return _person; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (Equals(value, _person)) return;Di2015NewLineDi2015NewLine        if (_person != null)Di2015NewLine            _person.PropertyChanged -= PersonPropertyChanged;Di2015NewLineDi2015NewLine        _person = value;Di2015NewLineDi2015NewLine        if(_person != null)Di2015NewLine            _person.PropertyChanged += PersonPropertyChanged;Di2015NewLineDi2015NewLine        OnPropertyChanged("Person");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18445736Di2015UniqueSeparatormd
18445736Di2015UniqueSeparatorcp
18445736Di2015UniqueSeparatoro.cp.Companylist
18445736Di2015UniqueSeparatoro.cp
18445736Di2015UniqueSeparatorCreate()
18445736Di2015UniqueSeparatorMyData
18445736Di2015UniqueSeparatorCompany
18445736Di2015UniqueSeparatorViewModel
18445736Di2015UniqueSeparatorpublic class ViewModelDi2015NewLine{Di2015NewLine    public ViewModel()Di2015NewLine    {Di2015NewLine         this.md = new Mydata();Di2015NewLine         this.cp = new Company();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Mydata md { get; set; }Di2015NewLine    public Company cp { get; set; }Di2015NewLine}Di2015NewLine
18445829Di2015UniqueSeparatorawait
18445829Di2015UniqueSeparatorasync
18445829Di2015UniqueSeparatorawait
18445829Di2015UniqueSeparatorWriteStartDocumentAsync
18445829Di2015UniqueSeparatorawait
18445829Di2015UniqueSeparatorTask
18445829Di2015UniqueSeparatorasync
18445829Di2015UniqueSeparatorTask
18445829Di2015UniqueSeparatorWriteStartDocumentAsync
18445829Di2015UniqueSeparatorasync
18445829Di2015UniqueSeparatorawait
18445829Di2015UniqueSeparatorasync
18445829Di2015UniqueSeparatorTask
18445829Di2015UniqueSeparatorasync
18445829Di2015UniqueSeparatorawait
18445830Di2015UniqueSeparator    sm.SelectedRows.Add(new SelectedRow(id));Di2015NewLine
18445830Di2015UniqueSeparatorid
18445860Di2015UniqueSeparator==
18445860Di2015UniqueSeparator=
18445860Di2015UniqueSeparatorSession["beachBach"] = bachRadioButtonList.SelectedValue == "Beach bach";Di2015NewLineSession["bushBach"] = bachRadioButtonList.SelectedValue == "Bush bach";Di2015NewLine
18445860Di2015UniqueSeparatorSelectedValue
18445860Di2015UniqueSeparator==
18445860Di2015UniqueSeparatortrue
18445860Di2015UniqueSeparatorfalse
18445860Di2015UniqueSeparator1
18445860Di2015UniqueSeparator0
18445860Di2015UniqueSeparatorbool
18445860Di2015UniqueSeparator(condition) ? (true) : (false)
18445860Di2015UniqueSeparatorSession["beachBach"] = bachRadioButtonList.SelectedValue == "Beach bach" ? 1 : 0;Di2015NewLineSession["bushBach"] = bachRadioButtonList.SelectedValue == "Bush bach" ? 1 : 0;Di2015NewLine
18445984Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLineclass CalculatorButton : Button, IMessageFilter {Di2015NewLine    public string Digit { get; set; }Di2015NewLineDi2015NewLine    protected override void OnClick(EventArgs e) {Di2015NewLine        var box = lastFocused as TextBoxBase;Di2015NewLine        if (box != null) {Di2015NewLine            box.AppendText(this.Digit);Di2015NewLine            box.SelectionStart = box.Text.Length;Di2015NewLine            box.Focus();Di2015NewLine        }Di2015NewLine        base.OnClick(e);Di2015NewLine    }Di2015NewLine    protected override void OnHandleCreated(EventArgs e) {Di2015NewLine        if (!this.DesignMode) Application.AddMessageFilter(this);Di2015NewLine        base.OnHandleCreated(e);Di2015NewLine    }Di2015NewLine    protected override void OnHandleDestroyed(EventArgs e) {Di2015NewLine        Application.RemoveMessageFilter(this);Di2015NewLine        base.OnHandleDestroyed(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    bool IMessageFilter.PreFilterMessage(ref Message m) {Di2015NewLine        var focused = this.FindForm().ActiveControl;Di2015NewLine        if (focused != null && focused.GetType() != this.GetType()) lastFocused = focused;Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    private Control lastFocused;Di2015NewLine}Di2015NewLine
18446057Di2015UniqueSeparator<asp:Label ID="lblContent" runat="server" CssClass="nostyle" Di2015NewLine                        Text='<%# string.Format("{0}",Eval("New_Content").ToString().Length>150?string.Format("<a href=news.aspx?page=3#{0}>{1}</a>",Eval("New_Id"),string.Format("{0} {1}",Eval("New_Content").ToString().PadRight(150).Substring(0,Eval("New_Content").ToString().PadRight(150).Substring(0,150).LastIndexOf(" ")>-1 ? Eval("New_Content").ToString().PadRight(150).Substring(0,150).LastIndexOf(" "): 150).ToString(), " ...")):Eval("New_Content")) %>' >Di2015NewLine                    </asp:Label>Di2015NewLine
18446060Di2015UniqueSeparatorstartTimeStamp
18446060Di2015UniqueSeparatorTimeSpan
18446060Di2015UniqueSeparatorDateTime.Ticks
18446060Di2015UniqueSeparatorStopWatch
18446060Di2015UniqueSeparatorDateTime.Ticks
18446060Di2015UniqueSeparatorstartTimeStamp
18446060Di2015UniqueSeparatorStopwatch.GetTimeStamp()
18446060Di2015UniqueSeparatorstartTimeStamp
18446060Di2015UniqueSeparatorStopwatch.GetTimeStamp() - stopwatch.GetRawElapsedTicks() Di2015NewLine
18446086Di2015UniqueSeparatoryourTextBox.Text = yourDataGridView.SelectedRows[0].Cells["Title"].Value.ToString();Di2015NewLineyourTextBox2.Text = yourDataGridView.SelectedRows[0].Cells["ISBN"].Value.ToString();Di2015NewLine
18446092Di2015UniqueSeparatorRecordCompetitionTitleBuilderIndividual.set_EventDataDi2015NewLine
18446165Di2015UniqueSeparatorname="num@(i)"Di2015NewLine
18446216Di2015UniqueSeparatorid
18446216Di2015UniqueSeparatoraction
18446241Di2015UniqueSeparator    <add name="DefaultConnection" connectionString="Data Source=(LocalDb)\\v11.0;Initial Catalog=mydb;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\\mydbmdf" providerName="System.Data.SqlClient" />Di2015NewLine
18446241Di2015UniqueSeparator <connectionStrings>Di2015NewLine    <add name="DefaultConnection" connectionString="Data Source=xxx.database.windows.net,1433;Initial Catalog=xxx;User Id=xxx@xxx;Password=xxx;" providerName="System.Data.SqlClient" xdt:Transform="Replace"/>Di2015NewLine </connectionStrings>Di2015NewLine
18446243Di2015UniqueSeparatorl
18446243Di2015UniqueSeparatorforeach loop
18446243Di2015UniqueSeparatorforeach (var l in line)Di2015NewLine{Di2015NewLine    if (l.Contains(eventName))Di2015NewLine    {Di2015NewLine        string temp = l;Di2015NewLine        int start = l.IndexOf(eventName);Di2015NewLine        temp = temp.Remove(start, eventName.Length);Di2015NewLine        temp = temp.Insert(start, newNameTextBox.Text.ToString());Di2015NewLine        lines.Add(temp);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        lines.Add(l);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18446324Di2015UniqueSeparatormyMsgBox.Close() Di2015NewLineDi2015NewLineorDi2015NewLineDi2015NewLinemyMsgBox.Hide() Di2015NewLine
18446392Di2015UniqueSeparatorpublic ControlsTypeHere PrintImages(int take, int skip)Di2015NewLine{Di2015NewLine    int filesPrinted;Di2015NewLineDi2015NewLine    for (int i = skip; i < Files.Count; i++)Di2015NewLine    {Di2015NewLine        if(filesPrinted >= take)Di2015NewLine            break;Di2015NewLineDi2015NewLine        HtmlImage image=new HtmlImage();Di2015NewLine        image.ID="ImageAN"+i.ToString();Di2015NewLine        image.Src=Files[i].ToString();Di2015NewLine        image.Alt="PrintImage";Di2015NewLine        image.Attributes.Add("class","PrintImage");Di2015NewLineDi2015NewLine        div_Print.Controls.Add(image);Di2015NewLineDi2015NewLine        filesPrinted++;Di2015NewLine    }Di2015NewLineDi2015NewLine    return div_Print.Controls;Di2015NewLine}Di2015NewLine
18446471Di2015UniqueSeparator<hr />
18446471Di2015UniqueSeparator<asp:Repeater runat="server" ID="rp">Di2015NewLine<SeparatorTemplate>Di2015NewLine    <hr />Di2015NewLine</SeparatorTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
18446648Di2015UniqueSeparator(1) Transform the tile back to the origin.Di2015NewLine(2) Perform rotation.Di2015NewLine(3) Transform back to original position.Di2015NewLine
18446805Di2015UniqueSeparatorInclude
18446805Di2015UniqueSeparatorExecute
18446805Di2015UniqueSeparatorInclude
18446805Di2015UniqueSeparatorIQueryable<T>
18446805Di2015UniqueSeparatorIQueryable<T>
18446805Di2015UniqueSeparatorWhere
18446805Di2015UniqueSeparatorInclude
18446805Di2015UniqueSeparatorObjectQuery<T>
18446805Di2015UniqueSeparatorObjectQuery<T>
18446805Di2015UniqueSeparatorExecute
18446805Di2015UniqueSeparatorObjectQuery<T>
18446805Di2015UniqueSeparatorIQueryable<T>
18446805Di2015UniqueSeparatorIQueryable
18446916Di2015UniqueSeparatorprivate void SomeMethod()Di2015NewLine{Di2015NewLine   Task.Factory.StartNew(() =>Di2015NewLine        {Di2015NewLine                       /// do all your logic hereDi2015NewLineDi2015NewLine                       //Update Text on the UI thread Di2015NewLine                       Application.Current.Dispatcher.BeginInvoke( DispatcherPriority.Input,Di2015NewLine                      new Action(() => { statusTextBox.Text = "newValue";}));Di2015NewLineDi2015NewLine                       //continue with the rest of the logic that take a long timeDi2015NewLine                    });Di2015NewLine
18447108Di2015UniqueSeparator<asp:Parameter Name="ParameterID" Type="Int32" />
18447108Di2015UniqueSeparatorComboBox
18447108Di2015UniqueSeparatorprotected function Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  SQL1.SelectParameters["ParameterID"].DefaultValue = 12;Di2015NewLine  ComboBox1.DataSource = SQL1.Select(DataSourceSelectArguments.Empty);Di2015NewLine  ComboBox1.DataBind();Di2015NewLine}Di2015NewLine
18447108Di2015UniqueSeparator<asp:SessionParameter>
18447108Di2015UniqueSeparator<asp:ControlParameter Name="ParameterID" Type=Int32" ...
18447108Di2015UniqueSeparatorSession
18447108Di2015UniqueSeparatorControl
18447296Di2015UniqueSeparator(?<![""'])\\b[a-zA-Z]\\w+\\.[a-zA-Z_]\\w*\\b(?![""'])Di2015NewLine
18447296Di2015UniqueSeparator@
18447296Di2015UniqueSeparatorformula = Regex.Replace(formula, @"(?<![""'])\\b[a-zA-Z]\\w+\\.[a-zA-Z_]\\w*\\b(?![""'])", "field(\\"$0\\")");Di2015NewLine
18447296Di2015UniqueSeparator(?<![""'])
18447296Di2015UniqueSeparator(?![""'])
18447305Di2015UniqueSeparatorGroupBy
18447305Di2015UniqueSeparatorvar commonDestinations = list.GroupBy(move => move.Destination)Di2015NewLine    .Where(group => group.Count() > 1); //not sure if you want this line; you can omit if desiredDi2015NewLineDi2015NewLinevar commonSources = list.GroupBy(move => move.Source)Di2015NewLine    .Where(group => group.Count() > 1);Di2015NewLine
18447350Di2015UniqueSeparatorfrom c in DepartmentMasterDi2015NewLinejoin b in DepartmentDetailDi2015NewLine    on (a.ID ?? 0) equals (b.ID ?? 0)Di2015NewLineselect new {Di2015NewLine    a.Code, b.NameDi2015NewLine}Di2015NewLine
18447350Di2015UniqueSeparatorSELECT [t0].[Code], [t1].[Name] AS [ID1]Di2015NewLineFROM [DepartmentMaster] AS [t0]Di2015NewLineINNER JOIN [DepartmentDetail] AS [t1] Di2015NewLine    ON (COALESCE([t0].[ID],@p0)) = (COALESCE([t1].[ID],@p1))Di2015NewLine
18447350Di2015UniqueSeparatorISNULL
18447558Di2015UniqueSeparatorOpacity
18447558Di2015UniqueSeparatorImageOpened
18447558Di2015UniqueSeparatorOpacity
18447558Di2015UniqueSeparator<DataTemplate>Di2015NewLine    <Image Source="{Binding}" Opacity="0" ImageOpened="OnImageOpened"/>Di2015NewLine</DataTemplate>Di2015NewLine
18447558Di2015UniqueSeparatorImageOpened
18447558Di2015UniqueSeparatorprivate void OnImageOpened(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    var opacityAnimation = new DoubleAnimationDi2015NewLine    {Di2015NewLine        To = 1,Di2015NewLine        Duration = TimeSpan.FromSeconds(1)Di2015NewLine    };Di2015NewLineDi2015NewLine    Storyboard.SetTarget(opacityAnimation, (DependencyObject)sender);Di2015NewLine    Storyboard.SetTargetProperty(opacityAnimation,Di2015NewLine                                 new PropertyPath(Image.OpacityProperty));Di2015NewLineDi2015NewLine    var storyboard = new Storyboard();Di2015NewLine    storyboard.Children.Add(opacityAnimation);Di2015NewLine    storyboard.Begin();Di2015NewLine}Di2015NewLine
18447638Di2015UniqueSeparatorprivate void dataGridView1_KeyDown(Object sender, System.Windows.Forms.KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Enter)Di2015NewLine    {Di2015NewLine        if (shortMode)Di2015NewLine        {Di2015NewLine            dataGridView1.Rows[curRow].DefaultCellStyle.Format = ""; //Number with all the decimalsDi2015NewLine            shortMode = false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            dataGridView1.Rows[curRow].DefaultCellStyle.Format = "P1"; //Number as percentage with 1 decimalDi2015NewLine            shortMode = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18447638Di2015UniqueSeparatorshortMode
18447638Di2015UniqueSeparatorcurRow
18447695Di2015UniqueSeparatordgvWell.Items;Di2015NewLine
18447695Di2015UniqueSeparatorpublic class DataGridSampleViewModelDi2015NewLine{Di2015NewLine    public ObservableCollection<Step2Data> Data { get; set; }Di2015NewLine    public ICommand AddItemCommand { get; set; }Di2015NewLineDi2015NewLine    public DataGridSampleViewModel()Di2015NewLine    {Di2015NewLine        Data = new ObservableCollection<Step2Data>();Di2015NewLineDi2015NewLine        AddItemCommand = new ActionCommandDi2015NewLine        {Di2015NewLine            ExecuteDelegate = o => Data.Add(new Step2Data { LayerName = DateTime.Now.Ticks.ToString() })Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
18447695Di2015UniqueSeparatorpublic partial class DataGridSampleView : WindowDi2015NewLine{Di2015NewLine    public DataGridSampleView()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        this.DataContext = new DataGridSampleViewModel();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18447695Di2015UniqueSeparator<Window x:Class="SimpleMVVMApp.DataGridSampleView"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine        xmlns:simpleMvvmApp="clr-namespace:SimpleMVVMApp"Di2015NewLine        mc:Ignorable="d"Di2015NewLine        Title="DataGridSampleView" Height="300" Width="300" Di2015NewLine        d:DataContext="{d:DesignInstance simpleMvvmApp:DataGridSampleViewModel}">Di2015NewLine    <StackPanel>Di2015NewLine        <Button Content="Add new item" Command="{Binding AddItemCommand}" />Di2015NewLine        <ListBox ItemsSource="{Binding Data}">Di2015NewLine            <ListBox.ItemTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <TextBlock Text="{Binding LayerName}" />Di2015NewLine                </DataTemplate>Di2015NewLine            </ListBox.ItemTemplate>Di2015NewLine        </ListBox>Di2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
18447899Di2015UniqueSeparatorIsEnabled
18447899Di2015UniqueSeparatorSomeCommand
18447899Di2015UniqueSeparator[ValueConversion(typeof(object), typeof(bool))]Di2015NewLinepublic class NullToBooleanConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        return value !== null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotSupportedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18447968Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        int count = 1;Di2015NewLineDi2015NewLine        // First run for JIT warm-upDi2015NewLine        IsNullOrEmpty(null, count);Di2015NewLine        TestEqualsEmpty(null, count);Di2015NewLine        TestLengthZero(null, count);Di2015NewLineDi2015NewLine        count = 1000000000;Di2015NewLineDi2015NewLine        Console.WriteLine("Case 1: s == \\"test\\"");Di2015NewLine        RunTests("test", count);Di2015NewLineDi2015NewLine        Console.WriteLine("Case 2: s == null");Di2015NewLine        RunTests(null, count);Di2015NewLineDi2015NewLine        Console.WriteLine("Case 3: s == \\"\\"");Di2015NewLine        RunTests("", count);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void RunTests(string s, int count)Di2015NewLine    {Di2015NewLine        var ts = IsNullOrEmpty(s, count);Di2015NewLine        Console.WriteLine("\\tIsNullOrEmpty:         {0}", ts);Di2015NewLineDi2015NewLine        ts = TestLengthZero(s, count);Di2015NewLine        Console.WriteLine("\\tTest if s.Length == 0: {0}", ts);Di2015NewLineDi2015NewLine        ts = TestEqualsEmpty(s, count);Di2015NewLine        Console.WriteLine("\\tTest if s == \\"\\":       {0}", ts);Di2015NewLine    }Di2015NewLineDi2015NewLine    static TimeSpan IsNullOrEmpty(string s, int count)Di2015NewLine    {Di2015NewLine        var sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            if (string.IsNullOrEmpty(s))Di2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        return sw.Elapsed;Di2015NewLine    }Di2015NewLineDi2015NewLine    static TimeSpan TestLengthZero(string s, int count)Di2015NewLine    {Di2015NewLine        var sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            if (s == null || s.Length == 0)Di2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        return sw.Elapsed;Di2015NewLine    }Di2015NewLineDi2015NewLine    static TimeSpan TestEqualsEmpty(string s, int count)Di2015NewLine    {Di2015NewLine        var sw = Stopwatch.StartNew();Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            if (s == null || s == "")Di2015NewLine            {Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLine        return sw.Elapsed;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18447968Di2015UniqueSeparatorIsNullOrEmpty
18447968Di2015UniqueSeparatornull
18447968Di2015UniqueSeparator""
18447968Di2015UniqueSeparatornull
18447968Di2015UniqueSeparatorif(myString != null && myString != "")Di2015NewLine
18447968Di2015UniqueSeparatorif(string.IsNullOrEmpty(myString))Di2015NewLine
18447968Di2015UniqueSeparatorif(myString != null && myString.Length > 0)Di2015NewLine
18447968Di2015UniqueSeparatorIsNullOrEmpty
18447980Di2015UniqueSeparatorvar members = groupPrincipal.Members.Where(member=>(member.GetUnderlyingObject() as DirectoryEntry).Properties["building"].Value.ToString() == "NSA HQ");Di2015NewLine
18448003Di2015UniqueSeparatorHashFinal
18448217Di2015UniqueSeparatorInit
18448222Di2015UniqueSeparatorEnvironment.GetFolderPath(Environment.SpecialFolder.Personal));Di2015NewLine
18448222Di2015UniqueSeparatorPath.GetTempFilename();Di2015NewLine
18448222Di2015UniqueSeparatorCreates a uniquely named, zero-byte temporary file on disk and returns the full path of that file
18448395Di2015UniqueSeparatorMyEntityModel entity = new MyEntityModel();Di2015NewLineDi2015NewLineprivate void LoadData<T>(DataGrid dataGrid)Di2015NewLine    where T : classDi2015NewLine{    Di2015NewLine    dataGrid.ItemsSource = entity.Set<T>().ToList();Di2015NewLine}Di2015NewLine
18448395Di2015UniqueSeparatorLoadData<Table1>(myDataGrid); // Table1 is a entity type nameDi2015NewLine
18448404Di2015UniqueSeparator        var httpClient = new HttpClient();Di2015NewLineDi2015NewLine        httpClient.DefaultRequestHeaders.TransferEncodingChunked = true;Di2015NewLineDi2015NewLine        var content = new CompressedContent(new StreamContent(new FileStream("c:\\\\big-json-file.json",FileMode.Open)),"UTF8");Di2015NewLineDi2015NewLine        var response = httpClient.PostAsync("http://example.org/", content).Result;Di2015NewLine
18448505Di2015UniqueSeparatorDataTemplate
18448505Di2015UniqueSeparatorItemContainerStyle
18448505Di2015UniqueSeparatorListBox
18448528Di2015UniqueSeparatorNoRecovery = trueDi2015NewLine
18448528Di2015UniqueSeparatorNoRecovery = falseDi2015NewLine
18448528Di2015UniqueSeparatorComparison of RECOVERY and NORECOVERY
18448613Di2015UniqueSeparatorTextAreaExtensions
18448613Di2015UniqueSeparatorreturn System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor(htmlHelper, expression, routeValues);Di2015NewLine
18448613Di2015UniqueSeparatorreturn htmlHelper.TextAreaFor(expression, routeValues);Di2015NewLine
18448613Di2015UniqueSeparatorIDictionary<string, Object> htmlAttributes
18448613Di2015UniqueSeparatorRouteValueDictionary
18448613Di2015UniqueSeparatorIDictionary<string, Object>
18448621Di2015UniqueSeparatorWorksheetNoHeader
18448621Di2015UniqueSeparatorvar excel = new ExcelQueryFactory("excelFileName");Di2015NewLinevar indianaCompanies = from c in excel.WorksheetNoHeader()Di2015NewLine                       where c[2] == "IN" //value in 3rd columnDi2015NewLine                       select c;Di2015NewLine
18448660Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    public static String GetTimestamp()Di2015NewLine    {Di2015NewLine        DateTime saveNow = DateTime.Now;Di2015NewLine        return saveNow.ToString("yyyyMMddHHmmssffff");Di2015NewLine    }Di2015NewLineDi2015NewLine    public static int ThrowDice()Di2015NewLine    {Di2015NewLine        int randVal1, randVal2;Di2015NewLine        string TS1, TS2;Di2015NewLineDi2015NewLineDi2015NewLine        randVal1 = rand.Next(1,7);Di2015NewLine        TS1 = GetTimestamp();Di2015NewLine        randVal2 = rand.Next(1,7);Di2015NewLine        TS2 = GetTimestamp();Di2015NewLineDi2015NewLine        Console.WriteLine("Dice 1: \\t" + randVal1 + ' ' + TS1);Di2015NewLine        Console.WriteLine("Dice 2: \\t" + randVal2 + ' ' + TS2);Di2015NewLine        Console.WriteLine("-----------------");Di2015NewLineDi2015NewLine        return randVal1 + randVal2;Di2015NewLine    }Di2015NewLine    static Random rand ;Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        rand = new Random();Di2015NewLineDi2015NewLine        for(int i = 1; i<=10;i++)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Dice Roll #" + i);Di2015NewLine            Console.WriteLine("Dice Sum:\\t" + ThrowDice());Di2015NewLine            Console.WriteLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18448918Di2015UniqueSeparatorprivate string foo(string _text)Di2015NewLine{Di2015NewLine   /* some manipulation on _text */Di2015NewLine   return _text = Server.HtmlDecode(_text);Di2015NewLine}Di2015NewLine
18448918Di2015UniqueSeparator_text
18448918Di2015UniqueSeparatorreturn
18448918Di2015UniqueSeparatorstring decoded = Server.HtmlDecode(_text);Di2015NewLinereturn decoded;Di2015NewLine
18448918Di2015UniqueSeparatorreturn Server.HtmlDecode(_text);Di2015NewLine
18448918Di2015UniqueSeparatorHtmlDecode
18448918Di2015UniqueSeparatorHtmlDecode
18449092Di2015UniqueSeparatorm_sock
18449092Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine    {Di2015NewLine        m_sock= new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);Di2015NewLine
18449092Di2015UniqueSeparatorSocket
18449092Di2015UniqueSeparatorm_sock
18449092Di2015UniqueSeparatorm_sock
18449321Di2015UniqueSeparatorspojeni.Open();Di2015NewLine//change your query string there was an error in itDi2015NewLinestring sql_combobox = "SELECT column FROM table ORDER BY nazev ASC";Di2015NewLineSqlCommand combobox = new SqlCommand(sql_combobox, spojeni);Di2015NewLineDi2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine   SqlDataReader dr = combobox.ExecuteReader();Di2015NewLine   while (dr.Read())Di2015NewLine   {Di2015NewLine       if (!dr.IsDBNull(0))Di2015NewLine       {Di2015NewLine          comboBox1.Items.Add(dr.GetString(0));Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLine   dr.Close();Di2015NewLine   dr.Dispose();Di2015NewLine   spojeni.Close();Di2015NewLine}Di2015NewLine
18449328Di2015UniqueSeparatorstring dataSourceName = ...;Di2015NewLinegridData.RowEditing += (sender, e) => grid_RowEditing(gridData, dataSourceName, e);Di2015NewLine        gridData.DataSource = tbl;Di2015NewLine        gridData.DataBind();Di2015NewLineDi2015NewLineDi2015NewLinevoid grid_RowEditing(GridView gridData, string dataSourceName, GridViewEventArgs e) {Di2015NewLine  ...Di2015NewLine}Di2015NewLine
18449414Di2015UniqueSeparatorImpersonatedUserId
18449414Di2015UniqueSeparator        // Connect to Exchange Web ServicesDi2015NewLine        service = new ExchangeService(ExchangeVersion.Exchange2010_SP1);Di2015NewLineDi2015NewLine        service.Credentials = new WebCredentials("svc_user", "svc_password", "domain");Di2015NewLine        service.AutodiscoverUrl("user@domain");Di2015NewLine        service.ImpersonatedUserId = new ImpersonatedUserID(ConnectingIdType.SmtpAddres, "user@domain");Di2015NewLineDi2015NewLine        //Return countDi2015NewLine        ItemView view = new ItemView(10);Di2015NewLine        view.PropertySet = new PropertySet(BasePropertySet.IdOnly);Di2015NewLine        FindItemsResults<Item> findResults = service.FindItems(WellKnownFolderName.Calendar, view);Di2015NewLine        MessageBox.Show(findResults.Count().ToString());Di2015NewLine
18449419Di2015UniqueSeparatorDecimal.TryParse
18449419Di2015UniqueSeparatordecimal d;Di2015NewLineif(decimal.TryParse(textBox1.Text, out d))Di2015NewLine{Di2015NewLine    //valid Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //invalidDi2015NewLine    MessageBox.Show("Please enter a valid number");Di2015NewLine    return;Di2015NewLine}Di2015NewLine
18449600Di2015UniqueSeparator<TextBlock x:Name="MainTextBlock" FontFamily=".\\Fonts\\KOMIKAX_.ttf#Komika Axis" TextWrapping="Wrap" Text="Hello" Width="680" Height="120" Margin="10,0,0,0" FontSize="25" Padding="20,10"/>Di2015NewLine
18449645Di2015UniqueSeparator.Local
18449645Di2015UniqueSeparatorvar query = context.Blogs;Di2015NewLine
18449645Di2015UniqueSeparatorvar query = context.Blogs.Local;Di2015NewLine
18449761Di2015UniqueSeparatorTask
18449761Di2015UniqueSeparatorprivate static Task DoIOWorkAsync()Di2015NewLine{Di2015NewLine    Console.WriteLine("Doing work...");Di2015NewLine    Task work = new Task(() => Thread.Sleep(1500));Di2015NewLine    work.Start();Di2015NewLine    return work;Di2015NewLine}Di2015NewLine
18449791Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function getConfirm() {Di2015NewLine        var ans = confirm('Are you sure?');Di2015NewLine        if(ans==true)Di2015NewLine        {Di2015NewLine           //User clicked okDi2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine          //User clicked cancelDi2015NewLine        }Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
18449791Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine  {Di2015NewLine    if (IsPostBack)Di2015NewLine    {Di2015NewLine      Page.ClientScript.RegisterStartupScript(this.GetType(), null, "getConfirm();", true);Di2015NewLine    }Di2015NewLine  }Di2015NewLine
18449850Di2015UniqueSeparator    public string FirstName;Di2015NewLine    public string PhoneNumber;Di2015NewLine    public string OrggName; //Person's Organisation.Di2015NewLineDi2015NewLine    public Person(string FName, string PNumber, string OName)Di2015NewLine    { Di2015NewLine        FirstName   = FName;Di2015NewLine        PhoneNumber = PNumber; Di2015NewLine        OrggName    = OName;Di2015NewLine    }Di2015NewLine
18449850Di2015UniqueSeparator    //Define the data providersDi2015NewLine    List<Organisation> listofOgg; //List of Organisation or maybe Organisation[];Di2015NewLine    List<Person> listofPers; //Again List of related Person or maybe Person[];Di2015NewLine
18449850Di2015UniqueSeparator    public void FillThemAll()Di2015NewLine    {Di2015NewLine       //Initialize some ListsDi2015NewLine        listofOgg = new List<Organisation>();Di2015NewLine        listofPers = new List<Person>();Di2015NewLineDi2015NewLine        Organisation o = new Organisation();Di2015NewLine        o.OrggName = "Stackoverflow";Di2015NewLine        listofOgg.Add(o);Di2015NewLine        //Another oneDi2015NewLine        o.OrggName = "Internet"; // Yes I know, I don't have any Organisation name :-)Di2015NewLine        listofOgg.Add(o);Di2015NewLine        //Now let's handle some PersonDi2015NewLine        Person p  = new Person("Tash Nar", "0123456", "StackOverFlow");Di2015NewLine        Person p2 = new Person("Lionnel", "0123456", "StackOverFlow");Di2015NewLine        Person p3 = new Person("You and Me", "0123456", "Internet");Di2015NewLine        //Add themDi2015NewLine        listofPers.Add(p);  listofPers.Add(p2); listofPers.Add(p3);Di2015NewLineDi2015NewLine        //Now assuming that we have our two displayed ListBox (listbox1 and listbox2)Di2015NewLine        //listbox1 for all organisations and listbox2 for more details about organisationsDi2015NewLine        //Let's fill listbox1 with our dataDi2015NewLine        for(int i=0; i < listofOgg.Count; i++)Di2015NewLine        {Di2015NewLine             listbox1.Items.Add(listofOgg[i].Name);Di2015NewLine        }  Di2015NewLine    }Di2015NewLine
18449850Di2015UniqueSeparator    private void listBox1_SelectedIndexChanged(object sender, System.EventArgs e)Di2015NewLine    {Di2015NewLine       string curItem = listBox1.SelectedItem.ToString();Di2015NewLine       //clear all items in listbox2 Di2015NewLine       listBox2.Items.Clear();Di2015NewLine       //Add SelectedItem's related Person in listbox2Di2015NewLine       foreach(Person pers in listofPers)Di2015NewLine       {Di2015NewLine          if(pers.OrggName == curItem)Di2015NewLine          {Di2015NewLine           //Add this person in listbox2Di2015NewLine            listbox2.Items.Add(pers.FName);Di2015NewLine          } Di2015NewLine       }Di2015NewLine    }Di2015NewLine
18449901Di2015UniqueSeparator   int sumOfPrice = 0;Di2015NewLine   object result = sc2.ExecuteScalar();Di2015NewLine   if(result != null)Di2015NewLine       sumOfPrice = Convert.ToInt32(result);Di2015NewLine
18449901Di2015UniqueSeparatorstring sql_com_sumcastka = "SELECT SUM(price) AS sumprice FROM kliplat " + Di2015NewLine                           "WHERE akce=@zak AND year=@year";Di2015NewLineSqlCommand sc2 = new SqlCommand(sql_com_sumprice, spojeni);Di2015NewLinesc2.Parameters.AddWithValue("@zak", zakce.Text);Di2015NewLinesc2.Parameters.AddWithValue("@year", year);Di2015NewLine
18449968Di2015UniqueSeparatorWhere
18449968Di2015UniqueSeparatort
18449968Di2015UniqueSeparatort.Item1
18449968Di2015UniqueSeparatort
18449968Di2015UniqueSeparatorselect
18449968Di2015UniqueSeparatorIEnumerable<int> result1 = source.Where(t => (t.Item1 + t.Item2) % 2 == 0)Di2015NewLine                        .Select(t => newDi2015NewLine                        {Di2015NewLine                            t,Di2015NewLine                            i = t.Item2,Di2015NewLine                        })Di2015NewLine                        .Select(result => 1 / result.i);Di2015NewLine
18449968Di2015UniqueSeparatorlet
18449968Di2015UniqueSeparatorlet
18449968Di2015UniqueSeparatort
18449968Di2015UniqueSeparatorselect
18449968Di2015UniqueSeparatorresult.t
18450105Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Rally.RestApi;Di2015NewLineusing Rally.RestApi.Response;Di2015NewLineDi2015NewLinenamespace aRestApp_CollectionOfTasksDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            //Initialize the REST APIDi2015NewLine            RallyRestApi restApi;Di2015NewLine            restApi = new RallyRestApi("user@co.com", "secret", "https://rally1.rallydev.com", "v2.0");Di2015NewLineDi2015NewLine            //Set our Workspace and Project scopingsDi2015NewLine            String workspaceRef = "/workspace/1111"; //please replace this OID with an OID of your workspace Di2015NewLine            String projectRef = "/project/2222";     //please replace this OID with an OID of your projectDi2015NewLine            bool projectScopingUp = false;Di2015NewLine            bool projectScopingDown = true;Di2015NewLineDi2015NewLine            Request storyRequest = new Request("Defect");Di2015NewLineDi2015NewLineDi2015NewLine            storyRequest.Workspace = workspaceRef;Di2015NewLine            storyRequest.Project = projectRef;Di2015NewLine            storyRequest.ProjectScopeUp = projectScopingUp;Di2015NewLine            storyRequest.ProjectScopeDown = projectScopingDown;Di2015NewLineDi2015NewLine            storyRequest.Fetch = new List<string>()Di2015NewLine                {Di2015NewLine                    "Name",Di2015NewLine                    "_ref",Di2015NewLine                    "c_JiraLink"Di2015NewLine                };Di2015NewLineDi2015NewLine            storyRequest.Query = new Query("FormattedID", Query.Operator.Equals, "DE170");       Di2015NewLine            QueryResult queryStoryResults = restApi.Query(storyRequest);Di2015NewLineDi2015NewLine            foreach (var s in queryStoryResults.Results)Di2015NewLine            {Di2015NewLine               Console.WriteLine(" Name: " + s["Name"] + " JiraLink's DisplayString: " + s["c_JiraLink"]["DisplayString"] + " JiraLink's LinkID: " + s["c_JiraLink"]["LinkID"]);  Di2015NewLine               DynamicJsonObject toUpdate = new DynamicJsonObject();Di2015NewLine               DynamicJsonObject myLink = new DynamicJsonObject();Di2015NewLine               myLink["LinkID"] = "NM-3";Di2015NewLine               myLink["DisplayString"] = "";Di2015NewLine               toUpdate["c_JiraLink"] = myLink;Di2015NewLineDi2015NewLine               OperationResult updateResult = restApi.Update(s["_ref"], toUpdate);  Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18450105Di2015UniqueSeparatorhttps://rally1.rallydev.com/slm/webservice/v2.0/defect/3807704995?key=abc123...
18450105Di2015UniqueSeparator{Di2015NewLine"defect":Di2015NewLine{Di2015NewLine"c_JiraLink":{Di2015NewLine"DisplayString":"",Di2015NewLine"LinkID":"NM-2"Di2015NewLine}Di2015NewLine}Di2015NewLine}Di2015NewLine
18450141Di2015UniqueSeparator<authentication mode="Forms"></authentication>Di2015NewLine
18450234Di2015UniqueSeparator<asp:TemplateField>Di2015NewLine   <ItemTemplate>Di2015NewLine       <asp:LinkButton runat="server" CommandName="Select" CommandArgument='<%# Eval("Event_ID") %>' Text='<%# Eval("Event_Title") %>'Di2015NewLine   ...Di2015NewLine
18450266Di2015UniqueSeparatorErik.Mobile.Screens
18450266Di2015UniqueSeparatorandroid:actionProviderClass
18450266Di2015UniqueSeparatorerik.mobile.screens.SearchActionProvider
18450408Di2015UniqueSeparatorDeflateStream
18450593Di2015UniqueSeparatorvar llType = typeof(LazyListLoader<>).MakeGenericType(typeToLoad);Di2015NewLinereturn (ILazyLoader)Activator.CreateInstance(llType, id);Di2015NewLine
18450614Di2015UniqueSeparatorvar responseBytes = request.UploadFile(url, fileName);
18450614Di2015UniqueSeparatorHttpPostedFileBase
18450614Di2015UniqueSeparatormultipart/form-data
18450614Di2015UniqueSeparatorRequest.SaveAs(filename, false);
18450696Di2015UniqueSeparator1.1869 * cursory / maxcursory -.672Di2015NewLine
18450696Di2015UniqueSeparator(rangeEnd-rangeStart)*(cursory / maxcursory) + rangeStartDi2015NewLine
18450696Di2015UniqueSeparatorCursor.Position.Y
18450696Di2015UniqueSeparator-1.1869 * cursory / maxcursory + .5149Di2015NewLine
18450898Di2015UniqueSeparatorsuccess: function (data) {Di2015NewLine    $.each(data.d, function(i, item) {Di2015NewLine        drugQuiz.drugQuestions.push(item);Di2015NewLine    });Di2015NewLine},Di2015NewLine
18450898Di2015UniqueSeparatorparseJSON()
18450898Di2015UniqueSeparatorsuccess: function (data) {Di2015NewLine    var jsonData = JSON.parse(data.d);Di2015NewLine    for (var i in jsonData.drugQuestions) {Di2015NewLine        var question = jsonData.drugQuestions[i];Di2015NewLine    }Di2015NewLine},Di2015NewLine
18450898Di2015UniqueSeparatordrugQuestions
18450898Di2015UniqueSeparatordrugQuestion
18450898Di2015UniqueSeparatorjsonData.
18451077Di2015UniqueSeparatorDim obj = TryCast(sourceConnectorInfo.DataItem, INotifyPropertyChanged)Di2015NewLineDim handler = New WeakINPCEventHandler(AddressOf ConnectorViewModel_PropertyChanged)Di2015NewLineAddHandler obj.PropertyChanged, AddressOf handler.HandlerDi2015NewLine
18451119Di2015UniqueSeparator"Is there a way to Kill an specific Application Session by the ID, forcing user to Log in again?"Di2015NewLine
18451218Di2015UniqueSeparatorDynamicObject
18451218Di2015UniqueSeparatorvar values = new Dictionary<string, object>();Di2015NewLineIEnumerable<string> keys = ViewBag.GetDynamicMemberNames();Di2015NewLineforeach (string key in keys)Di2015NewLine{Di2015NewLine    var binder = Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Di2015NewLine        CSharpBinderFlags.None, key, Di2015NewLine        ViewBag.GetType(),Di2015NewLine        new[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null) });Di2015NewLine    var callsite = CallSite<Func<CallSite, object, object>>.Create(binder);Di2015NewLine    var val = callsite.Target(callsite, ViewBag);Di2015NewLine    values.Add(key, val);Di2015NewLine}Di2015NewLine
18451350Di2015UniqueSeparatorvar uniqueGuys = from d in from d in tests.AsEnumerable()Di2015NewLine                 group d by d.ID into gDi2015NewLine                 select g.OrderBy(p => p.DateTime).First(); Di2015NewLine
18451367Di2015UniqueSeparatorHMACMD5
18451367Di2015UniqueSeparatorstringToHash + saltToUse
18451367Di2015UniqueSeparatorHMACMD5
18451374Di2015UniqueSeparatorusing Microsoft.AspNet.Identity;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineUser.Identity.GetUserId();Di2015NewLine
18451374Di2015UniqueSeparatorUser.Identity.IsAuthenticated
18451374Di2015UniqueSeparatorUser.Identity.Name
18451374Di2015UniqueSeparatorusing
18451374Di2015UniqueSeparatorGetUserId()
18451374Di2015UniqueSeparatorIdentity
18451380Di2015UniqueSeparatorConnection: Keep-Alive
18451380Di2015UniqueSeparatorHttpWebRequest
18451380Di2015UniqueSeparatorProxy-Connection: Keep-Alive
18451380Di2015UniqueSeparatorConnection: Keep-Alive
18451380Di2015UniqueSeparatorProxy-Connection
18451380Di2015UniqueSeparatorConnection
18451380Di2015UniqueSeparatorKeep-Alive
18451380Di2015UniqueSeparatorProxy-Connection
18451380Di2015UniqueSeparatorProxy-
18451460Di2015UniqueSeparatorSequenceEqual
18451460Di2015UniqueSeparator// Make the extraction its own methodDi2015NewLineprivate static IEnumerable<string> ExtractFirstTwoColumns(string fileName) {Di2015NewLine    return System.IO.File.ReadLines(fileName).Select(Di2015NewLine         line => {Di2015NewLine              string[] words = line.Split(delimiterChars);Di2015NewLine              return words[0] + words[1];Di2015NewLine         }Di2015NewLine    );Di2015NewLine}Di2015NewLineDi2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine    // Use extraction to do both comparisons and to writeDi2015NewLine    var extracted1 = ExtractFirstTwoColumns(@"C:\\Test\\Test1.txt").ToList();Di2015NewLine    var extracted2 = ExtractFirstTwoColumns(@"C:\\Test\\Test2.txt").ToList();Di2015NewLine    // Write the content to the responseDi2015NewLine    foreach (var s in extracted1) {Di2015NewLine        Response.Write(s);Di2015NewLine    }Di2015NewLine    foreach (var s in extracted2) {Di2015NewLine        Response.Write(s);Di2015NewLine    }Di2015NewLine    // Do the comparisonDi2015NewLine    if (extracted1.SequenceEqual(extracted2)) {Di2015NewLine        Console.Error.WriteLine("First two columns are different.");Di2015NewLine    }Di2015NewLine}Di2015NewLine
18451481Di2015UniqueSeparatorIsNullOrEmpty
18451481Di2015UniqueSeparatorif (String.IsNullOrEmpty(textBox1.Text))Di2015NewLine{Di2015NewLine    //Show PictureDi2015NewLine    pictureBox1.ImageLocation = "locationofimg";Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //Hide PictureDi2015NewLine    pictureBox1.ImageLocation = "";Di2015NewLine}Di2015NewLine
18451481Di2015UniqueSeparator private void Form1_Load(object sender, EventArgs e) {Di2015NewLine    pictureBox1.ImageLocation = "";Di2015NewLine    }Di2015NewLine
18451481Di2015UniqueSeparatorprivate void textBox1_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (String.IsNullOrEmpty(textBox1.Text))Di2015NewLine    {Di2015NewLine         pictureBox1.ImageLocation = "";Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        pictureBox1.ImageLocation = "Image\\Location.com.etc";Di2015NewLine    }Di2015NewLine}Di2015NewLine
18451523Di2015UniqueSeparatorForm2
18451523Di2015UniqueSeparatorForm3
18451523Di2015UniqueSeparatorstring
18451523Di2015UniqueSeparatorForm2
18451523Di2015UniqueSeparatorFunc<string>
18451523Di2015UniqueSeparatorForm1
18451523Di2015UniqueSeparatorFunc<string> vyberIDKGetter = Di2015NewLine    () => dataGridView1.CurrentRow.Cells["ID_K"].Value.ToString();Di2015NewLine
18451523Di2015UniqueSeparatorForm3
18451523Di2015UniqueSeparatorFunc<string> vyberIDKGetter = [...];Di2015NewLinestring vyberIDK = vyberIDKGetter();Di2015NewLine
18451523Di2015UniqueSeparatorForm3
18451523Di2015UniqueSeparatorForm1
18451523Di2015UniqueSeparatorForm2
18451693Di2015UniqueSeparator<Button.Content>Di2015NewLine    <StackPanel Orientation="Horizontal">Di2015NewLine        <TextBlock Text="N" TextDecorations="Underline"/>Di2015NewLine        <TextBlock Text="ame" />Di2015NewLine    </StackPanel>Di2015NewLine</Button.Content>Di2015NewLine
18451696Di2015UniqueSeparatorComponentNotRegisteredException
18451696Di2015UniqueSeparatorSerializableAttribute
18451696Di2015UniqueSeparatorSerializationException
18451696Di2015UniqueSeparatorComponentNotRegisteredException
18451696Di2015UniqueSeparatorComponentNotRegisteredException
18451804Di2015UniqueSeparatorstring timedate = DateTime.Now.ToString("MM/dd/yyyy HH:mm:tt");Di2015NewLineSession["timedate"] = timedate;Di2015NewLine
18451804Di2015UniqueSeparatorstring timedate;Di2015NewLineDi2015NewLineif (Session["timedate"] != null) {Di2015NewLine    timedate = Session["timedate"].ToString();Di2015NewLine}Di2015NewLine
18452043Di2015UniqueSeparatorFindByIdentity
18452043Di2015UniqueSeparatorstring username = "Some username you retrieved from the TextBox";Di2015NewLineDi2015NewLineusing (var ctx = new PrincipalContext(ContextType.Domain, "YOUR_DOMAIN"))Di2015NewLineusing (var user = UserPrincipal.FindByIdentity(ctx, IdentityType.SamAccountName, username))Di2015NewLine{Di2015NewLine    bool userExists = user != null;Di2015NewLine    // here you know whether the user exists or notDi2015NewLine}Di2015NewLine
18452360Di2015UniqueSeparatorhttp://api.website.com/apik=123456&q=some+search&l=San+Jose%2c+CA&sort=1&radius=100Di2015NewLine
18452360Di2015UniqueSeparator/apik=123456
18452360Di2015UniqueSeparatorvar apiKey = "123456";Di2015NewLinevar Query = "some search";Di2015NewLinevar Location = "San Jose, CA";Di2015NewLinevar Sort = "1";Di2015NewLinevar SearchRadius = "100";Di2015NewLineDi2015NewLine// Build a List of the querystring parameters (this could optionally also have a .ToLookup(qs => qs.key, qs => qs.value) call)Di2015NewLinevar querystringParams = new [] {Di2015NewLine  new { key = "k", value = apiKey },Di2015NewLine  new { key = "q", value = Query },Di2015NewLine  new { key = "l", value = Location },Di2015NewLine  new { key="sort", value = Sort },Di2015NewLine  new { key = "radius", value = SearchRadius }Di2015NewLine};Di2015NewLineDi2015NewLine// format each querystring parameter, and ensure its value is encodedDi2015NewLinevar encodedQueryStringParams = querystringParams.Select (p => string.Format("{0}={1}", p.key, HttpUtility.UrlEncode(p.value)));Di2015NewLineDi2015NewLine// Construct a strongly-typed Uri, with the querystring parameters appendedDi2015NewLinevar url = new UriBuilder("http://api.website.com/api");Di2015NewLineurl.Query = string.Join("&", encodedQueryStringParams);Di2015NewLine
18452378Di2015UniqueSeparator<DataGrid x:Name="grid">Di2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTextColumn Binding="{Binding id}" Header="id" />Di2015NewLine        <DataGridTextColumn Binding="{Binding image}" Header="image" />Di2015NewLine    </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
18452378Di2015UniqueSeparator// add new columns to the data gridDi2015NewLinevoid AddColumns(string[] newColumnNames)Di2015NewLine{Di2015NewLine    foreach (string name in newColumnNames)Di2015NewLine    {Di2015NewLine        grid.Columns.Add(new DataGridTextColumn { Di2015NewLine            // bind to a dictionary propertyDi2015NewLine            Binding = new Binding("Custom[" + name + "]"), Di2015NewLine            Header = name Di2015NewLine        });Di2015NewLine    }Di2015NewLine}Di2015NewLine
18452378Di2015UniqueSeparatorpublic class CustomUser : UserDi2015NewLine{Di2015NewLine    public Dictionary<string, object> Custom { get; set; }Di2015NewLineDi2015NewLine    public CustomUser() : base()Di2015NewLine    {Di2015NewLine        Custom = new Dictionary<string, object>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18452378Di2015UniqueSeparatorItemsSource
18452378Di2015UniqueSeparatorvoid PopulateRows(User[] users, Dictionary<string, object>[] customProps)Di2015NewLine{Di2015NewLine    var customUsers = users.Select((user, index) => new CustomUser {Di2015NewLine        Custom = customProps[index];Di2015NewLine    });Di2015NewLine    grid.ItemsSource = customUsers;Di2015NewLine}Di2015NewLine
18452378Di2015UniqueSeparatorvar newColumnNames = new string[] { "Name1", "Name2" };Di2015NewLinevar users = new User[] { new User { id="First User" } };Di2015NewLinevar newProps = new Dictionary<string, object>[] {Di2015NewLine    new Dictionary<string, object> { Di2015NewLine        "Name1", "First Name of First User",Di2015NewLine        "Name2", "Second Name of First User",Di2015NewLine    },Di2015NewLine};Di2015NewLineAddColumns(newColumnNames);Di2015NewLinePopulateRows(users, newProps);Di2015NewLine
18452378Di2015UniqueSeparatorItemsSource
18452378Di2015UniqueSeparatorDataTable.DefaultView
18452378Di2015UniqueSeparator<DataGrid ItemsSource="{Binding Data.DefaultView}" AutoGenerateColumns="True" />Di2015NewLine
18452378Di2015UniqueSeparatorData = new DataTable();Di2015NewLineDi2015NewLine// create "fixed" columnsDi2015NewLineData.Columns.Add("id");Di2015NewLineData.Columns.Add("image");Di2015NewLineDi2015NewLine// create custom columnsDi2015NewLineData.Columns.Add("Name1");Di2015NewLineData.Columns.Add("Name2");Di2015NewLineDi2015NewLine// add one row as an object arrayDi2015NewLineData.Rows.Add(new object[] { 123, "image.png", "Foo", "Bar" });Di2015NewLine
18452378Di2015UniqueSeparatorCustomTypeDescriptor
18452548Di2015UniqueSeparator  public ActionResult CausedOutPoint() {Di2015NewLine     var ms = (byte[])Session[ "MS" ];Di2015NewLine     return File( ms, "img/png" );Di2015NewLine  }Di2015NewLineDi2015NewLine  public ActionResult CausedOutMap(string name)Di2015NewLine  {Di2015NewLineDi2015NewLine     var causedOut = new CausedOutViewModel();Di2015NewLine     var ms = new MemoryStream();Di2015NewLine     causedOut.Chart.SaveImage(ms, ChartImageFormat.Png);Di2015NewLine     Session[ "MS" ] = ms.ToArray();Di2015NewLine     return Content( causedOut.Chart.GetHtmlImageMap( name ) );Di2015NewLine  }Di2015NewLine
18452548Di2015UniqueSeparatorIndex.csthml
18452548Di2015UniqueSeparator    <img  src="@Url.Action("CausedOutPoint")" usemap="#CausedOut"/>Di2015NewLine    @{Di2015NewLine        Html.RenderAction("CausedOutMap", new { name = "causedOut"});Di2015NewLine    }Di2015NewLine
18452754Di2015UniqueSeparatorl.Split(',')
18452754Di2015UniqueSeparatorstring
18452754Di2015UniqueSeparatorString[]
18452754Di2015UniqueSeparatorToString()
18452754Di2015UniqueSeparator"System.String[]"
18452754Di2015UniqueSeparatortemp
18452754Di2015UniqueSeparator4
18452754Di2015UniqueSeparatorl.Split(',').Take(4).ToArray()
18452754Di2015UniqueSeparatorupdatedTtextBox.Text
18452754Di2015UniqueSeparatorstring[] temp = l.Split(',').Take(4).ToArray();Di2015NewLine// For display purposes, you can join the data back with a different separator:Di2015NewLineupdatedTtextBox.Text = string.Join("|", temp);Di2015NewLine
18452942Di2015UniqueSeparator// interfaces must be public - this is the "contract" with the outside world / assembliesDi2015NewLinepublic interface IDatabaseDi2015NewLine{Di2015NewLine    void Create(DataObject obj);Di2015NewLine}Di2015NewLineDi2015NewLine// classes that implement interfaces should be internal - outside world don't know about themDi2015NewLineinternal class SQLDatabase : IDatabaseDi2015NewLine{Di2015NewLine    // internal on constructor helps you to make sure you are the only one Di2015NewLine    // that can create such an instanceDi2015NewLine    internal SQLDatabase()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    void Create(DataObject obj)Di2015NewLine    {Di2015NewLine        Entity dbContext = new Entity();Di2015NewLine        dbContext.Data.Add(obj);Di2015NewLine        dbContext.SaveChanged();Di2015NewLine    }Di2015NewLine}Di2015NewLineinternal class OracleDatabase : IDatabaseDi2015NewLine{Di2015NewLine    internal OracleDatabase()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    void Create(DataObject obj)Di2015NewLine    {Di2015NewLine        //oracle creation methodDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DataObjectDi2015NewLine{Di2015NewLine    int Data1;Di2015NewLine    string Data2;Di2015NewLine}Di2015NewLineDi2015NewLine// this is the factory class that creates the instances for you (ourside world)Di2015NewLinepublic class DatabaseFactoryDi2015NewLine{Di2015NewLine    // you can use either params or ideally app.config keysDi2015NewLine    public IDatabase CreateInstace()Di2015NewLine    {Di2015NewLine        if (ConfigSetting == "SQL")Di2015NewLine        {Di2015NewLine            return new SQLDatabase();Di2015NewLine        }Di2015NewLine        else if (ConfigSetting == "Oracle")Di2015NewLine        {Di2015NewLine            return new OracleDatabase();Di2015NewLine        }Di2015NewLine        else throw new System.Exception ("invalid configuration setting key");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// this is in external assembly:Di2015NewLinepublic class CreateElementOnDatabaseDi2015NewLine{Di2015NewLine     DataObject myObj = new DataObject();Di2015NewLine     myObj.Data1 = 10;Di2015NewLine     myObj.Data2 = "Test String";Di2015NewLineDi2015NewLine    // you only work with public interfacesDi2015NewLine    // and the factory creates the instances for you ...Di2015NewLine     IDatabase db = DatabaseFactory.CreateInstace();Di2015NewLine     db.Create(myObj);Di2015NewLine}Di2015NewLine
18452961Di2015UniqueSeparatorHost
18452961Di2015UniqueSeparatorpublic static string Absolute(this UrlHelper url, string relativeUrl)Di2015NewLine{Di2015NewLine    var request = url.RequestContext.HttpContext.Request;Di2015NewLineDi2015NewLine    return string.Format("{0}://{1}{2}",Di2015NewLine        (request.IsSecureConnection) ? "https" : "http",Di2015NewLine        request.Headers["Host"],Di2015NewLine        VirtualPathUtility.ToAbsolute(relativeUrl));Di2015NewLine}Di2015NewLine
18452963Di2015UniqueSeparatorusing
18452963Di2015UniqueSeparatorusing(var catalog = new DirectoryCatalog(targetPath))Di2015NewLineusing(var container = new CompositionContainer(catalog))Di2015NewLine{Di2015NewLine    container.ComposeParts(this);Di2015NewLine}Di2015NewLine
18452978Di2015UniqueSeparator$test=[System.Convert]::ToBase64String([io.file]::ReadAllBytes("c:\\test"));Di2015NewLine$socket = New-Object net.sockets.tcpclient('172.26.4.26',8080);Di2015NewLine$stream = $socket.GetStream();Di2015NewLine$writer = new-object System.IO.StreamWriter($stream);Di2015NewLine$buffer = new-object System.Byte[] 1024;Di2015NewLine$writer.WriteLine($test);Di2015NewLine$socket.close()Di2015NewLine
18452978Di2015UniqueSeparator#!/usr/bin/env rubyDi2015NewLinerequire 'socket'Di2015NewLinerequire 'base64'Di2015NewLinebeginDi2015NewLine  server = TCPServer.open(8080)Di2015NewLine  client = server.acceptDi2015NewLine  out_put = client.gets()Di2015NewLine  File.open("test","w") {|f| f.write(Base64.decode64(out_put))}Di2015NewLineendDi2015NewLine
18453071Di2015UniqueSeparatorStash pop
18453071Di2015UniqueSeparatorRepository
18453071Di2015UniqueSeparatorRepositoryOptions
18453071Di2015UniqueSeparatorotherRepo
18453071Di2015UniqueSeparatorstring repoPath = "path/to/your/repo";Di2015NewLineDi2015NewLine// Create a temp folder for a second working directoryDi2015NewLinestring tempWorkDir = Path.Combine(Path.GetTempPath(), "tmp_wd");Di2015NewLineDirectory.CreateDirectory(newWorkdir);Di2015NewLineDi2015NewLine// Also create a new index to not alter the main repositoryDi2015NewLinestring tempIndex = Path.Combine(Path.GetTempPath(), "tmp_idx");Di2015NewLineDi2015NewLinevar opts = new RepositoryOptionsDi2015NewLine{Di2015NewLine    WorkingDirectoryPath = tempWorkDir,Di2015NewLine    IndexPath = tempIndexDi2015NewLine};Di2015NewLineDi2015NewLineusing (var mainRepo = new Repository(repoPath))Di2015NewLineusing (var otherRepo = new Repository(mainRepo.Info.Path, opts))Di2015NewLine{Di2015NewLine    string path = "file.txt";Di2015NewLineDi2015NewLine    // Do your stuff with mainrepoDi2015NewLine    mainRepo.CheckoutPaths("HEAD", new[] { path });Di2015NewLine    var currentVersion = File.ReadAllText(Path.Combine(mainRepo.Info.WorkingDirectory, path));Di2015NewLineDi2015NewLine    // Use otherRepo to temporarily checkout previous versions of filesDi2015NewLine    // Thank to the passed in RepositoryOptions, this checkout will notDi2015NewLine    // alter the workdir nor the index of the main repository.Di2015NewLine    otherRepo.CheckoutPaths("HEAD~2", new [] { path });Di2015NewLine    var olderVersion = File.ReadAllText(Path.Combine(otherRepo.Info.WorkingDirectory, path));Di2015NewLine}Di2015NewLine
18453071Di2015UniqueSeparatorRepositoryOptions
18453097Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing Microsoft.Office.Interop.Excel;Di2015NewLineusing Excel = Microsoft.Office.Interop.Excel;Di2015NewLine
18453097Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var mypath = @"c:\\my\\search\\directory";Di2015NewLine        string[] files = Directory.GetFiles(mypath, "*abc.xls", SearchOption.AllDirectories);Di2015NewLineDi2015NewLine        foreach (var file in files)Di2015NewLine        {Di2015NewLine            Find(Path.Combine(mypath,file));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void Find(string path)Di2015NewLine    {Di2015NewLine        object missing = null;Di2015NewLine        Excel.Range currentFind = null;Di2015NewLine        Excel.Range firstFind = null;Di2015NewLine        var app = new Excel.Application();Di2015NewLine        app.Visible = true;Di2015NewLine        Excel.Workbook workbook = app.Workbooks.Open(path, 0, false, 5, "", "", false, Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);Di2015NewLine        var worksheet = workbook.Sheets[1];Di2015NewLineDi2015NewLineDi2015NewLine        Excel.Range foundNames = worksheet.Range["A1", "B3"];Di2015NewLine        // You should specify all these parameters every time you call this method, Di2015NewLine        // since they can be overridden in the user interface. Di2015NewLine        currentFind = foundNames.Find("Peter, Paul, Mary", LookIn: XlFindLookIn.xlValues, LookAt: XlLookAt.xlPart);Di2015NewLineDi2015NewLine        currentFind.Replace(What:"Peter, Paul, Mary", Replacement:"Peter, John, Susan");Di2015NewLineDi2015NewLine        workbook.Save();Di2015NewLine    }Di2015NewLine}Di2015NewLine
18453372Di2015UniqueSeparator<DataTemplate x:Key="SmallPanoramaTitle">Di2015NewLine        <ContentPresenter>Di2015NewLine            <TextBlock Text="{Binding}" FontSize="50" Margin="0,0,0,0" />Di2015NewLine        </ContentPresenter>Di2015NewLine    </DataTemplate>Di2015NewLine
18453372Di2015UniqueSeparatormyNewPivotItem.HeaderTemplate = Resource["SmallPanoramaTitle"] as HeaderTemplate;Di2015NewLine
18453551Di2015UniqueSeparatorusing System.Security.Cryptography;Di2015NewLineDi2015NewLineprivate void compare_btn_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string firstFile = firstExcel_txt.Text;Di2015NewLine    ExcelInfo file1 = ReadExcel(openFileDialog1);Di2015NewLineDi2015NewLine    string secondFile = secondExcel_txt.Text;Di2015NewLine    ExcelInfo file2 = ReadExcel(openFileDialog2);Di2015NewLineDi2015NewLine    CompareExcels(file1,file2) ;Di2015NewLine}    Di2015NewLineDi2015NewLinepublic void CompareExcels(ExcelInfo fileA, ExcelInfo fileB)Di2015NewLine{Di2015NewLine    foreach(ExcelRow rowA in fileA.excelRows)Di2015NewLine    {Di2015NewLine        //If the current hash of a row of fileA does not exists in fileB then it was removed Di2015NewLine        if(! fileB.ContainsHash(rowA.hash))Di2015NewLine        {Di2015NewLine            Console.WriteLine("Row removed" + rowA.ToString());Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(ExcelRow rowB in fileB.excelRows)Di2015NewLine    {Di2015NewLine        //If the current hash of a row of fileB does not exists in fileA then it was added Di2015NewLine        if(! fileA.ContainsHash(rowB.hash))Di2015NewLine        {Di2015NewLine            Console.WriteLine("Row added" + rowB.ToString());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic Class ExcelRowDi2015NewLine{Di2015NewLine    public List<String> lstCells ;Di2015NewLine    public byte[] hashDi2015NewLineDi2015NewLine    public ExcelRow()Di2015NewLine    {Di2015NewLine        lstCells = new List<String>() ;Di2015NewLine    }Di2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        string resp ;Di2015NewLineDi2015NewLine        resp = string.Empty ;Di2015NewLineDi2015NewLine        foreach(string cellText in lstCells)Di2015NewLine        {Di2015NewLine            if(resp != string.Empty)Di2015NewLine            {Di2015NewLine                resp = resp + "," + cellText ;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                resp = cellText ;Di2015NewLine            }   Di2015NewLine        }Di2015NewLine        return resp ;Di2015NewLine    }       Di2015NewLine    public void CalculateHash()Di2015NewLine    {Di2015NewLine        byte[] rowBytes ;Di2015NewLine        byte[] cellBytes ;Di2015NewLine        int pos ;Di2015NewLine        int numRowBytes ;Di2015NewLineDi2015NewLine        //Determine how much bytes are required to store a single excel rowDi2015NewLine        numRowBytes = 0 ;Di2015NewLine        foreach(string cellText in lstCells)Di2015NewLine        {Di2015NewLine            numRowBytes += NumBytes(cellText) ;Di2015NewLine        }       Di2015NewLineDi2015NewLine        //Allocate space to calculate the HASH of a single rowDi2015NewLineDi2015NewLine        rowBytes= new byte[numRowBytes]Di2015NewLine        pos = 0 ;Di2015NewLineDi2015NewLine        //Concatenate the cellText of each cell, converted to bytes,into a single byte arrayDi2015NewLine        foreach(string cellText in lstCells)Di2015NewLine        {Di2015NewLine            cellBytes = GetBytes(cellText) ;Di2015NewLine            System.Buffer.BlockCopy(cellBytes, 0, rowBytes, pos, cellBytes.Length);Di2015NewLine            pos = cellBytes.Length ;Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        hash = new MD5CryptoServiceProvider().ComputeHash(rowBytes);Di2015NewLineDi2015NewLine    }Di2015NewLine    static int NumBytes(string str)Di2015NewLine    {Di2015NewLine        return str.Length * sizeof(char);Di2015NewLine    }Di2015NewLineDi2015NewLine    static byte[] GetBytes(string str)Di2015NewLine    {Di2015NewLine        byte[] bytes = new byte[NumBytes(str)];Di2015NewLine        System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);Di2015NewLine        return bytes;Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic Class ExcelInfoDi2015NewLine{Di2015NewLine    public List<ExcelRow> excelRows ;Di2015NewLineDi2015NewLine    public ExcelInfo()Di2015NewLine    {Di2015NewLine        excelRows = new List<ExcelRow>();Di2015NewLine    }Di2015NewLine    public bool ContainsHash(byte[] hashToLook)Di2015NewLine    {Di2015NewLine        bool found ;Di2015NewLineDi2015NewLine        found = false ;Di2015NewLineDi2015NewLine        foreach(ExcelRow eRow in excelRows)Di2015NewLine        {Di2015NewLine            found = EqualHash(eRow.hash, hashToLook) ;Di2015NewLineDi2015NewLine            if(found)Di2015NewLine            {Di2015NewLine                break ;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return found ;Di2015NewLine    }Di2015NewLine    public static EqualHash(byte[] hashA, byte[] hashB)Di2015NewLine    {Di2015NewLine        bool bEqual ;Di2015NewLine        int i ;Di2015NewLineDi2015NewLine        bEqual  = false;Di2015NewLine        if (hashA.Length == hashB.Length)Di2015NewLine        {Di2015NewLine            i = 0;Di2015NewLine            while ((i < hashA.Length) && (hashA[i] == hashB[i]))Di2015NewLine            {Di2015NewLine                i++ ;Di2015NewLine            }Di2015NewLine            if (i == hashA.Length)Di2015NewLine            {Di2015NewLine                bEqual = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return bEqual ;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic ExcelInfo ReadExcel(OpenFileDialog openFileDialog)Di2015NewLine{Di2015NewLine    var _excelFile = new ExcelQueryFactory(openFileDialog.FileName);Di2015NewLine    var _info = from c in _excelFile.WorksheetNoHeader() select c;Di2015NewLineDi2015NewLine    ExcelRow excelRow ;Di2015NewLine    ExcelInfo resp ;Di2015NewLineDi2015NewLine    resp = new ExcelInfo() ;Di2015NewLineDi2015NewLine    foreach (var item in _info)Di2015NewLine    {Di2015NewLine        excelRow = new ExcelRow() ;Di2015NewLineDi2015NewLine        //Add all the cells (with a for each)Di2015NewLine        excelRow.lstCells.Add(item.ElementAt(0));Di2015NewLine        excelRow.lstCells.Add(item.ElementAt(1));Di2015NewLine        ....Di2015NewLine        //Add the last cell of the rowDi2015NewLine        excelRow.lstCells.Add(item.ElementAt(N));Di2015NewLineDi2015NewLine        //Calculate the hash of the rowDi2015NewLine        excelRow.CalculateHash() ;Di2015NewLineDi2015NewLine        //Add the row to the ExcelInfo objectDi2015NewLine        resp.excelRows.Add(excelRow) ;Di2015NewLine    }Di2015NewLine    return resp ;Di2015NewLine}Di2015NewLine
18453554Di2015UniqueSeparatorViewState["Img1"] != null)Di2015NewLine    {Di2015NewLine        Image2.ImageUrl = (string)ViewState["img1"];Di2015NewLine
18453554Di2015UniqueSeparator    const string image1 = "img1";Di2015NewLine    const string image2 = "img2";Di2015NewLine    const string image3 = "img3";Di2015NewLine    const string image4 = "img4";Di2015NewLine
18453562Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic IEnumerable<User> List(string userGroup)Di2015NewLine{Di2015NewLine    var users = //Get your users hereDi2015NewLine    return users;Di2015NewLine}Di2015NewLine
18453562Di2015UniqueSeparatorhttp://myUrl.com/UsersApi/List/group1
18453562Di2015UniqueSeparatorList
18453562Di2015UniqueSeparatorGET
18453562Di2015UniqueSeparatorpublic IEnumerable<User> Get(string userGroup)Di2015NewLine{Di2015NewLine    var users = //Get your users hereDi2015NewLine    return users;Di2015NewLine}Di2015NewLine
18453562Di2015UniqueSeparatorhttp://myurl.com/usersapi/group1
18453726Di2015UniqueSeparatorvar il = (from i in AllItemsDi2015NewLine    where i.Iid == item.IidDi2015NewLine    select i).Take(Int32.Parse(item.amount)).ToList();Di2015NewLine
18453812Di2015UniqueSeparatormm
18453812Di2015UniqueSeparatorDateTime.ParseExact("03-08-2013", "dd-MM-yyyy", null).ToString("dd-MMM-yyyy") Di2015NewLine
18453812Di2015UniqueSeparator03-Aug-2013
18453926Di2015UniqueSeparatorFontStyle
18453926Di2015UniqueSeparatorpublic enum FontStyleDi2015NewLine{Di2015NewLine    Regular = 0;Di2015NewLine    Bold =1;Di2015NewLine    Italic = 2Di2015NewLine}Di2015NewLineDi2015NewLine// No need to cast itDi2015NewLineFontStyle fontstyle = FontStyle.Bold;Di2015NewLine
18453926Di2015UniqueSeparatorif(1 == 1)Di2015NewLine    FontStyle fontstyle = FontStyle.Bold;    Di2015NewLine
18453926Di2015UniqueSeparatorif(1 == 1)Di2015NewLine{Di2015NewLine    FontStyle fontstyle = FontStyle.Bold;    Di2015NewLine}Di2015NewLine
18453994Di2015UniqueSeparatorGetLineFromCharIndex()
18453994Di2015UniqueSeparatorLines[]
18453994Di2015UniqueSeparatorWordWrap
18453994Di2015UniqueSeparatorWordWrap
18454107Di2015UniqueSeparator    private void tabControl1_ControlRemoved(object sender, ControlEventArgs e) {Di2015NewLine        this.BeginInvoke(new Action(() => {Di2015NewLine            MessageBox.Show(tabControl1.TabCount.ToString());Di2015NewLine        }));Di2015NewLine    }Di2015NewLine
18454158Di2015UniqueSeparatorif (i < MyTable.Rows.Count - 1)Di2015NewLine{Di2015NewLine    txtRows.Value += '\\x1e';Di2015NewLineDi2015NewLine}Di2015NewLine
18454158Di2015UniqueSeparatorSplit
18454158Di2015UniqueSeparatorstring[] values = txtRows.Split('\\x1e');Di2015NewLine
18454158Di2015UniqueSeparatorfor (int i = 0; i < MyTable.Rows.Count; i++)Di2015NewLine{Di2015NewLine    txtRows[i].Value = MyTable.Rows[i]["Row"].ToString();Di2015NewLine}Di2015NewLine
18454416Di2015UniqueSeparator public static class SSLValidatorDi2015NewLine        {Di2015NewLine            private static bool OnValidateCertificate(object sender, X509Certificate certificate, X509Chain chain,Di2015NewLine                                                      SslPolicyErrors sslPolicyErrors)Di2015NewLine            {Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            public static void OverrideValidation()Di2015NewLine            {Di2015NewLine                ServicePointManager.ServerCertificateValidationCallback =Di2015NewLine                    OnValidateCertificate;Di2015NewLine                ServicePointManager.Expect100Continue = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
18454416Di2015UniqueSeparatorSSLValidator.OverrideValidation();  Di2015NewLine
18454416Di2015UniqueSeparator#if DEBUGDi2015NewLineDi2015NewLine            SSLValidator.OverrideValidation();Di2015NewLine#endif Di2015NewLine
18454496Di2015UniqueSeparatorreturn 0;
18454733Di2015UniqueSeparatorlong BytesReceived = item.filePath.Length;Di2015NewLine
18454733Di2015UniqueSeparatorstring
18454822Di2015UniqueSeparatorGetLastFmCurrentSong()
18454822Di2015UniqueSeparatorDispatcher
18454822Di2015UniqueSeparatorprivate Dispatcher currentDispatcher = Dispatcher.CurrentDispatcher;Di2015NewLine
18454822Di2015UniqueSeparatorGetSongTimer
18454822Di2015UniqueSeparatorGetLastFmCurrentSong()
18454822Di2015UniqueSeparatorElapsed
18454822Di2015UniqueSeparatorprivate void GetSongTimer()Di2015NewLine{Di2015NewLine    GetLastFmCurrentSong();Di2015NewLine}Di2015NewLine
18454822Di2015UniqueSeparatorGetLastFmCurrentSong()
18454822Di2015UniqueSeparatorTextBlockNameSong.Text = track;
18454822Di2015UniqueSeparatorprivate void GetLastFmCurrentSong()Di2015NewLine{Di2015NewLine   CQ dom = CQ.CreateFromUrl("http://www.last.fm/user/nukec");Di2015NewLineDi2015NewLine   string listeningNow = dom["#recentTracks:first .dateCell:first"].Text();Di2015NewLineDi2015NewLine   string track;Di2015NewLine   if (listeningNow.Contains("Listening now"))Di2015NewLine   {Di2015NewLine     track = dom["#recentTracks:first .subjectCell:first"].Text();Di2015NewLine     track = track.Replace('\\n', ' ');Di2015NewLine   }Di2015NewLine   elseDi2015NewLine   {Di2015NewLine     track = "Not listening anything";Di2015NewLine   }Di2015NewLineDi2015NewLine   currentDispatcher.Invoke(new Action(() =>Di2015NewLine   {Di2015NewLine      TextBlockNameSong.Text = track;Di2015NewLine   }));Di2015NewLine}Di2015NewLine
18454824Di2015UniqueSeparator public static byte[] ImageToByte(Image img)Di2015NewLine    {Di2015NewLine        ImageConverter converter = new ImageConverter();Di2015NewLine        return (byte[])converter.ConvertTo(img, typeof(byte[]));Di2015NewLine    }Di2015NewLineDi2015NewLinebyte[] trytry = ImageToByte(bitmap);Di2015NewLine                memoryStream.Write(trytry,0,trytry.Length );Di2015NewLine                base.Response.ClearContent();Di2015NewLine                base.Response.ContentType = "image/Gif";Di2015NewLine                base.Response.BinaryWrite(memoryStream.ToArray());Di2015NewLine
18454884Di2015UniqueSeparatorSELECT * FROM eAjudaConnection.udf_profileSearch('query')Di2015NewLine
18454884Di2015UniqueSeparatorvar result = from ps in eAjudaCtx.udf_profileSearch('"query"') select psDi2015NewLine
18454884Di2015UniqueSeparatorchar
18454884Di2015UniqueSeparatorvar result = from ps in eAjudaCtx.udf_profileSearch("query") select psDi2015NewLine
18455168Di2015UniqueSeparatorpublic class MyObjectDi2015NewLine{Di2015NewLine    public DateTime SomeValueUpdated { get; private set; }Di2015NewLineDi2015NewLine    private double _SomeValue;Di2015NewLine    public double SomeValueDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _SomeValue;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            SomeValueUpdated = DateTime.Now;Di2015NewLine            _SomeValue = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public MyObject()Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    //for deserialization purposes onlyDi2015NewLine    public MyObject(double someValue, DateTime someValueUpdated)Di2015NewLine    {Di2015NewLine        this.SomeValue = someValue;Di2015NewLine        this.SomeValueUpdated = someValueUpdated;Di2015NewLine    }Di2015NewLine}Di2015NewLine
18455168Di2015UniqueSeparatorpublic class MyObjectDTODi2015NewLine{Di2015NewLine    public DateTime SomeValueUpdated { get; set; }Di2015NewLine    public double SomeValue { get; set; }Di2015NewLine}Di2015NewLine
18455168Di2015UniqueSeparatorpublic static class MyObjectDTOConverterDi2015NewLine{Di2015NewLine    public static MyObjectDTO ToSerializable(MyObject myObj)Di2015NewLine    {Di2015NewLine        return new MyObjectDTO {Di2015NewLine            SomeValue = myObj.SomeValue,Di2015NewLine            SomeValueUpdated = myObj.SomeValueUpdatedDi2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static MyObject FromSerializable(MyObjectDTO myObjSerialized)Di2015NewLine    {Di2015NewLine        return new MyObject(Di2015NewLine            myObjSerialized.SomeValue, Di2015NewLine            myObjSerialized.SomeValueUpdatedDi2015NewLine        );Di2015NewLine    }Di2015NewLine}Di2015NewLine
18455168Di2015UniqueSeparatorMyObject
18455168Di2015UniqueSeparatorinternal
18455168Di2015UniqueSeparatorpublic MyObject(double someValue, DateTime someValueUpdated)
18455178Di2015UniqueSeparatorvar tasks = new []Di2015NewLine{Di2015NewLine    Task.Factory.StartNew(() => File.ReadAllText(@"file1.txt")),Di2015NewLine    Task.Factory.StartNew(() => File.ReadAllText(@"file2.txt")),Di2015NewLine    Task.Factory.StartNew(() => File.ReadAllText(@"file3.txt")),Di2015NewLine};Di2015NewLineDi2015NewLineTask.Factory.ContinueWhenAll(tasks, ts =>Di2015NewLine{Di2015NewLine    var output = @"writefile.txt";Di2015NewLine    File.WriteAllText(output, ts[0].Result);Di2015NewLine    File.AppendAllText(output, ts[1].Result);Di2015NewLine    File.AppendAllText(output, ts[2].Result);Di2015NewLine    Console.WriteLine("Done.");Di2015NewLine});Di2015NewLine
18455178Di2015UniqueSeparatorvar write = @"writefile.txt";Di2015NewLineFile.WriteAllText(write, null);Di2015NewLineDi2015NewLinenew []Di2015NewLine{Di2015NewLine    Observable.Start(() => File.ReadAllText(@"file1.txt")),Di2015NewLine    Observable.Start(() => File.ReadAllText(@"file2.txt")),Di2015NewLine    Observable.Start(() => File.ReadAllText(@"file3.txt")),Di2015NewLine}Di2015NewLine    .Merge()Di2015NewLine    .Subscribe(Di2015NewLine        x => File.AppendAllText(write, x),Di2015NewLine        () => Console.WriteLine("Done."));Di2015NewLine
18455178Di2015UniqueSeparatorwhile (!filereader.IsFinished)Di2015NewLine{Di2015NewLine    IAsyncResult ar = readf.BeginInvoke(new AsyncCallback(myCallback),null);Di2015NewLine}Di2015NewLine
18455178Di2015UniqueSeparatorFileReader
18455178Di2015UniqueSeparatorstatic
18455178Di2015UniqueSeparatorpublic StreamReader toRead { get; set; }Di2015NewLine
18455178Di2015UniqueSeparatorpublic static void readFileAsync(FileReader filereader)Di2015NewLine{Di2015NewLine    var readf = new ReadFile(filereader.ReadLine);Di2015NewLine    Action<IAsyncResult> callBack = null;Di2015NewLine    callBack = iar =>Di2015NewLine    {Di2015NewLine        var line = readf.EndInvoke(iar);Di2015NewLine        writefile.writeLine(line);Di2015NewLine        if (!filereader.IsFinished)Di2015NewLine        {Di2015NewLine            readf.BeginInvoke(new AsyncCallback(callBack), null);Di2015NewLine        }Di2015NewLine    };Di2015NewLine    if (!filereader.IsFinished)Di2015NewLine    {Di2015NewLine        readf.BeginInvoke(new AsyncCallback(callBack), null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18455178Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        using (var writefile = new FileWriter(@"writefile.txt"))Di2015NewLine        {Di2015NewLine            Action<string> readAndWrite= fn =>Di2015NewLine            {Di2015NewLine                using (var fr = new FileReader(fn))Di2015NewLine                {Di2015NewLine                    while (!fr.IsFinished)Di2015NewLine                    {Di2015NewLine                        writefile.writeLine(fr.ReadLine());Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            };Di2015NewLineDi2015NewLine            AsyncCallback callBack = ar => { };Di2015NewLineDi2015NewLine            var ar1 = readAndWrite.BeginInvoke(@"file1.txt", callBack, null);Di2015NewLine            var ar2 = readAndWrite.BeginInvoke(@"file2.txt", callBack, null);Di2015NewLine            var ar3 = readAndWrite.BeginInvoke(@"file3.txt", callBack, null);Di2015NewLineDi2015NewLine            WaitHandle.WaitAll(new[]Di2015NewLine            {Di2015NewLine                    ar1.AsyncWaitHandle,Di2015NewLine                    ar2.AsyncWaitHandle,Di2015NewLine                    ar3.AsyncWaitHandle,Di2015NewLine            });Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18455200Di2015UniqueSeparator Regex rgx = new Regex("(?<=\\\\t|^)(" + fieldName + ")(\\\\t)+"); Di2015NewLine
18455224Di2015UniqueSeparatorpublic String DecryptPasswordDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return Decrypt(this.Pin);Di2015NewLine    }Di2015NewLine}Di2015NewLine
18455510Di2015UniqueSeparatorStudentSubjects
18455510Di2015UniqueSeparatorStudent
18455510Di2015UniqueSeparatorvar list = from ss in studentSubjectsDi2015NewLine           group ss by s.SubjectName into gDi2015NewLine           select new StudentSubjectsCountsDi2015NewLine           {Di2015NewLine               Name = g.Key,Di2015NewLine               Count = g.Count(),                           Di2015NewLine           };Di2015NewLine
18455510Di2015UniqueSeparatorvar list = students.SelectMany(s => s.StudentSubjects)Di2015NewLine                   .GroupBy(ss => ss.SubjectName)Di2015NewLine                   .Select(g => new StudentSubjectsCountsDi2015NewLine                       {Di2015NewLine                           Name = g.Key,Di2015NewLine                           Count = g.Count(),                           Di2015NewLine                       });Di2015NewLine
