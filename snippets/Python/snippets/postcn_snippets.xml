<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>14667388</id><snippet>__hash__</snippet></ROW><ROW><id>14667388</id><snippet>class Person(object):
    def __init__(self, name=None, address=None):
        self.name = name
        self.address = address

    def __eq__(self, other):
        return self.name == other.name and self.address == other.address

    def __hash__(self):
        return hash((self.name, self.address))
</snippet></ROW><ROW><id>14667388</id><snippet>&gt;&gt;&gt; Counter(people)
Counter({&lt;__main__.Person object at 0x24a7590&gt;: 2, &lt;__main__.Person object at 0x24a75d0&gt;: 1})
</snippet></ROW><ROW><id>14667488</id><snippet>attributes</snippet></ROW><ROW><id>14667488</id><snippet>class</snippet></ROW><ROW><id>14667488</id><snippet>dict</snippet></ROW><ROW><id>14667488</id><snippet>__init__</snippet></ROW><ROW><id>14667488</id><snippet>class demo(object):
    class_level = {'a': 0}
    class_level_nm = 0
    class_level2 = 0
    def __init__(self, v):
        self.instance_level = v 
        self.class_level['a'] += 1
        self.class_level_nm += 1
        demo.class_level2 += 1
    def __str__(self):
        return 'class level (mut): %d  class level (unmut): %d  instance level: %s  class level2: %d' % (self.class_level['a'],
                                                                                     self.class_level_nm,
                                                                                     self.instance_level,
    self.class_level2)

a = demo('a')
b = demo('b')

print a
print b

c = demo('c')

print a
print b
print c
</snippet></ROW><ROW><id>14667488</id><snippet>class level (mut): 2  class level (unmut): 1  instance level: a  class level2: 2
class level (mut): 2  class level (unmut): 1  instance level: b  class level2: 2
class level (mut): 3  class level (unmut): 1  instance level: a  class level2: 3
class level (mut): 3  class level (unmut): 1  instance level: b  class level2: 3
class level (mut): 3  class level (unmut): 1  instance level: c  class level2: 3
</snippet></ROW><ROW><id>14667516</id><snippet>f()</snippet></ROW><ROW><id>14667516</id><snippet>g()</snippet></ROW><ROW><id>14667516</id><snippet>[(f(month), g(month)) for month in months]
</snippet></ROW><ROW><id>14667516</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>14667516</id><snippet>from itertools import chain

chain.from_iterable((f(month), g(month)) for month in months)
</snippet></ROW><ROW><id>14667516</id><snippet>x()</snippet></ROW><ROW><id>14667516</id><snippet>x(*chain.from_iterable((f(month), g(month)) for month in months))
</snippet></ROW><ROW><id>14667516</id><snippet>functools.partial()</snippet></ROW><ROW><id>14667516</id><snippet>from functools import partial

[(partial(f, month), partial(g, month)) for month in months]
</snippet></ROW><ROW><id>14667516</id><snippet>x()</snippet></ROW><ROW><id>14667516</id><snippet>f()</snippet></ROW><ROW><id>14667516</id><snippet>g()</snippet></ROW><ROW><id>14667600</id><snippet>if item not in mylist:
     mylist.append(item)
</snippet></ROW><ROW><id>14667600</id><snippet>myset = set()
myset.add(item)
</snippet></ROW><ROW><id>14667600</id><snippet>mylist = []
myset = set()
for item in ...:
    if item not in myset:
        mylist.append(item)
        myset.add(item)
</snippet></ROW><ROW><id>14667600</id><snippet>from collections import OrderedDict

mydict = OrderedDict()
for item in ...:
    mydict[item] = True
</snippet></ROW><ROW><id>14667686</id><snippet>import matplotlib.transforms as transforms

fig = plt.figure()
ax = fig.add_subplot(111)

trans = transforms.blended_transform_factory(
    ax.transData, ax.transAxes)

ax.plot(range(50))
ax.axvline(20)

ax.text(20, 0.05, 'test', transform=trans, rotation='vertical', ha='right')
</snippet></ROW><ROW><id>14668172</id><snippet>class A(object):
    pass
</snippet></ROW><ROW><id>14668172</id><snippet>object</snippet></ROW><ROW><id>14668172</id><snippet>instance</snippet></ROW><ROW><id>14668172</id><snippet>object</snippet></ROW><ROW><id>14668504</id><snippet>slider</snippet></ROW><ROW><id>14668504</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons

ax = plt.subplot(111)
plt.subplots_adjust(left=0.25, bottom=0.25)
t = np.arange(0.0, 1.0, 0.001)
a0 = 5
f0 = 3
s = a0*np.sin(2*np.pi*f0*t)
l, = plt.plot(t,s, lw=2, color='red')
plt.axis([0, 1, -10, 10])

axcolor = 'lightgoldenrodyellow'
axfreq = plt.axes([0.25, 0.1, 0.65, 0.03], axisbg=axcolor)
axamp  = plt.axes([0.25, 0.15, 0.65, 0.03], axisbg=axcolor)

sfreq = Slider(axfreq, 'Freq', 0.1, 30.0, valinit=f0)
samp = Slider(axamp, 'Amp', 0.1, 10.0, valinit=a0)

def update(val):
    amp = samp.val
    freq = sfreq.val
    l.set_ydata(amp*np.sin(2*np.pi*freq*t))
    plt.draw()
sfreq.on_changed(update)
samp.on_changed(update)

resetax = plt.axes([0.8, 0.025, 0.1, 0.04])
button = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')
def reset(event):
    sfreq.reset()
    samp.reset()
button.on_clicked(reset)

rax = plt.axes([0.025, 0.5, 0.15, 0.15], axisbg=axcolor)
radio = RadioButtons(rax, ('red', 'blue', 'green'), active=0)
def colorfunc(label):
    l.set_color(label)
    plt.draw()
radio.on_clicked(colorfunc)

plt.show()
</snippet></ROW><ROW><id>14668504</id><snippet>#smax.on_changed(update)
chain2 =  chain.generalise(tol)
pp.plotPolylines(chain2)

def update(val):
    tol = tolerance.val # get the value from the slider
    chain2 =  chain.generalise(tol) # shove that value into your code
    ax.cla() # clear the axes
    pp.plotPolylines(chain2) # re-plot your new results

# register the call back
tolerance.on_changed(update)
</snippet></ROW><ROW><id>14668504</id><snippet>tolerance</snippet></ROW><ROW><id>14668504</id><snippet>float</snippet></ROW><ROW><id>14668504</id><snippet>Slider</snippet></ROW><ROW><id>14668504</id><snippet>update</snippet></ROW><ROW><id>14668504</id><snippet>axes</snippet></ROW><ROW><id>14668504</id><snippet>plotPolylines</snippet></ROW><ROW><id>14668504</id><snippet>.on_changed</snippet></ROW><ROW><id>14668504</id><snippet>update</snippet></ROW><ROW><id>14668504</id><snippet>val</snippet></ROW><ROW><id>14668607</id><snippet>for key, value in dictToSearch.items():
    myWriter.writerow({'md5' : key, 'value': value})
</snippet></ROW><ROW><id>14668615</id><snippet>import sympy as sym

x, y = sym.symbols('xy')
f = x + 2*y
g = 3*x - y
h = f + g
</snippet></ROW><ROW><id>14668615</id><snippet>print(h)
# y + 4*x
</snippet></ROW><ROW><id>14668615</id><snippet>h</snippet></ROW><ROW><id>14668615</id><snippet>x</snippet></ROW><ROW><id>14668615</id><snippet>y</snippet></ROW><ROW><id>14668615</id><snippet>print(h.subs(dict(x=4, y=3)))
# 19
print(h.subs(dict(x=1, y=0)))
# 4
</snippet></ROW><ROW><id>14668765</id><snippet>itertools.product()</snippet></ROW><ROW><id>14668765</id><snippet>&gt;&gt;&gt; list(itertools.product(*[range(1, j+1) for j in c]))
[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (1, 3, 1), (1, 3, 2), (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2), (2, 3, 1), (2, 3, 2)]
</snippet></ROW><ROW><id>14668765</id><snippet>&gt;&gt;&gt; [range(1, j+1) for j in c]
[range(1, 3), range(1, 4), range(1, 3)]
</snippet></ROW><ROW><id>14668765</id><snippet>range()</snippet></ROW><ROW><id>14668765</id><snippet>[[1, 2], [1, 2, 3], [1, 2]]</snippet></ROW><ROW><id>14668765</id><snippet>xrange()</snippet></ROW><ROW><id>14668765</id><snippet>itertools.product()</snippet></ROW><ROW><id>14668774</id><snippet>eval</snippet></ROW><ROW><id>14668774</id><snippet>eval(string_a)
# 4
</snippet></ROW><ROW><id>14668774</id><snippet>string_a</snippet></ROW><ROW><id>14668786</id><snippet>shelve</snippet></ROW><ROW><id>14668786</id><snippet>bigd = {'a': 1, 'b':2, # . . .
}
</snippet></ROW><ROW><id>14668786</id><snippet>import shelve

myShelve = shelve.open('my.shelve')
myShelve.update(bigd)
myShelve.close()
</snippet></ROW><ROW><id>14668786</id><snippet>import shelve

myShelve = shelve.open('my.shelve')
value = myShelve['a']
value += 1
myShelve['a'] = value
</snippet></ROW><ROW><id>14668846</id><snippet>for row in csv.reader(csvfile):
    if row[0] == "fac2a47adace059aff113283a03f6760":
        print row[1]
        break
</snippet></ROW><ROW><id>14669022</id><snippet>canvas</snippet></ROW><ROW><id>14669022</id><snippet>redraw()</snippet></ROW><ROW><id>14669022</id><snippet>canvas.after(tim,redraw)</snippet></ROW><ROW><id>14669022</id><snippet>redraw()</snippet></ROW><ROW><id>14669022</id><snippet>tim</snippet></ROW><ROW><id>14669022</id><snippet>randint(-2,2)</snippet></ROW><ROW><id>14669022</id><snippet>[-2,-1,0,1,2]</snippet></ROW><ROW><id>14669022</id><snippet>[-2,2]</snippet></ROW><ROW><id>14669100</id><snippet>class Counter:
    def __init__(self):
        self.hits = 0
        self.visitors = set()

    def addHit(self, ip):
        self.hits += 1
        self.visitors.add(ip)
</snippet></ROW><ROW><id>14669100</id><snippet>#! /usr/bin/python3.2

class Counter:
    def __init__(self):
        self.__hits = 0
        self.__visitors = {}

    def addHit(self, ip):
        self.__hits += 1
        if ip not in self.__visitors:
            self.__visitors [ip] = 0
        self.__visitors [ip] += 1

    @property
    def hits (self):
        return self.__hits

    @property
    def uniqueHits (self):
        return len (self.__visitors)

    @property
    def ips (self):
        return (ip for ip in self.__visitors)

    def __getitem__ (self, ip):
        return 0 if ip not in self.__visitors else self.__visitors [ip]

c = Counter ()

c.addHit ('1.1.1.1')
c.addHit ('1.1.1.1')
c.addHit ('1.1.1.1')
c.addHit ('1.1.1.1')
c.addHit ('1.1.1.2')
c.addHit ('1.1.1.2')
c.addHit ('1.1.1.3')

print (c.hits)
print (c.uniqueHits)
for ip in c.ips:
    print (ip, c [ip] )
</snippet></ROW><ROW><id>14669130</id><snippet>copytree()</snippet></ROW><ROW><id>14669130</id><snippet>os.listdir()</snippet></ROW><ROW><id>14669130</id><snippet>copytree()</snippet></ROW><ROW><id>14669130</id><snippet>def what_to_ignore(path,names):
    if is_special(path):
        # process names here returning any or all to ignore

shutil.copytree(indir,outdir,ignore=what_to_ignore)
</snippet></ROW><ROW><id>14669130</id><snippet>my_copy</snippet></ROW><ROW><id>14669130</id><snippet>import fnmatch
import shutil
import os

def my_copy(indir, outdir):

    special = []

    def is_special_dir(path, names):
        """directories are special if they have .bar files"""
        if fnmatch.filter(names,'*.bar'):
            special.append(path)
            return names
        return []    

    shutil.copytree(indir, outdir, ignore=is_special_dir)
    print('Found special dirs:',special)

    for src in special:
        rel = os.path.relpath(src,indir)
        dst = os.path.join(outdir,rel)
        os.rmdir(dst)
        print('Zip "{}" to "{}.zip"'.format(src,dst))

my_copy('dir1','dira')
my_copy('dir1','dirb')
</snippet></ROW><ROW><id>14669130</id><snippet>Found special dirs: ['dir1\\specialdir']
Zip "dir1\specialdir" to "dira\specialdir.zip"
Found special dirs: ['dir1\\specialdir']
Zip "dir1\specialdir" to "dirb\specialdir.zip"
</snippet></ROW><ROW><id>14669325</id><snippet>from __main__ import tree</snippet></ROW><ROW><id>14669325</id><snippet>t1 = timeit.Timer("binarytree.traverse_asc(tree,binarytree.printout)",
                  setup = "import binarytree; from __main__ import tree")
</snippet></ROW><ROW><id>14669325</id><snippet>tree</snippet></ROW><ROW><id>14669325</id><snippet>t1 = timeit.Timer("binarytree.traverse_asc(tree,binarytree.printout)",
                  setup = "import binarytree; tree = mkthing(0,10)")
</snippet></ROW><ROW><id>14669444</id><snippet>try</snippet></ROW><ROW><id>14669444</id><snippet>except</snippet></ROW><ROW><id>14669444</id><snippet>&gt;&gt;&gt; try:
...     fsock = open("something_that_does_not_exist")
... except IOError:
...     print "The file does not exist"
...
&lt;output is here&gt;
</snippet></ROW><ROW><id>14669444</id><snippet>&gt;&gt;&gt; print "Let's keep going"
</snippet></ROW><ROW><id>14669444</id><snippet>&gt;&gt;&gt; try:
...     print 'hi'
... except:
...     print 'yo'
... print 'hi'
  File "&lt;stdin&gt;", line 5
    print 'hi'
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14669687</id><snippet>class Bet(models.Model):
    name = models.CharField(max_length=100)
    email_1 = models.EmailField()
    email_2 = models.EmailField()
    wager = models.CharField(max_length=300)
    date_submitted = models.DateField(_("Date"), auto_now_add=True) 
    date_returned = models.DateField(null=True)
    email_sent = model.BooleanField(default=False)
</snippet></ROW><ROW><id>14669687</id><snippet>from django.core.management.base import BaseCommand, CommandError
from app_name.models import bet 

class Command(BaseCommand):
    def handle(self, *args, **options):
        for bet in bet.objects.filter(date_returned__gt=datetime.datetime.now(),email_sent=False):
            #python code to send email
            bet.email_sent=True
            bet.save()
</snippet></ROW><ROW><id>14669723</id><snippet>textBox</snippet></ROW><ROW><id>14669723</id><snippet>initUI</snippet></ROW><ROW><id>14669723</id><snippet>textBox</snippet></ROW><ROW><id>14669723</id><snippet>self.textBox = QtGui.QLineEdit()</snippet></ROW><ROW><id>14669723</id><snippet>printTextInput</snippet></ROW><ROW><id>14669723</id><snippet>print self.textBox.text()</snippet></ROW><ROW><id>14669892</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; req = requests.get("http://www.mathworks.com/moler/random.pdf")
&gt;&gt;&gt; len(req.content)
167633
&gt;&gt;&gt; req.headers
{'content-length': '167633', 'accept-ranges': 'bytes', 'server': 'Apache/2.2.3 (Red Hat) mod_jk/1.2.31 PHP/5.3.13 Phusion_Passenger/3.0.9 mod_perl/2.0.4 Perl/v5.8.8', 'last-modified': 'Fri, 15 Feb 2008 17:11:12 GMT', 'connection': 'keep-alive', 'etag': '"30863b-28ed1-446357e3d4c00"', 'date': 'Sun, 03 Feb 2013 05:53:21 GMT', 'content-type': 'application/pdf'}
</snippet></ROW><ROW><id>14669892</id><snippet>http://www.mathworks.com/moler/random.pdf
</snippet></ROW><ROW><id>14669892</id><snippet>http://www.mathworks.com/moler/random.pdf/

&gt;&gt;&gt; import requests
&gt;&gt;&gt; c = requests.get("http://www.mathworks.com/moler/random.pdf/")
&gt;&gt;&gt; len(c.content)
14390
</snippet></ROW><ROW><id>14670098</id><snippet>import lxml.etree as ET
data = ET.parse('sample.xml')
regexpNS = "http://exslt.org/regular-expressions"
for entry in data.iter('entry'):
    A = entry.xpath('.//*[re:test(text(), ".*\(.*\).*")]',
                    namespaces={'re':regexpNS})
</snippet></ROW><ROW><id>14670098</id><snippet>text()</snippet></ROW><ROW><id>14670098</id><snippet>string()</snippet></ROW><ROW><id>14670098</id><snippet> import re
 import lxml.etree as ET
 rx = re.compile('.*\(.*\).*')
 data = ET.parse('sample.xml')
 for entry in data.iter('entry'):
    for child in entry.xpath('.//*'):
        if rx.match(child.text + child.tail):
            # Your manipulations go here
            print child
</snippet></ROW><ROW><id>14670098</id><snippet>.*\(.*\).*</snippet></ROW><ROW><id>14670254</id><snippet>l = list(set(i.lower() for i in l))
</snippet></ROW><ROW><id>14670259</id><snippet>&gt;&gt;&gt; def f(*args, **kwargs):
...     return lambda: a(*args, **kwargs)
...
&gt;&gt;&gt; f(10, 0)()
55
</snippet></ROW><ROW><id>14670289</id><snippet>while True:
    updateLocationBar() # ;)
</snippet></ROW><ROW><id>14670289</id><snippet>self.webview.open()</snippet></ROW><ROW><id>14670289</id><snippet>def self.webview.mysuperawesomeopen(uri):
    updateLocationBar()
    self.webview.open(uri)
</snippet></ROW><ROW><id>14670289</id><snippet>.open()</snippet></ROW><ROW><id>14670289</id><snippet>self.webview.openit = self.window.open
def self.window.open(uri):
    updateLocationBar()
    self.webview.openit(uri)
</snippet></ROW><ROW><id>14670289</id><snippet>self.window.open()</snippet></ROW><ROW><id>14670289</id><snippet>def labelled(f):
    def labelgo(*args, **kwargs):
        updateLocationBar(*args, **kwargs)
        self.webview.open(*args, **kwargs)
    return labelgo

@labelled # You add this and leave the rest of self.window.open alone
def self.window.open(uri):
    ...
</snippet></ROW><ROW><id>14670594</id><snippet>line = open(ilogfile).readline()

if final.strip() in line.strip():
    connect = "yes"
else:
    connect = "no"
</snippet></ROW><ROW><id>14670650</id><snippet>reshape</snippet></ROW><ROW><id>14670650</id><snippet>pad</snippet></ROW><ROW><id>14670650</id><snippet>spread</snippet></ROW><ROW><id>14670650</id><snippet>array2d = spread(array1d,2,2)
</snippet></ROW><ROW><id>14670650</id><snippet>spread</snippet></ROW><ROW><id>14670650</id><snippet>spread(array1d,1,2)</snippet></ROW><ROW><id>14670650</id><snippet>b = spread(a,2,j)
</snippet></ROW><ROW><id>14670650</id><snippet>b = spread(a,1,j)
</snippet></ROW><ROW><id>14670650</id><snippet>spread</snippet></ROW><ROW><id>14670815</id><snippet>Basic.create_ck_user('fb', fb_id, fb_token)
</snippet></ROW><ROW><id>14670815</id><snippet># inside class definition  
    @classmethod
    def create_ck_user(cls, acc_type, fb_id,fb_token):
        # "Create a user and insert into auth_user table"
        user = cls.objects.create_user(acc_type,fb_id,fb_token)
        user.save()
</snippet></ROW><ROW><id>14670947</id><snippet>for _ in range(input()):print"%.15f"%sum(1/(2.0*i+1)for i in range(input()))
</snippet></ROW><ROW><id>14671158</id><snippet>greet</snippet></ROW><ROW><id>14671158</id><snippet>@property</snippet></ROW><ROW><id>14671158</id><snippet>class Foo(FooBase):
    @property
    def greet(self):
        return 'hello'
</snippet></ROW><ROW><id>14671158</id><snippet>property</snippet></ROW><ROW><id>14671158</id><snippet>@property</snippet></ROW><ROW><id>14671158</id><snippet>@abstractmethod</snippet></ROW><ROW><id>14671158</id><snippet>@abstractproperty</snippet></ROW><ROW><id>14671175</id><snippet>#! /usr/bin/python3.2

import itertools

def queens ():
    for p in itertools.permutations (range (8) ):
        yield [x for x in enumerate (p) ]

for q in queens ():
    err = False
    for a, b in ( (a, b) for a in q for b in q if a [0] &lt; b [0] ):
        if abs (a [0] - b [0] ) == abs (a [1] - b [1] ):
            err = True
            break
    if not err: print (q)
</snippet></ROW><ROW><id>14671263</id><snippet>int</snippet></ROW><ROW><id>14671263</id><snippet>self</snippet></ROW><ROW><id>14671263</id><snippet>int</snippet></ROW><ROW><id>14671263</id><snippet>int</snippet></ROW><ROW><id>14671263</id><snippet>__new__</snippet></ROW><ROW><id>14671263</id><snippet>self</snippet></ROW><ROW><id>14671263</id><snippet>__iadd__</snippet></ROW><ROW><id>14671263</id><snippet>__init__</snippet></ROW><ROW><id>14671263</id><snippet>__new__</snippet></ROW><ROW><id>14671263</id><snippet>self</snippet></ROW><ROW><id>14671263</id><snippet>self</snippet></ROW><ROW><id>14671263</id><snippet>&gt;&gt;&gt; class Foo(int):
...     def __init__(self, value=0):
...         print self, type(self)
...         self = 'foobar'
...         print type(self)
... 
&gt;&gt;&gt; foo = Foo(10)
10 &lt;class '__main__.Foo'&gt;
&lt;type 'str'&gt;
&gt;&gt;&gt; print foo, type(foo)
10 &lt;class '__main__.Foo'&gt;
</snippet></ROW><ROW><id>14671263</id><snippet>int</snippet></ROW><ROW><id>14671263</id><snippet>__iadd__</snippet></ROW><ROW><id>14671263</id><snippet>self += 2</snippet></ROW><ROW><id>14671263</id><snippet>self = self + 2</snippet></ROW><ROW><id>14671263</id><snippet>self</snippet></ROW><ROW><id>14671347</id><snippet>request.GET.get('bar')</snippet></ROW><ROW><id>14671347</id><snippet>str</snippet></ROW><ROW><id>14671347</id><snippet>NoneType</snippet></ROW><ROW><id>14671347</id><snippet>int</snippet></ROW><ROW><id>14671347</id><snippet>1</snippet></ROW><ROW><id>14671347</id><snippet>bar</snippet></ROW><ROW><id>14671347</id><snippet>def foo(request):
    try:
        bar = 1 + int(request.GET['bar'])
    except:
        bar = 0
    return render('parrot.html', {'bar':bar})
</snippet></ROW><ROW><id>14671347</id><snippet>try...except</snippet></ROW><ROW><id>14671347</id><snippet>get_int</snippet></ROW><ROW><id>14671481</id><snippet>inReport*</snippet></ROW><ROW><id>14671481</id><snippet>cvss_base_score</snippet></ROW><ROW><id>14671481</id><snippet>import xml.etree.cElementTree as etree

def getelements(filename_or_file, tag):
    context = iter(etree.iterparse(filename_or_file, events=('start', 'end')))
    _, root = next(context) # get root element
    for event, elem in context:
        if event == 'end' and elem.tag == tag:
            yield elem
            root.clear() # preserve memory

for host in getelements("test2.nessus", "ReportHost"):
    for cvss_el in host.iter("cvss_base_score"):
        print(cvss_el.text)
</snippet></ROW><ROW><id>14671542</id><snippet>_single_leading_underscore</snippet></ROW><ROW><id>14671542</id><snippet>from M import *</snippet></ROW><ROW><id>14671542</id><snippet>single_trailing_underscore_</snippet></ROW><ROW><id>14671542</id><snippet>Tkinter.Toplevel(master, class_='ClassName')</snippet></ROW><ROW><id>14671542</id><snippet>__double_leading_underscore</snippet></ROW><ROW><id>14671542</id><snippet>__boo</snippet></ROW><ROW><id>14671542</id><snippet>_FooBar__boo</snippet></ROW><ROW><id>14671542</id><snippet>__double_leading_and_trailing_underscore__</snippet></ROW><ROW><id>14671542</id><snippet>__init__</snippet></ROW><ROW><id>14671542</id><snippet>__import__</snippet></ROW><ROW><id>14671542</id><snippet>__file__</snippet></ROW><ROW><id>14671542</id><snippet>self._var1</snippet></ROW><ROW><id>14671542</id><snippet>private</snippet></ROW><ROW><id>14671542</id><snippet>protected</snippet></ROW><ROW><id>14671542</id><snippet>self._var1_</snippet></ROW><ROW><id>14671542</id><snippet>self.__var1</snippet></ROW><ROW><id>14671542</id><snippet>self._YourClassName__var1</snippet></ROW><ROW><id>14671542</id><snippet>self.__var1</snippet></ROW><ROW><id>14671542</id><snippet>self.__var1__</snippet></ROW><ROW><id>14671542</id><snippet>__init__</snippet></ROW><ROW><id>14671542</id><snippet>__eq__</snippet></ROW><ROW><id>14671542</id><snippet>__init__</snippet></ROW><ROW><id>14671542</id><snippet>self.__var1__</snippet></ROW><ROW><id>14671627</id><snippet>scipy</snippet></ROW><ROW><id>14671627</id><snippet>scipy.stats.rankdata</snippet></ROW><ROW><id>14671627</id><snippet>scipy.stats.mstats.rankdata</snippet></ROW><ROW><id>14671627</id><snippet>np.searchsorted</snippet></ROW><ROW><id>14671627</id><snippet>In [1]: import numpy as np

In [2]: from scipy.stats import rankdata as rd
   ...: from scipy.stats.mstats import rankdata as rd2
   ...: 

In [3]: array = np.arange(0.1, 1000000.1)

In [4]: %timeit np.searchsorted(np.sort(array), array)
1 loops, best of 3: 385 ms per loop

In [5]: %timeit rd(array)
10 loops, best of 3: 109 ms per loop

In [6]: %timeit rd2(array)
1 loops, best of 3: 205 ms per loop
</snippet></ROW><ROW><id>14671947</id><snippet>publication_date</snippet></ROW><ROW><id>14671947</id><snippet>Book</snippet></ROW><ROW><id>14671947</id><snippet>no attribute 'year'</snippet></ROW><ROW><id>14671947</id><snippet>datetime</snippet></ROW><ROW><id>14671947</id><snippet>publication_date</snippet></ROW><ROW><id>14671947</id><snippet>publication_date = models.DateField(auto_add_now=True)
</snippet></ROW><ROW><id>14671947</id><snippet>auto_add_now</snippet></ROW><ROW><id>14671947</id><snippet>publication_date</snippet></ROW><ROW><id>14671947</id><snippet>DateField</snippet></ROW><ROW><id>14671947</id><snippet>publication_date</snippet></ROW><ROW><id>14671947</id><snippet>$ python manage.py sqlclear &lt;app_name&gt; | python manage.py dbshell
</snippet></ROW><ROW><id>14671947</id><snippet>sqlclear</snippet></ROW><ROW><id>14671947</id><snippet>|</snippet></ROW><ROW><id>14671947</id><snippet>dbshell</snippet></ROW><ROW><id>14671947</id><snippet>$ python manage.py syncdb
</snippet></ROW><ROW><id>14672252</id><snippet>open()</snippet></ROW><ROW><id>14672326</id><snippet>@</snippet></ROW><ROW><id>14672326</id><snippet>\Z</snippet></ROW><ROW><id>14672326</id><snippet>^</snippet></ROW><ROW><id>14672326</id><snippet>|</snippet></ROW><ROW><id>14672326</id><snippet>((?&lt;=blah)(?:[^@]+|\Z))
</snippet></ROW><ROW><id>14672326</id><snippet>(?:...)</snippet></ROW><ROW><id>14672326</id><snippet>@</snippet></ROW><ROW><id>14672326</id><snippet>\Z</snippet></ROW><ROW><id>14672354</id><snippet>0.01</snippet></ROW><ROW><id>14672354</id><snippet>0.5</snippet></ROW><ROW><id>14672382</id><snippet>sys.modules</snippet></ROW><ROW><id>14672382</id><snippet>sys.modules</snippet></ROW><ROW><id>14672382</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; import sys
&gt;&gt;&gt; del timeit  # remove local reference to the timeit module
&gt;&gt;&gt; del sys.modules['timeit']  # remove module
</snippet></ROW><ROW><id>14672472</id><snippet>[start:stop:step]</snippet></ROW><ROW><id>14672472</id><snippet>'\t'.join((line[:14], line[15:]))
</snippet></ROW><ROW><id>14672472</id><snippet>&gt;&gt;&gt; line = '05,21,34,37,38,01,06'
&gt;&gt;&gt; line[:14]
'05,21,34,37,38'
&gt;&gt;&gt; line[15:]
'01,06'
&gt;&gt;&gt; '\t'.join((line[:14], line[15:]))
'05,21,34,37,38\t01,06'
</snippet></ROW><ROW><id>14672477</id><snippet>df = df[start_timestamp:end_timestamp]
</snippet></ROW><ROW><id>14672477</id><snippet>In [1]: import pandas as pd

In [2]: import numpy as np

In [3]: data = pd.DataFrame({"value": np.arange(5)}, index=pd.date_range("2013/02/03", periods=5, freq="3Min"))

In [4]: data
Out[4]: 
                     value
2013-02-03 00:00:00      0
2013-02-03 00:03:00      1
2013-02-03 00:06:00      2
2013-02-03 00:09:00      3
2013-02-03 00:12:00      4

In [5]: filler = pd.DataFrame({"value": [100] * 15}, index=pd.date_range("2013/02/03", periods=15, freq="1Min"))                                                                           

In [6]: filler
Out[6]: 
                     value
2013-02-03 00:00:00    100
2013-02-03 00:01:00    100
2013-02-03 00:02:00    100
2013-02-03 00:03:00    100
2013-02-03 00:04:00    100
2013-02-03 00:05:00    100
2013-02-03 00:06:00    100
2013-02-03 00:07:00    100
2013-02-03 00:08:00    100
2013-02-03 00:09:00    100
2013-02-03 00:10:00    100
2013-02-03 00:11:00    100
2013-02-03 00:12:00    100
2013-02-03 00:13:00    100
2013-02-03 00:14:00    100

In [7]: merged = filler.merge(data, how='left', left_index=True, right_index=True)                                                                                                         

In [8]: merged["value"] = np.where(np.isfinite(merged.value_y), merged.value_y, merged.value_x)                                                                                            

In [9]: merged
Out[9]: 
                     value_x  value_y  value
2013-02-03 00:00:00      100        0      0
2013-02-03 00:01:00      100      NaN    100
2013-02-03 00:02:00      100      NaN    100
2013-02-03 00:03:00      100        1      1
2013-02-03 00:04:00      100      NaN    100
2013-02-03 00:05:00      100      NaN    100
2013-02-03 00:06:00      100        2      2
2013-02-03 00:07:00      100      NaN    100
2013-02-03 00:08:00      100      NaN    100
2013-02-03 00:09:00      100        3      3
2013-02-03 00:10:00      100      NaN    100
2013-02-03 00:11:00      100      NaN    100
2013-02-03 00:12:00      100        4      4
2013-02-03 00:13:00      100      NaN    100
2013-02-03 00:14:00      100      NaN    100

In [10]: merged['2013-02-03 00:01:00':'2013-02-03 00:10:00']                                                                                                                                
Out[10]: 
                     value_x  value_y  value
2013-02-03 00:01:00      100      NaN    100
2013-02-03 00:02:00      100      NaN    100
2013-02-03 00:03:00      100        1      1
2013-02-03 00:04:00      100      NaN    100
2013-02-03 00:05:00      100      NaN    100
2013-02-03 00:06:00      100        2      2
2013-02-03 00:07:00      100      NaN    100
2013-02-03 00:08:00      100      NaN    100
2013-02-03 00:09:00      100        3      3
2013-02-03 00:10:00      100      NaN    100
</snippet></ROW><ROW><id>14672532</id><snippet>os.rename</snippet></ROW><ROW><id>14672767</id><snippet>wave_date = sampling_rate * np.diff(wave_data)
</snippet></ROW><ROW><id>14672767</id><snippet>wave_date = sampling_rate * (wave_data[1:] - wave_data[:-1])
</snippet></ROW><ROW><id>14672767</id><snippet>In [7]: sampling_rate = 2

In [8]: wave_data = np.array([1, 3, 5, 2, 8, 10])

In [9]: sampling_rate * (wave_data[1:] - wave_data[:-1])
Out[9]: array([ 4,  4, -6, 12,  4])
</snippet></ROW><ROW><id>14672767</id><snippet>In [16]: wave_data = np.array([1., 3, 5, 2, 8, 10, 5, 2, 4, 7] * 44100)

In [17]: %timeit sampling_rate * np.diff(wave_data)
100 loops, best of 3: 2.2 ms per loop

In [18]: %timeit sampling_rate * (wave_data[1:] - wave_data[:-1])
100 loops, best of 3: 2.15 ms per loop

In [19]: %timeit [sampling_rate * (wave_data[i+1] - wave_data[i]) for i in xrange(len(wave_data)-1)]
1 loops, best of 3: 970 ms per loop
</snippet></ROW><ROW><id>14672961</id><snippet>desktop-save' and function
</snippet></ROW><ROW><id>14673111</id><snippet>from sqlalchemy import union_all

q1 = Session.query(..).filter(..).filter(..).order_by(..).limit(..).subquery()
q2 = Session.query(..).filter(..).filter(..).order_by(..).limit(..).subquery()
q = Session.query(..).select_from(union_all(q1.select(), q2.select()).order_by(..).all()
</snippet></ROW><ROW><id>14673111</id><snippet>.subquery()</snippet></ROW><ROW><id>14673111</id><snippet>union_all</snippet></ROW><ROW><id>14673111</id><snippet>select_from()</snippet></ROW><ROW><id>14673111</id><snippet>sqlalchemy.sql.expression.union_all()</snippet></ROW><ROW><id>14673649</id><snippet>Series</snippet></ROW><ROW><id>14673649</id><snippet>In [116]: df["Date"]
Out[116]: 
0           2012-10-08 07:12:22
1           2012-10-08 09:14:00
2           2012-10-08 09:15:00
3           2012-10-08 09:15:01
4    2012-10-08 09:15:01.500000
5           2012-10-08 09:15:02
6    2012-10-08 09:15:02.500000
7           2012-10-10 07:19:30
8           2012-10-10 09:14:00
9           2012-10-10 09:15:00
10          2012-10-10 09:15:01
11   2012-10-10 09:15:01.500000
12          2012-10-10 09:15:02
Name: Date
</snippet></ROW><ROW><id>14673649</id><snippet>Timestamp</snippet></ROW><ROW><id>14673649</id><snippet>In [117]: df["Date"][0]
Out[117]: &lt;Timestamp: 2012-10-08 07:12:22&gt;
</snippet></ROW><ROW><id>14673649</id><snippet>.date()</snippet></ROW><ROW><id>14673649</id><snippet>In [118]: df["Date"][0].date()
Out[118]: datetime.date(2012, 10, 8)
</snippet></ROW><ROW><id>14673649</id><snippet>.unique()</snippet></ROW><ROW><id>14673649</id><snippet>map</snippet></ROW><ROW><id>14673649</id><snippet>lambda</snippet></ROW><ROW><id>14673649</id><snippet>In [126]: df["Date"].map(lambda t: t.date()).unique()
Out[126]: array([2012-10-08, 2012-10-10], dtype=object)
</snippet></ROW><ROW><id>14673649</id><snippet>Timestamp.date</snippet></ROW><ROW><id>14673649</id><snippet>In [127]: df["Date"].map(pd.Timestamp.date).unique()
Out[127]: array([2012-10-08, 2012-10-10], dtype=object)
</snippet></ROW><ROW><id>14673887</id><snippet>*arr</snippet></ROW><ROW><id>14673887</id><snippet>*</snippet></ROW><ROW><id>14673887</id><snippet>msa2</snippet></ROW><ROW><id>14673887</id><snippet>arr</snippet></ROW><ROW><id>14673887</id><snippet>msa2</snippet></ROW><ROW><id>14673887</id><snippet>msa2</snippet></ROW><ROW><id>14673887</id><snippet>&gt;&gt;&gt; def foo(*args):
...     print args
... 
&gt;&gt;&gt; foo(1, 2, 3)
(1, 2, 3)
&gt;&gt;&gt; foo([1, 2, 3])
([1, 2, 3],)
</snippet></ROW><ROW><id>14673887</id><snippet>0</snippet></ROW><ROW><id>14673887</id><snippet>maxThus</snippet></ROW><ROW><id>14673887</id><snippet>max(maxThus, sum)</snippet></ROW><ROW><id>14673887</id><snippet>maxThus</snippet></ROW><ROW><id>14673887</id><snippet>maxThus = max(maxThus, sum)
</snippet></ROW><ROW><id>14673899</id><snippet>    def onpick3(event):
            ind = event.ind
    l = np.take(x,ind)
        for i in range(0,1):
                d = l[i]



    if highlight == 1 :

        global highlight
        highlight = 0;
        self.canvas.draw()
            if highlight == 0 :

            trans = transforms.blended_transform_factory(self.axes.transData, self.axes.transAxes)
                rect = patches.Rectangle(((d-10),0),width=25, height=25, transform=trans, color='yellow',alpha=0.5)
                self.axes.add_patch(rect)
            self.canvas.draw()
        rect.remove()
        else:
         self.canvas.draw()
         trans = transforms.blended_transform_factory(self.axes.transData, self.axes.transAxes)
             rect = patches.Rectangle(((d-10),0),width=25, height=25, transform=trans, color='yellow',alpha=0.5)
             self.axes.add_patch(rect)
         self.canvas.draw()
         highlight = 1
         rect.remove()
            print ('onpick3 scatter:', ind, np.take(x, ind), np.take(y, ind))
</snippet></ROW><ROW><id>14673938</id><snippet>.append()</snippet></ROW><ROW><id>14673938</id><snippet>x, y, z = [], [], []
for d, sublist in enumerate(productID):
    for entry in sublist:
        if entry.startswith(u'sku'):
            x.append(map[entry])
            y.append(name[d])
            z.append(priceID[d][entry].get(u'e'))
</snippet></ROW><ROW><id>14673938</id><snippet>enumerate()</snippet></ROW><ROW><id>14673938</id><snippet>name</snippet></ROW><ROW><id>14673938</id><snippet>priceID</snippet></ROW><ROW><id>14673938</id><snippet>.append()</snippet></ROW><ROW><id>14673938</id><snippet>&gt;&gt;&gt; foo = []
&gt;&gt;&gt; foo.append('bar')
&gt;&gt;&gt; foo.append('spam')
&gt;&gt;&gt; foo
['bar', 'spam']
</snippet></ROW><ROW><id>14674108</id><snippet>Vari\351es</snippet></ROW><ROW><id>14674108</id><snippet>\</snippet></ROW><ROW><id>14674108</id><snippet>351</snippet></ROW><ROW><id>14674108</id><snippet>é</snippet></ROW><ROW><id>14674108</id><snippet>import re

invalid_escape = re.compile(r'\\[0-7]{1,6}')  # up to 6 digits for codepoints up to FFFF

def replace_with_codepoint(match):
    return unichr(int(match.group(0)[1:], 8))


def repair(brokenjson):
    return invalid_escape.sub(replace_with_codepoint, brokenjson)
</snippet></ROW><ROW><id>14674108</id><snippet>repair()</snippet></ROW><ROW><id>14674108</id><snippet>&gt;&gt;&gt; json.loads(repair(r'{"translatedatt1":"Vari\351es"}'))
{u'translatedatt1': u'Vari\xe9es'}
</snippet></ROW><ROW><id>14674108</id><snippet>Variées</snippet></ROW><ROW><id>14674326</id><snippet>file(filename).read()
</snippet></ROW><ROW><id>14674326</id><snippet>with open(filename) as f:
    for line in f:
</snippet></ROW><ROW><id>14674326</id><snippet>In [1]: import collections

In [2]: freq = collections.Counter()

In [3]: line = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod'

In [4]: freq.update(line.split())

In [5]: freq
Out[5]: Counter({'ipsum': 1, 'amet,': 1, 'do': 1, 'sit': 1, 'eiusmod': 1, 'consectetur': 1, 'sed': 1, 'elit,': 1, 'dolor': 1, 'Lorem': 1, 'adipisicing': 1})
</snippet></ROW><ROW><id>14674326</id><snippet>In [6]: freq.update(line.split())

In [7]: freq
Out[7]: Counter({'ipsum': 2, 'amet,': 2, 'do': 2, 'sit': 2, 'eiusmod': 2, 'consectetur': 2, 'sed': 2, 'elit,': 2, 'dolor': 2, 'Lorem': 2, 'adipisicing': 2})
</snippet></ROW><ROW><id>14674326</id><snippet>collections.Counter</snippet></ROW><ROW><id>14674326</id><snippet>dict</snippet></ROW><ROW><id>14674366</id><snippet>&lt;a href="?page={{ paginator.next_page_number }}&amp;my_filter_a={{ my_filter_a }}&amp;my_filter_b={{ my_filter_b }}"&gt;Next&lt;/a&gt;
</snippet></ROW><ROW><id>14674371</id><snippet>firstline = True
for row in kidfile:
    if firstline:    #skip first line
        firstline = False
        continue
    # parse the line
</snippet></ROW><ROW><id>14674371</id><snippet>readline</snippet></ROW><ROW><id>14674371</id><snippet>kidfile.readline()   # skip the first line
for row in kidfile:
    #parse the line
</snippet></ROW><ROW><id>14674872</id><snippet>setup.cfg</snippet></ROW><ROW><id>14674872</id><snippet>[nosetests]
attr=!speed=slow
</snippet></ROW><ROW><id>14674950</id><snippet>ssock.bind(("", PORT))
</snippet></ROW><ROW><id>14675170</id><snippet>randint(0, 1)</snippet></ROW><ROW><id>14675170</id><snippet>str(right_write)</snippet></ROW><ROW><id>14675170</id><snippet>int(wire_choice)</snippet></ROW><ROW><id>14675170</id><snippet>nonzero</snippet></ROW><ROW><id>14675170</id><snippet>int</snippet></ROW><ROW><id>14675170</id><snippet>bool(randint(0, 1))</snippet></ROW><ROW><id>14675170</id><snippet>randint(0, 1) == 0</snippet></ROW><ROW><id>14675393</id><snippet>treetaggerwrapper.py</snippet></ROW><ROW><id>14675393</id><snippet>python/Lib</snippet></ROW><ROW><id>14675393</id><snippet>import treetaggerwrapper
tagger = treetaggerwrapper.TreeTagger(TAGLANG='en',TAGDIR='D:/Programme/TreeTagger')
tags = tagger.TagText("This is a very short text to tag.")
print tags
</snippet></ROW><ROW><id>14675393</id><snippet>Lib/site-packages/TreeTaggerWrapper/treetaggerwrapper.py</snippet></ROW><ROW><id>14675393</id><snippet>from TreeTaggerWrapper import treetaggerwrapper
tagger = treetaggerwrapper.TreeTagger(TAGLANG='en',TAGDIR='D:/Programme/TreeTagger')
tags = tagger.TagText("This is a very short text to tag.")
print tags
</snippet></ROW><ROW><id>14675436</id><snippet>((State != Closed) AND (State != Fixed) AND (State != Submitted))
</snippet></ROW><ROW><id>14675436</id><snippet>(((State != Closed) AND (State != Fixed)) AND (State != Submitted))
</snippet></ROW><ROW><id>14676072</id><snippet>class mywords():
  def __init__(self):
    self.word_list = ... #code to create word list

  def pick_starting_point(self):
    # do something with self.word_list
    return ...
</snippet></ROW><ROW><id>14676072</id><snippet>words = mywords()
words.pick_starting_point()
...
</snippet></ROW><ROW><id>14676149</id><snippet>SQL =</snippet></ROW><ROW><id>14676149</id><snippet>def execSp(*args):
  AV = []
  SQL = "exec SP_TEST(";
  for ii in range(0,4) :
    AV.append("NULL");
  ii = 0;

  for a in args:
    AV[ii] = str(a);
    ii+=1;

  SQL = SQL + "\'" + AV[0] + "\'," + AV[1] + "," + AV[2] + "," + AV[3] + ")";
  print SQL

execSp("hello", 1, 2, 3);
execSp("hi", 2, 3);
</snippet></ROW><ROW><id>14676149</id><snippet>exec SP_TEST('hello',1,2,3)
exec SP_TEST('hi',2,3,NULL)
</snippet></ROW><ROW><id>14676712</id><snippet>listin.append([int(token) for token in line.split(',')])
</snippet></ROW><ROW><id>14676840</id><snippet>Sorted()</snippet></ROW><ROW><id>14676840</id><snippet>OrderedDict</snippet></ROW><ROW><id>14676853</id><snippet>import fnmatch

def my_function(name, types):
    result = []
    for t in types:
        pattern = "{}*{}.fits".format(name, t)
        for filename in fnmatch.filter(listdir(target), pattern):
            result.append(filename)
    return result
</snippet></ROW><ROW><id>14676853</id><snippet>my_function("kplr006933899", ["slc", "llc"])</snippet></ROW><ROW><id>14676853</id><snippet>fnmatch.filter</snippet></ROW><ROW><id>14676853</id><snippet>glob</snippet></ROW><ROW><id>14676853</id><snippet>result = []
for t in types:
    result.extend(glob.glob("{}/{}*{}.fits".format(target, name, t)))
return result
</snippet></ROW><ROW><id>14677175</id><snippet>valid_column_sorts = ['size', 'last_modified', 'path']

if column_sort in valid_column_sorts:
    if sort == 'desc':
        column_sort = '-' + column_sort
    results = results.order_by(column_sort)
</snippet></ROW><ROW><id>14677175</id><snippet>results.order_by(col_map[column_sort])</snippet></ROW><ROW><id>14677441</id><snippet>queue.put</snippet></ROW><ROW><id>14677510</id><snippet>import numpy as np


def main():
    m = np.random.random((3, 4))
    mask = (m[2] &gt; 0.5) &amp; (m[2] &lt; 0.8)  # put your conditions here
                                        # instead of 0.5 and 0.8 you can use
                                        # an array if you like
    m[:, mask]

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14677510</id><snippet>mask</snippet></ROW><ROW><id>14677510</id><snippet>m[:, mask]</snippet></ROW><ROW><id>14677510</id><snippet>m[2] + 2</snippet></ROW><ROW><id>14677510</id><snippet>m[2] &gt; 0.5</snippet></ROW><ROW><id>14677510</id><snippet>m[:, mask]</snippet></ROW><ROW><id>14677510</id><snippet>:</snippet></ROW><ROW><id>14677510</id><snippet>for i in range(0, len(m), 2):
    two_rows = m[i:i+2]
</snippet></ROW><ROW><id>14677733</id><snippet>def postorder_transversal(self, add_newline=True):
    if self.node == None:
        return 0
    for child in self.children:
        child.postorder_transversal(add_newline=False)
    print self.node,
    if add_newline:
        print
</snippet></ROW><ROW><id>14677976</id><snippet>after</snippet></ROW><ROW><id>14677976</id><snippet>def do_one_calculation():

    &lt;do the next calculation here&gt;

    if there_are_more_calculations():
        root.after(100, do_one_calculation)
</snippet></ROW><ROW><id>14677976</id><snippet>after</snippet></ROW><ROW><id>14678126</id><snippet>getattr</snippet></ROW><ROW><id>14678126</id><snippet>getattr(handler.request, 'GET')</snippet></ROW><ROW><id>14678126</id><snippet>handler.request.GET</snippet></ROW><ROW><id>14678126</id><snippet>method = "GET"
geattr(handler.request, method).add()
</snippet></ROW><ROW><id>14678150</id><snippet>format()</snippet></ROW><ROW><id>14678150</id><snippet>'02x'</snippet></ROW><ROW><id>14678150</id><snippet>&gt;&gt;&gt; format(255, '02x')
'ff'
&gt;&gt;&gt; format(2, '02x')
'02'
</snippet></ROW><ROW><id>14678150</id><snippet>02</snippet></ROW><ROW><id>14678150</id><snippet>format()</snippet></ROW><ROW><id>14678150</id><snippet>x</snippet></ROW><ROW><id>14678289</id><snippet>/upvote/{{comment.pk|urlize}}</snippet></ROW><ROW><id>14678332</id><snippet>open</snippet></ROW><ROW><id>14678332</id><snippet>open</snippet></ROW><ROW><id>14678332</id><snippet>open</snippet></ROW><ROW><id>14678332</id><snippet>with monkey_patched_open():
     ...
</snippet></ROW><ROW><id>14678332</id><snippet>#!/usr/bin/env python
from contextlib import contextmanager
from StringIO import StringIO
################################################################################
class FakeFile(StringIO):
    def __init__(self):
        StringIO.__init__(self)
        self.count = 0

    def read(self, n=-1):
        return "&lt;empty#1&gt;"

    def readlines(self, sizehint = 0):
        return ["&lt;empty#2&gt;"]

    def next(self):
        if self.count == 0:
            self.count += 1
            return "&lt;empty#3&gt;"
        else:
            raise StopIteration
################################################################################
@contextmanager
def monkey_patched_open():
    global open
    old_open = open

    def new_fake_open(filename, mode="r"):
        try:
            fh = old_open(filename, mode)
        except IOError:
            fh = FakeFile()
        return fh

    open = new_fake_open

    try:
        yield
    finally:
        open = old_open

################################################################################
with monkey_patched_open():
    for line in open("NOSUCHFILE"):
        print "NOSUCHFILE-&gt;", line
    print "Other", open("MISSING").read()
    print "OK", open(__file__).read()[:30]
</snippet></ROW><ROW><id>14678332</id><snippet>NOSUCHFILE-&gt; &lt;empty#3&gt;
Other &lt;empty#1&gt;
OK #!/usr/bin/env python
from co
</snippet></ROW><ROW><id>14678332</id><snippet>StringIO</snippet></ROW><ROW><id>14678350</id><snippet>sh setuptools-0.6c11-py2.7.egg</snippet></ROW><ROW><id>14678350</id><snippet>python2.7</snippet></ROW><ROW><id>14678350</id><snippet>import sys
from setuptools.command.easy_install import bootstrap
sys.exit(bootstrap())
</snippet></ROW><ROW><id>14678350</id><snippet>python2.7</snippet></ROW><ROW><id>14678350</id><snippet>import sys
import setuptools

print 'Path:', sys.path
print 'setuptools package:', setuptools.__file__
</snippet></ROW><ROW><id>14678350</id><snippet>$ md5 setuptools-0.6c11-py2.7.egg 
MD5 (setuptools-0.6c11-py2.7.egg) = fe1f997bc722265116870bc7919059ea
$ ls -l setuptools-0.6c11-py2.7.egg 
-rw-r--r--  1 own  grp  332005 Jul  8  2010 setuptools-0.6c11-py2.7.egg 
</snippet></ROW><ROW><id>14678361</id><snippet>#!/bin/sh
export PYTHONPATH=$PYTHONPATH:/home/ubuntu/workspace/htFrontEnd/heythat:/home/ubuntu/workspace/htFrontEnd/heythat/htanalytics
exec /usr/bin/python /home/ubuntu/workspace/htFrontEnd/htanalytics/ht_rpc_server.py &gt;&gt; /tmp/ht_rpc_server.log 2&gt;&amp;1
</snippet></ROW><ROW><id>14678445</id><snippet>x</snippet></ROW><ROW><id>14678445</id><snippet>nonlocal</snippet></ROW><ROW><id>14678445</id><snippet>def f(x):
    def g(n):
        nonlocal x
        if n &lt; 10:
            x = x + 1
            g(n + 1)
    g(0)
</snippet></ROW><ROW><id>14678445</id><snippet>def f(x):
    x = [x]   # lists are mutable
    def g(n):
        if n &lt; 10:
            x[0] = x[0] + 1   # not assigning, but mutating (x.__setitem__(0, newvalue))
            g(n + 1)
    g(0)
</snippet></ROW><ROW><id>14678445</id><snippet>def f(x):
    def g(n):
        if n &lt; 10:
            g.x = g.x + 1
            g(n + 1)
    g.x = x  # attribute on the function!
    g(0)
</snippet></ROW><ROW><id>14678483</id><snippet>with open("english.txt") as english_file:
   for line in english_file ..
</snippet></ROW><ROW><id>14678483</id><snippet>import this
</snippet></ROW><ROW><id>14678667</id><snippet>py_func = PyDict_GetItemString(py_lib_mod_dict, "func2"); //fails here when cfunc1 is called via callback... will not even go to the next line!
printf("Done with GetItemString\n");
py_ret = PyObject_CallFunction(py_func, 0);

Py_DECREF(py_func);
</snippet></ROW><ROW><id>14678667</id><snippet>PyDict_GetItemString</snippet></ROW><ROW><id>14678667</id><snippet>Py_DECREF(py_func)</snippet></ROW><ROW><id>14678667</id><snippet>Py_INCREF(py_func)</snippet></ROW><ROW><id>14678667</id><snippet>pyfunc =</snippet></ROW><ROW><id>14678667</id><snippet>PyObject_Print(py_func, stdout)</snippet></ROW><ROW><id>14678667</id><snippet>py_func =</snippet></ROW><ROW><id>14678667</id><snippet>Py_DECREF</snippet></ROW><ROW><id>14678667</id><snippet>&lt;function func2 at 0x10b9f1230&gt;</snippet></ROW><ROW><id>14678667</id><snippet>&lt;refcnt 0 at 0x10b9f1230&gt;</snippet></ROW><ROW><id>14678667</id><snippet>wmain</snippet></ROW><ROW><id>14678667</id><snippet>wchar_t</snippet></ROW><ROW><id>14678667</id><snippet>PyUnicode_FromWideChar</snippet></ROW><ROW><id>14678667</id><snippet>WINFUNCTYPE</snippet></ROW><ROW><id>14678667</id><snippet>main</snippet></ROW><ROW><id>14678667</id><snippet>char</snippet></ROW><ROW><id>14678667</id><snippet>PyString_FromString</snippet></ROW><ROW><id>14678667</id><snippet>CFUNCTYPE</snippet></ROW><ROW><id>14678667</id><snippet>cfunc1</snippet></ROW><ROW><id>14678667</id><snippet>cfunc1</snippet></ROW><ROW><id>14678667</id><snippet>PyGILState_Ensure</snippet></ROW><ROW><id>14678667</id><snippet>Release</snippet></ROW><ROW><id>14678667</id><snippet>Fatal Python error: PyEval_SaveThread: NULL tstate</snippet></ROW><ROW><id>14678667</id><snippet>boost::python</snippet></ROW><ROW><id>14678823</id><snippet>libpython2.7.so</snippet></ROW><ROW><id>14678823</id><snippet>python2.7</snippet></ROW><ROW><id>14678823</id><snippet>libpython2.7</snippet></ROW><ROW><id>14678823</id><snippet>libpython2.7</snippet></ROW><ROW><id>14678823</id><snippet>python2.7</snippet></ROW><ROW><id>14678823</id><snippet>PyInstaller</snippet></ROW><ROW><id>14678823</id><snippet>libpython2.7.so</snippet></ROW><ROW><id>14678823</id><snippet>libpython2.7.a</snippet></ROW><ROW><id>14678823</id><snippet>PyInstaller</snippet></ROW><ROW><id>14678823</id><snippet>PyInstaller</snippet></ROW><ROW><id>14678823</id><snippet>/opt/python27/lib</snippet></ROW><ROW><id>14678823</id><snippet>/opt/python27</snippet></ROW><ROW><id>14678823</id><snippet>/usr/local/bin/python27</snippet></ROW><ROW><id>14678823</id><snippet>/opt/python27</snippet></ROW><ROW><id>14678823</id><snippet>/usr/local/bin/python27</snippet></ROW><ROW><id>14678882</id><snippet>enumerate</snippet></ROW><ROW><id>14678882</id><snippet>vowel_indices = [idx for idx, ch in enumerate(your_string) if ch.lower() in 'aeiou']
</snippet></ROW><ROW><id>14679025</id><snippet>queue</snippet></ROW><ROW><id>14679025</id><snippet>import queue</snippet></ROW><ROW><id>14679025</id><snippet>queue.py</snippet></ROW><ROW><id>14679025</id><snippet>queue.py</snippet></ROW><ROW><id>14679025</id><snippet>queue.py</snippet></ROW><ROW><id>14679025</id><snippet>my_queue.py</snippet></ROW><ROW><id>14679025</id><snippet>from my_queue import Queue</snippet></ROW><ROW><id>14679079</id><snippet>wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT</snippet></ROW><ROW><id>14679079</id><snippet>a|b</snippet></ROW><ROW><id>14679079</id><snippet>a&amp;b | c&amp;d</snippet></ROW><ROW><id>14679079</id><snippet>x*x + y*y</snippet></ROW><ROW><id>14679079</id><snippet>|</snippet></ROW><ROW><id>14679079</id><snippet>wx.SPLASH_CENTRE_ON_SCREEN</snippet></ROW><ROW><id>14679079</id><snippet>BIG_LONG_CONSTANT_1 + BIG_LONG_CONSTANT_2</snippet></ROW><ROW><id>14679079</id><snippet>+</snippet></ROW><ROW><id>14679079</id><snippet>pep8</snippet></ROW><ROW><id>14679079</id><snippet>x = x/2 - 1</snippet></ROW><ROW><id>14679079</id><snippet>missing_whitespace_around_operator</snippet></ROW><ROW><id>14679079</id><snippet>pep8ify</snippet></ROW><ROW><id>14679079</id><snippet>pylint</snippet></ROW><ROW><id>14679079</id><snippet>pyflakes</snippet></ROW><ROW><id>14679151</id><snippet>class Parser:
    def __init__(self, logfile):
        self.log = open(logfile)
        self.logentry = []
    def next(self):
        found = False
        for line in self.log:
            self.logentry.append(line)            
            if &lt;block ends&gt;:
                e = '\n'.join(self.logentry)
                self.logentry = []
                yield e
</snippet></ROW><ROW><id>14679206</id><snippet>test.py</snippet></ROW><ROW><id>14679206</id><snippet>module.py</snippet></ROW><ROW><id>14679206</id><snippet>sys.stdout</snippet></ROW><ROW><id>14679206</id><snippet>import sys

sys.stdout = open("test-output.txt", "wt")

# Import the rest
</snippet></ROW><ROW><id>14679206</id><snippet>sys.stdout</snippet></ROW><ROW><id>14679206</id><snippet>import os
import sys

fd = os.open("test-output.txt", os.O_WRONLY | os.O_CREAT, 0644)
os.dup2(fd, sys.stdout.fileno())
os.close(fd)
</snippet></ROW><ROW><id>14679206</id><snippet>python starttest.py &gt;test-output.txt
</snippet></ROW><ROW><id>14679218</id><snippet>'\n'</snippet></ROW><ROW><id>14679218</id><snippet>(?&lt;!x)y</snippet></ROW><ROW><id>14679218</id><snippet>\d+</snippet></ROW><ROW><id>14679218</id><snippet>+</snippet></ROW><ROW><id>14679218</id><snippet>\(</snippet></ROW><ROW><id>14679218</id><snippet>\d\)</snippet></ROW><ROW><id>14679218</id><snippet>(10000)</snippet></ROW><ROW><id>14679218</id><snippet>(1)</snippet></ROW><ROW><id>14679218</id><snippet>(abc123)</snippet></ROW><ROW><id>14679218</id><snippet>\(\d+\)</snippet></ROW><ROW><id>14679218</id><snippet>\s*</snippet></ROW><ROW><id>14679218</id><snippet>(\d|\d\s)</snippet></ROW><ROW><id>14679218</id><snippet>\s*</snippet></ROW><ROW><id>14679218</id><snippet>(?&lt;!\d\))\s*\n</snippet></ROW><ROW><id>14679267</id><snippet>import dj_database_url
DATABASES = {'default': dj_database_url.config(default='postgres://localhost')}
</snippet></ROW><ROW><id>14679397</id><snippet>import ipaddress

def strip_addr(ip, bits):
    nwif = ipaddress.ip_interface(u'%s/%s' % (ip, bits))
    return str(nwif.network.network_address)

assert strip_addr(u'1.2.3.4', 24) == u'1.2.3.0'
assert strip_addr(u'2001:1234:f678::9', 33) == u'2001:1234:8000::'
</snippet></ROW><ROW><id>14679637</id><snippet>nw, n, ne, w, _, e, sw, s, se = (self.board[column-1:column+2, row-1:row+2]).ravel()
</snippet></ROW><ROW><id>14679637</id><snippet>import numpy as np

board = np.empty((10,10), dtype = 'object')
board[:,:] = None
board[1:9, 1:9] = np.arange(64).reshape(8,8)
print(board)
# [[None None None None None None None None None None]
#  [None 0 1 2 3 4 5 6 7 None]
#  [None 8 9 10 11 12 13 14 15 None]
#  [None 16 17 18 19 20 21 22 23 None]
#  [None 24 25 26 27 28 29 30 31 None]
#  [None 32 33 34 35 36 37 38 39 None]
#  [None 40 41 42 43 44 45 46 47 None]
#  [None 48 49 50 51 52 53 54 55 None]
#  [None 56 57 58 59 60 61 62 63 None]
#  [None None None None None None None None None None]]

column = 1
row = 1
nw, n, ne, w, _, e, sw, s, se = (board[column-1:column+2, row-1:row+2]).ravel()
print(nw, n, ne, w, _, e, sw, s, se)
# (None, None, None, None, 0, 1, None, 8, 9)
</snippet></ROW><ROW><id>14679637</id><snippet>print(board)</snippet></ROW><ROW><id>14679637</id><snippet>board[row-1:row+2, column-1:column+2]</snippet></ROW><ROW><id>14679637</id><snippet>print_board</snippet></ROW><ROW><id>14679640</id><snippet>import matplotlib.pyplot as plt                                                 
from matplotlib import ticker  
</snippet></ROW><ROW><id>14679640</id><snippet>def format_10Kth_time(time, pos=None):                                          
    mins     = time // (10000 * 60)                                             
    secs     = (time - (mins * 10000 * 60)) // (10000)                          
    fracsecs = time % 10000                                                     
    return "%d:%02d.%d" % (mins, secs, fracsecs)
</snippet></ROW><ROW><id>14679640</id><snippet>plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_10Kth_time))
plt.plot(...) 
plt.show() 
</snippet></ROW><ROW><id>14679980</id><snippet>from subprocess import call

with open("somefile.txt", 'r') as f:
    some_files_to_run = [line.split('\n')[0] for line in f.readlines()]
    for file_to_run in some_files_to_run:
        call(["python", file_to_run])
</snippet></ROW><ROW><id>14680001</id><snippet>def _splicegen(maxchars, stringlist):
    """
    Return a list of slices to print based on maxchars string-length boundary.
    """
    runningcount = 0  # start at 0
    tmpslice = []  # tmp list where we append slice numbers.
    for i, item in enumerate(stringlist):
        runningcount += len(item)
        if runningcount &lt;= int(maxchars):
            tmpslice.append(i)
        else:
            yield tmpslice
            tmpslice = [i]
            runningcount = len(item)
    yield(tmpslice)
</snippet></ROW><ROW><id>14680178</id><snippet>.all()</snippet></ROW><ROW><id>14680282</id><snippet>lst[::n]</snippet></ROW><ROW><id>14680282</id><snippet>&gt;&gt;&gt; lst=[1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; lst[::3]
[1, 4, 7, 10]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14680549</id><snippet>pickle</snippet></ROW><ROW><id>14680549</id><snippet>self</snippet></ROW><ROW><id>14680549</id><snippet>&gt;&gt;&gt; class Foo(object):
        class_var = []
        def __init__(self, value):
            self.class_var.append(value)

&gt;&gt;&gt; f1 = Foo(1)
&gt;&gt;&gt; f1.class_var
[1]
&gt;&gt;&gt; f2 = Foo(2)
&gt;&gt;&gt; f2.class_var
[1, 2]
</snippet></ROW><ROW><id>14680549</id><snippet>&gt;&gt;&gt; f1.class_var
[1, 2] 
</snippet></ROW><ROW><id>14680549</id><snippet>f1</snippet></ROW><ROW><id>14680549</id><snippet>f2</snippet></ROW><ROW><id>14680549</id><snippet>f1.class_var</snippet></ROW><ROW><id>14680549</id><snippet>f2.class_var</snippet></ROW><ROW><id>14680549</id><snippet>Foo.class_var</snippet></ROW><ROW><id>14680549</id><snippet>__init__</snippet></ROW><ROW><id>14680549</id><snippet>&gt;&gt;&gt; class Bar(object):
        def __init__(self, value):
            self.instance_var = [] # creates a separate list for each instance!
            self.instance_var.append(value)

&gt;&gt;&gt; b1 = Bar(1)
&gt;&gt;&gt; b1.instance_var
[1]
&gt;&gt;&gt; b2 = Bar(2)
&gt;&gt;&gt; b2.instance_var # doesn't include value from b1
[2]
&gt;&gt;&gt; b1.instance_var # b1's data is unchanged
[1]
</snippet></ROW><ROW><id>14680647</id><snippet>print [my_list[i] for i in range(1,len(my_list)) if my_list[i] in my_list[i-1]]
</snippet></ROW><ROW><id>14680647</id><snippet>&gt;&gt;&gt; def findSubStrs(my_list):
...     return [my_list[i] for i in range(1,len(my_list)) if my_list[i] in my_list[i-1]]
&gt;&gt;&gt; findSubStrs(["hope", "hop", "hopefully", "test", "testing"] )
['hop']
&gt;&gt;&gt; findSubStrs(["hopefully", "hope", "hop", "testing", "test"])
['hope', 'hop', 'test']
</snippet></ROW><ROW><id>14680647</id><snippet>for i in range(1,len(my_list)):
    if my_list[i] in my_list[i-1]:
        print my_list[i]
</snippet></ROW><ROW><id>14680731</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>14680731</id><snippet>from xml.dom.minidom import parse

xmldata = open("abc.txt", "r")

domdata = parse(xmldata)

def getDescriptionData(title):
    titledata = [x.toxml().lstrip('&lt;title&gt;').rstrip('&lt;/title&gt;') for x in domdata.getElementsByTagName('title')]
    descriptiondata = [x.toxml().lstrip('&lt;description&gt;').rstrip('&lt;/description&gt;') for x in domdata.getElementsByTagName('description')]

    l =  [v for (x, v) in zip(titledata, descriptiondata) if x == title]
    if l:
        return l[0]
    return None

print getDescriptionData('Lake Louis')
</snippet></ROW><ROW><id>14680731</id><snippet>Open  / Past 48 Hours: 2cm / Primary:  / Base Depth: 162cm
</snippet></ROW><ROW><id>14681115</id><snippet>list</snippet></ROW><ROW><id>14681180</id><snippet>&gt;&gt;&gt; scores = [93, 89, 87, 83, 79, 77, 73, 69, 67, 60, 0]
&gt;&gt;&gt; grades = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'F']
&gt;&gt;&gt; grade_scores = zip(scores, grades)
&gt;&gt;&gt; def gradeFor(s):
...     for score, grade in grade_scores:
...        if s &gt;= score:
...            return grade

&gt;&gt;&gt; gradeFor(87)
B+
&gt;&gt;&gt; gradeFor(89)
A-
&gt;&gt;&gt; gradeFor(88)
B+
&gt;&gt;&gt; gradeFor(67)
D+
&gt;&gt;&gt; gradeFor(72)
C-
&gt;&gt;&gt; gradeFor(40)
F
</snippet></ROW><ROW><id>14681180</id><snippet>if endProgram.lower() in ('no', 'false'):
</snippet></ROW><ROW><id>14681314</id><snippet>np.where</snippet></ROW><ROW><id>14681314</id><snippet>np.nonzero</snippet></ROW><ROW><id>14681314</id><snippet>x = np.array([1, 0, 1, 1, 0, 0])
np.where(x)[0] # returns a tuple hence the [0], see help(np.where)
# array([0, 2, 3])
x.nonzero()[0] # in this case, the same as above.
</snippet></ROW><ROW><id>14681314</id><snippet>help(np.where)</snippet></ROW><ROW><id>14681314</id><snippet>help(np.nonzero)</snippet></ROW><ROW><id>14681314</id><snippet>np.where</snippet></ROW><ROW><id>14681314</id><snippet>x</snippet></ROW><ROW><id>14681687</id><snippet>In [53]: l = [0,1,2,3]

In [54]: def to_matrix(l, n):
    ...:     return [l[i:i+n] for i in xrange(0, len(l), n)]

In [55]: to_matrix(l,2)
Out[55]: [[0, 1], [2, 3]]
</snippet></ROW><ROW><id>14681791</id><snippet>touch code.py</snippet></ROW><ROW><id>14682090</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

greek_to_latin = {u"Α": u"A", u"Β": u"B", u"Γ": u"G"}  # ...
latin_string = "".join(greek_to_latin[c] for c in greek_string)
</snippet></ROW><ROW><id>14682255</id><snippet>fget</snippet></ROW><ROW><id>14682255</id><snippet>fset</snippet></ROW><ROW><id>14682255</id><snippet>pattern</snippet></ROW><ROW><id>14682255</id><snippet>pattern</snippet></ROW><ROW><id>14682255</id><snippet>fget</snippet></ROW><ROW><id>14682255</id><snippet>fset</snippet></ROW><ROW><id>14682255</id><snippet>pattern</snippet></ROW><ROW><id>14682255</id><snippet>fget</snippet></ROW><ROW><id>14682255</id><snippet>fset</snippet></ROW><ROW><id>14682255</id><snippet>def doIt(x):
    funs = []
    for key, val in x.iteritems():
        thingy = val + 1
        def func():
            return thingy
        funs.append(func)
    return funs

&gt;&gt;&gt; dct = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; funs = doIt(dct)
&gt;&gt;&gt; for f in funs:
...     print f()

3
3
3
</snippet></ROW><ROW><id>14682255</id><snippet>thingy</snippet></ROW><ROW><id>14682255</id><snippet>thingy</snippet></ROW><ROW><id>14682255</id><snippet>thingy</snippet></ROW><ROW><id>14682255</id><snippet>def fget(self, pattern=pattern):
    return getattr(self, pattern.attribute)
def fset(self, value, pattern=pattern):
    pattern.validate(value)
    return setattr(self, pattern.attribute, value)
</snippet></ROW><ROW><id>14682498</id><snippet>from unicodedata import normalize

print '%r' % normalize('NFD', u'\u00C7')  # decompose: convert Ç to "C + ̧"
print '%r' % normalize('NFC', u'C\u0327') # compose: convert "C + ̧" to Ç
</snippet></ROW><ROW><id>14682498</id><snippet>ä</snippet></ROW><ROW><id>14682498</id><snippet>a</snippet></ROW><ROW><id>14682498</id><snippet>print '%r' % normalize('NFD', u'\u2460')     # u'\u2460'
</snippet></ROW><ROW><id>14682498</id><snippet>print '%r' % normalize('NFKD', u'\u2460')    # 1
</snippet></ROW><ROW><id>14682655</id><snippet>import re
from BeautifulSoup import BeautifulSoup

html = '&lt;h2 name="PRM-013113-21017-0FSNS" class="pointer"&gt;&lt;a name="PRM-013113-21017-0FSNS"&gt;Chinese New Year Sale&lt;br&gt;&lt;span&gt;February 8, 2013 - February 10, 2013&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;'
date_span = BeautifulSoup(html).findAll('h2', {'class' : 'pointer'})[0].findAll('span')[0]
date = re.findall(r'&lt;span&gt;(.+?)&lt;/span&gt;', str(date_span))[0]
</snippet></ROW><ROW><id>14682655</id><snippet>text=True</snippet></ROW><ROW><id>14682655</id><snippet>findAll</snippet></ROW><ROW><id>14682655</id><snippet>from BeautifulSoup import BeautifulSoup

html = '&lt;h2 name="PRM-013113-21017-0FSNS" class="pointer"&gt;&lt;a name="PRM-013113-21017-0FSNS"&gt;Chinese New Year Sale&lt;br&gt;&lt;span&gt;February 8, 2013 - February 10, 2013&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;'
date = BeautifulSoup(test).findAll('h2', {'class' : 'pointer'})[0].findAll('span')[0]
date = date.findAll(text=True)[0]
</snippet></ROW><ROW><id>14682655</id><snippet>from BeautifulSoup import BeautifulSoup

html = '&lt;h2 name="PRM-013113-21017-0FSNS" class="pointer"&gt;&lt;a name="PRM-013113-21017-0FSNS"&gt;Chinese New Year Sale&lt;br&gt;&lt;span&gt;February 8, 2013 - February 10, 2013&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;'
date = BeautifulSoup(test).findAll('h2', {'class' : 'pointer'})[0].findAll('span')[0]
date = date.findAll(text=True)[0]
# Get start and end date separately
date_start, date_end = date.split(' - ')
</snippet></ROW><ROW><id>14682655</id><snippet>date_start</snippet></ROW><ROW><id>14682655</id><snippet>date_end</snippet></ROW><ROW><id>14683055</id><snippet>urlpatterns = patterns('',
    url('^sample2/$', message, name="message_view"),
    url('^sample/$', authentication, name="auth_view"),
)
</snippet></ROW><ROW><id>14683055</id><snippet>def auth(request):
    if request.method == 'POST':
        // redirect the web page to the sample2.com
        return redirect(reverse('message_view'))
    return render_to_response('login.html', {} )
</snippet></ROW><ROW><id>14683223</id><snippet>ldd</snippet></ROW><ROW><id>14683223</id><snippet>ldd libQtGui.so.4</snippet></ROW><ROW><id>14684053</id><snippet>nohup</snippet></ROW><ROW><id>14684053</id><snippet>$ nohup ./myscript.py &amp;
</snippet></ROW><ROW><id>14684053</id><snippet>$ nohup ./myscript.py &gt; myscript.log &amp;
</snippet></ROW><ROW><id>14684066</id><snippet>list = re.split(r"\s*[,;]\s*", groupID.strip())
</snippet></ROW><ROW><id>14684189</id><snippet>request.method</snippet></ROW><ROW><id>14684189</id><snippet>if request.method == 'POST':
    username = request.POST.get('username')
else:
    username = request.GET.get('username')
</snippet></ROW><ROW><id>14684284</id><snippet>import subprocess

class ProcessManager(object):
    __PROCESS = None;

    @staticmethod
    def set_process(args):
        # Sets singleton process
        if __PROCESS is None:
            p = subprocess.Popen(args)
            ProcessManager.__PROCESS = p;
        # else: exception handling

    @staticmethod
    def kill_process():
        # Kills process
        if __PROCESS is None:
            # exception handling
        else:
            ProcessManager.__PROCESS.kill()
</snippet></ROW><ROW><id>14684284</id><snippet>from my_module import ProcessManager

my_args = ...
ProcessManager.set_process(my_args)

...

ProcessManager.kill_process()
</snippet></ROW><ROW><id>14684284</id><snippet>ProcessManager</snippet></ROW><ROW><id>14684852</id><snippet>for rowx,row in enumerate(reader):
    for colx, value in enumerate(row):
        ws.cell(row=rowx,column=colx).value = unicode(value, "mbcs")
</snippet></ROW><ROW><id>14684953</id><snippet>"b'YzJGNVltYzJGNVltOTBlbk5oZVdKdmRIcHpZWGxpYjNSNmMyRjVZbTkwZW5OaGVXSnZkSHB6WVhsaWIzUjZjMkY1WW05MGVnOTBlblJsYzNRPXNheWJvdHo='"
</snippet></ROW><ROW><id>14684953</id><snippet>string = "b'YzJGNVltYzJGNVltOTBlbk5oZVdKdmRIcHpZWGxpYjNSNmMyRjVZbTkwZW5OaGVXSnZkSHB6WVhsaWIzUjZjMkY1WW05MGVnOTBlblJsYzNRPXNheWJvdHo='"
string = string.split("'")[1]
</snippet></ROW><ROW><id>14684953</id><snippet>"YzJGNVltYzJGNVltOTBlbk5oZVdKdmRIcHpZWGxpYjNSNmMyRjVZbTkwZW5OaGVXSnZkSHB6WVhsaWIzUjZjMkY1WW05MGVnOTBlblJsYzNRPXNheWJvdHo="
</snippet></ROW><ROW><id>14684953</id><snippet>string = bytes(string, "ascii")
</snippet></ROW><ROW><id>14684953</id><snippet>b"YzJGNVltYzJGNVltOTBlbk5oZVdKdmRIcHpZWGxpYjNSNmMyRjVZbTkwZW5OaGVXSnZkSHB6WVhsaWIzUjZjMkY1WW05MGVnOTBlblJsYzNRPXNheWJvdHo="
</snippet></ROW><ROW><id>14685017</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>14685017</id><snippet>requirements.txt</snippet></ROW><ROW><id>14685017</id><snippet>$ virtualenv &lt;env_name&gt;
$ source &lt;env_name&gt;/bin/activate
(&lt;env_name&gt;)$ pip install -r path/to/requirements.txt
</snippet></ROW><ROW><id>14685017</id><snippet>def pip_install():
    with cd(env.path):
        with prefix('source venv/bin/activate'):
            run('pip install -r requirements.txt')
</snippet></ROW><ROW><id>14685082</id><snippet>self</snippet></ROW><ROW><id>14685082</id><snippet>class Command(BaseCommand):
    def hello(self):
        print "Hello!"
    def my_god(self):
        print "OMG!"

    def handle(self):
        # this was def main():
        self.hello()
        self.my_god()
</snippet></ROW><ROW><id>14685082</id><snippet>Command</snippet></ROW><ROW><id>14685082</id><snippet>unittest</snippet></ROW><ROW><id>14685082</id><snippet>Command</snippet></ROW><ROW><id>14685668</id><snippet>class Transplant:
    def __init__(self, method, host, method_name=None):
        self.host = host
        self.method = method
        self.method_name = method_name or method.__name__
        setattr(host, method_name or method.__name__, self)

    def __call__(self, *args, **kwargs):
        nargs = [self.host, self.method_name]
        nargs.extend(args)
        return apply(self.method, nargs, kwargs)
</snippet></ROW><ROW><id>14685668</id><snippet>foo</snippet></ROW><ROW><id>14685763</id><snippet>last_activity</snippet></ROW><ROW><id>14685763</id><snippet>from django.utils import timezone

from myproject.profiles.models import Profile


class UpdateLastActivityMiddleware(object):
    def process_view(self, request, view_func, view_args, view_kwargs):
        assert hasattr(request, 'user'), 'The UpdateLastActivityMiddleware requires authentication middleware to be installed.'
        if request.user.is_authenticated():
            Profile.objects.filter(user__id=request.user.id) \
                           .update(last_activity=timezone.now())
</snippet></ROW><ROW><id>14685763</id><snippet>MIDDLEWARE_CLASSES = (
    # other middlewares
    'myproject.profiles.middleware.UpdateLastActivityMiddleware',
)
</snippet></ROW><ROW><id>14685849</id><snippet>k = []
k.append(55.0)
k.append(75.1)
l = [k]
print l

int0 = int(l[0][0])
int1 = int(l[0][1])
print int0
print int1
</snippet></ROW><ROW><id>14685849</id><snippet>[[55.0, 75.1]]
55
75
</snippet></ROW><ROW><id>14685923</id><snippet>print</snippet></ROW><ROW><id>14685923</id><snippet>print</snippet></ROW><ROW><id>14685923</id><snippet>result = select(badlist)
print result
</snippet></ROW><ROW><id>14685923</id><snippet>print</snippet></ROW><ROW><id>14685923</id><snippet>result = select(badlist)
print(result)
</snippet></ROW><ROW><id>14685923</id><snippet>badlist</snippet></ROW><ROW><id>14685923</id><snippet>==</snippet></ROW><ROW><id>14685923</id><snippet>=</snippet></ROW><ROW><id>14686005</id><snippet>import logging

def count_large_query(query):
  total = query.count()
  logging.info('Total entities: %d' % total)
</snippet></ROW><ROW><id>14686005</id><snippet>from google.appengine.ext import deferred

# Somewhere in your request:
deferred.defer(count_large_query, ndb.query())
</snippet></ROW><ROW><id>14686005</id><snippet>count()</snippet></ROW><ROW><id>14686005</id><snippet>count_large_query()</snippet></ROW><ROW><id>14686005</id><snippet>LIMIT = 1024
def count_large_query(query):
  cursor = None
  more = True
  total = 0
  while more:
    ndbs, cursor, more = query.fetch_page(LIMIT, start_cursor=cursor, keys_only=True)
    total += len(ndbs)

  logging.info('Total entitites: %d' % total)
</snippet></ROW><ROW><id>14686005</id><snippet>LIMIT</snippet></ROW><ROW><id>14686005</id><snippet>Total entitites: ##</snippet></ROW><ROW><id>14686084</id><snippet>find</snippet></ROW><ROW><id>14686084</id><snippet>grep</snippet></ROW><ROW><id>14686084</id><snippet>$ find . -type f -exec \
  fgrep -l "SAMPLE 350 AN INTEGER OF TYPE :DECIMAL : CAN BE ASSEMBLED BY" {} \; \
  | xargs -i%  mv % /path/to/new/dir
</snippet></ROW><ROW><id>14686233</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>14686233</id><snippet>from itertools import groupby

for letter, rows in groupby(cur, key=lambda r: r[0][0]):
    print ' '.join([r[0] for r in rows])
</snippet></ROW><ROW><id>14686233</id><snippet>groupby()</snippet></ROW><ROW><id>14686233</id><snippet>cur</snippet></ROW><ROW><id>14686233</id><snippet>(letter, rows)</snippet></ROW><ROW><id>14686233</id><snippet>rows</snippet></ROW><ROW><id>14686233</id><snippet>for</snippet></ROW><ROW><id>14686233</id><snippet>A1
A2
B1
B2
A3
A4
</snippet></ROW><ROW><id>14686233</id><snippet>A1 A2
B1 B2
A3 A4
</snippet></ROW><ROW><id>14686233</id><snippet>ORDER BY firstcolumnname</snippet></ROW><ROW><id>14686233</id><snippet>&gt;&gt;&gt; cur.execute("SELECT * FROM seats ORDER BY code")
&lt;sqlite3.Cursor object at 0x10b1a8730&gt;
&gt;&gt;&gt; for letter, rows in groupby(cur, key=lambda r: r[0][0]):
...     print ' '.join([r[0] for r in rows])
... 
A1 A2 A3 A4 A5 A6 A7 A8
B1 B2 B3 B4 B5 B6 B7 B8
C1 C2 C3 C4 C5 C6 C7 C8
</snippet></ROW><ROW><id>14686648</id><snippet>QApplication</snippet></ROW><ROW><id>14686648</id><snippet>'Wed, 06-Feb-2014 12:05:12'</snippet></ROW><ROW><id>14686648</id><snippet>LC_ALL="C"</snippet></ROW><ROW><id>14687018</id><snippet>3.9 Gb ram</snippet></ROW><ROW><id>14687018</id><snippet>512Mb ram</snippet></ROW><ROW><id>14687018</id><snippet>35 Gb ram</snippet></ROW><ROW><id>14687018</id><snippet>top</snippet></ROW><ROW><id>14687018</id><snippet>one-off dyno</snippet></ROW><ROW><id>14687148</id><snippet>&lt;ul metal:define-macro="comment_list"&gt;
  &lt;li tal:repeat="comment comments" class="comment" comment_id="${comment.id}"&gt;
    &lt;div&gt;ID: ${comment.id} ${comment.body}&lt;/div&gt;
    &lt;div tal:define="comments comment.children"&gt;
      &lt;ul metal:use-macro="template.macros['comment_list']" /&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>14687194</id><snippet>zip()</snippet></ROW><ROW><id>14687194</id><snippet>def run(first, second):
    return [a + b for a, b in zip(first, second)]
</snippet></ROW><ROW><id>14687194</id><snippet>&gt;&gt;&gt; def run(first, second):
...     return [a + b for a, b in zip(first, second)]
... 
&gt;&gt;&gt; print run([1,2,3],[10,20,30])
[11, 22, 33]
</snippet></ROW><ROW><id>14687323</id><snippet>with open('/var/log/dmesg') as logf:
    log = logf.read()
print(log)
</snippet></ROW><ROW><id>14687542</id><snippet>fmla = r.Formula('~a+b')
env = fmla.environment
env['a'] = a
env['b'] = b
r.model_matrix(fmla)
</snippet></ROW><ROW><id>14687542</id><snippet>set_seed(42)
a=rnorm(100)
b=rnorm(100)
m=model.matrix('~a+b')
Error: $ operator is invalid for atomic vectors
m=model.matrix(formula('~a+b')) ## this works
  (Intercept)          a          b
1           1 -0.1011361  0.4354445
2           1  0.3782215 -1.5322641
3           1  1.4772023  0.3280948
4           1  0.2892421  1.9012016
5           1 -0.2596562  0.2036678
6           1 -0.5585396 -0.1536021
</snippet></ROW><ROW><id>14687717</id><snippet>calculate</snippet></ROW><ROW><id>14687717</id><snippet>def calculate(oper, *nm):
    return reduce(oper, nm)

In [6]: import operator

In [7]: calculate(operator.add, 2, 34, 2)
Out[7]: 38

In [8]: calculate(operator.mul, 8, 5, 7)
Out[9]: 280
</snippet></ROW><ROW><id>14687717</id><snippet>reduce</snippet></ROW><ROW><id>14687957</id><snippet>sample = get_object_or_404(models.Sample.objects.select_related(), **kwargs)
</snippet></ROW><ROW><id>14687971</id><snippet>In [63]: s = u'àaeëß35+{}"´'

In [64]: print ''.join(c for c in s if c.isalnum())
àaeëß35
</snippet></ROW><ROW><id>14687973</id><snippet>current_app.logger</snippet></ROW><ROW><id>14687973</id><snippet>from flask import request, current_app

@app.before_request
def log_request():
    if current_app.config.get('LOG_REQUESTS'):
        current_app.logger.debug('whatever')
        # Or if you dont want to use a logger, implement
        # whatever system you prefer here
        # print request.headers
        # open(current_app.config['REQUEST_LOG_FILE'], 'w').write('...')
</snippet></ROW><ROW><id>14688115</id><snippet>tags = {e.tag for e in doc.iter() if e.text}
</snippet></ROW><ROW><id>14688217</id><snippet>In [70]: from bs4 import BeautifulSoup

In [71]: soup = BeautifulSoup(html)

In [72]: [tr.find('td').text for tr in soup.findAll('tr')]
Out[72]: [u'Euro', u'Australian dollar', u'Canadian dollar']
</snippet></ROW><ROW><id>14688217</id><snippet>In [73]: [tr.findAll('td')[-1].text for tr in soup.findAll('tr')]
Out[73]: [u'111.6092', u'85.4785', u'82.1079']
</snippet></ROW><ROW><id>14688250</id><snippet>__init__.py</snippet></ROW><ROW><id>14688250</id><snippet>app</snippet></ROW><ROW><id>14688250</id><snippet>index</snippet></ROW><ROW><id>14688250</id><snippet>/app/__init__.py</snippet></ROW><ROW><id>14688250</id><snippet>from views import index
</snippet></ROW><ROW><id>14688250</id><snippet>from models.views import IndexHandler
</snippet></ROW><ROW><id>14688250</id><snippet>import app
handler1 = app.index.IndexHandler()  # example 1
handler1 = app.IndexHandler()  # example 2
</snippet></ROW><ROW><id>14688295</id><snippet>functools</snippet></ROW><ROW><id>14688295</id><snippet>lru_cache</snippet></ROW><ROW><id>14688724</id><snippet>itemid</snippet></ROW><ROW><id>14688724</id><snippet>lxml</snippet></ROW><ROW><id>14688724</id><snippet>doc.xpath('.//item/itemid/text()")
</snippet></ROW><ROW><id>14688899</id><snippet>table_id</snippet></ROW><ROW><id>14688899</id><snippet>return 'INSERT INTO %s (%s) VALUES (%s)' % \
 (table_id, ','.join(["'%s'" % col for col in cols]), stringValues)
</snippet></ROW><ROW><id>14688899</id><snippet>table_id</snippet></ROW><ROW><id>14689269</id><snippet>import xmlrpclib
import base64
device = xmlrpclib.ServerProxy("http://localhost:1234/RPC2")
device.output(base64.b64encode(".\n."+chr(2)))
</snippet></ROW><ROW><id>14689269</id><snippet>import base64
def output(text):
    print "-".join([str(ord(x)) for x in base64.b64decode(text)])

from SimpleXMLRPCServer import SimpleXMLRPCServer
server = SimpleXMLRPCServer(('localhost', 1234))
server.register_function(output)
server.serve_forever()
</snippet></ROW><ROW><id>14689377</id><snippet>model</snippet></ROW><ROW><id>14689377</id><snippet>from my_app.models import MyModel

mms = MyModel.objects.all()
</snippet></ROW><ROW><id>14689377</id><snippet>objects</snippet></ROW><ROW><id>14689377</id><snippet>blue</snippet></ROW><ROW><id>14689377</id><snippet>MyModel</snippet></ROW><ROW><id>14689377</id><snippet>red</snippet></ROW><ROW><id>14689377</id><snippet>class BlueManager(models.Manager):
    def get_query_set(self):
        return super(BlueManager, self).get_query_set().filter(colour='Blue')

class MyModel(models.Model):
     colour = models.CharField(max_length=64)
     blue_objects = BlueManager()
</snippet></ROW><ROW><id>14689377</id><snippet>MyModel.blue_objects.all()
</snippet></ROW><ROW><id>14689377</id><snippet>colour</snippet></ROW><ROW><id>14689377</id><snippet>blue</snippet></ROW><ROW><id>14689377</id><snippet>Manager</snippet></ROW><ROW><id>14689377</id><snippet>QuerySet</snippet></ROW><ROW><id>14689789</id><snippet>=</snippet></ROW><ROW><id>14689789</id><snippet>history_file="$1"
</snippet></ROW><ROW><id>14689789</id><snippet>history_file = "$1"
</snippet></ROW><ROW><id>14689789</id><snippet>history_file</snippet></ROW><ROW><id>14689789</id><snippet>args = [pathToScript, input1, input2, ....]
</snippet></ROW><ROW><id>14689789</id><snippet>input_string</snippet></ROW><ROW><id>14689821</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """cat
... dog"""
&gt;&gt;&gt; 
&gt;&gt;&gt; re.match(r'cat\ndog',s,re.M)
&lt;_sre.SRE_Match object at 0xcb7c8&gt;
</snippet></ROW><ROW><id>14689821</id><snippet>re</snippet></ROW><ROW><id>14689821</id><snippet>\n</snippet></ROW><ROW><id>14689821</id><snippet>re.M</snippet></ROW><ROW><id>14689821</id><snippet>$</snippet></ROW><ROW><id>14689821</id><snippet>^</snippet></ROW><ROW><id>14689821</id><snippet>&gt;&gt; re.match(r'^cat\ndog',s).group(0)
'cat\ndog'
&gt;&gt;&gt; re.match(r'^cat$\ndog',s).group(0)  #doesn't match
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'group'
&gt;&gt;&gt; re.match(r'^cat$\ndog',s,re.M).group(0) #matches.
'cat\ndog'
</snippet></ROW><ROW><id>14689902</id><snippet>__getattr__</snippet></ROW><ROW><id>14689902</id><snippet>__getattribute__</snippet></ROW><ROW><id>14689902</id><snippet>__getattribute__</snippet></ROW><ROW><id>14689902</id><snippet>__getattr__</snippet></ROW><ROW><id>14690083</id><snippet>&gt;&gt;&gt; regex = re.compile(r"^\S.*(?:\n\s.*)+", re.MULTILINE)
&gt;&gt;&gt; [tuple(match.split()) for match in regex.findall(s)]
[('saldkfjaslk', 'asdlkfja', 'alsdkfjlk'), 
 ('sladkfjalskdfjlaskd', 'sldkfaj', 'lsadkfj'), 
 ('lpoerlwoej', 'alskdjf', 'asldkfjljlkjlk')]
</snippet></ROW><ROW><id>14690083</id><snippet>^    # Start of line
\S   # Match a non-whitespace character
.*   # Match the rest of the line
(?:  # Match...
 \n  #  a newline character
 \s  #  a whitespace character
 .*  #  and the rest of the line
)+   # once or more
</snippet></ROW><ROW><id>14690366</id><snippet>def tryconvert(value, default, *types):
    """Converts value to one of the given types.  The first type that succeeds is
       used, so the types should be specified from most-picky to least-picky (e.g.
       int before float).  The default is returned if all types fail to convert
       the value.  The types needn't actually be types (any callable that takes a
       single argument and returns a value will work)."""
    value = value.strip()
    for t in types:
        try:
            return t(value)
        except (ValueError, TypeError):
            pass
    return default
</snippet></ROW><ROW><id>14690366</id><snippet>def parsedatetime(value, format="%Y-%m-%d")
    return datetime.datetime.striptime(value, format)
</snippet></ROW><ROW><id>14690366</id><snippet>value = tryconvert(value, None, parsedatetime, int)
</snippet></ROW><ROW><id>14690491</id><snippet>QMainWindow</snippet></ROW><ROW><id>14690491</id><snippet>QMainWindow</snippet></ROW><ROW><id>14690491</id><snippet>HelloClass</snippet></ROW><ROW><id>14690491</id><snippet>DataClass</snippet></ROW><ROW><id>14690491</id><snippet>QMainWindow</snippet></ROW><ROW><id>14690491</id><snippet>class HelloClass(object):
    def print_label(self, parent):
        self.la = QtGui.QLabel("hello", parent)
        self.la.move(300, 100)
        self.la.show()

class DataClass(QtGui.QMainWindow):
    def __init__(self):
        super(DataClass, self).__init__()
        self.window()

    def window(self):
        ex = label.HelloClass()
        ex.print_label(self)
</snippet></ROW><ROW><id>14690491</id><snippet>pyuic4 your.ui -o ui_your.py</snippet></ROW><ROW><id>14690491</id><snippet>from ui_objects import Ui_Objects  # this is class created with QtDesigner, name of class is a 'Ui_' + name of main Object in QtDesigner    

class Objects(QtGui.QWidget):

    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.ui = Ui_Objects()
        self.ui.setupUi(self)

    # then you can add your own code, in example connect your own methods to actions for widgets
</snippet></ROW><ROW><id>14690655</id><snippet>mock</snippet></ROW><ROW><id>14690655</id><snippet>import logging

logger = logging.getLogger('my_logger')

logger.error("Your log message here")
</snippet></ROW><ROW><id>14690655</id><snippet>from mock import patch

@patch('this.is.my.module.logger')
def test_check_logging_message(self, mock_logger):
    mock_logger.error.assert_called_with("Your log message here")
</snippet></ROW><ROW><id>14690659</id><snippet>print str(htay.postContext())
#                         ^^ Need parenthesis to call a method
</snippet></ROW><ROW><id>14690659</id><snippet>global website_address not defined</snippet></ROW><ROW><id>14690659</id><snippet>self</snippet></ROW><ROW><id>14690659</id><snippet>def postContext(self):
    return requests.post(self.website_address, data=self.valuedictionary).context
</snippet></ROW><ROW><id>14690745</id><snippet>map</snippet></ROW><ROW><id>14690745</id><snippet>my_function(*map(int, list))
</snippet></ROW><ROW><id>14690745</id><snippet>my_function(*[int(x) for x in list])
</snippet></ROW><ROW><id>14690745</id><snippet>list</snippet></ROW><ROW><id>14690745</id><snippet>list</snippet></ROW><ROW><id>14691033</id><snippet>twitter.py</snippet></ROW><ROW><id>14691033</id><snippet>python-twitter</snippet></ROW><ROW><id>14691128</id><snippet>re.sub</snippet></ROW><ROW><id>14691128</id><snippet>In [98]: def repl(d, s):
     ...:     p = re.compile('|'.join(d))
     ...:     return p.sub(lambda m:d[m.group()], s)

In [99]: d = {'TAG':'f',
              'GGC':'a'}

In [100]: repl(d,'TAGGGC')
Out[100]: 'fa'
</snippet></ROW><ROW><id>14691981</id><snippet>color_from_url = self.request.get('color')
flavour_from_url = self.request.get('flavour')
</snippet></ROW><ROW><id>14692034</id><snippet>manager_id</snippet></ROW><ROW><id>14692034</id><snippet>manager_id</snippet></ROW><ROW><id>14692034</id><snippet>User</snippet></ROW><ROW><id>14692034</id><snippet>EmployeeInline</snippet></ROW><ROW><id>14692034</id><snippet>class EmployeeInline(admin.StackedInline):
    model = Employee
    can_delete = False
    verbose_name_plural = 'employee'
    fk_name = 'manager_id'
</snippet></ROW><ROW><id>14692100</id><snippet>itertools.product()</snippet></ROW><ROW><id>14692100</id><snippet>for combo in itertools.product(self.data1, self.data2, self.data3, self.data4):
    # combo is a tuple of 4 characters.
</snippet></ROW><ROW><id>14692100</id><snippet>for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    # combo is a tuple of 4 characters.
</snippet></ROW><ROW><id>14692100</id><snippet>&gt;&gt;&gt; import itertools                                                                                                                &gt;&gt;&gt; d = {'1': ['a', 'd', 'e', 'l', 's'], '2': ['s', 'i', 'r', 't', 'n'], '3': ['b', 'o', 'e', 'm', 'k'], '4': ['f', 'y', 'u', 'n', 'g'] }
&gt;&gt;&gt; for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
...     print ''.join(combo)
... 
asbf
asby
asbu
asbn
asbg
asof
asoy
asou
ason
asog
asef

...

snkf
snky
snku
snkn
snkg
</snippet></ROW><ROW><id>14692146</id><snippet>r'\[[A-Za-z][0-9]+\][0-9]+[A-Za-z]{2}[0-9]+#[0-9]+'
</snippet></ROW><ROW><id>14692146</id><snippet>import re

if re.search(r'\[[A-Za-z][0-9]+\][0-9]+[A-Za-z]{2}[0-9]+#[0-9]+', code) is None:
    match += 1  
</snippet></ROW><ROW><id>14692146</id><snippet>[A-Za-z] : matches any alphabet
[0-9]+ : matches one or more digits
[A-Za-z]{2} : matches two alphabets
</snippet></ROW><ROW><id>14692146</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "[X9]9XX9#9"
&gt;&gt;&gt; re.search(r'\[[A-Za-z][0-9]+\][0-9]+[A-Za-z]{2}[0-9]+#[0-9]+', s) is None
False
&gt;&gt;&gt; s = "ABCD"
&gt;&gt;&gt; re.search(r'\[[A-Za-z][0-9]+\][0-9]+[A-Za-z]{2}[0-9]+#[0-9]+', s) is None
True
&gt;&gt;&gt; s = "[A123]456BB8#789"
&gt;&gt;&gt; re.search(r'\[[A-Za-z][0-9]+\][0-9]+[A-Za-z]{2}[0-9]+#[0-9]+', s) is None
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14692214</id><snippet>(?![NEW]|SS)(ST LOUIS){e&lt;=1}
</snippet></ROW><ROW><id>14692214</id><snippet>(ST LOUIS){e&lt;=1}</snippet></ROW><ROW><id>14692214</id><snippet>[NSEW]</snippet></ROW><ROW><id>14692214</id><snippet>(?![NSEW])</snippet></ROW><ROW><id>14692214</id><snippet>S</snippet></ROW><ROW><id>14692214</id><snippet>S</snippet></ROW><ROW><id>14692214</id><snippet>SS</snippet></ROW><ROW><id>14692290</id><snippet>Create</snippet></ROW><ROW><id>14692290</id><snippet>self.SetControl(self.combo)</snippet></ROW><ROW><id>14692290</id><snippet>self.combo.PushEventHandler(evtHandler)</snippet></ROW><ROW><id>14692293</id><snippet>r</snippet></ROW><ROW><id>14692293</id><snippet>permutations(iterable, r)</snippet></ROW><ROW><id>14692293</id><snippet>r</snippet></ROW><ROW><id>14692293</id><snippet>iterable</snippet></ROW><ROW><id>14692293</id><snippet>numpy.sum</snippet></ROW><ROW><id>14692293</id><snippet>r</snippet></ROW><ROW><id>14692293</id><snippet>r</snippet></ROW><ROW><id>14692293</id><snippet>sorted_input = np.sorted(input_array)
cumsum = np.cumsum(sorted_input)
max_r = (cumsum&lt;desired_sum).sum()
if max_r == len(input_array) and sorted_input[-1] &lt; desired_sum:
    print("sorry I can't do anything for you")
    exit()

for r in range(1,max_r):
    [...]
</snippet></ROW><ROW><id>14692334</id><snippet>app.run(host='0.0.0.0', port=port, debug=True)
</snippet></ROW><ROW><id>14692480</id><snippet>In [24]: x
Out[24]: '/resource/123/resourceb/b/someotherresource/'

In [25]: s = x.strip('/').split('/')

In [26]: zip(s[::2], s[1::2] + [None])
Out[26]: [('resource', '123'), ('resourceb', 'b'), ('someotherresource', None)]
</snippet></ROW><ROW><id>14692513</id><snippet>a</snippet></ROW><ROW><id>14692513</id><snippet>b</snippet></ROW><ROW><id>14692513</id><snippet>(?&lt;=[a-z]\))</snippet></ROW><ROW><id>14692513</id><snippet>a)</snippet></ROW><ROW><id>14692513</id><snippet>[^.)]+</snippet></ROW><ROW><id>14692513</id><snippet>a</snippet></ROW><ROW><id>14692513</id><snippet>)</snippet></ROW><ROW><id>14692513</id><snippet>(?&lt;=[a-z]\))</snippet></ROW><ROW><id>14692513</id><snippet>[^.)]+</snippet></ROW><ROW><id>14692513</id><snippet>xyz</snippet></ROW><ROW><id>14692513</id><snippet>b) abc</snippet></ROW><ROW><id>14692513</id><snippet>?</snippet></ROW><ROW><id>14692513</id><snippet>['xyz', 'abc']</snippet></ROW><ROW><id>14692564</id><snippet>n</snippet></ROW><ROW><id>14692564</id><snippet>nbest_parse(sent, n=None)</snippet></ROW><ROW><id>14692747</id><snippet>reduce()</snippet></ROW><ROW><id>14692747</id><snippet>def getFromDict(dataDict, mapList):
    return reduce(lambda d, k: d[k], mapList, dataDict)
</snippet></ROW><ROW><id>14692747</id><snippet>getFromDict</snippet></ROW><ROW><id>14692747</id><snippet>setInDict()</snippet></ROW><ROW><id>14692747</id><snippet>def setInDict(dataDict, mapList, value):
    getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value
</snippet></ROW><ROW><id>14692747</id><snippet>mapList</snippet></ROW><ROW><id>14692747</id><snippet>&gt;&gt;&gt; getFromDict(dataDict, ["a", "r"])
1
&gt;&gt;&gt; getFromDict(dataDict, ["b", "v", "y"])
2
&gt;&gt;&gt; setInDict(dataDict, ["b", "v", "w"], 4)
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(dataDict)
{'a': {'r': 1, 's': 2, 't': 3},
 'b': {'u': 1, 'v': {'w': 4, 'x': 1, 'y': 2, 'z': 3}, 'w': 3}}
</snippet></ROW><ROW><id>14692805</id><snippet># table people
id INT, name VARCHAR(40), age INT, address VARCHAR(100)

1, john, 33, North America
2, dm03514, 28, Maryland
</snippet></ROW><ROW><id>14692805</id><snippet>cursor.execute('UPDATE people SET address = %s WHERE id = %s', ('Columbia, MD', 2));
</snippet></ROW><ROW><id>14692844</id><snippet>A[...]</snippet></ROW><ROW><id>14692844</id><snippet>A</snippet></ROW><ROW><id>14692844</id><snippet>if (op == Py_Ellipsis) {
    Py_INCREF(self);
    return (PyObject *)self;
}
</snippet></ROW><ROW><id>14692844</id><snippet>A[:]</snippet></ROW><ROW><id>14692844</id><snippet>A[(Ellipsis,)]</snippet></ROW><ROW><id>14692844</id><snippet>A[()]</snippet></ROW><ROW><id>14692844</id><snippet>A[(slice(None),) * A.ndim]</snippet></ROW><ROW><id>14692844</id><snippet>A</snippet></ROW><ROW><id>14692844</id><snippet>base</snippet></ROW><ROW><id>14692844</id><snippet>A</snippet></ROW><ROW><id>14692844</id><snippet>&gt;&gt;&gt; A[()] is A
False
&gt;&gt;&gt; A[()].base is A
True
</snippet></ROW><ROW><id>14692844</id><snippet>A[(Ellipsis,)]</snippet></ROW><ROW><id>14692844</id><snippet>A[()]</snippet></ROW><ROW><id>14692844</id><snippet>A</snippet></ROW><ROW><id>14692844</id><snippet>...</snippet></ROW><ROW><id>14692844</id><snippet>A[...] is A</snippet></ROW><ROW><id>14693037</id><snippet>prepare</snippet></ROW><ROW><id>14693037</id><snippet>req = requests.Request(url=uri, params=params, headers=headers)
prep = req.prepare()
print(prep.url)
</snippet></ROW><ROW><id>14693037</id><snippet>http://api.discogs.com/database/search?year=2008&amp;type=master&amp;page=1&amp;format=album&amp;artist=Radiohead´
</snippet></ROW><ROW><id>14693117</id><snippet>@attr</snippet></ROW><ROW><id>14693117</id><snippet>np = track['@attr']['nowplaying'] if '@attr' in track else ''
</snippet></ROW><ROW><id>14693193</id><snippet>StyleSheets</snippet></ROW><ROW><id>14693193</id><snippet>QWidgets</snippet></ROW><ROW><id>14693193</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QDialog):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self._offset = 200
        self._closed = False
        self._maxwidth = self.maximumWidth()
        self.widget = QtGui.QWidget(self)
        self.listbox = QtGui.QListWidget(self.widget)
        self.editor = QtGui.QTextEdit(self)
        self.editor.setStyleSheet("QTextEdit {color:red}")
        layout = QtGui.QHBoxLayout(self)
        layout.addWidget(self.widget)
        layout.addWidget(self.editor)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.move(500, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14693193</id><snippet>QTextEdit</snippet></ROW><ROW><id>14693193</id><snippet>......

app = QtGui.QApplication(sys.argv)
app.setStyleSheet("QTextEdit {color:red}")
......
</snippet></ROW><ROW><id>14693358</id><snippet>scaler.transform(X_train)</snippet></ROW><ROW><id>14693358</id><snippet>transform</snippet></ROW><ROW><id>14693358</id><snippet>X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)
</snippet></ROW><ROW><id>14693358</id><snippet>X_train = scaler.fit(X_train).transform(X_train)
</snippet></ROW><ROW><id>14693363</id><snippet>df['tracking'] = pd.np.arange(len(df))

In [12]: df
Out[12]: 
            val  tracking
date                     
2012-01-01  4.2         0
2012-01-02  3.7         1
2012-01-03  6.2         2
2012-01-04  1.2         3
2012-01-05  2.4         4
2012-01-06  2.3         5

df['tracking'] -= df.ix['2012-01-04']['tracking']

In [14]: df
Out[14]: 
            val  tracking
date                     
2012-01-01  4.2        -3
2012-01-02  3.7        -2
2012-01-03  6.2        -1
2012-01-04  1.2         0
2012-01-05  2.4         1
2012-01-06  2.3         2
</snippet></ROW><ROW><id>14693511</id><snippet>DSUtils</snippet></ROW><ROW><id>14693511</id><snippet>dsutils</snippet></ROW><ROW><id>14693511</id><snippet>from dsutils import DSUtils
</snippet></ROW><ROW><id>14693511</id><snippet>.py</snippet></ROW><ROW><id>14693511</id><snippet> import dsutils
 class_you_want = dsutils.DSUtils
</snippet></ROW><ROW><id>14693521</id><snippet>def linearize(self):
    print self.node,
    for child in self.children:
        child.linearize()
    print "NIL",
</snippet></ROW><ROW><id>14693521</id><snippet>In [5]: t.linearize()
1 2 5 NIL 3 4 NIL NIL NIL NIL
</snippet></ROW><ROW><id>14693521</id><snippet>"NIL"</snippet></ROW><ROW><id>14693521</id><snippet>children=None</snippet></ROW><ROW><id>14693521</id><snippet>self.children = children if children is not None else []</snippet></ROW><ROW><id>14693521</id><snippet>yield</snippet></ROW><ROW><id>14693535</id><snippet>app_label</snippet></ROW><ROW><id>14693535</id><snippet>__module__</snippet></ROW><ROW><id>14693535</id><snippet>__module__</snippet></ROW><ROW><id>14693535</id><snippet>app_label</snippet></ROW><ROW><id>14693535</id><snippet>__module__</snippet></ROW><ROW><id>14693789</id><snippet>import re

ansi_escape = re.compile(r'\x1b[^m]*m')
ansi_escape.sub('', sometext)
</snippet></ROW><ROW><id>14693789</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; ansi_escape = re.compile(r'\x1b[^m]*m')
&gt;&gt;&gt; sometext = 'ls\r\n\x1b[00m\x1b[01;31mexamplefile.zip\x1b[00m\r\n\x1b[01;31m'
&gt;&gt;&gt; ansi_escape.sub('', sometext)
'ls\r\nexamplefile.zip\r\n'
</snippet></ROW><ROW><id>14693848</id><snippet>csv</snippet></ROW><ROW><id>14693848</id><snippet>import csv
with open('test.csv', 'w', newline='') as fp:
    a = csv.writer(fp, delimiter=',')
    data = [['Me', 'You'],
            ['293', '219'],
            ['54', '13']]
    a.writerows(data)
</snippet></ROW><ROW><id>14693878</id><snippet>@implementer(IRequest)
</snippet></ROW><ROW><id>14693961</id><snippet>PickleType</snippet></ROW><ROW><id>14693961</id><snippet>from sqlalchemy.types import PickleType

class Foo(Base):
    __tablename__ = 'foo'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    array = Column(PickleType)

foo = Foo(name=u'bar', array=[1, 2, 3])
session.add(foo)
session.commit()

foo = session.query(Foo).filter_by(name=u'bar').one()
print foo.array
</snippet></ROW><ROW><id>14694075</id><snippet>__slots__</snippet></ROW><ROW><id>14694075</id><snippet>self.milk = self.yogurt = False
</snippet></ROW><ROW><id>14694075</id><snippet>setattr</snippet></ROW><ROW><id>14694075</id><snippet>class ThingsInTheFridge(object):
    false_things = ('bread', 'umbrella')
    true_things = ('milk', 'yogurt')
    def __init__(self):
        for thing in ThingsInTheFridge.false_things:
            setattr(self, thing, False)
        for thing in ThingsInTheFridge.true_things:
            setattr(self, thing, True)
</snippet></ROW><ROW><id>14694075</id><snippet>dict</snippet></ROW><ROW><id>14694075</id><snippet>set</snippet></ROW><ROW><id>14694234</id><snippet>global</snippet></ROW><ROW><id>14694234</id><snippet>inspect</snippet></ROW><ROW><id>14694234</id><snippet>import inspect

def calling_scope_variable(name):
  frame = inspect.stack()[1][0]
  while name not in frame.f_locals:
    frame = frame.f_back
    if frame is None:
      return None
  return frame.f_locals[name]

z = 1

def a():
  z = calling_scope_variable('z')
  z = z * 2
  print z

def b():
  z = calling_scope_variable('z')
  z = z + 1
  print z
  a()
  print z

b()
</snippet></ROW><ROW><id>14694234</id><snippet>2
4
2
</snippet></ROW><ROW><id>14694277</id><snippet>from itertools import product

def multiletters(seq, max_length):
    for n in range(1, max_length+1):
        for s in product(seq, repeat=n):
            yield ''.join(s)
</snippet></ROW><ROW><id>14694277</id><snippet>&gt;&gt;&gt; list(multiletters("abc", 2))
['a', 'b', 'c', 'aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
&gt;&gt;&gt; list(multiletters("abcd", 4))[:8]
['a', 'b', 'c', 'd', 'aa', 'ab', 'ac', 'ad']
</snippet></ROW><ROW><id>14694282</id><snippet>[Length][Data][Length][Data]...</snippet></ROW><ROW><id>14694282</id><snippet>import binascii
import struct
import urllib.request

def get_chunks(data):
    """
    data is a sequence of bytes of the format [Length][Data][Length][Data]...
    where Length is a short (two bytes) giving the length of the data following.

    Return an iterable of all contained Datas.
    """
    LENGTH_STRUCT = struct.Struct('&lt;H')
    len_idx = 0
    while(len_idx &lt; len(data)): 
        data_idx = len_idx + LENGTH_STRUCT.size
        length, = LENGTH_STRUCT.unpack(data[len_idx:data_idx])
        if length:
            len_idx = data_idx + length
            yield data[data_idx:len_idx]
        else:
            break

# Download the data.
with urllib.request.urlopen('http://pastebin.ca/raw/2310683') as in_file:
    hex_data = in_file.read()

# Unhexlify the data.
bin_data = binascii.unhexlify(hex_data)

# Remove the embedded lengths.
jpeg_data = b''.join(get_chunks(bin_data))

# Write out the JPEG.
with open('out.jpg', 'wb') as out_file:
    out_file.write(jpeg_data)
</snippet></ROW><ROW><id>14694352</id><snippet>pygame.transform.scale</snippet></ROW><ROW><id>14694669</id><snippet>soup.get_text()</snippet></ROW><ROW><id>14694669</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
print soup.get_text()
</snippet></ROW><ROW><id>14694669</id><snippet>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa
Consectetuer adipiscing elit. Some Link Aenean commodo ligula eget dolor. Aenean massa
Aenean massa.Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa
Consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa
</snippet></ROW><ROW><id>14694669</id><snippet>soup.get_text().replace('\n','\n\n')
</snippet></ROW><ROW><id>14694683</id><snippet>fig.delaxes(ax)
plt.draw()
</snippet></ROW><ROW><id>14695056</id><snippet>Stack</snippet></ROW><ROW><id>14695056</id><snippet>__len__</snippet></ROW><ROW><id>14695056</id><snippet>class Stack:
    def __init__(self):
        self.items = []

    def push(self,item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def show(self):
        print (self.items)

    def __len__(self):
        return len(self.items)

stack = Stack()

stack.push('World!')
stack.push('Hello')

while stack:  # tests the length through __len__
    print(stack.pop())
</snippet></ROW><ROW><id>14695056</id><snippet>.append()</snippet></ROW><ROW><id>14695056</id><snippet>.items</snippet></ROW><ROW><id>14695056</id><snippet>.pop()</snippet></ROW><ROW><id>14695056</id><snippet>__iter__</snippet></ROW><ROW><id>14695056</id><snippet>.__next__()</snippet></ROW><ROW><id>14695056</id><snippet>class Stack:
    # rest elided

    def __iter__(self):
        return self

    def next(self):
        try:
            return self.items.pop()
        except IndexError:  # empty
            raise StopIteration  # signal iterator is done
</snippet></ROW><ROW><id>14695158</id><snippet>c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
</snippet></ROW><ROW><id>14695158</id><snippet>?</snippet></ROW><ROW><id>14695158</id><snippet>execute()</snippet></ROW><ROW><id>14695369</id><snippet>def run(self):
        logging.info("Starting Awesome Program") 
        while 1:
            try:
                awesome_program(self)
            except:
                logging.exception('Got exception on main handler')
                OnError(self)
</snippet></ROW><ROW><id>14695369</id><snippet>while True</snippet></ROW><ROW><id>14695369</id><snippet>bool</snippet></ROW><ROW><id>14695369</id><snippet>while</snippet></ROW><ROW><id>14695448</id><snippet>In [11]: df[:'2012-01-07']
Out[11]: 
            val
date           
2012-01-01  4.2
2012-01-02  3.7
2012-01-03  6.2
2012-01-04  1.2
2012-01-05  2.4
2012-01-06  2.3
</snippet></ROW><ROW><id>14695448</id><snippet>irow</snippet></ROW><ROW><id>14695448</id><snippet>In [12]: df[:'2012-01-07'].irow(-1)
Out[12]: 
val    2.3
Name: 2012-01-06
</snippet></ROW><ROW><id>14695448</id><snippet>In [13]: df[:'2012-01-07'].irow(-1).name
Out[13]: '2012-01-06'
</snippet></ROW><ROW><id>14695504</id><snippet>sudo</snippet></ROW><ROW><id>14695504</id><snippet>pip</snippet></ROW><ROW><id>14695504</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>14695504</id><snippet>~/glenv/lib</snippet></ROW><ROW><id>14695504</id><snippet>sudo</snippet></ROW><ROW><id>14695504</id><snippet>sudo pip</snippet></ROW><ROW><id>14695504</id><snippet>sudoers</snippet></ROW><ROW><id>14695504</id><snippet>sudo pip</snippet></ROW><ROW><id>14695504</id><snippet>virtualenv</snippet></ROW><ROW><id>14695504</id><snippet>pip install</snippet></ROW><ROW><id>14695504</id><snippet>sudo pip install</snippet></ROW><ROW><id>14695504</id><snippet>sudo</snippet></ROW><ROW><id>14695504</id><snippet>virtualenv</snippet></ROW><ROW><id>14695504</id><snippet>sudo chmod</snippet></ROW><ROW><id>14695504</id><snippet>virtualenv</snippet></ROW><ROW><id>14695504</id><snippet>pip</snippet></ROW><ROW><id>14695590</id><snippet>socket</snippet></ROW><ROW><id>14695590</id><snippet>socket.getsockname()</snippet></ROW><ROW><id>14695590</id><snippet># IPv4
client = listening_socket.accept()
(ipv4,port) = client.getsockname()

# IPv6
client = listening_socket.accept()
(address, port, flow_info, scope_id) = client.getsockname()
</snippet></ROW><ROW><id>14695590</id><snippet>socket</snippet></ROW><ROW><id>14695853</id><snippet>echo $id
</snippet></ROW><ROW><id>14695853</id><snippet>id=`taskset -c 0 python &lt;path&gt;/run-apps.py &lt;thread&gt; | grep "pid" | awk '{print $2}'`
</snippet></ROW><ROW><id>14695853</id><snippet>$id</snippet></ROW><ROW><id>14695853</id><snippet>taskset -c 0 python &lt;path&gt;/run-apps.py &lt;thread&gt; | grep "pid" | awk '{print $2}'
</snippet></ROW><ROW><id>14695853</id><snippet>$id</snippet></ROW><ROW><id>14695853</id><snippet>tee</snippet></ROW><ROW><id>14695853</id><snippet>id=$(taskset -c 0 python &lt;path&gt;/run-apps.py &lt;thread&gt; |\
     grep "pid" | awk '{print $2}' | tee /dev/stderr) # Or some other file descriptor that goes to your terminal
</snippet></ROW><ROW><id>14695853</id><snippet>taskset -c 0 python &lt;path&gt;/run-apps.py &lt;thread&gt; | grep "pid" | awk '{print $2}' &gt; tmpfile &amp;
tail --pid $! -f tmpfile # Watch tmpfile until the backgrounded job completes
do-other-job --reading-from tmpfile
</snippet></ROW><ROW><id>14695999</id><snippet>TEMPLATE_CONTEXT_PROCESSOR</snippet></ROW><ROW><id>14695999</id><snippet>RequestContext</snippet></ROW><ROW><id>14695999</id><snippet>def session(request):
    return { 'session': request.session }
</snippet></ROW><ROW><id>14696121</id><snippet>socket</snippet></ROW><ROW><id>14696121</id><snippet>AF_INET = 2
SOCK_DGRAM = 2

class socket:
    def __init__(.....
</snippet></ROW><ROW><id>14696127</id><snippet>d = {'breakfast': df_breakfast, 'lunch': df_lunch}
</snippet></ROW><ROW><id>14696127</id><snippet>def add_col(df, col_name, col_entry):
    df = df.copy() # so as not to change df_lunch etc.
    df[col_name] = col_entry
    return df
</snippet></ROW><ROW><id>14696127</id><snippet>'X_ORIG_DF'</snippet></ROW><ROW><id>14696127</id><snippet>In [3]: df_combine = pd.DataFrame().append(list(add_col(v, 'X_ORIG_DF', k)
                                           for k, v in d.items()))
Out[3]: 
   0  1  X_ORIG_DF
0  1  2      lunch
1  3  4      lunch
0  1  2  breakfast
1  3  4  breakfast
</snippet></ROW><ROW><id>14696127</id><snippet>df_lunch = df_breakfast = pd.DataFrame([[1, 2], [3, 4]])</snippet></ROW><ROW><id>14696259</id><snippet>namelist()</snippet></ROW><ROW><id>14696259</id><snippet>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; zip = zipfile.ZipFile('test.zip')
&gt;&gt;&gt; zip.namelist()
['dir2/', 'file1']
</snippet></ROW><ROW><id>14696259</id><snippet>namelist()</snippet></ROW><ROW><id>14696259</id><snippet>namelist()</snippet></ROW><ROW><id>14696259</id><snippet>./file1
./dir2
./dir2/dir21
./dir3
./dir3/file3
./dir3/dir31
./dir3/dir31/file31
</snippet></ROW><ROW><id>14696259</id><snippet>zipfile.ZipFile.namelist()</snippet></ROW><ROW><id>14696259</id><snippet>[ 'file1', 
  'dir2/', 
  'dir2/dir21/', 
  'dir3/', 
  'dir3/file3', 
  'dir3/dir31/', 
  'dir3/dir31/file31' ]
</snippet></ROW><ROW><id>14696318</id><snippet>JPype</snippet></ROW><ROW><id>14696318</id><snippet>import jpype
import os.path

jarpath = os.path.join(os.path.abspath('.'), 'build/jar')
jpype.startJVM(jpype.getDefaultJVMPath(), "-Djava.ext.dirs=%s" % jarpath)

# get the class
hello_world = jpype.JClass('com.stackoverflow.HelloWorld')
t = hello_world()  # create an instance of the class
t.helloWorld("Say hello")  # try to call one of the class methods
jpype.shutdownJVM()
</snippet></ROW><ROW><id>14696318</id><snippet>subprocess</snippet></ROW><ROW><id>14696318</id><snippet>JPype</snippet></ROW><ROW><id>14696318</id><snippet>setup.py</snippet></ROW><ROW><id>14696343</id><snippet>five.grok</snippet></ROW><ROW><id>14696343</id><snippet>five.grok</snippet></ROW><ROW><id>14696343</id><snippet>five.grok</snippet></ROW><ROW><id>14696438</id><snippet>person_id</snippet></ROW><ROW><id>14696685</id><snippet>===</snippet></ROW><ROW><id>14696685</id><snippet>var a, b, c;
a = {};
b = {};
c = a;
console.log( a === b ); //false
console.log( a === c ); //true
</snippet></ROW><ROW><id>14696685</id><snippet>==</snippet></ROW><ROW><id>14696685</id><snippet>var a, b;
a = {
    toString: function () {
        return 'foo';
    }
};
b = 'foo';
console.log( a == b ); //true
console.log( a === b ); //false
</snippet></ROW><ROW><id>14696685</id><snippet>==</snippet></ROW><ROW><id>14696777</id><snippet>&lt;input type="text" style="display:none" id="myhiddentextfield" /&gt;
</snippet></ROW><ROW><id>14696777</id><snippet>$('#myhiddentextfield').show();
</snippet></ROW><ROW><id>14696858</id><snippet>convert</snippet></ROW><ROW><id>14696956</id><snippet>django.db.connections</snippet></ROW><ROW><id>14696956</id><snippet>django/db/__init__.py</snippet></ROW><ROW><id>14696956</id><snippet>ConnectionHandler</snippet></ROW><ROW><id>14696956</id><snippet>DATABASES</snippet></ROW><ROW><id>14697234</id><snippet>vars()</snippet></ROW><ROW><id>14697234</id><snippet>globals().update(vars(args))
</snippet></ROW><ROW><id>14697234</id><snippet>dest</snippet></ROW><ROW><id>14697234</id><snippet>list</snippet></ROW><ROW><id>14697234</id><snippet>print</snippet></ROW><ROW><id>14697472</id><snippet>%(other_id)s
</snippet></ROW><ROW><id>14697472</id><snippet>s</snippet></ROW><ROW><id>14697472</id><snippet>jQuery = ("$('#%(other_id)s').click(function() { "
                  "    if ($(this).is(':checked')) { "
                  "        $('#%(text_id)s').show()     "
                  "    } "
                  "    else {"
                  "       $('#%(text_id)s').hide()"
                  "    }"
                  " });")
</snippet></ROW><ROW><id>14697472</id><snippet>%</snippet></ROW><ROW><id>14697472</id><snippet>#</snippet></ROW><ROW><id>14697472</id><snippet>"""</snippet></ROW><ROW><id>14697472</id><snippet>jQuery = """\
$('#%{other_id}s').click(function() {
    if ($(this).is(':checked')) {
        $('#%(text_id)s').show()
    }
    else {
        $('#%(text_id)s').hide()
    }
});
"""
</snippet></ROW><ROW><id>14697472</id><snippet>jquery = render_template('toggle_field.js', other_id=choice_id, text_id=text_choice_id)
</snippet></ROW><ROW><id>14697472</id><snippet>toggle_field.js</snippet></ROW><ROW><id>14697472</id><snippet>$('#{{ other_id }}').click(function() {
    if ($(this).is(':checked')) {
        $('#{{ text_id }}').show()
    }
    else {
        $('#{{ text_id }}').hide()
    }
});
</snippet></ROW><ROW><id>14697635</id><snippet>def tree_max(node):
    maxleft  = float('-inf') if not node.left  else tree_max(node.left)
    maxright = float('-inf') if not node.right else tree_max(node.right)
    return max(node.value, maxleft, maxright)
</snippet></ROW><ROW><id>14697635</id><snippet>node</snippet></ROW><ROW><id>14697635</id><snippet>None</snippet></ROW><ROW><id>14697635</id><snippet>node</snippet></ROW><ROW><id>14697635</id><snippet>tree_max()</snippet></ROW><ROW><id>14697779</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>14697779</id><snippet>CMD.exe</snippet></ROW><ROW><id>14697779</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>14697779</id><snippet>set &gt; file.txt</snippet></ROW><ROW><id>14697779</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>14697779</id><snippet>CMD.exe</snippet></ROW><ROW><id>14697779</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>14697779</id><snippet>devenv</snippet></ROW><ROW><id>14697779</id><snippet>source</snippet></ROW><ROW><id>14697812</id><snippet>dotcloud url</snippet></ROW><ROW><id>14697812</id><snippet>www</snippet></ROW><ROW><id>14697812</id><snippet>www</snippet></ROW><ROW><id>14697816</id><snippet>with open('log.txt') as f:
    dico = dict()
    total_value = 0
    for line in f:
        #Feeding the dictionary
        split_array = line.split()
        possible_key = split_array[0]
        value = int(split_array[1])

        #If url has already been processed, update the value
        #Else, initialize the entry in the dictionary =&gt; default=0
        dico[possible_key] = dico.get(possible_key, default=0) + value

        #Updating the global sum
        total_value = total_value + value
</snippet></ROW><ROW><id>14697816</id><snippet>dico['/images/img81a.jpg'] =&gt; 19860
</snippet></ROW><ROW><id>14697886</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('x &gt; 0', 'x=1', number=10**7)
0.5472171306610107
&gt;&gt;&gt; timeit.timeit('x &gt;= 1', 'x=1', number=10**7)
0.5500850677490234
</snippet></ROW><ROW><id>14697886</id><snippet>int</snippet></ROW><ROW><id>14697886</id><snippet>case COMPARE_OP:
    w = POP();
    v = TOP();
    if (PyInt_CheckExact(w) &amp;&amp; PyInt_CheckExact(v)) {
        /* INLINE: cmp(int, int) */
        register long a, b;
        register int res;
        a = PyInt_AS_LONG(v);
        b = PyInt_AS_LONG(w);
        switch (oparg) {
        case PyCmp_LT: res = a &lt;  b; break;
        case PyCmp_LE: res = a &lt;= b; break;
        case PyCmp_EQ: res = a == b; break;
        case PyCmp_NE: res = a != b; break;
        case PyCmp_GT: res = a &gt;  b; break;
        case PyCmp_GE: res = a &gt;= b; break;
        case PyCmp_IS: res = v == w; break;
        case PyCmp_IS_NOT: res = v != w; break;
        default: goto slow_compare;
        }
        x = res ? Py_True : Py_False;
        Py_INCREF(x);
    }
</snippet></ROW><ROW><id>14697965</id><snippet>netcat</snippet></ROW><ROW><id>14697965</id><snippet>wireshark</snippet></ROW><ROW><id>14697965</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>14698192</id><snippet>lst = [('a','b'), ('c', 'b'), ('a', 'd'), ('e','f'), ('a', 'b')]

def merge(x):
    s = set()
    for i in x:
        if not s.intersection(i):
            yield i
            s.update(i)
</snippet></ROW><ROW><id>14698192</id><snippet>&gt;&gt;&gt; list(merge(lst))
[('a', 'b'), ('e', 'f')]
&gt;&gt;&gt; list(merge([('a', 'b'), ('c', 'd'), ('c', 'e')]))
[('a', 'b'), ('c', 'd')]
&gt;&gt;&gt; list(merge([('a', 'b'), ('a', 'c'), ('c', 'd')]))
[('a', 'b'), ('c', 'd')]
</snippet></ROW><ROW><id>14698284</id><snippet>numpy</snippet></ROW><ROW><id>14698284</id><snippet>mask = (z &gt;= 0.3) &amp; (z &lt; 0.6)
</snippet></ROW><ROW><id>14698284</id><snippet>extract</snippet></ROW><ROW><id>14698284</id><snippet>ma</snippet></ROW><ROW><id>14698284</id><snippet>True==1</snippet></ROW><ROW><id>14698284</id><snippet>False==0</snippet></ROW><ROW><id>14698284</id><snippet>zm = z * mask
</snippet></ROW><ROW><id>14698284</id><snippet>0</snippet></ROW><ROW><id>14698284</id><snippet>len</snippet></ROW><ROW><id>14698284</id><snippet>count_nonzero</snippet></ROW><ROW><id>14698284</id><snippet>In [588]: z=np.random.rand(10)
In [589]: z
Out[589]: 
array([ 0.33335522,  0.66155206,  0.60602815,  0.05755882,  0.03596728,
        0.85610536,  0.06657973,  0.43287193,  0.22596789,  0.62220608])
In [590]: mask = (z &gt;= 0.3) &amp; (z &lt; 0.6)
In [591]: mask
Out[591]: array([ True, False, False, False, False, False, False,  True, False, False], dtype=bool)
In [592]: z * mask
Out[592]: 
array([ 0.33335522,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.43287193,  0.        ,  0.        ])
In [593]: np.count_nonzero(z * mask)
Out[593]: 2
In [594]: np.extract(mask, z)
Out[594]: array([ 0.33335522,  0.43287193])
In [595]: len(np.extract(mask, z))
Out[595]: 2
</snippet></ROW><ROW><id>14698508</id><snippet>pip install terminal.embed</snippet></ROW><ROW><id>14698508</id><snippet>pip install --upgrade ipython
</snippet></ROW><ROW><id>14698568</id><snippet>some_type</snippet></ROW><ROW><id>14698568</id><snippet>gdb.Type</snippet></ROW><ROW><id>14698568</id><snippet>bar = some_type['foo']
</snippet></ROW><ROW><id>14698568</id><snippet>bar</snippet></ROW><ROW><id>14698568</id><snippet>gdb.Field</snippet></ROW><ROW><id>14698568</id><snippet>Type.fields</snippet></ROW><ROW><id>14698568</id><snippet>gdb.Field</snippet></ROW><ROW><id>14698568</id><snippet>Type.fields</snippet></ROW><ROW><id>14698568</id><snippet>struct</snippet></ROW><ROW><id>14698568</id><snippet>dict</snippet></ROW><ROW><id>14698568</id><snippet>Field</snippet></ROW><ROW><id>14698568</id><snippet>for name, field in foo.type.iteritems():
</snippet></ROW><ROW><id>14698568</id><snippet>for name, field in foo.type.iterkeys():
</snippet></ROW><ROW><id>14698568</id><snippet>deep_items</snippet></ROW><ROW><id>14698568</id><snippet>struct S {
    int x;
    int y;
};
</snippet></ROW><ROW><id>14698568</id><snippet>(gdb) python struct_S = my_s.type # or gdb.lookup_type("struct S"), etc.
(gdb) python print struct_S.keys()
{['a', 'b']}
(gdb) python print my_s['a']
0
</snippet></ROW><ROW><id>14698568</id><snippet>types.py</snippet></ROW><ROW><id>14698568</id><snippet>gdb.types.deep_item(type_)</snippet></ROW><ROW><id>14698568</id><snippet>dict</snippet></ROW><ROW><id>14698568</id><snippet>for name in instance_.type:</snippet></ROW><ROW><id>14698568</id><snippet>instance_.type.iteritems()</snippet></ROW><ROW><id>14698568</id><snippet>fields</snippet></ROW><ROW><id>14698568</id><snippet>for field in inst.fields:
    fname = field.name
    ftype = field.type
    fval = inst[fname]
</snippet></ROW><ROW><id>14698568</id><snippet>struct</snippet></ROW><ROW><id>14698568</id><snippet>struct</snippet></ROW><ROW><id>14698568</id><snippet>deep_items</snippet></ROW><ROW><id>14698654</id><snippet>pip install requests
</snippet></ROW><ROW><id>14698654</id><snippet>import requests
from bs4 import BeautifulSoup

s = requests.Session()
mainPage = s.get("http://uk.accessorize.com")

mainPagesoup = BeautifulSoup(mainPage.text)
menu=mainPagesoup.find("div", { "class" : "mainNavigation_linkList_content" })
print(menu)
</snippet></ROW><ROW><id>14698697</id><snippet>object</snippet></ROW><ROW><id>14698697</id><snippet>class Beer(object):
    def __init__(self, temp):
        self.__T = temp

    @property
    def temp(self):
        return Param('Beer Temperature', self.__T)

    @temp.setter
    def temp(self,value):
        self.__T = float(value) 
</snippet></ROW><ROW><id>14698876</id><snippet>list</snippet></ROW><ROW><id>14698876</id><snippet>if</snippet></ROW><ROW><id>14698876</id><snippet>elif</snippet></ROW><ROW><id>14698876</id><snippet>def do_stuff(x, *args):
    if x == 'ADD':
        return do_add(*args)
    elif x == 'SUB':
        return do_sub(*args)
    # …
    else:
        raise RuntimeError('Never heard of {}'.format(x))
</snippet></ROW><ROW><id>14698876</id><snippet>list</snippet></ROW><ROW><id>14698876</id><snippet>return args[0] + args[1]</snippet></ROW><ROW><id>14698876</id><snippet>do_add</snippet></ROW><ROW><id>14698876</id><snippet>dict</snippet></ROW><ROW><id>14698876</id><snippet>func_map = {'ADD': do_add, 'SUB': do_sub, … }

def do_stuff(x, *args):
    try:
        return func_map[x](*args)
    except KeyError:
        raise RuntimeError('Never heard of {}'.format(x))
</snippet></ROW><ROW><id>14698876</id><snippet>dict</snippet></ROW><ROW><id>14698876</id><snippet>dict</snippet></ROW><ROW><id>14698876</id><snippet>if</snippet></ROW><ROW><id>14698876</id><snippet>elif</snippet></ROW><ROW><id>14698876</id><snippet>else</snippet></ROW><ROW><id>14698876</id><snippet>dict</snippet></ROW><ROW><id>14698876</id><snippet>except</snippet></ROW><ROW><id>14698876</id><snippet>dict.get</snippet></ROW><ROW><id>14698876</id><snippet>def do_stuff(x, *args):
    return func_map.get(x, do_default)(*args)
</snippet></ROW><ROW><id>14698917</id><snippet>event.artist.get_facecolor()</snippet></ROW><ROW><id>14698917</id><snippet>import matplotlib.pyplot as plt

def on_pick(event):
    print event.artist.get_facecolor()

fig, ax = plt.subplots()
bars = ax.bar(range(10), range(10), picker=5)

fig.canvas.mpl_connect('pick_event', on_pick)

plt.show()
</snippet></ROW><ROW><id>14699028</id><snippet>json</snippet></ROW><ROW><id>14699028</id><snippet> import json
 data_str = json.dumps(data)
</snippet></ROW><ROW><id>14699028</id><snippet>pickle</snippet></ROW><ROW><id>14699312</id><snippet>symbol = u'★'
</snippet></ROW><ROW><id>14699312</id><snippet>html = '&amp;#{};'.format(ord(symbol))
</snippet></ROW><ROW><id>14699312</id><snippet>&amp;#</snippet></ROW><ROW><id>14699312</id><snippet>;</snippet></ROW><ROW><id>14699312</id><snippet>chr</snippet></ROW><ROW><id>14699312</id><snippet>unichr</snippet></ROW><ROW><id>14699312</id><snippet>&amp;#xZZZ;</snippet></ROW><ROW><id>14699312</id><snippet>ZZZ</snippet></ROW><ROW><id>14699312</id><snippet>x</snippet></ROW><ROW><id>14699312</id><snippet>text = u"I like symb★ls!"
html = text.encode('ascii', errors='xmlcharrefreplace').decode('ascii')
</snippet></ROW><ROW><id>14699312</id><snippet>&lt;</snippet></ROW><ROW><id>14699312</id><snippet>&amp;clubs;</snippet></ROW><ROW><id>14699312</id><snippet>json</snippet></ROW><ROW><id>14700017</id><snippet>print</snippet></ROW><ROW><id>14700017</id><snippet>import glob
print(glob.glob("/*.txt")) #Note the parens for print()
</snippet></ROW><ROW><id>14700035</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>14700035</id><snippet>import json

...

(headers, js) = response.split("\r\n\r\n")
data = json.loads(js)
token = data["authentication-token"]
secret = data["authentication-secret"]
</snippet></ROW><ROW><id>14700069</id><snippet>admin.autodiscover()
</snippet></ROW><ROW><id>14700069</id><snippet>url(r'^admin/', include(admin.site.urls))
</snippet></ROW><ROW><id>14700069</id><snippet>admin.site.register(MyModelGoesHere, MyModelAdminNameGoesHere)
</snippet></ROW><ROW><id>14700130</id><snippet>timestamp = time.strftime('%H:%M:%S')
</snippet></ROW><ROW><id>14700197</id><snippet>\</snippet></ROW><ROW><id>14700197</id><snippet>\</snippet></ROW><ROW><id>14700197</id><snippet>&gt;&gt;&gt; text = r'ab\fx*abcdfansab\fasdafdab\f664s'
&gt;&gt;&gt; for m in re.finditer( r'ab\\f', text ):
...    print( 'll found', m.start(), m.end() )
...
('ll found', 0, 4)
('ll found', 14, 18)
('ll found', 24, 28) 
</snippet></ROW><ROW><id>14700197</id><snippet>&gt;&gt;&gt; text = 'ab\\fx*abcdfansab\\fasdafdab\\f664s'
&gt;&gt;&gt; for m in re.finditer( 'ab\\\\f', text ):
...     print( 'll found', m.start(), m.end() )
... 
('ll found', 0, 4)
('ll found', 14, 18)
('ll found', 24, 28)
</snippet></ROW><ROW><id>14700247</id><snippet>string = "{0:%Y/%m/%d %H:%M:%S}".format(d1)
</snippet></ROW><ROW><id>14700247</id><snippet>format()</snippet></ROW><ROW><id>14700247</id><snippet>"Date range: {0:{2}} to {1:{2}}".format(d1, d2, fmt)
</snippet></ROW><ROW><id>14700247</id><snippet>0[index]</snippet></ROW><ROW><id>14700247</id><snippet>"Date range: {0[0]:{1}} to {0[1]:{1}}".format(daterange, fmt)
</snippet></ROW><ROW><id>14700247</id><snippet>"Date range: {dates[0]:{fmt}} to {dates[1]:{fmt}}".format(dates=daterange, fmt=fmt)
</snippet></ROW><ROW><id>14700258</id><snippet>def test_raise(self):
    """Learn how to create an exception and test its implementation."""
    self.assertRaises(LearningError, addition_no_four, 2, 4)
</snippet></ROW><ROW><id>14700258</id><snippet>def test_raise(self):
    """Learn how to create an exception and test its implementation."""
    with self.assertRaises(LearningError):
        addition_no_four(2, 4)
</snippet></ROW><ROW><id>14701014</id><snippet>add_task</snippet></ROW><ROW><id>14701014</id><snippet>execute</snippet></ROW><ROW><id>14701014</id><snippet>## {{{ http://code.activestate.com/recipes/577187/ (r9)
from Queue import Queue
from threading import Thread

class Worker(Thread):
    """Thread executing tasks from a given tasks queue"""
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try: func(*args, **kargs)
            except Exception, e: print e
            self.tasks.task_done()

class ThreadPool:
    """Pool of threads consuming tasks from a queue"""
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads): Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        """Add a task to the queue"""
        self.tasks.put((func, args, kargs))

    def wait_completion(self):
        """Wait for completion of all the tasks in the queue"""
        self.tasks.join()

if __name__ == '__main__':
    from random import randrange
    delays = [randrange(1, 10) for i in range(100)]

    from time import sleep
    def wait_delay(d):
        print 'sleeping for (%d)sec' % d
        sleep(d)

    # 1) Init a Thread pool with the desired number of threads
    pool = ThreadPool(20)

    for i, d in enumerate(delays):
        # print the percentage of tasks placed in the queue
        print '%.2f%c' % ((float(i)/float(len(delays)))*100.0,'%')

        # 2) Add the task to the queue
        pool.add_task(wait_delay, d)

    # 3) Wait for completion
    pool.wait_completion()
## end of http://code.activestate.com/recipes/577187/ }}}
</snippet></ROW><ROW><id>14701252</id><snippet>&gt;&gt;&gt; [[i-j for i,j in zip(m, rav)] for m in M]
[[-0.2925, -0.0675, -0.3675, -0.024999999999999967, 0.44250000000000006], [-0.1625, -0.20750000000000002, -0.007499999999999951, 0.185, -0.2375], [0.5075000000000001, -0.08750000000000002, 0.03249999999999997, 0.07500000000000001, -0.057499999999999996], [-0.05249999999999999, 0.3625, 0.3425, -0.235, -0.1475]]
</snippet></ROW><ROW><id>14701444</id><snippet>def multi(request):
    if 'hobbies' in request.GET and request.GET['hobbies']:
        message = ','.join(request.GET.getlist('hobbies')) 
    else:
        message = 'enterd wrong datails'
    return HttpResponse(message)
</snippet></ROW><ROW><id>14701533</id><snippet>for filename in glob('*.xls*'):
    try:
       wb = xlrd.open_workbook(filename)
    except xlrd.XLRDERROR:
       print 'Problem processing {}'.format(filename)
</snippet></ROW><ROW><id>14701567</id><snippet>cla</snippet></ROW><ROW><id>14701567</id><snippet>dict</snippet></ROW><ROW><id>14701567</id><snippet>from somemodule import SomeClass

class TheClass(object):
    def __init__(self, username, password, url):
        #do stuff

class AnOtherClass(object):
    def __init__(self, username, password, url):
        # do stuff

CLASS_NAMES_TO_CLASSES = {
    # Note: TheClass is *not* a string, is the class!!!
    'FirstName': TheClass,
    'SecondName': AnOtherClass,
    'SomeClass': SomeClass,
    }

class SMSMrg(object):
    #do stuff
    def loadsettings(self):
       get_all_sp = ServiceProvider.objects.filter(status = True)
       for obj in get_all_sp:
           SERVIVEPROVIDER = obj.class_Name
           cla = str(SERVIVEPROVIDER)
           class_object = CLASS_NAMES_TO_CLASSES[cla](obj.userName,obj.password,obj.sendingurl)
</snippet></ROW><ROW><id>14701567</id><snippet>dict</snippet></ROW><ROW><id>14701567</id><snippet>CLASS_NAMES_TO_CLASSES</snippet></ROW><ROW><id>14701567</id><snippet>SomeClass</snippet></ROW><ROW><id>14701567</id><snippet>eval</snippet></ROW><ROW><id>14701567</id><snippet>pickle</snippet></ROW><ROW><id>14701587</id><snippet>@login_required()
def UserSell(request):
    ..........

    if request.user.is_authenticated():
        return HttpResponseRedirect(reverse('app_name:login'))
    else:
        context=RequestContext(request)
        return render_to_response('sell.html',{'theuser':request.user,'thegigform':gigform},context_instance=context)
</snippet></ROW><ROW><id>14701702</id><snippet>repr()</snippet></ROW><ROW><id>14701702</id><snippet>Book</snippet></ROW><ROW><id>14701702</id><snippet>object.__repr__(self)</snippet></ROW><ROW><id>14701702</id><snippet>Called by the repr() built-in function and by string conversions (reverse quotes)
to compute the “official” string representation of an object. [...] The return 
value must be a string object. If a class defines __repr__() but not __str__(),
then __repr__() is also used when an “informal” string representation of 
instances of that class is required.
</snippet></ROW><ROW><id>14701702</id><snippet>class Book(object):    
    def __repr__(self):
        return 'I am a book'

class Library(object):    
    def __init__(self,*books):
        self.books = books
    def __repr__(self):
        return ' | '.join(repr(book) for book in self.books)

b1, b2 = Book(), Book()
print Library(b1,b2)

#prints I am a book | I am a book
</snippet></ROW><ROW><id>14701894</id><snippet>f.__case</snippet></ROW><ROW><id>14701894</id><snippet>f._switch__case</snippet></ROW><ROW><id>14701894</id><snippet>__case</snippet></ROW><ROW><id>14701894</id><snippet>_switch__case</snippet></ROW><ROW><id>14701894</id><snippet>@staticmethod</snippet></ROW><ROW><id>14701894</id><snippet>class</snippet></ROW><ROW><id>14701894</id><snippet>class switch:
    def __init__(self):
        self.__case_map = {}

        def set_case(key,f):
            self.__case_map[key] = f

        a = [getattr(self,e) for e in dir(self) if getattr(self,e) is not None and hasattr(getattr(self,e),'_switch__case')]
        for f in a:
            cases = getattr(f,'_switch__case')
            if isinstance(cases,tuple) or isinstance(cases,list):
                for c in cases: set_case(c,f)
            else:
                set_case(cases,f)

    def match(self,value):
        try:
            self.__case_map[value]
        except KeyError:
            return self.__case_map['_default']
        return self.__case_map[value]

    @staticmethod
    def case(comparision):
        def __assign_case(f):
            f.__case = comparision
            return f
        return __assign_case

class b(switch):
    @switch.case((1,3))
    def event_one(self):
        print('Event handler for 1,3 in b')

    @switch.case(2)
    def event_two(self):
        print('Event handler for 2 in b')

    @switch.case('_default')
    def default(self):
        print('No match was found, using default case')



a = b()
a.match(1)()
a.match(2)()
a.match(5)()
</snippet></ROW><ROW><id>14702036</id><snippet>string</snippet></ROW><ROW><id>14702036</id><snippet>import string
alphabet = string.ascii_uppercase + string.ascii_lowercase + string.digits + '+/'
</snippet></ROW><ROW><id>14702250</id><snippet>NameError: name 'SillyWalkError' is not defined</snippet></ROW><ROW><id>14702250</id><snippet>SillyWalkError</snippet></ROW><ROW><id>14702250</id><snippet>SillyWalkError</snippet></ROW><ROW><id>14702250</id><snippet>except</snippet></ROW><ROW><id>14702381</id><snippet>import numpy as np
from scipy.signal import butter, lfilter

##############################################################
# For generating sample-data
##############################################################
from scipy.integrate import odeint

def roessler_ode(y,t,omega=1,a=0.165,b=0.2,c=10):
    dy = np.zeros((3))
    dy[0] = -1.0*(omega*y[1] + y[2]) #+ e1*(y[3]-y[0])
    dy[1] = omega * y[0] + a * y[1]
    dy[2] = b + y[2] * (y[0] - c)
    return dy

class Roessler(object):
    """A single coupled Roessler oscillators"""
    def __init__(self, y=None, omega=1.0, a=0.165,b=0.2,c=10):
        self.omega = omega
        self.a = a
        self.b = b
        self.c = c
        if y==None:
            self.y = np.random.random((3))+0.5
        else:
            self.y = y

    def ode(self,y,t):
        dy = roessler_ode(y[:],t,self.omega,self.a,self.b,self.c)
        return dy

    def integrate(self,ts):
        rv = odeint(self.ode,self.y,ts)
        self.y = rv[-1,:]
        return rv
###############################################################
</snippet></ROW><ROW><id>14702381</id><snippet>def butter_bandpass(lowcut,highcut,fs,order=8):
    nyq = 0.5*fs
    low = lowcut/nyq
    high = highcut/nyq

    b,a = butter(order, [low, high], btype='band')
    return b,a

def butter_bandpass_filter(data,lowcut,highcut,fs,order=8):
    b,a = butter_bandpass(lowcut,highcut,fs,order=order)
    return lfilter(b,a,data) 
</snippet></ROW><ROW><id>14702381</id><snippet># generate sample data
data = Roessler().integrate(np.arange(0,1000,0.1))[:,2]
data += np.random.normal(size=data.shape)
</snippet></ROW><ROW><id>14702381</id><snippet>timeit</snippet></ROW><ROW><id>14702381</id><snippet># time execution
from timeit import timeit
time_order8 = timeit("butter_bandpass_filter(data,300,2000,20000,8)", "from __main__ import butter_bandpass_filter, butter_bandpass, data", number=100)
time_order2 = timeit("butter_bandpass_filter(data,300,2000,20000,2)", "from __main__ import butter_bandpass_filter, butter_bandpass, data", number=100)
print "For order 8: %.2f seconds" % time_order8
print "For order 2: %.2f seconds" % time_order2
</snippet></ROW><ROW><id>14702381</id><snippet>For order 8: 11.70 seconds
For order 2: 0.54 seconds
</snippet></ROW><ROW><id>14702381</id><snippet>data_bp8 = butter_bandpass_filter(data,300,2000,20000,8)
data_bp2 = butter_bandpass_filter(data,300,2000,20000,2)
</snippet></ROW><ROW><id>14702381</id><snippet># plot signals
import matplotlib.pyplot as plt
plt.figure(1)
plt.plot(data, label="raw")
plt.plot(data_bp8, label="order 8")
plt.plot(data_bp2, label="order 2")
plt.legend()
</snippet></ROW><ROW><id>14702381</id><snippet># plot power spectral densities
plt.figure(2)
plt.psd(data, Fs=200000, label="raw")
plt.psd(data_bp8, Fs=20000, label="order 8")
plt.psd(data_bp2, Fs=20000, label="order 2")
plt.legend()

plt.show()
</snippet></ROW><ROW><id>14702381</id><snippet>lfilter</snippet></ROW><ROW><id>14702381</id><snippet>filtfilt</snippet></ROW><ROW><id>14702381</id><snippet>butter_bandpass_filter</snippet></ROW><ROW><id>14702381</id><snippet>butter_bandpass</snippet></ROW><ROW><id>14702381</id><snippet>*args</snippet></ROW><ROW><id>14702381</id><snippet>**kwargs</snippet></ROW><ROW><id>14702381</id><snippet>def butter_bandpass(lowcut,highcut,fs,order=8):
    nyq = 0.5*fs
    low = lowcut/nyq
    high = highcut/nyq

    b,a = butter(order, [low, high], btype='band')
    return b,a

def butter_bandpass_filter(data, *args, **kwargs):
    b,a = butter_bandpass(*args, **kwargs)
    return lfilter(b,a,data) 
</snippet></ROW><ROW><id>14702381</id><snippet>import numpy as np
from scipy.signal import butter, lfilter

##############################################################
# For generating sample-data
##############################################################
from scipy.integrate import odeint

def roessler_ode(y,t,omega=1,a=0.165,b=0.2,c=10):
    dy = np.zeros((3))
    dy[0] = -1.0*(omega*y[1] + y[2]) #+ e1*(y[3]-y[0])
    dy[1] = omega * y[0] + a * y[1]
    dy[2] = b + y[2] * (y[0] - c)
    return dy

class Roessler(object):
    """A single coupled Roessler oscillators"""
    def __init__(self, y=None, omega=1.0, a=0.165,b=0.2,c=10):
        self.omega = omega
        self.a = a
        self.b = b
        self.c = c
        if y==None:
            self.y = np.random.random((3))+0.5
        else:
            self.y = y

    def ode(self,y,t):
        dy = roessler_ode(y[:],t,self.omega,self.a,self.b,self.c)
        return dy

    def integrate(self,ts):
        rv = odeint(self.ode,self.y,ts)
        self.y = rv[-1,:]
        return rv
###############################################################


def butter_bandpass(lowcut,highcut,fs,order=8):
    nyq = 0.5*fs
    low = lowcut/nyq
    high = highcut/nyq

    b,a = butter(order, [low, high], btype='band')
    return b,a

def butter_bandpass_filter(data,lowcut,highcut,fs,order=8):
    b,a = butter_bandpass(lowcut,highcut,fs,order=order)
    return lfilter(b,a,data) 

# generate sample data
data = Roessler().integrate(np.arange(0,1000,0.1))[:,2]
data += np.random.normal(size=data.shape)

# time execution
from timeit import timeit
time_order8 = timeit("butter_bandpass_filter(data,300,2000,20000,8)", "from __main__ import butter_bandpass_filter, butter_bandpass, data", number=100)
time_order2 = timeit("butter_bandpass_filter(data,300,2000,20000,2)", "from __main__ import butter_bandpass_filter, butter_bandpass, data", number=100)
print "For order 8: %.2f seconds" % time_order8
print "For order 2: %.2f seconds" % time_order2

data_bp8 = butter_bandpass_filter(data,300,2000,20000,8)
data_bp2 = butter_bandpass_filter(data,300,2000,20000,2)

# plot signals
import matplotlib.pyplot as plt
plt.figure(1)
plt.plot(data, label="raw")
plt.plot(data_bp8, label="order 8")
plt.plot(data_bp2, label="order 2")
plt.legend()

# plot power spectral densities
plt.figure(2)
plt.psd(data, Fs=200000, label="raw")
plt.psd(data_bp8, Fs=20000, label="order 8")
plt.psd(data_bp2, Fs=20000, label="order 2")
plt.legend()

plt.show()
</snippet></ROW><ROW><id>14702494</id><snippet>if not len(l) or not len(r):  
        return l or r
</snippet></ROW><ROW><id>14702494</id><snippet>result = []  
i = j = 0  
</snippet></ROW><ROW><id>14702494</id><snippet>result</snippet></ROW><ROW><id>14702494</id><snippet>i</snippet></ROW><ROW><id>14702494</id><snippet>j</snippet></ROW><ROW><id>14702494</id><snippet>while (len(result) &lt; len(r) + len(l)):  
</snippet></ROW><ROW><id>14702494</id><snippet>while</snippet></ROW><ROW><id>14702494</id><snippet>result</snippet></ROW><ROW><id>14702494</id><snippet>    if l[i] &lt; r[j]:  
            result.append(l[i])  
            i += 1  
    else:  
            result.append(r[j])  
            j += 1  
</snippet></ROW><ROW><id>14702494</id><snippet>l[i]</snippet></ROW><ROW><id>14702494</id><snippet>r[j]</snippet></ROW><ROW><id>14702494</id><snippet>result</snippet></ROW><ROW><id>14702494</id><snippet>    if i == len(l) or j == len(r):  
            result.extend(l[i:] or r[j:]) 
            break 
</snippet></ROW><ROW><id>14702494</id><snippet>result</snippet></ROW><ROW><id>14702494</id><snippet>return result
</snippet></ROW><ROW><id>14702494</id><snippet>result</snippet></ROW><ROW><id>14702842</id><snippet>description = forms.CharField(widget=TinyMCE(attrs={'cols': 80, 'rows': 30}), required=False, label="Description")
</snippet></ROW><ROW><id>14702873</id><snippet>uri = "http://www.yelp.com/biz/carriage-house-caf%25C3%25A9-houston-2"

while True:
    dec = urllib2.unquote(uri)
    if dec == uri:
        break
    uri = dec

uri = uri.decode('utf8')
print '%r' % uri  
# u'http://www.yelp.com/biz/carriage-house-caf\xe9-houston-2'
</snippet></ROW><ROW><id>14702895</id><snippet>python -tt</snippet></ROW><ROW><id>14702955</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    # 'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'purchaseapp', #this is my app
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    'django.contrib.admindocs',
    # Use email as username https://github.com/dabapps/django-email-as-username
     'emailusernames',
)
</snippet></ROW><ROW><id>14703018</id><snippet>length</snippet></ROW><ROW><id>14703027</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def tell_click_coordinates(event):
    print "X: %.0f, Y: %.0f" % (event.xdata, event.ydata)

fig = plt.figure("Ti Zr")
fig.canvas.mpl_connect("button_press_event", tell_click_coordinates)

ax = plt.subplot(111)
im = plt.imshow(np.flipud(plt.imread('14675002_in.png')), 
    origin='lower', 
    extent=[0, 800, 1000, 32700])
plt.xticks([10,15, 43, 95, 215,542,800])
plt.yticks([1000, 1860, 2670, 8600, 16600,32700])

plt.axis('normal')
plt.show()
</snippet></ROW><ROW><id>14703027</id><snippet>X: 6, Y: 1576
X: 6, Y: 6902
X: 10, Y: 13037
X: 8, Y: 20415
X: 11, Y: 26383
X: 76, Y: 2177
X: 260, Y: 1846
X: 494, Y: 1846
X: 594, Y: 1680
X: 715, Y: 1928
</snippet></ROW><ROW><id>14703027</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure("Ti Zr")

ax = plt.subplot(111)
im = plt.imshow(np.flipud(plt.imread('14675002_in.png')), 
    origin='lower', 
    extent=[0, 800, 1000, 32700])
plt.xticks([76,260,494,594,715,800],[10,15, 43, 95, 215,542,800])
plt.yticks([1576,6902, 13037, 20415, 26383, 32700],[1000, 1860, 2670, 8600, 16600,32700])

plt.axis('normal')
plt.show()
</snippet></ROW><ROW><id>14703309</id><snippet>from numpy.random import uniform
import numpy

@profile
def go(m=3):
    data = uniform(size=100000000)
    dc = numpy.median(data)
    t1 = data-dc
    t2 = numpy.absolute(t1) &lt; m*numpy.std(data)
    data[t2] = dc
    return data

if __name__ == '__main__':
    go()
</snippet></ROW><ROW><id>14703309</id><snippet>$ python -m memory_profiler t1.py 
Filename: t1.py

Line #    Mem usage    Increment   Line Contents
================================================
     4                             @profile
     5     16.61 MB      0.00 MB   def go(m=3):
     6    779.56 MB    762.95 MB       data = uniform(size=100000000)
     7    779.62 MB      0.06 MB       dc = numpy.median(data)
     8   1542.57 MB    762.95 MB       t1 = data-dc
     9   1637.99 MB     95.42 MB       t2 = numpy.absolute(t1) &lt; m*numpy.std(data)
    10   1638.00 MB      0.02 MB       data[t2] = dc
    11   1638.00 MB      0.00 MB       return data
</snippet></ROW><ROW><id>14703309</id><snippet>$ python -m memory_profiler t1.py 
Filename: t1.py

Line #    Mem usage    Increment   Line Contents
================================================
     4                             @profile
     5     16.61 MB      0.00 MB   def go(m=3):
     6    779.56 MB    762.95 MB       data = uniform(size=100000000)
     7    779.62 MB      0.06 MB       dc = numpy.median(data)
     8    779.63 MB      0.01 MB       data -= dc
     9    875.05 MB     95.42 MB       t2 = numpy.absolute(data) &lt; m*numpy.std(data)
    10    875.07 MB      0.02 MB       data[t2] = dc
    11    875.07 MB      0.00 MB       return data
</snippet></ROW><ROW><id>14703332</id><snippet>def audit_action(action):
    def decorator_func(func):
        def wrapper_func(*args, **kwargs):
            # Invoke the wrapped function first
            retval = func(*args, **kwargs)
            # Now do something here with retval and/or action
            print 'In wrapper_func, handling action {!r} after wrapped function returned {!r}'.format(action, retval)
            return retval
        return wrapper_func
    return decorator_func
</snippet></ROW><ROW><id>14703332</id><snippet>audit_action(action='did something')</snippet></ROW><ROW><id>14703332</id><snippet>decorator_func</snippet></ROW><ROW><id>14703332</id><snippet>do_something</snippet></ROW><ROW><id>14703332</id><snippet>do_something = decorator_func(do_something)</snippet></ROW><ROW><id>14703332</id><snippet>do_something</snippet></ROW><ROW><id>14703332</id><snippet>wrapper_func</snippet></ROW><ROW><id>14703332</id><snippet>wrapper_func()</snippet></ROW><ROW><id>14703332</id><snippet>do_something()</snippet></ROW><ROW><id>14703332</id><snippet>&gt;&gt;&gt; do_something('foo')
In wrapper_func, handling action 'did something' after wrapped function returned 'bar'
'bar'
</snippet></ROW><ROW><id>14703589</id><snippet>mylist = [v['x'] for v in Mydict.values()]
</snippet></ROW><ROW><id>14703589</id><snippet>'x'</snippet></ROW><ROW><id>14703589</id><snippet>'x'</snippet></ROW><ROW><id>14703589</id><snippet>mylist = [v.get('x', None) for v in Mydict.values()]
</snippet></ROW><ROW><id>14703589</id><snippet>'x'</snippet></ROW><ROW><id>14703589</id><snippet>None</snippet></ROW><ROW><id>14703589</id><snippet>KeyError</snippet></ROW><ROW><id>14704006</id><snippet>PosgtreSQL</snippet></ROW><ROW><id>14704006</id><snippet>voted_already = (Vote.objects.filter(user=…, 
                                     content_type=…)
                             .values_list('object_id', flat=True))
not_voted = (Post.objects.filter(category__in=…)
                         .exclude(author=…, 
                                  pk__in=voted_already)
                         .order_by('-published'))
</snippet></ROW><ROW><id>14704364</id><snippet>NotImplementedError</snippet></ROW><ROW><id>14704364</id><snippet>def my_method(self, arg):
    raise NotImplementedError('Implement me')
</snippet></ROW><ROW><id>14704364</id><snippet>@property</snippet></ROW><ROW><id>14704364</id><snippet>@property
def my_property(self):
    raise NotImplementedError('Implement me as well')
</snippet></ROW><ROW><id>14704417</id><snippet>usage: http [METHOD] URL [ITEM...]
</snippet></ROW><ROW><id>14704417</id><snippet>$ http google.com bla</snippet></ROW><ROW><id>14704417</id><snippet>google.com</snippet></ROW><ROW><id>14704417</id><snippet>METHOD</snippet></ROW><ROW><id>14704417</id><snippet>METHOD</snippet></ROW><ROW><id>14704417</id><snippet>usage: http [get|post|put|delete] URL [ITEM...]
</snippet></ROW><ROW><id>14704417</id><snippet>get/post/put/delete</snippet></ROW><ROW><id>14704417</id><snippet>URL</snippet></ROW><ROW><id>14704417</id><snippet>METHOD</snippet></ROW><ROW><id>14704417</id><snippet>usage: http METHOD URL [ITEM...]
</snippet></ROW><ROW><id>14704417</id><snippet>usage: http URL [ITEM...] 
       http METHOD URL [ITEM...]
</snippet></ROW><ROW><id>14704417</id><snippet>positional_arguments = [args['URL']] + args['ITEM']
</snippet></ROW><ROW><id>14704417</id><snippet>positional_arguments</snippet></ROW><ROW><id>14704417</id><snippet>REQUEST ITEM</snippet></ROW><ROW><id>14704417</id><snippet>REQUEST-ITEM</snippet></ROW><ROW><id>14704417</id><snippet>REQUEST_ITEM</snippet></ROW><ROW><id>14704417</id><snippet>ITEM</snippet></ROW><ROW><id>14704441</id><snippet>&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
&gt;&gt;&gt; st = "{average:12.1km/ltr}"
&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
['12.1']
&gt;&gt;&gt; st = "{average:12km/ltr}"
&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
['12']
&gt;&gt;&gt; st = "{average:.5km/ltr}"
&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
['.5']
&gt;&gt;&gt; st = "{average:12.km/ltr}"
&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
['12.']
&gt;&gt;&gt; st = " {max:26.9kgm@6100rpm}"
&gt;&gt;&gt; re.findall("\d+\.?\d*|\.\d+",st)
['26.9', '6100']
</snippet></ROW><ROW><id>14704528</id><snippet>{"price" : "10.25"}</snippet></ROW><ROW><id>14704528</id><snippet>Parse error on line 2:
{    "price": '10.25'}
--------------^
Expecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '['
</snippet></ROW><ROW><id>14704528</id><snippet>&gt;&gt;&gt; a = """ {"price" : '10.25'} """
&gt;&gt;&gt; import ast
&gt;&gt;&gt; new_dict = ast.literal_eval(a.strip())
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(new_dict)
'{"price": "10.25"}'
</snippet></ROW><ROW><id>14704573</id><snippet>_sre</snippet></ROW><ROW><id>14704573</id><snippet>sre_compile</snippet></ROW><ROW><id>14704573</id><snippet>_sre</snippet></ROW><ROW><id>14704573</id><snippet>_sre</snippet></ROW><ROW><id>14705204</id><snippet>"%%.*$"</snippet></ROW><ROW><id>14705204</id><snippet>%%</snippet></ROW><ROW><id>14705204</id><snippet>&gt;&gt;&gt; st="""new in Python (and almost in programming).

I have a file with some lines, for example

...

dr=%%dr

mkl=%%mkl

...

I want to replace the %%dr and %%mkl with zeroes in order to have, for example

..."""
&gt;&gt;&gt; lines = (re.sub("%%.*$","0",line) for line in st.splitlines())
&gt;&gt;&gt; print '\n'.join(lines)
new in Python (and almost in programming).

I have a file with some lines, for example

...

dr=0

mkl=0

...

I want to replace the 0

...
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14705259</id><snippet>csrf_exempt</snippet></ROW><ROW><id>14705259</id><snippet>@csrf_exempt
def new(request):
    if request.method == 'POST':
        json_data = simplejson.loads(request.raw_post_data)
        try:
</snippet></ROW><ROW><id>14705259</id><snippet>@ensure_cookie
def new(request):
...
</snippet></ROW><ROW><id>14705879</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>14705879</id><snippet>O</snippet></ROW><ROW><id>14705879</id><snippet>PyObject *</snippet></ROW><ROW><id>14705879</id><snippet>PyObject</snippet></ROW><ROW><id>14705879</id><snippet>PyObject **</snippet></ROW><ROW><id>14705879</id><snippet>  char const *fmt = "OO";
  PyObject *dict1, *dict2;

  if (!PyArg_ParseTuple(args, fmt, &amp;dict1, &amp;dict2))
    return NULL;

  int hasDict1 = PyDict_Check(dict1);
  int hasDict2 = PyDict_Check(dict2);

  // ...
</snippet></ROW><ROW><id>14706169</id><snippet>2</snippet></ROW><ROW><id>14706169</id><snippet>ERROR_FILE_NOT_FOUND</snippet></ROW><ROW><id>14706169</id><snippet>regedit</snippet></ROW><ROW><id>14706169</id><snippet>err_code, results = c.EnumKey (
    hDefKey=_winreg.HKEY_LOCAL_MACHINE,
    sSubKeyName="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
)
print err_code
for r in results:
    print result
</snippet></ROW><ROW><id>14706169</id><snippet>key = _winreg.OpenKey(
    _winreg.HKEY_LOCAL_MACHINE, 
"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{0E5D76AD-A3FB-48D5-8400-8903B10317D3}" ,
     0,
    _winreg.KEY_READ | _winreg.KEY_WOW64_64KEY

i = 0
while True:
    try:
        name, val, key_type = _winreg.EnumValue(key, i)
        if name == "DisplayName":
            print "%s =&gt; %s" % (name, val)
        except:
            # No more indices
            break
        i += 1
</snippet></ROW><ROW><id>14706169</id><snippet>import _winreg

def getKeys(hKey, sSubKey):
    with _winreg.OpenKey(hKey, sSubKey, 0, _winreg.KEY_READ | _winreg.KEY_WOW64_64KEY)     as key:
        idx = 0
        while True:
            try:
                yield _winreg.EnumKey(key, idx)
            except:
                # No more indices
                break
            idx += 1

hKey = _winreg.HKEY_LOCAL_MACHINE
sSubKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\"
for keyName in getKeys(hKey, sSubKey):
    with _winreg.OpenKey(hKey, "\\".join([sSubKey, keyName]) , 0, _winreg.KEY_READ |     _winreg.KEY_WOW64_64KEY) as key:
        i = 0
        while True:
            try:
                name, val, key_type = _winreg.EnumValue(key, i)
                if name == "DisplayName":
                    print "%s\\%s =&gt; %s" % (keyName, name, val)
                    break
            except:
                break

            i += 1
</snippet></ROW><ROW><id>14706397</id><snippet>mytext = "this is my/string"
mytext = s[:s.rindex('/')] + '/text'
</snippet></ROW><ROW><id>14706397</id><snippet>&gt;&gt;&gt; s = "this is my/string"
&gt;&gt;&gt; pattern = re.compile('/.*$')

&gt;&gt;&gt; %timeit pattern.sub('/text', s)
1000000 loops, best of 3: 730 ns per loop

&gt;&gt;&gt; %timeit s[:s.rindex('/')] + '/text'
1000000 loops, best of 3: 284 ns per loop

&gt;&gt;&gt; %timeit s.rsplit('/', 1)[0] + '/text'
1000000 loops, best of 3: 321 ns per loop
</snippet></ROW><ROW><id>14706433</id><snippet>RequestContext</snippet></ROW><ROW><id>14706433</id><snippet>def someview(request):
    context = { }
    return render_to_response('some_template.html', context,
                context_instance = RequestContext(request))
</snippet></ROW><ROW><id>14706556</id><snippet>import pygame

# the functions for display
def disp(phrase,loc,screen):   # function to display phrase at loc on surface.
    s = font.render(phrase, True, (255,255,255))
    screen.blit(s, loc) #

def text_display(data,surface):
    '''display your data(list/tuple),containing strings on surface'''
    for x in range(6):         # your data is in 6 X 6 grid
        for y in range(6):
            disp( data[x+(y*6)], (64*x+10,64*y+10), surface)
            # 64 is the distance between 2 strings and 10 is the offset

pygame.init()
pygame.font.init()
font = pygame.font.SysFont("Courier",36) # font initialisation
screen = pygame.display.set_mode((400,400))

text = [str(i) for i in range(36)] # raw data!
text_display(text,screen) # text is displayed
pygame.display.update() # screen updated

# Main loop, does nothing! :)
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
            break
    if not running:
        break
</snippet></ROW><ROW><id>14706556</id><snippet>text_display</snippet></ROW><ROW><id>14706556</id><snippet>def text_display_csv(filename,surface):
    '''Display .csv file contents on surface'''
    f = csv.reader(open(filename)) # open the csv file in one line!

    for row in f:
        y = f.line_num                # assign y as Row no.
        for x,item in enumerate(row): # Get column number(x) and item
            disp(item, (64*x+10,64*y+10), surface) # display item
</snippet></ROW><ROW><id>14706556</id><snippet>text_display_csv</snippet></ROW><ROW><id>14706556</id><snippet>text = [str(i) for i in range(36)] # raw data!
text_display(text,screen) # text is displayed
pygame.display.update() # screen updated
</snippet></ROW><ROW><id>14706556</id><snippet>filename = 'the .csv file'
text_display_csv(filename,screen) # text is displayed
pygame.display.update() # screen updated
</snippet></ROW><ROW><id>14707272</id><snippet>s</snippet></ROW><ROW><id>14707272</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = json.loads(s)
&gt;&gt;&gt; for v in data.values():
    v['children'] = {data[c]['name']:data[c] for c in v['children']}


&gt;&gt;&gt; d = {data['1']['name']:data['1']}
&gt;&gt;&gt; for v in data.values():
    del v['name']


&gt;&gt;&gt; print(json.dumps(d, indent=4))
{
    "foo": {
        "color": "black", 
        "children": {
            "foo2": {
                "color": "green", 
                "children": {}
            }, 
            "foo3": {
                "color": "yellow", 
                "children": {
                    "foo4": {
                        "color": "purple", 
                        "children": {}
                    }
                }
            }
        }
    }
}
</snippet></ROW><ROW><id>14707290</id><snippet>(ctypes.c_ubyte * 8)(*[ctypes.c_ubyte(ord(c)) for c in str[:8]])
</snippet></ROW><ROW><id>14707347</id><snippet>class MyModel(models.Model):
    countryid = models.ForeignKey(Country, 
                                  verbose_name="Country", null=True, 
                                  db_column='countryID', blank=True)
</snippet></ROW><ROW><id>14707347</id><snippet>Country</snippet></ROW><ROW><id>14707347</id><snippet>Model</snippet></ROW><ROW><id>14707347</id><snippet>Admin</snippet></ROW><ROW><id>14707558</id><snippet>cv.GetSubRect</snippet></ROW><ROW><id>14707558</id><snippet>(x, y, width, height)</snippet></ROW><ROW><id>14707558</id><snippet>for face, neighbors in detectedFace:
    im_face = cv.GetSubRect(imcolor, face)
</snippet></ROW><ROW><id>14707558</id><snippet>cv2</snippet></ROW><ROW><id>14707565</id><snippet>etree.iterparse()</snippet></ROW><ROW><id>14707565</id><snippet>end</snippet></ROW><ROW><id>14707565</id><snippet>&lt;ReportItem id="100"&gt;</snippet></ROW><ROW><id>14707565</id><snippet>&lt;ReportItem id="200"&gt;</snippet></ROW><ROW><id>14707565</id><snippet>&lt;ReportHost host="host1"&gt;</snippet></ROW><ROW><id>14707565</id><snippet>ReportHost</snippet></ROW><ROW><id>14707565</id><snippet>ReportHost</snippet></ROW><ROW><id>14707565</id><snippet>ReportItem</snippet></ROW><ROW><id>14707896</id><snippet>for error in dtd.error_log.filter_from_errors():
    print(error.message)
    print(error.line)
    print(error.column)
</snippet></ROW><ROW><id>14707939</id><snippet>val = ((d &amp; 1) &lt;&lt; 7) | ((c &amp; 1) &lt;&lt; 6) | ((b &amp; 7) &lt;&lt; 3) | (a &amp; 7)
</snippet></ROW><ROW><id>14708014</id><snippet>site-packages</snippet></ROW><ROW><id>14708014</id><snippet>sys.path</snippet></ROW><ROW><id>14708014</id><snippet>.pth</snippet></ROW><ROW><id>14708014</id><snippet>dist-packages</snippet></ROW><ROW><id>14708014</id><snippet>echo "/usr/local/lib/python2.7/site-packages" &gt; /usr/local/lib/python2.7/dist-packages/site-packages.pth
</snippet></ROW><ROW><id>14708302</id><snippet>SearchView</snippet></ROW><ROW><id>14708302</id><snippet>extra_context</snippet></ROW><ROW><id>14708302</id><snippet>class MySearchView(SearchView):

    def extra_context(self):
        return { 'ordered_tasks': ... }
</snippet></ROW><ROW><id>14708302</id><snippet>view_class</snippet></ROW><ROW><id>14708302</id><snippet>search_view_factory</snippet></ROW><ROW><id>14708625</id><snippet>.txt</snippet></ROW><ROW><id>14708625</id><snippet>os.path.join(user_dir,'Folder')</snippet></ROW><ROW><id>14708625</id><snippet>os.walk</snippet></ROW><ROW><id>14708625</id><snippet> import os
 user_dir = os.path.join(raw_input('&gt; '),'Folder')
 file_list = [ ]
 for dirpath,_,filenames in  os.path.walk(user_dir):
     for name in filenames:
         if name.endswith('.txt'):
             file_list.append(os.path.join(user_dir,dirpath,name))
</snippet></ROW><ROW><id>14708647</id><snippet>import csv

with open('unload.cmd', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print row[0]
</snippet></ROW><ROW><id>14708647</id><snippet>csv.reader()</snippet></ROW><ROW><id>14708647</id><snippet>import urllib
import csv
import StringIO

url = 'http://137.205.144.34/services/unload.cmd?format=csvx&amp;sched=&amp;start=-240:00:00&amp;id=75631&amp;step=864'
f = urllib.urlopen(url)
data = f.read()

reader = csv.reader(StringIO.StringIO(data))
for row in reader:
    if row: print row[0]
</snippet></ROW><ROW><id>14709047</id><snippet>{% include %}</snippet></ROW><ROW><id>14709047</id><snippet>{% module Template('t2.html', **args) %}</snippet></ROW><ROW><id>14709047</id><snippet>tornado.web.Application</snippet></ROW><ROW><id>14709047</id><snippet>{% extends %}</snippet></ROW><ROW><id>14709188</id><snippet>syslog</snippet></ROW><ROW><id>14709188</id><snippet>/var/log/</snippet></ROW><ROW><id>14709487</id><snippet>def constraint(func):
    func._is_constraint = True
    @wraps(func)
    def inner(*args, **kwargs):
        return func(*args, **kwargs)
    return inner
</snippet></ROW><ROW><id>14709487</id><snippet> def constraint(func):
    func._is_constraint = True
    return func
</snippet></ROW><ROW><id>14709487</id><snippet>class ConstraintsType(type):

    def __new__(cls, name, bases, attrs):

        attrs['constraint_names'] = []
        for attr in attrs:
            if attr.startswith('constraint_'):
                attrs['constraint_names'].append(attr)
        return super(ConstraintsType, cls).__new__(cls, name, bases, attrs)

class Constraints(object):

    __metaclass__ = ConstraintsType

    @property
    def constraints(self):

        for name in self.constraint_names:
            yield getattr(self, name)

class Record(Constraints):

    def __init__(self, params=(100, 20)):

        self.params = params

    def constraint_greater_than_0(self, value):

        return value &gt; 0

   def run(self):

       for index, value in enumerate(self.params):
           for func in self.constraints:
               if not func(value):
                   print 'param %d (%s) did not satisfy constraint %s' % (index, value, func.__name__)

Record().run()
for value_set in ((-100, -100), (0, 0), (-1,1), (1,-1)):
    Record(value_set).run()
</snippet></ROW><ROW><id>14709605</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>14709605</id><snippet>with open(r'd:\output1.doc', 'r') as inputfile:
    inputstring = inputfile.read()

data = ast.literal_eval(inputstring)
for key, sublist in data.items():
    print '{}:'.format(key)
    for subdict in sublist:
        for key, value in subdict.items():
            print('{}:{}'.format(key, value))
</snippet></ROW><ROW><id>14709605</id><snippet>&gt;&gt;&gt; inputstring = "{'data': [{'name': 'abc'},{'name': 'xyz'}]}"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; data = ast.literal_eval(inputstring)
&gt;&gt;&gt; for key, sublist in data.items():
...     print '{}:'.format(key)
...     for subdict in sublist:
...         for key, value in subdict.items():
...             print '{}:{}'.format(key, value)
... 
data:
name:abc
name:xyz
</snippet></ROW><ROW><id>14709605</id><snippet>"</snippet></ROW><ROW><id>14709605</id><snippet>{"data": [{"name": "abc"},{"name": "xyz"}]}
</snippet></ROW><ROW><id>14709605</id><snippet>json</snippet></ROW><ROW><id>14709605</id><snippet>import json

data = json.loads(inputstring)
# process the same way as above.
</snippet></ROW><ROW><id>14709605</id><snippet>data = json.load(filename)  # note, no `s` after `load`.
</snippet></ROW><ROW><id>14709774</id><snippet>import android

droid = android.Android()

droid.makeToast('Hello, Android!')
</snippet></ROW><ROW><id>14709774</id><snippet>makeToast</snippet></ROW><ROW><id>14709774</id><snippet>$ adb forward tcp:9999 tcp:4321

$ export AP_PORT=9999
</snippet></ROW><ROW><id>14709774</id><snippet># This script will turn on the charging profile

#

import android
droid = android.Android()

ï¿½

droid.setRingerVolume(0)

droid.setScreenBrightness(255)

droid.setScreenTimeout(9999)

droid.toggleWifiState(True)

droid.toggleBluetoothState(True)
</snippet></ROW><ROW><id>14709839</id><snippet>mysite.com</snippet></ROW><ROW><id>14709839</id><snippet>*</snippet></ROW><ROW><id>14709839</id><snippet>CNAME</snippet></ROW><ROW><id>14709839</id><snippet>*</snippet></ROW><ROW><id>14709839</id><snippet>ghs.googlehosted.com</snippet></ROW><ROW><id>14709839</id><snippet>wildcard.mysite.com</snippet></ROW><ROW><id>14710016</id><snippet>import random
import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        self.username = wx.StaticText(self, label="username")
        self.online_status = wx.StaticText(self, label="offline")
        self.dialing_status = wx.StaticText(self, label="no dial tone")

        btn = wx.Button(self, label="Update")
        btn.Bind(wx.EVT_BUTTON, self.onUpdate)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.username, 0, wx.ALL, 5)
        sizer.Add(self.online_status, 0, wx.ALL, 5)
        sizer.Add(self.dialing_status, 0, wx.ALL, 5)
        sizer.Add(btn, 0, wx.ALL, 5)
        self.SetSizer(sizer)

    #----------------------------------------------------------------------
    def update_text(self, info):
        """"""
        index = {
            "username":self.username,
            "online status":self.online_status,
            "dial status":self.dialing_status
            }
        text = index[info[0]]
        data = info[1]
        append = info[2]
        if append:
            current = text.GetLabel()
            text.SetLabel(current + " " + data)
        else:
            text.SetLabel(data)

    #----------------------------------------------------------------------
    def onUpdate(self, event):
        """"""
        info = random.choice(
            [("username", "mork89", 1),
             ("online status", "online", 0),
             ("dial status", "dialing", 1)
             ])
        self.update_text(info)

########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Dynamic StaticText")
        panel = MyPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>14710024</id><snippet>n</snippet></ROW><ROW><id>14710024</id><snippet>i</snippet></ROW><ROW><id>14710024</id><snippet>n</snippet></ROW><ROW><id>14710024</id><snippet>n / i</snippet></ROW><ROW><id>14710024</id><snippet>sqrt(n)</snippet></ROW><ROW><id>14710024</id><snippet>sqrt(n)</snippet></ROW><ROW><id>14710024</id><snippet>i</snippet></ROW><ROW><id>14710024</id><snippet>i</snippet></ROW><ROW><id>14710024</id><snippet>n</snippet></ROW><ROW><id>14710024</id><snippet>n</snippet></ROW><ROW><id>14710024</id><snippet>i</snippet></ROW><ROW><id>14710024</id><snippet>while i &lt;= sqrt(n)</snippet></ROW><ROW><id>14710024</id><snippet>i</snippet></ROW><ROW><id>14710024</id><snippet>n</snippet></ROW><ROW><id>14710024</id><snippet>msg</snippet></ROW><ROW><id>14710024</id><snippet>break</snippet></ROW><ROW><id>14710024</id><snippet>sqrt(n)</snippet></ROW><ROW><id>14710024</id><snippet>while</snippet></ROW><ROW><id>14710062</id><snippet>def download(url, local_file):
    def progress(blocks_read, block_size, total_size):
        percent = min(int(blocks_read * block_size * 100 / total_size), 100)
        sys.stdout.write("\rdownloading {}: {:2}%".format(local_file, percent))
        if percent == 100:
            sys.stdout.write('\n')
        sys.stdout.flush()

    urllib.urlretrieve(url, local_file, reporthook=progress)


# call download function
download("http://ww1.microchip.com/downloads/en/DeviceDoc/pk2cmdv1-20Linux2-6.tar.gz",
         "pickit.tar.gz")
</snippet></ROW><ROW><id>14710096</id><snippet>__init__</snippet></ROW><ROW><id>14710096</id><snippet>__init__</snippet></ROW><ROW><id>14710096</id><snippet>def __init__(self):
    if not hasattr(self, '_allsp'):
        self._allsp = []
</snippet></ROW><ROW><id>14710096</id><snippet>def __init__(self):
    if not hasattr(self.__class__, 'inited'):
        self._allsp = []
        self.__class__.inited = True
</snippet></ROW><ROW><id>14710235</id><snippet>import networkx as nx
import numpy as np
A = np.array([[0, 4, 3, 0],
              [0, 0, 0, 1],
              [0, 3, 0, 1],
              [2, 0, 0, 0]])
G = nx.from_numpy_matrix(A, create_using=nx.DiGraph())
print(nx.dijkstra_path(G, 0, 1))
</snippet></ROW><ROW><id>14710273</id><snippet>class SubDict(dict):
    def __init__(self, *args, **kw):
        super(SubDict, self).__init__(*args, **kw)
        for key, value in self.iteritems():
            if isinstance(value, dict):
                self[key] = SubDict(value)
</snippet></ROW><ROW><id>14710273</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>14710273</id><snippet>import defaultdict

def Tree(): return defaultdict(tree)
</snippet></ROW><ROW><id>14710446</id><snippet>import matplotlib.pyplot as plt

line, = plt.plot([1,5,2,4], '-')
line.set_dashes([8, 4, 2, 4, 2, 4]) 
plt.show()
</snippet></ROW><ROW><id>14710446</id><snippet>[8, 4, 2, 4, 2, 4]</snippet></ROW><ROW><id>14710810</id><snippet>sleepBtn.update_idletasks()</snippet></ROW><ROW><id>14710810</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>14710821</id><snippet>sorted(set(s[a:b] for a in range(n) for b in range(a+1,n+1)),
       key=lambda x:(len(x),x))
</snippet></ROW><ROW><id>14710823</id><snippet>import kivy
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.app import App

class InterfaceManager(BoxLayout):

    def __init__(self, **kwargs):
        super(InterfaceManager, self).__init__(**kwargs)

        self.first = Button(text="First")
        self.first.bind(on_press=self.show_second)

        self.second = Button(text="Second")
        self.second.bind(on_press=self.show_final)

        self.final = Label(text="Hello World")
        self.add_widget(self.first)

    def show_second(self, button):
        self.clear_widgets()
        self.add_widget(self.second)

    def show_final(self, button):
        self.clear_widgets()
        self.add_widget(self.final)


class MyApp(App):
    def build(self):
        return InterfaceManager(orientation='vertical')

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>14710823</id><snippet>class InterfaceManager(BoxLayout):

    def __init__(self, **kwargs):
        super(InterfaceManager, self).__init__(**kwargs)
        self.forms = {}

    def add_form(self, key, form):
        self.forms[key] = form

    def uniCallback(self, button):
        self.clear_widgets()
        # You could introduce a more elegant key
        # handling system here.
        self.add_widget(self.forms[button.text])
</snippet></ROW><ROW><id>14710827</id><snippet>from glob import glob
from pylab import *


for fname in glob("xydata*.txt"):
    x, y = loadtxt(fname, unpack=True, usecols=[1, 0])
    mask_inf = gradient(y) &lt; 0
    mask_sup = gradient(y) &gt;= 0

    plot(x[mask_inf], y[mask_inf], 'r')
    plot(x[mask_sup], y[mask_sup], 'g')

    legend(("grad(y) &lt; 0", "grad(y) &gt;= 0"))
    title(fname)

    savefig(fname.replace("xydata", "data").replace(".txt", ".svg"))
    clf()
</snippet></ROW><ROW><id>14711094</id><snippet>zip</snippet></ROW><ROW><id>14711094</id><snippet>with open(file1) as f1,open(file2) as f2,open("combined_data.txt","w") as fout:
     for t in zip(f1,f2):
         fout.write('\t'.join(x.strip() for x in t)+'\n')
</snippet></ROW><ROW><id>14711094</id><snippet>itertools.izip_longest(f1,f2,fillvalue='')</snippet></ROW><ROW><id>14711118</id><snippet>download_url = file['exportLinks']['text/html']
</snippet></ROW><ROW><id>14711127</id><snippet>...
for file in glob.glob('*.h'):
    with open(file) as f:
        contents = f.read()
    if 'struct' in contents:
        print file
</snippet></ROW><ROW><id>14711127</id><snippet>with</snippet></ROW><ROW><id>14711127</id><snippet>...
for file in glob.glob('*.h'):
    print 'DEBUG: file=&gt;{0}&lt;'.format(file)
    with open(file) as f:
        contents = f.read()
    if 'struct' in contents:
        print file
</snippet></ROW><ROW><id>14711127</id><snippet>find "struct" *.h
</snippet></ROW><ROW><id>14711191</id><snippet>dir</snippet></ROW><ROW><id>14711191</id><snippet>C:\Windows\System32&gt;dir "c:\Documents and Settings"
 Volume in drive C is OS
 Volume Serial Number is 762E-5F95

 Directory of c:\Documents and Settings

File Not Found
</snippet></ROW><ROW><id>14711191</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>14711191</id><snippet>True</snippet></ROW><ROW><id>14711191</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.isdir(r'C:\Documents and Settings')
True
</snippet></ROW><ROW><id>14711351</id><snippet>if 'good' in splitted:
</snippet></ROW><ROW><id>14711351</id><snippet>if (in_array('good', splitted)) {
</snippet></ROW><ROW><id>14711375</id><snippet>xpath</snippet></ROW><ROW><id>14711375</id><snippet>cols</snippet></ROW><ROW><id>14711375</id><snippet> if len(cols) &gt;= 5:
    ...
</snippet></ROW><ROW><id>14711375</id><snippet>try:
    c.writerow([cols[0], cols[1], cols[2], cols[3], cols[4]])
except IndexError:
    #failed because `cols` isn't long enough.  Do something else.
</snippet></ROW><ROW><id>14711375</id><snippet>cols</snippet></ROW><ROW><id>14711375</id><snippet>list</snippet></ROW><ROW><id>14711375</id><snippet>cols.extend(['']*5)
</snippet></ROW><ROW><id>14711520</id><snippet>function2</snippet></ROW><ROW><id>14711520</id><snippet>r</snippet></ROW><ROW><id>14711520</id><snippet>s</snippet></ROW><ROW><id>14711520</id><snippet>function1</snippet></ROW><ROW><id>14711520</id><snippet>function2</snippet></ROW><ROW><id>14711520</id><snippet>function2</snippet></ROW><ROW><id>14711520</id><snippet>arg3.2</snippet></ROW><ROW><id>14711520</id><snippet>function2</snippet></ROW><ROW><id>14711520</id><snippet>function1</snippet></ROW><ROW><id>14711572</id><snippet>map.js</snippet></ROW><ROW><id>14711572</id><snippet>static/</snippet></ROW><ROW><id>14711572</id><snippet>&lt;script type="text/javascript" src="{{ url_for('static', filename='map.js') }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>14711708</id><snippet>from mock import patch

with patch.object(CommandServer, 'runSQL') as runSQL:
    class res(object):
       rowcount = -1

    runSQL.return_value = res

    p = Process()
    p.process()

    for c in runSQL.call_list:
        assert c[1].lstrip().startswith('insert into') is True
</snippet></ROW><ROW><id>14711708</id><snippet>'insert into'</snippet></ROW><ROW><id>14711822</id><snippet>ncalls  tottime  percall  cumtime  percall filename:lineno(function) 
125112    1.499    0.000    1.499    0.000 {method 'call' of 'tkapp' objects} 
125100    1.118    0.000    6.006    0.000 /usr/lib/python3.2/tkinter/__init__.py:2190(_create)
125109    0.942    0.000    1.749    0.000 /usr/lib/python3.2/tkinter/__init__.py:69(_cnfmerge)
125106    0.906    0.000    3.065    0.000 /usr/lib/python3.2/tkinter/__init__.py:1059(_options)
125599    0.851    0.000    0.851    0.000 main.py:10(neighbours)
500433    0.688    0.000    0.688    0.000 {built-in method isinstance}
125100    0.460    0.000    6.787    0.000 main.py:64(draw)
250210    0.341    0.000    0.341    0.000 {method 'update' of 'dict' objects}
125100    0.321    0.000    6.327    0.000 /usr/lib/python3.2/tkinter/__init__.py:2219(create_rectangle)
250205    0.319    0.000    0.319    0.000 {built-in method _flatten}
   139    0.255    0.002    8.093    0.058 main.py:63(play)
   139    0.181    0.001    1.051    0.008 main.py:19(evolve)
125109    0.134    0.000    0.134    0.000 {method 'items' of 'dict' objects}
125108    0.107    0.000    0.107    0.000 {built-in method callable}
     1    0.056    0.056    0.056    0.056 {built-in method create}
</snippet></ROW><ROW><id>14711822</id><snippet>cumtime   filename:lineno(function) 
0.851    main.py:10(neighbours)
6.787    main.py:64(draw)
8.093    main.py:63(play)
1.051    main.py:19(evolve)
</snippet></ROW><ROW><id>14711822</id><snippet>draw</snippet></ROW><ROW><id>14711822</id><snippet>play</snippet></ROW><ROW><id>14711822</id><snippet>ncalls  tottime  percall  cumtime  percall filename:lineno(function) 
125100    1.118    0.000    6.006    0.000 /usr/lib/python3.2/tkinter/__init__.py:2190(_create)
125106    0.906    0.000    3.065    0.000 /usr/lib/python3.2/tkinter/__init__.py:1059(_options)
</snippet></ROW><ROW><id>14711822</id><snippet>draw</snippet></ROW><ROW><id>14711822</id><snippet>draw</snippet></ROW><ROW><id>14711822</id><snippet>evolve</snippet></ROW><ROW><id>14711822</id><snippet>gol.py</snippet></ROW><ROW><id>14711822</id><snippet>gol</snippet></ROW><ROW><id>14711854</id><snippet>def writable(self):
    len(self.buffer) &gt; 0
</snippet></ROW><ROW><id>14711854</id><snippet>None</snippet></ROW><ROW><id>14711854</id><snippet>return</snippet></ROW><ROW><id>14711854</id><snippet>None</snippet></ROW><ROW><id>14711854</id><snippet>Connector</snippet></ROW><ROW><id>14711854</id><snippet>writable</snippet></ROW><ROW><id>14711866</id><snippet>Formatter</snippet></ROW><ROW><id>14711866</id><snippet>ScalerFormatter</snippet></ROW><ROW><id>14711866</id><snippet>plt.plot(arange(0,100,10) + 1000, arange(0,100,10))
ax = plt.gca()
ax.get_xaxis().get_major_formatter().set_useOffset(False)
plt.draw()
</snippet></ROW><ROW><id>14711866</id><snippet>ax.get_xaxis().get_major_formatter().set_scientific(False)
</snippet></ROW><ROW><id>14711907</id><snippet>import sys, csv

with open(sys.argv[1]) as f:
    lst = list(csv.reader(f))
</snippet></ROW><ROW><id>14711907</id><snippet>with open(sys.argv[1]) as f:
    lst = [tuple(row) for row in csv.reader(f)]
</snippet></ROW><ROW><id>14712113</id><snippet>cursor = connection.cursor()

cursor.executemany('INSERT INTO 'tablename' ('column1', 'column2') VALUES (%s, %s)',
        [sub.values() for sub in shelf.values()])
</snippet></ROW><ROW><id>14712113</id><snippet>INSERT</snippet></ROW><ROW><id>14712176</id><snippet>{ ['Red','Green'], {[1 0 0], [0 1 0]} }
{ ['Red','blue'] , {[.9 .1. 1], [ .2 .3 .9] }
</snippet></ROW><ROW><id>14712253</id><snippet>from os import system
_proc_status = system('/proc/' + str(pid) + '/status')
</snippet></ROW><ROW><id>14712381</id><snippet>.next_sibling</snippet></ROW><ROW><id>14712381</id><snippet>price-modifier</snippet></ROW><ROW><id>14712381</id><snippet>print unicode(soup.find(class_='price-modifier').next_sibling)
</snippet></ROW><ROW><id>14712544</id><snippet>var txt = "Lorem ipsum dolor sit amet [@a xxx yyy [@b xxx yyy [@c xxx yyy]]] lorem ipsum sit amet";
function parse(s) {
    var stack = [];
    var result = [];
    for(var x=0; x&lt;s.length; x++) {
        var c = s.charAt(x);
        if(c == '[' &amp;&amp; x+1 &lt; s.length-1 &amp;&amp; s.charAt(x+1) == '@') {
            for(var y=0; y&lt;stack.length; y++)
                stack[y] += "[@";
            stack.push("[@");
            x++;
        } else if(c == ']' &amp;&amp; stack.length &gt; 0) {
            for(var y=0; y&lt;stack.length; y++)
                stack[y] += "]";
            result.push(stack.pop());
        } else {
            for(var y=0; y&lt;stack.length; y++)
                stack[y] += c;
        }
    }
    return result;
}
parse(txt);
</snippet></ROW><ROW><id>14712975</id><snippet>return</snippet></ROW><ROW><id>14712975</id><snippet>for</snippet></ROW><ROW><id>14712975</id><snippet>def computeBill(food):
    total = 0.0
    for item in food:
        total += prices[str(item)] + stock[str(item)]
        print total

    return total
</snippet></ROW><ROW><id>14713484</id><snippet>DictVectorizer</snippet></ROW><ROW><id>14713484</id><snippet>csv</snippet></ROW><ROW><id>14713484</id><snippet>dict</snippet></ROW><ROW><id>14713484</id><snippet>(feature, value)</snippet></ROW><ROW><id>14713484</id><snippet># UNTESTED CODE, may contain a bug or two; also, you need to decide how to
# implement split_words
datareader = csv.reader(csvfile)
dicts = []
y = []

for row in datareader:
    y.append(row[-1])
    d = {"From": row[0]}
    for word in split_words(row[1]):
        d["Subject_" + word] = 1
    for word in split_words(row[2]):
        d["Body_" + word] = 1
    # etc.
    dicts.append(d)

# vectorize!
vectorizer = DictVectorizer()
X_train = vectorizer.fit_transform(dicts)
</snippet></ROW><ROW><id>14713484</id><snippet>X_train</snippet></ROW><ROW><id>14713484</id><snippet>y</snippet></ROW><ROW><id>14713484</id><snippet>vectorizer</snippet></ROW><ROW><id>14713484</id><snippet>test_dicts</snippet></ROW><ROW><id>14713484</id><snippet>X_test = vectorizer.transform(test_dicts)</snippet></ROW><ROW><id>14713484</id><snippet>predict_proba</snippet></ROW><ROW><id>14713484</id><snippet>DictVectorizer</snippet></ROW><ROW><id>14713579</id><snippet>target.write('\n'.join(lines)) #assuming all the line #s are put in a list called "lines"
</snippet></ROW><ROW><id>14713653</id><snippet>test.is_set()
</snippet></ROW><ROW><id>14713690</id><snippet>render</snippet></ROW><ROW><id>14713690</id><snippet>renderer_dict = {} # dictionary of values to pass to the renderer
new_comment = render('new_comment.pt', renderer_dict, request)
</snippet></ROW><ROW><id>14713690</id><snippet>render</snippet></ROW><ROW><id>14714020</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; uuid.uuid4().hex
'8c05904f0051419283d1024fc5ce1a59'
</snippet></ROW><ROW><id>14714020</id><snippet>&gt;&gt;&gt; from string import digits
&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; ''.join(choice(digits) for i in xrange(4))
'2545'
</snippet></ROW><ROW><id>14714147</id><snippet>WebServer</snippet></ROW><ROW><id>14714147</id><snippet>class WebServer(BaseHTTPRequestHandler):
</snippet></ROW><ROW><id>14714147</id><snippet>HTTPServer</snippet></ROW><ROW><id>14714147</id><snippet>server = HTTPServer(('', 8080), WebServer)
</snippet></ROW><ROW><id>14714180</id><snippet>box.area.collidepoint</snippet></ROW><ROW><id>14714180</id><snippet>def draw_grid(self, box):
    for element in self.map_layout.all_map_objects:
        collidepoint = box.area.collidepoint(element.checkpoint)
        if element not in self.build_grid and collidepoint:
            self.build_grid.append(element)
        elif not collidepoint:
            if element in self.build_grid:
                self.build_grid.remove(element)
</snippet></ROW><ROW><id>14714180</id><snippet>self.build_grid</snippet></ROW><ROW><id>14714180</id><snippet>list</snippet></ROW><ROW><id>14714180</id><snippet>__contains__</snippet></ROW><ROW><id>14714180</id><snippet>set</snippet></ROW><ROW><id>14714180</id><snippet>list.remove</snippet></ROW><ROW><id>14714180</id><snippet>try-except</snippet></ROW><ROW><id>14714180</id><snippet>        elif not collidepoint:
            try:
                self.build_grid.remove(element)
            except ValueError:
                pass
</snippet></ROW><ROW><id>14714320</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14714320</id><snippet>testlib1.py</snippet></ROW><ROW><id>14714320</id><snippet>import os
import sys
dirparts = os.path.dirname(os.path.abspath(__file__)).split('/')
sys.path.append('/'.join(dirparts[:-1]))

import  mylib1
</snippet></ROW><ROW><id>14714499</id><snippet>with open('file.txt', 'r+') as f:
   flag = False
   for line in f:
        if line.startswith("PARN"):
            flag = False
        if flag:
            print line
        if line.startswith("ABST"):
            flag = True
</snippet></ROW><ROW><id>14714504</id><snippet>dir</snippet></ROW><ROW><id>14714504</id><snippet>dir</snippet></ROW><ROW><id>14714504</id><snippet>    def sayHello():
        print "Hello!"


    class Person:

        def sayHello():
            print "Hello from Person"

    a_person = Person()

    sayHello() 
    ##"Hello"

    a_person.sayHello()
    ## "Hello from Person"
</snippet></ROW><ROW><id>14714504</id><snippet>printHello</snippet></ROW><ROW><id>14714504</id><snippet>class_instance.printHello</snippet></ROW><ROW><id>14714504</id><snippet>class_instance.dir</snippet></ROW><ROW><id>14714504</id><snippet>root</snippet></ROW><ROW><id>14714504</id><snippet>TopLevel</snippet></ROW><ROW><id>14714504</id><snippet>root</snippet></ROW><ROW><id>14714693</id><snippet>danish.train.part-01</snippet></ROW><ROW><id>14714693</id><snippet>#!/usr/bin/env python2.7

trainFile = open("danish.train")
numberOfLines = 0

for line in trainFile:
    numberOfLines += 1

lengthTest = numberOfLines / 10

# rewind file to beginning
trainFile.seek(0)

numberOfLines = 0
file_number = 0
for line in trainFile:
    if numberOfLines % lengthTest == 0:
        file_number += 1
        output = open('danish.train.part-%02d' % file_number, 'w')

    numberOfLines += 1
    output.write(line)
</snippet></ROW><ROW><id>14714693</id><snippet>one
two
three
four
five
six
seven
eight
nine
ten
eleven
twelve
thirteen
fourteen
fifteen
sixteen
seventeen
eighteen
nineteen
twenty
twenty-one
twenty-two
twenty-three
twenty-four
twenty-five
twenty-six
twenty-seven
twenty-eight
twenty-nine
thirty
</snippet></ROW><ROW><id>14714693</id><snippet>danish.train.part-01
danish.train.part-02
danish.train.part-03
danish.train.part-04
danish.train.part-05
danish.train.part-06
danish.train.part-07
danish.train.part-08
danish.train.part-09
danish.train.part-10
</snippet></ROW><ROW><id>14714693</id><snippet>thirteen
fourteen
fifteen
</snippet></ROW><ROW><id>14714859</id><snippet>def delete_line(dello):
    data = open("abc.csv").readlines()

    i = 0
    for line in data:
        if dello in line:
            data.pop(i)
        i += 1

    open("abc.csv", "w").write("".join(data))

delete_line("16732")
</snippet></ROW><ROW><id>14714859</id><snippet>lbm,16730,0
namd,16733,6
namd,16731,2
namd,16732,4
</snippet></ROW><ROW><id>14714859</id><snippet>lbm,16730,0
namd,16733,6
namd,16731,2
</snippet></ROW><ROW><id>14714859</id><snippet>import csv

def delete_line(dello):
    opener = open("abc.csv", 'rb')
    dataset = csv.reader(opener, delimiter=',')
    output = []
    for line in dataset:
        # Add to output only if not matching the string
        if dello != line[1]:
            # Need join as line is a list
            output.append(",".join(line) + "\n")
    opener.close()

    fn = "abc.csv"
    f = open(fn,'w')
    f.writelines(output)
    f.close()

delete_line("16730")
</snippet></ROW><ROW><id>14714859</id><snippet>dataset.pop(index)</snippet></ROW><ROW><id>14714991</id><snippet>g = re.match("(.*) ([0-9]+) ?- ?([0-9]+) (.*)", user_input)
if g:
    team1 = g.group(1)
    team1_score = g.group(2)
    team2_score = g.group(3)
    team2 = g.group(4)
</snippet></ROW><ROW><id>14714991</id><snippet>group()</snippet></ROW><ROW><id>14715076</id><snippet>dataChanged</snippet></ROW><ROW><id>14715076</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>14715126</id><snippet>mathtext</snippet></ROW><ROW><id>14715126</id><snippet>for i in range(1,3):
    plt.ylabel(
           r"$\alpha_{:d} [\degree]$".format(i),
           rotation='horizontal',
           position=(0.0,0.9))
</snippet></ROW><ROW><id>14715126</id><snippet>mathtext</snippet></ROW><ROW><id>14715126</id><snippet> ur'$\u23ce$'
</snippet></ROW><ROW><id>14715221</id><snippet>flags.contiguous</snippet></ROW><ROW><id>14715221</id><snippet>copy()</snippet></ROW><ROW><id>14715221</id><snippet>&gt;&gt;&gt; a = np.arange(16).reshape(4,4)
&gt;&gt;&gt; a.flags.contiguous
True
&gt;&gt;&gt; b = a.T
&gt;&gt;&gt; b.flags.contiguous
False
&gt;&gt;&gt; b = b.copy()
&gt;&gt;&gt; b.flags.contiguous
True
</snippet></ROW><ROW><id>14715221</id><snippet>copy()</snippet></ROW><ROW><id>14715236</id><snippet>&gt;&gt;&gt; re.split(r'\s(?=\w+:)', post)
['price:44.55',
 'name:John Doe',
 'title:Super Widget',
 'description:This widget slices, dices, and drives your kids to soccer practice\r\nIt even comes with Super Widget Mini!']
</snippet></ROW><ROW><id>14715253</id><snippet>numpy</snippet></ROW><ROW><id>14715253</id><snippet>&gt;&gt;&gt; df = pd.read_csv("train.csv")
&gt;&gt;&gt; df[:4]
      ID ENROLLMENT_DATE    TRAINER_MANAGING    TRAINER_OPERATOR FIRST_VISIT_DATE
0  1536D       12-Feb-12  06DA1B3-Lebanon NH                 NaN        15-Feb-12
1   F15D       18-May-12  06405B2-Lebanon NH                 NaN        25-Jul-12
2   8096        8-Aug-12  0643D38-Hanover NH  0643D38-Hanover NH        25-Jun-12
3   A036        1-Apr-12  06CB8CF-Hanover NH  06CB8CF-Hanover NH         9-Aug-12
</snippet></ROW><ROW><id>14715253</id><snippet>&gt;&gt;&gt; to_fix = [c for c in df.columns if 'TRAINER' in c]
&gt;&gt;&gt; to_fix
['TRAINER_MANAGING', 'TRAINER_OPERATOR']
</snippet></ROW><ROW><id>14715253</id><snippet>.fillna</snippet></ROW><ROW><id>14715253</id><snippet>NaN</snippet></ROW><ROW><id>14715253</id><snippet>&gt;&gt;&gt; df[to_fix] = df[to_fix].fillna(0)
&gt;&gt;&gt; df[:4]
      ID ENROLLMENT_DATE    TRAINER_MANAGING    TRAINER_OPERATOR FIRST_VISIT_DATE
0  1536D       12-Feb-12  06DA1B3-Lebanon NH                   0        15-Feb-12
1   F15D       18-May-12  06405B2-Lebanon NH                   0        25-Jul-12
2   8096        8-Aug-12  0643D38-Hanover NH  0643D38-Hanover NH        25-Jun-12
3   A036        1-Apr-12  06CB8CF-Hanover NH  06CB8CF-Hanover NH         9-Aug-12
</snippet></ROW><ROW><id>14715253</id><snippet>df.fillna({c: 0 for c in df.columns if 'TRAINER' in c}, inplace=True)
</snippet></ROW><ROW><id>14715328</id><snippet>class Poll extends Model
{
    var $question;
    var $pub_date;
}
</snippet></ROW><ROW><id>14715381</id><snippet>urllib2.Request</snippet></ROW><ROW><id>14715381</id><snippet>data</snippet></ROW><ROW><id>14715381</id><snippet>data</snippet></ROW><ROW><id>14715381</id><snippet>Request</snippet></ROW><ROW><id>14715381</id><snippet>add_data</snippet></ROW><ROW><id>14715381</id><snippet>add_header</snippet></ROW><ROW><id>14715381</id><snippet>req = urllib2.Request(url)
req.add_data("{'some':'data'}")
req.add_header('Content-Type', 'application/json; charset=utf-8')
res = urllib2.urlopen(req)
</snippet></ROW><ROW><id>14715381</id><snippet>man nc</snippet></ROW><ROW><id>14715381</id><snippet>nc -kl 12345</snippet></ROW><ROW><id>14715381</id><snippet>localhost:12345</snippet></ROW><ROW><id>14715381</id><snippet>nc HOST 80</snippet></ROW><ROW><id>14715381</id><snippet>requests</snippet></ROW><ROW><id>14715381</id><snippet>string</snippet></ROW><ROW><id>14715381</id><snippet>string
    ""
    " chars "
</snippet></ROW><ROW><id>14715381</id><snippet>"…"</snippet></ROW><ROW><id>14715381</id><snippet>json.dumps(…)</snippet></ROW><ROW><id>14715381</id><snippet>req = urllib2.Request(url)
req.add_data(json.dumps({'some':'data'}))
req.add_header('Content-Type', 'application/json; charset=utf-8')
res = urllib2.urlopen(req)
</snippet></ROW><ROW><id>14715430</id><snippet>groupby</snippet></ROW><ROW><id>14715430</id><snippet>groupby</snippet></ROW><ROW><id>14715430</id><snippet>diff</snippet></ROW><ROW><id>14715430</id><snippet>groupby</snippet></ROW><ROW><id>14715430</id><snippet>&gt;&gt;&gt; df
   uid  timestamp other_vars
0    1        100        ...
1    1        150        ...
2    2        150        ...
3    2        200        ...
4    1        225        ...
5    3        300        ...
6    3        400        ...
&gt;&gt;&gt; for name, gr in df.groupby("uid"):
...     print name
...     print gr
...     
1
   uid  timestamp other_vars
0    1        100        ...
1    1        150        ...
4    1        225        ...
2
   uid  timestamp other_vars
2    2        150        ...
3    2        200        ...
3
   uid  timestamp other_vars
5    3        300        ...
6    3        400        ...
</snippet></ROW><ROW><id>14715430</id><snippet>diff</snippet></ROW><ROW><id>14715430</id><snippet>&gt;&gt;&gt; df["diff"] = df.groupby("uid")["timestamp"].diff()
&gt;&gt;&gt; df
   uid  timestamp other_vars  diff
0    1        100        ...   NaN
1    1        150        ...    50
2    2        150        ...   NaN
3    2        200        ...    50
4    1        225        ...    75
5    3        300        ...   NaN
6    3        400        ...   100
</snippet></ROW><ROW><id>14715764</id><snippet>reverse</snippet></ROW><ROW><id>14715764</id><snippet>id</snippet></ROW><ROW><id>14715764</id><snippet>slug</snippet></ROW><ROW><id>14715764</id><snippet>body-part-detail</snippet></ROW><ROW><id>14715764</id><snippet>reverse</snippet></ROW><ROW><id>14715981</id><snippet>timeprofile.timing(find_boundaries(numpy.asarray(Image.open(
    r'D:\Python\image\image4.jpg')),79))
</snippet></ROW><ROW><id>14715981</id><snippet>staticresult</snippet></ROW><ROW><id>14715981</id><snippet>somefunction(with, arguments)</snippet></ROW><ROW><id>14715981</id><snippet>timeprofile.timing(lambda: (find_boundaries(numpy.asarray(Image.open(
    r'D:\Python\image\image4.jpg')),79)))
</snippet></ROW><ROW><id>14715981</id><snippet>timing</snippet></ROW><ROW><id>14715981</id><snippet>Timer()</snippet></ROW><ROW><id>14715981</id><snippet>t = timeit.Timer(function)
</snippet></ROW><ROW><id>14716238</id><snippet>write</snippet></ROW><ROW><id>14716238</id><snippet>flush</snippet></ROW><ROW><id>14716238</id><snippet>close</snippet></ROW><ROW><id>14716238</id><snippet>close</snippet></ROW><ROW><id>14716238</id><snippet>f.close()</snippet></ROW><ROW><id>14716238</id><snippet>close()</snippet></ROW><ROW><id>14716238</id><snippet>try</snippet></ROW><ROW><id>14716238</id><snippet>finally</snippet></ROW><ROW><id>14716238</id><snippet>with</snippet></ROW><ROW><id>14716238</id><snippet>with open('emails_file.txt', 'a') as f:    
    f.write('testing')
    # ...
    for item in style_text_two_list:
        text_one = item.replace('(at)','@')
        text_two = text_one.replace('(dot)','.')
        f.write(text_two)
</snippet></ROW><ROW><id>14716238</id><snippet>with</snippet></ROW><ROW><id>14716238</id><snippet>return</snippet></ROW><ROW><id>14716238</id><snippet>break</snippet></ROW><ROW><id>14716238</id><snippet>f</snippet></ROW><ROW><id>14716238</id><snippet>with statement</snippet></ROW><ROW><id>14716238</id><snippet>with</snippet></ROW><ROW><id>14716537</id><snippet>json</snippet></ROW><ROW><id>14716537</id><snippet>request_body = environ['wsgi.input'].read(request_body_size)
data = json.loads(request_body)
build_id = data['BuildId']
# etc.
</snippet></ROW><ROW><id>14716544</id><snippet>&gt;&gt;&gt; s = "[virus 1 [isolated from china]]"
&gt;&gt;&gt; s.partition('[')[-1].rpartition(']')[0]
'virus 1 [isolated from china]'
</snippet></ROW><ROW><id>14716684</id><snippet>cmd = "taskset -c " +  str(mapping[r]) + " python &lt;path&gt;/run-apps.py " + thr[r] + " &amp;"
</snippet></ROW><ROW><id>14716684</id><snippet>taskset</snippet></ROW><ROW><id>14716684</id><snippet>-c2</snippet></ROW><ROW><id>14716684</id><snippet>-c -2</snippet></ROW><ROW><id>14716684</id><snippet>cmd = "taskset -c %s python &lt;path&gt;/run-apps.py %s &amp;" % (mapping[r],thr[r])
</snippet></ROW><ROW><id>14716684</id><snippet>.format</snippet></ROW><ROW><id>14716684</id><snippet>cmd = "taskset -c {0} python &lt;path&gt;/run-apps.py {1} &amp;".format(mapping[r],thr[r])
</snippet></ROW><ROW><id>14716684</id><snippet>os.system</snippet></ROW><ROW><id>14716684</id><snippet>subprocess</snippet></ROW><ROW><id>14716684</id><snippet>process = subprocess.Popen(['taskset',
                            '-c',
                            str(mapping[r]),
                            'python',
                            '&lt;path&gt;/run-apps.py',
                            str(thr[r]) ] )
</snippet></ROW><ROW><id>14716726</id><snippet>plt.xticks(list(plt.xticks()[0]) + extraticks)
</snippet></ROW><ROW><id>14716726</id><snippet>xticks()</snippet></ROW><ROW><id>14716728</id><snippet>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.get_distribution('setuptools')
setuptools 0.6c11 (t:\tmp\easyinstall\lib\site-packages\setuptools-0.6c11-py2.7.egg)
&gt;&gt;&gt; pkg_resources.get_distribution('setuptools').project_name
'setuptools'
</snippet></ROW><ROW><id>14716728</id><snippet>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.get_distribution('setuptools')
distribute 0.6.31 (t:\tmp\distribute\lib\site-packages\distribute-0.6.31-py2.7.egg)
&gt;&gt;&gt; pkg_resources.get_distribution('setuptools').project_name
'distribute'
</snippet></ROW><ROW><id>14716763</id><snippet>print(classifier.classify(word_feats(['magnificent'])))
</snippet></ROW><ROW><id>14716763</id><snippet>pos
</snippet></ROW><ROW><id>14716763</id><snippet>classifier.classify</snippet></ROW><ROW><id>14716763</id><snippet>dict</snippet></ROW><ROW><id>14716763</id><snippet>word_feats</snippet></ROW><ROW><id>14716763</id><snippet>dict</snippet></ROW><ROW><id>14716763</id><snippet>NaiveBayesClassifier</snippet></ROW><ROW><id>14717352</id><snippet>print tuple(address_result[0]) == ('1819 Harras Blvd', '', 'Atlantic City', 'NJ', '08401')
</snippet></ROW><ROW><id>14717374</id><snippet>In [9]: df = pandas.DataFrame([1,2,3,4], columns=["data"])

In [10]: df
Out[10]: 
   data
0     1
1     2
2     3
3     4

In [11]: df["desired"] = df["data"] &gt; 2.5
In [11]: df
Out[12]: 
   data desired
0     1   False
1     2   False
2     3    True
3     4    True
</snippet></ROW><ROW><id>14717496</id><snippet>void* ExtractBuffer(PyObject* bufferInterfaceObject, Py_buffer&amp; bufferStruct)
{
    if (PyObject_GetBuffer(bufferInterfaceObject, &amp;bufferStruct, PyBUF_SIMPLE) == -1)
        return 0;

    return (void*)bufferStruct.buf;
}
</snippet></ROW><ROW><id>14717496</id><snippet>PyBuffer_Release(&amp;bufferStruct);
</snippet></ROW><ROW><id>14717721</id><snippet>&gt;&gt;&gt; a = np.float(1)
&gt;&gt;&gt; a /= 5
&gt;&gt;&gt; a
0.2
&gt;&gt;&gt; a*3
0.6000000000000001
</snippet></ROW><ROW><id>14717721</id><snippet>np.allclose</snippet></ROW><ROW><id>14717772</id><snippet>os.system</snippet></ROW><ROW><id>14717772</id><snippet>ssh</snippet></ROW><ROW><id>14717772</id><snippet>os.system</snippet></ROW><ROW><id>14717772</id><snippet>subprocess</snippet></ROW><ROW><id>14717772</id><snippet>p1 = subprocess.Popen("ssh igp@" + str(comp1[0]) + " blender -b "+ str(path) +" -s " + str(comp1[1]) + " -e " + str(comp1[2]) + " -a", shell=True)
p2 = subprocess.Popen("ssh igp@" + str(comp2[0]) + " blender -b "+ str(path) +" -s " + str(comp2[1]) + " -e " + str(comp2[2]) + " -a", shell=True)
p3 = subprocess.Popen("ssh igp@" + str(comp3[0]) + " blender -b "+ str(path) +" -s " + str(comp3[1]) + " -e " + str(comp3[2]) + " -a", shell=True)
p1.wait()
p2.wait()
p3.wait()
</snippet></ROW><ROW><id>14717772</id><snippet>shell=True</snippet></ROW><ROW><id>14717772</id><snippet>list</snippet></ROW><ROW><id>14717772</id><snippet>ssh</snippet></ROW><ROW><id>14717772</id><snippet>paramiko</snippet></ROW><ROW><id>14717777</id><snippet>jQuery.get()</snippet></ROW><ROW><id>14717777</id><snippet>$.get("/editor", function(response) { 
     document.location.href = 'another page'; 
});
</snippet></ROW><ROW><id>14717777</id><snippet>another page</snippet></ROW><ROW><id>14717777</id><snippet>response</snippet></ROW><ROW><id>14717782</id><snippet>lyx-fonts</snippet></ROW><ROW><id>14717782</id><snippet>plt.rcParams['mathtext.fontset'] = "stix"
</snippet></ROW><ROW><id>14717791</id><snippet>Celery</snippet></ROW><ROW><id>14717791</id><snippet>gevent</snippet></ROW><ROW><id>14717791</id><snippet>greenlet</snippet></ROW><ROW><id>14717791</id><snippet>queue</snippet></ROW><ROW><id>14717791</id><snippet>http://upload.example.com/</snippet></ROW><ROW><id>14717791</id><snippet>/upload/</snippet></ROW><ROW><id>14717791</id><snippet>gunicorn</snippet></ROW><ROW><id>14717791</id><snippet>gevent worker-class</snippet></ROW><ROW><id>14718168</id><snippet>In [50]: import platform    
In [52]: platform.python_implementation()
Out[52]: 'CPython'
</snippet></ROW><ROW><id>14718295</id><snippet>line = raw_input(sys.ps1)
_ = eval(line)
if _ is not None:
    print repr(_)
</snippet></ROW><ROW><id>14718295</id><snippet>sys.ps1</snippet></ROW><ROW><id>14718295</id><snippet>_</snippet></ROW><ROW><id>14718295</id><snippet>globals</snippet></ROW><ROW><id>14718295</id><snippet>raw_input(sys.ps2)</snippet></ROW><ROW><id>14718295</id><snippet>readline</snippet></ROW><ROW><id>14718295</id><snippet>rlcomplete</snippet></ROW><ROW><id>14718295</id><snippet>code</snippet></ROW><ROW><id>14718295</id><snippet>code</snippet></ROW><ROW><id>14718295</id><snippet>IDLE</snippet></ROW><ROW><id>14718295</id><snippet>ipython</snippet></ROW><ROW><id>14718295</id><snippet>bpython</snippet></ROW><ROW><id>14718367</id><snippet>x and y</snippet></ROW><ROW><id>14718367</id><snippet>x</snippet></ROW><ROW><id>14718367</id><snippet>y</snippet></ROW><ROW><id>14718367</id><snippet>x</snippet></ROW><ROW><id>14718367</id><snippet>x</snippet></ROW><ROW><id>14718367</id><snippet>y</snippet></ROW><ROW><id>14718367</id><snippet>set</snippet></ROW><ROW><id>14718367</id><snippet>list</snippet></ROW><ROW><id>14718367</id><snippet>x and y</snippet></ROW><ROW><id>14718367</id><snippet>x</snippet></ROW><ROW><id>14718367</id><snippet>y</snippet></ROW><ROW><id>14718628</id><snippet>pixel_value = {'0': 0, '1': 255}
byte_seq = ''.join(chr(pixel_value[c]) for c in a if c in pixel_value)
</snippet></ROW><ROW><id>14718628</id><snippet>Image.fromstring</snippet></ROW><ROW><id>14718628</id><snippet>from PIL import Image
im = Image.fromstring('L', (8, 8), byte_seq)
im.show()
</snippet></ROW><ROW><id>14718685</id><snippet>keystate</snippet></ROW><ROW><id>14718685</id><snippet>Rect</snippet></ROW><ROW><id>14718685</id><snippet>ball.rect.center = screen.get_rect().center</snippet></ROW><ROW><id>14718685</id><snippet>Color()</snippet></ROW><ROW><id>14718685</id><snippet>Color("red")</snippet></ROW><ROW><id>14718685</id><snippet>Color("gray40")</snippet></ROW><ROW><id>14718723</id><snippet>%alias_magic</snippet></ROW><ROW><id>14718723</id><snippet>%alias_magic pp paste
</snippet></ROW><ROW><id>14718964</id><snippet>def keys(self):
    return self.columns
</snippet></ROW><ROW><id>14718964</id><snippet>DataFrame</snippet></ROW><ROW><id>14718964</id><snippet>iteritems</snippet></ROW><ROW><id>14718964</id><snippet>keys</snippet></ROW><ROW><id>14718964</id><snippet>iterkeys</snippet></ROW><ROW><id>14718964</id><snippet>iterkv</snippet></ROW><ROW><id>14718964</id><snippet>iteritems</snippet></ROW><ROW><id>14718964</id><snippet>DataFrame</snippet></ROW><ROW><id>14718964</id><snippet>dict</snippet></ROW><ROW><id>14718964</id><snippet>DataFrame</snippet></ROW><ROW><id>14718964</id><snippet>dict</snippet></ROW><ROW><id>14718964</id><snippet>columns</snippet></ROW><ROW><id>14718964</id><snippet>keys()</snippet></ROW><ROW><id>14719103</id><snippet>\b</snippet></ROW><ROW><id>14719103</id><snippet>'\x08'</snippet></ROW><ROW><id>14719103</id><snippet>\X</snippet></ROW><ROW><id>14719103</id><snippet>X</snippet></ROW><ROW><id>14719103</id><snippet>r"C:\Users\dylan\Desktop\Practice Game\brick.jpg"</snippet></ROW><ROW><id>14719103</id><snippet>"C:\\Users\\dylan\\Desktop\\Practice Game\\brick.jpg"</snippet></ROW><ROW><id>14719103</id><snippet>"C:/Users/dylan/Desktop/Practice Game/brick.jpg"</snippet></ROW><ROW><id>14719103</id><snippet>\b</snippet></ROW><ROW><id>14719103</id><snippet>&gt;&gt;&gt; print "C:\Users\dylan\Desktop\Practice Game\brick.jpg"
C:\Users\dylan\Desktop\Practice Gamrick.jpg
&gt;&gt;&gt; print r"C:\Users\dylan\Desktop\Practice Game\brick.jpg"
C:\Users\dylan\Desktop\Practice Game\brick.jpg
&gt;&gt;&gt; print "C:\\Users\\dylan\\Desktop\\Practice Game\\brick.jpg"
C:\Users\dylan\Desktop\Practice Game\brick.jpg
&gt;&gt;&gt; print "C:/Users/dylan/Desktop/Practice Game/brick.jpg"
C:/Users/dylan/Desktop/Practice Game/brick.jpg
</snippet></ROW><ROW><id>14719319</id><snippet>**</snippet></ROW><ROW><id>14719319</id><snippet>-</snippet></ROW><ROW><id>14719319</id><snippet>  -(1**0)
= -(1)
= -1
</snippet></ROW><ROW><id>14719319</id><snippet>(-1)**0
</snippet></ROW><ROW><id>14719319</id><snippet>**</snippet></ROW><ROW><id>14719336</id><snippet>In [3]: df
Out[3]:
   start  end
0    100  120
1    150  151
2    160  170
3    200  210

In [4]: df.start - df.end.shift()
Out[4]:
0   NaN
1    30
2     9
3    30

In [5]: df['elapsed'] = df.start - df.end.shift()

In [6]: df
Out[6]:
   start  end  elapsed
0    100  120      NaN
1    150  151       30
2    160  170        9
3    200  210       30
</snippet></ROW><ROW><id>14719462</id><snippet>GET / HTTP/1.1
Host: google.com
Connection: keep-alive
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17
X-Chrome-Variations: CM61yQEIk7bJAQiatskBCKa2yQEIp7bJAQiptskBCLi2yQEI34PKAQ==
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US;q=0.6,en;q=0.4
Accept-Charset: utf-8;q=0.7,*;q=0.3
</snippet></ROW><ROW><id>14719651</id><snippet>fork</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing</snippet></ROW><ROW><id>14719651</id><snippet>fork</snippet></ROW><ROW><id>14719651</id><snippet>exec</snippet></ROW><ROW><id>14719651</id><snippet>fork</snippet></ROW><ROW><id>14719651</id><snippet>spawn</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing</snippet></ROW><ROW><id>14719651</id><snippet>threading.Thread</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing</snippet></ROW><ROW><id>14719651</id><snippet>pp</snippet></ROW><ROW><id>14719651</id><snippet>exec</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing</snippet></ROW><ROW><id>14719651</id><snippet>exec</snippet></ROW><ROW><id>14719651</id><snippet>spawn</snippet></ROW><ROW><id>14719651</id><snippet>cp $MY_PYTHON_LIB/multiprocessing.py $MY_PROJECT_DIR/mymultiprocessing.py</snippet></ROW><ROW><id>14719651</id><snippet>mymultiprocessing</snippet></ROW><ROW><id>14719651</id><snippet>multiprocessing</snippet></ROW><ROW><id>14719663</id><snippet>Panel</snippet></ROW><ROW><id>14719663</id><snippet>True</snippet></ROW><ROW><id>14719663</id><snippet>class Panel(Base):
    # ...

    def __eq__(self, other):
        return isinstance(other, Panel) and other.id == self.id
</snippet></ROW><ROW><id>14719663</id><snippet>Panel</snippet></ROW><ROW><id>14719663</id><snippet>class TestQuery(unittest.TestCase):
    def setUp(self):
        self.engine = create_engine('sqlite:///:memory:')
        self.session = Session(engine)
        Base.metadata.create_all(self.engine)
        self.panel = Panel(1, 'ion torrent', 'start')
        self.session.add(self.panel)
        self.session.commit()

    def tearDown(self):
        Base.metadata.drop_all(self.engine)

    def test_query_panel(self):
        expected = [self.panel]
        result = self.session.query(Panel).all()
        self.assertEqual(result, expected)
</snippet></ROW><ROW><id>14719663</id><snippet>Session</snippet></ROW><ROW><id>14719663</id><snippet>commit()</snippet></ROW><ROW><id>14719663</id><snippet>Transaction</snippet></ROW><ROW><id>14719679</id><snippet>defaultdict</snippet></ROW><ROW><id>14719679</id><snippet>from collections import defaultdict

groups = defaultdict(list)

for filename in os.listdir(directory):
    basename, extension = os.path.splitext(filename)
    project, subject, session, ftype = basename.split('-x-')

    groups[session].append(filename)
</snippet></ROW><ROW><id>14719679</id><snippet>groups</snippet></ROW><ROW><id>14719709</id><snippet>f_locals</snippet></ROW><ROW><id>14719709</id><snippet>import sys
import functools

def capturelocals(func):
    @functools.wraps(func)
    def wrapperfunc(*args, **kw):
        try:
            return func(*args, **kw)
        except Exception:
            _, _, tb = sys.exc_info()
            try:
                while tb.tb_next is not None:
                    tb = tb.tb_next  # find innermost frame
                locals = tb.tb_frame.f_locals
                print locals
            finally:
                del tb  # prevent leaking tracebacks
            raise
    return wrapperfunc
</snippet></ROW><ROW><id>14719709</id><snippet>&gt;&gt;&gt; @capturelocals
... def foobar():
...     foo = 'bar'
...     spam = 'eggs'
...     raise ValueError('Bam!')
... 
&gt;&gt;&gt; foobar()
{'foo': 'bar', 'spam': 'eggs'}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in wrapperfunc
  File "&lt;stdin&gt;", line 5, in foobar
ValueError: Bam!
</snippet></ROW><ROW><id>14719724</id><snippet>bits=6</snippet></ROW><ROW><id>14719724</id><snippet>sys.stdout.flush()
</snippet></ROW><ROW><id>14719724</id><snippet>s = Solver()</snippet></ROW><ROW><id>14719724</id><snippet>s.set("timeout", 60000)
</snippet></ROW><ROW><id>14719724</id><snippet>unknown</snippet></ROW><ROW><id>14719724</id><snippet>unsat</snippet></ROW><ROW><id>14719724</id><snippet>unsat</snippet></ROW><ROW><id>14719724</id><snippet>set_option("verbose", 10)
</snippet></ROW><ROW><id>14719724</id><snippet>(sat-restart :conflicts 28553852 :decisions 35506087 :restarts 39751 :clauses 11002 :learned 297311 :gc-clause 28045187 :memory 103.26 :time 6557.84)
</snippet></ROW><ROW><id>14719724</id><snippet>Sat, 28, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 28, 1194488, 20123428, 138352652, 27828345, 8323715, 255074345, 148059146, 45669120, 59311259, 36160098, 43520123, 171745797, 20100107, 55836791, 87065373, 174311427, 325679, 44106461, 17417102, 146868180, 120734802, 3190244, 68039782, 159445796, 61293076, 17065817, 207814763, 50496350,  
Sat, 27, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 27, 127374544, 2292862, 99672473, 2675455, 109553908, 31909971, 59861451, 41730414, 54510094, 63370004, 130863, 98670875, 52005358, 117596054, 103086442, 102094768, 85953361, 12855291, 113728523, 132186876, 133366378, 112477583, 20121855, 8079423, 95241842, 15701556, 108466982, 15861679,  
Sat, 26, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 26, 3948768, 14692617, 19776512, 120332, 24121729, 17236013, 34409608, 59052072, 34681936, 1114895, 13634601, 57705476, 2457863, 389249, 33615106, 34546177, 24264721, 21889794, 1217858, 34496580, 50476161, 50346252, 3080465, 34345251, 6372864, 42188865, 18025490, 5243087,  
Sat, 25, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 25, 21548816, 14681017, 11618883, 6687600, 17326840, 22114504, 25792662, 12517432, 12183, 20008097, 18027047, 324389, 17106676, 16967429, 29899522, 5050707, 29494411, 3188854, 11813403, 22317095, 3749937, 3097638, 741939, 21964992, 838083, 13687553, 33226832, 3673677,  
Sat, 24, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 24, 16510219, 16682171, 15519598, 10477281, 10481616, 11514364, 15334059, 14871548, 12107387, 14782459, 196543, 3931864, 12516875, 15925188, 15121231, 15631351, 3145572, 258039, 5197787, 3799546, 9433947, 785909, 1699323, 1569788, 9158599, 3662718, 3407842, 16662241,  
Sat, 23, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 23, 4337951, 7815728, 1113412, 31704, 1209944, 2591336, 857041, 1035016, 117610, 582206, 6597155, 6615137, 8129736, 5134355, 3227767, 471536, 3937363, 5257644, 6411017, 3152566, 1937690, 728177, 2962482, 4215659, 56802, 5118725, 6276097, 257728,  
Sat, 22, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 22, 312133, 421384, 1109512, 2098659, 1835070, 2388161, 1193540, 3289102, 3752454, 503811, 1012736, 3020290, 1313415, 77903, 3160288, 14050, 1852864, 281355, 3023648, 1089598, 1967040, 819952, 1753640, 21149, 487472, 1878019, 1197319, 1262740,  
Sat, 21, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 21, 64995, 390953, 1700562, 1302766, 1187453, 1314795, 842519, 1785696, 1988188, 1849171, 1571340, 1862031, 28668, 193211, 1179395, 1040004, 1226595, 1545878, 1328063, 2093106, 1139447, 799486, 383535, 2040975, 687303, 1112985, 1388153, 1241406,  
Sat, 20, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 20, 93862, 686853, 903880, 373532, 698796, 985932, 43949, 858080, 174578, 47915, 130848, 963016, 918415, 306040, 64325, 905514, 989578, 176359, 258604, 409504, 749645, 111586, 142798, 137078, 109451, 983229, 191657, 593861,  
Sat, 19, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 19, 339712, 331803, 160304, 13928, 53404, 107824, 136717, 102988, 67639, 319526, 265153, 132127, 145954, 156321, 86314, 284993, 343104, 8659, 329392, 25444, 20229, 52880, 73837, 251, 337296, 319499, 394354, 312610,  
Sat, 18, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 18, 69753, 52231, 229778, 3667, 247041, 206608, 53302, 208400, 61705, 69959, 3025, 43654, 181002, 65024, 53554, 78001, 160066, 90892, 213698, 188612, 1009, 74179, 90761, 127744, 78897, 78371, 200264, 258052,  
Sat, 17, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 17, 94080, 86358, 31782, 34292, 13221, 59266, 21383, 83749, 36259, 46854, 69743, 19914, 49596, 99267, 90828, 117346, 47637, 81456, 35700, 61188, 106663, 95584, 9133, 36216, 99132, 99996, 53923, 45459,  
Sat, 16, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 16, 40904, 29469, 60171, 20719, 15453, 46111, 50767, 7759, 63596, 21475, 63057, 52579, 60569, 19687, 24401, 31907, 64588, 56560, 49885, 62755, 48930, 7981, 62356, 48325, 32394, 3919, 57407, 58322,  
Sat, 15, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 15, 32194, 19956, 13227, 25303, 17374, 10815, 24304, 5607, 24348, 32193, 1918, 11934, 15820, 25935, 11118, 4074, 8702, 22939, 24402, 32200, 4028, 29086, 30003, 32530, 29046, 29372, 29790, 29925,  
Sat, 14, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 14, 1889, 9448, 3378, 8787, 4316, 2520, 711, 1008, 4875, 12380, 4810, 12690, 1714, 5968, 9034, 411, 811, 5646, 7224, 7685, 7944, 15440, 461, 7104, 14418, 4840, 4217, 3040,  
Sat, 13, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 13, 6647, 5951, 7359, 7805, 3069, 6007, 7119, 7791, 1023, 5879, 2943, 7023, 8051, 1791, 7925, 8079, 6071, 4607, 2015, 6651, 7667, 2815, 7487, 7421, 6847, 5883, 5999, 8118,  
Sat, 12, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 12, 1823, 1788, 3064, 3727, 1271, 3309, 3546, 3790, 955, 3562, 3825, 1499, 2287, 2539, 1767, 3869, 3419, 2934, 4017, 3495, 3050, 1655, 2033, 1532, 2686, 2877, 3036, 1935,  
Sat, 11, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 11, 1973, 751, 1782, 1771, 1523, 983, 1913, 735, 2019, 1963, 1991, 507, 958, 1018, 1275, 1659, 2003, 1263, 1343, 1847, 1375, 2034, 1907, 1899, 1532, 1463, 503, 1011,  
Sat, 10, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 10, 132, 9, 66, 40, 320, 5, 33, 136, 260, 96, 3, 20, 258, 130, 264, 17, 36, 129, 528, 10, 48, 384, 288, 65, 544, 514, 12, 80,  
Sat, 9, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 9, 416, 37, 388, 208, 22, 352, 274, 322, 112, 268, 193, 104, 196, 266, 385, 146, 296, 56, 11, 70, 69, 138, 336, 448, 324, 35, 261, 176,  
Sat, 8, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 8, 197, 46, 105, 225, 201, 60, 99, 92, 15, 150, 113, 149, 51, 27, 210, 53, 172, 163, 184, 54, 23, 57, 216, 240, 156, 43, 178, 29,  
Sat, 7, st14, st20, st9, st17_n, st3, st6_n, st15, st10, st15_n, st1, st11, st18, st19, st4_n, st5, st9_n, st8, st2, st2_n, st16, st6, st17, st13, st16_n, st4, st7, st12, st19_n,  
ASSIGN, 7, 46, 45, 15, 77, 78, 114, 57, 83, 108, 51, 106, 113, 23, 120, 43, 54, 92, 105, 60, 30, 71, 102, 53, 75, 29, 27, 89, 58,  
</snippet></ROW><ROW><id>14719825</id><snippet>target.txt</snippet></ROW><ROW><id>14719825</id><snippet>subprocess.call()</snippet></ROW><ROW><id>14719825</id><snippet>target.txt</snippet></ROW><ROW><id>14719825</id><snippet>__file__</snippet></ROW><ROW><id>14719825</id><snippet>__file__</snippet></ROW><ROW><id>14719825</id><snippet>openclient()</snippet></ROW><ROW><id>14719825</id><snippet>__file__</snippet></ROW><ROW><id>14719825</id><snippet>__file__</snippet></ROW><ROW><id>14719825</id><snippet>target.txt</snippet></ROW><ROW><id>14719825</id><snippet>date</snippet></ROW><ROW><id>14719825</id><snippet>#!/usr/bin/env python2.7

import os
import subprocess

def openclient(orig__file__=os.path.abspath(__file__)):
    target = os.path.join(os.path.dirname(orig__file__), 'target.txt')
    with open(target, "rb") as f:
        subprocess.call(f.read().strip())
        print '''Your file is opening'''

if __name__ == '__main__':
    os.chdir('foo')
    openclient()
</snippet></ROW><ROW><id>14719837</id><snippet>a.items()</snippet></ROW><ROW><id>14719837</id><snippet>&gt;&gt;&gt; to_sort = a.items()
&gt;&gt;&gt; to_sort
[('q', {3: [4, 2, 7]}), ('a', {1: [5, 3, 11]}), ('e', {23: [11, 45, 2]})]
</snippet></ROW><ROW><id>14719837</id><snippet>'q'</snippet></ROW><ROW><id>14719837</id><snippet>to_sort[0][1].values()[0][1]</snippet></ROW><ROW><id>14719837</id><snippet>to_sort[0][1]</snippet></ROW><ROW><id>14719837</id><snippet>{3: [4, 2, 7]}</snippet></ROW><ROW><id>14719837</id><snippet>.values()</snippet></ROW><ROW><id>14719837</id><snippet>[[4, 2, 7]]</snippet></ROW><ROW><id>14719837</id><snippet>[0][1]</snippet></ROW><ROW><id>14719837</id><snippet>2</snippet></ROW><ROW><id>14719837</id><snippet>to_sort[0]</snippet></ROW><ROW><id>14719837</id><snippet>&gt;&gt;&gt; sorted(to_sort, key=lambda x: (x[1].values()[0][1], x[0]))
[('q', {3: [4, 2, 7]}), ('a', {1: [5, 3, 11]}), ('e', {23: [11, 45, 2]})]
</snippet></ROW><ROW><id>14719837</id><snippet>&gt;&gt;&gt; sorted(to_sort, key=lambda x: (x[1].values()[0][1], x[0]), reverse=True)
[('e', {23: [11, 45, 2]}), ('a', {1: [5, 3, 11]}), ('q', {3: [4, 2, 7]})]
</snippet></ROW><ROW><id>14719837</id><snippet>&gt;&gt;&gt; sorted(a.items(), key=lambda x: (x[1].values()[0][1], x[0]), reverse=True)
</snippet></ROW><ROW><id>14720058</id><snippet>json</snippet></ROW><ROW><id>14720058</id><snippet>def parse(data):
    nodes = set()
    links = set()

    for line in data.split('\n'):
        fields = line.split()

        id1, id2 = map(int, fields[:2])
        value = float(fields[2])

        nodes.update((id1, id2))
        links.add((id1, id2, value))

    return {
        'nodes': [{
            'name': node
        } for node in nodes],
        'links': [{
            'source': link[0],
            'target': link[1],
            'value': link[2]
        } for link in links]
    }
</snippet></ROW><ROW><id>14720058</id><snippet>json.dumps</snippet></ROW><ROW><id>14720058</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = '1   234  0.2\n1   235  0.1'
&gt;&gt;&gt; parsed = parse(data)
&gt;&gt;&gt; parsed
    {'links': [{'source': 1, 'target': 235, 'value': 0.1},
  {'source': 1, 'target': 234, 'value': 0.2}],
 'nodes': [{'name': 1}, {'name': 234}, {'name': 235}]}
&gt;&gt;&gt; json.dumps(parsed)
    '{"nodes": [{"name": 1}, {"name": 234}, {"name": 235}], "links": [{"source": 1, "target": 235, "value": 0.1}, {"source": 1, "target": 234, "value": 0.2}]}'
</snippet></ROW><ROW><id>14720325</id><snippet>é</snippet></ROW><ROW><id>14720325</id><snippet>&gt;&gt;&gt; print 'pr\xc3\xa9venteur'.decode('utf8')
préventeur
</snippet></ROW><ROW><id>14720386</id><snippet>collections.Counter()</snippet></ROW><ROW><id>14720386</id><snippet>from collections import Counter

counterA = Counter(listA)
counterB = Counter(listB)
</snippet></ROW><ROW><id>14720386</id><snippet>&gt;&gt;&gt; counterA
Counter({'apple': 3, 'orange': 2, 'banana': 1})
&gt;&gt;&gt; counterB
Counter({'apple': 2, 'orange': 1, 'grapefruit': 1})
&gt;&gt;&gt; counterA - counterB
Counter({'orange': 1, 'apple': 1, 'banana': 1})
&gt;&gt;&gt; counterB - counterA
Counter({'grapefruit': 1})
</snippet></ROW><ROW><id>14720386</id><snippet>import math

def counter_cosine_similarity(c1, c2):
    terms = set(c1).union(c2)
    dotprod = sum(c1.get(k, 0) * c2.get(k, 0) for k in terms)
    magA = math.sqrt(sum(c1.get(k, 0)**2 for k in terms))
    magB = math.sqrt(sum(c2.get(k, 0)**2 for k in terms))
    return dotprod / (magA * magB)
</snippet></ROW><ROW><id>14720386</id><snippet>&gt;&gt;&gt; counter_cosine_similarity(counterA, counterB)
0.8728715609439696
</snippet></ROW><ROW><id>14720386</id><snippet>def length_similarity(c1, c2):
    lenc1 = sum(c1.itervalues())
    lenc2 = sum(c2.itervalues())
    return min(lenc1, lenc2) / float(max(lenc1, lenc2))
</snippet></ROW><ROW><id>14720386</id><snippet>def similarity_score(l1, l2):
    c1, c2 = Counter(l1), Counter(l2)
    return length_similarity(c1, c2) * counter_cosine_similarity(c1, c2)  
</snippet></ROW><ROW><id>14720386</id><snippet>&gt;&gt;&gt; similarity_score(['apple', 'orange', 'apple', 'apple', 'banana', 'orange'], ['apple', 'orange', 'grapefruit', 'apple'])
0.5819143739626463
&gt;&gt;&gt; similarity_score(['apple', 'apple', 'orange', 'orange'], ['apple', 'orange'])
0.4999999999999999
</snippet></ROW><ROW><id>14720410</id><snippet>ssh</snippet></ROW><ROW><id>14720410</id><snippet>enpkg</snippet></ROW><ROW><id>14720410</id><snippet>Terminal</snippet></ROW><ROW><id>14720410</id><snippet>ssh</snippet></ROW><ROW><id>14720445</id><snippet>for X,Y in data:
   scatter(X, Y, c=numpy.random.rand(3,1))
</snippet></ROW><ROW><id>14720448</id><snippet>Manager isn't available; User has been swapped for 'poker.PokerUser'</snippet></ROW><ROW><id>14720448</id><snippet>UserCreationForm</snippet></ROW><ROW><id>14720448</id><snippet>The Manager isn't available; User has been swapped for 'poker.PokerUser'</snippet></ROW><ROW><id>14720448</id><snippet>AUTH_USER_MODEL = 'poker.PokerUser'</snippet></ROW><ROW><id>14720448</id><snippet>settings.py</snippet></ROW><ROW><id>14720448</id><snippet>get_user_model()</snippet></ROW><ROW><id>14720448</id><snippet>poker.models</snippet></ROW><ROW><id>14720448</id><snippet>get_user_model()</snippet></ROW><ROW><id>14720448</id><snippet>registration.forms</snippet></ROW><ROW><id>14720448</id><snippet>get_user_model()</snippet></ROW><ROW><id>14720448</id><snippet>UserRegistration</snippet></ROW><ROW><id>14720448</id><snippet>UserCreationForm</snippet></ROW><ROW><id>14720448</id><snippet>save()</snippet></ROW><ROW><id>14720452</id><snippet>genre_iter = (set(x.split('|')) for x in movies.genres)
genres = sorted(set.union(*genre_iter))
</snippet></ROW><ROW><id>14720452</id><snippet>genre_iter</snippet></ROW><ROW><id>14720452</id><snippet>set.union()</snippet></ROW><ROW><id>14720452</id><snippet>&gt;&gt;&gt; set.union()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor 'union' of 'set' object needs an argument
</snippet></ROW><ROW><id>14720458</id><snippet>for</snippet></ROW><ROW><id>14720458</id><snippet>import sys;for p in sys.path:print p
</snippet></ROW><ROW><id>14720458</id><snippet>python</snippet></ROW><ROW><id>14720458</id><snippet>import sys
for p in sys.path:print p
</snippet></ROW><ROW><id>14720458</id><snippet>python -c ' import sys
            for p in sys.path:print p
          '
</snippet></ROW><ROW><id>14720458</id><snippet>python -c $'import sys\nfor p in sys.path:print p'
</snippet></ROW><ROW><id>14720458</id><snippet>$'...'</snippet></ROW><ROW><id>14720458</id><snippet>\n</snippet></ROW><ROW><id>14720600</id><snippet>transform</snippet></ROW><ROW><id>14720600</id><snippet>Rectangle</snippet></ROW><ROW><id>14720600</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

fig, axes = plt.subplots(3, 2)

rect = Rectangle((0.08, 0.35), 0.85, 0.28, facecolor='yellow', edgecolor='none',
                 transform=fig.transFigure, zorder=-1)
fig.patches.append(rect)
plt.show()
</snippet></ROW><ROW><id>14720600</id><snippet>import matplotlib.pyplot as plt
from matplotlib.transforms import Bbox
from matplotlib.patches import Rectangle

def full_extent(ax, pad=0.0):
    """Get the full extent of an axes, including axes labels, tick labels, and
    titles."""
    # For text objects, we need to draw the figure first, otherwise the extents
    # are undefined.
    ax.figure.canvas.draw()
    items = ax.get_xticklabels() + ax.get_yticklabels() 
#    items += [ax, ax.title, ax.xaxis.label, ax.yaxis.label]
    items += [ax, ax.title]
    bbox = Bbox.union([item.get_window_extent() for item in items])
    return bbox.expanded(1.0 + pad, 1.0 + pad)


fig, axes = plt.subplots(3,2)

extent = Bbox.union([full_extent(ax) for ax in axes[1,:]])

# It's best to transform this back into figure coordinates. Otherwise, it won't
# behave correctly when the size of the plot is changed.
extent = extent.transformed(fig.transFigure.inverted())

# We can now make the rectangle in figure coords using the "transform" kwarg.
rect = Rectangle([extent.xmin, extent.ymin], extent.width, extent.height,
                 facecolor='yellow', edgecolor='none', zorder=-1, 
                 transform=fig.transFigure)
fig.patches.append(rect)

plt.show()
</snippet></ROW><ROW><id>14720615</id><snippet>Connection: close</snippet></ROW><ROW><id>14720615</id><snippet>Connection</snippet></ROW><ROW><id>14720615</id><snippet>Keep-Alive</snippet></ROW><ROW><id>14720615</id><snippet>Content-Length</snippet></ROW><ROW><id>14720615</id><snippet>Keep-Alive</snippet></ROW><ROW><id>14720615</id><snippet>Content-Length</snippet></ROW><ROW><id>14720615</id><snippet>Content-Length</snippet></ROW><ROW><id>14720615</id><snippet>Content-Length</snippet></ROW><ROW><id>14720615</id><snippet>Content-Length</snippet></ROW><ROW><id>14720615</id><snippet># Assuming data is a byte string.
# (If you're dealing with a Unicode string, encode it first.)
content_length_header = "Content-Length: {0}\r\n".format(len(data))
</snippet></ROW><ROW><id>14720615</id><snippet>#!/usr/bin/env python3
import time
import socket

data = b'''\
HTTP/1.1 200 OK\r\n\
Connection: keep-alive\r\n\
Content-Type: text/html\r\n\
Content-Length: 6\r\n\
\r\n\
Hello!\
'''


def main(server_address=('0.0.0.0', 8000)):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    server.bind(server_address)
    server.listen(5)
    while True:
        try:
            client, client_address = server.accept()
            handle_request(client, client_address)
        except KeyboardInterrupt:
            break


def handle_request(client, address):
    with client:
        client.sendall(data)
        time.sleep(5)  # Keep the socket open for a bit longer.
        client.shutdown(socket.SHUT_RDWR)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14720644</id><snippet>TemplateResponse</snippet></ROW><ROW><id>14720644</id><snippet>HttpResponse</snippet></ROW><ROW><id>14720644</id><snippet> return TemplateResponse(request, "profiles_view.html", results)
</snippet></ROW><ROW><id>14720740</id><snippet>sqlite3</snippet></ROW><ROW><id>14720740</id><snippet>?</snippet></ROW><ROW><id>14720740</id><snippet>%s</snippet></ROW><ROW><id>14720740</id><snippet>cursor.execute("INSERT INTO WHEELS (wheelName,wheelImg) VALUES (?, ?)", (WHEELNAME,WHEELIMG))
</snippet></ROW><ROW><id>14720740</id><snippet>wheelColorNameShow</snippet></ROW><ROW><id>14720740</id><snippet>"wheelColorNameShow" TEXT check(typeof("wheelColorNameShow") = 'text')
</snippet></ROW><ROW><id>14720740</id><snippet>cursor.execute('insert into wheels (wheelName,wheelImg,wheelColorNameShow) VALUES (?, ?, ?)', ('test', 'test', 'test'))
</snippet></ROW><ROW><id>14720809</id><snippet>for line in openf:
</snippet></ROW><ROW><id>14720809</id><snippet>for line in openf.split("\n"):
</snippet></ROW><ROW><id>14720860</id><snippet>p.wrap</snippet></ROW><ROW><id>14720860</id><snippet>stringWidth</snippet></ROW><ROW><id>14720860</id><snippet>splitLines</snippet></ROW><ROW><id>14720860</id><snippet>from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.pagesizes import A4
from reportlab.platypus import Paragraph
from reportlab.lib.utils import simpleSplit
from reportlab.pdfbase.pdfmetrics import stringWidth

def shrink_font_size(aW, aH, text, style):
    """Shrinks font size by using pdfmetrics to calculate the height
    of a paragraph, given the font name, size, and available width."""
    def break_lines(text, aW):
        # simpleSplit calculates how reportlab will break up the lines for
        # display in a paragraph, by using width/fontsize.
        return simpleSplit(text, style.fontName, style.fontSize, aW)

    def line_wrap(lines, style):
        # Get overall width of text by getting stringWidth of longest line
        width = stringWidth(max(lines), style.fontName, style.fontSize)
        # Paragraph height can be calculated via line spacing and number of lines.
        height = style.leading * len(lines)
        return width, height

    lines = break_lines(text, aW)
    width, height = line_wrap(lines, style)

    while height &gt; aH or width &gt; aW:
        style.fontSize -= 1
        lines = break_lines(text, aW)
        width, height = line_wrap(lines, style)


def renderPage(name, text):
    doc = SimpleDocTemplate("%s.pdf" % name)
    parts = []
    # Wasn't sure where PAGE_WIDTH and PAGE_HEIGHT came from for OP,
    # so I just used a standard A4 page measurement.
    PAGE_WIDTH, PAGE_HEIGHT = A4
    aW = PAGE_WIDTH - 4*inch  # available width and height 
    aH = PAGE_HEIGHT - 4*inch

    style = ParagraphStyle(name='fancy')
    style.fontSize = 200
    style.leading = 20
    shrink_font_size(aW, aH, text, style)

    p = Paragraph(text, style)
    parts.append(p)
    doc.build(parts)

if __name__ == "__main__":
    renderPage('test', '12345689019283382848248284 842828428529392381472754 842828428529392381472754 842828428529392381472754\n' * 10)
</snippet></ROW><ROW><id>14720959</id><snippet>import re
def split_string(source,separators):
    return re.split('[{0}]'.format(re.escape(separators)),source)
</snippet></ROW><ROW><id>14720959</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def split_string(source,separators):
...     return re.split('[{0}]'.format(re.escape(separators)),source)
... 
&gt;&gt;&gt; split_string("the;foo: went to the store",':;')
['the', 'foo', ' went to the store']
</snippet></ROW><ROW><id>14720959</id><snippet>' '</snippet></ROW><ROW><id>14720959</id><snippet>def split_string(source,separators):
    return re.split('|'.join(re.escape(x) for x in separators),source)
</snippet></ROW><ROW><id>14720959</id><snippet>&gt;&gt;&gt; def split_string(source,separators):
...     return re.split('|'.join(re.escape(x) for x in separators),source)
... 
&gt;&gt;&gt; split_string("the;foo: went to the store",':;')
['the', 'foo', ' went to the store']
&gt;&gt;&gt; split_string("the;foo: went to the store",['foo','st'])
['the;', ': went to the ', 'ore']
</snippet></ROW><ROW><id>14720959</id><snippet>def split_string(source,separators):
    return re.split('(?:'+'|'.join(re.escape(x) for x in separators)+')+',source)
</snippet></ROW><ROW><id>14720959</id><snippet>&gt;&gt;&gt; split_string("Before the rain ... there was lightning and thunder.", " .")
['Before', 'the', 'rain', 'there', 'was', 'lightning', 'and', 'thunder', '']
</snippet></ROW><ROW><id>14721201</id><snippet>set1 = set((x.id,x.name,...) for x in list1)
difference = [ x for x in list2 if (x.id,x.name,...) not in set1 ]
</snippet></ROW><ROW><id>14721201</id><snippet>...</snippet></ROW><ROW><id>14721233</id><snippet>static_view</snippet></ROW><ROW><id>14721233</id><snippet>static_view</snippet></ROW><ROW><id>14721233</id><snippet>/foo/bar.html
/foo/baz/boo.html
</snippet></ROW><ROW><id>14721233</id><snippet>config.add_static_view('/foo', 'tutorial:pages')
</snippet></ROW><ROW><id>14721233</id><snippet>tutorial/pages/bar.html
tutorial/pages/baz/boo.html
</snippet></ROW><ROW><id>14721233</id><snippet>add_static_view</snippet></ROW><ROW><id>14721233</id><snippet>add_route('foo', '/foo/*subpath')</snippet></ROW><ROW><id>14721233</id><snippet>subpath</snippet></ROW><ROW><id>14721233</id><snippet>tutorial:pages</snippet></ROW><ROW><id>14721233</id><snippet>config.add_route('foo', '/foo')
config.add_route('bar', '/foo/bar')

@view_config(route_name='foo', renderer='tutorial:pages/foo.html.mako')
@view_config(route_name='bar', renderer='tutorial:pages/bar.html.mako')
def static_view(request):
    return {}
</snippet></ROW><ROW><id>14721233</id><snippet>.mako</snippet></ROW><ROW><id>14721233</id><snippet>.html</snippet></ROW><ROW><id>14721410</id><snippet>ball_list.append(ship_pos[:])
ball_vlist.append(ship_vel[:])
</snippet></ROW><ROW><id>14721410</id><snippet>ship_pos</snippet></ROW><ROW><id>14721410</id><snippet>ship_vel</snippet></ROW><ROW><id>14721410</id><snippet>ball_list[0]</snippet></ROW><ROW><id>14721410</id><snippet>ship_pos</snippet></ROW><ROW><id>14721410</id><snippet>ball_list[0][0] = 5</snippet></ROW><ROW><id>14721410</id><snippet>ship_pos[0] == 5</snippet></ROW><ROW><id>14721410</id><snippet>[:]</snippet></ROW><ROW><id>14721410</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = [1,2]
&gt;&gt;&gt; a.append(b)
&gt;&gt;&gt; a
[[1, 2]]
&gt;&gt;&gt; a[0][0] = 3
&gt;&gt;&gt; a
[[3, 2]]
&gt;&gt;&gt; b
[3, 2]

&gt;&gt;&gt; a=[]
&gt;&gt;&gt; b=[1,2]
&gt;&gt;&gt; a.append(b[:])
&gt;&gt;&gt; a
[[1, 2]]
&gt;&gt;&gt; a[0][0] = 3
&gt;&gt;&gt; a
[[3, 2]]
&gt;&gt;&gt; b
[1, 2]
</snippet></ROW><ROW><id>14721676</id><snippet>import glob
import os
import re
os.chdir( "C:/headers" )

txt = open( 'C:/files.txt', 'w' )

for file in glob.glob( "*.h" ):
    with open( file ) as f:
        contents = f.read()    [...]
        if 'struct' in contents:
            txt.write( "%s\n"% re.sub('\.h$', '', file) )
txt.close()
</snippet></ROW><ROW><id>14721700</id><snippet>def contiguous(seq):
    seq = iter(seq)
    all(x is None for x in seq)        # Burn through any Nones at the beginning
    any(x is None for x in seq)        # and the first group
    return all(x is None for x in seq) # everthing else (if any) should be None.
</snippet></ROW><ROW><id>14721700</id><snippet>next(seq)</snippet></ROW><ROW><id>14721700</id><snippet>seq = iter([None, 1, 2, 3, None])        #  [None, 1, 2, 3, None]
                                         # next^
all(x is None for x in seq)            
                                         #        next^
any(x is None for x in seq)            
                                         #                    next^ (off the end)
return all(x is None for x in seq)       # all returns True for the empty sequence
</snippet></ROW><ROW><id>14721700</id><snippet>seq = iter([1, 2, None, 3, None, None])  #    [1, 2, None, 3, None, None]
                                         # next^
all(x is None for x in seq)            
                                         #    next^
any(x is None for x in seq)            
                                         #             next^  
return all(x is None for x in seq)       # all returns False when 3 is encountered
</snippet></ROW><ROW><id>14721835</id><snippet>x=qid</snippet></ROW><ROW><id>14721835</id><snippet>x</snippet></ROW><ROW><id>14721835</id><snippet>qid</snippet></ROW><ROW><id>14721835</id><snippet>self.id</snippet></ROW><ROW><id>14721835</id><snippet>enumerate()</snippet></ROW><ROW><id>14721835</id><snippet>self.id</snippet></ROW><ROW><id>14721835</id><snippet>for i, x in enumerate(self.id):
    pid=self.id[p]
    qid=self.id[q]
    if x==pid:
        self.id[i]=qid
</snippet></ROW><ROW><id>14721864</id><snippet>(\d)(?: /|/ | / )(\d)</snippet></ROW><ROW><id>14721975</id><snippet>&gt;&gt;&gt; "Hello".encode("hex")
'48656c6c6f'
</snippet></ROW><ROW><id>14721975</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(b'Hello')
b'48656c6c6f'
</snippet></ROW><ROW><id>14722196</id><snippet>itertools.product</snippet></ROW><ROW><id>14722196</id><snippet>numpy</snippet></ROW><ROW><id>14722196</id><snippet>from itertools import product

def adjacent_grid(centre):
    steps = product([-1, 0, 1], repeat=len(centre))
    return (tuple(c+d for c,d in zip(centre, delta)) for delta in steps)
</snippet></ROW><ROW><id>14722196</id><snippet>&gt;&gt;&gt; list(adjacent_grid((3,)))
[(2,), (3,), (4,)]
&gt;&gt;&gt; list(adjacent_grid((3,3)))
[(2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4)]
&gt;&gt;&gt; list(adjacent_grid((3,3,3)))
[(2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 4, 2), (2, 4, 3), (2, 4, 4), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 4, 2), (3, 4, 3), (3, 4, 4), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 4, 2), (4, 4, 3), (4, 4, 4)]
</snippet></ROW><ROW><id>14722220</id><snippet># override the default gcc-4.0 compiler and use clang instead
$ export CC=clang
# override the universal architectures to only use Intel-32
$ export ARCHFLAGS='-arch i386'
$ pip install PIL
</snippet></ROW><ROW><id>14722539</id><snippet>C:\Projects\AutomatedCaching</snippet></ROW><ROW><id>14722539</id><snippet>C:\Python27\ArcGISx6410.1\Lib\site-packages</snippet></ROW><ROW><id>14722539</id><snippet>C:\Python27\ArcGIS10.1\Lib\site-packages</snippet></ROW><ROW><id>14722539</id><snippet>PATH</snippet></ROW><ROW><id>14722539</id><snippet>import sys
for i in sys.path: 
     print i
</snippet></ROW><ROW><id>14722539</id><snippet>c:\python27</snippet></ROW><ROW><id>14722960</id><snippet>loadsettings()</snippet></ROW><ROW><id>14722960</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>14722960</id><snippet>if __name__ == "__main__":
    b = SMSMgr()
    b.loadsettings()
</snippet></ROW><ROW><id>14722960</id><snippet>python allsms.py</snippet></ROW><ROW><id>14722960</id><snippet>from SMShandler.allsms import SMSMgr
</snippet></ROW><ROW><id>14722960</id><snippet>b.loadsettings()</snippet></ROW><ROW><id>14722960</id><snippet>if</snippet></ROW><ROW><id>14723305</id><snippet>any</snippet></ROW><ROW><id>14723305</id><snippet>i_like = any(i in s for i in ('fall', 'spring'))
</snippet></ROW><ROW><id>14723582</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>14723582</id><snippet>pool = multiprocessing.Pool(num_procs)
results = pool.map(the_function, list_of_objects)
pool.close()
</snippet></ROW><ROW><id>14723647</id><snippet>&gt;&gt;&gt; "{:x}".format(0x11012)
'11012'
</snippet></ROW><ROW><id>14723647</id><snippet>&gt;&gt;&gt; "{0:x}".format(0x11012)
'11012'
</snippet></ROW><ROW><id>14723647</id><snippet>&gt;&gt;&gt; "%x" % 0x11012
'11012'
</snippet></ROW><ROW><id>14723702</id><snippet>subprocess</snippet></ROW><ROW><id>14723702</id><snippet>os.system</snippet></ROW><ROW><id>14723702</id><snippet>import subprocess

# Option 1
subprocess.call([path_to_executable, parameter])

# Option 2
subprocess.call("%s \"%s\"" % (path_to_executable, parameter), shell=True)
</snippet></ROW><ROW><id>14723702</id><snippet>subprocess.call knows about each of these entities, it properly calls the external so that it understand that</snippet></ROW><ROW><id>14723702</id><snippet>shell=True</snippet></ROW><ROW><id>14723702</id><snippet>subprocess.call</snippet></ROW><ROW><id>14723716</id><snippet>conv2</snippet></ROW><ROW><id>14723716</id><snippet>svd</snippet></ROW><ROW><id>14723716</id><snippet>abs(sum(svd(M1)-svd(M2)))
ans =
   1.1102e-16

abs(sum(svd(M1)-svd(M4)))
ans =
   0.1189

abs(sum(svd(M3)-svd(M4)))
ans =
    0.7321
</snippet></ROW><ROW><id>14723881</id><snippet>on_failure</snippet></ROW><ROW><id>14723881</id><snippet>Task</snippet></ROW><ROW><id>14723888</id><snippet>''.join()</snippet></ROW><ROW><id>14723888</id><snippet>', '.join(row)
</snippet></ROW><ROW><id>14724033</id><snippet>def delete_hardware (request, id):
    inventory = get_object_or_404(inventory, pk=id).delete()
    messages.success(request, "Hardware was deleted!")
    return HttpResponseRedirect(reverse('app_name:url_name'))
</snippet></ROW><ROW><id>14724033</id><snippet>url(r'^delete/(?P&lt;id&gt;\d+)/$', 'delete_hardware', 
    name='delete_hardware'),
</snippet></ROW><ROW><id>14724033</id><snippet>&lt;a href="/delete/{{value.id}}" class="delete-hardware"&gt;Delete&lt;/a&gt;

&lt;script&gt;
$('.delete-hardware').click(function(){
    var url = $(this).attr('href');
    document.location.href = url;
});
&lt;/script&gt;
</snippet></ROW><ROW><id>14724326</id><snippet>subprocess.call</snippet></ROW><ROW><id>14724326</id><snippet>rc = subprocess.call(['/home/proj/lic.exe', str(lan1)])
</snippet></ROW><ROW><id>14724326</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14724524</id><snippet>self.canvas.setWidgetResizable(True)
</snippet></ROW><ROW><id>14724524</id><snippet>self.canvas.setWidgetResizable(False)
</snippet></ROW><ROW><id>14724524</id><snippet>def add_subplot(self, data=[]):
    rows = len(self.figure.axes) + 1
    for index, axes in enumerate(self.figure.axes, start=1):
        axes.change_geometry(rows, 1, index)

    ax = self.figure.add_subplot(rows, 1, index+1)
    ax.plot(data)
    self.figure.set_figheight(self.figure.get_figheight()*1.25)
    self.draw()
</snippet></ROW><ROW><id>14724524</id><snippet>    for x in range(5):
        self.canvas.widget().add_subplot()
        self.canvas.widget().adjustSize()
</snippet></ROW><ROW><id>14724539</id><snippet>r.content</snippet></ROW><ROW><id>14724539</id><snippet>python 2.7</snippet></ROW><ROW><id>14724539</id><snippet>sudo pip-2.7 install requests --upgrade</snippet></ROW><ROW><id>14724738</id><snippet>itertools</snippet></ROW><ROW><id>14724738</id><snippet>from itertools import groupby, chain
from datetime import datetime
</snippet></ROW><ROW><id>14724738</id><snippet>filenames = """20121118011335_team1-pathway_Truck_Report_Data_10342532.zip
20121119011335_team1-pathway_Truck_Report_Data_102345234.zip
20121120011335_team1-pathway_Truck_Report_Data_10642224.zip
20121121011335_team1-pathway_Truck_Report_Data_133464.zip
20121122011335_team1-pathway_Truck_Report_Data_126434344.zip
20121123011335_team1-pathway_Truck_Report_Data_12444656.zip
20121124011335_team1-pathway_Truck_Report_Data_1624444.zip
20121125011335_team1-pathway_Truck_Report_Data_3464433.zip
randomefilewithnodate.zip
20121119011335_team2-Paper_Size_Report_336655.zip
20121120011335_team2-Paper_Size_Report_336677.zip
20121121011335_team2-Paper_Size_Report_338877.zip
20121122011335_team2-Paper_Size_Report_226688.zip
20121123011335_team2-Paper_Size_Report_776688.zip
20121124011335_team2-Paper_Size_Report_223355.zip
20121125011335_team2-Paper_Size_Report_111111.zip""".split("\n")
</snippet></ROW><ROW><id>14724738</id><snippet>def extract_date(s):
    return datetime.strptime(s.split("_")[0], "%Y%m%d%H%M%S")

def starts_with_date(s):
    try:
        extract_date(s)
        return True
    except Exception:
        return False
</snippet></ROW><ROW><id>14724738</id><snippet>def get_name_root(s):
    return "".join(s.split(".")[0].split("_")[1:-1])

def find_files_to_delete_for_group(group):
    sorted_group = sorted(group, key=extract_date)
    return sorted_group[:-5]        
</snippet></ROW><ROW><id>14724738</id><snippet>fn_groups = groupby(
                filter(
                    starts_with_date,
                    filenames),
                get_name_root
            )
</snippet></ROW><ROW><id>14724738</id><snippet>chain</snippet></ROW><ROW><id>14724738</id><snippet>fns_to_delete = chain(*[find_files_to_delete_for_group(g) for k, g in fn_groups])
</snippet></ROW><ROW><id>14724738</id><snippet>print list(fns_to_delete)
</snippet></ROW><ROW><id>14724738</id><snippet>['20121118011335_team1-pathway_Truck_Report_Data_10342532.zip', '20121119011335_team1-pathway_Truck_Report_Data_102345234.zip', '20121120011335_team1-pathway_Truck_Report_Data_10642224.zip', '20121119011335_team2-Paper_Size_Report_336655.zip', '20121120011335_team2-Paper_Size_Report_336677.zip']
</snippet></ROW><ROW><id>14724738</id><snippet>from itertools import groupby, chain
from datetime import datetime

filenames = """20121118011335_team1-pathway_Truck_Report_Data_10342532.zip
20121119011335_team1-pathway_Truck_Report_Data_102345234.zip
20121120011335_team1-pathway_Truck_Report_Data_10642224.zip
20121121011335_team1-pathway_Truck_Report_Data_133464.zip
20121122011335_team1-pathway_Truck_Report_Data_126434344.zip
20121123011335_team1-pathway_Truck_Report_Data_12444656.zip
20121124011335_team1-pathway_Truck_Report_Data_1624444.zip
20121125011335_team1-pathway_Truck_Report_Data_3464433.zip
randomefilewithnodate.zip
20121119011335_team2-Paper_Size_Report_336655.zip
20121120011335_team2-Paper_Size_Report_336677.zip
20121121011335_team2-Paper_Size_Report_338877.zip
20121122011335_team2-Paper_Size_Report_226688.zip
20121123011335_team2-Paper_Size_Report_776688.zip
20121124011335_team2-Paper_Size_Report_223355.zip
20121125011335_team2-Paper_Size_Report_111111.zip""".split("\n")

def extract_date(s):
    return datetime.strptime(s.split("_")[0], "%Y%m%d%H%M%S")

def starts_with_date(s):
    try:
        extract_date(s)
        return True
    except Exception:
        return False

def get_name_root(s):
    return "".join(s.split(".")[0].split("_")[1:-1])

def find_files_to_delete_for_group(group):
    sorted_group = sorted(group, key=extract_date)
    return sorted_group[:-5]        

fn_groups = groupby(
                filter(
                    starts_with_date,
                    filenames),
                get_name_root
            )

fns_to_delete = chain(*[find_files_to_delete_for_group(g) for k, g in fn_groups])

print list(fns_to_delete)
</snippet></ROW><ROW><id>14724828</id><snippet>create_user()</snippet></ROW><ROW><id>14724828</id><snippet>create_superuser()</snippet></ROW><ROW><id>14724828</id><snippet>User</snippet></ROW><ROW><id>14724828</id><snippet>from django.contrib.auth.models import UserManager

class GalaxyUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_time = models.DateTimeField(null=True, blank=True)
    update_time = models.DateTimeField(null=True, blank=True)
    email = models.CharField(max_length=765)
    password = models.CharField(max_length=120)
    external = models.IntegerField(null=True, blank=True)
    deleted = models.IntegerField(null=True, blank=True)
    purged = models.IntegerField(null=True, blank=True)
    username = models.CharField(max_length=765, blank=True)
    form_values_id = models.IntegerField(null=True, blank=True)
    disk_usage = models.DecimalField(null=True, max_digits=16, decimal_places=0, blank=True)

    objects = UserManager()

    class Meta:
        db_table = u'galaxy_user'
</snippet></ROW><ROW><id>14724828</id><snippet>BaseUserManager</snippet></ROW><ROW><id>14724828</id><snippet>django.contrib.auth.models</snippet></ROW><ROW><id>14724828</id><snippet>objects</snippet></ROW><ROW><id>14724907</id><snippet>outfile = io.open(filename_json, 'wb')
</snippet></ROW><ROW><id>14724907</id><snippet>str</snippet></ROW><ROW><id>14724986</id><snippet>df[(x &lt; df.age) &amp; (df.age &lt; y) &amp; (p &lt; df.income) &amp; (df.income &lt; q)]
</snippet></ROW><ROW><id>14725089</id><snippet>Save As</snippet></ROW><ROW><id>14725089</id><snippet>csv</snippet></ROW><ROW><id>14725089</id><snippet>import csv

for filename in os.listdir(INPUT_DIR):
   with open(os.path.join(INPUT_DIR,filename), dialect='excel-tab') as infile:
      reader = csv.reader(infile)
      for row in reader:
          print row
</snippet></ROW><ROW><id>14725089</id><snippet>xlrd</snippet></ROW><ROW><id>14725250</id><snippet>source path/to/software/bin/init.sh /dev/null</snippet></ROW><ROW><id>14725315</id><snippet>In [11]: df[(df.a &gt; 0) &amp; (df.index.isin([0, 2, 4]))]
Out[11]: 
          a         b         c
0  1.877317  0.109646  1.634978
4  0.214583 -0.856150 -0.477844
</snippet></ROW><ROW><id>14725542</id><snippet>ps = set()
for x, y in hull:
    ps.add(x)
    ps.add(y)
ps = numpy.array(list(ps))
center = vecs[ps].mean(axis=0)
A = vecs[ps] - center
h = vecs[ps[numpy.argsort(numpy.arctan2(A[:,1], A[:,0]))]]
</snippet></ROW><ROW><id>14725642</id><snippet>from collections import namedtuple

MyStruct = namedtuple('MyStruct', 'Mark nPackLen nFlag nGisIp nPort sData sEnd')

NodeList = []
Node = MyStruct(None, '', '', '', '',  -1, 0)
for id in range(4):
     NodeList.append(Node)
</snippet></ROW><ROW><id>14725806</id><snippet>s</snippet></ROW><ROW><id>14725806</id><snippet>list</snippet></ROW><ROW><id>14725806</id><snippet>append</snippet></ROW><ROW><id>14725806</id><snippet>list</snippet></ROW><ROW><id>14725806</id><snippet>p=0
s=[]
for item in lst:
    if len(item) &gt; p:
        s=[item]
        p=len(item)
    elif len(item) == p:
        s.append(item)
print(s)
</snippet></ROW><ROW><id>14725927</id><snippet>writerows</snippet></ROW><ROW><id>14725927</id><snippet>list</snippet></ROW><ROW><id>14725927</id><snippet>for item in references:
    c.writerow([item])
</snippet></ROW><ROW><id>14725927</id><snippet>c.writerows([item] for item in references)
</snippet></ROW><ROW><id>14725927</id><snippet>R,e,f,e,r,e,n,c,e,…</snippet></ROW><ROW><id>14725927</id><snippet>"Reference"</snippet></ROW><ROW><id>14725927</id><snippet>['R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e']</snippet></ROW><ROW><id>14725927</id><snippet>list</snippet></ROW><ROW><id>14725927</id><snippet>references = ['Reference xxx-xxx-xxx-007 ', 'Reference xxx-xxx-xxx-001 ']
descriptions = ['shiny thingy', 'dull thingy']
</snippet></ROW><ROW><id>14725927</id><snippet>csv.writerows(zip(references, descriptions))
</snippet></ROW><ROW><id>14725927</id><snippet>references = ['Reference xxx-xxx-xxx-007 ', 'Reference xxx-xxx-xxx-001 ', 'Reference xxx-xxx-xxx-001 ']
descriptions = {'Reference xxx-xxx-xxx-007 ': 'shiny thingy', 
                'Reference xxx-xxx-xxx-001 ': 'dull thingy']}
</snippet></ROW><ROW><id>14725927</id><snippet>csv.writerows((reference, descriptions[reference]) for reference in references)
</snippet></ROW><ROW><id>14725927</id><snippet>list</snippet></ROW><ROW><id>14725927</id><snippet>list</snippet></ROW><ROW><id>14725927</id><snippet>print</snippet></ROW><ROW><id>14725927</id><snippet>writerows</snippet></ROW><ROW><id>14725927</id><snippet>writerow</snippet></ROW><ROW><id>14725927</id><snippet>c.writerow(references)
c.writerow(descriptions)
</snippet></ROW><ROW><id>14725927</id><snippet>rows=[[item] for item in references] 
# now rows is a 1-column table
# ... later
for i, description in enumerate(descriptions):
    values[i].append(description)
# and now rows is a 2-column table
c.writerows(rows)
</snippet></ROW><ROW><id>14725927</id><snippet>with open('temp.csv', 'w') as temp:
    writer=csv.writer(temp)
    # write out the references
# later
with open('temp.csv') as temp, open('real.csv', 'w') as f:
    reader=csv.reader(temp)
    writer=csv.writer(f)
    writer.writerows(row + [description] for (row, description) in zip(reader, descriptions))
</snippet></ROW><ROW><id>14726363</id><snippet>self.showMaximized()
</snippet></ROW><ROW><id>14726666</id><snippet>   "model": "auth.group",
        "fields": {
            "name": "foo",
            "permissions": [
                ...
            ]
</snippet></ROW><ROW><id>14726867</id><snippet>DocumentQuery</snippet></ROW><ROW><id>14726867</id><snippet>content</snippet></ROW><ROW><id>14726867</id><snippet>type</snippet></ROW><ROW><id>14726867</id><snippet>src</snippet></ROW><ROW><id>14726867</id><snippet>src</snippet></ROW><ROW><id>14726867</id><snippet>exportFormat</snippet></ROW><ROW><id>14726918</id><snippet>C:\pytest\
   test.py
   \database\
       db.py
       __init__.py
   \subfolder\
       __init__.py
       coolios.py
</snippet></ROW><ROW><id>14726918</id><snippet>__init__.py</snippet></ROW><ROW><id>14726918</id><snippet>from db import *
</snippet></ROW><ROW><id>14726918</id><snippet>__init__.py</snippet></ROW><ROW><id>14726918</id><snippet>from coolios import *
</snippet></ROW><ROW><id>14726918</id><snippet>db.py</snippet></ROW><ROW><id>14726918</id><snippet>class WHAM():
    def __init__(self):
        print 'You import me!'
</snippet></ROW><ROW><id>14726918</id><snippet>coolios.py</snippet></ROW><ROW><id>14726918</id><snippet>from database import *

class ganster():
    def __init__(self):
        WHAM()
</snippet></ROW><ROW><id>14726918</id><snippet>test.py</snippet></ROW><ROW><id>14726918</id><snippet>from subfolder import ganster
ganster()
</snippet></ROW><ROW><id>14726944</id><snippet>[mysqld]
connect-timeout=100
</snippet></ROW><ROW><id>14726944</id><snippet>SET GLOBAL connect_timeout=100;
</snippet></ROW><ROW><id>14727161</id><snippet>alembic revision --autogenerate -m "&lt;message_here&gt;"
</snippet></ROW><ROW><id>14727161</id><snippet>alembic upgrade head
</snippet></ROW><ROW><id>14727302</id><snippet>f2py -c --fcompiler=gfortran -I"path-to-dir-with-mod-files" --fcompiler=gfortran -I"path-to-dir-with-mod-files" -lNESDIS_LandEM_Module -m mod_landems mod_landem.f90 -m mod_landems mod_landem.f90
</snippet></ROW><ROW><id>14727422</id><snippet>env_variables:
  DJANGO_SETTINGS_MODULE: 'myapp.settings'
</snippet></ROW><ROW><id>14727565</id><snippet>keep_default_na</snippet></ROW><ROW><id>14727565</id><snippet>False</snippet></ROW><ROW><id>14727565</id><snippet>df = pd.read_clipboard(sep=',', index_col=0, keep_default_na=False, na_values='')

In [2]: df
Out[2]: 
                     check        lat       lon  co_alpha     atn  status     bc
datetime                                                                        
2012-10-27 15:00:59      2   0.000000  0.000000     2.427     NaN     NaN    NaN
2012-10-27 15:01:00      2   0.000000  0.000000     2.407     NaN     NaN    NaN
2012-10-27 15:02:49      2   0.000000  0.000000     2.207 -17.358       0 -16162
2012-10-27 15:02:50      2   0.000000  0.000000     2.207 -17.354       0   8192
2012-10-27 15:02:51      1   0.000000  0.000000     2.207 -17.358       0  -8152
2012-10-27 15:02:52      1   0.000000  0.000000     2.207 -17.358       0    648
2012-10-27 15:06:03      0  51.195076  4.444407     2.349 -17.289       0   4909
2012-10-27 15:06:04      0  51.195182  4.444270     2.344 -17.289       0    587
2012-12-05 09:21:34    NaN        NaN       NaN       NaN  42.960       1  16430
2012-12-05 09:21:35    NaN        NaN       NaN       NaN  42.962       1   3597
</snippet></ROW><ROW><id>14727565</id><snippet>read_tables</snippet></ROW><ROW><id>14727565</id><snippet>keep_default_na</snippet></ROW><ROW><id>14727565</id><snippet>na_values</snippet></ROW><ROW><id>14727565</id><snippet>keep_default_na</snippet></ROW><ROW><id>14727565</id><snippet>False</snippet></ROW><ROW><id>14727565</id><snippet>NaN</snippet></ROW><ROW><id>14727565</id><snippet>na_values</snippet></ROW><ROW><id>14727565</id><snippet>None</snippet></ROW><ROW><id>14728067</id><snippet>@href</snippet></ROW><ROW><id>14728067</id><snippet>.//div[@id='containeriso3']/div/a[1]</snippet></ROW><ROW><id>14728067</id><snippet>get_attribute</snippet></ROW><ROW><id>14728067</id><snippet>href</snippet></ROW><ROW><id>14728086</id><snippet>from lib.ftpserver import foo</snippet></ROW><ROW><id>14728086</id><snippet>..</snippet></ROW><ROW><id>14728086</id><snippet>from lib.ftpserver import foo

class AnyClasss(foo):
    foo
</snippet></ROW><ROW><id>14728413</id><snippet>config.add_route('services/Prices/GetByTicker/', 'services/Prices/GetByTicker/')
</snippet></ROW><ROW><id>14728413</id><snippet>request.params['key']</snippet></ROW><ROW><id>14728413</id><snippet>@view_config(route_name="services_Prices_GetByTicker")
def services_Prices_GetByTicker(request):
    ticker = request.params['ticker']
    startDate = request.params['startDate']
    endDate = request.params['endDate']
    period = request.params['period']
</snippet></ROW><ROW><id>14728413</id><snippet>config.add_route('services_Prices_GetByTicker', 'services/Prices/GetByTicker/')
</snippet></ROW><ROW><id>14728477</id><snippet>ArgumentParser</snippet></ROW><ROW><id>14728477</id><snippet>error</snippet></ROW><ROW><id>14728477</id><snippet>class ArgumentParserError(Exception): pass

class ThrowingArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        raise ArgumentParserError(message)

parser = ThrowingArgumentParser()
parser.add_argument(...)
...
</snippet></ROW><ROW><id>14728622</id><snippet>open</snippet></ROW><ROW><id>14728622</id><snippet>with open("danish.train", 'r') as f:
    train_lines = f.readlines()

for file_number in range(1, 12):
    with open("danish.test.part-%02d" % file_number, 'r') as f:
        test_lines = set(f)
    with open("danish.train.part-%02d" % file_number, 'w') as g:
        g.writelines(line for line in train_lines if line not in test_lines)
</snippet></ROW><ROW><id>14728628</id><snippet>None</snippet></ROW><ROW><id>14728628</id><snippet>'NULL'</snippet></ROW><ROW><id>14728628</id><snippet>NULL</snippet></ROW><ROW><id>14728648</id><snippet>def save_model(self, request, obj, form, change):

    for terminal in form.cleaned_data['terminal']:
        ...

    obj.save()
</snippet></ROW><ROW><id>14728935</id><snippet>Ix_Ix_blur[j, i]</snippet></ROW><ROW><id>14728935</id><snippet>Ix_Ix_blur[j][i]</snippet></ROW><ROW><id>14728935</id><snippet>Ix_Ix_blur[j][i]</snippet></ROW><ROW><id>14728935</id><snippet>for i in xrange (Ix_Ix_blur.shape[1]):
    for j in xrange(Ix_Ix_blur.shape[0]):
        a, b, c = Ix_Ix_blur.item(j, i), Ix_Iy_blur.item(j, i), Iy_Iy_blur.item(j, i)
        detA = a*c - b*b
        traceA = a + c
        harmonic_mean = detA/traceA
        if harmonic_mean &gt; thresh:
            cv2.circle(img, (i,j), 1, (0, 0, 255), -1, 8)
</snippet></ROW><ROW><id>14728935</id><snippet>detA = Ix_Ix_blur * Iy_Iy_blur - Ix_Iy_blur**2
traceA = Ix_Ix_blur + Iy_Iy_blur
harmonic_mean = detA / traceA
for j, i in np.argwhere(harmonic_mean &gt; thresh):
    cv2.circle(img, (i,j), 1, (0, 0, 255), -1, 8)
</snippet></ROW><ROW><id>14729139</id><snippet>pos</snippet></ROW><ROW><id>14729139</id><snippet>intent(in)</snippet></ROW><ROW><id>14729139</id><snippet>pos</snippet></ROW><ROW><id>14729139</id><snippet>pos</snippet></ROW><ROW><id>14729139</id><snippet>intent(in)</snippet></ROW><ROW><id>14729139</id><snippet>f2py</snippet></ROW><ROW><id>14729139</id><snippet>mpart</snippet></ROW><ROW><id>14729139</id><snippet>npart</snippet></ROW><ROW><id>14729139</id><snippet>intent(in)</snippet></ROW><ROW><id>14729139</id><snippet>intent(in)</snippet></ROW><ROW><id>14729139</id><snippet>pos</snippet></ROW><ROW><id>14729139</id><snippet>intent(in)</snippet></ROW><ROW><id>14729139</id><snippet>npart</snippet></ROW><ROW><id>14729139</id><snippet>intent(hide)</snippet></ROW><ROW><id>14729139</id><snippet>npart</snippet></ROW><ROW><id>14729139</id><snippet>pos</snippet></ROW><ROW><id>14729139</id><snippet>libomp.cic(pos,mpart,boxsize,dim)
</snippet></ROW><ROW><id>14729362</id><snippet>new</snippet></ROW><ROW><id>14729362</id><snippet>new</snippet></ROW><ROW><id>14729362</id><snippet>In [11]: s = new = df['a'] / df['b'] - df['c']

In [12]: type(s)
Out[12]: pandas.core.series.Series
</snippet></ROW><ROW><id>14729362</id><snippet>0</snippet></ROW><ROW><id>14729362</id><snippet>-0.2833</snippet></ROW><ROW><id>14729362</id><snippet>In [13]: s.ix[0]
Out[13]: -0.28333333333333327
</snippet></ROW><ROW><id>14729362</id><snippet>__getitem__</snippet></ROW><ROW><id>14729362</id><snippet>2.0[0]</snippet></ROW><ROW><id>14729362</id><snippet>In [14]: df_new = new = pd.DataFrame(s)

In [15]: df_new
Out[15]: 
          0
0 -0.283333
1 -0.275000
2 -0.088333
3  0.335000
4  0.471667

In [16]: type(df_new)
Out[16]: pandas.core.frame.DataFrame
</snippet></ROW><ROW><id>14729362</id><snippet>In [17]: df_new.ix[0]
Out[17]: 
0   -0.283333
Name: 0

In [18]: df_new.ix[0][0]
Out[18]: -0.28333333333333327
</snippet></ROW><ROW><id>14729362</id><snippet>numpy.float64</snippet></ROW><ROW><id>14729362</id><snippet>applymap</snippet></ROW><ROW><id>14729362</id><snippet>df = df.applymap(float)
</snippet></ROW><ROW><id>14729362</id><snippet>NumericType</snippet></ROW><ROW><id>14729851</id><snippet>from gluon.validators import is_empty
from gluon.validators import Validator


class IS_NOT_EMPTY_IF_OTHER(Validator):

    def __init__(self, other,
                 error_message='must be filled because other value '
                               'is present'):
        self.other = other
        self.error_message = error_message

    def __call__(self, value):
        if isinstance(self.other, (list, tuple)):
            others = self.other
        else:
            others = [self.other]

        has_other = False
        for other in others:
            other, empty = is_empty(other)
            if not empty:
                has_other = True
                break
        value, empty = is_empty(value)
        if empty and has_other:
            return (value, T(self.error_message))
        else:
            return (value, None)
</snippet></ROW><ROW><id>14729851</id><snippet>from customvalidator import IS_NOT_EMPTY_IF_OTHER

db.define_table("foo",
    Field('a', 'integer'),
    Field('b', 'boolean'),
    Field('c', 'integer')
)

# apply the validator
db.foo.c.requires = IS_NOT_EMPTY_IF_OTHER(request.vars.b)
</snippet></ROW><ROW><id>14729851</id><snippet>controllers/default.py

def check(form):
    if form.vars.b and not form.vars.c:
        form.errors.c = "If the b is checked, c must be filled"

def action():
    form = SQLFORM(db.foo)
    if form.process(onvalidation=check).accepted:
        response.flash = "success"
    return dict(form=form)
</snippet></ROW><ROW><id>14729857</id><snippet>BigInteger bigInteger = BigInteger.Parse("0D574F480A03D55B33172E9A86CFF6156AC1628C67983193A337B98995151F9B0F41562290DB98697280E805803E4B18914519CEB55CEA5D03A927C28C36A4BC7", NumberStyles.HexNumber);
string s = bigInteger.ToString(); // String with decimal representation.
</snippet></ROW><ROW><id>14729857</id><snippet>0D574...</snippet></ROW><ROW><id>14729992</id><snippet>deprecated</snippet></ROW><ROW><id>14730242</id><snippet>any(x.DeviceID == 'NR0851113' for x in PageNumList)
</snippet></ROW><ROW><id>14730242</id><snippet>next</snippet></ROW><ROW><id>14730242</id><snippet>next(i for i,x in enumerate(PageNumList) if x.DeviceID == 'NR085113')
</snippet></ROW><ROW><id>14730242</id><snippet>StopIteration</snippet></ROW><ROW><id>14730242</id><snippet>StopIteration</snippet></ROW><ROW><id>14730242</id><snippet>next</snippet></ROW><ROW><id>14730242</id><snippet>index = next((i for i,x in enumerate(PageNumList) if x.DeviceID == 'NR085113'),None)
if index is not None:
    ...
</snippet></ROW><ROW><id>14730416</id><snippet>"""spam is an object that supports indexing."""
</snippet></ROW><ROW><id>14730732</id><snippet>label1</snippet></ROW><ROW><id>14730894</id><snippet>.findAll('td', {'class': None})
</snippet></ROW><ROW><id>14730894</id><snippet>&gt;&gt;&gt; results = s.findAll('td', {'class': None})
&gt;&gt;&gt; results
[&lt;td&gt;&lt;span class="lowLight"&gt;24 Months&lt;/span&gt;&lt;/td&gt;, &lt;td&gt;200&lt;/td&gt;, &lt;td&gt;Unlimited&lt;/td&gt;]
</snippet></ROW><ROW><id>14730894</id><snippet>minutes</snippet></ROW><ROW><id>14730894</id><snippet>texts</snippet></ROW><ROW><id>14730894</id><snippet>&gt;&gt;&gt; minutes = results[1]
&gt;&gt;&gt; texts = results[2]
&gt;&gt;&gt; minutes, texts
(&lt;td&gt;200&lt;/td&gt;, &lt;td&gt;Unlimited&lt;/td&gt;)
</snippet></ROW><ROW><id>14731156</id><snippet>def iter_dtest(dtest):
    for i in dtest:
        pass
</snippet></ROW><ROW><id>14731156</id><snippet>def list_dtest(dtest):
    for i in dtest.keys():
        pass
</snippet></ROW><ROW><id>14731156</id><snippet>timeit</snippet></ROW><ROW><id>14731156</id><snippet>Python 2.7.1:
iter_dtest: 3.92487884435s
list_dtest: 6.24848171448s

Python 3.2.1:
iter_dtest: 3.4850587113842555s
list_dtest: 3.535072302413432s
</snippet></ROW><ROW><id>14731156</id><snippet>dtest.keys()</snippet></ROW><ROW><id>14731221</id><snippet>_replace</snippet></ROW><ROW><id>14731221</id><snippet>PageNumList[0] = PageNumList[0]._replace(PicData='hello')
</snippet></ROW><ROW><id>14731221</id><snippet>PageNumList</snippet></ROW><ROW><id>14731221</id><snippet>PicData</snippet></ROW><ROW><id>14731221</id><snippet>namedtuple</snippet></ROW><ROW><id>14731221</id><snippet>tuples</snippet></ROW><ROW><id>14731257</id><snippet>mydata</snippet></ROW><ROW><id>14731257</id><snippet>mydata</snippet></ROW><ROW><id>14731257</id><snippet>cur.executemany(sql, mydata)
</snippet></ROW><ROW><id>14731257</id><snippet>mydata</snippet></ROW><ROW><id>14731257</id><snippet>con.commit()</snippet></ROW><ROW><id>14731257</id><snippet>.executemany()</snippet></ROW><ROW><id>14731257</id><snippet>mydata</snippet></ROW><ROW><id>14731257</id><snippet>FLOAT NOT NULL</snippet></ROW><ROW><id>14731283</id><snippet>&gt;&gt;&gt; a = [ 1, 'replace_this', 4 ]
&gt;&gt;&gt; a[1:2] = [2, 3]
&gt;&gt;&gt; a
[1, 2, 3, 4]
</snippet></ROW><ROW><id>14731283</id><snippet>a.index</snippet></ROW><ROW><id>14731283</id><snippet>itertools.chain</snippet></ROW><ROW><id>14731283</id><snippet>replacements</snippet></ROW><ROW><id>14731283</id><snippet>from itertools import chain

replacements = {
    'replace_this': [2, 3],
    4: [7, 8, 9]
}

a = [ 1, 'replace_this', 4 ]
print list(chain.from_iterable(replacements.get(el, [el]) for el in a))
# [1, 2, 3, 7, 8, 9]
</snippet></ROW><ROW><id>14731840</id><snippet>td</snippet></ROW><ROW><id>14731840</id><snippet>print soup('td',{'id':'event'})
</snippet></ROW><ROW><id>14731840</id><snippet>td</snippet></ROW><ROW><id>14731840</id><snippet>print soup('td',{'id':'event'})[0].contents[0]
</snippet></ROW><ROW><id>14731958</id><snippet>test[test.TRAINER_MANAGING.str.contains('Han').fillna(False)]
</snippet></ROW><ROW><id>14731958</id><snippet>       ID ENROLLMENT_DATE    TRAINER_MANAGING    TRAINER_OPERATOR FIRST_VISIT_DATE
2    8096        8-Aug-12  0643D38-Hanover NH  0643D38-Hanover NH        25-Jun-12
3    A036        1-Apr-12  06CB8CF-Hanover NH  06CB8CF-Hanover NH         9-Aug-12
4    8944       19-Feb-12  06D26AD-Hanover NH                 NaN         4-Feb-12
7    30D7       11-Nov-12  06D95A3-Hanover NH  06D95A3-Hanover NH        30-Nov-11
10  127A1       11-Dec-11  064456E-Hanover NH  064456E-Hanover NH        11-Nov-12
11  161FF       20-Feb-12  0643D38-Hanover NH  0643D38-Hanover NH         3-Jul-12
13   475B       25-Sep-12  06D26AD-Hanover NH                 NaN         5-Nov-12
19  14E48        1-Aug-12  06D3206-Hanover NH                 NaN              NaN
21   553E       11-Oct-12  06D95A3-Hanover NH  06D95A3-Hanover NH         8-Mar-12
24  11795       27-Feb-12  0643D38-Hanover NH  0643D38-Hanover NH        19-Jun-12
26   A036       11-Aug-12  06D3206-Hanover NH                 NaN        19-Jun-12
</snippet></ROW><ROW><id>14732212</id><snippet>def update_some_row():
    some = db.some(request.vars["id"]) or redirect(URL('error'))
    column = {request.vars["columnName"].lower():request.vars["value"]}
    some.update_record(**column)
    return request.vars["value"]
</snippet></ROW><ROW><id>14732375</id><snippet>HttpResponseServerError</snippet></ROW><ROW><id>14732375</id><snippet>HttpResponse</snippet></ROW><ROW><id>14732375</id><snippet>class HttpResponseServerError(HttpResponse):
    status_code = 500
</snippet></ROW><ROW><id>14732375</id><snippet>HttpResponse</snippet></ROW><ROW><id>14732375</id><snippet>def __init__(self, content='', *args, **kwargs):
    super(HttpResponse, self).__init__(*args, **kwargs)
    # Content is a bytestring. See the `content` property methods.
    self.content = content
</snippet></ROW><ROW><id>14732375</id><snippet>content</snippet></ROW><ROW><id>14732375</id><snippet>def server_error(request, template_name='500.html'):
    """
    500 error handler.

    Templates: :template:`500.html`
    Context: None
    """
    try:
        template = loader.get_template(template_name)
    except TemplateDoesNotExist:
        return http.HttpResponseServerError('&lt;h1&gt;Server Error (500)&lt;/h1&gt;')
    return http.HttpResponseServerError(template.render(Context({})))
</snippet></ROW><ROW><id>14732375</id><snippet>HttpResponseServerError</snippet></ROW><ROW><id>14732704</id><snippet>import django.db.backends.util


class PrintQueryWrapper(django.db.backends.util.CursorDebugWrapper):
    user_id = None
    def execute(self, sql, params=()):
        try:
            return self.cursor.execute(sql, params)
        finally:
            print self.user_id, ": ", sql   

class PrintQueryMiddleware(object):
    def process_request(self, request): 
        PrintQueryWrapper.user_id = request.user.pk
        django.db.backends.util.CursorDebugWrapper = PrintQueryWrapper
</snippet></ROW><ROW><id>14732704</id><snippet>MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'main.middleware.PrintQueryMiddleware',         # chnage path to your app
)
</snippet></ROW><ROW><id>14732769</id><snippet>X-GOOGLE-TOKEN</snippet></ROW><ROW><id>14732769</id><snippet>go-xmpp</snippet></ROW><ROW><id>14732845</id><snippet>import win32com.client
xl=win32com.client.Dispatch("Excel.Application")
xl.Workbooks.Open(Filename="c:\\temp\\book1.xls",ReadOnly=1)
xl.Application.Run("setA1", '4')
res = xl.Application.Run("getA1")
print res
xl = 0
</snippet></ROW><ROW><id>14732847</id><snippet>open()</snippet></ROW><ROW><id>14732847</id><snippet>with open(os.path.expanduser('~/file')) as inputfile:
    for eachLine in inputfile:
        print eachLine
</snippet></ROW><ROW><id>14732847</id><snippet>with</snippet></ROW><ROW><id>14733275</id><snippet>return lis
</snippet></ROW><ROW><id>14733275</id><snippet>sort_and_count</snippet></ROW><ROW><id>14733275</id><snippet>left,c1=sort_and_count(lis[:middle],count)</snippet></ROW><ROW><id>14733275</id><snippet>return m,c
</snippet></ROW><ROW><id>14733368</id><snippet>file_path_utf8 = "/path/to/file/file_name_original.txt"
file_path_ansi = "/path/to/file/file_name_ansi.txt"

#open and encode the original content
file_source = open(file_path_utf8, mode='r', encoding='utf-8', errors='ignore')
file_content = file_source.read()
file_source.close

#write the UTF8 file with the encoded content
file_target = open(file_path_ansi, mode='w', encoding='latin-1')
file_target.write(file_content)
file_target.close
</snippet></ROW><ROW><id>14733368</id><snippet>latin-1</snippet></ROW><ROW><id>14733368</id><snippet>iso-8859-15</snippet></ROW><ROW><id>14733368</id><snippet>ascii</snippet></ROW><ROW><id>14733427</id><snippet>[&lt;h2&gt;(.+?)&lt;/h2&gt;\s+]
</snippet></ROW><ROW><id>14733427</id><snippet>[&lt;&gt;h2()+.?/\s]
</snippet></ROW><ROW><id>14733557</id><snippet>bin/activate</snippet></ROW><ROW><id>14733557</id><snippet>VIRTUAL_ENV="/Users/me/.envs/myenv"
export VIRTUAL_ENV
</snippet></ROW><ROW><id>14733557</id><snippet>VIRTUAL_ENV</snippet></ROW><ROW><id>14733557</id><snippet>os.environ</snippet></ROW><ROW><id>14733577</id><snippet>#in?</snippet></ROW><ROW><id>14733577</id><snippet>#include?</snippet></ROW><ROW><id>14733597</id><snippet>filter</snippet></ROW><ROW><id>14733597</id><snippet>len(filter(crit, a))</snippet></ROW><ROW><id>14733805</id><snippet>plt.ion()</snippet></ROW><ROW><id>14733963</id><snippet>from itertools import groupby
from operator import itemgetter

with open('somefile') as fin:
    lines = (line.split() for line in fin)
    for key, items in groupby(lines, itemgetter(1)):
        print list(items)

[['12', 'fish'], ['50', 'fish']]
[['1', 'turtle']]
[['11', 'dog'], ['34', 'dog'], ['12', 'dog']]
</snippet></ROW><ROW><id>14734053</id><snippet>assert bool(command()) != False
</snippet></ROW><ROW><id>14734116</id><snippet>.pyc</snippet></ROW><ROW><id>14734116</id><snippet>python -c "import myscript"
</snippet></ROW><ROW><id>14734116</id><snippet>python myscript.py
</snippet></ROW><ROW><id>14734148</id><snippet>In [11]: df.sort([('Group1', 'C')], ascending=False)
Out[11]: 
  Group1       Group2      
       A  B  C      A  B  C
2      5  6  9      1  0  0
1      1  0  3      2  5  7
3      7  0  2      0  3  5
</snippet></ROW><ROW><id>14734172</id><snippet>unicode</snippet></ROW><ROW><id>14734172</id><snippet>acct    = rec[ 84:104 ].decode('latin1')
</snippet></ROW><ROW><id>14734172</id><snippet>codecs.open()</snippet></ROW><ROW><id>14734172</id><snippet>inputfile = codecs.open(filename, 'r', encoding='latin1')
</snippet></ROW><ROW><id>14734172</id><snippet>inputfile</snippet></ROW><ROW><id>14734172</id><snippet>unicode</snippet></ROW><ROW><id>14734172</id><snippet>cx_Oracle</snippet></ROW><ROW><id>14734172</id><snippet>unicode</snippet></ROW><ROW><id>14734172</id><snippet>NLS_LANG</snippet></ROW><ROW><id>14734172</id><snippet>AL32UTF8</snippet></ROW><ROW><id>14734172</id><snippet>os.environ["NLS_LANG"] = ".AL32UTF8"
</snippet></ROW><ROW><id>14734240</id><snippet>i</snippet></ROW><ROW><id>14734240</id><snippet>i</snippet></ROW><ROW><id>14734240</id><snippet>0</snippet></ROW><ROW><id>14734349</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/home/jon'

&gt;&gt;&gt; open('testing.txt')
&lt;open file 'testing.txt', mode 'r' at 0x7f86e140edb0&gt;
</snippet></ROW><ROW><id>14734349</id><snippet>jon@forseti:~$ cd /srv
jon@forseti:/srv$ idle

&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/srv'
&gt;&gt;&gt; open('testing.txt')

Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    open('testing.txt')
IOError: [Errno 2] No such file or directory: 'testing.txt'
</snippet></ROW><ROW><id>14734460</id><snippet>("&lt;name&gt;", { "&lt;child1&gt;" : ..., "&lt;child2&gt;" })</snippet></ROW><ROW><id>14734460</id><snippet>("&lt;name&gt;", [{"&lt;child1&gt;" : ... }, { "&lt;child2&gt;": ... }])</snippet></ROW><ROW><id>14734460</id><snippet>("&lt;name&gt;", [{"&lt;child1&gt;" : ... }, { "&lt;child2&gt;": ..., "&lt;child3&gt;": ... }])</snippet></ROW><ROW><id>14734460</id><snippet>def transform_node(name, val):
    if isinstance(val, list):
        val = ("children", [transform_node(k,v) for x in val for k, v in x.items()])
    elif isinstance(val, dict):
        val = ("children", [transform_node(*kv) for kv in val.items()])
    else:
        val = ("value", val)
    return dict([("name", name), val])
</snippet></ROW><ROW><id>14734460</id><snippet>&gt;&gt;&gt; transform_node("a", 3)
{'name': 'a', 'value': 3}
&gt;&gt;&gt; transform_node("a", { "c1" : 3, "c2" : 4 })
{'name': 'a', 'children': [{'name': 'c2', 'value': 4}, {'name': 'c1', 'value': 3}]}
&gt;&gt;&gt; transform_node("a", [{ "c1" : 3 }, { "c2" : 4, "c3": 5 }])
{'name': 'a', 'children': [{'name': 'c1', 'value': 3}, {'name': 'c3', 'value': 5}, {'name': 'c2', 'value': 4}]}
</snippet></ROW><ROW><id>14734460</id><snippet>&gt;&gt;&gt; tree = { "a": { "b": 1 }}
&gt;&gt;&gt; transform_node("root", tree)
{'name': 'root', 'children': [{'name': 'a', 'children': [{'name': 'b', 'value': 1}]}]}
</snippet></ROW><ROW><id>14734491</id><snippet>l = [ f._raw_value('type') for f in formset_sample.forms ]
l.count('2') # I am assuming 2 is a string, or
l.count(2)   # if the number is stored as an integer
</snippet></ROW><ROW><id>14734491</id><snippet>l</snippet></ROW><ROW><id>14734597</id><snippet>allLinks</snippet></ROW><ROW><id>14734597</id><snippet>page_title</snippet></ROW><ROW><id>14734597</id><snippet>&gt;&gt;&gt; allLinks = {'Send or Edit Messages': {'link':'/InformaCast/admin?cmd=listMessages',   'page_title': 'Messages: Send or Edit Messages'}}
&gt;&gt;&gt; allLinks['page_title']                                                                                                      
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'page_title'
</snippet></ROW><ROW><id>14734597</id><snippet>&gt;&gt;&gt; allLinks['Send or Edit Messages']['page_title']
'Messages: Send or Edit Messages'
</snippet></ROW><ROW><id>14734597</id><snippet>page_title</snippet></ROW><ROW><id>14734597</id><snippet>'Send or Edit Messages'</snippet></ROW><ROW><id>14734597</id><snippet>&gt;&gt;&gt; page_title = 'Send or Edit Messages'
&gt;&gt;&gt; allLinks[page_title]['link']
'/InformaCast/admin?cmd=listMessages'
</snippet></ROW><ROW><id>14734597</id><snippet>allLinks</snippet></ROW><ROW><id>14734597</id><snippet>for href_link in hrefs:
    for page_title in ICData.allLinks:
        if href_link.find(ICData.allLinks[page_title]['link'])!=-1:
            self.logger.debug("verify_links found=True for " + str(href_link))
            found=True
</snippet></ROW><ROW><id>14734627</id><snippet>get_group</snippet></ROW><ROW><id>14734627</id><snippet>In [21]: gb.get_group('foo')
Out[21]: 
     A         B   C
0  foo  1.624345   5
2  foo -0.528172  11
4  foo  0.865408  14
</snippet></ROW><ROW><id>14734650</id><snippet>str.split</snippet></ROW><ROW><id>14734650</id><snippet>with open(file) as fin:
     rows = ( line.split('\t') for line in fin )
     d = { row[0]:row[1:] for row in rows }
</snippet></ROW><ROW><id>14734708</id><snippet>path = iter.get_selected_rows()[0]
</snippet></ROW><ROW><id>14734708</id><snippet>index = path.get_indices()[0]
</snippet></ROW><ROW><id>14734923</id><snippet>request.params.getall('c')
</snippet></ROW><ROW><id>14735091</id><snippet>zfill</snippet></ROW><ROW><id>14735091</id><snippet>hours = [time.strptime(i[:-1].zfill(4), "%H%M") for i in a]
</snippet></ROW><ROW><id>14735091</id><snippet>i[:-1]</snippet></ROW><ROW><id>14735091</id><snippet>.zfill(4)</snippet></ROW><ROW><id>14735091</id><snippet>0</snippet></ROW><ROW><id>14735091</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; a = ['800.', '830.', '900.', '30.']
&gt;&gt;&gt; [time.strptime(i[:-1].zfill(4), "%H%M") for i in a]
[time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=9, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)]
</snippet></ROW><ROW><id>14735091</id><snippet>format()</snippet></ROW><ROW><id>14735091</id><snippet>&gt;&gt;&gt; format(800., '04.0f')
'0800'
</snippet></ROW><ROW><id>14735091</id><snippet>hours = [time.strptime(format(i % 2400, '04.0f'), "%H%M") for i in a]
</snippet></ROW><ROW><id>14735091</id><snippet>% 2400</snippet></ROW><ROW><id>14735330</id><snippet>cStringIO.InputType</snippet></ROW><ROW><id>14735330</id><snippet>cStringIO.OutputType</snippet></ROW><ROW><id>14735330</id><snippet>&gt;&gt;&gt; import cStringIO
&gt;&gt;&gt; s = cStringIO.StringIO('output')
&gt;&gt;&gt; isinstance(s, cStringIO.InputType)
True
&gt;&gt;&gt; s = cStringIO.StringIO()
&gt;&gt;&gt; isinstance(s, cStringIO.OutputType)
True
</snippet></ROW><ROW><id>14735331</id><snippet>images = [
            (1, u'True', u'file_one.jpg', u'2013'),
            (2, u'False', u'file_two.jpg', u'2012'),
]
</snippet></ROW><ROW><id>14735331</id><snippet>[
    (1,'file_one.jpg'), 
    (2,'file_two.jpg')
]
</snippet></ROW><ROW><id>14735331</id><snippet>rows = [(str(x[0]), x) for x in images]
form.images.choices = rows
</snippet></ROW><ROW><id>14735331</id><snippet>[
    (1, (1, u'True', u'file_one.jpg', u'2013')), 
    (2, (2, u'False', u'file_two.jpg', u'2012'))
]
</snippet></ROW><ROW><id>14735331</id><snippet>rows = [(x[0],x[2]) for x in images]
</snippet></ROW><ROW><id>14735331</id><snippet>rows = [(x[0], "\t|".join([str(y) for y in x])) for x in images]
</snippet></ROW><ROW><id>14735331</id><snippet>[
    (1, '1\t|True\t|file_one.jpg\t|2013'), 
    (2, '2\t|False\t|file_two.jpg\t|2012')
]
</snippet></ROW><ROW><id>14735628</id><snippet>i = len(x) - 1
while i &gt; 0:
    j = randint(0, i)
    x[i], x[j] = x[j], x[i]
    i = i - 1
</snippet></ROW><ROW><id>14735769</id><snippet>df_result = pd.DataFrame(ts, columns=['value'])
</snippet></ROW><ROW><id>14735769</id><snippet>ts</snippet></ROW><ROW><id>14735769</id><snippet>def get_col_name(row):    
    b = (df.ix[row.name] == row['value'])
    return b.index[b.argmax()]
</snippet></ROW><ROW><id>14735769</id><snippet>apply</snippet></ROW><ROW><id>14735769</id><snippet>In [3]: df_result.apply(get_col_name, axis=1)
Out[3]: 
1979-01-01 00:00:00    col5
1979-01-01 06:00:00    col3
1979-01-01 12:00:00    col1
1979-01-01 18:00:00    col1
</snippet></ROW><ROW><id>14735769</id><snippet>df_result['Column'] = df_result.apply(get_col_name, axis=1)</snippet></ROW><ROW><id>14735769</id><snippet>get_col_name</snippet></ROW><ROW><id>14735769</id><snippet>In [4]: row = df_result.irow(0) # an example row to pass to get_col_name

In [5]: row
Out[5]: 
value    1181.220328
Name: 1979-01-01 00:00:00

In [6]: row.name # use to get rows of df
Out[6]: &lt;Timestamp: 1979-01-01 00:00:00&gt;

In [7]: df.ix[row.name]
Out[7]: 
col5    1181.220328
col4     912.154923
col3     648.848635
col2     390.986156
col1     138.185861
Name: 1979-01-01 00:00:00

In [8]: b = (df.ix[row.name] == row['value'])
        #checks whether each elements equal row['value'] = 1181.220328  

In [9]: b
Out[9]: 
col5     True
col4    False
col3    False
col2    False
col1    False
Name: 1979-01-01 00:00:00

In [10]: b.argmax() # index of a True value
Out[10]: 0

In [11]: b.index[b.argmax()] # the index value (column name)
Out[11]: 'col5'
</snippet></ROW><ROW><id>14735906</id><snippet>window.set_fullscreen(fullscreen=True,screen=experiment_screen)</snippet></ROW><ROW><id>14735915</id><snippet>set.issubset</snippet></ROW><ROW><id>14735915</id><snippet>if set(user_string.split('*')).issubset(viable_entries):
     ...
</snippet></ROW><ROW><id>14735915</id><snippet>True</snippet></ROW><ROW><id>14735915</id><snippet>"this*this"</snippet></ROW><ROW><id>14735915</id><snippet>len(set)</snippet></ROW><ROW><id>14735915</id><snippet>entries = user_string.split('*')
if set(entries).issubset(viable_entries) and len(set(entries)) == len(entries):
     ...
</snippet></ROW><ROW><id>14735992</id><snippet>json</snippet></ROW><ROW><id>14735992</id><snippet>import json

import urllib2
response = urllib2.urlopen('http://api.xyz.com')
data = json.load(response)  # note, no `.read()`, the library handles that

print data['response']
</snippet></ROW><ROW><id>14736129</id><snippet>Task</snippet></ROW><ROW><id>14736129</id><snippet>BaseTask</snippet></ROW><ROW><id>14736129</id><snippet>class BaseTask(object):
    '''change object to BaseProject whenever you figure out what your `Project`
    class should be, or if you need it at all'''

    def __init__(self, title):
        self.title = title
        self.description=""

class Task(BaseTask):
    def __init__(self, title):
        super(Task, self).__init__(title)
        self.subtasks = []
        self.default_hours = 1

    @property
    def hours(self):
        if len(self.subtasks) &lt; 1:
            return self.default_hours
        return sum(subtask.hours for subtask in self.subtasks)

class SubTask(BaseTask):
    def __init__(self, title):
        super(SubTask, self).__init__(title)
        self.hours = 0
</snippet></ROW><ROW><id>14736129</id><snippet>Task</snippet></ROW><ROW><id>14736129</id><snippet>SubTask</snippet></ROW><ROW><id>14736129</id><snippet>BaseTask</snippet></ROW><ROW><id>14736129</id><snippet>Task</snippet></ROW><ROW><id>14736129</id><snippet>SubTask</snippet></ROW><ROW><id>14736200</id><snippet>MessageNet</snippet></ROW><ROW><id>14736200</id><snippet>receive</snippet></ROW><ROW><id>14736249</id><snippet>subprocess.check_call(['java', '-jar', 'foo.jar'], stdout=subprocess.DEVNULL)
</snippet></ROW><ROW><id>14736249</id><snippet>os.devnull</snippet></ROW><ROW><id>14736249</id><snippet>subprocess</snippet></ROW><ROW><id>14736249</id><snippet>with open(os.devnull, 'w') as devnull:
    subprocess.check_call(['java', '-jar', 'foo.jar'], stdout=devnull)
</snippet></ROW><ROW><id>14736249</id><snippet>devnull</snippet></ROW><ROW><id>14736249</id><snippet>Popen</snippet></ROW><ROW><id>14736249</id><snippet>with</snippet></ROW><ROW><id>14736249</id><snippet>/dev/null</snippet></ROW><ROW><id>14736249</id><snippet>NUL:</snippet></ROW><ROW><id>14736249</id><snippet>subprocess</snippet></ROW><ROW><id>14736249</id><snippet>os.devnull</snippet></ROW><ROW><id>14736340</id><snippet>//div/node()[string-length(following-sibling::node()/text()) &lt; string-length(text())]</snippet></ROW><ROW><id>14736340</id><snippet>//div/node()[string-length(following-sibling::node()/text()) &lt; string-length(./text()) and not(string-length(preceding-sibling::node()/text()) &gt; string-length(./text()))]
</snippet></ROW><ROW><id>14736340</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>14736403</id><snippet>500,1000,10000</snippet></ROW><ROW><id>14736403</id><snippet>SNP = next(DataReader)
</snippet></ROW><ROW><id>14736403</id><snippet>SNP = []
for row in DataReader:
    SNP.append(row[0])
</snippet></ROW><ROW><id>14736403</id><snippet>SNP</snippet></ROW><ROW><id>14736403</id><snippet>[500, 1000, 15000]</snippet></ROW><ROW><id>14736445</id><snippet>dist={}
ex='The rain in Spain stays mainly in the plain.'
for ch in ex.lower():
    if ch.isalpha(): dist.setdefault(ch,[]).extend(ch)

out={k:''.join(val) for k,val in dist.iteritems()}.values()
print '\n'.join(sorted(out, key=lambda x: (-len(x),x)))
</snippet></ROW><ROW><id>14736445</id><snippet>iiiiii
nnnnnn
aaaaa
sss
ttt
ee
hh
ll
pp
yy
m
r
</snippet></ROW><ROW><id>14736507</id><snippet>myparser.py</snippet></ROW><ROW><id>14736507</id><snippet>class CKParser(object)
....whatever
</snippet></ROW><ROW><id>14736507</id><snippet>server.py</snippet></ROW><ROW><id>14736507</id><snippet>from myparser import CKParser
</snippet></ROW><ROW><id>14736846</id><snippet>gevent</snippet></ROW><ROW><id>14736846</id><snippet>gevent</snippet></ROW><ROW><id>14736846</id><snippet>gevent</snippet></ROW><ROW><id>14736846</id><snippet>multiprocessing</snippet></ROW><ROW><id>14736846</id><snippet>gevent</snippet></ROW><ROW><id>14736846</id><snippet>multiprocessing</snippet></ROW><ROW><id>14736920</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
hr {
page-break-before: always;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;
report 1 text 
here
&lt;/pre&gt;
&lt;hr&gt;
&lt;pre&gt;
report 2 
text here
&lt;/pre&gt;
&lt;hr&gt;
&lt;pre&gt;
report 
3 text here
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14736920</id><snippet>.html</snippet></ROW><ROW><id>14736920</id><snippet>&lt;hr&gt;</snippet></ROW><ROW><id>14736925</id><snippet>mp.Pipe</snippet></ROW><ROW><id>14736925</id><snippet>mp.Queue</snippet></ROW><ROW><id>14736925</id><snippet>def process_data(self):
    for tab in self.tab_list:
        consumer, producer = mp.Pipe()
        process_list.append(mp.Process(target=process_and_fit, args=(producer,)))
        process_list[-1].start()
        while (true):
            message = consumer.recv()  # blocks
            if message == 'done':
                break
            # tab.spectra.X, tab.spectra.model = message
            tab.refreshFigure()
        process_list[-1].join()
    return

def process_and_fit(pipe_conn):
    ...
    pipe_conn.send('done')

def residual(params, pipe_conn):
    residual_array = Y - model
    pipe_conn.send('refresh')  # or replace 'refresh' with (X, model)
    return residual_array
</snippet></ROW><ROW><id>14736925</id><snippet>consumer.recv()</snippet></ROW><ROW><id>14736925</id><snippet>QThread</snippet></ROW><ROW><id>14737080</id><snippet>Tkinter</snippet></ROW><ROW><id>14737080</id><snippet>PyObjC</snippet></ROW><ROW><id>14737080</id><snippet>wx</snippet></ROW><ROW><id>14737080</id><snippet>gobject</snippet></ROW><ROW><id>14737080</id><snippet>Qt</snippet></ROW><ROW><id>14737080</id><snippet>print</snippet></ROW><ROW><id>14737080</id><snippet>logging</snippet></ROW><ROW><id>14737080</id><snippet>log.info</snippet></ROW><ROW><id>14737080</id><snippet>stdout</snippet></ROW><ROW><id>14737080</id><snippet>stderr</snippet></ROW><ROW><id>14737080</id><snippet>print</snippet></ROW><ROW><id>14737080</id><snippet>printfunc</snippet></ROW><ROW><id>14737080</id><snippet>textwidget.append(msg)</snippet></ROW><ROW><id>14737080</id><snippet>call_on_main_thread</snippet></ROW><ROW><id>14737080</id><snippet>printfunc</snippet></ROW><ROW><id>14737080</id><snippet>call_on_main_thread(textwidget.append, msg)</snippet></ROW><ROW><id>14737080</id><snippet>workerThread</snippet></ROW><ROW><id>14737080</id><snippet>self.endApplication()</snippet></ROW><ROW><id>14737080</id><snippet>wx</snippet></ROW><ROW><id>14737080</id><snippet>SafeYield</snippet></ROW><ROW><id>14737080</id><snippet>root.after_idle(nextfunc)</snippet></ROW><ROW><id>14737080</id><snippet>py2app</snippet></ROW><ROW><id>14737080</id><snippet>Foo.app/Contents/MacOS/Foo</snippet></ROW><ROW><id>14737080</id><snippet>open Foo.app</snippet></ROW><ROW><id>14737080</id><snippet>Foo.command</snippet></ROW><ROW><id>14737080</id><snippet>$(dirname $0)/Foo.app/Contents/MacOS/Foo</snippet></ROW><ROW><id>14737080</id><snippet>logging</snippet></ROW><ROW><id>14737080</id><snippet>Console.app</snippet></ROW><ROW><id>14737080</id><snippet>py2app</snippet></ROW><ROW><id>14737080</id><snippet>Foo.command</snippet></ROW><ROW><id>14737080</id><snippet>.command</snippet></ROW><ROW><id>14737080</id><snippet>.app</snippet></ROW><ROW><id>14737195</id><snippet>format()</snippet></ROW><ROW><id>14737195</id><snippet>def wind_chill(temp, wind_speed):
    """ Compute wind chill given temperature and wind speed if the temperature 
        is 50 degrees Fahrenheit or less and the wind speed is above 3 mph,
        otherwise return 'nan' (not-a-number) because it's undefined otherwise.
    """
    return (35.74 + (0.6215 * temp) - 35.75 * (wind_speed ** 0.16)
            + 0.4275 * temp * (wind_speed ** 0.16)
            if temp &lt;= 50 and wind_speed &gt; 3 else float('nan'))

def main():
    # print table header
    temps = xrange(-20, 70, 10)
    num_temps = len(temps)
    data = [" "] + [temp for temp in temps]
    print ("{:3s}" + num_temps * " {:5d}").format(*data)
    data = [" "] + num_temps * [5 * "-"]
    print ("{:3s}" + num_temps * " {:5s}").format(*data)

    # print table rows
    row_format_string = "{:3d}" + num_temps * " {:5.1F}"
    for wind_speed in xrange(0, 35, 5):
        data = [wind_speed] + [wind_chill(temp, wind_speed) for temp in temps]
        print row_format_string.format(*data)

main()
</snippet></ROW><ROW><id>14737195</id><snippet>      -20   -10     0    10    20    30    40    50    60
    ----- ----- ----- ----- ----- ----- ----- ----- -----
  0   NAN   NAN   NAN   NAN   NAN   NAN   NAN   NAN   NAN
  5 -34.0 -22.3 -10.5   1.2  13.0  24.7  36.5  48.2   NAN
 10 -40.7 -28.3 -15.9  -3.5   8.9  21.2  33.6  46.0   NAN
 15 -45.0 -32.2 -19.4  -6.6   6.2  19.0  31.8  44.6   NAN
 20 -48.2 -35.1 -22.0  -8.9   4.2  17.4  30.5  43.6   NAN
 25 -50.8 -37.5 -24.1 -10.7   2.6  16.0  29.4  42.8   NAN
 30 -53.0 -39.4 -25.9 -12.3   1.3  14.9  28.5  42.0   NAN
</snippet></ROW><ROW><id>14737242</id><snippet>In [1]: ','.join('Hello')
Out[1]: 'H,e,l,l,o'
</snippet></ROW><ROW><id>14737301</id><snippet>choice=</snippet></ROW><ROW><id>14737301</id><snippet>choice_text=</snippet></ROW><ROW><id>14737301</id><snippet># Create three choices.
&gt;&gt;&gt; p.choice_set.create(choice='Not much', votes=0)
&lt;Choice: Not much&gt;
&gt;&gt;&gt; p.choice_set.create(choice='The sky', votes=0)
&lt;Choice: The sky&gt;
</snippet></ROW><ROW><id>14737301</id><snippet>class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice = models.CharField(max_length=200)
    votes = models.IntegerField()
</snippet></ROW><ROW><id>14737301</id><snippet>choice_set.create()</snippet></ROW><ROW><id>14737301</id><snippet>Choice</snippet></ROW><ROW><id>14737301</id><snippet>p</snippet></ROW><ROW><id>14737301</id><snippet>poll</snippet></ROW><ROW><id>14737301</id><snippet>choice=</snippet></ROW><ROW><id>14737301</id><snippet>choice</snippet></ROW><ROW><id>14737301</id><snippet>votes=</snippet></ROW><ROW><id>14737301</id><snippet>votes</snippet></ROW><ROW><id>14737320</id><snippet>buttons = soup.findAll('span', {'class': 'button'})
for button in buttons:
  button.nextSibling
</snippet></ROW><ROW><id>14737320</id><snippet>nextSibling</snippet></ROW><ROW><id>14737320</id><snippet>next_sibling</snippet></ROW><ROW><id>14737320</id><snippet>&lt;span class="button"&gt;
0.87
&lt;/span&gt;
</snippet></ROW><ROW><id>14737523</id><snippet>for x in L:
    print x
</snippet></ROW><ROW><id>14737523</id><snippet>list(L)
</snippet></ROW><ROW><id>14737616</id><snippet>app.secret_key = os.urandom(32)
</snippet></ROW><ROW><id>14737757</id><snippet>os.mkdir()</snippet></ROW><ROW><id>14737757</id><snippet>direc</snippet></ROW><ROW><id>14737757</id><snippet>direc = save + i + "-"+ j +"-" + k + "-" +l
os.mkdir(direc)
</snippet></ROW><ROW><id>14737757</id><snippet>os.path.join()</snippet></ROW><ROW><id>14737757</id><snippet>save = "/root/foo"
PERF_PATH="/root/foobar"

direc = os.path.join(save, '-'.join((i, j, k, l)))
os.mkdir(direc)
</snippet></ROW><ROW><id>14737757</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>14737757</id><snippet>shell</snippet></ROW><ROW><id>14737757</id><snippet>False</snippet></ROW><ROW><id>14737757</id><snippet>cmd = ['taskset', 
    '-c', cpus_list[a], PERF_PATH, 'perf2', 'stat',
    '-t', fpid[a], 'e', 'r4008387e1',
    '-f', '-o', save, 
    os.path.join(direc, "%s.csv" % apps[a])
]

pro = subprocess.Popen(cmd, stdout=subprocess.PIPE, preexec_fn=os.setsid)
</snippet></ROW><ROW><id>14737918</id><snippet>-p</snippet></ROW><ROW><id>14737918</id><snippet>/etc/init.d</snippet></ROW><ROW><id>14737925</id><snippet>from string import *
</snippet></ROW><ROW><id>14737925</id><snippet>string.count</snippet></ROW><ROW><id>14737925</id><snippet>&gt;&gt;&gt; print string.count.__doc__
count(s, sub[, start[,end]]) -&gt; int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
</snippet></ROW><ROW><id>14737925</id><snippet>count</snippet></ROW><ROW><id>14737925</id><snippet>&gt;&gt;&gt; 'aaa'.count('a')
3
</snippet></ROW><ROW><id>14737925</id><snippet>string</snippet></ROW><ROW><id>14737925</id><snippet>count</snippet></ROW><ROW><id>14738089</id><snippet>f2</snippet></ROW><ROW><id>14738089</id><snippet>f2.seek(0, 0)</snippet></ROW><ROW><id>14738089</id><snippet>f2</snippet></ROW><ROW><id>14738089</id><snippet>set</snippet></ROW><ROW><id>14738089</id><snippet>f1</snippet></ROW><ROW><id>14738089</id><snippet>f2s = {line.strip('\n') for line in f2}

for line in f1:
    name = line.strip('\n') # No need for \r\n
    if name in f2s:
        # etc.
</snippet></ROW><ROW><id>14738089</id><snippet>f1</snippet></ROW><ROW><id>14738089</id><snippet>f2</snippet></ROW><ROW><id>14738089</id><snippet>Counter</snippet></ROW><ROW><id>14738089</id><snippet>from collections import Counter
f2c = Counter(line.strip('\n') for line in f2)

for line in f1:
    name = line.strip('\n')
    if name in f2c:
        count = f2c[name]
</snippet></ROW><ROW><id>14738175</id><snippet>hexbin</snippet></ROW><ROW><id>14738175</id><snippet>ployCollection</snippet></ROW><ROW><id>14738175</id><snippet>hexbin</snippet></ROW><ROW><id>14738175</id><snippet>imshow</snippet></ROW><ROW><id>14738175</id><snippet>hexbin</snippet></ROW><ROW><id>14738175</id><snippet>polyCollection</snippet></ROW><ROW><id>14738433</id><snippet>intersphinx_mapping</snippet></ROW><ROW><id>14738433</id><snippet>:ref:`comparison manual &lt;python:comparisons&gt;`
</snippet></ROW><ROW><id>14738882</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.2,0.4])
y = np.array([0.2,1.2])
r = np.array([0.5,0.3])

phi = np.linspace(0.0,2*np.pi,100)

na=np.newaxis

# the first axis of these arrays varies the angle, 
# the second varies the circles
x_line = x[na,:]+r[na,:]*np.sin(phi[:,na])
y_line = y[na,:]+r[na,:]*np.cos(phi[:,na])

plt.plot(x_line,y_line,'-')
plt.show()
</snippet></ROW><ROW><id>14738882</id><snippet>plt.plot(...)</snippet></ROW><ROW><id>14738905</id><snippet>date = 20121228
from datetime import datetime, timedelta
dt = datetime.strptime(str(date), "%Y%m%d").date() + timedelta(days=5)
print datetime.strftime(dt, "%Y%m%d")
</snippet></ROW><ROW><id>14738974</id><snippet>for</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>for each value in the list ['a', 'b', 'c', 'd']: 
    instantiate a new variable, i, pointing to the current list member
    instantiate a new anonymous function, which returns i
    append this function to cons
</snippet></ROW><ROW><id>14738974</id><snippet>instantiate a new variable i
for each value in the list ['a', 'b', 'c', 'd']: 
    make i refer to the current list member
    instantiate a new anonymous function, which returns i
    append this function to cons
</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>'d'</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>append</snippet></ROW><ROW><id>14738974</id><snippet>lambda</snippet></ROW><ROW><id>14738974</id><snippet>i</snippet></ROW><ROW><id>14738974</id><snippet>'d'</snippet></ROW><ROW><id>14739049</id><snippet>In [664]: f = open("/dev/random", "rb")
In [665]: len(set(f.read(256)))
Out[665]: 169


In [666]: ff = open("/dev/urandom", "rb")
In [667]: len(set(ff.read(256)))
Out[667]: 167


In [669]: len(set(f.read(512)))
Out[669]: 218

In [670]: len(set(ff.read(512)))
Out[670]: 224
</snippet></ROW><ROW><id>14739050</id><snippet>db = Document._get_db()
client_count = db.command("serverStatus")["connections"]['current'] - 1
</snippet></ROW><ROW><id>14739115</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>14739115</id><snippet>import os
xml_files.sort(key=os.path.getmtime)
print xml_files[-1] # most recent file
</snippet></ROW><ROW><id>14739133</id><snippet>data = {"variable": ["a", "b", "c"] }
</snippet></ROW><ROW><id>14739133</id><snippet>import json

function changeDate()
  id = 5
  variable = ["bla", "ble", "bli", "blo", "blu", "blew"]
  html = """&lt;script&gt; id = {{id}};
            document.write({{variable}}[id]);
            &lt;/script&gt;
          """
  data = {"variable": json.dumps(variable), "id": id};
</snippet></ROW><ROW><id>14739133</id><snippet>html</snippet></ROW><ROW><id>14739153</id><snippet>key1['score'] is 1.0

# feature 1
if key['s'] == foo:
    score = score * 0.1  
else:
    score = score * 0.6

# feature 2
... and so on

order keys by score, done. 
</snippet></ROW><ROW><id>14739262</id><snippet>configure_inputdiag</snippet></ROW><ROW><id>14739262</id><snippet>get_numerics</snippet></ROW><ROW><id>14739262</id><snippet>configure_inputdiag</snippet></ROW><ROW><id>14739262</id><snippet>get_numerics</snippet></ROW><ROW><id>14739689</id><snippet>rs = numpy.linspace(0, 4, 400) 
</snippet></ROW><ROW><id>14739689</id><snippet>In [17]: import numpy as np

In [18]: np.linspace(0, 4, 5)
Out[18]: array([ 0.,  1.,  2.,  3.,  4.])

In [19]: np.linspace(0, 4, 10)
Out[19]: 
array([ 0.        ,  0.44444444,  0.88888889,  1.33333333,  1.77777778,
        2.22222222,  2.66666667,  3.11111111,  3.55555556,  4.        ])
</snippet></ROW><ROW><id>14739689</id><snippet>for i in range(50)</snippet></ROW><ROW><id>14739689</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import pylab
import numpy

def f(x, r):
    """Discrete logistic equation with parameter r"""
    return r*x*(1-x)

if __name__ == '__main__':
    # initial condition for x
    ys = []
    rs = numpy.linspace(0, 4, 400)

    # Loop through `rs`. `r` is assigned the values in `rs` one at a time. 
    for r in rs:
        x = 0.1
        # Repeat this loop 500 times. 
        # i is just a dummy variable since it is not used inside the for-loop.
        for i in range(500):
            # Evaluate f at (x, r). The return value is assigned to x.
            # x is then fed back into f(x, r). 
            # This makes x jump around 500 times according to the logistic equation.
            # r remains fixed.
            x = f(x, r)

        # Do this 50 times
        for i in range(50):
            # Again make the x jump around according to the logistic equation
            x = f(x, r)
            # Save the point (r, x) in the list ys
            ys.append([r, x])

    # ys is a list of lists.
    # You can also think of ys as a list of [r, x] point.
    # This converts the list of lists into a 2D numpy array.
    ys = numpy.array(ys)

    # ys[:,0] is a 1D array of r values
    # ys[:, 1] is a 1D array of x values
    # This draws a scatter plot of (r, x) points.
    pylab.plot(ys[:,0], ys[:,1], '.')
    pylab.show()
</snippet></ROW><ROW><id>14739832</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from pylab import *

X = np.linspace(0,100,11)

plt.plot(X,-X, label='plot 1', color='red')
plt.plot(X,-2*X, label='plot 2', color='green')
plt.plot(X,-3*X, label='plot 3', color='blue')


line1 = Line2D(range(10), range(10), marker='', color="red")
line2 = Line2D(range(10), range(10), marker='',color="green")
line3 = Line2D(range(10), range(10), marker='', color="blue")
line4 = Line2D(range(10), range(10), marker='', color="white")
plt.legend((line1,line4, line3,line2),('plot1','','plot3','plot2'),numpoints=1, loc=4,ncol=2)

plt.show()
</snippet></ROW><ROW><id>14739987</id><snippet>6bc1bee22e409f96e93d7e117393172a</snippet></ROW><ROW><id>14739987</id><snippet>874d6191b620e3261bef6864990db6ce</snippet></ROW><ROW><id>14740335</id><snippet>action = 'default'

if some_condition1:
    action = 'do_something'

if some_condition2:
    action = 'do_other_thing'

...

if action == 'default':
   one_reaction()
elif action == 'do_something':
   other_reaction()
...
</snippet></ROW><ROW><id>14740335</id><snippet>default = 1
do_something = 2
do_other_thing = 3

&gt;&gt;&gt; x = default
&gt;&gt;&gt; x
1 # is 1 default? I can't remember...
</snippet></ROW><ROW><id>14740498</id><snippet>Title.objects.filter(id__startswith='12345')
</snippet></ROW><ROW><id>14740505</id><snippet>sum</snippet></ROW><ROW><id>14740505</id><snippet>sum(((1 - im[i[0], i[1]]) ** 2) for i in index)
</snippet></ROW><ROW><id>14740505</id><snippet>sum(((1 - im[i]) ** 2) for i in index)
</snippet></ROW><ROW><id>14740703</id><snippet>blit=True</snippet></ROW><ROW><id>14740703</id><snippet>FuncAnimation</snippet></ROW><ROW><id>14740703</id><snippet>animated=True</snippet></ROW><ROW><id>14740703</id><snippet>scatter</snippet></ROW><ROW><id>14740703</id><snippet>import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

FLOOR = -10
CEILING = 10

class AnimatedScatter(object):
    def __init__(self, numpoints=5):
        self.numpoints = numpoints
        self.stream = self.data_stream()
        self.angle = 0

        self.fig = plt.figure()
        self.fig.canvas.mpl_connect('draw_event',self.forceUpdate)
        self.ax = self.fig.add_subplot(111,projection = '3d')
        self.ani = animation.FuncAnimation(self.fig, self.update, interval=100, 
                                       init_func=self.setup_plot, frames=20)

    def change_angle(self):
        self.angle = (self.angle + 1)%360

    def forceUpdate(self, event):
        self.scat.changed()

    def setup_plot(self):
        X = next(self.stream)
        c = ['b', 'r', 'g', 'y', 'm']
        self.scat = self.ax.scatter(X[:,0], X[:,1], X[:,2] , c=c, s=200)

        self.ax.set_xlim3d(FLOOR, CEILING)
        self.ax.set_ylim3d(FLOOR, CEILING)
        self.ax.set_zlim3d(FLOOR, CEILING)

        return self.scat,

    def data_stream(self):
        data = np.zeros(( self.numpoints , 3 ))
        xyz = data[:,:3]
        while True:
            xyz += 2 * (np.random.random(( self.numpoints,3)) - 0.5)
            yield data

    def update(self, i):
        data = next(self.stream)
        self.scat._offsets3d = ( np.ma.ravel(data[:,0]) , np.ma.ravel(data[:,1]) , np.ma.ravel(data[:,2]) )
        return self.scat,

    def show(self):
        plt.show()

if __name__ == '__main__':
    a = AnimatedScatter()
    a.ani.save("movie.avi", codec='avi')
    a.show()
</snippet></ROW><ROW><id>14740736</id><snippet>GetProcesses()</snippet></ROW><ROW><id>14740736</id><snippet> foreach (Process process in Process.GetProcesses().Where(p =&gt; 
                                                         p.ProcessName == "calc"))
 {
     process.Kill();
 }
</snippet></ROW><ROW><id>14740736</id><snippet>Process</snippet></ROW><ROW><id>14740736</id><snippet>Process.Start()</snippet></ROW><ROW><id>14740736</id><snippet>Kill()</snippet></ROW><ROW><id>14740868</id><snippet>gunicorn_django [OPTIONS] myproject</snippet></ROW><ROW><id>14740868</id><snippet>myproject.settings</snippet></ROW><ROW><id>14741112</id><snippet>assert r.ok</snippet></ROW><ROW><id>14741163</id><snippet>&gt;&gt;&gt; import re

&gt;&gt;&gt; with open('/tmp/spam.txt') as f:
...   for steam64id in re.findall(r'STEAM_\d:\d:\d+', f.read()):
...     print steam64id
... 
STEAM_0:1:27464943
STEAM_0:0:31072991
STEAM_0:0:41992530
STEAM_0:1:10894538
STEAM_0:1:52131782
STEAM_0:1:47812003
STEAM_0:1:4941202
STEAM_0:0:32271324
STEAM_0:1:41148798
STEAM_0:0:17495028
STEAM_0:1:41205650
STEAM_0:1:50559125
STEAM_0:1:37758467
STEAM_0:0:24206189
STEAM_0:1:29612138
STEAM_0:1:29663879
STEAM_0:1:44114633
STEAM_0:0:42256202
STEAM_0:1:48004781
</snippet></ROW><ROW><id>14741368</id><snippet>action</snippet></ROW><ROW><id>14741368</id><snippet>method</snippet></ROW><ROW><id>14741368</id><snippet>form</snippet></ROW><ROW><id>14741368</id><snippet>action</snippet></ROW><ROW><id>14741368</id><snippet>method</snippet></ROW><ROW><id>14741368</id><snippet>GET</snippet></ROW><ROW><id>14741368</id><snippet>POST</snippet></ROW><ROW><id>14741509</id><snippet>sorted()</snippet></ROW><ROW><id>14741509</id><snippet>&gt;&gt;&gt; mylist = [4,5,6,7,8,9,1]
&gt;&gt;&gt; sorted(mylist)
[1,4,5,6,7,8,9]
</snippet></ROW><ROW><id>14741575</id><snippet>if verbose:
    outputRead = output.stdout.read()
    print outputRead
</snippet></ROW><ROW><id>14741575</id><snippet>nul</snippet></ROW><ROW><id>14741575</id><snippet>/dev/null</snippet></ROW><ROW><id>14741575</id><snippet>cmdStringList = ["sh","-c","\"$0\"" \"$@\" &gt;/dev/null","perl","script.pl","arg1",...]
</snippet></ROW><ROW><id>14741740</id><snippet>dictio = {'Customer 1': {'Vitamin A': 0, 'Calcium': 1, 'Protein': 1, 'B vitamins': 0, 'HPMR': 0}, 'Customer 2': {'Vitamin A': 0, 'Calcium': 0, 'Protein': 1, 'B vitamins': 1, 'HPMR': 0}}
a = []
for key in dictio.keys():
    for key_ in dictio[key].keys():
        a.append((key,key_,dictio[key][key_]))

print a
</snippet></ROW><ROW><id>14741740</id><snippet>[('Customer 2', 'Calcium', 0), ('Customer 2', 'Vitamin A', 0), ('Customer 2', 'HPMR', 0), ('Customer 2', 'Protein', 1), ('Customer 2', 'B vitamins', 1), ('Customer 1', 'Calcium', 1), ('Customer 1', 'Vitamin A', 0), ('Customer 1', 'HPMR', 0), ('Customer 1', 'Protein', 1), ('Customer 1', 'B vitamins', 0)]</snippet></ROW><ROW><id>14741934</id><snippet>pcolormesh</snippet></ROW><ROW><id>14741934</id><snippet>X</snippet></ROW><ROW><id>14741934</id><snippet>Y</snippet></ROW><ROW><id>14741934</id><snippet>meshgrid</snippet></ROW><ROW><id>14741934</id><snippet>import numpy as np
X = [-0.11, -0.06, -0.07, -0.12, ...]
Y = [0.09, 0.13, 0.17, 0.09, ...]
xx, yy = np.meshgrid(xx, yy)
</snippet></ROW><ROW><id>14741934</id><snippet>Z</snippet></ROW><ROW><id>14741934</id><snippet>xx</snippet></ROW><ROW><id>14741934</id><snippet>yy</snippet></ROW><ROW><id>14741934</id><snippet>X</snippet></ROW><ROW><id>14741934</id><snippet>Y</snippet></ROW><ROW><id>14741934</id><snippet>Z</snippet></ROW><ROW><id>14741934</id><snippet>import matplotlib.pyplot as plt
X = [-0.11, -0.06, -0.07, -0.12, ...]
Y = [0.09, 0.13, 0.17, 0.09, ...]
Z = [0.38, 0.37, 0.44, 0.33, ...]
fig, ax = plt.subplots()
ax.scatter(X, Y, c=Z)
plt.show()
</snippet></ROW><ROW><id>14742029</id><snippet>re.sub(r'%s', "*", file) % pattern
</snippet></ROW><ROW><id>14742029</id><snippet>%s</snippet></ROW><ROW><id>14742029</id><snippet>*</snippet></ROW><ROW><id>14742029</id><snippet>file</snippet></ROW><ROW><id>14742029</id><snippet>filename</snippet></ROW><ROW><id>14742029</id><snippet>file</snippet></ROW><ROW><id>14742029</id><snippet>%s</snippet></ROW><ROW><id>14742029</id><snippet>pattern</snippet></ROW><ROW><id>14742029</id><snippet>file</snippet></ROW><ROW><id>14742029</id><snippet>TypeError</snippet></ROW><ROW><id>14742029</id><snippet>'this is a string' % ("foobar!")
</snippet></ROW><ROW><id>14742029</id><snippet>re.sub(str(pattern),'*',file)
</snippet></ROW><ROW><id>14742029</id><snippet>re.sub(r'%s' % pattern,'*',file)
</snippet></ROW><ROW><id>14742060</id><snippet>olgss(x)</snippet></ROW><ROW><id>14742060</id><snippet>def olgss(x) :
    print "alpha is", alpha
    print "x is", x
    numg = ((1-alpha)*A*x**alpha)/(1+n)
    deng = (1+(1/(beta**(sigma)))*(1+alpha*A*x**(alpha-1))**(1-sigma))
    olgk = x - numg/deng
    return olgk
</snippet></ROW><ROW><id>14742060</id><snippet>alpha is 0.3
x is 0.2
alpha is 0.3
x is 0.0126300785572
alpha is 0.3
x is -0.0251898297413
Traceback (most recent call last):
  File "globals.py", line 36, in ?
    state = olgss(state)
  File "globals.py", line 13, in olgss
    numg = ((1-alpha)*A*x**alpha)/(1+n)
ValueError: negative number cannot be raised to a fractional power
</snippet></ROW><ROW><id>14742060</id><snippet>olgss()</snippet></ROW><ROW><id>14742193</id><snippet>program_starts = time.time()
while(True):
    now = time.time()
    print("It has been {0} seconds since the loop started".format(now - program_starts))
</snippet></ROW><ROW><id>14742193</id><snippet>while (looperCPU != 0):
    start_time = time.time()
    # Do some stuff
    while printerLooper == True :
        print("Sleeping for ", secondsPause, " seconds")
        print(random_number)
        printerLooper = False
    end_time = time.time()

    print("total time taken this loop: ", end_time - start_time)
</snippet></ROW><ROW><id>14742406</id><snippet>from nltk.corpus import cess_esp as cess
from nltk import UnigramTagger as ut
from nltk import BigramTagger as bt

# Read the corpus into a list, 
# each entry in the list is one sentence.
cess_sents = cess.tagged_sents()

# Train the unigram tagger
uni_tag = ut(cess_sents)

sentence = "Hola , esta foo bar ."

# Tagger reads a list of tokens.
uni_tag.tag(sentence.split(" "))

# Split corpus into training and testing set.
train = int(len(cess_sents)*90/100) # 90%

# Train a bigram tagger with only training data.
bi_tag = bt(cess_sents[:train])

# Evaluates on testing data remaining 10%
bi_tag.evaluate(cess_sents[train+1:])

# Using the tagger.
bi_tag.tag(sentence.split(" "))
</snippet></ROW><ROW><id>14742425</id><snippet>re.finditer</snippet></ROW><ROW><id>14742425</id><snippet>finditer</snippet></ROW><ROW><id>14742549</id><snippet>Newsletter.objects.filter(
    id__in=[subscription.newsletter.id for subscription in
            Subscription.objects.filter(subscriber=user)]
</snippet></ROW><ROW><id>14742549</id><snippet>subscriptions = Subscription.objects.filter(subscriber=user) # all subscriptions for a given user

newsletter_ids = [subscription.newsletter.id for subscription in subscriptions]

Newsletter.objects.filter(id__in=newsletter_ids) # answer
</snippet></ROW><ROW><id>14742582</id><snippet>for name in glob.glob('/home/myfiles/*_customer_records_2323_*.zip')[-5:]:
    print '\t', name
</snippet></ROW><ROW><id>14742582</id><snippet>glob</snippet></ROW><ROW><id>14742582</id><snippet>for name in sorted(glob.glob('/home/myfiles/*_customer_records_2323_*.zip'))[-5:]:
    print '\t', name
</snippet></ROW><ROW><id>14742637</id><snippet>import webbrowser

# firstly you need to make write to an html file that will have the top 20 lines 
# you can do that using 

top_lines_file = open("shows.html", "w")
i = 1
while i in range(1,21):
    top_lines_file.write("write something to the file")
    i += 1
    # this will iterate over the file and write to it 20 times
top_lines_file.close() # close the file

# now you need to pass the path of the html file to the webbrowser object
webbrowser.open("file://" + path/to/the/html/file) 
# this will open the webbrowser with your html file 
</snippet></ROW><ROW><id>14742696</id><snippet># views.py

from django.contrib.auth.decorators import login_required
from django.http import HttpResponse

@login_required
def index(request):
    return HttpResponse('Only registers will see this page')

# now you can add the stuff that you would want only the registered users to view, 
# so basically if a new visitors tries to visit your site say at www.abc.com, he will first be redirected to the www.abc.com/login/ where he needs to create an account, once authenticated, he will then be redirected to the index page
</snippet></ROW><ROW><id>14742768</id><snippet>#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;linux/fb.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/ioctl.h&gt;

int main()
{
    int fbfd = 0;
    struct fb_var_screeninfo vinfo;
    struct fb_fix_screeninfo finfo;
    long int screensize = 0;
    char *fbp = 0;
    int x = 0, y = 0;
    long int location = 0;

    // Open the file for reading and writing
    fbfd = open("/dev/fb0", O_RDWR);
    if (fbfd == -1) {
        perror("Error: cannot open framebuffer device");
        exit(1);
    }
    printf("The framebuffer device was opened successfully.\n");

    // Get fixed screen information
    if (ioctl(fbfd, FBIOGET_FSCREENINFO, &amp;finfo) == -1) {
        perror("Error reading fixed information");
        exit(2);
    }

    // Get variable screen information
    if (ioctl(fbfd, FBIOGET_VSCREENINFO, &amp;vinfo) == -1) {
        perror("Error reading variable information");
        exit(3);
    }

    printf("%dx%d, %dbpp\n", vinfo.xres, vinfo.yres, vinfo.bits_per_pixel);

    // Figure out the size of the screen in bytes
    screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / 8;

    // Map the device to memory
    fbp = (char *)mmap(0, screensize, PROT_READ | PROT_WRITE, MAP_SHARED, fbfd, 0);
    if ((int)fbp == -1) {
        perror("Error: failed to map framebuffer device to memory");
        exit(4);
    }
    printf("The framebuffer device was mapped to memory successfully.\n");

    x = 100; y = 100;       // Where we are going to put the pixel

    // Figure out where in memory to put the pixel
    for (y = 100; y &lt; 300; y++)
        for (x = 100; x &lt; 300; x++) {

            location = (x+vinfo.xoffset) * (vinfo.bits_per_pixel/8) +
                       (y+vinfo.yoffset) * finfo.line_length;

            if (vinfo.bits_per_pixel == 32) {
                *(fbp + location) = 100;        // Some blue
                *(fbp + location + 1) = 15+(x-100)/2;     // A little green
                *(fbp + location + 2) = 200-(y-100)/5;    // A lot of red
                *(fbp + location + 3) = 0;      // No transparency
        //location += 4;
            } else  { //assume 16bpp
                int b = 10;
                int g = (x-100)/6;     // A little green
                int r = 31-(y-100)/16;    // A lot of red
                unsigned short int t = r&lt;&lt;11 | g &lt;&lt; 5 | b;
                *((unsigned short int*)(fbp + location)) = t;
            }

        }
    munmap(fbp, screensize);
    close(fbfd);
    return 0;
}
</snippet></ROW><ROW><id>14742933</id><snippet>unix</snippet></ROW><ROW><id>14742933</id><snippet>windows</snippet></ROW><ROW><id>14742933</id><snippet>chunks</snippet></ROW><ROW><id>14743170</id><snippet>&gt;&gt;&gt; 1 in [0, 1, 2, 3, 4, 5]
True
</snippet></ROW><ROW><id>14743879</id><snippet>super(B,self).do_work()
</snippet></ROW><ROW><id>14743879</id><snippet>do_work</snippet></ROW><ROW><id>14743879</id><snippet>B</snippet></ROW><ROW><id>14743879</id><snippet>A.do_work</snippet></ROW><ROW><id>14743879</id><snippet>super(A,self).do_work()
</snippet></ROW><ROW><id>14743879</id><snippet>do_work</snippet></ROW><ROW><id>14743879</id><snippet>A</snippet></ROW><ROW><id>14743879</id><snippet>object.do_work</snippet></ROW><ROW><id>14744025</id><snippet>@parsleyfy
class AccountForm(forms.ModelForm):
    def save(self, *args, **kwargs):
        # some other code...
        return forms.ModelForm.save(self, *args,**kwargs)
</snippet></ROW><ROW><id>14744025</id><snippet>@</snippet></ROW><ROW><id>14744025</id><snippet>class AccountFormBase(forms.ModelForm):
    def save(self, *args, **kwargs):
        # some other code...
        return super(AccountFormBase, self).save(*args,**kwargs)

AccountForm = parsleyfy(AccountFormBase)
</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>save</snippet></ROW><ROW><id>14744025</id><snippet>super(AccountForm, self).save(...)</snippet></ROW><ROW><id>14744025</id><snippet>Bar</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>Bar.save</snippet></ROW><ROW><id>14744025</id><snippet>Foo.save</snippet></ROW><ROW><id>14744025</id><snippet>super(AccountForm, self).save(...)</snippet></ROW><ROW><id>14744025</id><snippet>Bar</snippet></ROW><ROW><id>14744025</id><snippet>AccountForm</snippet></ROW><ROW><id>14744025</id><snippet>AccountForm</snippet></ROW><ROW><id>14744025</id><snippet>Bar</snippet></ROW><ROW><id>14744025</id><snippet>.save(...)</snippet></ROW><ROW><id>14744025</id><snippet>Bar.save</snippet></ROW><ROW><id>14744025</id><snippet>Foo.save</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>Foo.save</snippet></ROW><ROW><id>14744025</id><snippet>super(AccountForm, self).save(...)</snippet></ROW><ROW><id>14744025</id><snippet>AccountForm</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>Bar</snippet></ROW><ROW><id>14744025</id><snippet>Bar</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>Foo.save</snippet></ROW><ROW><id>14744025</id><snippet>AccountForm</snippet></ROW><ROW><id>14744025</id><snippet>Foo</snippet></ROW><ROW><id>14744025</id><snippet>.save(...)</snippet></ROW><ROW><id>14744041</id><snippet>Group</snippet></ROW><ROW><id>14744041</id><snippet>Group</snippet></ROW><ROW><id>14744041</id><snippet>UndefinedGroup</snippet></ROW><ROW><id>14744041</id><snippet>Group</snippet></ROW><ROW><id>14744041</id><snippet>UndefinedGroup</snippet></ROW><ROW><id>14744041</id><snippet>UndefinedGroup</snippet></ROW><ROW><id>14744041</id><snippet>Group</snippet></ROW><ROW><id>14744041</id><snippet>@view_defaults(context=Group, renderer='json')
class GroupView(object):
    def __init__(self, request):
        self.request = request

    @view_config(request_method='GET')
    def get(self):
        # return information about the group

    @view_config(context=UndefinedGroup, request_method='PUT')
    def put_new(self):
        # create a Group from the UndefinedGroup

    @view_config(request_method='PUT')
    def put_overwrite(self):
        # overwrite the old group with a new one
</snippet></ROW><ROW><id>14744041</id><snippet>UndefinedGroup</snippet></ROW><ROW><id>14744041</id><snippet>Group</snippet></ROW><ROW><id>14744150</id><snippet>"&lt;br/&gt;"</snippet></ROW><ROW><id>14744150</id><snippet>lines = open("myfile.txt")
for line in lines:
    print line.rstrip() //rstrip removes whitespaces at the end
lines.close()
</snippet></ROW><ROW><id>14744150</id><snippet>&lt;title&gt;{% filename %}&lt;/title&gt;
&lt;body&gt;
{% for line in lines %}
  {{ line }}&lt;br/&gt;
{% endfor %}
&lt;/body&gt;
</snippet></ROW><ROW><id>14744183</id><snippet>a</snippet></ROW><ROW><id>14744183</id><snippet>b</snippet></ROW><ROW><id>14744183</id><snippet>a + b + c == 1000</snippet></ROW><ROW><id>14744183</id><snippet>upper_bound = 1000

sqr = [i**2 for i in range(upper_bound+1)]

def solutions(p):
    result = []

    for a in range(1, p - 1):
        for b in range(1, p - a):
            c = p - (a + b)
            if a &lt; b &lt; c:
                d = sqr[a]
                e = sqr[b]
                f = sqr[c]

                if (d + e == f) or (e + f == d) or (f + d == e):
                    result.append((a, b, c))
    return len(result)


max_p = 0
max_solutions = 0

for p in range(3, upper_bound+1):
    print("Processing %d" % p)
    s = solutions(p)

    if s &gt; max_solutions:
        max_solutions = s
        max_p = p

print("%d has %d solutions" % (max_p, max_solutions))
</snippet></ROW><ROW><id>14744183</id><snippet>upper_bound = 1000

sqr = [i**2 for i in range(upper_bound+1)]

def solution(p):
    count = 0
    for a in range(1, p - 1):
        for b in range(a, p - a):
            c = p - (a + b)
            d = sqr[a]
            e = sqr[b]
            f = sqr[c]

            if (d + e == f):
                count += 1
    return count

c, p = max((solution(p), p) for p in range(3, upper_bound+1))
print("%d has %d solutions" % (p, c))
</snippet></ROW><ROW><id>14744183</id><snippet>max()</snippet></ROW><ROW><id>14744231</id><snippet>((st1 &amp; (2**(i)))/(2**(i))</snippet></ROW><ROW><id>14744231</id><snippet>Extract(i, i, st1)</snippet></ROW><ROW><id>14744231</id><snippet>ZeroExt(4, Extract(i, i, st1))</snippet></ROW><ROW><id>14744231</id><snippet>Sum([( (st1 &amp; (2**(i)))/(2**(i)) ) for i in range(bits)])
</snippet></ROW><ROW><id>14744231</id><snippet>Sum([ ZeroExt(4, Extract(i,i,st1)) for i in range(bits) ])
</snippet></ROW><ROW><id>14744440</id><snippet>wx.MessageBox('Lan1 = %s, lan2 = %s' % (str(lan1), str(lan2)),
              wx.OK | wx.ICON_INFORMATION)
</snippet></ROW><ROW><id>14744497</id><snippet>&gt;&gt;&gt; from apps.users.models import Member
&gt;&gt;&gt; members = Member.objects.all()
&gt;&gt;&gt; members[1].user_type
u'C'
&gt;&gt;&gt; members[1].user_type = 'M'
&gt;&gt;&gt; members[1].save()
&gt;&gt;&gt; members[1].user_type
u'C'
&gt;&gt;&gt; m = members[1]
&gt;&gt;&gt; m.user_type
u'C'
&gt;&gt;&gt; m.user_type = 'M'
&gt;&gt;&gt; m.save()
&gt;&gt;&gt; m.user_type
'M'
</snippet></ROW><ROW><id>14744497</id><snippet>all()</snippet></ROW><ROW><id>14744497</id><snippet>save()</snippet></ROW><ROW><id>14744497</id><snippet>Member</snippet></ROW><ROW><id>14744497</id><snippet>save()</snippet></ROW><ROW><id>14744497</id><snippet>members[1]</snippet></ROW><ROW><id>14744497</id><snippet>Member</snippet></ROW><ROW><id>14745410</id><snippet>rec_name</snippet></ROW><ROW><id>14745410</id><snippet>rec_name</snippet></ROW><ROW><id>14745410</id><snippet>class student(osv.osv):
    rec_name = 'student_name'
</snippet></ROW><ROW><id>14745484</id><snippet>In [34]: import pandas as pd

In [35]: df
Out[35]: 
                        row
0       00000 UNITED STATES
1             01000 ALABAMA
2  01001 Autauga County, AL
3  01003 Baldwin County, AL
4  01005 Barbour County, AL

In [36]: df = pd.DataFrame(df.row.str.split(' ',1).tolist(),
                                   columns = ['flips','row'])

In [37]: df
Out[37]: 
   flips                 row
0  00000       UNITED STATES
1  01000             ALABAMA
2  01001  Autauga County, AL
3  01003  Baldwin County, AL
4  01005  Barbour County, AL
</snippet></ROW><ROW><id>14745502</id><snippet>{% macro field_with_errors(field) %}
    {% set css_class=kwargs.pop('class', '') %}
    {% if field.type in ('DateField', 'DateTimeField') %}
        {{ field(class='date ' + css_class, **kwargs) }}
    {% elif field.type == 'IntegerField' %}
        {{ field(class='number ' + css_class, **kwargs) }}
    {% else %}
        {{ field(class=css_class, **kwargs) }}
    {% endif %}

    {% if field.errors %}
        &lt;ul class="errors"&gt;{% for error in field.errors %}&lt;li&gt;{{ error|e }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;
    {% endif %}
{% endmacro %}
</snippet></ROW><ROW><id>14745502</id><snippet>{{ field_with_errors(form.foo, placeholder='bar') }}
</snippet></ROW><ROW><id>14745503</id><snippet>l = (('aa', 'bb', 'cc'), 'dd')
l = l[0] + (l[1],)
</snippet></ROW><ROW><id>14745540</id><snippet>BaseRequestHandler</snippet></ROW><ROW><id>14745540</id><snippet>dispatch, jinja</snippet></ROW><ROW><id>14745540</id><snippet>BaseRequestHandler</snippet></ROW><ROW><id>14745831</id><snippet>def nesting(level):
    ret = 'value'
    for l in range(level, 0, -1):
        ret = {'key%d' % l: ret}
    return ret
</snippet></ROW><ROW><id>14745831</id><snippet>range(...)</snippet></ROW><ROW><id>14745831</id><snippet>def nesting(match): # `match' is a match object like your `m' variable
    ret = 'value'
    for key in match.groups():
        ret = {key: ret}
    return ret
</snippet></ROW><ROW><id>14745831</id><snippet>reversed(match.groups())</snippet></ROW><ROW><id>14745851</id><snippet>def foo(func):
    def wrap(s): # I'd call this 'self' instead of 's' to remind us it's a reference to an instance

        func(s) # This is a function, not a method yet - so we need to pass in the reference

        s.ma() # This is a method, because you use attribute lookup on the object s to get it
    return wrap

class A:
    def ma(self):
        print "this is ma"

    @foo     # if the way foo wraps mb doesn't depend on some arg, don't use args here
    def mb(self):
        print "this is mb"
</snippet></ROW><ROW><id>14745851</id><snippet>func</snippet></ROW><ROW><id>14745851</id><snippet>func</snippet></ROW><ROW><id>14746100</id><snippet>    import clr
    clr.AddReference('IronPython.Wpf')
</snippet></ROW><ROW><id>14746256</id><snippet>list</snippet></ROW><ROW><id>14746256</id><snippet>print_collection_twice</snippet></ROW><ROW><id>14746256</id><snippet>print_collection</snippet></ROW><ROW><id>14746256</id><snippet>print_collection_twice</snippet></ROW><ROW><id>14746258</id><snippet>val</snippet></ROW><ROW><id>14746258</id><snippet>value</snippet></ROW><ROW><id>14746527</id><snippet>:g/def\ .*
</snippet></ROW><ROW><id>14746527</id><snippet>&lt;line number&gt;gg</snippet></ROW><ROW><id>14746527</id><snippet>command! -nargs=1 GJ vimgrep &lt;q-args&gt; % | copen
</snippet></ROW><ROW><id>14746746</id><snippet>import urllib2

try:
    response = urllib2.urlopen('https://example.com') 
    print 'response headers: "%s"' % response.info()
except IOError, e:
    if hasattr(e, 'code'): # HTTPError
        print 'http error code: ', e.code
    elif hasattr(e, 'reason'): # URLError
        print "can't connect, reason: ", e.reason
    else:
        raise
</snippet></ROW><ROW><id>14746798</id><snippet>import MySQLdb as mysql
import csv

con = mysql.connect('localhost','user','password','dbname')
cur = con.cursor()

q = "select x, y,z from tablet_vendors where a=%s and b=%s"

with open('somefile.txt') as f:
  rows = csv.reader(f,delimiter='\t')
  for row in rows:
     cur.execute(q,row)
     result = cur.fetchone()
     while result:
        print result
        result = cur.fetchone()
</snippet></ROW><ROW><id>14746798</id><snippet>cur.</snippet></ROW><ROW><id>14746845</id><snippet>df['Firstlevel'] = 'Foo'
df.set_index('Firstlevel', append=True, inplace=True)
</snippet></ROW><ROW><id>14746845</id><snippet>df.reorder_levels(['Firstlevel', 'A', 'B'])
</snippet></ROW><ROW><id>14746845</id><snippet>                      Vals
Firstlevel A  B           
Foo        a1 b1  0.871563
              b2  0.494001
           a2 b3 -0.167811
           a3 b4 -1.353409
</snippet></ROW><ROW><id>14747185</id><snippet>import itertools

def chunks(it):
    while True:
        it = itertools.dropwhile(lambda x: 'BEGIN_DB' not in x, it)
        it = itertools.dropwhile(lambda x: x.strip(), it)
        next(it)
        yield itertools.takewhile(lambda x: 'END_DB' not in x, it)
</snippet></ROW><ROW><id>14747185</id><snippet>src = """
BEGIN_META
    stuff
    to
    discard
END_META
BEGIN_DB
    header
    to
    discard

    1data I
    1wish to
    1extract
 END_DB


BEGIN_META
    stuff
    to
    discard
END_META
BEGIN_DB
    header
    to
    discard

    2data I
    2wish to
    2extract
 END_DB
"""


src = iter(src.splitlines())
for chunk in chunks(src):
    for line in chunk:
        print line.strip()
    print
</snippet></ROW><ROW><id>14747275</id><snippet>viewstate</snippet></ROW><ROW><id>14747275</id><snippet>eventvalidation</snippet></ROW><ROW><id>14747275</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>14747275</id><snippet>__EVENTVALIDATION</snippet></ROW><ROW><id>14747275</id><snippet>import urllib
from bs4 import BeautifulSoup

headers = {
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Origin': 'http://www.indiapost.gov.in',
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.17 (KHTML, like Gecko)  Chrome/24.0.1312.57 Safari/537.17',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Referer': 'http://www.indiapost.gov.in/pin/',
    'Accept-Encoding': 'gzip,deflate,sdch',
    'Accept-Language': 'en-US,en;q=0.8',
    'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
}

class MyOpener(urllib.FancyURLopener):
    version = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17'

myopener = MyOpener()
url = 'http://www.indiapost.gov.in/pin/'
# first HTTP request without form data
f = myopener.open(url)
soup = BeautifulSoup(f)
# parse and retrieve two vital form values
viewstate = soup.select("#__VIEWSTATE")[0]['value']
eventvalidation = soup.select("#__EVENTVALIDATION")[0]['value']

formData = (
    ('__EVENTVALIDATION', eventvalidation),
    ('__VIEWSTATE', viewstate),
    ('__VIEWSTATEENCRYPTED',''),
    ('txt_offname', ''),
    ('ddl_dist', '0'),
    ('txt_dist_on', ''),
    ('ddl_state','1'),
    ('btn_state', 'Search'),
    ('txt_stateon', ''),
    ('hdn_tabchoice', '1'),
    ('search_on', 'Search'),
)

encodedFields = urllib.urlencode(formData)
# second HTTP request with form data
f = myopener.open(url, encodedFields)

try:
    # actually we'd better use BeautifulSoup once again to
    # retrieve results(instead of writing out the whole HTML file)
    # Besides, since the result is split into multipages,
    # we need send more HTTP requests
    fout = open('tmp.html', 'w')
except:
    print('Could not open output file\n')
fout.writelines(f.readlines())
fout.close()
</snippet></ROW><ROW><id>14747314</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14747314</id><snippet>lxml.html.soupparser</snippet></ROW><ROW><id>14747314</id><snippet>&gt;&gt;&gt; import lxml.html.soupparser
&gt;&gt;&gt; MainPage = urllib2.urlopen(url).read()
&gt;&gt;&gt; HtmlDoc = lxml.html.soupparser.fromstring(MainPage)
&gt;&gt;&gt; Elements = HmtlDoc.xpath('//div[@id="bd-cross"]//li[@class=""]')
&gt;&gt;&gt; if len(Elements) &gt; 0:
&gt;&gt;&gt;     print 'Yes'
&gt;&gt;&gt; else:
&gt;&gt;&gt;     print 'No'
</snippet></ROW><ROW><id>14747613</id><snippet>.replace()</snippet></ROW><ROW><id>14747613</id><snippet>a='testemail@email.com'
a.replace('@','_')
'testemail_email.com'
</snippet></ROW><ROW><id>14747613</id><snippet>a='testemail@email.com'
replace=['@','.']
for i in replace:
  a=a.replace(i,'_')
</snippet></ROW><ROW><id>14748064</id><snippet>os.path</snippet></ROW><ROW><id>14748064</id><snippet>In [714]: script = r"C:/Users/dell/byteyears.py"
In [715]: head, tail = os.path.split(script)
In [716]: os.path.join(head, 'Python27', tail)
Out[716]: 'C:/Users/dell/Python27/byteyears.py'
</snippet></ROW><ROW><id>14748064</id><snippet>import os
script = r"C:/Users/dell/byteyears.py"
head, tail = os.path.split(script)
newpath = os.path.join(head, 'Python27', tail)
print newpath
</snippet></ROW><ROW><id>14748064</id><snippet>'C:/Users/dell/Python27/byteyears.py'
</snippet></ROW><ROW><id>14748218</id><snippet>$ crontab -e
</snippet></ROW><ROW><id>14748218</id><snippet>* */2 * * * python /path/to/project/manage.py checksomething
</snippet></ROW><ROW><id>14748262</id><snippet>()</snippet></ROW><ROW><id>14748262</id><snippet>now</snippet></ROW><ROW><id>14748262</id><snippet>from datetime import datetime, date, time
import time

fmt = '%Y-%m-%d %H:%M:%S'
d1 = datetime.now()
time.sleep(5)
d2 = datetime.now()
diff = (d2-d1).seconds
print(diff) 
</snippet></ROW><ROW><id>14748329</id><snippet># Since order of the names doesn't matter, we can use the set() option
matching_names = set(sheet_one_names) &amp; set(sheet_one_names)
...
# Here, order does matter since we're comparing rowdata..
# not just if they match at some point.
matching_rowdata = [i for i, j in zip(columndata_one, columndata_two) if i != j]
</snippet></ROW><ROW><id>14748329</id><snippet>xlrd</snippet></ROW><ROW><id>14748329</id><snippet>column_a_name = ['Location', 'Building', 'Location']
column_a_data = [['Floor 1', 'Main', 'Sweden'],
                ['Floor 2', 'Main', 'Sweden'],
                ['Floor 3', 'Main', 'Sweden']]

column_b_name = ['Location', 'Building']
column_b_data = [['Sweden', 'Main', 'Floor 1'],
                ['Norway', 'Main', 'Floor 2'],
                ['Sweden', 'Main', 'Floor 3']]

matching_names = []
for pos in range(0, len(column_a_name)):
    try:
        if column_a_name[pos] == column_b_name[pos]:
            matching_names.append((column_a_name[pos], pos))
    except:
        pass # Index out of range, colun length are not the same

missmatching_data = []
for row in range(0, len(column_a_data)):
    rowa = column_a_data[row]
    rowb = column_b_data[row]

    for name, _id in matching_names:
        if rowa[_id] != rowb[_id] and (rowa[_id] not in rowb or rowb[_id] not in rowa):
            missmatching_data.append((row, rowa[_id], rowb[_id]))

print missmatching_data
</snippet></ROW><ROW><id>14748685</id><snippet>delta = datetime.datetime.now() - x.Datetime
if delta.total_seconds() &gt; 5:
    # difference is greater than 5 seconds 
</snippet></ROW><ROW><id>14748685</id><snippet>x.Datetime</snippet></ROW><ROW><id>14748685</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14748685</id><snippet>if any((
        x.Capturing == True and 
        (datetime.datetime.now() - x.Datetime).total_seconds() &gt; 5
       ) for x in DeviceInfoList):
</snippet></ROW><ROW><id>14748830</id><snippet>sites</snippet></ROW><ROW><id>14748830</id><snippet>__init__.py</snippet></ROW><ROW><id>14748830</id><snippet>import sites

mod = getattr(sites, self.className + '_login')
klass[self.className] = getattr(mod, self.className)
klass[self.className](**self.args)
</snippet></ROW><ROW><id>14748830</id><snippet>my_site_login.py</snippet></ROW><ROW><id>14748830</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>14748830</id><snippet>importlib

mod = importlib.import_module('sites.{}_login'.format(self.className))
klass[self.className] = getattr(mod, self.className)
klass[self.className](**self.args)
</snippet></ROW><ROW><id>14748830</id><snippet>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; importlib.import_module('sites.my_site_login')
&lt;module 'sites.my_site_login' from './sites/my_site_login.py'&gt;
</snippet></ROW><ROW><id>14749178</id><snippet>&gt;&gt;&gt; print '\xe2\x80\x8e\xd7\x93\xd7\x9c\xd7\x99\xd7\xaa\xe2\x80\x8e'.decode('utf8')
‎דלית‎
</snippet></ROW><ROW><id>14749178</id><snippet>unicode</snippet></ROW><ROW><id>14749178</id><snippet>.decode('utf8') and prints that; the</snippet></ROW><ROW><id>14749178</id><snippet>statement inspects the encoding used by my terminal and re-encodes the</snippet></ROW><ROW><id>14749312</id><snippet>x</snippet></ROW><ROW><id>14749312</id><snippet>gettx</snippet></ROW><ROW><id>14749312</id><snippet>settx</snippet></ROW><ROW><id>14749312</id><snippet>deltx</snippet></ROW><ROW><id>14749312</id><snippet>x</snippet></ROW><ROW><id>14749312</id><snippet>class Property(object):

    def __init__(self):
        self.__x = "Raj"  # Class private

    def gettx(self):
        print "getting x"
        return self.__x

    def settx(self, val):
        print "Setting x"
        self.__x = val

    def dellx(self):
        print "deleting"
        return self.__x

    x = property(gettx, settx, dellx, "I'm object property")
</snippet></ROW><ROW><id>14749350</id><snippet>transaction.commit_unless_managed()</snippet></ROW><ROW><id>14749350</id><snippet>from django.db import transaction</snippet></ROW><ROW><id>14749350</id><snippet>cursor.execute</snippet></ROW><ROW><id>14749350</id><snippet>commit_unless_managed</snippet></ROW><ROW><id>14749350</id><snippet>from django.db import connection, transaction, DatabaseError, IntegrityError

cursor = connection.cursor()
cursor.execute("some insert query" )

try:
    transaction.commit_unless_managed()
except DatabaseError, IntegrityError:
    print 'error'
else:
    print 'success'
</snippet></ROW><ROW><id>14749388</id><snippet>object</snippet></ROW><ROW><id>14749388</id><snippet>DEFAULT = object()
def foo(param=DEFAULT):
    if param is DEFAULT:
        ...
</snippet></ROW><ROW><id>14749388</id><snippet>None</snippet></ROW><ROW><id>14749388</id><snippet>kwargs</snippet></ROW><ROW><id>14749388</id><snippet>def foo(**kwargs):
    if 'param' in kwargs:
        param = kwargs['param']
    else:
        ...
</snippet></ROW><ROW><id>14749388</id><snippet>param</snippet></ROW><ROW><id>14749410</id><snippet>hg status</snippet></ROW><ROW><id>14749410</id><snippet>hg diff</snippet></ROW><ROW><id>14749410</id><snippet>capture=True</snippet></ROW><ROW><id>14749410</id><snippet>if local('hg status', capture=True):
    local('hg commit')
</snippet></ROW><ROW><id>14749697</id><snippet>my_dict = {'chicken':(40, 50, 10),
        'beef':(50, 30, 20)
         }

foods = raw_input("Enter your food: ")

#explode / split the user input

foods_list = foods.split(',')

#returns a list separated by comma

#print foods_list

nuts = [0, 0, 0]

for food in foods_list :
    if food.strip() in my_dict: 
        i = 0
        for value in  my_dict[food.strip()]:
            nuts[i] += value        
            i += 1  
print nuts  

scripts$ python nutrition.py
Enter your food: chicken, pork, beef
[90, 80, 30]


some improvements ;)
</snippet></ROW><ROW><id>14749900</id><snippet>command</snippet></ROW><ROW><id>14749900</id><snippet>elif</snippet></ROW><ROW><id>14749900</id><snippet>dict</snippet></ROW><ROW><id>14750086</id><snippet>multiprocessing</snippet></ROW><ROW><id>14750086</id><snippet>fork</snippet></ROW><ROW><id>14750086</id><snippet>fork</snippet></ROW><ROW><id>14750086</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>14750086</id><snippet>pagesize</snippet></ROW><ROW><id>14750086</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>14750520</id><snippet>OnKeyboardEvent</snippet></ROW><ROW><id>14750520</id><snippet>import pythoncom, pyHook, sys

def OnKeyboardEvent(event):
    print "Key: ", chr(event.Ascii)
    logging.log(10,chr(event.Ascii))
    return True

hm = pyHook.HookManager()
hm.KeyDown = OnKeyboardEvent
hm.HookKeyboard()
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>14750758</id><snippet>&gt;&gt;&gt; ''.join(filter(str.isdigit, '12454v'))
'12454'
</snippet></ROW><ROW><id>14750951</id><snippet>ImportError: No module named foo</snippet></ROW><ROW><id>14750951</id><snippet>foo.py</snippet></ROW><ROW><id>14750951</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>14750951</id><snippet>sys.path</snippet></ROW><ROW><id>14750951</id><snippet>sys.path</snippet></ROW><ROW><id>14750951</id><snippet>.</snippet></ROW><ROW><id>14750951</id><snippet>foo</snippet></ROW><ROW><id>14750951</id><snippet>__init__.py</snippet></ROW><ROW><id>14750951</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>14750951</id><snippet>try:
    from _foo import *
except ImportError:
    raise ImportError('&lt;any message you want here&gt;')
</snippet></ROW><ROW><id>14750951</id><snippet>sys.path</snippet></ROW><ROW><id>14750951</id><snippet>..</snippet></ROW><ROW><id>14750951</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14750961</id><snippet>strName = strName.replace("..", "http://www.website.com")
</snippet></ROW><ROW><id>14750961</id><snippet>.replace</snippet></ROW><ROW><id>14751131</id><snippet>**fig_kw</snippet></ROW><ROW><id>14751131</id><snippet>figsize</snippet></ROW><ROW><id>14751131</id><snippet>self.fig, self.ax = plt.subplots(figsize=(16,8), ...)
</snippet></ROW><ROW><id>14751131</id><snippet>self.fig.set_size_inches(16,8, forward=True)
</snippet></ROW><ROW><id>14751131</id><snippet>self.fig = plt.figure()</snippet></ROW><ROW><id>14751131</id><snippet>subplots</snippet></ROW><ROW><id>14751131</id><snippet>self.fig</snippet></ROW><ROW><id>14751131</id><snippet>self.ax</snippet></ROW><ROW><id>14751131</id><snippet>matplotlib.axes.AxesSubplot</snippet></ROW><ROW><id>14751131</id><snippet>plt.subplot(111), while all the buttons are added to</snippet></ROW><ROW><id>14751131</id><snippet>objects (created with</snippet></ROW><ROW><id>14751131</id><snippet>axes</snippet></ROW><ROW><id>14751131</id><snippet>subplots</snippet></ROW><ROW><id>14751131</id><snippet>self.ax = fig.add_axes(...)</snippet></ROW><ROW><id>14751284</id><snippet>from mpl_toolkits.basemap import Basemap

fig = plt.figure(figsize=(5,5))

m = Basemap(projection='ortho',lon_0=5,lat_0=35,resolution='l')

m.drawcoastlines()
m.drawparallels(np.arange(-90.,120.,15.))
m.drawmeridians(np.arange(0.,420.,30.))

# your extent in lat/lon (dec degrees)
ulx = -10
uly = 65
lrx = 65
lry = 35

# transform coordinates to map projection
xmin, ymin = m(ulx, lry)
xmax, ymax = m(lrx, uly)

# set the axes limits
ax = plt.gca()
ax.set_xlim(xmin, xmax)
ax.set_ylim(ymin, ymax)
</snippet></ROW><ROW><id>14751357</id><snippet>finditer()</snippet></ROW><ROW><id>14751935</id><snippet>file.find(msg_start_token, start_pos + 1)
</snippet></ROW><ROW><id>14751935</id><snippet>start_pos</snippet></ROW><ROW><id>14751935</id><snippet>msg_start_token</snippet></ROW><ROW><id>14751935</id><snippet>start_pos</snippet></ROW><ROW><id>14751935</id><snippet>.index()</snippet></ROW><ROW><id>14751935</id><snippet>.find()</snippet></ROW><ROW><id>14751935</id><snippet>.index()</snippet></ROW><ROW><id>14751935</id><snippet>ValueError</snippet></ROW><ROW><id>14751935</id><snippet>.find()</snippet></ROW><ROW><id>14751935</id><snippet>-1</snippet></ROW><ROW><id>14751969</id><snippet>the_url = 'http://www.reddit.com/r/motorcycles'
#call the function
scrapePages(the_url)
</snippet></ROW><ROW><id>14751969</id><snippet>soupify_url</snippet></ROW><ROW><id>14751969</id><snippet>scrapePages()</snippet></ROW><ROW><id>14751969</id><snippet>scrapePages()</snippet></ROW><ROW><id>14751969</id><snippet>soupify_url()</snippet></ROW><ROW><id>14751969</id><snippet>NameError: global name 'soupify_url' is not defined
</snippet></ROW><ROW><id>14751969</id><snippet>scrapePages()</snippet></ROW><ROW><id>14751969</id><snippet>soupify_url()</snippet></ROW><ROW><id>14752568</id><snippet>database = MySQLdb.connect(host'127.0.0.0', port=9990, ....
</snippet></ROW><ROW><id>14752739</id><snippet>moca</snippet></ROW><ROW><id>14752739</id><snippet>/opt/sana/mrs/admin.py</snippet></ROW><ROW><id>14752739</id><snippet>created</snippet></ROW><ROW><id>14752739</id><snippet>moca</snippet></ROW><ROW><id>14752739</id><snippet>from django.db import models # You may also place it in the top of the file
created = models.DateField(blank=True, null=True)
</snippet></ROW><ROW><id>14752739</id><snippet>created</snippet></ROW><ROW><id>14752739</id><snippet>exclude</snippet></ROW><ROW><id>14752878</id><snippet>HTMLParser</snippet></ROW><ROW><id>14752878</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; print h.unescape('שלך')
שלך
&gt;&gt;&gt; h.unescape('שלך')
u'\u05e9\u05dc\u05da'
</snippet></ROW><ROW><id>14752878</id><snippet>urllib2</snippet></ROW><ROW><id>14752878</id><snippet>.read()</snippet></ROW><ROW><id>14752878</id><snippet>response = opener.open(url).read()
</snippet></ROW><ROW><id>14752889</id><snippet>lxml.etree</snippet></ROW><ROW><id>14752889</id><snippet>&lt;Variable&gt;</snippet></ROW><ROW><id>14752889</id><snippet>&lt;FundamentalType&gt;</snippet></ROW><ROW><id>14752889</id><snippet>&lt;Pointer&gt;</snippet></ROW><ROW><id>14752889</id><snippet>&lt;Struct&gt;</snippet></ROW><ROW><id>14752889</id><snippet>Pointer</snippet></ROW><ROW><id>14752889</id><snippet>Variable</snippet></ROW><ROW><id>14752889</id><snippet>name</snippet></ROW><ROW><id>14752889</id><snippet>typedef int* myintptr;

myintptr p;   
</snippet></ROW><ROW><id>14752889</id><snippet>&lt;Variable id="_3" name="p" type="_64" context="_1" location="f0:5" file="f0" line="5"/&gt;
&lt;Typedef id="_64" name="myintptr" type="_63" context="_1" location="f0:3" file="f0" line="3"/&gt;
&lt;PointerType id="_63" type="_156" size="64" align="64"/&gt;
&lt;FundamentalType id="_156" name="int" size="32" align="32"/&gt;
</snippet></ROW><ROW><id>14753067</id><snippet>&gt;&gt;&gt; a = np.array((0, 1))
&gt;&gt;&gt; b = np.array((2, 1))
&gt;&gt;&gt; c = np.array((-1, -1))
&gt;&gt;&gt; numpy.column_stack((a,b,c))
array([[ 0,  2, -1],
       [ 1,  1, -1]])
</snippet></ROW><ROW><id>14753067</id><snippet>&gt;&gt;&gt; numpy.vstack((a,b,c)).T
</snippet></ROW><ROW><id>14753146</id><snippet>your_string = '"text":"string"'
match = re.search(r'(?&lt;=:)("[^"]+")',your_string)
if match:
    print match.group(0) #'"string"'
</snippet></ROW><ROW><id>14753146</id><snippet>:</snippet></ROW><ROW><id>14753146</id><snippet>JSON</snippet></ROW><ROW><id>14753146</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14753265</id><snippet>from your_app.models import ExampleModel
from django.forms import ModelForm

class ExampleForm(ModelForm):
    class Meta:
        model = ExampleModel
</snippet></ROW><ROW><id>14753265</id><snippet>class ExampleForm(ModelForm)
    is_ok = forms.BooleanField()
    class Meta:
        model = ExampleModel
</snippet></ROW><ROW><id>14753265</id><snippet>input</snippet></ROW><ROW><id>14753265</id><snippet>is_ok</snippet></ROW><ROW><id>14753326</id><snippet>class Reaction:
    def __init__(self, bkm_id, ec_nums=None, b_ids=None, k_ids=None, m_ids=None, source = '')
        self.bkm_id = bkm_id
        self.ec_nums = ec_nums
        self.b_ids = b_ids or []
        self.k_ids = k_ids or []
        self.m_ids = m_ids or []
        self.source = source

        self.substrates = []
        self.products = []

    def add_metabolite(self, metabolite, stoichiometry, subs_prod):
        if subs_prod == 'S':
            self.substrates.append(Substrate_Product(metabolite, stoichiometry))
        elif subs_prod == 'P':
            self.products.append(Substrate_Product(metabolite, stoichiometry)) 
</snippet></ROW><ROW><id>14753327</id><snippet>os.system("wget -c $url  -O  test")
</snippet></ROW><ROW><id>14753327</id><snippet>os.system("wget -c %s -O  test" % url )
</snippet></ROW><ROW><id>14753372</id><snippet>setattr(r, field + 's', None)</snippet></ROW><ROW><id>14753450</id><snippet>import numpy as np

def line_tuple(filename,cols=(0,1)):
    return np.loadtxt(filename,usecols=cols,unpack=True)

#parse each line from the datafile into a tuple of the form (xvals,yvals)
#store that tuple in a list.
data = [line_tuple(fname) for fname in ("line1.txt","line2.txt","line3.txt","line4.txt","line5.txt")]

#This is the minimum and maximum from all the datapoints.
xmin = min(line[0].min() for line in data)
xmax = max(line[0].max() for line in data)

#100 points evenly spaced along the x axis
x_points = np.linspace(xmin,xmax,100)

#interpolate your values to the evenly spaced points.
interpolated = [np.interp(x_points,d[0],d[1]) for d in data]

#Now do the averaging.
averages = [np.average(x) for x in zip(*interpolated)]

#put the average value along with it's x point into a file.
with open('outfile','w') as fout:
    for x,avg in zip(x_points,averages):
        fout.write('{0} {1}\n'.format(x,avg))
</snippet></ROW><ROW><id>14753450</id><snippet>plot 'line1.txt' w l, \
     'line2.txt' w l, \
     'line3.txt' w l, \
     'line4.txt' w l, \
     'line5.txt' w l, \
     'outfile' w l
</snippet></ROW><ROW><id>14753518</id><snippet>if foo in {}</snippet></ROW><ROW><id>14753518</id><snippet>foo</snippet></ROW><ROW><id>14753518</id><snippet>foo</snippet></ROW><ROW><id>14753518</id><snippet>if any([x in {} for x in (4, 5, False)])</snippet></ROW><ROW><id>14753518</id><snippet>if any([v == [4, 5, False, False, False, False] for v in your_dict.values()])</snippet></ROW><ROW><id>14753926</id><snippet>{% for item in mydict|dictsortreversed:"column1"|dictsortreversed:"column2" %}
</snippet></ROW><ROW><id>14753974</id><snippet>%</snippet></ROW><ROW><id>14753974</id><snippet>str.format()</snippet></ROW><ROW><id>14753974</id><snippet>%</snippet></ROW><ROW><id>14753974</id><snippet>str.format()</snippet></ROW><ROW><id>14754099</id><snippet>st='''9605,Ace Ventura: Pet Detective,5
9606,Ace Ventura: Pet Detective,1
9607,Ace Ventura: Pet Detective,4
9608,Ace Ventura: Pet Detective,3
9609,Ace Ventura: Pet Detective,2
9610,Ace Ventura: Pet Detective,4
9611,Ace Ventura: Pet Detective,3
9612,Ace Ventura: Pet Detective,4
9613,Ace Ventura: Pet Detective,5
9614,Ace Ventura: Pet Detective,5
9615,Ace Ventura: Pet Detective,4
9616,Ace Ventura: Pet Detective,1
9617,Ace Ventura: Pet Detective,3
9618,Ace Ventura: Pet Detective,4
9619,Ace Ventura: Pet Detective,3
9620,Ace Ventura: Pet Detective,1
9621,Ace Ventura: Pet Detective,2
9622,Ace Ventura: Pet Detective,3
9623,Ace Ventura: Pet Detective,5
9624,Ace Ventura: Pet Detective,2
9625,Ace Ventura: Pet Detective,2
9626,Ace Ventura: Pet Detective,4
9627,Ace Ventura: Pet Detective,3
9628,Ace Ventura: Pet Detective,1'''
</snippet></ROW><ROW><id>14754099</id><snippet>import re

for line in st.splitlines():
    m=re.search(r'(^.*,5$)',line)
    if m: print m.group(0) 
</snippet></ROW><ROW><id>14754099</id><snippet>re.findall</snippet></ROW><ROW><id>14754099</id><snippet>print re.findall(r'(^.*,5$)',st, re.MULTILINE)
</snippet></ROW><ROW><id>14754099</id><snippet>print re.findall(r'^.*,5$',st, re.MULTILINE)
</snippet></ROW><ROW><id>14754099</id><snippet>.*</snippet></ROW><ROW><id>14754099</id><snippet>file</snippet></ROW><ROW><id>14754099</id><snippet>for line in st.splitlines():
    if line.endswith(',5'): print line
</snippet></ROW><ROW><id>14754099</id><snippet>with open(...,'rU') as infile:
</snippet></ROW><ROW><id>14754288</id><snippet>\n</snippet></ROW><ROW><id>14754288</id><snippet>\r\n</snippet></ROW><ROW><id>14754288</id><snippet> import io
 f= io.open("myfile.txt", "w", newline="\n")
 #note the io module requires you to write unicode
 f.write(unicode("asdasd\nasdasasd\n"))
 f.close()
</snippet></ROW><ROW><id>14754310</id><snippet>from django.db import models

    class Note(models.Model):
        content = models.CharField(max_length=20)
        related_to = models.ForeignKey(A_or_B)

    class A_or_B(models.Model):
        pass

    class A(A_or_B):
        name = models.CharField(max_length=20)
        addr = models.CharField(max_length=20)

    class B(A_or_B):
        nickname = models.CharField(max_length=20)
        mobile = models.CharField(max_length=20)
</snippet></ROW><ROW><id>14754310</id><snippet>a = A(name="some_name", addr="somewhere")
a.save()
a_note = Note(content="blablabla", related_to=a.id)
a_note.save()
notes_related_to_a = Note.objects.filter(related_to=a.id)
links_from_notes_to_a = {note_x.related_to.a for note_x in notes_related_to_a}
if len(links_from_notes_to_a) and links_from_notes_to_a[0] == a:
    print "It works!"
</snippet></ROW><ROW><id>14754310</id><snippet>related_to</snippet></ROW><ROW><id>14754310</id><snippet>A</snippet></ROW><ROW><id>14754310</id><snippet>B</snippet></ROW><ROW><id>14754341</id><snippet>y = mx + q
</snippet></ROW><ROW><id>14754341</id><snippet>y(x)</snippet></ROW><ROW><id>14754341</id><snippet>x(y)</snippet></ROW><ROW><id>14754341</id><snippet>(x1, y1)</snippet></ROW><ROW><id>14754341</id><snippet>(x2, y2)</snippet></ROW><ROW><id>14754341</id><snippet>y1 = m·x1 + q
y2 = m·x2 + q
</snippet></ROW><ROW><id>14754341</id><snippet>y2-y1 = m(x2-x1) =&gt; m = (y2-y1)/(x2-x1)
</snippet></ROW><ROW><id>14754341</id><snippet>q = y2-m·x2
</snippet></ROW><ROW><id>14754341</id><snippet>y = f(x)</snippet></ROW><ROW><id>14754341</id><snippet>m-&gt;+inf</snippet></ROW><ROW><id>14754341</id><snippet>x = f(y)</snippet></ROW><ROW><id>14754341</id><snippet>x = py + r</snippet></ROW><ROW><id>14754341</id><snippet>y</snippet></ROW><ROW><id>14754341</id><snippet>D</snippet></ROW><ROW><id>14754341</id><snippet>x</snippet></ROW><ROW><id>14754341</id><snippet>x</snippet></ROW><ROW><id>14754341</id><snippet>y = f(x)</snippet></ROW><ROW><id>14754341</id><snippet>x = f(y)</snippet></ROW><ROW><id>14754341</id><snippet>y</snippet></ROW><ROW><id>14754341</id><snippet>x</snippet></ROW><ROW><id>14754430</id><snippet>class MyClass(object):
    __slots__ = ['somefield']
    def __init__ (self):
        self.somefield = 4
        self.banana = 25      # error!
</snippet></ROW><ROW><id>14754695</id><snippet>for model in get_models():
    post_save.connect(send_email, sender = model, dispatch_uid='unique_identifier')
</snippet></ROW><ROW><id>14754695</id><snippet>from django.contrib.admin.models import LogEntry
...

def send_email(sender, **kwargs):
    if isinstance(sender, LogEntry):
        return
</snippet></ROW><ROW><id>14754695</id><snippet>class MyModel(models.Model):
    pass

class Library_Associates (MyModel):
    ...
class Info_Desk_Staff (MyModel):
    ...

def send_email(sender, **kwargs):
    if not isinstance(sender, MyModel):
        return
</snippet></ROW><ROW><id>14754776</id><snippet>for s in ius:
    s.item = repl_item
    s.save()
</snippet></ROW><ROW><id>14754914</id><snippet>len(xrange(start, stop, step))
</snippet></ROW><ROW><id>14754914</id><snippet>xrange.__len__</snippet></ROW><ROW><id>14754914</id><snippet>yield</snippet></ROW><ROW><id>14754959</id><snippet>def create_proxymodel(model_from, name=None, attrs=None, meta=None):
    attrs, meta = (attrs if attrs else {}, meta if meta else {})

    class  Meta:
        proxy = True
        app_label = model_from._meta.app_label

    for k, v in meta.items():
        setattr(Meta, k, v)

    attrs.update({'__module__': '', 'Meta': Meta})
    newmodel = type(name, (model_from,), attrs)

    return newmodel
</snippet></ROW><ROW><id>14754959</id><snippet>class InspectorCheckAdmin(admin.ModelAdmin):
    list_display = ('id', 'check_address', 'check_form', 'check_target_name')

class InspectorCheckAdminDeleted(admin.ModelAdmin): # or inherit from other ModelAdmin
    list_display = ('id', 'check_address', 'check_form', 'check_target_name', 'editor', 'updated')
    def queryset(self, request):
        return InspectorCheck.trash


#and in last step create and register both classes:

InspectorCheckDeleted = create_proxymodel(InspectorCheck, 'InspectorCheckDeleted', meta={
    'verbose_name': u'Inspector check (deleted)',
    'verbose_name_plural': u'Inspector checks (deleted)'}
)
admin.site.register(InspectorCheck, InspectorCheckAdmin)
admin.site.register(InspectorCheckDeleted, InspectorCheckAdminDeleted)
</snippet></ROW><ROW><id>14754980</id><snippet>python jobstore.py
alarms added:  2013-02-07 10:31:10.234000
alarms added:  2013-02-07 10:31:15.240000
alarms added:  2013-02-07 10:31:20.240000
</snippet></ROW><ROW><id>14754980</id><snippet>_dbURL = 'sqlite:///:memory:'</snippet></ROW><ROW><id>14754980</id><snippet>import sqlalchemy
print sqlalchemy.__version__ 
</snippet></ROW><ROW><id>14754980</id><snippet>Traceback (most recent call last):
  File "C:/stackoverflow/so/sqlalchemy.py", line 22, in &lt;module&gt;
    scheduler.add_jobstore(SQLAlchemyJobStore(url=_dbURL), 'default')
  File "C:\Progs\Python27\lib\site-packages\apscheduler\jobstores\sqlalchemy_store.py", line 29, in __init__
    self.engine = create_engine(url)
NameError: global name 'create_engine' is not defined

Process finished with exit code 1
</snippet></ROW><ROW><id>14754980</id><snippet>sqlalchemy.py</snippet></ROW><ROW><id>14755768</id><snippet>indeces = [i for i,id in enumerate(a['id']) if id in b]
suba = a[indeces]
print(suba)
&gt;&gt;&gt;array([(5, 'H', 128.05441039929008), (0, 'H', 88.15726964130869),
   (3, 'H', 92.98550136344437), (8, 'H', 111.13662092749307),
   (15, 'H', 91.44444608631304), (13, 'H', 108.2841293816308),
   (14, 'H', 64.41057325770373), (16, 'H', 81.50506434964355),
   (12, 'H', 97.79700070323196), (18, 'H', 118.34835768605957)], 
  dtype=[('id', '&lt;i4'), ('name', '|S1'), ('value', '&lt;f8')])
</snippet></ROW><ROW><id>14755996</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(setup="import re", stmt='''r=re.compile(r"\w+")\nfor i in range(10):\n r.search("  jkdhf  ")''')
18.547793477671938
&gt;&gt;&gt; timeit.timeit(setup="import re", stmt='''for i in range(10):\n re.search(r"\w+","  jkdhf  ")''')
106.47892003890324
</snippet></ROW><ROW><id>14755996</id><snippet>timeit.timeit()</snippet></ROW><ROW><id>14755996</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(setup="import re", stmt='''r=re.compile(r"\w+")\nfor i in range(10):\n r.search("  jkdhf  ")''')
7.248294908492429
&gt;&gt;&gt; timeit.timeit(setup="import re", stmt='''for i in range(10):\n re.search(r"\w+","  jkdhf  ")''')
18.26713670282241
</snippet></ROW><ROW><id>14756156</id><snippet>socket.py</snippet></ROW><ROW><id>14756156</id><snippet>import socket</snippet></ROW><ROW><id>14756156</id><snippet>AF_INET</snippet></ROW><ROW><id>14756156</id><snippet>mysocket.py</snippet></ROW><ROW><id>14756209</id><snippet>def nearxy(x,y,x0=0,y0=0,z=None):
   distance=[]
   for i in range(0,len(x)):   
   distance.append(abs(math.sqrt((x[i]-x0)**2+(y[i]-y0)**2)))
   if z is not None:
        blah blah
   return min(distance)
</snippet></ROW><ROW><id>14756209</id><snippet>nearxy(1,2)
</snippet></ROW><ROW><id>14756209</id><snippet> nearxy(1,2,z=3)
</snippet></ROW><ROW><id>14756351</id><snippet>(Cb in [77, 127]) and (Cr in [133, 173])
</snippet></ROW><ROW><id>14756351</id><snippet>Y</snippet></ROW><ROW><id>14756351</id><snippet>Y &gt; 80</snippet></ROW><ROW><id>14756351</id><snippet>Y</snippet></ROW><ROW><id>14756351</id><snippet>import sys
import numpy
import cv2

im = cv2.imread(sys.argv[1])
im_ycrcb = cv2.cvtColor(im, cv2.COLOR_BGR2YCR_CB)

skin_ycrcb_mint = numpy.array((0, 133, 77))
skin_ycrcb_maxt = numpy.array((255, 173, 127))
skin_ycrcb = cv2.inRange(im_ycrcb, skin_ycrcb_mint, skin_ycrcb_maxt)
cv2.imwrite(sys.argv[2], skin_ycrcb) # Second image

contours, _ = cv2.findContours(skin_ycrcb, cv2.RETR_EXTERNAL, 
        cv2.CHAIN_APPROX_SIMPLE)
for i, c in enumerate(contours):
    area = cv2.contourArea(c)
    if area &gt; 1000:
        cv2.drawContours(im, contours, i, (255, 0, 0), 3)
cv2.imwrite(sys.argv[3], im)         # Final image
</snippet></ROW><ROW><id>14756359</id><snippet>0</snippet></ROW><ROW><id>14756359</id><snippet>with open(os.path.expanduser("~/.ssh/id_rsa.pub")) as f:
    key = f.read()
    conn.sendall(key)
</snippet></ROW><ROW><id>14756407</id><snippet>setattr()</snippet></ROW><ROW><id>14756407</id><snippet>__setattr__</snippet></ROW><ROW><id>14756407</id><snippet>setattr()</snippet></ROW><ROW><id>14756407</id><snippet>__setattr__</snippet></ROW><ROW><id>14756407</id><snippet>super()</snippet></ROW><ROW><id>14756407</id><snippet>def Foo(Bar):
   def __setattr__(self, attr, value):
       # do something with attr and value
       super(Foo, self).__setattr__(attr, value)
</snippet></ROW><ROW><id>14756580</id><snippet>QMessageBox</snippet></ROW><ROW><id>14756580</id><snippet>AboutBox</snippet></ROW><ROW><id>14756580</id><snippet>AddUserDialog</snippet></ROW><ROW><id>14756580</id><snippet>import sys
from PyQt4 import QtCore, QtGui
from Authentification_1 import Ui_Fenetre_auth
from Acceuil_2 import Ui_MainWindow

class Acceuil(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = Acceuil()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14756580</id><snippet>def authentifier(val): #Slot method
    self.Acceuil = Acceuil(self) # You should always pass the parent to the child control
    self.Acceuil.show() #???
</snippet></ROW><ROW><id>14756580</id><snippet>MainWindow</snippet></ROW><ROW><id>14756580</id><snippet>ChildWindow</snippet></ROW><ROW><id>14756580</id><snippet>QApplication</snippet></ROW><ROW><id>14756580</id><snippet>ChildWindow</snippet></ROW><ROW><id>14756580</id><snippet>MainWindow</snippet></ROW><ROW><id>14756580</id><snippet>ChildWindow</snippet></ROW><ROW><id>14756580</id><snippet>import sys
from PyQt4 import QtCore, QtGui
from ChildWindow import ChildWindow

class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        QtCore.QTimer.singleShot(5000, self.showChildWindow)


    def showChildWindow(self):
        self.child_win = ChildWindow(self)
        self.child_win.show()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MainWindow()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14756580</id><snippet>import sys
from PyQt4 import QtCore, QtGui

class ChildWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.setWindowTitle("Child Window!")


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = ChildWindow()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14756633</id><snippet>__metaclass__</snippet></ROW><ROW><id>14756633</id><snippet>__new__</snippet></ROW><ROW><id>14756633</id><snippet>__init__</snippet></ROW><ROW><id>14756633</id><snippet>__call__</snippet></ROW><ROW><id>14756633</id><snippet>RealObject()</snippet></ROW><ROW><id>14756633</id><snippet>RealObject.__class__.__call__</snippet></ROW><ROW><id>14756633</id><snippet>type</snippet></ROW><ROW><id>14756633</id><snippet>type.__call__</snippet></ROW><ROW><id>14756633</id><snippet>__new__</snippet></ROW><ROW><id>14756633</id><snippet>__call__</snippet></ROW><ROW><id>14756633</id><snippet>__init__</snippet></ROW><ROW><id>14756633</id><snippet>class MetaMock(type):
    def __call__(cls, *args, **kw):
       obj = cls.__new__(cls, *args, **kw)
       if "mock" in kw:
           del kw["mock"]
       obj.__init__(*args, **kw)
       return obj

class RealObject(object):
    __metaclass__ = MetaMock
    ...
</snippet></ROW><ROW><id>14757032</id><snippet>_MAXCACHE</snippet></ROW><ROW><id>14757032</id><snippet>_compile()</snippet></ROW><ROW><id>14757032</id><snippet>@functools.lru_cache(maxsize=500, typed=True)</snippet></ROW><ROW><id>14757032</id><snippet>re._compile.cache_info()</snippet></ROW><ROW><id>14757032</id><snippet>_compile()</snippet></ROW><ROW><id>14757032</id><snippet>functools.lru_cache()</snippet></ROW><ROW><id>14757032</id><snippet>lru_cache</snippet></ROW><ROW><id>14757032</id><snippet>re</snippet></ROW><ROW><id>14757314</id><snippet>re.findall</snippet></ROW><ROW><id>14757314</id><snippet>&gt;&gt;&gt; data = "Product Version: 0.0.1 | Launch Switch: hello | Product Version: 2.3.4 | Launch Switch: world"
&gt;&gt;&gt; re.findall("Product Version: ([0-9.]+).*?Launch Switch: (\w+)", data)
[('0.0.1', 'hello'), ('2.3.4', 'world')]
</snippet></ROW><ROW><id>14757314</id><snippet>re.findall</snippet></ROW><ROW><id>14757511</id><snippet>self</snippet></ROW><ROW><id>14757511</id><snippet>get</snippet></ROW><ROW><id>14757511</id><snippet>post</snippet></ROW><ROW><id>14757511</id><snippet>def get(self, request, *args, **kwargs):
</snippet></ROW><ROW><id>14757535</id><snippet>COLUMNS</snippet></ROW><ROW><id>14757535</id><snippet>column_elms = [E("table-column",{"column-width":"41mm"})] * COLUMNS
</snippet></ROW><ROW><id>14757535</id><snippet>E()</snippet></ROW><ROW><id>14757535</id><snippet>column_elms = []
tcolumn = E("table-column",{"column-width":"41mm"})
for i in range(COLUMNS):
    column_elms.append(tcolumn)
</snippet></ROW><ROW><id>14757535</id><snippet>column_elms = [E("table-column",{"column-width":"41mm"}) for _ in xrange(COLUMNS)]
</snippet></ROW><ROW><id>14757535</id><snippet>E(..)</snippet></ROW><ROW><id>14757946</id><snippet>os.py</snippet></ROW><ROW><id>14758025</id><snippet>/tmp/pymp-eGnU6a/listener-BTHJ0E
</snippet></ROW><ROW><id>14758025</id><snippet>#!/usr/bin/env python
import multiprocessing, os, grp, pwd
manager = multiprocessing.Manager()
problematic_list = manager.list()

fullname = manager._address
dirname = os.path.dirname(fullname)

gid = grp.getgrnam('some_group').gr_gid
uid = pwd.getpwnam('root').pw_uid # should always be 0, but you never know

os.chown(dirname, uid, gid)
os.chmod(dirname, 0770)

os.chown(fullname, uid, gid)
os.chmod(fullname, 0770)

os.setgid(gid)
os.setuid(43121) # or whatever your user is
problematic_list.append('anything')
</snippet></ROW><ROW><id>14758032</id><snippet>(p.id)</snippet></ROW><ROW><id>14758032</id><snippet>p.id</snippet></ROW><ROW><id>14758032</id><snippet>(p.id,)</snippet></ROW><ROW><id>14758034</id><snippet>parentID = ndb.KeyProperty(kind='Chapter')
</snippet></ROW><ROW><id>14758034</id><snippet>ndb.KeyProperty(kind='ThisModelClass')
</snippet></ROW><ROW><id>14758311</id><snippet>rows = cur.fetchone()</snippet></ROW><ROW><id>14758311</id><snippet>cur.execute("SELECT * FROM seats WHERE Booked='N'")
for row in cur:
</snippet></ROW><ROW><id>14758311</id><snippet>row == None</snippet></ROW><ROW><id>14758311</id><snippet>Booked</snippet></ROW><ROW><id>14758311</id><snippet>N</snippet></ROW><ROW><id>14758311</id><snippet>cur.execute("SELECT * FROM seats WHERE Booked='N' AND CustID=?", (bookseats[0],))
row = cur.fetchone()
if row is not None and row[3] == "F":
    print "Seat Number:" , row[1] ,"Is now booked!"
    cur.execute("UPDATE seats SET Booked =N AND CustID=?", (bookseats[0]))
</snippet></ROW><ROW><id>14758311</id><snippet>bookseats[0]</snippet></ROW><ROW><id>14758311</id><snippet>F</snippet></ROW><ROW><id>14758311</id><snippet>UPDATE</snippet></ROW><ROW><id>14758311</id><snippet>cur.execute("UPDATE seats SET Booked='Y' WHERE CustID=?", (bookseats[0],))
</snippet></ROW><ROW><id>14758368</id><snippet>ParentClassCall()</snippet></ROW><ROW><id>14758368</id><snippet>server.serve_forever()</snippet></ROW><ROW><id>14758616</id><snippet>safe</snippet></ROW><ROW><id>14758616</id><snippet>{{ banana.peel | safe }}
</snippet></ROW><ROW><id>14758726</id><snippet>class AuthorSpider(BaseSpider):
    ...

    def __init__(self, articles):
        self.start_urls = []

        for line in articles:
            article = json.loads(line)
            self.start_urls.append(data['author_url'])
</snippet></ROW><ROW><id>14758726</id><snippet>from scrapy import signals
from scrapy.exceptions import DropItem

class DuplicatesPipeline(object):
    def __init__(self):
        self.ids_seen = set()

    def process_item(self, item, spider):
        if item['id'] in self.ids_seen:
            raise DropItem("Duplicate item found: %s" % item)
        else:
            self.ids_seen.add(item['id'])
            return item
</snippet></ROW><ROW><id>14758726</id><snippet>$ scrapy crawl authors -o authors.json -a articles=articles.json
</snippet></ROW><ROW><id>14758759</id><snippet>''.join()</snippet></ROW><ROW><id>14758759</id><snippet>unicode</snippet></ROW><ROW><id>14758759</id><snippet>str</snippet></ROW><ROW><id>14758759</id><snippet>&gt;&gt;&gt; utf8 = [u'\u0123'.encode('utf8'), u'\u0234'.encode('utf8')]
&gt;&gt;&gt; ''.join(utf8)
'\xc4\xa3\xc8\xb4'
&gt;&gt;&gt; u''.join(utf8)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc4 in position 0: ordinal not in range(128)
&gt;&gt;&gt; ''.join(utf8 + [u'unicode object'])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc4 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>14758850</id><snippet>id=("a","b")
start_L=(1,15)
stop_L=(16,40)

i=0
table=open('largefile.tsv',"r")
out1=(("file%s.txt")%(id[i]))
temp_out=open(out1,"w")

# start iterating through the file 
for line in table:
     stop=int(stop_L[i])

     # Split the line into a position piece, and a 
     # throw away variable based upon the 1st tab char
     position,the_rest= line.split("\t",1)

     # I'm ignoring start as you mentioned it was sorted in the file
     if int(position) &gt;= stop :
           # Close the current file
           temp_out.close()

           # Increment index so file name is pulled from id properly
           # If the index is past the length of the id list then 
           # break otherwise open the new file for writing
           i += 1  
           if (i &lt; len(id)):
             out1=(("file%s.txt")%(id[i]))
             temp_out=open(out1,"w")
           else:
             break 

     temp_out.write(line)
</snippet></ROW><ROW><id>14758850</id><snippet>1       1a      b       c       d       e
2       2a      b       c       d       e
3       3a      b       c       d       e
</snippet></ROW><ROW><id>14758962</id><snippet>doc/</snippet></ROW><ROW><id>14758962</id><snippet>doc/curlobject.html</snippet></ROW><ROW><id>14758962</id><snippet>setup</snippet></ROW><ROW><id>14758962</id><snippet>http://curl.haxx.se/libcurl/c/curl_easy_setopt.html</snippet></ROW><ROW><id>14758962</id><snippet>CURLOPT_CONNECTTIMEOUT

Pass a long. It should contain the maximum time in seconds that you allow the connection to the server to take. 
This only limits the connection phase, once it has connected, this option is of no more use. 
Set to zero to switch to the default built-in connection timeout - 300 seconds. 
See also the CURLOPT_TIMEOUT option.
</snippet></ROW><ROW><id>14759121</id><snippet>from scipy.ndimage import convolve

not_one = (mri_data != 1.0) # are you sure you want to compare with float like that?!

conv = convolve(not_one, np.ones((2*radius, 2*radius)))
all_not_one = (conv == (2*radius)**2)

mask[all_not_one] = 0
</snippet></ROW><ROW><id>14759237</id><snippet>memo</snippet></ROW><ROW><id>14759237</id><snippet>timeit</snippet></ROW><ROW><id>14759237</id><snippet>fib</snippet></ROW><ROW><id>14759237</id><snippet>memo</snippet></ROW><ROW><id>14759237</id><snippet>memo</snippet></ROW><ROW><id>14759374</id><snippet>cids = [c['id'] for c in completes]
for project in projects:
    project["complete"] = project["id"] in cids
</snippet></ROW><ROW><id>14759374</id><snippet>project["complete"]</snippet></ROW><ROW><id>14759374</id><snippet>True</snippet></ROW><ROW><id>14759374</id><snippet>False</snippet></ROW><ROW><id>14759374</id><snippet>1</snippet></ROW><ROW><id>14759374</id><snippet>0</snippet></ROW><ROW><id>14759374</id><snippet>    project["complete"] = int(project["id"] in cids)
</snippet></ROW><ROW><id>14759391</id><snippet>dct = {k: sorted(l, reverse=True)[:10 if k in ('a','c') else 20] 
    for k, l in dct.items()}
</snippet></ROW><ROW><id>14759391</id><snippet>slices = {
    'a': 10,
    'b': 10,
    'c': 20
}    

dct = {k: sorted(l, reverse=True)[:slices[k]] 
    for k, l in dct.items()}
</snippet></ROW><ROW><id>14759605</id><snippet>id = Column(BigInteger, primary_key=True)</snippet></ROW><ROW><id>14759605</id><snippet>class Adgroup(Base):
    __tablename__ = 'aw_adgroups'
    id = Column(Integer, Sequence('adgroup_seq'), primary_key=True)  # , primary_key=True
    adGroupId = Column(String(64)) 
    campaignId = Column(Integer,ForeignKey('aw_campaigns.id'))
    campaign = relationship("Campaign", backref = "adgroup")
    ...

class Campaign(Base):
    __tablename__ = 'aw_campaigns'
    id = Column(Integer, Sequence('adgroup_seq'), primary_key=True)
    campaignId = Column(String(64))
    ...
</snippet></ROW><ROW><id>14759605</id><snippet>ag = AdGroup(**kwargs)
camp = Campaign(**kwargs)
ag.campaign = camp
session.add(ag)
</snippet></ROW><ROW><id>14759698</id><snippet>MozillaCookieJar</snippet></ROW><ROW><id>14759698</id><snippet>FileCookieJar</snippet></ROW><ROW><id>14759698</id><snippet>Cookies are NOT loaded from the named file until either the .load() or
.revert() method is called.
</snippet></ROW><ROW><id>14759698</id><snippet>.load()</snippet></ROW><ROW><id>14759698</id><snippet># Netscape HTTP Cookie File</snippet></ROW><ROW><id>14759698</id><snippet># HTTP Cookie File</snippet></ROW><ROW><id>14759698</id><snippet>ignore_expires=True</snippet></ROW><ROW><id>14759698</id><snippet>load()</snippet></ROW><ROW><id>14759698</id><snippet>session_cookie.txt</snippet></ROW><ROW><id>14759698</id><snippet># Netscape HTTP Cookie File
.domain.com TRUE    /   FALSE   0   name    value
</snippet></ROW><ROW><id>14759698</id><snippet>import cookielib

cj = cookielib.MozillaCookieJar('session_cookie.txt')
cj.load()
print len(cj)
</snippet></ROW><ROW><id>14759698</id><snippet>0</snippet></ROW><ROW><id>14759698</id><snippet>cookielib</snippet></ROW><ROW><id>14759698</id><snippet>0</snippet></ROW><ROW><id>14759698</id><snippet>expires</snippet></ROW><ROW><id>14759698</id><snippet>for cookie in cj:
    # set cookie expire date to 14 days from now
    cookie.expires = time.time() + 14 * 24 * 3600
</snippet></ROW><ROW><id>14759698</id><snippet>0</snippet></ROW><ROW><id>14759698</id><snippet>0</snippet></ROW><ROW><id>14759698</id><snippet>ignore_discard=True</snippet></ROW><ROW><id>14759698</id><snippet>load()</snippet></ROW><ROW><id>14759890</id><snippet>u='''{ "paths": ["A:\\path\\to\\dir"],
  "anotherPath": "os.path.join(os.path.dirname( __file__ ), '..')"
}'''
s=u.encode('utf-8')
with open('test.json', 'wb') as f:
    f.write(s)
</snippet></ROW><ROW><id>14759890</id><snippet>'b'</snippet></ROW><ROW><id>14759890</id><snippet>test.json</snippet></ROW><ROW><id>14759890</id><snippet>working\\path\\to\\myProgram.conf</snippet></ROW><ROW><id>14759890</id><snippet>hexdump</snippet></ROW><ROW><id>14760096</id><snippet>data = urllib.urlopen("http://pastebin.ca/raw/2311595").read()
r_data = "".join(chr(int(data[i:i+2],16)) for i in range(0, len(data),2)) 
</snippet></ROW><ROW><id>14760096</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; b_data = binascii.unhexlify(data)
</snippet></ROW><ROW><id>14760096</id><snippet>&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; import cStringIO as StringIO
&gt;&gt;&gt; stream = StringIO.StringIO(b_data)
&gt;&gt;&gt; img = Image.open(stream)
&gt;&gt;&gt; img.size
(320, 240)
</snippet></ROW><ROW><id>14760112</id><snippet>OutputStream</snippet></ROW><ROW><id>14760112</id><snippet>InputStream</snippet></ROW><ROW><id>14760343</id><snippet>    name = request.params['name'] 
    app_dir = SEE_BELOW
    filename =  "%(app_dir)s/templates/%(name)s" % { 'app_dir':app_dir , 'name':name }
    filename =  "%s/templates/%s" % ( app_dir , name )
    with open(filename,'w') as file:
        file.write(new_comment)
</snippet></ROW><ROW><id>14760343</id><snippet>"tutorial:templates/{name}.html"</snippet></ROW><ROW><id>14760343</id><snippet>renderer_dict</snippet></ROW><ROW><id>14760349</id><snippet>gain_get_chapter()</snippet></ROW><ROW><id>14760349</id><snippet>double</snippet></ROW><ROW><id>14760349</id><snippet>replaygain.gain_get_chapter.restype = ctypes.c_double
</snippet></ROW><ROW><id>14760349</id><snippet>gain_init_analysis</snippet></ROW><ROW><id>14760349</id><snippet>gain_analyze_samples</snippet></ROW><ROW><id>14760374</id><snippet>query = " ".join(query.split())
</snippet></ROW><ROW><id>14760374</id><snippet>select * from users where name = 'Jura   X'</snippet></ROW><ROW><id>14760374</id><snippet>string.replace</snippet></ROW><ROW><id>14760374</id><snippet>def formattedQuery(query):
  lines = query.split('\n')
  r = []

  for line in lines:
    line = line.lstrip()
    line = line.rstrip()
    r.append(line)

  return ' '.join(r) 
</snippet></ROW><ROW><id>14760374</id><snippet>def formattedQuery(q): return " ".join([s.strip() for s in q.splitlines()])
</snippet></ROW><ROW><id>14760658</id><snippet>from BeautifulSoup import BeautifulStoneSoup
xml = '&lt;item&gt;&lt;title&gt;New Blog Entry: Common Sense Guide to Mitigating Insider Threats - Best Practice 16 (of 19)&lt;/title&gt;&lt;link&gt;http://www.cert.org/blogs/insider_threat/2013/02/common_sense_guide_to_mitigating_insider_threats_-_best_practice_16_of_19.html&lt;/link&gt;&lt;description&gt;This sixteenth of 19 blog posts about the fourth edition of the Common   Sense Guide to Mitigating Insider Threats describes Practice 16: Develop a formalized insider threat program.&lt;/description&gt;&lt;pubDate&gt;Wed, 06 Feb 2013 06:38:07 -0500&lt;/pubDate&gt;&lt;/item&gt;'


soup = BeautifulStoneSoup(xml)
item = soup('item')[0]
print item('pubdate'), item('link')
</snippet></ROW><ROW><id>14760764</id><snippet>z.lib</snippet></ROW><ROW><id>14760764</id><snippet>pip</snippet></ROW><ROW><id>14760892</id><snippet>name</snippet></ROW><ROW><id>14760892</id><snippet>&lt;INPUT type="radio" name="sex" value="Male"&gt; Male&lt;BR&gt;
&lt;INPUT type="radio" name="sex" value="Female"&gt; Female&lt;BR&gt;
</snippet></ROW><ROW><id>14760892</id><snippet>&lt;LABEL for="lastname"&gt;Last name: &lt;/LABEL&gt;
&lt;INPUT type="text" id="lastname" name="lastname"&gt;&lt;BR&gt;
</snippet></ROW><ROW><id>14760954</id><snippet>with open('students.csv', 'w') as st_file:
    writer = csv.writer(st_file)
    for a in Attendee.objects.filter(profile__status='student'):
        st_file.writerow(a.event_id, a.content_type, a.object_id, a.profile, ...)
</snippet></ROW><ROW><id>14760954</id><snippet>with open('students.csv', 'w') as st_file:
    reader = csv.reader(st_file)
    for row in reader:
        event = Event.objects.get(id=row[0])
        event.student_attendees.add(Student.objects.get(row[2]))
</snippet></ROW><ROW><id>14760954</id><snippet> python manage.py dumpdata app.event app.attendee --indent=4 &gt; events.json
</snippet></ROW><ROW><id>14760954</id><snippet> python manage.py loaddata events.json
</snippet></ROW><ROW><id>14761187</id><snippet>StopFilter</snippet></ROW><ROW><id>14761187</id><snippet>mystops = HashSet(Arrays.asList(['a','b','c']))
result = StopFilter(True, result, mystops)
</snippet></ROW><ROW><id>14761250</id><snippet>python C:\Python27\Scripts\django-admin.py startproject NAME</snippet></ROW><ROW><id>14761256</id><snippet>import re

text_table = &lt;something&gt; # Replace with whatever you do to load the table
template_text = &lt;something&gt; # Replace with whatever you do to load the template

row_splitter = re.compile("  +") # Finds a sequence of two or more spaces
rows = text_table.split('\n') # Split the table into a list of rows
headings_row = rows[0]
headings = row_splitter.split(headings_row)

# Next we get a list of dictionaries mapping template placeholders to values
template_dicts = []
for row in rows:
    values = row_splitter.split(row)
    template_dict = dict(zip(headings, values))
    template_dicts.append(template_dict)

# Next we substitute the values sets into the template one by one:
for template_dict in template_dicts:
    result_text = template_text
    for key, value in template_dict.iteritems():
        result_text = result_text.replace('&lt;'+key+'&gt;', value)
    print result_text # Or do whatever you like with it
</snippet></ROW><ROW><id>14761256</id><snippet>'Hello {name}, I see you are {age} years old'</snippet></ROW><ROW><id>14761305</id><snippet>{
 "kind": "youtube#searchListResponse",
 "etag": "\"Sja0zsjNVqBAv0D_Jpz6t1GyTzk/fm4P2RLxOAO0xdASI5BagD86H8A\"",
 "pageInfo": {
  "totalResults": 21,
  "resultsPerPage": 1
 },
 "nextPageToken": "CAEQAA",
 "items": [
  {
   "id": {
    "kind": "youtube#channel",
    "channelId": "UC_x5XG1OV2P6uZZ5FSM9Ttw"
   },
   "kind": "youtube#searchResult",
   "etag": "\"Sja0zsjNVqBAv0D_Jpz6t1GyTzk/q4hYefapiMoagc7b_3bYaVZvSJo\""
  }
 ]
}
</snippet></ROW><ROW><id>14761305</id><snippet>{
 "kind": "youtube#channelListResponse",
 "etag": "\"Sja0zsjNVqBAv0D_Jpz6t1GyTzk/ZouMU1qBRkF6DgacOLHE88Xk144\"",
 "pageInfo": {
  "totalResults": 1,
  "resultsPerPage": 1
 },
 "items": [
  {
   "id": "UC_x5XG1OV2P6uZZ5FSM9Ttw",
   "kind": "youtube#channel",
   "etag": "\"Sja0zsjNVqBAv0D_Jpz6t1GyTzk/khrrkvk8Tl0XWRZoN66zqloSJM4\"",
   "contentDetails": {
    "relatedPlaylists": {
     "uploads": "UU_x5XG1OV2P6uZZ5FSM9Ttw"
    }
   }
  }
 ]
}
</snippet></ROW><ROW><id>14761400</id><snippet>handle_request</snippet></ROW><ROW><id>14761400</id><snippet>handle_request</snippet></ROW><ROW><id>14761400</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>14761400</id><snippet>self.allow_reuse_address</snippet></ROW><ROW><id>14761479</id><snippet>def get_form_initial(self, step):
        if step =='2':
                x = self.get_cleaned_data_for_step('0') or {}
                if x['Color'].color  == 'Red':
</snippet></ROW><ROW><id>14761479</id><snippet>x['Color']</snippet></ROW><ROW><id>14761479</id><snippet>Products</snippet></ROW><ROW><id>14761479</id><snippet>x['Color'].__dict__</snippet></ROW><ROW><id>14761486</id><snippet>mmap</snippet></ROW><ROW><id>14761486</id><snippet>new_mmap_object</snippet></ROW><ROW><id>14761486</id><snippet>mmap_object</snippet></ROW><ROW><id>14761486</id><snippet>mmap_object</snippet></ROW><ROW><id>14761486</id><snippet>PyObject *</snippet></ROW><ROW><id>14761486</id><snippet>mmap</snippet></ROW><ROW><id>14761486</id><snippet>memoryview</snippet></ROW><ROW><id>14761486</id><snippet>mmap</snippet></ROW><ROW><id>14761573</id><snippet>class Mp3file(object):
    def __init__(self, filename):
        # read the file
        self.name = filename
        self.size = ...
        self.moddate = ...
        self.track_num = ...
        ...

    def to_xml(self):
        return ...

    def __lt__(self):
         ....
    def __eq__(self):
         ....
    ...

mp3list = []
for filename in directory:
    mp3list.append(Mp3file(filename))

def mp3list_to_xml(mylist):
    # write preamble
    for mf in sorted(mylist):
        x = mf.to_xml()
        # Add x to xml
    # write footer
</snippet></ROW><ROW><id>14761699</id><snippet>    client = gdata.contacts.client.ContactsClient()
    credentials = gdata.gauth.OAuth2Token(client_id = 'client_id',
                                          client_secret = 'client_secret',
                                          scope = 'https://www.google.com/m8/feeds/',
                                          user_agent = auth.user_agent, # This is from the headers sent to google when getting your access token (they don't return it)
                                          access_token = auth.access_token,
                                          refresh_token = auth.refresh_token)

    credentials.authorize(client)
    contacts = client.get_contacts()
</snippet></ROW><ROW><id>14761718</id><snippet>mylist = [2, 5]
mymax = max(mylist)
</snippet></ROW><ROW><id>14761803</id><snippet>groupby</snippet></ROW><ROW><id>14761803</id><snippet>transform</snippet></ROW><ROW><id>14761803</id><snippet>replace</snippet></ROW><ROW><id>14761803</id><snippet>df = pd.DataFrame([[1,1],[1,-1],[2,1],[2,2]], columns=list('ab'))
print(df)
#    a  b
# 0  1  1
# 1  1 -1
# 2  2  1
# 3  2  2

data = df.groupby(['a'])
def replace(group):
    mask = group&lt;0
    # Select those values where it is &lt; 0, and replace
    # them with the mean of the values which are not &lt; 0.
    group[mask] = group[~mask].mean()
    return group
print(data.transform(replace))
#    b
# 0  1
# 1  1
# 2  1
# 3  2
</snippet></ROW><ROW><id>14761824</id><snippet>from xml.etree import ElementTree
tree = ElementTree.fromstring('&lt;icon&gt;&lt;author&gt;Author Name&lt;/author&gt;&lt;/icon&gt;')
print tree.find('author').text
</snippet></ROW><ROW><id>14761845</id><snippet>pg = Page.objects.filter(order=data).exclude(pk=self.instance.pk)
</snippet></ROW><ROW><id>14762107</id><snippet>urlpatterns = patterns('',

    # ...
    url(r'^$', HomeView.as_view())

)
</snippet></ROW><ROW><id>14762107</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>14762107</id><snippet>HomeView</snippet></ROW><ROW><id>14762107</id><snippet>url.py</snippet></ROW><ROW><id>14762107</id><snippet>admin/</snippet></ROW><ROW><id>14762331</id><snippet>Y_indef</snippet></ROW><ROW><id>14762331</id><snippet>&gt;&gt;&gt; indef = Integral(x)
&gt;&gt;&gt; to_be_integrated, (free_var,) = indef.args
&gt;&gt;&gt; definite = Integral(to_be_integrated, (free_var, 1, 2))
</snippet></ROW><ROW><id>14762331</id><snippet>.args</snippet></ROW><ROW><id>14762331</id><snippet>.args</snippet></ROW><ROW><id>14762331</id><snippet>Integral</snippet></ROW><ROW><id>14762331</id><snippet>integrate</snippet></ROW><ROW><id>14762331</id><snippet>Integral</snippet></ROW><ROW><id>14762381</id><snippet>run</snippet></ROW><ROW><id>14762381</id><snippet>from pygletreactor import install
install()

from twisted.internet import reactor
from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet.protocol import Factory
from twisted.protocols.amp import AMP
from twisted.python.log import err

def connect():
    endpoint = TCP4ClientEndpoint(reactor, "127.0.0.1", 8750)
    factory = Factory()
    factory.protocol = AMP
    return endpoint.connect(factory)

d = connect()
def connected(protocol):
    return protocol.callRemote(
        RegisterUser,
        username=u'alice')
d.addCallback(connected)
d.addErrback(err)

reactor.run()
</snippet></ROW><ROW><id>14762381</id><snippet>Unhandled Error
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionRefusedError: Connection was refused by other side: 111: Connection refused.
</snippet></ROW><ROW><id>14762588</id><snippet>#!/usr/bin/env python

# example basictreeview.py

import pygtk
pygtk.require('2.0')
import gtk

class BasicTreeViewExample:

    def set_status(self, column, cell, model, iter):
        if 'inconsistent' in model.get_value(iter, 0):
            cell.set_property('inconsistent',True) 
        else:
            cell.set_property('inconsistent',False)
        return

    def delete_event(self, widget, event, data=None):
        gtk.main_quit()
        return False

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        self.window.set_title("Basic TreeView Example")

        self.window.set_size_request(200, 200)

        self.window.connect("delete_event", self.delete_event)

        self.treestore = gtk.TreeStore(str)

        for parent in range(4):
            piter = self.treestore.append(None, ['parent %i' % parent])
            for child in range(3):
                if child == 1:
                    self.treestore.append(piter, ['consistent'])
                else:
                    self.treestore.append(piter, ['inconsistent'])

        self.treeview = gtk.TreeView(self.treestore)

        self.tvcolumn0 = gtk.TreeViewColumn('Column 0')
        self.tvcolumn1 = gtk.TreeViewColumn('Column 1')

        self.treeview.append_column(self.tvcolumn0)
        self.treeview.append_column(self.tvcolumn1)

        self.text = gtk.CellRendererText()
        self.toggle = gtk.CellRendererToggle()

        self.tvcolumn0.pack_start(self.text, True)
        self.tvcolumn1.pack_start(self.toggle, True)

        self.tvcolumn0.add_attribute(self.text, 'text', 0)
        self.tvcolumn1.set_cell_data_func(self.toggle, self.set_status)

        self.window.add(self.treeview)

        self.window.show_all()

def main():
    gtk.main()

if __name__ == "__main__":
    tvexample = BasicTreeViewExample()
    main()
</snippet></ROW><ROW><id>14762601</id><snippet>axes</snippet></ROW><ROW><id>14762601</id><snippet>import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10, 0.1)
y1 = 0.05 * x**2
y2 = -1 *y1

fig, ax1 = plt.subplots()

ax2 = ax1.twinx()
ax1.plot(x, y1, 'g-')
ax2.plot(x, y2, 'b-')

ax1.set_xlabel('X data')
ax1.set_ylabel('Y1 data', color='g')
ax2.set_ylabel('Y2 data', color='b')

plt.show()
</snippet></ROW><ROW><id>14763157</id><snippet>-6c:39:-1b:XX:XX:XX
</snippet></ROW><ROW><id>14763157</id><snippet>94:39:e5:XX:XX:XX
</snippet></ROW><ROW><id>14763157</id><snippet>&gt;&gt;&gt; hex(0x100-0x6c)
'0x94'
&gt;&gt;&gt; hex(0x100-0x1b)
'0xe5'
</snippet></ROW><ROW><id>14763157</id><snippet>struct_sockaddr</snippet></ROW><ROW><id>14763157</id><snippet>c_uint8 * 14</snippet></ROW><ROW><id>14763157</id><snippet>c_char * 14</snippet></ROW><ROW><id>14763157</id><snippet>return ''.join(['%02x:' % c_uint8(pair).value for pair in
                ifr.ifr_hwaddr.sa_data[0:6]])[:-1]
</snippet></ROW><ROW><id>14763285</id><snippet>file</snippet></ROW><ROW><id>14763285</id><snippet>os.path.join(dir, file)</snippet></ROW><ROW><id>14763285</id><snippet>isdir</snippet></ROW><ROW><id>14763285</id><snippet>file</snippet></ROW><ROW><id>14763285</id><snippet>.foo/bar/baz</snippet></ROW><ROW><id>14763285</id><snippet>baz</snippet></ROW><ROW><id>14763285</id><snippet>baz</snippet></ROW><ROW><id>14763285</id><snippet>./baz</snippet></ROW><ROW><id>14763285</id><snippet>./baz</snippet></ROW><ROW><id>14763285</id><snippet>if(os.path.isdir(file)):
    newdir.append(os.path.join(dir, file))
</snippet></ROW><ROW><id>14763285</id><snippet>path = os.path.join(dir, file)
if os.path.isdir(path):
    newdir.append(path)
</snippet></ROW><ROW><id>14763285</id><snippet>os.walk</snippet></ROW><ROW><id>14763334</id><snippet>self.html.RunScript("""
    //javascript goes here
    // variable we wish to retrieve is called return_value
    document.title = return_value
    """)
r =  self.html.GetCurrentTitle()
</snippet></ROW><ROW><id>14763334</id><snippet>def OnPageNavigation(self, evt):
    url = evt.GetUrl()
    if url.startswith("retrievedata://data/"):
         data = url[len("retrievedata://data/"):]
         evt.Veto()
         // Do whatever you want with the data
</snippet></ROW><ROW><id>14763408</id><snippet>dateutil</snippet></ROW><ROW><id>14763408</id><snippet>d = datetime.datetime.now(pytz.timezone("America/New_York"))
dtz_string = d.strftime(fmt) + ' ' + "America/New_York"

d_string, tz_string = dtz_string.rsplit(' ', 1)
d2 = datetime.datetime.strptime(d_string, fmt)
tz2 = pytz.timezone(tz_string)

print dtz_string 
print d2.strftime(fmt) + ' ' + tz_string
</snippet></ROW><ROW><id>14763408</id><snippet>pytz</snippet></ROW><ROW><id>14763408</id><snippet>%Z</snippet></ROW><ROW><id>14763408</id><snippet>pytz.timezone()</snippet></ROW><ROW><id>14763408</id><snippet>strptime</snippet></ROW><ROW><id>14763497</id><snippet>while True:
  print "Make sure the number of digits are exactly 12 : "
  x = input()

  if len(str(x)) == 12:
    break
</snippet></ROW><ROW><id>14763497</id><snippet>for i in range(12):
  code[i] = int(x[i])
</snippet></ROW><ROW><id>14763762</id><snippet>subprocess.call()</snippet></ROW><ROW><id>14763762</id><snippet>subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)</snippet></ROW><ROW><id>14763762</id><snippet>Popen</snippet></ROW><ROW><id>14763762</id><snippet>Popen</snippet></ROW><ROW><id>14763762</id><snippet>class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</snippet></ROW><ROW><id>14763762</id><snippet>env</snippet></ROW><ROW><id>14763762</id><snippet>env={'JAVA_OPTS': 'foo'}</snippet></ROW><ROW><id>14763762</id><snippet>CLASSPATH</snippet></ROW><ROW><id>14763762</id><snippet>JAVA_OPTS</snippet></ROW><ROW><id>14763762</id><snippet>#!/usr/bin/env python2.7

import os
import subprocess

# Make a copy of the environment    
env = dict(os.environ)
env['JAVA_OPTS'] = 'foo'
subprocess.call(['java', '-jar', 'temp.jar'], env=env)
</snippet></ROW><ROW><id>14763891</id><snippet>3.5 % 0.1</snippet></ROW><ROW><id>14763891</id><snippet>0.1</snippet></ROW><ROW><id>14763891</id><snippet>&gt;&gt;&gt; print(3.5 % 0.1)
0.1
&gt;&gt;&gt; print(3.5 % 0.1 == 0.1)
False
</snippet></ROW><ROW><id>14763891</id><snippet>3.5 % 0.1</snippet></ROW><ROW><id>14763891</id><snippet>0.099999999999999811</snippet></ROW><ROW><id>14763891</id><snippet>str(0.099999999999999811)</snippet></ROW><ROW><id>14763891</id><snippet>0.1</snippet></ROW><ROW><id>14763891</id><snippet>&gt;&gt;&gt; 3.5 % 0.1
0.099999999999999811
&gt;&gt;&gt; repr(3.5 % 0.1)
'0.099999999999999811'
&gt;&gt;&gt; str(3.5 % 0.1)
'0.1'
</snippet></ROW><ROW><id>14763891</id><snippet>3.5 % 0.1</snippet></ROW><ROW><id>14763891</id><snippet>0.099999999999999811</snippet></ROW><ROW><id>14763891</id><snippet>0.0</snippet></ROW><ROW><id>14763891</id><snippet>3.5/0.1</snippet></ROW><ROW><id>14763891</id><snippet>34</snippet></ROW><ROW><id>14763891</id><snippet>35</snippet></ROW><ROW><id>14763891</id><snippet>3.5/0.1 * 0.1 + 3.5%0.1</snippet></ROW><ROW><id>14763891</id><snippet>3.5999999999999996</snippet></ROW><ROW><id>14763891</id><snippet>3.5</snippet></ROW><ROW><id>14763891</id><snippet>//</snippet></ROW><ROW><id>14763891</id><snippet>3.5//0.1</snippet></ROW><ROW><id>14763891</id><snippet>34.0</snippet></ROW><ROW><id>14763891</id><snippet>3.5//0.1 * 0.1 + 3.5%0.1</snippet></ROW><ROW><id>14763891</id><snippet>3.5</snippet></ROW><ROW><id>14763891</id><snippet>divmod(3.5, 0.1)</snippet></ROW><ROW><id>14763891</id><snippet>(34.0, 0.09999999999999981)</snippet></ROW><ROW><id>14763891</id><snippet>(35.0, 0.0)</snippet></ROW><ROW><id>14763891</id><snippet>(34.0, almost-0.1)</snippet></ROW><ROW><id>14763891</id><snippet>Decimal</snippet></ROW><ROW><id>14763891</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('3.5') % Decimal('0.1')
Decimal('0.0')
&gt;&gt;&gt; print(Decimal('3.5') % Decimal('0.1'))
0.0
&gt;&gt;&gt; (Decimal(7)/2) % (Decimal(1)/10)
Decimal('0.0')
</snippet></ROW><ROW><id>14763891</id><snippet>Decimal</snippet></ROW><ROW><id>14763891</id><snippet>float</snippet></ROW><ROW><id>14763891</id><snippet>float</snippet></ROW><ROW><id>14764183</id><snippet>'messages'</snippet></ROW><ROW><id>14764183</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14764186</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>14764186</id><snippet>&gt;&gt;&gt; map(operator.itemgetter(1), a)
['e', 'o', 'h', 'i']
</snippet></ROW><ROW><id>14764186</id><snippet>a.get</snippet></ROW><ROW><id>14764186</id><snippet>&gt;&gt;&gt; map(a.get, a)
[4, 2, 3, 5]
</snippet></ROW><ROW><id>14764186</id><snippet>a.get(key)</snippet></ROW><ROW><id>14764186</id><snippet>a[key]</snippet></ROW><ROW><id>14764186</id><snippet>&gt;&gt;&gt; [a[key] for key in a]
[4, 2, 3, 5]
</snippet></ROW><ROW><id>14764186</id><snippet>&gt;&gt;&gt; heapq.nlargest(4, a, a.get)
['first', 'second', 'third', 'fourth']
</snippet></ROW><ROW><id>14764271</id><snippet>shutdown /r
</snippet></ROW><ROW><id>14764271</id><snippet>shutdown /l
</snippet></ROW><ROW><id>14764346</id><snippet>settings.py</snippet></ROW><ROW><id>14764346</id><snippet>MyBloatedConfig.get_instance()</snippet></ROW><ROW><id>14764346</id><snippet>settings.py</snippet></ROW><ROW><id>14764379</id><snippet>math.log</snippet></ROW><ROW><id>14764379</id><snippet>&gt;&gt;&gt; math.log(1000, 10)
2.9999999999999996
</snippet></ROW><ROW><id>14764379</id><snippet>&gt;&gt;&gt; limit = 12345
&gt;&gt;&gt; power = 10
&gt;&gt;&gt; while power &lt; limit:
...     print power
...     power = power * 10
... 
10
100
1000
10000
</snippet></ROW><ROW><id>14764389</id><snippet>Alias</snippet></ROW><ROW><id>14764389</id><snippet>AliasMatch</snippet></ROW><ROW><id>14764389</id><snippet>.conf</snippet></ROW><ROW><id>14764389</id><snippet>Directory</snippet></ROW><ROW><id>14764389</id><snippet>.conf</snippet></ROW><ROW><id>14764389</id><snippet>/static/</snippet></ROW><ROW><id>14764389</id><snippet>request.path</snippet></ROW><ROW><id>14764389</id><snippet>if 'logged_in' not in session \
    and request.endpoint != 'login' \
    and '/static/' not in request.path:
</snippet></ROW><ROW><id>14764622</id><snippet>\n</snippet></ROW><ROW><id>14764622</id><snippet>data = '' # contains last line of a read block if it didn't finish with \n
in_get, in_done, reading_file, ended = False, False, False, False
while not ended:
  if len(data) &gt; 100:  # &lt; update
    f.write( data )    # &lt;
    data = ''          # &lt;
  data += connection.recv(4096)
  i = data.find('\n')
  while i &gt;= 0 and not ended:
    line = data[:i]
    data = data[i+1:]
    if in_get:
      filename = line
      reading_file = True
      f = open(filename,'wb')
      in_get = False
    elif in_done:
      if line != filename:  # done inside file content
        f.write( 'done\n' + line + '\n' )
      else:
        f.close()
        reading_file = False
      in_done = False
    else:
      if line == 'get' and not reading_file:
        in_get = True
      elif line == 'done':
        in_done = True
      elif line == 'end' and not reading_file:
        ended = True
        break;
      else:
        f.write( line + '\n' )
    i = data.find('\n')
</snippet></ROW><ROW><id>14764681</id><snippet>struct</snippet></ROW><ROW><id>14764681</id><snippet>def pack_bigint(i):
    b = bytearray()
    while i:
        b.append(i &amp; 0xFF)
        i &gt;&gt;= 8
    return b
</snippet></ROW><ROW><id>14764681</id><snippet>def pack_bigint(i):
    bl = (i.bit_length() + 7) // 8
    fmt = '&lt;{}B'.format(bl)
    # ...
</snippet></ROW><ROW><id>14764681</id><snippet>unpack</snippet></ROW><ROW><id>14764681</id><snippet>def unpack_bigint(b):
    b = bytearray(b) # in case you're passing in a bytes/str
    return sum((1 &lt;&lt; (bi*8)) * bb for (bi, bb) in enumerate(b))
</snippet></ROW><ROW><id>14765056</id><snippet>def integral2(function, n=1000, start=0, stop=100): return (float(1)/n) * sum([eval(function) for x in [(float(x) / n) for x in range(start*n, (stop*n)+1)]])
</snippet></ROW><ROW><id>14765056</id><snippet>integral</snippet></ROW><ROW><id>14765056</id><snippet>integral2</snippet></ROW><ROW><id>14765056</id><snippet>integral2</snippet></ROW><ROW><id>14765056</id><snippet>(stop*n)+1-(start*n)</snippet></ROW><ROW><id>14765056</id><snippet>integral</snippet></ROW><ROW><id>14765056</id><snippet>n</snippet></ROW><ROW><id>14765056</id><snippet>In [64]: integral('x**2')
Out[64]: 333833.4999999991
In [68]: integral2('x**2')
Out[68]: 333338.33334999956
</snippet></ROW><ROW><id>14765056</id><snippet>In [69]: %timeit integral2('x**2')
1 loops, best of 3: 704 ms per loop

In [70]: %timeit integral('x**2')
100 loops, best of 3: 7.32 ms per loop
</snippet></ROW><ROW><id>14765056</id><snippet>integral</snippet></ROW><ROW><id>14765056</id><snippet>def integral3(function, n=1000, start=0, stop=100): return (float(stop-start)/n) * sum([eval(function) for x in [start+(i*float(stop-start)/n) for i in range(n)]])

In [77]: %timeit integral3('x**2')
100 loops, best of 3: 7.1 ms per loop
</snippet></ROW><ROW><id>14765225</id><snippet>return false</snippet></ROW><ROW><id>14765260</id><snippet>break</snippet></ROW><ROW><id>14765260</id><snippet>itertools</snippet></ROW><ROW><id>14765260</id><snippet>takewhile()</snippet></ROW><ROW><id>14765369</id><snippet>su</snippet></ROW><ROW><id>14765383</id><snippet>Lib/test/test_decimal.py</snippet></ROW><ROW><id>14765421</id><snippet>Theta1_grad(:, 1)</snippet></ROW><ROW><id>14765421</id><snippet>Theta1_grad</snippet></ROW><ROW><id>14765421</id><snippet>m</snippet></ROW><ROW><id>14765421</id><snippet>Theta1_grad(:, 2:end)</snippet></ROW><ROW><id>14765421</id><snippet>1</snippet></ROW><ROW><id>14765421</id><snippet>.</snippet></ROW><ROW><id>14765421</id><snippet>A * B</snippet></ROW><ROW><id>14765421</id><snippet>A .* B</snippet></ROW><ROW><id>14765421</id><snippet> Theta1_grad(:, 2:end) = Theta1_grad(:, 2:end) ./ m + ((lambda/m) * Theta1(:, 2:end));
</snippet></ROW><ROW><id>14765421</id><snippet>Theta1</snippet></ROW><ROW><id>14765422</id><snippet>top_dist</snippet></ROW><ROW><id>14765422</id><snippet>dist = 0</snippet></ROW><ROW><id>14765422</id><snippet>wavefront</snippet></ROW><ROW><id>14765422</id><snippet>top_dist[node] = dist</snippet></ROW><ROW><id>14765422</id><snippet>wavefront</snippet></ROW><ROW><id>14765422</id><snippet>wavefront</snippet></ROW><ROW><id>14765422</id><snippet>top_dist</snippet></ROW><ROW><id>14765422</id><snippet>next_wavefront</snippet></ROW><ROW><id>14765422</id><snippet>dist</snippet></ROW><ROW><id>14765422</id><snippet>wavefront = next_wavefront</snippet></ROW><ROW><id>14765422</id><snippet>top_dist</snippet></ROW><ROW><id>14765422</id><snippet>min(top_dist(e1), top_dist(e2)) + 1</snippet></ROW><ROW><id>14765428</id><snippet>IndexError: list assignment index out of range</snippet></ROW><ROW><id>14765428</id><snippet>code.append(x[i])</snippet></ROW><ROW><id>14765428</id><snippet>list</snippet></ROW><ROW><id>14765428</id><snippet>while True:
  print("Make sure the number of digits are exactly 12 : ")
  x = input()
  if len(x) != 12:   # if the length is not 12
      continue       # ask again

  code = list(x)
</snippet></ROW><ROW><id>14765652</id><snippet>&gt;&gt;&gt; from reverend.thomas import Bayes
&gt;&gt;&gt; g = Bayes()    # guesser
&gt;&gt;&gt; g.train('french','La souris est rentrÃ©e dans son trou.')
&gt;&gt;&gt; g.train('english','my tailor is rich.')
&gt;&gt;&gt; g.train('french','Je ne sais pas si je viendrai demain.')
&gt;&gt;&gt; g.train('english','I do not plan to update my website soon.')

&gt;&gt;&gt; print g.guess('Jumping out of cliffs it not a good idea.')
[('english', 0.99990000000000001), ('french', 9.9999999999988987e-005)]

&gt;&gt;&gt; print g.guess('Demain il fera trÃ¨s probablement chaud.')
[('french', 0.99990000000000001), ('english', 9.9999999999988987e-005)]
</snippet></ROW><ROW><id>14765658</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>14765658</id><snippet>import os.path
import shutil

input_filename = raw_input("Enterfile ")
base_name, extension = os.path.splitext(input_filename)
output_filename = base_name + '.asd'

shutil.copyfile(input_filename, output_filename)
</snippet></ROW><ROW><id>14765746</id><snippet>from multiprocessing import Process, Queue

import random
import time


def firstresult(func1, func2):
    queue = Queue()
    proc1 = Process(target=func1,args=(queue,))
    proc2 = Process(target=func2, args=(queue,))
    proc1.start();proc2.start()
    result = queue.get()
    proc1.terminate(); proc2.terminate()
    return result

def algo1(queue):
    time.sleep(random.uniform(0,1))
    queue.put("algo 1")

def algo2(queue):
    time.sleep(random.uniform(0,1))
    queue.put("algo 2")

print firstresult(algo1, algo2)
</snippet></ROW><ROW><id>14765831</id><snippet>cls</snippet></ROW><ROW><id>14765831</id><snippet>&gt;&gt;&gt; class MetaC(type):
...   def  __init__(cls, name, bases, attrs):
...     print 'cls: ', cls
...     print 'cls is instance of MetaC: ', isinstance(cls, MetaC)
... 
&gt;&gt;&gt; class C(object):
...   __metaclass__ = MetaC
... 
cls: &lt;class '__main__.C'&gt;
cls is instance of MetaC: True
</snippet></ROW><ROW><id>14766001</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
var json = {
    "Chevy": ["chev1", "chev2", "chev3"],
    "Dodge": ["dodge1", "dodge2", "dodge3"],
    "Ford": ["ford1", "ford2", "ford3"]
};

function carMake () {
    select = document.getElementById('slct1');
    select.options.length = 0;
    for(make in json) {
        select.options[select.options.length] = new Option(make, make);
    }
}

function carModel(sel) {
    var car_make = sel.options[sel.selectedIndex].value
    select = document.getElementById('slct2');
    select.options.length = 0;
    for(var i=0;i&lt;json[car_make].length;i++) {
        select.options[select.options.length] = new Option(json[car_make][i], i);
    }
}
&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
Choose Car Make:
&lt;select id="slct1" onchange="carModel(this)"&gt;&lt;/select&gt;
&lt;script&gt; carMake(); &lt;/script&gt;

Choose Car Model:
&lt;select id="slct2" name="slct2"&gt;&lt;/select&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14766001</id><snippet>from &lt;your-app&gt;.models import Make
from &lt;your-app&gt;.models import Model
import json

json_dict = {}
for car_make in Make.objects.all():
    json_dict[car_make] = Model.objects.filter(make=car_make)
json_data = json.dumps(json_dict)
</snippet></ROW><ROW><id>14766001</id><snippet>json_data</snippet></ROW><ROW><id>14766128</id><snippet>pip freeze</snippet></ROW><ROW><id>14766128</id><snippet>lib/python2.7/site-packages/</snippet></ROW><ROW><id>14766130</id><snippet>arr = [1,2,3,4,5,6]
i = 0
while i &lt; len(arr):
    print arr[i]
    i = i + 1
</snippet></ROW><ROW><id>14766326</id><snippet>__dict__</snippet></ROW><ROW><id>14766326</id><snippet>str</snippet></ROW><ROW><id>14766326</id><snippet>&gt;&gt;&gt; class X(object):
...  pass
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; setattr(x, 'some attribute', 'foo')
&gt;&gt;&gt; x.__dict__
{'some attribute': 'foo'}
&gt;&gt;&gt; x.__dict__['some attribute']
'foo'
</snippet></ROW><ROW><id>14766356</id><snippet>import scipy.signal
import numpy as np
import matplotlib.pyplot as plt

im = plt.imread('example.jpg')
im /= 255.   # normalise to 0-1, it's easier to work in float space

# make some kind of kernel, there are many ways to do this...
t = 1 - np.abs(np.linspace(-1, 1, 21))
kernel = t.reshape(21, 1) * t.reshape(1, 21)
kernel /= kernel.sum()   # kernel should sum to 1!  :) 

# convolve 2d the kernel with each channel
r = scipy.signal.convolve2d(im[:,:,0], kernel, mode='same')
g = scipy.signal.convolve2d(im[:,:,1], kernel, mode='same')
b = scipy.signal.convolve2d(im[:,:,2], kernel, mode='same')

# stack the channels back into a 8-bit colour depth image and plot it
im_out = np.dstack([r, g, b])
im_out = (im_out * 255).astype(np.uint8) 

plt.subplot(2,1,1)
plt.imshow(im)
plt.subplot(2,1,2)
plt.imshow(im_out)
plt.show()
</snippet></ROW><ROW><id>14766440</id><snippet>import subprocess
subprocess.call(["shutdown", "-f", "-r", "-t", "10", "-c", '"MESSAGE HERE"'])
</snippet></ROW><ROW><id>14766527</id><snippet>__init__</snippet></ROW><ROW><id>14766527</id><snippet>self.targetdir</snippet></ROW><ROW><id>14766527</id><snippet>targetdir</snippet></ROW><ROW><id>14766527</id><snippet>&gt;&gt;&gt; class Test:
    var = 1
    def __init__(self):
        var = 2         
        print self.var  # Object variable
        print var       # Local variable
    def func(self):
        print self.var
        print var       # this will fail, because there's no local var in this scope


&gt;&gt;&gt; a = Test()
1
2
&gt;&gt;&gt; a.func()
1

Traceback (most recent call last):
  File "&lt;pyshell#12&gt;", line 1, in &lt;module&gt;
    a.func()
  File "&lt;pyshell#10&gt;", line 9, in func
    print var
NameError: global name 'var' is not defined
</snippet></ROW><ROW><id>14766872</id><snippet>__contains__</snippet></ROW><ROW><id>14766872</id><snippet>in</snippet></ROW><ROW><id>14766872</id><snippet>in</snippet></ROW><ROW><id>14766872</id><snippet>if circle1 in circle2:
</snippet></ROW><ROW><id>14766872</id><snippet>circle2</snippet></ROW><ROW><id>14766872</id><snippet>__contains__</snippet></ROW><ROW><id>14766872</id><snippet>circle2.__contains__(circle1)
</snippet></ROW><ROW><id>14766872</id><snippet>__contains__</snippet></ROW><ROW><id>14766872</id><snippet>in</snippet></ROW><ROW><id>14766978</id><snippet>for k in dict.items():
    if k[0] in newdicts:
        if k[1] not in newdicts[k[0]]:  # Do this test before adding.
            newdicts[k[0]].append(k[1])
    else:
        newdicts[k[0]]=[k[1]]
</snippet></ROW><ROW><id>14766978</id><snippet>value</snippet></ROW><ROW><id>14766978</id><snippet>Set</snippet></ROW><ROW><id>14766978</id><snippet>defaultdict</snippet></ROW><ROW><id>14766978</id><snippet>dict</snippet></ROW><ROW><id>14766978</id><snippet>merge</snippet></ROW><ROW><id>14766978</id><snippet>from collections import defaultdict

def merge(*d):
    newdicts = defaultdict(set)  # Define a defaultdict
    for each_dict in d:

        # dict.items() returns a list of (k, v) tuple.
        # So, you can directly unpack the tuple in two loop variables.
        for k, v in each_dict.items():  
            newdicts[k].add(v)

    # And if you want the exact representation that you have shown   
    # You can build a normal dict out of your newly built dict.
    unique = {key: list(value) for key, value in newdicts.items()}
    return unique
</snippet></ROW><ROW><id>14767135</id><snippet>def __init__(self,parent=None):
        'constructor'
        Frame.__init__(self, parent)
        self.pack()
        Ed.make_widgets(self)
        Ed.new_problem(self)
        self.triesCount = 0
</snippet></ROW><ROW><id>14767135</id><snippet>def evaluate(self):
        'handles button "Enter" clicks by comparing answer in entry to correct  result'
        if eval(self.entry1.get()) == int(self.entry2.get()):
            showinfo(title = "Yes!",message = "You got it!")
            self.new_problem()
        else:
            self.entry2.delete(0,END)
            self.triesCount += 1
</snippet></ROW><ROW><id>14767352</id><snippet>[k for k in my_dict if k[0] == dog]
</snippet></ROW><ROW><id>14767556</id><snippet>@register.assignment_tag(takes_context=True)
def unread_messages_count(context):
    user = context['request'].user
    return len(user.messages_unread.all())

{% unread_messages_count as cnt %}
{% if cnt %}
   foo
{% endif %}
</snippet></ROW><ROW><id>14767564</id><snippet>yield</snippet></ROW><ROW><id>14767564</id><snippet>n</snippet></ROW><ROW><id>14767564</id><snippet>n</snippet></ROW><ROW><id>14767564</id><snippet>n</snippet></ROW><ROW><id>14767564</id><snippet>scipy</snippet></ROW><ROW><id>14767564</id><snippet>full_output</snippet></ROW><ROW><id>14767564</id><snippet>output_mode</snippet></ROW><ROW><id>14767564</id><snippet>"list"</snippet></ROW><ROW><id>14767564</id><snippet>"last"</snippet></ROW><ROW><id>14767619</id><snippet>if val =&lt; '0' &amp;&amp; val &gt;= '9'</snippet></ROW><ROW><id>14767619</id><snippet>if val &gt;= '0' and val &lt;= '9'</snippet></ROW><ROW><id>14767619</id><snippet>if '0' &lt;= val &lt;= '9'</snippet></ROW><ROW><id>14767815</id><snippet>import numpy as np
import PIL

image = PIL.Image.open("14767594_in.png")

image_data = np.asarray(image)
image_data_blue = image_data[:,:,2]

median_blue = np.median(image_data_blue)

non_empty_columns = np.where(image_data_blue.max(axis=0)&gt;median_blue)[0]
non_empty_rows = np.where(image_data_blue.max(axis=1)&gt;median_blue)[0]

boundingBox = (min(non_empty_rows), max(non_empty_rows), min(non_empty_columns), max(non_empty_columns))

print boundingBox
</snippet></ROW><ROW><id>14767815</id><snippet>(78, 156, 27, 166)
</snippet></ROW><ROW><id>14767815</id><snippet>(27, 78)</snippet></ROW><ROW><id>14767815</id><snippet>166 - 27 = 139</snippet></ROW><ROW><id>14767815</id><snippet>156 - 78 = 78</snippet></ROW><ROW><id>14767815</id><snippet>def create_sample_set(mask, N=36, shape_color=[0,0,1.,1.]):
    rv = np.ones((N, mask.shape[0], mask.shape[1], 4),dtype=np.float)
    mask = mask.astype(bool)
    for i in range(N):
        for j in range(3):
            current_color_layer = rv[i,:,:,j]
            current_color_layer[:,:] *= np.random.random()
            current_color_layer[mask] = np.ones((mask.sum())) * shape_color[j]
    return rv
</snippet></ROW><ROW><id>14767815</id><snippet># create set of sample image and plot them
image = PIL.Image.open("14767594_in.png")
image_data = np.asarray(image)
image_data_blue = image_data[:,:,2]
median_blue = np.median(image_data_blue)
sample_images = create_sample_set(image_data_blue&gt;median_blue)
plt.figure(1)
for i in range(36):
    plt.subplot(6,6,i+1)
    plt.imshow(sample_images[i,...])
    plt.axis("off")
plt.subplots_adjust(0,0,1,1,0,0)
</snippet></ROW><ROW><id>14767815</id><snippet>shape_color</snippet></ROW><ROW><id>14767815</id><snippet>create_sample_set(...)</snippet></ROW><ROW><id>14767815</id><snippet># determine per-pixel variablility, std() over all images
variability = sample_images.std(axis=0).sum(axis=2)

# show image of these variabilities
plt.figure(2)
plt.imshow(variability, cmap=plt.cm.gray, interpolation="nearest", origin="lower")
</snippet></ROW><ROW><id>14767815</id><snippet># determine bounding box
mean_variability = variability.mean()
non_empty_columns = np.where(variability.min(axis=0)&lt;mean_variability)[0]
non_empty_rows = np.where(variability.min(axis=1)&lt;mean_variability)[0]
boundingBox = (min(non_empty_rows), max(non_empty_rows), min(non_empty_columns), max(non_empty_columns))

# plot and print boundingBox
bb = boundingBox
plt.plot([bb[2], bb[3], bb[3], bb[2], bb[2]],
         [bb[0], bb[0],bb[1], bb[1], bb[0]],
         "r-")
plt.xlim(0,variability.shape[1])
plt.ylim(variability.shape[0],0)

print boundingBox
plt.show()
</snippet></ROW><ROW><id>14767815</id><snippet>import numpy as np
import PIL
import matplotlib.pyplot as plt


def create_sample_set(mask, N=36, shape_color=[0,0,1.,1.]):
    rv = np.ones((N, mask.shape[0], mask.shape[1], 4),dtype=np.float)
    mask = mask.astype(bool)
    for i in range(N):
        for j in range(3):
            current_color_layer = rv[i,:,:,j]
            current_color_layer[:,:] *= np.random.random()
            current_color_layer[mask] = np.ones((mask.sum())) * shape_color[j]
    return rv

# create set of sample image and plot them
image = PIL.Image.open("14767594_in.png")
image_data = np.asarray(image)
image_data_blue = image_data[:,:,2]
median_blue = np.median(image_data_blue)
sample_images = create_sample_set(image_data_blue&gt;median_blue)
plt.figure(1)
for i in range(36):
    plt.subplot(6,6,i+1)
    plt.imshow(sample_images[i,...])
    plt.axis("off")
plt.subplots_adjust(0,0,1,1,0,0)

# determine per-pixel variablility, std() over all images
variability = sample_images.std(axis=0).sum(axis=2)

# show image of these variabilities
plt.figure(2)
plt.imshow(variability, cmap=plt.cm.gray, interpolation="nearest", origin="lower")

# determine bounding box
mean_variability = variability.mean()
non_empty_columns = np.where(variability.min(axis=0)&lt;mean_variability)[0]
non_empty_rows = np.where(variability.min(axis=1)&lt;mean_variability)[0]
boundingBox = (min(non_empty_rows), max(non_empty_rows), min(non_empty_columns), max(non_empty_columns))

# plot and print boundingBox
bb = boundingBox
plt.plot([bb[2], bb[3], bb[3], bb[2], bb[2]],
         [bb[0], bb[0],bb[1], bb[1], bb[0]],
         "r-")
plt.xlim(0,variability.shape[1])
plt.ylim(variability.shape[0],0)

print boundingBox
plt.show()
</snippet></ROW><ROW><id>14768082</id><snippet>from itertools import groupby
from operator import itemgetter

rows=[
    ('a' , 'b' , 'c' , 'd' , 1),
    ('a' , 'b' , 'c' , 'd' , 2),
    ('z' , 'x' , 'v' , 'n' , 3),
    ('z' , 'x' , 'v' , 'n' , 4)]



out = []
for key,group in groupby(rows, itemgetter(0,1,2,3)):
    new_row = list(key)
    for v in group:
        new_row.append(v[4])
    out.append(new_row)

print out
</snippet></ROW><ROW><id>14768082</id><snippet>[['a', 'b', 'c', 'd', 1, 2], ['z', 'x', 'v', 'n', 3, 4]]
</snippet></ROW><ROW><id>14768082</id><snippet>from collections import defaultdict

rows=[
    ('a' , 'b' , 'c' , 'd' , 1),
    ('a' , 'b' , 'c' , 'd' , 2),
    ('z' , 'x' , 'v' , 'n' , 3),
    ('z' , 'x' , 'v' , 'n' , 4)]



d = defaultdict(list)
for r in rows:
    d[tuple(r[0:4])].append(r[4])

print d[('a' , 'b' , 'c' , 'd')]
print d[('z' , 'x' , 'v' , 'n')]
</snippet></ROW><ROW><id>14768082</id><snippet>[1, 2]
[3, 4]
</snippet></ROW><ROW><id>14768181</id><snippet>self.fail("test")</snippet></ROW><ROW><id>14768181</id><snippet>@classmethod
def setUpClass(cls):
   cls.flag = False

def setUp(self):
   if self.flag:
       self.fail("conditions not met")
</snippet></ROW><ROW><id>14768202</id><snippet>__slots__</snippet></ROW><ROW><id>14768242</id><snippet>class score():
#initialize the score info 
    def __init__(self):
        self.score = 0
        self.num_enemies = 5
        self.num_lives = 3

    # Score Info
    def setScore(self, num):
        self.score = num

    # Enemy Info
    def getEnemies(self):
        return self.num_enemies

    # Lives Info
    def getLives(foo): #foo is still the same object as self!!
        return foo.num_lives
        #Works but don't do this because it is confusing
</snippet></ROW><ROW><id>14768276</id><snippet>setup(
        ...
        options={
                "py2exe": {
                        "includes": ["decimal"]
                }
        }
)
</snippet></ROW><ROW><id>14768516</id><snippet>self.tray = KStatusNotifierItem(self)</snippet></ROW><ROW><id>14768516</id><snippet>self.tray = KStatusNotifierItem("someID", self)</snippet></ROW><ROW><id>14768971</id><snippet>TestCase1.setUpClass()</snippet></ROW><ROW><id>14769207</id><snippet>\S</snippet></ROW><ROW><id>14769207</id><snippet>Python 2</snippet></ROW><ROW><id>14769207</id><snippet>Python 3</snippet></ROW><ROW><id>14769207</id><snippet>\S</snippet></ROW><ROW><id>14769207</id><snippet>\s</snippet></ROW><ROW><id>14769207</id><snippet>ASCII flag</snippet></ROW><ROW><id>14769207</id><snippet>[^ \t\n\r\f\v]</snippet></ROW><ROW><id>14769207</id><snippet>[^
  \t\n\r\f\v]</snippet></ROW><ROW><id>14769207</id><snippet>\x1e</snippet></ROW><ROW><id>14769207</id><snippet>U+001E</snippet></ROW><ROW><id>14769207</id><snippet>\x1e\x1e5.5.30-log</snippet></ROW><ROW><id>14769207</id><snippet>unicode whitespace</snippet></ROW><ROW><id>14769207</id><snippet>\S</snippet></ROW><ROW><id>14769207</id><snippet>\S</snippet></ROW><ROW><id>14769207</id><snippet>[^ \t\n\r\f\v]</snippet></ROW><ROW><id>14769207</id><snippet>ASCII</snippet></ROW><ROW><id>14769207</id><snippet>\x1e</snippet></ROW><ROW><id>14769212</id><snippet>keyword_list = ['motorcycle', 'bike', 'cycle', 'dirtbike']

if any(word in all_text for word in keyword_list):
    print 'found one of em'
</snippet></ROW><ROW><id>14769312</id><snippet>i, j, k</snippet></ROW><ROW><id>14769312</id><snippet>a[len(a)]</snippet></ROW><ROW><id>14769397</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>14769513</id><snippet>g = URLGrabber((http_headers=(("Accept-Encoding", "gzip"),)))
g.opts._set_attributes(grabber=g)
try:
    PyCurlFileObject.orig_setopts
except AttributeError:
    PyCurlFileObject.orig_setopts = PyCurlFileObject._set_opts

    def setopts(instance, opts={}):
        PyCurlFileObject.orig_setopts(instance, opts)
        grabber = instance.opts.grabber
        grabber.is_compressed = False

        def hdr_retrieve(buf):
            r = PyCurlFileObject._hdr_retrieve(instance, buf)
            if "content-encoding" in buf.lower() and "zip" in buf.lower():
                grabber.is_compressed = True
            return r

        instance.curl_obj.setopt(pycurl.HEADERFUNCTION, hdr_retrieve)
    PyCurlFileObject._set_opts = setopts
</snippet></ROW><ROW><id>14770086</id><snippet>from django.db import IntegrityError</snippet></ROW><ROW><id>14770379</id><snippet>%apply (int DIM1, double* IN_ARRAY1) {(int len, double* H_)}
</snippet></ROW><ROW><id>14770379</id><snippet>%typemap(in) double TUPLE[ANY]
{
   ...
}
</snippet></ROW><ROW><id>14770379</id><snippet>%apply double TUPLE[3] {double H_[3]}
</snippet></ROW><ROW><id>14770379</id><snippet>-tmsearch</snippet></ROW><ROW><id>14770538</id><snippet>filter2D</snippet></ROW><ROW><id>14770538</id><snippet>CV_32F</snippet></ROW><ROW><id>14770538</id><snippet>CV_8U</snippet></ROW><ROW><id>14770538</id><snippet>CV_8U</snippet></ROW><ROW><id>14770726</id><snippet>fig, ax = plt.subplots(1,2, figsize=(10,4))

x = [2,4,3,6,1,7]
y = [1,2,3,4,5,6]

ax[0].plot(x, y)

ax[1].plot(np.arange(len(x)), y)
ax[1].set_xticklabels(x)
</snippet></ROW><ROW><id>14770811</id><snippet>AnswerEntry = Entry(root)</snippet></ROW><ROW><id>14770811</id><snippet>StartGame()</snippet></ROW><ROW><id>14770811</id><snippet>global AnswerEntry
AnswerEntry = Entry(root)
</snippet></ROW><ROW><id>14770811</id><snippet>AnswerEntry</snippet></ROW><ROW><id>14770811</id><snippet>submit_answer()</snippet></ROW><ROW><id>14770811</id><snippet>AnswerEntry.get()</snippet></ROW><ROW><id>14770827</id><snippet>f.set_figheight(15)
f.set_figwidth(15)
</snippet></ROW><ROW><id>14770827</id><snippet>f, axs = plt.subplots(2,2,figsize=(15,15))
</snippet></ROW><ROW><id>14770910</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

# ... the rest of your URLconf goes here ...

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>14770910</id><snippet>DEBUG = True</snippet></ROW><ROW><id>14770947</id><snippet>from . import apple</snippet></ROW><ROW><id>14770947</id><snippet>__init__.py</snippet></ROW><ROW><id>14770947</id><snippet>fruit</snippet></ROW><ROW><id>14770947</id><snippet>from fruit import apple</snippet></ROW><ROW><id>14770947</id><snippet>import fruit.apple</snippet></ROW><ROW><id>14770947</id><snippet>import fruit; fruit.apple</snippet></ROW><ROW><id>14770947</id><snippet>apple</snippet></ROW><ROW><id>14770947</id><snippet>fruit/__init__.py</snippet></ROW><ROW><id>14770947</id><snippet>import fruit; fruit.apple</snippet></ROW><ROW><id>14770947</id><snippet>fruit</snippet></ROW><ROW><id>14770947</id><snippet>juice</snippet></ROW><ROW><id>14770947</id><snippet>apple</snippet></ROW><ROW><id>14770947</id><snippet>apple</snippet></ROW><ROW><id>14770947</id><snippet>__init__.py</snippet></ROW><ROW><id>14770947</id><snippet>from . import juice</snippet></ROW><ROW><id>14770947</id><snippet>from fruit.apple import juice</snippet></ROW><ROW><id>14770948</id><snippet>lst = [{k: v} for k, v in lst]
</snippet></ROW><ROW><id>14770948</id><snippet>lst</snippet></ROW><ROW><id>14771110</id><snippet>    guess=int(input(num_x, "+", num_y, "=\n")
    if guess==(num_x+num_y):
</snippet></ROW><ROW><id>14771110</id><snippet>SyntaxError</snippet></ROW><ROW><id>14771110</id><snippet>SyntaxError</snippet></ROW><ROW><id>14771306</id><snippet>    for cle,val in cliStat.items():
        if val.nb_users:
            print val
</snippet></ROW><ROW><id>14771336</id><snippet>from twisted.web import resource 

from twisted.web import server 
from twisted.internet import reactor

class MyResource(resource.Resource):
    isLeaf=False

    def __init__(self, color='blue'):
        resource.Resource.__init__(self)
        self.color = color

    def render(self,req):
        return "&lt;body bgcolor='%s' /&gt;" % self.color

    def getChild(self,path,request):
        return MyResource('blue' if path == '' else 'red')

f=server.Site(MyResource())
reactor.listenTCP(8888,f)
reactor.run()
</snippet></ROW><ROW><id>14771392</id><snippet>raise</snippet></ROW><ROW><id>14771392</id><snippet>BaseException</snippet></ROW><ROW><id>14771392</id><snippet>raise</snippet></ROW><ROW><id>14771392</id><snippet>globals.myException</snippet></ROW><ROW><id>14771593</id><snippet>repr(decData)</snippet></ROW><ROW><id>14771593</id><snippet>'"{\'name\' : \'journal2\'}"'
</snippet></ROW><ROW><id>14771593</id><snippet>{'name' : 'journal2'}</snippet></ROW><ROW><id>14771593</id><snippet>json</snippet></ROW><ROW><id>14771593</id><snippet>decData</snippet></ROW><ROW><id>14771593</id><snippet>"This is not JSON"</snippet></ROW><ROW><id>14771593</id><snippet>postData</snippet></ROW><ROW><id>14771593</id><snippet>u'This is not JSON'</snippet></ROW><ROW><id>14771593</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; decData = '''"{'name' : 'journal2'}"'''
&gt;&gt;&gt; json.loads(decData)
u"{'name' : 'journal2'}"
&gt;&gt;&gt; json.loads(json.loads(decData))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 326, in loads
    return _default_decoder.decode(s)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 366, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 382, in raw_decode
    obj, end = self.scan_once(s, idx)
ValueError: Expecting property name: line 1 column 1 (char 1)
</snippet></ROW><ROW><id>14771749</id><snippet>$pull</snippet></ROW><ROW><id>14771749</id><snippet>for rdata in RawData.objects(webpage__image_list=image):
    # remove image from the image_list
    rdata.update_one(pull__webpage__image_list=image)
</snippet></ROW><ROW><id>14771749</id><snippet>rdata</snippet></ROW><ROW><id>14771749</id><snippet>OperationError: Update failed [Cannot apply $pull/$pullAll modifier to non-array]</snippet></ROW><ROW><id>14771749</id><snippet>image_list</snippet></ROW><ROW><id>14771749</id><snippet>image_list</snippet></ROW><ROW><id>14771875</id><snippet>re.findall(r'"[^"]*"', line)
</snippet></ROW><ROW><id>14771875</id><snippet>re.findall(r'"([^"]*)"', line)
</snippet></ROW><ROW><id>14771875</id><snippet>.findall()</snippet></ROW><ROW><id>14771875</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'"([^"]*)"', 'cc "1/11/2A" "1/20+21/1 1" "XX" 0')
['1/11/2A', '1/20+21/1 1', 'XX']
</snippet></ROW><ROW><id>14771875</id><snippet>[^...]</snippet></ROW><ROW><id>14771875</id><snippet>[^"]</snippet></ROW><ROW><id>14771925</id><snippet>for artifact in artifacts:
    if not artifact.name in contents:
        contents.append(artifact.name)

    with ZipFile('deploy.zip', 'w') as deploy:
        if os.path.isfile(artifact.source):
            deploy.write(artifact.source, artifact.target)
        else:
            for base, dirs, files in os.walk(artifact.source):
                for file_ in files:
                    source = os.path.join(base, file_)
                    target = os.path.join(base[base.index(artifact.target):], file_)
                    deploy.write(source, target)
</snippet></ROW><ROW><id>14771925</id><snippet>deploy.zip</snippet></ROW><ROW><id>14771925</id><snippet>with ZipFile('deploy.zip', 'w') as deploy:
    for artifact in artifacts:
        if not artifact.name in contents:
            contents.append(artifact.name)

        if os.path.isfile(artifact.source):
            deploy.write(artifact.source, artifact.target)
        else:
            for base, dirs, files in os.walk(artifact.source):
                for file_ in files:
                    source = os.path.join(base, file_)
                    target = os.path.join(base[base.index(artifact.target):], file_)
                    deploy.write(source, target)
</snippet></ROW><ROW><id>14772137</id><snippet>unicode</snippet></ROW><ROW><id>14772137</id><snippet>str</snippet></ROW><ROW><id>14772137</id><snippet>tName.encode('utf8')</snippet></ROW><ROW><id>14772163</id><snippet>def handle_keyerror(try_key):
    try:
        your_dictionary[try_key]
    except KeyError: 
        return None
    return try_key
</snippet></ROW><ROW><id>14772163</id><snippet>dict.get(key, default=None)</snippet></ROW><ROW><id>14772163</id><snippet>key</snippet></ROW><ROW><id>14772313</id><snippet>__contains__</snippet></ROW><ROW><id>14772313</id><snippet>(a == b).any()</snippet></ROW><ROW><id>14772313</id><snippet>b</snippet></ROW><ROW><id>14772313</id><snippet>(a == b).all(np.arange(a.ndim - b.ndim, a.ndim)).any()</snippet></ROW><ROW><id>14772313</id><snippet>a</snippet></ROW><ROW><id>14772313</id><snippet>b</snippet></ROW><ROW><id>14772313</id><snippet>a</snippet></ROW><ROW><id>14772313</id><snippet>np.in1d</snippet></ROW><ROW><id>14772313</id><snippet>np.ones(10, dtype=bool).any()</snippet></ROW><ROW><id>14772313</id><snippet>__contains__</snippet></ROW><ROW><id>14772313</id><snippet>__contains__</snippet></ROW><ROW><id>14772313</id><snippet>searchsorted</snippet></ROW><ROW><id>14772313</id><snippet>lexsort</snippet></ROW><ROW><id>14772313</id><snippet>scipy.spatial.cKDTree</snippet></ROW><ROW><id>14772313</id><snippet># Unfortunatly you need to use structured arrays:
sorted = np.ascontiguousarray(a).view([('', a.dtype)] * a.shape[-1]).ravel()

# Actually at this point, you can also use np.in1d, if you already have many b
# then that is even better.

sorted.sort()

b_comp = np.ascontiguousarray(b).view(sorted.dtype)
ind = sorted.searchsorted(b_comp)

result = sorted[ind] == b_comp
</snippet></ROW><ROW><id>14772313</id><snippet>b</snippet></ROW><ROW><id>14772313</id><snippet>b</snippet></ROW><ROW><id>14772313</id><snippet>a</snippet></ROW><ROW><id>14772313</id><snippet>np.in1d</snippet></ROW><ROW><id>14772313</id><snippet>np.ascontiguousarray</snippet></ROW><ROW><id>14772316</id><snippet>None</snippet></ROW><ROW><id>14772629</id><snippet>import time
import sys
from PyQt4 import QtCore, QtGui


class TimeSleep(QtCore.QThread):
    def __init__(self, parent=None):
        QtCore.QThread.__init__(self, parent)
        self.parent = parent

    def run(self):
        print("start sleep")
        time.sleep(5)
        print("stop sleep")
        self.parent.glabel.setText(u"Done")


class AnyWidget(QtGui.QWidget):
    def __init__(self, *args):

        QtGui.QWidget.__init__(self, *args)
        self.setWindowTitle("PETHARD")
        boxlay = QtGui.QHBoxLayout(self)
        frame = QtGui.QFrame(self)  # Фрейм
        frame.setFrameShape(QtGui.QFrame.StyledPanel)
        frame.setFrameShadow(QtGui.QFrame.Raised)

        gridlay = QtGui.QGridLayout(
            frame)  # Менеджер размещения элементов во фрейме
        label = QtGui.QLabel(u"Welcome", frame)  # Текстовая метка.
        self.glabel = label
        gridlay.addWidget(label, 0, 0)
        button1 = QtGui.QPushButton(u"Load From MC", frame)
        self.connect(button1, QtCore.SIGNAL("clicked()"), self.ts)
        gridlay.addWidget(button1, 1, 0)
        boxlay.addWidget(frame)

    def ts(self):
        self.glabel.setText(u"Waiting...")
        self.thread = TimeSleep(parent=self)
        self.thread.start()


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    aw = AnyWidget()
    aw.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14772755</id><snippet>sudo service apache2 reload
</snippet></ROW><ROW><id>14772920</id><snippet>new_list = [k for k in old_list if len(k) &gt;= 2]</snippet></ROW><ROW><id>14773158</id><snippet>    for row in tariff_link_soup('table', {'id' : 'tariffTable'})[0].tbody('tr'):                                                                                                                                                               
        tds = row('td')                                                                                                                                                   
        #print tds[0].text,tds[1].text,tds[2].text,tds[3].text,tds[4].text,tds[5].text
        monthly_prices = unicode(tds[0].text).encode('utf8').replace("Â£","").replace("FREE","0").replace("Free","0").strip()
        dev_prices     = unicode(tds[1].text).encode('utf8').replace("Â£","").replace("FREE","0").replace("Free","0").strip()
        tariff_lengths = unicode(tds[2].text).encode('utf8').strip()
        minutes        = unicode(tds[3].text).encode('utf8').strip()
        texts          = unicode(tds[4].text).encode('utf8').strip()
        data           = unicode(tds[5].text).encode('utf8').strip()
        device_names   = unicode(dev_names).encode('utf8').strip()
</snippet></ROW><ROW><id>14773341</id><snippet>from ctypes import *

class abc(Structure):
    _pack_ = 1
    _fields_ = [
        ('r1',c_ubyte),
        ('r2',c_ubyte),
        ('p1',c_ubyte),
        ('id',c_uint)]
</snippet></ROW><ROW><id>14773343</id><snippet>def example_templatetag():
  def get_something():
    return get_want_you_want_from_db()
  return dict(get_something=get_something)
</snippet></ROW><ROW><id>14773343</id><snippet>app.context_processor(example_templatetag)
</snippet></ROW><ROW><id>14773343</id><snippet>{% set data_you_wanted=get_something() %}
{{ data_you_wanted }}
</snippet></ROW><ROW><id>14773429</id><snippet>data = open("filename.txt").readlines()
</snippet></ROW><ROW><id>14773821</id><snippet>s3</snippet></ROW><ROW><id>14773821</id><snippet>s3.upload_file</snippet></ROW><ROW><id>14773896</id><snippet>raw_message = """From: Santa Claus &lt;santa@aintreal.no&gt;
To: Some Dude &lt;some@du.de&gt;
Subject: I have lost your presents.

Dude, i am so sorry.
"""

import email
msg = email.message_from_string(raw_message)
print(msg['Subject'])  # "I have lost your presents."
</snippet></ROW><ROW><id>14773896</id><snippet>msg</snippet></ROW><ROW><id>14773896</id><snippet>email.message.Message</snippet></ROW><ROW><id>14774273</id><snippet>other = {'A':'B', 'B':'A'}
</snippet></ROW><ROW><id>14774273</id><snippet>serving</snippet></ROW><ROW><id>14774273</id><snippet>'A'</snippet></ROW><ROW><id>14774273</id><snippet>other[serving]</snippet></ROW><ROW><id>14774273</id><snippet>'B'</snippet></ROW><ROW><id>14774273</id><snippet>serving</snippet></ROW><ROW><id>14774273</id><snippet>'B'</snippet></ROW><ROW><id>14774273</id><snippet>other[serving]</snippet></ROW><ROW><id>14774273</id><snippet>'A'</snippet></ROW><ROW><id>14774273</id><snippet>In [1]: import collections

In [2]: score = collections.Counter()

In [3]: score['A'] += 1

In [4]: score['A'] += 1

In [5]: score['B'] += 1

In [6]: score
Out[6]: Counter({'A': 2, 'B': 1})
</snippet></ROW><ROW><id>14774273</id><snippet>    if serving == "A":
        for i in range(2):
            if random() &lt; probA:
                scoreA += 1
            else:
                scoreB += 1
    else:
        for i in range(2):
            if random() &lt; probB:
                scoreB +=1
            else:
                scoreA += 1
</snippet></ROW><ROW><id>14774273</id><snippet>serve</snippet></ROW><ROW><id>14774273</id><snippet>prob</snippet></ROW><ROW><id>14774273</id><snippet>A</snippet></ROW><ROW><id>14774273</id><snippet>B</snippet></ROW><ROW><id>14774273</id><snippet>def serve(prob, player):
    if random.random() &lt; prob:
        return player
    else:
        return other[player]
</snippet></ROW><ROW><id>14774273</id><snippet>    for i in range(2):
        winner = serve(prob[serving], serving)
        score[winner] += 1
</snippet></ROW><ROW><id>14774273</id><snippet>import random
import collections
other = {'A':'B', 'B':'A'}

def serve(prob, player):
    if random.random() &lt; prob:
        return player
    else:
        return other[player]

def simOneSet(probA, probB):
    prob = {'A':probA, 'B':probB}
    score = collections.Counter()

    serving = "A"
    while not setOver(score['A'], score['B']):
        for i in range(2):
            winner = serve(prob[serving], serving)
            score[winner] += 1
        if score['A'] == 10 and score['B'] == 10:
            winner = serve(prob[serving], serving)
            score[winner] += 1
            serving = winner

    return score['A'], score['B']  

def setOver(scoreA, scoreB):
    return max(scoreA, scoreB) &gt;= 21

print(simOneSet(0.5,0.5))
</snippet></ROW><ROW><id>14774977</id><snippet>literal_eval</snippet></ROW><ROW><id>14775096</id><snippet>doOperation()</snippet></ROW><ROW><id>14775096</id><snippet>doOperation()</snippet></ROW><ROW><id>14775096</id><snippet>doOperation()</snippet></ROW><ROW><id>14775096</id><snippet>a</snippet></ROW><ROW><id>14775096</id><snippet>b</snippet></ROW><ROW><id>14775096</id><snippet>a = operation1()
b = operation2()

c = doOperation(a, b)

del a, b
</snippet></ROW><ROW><id>14775096</id><snippet>a</snippet></ROW><ROW><id>14775096</id><snippet>b</snippet></ROW><ROW><id>14775096</id><snippet>def foo():
    a = operation1()
    b = operation2()

    c = doOperation(a, b)
</snippet></ROW><ROW><id>14775136</id><snippet>print_hello</snippet></ROW><ROW><id>14775136</id><snippet>self.print_button.clicked.connect(lambda: self.print_hello(self))
</snippet></ROW><ROW><id>14775263</id><snippet>print</snippet></ROW><ROW><id>14775263</id><snippet>print 'Some Text',
</snippet></ROW><ROW><id>14775263</id><snippet>.rstrip('\n')</snippet></ROW><ROW><id>14775347</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob("testdir/*")
['testdir/a.txt', 'testdir/b.txt', 'testdir/d.ext', 'testdir/c.ExT2']
&gt;&gt;&gt; [f for f in glob.glob("testdir/*") if f.lower().endswith((".ext", ".ext2"))]
['testdir/d.ext', 'testdir/c.ExT2']
</snippet></ROW><ROW><id>14775453</id><snippet>ax1.xaxis.get_major_formatter().set_powerlimits((0, 1))
</snippet></ROW><ROW><id>14775453</id><snippet>ScalerFormatter</snippet></ROW><ROW><id>14775453</id><snippet>FuncFormatter</snippet></ROW><ROW><id>14775453</id><snippet>scale_pow = 2
def my_formatter_fun(x, p):
    return "%.2f" % (x * (10 ** scale_pow)))
ax1.get_xaxis().set_major_formatter(ticker.FuncFormatter(my_formatter_fun))
ax1.set_xlabel('my label ' + '$10^{{{0:d}}}$'.format(scale_pow))
</snippet></ROW><ROW><id>14775453</id><snippet>FuncFormatter</snippet></ROW><ROW><id>14775497</id><snippet>ir.configure_parameter</snippet></ROW><ROW><id>14775497</id><snippet>class my_configuration(osv.osv_memory):
    _inherit = ['res.confi.settings']
    _columns = {
       'default_deadline' : fields.integer('Days per default', help="""Help field"""),
    }
    ...
    def set_default_deadline(self, cr, uid, ids, context=None):
        config = self.browse(cr, uid, ids)
        config = config and config[0]
        val = '%s' %(config.default_deadline) or '10'
        self.pool.geet('ir.config_parameter').set_param(cr,uid, 'key_value', val)
        return True
</snippet></ROW><ROW><id>14775497</id><snippet>def _get_deadline_date(self, cr, uid, context=None):
    val = self.pool.get('ir.config_parameter').get_param(cr, uid, 'key_value')
    try:
        val = int(val)
    except: 
        # Just in case...
        val = 30
    return (datetime.now() + timedelta(days=val)).strftime('%Y,%m,%d')

_defaults = {
    'deadline_date': lambda s, cr, uid, c: s._get_deadline_date(self, cr, uid,     context=c),
}
</snippet></ROW><ROW><id>14775555</id><snippet>ipython -i yourscript.py</snippet></ROW><ROW><id>14775555</id><snippet>In [1]: %run test.py
&lt;exception occurs&gt;
In [2]: %debug test.py
</snippet></ROW><ROW><id>14775604</id><snippet>linregress</snippet></ROW><ROW><id>14775604</id><snippet>from scipy.stats import linregress
X = pd.Series(np.arange(10))
Y = pd.Series(np.arange(10))

In [4]: linregress(X, Y)
Out[4]: (1.0, 0.0, 1.0, 4.3749999999999517e-80, 0.0)
</snippet></ROW><ROW><id>14775604</id><snippet>linregress(df['col_X'], df['col_Y'])
</snippet></ROW><ROW><id>14775604</id><snippet>apply</snippet></ROW><ROW><id>14775604</id><snippet>grouped.apply(lambda x: linregress(x['col_X'], x['col_Y']))
</snippet></ROW><ROW><id>14775715</id><snippet>print str(Time)[-1]</snippet></ROW><ROW><id>14775806</id><snippet>parser.add_argument("--input", help='Input file');
parser.add_argument("--output", help='Output file');
</snippet></ROW><ROW><id>14775806</id><snippet>--</snippet></ROW><ROW><id>14775806</id><snippet>--</snippet></ROW><ROW><id>14775806</id><snippet>--</snippet></ROW><ROW><id>14776085</id><snippet>cert</snippet></ROW><ROW><id>14776085</id><snippet>You can also pass "verify" the path to a "CA_BUNDLE" file for private certs.
You can also set the "REQUESTS_CA_BUNDLE" environment variable.
</snippet></ROW><ROW><id>14776085</id><snippet>chrome://settings/certificates</snippet></ROW><ROW><id>14776085</id><snippet>export</snippet></ROW><ROW><id>14776140</id><snippet>\d+</snippet></ROW><ROW><id>14776140</id><snippet>import re
re.split(r'(\d+)', line)
</snippet></ROW><ROW><id>14776140</id><snippet>\d</snippet></ROW><ROW><id>14776140</id><snippet>\d+</snippet></ROW><ROW><id>14776140</id><snippet>re.split()</snippet></ROW><ROW><id>14776140</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'(\d+)', 'A123E')
['A', '123', 'E']
</snippet></ROW><ROW><id>14776188</id><snippet>*/1 * * * * . /path-to-env/bin/activate &amp;&amp; /home/user/Desktop/job/dp/manage.py statistics
</snippet></ROW><ROW><id>14776188</id><snippet>/bin/sh</snippet></ROW><ROW><id>14776188</id><snippet>source</snippet></ROW><ROW><id>14776188</id><snippet>source</snippet></ROW><ROW><id>14776188</id><snippet>/bin/bash</snippet></ROW><ROW><id>14776188</id><snippet>SHELL=/bin/bash
*/1 * * * * source /path-to-env/bin/activate &amp;&amp; /home/user/Desktop/job/dp/manage.py statistics
</snippet></ROW><ROW><id>14776188</id><snippet>source</snippet></ROW><ROW><id>14776188</id><snippet>.</snippet></ROW><ROW><id>14776328</id><snippet>flippolicy.py</snippet></ROW><ROW><id>14776328</id><snippet>c_int</snippet></ROW><ROW><id>14776328</id><snippet>from ctypes import *</snippet></ROW><ROW><id>14776328</id><snippet>c_int</snippet></ROW><ROW><id>14776427</id><snippet>fetcher_dict = {'X':XDataFetcher,'Y':YDataFetcher}
data_source = ...
fetcher = fetcher_dict[data_source]()
</snippet></ROW><ROW><id>14776654</id><snippet>math.sqrt</snippet></ROW><ROW><id>14776654</id><snippet>mylist = [math.sqrt(n) for n in xrange(0,101)]
</snippet></ROW><ROW><id>14776654</id><snippet>n*n = something</snippet></ROW><ROW><id>14776654</id><snippet>n = math.sqrt(something)</snippet></ROW><ROW><id>14776654</id><snippet>n = -math.sqrt(something)</snippet></ROW><ROW><id>14776654</id><snippet>map</snippet></ROW><ROW><id>14776654</id><snippet>mylist = map(math.sqrt,xrange(0,101))
</snippet></ROW><ROW><id>14776654</id><snippet>def square_less_than(n):
    i = 0
    while True:
       if i*i &lt; n:
          yield i
          i += 1
       else:
          break

print list(square_less_than(10))
</snippet></ROW><ROW><id>14776654</id><snippet>itertools</snippet></ROW><ROW><id>14776654</id><snippet>import itertools
print list(itertools.takewhile(lambda i:i*i &lt; 10,itertools.count()))
</snippet></ROW><ROW><id>14776693</id><snippet>sys.excepthook</snippet></ROW><ROW><id>14776693</id><snippet>import sys

def myexcepthook(type, value, tb):
    import traceback
    from pygments import highlight
    from pygments.lexers import get_lexer_by_name
    from pygments.formatters import TerminalFormatter

    tbtext = ''.join(traceback.format_exception(type, value, tb))
    lexer = get_lexer_by_name("pytb", stripall=True)
    formatter = TerminalFormatter()
    sys.stderr.write(highlight(tbtext, lexer, formatter))

sys.excepthook = myexcepthook
</snippet></ROW><ROW><id>14776693</id><snippet>pygments</snippet></ROW><ROW><id>14776693</id><snippet>stderr</snippet></ROW><ROW><id>14776800</id><snippet>str.ljust</snippet></ROW><ROW><id>14776800</id><snippet>str.rjust</snippet></ROW><ROW><id>14776800</id><snippet>&gt;&gt;&gt; '{:&lt;30}'.format('left aligned')
'left aligned                  '
&gt;&gt;&gt; '{:&gt;30}'.format('right aligned')
'                 right aligned'
&gt;&gt;&gt; '{:^30}'.format('centered')
'           centered           '
&gt;&gt;&gt; '{:*^30}'.format('centered')  # use '*' as a fill char
'***********centered***********'
</snippet></ROW><ROW><id>14776885</id><snippet>finally</snippet></ROW><ROW><id>14776885</id><snippet>try:
    myFile = open("myfile","w")
    # do something with myFile
finally:
    myFile.close()
</snippet></ROW><ROW><id>14776885</id><snippet>try:</snippet></ROW><ROW><id>14776885</id><snippet>finally</snippet></ROW><ROW><id>14776885</id><snippet>__exit__</snippet></ROW><ROW><id>14776910</id><snippet>xlmodule = book.VBProject.VBComponents.Add(1) # http://support.microsoft.com/kb/282830 if this line throws an error
xlmodule.CodeModule.AddFromString('Public Sub AnotherCalculateFull() \n\
                                               Application.CalculateFull \n\
                                               End Sub')
</snippet></ROW><ROW><id>14776929</id><snippet>ax.get_ylim()</snippet></ROW><ROW><id>14776929</id><snippet>help()</snippet></ROW><ROW><id>14777001</id><snippet>projection</snippet></ROW><ROW><id>14777001</id><snippet>find</snippet></ROW><ROW><id>14777001</id><snippet>db.collection.find({_id: 1234}, {
    'parentfield1.childfield1': 1,
    'parentfield1.childfield2': 1,
    'parentfield1.childfield3': 1
});
</snippet></ROW><ROW><id>14777001</id><snippet>projection</snippet></ROW><ROW><id>14777046</id><snippet>from collections import defaultdict
d = defaultdict(list)
for x in myList:
   d[type(x)].append(x)

print d[int]
print d[str]
</snippet></ROW><ROW><id>14777058</id><snippet>for line in f:
    print line
    num += 1
</snippet></ROW><ROW><id>14777058</id><snippet>num</snippet></ROW><ROW><id>14777058</id><snippet>num</snippet></ROW><ROW><id>14777058</id><snippet>for line in f:
   print line
   num += 1
   if num &gt; 50: break
</snippet></ROW><ROW><id>14777058</id><snippet>list = [1,2,3,4,5]
for i in list:
   print i

for i,line in enumerate(f):
    print line
    if i &gt; 50: break
</snippet></ROW><ROW><id>14777092</id><snippet>class Bag(object):
  pass

spam = Bag()
spam.eggs = []
</snippet></ROW><ROW><id>14777211</id><snippet>ord</snippet></ROW><ROW><id>14777211</id><snippet>&gt;&gt;&gt; c1 = "a"
&gt;&gt;&gt; (ord(c1) &amp; 0x3f) | 0x80
161
&gt;&gt;&gt; hex((ord(c1) &amp; 0x3f) | 0x80)
'0xa1'
</snippet></ROW><ROW><id>14777624</id><snippet>multiprocessing</snippet></ROW><ROW><id>14777624</id><snippet>threading</snippet></ROW><ROW><id>14777729</id><snippet>how=first</snippet></ROW><ROW><id>14777729</id><snippet>how</snippet></ROW><ROW><id>14777729</id><snippet>In [47]: port = rank.resample('20B', how=lambda x: x.ix[0])

In [48]: y=port.groupby(port.sum(axis=1))

In [49]: y.sum()
Out[49]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 1 entries, 10.0 to 10.0
Columns: 461 entries, AKM to ZIM
dtypes: float64(461)
</snippet></ROW><ROW><id>14777932</id><snippet>while i &lt; len(left) and j &lt; len(right):
  ...
</snippet></ROW><ROW><id>14777932</id><snippet>i &lt; len(left)</snippet></ROW><ROW><id>14777932</id><snippet>j &lt; len(right)</snippet></ROW><ROW><id>14777932</id><snippet>result += left[i:]
result += right[j:]
</snippet></ROW><ROW><id>14777932</id><snippet>left = merge_sort( left )
right = merge_sort( right )
</snippet></ROW><ROW><id>14777932</id><snippet>left.sort()
right.sort()
</snippet></ROW><ROW><id>14777932</id><snippet>if len( vect ) == 1:
   return vect
</snippet></ROW><ROW><id>14777932</id><snippet>print vect
</snippet></ROW><ROW><id>14777932</id><snippet>for x in vect
print x
</snippet></ROW><ROW><id>14778231</id><snippet>from socket import *
from os.path import isfile

s = socket()
s.bind(('', 1234))
s.listen(4)
ns, na = s.accept()

loopdata = {}

i = 0
while 1:
    try:
        data = ns.recv(8192)
    except:
        break

    for line data.split('\n'):
        if line == 'version':
            print na[0] + ' requested a version'
            ns.send('1.0\n')
        elif line == 'key':
            print na[0] + ' is requesting a key'
            if isfile(na[0] + '.key'):
                with open(na[0] + '.key') as f:
                    ns.send(f.read())
            else:
                ns.send('Missing key file!\n')
        loopdata[i] = line

        #ns.send('OK\n')
        i += 1
ns.close()
s.close()

print loopdata # &lt;- Print all the lines
</snippet></ROW><ROW><id>14778231</id><snippet>from socket import *
s = socket()
s.connect(('127.0.0.1', 1234))

s.send('version\n')
print 'Client got:', s.recv(8192)
s.close()
</snippet></ROW><ROW><id>14778231</id><snippet> 1. You want to define a protocol,
    1.1 Command separator
    1.2 Command structure (ex: command:parameter:data\n)
    1.3 sates (ex login state etc etc..)
</snippet></ROW><ROW><id>14778231</id><snippet>c-&gt;s: get:file:/root/storage/file.txt\n
c&lt;-s: file:content\n
c&lt;-s: &lt;file data&gt;\n\n
c&lt;-s: file:close\n
c-&gt;s: file:recieved
</snippet></ROW><ROW><id>14778274</id><snippet>class AddressAdmin(admin.ModelAdmin):
    fieldsets = [(label, {'fields': ['address','address_2_html']}),]
    readonly_fields = ['address_2_html']

    def address_2_html(self, obj):
        return obj.address_2_html()
    address_2_html.allow_tags = True
    address_2_html.short_description = 'Address display'
</snippet></ROW><ROW><id>14778334</id><snippet>ignore_index=True</snippet></ROW><ROW><id>14778334</id><snippet>append</snippet></ROW><ROW><id>14778334</id><snippet>In [1]: df = pd.DataFrame([[1,2],[3,4]])

In [2]: row = pd.Series([5,6])

In [3]: df.append(row, ignore_index=True)
Out[3]: 
   0  1
0  1  2
1  3  4
2  5  6
</snippet></ROW><ROW><id>14778465</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; weird_json = '{"x": 1, "x": 2, "x": 3}'
&gt;&gt;&gt; x = json.loads(weird_json)
&gt;&gt;&gt; x
{u'x': 3}
&gt;&gt;&gt; y = json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
&gt;&gt;&gt; y
[u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
</snippet></ROW><ROW><id>14778465</id><snippet>print x['x']</snippet></ROW><ROW><id>14778465</id><snippet>from socket import *
import json
s = socket()
s.bind(('', 80))
s.listen(4)
ns, na = s.accept()

while 1:
    try:
        data = ns.recv(8192)
    except:
        ns.close()
        s.close()
        break

    data = json.loads(data)
    print data
</snippet></ROW><ROW><id>14778465</id><snippet>function callPython()
{
var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
    {
    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
    }
  }
xmlhttp.open("GET","Form-data",true);
xmlhttp.send();
}
</snippet></ROW><ROW><id>14778478</id><snippet>json</snippet></ROW><ROW><id>14778478</id><snippet>dict</snippet></ROW><ROW><id>14778478</id><snippet>dict</snippet></ROW><ROW><id>14778478</id><snippet>dict</snippet></ROW><ROW><id>14778478</id><snippet>dict</snippet></ROW><ROW><id>14778478</id><snippet>dict[name]
</snippet></ROW><ROW><id>14778478</id><snippet>new_story['title']
</snippet></ROW><ROW><id>14778478</id><snippet>dict</snippet></ROW><ROW><id>14778478</id><snippet>dict.get()</snippet></ROW><ROW><id>14778478</id><snippet>None</snippet></ROW><ROW><id>14778478</id><snippet>KeyError</snippet></ROW><ROW><id>14778478</id><snippet>None</snippet></ROW><ROW><id>14778478</id><snippet>with</snippet></ROW><ROW><id>14778478</id><snippet>urllib2</snippet></ROW><ROW><id>14778478</id><snippet>contextlib.closing()</snippet></ROW><ROW><id>14778478</id><snippet>from contextlib import closing
req = urllib2.Request("http://website.com/entertainment/entertainment_news.json", None)
opener = urllib2.build_opener()
with closing(opener.open(req)) as f:
    stories = json.load(f)
    ...
</snippet></ROW><ROW><id>14778505</id><snippet>random.shuffle</snippet></ROW><ROW><id>14778505</id><snippet>for</snippet></ROW><ROW><id>14778505</id><snippet>import json
import random

# use items to get a list    
questions = json.load(open("questions.json")).items()
# ... that you can shuffle.
random.shuffle(questions)
# note, we used items() earlier, so we get a tuple.
# and we can ask all questions in random order.
for question, data in questions:
   answers = data['answers']
   correct_answer = data['correct_answer']
   print question
   for n, answer in enumerate(answers):
       print "%d) %s" % (n + 1, answer)
   resp = raw_input('answer: ')
   if resp == str(correct_answer):
       print "correct!"
   else:   
       print "sorry, the correct answer was %s" % correct_answer
</snippet></ROW><ROW><id>14778568</id><snippet>__import__</snippet></ROW><ROW><id>14778568</id><snippet>&gt;&gt;&gt; old_import = __import__
&gt;&gt;&gt; def my_import(module,*args,**kwargs):
...   print module, 'loaded'
...   return old_import(module,*args,**kwargs)
...
&gt;&gt;&gt; __builtins__.__import__ = my_import
&gt;&gt;&gt; import datetime
datetime loaded
&gt;&gt;&gt; import datetime
datetime loaded
&gt;&gt;&gt; import django
django loaded
</snippet></ROW><ROW><id>14778568</id><snippet>&gt;&gt;&gt; def my_import(*args,**kwargs):
...   ret = old_import(*args,**kwargs)
...   print ret
...   return ret
...
&gt;&gt;&gt; __builtins__.__import__ = my_import
&gt;&gt;&gt; import datetime
&lt;module 'datetime' (built-in)&gt;
&gt;&gt;&gt; import django
&lt;module 'django' from 'C:\Python27\lib\site-packages\django\__init__.pyc'&gt;
</snippet></ROW><ROW><id>14778568</id><snippet>__builtins__['__import__'] = my_import</snippet></ROW><ROW><id>14778803</id><snippet>urlopen(request)</snippet></ROW><ROW><id>14778803</id><snippet>response = urlopen(request)
request_body = response.read()
request_url  = response.geturl()
print 'URL: %s\nRequest_Body: %s' % ( request_url, request_body )
</snippet></ROW><ROW><id>14778906</id><snippet>fabric</snippet></ROW><ROW><id>14778906</id><snippet>fab production deploy</snippet></ROW><ROW><id>14779052</id><snippet>inner-script.py</snippet></ROW><ROW><id>14779052</id><snippet>for thing in list_of_stuff:
    x = __import__('inner-script')
    x.className(thing, counter)
</snippet></ROW><ROW><id>14779052</id><snippet>x = __import__('inner-script', globals(), (thing, counter), [], -1)
</snippet></ROW><ROW><id>14779060</id><snippet>def reformat(text):
    lines = text.split('\n', 3)
    word = lines[0]
    definition_paragraph = lines[3][len('Defn:'):]
    definition_line = definition_paragraph.replace('\n', ' ')
    return word + ' : ' + definition_line
</snippet></ROW><ROW><id>14779060</id><snippet>reformat</snippet></ROW><ROW><id>14779060</id><snippet>import re
pattern = re.compile('(.+?)\n.+?\n\nDefn: (.+)', re.DOTALL)
def reformat(text):
    word, definition = pattern.search(text).groups()
    return word + ' : ' + definition.replace('\n', ' ')
</snippet></ROW><ROW><id>14779060</id><snippet>with open('word.txt') as open_file:
    text = open_file.read()

with open('word.txt', 'w') as open_file:
    open_file.write(reformat(text))
</snippet></ROW><ROW><id>14779060</id><snippet>listdir</snippet></ROW><ROW><id>14779060</id><snippet>os</snippet></ROW><ROW><id>14779073</id><snippet>    &lt;li&gt;{{ cur_goal.description|safe }}&lt;/li&gt;
</snippet></ROW><ROW><id>14779073</id><snippet>mark_safe</snippet></ROW><ROW><id>14779093</id><snippet>/</snippet></ROW><ROW><id>14779093</id><snippet>[^?]</snippet></ROW><ROW><id>14779093</id><snippet>.</snippet></ROW><ROW><id>14779093</id><snippet>^/.+/[^?]+$
</snippet></ROW><ROW><id>14779093</id><snippet>people</snippet></ROW><ROW><id>14779093</id><snippet>dungen</snippet></ROW><ROW><id>14779093</id><snippet>/</snippet></ROW><ROW><id>14779093</id><snippet>/people/</snippet></ROW><ROW><id>14779093</id><snippet>/peoples/</snippet></ROW><ROW><id>14779093</id><snippet>^/(?!(?:people|dungen)/.+$).+/.+$
</snippet></ROW><ROW><id>14779093</id><snippet>^/(?!(?:people|dungen)/[^?]+$).+/[^?]+$
</snippet></ROW><ROW><id>14779093</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'^/(?!(?:people|dungen)/[^?]+$).+/[^?]+$')
&gt;&gt;&gt; for s in ['/a/b/c/d', '/a/b', '/people/b/c/d', '/peoples/b/c/d', '/a/b/c?x=y']:
...     print not not r.search(s)
...
True
True
False
True
False
</snippet></ROW><ROW><id>14779256</id><snippet>os.popen</snippet></ROW><ROW><id>14779256</id><snippet>subprocess</snippet></ROW><ROW><id>14779256</id><snippet>subprocess</snippet></ROW><ROW><id>14779256</id><snippet>subprocess</snippet></ROW><ROW><id>14779256</id><snippet>import subprocess as sp

cmd = ["adb","push","file","/mnt/sdcard/file"]
mysp = sp.popen(cmd, env={'ADB_TRACE':'adb'}, stdout=sp.PIPE, stderr=sp.PIPE)
stdout,stderr = mysp.communicate()

if mysp.returncode != 0:
    print stderr
else:
    print stdout
</snippet></ROW><ROW><id>14779459</id><snippet>I use Blowfish and really like it, but Keccak is said to be better.</snippet></ROW><ROW><id>14779462</id><snippet># setup the plot
fig, ax = plt.subplots(1,1, figsize=(6,6))

# define the data
x = np.random.rand(20)
y = np.random.rand(20)
tag = np.random.randint(0,20,20)
tag[10:12] = 0 # make sure there are some 0 values to showup as grey

# define the colormap
cmap = plt.cm.jet
# extract all colors from the .jet map
cmaplist = [cmap(i) for i in range(cmap.N)]
# force the first color entry to be grey
cmaplist[0] = (.5,.5,.5,1.0)
# create the new map
cmap = cmap.from_list('Custom cmap', cmaplist, cmap.N)

# define the bins and normalize
bounds = np.linspace(0,20,21)
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

# make the scatter
scat = ax.scatter(x,y,c=tag,s=np.random.randint(100,500,20),cmap=cmap, norm=norm)

# create a second axes for the colorbar
ax2 = fig.add_axes([0.95, 0.1, 0.03, 0.8])
cb = mpl.colorbar.ColorbarBase(ax2, cmap=cmap, norm=norm, spacing='proportional', ticks=bounds, boundaries=bounds, format='%1i')

ax.set_title('Well defined discrete colors')
ax2.set_ylabel('Very custom cbar [-]', size=12)
</snippet></ROW><ROW><id>14779649</id><snippet>import pyglet
from pyglet.gl import *

class main (pyglet.window.Window):
    def __init__ (self):
        super(main, self).__init__(800, 600, fullscreen = False)
        self.button_texture = pyglet.image.load('button.png')
        self.button = pyglet.sprite.Sprite(self.button_texture)

        ## --- If you'd like to play sounds:
        #self.sound = pyglet.media.load('music.mp3')
        #self.sound.play()

        self.alive = 1

    def on_draw(self):
        self.render()

    def on_close(self):
        self.alive = 0

    def on_mouse_press(self, x, y, button, modifiers):
        if x &gt; self.button.x and x &lt; (self.button.x + self.button_texture.width):
            if y &gt; self.button.y and y &lt; (self.button.y + self.button_texture.height):
                self.alive = 0

    def on_key_press(self, symbol, modifiers):
        if symbol == 65307: # [ESC]
            self.alive = 0

    def render(self):
        self.clear()
        self.button.draw()
        self.flip()

    def run(self):
        while self.alive == 1:
            self.render()

            # -----------&gt; This is key &lt;----------
            # This is what replaces pyglet.app.run()
            # but is required for the GUI to not freeze
            #
            event = self.dispatch_events()


x = main()
x.run()
</snippet></ROW><ROW><id>14779716</id><snippet>sc = ("\x31\xdb"      # xor %ebx, %ebx
      "\x31\xc9"      # xor %ecx, %ecx
      "…")
</snippet></ROW><ROW><id>14779997</id><snippet>Request.content</snippet></ROW><ROW><id>14779997</id><snippet>def render_GET(self, request):
    print request.content.read()
</snippet></ROW><ROW><id>14780364</id><snippet>name</snippet></ROW><ROW><id>14780364</id><snippet>name</snippet></ROW><ROW><id>14780364</id><snippet>action</snippet></ROW><ROW><id>14780364</id><snippet>ID</snippet></ROW><ROW><id>14780364</id><snippet>&lt;label&gt;</snippet></ROW><ROW><id>14780444</id><snippet>hand = []</snippet></ROW><ROW><id>14780444</id><snippet>__init__</snippet></ROW><ROW><id>14780444</id><snippet>class Player:
    def __init__(self):
        self.hand = []
</snippet></ROW><ROW><id>14780449</id><snippet>cimport cython
from libc.stdlib cimport malloc, free

...

def process(a, int len):

    cdef int *my_ints

    my_ints = &lt;int *&gt;malloc(len(a)*cython.sizeof(int))
    if my_ints is NULL:
        raise MemoryError()

    for i in xrange(len(a)):
        my_ints[i] = a[i]

    with nogil:
        #Once you convert all of your Python types to C types, then you can release the GIL and do the real work
        ...
        free(my_ints)

    #convert back to python return type
    return value
</snippet></ROW><ROW><id>14780553</id><snippet>print "\\n"
</snippet></ROW><ROW><id>14780553</id><snippet>print r"\n"
</snippet></ROW><ROW><id>14780592</id><snippet>list.insert</snippet></ROW><ROW><id>14780592</id><snippet>None</snippet></ROW><ROW><id>14780592</id><snippet>k</snippet></ROW><ROW><id>14780636</id><snippet>special_object</snippet></ROW><ROW><id>14780636</id><snippet>Special_Tab</snippet></ROW><ROW><id>14780636</id><snippet>mp.Process</snippet></ROW><ROW><id>14780636</id><snippet>class special_object:
    def do_long_fitting_process(self):
        pass    

class Special_Tab(QtGui.QTabWidget):    
    def process_on_special_object(self):
        # do a long fitting process involving the properties of the
        # special_object
        proc = mp.Process(target = self.special_object.do_long_fitting_process)
        proc.start()

class MainWindow(QtGui.QMainWindow):
    def open_tabs(self):
        for i in range(0, 10):
            ...
            self.tabs_list.append(new_tab)
            new_tab.process_on_special_object()
</snippet></ROW><ROW><id>14780732</id><snippet>f</snippet></ROW><ROW><id>14780732</id><snippet>3</snippet></ROW><ROW><id>14780732</id><snippet>In [19]: "{:.3f}".format(0.12)
Out[19]: '0.120
</snippet></ROW><ROW><id>14780732</id><snippet>'g'</snippet></ROW><ROW><id>14780732</id><snippet>In [27]: "{:.20}".format(0.12)
Out[27]: '0.11999999999999999556'

In [28]: "{:.20g}".format(0.12)
Out[28]: '0.11999999999999999556'
</snippet></ROW><ROW><id>14780887</id><snippet>int()</snippet></ROW><ROW><id>14780887</id><snippet>str.split()</snippet></ROW><ROW><id>14780887</id><snippet>In [31]: s='20 01'

In [32]: int("".join(s.split()),16)
Out[32]: 8193
</snippet></ROW><ROW><id>14780887</id><snippet>str.replace()</snippet></ROW><ROW><id>14780887</id><snippet>In [34]: int(s.replace(" ",""),16)
Out[34]: 8193
</snippet></ROW><ROW><id>14780887</id><snippet>split()</snippet></ROW><ROW><id>14780887</id><snippet>replace()</snippet></ROW><ROW><id>14780887</id><snippet>'20 01'</snippet></ROW><ROW><id>14780887</id><snippet>'2001'</snippet></ROW><ROW><id>14780887</id><snippet>In [35]: '20 01'.replace(" ","")
Out[35]: '2001'

In [36]: "".join('20 01'.split())
Out[36]: '2001'
</snippet></ROW><ROW><id>14781297</id><snippet>tutIns = ndb.Key('Tutorial', int(tutID)).get()
</snippet></ROW><ROW><id>14781297</id><snippet>tutID = self.request.cookies.get('tut_id', '')
tutorial = ndb.Key('Tutorial', tutID)
</snippet></ROW><ROW><id>14781680</id><snippet>simplehttpwithupload.py</snippet></ROW><ROW><id>14781680</id><snippet>list_directory</snippet></ROW><ROW><id>14781903</id><snippet>django.contrib.sites</snippet></ROW><ROW><id>14781903</id><snippet>syncdb</snippet></ROW><ROW><id>14781903</id><snippet>sites</snippet></ROW><ROW><id>14781903</id><snippet>./manage.py shell</snippet></ROW><ROW><id>14781903</id><snippet>from django.contrib.sites.models import Site
Site.objects.create()
</snippet></ROW><ROW><id>14781903</id><snippet>sites</snippet></ROW><ROW><id>14781957</id><snippet>%</snippet></ROW><ROW><id>14781957</id><snippet>parser.add_argument('--range', metavar='range', type=str,
       help='generates a list of host from given range e.g. "host%%%%d.example.com 1 224"')
</snippet></ROW><ROW><id>14781957</id><snippet>%</snippet></ROW><ROW><id>14782039</id><snippet>sorted(ul, key=lambda x: (-x[0], x[1]))
</snippet></ROW><ROW><id>14782039</id><snippet>ol = sorted(ul, key=lambda x: x[1])
ol = sorted(ol, key=lambda x: x[0], reverse=True)
</snippet></ROW><ROW><id>14782187</id><snippet>sudo port install py26-mysql 
sudo port install mysql5-server
</snippet></ROW><ROW><id>14782236</id><snippet>import psutil

def check_if_running(name):
    for ps in psutil.process_iter():
        if ps.name == name:
            return True
    return False

check_if_running('python')
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>14782322</id><snippet>&gt;&gt;&gt; ' '.join('&lt; {} {} &gt;'.format(*items) for items in A_board)
'&lt; 0 0 &gt; &lt; 1 1 &gt;'
</snippet></ROW><ROW><id>14782322</id><snippet>&gt;&gt;&gt; a = [ [0], [0], [0] ]
&gt;&gt;&gt; fmt = '&lt; {} &gt;'.format
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; fmt(' '.join(map(str, chain.from_iterable(a))))
'&lt; 0 0 0 &gt;'
</snippet></ROW><ROW><id>14782932</id><snippet>import threading
t = threading.Thread(target=target_function,name=name,args=(args))
t.daemon = True
t.start()
</snippet></ROW><ROW><id>14782932</id><snippet>.daemon</snippet></ROW><ROW><id>14782932</id><snippet>say_hi</snippet></ROW><ROW><id>14782932</id><snippet>import threading
if commmand == "hi":
   t = threading.thread(target=say_hi, name='Saying hi') #&lt; Note that I did not actually call the function, but instead sent it as a parameter
   t.daemon = True
   t.start() #&lt; This actually starts the thread execution in the background
</snippet></ROW><ROW><id>14782932</id><snippet>import logging
logging.info('I am saying hi in a thread-safe manner')
</snippet></ROW><ROW><id>14782975</id><snippet>&lt;</snippet></ROW><ROW><id>14782975</id><snippet>re.sub('&lt;sales_start_date&gt;[^&lt;]+&lt;/sales_start_date&gt;', 
       '&lt;sales_start_date&gt;2013-01-01&lt;/sales_start_date&gt;', 
        data)
</snippet></ROW><ROW><id>14782977</id><snippet>def readLines():
    r = csv.reader(open('test.csv', "rt", newline=''), dialect="excel")
    return [l for l in r]

def writeFile(lines):
    resultFile = open('output.csv', 'wt', newline='')
    wr = csv.writer(resultFile, dialect='excel')
    wr.writerows(lines)
</snippet></ROW><ROW><id>14783012</id><snippet>#ruby
insert into DB my-data
put my-data onto shared-queue
</snippet></ROW><ROW><id>14783012</id><snippet>#python 
while True:
   take my-data from shared-queue 
   process my-data
   put did-process-data on shared-queue
</snippet></ROW><ROW><id>14783131</id><snippet>#!/usr/bin/env python
import itertools
import socket
import sys
from functools import partial
from multiprocessing import Pool

def resolve(host, domain=""):
    host = ''.join(host) + domain
    try:
        return host, socket.gethostbyname(host), None
    except EnvironmentError as e:
        return host, None, e

def main():
    alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789'
    size = int(sys.argv[2])
    resolve_host = partial(resolve, domain="." + sys.argv[3])
    combo = itertools.combinations_with_replacement(alphabet, size)

    pool = Pool(20) 
    for host, ip, error in pool.imap_unordered(resolve_host, combo):
        if error is None:
           print("%s resolved to --&gt; %s" % (host, ip))
        else: # error
           print("Can't resolve %s, error: %s" % (host, error))

if __name__=="__main__":
   main()
</snippet></ROW><ROW><id>14783298</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
# This script takes a html file name as argument to start the
# selenium webdriver. It will start a server the first time it's run.
# If called again, it will then check if the server is running
# and restart it if neccessary. This prevents from having to restart
# the browser when running tests from different scripts by facilitating
# the running instance of selenium.

import socket, threading, time, commands, os

from selenium import webdriver

dirPath = "/path/to/dir"
fileUri = "/path/to/file"

class ThreadServer(threading.Thread):
    def __init__(self, port=None, host=None):
        threading.Thread.__init__(self)

        self.host = host if host != None else "localhost"
        self.port = port if port != None else self.getFreePort()

        self.driver = webdriver.Firefox()

    def getFreePort(self):
        sock = socket.socket()
        sock.bind(('', 0))

        port = sock.getsockname()[1]

        sock.close()

        return port

    def run(self):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((self.host, self.port))

        port = server.getsockname()[1]
        print 'Server started successfully {0}'.format(port)

        server.listen(1)
        conn, addr = server.accept()

        while 1:
            try:
                fileUrl = conn.recv(4096)

            except socket.error:
                server.listen(1)
                conn, addr = server.accept()
                continue

            if not fileUrl:
                server.listen(1)
                conn, addr = server.accept()

            else:
                self.driver.get(fileUrl)

host = '127.0.0.1'
port = 44164

if dirPath == "/path/to/dir":
    fileUrl = 'http://localhost/{0}'.format(fileUri.lstrip(dirPath))

    try:
        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        sock.settimeout(3.0)
        sock.connect((host, port))

    except socket.error:
        threadServer = ThreadServer(port)
        threadServer.start()

        time.sleep(3)

        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        sock.settimeout(3.0)
        sock.connect((host, port))

    try:
        sock.send(fileUrl)

    except socket.error:
        raise

    else:
        sock.close()
</snippet></ROW><ROW><id>14783324</id><snippet>lxml</snippet></ROW><ROW><id>14783324</id><snippet>re</snippet></ROW><ROW><id>14783324</id><snippet>re</snippet></ROW><ROW><id>14783324</id><snippet>import lxml.etree as etree

xml = """&lt;root&gt;
&lt;item name="1"/&gt;
&lt;item name="2"/&gt;
&lt;tag&gt;
    &lt;nested&gt;Will I die&lt;/nested&gt;
    ... abunch of stuff inside here
&lt;/tag&gt;
&lt;another/&gt;
&lt;/root&gt;"""

root = etree.fromstring(xml)
for to_kill in root.xpath("//tag"):
    to_kill.getparent().remove(to_kill)

print etree.tostring(root,  pretty_print=True)
</snippet></ROW><ROW><id>14783324</id><snippet>&lt;root&gt;
&lt;item name="1"/&gt;
&lt;item name="2"/&gt;
&lt;another/&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>14783405</id><snippet>' '.join('&lt; {} &gt;'.format(' '.join(items)) for items in A_board)
</snippet></ROW><ROW><id>14783405</id><snippet>items</snippet></ROW><ROW><id>14783772</id><snippet>def debug(text):
  print text
  return ''

environment.filters['debug']=debug
</snippet></ROW><ROW><id>14783772</id><snippet>...&lt;p&gt;Hello world!&lt;/p&gt; {{"debug text!"|debug}}...
</snippet></ROW><ROW><id>14783796</id><snippet>x</snippet></ROW><ROW><id>14783796</id><snippet>y</snippet></ROW><ROW><id>14783796</id><snippet>sx = (x_max - x_min) / num_x_bins</snippet></ROW><ROW><id>14783796</id><snippet>extent</snippet></ROW><ROW><id>14783796</id><snippet>mylist = list()
for i in range(100):
    mylist.append(10)

def plot():

    plt.subplot(111)
    plt.hexbin(mylist,mylist,bins='log', cmap=plt.cm.YlOrRd_r, extent=[0, 50, 0, 50])
    plt.axis([0,50,0,50])

    plt.show()

plot()
</snippet></ROW><ROW><id>14783834</id><snippet>import gdb

res = []
res.append(gdb.execute("call factorial(4)", False, True))
res.append(gdb.execute("call factorial(5)", False, True))
print res
</snippet></ROW><ROW><id>14783973</id><snippet>unicode</snippet></ROW><ROW><id>14783973</id><snippet>unicode</snippet></ROW><ROW><id>14783973</id><snippet>__new__</snippet></ROW><ROW><id>14783973</id><snippet>__init__</snippet></ROW><ROW><id>14783973</id><snippet>unicode2.__init__</snippet></ROW><ROW><id>14783973</id><snippet>unicode.__init__</snippet></ROW><ROW><id>14783973</id><snippet>__new__</snippet></ROW><ROW><id>14783973</id><snippet>class unicode2(unicode):
    def __new__(cls, value):
        # optionally do stuff to value here
        self = super(unicode2, cls).__new__(cls, value)
        # optionally do stuff to self here
        return self
</snippet></ROW><ROW><id>14783973</id><snippet>__setattr__</snippet></ROW><ROW><id>14783973</id><snippet>__slots__</snippet></ROW><ROW><id>14783973</id><snippet>__dict__</snippet></ROW><ROW><id>14783998</id><snippet>def cluster(data, maxgap):
    '''Arrange data into groups where successive elements
       differ by no more than *maxgap*

        &gt;&gt;&gt; cluster([1, 6, 9, 100, 102, 105, 109, 134, 139], maxgap=10)
        [[1, 6, 9], [100, 102, 105, 109], [134, 139]]

        &gt;&gt;&gt; cluster([1, 6, 9, 99, 100, 102, 105, 134, 139, 141], maxgap=10)
        [[1, 6, 9], [99, 100, 102, 105], [134, 139, 141]]

    '''
    data.sort()
    groups = [[data[0]]]
    for x in data[1:]:
        if abs(x - groups[-1][-1]) &lt;= maxgap:
            groups[-1].append(x)
        else:
            groups.append([x])
    return groups

if __name__ == '__main__':
    import doctest
    print(doctest.testmod())
</snippet></ROW><ROW><id>14784037</id><snippet>r, n, p = 200, 400, 400

X = np.random.rand(r, n, p)
U = np.random.rand(n, n)

In [2]: %timeit np.sum(np.dot(x.T, np.linalg.solve(U, x)) for x in X)
1 loops, best of 3: 9.43 s per loop

In [3]: %timeit np.dot(X[0].T, np.linalg.solve(U, X[0]))
10 loops, best of 3: 45.2 ms per loop
</snippet></ROW><ROW><id>14784160</id><snippet>from collections import deque

NUM_LINES=5 #The number of lines to process.  Should equal the deque maxlen    

lines = open("myfile.csv").readlines()[-NUM_LINES:] #Assumes the file can fit into memory
mydata = [line.split()[0] for line in lines]
d = deque(mydata, maxlen=NUM_LINES)
print d
</snippet></ROW><ROW><id>14784437</id><snippet>import difflib


REF = ['455 Gateway Dr, Brooklyn, NY 11239',
       '10 Devoe St, Brooklyn, NY 11211',
       '8801 Queens Blvd, Elmhurst, NY 11373 ',
       '342 Wythe Ave, Brooklyn, NY 11249 ',
       '4488 E Live Oak Ave, Arcadia, CA 91006',
       '1134 N Vermont Ave, Los Angeles, CA 90029',
       '1101 17th St NW, Washington, DC 20036 ',
       '3001 Syringa St, Hopeful-City, AL 48798',
       '950 Laurel St, Minneapolis, KS 67467']


INPUT = ['4554 Gagate Dr, Brooklyn, NY 11239',
         '10 Devoe St, Brooklyn, NY 11211',
         '8801 Queens Blvd, Elmhurst, NY 11373 ',
         '342 Wythe Ave, Brooklyn, NY 11249 ',
         '4488 E Live Oak Ave, Arcadia, CA 91006',
         '1134 N Vermont Ave, Los Angeles, CA 90029',
         '1101 17th St NW, Washington, DC 20036 ',
         '3001 Syrinuy St, Hopeful Dam, AL 48798',
         '950 Laurel St, Minneapolis, KS 67467',
         '455 Gateway Doctor, Forgotten Place, NY 11239',
         '10 Devoe St, Brook., NY 11211',
         '82477 Queens Blvd, Elmerst, NY 11373 ',
         '342 Waithe Street, Brooklyn, MN 11249 ',
         '4488 E Live Poke Ave, Arcadia, CA 145',
         '1134 N Vermiculite Ave, Liz Angelicas, CA 90029',
         '1101 1st St NW, Washing, DC 20036 ']


def treatment(inp,reference,crit,gcm = difflib.get_close_matches):
    for input_item in inp:
        yield (input_item,gcm(input_item,reference,1000,crit))


for a,b in treatment(INPUT,REF,0.65):
    print '\n- %s\n     %s' % (a, '\n     '.join(b))
</snippet></ROW><ROW><id>14784437</id><snippet>- 4554 Gagate Dr, Brooklyn, NY 11239
     455 Gateway Dr, Brooklyn, NY 11239
     342 Wythe Ave, Brooklyn, NY 11249 

- 10 Devoe St, Brooklyn, NY 11211
     10 Devoe St, Brooklyn, NY 11211

- 8801 Queens Blvd, Elmhurst, NY 11373 
     8801 Queens Blvd, Elmhurst, NY 11373 

- 342 Wythe Ave, Brooklyn, NY 11249 
     342 Wythe Ave, Brooklyn, NY 11249 
     455 Gateway Dr, Brooklyn, NY 11239

- 4488 E Live Oak Ave, Arcadia, CA 91006
     4488 E Live Oak Ave, Arcadia, CA 91006

- 1134 N Vermont Ave, Los Angeles, CA 90029
     1134 N Vermont Ave, Los Angeles, CA 90029

- 1101 17th St NW, Washington, DC 20036 
     1101 17th St NW, Washington, DC 20036 

- 3001 Syrinuy St, Hopeful Dam, AL 48798
     3001 Syringa St, Hopeful-City, AL 48798

- 950 Laurel St, Minneapolis, KS 67467
     950 Laurel St, Minneapolis, KS 67467

- 455 Gateway Doctor, Forgotten Place, NY 11239
     455 Gateway Dr, Brooklyn, NY 11239

- 10 Devoe St, Brook., NY 11211
     10 Devoe St, Brooklyn, NY 11211

- 82477 Queens Blvd, Elmerst, NY 11373 
     8801 Queens Blvd, Elmhurst, NY 11373 

- 342 Waithe Street, Brooklyn, MN 11249 
     342 Wythe Ave, Brooklyn, NY 11249 
     455 Gateway Dr, Brooklyn, NY 11239

- 4488 E Live Poke Ave, Arcadia, CA 145
     4488 E Live Oak Ave, Arcadia, CA 91006

- 1134 N Vermiculite Ave, Liz Angelicas, CA 90029
     1134 N Vermont Ave, Los Angeles, CA 90029

- 1101 1st St NW, Washing, DC 20036 
     1101 17th St NW, Washington, DC 20036 
</snippet></ROW><ROW><id>14784489</id><snippet>t</snippet></ROW><ROW><id>14784489</id><snippet>m = xf/dx
t = []
for i in range(0,int(n)) :
    t.append(i*tf/n)
</snippet></ROW><ROW><id>14784489</id><snippet>from array import array</snippet></ROW><ROW><id>14784489</id><snippet>m = xf/dx
t = [i*tf/n for i in range(int(n))]
</snippet></ROW><ROW><id>14784537</id><snippet>from collections import OrderedDict

out = []

for r in apts:
    row = OrderedDict([('id',''), ('price',''), ('sqft',''), 
                       ('amenities',''),('ac',''),('pets','')])        
    row['id']=r[0]
    for sr in r[1]:
        row[sr[0].lower().translate(None," ./")]=sr[1]
    out.append(row)

#print result        
for o in out:
    s = ",".join(map(str, o.values()))
    print s
</snippet></ROW><ROW><id>14784537</id><snippet>2083,$1000 / month,500,gym hardwood floor,,
1096,$1200 / month,700,,true,
76,$1100 / month,,,true,true
</snippet></ROW><ROW><id>14784574</id><snippet>foo.mydict['number'] += 10 
</snippet></ROW><ROW><id>14784629</id><snippet>[[0 for i in ...] for j in ...]
</snippet></ROW><ROW><id>14784746</id><snippet>"11"</snippet></ROW><ROW><id>14784746</id><snippet>"2"</snippet></ROW><ROW><id>14784746</id><snippet>1</snippet></ROW><ROW><id>14784746</id><snippet>2</snippet></ROW><ROW><id>14784770</id><snippet>del1 = [[C[i-1,j]-C[i-1,j-1] for j in range(1,(m-1))]for i in range(0,int(n))]
</snippet></ROW><ROW><id>14784770</id><snippet>[]</snippet></ROW><ROW><id>14784770</id><snippet>()</snippet></ROW><ROW><id>14784770</id><snippet>range</snippet></ROW><ROW><id>14784770</id><snippet>C</snippet></ROW><ROW><id>14784770</id><snippet>numpy</snippet></ROW><ROW><id>14784770</id><snippet>C</snippet></ROW><ROW><id>14784770</id><snippet>del1 = [[C[i-1][j]-C[i-1][j-1] for j in range(1,(m-1))]for i in range(0,int(n))]
</snippet></ROW><ROW><id>14784846</id><snippet>wget http://googleappengine.googlecode.com/files/google_appengine_1.7.4.zip
unzip google_appengine_1.7.4.zip
cd google_appengine/demos/guestbook
../../dev_appserver.py .
</snippet></ROW><ROW><id>14784846</id><snippet>export PATH=$PATH:/home/pi/google_appengine
</snippet></ROW><ROW><id>14784846</id><snippet>dev_appserver.py .
</snippet></ROW><ROW><id>14784901</id><snippet>import csv

# I fake here the opening and extracting from a CSV file
# to obtain a list of the words of the first column
ss = """HelloWorld
HelloWorld
HelloSaturn
HelloMars
HelloPluto
HelloSaturn
HelloMoon
HelloMoon"""
column = ss.splitlines()


# Now, the counting
from collections import Counter
c = Counter(column) 

# Seeing the counter we got
print '\n'.join(c)

# Putting the result in a CSV file
with open('resu.csv','wb') as g:
    gw = csv.writer(g)
    gw.writerows([item,c[item]] for item in column)
</snippet></ROW><ROW><id>14784942</id><snippet>(defun get-current-line ()
  (buffer-substring-no-properties (line-beginning-position)
                                  (line-end-position)))

(defun run-python-command (str)
  (shell-command-to-string
   (concat "/usr/bin/env python -u -m sfPP -c "
           (shell-quote-argument (concat "print(" str ")")))))

(defun eval-line-in-python ()
  "Evaluates the current line in python, then copies the result to the clipboard."
  (interactive)
  (let ((str (run-python-command (get-current-line))))
    (message str)
    (kill-new str)))
</snippet></ROW><ROW><id>14784942</id><snippet>M-x eval-line-in-python</snippet></ROW><ROW><id>14784954</id><snippet>def find_python(string, python):
 """searches for the letters 'python' in the word.
    return True, if string contains only letters from python.
 """
 for eachLetter in string:
    if eachLetter not in python:
        return False
 return True
</snippet></ROW><ROW><id>14785513</id><snippet>for i in range(1, 10):
    if i in (5, 6):
        continue
</snippet></ROW><ROW><id>14785513</id><snippet>while</snippet></ROW><ROW><id>14785513</id><snippet>i = 1
while i &lt; 10:
    if i == 5:
        i = 7
    # other code
    i += 1
</snippet></ROW><ROW><id>14785513</id><snippet>for</snippet></ROW><ROW><id>14785513</id><snippet>i</snippet></ROW><ROW><id>14785513</id><snippet>i</snippet></ROW><ROW><id>14785513</id><snippet>while</snippet></ROW><ROW><id>14785519</id><snippet>1</snippet></ROW><ROW><id>14785519</id><snippet>0</snippet></ROW><ROW><id>14785519</id><snippet>steps</snippet></ROW><ROW><id>14785519</id><snippet>edges</snippet></ROW><ROW><id>14785519</id><snippet>cumsum</snippet></ROW><ROW><id>14785519</id><snippet>toss2</snippet></ROW><ROW><id>14785519</id><snippet>2 ** cumsum(toss2)</snippet></ROW><ROW><id>14785519</id><snippet>numpy</snippet></ROW><ROW><id>14785519</id><snippet>pandas</snippet></ROW><ROW><id>14785519</id><snippet>N</snippet></ROW><ROW><id>14785519</id><snippet>N=100</snippet></ROW><ROW><id>14785519</id><snippet>N &gt; 10000</snippet></ROW><ROW><id>14785519</id><snippet>pandas.Series</snippet></ROW><ROW><id>14785519</id><snippet>import pandas as pd
toss = np.random.randint(0,2,100)

toss = pd.Series(toss)

steps = (toss.cumsum() * toss).diff() # mask out the cumsum where we won [0 1 2 3 0 0 4 5 6 ... ]
edges = steps &lt; 0 # find where the cumsum steps down -&gt; where we won
dsteps = steps[edges].diff() # find the length of each losing streak
dsteps[steps[edges].index[0]] = steps[edges][:1] # fix length of the first run which in now NaN
toss2 = toss.copy() # get a copy of the toss series
toss2[edges] = dsteps # insert the length of the losing streaks into the copy of the toss results
bets = 2 ** (toss2).cumsum() # compute the wagers

res = pd.DataFrame({'toss': toss,
                    'toss2': toss2,
                    'runs': toss2.cumsum(),
                    'next_bet': bets})
</snippet></ROW><ROW><id>14785519</id><snippet>numpy</snippet></ROW><ROW><id>14785519</id><snippet>pandas</snippet></ROW><ROW><id>14785519</id><snippet>toss = np.random.randint(0,2,100)

steps = np.diff(np.cumsum(toss) * toss)
edges = steps &lt; 0
edges_shift = np.append(False, edges[:-1])
init_step = steps[edges][0]
toss2 = np.array(toss)
toss2[edges_shift] = np.append(init_step, np.diff(steps[edges]))
bets = 2 ** np.cumsum(toss2)

fmt_dict = {1:'l', 0:'w'}
for t, b in zip(toss, bets):
    print fmt_dict[t] + '-&gt; {0:d}'.format(b)
</snippet></ROW><ROW><id>14785519</id><snippet>In [65]: res
Out[65]: 
    next_bet  runs  toss  toss2
0          1     0     0      0
1          2     1     1      1
2          4     2     1      1
3          8     3     1      1
4         16     4     1      1
5          1     0     0     -4
6          1     0     0      0
7          2     1     1      1
8          4     2     1      1
9          1     0     0     -2
10         1     0     0      0
11         2     1     1      1
12         4     2     1      1
13         1     0     0     -2
14         1     0     0      0
15         2     1     1      1
16         1     0     0     -1
17         1     0     0      0
18         2     1     1      1
19         1     0     0     -1
20         1     0     0      0
21         1     0     0      0
22         2     1     1      1
23         1     0     0     -1
24         2     1     1      1
25         1     0     0     -1
26         1     0     0      0
27         1     0     0      0
28         2     1     1      1
29         4     2     1      1
30         1     0     0     -2
31         2     1     1      1
32         4     2     1      1
33         1     0     0     -2
34         1     0     0      0
35         1     0     0      0
36         1     0     0      0
37         2     1     1      1
38         4     2     1      1
39         1     0     0     -2
40         2     1     1      1
41         4     2     1      1
42         8     3     1      1
43         1     0     0     -3
44         1     0     0      0
45         1     0     0      0
46         1     0     0      0
47         2     1     1      1
48         1     0     0     -1
49         2     1     1      1
50         1     0     0     -1
51         1     0     0      0
52         1     0     0      0
53         1     0     0      0
54         1     0     0      0
55         2     1     1      1
56         1     0     0     -1
57         1     0     0      0
58         1     0     0      0
59         1     0     0      0
60         1     0     0      0
61         2     1     1      1
62         1     0     0     -1
63         2     1     1      1
64         4     2     1      1
65         8     3     1      1
66        16     4     1      1
67        32     5     1      1
68         1     0     0     -5
69         2     1     1      1
70         1     0     0     -1
71         2     1     1      1
72         4     2     1      1
73         1     0     0     -2
74         2     1     1      1
75         1     0     0     -1
76         1     0     0      0
77         2     1     1      1
78         4     2     1      1
79         1     0     0     -2
80         1     0     0      0
81         2     1     1      1
82         1     0     0     -1
83         1     0     0      0
84         1     0     0      0
85         1     0     0      0
86         2     1     1      1
87         4     2     1      1
88         8     3     1      1
89        16     4     1      1
90        32     5     1      1
91        64     6     1      1
92         1     0     0     -6
93         1     0     0      0
94         1     0     0      0
95         1     0     0      0
96         2     1     1      1
97         1     0     0     -1
98         1     0     0      0
99         1     0     0      0
</snippet></ROW><ROW><id>14785519</id><snippet>(result -&gt; next bet):
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
l-&gt;  2
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
l-&gt;  2
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
l-&gt;  8
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
l-&gt;  8
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
l-&gt;  2
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
l-&gt;  8
l-&gt;  16
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
l-&gt;  8
w-&gt;  1
w-&gt;  1
l-&gt;  2
l-&gt;  4
l-&gt;  8
w-&gt;  1
l-&gt;  2
l-&gt;  4
w-&gt;  1
l-&gt;  2
</snippet></ROW><ROW><id>14785524</id><snippet>date</snippet></ROW><ROW><id>14785524</id><snippet>__new__</snippet></ROW><ROW><id>14785524</id><snippet>__init__</snippet></ROW><ROW><id>14785524</id><snippet>from datetime import date
class custom_date(date):
    def __new__(cls, year,month,day):
        return date.__new__(cls, year, month,day)

x = custom_date(2013,2,1)
y = date(2013,2,2)

print x&lt;y
print y&lt;x
</snippet></ROW><ROW><id>14785524</id><snippet>True
False
</snippet></ROW><ROW><id>14785524</id><snippet>__cmp__</snippet></ROW><ROW><id>14785624</id><snippet>swap</snippet></ROW><ROW><id>14785624</id><snippet>using std::swap;
swap(x, y);      // Do NOT say:  std::swap(x, y)    -- Read about Koenig lookup!
</snippet></ROW><ROW><id>14785624</id><snippet>xchg</snippet></ROW><ROW><id>14785624</id><snippet>xchg</snippet></ROW><ROW><id>14785624</id><snippet>swap</snippet></ROW><ROW><id>14785624</id><snippet>std::swap</snippet></ROW><ROW><id>14785624</id><snippet>swap</snippet></ROW><ROW><id>14785624</id><snippet>(a, b) = (x, y)</snippet></ROW><ROW><id>14785624</id><snippet>a = x;
b = y;
</snippet></ROW><ROW><id>14785624</id><snippet>xchg</snippet></ROW><ROW><id>14785624</id><snippet>std::tuple</snippet></ROW><ROW><id>14785624</id><snippet>std::tie</snippet></ROW><ROW><id>14785624</id><snippet>using std::tie;
using std::make_tuple;
tie(ones, twos) = make_tuple((ones ^ n) ^ ~twos, (ones &amp; n) | (twos &amp; ~n));
</snippet></ROW><ROW><id>14785624</id><snippet>static_cast</snippet></ROW><ROW><id>14785624</id><snippet>std::make_tuple</snippet></ROW><ROW><id>14785624</id><snippet>std::tuple</snippet></ROW><ROW><id>14785624</id><snippet>using std::tie;
using std::tuple;
tie(ones, twos) = tuple&lt;int,int&gt;((ones ^ n) ^ ~twos, (ones &amp; n) | (twos &amp; ~n));
</snippet></ROW><ROW><id>14785880</id><snippet>def lev(seq1, seq2):
    oneago = None
    thisrow = range(1, len(seq2) + 1) + [0]
    for x in xrange(len(seq1)):
        twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]
        for y in xrange(len(seq2)):
            delcost = oneago[y] + 1
            addcost = thisrow[y - 1] + 1
            subcost = oneago[y - 1] + (seq1[x] != seq2[y])
            thisrow[y] = min(delcost, addcost, subcost)
    return thisrow[len(seq2) - 1]

def di(seq1,seq2):
    return float(lev(seq1,seq2))/min(len(seq1),len(seq2))

print lev('spa','spam')
print di('spa','spam')
</snippet></ROW><ROW><id>14786115</id><snippet>import json

def convert_to_bool(bstring):
    return True if bstring == b'\x00' else False
</snippet></ROW><ROW><id>14786115</id><snippet>your_byte_string = b'\x00'
# you can write also
# your_byte_string = u'\u0000'

print(json.dumps(convert_to_bool(your_byte_string))) 

# &gt;&gt;&gt; true

your_byte_string = b'\x01'
# you can write also
# your_byte_string = u'\u0001'

print(json.dumps(convert_to_bool(your_byte_string)))

# &gt;&gt;&gt; false
</snippet></ROW><ROW><id>14786115</id><snippet>if convert_to_bool(your_byte_string):
    # here I'm just printing it but you should use the dumped string as a json response
    print(json.dumps('The field is &lt;b&gt;true&lt;/b&gt;!'))
else:
    print(json.dumps('Unfortunately the field is &lt;b&gt;false&lt;/b&gt;.'))
</snippet></ROW><ROW><id>14786115</id><snippet>// javascript code
// yourdata is the field value, retrieved by the ajax call 

if (yourdata) {
    alert('The field is true!');    
} else {
    alert('The field is false!');
}
</snippet></ROW><ROW><id>14786240</id><snippet>mycode.py</snippet></ROW><ROW><id>14786240</id><snippet>python -i mycode.py</snippet></ROW><ROW><id>14786240</id><snippet>$ python -i mycode.py
&gt;&gt;&gt; area(10, 5)   
</snippet></ROW><ROW><id>14786240</id><snippet>-i</snippet></ROW><ROW><id>14786354</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import traceback
&gt;&gt;&gt; class A(object):
        @staticmethod
        def a():
            trace()
&gt;&gt;&gt; def trace():
        print traceback.extract_stack(sys._getframe())[-3][3]
&gt;&gt;&gt; A.a()
A.a()
</snippet></ROW><ROW><id>14786514</id><snippet>quot</snippet></ROW><ROW><id>14786514</id><snippet>amp</snippet></ROW><ROW><id>14786514</id><snippet>apos</snippet></ROW><ROW><id>14786514</id><snippet>lt</snippet></ROW><ROW><id>14786514</id><snippet>gt</snippet></ROW><ROW><id>14786514</id><snippet>&lt;?xml version="1.1" ?&gt;
&lt;!DOCTYPE naughtyxml [
    &lt;!ENTITY nbsp " "&gt;
    &lt;!ENTITY copy "©"&gt;
]&gt;
&lt;data&gt;
    &lt;country name="Liechtenstein"&gt;
        &lt;rank&gt;1 &gt;&lt;/rank&gt;
        &lt;year&gt;2008©&lt;/year&gt;
        &lt;gdppc&gt;141100&lt;/gdppc&gt;
        &lt;neighbor name="Austria" direction="E"/&gt;
        &lt;neighbor name="Switzerland" direction="W"/&gt;
    &lt;/country&gt;
&lt;/data&gt;
</snippet></ROW><ROW><id>14786514</id><snippet>XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>14786514</id><snippet>xml.parsers.expat</snippet></ROW><ROW><id>14786514</id><snippet>XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>entity</snippet></ROW><ROW><id>14786514</id><snippet>xmlns="http://www.w3.org/1999/xhtml"</snippet></ROW><ROW><id>14786514</id><snippet>ET.XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>_default()</snippet></ROW><ROW><id>14786514</id><snippet>_default()</snippet></ROW><ROW><id>14786514</id><snippet>entity</snippet></ROW><ROW><id>14786514</id><snippet>XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>chr()</snippet></ROW><ROW><id>14786514</id><snippet>unichr()</snippet></ROW><ROW><id>14786514</id><snippet>XMLParser.entity</snippet></ROW><ROW><id>14786514</id><snippet>html.entities.html5</snippet></ROW><ROW><id>14786514</id><snippet>HTMLParser</snippet></ROW><ROW><id>14786514</id><snippet>ElementTree</snippet></ROW><ROW><id>14786514</id><snippet>HTMLParser</snippet></ROW><ROW><id>14786514</id><snippet>ET.XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>expat</snippet></ROW><ROW><id>14786514</id><snippet>&gt;</snippet></ROW><ROW><id>14786514</id><snippet>©</snippet></ROW><ROW><id>14786514</id><snippet>chr(0x24B4)</snippet></ROW><ROW><id>14786514</id><snippet>ET.XMLParser</snippet></ROW><ROW><id>14786514</id><snippet>from html.parser import HTMLParser
from html.entities import name2codepoint
import xml.etree.ElementTree as ET
import xml.parsers.expat as expat

xml = '''&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE data PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;data&gt;
    &lt;country name="Liechtenstein"&gt;
        &lt;rank&gt;1&gt;&lt;/rank&gt;
        &lt;year&gt;2008©&lt;/year&gt;
        &lt;gdppc&gt;141100&lt;/gdppc&gt;
        &lt;neighbor name="Austria" direction="E"/&gt;
        &lt;neighbor name="Switzerland" direction="W"/&gt;
    &lt;/country&gt;
&lt;/data&gt;'''

# HTMLParser subclass which handles entities
print('=== HTMLParser')
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, name, attrs):
        print('Start element:', name, attrs)
    def handle_endtag(self, name):
        print('End element:', name)
    def handle_data(self, data):
        print('Character data:', repr(data))
    def handle_entityref(self, name):
        self.handle_data(chr(name2codepoint[name]))

htmlparser = MyHTMLParser()
htmlparser.feed(xml)


# ET.XMLParser parse
print('=== XMLParser')
parser = ET.XMLParser()
parser.entity['copy'] = chr(0x24B8)
root = ET.fromstring(xml, parser)
print(ET.tostring(root))
for elem in root:
    print(elem.tag, ' - ', elem.attrib)
    for subelem in elem:
        print(subelem.tag, ' - ', subelem.attrib, ' - ', subelem.text)

# Expat parse
def start_element(name, attrs):
    print('Start element:', name, attrs)
def end_element(name):
    print('End element:', name)
def char_data(data):
    print('Character data:', repr(data))
print('=== Expat')
expatparser = expat.ParserCreate()
expatparser.StartElementHandler = start_element
expatparser.EndElementHandler = end_element
expatparser.CharacterDataHandler = char_data
expatparser.Parse(xml)
</snippet></ROW><ROW><id>14786567</id><snippet>NewParent</snippet></ROW><ROW><id>14786567</id><snippet>def __init__(self):
</snippet></ROW><ROW><id>14786579</id><snippet>xrange(1, 9) == (1, 2, 3, 4, 5, 6, 7, 8)
</snippet></ROW><ROW><id>14786579</id><snippet>xrange(start, stop, step)</snippet></ROW><ROW><id>14786579</id><snippet>start</snippet></ROW><ROW><id>14786579</id><snippet>stop</snippet></ROW><ROW><id>14786579</id><snippet>step</snippet></ROW><ROW><id>14786579</id><snippet>xrange(5) == (0, 1, 2, 3, 4)
xrange(1, 5) == (1, 2, 3, 4)
xrange(1, 5, 2) == (1, 3)
</snippet></ROW><ROW><id>14786579</id><snippet>xrange(1, 10)</snippet></ROW><ROW><id>14786579</id><snippet>9</snippet></ROW><ROW><id>14786595</id><snippet>def maybe_replace_corgi(corgi):
    if corgi.cuteness &gt; threshold:
        corgi.will_keep = True
        return corgi
    else:
        return Corgi(name="Woofus")

my_corgi = Corgi(name="Rudolf")
my_corgi = maybe_replace_corgi(my_corgi)
</snippet></ROW><ROW><id>14786595</id><snippet>my_corgi</snippet></ROW><ROW><id>14786595</id><snippet>Corgi</snippet></ROW><ROW><id>14786595</id><snippet>__init__</snippet></ROW><ROW><id>14786595</id><snippet>Corgi.count</snippet></ROW><ROW><id>14786595</id><snippet>def maybe_replace_corgi(corgi):
    if corgi.cuteness &gt; treshold:
        corgi.will_keep = true
    else:
        corgi.__init__(name="Woofus")
</snippet></ROW><ROW><id>14786754</id><snippet>manage.py</snippet></ROW><ROW><id>14786754</id><snippet># chmod +x manage.py
</snippet></ROW><ROW><id>14786787</id><snippet>u'×'</snippet></ROW><ROW><id>14786913</id><snippet>    while True:
        #Receiving from client
        data = conn.recv(1024)
        if not data:
            break
        conn.sendall(data)
        print data
        #To come out of the loop
    conn.close()
</snippet></ROW><ROW><id>14786913</id><snippet>     while True:
        #Wait to accept a connection - blocking call
        conn, addr = s.accept()
        #display client information (IP address)
        print 'Connected with ' + addr[0] + ':' + str(addr[1])

        #Start new thread takees 1st argument as a function name to be run, second
        #is the tuple of arguments to the function

        start_new_thread(clientthread ,(conn,))
</snippet></ROW><ROW><id>14786913</id><snippet>print channel.recv ( 100 )</snippet></ROW><ROW><id>14786913</id><snippet>channel.send ( 'Green-eyed monster.' )</snippet></ROW><ROW><id>14786913</id><snippet>Green-eyed monster</snippet></ROW><ROW><id>14786913</id><snippet>s.close()</snippet></ROW><ROW><id>14786913</id><snippet>sys.exit()</snippet></ROW><ROW><id>14786995</id><snippet>img = cv2.imread("D:\\img.jpg")
gray = cv2.cvtColor(img, cv.CV_BGR2GRAY)

img2 = np.zeros_like(img)
img2[:,:,0] = gray
img2[:,:,1] = gray
img2[:,:,2] = gray

cv2.circle(img2, (10,10), 5, (255,255,0))
cv2.imshow("colour again", img2)
cv2.waitKey()
</snippet></ROW><ROW><id>14787231</id><snippet>print()</snippet></ROW><ROW><id>14787231</id><snippet>class TeeFile(object):
    def __init__(self, *files):
        self.files = files
    def write(self, data):
        for f in self.files:
            f.write(data)
    def flush(self):
        for f in self.files:
            f.flush()
</snippet></ROW><ROW><id>14787231</id><snippet>import sys

file = TeeFile(sys.stderr, output_file)
print("abc", end="", file=file)
file.flush()
</snippet></ROW><ROW><id>14787383</id><snippet>DetailView</snippet></ROW><ROW><id>14787383</id><snippet>get_queryset()</snippet></ROW><ROW><id>14787383</id><snippet>get_queryset()</snippet></ROW><ROW><id>14787383</id><snippet>class customerDetailView(DetailView):
    context_object_name = 'customerDetail'
    template_name = "customer.html"
    allow_empty = True

    def __init__(self, name=None, *args):
        self.name = name

    def get_queryset(self):
        return Customer.objects.get(name=self.name)
</snippet></ROW><ROW><id>14787383</id><snippet>self</snippet></ROW><ROW><id>14787383</id><snippet>self</snippet></ROW><ROW><id>14787522</id><snippet>__getattribute__</snippet></ROW><ROW><id>14787522</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>14787522</id><snippet>__dict__</snippet></ROW><ROW><id>14787522</id><snippet>property</snippet></ROW><ROW><id>14787522</id><snippet>class foo(object):
    @property
    def myAttr(self):
        return 2
</snippet></ROW><ROW><id>14787522</id><snippet>myAttr</snippet></ROW><ROW><id>14787522</id><snippet>__get__</snippet></ROW><ROW><id>14787522</id><snippet>__set__</snippet></ROW><ROW><id>14787522</id><snippet>property</snippet></ROW><ROW><id>14787522</id><snippet>__dict__</snippet></ROW><ROW><id>14787522</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>14787522</id><snippet>__get__</snippet></ROW><ROW><id>14787522</id><snippet>__dict__</snippet></ROW><ROW><id>14787522</id><snippet>__dict__</snippet></ROW><ROW><id>14787522</id><snippet>__get__</snippet></ROW><ROW><id>14787522</id><snippet>__set__</snippet></ROW><ROW><id>14787522</id><snippet>__get__</snippet></ROW><ROW><id>14787522</id><snippet>__getattr__</snippet></ROW><ROW><id>14787522</id><snippet>class O1(object):
    def __getattr__(self, name):
        return "__getattr__ has the lowest priority to find {}".format(name)

class O2(O1):
    var = "Class variables and non-data descriptors are low priority"
    def method(self): # functions are non-data descriptors
        return self.var

class O3(O2):
    def __init__(self):
        self.var = "instance variables have medium priority"
        self.method = lambda: self.var # doesn't recieve self as arg

class O4(O3):
    @property # this decorator makes this instancevar into a data descriptor
    def var(self):
        return "Data descriptors (such as properties) are high priority"

    @var.setter # I'll let O3's constructor set a value in __dict__
    def var(self, value):
        self.__dict__["var"]  = value # but I know it will be ignored

class O5(O4):
    def __getattribute__(self, name):
        if name in ("magic", "method", "__dict__"): # for a few names
            return super(O5, self).__getattribute__(name) # use normal access

        return "__getattribute__ has the highest priority for {}".format(name)
</snippet></ROW><ROW><id>14787522</id><snippet>__getattr__</snippet></ROW><ROW><id>14787522</id><snippet>&gt;&gt;&gt; o1 = O1()
&gt;&gt;&gt; o1.var
'__getattr__ has the lowest priority to find var'
</snippet></ROW><ROW><id>14787522</id><snippet>&gt;&gt;&gt; o2 = O2()
&gt;&gt;&gt; o2.var
Class variables and non-data descriptors are low priority'
&gt;&gt;&gt; o2.method
&lt;bound method O2.method of &lt;__main__.O2 object at 0x000000000338CD30&gt;&gt;
&gt;&gt;&gt; o2.method()
'Class variables and non-data descriptors are low priority'
</snippet></ROW><ROW><id>14787522</id><snippet>&gt;&gt;&gt; o3 = O3()
&gt;&gt;&gt; o3.method
&lt;function O3.__init__.&lt;locals&gt;.&lt;lambda&gt; at 0x00000000034AAEA0&gt;
&gt;&gt;&gt; o3.method()
'instance variables have medium priority'
&gt;&gt;&gt; o3.var
'instance variables have medium priority'
</snippet></ROW><ROW><id>14787522</id><snippet>property</snippet></ROW><ROW><id>14787522</id><snippet>&gt;&gt;&gt; o4 = O4()
&gt;&gt;&gt; o4.method()
'Data descriptors (such as properties) are high priority'
&gt;&gt;&gt; o4.var
'Data descriptors (such as properties) are high priority'
&gt;&gt;&gt; o4.__dict__["var"]
'instance variables have medium priority'
</snippet></ROW><ROW><id>14787522</id><snippet>__getattribute__</snippet></ROW><ROW><id>14787522</id><snippet>&gt;&gt;&gt; o5 = O5()
&gt;&gt;&gt; o5.method
&lt;function O3.__init__.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000003428EA0&gt;
&gt;&gt;&gt; o5.method()
'__getattribute__ has the highest priority for var'
&gt;&gt;&gt; o5.__dict__["var"]
'instance variables have medium priority'
&gt;&gt;&gt; o5.magic
'__getattr__ has the lowest priority to find magic'
</snippet></ROW><ROW><id>14787635</id><snippet>python -tt ex25.py
</snippet></ROW><ROW><id>14787693</id><snippet>from your_app.views import MyListView
from your_app.models import Person

class MySpecialListView(MyListView):
    model = Person
    get_queryset(self, *args, **kwargs):
        return Person.objects.filter(groups__id=self.kwargs['group_pk']))
</snippet></ROW><ROW><id>14787693</id><snippet>url(r'^groups/(?P&lt;group_pk&gt;\d+)/$', login_required(MySpecialListView.as_view(), name='person_group_list')
</snippet></ROW><ROW><id>14787824</id><snippet>reduce</snippet></ROW><ROW><id>14787824</id><snippet>reduce</snippet></ROW><ROW><id>14787824</id><snippet>((counters_a[0] == counters_a[1]) == counters_a[2])
</snippet></ROW><ROW><id>14787824</id><snippet>True</snippet></ROW><ROW><id>14787824</id><snippet>False</snippet></ROW><ROW><id>14787824</id><snippet>reduce</snippet></ROW><ROW><id>14787824</id><snippet>boolean</snippet></ROW><ROW><id>14787824</id><snippet>int</snippet></ROW><ROW><id>14787824</id><snippet>1</snippet></ROW><ROW><id>14787824</id><snippet>True == 1</snippet></ROW><ROW><id>14787824</id><snippet>True</snippet></ROW><ROW><id>14787824</id><snippet>2</snippet></ROW><ROW><id>14787824</id><snippet>&gt;&gt;&gt; reduce(operator.eq, [2, 2, 2])
False
</snippet></ROW><ROW><id>14787824</id><snippet>all()</snippet></ROW><ROW><id>14787824</id><snippet>&gt;&gt;&gt; all(counters_a[0] == c for c in counters_a[1:])
True
&gt;&gt;&gt; all(counters_b[0] == c for c in counters_b[1:])
False
</snippet></ROW><ROW><id>14788170</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>14788170</id><snippet>def parse_items(self, response):
    hxs = HtmlXPathSelector(response)
    titles = hxs.select("//p[@class='row']")
</snippet></ROW><ROW><id>14788230</id><snippet>make install</snippet></ROW><ROW><id>14788230</id><snippet>install(
  TARGETS ${SWIG_MODULE_example_REAL_NAME} 
  # ... add other arguments to install() as necessary
)
</snippet></ROW><ROW><id>14788230</id><snippet>install()</snippet></ROW><ROW><id>14788230</id><snippet>install</snippet></ROW><ROW><id>14788230</id><snippet>make install</snippet></ROW><ROW><id>14788343</id><snippet>AB</snippet></ROW><ROW><id>14788343</id><snippet>look-ahead</snippet></ROW><ROW><id>14788343</id><snippet>C</snippet></ROW><ROW><id>14788343</id><snippet>def</snippet></ROW><ROW><id>14788343</id><snippet>&gt;&gt;&gt; s = "ABCdef"
&gt;&gt;&gt; re.findall("([A-Z]+(?=[A-Z][a-z]|$)|[A-Z][a-z]+)", s)
['AB', 'Cdef']

&gt;&gt;&gt; re.findall("([A-Z]+(?=[A-Z][a-z]|$)|[A-Z][a-z]+)", 'MumABXYZCdefXYZAbc')
['Mum', 'ABXYZ', 'Cdef', 'XYZ', 'Abc']
</snippet></ROW><ROW><id>14788343</id><snippet>"([A-Z]+(?=[A-Z]|$)|[A-Z][a-z]+|\d+)"
</snippet></ROW><ROW><id>14788343</id><snippet>\d+</snippet></ROW><ROW><id>14788343</id><snippet>[a-z]</snippet></ROW><ROW><id>14788343</id><snippet>+</snippet></ROW><ROW><id>14788343</id><snippet>[A-Z]</snippet></ROW><ROW><id>14788343</id><snippet>upper case</snippet></ROW><ROW><id>14788424</id><snippet>tp_as_number-&gt;nb_add</snippet></ROW><ROW><id>14788424</id><snippet>a + b</snippet></ROW><ROW><id>14788424</id><snippet>a</snippet></ROW><ROW><id>14788424</id><snippet>__add__</snippet></ROW><ROW><id>14788424</id><snippet>inplace_*</snippet></ROW><ROW><id>14788424</id><snippet>__i*__</snippet></ROW><ROW><id>14788424</id><snippet>__r*__</snippet></ROW><ROW><id>14788424</id><snippet>5 + a</snippet></ROW><ROW><id>14788424</id><snippet>a</snippet></ROW><ROW><id>14788424</id><snippet>nb_add</snippet></ROW><ROW><id>14788424</id><snippet>nb_add</snippet></ROW><ROW><id>14788424</id><snippet>a</snippet></ROW><ROW><id>14788424</id><snippet>5</snippet></ROW><ROW><id>14788424</id><snippet>a</snippet></ROW><ROW><id>14788424</id><snippet>tp_as_mapping</snippet></ROW><ROW><id>14788424</id><snippet>tp_as_sequence</snippet></ROW><ROW><id>14788424</id><snippet>mp_length</snippet></ROW><ROW><id>14788424</id><snippet>sq_length</snippet></ROW><ROW><id>14788424</id><snippet>len</snippet></ROW><ROW><id>14788424</id><snippet>__len__</snippet></ROW><ROW><id>14788424</id><snippet>mp_length</snippet></ROW><ROW><id>14788424</id><snippet>sq_length</snippet></ROW><ROW><id>14788424</id><snippet>sq_length</snippet></ROW><ROW><id>14788424</id><snippet>+</snippet></ROW><ROW><id>14788424</id><snippet>sq_concat</snippet></ROW><ROW><id>14788424</id><snippet>nb_add</snippet></ROW><ROW><id>14788424</id><snippet>+</snippet></ROW><ROW><id>14788424</id><snippet>nb_add</snippet></ROW><ROW><id>14788525</id><snippet>Foo</snippet></ROW><ROW><id>14788525</id><snippet>@greet_first</snippet></ROW><ROW><id>14788525</id><snippet> goodbye = greet_first(goodbye)
</snippet></ROW><ROW><id>14788525</id><snippet>self</snippet></ROW><ROW><id>14788525</id><snippet>greet_first</snippet></ROW><ROW><id>14788525</id><snippet>self</snippet></ROW><ROW><id>14788525</id><snippet>goodbye</snippet></ROW><ROW><id>14788525</id><snippet>def greet_first(f):
    def wrapper(self, *args, **kwargs):
        self.hello()
        return f(self, *args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>14788525</id><snippet>self.hello()</snippet></ROW><ROW><id>14788525</id><snippet>goodbye</snippet></ROW><ROW><id>14788525</id><snippet>greet_first</snippet></ROW><ROW><id>14788525</id><snippet>Foo</snippet></ROW><ROW><id>14788525</id><snippet>@staticmethod</snippet></ROW><ROW><id>14788525</id><snippet>.__get__()</snippet></ROW><ROW><id>14788525</id><snippet>class Foo(object):
    def hello(self):
        print "Hello cruel world!"

    @staticmethod
    def greet_first(f):
        def wrapper(self, *args, **kwargs):
            self.hello()
            return f(self, *args, **kwargs)
        return wrapper

    @greet_first.__get__(object)
    def goodbye(self, concat):
        print "Goodbye {0}".format(concat)
</snippet></ROW><ROW><id>14788525</id><snippet>.__get__()</snippet></ROW><ROW><id>14788525</id><snippet>object</snippet></ROW><ROW><id>14788525</id><snippet>staticmethod</snippet></ROW><ROW><id>14788525</id><snippet>Foo</snippet></ROW><ROW><id>14788525</id><snippet>@staticmethod</snippet></ROW><ROW><id>14788525</id><snippet>object</snippet></ROW><ROW><id>14788573</id><snippet>y = y[x &gt; 10]</snippet></ROW><ROW><id>14788573</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#-- Generate some data...-------
x = np.linspace(-10, 50, 100)
y = x**2 + 3*x + 8

# Add a lot of noise to part of the data...
y[x &lt; 10] += np.random.random(sum(x &lt; 10)) * 300

# Now let's extract only the part of the data we're interested in...
x_filt = x[x &gt; 10]
y_filt = y[x &gt; 10]

# And fit a line to only that portion of the data.
model = np.polyfit(x_filt, y_filt, 2)

# And plot things up
fig, axes = plt.subplots(nrows=2, sharex=True)
axes[0].plot(x, y, 'bo')
axes[1].plot(x_filt, y_filt, 'bo')
axes[1].plot(x, np.polyval(model, x), 'r-')

plt.show()
</snippet></ROW><ROW><id>14788579</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>14788579</id><snippet>tornado.web.RequestHandler.get()</snippet></ROW><ROW><id>14788579</id><snippet>self.xsrf_form_html()
</snippet></ROW><ROW><id>14788579</id><snippet>file = self.request.files['upload_file'][0]
uploaded_content_type = file['content_type']
uploaded_filename = file['filename']
local_file_path = '/some/path/on/server/uploaded.file'
output_file = open(local_file_path, 'w')
output_file.write(file['body'])
output_file.close()
</snippet></ROW><ROW><id>14788657</id><snippet>export PYTEST_PLUGINS=teamcity.util.myplugin
</snippet></ROW><ROW><id>14788657</id><snippet>[pytest]
addopts = -p teamcity.util.myplugin
</snippet></ROW><ROW><id>14788796</id><snippet>psycopg2.extensions.UNICODE</snippet></ROW><ROW><id>14788796</id><snippet>postgresql.conf</snippet></ROW><ROW><id>14788796</id><snippet>SQL_ASCII</snippet></ROW><ROW><id>14788796</id><snippet>utf-8</snippet></ROW><ROW><id>14788796</id><snippet>#client_encoding = sql_ascii # actually, defaults to database
                             # encoding
client_encoding = utf8
</snippet></ROW><ROW><id>14788796</id><snippet>set_client_encoding()</snippet></ROW><ROW><id>14788796</id><snippet>create_engine()</snippet></ROW><ROW><id>14788796</id><snippet>client_encoding</snippet></ROW><ROW><id>14788796</id><snippet>engine = create_engine("postgresql://user:pass@host/dbname", client_encoding='utf8')
</snippet></ROW><ROW><id>14788962</id><snippet>property</snippet></ROW><ROW><id>14788962</id><snippet>class My3dNodeWrapper(object):
    def __init__(self):
        self.node = Some3dNodeThing()

    @property
    def translateX(self):
        return self.node.getXTranslation() # or whatever

    @translateX.setter
    def translateX(self, value):
        self.node.setXTranslation(value) # or whatever
</snippet></ROW><ROW><id>14789104</id><snippet>numpy.take(lut, ...)</snippet></ROW><ROW><id>14789104</id><snippet>lut.take(...)</snippet></ROW><ROW><id>14789104</id><snippet>obj = (PyArrayObject *)PyArray_FromArray(out, dtype, flags);
if (obj == NULL) {
    goto fail;
}
</snippet></ROW><ROW><id>14789104</id><snippet>out</snippet></ROW><ROW><id>14789104</id><snippet>arr</snippet></ROW><ROW><id>14789104</id><snippet>dtype</snippet></ROW><ROW><id>14789104</id><snippet>lut</snippet></ROW><ROW><id>14789104</id><snippet>uint8</snippet></ROW><ROW><id>14789104</id><snippet>arr</snippet></ROW><ROW><id>14789104</id><snippet>uint8</snippet></ROW><ROW><id>14789104</id><snippet>take</snippet></ROW><ROW><id>14789104</id><snippet>dtype</snippet></ROW><ROW><id>14789104</id><snippet>lut</snippet></ROW><ROW><id>14789104</id><snippet>PyArray_FromArray</snippet></ROW><ROW><id>14789104</id><snippet>take</snippet></ROW><ROW><id>14789104</id><snippet>mode='raise'</snippet></ROW><ROW><id>14789104</id><snippet>lut.dtype != arr.dtype</snippet></ROW><ROW><id>14789104</id><snippet>lut</snippet></ROW><ROW><id>14789104</id><snippet>int32</snippet></ROW><ROW><id>14789104</id><snippet>uint16</snippet></ROW><ROW><id>14789104</id><snippet>arr</snippet></ROW><ROW><id>14789104</id><snippet>arr = lut.take(arr)</snippet></ROW><ROW><id>14789104</id><snippet>arr</snippet></ROW><ROW><id>14789105</id><snippet>attach_volume</snippet></ROW><ROW><id>14789105</id><snippet>volume_id</snippet></ROW><ROW><id>14789105</id><snippet>get_all_instances</snippet></ROW><ROW><id>14789105</id><snippet>volume_id</snippet></ROW><ROW><id>14789268</id><snippet>url = 'http://api.mixpanel.com/track/?data=%d&amp;ip=1&amp;img=1'%data
</snippet></ROW><ROW><id>14789268</id><snippet>url = 'http://api.mixpanel.com/track/?data=%s&amp;ip=1&amp;img=1'%data
</snippet></ROW><ROW><id>14789268</id><snippet>%d</snippet></ROW><ROW><id>14789268</id><snippet>%s</snippet></ROW><ROW><id>14789548</id><snippet>def get(self, some_id, *args, **kwargs)
    handler_cls = get_handler(some_id)
    handler = handler_cls(self.request, self.response)
    return handler.dispatch()
</snippet></ROW><ROW><id>14789600</id><snippet>self</snippet></ROW><ROW><id>14789600</id><snippet>self.myList.append('Item3')</snippet></ROW><ROW><id>14789600</id><snippet>myList.append('Item3')</snippet></ROW><ROW><id>14789600</id><snippet>import random

from traits.api import HasTraits, List, Str, Button
from traitsui.api import ListStrEditor, View, UItem


class Demo(HasTraits):

    my_list = List(Str)

    add = Button("ADD")
    clear = Button("CLEAR")

    traits_view = \
        View(
            UItem('my_list', editor=ListStrEditor(auto_add=False)),
            UItem('add'),
            UItem('clear'),
        )

    def _my_list_default(self):
        return ['Item1', 'Item2']

    def _add_fired(self):
        new_item = "Item%d" % random.randint(3, 999)
        self.my_list.append(new_item)

    def _clear_fired(self):
        self.my_list = []


if __name__ == "__main__":
    demo = Demo()
    demo.configure_traits()
</snippet></ROW><ROW><id>14789696</id><snippet>warnings</snippet></ROW><ROW><id>14789696</id><snippet>import warnings

warnings.filterwarnings("ignore", category=UserWarning, module='urllib2')
</snippet></ROW><ROW><id>14789838</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.read_gml('t.gml')

In [3]: G.node
Out[3]: 
{0: {'id': 0, 'label': u'24'},
 1: {'id': 1, 'label': u'25'},
 2: {'id': 2, 'label': u'26'},
 3: {'id': 3, 'label': u'27'},
 4: {'id': 4, 'label': u'20'},
 5: {'id': 5, 'label': u'21'}}
</snippet></ROW><ROW><id>14789838</id><snippet>In [4]: G.node[0]['label']
Out[4]: u'24'
</snippet></ROW><ROW><id>14790178</id><snippet>dtypes</snippet></ROW><ROW><id>14790178</id><snippet>|S1</snippet></ROW><ROW><id>14790178</id><snippet>|S2</snippet></ROW><ROW><id>14790178</id><snippet>|</snippet></ROW><ROW><id>14790178</id><snippet>|</snippet></ROW><ROW><id>14790530</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>14790860</id><snippet>self.welcomeScreen(self)
</snippet></ROW><ROW><id>14790860</id><snippet>self.welcomeScreen(parent)
</snippet></ROW><ROW><id>14790860</id><snippet>Class2</snippet></ROW><ROW><id>14790860</id><snippet>welcomeScreen</snippet></ROW><ROW><id>14790860</id><snippet>self.welcomeScreen(b)</snippet></ROW><ROW><id>14790860</id><snippet>Class2.welcomeScreen(self, b)</snippet></ROW><ROW><id>14790945</id><snippet>${self.body()}</snippet></ROW><ROW><id>14790945</id><snippet>from mako.template import Template
from mako.lookup import TemplateLookup

base = """
  &lt;html&gt;
    &lt;body&gt;

      &lt;div class="header"&gt;
        &lt;%block name="header"/&gt;
      &lt;/div&gt;

      ${self.body()}

    &lt;/body&gt;
  &lt;/html&gt;
"""

index = """
  &lt;%inherit file="base.html"/&gt;

  &lt;%block name="header"&gt;
    this is some header content
  &lt;/%block&gt;

  this is the body content.
"""

lookup = TemplateLookup()
lookup.put_string("base.html", base)
lookup.put_string("index.html", index)

index_template = lookup.get_template("index.html")

print index_template.render()
</snippet></ROW><ROW><id>14790983</id><snippet>&gt;&gt;&gt; a = '\N{MAHJONG TILE GREEN DRAGON}'
&gt;&gt;&gt; len(a)
2
&gt;&gt;&gt; a
''
</snippet></ROW><ROW><id>14790983</id><snippet>&gt;&gt;&gt; a = '\N{MAHJONG TILE GREEN DRAGON}'
&gt;&gt;&gt; len(a)
1
&gt;&gt;&gt; a
'\U0001f005'
&gt;&gt;&gt; print(a)
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    print(a)
UnicodeEncodeError: 'UCS-2' codec can't encode character '\U0001f005' 
in position 0: Non-BMP character not supported in Tk
</snippet></ROW><ROW><id>14790997</id><snippet>&gt;&gt;&gt; lod = [{1: "a"}, {2: "b"}]
&gt;&gt;&gt; any(1 in d for d in lod)
True
&gt;&gt;&gt; any(3 in d for d in lod)
False
</snippet></ROW><ROW><id>14790997</id><snippet>next</snippet></ROW><ROW><id>14790997</id><snippet>enumerate</snippet></ROW><ROW><id>14790997</id><snippet>&gt;&gt;&gt; next(i for i,d in enumerate(lod) if 1 in d)
0
&gt;&gt;&gt; next(d for i,d in enumerate(lod) if 1 in d)
{1: 'a'}
&gt;&gt;&gt; next((i,d) for i,d in enumerate(lod) if 1 in d)
(0, {1: 'a'})
</snippet></ROW><ROW><id>14790997</id><snippet>StopIteration</snippet></ROW><ROW><id>14790997</id><snippet>&gt;&gt;&gt; next(i for i,d in enumerate(lod) if 3 in d)
Traceback (most recent call last):
  File "&lt;ipython-input-107-1f0737b2eae0&gt;", line 1, in &lt;module&gt;
    next(i for i,d in enumerate(lod) if 3 in d)
StopIteration
</snippet></ROW><ROW><id>14790997</id><snippet>next</snippet></ROW><ROW><id>14790997</id><snippet>None</snippet></ROW><ROW><id>14790997</id><snippet>&gt;&gt;&gt; next((i for i,d in enumerate(lod) if 3 in d), None)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14790997</id><snippet>&gt;&gt;&gt; lod = [{1: "a"}, {2: "b"}, {2: "c"}]
&gt;&gt;&gt; [i for i,d in enumerate(lod) if 2 in d]
[1, 2]
</snippet></ROW><ROW><id>14790998</id><snippet>&lt;line 58&gt; gtk = True
&lt;line 57&gt; gtkagg = True
&lt;line 74&gt; backend = GTKAgg
</snippet></ROW><ROW><id>14791086</id><snippet>itertools.product</snippet></ROW><ROW><id>14791086</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; A = "dog bit dog null".split()
&gt;&gt;&gt; B = "hund bet hund".split()
&gt;&gt;&gt; product(A, repeat=3)
&lt;itertools.product object at 0x1148fd500&gt;
&gt;&gt;&gt; len(list(product(A, repeat=3)))
64
&gt;&gt;&gt; list(product(A, repeat=3))[:5]
[('dog', 'dog', 'dog'), ('dog', 'dog', 'bit'), ('dog', 'dog', 'dog'), ('dog', 'dog', 'null'), ('dog', 'bit', 'dog')]
</snippet></ROW><ROW><id>14791086</id><snippet>dog</snippet></ROW><ROW><id>14791086</id><snippet>A</snippet></ROW><ROW><id>14791086</id><snippet>&gt;&gt;&gt; len(set(product(A, repeat=3)))
27
</snippet></ROW><ROW><id>14791086</id><snippet>&gt;&gt;&gt; trips = [zip(B, p) for p in product(A, repeat=len(B))]
&gt;&gt;&gt; trips[:5]
[[('hund', 'dog'), ('bet', 'dog'), ('hund', 'dog')], [('hund', 'dog'), ('bet', 'dog'), ('hund', 'bit')], [('hund', 'dog'), ('bet', 'dog'), ('hund', 'dog')], [('hund', 'dog'), ('bet', 'dog'), ('hund', 'null')], [('hund', 'dog'), ('bet', 'bit'), ('hund', 'dog')]]
</snippet></ROW><ROW><id>14791101</id><snippet>zip</snippet></ROW><ROW><id>14791101</id><snippet>list comprehension</snippet></ROW><ROW><id>14791101</id><snippet>&gt;&gt;&gt; [x+y for x, y in zip(a, b)]
[2, 4, 6, 8, 10, 12, 14]
</snippet></ROW><ROW><id>14791101</id><snippet>zip</snippet></ROW><ROW><id>14791101</id><snippet>list</snippet></ROW><ROW><id>14791101</id><snippet>n</snippet></ROW><ROW><id>14791101</id><snippet>2-element</snippet></ROW><ROW><id>14791101</id><snippet>&gt;&gt;&gt; zip(a, b)
[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]
</snippet></ROW><ROW><id>14791317</id><snippet>sum([int(s.strip()) for s in open('foo.txt').readlines()])
</snippet></ROW><ROW><id>14791317</id><snippet>result = 0
for s in open('foo.txt'): result += int(s.strip())
</snippet></ROW><ROW><id>14791417</id><snippet>def callback(hwnd, hwnds):
    if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
        hwnds[win32gui.GetClassName(hwnd)] = hwnd
    return True

hwnds = {}
win32gui.EnumChildWindows(whndl, callback, hwnds)
</snippet></ROW><ROW><id>14791417</id><snippet>import win32api, win32con, win32gui, win32ui, win32service, os, time


def f_click(pycwnd):
    x=300
    y=300
    lParam = y &lt;&lt;15 | x
    pycwnd.SendMessage(win32con.WM_LBUTTONDOWN, win32con.MK_LBUTTON, lParam);
    pycwnd.SendMessage(win32con.WM_LBUTTONUP, 0, lParam);

def get_whndl():
    whndl = win32gui.FindWindowEx(0, 0, None, 'NB.txt - Notepad')
    return whndl

def make_pycwnd(hwnd):       
    PyCWnd = win32ui.CreateWindowFromHandle(hwnd)
    return PyCWnd

def send_input_hax(pycwnd, msg):
    f_click(pycwnd)
    for c in msg:
        if c == "\n":
            pycwnd.SendMessage(win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)
            pycwnd.SendMessage(win32con.WM_KEYUP, win32con.VK_RETURN, 0)
        else:
            pycwnd.SendMessage(win32con.WM_CHAR, ord(c), 0)
    pycwnd.UpdateWindow()

whndl = get_whndl()

def callback(hwnd, hwnds):
    if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
        hwnds[win32gui.GetClassName(hwnd)] = hwnd
    return True
hwnds = {}
win32gui.EnumChildWindows(whndl, callback, hwnds)
whndl = hwnds['Edit']

pycwnd = make_pycwnd(whndl)
msg = "It works !\n"
send_input_hax(pycwnd,msg)
</snippet></ROW><ROW><id>14791417</id><snippet>&gt;&gt;&gt; x = 300
&gt;&gt;&gt; y = 300
&gt;&gt;&gt; lParam = y &lt;&lt; 15 | x
&gt;&gt;&gt; lParam &amp; 0x7FFF # x
0: 300
&gt;&gt;&gt; lParam &gt;&gt; 15 # y
1: 300
</snippet></ROW><ROW><id>14791472</id><snippet>object</snippet></ROW><ROW><id>14791472</id><snippet>super()</snippet></ROW><ROW><id>14791472</id><snippet>self.roles = roles</snippet></ROW><ROW><id>14791472</id><snippet>MultiRoleUser</snippet></ROW><ROW><id>14791472</id><snippet>MultiRoleUser.__getattr__()</snippet></ROW><ROW><id>14791472</id><snippet>def not_allowed(*args, **kwargs): return False

class User(object):
    def __init__(self, userid):
        self.userid = userid

    def __getattr__(self, attr):
        return not_allowed

    def view_profile(self):
        return True

class Admin(User):
    def edit_comment(self):
        return True

class Expert(User):
    def delete_post(self):
        return True

class MultiRoleUser(User):
    """A multirole user has all the power of all the roles together"""
    def __init__(self, userid, roles):
        super(MultiRoleUser, self).__init__(userid)
        self.roles = [role(userid) for role in roles] # create instances needed

    def __getattr__(self, attr):
        all_funcs = [getattr(x, attr, None) for x in self.roles]
        return any(x() for x in all_funcs if x) # check permission if there was one

u = MultiRoleUser('userid', [Admin, Expert])

print 'u.edit_comment:', u.edit_comment
print 'u.delete_post:', u.delete_post
</snippet></ROW><ROW><id>14791472</id><snippet>sets</snippet></ROW><ROW><id>14791488</id><snippet>tests = [
    0.4277169,    
    0.427716,
    0.42771,
    999.42771,
    999.427716    
    ]

for rt in tests:
    print('Correct! RT = %d' % (rt*10**6 % 10, ))
</snippet></ROW><ROW><id>14791488</id><snippet>Correct! RT = 6    # This shows the correct digit if rt has more than 6 significant digits
Correct! RT = 6
Correct! RT = 0    # This shows a zero is used if rt has &lt; 6 significant digits
Correct! RT = 0
Correct! RT = 6
</snippet></ROW><ROW><id>14791916</id><snippet> b=a[a&gt;threshold]
</snippet></ROW><ROW><id>14791916</id><snippet>import numpy as np
import time

a=np.random.random_sample(int(1e9))

t1=time.time()
b=a[a&gt;0.5]
print(time.time()-t1,'seconds')
</snippet></ROW><ROW><id>14791916</id><snippet>22.389815092086792 seconds</snippet></ROW><ROW><id>14792113</id><snippet>random.shuffle</snippet></ROW><ROW><id>14792113</id><snippet>random.shuffle(l)
random_selection = l[ :l.index(10) ]
</snippet></ROW><ROW><id>14792254</id><snippet>zip(a, b, c)</snippet></ROW><ROW><id>14792254</id><snippet>[(1, 4, 7), (2, 5, 8), (3, 6, 9)]</snippet></ROW><ROW><id>14792254</id><snippet>with open('Test.csv', 'wb') as f:
    w = csv.writer(f)
    for row in zip(a, b, c):
        w.writerow(row)
</snippet></ROW><ROW><id>14792285</id><snippet>tagstats = open...</snippet></ROW><ROW><id>14792369</id><snippet>(255, 255, 255, 0)</snippet></ROW><ROW><id>14792369</id><snippet>font.render</snippet></ROW><ROW><id>14792369</id><snippet>(255, 255, 255)</snippet></ROW><ROW><id>14792576</id><snippet>d = {1: 'red', 2: 'orange', 3: 'yellow'}
</snippet></ROW><ROW><id>14792576</id><snippet>lst = [d[k] for k in lst]
</snippet></ROW><ROW><id>14792743</id><snippet>import csv
from itertools import izip_longest


# Creating a CSV file
with open(r'Data.csv','wb') as f:
    fw = csv.writer(f)
    fw.writerows( (('Heading 1', 'Heading 2'),
                   ('1'),
                   ('1'),
                   ('0'),
                   ('2'),
                   ('1'),
                   ('0'))   )


print "The CSV file at start, read by a csv.reader :\n"
with open(r'Data.csv','rb') as f:
    fr = csv.reader(f)
    print '\n'.join(map(repr,fr))


print '\n------------------------------------------'
newdata = [10,0,10,20,10,20,10,10]

with open(r'Data.csv','rb') as f:
    fr = csv.reader(f)
    newrows = [fr.next()]
    newrows += (a+[b] for a,b in izip_longest(fr, newdata,
                                              fillvalue=[0]))

print 'newrows\n',newrows

with open(r'Data.csv', 'wb') as f:
     csv.writer(f).writerows(newrows)
print '------------------------------------------\n'


print "The new CSV file created, read by a csv.reader :\n"
with open(r'Data.csv','rb') as f:
    fr = csv.reader(f)
    print '\n'.join(map(repr,fr))
</snippet></ROW><ROW><id>14792743</id><snippet>The CSV file at start, read by a csv.reader :

['Heading 1', 'Heading 2']
['1']
['1']
['0']
['2']
['1']
['0']

------------------------------------------
newrows
[['Heading 1', 'Heading 2'], ['1', 10], ['1', 0], ['0', 10], ['2', 20], ['1', 10], ['0', 20], [0, 10], [0, 10]]
------------------------------------------

The new CSV file created, read by a csv.reader :

['Heading 1', 'Heading 2']
['1', '10']
['1', '0']
['0', '10']
['2', '20']
['1', '10']
['0', '20']
['0', '10']
['0', '10']
</snippet></ROW><ROW><id>14792743</id><snippet>import csv
from itertools import izip_longest
from os import remove,rename

# Creating a CSV file
with open(r'Data.csv','wb') as f:
    fw = csv.writer(f)
    fw.writerows( (('Heading 1', 'Heading 2'),
                   ('1'),
                   ('1'),
                   ('0'),
                   ('2'),
                   ('1'),
                   ('0'))   )

print "The CSV file at start, read by a csv.reader :\n"
with open(r'Data.csv','rb') as f:
    print '\n'.join(map(repr,csv.reader(f)))


#------------------------------------------
newdata = [10,0,10,20,10,20,10,10]

with open(r'Data.csv','rb') as f, open(r'newData.csv','wb') as g:
    fr = csv.reader(f)
    gw = csv.writer(g)
    gw.writerow(fr.next())
    gw.writerows( a+[b] for a,b in izip_longest(fr, newdata,
                                                fillvalue=[0]) )
remove (r'Data.csv')
rename (r'newData.csv',r'Data.csv')

#------------------------------------------

print "The new CSV file created, read by a csv.reader :\n"
with open(r'Data.csv','rb') as f:
    print '\n'.join(map(repr,csv.reader(f)))
</snippet></ROW><ROW><id>14792759</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>14792759</id><snippet>UPDATE</snippet></ROW><ROW><id>14792759</id><snippet>rowcount</snippet></ROW><ROW><id>14792759</id><snippet>&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; conn.execute('CREATE TABLE foo (bar, baz)')
&lt;sqlite3.Cursor object at 0x1042ab6c0&gt;
&gt;&gt;&gt; conn.execute('INSERT INTO foo VALUES (1, 2)')
&lt;sqlite3.Cursor object at 0x1042ab730&gt;
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.execute('UPDATE foo SET baz=3 WHERE bar=2')
&lt;sqlite3.Cursor object at 0x1042ab6c0&gt;
&gt;&gt;&gt; cursor.rowcount
0
&gt;&gt;&gt; cursor.execute('UPDATE foo SET baz=3 WHERE bar=1')
&lt;sqlite3.Cursor object at 0x1042ab6c0&gt;
&gt;&gt;&gt; cursor.rowcount
1
</snippet></ROW><ROW><id>14792759</id><snippet>&gt;&gt;&gt; cursor.execute('UPDATE nonesuch SET baz=3 WHERE bar=2')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.OperationalError: no such table: nonesuch
&gt;&gt;&gt; cursor.execute('UPDATE foo SET nonesuchcolumn=3 WHERE bar=2')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.OperationalError: no such column: nonesuchcolumn
</snippet></ROW><ROW><id>14792759</id><snippet>sqlite3</snippet></ROW><ROW><id>14792759</id><snippet>pysqlite2</snippet></ROW><ROW><id>14792759</id><snippet>try:
    import sqlite3  # included library
except ImportError:
    from pysqlite2 import dbapi2 as sqlite3  # use pysqlite2 instead
</snippet></ROW><ROW><id>14792862</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>14792862</id><snippet>DEBUG</snippet></ROW><ROW><id>14792862</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>14792862</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>14792862</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14792862</id><snippet>/static/</snippet></ROW><ROW><id>14792862</id><snippet>collectstatic</snippet></ROW><ROW><id>14792945</id><snippet>s[ 1+s.find("(") if s.find("(") &gt; 0 else None : -1 if s.find(")") &gt; 0 else None]
</snippet></ROW><ROW><id>14792945</id><snippet>s[ 1+s.find("(") if '(' in s else None : -1 if ')' in s  else None]
</snippet></ROW><ROW><id>14792998</id><snippet>apt-get install python-flask</snippet></ROW><ROW><id>14793082</id><snippet>def factorize(n):
    factors = []

    p = 2
    while True:
        while(n % p == 0 and n &gt; 0): #while we can divide by smaller number, do so
            factors.append(p)
            n = n / p
        p += 1  #p is not necessary prime, but n%p == 0 only for prime numbers
        if p &gt; n / p:
            break
    if n &gt; 1:
        factors.append(n)
    return factors

print factorize(32*9*11*13*13)
</snippet></ROW><ROW><id>14793082</id><snippet>def prime_factor(n):
    list = [] 
    if n==1:
        return [1] #or []?
    else:
        for i in range(2,n+1): #additional improvement could be made here
            if n %i ==0:
                b = prime_factor(n/i)
                list.append(i) #i is always prime in here, you return once first i is found
                list.extend(b)
                return list
</snippet></ROW><ROW><id>14793082</id><snippet>def prime(n):</snippet></ROW><ROW><id>14793110</id><snippet>cPickle</snippet></ROW><ROW><id>14793110</id><snippet>cPickle</snippet></ROW><ROW><id>14793110</id><snippet>wrapPacked</snippet></ROW><ROW><id>14793110</id><snippet>cPickle.loads()</snippet></ROW><ROW><id>14793110</id><snippet>pickle</snippet></ROW><ROW><id>14793196</id><snippet>my_hmac</snippet></ROW><ROW><id>14793196</id><snippet>.get_signed_url()</snippet></ROW><ROW><id>14793196</id><snippet>self.my_hmac.update()</snippet></ROW><ROW><id>14793196</id><snippet>"GET ..."</snippet></ROW><ROW><id>14793196</id><snippet>hmac</snippet></ROW><ROW><id>14793196</id><snippet>m.update(a); m.update(b)</snippet></ROW><ROW><id>14793196</id><snippet>m.update(a+b)</snippet></ROW><ROW><id>14793225</id><snippet>5000</snippet></ROW><ROW><id>14793225</id><snippet>primes_to_generate</snippet></ROW><ROW><id>14793225</id><snippet>while</snippet></ROW><ROW><id>14793225</id><snippet>int</snippet></ROW><ROW><id>14793225</id><snippet>raw_input</snippet></ROW><ROW><id>14793225</id><snippet>int</snippet></ROW><ROW><id>14793225</id><snippet>primes_to_generate = int(raw_input("How many to generate? "))
</snippet></ROW><ROW><id>14793225</id><snippet>try</snippet></ROW><ROW><id>14793225</id><snippet>try:
    primes_to_generate = int(raw_input("How many to generate? "))
except ValueError:
    print "Whoa! That's not a number I know!"
    # You'd probably then want to let the user retry
    # by enclosing this whole thing in a loop or something.
</snippet></ROW><ROW><id>14793380</id><snippet>markdown</snippet></ROW><ROW><id>14793380</id><snippet>pip install markdown</snippet></ROW><ROW><id>14793504</id><snippet>argmax</snippet></ROW><ROW><id>14793504</id><snippet># store the cumsum, since it's used multiple times
cum_a = a.cumsum(axis=0)

# find the indices as before
indices = np.argmax(abs(cum_a), axis=0)

# construct the indices for the second and third dimensions
y, z = np.indices(indices.shape)

# get the values with np indexing
max_mag_signed = cum_a[indices, y, z]
</snippet></ROW><ROW><id>14793527</id><snippet> @alpha=sort @logf;
 $prev = 'null';
 @uniq = grep($_ ne $prev &amp;&amp; ($prev = $_), @alpha);
</snippet></ROW><ROW><id>14793527</id><snippet>uniq = sorted(set(logf))
</snippet></ROW><ROW><id>14793527</id><snippet>logf</snippet></ROW><ROW><id>14793527</id><snippet>uniq</snippet></ROW><ROW><id>14793527</id><snippet>count = collections.Counter()
for line in f:
    count[line] += 1
</snippet></ROW><ROW><id>14793527</id><snippet>import sys
import re
import collections

logf = '/var/log/messages.log'
count = collections.Counter()
write = sys.stdout.write

with open(logf, 'r') as f:
    for line in f:
        line = re.sub(r'\d+','#',line)
        count[line] += 1

for line in sorted(count):
     write("{c}: {l}".format(c = count[line], l = line))
</snippet></ROW><ROW><id>14793578</id><snippet>Counter</snippet></ROW><ROW><id>14793578</id><snippet>from collections import Counter
from itertools import groupby

l = [1,2,3,3,3,4,4,4,5,5,6,6,6]

# group most_common output by frequency
freqs = groupby(Counter(l).most_common(), lambda x:x[1])
# pick off the first group (highest frequency)
print [val for val,count in freqs.next()[1]]
# prints [3, 4, 6]
</snippet></ROW><ROW><id>14793770</id><snippet>https://api.imgur.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&amp;response_type=REQUESTED_RESPONSE_TYPE&amp;state=APPLICATION_STATE
</snippet></ROW><ROW><id>14793770</id><snippet>params</snippet></ROW><ROW><id>14793770</id><snippet>headers</snippet></ROW><ROW><id>14793882</id><snippet>try/except</snippet></ROW><ROW><id>14793882</id><snippet>while True:
    try:
        n = int(input("How many numbers to sum up?: "))
        if n &lt;= 0:
            print("You have to write a positive integer; try again!")
            continue
        break
    except ValueError:
        print("You have to write a positive integer; try again!")
</snippet></ROW><ROW><id>14793882</id><snippet>squares = lambda x: [print('{0} * {0} = {1}'.format(x, x**2)), x**2][1]

print("Sum:", sum(squares(i) for i in range(1, n+1))
</snippet></ROW><ROW><id>14793882</id><snippet>;)</snippet></ROW><ROW><id>14793882</id><snippet>def squares(x):
    print('{0} * {0} = {1}'.format(x, x**2))
    return x**2
</snippet></ROW><ROW><id>14794023</id><snippet>fileCSVTraining = genfromtxt('TrainingData.csv')
</snippet></ROW><ROW><id>14794023</id><snippet>t = fileCSVTraining[:6, :]
</snippet></ROW><ROW><id>14794023</id><snippet>r</snippet></ROW><ROW><id>14794098</id><snippet>for donation in donations:
        ##helper['donation_date'] = donation.date
        helper['donation_amount'] = donation.amount
</snippet></ROW><ROW><id>14794098</id><snippet>donations</snippet></ROW><ROW><id>14794098</id><snippet>helper</snippet></ROW><ROW><id>14794098</id><snippet>    helper['donation_amount'] += donation.amount
</snippet></ROW><ROW><id>14794098</id><snippet>data = [ 'participant_specific_donation' : info , 'participant_specific_milestone' : info1 ]
</snippet></ROW><ROW><id>14794098</id><snippet>{ }</snippet></ROW><ROW><id>14794098</id><snippet>data = { 'participant_specific_donation' : info , 'participant_specific_milestone' : info1 }
</snippet></ROW><ROW><id>14794098</id><snippet>donation_amount = [donation for donation in donations]
</snippet></ROW><ROW><id>14794098</id><snippet>helper['donation_amount'] = donation_amount
</snippet></ROW><ROW><id>14794139</id><snippet>get</snippet></ROW><ROW><id>14794139</id><snippet>block=False</snippet></ROW><ROW><id>14794139</id><snippet>get_nowait</snippet></ROW><ROW><id>14794139</id><snippet>get</snippet></ROW><ROW><id>14794139</id><snippet>try</snippet></ROW><ROW><id>14794139</id><snippet>try:
    item = q.get(block=False)
except queue.Empty:
    return
</snippet></ROW><ROW><id>14794332</id><snippet>def halfTuple(oldTuple):
    return tuple(x * 0.5 for x in oldTuple)
</snippet></ROW><ROW><id>14794449</id><snippet>from ????? import app
from ????? import logged_in
import home.index
import welcome.index

@app.route('/')
def your_basic_index_view():
   if logged_in():
       return home.index()
   else:
       return welcome.index()
</snippet></ROW><ROW><id>14794449</id><snippet>from flask import Flask, session, g

from modules.welcome import welcome
from modules.home import home as home

from modules.home import index as h_index
from modules.welcome import index as w_index

app = Flask(__name__)
app.config.from_pyfile('config.cfg')

app.register_blueprint(welcome)
app.register_blueprint(home)

@app.route('/', methods=['GET', 'POST'])
def index():
    if 'user_id' in session:
        return h_index()
    else:
        return w_index()
</snippet></ROW><ROW><id>14794500</id><snippet>import dj_database_url
DATABASES['default'] =  dj_database_url.config(default='postgres://foo:bar@somehost.amazonaws.com:5432/somedb')
</snippet></ROW><ROW><id>14794589</id><snippet>from pattern.web import URL, DOM

url = URL("http://temelelektronik.net")
dom = DOM(url.download())
for anchor in dom.by_tag('a'):
    print(anchor.href)
</snippet></ROW><ROW><id>14794771</id><snippet>import json
data = json.dumps({ 'participant_specific_donation' : info , 'participant_specific_milestone' : info1 })
</snippet></ROW><ROW><id>14794801</id><snippet>def get_context_data(self, form, **kwargs):
    context = super(PaperworkWizard, self).get_context_data(form=form, **kwargs)

    #this line makes camp available as a var in the template context.
    #it sets it to an OBJECT RETRIEVED USING THE SLUG FROM THE URL.
    context.update({'camp': Camp.objects.get(slug=self.kwargs.get("slug"))})
    return context
</snippet></ROW><ROW><id>14795628</id><snippet>&gt;&gt;&gt; class A(object):
...    def foo(self, bar):
...       self.zoo = bar
...
&gt;&gt;&gt; i = A()
&gt;&gt;&gt; i.__dict__ # instance dict is empty
{}
&gt;&gt;&gt; i.foo('hello') # assign a value to an instance
&gt;&gt;&gt; i.__dict__ 
{'zoo': 'hello'} # this is the instance level dict
&gt;&gt;&gt; i.z = {'another':'dict'}
&gt;&gt;&gt; i.__dict__
{'z': {'another': 'dict'}, 'zoo': 'hello'} # all at instance level
&gt;&gt;&gt; A.__dict__.keys() # at the CLASS level, only holds items in the class's namespace
['__dict__', '__module__', 'foo', '__weakref__', '__doc__']
</snippet></ROW><ROW><id>14795642</id><snippet>heapq</snippet></ROW><ROW><id>14795642</id><snippet>heap = [(-value, key) for key,value in the_dict.items()]
largest = heapq.nsmallest(10, heap)
largest = [(key, -value) for value, key in largest]
</snippet></ROW><ROW><id>14795642</id><snippet>heapq</snippet></ROW><ROW><id>14795642</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; def key_generator():
...     characters = [chr(random.randint(65, 90)) for x in range(100)]
...     for i in it.count():
...             yield ''.join(random.sample(characters, 3))
... 
&gt;&gt;&gt; the_dict = dict((key, random.randint(-500, 500)) for key, _ in zip(key_generator(), range(3000)))
&gt;&gt;&gt; def with_heapq(the_dict):
...     items = [(-value, key) for key, value in the_dict.items()]
...     smallest = heapq.nsmallest(10, items)
...     return [-value for value, key in smallest]
... 
&gt;&gt;&gt; def with_sorted(the_dict):
...     return sorted(the_dict.items(), key=(lambda x: x[1]), reverse=True)[:10]
... 
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('with_heapq(the_dict)', 'from __main__ import the_dict, with_heapq', number=1000)
0.9220538139343262
&gt;&gt;&gt; timeit.timeit('with_sorted(the_dict)', 'from __main__ import the_dict, with_sorted', number=1000)
1.2792410850524902
</snippet></ROW><ROW><id>14795642</id><snippet>sorted</snippet></ROW><ROW><id>14795642</id><snippet>O(nlogn)</snippet></ROW><ROW><id>14795642</id><snippet>O(n + mlogn)</snippet></ROW><ROW><id>14795642</id><snippet>heapq</snippet></ROW><ROW><id>14795642</id><snippet>&gt;&gt;&gt; timeit.timeit('with_heapq(the_dict)', 'from __main__ import the_dict, with_heapq', number=1000)
2.436316967010498
&gt;&gt;&gt; timeit.timeit('with_sorted(the_dict)', 'from __main__ import the_dict, with_sorted', number=1000)
3.585728168487549
</snippet></ROW><ROW><id>14795642</id><snippet>sorted</snippet></ROW><ROW><id>14795648</id><snippet>PySensors</snippet></ROW><ROW><id>14795819</id><snippet>from datetime import datetime, timedelta
from django.conf import settings
from django.contrib import auth

class AutoLogout:
  def process_request(self, request):
    if not request.user.is_authenticated() :
      #Can't log out if not logged in
      return

    try:
      if datetime.now() - request.session['last_touch'] &gt; timedelta( 0, settings.AUTO_LOGOUT_DELAY * 60, 0):
        auth.logout(request)
        del request.session['last_touch']
        return
    except KeyError:
      pass

    request.session['last_touch'] = datetime.now()
</snippet></ROW><ROW><id>14795819</id><snippet>MIDDLEWARE_CLASSES = [
    .................
    'app_name.middleware.AutoLogout',
]

and this:

# Auto logout delay in minutes
AUTO_LOGOUT_DELAY = 60 #this is equivalent for 1 hour
</snippet></ROW><ROW><id>14796188</id><snippet>.getcode()</snippet></ROW><ROW><id>14796188</id><snippet>urlopen()</snippet></ROW><ROW><id>14796188</id><snippet>url = urllib.urlopen('http://www.stackoverflow.com/')
code = url.getcode()
</snippet></ROW><ROW><id>14796299</id><snippet># Package Imports

import csv
import datetime
import matplotlib.pyplot as plt
import numpy as np
import dateutil.relativedelta as rd
import bisect
import scipy as sp

## File Settings

ipath = "/home/kane/tripkane_python/"
fname = "datetime_test_data.csv"


portfolio_list = []
dateList = []
valueList = []
x = []

portfolio = csv.DictReader(open(ipath + fname, "rb"))
portfolio_list.extend(portfolio)


for data in portfolio_list:
    dateList.append(data['date'])
    valueList.append(data[' value'])

for item in dateList:
    d = datetime.datetime.strptime(item, '%Y%m%d')
    t = d.toordinal()
    x.append(d)


dataArray = np.asarray([x, valueList])

stepList = [0, 3, 5]

TIda = []
TIv = []

for n in range(0, len(stepList)):
    TIda.append(x[stepList[n]])
    TIv.append(valueList[stepList[n]])


# Plot 

fig = plt.figure(figsize=(10, 5))
ax = fig.add_subplot(111)

line1 = plt.plot(x, valueList, 'b')
lns = line1

labs = [l.get_label() for l in lns]
ax.legend(lns, 
          labs, 
          loc='upper left', 
          frameon = False, 
          shadow=False, 
          fancybox=False, 
          labelspacing=0.1, 
          ncol=4, 
          prop={'size':9}
          )
ax.set_title(fname , fontsize = 12)



plt.xticks(fontsize = 8)
plt.yticks(fontsize = 8)
ax.set_ylabel( 'Cents', fontsize = 10 )
ax.grid()

plt.step(TIda, TIv, 'r')

plt.show()
</snippet></ROW><ROW><id>14796424</id><snippet>readline</snippet></ROW><ROW><id>14796452</id><snippet>stop=False
while True:
    try:
        inlog = int(input("Enter any value greater than zero to lookup its logarithm to    the base 10\n"))
        outlog = math.log(inlog, 10)
        print(outlog)

        # Here, the program will ask the user to quit or to continue
        print("Want to check another one?")

        while True:
            response = input("Hit y for yes or n for no\n")
            if response == ("y" or "Y"):
                stop = False
                break
            elif response == ("n" or "N"):
                stop = True
                break
            else:
                continue
        if stop:
            break
except ValueError:
        print("Invalid Input: Make sure your number
</snippet></ROW><ROW><id>14796505</id><snippet>If an instance’s dictionary has an entry with the same name as a data descriptor,    
the data descriptor takes precedence. If an instance’s dictionary has an entry with
the same name as a non-data descriptor, the dictionary entry takes precedence.
</snippet></ROW><ROW><id>14796505</id><snippet>#data descriptor
class A(object):
   def __get__(self, obj, type):
       print "hello from get A"
   def __set__(self, obj, val):
       print "hello from set A"
#non data descriptor
class B(object):
   def __get__(self, obj, type):
       print "hello from get B"

class C(object):
   #our data descriptor
   a = A()
   #our non data descriptor
   b = B()

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.a
hello from get A
&gt;&gt;&gt; c.b
hello from get B
&gt;&gt;&gt; c.a = 0
hello from set A
&gt;&gt;&gt; c.a          #notice after reassignment, A.__get__ is still called
hello from set A
&gt;&gt;&gt; c.b = 0     #instance variable with the same name as the non data-descriptor
&gt;&gt;&gt; c.b         #notice how B.__get__ isn't called anymore
0
</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796505</id><snippet>__set__</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796505</id><snippet>g.x = 0</snippet></ROW><ROW><id>14796505</id><snippet>__set__</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796505</id><snippet>__set__</snippet></ROW><ROW><id>14796505</id><snippet>c.a = 0</snippet></ROW><ROW><id>14796505</id><snippet>A.__set__</snippet></ROW><ROW><id>14796505</id><snippet>c.b = 0</snippet></ROW><ROW><id>14796505</id><snippet>__set__</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796505</id><snippet>__set__</snippet></ROW><ROW><id>14796505</id><snippet>__get__</snippet></ROW><ROW><id>14796875</id><snippet>name.split.select{|t| !t.end_with?('.')}.join(' ')
</snippet></ROW><ROW><id>14796875</id><snippet>name.split.reject{|t| t.end_with?('.')}.join(' ')
</snippet></ROW><ROW><id>14796926</id><snippet>root</snippet></ROW><ROW><id>14796926</id><snippet>l</snippet></ROW><ROW><id>14796926</id><snippet>import os
l = []
for root, dirs, files in os.walk('.'):
    if any(file.endswith('.mp3') for file in files):
        l.append(os.path.abspath(root))
</snippet></ROW><ROW><id>14796926</id><snippet>any()</snippet></ROW><ROW><id>14796926</id><snippet>True</snippet></ROW><ROW><id>14796926</id><snippet>True</snippet></ROW><ROW><id>14796926</id><snippet>.mp3</snippet></ROW><ROW><id>14796926</id><snippet>any()</snippet></ROW><ROW><id>14797396</id><snippet>$HOME</snippet></ROW><ROW><id>14797396</id><snippet>ADB_TRACE</snippet></ROW><ROW><id>14797396</id><snippet>import os
new_env = os.environ.copy()
new_env['ADB_TRACE'] = 'adb'

# sp.popen()
</snippet></ROW><ROW><id>14797396</id><snippet>If env is not None, it must be a mapping that defines the environment variables
for the new process; these are used instead of inheriting the current process’
environment, which is the default behavior.
</snippet></ROW><ROW><id>14797396</id><snippet>ADB_TRACE</snippet></ROW><ROW><id>14797396</id><snippet>ADB_TRACE</snippet></ROW><ROW><id>14797508</id><snippet>except:</snippet></ROW><ROW><id>14797508</id><snippet>try:
    insert(connection, data)
except:
    update(connection, data)
</snippet></ROW><ROW><id>14797508</id><snippet>except:</snippet></ROW><ROW><id>14797508</id><snippet>except:</snippet></ROW><ROW><id>14797508</id><snippet>raise Exception('some message')</snippet></ROW><ROW><id>14797508</id><snippet>ValueError</snippet></ROW><ROW><id>14797508</id><snippet>TypeError</snippet></ROW><ROW><id>14797839</id><snippet>HTTPBasicAuth()</snippet></ROW><ROW><id>14797839</id><snippet>username</snippet></ROW><ROW><id>14797839</id><snippet>password</snippet></ROW><ROW><id>14797839</id><snippet>url</snippet></ROW><ROW><id>14797839</id><snippet> requests.post('https://www.instapaper.com/api/add', data={'url': 'websiteUrl'}, auth=HTTPBasicAuth('username', 'password'))
</snippet></ROW><ROW><id>14797839</id><snippet>requests.get()</snippet></ROW><ROW><id>14797839</id><snippet>requests.post()</snippet></ROW><ROW><id>14798050</id><snippet>def override_setup(exp, args):
    opts = vars(args)

    for param in ['param1', 'param2']:
        if opts[param] is None:
            continue

        try:
            setattr(exp, param, opts[param])
        except Exception as e:
            print e
</snippet></ROW><ROW><id>14798115</id><snippet>class Parse(object):
    """A generator that iterates through a CC-CEDICT formatted file, returning
    a tuple of parsed results (Traditional, Simplified, Pinyin, English)"""
    def __init__(self, path):
        self.path = path

    def __is_comment(self, line):
        return line.startswith("#")

    def __iter__(self):
        with open(self.path) as f:
            for line in f:
                if self.__is_comment(line):
                    continue

                working = line.rstrip().split(" ")
                trad, simp = working[0], working[1]
                working = " ".join(working[2:]).split("]")
                pinyin = working[0][1:]
                english = working[1][1:]
                yield trad, simp, pinyin, english
</snippet></ROW><ROW><id>14798115</id><snippet>def skip_comments(f):
    for line in f:
        if not.startswith('#'):
            yield line

...

    def __iter__(self):
        with open(self.path) as f:
            for line in skip_comments(f):
                working = ....
</snippet></ROW><ROW><id>14798117</id><snippet>f = lambda n: [i for i in range(n, 2*n)]
g = (i * 2 for i in f(10))
l = [i * i for i in g]

ll = lambda n: [i * i * 2 for i in f(n)]
</snippet></ROW><ROW><id>14798229</id><snippet>QMainWindow</snippet></ROW><ROW><id>14798229</id><snippet>QWidget</snippet></ROW><ROW><id>14798229</id><snippet>QButtonGroup</snippet></ROW><ROW><id>14798229</id><snippet>QGroupBox</snippet></ROW><ROW><id>14798229</id><snippet>def func(self):
    layout=QtGui.QHBoxLayout()  # layout for the central widget
    widget=QtGui.QWidget(self)  # central widget
    widget.setLayout(layout)

    number_group=QtGui.QButtonGroup(widget) # Number group
    r0=QtGui.QRadioButton("0")
    number_group.addButton(r0)
    r1=QtGui.QRadioButton("1")
    number_group.addButton(r1)
    layout.addWidget(r0)
    layout.addWidget(r1)

    letter_group=QtGui.QButtonGroup(widget) # Letter group
    ra=QtGui.QRadioButton("a")
    letter_group.addButton(ra)
    rb=QtGui.QRadioButton("b")
    letter_group.addButton(rb)
    layout.addWidget(ra)
    layout.addWidget(rb)

    # assign the widget to the main window
    self.setCentralWidget(widget)
    self.show()
</snippet></ROW><ROW><id>14798263</id><snippet>glob.glob()</snippet></ROW><ROW><id>14798263</id><snippet>**</snippet></ROW><ROW><id>14798263</id><snippet>os.walk()</snippet></ROW><ROW><id>14798263</id><snippet>fnmatch.filter()</snippet></ROW><ROW><id>14798263</id><snippet>import os
import fnmatch

path = 'C:/Users/sam/Desktop/file1'

configfiles = [os.path.join(dirpath, f)
    for dirpath, dirnames, files in os.walk(path)
    for f in fnmatch.filter(files, '*.txt')]
</snippet></ROW><ROW><id>14798263</id><snippet>.txt</snippet></ROW><ROW><id>14798263</id><snippet>fnmatch.filter()</snippet></ROW><ROW><id>14798263</id><snippet>.endswith()</snippet></ROW><ROW><id>14798263</id><snippet>import os

path = 'C:/Users/sam/Desktop/file1'

configfiles = [os.path.join(dirpath, f)
    for dirpath, dirnames, files in os.walk(path)
    for f in files if f.endswith('.txt')]
</snippet></ROW><ROW><id>14798511</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.set_xlim(-50, 50)
ax.set_ylim(-75, 75)
x = [-50, 0, 50]
y = np.array([-50, 0, 0])

ax.fill_between(x,y-30,y+30)

ax.grid()
plt.show()
</snippet></ROW><ROW><id>14798511</id><snippet>ax.add_line(Line2D([-50, 0, 50], [-50, 0, 0], linewidth=80))
</snippet></ROW><ROW><id>14799158</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>14799158</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; l = [{1: "a"}, {2: "b"}]
&gt;&gt;&gt; list(chain.from_iterable(l))
[1, 2]
</snippet></ROW><ROW><id>14799158</id><snippet>.keys()</snippet></ROW><ROW><id>14799158</id><snippet>&gt;&gt;&gt; [k for d in l for k in d]
[1, 2]
</snippet></ROW><ROW><id>14799281</id><snippet>cmd = '{} {}'.format(LS, FILENAME)
</snippet></ROW><ROW><id>14799281</id><snippet>cmd = '{0} {1}'.format(LS, FILENAME)
</snippet></ROW><ROW><id>14799281</id><snippet>import subprocess
import shlex

LS="/bin/ls -l"
FILENAME="inventory.txt"

cmd = '{} {}'.format(LS, FILENAME)    
ps = subprocess.Popen(shlex.split(cmd),
                      stdout = subprocess.PIPE,
                      stderr = subprocess.STDOUT)
output, err = ps.communicate()
print(output)
</snippet></ROW><ROW><id>14799281</id><snippet>import sh
FILENAME = 'inventory.txt'
print(sh.ls('-l', FILENAME, _err_to_out=True))
</snippet></ROW><ROW><id>14799874</id><snippet>def ray_intersect(A, B, C, D):
   """ 
   Intersect two line segments defined by A-&gt;B and C-&gt;D
   Returns the time of intersection along A-&gt;B
   """

   # turn C-&gt;D into a plane...
   E = D-C
   n = np.array((-E[1], E[0]))
   # ...and do the regular plane vs ray maths
   numerator = np.dot(C-A, n)
   denom = np.dot(B-A, n)

   return numerator / denom;
</snippet></ROW><ROW><id>14799986</id><snippet>sys.stdin</snippet></ROW><ROW><id>14800091</id><snippet>a.__get__</snippet></ROW><ROW><id>14800091</id><snippet>class C(object):
    pass

def a(s):
    return 12

a = a.__get__(C)
</snippet></ROW><ROW><id>14800091</id><snippet>class C(object):
    def a(self):
        return 12
</snippet></ROW><ROW><id>14800091</id><snippet>C</snippet></ROW><ROW><id>14800091</id><snippet>a</snippet></ROW><ROW><id>14800091</id><snippet>dir(C)</snippet></ROW><ROW><id>14800091</id><snippet>__get__</snippet></ROW><ROW><id>14800091</id><snippet>self</snippet></ROW><ROW><id>14800127</id><snippet>offset, length = 0, 0
for sentence in tokenize.sent_tokenize(text):
    # fix ignored characters
    while text[offset] != sentence[0]:
        offset += 1

    length = len(sentence)
    yield sentence, offset, length
    offset += length
</snippet></ROW><ROW><id>14800376</id><snippet>cimport cython

b = real_test()
print(b)

cdef real_test():
    cdef int a
    cdef list b = [Node(),Node(),Node()]
    a = b[0].h
    return a

cdef class Node:
    cdef int h
    def __cinit__(self):
        self.h = 3
    property h:
        def __get__(self):
          return self.h
        def __set__(self, float value):
          self.h = value
</snippet></ROW><ROW><id>14800489</id><snippet>settings.py</snippet></ROW><ROW><id>14800489</id><snippet># Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
 '/Users/cupcake/Documents/Workspaces/myDjangoProject/someOtherFolderPerhapsIfYouWant/static',
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
</snippet></ROW><ROW><id>14800489</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>14800489</id><snippet>staticfiles</snippet></ROW><ROW><id>14800489</id><snippet>'/Users/cupcake/Documents/Workspaces/myDjangoProject/someOtherFolderPerhapsIfYouWant/static',
</snippet></ROW><ROW><id>14800489</id><snippet>PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATICFILES_DIRS = (
    PROJECT_ROOT + '/static/'
)
</snippet></ROW><ROW><id>14800660</id><snippet>process_on_special_object</snippet></ROW><ROW><id>14800660</id><snippet>Signal</snippet></ROW><ROW><id>14800660</id><snippet>Slot</snippet></ROW><ROW><id>14800660</id><snippet>Signal</snippet></ROW><ROW><id>14800660</id><snippet>Slot</snippet></ROW><ROW><id>14800660</id><snippet>emit</snippet></ROW><ROW><id>14800660</id><snippet>Signal</snippet></ROW><ROW><id>14800660</id><snippet>Signal</snippet></ROW><ROW><id>14800660</id><snippet>Slots</snippet></ROW><ROW><id>14800660</id><snippet>Signals</snippet></ROW><ROW><id>14800660</id><snippet>Slot</snippet></ROW><ROW><id>14800660</id><snippet>special_object</snippet></ROW><ROW><id>14800660</id><snippet>Special_Tab</snippet></ROW><ROW><id>14800660</id><snippet>class Special_Tab(QtGui.QTabWidget):
    start_comp = QtCore.pyqtSignal()
    kill_thread = QtCore.pyqtSignal()
    def __init__(self, parent, tmp_so):
        QtGui.QTabWidget.__init__(self, parent)
        self.special_object = tmp_so
        self.grid = QtGui.QGridLayout(self)
        # matplotlib figure put into tab
        self.fig = figure.Figure()
        self.plot = self.fig.add_subplot(111)
        self.line, = self.plot.plot(0, 0, 'r-')
        self.canvas = FigureCanvas(self.fig)
        self.grid.addWidget(self.canvas)
        self.canvas.show()
        self.canvas.draw()
        self.canvas_BBox = self.plot.figure.canvas.copy_from_bbox(self.plot.bbox)
        ax1 = self.plot.figure.axes[0]
        thread = QtCore.QThread(parent=self)
        self.worker = Worker(self.special_object)
        self.worker.moveToThread(thread)
        self.worker.update_signal.connect(self.update_GUI)
        #        self.worker.done_signal.connect(?)
        self.start_comp.connect(self.worker.process_on_special_object)
        self.kill_thread.connect(thread.quit)
        thread.start()

    @QtCore.pyqtSlot(special_object)
    def update_GUI(self, tmp_so):
        """
        have the tab update it's self
        """
        # change the GUI to reflect changes made to special_object
        self.line.set_data(tmp_so.X, tmp_so.Y)
        self.plot.draw_artist(self.line)
        self.plot.figure.canvas.blit(self.plot.bbox)

    def start_computation(self):
        self.start_comp.emit()

    def closeEvent(self, ce):
        self.kill_thread.emit()
        QtGui.QTabWidget.closeEvent(self, ce)
</snippet></ROW><ROW><id>14800660</id><snippet>Worker</snippet></ROW><ROW><id>14800660</id><snippet># This class performs the iterative computation that needs to update the GUI
# the signals it send would *ideally* be special_obect objects so any of the parameters can be shown
class Worker(QtCore.QObject):
    update_signal = QtCore.pyqtSignal(QtCore.QObject)
    done_signal = QtCore.pyqtSignal()
    def __init__(self, special_object):
        QtCore.QObject.__init__(self)
        self.special_object = special_object

    @QtCore.pyqtSlot()
    def process_on_special_object(self):
        # do a long fitting process involving the properties of the special_object
        for i in range(0,99999999999999999):
            self.special_object.Y += .1
            self.signal.emit(self.special_object)
        self.done.emit()
        return
</snippet></ROW><ROW><id>14800660</id><snippet># This window just has a button to make all of the tabs in separate processes
class MainWindow(QtGui.QMainWindow):
    process_signal = QtCore.pyqtSignal()
    def __init__(self, parent = None):
        ## snipped
        pass

    # Here we open several tabs and put them in different processes
    def open_tabs(self):
        for i in range(0, 10):
            # this is just some random data for the objects
            X = np.arange(1240.0/1350.0, 1240./200., 0.01)
            Y = np.array(np.e**.2*X + np.sin(10*X)+np.cos(4*X))
            # Here the special tab is created
            temp_special_object = special_object(str(i), X, Y)
            new_tab = Special_Tab(self.main_tab_widget, temp_special_object)
            self.main_tab_widget.addTab(new_tab, str(i))
            # this part works fine without the .start() function
            self.tabs_list.append(new_tab)
        return
    # This appears to be where the problem lies because this should initialize all of the processes
    def process_tabs(self):
        for tab in self.tabs_list:
            tab.start_computation()

        return
    # This should be the 'slot' which the signal is communicating to
    def update_GUI(self, special_object):
        pass
</snippet></ROW><ROW><id>14800778</id><snippet>number</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14800982</id><snippet>XYA2</snippet></ROW><ROW><id>14801123</id><snippet>annotate</snippet></ROW><ROW><id>14801123</id><snippet>x = np.linspace(0,1000)
y = x ** -2

figure()
ax = gca()
ax.loglog(x,y)
ax.grid(True)
ax.grid(True, which='minor')

ax.annotate('a1', (x[15], y[15]),
            backgroundcolor='w',
            color='b',
            va='center',
            ha='center',
            bbox=dict(boxstyle="round", color='b'),)
</snippet></ROW><ROW><id>14801123</id><snippet>annotate</snippet></ROW><ROW><id>14801262</id><snippet>import numpy as np
from scipy.ndimage import convolve

length_l = 10
time_l = 10
u = np.zeros((length_l, length_l))# (x,y)
u[:,  0] = 1
u[:, -1] = 1

alpha = .1
weights = np.array([[ 0,  1,  0],
                    [ 1, -4,  1],
                    [ 0,  1,  0]])

for i in range(5):
    u += alpha * convolve(u, weights)
    print(u)
</snippet></ROW><ROW><id>14801262</id><snippet>weights = alpha * weights
weights[1, 1] = weights[1, 1] + 1

for i in range(5):
    u = convolve(u, weights)
    print(u)
</snippet></ROW><ROW><id>14801281</id><snippet>join</snippet></ROW><ROW><id>14801337</id><snippet>.partition()</snippet></ROW><ROW><id>14801337</id><snippet>first_line = newName.body.getText().partition("\n")[0]
</snippet></ROW><ROW><id>14801337</id><snippet>newName</snippet></ROW><ROW><id>14801337</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14801337</id><snippet>soup</snippet></ROW><ROW><id>14801337</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>14801337</id><snippet>text = soup.pre.string
</snippet></ROW><ROW><id>14801337</id><snippet>list_of_lines = text.splitlines()
</snippet></ROW><ROW><id>14801337</id><snippet>list_of_lines = text.splitlines(True)
</snippet></ROW><ROW><id>14801337</id><snippet>ith_line = list_of_lines[i]
</snippet></ROW><ROW><id>14801337</id><snippet>i = 2</snippet></ROW><ROW><id>14801387</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = "foo &lt;bar e word&gt; f ga &lt;foo b&gt;"
&gt;&gt;&gt; t2 = re.sub(r"(^|\s+)(?![^&lt;&gt;]*?&gt;)", " #", t).lstrip()
&gt;&gt;&gt; t2
'#foo #&lt;bar e word&gt; #f #ga #&lt;foo b&gt;'
</snippet></ROW><ROW><id>14801387</id><snippet>lstrip()</snippet></ROW><ROW><id>14801387</id><snippet>#&lt;</snippet></ROW><ROW><id>14801387</id><snippet>&lt;</snippet></ROW><ROW><id>14801387</id><snippet>,</snippet></ROW><ROW><id>14801387</id><snippet>['g,', "b'"]</snippet></ROW><ROW><id>14801387</id><snippet>&gt;&gt;&gt; s = "c'4 d8 &lt; e' g' &gt;16 fis'4 a,, &lt;g, b'&gt; c''1"
&gt;&gt;&gt; q2 = re.compile(r"(?:&lt;)\s*[^&gt;]*\s*(?:&gt;)\d*|(?&lt;!&lt;)[^\d\s&lt;&gt;]+\d+|(?&lt;!&lt;)[^\d\s&lt;&gt;]+")
&gt;&gt;&gt; s2 = q2.findall(s)
&gt;&gt;&gt; s3 = [re.sub(r"\s*[&gt;&lt;]\s*", '', x) for x in s2]
&gt;&gt;&gt; s4 = [y.split() if ' ' in y else y for y in s3]
&gt;&gt;&gt; s4
["c'4", 'd8', ["e'", "g'16"], "fis'4", 'a,,', ['g,', "b'"], "c''1"]
&gt;&gt;&gt; q3 = re.compile(r"([^\d]+)(\d*)")
&gt;&gt;&gt; s = []
&gt;&gt;&gt; for item in s4:
    if type(item) == list:
            lis = []
            for elem in item:
                    lis.append(q3.search(elem).group(1))
                    if q3.search(elem).group(2) != '':
                            num = q3.search(elem).group(2)
            if q3.search(elem).group(2) != '':
                    s.append((num, lis))
            else:
                    s.append((0, lis))
    else:
            if q3.search(item).group(2) != '':
                    s.append((q3.search(item).group(2), [q3.search(item).group(1)]))
            else:
                    s.append((0, [q3.search(item).group(1)]))


&gt;&gt;&gt; s
[('4', ["c'"]), ('8', ['d']), ('16', ["e'", "g'"]), ('4', ["fis'"]), (0, ['a,,']), (0, ['g,', "b'"]), ('1', ["c''"])]
</snippet></ROW><ROW><id>14801592</id><snippet>python bootstrap.py -v 1.7.0
</snippet></ROW><ROW><id>14801799</id><snippet>django</snippet></ROW><ROW><id>14801799</id><snippet>from django import X</snippet></ROW><ROW><id>14801799</id><snippet>django</snippet></ROW><ROW><id>14801799</id><snippet>django.core.wsgi</snippet></ROW><ROW><id>14801799</id><snippet>No module named core.wsgi</snippet></ROW><ROW><id>14801799</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14801799</id><snippet>settings.py</snippet></ROW><ROW><id>14801861</id><snippet>jinja2</snippet></ROW><ROW><id>14801969</id><snippet>callbacks</snippet></ROW><ROW><id>14801969</id><snippet>callbacks</snippet></ROW><ROW><id>14801969</id><snippet>submit</snippet></ROW><ROW><id>14801969</id><snippet>class TestClass:
    def doSomething(self):
         j = 2 * self.i
         return j # It's REQUIRED that you return j here.

    def set_j(self, j):
        self.j = j
</snippet></ROW><ROW><id>14801969</id><snippet> class parallellClass:
      def __init__(self):
          #your code...
          job_list.append(job_server.submit(TC.doSomething, callback=TC.set_j))
</snippet></ROW><ROW><id>14801969</id><snippet>self.j</snippet></ROW><ROW><id>14801969</id><snippet>doSomething</snippet></ROW><ROW><id>14801969</id><snippet>j</snippet></ROW><ROW><id>14801969</id><snippet>pp</snippet></ROW><ROW><id>14802090</id><snippet>plt.imshow(im2, cmap=plt.cm.grey)
</snippet></ROW><ROW><id>14802198</id><snippet>In [2]: min(data, key = lambda t: t[1])
Out[2]: (5, 0.01)
</snippet></ROW><ROW><id>14802198</id><snippet>In [3]: import operator

In [4]: min(data, key=operator.itemgetter(1))
Out[4]: (5, 0.01)
</snippet></ROW><ROW><id>14802327</id><snippet>ET.tostring</snippet></ROW><ROW><id>14802327</id><snippet>import xml.etree.ElementTree as ET
txt = """
&lt;component&gt;
&lt;section ID="LINK_8e9e0719-efa5-451c-bea3-d547298ad0a1"&gt;
    &lt;id root="8e9e0719-efa5-451c-bea3-d547298ad0a1"/&gt;
    &lt;code code="34070-3" codeSystem="2.16.840.1.113883.6.1" displayName="CONTRAINDICATIONS SECTION"/
    &lt;title&gt;CONTRAINDICATIONS&lt;/title&gt;
    &lt;text&gt;
    &lt;paragraph&gt;Atenolol and chlorthalidone tablets are contraindicated in patients with: sinus brady
        &lt;linkHtml href="#LINK_0df2629f-13c7-4b14-8664-475c32377c68"&gt;WARNINGS&lt;/linkHtml&gt;
            &lt;/content&gt;); anuria; hypersensitivity to this product or to sulfonamide-derived drugs.&lt;/
    &lt;/text&gt;
    &lt;effectiveTime value="20101001"/&gt;
&lt;/section&gt;
&lt;/component&gt;"""

root = ET.fromstring(txt)

for e in root.iter('text'):
    print "&gt;&gt;"
    print ET.tostring(e, method="text")
    print "&lt;&lt;"
</snippet></ROW><ROW><id>14802327</id><snippet>&gt;&gt;

    Atenolol and chlorthalidone tablets are contraindicated in patients with: sinus bradycardia; heart block greater than first degree; cardiogenic shock; overt cardiac failure (see
        WARNINGS
            ); anuria; hypersensitivity to this product or to sulfonamide-derived drugs.


&lt;&lt;
</snippet></ROW><ROW><id>14802405</id><snippet>In [55]: data = (0.25, 0.25)

In [56]: 'and'.join([str(item).replace('.','') for item in data])
Out[56]: '025and025'
</snippet></ROW><ROW><id>14802526</id><snippet>spider_closed</snippet></ROW><ROW><id>14802526</id><snippet>from twisted.internet import reactor

from scrapy import log, signals
from scrapy.crawler import Crawler
from scrapy.settings import Settings
from scrapy.xlib.pydispatch import dispatcher

from testspiders.spiders.followall import FollowAllSpider

def stop_reactor():
    reactor.stop()

dispatcher.connect(stop_reactor, signal=signals.spider_closed)
spider = FollowAllSpider(domain='scrapinghub.com')
crawler = Crawler(Settings())
crawler.configure()
crawler.crawl(spider)
crawler.start()
log.start()
log.msg('Running reactor...')
reactor.run()  # the script will block here until the spider is closed
log.msg('Reactor stopped.')
</snippet></ROW><ROW><id>14802526</id><snippet>stav@maia:/srv/scrapy/testspiders$ ./api
2013-02-10 14:49:38-0600 [scrapy] INFO: Running reactor...
2013-02-10 14:49:47-0600 [followall] INFO: Closing spider (finished)
2013-02-10 14:49:47-0600 [followall] INFO: Dumping Scrapy stats:
    {'downloader/request_bytes': 23934,...}
2013-02-10 14:49:47-0600 [followall] INFO: Spider closed (finished)
2013-02-10 14:49:47-0600 [scrapy] INFO: Reactor stopped.
stav@maia:/srv/scrapy/testspiders$
</snippet></ROW><ROW><id>14802737</id><snippet>uname -r</snippet></ROW><ROW><id>14802737</id><snippet>cut</snippet></ROW><ROW><id>14802737</id><snippet>--delim</snippet></ROW><ROW><id>14802737</id><snippet>uname -r | cut -d. -f1-2
</snippet></ROW><ROW><id>14802737</id><snippet>cut</snippet></ROW><ROW><id>14802737</id><snippet>sw_vers -productVersion
</snippet></ROW><ROW><id>14802750</id><snippet>@decorator</snippet></ROW><ROW><id>14802750</id><snippet>@foo
def bar():
    pass
</snippet></ROW><ROW><id>14802750</id><snippet>def bar():
    pass
bar = foo(bar)
</snippet></ROW><ROW><id>14802750</id><snippet>t.Test_method_2()</snippet></ROW><ROW><id>14802750</id><snippet>import functools

def Test_method_2(self, func):
    @functools.wraps(func)
    def wrapper(self, *args, **kw):
        print 'Wrapped function name:', func.__name__
        return func(*args, **kw)
    return wrapper
</snippet></ROW><ROW><id>14802750</id><snippet>func</snippet></ROW><ROW><id>14802750</id><snippet>self</snippet></ROW><ROW><id>14802750</id><snippet>Test_method_2</snippet></ROW><ROW><id>14802750</id><snippet>t</snippet></ROW><ROW><id>14802750</id><snippet>self</snippet></ROW><ROW><id>14802750</id><snippet>@</snippet></ROW><ROW><id>14802750</id><snippet>@t.Test_method_2(a, b, c, d, e=f, g=h)
</snippet></ROW><ROW><id>14802750</id><snippet>Test_method_2()</snippet></ROW><ROW><id>14802750</id><snippet>def Test_method_2(self, *args, **kw):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*wrapperargs, **wrapperkw):
            fargs = args + wrapperargs
            fkw = dict(kw)
            fkw.update(wrapperkw)
            return func(*fargs, **fkw)
        return wrapper
    return decorator
</snippet></ROW><ROW><id>14802750</id><snippet>@t.Test_method_2(5, 6, 7, 8, baz='spam', ham='eggs')
def simple_function(x, y, z, n=m):
    print 'this is a simple_function'
</snippet></ROW><ROW><id>14802750</id><snippet>@</snippet></ROW><ROW><id>14802750</id><snippet>t.Test_method_2(5, 6, 7, 8, baz='spam', ham='eggs')</snippet></ROW><ROW><id>14802750</id><snippet>decorator</snippet></ROW><ROW><id>14802750</id><snippet>@decorator
def simple_function(x, y, z, n=m):
    print 'this is a simple_function'
</snippet></ROW><ROW><id>14802750</id><snippet>simple_function = decorator(simple_function)
</snippet></ROW><ROW><id>14802750</id><snippet>decorator(func)</snippet></ROW><ROW><id>14802750</id><snippet>wrapper(*wrapperargs, **wrapperkw)</snippet></ROW><ROW><id>14802750</id><snippet>simple_function(1, 2, foo='bar')</snippet></ROW><ROW><id>14802750</id><snippet>wrapper(1, 2, foo='bar')</snippet></ROW><ROW><id>14802750</id><snippet>simple_function()</snippet></ROW><ROW><id>14802750</id><snippet>fargs = [5, 6, 7, 8, 1, 2]</snippet></ROW><ROW><id>14802750</id><snippet>fkw = {'baz': 'spam', 'ham': 'eggs', 'foo': 'bar'}</snippet></ROW><ROW><id>14802750</id><snippet>@</snippet></ROW><ROW><id>14802902</id><snippet>for line in old_file:
    line = line.strip()     # remove newline/whitespace from begin and end of line
    line = line.split(',')  # get comma-separated values
    line = " &amp; ".join(line) # make it ampersand-separated values
    line += r" \\"          # add latex line break
    line += "\n"            # add file line break
    new_file.write(line)
</snippet></ROW><ROW><id>14802902</id><snippet>import jinja2

# define the latex template
template_str = r"""
\documentclass{article}
\begin{document}
\begin{table}
  \centering
  \begin{tabular}{ccc}
%{ for line in table %} %{{line[0]%}} &amp; %{{line[1]%}} &amp; %{{line[2]%}} \\ 
%{ endfor %}
  \end{tabular}
\end{table}
\end{document}

"""

# initialize the rendering engine
renderer = jinja2.Environment(
  block_start_string = '%{',
  block_end_string = '%}',
  variable_start_string = '%{{',
  variable_end_string = '%}}'
)
template = renderer.from_string(template_str)

# bring the data array into shape
lines = [line.strip().split(',') for line in old_file]

# generate the tex source code
with open("test.tex", 'w+') as f:
  f.write(template.render(table=lines))
</snippet></ROW><ROW><id>14802983</id><snippet>f.close()</snippet></ROW><ROW><id>14802983</id><snippet>f.flush()</snippet></ROW><ROW><id>14802983</id><snippet>f.write(l)</snippet></ROW><ROW><id>14803065</id><snippet>self.box</snippet></ROW><ROW><id>14803065</id><snippet>self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
</snippet></ROW><ROW><id>14803115</id><snippet>In [1]: import numpy as np

In [2]: arr = np.array([  2.86656000e+09,   2.86688000e+09,   2.86708000e+09,
   ...:      2.86860000e+09,   2.86884000e+09,   2.86908000e+09,
   ...:      2.86920000e+09,   2.87024000e+09,   2.87040000e+09,
   ...:      2.87056000e+09,   2.87076000e+09,   2.87108000e+09,
   ...:      2.87120000e+09,   2.87152000e+09,   2.87260000e+09,
   ...:      2.87272000e+09,   2.87280000e+09,   2.87448000e+09,
   ...:      2.87464000e+09,   2.87476000e+09,   2.87484000e+09])

In [3]: np.split(arr, np.where(np.diff(arr) &gt; 1000000)[0] + 1)
Out[3]: 
[array([  2.86656000e+09,   2.86688000e+09,   2.86708000e+09]),
 array([  2.86860000e+09,   2.86884000e+09,   2.86908000e+09,
         2.86920000e+09]),
 array([  2.87024000e+09,   2.87040000e+09,   2.87056000e+09,
         2.87076000e+09,   2.87108000e+09,   2.87120000e+09,
         2.87152000e+09]),
 array([  2.87260000e+09,   2.87272000e+09,   2.87280000e+09]),
 array([  2.87448000e+09,   2.87464000e+09,   2.87476000e+09,
         2.87484000e+09])]
</snippet></ROW><ROW><id>14803182</id><snippet>import win32file

win32file.QueryDosDevice('E:')
</snippet></ROW><ROW><id>14803511</id><snippet>.strip()</snippet></ROW><ROW><id>14803511</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = ' Luca Bercovici (characters) '
&gt;&gt;&gt; re.sub('^\s|\s$','',s)
'Luca Bercovici (characters)'
</snippet></ROW><ROW><id>14803511</id><snippet>re.sub('^\s+|\s+$','',s)
</snippet></ROW><ROW><id>14803518</id><snippet>from IPython.lib import inputhook
inputhook.enable_qt4 = my_enable_qt4
</snippet></ROW><ROW><id>14803518</id><snippet>from IPython.lib import inputhookqt4
inputhookqt4.create_inputhook_qt4 = my_create_inputhook_qt4
</snippet></ROW><ROW><id>14803518</id><snippet>%gui qt</snippet></ROW><ROW><id>14803579</id><snippet>directors = [director.strip() for director in directors.split(',')] if directors else []
# etc.
</snippet></ROW><ROW><id>14803579</id><snippet>map(str.strip, ...)</snippet></ROW><ROW><id>14803579</id><snippet>directors = map(str.strip, directors.split(',')) if directors else []
</snippet></ROW><ROW><id>14803579</id><snippet>list()</snippet></ROW><ROW><id>14803579</id><snippet>directors = list(map(str.strip, directors.split(','))) if directors else []
</snippet></ROW><ROW><id>14803579</id><snippet>map()</snippet></ROW><ROW><id>14803579</id><snippet>def tolist(commaseparated):
    return [s.strip() for s in commaseparated.split(',')] if commaseparated else []

directors = tolist(directors)
producers = tolist(producers)
writers   = tolist(writers)
</snippet></ROW><ROW><id>14803579</id><snippet>def tolist(commaseparated):
    return map(str.strip, commaseparated.split(',')) if commaseparated else []
</snippet></ROW><ROW><id>14803579</id><snippet>get_element_or_none()</snippet></ROW><ROW><id>14803579</id><snippet>tolist()</snippet></ROW><ROW><id>14803737</id><snippet>minoroutput.txt</snippet></ROW><ROW><id>14803737</id><snippet>mainoutput.txt</snippet></ROW><ROW><id>14803737</id><snippet>"cluster"</snippet></ROW><ROW><id>14803737</id><snippet>"Cluster"</snippet></ROW><ROW><id>14803737</id><snippet>lower()</snippet></ROW><ROW><id>14803737</id><snippet>if 'cluster' in f_lines[n+1] or f_lines[n+2] or f_lines[n+3]</snippet></ROW><ROW><id>14803737</id><snippet>"cluster"</snippet></ROW><ROW><id>14803737</id><snippet>True</snippet></ROW><ROW><id>14803737</id><snippet>'cluster' in f_lines[n+1] or 'cluster' in f_lines[n+2] or 'cluster' in f_lines[n+3]</snippet></ROW><ROW><id>14803737</id><snippet>if</snippet></ROW><ROW><id>14803737</id><snippet>True</snippet></ROW><ROW><id>14803737</id><snippet>f_lines[n+2]</snippet></ROW><ROW><id>14803737</id><snippet>f_lines[n+3]</snippet></ROW><ROW><id>14803737</id><snippet>mainoutput.txt</snippet></ROW><ROW><id>14803737</id><snippet>minoroutupt.txt</snippet></ROW><ROW><id>14803737</id><snippet>enumerate</snippet></ROW><ROW><id>14803737</id><snippet>cluster</snippet></ROW><ROW><id>14803737</id><snippet>with open('file.txt', 'r') as f, \
     open('mainoutput.txt', 'w') as main_out, \
     open('minoroutput.txt', 'w') as minor_out:
    cluster = [] # this variable will hold all the lines of the current cluster
    for line in f:
        if 'cluster' in line.lower(): # if we're at the start of a cluster
            if len(cluster) &gt; 4: # long clusters go in the "main" file
                main_out.writelines(cluster) # write out the lines
                # main_out.writelines(cluster[:4])
            else:
                minor_out.writelines(cluster) # or to the other file

            cluster = [] # reset the cluster variable to a new, empty list

        cluster.append(line) # always add the current line to cluster

    if len(cluster) &gt; 4: # repeat the writing logic for the last cluster
        main_out.writelines(cluster)
        # main_out.writelines(cluster[:4])
    else:
        minor_out.writelines(cluster)
</snippet></ROW><ROW><id>14803737</id><snippet>writelines</snippet></ROW><ROW><id>14803737</id><snippet>mainout.txt</snippet></ROW><ROW><id>14803737</id><snippet>minorout.txt</snippet></ROW><ROW><id>14803737</id><snippet>file.txt</snippet></ROW><ROW><id>14803737</id><snippet>&gt;Cluster 1
line 1
line 2
line 3
&gt;Cluster 2
line 1
line 2
line 3
line 4
&gt;Cluster 3
line 1
&gt;Cluster 4
line 1
line 2
line 3
line 4
line 5
</snippet></ROW><ROW><id>14803737</id><snippet>mainoutput.txt</snippet></ROW><ROW><id>14803737</id><snippet>&gt;Cluster 2
line 1
line 2
line 3
line 4
&gt;Cluster 4
line 1
line 2
line 3
line 4
line 5
</snippet></ROW><ROW><id>14803737</id><snippet>minoroutput.txt</snippet></ROW><ROW><id>14803737</id><snippet>&gt;Cluster 1
line 1
line 2
line 3
&gt;Cluster 3
line 1
</snippet></ROW><ROW><id>14803754</id><snippet>fullstrings = set(["BREAKFAST", "LUNCH", "DINNER", ...])
prefixes_by_length = {} # dict of length -&gt; prefix string
...
prefixes_by_length[4] = set(["CORN", "DESK", ...])
prefixes_by_length[5] = set(["BREAD", "TABLE", ...])
</snippet></ROW><ROW><id>14803754</id><snippet>word in fullstrings</snippet></ROW><ROW><id>14803754</id><snippet>n</snippet></ROW><ROW><id>14803754</id><snippet>word[:n] in prefixes_by_length[n]</snippet></ROW><ROW><id>14803754</id><snippet>for word in words:
    if word in fullstrings:
        "Match! do something"
    for n in prefixes_by_length:
        if word[:n] in prefixes_by_length[n]:
            "Match! do something"
</snippet></ROW><ROW><id>14803819</id><snippet>pygame.init()</snippet></ROW><ROW><id>14803819</id><snippet>pygame.init()</snippet></ROW><ROW><id>14803853</id><snippet>π = 4/1 - 4/3 + 4/5 - 4/7 + 4/9 - 4/11 + ...
     0     1     2     3     4     5     ...
</snippet></ROW><ROW><id>14803853</id><snippet>def nth_term(n):
    return 4 / (2.0 * n + 1) * (-1) ** n
</snippet></ROW><ROW><id>14803853</id><snippet>def approximate_pi(error):
    prev = nth_term(0)  # First term
    current = nth_term(0) + nth_term(1)  # First + second terms
    n = 2  # Starts at third term

    while abs(prev - current) &gt; error:
        prev = current
        current += nth_term(n)
        n += 1

    return current
</snippet></ROW><ROW><id>14803853</id><snippet>&gt;&gt;&gt; approximate_pi(0.000001)
    3.1415929035895926
</snippet></ROW><ROW><id>14803874</id><snippet>&gt;&gt;&gt; tuple(second for first, second in li)
("'Conrad Clifton'", "'Rippa'")
</snippet></ROW><ROW><id>14803874</id><snippet>list</snippet></ROW><ROW><id>14803991</id><snippet>import time
a = time.time()

print "Starting time is %s" % str(a)

while True:
    # Clear the screen each iteration to "recycle" the lines
    print chr(27) + "[2J"

    program_time = time.time();
    elapsed      = int(round((program_time - a) * 1000)) * 100

    print "Start time is %s" % a 
    print "Elapsed time is %s" % elapsed

    # Simulate some work
    time.sleep(1)
</snippet></ROW><ROW><id>14804069</id><snippet># text is a Tkinter Text, word is the word you want to color.

# make a tag for change the color.
text.tag_configure("red", foreground = "red")

#apply the tag.
text.highlight_pattern("word", "red")
</snippet></ROW><ROW><id>14804107</id><snippet>class Something:
    def out(self):
        print("it works")

s = Something()
s.out()
</snippet></ROW><ROW><id>14804107</id><snippet>self</snippet></ROW><ROW><id>14804110</id><snippet>file *
</snippet></ROW><ROW><id>14804110</id><snippet>heroku destroy --app stormy-earth-5394
heroku create
</snippet></ROW><ROW><id>14804110</id><snippet>git push heroku master
heroku ps:scale web=1
</snippet></ROW><ROW><id>14804130</id><snippet>[:]</snippet></ROW><ROW><id>14804130</id><snippet>find()</snippet></ROW><ROW><id>14804130</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('range(100000)[:]', number=1000)
2.056607127195644
&gt;&gt;&gt; timeit('range(100000)', number=1000)
1.1496167131002366
</snippet></ROW><ROW><id>14804221</id><snippet>process = subprocess.Popen(command, shell=True)
</snippet></ROW><ROW><id>14804221</id><snippet>.read()</snippet></ROW><ROW><id>14804221</id><snippet>.readline()</snippet></ROW><ROW><id>14804317</id><snippet>__hash__</snippet></ROW><ROW><id>14804317</id><snippet>tuple</snippet></ROW><ROW><id>14804317</id><snippet>class Point(object):
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z

    def __hash__(self):
        return hash((self.x,self.y,self.z))

    def __eq__(self,other):
        return (self.x,self.y,self.z) == (other.x,other.y,other.z)
</snippet></ROW><ROW><id>14804317</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>14804317</id><snippet>__dict__</snippet></ROW><ROW><id>14804592</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.random(10)  # set up a random array to play with
&gt;&gt;&gt; a
array([ 0.20291643,  0.89973074,  0.14291639,  0.53535553,  0.21801353,
        0.05582776,  0.64301145,  0.56081956,  0.85771335,  0.6032354 ])
&gt;&gt;&gt;
&gt;&gt;&gt; b = np.array([0,5,6,9])  # indices we *don't want*
&gt;&gt;&gt; mask = np.ones(a.shape,dtype=bool)
&gt;&gt;&gt; mask[b] = False          # Converted to a mask array of indices we *do want*
&gt;&gt;&gt; mask
array([False,  True,  True,  True,  True, False, False,  True,  True, False], dtype=bool)
&gt;&gt;&gt;
&gt;&gt;&gt; np.arange(a.shape[0])[mask]  #This gets you the indices that aren't in your original
array([1, 2, 3, 4, 7, 8])
&gt;&gt;&gt; a[mask]  #This gets you the elements not in your original.
array([ 0.89973074,  0.14291639,  0.53535553,  0.21801353,  0.56081956,
        0.85771335])
</snippet></ROW><ROW><id>14804617</id><snippet>true</snippet></ROW><ROW><id>14804617</id><snippet>false</snippet></ROW><ROW><id>14804617</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = {'firstKey': True, 'secondKey': False}
&gt;&gt;&gt; json.dumps(d)
'{"secondKey": false, "firstKey": true}'
&gt;&gt;&gt; s = json.dumps(d)
&gt;&gt;&gt; json.loads(s) == d
True
</snippet></ROW><ROW><id>14804637</id><snippet>security = Security(app)
</snippet></ROW><ROW><id>14804637</id><snippet>security = Security(app, user_datastore)
</snippet></ROW><ROW><id>14804664</id><snippet>def TrackChange(Track):
    # use Track["URI"], Track["title"], Track["artist"] etc

def Connect(name):
    global root, player, tracklist

    # first we connect to the objects
    root_o = bus.get_object(name, "/")
    player_o = bus.get_object(name, "/Player")
    tracklist_o = bus.get_object(name, "/TrackList")

    # there is only 1 interface per object
    root = dbus.Interface(root_o, "org.freedesktop.MediaPlayer")
    tracklist  = dbus.Interface(tracklist_o, "org.freedesktop.MediaPlayer")
    player = dbus.Interface(player_o, "org.freedesktop.MediaPlayer")

    # connect to the TrackChange signal
    player_o.connect_to_signal("TrackChange", TrackChange, dbus_interface="org.freedesktop.MediaPlayer") 
</snippet></ROW><ROW><id>14804702</id><snippet>site</snippet></ROW><ROW><id>14804702</id><snippet>site</snippet></ROW><ROW><id>14804702</id><snippet>from ..models.account import User
</snippet></ROW><ROW><id>14804702</id><snippet>from site.views import blah
</snippet></ROW><ROW><id>14804702</id><snippet>site.models</snippet></ROW><ROW><id>14804702</id><snippet>from site.models.account import User</snippet></ROW><ROW><id>14804702</id><snippet>site.views</snippet></ROW><ROW><id>14804702</id><snippet>site.models</snippet></ROW><ROW><id>14804702</id><snippet>site.views</snippet></ROW><ROW><id>14804796</id><snippet>dynamic_buttons = []

def onDoubleClick(event):
    ...
    button = Button(...)
    dynamic_buttons.append(button)
    button.pack()
</snippet></ROW><ROW><id>14804796</id><snippet>dynamic_buttons[0].destroy()
</snippet></ROW><ROW><id>14804796</id><snippet>class RemovableTask(Frame):
    def __init__(self, master, name, **options):
        Frame.__init__(self, master, **options)
        lbl = Label(self, text=name)
        btn = Button(self, text='Remove step', command=self.destroy)
        lbl.grid(row=0, column=0)
        btn.grid(row=0, column=1)
</snippet></ROW><ROW><id>14804939</id><snippet>__init__</snippet></ROW><ROW><id>14804939</id><snippet>def __init__(self,S,Info):
    self.Term = S
    self.TermInfo = [Info]
</snippet></ROW><ROW><id>14804939</id><snippet>instance.attribute</snippet></ROW><ROW><id>14804939</id><snippet>self.TermInfo.append(whatever)
</snippet></ROW><ROW><id>14804939</id><snippet>self</snippet></ROW><ROW><id>14804939</id><snippet>TermInfo</snippet></ROW><ROW><id>14804939</id><snippet>self.__class__</snippet></ROW><ROW><id>14804939</id><snippet>Node</snippet></ROW><ROW><id>14804939</id><snippet>TermInfo</snippet></ROW><ROW><id>14804939</id><snippet>Node.TermInfo</snippet></ROW><ROW><id>14804958</id><snippet>pyglet.py</snippet></ROW><ROW><id>14804958</id><snippet>import</snippet></ROW><ROW><id>14804958</id><snippet>window</snippet></ROW><ROW><id>14805057</id><snippet>&gt;&gt;&gt; a= 6500
&gt;&gt;&gt; b= 3600
&gt;&gt;&gt; c=.000900
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; print b/a - c
0.552946153846
</snippet></ROW><ROW><id>14805145</id><snippet>for monthlyRate in (x/100.0 for x in range(4,9)):
    print monthlyRate

0.04
0.05
0.06
0.07
0.08
</snippet></ROW><ROW><id>14805222</id><snippet>kmerdict = {}
innerdict = {'endcover':0, 'coverdict':{}, 'coverholder':[], 'uncovered':0, 
             'lowstart':0,'totaluncover':0, 'totalbases':0}
for kmer in kmerlist: # build kmerdict
    kmerdict [kmer] = {}
    for chrom in fas:  #open file and read line
        chromnum = chrom[3:-3]
        kmerdict [kmer][chromnum] = innerdict
</snippet></ROW><ROW><id>14805222</id><snippet>innerdict</snippet></ROW><ROW><id>14805222</id><snippet>kmerdict[kmer][chromnum]</snippet></ROW><ROW><id>14805222</id><snippet>kmerdict [kmer][chromnum] = copy.deepcopy(innerdict)
</snippet></ROW><ROW><id>14805222</id><snippet>copy</snippet></ROW><ROW><id>14805222</id><snippet>innerdict</snippet></ROW><ROW><id>14805222</id><snippet>def get_inner_dict():
    return {'endcover':0, 'coverdict':{}, 'coverholder':[], 'uncovered':0, 
            'lowstart':0,'totaluncover':0, 'totalbases':0}

kmerdict = {}
for kmer in kmerlist: # build kmerdict
    kmerdict [kmer] = {}
    for chrom in fas:  #open file and read line
        chromnum = chrom[3:-3]
        kmerdict [kmer][chromnum] = get_inner_dict()
</snippet></ROW><ROW><id>14805261</id><snippet>import time
from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler

if __name__ == "__main__":
    event_handler = LoggingEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path='.', recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
</snippet></ROW><ROW><id>14805261</id><snippet>file_pointer.tell()</snippet></ROW><ROW><id>14805261</id><snippet>seek()</snippet></ROW><ROW><id>14805261</id><snippet># First time
with open('current.csv', 'r') as f:
    data = f.readlines()
    last_pos = f.tell() 

# Second time
with open('current.csv', 'r') as f:
    f.seek(last_pos)
    new_data = f.readlines()
    last_pos = f.tell()
</snippet></ROW><ROW><id>14805319</id><snippet>a</snippet></ROW><ROW><id>14805319</id><snippet>a[k] = ...</snippet></ROW><ROW><id>14805319</id><snippet>a</snippet></ROW><ROW><id>14805319</id><snippet>50[42] = 7
</snippet></ROW><ROW><id>14805319</id><snippet>++k</snippet></ROW><ROW><id>14805319</id><snippet>(+(+(k)))</snippet></ROW><ROW><id>14805319</id><snippet>UNARY_POSITIVE</snippet></ROW><ROW><id>14805319</id><snippet>k += 1</snippet></ROW><ROW><id>14805319</id><snippet>q = q / b
</snippet></ROW><ROW><id>14805319</id><snippet>x/y</snippet></ROW><ROW><id>14805319</id><snippet>q != 0</snippet></ROW><ROW><id>14805319</id><snippet>q = q // b
</snippet></ROW><ROW><id>14805319</id><snippet>//</snippet></ROW><ROW><id>14805376</id><snippet>self.runner_set.select_related('person')
</snippet></ROW><ROW><id>14805376</id><snippet>JOIN</snippet></ROW><ROW><id>14805376</id><snippet>.values()</snippet></ROW><ROW><id>14805376</id><snippet>related_name="runners"</snippet></ROW><ROW><id>14805376</id><snippet>self.runners...</snippet></ROW><ROW><id>14805479</id><snippet>bool</snippet></ROW><ROW><id>14805479</id><snippet>fullscreen = bool(config.get('Screen', 'fullscreen'))
                                                    ^
</snippet></ROW><ROW><id>14805479</id><snippet>int</snippet></ROW><ROW><id>14805479</id><snippet>width = int(config.get('Screen', 'width'))
                                         ^
height = int(config.get('Screen', 'height'))
                                           ^
</snippet></ROW><ROW><id>14805688</id><snippet>mydict</snippet></ROW><ROW><id>14805688</id><snippet>    mydict = dict()
</snippet></ROW><ROW><id>14805688</id><snippet>&gt;&gt;&gt; with open("puzzle.txt") as f:
...     puzzle = [list(line.strip()) for line in f]
</snippet></ROW><ROW><id>14805688</id><snippet>puzzle.txt</snippet></ROW><ROW><id>14805688</id><snippet>f</snippet></ROW><ROW><id>14805688</id><snippet>line</snippet></ROW><ROW><id>14805688</id><snippet>puzzle</snippet></ROW><ROW><id>14805688</id><snippet>with</snippet></ROW><ROW><id>14805688</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(puzzle)
[['H', 'G', 'A', 'M', 'O', 'N', 'I', 'H', 'R', 'A'],
 ['A', 'O', 'M', 'O', 'K', 'A', 'W', 'O', 'N', 'S'],
 ['N', 'F', 'R', 'O', 'L', 'B', 'O', 'B', 'D', 'N'],
 ['A', 'R', 'F', 'S', 'I', 'H', 'C', 'A', 'G', 'E'],
 ['L', 'N', 'I', 'E', 'E', 'W', 'O', 'N', 'O', 'K'],
 ['G', 'O', 'L', 'F', 'U', 'N', 'D', 'T', 'H', 'C'],
 ['K', 'O', 'C', 'A', 'T', 'A', 'O', 'H', 'B', 'I'],
 ['A', 'M', 'R', 'E', 'R', 'C', 'G', 'A', 'N', 'H'],
 ['S', 'L', 'G', 'F', 'A', 'M', 'A', 'L', 'L', 'C'],
 ['A', 'L', 'L', 'I', 'G', 'A', 'T', 'O', 'R', 'X']]
</snippet></ROW><ROW><id>14805688</id><snippet>&gt;&gt;&gt; puzzle[2][3]
'O'
</snippet></ROW><ROW><id>14805791</id><snippet>raw_input</snippet></ROW><ROW><id>14805791</id><snippet>input</snippet></ROW><ROW><id>14805791</id><snippet>input</snippet></ROW><ROW><id>14805791</id><snippet>raw_input</snippet></ROW><ROW><id>14805791</id><snippet>input</snippet></ROW><ROW><id>14805791</id><snippet>raw_input</snippet></ROW><ROW><id>14805791</id><snippet>defaultdict</snippet></ROW><ROW><id>14805791</id><snippet>Counter</snippet></ROW><ROW><id>14805791</id><snippet>Counter</snippet></ROW><ROW><id>14805791</id><snippet>defaultdict</snippet></ROW><ROW><id>14805791</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; i = ['CTTC','CGCT','TTTA','CATG','ABCD']
&gt;&gt;&gt; c = Counter(x[0] for x in i)
&gt;&gt;&gt; c['C']
3
</snippet></ROW><ROW><id>14805791</id><snippet>defaultdict</snippet></ROW><ROW><id>14805791</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for x in i:
...    d[x[0]] += 1
...
&gt;&gt;&gt; d['C']
3
</snippet></ROW><ROW><id>14805800</id><snippet>word = 'helloworld'
word[1:9:2]
</snippet></ROW><ROW><id>14805800</id><snippet>0 1 2 3 4 5 6 7 8 9
h e l l o w o r l d
  ^   ^   ^   ^  
</snippet></ROW><ROW><id>14805800</id><snippet>'elwr'</snippet></ROW><ROW><id>14805892</id><snippet>def poly(a_list, x):
    ans = 0
    for n,a in enumerate(a_list):
        ans += a*x**n
    return ans
</snippet></ROW><ROW><id>14805931</id><snippet>    for doc in iter:
        people.update({'_id':doc[id]},{'$pull':{'info':None}})
</snippet></ROW><ROW><id>14805931</id><snippet>    db.people.update({_id:160},{$pull:{info:null}})
</snippet></ROW><ROW><id>14805931</id><snippet>    db.people.update({},{$pull:{info:null}},{multi:true})
</snippet></ROW><ROW><id>14806555</id><snippet>unbuntu</snippet></ROW><ROW><id>14806555</id><snippet>matplotlib</snippet></ROW><ROW><id>14806555</id><snippet>1.1.1rc1</snippet></ROW><ROW><id>14806555</id><snippet>writers</snippet></ROW><ROW><id>14806555</id><snippet>1.2</snippet></ROW><ROW><id>14806555</id><snippet>matplotlib</snippet></ROW><ROW><id>14806555</id><snippet>matplotlib</snippet></ROW><ROW><id>14806555</id><snippet>git clone git://github.com/matplotlib/matplotlib.git
cd matplotlib
git checkout -b v1.2.0
python setup.py install --prefix=/home/username/local_installs/
</snippet></ROW><ROW><id>14806555</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>14806555</id><snippet>export PYTHONPATH=/home/username/local_installs/lib/python2.7/site-packages/:$PYTHONPATH
</snippet></ROW><ROW><id>14806555</id><snippet>~/.bashrc</snippet></ROW><ROW><id>14806555</id><snippet>setup.py</snippet></ROW><ROW><id>14806570</id><snippet>def thing(list_):                                  
  temp = enumerate(max(x) - min(x) for x in list_)
  return max(x[::-1] for x in temp)
</snippet></ROW><ROW><id>14807481</id><snippet>**</snippet></ROW><ROW><id>14807481</id><snippet>^</snippet></ROW><ROW><id>14807481</id><snippet>&gt;&gt;&gt; [2**i for i in range(4)]
[1, 2, 4, 8]
&gt;&gt;&gt; [1 &lt;&lt; i for i in range(4)]
[1, 2, 4, 8]
</snippet></ROW><ROW><id>14807481</id><snippet>^</snippet></ROW><ROW><id>14807553</id><snippet>print cobj.dd 
</snippet></ROW><ROW><id>14807636</id><snippet>df</snippet></ROW><ROW><id>14807636</id><snippet>subprocess</snippet></ROW><ROW><id>14807636</id><snippet>smtplib</snippet></ROW><ROW><id>14807636</id><snippet>#!/bin/python
import subprocess
import datetime

IGNORE_FILESYSTEMS = ('Filesystem', 'tmpfs', 'cdrom', 'none')
LIMIT = 70

def main():
  df = subprocess.Popen(['df', '-H'], stdout=subprocess.PIPE)
  output = df.stdout.readlines()
  for line in output:
    parts = line.split()
    filesystem = parts[0]
    if filesystem not in IGNORE_FILESYSTEMS:
      usage = int(parts[4][:-1])  # Strips out the % from 'Use%'
      if usage &gt; LIMIT:
        # Use smtplib sendmail to send an email to the admin.
        print 'Running out of space %s (%s%%) on %s"' % (
            filesystem, usage, datetime.datetime.now())


if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>14807636</id><snippet>Running out of space /dev/mapper/arka-root (72%) on 2013-02-11 02:11:27.682936
Running out of space /dev/sda1 (78%) on 2013-02-11 02:11:27.683074
Running out of space /dev/mapper/arka-usr+local (81%) on 2013-02-11 02:11
</snippet></ROW><ROW><id>14807729</id><snippet>lists = [['hello'], ['world', 'foo', 'bar']]
combined = [item for sublist in lists for item in sublist]
</snippet></ROW><ROW><id>14807729</id><snippet>import itertools

lists = [['hello'], ['world', 'foo', 'bar']]
combined = list(itertools.chain.from_iterable(lists))
</snippet></ROW><ROW><id>14807786</id><snippet>input()</snippet></ROW><ROW><id>14807786</id><snippet>raw_input()</snippet></ROW><ROW><id>14807786</id><snippet>fi.read()</snippet></ROW><ROW><id>14807786</id><snippet>for i in cont:</snippet></ROW><ROW><id>14808426</id><snippet>class AutoLogout:
    def process_request(self, request):
        if not request.user.is_authenticated() :
            return HttpResponseRedirect(reverse('app_name:url_name'))

        try:
            if datetime.now() - request.session['last_touch'] &gt; timedelta( 0, settings.AUTO_LOGOUT_DELAY * 60, 0):
                auth.logout(request)
                del request.session['last_touch']
                return HttpResponseRedirect(reverse('app_name:url_name'))
        except KeyError:
            pass

        request.session['last_touch'] = datetime.now()
</snippet></ROW><ROW><id>14808426</id><snippet>from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect

def login_check(view_func):
    def _wrapped_view_func(request, *args, **kwargs):
        if not request.user.is_authenticated:
            //return to home page url
            return HttpResponseRedirect(reverse('app_name:url_name'))
        return view_func(request, *args, **kwargs)
    return _wrapped_view_func
</snippet></ROW><ROW><id>14808426</id><snippet>from app_name.decorators import login_check

@login_check
def view_name(request):
    .........
</snippet></ROW><ROW><id>14808643</id><snippet>home=...</snippet></ROW><ROW><id>14808643</id><snippet>os.chdir</snippet></ROW><ROW><id>14808656</id><snippet>v</snippet></ROW><ROW><id>14808656</id><snippet>global</snippet></ROW><ROW><id>14808656</id><snippet>def test():
    global v
    # rest of code
</snippet></ROW><ROW><id>14808709</id><snippet>angleplayer</snippet></ROW><ROW><id>14808709</id><snippet>angleplayer</snippet></ROW><ROW><id>14808709</id><snippet>Player</snippet></ROW><ROW><id>14808709</id><snippet>if event.type == pygame.KEYDOWN:
    player.angleplayer()
</snippet></ROW><ROW><id>14808709</id><snippet>player</snippet></ROW><ROW><id>14809123</id><snippet>def opendisplay():
    while True:
        try:
            # Try to connect
            lcd = serial.Serial(...)
            return lcd
        except Exception as e:
            # Connection failed
            print "Error! etc"
            time.sleep(1)
</snippet></ROW><ROW><id>14809123</id><snippet>for _ in range(60)</snippet></ROW><ROW><id>14809149</id><snippet>isinstance</snippet></ROW><ROW><id>14809149</id><snippet>Yes: if isinstance(obj, int):
No:  if type(obj) is type(1):
</snippet></ROW><ROW><id>14809149</id><snippet>if obj.__class__.__name__ = "MyInheritedClass":
    expect_problems_some_day()
</snippet></ROW><ROW><id>14809149</id><snippet>isinstance</snippet></ROW><ROW><id>14809149</id><snippet>str</snippet></ROW><ROW><id>14809149</id><snippet>unicode</snippet></ROW><ROW><id>14809149</id><snippet>basestring</snippet></ROW><ROW><id>14809149</id><snippet>if isinstance(obj, basestring):
    i_am_string(obj)
</snippet></ROW><ROW><id>14809536</id><snippet>def parse_subcat(self, response):
    hxs = HtmlXPathSelector(response)
    test = hxs.select('//ul[@class="sub"]/li/a').extract()
    for s in test:
        item = response.meta['item']
        item['g2'] = []
        item['g2'] = hxs.select('//span[@class="Active Sprite"]/text()').extract()[0]
        s = s.encode('utf-8','ignore')
        link = s[s.find('href="')+6:][:s[s.find('href="')+6:].find('/"')]
        link = 'http://www.x.com/' + str(link) + '/'
        request = Request(link, callback=self.parse_3)
        request.meta['item'] = item
        yield request
</snippet></ROW><ROW><id>14809536</id><snippet>item = response.meta['item']</snippet></ROW><ROW><id>14809536</id><snippet>item = response.request.meta['item']</snippet></ROW><ROW><id>14809970</id><snippet>--db_user=DB_USER</snippet></ROW><ROW><id>14809970</id><snippet>--db_host=localhost</snippet></ROW><ROW><id>14809970</id><snippet>--db-password=YOUR_PASSWORD</snippet></ROW><ROW><id>14809970</id><snippet>ghrix</snippet></ROW><ROW><id>14809970</id><snippet>$ sudo su - postgres
$ createuser -s ghrix  # -s to make a super-user that can create DBs
</snippet></ROW><ROW><id>14809970</id><snippet>./openerp-server --help</snippet></ROW><ROW><id>14809970</id><snippet>$ ./openerp-server -s
</snippet></ROW><ROW><id>14809970</id><snippet>$HOME/.openerp_serverrc</snippet></ROW><ROW><id>14810137</id><snippet>pool.apply_async(test, (t,), dict(arg2=5))
</snippet></ROW><ROW><id>14810516</id><snippet>.findAll()</snippet></ROW><ROW><id>14810516</id><snippet>class</snippet></ROW><ROW><id>14810516</id><snippet>def match_either(tag):
    if tag.name == 'div':
        # at *least* these three classes must be present
        return {'DetailInternetFirstContent', 'empty', 'openPostIt'}.issubset(tag.get('class', []))
    if tag.name == 'p':
        # at *least* this one class must be present
        return 'connection' in tag.get('class', [])
</snippet></ROW><ROW><id>14810516</id><snippet>True</snippet></ROW><ROW><id>14810516</id><snippet>p</snippet></ROW><ROW><id>14810516</id><snippet>connection</snippet></ROW><ROW><id>14810516</id><snippet>div</snippet></ROW><ROW><id>14810516</id><snippet>findAll()</snippet></ROW><ROW><id>14810516</id><snippet>datas = soup.findAll(match_either)
</snippet></ROW><ROW><id>14810807</id><snippet>from base64 import b64decode
from Crypto import Random
from Crypto.Cipher import AES
from Crypto.Hash import SHA256, HMAC
from Crypto.Protocol.KDF import PBKDF2

# The hmac starts from 0 to 64 (length).
hmac_size = 64
hmac = data[:hmac_size]

# The cipher text starts after the hmac to the end.
# The cipher text is base64 encoded, so I decoded it.
ciphertext = data[hmac_size:]
ciphertext = b64decode(ciphertext)

# The IV starts from 0 to 16 (length) of the ciphertext.
iv = ciphertext[:16]

# The key size is 256 bits -&gt; 32 bytes.
key_size = 32

# The passphrase of the key.
password = 'mypassphrase'

# The key is generated using PBKDF2 Key Derivation Function.
# In the case of Zend2 Crypt module, the iteration number is 5000, 
# the result length is the key_size * 2 (64) and the HMAC is computed
# using the SHA256 algorithm
the_hash = PBKDF2(password, iv, count=5000, dkLen=64, prf=lambda p, s:
                  HMAC.new(p, s, SHA256).digest())

# The key starts from 0 to key_size (32).
key = the_hash[:key_size]

# The hmac key starts after the key to the end.
key_hmac = the_hash[key_size:]

# HMAC verification
hmac_new = HMAC.new(key_hmac, 'aes%s' % ciphertext, SHA256).hexdigest()
if hmac_new != hmac:
    raise Exception('HMAC verification failed.')

# Instanciate the cipher (AES CBC).
cipher = AES.new(key, AES.MODE_CBC, iv)

# It's time to decrypt the data! The ciphertext starts after the IV (so, 16 after).
data = cipher.decrypt(ciphertext[16:])
</snippet></ROW><ROW><id>14811180</id><snippet>from flask import url_for, request

def get_url(endpoint, secure=False, **values)        
    path = url_for(endpoint, **values)
    if secure:
        url_parts = request.url.split('/', 3)
        return 'https://' + url_parts[2] + path
    return path
</snippet></ROW><ROW><id>14811431</id><snippet>import random
from liblas import file as lasfile
from collections import defaultdict


def world2Pixel_Id(x, y, X_Min, Y_Max, xDist, yDist):
    col = int((x - X_Min) / xDist)
    row = int((Y_Max - y) / yDist)
    return (col, row)

def random_grouped_samples(infile, n, X_Min, Y_Max, xDist, yDist):
    """Select up to n points *per group* from infile"""

    groupcounts = defaultdict(int)
    samples = defaultdict(list)

    for p in lasfile.File(inFile, None, 'r'):
        id = world2Pixel_Id(p.x, p.y, X_Min, Y_Max, xDist, yDist)
        i = groupcounts[id]
        r = random.randint(0, i)

        if r &lt; n:
            if i &lt; n:
                samples[id].insert(r, p)  # add first n items in random order
            else:
                samples[id][r] = p  # at a decreasing rate, replace random items

        groupcounts[id] += 1

    return samples
</snippet></ROW><ROW><id>14811431</id><snippet>inFile</snippet></ROW><ROW><id>14811431</id><snippet>n</snippet></ROW><ROW><id>14811431</id><snippet>n</snippet></ROW><ROW><id>14811431</id><snippet>id</snippet></ROW><ROW><id>14811431</id><snippet>col, row</snippet></ROW><ROW><id>14811431</id><snippet>file_out = lasfile.File("outPut",mode='w',header= h)

for group in samples.itervalues():
    for p in group:
        file_out.write(p)

file_out.close()
</snippet></ROW><ROW><id>14812034</id><snippet>import numpy as np
import matplotlib.pyplot as plt

plt.imshow(np.random.random((10,10)))
cb = plt.colorbar()

for l in cb.ax.yaxis.get_ticklabels():
    l.set_family("Comic Sans MS")

plt.show()
</snippet></ROW><ROW><id>14812334</id><snippet>sudo apt-get install libasound2-plugins libasound2-python libsox-fmt-all libsox-dev sox
</snippet></ROW><ROW><id>14812481</id><snippet>__init__.py</snippet></ROW><ROW><id>14812481</id><snippet>pip install</snippet></ROW><ROW><id>14812481</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14812481</id><snippet>settings.py</snippet></ROW><ROW><id>14812647</id><snippet>g=Activity.objects.filter(groups__in=[Group.objects.filter(group_nm=group_nm)],enddt__gt=now)</snippet></ROW><ROW><id>14812647</id><snippet>[QuerySet]</snippet></ROW><ROW><id>14812647</id><snippet>g=Activity.objects.filter(groups__in=Group.objects.filter(group_nm=group_nm),enddt__gt=now)
</snippet></ROW><ROW><id>14812819</id><snippet>import signal
import sys

count = 0

def handler(signum,frame):
    global count
    print "Value of 'i' is",i
    count += 1
    if count &gt;= 2:
        sys.exit(0)

signal.signal(signal.SIGINT,handler)
i = 0
while True:
    i += 1
</snippet></ROW><ROW><id>14812819</id><snippet>import signal

class Reporter(object):
    def __init__(self):
        self.retval = []

    def handler(self,signum,frame):
        print self.retval

r = Reporter()
signal.signal(signal.SIGINT,r.handler)
</snippet></ROW><ROW><id>14812819</id><snippet>self.retval</snippet></ROW><ROW><id>14812819</id><snippet>import os

def search(path,filename):
    global found
    folders = []
    retval = []
    r.retval = retval #&lt;--- Line added

    try:    
        for item in os.listdir(path):
            if not os.path.isfile(os.path.join(path, item)):
                folders.append(os.path.join(path, item))
            else:
                if item == filename:
                    found += 1
                    retval.append(os.path.join(path, item))
    except WindowsError,e:
        print str(e)[10:]

    for folder in folders:
        retval += search(folder,filename)
        r.retval = retval   #&lt;---- Line added
    return retval

found = 0
path = 'C:\\'
filename = 'test.txt'
print search(path,filename)
</snippet></ROW><ROW><id>14812819</id><snippet>os.walk</snippet></ROW><ROW><id>14812819</id><snippet>import os

def search(path,filename):
    retval = []
    r.retval = retval

    for (dirpath, dirnames, filenames) in os.walk(path):
         retval.extend(os.path.join(path,dirpath,item) for item in filenames if item == filename)
    return retval

path = 'C:\\'
filename = 'test.txt'
print search(path,filename)
</snippet></ROW><ROW><id>14812973</id><snippet>pydoc -k</snippet></ROW><ROW><id>14813026</id><snippet>dendrogram</snippet></ROW><ROW><id>14813026</id><snippet>dendrogram</snippet></ROW><ROW><id>14813026</id><snippet>import numpy as np
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt


mat = np.array([[1.0,  0.5,  0.0],
                [0.5,  1.0, -0.5],
                [1.0, -0.5,  0.5],
                [0.0,  0.5, -0.5]])

dist_mat = mat
linkage_matrix = linkage(dist_mat, "single")

plt.clf()

ddata = dendrogram(linkage_matrix,
                   color_threshold=1,
                   labels=["a", "b", "c", "d"])

# Assignment of colors to labels: 'a' is red, 'b' is green, etc.
label_colors = {'a': 'r', 'b': 'g', 'c': 'b', 'd': 'm'}

ax = plt.gca()
xlbls = ax.get_xmajorticklabels()
for lbl in xlbls:
    lbl.set_color(label_colors[lbl.get_text()])

plt.show()
</snippet></ROW><ROW><id>14813102</id><snippet>{"lteBadge","vzwExclusiveBadge","globalReadyBadge"}
</snippet></ROW><ROW><id>14813102</id><snippet>["lteBadge","vzwExclusiveBadge","globalReadyBadge"]
</snippet></ROW><ROW><id>14813102</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; # Break it into lines to check location of error
&gt;&gt;&gt; s = data_structure.replace(',', ',\n')
&gt;&gt;&gt; literal_eval(s)
</snippet></ROW><ROW><id>14813424</id><snippet>sox testt.wav -n stats
</snippet></ROW><ROW><id>14813529</id><snippet>del[k]</snippet></ROW><ROW><id>14813529</id><snippet>del d[k]</snippet></ROW><ROW><id>14813529</id><snippet>k</snippet></ROW><ROW><id>14813529</id><snippet>def remove_empty_keys(d):
    for k in d.keys():
        if not d[k]:
            del d[k]
</snippet></ROW><ROW><id>14813529</id><snippet>None</snippet></ROW><ROW><id>14813733</id><snippet>In [15]: data = np.zeros((2,2))

In [16]: data
Out[16]: 
array([[ 0.,  0.],
       [ 0.,  0.]])

In [17]: from pandas import DataFrame

In [21]: df  = DataFrame(data, index = ['first', 'second'], columns=['c1','c2'])

In [22]: df
Out[22]: 
        c1  c2
first    0   0
second   0   0

In [26]: i = df.index

In [27]: c = df.columns

# generate new data as a numpy array    
In [29]: df  = DataFrame(np.random.rand(2,2), index = i, columns=c)

In [30]: df
Out[30]: 
              c1        c2
first   0.821354  0.936703
second  0.138376  0.482180
</snippet></ROW><ROW><id>14813733</id><snippet>Out[22]</snippet></ROW><ROW><id>14813733</id><snippet>In[29]</snippet></ROW><ROW><id>14813733</id><snippet>not</snippet></ROW><ROW><id>14813874</id><snippet>//init
pvv=None

&lt;...&gt;

//iteration
vv= [data.cell(i,j).value for (i,j) in ((2,26),(3,26),(4,26))]
if vv!=pvv: 
    //do something
    pvv=vv
</snippet></ROW><ROW><id>14813972</id><snippet>import PIL
from binascii import unhexlify
import zlib
from cStringIO import StringIO

sdata = "789C9D953D56C52010856363696D49E90AAC73ECDD4396C25228B210CE711B2CC2CAC622CECC9D0C0321313A27E411123EEEFCC07B7BFF7A9CC45EA9BD507BD6F620F769CAF4FEE3096DB76DDACEAEE9865D4CF79C6DAB34F46D441F7F23F88F6F728E6AD794724EDD5CBB9B790EF53FBF1595D9524C517E93CDEA3A433D984E83440327B318B633BF867A4C12734A5654CE26F24F29AB28704A067685363C665B0582D30ADF0F39A2717F3979C9412A6108A1D731C6992C04BD96252ECB9A2AC4A60F2B07904AA8166C84B51545D172C3C8D02B4CA3D51D841F7584B5CD2E17E2698A5DDE991302AD6240189666558242122D68F1C0F19F99475104D0F7C6216D5A6665AFAED62F8A27730A57E3BC4858669D25716B387BA04E39B41059BCC7E99CEAF4B05F971C75AAB0181AE938111CA9DB9A71C9B5443EA000D4231183A4F8ECEF79E7E5B40E2DEF647BDEA9AB6250EA59F70B6AC90E9FAABFB7D040E43C010107D4F1086A4ADA6D8DA66C8AEDD9C10E3514196A0F060220B59825C843883F5D71A67586809FEDF17FFCD75C4CFC012B43550B"

fh = StringIO(zlib.decompress(unhexlify(sdata)))

image = PIL.Image.open(fh)
</snippet></ROW><ROW><id>14814039</id><snippet>set names utf8;</snippet></ROW><ROW><id>14814039</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import MySQLdb

mystring = "Bientôt l'été"

myinsert = [ { "name" : mystring.encode("utf-8").strip()[:65535], "id" : 1 } ]

con = None
con = MySQLdb.connect('localhost', 'abc', 'def', 'ghi');
cur = con.cursor()

cur.execute("set names utf8;")     # &lt;--- add this line,

sql = "INSERT INTO 'MyTable' ( 'my_id', 'my_name' ) VALUES ( %(id)s, %(name)s ) ; "
cur.executemany( sql, myinsert )
con.commit()
if con: con.close()
</snippet></ROW><ROW><id>14814262</id><snippet>re.findall</snippet></ROW><ROW><id>14814262</id><snippet>re.split</snippet></ROW><ROW><id>14814262</id><snippet>&gt;&gt;&gt; s = '[5.955894, 45.817792], [10.49238, 45.817792], [10.49238, 47.808381], [5.955894, 47.808381]'
&gt;&gt;&gt; re.findall(r"\[[^\]]*\]",s)
['[5.955894, 45.817792]', '[10.49238, 45.817792]', '[10.49238, 47.808381]', '[5.955894, 47.808381]']
</snippet></ROW><ROW><id>14814262</id><snippet>\[</snippet></ROW><ROW><id>14814262</id><snippet>[^\]]*</snippet></ROW><ROW><id>14814262</id><snippet>\]</snippet></ROW><ROW><id>14814532</id><snippet>BaseHTTPRequestHandler</snippet></ROW><ROW><id>14814532</id><snippet>import time
import signal
import sys

last_request = sys.maxint  # arbitrary high value to *not* trigger until there has been 1 requests at least

def itimer_handler(signum, frame):
    print 'itimer heartbeat'
    if time.time() - last_request &gt; 300:  # 5 minutes have passed at least with no request
        # do stuff now to log, kill, restart, etc.
        print 'Timeout, no requests for 5 minutes!'

signal.signal(signal.SIGALRM, itimer_handler) 
signal.setitimer(signal.ITIMER_REAL, 30, 30)  # check for a timeout every 30 seconds

# ...
def do_GET(..):
    global last_request
    last_request = time.time()  # reset the timer again
</snippet></ROW><ROW><id>14814532</id><snippet>signal.setitimer()</snippet></ROW><ROW><id>14814532</id><snippet>SIGALRM</snippet></ROW><ROW><id>14814532</id><snippet>setitimer)</snippet></ROW><ROW><id>14814532</id><snippet>itimer_handler</snippet></ROW><ROW><id>14814532</id><snippet>SIGALRM</snippet></ROW><ROW><id>14814532</id><snippet>SocketServer.py</snippet></ROW><ROW><id>14814532</id><snippet>errorno.EINTR</snippet></ROW><ROW><id>14814532</id><snippet>'''Backport of 2.7.4 EINTR handling'''

import errno
import select
import SocketServer


def _eintr_retry(func, *args):
    """restart a system call interrupted by EINTR"""
    while True:
        try:
            return func(*args)
        except (OSError, select.error) as e:
            if e.args[0] != errno.EINTR:
                raise


def serve_forever(self, poll_interval=0.5):
    """Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
    """
    self._BaseServer__is_shut_down.clear()
    try:
        while not self._BaseServer__shutdown_request:
            # XXX: Consider using another file descriptor or
            # connecting to the socket to wake this up instead of
            # polling. Polling reduces our responsiveness to a
            # shutdown request and wastes cpu at all other times.
            r, w, e = _eintr_retry(select.select, [self], [], [],
                                   poll_interval)
            if self in r:
                self._handle_request_noblock()
    finally:
        self._BaseServer__shutdown_request = False
        self._BaseServer__is_shut_down.set()


def handle_request(self):
    """Handle one request, possibly blocking.

    Respects self.timeout.
    """
    # Support people who used socket.settimeout() to escape
    # handle_request before self.timeout was available.
    timeout = self.socket.gettimeout()
    if timeout is None:
        timeout = self.timeout
    elif self.timeout is not None:
        timeout = min(timeout, self.timeout)
    fd_sets = _eintr_retry(select.select, [self], [], [], timeout)
    if not fd_sets[0]:
        self.handle_timeout()
        return
    self._handle_request_noblock()


# patch in updated methods
SocketServer.BaseServer.serve_forever = serve_forever
SocketServer.BaseServer.handle_request = handle_request
</snippet></ROW><ROW><id>14814551</id><snippet>r</snippet></ROW><ROW><id>14814551</id><snippet>replace</snippet></ROW><ROW><id>14814551</id><snippet>\n</snippet></ROW><ROW><id>14814551</id><snippet>\\n</snippet></ROW><ROW><id>14814584</id><snippet>value = "addr = &amp;myvariable;"
findVar = "myvariable"
m = re.findall("[&amp;]{0};".format(findVar), value)
print m
# prints: ['&amp;myvariable;']
</snippet></ROW><ROW><id>14814584</id><snippet>m = re.findall("\\&amp;{0};".format(findVar), value)
</snippet></ROW><ROW><id>14814584</id><snippet>value = "addr = &amp;myvariable;\naddr = &amp;myvariable;\nfuncCall( &amp;myvariable )"
oldVarName = "myvariable"
newVarName = "mynewvariable"
m = re.sub("(\\&amp;){0}(;?)".format(oldVarName), r"\1"+newVarName+r"\2", value)
print m
# this will print:
# addr = &amp;mynewvariable;
# addr = &amp;mynewvariable;
# funcCall( &amp;mynewvariable )
</snippet></ROW><ROW><id>14814584</id><snippet>value.replace("&amp;"+oldVarName,"&amp;"+newVarName)
</snippet></ROW><ROW><id>14814584</id><snippet>value = "addr = &amp;myvariable;\naddr = &amp;myvariable;\nfuncCall( &amp;myvariable )\nfuncCall2( &amp;myvariable, &amp;myvariablelongername )"
oldVarName = "myvariable"
newVarName = "mynewvariable"
m = re.sub("(\\&amp;){0}(?![A-Za-z0-9_])".format(oldVarName), r"\1"+newVarName, value)
print m
# prints:
# addr = &amp;mynewvariable;
# addr = &amp;mynewvariable;
# funcCall( &amp;mynewvariable )
# funcCall2( &amp;mynewvariable, &amp;myvariablelongername )
</snippet></ROW><ROW><id>14814584</id><snippet>re.sub("(\\&amp;){0}(?!\b)".format(oldVarName), r"\1"+newVarName, value)
</snippet></ROW><ROW><id>14814711</id><snippet>scipy.stats.poisson</snippet></ROW><ROW><id>14814711</id><snippet>interval</snippet></ROW><ROW><id>14814711</id><snippet>&gt;&gt;&gt; scipy.stats.poisson.interval(0.95, [10, 20, 30])
(array([  4.,  12.,  20.]), array([ 17.,  29.,  41.]))
</snippet></ROW><ROW><id>14814711</id><snippet>&gt;&gt;&gt; data = np.array([10, 20, 30])
&gt;&gt;&gt; scipy.stats.poisson.interval(0.95, data)
(array([  4.,  12.,  20.]), array([ 17.,  29.,  41.]))
&gt;&gt;&gt; np.array(scipy.stats.chi2.interval(.95, 2 * data)) / 2 - 1
array([[  3.7953887 ,  11.21651959,  19.24087402],
       [ 16.08480345,  28.67085357,  40.64883744]])
</snippet></ROW><ROW><id>14814711</id><snippet>ppf</snippet></ROW><ROW><id>14814711</id><snippet>&gt;&gt;&gt; data = np.array([10, 20, 30])
&gt;&gt;&gt; scipy.stats.poisson.ppf([0.025, 0.975], data[:, None])
array([[  4.,  17.],
       [ 12.,  29.],
       [ 20.,  41.]])
</snippet></ROW><ROW><id>14814711</id><snippet>&gt;&gt;&gt; scipy.stats.poisson.ppf([0.025, 0.975], 10)
array([  4.,  17.])
&gt;&gt;&gt; scipy.stats.poisson.cdf([4, 17], 10)
array([ 0.02925269,  0.98572239])
</snippet></ROW><ROW><id>14814847</id><snippet>item += 1</snippet></ROW><ROW><id>14814847</id><snippet>item = item + 1</snippet></ROW><ROW><id>14814847</id><snippet>item</snippet></ROW><ROW><id>14814847</id><snippet>lst += [other, items]</snippet></ROW><ROW><id>14814847</id><snippet>lst.__iadd__([other, items])</snippet></ROW><ROW><id>14814847</id><snippet>lst</snippet></ROW><ROW><id>14814847</id><snippet>.__iadd__()</snippet></ROW><ROW><id>14814847</id><snippet>self</snippet></ROW><ROW><id>14815354</id><snippet>__init__</snippet></ROW><ROW><id>14815354</id><snippet>class A(object):
    def __init__(self):
        self.greet()
    def greet(self):
        print('Hello from A')

class B(self):
    def __init__(self, name):
        super(B, self).__init__()
        self.name = name
    def greet(self):
        print('Hello from B', self.name)
</snippet></ROW><ROW><id>14815354</id><snippet>B.greet</snippet></ROW><ROW><id>14815354</id><snippet>A.__init__</snippet></ROW><ROW><id>14815354</id><snippet>self.name</snippet></ROW><ROW><id>14815474</id><snippet>__init__.py</snippet></ROW><ROW><id>14815474</id><snippet>domain
|---- __init__.py
|---- entities
|     |---- foo.py
|     |---- __init__.py
</snippet></ROW><ROW><id>14815474</id><snippet>Foo</snippet></ROW><ROW><id>14815474</id><snippet>domain.entities.foo</snippet></ROW><ROW><id>14815474</id><snippet>from domain.entities.foo import Foo
</snippet></ROW><ROW><id>14815607</id><snippet>print ('%.2f' % 6.42340)
</snippet></ROW><ROW><id>14815607</id><snippet>print( "hello{0:.3f}".format( 3.43234 ))
</snippet></ROW><ROW><id>14815610</id><snippet>map()</snippet></ROW><ROW><id>14815610</id><snippet>for p in l[1]:</snippet></ROW><ROW><id>14815610</id><snippet>xrange</snippet></ROW><ROW><id>14815610</id><snippet>map(lambda g: map(file_out.write, g), groups.itervalues())
</snippet></ROW><ROW><id>14815610</id><snippet>import timeit

groups = dict(('1037_%d' % i, ["a","b","c","d","e"]) for i in xrange(100))

class FOut(object):
    def write(self, v):
        #print v
        pass

file_out = FOut()

def using_map():
    map(lambda g: map(file_out.write, g), groups.itervalues())

def initial_version():
    for l in groups.iteritems():
        for p in xrange(len(l[1])):
            file_out.write(l[1][p])

def seq_iteration():
    for l in groups.iteritems():
        for p in l[1]:
            file_out.write(p)

def seq_iteration_values():
    for l in groups.itervalues():
        for p in l:
            file_out.write(p)

def list_compr():
    [[file_out.write(v) for v in g] for g in groups.itervalues()]



tests = ('initial_version', 'using_map', 'seq_iteration', 'list_compr', 'seq_iteration_values')


for test in tests:
    print test, timeit.timeit('%s()'%test, 'from __main__ import %s'%test, number=10000)
</snippet></ROW><ROW><id>14815610</id><snippet>initial_version 0.862531900406
using_map 0.703296899796
seq_iteration 0.541372060776
list_compr 0.632550954819
seq_iteration_values 0.493131160736
</snippet></ROW><ROW><id>14815610</id><snippet>map()</snippet></ROW><ROW><id>14815610</id><snippet>itervalues()</snippet></ROW><ROW><id>14815688</id><snippet>user_data</snippet></ROW><ROW><id>14815688</id><snippet>self.whatever</snippet></ROW><ROW><id>14815688</id><snippet>class Foo(object):
    whatever = {}
    def __init__(self):
        print self.whatever is Foo.whatever
</snippet></ROW><ROW><id>14815688</id><snippet>True</snippet></ROW><ROW><id>14815688</id><snippet>whatever</snippet></ROW><ROW><id>14815688</id><snippet>class Bar(object):
     whatever = {}
     def __init__(self):
         self.whatever = {}
         print self.whatever is Bar.whatever
</snippet></ROW><ROW><id>14815688</id><snippet>Foo</snippet></ROW><ROW><id>14815688</id><snippet>foo_instance.whatever['foo'] = 'bar'</snippet></ROW><ROW><id>14815688</id><snippet>foo_instance2</snippet></ROW><ROW><id>14815688</id><snippet>Bar</snippet></ROW><ROW><id>14815910</id><snippet>inorder()</snippet></ROW><ROW><id>14815910</id><snippet>def inorder(t):
    # Process left sub tree
    # Process t
    # Process right sub tree
</snippet></ROW><ROW><id>14815910</id><snippet>def inorder(t):
    if t.left:
        for elem in inorder(t.left):
            yield elem
    yield t
    if t.right:
        for elem in inorder(t.right):
            yield elem
</snippet></ROW><ROW><id>14815918</id><snippet>from copy import deepcopy

...

    tmp = e(arr=deepcopy(tree))
</snippet></ROW><ROW><id>14815973</id><snippet>import urllib</snippet></ROW><ROW><id>14815973</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>14815973</id><snippet>import re</snippet></ROW><ROW><id>14815973</id><snippet>find</snippet></ROW><ROW><id>14816057</id><snippet>colormath</snippet></ROW><ROW><id>14816057</id><snippet>scikit-image</snippet></ROW><ROW><id>14816057</id><snippet>def mask2(rgb, threshold=80, color=[255,20,147]):
    res = rgb.copy()
    lab = skimage.color.rgb2lab(rgb)
    mask = lab[:,:,0] &gt; threshold
    res[mask] = np.array(color).reshape(1,-1).repeat(mask.sum(),axis=0)
    return res
</snippet></ROW><ROW><id>14816057</id><snippet>mask1</snippet></ROW><ROW><id>14816057</id><snippet>from binascii import unhexlify
import zlib
from cStringIO import StringIO
import skimage.io, skimage.color
from colormath.color_objects import RGBColor
import numpy as np


def mask1(img, treshold=80, color=[255,20,147]):
    res=img.copy()
    for x in range(img.shape[0]):
        for y in range(img.shape[1]):
            RGBimg=RGBColor(img[x,y,0],img[x,y,1],img[x,y,2])
            LABimg=RGBimg.convert_to('lab', debug=False)
            if (LABimg.lab_l &gt; treshold):
                res[x,y,:]=color
            else: 
                res[x,y,:]=img[x,y,:]
    return res

def mask2(rgb, threshold=80, color=[255,20,147]):
    res = rgb.copy()
    lab = skimage.color.rgb2lab(rgb)
    mask = lab[:,:,0] &gt; threshold
    res[mask] = np.array(color).reshape(1,-1).repeat(mask.sum(),axis=0)
    return res

sdata = "789C9D953D56C52010856363696D49E90AAC73ECDD4396C25228B210CE711B2CC2CAC622CECC9D0C0321313A27E411123EEEFCC07B7BFF7A9CC45EA9BD507BD6F620F769CAF4FEE3096DB76DDACEAEE9865D4CF79C6DAB34F46D441F7F23F88F6F728E6AD794724EDD5CBB9B790EF53FBF1595D9524C517E93CDEA3A433D984E83440327B318B633BF867A4C12734A5654CE26F24F29AB28704A067685363C665B0582D30ADF0F39A2717F3979C9412A6108A1D731C6992C04BD96252ECB9A2AC4A60F2B07904AA8166C84B51545D172C3C8D02B4CA3D51D841F7584B5CD2E17E2698A5DDE991302AD6240189666558242122D68F1C0F19F99475104D0F7C6216D5A6665AFAED62F8A27730A57E3BC4858669D25716B387BA04E39B41059BCC7E99CEAF4B05F971C75AAB0181AE938111CA9DB9A71C9B5443EA000D4231183A4F8ECEF79E7E5B40E2DEF647BDEA9AB6250EA59F70B6AC90E9FAABFB7D040E43C010107D4F1086A4ADA6D8DA66C8AEDD9C10E3514196A0F060220B59825C843883F5D71A67586809FEDF17FFCD75C4CFC012B43550B"
fh = StringIO(zlib.decompress(unhexlify(sdata)))
rgb = skimage.io.imread(fh)

res1 = mask1(rgb)
res2 = mask2(rgb)

import timeit
t1 = timeit.timeit("mask1(rgb)", setup="from __main__ import rgb, mask1", number=100)
t2 = timeit.timeit("mask2(rgb)", setup="from __main__ import rgb, mask2", number=100)

print t1, t2, t1/t2
</snippet></ROW><ROW><id>14816057</id><snippet>4.43572092984 0.0531735152348 83.4197421453
</snippet></ROW><ROW><id>14816208</id><snippet>project.module</snippet></ROW><ROW><id>14816208</id><snippet>app.project.module</snippet></ROW><ROW><id>14816446</id><snippet>dict</snippet></ROW><ROW><id>14816446</id><snippet>dict</snippet></ROW><ROW><id>14816446</id><snippet>class FixedDict(object):
        def __init__(self, dictionary):
            self._dictionary = dictionary
        def __setitem__(self, key, item):
                if key not in self._dictionary:
                    raise KeyError("The key {} is not defined.".format(key))
                self._dictionary[key] = item
        def __getitem__(self, key):
            return self._dictionary[key]
</snippet></ROW><ROW><id>14816446</id><snippet>+</snippet></ROW><ROW><id>14816614</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.read_csv("somefile.csv", sep=";")
&gt;&gt;&gt; df
   foo  bar      apple
0    1  100       pear
1    2  200     orange
2    3  300  tangerine
3    4  400      peach
&gt;&gt;&gt; df["foo"]
0    1
1    2
2    3
3    4
Name: foo
&gt;&gt;&gt; df["bar"]
0    100
1    200
2    300
3    400
Name: bar
&gt;&gt;&gt; df["foo"] * df["bar"]
0     100
1     400
2     900
3    1600
&gt;&gt;&gt; list(df["foo"] * df["bar"])
[100, 400, 900, 1600]
</snippet></ROW><ROW><id>14816614</id><snippet>pandas</snippet></ROW><ROW><id>14816614</id><snippet>pandas</snippet></ROW><ROW><id>14817093</id><snippet>data = [
{
    "State_Code": "01",
    "County_Code": "000",
    "State_Abbrv": "AL",
    "County_Name": "ALABAMA",
    "DATA": "12345"

},
{
    "State_Code": "01",
    "County_Code": "001",
    "State_Abbrv": "AL",
    "County_Name": "AUTAUGA COUNTY",
    "DATA": "123"

},
{
    "State_Code": "01",
    "County_Code": "003",
    "State_Abbrv": "AL",
    "County_Name": "BALDWIN COUNTY",
    "DATA": "321"

},
{
    "State_Code": "02",
    "County_Code": "000",
    "State_Abbrv": "AK",
    "County_Name": "ALASKA",
    "DATA": "98765"

},
{
    "State_Code": "02",
    "County_Code": "013",
    "State_Abbrv": "AK",
    "County_Name": "ALEUTIANS EAST BOROU",
    "DATA": "456"

}
]


roots = [ d for d in data if d['County_Code'] == '000']

def crawl(data, roots):
    for root in roots:
        yield {
            'name' : root['County_Name'],
            'children' : [{ 'name' : d['County_Name'], 'DATA' : d['DATA'] }
                for d in data if d['County_Code'] != '000' and d['State_Code'] == root['State_Code']]
        }


final = { 'name' : 'USA', 'children' : [ x for x in crawl(data, roots)]}

import pprint

pprint.pprint(final)
</snippet></ROW><ROW><id>14817093</id><snippet>{'children': [{'children': [{'DATA': '123', 'name': 'AUTAUGA COUNTY'},
                            {'DATA': '321', 'name': 'BALDWIN COUNTY'}],
               'name': 'ALABAMA'},
              {'children': [{'DATA': '456', 'name': 'ALEUTIANS EAST BOROU'}],
               'name': 'ALASKA'}],
 'name': 'USA'}
</snippet></ROW><ROW><id>14817367</id><snippet>from twisted.internet import protocol, reactor

class Echo(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Echo()

reactor.listenTCP(1234, EchoFactory())
reactor.run()
</snippet></ROW><ROW><id>14817367</id><snippet>lock()</snippet></ROW><ROW><id>14817425</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "Back in BLACK, I hit the sAck, I've been too LOng I'm glad to be back."
&gt;&gt;&gt; regex = re.compile(r'black', flags=re.IGNORECASE)
&gt;&gt;&gt; regex.sub('b***', s)
"Back in b***, I hit the sAck, I've been too LOng I'm glad to be back."
</snippet></ROW><ROW><id>14817425</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(b)lack', flags=re.IGNORECASE)
&gt;&gt;&gt; regex.sub(r'\1***', s)
"Back in B***, I hit the sAck, I've been too LOng I'm glad to be back."
</snippet></ROW><ROW><id>14817425</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(?=(.))(?:black|sack|long|glad)', flags=re.IGNORECASE)
&gt;&gt;&gt; regex.sub(r'\1***', s)
"Back in B***, I hit the s***, I've been too L*** I'm g*** to be back."
</snippet></ROW><ROW><id>14817819</id><snippet>[-\w]</snippet></ROW><ROW><id>14817819</id><snippet>A-Za-z0-9_</snippet></ROW><ROW><id>14817819</id><snippet>-</snippet></ROW><ROW><id>14817902</id><snippet>stdout</snippet></ROW><ROW><id>14817902</id><snippet>stderr</snippet></ROW><ROW><id>14817902</id><snippet>stdout</snippet></ROW><ROW><id>14817902</id><snippet>./manage.py test &amp;&gt; test.log
</snippet></ROW><ROW><id>14817902</id><snippet>./manage.py test &gt; test.log 2&gt; test.log
</snippet></ROW><ROW><id>14818076</id><snippet>minimize z
subject to (for all j, k) 
    z &gt;= (sum i in items) w_i D_ij - (sum i in items) w_i D_ik
    z &gt;= (sum i in items) w_i D_ik - (sum i in items) w_i D_ij
</snippet></ROW><ROW><id>14818076</id><snippet>z &gt;=</snippet></ROW><ROW><id>14818076</id><snippet>cplex</snippet></ROW><ROW><id>14818076</id><snippet>cvxpy</snippet></ROW><ROW><id>14818076</id><snippet>i</snippet></ROW><ROW><id>14818076</id><snippet>w_i</snippet></ROW><ROW><id>14818076</id><snippet>cumsum</snippet></ROW><ROW><id>14818076</id><snippet>searchsorted</snippet></ROW><ROW><id>14818076</id><snippet>[0.006123642775837011, 0.08591660144140816, 0.0, 0.0, 0.0, 0.0, 0.03407525280610657, 0.0, 0.0, 0.0, 0.07092537493489116, 0.0, 0.0, 0.023926802333318554, 0.0, 0.03941537854267549, 0.0, 0.0, 0.0, 0.0, 0.10937063438351756, 0.08715770469631079, 0.0, 0.05841899435928017, 0.016328676622408153, 0.002218517959171183, 0.0, 0.0, 0.0, 0.08186919626269101, 0.03173286609277701, 0.08737065271898292, 0.0, 0.0, 0.041505225727435785, 0.05033635148761689, 0.0, 0.09172214842175723, 0.027548495513552738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0259929997624099, 0.0, 0.0, 0.028044483157851748, 0.0, 0.0, 0.0]
</snippet></ROW><ROW><id>14818076</id><snippet>[0.0219136051655165, 0.0, 0.028325808078797768, 0.0, 0.040889043180965624, 0.04372501089775975, 0.0, 0.031032870504105477, 0.020745831040881676, 0.04794861828714149, 0.0, 0.03763592540998652, 0.0029093177405377577, 0.0034239051136138398, 0.0, 0.03079554151573207, 0.0, 0.04676278554085836, 0.0461258666541918, 9.639105313353352e-05, 0.0, 0.013649362063473166, 0.059168272186891635, 0.06703936360466661, 0.0, 0.0, 0.03175895249795131, 0.0, 0.0, 0.04376133487616099, 0.02406633433758186, 0.009724226721798858, 0.05058252335384487, 0.0, 0.0393763638188805, 0.05287112817101315, 0.0, 0.0, 0.06365320629437914, 0.0, 0.024978299494456246, 0.023531082497830605, 0.033406648550332804, 0.012693750980220679, 0.00274892002684083, 0.0, 0.0, 0.0, 0.0, 0.04465971034045478, 4.888224154453002]
</snippet></ROW><ROW><id>14818080</id><snippet>cvtColor</snippet></ROW><ROW><id>14818080</id><snippet>wx.Panel</snippet></ROW><ROW><id>14818080</id><snippet>import wx
import cv, cv2

class ShowCapture(wx.Panel):
    def __init__(self, parent, capture, fps=15):
        wx.Panel.__init__(self, parent)

        self.capture = capture
        ret, frame = self.capture.read()

        height, width = frame.shape[:2]
        parent.SetSize((width, height))
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        self.bmp = wx.BitmapFromBuffer(width, height, frame)

        self.timer = wx.Timer(self)
        self.timer.Start(1000./fps)

        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_TIMER, self.NextFrame)


    def OnPaint(self, evt):
        dc = wx.BufferedPaintDC(self)
        dc.DrawBitmap(self.bmp, 0, 0)

    def NextFrame(self, event):
        ret, frame = self.capture.read()
        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            self.bmp.CopyFromBuffer(frame)
            self.Refresh()


capture = cv2.VideoCapture(0)
capture.set(cv.CV_CAP_PROP_FRAME_WIDTH, 320)
capture.set(cv.CV_CAP_PROP_FRAME_HEIGHT, 240)

app = wx.App()
frame = wx.Frame(None)
cap = ShowCapture(frame, capture)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>14818147</id><snippet>from numbers import Integral

&gt;&gt;&gt; blah = [1, 1.2, 1L]
&gt;&gt;&gt; [i for i in blah if isinstance(i, Integral)]
[1, 1L]
</snippet></ROW><ROW><id>14818147</id><snippet>&gt;&gt;&gt; map(type, [1, 1.2, 2**128])
[&lt;type 'int'&gt;, &lt;type 'float'&gt;, &lt;type 'long'&gt;]
</snippet></ROW><ROW><id>14818147</id><snippet>&gt;&gt;&gt; list(map(type, [1, 1.2, 2**128]))
[&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'int'&gt;]
</snippet></ROW><ROW><id>14818147</id><snippet>isinstance(n, numbers.Integral)</snippet></ROW><ROW><id>14818256</id><snippet>actFile = open("activefile.txt")
</snippet></ROW><ROW><id>14818256</id><snippet>       for actLine in actFile:
</snippet></ROW><ROW><id>14818423</id><snippet>re.sub('\{.*[\w\s]*.*\}','mytext',txt)
</snippet></ROW><ROW><id>14818423</id><snippet>'&lt;div&gt;\n mytext\n&lt;/div&gt;'
</snippet></ROW><ROW><id>14818423</id><snippet>\{</snippet></ROW><ROW><id>14818423</id><snippet>.*[\w\s]*.*</snippet></ROW><ROW><id>14818423</id><snippet>\}</snippet></ROW><ROW><id>14818423</id><snippet>re.sub('\{% for link in links.*[\w\s]*.*end for %\}','mytext',txt)
</snippet></ROW><ROW><id>14818423</id><snippet>re.sub('\{.*[\W\w\s]*.*\}', 'mytext', txt)
</snippet></ROW><ROW><id>14818423</id><snippet>txt</snippet></ROW><ROW><id>14818423</id><snippet>"Pink Floyd"
&lt;div&gt;
 mytext
&lt;/div&gt;
"Fleetwood Mac"
</snippet></ROW><ROW><id>14818423</id><snippet>for</snippet></ROW><ROW><id>14818423</id><snippet>"Beatles"
&lt;div&gt;
 {% for link in links %}
    iiiY=uuu
    12345678
 {% endfor %}
&lt;/div&gt;
"Tino Rossi"
{ for link in links % }
   asdfasdfas
{% endfor% }
</snippet></ROW><ROW><id>14818423</id><snippet>"Beatles"
&lt;div&gt;
 mytext
</snippet></ROW><ROW><id>14818423</id><snippet>re.sub('\{.*[\W\w\s]*?.*\}', 'mytext', txt)
</snippet></ROW><ROW><id>14818521</id><snippet>==</snippet></ROW><ROW><id>14818521</id><snippet>x = 3
print x
</snippet></ROW><ROW><id>14818668</id><snippet>#version 330

uniform mat4 MVP;
in vec3 position;

void main()
{
    gl_Position = MVP * vec4(position, 1);
}
</snippet></ROW><ROW><id>14818668</id><snippet>0 4 8 c
1 5 9 d
2 6 a e
3 7 b f
</snippet></ROW><ROW><id>14818702</id><snippet>key, val = height_by_gender_and_agegroup(person)
</snippet></ROW><ROW><id>14818702</id><snippet>def height_by_gender_and_agegroup(p):
    key = p.gender, p.age //10
    val = p.height
    return (key, val)  # note the optional parentheses to denote a tuple

ret = height_by_gender_and_agegroup(person)
key = ret[0]
val = ret[1]  # "key, val =" is just a shortcut for this
</snippet></ROW><ROW><id>14818702</id><snippet>(gender, age), val = height_by_gender_and_agegroup(person)
</snippet></ROW><ROW><id>14818702</id><snippet>key, val = height_by_gender_and_agegroup(person)
gender, age = key
</snippet></ROW><ROW><id>14818703</id><snippet>filters = (_filter1, _filter2, _filter3)
list_after = filter(lambda x: all(f(x) for f in filters), your_list)
</snippet></ROW><ROW><id>14818819</id><snippet>odeint</snippet></ROW><ROW><id>14818819</id><snippet>x</snippet></ROW><ROW><id>14818819</id><snippet>(m**2,)</snippet></ROW><ROW><id>14818819</id><snippet>(m, m)</snippet></ROW><ROW><id>14818819</id><snippet>.reshape(-1)</snippet></ROW><ROW><id>14818819</id><snippet>def update_matrix(x,coeffs,m):
    x = x.reshape(m, m)
    update_matrix=numpy.zeros((m,m))
    for i in range(m+1):
        for j in range(m+1-i):
            update_matrix[m][m]=diffeq(x,i,j,coeffs)
    return update_matrix.reshape(-1)

def run_simulation_R2(a,q,m):
    x_counts=numpy.zeros((m,m))
    x_counts[1][0]=1
    x_counts[0][1]=1
    coeffs=R2(a,q,m,x_counts)
    t=range(0,100)
    output = integrate.odeint(update_matrix, x_counts.reshape(-1), t,
                              args=(coeffs, m))
    return output.reshape(m, m)
</snippet></ROW><ROW><id>14818894</id><snippet>a=dict(b=3, c='d', x=10)
print ",".join(['{0}=${1}'.format(k, i) for i, k in enumerate(sorted(a))])
</snippet></ROW><ROW><id>14819060</id><snippet>sched</snippet></ROW><ROW><id>14819086</id><snippet>scipy.stats.spearmanr</snippet></ROW><ROW><id>14819086</id><snippet>&gt;&gt;&gt; scipy.stats.spearmanr([0.3, 0.2, 0.2], [0.5, 0.6, 0.4])
(0.0, 1.0)
</snippet></ROW><ROW><id>14819086</id><snippet>scipy.stats.pearsonr</snippet></ROW><ROW><id>14819086</id><snippet>[1, 2.5, 2.5]</snippet></ROW><ROW><id>14819086</id><snippet>[0, 1.5, 1.5]</snippet></ROW><ROW><id>14819086</id><snippet>&gt;&gt;&gt; scipy.stats.pearsonr([1, 2, 2], [2, 1, 3])
(0.0, 1.0)
&gt;&gt;&gt; scipy.stats.pearsonr([1, 2.5, 2.5], [2, 1, 3])
(0.0, 1.0)
</snippet></ROW><ROW><id>14819189</id><snippet>match</snippet></ROW><ROW><id>14819189</id><snippet>x</snippet></ROW><ROW><id>14819189</id><snippet>x</snippet></ROW><ROW><id>14819189</id><snippet>list</snippet></ROW><ROW><id>14819189</id><snippet>re.search</snippet></ROW><ROW><id>14819189</id><snippet>re.match</snippet></ROW><ROW><id>14819189</id><snippet>'\W*myString\W*'</snippet></ROW><ROW><id>14819189</id><snippet>test;</snippet></ROW><ROW><id>14819189</id><snippet>\W*</snippet></ROW><ROW><id>14819189</id><snippet>word boundaries</snippet></ROW><ROW><id>14819189</id><snippet>pattern = r'\b' + re.escape(myString) + r'\b'
indices = [i for i, x in enumerate(myList) if re.search(pattern, x)]
</snippet></ROW><ROW><id>14819251</id><snippet>CREATE TABLE MyTable(
    'my_id' INT(10) unsigned NOT NULL,
    'id' INT(10),
    'description' TEXT
) ENGINE=MyISAM DEFAULT CHARSET=utf8


sql = "INSERT IGNORE INTO MyTable ( 'my_id', 'id', 'description' ) VALUES ( %s, %s, %s )"
myArg = [(dct['my_id'], dct['my_text']['id'], dct['my_text']['description'])
         for dct in myData]
cur.executemany(sql, myArg)
</snippet></ROW><ROW><id>14819251</id><snippet>cur.executemany</snippet></ROW><ROW><id>14819251</id><snippet>myData = [ { u'my_text' : {u'id': u'1', u'description' : u'described' }, u'my_id' : u'1' } ]
myArg = [ {'my_txt' : str(dct['my_text']), 
           'my_id' : dct['my_id']} for dct in myData ]
cur.executemany(sql, myArg)
</snippet></ROW><ROW><id>14819251</id><snippet>id</snippet></ROW><ROW><id>14819494</id><snippet>bar</snippet></ROW><ROW><id>14819494</id><snippet>&gt;&gt;&gt; bar(xs, ys, width=1, align='center', color='brown')
&gt;&gt;&gt; plot(xs, ys, color='purple', lw=2, marker='s')
</snippet></ROW><ROW><id>14819535</id><snippet>\b(\d)(?!\1)\d\b
</snippet></ROW><ROW><id>14819535</id><snippet>(\d)</snippet></ROW><ROW><id>14819803</id><snippet>sftp = paramiko.SFTPClient.from_transport(transport)
try:
    sftp.chdir(remote_path)  # Test if remote_path exists
except IOError:
    sftp.mkdir(remote_path)  # Create remote_path
    sftp.chdir(remote_path)
sftp.put(local_path, '.')    # At this point, you are in remote_path in either case
sftp.close()
</snippet></ROW><ROW><id>14819803</id><snippet>mkdir -p</snippet></ROW><ROW><id>14819803</id><snippet>import os.path

def mkdir_p(sftp,remote_directory):
    if remote_directory == '/':
        # absolute path so change directory to root
        sftp.chdir('/')
        return
    if remote_directory == '':
        # top-level relative directory must exist
        return
    remote_dirname, basename = os.path.split(remote_directory)
    mkdir_p(os.path.dirname(remote_directory))  # make parent directories
    try:
        sftp.chdir(name)   # sub-directory exists
    except IOError:
        sftp.mkdir(name)   # sub-directory missing, so created it
        sftp.chdir(name)

sftp = paramiko.SFTPClient.from_transport(transport)
mkdir_p(sftp,remote_path) 
sftp.put(local_path, '.')    # At this point, you are in remote_path
sftp.close()
</snippet></ROW><ROW><id>14819825</id><snippet>-a_srs 4326 -t_srs ????</snippet></ROW><ROW><id>14819883</id><snippet>x = [100,2,300,4,75]
dct = {}
for i in x:
    dct['lst_%s' % i] = []

print(dct)
# {'lst_300': [], 'lst_75': [], 'lst_100': [], 'lst_2': [], 'lst_4': []}
</snippet></ROW><ROW><id>14820066</id><snippet>python scripy.py
</snippet></ROW><ROW><id>14820120</id><snippet>//</snippet></ROW><ROW><id>14820120</id><snippet>/</snippet></ROW><ROW><id>14820120</id><snippet>//</snippet></ROW><ROW><id>14820120</id><snippet>/</snippet></ROW><ROW><id>14820120</id><snippet>Python 3.2.3 (default, Apr 11 2012, ...
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 10
&gt;&gt;&gt; a/3
3.3333333333333335
&gt;&gt;&gt; a//3
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14820128</id><snippet>class TAGS(db.Model):
    UserAIds  = db.StringListProperty() 
</snippet></ROW><ROW><id>14820128</id><snippet>i = 0
for industry in userB_obj.myindustries:
      t1_obj[i] = TAGS.get_by_key_name(industry)
      i = i + 1
</snippet></ROW><ROW><id>14820128</id><snippet>j = 0
for agegroup in userB_obj.myagegroups:
      t2_obj[j] = TAGS.get_by_key_name(agegroup)
      j = j + 1
</snippet></ROW><ROW><id>14820128</id><snippet>k = 0
for tag in userB_obj.mytags:
      t3_obj[k] = TAGS.get_by_key_name(tag)
      k = k + 1
</snippet></ROW><ROW><id>14820128</id><snippet>class MatchingUserAs(db.Model):
      count  = db.IntegerProperty(default=0) 
      source = db.StringProperty(default=None)
</snippet></ROW><ROW><id>14820128</id><snippet>&lt;"loop through t1_obj[i]"&gt;:
      Matchkey = MatchingUserAs.get_or_insert(t1_obj[i].UserAId)
      Matchkey.count = 1
      Matchkey.source = 'industry'
      Matchkey.put()

&lt;"loop through t2_obj[j]"&gt;:
      Matchkey = MatchingUserAs.get_or_insert(t2_obj[j].UserAId)
      #the following if check has been added to avoid incrementing the counter
      #when same UserAid is present in, say, t2_obj[0], and t2_obj[1], etc.
      if(Matchkey.source != 'agegroup')
          Matchkey.count  = Matchkey.count + 1
          Matchkey.source = 'agegroup'
      Matchkey.put()

&lt;"loop through t3_obj[j]"&gt;:
      Matchkey = MatchingUserAs.get_or_insert(t3_obj[j].UserAId)
      if(Matchkey.source != 'tags')
          Matchkey.count  = Matchkey.count + 1
          Matchkey.source = 'tags'
      Matchkey.put()
</snippet></ROW><ROW><id>14820304</id><snippet>import os
import glob
import itertools

for each in itertools.chain.from_iterable(
        glob.glob(os.path.join(eachDir,'/*.h')) 
        for eachDir in subDirs):
    print each
</snippet></ROW><ROW><id>14820304</id><snippet>In [6]: import itertools as IT
In [7]: list(IT.chain.from_iterable([['a', 'b', 'c'], [1, 2, 3]]))
Out[7]: ['a', 'b', 'c', 1, 2, 3]
</snippet></ROW><ROW><id>14820644</id><snippet>import random
import matplotlib.pyplot as plt

labels = [chr(j) for j in range(97, 115)]

fake_data1 = [random.random() for l in labels]
fake_data2 = [random.random() for l in labels]
y_data = range(len(labels))

figure()
ax = gca()

ax.grid(True)
ax.scatter(fake_data1, y_data, color='r')
ax.scatter(fake_data2, y_data, color='b')

ax.set_yticks(range(len(labels)))
ax.set_yticklabels(labels)
ax.invert_xaxis()
plt.draw()
</snippet></ROW><ROW><id>14820644</id><snippet>labels</snippet></ROW><ROW><id>14820644</id><snippet>y_data</snippet></ROW><ROW><id>14820644</id><snippet>fake_data1</snippet></ROW><ROW><id>14820644</id><snippet>fake_data2</snippet></ROW><ROW><id>14820644</id><snippet>x</snippet></ROW><ROW><id>14820648</id><snippet>MyModel2.mymodel1
</snippet></ROW><ROW><id>14820648</id><snippet>MyModel2.mymodel1.through
</snippet></ROW><ROW><id>14820648</id><snippet>MyModel2.mymodel1.through.objects
</snippet></ROW><ROW><id>14820648</id><snippet>MyModel2.mymodel1.through.objects.all()
</snippet></ROW><ROW><id>14820648</id><snippet>through</snippet></ROW><ROW><id>14820648</id><snippet>through</snippet></ROW><ROW><id>14820718</id><snippet>def form_valid(self, form):
    # call form.save manually: creates "i am: foxmask"
    self.object = form.save(user=self.request.user)

    # Call parent form_valid(), CreateView.form_valid() ...
    # ... which also calls form.save() without user argument !!
    # So, it should create "i am: None" because the default value for 
    # the user argument of the save() method of your form is None.
    return super(TriggerServiceCreateView, self).form_valid(form)
</snippet></ROW><ROW><id>14820718</id><snippet>CreateView.form_valid()</snippet></ROW><ROW><id>14820718</id><snippet>TriggerServiceForm.save()</snippet></ROW><ROW><id>14820718</id><snippet>user=None</snippet></ROW><ROW><id>14820718</id><snippet>from django import http

# ...

def form_valid(self, form):
    self.object = form.save(user=self.request.user)
    return http.HttpResponseRedirect(self.get_success_url())
</snippet></ROW><ROW><id>14820912</id><snippet>apt-get</snippet></ROW><ROW><id>14820912</id><snippet>sudo apt-get install python-socksipy
</snippet></ROW><ROW><id>14820973</id><snippet>/opt/local</snippet></ROW><ROW><id>14820973</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>14820973</id><snippet>scapy</snippet></ROW><ROW><id>14820973</id><snippet>scapy</snippet></ROW><ROW><id>14821023</id><snippet>subprocess.Popen('"vcvarsall.bat" x86&amp;&amp;"invoke_compiler.bat"', shell=True)
</snippet></ROW><ROW><id>14821058</id><snippet>A[rank]
</snippet></ROW><ROW><id>14821111</id><snippet>const</snippet></ROW><ROW><id>14821163</id><snippet>.getElementsByTagname()</snippet></ROW><ROW><id>14821163</id><snippet>nodeObjects = parent.getElementsByTagname('childtoFind')
</snippet></ROW><ROW><id>14821163</id><snippet>nodeObject = parent.getElementsByTagname('childtoFind')[0]
</snippet></ROW><ROW><id>14821163</id><snippet>minidom</snippet></ROW><ROW><id>14821163</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>14821163</id><snippet>.find()</snippet></ROW><ROW><id>14821163</id><snippet>element = parent.find('childtoFind')
</snippet></ROW><ROW><id>14821207</id><snippet>print 1</snippet></ROW><ROW><id>14821207</id><snippet>exec open(fifo_in)</snippet></ROW><ROW><id>14821207</id><snippet>import sys
import time
import traceback
fifo_in = sys.argv[1]
try:
    fp = open(fifo_in) # will block until pipe is opened for write
except IOError:
    traceback.print_exc()
except OSError:
    traceback.print_exc()

data = None
while True:
    try:
        data = fp.read()
        try:
            exec data
        except:
            traceback.print_exc()
        finally:
            time.sleep(0.1)
    except KeyboardInterrupt:
        break
</snippet></ROW><ROW><id>14821303</id><snippet>$ test.py
</snippet></ROW><ROW><id>14821303</id><snippet>PATH</snippet></ROW><ROW><id>14821303</id><snippet>$ ./test.py
</snippet></ROW><ROW><id>14821303</id><snippet>PATH</snippet></ROW><ROW><id>14821365</id><snippet>\b</snippet></ROW><ROW><id>14821365</id><snippet>&gt;&gt;&gt; print "b%sa%sc%sk%ss%sl%sa%ss%sh%s " % bs
</snippet></ROW><ROW><id>14821399</id><snippet>def primeNumbers(limit):
    primeList = [2]
    for i in nextPrime(primeList):
        if i &gt; limit:
            break
        primeList.append(i)
    return primeList
</snippet></ROW><ROW><id>14821775</id><snippet>print "{0}: {1}".format(k, v)
</snippet></ROW><ROW><id>14821775</id><snippet>print u"{0}: {1}".format(k, v)
</snippet></ROW><ROW><id>14821775</id><snippet>print "{0}: {1}".format(k.encode('utf-8'), v)
</snippet></ROW><ROW><id>14821978</id><snippet>def edu_info(user1):
    user_1_cities = []
    user_1_schools = []
    user_1_state = []
    first_one = Education.objects.filter(owner=user1)
    for i in first_one:
        user_1_cities.append(str(i.city))
        user_1_schools.append(str(i.school))
        user_1_state.append(str(i.state))
    info = {}
    info['cities'] = user_1_cities
    info['schools'] = user_1_schools
    info['states'] = user_1_state
    return info
</snippet></ROW><ROW><id>14821978</id><snippet>def check_match(user_1, user_2)
    info_1 = edu_info(user_1)
    info_2 = edu_info(user_2)
    school_points = similarity_points(info_1["schools"], info_2["schools"], 10)
    city_points = similarity_points(info_1["cities"], info_2["cities"], 5)
    state_points = similarity_points(info_1["states"], info_2["states"], 2)
    return school_points + city_points + state_points
</snippet></ROW><ROW><id>14821978</id><snippet>check_match</snippet></ROW><ROW><id>14821978</id><snippet>similarity_points(["MN","OR","PA", "NJ"],["AZ","NJ","PA"], 2)</snippet></ROW><ROW><id>14821978</id><snippet>def similarity_points(attr_1, attr_2, points)
    """Award a number of points for each shared attribute.

    attr_1 and attr_2 should be lists to compare. 
    """
    number_shared = len(set(attr_1) &amp; set(attr_2))
    return number_shared * points
</snippet></ROW><ROW><id>14821978</id><snippet>wilduck_jmitchel3_points = check_match("Wilduck", "jmitchel3")
</snippet></ROW><ROW><id>14822215</id><snippet>import math</snippet></ROW><ROW><id>14822215</id><snippet>math.ceil</snippet></ROW><ROW><id>14822245</id><snippet>scipy</snippet></ROW><ROW><id>14822245</id><snippet>numpy</snippet></ROW><ROW><id>14822245</id><snippet>numpy</snippet></ROW><ROW><id>14822245</id><snippet>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</snippet></ROW><ROW><id>14822245</id><snippet>brew install gfortran
</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>scipy</snippet></ROW><ROW><id>14822245</id><snippet>easy_install</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>sudo easy_install pip
</snippet></ROW><ROW><id>14822245</id><snippet>virtualenv</snippet></ROW><ROW><id>14822245</id><snippet>sudo</snippet></ROW><ROW><id>14822245</id><snippet>gfortran</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>sudo pip install --upgrade numpy
sudo pip install scipy
</snippet></ROW><ROW><id>14822245</id><snippet>python</snippet></ROW><ROW><id>14822245</id><snippet>pip-2.7</snippet></ROW><ROW><id>14822245</id><snippet>python3</snippet></ROW><ROW><id>14822245</id><snippet>pip-3.3</snippet></ROW><ROW><id>14822245</id><snippet>scipy</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>sudo</snippet></ROW><ROW><id>14822245</id><snippet>brew install gfortran; pip install numpy scipy</snippet></ROW><ROW><id>14822245</id><snippet>python</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>sudo</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>easy_install</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>virtualenv</snippet></ROW><ROW><id>14822245</id><snippet>[venv</snippet></ROW><ROW><id>14822245</id><snippet>scipy</snippet></ROW><ROW><id>14822245</id><snippet>sudo</snippet></ROW><ROW><id>14822245</id><snippet>pip</snippet></ROW><ROW><id>14822245</id><snippet>ipython</snippet></ROW><ROW><id>14822245</id><snippet>/usr/local/bin/ipython</snippet></ROW><ROW><id>14822245</id><snippet>/usr/local/bin/ipython-2.7</snippet></ROW><ROW><id>14822245</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>14822245</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>14822245</id><snippet>/usr/local/share/python2.7</snippet></ROW><ROW><id>14822245</id><snippet>/usr/local/Cellar/python/2.7.3/bin</snippet></ROW><ROW><id>14822245</id><snippet>~/.profile</snippet></ROW><ROW><id>14822245</id><snippet>/usr/bin</snippet></ROW><ROW><id>14822245</id><snippet>~/.profile</snippet></ROW><ROW><id>14822245</id><snippet>PATH=/usr/local/bin:$PATH
export PATH
</snippet></ROW><ROW><id>14822245</id><snippet>homebrew</snippet></ROW><ROW><id>14822245</id><snippet>brew doctor</snippet></ROW><ROW><id>14822344</id><snippet>In [35]: import bs4 as bs

In [36]: bs.BeautifulSoup('&lt;h1&gt;FOO&lt;/h1&gt;', "html.parser")
Out[36]: &lt;h1&gt;FOO&lt;/h1&gt;
</snippet></ROW><ROW><id>14822344</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>14822344</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>14822344</id><snippet>html5lib</snippet></ROW><ROW><id>14822344</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>14822344</id><snippet>In [61]: soup = bs.BeautifulSoup('&lt;h1&gt;FOO&lt;/h1&gt;', 'html5lib')

In [62]: soup.body.next
Out[62]: &lt;h1&gt;FOO&lt;/h1&gt;
</snippet></ROW><ROW><id>14822588</id><snippet>conf.py</snippet></ROW><ROW><id>14822588</id><snippet>rst_prolog = '''
..highlight:: python
  :linenothreshold: 0

'''
</snippet></ROW><ROW><id>14822588</id><snippet>rst_prolog</snippet></ROW><ROW><id>14822588</id><snippet>rst_prologue</snippet></ROW><ROW><id>14822675</id><snippet>d={'left':[],'right':[]}
for e in (random.random() for i in xrange(50)):
    d['left' if e&lt;0.5 else 'right'].append(e)
</snippet></ROW><ROW><id>14822675</id><snippet>def f(i):
   return int(i*10)

DoL=defaultdict(list)
for e in (random.random() for i in xrange(50)):
   DoL[f(e)].append(e)
</snippet></ROW><ROW><id>14822721</id><snippet>output</snippet></ROW><ROW><id>14822721</id><snippet>Appender</snippet></ROW><ROW><id>14822721</id><snippet>import std.array : appender;

void main() {
   auto output = appender!string("// Assembly file generated by my awesome VM compiler\n");
   //...
   output.put(format("// Input filename: %s\n", inputfname));
   foreach (line; inputf.byLine) {
       output.put(compile_operation(line.to!string().strip()));
   }
   //...
   outputf.write(output.data());
   //...
}
</snippet></ROW><ROW><id>14822721</id><snippet>type_dict</snippet></ROW><ROW><id>14822721</id><snippet>int[string]</snippet></ROW><ROW><id>14822721</id><snippet>int[string] type_dict;

const TYPE_ARITHMETIC = 0,
    TYPE_MEMORY = 1;

//...
type_dict = ["add": TYPE_ARITHMETIC, "push": TYPE_MEMORY]; // etc
//...

//...
if (type_dict[operation] == TYPE_ARITHMETIC) {
    //...
}
//...
</snippet></ROW><ROW><id>14822721</id><snippet>canFind</snippet></ROW><ROW><id>14822721</id><snippet>is_in</snippet></ROW><ROW><id>14822721</id><snippet>SortedRange</snippet></ROW><ROW><id>14822767</id><snippet>re</snippet></ROW><ROW><id>14822767</id><snippet>import re
pattern = re.compile("html")
query = {"Body": pattern}
r = mo_db.posts.find(query)
print r.count()
</snippet></ROW><ROW><id>14822787</id><snippet>UPDATE seats SET CustID=? AND Booked=? WHERE Seat_name=? AND Day=?
</snippet></ROW><ROW><id>14822787</id><snippet>UPDATE seats SET CustID=?, Booked=? WHERE Seat_name=? AND Day=?
</snippet></ROW><ROW><id>14822787</id><snippet>UPDATE</snippet></ROW><ROW><id>14822796</id><snippet>logging.conf</snippet></ROW><ROW><id>14822796</id><snippet>logging.config.fileConfig</snippet></ROW><ROW><id>14822796</id><snippet>import os
logconf_file = os.path.join(os.path.dirname(__file__), 'logging.conf')
logging.config.fileConfig(logconf_file)
</snippet></ROW><ROW><id>14822821</id><snippet>langs = win32api.GetFileVersionInfo(ExecutablePath, r'\VarFileInfo\Translation')
key = r'StringFileInfo\%04x%04x\FileDescription' %(langs[0][0], langs[0][1])        
print (win32api.GetFileVersionInfo(ExecutablePath, key))
</snippet></ROW><ROW><id>14822930</id><snippet>import grinder.logger.info
import grinder.statistics.forLastTest
</snippet></ROW><ROW><id>14822930</id><snippet>net.grinder.logger.info</snippet></ROW><ROW><id>14822930</id><snippet>net.grinder.statistics.forLastTest</snippet></ROW><ROW><id>14823092</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>14823092</id><snippet>import timeit

timeit.default_timer() - 5
</snippet></ROW><ROW><id>14823341</id><snippet>-id windowid           Show the X window corresponding to "windowid" not
                       the entire display.  New windows like popup menus,
                       transient toplevels, etc, may not be seen or may be
                       clipped.  Disabling SaveUnders or BackingStore in the
                       X server may help show them.  x11vnc may crash if the
                       window is initially partially obscured, changes size,
                       is iconified, etc.  Some steps are taken to avoid this
                       and the -xrandr mechanism is used to track resizes.  Use
                       xwininfo(1) to get the window id, or use "-id pick"
                       to have x11vnc run xwininfo(1) for you and extract
                       the id.  The -id option is useful for exporting very
                       simple applications (e.g. the current view on a webcam).
-sid windowid          As -id, but instead of using the window directly it
                       shifts a root view to it: this shows SaveUnders menus,
                       etc, although they will be clipped if they extend beyond
                       the window.


-appshare              Simple application sharing based on the -id/-sid
                       mechanism.  Every new toplevel window that the
                       application creates induces a new viewer window via
                       a reverse connection.  The -id/-sid and -connect
                       options are required.  Run 'x11vnc -appshare -help'
                       for more info.
</snippet></ROW><ROW><id>14823341</id><snippet>var x11 = require('x11');

var X = x11.createClient(function(err, display) {
    X.require('damage', function(Damage) {
        var damage = X.AllocID();
        Damage.Create(damage, parseInt(process.argv[2]), Damage.ReportLevel.NonEmpty);
        X.on('event', function(ev) {
          Damage.Subtract(damage, 0, 0);
          console.log("window content changed!");
        });
    });
});
</snippet></ROW><ROW><id>14823355</id><snippet>source bin/activate
</snippet></ROW><ROW><id>14823355</id><snippet>. bin/activate
</snippet></ROW><ROW><id>14823394</id><snippet>&gt;&gt;&gt; reg = r'&lt;(\w+)\s[^&lt;&gt;]*?href=[\'"]([\w$-_.+!*\'\(\),%\/:#=?~\[\]!&amp;@;]*?)[\'"].*?&gt;((.+?)&lt;/\1&gt;)?'
... 
&gt;&gt;&gt; d = """
&lt;link href='http://blah.net/message/new/?stopemails.aspx?id=5A42FDF5' /&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;
&lt;a href='http://blah.net/message/new/'&gt;Click here and submit your updated information &lt;/a&gt; &lt;br&gt;&lt;br&gt;Thanking you in advance for your attention to this matter.&lt;br&gt;&lt;br&gt;
Regards, &lt;br&gt;
Debbi Hamilton
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
"""
&gt;&gt;&gt; 
&gt;&gt;&gt; re.findall(reg, d)
[('link', 'http://blah.net/message/new/?stopemails.aspx?id=5A42FDF5', '', ''), 
('a', 'http://blah.net/message/new/', 'Click here and submit your updated information &lt;/a&gt;', 'Click here and submit your updated information ')]
</snippet></ROW><ROW><id>14823394</id><snippet>&gt;&gt;&gt; reg = '&lt;(\w+)\s[^&lt;&gt;]*?href=[\'"]([\w$-_.+!*\'\(\),%\/:#=?~\[\]!&amp;@;]*?)[\'"].*?&gt;((.+?)&lt;/\1&gt;)?'
... 
&gt;&gt;&gt; re.findall(reg, d)
[('link', 'http://blah.net/message/new/?stopemails.aspx?id=5A42FDF5', '', ''), 
('a', 'http://blah.net/message/new/', '', '')]
</snippet></ROW><ROW><id>14823610</id><snippet>vars</snippet></ROW><ROW><id>14823610</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
&gt;&gt;&gt; args = parser.parse_args(['--foo', 'BAR'])
&gt;&gt;&gt; vars(args)
{'foo': 'BAR'}
</snippet></ROW><ROW><id>14823610</id><snippet>&gt;&gt;&gt; class C(object):
...     pass
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
&gt;&gt;&gt; parser.parse_args(args=['--foo', 'BAR'], namespace=c)
&gt;&gt;&gt; c.foo
'BAR'
</snippet></ROW><ROW><id>14823610</id><snippet>Popen</snippet></ROW><ROW><id>14823641</id><snippet>&gt; script.py 3
9
</snippet></ROW><ROW><id>14823968</id><snippet>flask.Flask.run</snippet></ROW><ROW><id>14823968</id><snippet>**options</snippet></ROW><ROW><id>14823968</id><snippet>werkzeug.serving.run_simple</snippet></ROW><ROW><id>14823968</id><snippet>threaded</snippet></ROW><ROW><id>14823968</id><snippet>True</snippet></ROW><ROW><id>14823968</id><snippet>processes</snippet></ROW><ROW><id>14823968</id><snippet>if __name__ == '__main__':
    app.run(threaded=True)
    # Alternately
    # app.run(processes=3)
</snippet></ROW><ROW><id>14823968</id><snippet>serving.run_simple</snippet></ROW><ROW><id>14823968</id><snippet>wsgiref</snippet></ROW><ROW><id>14824147</id><snippet>rpy2</snippet></ROW><ROW><id>14824147</id><snippet>CFLAGS</snippet></ROW><ROW><id>14824147</id><snippet>LDFLAGS</snippet></ROW><ROW><id>14824147</id><snippet>~/src/readline-6.2</snippet></ROW><ROW><id>14824147</id><snippet>./configure --prefix=$HOME &amp;&amp; make &amp;&amp; make install</snippet></ROW><ROW><id>14824147</id><snippet>CPPFLAGS="-I/usr/local/include -I$HOME/include/" \
LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib -L$HOME/lib64 -L$HOME/lib" \
./configure --prefix=$HOME --enable-BLAS-shlib --enable-R-shlib
make
make install
</snippet></ROW><ROW><id>14824147</id><snippet>$ ldd ~/lib64/R/lib/libR.so | grep readline
libreadline.so.6 =&gt; /home/dsutherl/lib/libreadline.so.6 (0x00007f8104207000)
</snippet></ROW><ROW><id>14824147</id><snippet>CFLAGS="-I/usr/local/include -I$HOME/include/" \
LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib -L$HOME/lib64 -L$HOME/lib" \
./configure --prefix=$HOME
make
make install
</snippet></ROW><ROW><id>14824147</id><snippet>$ ldd ~/lib/python3.2/lib-dynload/readline.cpython-32m.so | grep readline
libreadline.so.6 =&gt; /home/dsutherl/lib/libreadline.so.6 (0x00007fbfff5c2000)
</snippet></ROW><ROW><id>14824147</id><snippet>CFLAGS="-I/usr/local/include -I$HOME/include/" \
LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib -L$HOME/lib64 -L$HOME/lib" \
python3 setup.py build --r-home $HOME/lib64/R install
</snippet></ROW><ROW><id>14824147</id><snippet>ldd</snippet></ROW><ROW><id>14824147</id><snippet>.so</snippet></ROW><ROW><id>14824147</id><snippet>site-packages/rpy2</snippet></ROW><ROW><id>14824147</id><snippet>libreadline</snippet></ROW><ROW><id>14824147</id><snippet>R</snippet></ROW><ROW><id>14824147</id><snippet>--r-home</snippet></ROW><ROW><id>14824164</id><snippet>.get()</snippet></ROW><ROW><id>14824164</id><snippet>myText_Box</snippet></ROW><ROW><id>14824164</id><snippet>def retrieve_input():
    input = self.myText_Box.get("0.0",END)
</snippet></ROW><ROW><id>14824164</id><snippet>"0.0"</snippet></ROW><ROW><id>14824164</id><snippet>END</snippet></ROW><ROW><id>14824164</id><snippet>END</snippet></ROW><ROW><id>14824164</id><snippet>END-1c</snippet></ROW><ROW><id>14824164</id><snippet>-1c</snippet></ROW><ROW><id>14824164</id><snippet>-2c</snippet></ROW><ROW><id>14824164</id><snippet>def retrieve_input():
    input = self.myText_Box.get("0.0",'END-1c')
</snippet></ROW><ROW><id>14824277</id><snippet>group(0)</snippet></ROW><ROW><id>14824277</id><snippet>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
&gt;&gt;&gt; m.group(0)       # The entire match
'Isaac Newton'
&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.
'Isaac'
</snippet></ROW><ROW><id>14824396</id><snippet> try:
     club = Club.objects.get(club_name=str(row[1]))
     club.save() # &lt;-- You don't need to save. You haven't changed anything on the club.
 except:
     club = Club.objects.get(club_name="No Club")
     club.save() # &lt;-- You don't need to save. You haven't changed anything on the club.
</snippet></ROW><ROW><id>14824396</id><snippet>thing = str(club.id)</snippet></ROW><ROW><id>14824396</id><snippet>pk</snippet></ROW><ROW><id>14824396</id><snippet>id</snippet></ROW><ROW><id>14824396</id><snippet>pk</snippet></ROW><ROW><id>14824396</id><snippet>id</snippet></ROW><ROW><id>14824396</id><snippet>profile.club=thing</snippet></ROW><ROW><id>14824396</id><snippet>profile.club.add(club.pk)</snippet></ROW><ROW><id>14824396</id><snippet>club</snippet></ROW><ROW><id>14824396</id><snippet>models.ManyToManyField(Club)</snippet></ROW><ROW><id>14824396</id><snippet>Club</snippet></ROW><ROW><id>14824396</id><snippet>models.ForeignKey(Club)</snippet></ROW><ROW><id>14824396</id><snippet>club</snippet></ROW><ROW><id>14825077</id><snippet>class Test:
    def __init__(self, *args, **kwargs):
        pass
    def start(self):
        pass

def func():
    print 'this is a func and not a method!!!'

t = Test()

module = __import__(t.start.__module__)

print vars(module)['Test'].start
print vars(module)['func']
print vars(module)['t'].start
</snippet></ROW><ROW><id>14825077</id><snippet>&lt;unbound method Test.start&gt;                                        
&lt;function func at 0x00BA67F0&gt;                                      
&lt;bound method Test.start of &lt;__main__.Test instance at 0x00BAC170&gt;&gt;
</snippet></ROW><ROW><id>14825143</id><snippet>PATTERN = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]
def patternify(l):
    for sl in l:
        yield sl+sl[::-1]
    for sl in l[::-1]:
        yield sl+sl[::-1]

list(patternify(PATTERN))
#output: [[1, 2, 3, 3, 2, 1], [4, 5, 6, 6, 5, 4], [7, 8, 9, 9, 8, 7], [7, 8, 9, 9, 8, 7], [4, 5, 6, 6, 5, 4], [1, 2, 3, 3, 2, 1]]
</snippet></ROW><ROW><id>14825363</id><snippet>SQLAlchemyJobStore</snippet></ROW><ROW><id>14825363</id><snippet>RAMJobStore</snippet></ROW><ROW><id>14825363</id><snippet>scheduler.add_date_job</snippet></ROW><ROW><id>14825363</id><snippet>&lt;object id in memory&gt;.start</snippet></ROW><ROW><id>14825792</id><snippet>html.entities.codepoint2name</snippet></ROW><ROW><id>14825792</id><snippet>'''
Registers a special handler for named HTML entities

Usage:
import named_entities
text = u'Some string with Unicode characters'
text = text.encode('ascii', 'named_entities')
'''

import codecs
from htmlentitydefs import codepoint2name

def named_entities(text):
    if isinstance(text, (UnicodeEncodeError, UnicodeTranslateError)):
        s = []
        for c in text.object[text.start:text.end]:
            if ord(c) in codepoint2name:
                s.append(u'&amp;%s;' % codepoint2name[ord(c)])
            else:
                s.append(u'&amp;#%s;' % ord(c))
        return ''.join(s), text.end
    else:
        raise TypeError("Can't handle %s" % text.__name__)

codecs.register_error('named_entities', named_entities)
</snippet></ROW><ROW><id>14825951</id><snippet>from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

dim = 10


X, Y = np.meshgrid([-dim, dim], [-dim, dim])
Z = np.zeros((2,2))

angle = .5
X2, Y2 = np.meshgrid([-dim, dim], [0, dim])
Z2 = Y2 * angle
X3, Y3 = np.meshgrid([-dim, dim], [-dim, 0])
Z3 = Y3 * angle

r = 7
M = 1000
th = np.linspace(0, 2 * np.pi, M)

x, y, z = r * np.cos(th),  r * np.sin(th), angle * r * np.sin(th)

ax.plot_surface(X2, Y3 ,Z3, color='blue', alpha=.75, linewidth=0, zorder=-1)

ax.plot(x[y &lt; 0], y[y &lt; 0], z[y &lt; 0], lw=5, linestyle='--', color='green', zorder=0)

ax.plot_surface(X, Y ,Z, color='red', alpha=.75, linewidth=0, zorder=1)

ax.plot(r * np.sin(th), r * np.cos(th), np.zeros(M), lw=5, linestyle='--', color='k', zorder=2)

ax.plot_surface(X2, Y2 ,Z2, color='blue', alpha=.75, linewidth=0, zorder=3)
ax.plot(x[y &gt; 0], y[y &gt; 0], z[y &gt; 0], lw=5, linestyle='--', color='green', zorder=4)



plt.axis('off')
plt.show()
</snippet></ROW><ROW><id>14825951</id><snippet>zorder</snippet></ROW><ROW><id>14825953</id><snippet>&gt;&gt;&gt; [item for item in line.split(',')[1:] if item.isdigit()][0]
'2503281'
</snippet></ROW><ROW><id>14826023</id><snippet>bjam</snippet></ROW><ROW><id>14826023</id><snippet>Makefile</snippet></ROW><ROW><id>14826023</id><snippet>-lboost_numpy</snippet></ROW><ROW><id>14826023</id><snippet>Makefile</snippet></ROW><ROW><id>14826023</id><snippet>PYTHON_VERSION = 2.7
PYTHON_INCLUDE = /usr/include/python$(PYTHON_VERSION)

BOOST_INC = /usr/local/include
BOOST_LIB = /usr/local/lib
OPENCV_LIB = $$(pkg-config --libs opencv)
OPENCV_INC = $$(pkg-config --cflags opencv)

TARGET = test

$(TARGET).so: $(TARGET).o
        g++ -shared -Wl,--export-dynamic \
        $(TARGET).o -L$(BOOST_LIB) -lboost_python -lboost_numpy \
        $(OPENCV_LIB) \
        -L/usr/lib/python$(PYTHON_VERSION)/config -lpython$(PYTHON_VERSION) \
        -o $(TARGET).so

$(TARGET).o: $(TARGET).cpp
        g++ -I$(PYTHON_INCLUDE) $(OPENCV_INC) -I$(BOOST_INC) -fPIC -c $(TARGET).cpp
</snippet></ROW><ROW><id>14826066</id><snippet>pyodbc</snippet></ROW><ROW><id>14826066</id><snippet>conn.autoCommit = True</snippet></ROW><ROW><id>14826066</id><snippet>conn.commit()</snippet></ROW><ROW><id>14826169</id><snippet>zip</snippet></ROW><ROW><id>14826169</id><snippet>from collections import defaultdict
d = defaultdict(list)
d['a'] = [1,2,3,4]
d['b'] = [4,5,6,7]
d['a'], d['b'] = zip(*map(lambda (x,y): (x,y) if x*y % 3 == 0 else (0,0),
                                                   zip(d['a'], d['b'])))
#out: defaultdict(&lt;type 'list'&gt;, {'a': (0, 0, 3, 0), 'b': (0, 0, 6, 0)})
</snippet></ROW><ROW><id>14826169</id><snippet>d['a'], d['b'] = map(list,zip(*map(lambda (x,y): (x,y) if x*y % 3 == 0 else (0,0), 
                                                           zip(d['a'], d['b']))))
#out: defaultdict(&lt;type 'list'&gt;, {'a': [0, 0, 3, 0], 'b': [0, 0, 6, 0]})
</snippet></ROW><ROW><id>14826195</id><snippet>/</snippet></ROW><ROW><id>14826195</id><snippet>/</snippet></ROW><ROW><id>14826195</id><snippet>static</snippet></ROW><ROW><id>14826195</id><snippet>views.py</snippet></ROW><ROW><id>14826195</id><snippet>settings.py</snippet></ROW><ROW><id>14826195</id><snippet>views.py</snippet></ROW><ROW><id>14826195</id><snippet>__init__.py</snippet></ROW><ROW><id>14826195</id><snippet>application_top/
    application/
          static/
              english_words.txt
          templates/
              main.html
          urls.py
          views.py
          settings.py
    runserver.py
</snippet></ROW><ROW><id>14826195</id><snippet>#settings.py
import os
# __file__ refers to the file settings.py 
APP_ROOT = os.path.dirname(os.path.abspath(__file__))   # refers to application_top
APP_STATIC = os.path.join(APP_ROOT, 'static')
</snippet></ROW><ROW><id>14826195</id><snippet>import os
from settings import APP_STATIC
with open(os.path.join(APP_STATIC, 'english_words.txt')) as f:
    f.read()
</snippet></ROW><ROW><id>14826269</id><snippet>import matplotlib.pyplot as plt
dct = {'list_1' : [1,2,4,3,1],'list_2' : [2,4,5,1,2],'list_3' : [1,1,3,4,6],'list_4' : [1,1,2,2,1]}

xs = [0,1,2,3,4]


for i in [1,2,3,4]:
    plt.plot(xs,dct['list_%s' %i], label='%s data' % i)

plt.legend()

plt.show()
</snippet></ROW><ROW><id>14826269</id><snippet>legend</snippet></ROW><ROW><id>14826269</id><snippet>legend</snippet></ROW><ROW><id>14826269</id><snippet>axes</snippet></ROW><ROW><id>14826269</id><snippet>kwarg</snippet></ROW><ROW><id>14826269</id><snippet>label</snippet></ROW><ROW><id>14826269</id><snippet>plot</snippet></ROW><ROW><id>14826269</id><snippet>legend</snippet></ROW><ROW><id>14826594</id><snippet>import random

def gen_random_data(inputfile):
    with open(inputfile, "r") as f:
        column_a, column_b = zip(*(line.strip().split() for line in f))

    for a, b in zip(column_a, column_b):
        r = random.sample(column_b, 2)
        while b in r: # resample if we hit a duplicate of the original pair
            r = random.sample(column_b, 2)

        yield a, r[0]
        yield a, r[1]
</snippet></ROW><ROW><id>14826889</id><snippet>os.path.join</snippet></ROW><ROW><id>14826889</id><snippet>list</snippet></ROW><ROW><id>14826889</id><snippet>*</snippet></ROW><ROW><id>14826889</id><snippet>&gt;&gt;&gt; s = "c:/,home,foo,bar,some.txt".split(",")
&gt;&gt;&gt; os.path.join(*s)
'c:/home\\foo\\bar\\some.txt'
</snippet></ROW><ROW><id>14827655</id><snippet>if 'class' in para</snippet></ROW><ROW><id>14827655</id><snippet>for para in paragraphs:
    if para.has_key('class'):
        if para['class'][0] == 'end': # Notice that I put [0], as para['class'] is a list.
            break
</snippet></ROW><ROW><id>14827666</id><snippet>objects = ndb.get_multi([ndb.Key(Model, k) for k in ids])
</snippet></ROW><ROW><id>14828628</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('soap.xml')    

print tree.find('.//{http://tempuri.org/wsSalesQuotation/Service1}LoginResult').text


&gt;&gt;45eeadF43423KKmP33
</snippet></ROW><ROW><id>14828782</id><snippet>print a</snippet></ROW><ROW><id>14828782</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>14828782</id><snippet>__name__</snippet></ROW><ROW><id>14828782</id><snippet>'__main__'</snippet></ROW><ROW><id>14828782</id><snippet>__name__</snippet></ROW><ROW><id>14828782</id><snippet>print a</snippet></ROW><ROW><id>14828782</id><snippet>from file1 import a</snippet></ROW><ROW><id>14828782</id><snippet>from config import filename</snippet></ROW><ROW><id>14828782</id><snippet>utils</snippet></ROW><ROW><id>14828782</id><snippet>filename</snippet></ROW><ROW><id>14828940</id><snippet>http://maya.tase.co.il/bursa/index.asp?view=search&amp;group_first_level=1&amp;company_group=3000&amp;arg_comp=&amp;srh_comp_lb=1349&amp;srh_from=2013-2-2&amp;srh_until=2013-2-12&amp;srh_anaf=-1&amp;srh_event=9999&amp;is_urgent=0&amp;srh_company_press=

GET /bursa/index.asp?view=search&amp;group_first_level=1&amp;company_group=3000&amp;arg_comp=&amp;srh_comp_lb=1349&amp;srh_from=2013-2-2&amp;srh_until=2013-2-12&amp;srh_anaf=-1&amp;srh_event=9999&amp;is_urgent=0&amp;srh_company_press= HTTP/1.1
Host: maya.tase.co.il
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Cookie: LBMaya=2; TS7c8b94=21efb14c7892000e308875477ef97a44a4e4ec0c353c57aa511a0278; TSe8eecf=577463c4dff39a4cd00ac387822be6f8a4e4ec0c353c57aa511a06039dbef3f4669e6cc2; ASPSESSIONIDAQRASAAB=APJODHLAKLHBLDBFFIJFBMKD; __utma=204212108.1708073596.1360658775.1360658775.1360658775.1; __utmb=204212108; __utmc=204212108; __utmz=204212108.1360658775.1.1.utmccn=(direct)|utmcsr=(direct)|utmcmd=(none); TSe8eecf_75=607adbfcad09964b707d73029eb6c75e:ywvw:I5Krl8W8:448224545; TSe8eecf_31=52f39e84b867da063487356c8141f112a4e4ec0c353c57aa000000000000000000fe8ffe0cfdc0fd2efc81fc6ffb87fafffa28f6def59df515f4baf390ef06ede6ed08eca7ec49eba1ea0ee757e533e49ce375dff9df7dded2de56dd9ddd87d93ad895d7a8d607d5cccfdfcfb5cf5bcef4ce70ce1acc14cc0ecb3ac91cc8b3c78ec621c445c1dfbbe4bb0abaa5ba4bb331b29eb1d7b1c8b0faad85ad6bacc4ac2aabc2ab2caa83aa6da317a2b8a1739ff09f1e9eb19e5f99b7995998f6981893e8918c90238fd68f388f0b8e978e798c678991897f88d0883e826181aa80057a967a8c72dd718870276b1f6b05635461ae60015be05a4f599e53db527451cf4bc64a69481743fd42524046362734f931eb30442f5f271326cd257021cd206217eb066202cf

HTTP/1.1 200 OK
Content-Length: 4323
Pragma: no-cache
Date: Tue, 12 Feb 2013 09:02:43 GMT
Connection: keep-alive
----------------------------------------------------------
http://maya.tase.co.il/bursa/index.asp?view=search&amp;group_first_level=1&amp;company_group=3000&amp;arg_comp=&amp;srh_comp_lb=1349&amp;srh_from=2013-2-2&amp;srh_until=2013-2-12&amp;srh_anaf=-1&amp;srh_event=9999&amp;is_urgent=0&amp;srh_company_press=

POST /bursa/index.asp?view=search&amp;group_first_level=1&amp;company_group=3000&amp;arg_comp=&amp;srh_comp_lb=1349&amp;srh_from=2013-2-2&amp;srh_until=2013-2-12&amp;srh_anaf=-1&amp;srh_event=9999&amp;is_urgent=0&amp;srh_company_press= HTTP/1.1
Host: maya.tase.co.il
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referer: http://maya.tase.co.il/bursa/index.asp?view=search&amp;group_first_level=1&amp;company_group=3000&amp;arg_comp=&amp;srh_comp_lb=1349&amp;srh_from=2013-2-2&amp;srh_until=2013-2-12&amp;srh_anaf=-1&amp;srh_event=9999&amp;is_urgent=0&amp;srh_company_press=
Cookie: LBMaya=2; TS7c8b94=21efb14c7892000e308875477ef97a44a4e4ec0c353c57aa511a0278; TSe8eecf=577463c4dff39a4cd00ac387822be6f8a4e4ec0c353c57aa511a06039dbef3f4669e6cc2; ASPSESSIONIDAQRASAAB=APJODHLAKLHBLDBFFIJFBMKD; __utma=204212108.1708073596.1360658775.1360658775.1360658775.1; __utmb=204212108; __utmc=204212108; __utmz=204212108.1360658775.1.1.utmccn=(direct)|utmcsr=(direct)|utmcmd=(none); TSe8eecf_75=b1977e80a3c5a7cb63469954c8ac6e05:lmnj:yjv3396F:69895458; TSe8eecf_31=52f39e84b867da063487356c8141f112a4e4ec0c353c57aa000000000000000000fe8ffe0cfdc0fd2efc81fc6ffb87fafffa28f6def59df515f4baf390ef06ede6ed08eca7ec49eba1ea0ee757e533e49ce375dff9df7dded2de56dd9ddd87d93ad895d7a8d607d5cccfdfcfb5cf5bcef4ce70ce1acc14cc0ecb3ac91cc8b3c78ec621c445c1dfbbe4bb0abaa5ba4bb331b29eb1d7b1c8b0faad85ad6bacc4ac2aabc2ab2caa83aa6da317a2b8a1739ff09f1e9eb19e5f99b7995998f6981893e8918c90238fd68f388f0b8e978e798c678991897f88d0883e826181aa80057a967a8c72dd718870276b1f6b05635461ae60015be05a4f599e53db527451cf4bc64a69481743fd42524046362734f931eb30442f5f271326cd257021cd206217eb066202cf
Content-Type: application/x-www-form-urlencoded
Content-Length: 69
TSe8eecf_id=1&amp;TSe8eecf_md=1&amp;TSe8eecf_rf=0&amp;TSe8eecf_ct=0&amp;TSe8eecf_pd=0
HTTP/1.1 200 OK
Content-Type: text/html
X-Maya: 2
Vary: Accept-Encoding
X-Powered-By: ASP.NET
Content-Encoding: gzip
Date: Tue, 12 Feb 2013 09:02:45 GMT
Content-Length: 10652
Connection: keep-alive
</snippet></ROW><ROW><id>14829220</id><snippet>run()</snippet></ROW><ROW><id>14829220</id><snippet>__init__()</snippet></ROW><ROW><id>14829220</id><snippet>class UseThread(threading.Thread):
    def __init__(self, devID):
        super(UseThread, self).__init__()
        self.devID = devID
    def run(self):
        ## threaded stuff ....
        ## threaded stuff ....
        pass

## ...
for devID in line:
   t=UseThread(devID) # this calls UseThread.__init__()
   t.start()          # this creates a new thread that will run UseThread.run()
</snippet></ROW><ROW><id>14829328</id><snippet>key</snippet></ROW><ROW><id>14829328</id><snippet>sorted</snippet></ROW><ROW><id>14829328</id><snippet>&gt;&gt;&gt; tuple1=[(1, 3), (3, 2), (2, 1)]
&gt;&gt;&gt; output = sorted(tuple1, key=lambda x: x[-1])
&gt;&gt;&gt; print output
[(2, 1), (3, 2), (1, 3)]
</snippet></ROW><ROW><id>14829328</id><snippet>sorted</snippet></ROW><ROW><id>14829328</id><snippet>list.sort</snippet></ROW><ROW><id>14829328</id><snippet>key</snippet></ROW><ROW><id>14829367</id><snippet>raw_input()</snippet></ROW><ROW><id>14829367</id><snippet>input()</snippet></ROW><ROW><id>14829367</id><snippet>str = input("enter ur text here: \n")
</snippet></ROW><ROW><id>14829367</id><snippet>input()</snippet></ROW><ROW><id>14829367</id><snippet>eval(input())</snippet></ROW><ROW><id>14829367</id><snippet>s = eval(input("enter ur choice "))
</snippet></ROW><ROW><id>14829367</id><snippet>print()</snippet></ROW><ROW><id>14829367</id><snippet>print("1.See the file\n")
print("2.Exit\n")

print(i)

print("thank you ")
</snippet></ROW><ROW><id>14829605</id><snippet>def foo:
    if termination-condition
        return value
    else
        new-value = some-calculations
        return foo(new-value)
</snippet></ROW><ROW><id>14829605</id><snippet>else</snippet></ROW><ROW><id>14829605</id><snippet>def foo:
    if termination-condition
        return value
    else
        return foo(some-calculations)
</snippet></ROW><ROW><id>14829605</id><snippet>return foo(...)</snippet></ROW><ROW><id>14829605</id><snippet>lambda</snippet></ROW><ROW><id>14829605</id><snippet>def foo:
    if termination-condition
        return value
    else
        return lambda: foo(some-calculations)
</snippet></ROW><ROW><id>14829605</id><snippet>foo</snippet></ROW><ROW><id>14829605</id><snippet>def foo-interface:
    # get a thunk or a terminal
    t = foo()  
    # while it's a thunk...
    while callable(t):
        t = t() # ...carry it out
    # return the terminal
    return t
</snippet></ROW><ROW><id>14829605</id><snippet>def fac(n):
    return 1 if n &lt; 2 else n * fac(n - 1)

&gt; fac(3000)
&gt; RuntimeError: maximum recursion depth exceeded
</snippet></ROW><ROW><id>14829605</id><snippet>def f(n, acc=1):
    return acc if n &lt; 2 else f(n - 1, acc * n)
</snippet></ROW><ROW><id>14829605</id><snippet>def f(n, acc):
    return acc if n &lt; 2 else lambda: f(n - 1, acc * n)
</snippet></ROW><ROW><id>14829605</id><snippet>def fac(n):

    def f(n, acc):
        return acc if n &lt; 2 else lambda: f(n - 1, acc * n)

    t = f(n, 1)
    while callable(t):
        t = t()
    return t
</snippet></ROW><ROW><id>14829605</id><snippet>&gt; fac(3000)
&gt; 41493596034....
</snippet></ROW><ROW><id>14829605</id><snippet>lambda</snippet></ROW><ROW><id>14829802</id><snippet>tag['class'][0]
</snippet></ROW><ROW><id>14830142</id><snippet>d</snippet></ROW><ROW><id>14830142</id><snippet>print [v for k,v in d.iteritems() if 'garlic' in k]
</snippet></ROW><ROW><id>14830142</id><snippet>['3']
</snippet></ROW><ROW><id>14830142</id><snippet>print next(v for k,v in d.iteritems() if 'garlic' in k)
</snippet></ROW><ROW><id>14830142</id><snippet>'3'
</snippet></ROW><ROW><id>14830142</id><snippet>StopIterationError</snippet></ROW><ROW><id>14830142</id><snippet>print next((v for k,v in d.iteritems() if 'garlic' in k), None)
</snippet></ROW><ROW><id>14830142</id><snippet>None</snippet></ROW><ROW><id>14830190</id><snippet>listen()</snippet></ROW><ROW><id>14830310</id><snippet>setAttribute</snippet></ROW><ROW><id>14830310</id><snippet>from xml.dom.minidom import parseString
l = '&lt;Lg Cookie=""/&gt;'
dom = xml.dom.minidom.parseString(l)
L = dom.getElementsByTagName('Lg')[0]
L.setAttribute('Cookie', 'test')
print (L.toxml())
</snippet></ROW><ROW><id>14830456</id><snippet>re.sub()</snippet></ROW><ROW><id>14830456</id><snippet>stripped = re.sub(r'(height|width)=\"\d+\"', "", old_html)
</snippet></ROW><ROW><id>14830570</id><snippet>d['A'], d['B'] = d['B'], d['A']
</snippet></ROW><ROW><id>14830622</id><snippet>class Milestone(models.Model):
    project = ForeignKey(Project, related_name='milestones')
</snippet></ROW><ROW><id>14830622</id><snippet>class ProjectResource(ModelResource):
  milestones = fields.ToManyField('ProjectTrackerServer.projects.api.MilestoneResource', 'projects', full=True)
class Meta:
    queryset = Project.objects.all()
    resource_name = 'project'


class MilestoneResource(ModelResource):
    project = fields.ForeignKey(Project, 'project')

    class Meta:
        queryset = Milestone.objects.all()
        resource_name = 'milestone'
</snippet></ROW><ROW><id>14830911</id><snippet>fetch</snippet></ROW><ROW><id>14830911</id><snippet>finish</snippet></ROW><ROW><id>14830911</id><snippet>fetch</snippet></ROW><ROW><id>14830911</id><snippet>import tornado.httpserver                                                    
import tornado.ioloop                                                        
import tornado.options                                                       
import tornado.web                                                           
import tornado.httpclient                                                    

from tornado.options import define, options                                  
define("port", default=8000, help="run on the given port", type=int)         

config = {                                                                   
    'proxy_host': '58.59.21.228',                                            
    'proxy_port': 25,                                                        
    'proxy_username': 'yz',                                                  
    'proxy_password': 'fangbinxingqusi',                                     
}                                                                            

tornado.httpclient.AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")


class IndexHandler(tornado.web.RequestHandler):                              

    @tornado.web.asynchronous                                                
    def get(self):                                                           
        client = tornado.httpclient.AsyncHTTPClient()                        
        client.fetch("http://twitter.com/", self.handle_request, **config)   

    def handle_request(self, response):                                      
        if response.error:                                                   
            print("Error:", response.error)                                  
        else:                                                                
            self.write(response.body)                                        
        self.finish()                                                        


if __name__ == "__main__":                                                   
    tornado.options.parse_command_line()                                     
    app = tornado.web.Application(handlers=[(r"/", IndexHandler)], debug=True)
    httpserver = tornado.httpserver.HTTPServer(app)                          
    httpserver.listen(options.port)                                          
    tornado.ioloop.IOLoop.instance().start()             
</snippet></ROW><ROW><id>14830911</id><snippet>class IndexHandler(tornado.web.RequestHandler):                              

    @tornado.web.asynchronous                                                
    @tornado.gen.engine                                                      
    def get(self):                                                           
        client = tornado.httpclient.AsyncHTTPClient()                        
        response = yield tornado.gen.Task(client.fetch, "http://twitter.com/",
                                        **config)                            
        if response.error:                                                   
            self.write("Error: %s" % response.error)                         
        else:                                                                
            self.write(response.body)                                        

        self.finish()                                                        
</snippet></ROW><ROW><id>14831018</id><snippet>savefig</snippet></ROW><ROW><id>14831018</id><snippet>savefig</snippet></ROW><ROW><id>14831018</id><snippet>format = "png"
sio = cStringIO.StringIO()
pyplot.savefig(sio, format=format)
print "Content-Type: image/%s\n" % format
msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY) # Needed this on windows, IIS
sys.stdout.write(sio.getvalue())
</snippet></ROW><ROW><id>14831018</id><snippet>print "Content-Type: text/html\n"
print """&lt;html&gt;&lt;body&gt;
...a bunch of text and html here...
&lt;img src="data:image/png;base64,%s"/&gt;
...more text and html...
&lt;/body&gt;&lt;/html&gt;""" % sio.getvalue().encode("base64").strip()
</snippet></ROW><ROW><id>14831340</id><snippet>putpixel</snippet></ROW><ROW><id>14831340</id><snippet>ImageDraw.rectangle()</snippet></ROW><ROW><id>14831340</id><snippet>ellipse()</snippet></ROW><ROW><id>14831340</id><snippet>import Image
import ImageDraw

img = Image.new("RGB", (400,400), "white")
draw = ImageDraw.Draw(img)

coords = [(100,70), (220, 310), (200,200)]
dotSize = 2

for (x,y) in coords:
    draw.rectangle([x,y,x+dotSize-1,y+dotSize-1], fill="black")

img.show()
</snippet></ROW><ROW><id>14831401</id><snippet>Popen('parted -s /dev/sdh mklabel gpt', shell=True)
</snippet></ROW><ROW><id>14831413</id><snippet>urllib</snippet></ROW><ROW><id>14831640</id><snippet>import openpyxl  
from openpyxl import load_workbook

def find_row(today, ws):
    for a,b,c,d in ws.rows():
        if today == a.internal_value:
            return (a, b, c, d)
    raise someException('row not found')

wb = load_workbook(filename = 'standby.xlsx', use_iterators = True)  
ws = wb.get_sheet_by_name(name = 'Sheet1') # ws is now an IterableWorksheet
today = '' #whatever date format you're using
try:
    row = find_row(today, ws) 
except someException:
    # handle exception
</snippet></ROW><ROW><id>14831640</id><snippet>def find_row(today, ws):
    for a,b,c,d in ws.iter_rows():
        if today == a.internal_value:
            return (a, b, c, d)
    raise someException('row not found')
</snippet></ROW><ROW><id>14831640</id><snippet>use_iterators = True</snippet></ROW><ROW><id>14831640</id><snippet>iter_rows()</snippet></ROW><ROW><id>14831640</id><snippet>.rows</snippet></ROW><ROW><id>14831861</id><snippet>&gt;&gt;&gt; list_of_tuples = [(1, 2), (4, 5)]
&gt;&gt;&gt; list_of_lists = [list(elem) for elem in list_of_tuples]

&gt;&gt;&gt; list_of_lists
[[1, 2], [4, 5]]
</snippet></ROW><ROW><id>14831904</id><snippet>BROKER_HEARTBEAT=0</snippet></ROW><ROW><id>14832001</id><snippet>filter</snippet></ROW><ROW><id>14832125</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(string.ascii_letters + string.digits)
'v'
</snippet></ROW><ROW><id>14832469</id><snippet>Settings.COOKIE_SECRET</snippet></ROW><ROW><id>14832469</id><snippet>unicode</snippet></ROW><ROW><id>14832469</id><snippet>str</snippet></ROW><ROW><id>14832469</id><snippet>Settings.COOKIE_SECRET</snippet></ROW><ROW><id>14832469</id><snippet>str</snippet></ROW><ROW><id>14832469</id><snippet>unicode</snippet></ROW><ROW><id>14832731</id><snippet>def a():
  return 1

a.command_name = 'get_one'
</snippet></ROW><ROW><id>14832731</id><snippet>import inspect #from standard library

import plugin

mapping = {}

for v in plugin.__dict__.itervalues():
    if inspect.isfunction(v) and v.hasattr('command_name'):
        mapping[v.command_name] = v
</snippet></ROW><ROW><id>14832910</id><snippet>- url: /static/images/(.*\.(gif|ico|jpeg|jpg|png))
  static_files: static/images/\1
  upload: static/images/(.*\.(gif|ico|jpeg|jpg|png))
</snippet></ROW><ROW><id>14833038</id><snippet>itertools.chain</snippet></ROW><ROW><id>14833038</id><snippet>list comprehension</snippet></ROW><ROW><id>14833038</id><snippet>from itertools import chain

list(chain(*m))  # shortest
# or:
list(chain.from_iterable(m)) # more efficient  
</snippet></ROW><ROW><id>14833038</id><snippet>comprehension</snippet></ROW><ROW><id>14833038</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>14833038</id><snippet>[item for subl in m for item in subl]
</snippet></ROW><ROW><id>14833038</id><snippet>[item                         #result = []
    for subl in m             #for subl in m:  
        for item in subl]     #    for item in subl:
                              #        result.append(item)
</snippet></ROW><ROW><id>14833077</id><snippet>transpose</snippet></ROW><ROW><id>14833077</id><snippet>rotate</snippet></ROW><ROW><id>14833077</id><snippet>composite</snippet></ROW><ROW><id>14833077</id><snippet>import Image
import ImageDraw

imsize = 400
img = Image.new("L", (imsize,imsize), "white")
draw = ImageDraw.Draw(img)

coords = [(100,70), (220, 310), (200,200), (80,20)]
dotSize = 50

for (x,y) in coords:
    draw.rectangle([x,y,x+dotSize-1,y+dotSize-1], fill="black")

## mirror image along the diagonal
img2 = img.rotate(90).transpose(Image.FLIP_TOP_BOTTOM)

## mask
mask = Image.new("L", (imsize,imsize), "black")
maskdraw = ImageDraw.Draw(mask)
# draw a triangle on the mask dividing the image along the diagonal
maskdraw.polygon([(0,0),(0,imsize),(imsize,imsize)], fill="white")

# show the mask overlaid on the original image
Image.blend(mask, img, 0.5).show()

# compute and show the blended result
img3 = Image.composite(img, img2, mask)
img3.show()
</snippet></ROW><ROW><id>14833717</id><snippet>&gt;&gt;&gt; print('E\xe9ntalige affiche in Halle !!')
Eéntalige affiche in Halle !!
&gt;&gt;&gt; 'E\xe9ntalige affiche in Halle !!'.encode('utf8')
b'E\xc3\xa9ntalige affiche in Halle !!'
&gt;&gt;&gt; print('E\xe9ntalige affiche in Halle !!'.encode('utf8').decode('latin1'))
EÃ©ntalige affiche in Halle !!
</snippet></ROW><ROW><id>14833717</id><snippet>Ã</snippet></ROW><ROW><id>14833717</id><snippet>©</snippet></ROW><ROW><id>14833921</id><snippet>if __name__ == '__main__':
  instance = MyClass()
</snippet></ROW><ROW><id>14833921</id><snippet>class MyClass(object):
    def __init__(self):
        #myClassObject= MyClass() # Causes recursion error.
        #myClassObject.greet() # You should not be accessing your instance method this way
        self.greet()


    def greet(self):
        print("stackoverflow is the best !!!")

if __name__ == '__main__':
    instance = MyClass()
</snippet></ROW><ROW><id>14834480</id><snippet>self.product_urls.extend(hxs.select('//div[@id="product-list"]//div[@class="product-images"]/table/tr[1]//a').extract())
</snippet></ROW><ROW><id>14834500</id><snippet>.stat()</snippet></ROW><ROW><id>14834500</id><snippet>info = self.sftp.stat(destination)
print info.st_size
</snippet></ROW><ROW><id>14834500</id><snippet>.stat()</snippet></ROW><ROW><id>14834500</id><snippet>.lstat()</snippet></ROW><ROW><id>14834500</id><snippet>SFTPAttributes</snippet></ROW><ROW><id>14834500</id><snippet>.st_size</snippet></ROW><ROW><id>14835054</id><snippet>getattr()</snippet></ROW><ROW><id>14835054</id><snippet>print dir(getattr(sys, function))
</snippet></ROW><ROW><id>14835054</id><snippet>dir()</snippet></ROW><ROW><id>14835059</id><snippet>self.ui = uic.loadUi('main_window.ui')
self.ui.show()
</snippet></ROW><ROW><id>14835059</id><snippet>ui</snippet></ROW><ROW><id>14835059</id><snippet>win</snippet></ROW><ROW><id>14835059</id><snippet>win</snippet></ROW><ROW><id>14835059</id><snippet>closeEvent</snippet></ROW><ROW><id>14835059</id><snippet>loadUi</snippet></ROW><ROW><id>14835059</id><snippet>.ui</snippet></ROW><ROW><id>14835059</id><snippet>PyQt4.uic.loadUi(uifile[, baseinstance=None[, package='']])
</snippet></ROW><ROW><id>14835059</id><snippet>import sys
from PyQt4 import QtGui, QtCore, uic

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)

        uic.loadUi('main_window.ui', self)

        self.btnExit.clicked.connect(self.close)
        self.actionExit.triggered.connect(self.close)

    def closeEvent(self, event):
        print("event")
        reply = QtGui.QMessageBox.question(self, 'Message',
            "Are you sure to quit?", QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)

        if reply == QtGui.QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


def main():
    app = QtGui.QApplication(sys.argv)
    win = MainWindow()
    win.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14835059</id><snippet>show</snippet></ROW><ROW><id>14835059</id><snippet>__init__</snippet></ROW><ROW><id>14835059</id><snippet>main</snippet></ROW><ROW><id>14835284</id><snippet>object</snippet></ROW><ROW><id>14835284</id><snippet>@property</snippet></ROW><ROW><id>14835284</id><snippet>@classmethod</snippet></ROW><ROW><id>14835284</id><snippet>int</snippet></ROW><ROW><id>14835284</id><snippet>list</snippet></ROW><ROW><id>14835284</id><snippet>object</snippet></ROW><ROW><id>14835284</id><snippet>object</snippet></ROW><ROW><id>14835328</id><snippet>img.save("a.jpg","JPEG")

img2 = img.resize( (800, 800))
img2.save("b.jpg","JPEG")
</snippet></ROW><ROW><id>14835381</id><snippet>    *rrule = PG_GETARG_CHAR(0);
</snippet></ROW><ROW><id>14835381</id><snippet>rrule</snippet></ROW><ROW><id>14835381</id><snippet>time_t   *result[count]; /* output array */

icalrecur_expand_recurrence(rrule, start, count, *result);
</snippet></ROW><ROW><id>14835381</id><snippet>result</snippet></ROW><ROW><id>14835381</id><snippet>time_t</snippet></ROW><ROW><id>14835381</id><snippet>time_t*</snippet></ROW><ROW><id>14835381</id><snippet>result</snippet></ROW><ROW><id>14835381</id><snippet>*result</snippet></ROW><ROW><id>14835543</id><snippet>load data local</snippet></ROW><ROW><id>14835543</id><snippet>query = """ LOAD DATA INFILE 'c:\\example.csv' INTO TABLE new_table FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '"' Lines terminated by '\n' IGNORE 1 LINES """
</snippet></ROW><ROW><id>14835543</id><snippet>query = """ LOAD DATA LOCAL INFILE 'c:\\example.csv' INTO TABLE new_table FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '"' Lines terminated by '\n' IGNORE 1 LINES """
</snippet></ROW><ROW><id>14835559</id><snippet>scipy</snippet></ROW><ROW><id>14835559</id><snippet>import numpy as np
from scipy.spatial.distance import cdist
from scipy.optimize import fmin
import scipy

# Draw a fuzzy circle to test
N = 15
THETA = np.random.random(15)*2*np.pi
R     = 1.5 + (.1*np.random.random(15) - .05)
X = R*np.cos(THETA) + 5
Y = R*np.sin(THETA) - 2

# Choose the inital center of fit circle as the CM
xm = X.mean()
ym = Y.mean()

# Choose the inital radius as the average distance to the CM
cm = np.array([xm,ym]).reshape(1,2)
rm = cdist(cm, np.array([X,Y]).T).mean()

# Best fit a circle to these points
def err((w,v,r)):
    pts = [np.linalg.norm([x-w,y-v])-r for x,y in zip(X,Y)]
    return (np.array(pts)**2).sum()

xf,yf,rf = scipy.optimize.fmin(err,[xm,ym,rm])  

# Viszualize the results
import pylab as plt
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

# Show the inital guess circle
circ = plt.Circle((xm, ym), radius=rm, color='y',lw=2,alpha=.5)
ax.add_patch(circ)

# Show the fit circle
circ = plt.Circle((xf, yf), radius=rf, color='b',lw=2,alpha=.5)
ax.add_patch(circ)

plt.axis('equal')
plt.scatter(X,Y)
plt.show()
</snippet></ROW><ROW><id>14835647</id><snippet>from lxml import etree

doc = etree.parse('thisxmlfile.xml')

# There is only one "season" element
season = doc.find('season').get('season')     

# XPath query relative to root node
for conference in doc.xpath('conference'):
    # XPath query relative to "conference" node     
    for team in conference.xpath('division/team'):     
        print season, conference.get('label'),
        print team.get('city'), team.get('name'), team.get('alias')
</snippet></ROW><ROW><id>14835705</id><snippet>class classsmoke(pygame.Rect):
    'classsmoke(location)'
    def __init__(self, location):
        self.width=1
        self.height=1
        self.center=location
    def update(self):
        self.centery-=3#You might want to increase or decrease this
        self.centerx+=random.randint(-2, 2)#You might want to raise or lower this as well

#use this to create smoke
smoke=[]
for i in range(20):
    smoke.append(classsmoke(insert location here))
#put this somewhere within your game loop
for i in smoke:
    i.update()
    if i.centery&lt;0:
        smoke.remove(i)
    else:
        pygame.draw.rect(screen, GREY, i)
</snippet></ROW><ROW><id>14835705</id><snippet>class classsmoke():
    'classsmoke(location)'
    def __init__(self, location):
        self.center=location
    def update(self):
        self.center[1]-=3
        self.center[0]+=random.randint(-2, 2)

#to create smoke
smoke=[]
for i in range(20):
    smoke.append(classsmoke(insert location here))
#put inside game loop
for i in smoke:
    i.update()
    if i.centery&lt;0:
        smoke.remove(i)
    else:
        pygame.draw.rect(screen, GREY, (i.center[0], i.center[1], 1, 1))
</snippet></ROW><ROW><id>14835705</id><snippet>#to create smoke:
smoke=[]
for i in range(20):
    smoke.append(insert location here)
#put within your game loop
for i in smoke:
    i[1]-=3
    i[0]+=random.randint(-2, 2)
    if i[1]&lt;0:
        smoke.remove(i)
    else:
        pygame.draw.rect(screen, GREY, (i[0], i[1], 1, 1))
</snippet></ROW><ROW><id>14835834</id><snippet>Minecraft</snippet></ROW><ROW><id>14835834</id><snippet>Minecraft</snippet></ROW><ROW><id>14835834</id><snippet>minecraft-pi</snippet></ROW><ROW><id>14835834</id><snippet>Minecraft</snippet></ROW><ROW><id>14835834</id><snippet>import mcpi.minecraft as minecraft
import threading

class BlockCheckThread(threading.Thread):
    def run(self):
        mc = minecraft.Minecraft.create()
        while True:
            event = mc.events.pollBlockHits()

class WinningCheckThread(threading.Thread):
    def run(self):
        mc = minecraft.Minecraft.create()
        while True:
            blockTest = mc.getBlock(1, 1, 1,) == 50

def main():
    WinningCheckThread().start() 
    BlockCheckThread().start()   
</snippet></ROW><ROW><id>14835877</id><snippet>list()</snippet></ROW><ROW><id>14835877</id><snippet>list(cursor.fetchall())
</snippet></ROW><ROW><id>14835877</id><snippet>(0, first_row), (1, second_row)</snippet></ROW><ROW><id>14835877</id><snippet>list()</snippet></ROW><ROW><id>14835877</id><snippet>[]</snippet></ROW><ROW><id>14835956</id><snippet>queryset</snippet></ROW><ROW><id>14835956</id><snippet>__init__</snippet></ROW><ROW><id>14835956</id><snippet>post_save</snippet></ROW><ROW><id>14835956</id><snippet>User</snippet></ROW><ROW><id>14835956</id><snippet>UserProfile</snippet></ROW><ROW><id>14835956</id><snippet>user.get_profile()</snippet></ROW><ROW><id>14835956</id><snippet>ModelForm</snippet></ROW><ROW><id>14835956</id><snippet>UserProfile</snippet></ROW><ROW><id>14835956</id><snippet>people_interested</snippet></ROW><ROW><id>14836050</id><snippet>None</snippet></ROW><ROW><id>14836050</id><snippet>None</snippet></ROW><ROW><id>14836111</id><snippet>ListView</snippet></ROW><ROW><id>14836111</id><snippet>get_queryset()</snippet></ROW><ROW><id>14836111</id><snippet>get()</snippet></ROW><ROW><id>14836111</id><snippet>post()</snippet></ROW><ROW><id>14836111</id><snippet>urlpatterns = patterns('',
    #...
    (r'^search/$', 'searchapp.views.search'),
)
</snippet></ROW><ROW><id>14836111</id><snippet>def search(request):
    if request.method == 'POST':
        form = SearchForm(request.POST)
        if form.is_valid():
            my_query = form.cleaned_data['myquery']
            object_list = YourModel.objects.filter(# some operation involving my_query)
            return render_to_response('search_results.html', {'object_list': object_list})
     else:
        form = SearchForm()
     render_to_response('search_form.html', {'form': form})
</snippet></ROW><ROW><id>14836111</id><snippet>form.fields['myquery'].clean()</snippet></ROW><ROW><id>14836111</id><snippet>is_valid()</snippet></ROW><ROW><id>14836111</id><snippet>form.cleaned_data['myquery']</snippet></ROW><ROW><id>14836111</id><snippet>render_to_response</snippet></ROW><ROW><id>14836111</id><snippet>return render_to_response('search.html', {'object_list': object_list, 'myquery': my query})
</snippet></ROW><ROW><id>14836111</id><snippet>thequery</snippet></ROW><ROW><id>14836111</id><snippet>thequery</snippet></ROW><ROW><id>14836111</id><snippet>&lt;form method='post'&gt;</snippet></ROW><ROW><id>14836111</id><snippet>request.GET</snippet></ROW><ROW><id>14836359</id><snippet>rounded = numpy.array(myarray, dtype='datetime64[s]')</snippet></ROW><ROW><id>14836359</id><snippet>rounded = myarray.astype('datetime64[s]')</snippet></ROW><ROW><id>14836359</id><snippet>rounded = numpy.array(myarray, dtype='datetime64[m]')
</snippet></ROW><ROW><id>14836456</id><snippet>a,b = b,a</snippet></ROW><ROW><id>14836456</id><snippet>b,a</snippet></ROW><ROW><id>14836456</id><snippet>b</snippet></ROW><ROW><id>14836456</id><snippet>a</snippet></ROW><ROW><id>14836456</id><snippet>a</snippet></ROW><ROW><id>14836456</id><snippet>b</snippet></ROW><ROW><id>14836456</id><snippet>b</snippet></ROW><ROW><id>14836456</id><snippet>a</snippet></ROW><ROW><id>14836456</id><snippet>a</snippet></ROW><ROW><id>14836456</id><snippet>b</snippet></ROW><ROW><id>14836651</id><snippet>x=raw_input("New value for x: ")
</snippet></ROW><ROW><id>14836651</id><snippet>x</snippet></ROW><ROW><id>14836990</id><snippet>get_object()</snippet></ROW><ROW><id>14836990</id><snippet>class CourseUpdateView(UpdateView):
    # [...] your dispatch method

    def get_object(self):
        # it doesn't matter how many times get_object is called per request
        # it should not do more than one request
        if not hasattr(self, '_object'):
            self._object = super(CourseUpdateView, self).get_object()
        return self._object
</snippet></ROW><ROW><id>14837164</id><snippet>Fruits.crunchy</snippet></ROW><ROW><id>14837164</id><snippet>Food.Fruits.crunchy</snippet></ROW><ROW><id>14837164</id><snippet>food</snippet></ROW><ROW><id>14837164</id><snippet>import food</snippet></ROW><ROW><id>14837164</id><snippet>food.Salads()</snippet></ROW><ROW><id>14837250</id><snippet>proc.args</snippet></ROW><ROW><id>14837250</id><snippet>proc = subprocess.Popen(....)
print("the commandline is {}".format(proc.args))
</snippet></ROW><ROW><id>14837250</id><snippet>args</snippet></ROW><ROW><id>14837250</id><snippet>_execute_child</snippet></ROW><ROW><id>14837250</id><snippet>proc = subprocess.Popen(shlex.split(cmd))
print "the commandline is %s" % cmd
</snippet></ROW><ROW><id>14837250</id><snippet>shlex.split(cmd)</snippet></ROW><ROW><id>14837250</id><snippet>cmd</snippet></ROW><ROW><id>14837250</id><snippet>subprocess.list2cmdline</snippet></ROW><ROW><id>14837250</id><snippet>In [14]: import subprocess

In [15]: import shlex

In [16]: cmd = 'foo -a -b --bar baz'

In [17]: shlex.split(cmd)
Out[17]: ['foo', '-a', '-b', '--bar', 'baz']

In [18]: subprocess.list2cmdline(['foo', '-a', '-b', '--bar', 'baz'])
Out[19]: 'foo -a -b --bar baz'
</snippet></ROW><ROW><id>14837434</id><snippet>getit.py</snippet></ROW><ROW><id>14837434</id><snippet>proxychains google-chrome</snippet></ROW><ROW><id>14837434</id><snippet>proxychains python getit.py</snippet></ROW><ROW><id>14837434</id><snippet>proxychains getit.py</snippet></ROW><ROW><id>14838104</id><snippet>time</snippet></ROW><ROW><id>14838104</id><snippet>time</snippet></ROW><ROW><id>14838104</id><snippet>time</snippet></ROW><ROW><id>14838104</id><snippet>time</snippet></ROW><ROW><id>14838163</id><snippet>VOID</snippet></ROW><ROW><id>14838163</id><snippet>VOID</snippet></ROW><ROW><id>14838163</id><snippet>void</snippet></ROW><ROW><id>14838264</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14838346</id><snippet>renderer_dict = dict(name=name,data=jsdata)
</snippet></ROW><ROW><id>14838346</id><snippet>data</snippet></ROW><ROW><id>14838346</id><snippet>jsdata</snippet></ROW><ROW><id>14838346</id><snippet>${structure:data}</snippet></ROW><ROW><id>14838346</id><snippet>renderer_dict</snippet></ROW><ROW><id>14838463</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def  combine(item):
    # Easy return if not a list: element itself
    if type(item) != type([]):
        return item
    # else call recursion
    first_ret = [(i.items()[0][0], combine(i.items()[0][1])) for i in item]

    # Here we group by same keys if any ('ROOT', for instance)
    count_keys = defaultdict(list)
    for couple in first_ret:
        count_keys[couple[0]].append(couple[1])
    return dict((k, v if len(v) &gt; 1 else v[0]) for k, v in count_keys.iteritems())
</snippet></ROW><ROW><id>14838463</id><snippet>ROOT</snippet></ROW><ROW><id>14838463</id><snippet>&gt;&gt;&gt; pprint(combine(l))
{'ROOT': [{'SecondElem': '5.0.0.1',
           'ThirdElem': '127.3.15.1',
           'firstElem': 'gc-3/1/0',
           'function': 'session',
           'hw': '0.0.0.0',
           'index': 16,
           'resources': {'cpu-info': {'cpu-avg-load': 1,
                                      'cpu-peak-load': 1},
                         'memory-total': 1,
                         'memory-used': 2},
           'sw': '1.50.1.3'},
          {'SecondElem': '5.0.0.2',
           'ThirdElem': '127.3.4.1',
           'firstElem': 'gc-4/1/0',
           'function': 'stand',
           'hw': '0.0.0.0',
           'index': 5,
           'resources': {'cpu-info': {'cpu-avg-load': 1,
                                      'cpu-peak-load': 1},
                         'memory-total': 1,
                         'memory-used': 2},
           'sw': '1.50.1.3'}]}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14838677</id><snippet>sudo timeout</snippet></ROW><ROW><id>14838677</id><snippet>sudo</snippet></ROW><ROW><id>14838677</id><snippet>nohup python B.py</snippet></ROW><ROW><id>14838677</id><snippet>sudo nohup python B.py</snippet></ROW><ROW><id>14838689</id><snippet>methodX</snippet></ROW><ROW><id>14838689</id><snippet>class A:
    def methodA(self):
        return 5

class B:
    def methodB(self):
        return 10

class X():
    @classmethod
    def new(cls, baseclass):
        if baseclass == A:
            return AX()
        elif baseclass == B:
            return BX()
        else: raise Exception("Not supported baseclass %s!" % str(baseclass))

    def methodX(self):
        return 42

class AX(A, X):
    pass

class BX(B, X):
    pass
</snippet></ROW><ROW><id>14838689</id><snippet>X.new</snippet></ROW><ROW><id>14838689</id><snippet>&gt;&gt;&gt; ax = X.new(A)
&gt;&gt;&gt; ax.methodA() # returns 5
5
&gt;&gt;&gt; ax.methodX() # returns 42
42
&gt;&gt;&gt; ax.methodB() # methodB not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: AX instance has no attribute 'methodB'
&gt;&gt;&gt; bx = X.new(B)
&gt;&gt;&gt; bx.methodB() # returns 10
10
&gt;&gt;&gt; bx.new(B).methodX() # returns 42
42
&gt;&gt;&gt; bx.new(B).methodA() # methodA not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: BX instance has no attribute 'methodA'
</snippet></ROW><ROW><id>14838798</id><snippet>root.quit()</snippet></ROW><ROW><id>14838798</id><snippet>theMainFrame.quit</snippet></ROW><ROW><id>14838798</id><snippet>import Tkinter as tk

class CloseAfterFinishFrame1(tk.Frame):  # Diz que herda os parametros de Frame
    def __init__(self, master):
        self.master = master
        tk.Frame.__init__(self, master)  # Inicializa com os parametros acima!!
        tk.Label(self, text="Hi", font=("Arial", 16)).pack()
        self.button = tk.Button(self, text="I am ready",
                           command=self.CloseWindow, font=("Arial", 12))
        self.button.pack()
        self.pack()

    def CloseWindow(self):
        # disable the button so pressing &lt;SPACE&gt; does not call CloseWindow again
        self.button.config(state=tk.DISABLED)
        self.forget()
        CloseAfterFinishFrame2(self.master)

class CloseAfterFinishFrame2(tk.Frame):  # Diz que herda os parametros de Frame
    def __init__(self, master):
        tk.Frame.__init__(self, master)  # Inicializa com os parametros acima!!
        tk.Label(self, text="Hey", font=("Arial", 16)).pack()
        button = tk.Button(self, text="the End",
                           command=self.CloseWindow, font=("Arial", 12))
        button.pack()
        self.pack()

    def CloseWindow(self):
        root.quit()

root = tk.Tk()
CloseAfterFinishFrame1(root)
root.mainloop()
</snippet></ROW><ROW><id>14838798</id><snippet>CloseEnd</snippet></ROW><ROW><id>14838798</id><snippet>root.quit</snippet></ROW><ROW><id>14839021</id><snippet>#script.py
import os
os.system('which python')
</snippet></ROW><ROW><id>14839021</id><snippet>virtualenv newvirtualenv
source newvirtualenv/bin/activate
(newvirtualenv) user@ubuntu: python script.py
</snippet></ROW><ROW><id>14839021</id><snippet>newvirtualenv/bin/python</snippet></ROW><ROW><id>14839021</id><snippet>#!/usr/bin/env python
import os
os.system('which python')
</snippet></ROW><ROW><id>14839021</id><snippet>newvirtualenv</snippet></ROW><ROW><id>14839021</id><snippet>newvirtualenv</snippet></ROW><ROW><id>14839021</id><snippet>newvirtualenv</snippet></ROW><ROW><id>14839021</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>14839021</id><snippet>newvirtualenv/bin/python script.py</snippet></ROW><ROW><id>14839021</id><snippet>python</snippet></ROW><ROW><id>14839118</id><snippet>u''</snippet></ROW><ROW><id>14839118</id><snippet>unicode</snippet></ROW><ROW><id>14839118</id><snippet>unicode</snippet></ROW><ROW><id>14839118</id><snippet>€</snippet></ROW><ROW><id>14839231</id><snippet>+</snippet></ROW><ROW><id>14839231</id><snippet>&amp;</snippet></ROW><ROW><id>14839231</id><snippet>TypeError</snippet></ROW><ROW><id>14839231</id><snippet>&gt;&gt;&gt; "[" &amp; ""
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for &amp;: 'str' and 'str'
</snippet></ROW><ROW><id>14839231</id><snippet>except</snippet></ROW><ROW><id>14839231</id><snippet>try:
    f = open("/var/log/torblocker.log", "a")
    #f = open("E:\\logfile.log", "a")
    f.write("[" &amp; time.strftime("%a, %d %b %Y %H:%M") &amp; "] Sucessfully updated tor blacklist")
    f.close() # ^                                     ^
except:
    pass
</snippet></ROW><ROW><id>14839231</id><snippet>with open("/var/log/torblocker.log", "a") as torf:
    torf.write("[" + time.strftime("%a, %d %b %Y %H:%M") + "] " +
               "Sucessfully updated tor blacklist")
</snippet></ROW><ROW><id>14839231</id><snippet>try .. except IOError:</snippet></ROW><ROW><id>14839297</id><snippet>request.path # the url (excluding domain)
request.method # eg GET or POST
request.cookies
request.user # A django.contrib.auth.models.User object representing the currently logged-in user
request.META # A standard Python dictionary containing all available HTTP headers
</snippet></ROW><ROW><id>14839631</id><snippet>obj</snippet></ROW><ROW><id>14839631</id><snippet>update</snippet></ROW><ROW><id>14839631</id><snippet>obj.update(add_obj)
</snippet></ROW><ROW><id>14839695</id><snippet>request</snippet></ROW><ROW><id>14839695</id><snippet>url_root</snippet></ROW><ROW><id>14839695</id><snippet>Host</snippet></ROW><ROW><id>14839695</id><snippet>print request.url_root  # prints "http://domain1.com/"
print request.headers['Host']  # prints "domain1.com"
</snippet></ROW><ROW><id>14839695</id><snippet>url_root</snippet></ROW><ROW><id>14839695</id><snippet>http://domain1.com/path/to/flaskapp</snippet></ROW><ROW><id>14839695</id><snippet>request.url_for()</snippet></ROW><ROW><id>14839695</id><snippet>url_root</snippet></ROW><ROW><id>14839710</id><snippet>datetime</snippet></ROW><ROW><id>14839710</id><snippet>import datetime
DATE = datetime.datetime.now().strftime('%Y-%m-%d')
</snippet></ROW><ROW><id>14839710</id><snippet>repr</snippet></ROW><ROW><id>14839710</id><snippet>time.strftime</snippet></ROW><ROW><id>14839743</id><snippet>vlookup</snippet></ROW><ROW><id>14839743</id><snippet>index</snippet></ROW><ROW><id>14839743</id><snippet>match</snippet></ROW><ROW><id>14840041</id><snippet>from lxml import etree

file = "file://path/to/file.xml"
doc = etree.parse(file)

print doc.xpath('//cat[id=2]/name/text()')[0]
</snippet></ROW><ROW><id>14840041</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;api&gt;
    &lt;apicat&gt;
        &lt;cat&gt;
            &lt;id&gt;1&lt;/id&gt;
            &lt;name&gt;testname&lt;/name&gt;
        &lt;/cat&gt;
        &lt;cat&gt;
            &lt;id&gt;2&lt;/id&gt;
            &lt;name&gt;testname2&lt;/name&gt;
        &lt;/cat&gt;
        &lt;cat&gt;
            &lt;id&gt;3&lt;/id&gt;
            &lt;name&gt;testname3&lt;/name&gt;
        &lt;/cat&gt;
    &lt;/apicat&gt;
&lt;/api&gt;
</snippet></ROW><ROW><id>14840191</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14840191</id><snippet>str.split</snippet></ROW><ROW><id>14840191</id><snippet>with open("abc.txt") as f:
    for line in f :
        line=line.split(None,2)  #returns ['2306', '3481', '[2, -3, 82.6, 0.2]'] 
        a,b=line[:2]   
        lis=literal_eval(line[-1])
        for x in lis:
            print a,b,x    #or write to a new file
   ....:             
2306 3481 2
2306 3481 -3
2306 3481 82.6
2306 3481 0.2
2336 3408 9
2336 3408 0
</snippet></ROW><ROW><id>14840229</id><snippet>val = struct.unpack('&gt;I', b'\x00' + reg[34:37])
</snippet></ROW><ROW><id>14840364</id><snippet>eval</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>a.foo</snippet></ROW><ROW><id>14840364</id><snippet>a.foo</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>Mapper = {'test': lambda: a.foo}
</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>Mapper</snippet></ROW><ROW><id>14840364</id><snippet># mapper.py
Mapper = {'test': lambda a: a.foo}

# other module
from mapper import Mapper
Mapper['test'](a)()
</snippet></ROW><ROW><id>14840364</id><snippet>mgilson</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>Mapper</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet># mapper.py
Mapper = {'test': lambda a: Mapper['a'].foo}

# other module
from mapper import Mapper
Mapper['a'] = a
Mapper['test']()()
</snippet></ROW><ROW><id>14840364</id><snippet>Mapper['a']</snippet></ROW><ROW><id>14840364</id><snippet># mapper.py
Mapper = {'test': lambda: a.foo}

# other module
import mapper
Mapper = mapper.Mapper

mapper.a = a
Mapper['test']()()
</snippet></ROW><ROW><id>14840364</id><snippet>import mapper</snippet></ROW><ROW><id>14840364</id><snippet>Mapper</snippet></ROW><ROW><id>14840364</id><snippet>__getitem__</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>eval</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>mapper.py</snippet></ROW><ROW><id>14840364</id><snippet>a</snippet></ROW><ROW><id>14840410</id><snippet>from lxml import etree

file = "file:///path/to/file.html" # can be a http URL too
doc = etree.parse(file)

print doc.xpath('//a/@href')[0]
</snippet></ROW><ROW><id>14840410</id><snippet>lxml</snippet></ROW><ROW><id>14840485</id><snippet>NOTSET</snippet></ROW><ROW><id>14840485</id><snippet>import logging
# the root logger is created upon the first import of the logging module

# create a file handler to add to the root logger
filehandler = logging.FileHandler(
    filename = 'test.log', 
    mode = 'a', 
    encoding = None, 
    delay = False
)

# set the file handler's level to your desired logging level, e.g. INFO
filehandler.setLevel(logging.INFO)

# create a formatter for the file handler
formatter = logging.Formatter('%(asctime)s.%(msecs)d  [%(name)s](%(process)d): %(levelname)s: %(message)s')

# add filters if you want your handler to only handle events from specific loggers 
# e.g. "main.sub.classb" or something like that. I'll leave this commented out.
# filehandler.addFilter(logging.Filter(name='root.child'))

# set the root logger's level to be at most as high as your handler's
if logging.root.level &gt; filehandler.level:
    logging.root.setLevel = filehandler.level

# finally, add the handler to the root. after you do this, the root logger will write
# records to file.
logging.root.addHandler(filehandler)
</snippet></ROW><ROW><id>14840771</id><snippet>In [59]: l = range(9)

In [60]: l[:len(l)/3*2]
Out[60]: [0, 1, 2, 3, 4, 5]

In [61]: l[len(l)/3*2:]
Out[61]: [6, 7, 8]
</snippet></ROW><ROW><id>14840847</id><snippet>[[a, b], [c, d]]</snippet></ROW><ROW><id>14840847</id><snippet>[a, b, c, d]</snippet></ROW><ROW><id>14840847</id><snippet>GroupsList = [point for lst in GroupsList for point in lst]
</snippet></ROW><ROW><id>14840847</id><snippet>append()</snippet></ROW><ROW><id>14840847</id><snippet>extend()</snippet></ROW><ROW><id>14840847</id><snippet>for m in Groups:
    GroupsList.extend(point_random_selection(m,n))
</snippet></ROW><ROW><id>14840847</id><snippet>a.extend(b)</snippet></ROW><ROW><id>14840847</id><snippet>a</snippet></ROW><ROW><id>14840847</id><snippet>b</snippet></ROW><ROW><id>14840847</id><snippet>for x in b:
    a.append(x)
</snippet></ROW><ROW><id>14840853</id><snippet>fline is "polygon"</snippet></ROW><ROW><id>14840853</id><snippet>fline == "polygon"</snippet></ROW><ROW><id>14840853</id><snippet>codecs.open(filename, encoding='utf-8-sig')</snippet></ROW><ROW><id>14841073</id><snippet>numpy</snippet></ROW><ROW><id>14841073</id><snippet>try:
    import numpy
except ImportError:
    warnings.warn("Numpy not available, some functions may not work!")
</snippet></ROW><ROW><id>14841073</id><snippet>numpy</snippet></ROW><ROW><id>14841139</id><snippet>parse_args()</snippet></ROW><ROW><id>14841139</id><snippet>OptionParser</snippet></ROW><ROW><id>14841139</id><snippet>sys.argv</snippet></ROW><ROW><id>14841139</id><snippet>args</snippet></ROW><ROW><id>14841139</id><snippet>OptionParser</snippet></ROW><ROW><id>14841139</id><snippet> apps = sys.argv[1:]
</snippet></ROW><ROW><id>14841139</id><snippet>apps = args
</snippet></ROW><ROW><id>14841139</id><snippet>apps</snippet></ROW><ROW><id>14841139</id><snippet>args</snippet></ROW><ROW><id>14841266</id><snippet>class Classy(object):
    def __init__(self):
        self.hi = "HI!"
    CLASSIES = []

for i in xrange(4):
    Classy.CLASSIES.append(Classy())
</snippet></ROW><ROW><id>14841291</id><snippet>print sum(map(len,dic.itervalues()))
</snippet></ROW><ROW><id>14841466</id><snippet>zipped_data = zip(table, total)</snippet></ROW><ROW><id>14841466</id><snippet>&gt;&gt;&gt; lst1 = ['a', 'b', 'c']
&gt;&gt;&gt; lst2 = [1, 2, 3]
&gt;&gt;&gt; zip(lst1, lst2)
[('a', 1), ('b', 2), ('c', 3)]
</snippet></ROW><ROW><id>14841466</id><snippet>{% for i, j in zipped_data %}
    {{ i }}, {{ j }}
{% endfor %}
</snippet></ROW><ROW><id>14841466</id><snippet>for</snippet></ROW><ROW><id>14841568</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; with open('t.txt') as f:
...   for line in f:
...      if line.startswith('&gt;'):
...         key = line.strip()
...         if key not in d:
...             d[key] = []
...      else:
...         d[key].append(line.strip())
... 
&gt;&gt;&gt; d
{'&gt;1': ['ATTTTttttGGGG', 'ccCgCgGAgggGGT', 'gggggttttTTTTTTTTT'],
 '&gt;2': ['ATcggGGGGGGA'], '&gt;3': ['ATCGGGGGGATTT', 'gggggttAGTAttt']}
&gt;&gt;&gt; sequence_list = [''.join(k) for k in d.values()]
&gt;&gt;&gt; sequence_list
['ATTTTttttGGGGccCgCgGAgggGGTgggggttttTTTTTTTTT',
 'ATcggGGGGGGA', 'ATCGGGGGGATTTgggggttAGTAttt']
</snippet></ROW><ROW><id>14841631</id><snippet>multiply</snippet></ROW><ROW><id>14841631</id><snippet>A = A - A.multiply(B)
</snippet></ROW><ROW><id>14841631</id><snippet>eliminate_zeros()</snippet></ROW><ROW><id>14841631</id><snippet>&gt;&gt;&gt; sp_mat
&lt;1000000x1000000 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 1000 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; zero_mat
&lt;1000000x1000000 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
    with 96 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; sp_mat - sp_mat.multiply(zero_mat)
&lt;1000000x1000000 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 904 stored elements in Compressed Sparse Row format&gt;
</snippet></ROW><ROW><id>14841750</id><snippet>python -m timeit -s "import mymodule; mymodule.main()"
</snippet></ROW><ROW><id>14841750</id><snippet>main()</snippet></ROW><ROW><id>14841779</id><snippet>from itertools import product

def filler(word, from_char, to_char):
    options = [(c,) if c != from_char else (from_char, to_char) for c in word]
    return (''.join(o) for o in product(*options))
</snippet></ROW><ROW><id>14841779</id><snippet>&gt;&gt;&gt; filler("1xxx1", "x", "5")
&lt;generator object &lt;genexpr&gt; at 0x8fa798c&gt;
&gt;&gt;&gt; list(filler("1xxx1", "x", "5"))
['1xxx1', '1xx51', '1x5x1', '1x551', '15xx1', '15x51', '155x1', '15551']
</snippet></ROW><ROW><id>14841779</id><snippet>15x51</snippet></ROW><ROW><id>14841779</id><snippet>&gt;&gt;&gt; word = '1xxx1'
&gt;&gt;&gt; from_char = 'x'
&gt;&gt;&gt; to_char = '5'
&gt;&gt;&gt; [(c,) if c != from_char else (from_char, to_char) for c in word]
[('1',), ('x', '5'), ('x', '5'), ('x', '5'), ('1',)]
</snippet></ROW><ROW><id>14841779</id><snippet>itertools.product</snippet></ROW><ROW><id>14841885</id><snippet>(consoleRows,consoleCol)=os.popen('stty size','r').read().split()</snippet></ROW><ROW><id>14841885</id><snippet>(consoleRows,consoleCol)=map(int, os.popen('stty size','r').read().split())</snippet></ROW><ROW><id>14842013</id><snippet>for start in itertools.count(0, 2500):
    objs = Channel.select().limit(2500).offset(start)
    if not objs:
        break
    for obj in objs:
        # do some big work...
</snippet></ROW><ROW><id>14842013</id><snippet>count</snippet></ROW><ROW><id>14842013</id><snippet>break</snippet></ROW><ROW><id>14842013</id><snippet>count</snippet></ROW><ROW><id>14842013</id><snippet>break</snippet></ROW><ROW><id>14842013</id><snippet>objs</snippet></ROW><ROW><id>14842013</id><snippet>break</snippet></ROW><ROW><id>14842075</id><snippet>testList[:] = []</snippet></ROW><ROW><id>14842075</id><snippet>testList</snippet></ROW><ROW><id>14842075</id><snippet>testList = []
</snippet></ROW><ROW><id>14842075</id><snippet>&gt;&gt;&gt; foo = []
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; foo.append(1)
&gt;&gt;&gt; bar
[1]
&gt;&gt;&gt; foo is bar
True
&gt;&gt;&gt; foo[:] = []
&gt;&gt;&gt; bar
[]
&gt;&gt;&gt; foo = ['new', 'list']
&gt;&gt;&gt; bar
[]
&gt;&gt;&gt; foo is bar
False
</snippet></ROW><ROW><id>14842149</id><snippet>centerX = (x2 - x1) / 2 + x1
centerY = (y2 - y1) / 2 + y1
</snippet></ROW><ROW><id>14842149</id><snippet>(x2 - x1) / 2</snippet></ROW><ROW><id>14842149</id><snippet>line1 = (0, 0) -&gt; (5, 5)
then: |x1 - x2| = 5, when the center x value is at 2.5.

line2 = (2, 2) -&gt; (7, 7)
then: |x1 - x2| = 5, which can't be right because that's the center for
the line that's parallel to it but shifted downwards and to the left
</snippet></ROW><ROW><id>14842160</id><snippet>gevent.spawn</snippet></ROW><ROW><id>14842160</id><snippet>gevent.joinall</snippet></ROW><ROW><id>14842160</id><snippet>yield</snippet></ROW><ROW><id>14842160</id><snippet>next()</snippet></ROW><ROW><id>14842160</id><snippet>next()</snippet></ROW><ROW><id>14842160</id><snippet>yield</snippet></ROW><ROW><id>14842160</id><snippet>yield</snippet></ROW><ROW><id>14842160</id><snippet>gevent.sleep(0)</snippet></ROW><ROW><id>14842160</id><snippet>yield</snippet></ROW><ROW><id>14842160</id><snippet>yield from</snippet></ROW><ROW><id>14842160</id><snippet>result = yield subtasks()</snippet></ROW><ROW><id>14842160</id><snippet>yield from</snippet></ROW><ROW><id>14842160</id><snippet>yield</snippet></ROW><ROW><id>14842160</id><snippet>yield [from]</snippet></ROW><ROW><id>14842160</id><snippet>python-ideas</snippet></ROW><ROW><id>14842169</id><snippet>tt.call_me()
</snippet></ROW><ROW><id>14842284</id><snippet>output.split('.')[0].split('-')[-1]
</snippet></ROW><ROW><id>14842643</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>14842643</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14842931</id><snippet>import re
filename = 'sliceeverfile3.txt'
pattern  = '\d\d,\d\d,\d\d,\d\d,\d\d,\d\d,\d\d'
new_file = []

# Make sure file gets closed after being iterated
with open(filename, 'r') as f:
   # Read the file contents and generate a list with each line
   lines = f.readlines()

# Iterate each line
for line in lines:

    # Regex applied to each line 
    match = re.search(pattern, line)
    if match:
        # Make sure to add \n to display correctly when we write it back
        new_line = match.group() + '\n'
        print new_line
        new_file.append(new_line)

with open(filename, 'w') as f:
     # go to start of file
     f.seek(0)
     # actually write the lines
     f.writelines(new_file)
</snippet></ROW><ROW><id>14842967</id><snippet>def fileFilter(f):
    if f in filename_badwords:
        return False
    else:
        return True
</snippet></ROW><ROW><id>14842967</id><snippet>goodFiles = filter(fileFilter, htmlfiles)
</snippet></ROW><ROW><id>14843059</id><snippet>sendingTime= quickfix.SendingTime()</snippet></ROW><ROW><id>14843059</id><snippet>print sendingTime, "\n"</snippet></ROW><ROW><id>14843059</id><snippet>message.getHeader().getField(sendingTime)</snippet></ROW><ROW><id>14843059</id><snippet>print sendingTime, "\n"</snippet></ROW><ROW><id>14843059</id><snippet>message.getField(sendingTime)</snippet></ROW><ROW><id>14843183</id><snippet>[reduce(lambda a, x: a * 10 + x, t) for t in tuples]
</snippet></ROW><ROW><id>14843183</id><snippet>In [21]: %timeit [int(''.join(str(i) for i in t)) for t in tuples]
100000 loops, best of 3: 7.54 us per loop

In [22]: %timeit [reduce(lambda a, x: a * 10 + x, t) for t in tuples]
1000000 loops, best of 3: 1.55 us per loop
</snippet></ROW><ROW><id>14843183</id><snippet>[reduce(lambda a, x: a * 10**(len(str(x))) + x, t) for t in tuples]
</snippet></ROW><ROW><id>14843183</id><snippet>from math import log10
[reduce(lambda a, x: a * 10**(int(log10(x))+1) + x, t) for t in tuples]
</snippet></ROW><ROW><id>14843205</id><snippet>mymodule.py</snippet></ROW><ROW><id>14843205</id><snippet>somevariable = Square('hello', 'there')
</snippet></ROW><ROW><id>14843205</id><snippet>mymodule</snippet></ROW><ROW><id>14843205</id><snippet>Square</snippet></ROW><ROW><id>14843205</id><snippet>Square</snippet></ROW><ROW><id>14843205</id><snippet>from models import Square

for value in vars(m).itervalues():
    if isinstance(value, Square):
         models.append(value)
</snippet></ROW><ROW><id>14843205</id><snippet>Square</snippet></ROW><ROW><id>14843205</id><snippet>for value in vars(m).itervalues():
    if getattr(type(value), '__name__', None) == 'Square':
         models.append(value)
</snippet></ROW><ROW><id>14843205</id><snippet>functools.partial()</snippet></ROW><ROW><id>14843205</id><snippet>from models import Square
from functools import partial

somevariable = partial(Square, 'hello', 'there')
</snippet></ROW><ROW><id>14843205</id><snippet>somevariable</snippet></ROW><ROW><id>14843205</id><snippet>instance = somevariable()  # calls Square('hello', 'there')
</snippet></ROW><ROW><id>14843292</id><snippet>obj = MyModel.objects.get(slug=slug)
</snippet></ROW><ROW><id>14843292</id><snippet>obj = MyModel.objects.get(slug=slug.lower())
</snippet></ROW><ROW><id>14843650</id><snippet>In [208]: df = pd.DataFrame(np.random.random((6, 5)) * 10,               
                        index=list('abcdef'), columns=list('ABCDE'))

In [209]: df
Out[209]: 
     A    B    C    D    E
a  4.2  6.7  1.0  7.1  1.4
b  1.3  9.5  5.1  7.3  5.6
c  8.9  5.0  5.0  6.7  3.8
d  5.5  0.5  2.4  8.4  6.4
e  0.3  1.4  4.8  1.7  9.3
f  3.3  0.2  6.9  8.0  6.1

In [210]: ax = df.plot(kind='bar', stacked=True, align='center')

In [211]: for container in ax.containers:
              plt.setp(container, width=1)
   .....:         

In [212]: x0, x1 = ax.get_xlim()

In [213]: ax.set_xlim(x0 -0.5, x1 + 0.25)
Out[213]: (-0.5, 6.5)

In [214]: plt.tight_layout()
</snippet></ROW><ROW><id>14843787</id><snippet>def</snippet></ROW><ROW><id>14843787</id><snippet>def d(x):
    if x:
        return 1
    else:
        return 2
</snippet></ROW><ROW><id>14843787</id><snippet>lambda</snippet></ROW><ROW><id>14843787</id><snippet>def</snippet></ROW><ROW><id>14843787</id><snippet>lambda</snippet></ROW><ROW><id>14843787</id><snippet>lambda</snippet></ROW><ROW><id>14843787</id><snippet>key</snippet></ROW><ROW><id>14843787</id><snippet>sorted()</snippet></ROW><ROW><id>14843787</id><snippet>lambda x: 1 if x else 2</snippet></ROW><ROW><id>14843787</id><snippet>lambda x: bool(x)+1</snippet></ROW><ROW><id>14843838</id><snippet>&gt;&gt;&gt; grouped = itertools.groupby(map(str.strip, st.splitlines()), bool)
&gt;&gt;&gt; [list(g) for k,g in grouped if k]
[['Line 1', 'Line 2', 'Line 3', 'Line 4'], ['Line 5', 'Line 6'], 
['Line 7', 'Line 8', 'Line 9'], ['Line 10', 'Line 11', 'Line 12', 'Line 13', 'Line 14']]
</snippet></ROW><ROW><id>14843838</id><snippet>\n\n</snippet></ROW><ROW><id>14843838</id><snippet>'Line 8 '</snippet></ROW><ROW><id>14843838</id><snippet>grouped = itertools.groupby(st.splitlines(), lambda x: bool(x.strip()))
</snippet></ROW><ROW><id>14843922</id><snippet>import urllib

if __name__ == "__main__":
    droste = urllib.urlopen("http://is.gd/cHqT")
    with open("droste.png", "wb") as imgFile:
        imgFile.write(droste.read())
    print "Got it!"

    print "Now lets test if it really exists..."
    try:
        with open("droste.png", "rb") as imgFile:
            pass
        print "There were no errors so the file exists"
    except:
        print "ERROR: image was not saved properly!"
</snippet></ROW><ROW><id>14843948</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>14843948</id><snippet>now_time = datetime.now(timezone('US/Pacific')
</snippet></ROW><ROW><id>14843948</id><snippet>timezone()</snippet></ROW><ROW><id>14843948</id><snippet>from datetime import datetime
timestamp = 'Tue, 12 Feb 2013 07:43:09 GMT'  
t = datetime.strptime(timestamp, '%a, %d %b %Y %I:%M:%S %Z')
t_now = datetime.utcnow()
diff = t_now - t
</snippet></ROW><ROW><id>14844033</id><snippet>5.87100 seconds: read field "p1": 786432 bytes
0.00019 seconds: read field "p2": 131072 bytes
0.00003 seconds: read field "p3": 12288 bytes
0.00001 seconds: read field "p4": 1024 bytes
</snippet></ROW><ROW><id>14844033</id><snippet>0.00096 seconds: read field "p1": 786432 bytes
0.00019 seconds: read field "p2": 131072 bytes
0.00003 seconds: read field "p3": 12288 bytes
0.00001 seconds: read field "p4": 1024 bytes
</snippet></ROW><ROW><id>14844175</id><snippet>&gt;&gt;&gt; def g1():
...         print 'g1'
...     
&gt;&gt;&gt; def g2():
...         print 'g2'
...     
&gt;&gt;&gt; def subfunc(fn):
...         fn()
...     
&gt;&gt;&gt; def caller(a):
...         f = g1 if a else g2
...         for i in range(2):
...                 subfunc(f)
...         
&gt;&gt;&gt; caller(True)
g1
g1
&gt;&gt;&gt; caller(False)
g2
g2
</snippet></ROW><ROW><id>14844253</id><snippet>MyProtocol</snippet></ROW><ROW><id>14844253</id><snippet>state</snippet></ROW><ROW><id>14844253</id><snippet>WebSocket</snippet></ROW><ROW><id>14844253</id><snippet>WebSicketProtocol</snippet></ROW><ROW><id>14844253</id><snippet>StringTransport</snippet></ROW><ROW><id>14844253</id><snippet>MyProtocol</snippet></ROW><ROW><id>14844253</id><snippet>WebSocketProtocol</snippet></ROW><ROW><id>14844253</id><snippet>WebSocketProtocol</snippet></ROW><ROW><id>14844253</id><snippet>MyProtocol</snippet></ROW><ROW><id>14844253</id><snippet>class MyPublisher(object):
    cbk=None

    def publish(self, msg):
        if self.cbk:
            self.cbk(msg)

class MyProtocol(WebSocketServerProtocol):

    def __init__(self, publisher):
        WebSocketServerProtocol.__init__(self)
        #Defining callback for publisher
        publisher.cbk = self.sendMessage

    def onMessage(self, msg, binary)
        #Stupid echo
        self.sendMessage(msg)

class NotificationTest(unittest.TestCase):    

    class MyProtocolFactory(WebSocketServerFactory):
        def __init__(self, publisher):
            WebSocketServerFactory.__init__(self, "ws://127.0.0.1:8081")
            self.publisher = publisher
            self.openHandshakeTimeout = None

        def buildProtocol(self, addr):
            protocol =  MyProtocol(self.listener)
            protocol.factory = self
            protocol.websocket_version = 13 #Hybi version 13 is supported by pretty much everyone (apart from IE &lt;8 and android browsers)
            return protocol

    def setUp(self):
        publisher = task.LoopingCall(self.send_stuff, "Hi there")        
        factory = NotificationTest.MyProtocolFactory(listener)
        protocol = factory.buildProtocol(None)
        transport = proto_helpers.StringTransport()
        def play_dumb(*args): pass
        setattr(transport, "setTcpNoDelay", play_dumb)
        protocol.makeConnection(transport)
        self.protocol, self.transport, self.publisher, self.fingerprint_handler =  protocol, transport, publisher, fingerprint_handler

    def test_onMessage(self):
        #Following 2 lines are the problematic part. Here you are manipulating explicitly a hidden state which your implementation should not be concerned with!
        self.protocol.state = WebSocketProtocol.STATE_OPEN
        self.protocol.websocket_version = 13
        self.protocol.onMessage("Whatever")
        self.assertEqual(self.transport.value()[2:], 'Whatever')

    def test_push(self):              
        #Following 2 lines are the problematic part. Here you are manipulating explicitly a hidden state which your implementation should not be concerned with!
        self.protocol.state = WebSocketProtocol.STATE_OPEN
        self.protocol.websocket_version = 13
        self.publisher.publish("Hi there")
        self.assertEqual(self.transport.value()[2:], 'Hi There')
</snippet></ROW><ROW><id>14844253</id><snippet>StringTransport</snippet></ROW><ROW><id>14844253</id><snippet>from twisted.trial.unittest import TestCase as TrialTest
from autobahn.websocket import WebSocketServerProtocol, WebSocketServerFactory, WebSocketClientProtocol, WebSocketClientFactory, connectWS, listenWS
from twisted.internet.defer import Deferred
from twisted.internet import task 

START="START"            

class TestServerProtocol(WebSocketServerProtocol):

    def __init__(self):
        #The publisher task simulates an event that triggers a message push
        self.publisher = task.LoopingCall(self.send_stuff, "Hi there")

    def send_stuff(self, msg):
        #this method sends a message to the client
        self.sendMessage(msg)

    def _on_start(self):
        #here we trigger the task to execute every second
        self.publisher.start(1.0)

    def onMessage(self, message, binary):
        #According to this stupid protocol, the server starts sending stuff when the client sends a "START" message
        #You can plug other commands in here
        {
           START : self._on_start
           #Put other keys here
        }[message]()

    def onClose(self, wasClean, code, reason):
        #After closing the connection, we tell the task to stop sending messages
        self.publisher.stop()
</snippet></ROW><ROW><id>14844253</id><snippet>close_condition</snippet></ROW><ROW><id>14844253</id><snippet>assertion</snippet></ROW><ROW><id>14844253</id><snippet>class TestClientProtocol(WebSocketClientProtocol):
    def __init__(self, assertion, close_condition, timeout, *args, **kwargs):
        self.assertion = assertion
        self.close_condition = close_condition
        self._received_msgs = [] 
        from twisted.internet import reactor
        #This is a way to set a timeout for your test 
        #in case you never meet the conditions dictated by close_condition
        self.damocle_sword = reactor.callLater(timeout, self.sendClose)

    def onOpen(self):
        #After the connection has been established, 
        #you can tell the server to send its stuff
        self.sendMessage(START)

    def onMessage(self, msg, binary):
        #Here you get the messages pushed from the server
        self._received_msgs.append(msg)
        #If it is time to close the connection
        if self.close_condition(msg):
            self.damocle_sword.cancel()
            self.sendClose()

    def onClose(self, wasClean, code, reason):
        #Now it is the right time to check our test assertions
        self.assertion.callback(self._received_msgs)

class TestClientProtocolFactory(WebSocketClientFactory):
    def __init__(self, assertion, close_condition, timeout, **kwargs):
        WebSocketClientFactory.__init__(self, **kwargs)
        self.assertion = assertion
        self.close_condition = close_condition
        self.timeout = timeout
        #This parameter needs to be forced to None to not leave the reactor dirty
        self.openHandshakeTimeout = None

    def buildProtocol(self, addr):
        protocol = TestClientProtocol(self.assertion, self.close_condition, self.timeout)
        protocol.factory = self
        return protocol
</snippet></ROW><ROW><id>14844253</id><snippet>class WebSocketTest(TrialTest):

    def setUp(self):
        port = 8088
        factory = WebSocketServerFactory("ws://localhost:{}".format(port))
        factory.protocol = TestServerProtocol
        self.listening_port = listenWS(factory)
        self.factory, self.port = factory, port

    def tearDown(self):
        #cleaning up stuff otherwise the reactor complains
        self.listening_port.stopListening()

    def test_message_reception(self): 
        #This is the test assertion, we are testing that the messages received were 3
        def assertion(msgs):
            self.assertEquals(len(msgs), 3)

        #This class says when the connection with the server should be finalized. 
        #In this case the condition to close the connectionis for the client to get 3 messages
        class CommunicationHandler(object):
            msg_count = 0

            def close_condition(self, msg):
                self.msg_count += 1
                return self.msg_count == 3

        d = Deferred()
        d.addCallback(assertion)
        #Here we create the client...
        client_factory = TestClientProtocolFactory(d, CommunicationHandler().close_condition, 5, url="ws://localhost:{}".format(self.port))
        #...and we connect it to the server
        connectWS(client_factory)
        #returning the assertion as a deferred purely for demonstration
        return d
</snippet></ROW><ROW><id>14844253</id><snippet>makeConnection</snippet></ROW><ROW><id>14844253</id><snippet>transport</snippet></ROW><ROW><id>14844255</id><snippet>query = raw_input('Search for a title:')
query = '%' + query + '%'
cursor.execute("SELECT * FROM nerd WHERE title LIKE ?", (query,))
</snippet></ROW><ROW><id>14844382</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
...                     default=sys.stdin)
&gt;&gt;&gt; parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),
...                     default=sys.stdout)
&gt;&gt;&gt; parser.parse_args(['input.txt', 'output.txt'])
Namespace(infile=&lt;open file 'input.txt', mode 'r' at 0x...&gt;,
          outfile=&lt;open file 'output.txt', mode 'w' at 0x...&gt;)
&gt;&gt;&gt; parser.parse_args([])
Namespace(infile=&lt;open file '&lt;stdin&gt;', mode 'r' at 0x...&gt;,
          outfile=&lt;open file '&lt;stdout&gt;', mode 'w' at 0x...&gt;)
</snippet></ROW><ROW><id>14844382</id><snippet>nargs='*'</snippet></ROW><ROW><id>14844382</id><snippet>&gt;&gt;&gt; p = argparse.ArgumentParser()
&gt;&gt;&gt; p.add_argument('filename', nargs='*', default=['-'])
&gt;&gt;&gt; p.parse_args([])
Namespace(filename=['-'])
&gt;&gt;&gt; p.parse_args(['abc'])
Namespace(filename=['abc'])
</snippet></ROW><ROW><id>14844382</id><snippet>-</snippet></ROW><ROW><id>14844382</id><snippet>def get_inputs(ns):
    """Iterate over input files."""
    for path in ns.filename:
        if path == '-':
            yield sys.stdin
        else:
            yield open(path, 'r')
</snippet></ROW><ROW><id>14844382</id><snippet>cat</snippet></ROW><ROW><id>14844382</id><snippet>nargs='?'</snippet></ROW><ROW><id>14844447</id><snippet>temp = re.sub(r"(\w+).*?(\d+)", r"\1,\2", string)
</snippet></ROW><ROW><id>14844447</id><snippet>\w+</snippet></ROW><ROW><id>14844447</id><snippet>Cape</snippet></ROW><ROW><id>14844447</id><snippet>Cape Town</snippet></ROW><ROW><id>14844447</id><snippet>temp = re.sub(r"(.+?)\s*(\d+)", r"\1,\2", string)
</snippet></ROW><ROW><id>14844946</id><snippet>&gt;&gt;&gt; array_by_hand.tostring() == array_from_layers.tostring()
True
</snippet></ROW><ROW><id>14844946</id><snippet>dstack</snippet></ROW><ROW><id>14844953</id><snippet>&gt;&gt;&gt; L1 = [1,2,3,3,4]
&gt;&gt;&gt; L2 = [2,3,4,4,5]
&gt;&gt;&gt; L = list()
&gt;&gt;&gt; for v1 in L1:
        for v2 in L2:
            if v1 == v2 and v1 not in L:
                L.append(v1)
&gt;&gt;&gt; L
[2,3,4]
</snippet></ROW><ROW><id>14845060</id><snippet>browse(cr ,uid, select, context=None, list_process=None, fields_process=None)
</snippet></ROW><ROW><id>14845060</id><snippet>cr = database cursor
uid = user id
select = id or list of ids
context = context arguments like lang, time zone
</snippet></ROW><ROW><id>14845060</id><snippet>records = self.browse(cr, uid, ids)
for rec in records:
     print rec.total
     print rec.otherfield
</snippet></ROW><ROW><id>14845060</id><snippet>records = self.browse(cr, uid, ids)
totals = [rec.total for rec in records]
average = sum(totals)/len(totals)
</snippet></ROW><ROW><id>14845137</id><snippet>cdef int q_array[5] # c array
cdef int[:] q # 1D memview
cdef int[:] r # another 1D memview

q = q_array # point q to data
r = q[2:] # point r to a slice of q

r[0] = 5 # modify r

# test                                                                      
print q[2]
print r[0]
</snippet></ROW><ROW><id>14845137</id><snippet># ...

cdef int* r_ptr
cdef int* q_ptr

r_ptr = &amp;r[0]
q_ptr = &amp;q[0]

print q_ptr[2]
print r_ptr[0]
</snippet></ROW><ROW><id>14845137</id><snippet>import numpy as np

cdef int[:] q = np.arange(100).astype('int32') # slow
cdef int[:] r

r = q[50:] # fast slicing

print r[0]
</snippet></ROW><ROW><id>14845263</id><snippet>low = 0
mid = 50
high = 100
secretnum = "Is your secret number: " 
print"Please think of a number between 0 and 100!"
print secretnum + str(mid) + "?"
herp = raw_input("Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. ")
while herp != 'c':
    if herp == 'h':
        high = mid
        mid = int((mid + low)/2)
    elif herp == 'l':
        low = mid
        mid = int((mid + high)/2)
    else:
        print"Sorry, I did not understand your input."
    print secretnum + str(mid) + "?"
    herp = raw_input("Enter 'h' to indicate the guess is too high. Enter 'l' to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. ")
if herp == 'c':
    print "Game over. Your secret number was:", mid
</snippet></ROW><ROW><id>14845376</id><snippet>import operator
def weightingfun(cost, weights, volumes):
    return cost*sum(weights)/sum(map( operator.mul, weights, volumes))

weights = (1, 0.5, 0.33, 2)
volumes = (100, 20, 10, 5)
print weightingfun(70, weights, volumes)
</snippet></ROW><ROW><id>14845398</id><snippet>subprocess.Popen([setup.profile['NSISExe'], '/DON=' + setup.profile['DESC'],
                  '/DOD=' + setup.profile['InstallDir'],
                  '/DMT=' + app.machine_type.get(),
                  '/DSD=' + os.path.join(WinShellVar.LOCAL_APPDATA, 'MLC CAD', appname), 
                  '/DXV=X6',
                  setup.profile['NSISScript']])
</snippet></ROW><ROW><id>14845398</id><snippet>Popen</snippet></ROW><ROW><id>14845398</id><snippet>shell=True</snippet></ROW><ROW><id>14845398</id><snippet>Popen</snippet></ROW><ROW><id>14845407</id><snippet>frozenset</snippet></ROW><ROW><id>14845407</id><snippet>def remove_ab(ab, similarities):
    return {k:v for k, v in similarities.items() if not ab &amp; k}

similarities = {frozenset({1, 2}): "v12",
                frozenset({1, 3}): "v13",
                frozenset({2, 3}): "v23",
                frozenset({3, 4}): "v34"}

similarities = remove_ab(frozenset({1, 2}), similarities
print(similarities) # output is {frozenset({3, 4}): 'v34'}
</snippet></ROW><ROW><id>14845740</id><snippet>from alembic import op
import sqlalchemy as sa

old_options = ('nonexistent_executable', 'signal', 'success', 'timed_out')
new_options = sorted(old_options + ('output_limit_exceeded',))

old_type = sa.Enum(*old_options, name='status')
new_type = sa.Enum(*new_options, name='status')
tmp_type = sa.Enum(*new_options, name='_status')

tcr = sa.sql.table('testcaseresult',
                   sa.Column('status', new_type, nullable=False))


def upgrade():
    # Create a tempoary "_status" type, convert and drop the "old" type                                                                                                            
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE testcaseresult ALTER COLUMN status TYPE _status'
               ' USING status::text::_status');
    old_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type                                                                                                                                  
    new_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE testcaseresult ALTER COLUMN status TYPE status'
               ' USING status::text::status');
    tmp_type.drop(op.get_bind(), checkfirst=False)


def downgrade():
    # Convert 'output_limit_exceeded' status into 'timed_out'                                                                                                                      
    op.execute(tcr.update().where(tcr.c.status==u'output_limit_exceeded')
               .values(status='timed_out'))
    # Create a tempoary "_status" type, convert and drop the "new" type                                                                                                            
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE testcaseresult ALTER COLUMN status TYPE _status'
               ' USING status::text::_status');
    new_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "old" status type                                                                                                                                  
    old_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE testcaseresult ALTER COLUMN status TYPE status'
               ' USING status::text::status');
    tmp_type.drop(op.get_bind(), checkfirst=False)
</snippet></ROW><ROW><id>14845740</id><snippet>USING</snippet></ROW><ROW><id>14845740</id><snippet>alter_table</snippet></ROW><ROW><id>14846126</id><snippet>fig.canvas.draw()</snippet></ROW><ROW><id>14846126</id><snippet>plt.draw()</snippet></ROW><ROW><id>14846126</id><snippet>Artist</snippet></ROW><ROW><id>14846126</id><snippet>FigureCanvas</snippet></ROW><ROW><id>14846126</id><snippet>canvas.draw()</snippet></ROW><ROW><id>14846126</id><snippet>Figure
    Axes (0-many) (An axes is basically a plot)
        Axis (usually two) (x-axis and y-axis)
            ticks
            ticklabels
            axis label
         background patch
         title, if present
         anything you've plotted, e.g. Line2D's
</snippet></ROW><ROW><id>14846130</id><snippet>grid</snippet></ROW><ROW><id>14846130</id><snippet>pack</snippet></ROW><ROW><id>14846130</id><snippet>place</snippet></ROW><ROW><id>14846130</id><snippet>grid</snippet></ROW><ROW><id>14846130</id><snippet>columnspan</snippet></ROW><ROW><id>14846130</id><snippet>  -------------------------
  |    Button1  | Button2 |
  -------------------------
  |     Big Widget        |
  -------------------------
</snippet></ROW><ROW><id>14846130</id><snippet>.grid</snippet></ROW><ROW><id>14846130</id><snippet>columnspan</snippet></ROW><ROW><id>14846130</id><snippet>import Tkinter as Tk
root = Tk.Tk()
b1 = Tk.Button(root,text="Button1")
b1.grid(row=0,column=0)
b2 = Tk.Button(root,text="Button2")
b2.grid(row=0,column=1)
big_widget = Tk.Canvas(root)
big_widget.grid(row=1,column=0,columnspan=2)
</snippet></ROW><ROW><id>14846130</id><snippet>rowspan</snippet></ROW><ROW><id>14846130</id><snippet>Frame</snippet></ROW><ROW><id>14846130</id><snippet>import Tkinter as Tk
root = Tk.Tk()
f = Tk.Frame(root)
f.grid(row=0,column=0)
#place buttons on the *frame*
b1 = Tk.Button(f,text="Button1")
b1.grid(row=0,column=0)
b2 = Tk.Button(f,text="Button2")
b2.grid(row=0,column=1)

big_widget = Tk.Canvas(root)
big_widget.grid(row=1,column=0)  #don't need columnspan any more.
</snippet></ROW><ROW><id>14846130</id><snippet>Frame</snippet></ROW><ROW><id>14846201</id><snippet>collect = shopify.Collect({ 'product_id': product_id, 'collection_id': collection_id })
collect.save()
</snippet></ROW><ROW><id>14846245</id><snippet>&gt;&gt;&gt; float('nan') == float('nan')
False
&gt;&gt;&gt; float('nan') is float('nan')
False
&gt;&gt;&gt; len(set([float('nan') for _ in range(1000)]))
1000
</snippet></ROW><ROW><id>14846245</id><snippet>np.nan</snippet></ROW><ROW><id>14846245</id><snippet>&gt;&gt;&gt; np.nan == np.nan
False
&gt;&gt;&gt; np.nan is np.nan
True
&gt;&gt;&gt; len(set([np.nan for _ in range(1000)]))
1
</snippet></ROW><ROW><id>14846245</id><snippet>hash(float('nan')) == 0</snippet></ROW><ROW><id>14846245</id><snippet>n</snippet></ROW><ROW><id>14846245</id><snippet>O(n)</snippet></ROW><ROW><id>14846245</id><snippet>N</snippet></ROW><ROW><id>14846245</id><snippet>O(N^2)</snippet></ROW><ROW><id>14846245</id><snippet>nan_idx = np.isnan(df.weirdcolumn)
s = set(df.weirdcolumn[~nan_idx])
if np.any(nan_idx):
    s.add(np.nan)
</snippet></ROW><ROW><id>14846770</id><snippet>[app:main]
use = egg:tutorial

upload_dir = /path/to/writable/upload/directory
</snippet></ROW><ROW><id>14846770</id><snippet>config.add_static_view(name='/url/to/user_uploads', path=config.registry.settings['upload_dir'])
</snippet></ROW><ROW><id>14846770</id><snippet>app_dir</snippet></ROW><ROW><id>14846770</id><snippet>app_dir = request.registry.settings['upload_dir']
</snippet></ROW><ROW><id>14846770</id><snippet>/url/to/user_uploads/filename</snippet></ROW><ROW><id>14846828</id><snippet>import socket
import threading
import SocketServer

data = ""

class UDPHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        global data
        data = self.request[0].strip()

class ThreadedUDPServer(SocketServer.ThreadingMixIn, SocketServer.UDPServer):
    pass

if __name__ == "__main__":

    ReceiverSocket = ThreadedUDPServer(("localhost",11111), UDPHandler)
    ServerThread = threading.Thread(target=ReceiverSocket.serve_forever)
    ServerThread.start()

    while 1:
        if data:
            print data
            data = ""
</snippet></ROW><ROW><id>14846972</id><snippet>new_list = [num + 1 for num in old_list]
</snippet></ROW><ROW><id>14847344</id><snippet>import Tkinter as tk

r = tk.Tk()

e = tk.Entry(r,width=60)
e.insert(0,'...')
e.configure(state='readonly')
e.grid(row=0,column=0)

r.mainloop()
</snippet></ROW><ROW><id>14847459</id><snippet>shape</snippet></ROW><ROW><id>14847459</id><snippet>A.shape
</snippet></ROW><ROW><id>14847459</id><snippet>matrix</snippet></ROW><ROW><id>14847459</id><snippet>ndarray</snippet></ROW><ROW><id>14847459</id><snippet>ndarray</snippet></ROW><ROW><id>14847764</id><snippet>if/elif</snippet></ROW><ROW><id>14847764</id><snippet>if/elif</snippet></ROW><ROW><id>14847764</id><snippet>if/if</snippet></ROW><ROW><id>14847764</id><snippet>if/if</snippet></ROW><ROW><id>14847865</id><snippet>python_apt</snippet></ROW><ROW><id>14847865</id><snippet>commit()</snippet></ROW><ROW><id>14847865</id><snippet>subprocess</snippet></ROW><ROW><id>14847865</id><snippet>_apt_update()</snippet></ROW><ROW><id>14847865</id><snippet>apt-get update</snippet></ROW><ROW><id>14847865</id><snippet>_apt_install().</snippet></ROW><ROW><id>14847865</id><snippet> def _apt_update(self):
        import urllib2

        try:
            response = urllib2.urlopen('http://74.125.113.99', timeout=1)
            #We have internet access
            subprocess.Popen(['apt-get', 'update'])
            return True
        except urllib2.URLError as err: pass
        return False

 def _apt_install(self, pkg, update=True):
        upgraded = 0

        if update == True:
            self._apt_update()

        proc = subprocess.Popen(['apt-get', 'install', pkg, "-y"], stdout=subprocess.PIPE)
        for line in proc.stdout:
            if "upgraded" in line and "newly installed" in line and "to remove" in line:
                values = line.split(",")
                for pos in values:
                    key, value = pos.split(" ")
                    if value == "upgraded":
                        upgraded = int(key)
                    break

        print "Upgraded OK (", upgraded, ")"
        if upgraded &gt; 0:
            return True
        else:
            return False
</snippet></ROW><ROW><id>14848415</id><snippet>hstack</snippet></ROW><ROW><id>14848415</id><snippet>&gt;&gt;&gt; a = np.eye(3)
&gt;&gt;&gt; a
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
&gt;&gt;&gt; a = np.hstack([a, np.array(range(3)).reshape(3,1)])
&gt;&gt;&gt; a
array([[ 1.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  1.],
       [ 0.,  0.,  1.,  2.]])
</snippet></ROW><ROW><id>14848415</id><snippet>c_</snippet></ROW><ROW><id>14848415</id><snippet>&gt;&gt;&gt; np.c_[a, np.ones(3)]
array([[ 1.,  0.,  0.,  1.],
       [ 0.,  1.,  1.,  1.],
       [ 0.,  0.,  2.,  1.]])
</snippet></ROW><ROW><id>14848699</id><snippet>BufferingHandler</snippet></ROW><ROW><id>14848699</id><snippet>BufferingFormatter</snippet></ROW><ROW><id>14849069</id><snippet>    pygame.mixer.pre_init(44100, 16, 2, 4096) #frequency, size, channels, buffersize
    pygame.init() #turn all of pygame on.
</snippet></ROW><ROW><id>14849170</id><snippet>if check_unique(id):  # If this is `false`, you keep going
    return id 

generate_id()  # Now what? You call the function. Nothing gets returned.
</snippet></ROW><ROW><id>14849170</id><snippet>while</snippet></ROW><ROW><id>14849170</id><snippet>characters = string.ascii_letters + string.digits

def generate_id(length=10):
    return ''.join(random.choice(characters) for i in range(length))

def generate_unique_id(length=10):
    id = generate_id(length)

    while not check_unique(id):
        id = generate_id(length)

    return id
</snippet></ROW><ROW><id>14849226</id><snippet>User.objects.filter(
    Q(profile__category__name__icontains=search_string) |
    Q(profile__Tags__name__icontains=search_string)
).distinct()
</snippet></ROW><ROW><id>14849226</id><snippet>distinct()</snippet></ROW><ROW><id>14849226</id><snippet>Tags__name</snippet></ROW><ROW><id>14849241</id><snippet>aList = [["Monday", "2.03","4.03"],
         ["Tuesday","4.03","5.03"],
         ["Wednesday","3.2","4.3"]]

def helper(s):
    try: return float(s)
    except ValueError: return s

aList[:] = [[helper(item) for item in subl] for subl in aList]
print aList
</snippet></ROW><ROW><id>14849241</id><snippet>[['Monday', 2.03, 4.03], ['Tuesday', 4.03, 5.03], ['Wednesday', 3.2, 4.3]]
</snippet></ROW><ROW><id>14849322</id><snippet>indices = [i for i, s in enumerate(mylist) if 'aa' in s]
</snippet></ROW><ROW><id>14849412</id><snippet>def _create_identifier():
    base = unicode("%s|%s" % (request.remote_addr,
                              request.headers.get("User-Agent")), 'utf8', errors='replace')
    hsh = md5()
    hsh.update(base.encode("utf8"))
    return hsh.digest()
</snippet></ROW><ROW><id>14849412</id><snippet>md5(ip_address + user_agent)</snippet></ROW><ROW><id>14849464</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>14849464</id><snippet>    ....
    FileId INTEGER , -- HERE
    String TEXT
    ....
</snippet></ROW><ROW><id>14849464</id><snippet>String</snippet></ROW><ROW><id>14849491</id><snippet>XDomainRequest</snippet></ROW><ROW><id>14849491</id><snippet>XMLHttpRequest</snippet></ROW><ROW><id>14849491</id><snippet>XMLHttpRequest</snippet></ROW><ROW><id>14849529</id><snippet>for line in file:
    if re.match("datahelper\.\w+\.queryAttributes", line): 
        print line
</snippet></ROW><ROW><id>14849529</id><snippet>datahelper.</snippet></ROW><ROW><id>14849529</id><snippet>.queryAttributes</snippet></ROW><ROW><id>14849529</id><snippet>CanonicalClassName=</snippet></ROW><ROW><id>14849529</id><snippet>for line in file:
    if re.match("datahelper\.\w+\.queryAttributes(?!.*CanonicalClassName=)", line): 
        print line
</snippet></ROW><ROW><id>14849907</id><snippet>       for filename in f:
            if filename.endswith(".py"):                       
                os.system("pylint %s &gt;&gt; output.txt" % os.path.join(r, filename))
</snippet></ROW><ROW><id>14850072</id><snippet>[(tag.text, urlparse.urljoin(url, tag['href'])) 
        for tag in soup.findAll('a', href=True)]
</snippet></ROW><ROW><id>14850600</id><snippet>b = a * (3,2) [a&lt;0]</snippet></ROW><ROW><id>14850600</id><snippet>a&lt;0</snippet></ROW><ROW><id>14850600</id><snippet>true or false</snippet></ROW><ROW><id>14850600</id><snippet>1/0</snippet></ROW><ROW><id>14850600</id><snippet>(3,2)</snippet></ROW><ROW><id>14850600</id><snippet>3</snippet></ROW><ROW><id>14850600</id><snippet>2</snippet></ROW><ROW><id>14850600</id><snippet>true</snippet></ROW><ROW><id>14850600</id><snippet>1</snippet></ROW><ROW><id>14850600</id><snippet>0</snippet></ROW><ROW><id>14850600</id><snippet>In [33]: (3,2)[0]
Out[33]: 3

In [34]: (3,2)[1]
Out[34]: 2
</snippet></ROW><ROW><id>14850600</id><snippet>0</snippet></ROW><ROW><id>14850600</id><snippet>1</snippet></ROW><ROW><id>14850600</id><snippet>True means 1</snippet></ROW><ROW><id>14850600</id><snippet>False means 0</snippet></ROW><ROW><id>14850600</id><snippet>In [35]: True == 1
Out[35]: True

In [36]: False == 0
Out[36]: True
</snippet></ROW><ROW><id>14850607</id><snippet>if os.path.exists("/tmp/filename"):
    sys.exit(0)
else:
    sys.exit(1)
</snippet></ROW><ROW><id>14850783</id><snippet>&gt;&gt;&gt; '[110308] Asia and India'.split(']', 1)[-1].strip()
'Asia and India'
</snippet></ROW><ROW><id>14850783</id><snippet>lstrip</snippet></ROW><ROW><id>14850783</id><snippet>&gt;&gt;&gt; '[110308] Asia and India'.lstrip(" []" + string.digits)
'Asia and India'
</snippet></ROW><ROW><id>14850783</id><snippet>&gt;&gt;&gt; re.findall("^[\[\]\d ]*(.*)"," [110308] Asia and India")[0]
'Asia and India'
</snippet></ROW><ROW><id>14850908</id><snippet>if mylist[0].type == 'Arrival':
</snippet></ROW><ROW><id>14850998</id><snippet>r = float(data.shape[1])/data.shape[0]</snippet></ROW><ROW><id>14850998</id><snippet>def draw_punchcard(infos,
                ax1=range(7),
                ax2=range(24),
                ax1_ticks=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                ax2_ticks=range(24),
                ax1_label='Day',
                ax2_label='Hour'):

    # build the array which contains the values
    data = np.zeros((len(ax1),len(ax2)))
    for key in infos:
        data[key[0],key[1]] = infos[key]
    data = data/float(np.max(data))

    # shape ratio
    r = float(data.shape[1])/data.shape[0]

    # Draw the punchcard (create one circle per element)
    # Ugly normalisation allows to obtain perfect circles instead of ovals....
    for y in range(data.shape[0]):
        for x in range(data.shape[1]):
            circle = plt.Circle((x/float(data.shape[1])*data.shape[0],y/r),
                                data[y][x]/float(data.shape[1])*data.shape[0]/2)
            plt.gca().add_artist(circle)

    plt.ylim(0-0.5,  data.shape[0]-0.5)
    plt.xlim(0, data.shape[0])
    plt.yticks(np.arange(0,len(ax1)/r-.1,1/r), ax1_ticks)
    plt.xticks(np.linspace(0,len(ax1), len(ax2))+0.5/float(data.shape[1]), ax2_ticks)
    plt.xlabel(ax1_label)
    plt.ylabel(ax2_label)
    plt.gca().invert_yaxis()  

    # make sure the axes are equal, and resize the canvas to fit the plot
    plt.axis('equal')
    plt.axis([0, 7.02, 7/r, -.5])  
    scale = 0.5
    plt.gcf().set_size_inches(data.shape[1]*scale,data.shape[0]*scale, forward=True)
</snippet></ROW><ROW><id>14851066</id><snippet>.read()</snippet></ROW><ROW><id>14851066</id><snippet>.read()</snippet></ROW><ROW><id>14851066</id><snippet>ä</snippet></ROW><ROW><id>14851066</id><snippet>s</snippet></ROW><ROW><id>14851066</id><snippet>p</snippet></ROW><ROW><id>14851066</id><snippet>m</snippet></ROW><ROW><id>14851066</id><snippet>.read()</snippet></ROW><ROW><id>14851066</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>14851066</id><snippet>&gt;&gt;&gt; f.seek(3); f.read(1)
'm'
</snippet></ROW><ROW><id>14851070</id><snippet>func1() if a&lt;b else func2() if a==b else func3()
</snippet></ROW><ROW><id>14851070</id><snippet>a.append('value') if a&lt;b else b.append('value') if a==b else None
</snippet></ROW><ROW><id>14851474</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>14851474</id><snippet>Pool</snippet></ROW><ROW><id>14851474</id><snippet>Pool.__init__</snippet></ROW><ROW><id>14851474</id><snippet>class Pool(object):
    '''
    Class which supports an async version of applying functions to arguments.
    '''
    Process = Process

    def __init__(self, processes=None, initializer=None, initargs=(),
                 maxtasksperchild=None):
        self._setup_queues()
        self._taskqueue = queue.Queue()
        self._cache = {}
        self._state = RUN
        self._maxtasksperchild = maxtasksperchild
        self._initializer = initializer
        self._initargs = initargs

        if processes is None:
            try:
                processes = cpu_count()
            except NotImplementedError:
                processes = 1
        if processes &lt; 1:
            raise ValueError("Number of processes must be at least 1")

        if initializer is not None and not callable(initializer):
            raise TypeError('initializer must be a callable')

        self._processes = processes
        self._pool = []
        self._repopulate_pool()

        self._worker_handler = threading.Thread(
            target=Pool._handle_workers,
            args=(self, )
            )
        self._worker_handler.daemon = True
        self._worker_handler._state = RUN
        self._worker_handler.start()


        self._task_handler = threading.Thread(
            target=Pool._handle_tasks,
            args=(self._taskqueue, self._quick_put, self._outqueue, self._pool)
            )
        self._task_handler.daemon = True
        self._task_handler._state = RUN
        self._task_handler.start()

        self._result_handler = threading.Thread(
            target=Pool._handle_results,
            args=(self._outqueue, self._quick_get, self._cache)
            )
        self._result_handler.daemon = True
        self._result_handler._state = RUN
        self._result_handler.start()

        self._terminate = Finalize(
            self, self._terminate_pool,
            args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,
                  self._worker_handler, self._task_handler,
                  self._result_handler, self._cache),
            exitpriority=15
            )
</snippet></ROW><ROW><id>14851582</id><snippet>if - elif - else</snippet></ROW><ROW><id>14851582</id><snippet>if i == '[':
    a += 1
elif i == '(':
    b += 1
elif i == ']' and c &gt; 0:
    c -= 1
elif i == ')'and d &gt; 0:
    d -= 1
elif c == 0 and d == 0:
    ret += i
</snippet></ROW><ROW><id>14851582</id><snippet>if i == '[': a += 1   
elif i == '(': b += 1   
elif i == ']' and c &gt; 0: c -= 1   
elif i == ')'and d &gt; 0: d -= 1    
elif c == 0 and d == 0: ret += i
</snippet></ROW><ROW><id>14851582</id><snippet>d = {
'[' : ('add', a, 1),
'(' : ('add', b, 1),
']' : ('method', my_method, ['sample_arg1', 'sample_arg2'], {'sample_kwarg' : 'sample value'})} 

def check_char(char, mapping):
    mapper = d.get(char, None)
    if mapper:
        if mapper[0] == 'add':
            mapper[1] += mapper[2]
        if mapper[0] == 'subtract':
            mapper[1] -= mapper[2]
        if mapper[0] == 'method':
            mapper[1](char, mapper[2], mapper[3])
    # you get the idea....

def my_method(char, *args, **kwargs):
    # deal with char....
</snippet></ROW><ROW><id>14851686</id><snippet>app.yaml</snippet></ROW><ROW><id>14851686</id><snippet>hello
├── libs
│   └── bs4 
├── hello.py 
└── app.yaml
</snippet></ROW><ROW><id>14851686</id><snippet>hello.py</snippet></ROW><ROW><id>14851686</id><snippet>import sys
sys.path.insert(0, 'libs')
</snippet></ROW><ROW><id>14851686</id><snippet>libs</snippet></ROW><ROW><id>14851686</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>14851868</id><snippet>from fabric.api import execute, task
@task
def internaltask():
    execute("deploy", alias=dp)
</snippet></ROW><ROW><id>14852138</id><snippet>opts</snippet></ROW><ROW><id>14852138</id><snippet>['cmd']</snippet></ROW><ROW><id>14852138</id><snippet>In [1]: class Values(object): pass

In [2]: opts = Values()

In [3]: opts['cmd']

TypeError: 'Values' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>14852239</id><snippet>print</snippet></ROW><ROW><id>14852239</id><snippet>.readlines()</snippet></ROW><ROW><id>14852239</id><snippet>\n</snippet></ROW><ROW><id>14852239</id><snippet>replace('\n', '')</snippet></ROW><ROW><id>14852239</id><snippet>rstrip('\n')</snippet></ROW><ROW><id>14852239</id><snippet>(username,password) = line.replace('\n', '').split('|')
</snippet></ROW><ROW><id>14852239</id><snippet>filereader.read().splitlines()
</snippet></ROW><ROW><id>14852239</id><snippet>filereader.readlines()</snippet></ROW><ROW><id>14852407</id><snippet>Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on wi
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt;
&gt;&gt;&gt; os.makedirs("C:/ABC/SEM 2/testfiles")
&gt;&gt;&gt; open("C:/ABC/SEM 2/testfiles/all.txt","w")
&lt;open file 'C:/ABC/SEM 2/testfiles/all.txt', mode 'w' at 0x0000000001D95420&gt;
&gt;&gt;&gt; exit()

C:\Users\Gnibbler&gt;dir "C:\ABC\SEM 2\testfiles"
 Volume in drive C has no label.
 Volume Serial Number is 46A0-BB64

 Directory of c:\ABC\SEM 2\testfiles

13/02/2013  10:20 PM    &lt;DIR&gt;          .
13/02/2013  10:20 PM    &lt;DIR&gt;          ..
13/02/2013  10:20 PM                 0 all.txt
               1 File(s)              0 bytes
               2 Dir(s)  78,929,309,696 bytes free

C:\Users\Gnibbler&gt;
</snippet></ROW><ROW><id>14852435</id><snippet>\xc3</snippet></ROW><ROW><id>14852435</id><snippet>\xe3</snippet></ROW><ROW><id>14852435</id><snippet>&gt;&gt;&gt; print 'gr\xc3\xa9gory'.decode('utf8')
grégory
</snippet></ROW><ROW><id>14852514</id><snippet>DataFrame</snippet></ROW><ROW><id>14852514</id><snippet>from Bio import SeqIO
with open("example.fasta", "rU") as handle:
    print list(SeqIO.parse(handle, "fasta"))
</snippet></ROW><ROW><id>14852744</id><snippet>multiprocessing</snippet></ROW><ROW><id>14853257</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(0.75)
Fraction(3, 4)
</snippet></ROW><ROW><id>14853257</id><snippet>0.9</snippet></ROW><ROW><id>14853257</id><snippet>float</snippet></ROW><ROW><id>14853257</id><snippet>&gt;&gt;&gt; Fraction(0.9)
Fraction(8106479329266893, 9007199254740992)
&gt;&gt;&gt; Fraction("0.9")
Fraction(9, 10)
</snippet></ROW><ROW><id>14853291</id><snippet>urllib2</snippet></ROW><ROW><id>14853291</id><snippet>urllib2.HTTPRedirectHandler</snippet></ROW><ROW><id>14853291</id><snippet>www.chilis.com</snippet></ROW><ROW><id>14853291</id><snippet>urllib2</snippet></ROW><ROW><id>14853291</id><snippet>requests</snippet></ROW><ROW><id>14853291</id><snippet>import requests

r = requests.get(url)
soup = BeautifulSoup(r.text, 'lxml')
print(soup.prettify())
</snippet></ROW><ROW><id>14853413</id><snippet>def sample_data(self):</snippet></ROW><ROW><id>14853413</id><snippet>def test_sample_data(self):</snippet></ROW><ROW><id>14853413</id><snippet>tests.py</snippet></ROW><ROW><id>14853413</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>14853413</id><snippet>setup()</snippet></ROW><ROW><id>14853417</id><snippet>.find()</snippet></ROW><ROW><id>14853417</id><snippet>findall()</snippet></ROW><ROW><id>14853417</id><snippet>iterfind()</snippet></ROW><ROW><id>14853417</id><snippet>namespaces = {'owl': 'http://www.w3.org/2002/07/owl#'} # add more as needed

root.findall('owl:Class', namespaces=namespaces)
</snippet></ROW><ROW><id>14853417</id><snippet>namespaces</snippet></ROW><ROW><id>14853417</id><snippet>owl:</snippet></ROW><ROW><id>14853417</id><snippet>namespaces</snippet></ROW><ROW><id>14853417</id><snippet>{http://www.w3.org/2002/07/owl}Class</snippet></ROW><ROW><id>14853417</id><snippet>root.findall('{http://www.w3.org/2002/07/owl#}Class')
</snippet></ROW><ROW><id>14853417</id><snippet>lxml</snippet></ROW><ROW><id>14853417</id><snippet>.nsmap</snippet></ROW><ROW><id>14853635</id><snippet>if __name__ == ...</snippet></ROW><ROW><id>14853635</id><snippet>import os,sys,random
import pygame
# NEVER use from ... import *, even if pygame docs tell you to do so.

def disp(phrase, loc, screen, color): # func to display text
    s = font.render(phrase, True, color)
    screen.blit(s, loc)

def draw_star(star): # drawing a star
    # you only need to change a pixel, so use set_at, not draw.line
    screen.set_at((star[0], star[1]), (255, 255, 255)) 
    star[0] -= 1
    if star[0] &lt; 0:
        star[0] = screen.get_width()
        star[1] = random.randint(0, screen.get_height())

# Divide your code into parts on the basis of what it does like
# initialising pygame
pygame.init()
screen = pygame.display.set_mode((640,480))
pygame.display.set_caption('Menu')
font = pygame.font.Font('freesansbold.ttf', 40)
clock = pygame.time.Clock()

# defining the image/marker
image = pygame.Surface((30,50))
image.fill((0,0,0))
pygame.draw.polygon(image,(255,255,255),[(0,0),(0,50),(25,25)],5)

# creating list of stars, used multi-line for loop for readability
stars = []
for i in range(200):
    x = random.randint(0, screen.get_width())
    y = random.randint(0, screen.get_height())
    stars.append([x,y])

pos = 1
while True:
    # events
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif e.type == pygame.KEYDOWN:
            if e.key == pygame.K_DOWN:
                pos += 1
                if pos &gt; 4:
                    pos = 1
            elif e.key == pygame.K_UP:
                pos -= 1
                if pos &lt; 1:
                    pos = 4
            elif e.key == pygame.K_RETURN:
                if pos == 1:
                    import MathsvadersReal
                elif pos == 4:
                    pygame.quit()
                    sys.exit()

    screen.fill((0,0,0))

    # displaying text,image
    disp("Begin"       , (100,100), screen, (255, 255, 255))
    disp("My Profile"  , (100,200), screen, (255, 255, 255))
    disp("Instructions", (100,300), screen, (255, 255, 255))
    disp("Quit"        , (100,400), screen, (255, 255, 255))
    screen.blit(image,(50, (pos * 100)-10 ))

    # drawing stars
    for star in stars:
        draw_star(star)

    pygame.display.flip()
    clock.tick(22)
</snippet></ROW><ROW><id>14853720</id><snippet>WshShell</snippet></ROW><ROW><id>14853720</id><snippet>win32com</snippet></ROW><ROW><id>14853720</id><snippet>var shell = new ActiveXObject("WScript.Shell");
WScript.Echo(shell.SpecialFolders("ProgramFiles"));
WScript.Echo(shell.SpecialFolders("AppData"));
</snippet></ROW><ROW><id>14853720</id><snippet>shell.SpecialFolders("ProgramFiles")</snippet></ROW><ROW><id>14853955</id><snippet>from itertools import groupby, product
from operator import itemgetter

groups = [list(g) for _,g in groupby(data,key=itemgetter(0))]
for i in range(1,len(groups)+1):
    print list(product(*groups[:i]))
</snippet></ROW><ROW><id>14853955</id><snippet>[(['shop_id', '=', 1],)]
[(['shop_id', '=', 1], ['product_id', '=', 16]),
 (['shop_id', '=', 1], ['product_id', '=', 8]), 
 (['shop_id', '=', 1], ['product_id', '=', 4]), 
 (['shop_id', '=', 1], ['product_id', '=', 6])]
[(['shop_id', '=', 1], ['product_id', '=', 16], ['so', '=', 1]), 
 (['shop_id', '=', 1], ['product_id', '=', 16], ['so', '=', 2]),
 (['shop_id', '=', 1], ['product_id', '=', 8], ['so', '=', 1]), 
 (['shop_id', '=', 1], ['product_id', '=', 8], ['so', '=', 2]), 
 (['shop_id', '=', 1], ['product_id', '=', 4], ['so', '=', 1]), 
 (['shop_id', '=', 1], ['product_id', '=', 4], ['so', '=', 2]),
 (['shop_id', '=', 1], ['product_id', '=', 6], ['so', '=', 1]),
 (['shop_id', '=', 1], ['product_id', '=', 6], ['so', '=', 2])]
[(['shop_id', '=', 1], ['product_id', '=', 16], ['so', '=', 1], ['state', '=', u'draft']),
 (['shop_id', '=', 1], ['product_id', '=', 16], ['so', '=', 2], ['state', '=', u'draft']), 
 (['shop_id', '=', 1], ['product_id', '=', 8], ['so', '=', 1], ['state', '=', u'draft']), 
 (['shop_id', '=', 1], ['product_id', '=', 8], ['so', '=', 2], ['state', '=', u'draft']), 
 (['shop_id', '=', 1], ['product_id', '=', 4], ['so', '=', 1], ['state', '=', u'draft']), 
 (['shop_id', '=', 1], ['product_id', '=', 4], ['so', '=', 2], ['state', '=', u'draft']),
 (['shop_id', '=', 1], ['product_id', '=', 6], ['so', '=', 1], ['state', '=', u'draft']),
 (['shop_id', '=', 1], ['product_id', '=', 6], ['so', '=', 2], ['state', '=', u'draft'])]
</snippet></ROW><ROW><id>14853985</id><snippet>json</snippet></ROW><ROW><id>14853985</id><snippet>ensure_ascii</snippet></ROW><ROW><id>14853985</id><snippet>&gt;&gt;&gt; data = u'\u10e2\u10d4\u10e1\u10e2'
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(data)
'"\\u10e2\\u10d4\\u10e1\\u10e2"'
&gt;&gt;&gt; json.dumps(data, ensure_ascii=False)
u'"\u10e2\u10d4\u10e1\u10e2"'
&gt;&gt;&gt; print json.dumps(data, ensure_ascii=False)
"ტესტ"
&gt;&gt;&gt; json.dumps(data, ensure_ascii=False).encode('utf8')
'"\xe1\x83\xa2\xe1\x83\x94\xe1\x83\xa1\xe1\x83\xa2"'
</snippet></ROW><ROW><id>14853985</id><snippet>dumps()</snippet></ROW><ROW><id>14853985</id><snippet>unicode</snippet></ROW><ROW><id>14854008</id><snippet>ax.scatter</snippet></ROW><ROW><id>14854008</id><snippet>ax.scatter</snippet></ROW><ROW><id>14854008</id><snippet>data = np.array([(2,3),(3,3)])
</snippet></ROW><ROW><id>14854008</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.array([(2,3),(3,3),(45,4),(3,65)])
N = data.max() + 5

# color the background white (1 is white)
arr = np.ones((N,N), dtype = 'bool')
# color the dots black (0)
arr[data[:,1], data[:,0]] = 0

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

ax.imshow(arr, interpolation='nearest', cmap = 'gray')
ax.invert_yaxis()
# ax.axis('off')
plt.show()
</snippet></ROW><ROW><id>14854008</id><snippet>ax.scatter</snippet></ROW><ROW><id>14854008</id><snippet>ax.imshow</snippet></ROW><ROW><id>14854008</id><snippet>N x N</snippet></ROW><ROW><id>14854008</id><snippet>ax.scatter</snippet></ROW><ROW><id>14854008</id><snippet>data</snippet></ROW><ROW><id>14854276</id><snippet>import dbus
_session_bus = dbus.SessionBus()

_dbus_screensaver = _session_bus.get_object('org.freedesktop.ScreenSaver','/ScreenSaver')

simulate_activity = _dbus_screensaver.get_dbus_method('SimulateUserActivity','org.freedesktop.ScreenSaver')

simulate_activity()
</snippet></ROW><ROW><id>14854276</id><snippet>qdbus org.freedesktop.ScreenSaver /ScreenSaver org.freedesktop.ScreenSaver.SimulateUserActivity
</snippet></ROW><ROW><id>14854674</id><snippet>d</snippet></ROW><ROW><id>14854674</id><snippet>*</snippet></ROW><ROW><id>14854674</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d["a"], d["b"] = ("foo","bar")
</snippet></ROW><ROW><id>14854674</id><snippet>&gt;&gt;&gt; d['a'], d['b'] = 'foo', 'bar'
</snippet></ROW><ROW><id>14854868</id><snippet>argparse</snippet></ROW><ROW><id>14854868</id><snippet>None</snippet></ROW><ROW><id>14854868</id><snippet>parser.add_argument('--C'   , action='store', dest='C')
parser.add_argument('--file', action='store', dest='file')
# ...

args = parser.parse_args()
# ...

if args.C is None:
    # Argument `--C` not given on command line
    if args.file is not None:
        # Load the file, set `args.C` if the file contains the `C` option
        ...

if args.C is None:
    # `C` was neither specified on the command line argument given,
    # nor in the configuration file, set default value
    args.C = 3

print 'C =', args.C
</snippet></ROW><ROW><id>14855450</id><snippet>CREATE TABLE sometable (
    date1 date,
    time1 time,
    date2 date,
    time2 time
);
</snippet></ROW><ROW><id>14855450</id><snippet>CREATE TABLE sometable (
    timestamp1 timestamp with time zone,
    timestamp2 timestamp with time zone
);
</snippet></ROW><ROW><id>14855450</id><snippet>TimeZone</snippet></ROW><ROW><id>14855450</id><snippet>timestamp without time zone</snippet></ROW><ROW><id>14855450</id><snippet>SELECT ...
FROM sometable 
WHERE '2012-01-01 11:15 +0800' BETWEEN timestamp1 AND timestamp2;
</snippet></ROW><ROW><id>14855450</id><snippet>SELECT ...
FROM sometable
WHERE '2012-01-01 11:15 +0800' BETWEEN (date1 + time1) AND (date2 + time2);
</snippet></ROW><ROW><id>14855450</id><snippet>AT TIME ZONE</snippet></ROW><ROW><id>14855450</id><snippet>BETWEEN</snippet></ROW><ROW><id>14855450</id><snippet>a &lt;= x &lt;= b</snippet></ROW><ROW><id>14855450</id><snippet>SELECT ...
FROM sometable
WHERE '2012-01-01 11:15 +0800' &gt; (date1 + time1)
  AND '2012-01-01 11:15 +0800' &lt; (date2 + time2);
</snippet></ROW><ROW><id>14855450</id><snippet>INFORMATION_SCHEMA</snippet></ROW><ROW><id>14855450</id><snippet>pg_catalog.pg_class</snippet></ROW><ROW><id>14855450</id><snippet>pg_catalog.pg_attribute</snippet></ROW><ROW><id>14855450</id><snippet>date</snippet></ROW><ROW><id>14855450</id><snippet>time</snippet></ROW><ROW><id>14855450</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>14855450</id><snippet>LIKE</snippet></ROW><ROW><id>14855450</id><snippet>~</snippet></ROW><ROW><id>14855450</id><snippet>regexp_matches</snippet></ROW><ROW><id>14855450</id><snippet>(tablename, datecolumnname, timecolumnname)</snippet></ROW><ROW><id>14855450</id><snippet>(tablename, datecolumnname, timecolumnname)</snippet></ROW><ROW><id>14855450</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>14855450</id><snippet>[brackets]</snippet></ROW><ROW><id>14855450</id><snippet>BEGIN;
ALTER TABLE [tablename] ADD COLUMN [timestampcolumnname] TIMESTAMP WITH TIME ZONE;
--
-- WARNING: This part can lose data; if one of the columns is null and the other one isn't
-- the result is null. You should've had a CHECK constraint preventing that, but probably
-- didn't. You might need to special case that; the `coalesce` and `nullif` functions and
-- the `CASE` clause might be useful if so.
--
UPDATE [tablename] SET [timestampcolumnname] = ([datecolumnname] + [timecolumnname]);
ALTER TABLE [tablename] DROP COLUMN [datecolumnname];
ALTER TABLE [tablename] DROP COLUMN [timecolumnname];
-- Finally, if the originals were NOT NULL:
ALTER TABLE [tablename] ALTER COLUMN [timestampcolumnname] SET NOT NULL;
</snippet></ROW><ROW><id>14855450</id><snippet>COMMIT</snippet></ROW><ROW><id>14855450</id><snippet>ALTER</snippet></ROW><ROW><id>14855450</id><snippet>COMMIT</snippet></ROW><ROW><id>14855450</id><snippet>ROLLBACK</snippet></ROW><ROW><id>14855450</id><snippet>format</snippet></ROW><ROW><id>14855450</id><snippet>||</snippet></ROW><ROW><id>14855450</id><snippet>quote_literal</snippet></ROW><ROW><id>14855450</id><snippet>CREATE TABLE sometable(date1 date not null, time1 time not null, date2 date not null, time2 time not null);
INSERT INTO sometable(date1,time1,date2,time2) VALUES
('2012-01-01','11:15','2012-02-03','04:00');

CREATE TABLE othertable(somedate date, sometime time);
INSERT INTO othertable(somedate, sometime) VALUES
(NULL, NULL),
(NULL, '11:15'),
('2012-03-08',NULL),
('2014-09-18','23:12');
</snippet></ROW><ROW><id>14855450</id><snippet>date</snippet></ROW><ROW><id>14855450</id><snippet>time</snippet></ROW><ROW><id>14855450</id><snippet>c1.attnum + 1 = c2.attnum</snippet></ROW><ROW><id>14855450</id><snippet>BEGIN;

WITH 
-- Create set of each date/time column along with its table name, oids, and not null flag
cols AS (
    select attrelid, relname, attname, typname, atttypid, attnotnull 
    from pg_attribute 
    inner join pg_class on pg_attribute.attrelid = pg_class.oid 
    inner join pg_type on pg_attribute.atttypid = pg_type.oid 
    where NOT attisdropped AND atttypid IN ('date'::regtype, 'time'::regtype)
),
-- Self join the time and date column set, filtering the left side for only dates and
-- the right side for only times, producing two distinct sets. Then filter for entries
-- where the names are the same after replacing any appearance of the word `date` or
-- `time`.
tableinfo (tablename, datecolumnname, timecolumnname, nonnull, hastimezone) AS (
    SELECT 
        c1.relname, c1.attname, c2.attname, 
        c1.attnotnull AND c2.attnotnull AS nonnull, 
        't'::boolean AS withtimezone
    FROM cols c1 
    INNER JOIN cols c2 ON (
        c1.atttypid = 'date'::regtype 
        AND c2.atttypid = 'time'::regtype 
        AND c1.attrelid = c2.attrelid
        -- Match column pairs; I used name matching, you might use adjancency:
        AND replace(c1.attname,'date','') = replace(c2.attname,'time','')
    )
)
-- Finally, format the results into a series of ALTER TABLE statements.
SELECT format($$
    ALTER TABLE %1$I ADD COLUMN %4$I TIMESTAMP %5$s;
    UPDATE %1$I SET %4$I = (%2$I + %3$I);
    ALTER TABLE %1$I DROP COLUMN %2$I;
    ALTER TABLE %1$I DROP COLUMN %3$I;
$$ || 
    -- Append a clause to make the column NOT NULL now that it's populated, only
    -- if the original date or time were NOT NULL:
    CASE 
       WHEN nonnull
       THEN '    ALTER TABLE %1$I ALTER COLUMN %4$I SET NOT NULL;'
       ELSE ''
    END,

    -- Now the format arguments
    tablename,           -- 1
    datecolumnname,      -- 2
    timecolumnname,      -- 3
    -- You'd use a better column name generator than this simple example:
    datecolumnname||'_'||timecolumnname,  -- 4
    CASE 
       WHEN hastimezone THEN 'WITH TIME ZONE' 
       ELSE 'WITHOUT TIME ZONE' 
    END                  -- 5
)
FROM tableinfo;
</snippet></ROW><ROW><id>14855450</id><snippet>LOOP</snippet></ROW><ROW><id>14855450</id><snippet>EXECUTE</snippet></ROW><ROW><id>14855450</id><snippet>    ALTER TABLE sometable ADD COLUMN date1_time1 TIMESTAMP WITH TIME ZONE;
    UPDATE sometable SET date1_time1 = (date1 + time1);
    ALTER TABLE sometable DROP COLUMN date1;
    ALTER TABLE sometable DROP COLUMN time1;
    ALTER TABLE sometable ALTER COLUMN date1_time1 SET NOT NULL;

    ALTER TABLE sometable ADD COLUMN date2_time2 TIMESTAMP WITH TIME ZONE;
    UPDATE sometable SET date2_time2 = (date2 + time2);
    ALTER TABLE sometable DROP COLUMN date2;
    ALTER TABLE sometable DROP COLUMN time2;
    ALTER TABLE sometable ALTER COLUMN date2_time2 SET NOT NULL;

    ALTER TABLE othertable ADD COLUMN somedate_sometime TIMESTAMP WITHOUT TIME ZONE;
    UPDATE othertable SET somedate_sometime = (somedate + sometime);
    ALTER TABLE othertable DROP COLUMN somedate;
    ALTER TABLE othertable DROP COLUMN sometime;
</snippet></ROW><ROW><id>14855450</id><snippet>WITH TIME ZONE</snippet></ROW><ROW><id>14855450</id><snippet>WITHOUT TIME ZONE</snippet></ROW><ROW><id>14855450</id><snippet>nullif</snippet></ROW><ROW><id>14855450</id><snippet>coalesce</snippet></ROW><ROW><id>14855450</id><snippet>CASE</snippet></ROW><ROW><id>14855450</id><snippet>CHECK</snippet></ROW><ROW><id>14855450</id><snippet>time1</snippet></ROW><ROW><id>14855450</id><snippet>time2</snippet></ROW><ROW><id>14855725</id><snippet>def to_ranges(seq):
    iseq = iter(seq)
    x = next(iseq)
    yield range(0,x+1)
    start = x
    for x in iseq:
        stop = start+x
        yield range(start+1,stop+1)
        start = stop


for x in to_ranges([1,2,3,4]):
    print x
</snippet></ROW><ROW><id>14855725</id><snippet>[0, 1]         #0 .. a check
[2, 3]         #a+1 (2) .. a+b (1+2=3) check 
[4, 5, 6]      #a+b+1 (1+2+1=4) .. a+b+c (1+2+3=6) check
[7, 8, 9, 10]  #a+b+c+1 (1+2+3+1=7) .. a+b+c+d (1+2+3+4=10) check
</snippet></ROW><ROW><id>14855819</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.array([(1,1),(2,9),(2,3),(2,1),(2,2)])
letters = ['A', 'B', 'H', 'A', 'H']
colormap = {'A':(1,0,0),'B':(0,0,1),'H':(0,1,0)}

N = data.max() + 5
# color the background white (1 is white)
arr = np.ones((N,N,3))

for (x,y), letter in zip(data,letters):
    # color the point at (x,y) black
    arr[x,y] = (0,0,0)
    # color the x=0 band
    arr[0,y] =  colormap[letter]
    # color the y=N-1 band
    arr[x,N-1] =  colormap[letter]    

arr = arr.swapaxes(0,1)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

ax.imshow(arr, interpolation='nearest')
ax.invert_yaxis()
# ax.axis('off')
plt.show()
</snippet></ROW><ROW><id>14855966</id><snippet>mayavi.mlab.points3d</snippet></ROW><ROW><id>14855966</id><snippet>scale_mode</snippet></ROW><ROW><id>14855966</id><snippet>'none'</snippet></ROW><ROW><id>14855966</id><snippet>In [23]: t = linspace(0, 4*numpy.pi, 20)

In [24]: x = sin(2*t)

In [25]: y = cos(t)

In [26]: z = cos(2*t)

In [27]: s = 2 + sin(t)

In [28]: mlab.points3d(x, y, z, s, colormap="copper", scale_mode='none')
Out[28]: &lt;mayavi.modules.glyph.Glyph at 0x9fd85f0&gt;
</snippet></ROW><ROW><id>14856165</id><snippet>(\([\d]*\)){0,1}
</snippet></ROW><ROW><id>14856177</id><snippet>import numpy 

fieldTypes = ['i4', 'i4', 'f8', 'S4', 'S4', 'f8'] # data types of each field
fieldNames = ['a', 'b', 'c', 'd', 'e', 'f'] # names of the fields, feel free to give more descriptive names

myType = numpy.dtype(zip(fieldNames, fieldTypes)) # Create a numpy data type based on the types and fields

a = numpy.array([(1, 0, 0.25,'ind1', 'pop2', 0.56),
(2, 0, 0.35,'ind2', 'pop2', 0.58),
(1, 0, 0.23,'ind1', 'pop1', 0.66)], dtype=myType) # Create the array with the right dtype

print numpy.sort(a, order=['c']) # sort based on column 'c'
</snippet></ROW><ROW><id>14856177</id><snippet>a[a[:,1].argsort()] # Replace 1 with the index you need
</snippet></ROW><ROW><id>14856207</id><snippet>import sys
import telnetlib

tn = telnetlib.Telnet("xxxxxxxx")

TELNET_PROMPT="xxxxxxxxxx"
TIMEOUT=1
tn.write("xxxxxxx"+"\n")
tn.write("xxxxxxx"+"\n")
print tn.read_until(TELNET_PROMPT, TIMEOUT)
tn.write("term len 0" + "\n")
print tn.read_until(TELNET_PROMPT, TIMEOUT)
tn.write("show version" + "\n")
print tn.read_until(TELNET_PROMPT, TIMEOUT)
tn.write("exit"+"\n")
tn.close()
</snippet></ROW><ROW><id>14856255</id><snippet>class Whatevs(object):
    foo = 3
    zap = [foo] * 10
</snippet></ROW><ROW><id>14856255</id><snippet>class Whatevs(object):
    foo = 3
    zap = [foo for _ in range(10)]
</snippet></ROW><ROW><id>14856255</id><snippet>Whatevs</snippet></ROW><ROW><id>14856260</id><snippet>queryset|order_by:'somefield'</snippet></ROW><ROW><id>14856450</id><snippet>r'\(\s*passengers:\s*(\d{1,3}|\?)\s+ crew:\s*(\d{1,3}|\?)\s*\)'
</snippet></ROW><ROW><id>14856450</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; numbers = re.compile(r'\(\s*passengers:\s*(\d{1,3}|\?)\s+ crew:\s*(\d{1,3}|\?)\s*\)')
&gt;&gt;&gt; numbers.search('26   (passengers:22  crew:4)').groups()
('22', '4')
&gt;&gt;&gt; numbers.search('32   (passengers:?  crew: ?)').groups()
('?', '?')
</snippet></ROW><ROW><id>14856519</id><snippet>setup.py</snippet></ROW><ROW><id>14856519</id><snippet>easy_install</snippet></ROW><ROW><id>14856519</id><snippet>pip</snippet></ROW><ROW><id>14856519</id><snippet>zc.buildout</snippet></ROW><ROW><id>14856729</id><snippet>copy</snippet></ROW><ROW><id>14856729</id><snippet>import copy

individual_vocab = [[e,t] for l in range(L)]

population = [copy.deepcopy(individual_vocab) for n in range(N)]
</snippet></ROW><ROW><id>14856877</id><snippet>in</snippet></ROW><ROW><id>14856877</id><snippet>any()</snippet></ROW><ROW><id>14856877</id><snippet>&gt;&gt;&gt; array = [[1,2,3], [4,5,6]]
&gt;&gt;&gt; [3 in elem[:2] for elem in array]
[False, False]
&gt;&gt;&gt; any(3 in elem[:2] for elem in array)
False

&gt;&gt;&gt; array = [[1,3,7], [4,5,6]]
&gt;&gt;&gt; [3 in elem[:2] for elem in array]
[True, False]
&gt;&gt;&gt; any(3 in elem[:2] for elem in array)
True
</snippet></ROW><ROW><id>14856877</id><snippet>any()</snippet></ROW><ROW><id>14856877</id><snippet>True</snippet></ROW><ROW><id>14856877</id><snippet>True</snippet></ROW><ROW><id>14856988</id><snippet>input</snippet></ROW><ROW><id>14856988</id><snippet>answer = input("Is it {} ?".format(guess))
</snippet></ROW><ROW><id>14856988</id><snippet>print()</snippet></ROW><ROW><id>14857068</id><snippet>--fake</snippet></ROW><ROW><id>14857068</id><snippet>settings.py</snippet></ROW><ROW><id>14857068</id><snippet>SOUTH_TESTS_MIGRATE = False
</snippet></ROW><ROW><id>14857122</id><snippet>In [89]: xyz = 30 * np.random.uniform(size=(1000, 3))

In [90]: %timeit a0, b0 = computeForce(xyz)
1 loops, best of 3: 7.61 s per loop

In [91]: %timeit a, b = computeForceVector(xyz)
10 loops, best of 3: 139 ms per loop
</snippet></ROW><ROW><id>14857122</id><snippet>from numpy import zeros

NUMBER_PARTICLES = 1000
BOX_LENGTH = 100
CUT_OFF_ENERGY = 1
CUT_OFF_RADIUS_SQUARED = 100

def computeForceVector(currentPositions):
    potentialEnergy = 0
    force = zeros((NUMBER_PARTICLES, 3))
    for iParticle in range(0, NUMBER_PARTICLES - 1):
        positionsJ =  currentPositions[iParticle + 1:, :]
        distance = currentPositions[iParticle, :] - positionsJ
        distance = distance - BOX_LENGTH * (distance / BOX_LENGTH).round()
        distanceSquared = (distance**2).sum(axis=1)
        ind = distanceSquared &lt; CUT_OFF_RADIUS_SQUARED

        if ind.any():
            r2i = 1. / distanceSquared[ind]
            r6i = r2i * r2i * r2i
            lennardJones = 48. * r2i * r6i * (r6i - 0.5)
            ljdist = lennardJones[:, None] * distance[ind, :]
            force[iParticle, :] += (ljdist).sum(axis=0)
            force[iParticle+1:, :][ind, :] -= ljdist
            potentialEnergy += (4.* r6i * (r6i - 1.) - CUT_OFF_ENERGY).sum()
    return (force, potentialEnergy)
</snippet></ROW><ROW><id>14857273</id><snippet>program.py &gt; tmp.csv &amp;&amp; mv tmp.csv file.csv
</snippet></ROW><ROW><id>14857402</id><snippet>import chardet

def unicodify(seq, min_confidence=0.5):
    result = []
    for text in seq:
        guess = chardet.detect(text)
        if guess["confidence"] &lt; min_confidence:
            # chardet isn't confident enough in its guess, so:
            raise UnicodeDecodeError
        decoded = text.decode(guess["encoding"])
        result.append(decoded)
    return result
</snippet></ROW><ROW><id>14857402</id><snippet>&gt;&gt;&gt; unicodify(["¿qué?", "什么？", "what?"])
[u'\xbfqu\xe9?', u'\u4ec0\u4e48\uff1f', u'what?']
</snippet></ROW><ROW><id>14857420</id><snippet>re.findall(r"""
   '          #apostrophe before the string Mortein
   (          #start capture
   Mortein.*? #the string Moretein plus everything until...
   )          #end capture
   '          #...another apostrophe
   .*         #zero or more characters
   \$         #the literal dollar sign
   (          #start capture
   .*?        #zero or more characters until...
   )          #end capture
   '          #an apostrophe""", s, re.X)
</snippet></ROW><ROW><id>14857420</id><snippet>Mortein</snippet></ROW><ROW><id>14857420</id><snippet>$</snippet></ROW><ROW><id>14857420</id><snippet>re.search(r"'(Mortein.*?)'.*\$(.*?)'", s)
</snippet></ROW><ROW><id>14857420</id><snippet>.group(1)</snippet></ROW><ROW><id>14857420</id><snippet>Moretein</snippet></ROW><ROW><id>14857420</id><snippet>.group(2)</snippet></ROW><ROW><id>14857420</id><snippet>$</snippet></ROW><ROW><id>14857420</id><snippet>.group(0)</snippet></ROW><ROW><id>14857578</id><snippet>doga</snippet></ROW><ROW><id>14857578</id><snippet>dogs</snippet></ROW><ROW><id>14857578</id><snippet>&gt;&gt;&gt; test = {'dog':1, 'cat': 2, 'eagle': 3}
&gt;&gt;&gt; def same_start(s1, s2):
    ret = 0
    for i in range(min(len(s1), len(s2))):
        if s1[i] != s2[i]:
            break
        ret += 1
    return ret

&gt;&gt;&gt; def closest_match(s):
    return max(((k, v, same_start(k, s)) for k, v in test.iteritems()), key=lambda x: x[2])[1]

&gt;&gt;&gt; closest_match('dogs')  # matches dog
1
&gt;&gt;&gt; closest_match('cogs')  # matches cat
2
&gt;&gt;&gt; closest_match('eaogs') # matches eagle
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14857924</id><snippet>.write()</snippet></ROW><ROW><id>14857924</id><snippet>with open("file.json", "w") as out:
    data = serializers.serialize("json", User.objects.all())
    out.write(data)
    data2 = serializers.serialize("json", Delivery.objects.all() )
    out.write(data)
</snippet></ROW><ROW><id>14857924</id><snippet>file.json</snippet></ROW><ROW><id>14857924</id><snippet>'w'</snippet></ROW><ROW><id>14857924</id><snippet>with open("file.json", "w") as out:
    json_serializer = serializers.get_serializer('json')()
    json_serializer.serialize(User.objects.all(), stream=out)
    json_serializer.serialize(Delivery.objects.all(), stream=out)
</snippet></ROW><ROW><id>14857930</id><snippet>gdal</snippet></ROW><ROW><id>14857930</id><snippet>yoff</snippet></ROW><ROW><id>14857930</id><snippet>import numpy as np
import gdal

cols = 50539
rows = 10000
offset = 1000

dst_filename = 'test.tif'
format = 'GTiff'
driver = gdal.GetDriverByName(format)

dst_ds = driver.Create(dst_filename, cols, rows, 1, gdal.GDT_Byte)

for i in range(10):
    # generate random integers from 1 to 10
    a = np.random.random_integers(1, 10, size=(offset, cols))
    # write data to band 1
    dst_ds.GetRasterBand(1).WriteArray(a, 0, offset * i)

dst_ds = None
</snippet></ROW><ROW><id>14857930</id><snippet>offset</snippet></ROW><ROW><id>14857930</id><snippet>rows</snippet></ROW><ROW><id>14857930</id><snippet>range(10)</snippet></ROW><ROW><id>14857930</id><snippet>range(98357)</snippet></ROW><ROW><id>14857930</id><snippet>xrange(98357)</snippet></ROW><ROW><id>14858090</id><snippet>user = User.objects.create_user(username=form.cleaned_data['username'],
                                password=form.cleaned_data['password'], 
                                email=form.cleaned_data['email'])
user.is_active = True
user.save()
</snippet></ROW><ROW><id>14858149</id><snippet>date = now.strftime("%Y-%m-%d)
sql = "SELECT * FROM table WHERE date= '%s' "
sql = sql % (date)
cursor.execute(sql)
results = cursor.fetchall()
</snippet></ROW><ROW><id>14858170</id><snippet>numpy.minimum()</snippet></ROW><ROW><id>14858170</id><snippet>numpy.maximum()</snippet></ROW><ROW><id>14858170</id><snippet>numpy.min()</snippet></ROW><ROW><id>14858170</id><snippet>numpy.max()</snippet></ROW><ROW><id>14858382</id><snippet>import MySQLdb
import os

CSV_DIR = "C:\csv-files"

connection = MySQLdb.connect(host='localhost',
                             user='root',
                             passwd='password',
                             db='some_db',
                             local_infile=1)

cursor = connection.cursor()

try:
    for filename in sorted(os.listdir(CSV_DIR)):
        cursor.execute("""LOAD DATA LOCAL INFILE %s
                          INTO TABLE new_table
                          FIELDS
                          TERMINATED BY ','
                          OPTIONALLY ENCLOSED BY '"'
                          ESCAPED BY '"'
                          LINES TERMINATED BY '\n'
                          IGNORE 1 LINES""",
                      (os.path.join(CSV_DIR, filename),))

    connection.commit()
finally:
    cursor.close()
</snippet></ROW><ROW><id>14858467</id><snippet>## Using the Car constructor for validation

def __init__(self,color,manufacturer,price=1000):
    if color in manufacturer.allowed_colors:
        self.color = color
        self.manufacturer
    else:
        raise LookupError() # or something more relevant.
    self.price = price

## Or just a generic function that can be called:

def validate_car(color,manufacturer):
    if color in manufacturer.allowed_colors:
        return true
    return false

if validate_car(color,manufacturer):
    car = Car(color,manufacturer)
    session.add(car)
</snippet></ROW><ROW><id>14858467</id><snippet>validate_car(color,manufacturer)</snippet></ROW><ROW><id>14858488</id><snippet># mm.py
registry = {}                                                                   

class MultiMethod(object):                                                      
    def __init__(self, name):                                                   
        self.name = name                                                        
        self.typemap = {}                                                       
    def __call__(self, *args):                                                  
        types = tuple(arg.__class__ for arg in args) # a generator expression!  
        function = self.typemap.get(types)                                      
        if function is None:                                                    
            raise TypeError("no match")                                         
        return function(*args)                                                  
    def register(self, types, function):                                        
        if types in self.typemap:                                               
            raise TypeError("duplicate registration")                           
        self.typemap[types] = function                                          

def multimethod(*types):                                                        
    def register(function):                                                     
        function = getattr(function, "__lastreg__", function)                   
        name = function.__name__                                                
        mm = registry.get(name)                                                 
        if mm is None:                                                          
            mm = registry[name] = MultiMethod(name)                             
        mm.register(types, function)                                            
        mm.__lastreg__ = function                                               
        return mm                                                               
    return register                                                             

    if hasattr(function, "__lastreg__"):                                        
        function = function.__lastreg__
</snippet></ROW><ROW><id>14858488</id><snippet>import mm                                                                       

@mm.multimethod(int)                                                            
def spam(a):                                                                    
    print 'Calling the int method'                                              
    print '%s: %r' % (type(a), a)                                               

@mm.multimethod(float)                                                          
def spam(a):                                                                    
    print 'Calling the float method'                                            
    print '%s: %r' % (type(a), a)                                               

spam(5)                                                                         
spam(5.0)
</snippet></ROW><ROW><id>14858488</id><snippet>Calling the int method
&lt;type 'int'&gt;: 5
Calling the float method
&lt;type 'float'&gt;: 5.0
</snippet></ROW><ROW><id>14858655</id><snippet>len(numbers)</snippet></ROW><ROW><id>14858655</id><snippet>In [12]: numbers = [1, 2, 4]

In [13]: numbers2 = [[4,5,6], [2,8,9]]

In [15]: n2s = set(reduce(operator.add, (n[:2] for n in numbers2)))

In [17]: [n for n in numbers if n in n2s]
Out[17]: [2, 4]
</snippet></ROW><ROW><id>14858689</id><snippet>br.addheaders = [('User-Agent', ua)]
</snippet></ROW><ROW><id>14858689</id><snippet>br.addheaders = [('User-Agent', ua), ('Accept', '*/*')]
</snippet></ROW><ROW><id>14858714</id><snippet>v = np.ma.array([10., 11, 0],mask=[0, 0, 1])
print v - 10
&gt;&gt;&gt; [0.0 1.0 --]
</snippet></ROW><ROW><id>14858714</id><snippet>v = np.array([10.,11,np.nan])
print v - 10
&gt;&gt;&gt; [  0.   1.  nan]
</snippet></ROW><ROW><id>14858772</id><snippet>$ curl -I 'http://www.amazon.com/gp/offer-listing/B007E84H96/ref=dp_olp_new?ie=UTF8&amp;condition=new' 
HTTP/1.1 405 MethodNotAllowed
Date: Wed, 13 Feb 2013 16:41:08 GMT
Server: Server
x-amz-id-1: 1WKZG9N0SE87E3KFG6YV
allow: POST, GET
x-amz-id-2: Apluv2QBzzrmXlRWjlClRGsQQ1TbwsxObe2hxfdrGhO/OQziI/aIT3vkVjCPn+qz
Vary: Accept-Encoding,User-Agent
Content-Type: text/html; charset=ISO-8859-1
</snippet></ROW><ROW><id>14858929</id><snippet>all(predicate(x) for x in string)
</snippet></ROW><ROW><id>14859070</id><snippet>def twitterfeed():
   auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
   auth.set_access_token(access_key, access_secret)
   api = tweepy.API(auth)
   statuses = tweepy.Cursor(api.home_timeline).items(20)
   data = [s.text.encode('utf8') for s in statuses]
   print data
</snippet></ROW><ROW><id>14859186</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from tutorial.items import CraigslistSampleItem

class MySpider(CrawlSpider):
    name = "craigs"
    allowed_domains = ["sfbay.craigslist.org"]
    start_urls = ["http://sfbay.craigslist.org/"]

    rules = (
        Rule(SgmlLinkExtractor(allow=("index\d00\.html")), callback="parse_items_2", follow= True),
        Rule(SgmlLinkExtractor(allow=(r'sfbay.craigslist.org/npo')), callback="parse_items_1", follow= True),
        )

    def parse_items_1(self, response):
        items = []
        hxs = HtmlXPathSelector(response)
        titles = hxs.select("//div")
        for title in titles:
            item = CraigslistSampleItem()
            item ["title"] = title.select("//li/a/text()").extract()
            item ["link"] = title.select("//li/a/@href").extract()
            print ('**parse-items_1:', item["title"])
            items.append(item)
        return items

    def parse_items_2(self, response):
        hxs = HtmlXPathSelector(response)
        titles = hxs.select("//p")
        items = []
        for title in titles:
            item = CraigslistSampleItem()
            item ["title"] = title.select("a/text()").extract()
            item ["link"] = title.select("a/@href").extract()
            print ('**parse_items_2:', item["title"], item["link"])
            items.append(item)
        return items
</snippet></ROW><ROW><id>14859186</id><snippet>scrapy crawl craigs -t json -o items.json</snippet></ROW><ROW><id>14859227</id><snippet>file = open(xxx,"r")
for line in file:
      if.....
</snippet></ROW><ROW><id>14859227</id><snippet>for line in open(xxx)
    if.....
</snippet></ROW><ROW><id>14859447</id><snippet>celeryd start</snippet></ROW><ROW><id>14859447</id><snippet>celeryd-multi start nodeN</snippet></ROW></DATA>