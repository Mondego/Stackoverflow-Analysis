<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>17140448</id><snippet>environment</snippet></ROW><ROW><id>17140448</id><snippet>&lt;my app&gt;/conf/envs/&lt;some env&gt;.py</snippet></ROW><ROW><id>17140448</id><snippet># twoscoops/conf/envs/current.py
"""
Imports the proper settings, based on the deployment environment's name (set
as an environment variable), defaulting to local settings.
"""
import os

from django.core.exceptions import ImproperlyConfigured


# Environments (these can be called anything you want)
ENV_LOCAL = 'local'
ENV_PROD = 'prod'
DEPLOYMENT_ENVS = (ENV_LOCAL, ENV_PROD)

# Get the deployment environment's name from the os environment
DEPLOYMENT_ENV = os.getenv('DJANGO_DEPLOYMENT_ENV', ENV_LOCAL)

# Ensure the deployment env's name is valid
if DEPLOYMENT_ENV not in DEPLOYMENT_ENVS:
    raise ImproperlyConfigured(
        u'Invalid `DJANGO_DEPLOYMENT_ENV`: {d}'.format(d=DEPLOYMENT_ENV)
    )

# Import env-specific settings

if DEPLOYMENT_ENV == ENV_LOCAL:
    # Local, native testing
    from twoscoops.conf.envs.local import *

if DEPLOYMENT_ENV == ENV_PROD:
    # Production
    from twoscoops.conf.envs.prod import *
</snippet></ROW><ROW><id>17140448</id><snippet>from twosscoops.conf.envs.current import *</snippet></ROW><ROW><id>17140448</id><snippet>twoscoops.conf.envs.local</snippet></ROW><ROW><id>17140448</id><snippet>prod</snippet></ROW><ROW><id>17140448</id><snippet>DJANGO_DEPLOYMENT_ENV</snippet></ROW><ROW><id>17140448</id><snippet>you@your-server$ export DJANGO_DEPLOYMENT_ENV=prod
you@your-server$ python manage.py shell
</snippet></ROW><ROW><id>17140466</id><snippet>if (any(x.isupper() for x in s) and any(x.islower() for x in s) 
    and any(x.isdigit() for x in s) and len(s) &gt;= 7):
</snippet></ROW><ROW><id>17140466</id><snippet>rules = [lambda s: any(x.isupper() for x in s), # must have at least one uppercase
        lambda s: any(x.islower() for x in s),  # must have at least one lowercase
        lambda s: any(x.isdigit() for x in s),  # must have at least one digit
        lambda s: len(s) &gt;= 7                   # must be at least 7 characters
        ]

if all(rule(s) for rule in rules):
    ...
</snippet></ROW><ROW><id>17140466</id><snippet>errors = []
if not any(x.isupper() for x in password):
    errors.append('Your password needs at least 1 capital.')
if not any(x.islower() for x in password):
    errors.append(...)
...

if errors:
    print " ".join(errors)
</snippet></ROW><ROW><id>17140579</id><snippet>in</snippet></ROW><ROW><id>17140579</id><snippet>==</snippet></ROW><ROW><id>17140579</id><snippet>dic = ["goodmorning", "wakeup"]
test = raw_input("test: ")
if test in dic:
    print "hello"
else:
    print "testf"
</snippet></ROW><ROW><id>17141264</id><snippet>list.sort()</snippet></ROW><ROW><id>17141264</id><snippet>None</snippet></ROW><ROW><id>17141264</id><snippet>List1</snippet></ROW><ROW><id>17141264</id><snippet>None</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; List1 =[7,6,9]
&gt;&gt;&gt; repr(List1.sort())
'None'                     #return Value of list.sort
&gt;&gt;&gt; List1                  #though list is sorted
[6, 7, 9]
</snippet></ROW><ROW><id>17141264</id><snippet>sorted</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; List1 =[7,6,9]
&gt;&gt;&gt; sorted(List1)
[6, 7, 9]
&gt;&gt;&gt; List1           #List1 is not affected
[7, 6, 9]
</snippet></ROW><ROW><id>17141264</id><snippet>sorted</snippet></ROW><ROW><id>17141264</id><snippet>List1</snippet></ROW><ROW><id>17141264</id><snippet>list.sort</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; List1 = sorted(List1)
&gt;&gt;&gt; List1
[6, 7, 9]
</snippet></ROW><ROW><id>17141264</id><snippet>list.sort</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; List1 =[7,6,9]
&gt;&gt;&gt; List2 = List1         # both List1, List2 point to the same object [7, 6, 9]
&gt;&gt;&gt; List1.sort()          # sort List1 in-place, affects the original object
&gt;&gt;&gt; List1, List2
([6, 7, 9], [6, 7, 9])    # both variables still point to the same list

&gt;&gt;&gt; List1 =[7,6,9]
&gt;&gt;&gt; List2 = List1         #same as above
&gt;&gt;&gt; List1 = sorted(List1) #sorted returns a new list, so List1 now points to this new list 
&gt;&gt;&gt; List1, List2          #List2 is still unchanged
([6, 7, 9], [7, 6, 9])
</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; from random import shuffle

&gt;&gt;&gt; lis = range(10**5)
&gt;&gt;&gt; shuffle(lis)
&gt;&gt;&gt; %timeit lis.sort()
1 loops, best of 3: 9.9 ms per loop

&gt;&gt;&gt; lis = range(10**5)
&gt;&gt;&gt; shuffle(lis)
&gt;&gt;&gt; %timeit sorted(lis)
1 loops, best of 3: 95.9 ms per loop
</snippet></ROW><ROW><id>17141264</id><snippet>sorted</snippet></ROW><ROW><id>17141264</id><snippet>.sort()</snippet></ROW><ROW><id>17141264</id><snippet>sorted</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; s = {1,5,3,6}  # set
&gt;&gt;&gt; sorted(s)
[1, 3, 5, 6]
</snippet></ROW><ROW><id>17141264</id><snippet>sorted</snippet></ROW><ROW><id>17141264</id><snippet>&gt;&gt;&gt; print sorted.__doc__
sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list
</snippet></ROW><ROW><id>17141441</id><snippet>def foo(s):
    def foo_helper(level=0):
        try:
            token = next(tokens)
        except StopIteration:
            if level != 0:
                raise Exception('missing closing paren')
            else:
                return []
        if token == ')':
            if level == 0:
                raise Exception('missing opening paren')
            else:
                return []
        elif token == '(':
            return [foo_helper(level+1)] + foo_helper(level)
        else:
            return [token] + foo_helper(level)
    tokens = iter(s)
    return foo_helper()
</snippet></ROW><ROW><id>17141441</id><snippet>&gt;&gt;&gt; foo('a((b(c))d)(e)')
['a', [['b', ['c']], 'd'], ['e']]
</snippet></ROW><ROW><id>17141755</id><snippet>sort</snippet></ROW><ROW><id>17141755</id><snippet>df.sort(['a', 'b'], ascending=[True, False])
</snippet></ROW><ROW><id>17141755</id><snippet>In [11]: pd.DataFrame(randint(1, 5, (10,2)), columns=['a','b'])

In [12]: df1.sort(['a', 'b'], ascending=[True, False])
Out[12]:
   a  b
2  1  4
7  1  3
1  1  2
3  1  2
4  3  2
6  4  4
0  4  3
9  4  3
5  4  1
8  4  1
</snippet></ROW><ROW><id>17142103</id><snippet>0.0</snippet></ROW><ROW><id>17142103</id><snippet>0</snippet></ROW><ROW><id>17142103</id><snippet>int()</snippet></ROW><ROW><id>17142143</id><snippet>globals</snippet></ROW><ROW><id>17142143</id><snippet>getattr</snippet></ROW><ROW><id>17142143</id><snippet>getattr(globals()[module_name], function_name)
</snippet></ROW><ROW><id>17142260</id><snippet>In [81]: converters = {
             'NAME': lambda x:x[:-1], 
             'Sdev_I1': lambda x: float(x[:-1]),     
             'Sdev_I2': lambda x: float(x[:-1])
         }

In [82]: pd.read_csv('NEW.csv',sep=r'\s+', converters=converters)
Out[82]: 
         NAME  Sdev_I1  Sdev_I2
0  Mon-000002    0.023    0.028
1  Mon-000003    0.016    0.016
</snippet></ROW><ROW><id>17142362</id><snippet>import matplotlib.pyplot as plt

def myfun(args):
    data, ax = args
    ax.plot(*data)

fig = plt.figure()
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
para = [
    [[[1,2,3],[1,2,3]],ax1],
    [[[1,2,3],[3,2,1]],ax2],
]
map(myfun, para)
plt.show()
</snippet></ROW><ROW><id>17142362</id><snippet>import itertools
import matplotlib.pyplot as plt

def myfun(data, ax):
    ax.plot(*data)

fig = plt.figure()
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
para = [
    [[[1,2,3],[1,2,3]],ax1],
    [[[1,2,3],[3,2,1]],ax2],
]
list(itertools.starmap(myfun, para)) # list is need to iterator to be consumed.
plt.show()
</snippet></ROW><ROW><id>17142590</id><snippet>text='Hello'</snippet></ROW><ROW><id>17142590</id><snippet>'Hello'</snippet></ROW><ROW><id>17142590</id><snippet>text</snippet></ROW><ROW><id>17142590</id><snippet>Label(None,'Hello')</snippet></ROW><ROW><id>17142590</id><snippet>'Hello'</snippet></ROW><ROW><id>17142590</id><snippet>&gt;&gt;&gt; def func(first, second):
...     print first, second
...     
&gt;&gt;&gt; func('foo', 'text')
foo text
&gt;&gt;&gt; func('foo', second = 'text')
foo text
</snippet></ROW><ROW><id>17142590</id><snippet>&gt;&gt;&gt; def func(first, second, third):
    print first, second, third
...     
&gt;&gt;&gt; func('foo', third = 'spam', second = 'bar')
foo bar spam
</snippet></ROW><ROW><id>17142590</id><snippet>first</snippet></ROW><ROW><id>17142590</id><snippet>'foo'</snippet></ROW><ROW><id>17142590</id><snippet>second</snippet></ROW><ROW><id>17142590</id><snippet>third</snippet></ROW><ROW><id>17142595</id><snippet>In [126]: df.replace(['very bad', 'bad', 'poor', 'good', 'very good'], 
                     [1, 2, 3, 4, 5]) 
Out[126]: 
      resp  A  B  C
   0     1  3  3  4
   1     2  4  3  4
   2     3  5  5  5
   3     4  2  3  2
   4     5  1  1  1
   5     6  3  4  1
   6     7  4  4  4
   7     8  5  5  5
   8     9  2  2  1
   9    10  1  1  1
</snippet></ROW><ROW><id>17142816</id><snippet>singlevalue</snippet></ROW><ROW><id>17142816</id><snippet>l = l + [1]</snippet></ROW><ROW><id>17142816</id><snippet>l</snippet></ROW><ROW><id>17142816</id><snippet>singlevalue [local variable] = singlevalue [actually a global variable but access to locally stored variable] + 1 [constant]
</snippet></ROW><ROW><id>17142816</id><snippet>global</snippet></ROW><ROW><id>17142816</id><snippet>list[0] [slot in a referenced list] = list[0] [still same slot, which has a value already]+1
</snippet></ROW><ROW><id>17142816</id><snippet>&gt;&gt;&gt; def m():
...  y = 1
...  def test():
...   y = y + 1
...   return y
...  test()
&gt;&gt;&gt; m()
UnboundLocalError: local variable 'y' referenced before assignment
&gt;&gt;&gt; dis.dis(m)
  [... cur here ... Inside of test()]
              # &lt;-- here the value of the constant is loaded from the local namespace
  3           6 LOAD_CONST               2 (&lt;code object test at 02A067B8, file "&lt;pyshell#33&gt;", line 3&gt;)                   
              9 MAKE_FUNCTION            0
             12 STORE_FAST               1 (test)
  [... cut here ...]

&gt;&gt;&gt; def l():
...  li = [1]
...  def test():
...   li[0] = li[0] + 1
...   return li
...  test()
&gt;&gt;&gt; l()
[... cut here ... Inside of test()]
              # &lt;-- here a reference is loaded!
  3           9 LOAD_CLOSURE             0 (li)
             12 BUILD_TUPLE              1
             15 LOAD_CONST               2 (&lt;code object test at 02A06698, file "&lt;pyshell#28&gt;", line 3&gt;)
             18 MAKE_CLOSURE             0
             21 STORE_FAST               0 (test)
[... cut here ...]
</snippet></ROW><ROW><id>17142816</id><snippet>  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (y) # &lt;- push loaded constant to stack

  2           0 LOAD_CONST               1 (1)
              3 BUILD_LIST               1
              6 STORE_DEREF              0 (li) # &lt;- stores the value in the list
</snippet></ROW><ROW><id>17143032</id><snippet>func</snippet></ROW><ROW><id>17143032</id><snippet>()</snippet></ROW><ROW><id>17143032</id><snippet>min(list,key=func)
</snippet></ROW><ROW><id>17143032</id><snippet>&gt;&gt;&gt; lis = [ '1', '2', '3', '4' ]
&gt;&gt;&gt; def func(x):
...     return int(x)
... 
&gt;&gt;&gt; min(lis, key=func) # each value from list is passed to `func`(one at a time)
'1'
</snippet></ROW><ROW><id>17143032</id><snippet>True</snippet></ROW><ROW><id>17143032</id><snippet>1</snippet></ROW><ROW><id>17143032</id><snippet>False</snippet></ROW><ROW><id>17143032</id><snippet>0</snippet></ROW><ROW><id>17143032</id><snippet>func()</snippet></ROW><ROW><id>17143032</id><snippet>min</snippet></ROW><ROW><id>17143032</id><snippet>1</snippet></ROW><ROW><id>17143032</id><snippet>0</snippet></ROW><ROW><id>17143032</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
</snippet></ROW><ROW><id>17143032</id><snippet>&gt;&gt;&gt; def func(x): return bool(x)
&gt;&gt;&gt; lis = [ 1, [], 3, 4 ]
&gt;&gt;&gt; min(lis, key=func) # bool([]) evaluated to False, ie 0
[]
&gt;&gt;&gt; max(lis, key=func)
1
</snippet></ROW><ROW><id>17143032</id><snippet>&gt;&gt;&gt; lis  = [[4,5,6], [1,2], [13,1,1,1], [1000]]
&gt;&gt;&gt; def func(x):
...     return len(x)  #comparisons are done based on this value
... 
&gt;&gt;&gt; min(lis, key = func)
[1000]
#equal to
&gt;&gt;&gt; min(lis, key = len)
[1000]
</snippet></ROW><ROW><id>17143367</id><snippet>from datetime import time

x = excel_time # a float
x = int(x * 24 * 3600) # convert to number of seconds
my_time = time(x//3600, (x%3600)//60, x%60) # hours, minutes, seconds
</snippet></ROW><ROW><id>17143397</id><snippet>itertools.combinations</snippet></ROW><ROW><id>17143397</id><snippet>"x".join</snippet></ROW><ROW><id>17143397</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; a = ['a','b','c']
&gt;&gt;&gt; l = [map("x".join, list(it.combinations(a, l))) for l in range(1,len(a)+1)]
&gt;&gt;&gt; l
[['a', 'b', 'c'], ['axb', 'axc', 'bxc'], ['axbxc']]
</snippet></ROW><ROW><id>17143397</id><snippet>l</snippet></ROW><ROW><id>17143397</id><snippet>&gt;&gt;&gt; [ x for y in l for x in y]
['a', 'b', 'c', 'axb', 'axc', 'bxc', 'axbxc']
</snippet></ROW><ROW><id>17143724</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from scipy.misc import imread
from matplotlib.pyplot import figure, show
from numpy import linspace, meshgrid, sqrt, sin, mean, flipud

clown = imread('clown.png')
fig = figure()
ax = fig.gca(projection='3d')
X = linspace(-5, 5, clown.shape[0])
Y = linspace(-5, 5, clown.shape[1])
X, Y = meshgrid(X, Y)
R = sqrt(X**2 + Y**2)
Z = sin(R)
clown = clown.swapaxes(0,1) / 255. # meshgrid orients axes the other way around, scaling of rgb to [0-1]
ax.plot_surface(X, Y, Z, facecolors=flipud(clown))
ax.view_init(45,-35) # swapped wrt matlab
show()
</snippet></ROW><ROW><id>17143963</id><snippet>a</snippet></ROW><ROW><id>17143963</id><snippet>b</snippet></ROW><ROW><id>17143963</id><snippet>for file1 in a:
    for file2 in b:
        if file1==file2: break
        if file1.lower()==file2.lower():
            print '%s or %s' % (file1,file2)
            break
</snippet></ROW><ROW><id>17144248</id><snippet>function</snippet></ROW><ROW><id>17144248</id><snippet>function()</snippet></ROW><ROW><id>17144248</id><snippet>password=None
def function():
  global password 
  password = blahblah

def function2(): 
  print password
</snippet></ROW><ROW><id>17144248</id><snippet>def function():
  return blahblah

def function2(): 
  print function()
</snippet></ROW><ROW><id>17144499</id><snippet>[default: ]</snippet></ROW><ROW><id>17144499</id><snippet>[default: ...]</snippet></ROW><ROW><id>17144499</id><snippet>None</snippet></ROW><ROW><id>17144553</id><snippet>&lt;strings xmlns:xliff="some-name-space"&gt;
  &lt;string name="AAAAAAA" msgid="XXXXXXX"&gt;"Activity &lt;xliff:g id="BBBBBBB"&gt;%1$s&lt;/xliff:g&gt; isn\'t responding."\n\n"Do you want to close it?"&lt;/string&gt;
  &lt;string name="AAAAAAA" msgid="XXXXXXX"&gt;"Another &lt;xliff:g id="BBBBBBB"&gt;%1$s&lt;/xliff:g&gt;message&lt;/string&gt;
&lt;/strings&gt;
</snippet></ROW><ROW><id>17144553</id><snippet>get_text</snippet></ROW><ROW><id>17144553</id><snippet>import xml.dom.minidom as md
dom = md.parse('wu.xml')
strings = dom.getElementsByTagName('string')
for string in strings:
    print get_text(string)

def get_text(el):
    """get_text
    For text nodes, returns the text. For element nodes, recursively call the
    function to aggregate all the text nodes into a string"""           
    msg = ''
    for n in el.childNodes:
        if n.nodeType == n.TEXT_NODE:
            msg += n.nodeValue
        elif n.nodeType == n.ELEMENT_NODE:
            msg += get_text(n)
    return msg
</snippet></ROW><ROW><id>17144632</id><snippet>hex</snippet></ROW><ROW><id>17144632</id><snippet>&gt;&gt;&gt; hex(0x50)
'0x50'
</snippet></ROW><ROW><id>17144948</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17144948</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; lis = [['test_data', 'new_directory', 'ok.txt'], ['test_data', 'reads_1.fq'], 
for item in lis:                                                                                           
    key = "/".join(item[:-1])
    dic[key].append(item[-1])
...     
&gt;&gt;&gt; dic
defaultdict(&lt;type 'list'&gt;,
{'test_data': ['reads_1.fq', 'test_ref.fa'],
 'test_data/new_directory': ['ok.txt']})
</snippet></ROW><ROW><id>17144948</id><snippet>dict</snippet></ROW><ROW><id>17144948</id><snippet>&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; for item in lis:
    key = "/".join(item[:-1])
    dic.setdefault(key, []).append(item[-1])
...     
&gt;&gt;&gt; dic
{'test_data': ['reads_1.fq', 'test_ref.fa'],
 'test_data/new_directory': ['ok.txt']}
</snippet></ROW><ROW><id>17145197</id><snippet>finditer()</snippet></ROW><ROW><id>17145197</id><snippet>import re
from functools import partial

def _hexrepl(match):
    return chr(int(match.group(1), 16))
unescape = partial(re.compile(r'#([0-9A-F]{2})').sub, _hexrepl)

def pdfnames(inputtext):
    for match in Name.finditer(inputtext):
        yield unescape(match.group(0))
</snippet></ROW><ROW><id>17145197</id><snippet>&gt;&gt;&gt; for name in pdfnames(names):
...     print name
... 
/Adobe Green
/PANTONE 5757 CV
/paired()parentheses
/The_Key_of_F#_Minor
/AB
/Name1
/ASomewhatLongerName
/A;Name_With-Various***Characters?
/1.2
/$$
/@pattern
/.notdef
</snippet></ROW><ROW><id>17145197</id><snippet>re</snippet></ROW><ROW><id>17145245</id><snippet># In your view somewhere
import json

def my_view(request):
    ...
    return render_to_response('my_template.html',{ 'my_json': json.dumps(my_dict) }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>17145245</id><snippet>&lt;script&gt;
     obj = {{ my_json|safe }};
     for (var prop in obj){  // Iterating through an object
         console.log(prop);
         for(i=0, i &lt; obj[prop].length, i++){  // Iterating through the list for each key
              console.log(obj[prop][i]);
         }
     }
&lt;/script&gt;
</snippet></ROW><ROW><id>17145258</id><snippet>"."</snippet></ROW><ROW><id>17145258</id><snippet>sys.path</snippet></ROW><ROW><id>17145475</id><snippet>LOAD_CLOSURE</snippet></ROW><ROW><id>17145475</id><snippet>&gt;&gt;&gt; dis.dis(add_url_rule)
  2           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (record)
              6 LOAD_CLOSURE             0 (endpoint)
              9 LOAD_CLOSURE             1 (options)
             12 LOAD_CLOSURE             2 (rule)
             15 LOAD_CLOSURE             3 (view_func)
             18 BUILD_TUPLE              4
             21 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0x10faec530, file "&lt;stdin&gt;", line 2&gt;)
             24 MAKE_CLOSURE             0
             27 CALL_FUNCTION            1
             30 POP_TOP             
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE        
</snippet></ROW><ROW><id>17145475</id><snippet>compiler_make_closure()</snippet></ROW><ROW><id>17145475</id><snippet>func.func_code.co_freevars</snippet></ROW><ROW><id>17145475</id><snippet>func.func_code.co_freevars</snippet></ROW><ROW><id>17145475</id><snippet>makecode</snippet></ROW><ROW><id>17145475</id><snippet>compiler_enter_scope()</snippet></ROW><ROW><id>17145475</id><snippet>dictbytype()</snippet></ROW><ROW><id>17145475</id><snippet>func.func_code.co_freevars</snippet></ROW><ROW><id>17145475</id><snippet>dict(zip(func.func_code.co_freevars, (c.cell_contents for c in func.func_closure)))
</snippet></ROW><ROW><id>17145568</id><snippet>del(unsorted, lowest_index)
</snippet></ROW><ROW><id>17145568</id><snippet>unsorted</snippet></ROW><ROW><id>17145568</id><snippet>lowest_index</snippet></ROW><ROW><id>17145612</id><snippet>print "\nitem moved"
break
</snippet></ROW><ROW><id>17146293</id><snippet>__eq__</snippet></ROW><ROW><id>17146293</id><snippet>class Foo(object):

    def __hash__(self):
        return 7
    def __eq__(self, other):
        return True

&gt;&gt;&gt; x = set()
&gt;&gt;&gt; x.add(Foo())
&gt;&gt;&gt; assert len(x) == 1
&gt;&gt;&gt; x.add(Foo())
&gt;&gt;&gt; assert len(x) == 1
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17146342</id><snippet>&gt;&gt;&gt; x = 1 + (
... 2)
</snippet></ROW><ROW><id>17146406</id><snippet>unicode.encode</snippet></ROW><ROW><id>17146406</id><snippet>unicode</snippet></ROW><ROW><id>17146406</id><snippet>str</snippet></ROW><ROW><id>17146406</id><snippet>&gt;&gt;&gt; content = [u'\u4e00\u5927\u5b66\u751f\u88ab\u654c\u4eba\u6293\u4e86\uff0c\u654c\u4eba\u628a\u4ed6\u7ed1\u5728\u4e86\u7535\u7ebf\u6746\u4e0a\uff0c\u7136\u540e...']
&gt;&gt;&gt; print content[0]
一大学生被敌人抓了，敌人把他绑在了电线杆上，然后...
&gt;&gt;&gt; content_utf8 = content[0].encode('utf8')
&gt;&gt;&gt; content_utf8[:10]
'\xe4\xb8\x80\xe5\xa4\xa7\xe5\xad\xa6\xe7'
&gt;&gt;&gt; print content_utf8
一大学生被敌人抓了，敌人把他绑在了电线杆上，然后...
</snippet></ROW><ROW><id>17146406</id><snippet>content_utf8</snippet></ROW><ROW><id>17146567</id><snippet>shell=True</snippet></ROW><ROW><id>17146567</id><snippet>shell=True</snippet></ROW><ROW><id>17146567</id><snippet>shell=True</snippet></ROW><ROW><id>17146567</id><snippet>rsync</snippet></ROW><ROW><id>17146567</id><snippet>grep</snippet></ROW><ROW><id>17146567</id><snippet>rsync_out = subprocess.Popen(['sshpass', '-p', password, 'rsync', '--recursive', source], stdout=subprocess.PIPE)
output = subprocess.check_output(('grep', '\.'), stdin=rsync_out.stdout)
</snippet></ROW><ROW><id>17146619</id><snippet>print p.stdout.read() # expected this to print output interactively. This actually hungs.
</snippet></ROW><ROW><id>17146619</id><snippet>read()</snippet></ROW><ROW><id>17146619</id><snippet>print p.stdout.readline()
</snippet></ROW><ROW><id>17146783</id><snippet>def problem_a(n):
    if n == 1:
        return [n]
    elif n % 2 == 0:
        return [n] + problem_a(n // 2)
    else:
        return [n] + problem_a(3*n + 1)
</snippet></ROW><ROW><id>17146851</id><snippet>import functools

def blockSignals(*widgetnames):
    def decorator(func):
        @functool.wraps(func)
        def method(self, *args, **kwargs):
            widgets = [getattr(self.widget, name) for name in widgetnames]
            for widget in widgets:
                widget.blockSignals(True) 
            result = func(self, *args, **kwargs)
            for widget in widgets:
                widget.blockSignals(False)
            return result
        return method
    return decorator

class WidgetController(...):

    def __init__(...):
       self.widget.myWidget.currentIndexChanged.connect(reactToChange)

    @blockSignals('myWidget')
    def reactToChange(...):
        ...

    @blockSignals('anotherWidget', 'alsoBlockThisWidget')
    def anotherFunction(...):
        ...
</snippet></ROW><ROW><id>17146851</id><snippet>self</snippet></ROW><ROW><id>17146851</id><snippet>self.widget</snippet></ROW><ROW><id>17146941</id><snippet>str</snippet></ROW><ROW><id>17146941</id><snippet>iw.next</snippet></ROW><ROW><id>17146941</id><snippet>iw.next()</snippet></ROW><ROW><id>17146941</id><snippet>line3 +=''+synset_offset+'\lemon.lexical_entry\ '+iw.next()+'/n'
</snippet></ROW><ROW><id>17146941</id><snippet>triple</snippet></ROW><ROW><id>17146941</id><snippet>tuple</snippet></ROW><ROW><id>17146941</id><snippet>add(self, (s, p, o))
</snippet></ROW><ROW><id>17146941</id><snippet>self</snippet></ROW><ROW><id>17146941</id><snippet>triple</snippet></ROW><ROW><id>17146941</id><snippet>print triple</snippet></ROW><ROW><id>17146941</id><snippet>for</snippet></ROW><ROW><id>17147533</id><snippet>decode("unicode_escape")</snippet></ROW><ROW><id>17147533</id><snippet>encode()</snippet></ROW><ROW><id>17147533</id><snippet>&gt;&gt;&gt; r"Austro\u002dHungarian_gulden".decode("unicode_escape")
u'Austro-Hungarian_gulden'
</snippet></ROW><ROW><id>17147548</id><snippet>nb.Key('NewsBase', 'mynews', 'NewsBase', 8001)</snippet></ROW><ROW><id>17147938</id><snippet>import requests
s = requests.session()
r = s.get('http://google.com')
r = s.get('http://facebook.net')
for cookie in s.cookies:
    print(cookie)
</snippet></ROW><ROW><id>17147938</id><snippet>from selenium import webdriver

cookie_file_path = 'cookie.txt'

args = ['--cookies-file={}'.format(cookie_file_path)]
driver = webdriver.PhantomJS(service_args=args)
driver.get('http://google.com')
driver.get('http://facebook.com')
with open(cookie_file_path) as f:
    print(f.read())
</snippet></ROW><ROW><id>17147938</id><snippet>[General]
cookies="@Variant(\0\0\0\x7f\0\0\0\x16QList&lt;QNetworkCookie&gt;\0\0\0\0\x1\0\0\0\a\0
\0\0\xd6NID=67=SZetUV-oLq_M8ik40VT2GEIb45LMaXkhm6H3zx1wULO52qkCHPc9AML_p5eubW4zL
Ms158YAYKQTdCJzb4mInix_Zek6P8Ej1XZh9h5Ng3I7X4gZuE_S-Fl2YpaSYd9B; HttpOnly; expir
es=Wed, 18-Dec-2013 02:44:31 GMT; domain=.google.co.kr; path=/\0\0\0ldatr=kMm_Ue
0P06lxFANs8c-wCgwG; HttpOnly; expires=Thu, 18-Jun-2015 02:44:32 GMT; domain=.fac
ebook.com; path=/\0\0\0Kreg_fb_gate=https%3A%2F%2Fwww.facebook.com%2F; domain=.f
acebook.com; path=/\0\0\0Jreg_fb_ref=https%3A%2F%2Fwww.facebook.com%2F; domain=.
facebook.com; path=/\0\0\0\xa2PREF=ID=be651672f1ddac52:U=515e3545a8a53080:FF=0:T
M=1371523471:LM=1371524047:S=iqfF3qNRUwVsInZR; expires=Thu, 18-Jun-2015 02:54:07
 GMT; domain=.google.com; path=/\0\0\0\xd4NID=67=pm8Ws9703eugHhhImX_hBpqhUyAhCUG
TebjDZ6YY_cP7CuvIA4x8ElgGaj6tOweXFxxjALoX1PwqFvHHkUY1kerw3vwM-VaIyyPVSADMqOnR-Ty
ed_bGU3bk6YSwUUeG; HttpOnly; expires=Wed, 18-Dec-2013 02:54:07 GMT; domain=.goog
le.com; path=/\0\0\0\xa9PREF=ID=9769c9a2d96728cf:U=3d59c2548337b74e:FF=0:NW=1:TM
=1371523471:LM=1371524047:S=vE5Y_06LhP4unse7; expires=Thu, 18-Jun-2015 02:54:07
 GMT; domain=.google.co.kr; path=/)"
</snippet></ROW><ROW><id>17148097</id><snippet>import demjson

for data in datalist:
    dct = demjson.decode(data)
    print dct['gallery'] # etc...
</snippet></ROW><ROW><id>17148137</id><snippet>django-cms</snippet></ROW><ROW><id>17148137</id><snippet>{% load extra_cms_tags %}
{% get_placeholder "My Placeholder" as my_placeholder %}

{% if my_placeholder %}
&lt;div&gt;
    {{ my_placeholder }}
&lt;/div&gt;
{% endif %}
</snippet></ROW><ROW><id>17148221</id><snippet>subprocess.call()</snippet></ROW><ROW><id>17148221</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>17148221</id><snippet>self.Destroy()
subprocess.Popen('python newframe.py', shell=True)
</snippet></ROW><ROW><id>17148334</id><snippet>
@staticmethod
def is_sequence(arg):
    ...
</snippet></ROW><ROW><id>17148334</id><snippet>
def is_sequence(self, arg):
    ...
</snippet></ROW><ROW><id>17148471</id><snippet>Update</snippet></ROW><ROW><id>17148471</id><snippet>class mainFrame(wx.Frame):

    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, "Aminozuurtoets V.1.0", size=(900,600))

        top_panel = wx.Panel(self)
        self.vraag = 1
        m_tekst = wx.StaticText(top_panel, -1, "Vraag " + str(self.vraag),(400,50), (100, -1), wx.ALIGN_CENTER)
        m_font = wx.Font(20, wx.DECORATIVE, wx.ITALIC, wx.NORMAL)
        m_tekst.SetFont(m_font)

        cijfer = random.randint(1,100)

        ### Make an attribute to access from buttonClick1 method.
        self.test2 = wx.StaticText(top_panel, -1, str(cijfer), (325,300))

        res_but = wx.Button(top_panel, label = "Resultaten", pos=(650, 400), size=(150, 200))
        ga_naar = wx.Button(top_panel, label = "Ga naar vraag", pos=(100, 400), size=(150, 200))
        ga_button = wx.Button(top_panel, label = "Volgende vraag", pos=(380, 400), size=(150, 200))
        self.Bind(wx.EVT_BUTTON, self.buttonClick1, ga_button)

    def buttonClick1(self, event):
        ### Change label of static text.
        self.test2.Label = str(random.randint(1,100))


    def closebutton(self, event):
        self.Close(True)
</snippet></ROW><ROW><id>17148619</id><snippet>str.split</snippet></ROW><ROW><id>17148619</id><snippet>str.split</snippet></ROW><ROW><id>17148619</id><snippet>&gt;&gt;&gt; strs = "1.2   1.6   0.4"
&gt;&gt;&gt; strs.split()
['1.2', '1.6', '0.4']
#use slicing as you need only first two items
&gt;&gt;&gt; [float(x) for x in strs.split()[:2]] 
[1.2, 1.6]
</snippet></ROW><ROW><id>17148619</id><snippet>mylist=[]
with open('x.dat') as f:
   for line in f:
       #apply int to the items of `str.split` to convert them into integers
       x, y = [float(z) for z in line.split()[:2]]
       mylist.append(Point(x, y))
</snippet></ROW><ROW><id>17148619</id><snippet>mylist=[]
with open('x.dat') as f:
   rows = 2
   for _ in xrange(rows):
       line = next(f)
       x, y, k = [float(z) for z in line.split()]
       mylist.append(Point(x, y, k))
</snippet></ROW><ROW><id>17148619</id><snippet>class point():
   def __init__(self,x = None,y =None,k =None,f =None):
      self.x = 0 if x is None else x  #assign default value only if the value was not passed
      self.y = 0 if y is None else y
      self.k = 0 if k is None else k
      self.f = -1 if f is None else f
</snippet></ROW><ROW><id>17148831</id><snippet>memcached</snippet></ROW><ROW><id>17148831</id><snippet>httpd</snippet></ROW><ROW><id>17148831</id><snippet>memcached</snippet></ROW><ROW><id>17149160</id><snippet>&gt;&gt;&gt; from tornado import template
&gt;&gt;&gt; t = template.Template('''
... &lt;div id="statistics-table"&gt;
...     {% for key, value in statistics.items() %}
...     {{key}} : {{value['number']}}
...     {% end %}
... &lt;/div&gt;
... ''')
&gt;&gt;&gt; statistics = { 1 : {'number' : 2},  2 : {'number' : 8}}
&gt;&gt;&gt; print(t.generate(statistics=statistics))

&lt;div id="statistics-table"&gt;

    1 : 2

    2 : 8

&lt;/div&gt;
</snippet></ROW><ROW><id>17149160</id><snippet>&lt;div id="statistics-table"&gt;
    {% for key in statistics %}
    {{key}} : {{statistics[key]['number']}}
    {% end %}
&lt;/div&gt;
</snippet></ROW><ROW><id>17149192</id><snippet>os.walk</snippet></ROW><ROW><id>17149192</id><snippet>topdown</snippet></ROW><ROW><id>17149192</id><snippet>True</snippet></ROW><ROW><id>17149192</id><snippet>dirnames</snippet></ROW><ROW><id>17149192</id><snippet>listdir</snippet></ROW><ROW><id>17149192</id><snippet>allfiles</snippet></ROW><ROW><id>17149192</id><snippet>rfind</snippet></ROW><ROW><id>17149192</id><snippet>os.walk()</snippet></ROW><ROW><id>17149192</id><snippet>path = os.path.dirname("/path/to/file.mp3")
target = "test.xml"
top = "/"
while True:
    if os.path.isfile(os.path.join(path,target)):
        #found
        break
    if path==top:   #alternative check for root dir: if os.path.dirname(path)==path
        #not found
        break    
    path=os.path.dirname(path)
</snippet></ROW><ROW><id>17149192</id><snippet>def walk_up(path,top):
    while True:
        yield path
        if path==top: raise StopIteration
        else: path=os.path.dirname(path)

found = None
for p in walk_up(os.path.dirname("/path/to/file.mp3"),"/"):
   p = os.path.join(p,target)
   if os.path.isfile(p):
      found = p
      break
</snippet></ROW><ROW><id>17149324</id><snippet>num_files</snippet></ROW><ROW><id>17149324</id><snippet>folderpath='d:/induvidual-articles'</snippet></ROW><ROW><id>17149324</id><snippet>induvidual</snippet></ROW><ROW><id>17149581</id><snippet>Literal</snippet></ROW><ROW><id>17149581</id><snippet>__new__</snippet></ROW><ROW><id>17149581</id><snippet>static __new__(lexical_or_value, lang=None, datatype=None, normalize=None)
</snippet></ROW><ROW><id>17149581</id><snippet>'en'</snippet></ROW><ROW><id>17149581</id><snippet>o = rdflib.Literal(u'Jackkifing',lang='en')
</snippet></ROW><ROW><id>17149592</id><snippet>any()</snippet></ROW><ROW><id>17149592</id><snippet>any(d['name'] == 'Test' for d in label)
</snippet></ROW><ROW><id>17149592</id><snippet>True</snippet></ROW><ROW><id>17149592</id><snippet>False</snippet></ROW><ROW><id>17149809</id><snippet>parse_link</snippet></ROW><ROW><id>17149809</id><snippet>def parse_link(self, response):
    loader = response.meta["loader"]
    hxs = HtmlXPathSelector(response)
    hero = hxs.select("//div[@class='post-header']/h2/text()").extract()
    loader.add_value('datums',hero)
    return loader.load_item()
</snippet></ROW><ROW><id>17149988</id><snippet>CLIENT_MULTI_STATEMENTS</snippet></ROW><ROW><id>17149988</id><snippet>CLIENT_MULTI_RESULTS</snippet></ROW><ROW><id>17149988</id><snippet>MySQLdb</snippet></ROW><ROW><id>17149988</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(db='test')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('select * from foo; show tables;')
2L
&gt;&gt;&gt; cur.fetchall()
((1L,), (1L,))
&gt;&gt;&gt; cur.nextset()
1
&gt;&gt;&gt; cur.fetchall()
(('foo',),)
</snippet></ROW><ROW><id>17149988</id><snippet>&gt;&gt;&gt; cur.execute('select * from foo; insert into foo values (123);')
2L
&gt;&gt;&gt; cur.nextset()
1
&gt;&gt;&gt; conn.commit()
&gt;&gt;&gt; cur.execute('select * from foo')
3L
&gt;&gt;&gt; cur.fetchall()
((1L,), (1L,), (123L,))
</snippet></ROW><ROW><id>17150253</id><snippet>my_form()</snippet></ROW><ROW><id>17150253</id><snippet>form = my_form(create_items())
</snippet></ROW><ROW><id>17150253</id><snippet>form = MyForm()
if form.validate_on_submit():
    ...
</snippet></ROW><ROW><id>17150253</id><snippet>my_form()</snippet></ROW><ROW><id>17150404</id><snippet>.args</snippet></ROW><ROW><id>17150404</id><snippet>KeyError</snippet></ROW><ROW><id>17150404</id><snippet>&gt;&gt;&gt; try:
...     {}['foo']
... except KeyError as ex:
...     print(ex.args[0])
... 
foo
</snippet></ROW><ROW><id>17150660</id><snippet>mat = [[0]*5]*5
</snippet></ROW><ROW><id>17150660</id><snippet>[0]*5</snippet></ROW><ROW><id>17150660</id><snippet>mat = [[0]*5 for _ in xrange(5)]
</snippet></ROW><ROW><id>17150839</id><snippet>@user_registered.connect_via(app)
def user_registered_sighandler(app, user, confirm_token):
    default_role = user_datastore.find_role("User")
    user_datastore.add_role_to_user(user, default_role)
    db.session.commit()
</snippet></ROW><ROW><id>17150928</id><snippet>paramstyle</snippet></ROW><ROW><id>17150928</id><snippet>format</snippet></ROW><ROW><id>17150928</id><snippet>cur.execute("INSERT INTO ... VALUES (?,?,?,?,?,?)", v)
</snippet></ROW><ROW><id>17150928</id><snippet>cur.execute("INSERT INTO ... VALUES (%s,%s,%s,%s,%s,%s)", v)
</snippet></ROW><ROW><id>17150928</id><snippet>conn.commit()</snippet></ROW><ROW><id>17150928</id><snippet>INSERT</snippet></ROW><ROW><id>17151323</id><snippet>import numpy as np

with open('datafile1.csv') as f:
    lines = (line for line in f if not line.startswith('#'))
    FH = np.loadtxt(lines, delimiter=',', skiprows=1)
</snippet></ROW><ROW><id>17151327</id><snippet>In [11]: a
Out[11]: array([0, 0, 0, 2, 2, 0, 2, 2, 2, 0])

In [12]: a1 = a &gt; 1
</snippet></ROW><ROW><id>17151327</id><snippet>roll</snippet></ROW><ROW><id>17151327</id><snippet>In [13]: a1_rshifted = np.roll(a1, 1)

In [14]: starts = a1 &amp; ~a1_rshifted  # it's True but the previous isn't

In [15]: ends = ~a1 &amp; a1_rshifted
</snippet></ROW><ROW><id>17151327</id><snippet>In [16]: np.nonzero(starts)[0], np.nonzero(ends)[0]
Out[16]: (array([3, 6]), array([5, 9]))
</snippet></ROW><ROW><id>17151327</id><snippet>In [17]: zip(np.nonzero(starts)[0], np.nonzero(ends)[0])
Out[17]: [(3, 5), (6, 9)]
</snippet></ROW><ROW><id>17151379</id><snippet>from collections import Counter
counts = Counter(time[:2]+'00' for time in times)
</snippet></ROW><ROW><id>17151530</id><snippet>temp</snippet></ROW><ROW><id>17151530</id><snippet>Array[c]</snippet></ROW><ROW><id>17151530</id><snippet>Array[c]</snippet></ROW><ROW><id>17151530</id><snippet>Array[i] = Array[d]</snippet></ROW><ROW><id>17151530</id><snippet>i==c</snippet></ROW><ROW><id>17151530</id><snippet>temp</snippet></ROW><ROW><id>17151530</id><snippet>Array[c]</snippet></ROW><ROW><id>17151762</id><snippet>getattr</snippet></ROW><ROW><id>17151762</id><snippet>return getattr(sample_namespace,keyword,None)
</snippet></ROW><ROW><id>17151762</id><snippet>namespace</snippet></ROW><ROW><id>17151762</id><snippet>vars(namespace)</snippet></ROW><ROW><id>17151912</id><snippet>sudo port install py27-numpy py27-scipy py27-matplotlib py27-ipython +notebook py27-pandas py27-sympy py27-nose</snippet></ROW><ROW><id>17152005</id><snippet>line4 = [
    'http://www.example.org/lexicon#' + synset_offset,
    'http://www.monnetproject.eu/lemon#gloss',
    gloss
]
</snippet></ROW><ROW><id>17152005</id><snippet>a = 'hello'
b = 'world'
c = 'i have spaces in me'

d = ' '.join((a,b,c)) # &lt;- correct way
# hello world i have spaces in me
print ' '.join(d.split(' ', 2)) # take joined, split out again making sure not to split `c`, then join back again!?
</snippet></ROW><ROW><id>17152310</id><snippet>class option_node:
    def __init__(self, prompt):
        self.prompt = prompt
        self.options = {}

    def add_option(self, option_text, next_node):
        self.options[option_text] = next_node

    def print_prompt(self):
        print(prompt)

    def select_input(self):
        for each in self.options:
            print(each)
        while(True)
            user_input = input("&gt;&gt;")
            if self.options.get(in):
                return self.options.get(in)


def main():
    nodes = []
    nodes.append(option_node("Welcome"))
    nodes.append(option_node("Stay Awhile"))
    nodes.append(option_node("That's fine, I don't like you much either"))

    nodes[0].add_option("Hello friend", nodes[1])
    nodes[0].add_option("Hello enemy", nodes[2])

    nodes[1].options = None
    nodes[2].options = None

    current_node = nodes[0]
    while current_node.options is not None:
        current_node.print_prompt()
        current_node = current_node.select_input()
</snippet></ROW><ROW><id>17152462</id><snippet>res = requests.get(url, allow_redirects=False)
</snippet></ROW><ROW><id>17152462</id><snippet>proxies=...</snippet></ROW><ROW><id>17152462</id><snippet>status_code:  302
response_url:  http://www.vevo.com/watch/kesha/crazy-kids/USRV81300226
headers:
{'access-control-allow-origin': '*',
 'cache-control': 'max-age=0, no-cache, no-store',
 'connection': 'keep-alive',
 'content-length': '159',
 'content-type': 'text/html; charset=utf-8',
 'date': 'Mon, 17 Jun 2013 16:32:15 GMT',
 'expires': 'Mon, 17 Jun 2013 16:32:15 GMT',
 'location': 'http://www.youtube.com/watch?v=xdeFB7I0YH4',
 'pragma': 'no-cache',
 'server': 'Microsoft-IIS/7.0',
 'vary': 'Accept-Encoding',
 'x-aspnet-version': '4.0.30319',
 'x-aspnetmvc-version': '3.0',
 'x-powered-by': 'ASP.NET'}
history:  []
</snippet></ROW><ROW><id>17152507</id><snippet>defaultdict</snippet></ROW><ROW><id>17152507</id><snippet>from collections import defaultdict
from itertools import count
from functools import partial

label_to_number = defaultdict(partial(next, count(1)))
[(label_to_number[label], label) for label in labels]
</snippet></ROW><ROW><id>17152507</id><snippet>labels</snippet></ROW><ROW><id>17152507</id><snippet>&gt;&gt;&gt; labels = ["brown", "black", "blue", "brown", "brown", "black"]
&gt;&gt;&gt; label_to_number = defaultdict(partial(next, count(1)))
&gt;&gt;&gt; [(label_to_number[label], label) for label in labels]
[(1, 'brown'), (2, 'black'), (3, 'blue'), (1, 'brown'), (1, 'brown'), (2, 'black')]
</snippet></ROW><ROW><id>17152507</id><snippet>labels</snippet></ROW><ROW><id>17152507</id><snippet>set()</snippet></ROW><ROW><id>17152507</id><snippet>enumerate()</snippet></ROW><ROW><id>17152507</id><snippet>label_to_number = {label: i for i, label in enumerate(set(labels), 1)}
[(label_to_number[label], label) for label in labels]
</snippet></ROW><ROW><id>17152507</id><snippet>set()</snippet></ROW><ROW><id>17152507</id><snippet>&gt;&gt;&gt; label_to_number = {label: i for i, label in enumerate(set(labels), 1)}
&gt;&gt;&gt; [(label_to_number[label], label) for label in labels]
[(2, 'brown'), (3, 'black'), (1, 'blue'), (2, 'brown'), (2, 'brown'), (3, 'black')]
</snippet></ROW><ROW><id>17152507</id><snippet>labels</snippet></ROW><ROW><id>17152796</id><snippet>&gt;&gt;&gt; set = 'oops'
&gt;&gt;&gt; set
'oops'
&gt;&gt;&gt; del set
&gt;&gt;&gt; set
&lt;type 'set'&gt;
</snippet></ROW><ROW><id>17152796</id><snippet>__builtins__</snippet></ROW><ROW><id>17152796</id><snippet>&gt;&gt;&gt; __builtins__.set
&lt;type 'set'&gt;
</snippet></ROW><ROW><id>17152848</id><snippet>replace</snippet></ROW><ROW><id>17152848</id><snippet>In [11]: df.index.map(lambda t: t.replace(year=2013, month=2, day=1))
Out[11]:
array([Timestamp('2013-02-01 10:00:00', tz=None),
       Timestamp('2013-02-01 10:05:00', tz=None),
       Timestamp('2013-02-01 10:10:00', tz=None),
       Timestamp('2013-02-01 10:15:00', tz=None)], dtype=object)
</snippet></ROW><ROW><id>17152848</id><snippet>In [12]: df.index = df.index.map(lambda t: t.replace(year=2013, month=2, day=1))
</snippet></ROW><ROW><id>17152848</id><snippet>date_parser</snippet></ROW><ROW><id>17152848</id><snippet>read_csv</snippet></ROW><ROW><id>17152848</id><snippet>In [21]: df = pd.read_csv(file_name, sep=';', parse_dates=[0], index_col=0, 
                          date_parser=lambda time: pd.Timestamp('2013/02/01 %s' % time))

In [22]: df
Out[22]:
                     val
TS
2013-02-01 10:00:00  0.1
2013-02-01 10:05:00  0.2
2013-02-01 10:10:00  0.3
2013-02-01 10:15:00  0.4
</snippet></ROW><ROW><id>17152849</id><snippet>dicmorning = {"goodmorning", "morning"}
raw_string = raw_input("test: ")
tokens = raw_string.split()
if dicmorning.intersection(tokens):
    print "good morning"
else:
    print "test"
</snippet></ROW><ROW><id>17153261</id><snippet>import collections

with open('topics.txt') as f:
    d = collections.defaultdict(list)
    for line in f:
        value, *keys = line.strip().split('~')
        for key in filter(None, keys):
            d[key].append(value)
</snippet></ROW><ROW><id>17153261</id><snippet>value, *keys = ...</snippet></ROW><ROW><id>17153461</id><snippet>def forums(d):
    dict_list = [('Subforums', 'Created by')]
    for i, (k, v) in enumerate(d.items(), 1):
        k = '{0}. {1}'.format(i, k)
        dict_list.append((k, v))

    col_width = max(len(word) for row in dict_list for word in row) + 2 # padding

    for row in dict_list:
            print ''.join(word.ljust(col_width) for word in row)
</snippet></ROW><ROW><id>17153461</id><snippet>dict</snippet></ROW><ROW><id>17153461</id><snippet>d</snippet></ROW><ROW><id>17153761</id><snippet>python3.lib</snippet></ROW><ROW><id>17153761</id><snippet>PyUnicode_FromString</snippet></ROW><ROW><id>17153761</id><snippet>python33.lib</snippet></ROW><ROW><id>17153771</id><snippet>curl(1)</snippet></ROW><ROW><id>17153771</id><snippet>-A</snippet></ROW><ROW><id>17153771</id><snippet>$ curl -I 'http://www.google.com/search?q=something%20unusual'
HTTP/1.1 403 Forbidden
...

$ curl -I 'http://www.google.com/search?q=something%20unusual' -A 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0'
HTTP/1.1 200 OK
</snippet></ROW><ROW><id>17153771</id><snippet>urllib2</snippet></ROW><ROW><id>17153771</id><snippet>"Python-urllib/2.6"</snippet></ROW><ROW><id>17153791</id><snippet>,</snippet></ROW><ROW><id>17153791</id><snippet>print "If there was a birth every 7 seconds, there would be: ",births,"births"
</snippet></ROW><ROW><id>17153791</id><snippet>,</snippet></ROW><ROW><id>17153791</id><snippet>&gt;&gt;&gt; print "foo","bar","spam"
foo bar spam
</snippet></ROW><ROW><id>17153791</id><snippet>print "If there was a birth every 7 seconds, there would be: {} births".format(births)
</snippet></ROW><ROW><id>17153791</id><snippet>&gt;&gt;&gt; print "{:d} {:03d} {:&gt;20f}".format(1,2,1.1)
1 002             1.100000
  ^^^
  0's padded to 2
</snippet></ROW><ROW><id>17153791</id><snippet>&gt;&gt;&gt; births = 4
&gt;&gt;&gt; print "If there was a birth every 7 seconds, there would be: ",births,"births"
If there was a birth every 7 seconds, there would be:  4 births

#formatting
&gt;&gt;&gt; print "If there was a birth every 7 seconds, there would be: {} births".format(births)
If there was a birth every 7 seconds, there would be: 4 births
</snippet></ROW><ROW><id>17153807</id><snippet>awk -F ' \\| ' -v OFS=' | ' '
    NR == FNR {val[$1] = $2; next}
    $1 in val {$3 = val[$1]} 
    {print}
' 2.csv 1.csv
</snippet></ROW><ROW><id>17153807</id><snippet>FS</snippet></ROW><ROW><id>17153893</id><snippet>statigr.am</snippet></ROW><ROW><id>17153893</id><snippet>http://statigr.am/controller_nl.php?action=nlGetMethod&amp;method=mediasTag&amp;value=cat&amp;max_id=1371516699343
</snippet></ROW><ROW><id>17153893</id><snippet>next_max_tag_id</snippet></ROW><ROW><id>17153893</id><snippet>pagination</snippet></ROW><ROW><id>17153893</id><snippet>controller_nl.php</snippet></ROW><ROW><id>17153893</id><snippet>urllib2</snippet></ROW><ROW><id>17153893</id><snippet>requests</snippet></ROW><ROW><id>17153893</id><snippet>json</snippet></ROW><ROW><id>17153893</id><snippet>beautifulsoup</snippet></ROW><ROW><id>17154032</id><snippet>def check_selling(track, excludes):
    """
    Returns True if all track's artists are allowed for selling. False otherwise
    """
    if track.artists.filter(selling=False).exists(): #If "selling" is a boolean
        excludes.append(track)
        return False
    return True
</snippet></ROW><ROW><id>17154222</id><snippet>{{ obj.id }}
</snippet></ROW><ROW><id>17154224</id><snippet>urlpatterns = patterns('',
   url(r'', include('app.urls')),
)
</snippet></ROW><ROW><id>17154531</id><snippet>import lxml.html

root = lxml.html.fromstring(document_string)
for elem in root.cssselect('elem.class'):
    print(elem.tag)
    print(elem.get('src'))
</snippet></ROW><ROW><id>17154531</id><snippet>import lxml.etree

root = lxml.etree.fromstring(document_string)
for elem in root.xpath('.//elem[contains(@class, "class")]'):
    print(elem.tag)
    print(elem.get('src'))
</snippet></ROW><ROW><id>17154552</id><snippet>with codecs.open(file_name, 'r', 'utf-16') as f:
</snippet></ROW><ROW><id>17154575</id><snippet>import collections

result = collections.defaultdict(int)

with open("beast","rt") as f:
    for line in f:
        hashes = line.split()
        key = '-'.join(hashes)
        result[key] += 1

print result
</snippet></ROW><ROW><id>17154575</id><snippet>defaultdict(&lt;type 'int'&gt;, {'Mammals-whales-Male': 1, 'Birds-Eagle-Female': 2})</snippet></ROW><ROW><id>17154623</id><snippet>pattern</snippet></ROW><ROW><id>17154623</id><snippet>repl</snippet></ROW><ROW><id>17154623</id><snippet>import os
import re

def fix_pys(path, pattern, repl):
    for root, dirs, files in os.walk(path):
        for f in files:
            name, ext = os.path.splitext(f)
            if ext == '.py':
                with open(os.path.join(root, f), 'r+') as py:
                    new_py = re.sub(pattern, repl, py.read())
                    py.seek(0)
                    py.write(new_py)
                    py.truncate()
</snippet></ROW><ROW><id>17154623</id><snippet>fix_pys(
    '/Users/me/my_folder',
    r'type\((\w+)\)\s*==\s*(\w+)',
    # r'' -&gt; raw string
    # \( and \) is a necessary escape, because braces means groups in regexes
    # \w+ means more than word character (word characters are: a-z A-Z 0-9 and _)
    # \s* means 0 or more spaces
    r'isinstance(\1, \2)'
    # \1 refers to the content of the first group
    # \2 refers to the content of the second group
)
</snippet></ROW><ROW><id>17154868</id><snippet>algorithm='mathematica_free'</snippet></ROW><ROW><id>17154868</id><snippet>'maxima'</snippet></ROW><ROW><id>17154874</id><snippet>elif unit2Done == "n":
    pass # this is used as a placeholder, so the condition's body isn't empty
else:
    print "Sorry. That's not a valid answer."
</snippet></ROW><ROW><id>17154874</id><snippet>unit2Done == "n"</snippet></ROW><ROW><id>17154874</id><snippet>pass</snippet></ROW><ROW><id>17154937</id><snippet>def checkinitial(TD):
    #This counts the number of '.fits' files in your directory
    check = len(glob.glob1(TD,"*.fits"))
    if not check:
        print 'There are no .FITS files in this directory! Try Again...'
        sys.exit()
return check

def sorter(TD, targcheck, inicheck):
    """This function will call the two counters and compare them until the number of processed
       files is greater than the files in the directory, thereby finishing the loop
    """ 
    for in_file in glob.iglob(os.path.join(TD,'*.fits')):
        print in_file  # This prints out the filenames the program is currently processing
        with pyfits.open(in_file) as HDU:
            # &lt;Process input file HDU here&gt;
        out_file_name = 'Processed_' + os.path.basename(in_file) + ".txt"
        with open(os.path.join(TD, out_file_name), "w") as copy:
            # &lt;Write stuff to your output file copy here&gt;
</snippet></ROW><ROW><id>17155082</id><snippet>retweeted_by</snippet></ROW><ROW><id>17155082</id><snippet>from twitter import *

t = Twitter(auth=OAuth(...))

tweets = t.statuses.user_timeline.snl()

for tweet in tweets:
    retweets = t.statuses.retweets_of_me(since_id=str(tweet['id']), max_id=str(tweet['id']))
    print retweets
</snippet></ROW><ROW><id>17155438</id><snippet>def facebooktest(request):
    fb_value = ast.literal_eval(request.body)
    fb_foodies = Foodie.objects.filter(facebook_id__in = fb_value.values())
    response = []
    for fb_foodie in fb_foodies:
        state = request.user.relationships.following().filter(username = fb_foodie.user.username).exists()
        userData = {
            'fbid': fb_foodie.facebook_id,
            'followState': int(state),
                }
        response.append(userData)
    return json.dumps(response)
</snippet></ROW><ROW><id>17155492</id><snippet>def new2(request, number):
    po=PurcchaseOrder.objects.get(pk=number)

    form = WorkflowForm(request.POST or None)
    if form.is_valid():
        new_flow = form.save()
        return HttpResponse('Good')
    else:
        return render(request, 'new-workflow.html', {'form': form, 'purchase': po})
</snippet></ROW><ROW><id>17155492</id><snippet>forms.ModelChoiceField(...)</snippet></ROW><ROW><id>17155492</id><snippet>ModelForm</snippet></ROW><ROW><id>17155492</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>17155568</id><snippet>def range_like(start, stop=None, step=1):
    if stop is None:
        start, stop = 0, start
    ...
</snippet></ROW><ROW><id>17155742</id><snippet>write()</snippet></ROW><ROW><id>17155742</id><snippet>for</snippet></ROW><ROW><id>17155742</id><snippet>lines</snippet></ROW><ROW><id>17155742</id><snippet>line</snippet></ROW><ROW><id>17155742</id><snippet>f</snippet></ROW><ROW><id>17155742</id><snippet>"w"</snippet></ROW><ROW><id>17155742</id><snippet>f.close</snippet></ROW><ROW><id>17155742</id><snippet>line</snippet></ROW><ROW><id>17155742</id><snippet>n = int(input('How many tracks are in the album?: '))


f=open("directory","w")

for i in range(n):

    line = raw_input('Next Track: ') 
    f.write("Track Name/Rating: " + line +"\n")
f.close()
</snippet></ROW><ROW><id>17155758</id><snippet>sys.argv</snippet></ROW><ROW><id>17155758</id><snippet>import sys

# this part executes when the script is run from the command line
if __name__ == '__main__':
    if len(sys.argv) != 2: # check for the correct number of arguments
        print 'usage: python kb.py cur'
    else:
        call_your_code(sys.argv[1]) # first command line argument
</snippet></ROW><ROW><id>17155758</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>17155758</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>17155883</id><snippet>.string</snippet></ROW><ROW><id>17155883</id><snippet>i</snippet></ROW><ROW><id>17155883</id><snippet>In [12]: soup.i.findNextSibling(text=True)
Out[12]: u' Not Italic stuff'
</snippet></ROW><ROW><id>17155922</id><snippet>CELERY_ALWAYS_EAGER</snippet></ROW><ROW><id>17155922</id><snippet>True</snippet></ROW><ROW><id>17155922</id><snippet>apply_async()</snippet></ROW><ROW><id>17155922</id><snippet>apply()</snippet></ROW><ROW><id>17155922</id><snippet>EagerResult</snippet></ROW><ROW><id>17155922</id><snippet>ALWAYS_EAGER = True</snippet></ROW><ROW><id>17155922</id><snippet>AsyncResult</snippet></ROW><ROW><id>17155922</id><snippet>AsyncResult</snippet></ROW><ROW><id>17155922</id><snippet>CELERY_ALWAYS_EAGER = True</snippet></ROW><ROW><id>17155922</id><snippet>EagerResult</snippet></ROW><ROW><id>17155922</id><snippet>AsyncResult</snippet></ROW><ROW><id>17155922</id><snippet>AsyncResult</snippet></ROW><ROW><id>17155922</id><snippet>CELERY_ALWAYS_EAGER = False</snippet></ROW><ROW><id>17155922</id><snippet>AsyncResult</snippet></ROW><ROW><id>17156367</id><snippet>&gt;&gt;&gt; data = "00000111010110101"
&gt;&gt;&gt; new_data = data + '0' * ((8 - len(data)) % 8)
&gt;&gt;&gt; '{0:0{width}x}'.format(int(new_data, 2), width=len(new_data) / 4)
'075a80'
</snippet></ROW><ROW><id>17156414</id><snippet>import re

camel_pat = re.compile(r'([A-Z])')
under_pat = re.compile(r'_([a-z])')

def camel_to_underscore(name):
    return camel_pat.sub(lambda x: '_' + x.group(1).lower(), name)

def underscore_to_camel(name):
    return under_pat.sub(lambda x: x.group(1).upper(), name)
</snippet></ROW><ROW><id>17156414</id><snippet>&gt;&gt;&gt; camel_to_underscore('camelCaseNames')
'camel_case_names'
&gt;&gt;&gt; underscore_to_camel('names_with_underscores')
'namesWithUnderscores'
</snippet></ROW><ROW><id>17156414</id><snippet>lambda</snippet></ROW><ROW><id>17156414</id><snippet>dict</snippet></ROW><ROW><id>17156414</id><snippet>def convert_json(d, convert):
    new_d = {}
    for k, v in d.iteritems():
        new_d[convert(k)] = convert_json(v,convert) if isinstance(v,dict) else v
    return new_d
</snippet></ROW><ROW><id>17156414</id><snippet>&gt;&gt;&gt; json_obj = {'nomNom': {'fooNom': 2, 'camelFoo': 3}, 'camelCase': {'caseFoo': 4, 'barBar': {'fooFoo': 44}}}
&gt;&gt;&gt; convert_json(json_obj, camel_to_underscore)
{'nom_nom': {'foo_nom': 2, 'camel_foo': 3}, 'camel_case': {'case_foo': 4, 'bar_bar': {'foo_foo': 44}}}
</snippet></ROW><ROW><id>17156414</id><snippet>load</snippet></ROW><ROW><id>17156414</id><snippet>dump</snippet></ROW><ROW><id>17156414</id><snippet>import json

def convert_load(*args, **kwargs):
    json_obj = json.load(*args, **kwargs)
    return convert_json(json_obj, camel_to_underscore)

def convert_dump(*args, **kwargs):
    args = (convert_json(args[0], underscore_to_camel),) + args[1:]
    json.dump(*args, **kwargs)
</snippet></ROW><ROW><id>17156414</id><snippet>json.load</snippet></ROW><ROW><id>17156414</id><snippet>json.dump</snippet></ROW><ROW><id>17156440</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = 'Consumer spending in the US rose to about 62% of GDP in 1960, where it stayed until about 1981, and has since risen to 71% in 2013'
&gt;&gt;&gt; re.findall(r'\w+\s\d+.*?\s\w+',strs)
['about 62% of', 'in 1960, where', 'about 1981, and', 'to 71% in']
</snippet></ROW><ROW><id>17156524</id><snippet>while</snippet></ROW><ROW><id>17156524</id><snippet>import os
root = raw_input("Where is the web root? "
while not os.path.isdir(root):
    print "Directory not found, try again"
    root = raw_input("Where is the web root? ")

print "Using %r" % (root)
#or do something else with root here
</snippet></ROW><ROW><id>17156635</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>17156635</id><snippet>sorted()</snippet></ROW><ROW><id>17156635</id><snippet>key_func = lambda x: x[0][1][x[1]] if len(x[0][1]) &gt; x[1] else None
itertools.groupby(sorted(data, key=key_func), key_func)
</snippet></ROW><ROW><id>17156722</id><snippet>9</snippet></ROW><ROW><id>17156722</id><snippet>0</snippet></ROW><ROW><id>17156722</id><snippet>import csv
from itertools import chain, islice, repeat

COLS = 9 # or pre-scan file to get max columns
FILL_VALUE = 0 # or None, or blank for instance
with open(filename) as fin:
    csvin = csv.reader(fin) # use appropriate delimiter/dialect settings
    non_blanks = (row for row in csvin if row[0]) # filter out rows with blank 1st col
    matrix = [list(islice(chain(row, repeat(FILL_VALUE)), COLS)) for row in non_blanks] 
</snippet></ROW><ROW><id>17156722</id><snippet>numpy</snippet></ROW><ROW><id>17156722</id><snippet>loadtxt()</snippet></ROW><ROW><id>17156861</id><snippet>import datetime

def pubdate(tag):
    return '&lt;{tag}&gt;{date}&lt;/{tag}&gt;'.format(
        date = datetime.date.today().strftime("%d %B %Y"),
        tag = tag
    )
</snippet></ROW><ROW><id>17156861</id><snippet>print pubdate('pubDate')
</snippet></ROW><ROW><id>17156861</id><snippet>&lt;pubDate&gt;17 June 2013&lt;/pubDate&gt;
</snippet></ROW><ROW><id>17156887</id><snippet>d = {}
for key, val in list1:
    if key not in d:
        d[key] = []
    d[key].append(val)
</snippet></ROW><ROW><id>17156887</id><snippet>d2 = dict((k, len(vallist)) for k, vallist in d.iteritems())
</snippet></ROW><ROW><id>17156955</id><snippet>c=np.ones((9,9,9))*np.arange(1,10)
</snippet></ROW><ROW><id>17156955</id><snippet>c[:,:,0]</snippet></ROW><ROW><id>17156955</id><snippet>c[:,:,-1]</snippet></ROW><ROW><id>17156955</id><snippet>c[0,:,:]</snippet></ROW><ROW><id>17156972</id><snippet>Context.term</snippet></ROW><ROW><id>17156972</id><snippet>socket = context.socket(zmq.REQ)
socket_id = randomID()
socket.identity = ramdomID()
socket.linger = 250 # 250ms = 1/4 s
socket.connect("tcp://dead_server")
</snippet></ROW><ROW><id>17157053</id><snippet>import re

name1 = 'constant_prefix_my file name.csv'
name2 = 'constant_prefix_myfilename.csv'

def get_name(string):
    return re.findall(r'constant_prefix_(my.*)\.csv', string)[0]
</snippet></ROW><ROW><id>17157053</id><snippet>print get_name(name1)
print get_name(name2)
</snippet></ROW><ROW><id>17157053</id><snippet>my file name
myfilename
</snippet></ROW><ROW><id>17157053</id><snippet>names = [get_name(n) for n in [name1, name2]]
print names
</snippet></ROW><ROW><id>17157053</id><snippet>['my file name', 'myfilename']
</snippet></ROW><ROW><id>17157110</id><snippet>In [11]: g_unstacked = g.unstack()

In [12]: g_unstacked
Out[12]:
y                 (-0.565, 0.12]  (0.12, 0.791]  (0.791, 2.57]  [-2.177, -0.565]
x
(-0.068, 0.625]         0.389408       0.267252       0.283344          0.258337
(-0.892, -0.068]       -0.121413      -0.471889      -0.448977         -0.462180
(0.625, 1.639]          0.987372       1.006496       0.830710          1.202158
[-3.124, -0.892]       -1.513954      -1.482813      -1.394198         -1.756679
</snippet></ROW><ROW><id>17157110</id><snippet>unique</snippet></ROW><ROW><id>17157110</id><snippet>In [13]: g.index.get_level_values(0).unique()
Out[13]:
array(['[-3.124, -0.892]', '(-0.892, -0.068]', '(-0.068, 0.625]',
       '(0.625, 1.639]'], dtype=object)
</snippet></ROW><ROW><id>17157110</id><snippet>reindex</snippet></ROW><ROW><id>17157110</id><snippet>In [14]: g_unstacked.reindex(g.index.get_level_values(0).unique())
Out[14]:
y                 (-0.565, 0.12]  (0.12, 0.791]  (0.791, 2.57]  [-2.177, -0.565]
[-3.124, -0.892]       -1.513954      -1.482813      -1.394198         -1.756679
(-0.892, -0.068]       -0.121413      -0.471889      -0.448977         -0.462180
(-0.068, 0.625]         0.389408       0.267252       0.283344          0.258337
(0.625, 1.639]          0.987372       1.006496       0.830710          1.202158
</snippet></ROW><ROW><id>17157110</id><snippet>In [15]: g_unstacked.reindex_axis(g.index.get_level_values(1).unique(), axis=1)
</snippet></ROW><ROW><id>17157110</id><snippet>np.unique</snippet></ROW><ROW><id>17157246</id><snippet>else</snippet></ROW><ROW><id>17157246</id><snippet>pla.healthRem(7)</snippet></ROW><ROW><id>17157246</id><snippet>pla</snippet></ROW><ROW><id>17157246</id><snippet>pla = player()</snippet></ROW><ROW><id>17157246</id><snippet>pla = player()</snippet></ROW><ROW><id>17157246</id><snippet>pla</snippet></ROW><ROW><id>17157246</id><snippet>attack()</snippet></ROW><ROW><id>17157246</id><snippet>pla</snippet></ROW><ROW><id>17157246</id><snippet>pla = player()</snippet></ROW><ROW><id>17157246</id><snippet>pla = player()</snippet></ROW><ROW><id>17157246</id><snippet>pla</snippet></ROW><ROW><id>17157246</id><snippet>global pla</snippet></ROW><ROW><id>17157246</id><snippet>pla = player()</snippet></ROW><ROW><id>17157290</id><snippet>--extra-search-dir</snippet></ROW><ROW><id>17157303</id><snippet>None</snippet></ROW><ROW><id>17157303</id><snippet>def perms(elements, setLength=None):
    if setLength is None:
        setLength = elements
</snippet></ROW><ROW><id>17157303</id><snippet>None</snippet></ROW><ROW><id>17157303</id><snippet>_sentinel = object()

def perms(elements, setLength=_sentinel):
    if setLength is _sentinel:
        setLength = elements
</snippet></ROW><ROW><id>17157303</id><snippet>setLength</snippet></ROW><ROW><id>17157303</id><snippet>None</snippet></ROW><ROW><id>17157439</id><snippet>entries_per_column</snippet></ROW><ROW><id>17157439</id><snippet>row</snippet></ROW><ROW><id>17157439</id><snippet>width</snippet></ROW><ROW><id>17157439</id><snippet>column</snippet></ROW><ROW><id>17157439</id><snippet>column</snippet></ROW><ROW><id>17157439</id><snippet>row</snippet></ROW><ROW><id>17157439</id><snippet>entry</snippet></ROW><ROW><id>17157439</id><snippet>entry</snippet></ROW><ROW><id>17157439</id><snippet>ret</snippet></ROW><ROW><id>17157439</id><snippet>ret</snippet></ROW><ROW><id>17157439</id><snippet>ret</snippet></ROW><ROW><id>17157439</id><snippet>ret</snippet></ROW><ROW><id>17157439</id><snippet>row</snippet></ROW><ROW><id>17157439</id><snippet>column</snippet></ROW><ROW><id>17157439</id><snippet>entries</snippet></ROW><ROW><id>17158278</id><snippet>time</snippet></ROW><ROW><id>17158278</id><snippet>from time import time, sleep

import time
</snippet></ROW><ROW><id>17158278</id><snippet>time</snippet></ROW><ROW><id>17158278</id><snippet>import time

s = scheduler(time.time, time.sleep)

# ...
    pubtime = time.strftime('%H:%M')
</snippet></ROW><ROW><id>17158278</id><snippet>from time import time, sleep, strftime

s = scheduler(time, sleep)

# ...
    pubtime = strftime('%H:%M')
</snippet></ROW><ROW><id>17158412</id><snippet>import re
re.findall("href=([^ &gt;]+)",x)
</snippet></ROW><ROW><id>17158496</id><snippet>./manage.py schemamigration --initial my_module</snippet></ROW><ROW><id>17158496</id><snippet>UserProfile</snippet></ROW><ROW><id>17158496</id><snippet>manage.py migrate my_module</snippet></ROW><ROW><id>17158594</id><snippet>try</snippet></ROW><ROW><id>17158594</id><snippet>except</snippet></ROW><ROW><id>17158594</id><snippet>finally</snippet></ROW><ROW><id>17158594</id><snippet>with</snippet></ROW><ROW><id>17158594</id><snippet>except</snippet></ROW><ROW><id>17158594</id><snippet>catch</snippet></ROW><ROW><id>17158594</id><snippet>SomeError</snippet></ROW><ROW><id>17158594</id><snippet>Error</snippet></ROW><ROW><id>17158595</id><snippet>  def __add__(self, object):
    #Now you have access to self (the first operand of the addition) and the second operand of the addition, you'd probably want to do something like the following:
    if type(object) == Sentence:
      return self.words + object.words
    if type(object) == list:
      return self.words + list
    if type(object) == Character:
      return self.words + str(Character)
</snippet></ROW><ROW><id>17158735</id><snippet>import matplotlib.ticker as ticker

# a is an axes object, from figure.get_axes()

# Hide major tick labels
a.xaxis.set_major_formatter(ticker.NullFormatter())

# Customize minor tick labels
a.xaxis.set_minor_locator(ticker.FixedLocator([1.5,2.5,3.5,4.5,5.5]))
a.xaxis.set_minor_formatter(ticker.FixedFormatter(['1','2','3','4','5']))
</snippet></ROW><ROW><id>17158742</id><snippet>import re
a = re.search('con(.*)tent(.*)more(.*)','contwotentonemorethree')
print a.groups()
# ('two', 'one', 'three')
</snippet></ROW><ROW><id>17158742</id><snippet>re.escape(str)
</snippet></ROW><ROW><id>17158742</id><snippet>part1 = re.escape('con(')
part2 = re.escape('(tent')
print re.findall(part1 + '(.*)' + part2,'con(two)tent')
</snippet></ROW><ROW><id>17158798</id><snippet>data()</snippet></ROW><ROW><id>17158798</id><snippet>CONTENT_LENGTH</snippet></ROW><ROW><id>17158798</id><snippet>EOF</snippet></ROW><ROW><id>17158798</id><snippet>ctx.env['wsgi.input']</snippet></ROW><ROW><id>17158798</id><snippet>ctx.data</snippet></ROW><ROW><id>17158798</id><snippet>CONTENT_LENGTH</snippet></ROW><ROW><id>17158807</id><snippet>a = ['in 1978 by', 'History', 'members', 'albums', 'June 4th, 1979', 'October 7,1986): "The Lounge', 'In 1984 the', 'early 1990s; prominent']

new = [el for el in a if any(ch.isdigit() for ch in el)]
# ['in 1978 by', 'June 4th, 1979', 'October 7,1986): "The Lounge', 'In 1984 the', 'early 1990s; prominent']
</snippet></ROW><ROW><id>17158821</id><snippet>time.strftime('%H:%M:%S %Z')[:13]
</snippet></ROW><ROW><id>17158902</id><snippet>import httplib, sys, re

def spider(link, depth=0):
    if(depth &gt; 2): return []

    try:
        conn = httplib.HTTPConnection(link)
        conn.request("GET", "/")
        r2 = conn.getresponse()
        data = r2.read().split('\n')
        links = []
        for x in data[:]:
            if link in x:
                a=''.join(re.findall("href=([^ &gt;]+)",x))
                a=a.translate(None, '"' + "'")
                if a:
                    links.append(a)

        # Recurse for each link
        for link in links:
            links += spider(link, (depth + 1))

        return links

    except:
        exit(1)

print spider("http://www.yahoo.com")
</snippet></ROW><ROW><id>17159030</id><snippet>form_class</snippet></ROW><ROW><id>17159030</id><snippet>class ResponseCreate(CreateView):
    model = Response
    form_class = ResponseForm
</snippet></ROW><ROW><id>17159094</id><snippet>def g(y):
    return f(2, y)
</snippet></ROW><ROW><id>17159094</id><snippet>g = lambda y: f(2, y)
</snippet></ROW><ROW><id>17159094</id><snippet>functools.partial</snippet></ROW><ROW><id>17159094</id><snippet>import functools

def f(x, y):
    return x + y

g = functools.partial(f, x=2)
</snippet></ROW><ROW><id>17159094</id><snippet>g(y=3)  # 5
</snippet></ROW><ROW><id>17159131</id><snippet>python-cherrypy</snippet></ROW><ROW><id>17159131</id><snippet>cherrypy.tools</snippet></ROW><ROW><id>17159131</id><snippet>sudo pip install -U cherrypy</snippet></ROW><ROW><id>17159206</id><snippet>admin</snippet></ROW><ROW><id>17159206</id><snippet>templates</snippet></ROW><ROW><id>17159206</id><snippet>yourapp/
    app.py
    templates/
        master.html  # &lt;-- This will not override admin/master
        admin/
            master.html  # &lt;-- This one, however, will :-)
</snippet></ROW><ROW><id>17159209</id><snippet>zorder</snippet></ROW><ROW><id>17159209</id><snippet>figure()
ax1 = plt.subplot(111)
ax2 = ax1.twinx()
ax2.plot([1, 2, 3], [0.3, 0.2, 0.1], 'r')  
ax1.plot([1, 2, 3], [1, 2, 3], 'b', label='ax1')
ax1.legend(loc=2)

ax1.set_zorder(1) # make it on top
ax1.set_frame_on(False) # make it transparent
ax2.set_frame_on(True) # make sure there is any background

plt.show()
</snippet></ROW><ROW><id>17159209</id><snippet>zorder</snippet></ROW><ROW><id>17159209</id><snippet>ax1</snippet></ROW><ROW><id>17159209</id><snippet>ax1</snippet></ROW><ROW><id>17159209</id><snippet>ax1</snippet></ROW><ROW><id>17159209</id><snippet>ax2</snippet></ROW><ROW><id>17159209</id><snippet>ax2</snippet></ROW><ROW><id>17159209</id><snippet>Figure.ledgend()</snippet></ROW><ROW><id>17159209</id><snippet>figure</snippet></ROW><ROW><id>17159209</id><snippet>axes</snippet></ROW><ROW><id>17159209</id><snippet>fig = figure()

ax1 = plt.subplot(111)
ax2 = ax1.twinx()

ln2, = ax2.plot([1, 2, 3], [0.3, 0.2, 0.1], 'r', label='ax2')  
ln1, = ax1.plot([1, 2, 3], [1, 2, 3], 'b', label='ax1')

interesting_lines = [ln1, ln2]

fig.legend(*zip(*[(il, il.get_label()) for il in interesting_lines]), loc=2)

plt.show()
</snippet></ROW><ROW><id>17159211</id><snippet>readline</snippet></ROW><ROW><id>17159211</id><snippet>readline</snippet></ROW><ROW><id>17159211</id><snippet>while True:
    msg = fh.readline()
    if not msg:
        break
    msg = msg.split(eqenc)
    print(msg)
</snippet></ROW><ROW><id>17159211</id><snippet>readline</snippet></ROW><ROW><id>17159211</id><snippet>urlopen</snippet></ROW><ROW><id>17159211</id><snippet>for msg in fh:
    print(msg)
</snippet></ROW><ROW><id>17159211</id><snippet>try</snippet></ROW><ROW><id>17159211</id><snippet>except</snippet></ROW><ROW><id>17159211</id><snippet>finally</snippet></ROW><ROW><id>17159211</id><snippet>SyntaxError</snippet></ROW><ROW><id>17159211</id><snippet>try:
    for msg in fh:
        print(msg)
except Exception as e:
    print('Exception: {}'.format(e))
</snippet></ROW><ROW><id>17159211</id><snippet>GET</snippet></ROW><ROW><id>17159211</id><snippet>urlopen</snippet></ROW><ROW><id>17159211</id><snippet>urlencode</snippet></ROW><ROW><id>17159211</id><snippet>fh.getheader('Content-Type')</snippet></ROW><ROW><id>17159211</id><snippet>login_info</snippet></ROW><ROW><id>17159211</id><snippet>SID</snippet></ROW><ROW><id>17159211</id><snippet>login_info['SID']</snippet></ROW><ROW><id>17159211</id><snippet>import urllib.request
import urllib.parse

def client_login(email, passwd, account_type, service):
    params = {'Email': email,
              'Passwd': passwd,
              'accountType': account_type,
              'service': service}
    qs = urllib.parse.urlencode(params)
    url = 'https://accounts.google.com/ClientLogin?'
    with urllib.request.urlopen(url + qs) as fh:
        return dict(line.strip().decode('ascii').split('=', 1) for line in fh)

email = 'myemail@stackoverflow.com'
password = 'hidden'
accounttype = 'GOOGLE'
service = 'adwords'
try:
    results = client_login(email, password, accounttype, service)
    for key, value in results.items():
        print('key "{}" is "{}".format(key, value))
except Exception as e:
    print('Exception: {}'.format(e))
</snippet></ROW><ROW><id>17159229</id><snippet>cycles = {}

rows = contents.splitlines()  # split the `contents` text blob into individual lines

for row in rows[1:]:  # the first line in your question is a header - [1:] skips it
    row = rows.split()  # split each line by whitespace
    cycle = cycles.setdefault(row[0], {'id': row[0], 'rows': []}
    cycle['rows'].append({'cycle':row[0], 'test_time': row[1], 'current': row[2], ...})
</snippet></ROW><ROW><id>17159229</id><snippet>for key, cycle in cycles.items():
    cycles['rows'].sort(key=itemgetter('test_time'))
</snippet></ROW><ROW><id>17159229</id><snippet> for key, cycle in cycles.items():
    output_row(cycles['rows'][-1])
</snippet></ROW><ROW><id>17159229</id><snippet> for key, cycle in sorted(cycles.items())[:-5]:
    output_rows(cycles['rows'])
</snippet></ROW><ROW><id>17159229</id><snippet>for idx in range(4, 31):
    cycle = cycles[str(idx)]
    output_rows(cycles['rows'])
</snippet></ROW><ROW><id>17159253</id><snippet>u"\r\n".encode("utf-16")
</snippet></ROW><ROW><id>17159253</id><snippet>'\r\0\n\0'</snippet></ROW><ROW><id>17159253</id><snippet>f.write('\r\0\n\0')
</snippet></ROW><ROW><id>17159253</id><snippet>'\r\0\r\n\0'</snippet></ROW><ROW><id>17159253</id><snippet>\r\n</snippet></ROW><ROW><id>17159253</id><snippet>\0</snippet></ROW><ROW><id>17159253</id><snippet>L\0</snippet></ROW><ROW><id>17159253</id><snippet>\0L</snippet></ROW><ROW><id>17159253</id><snippet>䰀</snippet></ROW><ROW><id>17159253</id><snippet>f = open("testfile.txt", "wb")
</snippet></ROW><ROW><id>17159253</id><snippet>\n</snippet></ROW><ROW><id>17159253</id><snippet>'utf-16-le'</snippet></ROW><ROW><id>17159253</id><snippet>'utf-16-be'</snippet></ROW><ROW><id>17159253</id><snippet>io</snippet></ROW><ROW><id>17159253</id><snippet>codecs</snippet></ROW><ROW><id>17159253</id><snippet>f = io.open("testfile.txt", "w", encoding="utf-8")
f.write("Line one")
f.write(u"\r\n")
f.write("Line two")
</snippet></ROW><ROW><id>17159276</id><snippet>In [11]: dat.index = pd.to_datetime(dat.pop('datetime'), utc=True)

In [12]: dat
Out[12]:
                    label  value
datetime
2011-07-19 07:00:00     a      0
2011-07-19 08:00:00     a      1
2011-07-19 09:00:00     a      2
2011-07-19 07:00:00     b      3
2011-07-19 08:00:00     b      4
2011-07-19 09:00:00     b      5
</snippet></ROW><ROW><id>17159276</id><snippet>tz_localize</snippet></ROW><ROW><id>17159276</id><snippet>In [12]: dat.index = dat.index.tz_localize('UTC').tz_convert('US/Pacific')

In [13]: dat
Out[13]:
                          label  value
datetime
2011-07-19 00:00:00-07:00     a      0
2011-07-19 01:00:00-07:00     a      1
2011-07-19 02:00:00-07:00     a      2
2011-07-19 00:00:00-07:00     b      3
2011-07-19 01:00:00-07:00     b      4
2011-07-19 02:00:00-07:00     b      5
</snippet></ROW><ROW><id>17159276</id><snippet>In [14]: dat.set_index('label', append=True).swaplevel(0, 1)
Out[14]:
                           value
label datetime
a     2011-07-19 07:00:00      0
      2011-07-19 08:00:00      1
      2011-07-19 09:00:00      2
b     2011-07-19 07:00:00      3
      2011-07-19 08:00:00      4
      2011-07-19 09:00:00      5
</snippet></ROW><ROW><id>17159276</id><snippet>In [15]: dat.index.levels[1] = dat.index.get_level_values(1).tz_localize('UTC').tz_convert('US/Pacific')

In [16]: dat1
Out[16]:
                                 value
label datetime
a     2011-07-19 00:00:00-07:00      0
      2011-07-19 01:00:00-07:00      1
      2011-07-19 02:00:00-07:00      2
b     2011-07-19 00:00:00-07:00      3
      2011-07-19 01:00:00-07:00      4
      2011-07-19 02:00:00-07:00      5
</snippet></ROW><ROW><id>17159278</id><snippet>parse_known_args()</snippet></ROW><ROW><id>17159278</id><snippet>parse_args()</snippet></ROW><ROW><id>17159278</id><snippet>#!/bin/env python 

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-a', action="store_true")
parser.add_argument('-b', action="store_true")

opts = parser.parse_known_args()
# Print info about flags
if opts[0].a: print('You set the option "-a"')
if opts[0].b: print('You set the option "-b"')
# Collect remainder (opts[1] is a list (possibly empty) of all remaining args)
if opts[1]: print('You passed the strings %s' % opts[1])
</snippet></ROW><ROW><id>17159278</id><snippet>#!/bin/env python 

import os
import argparse

class MyParser(argparse.ArgumentParser):
    def format_help(self):
        help = super(MyParser, self).format_help()
        helplines = help.splitlines()
        helplines[0] += ' [FOO]'
        helplines.append('  FOO         some description of FOO')
        helplines.append('')    # Just a trick to force a linesep at the end
        return os.linesep.join(helplines)

parser = MyParser()
parser.add_argument('-a', action="store_true")
parser.add_argument('-b', action="store_true")

opts = parser.parse_known_args()
# Print info about flags
if opts[0].a: print('You set the option "-a"')
if opts[0].b: print('You set the option "-b"')
# Collect remainder
if opts[1]: print('You passed the strings %s' % opts[1])
</snippet></ROW><ROW><id>17159278</id><snippet>[FOO]</snippet></ROW><ROW><id>17159278</id><snippet>FOO</snippet></ROW><ROW><id>17159285</id><snippet>task_retry_limit</snippet></ROW><ROW><id>17159285</id><snippet>threadsafe: true</snippet></ROW><ROW><id>17159290</id><snippet>values = tuple(generatevalues(q))
try:
    a, b, c, x, y, z = values
except ValueError as e:
    print(len(values)) # for example
    print(values)
</snippet></ROW><ROW><id>17159290</id><snippet>values = tuple(generatevalues(q))
try:
    a, b, c, x, y, z = values
except ValueError as e:
    import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>17159297</id><snippet>    printstr = ""
    if re.search...
        ...
        printstr += "Label for first item " + split[1] + ", "
    if re.search...
        ...
        printstr += "Label for second item " + ip[2]
    print printstr
</snippet></ROW><ROW><id>17159329</id><snippet>self.ui.actionExport_Database</snippet></ROW><ROW><id>17159329</id><snippet>activated</snippet></ROW><ROW><id>17159329</id><snippet>triggered</snippet></ROW><ROW><id>17159403</id><snippet>manage_pages</snippet></ROW><ROW><id>17159403</id><snippet>for acc in account["data"]:
    if acc["id"] == "345632575539519":
        print acc["access_token"]
        self.facebook_request("/345632575539519/feed", post_args={"message":"hello", "link": "http://www.example.com"}, access_token=acc["access_token"], callback=self.async_callback(self._on_page_post))
</snippet></ROW><ROW><id>17159645</id><snippet>hashlib</snippet></ROW><ROW><id>17159645</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; page = requests.get('http://www.stackoverflow.com')
&gt;&gt;&gt; hashlib.sha256(page.text.encode('utf-8')).hexdigest()
'807ea5e7c419aefc7a40ba1140ba6ef4001c60f3c21142eb743bc1d393c1bb62'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17159675</id><snippet>__init__</snippet></ROW><ROW><id>17159675</id><snippet>class MyForm(forms.Form):
    def __init__(self, *args, **kwargs):
        questions = kwargs.pop('questions')
        super(MyForm, self).__init__(*args, **kwargs)
        counter = 1
        for q in questions:
            self.fields['question-' + str(counter)] = forms.CharField(label=question)
            counter += 1
</snippet></ROW><ROW><id>17159675</id><snippet>form = MyForm(questions=your_list_of_questions)
</snippet></ROW><ROW><id>17159726</id><snippet>get</snippet></ROW><ROW><id>17159726</id><snippet>ob = MyModel.objects.select_for_update().get(pk=1)
</snippet></ROW><ROW><id>17159880</id><snippet>num1</snippet></ROW><ROW><id>17159880</id><snippet>num2</snippet></ROW><ROW><id>17159880</id><snippet>str.split()</snippet></ROW><ROW><id>17159880</id><snippet>&gt;&gt;&gt; num1 = '12345'
&gt;&gt;&gt; num2 = '34266 73628'
&gt;&gt;&gt; num1.split()
['12345']
&gt;&gt;&gt; num2.split()
['34266', '73628']
</snippet></ROW><ROW><id>17159934</id><snippet>cr.description[0][0]</snippet></ROW><ROW><id>17159934</id><snippet>cr.description[1][0]</snippet></ROW><ROW><id>17160039</id><snippet>__init__</snippet></ROW><ROW><id>17160039</id><snippet>class Slide:

    picture = None
    sound = None

    def __init__(self):
        # Nothing here
        pass

    def setPicture(self, pic):
        self.picture = pic

    def setSound(self, snd):
        self.sound = snd

    def show(self):
       show (self.picture)
       blockingPlay(self.sound)

# "Main"
s = Slide()
s.setPicture("foo.jpg")
s.setSound("bar.wav")
s.show()
</snippet></ROW><ROW><id>17160039</id><snippet>s = Slide("foo.jpg", "bar.wav")
s.show()
</snippet></ROW><ROW><id>17160060</id><snippet>writer.writerows</snippet></ROW><ROW><id>17160060</id><snippet>
rows = [[unicode(x) for x in row] for row in rows]
</snippet></ROW><ROW><id>17160060</id><snippet>
rows = [row[1:] for row in rows]
</snippet></ROW><ROW><id>17160149</id><snippet>something.sh</snippet></ROW><ROW><id>17160149</id><snippet>#!/bin/bash

for i in 1 2 3; do
    $(time python quicksort6.py qs-input.$i) &gt; qs-output.$i 2&gt;&amp;1
    uname -a &gt;&gt; qs-output.$i
    who &gt;&gt; qs-output.$i
done
</snippet></ROW><ROW><id>17160180</id><snippet>p</snippet></ROW><ROW><id>17160180</id><snippet>p</snippet></ROW><ROW><id>17160180</id><snippet>p</snippet></ROW><ROW><id>17160180</id><snippet>[...]</snippet></ROW><ROW><id>17160396</id><snippet>ZERO = datetime.timedelta(0) # same as 00:00

class tzutc(datetime.tzinfo):

    def utcoffset(self, dt): 
        return ZERO

    def dst(self, dt):
        return ZERO
</snippet></ROW><ROW><id>17160396</id><snippet>datetime</snippet></ROW><ROW><id>17160396</id><snippet>tzutc</snippet></ROW><ROW><id>17160396</id><snippet>tzutc</snippet></ROW><ROW><id>17160396</id><snippet>datetime.timedelta(0)
</snippet></ROW><ROW><id>17160396</id><snippet>00:00</snippet></ROW><ROW><id>17160396</id><snippet>tzutc</snippet></ROW><ROW><id>17160672</id><snippet>[uwsgi]
socket = /tmp/uwsgi.sock
master = true
processes = 8
threads = 4
harakiri = 60
harakiri-verbose = true
limit-post = 52428800
post-buffering = 8192
listen = 256
max-requests = 1000
buffer-size = 32768
no-orphans = true
logto = /var/log/uwsgi/my_app.log
log-slow = 1000
virtualenv = /usr/local/python/my_app
paste = config:%p
paste-logger = %p
</snippet></ROW><ROW><id>17160980</id><snippet>vectorize</snippet></ROW><ROW><id>17160980</id><snippet>vectorize</snippet></ROW><ROW><id>17160980</id><snippet>from numbapro import jit, cuda
from numba import float32
import numbapro.cudalib.cublas as cublas
import numpy as np
from timeit import default_timer as timer

def generate_input(n):
    A = np.array(np.random.sample((n,n)), dtype=np.float32)
    B = np.array(np.random.sample(n), dtype=A.dtype)
    return A, B

@cuda.jit(argtypes=[float32[:,:], float32[:,:], float32[:]])
def diagproduct(c, a, b):
  startX, startY = cuda.grid(2)
  gridX = cuda.gridDim.x * cuda.blockDim.x;
  gridY = cuda.gridDim.y * cuda.blockDim.y;
  height, width = c.shape

  for y in range(startY, height, gridY):
    for x in range(startX, width, gridX):       
      c[y, x] = a[y, x] * b[x]

def main():

    N = 1000

    A, B = generate_input(N)
    D = np.empty(A.shape, dtype=A.dtype)
    E = np.zeros(A.shape, dtype=A.dtype)
    F = np.empty(A.shape, dtype=A.dtype)

    start = timer()
    E = np.dot(A, np.diag(B))
    numpy_time = timer() - start

    blas = cublas.api.Blas()

    start = timer()
    blas.gemm('N', 'N', N, N, N, 1.0, np.diag(B), A, 0.0, D)
    cublas_time = timer() - start

    diff = np.abs(D-E)
    print("Maximum CUBLAS error %f" % np.max(diff))

    blockdim = (32, 8)
    griddim  = (16, 16)

    start = timer()
    dA = cuda.to_device(A)
    dB = cuda.to_device(B)
    dF = cuda.to_device(F, copy=False)
    diagproduct[griddim, blockdim](dF, dA, dB)
    dF.to_host()
    cuda_time = timer() - start   

    diff = np.abs(F-E)
    print("Maximum CUDA error %f" % np.max(diff))

    print("Numpy took    %f seconds" % numpy_time)
    print("CUBLAS took   %f seconds, %0.2fx speedup" % (cublas_time, numpy_time / cublas_time)) 
    print("CUDA JIT took %f seconds, %0.2fx speedup" % (cuda_time, numpy_time / cuda_time))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17160980</id><snippet>diagproduct</snippet></ROW><ROW><id>17160980</id><snippet>Maximum CUBLAS error 0.000000
Maximum CUDA error 0.000000
Numpy took    0.024535 seconds
CUBLAS took   0.010345 seconds, 2.37x speedup
CUDA JIT took 0.004857 seconds, 5.05x speedup
</snippet></ROW><ROW><id>17160980</id><snippet>Maximum CUBLAS error 0.000000
Maximum CUDA error 0.000000
Numpy took    7.245677 seconds
CUBLAS took   1.371524 seconds, 5.28x speedup
CUDA JIT took 0.264598 seconds, 27.38x speedup
</snippet></ROW><ROW><id>17160980</id><snippet>Maximum CUBLAS error 0.000000
Maximum CUDA error 0.000000
Numpy took    0.006876 seconds
CUBLAS took   0.001425 seconds, 4.83x speedup
CUDA JIT took 0.001313 seconds, 5.24x speedup
</snippet></ROW><ROW><id>17161017</id><snippet>if</snippet></ROW><ROW><id>17161017</id><snippet>a=input()
if a:
    // Your code here
    pass
</snippet></ROW><ROW><id>17161450</id><snippet>f = codecs.open(filename, encoding="ISO8859-1", mode="rb")
</snippet></ROW><ROW><id>17161450</id><snippet>open</snippet></ROW><ROW><id>17161479</id><snippet>__get__</snippet></ROW><ROW><id>17161479</id><snippet>__get__</snippet></ROW><ROW><id>17161479</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>17161479</id><snippet>decorators.decorator</snippet></ROW><ROW><id>17161479</id><snippet>decorators.decorator</snippet></ROW><ROW><id>17161479</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>17161479</id><snippet>None</snippet></ROW><ROW><id>17161479</id><snippet>f(wrapper, wrapped)</snippet></ROW><ROW><id>17161479</id><snippet>from functools import update_wrapper
class class_or_instance(object):
    def __init__(self, fn):
        self.fn = fn

    def __get__(self, obj, cls):
        if obj is not None:
            f = lambda *args, **kwds: self.fn(obj, *args, **kwds)
        else:
            f = lambda *args, **kwds: self.fn(cls, *args, **kwds)
        # update the function to have the correct metadata
        update_wrapper(f, self.fn)
        return f

class A(object):
    @class_or_instance
    def func1(self,*args):
        """some docstring"""
        pass
</snippet></ROW><ROW><id>17161479</id><snippet>print A.func1.__doc__
</snippet></ROW><ROW><id>17161479</id><snippet>class_or_instance</snippet></ROW><ROW><id>17161479</id><snippet>setattr</snippet></ROW><ROW><id>17161479</id><snippet>from functools import update_wrapper
import types

class class_or_instance(object):
    # having optional func in case is passed something that doesn't have a correct __name__
    # (like a lambda function)
    def __init__(self, name_or_func):
        self.fn = fn
        self.name = fn.__name__

    def __get__(self, obj, cls):
        print "GET!!!"
        if obj is not None:
            f = lambda *args, **kwds: self.fn(obj, *args, **kwds)
            update_wrapper(f, self.fn)
            setattr(obj, self.name, types.MethodType(f, obj, obj.__class__))
        else:
            f = lambda *args, **kwds: self.fn(cls, *args, **kwds)
            update_wrapper(f, self.fn)
        return f
</snippet></ROW><ROW><id>17161479</id><snippet>A.func1 #GET!!!
obj = A()
obj.func1 #GET!!!
obj.func1 is obj.func1 # True
A.func1 # GET!!!
obj2 = A()
obj2.func1 is not obj.fun1 # True + GET!!!
</snippet></ROW><ROW><id>17161783</id><snippet>code               | memory
                   |
an_int = 1         |    an_int ----&gt;  1
                   |                  ^    
another_int = 1    |    another_int  /
</snippet></ROW><ROW><id>17161783</id><snippet>an_int = 2         |    an_int -------&gt; 2
                   |    another_int --&gt; 1
</snippet></ROW><ROW><id>17161783</id><snippet>a_list = [1, 2, 3]    |              1   2   3
                      |   a_list -&gt;| ^ | ^ | ^ |
                      |              0   2   3
a_list[0] = 0         |   a_list -&gt;| ^ | ^ | ^ |
</snippet></ROW><ROW><id>17161783</id><snippet>a = 5
def not_change(a):
  a = 6
not_change(a)
print(a) # a is still 5 outside the function

b = [1, 2, 3]
def change(b):
  b[0] = 0
print(b) # b is now [0, 2, 3] outside the function
</snippet></ROW><ROW><id>17162237</id><snippet>[x for x in seq if x != 2]
</snippet></ROW><ROW><id>17162237</id><snippet>result = []
for x in seq:
    if x != 2:
        result.append(x)
</snippet></ROW><ROW><id>17162237</id><snippet>def f8(seq):
    seen = set()
    return [x for x in seq if x not in seen and not seen.add(x)]
</snippet></ROW><ROW><id>17162237</id><snippet>def f8(seq):
    seen = set()
    result = []
    for x in seq:
        if x not in seen and not seen.add(x): # not seen.add(...) always True
            result.append(x)
</snippet></ROW><ROW><id>17162237</id><snippet>set.add</snippet></ROW><ROW><id>17162237</id><snippet>None</snippet></ROW><ROW><id>17162237</id><snippet>not None</snippet></ROW><ROW><id>17162237</id><snippet>True</snippet></ROW><ROW><id>17162237</id><snippet>&gt;&gt;&gt; s = set()
&gt;&gt;&gt; y = s.add(1) # methods usually return None
&gt;&gt;&gt; print s, y
set([1]) None
</snippet></ROW><ROW><id>17162237</id><snippet>None</snippet></ROW><ROW><id>17162237</id><snippet>pop</snippet></ROW><ROW><id>17162237</id><snippet>2.7+</snippet></ROW><ROW><id>17162237</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; items = [1, 2, 0, 1, 3, 2]
&gt;&gt;&gt; list(OrderedDict.fromkeys(items))
[1, 2, 0, 3]
</snippet></ROW><ROW><id>17162284</id><snippet>item</snippet></ROW><ROW><id>17162284</id><snippet>for item in mylist:
    # do some operations for all items
last_b = item[b] 
</snippet></ROW><ROW><id>17162392</id><snippet>datadict = {}
for item in datalist.split(','):
    key, value = item.split(':', 1)
    datadict[key.strip()] = value.strip()
</snippet></ROW><ROW><id>17162700</id><snippet>def bad_function():
    ExceptionClass = type( "FooBar", (Exception,),
        { "__init__": lambda self, msg: Exception.__init__(self, msg) })
    globals()['FooBar'] = ExceptionClass
    raise ExceptionClass("ExceptionClass")
</snippet></ROW><ROW><id>17162880</id><snippet>    id2 = csv.reader(open(os.path.join(perf_dir,id_files[1])))
    h = tuple(next(id2))

    create = '''CREATE TABLE id2 (%s varchar, %s int PRIMARY KEY, %s int)''' % h
    insert = '''INSERT INTO id2 (%s, %s, %s) VALUES (%%s, %%s, %%s)''' % h

    ...

    cr.executemany(insert, id2)
</snippet></ROW><ROW><id>17162921</id><snippet># /home/your_user_name/PROJECT_DIR
# PROJECT_DIR/setup.py
# PROJECT_DIR/README.md
# PROJECT_DIR/your_app
# PROJECT_DIR/your_app/__init__.py # mark this folder as a python package named your_app
# PROJECT_DIR/your_app/main.py # your main codes
# PROJECT_DIR/your_app/utils.py # put stuff like help in here
</snippet></ROW><ROW><id>17162921</id><snippet>def help():
    ret = "calculating stuff to return"
    return ret
</snippet></ROW><ROW><id>17162921</id><snippet>from your_app import utils
def run():
    if option == 'help':
        utils.help()
if __name__ == "__main__":
    run()
</snippet></ROW><ROW><id>17162936</id><snippet>--with-xunit</snippet></ROW><ROW><id>17162936</id><snippet>unittest.TestProgram</snippet></ROW><ROW><id>17163119</id><snippet>.invoke()</snippet></ROW><ROW><id>17163353</id><snippet>order_by()</snippet></ROW><ROW><id>17163353</id><snippet>ID   Name
1    Bob
2    Fred
3    Jim
</snippet></ROW><ROW><id>17163353</id><snippet>ID   Name
4    Jeff
2    Fred
3    Jim
</snippet></ROW><ROW><id>17163353</id><snippet>SELECT * FROM my_table</snippet></ROW><ROW><id>17163353</id><snippet>SELECT * FROM my_table WHERE id &gt; 1</snippet></ROW><ROW><id>17163661</id><snippet># Copyright (C) 2005 Florent Rougon
#               2006 Darren Dale
#
# This file is an example program for matplotlib. It may be used and
# modified with no restriction; raw copies as well as modified versions
# may be distributed without limitation.

from __future__ import unicode_literals
import sys, os, random
from PyQt4 import QtGui, QtCore
from numpy import arange, sin, pi
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


class MplCanvas(FigureCanvas):
    """Ultimately, this is a QWidget (as well as a FigureCanvasAgg, etc.)."""
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        # We want the axes cleared every time plot() is called
        self.axes.hold(False)

        self.compute_initial_figure()
        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QtGui.QSizePolicy.Expanding,
                                   QtGui.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)


class DynamicMplCanvas(MplCanvas):
    """A canvas that updates itself every second with a new plot."""
    def __init__(self, *args, **kwargs):
        MplCanvas.__init__(self, *args, **kwargs)
        timer = QtCore.QTimer(self)
        QtCore.QObject.connect(timer,
                               QtCore.SIGNAL("timeout()"),
                               self.update_figure)
        timer.start(1000)

    def compute_initial_figure(self):
        self.axes.plot([0, 1, 2, 3], [1, 2, 0, 4], 'r')

    def update_figure(self):
        # Build a list of 4 random integers between 0 and 10 (both inclusive)
        l = [ random.randint(0, 10) for i in range(4) ]
        self.axes.plot([0, 1, 2, 3], l, 'r')
        self.draw()
</snippet></ROW><ROW><id>17163787</id><snippet>join</snippet></ROW><ROW><id>17163787</id><snippet>COUNT</snippet></ROW><ROW><id>17163787</id><snippet>memcpy</snippet></ROW><ROW><id>17163787</id><snippet>itertools.repeat</snippet></ROW><ROW><id>17163787</id><snippet>def bytes_list_test_opt():  
    tStart = time.clock()
    bs = b''.join(itertools.repeat(MSG, COUNT))
    print('byte list opt time:', time.clock() - tStart)
</snippet></ROW><ROW><id>17163787</id><snippet>*</snippet></ROW><ROW><id>17163787</id><snippet>bytes</snippet></ROW><ROW><id>17163787</id><snippet>    bs = MSG*COUNT
</snippet></ROW><ROW><id>17163787</id><snippet>MSG</snippet></ROW><ROW><id>17163787</id><snippet>extend</snippet></ROW><ROW><id>17163787</id><snippet>def bytearray_test_opt():
    tStart = time.clock()
    ba = bytearray()
    for i in range(COUNT):
        ba.extend(MSG)
    print('array opt time:', time.clock() - tStart)
</snippet></ROW><ROW><id>17163787</id><snippet>bytearray</snippet></ROW><ROW><id>17163787</id><snippet>memcpy</snippet></ROW><ROW><id>17163787</id><snippet>def initialized_bytearray_test_opt():
    tStart = time.clock()
    L = len(MSG)
    ba = bytearray(L*COUNT)
    ofs = 0
    for i in range(COUNT):
        ba[ofs : ofs+L] = MSG
        ofs += L
    print('initialized array opt time:', time.clock() - tStart)
</snippet></ROW><ROW><id>17163787</id><snippet>byte list time: 0.004823000000000001
byte list opt time: 0.0008649999999999977
array time: 0.043324
array opt time: 0.005505999999999997
initialized array time: 0.05936899999999999
initialized array opt time: 0.040164000000000005
</snippet></ROW><ROW><id>17163787</id><snippet>timeit</snippet></ROW><ROW><id>17163880</id><snippet>done_item=on&amp;todo_text=asdf&amp;todo_text=asdf&amp;done_item=on&amp;todo_text=qwer
</snippet></ROW><ROW><id>17163880</id><snippet>name</snippet></ROW><ROW><id>17163880</id><snippet>value</snippet></ROW><ROW><id>17163880</id><snippet>id</snippet></ROW><ROW><id>17163880</id><snippet>done_item=chk_box1&amp;todo_text=asdf&amp;todo_text=asdf&amp;done_item=chk_box3&amp;todo_text=qwer
</snippet></ROW><ROW><id>17163880</id><snippet>request.POST.getlist('done_item')</snippet></ROW><ROW><id>17163880</id><snippet>[u'chk_box1', u'chk_box3']</snippet></ROW><ROW><id>17164052</id><snippet>try:
    from urllib.request import urlretrieve
except ImportError:
    from urllib import urlretrieve

urlretrieve('http://example.org', 'outfile.dat')
</snippet></ROW><ROW><id>17164052</id><snippet>urlretrieve</snippet></ROW><ROW><id>17164052</id><snippet>Content-Disposition</snippet></ROW><ROW><id>17164052</id><snippet>urlopen</snippet></ROW><ROW><id>17164052</id><snippet>Content-Disposition</snippet></ROW><ROW><id>17164156</id><snippet>In [3]: a.hi
Out[3]: &lt;bound method A.hi of &lt;__main__.A object at 0x218ab10&gt;&gt;
</snippet></ROW><ROW><id>17164156</id><snippet>In [4]: A.hi
Out[4]: &lt;unbound method A.hi&gt;
</snippet></ROW><ROW><id>17164156</id><snippet>In [5]: def hello(self):
   ...:     print "hello"
   ...:     

In [6]: A.hi = hello

In [7]: a.hi()
hello
</snippet></ROW><ROW><id>17164156</id><snippet>A</snippet></ROW><ROW><id>17164156</id><snippet>self</snippet></ROW><ROW><id>17164463</id><snippet>if __name__</snippet></ROW><ROW><id>17164463</id><snippet>test</snippet></ROW><ROW><id>17164463</id><snippet>class test:
    def quicktest(params):
         pprint(params)

if __name__ == '__main__':
    if sys.argv[1] == "quicktest":
        testObj = test()
        testObj.quicktest(sys.argv)
    else:
        print "Wrong call."
</snippet></ROW><ROW><id>17164463</id><snippet>from test import test
testObj = test()
testObj.quicktest(...)
</snippet></ROW><ROW><id>17164536</id><snippet>&gt;&gt;&gt; lis = [[1,2,3], [4,5,6], [7,8,9]]
</snippet></ROW><ROW><id>17164536</id><snippet>[::-1]</snippet></ROW><ROW><id>17164536</id><snippet>&gt;&gt;&gt; rev = lis[::-1]
&gt;&gt;&gt; rev
[[7, 8, 9], [4, 5, 6], [1, 2, 3]]
</snippet></ROW><ROW><id>17164536</id><snippet>zip</snippet></ROW><ROW><id>17164536</id><snippet>&gt;&gt;&gt; rotated = []
&gt;&gt;&gt; for item in zip(rev[0],rev[1],rev[2]):
...     rotated.append(item)
...     
&gt;&gt;&gt; rotated
[(7, 4, 1), (8, 5, 2), (9, 6, 3)]
</snippet></ROW><ROW><id>17164536</id><snippet>zip</snippet></ROW><ROW><id>17164536</id><snippet>*</snippet></ROW><ROW><id>17164536</id><snippet>*</snippet></ROW><ROW><id>17164536</id><snippet>rev</snippet></ROW><ROW><id>17164536</id><snippet>zip</snippet></ROW><ROW><id>17164536</id><snippet>rev[0], rev[1], rev[2]</snippet></ROW><ROW><id>17164536</id><snippet>zip(*rev)</snippet></ROW><ROW><id>17164536</id><snippet>zip</snippet></ROW><ROW><id>17164536</id><snippet>&gt;&gt;&gt; rev = [[7, 8, 9], [4, 5, 6], [1, 2, 3]]
&gt;&gt;&gt; min_length = min(len(x) for x in rev)  # find the min length among all items
&gt;&gt;&gt; rotated = []

for i in xrange(min_length):        
    items = tuple(x[i] for x in rev)  # collect items on the same index from each
                                      # list inside `rev`  
    rotated.append(items)
...     
&gt;&gt;&gt; rotated
[(7, 4, 1), (8, 5, 2), (9, 6, 3)]
</snippet></ROW><ROW><id>17164617</id><snippet>replace</snippet></ROW><ROW><id>17164617</id><snippet>import pandas as pd

import numpy as np

a = np.array([[1, 1, 1, 1, 1, 0, 1, 0, 0, 2, 1],
              [2, 1, 0, 0, 0, 1, 2, 1, 1, 2, 2]])


df = pd.DataFrame(a, dtype=np.float64)

df.replace(0, method='pad', axis=1)
</snippet></ROW><ROW><id>17164833</id><snippet>[[4191, 949], [3002, 4028, 957], [2494, 959, 3011], [4243, 965], [1478], ...]
</snippet></ROW><ROW><id>17164833</id><snippet>{ 0: [4191, 949],
  1: [3002, 4028, 957],
  2: [2494, 959, 3011],
  3: [4243, 965],
  4: [1478], ...}
</snippet></ROW><ROW><id>17164833</id><snippet>import sys
import sys
import Queue

def get_shortest_path(par, src, dest):
    '''
    Returns the shortest path as a list of integers
    par - parent information
    src - source vertex
    dest - destination vertex
    '''
    if dest == src:
        return [src]
    else:
        ret = get_shortest_path(par, src, par[dest])
        ret.append(dest)
        return ret

def bfs(edgeList, src, dest):
    '''
    Breadth first search routine. Returns (distance, shortestPath) pair from src to dest. Returns (-1, []) if there is no path from src to dest
    edgeList - adjacency list of graph. Either list of lists or dict of lists
    src - source vertex
    dest - destination vertex
    '''
    vis = set() # stores the vertices that have been visited
    par = {} # stores parent information. vertex -&gt; parent vertex in BFS tree
    distDict = {} # stores distance of visited vertices from the source. This is the number of edges between the source vertex and the given vertex
    q = Queue.Queue()
    q.put((src, 0)) # enqueue (source, distance) pair
    par[src] = -1 # source has no parent
    vis.add(src) # minor technicality, will explain later
    while not q.empty():
        (v,dist) = q.get() # grab vertex in queue
        distDict[v] = dist # update the distance
        if v == dest:
            break # reached destination, done
        nextDist = dist+1
        for nextV in edgeList[v]:
            # visit vertices adjacent to the current vertex
            if nextV not in vis:
                # not yet visited
                par[nextV] = v # update parent of nextV to v
                q.put((nextV, nextDist)) # add into queeu
                vis.add(nextV) # mark as visited
    # obtained shortest path now
    if dest in distDict:
        return (distDict[dest], get_shortest_path(par, src, dest))
    else:
        return (-1, []) # no shortest path

# example run, feel free to remove this
if __name__ == '__main__':
    edgeList = {
        0: [6,],
        1: [2, 7],
        2: [1, 3, 6],
        3: [2, 4, 5],
        4: [3, 8],
        5: [3, 7],
        6: [0, 2],
        7: [1, 5],
        8: [4],
    }
    while True:
        src = int(sys.stdin.readline())
        dest = int(sys.stdin.readline())
        (dist, shortest_path) = bfs(edgeList, src, dest)
        print 'dist =', dist
        print 'shortest_path =', shortest_path
</snippet></ROW><ROW><id>17164919</id><snippet>(.+)\s+\(\d+\).+?(?:\(([^)]{2,})\)\s+(?={))?\{.+\(#(\d+\.\d+)\)\}
</snippet></ROW><ROW><id>17165043</id><snippet>Test1</snippet></ROW><ROW><id>17165043</id><snippet>Descriptor</snippet></ROW><ROW><id>17165043</id><snippet>name</snippet></ROW><ROW><id>17165043</id><snippet>t.name</snippet></ROW><ROW><id>17165043</id><snippet>type(t).__dict__['name'].__get__(t, type(t))
</snippet></ROW><ROW><id>17165043</id><snippet>t1.name</snippet></ROW><ROW><id>17165043</id><snippet>type(t1).__dict__['name'].__get__(t1, type(t1))
</snippet></ROW><ROW><id>17165043</id><snippet>name</snippet></ROW><ROW><id>17165043</id><snippet>__dict__</snippet></ROW><ROW><id>17165043</id><snippet>Test1.__dict__</snippet></ROW><ROW><id>17165043</id><snippet>name</snippet></ROW><ROW><id>17165043</id><snippet>&gt;&gt;&gt; Test.__dict__['name']
&lt;__main__.Descriptor object at 0x7f637a57bc90&gt;
&gt;&gt;&gt; Test1.__dict__['name']
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'name'
</snippet></ROW><ROW><id>17165043</id><snippet>value</snippet></ROW><ROW><id>17165043</id><snippet>Test</snippet></ROW><ROW><id>17165043</id><snippet>&gt;&gt;&gt; t1 = Test(1)
init test
setting
&gt;&gt;&gt; t2 = Test(2)
init test
setting
&gt;&gt;&gt; t1.name
getting
2
&gt;&gt;&gt; t2.name
getting
2
&gt;&gt;&gt; t1.name = 0
setting
&gt;&gt;&gt; t2.name
getting
0
</snippet></ROW><ROW><id>17165043</id><snippet>value</snippet></ROW><ROW><id>17165043</id><snippet>instance</snippet></ROW><ROW><id>17165043</id><snippet>self</snippet></ROW><ROW><id>17165043</id><snippet>Test</snippet></ROW><ROW><id>17165214</id><snippet>O(1)</snippet></ROW><ROW><id>17165214</id><snippet>list.index</snippet></ROW><ROW><id>17165214</id><snippet>O(N)</snippet></ROW><ROW><id>17165214</id><snippet>&gt;&gt;&gt; lis = (2,6,4,8,7,9,14,3)
&gt;&gt;&gt; dic = dict(zip(lis, lis[1:]))
&gt;&gt;&gt; dic[4]
8
&gt;&gt;&gt; dic[7]
9
&gt;&gt;&gt; dic.get(100, 'not found') #dict.get can handle key errors
'not found'
</snippet></ROW><ROW><id>17165214</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; lis = (2,6,4,8,7,9,14,3)
&gt;&gt;&gt; it1 = iter(lis)
&gt;&gt;&gt; it2 = iter(lis)
&gt;&gt;&gt; next(it2)
2
&gt;&gt;&gt; dict(izip(it1,it2))
{2: 6, 4: 8, 6: 4, 7: 9, 8: 7, 9: 14, 14: 3}
</snippet></ROW><ROW><id>17165220</id><snippet>eval()</snippet></ROW><ROW><id>17165220</id><snippet>eval("fetch_function()")
</snippet></ROW><ROW><id>17165415</id><snippet>RegexValidator</snippet></ROW><ROW><id>17165415</id><snippet>alphanumeric = RegexValidator(r'^[0-9a-zA-Z]*$', 'Only alphanumeric characters are allowed.')

name = models.CharField(max_length=50, blank=True, null=True, validators=[alphanumeric])
email = models.EmailField(max_length=50, unique=True, validators=[alphanumeric])
</snippet></ROW><ROW><id>17165415</id><snippet>validate_email</snippet></ROW><ROW><id>17165415</id><snippet>alphanumeric</snippet></ROW><ROW><id>17165583</id><snippet>sstream</snippet></ROW><ROW><id>17165583</id><snippet>foo()</snippet></ROW><ROW><id>17165583</id><snippet>from StringIO import StringIO

def foo(sstream):
    for line in sstream:
        res = doSomethingWith(line)
        yield res

sio = StringIO(mystring)
try:
    for bar in foo(sio):
        if condition(bar):
            break
finally:
    sio.close()
</snippet></ROW><ROW><id>17165583</id><snippet>from StringIO import StringIO
from contextlib import contextmanager

@contextmanager
def my_stringio(s):
    print 'creating StringIO'
    sio = StringIO(s)
    yield sio
    print 'calling close()'
    sio.close()

def mygen():
    with my_stringio('abcdefghij') as sio:
        while 1:
            char = sio.read(1)
            if not char:
                break
            yield char

for char in mygen():
    print char
    if char == 'c':
        break
</snippet></ROW><ROW><id>17165583</id><snippet>'calling close()'</snippet></ROW><ROW><id>17165583</id><snippet>__del__</snippet></ROW><ROW><id>17165583</id><snippet>__del__</snippet></ROW><ROW><id>17165583</id><snippet>StringIO</snippet></ROW><ROW><id>17165583</id><snippet>close()</snippet></ROW><ROW><id>17165583</id><snippet>for</snippet></ROW><ROW><id>17165746</id><snippet>nohup python3 -u ./myscript.py &gt; ./mylog.log &amp;
</snippet></ROW><ROW><id>17166008</id><snippet>arr[ind, np.arange(K)]</snippet></ROW><ROW><id>17166008</id><snippet>tuple(arr[ind, np.arange(K)])</snippet></ROW><ROW><id>17166008</id><snippet>import numpy as np
import itertools as IT

N, K = 5,3
arr = np.arange(N*K).reshape(N,K)
print(arr)
# [[ 0  1  2]
#  [ 3  4  5]
#  [ 6  7  8]
#  [ 9 10 11]
#  [12 13 14]]

for ind in IT.combinations_with_replacement(range(N), K):
    print(arr[ind, np.arange(K)])
    # [0 1 2]
    # [0 1 5]
    # [0 1 8]
    # [ 0  1 11]
    # ...
</snippet></ROW><ROW><id>17166189</id><snippet>onClose</snippet></ROW><ROW><id>17166189</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>17166604</id><snippet>options.get(something, doThisMostOfTheTime)()
</snippet></ROW><ROW><id>17166604</id><snippet>if</snippet></ROW><ROW><id>17166604</id><snippet>elif</snippet></ROW><ROW><id>17166604</id><snippet>else</snippet></ROW><ROW><id>17166604</id><snippet>something = 'something'

for i in xrange(1000000):
    if something == 'this':
        the_thing = 1
    elif something == 'that':
        the_thing = 2
    elif something == 'there':
        the_thing = 3
    else:
        the_thing = 4
</snippet></ROW><ROW><id>17166604</id><snippet>something = 'something'
options = {'this': 1, 'that': 2, 'there': 3}

for i in xrange(1000000):
    the_thing = options.get(something, 4)
</snippet></ROW><ROW><id>17166604</id><snippet>something = 'something'
options = {'this': 1, 'that': 2, 'there': 3}

for i in xrange(1000000):
    if something in options:
        the_thing = options[something]
    else:
        the_thing = 4
</snippet></ROW><ROW><id>17166604</id><snippet>from collections import defaultdict

something = 'something'
options = defaultdict(lambda: 4, {'this': 1, 'that': 2, 'there': 3})

for i in xrange(1000000):
    the_thing = options[something]
</snippet></ROW><ROW><id>17166604</id><snippet>1.py: 160ms
2.py: 170ms
3.py: 110ms
4.py: 100ms
</snippet></ROW><ROW><id>17166604</id><snippet>time(1)</snippet></ROW><ROW><id>17166768</id><snippet>In [30]: df2 = df.groupby(['stock','same1','same2'])[['positions']].sum()

In [31]: df2 
Out[31]: 

                   positions
stock same1 same2               
A     AA    AAA          300 
B     BB    BBB          300 
C     CC    CCC          900 
</snippet></ROW><ROW><id>17166768</id><snippet>reset_index</snippet></ROW><ROW><id>17166768</id><snippet>In [34]: df2.reset_index()
Out[34]: 
  stock same1 same2  positions
0     A    AA   AAA        300 
1     B    BB   BBB        300 
2     C    CC   CCC        900
</snippet></ROW><ROW><id>17166768</id><snippet>df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
</snippet></ROW><ROW><id>17166768</id><snippet>df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()
</snippet></ROW><ROW><id>17166896</id><snippet>&gt;&gt;&gt; cast((c_int*1)(1), POINTER(c_uint)).contents
c_uint(1L)
&gt;&gt;&gt; cast((c_int*1)(-1), POINTER(c_uint)).contents
c_uint(4294967295L)
</snippet></ROW><ROW><id>17166948</id><snippet>pack_forget</snippet></ROW><ROW><id>17166948</id><snippet>pack</snippet></ROW><ROW><id>17166948</id><snippet>grid</snippet></ROW><ROW><id>17166966</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17166966</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; data = u'{ \'name\':"xyz", \'data\':[{\'age\': 0, \'foo\': 1}, {\'age\': 1, \'foo\': 1}]}'
&gt;&gt;&gt; dic = literal_eval(data)
&gt;&gt;&gt; dic['data']
[{'age': 0, 'foo': 1}, {'age': 1, 'foo': 1}]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17167239</id><snippet>list_of_list = [['ok.txt', 'hello'], [10, 20], ['first_one', 'second_one'], ['done', 'pending']]
dict_from_list = dict(zip(list_of_list[0], zip(*list_of_list[1:])))
</snippet></ROW><ROW><id>17167239</id><snippet>{'ok.txt': (10, 'first_one', 'done'), 'hello': (20, 'second_one', 'pending')}
</snippet></ROW><ROW><id>17167239</id><snippet>zip(*list_of_list[1:]) ==&gt; map(list, zip(*list_of_list[1:]))
</snippet></ROW><ROW><id>17167257</id><snippet>run_instances</snippet></ROW><ROW><id>17167257</id><snippet>get_all_instances</snippet></ROW><ROW><id>17167257</id><snippet>import boto.ec2
conn = boto.ec2.connect_to_region('us-west-2')  # or whatever region you want
reservations = conn.get_all_instances()  # could limit results with filters
instances = []
for r in reservations:
    instances.extend(r.instances)
</snippet></ROW><ROW><id>17167257</id><snippet>instances</snippet></ROW><ROW><id>17167257</id><snippet>id</snippet></ROW><ROW><id>17167257</id><snippet># same first three lines as above
instances = [i for r in reservations for i in r.instances]
</snippet></ROW><ROW><id>17167391</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>17167391</id><snippet>astaseq = subprocess.call(["fastacmd","-i", file1, "-o",foutname])</snippet></ROW><ROW><id>17167391</id><snippet>astaseq = subprocess.call(["fastacmd","-i", sys.argv[1], "-o",foutname])</snippet></ROW><ROW><id>17167437</id><snippet>import json

dict_ = {"20090209.02s1.1_sequence.txt": [645045714, 3559.6422951221466, 206045184], "20090209.02s1.2_sequence.txt": [645045714, 3543.8322949409485, 234618880]}
values = [{"file_name": k, "file_information": v} for k, v in dict_.items()]
json.dumps(values, indent=4)
</snippet></ROW><ROW><id>17167437</id><snippet>[
    {
        "file_name": "20090209.02s1.1_sequence.txt", 
        "file_information": [
            645045714, 
            3559.6422951221466, 
            206045184
        ]
    }, 
    {
        "file_name": "20090209.02s1.2_sequence.txt", 
        "file_information": [
            645045714, 
            3543.8322949409485, 
            234618880
        ]
    }
]
</snippet></ROW><ROW><id>17167649</id><snippet>lists = {}
lists[strs] = []
lists[strs].append(somevalue)
</snippet></ROW><ROW><id>17167649</id><snippet>globals()</snippet></ROW><ROW><id>17167649</id><snippet>locals()</snippet></ROW><ROW><id>17167649</id><snippet>exec</snippet></ROW><ROW><id>17167649</id><snippet>exec</snippet></ROW><ROW><id>17167649</id><snippet>exec()</snippet></ROW><ROW><id>17167841</id><snippet>lambda</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>f</snippet></ROW><ROW><id>17167841</id><snippet>.__closure__</snippet></ROW><ROW><id>17167841</id><snippet>&gt;&gt;&gt; L[0].__closure__
(&lt;cell at 0x1077f8b78: int object at 0x107465880&gt;,)
&gt;&gt;&gt; L[0].__closure__[0]
&lt;cell at 0x1077f8b78: int object at 0x107465880&gt;
&gt;&gt;&gt; L[0].__closure__[0].cell_contents
4
</snippet></ROW><ROW><id>17167841</id><snippet>L</snippet></ROW><ROW><id>17167841</id><snippet>4</snippet></ROW><ROW><id>17167841</id><snippet>&gt;&gt;&gt; L[0].__closure__[0] is L[1].__closure__[0]
True
</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>4</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>4</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>def f():
    L = []
    for i in range(5): 
        L.append(lambda x, i=i: i ** x) 
    return L
</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>def create_lambda(i):
    return lambda x: i ** x

def f():
    return [create_lambda(i) for i in range(5)]
</snippet></ROW><ROW><id>17167841</id><snippet>create_lambda()</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>&gt;&gt;&gt; L[0].__closure__[0] is L[1].__closure__[0]
False
</snippet></ROW><ROW><id>17167841</id><snippet>i</snippet></ROW><ROW><id>17167841</id><snippet>create_lambda</snippet></ROW><ROW><id>17167841</id><snippet>create_lambda</snippet></ROW><ROW><id>17168094</id><snippet>not</snippet></ROW><ROW><id>17168094</id><snippet>nyval = not myval
</snippet></ROW><ROW><id>17168094</id><snippet>not</snippet></ROW><ROW><id>17168094</id><snippet>True</snippet></ROW><ROW><id>17168094</id><snippet>False</snippet></ROW><ROW><id>17168094</id><snippet>&gt;&gt;&gt; not 1
False
&gt;&gt;&gt; not 0
True
</snippet></ROW><ROW><id>17168094</id><snippet>nyval = int(not myval)
</snippet></ROW><ROW><id>17168094</id><snippet>bool</snippet></ROW><ROW><id>17168094</id><snippet>int</snippet></ROW><ROW><id>17168094</id><snippet>&gt;&gt;&gt; int(not 0)
1
&gt;&gt;&gt; int(not 1)
0
&gt;&gt;&gt; not 0 == 1
True
&gt;&gt;&gt; not 1 == 0
True
</snippet></ROW><ROW><id>17168169</id><snippet>S = after_at.split()[0:0 +4 * K:4]</snippet></ROW><ROW><id>17168169</id><snippet>for item in S</snippet></ROW><ROW><id>17168200</id><snippet>to_var</snippet></ROW><ROW><id>17168200</id><snippet>first</snippet></ROW><ROW><id>17168200</id><snippet>first -= $cutoff - 1</snippet></ROW><ROW><id>17168200</id><snippet>chars[1..1+first]</snippet></ROW><ROW><id>17168200</id><snippet>first + 1</snippet></ROW><ROW><id>17168200</id><snippet>chars[1...1+first]</snippet></ROW><ROW><id>17168200</id><snippet>chars[1..first]</snippet></ROW><ROW><id>17168200</id><snippet>true</snippet></ROW><ROW><id>17168200</id><snippet>false</snippet></ROW><ROW><id>17168200</id><snippet>nil</snippet></ROW><ROW><id>17168200</id><snippet>false</snippet></ROW><ROW><id>17168200</id><snippet>to_chars</snippet></ROW><ROW><id>17168200</id><snippet>if !out</snippet></ROW><ROW><id>17168200</id><snippet>out</snippet></ROW><ROW><id>17168200</id><snippet>if out.empty?</snippet></ROW><ROW><id>17168241</id><snippet>import pickle

data1 = {'a': [1, 2.0, 3, 4+6j],
         'b': ('string', u'Unicode string'),
         'c': None}

selfref_list = [1, 2, 3]
selfref_list.append(selfref_list)

output = open('data.pkl', 'wb')

# Pickle dictionary using protocol 0.
pickle.dump(data1, output)

# Pickle the list using the highest protocol available.
pickle.dump(selfref_list, output, -1)

output.close()
</snippet></ROW><ROW><id>17168241</id><snippet>import shelve

d = shelve.open(filename) # open -- file may get suffix added by low-level
                          # library

d[key] = data   # store data at key (overwrites old data if
                # using an existing key)
data = d[key]   # retrieve a COPY of data at key (raise KeyError if no
                # such key)
del d[key]      # delete data stored at key (raises KeyError
                # if no such key)
flag = d.has_key(key)   # true if the key exists
klist = d.keys() # a list of all existing keys (slow!)

# as d was opened WITHOUT writeback=True, beware:
d['xx'] = range(4)  # this works as expected, but...
d['xx'].append(5)   # *this doesn't!* -- d['xx'] is STILL range(4)!

# having opened d without writeback=True, you need to code carefully:
temp = d['xx']      # extracts the copy
temp.append(5)      # mutates the copy
d['xx'] = temp      # stores the copy right back, to persist it

# or, d=shelve.open(filename,writeback=True) would let you just code
# d['xx'].append(5) and have it work as expected, BUT it would also
# consume more memory and make the d.close() operation slower.

d.close()       # close it
</snippet></ROW><ROW><id>17168330</id><snippet>scipy.weave.inline</snippet></ROW><ROW><id>17168330</id><snippet>function_catalog</snippet></ROW><ROW><id>17168330</id><snippet>scipy.weave.inline</snippet></ROW><ROW><id>17168330</id><snippet>from mpi4py import MPI

import numpy as np

import scipy.weave.inline_tools
import scipy.weave.catalog

import os
import os.path

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

catalog_dir = os.path.join(some_path,  'rank'+str(rank))
try:
    os.makedirs(catalog_dir)
except OSError:
    pass

#monkeypatching the catalog
scipy.weave.inline_tools.function_catalog = scipy.weave.catalog.catalog(catalog_dir)
</snippet></ROW><ROW><id>17168330</id><snippet>inline</snippet></ROW><ROW><id>17168330</id><snippet>import uuid

u = None
if rank == 0:
    u = str(uuid.uuid4())

u = comm.scatter([u]*size, root=0)

catalog_dir = os.path.join('/tmp/&lt;username&gt;/pythoncompiled',  u+'-'+str(rank))
os.makedirs(catalog_dir)

#monkeypatching the catalog
scipy.weave.inline_tools.function_catalog = scipy.weave.catalog.catalog(catalog_dir)
</snippet></ROW><ROW><id>17168330</id><snippet>shutil.rmtree(catalog_dir)
</snippet></ROW><ROW><id>17168330</id><snippet>basetmp = some_path
catalog_dir = os.path.join(basetmp, 'pythoncompiled',  u+'-'+str(rank))
intermediate_dir = os.path.join(basetmp, 'pythonintermediate',  u+'-'+str(rank))

os.makedirs(catalog_dir, mode=0o700)
os.makedirs(intermediate_dir, mode=0o700)

#monkeypatching the catalog and intermediate_dir
scipy.weave.inline_tools.function_catalog = scipy.weave.catalog.catalog(catalog_dir)
scipy.weave.catalog.intermediate_dir = lambda: intermediate_dir

#... calculations here ...

shutil.rmtree(catalog_dir)
shutil.rmtree(intermediate_dir)
</snippet></ROW><ROW><id>17168352</id><snippet>None</snippet></ROW><ROW><id>17168352</id><snippet>cube</snippet></ROW><ROW><id>17168352</id><snippet>print cubed</snippet></ROW><ROW><id>17168352</id><snippet>return cube(n)</snippet></ROW><ROW><id>17168352</id><snippet>return None</snippet></ROW><ROW><id>17168352</id><snippet>return</snippet></ROW><ROW><id>17168352</id><snippet>by_three</snippet></ROW><ROW><id>17168352</id><snippet>else: return False</snippet></ROW><ROW><id>17168352</id><snippet>None</snippet></ROW><ROW><id>17168352</id><snippet>False</snippet></ROW><ROW><id>17168352</id><snippet>return</snippet></ROW><ROW><id>17168352</id><snippet>mycubed = by_three(6)
# mycubed is now 216
mycubed2 = by_three(4)
# mycubed2 is now False.
</snippet></ROW><ROW><id>17168352</id><snippet>if/elif/else</snippet></ROW><ROW><id>17169259</id><snippet>x[2]</snippet></ROW><ROW><id>17169259</id><snippet>'-'</snippet></ROW><ROW><id>17169259</id><snippet>strptime()</snippet></ROW><ROW><id>17169259</id><snippet>sorted(mylist, key=lambda x: datetime.datetime.strptime(x.rsplit(None, 1)[-1], '%m/%d/%y'))
</snippet></ROW><ROW><id>17169259</id><snippet>str.rsplit()</snippet></ROW><ROW><id>17169259</id><snippet>&gt;&gt;&gt; 'ML-M01 Qual Report 07/31/13'.rsplit(None, 1)
['ML-M01 Qual Report', '07/31/13']
&gt;&gt;&gt; 'ML-M01 Qual Report 07/31/13'.rsplit(None, 1)[-1]
'07/31/13'
</snippet></ROW><ROW><id>17169259</id><snippet>&gt;&gt;&gt; sorted(mylist, key=lambda x: datetime.datetime.strptime(x.rsplit(None, 1)[-1], '%m/%d/%y'))
['ML36220045 Final FRB 07/13/13', 'ML36220010 Complete Qual Testing 07/24/13', 'ML-M01 Qual Report 07/31/13', 'ML9822D2600 Brief to PM 08/5/13']
</snippet></ROW><ROW><id>17169259</id><snippet>sorted()</snippet></ROW><ROW><id>17169259</id><snippet>mylist</snippet></ROW><ROW><id>17169259</id><snippet>list.sort()</snippet></ROW><ROW><id>17169259</id><snippet>mylist.sort(key=lambda x: datetime.datetime.strptime(x.rsplit(None, 1)[-1], '%m/%d/%y'))
</snippet></ROW><ROW><id>17169369</id><snippet>complete()</snippet></ROW><ROW><id>17169369</id><snippet>master</snippet></ROW><ROW><id>17169369</id><snippet>place</snippet></ROW><ROW><id>17169369</id><snippet>pack</snippet></ROW><ROW><id>17169369</id><snippet>None</snippet></ROW><ROW><id>17169369</id><snippet>plabel = ...</snippet></ROW><ROW><id>17169369</id><snippet>None</snippet></ROW><ROW><id>17169369</id><snippet>from slice_setup import SLICE_SETUP
import Tkinter as tk
import threading
import Queue

class GuiPart:
    def __init__(self, master, queue):
        self.queue = queue
        self.master = master
        self.master.geometry("300x100+400+250")
        self.master.title("RSAM BCT")
        tk.Label(master, text="REDCOM SLICE", fg="red").pack()
        tk.Label(master, text="BCT - Basic Configuration Test", fg= "red").pack()
        tk.Label(master, text="Please wait...", fg= "black").pack()
        tk.Label(master, text="Estimated time: 3 min 6 sec", fg= "black").pack()

    def processIncoming(self):
        while self.queue.qsize():
            try:
                text = self.queue.get(0)
                Complete(self.master, text)
            except Queue.Empty:
                pass

class ThreadedClient:
    def __init__(self, master):
        self.master = master
        self.queue = Queue.Queue()
        self.gui = GuiPart(master, self.queue)
        self.running = True
        self.thread = threading.Thread(target=self.workerThread1)
        self.thread.start()
        self.periodicCall()

    def periodicCall(self):
        self.gui.processIncoming()
        if not self.running:
            return
        self.master.after(100, self.periodicCall)

    def workerThread1(self):
        obj_rcs = SLICE_SETUP()
        obj_rcs.SLICE()
        self.queue.put("Configuration Complete!")
        self.running = False

class Complete(tk.Toplevel):
    def __init__(self, master=None, completetext=""):
        tk.Toplevel.__init__(self, master)
        self.geometry("400x300+400+250")
        self.title("RSAM BCT")
        tk.Label(self, text="REDCOME SLICE", fg="red").pack()
        tk.Label(self, text="BCT - Basic Configuration Test", fg="red").pack()
        tk.Label(self, text=completetext, fg="dark green").pack()
        tk.Label(self, text="Trunk 1: Port 1: Phone 1: 760-450-4500", fg="black").pack()
        tk.Label(self, text="Trunk 1: Port 2: Phone 2: 760-450-4501", fg="black").pack()
        tk.Button(self, text="    Exit    ", command=self.destroy).pack()


if __name__ == "__main__":
    root = Tkinter.Tk()
    client = ThreadedClient(root)
    root.mainloop()
</snippet></ROW><ROW><id>17169649</id><snippet>from blinker import Namespace
my_signals = Namespace()

def add_user():
    # add user code here
    user_added = my_signals.signal('user-added')
</snippet></ROW><ROW><id>17169776</id><snippet>df = pd.DataFrame(prcpSeries, columns=['prcp'])
df['tmax'] = tmaxSeries
...
</snippet></ROW><ROW><id>17169776</id><snippet>prcpSeries</snippet></ROW><ROW><id>17169776</id><snippet>concat</snippet></ROW><ROW><id>17169776</id><snippet>df1 = pd.DataFrame(prcpSeries, columns=['prcp'])
df2 = pd.DataFrame(tmaxSeries, columns=['tmax'])
...

df = pd.concat([df1, df2, ...], join='outer', axis=1)
</snippet></ROW><ROW><id>17169776</id><snippet>In [21]: dfA = pd.DataFrame([1,2], columns=['A'])

In [22]: dfB = pd.DataFrame([1], columns=['B'])

In [23]: pd.concat([dfA, dfB], join='outer', axis=1)
Out[23]:
   A   B
0  1   1
1  2 NaN
</snippet></ROW><ROW><id>17169806</id><snippet>None</snippet></ROW><ROW><id>17169806</id><snippet>NULL</snippet></ROW><ROW><id>17169806</id><snippet>dict = {'location': 'somewhere', 'arrival': '1000', 'departure': None}
</snippet></ROW><ROW><id>17169806</id><snippet>executemany()</snippet></ROW><ROW><id>17169806</id><snippet>defaults = {'location': '', 'arrival': None, 'departure': None}

c.executemany(SQL, ({k: d.get(k, defaults[k]) for k in defaults} for d in your_list_of_dictionaries)
</snippet></ROW><ROW><id>17170258</id><snippet>def filter_low(lst, maxk, threshold=3):
    for item in lst:
        c = sum(1 for k in maxx if item==k.f)
        if c &gt;= threshold:
             yield item


new_seen = list(filter_low(seen, maxk, 3))
</snippet></ROW><ROW><id>17170258</id><snippet>new_seen = [item for item in seen 
            if sum(1 for k in maxx if item==k.f) &gt;= 3]
</snippet></ROW><ROW><id>17170258</id><snippet>seen[:] = [item for item in seen 
           if sum(1 for k in maxx if item==k.f) &gt;= 3]
</snippet></ROW><ROW><id>17170291</id><snippet>import os
if not os.path.exists('abc.db'):
    conn = sqlite3.connect('abc.db')
</snippet></ROW><ROW><id>17170612</id><snippet>rivers = np.ma.masked_where(rivers == 0, rivers)
</snippet></ROW><ROW><id>17170612</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# Generate some data...
gray_data = np.arange(10000).reshape(100, 100)

masked_data = np.random.random((100,100))
masked_data = np.ma.masked_where(masked_data &lt; 0.9, masked_data)

# Overlay the two images
fig, ax = plt.subplots()
ax.imshow(gray_data, cmap=cm.gray)
ax.imshow(masked_data, cmap=cm.jet, interpolation='none')
plt.show()
</snippet></ROW><ROW><id>17170612</id><snippet>imshow</snippet></ROW><ROW><id>17170855</id><snippet>import numpy as np
import cv2
from cv2 import cv

# Load image as string from file/database
fd = open('foo.jpg')
img_str = fd.read()
fd.close()

# CV2
nparr = np.fromstring(img_str, np.uint8)
img_np = cv2.imdecode(nparr, cv2.CV_LOAD_IMAGE_COLOR)

# CV
img_ipl = cv.CreateImageHeader((img_np.shape[1], img_np.shape[0]), cv.IPL_DEPTH_8U, 3)
cv.SetData(img_ipl, img_np.tostring(), img_np.dtype.itemsize * 3 * img_np.shape[1])

# check types
print type(img_str)
print type(img_np)
print type(img_ipl)
</snippet></ROW><ROW><id>17170855</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>17170855</id><snippet>cv2.cv.iplimage</snippet></ROW><ROW><id>17170855</id><snippet>&lt;type 'str'&gt;
&lt;type 'numpy.ndarray'&gt;
&lt;type 'cv2.cv.iplimage'&gt;
</snippet></ROW><ROW><id>17171285</id><snippet>one</snippet></ROW><ROW><id>17171285</id><snippet>//*[contains(text(), 'one')]
</snippet></ROW><ROW><id>17171285</id><snippet>//*[child::*[contains(text(), 'one')]]
</snippet></ROW><ROW><id>17171285</id><snippet>//text()[contains(., 'one')]/parent::*
</snippet></ROW><ROW><id>17171365</id><snippet>import numpy as np
import matplotlib.pyplot as plt
np.random.seed(2013)
N = 10
x, y = np.random.random((2,N,2))
x.cumsum(axis=0, out=x)
y.cumsum(axis=0, out=y)
fig, ax = plt.subplots()
colors = ['red', 'black']
ax.set_color_cycle(colors)
ax.plot(x,y)
plt.show()
</snippet></ROW><ROW><id>17171456</id><snippet>urlpatterns</snippet></ROW><ROW><id>17171456</id><snippet>admin</snippet></ROW><ROW><id>17171456</id><snippet>urlpatterns = patterns('', (r'^admin/', admin.site.urls), #Lets us access the admin page
(r'^$', 'orangeowl.website.views.index'),
)
urlpatterns += patterns('django.views.generic.list_detail',
url(r'^product/$', 'object_list',
{'queryset': Product.objects.all()}),
url(r'^product/(?P[-\w]+)/$', 'object_detail',
{'queryset': Product.objects.all()})
)
</snippet></ROW><ROW><id>17171630</id><snippet>for date, cell in zip(dates, datecells):
    self.driver.execute_script("arguments[0].scrollIntoView(true);", cell)
    print "'{0}', '{1}'".format(date, cell.text)
    self.assertEqual(date, cell.text)
</snippet></ROW><ROW><id>17171816</id><snippet>db</snippet></ROW><ROW><id>17171816</id><snippet>base_handler.db</snippet></ROW><ROW><id>17171816</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @property
...     def bar(self): return 'spam'
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
'spam'
&gt;&gt;&gt; foo.bar = 'ham'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>17171816</id><snippet>class Foo(object):
    _bar = 'spam'

    @property
    def bar(self):
        return self._bar

    @bar.setter
    def bar(self, value):
        self._bar = value
</snippet></ROW><ROW><id>17171816</id><snippet>@name_of_property.setter</snippet></ROW><ROW><id>17171816</id><snippet>.deleter</snippet></ROW><ROW><id>17171816</id><snippet>property</snippet></ROW><ROW><id>17171887</id><snippet>for prod_emp in prodemployees:
    prod_emp = prod_emp.split()
    prod, emp = prod_emp[0], prod_emp[1:]
</snippet></ROW><ROW><id>17171887</id><snippet>prod</snippet></ROW><ROW><id>17171887</id><snippet>emp</snippet></ROW><ROW><id>17171887</id><snippet>&gt;&gt;&gt; prodemployees = ['prd1 employe4 employe2', ' prd2 employe2']
&gt;&gt;&gt; for prod_emp in prodemployees:
...     prod_emp = prod_emp.split()
...     prod, emp = prod_emp[0], prod_emp[1:]
...     print prod, emp
... 
prd1 ['employe4', 'employe2']
prd2 ['employe2']
</snippet></ROW><ROW><id>17171887</id><snippet>from itertools import chain

filters = filters = ('(product=%s AND employee in ({}))'.format(', '.join('%s' for _ in range(len(pe.split()) - 1))) for pe in prodemployees)
cursor.execute('SELECT * FROM sometable WHERE {}'.format(
                   ' OR '.join(filters)),
               chain.from_iterable(pe.split() for pe in prodemployees))
</snippet></ROW><ROW><id>17171887</id><snippet>filters</snippet></ROW><ROW><id>17171887</id><snippet>&gt;&gt;&gt; filters = ('(product=%s AND employee in ({}))'.format(', '.join('%s' for _ in range(len(pe.split()) - 1))) for pe in prodemployees)
&gt;&gt;&gt; list(filters)
['(product=%s AND employee in (%s, %s))', '(product=%s AND employee in (%s))']
&gt;&gt;&gt; filters = ('(product=%s AND employee in ({}))'.format(', '.join('%s' for _ in range(len(pe.split()) - 1))) for pe in prodemployees)
&gt;&gt;&gt; 'SELECT * FROM sometable WHERE {}'.format(
...                    ' OR '.join(filters))
'SELECT * FROM sometable WHERE (product=%s AND employee in (%s, %s)) OR (product=%s AND employee in (%s))'
</snippet></ROW><ROW><id>17171887</id><snippet>.execute()</snippet></ROW><ROW><id>17171887</id><snippet>chain.from_iterable()</snippet></ROW><ROW><id>17171887</id><snippet>&gt;&gt;&gt; list(chain.from_iterable(pe.split() for pe in prodemployees))
['prd1', 'employe4', 'employe2', 'prd2', 'employe2']
</snippet></ROW><ROW><id>17171887</id><snippet>%s</snippet></ROW><ROW><id>17171887</id><snippet>?</snippet></ROW><ROW><id>17171965</id><snippet>repr</snippet></ROW><ROW><id>17171965</id><snippet>str</snippet></ROW><ROW><id>17171965</id><snippet>&gt;&gt;&gt; s = 'foo'
&gt;&gt;&gt; print str(s)
foo
&gt;&gt;&gt; print repr(s)
'foo'
</snippet></ROW><ROW><id>17171965</id><snippet>def __repr__(self):
    if len(self.children) == 0:
        return '%s' %self.value
    else:
        childrenStr = ' '.join(map(str, self.children))  #str, not repr!
        return '(%s %s)' % (self.value, childrenStr)
</snippet></ROW><ROW><id>17172043</id><snippet>.count</snippet></ROW><ROW><id>17172043</id><snippet>two_zeros = [x for x in lst if x.count(0) == 2]
one_zero = [x for x in lst if x.count(0) == 1]
</snippet></ROW><ROW><id>17172043</id><snippet>d = collections.defaultdict(list)
for sublist in lst:
    d[sublist.count(0)].append(sublist)
</snippet></ROW><ROW><id>17172043</id><snippet>enumerate</snippet></ROW><ROW><id>17172583</id><snippet>defaultdict</snippet></ROW><ROW><id>17172583</id><snippet>from collections import defaultdict
from itertools import count
from functools import partial

keymapping = defaultdict(partial(next, count(1)))
outputdict = {keymapping[v]: v for v in inputlist}
</snippet></ROW><ROW><id>17172583</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; inputlist = ['foo', 'bar', 'foobar', 'barfoo', 'foo', 'foo', 'bar']
&gt;&gt;&gt; keymapping = defaultdict(partial(next, count(1)))
&gt;&gt;&gt; {keymapping[v]: v for v in inputlist}
{1: 'foo', 2: 'bar', 3: 'foobar', 4: 'barfoo'}
</snippet></ROW><ROW><id>17172682</id><snippet>list.append</snippet></ROW><ROW><id>17172682</id><snippet>None</snippet></ROW><ROW><id>17172682</id><snippet>append</snippet></ROW><ROW><id>17172682</id><snippet>None</snippet></ROW><ROW><id>17172682</id><snippet>temp_appended_data.append("""test example &lt;br&gt;
                            Test: %s &lt;br&gt;
                            no: %s &lt;br&gt; 
                            time: %s &lt;br&gt;
                            name: %s &lt;br&gt;
                            """ % (test(),no(),time(),name()))
</snippet></ROW><ROW><id>17172682</id><snippet>%</snippet></ROW><ROW><id>17172682</id><snippet>%s</snippet></ROW><ROW><id>17172723</id><snippet>.ro</snippet></ROW><ROW><id>17172723</id><snippet>new_frame = all_data_frame.rx((dataframe.rx2('input_type').ro == 'VALUE1').ro 
                               &amp; (dataframe.rx2('data_type').ro == 'VALUE2'), 
                              True)
</snippet></ROW><ROW><id>17172723</id><snippet>and</snippet></ROW><ROW><id>17172723</id><snippet>&amp;</snippet></ROW><ROW><id>17172723</id><snippet>&gt;&gt;&gt; 1 &amp; 2 # 0b01 &amp; 0b10
0
&gt;&gt;&gt; 1 &amp; 3 # 0b01 &amp; 0b11
1
</snippet></ROW><ROW><id>17172745</id><snippet>save_path = "./cycle_1_580-846/txt/frame_" 
save_file = (str(580) + "_to_" + str(581) + ".txt")
save_other_file = ("Data68_0" + str(580) + ".tif")

save_field((save_path + save_file), , save_other_file, (str(580) + "_to_" + str(581)), scale = 1500, width = 0.0025)
</snippet></ROW><ROW><id>17172745</id><snippet>sampleText = 'This is my "double quote" example'
sampleTextAgain = "This is my 'single quote' example"
</snippet></ROW><ROW><id>17172745</id><snippet>sampleBadText = '"I want to have some stuff added" + 580 + "together"'
</snippet></ROW><ROW><id>17172745</id><snippet>strings</snippet></ROW><ROW><id>17172745</id><snippet>variables</snippet></ROW><ROW><id>17172745</id><snippet>strings</snippet></ROW><ROW><id>17172745</id><snippet>save_field( './cycle_1_580-846/txt/frame_' + str( 580 + j ) + '_to_' + str( 581 + j ) + '.txt', [...]
</snippet></ROW><ROW><id>17172745</id><snippet>+</snippet></ROW><ROW><id>17172745</id><snippet>save_field(_file_name, _other_file_name, other_arg, scale=1500, width=0.0025)
</snippet></ROW><ROW><id>17172745</id><snippet>args</snippet></ROW><ROW><id>17172745</id><snippet>kwargs</snippet></ROW><ROW><id>17172745</id><snippet>_file_name</snippet></ROW><ROW><id>17172745</id><snippet>_other_file_name</snippet></ROW><ROW><id>17172745</id><snippet>other_arg</snippet></ROW><ROW><id>17172750</id><snippet>python -m http.server
</snippet></ROW><ROW><id>17172917</id><snippet>&gt;&gt;&gt; AT+BAUD8
&lt;&lt;&lt; OK115200
</snippet></ROW><ROW><id>17173108</id><snippet>source = """
class test:
    class inner_class:
        pass
    pass

class test2:
    pass
"""

import ast
p = ast.parse(source)
classes = [node.name for node in ast.walk(p) if isinstance(node, ast.ClassDef)]
# ['test', 'test2', 'inner_class']
</snippet></ROW><ROW><id>17173273</id><snippet>SomeModel.get()</snippet></ROW><ROW><id>17173273</id><snippet>db.get()</snippet></ROW><ROW><id>17173330</id><snippet>import argparse
import os
import sys
import csv
from xml.etree.ElementTree import ElementTree, Element, SubElement

parser = argparse.ArgumentParser(description = "Converts CSV to XML")
parser.add_argument("inputfile", help="Please input the name of the CSV file")
parser.add_argument('-o','--outputfile',help='(optional) Output file name',nargs='?')
args = parser.parse_args()

ext = os.path.splitext(args.inputfile)[1].lower()
if args.outputfile is None:
    if ext == ".csv":
        args.outputfile = os.path.splitext(args.inputfile)[0] + '.xml'
        tree.write(args.outputfile) # TODO: There is no 'tree' defined
    elif ext == ".xml":
        args.outputfile = os.path.splitext(args.inputfile)[0] + '.csv'
        tree.write(args.outputfile) # TODO: There is no 'tree' defined
    else:
        sys.stderr.write('ERROR: Invalid extension %s\n' % ext)
        sys.exit(1)

# TODO: This should be removed completely
if args.outputfile:
    args.outputfile = os.path.splitext(args.outputfile)[1] #handles the condition if there is an outputfile set by the user
# TODO: create tree and do the work here
</snippet></ROW><ROW><id>17173432</id><snippet>with open('special_words.txt', 'r') as handle:
    special_words = {line.strip() for line in handle}

def filter(word_list):
    return [word for word in word_list if word not in special_words]
</snippet></ROW><ROW><id>17173493</id><snippet>344670 ['']</snippet></ROW><ROW><id>17173493</id><snippet>v</snippet></ROW><ROW><id>17173493</id><snippet>with open('cherrypick_list.txt', 'w') as f:
    for k,v  in dic.items():
        val = [item if isinstance(item, str) else " ".join(item) for item in v ]
        f.write("{} {}\n".format(k,val))
</snippet></ROW><ROW><id>17173493</id><snippet>val = [item if isinstance(item, str) else " ".join(item) for item in v ]
seen = set()
val = [x for x in val if x not in seen and not seen.add(x)]
</snippet></ROW><ROW><id>17173541</id><snippet>__new__</snippet></ROW><ROW><id>17173541</id><snippet>__init__</snippet></ROW><ROW><id>17173541</id><snippet>class Countable(object):
    counter = 0
    def __new__(cls, *a, **kw):
        instance = super(Countable, cls).__new__(cls, *a, **kw)
        instance.id = cls.counter + 1
        cls.counter = instance.id
        return instance


class A(Countable):
    pass


class B(Countable):
    pass


print A().id, A().id   # 1 2
print B().id           # 1
</snippet></ROW><ROW><id>17173563</id><snippet>[range(0,4)]</snippet></ROW><ROW><id>17173563</id><snippet>[[0,1,2,3]]</snippet></ROW><ROW><id>17173563</id><snippet>[0,1,2,3,4]</snippet></ROW><ROW><id>17173563</id><snippet>range(0,5)</snippet></ROW><ROW><id>17173563</id><snippet>4</snippet></ROW><ROW><id>17173563</id><snippet>5</snippet></ROW><ROW><id>17173563</id><snippet>stop</snippet></ROW><ROW><id>17173563</id><snippet>range()</snippet></ROW><ROW><id>17173563</id><snippet>A</snippet></ROW><ROW><id>17173563</id><snippet>B</snippet></ROW><ROW><id>17173563</id><snippet>A = range(999, -1, -1)
B = range(1000)
</snippet></ROW><ROW><id>17173563</id><snippet>[999, 998, ..., 1, 0]</snippet></ROW><ROW><id>17173563</id><snippet>[0, 1, ..., 998, 999]</snippet></ROW><ROW><id>17173657</id><snippet>from pytz import timezone
from datetime import datetime

zonename = "Pacific/Wallis"
now = datetime.now(tz=timezone(zonename))
dst_timedelta = now.dst()
### dst_timedelta is offset to the winter time, 
### thus timedelta(0) for winter time and timedelta(0, 3600) for DST; 
### it returns None if timezone is not set

print "DST" if dst_timedelta else "no DST"
</snippet></ROW><ROW><id>17173657</id><snippet>now.timetuple().tm_isdst 
</snippet></ROW><ROW><id>17173657</id><snippet>0</snippet></ROW><ROW><id>17173657</id><snippet>1</snippet></ROW><ROW><id>17173657</id><snippet>-1</snippet></ROW><ROW><id>17173815</id><snippet>if</snippet></ROW><ROW><id>17173815</id><snippet>for col in df:
    #get dtype for column
    dt = df[col].dtype 
    #check if it is a number
    if dt == int or dt == float:
        df[col].fillna(0)
    else:
        df[col].fillna("")
</snippet></ROW><ROW><id>17173815</id><snippet>df[col]</snippet></ROW><ROW><id>17173844</id><snippet>def isPrime(i,n):
    if ((n % i == 0) and (i &lt;= math.sqrt(n))):
        return False
    if (i &gt;= math.sqrt(n)):
        print ("is Prime: ",n)
        return True
    else:
        # No return here
        isPrime(i+1,n)
</snippet></ROW><ROW><id>17173844</id><snippet>return</snippet></ROW><ROW><id>17173844</id><snippet>else:
    return isPrime(i+1,n)
</snippet></ROW><ROW><id>17173844</id><snippet>&gt;&gt;&gt; isPrime(2,7)
is Prime:  7
True
</snippet></ROW><ROW><id>17173945</id><snippet>   #!/usr/bin/python
</snippet></ROW><ROW><id>17173945</id><snippet>    which python 
</snippet></ROW><ROW><id>17173945</id><snippet>    chmod +x nameofprogram
</snippet></ROW><ROW><id>17173993</id><snippet>return type(kwargs.get('name'),(TargetClass,)+args,{})
</snippet></ROW><ROW><id>17173993</id><snippet>class MixedClass(TargetClass, *args):
    pass

MixedClass.__name__ = kwargs.get('name')
return MixedClass
</snippet></ROW><ROW><id>17173993</id><snippet>SyntaxError</snippet></ROW><ROW><id>17173993</id><snippet>def whatever = something</snippet></ROW><ROW><id>17173993</id><snippet>UberFoo = mixin(Foo,Bar,Baz,Bot,Quux,Muck,name='UberFoo')
</snippet></ROW><ROW><id>17174039</id><snippet>os.path</snippet></ROW><ROW><id>17174039</id><snippet> os.path.join( '/www', result + '.txt' )
</snippet></ROW><ROW><id>17174063</id><snippet>p = subprocess.Popen([path + '\\' + batchFile, path + '\\' + DIABFile],
                     bufsize=1, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
while p.poll() is None:
    line = p.stdout.readline()
    if line.startswith('Press any key to continue'):
        p.communicate('\r\n')
</snippet></ROW><ROW><id>17174456</id><snippet>re.findall(r'\d+: (.*?):', string)</snippet></ROW><ROW><id>17174456</id><snippet>import re

string = """
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 brd 127.255.255.255 scope host lo
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000
    link/ether 00:e0:c8:10:00:00 brd ff:ff:ff:ff:ff:ff
    inet 192.168.100.1/24 brd 192.168.100.255 scope global eth0
    inet 192.168.200.16/32 scope global eth0
    inet 192.168.200.17/32 scope global eth0
    inet 192.168.200.18/32 scope global eth0
3: gre0: &lt;NOARP&gt; mtu 1476 qdisc noop state DOWN
    link/gre 0.0.0.0 brd 0.0.0.0
4: 3g-wan1: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN qlen 3
    link/ppp
"""
print re.findall(r'\d+: (.*?):', string)
</snippet></ROW><ROW><id>17174456</id><snippet>['lo', 'eth0', 'gre0', '3g-wan1']
</snippet></ROW><ROW><id>17174601</id><snippet>v</snippet></ROW><ROW><id>17174601</id><snippet>v</snippet></ROW><ROW><id>17174601</id><snippet>vector_field = np.zeros((x.max()+10,y.max()+10,z.max()+10,3), dtype=np.float64)
vector_field[i,j,k,:] += v
print np.sum(np.abs(vector_field[i,j,k,:]-v))  # sometimes not 0!!
</snippet></ROW><ROW><id>17174601</id><snippet>i</snippet></ROW><ROW><id>17174601</id><snippet>j</snippet></ROW><ROW><id>17174601</id><snippet>k</snippet></ROW><ROW><id>17174601</id><snippet>i[m] == i[n]</snippet></ROW><ROW><id>17174601</id><snippet>j[m] == j[n]</snippet></ROW><ROW><id>17174601</id><snippet>k[m] == k[n]</snippet></ROW><ROW><id>17174601</id><snippet>vector_field[i,j,k,:]</snippet></ROW><ROW><id>17174601</id><snippet>v</snippet></ROW><ROW><id>17174678</id><snippet>O(1)</snippet></ROW><ROW><id>17174678</id><snippet>(input1,input2)</snippet></ROW><ROW><id>17174678</id><snippet>dic = {('1','a'): string1, ('1','b'):string2, ('1','c'): string3....}

if (input1,input2) in dic:
   return dic[input1,input2]
else:
   #do something else
</snippet></ROW><ROW><id>17174678</id><snippet>O(N)</snippet></ROW><ROW><id>17174678</id><snippet>input1</snippet></ROW><ROW><id>17174678</id><snippet>input2</snippet></ROW><ROW><id>17174779</id><snippet>&lt;input type="hidden" name="countries" value="{{ data.countries }}"&gt;
</snippet></ROW><ROW><id>17174779</id><snippet>str(data.countries)</snippet></ROW><ROW><id>17174779</id><snippet>def addProducts(request):
    if request.POST:
        post = {}
        for key in request.POST:
            value = request.POST[key]
            try:
                value = json.loads(value)
            except Exception:
                pass
            post[key] = value
        doc = json.dumps(post)
    # the other code goes here

    return render("add_products.html", {
        "products": data,
    }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>17174779</id><snippet>request.POST</snippet></ROW><ROW><id>17174783</id><snippet>"./testSuites/"</snippet></ROW><ROW><id>17174783</id><snippet>load_profile = open('output.txt', "r")
read_it = load_profile.read()
myLines = [ ]
for line in read_it.splitlines():
    for splt in line.split():
        if "./testSuites/" in splt:
            myLines.append(splt)
print myLines
</snippet></ROW><ROW><id>17174783</id><snippet>&gt;&gt;&gt; pg = "Hello world, how you doing?\nFoo bar!"
&gt;&gt;&gt; print pg
Hello world, how you doing?
Foo bar!
&gt;&gt;&gt; lines = pg.splitlines()
&gt;&gt;&gt; lines
["Hello world, how you doing?", 'Foo bar!']
&gt;&gt;&gt; for line in lines:
...     for splt in line.split():
...             if "Foo" in splt:
...                     print splt
... 
Foo
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17174783</id><snippet>strs[13:]</snippet></ROW><ROW><id>17174783</id><snippet>splt[-1]</snippet></ROW><ROW><id>17174835</id><snippet>Form.fields</snippet></ROW><ROW><id>17174835</id><snippet>def iter_email(self):
    for k in sorted(self.fields.keys()):
        if k.startswith('email_'):
            yield self[k]
</snippet></ROW><ROW><id>17175250</id><snippet>mask = pixel_array == paddingVal
byte_array[mask] = 0
byte_array[~mask] = np.round(255.0 * (pixel_array[~mask] - minVal) / (maxVal - minVal - 1.0))
</snippet></ROW><ROW><id>17175250</id><snippet>byte_array</snippet></ROW><ROW><id>17175250</id><snippet>byte_array = np.round(255.0 * (pixel_array - minVal) / (maxVal - minVal - 1.0)).astype(np.uint8)
byte_array[pixel_array == paddingVal] = 0
</snippet></ROW><ROW><id>17175365</id><snippet>from collections import defaultdict

table = """\
Cycle Test_Time  Current    Voltage
1     7.80E-002 0.00E+000   1.21E-001
1     3.01E+001 0.00E+000   1.19E-001
1     6.02E+001 0.00E+000   1.17E-001
2     9.02E+001 0.00E+000   1.14E-001
2     1.20E+002 0.00E+000   1.11E-001
2     1.50E+002 0.00E+000   1.08E-001
2     1.80E+002 0.00E+000   1.05E-001
2     2.10E+002 0.00E+000   1.02E-001
3     2.40E+002 0.00E+000   9.93E-002
3     2.70E+002 0.00E+000   9.66E-002
3     3.00E+002 0.00E+000   9.38E-002
3     3.10E+002 4.00E-001   1.26E+000"""

# Split into rows
table = table.splitlines()

# Split each row into values
table = [row.split() for row in table]

# Associate the column names with their index
headers = table.pop(0)
H = {x: i for i, x in enumerate(headers)}
time_index = H["Test_Time"]
cycle_index = H["Cycle"]

# Sort by Test_Time
table.sort(key=lambda row: float(row[time_index]))

# Associate each test with its cycle
D = defaultdict(list)
for row in table:
  D[int(row[cycle_index])].append(row)

# Present the information
print(*headers, sep='\t')
print("Latest row for each cycle")
for cycle in sorted(D.keys()):
  tests = D[cycle]
  latest_test = tests[-1]
  print(*latest_test, sep='\t')

print("All rows for last 5 cycles")
for cycle in sorted(D.keys())[-5:]:
  tests = D[cycle]
  for test in tests:
    print(*test, sep='\t')

print("All rows for cycles 4 through 30")
for cycle in sorted(D.keys()):
    if 4 &lt;= cycle &lt;= 30:
      tests = D[cycle]
      for test in tests:
        print(*test, sep='\t')
</snippet></ROW><ROW><id>17175426</id><snippet>int()</snippet></ROW><ROW><id>17175426</id><snippet>16</snippet></ROW><ROW><id>17175426</id><snippet>&gt;&gt;&gt; int('0xfff000', 16)
16773120
&gt;&gt;&gt; int('0xfff000', 16) == 0xfff000
True
</snippet></ROW><ROW><id>17175721</id><snippet>&gt;&gt;&gt; a = [ 8, 16, 24, 32 ]
&gt;&gt;&gt; b = [1, 2, 2, 3, 12, 16]
&gt;&gt;&gt; [a[0] if a[0] &lt; x and [a.pop(0)] else a[0] for x in b ]
[8, 8, 8, 8, 16, 16]
</snippet></ROW><ROW><id>17175721</id><snippet>collections.deque</snippet></ROW><ROW><id>17175721</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; d = deque(a)
&gt;&gt;&gt; [d[0] if d[0] &lt; x and [d.popleft()] else d[0] for x in b ]
[8, 8, 8, 8, 16, 16]
</snippet></ROW><ROW><id>17175721</id><snippet>&gt;&gt;&gt; it = iter(a)
&gt;&gt;&gt; prev = next(it)
&gt;&gt;&gt; result = []
for x in b:
    if x &lt;= prev:
        result.append(prev)
    else:
        prev = next(it)
        result.append(prev)
...         
&gt;&gt;&gt; result
[8, 8, 8, 8, 16, 16]
</snippet></ROW><ROW><id>17175750</id><snippet>cts_tradefed_script = "./android-cts/tools/cts-tradefed"
process = subprocess.Popen([cts_tradefed_script + " " + serialno], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>17175887</id><snippet>def generateNumber(num):
    mylist = []
    for i in range(num+1):
         mylist.append(i)
    return mylist


x = generateNumber(10)
</snippet></ROW><ROW><id>17175887</id><snippet>x = range(10+1)  # gives a generator that will make a list
</snippet></ROW><ROW><id>17175887</id><snippet>x = list(range(10+1))  # if you want a real list
</snippet></ROW><ROW><id>17175979</id><snippet>rule="A(B|C)D[E]FG"

def generate_strings(rule):
    if not rule:
        return [""]
    begin,end=rule[0],rule[1:]
    if begin=='[':
        i=end.find(']')
        if i==-1:
            raise Exception("Unmatched '['")
        alt,end=end[0:i],end[i+1:]
        return [a+e for e in generate_strings(end) for a in [alt,""]]
    if begin=='(':
        i=end.find(')')
        if i==-1:
            raise Exception("Unmatched '('")
        alt,end=end[0:i].split('|'),end[i+1:]
        return [a+e for e in generate_strings(end) for a in alt]
    if begin in [']',')','|']:
        raise Exception("Unexpected " + begin)
    return [begin + e for e in generate_strings(end)]

print generate_strings(rule)
</snippet></ROW><ROW><id>17175979</id><snippet>def flatten(l):
    return [item for sublist in l for item in sublist]

def generate_strings(rule):
    if not rule:
        return [""]
    begin,end=rule[0],rule[1:]
    if begin=='[':
        i=end.find(']')
        if i==-1:
            raise Exception("Unmatched '['")
        alt=flatten([generate_strings(a) for a in [end[0:i],""]])
        end=end[i+1:]
        return [a+e for e in generate_strings(end) for a in alt]
    if begin=='(':
        i=end.find(')')
        if i==-1:
            raise Exception("Unmatched '('")
        alt=flatten([generate_strings(a) for a in end[0:i].split('|')])
        end=end[i+1:]
        return [a+e for e in generate_strings(end) for a in alt]
    if begin in [']',')','|']:
        raise Exception("Unexpected " + begin)
    return [begin + e for e in generate_strings(end)]

print generate_strings(rule)
</snippet></ROW><ROW><id>17176066</id><snippet>hg clone -U oldrepo newrepo</snippet></ROW><ROW><id>17176278</id><snippet>class Phase1(Model):
  #...

class Phase2(Model):
  #...

class POObject(Model):
  phase1 = ForeignKey(Phase1, null=True)
  phase2 = ForeignKey(Phase2, null=True, related_name='+')

  def get_phase(self):
    if self.phase2_id: # more likely case first
       return self.phase2
    return self.phase1

  def set_phase(self, phase):
    # Detect which type it is
    if isinstance(phase, Phase2):
      self.phase2 = phase
      self.phase1 = None
    else:
      self.phase2 = None
      self.phase1 = phase

   phase = property(get_phase, set_phase)
</snippet></ROW><ROW><id>17176278</id><snippet>phase</snippet></ROW><ROW><id>17176348</id><snippet>import inspect
import sys


def test():
    pass

functions = [name for name, obj in inspect.getmembers(sys.modules[__name__], inspect.isfunction)]
print functions
</snippet></ROW><ROW><id>17176348</id><snippet>['test']
</snippet></ROW><ROW><id>17176358</id><snippet>def sendGroupChatMessage():
    """
    Send Group Chat Messages.
    """
    import Skype4Py as skype
    skypeClient = skype.Skype()
    skypeClient.Attach()
    for elem in skypeClient.ActiveChats:
        if len(elem.Members) &gt; 2:
            elem.SendMessage("SomeMessageHere")
</snippet></ROW><ROW><id>17176358</id><snippet>def sendGroupChatMessage():
    """
    Send Group Chat Messages.
    """
    import Skype4Py as skype
    skypeClient = skype.Skype()
    skypeClient.Attach()
    for elem in skypeClient.ActiveChats:
        if len(elem.Members) &gt; 2:
            for friend in elem.Members:
                  print friend.Handle
            elem.SendMessage("SomeMessageHere")
</snippet></ROW><ROW><id>17176358</id><snippet>&gt;&gt;&gt; groupTopic = 'Insert a Topic Here'
&gt;&gt;&gt; for chat in skypeClient.BookmarkedChats:
        if chat.Topic == groupTopic:
            chat.SendMessage("Send a Message Here")
</snippet></ROW><ROW><id>17176358</id><snippet>def sendGroupChatMessage(topic=""):
    """
    Send Group Chat Messages.
    """
    import Skype4Py as skype
    skypeClient = skype.Skype()
    skypeClient.Attach()
    messageSent = False
    for elem in skypeClient.ActiveChats:
        if len(elem._GetMembers()) &gt; 2 and elem.Topic == topic:
            elem.SendMessage("SomeMessageHere")
            messageSent = True

    if not messageSent:
        for chat in skypeClient.BookmarkedChats:
            if chat.Topic == topic:
                chat.SendMessage("SomeMessageHere")
                messageSent = True

    return messageSent
</snippet></ROW><ROW><id>17176932</id><snippet>itertool.combinations</snippet></ROW><ROW><id>17176932</id><snippet>combinations</snippet></ROW><ROW><id>17176932</id><snippet>list()</snippet></ROW><ROW><id>17176932</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; lis = [1,2,3,4]
for i in xrange(1, len(lis)+1):  #xrange will return the values 1,2,3,4 in this loop
    print list(combinations(lis, i))
...     
[(1,), (2,), (3,), (4,)]
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]
[(1,2,3,4)]
</snippet></ROW><ROW><id>17177050</id><snippet>&gt;&gt;&gt; print u'm\u00b2'.encode('utf-8').decode('latin-1')
mÂ²
</snippet></ROW><ROW><id>17177050</id><snippet>unicode</snippet></ROW><ROW><id>17177050</id><snippet>unicode</snippet></ROW><ROW><id>17177050</id><snippet>str</snippet></ROW><ROW><id>17177050</id><snippet>bytes</snippet></ROW><ROW><id>17177050</id><snippet>def superscript(digit):
    if digit in (2, 3):
        return unichr(0x00B0 + digit)
    else:
        return unichr(0x2070 + digit)
</snippet></ROW><ROW><id>17177050</id><snippet>def term(base, exponent):
    return base + u''.join(superscript(int(digit)) for digit in exponent)
</snippet></ROW><ROW><id>17177050</id><snippet>&gt;&gt;&gt; print term('x', '123')
xⁱ²³
</snippet></ROW><ROW><id>17177050</id><snippet>QLabel</snippet></ROW><ROW><id>17177050</id><snippet>def term(base, exponent):
    return u'{}&lt;sup&gt;{}&lt;/sup&gt;'.format(base, exponent)
</snippet></ROW><ROW><id>17177050</id><snippet>x&lt;sup&gt;123&lt;/sup&gt;</snippet></ROW><ROW><id>17177050</id><snippet>QLabel</snippet></ROW><ROW><id>17177050</id><snippet># -*-coding:Latin-1 -*</snippet></ROW><ROW><id>17177050</id><snippet>u'm\2074'</snippet></ROW><ROW><id>17177050</id><snippet>u'm⁴'</snippet></ROW><ROW><id>17177050</id><snippet># -*- coding: Latin-1 -*-
</snippet></ROW><ROW><id>17177050</id><snippet># coding=Latin-1
</snippet></ROW><ROW><id>17177050</id><snippet>unicode</snippet></ROW><ROW><id>17177050</id><snippet>u</snippet></ROW><ROW><id>17177050</id><snippet>decode</snippet></ROW><ROW><id>17177192</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; lis = [0,1,2,3,4]
&gt;&gt;&gt; for x,y in combinations(range(len(lis)),2):
    l = lis[:]
    l[x] -= 1
    l[y] -= 1
    print l
...     
[-1, 0, 2, 3, 4]
[-1, 1, 1, 3, 4]
[-1, 1, 2, 2, 4]
[-1, 1, 2, 3, 3]
[0, 0, 1, 3, 4]
[0, 0, 2, 2, 4]
[0, 0, 2, 3, 3]
[0, 1, 1, 2, 4]
[0, 1, 1, 3, 3]
[0, 1, 2, 2, 3]
</snippet></ROW><ROW><id>17177192</id><snippet>for x,y in combinations(range(len(lis)),2):
    print [item - 1 if i in (x,y) else item  for i,item in enumerate(lis)]
...     
[-1, 0, 2, 3, 4]
[-1, 1, 1, 3, 4]
[-1, 1, 2, 2, 4]
[-1, 1, 2, 3, 3]
[0, 0, 1, 3, 4]
[0, 0, 2, 2, 4]
[0, 0, 2, 3, 3]
[0, 1, 1, 2, 4]
[0, 1, 1, 3, 3]
[0, 1, 2, 2, 3]
</snippet></ROW><ROW><id>17177485</id><snippet>import xmltodict

message = """&lt;?xml version="1.0"?&gt;&lt;note&gt;&lt;to&gt;Tove&lt;/to&gt;&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;&lt;/note&gt;"""
print xmltodict.parse(message)['note']
</snippet></ROW><ROW><id>17177485</id><snippet>OrderedDict</snippet></ROW><ROW><id>17177485</id><snippet>OrderedDict([(u'to', u'Tove'), (u'from', u'Jani'), (u'heading', u'Reminder'), (u'body', u"Don't forget me this weekend!")])
</snippet></ROW><ROW><id>17177485</id><snippet>print dict(xmltodict.parse(message)['note'])
</snippet></ROW><ROW><id>17177485</id><snippet>{u'body': u"Don't forget me this weekend!", u'to': u'Tove', u'from': u'Jani', u'heading': u'Reminder'}
</snippet></ROW><ROW><id>17177495</id><snippet>np.array</snippet></ROW><ROW><id>17177495</id><snippet>&gt;&gt;&gt; lst = [np.zeros(7680) for x in range(800)]  #just a list of 800 ndarrays ...
&gt;&gt;&gt; arr = np.array(lst)   #make them into an array
&gt;&gt;&gt; arr.shape   #shape looks OK to me :-)
(800, 7680)
</snippet></ROW><ROW><id>17177506</id><snippet>try: 
    #Block of code that throws exception
except Object.DoesNotExist:
    #Handle error
</snippet></ROW><ROW><id>17177941</id><snippet>hash(tup)
</snippet></ROW><ROW><id>17178045</id><snippet>from google.appengine.api import images
images.get_serving_url(...)
images.delete_serving_url(...)
</snippet></ROW><ROW><id>17178045</id><snippet>get_serving_url</snippet></ROW><ROW><id>17178045</id><snippet>from google.appengine.api.images import get_serving_url</snippet></ROW><ROW><id>17178458</id><snippet>line2 = new_file.next() # now pointing at line 3
if line2[0] == "P":
    for _ in xrange(4):
        new_file.next() # skip lines 3, 4, 5, 6
else:
    new_file.next() # skip line 3 only
</snippet></ROW><ROW><id>17178635</id><snippet>import sys 
import random

while True: 
    num1 = random.randint(0,12)
    num2 = random.randint(0,12)
    print "To exit this game type 'exit'" 
    theyputinstuffhere = raw_input("What is " + str(num2) + " times " + str(num1) + "? ") 


    if theyputinstuffhere == "exit": #if the user typed in 'exit' then exit the game
        print "Now exiting game!" #prints stuff
        sys.exit() #exits

    elif int(theyputinstuffhere) == num1*num2: 
        print "Correct!" #print stuff
    else:
        print "Wrong!" 
</snippet></ROW><ROW><id>17178635</id><snippet>random.randint</snippet></ROW><ROW><id>17178635</id><snippet>num1</snippet></ROW><ROW><id>17178635</id><snippet>num2</snippet></ROW><ROW><id>17178788</id><snippet>str.join</snippet></ROW><ROW><id>17178788</id><snippet>repr</snippet></ROW><ROW><id>17178788</id><snippet>&gt;&gt;&gt; x = ['dogs', 'cats']
&gt;&gt;&gt; ", ".join(map(repr,x))
"'dogs', 'cats'"
</snippet></ROW><ROW><id>17178788</id><snippet>&gt;&gt;&gt; ", ".join([repr(y) for y in x])
"'dogs', 'cats'"
</snippet></ROW><ROW><id>17178795</id><snippet>TemplateResponse</snippet></ROW><ROW><id>17178795</id><snippet>from django.template.response import TemplateResponse    

def decorator(view):
    def wrapper(request, *args, **kwargs):
        r = view(request, *args, **kwargs)
        r.context_data = {'foo': 'bar'}
        return r.render()
    return wrapper

@decorator
def index(request):
    return TemplateResponse(request, 'index.html')
</snippet></ROW><ROW><id>17178796</id><snippet>for l in sys.stdin:
    l = l.decode('utf-8', 'replace')
    print l
</snippet></ROW><ROW><id>17178796</id><snippet>for l in file</snippet></ROW><ROW><id>17178796</id><snippet>while True:
    l = sys.stdin.readline()
    if not l: break
    l = l.decode('utf-8', 'replace')
    print l
</snippet></ROW><ROW><id>17178958</id><snippet>rows = enumerate(info)</snippet></ROW><ROW><id>17178958</id><snippet>row</snippet></ROW><ROW><id>17178958</id><snippet>rows</snippet></ROW><ROW><id>17178958</id><snippet>user</snippet></ROW><ROW><id>17178958</id><snippet>if row[1][key_index] == user:
</snippet></ROW><ROW><id>17178958</id><snippet>for index, row in rows:
    if row[key_index] == user:
        print row[1]
</snippet></ROW><ROW><id>17178958</id><snippet>for row in info:
    if row[key_index] == user:
        print row[1]
</snippet></ROW><ROW><id>17178958</id><snippet>in</snippet></ROW><ROW><id>17178958</id><snippet>for row in info:
    if user in row[key_index]:
        print row[1]
</snippet></ROW><ROW><id>17178958</id><snippet>inventory = { row[key_index]: row for row in info }
</snippet></ROW><ROW><id>17178958</id><snippet>for</snippet></ROW><ROW><id>17178958</id><snippet>print inventory[user][1]
</snippet></ROW><ROW><id>17178958</id><snippet>sqlite3</snippet></ROW><ROW><id>17178958</id><snippet>cur = db.execute('SELECT Computer FROM Inventory WHERE Name LIKE %s', name)
</snippet></ROW><ROW><id>17178959</id><snippet>&gt;&gt;&gt; urllib.urlopen(image_url).read()
'\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;403 You are banned from this site.  Please contact via a different client configuration if you believe that this is a mistake.&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Error 403 You are banned from this site.  Please contact via a different client configuration if you believe that this is a mistake.&lt;/h1&gt;\n    &lt;p&gt;You are banned from this site.  Please contact via a different client configuration if you believe that this is a mistake.&lt;/p&gt;\n    &lt;h3&gt;Guru Meditation:&lt;/h3&gt;\n    &lt;p&gt;XID: 1806024796&lt;/p&gt;\n    &lt;hr&gt;\n    &lt;p&gt;Varnish cache server&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n'
</snippet></ROW><ROW><id>17178959</id><snippet>opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
response = opener.open(image_url)
img_file = cStringIO.StringIO(response.read())   
image = Image.open(img_file)
</snippet></ROW><ROW><id>17179011</id><snippet>_ARCHIVE_FORMATS</snippet></ROW><ROW><id>17179011</id><snippet>shutil.make_archive()</snippet></ROW><ROW><id>17179011</id><snippet>_make_zipfile</snippet></ROW><ROW><id>17179011</id><snippet>shutil.register_archive_format()</snippet></ROW><ROW><id>17179011</id><snippet>zip</snippet></ROW><ROW><id>17179011</id><snippet>shutil.register_archive_format('zip', _make_zipfile, description='ZIP file')
</snippet></ROW><ROW><id>17179011</id><snippet>zip</snippet></ROW><ROW><id>17179135</id><snippet>s = '&lt;img src="Controls/RiverLevels/ChartImage.jpg?Id=471&amp;ChartType=Histogram" id="StationDetails_Chart1_chartImage" alt="Current river level" /&gt;'

from bs4 import BeautifulSoup
import re
from urlparse import urlsplit, parse_qs


soup = BeautifulSoup(s)
# find the node with a src starting with Controls
node = soup.find('img',{'src': re.compile("^Controls")})
# Break up the url in the src attribute
url_split = urlsplit(node['src'])
# Parse out the query parameter from the url
qs = parse_qs(url_split.query)
# Display the value for `Id`
print qs['Id'][0]
</snippet></ROW><ROW><id>17179180</id><snippet>0</snippet></ROW><ROW><id>17179180</id><snippet>float</snippet></ROW><ROW><id>17179180</id><snippet>k = (val1*8)/float(val2) #or just do: (val1*8.0)/val2   #numerator is now a float
</snippet></ROW><ROW><id>17179180</id><snippet>&gt;&gt;&gt; 2/3
0
&gt;&gt;&gt; 2/3.0
0.6666666666666666

&gt;&gt;&gt; 2/float(3)
0.6666666666666666
</snippet></ROW><ROW><id>17179180</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 2/3
0.6666666666666666
</snippet></ROW><ROW><id>17179180</id><snippet>operator.truediv</snippet></ROW><ROW><id>17179180</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.truediv(2,3)
0.6666666666666666
</snippet></ROW><ROW><id>17179198</id><snippet>CELERYD_POOL = 'processes'</snippet></ROW><ROW><id>17179198</id><snippet>billiard</snippet></ROW><ROW><id>17179198</id><snippet>from billiard import current_process
from celery import task

@task
def print_info():
    # This will print an int in [0..concurrency[
    print current_process().index
</snippet></ROW><ROW><id>17179198</id><snippet>index</snippet></ROW><ROW><id>17179198</id><snippet>index</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>import</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>import</snippet></ROW><ROW><id>17179199</id><snippet>from foo import bar</snippet></ROW><ROW><id>17179199</id><snippet>bar</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>from foo import bar</snippet></ROW><ROW><id>17179199</id><snippet>import foo; bar = foo.bar</snippet></ROW><ROW><id>17179199</id><snippet>bar</snippet></ROW><ROW><id>17179199</id><snippet>foo</snippet></ROW><ROW><id>17179199</id><snippet>reload(foo)</snippet></ROW><ROW><id>17179199</id><snippet>foo.bar</snippet></ROW><ROW><id>17179199</id><snippet>from foo import bar</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>import video
from video import MLStripper

# ... later

imp.reload(video)
from video import MLStripper
</snippet></ROW><ROW><id>17179199</id><snippet>from video import video</snippet></ROW><ROW><id>17179199</id><snippet>reload(video)</snippet></ROW><ROW><id>17179199</id><snippet>video</snippet></ROW><ROW><id>17179199</id><snippet>imp.reload(sys.modules['video'])
from video import MLStripper
</snippet></ROW><ROW><id>17179199</id><snippet>as</snippet></ROW><ROW><id>17179199</id><snippet>=</snippet></ROW><ROW><id>17179199</id><snippet>import video as _video
from video import video

# ... later

imp.reload(_video)
from video import video
</snippet></ROW><ROW><id>17179199</id><snippet>import video
from video import MLStripper

stripper = MLStripper('foo")

# ... later

imp.reload(video)
from video import MLStripper
</snippet></ROW><ROW><id>17179199</id><snippet>video</snippet></ROW><ROW><id>17179199</id><snippet>MLStripper</snippet></ROW><ROW><id>17179199</id><snippet>MLStripper</snippet></ROW><ROW><id>17179199</id><snippet>MLStripper</snippet></ROW><ROW><id>17179199</id><snippet>stripper</snippet></ROW><ROW><id>17179199</id><snippet>MLStripper</snippet></ROW><ROW><id>17179199</id><snippet>stripper</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>imp.reload(video)
from video import MLStripper
stripper = MLStripper('foo")
</snippet></ROW><ROW><id>17179199</id><snippet>__class__</snippet></ROW><ROW><id>17179199</id><snippet>__class__</snippet></ROW><ROW><id>17179199</id><snippet>pickle</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179199</id><snippet>reload</snippet></ROW><ROW><id>17179282</id><snippet>shelve</snippet></ROW><ROW><id>17179282</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; data = {'foo':'foo value'}
&gt;&gt;&gt; d = shelve.open('myfile.db')
&gt;&gt;&gt; d['data'] = data
&gt;&gt;&gt; d.close() 
</snippet></ROW><ROW><id>17179282</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; d = shelve.open('myfile.db')
&gt;&gt;&gt; data = d['data']
&gt;&gt;&gt; d.close() 
</snippet></ROW><ROW><id>17179282</id><snippet>files</snippet></ROW><ROW><id>17179282</id><snippet>CPickle</snippet></ROW><ROW><id>17179282</id><snippet>SQLite</snippet></ROW><ROW><id>17179289</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; content = urllib2.urlopen(some_url).read()
&gt;&gt;&gt; print content
</snippet></ROW><ROW><id>17179289</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.python.org")
&gt;&gt;&gt; conn.request("HEAD","/index.html")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
200 OK
</snippet></ROW><ROW><id>17179289</id><snippet>&gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
&gt;&gt;&gt; r.status_code
200
</snippet></ROW><ROW><id>17179398</id><snippet>b = r'c\$}on(.*)tent(.*)mo(.*)re'
</snippet></ROW><ROW><id>17179480</id><snippet>In [11]: dfN13 = pd.DataFrame([[1, 2]], columns=[['N13', 'N13'], ['a', 'b']])

In [12]: dfM13 = pd.DataFrame([[3, 4]], columns=[['M13', 'M13'], ['a', 'b']])
</snippet></ROW><ROW><id>17179480</id><snippet>In [13]: df = pd.concat([dfN13, dfM13], axis=1)

In [14]: df
Out[14]:
   N13     M13
     a  b    a  b
0    1  2    3  4
</snippet></ROW><ROW><id>17179480</id><snippet>In [15]: df.columns.names = ['asset', 'chart']

In [16]: df.index.names = ['date']  # well, not in this toy example

In [17]: df
Out[17]:
asset  N13     M13
chart    a  b    a  b
date
0        1  2    3  4
</snippet></ROW><ROW><id>17179480</id><snippet>xs</snippet></ROW><ROW><id>17179480</id><snippet>In [18]: df.xs('a', level='chart', axis=1)
Out[18]:
asset  N13  M13
date
0        1    3

In [19]: df.xs('a', level='chart', axis=1).plot()  # win
</snippet></ROW><ROW><id>17179607</id><snippet>&gt;&gt;&gt; temp = "abcde"
&gt;&gt;&gt; temp[1:-1]
'bcd'
&gt;&gt;&gt; temp[-1:] + temp[1:-1] + temp[:1]
'ebcda'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17179635</id><snippet>ping.py</snippet></ROW><ROW><id>17179635</id><snippet>from service import Service</snippet></ROW><ROW><id>17179635</id><snippet>from lib.services.service import Service</snippet></ROW><ROW><id>17179635</id><snippet>lib/services</snippet></ROW><ROW><id>17179635</id><snippet>sys.path</snippet></ROW><ROW><id>17179635</id><snippet>imp.load_source</snippet></ROW><ROW><id>17179635</id><snippet>import os, imp
def doimport( clazz, modPart, kw, class_check):
    path = os.path.join('lib', modPart, clazz + '.py')
    mod = imp.load_source( clazz, path )
    item = mod.create(kw)

    if class_check(item):
        print "im happy"
        return item
</snippet></ROW><ROW><id>17179822</id><snippet>string = str(integer)

x = 0
largest = 0
stringlength = len(string)

while x &lt; stringlength-4: # going to -5 would be out of rangue
    a = int(string[x])
    b = int(string[x+1])
    c = int(string[x+2])
    d = int(string[x+3])
    e = int(string[x+4])
    if (a*b*c*d*e &gt; largest):
        largest = a*b*c*d*e
        print(largest)
    x += 1

print(largest)
</snippet></ROW><ROW><id>17180096</id><snippet>[2, 3, 5]</snippet></ROW><ROW><id>17180096</id><snippet>[4, 9, 25]</snippet></ROW><ROW><id>17180096</id><snippet>[0.16, 0.36, 1]</snippet></ROW><ROW><id>17180263</id><snippet>attSequence</snippet></ROW><ROW><id>17180263</id><snippet>dmg</snippet></ROW><ROW><id>17180263</id><snippet>attSequence[1]</snippet></ROW><ROW><id>17180263</id><snippet>attSequence</snippet></ROW><ROW><id>17180263</id><snippet>att = {
    "roll": attRoll,
    "hit": hit,
    "dmg": dmg
}
print att["dmg"]
</snippet></ROW><ROW><id>17180263</id><snippet>att = {
    "roll": 34,
    "hit": False,
    "dmg": 1
}
</snippet></ROW><ROW><id>17180287</id><snippet>with open("luawrite", "r") as f:
    for line in f:
        hashes = line.split()
        ckey = hashes[1]
        val1 = int(hashes[2])
        val2 = int(hashes[3])
        a,b = result[ckey] 
        result[ckey] = (a+val1, b+val2) 
print result  
</snippet></ROW><ROW><id>17180631</id><snippet>context = {'user': request.user}  # assign the current user to the context 'user'
return render_to_response('my_template.html', context)
</snippet></ROW><ROW><id>17180631</id><snippet>my_template.html</snippet></ROW><ROW><id>17180631</id><snippet>{{ user.name }}</snippet></ROW><ROW><id>17180641</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>17180641</id><snippet>def test3():
    for i in range(1000000):
        f2(f1())
</snippet></ROW><ROW><id>17180641</id><snippet>def f2():
    return 2 * f1()
def test3():
    for i in range(1000000):
        f2()
</snippet></ROW><ROW><id>17180641</id><snippet>f1</snippet></ROW><ROW><id>17180641</id><snippet>locals</snippet></ROW><ROW><id>17180641</id><snippet>def test3():
    _f1 = f1
    for i in range(1000000):
        f2(_f1())

def f2(_f1=f1):
    return 2 * _f1()
def test3():
    for i in range(1000000):
        f2()
</snippet></ROW><ROW><id>17180641</id><snippet>range(1000000)</snippet></ROW><ROW><id>17180641</id><snippet>test1 + test2</snippet></ROW><ROW><id>17180641</id><snippet>test3</snippet></ROW><ROW><id>17180641</id><snippet>test3</snippet></ROW><ROW><id>17180641</id><snippet>range</snippet></ROW><ROW><id>17180641</id><snippet>malloc</snippet></ROW><ROW><id>17180775</id><snippet>    self.x += self.xMoveAmnt
</snippet></ROW><ROW><id>17180775</id><snippet>x</snippet></ROW><ROW><id>17180775</id><snippet>Enemy</snippet></ROW><ROW><id>17180775</id><snippet>    if self.rect.right &gt;= 500:
</snippet></ROW><ROW><id>17180775</id><snippet>x</snippet></ROW><ROW><id>17180775</id><snippet>rect.right</snippet></ROW><ROW><id>17180775</id><snippet>x</snippet></ROW><ROW><id>17180775</id><snippet>rect.right</snippet></ROW><ROW><id>17180775</id><snippet>    if self.x + self.rect.right &gt;= 500:
</snippet></ROW><ROW><id>17180832</id><snippet>for anchor in tbody.findAll('div', style="s1"):
    text = ''.join([x for x in anchor.contents if isinstance(x, bs4.element.NavigableString)])
</snippet></ROW><ROW><id>17180832</id><snippet>.strip()</snippet></ROW><ROW><id>17180832</id><snippet>for anchor in tbody.findAll('div', style="s1"):
    text = ''.join([x for x in anchor.contents if isinstance(x, bs4.element.NavigableString)])
    print([text])
    print([text.strip()])
</snippet></ROW><ROW><id>17180832</id><snippet>[u'\n\n\nHere is text 3 and this is what I want.\n']
[u'Here is text 3 and this is what I want.']
</snippet></ROW><ROW><id>17181035</id><snippet>tokens = test.lower().split()
</snippet></ROW><ROW><id>17181035</id><snippet>words</snippet></ROW><ROW><id>17181035</id><snippet>words = { e.lower() for e in words }
</snippet></ROW><ROW><id>17181128</id><snippet>print("Hello World")</snippet></ROW><ROW><id>17181133</id><snippet>y = 0</snippet></ROW><ROW><id>17181334</id><snippet>to_datetime</snippet></ROW><ROW><id>17181334</id><snippet>In [11]: df.index = pd.to_datetime(df.pop('date'))

In [12]: df
Out[12]:
              avg     high   low    qty
date
2013-05-27  16.92    19.00  1.22  71151
2013-05-30  14.84    19.00  1.22  42939
2013-06-02   9.19    17.20  1.23   5607
2013-06-05  23.63  5000.00  1.22   5850
2013-06-10  13.82    19.36  1.22   5644
2013-06-15  17.76    24.00  2.02  16969
</snippet></ROW><ROW><id>17181334</id><snippet>emwa</snippet></ROW><ROW><id>17181334</id><snippet>In [13]: pd.ewma(df["avg"], span=60, freq="D")
Out[13]:
date
2013-05-27    16.920000
2013-05-28    16.920000
2013-05-29    16.920000
2013-05-30    15.862667
2013-05-31    15.862667
2013-06-01    15.862667
2013-06-02    13.563899
2013-06-03    13.563899
2013-06-04    13.563899
2013-06-05    16.207625
2013-06-06    16.207625
2013-06-07    16.207625
2013-06-08    16.207625
2013-06-09    16.207625
2013-06-10    15.697743
2013-06-11    15.697743
2013-06-12    15.697743
2013-06-13    15.697743
2013-06-14    15.697743
2013-06-15    16.070721
Freq: D, dtype: float64
</snippet></ROW><ROW><id>17181334</id><snippet>In [14]: df['ewma'] = pd.ewma(df["avg"], span=60, freq="D")

In [15]: df
Out[15]:
              avg     high   low    qty       ewma
date
2013-05-27  16.92    19.00  1.22  71151  16.920000
2013-05-30  14.84    19.00  1.22  42939  15.862667
2013-06-02   9.19    17.20  1.23   5607  13.563899
2013-06-05  23.63  5000.00  1.22   5850  16.207625
2013-06-10  13.82    19.36  1.22   5644  15.697743
2013-06-15  17.76    24.00  2.02  16969  16.070721
</snippet></ROW><ROW><id>17181377</id><snippet>class Enemy():
    def __init__(self, char, xMoveAmnt, startY=0, startX=0, delay=0):
         ...
         self.delay = delay

    def moveChar(self):
        if self.delay &gt; 0:
             self.delay -= 1
             return
        self.x += self.xMoveAmnt
        if self.x + self.rect.right &gt;= 800:
            self.x=self.startX
            self.y=random.randint(0,300)

enemyList = []
for i in range (0, 3):
    xMoveAmnt=20
    enemyList.append(Enemy(("orc.png"), xMoveAmnt, random.randint(0, 500), 0, random.randint(0,100)))
</snippet></ROW><ROW><id>17181674</id><snippet>print(datetime.now().strftime('%Y-%m-%d %I:%M:%S %p'))
</snippet></ROW><ROW><id>17181674</id><snippet>2013-06-18 09:47:38 PM
</snippet></ROW><ROW><id>17181703</id><snippet># this maps elements in a to elements in b (elements of a are the keys)
# each element of a maps to several elements of b (as a list)
a2b = {
       'a' : [1,2,3]
      }

# this maps elements in b to elements in a (elements of b are the keys)
# each element of bmaps to several elements of a (as a list)
b2a = {
        1 : ['a'],
        2 : ['a'],
        3 : ['a'],
      }
</snippet></ROW><ROW><id>17181703</id><snippet>&gt;&gt;&gt; print 1 in b2a
True
&gt;&gt;&gt; print 'a' in b2a
False
</snippet></ROW><ROW><id>17181703</id><snippet>elem</snippet></ROW><ROW><id>17181703</id><snippet>elem</snippet></ROW><ROW><id>17181703</id><snippet>elem in b2a
</snippet></ROW><ROW><id>17181723</id><snippet>JOIN name
SAY message with spaces
FOLD
RAISE amount
# ...
</snippet></ROW><ROW><id>17181723</id><snippet>OK
ERROR error message
JOINED player name with spaces
LEFT player
SAID player message with spaces
NEWHAND player player player player…
DEALT player face suit
ANTED player amount
CHECKED player
# ...
</snippet></ROW><ROW><id>17181723</id><snippet>telnet</snippet></ROW><ROW><id>17181723</id><snippet>nc</snippet></ROW><ROW><id>17181723</id><snippet>Condition</snippet></ROW><ROW><id>17181723</id><snippet>accept</snippet></ROW><ROW><id>17181723</id><snippet>for line in self.sock.makefile():</snippet></ROW><ROW><id>17181723</id><snippet>Lock</snippet></ROW><ROW><id>17181723</id><snippet>lock = threading.Lock()
clients = []
game = Game()

ssock = socket.socket()
ssock.bind(('', 12345))
ssock.listen(5)
while True:
    sock, addr = ssock.accept()
    with lock:
        clients.append(Client(addr, sock, len(clients))
</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>class Client(object):
    def __init__(self, addr, sock, number):
        self.sock = sock
        self.name = '&lt;{}&gt; (not logged in)'.format(addr)
        self.number = number
        self.lock = threading.Lock()
        self.thread = threading.Thread(target=self.serve)
        self.thread.start()

    def send(self, msg):
        with self.lock:
            self.sock.send(msg)

    def run(self):
        for line in self.sock.makefile():
            args = line.rstrip().split()
            cmd = args.pop().upper()
            method = getattr(self, 'do_{}'.format(cmd), None)
            if method is none:
                self.write('ERROR unknown command {}\n'.format(cmd))
            else:
                try:
                    method(*args)
                except Exception as e:
                    self.send('ERROR in {}: {}\n'.format(cmd, e))
                else:
                    self.send('OK\n')
</snippet></ROW><ROW><id>17181723</id><snippet>broadcast</snippet></ROW><ROW><id>17181723</id><snippet>def broadcast(msg):
    with lock:
        for client in clients:
            client.send(msg)
</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>elif response == 'FOO'</snippet></ROW><ROW><id>17181723</id><snippet>do_FOO</snippet></ROW><ROW><id>17181723</id><snippet>print</snippet></ROW><ROW><id>17181723</id><snippet>broadcast</snippet></ROW><ROW><id>17181723</id><snippet>def do_SAY(self, *msg):
    broadcast('SAID {} {}'.format(self.number, ' '.join(msg)))
</snippet></ROW><ROW><id>17181723</id><snippet>Game</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>run</snippet></ROW><ROW><id>17181723</id><snippet>broadcast</snippet></ROW><ROW><id>17181723</id><snippet>print</snippet></ROW><ROW><id>17181723</id><snippet>def new_hand(self):
    with self.condition:
        while len(self.players) &lt; 2:
            self.condition.wait()
        players = self.players
    # all your existing sequential logic
</snippet></ROW><ROW><id>17181723</id><snippet>join</snippet></ROW><ROW><id>17181723</id><snippet>def join(self, player):
    with self.condition:
        self.players.append(self)
        self.condition.notify()
</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>def do_JOIN(self, name):
    self.name = name
    game.join(self)
    broadcast('JOINED {} {}'.format(self.number, self.name)
</snippet></ROW><ROW><id>17181723</id><snippet>def wait_for_bets(self, bettor):
    with self.condition:
        while self.bets[self.bettor] is None:
            self.condition.wait()
        bettor, bet = self.bettor, self.bets[self.bettor]
        self.bets[self.bettor] = None
    # handle the bet
</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>def bet(self, player, bet):
    with self.condition:
        self.bets[player] = bet
        self.condition.notify()
</snippet></ROW><ROW><id>17181723</id><snippet>Client</snippet></ROW><ROW><id>17181723</id><snippet>def do_FOLD(self):
    game.bet(self, 'fold')
</snippet></ROW><ROW><id>17181830</id><snippet>[A-Z\.]+\s</snippet></ROW><ROW><id>17181883</id><snippet>import pygame
from pygame.locals import *
from sys import exit

counter=0
def Update():
 global counter
 counter=(counter+1)%7

def sprite(w, h):
    a=[]
    clock=pygame.time.Clock()
    screen=pygame.display.set_mode((200,200),0,24)
    image = pygame.image.load("fireSprite.png").convert_alpha()
    width,height=image.get_size()
    for i in xrange(int(width/w)):
        a.append(image.subsurface((i*w,0,w,h)))
    while True:
        for i in pygame.event.get():
            if i.type==QUIT:
                exit()
        screen.fill((0,0,0)) 
        screen.blit(a[counter],(100,100))
        Update()
        pygame.display.update()
        clock.tick(5)

   sprite(20,20)
</snippet></ROW><ROW><id>17181957</id><snippet>step</snippet></ROW><ROW><id>17181957</id><snippet>step['descriptionHtml'].replace("&lt;b&gt;", "").replace("&lt;/b&gt;", "")
</snippet></ROW><ROW><id>17181957</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>17181957</id><snippet>&lt;/b&gt;</snippet></ROW><ROW><id>17182075</id><snippet>import re

def findSubString(raw_string, start_marker, end_marker):
    return re.sub(
        r'(?&lt;={}).*?(?={})'.format(re.escape(start_marker), re.escape(end_marker)),
        lambda m: m.group().strip().replace(' ', '_'),
        raw_string)

line1 = "Who acted as `` Bruce Wayne '' in the movie `` Batman Forever '' ?"
line1 = findSubString(line1, "``", "''")
assert line1 == "Who acted as ``Bruce_Wayne'' in the movie ``Batman_Forever'' ?"
</snippet></ROW><ROW><id>17182075</id><snippet>def findSubString(raw_string, start_marker, end_marker): 
    result = []
    rest = raw_string
    while True:
        head, sep, tail = rest.partition(start_marker)
        if not sep:
            break
        body, sep, tail = tail.partition(end_marker)
        if not sep:
            break
        result.append(head + start_marker + body.strip().replace(' ', '_') + end_marker)
        rest = tail
    result.append(rest)
    return ''.join(result)
</snippet></ROW><ROW><id>17182145</id><snippet>\</snippet></ROW><ROW><id>17182145</id><snippet>'(cn=\(test group\))'
</snippet></ROW><ROW><id>17182159</id><snippet>rooms['first_again'] = #something
</snippet></ROW><ROW><id>17182159</id><snippet>KeyError: 'torch'
</snippet></ROW><ROW><id>17182159</id><snippet>rooms['first_again'] = {'torch' : False, 'seen' : False}
</snippet></ROW><ROW><id>17182159</id><snippet>rooms['first_again'] = {'torch' : False}
rooms['first_again']['seen'] = False
</snippet></ROW><ROW><id>17182226</id><snippet>import re

text = "Cello is a yellow parakeet who sings with Lillian. Toby is a clown who doesn't sing. Willy is a Wonka. Cello is a yellow Lillian."

for match in re.findall(r'(Cello(?:\W{1,80}\w{1,60}){0,9}\W{0,20}Lillian)', text, flags=re.I):
    print match
</snippet></ROW><ROW><id>17182226</id><snippet>Cello is a yellow parakeet who sings with Lillian
Cello is a yellow Lillian
</snippet></ROW><ROW><id>17182226</id><snippet>flags=re.I</snippet></ROW><ROW><id>17182226</id><snippet>Cello</snippet></ROW><ROW><id>17182226</id><snippet>cello</snippet></ROW><ROW><id>17182226</id><snippet>Cello</snippet></ROW><ROW><id>17182226</id><snippet>(?:foo)</snippet></ROW><ROW><id>17182226</id><snippet>(foo)</snippet></ROW><ROW><id>17182324</id><snippet>from encodings.aliases import aliases
&gt;&gt;&gt; def find(q):
        q = encodings.normalize_encoding(q)
...     return [(k,v)for k,v in aliases.iteritems() if q in v or q in k]

&gt;&gt;&gt;&gt; find('100')
[('ksx1001', 'euc_kr'), ('iso_ir_100', 'latin_1'), ('ks_x_1001', 'euc_kr')]
</snippet></ROW><ROW><id>17182346</id><snippet>import csv
import string

input_file = open('DesktopData.csv', 'r')
output_file = open('fixformat.csv', 'w')
data = csv.reader(input_file)
writer = csv.writer(output_file,quoting=csv.QUOTE_ALL)# dialect='excel')
specials = '%'

for line in data:
    line = str(line)
    new_line = str.replace(line,specials,'')
    writer.writerow(new_line.split(','))

input_file.close()
output_file.close()
</snippet></ROW><ROW><id>17182392</id><snippet>command</snippet></ROW><ROW><id>17182392</id><snippet>getVal</snippet></ROW><ROW><id>17182392</id><snippet>def getVal(self, newscale):
    print newscale
</snippet></ROW><ROW><id>17182661</id><snippet>split(',')</snippet></ROW><ROW><id>17182661</id><snippet>new_line.split(',')</snippet></ROW><ROW><id>17182661</id><snippet>['Column1','Column2','Column3']</snippet></ROW><ROW><id>17182661</id><snippet>' | '.join(new_line.split(','))
</snippet></ROW><ROW><id>17182661</id><snippet>Column1 | Column2 | Column3</snippet></ROW><ROW><id>17183278</id><snippet>str = 'Hello There'
print ' '.join([str[:5]] * 2)
</snippet></ROW><ROW><id>17183348</id><snippet>s = '''GROUP = L1_METADATA_FILE
  GROUP = METADATA_FILE_INFO
    ORIGIN = "Image courtesy of the U.S. Geological Survey"
    REQUEST_ID = "0101305309253_00043"
    LANDSAT_SCENE_ID = "LE71460402010069SGS00"
    FILE_DATE = 2013-06-02T11:19:59Z
    STATION_ID = "SGS"
    PROCESSING_SOFTWARE_VERSION = "LPGS_12.2.1"
    DATA_CATEGORY = "NOMINAL"
  END_GROUP = METADATA_FILE_INFO
  GROUP = PRODUCT_METADATA
    DATA_TYPE = "L1T"
    ELEVATION_SOURCE = "GLS2000"
    OUTPUT_FORMAT = "GEOTIFF"
    EPHEMERIS_TYPE = "DEFINITIVE"
    SPACECRAFT_ID = "LANDSAT_7"
    SENSOR_ID = "ETM"
    SENSOR_MODE = "BUMPER"
    WRS_PATH = 146
    WRS_ROW = 040
    DATE_ACQUIRED = 2010-03-10'''


output = {} #Dict
for line in s.split("\n"): #Iterates through every line in the string
    l = line.split("=") #Seperate by "=" and put into a list
    output[l[0].strip()] = l[1].strip() #First word is key, second word is value

print output #Output is a dictonary containing all key-value pairs in your metadata seperated by "="

print output["SENSOR_ID"] #Outputs "ETM"
</snippet></ROW><ROW><id>17183348</id><snippet>f = open('metadata.txt', 'r') #open file for reading

def build_data(f): #build dictionary

    output = {} #Dict
    for line in f.readlines(): #Iterates through every line in the string
        if "=" in line: #make sure line has data as wanted
            l = line.split("=") #Seperate by "=" and put into a list
            output[l[0].strip()] = l[1].strip() #First word is key, second word is value

    return output #Returns a dictionary with the key, value pairs.

data = build_data(f)

print data["IMAGE_QUALITY"] #prints 9
</snippet></ROW><ROW><id>17183726</id><snippet>turboCar.__reset_odometer()</snippet></ROW><ROW><id>17183726</id><snippet>Car</snippet></ROW><ROW><id>17183726</id><snippet>turboCar = Car()</snippet></ROW><ROW><id>17183726</id><snippet>__reset_odometer</snippet></ROW><ROW><id>17183726</id><snippet>class Car(object):
    def __init__(self):
        self.__odometer = 88800
        self.__reset_odometer()  # &lt;-- call double underscore function

    def __reset_odometer(self):
        self.__odometer = 0

    def read_odometer(self):
        return self.__odometer
</snippet></ROW><ROW><id>17183726</id><snippet>turboCar</snippet></ROW><ROW><id>17183726</id><snippet>&gt;&gt;&gt; turboCar = Car()
&gt;&gt;&gt; turboCar.read_odometer()
0
</snippet></ROW><ROW><id>17183726</id><snippet>C++</snippet></ROW><ROW><id>17183726</id><snippet>&gt;&gt;&gt; turboCar._Car__odometer = 9999
&gt;&gt;&gt; turboCar.read_odometer()
9999
&gt;&gt;&gt; turboCar._Car__reset_odometer()
&gt;&gt;&gt; turboCar.read_odometer()
0
</snippet></ROW><ROW><id>17184081</id><snippet>&gt;&gt;&gt; def test(a):
...     print a
... x = []
... for i in range(2):
...     x.append(lambda: test(i))
... x
14: [&lt;function &lt;lambda&gt; at 0x027FBA30&gt;, &lt;function &lt;lambda&gt; at 0x027FBAF0&gt;]
&gt;&gt;&gt; x[0]()  # is supposed to print 0 not 1
1
&gt;&gt;&gt; x[1]()
1
</snippet></ROW><ROW><id>17184081</id><snippet>&gt;&gt;&gt; def test(a):
...     print a
... x = []
... for i in range(2):
...     x.append((lambda x: (lambda:test(x)))(i) )
... x
16: [&lt;function &lt;lambda&gt; at 0x027FBBF0&gt;, &lt;function &lt;lambda&gt; at 0x027FBBB0&gt;]
&gt;&gt;&gt; x[0]()
0
&gt;&gt;&gt; x[1]()
1
</snippet></ROW><ROW><id>17184081</id><snippet>lambda</snippet></ROW><ROW><id>17184081</id><snippet>lambda</snippet></ROW><ROW><id>17184081</id><snippet>i</snippet></ROW><ROW><id>17184081</id><snippet>i</snippet></ROW><ROW><id>17184081</id><snippet>i</snippet></ROW><ROW><id>17184081</id><snippet>for i in range(1, 11):
    ...connect((lambda x:(lambda: self.Desc(x)))(i))
    ...connect((lambda x:(lambda: self.DescRate(x)))(i))
</snippet></ROW><ROW><id>17184093</id><snippet>from bs4 import BeautifulSoup

var = '''&lt;li&gt; &lt;a href="/...html"&gt;Energy&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="/...html"&gt;Coal&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/...html"&gt;Oil &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/...html"&gt;Carbon&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/...html"&gt;Oxygen&lt;/a&gt;&lt;/li&gt;'''

soup = BeautifulSoup(var)

for a in soup.find_all('a'):
  print a.string
</snippet></ROW><ROW><id>17184281</id><snippet>column_formatters</snippet></ROW><ROW><id>17184281</id><snippet>Markup</snippet></ROW><ROW><id>17184281</id><snippet>macro</snippet></ROW><ROW><id>17184281</id><snippet>User</snippet></ROW><ROW><id>17184281</id><snippet>url_for('userview.edit_view', id=model.id)</snippet></ROW><ROW><id>17184552</id><snippet>call5</snippet></ROW><ROW><id>17184552</id><snippet>def call5(x, y, value=None, *args)</snippet></ROW><ROW><id>17184552</id><snippet>*args</snippet></ROW><ROW><id>17184552</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>17184552</id><snippet>value="Hello"</snippet></ROW><ROW><id>17184552</id><snippet>call5(1, 2, 3 value="Hello")</snippet></ROW><ROW><id>17184552</id><snippet>call5(1, 2, value="Hello", 3)</snippet></ROW><ROW><id>17184900</id><snippet>sorted</snippet></ROW><ROW><id>17184900</id><snippet>names</snippet></ROW><ROW><id>17184900</id><snippet>def traverse(rootdir):
    names = []
    dirs, files = [], []
    for filename in os.listdir(rootdir):
        filepath = os.path.join(rootdir, filename)
        if os.path.isdir(filepath):
            names.append([filename, traverse(filepath)])
        else:
            names.append(filename)
    return sorted(names, key=lambda x: (0, x[0]) if isinstance(x, list) else (1, x))
</snippet></ROW><ROW><id>17184900</id><snippet>os.walk</snippet></ROW><ROW><id>17184900</id><snippet>def traverse(rootdir):
    names = []
    dir_to_names = {rootdir: names}
    for cdirname, dirnames, filenames in os.walk(rootdir):
        subnames = dir_to_names[cdirname]
        for subdirname in sorted(dirnames):
            subnames2 = dir_to_names[os.path.join(cdirname, subdirname)] = []
            subnames.append([subdirname, subnames2])
        for filename in sorted(filenames):
            subnames.append(filename)
    return names
</snippet></ROW><ROW><id>17185088</id><snippet>onAfterCallError</snippet></ROW><ROW><id>17185088</id><snippet>autobahn.wamp.WampProtocol</snippet></ROW><ROW><id>17185160</id><snippet>suds.transport.http</snippet></ROW><ROW><id>17185160</id><snippet>Reply</snippet></ROW><ROW><id>17185160</id><snippet>from suds.transport import *
</snippet></ROW><ROW><id>17185160</id><snippet>import suds.transport.http
suds.transport.http.Reply = Reply2
</snippet></ROW><ROW><id>17185186</id><snippet>newlist = sorted(abc, key=lambda k: k['updatedAt'], reverse=True)
</snippet></ROW><ROW><id>17185454</id><snippet>python -c "import sys;print(sys.version)"
</snippet></ROW><ROW><id>17185454</id><snippet>python -c "import sys;print('Python '+sys.version.replace('\n','')+' on '+sys.platform)" 
</snippet></ROW><ROW><id>17185509</id><snippet>\b</snippet></ROW><ROW><id>17185509</id><snippet>&gt;&gt;&gt; print "C:\blubb.glade"
Clubb.glade
&gt;&gt;&gt; print "C:\\blubb.glade"
C:\blubb.glade
</snippet></ROW><ROW><id>17185807</id><snippet>import wx

class MyApp(wx.App):

  def OnInit(self):
    frame = InsertFrame(parent=None, id=-1)
    frame.Show()
    return True

class InsertFrame(wx.Frame):

  def __init__(self, parent, id):
    wx.Frame.__init__(self, parent, id, 'Test Frame', size = (300,100))
    panel = wx.Panel(self)
    pos_y = 0
    for i in range(50):
      pos_y += 20
      cb = wx.CheckBox(panel, label="sample checkbox", pos=(20, pos_y))

if __name__ == "__main__":
  app = MyApp()
  app.MainLoop()
</snippet></ROW><ROW><id>17186051</id><snippet>QueryManager</snippet></ROW><ROW><id>17186051</id><snippet>Log</snippet></ROW><ROW><id>17186051</id><snippet>create_objects</snippet></ROW><ROW><id>17186051</id><snippet>update_objects</snippet></ROW><ROW><id>17186051</id><snippet>delete_objects</snippet></ROW><ROW><id>17186051</id><snippet>create_log</snippet></ROW><ROW><id>17186051</id><snippet>from django.db.models import Manager

class LogManager(Manager):
    def __init__(self, type):
        super(LogManager, self).__init__()
        # add check of type if you need
        self._type = type

    def get_queryset(self):
        return super(LogManager, self).get_queryset().filter(type=self._type)
</snippet></ROW><ROW><id>17186051</id><snippet>from django.db.models import Model

class Log(Model):
    create_log = LogManager('create')
    update_log = LogManager('update')
    delete_log = LogManager('delete')
</snippet></ROW><ROW><id>17186051</id><snippet>__getattr__</snippet></ROW><ROW><id>17186842</id><snippet>dict = (keyword:{file:count})
</snippet></ROW><ROW><id>17186842</id><snippet>import os
# returns the next word in the file
def words_generator(fileobj):
    for line in fileobj:
        for word in line.split():
            yield word
word_count_dict = {}
for dirpath, dnames, fnames in os.walk("./"):
    for file in fnames:
        f = open(file,"r")
        words = words_generator(f)
        for word in words:
            if word not in word_count_dict:
                  word_count_dict[word] = {"total":0}
            if file not in word_count_dict[word]:
                  word_count_dict[word][file] = 0
            word_count_dict[word][file] += 1              
            word_count_dict[word]["total"] += 1
</snippet></ROW><ROW><id>17186842</id><snippet>word_count_dict["Britain"]["total"]
</snippet></ROW><ROW><id>17186842</id><snippet>sum([word_count_dict["Britain"][file] if file in word_count_dict else 0 for file in ["74.txt", "75.txt"]])
</snippet></ROW><ROW><id>17186842</id><snippet>[file for key in word_count_dict["Britain"]]
</snippet></ROW><ROW><id>17187650</id><snippet>from django.shortcuts import get_object_or_404

student = get_object_or_404(Student, pk=student_id, user__id=request.user.id)
</snippet></ROW><ROW><id>17187650</id><snippet>404</snippet></ROW><ROW><id>17187650</id><snippet>Timmy O'Mahony</snippet></ROW><ROW><id>17187650</id><snippet>request.user</snippet></ROW><ROW><id>17187650</id><snippet>def my_student_view(request):
    user = request.user
    student = Student.objects.get(user__id=user.id)
</snippet></ROW><ROW><id>17188154</id><snippet>$env:Path = $env:Path + ";C:\Program Files\Python\"
</snippet></ROW><ROW><id>17188660</id><snippet>import re

psi_values = re.compile(r'PSI.*?(\d+)-(\d+)')

psi_low, psi_high = psi_values.search(var_psi).groups()
</snippet></ROW><ROW><id>17188660</id><snippet>map(int, ...)</snippet></ROW><ROW><id>17188660</id><snippet>int()</snippet></ROW><ROW><id>17188660</id><snippet>psi_low, psi_high = map(int, psi_values.search(var_psi).groups())
</snippet></ROW><ROW><id>17188660</id><snippet>&gt;&gt;&gt; psi_low, psi_high
(101, 121)
</snippet></ROW><ROW><id>17189068</id><snippet>word_count_dict["Britain"]</snippet></ROW><ROW><id>17189068</id><snippet>for filename in word_count_dict["Britain"]:
    if filename == 'total': continue
    print("Britain appears in {} {} times".format(filename, word_count_dict["Britain"][filename]))
</snippet></ROW><ROW><id>17189068</id><snippet>word_count_dict["Britain"].keys()
</snippet></ROW><ROW><id>17189068</id><snippet>total</snippet></ROW><ROW><id>17189068</id><snippet>if file not in word_count_dict[word]:
    word_count_dict[word][file] = 0
    word_count_dict[word][file] += 1              
    word_count_dict[word]["total"] += 1        
</snippet></ROW><ROW><id>17189068</id><snippet>+= 1</snippet></ROW><ROW><id>17189068</id><snippet>file</snippet></ROW><ROW><id>17189068</id><snippet>if file not in word_count_dict[word]:
    word_count_dict[word][file] = 0
word_count_dict[word][file] += 1              
word_count_dict[word]["total"] += 1        
</snippet></ROW><ROW><id>17189068</id><snippet>word_count_dict</snippet></ROW><ROW><id>17189068</id><snippet>for word, counts in word_count_dict.iteritems():
    print('Total counts for word {}: '.format(word, counts['total']))
    for filename, count in counts.iteritems():
        if filename == 'total': continue
        print("{} appears in {} {} times".format(word, filename, count))
</snippet></ROW><ROW><id>17189169</id><snippet>cd</snippet></ROW><ROW><id>17189169</id><snippet>python setup.py install</snippet></ROW><ROW><id>17189169</id><snippet>pip install Django
</snippet></ROW><ROW><id>17189191</id><snippet>request</snippet></ROW><ROW><id>17189191</id><snippet>object</snippet></ROW><ROW><id>17189191</id><snippet>get_balance</snippet></ROW><ROW><id>17189191</id><snippet>request</snippet></ROW><ROW><id>17189191</id><snippet>__init__</snippet></ROW><ROW><id>17189544</id><snippet>connect_to_region</snippet></ROW><ROW><id>17189544</id><snippet>import boto.ec2.autoscale
region = 'ap-southeast-2'
conn = boto.ec2.autoscale.connect_to_region(region, aws_access_key_id, aws_secret_access_key)
mygroups = conn.get_all_groups()
...
</snippet></ROW><ROW><id>17189750</id><snippet>np.linalg.norm(x-y)</snippet></ROW><ROW><id>17189758</id><snippet>np.asmatrix()</snippet></ROW><ROW><id>17189758</id><snippet> trans = np.asmatrix(data.T)
 np.all( data == trans.T )
</snippet></ROW><ROW><id>17189758</id><snippet>True</snippet></ROW><ROW><id>17189758</id><snippet>matplotlib.axes.Axes.scatter</snippet></ROW><ROW><id>17189758</id><snippet>ravel()</snippet></ROW><ROW><id>17189758</id><snippet>numpy.ma</snippet></ROW><ROW><id>17189758</id><snippet>data==trans.T</snippet></ROW><ROW><id>17189758</id><snippet>np.ma.ravel(trans[0,:])</snippet></ROW><ROW><id>17189758</id><snippet>np.ravel()</snippet></ROW><ROW><id>17189758</id><snippet>fig, axs = mp.subplots(nrows=1, ncols=2, sharey=True )

axs[0].scatter(data[:, 0], data[:, 1])

trans = np.asmatrix(data.T)

axs[1].scatter( np.ravel(trans[0,:]), np.ravel(trans[1,:]) )

fig.tight_layout()
</snippet></ROW><ROW><id>17190192</id><snippet>subprocess.call</snippet></ROW><ROW><id>17190192</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17190192</id><snippet>Popen.wait</snippet></ROW><ROW><id>17190192</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>17190192</id><snippet>;</snippet></ROW><ROW><id>17190372</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>17190372</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>17190372</id><snippet>NaT</snippet></ROW><ROW><id>17190372</id><snippet>In [6]: df['Expiry'] = pd.to_datetime(df['Expiry'])

# alternative way of reading in the data (in 0.11.1, as ``NaT`` will be set
# for missing values in a datelike column)
In [4]: df = pd.read_csv('example',parse_dates=['Date','Expiry'])

In [9]: df.dtypes
Out[9]: 
Date        datetime64[ns]
Stock               object
Position             int64
Expiry      datetime64[ns]
same                object
dtype: object

In [7]: df.groupby(['Stock', 'Expiry', 'same'] ,as_index=False)['Position'].sum()
Out[7]: 
  Stock              Expiry same  Position
0     A 2013-06-01 00:00:00   AA       300
1     B                 NaT   BB       300
2     C 2013-06-01 00:00:00   CC       900

In [8]: df.groupby(['Stock', 'Expiry', 'same'] ,as_index=False)['Position'].sum().dtypes
Out[8]: 
Stock               object
Expiry      datetime64[ns]
same                object
Position             int64
dtype: object
</snippet></ROW><ROW><id>17190403</id><snippet>all_names['all']</snippet></ROW><ROW><id>17190403</id><snippet>input = input.lower()
result = [item for item in all_names['all'] if item.lower() == input]
</snippet></ROW><ROW><id>17190403</id><snippet>input.lower() in map(lambda x: x.lower(), all_names['all'])
</snippet></ROW><ROW><id>17190482</id><snippet>hachoir-metadata</snippet></ROW><ROW><id>17190482</id><snippet>#!/usr/bin/env python
import sys

# $ pip install hachoir-{core,parser,metadata}
from hachoir_core.cmd_line import unicodeFilename
from hachoir_core.i18n import getTerminalCharset
from hachoir_metadata import extractMetadata
from hachoir_parser import createParser


filename = sys.argv[1]
charset = getTerminalCharset()
filename, real_filename = unicodeFilename(filename, charset), filename
parser = createParser(filename, real_filename=real_filename)
metadata = extractMetadata(parser)
print("Duration (hh:mm:ss.f): %s" % metadata.get('duration'))
</snippet></ROW><ROW><id>17190482</id><snippet>$ get-avi-duration.py test.avi
Duration (hh:mm:ss.f): 0:47:03.360000
</snippet></ROW><ROW><id>17190482</id><snippet>$ ffmpeg -i test.avi |&amp; grep -i duration
  Duration: 00:47:03.36, start: 0.000000, bitrate: 1038 kb/s
</snippet></ROW><ROW><id>17190482</id><snippet>#!/usr/bin/env python
import os
import sys
from hachoir_metadata import extractMetadata
from hachoir_parser import createParser

def getinfo(rootdir, extensions=(".avi", ".mp4")):
    if not isinstance(rootdir, unicode):
       rootdir = rootdir.decode(sys.getfilesystemencoding())
    for dirpath, dirs, files in os.walk(rootdir):
        dirs.sort() # traverse directories in sorted order
        files.sort()
        for filename in files:
            if filename.endswith(extensions):
               path = os.path.join(dirpath, filename)
               yield path, extractMetadata(createParser(path))

for path, metadata in getinfo(u"z:\\"):
    if metadata.has('duration'):
        print(path)
        print("  Duration (hh:mm:ss.f): %s" % metadata.get('duration'))
</snippet></ROW><ROW><id>17190525</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; print h.unescape('£682m')
£682m
EDIT for Python 3: the HTMLParser module has been renamed to html.parser.

&gt;&gt;&gt; import html.parser
&gt;&gt;&gt; h = html.parser.HTMLParser()
&gt;&gt;&gt; print(h.unescape('£682m'))
£682m
</snippet></ROW><ROW><id>17190569</id><snippet>nltk.word.tokenize</snippet></ROW><ROW><id>17190569</id><snippet>nltk.word_tokenize</snippet></ROW><ROW><id>17190569</id><snippet>In [1]: from nltk import word_tokenize

In [2]: word_tokenize('i like cats and dogs')
Out[2]: ['i', 'like', 'cats', 'and', 'dogs']
</snippet></ROW><ROW><id>17190569</id><snippet>In [3]: import nltk

In [4]: nltk.word.tokenize('i like cats and dogs')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
/&lt;ipython-input-4-a0785dff62d6&gt; in &lt;module&gt;()
----&gt; 1 nltk.word.tokenize('i like cats and dogs')

AttributeError: 'module' object has no attribute 'word'
</snippet></ROW><ROW><id>17190749</id><snippet>print('[{0}]'.format(','.join(map(str, l))))
</snippet></ROW><ROW><id>17190793</id><snippet>import time
import Queue
import sys
import threading
import subprocess
PIPE = subprocess.PIPE


def read_output(pipe, funcs):
    for line in iter(pipe.readline, ''):
        for func in funcs:
            func(line)
            # time.sleep(1)
    pipe.close()

def write_output(get):
    for line in iter(get, None):
        sys.stdout.write(line)

process = subprocess.Popen(
    ['random_print.py'], stdout=PIPE, stderr=PIPE, close_fds=True, bufsize=1)
q = Queue.Queue()
out, err = [], []
tout = threading.Thread(
    target=read_output, args=(process.stdout, [q.put, out.append]))
terr = threading.Thread(
    target=read_output, args=(process.stderr, [q.put, err.append]))
twrite = threading.Thread(target=write_output, args=(q.get,))
for t in (tout, terr, twrite):
    t.daemon = True
    t.start()
process.wait()
for t in (tout, terr):
    t.join()
q.put(None)
print(out)
print(err)
</snippet></ROW><ROW><id>17190793</id><snippet>random_print.py</snippet></ROW><ROW><id>17190793</id><snippet>import sys
import time
import random

for i in range(50):
    f = random.choice([sys.stdout,sys.stderr])
    f.write(str(i)+'\n')
    f.flush()
    time.sleep(0.1)
</snippet></ROW><ROW><id>17190793</id><snippet>select.select</snippet></ROW><ROW><id>17190793</id><snippet>import collections
import select
import fcntl
import os
import time
import Queue
import sys
import threading
import subprocess
PIPE = subprocess.PIPE

def make_async(fd):
    # http://stackoverflow.com/a/7730201/190597
    '''add the O_NONBLOCK flag to a file descriptor'''
    fcntl.fcntl(
        fd, fcntl.F_SETFL, fcntl.fcntl(fd, fcntl.F_GETFL) | os.O_NONBLOCK)

def read_async(fd):
    # http://stackoverflow.com/a/7730201/190597
    '''read some data from a file descriptor, ignoring EAGAIN errors'''
    # time.sleep(1)
    try:
        return fd.read()
    except IOError, e:
        if e.errno != errno.EAGAIN:
            raise e
        else:
            return ''

def write_output(fds, outmap):
    for fd in fds:
        line = read_async(fd)
        sys.stdout.write(line)
        outmap[fd.fileno()].append(line)

process = subprocess.Popen(
    ['random_print.py'], stdout=PIPE, stderr=PIPE, close_fds=True)

make_async(process.stdout)
make_async(process.stderr)
outmap = collections.defaultdict(list)
while True:
    rlist, wlist, xlist = select.select([process.stdout, process.stderr], [], [])
    write_output(rlist, outmap)
    if process.poll() is not None:
        write_output([process.stdout, process.stderr], outmap)
        break

fileno = {'stdout': process.stdout.fileno(),
          'stderr': process.stderr.fileno()}

print(outmap[fileno['stdout']])
print(outmap[fileno['stderr']])
</snippet></ROW><ROW><id>17191017</id><snippet>&gt;&gt;&gt; def foo():
&gt;&gt;&gt;     try:
&gt;&gt;&gt;         print "2 try block"
&gt;&gt;&gt;         raise Exception("1")
&gt;&gt;&gt;         print "never printed"
&gt;&gt;&gt;     except:
&gt;&gt;&gt;         print "3 first except block"
&gt;&gt;&gt;         raise Exception("2")
&gt;&gt;&gt;     finally:
&gt;&gt;&gt;         print "4 finally block"
&gt;&gt;&gt;     print "end of function"
&gt;&gt;&gt;
&gt;&gt;&gt; try:
&gt;&gt;&gt;     print "1 before foo"
&gt;&gt;&gt;     foo()
&gt;&gt;&gt;     print "never printed too"
&gt;&gt;&gt; except:
&gt;&gt;&gt;     print "5 outter except clause"
1 before foo
2 try block
3 first except block
4 finally block
5 outter except clause
</snippet></ROW><ROW><id>17191017</id><snippet>try</snippet></ROW><ROW><id>17191017</id><snippet>except</snippet></ROW><ROW><id>17191017</id><snippet>finally</snippet></ROW><ROW><id>17191017</id><snippet>try</snippet></ROW><ROW><id>17191017</id><snippet>except</snippet></ROW><ROW><id>17191017</id><snippet>try</snippet></ROW><ROW><id>17191017</id><snippet>try</snippet></ROW><ROW><id>17191055</id><snippet>&gt;&gt;&gt; '\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\x96E\x94'.decode('latin1')
u'\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\x96E\x94'
&gt;&gt;&gt; print '\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\x96E\x94'.decode('latin1')
ù3×þØc( 7JûìÎËþfE
</snippet></ROW><ROW><id>17191055</id><snippet>\uxxxx</snippet></ROW><ROW><id>17191055</id><snippet>&gt;&gt;&gt; u'\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\u2013E\u201d'
u'\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\u2013E\u201d'
&gt;&gt;&gt; print u'\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\u2013E\u201d'
ù3×þØc( 7JûìÎËþf–E”
</snippet></ROW><ROW><id>17191055</id><snippet>&gt;&gt;&gt; latin1 = '\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\x96E\x94'.decode('latin1')
&gt;&gt;&gt; unicode_literal = u'\xf93\xd7\xfe\xd8c(\t\x9d7J\xfb\xec\xce\xcb\xfef\u2013E\u201d'
&gt;&gt;&gt; latin1[:-3] == unicode_literal[:-3]
True
&gt;&gt;&gt; latin1[-2] == unicode_literal[-2]
True
&gt;&gt;&gt; latin1[-1] == unicode_literal[-1]
False
&gt;&gt;&gt; latin1[-3] == unicode_literal[-3]
False
</snippet></ROW><ROW><id>17191055</id><snippet>\x96</snippet></ROW><ROW><id>17191055</id><snippet>\x94</snippet></ROW><ROW><id>17191055</id><snippet>\u2013</snippet></ROW><ROW><id>17191055</id><snippet>\u201d</snippet></ROW><ROW><id>17191055</id><snippet>charset</snippet></ROW><ROW><id>17191318</id><snippet>next</snippet></ROW><ROW><id>17191318</id><snippet>&lt;form class="form-signin" action="{% url django.contrib.auth.views.login %}?next=employer/home/" method="post"&gt;
</snippet></ROW><ROW><id>17191318</id><snippet>LOGIN_REDIRECT_URL</snippet></ROW><ROW><id>17191318</id><snippet>contrib.auth.login</snippet></ROW><ROW><id>17191386</id><snippet>foo.translate(None," \"':; ")
</snippet></ROW><ROW><id>17191438</id><snippet>open</snippet></ROW><ROW><id>17191438</id><snippet>set</snippet></ROW><ROW><id>17191438</id><snippet>O(1)</snippet></ROW><ROW><id>17191438</id><snippet>in</snippet></ROW><ROW><id>17191438</id><snippet>linecnt</snippet></ROW><ROW><id>17191438</id><snippet>len</snippet></ROW><ROW><id>17191438</id><snippet>def compfiles(file1, file2):
    lines1 = [l.strip() for l in open(file1).read().split("\n")]
    lines2 = set([l.strip() for l in open(file2).read().split("\n")])
    for line in lines1:
        if not line in lines2:
            print("Miss: file %s contains '%s', but file %s does not!" % (file1, line, file2))
    print("%i lines compared between %s and %s." % (len(lines1), file1, file2))
</snippet></ROW><ROW><id>17191594</id><snippet>@decorator1</snippet></ROW><ROW><id>17191594</id><snippet>@decorator2</snippet></ROW><ROW><id>17191594</id><snippet>decorator2</snippet></ROW><ROW><id>17191594</id><snippet>decorator1</snippet></ROW><ROW><id>17191594</id><snippet>@decorator2
@decorator1
def my_method(self, request, *args, **kwargs):
    return u'The result that must be returned if all the checks performed by the decorator succeed'
</snippet></ROW><ROW><id>17191594</id><snippet>decorator2</snippet></ROW><ROW><id>17191594</id><snippet>decorator1</snippet></ROW><ROW><id>17191594</id><snippet>def decorator2(method_to_decorate):
    @wraps(method_to_decorate)
    def wrapper2(self, request, *args, **kwargs):

        result = method_to_decorate(self, request, *args, **kwargs)

        if isinstance(result, tuple) and result and result[0] == 'failure':
            # decorator1 returned a failure
            return result
        else:
            # decorator1 passed through the wrapped method call
            if decorator2_s_test_was_successful:
                return result
            else:
                return ('another failure', 'message')

    return wrapper2
</snippet></ROW><ROW><id>17191776</id><snippet>strip()</snippet></ROW><ROW><id>17191776</id><snippet>nota</snippet></ROW><ROW><id>17192094</id><snippet>import yaml,sys

class StateMachine(object):
    pass

class State(object):
    pass

class Connection(object):
    pass

if __name__ == '__main__':
    o = yaml.load("""
    !!python/object:myyaml.StateMachine {
         states: [
           !!python/object:myyaml.State { name: p1 },
           !!python/object:myyaml.State { name: p2 },
           !!python/object:myyaml.State { name: p3 },],
         connections:
          [       !!python/object:myyaml.Connection { 'pim' : [p1,p2]}]}
    """)
    print o.states[0].name
    print o.states[1].name
    print o.connections[0].pim
    sys.exit(0)
</snippet></ROW><ROW><id>17192094</id><snippet>p1
p2
['p1', 'p2']
</snippet></ROW><ROW><id>17192094</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>17192094</id><snippet>!!python/object:myyaml.State { name: p1 },
</snippet></ROW><ROW><id>17192111</id><snippet>book_key</snippet></ROW><ROW><id>17192181</id><snippet>xrange()</snippet></ROW><ROW><id>17192181</id><snippet>range()</snippet></ROW><ROW><id>17192181</id><snippet>xrange()</snippet></ROW><ROW><id>17192181</id><snippet>range()</snippet></ROW><ROW><id>17192263</id><snippet>x</snippet></ROW><ROW><id>17192263</id><snippet>x</snippet></ROW><ROW><id>17192263</id><snippet>'prop4'</snippet></ROW><ROW><id>17192263</id><snippet>lambda x=x: getattr(obj,x)
</snippet></ROW><ROW><id>17192320</id><snippet>with open(outfile, 'w') as f_out:
    dict_writer = None
    for f in files:
        with open(f, 'r') as f_in:
            dict_reader = csv.DictReader(f_in)
            if not dict_writer:
                dict_writer = csv.DictWriter(f_out, lineterminator='\n', fieldnames=dict_reader.fieldnames)
                dict_writer.writeheader()
            for row in dict_reader:
                if row['Campaign'] in campaign_names:
                    dict_writer.writerow(row)
</snippet></ROW><ROW><id>17192858</id><snippet>hash(&lt;some type&gt;) = id(&lt;type&gt;) / 16
</snippet></ROW><ROW><id>17192858</id><snippet>id()</snippet></ROW><ROW><id>17192858</id><snippet>&gt;&gt;&gt; id(int) / hash(int)                                                     
16                                                                              
&gt;&gt;&gt; id(int) % hash(int)                                                 
0                                                                               
</snippet></ROW><ROW><id>17192858</id><snippet>&gt;&gt;&gt; for i in range(-1000,1000):
...     if hash(i) != i: print(i)
...
-1
</snippet></ROW><ROW><id>17192932</id><snippet>&gt;&gt;&gt; l = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [0, 2, 0], [1, 0, 1], [1, 1, 0], [2, 0, 0], [0, 0, 3], [0, 1, 2], [0, 2, 1], [0, 3, 0], [1, 0, 2], [1, 1, 1], [1, 2, 0], [2, 0, 1], [2, 1, 0], [3, 0, 0], [0, 0, 4], [0, 1, 3], [0, 2, 2], [0, 3, 1], [0, 4, 0], [1, 0, 3], [1, 1, 2], [1, 2, 1], [1, 3, 0], [2, 0, 2], [2, 1, 1], [2, 2, 0], [3, 0, 1], [3, 1, 0], [4, 0, 0]]
&gt;&gt;&gt; l.sort(key=lambda x: (-x.count(0), x[::-1]))
&gt;&gt;&gt; l
[[1, 0, 0], [2, 0, 0], [3, 0, 0], [4, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [1, 1, 0], [2, 1, 0], [3, 1, 0], [1, 2, 0], [2, 2, 0], [1, 3, 0], [1, 0, 1], [2, 0, 1], [3, 0, 1], [0, 1, 1], [0, 2, 1], [0, 3, 1], [1, 0, 2], [2, 0, 2], [0, 1, 2], [0, 2, 2], [1, 0, 3], [0, 1, 3], [1, 1, 1], [2, 1, 1], [1, 2, 1], [1, 1, 2]]
</snippet></ROW><ROW><id>17193321</id><snippet>&gt;&gt;&gt; fragment = '&lt;div&gt;&lt;span&gt;adrress&lt;/span&gt;text of address&lt;/div&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(fragment)
&gt;&gt;&gt; soup.div.span.nextSibling
u'text of address'
</snippet></ROW><ROW><id>17193447</id><snippet># -*- coding: latin-1 -*-

#example for : 0°25'30"S, 91°7'W

def conversion(old):
    direction = {'N':-1, 'S':1, 'E': -1, 'W':1}
    new = old.replace(u'°',' ').replace('\'',' ').replace('"',' ')
    new = new.split()
    new_dir = new.pop()
    new.extend([0,0,0])
    return (int(new[0])+int(new[1])/60.0+int(new[2])/3600.0) * direction[new_dir]

lat, lon = u'''0°25'30"S, 91°7'W'''.split(', ')
print conversion(lat), conversion(lon)
#Output:
0.425 91.1166666667
</snippet></ROW><ROW><id>17193447</id><snippet>def deg_to_dms(deg):
    d = int(deg)
    md = abs(deg - d) * 60
    m = int(md)
    sd = (md - m) * 60
    return [d, m, sd]

#output
&gt;&gt;&gt; deg_to_dms(91.1166666667)
[91, 7, 1.199953203467885e-07]
&gt;&gt;&gt; deg_to_dms(0.425)
[0, 25, 30.0]
</snippet></ROW><ROW><id>17193455</id><snippet>os.path.join</snippet></ROW><ROW><id>17193455</id><snippet>for file in log_files:
if file == "1.log":
    linenum = 5
else:
    linenum = 4
with open(file, 'r') as f:
    for i, line in enumerate(f):
        if i == linenum:
            try:
                e = float(line.strip().split()[10])
                xyz = file[:-4]
                with open(os.path.join(xyz,'fort.12')) as g:
                    for i, line in enumerate(g):
                        if i == 34:
                            d = float(line.strip().split()[3])
                data.append( (xyz, e, d ))
</snippet></ROW><ROW><id>17193587</id><snippet>__</snippet></ROW><ROW><id>17193587</id><snippet>__spam</snippet></ROW><ROW><id>17193587</id><snippet>_classname__spam</snippet></ROW><ROW><id>17193587</id><snippet>class A:
    def __private(self):
       pass
</snippet></ROW><ROW><id>17193587</id><snippet>__private</snippet></ROW><ROW><id>17193587</id><snippet>_A__private</snippet></ROW><ROW><id>17193587</id><snippet>&gt;&gt;&gt; class A:
...     @staticmethod         #not required in py3.x
...     def __private():
...         print 'hello'
...         
&gt;&gt;&gt; A._A__private()
hello
</snippet></ROW><ROW><id>17193615</id><snippet>globals()</snippet></ROW><ROW><id>17193615</id><snippet>vars()</snippet></ROW><ROW><id>17193615</id><snippet>&gt;&gt;&gt; def test():
...     for i in xrange(11):
...          v = 'strain' + '%d' % i
...          globals()[v] = []
... 
&gt;&gt;&gt; test()
&gt;&gt;&gt; strain5
[]
</snippet></ROW><ROW><id>17193615</id><snippet>strains = [[] for _ in xrange(11)]
</snippet></ROW><ROW><id>17193615</id><snippet>strains[0]</snippet></ROW><ROW><id>17193615</id><snippet>strains[1]</snippet></ROW><ROW><id>17193878</id><snippet>ancestor</snippet></ROW><ROW><id>17193921</id><snippet>t.statuses.retweets(....)
</snippet></ROW><ROW><id>17193945</id><snippet>import numpy as np; from mayavi import mlab
data = np.random.random((100,100))
mlab.surf(data)
mlab.show()
</snippet></ROW><ROW><id>17194088</id><snippet>&lt;message id=""&gt;
  &lt;gcm xmlns="google:mobile:data"&gt;
  {
      "to":"REGISTRATION_ID",  // "to" replaces "registration_ids"
      "message_id":"m-1366082849205" // new required field
      "data":
      {
          "hello":"world",
      }
      "time_to_live":"600",
      "delay_while_idle": true/false
  }
  &lt;/gcm&gt;
&lt;/message&gt;
</snippet></ROW><ROW><id>17194088</id><snippet>python</snippet></ROW><ROW><id>17194088</id><snippet>javascript</snippet></ROW><ROW><id>17194116</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = 'The output is\n1) python\nA dynamic language\neasy to learn\n2) C++\ndifficult to learn\n3244) PHP\neay to learn\n'
&gt;&gt;&gt; re.findall(r'\d+\)\s[^\d]+',strs)
['1) python\nA dynamic language\neasy to learn\n',
'2) C++\ndifficult to learn\n',
'3244) PHP\neay to learn\n']
</snippet></ROW><ROW><id>17194149</id><snippet>In [1]: df = pd.DataFrame([[1,2], [3,4]], columns=['a', 'b'])

In [2]: df
Out[2]:
   a  b
0  1  2
1  3  4
</snippet></ROW><ROW><id>17194149</id><snippet>In [3]: df['b']
Out[3]:
0    2
1    4
Name: b, dtype: int64
</snippet></ROW><ROW><id>17194149</id><snippet>In [4]: df[[1]]
Out[4]:
   b
0  2
1  4
</snippet></ROW><ROW><id>17194149</id><snippet>In [5]: df.iloc[:, [1]]
Out[5]:
   b
0  2
1  4

In [6]: df.loc[:, ['b']]
Out[6]:
   b
0  2
1  4

In [7]: df.loc[:, 'b']
Out[7]:
0    2
1    4
Name: b, dtype: int64
</snippet></ROW><ROW><id>17194180</id><snippet>timeToRun = Job.objects.filter(id=jobIDs[i]).values()[0]['whenToRun'].split(' ')[0]
</snippet></ROW><ROW><id>17194180</id><snippet>values()</snippet></ROW><ROW><id>17194180</id><snippet>ValueQuerySet</snippet></ROW><ROW><id>17194180</id><snippet>Job.objects.filter(id=jobIDs[i])</snippet></ROW><ROW><id>17194180</id><snippet>if Job.objects.filter(id=jobIDs[i]).exists(): #a quick lookup
    timeToRun = Job.objects.filter(id=jobIDs[i]).values()[0]['whenToRun'].split(' ')[0]
</snippet></ROW><ROW><id>17194180</id><snippet>if Job.objects.filter(id=jobIDs[i]).exists(): #a quick lookup
    timeToRun = list(Job.objects.filter(id=jobIDs[i]).values_list('whenToRun', flat=True))[0].split(' ')[0]
</snippet></ROW><ROW><id>17194229</id><snippet>x = ['1.34511','0.0234','-0.0890'] 
y = ['0.0987', '0.8763', '-0.0762']

x = np.array(x, dtype=np.float32)
y = np.array(y, dtype=np.float32)

plt.plot(x,y)
</snippet></ROW><ROW><id>17194229</id><snippet>x = ['1.34511','0.0234','-0.0890'] 
y = ['0.0987', '0.8763', '-0.0762']

x = [float(val) for val in x]
y = [float(val) for val in y]

plt.plot(x,y)
</snippet></ROW><ROW><id>17194241</id><snippet>import re
foo, bar, _irrelevant = re.split(r"\s{2,}",  line)
</snippet></ROW><ROW><id>17194241</id><snippet>.php</snippet></ROW><ROW><id>17194241</id><snippet>.htm[l]</snippet></ROW><ROW><id>17194241</id><snippet>foo, rest = re.split(r"\s{2,}",  line, 1)
bar = re.search(r"[^\\]*\.(?:php|html?)\b", rest).group(0)
</snippet></ROW><ROW><id>17194241</id><snippet>.php</snippet></ROW><ROW><id>17194241</id><snippet>.htm</snippet></ROW><ROW><id>17194241</id><snippet>.html</snippet></ROW><ROW><id>17194617</id><snippet>from pytz import timezone
from datetime import datetime


eastern = timezone('US/Eastern')
utc = timezone('UTC')

created_at = datetime.strptime(tweet[0]['created_at'], '%a %b %d %H:%M:%S +0000 %Y')
utc_created_at = utc.localize(created_at)
print utc_created_at
est_created_at = utc_created_at.astimezone(eastern)
print est_created_at
</snippet></ROW><ROW><id>17194617</id><snippet>2013-06-18 22:23:22+00:00
2013-06-18 18:23:22-04:00
</snippet></ROW><ROW><id>17194684</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>17194684</id><snippet>theDate = myDatetime.strftime('%Y-%m-%d')
theTime = myDatetime.strftime('%H:%M:%S')
</snippet></ROW><ROW><id>17194684</id><snippet>date</snippet></ROW><ROW><id>17194684</id><snippet>time</snippet></ROW><ROW><id>17194684</id><snippet>theDate = str(myDatetime.date())
theTime = str(myDatetime.time())
</snippet></ROW><ROW><id>17194684</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; myDatetime = datetime.datetime.now()
&gt;&gt;&gt; myDatetime.strftime('%Y-%m-%d')
'2013-06-19'
&gt;&gt;&gt; myDatetime.strftime('%H:%M:%S')
'16:49:44'
&gt;&gt;&gt; str(myDatetime.date())
'2013-06-19'
&gt;&gt;&gt; str(myDatetime.time())
'16:49:44.447010'
</snippet></ROW><ROW><id>17194684</id><snippet>datetime.time</snippet></ROW><ROW><id>17194717</id><snippet>In [11]: df.sort('Count', ascending=False).head(3)
Out[11]:
                IP                                              Agent  Count
6   124.43.104.198  Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20...    467
5   124.43.155.138  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) G...    461
4  112.135.196.223  Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.3...    454
</snippet></ROW><ROW><id>17194717</id><snippet>In [12]: g = df.groupby('IP')

In [13]: repeated = g.count().Count != 1

In [14]: repeated
Out[14]:
IP
112.135.196.223    False
124.43.104.198     False
124.43.155.138     False
124.43.84.242      False
173.199.120.155    False
203.81.107.103     False
74.86.158.106      False
Name: Count, dtype: bool

In [15]: repeated[repeated]
Out[15]: Series([], dtype: bool)
</snippet></ROW><ROW><id>17194717</id><snippet>heapq</snippet></ROW><ROW><id>17194717</id><snippet>In [21]: from heapq import nlargest

In [22]: top_3 = nlargest(3, df.iterrows(), key=lambda x: x[1]['Count'])

In [23]: pd.DataFrame.from_items(top_3).T
Out[23]:
                IP                                              Agent Count
6   124.43.104.198  Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20...   467
5   124.43.155.138  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) G...   461
4  112.135.196.223  Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.3...   454
</snippet></ROW><ROW><id>17194813</id><snippet>''</snippet></ROW><ROW><id>17194813</id><snippet>isfloat()</snippet></ROW><ROW><id>17194813</id><snippet>def isfloat(x):
    try:
        float(x)
        return True
    except:
        return False
isfloat = np.vectorize(isfloat)
</snippet></ROW><ROW><id>17194813</id><snippet>data[ data[:,col] == 'C', col ] = '0'

x = (data[ isfloat(data[:,col]), col ].astype(np.float) == i)
</snippet></ROW><ROW><id>17194846</id><snippet> &gt;&gt;&gt; import csv
 &gt;&gt;&gt; with open('eggs.csv', 'rb') as csvfile:
 ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
 ...     for row in spamreader:
 ...         print ', '.join(row)
 Spam, Spam, Spam, Spam, Spam, Baked Beans
 Spam, Lovely Spam, Wonderful Spam
</snippet></ROW><ROW><id>17194846</id><snippet>import csv
with open('eggs.csv', 'a') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=',',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
</snippet></ROW><ROW><id>17194859</id><snippet>or</snippet></ROW><ROW><id>17194859</id><snippet>%5</snippet></ROW><ROW><id>17194859</id><snippet>if number % 3 == 0 or number % 5 == 0:</snippet></ROW><ROW><id>17194901</id><snippet>0</snippet></ROW><ROW><id>17194901</id><snippet>sparse.hstack</snippet></ROW><ROW><id>17194901</id><snippet>hstack</snippet></ROW><ROW><id>17194901</id><snippet>append</snippet></ROW><ROW><id>17194901</id><snippet>hstack</snippet></ROW><ROW><id>17194964</id><snippet>re.findall("\d*\.\d+", ".31 [0.25-0.37] m2 incr")
</snippet></ROW><ROW><id>17194964</id><snippet>*</snippet></ROW><ROW><id>17194964</id><snippet>+</snippet></ROW><ROW><id>17195242</id><snippet>excel.Visible = True
wb = excel.Workbooks.Open((excelreport+"\Poop.xlsx"))
</snippet></ROW><ROW><id>17195242</id><snippet>cur.execute("Select * from FIRALL")
freshdata=list(cur.fetchall())
#writes to the first sheet
freshws.Range(freshws.Cells(2,1),freshws.Cells((len(freshdata)+1),len(freshdata[0]))).Value = freshdata
</snippet></ROW><ROW><id>17195298</id><snippet>for elements in fileListing:
    #add this just to ensure file location
    print os.path.abspath(elements)
    for line in open(elements, 'r'):  #this does a line by line read of the file
        print line  
</snippet></ROW><ROW><id>17195359</id><snippet>for raw_index in range(1, sheet.nrows):
    ...
</snippet></ROW><ROW><id>17195359</id><snippet>sheet.cell(row_head,col_index).value == mydate</snippet></ROW><ROW><id>17195359</id><snippet>row_head</snippet></ROW><ROW><id>17195359</id><snippet>==mydate</snippet></ROW><ROW><id>17195521</id><snippet>re.findall("/\*##debug_string:(.*?)/##\*/", your_string)
</snippet></ROW><ROW><id>17195521</id><snippet>*</snippet></ROW><ROW><id>17195521</id><snippet>*</snippet></ROW><ROW><id>17195521</id><snippet>*</snippet></ROW><ROW><id>17195521</id><snippet>\*</snippet></ROW><ROW><id>17195521</id><snippet>import re
print re.findall("/\*##debug_string:(.*?)/##\*/", "/*##debug_string:value/##*/")
print re.findall("/\*##debug_string:(.*?)/##\*/", "/*##debug_string:1234/##*/")
print re.findall("/\*##debug_string:(.*?)/##\*/", "/*##debug_string:http://stackoverflow.com//##*/")
</snippet></ROW><ROW><id>17195521</id><snippet>['value']
['1234']
['http://stackoverflow.com/']
</snippet></ROW><ROW><id>17195546</id><snippet>safe</snippet></ROW><ROW><id>17195686</id><snippet>try</snippet></ROW><ROW><id>17195686</id><snippet>getConnection()</snippet></ROW><ROW><id>17195686</id><snippet>cursor</snippet></ROW><ROW><id>17195686</id><snippet>finally</snippet></ROW><ROW><id>17195782</id><snippet>zip</snippet></ROW><ROW><id>17195782</id><snippet>zip</snippet></ROW><ROW><id>17195782</id><snippet>&gt;&gt;&gt; from math import isnan
&gt;&gt;&gt; list1 = [[1, 2, 'nan'], [3, 7, 8], [1, 1, 1], [10, -1,'nan']]
&gt;&gt;&gt; list2 = [1, 2, 3, 4]
&gt;&gt;&gt; out = [(x,y)  for x,y in zip(list1,list2) 
                                         if not any(isnan(float(z)) for z in x)]

&gt;&gt;&gt; out
[([3, 7, 8], 2), ([1, 1, 1], 3)]
</snippet></ROW><ROW><id>17195782</id><snippet>out</snippet></ROW><ROW><id>17195782</id><snippet>&gt;&gt;&gt; list1_clean, list2_clean = map(list, zip(*out))
&gt;&gt;&gt; list1_clean
[[3, 7, 8], [1, 1, 1]]
&gt;&gt;&gt; list2_clean
[2, 3]
</snippet></ROW><ROW><id>17195782</id><snippet>zip</snippet></ROW><ROW><id>17195782</id><snippet>&gt;&gt;&gt; print zip.__doc__
zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]

Return a list of tuples, where each tuple contains the i-th element
from each of the argument sequences.  The returned list is truncated
in length to the length of the shortest argument sequence.
</snippet></ROW><ROW><id>17195782</id><snippet>itertools.izip</snippet></ROW><ROW><id>17196017</id><snippet>numvars = raw_input("how many vars?")

varlist = [] #list version
vardict = {} #dict version

for i in range(1, int(numvars)):
    #add variable to the list or dictionary
    varlist.append(#var)
    vardict['key'] = #var
</snippet></ROW><ROW><id>17196029</id><snippet>str.split</snippet></ROW><ROW><id>17196029</id><snippet>str.join</snippet></ROW><ROW><id>17196029</id><snippet>&gt;&gt;&gt; GroceryList = ['apples', 'oranges', 'strawberries and grapes', 'blueberries']
&gt;&gt;&gt; [", ".join(x.split(' and ')) for x in GroceryList]
['apples', 'oranges', 'strawberries, grapes', 'blueberries']
</snippet></ROW><ROW><id>17196029</id><snippet>&gt;&gt;&gt; [y  for x in GroceryList for y in x.split(' and ')]
['apples', 'oranges', 'strawberries', 'grapes', 'blueberries']
</snippet></ROW><ROW><id>17196029</id><snippet>str.split</snippet></ROW><ROW><id>17196029</id><snippet>sep</snippet></ROW><ROW><id>17196029</id><snippet>&gt;&gt;&gt; strs = 'strawberries and grapes'
&gt;&gt;&gt; strs.split(' and ')
['strawberries', 'grapes']
</snippet></ROW><ROW><id>17196029</id><snippet>,</snippet></ROW><ROW><id>17196029</id><snippet>str.replace</snippet></ROW><ROW><id>17196029</id><snippet>ast._literal_eval</snippet></ROW><ROW><id>17196029</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; strs = '"strawberries" and "grapes"' 
&gt;&gt;&gt; literal_eval(strs.replace('and', ',')) # replace 'and' with a ','
('strawberries', 'grapes')                 #returns a tuple
</snippet></ROW><ROW><id>17196507</id><snippet>centralLayout.addWidget(self.webview, 2)
</snippet></ROW><ROW><id>17196507</id><snippet>self.webview</snippet></ROW><ROW><id>17196507</id><snippet>QtGui.QTabWidget</snippet></ROW><ROW><id>17196512</id><snippet>__name__</snippet></ROW><ROW><id>17196512</id><snippet>&gt;&gt;&gt; class A:pass
&gt;&gt;&gt; A.__name__
'A'
&gt;&gt;&gt; A().__class__.__name__       #using an instance of that class
'A'
</snippet></ROW><ROW><id>17196512</id><snippet>&gt;&gt;&gt; def func():
...     print func.__name__
...     
&gt;&gt;&gt; func.__name__
'func'
&gt;&gt;&gt; func()
func
</snippet></ROW><ROW><id>17196512</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; class A():
...     def func(self):
...         func_name = sys._getframe().f_code.co_name
...         class_name = self.__class__.__name__
...         print 'Executing {} from {}'.format(func_name, class_name)
...         
&gt;&gt;&gt; A().func()
Executing func from A
</snippet></ROW><ROW><id>17196560</id><snippet>.url</snippet></ROW><ROW><id>17196560</id><snippet>audio_file = models.FileField(upload_to='user_menus/', default='%suser_menus/default.mp3' % settings.MEDIA_URL, blank=True, null=False)
</snippet></ROW><ROW><id>17196560</id><snippet>default</snippet></ROW><ROW><id>17196769</id><snippet>In [11]: s2
Out[11]:
0    AB1234:12, CD5678:34, EF3456:56
1               AB1234:12, CD5678:34
2                                NaN
3               GH5678:34, EF3456:56
4                            OH56:34
dtype: object

In [12]: s2.str.split(", '")
Out[12]:
0    [AB1234:12, CD5678:34, EF3456:56]
1               [AB1234:12, CD5678:34]
2                                  NaN
3               [GH5678:34, EF3456:56]
4                            [OH56:34]
dtype: object

In [13]: s2.str.split("\s*,\s*'")
Out[13]:
0    [AB1234:12, CD5678:34, EF3456:56]
1               [AB1234:12, CD5678:34]
2                                  NaN
3               [GH5678:34, EF3456:56]
4                            [OH56:34]
dtype: object
</snippet></ROW><ROW><id>17196789</id><snippet>$ python
&gt;&gt; from Test import *
&gt;&gt; foo()
"FOO"
&gt;&gt; Bar()
"BAR"
</snippet></ROW><ROW><id>17196799</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(unicodestring_containing_the_entire_htlm_doc)
&gt;&gt;&gt; table = soup.find('table', {'class': 'details'})
&gt;&gt;&gt; th = table.find('th', text='Issued on:')
&gt;&gt;&gt; th
&lt;th&gt;Issued on:&lt;/th&gt;
&gt;&gt;&gt; td = th.findNext('td')
&gt;&gt;&gt; td
&lt;td&gt;2013-06-13&lt;/td&gt;
&gt;&gt;&gt; td.text
u'2013-06-13'
</snippet></ROW><ROW><id>17196835</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>17196835</id><snippet>run=subprocess.Popen([sys.executable, 'maps2.py', '-i=/media/babak/LaCie/necessary/visualisation/CMIP3_Babak/Temperature/bccr_bcm2_0', '-o=temp/CMIP3', '-p=temp_001' ])
</snippet></ROW><ROW><id>17196835</id><snippet>python 'maps2.py -i=/media/babak/LaCie/necessary/visualisation/CMIP3_Babak/Temperature/bccr_bcm2_0 -o=temp/CMIP3 -p=temp_001'
</snippet></ROW><ROW><id>17196934</id><snippet>"\\"</snippet></ROW><ROW><id>17196934</id><snippet>&gt;&gt;&gt; print "testme" + "\\"
testme\
</snippet></ROW><ROW><id>17196934</id><snippet>s = s.replace('(', '\\(').replace(')', '\\)')
</snippet></ROW><ROW><id>17196934</id><snippet>import re
s = re.sub(r'([()])', r'\\\1', s)
</snippet></ROW><ROW><id>17196934</id><snippet>r</snippet></ROW><ROW><id>17196934</id><snippet>r'foo\bar'</snippet></ROW><ROW><id>17196934</id><snippet>'foo\\bar'</snippet></ROW><ROW><id>17196934</id><snippet>s = s.replace('(', r'\(').replace(')', r'\)')
</snippet></ROW><ROW><id>17196934</id><snippet>r'we\'re'</snippet></ROW><ROW><id>17196934</id><snippet>'we\'re'</snippet></ROW><ROW><id>17196934</id><snippet>"we're"</snippet></ROW><ROW><id>17196934</id><snippet>r'testme\'</snippet></ROW><ROW><id>17196938</id><snippet>_serialize</snippet></ROW><ROW><id>17196938</id><snippet>_unserialize</snippet></ROW><ROW><id>17197061</id><snippet>session</snippet></ROW><ROW><id>17197061</id><snippet>&lt;script&gt;
var someConfigurationObject = {
    someKey: "{{session["somevalue"]}}",
    other: "keys",
    "go": "here"
};
&lt;/script&gt;
</snippet></ROW><ROW><id>17197061</id><snippet>return jsonify(data=your_data, session_info=session["special_key"])
</snippet></ROW><ROW><id>17197220</id><snippet>In [35]: A=['a','\n','\n','\n','a','b','\n','\n','C','\n','\n','\n','\n','\n','\n','D']

In [36]: B = [A[0]] + [A[i] for i in range(1, len(A)) if A[i] != '\n' or A[i-1] != '\n']

In [37]: B
Out[37]: ['a', '\n', 'a', 'b', '\n', 'C', '\n', 'D']
</snippet></ROW><ROW><id>17197265</id><snippet>repr</snippet></ROW><ROW><id>17197265</id><snippet>print</snippet></ROW><ROW><id>17197265</id><snippet>&gt;&gt;&gt; str1 = 'abc'
&gt;&gt;&gt; str2 = 'def'
&gt;&gt;&gt; print str1 + str2
abcdef                     #just a human friendly output, the string still have quotes
&gt;&gt;&gt; print repr(str1 + str2)
'abcdef'
</snippet></ROW><ROW><id>17197265</id><snippet>&gt;&gt;&gt; strf = str1 + str2
&gt;&gt;&gt; print "'{}'".format(strf)
'abcdef'
</snippet></ROW><ROW><id>17197331</id><snippet>itertools</snippet></ROW><ROW><id>17197331</id><snippet>&gt;&gt;&gt; choices = [["small", "medium", "large"],
...            ["vanilla", "ultra chocolate", "lychee", "rum raisin", "ginger"],
...            ["cone", "cup"]]
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; print("\n".join(" ".join(item) for item in product(*choices)))
small vanilla cone
small vanilla cup
small ultra chocolate cone
small ultra chocolate cup
small lychee cone
small lychee cup
small rum raisin cone
small rum raisin cup
small ginger cone
small ginger cup
medium vanilla cone
&lt;etc...&gt;
</snippet></ROW><ROW><id>17197491</id><snippet>pyplot.subplots()</snippet></ROW><ROW><id>17197491</id><snippet>fig, axes = pyplot.subplots(nrows=3, ncols=4, sharex=True, sharey=True)
</snippet></ROW><ROW><id>17197491</id><snippet>axes</snippet></ROW><ROW><id>17197491</id><snippet>ax = axes[i,j]</snippet></ROW><ROW><id>17197491</id><snippet>ax.xaxis.set_tick_position('bottom')
ax.yaxis.set_tick_position('left')
</snippet></ROW><ROW><id>17197491</id><snippet>ax.set_label_text('Something')
</snippet></ROW><ROW><id>17197754</id><snippet>grid</snippet></ROW><ROW><id>17197754</id><snippet>Object.grid_forget()</snippet></ROW><ROW><id>17197754</id><snippet>pack</snippet></ROW><ROW><id>17197754</id><snippet>Object.pack_forget()</snippet></ROW><ROW><id>17197754</id><snippet>place</snippet></ROW><ROW><id>17197754</id><snippet>Frame</snippet></ROW><ROW><id>17197754</id><snippet>Frame.grid_forget()</snippet></ROW><ROW><id>17197754</id><snippet>Obj1.grid_forget()
Obj2.grid_forget()
Obj3.grid_forget()
.
.
.
</snippet></ROW><ROW><id>17197784</id><snippet>ans = dict([('\nsmallImage%d'%i,j.split(',')[1].split(":'")[-1]) for i,j in enumerate(datalist) if 'smallImage' in j])
</snippet></ROW><ROW><id>17197784</id><snippet>{'\nsmallImage0': u"http://www.shoplik.com/media/catalog/product/cache/1/thumbnail/330x462/9df78eab33525d08d6e5fb8d27136e95/n/m/nmswfz101_1.jpg'",
 '\nsmallImage2': u"http://www.shoplik.com/media/catalog/product/cache/1/thumbnail/330x462/9df78eab33525d08d6e5fb8d27136e95/n/m/nmswfz101-_1__1.jpg'",
 '\nsmallImage4': u"http://www.shoplik.com/media/catalog/product/cache/1/thumbnail/330x462/9df78eab33525d08d6e5fb8d27136e95/n/m/nmswfz101-_2__1.jpg'",
 '\nsmallImage6': u"http://www.shoplik.com/media/catalog/product/cache/1/thumbnail/330x462/9df78eab33525d08d6e5fb8d27136e95/n/m/nmswfz101-_3__1.jpg'",
 '\nsmallImage8': u"http://www.shoplik.com/media/catalog/product/cache/1/thumbnail/330x462/9df78eab33525d08d6e5fb8d27136e95/n/m/nmswfz101-_4__1.jpg'"}
</snippet></ROW><ROW><id>17198023</id><snippet>a &lt; b and b &lt; c</snippet></ROW><ROW><id>17198023</id><snippet>__lt__</snippet></ROW><ROW><id>17198023</id><snippet>__gt__</snippet></ROW><ROW><id>17198023</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda : a &lt; b &lt; c)
  1           0 LOAD_GLOBAL              0 (a)
              3 LOAD_GLOBAL              1 (b)
              6 DUP_TOP             
              7 ROT_THREE           
              8 COMPARE_OP               0 (&lt;)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_GLOBAL              2 (c)
             17 COMPARE_OP               0 (&lt;)
             20 RETURN_VALUE        
        &gt;&gt;   21 ROT_TWO             
             22 POP_TOP             
             23 RETURN_VALUE  
</snippet></ROW><ROW><id>17198023</id><snippet>class A(object):
    def __lt__(self, other):
        print 'inside lt'
        return True
    def __gt__(self, other):
        print 'inside gt'
        return True
...        
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; 10 &lt; a &lt; 20
inside gt
inside lt
True
</snippet></ROW><ROW><id>17198025</id><snippet>base64.b64decode</snippet></ROW><ROW><id>17198025</id><snippet>import base64

binary_data = base64.b64decode(base64_encoded_string)
</snippet></ROW><ROW><id>17198078</id><snippet>fork()</snippet></ROW><ROW><id>17198078</id><snippet>exec*()</snippet></ROW><ROW><id>17198078</id><snippet>waitpid()</snippet></ROW><ROW><id>17198078</id><snippet>#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;errno.h&gt;

int main(void)
{
    pid_t child, p;
    int   status;

    /*
     * Prepare pipes et cetera first.
    */

    /* Fork to create the subprocess. */
    child = fork();
    if (child == (pid_t)-1) {
        /* Cannot fork(); usually out of resources (user limits).
         * see errno for details. With &lt;string.h&gt;, you can use
         * strerror(errno) to obtain the error string itself. */
        return 1;

    } else
    if (!child) {
        /* This is the child process itself.
         * Do whatever cleanup is necessary, then
         * execute the subprocess command. */
        execlp("/bin/ls",  "ls", "-lA", NULL);

        /* This is only reached if the exec failed;
         * again, see errno for reason.
         * Always have the child process exit! */
        return 127;
    }

    /* This is only run by the parent process
     * (because the child always exits within the
     *  else if body above).
     *
     * The subprocess PID is 'child'.
    */

    /* Wait for the child process to exit. */
    do {
        status = 0;
        p = waitpid(child, &amp;status, 0);
        if (p == (pid_t)-1 &amp;&amp; errno != EINTR)
            break; /* Error */
    } while (p != child);

    if (p != child) {
        /* Child process was lost.
         * If (p == (pid_t)-1), errno describes the error.
        */

    } else
    if (WIFEXITED(status)) {
        /* Child process exited with WEXITSTATUS(status) status.
         * A status of 0 (or EXIT_SUCCESS) means success,
         * no errors occurred. Nonzero usually means an error,
         * but codes vary from binary to binary.
        */

    } else
    if (WIFSIGNALED(status)) {
        /* Child process died from WTERMSIG(status) signal.
         * If you include &lt;string.h&gt;, you can use
         *     strsignal(WTERMSIG(status))
         * to obtain the name (string) of the terminating signal.
        */

    } else {
        /* Child process died from unknown causes.
        */

    }

    /* All done. */
    return 0;
}
</snippet></ROW><ROW><id>17198078</id><snippet>socketpair()</snippet></ROW><ROW><id>17198078</id><snippet>pipe()</snippet></ROW><ROW><id>17198078</id><snippet>STDIN_FILENO</snippet></ROW><ROW><id>17198078</id><snippet>STDOUT_FILENO</snippet></ROW><ROW><id>17198078</id><snippet>STDERR_FILENO</snippet></ROW><ROW><id>17198078</id><snippet>dup2()</snippet></ROW><ROW><id>17198078</id><snippet>/proc/[child]/</snippet></ROW><ROW><id>17198078</id><snippet>#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;

int main(void)
{
    FILE *sub;
    pid_t subpid;
    int   status;

    sub = popen("setsid /bin/sh -c 'echo $$ ; exec command args' &lt;/dev/null", "rb");
    if (!sub) {
        /* popen() failed. */
        return 1;
    }

    /* Read the first line from sub. It contains the PID for the command. */
    {
        char buffer[32], *line, dummy;
        int  value;

        line = fgets(buffer, sizeof buffer, sub);
        if (!line) {
            /* setsid failed, or non-POSIXy system (Windows?) */
            pclose(sub);
            return 1;
        }
        if (sscanf(line, "%d%c", &amp;value, &amp;dummy) != 1 || value &lt; 2) {
            /* Internal bug, or extra output? */
            pclose(sub);
            return 1;
        }

        /* subpid is also the session ID and the process group ID,
         * because it is the session leader. */
        subpid = value;
    }

    /* Read from sub using standard I/O, to capture command output. */

    /* After no more output to read from sub, reap the subprocess. */
    errno = 0;
    do {
        status = pclose(sub);
    } while (status == -1 &amp;&amp; errno == EINTR);

    if (status) {
        /* Problem: sub exited with nonzero exit status 'status',
         * or if status == -1, some other error occurred. */

    } else {
        /* Sub exited with success (zero exit status). */
    }

    /* Done. */
    return 0;
}
</snippet></ROW><ROW><id>17198078</id><snippet>popen()</snippet></ROW><ROW><id>17198078</id><snippet>/bin/sh</snippet></ROW><ROW><id>17198078</id><snippet>setsid</snippet></ROW><ROW><id>17198078</id><snippet>echo $$</snippet></ROW><ROW><id>17198078</id><snippet>sh</snippet></ROW><ROW><id>17198078</id><snippet>exec CMD...</snippet></ROW><ROW><id>17198164</id><snippet>blank=True</snippet></ROW><ROW><id>17198164</id><snippet>null=True</snippet></ROW><ROW><id>17198164</id><snippet>connections = models.ManyToManyField('self', related_name='connections', blank=True)
</snippet></ROW><ROW><id>17198301</id><snippet>'%'</snippet></ROW><ROW><id>17198301</id><snippet>"""&lt;div id="spc-preview-edit-submit" class="spc-form"&gt;
    &lt;form action="{%% url new-submission itemtype='%s' %%}" 
    ...
    ...
    &lt;/div&gt;&lt;/form&gt;&lt;/div&gt;""" % value
</snippet></ROW><ROW><id>17198301</id><snippet>str.format()</snippet></ROW><ROW><id>17198301</id><snippet>{</snippet></ROW><ROW><id>17198301</id><snippet>{{</snippet></ROW><ROW><id>17198301</id><snippet> """&lt;div id="spc-preview-edit-submit" class="spc-form"&gt;
    &lt;form action="{{% url new-submission itemtype='{}' %}}" 
    ...
    ...
    &lt;/div&gt;&lt;/form&gt;&lt;/div&gt;""".format(value)
</snippet></ROW><ROW><id>17198308</id><snippet>from django.core import serializers
data = serializers.serialize("xml", SomeModel.objects.all())
</snippet></ROW><ROW><id>17198323</id><snippet>curl</snippet></ROW><ROW><id>17198323</id><snippet>$ curl -v -G -H "Accept: application/json" 'http://example.com/experimental/events' --data-urlencode 'query=["=", "certname", "myserver"]'
* About to connect() to example.com port 80 (#0)
*   Trying 192.0.43.10... connected
&gt; GET /experimental/events?query=%5B%22%3D%22%2C%20%22certname%22%2C%20%22myserver%22%5D HTTP/1.1
[...]
</snippet></ROW><ROW><id>17198323</id><snippet>POST</snippet></ROW><ROW><id>17198323</id><snippet>GET</snippet></ROW><ROW><id>17198323</id><snippet>url_path = "https://.../events?" + data
server_request = urllib2.Request(url_path)
</snippet></ROW><ROW><id>17198323</id><snippet>+</snippet></ROW><ROW><id>17198323</id><snippet>curl</snippet></ROW><ROW><id>17198323</id><snippet>%20</snippet></ROW><ROW><id>17198323</id><snippet>import urllib2, urllib
values = {"query": "['=', 'certname', 'myserver']"}
data = urllib.urlencode(values)
print(data)
</snippet></ROW><ROW><id>17198372</id><snippet>pytz.FixedOffset</snippet></ROW><ROW><id>17198372</id><snippet>In [39]: df.apply(lambda x: pd.Timestamp(x['DATETIME'], tz=pytz.FixedOffset(60*x['OFFSET'])), axis=1)
Out[39]: 
0    2013-01-01 00:00:00+01:00
1    2013-01-01 01:00:00+01:00
2    2013-01-01 02:00:00+01:00
3    2013-01-01 03:00:00+01:00
4    2013-01-01 04:00:00+01:00
5    2013-01-01 05:00:00+01:00
6    2013-01-01 06:00:00+02:00
7    2013-01-01 07:00:00+02:00
8    2013-01-01 08:00:00+02:00
dtype: object
</snippet></ROW><ROW><id>17198447</id><snippet>&gt;&gt;&gt; [ [(x+y)**2 for y in range(10)] for x in range(10)]
[[0, 1, 4, 9, 16, 25, 36, 49, 64, 81], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], [4, 9, 16, 25, 36, 49, 64, 81, 100, 121], [9, 16, 25, 36, 49, 64, 81, 100, 121, 144], [16, 25, 36, 49, 64, 81, 100, 121, 144, 169], [25, 36, 49, 64, 81, 100, 121, 144, 169, 196], [36, 49, 64, 81, 100, 121, 144, 169, 196, 225], [49, 64, 81, 100, 121, 144, 169, 196, 225, 256], [64, 81, 100, 121, 144, 169, 196, 225, 256, 289], [81, 100, 121, 144, 169, 196, 225, 256, 289, 324]]
</snippet></ROW><ROW><id>17198511</id><snippet>&gt;&gt;&gt; variable = None
&gt;&gt;&gt; isinstance(variable,type(None))
True
&gt;&gt;&gt; variable = True
&gt;&gt;&gt; isinstance(variable,type(None))
False
</snippet></ROW><ROW><id>17198511</id><snippet>isinstance(object, classinfo)</snippet></ROW><ROW><id>17198511</id><snippet>None</snippet></ROW><ROW><id>17198511</id><snippet>classinfo</snippet></ROW><ROW><id>17198913</id><snippet>3*[np.copy(a)]</snippet></ROW><ROW><id>17198913</id><snippet>a</snippet></ROW><ROW><id>17198913</id><snippet>b = [np.copy(a) for i in range(3)]
</snippet></ROW><ROW><id>17198913</id><snippet>b = np.vstack((a for i in range(3)))
</snippet></ROW><ROW><id>17199007</id><snippet>from foo import *</snippet></ROW><ROW><id>17199007</id><snippet>elementtree</snippet></ROW><ROW><id>17199007</id><snippet>from _elementtree import *</snippet></ROW><ROW><id>17199007</id><snippet>pickle</snippet></ROW><ROW><id>17199007</id><snippet>_yellow = _green = _red = lambda msg: msg
if sys.stdout.isatty():
    try:
        from colors import yellow, green, red
    except ImportError:
        yellow, green, red = _yellow, _green, _red
else:
    yellow, green, red = _yellow, _green, _red
</snippet></ROW><ROW><id>17199007</id><snippet>_yellow = _green = _red = lambda msg: msg
yellow, green, red = _yellow, _green, _red
if sys.stdout.isatty():
    try:
        from colors import yellow, green, red
    except ImportError:
        pass
</snippet></ROW><ROW><id>17199237</id><snippet>repr</snippet></ROW><ROW><id>17199237</id><snippet>str</snippet></ROW><ROW><id>17199237</id><snippet>&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
&gt;&gt;&gt; print '"Isn\'t," she said.'
"Isn't," she said.
</snippet></ROW><ROW><id>17199237</id><snippet>repr</snippet></ROW><ROW><id>17199237</id><snippet>print</snippet></ROW><ROW><id>17199237</id><snippet>str</snippet></ROW><ROW><id>17199237</id><snippet>object.__repr__</snippet></ROW><ROW><id>17199237</id><snippet>eval(repr('"Isn\'t," she said.'))</snippet></ROW><ROW><id>17199237</id><snippet>eval(str('"Isn\'t," she said.'))</snippet></ROW><ROW><id>17199266</id><snippet>concat</snippet></ROW><ROW><id>17199266</id><snippet>dfs = (pd.read_csv(filename).set_index('id') for filename in filenames)
merged_df = pd.concat(dfs, axis=1)
</snippet></ROW><ROW><id>17199267</id><snippet>for row in data:
    temp_string  = nltk.clean_html(str(row[0]).strip(string.digits + string.punctuation).lower() +" "+str(row[1]).strip(string.digits + string.punctuation).lower() \
    +" "+str(row[2]).strip(string.digits + string.punctuation).lower()+" "+str(row[3]).strip(string.digits + string.punctuation)).lower().split()
    temp_string     = [word for word in temp_string if word not in stopwords and len(word) &gt;= 3]
    bigrams         = nltk.bigrams(word_tokenize(str(' '.join(temp_string))))
    all_terms_list  = temp_string + [str(bigram).replace(",","").replace("'", "").strip("()") for bigram in bigrams]
    [live_music_idx_list.append(row[4]) for word in live_music_word_list if word in all_terms_list]
</snippet></ROW><ROW><id>17199399</id><snippet>communicate()</snippet></ROW><ROW><id>17199399</id><snippet>import subprocess
process = subprocess.Popen(['app'], shell=False,
                           stdout=subprocess.PIPE,
                           stdin=subprocess.PIPE)
out, err = process.communicate("Some String")
print out
</snippet></ROW><ROW><id>17199399</id><snippet>#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;

int main(int argc, char** argv) {
    //...Prep work...
    while (cin) {  // &lt;-- Will eventually reach the end of the input stream
        string input;
        cin &gt;&gt; input;
        //...Some Work ...
        string response = input;
        cout &lt;&lt; response;
    }
}
</snippet></ROW><ROW><id>17199399</id><snippet>communicate()</snippet></ROW><ROW><id>17199399</id><snippet>import subprocess

process = subprocess.Popen(['app'], shell=False,
                           stdout=subprocess.PIPE,
                           stdin=subprocess.PIPE)
process.stdin.write("Some String")
process.stdin.close()  # &lt;-- Makes sure the external app gets an EOF while
                       #     reading its input stream.
for line in process.stdout.readlines():
    print line
</snippet></ROW><ROW><id>17199412</id><snippet>prepDict</snippet></ROW><ROW><id>17199412</id><snippet>test</snippet></ROW><ROW><id>17199412</id><snippet>prepDict</snippet></ROW><ROW><id>17199412</id><snippet>t = Timer(lambda: prepDict(tempDict.copy()))
</snippet></ROW><ROW><id>17199412</id><snippet>prepDict</snippet></ROW><ROW><id>17199412</id><snippet>number</snippet></ROW><ROW><id>17199434</id><snippet>(cv2.cv.CV_CAP_PROP_POS_FRAMES, 1)</snippet></ROW><ROW><id>17199434</id><snippet>vidFile.set(cv2.cv.CV_CAP_PROP_POS_AVI_RATIO, 0)</snippet></ROW><ROW><id>17199685</id><snippet>dic3 = {}
for k in dic1.viewkeys() &amp; dic2.viewkeys():
    dic3[k] = (dic1[k], dic2[k])
</snippet></ROW><ROW><id>17199685</id><snippet>dic3 = { k : (dic1[k], dic2[k]) for k in dic1.viewkeys() &amp; dic2.viewkeys() }
</snippet></ROW><ROW><id>17199685</id><snippet>dic3 = { k : (dic1[k], dic2[k]) for k in dic1.keys() &amp; dic2.keys() }
</snippet></ROW><ROW><id>17199685</id><snippet>dic3
=&gt; {1.0: (9.0, 3.4), 3.0: (33.0, 88.9), 5.0: (13.0, 9.0)}
</snippet></ROW><ROW><id>17199732</id><snippet>&gt;&gt; str = 'a1 b2'
&gt;&gt; ' '.join(x[::-1] for x in str.split())
'1a 2b'
</snippet></ROW><ROW><id>17199732</id><snippet>def reverseSentences(str):
  return ' '.join(x[::-1] for x in str.split())
</snippet></ROW><ROW><id>17199732</id><snippet>x[::-1]</snippet></ROW><ROW><id>17199732</id><snippet>reversed()</snippet></ROW><ROW><id>17199861</id><snippet>host_subplot</snippet></ROW><ROW><id>17199861</id><snippet>plt.figure(figsize=[8,10])</snippet></ROW><ROW><id>17199861</id><snippet>host</snippet></ROW><ROW><id>17199950</id><snippet>"\u00c2\u00a9"</snippet></ROW><ROW><id>17199950</id><snippet>json</snippet></ROW><ROW><id>17199950</id><snippet>&gt;&gt;&gt; print json.dumps(u'\xc2\xa9')
"\u00c2\u00a9"
</snippet></ROW><ROW><id>17199950</id><snippet>s = unicode('©', 'utf-8').encode('utf-8')
s2 = u''.join(unichr(ord(c)) for c in s)
</snippet></ROW><ROW><id>17199950</id><snippet>"\xc2\xa9"</snippet></ROW><ROW><id>17200188</id><snippet>object1</snippet></ROW><ROW><id>17200188</id><snippet>&gt;&gt;&gt; class A:
...     def foo(self):
...         print self
...         
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; c = b     
&gt;&gt;&gt; a,b,c    #all of them point to the same instance object
(&lt;__main__.A instance at 0xb61ee8ec&gt;, &lt;__main__.A instance at 0xb61ee8ec&gt;, &lt;__main__.A instance at 0xb61ee8ec&gt;)
</snippet></ROW><ROW><id>17200188</id><snippet>a</snippet></ROW><ROW><id>17200188</id><snippet>b</snippet></ROW><ROW><id>17200188</id><snippet>c</snippet></ROW><ROW><id>17200188</id><snippet>&gt;&gt;&gt; class A:
...     def __init__(self, name):
...         self.name = name
...         
&gt;&gt;&gt; a = A('a')
&gt;&gt;&gt; a.name
'a'
&gt;&gt;&gt; foo = A('foo')
&gt;&gt;&gt; foo.name
'foo'
&gt;&gt;&gt; bar = foo # additional references to an object will still return the original name
&gt;&gt;&gt; bar.name
'foo'
</snippet></ROW><ROW><id>17200402</id><snippet>/</snippet></ROW><ROW><id>17200402</id><snippet>href</snippet></ROW><ROW><id>17200402</id><snippet>&lt;a href="/appname/detail/{{ job.id }}/"&gt;{{ job.name }}&lt;/a&gt;
</snippet></ROW><ROW><id>17200402</id><snippet>url</snippet></ROW><ROW><id>17200402</id><snippet>&lt;a href="{% url 'appname.views.detail' jobID=job.id %}"&gt;{{ job.name }}&lt;/a&gt;
</snippet></ROW><ROW><id>17200437</id><snippet>with open("scores.txt") as f:
    scores = {'score{}'.format(i) : line.strip() for i,line in enumerate(f,1)}
</snippet></ROW><ROW><id>17200437</id><snippet>&gt;&gt;&gt; scores['score1']
'christian careaga: 500'
&gt;&gt;&gt; scores['score2']
'c dubb: 400'
&gt;&gt;&gt; scores['score3']
'swag master: 50'
</snippet></ROW><ROW><id>17200437</id><snippet>&gt;&gt;&gt; for s in  sorted(scores.values(), key = lambda x: int(x.split()[-1]),
                                                                 reverse = True):
    print s
...     
christian careaga: 500
c dubb: 400
swag master: 50
</snippet></ROW><ROW><id>17200619</id><snippet>tweepy</snippet></ROW><ROW><id>17200619</id><snippet>git clone https://github.com/tweepy/tweepy.git
python setup.py install
</snippet></ROW><ROW><id>17200619</id><snippet>api.test()</snippet></ROW><ROW><id>17200619</id><snippet>help/test.json</snippet></ROW><ROW><id>17200619</id><snippet>api.verify_credentials</snippet></ROW><ROW><id>17200619</id><snippet>False</snippet></ROW><ROW><id>17200666</id><snippet>else</snippet></ROW><ROW><id>17200666</id><snippet>append</snippet></ROW><ROW><id>17200666</id><snippet>None</snippet></ROW><ROW><id>17200666</id><snippet>return foo(n-1) + [1]  # creates a *new* list
</snippet></ROW><ROW><id>17200708</id><snippet>rate_limit_status()</snippet></ROW><ROW><id>17200708</id><snippet>dictionary</snippet></ROW><ROW><id>17200708</id><snippet>dictionaries</snippet></ROW><ROW><id>17200708</id><snippet>&gt;&gt;&gt; g = eval("{u'rate_limit_context': {u'access_token': u'....'}, u'resources': ... ")
&gt;&gt;&gt; g[u'resources'][u'statuses'][u'/statuses/retweets/:id']
{u'limit': 15, u'remaining': 0, u'reset': 1371672792}
&gt;&gt;&gt; g[u'resources'][u'statuses'][u'/statuses/retweets/:id'][u'remaining']
0
</snippet></ROW><ROW><id>17200786</id><snippet>tabulate = dict(L)
f = tabulate.get
</snippet></ROW><ROW><id>17200880</id><snippet>C:\anypath\onlocalmachine&gt; C:\env\Scripts\python.exe helloworld.py
</snippet></ROW><ROW><id>17200880</id><snippet>C:\env&gt; helloworld.py
</snippet></ROW><ROW><id>17200953</id><snippet>return x</snippet></ROW><ROW><id>17200953</id><snippet>x</snippet></ROW><ROW><id>17200953</id><snippet>return sanger
return sequence
return identifier
return plus
</snippet></ROW><ROW><id>17200953</id><snippet>return sanger</snippet></ROW><ROW><id>17200953</id><snippet>sanger</snippet></ROW><ROW><id>17200953</id><snippet>f.write("'%s'\n '%s'\n '%s'" %(identifier, sequence, sanger))
f.close()
return (sanger,sequence,identifier,plus)
</snippet></ROW><ROW><id>17200953</id><snippet>/n</snippet></ROW><ROW><id>17200953</id><snippet>\n</snippet></ROW><ROW><id>17201159</id><snippet>os.path.join()</snippet></ROW><ROW><id>17201216</id><snippet>lines = ['~$ ' + line for line in command.split('\n')]
</snippet></ROW><ROW><id>17201216</id><snippet>enumerate()</snippet></ROW><ROW><id>17201216</id><snippet>for i, line in enumerate(lines):
    lines[i] = '~$ ' + line
</snippet></ROW><ROW><id>17201427</id><snippet>table = (entry.split() for entry in some_list)
raw_dates = (row[1] for row in table if len(row) &gt;= 3)
# Uniquify while keeping order. http://stackoverflow.com/a/17016257
dates = list(collections.OrderedDict.fromkeys(raw_dates))
</snippet></ROW><ROW><id>17201686</id><snippet>edit fspecial</snippet></ROW><ROW><id>17201686</id><snippet>...
  case 'gaussian' % Gaussian filter

     siz   = (p2-1)/2;
     std   = p3;

     [x,y] = meshgrid(-siz(2):siz(2),-siz(1):siz(1));
     arg   = -(x.*x + y.*y)/(2*std*std);

     h     = exp(arg);
     h(h&lt;eps*max(h(:))) = 0;

     sumh = sum(h(:));
     if sumh ~= 0,
       h  = h/sumh;
     end;
...
</snippet></ROW><ROW><id>17201686</id><snippet>import numpy as np

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    """
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h &lt; np.finfo(h.dtype).eps*h.max() ] = 0
    sumh = h.sum()
    if sumh != 0:
        h /= sumh
    return h
</snippet></ROW><ROW><id>17201686</id><snippet>fspecial</snippet></ROW><ROW><id>17201686</id><snippet> &gt;&gt; fspecial('gaussian',5,1)

 0.002969     0.013306     0.021938     0.013306     0.002969
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.021938      0.09832       0.1621      0.09832     0.021938
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.002969     0.013306     0.021938     0.013306     0.002969

 : matlab_style_gauss2D((5,5),1)

array([[ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.021938,  0.09832 ,  0.162103,  0.09832 ,  0.021938],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969]])
</snippet></ROW><ROW><id>17201763</id><snippet>light_vect = light_position - face_center_position
cam_vect = cam_position - face_center_position
halfangle_vect = (light_vect.normal() + cam_vect.normal()).normal()
</snippet></ROW><ROW><id>17201942</id><snippet>MyScriptingFunctions</snippet></ROW><ROW><id>17201942</id><snippet>public</snippet></ROW><ROW><id>17202103</id><snippet>enctype="multipart/form-data"
</snippet></ROW><ROW><id>17202119</id><snippet>len()</snippet></ROW><ROW><id>17202119</id><snippet>if len(appended_data) == 1:
</snippet></ROW><ROW><id>17202119</id><snippet>&gt;&gt;&gt; len([])
0
&gt;&gt;&gt; len([1])
1
&gt;&gt;&gt; len([1, 2])
2
</snippet></ROW><ROW><id>17202196</id><snippet>matplotlib</snippet></ROW><ROW><id>17202196</id><snippet>Normalize</snippet></ROW><ROW><id>17202196</id><snippet>matplotlib.colors.Normalize</snippet></ROW><ROW><id>17202196</id><snippet>[0, 1]</snippet></ROW><ROW><id>17202196</id><snippet>[0,1]</snippet></ROW><ROW><id>17202196</id><snippet>LogNorm</snippet></ROW><ROW><id>17202196</id><snippet>norm</snippet></ROW><ROW><id>17202196</id><snippet>plt.scatter(x,y,edgecolors='none',s=marker_size,c=void_fraction,
                norm=matplotlib.colors.LogNorm())
</snippet></ROW><ROW><id>17202196</id><snippet>matplotlib</snippet></ROW><ROW><id>17202196</id><snippet>Normalize</snippet></ROW><ROW><id>17202196</id><snippet>LogNorm</snippet></ROW><ROW><id>17202196</id><snippet>matplotlib.color</snippet></ROW><ROW><id>17202266</id><snippet>True == False is False
</snippet></ROW><ROW><id>17202266</id><snippet>(True == False) and (False is False)
</snippet></ROW><ROW><id>17202266</id><snippet>1 &lt;= x &lt; 4</snippet></ROW><ROW><id>17202373</id><snippet>int()</snippet></ROW><ROW><id>17202373</id><snippet>highscore = int(highscore)
</snippet></ROW><ROW><id>17202373</id><snippet>self.score</snippet></ROW><ROW><id>17202373</id><snippet>int(self.score)</snippet></ROW><ROW><id>17202417</id><snippet>urllib2.Request</snippet></ROW><ROW><id>17202417</id><snippet>from urllib import urlencode
from urllib2 import Request urlopen

# Define values that we'll pass to our urllib and urllib2 methods
url = 'http://www.something.com/blah'
user_host = 'example.com'
values = {'name' : 'Engineero',      # dict of keys and values for our POST data
          'location' : 'Interwebs',
          'language' : 'Python' }
headers = { 'Host' : user_host }     # dict of keys and values for our header

# Set up our request, execute, and read
data = urlencode(values)             # encode for sending URL request
req = Request(url, data, headers)    # make POST request to url with data and headers
response = urlopen(req)              # get the response from the server
the_page = response.read()           # read the response from the server

# Do other stuff with the response
</snippet></ROW><ROW><id>17202422</id><snippet>myprogram\xlrd</snippet></ROW><ROW><id>17202422</id><snippet>myprogram\frozen_xlrd</snippet></ROW><ROW><id>17202422</id><snippet>try:
    import xlrd
except ImportError:
    import frozen_xlrd as xlrd
</snippet></ROW><ROW><id>17202422</id><snippet>UserWarning</snippet></ROW><ROW><id>17202422</id><snippet>import warnings
warnings.filterwarnings("ignore", 
                        message="Module xlrd was already imported", 
                        category=UserWarning)
</snippet></ROW><ROW><id>17202422</id><snippet>scikits</snippet></ROW><ROW><id>17202430</id><snippet>root = ET.fromstring(XML.content) # no .getroot() call required
</snippet></ROW><ROW><id>17202430</id><snippet>XML = requests.get(url, stream=True)
tree = ET.parse(XML.raw)
root = tree.getroot()
</snippet></ROW><ROW><id>17202443</id><snippet>display.set_mode</snippet></ROW><ROW><id>17202443</id><snippet>pygame.init()
pygame.display.set_mode((width, height))
# rest of the code
</snippet></ROW><ROW><id>17202577</id><snippet>set()</snippet></ROW><ROW><id>17202577</id><snippet>&gt;&gt;&gt; s = """I would like this
... text to be
... 
... reduced
... I would like this
... text to be
... 
... reduced"""
&gt;&gt;&gt; print "\n".join(set(s.splitlines()))
I would like this

text to be
reduced
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17202577</id><snippet>&gt;&gt;&gt; re.match(r"([\w \n]+)\n\1", string, re.MULTILINE).groups()
('I would like this\ntext to be\n\nreduced',)
</snippet></ROW><ROW><id>17202577</id><snippet>\1</snippet></ROW><ROW><id>17202868</id><snippet>Singleton</snippet></ROW><ROW><id>17202868</id><snippet>print</snippet></ROW><ROW><id>17202868</id><snippet>class Object(metaclass=Singleton):
    def __init__(self, arg=None):
        print("creating instance with arg:", arg)
</snippet></ROW><ROW><id>17202868</id><snippet>&gt;&gt;&gt; Object("parameter")
creating NEW Orchestrator instance
creating instance with arg: parameter
&lt;__main__.Object object at 0x7f45f9ce8910&gt;
&gt;&gt;&gt; Object("foobar")   # returns the same instance as the above call
&lt;__main__.Object object at 0x7f45f9ce8910&gt;
</snippet></ROW><ROW><id>17202868</id><snippet>class Object(object):
    __metaclass__ = Singleton
    def __init__(self, arg=None):
        print("creating instance with arg:", arg)
</snippet></ROW><ROW><id>17202901</id><snippet>s2 = "123test"
if s2.isalnum():
    print "String is alphanumeric"
elif s2.isalpha():
    print "String is alpha"
elif s2.isdigit():
    print "String is numeric"
else:
    print "No Idea what the string is"
</snippet></ROW><ROW><id>17202992</id><snippet>$ pip install git+git://github.com/paramiko/paramiko.git
$ python
Python 2.7.2 (default, Oct 11 2012, 20:14:37)
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import paramiko
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17203054</id><snippet>return</snippet></ROW><ROW><id>17203054</id><snippet>transpose()</snippet></ROW><ROW><id>17203054</id><snippet>None</snippet></ROW><ROW><id>17203054</id><snippet>Q_transpose = None</snippet></ROW><ROW><id>17203108</id><snippet>-05</snippet></ROW><ROW><id>17203108</id><snippet>&gt;&gt;&gt; '{:.20f}'.format(16/float(1184000))
'0.00001351351351351351'
</snippet></ROW><ROW><id>17203113</id><snippet>&gt;&gt;&gt; a = array([[1, 0, 0, 0, 0, 0],
...        [0, 4, 0, 0, 0, 1],
...        [0, 0, 3, 0, 0, 0],
...        [0, 1, 0, 7, 0, 10],
...        [0, 0, 0, 0, 8, 0],
...        [0, 2, 0, 0, 0, 9]])
&gt;&gt;&gt; 
&gt;&gt;&gt; a[1::2,1::2]
array([[ 4,  0,  1],
       [ 1,  7, 10],
       [ 2,  0,  9]])
</snippet></ROW><ROW><id>17203113</id><snippet>&gt;&gt;&gt; a = np.ones(a.shape,dtype=bool)
&gt;&gt;&gt; a[1::2,1::2] = False
&gt;&gt;&gt; a
array([[ True,  True,  True,  True,  True,  True],
       [ True, False,  True, False,  True, False],
       [ True,  True,  True,  True,  True,  True],
       [ True, False,  True, False,  True, False],
       [ True,  True,  True,  True,  True,  True],
       [ True, False,  True, False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>17203113</id><snippet>a[1:6:2,1:6:2]</snippet></ROW><ROW><id>17203113</id><snippet>a[1::3,1::3]</snippet></ROW><ROW><id>17203113</id><snippet>&gt;&gt;&gt; b = [1,3,5]
&gt;&gt;&gt; a[:,b][b]
array([[ 4,  0,  1],
       [ 1,  7, 10],
       [ 2,  0,  9]])
&gt;&gt;&gt; a[b][:,b]  #I think the same thing, but depending on data layout, one may be faster than the other
array([[ 4,  0,  1],
       [ 1,  7, 10],
       [ 2,  0,  9]])
</snippet></ROW><ROW><id>17203123</id><snippet>time.clock()</snippet></ROW><ROW><id>17203123</id><snippet>time.time()</snippet></ROW><ROW><id>17203123</id><snippet>PyGame</snippet></ROW><ROW><id>17203123</id><snippet>pygame.time</snippet></ROW><ROW><id>17203123</id><snippet>pygame.game.set_timer</snippet></ROW><ROW><id>17203123</id><snippet>pygame.time.get_ticks</snippet></ROW><ROW><id>17203130</id><snippet>\s</snippet></ROW><ROW><id>17203130</id><snippet>emotion(?=\s|\.|$)
</snippet></ROW><ROW><id>17203130</id><snippet>&gt;</snippet></ROW><ROW><id>17203130</id><snippet>&gt;</snippet></ROW><ROW><id>17203130</id><snippet>for match in re.findall(r'(?:(?&lt;=\.)\s+|^)((?=(?:(?!\.(?:\s|$)).)*?\bemotion&gt;(?=\s|\.|$))(?=(?:(?!\.(?:\s|$)).)*?\bomaha(?=\s|\.|$)).*?\.(?=\s|$))', text, flags=re.I):
    line = ''.join(str(x) for x in match)
</snippet></ROW><ROW><id>17203130</id><snippet>for match in re.findall(r'(?:(?&lt;=\.)\s+|^)((?=(?:(?!\.(?:\s|$)).)*?\bemotion&gt;(?=\s|\.|$))(?=(?:(?!\.(?:\s|$)).)*?\bLOCATION&gt;(?=\s|\.|$)).*?\.(?=\s|$))', text, flags=re.I):
    line = ''.join(str(x) for x in match)
</snippet></ROW><ROW><id>17203150</id><snippet>__init__</snippet></ROW><ROW><id>17203150</id><snippet>player1_field = PlayerField(...
</snippet></ROW><ROW><id>17203150</id><snippet>self.player1_field = PlayerField(...
</snippet></ROW><ROW><id>17203161</id><snippet>file.readlines()</snippet></ROW><ROW><id>17203161</id><snippet>file.read()</snippet></ROW><ROW><id>17203161</id><snippet>with</snippet></ROW><ROW><id>17203161</id><snippet>with open("decl.txt", "r") as f:
    data = f.read()
# split oliver
words = re.split('\W+', data)
</snippet></ROW><ROW><id>17203161</id><snippet>file.read</snippet></ROW><ROW><id>17203161</id><snippet>&gt;&gt;&gt; print file.read.__doc__
read([size]) -&gt; read at most size bytes, returned as a string.

If the size argument is negative or omitted, read until EOF is reached.
Notice that when in non-blocking mode, less data than what was requested
may be returned, even if no size parameter was given.
</snippet></ROW><ROW><id>17203233</id><snippet>authors = [('A', "Aho"), ('W', "Weinberger"), ('K', "Kernighan")]
option = get_option()
while option not in (x[0] for x in authors):
    option = get_option()
</snippet></ROW><ROW><id>17203233</id><snippet>(x[0] for x in authors)</snippet></ROW><ROW><id>17203233</id><snippet>[0]th</snippet></ROW><ROW><id>17203233</id><snippet>option</snippet></ROW><ROW><id>17203380</id><snippet>callspeed</snippet></ROW><ROW><id>17203380</id><snippet>speed = int(s)
</snippet></ROW><ROW><id>17203380</id><snippet>speed</snippet></ROW><ROW><id>17203380</id><snippet>global</snippet></ROW><ROW><id>17203380</id><snippet>def callspeed():
    global speed
    s = e.get()    
    speed = int(s)
    e.delete(0, END)
    e.insert(0, "Enter time")
</snippet></ROW><ROW><id>17203380</id><snippet>global</snippet></ROW><ROW><id>17203380</id><snippet>speed</snippet></ROW><ROW><id>17203380</id><snippet>class ThingyModel(object):
    def __init__(self, e):
        self.speed, self.time, self.d = 10, 10, 50
        self.e = e

    def callspeed(self):
        s = self.e.get()
        self.speed = int(s)
        self.e.delete(0, END)
        self.e.insert(0, "Enter time")

    def calltime(self):
        t = self.e.get()
        self.time = int(t)
        self.d = self.speed * self.time
        print d

e = Entry(master)
e.pack()
e. delete(0, END)
e.insert(0, "Enter Speed")

model = ThingyModel(e)

bs = Button(master, text="Speed", width=15, command=model.callspeed)
bs.pack()
bt = Button(master, text="Time", width=15, command=model.calltime)
bt.pack()
</snippet></ROW><ROW><id>17203417</id><snippet>from django.utils.translation import ugettext
from django.utils.translation import ugettext_lazy as _
</snippet></ROW><ROW><id>17203422</id><snippet>&gt;&gt;&gt; fields = [float('nan'),2,3,float('nan'),5]
&gt;&gt;&gt; {"field%d"%i:v for i,v in enumerate(fields) if not math.isnan(v)}
{'field2': 3, 'field1': 2, 'field4': 5}
</snippet></ROW><ROW><id>17203422</id><snippet>&gt;&gt;&gt; OrderedDict(("field%d"%i,v) for i,v in enumerate(fields) if not math.isnan(v))
OrderedDict([('field1', 2), ('field2', 3), ('field4', 5)])
</snippet></ROW><ROW><id>17203525</id><snippet>gevent</snippet></ROW><ROW><id>17203525</id><snippet>futures</snippet></ROW><ROW><id>17203525</id><snippet>futures</snippet></ROW><ROW><id>17203525</id><snippet>import concurrent.futures

urls = ['http://example.com/foo', 
        'http://example.com/bar']

with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    result = b''.join(executor.map(download, urls))

with open('output_file', 'wb') as f:
    f.write(result)
</snippet></ROW><ROW><id>17203525</id><snippet>download</snippet></ROW><ROW><id>17203525</id><snippet>urlopen</snippet></ROW><ROW><id>17203525</id><snippet>urllib2</snippet></ROW><ROW><id>17203525</id><snippet>urllib.request</snippet></ROW><ROW><id>17203525</id><snippet>def download(url):
    with urllib.request.urlopen(url) as f:
        return f.read()
</snippet></ROW><ROW><id>17203525</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>17203525</id><snippet>threadpool</snippet></ROW><ROW><id>17203525</id><snippet>class ThreadPool(object):
    def __init__(self, max_workers):
        self.queue = queue.Queue()
        self.workers = [threading.Thread(target=self._worker) for _ in range(max_workers)]
    def start(self):
        for worker in self.workers:
            worker.start()
    def stop(self):
        for _ in range(self.workers):
            self.queue.put(None)
        for worker in self.workers:
            worker.join()
    def submit(self, job):
        self.queue.put(job)
    def _worker(self):
        while True:
            job = self.queue.get()
            if job is None:
                break
            job()
</snippet></ROW><ROW><id>17203525</id><snippet>concurrent.futures.ThreadPoolExecutor</snippet></ROW><ROW><id>17203525</id><snippet>urls = ['http://example.com/foo', 
        'http://example.com/bar']
results = [list() for _ in urls]
results_lock = threading.Lock()

def download(url, i):
    with urllib.request.urlopen(url) as f:
        result = f.read()
    with results_lock:
        results[i] = url

pool = ThreadPool(max_workers=8)
pool.start()
for i, url in enumerate(urls):
    pool.submit(functools.partial(download, url, i))
pool.stop()

result = b''.join(results)

with open('output_file', 'wb') as f:
    f.write(result)
</snippet></ROW><ROW><id>17203677</id><snippet>yolk</snippet></ROW><ROW><id>17203677</id><snippet>setuptools</snippet></ROW><ROW><id>17203677</id><snippet>$ yolk -d Theano
Theano 0.6.0rc3
  scipy&gt;=0.7.2
  numpy&gt;=1.5.0
</snippet></ROW><ROW><id>17203696</id><snippet># re like: r'.*?(\w+)(?&lt;=.{30})'
m = re.match(r'.*?(\w+)(?&lt;=.{%d})' % (offset), my_string)
if m: print m.group(1)
else: print "no match"
</snippet></ROW><ROW><id>17203696</id><snippet>my_new_string = "Looking feeding dancing prancing"
offset = 16
m = re.match(r'.*(\b\w+ing)(?&lt;!.{%d})' % offset, my_new_string)
if m: print m.group(1)
</snippet></ROW><ROW><id>17203696</id><snippet>(?&lt;!.{16})</snippet></ROW><ROW><id>17203756</id><snippet>extra = "Assignments", 
</snippet></ROW><ROW><id>17203756</id><snippet>extra = ("Assignments",)
</snippet></ROW><ROW><id>17203872</id><snippet>fetchall()</snippet></ROW><ROW><id>17203872</id><snippet>cursor.fetchmany</snippet></ROW><ROW><id>17203872</id><snippet>brk()</snippet></ROW><ROW><id>17203966</id><snippet>def my_func():
   x = int(raw_input('Enter an integer:   '))

   ## start guessing with 0 
   ans = 0

   while ans*ans*ans &lt; abs(x):
       ans = ans + 1
       print 'current guess =', ans

   print 'last guess = ', ans
   print 'ans*ans*ans = ', ans*ans*ans


   ##if its a perfect cube

   if ans*ans*ans == abs(x):
   ## perfect, but negative
       if x&lt;0:
             ans = -ans
       print 'Cube root of ' + str(x)+ ' is ' + str(ans)

   ## If its not a cube at all    
   else:
       print x, 'is not a perfect cube'



   ## Now to start a new calculation
   again = raw_input('Find another perfect cube? (Y/N)')

   if again == "N":
       quit
   if again == "Y":
       my_func()

if __name__ == '__main__':
    my_func()
</snippet></ROW><ROW><id>17203988</id><snippet>get_text()</snippet></ROW><ROW><id>17203988</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("""&lt;pre&gt;zdfsfsf&lt;br/&gt;adfadfadf
... adfadfasdfadfad  adfadf adf 
... Mill Valley, CA 94941
... 122-2323-24124
... Email: adfadfadf&lt;br/&gt;&lt;i&gt;sfsfsfsf&lt;/i&gt;&lt;/pre&gt;
... &lt;br/&gt;""")
&gt;&gt;&gt; print(soup.get_text())
zdfsfsfadfadfadf
adfadfasdfadfad  adfadf adf 
Mill Valley, CA 94941
122-2323-24124
Email: adfadfadfsfsfsfsf
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17204058</id><snippet>from django.forms.widgets import CheckboxSelectMultiple

class PersonAdmin(admin.ModelAdmin):
    inlines = [MessageInLine]
    formfield_overrides = {
        models.ManyToManyField: {'widget': CheckboxSelectMultiple},
    }
</snippet></ROW><ROW><id>17204440</id><snippet>psycopg</snippet></ROW><ROW><id>17204440</id><snippet>open()</snippet></ROW><ROW><id>17204440</id><snippet>read()</snippet></ROW><ROW><id>17204440</id><snippet>write()</snippet></ROW><ROW><id>17204440</id><snippet>close()</snippet></ROW><ROW><id>17204440</id><snippet>tempfile</snippet></ROW><ROW><id>17204440</id><snippet>StringIO</snippet></ROW><ROW><id>17204457</id><snippet>-Grankdir=LR</snippet></ROW><ROW><id>17204457</id><snippet>pos = nx.graphviz_layout(G, prog='dot', args="-Grankdir=LR")
</snippet></ROW><ROW><id>17204677</id><snippet>.*</snippet></ROW><ROW><id>17204677</id><snippet>.*?</snippet></ROW><ROW><id>17204677</id><snippet>'&lt;div class="product"&gt;&lt;div class="productImage"&gt;&lt;a href="../SearchTools/item-details.asp?EdpNo=4903661&amp;Sku=T71-156409" class="itemImage" title="Lenovo Z580 15.6" Core i7 500GB HDD Notebook PC"&gt;&lt;img src="http://images.highspeedbackbone.net/skuimages/medium/T71-156409_chiclet01xx_er.jpg" alt="It features a powerful 3rd generation Intel Core i7-3520M and a 4GB DDR3 RAM which deliver you a powerful computing performance." onerror="this.src=\'http://images.highspeedbackbone.net/SearchTools/no_image-sm.jpg\'" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="productInfo"&gt;&lt;h3 class="itemName"&gt;&lt;a href="../SearchTools/item-details.asp?EdpNo=4903661&amp;Sku=T71-156409" title="Lenovo Z580 15.6" Core i7 500GB HDD Notebook PC"&gt;Lenovo Z580 15.6" Core i7 500GB HDD Notebook PC&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;'
</snippet></ROW><ROW><id>17204677</id><snippet>.*</snippet></ROW><ROW><id>17204677</id><snippet>&gt;&gt;&gt; response=urllib2.urlopen('http://www.tigerdirect.com/applications/Category/guidedSearch.asp?CatId=17&amp;cm_sp=Masthead-_-Computers-_-Spot%2002')
&gt;&gt;&gt; stuff=response.read()
&gt;&gt;&gt; laptops= re.findall(r'&lt;div class="product"&gt;.*?&lt;/div&gt;',stuff)
&gt;&gt;&gt; len(laptops)
16
</snippet></ROW><ROW><id>17204680</id><snippet>#!/usr/bin/python 

# Import modules for CGI handling 
import cgi, cgitb 
import urllib2 
import json

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

#download data from request parameter 'url' 
print "Content-type:text/javascript\r\n\r\n" 
url = form.getvalue("url") 
callback = form.getvalue("callback")
req = urllib2.Request(url) 
response = urllib2.urlopen(req) 
try:
    data = response.read() 
    print callback + "(" + json.dumps(data)+ ")"
finally:
    response.close()
</snippet></ROW><ROW><id>17204680</id><snippet>callback=?</snippet></ROW><ROW><id>17204680</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            var jsonp_url = "cgi-bin/getData.py";
            var url = "http://api.education.com/service/service.php?f=schoolSearch&amp;key=mykey&amp;sn=sf&amp;v=4&amp;city=Atlanta&amp;state=ga&amp;Resf=json";
            $.getJSON(jsonp_url + '?callback=?', {
                url: url
            }, function(data) {
                console.log(data);
                $('body').text(data);
            });
        &lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
    &lt;/body&gt;
&lt;html&gt;
</snippet></ROW><ROW><id>17204710</id><snippet>from django.contrib import admin
from django.db import models
class MyModelAdmin(admin.ModelAdmin):

    def queryset(self, request):
        qs = super(MyModelAdmin, self).queryset(request)
        if request.user.is_superuser:
            return qs.filter(date__year="2013")     
        else:
            return qs


class MyModel(models.Model):
    date = models.DateField()

admin.site.register(MyModel, ModelAdmin)
</snippet></ROW><ROW><id>17204924</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>17204924</id><snippet>DateField</snippet></ROW><ROW><id>17204924</id><snippet>from django.db import models

class MyModel(models.Model):
    date = models.DateField(auto_now_add=True)
</snippet></ROW><ROW><id>17204928</id><snippet>s</snippet></ROW><ROW><id>17204928</id><snippet>{!info!}</snippet></ROW><ROW><id>17204928</id><snippet>{!input!}</snippet></ROW><ROW><id>17204928</id><snippet>parse_color_string</snippet></ROW><ROW><id>17205330</id><snippet>    df['tvalue'] = df.index
    df['delta'] = (df['tvalue']-df['tvalue'].shift()).fillna(0)
    df[(df.IP == '61.245.172.48')][['delta']]
</snippet></ROW><ROW><id>17205354</id><snippet>.split</snippet></ROW><ROW><id>17205354</id><snippet>re.split(r'[\s;]+', text)
</snippet></ROW><ROW><id>17205502</id><snippet>&gt;&gt;&gt; s2 = "I am testing"
&gt;&gt;&gt; for word in s2.split():
        print word


I
am
testing
</snippet></ROW><ROW><id>17205759</id><snippet>interval</snippet></ROW><ROW><id>17205759</id><snippet>In [1]: from scipy.stats import t
In [2]: t.interval(0.95, 10, loc=1, scale=2)  # 95% confidence interval
Out[2]: (-3.4562777039298762, 5.4562777039298762)
In [3]: t.interval(0.99, 10, loc=1, scale=2)  # 99% confidence interval
Out[3]: (-5.338545334351676, 7.338545334351676)
</snippet></ROW><ROW><id>17205759</id><snippet>Mathematica</snippet></ROW><ROW><id>17205759</id><snippet>from scipy.stats import t


def StudentTCI(loc, scale, df, alpha=0.95):
    return t.interval(alpha, df, loc, scale)

print StudentTCI(1, 2, 10)
print StudentTCI(1, 2, 10, 0.99)
</snippet></ROW><ROW><id>17205759</id><snippet>(-3.4562777039298762, 5.4562777039298762)
(-5.338545334351676, 7.338545334351676)
</snippet></ROW><ROW><id>17205831</id><snippet>repr</snippet></ROW><ROW><id>17205831</id><snippet>def py_cell_object():
    #object counter - unrelated to question
    addtototal()

    description = aw.aw_string(239)
    if description.startswith("TDT3_"):
        vars()[description] = {
            'DESCRIPTION': description,
            'X': aw.aw_int(232),
            'Y': aw.aw_int(233),
            'Z': aw.aw_int(234),
            'NUMBER': aw.aw_int (231),
            ... etc for remaining attributes
        }

        print repr(vars()[description])
</snippet></ROW><ROW><id>17205831</id><snippet>.h</snippet></ROW><ROW><id>17206133</id><snippet>getbytes</snippet></ROW><ROW><id>17206133</id><snippet>getbytes = (binascii.unhexlify(getbyte))
f = open("filetest.png", "wb")
f.write(getbytes)
f.close
</snippet></ROW><ROW><id>17206880</id><snippet>0x01234567</snippet></ROW><ROW><id>17206880</id><snippet>19088743</snippet></ROW><ROW><id>17206880</id><snippet>"0x01234567"</snippet></ROW><ROW><id>17206880</id><snippet>"19088743"</snippet></ROW><ROW><id>17206880</id><snippet>int(value, 16)</snippet></ROW><ROW><id>17206880</id><snippet>hex(value)</snippet></ROW><ROW><id>17206880</id><snippet>&gt;&gt;&gt; a = 0x01234567
&gt;&gt;&gt; b = 19088743
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; hex(b)
'0x1234567'
&gt;&gt;&gt; int('01234567', 16)
19088743
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17207158</id><snippet>self.socket = socket.socket()</snippet></ROW><ROW><id>17207180</id><snippet>if set(pla_back) &gt;= set(acceptItem):
    print 'Player has the required items'
else:
    print "Player doesn't have the required items"
</snippet></ROW><ROW><id>17207180</id><snippet>pla_back</snippet></ROW><ROW><id>17207180</id><snippet>acceptItem</snippet></ROW><ROW><id>17207180</id><snippet>acceptItem</snippet></ROW><ROW><id>17207180</id><snippet>&gt;=</snippet></ROW><ROW><id>17207180</id><snippet>s.issuperset(t)     s &gt;= t      test whether every element in t is in s
</snippet></ROW><ROW><id>17207180</id><snippet>acceptItem</snippet></ROW><ROW><id>17207180</id><snippet>pla_back</snippet></ROW><ROW><id>17207688</id><snippet>for i in range(len(tuples)):
    for x in range(len(tuples[i][1])):
        [...]
        for neighbor in neighbors:
            for i in range(len(neighbor)-1): #&lt;- HERE
            [...]
</snippet></ROW><ROW><id>17207688</id><snippet>i</snippet></ROW><ROW><id>17207922</id><snippet>Model.save()</snippet></ROW><ROW><id>17207922</id><snippet>def save(self, force_insert=False, force_update=False, using=None):
    """
    Saves the current instance. Override this in a subclass if you want to
    control the saving process.

    The 'force_insert' and 'force_update' parameters can be used to insist
    that the "save" must be an SQL insert or update (or equivalent for
    non-SQL backends), respectively. Normally, they should not be set.
    """
    if force_insert and force_update:
        raise ValueError("Cannot force both insert and updating in model saving.")
    self.save_base(using=using, force_insert=force_insert, force_update=force_update)
</snippet></ROW><ROW><id>17207922</id><snippet>using</snippet></ROW><ROW><id>17207922</id><snippet>my_model_instance.save()</snippet></ROW><ROW><id>17207922</id><snippet>save</snippet></ROW><ROW><id>17207922</id><snippet>save</snippet></ROW><ROW><id>17209119</id><snippet>from itertools import chain
result = list(chain.from_iterable(foo(x) for x in arr))
</snippet></ROW><ROW><id>17209149</id><snippet>if</snippet></ROW><ROW><id>17209149</id><snippet>for m in candidates:
    if isvalid(m):
        ... do something ...
</snippet></ROW><ROW><id>17209149</id><snippet>def valid_candidates(candidates):
    for m in candidates:
        is isvalid(m): yield m

for m in valid_candidates(candidates):
    ... do something ...
</snippet></ROW><ROW><id>17209316</id><snippet>LMax_B1</snippet></ROW><ROW><id>17209316</id><snippet>LMax_B1 - LMin_B1
</snippet></ROW><ROW><id>17209316</id><snippet>float(LMax_B1) - float(LMin_B1)
</snippet></ROW><ROW><id>17209316</id><snippet>+ - * /</snippet></ROW><ROW><id>17209316</id><snippet>sin</snippet></ROW><ROW><id>17209440</id><snippet>.sort</snippet></ROW><ROW><id>17209440</id><snippet>None</snippet></ROW><ROW><id>17209440</id><snippet>sorted</snippet></ROW><ROW><id>17209440</id><snippet>return_list = sorted((link for link in links if link.submitter_id == 62443),
                     key=lambda var: var.submitted_time)
</snippet></ROW><ROW><id>17209440</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>17209440</id><snippet>lambda</snippet></ROW><ROW><id>17209440</id><snippet>from operator import attrgetter
return_list = sorted((link for link in links if link.submitter_id == 62443),
                     key=attrgetter('submitted_time'))
</snippet></ROW><ROW><id>17209612</id><snippet>package main

import "fmt"
import "os"
import "time"

func main(){
    now := time.Now()
    input,_ := os.Open("testing/test_cases.txt")
    defer input.Close()
    output,_ := os.Create("testing/Goutput.txt")
    defer output.Close()

    var ncases int
    var p float64
    fmt.Fscanf(input,"%d",&amp;ncases)

    fmt.Println("Opened files in ", time.Since(now), "seconds")
    now = time.Now()

    cases := make([]float64, ncases)
    fmt.Println("Made array in ", time.Since(now), "seconds")
    now = time.Now()

    for i := 0; i &lt; ncases; i++ {
        fmt.Fscanf(input,"%f",&amp;cases[i])
    }

    fmt.Println("Read data in ", time.Since(now), "seconds")
    now = time.Now()

    for i := 0; i &lt; ncases; i++ {
        p = cases[i]
        if p &gt;= 0.5 {
            cases[i] = 10000 * (1-p) * (2*p-1) + 10000
        } else {
            cases[i] = p*(1-2*p)*10000 + 10000
        }
    }

    fmt.Println("Processed data in ", time.Since(now), "seconds")
    now = time.Now()

    for i := 0; i &lt; ncases; i++ {
        fmt.Fprintln(output, cases[i])
    }

    fmt.Println("Output processed data in ", time.Since(now), "seconds")
}
</snippet></ROW><ROW><id>17209612</id><snippet>fmt</snippet></ROW><ROW><id>17209612</id><snippet>input</snippet></ROW><ROW><id>17209612</id><snippet>output</snippet></ROW><ROW><id>17209612</id><snippet>bufio</snippet></ROW><ROW><id>17209612</id><snippet>binput := bufio.NewReader(input)
boutput := bufio.NewWriter(output)
</snippet></ROW><ROW><id>17209612</id><snippet>binput</snippet></ROW><ROW><id>17209612</id><snippet>boutput</snippet></ROW><ROW><id>17209612</id><snippet>\n</snippet></ROW><ROW><id>17209612</id><snippet>Flush()</snippet></ROW><ROW><id>17209612</id><snippet>package main

import "fmt"
import "os"
import "bufio"
import "time"

func main(){
    now := time.Now()

    nbinput, _ := os.Open("testing/test_cases.txt")
    defer nbinput.Close()

    nboutput, _ := os.Create("testing/Goutput.txt")
    defer nboutput.Close()

    binput := bufio.NewReader(nbinput)
    boutput := bufio.NewWriter(nboutput)

    var ncases int
    var gain, p float64
    fmt.Fscanf(binput,"%d\n",&amp;ncases)

    for i := 0; i &lt; ncases; i++ {
        fmt.Fscanf(binput, "%f\n", &amp;p)
        if p &gt;= 0.5 {
            gain = 10000 * (1-p) * (2*p -1)
        } else {
            gain = p*(1-2*p)*10000
        }
        fmt.Fprintln(boutput, gain+10000)
    }
    boutput.Flush()
    fmt.Println("Took ", time.Since(now), "seconds")
}
</snippet></ROW><ROW><id>17209836</id><snippet>matplotlib.ticker.LogFormatterExponent</snippet></ROW><ROW><id>17209836</id><snippet>matplotlib.ticker.LogFormatter</snippet></ROW><ROW><id>17209836</id><snippet>base^exp</snippet></ROW><ROW><id>17209836</id><snippet>matplotlib.ticker.LogFormatter*</snippet></ROW><ROW><id>17209836</id><snippet>labelOnlyBase=False</snippet></ROW><ROW><id>17209836</id><snippet>matplotlib.ticker.FuncFormatter</snippet></ROW><ROW><id>17209836</id><snippet>from matplotlib import ticker
import numpy as np

def ticks_format(value, index):
    """
    get the value and returns the value as:
       integer: [0,99]
       1 digit float: [0.1, 0.99]
       n*10^m: otherwise
    To have all the number of the same size they are all returned as latex strings
    """
    exp = np.floor(np.log10(value))
    base = value/10**exp
    if exp == 0 or exp == 1:   
        return '${0:d}$'.format(int(value))
    if exp == -1:
        return '${0:.1f}$'.format(value)
    else:
        return '${0:d}\\times10^{{{1:d}}}$'.format(int(base), int(exp))

subs = [1.0, 2.0, 3.0, 6.0]  # ticks to show per decade
ax.xaxis.set_minor_locator(ticker.LogLocator(subs=subs)) #set the ticks position
ax.xaxis.set_major_formatter(ticker.NullFormatter())   # remove the major ticks
ax.xaxis.set_minor_formatter(ticker.FuncFormatter(ticks_format))  #add the custom ticks
#same for ax.yaxis
</snippet></ROW><ROW><id>17209836</id><snippet>subs = [2.0, 3.0, 6.0]</snippet></ROW><ROW><id>17209836</id><snippet>text.usetex:False</snippet></ROW><ROW><id>17209836</id><snippet>matplotlibrc</snippet></ROW><ROW><id>17209930</id><snippet>In [11]: p = pivot_table(df, values=["x","y"], cols=["month"], 
                             rows="name", aggfunc=np.sum)

In [12]: p
Out[12]:
        x           y
month   1   2   3   1   2   3
name
a       1 NaN   7   2 NaN   8
b       3 NaN   9   4 NaN  10
c     NaN   5 NaN NaN   6 NaN
</snippet></ROW><ROW><id>17209930</id><snippet>In [13]: p.reorder_levels([1, 0], axis=1).sort_index(axis=1)
Out[13]:
month   1       2       3
        x   y   x   y   x   y
name
a       1   2 NaN NaN   7   8
b       3   4 NaN NaN   9  10
c     NaN NaN   5   6 NaN NaN
</snippet></ROW><ROW><id>17210030</id><snippet>fig,ax = subplots(1,1)
ax.hold(True)
colors = ['r','g','b']
labels = ['foo','bar','baz']
[ax.plot(None,None,ls='-',c=c,label=l) for c,l in zip(colors,labels)]
ax.legend(labels)
</snippet></ROW><ROW><id>17210073</id><snippet>input()</snippet></ROW><ROW><id>17210073</id><snippet>eval()</snippet></ROW><ROW><id>17210073</id><snippet>eval()</snippet></ROW><ROW><id>17210073</id><snippet>input()</snippet></ROW><ROW><id>17210073</id><snippet>raw_input()</snippet></ROW><ROW><id>17210073</id><snippet>input()</snippet></ROW><ROW><id>17210073</id><snippet>eval()</snippet></ROW><ROW><id>17210073</id><snippet>int()</snippet></ROW><ROW><id>17210073</id><snippet># Prompt the user to enter three numbers
number1 = int(raw_input("Enter the first number: "))
number2 = int(raw_input("Enter the second number: "))
number3 = int(raw_input("Enter the third number: "))

# Compute average
average = (number1 + number2 + number3) / 3

print "The average of", number1, number2, number3, "is", average
</snippet></ROW><ROW><id>17210073</id><snippet># Prompt the user to enter three numbers
number1 = int(input("Enter the first number: "))
number2 = int(input("Enter the second number: "))
number3 = int(input("Enter the third number: "))

# Compute average
average = (number1 + number2 + number3) / 3

print("The average of", number1, number2, number3, "is", average)
</snippet></ROW><ROW><id>17210441</id><snippet>time</snippet></ROW><ROW><id>17210441</id><snippet>%f</snippet></ROW><ROW><id>17210441</id><snippet>time.struct_time</snippet></ROW><ROW><id>17210441</id><snippet>datetime</snippet></ROW><ROW><id>17210441</id><snippet>import datetime

datetime.datetime.utcfromtimestamp(60.5).strftime('%H:%M:%S.%f')
</snippet></ROW><ROW><id>17210441</id><snippet>&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(60.5).strftime('%H:%M:%S.%f')
'00:01:00.500000'
</snippet></ROW><ROW><id>17210457</id><snippet>Counter</snippet></ROW><ROW><id>17210457</id><snippet>from collections import Counter

with open('file1', 'r') as f1, open('file2', 'r') as f2, open('newfile', 'w') as output:
    f1_lines = [line.rstrip().lower() for line in f1.readlines()]
    f2_lines = [line.rstrip().lower() for line in f2.readlines()]
    diff = Counter(f2_lines) - Counter(f1_lines)
    for msg, n in diff.iteritems():
        output.writelines((msg + '\n') * n)
</snippet></ROW><ROW><id>17210693</id><snippet>unconfined_u:object_r:httpd_sys_content_t:
</snippet></ROW><ROW><id>17210693</id><snippet>unconfined_u:object_r:user_home_t
</snippet></ROW><ROW><id>17210712</id><snippet>'product.views.product'</snippet></ROW><ROW><id>17211108</id><snippet># collect, the constants to a dictionary,
# with the proper key names
d = dict(a=1, b=2, c=3)

# create functions, where you want to use the constants
# and use the same key-names as in dictionary, and also
# add '**kwargs' at the end of the attribute list
def func1(a, b, d=4, **kwargs):
    print a, b, d

def func2(c, f=5, **kwargs):
    print c, f

# now any time, you use the original dictionary
# as an argument for one of these functions, this
# will let the function select only those keywords
# that are used later
func1(**d)
# 1 2 4
func2(**d)
# 3 5
</snippet></ROW><ROW><id>17211108</id><snippet>configuration.py</snippet></ROW><ROW><id>17211108</id><snippet># Your parsing, reading and storing functions goes here..

# Now create your dictionary
constants = dict(
    host  = DB_HOST,
    pnum  = DB_PORT_NUMBER,
    num   = DB_NUMBER,
    serv  = IN_SERVICE,
    data  = IN_DATA
)
</snippet></ROW><ROW><id>17211108</id><snippet>other_file.py</snippet></ROW><ROW><id>17211108</id><snippet>import configuration as cf

def main(host, pnum, num, serv, data, **kwargs):
    intermediate_function(
        host, pnum, num, 'other', 'params', 'here'
    )

def intermediate_function(host, pnum, num, *args):
    pass

# Now, you can call this function, with your
# dictionary as keyword arguments
if __name__ == '__main__':
    main(**cf.constants)
</snippet></ROW><ROW><id>17211108</id><snippet>.cfg</snippet></ROW><ROW><id>17211108</id><snippet>conf.json</snippet></ROW><ROW><id>17211108</id><snippet>{
    "host"  : "DB_HOST",
    "pnum"  : "DB_PORT_NUMBER",
    "num"   : "DB_NUMBER",
    "serv"  : "IN_SERVICE",
    "data"  : "IN_DATA"
}
</snippet></ROW><ROW><id>17211108</id><snippet>configuration.py</snippet></ROW><ROW><id>17211108</id><snippet>import json

with open('conf.json') as conf:
    # JSON parser will convert it to dictionary
    constants = json.load(conf)
</snippet></ROW><ROW><id>17211123</id><snippet>sys.path</snippet></ROW><ROW><id>17211123</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17211123</id><snippet>pop</snippet></ROW><ROW><id>17211123</id><snippet>somedir</snippet></ROW><ROW><id>17211123</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17211150</id><snippet>requirement.txt</snippet></ROW><ROW><id>17211150</id><snippet>Django==1.4
</snippet></ROW><ROW><id>17211150</id><snippet>pip install -U django-rosetta -r requirement.txt
</snippet></ROW><ROW><id>17211208</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>17211208</id><snippet>from timeit import default_timer

start = default_timer()

# do stuff

duration = default_timer() - start
</snippet></ROW><ROW><id>17211208</id><snippet>&gt;&gt;&gt; from timeit import default_timer
&gt;&gt;&gt; start = default_timer()
&gt;&gt;&gt; # Martijn reads another post somewhere
... 
&gt;&gt;&gt; print default_timer() - start
19.1996181011
</snippet></ROW><ROW><id>17211324</id><snippet>import os
import signal
import subprocess
import sys

params = [...]
for param for params:
    proc = subprocess.Popen(['/path/to/CProg', param.., param..])
    subprocess.call([sys.executable, 'B.py', param.., param...])
    os.kill(proc.pid, signal.SIGINT)
    proc.wait()
</snippet></ROW><ROW><id>17211410</id><snippet>fig, axs = plt.subplots(2,5, figsize=(15, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace = .5, wspace=.001)

axs = axs.ravel()

for i in range(10):

    axs[i].contourf(np.random.rand(10,10),5,cmap=plt.cm.Oranges)
    axs[i].set_title(str(250+i))
</snippet></ROW><ROW><id>17211537</id><snippet>0x</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; hex(os.stat("/usr").st_dev)
'0x801L'
</snippet></ROW><ROW><id>17211537</id><snippet>st_dev</snippet></ROW><ROW><id>17211537</id><snippet>glibc</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; minor = int(os.stat("/lib").st_dev &amp; 0xff)
&gt;&gt;&gt; major = int(os.stat("/lib").st_dev &gt;&gt; 8 &amp; 0xff)
&gt;&gt;&gt; major, minor
(8, 1)
</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; int(os.stat("/lib").st_dev &gt;&gt; 8 &amp; 0xff)
8
&gt;&gt;&gt; int(os.stat("/usr").st_dev &gt;&gt; 8 &amp; 0xff)
8
</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; int(os.stat("/home/*****").st_dev &gt;&gt; 8 &amp; 0xff)
0
</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; os.stat("/usr").st_dev
2049L
</snippet></ROW><ROW><id>17211537</id><snippet>Device</snippet></ROW><ROW><id>17211537</id><snippet>stat</snippet></ROW><ROW><id>17211537</id><snippet>$ stat /usr
  File: `/usr'
  Size: 4096        Blocks: 8          IO Block: 4096   directory
Device: 801h/2049d  Inode: 1308164     Links: 11
</snippet></ROW><ROW><id>17211537</id><snippet>man 2 stat</snippet></ROW><ROW><id>17211537</id><snippet>#define major(dev) ((int)(((unsigned int) (dev) &gt;&gt; 8) &amp; 0xff))
#define minor(dev) ((int)((dev) &amp; 0xff))
</snippet></ROW><ROW><id>17211537</id><snippet>&gt;&gt;&gt; hex(os.stat("/usr").st_dev)
'0x801L'
</snippet></ROW><ROW><id>17211537</id><snippet>$ pwd
/usr
$ df -h .
Filesystem                                              Size  Used Avail Use% Mounted on
/dev/disk/by-uuid/cba70a49-04a7-40a6-8a53-465f817e51cd   29G  8.6G   19G  32% /
</snippet></ROW><ROW><id>17211537</id><snippet>$ ls -al /dev/disk/by-uuid/cba70a49-04a7-40a6-8a53-465f817e51cd
0 lrwxrwxrwx 1 root root 10 May  6 16:33 /dev/disk/by-uuid/cba70a49-04a7-40a6-8a53-465f817e51cd -&gt; ../../sda1
</snippet></ROW><ROW><id>17211537</id><snippet>sd</snippet></ROW><ROW><id>17211537</id><snippet>a1</snippet></ROW><ROW><id>17211550</id><snippet>input</snippet></ROW><ROW><id>17211550</id><snippet>raw_input</snippet></ROW><ROW><id>17211550</id><snippet>Python 3.x</snippet></ROW><ROW><id>17211550</id><snippet>Python 2.x</snippet></ROW><ROW><id>17211550</id><snippet>import sys
if sys.hexversion &lt; 0x3000000:
    input = raw_input
</snippet></ROW><ROW><id>17211565</id><snippet>&gt;&gt;&gt; strs = "This is 123 and that is ABC."
&gt;&gt;&gt; match = re.search(r'.*?(\d+)',strs)
&gt;&gt;&gt; rep = match.group(0)
&gt;&gt;&gt; num = match.group(1)
&gt;&gt;&gt; "{}: {}".format(num, re.sub(rep,'That was XYZ',strs))
'123: That was XYZ and that is ABC.'

&gt;&gt;&gt; strs = 'This is 456 and that is OPQ.'
&gt;&gt;&gt; match = re.search(r'.*?(\d+)',strs)
&gt;&gt;&gt; rep = match.group(0)
&gt;&gt;&gt; num = match.group(1)
&gt;&gt;&gt; "{}: {}".format(num, re.sub(rep,'That was XYZ',strs))
'456: That was XYZ and that is OPQ.'
</snippet></ROW><ROW><id>17211698</id><snippet>import warnings
warnings.filterwarnings('error')
</snippet></ROW><ROW><id>17211698</id><snippet>warnings.filterwarnings('error', category=UnicodeWarning)
warnings.filterwarnings('error', message='*equal comparison failed*')
</snippet></ROW><ROW><id>17211721</id><snippet>import hashlib
hash = hashlib.md5()
t = (1, 2, 3, 4, 5) # whatever
t_as_string = str(t)
hash.update(t_as_string)
print hash.hexdigest()
</snippet></ROW><ROW><id>17211738</id><snippet>timesince</snippet></ROW><ROW><id>17211738</id><snippet>.date()</snippet></ROW><ROW><id>17211738</id><snippet>fmt = "%Y-%m-%dT%H:%M:%S.%f"
date_only = datetime.strptime("2013-06-20T11:20:05.499274", fmt).date()
</snippet></ROW><ROW><id>17211798</id><snippet>any</snippet></ROW><ROW><id>17211798</id><snippet>&gt;&gt;&gt; lis = ['192.168.1.3', '0080.4522.ad08', '2013/05/02 19:10:10', 'automatic']
if any(item[0] == lis[0] or item[1] == lis[1]  for item in aList)
    #then don't add
else:
    #add
</snippet></ROW><ROW><id>17211848</id><snippet>nircmdc</snippet></ROW><ROW><id>17212026</id><snippet>QmlApplicationViewer viewer;
viewer.setOrientation(QmlApplicationViewer::ScreenOrientationAuto);
viewer.setMainQmlFile(QLatin1String("qml/main.qml"));
viewer.showExpanded();

//changing cursor
viewer.setCursor(QPixmap(":/peach.png").scaledToWidth(20));
</snippet></ROW><ROW><id>17212026</id><snippet>#include "cursorshapearea.h"
qmlRegisterType&lt;QsltCursorShapeArea&gt;("Cursor", 1, 0, "CursorShapeArea");
</snippet></ROW><ROW><id>17212026</id><snippet>#include "cursorshapearea.h"

QsltCursorShapeArea::QsltCursorShapeArea(QDeclarativeItem *parent) :
  QDeclarativeItem(parent),
  m_currentShape(-1)
{
}

Qt::CursorShape QsltCursorShapeArea::cursorShape() const
{
  return cursor().shape();
}

void QsltCursorShapeArea::setCursorShape(Qt::CursorShape cursorShape)
{
  if (m_currentShape == (int) cursorShape)
    return;

  setCursor(cursorShape);
  emit cursorShapeChanged();

  m_currentShape = cursorShape;
}
</snippet></ROW><ROW><id>17212026</id><snippet>#ifndef CURSORSHAPEAREA_H
#define CURSORSHAPEAREA_H

#include &lt;QDeclarativeItem&gt;

class QsltCursorShapeArea : public QDeclarativeItem
{
  Q_OBJECT

  Q_PROPERTY(Qt::CursorShape cursorShape READ cursorShape WRITE setCursorShape NOTIFY cursorShapeChanged)

public:

  explicit QsltCursorShapeArea(QDeclarativeItem *parent = 0);

  Qt::CursorShape cursorShape() const;
  Q_INVOKABLE void setCursorShape(Qt::CursorShape cursorShape);

private:
  int m_currentShape;

signals:
  void cursorShapeChanged();
};

#endif // CURSORSHAPEAREA_H
</snippet></ROW><ROW><id>17212026</id><snippet>import Cursor 1.0
</snippet></ROW><ROW><id>17212026</id><snippet>CursorShapeArea {
    anchors.fill: parent
    anchors.margins: 50
    cursorShape: Qt.OpenHandCursor
  }
</snippet></ROW><ROW><id>17212571</id><snippet>from PyQt4.QtCore import *

app = QCoreApplication([])

class Signals(QObject):
    signal = pyqtSignal()
    def __init__(self):
        QObject.__init__(self)

class Test():
    def __init__(self, s):
        s.connect(self.done)

    def done(self):
        print("Done")


s = Signals()
t = Test(s.signal)
print("first")
s.signal.emit()
app.processEvents()

t = None
print("second")
s.signal.emit()
app.processEvents()
</snippet></ROW><ROW><id>17212571</id><snippet>first
Done
second
</snippet></ROW><ROW><id>17212571</id><snippet>s.connect(lambda: self.done())
</snippet></ROW><ROW><id>17212571</id><snippet>self</snippet></ROW><ROW><id>17212746</id><snippet>import boto

s3 = boto.connect_s3()
bucket = s3.lookup('example-bucket')
for key in bucket.list(prefix='photos/2006/', delimiter='/'):
    print k.name
</snippet></ROW><ROW><id>17212767</id><snippet>for</snippet></ROW><ROW><id>17212767</id><snippet>line[999]</snippet></ROW><ROW><id>17212767</id><snippet>0th</snippet></ROW><ROW><id>17212767</id><snippet>reader[0]</snippet></ROW><ROW><id>17213059</id><snippet>pip install whoosh
</snippet></ROW><ROW><id>17213279</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt;  strs = """1,000 metric tonnes per contract month
Five cents ($0.05) per tonne
Five cents ($0.05) per tonne
1,000 metric tonnes per contract month"""
&gt;&gt;&gt; [m.group(0) for m in re.finditer(r'\$?\d+([,.]\d+)?', strs)]
['1,000', '$0.05', '$0.05', '1,000']
</snippet></ROW><ROW><id>17213481</id><snippet>print</snippet></ROW><ROW><id>17213481</id><snippet>for line in fileinput.input(os.path.join(app, 'Contents', 'Info.plist'), inplace=True):
    line = re.sub(r'(&lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;)', '&lt;key&gt;LSUIElement&lt;/key&gt;&lt;string&gt;1&lt;/string&gt;\g&lt;1&gt;', line.strip(), flags=re.IGNORECASE)

print line.strip()
</snippet></ROW><ROW><id>17213481</id><snippet>for line in fileinput.input(os.path.join(app, 'Contents', 'Info.plist'), inplace=True):
    line = re.sub(r'(&lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;)', '&lt;key&gt;LSUIElement&lt;/key&gt;&lt;string&gt;1&lt;/string&gt;\g&lt;1&gt;', line.strip(), flags=re.IGNORECASE)

    print line.strip()
</snippet></ROW><ROW><id>17213606</id><snippet>my $x = "foo";
my $y = 0;

$x == $y; # true, but warning
$x eq $y; # false
</snippet></ROW><ROW><id>17213606</id><snippet>my $x = "1.0";
my $y = 1;

$x == $y; # true
$x eq $y; # false
</snippet></ROW><ROW><id>17213738</id><snippet>virtualenv venv
</snippet></ROW><ROW><id>17213738</id><snippet>python</snippet></ROW><ROW><id>17213738</id><snippet>pip</snippet></ROW><ROW><id>17213738</id><snippet>. venv/bin/activate
</snippet></ROW><ROW><id>17213738</id><snippet>source venv/bin/activate
</snippet></ROW><ROW><id>17213738</id><snippet>pip</snippet></ROW><ROW><id>17213738</id><snippet>python</snippet></ROW><ROW><id>17213738</id><snippet>python</snippet></ROW><ROW><id>17213738</id><snippet>(venv)[username@host]$
</snippet></ROW><ROW><id>17213738</id><snippet>pip install packagename
</snippet></ROW><ROW><id>17213738</id><snippet>pip</snippet></ROW><ROW><id>17213738</id><snippet>requirements.txt</snippet></ROW><ROW><id>17213738</id><snippet>requirements.txt</snippet></ROW><ROW><id>17213738</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>17213738</id><snippet>python programName
</snippet></ROW><ROW><id>17213738</id><snippet>gunicorn</snippet></ROW><ROW><id>17213738</id><snippet>python</snippet></ROW><ROW><id>17213738</id><snippet>deactivate
</snippet></ROW><ROW><id>17213744</id><snippet>libguestfs</snippet></ROW><ROW><id>17213744</id><snippet>libguestfs0</snippet></ROW><ROW><id>17213744</id><snippet>/usr/bin/guestfish</snippet></ROW><ROW><id>17213744</id><snippet>guestfish</snippet></ROW><ROW><id>17213744</id><snippet>python-libguestfs</snippet></ROW><ROW><id>17213744</id><snippet>python-guestfs</snippet></ROW><ROW><id>17213814</id><snippet>data = open('hugedataset.txt').read()  # Assuming it fits in memory
present=[]  # As @svk points out, you could make this a set

with open('list.txt', 'r') as f:
    list1 = [line.strip() for line in f]

print list1  

for title in list1:
   if title in data:
      print title
      present.append(title)

set=set(present)   
print set
</snippet></ROW><ROW><id>17213938</id><snippet>subprocess.call()</snippet></ROW><ROW><id>17213938</id><snippet>subprocess.call(["/usr/bin/7z", "x", f.name])
</snippet></ROW><ROW><id>17213938</id><snippet>shlex.split()</snippet></ROW><ROW><id>17213938</id><snippet>subprocess</snippet></ROW><ROW><id>17213938</id><snippet>shell=True</snippet></ROW><ROW><id>17213938</id><snippet>subprocess</snippet></ROW><ROW><id>17213951</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>17214118</id><snippet>frame = inspect.currentframe().f_back
</snippet></ROW><ROW><id>17214118</id><snippet>frame.f_locals</snippet></ROW><ROW><id>17214118</id><snippet>frame.f_globals</snippet></ROW><ROW><id>17214118</id><snippet>import inspect
def interruptWithTerminal():
    frame = inspect.currentframe().f_back
    while True:
        interruptchoice = raw_input("print what variable? (Press Enter to continue): ")
        if not interruptchoice.strip(): break
        try:
            print eval(interruptchoice, frame.f_globals, frame.f_locals)
        except:
            print "Error"
</snippet></ROW><ROW><id>17214118</id><snippet>Y</snippet></ROW><ROW><id>17214118</id><snippet>Enter</snippet></ROW><ROW><id>17214229</id><snippet>def find_zip(request):                                                                           
    c={}                                                                                         
    form = FindZip()                                                                             
    c['form'] = form                                                                             
    if request.method == 'POST':                                                                 
        form = FindZip(request.POST)                                                                                                       
        c['form'] = form                                                                         
        if form.is_valid():                                                                                      
            zip = form.data['zip']                                                               
            form = ExternalDonateForm(initial={'zip':zip})                                       
            request.session['_old_post'] = request.POST                                          
            c['form'] = form                                                                     
        response = HttpResponseRedirect('/external')                                             

        return response                                                                          

    return render_to_response(                                                                   
        'find_zip.html',                                                                         
        c,                                                                                      
        context_instance=RequestContext(request)       
</snippet></ROW><ROW><id>17214229</id><snippet>def donate_external(request):                          
    zip = None                                         
    if request.session.get('_old_post'):               
        old_post = request.session.get('_old_post')    
        zip = old_post['zip']                                            
    )         
    # rest of code ....
</snippet></ROW><ROW><id>17214872</id><snippet>next()</snippet></ROW><ROW><id>17214872</id><snippet>match = next(val for key, val in telephone_directory.items() if search_key in key)
</snippet></ROW><ROW><id>17214872</id><snippet>StopIteration</snippet></ROW><ROW><id>17214872</id><snippet># Default to `None`
match = next((val for key, val in my_dict.items() if search_key in key), None)

try:
    match = next(val for key, val in telephone_directory.items() if search_key in key)
except StopIteration:
    print("Not found")
</snippet></ROW><ROW><id>17214872</id><snippet>for</snippet></ROW><ROW><id>17214872</id><snippet>for key, val in telephone_directory.items():
    if search_key in key:
        print("Found a match! {}".format(val))
        break
else:
    print("Nothing found")
</snippet></ROW><ROW><id>17214872</id><snippet>else</snippet></ROW><ROW><id>17214872</id><snippet>for</snippet></ROW><ROW><id>17214872</id><snippet>break</snippet></ROW><ROW><id>17214872</id><snippet>matches = [val for key, val in telephone_directory.items() if search_key in key]
</snippet></ROW><ROW><id>17214872</id><snippet>next()</snippet></ROW><ROW><id>17214872</id><snippet>def find_one_match(d, search_key):
     d = iter(d.items())
     try:
         match = next(val for key, val in d if search_key in key)
     except StopIteration:
         raise ValueError('Not found')    

     if next((val for key, val in d if search_key in key), None) is not None:
         raise ValueError('More than one match')

     return match
</snippet></ROW><ROW><id>17214872</id><snippet>for</snippet></ROW><ROW><id>17214872</id><snippet>found = None
for key, val in telephone_directory.items():
    if search_key in key:
        if found is None:
            found = val
        else:
            print("Found more than one match, please be more specific")
            break
else:
    if found is None:
        print("Nothing found, please search again")
    else:
        print("Match found! {}".format(found))
</snippet></ROW><ROW><id>17214900</id><snippet>\uxxxx</snippet></ROW><ROW><id>17214900</id><snippet>json</snippet></ROW><ROW><id>17214900</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>17214900</id><snippet>json.dump(obj, yourfileobject, ensure_ascii=False)
</snippet></ROW><ROW><id>17214900</id><snippet>codecs.open()</snippet></ROW><ROW><id>17214900</id><snippet>import json
import codecs

with codecs.open('/path/to/file', 'w', encoding='utf8') as output:
    json.dump(obj, output, ensure_ascii=False)
</snippet></ROW><ROW><id>17215079</id><snippet>while True:
    do_something()
    if some_condition: break
</snippet></ROW><ROW><id>17215079</id><snippet>while not some_condition:
    do_something()
</snippet></ROW><ROW><id>17215079</id><snippet>some_condition</snippet></ROW><ROW><id>17215079</id><snippet>False</snippet></ROW><ROW><id>17215079</id><snippet>do_something()</snippet></ROW><ROW><id>17215473</id><snippet>self._conn.runQuery</snippet></ROW><ROW><id>17215473</id><snippet>Deferred</snippet></ROW><ROW><id>17215473</id><snippet>Deferred</snippet></ROW><ROW><id>17215473</id><snippet>def setId(val):
   self.id = val[0]['id']
self._d.addCallback(setId)
</snippet></ROW><ROW><id>17215496</id><snippet>item['header'] = str(row.select('div[2]/a/text()')
                     .extract()[0].encode('utf-8'))
</snippet></ROW><ROW><id>17215496</id><snippet>str(&lt;some_value&gt;.encode('utf-8'))</snippet></ROW><ROW><id>17215496</id><snippet>exceptions.UnicodeEncodeError: 'ascii' codec can't encode character u'\u201c' in position 127: ordinal not in range(128)</snippet></ROW><ROW><id>17215496</id><snippet>item['header'] = row.select('div[2]/a/text()')
                 .extract()[0].encode('utf-8')
</snippet></ROW><ROW><id>17215496</id><snippet>str()</snippet></ROW><ROW><id>17215496</id><snippet>utf-8</snippet></ROW><ROW><id>17215496</id><snippet>utf-8</snippet></ROW><ROW><id>17215533</id><snippet>bond,  bond</snippet></ROW><ROW><id>17215533</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; '{bond}, {james} {bond}'.format_map(defaultdict(str, bond='bond'))
'bond,  bond'
</snippet></ROW><ROW><id>17215533</id><snippet>bond, {james} bond</snippet></ROW><ROW><id>17215533</id><snippet>&gt;&gt;&gt; class SafeDict(dict):
...     def __missing__(self, key):
...         return '{' + key + '}'
...
&gt;&gt;&gt; '{bond}, {james} {bond}'.format_map(SafeDict(bond='bond'))
'bond, {james} bond'
</snippet></ROW><ROW><id>17215533</id><snippet>bond,  bond</snippet></ROW><ROW><id>17215533</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; import string
&gt;&gt;&gt; string.Formatter().vformat('{bond}, {james} {bond}', (), defaultdict(str, bond='bond'))
'bond,  bond'
</snippet></ROW><ROW><id>17215533</id><snippet>bond, {james} bond</snippet></ROW><ROW><id>17215533</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; import string
&gt;&gt;&gt;
&gt;&gt;&gt; class SafeDict(dict):
...     def __missing__(self, key):
...         return '{' + key + '}'
...
&gt;&gt;&gt; string.Formatter().vformat('{bond}, {james} {bond}', (), SafeDict(bond='bond'))
'bond, {james} bond'
</snippet></ROW><ROW><id>17215634</id><snippet>&gt;&gt;&gt; x[0] = "four"
</snippet></ROW><ROW><id>17215634</id><snippet>&gt;&gt;&gt; x = x + 1
</snippet></ROW><ROW><id>17215634</id><snippet>x = [1,2,3]
y = x 
x = x + [4]
</snippet></ROW><ROW><id>17215678</id><snippet>module = imp.load_source("test", "testdir/test.py")
module.assertAndTerminate = assertionFunction
</snippet></ROW><ROW><id>17215678</id><snippet>__builtin__</snippet></ROW><ROW><id>17215678</id><snippet>builtin</snippet></ROW><ROW><id>17215678</id><snippet>import __builtin__

__builtin__.assertAndTerminate = assertionFunction
</snippet></ROW><ROW><id>17215678</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.foobar = 'barbaz'
&gt;&gt;&gt; foobar
'barbaz'
</snippet></ROW><ROW><id>17215688</id><snippet>from Tkinter import *

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()
        self.createWidgets()

    def createWidgets(self):
        sv = StringVar()
        endHourEntry = Entry(self, textvariable=sv)
        sv.trace("w", lambda name, index, mode, sv=sv: 
                             entryUpdateEndHour(endHourEntry))
        endHourEntry.pack()

def entryUpdateEndHour(entry):
    text = entry.get()
    if len(text) in (2,5):
        entry.insert(END,':')
        entry.icursor(len(text)+1)
    elif len(text) not in (3,6):
        if not text[-1].isdigit():
            entry.delete(0,END)
            entry.insert(0,text[:-1])
    if len(text) &gt; 8:
        entry.delete(0,END)
        entry.insert(0,text[:8])


root = Tk() 
app = Application(master=root) 
app.mainloop()
</snippet></ROW><ROW><id>17215688</id><snippet>vcmd</snippet></ROW><ROW><id>17215844</id><snippet>In [8]: df = DataFrame(randn(10,2),columns=list('AB'))

In [9]: df
Out[9]: 
          A         B
0 -1.046978  1.561624
1 -0.264645  0.717171
2  0.112354 -2.084449
3 -1.243482 -1.183749
4  1.055667  0.532444
5 -1.295805  2.168225
6 -1.239725  0.969934
7 -0.354017  1.434943
8 -0.867560  0.810315
9  0.097698 -0.033039

In [10]: df.loc[:,'B'] &gt; 0
Out[10]: 
0     True
1     True
2    False
3    False
4     True
5     True
6     True
7     True
8     True
9    False
Name: B, dtype: bool

In [14]: x = df.loc[:,'B'] &gt; 0

Per Tom/Andy, much simpler 

In [33]: x[x].index
Out[33]: Int64Index([0, 1, 4, 5, 6, 7, 8], dtype=int64)

In [34]: x[~x].index
Out[34]: Int64Index([2, 3, 9], dtype=int64)
</snippet></ROW><ROW><id>17215933</id><snippet>include_raw</snippet></ROW><ROW><id>17216063</id><snippet>root</snippet></ROW><ROW><id>17216063</id><snippet>root</snippet></ROW><ROW><id>17216063</id><snippet>root</snippet></ROW><ROW><id>17216107</id><snippet> list1 = [x for x in list1 if not x in list2] + [x for x in list1 if x in list2]
</snippet></ROW><ROW><id>17216107</id><snippet>['sony', 'samsung', 'apple', 'toshiba', 'cant recall', 'dont know', 'no answer']
</snippet></ROW><ROW><id>17216244</id><snippet>etree.parse()</snippet></ROW><ROW><id>17216244</id><snippet>ElementTree</snippet></ROW><ROW><id>17216244</id><snippet>parse</snippet></ROW><ROW><id>17216244</id><snippet>ElementTree</snippet></ROW><ROW><id>17216244</id><snippet>returns</snippet></ROW><ROW><id>17216398</id><snippet>remove</snippet></ROW><ROW><id>17216398</id><snippet>root.remove(tag_name)
</snippet></ROW><ROW><id>17216398</id><snippet>elements = root.findall(tag_name)
for element in elements:
    root.remove(element)  
</snippet></ROW><ROW><id>17216674</id><snippet>d[(d['x']&gt;2) &amp; (d['y']&gt;7)]
</snippet></ROW><ROW><id>17216743</id><snippet>g.db.execute('insert into photos (is_favorite, galleries_id, filename) values (?, ?, ?)', [is_favorite, galleries_id, filename])
g.db.commit()
</snippet></ROW><ROW><id>17216781</id><snippet>retweets</snippet></ROW><ROW><id>17216910</id><snippet>import re
text = '''\
string1 
string2
string3
==== bump
string4
string5
string6
==== bump'''

print(re.split(r'(=== bump)', text, maxsplit=1)[-1])
</snippet></ROW><ROW><id>17216910</id><snippet>string4
string5
string6
==== bump
</snippet></ROW><ROW><id>17216958</id><snippet>[img for img in soup.findAll("img") if "width" in img.attrs]
</snippet></ROW><ROW><id>17217208</id><snippet>It requires that the user has logged in &amp; has an active session. 
They also must have a valid CSRF token.
</snippet></ROW><ROW><id>17217208</id><snippet>function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}
</snippet></ROW><ROW><id>17217208</id><snippet> $.ajaxSetup({
            crossDomain: false, // obviates need for sameOrigin test
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type)) {
                    xhr.setRequestHeader("X-CSRFToken", $.cookie('csrftoken'));
                }
            }
        });
</snippet></ROW><ROW><id>17217255</id><snippet>dict_equal()</snippet></ROW><ROW><id>17217255</id><snippet>b</snippet></ROW><ROW><id>17217255</id><snippet>PyObject_RichCompareBool</snippet></ROW><ROW><id>17217255</id><snippet>__hash__</snippet></ROW><ROW><id>17217255</id><snippet>None</snippet></ROW><ROW><id>17217530</id><snippet>list.remove</snippet></ROW><ROW><id>17217530</id><snippet>min</snippet></ROW><ROW><id>17217530</id><snippet>min</snippet></ROW><ROW><id>17217530</id><snippet>1</snippet></ROW><ROW><id>17217530</id><snippet>list.remove</snippet></ROW><ROW><id>17217642</id><snippet>&gt;&gt;&gt; wn.synsets('cars')
[Synset('car.n.01'), Synset('car.n.02'), Synset('car.n.03'),
Synset('car.n.04'), Synset('cable_car.n.01')]
</snippet></ROW><ROW><id>17217642</id><snippet>&gt;&gt;&gt; for synset in wn.synsets('cars'):
...    synset.lemmas
[Lemma('car.n.01.car'), Lemma('car.n.01.auto'),
Lemma('car.n.01.automobile'),Lemma('car.n.01.machine'),
Lemma('car.n.01.motorcar')]...
</snippet></ROW><ROW><id>17217642</id><snippet>pyenchant</snippet></ROW><ROW><id>17217642</id><snippet>&gt;&gt;&gt; # get one of the lemmas
&gt;&gt;&gt; lemma = wn.synsets('cars')[0].lemmas[0]
&gt;&gt;&gt; lemma
Lemma('car.n.01.car')
&gt;&gt;&gt; dir(lemma)
[...'antonyms', 'attributes', 'causes', 'count',
'derivationally_related_forms', 'entailments', 'frame_ids'... 'name'...]
&gt;&gt;&gt; lemma.name
'car'
</snippet></ROW><ROW><id>17217642</id><snippet>dir</snippet></ROW><ROW><id>17217830</id><snippet>^(?:(?:^|\s*[&amp;|]{2}\s*)\([^|)]+(?:\s*\|\|\s*[^|)]+)*\))*$
</snippet></ROW><ROW><id>17217830</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>17217830</id><snippet>^(?:(?:^|\s*[&amp;|]{2}\s*)\([^&amp;|)]+(?:\s*[&amp;|]{2}\s*[^&amp;|)]+)*\))*$
</snippet></ROW><ROW><id>17217830</id><snippet>+</snippet></ROW><ROW><id>17217830</id><snippet>*</snippet></ROW><ROW><id>17217897</id><snippet>def palindromes(text):
    text = text.lower()
    results = []

    for i in range(len(text)):
        for j in range(0, i):
            chunk = text[j:i + 1]

            if chunk == chunk[::-1]:
                results.append(chunk)

    return text.index(max(results, key=len)), results
</snippet></ROW><ROW><id>17217897</id><snippet>text.index()</snippet></ROW><ROW><id>17217897</id><snippet>text.rindex()</snippet></ROW><ROW><id>17217924</id><snippet>GridSearchCV</snippet></ROW><ROW><id>17218031</id><snippet>wordnet = Wordnet()
my_file = wordnet.process_file()
wordnet.line_for_loop(my_file)
</snippet></ROW><ROW><id>17218031</id><snippet>def line_for_loop(self, file):
    for line in file:
        self.my_method_1()
        self.my_method_2()
</snippet></ROW><ROW><id>17218031</id><snippet>__init__</snippet></ROW><ROW><id>17218031</id><snippet>graph</snippet></ROW><ROW><id>17218031</id><snippet>self</snippet></ROW><ROW><id>17218031</id><snippet>def __init__(self):
    self.graph = Graph()
</snippet></ROW><ROW><id>17218031</id><snippet>__init__</snippet></ROW><ROW><id>17218031</id><snippet>process_file</snippet></ROW><ROW><id>17218463</id><snippet>struct.pack()</snippet></ROW><ROW><id>17218463</id><snippet>struct.pack()</snippet></ROW><ROW><id>17218463</id><snippet>s</snippet></ROW><ROW><id>17218674</id><snippet>re.S</snippet></ROW><ROW><id>17218674</id><snippet>re.DOTALL</snippet></ROW><ROW><id>17218674</id><snippet>.</snippet></ROW><ROW><id>17218674</id><snippet>flags</snippet></ROW><ROW><id>17218674</id><snippet>re.I | re.S</snippet></ROW><ROW><id>17219154</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>17219154</id><snippet>from itertools import groupby

print " ".join([k for k, group in groupby(d['key']) if len(list(group)) == 1])
# -&gt; a b d
</snippet></ROW><ROW><id>17219582</id><snippet>class MyClass():
    ...
    @staticmethod
    def unpickle():
        with file('test_file', 'rb') as f:
            return pickle.load(f)

data = MyClass.unpickle()
</snippet></ROW><ROW><id>17219642</id><snippet>&gt;&gt;&gt; 'Velcro Back Rest \xa36.99'.decode('latin1')
u'Velcro Back Rest \xa36.99'
&gt;&gt;&gt; print 'Velcro Back Rest \xa36.99'.decode('latin1')
Velcro Back Rest £6.99
</snippet></ROW><ROW><id>17219642</id><snippet>Content-Type: text/html; charset=iso-8859-1
</snippet></ROW><ROW><id>17219642</id><snippet>iso-8859-1</snippet></ROW><ROW><id>17219642</id><snippet>latin1</snippet></ROW><ROW><id>17219642</id><snippet>iso-8859-1</snippet></ROW><ROW><id>17219642</id><snippet>\xa3</snippet></ROW><ROW><id>17219797</id><snippet>import glob
glob.glob("/path/to/directory/*/SomeDir/path/*")
</snippet></ROW><ROW><id>17219797</id><snippet>glob.glob("/path/**/SomeDir/path/*")
</snippet></ROW><ROW><id>17219800</id><snippet>==</snippet></ROW><ROW><id>17219800</id><snippet>Person("G. Bluth").could_be(Person("George Oscar Bluth"))</snippet></ROW><ROW><id>17219867</id><snippet>NaN</snippet></ROW><ROW><id>17219867</id><snippet>max</snippet></ROW><ROW><id>17219867</id><snippet> df.max(axis=1)
</snippet></ROW><ROW><id>17219867</id><snippet>NaN</snippet></ROW><ROW><id>17219867</id><snippet>df.fillna('').max(axis=1)
</snippet></ROW><ROW><id>17220089</id><snippet>authList</snippet></ROW><ROW><id>17220089</id><snippet>&gt;&gt;&gt; authList = ('jennifer', 35, 20), ('john', 20, 34), ('fred', 34, 89)
&gt;&gt;&gt; rtAuthors = ('larry', 57, 24, 'simon'), ('jeremy', 24, 15, 'john'), ('sandra', 39, 24, 'fred')
&gt;&gt;&gt; authDict = {t[0]: t[1:] for t in authList}
&gt;&gt;&gt; rtAuthList = [t + authDict[t[-1]] for t in rtAuthors if t[-1] in authDict]
&gt;&gt;&gt; print rtAuthList
[('jeremy', 24, 15, 'john', 20, 34), ('sandra', 39, 24, 'fred', 34, 89)]
</snippet></ROW><ROW><id>17220172</id><snippet>#do some stuff
print 'tasks done, now sleeping for 10 seconds'
for i in xrange(10,0,-1):
    time.sleep(1)
    print i
</snippet></ROW><ROW><id>17220172</id><snippet>import sys
for i in xrange(10,0,-1):
    time.sleep(1)
    sys.stdout.write(str(i)+' ')
    sys.stdout.flush()
</snippet></ROW><ROW><id>17220217</id><snippet>requests</snippet></ROW><ROW><id>17220389</id><snippet>try:
    from ipaddress import ip_address
except ImportError:
    from ipaddr import IPAddress as ip_address

def findIPs(start, end):
    start = ip_address(start)
    end = ip_address(end)
    result = []
    while start &lt;= end:
        result.append(str(start))
        start += 1
    return result

print(findIPs('111.111.111.0', '111.111.111.3'))
</snippet></ROW><ROW><id>17220389</id><snippet>import struct
import socket

def findIPs(start, end):
    ipstruct = struct.Struct('&gt;I')
    start, = ipstruct.unpack(socket.inet_aton(start))
    end, = ipstruct.unpack(socket.inet_aton(end))
    return [socket.inet_ntoa(ipstruct.pack(i)) for i in range(start, end+1)]

print(findIPs('111.111.111.0', '111.111.111.3'))
</snippet></ROW><ROW><id>17220436</id><snippet>in</snippet></ROW><ROW><id>17220436</id><snippet>__contains__</snippet></ROW><ROW><id>17220436</id><snippet>set</snippet></ROW><ROW><id>17220436</id><snippet>dict</snippet></ROW><ROW><id>17220436</id><snippet>frozenset</snippet></ROW><ROW><id>17220436</id><snippet>list</snippet></ROW><ROW><id>17220436</id><snippet>xrange</snippet></ROW><ROW><id>17220436</id><snippet>range</snippet></ROW><ROW><id>17220436</id><snippet>__contains__</snippet></ROW><ROW><id>17220436</id><snippet>7 in xrange(4, 1000000)</snippet></ROW><ROW><id>17220436</id><snippet>__contains__</snippet></ROW><ROW><id>17220438</id><snippet>files1</snippet></ROW><ROW><id>17220438</id><snippet>files2</snippet></ROW><ROW><id>17220438</id><snippet>name_from_hash1 =  {v:k for k, v in file1.items()}
name_from_hash2 =  {v:k for k, v in file2.items()}
</snippet></ROW><ROW><id>17220438</id><snippet>renamed = []
for h in name_from_hash1:
    if h in name_from_hash2 and name_from_hash1[h] != name_from_hash2[h]:
        renamed.append(name_from_hash2[h])
</snippet></ROW><ROW><id>17220438</id><snippet>renamed</snippet></ROW><ROW><id>17220438</id><snippet>name_from_hash2</snippet></ROW><ROW><id>17220438</id><snippet>name_from_hash</snippet></ROW><ROW><id>17220610</id><snippet>print</snippet></ROW><ROW><id>17220739</id><snippet>target</snippet></ROW><ROW><id>17220739</id><snippet>from multiprocessing import Process

def f():
    print('hello')

p = Process(target=f)
p.start()
p.join()
</snippet></ROW><ROW><id>17220739</id><snippet>from multiprocessing import Process

class P(Process):
    def __init__(self):
        super(P, self).__init__()
    def run(self):
        print('hello')

p = P()
p.start()
p.join()
</snippet></ROW><ROW><id>17220739</id><snippet>__init__()</snippet></ROW><ROW><id>17220739</id><snippet>run()</snippet></ROW><ROW><id>17221069</id><snippet>json</snippet></ROW><ROW><id>17221353</id><snippet>cwd</snippet></ROW><ROW><id>17221353</id><snippet>import os
from subprocess import check_call

check_call([scriptB], cwd=os.path.dirname(scriptB))
</snippet></ROW><ROW><id>17221439</id><snippet>setup.py develop</snippet></ROW><ROW><id>17221600</id><snippet>isKeyDown</snippet></ROW><ROW><id>17221600</id><snippet>control_pressed = False
.....
self.float_canvas.bind(wx.EVT_KEY_DOWN,OnKeyDown)
self.float_canvas.bind(wx.EVT_KEY_DOWN,OnKeyUp)
.....
def OnKeyDown(evt):
    global control_pressed
    if evt.GetKeyCode() == 117 #(or whatever the code for ctrl is)
       control_pressed = True

def OnKeyUp(evt):
    global control_pressed
    if evt.GetKeyCode() == 117 #(or whatever the code for ctrl is)
       control_pressed = False
</snippet></ROW><ROW><id>17221600</id><snippet>control_pressed</snippet></ROW><ROW><id>17221600</id><snippet>wx.EVT_LEFT_UP</snippet></ROW><ROW><id>17221642</id><snippet>urllib</snippet></ROW><ROW><id>17221642</id><snippet>member</snippet></ROW><ROW><id>17221642</id><snippet>top</snippet></ROW><ROW><id>17221642</id><snippet>year</snippet></ROW><ROW><id>17221642</id><snippet>import urllib
url = 'http://www.ssa.gov/cgi-bin/popularnames.cgi'

post_params = { # member was blank, so I'm excluding it.
    'top'  : '25',
    'year' : year
    }
post_args = urllib.urlencode(post_params)
</snippet></ROW><ROW><id>17221642</id><snippet>urllib.urlopen(url, post_args)
</snippet></ROW><ROW><id>17221642</id><snippet>headers = {
    'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language' : 'en-US,en;q=0.5',
    'Connection' : 'keep-alive',
    'Host' : 'www.ssa.gov',
    'Referer' : 'http://www.ssa.gov/cgi-bin/popularnames.cgi',
    'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0'
    }

# With POST data:
urllib.urlopen(url, post_args, headers)
</snippet></ROW><ROW><id>17221642</id><snippet>for year in xrange(1880, 2014):
    # The above code...
</snippet></ROW><ROW><id>17221825</id><snippet>server_started(listeningPortObject, port)</snippet></ROW><ROW><id>17221825</id><snippet>TypeError</snippet></ROW><ROW><id>17221825</id><snippet>server_started</snippet></ROW><ROW><id>17221825</id><snippet>self</snippet></ROW><ROW><id>17221825</id><snippet>server_failed(reason, port)</snippet></ROW><ROW><id>17221825</id><snippet>TypeError</snippet></ROW><ROW><id>17221825</id><snippet>server_failed</snippet></ROW><ROW><id>17221825</id><snippet>d</snippet></ROW><ROW><id>17221825</id><snippet>TypeError</snippet></ROW><ROW><id>17221957</id><snippet>&gt;&gt;&gt; l = [(1, 2, 3, 4, 5)]
&gt;&gt;&gt; [item for tup in l for item in tup]
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>17221989</id><snippet>def do_after(func):
    def wrapper(*args, **kwargs):
        func(*args, **kwargs)
        call_my_extra_function()
    return wrapper
</snippet></ROW><ROW><id>17221989</id><snippet>@do_after
def my_view(request):
    ...
</snippet></ROW><ROW><id>17222179</id><snippet>query</snippet></ROW><ROW><id>17222179</id><snippet>query</snippet></ROW><ROW><id>17222179</id><snippet>&gt;&gt;&gt; print '\w+(query)\w+'
\w+(query)\w+
</snippet></ROW><ROW><id>17222179</id><snippet>&gt;&gt;&gt; sequence = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; query = 'jklmnop'
&gt;&gt;&gt; '(\w+)({})(\w+)'.format(query)
'(\\w+)(jklmnop)(\\w+)'

&gt;&gt;&gt; re.search('(\w+)({})(\w+)'.format(query),sequence).group(1)
'abcdefghi'
&gt;&gt;&gt; re.search('(\w+)({})(\w+)'.format(query),sequence).group(3)
'qrstuvwxyz'
</snippet></ROW><ROW><id>17222179</id><snippet>re.split</snippet></ROW><ROW><id>17222179</id><snippet>&gt;&gt;&gt; strs = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; import re
&gt;&gt;&gt; before, after = re.split('jklmnop',strs)
&gt;&gt;&gt; before
'abcdefghi'
&gt;&gt;&gt; after
'qrstuvwxyz'
</snippet></ROW><ROW><id>17222184</id><snippet>def runFile(model, datafile, time_scale, max_PEs, tank_address_dict, PMT_dict, channel_ref):

hawc_func.runFile(model,data,4000,TankDict,PTMDict,time_scale,channel_ref)
</snippet></ROW><ROW><id>17222184</id><snippet>max_PEs = TankDict</snippet></ROW><ROW><id>17222290</id><snippet>json.dumps</snippet></ROW><ROW><id>17222290</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>17222290</id><snippet>json.dumps</snippet></ROW><ROW><id>17222290</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>17222290</id><snippet>json</snippet></ROW><ROW><id>17222290</id><snippet>json.dumps({'h':u'\xc2\xa3'},ensure_ascii=False)
&gt;&gt;&gt;u'{"h": "\xc2\xa3"}'
</snippet></ROW><ROW><id>17222290</id><snippet>json.dumps</snippet></ROW><ROW><id>17222290</id><snippet>ensure_ascii</snippet></ROW><ROW><id>17222290</id><snippet>In [7]: json.dumps({'a':u'\u00a3'},ensure_ascii=False)
Out[7]: u'{"a": "\xa3"}'

In [8]: json.dumps({'a':u'\u00a3'})
Out[8]: '{"a": "\\u00a3"}'
</snippet></ROW><ROW><id>17222398</id><snippet>cond1 = (my_array[:, 0] &gt; 4) &amp; (my_array[:, 0] &lt; 13)
cond2 = (my_array[:, 1] &gt; 3) &amp; (my_array[:, 1] &lt; 5)
cond3 = (my_array[:, 2] &gt; 6) &amp; (my_array[:, 2] &lt; 10)
</snippet></ROW><ROW><id>17222398</id><snippet>and</snippet></ROW><ROW><id>17222398</id><snippet>cond = cond1 &amp; cond2 &amp; cond3
</snippet></ROW><ROW><id>17222398</id><snippet>out = my_array[cond]
</snippet></ROW><ROW><id>17222409</id><snippet>split()</snippet></ROW><ROW><id>17222409</id><snippet>&gt;&gt;&gt; s = """I love cookies. yes I do. Let's see a dog."""
&gt;&gt;&gt; s.split()
['I', 'love', 'cookies.', 'yes', 'I', 'do.', "Let's", 'see', 'a', 'dog.']
</snippet></ROW><ROW><id>17222409</id><snippet>'</snippet></ROW><ROW><id>17222409</id><snippet>&gt;&gt;&gt; words = re.split('\W+', s)
&gt;&gt;&gt; words
['I', 'love', 'cookies', 'yes', 'I', 'do', 'Let', 's', 'see', 'a', 'dog', '']
</snippet></ROW><ROW><id>17222409</id><snippet>$ ./sp3.py 
              I           love       cookies.            yes              I
            do.          Let's            see              a           dog.
</snippet></ROW><ROW><id>17222409</id><snippet>counter==0</snippet></ROW><ROW><id>17222409</id><snippet>#!/usr/bin/env python3

s = """I love cookies. yes I do. Let's see a dog."""
words = s.split()

output = ''
for n, i in enumerate(words):
    if n % 5 == 0:
        output += '\n'
    output += "{0:&gt;15s}".format(i)
print(output)
</snippet></ROW><ROW><id>17222430</id><snippet> response = urllib2.urlopen(req1, login_data)
</snippet></ROW><ROW><id>17222558</id><snippet>img_manip[img_manip &gt; 2] = 0
result = 15000 * img_manip #This is optional, just makes it into a nicer range for my purposes
</snippet></ROW><ROW><id>17222558</id><snippet>new_img = nifti.NiftiImage(result)
</snippet></ROW><ROW><id>17222558</id><snippet>new_img = nib.NiftiImage(result)
</snippet></ROW><ROW><id>17222633</id><snippet>from subprocess import call
call(["appname", "arguments"])
</snippet></ROW><ROW><id>17222644</id><snippet>TemplateResponse.__init__(request, template, context=None, content_type=None, status=None, current_app=None)
</snippet></ROW><ROW><id>17222644</id><snippet>return TemplateResponse(request, 'topic.tpl.html', locals())
</snippet></ROW><ROW><id>17222769</id><snippet>gte</snippet></ROW><ROW><id>17222769</id><snippet>from datetime import datetime, timedelta

target_time = datetime.now() - timedelta(hours=24)
my_items = MyModel.objects.filter(obj_time__gte=target_time)
</snippet></ROW><ROW><id>17222931</id><snippet>d</snippet></ROW><ROW><id>17222931</id><snippet>a == 2</snippet></ROW><ROW><id>17222931</id><snippet>b=1
d = 0
#generates a list of numbers.
while b&lt;100:
    b=b+1
    x = 0.0
    a = 0
    #generates a list of numbers less than b. 
    while x&lt;b:
        x=x+1
        #this will check for divisors. 
        if (b/x)-int(b/x) == 0.0:
            a=a+1
    if a==2:
        #if it finds a prime it will add it.
        d=d+b
print d 
</snippet></ROW><ROW><id>17222931</id><snippet>1060
</snippet></ROW><ROW><id>17222931</id><snippet>def is_prime(b):
    x = 0.0
    a = 0
    while x&lt;b:
        x=x+1
        #this will check for divisors. 
        if (b/x)-int(b/x) == 0.0:
            a=a+1
    if a==2:
        return True
    else:
        return False

b=1
d=0
#generates a list of numbers.
while b&lt;100:
    b=b+1
    if is_prime(b):
        d=d+b
print d
</snippet></ROW><ROW><id>17222931</id><snippet>def is_prime(number):
    candidate_factor = 0
    amount_of_factors = 0
    while candidate_factor&lt;number:
        #A += B is equivalent to A = A + B
        candidate_factor += 1
        #A little easier way of testing whether one number divides another evenly
        if number % candidate_factor == 0:
            amount_of_factors += 1
    if amount_of_factors == 2:
        return True
    else:
        return False

number=1
prime_total=0
#generates a list of numbers.
while number&lt;100:
    number += 1
    if is_prime(number):
        prime_total += number
print prime_total
</snippet></ROW><ROW><id>17222931</id><snippet>for</snippet></ROW><ROW><id>17222931</id><snippet>while</snippet></ROW><ROW><id>17222931</id><snippet>def is_prime(number):
    amount_of_factors = 0
    for candidate_factor in range(1, number+1):
        if number % candidate_factor == 0:
            amount_of_factors += 1
    if amount_of_factors == 2:
        return True
    else:
        return False

prime_total=0
#generates a list of numbers.
for number in range(2, 101):
    if is_prime(number):
        prime_total += number
print prime_total
</snippet></ROW><ROW><id>17222931</id><snippet>def is_prime(number):
    factors = [candidate_factor for candidate_factor in range(1, number+1) if number % candidate_factor == 0]
    return len(factors) == 2

#generates a list of numbers.
primes = [number for number in range(2, 101) if is_prime(number)]
prime_total = sum(primes)
print prime_total
</snippet></ROW><ROW><id>17223071</id><snippet>if method == 'update':
    help_string = self.update.__doc__
</snippet></ROW><ROW><id>17223071</id><snippet>help_string = getattr(self, method).__doc__
</snippet></ROW><ROW><id>17223071</id><snippet>AttributeError</snippet></ROW><ROW><id>17223076</id><snippet>driver.find_element_by_xpath('//div[text()="%s"]' % variable)
</snippet></ROW><ROW><id>17223202</id><snippet>OnScrollEvt()</snippet></ROW><ROW><id>17223202</id><snippet>SetScrollPos()</snippet></ROW><ROW><id>17223202</id><snippet>self.canvas.SetScrollPos(wx.HORIZONTAL, event.GetPosition(), True)
</snippet></ROW><ROW><id>17223416</id><snippet>Loader.__init__()</snippet></ROW><ROW><id>17223416</id><snippet>QtCore.QTimer.singleShot(500, self.OnLoadThemes)
</snippet></ROW><ROW><id>17223416</id><snippet>Loader</snippet></ROW><ROW><id>17223416</id><snippet>def OnLoadThemes(self):
    self.load_themes()
    self.webview.setHtml(self.html_str)
</snippet></ROW><ROW><id>17223461</id><snippet>def update_xml_file(sender, instance=False, **kwargs):
    f = open('channelrss.xml', 'w')
    f.write(render_to_string('podcast/show_feed.html', {'object': instance.show}))
    f.close()
</snippet></ROW><ROW><id>17223461</id><snippet>instance.show.name_field</snippet></ROW><ROW><id>17223461</id><snippet>name_field</snippet></ROW><ROW><id>17223524</id><snippet>zip</snippet></ROW><ROW><id>17223524</id><snippet>list1=['a','b']
list2=['y','z']
for i, j in zip(list1, list2):
    print(i, j)
</snippet></ROW><ROW><id>17223524</id><snippet>('a', 'y')
('b', 'z')
</snippet></ROW><ROW><id>17223550</id><snippet>isin</snippet></ROW><ROW><id>17223550</id><snippet>pd.DataFrame({k: df.vec.isin(v) for k, v in comps.iteritems()})
</snippet></ROW><ROW><id>17223926</id><snippet>distinct()</snippet></ROW><ROW><id>17223926</id><snippet>DISTINCT ON</snippet></ROW><ROW><id>17223926</id><snippet>session.query(Tag).distinct(Tag.name).count()</snippet></ROW><ROW><id>17223926</id><snippet>Tag.name</snippet></ROW><ROW><id>17223926</id><snippet>SELECT DISTINCT tag.country_id AS tag_country_id, tag.name AS tag_name 
FROM tag
</snippet></ROW><ROW><id>17223926</id><snippet>distinct(Tag.name)</snippet></ROW><ROW><id>17223926</id><snippet>count()</snippet></ROW><ROW><id>17223926</id><snippet>session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()
</snippet></ROW><ROW><id>17224269</id><snippet>MyHandler</snippet></ROW><ROW><id>17224269</id><snippet>MyHandler</snippet></ROW><ROW><id>17224269</id><snippet>webapp2.RequestHandler</snippet></ROW><ROW><id>17224269</id><snippet>dispatch()</snippet></ROW><ROW><id>17224269</id><snippet>webapp2.RequestHandler.dispatch(self)</snippet></ROW><ROW><id>17224269</id><snippet>webapp2.RequestHandler</snippet></ROW><ROW><id>17224285</id><snippet>after</snippet></ROW><ROW><id>17224285</id><snippet>def animate(self):
    if self._image_id is None:
        self._image_id = self.display.create_image(...)
    else:
        self.itemconfig(self._image_id, image= the_new_image)
    self.display.after(self.gif["delay"], self.animate)
</snippet></ROW><ROW><id>17224317</id><snippet>functools.partial</snippet></ROW><ROW><id>17224317</id><snippet>from functools import partial

funcs = [lambda x, y: x + y] * 10 # a list of ten placeholder functions.

def z(functions, x, y):
    return sum(f(x, y) for f in functions)

a = partial(z, funcs, 1)
# 'a' is basically the same as: lambda y: z(funcs, 1, y)
print a # &lt;functools.partial object at 0x7fd0c90246d8&gt;
print a(1) # 20
print a(2) # 30
print a(3) # 40
</snippet></ROW><ROW><id>17224332</id><snippet>channel.confirm_delivery()</snippet></ROW><ROW><id>17224332</id><snippet>channel.confirm_delivery()

try:
   for index in xrange(10):
       channel.basic_publish(exchange='', routing_key='hello', 
                              body='Hello World #%s!' % index)
       print('Total Messages Sent: %s' % x)
except pika.exceptions.ConnectionClosed as exc:
    print('Error. Connection closed, and the message was never delivered.')
</snippet></ROW><ROW><id>17224332</id><snippet>basic_publish</snippet></ROW><ROW><id>17224332</id><snippet>Boolean</snippet></ROW><ROW><id>17224929</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17224929</id><snippet>dct</snippet></ROW><ROW><id>17224929</id><snippet>keys = dct.values()[0].keys()
</snippet></ROW><ROW><id>17224929</id><snippet>dct</snippet></ROW><ROW><id>17224929</id><snippet>keys = reduce(set.union, map(set, dct.values()))
</snippet></ROW><ROW><id>17224929</id><snippet>reduce</snippet></ROW><ROW><id>17224929</id><snippet>sum</snippet></ROW><ROW><id>17224929</id><snippet>keys = set()
for subdct in dct.values():
    keys |= set(subdct)
</snippet></ROW><ROW><id>17224929</id><snippet>item</snippet></ROW><ROW><id>17224929</id><snippet>item</snippet></ROW><ROW><id>17224929</id><snippet>key</snippet></ROW><ROW><id>17224929</id><snippet>dct[item][key]
</snippet></ROW><ROW><id>17224929</id><snippet>dct[item].get(key, '')
</snippet></ROW><ROW><id>17224929</id><snippet>with open('output.csv', 'wb') as f:
    w = csv.writer(f, delimiter='\t')
    for key in keys:
        w.writerow(dct[item].get(key, '') for item in lst)
</snippet></ROW><ROW><id>17224929</id><snippet>key</snippet></ROW><ROW><id>17224929</id><snippet>with open('output.csv', 'wb') as f:
    w = csv.writer(f, delimiter='\t')
    for key in keys:
        w.writerow([key], [dct[item].get(key, '') for item in lst])
</snippet></ROW><ROW><id>17224929</id><snippet>key</snippet></ROW><ROW><id>17224929</id><snippet>itertools.chain</snippet></ROW><ROW><id>17224929</id><snippet>with open('output.csv', 'wb') as f:
    w = csv.writer(f, delimiter='\t')
    for key in keys:
        w.writerow(chain([key], (dct[item].get(key, '') for item in lst)))
</snippet></ROW><ROW><id>17224929</id><snippet>with open('output.csv', 'wb') as f:
    w = csv.writer(f, delimiter='\t')
    w.writerow([''] + lst)
    for key in keys:
        w.writerow([key] + [dct[item].get(key, '') for item in lst])
</snippet></ROW><ROW><id>17224929</id><snippet>OrderedDict</snippet></ROW><ROW><id>17224929</id><snippet>list</snippet></ROW><ROW><id>17224929</id><snippet>dict</snippet></ROW><ROW><id>17224929</id><snippet>OrderedDict</snippet></ROW><ROW><id>17224929</id><snippet>od = collections.OrderedDict((item, dct[item]) for item in lst)
</snippet></ROW><ROW><id>17224929</id><snippet>with open('output.csv', 'wb') as f:
    w = csv.writer(f, delimiter='\t')
    w.writerow([''] + od.keys())
    for key in keys:
        w.writerow([key] + [subdct.get(key, '') for subdct in od.values()])
</snippet></ROW><ROW><id>17224929</id><snippet>transposed = {key_b: {key_a: dct[key_a].get(key_b, '') for key_a in dct} 
              for key_b in keys}
</snippet></ROW><ROW><id>17224929</id><snippet>DictWriter</snippet></ROW><ROW><id>17224929</id><snippet>writerows</snippet></ROW><ROW><id>17225190</id><snippet>encode_contents</snippet></ROW><ROW><id>17225190</id><snippet>renderContents</snippet></ROW><ROW><id>17225190</id><snippet>encode</snippet></ROW><ROW><id>17225190</id><snippet>prettify</snippet></ROW><ROW><id>17225190</id><snippet>formatter</snippet></ROW><ROW><id>17225190</id><snippet>'html'</snippet></ROW><ROW><id>17225190</id><snippet>html = "&lt;tag&gt; &lt;/tag&gt;"
from bs4 import BeautifulSoup
print BeautifulSoup(html).encode_contents(formatter='html')
</snippet></ROW><ROW><id>17225190</id><snippet>&lt;tag&gt; &lt;/tag&gt;
</snippet></ROW><ROW><id>17225333</id><snippet>pickle</snippet></ROW><ROW><id>17225333</id><snippet>with open(the_filename, 'wb') as f:
    pickle.dump(my_list, f)
</snippet></ROW><ROW><id>17225333</id><snippet>with open(the_filename, 'rb') as f:
    my_list = pickle.load(f)
</snippet></ROW><ROW><id>17225333</id><snippet>my_list</snippet></ROW><ROW><id>17225333</id><snippet>with open(the_filename, 'w') as f:
    for s in my_list:
        f.write(s + '\n')

with open(the_filename, 'r') as f:
    my_list = [line.rstrip('\n') for line in f]
</snippet></ROW><ROW><id>17225333</id><snippet>encode</snippet></ROW><ROW><id>17225333</id><snippet>unicode-escape</snippet></ROW><ROW><id>17225333</id><snippet>with open(the_filename, 'w') as f:
    for s in my_list:
        f.write((s + '\n').encode('unicode-escape'))

with open(the_filename, 'r') as f:
    my_list = [line.decode('unicode-escape').rstrip('\n') for line in f]
</snippet></ROW><ROW><id>17225683</id><snippet>for node in et.getroot().getchildren():
    print node.tag
</snippet></ROW><ROW><id>17225683</id><snippet>{http://opendatakit.org/submissions}image_close</snippet></ROW><ROW><id>17225683</id><snippet>image_close</snippet></ROW><ROW><id>17225683</id><snippet>namespace=http://opendatakit.org/submissions</snippet></ROW><ROW><id>17225683</id><snippet>image_close</snippet></ROW><ROW><id>17225683</id><snippet>et.find(element_name)</snippet></ROW><ROW><id>17225683</id><snippet>None</snippet></ROW><ROW><id>17225683</id><snippet>author=None</snippet></ROW><ROW><id>17225683</id><snippet>author.text</snippet></ROW><ROW><id>17225716</id><snippet>Lists = [[] for i in range(12)]
</snippet></ROW><ROW><id>17225806</id><snippet>for a,b in zip(range(10),range(10)):
    print a + b
</snippet></ROW><ROW><id>17225806</id><snippet>for a in range(10):
    for b in range(10):
        print a+b
</snippet></ROW><ROW><id>17225806</id><snippet>[a+b for a in range(10) for b in range(10)]</snippet></ROW><ROW><id>17225851</id><snippet>attr</snippet></ROW><ROW><id>17225851</id><snippet>for item in items:
    tree = item_data
    for i,attr in enumerate(item.get_attr()):
        if attr not in tree.keys():
            if i&lt;len(item.get_attr())-1:
                tree[attr] = {}
            else:
                tree[attr] = []
        else:
            tree = tree[attr]
    # do something to the tree
</snippet></ROW><ROW><id>17225863</id><snippet>__init__</snippet></ROW><ROW><id>17225863</id><snippet>from django import forms
class MyForm(forms.Form):
    some_field=forms.CharField()
    other_field=forms.CharField()

    def __init__(self, my_criteria, *args,**kwrds):
        super(MyForm,self).__init__(*args,**kwrds)
        if my_criteria == 'this':
            self.fields['some_field'].widget = forms.HiddenInput(required=False)
        elif my_criteria == 'that':
             self.fields['other_field'].widget=forms.HiddenInput(required=False)
        #else: pass - leave it the way it is.
</snippet></ROW><ROW><id>17225863</id><snippet>HiddenInput</snippet></ROW><ROW><id>17226027</id><snippet>thread pingerThread(pinger, "Message");
pingerThread.join(); 
</snippet></ROW><ROW><id>17226027</id><snippet>a.join()</snippet></ROW><ROW><id>17226027</id><snippet>pingerThread.join()</snippet></ROW><ROW><id>17226027</id><snippet>join</snippet></ROW><ROW><id>17226027</id><snippet>join</snippet></ROW><ROW><id>17226027</id><snippet>std::thread</snippet></ROW><ROW><id>17226027</id><snippet>main</snippet></ROW><ROW><id>17226027</id><snippet>time.sleep</snippet></ROW><ROW><id>17226027</id><snippet>sleep</snippet></ROW><ROW><id>17226027</id><snippet>sleep(0.1)</snippet></ROW><ROW><id>17226027</id><snippet>0.1</snippet></ROW><ROW><id>17226027</id><snippet>0</snippet></ROW><ROW><id>17226027</id><snippet>pinger.cpp:40:11: warning: implicit conversion from 'double' to 'unsigned int'
      changes value from 0.1 to 0 [-Wliteral-conversion]
    sleep(0.1);
    ~~~~~ ^~~
</snippet></ROW><ROW><id>17226027</id><snippet>sleep</snippet></ROW><ROW><id>17226027</id><snippet>nanosleep</snippet></ROW><ROW><id>17226027</id><snippet>usleep</snippet></ROW><ROW><id>17226027</id><snippet>sleep(0.1)</snippet></ROW><ROW><id>17226027</id><snippet>sleep</snippet></ROW><ROW><id>17226027</id><snippet>recvfrom</snippet></ROW><ROW><id>17226027</id><snippet>setsockopt</snippet></ROW><ROW><id>17226027</id><snippet>getsockopt</snippet></ROW><ROW><id>17226027</id><snippet>bind</snippet></ROW><ROW><id>17226027</id><snippet>optlen</snippet></ROW><ROW><id>17226027</id><snippet>sizeof(optval)</snippet></ROW><ROW><id>17226027</id><snippet>getsockopt</snippet></ROW><ROW><id>17226027</id><snippet>getsockopt</snippet></ROW><ROW><id>17226027</id><snippet>optval</snippet></ROW><ROW><id>17226027</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>17226027</id><snippet>bind</snippet></ROW><ROW><id>17226027</id><snippet>socket.sendto</snippet></ROW><ROW><id>17226027</id><snippet>sendto</snippet></ROW><ROW><id>17226027</id><snippet>length</snippet></ROW><ROW><id>17226027</id><snippet>close</snippet></ROW><ROW><id>17226057</id><snippet>class B():
    def __init__(self):
        print "B"

    def hello(self):
        import lib.A
        print "hello B"
        a = A()
</snippet></ROW><ROW><id>17226167</id><snippet>element['attribute']</snippet></ROW><ROW><id>17226167</id><snippet>from BeautifulSoup import BeautifulSoup as beatsop


def html_parser(html_data):
    html_proc = beatsop(html_data)
    #We extract the text inputs.
    txtinput = html_proc.findAll('input', {'type':'text'})
    listform = ["radio", "checkbox", "password", "file", "image", "hidden"]
    otrimput = html_proc.findAll('input', {'type': listform})

    print('Text input names:')
    for elem in txtinput:
        print(elem['name'])

    print('Non-text input values:')
    for elem in otrimput:
        value = elem.get('value')
        if value:
            print(value)
        else
            print('{} has no value'.format(elem))

with open("forms.html") as html_data:
    html_parser(html_data)
</snippet></ROW><ROW><id>17226188</id><snippet>re.findall('#([\w\s]+\w(?=#)|[\w-]+)', s)
</snippet></ROW><ROW><id>17226188</id><snippet>['text', 'dummy_short-tags', 'full length long tag']
</snippet></ROW><ROW><id>17226250</id><snippet>*</snippet></ROW><ROW><id>17226250</id><snippet>*</snippet></ROW><ROW><id>17226250</id><snippet>def foo(a, b, c=3, d=4, *args, e, f=6, **kw): pass

foo(1, 2, d=3, c=4, e=5, g=7)
</snippet></ROW><ROW><id>17226250</id><snippet>a</snippet></ROW><ROW><id>17226250</id><snippet>b</snippet></ROW><ROW><id>17226250</id><snippet>c</snippet></ROW><ROW><id>17226250</id><snippet>d</snippet></ROW><ROW><id>17226250</id><snippet>args</snippet></ROW><ROW><id>17226250</id><snippet>e</snippet></ROW><ROW><id>17226250</id><snippet>f</snippet></ROW><ROW><id>17226250</id><snippet>kw</snippet></ROW><ROW><id>17226250</id><snippet>code</snippet></ROW><ROW><id>17226250</id><snippet>1</snippet></ROW><ROW><id>17226250</id><snippet>2</snippet></ROW><ROW><id>17226250</id><snippet>3</snippet></ROW><ROW><id>17226250</id><snippet>4</snippet></ROW><ROW><id>17226250</id><snippet>5</snippet></ROW><ROW><id>17226250</id><snippet>7</snippet></ROW><ROW><id>17226250</id><snippet>d</snippet></ROW><ROW><id>17226250</id><snippet>c</snippet></ROW><ROW><id>17226250</id><snippet>e</snippet></ROW><ROW><id>17226250</id><snippet>g</snippet></ROW><ROW><id>17226250</id><snippet>foo</snippet></ROW><ROW><id>17226250</id><snippet>a, b, c, d, args, e, f, kw = 1, 2, 4, 3, (), 5, 6, {'g': 7}
</snippet></ROW><ROW><id>17226250</id><snippet>def wrapped(*args, **kwargs):
    return function_(*f_args)
</snippet></ROW><ROW><id>17226250</id><snippet>inspect</snippet></ROW><ROW><id>17226250</id><snippet>co_argcount</snippet></ROW><ROW><id>17226250</id><snippet>def wrapped(*args):
    return function_(*(args[:function_.__code__.co_argcount]))
</snippet></ROW><ROW><id>17226250</id><snippet>**kw</snippet></ROW><ROW><id>17226250</id><snippet>co_varnames</snippet></ROW><ROW><id>17226336</id><snippet>for t in comdList:
    print t
</snippet></ROW><ROW><id>17226336</id><snippet>t</snippet></ROW><ROW><id>17226336</id><snippet>((1,), (2,))</snippet></ROW><ROW><id>17226445</id><snippet>t[0] += [56, 78]
</snippet></ROW><ROW><id>17226445</id><snippet>t[0] = t[0].__iadd__([56, 78])
</snippet></ROW><ROW><id>17226445</id><snippet>t</snippet></ROW><ROW><id>17226445</id><snippet>t[0].__iadd__([56, 78])</snippet></ROW><ROW><id>17226445</id><snippet>t[0]</snippet></ROW><ROW><id>17226445</id><snippet>t[0]</snippet></ROW><ROW><id>17226445</id><snippet>t</snippet></ROW><ROW><id>17226616</id><snippet>.*</snippet></ROW><ROW><id>17226616</id><snippet>pattern0 = re.complie(r'ID: (.*?) &lt;br&gt;')
</snippet></ROW><ROW><id>17226616</id><snippet>pattern0 = re.complie(r'ID: (\d+)')
</snippet></ROW><ROW><id>17226616</id><snippet>import pickle
import re

pattern0 = re.compile('ID: (.*) &lt;br&gt;')
with open('TEMP_RSS_ITEMS.txt', 'rb') as f:
    items = pickle.load(f)        
    for item in items:
        for idnumber in pattern0.findall(item):
            print idnumber
</snippet></ROW><ROW><id>17226845</id><snippet>from decorators import has_basicauth

@has_basicauth['RestricedRealm']
def some_view(request)
...
...
</snippet></ROW><ROW><id>17226978</id><snippet>shell=True</snippet></ROW><ROW><id>17226978</id><snippet>import subprocess

cmd = 'echo $HOME'
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
print proc.communicate()[0],
</snippet></ROW><ROW><id>17226978</id><snippet>import subprocess

cmd = 'echo $HOME'
print subprocess.check_output(cmd, shell=True),
</snippet></ROW><ROW><id>17226978</id><snippet>shell=True</snippet></ROW><ROW><id>17226978</id><snippet>Popen(['/bin/sh', '-c', args[0], args[1], ...])
</snippet></ROW><ROW><id>17227068</id><snippet>max</snippet></ROW><ROW><id>17227068</id><snippet>key</snippet></ROW><ROW><id>17227068</id><snippet>A = [
    [{'x': 1, 'y': 0}, {'x': 2, 'y': 3}, {'x': 3, 'y': 4}, {'x': 4, 'y': 7}],
    [{'x': 1, 'y': 0}, {'x': 2, 'y': 2}, {'x': 3, 'y': 13}, {'x': 4, 'y': 0}],
    [{'x': 1, 'y': 20}, {'x': 2, 'y': 4}, {'x': 3, 'y': 0}, {'x': 4, 'y': 8}]
]

Z = []
for a in A:
    d = max(a, key=lambda d: d['y'])
    Z.append((d['x'], d['y']))
print Z
</snippet></ROW><ROW><id>17227068</id><snippet>from operator import itemgetter
Z = [itemgetter(*'xy')(max(lst, key=itemgetter('y'))) for lst in A]
</snippet></ROW><ROW><id>17227343</id><snippet>query_arg = ['bad_threshold__lte', 'bad_threshold__lte', 'okay_threshold_3__lte', 'tasty_threshold__lte', 'delicious_threshold__lte']

Q(**{query_arg[int(threshold) - 1]: user.profile.taste_tolerance})
</snippet></ROW><ROW><id>17227708</id><snippet>s1</snippet></ROW><ROW><id>17227708</id><snippet>s2</snippet></ROW><ROW><id>17227708</id><snippet>s1 = '\xd1\x98\xd1\x83\xd0\xbd'
s2 = u'\xd1\x98\xd1\x83\xd0\xbd'

s1 = s1.decode('unicode-escape')
</snippet></ROW><ROW><id>17227738</id><snippet>if</snippet></ROW><ROW><id>17227738</id><snippet>include</snippet></ROW><ROW><id>17227738</id><snippet>{% extends "layout.html" %}
{% load staticfiles %}
{% block references %}
    &lt;link rel="stylesheet" href="{% static "myStylesheet.css" %}" type="text/css"&gt;
    {% include "mySharedTemplate.html" with references="True" %}
{% endblock %}
...
{% include "mySharedTemplate.html" with content="True" %}
...
</snippet></ROW><ROW><id>17227738</id><snippet>{% if references %}
    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static "mySharedTemplateStylesheet.css" %}" type="text/css"&gt;
{% endif %}
{% if content %}
    ...
{% endif %}
</snippet></ROW><ROW><id>17227738</id><snippet>{% extends "layout.html" %}
{% load staticfiles %}
{% block references %}
    &lt;link rel="stylesheet" href="{% static "myStylesheet.css" %}" type="text/css"&gt;
    {% include "mySharedTemplate.html" with references="True" %}
    {% include "mySharedTemplate2.html" with references="True" %}
{% endblock %}
...
{% include "mySharedTemplate.html" with content="True" %}
{% include "mySharedTemplate2.html" with content="True" %}
...
</snippet></ROW><ROW><id>17227738</id><snippet>{% extends "layout.html" %}
{% load staticfiles %}
{% block references %}
    &lt;link rel="stylesheet" href="{% static "myStylesheet.css" %}" type="text/css"&gt;
    {% include "mySharedTemplate2.html" with references="True" %}
    {% include "mySharedTemplate3.html" with references="True" %}
    {% include "mySharedTemplate4.html" with references="True" %}
{% endblock %}
...
{% include "mySharedTemplate4.html" with content="True" %}
{% include "mySharedTemplate3.html" with content="True" %}
{% include "mySharedTemplate2.html" with content="True" %}
...
</snippet></ROW><ROW><id>17227840</id><snippet>...
for email in self.inbox.dex:
    email = email.readlines()
    ...
</snippet></ROW><ROW><id>17227840</id><snippet>data = ((email[:10], email[10:]) for email in 
        (x.readlines() for x in self.inbox.dex))
self.heads, self.bodies = zip(*data)
</snippet></ROW><ROW><id>17228123</id><snippet>player_list</snippet></ROW><ROW><id>17228123</id><snippet>all_ports</snippet></ROW><ROW><id>17228123</id><snippet>def initiate_players(num_players):
    player_list = []
    for i in range(num_players):
        player_list.append(Player("None"))
    return player_list
</snippet></ROW><ROW><id>17228123</id><snippet>def instance_ports(port_list):
    all_ports = []
    for i in port_list:
        all_ports.append(Port(i))
    return all_ports
</snippet></ROW><ROW><id>17228123</id><snippet>num = 5
port_list = [1,3,5,7]
player_list = initiate_players(num)
port_list = instance_ports(ports)
</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228416</id><snippet>outer</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228416</id><snippet>foo()</snippet></ROW><ROW><id>17228416</id><snippet>outer()</snippet></ROW><ROW><id>17228416</id><snippet>foo</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228416</id><snippet>x</snippet></ROW><ROW><id>17228416</id><snippet>x</snippet></ROW><ROW><id>17228416</id><snippet>outer</snippet></ROW><ROW><id>17228416</id><snippet>x</snippet></ROW><ROW><id>17228416</id><snippet>outer</snippet></ROW><ROW><id>17228416</id><snippet>outer</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228416</id><snippet>x</snippet></ROW><ROW><id>17228416</id><snippet>x</snippet></ROW><ROW><id>17228416</id><snippet>inner</snippet></ROW><ROW><id>17228918</id><snippet>drop_tag</snippet></ROW><ROW><id>17228918</id><snippet>import lxml.html

root = lxml.html.fromstring('&lt;div&gt;Test &lt;a rel="nofollow"&gt;Link to be &lt;b&gt;removed&lt;/b&gt;&lt;/a&gt;. &lt;a href="#"&gt;link&lt;/a&gt;')
for a in root.xpath('a[not(@href)]'):
    a.drop_tag()

assert lxml.html.tostring(root) == '&lt;div&gt;Test Link to be &lt;b&gt;removed&lt;/b&gt;. &lt;a href="#"&gt;link&lt;/a&gt;&lt;/div&gt;'
</snippet></ROW><ROW><id>17229247</id><snippet>import requests

url = 'http://www.n-gal.com/index.php?route=openstock/openstock/optionStatus'

payload = 'var=1945&amp;product_id=1126'
headers = {'content-type': 'application/x-www-form-urlencoded'}
r = requests.post(url, data=payload, headers=headers)

print r.json()
</snippet></ROW><ROW><id>17229303</id><snippet> A_object=A(q_id = q_object.id, a=a)
 A_object.save()
 P_object.c_a = A_object.id
</snippet></ROW><ROW><id>17229303</id><snippet>P_object.save()
</snippet></ROW><ROW><id>17229303</id><snippet>models.ForeignKey</snippet></ROW><ROW><id>17230027</id><snippet>exec</snippet></ROW><ROW><id>17230027</id><snippet>&gt;&gt;&gt; exec 'lis = [1,2,3]'
&gt;&gt;&gt; lis
[1, 2, 3]
</snippet></ROW><ROW><id>17230027</id><snippet>eval</snippet></ROW><ROW><id>17230027</id><snippet>2*2</snippet></ROW><ROW><id>17230027</id><snippet>4+5</snippet></ROW><ROW><id>17230027</id><snippet>eval</snippet></ROW><ROW><id>17230027</id><snippet>exec</snippet></ROW><ROW><id>17230634</id><snippet>class Node(TreeModel):
    parent # foreign key to Node

class File(Model):
    node # foreign key to Node
    name # name of file
    path # path to the file on disk for example
</snippet></ROW><ROW><id>17230634</id><snippet>class File(Model):
    node # foreign key to Node
    name # name of file
    file # django models.FileField
</snippet></ROW><ROW><id>17230979</id><snippet>import json
import pandas as pd

db = json.loads(open('pruItems.json', 'r').read())
pieces = []
for d in db:
    if d['data']:
        df = pd.DataFrame(d['data'])
        df.columns = ['date', 'bid', 'ask']
        df = df.set_index('date')
        pieces.append(df)

df = pd.concat(pieces, axis=1, keys=[d['fund'] for d in db])

print df
</snippet></ROW><ROW><id>17230979</id><snippet>                TGC               FEF              FAF        
                bid      ask      bid      ask     bid     ask
date                                                          
18/06/2013  34.8400  34.8400  14.9179  14.9179  6.6780  6.6780
17/06/2013  34.4900  34.4900  14.8712  14.8712  6.6510  6.6570
</snippet></ROW><ROW><id>17231173</id><snippet>;</snippet></ROW><ROW><id>17231173</id><snippet>i = i++;
</snippet></ROW><ROW><id>17231173</id><snippet>++</snippet></ROW><ROW><id>17231173</id><snippet>i += 1
</snippet></ROW><ROW><id>17231173</id><snippet>str</snippet></ROW><ROW><id>17231173</id><snippet>except:</snippet></ROW><ROW><id>17231173</id><snippet>None</snippet></ROW><ROW><id>17231173</id><snippet>hdulist[0].header[30] is None  # None is a singleton!
</snippet></ROW><ROW><id>17231246</id><snippet>def add_col_c(x):
    x['col_c'] = np.arange(len(x))
    return x
</snippet></ROW><ROW><id>17231246</id><snippet>In [11]: df.sort('col_a', inplace=True)
</snippet></ROW><ROW><id>17231246</id><snippet>In [12]: g = df.groupby('col_a', as_index=False)

In [13]: g.apply(add_col_c)
Out[13]:
  col_a  col_b  col_c
3     A      3      0
8     A      8      1
0     A      0      2
4     A      4      3
6     B      6      0
1     B      1      1
7     B      7      2
9     C      9      0
2     C      2      1
5     C      5      2
</snippet></ROW><ROW><id>17231246</id><snippet>1,2,...</snippet></ROW><ROW><id>17231246</id><snippet>np.arange(1, len(x) + 1)</snippet></ROW><ROW><id>17231285</id><snippet>self.x</snippet></ROW><ROW><id>17231285</id><snippet>self.y</snippet></ROW><ROW><id>17231285</id><snippet>Scatter</snippet></ROW><ROW><id>17231285</id><snippet>self.lbl = Label(text='Test', size_hint_x=1, size_hint_y=1)
</snippet></ROW><ROW><id>17231285</id><snippet>self.lbl = Label(text='Test', width=self.width, height=self.height)
</snippet></ROW><ROW><id>17231285</id><snippet>self.size_hint_x, self.size_hint_y = 0.3, 0.3
</snippet></ROW><ROW><id>17231285</id><snippet>self.scale = 0.3
</snippet></ROW><ROW><id>17231285</id><snippet>print self.elf.lbl.pos  #&lt;-- ISSUE: This not working.
</snippet></ROW><ROW><id>17231285</id><snippet>print self.elf.to_parent(*self.elf.lbl.pos)
</snippet></ROW><ROW><id>17231285</id><snippet>from kivy.app import App
from kivy.core.window import Window
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.label import Label
from kivy.uix.scatter import Scatter
from kivy.graphics import Color, Rectangle, Canvas

class Avatar(Scatter):
    def __init__(self, **kwargs):
        super(Avatar, self).__init__(size_hint=(None,None), **kwargs)

        with self.canvas:
            Color(0, 0, 0)
            Rectangle(pos=(self.x, self.y), size=(self.width, self.height))

        #self.lbl = Label(text='Test', size_hint_x=1, size_hint_y=1)
        self.lbl = Label(text='Test', width=self.width, height=self.height)
        self.add_widget(self.lbl)

        # Scatter size is 30% of the GameBackground
        # ISSUE: After resize my Scatter, the objects inside is not resized as well.
        # self.size_hint_x, self.size_hint_y = 0.3, 0.3
        self.scale = 0.3


class GameBackground(FloatLayout):
    def __init__(self, **kwargs):
        super(GameBackground, self).__init__(**kwargs)

        with self.canvas:
            Color(0, 0, 1)
            Rectangle(pos = (0, 0), size = (Window.width,Window.height))

        self.elf = Avatar()
        self.add_widget(self.elf)
        self.elf.x = 200
        self.elf.y = 300

        # Get the X, Y position of the Scatter and the label inside the Scatter relative to the parent.
        print self.elf.pos      #&lt;-- This works.
        print self.elf.lbl.pos  #&lt;-- ISSUE: This not working.
        print self.elf.to_parent(*self.elf.lbl.pos)

class GameApp(App):
    def build(self):
        return GameBackground()

if __name__ == '__main__':
    GameApp().run()
</snippet></ROW><ROW><id>17231336</id><snippet>
def pprint(root, indentTabs = 0):
    print "&lt;%s%s&gt;" % (indentTabs*"\t", root.tag)
    print (indentTabs+1)*"\t" + root.value
    for element in root.children():
        pprint (element, indentTabs+1)
    print "&lt;/%s%s&gt;" % (indentTabs*"\t", root.tag)
</snippet></ROW><ROW><id>17231378</id><snippet>Clazz1</snippet></ROW><ROW><id>17231378</id><snippet>Clazz</snippet></ROW><ROW><id>17231378</id><snippet>class Clazz1:
    def __init__(self, key, value):
        self.key = key
        self.value = value


class Clazz:
    EMPTY = Clazz1(None, None)

    def __init__(self):
        self.item = Clazz1("a", "b")


if __name__ == '__main__':
   h = Clazz()
</snippet></ROW><ROW><id>17231541</id><snippet>if row &lt; currentIndex():
    setCurrentIndex( currentIndex() + 1 );
</snippet></ROW><ROW><id>17231712</id><snippet>datetime.datetime(1970, 1, 1) + datetime.timedelta(seconds=(-3739996800000/1000))
</snippet></ROW><ROW><id>17231712</id><snippet>datetime.datetime(1851, 6, 27, 0, 0)</snippet></ROW><ROW><id>17231807</id><snippet>value_from_datadict</snippet></ROW><ROW><id>17231813</id><snippet>import json
import pymongo
import tweepy

consumer_key = ""
consumer_secret = ""
access_key = ""
access_secret = ""

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_key, access_secret)
api = tweepy.API(auth)


class CustomStreamListener(tweepy.StreamListener):
    def __init__(self, api):
        self.api = api
        super(tweepy.StreamListener, self).__init__()

        self.db = pymongo.MongoClient().test

    def on_data(self, tweet):
        self.db.tweets.insert(json.loads(tweet))

    def on_error(self, status_code):
        return True # Don't kill the stream

    def on_timeout(self):
        return True # Don't kill the stream


sapi = tweepy.streaming.Stream(auth, CustomStreamListener(api))
sapi.filter(track=['Gandolfini'])
</snippet></ROW><ROW><id>17231813</id><snippet>test</snippet></ROW><ROW><id>17231813</id><snippet>tweets</snippet></ROW><ROW><id>17232082</id><snippet>help()</snippet></ROW><ROW><id>17232082</id><snippet>&gt;&gt;&gt; help('and')

Boolean operations
******************

   or_test  ::= and_test | or_test "or" and_test
   and_test ::= not_test | and_test "and" not_test
   not_test ::= comparison | "not" not_test

...

The expression ``x and y`` first evaluates *x*; if *x* is false, its
value is returned; otherwise, *y* is evaluated and the resulting value
is returned.

...
</snippet></ROW><ROW><id>17232082</id><snippet>a(my_var)</snippet></ROW><ROW><id>17232082</id><snippet>b</snippet></ROW><ROW><id>17232657</id><snippet>from itertools import chain
q1 = RssNewItem.objects.filter(author="author1").order_by("-published")[:3]
q2 = RssNewItem.objects.exclude(author="author1").order_by("-published")[:7]
q = list(chain(q1, q2))
</snippet></ROW><ROW><id>17232657</id><snippet>list(q1).extend(list(q2))</snippet></ROW><ROW><id>17232657</id><snippet>q = q1 | q2</snippet></ROW><ROW><id>17232799</id><snippet>        if greater_or_smaller == 'g':
            number = randint(number, 50)
            answer = raw_input("Is your number %d? y/n&gt; " % number)
            if answer == 'y':
                print "Hooray!"
            elif answer == 'n':
                greater_or_smaller()

        elif greater_or_smaller == 's':
            number = randint(1, number)
            answer = raw_input("Is your number %d? y/n&gt; " % number)
            if answer == 'y':
                print "Hooray!"
            elif answer == 'n':
                greater_or_smaller()
</snippet></ROW><ROW><id>17232799</id><snippet>        if greater_or_smaller in ['g','s']:
            number = randint(number, 50) if greater_or_smaller == 'g' else randint(1, number)
            answer = raw_input("Is your number %d? y/n&gt; " % number)
            if answer == 'y':
                print "Hooray!"
            elif answer == 'n':
                greater_or_smaller()
</snippet></ROW><ROW><id>17232799</id><snippet>def get_input(prompt_text, valid_options):
    x = raw_input(prompt_text)
    while x not in valid_options:
        print x, "is not a valid value. Expected are :", valid_options
    return x
</snippet></ROW><ROW><id>17233290</id><snippet>["http://www.fetise.com/" + i if "http://www.fetise.com/" not in i else i for i in lista]
</snippet></ROW><ROW><id>17233290</id><snippet>&gt;&gt;&gt; pprint(["http://www.fetise.com/" + i if "http://www.fetise.com/" not in i else i for i in lista])
[u'http://www.fetise.com/apparel/shirts',
 u'http://www.fetise.com/apparel/tees',
 u'http://www.fetise.com/apparel/tops-and-tees',
 u'http://www.fetise.com/accessories/belts',
 u'http://www.fetise.com/accessories/cufflinks',
 u'http://www.fetise.com/accessories/jewellery',
 u'http://www.fetise.com/accessories/lighters',
 u'http://www.fetise.com/accessories/others',
 u'http://www.fetise.com/accessories/sunglasses',
 u'http://www.fetise.com/accessories/ties-cufflinks',
 u'http://www.fetise.com/accessories/wallets',
 u'http://www.fetise.com/accessories/watches',
 u'http://www.fetise.com/footwear/boots',
 u'http://www.fetise.com/footwear/casual',
 u'http://www.fetise.com/footwear/flats',
 u'http://www.fetise.com/footwear/heels',
 u'http://www.fetise.com/footwear/loafers',
 u'http://www.fetise.com/footwear/sandals',
 u'http://www.fetise.com/footwear/shoes',
 u'http://www.fetise.com/footwear/slippers',
 u'http://www.fetise.com/footwear/sports',
 u'http://www.fetise.com/innerwear/boxers',
 u'http://www.fetise.com/innerwear/briefs',
 u'http://www.fetise.com/personal-care/deos',
 u'http://www.fetise.com/personal-care/haircare',
 u'http://www.fetise.com/personal-care/perfumes',
 u'http://www.fetise.com/personal-care/personal-care',
 u'http://www.fetise.com/personal-care/shavers',
 u'http://www.fetise.com/apparel/tees/gifts-for-her',
 u'http://www.fetise.com/footwear/sandals/gifts-for-her',
 u'http://www.fetise.com/footwear/shoes/gifts-for-her',
 u'http://www.fetise.com/footwear/heels/gifts-for-her',
 u'http://www.fetise.com/footwear/flats/gifts-for-her',
 u'http://www.fetise.com/footwear/ballerinas/gifts-for-her',
 u'http://www.fetise.com/footwear/loafers/gifts-for-her']
</snippet></ROW><ROW><id>17233350</id><snippet>mat.set_data()</snippet></ROW><ROW><id>17233350</id><snippet>newGrid</snippet></ROW><ROW><id>17233350</id><snippet>grid</snippet></ROW><ROW><id>17233350</id><snippet>def update(data):
  global grid
  newGrid = grid.copy()

  """
  do your updating. this needs to be done on a copy of 'grid' because you are
  updating element-by-element, and updates to previous rows/columns will
  affect the result at 'grid[i,j]' if you don't use a copy
  """

  # you do need to update the global 'grid' otherwise the simulation will
  # not progress, but there's no need to copy()
  mat.set_data(newGrid)
  grid = newGrid

  # # there's no reason why you couldn't do it in the opposite order
  # grid = newGrid
  # mat.set_data(grid)

  # at least in my version of matplotlib (1.2.1), the animation function must
  # return an iterable containing the updated artists, i.e. 'mat,' or '[mat]',
  # not 'mat'
  return [mat]
</snippet></ROW><ROW><id>17233350</id><snippet>FuncAnimation</snippet></ROW><ROW><id>17233350</id><snippet>blit=True</snippet></ROW><ROW><id>17233748</id><snippet>pd.merge(df1, df2, on='record_ID', how='left')
</snippet></ROW><ROW><id>17233818</id><snippet>def increment_counter(method):
    def wrapper(self, *args, **kw):
        self._COUNTER += 1
        return method(self, *args, **kw)
    return wrapper
</snippet></ROW><ROW><id>17233818</id><snippet>class A(object):
    _COUNTER = 0

    @increment_counter
    def do_something_1(self):
        ...

    @increment_counter
    def do_something_2(self):
        ...

    @increment_counter
    def do_something_N(self):
        ...
</snippet></ROW><ROW><id>17233818</id><snippet>__COUNTER</snippet></ROW><ROW><id>17233818</id><snippet>def increment_counter(classname):
    counter_attribute = '_{}__COUNTER'.format(classname)
    def increment_counter_decorator(method):
        def wrapper(self, *args, **kw):
            setattr(self, counter_attribute, getattr(self, counter_attribute) + 1)
            return method(self, *args, **kw)
        return wrapper
</snippet></ROW><ROW><id>17233818</id><snippet>@increment_counter('A')
def do_something_1(self):
    ...
</snippet></ROW><ROW><id>17233818</id><snippet>class A(object):
    _COUNTER = 0

    def __init__(self):
        A._COUNTER += 1
</snippet></ROW><ROW><id>17233818</id><snippet>type(self)._COUNTER</snippet></ROW><ROW><id>17233818</id><snippet>A</snippet></ROW><ROW><id>17233987</id><snippet>import csv
import itertools
import operator

filename = 'testing.csv'
outfile = 'outfile.csv'
ndups = 0

with open(filename, 'r') as fin, open(outfile, 'w') as fout:
    reader = csv.DictReader(fin)
    writer = csv.DictWriter(fout, lineterminator='\n', fieldnames=reader.fieldnames)
    for id_, grp in itertools.groupby(reader, key=operator.itemgetter('ID')):
        rows = list(grp)
        if len({row['Name'] for row in rows}) &gt; 1:
            ndups += len(rows)
            continue
        writer.writerows(rows)

print('{} duplicates.'.format(ndups))
</snippet></ROW><ROW><id>17234031</id><snippet>fd://0</snippet></ROW><ROW><id>17234031</id><snippet>stdout</snippet></ROW><ROW><id>17234031</id><snippet>fd://0.png</snippet></ROW><ROW><id>17234031</id><snippet>stdout</snippet></ROW><ROW><id>17234031</id><snippet>stdout</snippet></ROW><ROW><id>17234031</id><snippet>svg</snippet></ROW><ROW><id>17234031</id><snippet>pdf</snippet></ROW><ROW><id>17234031</id><snippet>eps</snippet></ROW><ROW><id>17234031</id><snippet>ps</snippet></ROW><ROW><id>17234061</id><snippet>threading</snippet></ROW><ROW><id>17234061</id><snippet> conn = FTP(hostname, timeout=60.)
 conn.set_pasv(True)
 conn.login()
 while True:
     localfile = open(local_filename, "wb")
     try:
         dlthread = threading.Thread(target=conn.retrbinary,
                 args=("RETR {0}".format(remote_filename), localfile.write))
         dlthread.start()
         dlthread.join(timeout=60.)
         if not dlthread.is_alive():
             break
         del dlthread
         print("download didn't complete within {timeout}s. "
                 "waiting for 10s ...".format(timeout=60))
         time.sleep(10)
         print("restarting thread")
     except KeyboardInterrupt:
         raise
     except:
         pass
     localfile.close()
</snippet></ROW><ROW><id>17234868</id><snippet>zip</snippet></ROW><ROW><id>17234868</id><snippet>str</snippet></ROW><ROW><id>17234868</id><snippet>datafile2.writelines(str(x)+'\n' for x in a)
</snippet></ROW><ROW><id>17234868</id><snippet>str.join</snippet></ROW><ROW><id>17234868</id><snippet>datafile2.write('\n'.join(map(str,a)))
</snippet></ROW><ROW><id>17235060</id><snippet>&gt;&gt;&gt; L = [[0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0]] 
&gt;&gt;&gt; [i for i, j in enumerate(L) if sum(j) == 3 and 3 not in j]
[6, 7]
</snippet></ROW><ROW><id>17235060</id><snippet>[n for n, x in an_integer] # an_integer being an integer because that is what list[idx[0]:] returned
</snippet></ROW><ROW><id>17235061</id><snippet>list.append()</snippet></ROW><ROW><id>17235061</id><snippet>food_dict.append({
    'food_name': 'chicken',
    'serving_size': 32,
    'serving_calorie': 20,
    'serving_protien': 15,
    'serving_fat': 4,
    'serving_carb': 1
 }
</snippet></ROW><ROW><id>17235126</id><snippet>import pandas as pd
n=1000
df = pd.DataFrame(random.randn(n), pd.date_range('2010-01-01', periods=n), columns=["data"])
df['Dates'] = df.index
df['week_days'] =df.index.weekday
df
</snippet></ROW><ROW><id>17235126</id><snippet>x =df.pivot(index='Dates', columns='week_days', values='data')
x.boxplot()
</snippet></ROW><ROW><id>17235147</id><snippet>pattern = "|".join(re.escape(s) for s in subList)
crexp = re.compile(pattern)
if any(crexp.search(s) for s in strList):
    ...
</snippet></ROW><ROW><id>17235161</id><snippet>   */2 * * * * python /opt/badlink.py
</snippet></ROW><ROW><id>17235249</id><snippet>accelerator</snippet></ROW><ROW><id>17235249</id><snippet>bind_all</snippet></ROW><ROW><id>17235249</id><snippet>self.gui.bind_all("&lt;Command-n&gt;", lambda event: self.New())
</snippet></ROW><ROW><id>17235356</id><snippet>r</snippet></ROW><ROW><id>17235356</id><snippet>a</snippet></ROW><ROW><id>17235356</id><snippet>r = np.zeros(a.shape)
for i in range(a.shape[0]):
    for j in range(a.shape[1]):
        # compute r[i, j]

a = a * r
</snippet></ROW><ROW><id>17235356</id><snippet>a</snippet></ROW><ROW><id>17235356</id><snippet>a = a * numpy.random.rand(a.shape[0], a.shape[1])
</snippet></ROW><ROW><id>17235356</id><snippet>a = a * numpy.random.rand(a.shape[0], 1) 
</snippet></ROW><ROW><id>17235413</id><snippet>def increment_counter(method):
    def wrapper(self, *args, **kw):
        self._COUNTER += 1
        try:
            return method(self, *args, **kw)
        finally:
            self._COUNTER -= 1
    return wrapper
</snippet></ROW><ROW><id>17235413</id><snippet>finally</snippet></ROW><ROW><id>17235572</id><snippet>[confusion_matrix[idx][idx] / sum(confusion_matrix[idx]) if sum(confusion_matrix[idx]) != 0 else 0 for (idx, scores) in enumerate(confusion_matrix)]
</snippet></ROW><ROW><id>17235651</id><snippet>import json

D = {'foo':1, 'baz': 2}

print json.dumps(D)
</snippet></ROW><ROW><id>17235651</id><snippet>&lt;?php 

$result = json_decode(exec('python myscript.py'), true);
echo $result['foo'];
</snippet></ROW><ROW><id>17235729</id><snippet>import numpy as np

def abs_val_diff(x1, x2, x3, y1, y2, y3):
    """ Find the absolute value of the difference between x and y """
    return np.sqrt((x1 - y1) ** 2.0 + (x2 - y2) ** 2.0 + (x3 - y3) ** 2.0)
</snippet></ROW><ROW><id>17235729</id><snippet>res = abs_val_diff(x[:-1],y[:-1],z[:-1],x[1:],y[1:],z[1:])
</snippet></ROW><ROW><id>17235729</id><snippet>sumV = len(res[R&gt;res])
</snippet></ROW><ROW><id>17235976</id><snippet>.insert</snippet></ROW><ROW><id>17235976</id><snippet>.append</snippet></ROW><ROW><id>17235976</id><snippet>import lxml.html

def add_css_code(webpageString, linkString):
    root = lxml.html.fromstring(webpageString)
    link = lxml.html.fromstring(linkString).find('.//link')
    head = root.find('.//head')
    title = head.find('title')
    if title == None:
        where = 0
    else:
        where = head.index(title) + 1
    head.insert(where, link)
    return lxml.html.tostring(root)

webpageString1 = "&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;webpage content&lt;/body&gt;&lt;/html&gt;"
webpageString2 = "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;webpage content&lt;/body&gt;&lt;/html&gt;"
linkString = "&lt;link rel='stylesheet' type='text/css'&gt;"

print(add_css_code(webpageString1, linkString))
print(add_css_code(webpageString2, linkString))
</snippet></ROW><ROW><id>17236139</id><snippet>heapq</snippet></ROW><ROW><id>17236139</id><snippet>&lt;</snippet></ROW><ROW><id>17236139</id><snippet>&lt;=</snippet></ROW><ROW><id>17236139</id><snippet>heapq</snippet></ROW><ROW><id>17236139</id><snippet>(priority, your_data_structure)</snippet></ROW><ROW><id>17236139</id><snippet>__lt__</snippet></ROW><ROW><id>17236139</id><snippet>__le__</snippet></ROW><ROW><id>17236139</id><snippet>__gt__</snippet></ROW><ROW><id>17236139</id><snippet>__ge__</snippet></ROW><ROW><id>17236139</id><snippet>__eq__</snippet></ROW><ROW><id>17236139</id><snippet>functools. total_ordering()</snippet></ROW><ROW><id>17236139</id><snippet>from functools import total_ordering

@total_ordering
class PixelInfo(object):
    def __init__(self, r, g, b):
        self.r, self.g, self.b = r, g, b

    def __eq__(self, other):
        if not isinstance(other, type(self)): return NotImplemented
        return all(getattr(self, c) == getattr(other, c) for c in 'rgb')

    def __lt__(self, other):
        if not isinstance(other, type(self)): return NotImplemented
        return self.r + self.g + self.b &lt; other.r + other.g + other.b
</snippet></ROW><ROW><id>17236139</id><snippet>heapq</snippet></ROW><ROW><id>17236314</id><snippet>line.getvalue</snippet></ROW><ROW><id>17236314</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; line = StringIO.StringIO()
&gt;&gt;&gt; line.write("Hello World")
&gt;&gt;&gt; line.seek(0)
&gt;&gt;&gt; print line.getvalue()
Hello World
&gt;&gt;&gt; line.seek(1)
&gt;&gt;&gt; print line.getvalue()
Hello World
&gt;&gt;&gt; line.seek(1)
&gt;&gt;&gt; print next(line)
ello World
&gt;&gt;&gt; line.seek(1)
&gt;&gt;&gt; print line.read()
ello World
</snippet></ROW><ROW><id>17236528</id><snippet>itertools.product(*x)
</snippet></ROW><ROW><id>17236824</id><snippet>if list1 == list2: # compare lists for equality
    doStuff()      # if lists are equal, do stuff after that   
</snippet></ROW><ROW><id>17236824</id><snippet>list1</snippet></ROW><ROW><id>17236824</id><snippet>list2</snippet></ROW><ROW><id>17236824</id><snippet>if all(x in list2 for x in list1):
    doStuff()
</snippet></ROW><ROW><id>17236824</id><snippet>list1</snippet></ROW><ROW><id>17236824</id><snippet>list2</snippet></ROW><ROW><id>17236824</id><snippet>for e in set(list1) &amp; set(list2):
    doStuff(e)
</snippet></ROW><ROW><id>17236963</id><snippet>__all__</snippet></ROW><ROW><id>17236963</id><snippet>from database import *</snippet></ROW><ROW><id>17236963</id><snippet>session</snippet></ROW><ROW><id>17236963</id><snippet>database/__init__.py</snippet></ROW><ROW><id>17236963</id><snippet>from .engine import session
</snippet></ROW><ROW><id>17237331</id><snippet>imp</snippet></ROW><ROW><id>17237331</id><snippet>#!/usr/bin/env python

import pip
import imp

def install_and_load(package):
    pip.main(['install', package])

    path = '/usr/local/lib/python2.7/dist-packages'
    if path not in sys.path:
        sys.path.append(path)

    f, fname, desc = imp.find_module(package)
    return imp.load(package, f, fname, desc)

if __name__ == "__main__":
    try:
        import pexpect
    except:
        pexpect = install_and_load('pexpect')

    # More code...
</snippet></ROW><ROW><id>17237385</id><snippet>try:
    with open(path_to_file, "w+") as f:
        # Do whatever with f
except:
    # log exception
</snippet></ROW><ROW><id>17237387</id><snippet>&gt;&gt;&gt; from IPython import embed
&gt;&gt;&gt; embed()
</snippet></ROW><ROW><id>17237486</id><snippet>for line in x</snippet></ROW><ROW><id>17237486</id><snippet>with open('test.txt') as x:
    for line in x:
        # By this point, line is set to the first line
        # the file cursor has advanced just past the first line
        print(x.read())
        # the above prints everything after the first line
        # file cursor reaches EOF, no more lines to iterate in for loop
</snippet></ROW><ROW><id>17237486</id><snippet>with open('test.txt') as x:
    print(x.read())
</snippet></ROW><ROW><id>17237486</id><snippet>with open('test.txt') as x:
    for line in x:
        print line.rstrip()
</snippet></ROW><ROW><id>17237550</id><snippet>timedelta</snippet></ROW><ROW><id>17237550</id><snippet>datetime</snippet></ROW><ROW><id>17237550</id><snippet>datetime</snippet></ROW><ROW><id>17237550</id><snippet>datetime</snippet></ROW><ROW><id>17237550</id><snippet>datetime</snippet></ROW><ROW><id>17237550</id><snippet>datetime</snippet></ROW><ROW><id>17237550</id><snippet>timedelta</snippet></ROW><ROW><id>17237550</id><snippet>strftime</snippet></ROW><ROW><id>17237550</id><snippet>from datetime import datetime, timedelta
serial_number = (datetime(2012, 1, 1, 9, 55, 56) + timedelta(223)).strftime('%d-%h-%y %H:%M:%S')
</snippet></ROW><ROW><id>17237728</id><snippet>hcell=0.3</snippet></ROW><ROW><id>17237728</id><snippet>wcell=1</snippet></ROW><ROW><id>17237728</id><snippet>len(clust_data)+1</snippet></ROW><ROW><id>17237728</id><snippet>fig = plt.figure(figsize=(3*wcell+wpad, nrows*hcell+hpad))
</snippet></ROW><ROW><id>17237728</id><snippet>ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)
</snippet></ROW><ROW><id>17237728</id><snippet>clust_data</snippet></ROW><ROW><id>17237728</id><snippet>cellText</snippet></ROW><ROW><id>17237728</id><snippet>clust_data</snippet></ROW><ROW><id>17237728</id><snippet>fig=plt.figure()
ax = fig.add_subplot(111)
ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)
colLabels=("Structure", "Energy", "Density")
the_table = ax.table(cellText=clust_data,
          colLabels=colLabels,
          loc='center')
plt.savefig("table.png")
</snippet></ROW><ROW><id>17237728</id><snippet>zorder</snippet></ROW><ROW><id>17237728</id><snippet>zorder</snippet></ROW><ROW><id>17237728</id><snippet>colLabels=("Structure", "Energy", "Density")
nrows, ncols = len(clust_data)+1, len(colLables)
hcell, wcell = 0.3, 1.
hpad, wpad = 0, 0    

fig=plt.figure(figsize=(ncols*wcell+wpad, nrows*hcell+hpad))
ax = fig.add_subplot(111)
#remove axis ticks and labels
ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)
#hide the spines
for sp in ax.spines.itervalues():
    sp.set_color('w')
    sp.set_zorder(0)
#do the table
the_table = ax.table(cellText=clust_data,
          colLabels=colLabels,
          loc='center')
#put the table in front of the axes spines 
#for some reason zorder is not a keyword in ax.table
the_table.set_zorder(10)
plt.savefig("table.png")
</snippet></ROW><ROW><id>17237728</id><snippet>colLabels=("Structure", "Energy", "Density")
nrows, ncols = len(clust_data)+1, len(colLables)
hcell, wcell = 0.3, 1.
hpad, wpad = 0, 0    
fig=plt.figure(figsize=(ncols*wcell+wpad, nrows*hcell+hpad))
ax = fig.add_subplot(111)
ax.axis('off')
#do the table
the_table = ax.table(cellText=clust_data,
          colLabels=colLabels,
          loc='center')
plt.savefig("table.png")
</snippet></ROW><ROW><id>17237765</id><snippet>class FakeModuleNameGenerator(str):
    @classmethod
    def __new__(cls, *args, **kwargs):
        return str(binascii.b2a_hex(os.urandom(15)))
</snippet></ROW><ROW><id>17237765</id><snippet>__new__</snippet></ROW><ROW><id>17237863</id><snippet>"""[']</snippet></ROW><ROW><id>17237863</id><snippet>str.strip</snippet></ROW><ROW><id>17237863</id><snippet>' '*6</snippet></ROW><ROW><id>17237863</id><snippet>str.strip</snippet></ROW><ROW><id>17237863</id><snippet>with open(fileName) as f:
    lis =  [x.strip() for x in f.read().strip('\'"[]').split(' '*6)]
    print lis
...     
['Hoffa remains', 'Allen Iverson', 'Bill Cosby', 'WWE Payback results', 'Juneteenth shooting', 'Miss Utah flub', 'Octopus pants', 'Magna Carta Holy Grail', 'China supercomputer', 'Sibling bullying']
</snippet></ROW><ROW><id>17237863</id><snippet>[func(x) for x in lis]
</snippet></ROW><ROW><id>17237863</id><snippet>map(func, lis)
</snippet></ROW><ROW><id>17237903</id><snippet>class MyClass(metaclass=Singleton):
    pass
</snippet></ROW><ROW><id>17237903</id><snippet>&gt;&gt;&gt; MyClass() is MyClass()
True
</snippet></ROW><ROW><id>17237985</id><snippet>.name</snippet></ROW><ROW><id>17237985</id><snippet>args.input.name
</snippet></ROW><ROW><id>17237985</id><snippet>&lt;stdin&gt;</snippet></ROW><ROW><id>17237985</id><snippet>sys.stdin</snippet></ROW><ROW><id>17238125</id><snippet>class sth(models.Model):
    somefield = models.CharField(max_length = 20, null = False, blank = False) 
</snippet></ROW><ROW><id>17238371</id><snippet>e</snippet></ROW><ROW><id>17238371</id><snippet>th_</snippet></ROW><ROW><id>17238371</id><snippet>e</snippet></ROW><ROW><id>17238506</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>17238506</id><snippet>import subprocess
answer = subprocess.check_output(['./a.sh'])
print("the answer is {}".format(answer))
</snippet></ROW><ROW><id>17238506</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>17238506</id><snippet>&gt;&gt;&gt; print subprocess.check_output.__doc__
Run command with arguments and return its output as a byte string.
</snippet></ROW><ROW><id>17238506</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; answer = subprocess.check_output(['./a.sh'])
&gt;&gt;&gt; answer
'Hello World!\n'
&gt;&gt;&gt; print("the answer is {}".format(answer))
the answer is Hello World!
</snippet></ROW><ROW><id>17238506</id><snippet>a.sh</snippet></ROW><ROW><id>17238506</id><snippet>#!/bin/bash
STR="Hello World!"
echo $STR
</snippet></ROW><ROW><id>17238732</id><snippet>text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text) #remove duplicated words in row
</snippet></ROW><ROW><id>17238732</id><snippet>\b</snippet></ROW><ROW><id>17238748</id><snippet>import csv

with open("filepath", 'rb') as f:
    reader = csv.DictReader(f)
    rows = [row for row in reader if row['Total_Depth'] != '0']

for row in rows:
    print row
</snippet></ROW><ROW><id>17238875</id><snippet>L[0][0]</snippet></ROW><ROW><id>17238875</id><snippet>"a"</snippet></ROW><ROW><id>17238875</id><snippet>L[0][1]</snippet></ROW><ROW><id>17238875</id><snippet>"b"</snippet></ROW><ROW><id>17238875</id><snippet>L[2][1]</snippet></ROW><ROW><id>17238875</id><snippet>"etc"</snippet></ROW><ROW><id>17238875</id><snippet>cast = [list(entry) for entry in L]
</snippet></ROW><ROW><id>17238875</id><snippet>crosscut = [entry[0] for entry in L]
</snippet></ROW><ROW><id>17238875</id><snippet>multiple_index = [entry[0:3] for entry in L]
</snippet></ROW><ROW><id>17238875</id><snippet>list_of_lists = []
for sublist in L:
    list_of_lists.append(list(sublist))

iterator = iter(L)
for i in range(0,iterator.__length_hint__()):
    return list(iterator.next())
    # Or yield list(iterator.next()) if you want lazy evaluation
</snippet></ROW><ROW><id>17238877</id><snippet>qualysconnect.util</snippet></ROW><ROW><id>17238877</id><snippet>getLogger</snippet></ROW><ROW><id>17238877</id><snippet>getChild</snippet></ROW><ROW><id>17238877</id><snippet>qualysconnect.util</snippet></ROW><ROW><id>17238877</id><snippet>import logging
logger = logging.getLogger('qualysconnect').getChild('util')
</snippet></ROW><ROW><id>17238877</id><snippet>logging.info()</snippet></ROW><ROW><id>17238877</id><snippet>logging.debug()</snippet></ROW><ROW><id>17238877</id><snippet>logger.info()</snippet></ROW><ROW><id>17238877</id><snippet>logger.debug()</snippet></ROW><ROW><id>17238877</id><snippet>qualysconnect.util</snippet></ROW><ROW><id>17238877</id><snippet>logging</snippet></ROW><ROW><id>17238877</id><snippet>import qualysconnect.util
logger_qc = logging.getLogger('qualysconnect')
logger_qc.setLevel(logging.ERROR)
qualysconnect.util.logging = logger_qc.getLogger('qualysconnect').getChild('util')
qualysconnect.util.logging.disable(logging.CRITICAL) # will disable all logging for CRITICAL and below
</snippet></ROW><ROW><id>17238877</id><snippet>qualysconnect</snippet></ROW><ROW><id>17239025</id><snippet>wn.synsets(word)[0].lemmas[y]</snippet></ROW><ROW><id>17239025</id><snippet>Web_Keywd = 'car loan cheap'

results = {}
for word in Web_Keywd.split():
    for synset in wn.synsets(word):
        for lemma in synset.lemmas:
            results.setdefault(word, []).append(lemma.name)
</snippet></ROW><ROW><id>17239025</id><snippet>results</snippet></ROW><ROW><id>17239025</id><snippet>{'car': ['car', 'auto', 'automobile', 'machine'...],
'loan': ['loan', 'loanword', 'loan', 'lend', 'loan'...],
'cheap': ['cheap', 'inexpensive', 'brassy', 'cheap...]}
</snippet></ROW><ROW><id>17239025</id><snippet>.... # same as above
            results.setdefault(word, set()).add(lemma.name)
</snippet></ROW><ROW><id>17239025</id><snippet>Web_Keywd = 'car loan cheap'

words = set(Web_Keywd.split())
results = set(
    lemma.name
    for word in words
        for synset in wn.synsets(word)
            for lemma in synset.lemmas
)
# results -&gt; {'loanword', 'tatty', 'automobile', 'cheap', 'chinchy',...
</snippet></ROW><ROW><id>17239047</id><snippet>print "foo bar"
print 5
</snippet></ROW><ROW><id>17239047</id><snippet>#! /bin/bash

python main.py | while read line ; do
    echo $line
done
</snippet></ROW><ROW><id>17239047</id><snippet>#! /bin/bash

array=()
while read line ; do
  array+=($line)
done &lt; &lt;(python main.py)
echo ${array[@]}
</snippet></ROW><ROW><id>17239617</id><snippet>with open('infile.txt', 'rb') as infile, open('outfile.txt', 'wb') as outfile:
    outfile.writelines(line[:15] + '32' + line[15:] for line in infile)
</snippet></ROW><ROW><id>17239770</id><snippet>[u'1012,738']</snippet></ROW><ROW><id>17239770</id><snippet>id_string = data_dict['ids'][0]</snippet></ROW><ROW><id>17239770</id><snippet>map</snippet></ROW><ROW><id>17239770</id><snippet>list comprehension</snippet></ROW><ROW><id>17239770</id><snippet>#map
map(int, data_dict['ids'][0].split(','))

#LC
[int(x) for x in data_dict['ids'][0].split(',')]
</snippet></ROW><ROW><id>17239770</id><snippet>&gt;&gt;&gt; strs = '1012,738'
&gt;&gt;&gt; map(int, strs.split(','))
[1012, 738]
&gt;&gt;&gt; [int(x) for x in  strs.split(',')]
[1012, 738]
</snippet></ROW><ROW><id>17239867</id><snippet>\):\s*\n\s*["']</snippet></ROW><ROW><id>17239867</id><snippet>grep</snippet></ROW><ROW><id>17240023</id><snippet>pathParse</snippet></ROW><ROW><id>17240132</id><snippet>matplotlib</snippet></ROW><ROW><id>17240132</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.plot(range(10), color="0.5")
plt.show()
</snippet></ROW><ROW><id>17240132</id><snippet>plt.cm.gray</snippet></ROW><ROW><id>17240132</id><snippet>plt.cm.gray_r</snippet></ROW><ROW><id>17240204</id><snippet>+=</snippet></ROW><ROW><id>17240204</id><snippet>list.extend()</snippet></ROW><ROW><id>17240204</id><snippet>new_list</snippet></ROW><ROW><id>17240204</id><snippet>.extend()</snippet></ROW><ROW><id>17240204</id><snippet>list.append()</snippet></ROW><ROW><id>17240204</id><snippet>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst.extend([1, 2, 3])
&gt;&gt;&gt; lst
[1, 2, 3]
&gt;&gt;&gt; lst.append([1, 2, 3])
&gt;&gt;&gt; lst
[1, 2, 3, [1, 2, 3]]
</snippet></ROW><ROW><id>17240362</id><snippet>inherits</snippet></ROW><ROW><id>17240362</id><snippet>OneToOne</snippet></ROW><ROW><id>17240362</id><snippet>groups</snippet></ROW><ROW><id>17240362</id><snippet>permissions</snippet></ROW><ROW><id>17240362</id><snippet> from django.contrib.auth.models import User
 class MyCustomProfile(User):
     #inherits all the attributes of default `User` models
     #additional models here. 
</snippet></ROW><ROW><id>17240362</id><snippet> from django.contrib.auth.models import User
 class MyCustomProfile(models.Model):
     user = models.OneToOneField(User) 
     #additional models here. 
</snippet></ROW><ROW><id>17240362</id><snippet>UserProfile</snippet></ROW><ROW><id>17240362</id><snippet>User</snippet></ROW><ROW><id>17240470</id><snippet>import urllib
from scrapy.selector import HtmlXPathSelector
from pprint import pprint

url = 'http://www.fetise.com'
data = urllib.urlopen(url).read()
hxs = HtmlXPathSelector(text=data)

lista = hxs.select('//ul[@class="categoryMenu"]/li/ul/li/a/@href').extract()

acb = ["http://www.fetise.com/" + i if "http://www.fetise.com/" not in i else i for i in lista] + [u"http://www.fetise.com/sale"]

pprint(acb)
</snippet></ROW><ROW><id>17240470</id><snippet>[u'http://www.fetise.com/apparel/shirts',
 u'http://www.fetise.com/apparel/tees',
 u'http://www.fetise.com/apparel/tops-and-tees',
 u'http://www.fetise.com/accessories/belts',
 u'http://www.fetise.com/accessories/cufflinks',
 u'http://www.fetise.com/accessories/jewellery',
 u'http://www.fetise.com/accessories/lighters',
 u'http://www.fetise.com/accessories/others',
 u'http://www.fetise.com/accessories/sunglasses',
 u'http://www.fetise.com/accessories/ties-cufflinks',
 u'http://www.fetise.com/accessories/wallets',
 u'http://www.fetise.com/accessories/watches',
 u'http://www.fetise.com/footwear/boots',
 u'http://www.fetise.com/footwear/casual',
 u'http://www.fetise.com/footwear/flats',
 u'http://www.fetise.com/footwear/heels',
 u'http://www.fetise.com/footwear/loafers',
 u'http://www.fetise.com/footwear/sandals',
 u'http://www.fetise.com/footwear/shoes',
 u'http://www.fetise.com/footwear/slippers',
 u'http://www.fetise.com/footwear/sports',
 u'http://www.fetise.com/innerwear/boxers',
 u'http://www.fetise.com/innerwear/briefs',
 u'http://www.fetise.com/personal-care/deos',
 u'http://www.fetise.com/personal-care/haircare',
 u'http://www.fetise.com/personal-care/perfumes',
 u'http://www.fetise.com/personal-care/personal-care',
 u'http://www.fetise.com/personal-care/shavers',
 u'http://www.fetise.com/apparel/tees/gifts-for-her',
 u'http://www.fetise.com/footwear/sandals/gifts-for-her',
 u'http://www.fetise.com/footwear/shoes/gifts-for-her',
 u'http://www.fetise.com/footwear/heels/gifts-for-her',
 u'http://www.fetise.com/footwear/flats/gifts-for-her',
 u'http://www.fetise.com/footwear/ballerinas/gifts-for-her',
 u'http://www.fetise.com/footwear/loafers/gifts-for-her',
 u'http://www.fetise.com/sale']
</snippet></ROW><ROW><id>17240493</id><snippet>_index_fields()</snippet></ROW><ROW><id>17240493</id><snippet>numpy/core/_internal.py</snippet></ROW><ROW><id>17240493</id><snippet>new_dtype = [(name, dt[name]) for name in dt.names if name in fields]
</snippet></ROW><ROW><id>17240493</id><snippet>new_dtype = [(name, dt[name]) for name in fields if name in dt.names]
</snippet></ROW><ROW><id>17240529</id><snippet>import os
os.startfile(r'C:\folder\proov\.batch.bat')
</snippet></ROW><ROW><id>17240529</id><snippet>import os
os.system(r'C:\folder\proov\.batch.bat')
</snippet></ROW><ROW><id>17240529</id><snippet>import subprocess
subprocess.call(r'C:\folder\proov\.batch.bat')
</snippet></ROW><ROW><id>17240618</id><snippet>zip</snippet></ROW><ROW><id>17240618</id><snippet>&gt;&gt;&gt; a = [0,13,26,39]
&gt;&gt;&gt; b = [12,25,38,51]
&gt;&gt;&gt; strs = 'If you are done with the file, move to the command area across from the file name in the RL screen and type'
&gt;&gt;&gt; spl = strs.split()
&gt;&gt;&gt; for x,y in zip(a,b):
...     print spl[x:y]
...     
['If', 'you', 'are', 'done', 'with', 'the', 'file,', 'move', 'to', 'the', 'command', 'area']
['from', 'the', 'file', 'name', 'in', 'the', 'RL', 'screen', 'and', 'type']
[]
[]
</snippet></ROW><ROW><id>17240618</id><snippet>zip</snippet></ROW><ROW><id>17240618</id><snippet>&gt;&gt;&gt; zip(a,b)
[(0, 12), (13, 25), (26, 38), (39, 51)]
</snippet></ROW><ROW><id>17240618</id><snippet>itertools.izip</snippet></ROW><ROW><id>17240618</id><snippet>str.join</snippet></ROW><ROW><id>17240618</id><snippet>for x,y in zip(a,b):
    print " ".join(spl[x:y])
...     
If you are done with the file, move to the command area
from the file name in the RL screen and type
</snippet></ROW><ROW><id>17240618</id><snippet>a</snippet></ROW><ROW><id>17240618</id><snippet>b</snippet></ROW><ROW><id>17240618</id><snippet>&gt;&gt;&gt; n = 5
&gt;&gt;&gt; a = range(0, 13*n, 13)
&gt;&gt;&gt; b = [ x + 12 for x in a]
&gt;&gt;&gt; a
[0, 13, 26, 39, 52]
&gt;&gt;&gt; b
[12, 25, 38, 51, 64]
</snippet></ROW><ROW><id>17240637</id><snippet>seconds</snippet></ROW><ROW><id>17240637</id><snippet>yt:duration</snippet></ROW><ROW><id>17240637</id><snippet>from datetime import timedelta
from urllib2 import urlopen
from xml.dom.minidom import parseString
for vid in ('wJ4hPaNyHnY', 'dJ38nHlVE78', 'huXaL8qj2Vs'):
    url = 'https://gdata.youtube.com/feeds/api/videos/{0}?v=2'.format(vid)
    s = urlopen(url).read()
    d = parseString(s)
    e = d.getElementsByTagName('yt:duration')[0]
    a = e.attributes['seconds']
    v = int(a.value)
    t = timedelta(seconds=v)
    print(t)
</snippet></ROW><ROW><id>17240637</id><snippet>0:00:59
0:02:24
0:04:49
</snippet></ROW><ROW><id>17240765</id><snippet>&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt;
&gt;&gt;&gt; xmlstring = '''\
... &lt;?xml version='1.0' encoding='ASCII'?&gt;
... &lt;root&gt;&lt;a class="here"&gt;link1&lt;/a&gt;&lt;a class="there"&gt;link2&lt;/a&gt;&lt;/root&gt;
... '''
&gt;&gt;&gt; root = lxml.etree.fromstring(xmlstring)
&gt;&gt;&gt; root.cssselect('a.here')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'lxml.etree._Element' object has no attribute 'cssselect'
</snippet></ROW><ROW><id>17240765</id><snippet>lxml.etree.tostring(root)</snippet></ROW><ROW><id>17240765</id><snippet>lxml.html.fromstring(..)</snippet></ROW><ROW><id>17240765</id><snippet>&gt;&gt;&gt; root = lxml.html.fromstring(lxml.etree.tostring(root))
&gt;&gt;&gt; root.cssselect('a.here')
[&lt;Element a at 0x2989308&gt;]
</snippet></ROW><ROW><id>17240765</id><snippet>&gt;&gt;&gt; print lxml.etree.tostring(root, xml_declaration=True)
&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;root&gt;&lt;a class="here"&gt;link1&lt;/a&gt;&lt;a class="there"&gt;link2&lt;/a&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>17240816</id><snippet>TEST(?:[1-9]|10)\b
</snippet></ROW><ROW><id>17240980</id><snippet>commands</snippet></ROW><ROW><id>17240980</id><snippet>commands.getoutput</snippet></ROW><ROW><id>17240980</id><snippet>import commands
answer = commands.getoutput('./a.sh')
</snippet></ROW><ROW><id>17241134</id><snippet>@</snippet></ROW><ROW><id>17241134</id><snippet>\x40</snippet></ROW><ROW><id>17241134</id><snippet>y</snippet></ROW><ROW><id>17241134</id><snippet>\x79</snippet></ROW><ROW><id>17241134</id><snippet>&gt;&gt;&gt; '\x13\xa2\x00\x40\x79\xe6\x5f' == '\x13\xa2\x00@y\xe6_'
True
</snippet></ROW><ROW><id>17241134</id><snippet>&gt;&gt;&gt; value = '\x13\xa2\x00@y\xe6_'

&gt;&gt;&gt; pretty_value = ':'.join("{:02X}".format(ord(c)) for c in value)
&gt;&gt;&gt; print(pretty_value)
13:A2:00:40:79:E6:5F
</snippet></ROW><ROW><id>17241134</id><snippet>Expected:         \x13\xa2\x00\x40\x79\xe6\x5f
Actual value: \x00\x13\xa2\x00\x40\x79\xe6
</snippet></ROW><ROW><id>17241165</id><snippet>model</snippet></ROW><ROW><id>17241165</id><snippet>class BetterAPIView(APIView):
    model = None

    def __init__(self, *args, **kwargs):
        if self.model is None:
            raise SomeSortOfConfigurationException
        super(BetterAPIView, self).__init__(*args, **kwargs)

    def get_object(self, pk):
        try:
            return self.model.objects.get(pk=pk)
        catch:
            raise Http404
</snippet></ROW><ROW><id>17241165</id><snippet>class BlogDetail(BetterAPIView):
    model = Post

    def get(self, request, pk, format=None):
        post = self.get_object(pk)
</snippet></ROW><ROW><id>17241345</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def uniqueish_color():
    """There're better ways to generate unique colors, but this isn't awful."""
    return plt.cm.gist_ncar(np.random.random())

xy = (np.random.random((10, 2)) - 0.5).cumsum(axis=0)

fig, ax = plt.subplots()
for start, stop in zip(xy[:-1], xy[1:]):
    x, y = zip(start, stop)
    ax.plot(x, y, color=uniqueish_color())
plt.show()
</snippet></ROW><ROW><id>17241345</id><snippet>LineCollection</snippet></ROW><ROW><id>17241345</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

xy = (np.random.random((1000, 2)) - 0.5).cumsum(axis=0)

# Reshape things so that we have a sequence of:
# [[(x0,y0),(x1,y1)],[(x0,y0),(x1,y1)],...]
xy = xy.reshape(-1, 1, 2)
segments = np.hstack([xy[:-1], xy[1:]])

fig, ax = plt.subplots()
coll = LineCollection(segments, cmap=plt.cm.gist_ncar)
coll.set_array(np.random.random(xy.shape[0]))

ax.add_collection(coll)
ax.autoscale_view()

plt.show()
</snippet></ROW><ROW><id>17241466</id><snippet>import numpy as np
a = np.array([1, 2, 3, 4, 1, 2, 3])
indices, = np.where(a==3)
print indices
# [2 6]
</snippet></ROW><ROW><id>17241553</id><snippet>&lt;Control-Key-1&gt;</snippet></ROW><ROW><id>17241553</id><snippet>import Tkinter as tk
def quit(event):
    print("You pressed Control-Key-1")
    root.quit()

root = tk.Tk()
root.bind('&lt;Control-Key-1&gt;', quit)
root.mainloop()
</snippet></ROW><ROW><id>17241736</id><snippet>urllib.urlretrieve(link, r"C:\Users\%s\Downloads" % (user))</snippet></ROW><ROW><id>17241736</id><snippet>urllib.urlretrieve(link, r"C:\Users\%s\Downloads\SAVE_FILE_NAME" % (user))</snippet></ROW><ROW><id>17241954</id><snippet>is_alive()</snippet></ROW><ROW><id>17241954</id><snippet>if NdeProc.is_alive():
    ...
else:
    ...
</snippet></ROW><ROW><id>17242015</id><snippet>weights</snippet></ROW><ROW><id>17242015</id><snippet>x</snippet></ROW><ROW><id>17242015</id><snippet>y</snippet></ROW><ROW><id>17242015</id><snippet>np.histogram2d</snippet></ROW><ROW><id>17242015</id><snippet>np.histogram2d</snippet></ROW><ROW><id>17242015</id><snippet>weights=np.ones_like(x)*mass
</snippet></ROW><ROW><id>17242015</id><snippet>bin=nbin</snippet></ROW><ROW><id>17242015</id><snippet>xedges</snippet></ROW><ROW><id>17242015</id><snippet>yedges</snippet></ROW><ROW><id>17242015</id><snippet>x</snippet></ROW><ROW><id>17242015</id><snippet>y</snippet></ROW><ROW><id>17242015</id><snippet>np.histogram2d</snippet></ROW><ROW><id>17242015</id><snippet>np.histogram2d</snippet></ROW><ROW><id>17242015</id><snippet>import numpy as np
import itertools as IT
import matplotlib.pyplot as plt
N = 50
nbin = 10

xs = [np.array([i,i,i+1,i+1]) for i in range(N)]
ys = [np.array([i,i+1,i,i+1]) for i in range(N)]
masses = np.arange(N)

heatmap = 0
xedges = np.linspace(0, N, nbin)
yedges = np.linspace(0, N, nbin)

for x, y, mass in IT.izip(xs, ys, masses):
    hist, xedges, yedges = np.histogram2d(
        x, y, bins=[xedges, yedges], weights=np.ones_like(x)*mass)
    heatmap += hist

extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]
heatmap = np.flipud(np.rot90(heatmap))
fig, ax = plt.subplots()
ax.imshow(heatmap, extent=extent, interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>17242284</id><snippet>from BeautifulSoup import BeautifulSoup as soupy
from urllib import urllib
html = urllib.urlopen(YOUR_TWITTER_URL).read()
soup = soupy(html)
for tweet in soup.find('ol',attrs={'class':'stream-items'}).findAll('li'):
     print tweet.find('p').text
</snippet></ROW><ROW><id>17242289</id><snippet>python3-setuptools</snippet></ROW><ROW><id>17242289</id><snippet>sudo aptitude install python3-setuptools</snippet></ROW><ROW><id>17242289</id><snippet>easy_install3</snippet></ROW><ROW><id>17242289</id><snippet>sudo easy_install3 pip</snippet></ROW><ROW><id>17242289</id><snippet>pip-3.2</snippet></ROW><ROW><id>17242289</id><snippet>sudo pip-3.2 install &lt;package&gt;</snippet></ROW><ROW><id>17242299</id><snippet>set</snippet></ROW><ROW><id>17242299</id><snippet>s = set()
s.add(element)
</snippet></ROW><ROW><id>17242299</id><snippet>s = {}
s[element] = None
</snippet></ROW><ROW><id>17242321</id><snippet>
pattern = '&lt;td.*?bgcolor="#ff9900".*?&gt;(.*?)&lt;/th&gt;'
re.findall(pattern, html) 
</snippet></ROW><ROW><id>17242337</id><snippet>try:
    names = prod['COMPONENTS'][0][1][0][2]
except LookupError:
    print "It failed"
    # Do whatever you need to do in case of failure
</snippet></ROW><ROW><id>17242365</id><snippet>s = ','.join(info)
f.write(s + '\n')
</snippet></ROW><ROW><id>17242374</id><snippet>values</snippet></ROW><ROW><id>17242374</id><snippet>In [1]: df = pd.DataFrame(index=['a', 'b'])

In [2]: df.index.values
Out[2]: array(['a', 'b'], dtype=object)
</snippet></ROW><ROW><id>17242397</id><snippet>restype</snippet></ROW><ROW><id>17242397</id><snippet>argtypes</snippet></ROW><ROW><id>17242397</id><snippet>int</snippet></ROW><ROW><id>17242397</id><snippet>from ctypes import *

lib = CDLL('./libfoo.so')

lib.Foo_new.argtypes = []
lib.Foo_new.restype = c_void_p

lib.Foo_bar.argtypes = [c_void_p]
lib.Foo_bar.restype = None
</snippet></ROW><ROW><id>17242397</id><snippet>ConvParam</snippet></ROW><ROW><id>17242397</id><snippet>GetResult</snippet></ROW><ROW><id>17242397</id><snippet>long</snippet></ROW><ROW><id>17242397</id><snippet>int</snippet></ROW><ROW><id>17242398</id><snippet>from itertools import cycle, islice

def merge(a, b, pos):
    "merge('ABCDEF', [1,2,3], 3) --&gt; A B 1 C D 2 E F 3"
    iterables = [iter(a)]*(pos-1) + [iter(b)]
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</snippet></ROW><ROW><id>17242398</id><snippet>&gt;&gt;&gt; list(merge(xrange(1, 9), 'abc', 3))   # note that this works for any iterable!
[1, 2, 'a', 3, 4, 'b', 5, 6, 'c', 7, 8]
</snippet></ROW><ROW><id>17242398</id><snippet>roundrobin()</snippet></ROW><ROW><id>17242398</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,5,6,7,8]
&gt;&gt;&gt; y = ['a','b','c']
&gt;&gt;&gt; list(roundrobin(*([iter(x)]*2 + [y])))
[1, 2, 'a', 3, 4, 'b', 5, 6, 'c', 7, 8]
</snippet></ROW><ROW><id>17242398</id><snippet>&gt;&gt;&gt; xiter = iter(x)
&gt;&gt;&gt; list(roundrobin(xiter, xiter, y))
[1, 2, 'a', 3, 4, 'b', 5, 6, 'c', 7, 8]
</snippet></ROW><ROW><id>17242398</id><snippet>roundrobin()</snippet></ROW><ROW><id>17242398</id><snippet>from itertools import cycle, islice

def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</snippet></ROW><ROW><id>17242457</id><snippet>def allbinarytrees(s):
    if len(s) == 1:
        yield s
    else:
        for i in range(1, len(s), 2):
            for l in allbinarytrees(s[:i]):
                for r in allbinarytrees(s[i+1:]):
                    yield '({}{}{})'.format(l, s[i], r)
</snippet></ROW><ROW><id>17242457</id><snippet>for t in allbinarytrees('1+2-3*4/5'):
    print(t)
</snippet></ROW><ROW><id>17242457</id><snippet>(1+(2-(3*(4/5))))
(1+(2-((3*4)/5)))
(1+((2-3)*(4/5)))
(1+((2-(3*4))/5))
(1+(((2-3)*4)/5))
((1+2)-(3*(4/5)))
((1+2)-((3*4)/5))
((1+(2-3))*(4/5))
(((1+2)-3)*(4/5))
((1+(2-(3*4)))/5)
((1+((2-3)*4))/5)
(((1+2)-(3*4))/5)
(((1+(2-3))*4)/5)
((((1+2)-3)*4)/5)
</snippet></ROW><ROW><id>17242481</id><snippet>job</snippet></ROW><ROW><id>17242481</id><snippet># assume selected_job is the job instance
try:
    host = Host.objects.get(name=hostname)
except ObjectDoesNotExist:
    # do something here to handle an unmatched hostname
    pass
host.job = selected_job
host.save()
</snippet></ROW><ROW><id>17242588</id><snippet>relevant = re.search(r"MAIN FISHERMAN(.*)SECONDARY FISHERMAN", html, re.DOTALL).group(1)
found = relevant.count("SEA BASS")
</snippet></ROW><ROW><id>17242629</id><snippet>gc.collect()</snippet></ROW><ROW><id>17242629</id><snippet>obj_type = None
gc.collect()
print type_ref()
</snippet></ROW><ROW><id>17242629</id><snippet>collect()</snippet></ROW><ROW><id>17242712</id><snippet>User()</snippet></ROW><ROW><id>17242712</id><snippet>class Group(Base):
    __tablename__ = 'groups'
    id = Column(Integer, primary_key=True)

    users = relationship('User', secondary=users_groups, lazy='select', backref='groups')
    users_dynamic = relationship('User', viewonly=True, secondary=users_groups, lazy='dynamic')
</snippet></ROW><ROW><id>17242712</id><snippet>class Group(Base):
    __tablename__ = 'groups'
    id = Column(Integer, primary_key=True)

    users = relationship('User', secondary=users_groups, lazy='select', backref='groups')
    users_dynamic = relationship('User', passive_deletes=True, secondary=users_groups, lazy='dynamic')
</snippet></ROW><ROW><id>17242863</id><snippet>Foo</snippet></ROW><ROW><id>17242863</id><snippet>Bar</snippet></ROW><ROW><id>17242863</id><snippet>Foo.LABELS</snippet></ROW><ROW><id>17242863</id><snippet>Bar.labels</snippet></ROW><ROW><id>17242871</id><snippet>query.from_self().order_by(asc(Order.position))</snippet></ROW><ROW><id>17242871</id><snippet>subquery()</snippet></ROW><ROW><id>17242871</id><snippet>highest_order = s.query(Order.customer_id, func.max(Order.position).label('position')).\
                    filter(Order.oh_reqdate == date_q).\
                    filter(Order.vehicle_id == vehicle.id).\
                    group_by(Order.customer_id).\
                    subquery()

s.query(Order).\
    join(Customer).\
    join(highest_order, highest_order.c.customer_id == Customer.id).\
    filter(Order.oh_reqdate == date_q).\
    filter(Order.vehicle_id == vehicle.id).\
    filter(Order.position == highest_order.c.position)
</snippet></ROW><ROW><id>17243037</id><snippet>y = map(testfunction, x)
</snippet></ROW><ROW><id>17243037</id><snippet>testfunction</snippet></ROW><ROW><id>17243037</id><snippet>x</snippet></ROW><ROW><id>17243137</id><snippet>      from django.contrib.auth.signals import user_logged_in
      from tastypie.models import ApiKey


      def generate_api_key(sender, user, request, **kwargs):
          api_key = ApiKey.objects.get_or_create(user=user)
          api_key.key = api_key.generate_key()
          api_key.save()

      user_logged_in.connect(generate_api_key)
</snippet></ROW><ROW><id>17243155</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>17243155</id><snippet>from operator import itemgetter

multiple_index = map(itemgetter(0, 3, 4), L)
</snippet></ROW><ROW><id>17243155</id><snippet>multiple_index = [itemgetter(0, 3, 4)(i) for i in L]
</snippet></ROW><ROW><id>17243316</id><snippet>import matplotlib.pyplot as plt

a= [1,2,3,4,5,6,7,8,9]
b= [5,3,4,5,3,2,1,2,3]
plt.hist(a,9, weights=b)
plt.show()
</snippet></ROW><ROW><id>17243334</id><snippet>import subprocess

subprocess.check_call(['/my/file/path/programname.sh', 'arg1', 'arg2', arg3])
</snippet></ROW><ROW><id>17243334</id><snippet>arg3</snippet></ROW><ROW><id>17243334</id><snippet>check_call()</snippet></ROW><ROW><id>17243334</id><snippet>arg3 = str(arg3)</snippet></ROW><ROW><id>17243346</id><snippet>In [11]: g
Out[11]:
                                               Sales
Manufacturer Product Name Product Launch Date
Apple        iPad         2010-04-03              30
             iPod         2001-10-23              34
Samsung      Galaxy       2009-04-27              24
             Galaxy Tab   2010-09-02              22

In [12]: g.index = g.index.swaplevel(1, 2)
</snippet></ROW><ROW><id>17243346</id><snippet>In [13]: g = g.sortlevel()
</snippet></ROW><ROW><id>17243346</id><snippet>In [14]: g.index = g.index.swaplevel(1, 2)

In [15]: g
Out[15]:
                                               Sales
Manufacturer Product Name Product Launch Date
Apple        iPod         2001-10-23              34
             iPad         2010-04-03              30
Samsung      Galaxy       2009-04-27              24
             Galaxy Tab   2010-09-02              22
</snippet></ROW><ROW><id>17243346</id><snippet>swaplevel</snippet></ROW><ROW><id>17243346</id><snippet>g = df.groupby(['Manufacturer', 'Product Launch Date', 'Product Name']).sum()
</snippet></ROW><ROW><id>17243356</id><snippet>&gt;&gt;&gt; data = [[0, 1, 3, 7, 8, 11, 12], [8, 0, 1, 2, 3, 14], 2]
&gt;&gt;&gt; [a for x in data for a in (x if isinstance(x, list) else [x])]
[0, 1, 3, 7, 8, 11, 12, 8, 0, 1, 2, 3, 14, 2]
</snippet></ROW><ROW><id>17243356</id><snippet>collections.Iterable</snippet></ROW><ROW><id>17243356</id><snippet>In [9]: %timeit list(chain.from_iterable(solve(data)))
100000 loops, best of 3: 9.22 us per loop

In [10]: %timeit [a for x in data for a in (x if isinstance(x, Iterable) else [x])]
100000 loops, best of 3: 6.45 us per loop
</snippet></ROW><ROW><id>17243380</id><snippet>normalize</snippet></ROW><ROW><id>17243380</id><snippet>bdate_range</snippet></ROW><ROW><id>17243380</id><snippet>In [11]: dates = pnd.bdate_range(start=d, end=d+pnd.DateOffset(days=5), normalize=False)

In [12]: for d1 in dates :
             print d1
2013-01-01 16:00:00
2013-01-02 16:00:00
2013-01-03 16:00:00
2013-01-04 16:00:00
</snippet></ROW><ROW><id>17243380</id><snippet>base</snippet></ROW><ROW><id>17243475</id><snippet>fileinput</snippet></ROW><ROW><id>17243475</id><snippet>&gt;&gt;&gt; strs = "sample4:15"
</snippet></ROW><ROW><id>17243475</id><snippet>&gt;&gt;&gt; sample, value = strs.split(':')
&gt;&gt;&gt; sample
'sample4'
&gt;&gt;&gt; value
'15'
</snippet></ROW><ROW><id>17243475</id><snippet>import fileinput
for line in fileinput.input(filename, inplace = True):
    sample, value = line.split(':')
    value = int(value)     #convert value to int for calculation purpose
    if some_condition: 
           # do some calculations on sample and value
           # modify sample, value if required 

    #now the write the data(either modified or still the old one) to back to file
    print "{}:{}".format(sample, value)
</snippet></ROW><ROW><id>17243528</id><snippet># let publication be your existing Pets publication instance
cats_tag, created = Tag.objects.get_or_create(title='cats')
publication.tags.add(cats_tag)
</snippet></ROW><ROW><id>17243549</id><snippet>dict</snippet></ROW><ROW><id>17243549</id><snippet>class MyClass:
    # your code here

c1 = MyClass()
c2 = MyClass()

D = dict({c1:1,c2:2})

D[c1] # will return 1
D[c2] # will return 2
</snippet></ROW><ROW><id>17243738</id><snippet>addresses = User.objects.filter(group__group='Operations').values_list('email', flat=True)
</snippet></ROW><ROW><id>17243960</id><snippet>__main__</snippet></ROW><ROW><id>17243960</id><snippet>__main__</snippet></ROW><ROW><id>17243960</id><snippet>sys.modules</snippet></ROW><ROW><id>17243960</id><snippet>import</snippet></ROW><ROW><id>17243960</id><snippet>python main.py</snippet></ROW><ROW><id>17243960</id><snippet>main.py</snippet></ROW><ROW><id>17243960</id><snippet>import main</snippet></ROW><ROW><id>17243960</id><snippet>main</snippet></ROW><ROW><id>17243960</id><snippet>main.py</snippet></ROW><ROW><id>17243960</id><snippet>sys.path</snippet></ROW><ROW><id>17244095</id><snippet>get_loc</snippet></ROW><ROW><id>17244095</id><snippet>In [11]: df.index.get_loc(ds)
Out[11]: 1
</snippet></ROW><ROW><id>17244177</id><snippet>for key, value in csvOutput.items():
    writer.writerow([key, value])

f1.close() # I hadn't closed it here.

f2 = open(csvFileName)
jira.add_attachment(issueKey, f)
f2.close()
</snippet></ROW><ROW><id>17244204</id><snippet>FloatProperty</snippet></ROW><ROW><id>17244204</id><snippet>class FloatProperty(Property):
    def get_default(self):
        return 0.0

    def to_neo(self, value):
        return float(value)
</snippet></ROW><ROW><id>17244271</id><snippet>b</snippet></ROW><ROW><id>17244271</id><snippet>while True:
    a, b = b, a + b  
    if b &gt; 4000000:
        break
    print b
    if b &lt; 4000000 and b % 2 == 0:
        result.append(b)
</snippet></ROW><ROW><id>17244271</id><snippet>b</snippet></ROW><ROW><id>17244271</id><snippet>result</snippet></ROW><ROW><id>17244271</id><snippet>yield</snippet></ROW><ROW><id>17244271</id><snippet>yield</snippet></ROW><ROW><id>17244271</id><snippet>def fibsum():
    a, b = 0, 1
    while True:
        a, b = b, a + b
        if b &gt; 4000000:
            break
        yield b

result = []
for val in fibsum():
    if val &lt; 4000000 and val % 2 == 0:
            result.append(val)

print sum(result)
</snippet></ROW><ROW><id>17244271</id><snippet>fibsum()</snippet></ROW><ROW><id>17244305</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': ''
    }
}
</snippet></ROW><ROW><id>17244305</id><snippet>from neo4django import admin
from users.models import Person

class PersonAdmin(admin.ModelAdmin):
    ...    

admin.site.register(Person, PersonAdmin)
</snippet></ROW><ROW><id>17244305</id><snippet>single=True</snippet></ROW><ROW><id>17244305</id><snippet>user</snippet></ROW><ROW><id>17244305</id><snippet>Person</snippet></ROW><ROW><id>17244305</id><snippet>User</snippet></ROW><ROW><id>17244305</id><snippet>related_single=True, related_name='person'</snippet></ROW><ROW><id>17244372</id><snippet>break</snippet></ROW><ROW><id>17244372</id><snippet>with open('data') as f:
    for line in f:
       if '#' in line:
           break
       # do something else in the loop
       # like append something to a list

# analyze the data
</snippet></ROW><ROW><id>17244417</id><snippet>def my_pop(l):
    new = []
    l = list(l)
    for i in l:
        if l[-1] == i:
            pass
        else:
            new.append(i)
    return new
</snippet></ROW><ROW><id>17244417</id><snippet>def my_pop(l):
    return l[:-1]
</snippet></ROW><ROW><id>17244477</id><snippet>random.sample</snippet></ROW><ROW><id>17244477</id><snippet>without</snippet></ROW><ROW><id>17244477</id><snippet>selected = random.sample(xrange(100000, 1000000), 500)
</snippet></ROW><ROW><id>17244504</id><snippet>table_row = Table(**table_entries)
</snippet></ROW><ROW><id>17244504</id><snippet>Table()</snippet></ROW><ROW><id>17244504</id><snippet>class Table

    def __init__(self, row):
            self.__dict__.update(row)
</snippet></ROW><ROW><id>17244587</id><snippet>import sys
import code

def reset():
    raise SystemExit(123)

sys.modules['__builtin__'].reset = reset

banner = None

while 1:
    try:
        code.interact(banner=banner, local={})
        break
    except SystemExit as e:
        if e.code == 123:
            banner = 'Resetting...'
            continue
        raise
</snippet></ROW><ROW><id>17244587</id><snippet>Python 2.7.4 (default, Apr 19 2013, 18:28:01)
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
&gt;&gt;&gt; dir()
['__builtins__']
&gt;&gt;&gt; a = 1
&gt;&gt;&gt; dir()
['__builtins__', 'a']
&gt;&gt;&gt; reset()
Resetting...
&gt;&gt;&gt; dir()
['__builtins__']
</snippet></ROW><ROW><id>17244653</id><snippet>Counter</snippet></ROW><ROW><id>17244653</id><snippet>collections</snippet></ROW><ROW><id>17244653</id><snippet>from collections import Counter

GROUP_SIZE = 5
counter = Counter()
mylist = []

with open("tags.txt", "r") as tagfile:
    tags = (line.strip() for line in tagfile)
    try:
        while len(mylist) &lt; GROUP_SIZE-1:
            mylist.append(tags.next())
    except StopIteration:
        pass

    for tag in tags:   # main loop
        mylist.pop(0)
        mylist.append(tag)
        counter.update((tuple(mylist),))

if len(counter) &lt; 1:
    print 'too few tags in file'
else:
    for tags, count in counter.most_common(10):  # top 10
        print '{}, count = {:,d}'.format(list(tags), count)
</snippet></ROW><ROW><id>17244653</id><snippet>deque</snippet></ROW><ROW><id>17244653</id><snippet>collections</snippet></ROW><ROW><id>17244653</id><snippet>list</snippet></ROW><ROW><id>17244653</id><snippet>pop()</snippet></ROW><ROW><id>17244653</id><snippet>from collections import Counter, deque

GROUP_SIZE = 5
counter = Counter()
mydeque = deque(maxlen=GROUP_SIZE)

with open("tags.txt", "r") as tagfile:
    tags = (line.strip() for line in tagfile)
    try:
        while len(mydeque) &lt; GROUP_SIZE-1:
            mydeque.append(tags.next())
    except StopIteration:
        pass

    for tag in tags:   # main loop
        mydeque.append(tag)
        counter.update((tuple(mydeque),))

if len(counter) &lt; 1:
    print 'too few tags in file'
else:
    for tags, count in counter.most_common(10):  # top 10
        print '{}, count = {:,d}'.format(list(tags), count)
</snippet></ROW><ROW><id>17244694</id><snippet>facepy</snippet></ROW><ROW><id>17244859</id><snippet>==</snippet></ROW><ROW><id>17244859</id><snippet>&amp;</snippet></ROW><ROW><id>17244859</id><snippet>if</snippet></ROW><ROW><id>17244859</id><snippet>if gwupdate &amp; (ord(bit) == ord(bit)):
</snippet></ROW><ROW><id>17244859</id><snippet>if (gwupdate &amp; ord(bit)) == ord(bit):
</snippet></ROW><ROW><id>17244859</id><snippet>gw_func_dict = dict((chr(2**i), func) for i, func in enumerate(gwfuncs[:8]))
</snippet></ROW><ROW><id>17244859</id><snippet>gw_func_dict = {chr(2**i): func for i, func in enumerate(gwfuncs[:8])}
</snippet></ROW><ROW><id>17244859</id><snippet>.keys()</snippet></ROW><ROW><id>17244859</id><snippet>for</snippet></ROW><ROW><id>17244859</id><snippet>for bit in gw_func_dict:
</snippet></ROW><ROW><id>17244894</id><snippet>void *</snippet></ROW><ROW><id>17244894</id><snippet>void *</snippet></ROW><ROW><id>17244894</id><snippet>obj</snippet></ROW><ROW><id>17244894</id><snippet>def __eq__(self, other):
    return lib.compare_edge(self.obj, c_void_p(other))
</snippet></ROW><ROW><id>17244894</id><snippet>def __eq__(self, other):
    return lib.compare_edge(self.obj, other.obj)
</snippet></ROW><ROW><id>17244894</id><snippet>c_void_p</snippet></ROW><ROW><id>17244894</id><snippet>lib.compare_edge.argtypes = [c_void_p, c_void_p]
</snippet></ROW><ROW><id>17245065</id><snippet>xlim</snippet></ROW><ROW><id>17245065</id><snippet>ylim</snippet></ROW><ROW><id>17245096</id><snippet>class Foo(object):
    bar = None  # shared

    def __init__(self):
        type(self).bar = 'baz'  # still shared, *per subclass*
        Foo.bar = 'baz'         # still shared, across all subclasses*
</snippet></ROW><ROW><id>17245096</id><snippet>type(self)</snippet></ROW><ROW><id>17245096</id><snippet>type(self)</snippet></ROW><ROW><id>17245303</id><snippet>words = '''Some sentence that is spliced...
and has a continuation.
this cannot be confused by U.S.A.
In that
last sentence... 
an abbreviation ended the sentence!'''.split()

def format_sentence(words):
    output = []

    for word in words:
        if word.endswith('...') or not word.endswith('.'):
            output.append(word)
            output.append(' ')
        elif word.endswith('.'):
            output.append(word)
            output.append('\n')
        else:
            raise ValueError('Unexpected result from word: %r' % word)

    return ''.join(output)

print format_sentence(words)
</snippet></ROW><ROW><id>17245303</id><snippet>Some sentence that is spliced... and has a continuation.
this cannot be confused by U.S.A.
In that last sentence...  an abbreviation ended the sentence!
</snippet></ROW><ROW><id>17245305</id><snippet>for button in btnList:
    button.configure(state='disabled')
</snippet></ROW><ROW><id>17245305</id><snippet>button</snippet></ROW><ROW><id>17245305</id><snippet>configure()</snippet></ROW><ROW><id>17245460</id><snippet>from lxml import etree

tree = etree.parse('books.xml')

new_entry = etree.fromstring('''&lt;book category="web" cover="paperback"&gt;
&lt;title lang="en"&gt;Learning XML 2&lt;/title&gt;
&lt;author&gt;Erik Ray&lt;/author&gt;
&lt;year&gt;2006&lt;/year&gt;
&lt;price&gt;49.95&lt;/price&gt;
&lt;/book&gt;''')

root = tree.getroot()

root.append(new_entry)

f = open('books-mod.xml', 'w')
f.write(etree.tostring(root, pretty_print=True))
f.close()
</snippet></ROW><ROW><id>17245556</id><snippet>myArticles = [glob.glob(article_path)]
</snippet></ROW><ROW><id>17245556</id><snippet>myArticles = glob.glob(article_path)
</snippet></ROW><ROW><id>17245556</id><snippet>glob.glob</snippet></ROW><ROW><id>17245556</id><snippet>[]</snippet></ROW><ROW><id>17245556</id><snippet>for items in myArticles:
    get_html(items)
</snippet></ROW><ROW><id>17245556</id><snippet>get_html</snippet></ROW><ROW><id>17245556</id><snippet>open</snippet></ROW><ROW><id>17245556</id><snippet>&gt;&gt;&gt; open([])
Traceback (most recent call last):
  File "&lt;ipython-input-242-013dc85bc958&gt;", line 1, in &lt;module&gt;
    open([])
TypeError: coercing to Unicode: need string or buffer, list found
</snippet></ROW><ROW><id>17245567</id><snippet>class MyDB:
     def __init__(sql_server,user,password):
          self.server = sql_server
          self.user = user
          self.password = password

      def __getattr__(self,key):
           conn = MYSQLDB.connect(self.server,self.user,self.password)
           val = getattr(conn,key)
           conn.close()
           return val
</snippet></ROW><ROW><id>17245567</id><snippet>db = MyDb(my_server,my_user,my_pass)
</snippet></ROW><ROW><id>17245567</id><snippet>from settings import db
db.whatever()
#or
import settings
settings.db.do_something()
</snippet></ROW><ROW><id>17245736</id><snippet>import sys
sys.stderr = open("some_log.txt","wb")
</snippet></ROW><ROW><id>17245736</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; import sys
&gt;&gt;&gt; s = StringIO.StringIO()
&gt;&gt;&gt; sys.stderr = s
&gt;&gt;&gt; 5=7
&gt;&gt;&gt; 5/0
&gt;&gt;&gt; s.seek(0)
&gt;&gt;&gt; s.read()
'  File "&lt;stdin&gt;", line 1\nSyntaxError: can\'t assign to literal\nTraceback (mos
t recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\nZeroDivisionError:
integer division or modulo by zero\n'
</snippet></ROW><ROW><id>17246032</id><snippet>plt.gca().set_xlim([0, 255])
</snippet></ROW><ROW><id>17246056</id><snippet>nonlocal</snippet></ROW><ROW><id>17246056</id><snippet>&gt;&gt;&gt; def QQ():
...     a = 0
...     def QQQ():
...         nonlocal a
...         a += 1
...     QQQ()
...     return a
...
&gt;&gt;&gt; QQ()
1
</snippet></ROW><ROW><id>17246056</id><snippet>nonlocal</snippet></ROW><ROW><id>17246140</id><snippet>\</snippet></ROW><ROW><id>17246140</id><snippet>+</snippet></ROW><ROW><id>17246140</id><snippet>/</snippet></ROW><ROW><id>17246140</id><snippet>re.sub(r"\+1","","+1585123456")
</snippet></ROW><ROW><id>17246207</id><snippet>self.textArea.AppendText</snippet></ROW><ROW><id>17246207</id><snippet>PostEvent</snippet></ROW><ROW><id>17246207</id><snippet>CallAfter</snippet></ROW><ROW><id>17246207</id><snippet>CallLater</snippet></ROW><ROW><id>17246207</id><snippet>pubsub</snippet></ROW><ROW><id>17246207</id><snippet>threading</snippet></ROW><ROW><id>17246207</id><snippet>CallAfter</snippet></ROW><ROW><id>17246207</id><snippet>PostEvent</snippet></ROW><ROW><id>17246207</id><snippet>CallLater</snippet></ROW><ROW><id>17246207</id><snippet>CallAfter</snippet></ROW><ROW><id>17246207</id><snippet>threading</snippet></ROW><ROW><id>17246207</id><snippet>def listen_event(self, data):
    wx.CallAfter(self.textArea.AppendText, data)
</snippet></ROW><ROW><id>17246207</id><snippet>self</snippet></ROW><ROW><id>17246207</id><snippet>wx</snippet></ROW><ROW><id>17246300</id><snippet>readlines()</snippet></ROW><ROW><id>17246300</id><snippet>readlines()</snippet></ROW><ROW><id>17246300</id><snippet>readlines()</snippet></ROW><ROW><id>17246300</id><snippet>readlines()</snippet></ROW><ROW><id>17246300</id><snippet>list</snippet></ROW><ROW><id>17246300</id><snippet>str</snippet></ROW><ROW><id>17246300</id><snippet>read()</snippet></ROW><ROW><id>17246300</id><snippet>str</snippet></ROW><ROW><id>17246300</id><snippet>readlines(sizehint)</snippet></ROW><ROW><id>17246300</id><snippet>read(size)</snippet></ROW><ROW><id>17246300</id><snippet>readline()</snippet></ROW><ROW><id>17246300</id><snippet>mmap</snippet></ROW><ROW><id>17246300</id><snippet>foo</snippet></ROW><ROW><id>17246300</id><snippet>with open('foo') as f:
    lines = f.readlines()
    for line in lines:
        pass
</snippet></ROW><ROW><id>17246300</id><snippet>with open('foo') as f:
    while True:
        lines = f.readlines(8192)
        if not lines:
            break
        for line in lines:
            pass
</snippet></ROW><ROW><id>17246300</id><snippet>with open('foo') as f:
    while True:
        line = f.readline()
        if not line:
            break
        pass
</snippet></ROW><ROW><id>17246300</id><snippet>with open('foo') as f:
    for line in f:
        pass
</snippet></ROW><ROW><id>17246300</id><snippet>file_content</snippet></ROW><ROW><id>17246300</id><snippet>malloc</snippet></ROW><ROW><id>17246300</id><snippet>for filename in os.listdir(input_dir):
    with open(filename, 'rb') as f:
        if filename.endswith(".gz"):
            f = gzip.open(fileobj=f)
        words = (line.split(delimiter) for line in f)
        ... my logic ...  
</snippet></ROW><ROW><id>17246300</id><snippet>for filename in os.listdir(input_dir):
    if filename.endswith(".gz"):
        f = gzip.open(filename, 'rb')
    else:
        f = open(filename, 'rb')
    with contextlib.closing(f):
        words = (line.split(delimiter) for line in f)
        ... my logic ...
</snippet></ROW><ROW><id>17246325</id><snippet>import pandas as pd
import sqlalchemy as sql
import sqlalchemy.orm as orm



sh = pd.ExcelFile("ExcelFileName").parse("SheetName")
db=sql.create_engine('DBtype://username:password@localhost:postnumber/dbname')
metadata = sql.schema.MetaData(bind=db,reflect=True)



table = sql.Table('TableinDB', metadata, autoload=True)

class Row(object):
 pass
rowmapper = orm.Mapper(Row,table)
print table.columns

Sess = orm.sessionmaker(bind = db)
session = Sess()

for x in range(len(sh.values)):
 row1 = Row() 
 row1.field1 = sh.values[x][0]
 row1.field2 = sh.values[x][1]
 #Add as many fields as you want
session.add(row1)
#forloop ends
session.commit()
</snippet></ROW><ROW><id>17246413</id><snippet>&gt;&gt;&gt; def test():
...     yield True
...     print 'one'
...     yield False
...     print 'two'
...     yield True
...     print 'three'
...
&gt;&gt;&gt; all(test())
one
False
</snippet></ROW><ROW><id>17246413</id><snippet>def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
</snippet></ROW><ROW><id>17246413</id><snippet>return</snippet></ROW><ROW><id>17246744</id><snippet>import copy

a = [1, 2, 3]
b = [4, 5, 6]
c = [a, b]
</snippet></ROW><ROW><id>17246744</id><snippet>d = c

print id(c) == id(d)          # True - d is the same object as c
print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
</snippet></ROW><ROW><id>17246744</id><snippet>d = copy.copy(c)

print id(c) == id(d)          # False - d is now a new object
print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
</snippet></ROW><ROW><id>17246744</id><snippet>d = copy.deepcopy(c)

print id(c) == id(d)          # False - d is now a new object
print id(c[0]) == id(d[0])    # False - d[0] is now a new object
</snippet></ROW><ROW><id>17246765</id><snippet>np.indices</snippet></ROW><ROW><id>17246765</id><snippet>x_coords = thisArray[0, :, :]</snippet></ROW><ROW><id>17246765</id><snippet>y_coords = thisArray[1, :, :]</snippet></ROW><ROW><id>17246765</id><snippet>thisArray = numpy.rollaxis(numpy.indices(shape), 0, len(shape)+1)
</snippet></ROW><ROW><id>17246816</id><snippet>index.html</snippet></ROW><ROW><id>17246816</id><snippet>http_cache</snippet></ROW><ROW><id>17246816</id><snippet>config.add_route('index', '/')
config.add_route('api.users', '/api/users')
config.add_route('api.user_by_id', '/api/users/{userid}')

@view_config(route_name='index', renderer='myapp:templates/index.html', http_cache=3600*24*365)
def index_view(request):
    return {}

@view_config(route_name='api.users', request_method='POST', renderer='json')
def create_user_view(request):
    # create a user via the request.POST parameters
    return {
        'userid': user.id,
    }

@view_config(route_name='api', request_method='GET', renderer='json')
def user_info_view(request):
    userid = request.matchdict['userid']
    # lookup user
    return {
        'name': user.name,
    }
</snippet></ROW><ROW><id>17246903</id><snippet>def example(f):
    return f(1) + f(2)
</snippet></ROW><ROW><id>17246903</id><snippet>def square(n):
    return n * n
</snippet></ROW><ROW><id>17246903</id><snippet>example(square)  # = square(1) + square(2) = 1 + 4 = 5
</snippet></ROW><ROW><id>17246903</id><snippet>lambda</snippet></ROW><ROW><id>17246903</id><snippet>example(lambda n: n * n)
</snippet></ROW><ROW><id>17246911</id><snippet>L = []
for i in range(n):
    L.append(raw_input('Rating: '))
</snippet></ROW><ROW><id>17246911</id><snippet>sum(map(int, L)) / len(l)
</snippet></ROW><ROW><id>17246911</id><snippet>L = [int(raw_input('Rating: ')) for _ in range(n)]
sum(L) / len(L)
</snippet></ROW><ROW><id>17246911</id><snippet>from __future__ import division
sum(L) / len(L)
</snippet></ROW><ROW><id>17246911</id><snippet>from __future__ import division</snippet></ROW><ROW><id>17246911</id><snippet>/</snippet></ROW><ROW><id>17246911</id><snippet>L.append(raw_input('Rating: '))</snippet></ROW><ROW><id>17246911</id><snippet>None</snippet></ROW><ROW><id>17246911</id><snippet>m =</snippet></ROW><ROW><id>17246911</id><snippet>m</snippet></ROW><ROW><id>17246911</id><snippet>m = raw_input("Rating: ")
L.append(m)
</snippet></ROW><ROW><id>17246911</id><snippet>str(m)</snippet></ROW><ROW><id>17246911</id><snippet>raw_input()</snippet></ROW><ROW><id>17246911</id><snippet>with</snippet></ROW><ROW><id>17246911</id><snippet>close()</snippet></ROW><ROW><id>17246911</id><snippet>with open('music.txt','a') as f:
    for i in range(n):
        line = raw_input('Next Track: ')
        m = raw_input("Rating: ")
        L.append(m)
        overall = sum(map(int, L)) / len(L)
        f.write("Track Name: " + line + " - Rating: " + m + "\n")
</snippet></ROW><ROW><id>17246983</id><snippet>&gt;&gt;&gt; html = """&lt;ul class='my_class'&gt;
... &lt;li&gt;thing one&lt;/li&gt;
... &lt;li&gt;thing two&lt;/li&gt;
... &lt;/ul&gt;"""
&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; soup = BS(html)
&gt;&gt;&gt; for ultag in soup.find_all('ul', {'class': 'my_class'}):
...     for litag in ultag.find_all('li'):
...             print litag.text
... 
thing one
thing two
</snippet></ROW><ROW><id>17246983</id><snippet>soup.find_all('ul', {'class': 'my_class'})</snippet></ROW><ROW><id>17246983</id><snippet>ul</snippet></ROW><ROW><id>17246983</id><snippet>my_class</snippet></ROW><ROW><id>17246983</id><snippet>li</snippet></ROW><ROW><id>17246983</id><snippet>ul</snippet></ROW><ROW><id>17247156</id><snippet>copy.copy</snippet></ROW><ROW><id>17247156</id><snippet>canvas.copy_image = label.master_image</snippet></ROW><ROW><id>17247156</id><snippet>from PIL import Image, ImageTk
import Tkinter as tk
import os

def callback(event):
    idx, = listbox.curselection()
    path = os.path.join('images', listbox.get(idx))
    label.master_image=ImageTk.PhotoImage(Image.open(path))
    label.configure(image=label.master_image)


def apply():
    canvas.copy_image = label.master_image
    canvas.create_image(10,10, image=canvas.copy_image)


root=tk.Tk()

frame=tk.Frame(master=root)
canvas=tk.Canvas(master=frame)

listbox=tk.Listbox(master=frame)
listbox.insert(tk.END, *os.listdir('images'))
listbox.bind('&lt;ButtonRelease-1&gt;', callback)

label=tk.Label(master=frame)

button=tk.Button(master=frame, text='Apply', command=apply)

canvas.pack()
frame.pack()
listbox.pack()
label.pack()
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>17247175</id><snippet>test = self.request.POST['filecsv'].value
</snippet></ROW><ROW><id>17247175</id><snippet>getvalue()</snippet></ROW><ROW><id>17247212</id><snippet>conf</snippet></ROW><ROW><id>17247212</id><snippet>pkgutil.get_data()</snippet></ROW><ROW><id>17247212</id><snippet>import pkgutil

data = pkgutil.get_data("conf", "constants.cfg")
</snippet></ROW><ROW><id>17247212</id><snippet>setuptools</snippet></ROW><ROW><id>17247212</id><snippet>pkg_resources.resource_string()</snippet></ROW><ROW><id>17247212</id><snippet>import pkg_resources

data = pkg_resources.resource_string('conf', 'constants.cfg')
</snippet></ROW><ROW><id>17247212</id><snippet>constants.cfg</snippet></ROW><ROW><id>17247212</id><snippet>CONFIG_MANAGER_CONSTANTS_PATH</snippet></ROW><ROW><id>17247212</id><snippet>os.path.expanduser("~/.config/ConfigManager/constants.cfg")</snippet></ROW><ROW><id>17247212</id><snippet>os.getcwd()</snippet></ROW><ROW><id>17247212</id><snippet>ConfigManager.py</snippet></ROW><ROW><id>17247212</id><snippet>"../../..."</snippet></ROW><ROW><id>17247212</id><snippet>ConfigManager.py</snippet></ROW><ROW><id>17247212</id><snippet>constants.cfg</snippet></ROW><ROW><id>17247212</id><snippet>import inspect
import os
import sys

def get_my_path():
    try:
        filename = __file__ # where we were when the module was loaded
    except NameError: # fallback
        filename = inspect.getsourcefile(get_my_path)
    return os.path.realpath(filename)

# path to ConfigManager.py
cm_path = get_my_path()
# go 6 directory levels up
sp_path = reduce(lambda x, f: f(x), [os.path.dirname]*6, cm_path)
constants_path = os.path.join(sp_path, "conf", "constants.cfg")
</snippet></ROW><ROW><id>17247262</id><snippet>open(the_file, 'rb')
</snippet></ROW><ROW><id>17247362</id><snippet>print</snippet></ROW><ROW><id>17247362</id><snippet>&gt;&gt;&gt; print(1, 2, 3)
1 2 3
</snippet></ROW><ROW><id>17247362</id><snippet>sep</snippet></ROW><ROW><id>17247362</id><snippet>&gt;&gt;&gt; print(1, 2, 3, sep=', ')
1, 2, 3
</snippet></ROW><ROW><id>17247362</id><snippet>print</snippet></ROW><ROW><id>17247362</id><snippet>end</snippet></ROW><ROW><id>17247362</id><snippet>&gt;&gt;&gt; print('Hello.', end='')
Hello.&gt;&gt;&gt;
</snippet></ROW><ROW><id>17247362</id><snippet>print</snippet></ROW><ROW><id>17247362</id><snippet>file</snippet></ROW><ROW><id>17247362</id><snippet>&gt;&gt;&gt; with open('test.txt', 'w') as f:
...     print("Hello, world!", file=f)
...
</snippet></ROW><ROW><id>17247362</id><snippet>print</snippet></ROW><ROW><id>17247362</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>17247362</id><snippet>flush</snippet></ROW><ROW><id>17247362</id><snippet>flush=True</snippet></ROW><ROW><id>17247362</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; while True:
...     print('.', end='', flush=True)
...     time.sleep(0.5)
</snippet></ROW><ROW><id>17247405</id><snippet>setClickable</snippet></ROW><ROW><id>17247405</id><snippet>setHeader</snippet></ROW><ROW><id>17247405</id><snippet>     self.list.setHeader(self.head)
     self.head.setClickable(True)
</snippet></ROW><ROW><id>17247405</id><snippet>self.list.setHeader(..)</snippet></ROW><ROW><id>17247405</id><snippet>self.head</snippet></ROW><ROW><id>17247535</id><snippet>source</snippet></ROW><ROW><id>17247535</id><snippet>&lt;string&gt;</snippet></ROW><ROW><id>17247535</id><snippet>&lt;py3fix&gt;</snippet></ROW><ROW><id>17247535</id><snippet>def _raise</snippet></ROW><ROW><id>17247535</id><snippet>&gt;&gt;&gt; eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '&lt;py3fix&gt;', 'exec'))
&gt;&gt;&gt; _raise(Exception, "error message", None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;py3fix&gt;", line 1, in _raise
Exception: error message

&gt;&gt;&gt; eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '&lt;my_source_file&gt;', 'exec'))
&gt;&gt;&gt; _raise(Exception, "error message", None)Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;my_source_file&gt;", line 1, in _raise
Exception: error message
</snippet></ROW><ROW><id>17247564</id><snippet>res.get(interval=0.005)  
</snippet></ROW><ROW><id>17247939</id><snippet>pip install gaenv
cd /to/your/project
gaenv
</snippet></ROW><ROW><id>17248098</id><snippet>logging.error(self.request.POST['uploadimage'].keys)
</snippet></ROW><ROW><id>17248098</id><snippet>ERROR    2013-06-22 05:47:46,605 FileuploadHandler.py:29] &lt;bound method FieldStorage.keys of FieldStorage(u'uploadimage', u'30.jpg')&gt;
</snippet></ROW><ROW><id>17248098</id><snippet>TypeError</snippet></ROW><ROW><id>17248098</id><snippet>TypeError: not indexable
</snippet></ROW><ROW><id>17248098</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>17248098</id><snippet>mutlipart/*</snippet></ROW><ROW><id>17248098</id><snippet>__contains__</snippet></ROW><ROW><id>17248098</id><snippet>has_keys</snippet></ROW><ROW><id>17248098</id><snippet>keys</snippet></ROW><ROW><id>17248098</id><snippet>__len__</snippet></ROW><ROW><id>17248098</id><snippet>__getitem__</snippet></ROW><ROW><id>17248098</id><snippet>__getattr__</snippet></ROW><ROW><id>17248098</id><snippet>def __getattr__(self, name):
    if name != 'value':
        raise AttributeError, name
    if self.file:
        self.file.seek(0)
        value = self.file.read()
        self.file.seek(0)
    elif self.list is not None:
        value = self.list
    else:
        value = None
    return value
</snippet></ROW><ROW><id>17248098</id><snippet>dir()</snippet></ROW><ROW><id>17248098</id><snippet>__dir__</snippet></ROW><ROW><id>17248098</id><snippet>AttributeError: 'unicode' object has no attribute 'value'
</snippet></ROW><ROW><id>17248098</id><snippet>multipart/form-data</snippet></ROW><ROW><id>17248267</id><snippet>str.translate</snippet></ROW><ROW><id>17248267</id><snippet>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; lis = ["hel?llo","intro"]
&gt;&gt;&gt; [ x.translate(None, punctuation) for x in lis]
['helllo', 'intro']
&gt;&gt;&gt; strs = "5,6!7,8"
&gt;&gt;&gt; strs.translate(None, punctuation)
'5678'
</snippet></ROW><ROW><id>17248267</id><snippet>regex</snippet></ROW><ROW><id>17248267</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; [ re.sub(r'[{}]+'.format(punctuation),'',x ) for x in lis]
['helllo', 'intro']
&gt;&gt;&gt; re.sub(r'[{}]+'.format(punctuation),'', strs)
'5678'
</snippet></ROW><ROW><id>17248267</id><snippet>str.join</snippet></ROW><ROW><id>17248267</id><snippet>&gt;&gt;&gt; ["".join([c for c in x if c not in punctuation])  for x in lis]
['helllo', 'intro']
&gt;&gt;&gt; "".join([c for c in strs if c not in punctuation])
'5678'
</snippet></ROW><ROW><id>17248267</id><snippet>&gt;&gt;&gt; from collections import Iterable
def my_strip(args):
    if isinstance(args, Iterable) and not isinstance(args, basestring):
        return [ x.translate(None, punctuation) for x in args]
    else:
        return args.translate(None, punctuation)
...     
&gt;&gt;&gt; my_strip("5,6!7,8")
'5678'
&gt;&gt;&gt; my_strip(["hel?llo","intro"])
['helllo', 'intro']
</snippet></ROW><ROW><id>17248344</id><snippet>food_dict</snippet></ROW><ROW><id>17248344</id><snippet>global</snippet></ROW><ROW><id>17248344</id><snippet>list</snippet></ROW><ROW><id>17248344</id><snippet>append()</snippet></ROW><ROW><id>17248344</id><snippet>def init():
    global food_dict
     # assignment is manipulation
    food_dict = [{'name': 'apple'}, {'name': 'orange'}]

def next():
    # notice no 'global' usage but this still works
    food_dict.append({'name': 'kiwi'})

def lastly():
    global food_dict
    # assign to empty list
    food_dict = [{}]

&gt;&gt;&gt; init()
&gt;&gt;&gt; print food_dict
[{'name': 'apple'}, {'name': 'orange'}]
&gt;&gt;&gt; next()
&gt;&gt;&gt; print food_dict
[{'name': 'apple'}, {'name': 'orange'}, {'name': 'kiwi'}]
&gt;&gt;&gt; lastly()
&gt;&gt;&gt; print food_dict
[{}]
</snippet></ROW><ROW><id>17248360</id><snippet>class Company(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

    def save(*args, **kwargs):
        super(Company, self).save(*args, **kwargs)
        self.showroom__set.create(name=self.name)
</snippet></ROW><ROW><id>17248360</id><snippet>class Company(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

    def save(self, *args, **kwargs):
    is_first_save = self.pk is None
    super(Company, self).save(*args, **kwargs)
    if is_first_save:
        self.showroom_set.create(name=self.name)
</snippet></ROW><ROW><id>17248389</id><snippet>def getSec(s):
    l = map(int, s.split(':')) # l = list(map(int, s.split(':'))) in Python 3.x
    return sum(n * sec for n, sec in zip(l[::-1], (1, 60, 3600)))

getSec('20') # 20
getSec('1:20') # 80
getSec('1:30:01') # 5401
</snippet></ROW><ROW><id>17248478</id><snippet>replace()</snippet></ROW><ROW><id>17248478</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17248478</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; je = ("3,5&amp;6,7")
&gt;&gt;&gt; ast.literal_eval(je.replace('&amp;', ','))
(3, 5, 6, 7)
</snippet></ROW><ROW><id>17248478</id><snippet>&gt;&gt;&gt; ast.literal_eval('['+je.replace('&amp;', ',')+']')
[3, 5, 6, 7]
</snippet></ROW><ROW><id>17248483</id><snippet>import pprint
import sys

orig_displayhook = sys.displayhook

def myhook(value):
    if value != None:
        __builtins__._ = value
        pprint.pprint(value)

__builtins__.pprint_on = lambda: setattr(sys, 'displayhook', myhook)
__builtins__.pprint_off = lambda: setattr(sys, 'displayhook', orig_displayhook)
</snippet></ROW><ROW><id>17248483</id><snippet>&gt;&gt;&gt; data = dict.fromkeys(range(10))
&gt;&gt;&gt; data
{0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None}
&gt;&gt;&gt; pprint_on()
&gt;&gt;&gt; data
{0: None,
 1: None,
 2: None,
 3: None,
 4: None,
 5: None,
 6: None,
 7: None,
 8: None,
 9: None}
&gt;&gt;&gt; pprint_off()
&gt;&gt;&gt; data
{0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None}
</snippet></ROW><ROW><id>17248939</id><snippet>setCellWidget</snippet></ROW><ROW><id>17248939</id><snippet>    self.old_row = -1
    self.old_col = -1

  def addcomb(self,row,col):
    if self.old_row &gt;= 0:
      self.table.setCellWidget(self.old_row, self.old_col, None)
    self.old_row = row
    self.old_col = col
    comb = QtGui.QComboBox()
    comb.addItem("raton")
    self.table.setCellWidget(row, col, comb)
</snippet></ROW><ROW><id>17249031</id><snippet>{{</snippet></ROW><ROW><id>17249031</id><snippet>&lt;div&gt;Letra: {{! letra['letra'] }}&lt;/div&gt;
</snippet></ROW><ROW><id>17249031</id><snippet>&lt;div&gt;Letra: {{!letra['letra']}}&lt;/div&gt;
</snippet></ROW><ROW><id>17249240</id><snippet>unittest</snippet></ROW><ROW><id>17249240</id><snippet>Problem
    App
        main.py
    Tests
        test_main.py
</snippet></ROW><ROW><id>17249240</id><snippet>test_main.py</snippet></ROW><ROW><id>17249240</id><snippet>import sys
import os
import unittest
sys.path.append(os.path.join(os.path.dirname(__file__), 'App'))
import main

# do the tests

if __name__ == '__main__':
    unittest.run()
</snippet></ROW><ROW><id>17249240</id><snippet>Problem
    App
        __init__.py
        main.py
    Tests
        test.py
        test_main.py
</snippet></ROW><ROW><id>17249240</id><snippet>test.py</snippet></ROW><ROW><id>17249240</id><snippet>import sys
import os
import unittest
sys.path.append(os.path.dirname(__file__))
</snippet></ROW><ROW><id>17249240</id><snippet>test_main.py</snippet></ROW><ROW><id>17249240</id><snippet>from test import *
import App.main

# do the tests

if __name__ == '__main__':
    unittest.run()
</snippet></ROW><ROW><id>17249470</id><snippet>&gt;&gt;&gt; from datetime import timedelta, datetime
&gt;&gt;&gt; base_date = "10/29 06:58 AM"
&gt;&gt;&gt; b_d = datetime.strptime(base_date, "%m/%d %I:%M %p")
def func(x):
    d =  datetime.strptime(x[0], "%m/%d %I:%M %p")
    delta =  d - b_d if d &gt; b_d else timedelta.max
    return delta
... 
&gt;&gt;&gt; min(list_date, key = func)
('10/30 02:17 PM', '+100', '-110')
</snippet></ROW><ROW><id>17249470</id><snippet>datetime.strptime</snippet></ROW><ROW><id>17249470</id><snippet>b_d</snippet></ROW><ROW><id>17249470</id><snippet>&gt;&gt;&gt; b_d
datetime.datetime(1900, 10, 29, 6, 58)
</snippet></ROW><ROW><id>17249470</id><snippet>key</snippet></ROW><ROW><id>17249470</id><snippet>min</snippet></ROW><ROW><id>17249470</id><snippet>delta =  d - b_d if d &gt; b_d else timedelta.max
</snippet></ROW><ROW><id>17249470</id><snippet>d &gt; b_d</snippet></ROW><ROW><id>17249470</id><snippet>min</snippet></ROW><ROW><id>17249470</id><snippet>base_date</snippet></ROW><ROW><id>17249470</id><snippet>delta</snippet></ROW><ROW><id>17249470</id><snippet>timedelta.max</snippet></ROW><ROW><id>17249470</id><snippet>&gt;&gt;&gt; timedelta.max
datetime.timedelta(999999999, 86399, 999999)
</snippet></ROW><ROW><id>17249470</id><snippet>&gt;&gt;&gt; from datetime import timedelta, datetime
&gt;&gt;&gt; base_date = '10/29 06:59 AM'
&gt;&gt;&gt; b_d = datetime.strptime(base_date, "%m/%d %I:%M %p")
&gt;&gt;&gt; def func(x):
...         d =  datetime.strptime(x[0], "%m/%d %I:%M %p")
...         delta =  d - b_d if d &gt; b_d else timedelta.max
...         return delta
... 
&gt;&gt;&gt; lis2 = [('10/30 04:30 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:24 PM', '+1.5 -110', '-1.5     +100'), ('10/30 04:21 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:15 PM', '+1.5 -112', '-1.5 +102'), ('10/30 04:14 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:57 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:40 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:31 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:30 PM', '+1.5 -109', '-1.5 -101'), ('10/30 03:25 PM', '+1.5 -107', '-1.5 -103'), ('10/30 03:24 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:23 PM', '+1.5 -108', '-1.5 -102'), ('10/30 03:22 PM', '+1.5 -106', '-1.5 -104'), ('10/30 02:14 PM', '+1.5 -104', '-1.5 -106'), ('10/30 01:41 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:37 PM', '+1.5 -107', '-1.5 -103'), ('10/30 01:36 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:06 PM', '+1.5 -103', '-1.5 -107'), ('10/30 12:56 PM', '+2 -111', '-2 +101'), ('10/30 12:53 PM', '+2 -110', '-2 +100'), ('10/30 12:50 PM', '+2 -113', '-2 +103'), ('10/30 12:49 PM', '+2 -112', '-2 +102'), ('10/30 12:46 PM', '+2 -113', '-2 +103'), ('10/30 12:45 PM', '+2 -110', '-2 +100'), ('10/30 12:43 PM', '+2 -108', '-2 -102'), ('10/30 12:38 PM', '+2.5 -116', '-2.5 +106'), ('10/30 12:38 PM', '+2.5 -113', '-2.5 +103'), ('10/30 12:37 PM', '+2.5 -110', '-2.5 +100'), ('10/30 10:30 AM', '+2.5 -105', '-2.5 -105'), ('10/30 10:07 AM', '+3 -113', '-3 +103'), ('10/30 09:55 AM', '+3 -112', '-3 +102'), ('10/30 09:51 AM', '+3 -110', '-3 +100'), ('10/30 09:32 AM', '+3 -109', '-3 -101'), ('10/30 06:04 AM', '+3 -110', '-3 +100'), ('10/30 03:16 AM', '+3 -107', '-3 -103'), ('10/30 03:14 AM', '+3.5 -116', '-3.5 +106'), ('10/30 01:03 AM', '+3.5 -115', '-3.5 +105'), ('10/30 12:17 AM', '+3.5 -110', '-3.5 +100'), ('10/29 08:52 PM', '+3.5 -108', '-3.5 -102'), ('10/29 01:31 PM', '+3.5 -105', '-3.5 -105'), ('10/29 06:48 AM', '+3.5 -110', '-3.5 +100'), ('10/29 06:47 AM', '+3.5 -109', '-3.5 -101'), ('10/29 05:39 AM', '+3.5 -113', '-3.5 +103'), ('10/29 03:34 AM', '+3.5 -108', '-3.5 -102'), ('10/29 12:44 AM', '+3.5 -110', '-3.5 +100'), ('10/29 12:41 AM', '+3.5 -107', '-3.5 -103'), ('10/29 12:40 AM', '+3.5 -105', '-3.5 -105'), ('10/28 12:52 PM', '+4 -105', '-4 -105')]
&gt;&gt;&gt; min(lis2, key = func)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')
</snippet></ROW><ROW><id>17249470</id><snippet>from datetime import datetime, timedelta
import sys
import time
list_date = [('10/30 04:30 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:24 PM', '+1.5 -110', '-1.5     +100'), ('10/30 04:21 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:15 PM', '+1.5 -112', '-1.5 +102'), ('10/30 04:14 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:57 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:40 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:31 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:30 PM', '+1.5 -109', '-1.5 -101'), ('10/30 03:25 PM', '+1.5 -107', '-1.5 -103'), ('10/30 03:24 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:23 PM', '+1.5 -108', '-1.5 -102'), ('10/30 03:22 PM', '+1.5 -106', '-1.5 -104'), ('10/30 02:14 PM', '+1.5 -104', '-1.5 -106'), ('10/30 01:41 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:37 PM', '+1.5 -107', '-1.5 -103'), ('10/30 01:36 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:06 PM', '+1.5 -103', '-1.5 -107'), ('10/30 12:56 PM', '+2 -111', '-2 +101'), ('10/30 12:53 PM', '+2 -110', '-2 +100'), ('10/30 12:50 PM', '+2 -113', '-2 +103'), ('10/30 12:49 PM', '+2 -112', '-2 +102'), ('10/30 12:46 PM', '+2 -113', '-2 +103'), ('10/30 12:45 PM', '+2 -110', '-2 +100'), ('10/30 12:43 PM', '+2 -108', '-2 -102'), ('10/30 12:38 PM', '+2.5 -116', '-2.5 +106'), ('10/30 12:38 PM', '+2.5 -113', '-2.5 +103'), ('10/30 12:37 PM', '+2.5 -110', '-2.5 +100'), ('10/30 10:30 AM', '+2.5 -105', '-2.5 -105'), ('10/30 10:07 AM', '+3 -113', '-3 +103'), ('10/30 09:55 AM', '+3 -112', '-3 +102'), ('10/30 09:51 AM', '+3 -110', '-3 +100'), ('10/30 09:32 AM', '+3 -109', '-3 -101'), ('10/30 06:04 AM', '+3 -110', '-3 +100'), ('10/30 03:16 AM', '+3 -107', '-3 -103'), ('10/30 03:14 AM', '+3.5 -116', '-3.5 +106'), ('10/30 01:03 AM', '+3.5 -115', '-3.5 +105'), ('10/30 12:17 AM', '+3.5 -110', '-3.5 +100'), ('10/29 08:52 PM', '+3.5 -108', '-3.5 -102'), ('10/29 01:31 PM', '+3.5 -105', '-3.5 -105'), ('10/29 06:48 AM', '+3.5 -110', '-3.5 +100'), ('10/29 06:47 AM', '+3.5 -109', '-3.5 -101'), ('10/29 05:39 AM', '+3.5 -113', '-3.5 +103'), ('10/29 03:34 AM', '+3.5 -108', '-3.5 -102'), ('10/29 12:44 AM', '+3.5 -110', '-3.5 +100'), ('10/29 12:41 AM', '+3.5 -107', '-3.5 -103'), ('10/29 12:40 AM', '+3.5 -105', '-3.5 -105'), ('10/28 12:52 PM', '+4 -105', '-4 -105')]

base_date = "10/29 06:58 AM"

def func1(list_date):
    #http://stackoverflow.com/a/17249420/846892
    get_datetime = lambda s: datetime.strptime(s, "%m/%d %I:%M %p")
    base = get_datetime(base_date)
    later = filter(lambda d: get_datetime(d[0]) &gt; base, list_date)
    return min(later, key = lambda d: get_datetime(d[0]))

def func2(list_date):
    #http://stackoverflow.com/a/17249470/846892
    b_d = datetime.strptime(base_date, "%m/%d %I:%M %p")
    def func(x):
       d =  datetime.strptime(x[0], "%m/%d %I:%M %p")
       delta =  d - b_d if d &gt; b_d else timedelta.max
       return delta
    return min(list_date, key = func)

def func3(list_date):
    #http://stackoverflow.com/a/17249529/846892
    fmt = '%m/%d %I:%M %p'
    d = datetime.strptime(base_date, fmt)
    def foo(x):
        return (datetime.strptime(x[0],fmt)-d).total_seconds() &gt; 0
    return sorted(list_date, key=foo)[-1]

def func4(list_date):
    #http://stackoverflow.com/a/17249441/846892
    fmt = '%m/%d %I:%M %p'
    base_d = datetime.strptime(base_date, fmt)
    candidates = ((datetime.strptime(d, fmt), d, x, y) for d, x, y in list_date)
    candidates = min((dt, d, x, y) for dt, d, x, y in candidates if dt &gt; base_d)
    return  candidates[1:]
</snippet></ROW><ROW><id>17249470</id><snippet>&gt;&gt;&gt; from so import *

#check output irst
&gt;&gt;&gt; func1(list_date)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')
&gt;&gt;&gt; func2(list_date)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')
&gt;&gt;&gt; func3(list_date)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')
&gt;&gt;&gt; func4(list_date)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')

&gt;&gt;&gt; %timeit func1(list_date)
100 loops, best of 3: 3.07 ms per loop
&gt;&gt;&gt; %timeit func2(list_date)
100 loops, best of 3: 1.59 ms per loop      #winner
&gt;&gt;&gt; %timeit func3(list_date)
100 loops, best of 3: 1.91 ms per loop
&gt;&gt;&gt; %timeit func4(list_date)
1000 loops, best of 3: 2.02 ms per loop

#increase the input size
&gt;&gt;&gt; list_date = list_date *10**3
&gt;&gt;&gt; len(list_date)
48000
&gt;&gt;&gt; %timeit func1(list_date)
1 loops, best of 3: 3.6 s per loop
&gt;&gt;&gt; %timeit func2(list_date)            #winner
1 loops, best of 3: 1.99 s per loop      
&gt;&gt;&gt; %timeit func3(list_date)
1 loops, best of 3: 2.09 s per loop
&gt;&gt;&gt; %timeit func4(list_date)
1 loops, best of 3: 2.02 s per loop


#increase the input size again

&gt;&gt;&gt; list_date = list_date *10
&gt;&gt;&gt; len(list_date)
480000
&gt;&gt;&gt; %timeit func1(list_date)
1 loops, best of 3: 36.4 s per loop
&gt;&gt;&gt; %timeit func2(list_date)                  #winner
1 loops, best of 3: 20.2 s per loop           
&gt;&gt;&gt; %timeit func3(list_date)
1 loops, best of 3: 22.8 s per loop
&gt;&gt;&gt; %timeit func4(list_date)
1 loops, best of 3: 22.7 s per loop
</snippet></ROW><ROW><id>17249590</id><snippet>zip</snippet></ROW><ROW><id>17249590</id><snippet>list comprehension</snippet></ROW><ROW><id>17249590</id><snippet>kwargs</snippet></ROW><ROW><id>17249590</id><snippet>&gt;&gt;&gt; from __future__ import  division   # not required in py3.x
def func_apply(func_name, **kwargs):
    vals = [kwargs[key] for key in sorted(kwargs)] #sort the keys lexicographically
    return [func_name(*x) for x in  zip(*vals)]
... 
&gt;&gt;&gt; func_apply(my_minus, x=[2, 4, 5, 7], y=[1, 4, 3, 9])
[1, 0, 2, -2]
&gt;&gt;&gt; func_apply(my_divd,  a=[2, 4, 5, 7], b=[1, 4, 3, 9])
[2.0, 1.0, 1.6666666666666667, 0.7777777777777778]
</snippet></ROW><ROW><id>17249739</id><snippet>#!C:\Mongoose\Python26\python.exe

import json

print 'Content-Type: application/json'
print
print json.dumps({'customer': 'Varun Inc','email': 'varun.verma@varun.com'})
</snippet></ROW><ROW><id>17249782</id><snippet>__file__</snippet></ROW><ROW><id>17249782</id><snippet>python yourscript.py</snippet></ROW><ROW><id>17249782</id><snippet>inspect</snippet></ROW><ROW><id>17249782</id><snippet>import os.path

print os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>17249782</id><snippet>$ cat /private/tmp/test.py 
import os.path

print os.path.dirname(os.path.abspath(__file__))

$ python /private/tmp/test.py 
/private/tmp
$ cd /private/tmp/
$ python test.py 
/private/tmp
</snippet></ROW><ROW><id>17250024</id><snippet>$ ls -la /usr/bin/python
lrwxrwxrwx. 1 root root 7 Oct  1  2012 /usr/bin/python -&gt; python2
$ ls -la /usr/bin/python2
lrwxrwxrwx. 1 root root 9 Oct  1  2012 /usr/bin/python2 -&gt; python2.7
$ ls -la /usr/bin/python2.7
-rwxr-xr-x. 1 root root 10768 Jul 24  2012 /usr/bin/python2.7
</snippet></ROW><ROW><id>17250024</id><snippet>sudo rm /usr/bin/python
sudo ln -s /usr/bin/python2.7 /usr/bin/python
</snippet></ROW><ROW><id>17250024</id><snippet>/usr/bin/python -&gt; /usr/bin/python2.7</snippet></ROW><ROW><id>17250154</id><snippet>app.view_functions</snippet></ROW><ROW><id>17250154</id><snippet>from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api', methods = ['GET'])
def this_func():
    """This is a function. It does nothing."""
    return jsonify({ 'result': '' })

@app.route('/api/help', methods = ['GET'])
def help():
    """Print available functions."""
    func_list = {}
    for rule in app.url_map.iter_rules():
        if rule.endpoint != 'static':
            func_list[rule.rule] = app.view_functions[rule.endpoint].__doc__
    return jsonify(func_list)

if __name__ == '__main__':
    app.run(debug=True)
</snippet></ROW><ROW><id>17250166</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>17250166</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17250166</id><snippet>import ast    
import subprocess
ret = subprocess.check_output(['python','some_script.py'])
dic = ast.literal_eval(ret)
</snippet></ROW><ROW><id>17250166</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17250166</id><snippet>&gt;&gt;&gt; ret = "[{'itemkey1': 'item1', 'itemkey2': 'item2'}, {'itemkey1': 'item1', 'itemkey2': 'item2'}]\n"
&gt;&gt;&gt; ast.literal_eval(ret)
[{'itemkey2': 'item2', 'itemkey1': 'item1'}, {'itemkey2': 'item2', 'itemkey1': 'item1'}]
</snippet></ROW><ROW><id>17250166</id><snippet>literal_eval(node_or_string)</snippet></ROW><ROW><id>17250417</id><snippet>&gt;&gt;&gt; s =[1,2,3]
&gt;&gt;&gt; s[-1000:1000]
[1, 2, 3]
</snippet></ROW><ROW><id>17250417</id><snippet>s</snippet></ROW><ROW><id>17250417</id><snippet>i</snippet></ROW><ROW><id>17250417</id><snippet>j</snippet></ROW><ROW><id>17250417</id><snippet>k</snippet></ROW><ROW><id>17250417</id><snippet>i &lt;= k &lt; j</snippet></ROW><ROW><id>17250417</id><snippet>i</snippet></ROW><ROW><id>17250417</id><snippet>j</snippet></ROW><ROW><id>17250417</id><snippet>len(s)</snippet></ROW><ROW><id>17250417</id><snippet>len(s)</snippet></ROW><ROW><id>17250417</id><snippet>i</snippet></ROW><ROW><id>17250417</id><snippet>None</snippet></ROW><ROW><id>17250417</id><snippet>0</snippet></ROW><ROW><id>17250417</id><snippet>j</snippet></ROW><ROW><id>17250417</id><snippet>None</snippet></ROW><ROW><id>17250417</id><snippet>len(s)</snippet></ROW><ROW><id>17250417</id><snippet>i</snippet></ROW><ROW><id>17250417</id><snippet>j</snippet></ROW><ROW><id>17250417</id><snippet>&gt;&gt;&gt; word = 'HelpA'
&gt;&gt;&gt; word[-100:]
'HelpA'
</snippet></ROW><ROW><id>17250510</id><snippet>lf.close</snippet></ROW><ROW><id>17250510</id><snippet>lf.close()</snippet></ROW><ROW><id>17250510</id><snippet>os.utime</snippet></ROW><ROW><id>17250543</id><snippet>--purge, --discard    Purges all waiting tasks before the daemon is started.
                      **WARNING**: This is unrecoverable, and the tasks will
                      be deleted from the messaging server.
</snippet></ROW><ROW><id>17250613</id><snippet>MySecondList = MyList
</snippet></ROW><ROW><id>17250613</id><snippet>list.append</snippet></ROW><ROW><id>17250613</id><snippet>+=</snippet></ROW><ROW><id>17250613</id><snippet>list.extend</snippet></ROW><ROW><id>17250613</id><snippet>list.pop</snippet></ROW><ROW><id>17250613</id><snippet>MySecondList = MyList[:]
</snippet></ROW><ROW><id>17250613</id><snippet>&gt;&gt;&gt; from sys import getrefcount
&gt;&gt;&gt; lis = [1,2,3]
&gt;&gt;&gt; foo = lis       #creates a new reference to the same object [1,2,3]
&gt;&gt;&gt; lis is foo
True
&gt;&gt;&gt; getrefcount(lis) #number of references to the same object
3                    #foo , lis and shell itself

#you can modify the list [1,2,3] from any of it's references
&gt;&gt;&gt; foo.append(4)
&gt;&gt;&gt; lis.append(5)
&gt;&gt;&gt; foo,lis
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])

&gt;&gt;&gt; lis = [1,2,3]
&gt;&gt;&gt; foo = lis[:]    #assigns a shallow copy of lis to foo
&gt;&gt;&gt; foo is lis
False
&gt;&gt;&gt; getrefcount(lis) #still 2(lis + shell_, as foo points to a different object
2

#different results here
&gt;&gt;&gt; foo.append(4)
&gt;&gt;&gt; lis.append(5)
&gt;&gt;&gt; foo, lis
([1, 2, 3, 4], [1, 2, 3, 5])
</snippet></ROW><ROW><id>17250613</id><snippet>&gt;&gt;&gt; lis = [[1,2,3],[4,5,6]]
&gt;&gt;&gt; foo = lis[:]
&gt;&gt;&gt; foo is lis              #lis and foo are different
False

&gt;&gt;&gt; [id(x) for x in lis]    #but inner lists are still same 
[3056076428L, 3056076716L]
&gt;&gt;&gt; [id(x) for x in foo]    #same IDs of inner lists, i.e foo[0] is lis[0] == True
[3056076428L, 3056076716L]
&gt;&gt;&gt; foo[0][0] = 100         # modifying one will affect the other as well
&gt;&gt;&gt; lis[0],foo[0]
([100, 2, 3], [100, 2, 3])
</snippet></ROW><ROW><id>17250613</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>17250613</id><snippet>&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; lis = [[1,2,3],[4,5,6]]
&gt;&gt;&gt; foo = deepcopy(lis)
</snippet></ROW><ROW><id>17250646</id><snippet>-dt</snippet></ROW><ROW><id>17250646</id><snippet>import numpy as np
import matplotlib.pyplot as plt

r1 = 1  #  AU Earth                                                                 
r2 = 1.524  #  AU Mars                                                              
deltanu = 75 * np.pi / 180  #  angle in radians                                     
mu = 38.86984154054163                                        

c = np.sqrt(r1 ** 2 + r2 ** 2 - 2 * r1 * r2 * np.cos(deltanu))

s = (r1 + r2 + c) / 2

am = s / 2


def g(a):
    alphag = 2 * np.pi - 2 * np.arcsin(np.sqrt(s / (2 * a)))
    betag = -2 * np.arcsin(np.sqrt((s - c) / (2 * a)))
    return (np.sqrt(a ** 3 / mu)
            * (alphag - betag - (np.sin(alphag) - np.sin(betag))))

def g2(a):
    alphag = 2 * np.arcsin(np.sqrt(s / (2 * a)))
    betag = 2 * np.arcsin(np.sqrt((s - c) / (2 * a)))
    return (np.sqrt(a ** 3 / mu)
            * (alphag - betag - (np.sin(alphag) - np.sin(betag))))


a = np.linspace(am, 2, 500000)
dt = np.linspace(0, 2, 500000)

fig, ax = plt.subplots(ncols=2)
ax[0].plot(a, g(a), color = 'r')
ax[1].plot(a, g2(a), color = 'r')
ax[0].set_xlim((0.9, 2))
ax[0].set_ylim((0, 2))
ax[1].set_xlim((0.9, 2))
ax[1].set_ylim((0, 2))

plt.show()
</snippet></ROW><ROW><id>17250702</id><snippet>.find()</snippet></ROW><ROW><id>17250702</id><snippet>findall()</snippet></ROW><ROW><id>17250702</id><snippet>iterfind()</snippet></ROW><ROW><id>17250702</id><snippet>namespaces = {'ex': 'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'} # add more as needed

for cube in root.findall('.//ex:Cube[@currency]', namespaces=namespaces):
    print(cube.attrib['currency'], cube.attrib['rate'])
</snippet></ROW><ROW><id>17250702</id><snippet>ex:Cube</snippet></ROW><ROW><id>17250702</id><snippet>&lt;Cube&gt;</snippet></ROW><ROW><id>17250702</id><snippet>ex</snippet></ROW><ROW><id>17250702</id><snippet>namespaces</snippet></ROW><ROW><id>17250702</id><snippet>[@currency]</snippet></ROW><ROW><id>17250702</id><snippet>currency</snippet></ROW><ROW><id>17250702</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml', stream=True)
&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; tree = ET.parse(r.raw)
&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; namespaces = {'ex': 'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'}
&gt;&gt;&gt; for cube in root.findall('.//ex:Cube[@currency]', namespaces=namespaces):
...     print(cube.attrib['currency'], cube.attrib['rate'])
... 
USD 1.3180
JPY 128.66
BGN 1.9558
CZK 25.825
DKK 7.4582
GBP 0.85330
HUF 298.87
LTL 3.4528
LVL 0.7016
PLN 4.3289
RON 4.5350
SEK 8.6927
CHF 1.2257
NOK 7.9090
HRK 7.4905
RUB 43.2260
TRY 2.5515
AUD 1.4296
BRL 2.9737
CAD 1.3705
CNY 8.0832
HKD 10.2239
IDR 13088.24
ILS 4.7891
INR 78.1200
KRW 1521.52
MXN 17.5558
MYR 4.2222
NZD 1.7004
PHP 57.707
SGD 1.6790
THB 41.003
ZAR 13.4906
</snippet></ROW><ROW><id>17250702</id><snippet>currency = input('What currency are you looking for? ')
match = root.find('.//ex:Cube[@currency="{}"]'.format(currency.upper()), namespaces=namespaces)
if match is not None:
    print('The rate for {} is {}'.format(currency, match.attrib['rate']))
</snippet></ROW><ROW><id>17251721</id><snippet>from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth.models import User

class Command(BaseCommand):

    def handle(self, *args, **options):
        user_emails = User.objects.values_list('email', flat=True)
        with open('myfile.txt', 'w+') as fh:
            fh.write(", ".join(list(user_emails)))
</snippet></ROW><ROW><id>17251721</id><snippet>./manage.py &lt;managementcommand_filename&gt; 
</snippet></ROW><ROW><id>17251733</id><snippet>pickle</snippet></ROW><ROW><id>17251733</id><snippet>EOFError</snippet></ROW><ROW><id>17251733</id><snippet>with open('tops.dat', 'rb') as hs_data:
    try:
        highsc = pickle.load(hs_data)
    except EOFError:
        highsc = []
</snippet></ROW><ROW><id>17251787</id><snippet>betag</snippet></ROW><ROW><id>17251787</id><snippet>import numpy as np
import matplotlib.pyplot as plt

r1 = 1  #  AU Earth                                                                 
r2 = 1.524  #  AU Mars                                                              
deltanu = 75 * np.pi / 180  #  angle in radians                                     
mu = 38.86984154054163                                        
c = np.sqrt(r1 ** 2 + r2 ** 2 - 2 * r1 * r2 * np.cos(deltanu))
s = (r1 + r2 + c) / 2
am = s / 2

def g(a, alphag, betag):
    return (np.sqrt(a ** 3 / mu)
            * (alphag - betag - (np.sin(alphag) - np.sin(betag))))

a = np.linspace(am, 2, 500000)

fig, ax = plt.subplots()

alphag = 2 * np.pi - 2 * np.arcsin(np.sqrt(s / (2 * a)))
betag = 2 * np.arcsin(np.sqrt((s - c) / (2 * a)))
ax.plot(a, g(a, alphag, betag), color = 'r')
alphag = 2 * np.arcsin(np.sqrt(s / (2 * a)))
ax.plot(a, g(a, alphag, betag), color = 'r')

plt.show()
</snippet></ROW><ROW><id>17251795</id><snippet>xpath = '//li[contains(@class,"our-age")]/span/text()'
item["age"] = hxs.select(xpath).extract() or [' ']
</snippet></ROW><ROW><id>17251949</id><snippet>Python 2.6.6 (r266:84292, Dec 26 2010, 22:31:48) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; fullpath = os.path.join("こんにちは","世界.*")
&gt;&gt;&gt; import glob
&gt;&gt;&gt; for fn in glob.glob(fullpath):
...     print fn
... 
こんにちは/世界.xls
</snippet></ROW><ROW><id>17251952</id><snippet>int</snippet></ROW><ROW><id>17251952</id><snippet>str</snippet></ROW><ROW><id>17251952</id><snippet>for elem in lol:
    print (":".join(map(str, elem)))
</snippet></ROW><ROW><id>17251952</id><snippet>for elem in lol:
    print (":".join(str(i) for i in elem))
</snippet></ROW><ROW><id>17251952</id><snippet>format</snippet></ROW><ROW><id>17251952</id><snippet>for elem in lol:
    print (":".join("'{}'".format(i) for i in elem))
</snippet></ROW><ROW><id>17252033</id><snippet>import random

posts = []
for tag in soup.find_all('div', class_='post'):
    title = tag.h2.a.string
    imageURL = tag.p.a['href']
    sourceURL = tag.div.a['href'].split('#', 1)[0]

    posts.append((title, imageURL, sourceURL))

title, imageURL, sourceURL = random.choice(posts)
</snippet></ROW><ROW><id>17252033</id><snippet>random.choice()</snippet></ROW><ROW><id>17252040</id><snippet>root.overrideredirect(1)</snippet></ROW><ROW><id>17252210</id><snippet>import Tkinter

def main():
    print 'main'
    t.mainloop()
    print 'end main'

t = Tkinter.Tk()
b = Tkinter.Button(t, command = main)
b.pack()
t.mainloop()
</snippet></ROW><ROW><id>17252210</id><snippet>main
main
main
main
main
# now close the window
end main
end main
end main
end main
end main
</snippet></ROW><ROW><id>17252470</id><snippet>import lxml.etree
from gzip import open as gopen

class GroupDictTarget(object):
    def __init__(self, d):
        self.d = d
    def start(self, tag, attrib):
        if tag == 'group':
            self.group = self.d[attrib['from'], attrib['to']] = []
        elif tag == 'link':
            self.group.append(attrib['target'])
    def close(self):
        pass

def extractTargets(fin):
    with gopen(fin) as xml:
        targets = {}
        parser = lxml.etree.XMLParser(target=GroupDictTarget(targets))
        lxml.etree.parse(xml, parser)
        return targets
</snippet></ROW><ROW><id>17252470</id><snippet>import xml.parsers.expat
from gzip import open as gopen

class GroupDictTarget(object):
    # Same as above

def extractTargets(fin):
    targets = {}
    p = xml.parsers.expat.ParserCreate()
    p.StartElementHandler = GroupDictTarget(targets).start
    with gopen(fin) as f:
        p.ParseFile(f)
    return targets
</snippet></ROW><ROW><id>17252470</id><snippet>import xml.sax
from gzip import open as gopen

class GroupDictTarget(object):
    # Same as above

def extractTargets(fin):
    targets = {}
    handler = xml.sax.handler.ContentHandler()
    handler.startElement = GroupDictTarget(targets).start
    with gopen(fin) as f:
        xml.sax.parse(f, handler)
    return targets
</snippet></ROW><ROW><id>17252516</id><snippet>volume_overlay</snippet></ROW><ROW><id>17252516</id><snippet>polyCollection</snippet></ROW><ROW><id>17252516</id><snippet>from matplotlib.finance import *

data = parse_yahoo_historical(fetch_historical_yahoo('CKSW', (2013,1,1), (2013, 6, 1)))

ds, opens, closes, highs, lows, volumes = zip(*data)

# Create figure
fig = plt.figure()
ax1 = fig.add_subplot(111)
# Plot the candlestick
candles = candlestick2(ax1, opens, closes, highs, lows,
                       width=1, colorup='g')

# Add a seconds axis for the volume overlay
ax2 = ax1.twinx()

# Plot the volume overlay
bc = volume_overlay(ax2, opens, closes, volumes, colorup='g', alpha=0.5, width=1)
ax2.add_collection(bc)
plt.show()
</snippet></ROW><ROW><id>17252629</id><snippet>Index</snippet></ROW><ROW><id>17252629</id><snippet>integrate.trapz(data_df.values.transpose(), x=data_df.index.values)
#[189274.48501691408]
</snippet></ROW><ROW><id>17252629</id><snippet>data_df.index</snippet></ROW><ROW><id>17252629</id><snippet>Index</snippet></ROW><ROW><id>17252629</id><snippet>ndarray</snippet></ROW><ROW><id>17252629</id><snippet>integrate.trapz(data_df.values.transpose(), x=data_df.index.view(pd.np.ndarray))
#[189274.48501691408]
</snippet></ROW><ROW><id>17252649</id><snippet>plt</snippet></ROW><ROW><id>17252649</id><snippet>plt</snippet></ROW><ROW><id>17252649</id><snippet>mlab</snippet></ROW><ROW><id>17252649</id><snippet>Tk</snippet></ROW><ROW><id>17252649</id><snippet>fig=plt.figure()
</snippet></ROW><ROW><id>17252649</id><snippet>fig = Figure()
</snippet></ROW><ROW><id>17252649</id><snippet>plt</snippet></ROW><ROW><id>17252680</id><snippet>import glob,csv
files = glob.glob("*.txt")
fo = open("combined.csv","a")
writer = csv.writer(fo,delimiter=' ')

datum = {}

for f in files:
    with open(f) as fi:
        for row in csv.reader(fi,delimiter=' '):
            crow = row[0],row[4]
            if crow in datum:
                if float(datum[crow][-4]) &lt; float(row[3]):
                    datum[crow] = row[0:]
            else:
                datum[crow] = row[0:]
</snippet></ROW><ROW><id>17252697</id><snippet>multipart/form-data</snippet></ROW><ROW><id>17252697</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>17252697</id><snippet>name</snippet></ROW><ROW><id>17252697</id><snippet>filename</snippet></ROW><ROW><id>17252697</id><snippet>web.py</snippet></ROW><ROW><id>17252697</id><snippet>"../../../some_directory/some_important_file"</snippet></ROW><ROW><id>17252768</id><snippet>if 'FUTURE' in string or 'future' in string:
</snippet></ROW><ROW><id>17252768</id><snippet>if 'future' in string.lower()
</snippet></ROW><ROW><id>17252768</id><snippet>if 'FUTURE' or 'future' in string:
</snippet></ROW><ROW><id>17252768</id><snippet>True or ('future' in string)   # bool('FUTURE') --&gt; True
</snippet></ROW><ROW><id>17252768</id><snippet>True</snippet></ROW><ROW><id>17252768</id><snippet>or</snippet></ROW><ROW><id>17252768</id><snippet>&gt;&gt;&gt; strs1 = "your future doesn't look good."
&gt;&gt;&gt; strs2 = "Your FUTURE looks good."
&gt;&gt;&gt; 'FUTURE' or 'future' in strs1
'FUTURE'
&gt;&gt;&gt; 'Foobar' or 'future' in strs1
'Foobar'
&gt;&gt;&gt; 'Foobar' or 'cat' in strs1
'Foobar'
&gt;&gt;&gt; '' or 'cat' in strs1    #  empty string is a falsey value,
False                       #  so now it checks the  next condition
</snippet></ROW><ROW><id>17252768</id><snippet>&gt;&gt;&gt; 'FUTURE' in 'FOOFUTURE'
True
</snippet></ROW><ROW><id>17252768</id><snippet>True</snippet></ROW><ROW><id>17252768</id><snippet>in</snippet></ROW><ROW><id>17252768</id><snippet>regex</snippet></ROW><ROW><id>17252768</id><snippet>str.split</snippet></ROW><ROW><id>17252780</id><snippet>while</snippet></ROW><ROW><id>17252780</id><snippet>while len(urls)&gt;0 :
    try:
        curl = urls.pop(0)
        thepage1 = requests.get(curl).text
        global ctot
        if "Contact Us" in thepage1:
            slist.write("\n" +curl)
            ctot = ctot + 1
    except:
        pass
</snippet></ROW><ROW><id>17252847</id><snippet>twisted.web.client.Agent</snippet></ROW><ROW><id>17252847</id><snippet>HEAD</snippet></ROW><ROW><id>17252847</id><snippet>Location</snippet></ROW><ROW><id>17252847</id><snippet>LocationResolver</snippet></ROW><ROW><id>17252847</id><snippet>HEAD</snippet></ROW><ROW><id>17252847</id><snippet>Location</snippet></ROW><ROW><id>17252847</id><snippet>handleResult</snippet></ROW><ROW><id>17252890</id><snippet>\n</snippet></ROW><ROW><id>17252890</id><snippet> pylab.text(1, 1.5, '$r_1 = 1.0$ AU\n' +\
                    '$r_2 = 1.524$ AU\n' +\
                    '$\\Delta \\nu = 75^{\\circ}$', fontsize = 11, color = 'r')
</snippet></ROW><ROW><id>17252890</id><snippet>pylab.text()</snippet></ROW><ROW><id>17252890</id><snippet>(0,0)</snippet></ROW><ROW><id>17252890</id><snippet>(1,1)</snippet></ROW><ROW><id>17252890</id><snippet>transform</snippet></ROW><ROW><id>17252890</id><snippet>pylab.text(0.6, 0.75, 'using axis coords', transform=ax.transAxes)
</snippet></ROW><ROW><id>17252890</id><snippet>verticalalignment</snippet></ROW><ROW><id>17252890</id><snippet>horizontalalignment</snippet></ROW><ROW><id>17252890</id><snippet>pylab.text(1.,1.,'top-right', transform=ax.transAxes,
           horizontalalignment='right', verticalalignment='top')

pylab.text(0.,0.,'bottom-left', transform=ax.transAxes,
           horizontalalignment='left', verticalalignment='bottom')
</snippet></ROW><ROW><id>17252890</id><snippet>ax.get_data_ratio()</snippet></ROW><ROW><id>17252890</id><snippet>ax.axis('scaled')</snippet></ROW><ROW><id>17252890</id><snippet>def rtext(line,x,y,s, **kwargs):
    from scipy.optimize import curve_fit
    xdata,ydata = line.get_data()
    dist = np.sqrt((x-xdata)**2 + (y-ydata)**2)
    dmin = dist.min()
    TOL_to_avoid_rotation = 0.3
    if dmin &gt; TOL_to_avoid_rotation:
        r = 0.
    else:
        index = dist.argmin()
        xs = xdata[ [index-2,index-1,index,index+1,index+2] ]
        ys = ydata[ [index-2,index-1,index,index+1,index+2] ]
        def f(x,a0,a1,a2,a3):
            return a0 + a1*x + a2*x**2 + a3*x**3
        popt, pcov = curve_fit(f, xs, ys, p0=(1,1,1,1))
        a0,a1,a2,a3 = popt
        ax = pylab.gca()
        derivative = (a1 + 2*a2*x + 3*a3*x**2)
        derivative /= ax.get_data_ratio()
        r = np.arctan( derivative )
    return pylab.text(x, y, s, rotation=np.rad2deg(r), **kwargs)
</snippet></ROW><ROW><id>17252890</id><snippet>ax = pylab.subplot(111)
thetas = np.linspace(0,6*np.pi,1000)
i = np.arange(len(thetas))
xdata = (1. + (3.-1.)*i/len(thetas))*np.cos(thetas)
ydata = (1. + (3.-1.)*i/len(thetas))*np.sin(thetas)
ax.plot(xdata, ydata, color = 'b')
pylab.xlabel('x')
pylab.ylabel('y')
for x, y in zip(xdata,ydata)[::25]:
    rtext(ax.lines[0], x, y,
          '$\\alpha = \\alpha_0$', fontsize = 14, color = 'r',
          horizontalalignment='center', verticalalignment='center')
</snippet></ROW><ROW><id>17252890</id><snippet>verticalalignment='bottom'</snippet></ROW><ROW><id>17252997</id><snippet>x == None
</snippet></ROW><ROW><id>17252997</id><snippet>__eq__()</snippet></ROW><ROW><id>17252997</id><snippet>None</snippet></ROW><ROW><id>17252997</id><snippet>not x
</snippet></ROW><ROW><id>17252997</id><snippet>__nonzero__()</snippet></ROW><ROW><id>17252997</id><snippet>__bool__()</snippet></ROW><ROW><id>17252997</id><snippet>x</snippet></ROW><ROW><id>17252997</id><snippet>bool(x)</snippet></ROW><ROW><id>17252997</id><snippet>not</snippet></ROW><ROW><id>17252997</id><snippet>x is None
</snippet></ROW><ROW><id>17252997</id><snippet>None</snippet></ROW><ROW><id>17252997</id><snippet>NoneType</snippet></ROW><ROW><id>17252997</id><snippet>is</snippet></ROW><ROW><id>17253145</id><snippet>readline()</snippet></ROW><ROW><id>17253145</id><snippet>readings = ser.readline().rstrip().split(':', 2)
</snippet></ROW><ROW><id>17253145</id><snippet>&gt;&gt;&gt; '0.00\n'.rjust(5, '0')
'0.00\n'
&gt;&gt;&gt; '0.00\n'.rstrip().rjust(5, '0')
'00.00'
</snippet></ROW><ROW><id>17253228</id><snippet>bytearray</snippet></ROW><ROW><id>17253228</id><snippet>ord()</snippet></ROW><ROW><id>17253228</id><snippet>def xor(data, key):
    l = len(key)

    decoded = ""
    for i in range(0, len(data)):
            decoded += chr(data[i] ^ ord(key[i % l]))


    return decoded
</snippet></ROW><ROW><id>17253228</id><snippet>def xor(data, key):
    l = len(key)
    return bytearray((
        (data[i] ^ key[i % l]) for i in range(0,len(data))
    ))


data = bytearray(open('myfile.bin', 'rb').read())

key = bytearray([0x2a,0x2b,0x2c,0x5e,0x25,0x44])
</snippet></ROW><ROW><id>17253232</id><snippet>itertools.product</snippet></ROW><ROW><id>17253232</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; V = [[1,2],[3,4,5]]
&gt;&gt;&gt; summ = 0
&gt;&gt;&gt; for x in product(*V):
    print x
    # or call some function : summ += func(*x)
...     
(1, 3)
(1, 4)
(1, 5)
(2, 3)
(2, 4)
(2, 5)
</snippet></ROW><ROW><id>17253303</id><snippet>{'name1':'someday', 'name2':'someday',...}
</snippet></ROW><ROW><id>17253303</id><snippet>O(1)</snippet></ROW><ROW><id>17253303</id><snippet>O(N)</snippet></ROW><ROW><id>17253371</id><snippet>commit()</snippet></ROW><ROW><id>17253371</id><snippet>db.commit()</snippet></ROW><ROW><id>17253371</id><snippet>db.rollback()</snippet></ROW><ROW><id>17253371</id><snippet>db.autocommit(True)</snippet></ROW><ROW><id>17253490</id><snippet>&gt;&gt;&gt; import smtplib
&gt;&gt;&gt; server = smtplib.SMTP('smtp.gmail.com',587)
&gt;&gt;&gt; server.ehlo()
(250, 'mx.google.com at your service, [99.178.174.213]\nSIZE 35882577\n8BITMIME\nSTARTTLS\nENHANCEDSTATUSCODES')
&gt;&gt;&gt; server.starttls()
(220, '2.0.0 Ready to start TLS')
&gt;&gt;&gt; server.ehlo
&lt;bound method SMTP.ehlo of &lt;smtplib.SMTP instance at 0x1e518c0&gt;&gt;
&gt;&gt;&gt; server.login('xxxxxxxxxxxx','xxxxxxxx')
(235, '2.7.0 Accepted')
&gt;&gt;&gt; msg = "test message"
&gt;&gt;&gt; server.sendmail('xxxxxxxxxxxx@gmail.com','xxxxxxx@yahoo.com',msg)
{}
&gt;&gt;&gt; server.quit()
(221, '2.0.0 closing connection xxxxxxxxxxxxx.x - gsmtp')
</snippet></ROW><ROW><id>17253501</id><snippet>f.readline()</snippet></ROW><ROW><id>17253501</id><snippet>f</snippet></ROW><ROW><id>17253501</id><snippet>f</snippet></ROW><ROW><id>17253522</id><snippet>chdir(2)</snippet></ROW><ROW><id>17253522</id><snippet>int chdir(const char *path);</snippet></ROW><ROW><id>17253522</id><snippet>/tmp/dir</snippet></ROW><ROW><id>17253522</id><snippet>cd</snippet></ROW><ROW><id>17253522</id><snippet>PWD</snippet></ROW><ROW><id>17253522</id><snippet>$ cd /tmp/dir
$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/home/user/some/dir'
&gt;&gt;&gt; os.environ['PWD']
'/tmp/dir'
&gt;&gt;&gt; os.path.normpath(os.path.join(os.environ['PWD'], '../dir/../dir/subdir'))
'/tmp/dir/subdir'
</snippet></ROW><ROW><id>17253590</id><snippet>for ... in</snippet></ROW><ROW><id>17253590</id><snippet>in</snippet></ROW><ROW><id>17253590</id><snippet>def isIn(x,y):

  if x in y:
    print "True"
    print "x in y"
  else:
    print "False"

  if y in x:
    print "True"
    print "y in x"
  else:
    print "False"

isIn('5','1')
</snippet></ROW><ROW><id>17253634</id><snippet>__init__</snippet></ROW><ROW><id>17253634</id><snippet>class Foo(object):
    list_of_all_foos = []

    def __init__(self):
        Foo.list_of_all_foos.append(self)
</snippet></ROW><ROW><id>17253634</id><snippet>Foo</snippet></ROW><ROW><id>17253634</id><snippet>for foo_instance in Foo.list_of_all_foos:
    if search_keyword is in foo_instance.attribute:
        do some stuff
        found = True

if found is True:
    tell_user("Found instance!")
</snippet></ROW><ROW><id>17253634</id><snippet>class Foo(object):
    list_of_all_foos = []

    @classmethod
    def create_foo_and_add_to_list(cls, *args, **kwargs):
        new_foo = cls(*args, **kwargs)
        Foo.list_of_all_foos.append(new_foo)
        return new_foo
</snippet></ROW><ROW><id>17253677</id><snippet>Gauge</snippet></ROW><ROW><id>17253677</id><snippet>gauge_1 ..</snippet></ROW><ROW><id>17253677</id><snippet>self.gauge_1 = wx.Gauge(self.notebook_1_pane_1, -1, 100)
</snippet></ROW><ROW><id>17253677</id><snippet>myupdater</snippet></ROW><ROW><id>17253677</id><snippet>def myupdater(self, current, total):
    m = 100 * current / total
    self.gauge_1.SetValue(m)
    wx.Yield()
</snippet></ROW><ROW><id>17253971</id><snippet>range</snippet></ROW><ROW><id>17254027</id><snippet>less</snippet></ROW><ROW><id>17254027</id><snippet>-r</snippet></ROW><ROW><id>17254027</id><snippet>--raw-control-chars</snippet></ROW><ROW><id>17254027</id><snippet>less</snippet></ROW><ROW><id>17254027</id><snippet>nonprintable = {
    '\x00': '^@',
    '\x01': '^A',
    '\x02': '^B',
    '\x03': '^C',
    '\x04': '^D',
    # etc.
}

for i in range(128):
    character = chr(i)
    print i, nonprintable.get(character, character)
</snippet></ROW><ROW><id>17254096</id><snippet>twitter.py</snippet></ROW><ROW><id>17254096</id><snippet>File "/home/XXX/twitter.py", line 11, in &lt;module&gt;
</snippet></ROW><ROW><id>17254096</id><snippet>from twitter import *</snippet></ROW><ROW><id>17254096</id><snippet>twitter</snippet></ROW><ROW><id>17254096</id><snippet>my_twitter.py</snippet></ROW><ROW><id>17254286</id><snippet>from core.models import * 
from core.serializers import *
tiger = Lady(firstname='Tiger', lastname="Lily")
serial = LadySerializer(tiger, many=False)
serial.data
</snippet></ROW><ROW><id>17254286</id><snippet>{'firstname': u'Tiger', 'lastname': u'Lily'}
</snippet></ROW><ROW><id>17254286</id><snippet>many=False</snippet></ROW><ROW><id>17254286</id><snippet>__iter__</snippet></ROW><ROW><id>17254286</id><snippet>None</snippet></ROW><ROW><id>17254286</id><snippet>False</snippet></ROW><ROW><id>17254287</id><snippet>import httplib

...


def internet_on():
    try:
        urllib2.urlopen("http://google.co.uk/", timeout = 10)
        return True
    except (IOError, httplib.HTTPException):
        return False
</snippet></ROW><ROW><id>17254366</id><snippet>/api/me.json</snippet></ROW><ROW><id>17254366</id><snippet>s = client.get('http://www.reddit.com/api/me.json')
</snippet></ROW><ROW><id>17254366</id><snippet>modhash</snippet></ROW><ROW><id>17254366</id><snippet>client.modhash</snippet></ROW><ROW><id>17254366</id><snippet>me.json</snippet></ROW><ROW><id>17254366</id><snippet>r = client.get('http://www.reddit.com/api/me.json')
modhash = r.json()['modhash']
</snippet></ROW><ROW><id>17254366</id><snippet>requests</snippet></ROW><ROW><id>17254366</id><snippet>.json()</snippet></ROW><ROW><id>17254366</id><snippet>json</snippet></ROW><ROW><id>17254366</id><snippet>modhash</snippet></ROW><ROW><id>17254366</id><snippet>client.post('http://www.reddit.com/api/updateapp', {'modhash': modhash, 'about_url': '...', ...})
</snippet></ROW><ROW><id>17254588</id><snippet>virtualenv:
    system_site_packages: true
</snippet></ROW><ROW><id>17254588</id><snippet>before_install</snippet></ROW><ROW><id>17254588</id><snippet>SITE_PKG_DIR=$VIRTUAL_ENV/lib/python$TRAVIS_PYTHON_VERSION/site-packages
rm -f $VIRTUAL_ENV/lib/python$TRAVIS_PYTHON_VERSION/no-global-site-packages.txt  
</snippet></ROW><ROW><id>17254588</id><snippet>apt-get install python-numpy
apt-get install python-scipy
</snippet></ROW><ROW><id>17254627</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17254627</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; lis = [                            
    (1, "red"),
    (1, "red,green"),
    (1, "green,blue"),
    (2, "green"),
    (2, "yellow,blue"),
]
&gt;&gt;&gt; dic = defaultdict(set)       #sets only contain unique items
for k, v in lis:
    dic[k].update(v.split(','))

&gt;&gt;&gt; dic
defaultdict(&lt;type 'set'&gt;,
{1: set(['blue', 'green', 'red']),
 2: set(['blue', 'green', 'yellow'])})
</snippet></ROW><ROW><id>17254627</id><snippet>dic</snippet></ROW><ROW><id>17254627</id><snippet>&gt;&gt;&gt; dic2 = defaultdict(list)
for k,v in dic.iteritems():
    for val in v:
        dic2[val].append(k)
...         
&gt;&gt;&gt; dic2
defaultdict(&lt;type 'list'&gt;,
{'blue': [1, 2],
 'green': [1, 2],
 'yellow': [2],
 'red': [1]})
</snippet></ROW><ROW><id>17254648</id><snippet>itertools.dropwhile</snippet></ROW><ROW><id>17254648</id><snippet>&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; b = ''.join(dropwhile(lambda c: c != '[', a))
&gt;&gt;&gt; b
'[mylocation]'
</snippet></ROW><ROW><id>17254648</id><snippet>regexs</snippet></ROW><ROW><id>17254648</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pat = re.compile(r'\[.*\]')
&gt;&gt;&gt; b = pat.search(a).group(0)
&gt;&gt;&gt; b
'[mylocation]'
</snippet></ROW><ROW><id>17254736</id><snippet>&lt;h1&gt;</snippet></ROW><ROW><id>17254736</id><snippet>&gt;&gt;&gt; import markdown2
&gt;&gt;&gt; rawtext = "Getting the Gist of Markdown's Formatting Syntax\n------------------------------------------------\nThis page offers a brief "
&gt;&gt;&gt; markdown2.markdown(rawtext)
u"&lt;h2&gt;Getting the Gist of Markdown's Formatting Syntax&lt;/h2&gt;\n\n&lt;p&gt;This page offers a brief &lt;/p&gt;\n"
</snippet></ROW><ROW><id>17254864</id><snippet>PyRSS2Gen</snippet></ROW><ROW><id>17255060</id><snippet>dic = {
'\\' : b'\xe2\x95\x9a',
'-'  : b'\xe2\x95\x90',
'/'  : b'\xe2\x95\x9d',
'|'  : b'\xe2\x95\x91',
'+'  : b'\xe2\x95\x94',
'%'  : b'\xe2\x95\x97',
}

def decode(x):
    return (''.join(dic.get(i, i.encode('utf-8')).decode('utf-8') for i in x))

print(decode('+------------------------------------%'))
print(decode('|           Hello World!             |'))
print(decode('\\------------------------------------/'))
</snippet></ROW><ROW><id>17255060</id><snippet>C:\Temp&gt;python temp.py
╔════════════════════════════════════╗
║           Hello World!             ║
╚════════════════════════════════════╝
</snippet></ROW><ROW><id>17255060</id><snippet>elazar@ubuntu:~$ python3 temp.py 
╔════════════════════════════════════╗
║           Hello World!             ║
╚════════════════════════════════════╝
elazar@ubuntu:~$ 
</snippet></ROW><ROW><id>17255103</id><snippet>Changed in version 2.5: Returns an instance of bytes when available (Python 2.6 and newer) and str otherwise.
</snippet></ROW><ROW><id>17255103</id><snippet>&gt;&gt; bytes(0xbe) == 0xbe
False
</snippet></ROW><ROW><id>17255103</id><snippet>&gt;&gt; int(bytes(0xbe)) == 0xbe
True
</snippet></ROW><ROW><id>17255103</id><snippet>str</snippet></ROW><ROW><id>17255103</id><snippet>str</snippet></ROW><ROW><id>17255178</id><snippet>cur.execute("select COUNT(*) from adjacency where r = %d and c = %d)" % (curRow, curCol)
</snippet></ROW><ROW><id>17255178</id><snippet>cur.execute("select COUNT(*) from adjacency where r = %d and c = %d" % (curRow, curCol))
</snippet></ROW><ROW><id>17255178</id><snippet>cur.execute("select COUNT(*) from adjacency where r = %s and c = %s", (curRow, curCol))
</snippet></ROW><ROW><id>17255200</id><snippet>In [1]: feels_like = lambda w, t: int(13.12+(0.615*float(t))-(11.37*(float(w)*3.6)**0.16)+(0.3965*float(t))*((float(w)*3.6)**0.16))

In [2]: calc_feels_like(3, -5)
Out[2]: -9
</snippet></ROW><ROW><id>17255241</id><snippet>update.replace('myhost', 60, dns.rdatatype.TXT, '"xxx yyy zzz"')
</snippet></ROW><ROW><id>17255241</id><snippet>$ host -t ANY myhost.dyn.example.com
myhost.dyn.example.com descriptive text "xxx yyy zzz"
myhost.dyn.example.com has address 1.2.3.4
</snippet></ROW><ROW><id>17255352</id><snippet>def intersect(dicts):
    common_keys = reduce(set.intersection, map(set, dicts))
    num = float(len(dicts))
    return {k: sum(d[k] for d in dicts)/num for k in common_keys}
</snippet></ROW><ROW><id>17255352</id><snippet>&gt;&gt;&gt; a = {'alpha':12,'beta':13,'gamma':14}
&gt;&gt;&gt; b = {'andora':19,'beta':14,'gamma':19}
&gt;&gt;&gt; c = {'beta':11,'gamma':20}
&gt;&gt;&gt; intersect([a, b, c])
{'beta': 12.666666666666666, 'gamma': 17.666666666666668}
</snippet></ROW><ROW><id>17255352</id><snippet>intersect(a, b, c)</snippet></ROW><ROW><id>17255352</id><snippet>def</snippet></ROW><ROW><id>17255352</id><snippet>def intersect(*dicts)</snippet></ROW><ROW><id>17255472</id><snippet>&lt;bound method CartItem.name of &lt;CartItem: CartItem object&gt; 
</snippet></ROW><ROW><id>17255472</id><snippet>()</snippet></ROW><ROW><id>17255472</id><snippet>i.name()</snippet></ROW><ROW><id>17255587</id><snippet>blanks = '_' * len(secretWord)

for i in range(len(secretWord)): # replace blanks with correctly guessed letters
    if secretWord[i] in correctLetters:
        blanks = blanks[:i] + secretWord[i] + blanks[i+1:]

for letter in blanks: # show the secret word with spaces in between each letter
    print(letter, end=' ')
</snippet></ROW><ROW><id>17255637</id><snippet>from file import</snippet></ROW><ROW><id>17255637</id><snippet>import</snippet></ROW><ROW><id>17255637</id><snippet>import foo

print foo.bar
</snippet></ROW><ROW><id>17255637</id><snippet>from foo import bar

print bar
</snippet></ROW><ROW><id>17255637</id><snippet>&gt;&gt; import foo as foo1
&gt;&gt; import foo as foo2
&gt;&gt; foo1 is foo2
True
</snippet></ROW><ROW><id>17255637</id><snippet>if __name__ == "__main__":
</snippet></ROW><ROW><id>17255637</id><snippet>if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>17255770</id><snippet>from file1 import *  
</snippet></ROW><ROW><id>17255790</id><snippet>skipinitialspace</snippet></ROW><ROW><id>17255790</id><snippet>True</snippet></ROW><ROW><id>17255790</id><snippet>True</snippet></ROW><ROW><id>17255790</id><snippet>False</snippet></ROW><ROW><id>17255790</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; demo='''\
... '1','2','3',   '4'
... '5','6','7',   '8'
... '''
&gt;&gt;&gt; for row in csv.reader(demo.splitlines(True), skipinitialspace=True, quotechar="'"):
...     print row
... 
['1', '2', '3', '4']
['5', '6', '7', '8']
</snippet></ROW><ROW><id>17255861</id><snippet>C:\Users\USER&gt;"C:\Program Files\tcc\tcc.exe" tkExtra.c -o tkExtra.pyd -shared -IC:\Python27\include -LC:\Python27\libs -lpython27
</snippet></ROW><ROW><id>17256424</id><snippet>    model = self.model()
</snippet></ROW><ROW><id>17256424</id><snippet>__init__</snippet></ROW><ROW><id>17256424</id><snippet>    def __init__(self, title = "", content = ""):
        self.title = title.title()
        self.content = content
        self.created_at = datetime.datetime.now()
</snippet></ROW><ROW><id>17256489</id><snippet>unicode</snippet></ROW><ROW><id>17256489</id><snippet>.writerows()</snippet></ROW><ROW><id>17256489</id><snippet>for elem in tree.iter():
    if elem.tag == "AGENCY_CODE":
        agencycodes.append(int(elem.text))
    elif elem.tag == "RIN":
        rins.append(elem.text.encode('utf8'))
    elif elem.tag == "TITLE":
        titles.append(elem.text.encode('utf8'))
</snippet></ROW><ROW><id>17256599</id><snippet>scope</snippet></ROW><ROW><id>17256599</id><snippet>copyPic()</snippet></ROW><ROW><id>17256599</id><snippet>newPic</snippet></ROW><ROW><id>17256599</id><snippet>newPic</snippet></ROW><ROW><id>17256599</id><snippet>return</snippet></ROW><ROW><id>17256599</id><snippet>copyPic()</snippet></ROW><ROW><id>17256599</id><snippet>def copyPic():
  file=pickAFile()
  oldPic=makePicture(file)
  newPic=makeEmptyPicture(getWidth(oldPic),getHeight(oldPic))
  for y in range(0,getHeight(oldPic)):
    for x in range(0,getWidth(oldPic)):
      oldPixel=getPixel(oldPic,x,y)
      colour=getColor(oldPixel)
      newPixel=getPixel(newPic,y,x)
      setColor(newPixel,colour)

  return newPic      # HERE IS THE IMPORTANT THING

newPic = copyPic()   # Here we assign the returned value to a new variable
                     # which belong to the "global scope".
explore(newPic)
</snippet></ROW><ROW><id>17256599</id><snippet>newPic</snippet></ROW><ROW><id>17256599</id><snippet>global</snippet></ROW><ROW><id>17256599</id><snippet>def copyPic():
  file=pickAFile()
  ...
  return newPic    

newPic_2 = copyPic()    # Here we store / assign the "newPic" returned by the 
                        # copy function into another variable "newPic_2" (which
                        # is a "global variable").
explore(newPic_2)
</snippet></ROW><ROW><id>17256599</id><snippet>global</snippet></ROW><ROW><id>17256599</id><snippet>newPic</snippet></ROW><ROW><id>17256599</id><snippet>newPic = None           # First declare "newPic" globally.

def copyPic():
  global newPic         # Tell the function to refer to the global variable.
  ...
  #return newPic        # No need to return anything, the function is 
                        # modifying the right variable.

copyPic()
explore(newPic)
</snippet></ROW><ROW><id>17256606</id><snippet>-T</snippet></ROW><ROW><id>17256606</id><snippet>data</snippet></ROW><ROW><id>17256606</id><snippet>with open('screenies/hello.jpg', 'rb') as image:
    request = requests.put(url, headers=headers, data=image)
</snippet></ROW><ROW><id>17256606</id><snippet>data</snippet></ROW><ROW><id>17256656</id><snippet>socket.recvfrom()</snippet></ROW><ROW><id>17256656</id><snippet>socket.recv()</snippet></ROW><ROW><id>17256737</id><snippet>getStationCoords()</snippet></ROW><ROW><id>17256737</id><snippet>[['476050', '7709929'], ['473971', '7707713'], ['465676', '7691097'], ['515612', '7702192'], ['516655', '7704405'], ['519788', '7713255'], ['538466', '7683341']]
</snippet></ROW><ROW><id>17256737</id><snippet>zip()</snippet></ROW><ROW><id>17256737</id><snippet>eastlist, northlist = [map(int, i) for i in zip(*getStationCoords())]
print eastlist
# [476050, 473971, 465676, 515612, 516655, 519788, 538466]
print northlist
# [7709929, 7707713, 7691097, 7702192, 7704405, 7713255, 7683341]
</snippet></ROW><ROW><id>17256830</id><snippet>app.add_url_rule('/',
                 view_func=Main.as_view('main'),
                 methods = ['GET'])

app.add_url_rule('/&lt;page&gt;/',
                 view_func=Main.as_view('page'),
                 methods = ['GET'])
</snippet></ROW><ROW><id>17256920</id><snippet>sql = """INSERT IGNORE INTO {t} (ID, A, B, C, D, E, F) 
         VALUES (%s, %s, %s, %s, %s, %s, %s)""".format(t=table_name)
rows_inserted += cursor.execute(sql, (1, row[0], row[1], row[2], row[3], row[4], row[5]))
</snippet></ROW><ROW><id>17256920</id><snippet>cursor = connection.cursor()
sql = 'CREATE TABLE %s'
cursor.execute(sql, ['test'])
</snippet></ROW><ROW><id>17257036</id><snippet>import os
import sys

# Import System libraries
import glob
import random
import re

sys.coinit_flags = 0 # comtypes.COINIT_MULTITHREADED

# USE COMTYPES OR WIN32COM
#import comtypes
#from comtypes.client import CreateObject

# USE COMTYPES OR WIN32COM
import win32com
from win32com.client import Dispatch

scripts_dir = "C:\\scripts"
conv_scripts_dir = "C:\\converted_scripts"
strcode = \
'''
sub test()
   msgbox "Inside the macro"
end sub
'''

#com_instance = CreateObject("Excel.Application", dynamic = True) # USING COMTYPES
com_instance = Dispatch("Excel.Application") # USING WIN32COM
com_instance.Visible = True 
com_instance.DisplayAlerts = False 

for script_file in glob.glob(os.path.join(scripts_dir, "*.xls")):
    print "Processing: %s" % script_file
    (file_path, file_name) = os.path.split(script_file)
    objworkbook = com_instance.Workbooks.Open(script_file)
    xlmodule = objworkbook.VBProject.VBComponents.Add(1)
    xlmodule.CodeModule.AddFromString(strcode.strip())
    objworkbook.SaveAs(os.path.join(conv_scripts_dir, file_name))

com_instance.Quit()
</snippet></ROW><ROW><id>17257100</id><snippet>root = Tk()</snippet></ROW><ROW><id>17257100</id><snippet>class App:
    def __init__(self,master):
        frame = Frame(master)
        frame.pack()
        self.strval = StringVar(frame)
        # ...
</snippet></ROW><ROW><id>17257129</id><snippet>null=True, blank=True</snippet></ROW><ROW><id>17257129</id><snippet>unique=True</snippet></ROW><ROW><id>17257129</id><snippet>None</snippet></ROW><ROW><id>17257169</id><snippet>from pyparsing import makeHTMLTags,withAttribute,Suppress,Regex,Group

""" looking for this recurring pattern:
          &lt;td valign="top" bgcolor="#FFFFCC"&gt;00-03&lt;/td&gt;
          &lt;td valign="top"&gt;.50&lt;/td&gt;
          &lt;td valign="top"&gt;.50&lt;/td&gt;

    and want a dict with keys 0, 1, 2, and 3 all with values (.50,.50)
"""

td,tdend = makeHTMLTags("td")
keytd = td.copy().setParseAction(withAttribute(bgcolor="#FFFFCC"))
td,tdend,keytd = map(Suppress,(td,tdend,keytd))

realnum = Regex(r'1?\.\d+').setParseAction(lambda t:float(t[0]))
integer = Regex(r'\d{1,3}').setParseAction(lambda t:int(t[0]))
DASH = Suppress('-')

# build up an expression matching the HTML bits above
entryExpr = (keytd + integer("start") + DASH + integer("end") + tdend + 
                    Group(2*(td + realnum + tdend))("vals"))
</snippet></ROW><ROW><id>17257169</id><snippet># search the input HTML for matches to the entryExpr expression, and build up lookup dict
lookup = {}
for entry in entryExpr.searchString(sourcehtml):
    for i in range(entry.start, entry.end+1):
        lookup[i] = tuple(entry.vals)
</snippet></ROW><ROW><id>17257169</id><snippet># print out some test values
for test in (0,20,100,700):
    print (test, lookup[test])
</snippet></ROW><ROW><id>17257169</id><snippet>0 (0.5, 0.5)
20 (0.53, 0.47)
100 (0.64, 0.36)
700 (0.99, 0.01)
</snippet></ROW><ROW><id>17257293</id><snippet>import BaseHTTPServer, SimpleHTTPServer
import ssl

httpd = BaseHTTPServer.HTTPServer(('localhost', 4443), SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap_socket (httpd.socket, certfile='path/to/localhost.pem', server_side=True)
httpd.serve_forever()
</snippet></ROW><ROW><id>17257429</id><snippet>&gt;&gt;&gt; print "{:&gt;25.2f}".format(34)
                34.00
</snippet></ROW><ROW><id>17257518</id><snippet>%</snippet></ROW><ROW><id>17257518</id><snippet>a % b</snippet></ROW><ROW><id>17257518</id><snippet>a / b</snippet></ROW><ROW><id>17257518</id><snippet>[-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>17257518</id><snippet>-9 % 3</snippet></ROW><ROW><id>17257518</id><snippet>5 % 3</snippet></ROW><ROW><id>17257518</id><snippet>5 - 3 == 2</snippet></ROW><ROW><id>17257518</id><snippet>not i % 3</snippet></ROW><ROW><id>17257518</id><snippet>i % 3</snippet></ROW><ROW><id>17257518</id><snippet>True</snippet></ROW><ROW><id>17257518</id><snippet>not</snippet></ROW><ROW><id>17257518</id><snippet>not True</snippet></ROW><ROW><id>17257518</id><snippet>False</snippet></ROW><ROW><id>17257518</id><snippet>not False is True</snippet></ROW><ROW><id>17257518</id><snippet>0</snippet></ROW><ROW><id>17257518</id><snippet>False</snippet></ROW><ROW><id>17257518</id><snippet>i % 3 == 0</snippet></ROW><ROW><id>17257518</id><snippet>i</snippet></ROW><ROW><id>17257518</id><snippet>print("%s %s", ("hello", "world"))</snippet></ROW><ROW><id>17257518</id><snippet>%</snippet></ROW><ROW><id>17257525</id><snippet>__init__</snippet></ROW><ROW><id>17257525</id><snippet>__init__</snippet></ROW><ROW><id>17257525</id><snippet>__new__</snippet></ROW><ROW><id>17257525</id><snippet>__init__</snippet></ROW><ROW><id>17257525</id><snippet>from sqlalchemy.orm import reconstructor
@reconstructor
awesome_true_init(self):
    self.away_dictionary = {'hi': 'i work!!'}
</snippet></ROW><ROW><id>17257525</id><snippet>__init__</snippet></ROW><ROW><id>17257531</id><snippet>with</snippet></ROW><ROW><id>17257531</id><snippet>with</snippet></ROW><ROW><id>17257531</id><snippet>with</snippet></ROW><ROW><id>17257680</id><snippet>&gt;&gt;&gt; d['items'][1]['start']['dateTime']
u'2013-06-24T09:00:00-05:00'
</snippet></ROW><ROW><id>17257736</id><snippet>def run_command(command):
    p = subprocess.Popen(command,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT)
    return iter(p.stdout.readline, b'')
</snippet></ROW><ROW><id>17257736</id><snippet>for output_line in run_command('java -jar jarfile.jar'):
    print(output_line)
</snippet></ROW><ROW><id>17257736</id><snippet>import subprocess</snippet></ROW><ROW><id>17257736</id><snippet>run_command</snippet></ROW><ROW><id>17257745</id><snippet>data[]
data.append([-1, 0 ,"name1", 0])
data.append([0,1, "name2", 1])
data.append([1, 2, "name3", 1])
data.append([2 ,3, "name4", 2])
data.append([2 ,4, "name5" ,2])
data.append([1 ,5, "name6", 2])
data.append([5, 6, "name7", 3])
data.append([5, 7, "name8",1])
data.append([5, 7, "name9",2])

def listToDict(input):
    root = {}
    lookup = {}
    for parent_id, id, name, attr in input:
        if parent_id == -1: 
            root['name'] = name;
            lookup[id] = root
        else:
            node = {'name': name}
            lookup[parent_id].setdefault('children', []).append(node)
            lookup[id] = node
    return root

result = listToDict(data)
print result
print json.dumps(result)
</snippet></ROW><ROW><id>17257745</id><snippet>    for v in result:
        values = [v[2], v[3], v[4], v[5]]
        pc.append(values)
</snippet></ROW><ROW><id>17257859</id><snippet>raw_input</snippet></ROW><ROW><id>17257925</id><snippet>os.rename(filename, filename[:-18]+'.mov')
</snippet></ROW><ROW><id>17257925</id><snippet>os.rename(root + os.sep + filename, root + os.sep + filename[:-18]+'.mov')
</snippet></ROW><ROW><id>17258011</id><snippet>six</snippet></ROW><ROW><id>17258011</id><snippet>pip install six</snippet></ROW><ROW><id>17258081</id><snippet>print (r.data.decode('utf-8'))</snippet></ROW><ROW><id>17258305</id><snippet>artwork_url</snippet></ROW><ROW><id>17258305</id><snippet>artwork_url.forloop.counter</snippet></ROW><ROW><id>17258305</id><snippet>{% for track in tracks %} 
&lt;li&gt;&lt;div class="genre-image"&gt;
&lt;img src="{{ track.artwork_url }}"&gt;
&lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>17258305</id><snippet>{{ track.artwork_url|myFormatter:'t300' }}</snippet></ROW><ROW><id>17258305</id><snippet>@register.filter(name='myDate')
def myFormatter(value, arg):
    if arg == 't300':
        arg = 't300x300'
    return str(value).replace("large", arg)
</snippet></ROW><ROW><id>17258417</id><snippet>for-loop</snippet></ROW><ROW><id>17258417</id><snippet>#use `with` statement for handling files, it automatically closes the file for you.
with open('file.html') as fo, open('file1.html', 'w') as fo1:
   for line in fo:                   #reads one line at a time, memory efficient
      #do something with line, line.strip()
      fo1.write(line + '\n')              #write line to to fo1
</snippet></ROW><ROW><id>17258417</id><snippet>fileinput</snippet></ROW><ROW><id>17258417</id><snippet>import fileinput
for line in fileinput.input('file.html', inplace = True):
   #do something with line
   print line  #writes the line back to 'file.html'
</snippet></ROW><ROW><id>17258417</id><snippet>file.read()</snippet></ROW><ROW><id>17258417</id><snippet>fo_as_string = fo.read()
lines = fo_as_string.splitlines()
</snippet></ROW><ROW><id>17258417</id><snippet>file.read()</snippet></ROW><ROW><id>17258417</id><snippet>f.readlines()</snippet></ROW><ROW><id>17258417</id><snippet>list(f)</snippet></ROW><ROW><id>17258796</id><snippet>In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: df = pd.DataFrame(np.random.randint(0,5,12).reshape(3,4), 
                                            columns=list('abcd'))

In [4]: print df
   a  b  c  d
0  2  2  3  1
1  0  1  0  2
2  1  3  0  4

In [5]: new = pd.concat([df[col].value_counts() for col in df.columns], axis=1)

In [6]: new.columns = df.columns

In [7]: print new
    a   b   c   d
0   1 NaN   2 NaN
1   1   1 NaN   1
2   1   1 NaN   1
3 NaN   1   1 NaN
4 NaN NaN NaN   1
</snippet></ROW><ROW><id>17258927</id><snippet>__str__()</snippet></ROW><ROW><id>17258927</id><snippet>__Unicode__()</snippet></ROW><ROW><id>17258927</id><snippet>__unicode__()</snippet></ROW><ROW><id>17259281</id><snippet>benchmark.py</snippet></ROW><ROW><id>17259281</id><snippet># vim: set fileencoding=utf-8 :
import timeit
import pyximport
pyximport.install()

def timer(func, mod):
    import_ = 'from %s import mk_value' % mod
    time = timeit.timeit(func, import_, number=100000)
    ms = 1000 * time
    us = 1000 * ms

    if func[40:]:
        func_short = func[:37] + '...'
    else:
        func_short = func

    print '%(mod)s.%(func_short)-40s %(ms)6dms %(us)12dμs' % locals()

for mod in 'abcd':
    timer("mk_value(1234)", mod)
    timer("mk_value(1234.56)", mod)
    timer("mk_value('1234')", mod)
    timer("mk_value('1234.56')", mod)
    timer("mk_value('1,234.56', thousand_sep=',')", mod)
    timer("mk_value('1.234.567,89 EUR', currency_sign='EUR', "
        "thousand_sep='.', decimal_sep=',')", mod)
</snippet></ROW><ROW><id>17259281</id><snippet>a.py</snippet></ROW><ROW><id>17259281</id><snippet>import ast
import types
NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)

def mk_value(s, currency_sign='', thousand_sep='', decimal_sep='.'):
    if isinstance(s, bool): # make boolean into a 0/1 value
            if s:
                result = 1
            else:
                result = 0
    elif isinstance(s, NumberTypes): # keep numbers as/is
        result = s
    else: # convert a string
        # prepare the string for conversion
        if currency_sign != '':
            s = s.replace(currency_sign, '')
        if thousand_sep != '':
            s = s.replace(thousand_sep, '')
        if decimal_sep != '.':
            s = s.replace(decimal_sep, '.')        
        s = s.strip()
        # convert the string
        if s == '':
            result = None
        else:
            try:
                # convert the string by a safe evaluation
                result = ast.literal_eval(s)
                # check if result of the evaluation is a number type
                if not isinstance(result, NumberTypes):
                    result = None
            except ValueError:
                # if the conversion gave an error, the string is not a number
                result = None
    return result
</snippet></ROW><ROW><id>17259281</id><snippet>b.py</snippet></ROW><ROW><id>17259281</id><snippet>import types
NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)

def mk_value(s, currency_sign='', thousand_sep='', decimal_sep='.'):
    if isinstance(s, bool): # make boolean into a 0/1 value
            if s:
                result = 1
            else:
                result = 0
    elif isinstance(s, NumberTypes): # keep numbers as/is
        result = s
    else: # convert a string
        # prepare the string for conversion
        if currency_sign:
            s = s.replace(currency_sign, '')
        if thousand_sep:
            s = s.replace(thousand_sep, '')
        if decimal_sep != '.':
            s = s.replace(decimal_sep, '.')        
        s = s.strip()
        # convert the string
        if not s: # if the string is empty, it's not a number
            result = None
        else:
            try: # try int
                result = int(s)
            except ValueError:
                try: # if there's an error, try float
                    result = float(s)
                except ValueError:                    
                    # if the conversion gave an error, the string is not a number
                    result = None
    return result
</snippet></ROW><ROW><id>17259281</id><snippet>c.pyx</snippet></ROW><ROW><id>17259281</id><snippet>import types
NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)

def mk_value(s, currency_sign='', thousand_sep='', decimal_sep='.'):
    if isinstance(s, bool): # make boolean into a 0/1 value
        if s:
            result = 1
        else:
            result = 0

    elif isinstance(s, NumberTypes): # keep numbers as/is
        result = s

    else: # convert a string
        # prepare the string for conversion
        if currency_sign:
            s = s.replace(currency_sign, '')
        if thousand_sep:
            s = s.replace(thousand_sep, '')
        if decimal_sep != '.':
            s = s.replace(decimal_sep, '.')        
        s = s.strip()
        # convert the string
        if not s: # if the string is empty, it's not a number
            result = None
        else:
            try: # try int
                result = int(s)
            except ValueError:
                try: # if there's an error, try float
                    result = float(s)
                except ValueError:                    
                    # if the conversion gave an error, the string is not a number
                    result = None
    return result
</snippet></ROW><ROW><id>17259281</id><snippet>d.pyx</snippet></ROW><ROW><id>17259281</id><snippet>import types
NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)

def  mk_value(s, currency_sign='', thousand_sep='', decimal_sep='.'):
    if isinstance(s, bool): # make boolean into a 0/1 value
        if s:
            result = 1
        else:
            result = 0

    elif isinstance(s, NumberTypes): # keep numbers as/is
        result = s

    elif s:
        if currency_sign:
            s = s.replace(currency_sign, '')

        result = _mk_value(s, currency_sign, thousand_sep, decimal_sep)

    else:
        result = None

    return result

cdef object _mk_value(char *s, char *currency_sign, char *thousand_sep, char *decimal_sep):
    cdef int i=0, j=0
    result = None

    while s[i]:
        if s[i] == decimal_sep[0]:
            s[j] = '.'
            j += 1
        elif s[i] == thousand_sep[0]:
            pass
        elif s[i] == ' ':
            pass
        else:
            s[j] = s[i]
            j += 1

        i += 1

    # convert the string
    if not s: # if the string is empty, it's not a number
        result = None
    else:
        try: # try int
            result = int(s)
        except ValueError:
            try: # if there's an error, try float
                result = float(s)
            except ValueError:                    
                # if the conversion gave an error, the string is not a number
                pass
    return result
</snippet></ROW><ROW><id>17259281</id><snippet>a.mk_value(1234)                               27ms        27526μs
a.mk_value(1234.56)                            42ms        42097μs
a.mk_value('1234')                            502ms       502109μs
a.mk_value('1234.56')                         520ms       520395μs
a.mk_value('1,234.56', thousand_sep=',')      570ms       570749μs
a.mk_value('1.234.567,89 EUR', currency...    627ms       627456μs
b.mk_value(1234)                               27ms        27082μs
b.mk_value(1234.56)                            40ms        40014μs
b.mk_value('1234')                             94ms        94444μs
b.mk_value('1234.56')                         276ms       276519μs
b.mk_value('1,234.56', thousand_sep=',')      315ms       315310μs
b.mk_value('1.234.567,89 EUR', currency...    374ms       374861μs
c.mk_value(1234)                               11ms        11482μs
c.mk_value(1234.56)                            22ms        22765μs
c.mk_value('1234')                             69ms        69251μs
c.mk_value('1234.56')                         176ms       176908μs
c.mk_value('1,234.56', thousand_sep=',')      226ms       226709μs
c.mk_value('1.234.567,89 EUR', currency...    285ms       285431μs
d.mk_value(1234)                               11ms        11483μs
d.mk_value(1234.56)                            22ms        22355μs
d.mk_value('1234')                             69ms        69151μs
d.mk_value('1234.56')                         169ms       169364μs
d.mk_value('1,234.56', thousand_sep=',')      187ms       187460μs
d.mk_value('1.234.567,89 EUR', currency...    233ms       233935μs
</snippet></ROW><ROW><id>17259375</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17259375</id><snippet>import ast
with open("test.txt", 'r') as file_name:
    lists = ast.literal_eval(file_name.read())
    for url in lists:
        print url
</snippet></ROW><ROW><id>17259375</id><snippet>eval</snippet></ROW><ROW><id>17259494</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; print(random.randint)
&lt;bound method Random.randint of &lt;random.Random object at 0x7fdadc0fbc20&gt;&gt;
</snippet></ROW><ROW><id>17259494</id><snippet>randint</snippet></ROW><ROW><id>17259494</id><snippet>&gt;&gt;&gt; print(random.randint(0, 10))
7
</snippet></ROW><ROW><id>17259543</id><snippet>import time
interval = 0.2  # nr of seconds
while True:
    stop_looping = myAlertCheck()
    if stop_looping:
        break
    time.sleep(interval)
</snippet></ROW><ROW><id>17259543</id><snippet>import time
from datetime import datetime

interval = 3  # nr of seconds    
events = {
    'Game Night': '14:00 2013-06-23',
    '3CB vs ST3 Match': '18:45 2013-07-02',
    'Website Maintainance': '13:00 2013-07-16', 
}

def myAlertCheck(events):
    for title, event_date in events.iteritems():
        ed = datetime.strptime(event_date, '%H:%M %Y-%m-%d')
        delta_s = (datetime.now() - ed).seconds
        if delta_s &lt; (15 * 60):
            print 'within 15 minutes %s starts' % title
            return True

while True:
    stop_looping = myAlertCheck(events)
    if stop_looping:
        break
    time.sleep(interval)
</snippet></ROW><ROW><id>17259581</id><snippet>onefile</snippet></ROW><ROW><id>17259581</id><snippet>pyinstaller --onefile myfile.py
</snippet></ROW><ROW><id>17259611</id><snippet>post_save</snippet></ROW><ROW><id>17259611</id><snippet>from django.db.models.signals import post_save
from myapp.models import Car

def do_something(sender, **kwargs):
    print 'the object is now saved.'
    car = kwargs['instance'] #now i have access to the object

post_save.connect(do_something, sender=Car)
</snippet></ROW><ROW><id>17259611</id><snippet>request finished</snippet></ROW><ROW><id>17259663</id><snippet>.readline()</snippet></ROW><ROW><id>17259663</id><snippet>islice()</snippet></ROW><ROW><id>17259663</id><snippet>sys.stdin</snippet></ROW><ROW><id>17259663</id><snippet>file.next()</snippet></ROW><ROW><id>17259663</id><snippet>.next()</snippet></ROW><ROW><id>17259663</id><snippet>next()</snippet></ROW><ROW><id>17259663</id><snippet>next()</snippet></ROW><ROW><id>17259663</id><snippet>readline()</snippet></ROW><ROW><id>17259663</id><snippet>.readline()</snippet></ROW><ROW><id>17259663</id><snippet>next(sys.stdin)</snippet></ROW><ROW><id>17259663</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>17259663</id><snippet>.readline()</snippet></ROW><ROW><id>17259663</id><snippet>def p(): 
    cases = int(next(sys.stdin))
    for case in xrange(cases):
        height = int(next(sys.stdin))
        triangle = [map(int, i.split()) for i in islice(sys.stdin, height)]
</snippet></ROW><ROW><id>17259663</id><snippet>def p(): 
    for case in xrange(int(next(sys.stdin))):
        triangle = [map(int, i.split()) for i in islice(sys.stdin, int(next(sys.stdin)))]
</snippet></ROW><ROW><id>17259985</id><snippet>def loggedin(request):
    return {'username': request.session.get('username','')}
</snippet></ROW><ROW><id>17259985</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>17259985</id><snippet>settings.py</snippet></ROW><ROW><id>17259985</id><snippet>'django.core.context_processors.request',</snippet></ROW><ROW><id>17259985</id><snippet>someapp/processors.py</snippet></ROW><ROW><id>17259985</id><snippet>'somapp.processors.loggedin',</snippet></ROW><ROW><id>17259985</id><snippet>RequestContext</snippet></ROW><ROW><id>17259985</id><snippet>{{ username }}</snippet></ROW><ROW><id>17260013</id><snippet>0</snippet></ROW><ROW><id>17260013</id><snippet>0</snippet></ROW><ROW><id>17260013</id><snippet>1</snippet></ROW><ROW><id>17260013</id><snippet>2</snippet></ROW><ROW><id>17260013</id><snippet>3</snippet></ROW><ROW><id>17260013</id><snippet>len(bships)</snippet></ROW><ROW><id>17260013</id><snippet>battleships</snippet></ROW><ROW><id>17260013</id><snippet>bships[c-b][a-1]</snippet></ROW><ROW><id>17260013</id><snippet>print(fun(1,1,battleships))
</snippet></ROW><ROW><id>17260013</id><snippet>bships[4-1][1-1]</snippet></ROW><ROW><id>17260013</id><snippet>bships[3][0]</snippet></ROW><ROW><id>17260013</id><snippet>['0','0','0','0'][0]</snippet></ROW><ROW><id>17260013</id><snippet>0</snippet></ROW><ROW><id>17260447</id><snippet>p.string.strip()</snippet></ROW><ROW><id>17260447</id><snippet>p.string.replaceWith(NEW_STRING)</snippet></ROW><ROW><id>17260447</id><snippet>from bs4 import BeautifulSoup

with open('file.html', 'r') as f:
    html_file_as_string = f.read()
soup = BeautifulSoup(html_file_as_string, "lxml")
for div in soup.find_all('div', {'class': 'my_class'}):
    for p in div.find('p'):
        p.string.replace_with(p.string.strip())
with open('file', 'w') as f:
    f.write(soup.renderContents())
</snippet></ROW><ROW><id>17260447</id><snippet>re.sub(..)</snippet></ROW><ROW><id>17260447</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '   hello'
&gt;&gt;&gt; re.sub('\s+', '', text)
'hello'
&gt;&gt;&gt; text
'   hello'
</snippet></ROW><ROW><id>17260447</id><snippet>from bs4 import BeautifulSoup

with open('file.html', 'r') as f:
    html_file_as_string = f.read()
soup = BeautifulSoup(html_file_as_string, "lxml")
for div in soup.find_all('div', {'class': 'my_class'}):
    for p in div.findAll('p'):
        new = BeautifulSoup(u'\n'.join(u'&lt;p&gt;{}&lt;/p&gt;'.format(line.strip()) for line in p.text.splitlines() if line), 'html.parser')
        p.replace_with(new)
with open('file', 'w') as f:
    f.write(soup.renderContents())
</snippet></ROW><ROW><id>17260475</id><snippet>rows</snippet></ROW><ROW><id>17260475</id><snippet>len(df)</snippet></ROW><ROW><id>17260475</id><snippet>True</snippet></ROW><ROW><id>17260475</id><snippet>df[rows]</snippet></ROW><ROW><id>17260475</id><snippet>False</snippet></ROW><ROW><id>17260475</id><snippet>df[~rows]</snippet></ROW><ROW><id>17260475</id><snippet>import pandas as pd
import numpy as np
import random
np.random.seed(2013)

df_source = pd.DataFrame(
    np.random.randn(5, 2), index=range(0, 10, 2), columns=list('AB'))

rows = np.random.randint(2, size=len(df_source)).astype('bool')

df_source_train = df_source[rows]
df_source_test = df_source[~rows]

print(rows)
# [ True  True False  True False]

# if for some reason you need the index values of where `rows` is True
print(np.where(rows))  
# (array([0, 1, 3]),)

print(df_source)
#           A         B
# 0  0.279545  0.107474
# 2  0.651458 -1.516999
# 4 -1.320541  0.679631
# 6  0.833612  0.492572
# 8  1.555721  1.741279

print(df_source_train)
#           A         B
# 0  0.279545  0.107474
# 2  0.651458 -1.516999
# 6  0.833612  0.492572

print(df_source_test)
#           A         B
# 4 -1.320541  0.679631
# 8  1.555721  1.741279
</snippet></ROW><ROW><id>17260549</id><snippet>infile</snippet></ROW><ROW><id>17260549</id><snippet>import csv

with open('myfile.csv', mode='r') as infile:
    reader = csv.reader(infile,)
    DICT = {rows[0]:rows[1] for rows in reader if len(rows) == 2}
    print DICT

n = ['F59241', 'F65563', 'F59226', 'F69215']

for key in n:
    if DICT.get(key):
        print ((key) + ' : ' + DICT[key])
    else:
        print((key) + ' : ' + "Not Available")
</snippet></ROW><ROW><id>17260778</id><snippet>b = ';'.join(a)`
</snippet></ROW><ROW><id>17260778</id><snippet>A = ['a.png', 'b.png', 'c.png', 'd.png', 'e.png']
B = ';'.join(A)
print b #this will return -&gt; a.png;b.png;c.png;d.png;e.png
</snippet></ROW><ROW><id>17261067</id><snippet>User</snippet></ROW><ROW><id>17261067</id><snippet>ndb</snippet></ROW><ROW><id>17261067</id><snippet>db</snippet></ROW><ROW><id>17261067</id><snippet>ndb</snippet></ROW><ROW><id>17261067</id><snippet>gae-boilerplate</snippet></ROW><ROW><id>17261067</id><snippet>KeyProperty()</snippet></ROW><ROW><id>17261067</id><snippet>class BlogPost(ndb.Model):
    title = ndb.StringProperty()
    content = ndb.TextProperty()
    timestamp = ndb.DateTimeProperty(auto_add_now=True)

# Then you can specify a parent in the constructor (where user is a User entity)
blog_post = BlogPost(parent=user)
blog_post.title = 'Post title'
blog_post.content = 'Post content'
blog_post.put()
</snippet></ROW><ROW><id>17261197</id><snippet>def scrabble_score(word):
    count=0
    word = word.lower() #assign the result of word.lower() to word
</snippet></ROW><ROW><id>17261197</id><snippet>word.lower()</snippet></ROW><ROW><id>17261197</id><snippet>.lower()</snippet></ROW><ROW><id>17261197</id><snippet>&gt;&gt;&gt; help(str.lower)
Help on method_descriptor:

lower(...)
    S.lower() -&gt; string

    Return a copy of the string S converted to lowercase.
</snippet></ROW><ROW><id>17261203</id><snippet>import sys
from Tkinter import *

ABOUT_TEXT = """About

SPIES will search your chosen directory for photographs containing
GPS information. SPIES will then plot the co-ordinates on Google
maps so you can see where each photograph was taken."""

DISCLAIMER = """
Disclaimer

Simon's Portable iPhone Exif-extraction Software (SPIES)
software was made by Simon. This software
comes with no guarantee. Use at your own risk"""

def clickAbout():
    toplevel = Toplevel()
    label1 = Label(toplevel, text=ABOUT_TEXT, height=0, width=100)
    label1.pack()
    label2 = Label(toplevel, text=DISCLAIMER, height=0, width=100)
    label2.pack()


app = Tk()
app.title("SPIES")
app.geometry("500x300+200+200")

label = Label(app, text="Please browse to the directory you wish to scan", height=0, width=100)
b = Button(app, text="Quit", width=20, command=app.destroy)
button1 = Button(app, text="About SPIES", width=20, command=clickAbout)
label.pack()
b.pack(side='bottom',padx=0,pady=0)
button1.pack(side='bottom',padx=5,pady=5)

app.mainloop()
</snippet></ROW><ROW><id>17261264</id><snippet>G.add_edge(0,1, likes = ['milk', 'oj'])
</snippet></ROW><ROW><id>17261278</id><snippet>os.listdir(directory)</snippet></ROW><ROW><id>17261278</id><snippet>files=[os.path.join(directory, f) for f in os.listdir(directory) 
    if os.path.isfile(os.path.join(directory, f))] #Get only files, not directories
for f in files:
  #open file, do EXIF stuff
</snippet></ROW><ROW><id>17261440</id><snippet>next()</snippet></ROW><ROW><id>17261440</id><snippet>next_line = next(mix_files[i])
</snippet></ROW><ROW><id>17261440</id><snippet>StopIteration</snippet></ROW><ROW><id>17261440</id><snippet>next()</snippet></ROW><ROW><id>17261440</id><snippet>next_line = next(mix_files[i], None)
</snippet></ROW><ROW><id>17261457</id><snippet>":\n"</snippet></ROW><ROW><id>17261457</id><snippet>str.rstrip</snippet></ROW><ROW><id>17261457</id><snippet>', '</snippet></ROW><ROW><id>17261457</id><snippet>&gt;&gt;&gt; strs = "Liver , 253, 0:\n"
&gt;&gt;&gt; strs.rstrip(':\n').split(', ')
['Liver ', '253', '0']
</snippet></ROW><ROW><id>17261457</id><snippet>#use `with` statement for handling file, it will close the file for you.
&gt;&gt;&gt; with open('nutrientlist.txt') as f:
...     foodlist = []
...     for line in f:
            if line.strip():          #check if the line is empty or not
                spl = line.rstrip(':\n').split(', ') 
                spl[1:] = [int(x) for x in spl[1:]] # apply `int()` to all items except first one
...         foodlist.append(spl)                #append the list to foodlist 
...         
&gt;&gt;&gt; foodlist
[['Liver ', 253, 0], ['Spinach', 844, 45], ['Sausage', 200, 100]]
</snippet></ROW><ROW><id>17261457</id><snippet>f = open('abc')        # Never use `list` as a variable name
data  = f.read()
split = data.split("\n")
foodList = []
for x in split:
    if x.strip():      #check if the line is empty or not
       foodList.append( x.rstrip(':').split(', ') )
f.close()
print foodList
</snippet></ROW><ROW><id>17261656</id><snippet>execute</snippet></ROW><ROW><id>17261656</id><snippet>with self.connection as cursor:
    cursor.execute(open("schema.sql", "r").read())
</snippet></ROW><ROW><id>17261656</id><snippet>autocommit</snippet></ROW><ROW><id>17261656</id><snippet>$$</snippet></ROW><ROW><id>17261656</id><snippet>$delimiter$</snippet></ROW><ROW><id>17261656</id><snippet>standard_conforming_strings</snippet></ROW><ROW><id>17261920</id><snippet># Create the button and make it checkable
self.testButton = QtGui.QAction(QtGui.QIcon('images/icons/test.png'), 'Test', self)
self.testButton.setCheckable(True)

# Mark the button as checked
self.testButton.setChecked(True)
</snippet></ROW><ROW><id>17261931</id><snippet>&lt;div id="contact_form" class="col_400 float_l"&gt;
  &lt;form id="demoForm"  name="contact" &gt;  

     &lt;label for="text"&gt;Your Review:&lt;/label&gt;
     &lt;textarea id="needid" name="needid" rows="0" cols="0" class="required"&gt;&lt;/textarea&gt;
     &lt;div class="cleaner_h10"&gt;&lt;/div&gt;

     &lt;input type="button" onclick="return Button1_onclick()" class="submit_btn float_l" name="submit" id="predictSentBtn" value="Predict" /&gt;

  &lt;/form&gt;
</snippet></ROW><ROW><id>17261931</id><snippet> def function(request):
    if request.method = 'POST':
        print request.POST['needid'] # print request.POST.get('needid')
</snippet></ROW><ROW><id>17262233</id><snippet>import datetime
today_string = datetime.datetime.today().strftime('%x')

with open('C:/A/B/C/D/TODAYS SHEET' + today_string + '.csv', 'w') as my_file:
    my_file.write('a,a,a,a,a,a')
</snippet></ROW><ROW><id>17262329</id><snippet>#</snippet></ROW><ROW><id>17262329</id><snippet>"""</snippet></ROW><ROW><id>17262329</id><snippet>\n</snippet></ROW><ROW><id>17262329</id><snippet>#</snippet></ROW><ROW><id>17262329</id><snippet>#</snippet></ROW><ROW><id>17262371</id><snippet>input()</snippet></ROW><ROW><id>17262371</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>17262371</id><snippet>''</snippet></ROW><ROW><id>17262371</id><snippet>&gt;&gt;&gt; eval('')
Traceback (most recent call last):
File "&lt;PythonForiOS-Input&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 0

    ^
SyntaxError: unexpected EOF while parsing
</snippet></ROW><ROW><id>17262371</id><snippet>raw_input()</snippet></ROW><ROW><id>17262457</id><snippet>flt</snippet></ROW><ROW><id>17262457</id><snippet>flt</snippet></ROW><ROW><id>17262457</id><snippet>:</snippet></ROW><ROW><id>17262457</id><snippet>if, def, class</snippet></ROW><ROW><id>17262457</id><snippet>flt(i)</snippet></ROW><ROW><id>17262457</id><snippet>flt</snippet></ROW><ROW><id>17262457</id><snippet>o</snippet></ROW><ROW><id>17262457</id><snippet>float</snippet></ROW><ROW><id>17262471</id><snippet>import csv
import sys
import xml.etree.ElementTree as etree

if __name__ == "__main__":

    file_name = sys.argv[1]
    csv_file_name = '.'.join(file_name.split('.')[:-1]) + ".csv"

    root = etree.parse(file_name).getroot()

    with open(csv_file_name, 'w') as file_:

        writer = csv.writer(file_, delimiter="\t")

        for a in zip(root.findall("drillholes/hole/collar"),
                     root.findall("drillholes/hole/toe"),
                     root.findall("drillholes/hole/cost")):
            writer.writerow([x.text for x in a])
</snippet></ROW><ROW><id>17262797</id><snippet> wquery = ("UPDATE `cin`.`flags` SET `flag`='%s', `update_time`='%d' WHERE `name`='%s' AND `lockid`='%s'") % (pic_bin, update_time, names[index], lockid)
</snippet></ROW><ROW><id>17262797</id><snippet>str(pic_bin)</snippet></ROW><ROW><id>17262797</id><snippet>%s</snippet></ROW><ROW><id>17262797</id><snippet>wquery = "UPDATE `cin`.`flags` SET `flag`='%s', `update_time`='%d' WHERE `name`='%s' AND `lockid`='%s'"
cursor.execute(wquery, (pic_bin, update_time, names[index], lockid))
</snippet></ROW><ROW><id>17262878</id><snippet>Button</snippet></ROW><ROW><id>17262878</id><snippet>def draw_button2():
    pylab.figure()
    a = pylab.axes([0.1, 0.1, 0.8, 0.8])
    b = Button(a, 'Button 2')
    b.on_clicked(draw_button1)
    pylab.show()
    return b

b = draw_button2()
</snippet></ROW><ROW><id>17262878</id><snippet>import pylab
from matplotlib.widgets import Button


def draw_button1(event):
    fig = pylab.figure()
    a = pylab.axes([0.1, 0.1, 0.8, 0.8])
    b = Button(a, 'Button 1')

    def say_something(event):
        print "This works."

    b.on_clicked(say_something)
    fig._my_btn = b
    pylab.show()

def draw_button2():
    fig = pylab.figure()
    a = pylab.axes([0.1, 0.1, 0.1, 0.1])
    b = Button(a, 'Button 2')
    b.on_clicked(draw_button1)
    pylab.show()
    fig._my_btn = b


draw_button2()
</snippet></ROW><ROW><id>17262924</id><snippet>sender = '{}@gmail.com'.format(g_user)
</snippet></ROW><ROW><id>17262924</id><snippet>if</snippet></ROW><ROW><id>17262924</id><snippet>if 'GMail_name:::' in line</snippet></ROW><ROW><id>17262924</id><snippet>False</snippet></ROW><ROW><id>17262924</id><snippet>g_user</snippet></ROW><ROW><id>17262942</id><snippet>File "C:/WindowsBalloonTip.py", line 20, in __init__
    classAtom = RegisterClass(wc)
error: (1410, 'RegisterClass', 'Class already exists.')
</snippet></ROW><ROW><id>17262942</id><snippet>RegisterClass</snippet></ROW><ROW><id>17262942</id><snippet>UnregisterClass(lpClassName, hInstance)</snippet></ROW><ROW><id>17262942</id><snippet>classAtom = UnregisterClass(classAtom, hinst)</snippet></ROW><ROW><id>17262942</id><snippet># -- coding: utf-8 --

from win32api import *
from win32gui import *
import win32con
import sys, os
import struct
import time

# Class
class WindowsBalloonTip:
    def __init__(self, title, msg):
        message_map = { win32con.WM_DESTROY: self.OnDestroy,}

        # Register the window class.
        wc = WNDCLASS()
        hinst = wc.hInstance = GetModuleHandle(None)
        wc.lpszClassName = 'PythonTaskbar'
        wc.lpfnWndProc = message_map # could also specify a wndproc.
        classAtom = RegisterClass(wc)

        # Create the window.
        style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU
        self.hwnd = CreateWindow(classAtom, "Taskbar", style, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, hinst, None)
        UpdateWindow(self.hwnd)

        # Icons managment
        iconPathName = os.path.abspath(os.path.join( sys.path[0], 'balloontip.ico' ))
        icon_flags = win32con.LR_LOADFROMFILE | win32con.LR_DEFAULTSIZE
        try:
            hicon = LoadImage(hinst, iconPathName, win32con.IMAGE_ICON, 0, 0, icon_flags)
        except:
            hicon = LoadIcon(0, win32con.IDI_APPLICATION)
        flags = NIF_ICON | NIF_MESSAGE | NIF_TIP
        nid = (self.hwnd, 0, flags, win32con.WM_USER+20, hicon, 'Tooltip')

        # Notify
        Shell_NotifyIcon(NIM_ADD, nid)
        Shell_NotifyIcon(NIM_MODIFY, (self.hwnd, 0, NIF_INFO, win32con.WM_USER+20, hicon, 'Balloon Tooltip', msg, 200, title))
        # self.show_balloon(title, msg)
        time.sleep(5)

        # Destroy
        DestroyWindow(self.hwnd)
        classAtom = UnregisterClass(classAtom, hinst)
    def OnDestroy(self, hwnd, msg, wparam, lparam):
        nid = (self.hwnd, 0)
        Shell_NotifyIcon(NIM_DELETE, nid)
        PostQuitMessage(0) # Terminate the app.

# Function
def balloon_tip(title, msg):
    w=WindowsBalloonTip(title, msg)

# Main
if __name__ == '__main__':
    # Example
    balloon_tip('Lorem Ipsum', 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...')
    balloon_tip('Example two', 'There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...')
</snippet></ROW><ROW><id>17262942</id><snippet>iconPathName = os.path.abspath(os.path.join( sys.path[0], 'balloontip.ico' ))
</snippet></ROW><ROW><id>17262942</id><snippet>iconPathName = "C:\myfolder\myicon.ico"
</snippet></ROW><ROW><id>17262987</id><snippet>#!/usr/bin/env python

import random
import time

def test1():
    print "for loop with no multiproc: "
    m = 10000000
    t = time.time()
    for i in range(m):
        pick = random.choice(['on', 'off', 'both'])
    print time.time()-t

def test2():
    print "map with no multiproc: "
    m = 10000000
    t = time.time()
    map(lambda x: random.choice(['on', 'off', 'both']), range(m))
    print time.time()-t

def rdc(x):
    return random.choice(['on', 'off', 'both'])

def test3():
    from multiprocessing import Pool

    pool = Pool(processes=4)
    m = 10000000

    print "map with multiproc: "
    t = time.time()

    r = pool.map(rdc, range(m))
    print time.time()-t

if __name__ == "__main__":
    test1()
    test2()
    test3()
</snippet></ROW><ROW><id>17262987</id><snippet>for loop with no multiproc: 
8.31032013893
map with no multiproc: 
9.48167610168
map with multiproc: 
4.94983720779
</snippet></ROW><ROW><id>17263232</id><snippet>finally</snippet></ROW><ROW><id>17263232</id><snippet>try:
   f = open("testfile", "w")
   try:
      f.write("This may not work!")
   finally:
      f.close()
except IOError:
   print("Error! Can't find file")
</snippet></ROW><ROW><id>17263232</id><snippet>f.close()</snippet></ROW><ROW><id>17263336</id><snippet>test</snippet></ROW><ROW><id>17263336</id><snippet>import multiprocessing as mp

def test():
    import matplotlib.pyplot as plt
    frac = [10, 10, 10, 10, 10, 10, 40]
    labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    plt.pie(frac, labels = labels, autopct='%1.1f%%')
    plt.title('test', bbox={'facecolor' : '0.8', 'pad' : 5})
    plt.show()    

p1 = mp.Process(target = test)
p1.daemon = True
p1.start()
p1.join()
</snippet></ROW><ROW><id>17263336</id><snippet>p1.join()</snippet></ROW><ROW><id>17263336</id><snippet>while True: pass</snippet></ROW><ROW><id>17263477</id><snippet>
#import sys

if sys.argv[1] == "--def-strict":
    def duplicateFinder(f):
        if globals().has_key(f.__name__):
            raise AttributeError, "This module already has a function %s defined" % f.__name__
        return f
else:
    def duplicateFinder(f):
        return f

@duplicateFinder
def myFunction():
    print "Hello World!"

@duplicateFinder
def myFunction():
    print "Hello World Again!!!"

</snippet></ROW><ROW><id>17263583</id><snippet>groups = MembershipSerializer(source='membership_set', many=True)
</snippet></ROW><ROW><id>17263583</id><snippet>class MembershipSerializer(serializers.HyperlinkedModelSerializer):

    id = serializers.Field(source='group.id')
    name = serializers.Field(source='group.name')

    class Meta:
        model = Membership

        fields = ('id', 'name', 'join_date', )
</snippet></ROW><ROW><id>17263606</id><snippet>fcntl.ioctl()</snippet></ROW><ROW><id>17263606</id><snippet>getargs.c</snippet></ROW><ROW><id>17263606</id><snippet>else if (ival &gt; INT_MAX) {
    PyErr_SetString(PyExc_OverflowError,
    "signed integer is greater than maximum");
    RETURN_ERR_OCCURRED;
}
</snippet></ROW><ROW><id>17263606</id><snippet>/usr/include/limits.h</snippet></ROW><ROW><id>17263606</id><snippet>#  define INT_MAX   2147483647
</snippet></ROW><ROW><id>17263606</id><snippet>(2 ** ((sizeof(int) * 8) - 1)) - 1</snippet></ROW><ROW><id>17263606</id><snippet>sizeof(int)</snippet></ROW><ROW><id>17263606</id><snippet>8</snippet></ROW><ROW><id>17263606</id><snippet>ctypes</snippet></ROW><ROW><id>17263606</id><snippet>from ctypes import *

libc = CDLL('libc.so.6')

fd = os.open (DEV_NAME, os.O_RDWR, 0666)
value = c_uint64(0xffff&lt;&lt;32)
libc.ioctl(fd, 5678, value)
</snippet></ROW><ROW><id>17263689</id><snippet>from_field</snippet></ROW><ROW><id>17263689</id><snippet>conn.sendmail(from_field['email'], to_email, msg.as_string())
</snippet></ROW><ROW><id>17263711</id><snippet>frame = Frame(master,width = 100,height = 100)
frame.focus_set()
</snippet></ROW><ROW><id>17263711</id><snippet>ret</snippet></ROW><ROW><id>17263711</id><snippet>def ret(self, event)</snippet></ROW><ROW><id>17263711</id><snippet>frame.bind('&lt;Return&gt;', lambda e: self.ret())
</snippet></ROW><ROW><id>17263850</id><snippet>post_save</snippet></ROW><ROW><id>17263850</id><snippet>m2m_changed</snippet></ROW><ROW><id>17263850</id><snippet>def my_m2m_signal(sender, **kwargs):
    action = kwargs.get('action')
    if action == 'post_add':
        print 'post_add is activated on m2m'

signals.m2m_changed.connect(my_m2m_signal, sender=Person.car.through)
</snippet></ROW><ROW><id>17264090</id><snippet>datetime</snippet></ROW><ROW><id>17264090</id><snippet>datetime</snippet></ROW><ROW><id>17264090</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17264090</id><snippet>.utctimetuple()</snippet></ROW><ROW><id>17264090</id><snippet>.timetuple()</snippet></ROW><ROW><id>17264113</id><snippet>data = []
while True:
    datum = conn.recv(1024)
    data.append(datum)
    if not datum: break

print " ".join(data)
</snippet></ROW><ROW><id>17264113</id><snippet>import socket
HOST = 'localhost'
PORT = 9090
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.sendall('Hello, world')
s.close()
</snippet></ROW><ROW><id>17264113</id><snippet>import socket

HOST = 'localhost'
PORT = 9090

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()
print 'Connected by', addr
data = []
while True:
    datum = conn.recv(1024)
    data.append(datum)
    if not datum: break

print " ".join(data)

conn.close()
</snippet></ROW><ROW><id>17264117</id><snippet>def compare(E1, E2):
    i, j = 0, 0
    I, J = len(E1), len(E2)
    while i &lt; I:
        if j &gt;= J or E1[i] &lt; E2[j]:
            print(E1[i], "is not in E2")
            i += 1
        elif E1[i] == E2[j]:
            print(E1[i], "is in E2")
            i, j = i + 1, j + 1
        else:
            j += 1
</snippet></ROW><ROW><id>17264236</id><snippet>import ast
a = input("Please enter a dictionary: ")
d = ast.literal_eval(a)
print d
</snippet></ROW><ROW><id>17264236</id><snippet>dict</snippet></ROW><ROW><id>17264247</id><snippet>if</snippet></ROW><ROW><id>17264247</id><snippet>strip</snippet></ROW><ROW><id>17264247</id><snippet>strip()</snippet></ROW><ROW><id>17264247</id><snippet>if strip()</snippet></ROW><ROW><id>17264247</id><snippet>strip()</snippet></ROW><ROW><id>17264316</id><snippet>login_required</snippet></ROW><ROW><id>17264408</id><snippet>while f is open</snippet></ROW><ROW><id>17264408</id><snippet>with open(filenm,'r') as f</snippet></ROW><ROW><id>17264408</id><snippet>f = open(filenm,'r')</snippet></ROW><ROW><id>17264408</id><snippet>return (line_cnt, wrd_cnt, char_cnt)</snippet></ROW><ROW><id>17264408</id><snippet>line_cnt = len(f.readlines( ))</snippet></ROW><ROW><id>17264408</id><snippet>for line in f</snippet></ROW><ROW><id>17264433</id><snippet>server {
    listen        80 default_server deferred;
    listen        443 default_server deferred ssl;
    listen        [::]:80 ipv6only=on default_server deferred;
    listen        [::]:443 ipv6only=on default_server deferred ssl;
    server_name   example.com www.example.com testing.example.com;
    root          /path/to/static/files

    # Include SSL stuff

    location / {

        location ~* \.(css|gif|ico|jpe?g|js[on]?p?|png|svg|txt|xml)$ {
            access_log                off;
            add_header                Cache-Control   "public";
            add_header                Pragma          "public";
            expires                   365d;
            log_not_found             off;
            tcp_nodelay               off;
            open_file_cache           max=16 inactive=600s; # 10 minutes
            open_file_cache_errors    on;
            open_file_cache_min_uses  2;
            open_file_cache_valid     300s; # 5 minutes
        }

        try_files $uri @gunicorn;
    }

    location @gunicorn {
        add_header                X-Proxy-Cache $upstream_cache_status;
        expires                   epoch;
        proxy_cache               proxy;
        proxy_cache_bypass        $nocache;
        proxy_cache_key           "$request_method@$scheme://$server_name:$server_port$uri$args";
        proxy_cache_lock          on;
        proxy_cache_lock_timeout  2000;
        proxy_cache_use_stale     error timeout invalid_header updating http_500;
        proxy_cache_valid         200 302 1m;
        proxy_cache_valid         301 1D;
        proxy_cache_valid         any 5s;
        proxy_http_version        1.1;
        proxy_ignore_headers      Cache-Control Expires;
        proxy_max_temp_file_size  1m;
        proxy_no_cache            $nocache;
        proxy_redirect            off;
        proxy_set_header          Host $host;
        proxy_set_header          X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header          X-Real-IP $remote_addr;
        proxy_pass                http://gunicorn;
    }
}
</snippet></ROW><ROW><id>17264433</id><snippet>upstream</snippet></ROW><ROW><id>17264433</id><snippet>*_pass</snippet></ROW><ROW><id>17264433</id><snippet>worker_processes</snippet></ROW><ROW><id>17264433</id><snippet>auto</snippet></ROW><ROW><id>17264433</id><snippet>auto</snippet></ROW><ROW><id>17264433</id><snippet>auto</snippet></ROW><ROW><id>17264493</id><snippet>def f(*args):
    result = args[0]

    for func in args[1:]:
        result = func(result)

    return result
</snippet></ROW><ROW><id>17264493</id><snippet>&gt;&gt;&gt; f('a test', reversed, sorted, ''.join)
' aestt'
</snippet></ROW><ROW><id>17264732</id><snippet>$</snippet></ROW><ROW><id>17264732</id><snippet>for alpha_i in alpha:
    Phase = phase_angle(alpha_i,f,f_eig)
    host.plot(Freq, Phase, label=r'$\alpha = {0}$'.format(alpha_i), linewidth=2)
</snippet></ROW><ROW><id>17264802</id><snippet>int</snippet></ROW><ROW><id>17264802</id><snippet>int</snippet></ROW><ROW><id>17264802</id><snippet>10**3</snippet></ROW><ROW><id>17264802</id><snippet>int</snippet></ROW><ROW><id>17264802</id><snippet>10**3</snippet></ROW><ROW><id>17264802</id><snippet>e</snippet></ROW><ROW><id>17264802</id><snippet>int(15.55555 * 10**3) / 10**3
</snippet></ROW><ROW><id>17264932</id><snippet>sudo apt-get install python3-httplib2
</snippet></ROW><ROW><id>17264932</id><snippet>pip install httplib2
</snippet></ROW><ROW><id>17264932</id><snippet>import httplib
</snippet></ROW><ROW><id>17264999</id><snippet>infile == NULL
outfile == NULL 
fread != read_count
fwrite != write_count
ferror
</snippet></ROW><ROW><id>17265231</id><snippet>Log</snippet></ROW><ROW><id>17265231</id><snippet>&lt;div id='log'&gt;&lt;/div&gt;</snippet></ROW><ROW><id>17265231</id><snippet>Log</snippet></ROW><ROW><id>17265315</id><snippet>MIA[0[0]]
</snippet></ROW><ROW><id>17265315</id><snippet>MIA[0][0]
</snippet></ROW><ROW><id>17265315</id><snippet>MIA[0]</snippet></ROW><ROW><id>17265315</id><snippet>0</snippet></ROW><ROW><id>17265315</id><snippet>MIA</snippet></ROW><ROW><id>17265315</id><snippet>0</snippet></ROW><ROW><id>17265315</id><snippet>[0]</snippet></ROW><ROW><id>17265315</id><snippet>MIA[0][0]</snippet></ROW><ROW><id>17265315</id><snippet>0[0]</snippet></ROW><ROW><id>17265315</id><snippet>0</snippet></ROW><ROW><id>17265315</id><snippet>0</snippet></ROW><ROW><id>17265315</id><snippet>0</snippet></ROW><ROW><id>17265315</id><snippet>'int' object is not subscriptable</snippet></ROW><ROW><id>17265315</id><snippet>MIA[0][0] + SAS[0][1] + MIA[1][0] + SAS[1][1] + MIA[2][0] + SAS[2][1] + MIA[3][0] + SAS[3][1] + MIA[4][0] + SAS[4][1] == MIAs
</snippet></ROW><ROW><id>17265315</id><snippet>MIAs = MIA[0][0] + SAS[0][1] + MIA[1][0] + SAS[1][1] + MIA[2][0] + SAS[2][1] + MIA[3][0] + SAS[3][1] + MIA[4][0] + SAS[4][1]
</snippet></ROW><ROW><id>17265401</id><snippet>with open(r'C:\Users\MyUsername\Desktop\answer.txt', 'a') as fd:
    print(' '.join(final), file=fd, end='\n')
</snippet></ROW><ROW><id>17265401</id><snippet>'.join(final)</snippet></ROW><ROW><id>17265401</id><snippet>final</snippet></ROW><ROW><id>17265401</id><snippet>' '</snippet></ROW><ROW><id>17265401</id><snippet>'\n'</snippet></ROW><ROW><id>17265401</id><snippet>open</snippet></ROW><ROW><id>17265401</id><snippet>'a'</snippet></ROW><ROW><id>17265401</id><snippet>with open(...) as fd</snippet></ROW><ROW><id>17265401</id><snippet>end</snippet></ROW><ROW><id>17265401</id><snippet>print</snippet></ROW><ROW><id>17265401</id><snippet>'\n'</snippet></ROW><ROW><id>17265401</id><snippet>''</snippet></ROW><ROW><id>17265439</id><snippet>Source.list_of_sources</snippet></ROW><ROW><id>17265439</id><snippet>for src in Source.list_of_sources:
    if not hasattr(src, "authorLast"):
        print (src.aSplit)
</snippet></ROW><ROW><id>17265439</id><snippet>authorLast</snippet></ROW><ROW><id>17265439</id><snippet>self.asplit = self.author.split()
if len(self.asplit) == 1:
    self.asplit.append('')
self.authorFirstName = self.asplit[0]
self.authorLastName = self.asplit[-1]
</snippet></ROW><ROW><id>17265628</id><snippet> In [1]: from pandas.core import panelnd, panel4d
        from pandas.utils import testing as tm 

In [2]: Panel5D = panelnd.create_nd_panel_factory(
   ...:     klass_name='Panel5D',
   ...:     axis_orders=['cool', 'labels', 'items', 'major_axis',
   ...:                  'minor_axis'],
   ...:     axis_slices={'labels': 'labels', 'items': 'items',
   ...:                  'major_axis': 'major_axis',
   ...:                  'minor_axis': 'minor_axis'},
   ...:     slicer=panel4d.Panel4D,
   ...:     axis_aliases={'major': 'major_axis', 'minor': 'minor_axis'},
   ...:     stat_axis=2)

In [4]: p4d = panel4d.Panel4D(dict(L1=tm.makePanel(), L2=tm.makePanel()))

In [5]: p5d = Panel5D(dict(C1 = p4d, C2 = p4d+1))

In [6]: p5d
Out[6]: 
&lt;class 'pandas.core.panelnd.Panel5D'&gt;
Dimensions: 2 (cool) x 2 (labels) x 3 (items) x 30 (major_axis) x 4 (minor_axis)
Cool axis: C1 to C2
Labels axis: L1 to L2
Items axis: ItemA to ItemC
Major_axis axis: 2000-01-03 00:00:00 to 2000-02-11 00:00:00
Minor_axis axis: A to D

In [7]: store = pd.HDFStore('test.h5',mode='w')

In [9]: for x in p5d.cool:
    store.append(x,p5d[x])
   ...:     

In [10]: store
Out[10]: 
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: test.h5
/C1            wide_table   (typ-&gt;appendable,nrows-&gt;360,ncols-&gt;2,indexers-&gt;[items,major_axis,minor_axis])
/C2            wide_table   (typ-&gt;appendable,nrows-&gt;360,ncols-&gt;2,indexers-&gt;[items,major_axis,minor_axis])

In [11]: store.close()
</snippet></ROW><ROW><id>17265679</id><snippet>a</snippet></ROW><ROW><id>17265679</id><snippet>a</snippet></ROW><ROW><id>17265679</id><snippet>a</snippet></ROW><ROW><id>17265679</id><snippet>a = 'abxde'
b = a.replace('x', 'c')

a
=&gt; 'abxde'

b
=&gt; 'abcde'
</snippet></ROW><ROW><id>17265679</id><snippet>a</snippet></ROW><ROW><id>17265679</id><snippet>replace()</snippet></ROW><ROW><id>17265679</id><snippet>b</snippet></ROW><ROW><id>17265823</id><snippet>import urllib, json
def to_json_query(params):
    return urllib.urlencode({p: json.dumps(params[p]) for p in params})

&gt;&gt;&gt; qs = to_json_query({'descending': True, 'startkey': 'Mexico', 'endkey': 'Mexico'})
'startkey=%22Mexico%22&amp;endkey=%22Mexico%22&amp;descending=%22true%22'
</snippet></ROW><ROW><id>17265823</id><snippet>descending</snippet></ROW><ROW><id>17265823</id><snippet>True</snippet></ROW><ROW><id>17265823</id><snippet>true</snippet></ROW><ROW><id>17265823</id><snippet>"true"</snippet></ROW><ROW><id>17266083</id><snippet>startService</snippet></ROW><ROW><id>17266083</id><snippet>IService</snippet></ROW><ROW><id>17266083</id><snippet>Service</snippet></ROW><ROW><id>17266083</id><snippet>stopService</snippet></ROW><ROW><id>17266104</id><snippet>ListField</snippet></ROW><ROW><id>17266104</id><snippet>ReferenceFields</snippet></ROW><ROW><id>17266104</id><snippet>ReferenceFields</snippet></ROW><ROW><id>17266104</id><snippet>reverse_delete_rule=mongoengine.PULL</snippet></ROW><ROW><id>17266172</id><snippet>In [11]: g = df.groupby('key1')
</snippet></ROW><ROW><id>17266172</id><snippet>In [12]: g.apply(lambda x: x[x['key2'] == 'one']['data1'].sum())
Out[12]:
key1
a       0.093391
b       1.468194
dtype: float64
</snippet></ROW><ROW><id>17266172</id><snippet>In [21]: a = g.get_group('a')

In [22]: a
Out[22]:
      data1     data2 key1 key2
0  0.361601  0.375297    a  one
1  0.069889  0.809772    a  two
4 -0.268210  1.250340    a  one

In [23]: a[a['key2'] == 'one']
Out[23]:
      data1     data2 key1 key2
0  0.361601  0.375297    a  one
4 -0.268210  1.250340    a  one

In [24]: a[a['key2'] == 'one']['data1']
Out[24]:
0    0.361601
4   -0.268210
Name: data1, dtype: float64

In [25]: a[a['key2'] == 'one']['data1'].sum()
Out[25]: 0.093391000000000002
</snippet></ROW><ROW><id>17266172</id><snippet>In [31]: df1 = df[df['key2'] == 'one']

In [32]: df1
Out[32]:
      data1     data2 key1 key2
0  0.361601  0.375297    a  one
2  1.468194  0.272929    b  one
4 -0.268210  1.250340    a  one

In [33]: df1.groupby('key1')['data1'].sum()
Out[33]:
key1
a       0.093391
b       1.468194
Name: data1, dtype: float64
</snippet></ROW><ROW><id>17266310</id><snippet>struct entry ***</snippet></ROW><ROW><id>17266310</id><snippet>addr_str = NULL</snippet></ROW><ROW><id>17266310</id><snippet>%module example

// Insert the structure definition and function to wrap into the wrapper code.
%{
  struct entry {
    char* addr_str;
    char cc[2];
  };

  int get_list(const char* string, struct entry** results)
  {
    *results = malloc(3 * sizeof(struct entry));
    (*results)[0].addr_str = malloc(10);
    strcpy((*results)[0].addr_str,"hello");
    (*results)[0].cc[0] = string[0];
    (*results)[0].cc[1] = string[1];
    (*results)[1].addr_str = malloc(10);
    strcpy((*results)[1].addr_str,"there");
    (*results)[1].cc[0] = string[2];
    (*results)[1].cc[1] = string[3];
    (*results)[2].addr_str = NULL;
    return 0;
  }
%}

#include &lt;typemaps.i&gt;

// Define the structure for SWIG
struct entry {
  char* addr_str;
  char cc[2];
};

// Define a set of typemaps to be used for an output parameter.

// This typemap suppresses requiring the parameter as an input.
// A temp variable is created and passed instead.
%typemap(in,numinputs=0) struct entry **OUTPUT (struct entry* temp) %{
  $1 = &amp;temp;
%}

// Build a list of tuples containing the two entries from the struct.
// Append the new Python list object to the existing "int" result.
%typemap(argout) struct entry **OUTPUT {
  int i = 0;
  PyObject* out = PyList_New(0);
  while((*$1)[i].addr_str != NULL)
  {
    //PyObject* t = PyTuple_New(2);
    //PyTuple_SET_ITEM(t,0,PyBytes_FromString((*$1)[i].addr_str));
    //PyTuple_SET_ITEM(t,1,PyBytes_FromStringAndSize((*$1)[i].cc,2));
    //PyList_Append(out,t);
    //Py_DECREF(t);
    PyObject* s = SWIG_NewPointerObj(*$1+i,$descriptor(struct entry*),0);
    PyList_Append(out,s);
    Py_DECREF(s);
    ++i;
  }
  $result = SWIG_AppendOutput($result,out);
}

// Since a Python object was created and the data copied for each entry struct,
// free the memory returned in the structure.
//%typemap(freearg) struct entry **OUTPUT {
//  int i=0;
//  while((*$1)[i].addr_str != NULL) {
//    free((*$1)[i].addr_str);
//    ++i;
//  }
//  free(*$1);
//}

// Apply the OUTPUT typemap set to the "results" parameter.
%apply struct entry **OUTPUT {struct entry** results};

// Finally, define the function for SWIG
int get_list(const char* string, struct entry** results);
</snippet></ROW><ROW><id>17266310</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; example.get_list('abcd')
[0, [(b'hello', b'ab'), (b'there', b'cd')]]
</snippet></ROW><ROW><id>17266310</id><snippet>entry*</snippet></ROW><ROW><id>17266310</id><snippet>entry*</snippet></ROW><ROW><id>17266310</id><snippet>%extend</snippet></ROW><ROW><id>17266426</id><snippet>os._exit</snippet></ROW><ROW><id>17266507</id><snippet>os.system</snippet></ROW><ROW><id>17266507</id><snippet>os.environ</snippet></ROW><ROW><id>17266507</id><snippet>settings.configure</snippet></ROW><ROW><id>17266624</id><snippet>setTimeout(function() {window.history.replaceState &amp;&amp; window.history.replaceState({}, "", "blank.html#_=_");},500);
</snippet></ROW><ROW><id>17266762</id><snippet>#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from BeautifulSoup import BeautifulSoup as beatsop
from BeautifulSoup import SoupStrainer as sopstrain
import urllib2

def html_parser(html_data):
    html_proc = beatsop(html_data)
    onlyforms = sopstrain("form")
    forms1 = html_proc.findAll(onlyforms)
    for found_form in forms1:
        txtinput = found_form.findAll('input', {'type': 'text'})
        #We take the forms that aren't text
        listform = ["radio", "checkbox", "password", "file", "image", "hidden"]
        otrimput = found_form.findAll('input', {'type': listform})
        # we seach for names in text forms
        for e_name in txtinput:
            names = e_name['name']
        #we seach for value in otrimput
        for e_value in otrimput:
            value1 = e_value.get('value')
            if value1:
                pass
            else:
                print('{} there is no value.'.format(e_value))

html_data = urllib2.urlopen("http://www.google.com")
html_parser(html_data)
</snippet></ROW><ROW><id>17266857</id><snippet>./configure --prefix=/home/username/bin
</snippet></ROW><ROW><id>17266958</id><snippet>even = []
odd = []
for i in my_list:
    (odd if i % 2 else even).append(i)
</snippet></ROW><ROW><id>17267040</id><snippet>Tag</snippet></ROW><ROW><id>17267040</id><snippet>__getitem__</snippet></ROW><ROW><id>17267040</id><snippet>&gt;&gt;&gt; autor = soup.find("a", {"class": "__cf_email__"})
&gt;&gt;&gt; print autor["data-cfemail"]
'c2a3aca6b0a7a3eca1ada382a5afa3abaeeca1adaf'
</snippet></ROW><ROW><id>17267295</id><snippet>print maxvalpos([4, 2, 5, 10])
</snippet></ROW><ROW><id>17267295</id><snippet>def maxvalpos(*variables):
</snippet></ROW><ROW><id>17267402</id><snippet>pack</snippet></ROW><ROW><id>17267402</id><snippet>grid</snippet></ROW><ROW><id>17267416</id><snippet>FancyURLopener</snippet></ROW><ROW><id>17267416</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; type(urllib.FancyURLopener)
&lt;type 'classobj'&gt;
</snippet></ROW><ROW><id>17267416</id><snippet>&lt;type 'classobj'&gt;</snippet></ROW><ROW><id>17267416</id><snippet>&lt;type 'type'&gt;</snippet></ROW><ROW><id>17267416</id><snippet>int</snippet></ROW><ROW><id>17267416</id><snippet>self</snippet></ROW><ROW><id>17267416</id><snippet>&gt;&gt;&gt; x = urllib.FancyURLopener()
</snippet></ROW><ROW><id>17267416</id><snippet>x.open(...)</snippet></ROW><ROW><id>17267416</id><snippet>urllib.FancyURLopener.open(x, ...)</snippet></ROW><ROW><id>17267416</id><snippet>urllib.FancyURLopener</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>self</snippet></ROW><ROW><id>17267416</id><snippet>self.whatever</snippet></ROW><ROW><id>17267416</id><snippet>x</snippet></ROW><ROW><id>17267416</id><snippet>_spam</snippet></ROW><ROW><id>17267416</id><snippet>__eggs</snippet></ROW><ROW><id>17267437</id><snippet>sort()</snippet></ROW><ROW><id>17267437</id><snippet>.sort()</snippet></ROW><ROW><id>17267536</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>17267536</id><snippet>def build_package(package, config):
    command = '; '.join(config[package]['build'])
    subprocess.check_call(command, shell=True)
</snippet></ROW><ROW><id>17267536</id><snippet>wait()</snippet></ROW><ROW><id>17267536</id><snippet>def build_package(package, config):
    command = '; '.join(config[package]['build'])
    build = subprocess.Popen(command, shell=True)
    # do something with the build object
    build.wait()
    # command is done
</snippet></ROW><ROW><id>17267558</id><snippet>range(14)</snippet></ROW><ROW><id>17267558</id><snippet>d = []
#no need of two loops here, if the number is present in c then append 1 else 0
for i in range(m, -1, -1): #goes from 14 to 0, -1 is not inclusive
    if i in c:
        d.append(1)
    else:
        d.append(0)

#one-liner : d = [1 if x in c else 0  for x in xrange(14, -1, -1)]
print d,len(d)
#prints [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1] 15
</snippet></ROW><ROW><id>17267558</id><snippet>import re
a = "x**14 + x**1 + x**0"
c = [int(m.group(0)) for m in re.finditer(r'\d+', a)] #re.finditer returns an iterator
m = max(c)
d = [1 if x in c else 0  for x in xrange(m, -1, -1)]
print d,len(d)
</snippet></ROW><ROW><id>17267639</id><snippet>input</snippet></ROW><ROW><id>17267639</id><snippet>select</snippet></ROW><ROW><id>17267639</id><snippet>input</snippet></ROW><ROW><id>17267837</id><snippet>the_class = Draw()

while looping:
    the_class.update()
</snippet></ROW><ROW><id>17267945</id><snippet>NgramTagger</snippet></ROW><ROW><id>17267945</id><snippet>backoff</snippet></ROW><ROW><id>17267945</id><snippet>int</snippet></ROW><ROW><id>17267945</id><snippet>AttributeError: 'int' object has no attribute '_taggers'</snippet></ROW><ROW><id>17267945</id><snippet>SequentialBackoffTagger</snippet></ROW><ROW><id>17267945</id><snippet>range(3)</snippet></ROW><ROW><id>17267945</id><snippet>from nltk.corpus import brown
from nltk import NgramTagger

trains = brown.tagged_sents(categories="news")
tagger = None         # None here is okay since it's the default argument anyway
for n in range(1,4):  # start at unigrams (1) up to and including trigrams (3)
    tagger = NgramTagger(n, trains, backoff=tagger)
</snippet></ROW><ROW><id>17267945</id><snippet>&gt;&gt;&gt; tagger.tag('hi how are you'.split())
[('hi', None), ('how', 'WRB'), ('are', 'BER'), ('you', 'PPSS')]
</snippet></ROW><ROW><id>17267945</id><snippet>None</snippet></ROW><ROW><id>17267945</id><snippet>tagger</snippet></ROW><ROW><id>17267945</id><snippet>from nltk import DefaultTagger
tagger = DefaultTagger('NN')
</snippet></ROW><ROW><id>17268048</id><snippet>class Proxy(object):
    # all the stuff before
</snippet></ROW><ROW><id>17268048</id><snippet>object</snippet></ROW><ROW><id>17268107</id><snippet>&gt;&gt;&gt; text= "I say what I mean. I mean what I say. i do."
&gt;&gt;&gt; sentences = text.lower().split('.')
&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; for i, sen in enumerate(sentences):
...     for word in sen.split():
...         if word not in dic:         # you just need these
...             dic[word] = set()       # two extra lines
...         dic[word].add(i)
... 
&gt;&gt;&gt; dic
{'i': set([0, 1, 2]), 'do': set([2]), 'say': set([0, 1]), 'what': set([0, 1]), 'mean': set([0, 1])}
</snippet></ROW><ROW><id>17268107</id><snippet>&gt;&gt;&gt; text= "I say what I mean. I mean what I say. i do."
&gt;&gt;&gt; sentences = text.lower().split('.')
&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; for i, sen in enumerate(sentences):
...     for word in sen.split():
...         if word not in dic:
...             dic[word] = [i]
...         elif dic[word][-1] != i:     # this prevents duplicate entries
...             dic[word].append(i)
... 
&gt;&gt;&gt; dic
{'i': [0, 1, 2], 'do': [2], 'say': [0, 1], 'what': [0, 1], 'mean': [0, 1]}
</snippet></ROW><ROW><id>17268107</id><snippet>&gt;&gt;&gt; text= "I say what I mean. I mean what I say. i do."
&gt;&gt;&gt; sentences = text.lower().split('.')
&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; i = -1
&gt;&gt;&gt; for sen in sentences:
...     i += 1
...     for word in sen.split():
...         if word not in dic:
...             dic[word] = [i]
...         elif dic[word][-1] != i:     # this prevents duplicate entries
...             dic[word].append(i)
... 
&gt;&gt;&gt; dic
{'i': [0, 1, 2], 'do': [2], 'say': [0, 1], 'what': [0, 1], 'mean': [0, 1]}
</snippet></ROW><ROW><id>17268190</id><snippet>.extract()</snippet></ROW><ROW><id>17268190</id><snippet>sites</snippet></ROW><ROW><id>17268190</id><snippet>extract()</snippet></ROW><ROW><id>17268190</id><snippet>sites = hxs.select('//ul[@id="product_list"]/li').extract()
</snippet></ROW><ROW><id>17268190</id><snippet>sites = hxs.select('//ul[@id="product_list"]/li')
</snippet></ROW><ROW><id>17268528</id><snippet>def fun(lst):
    for item in lst:
        cmp = 0
        for other in lst:
            if item &lt; other: 
                cmp -= 1
            elif item &gt; other:
                cmp += 1
        if not cmp:
            return item

nums = [1,3,2,2]
print("fun({0}) = {1}".format(nums,fun(nums)))
</snippet></ROW><ROW><id>17268528</id><snippet>  if item &lt; other:
    cmp -= 1
  elif item &gt; other:
    cmp += 1
</snippet></ROW><ROW><id>17268680</id><snippet>datetime.datetime.strftime()</snippet></ROW><ROW><id>17268680</id><snippet>.split()</snippet></ROW><ROW><id>17268680</id><snippet>date_string = "Mon Jun 24 01:30:08 EDT 2013"
fields = date_string.split()
print ' '.join(fields[1:5]) # Prints "June 24 01:30:08 EDT"
</snippet></ROW><ROW><id>17268951</id><snippet>area</snippet></ROW><ROW><id>17268951</id><snippet>&lt;type 'unicode'&gt;</snippet></ROW><ROW><id>17268951</id><snippet>area = form.data['area']
#area should be &lt;type 'unicode'&gt;
area_float = float(area)
</snippet></ROW><ROW><id>17268951</id><snippet>a = u'1.34'
a_float = float(a)
type(a_float)
&gt;&gt; &lt;type 'float'&gt;
</snippet></ROW><ROW><id>17268951</id><snippet>DecimalField</snippet></ROW><ROW><id>17268951</id><snippet>decimal</snippet></ROW><ROW><id>17268951</id><snippet>float</snippet></ROW><ROW><id>17268951</id><snippet>FloatField</snippet></ROW><ROW><id>17269158</id><snippet>writerows</snippet></ROW><ROW><id>17269158</id><snippet>writerow</snippet></ROW><ROW><id>17269158</id><snippet>n</snippet></ROW><ROW><id>17269158</id><snippet>a.writerow(n.keys())
a.writerow(n.values())
</snippet></ROW><ROW><id>17269158</id><snippet>a.writerow(n)</snippet></ROW><ROW><id>17269158</id><snippet>names = ['list','of','all','expected','keys']
data = {'list':'A', 'of':'zoo', 'keys':'foo'}
default = dict.fromkeys(names,"Not Available")
default.update(data)
data = default
</snippet></ROW><ROW><id>17269158</id><snippet>{'all': 'Not Available', 'of': 'zoo', 'list': 'A', 'expected': 'Not Available', 'keys': 'foo'}
</snippet></ROW><ROW><id>17269158</id><snippet>a.writerow(n)
a.writerow(DICT.get(name,"Not Available") for name in n)
</snippet></ROW><ROW><id>17269158</id><snippet>with open('test_write.csv', 'w') as fp:
    a = csv.writer(fp)
    a.writerow(n)
    a.writerow(DICT.get(name,"Not Available") for name in n)
</snippet></ROW><ROW><id>17269158</id><snippet>with open('test_write.csv', 'w') as fp:
    a = csv.writer(fp)
    # write row of header names
    a.writerow(n)

    # build up a list of the values in DICT corresponding to the keys in n
    values = []
    for name in n:
        if name in DICT:
            values.append(DICT[name])
        else:
            values.append("Not Available")
    # or written as a list comprehension:
    # values = [DICT[name] if name in DICT else "Not Available" for name in n]
    # 
    # or just use DICT.get, which does the name checking for us, and chooses the 
    # default value if the key is not found
    # values = [DICT.get(name, "Not Available") for name in n]

    # now write them out
    a.writerow(values)

    # or finally, the list build and writerow call all in one line
    # a.writerow(DICT.get(name,"Not Available") for name in n)
</snippet></ROW><ROW><id>17269158</id><snippet>    # to write out the transpose of the previous lines (that is, instead of 
    # a line of names and a line of the matching values, a line for each
    # name-value pair), use Python's zip builtin:
    for nameValueTuple in zip(n,values):
        a.writerow(nameValueTuple)
</snippet></ROW><ROW><id>17269349</id><snippet>super(C, self).__init__()  &lt;-- call to object.__init__()
</snippet></ROW><ROW><id>17269349</id><snippet>object.__init__</snippet></ROW><ROW><id>17269349</id><snippet>self</snippet></ROW><ROW><id>17269349</id><snippet>super</snippet></ROW><ROW><id>17269349</id><snippet>super(C, self).__init__</snippet></ROW><ROW><id>17269349</id><snippet>__init__</snippet></ROW><ROW><id>17269349</id><snippet>super</snippet></ROW><ROW><id>17269349</id><snippet>super</snippet></ROW><ROW><id>17269349</id><snippet>super(C, self).__init__</snippet></ROW><ROW><id>17269349</id><snippet>A.__init__</snippet></ROW><ROW><id>17269349</id><snippet>super(A, self).__init__</snippet></ROW><ROW><id>17269349</id><snippet>B.__init__</snippet></ROW><ROW><id>17269349</id><snippet>B.__init__</snippet></ROW><ROW><id>17269683</id><snippet>rstrip()</snippet></ROW><ROW><id>17269683</id><snippet>&gt;&gt;&gt; for i in content:
...     print i.rstrip()
... 
abc
def
ghi
</snippet></ROW><ROW><id>17269683</id><snippet>content</snippet></ROW><ROW><id>17269683</id><snippet>['abc\n', etc]</snippet></ROW><ROW><id>17269683</id><snippet>print('\n')</snippet></ROW><ROW><id>17269683</id><snippet>rstrip()</snippet></ROW><ROW><id>17269683</id><snippet>&gt;&gt;&gt; for i in L:
...     print i
... 
abc

def

ghi
</snippet></ROW><ROW><id>17269716</id><snippet>sts.lstrip</snippet></ROW><ROW><id>17269716</id><snippet>str.rstrip</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; strs = '[&lt;User: mr--adhikari&gt;]'
&gt;&gt;&gt; strs = strs.lstrip('[&lt;User: ')
&gt;&gt;&gt; strs
'mr--adhikari&gt;]'
&gt;&gt;&gt; strs = strs.rstrip('&gt;]')
&gt;&gt;&gt; strs
'mr--adhikari'
</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; hello = [['&lt;User: mr--adhikari&gt;'], ['&lt;User: mr--adhikari&gt;'], ['&lt;User: mr--adhikari&gt;', '&lt;User: awesome&gt;']]
&gt;&gt;&gt; [ [y.lstrip('&lt;User: ').rstrip('&gt;') for y in x] for x in hello ]
[['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari', 'awesome']]
</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; shared_username = ['[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;, &lt;User: awesome&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]']

&gt;&gt;&gt; [[y.lstrip('[&lt;User: ').rstrip('&gt;]') for y in x.split(', ')] for x in shared_username]
[['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari', 'awesome'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari']]
</snippet></ROW><ROW><id>17269716</id><snippet>strs = '[&lt;User: mr--adhikari&gt;, &lt;User: awesome&gt;]'
</snippet></ROW><ROW><id>17269716</id><snippet>', '</snippet></ROW><ROW><id>17269716</id><snippet>str.lstrip</snippet></ROW><ROW><id>17269716</id><snippet>str.rstrip</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; strs.split(', ')
['[&lt;User: mr--adhikari&gt;', '&lt;User: awesome&gt;]']
</snippet></ROW><ROW><id>17269716</id><snippet>regex</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'User:\s([A-Za-z\-._/@]+)')
&gt;&gt;&gt; strs = '[&lt;User: sachitad&gt;, &lt;User: awesome&gt;]'
&gt;&gt;&gt; r.findall(strs)
['sachitad', 'awesome']
&gt;&gt;&gt; strs1 = '[&lt;User: mr--adhikari&gt;, &lt;User: awesome&gt;]'
&gt;&gt;&gt; r.findall(strs1)
['mr--adhikari', 'awesome']
&gt;&gt;&gt; strs2 = '[&lt;User: respect&gt;]'
&gt;&gt;&gt; r.findall(strs2)
['respect']
&gt;&gt;&gt; strs = '[&lt;User: sa@chi.tad&gt;, &lt;User: awe_so/me&gt;]'
&gt;&gt;&gt; r.findall(strs)
['sa@chi.tad', 'awe_so/me']
</snippet></ROW><ROW><id>17269716</id><snippet>&gt;&gt;&gt; shared_username = ['[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;, &lt;User: awesome&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]', '[&lt;User: mr--adhikari&gt;]']
&gt;&gt;&gt; [r.findall(item) for item in shared_username]
[['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari', 'awesome'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari']]
</snippet></ROW><ROW><id>17269779</id><snippet>friend_likes = graph.get('me?fields=friends.fields(likes)')
friend_likes['friends']
</snippet></ROW><ROW><id>17269841</id><snippet>code.cExtensionClass</snippet></ROW><ROW><id>17269841</id><snippet>x.y.cExtensionClass</snippet></ROW><ROW><id>17269841</id><snippet>import code</snippet></ROW><ROW><id>17269841</id><snippet>from code cExtensionClass</snippet></ROW><ROW><id>17269841</id><snippet>import unittest

from mock import patch, Mock

import code

class test(unittest.TestCase):
    def test_code_function(self):
        with patch('code.cExtensionClass') as m:
            m.return_value.cExtensionFunc = func = Mock()
            code.CodeClass.code_function()
            func.assert_called_with()

    #@patch('code.cExtensionClass')
    #def test_code_function(self, m):
    #    m.return_value.cExtensionFunc = func = Mock()
    #    code.CodeClass.code_function()
    #    func.assert_called_with()
</snippet></ROW><ROW><id>17270055</id><snippet>for k,v in d.iteritems():
    col1, col2 = zip(*[map(float,x.split()) for x in v])
    print k, sum(col1)/len(v), sum(col2)/len(v)
...     
0.500 17.95 0.425
1.000 15.3 0.425
0.000 23.2 0.525
</snippet></ROW><ROW><id>17270055</id><snippet>&gt;&gt;&gt; v = ['18.4 0.5', '17.9 0.4', '16.9 0.4', '18.6 0.4']
</snippet></ROW><ROW><id>17270055</id><snippet>float</snippet></ROW><ROW><id>17270055</id><snippet>&gt;&gt;&gt; zipp = [map(float,x.split()) for x in v]
&gt;&gt;&gt; zipp
[[18.4, 0.5], [17.9, 0.4], [16.9, 0.4], [18.6, 0.4]]    #list of rows
</snippet></ROW><ROW><id>17270055</id><snippet>zip</snippet></ROW><ROW><id>17270055</id><snippet>*</snippet></ROW><ROW><id>17270055</id><snippet>&gt;&gt;&gt; zip(*zipp)
[(18.4, 17.9, 16.9, 18.6), (0.5, 0.4, 0.4, 0.4)]
</snippet></ROW><ROW><id>17270294</id><snippet>rsync</snippet></ROW><ROW><id>17270294</id><snippet>web-app-celery-tasks</snippet></ROW><ROW><id>17270294</id><snippet>web-app</snippet></ROW><ROW><id>17270333</id><snippet>&gt;&gt;&gt; out = file("out.jpg", "wb")
&gt;&gt;&gt; out.write(file("someimage.jpg", "rb").read())
&gt;&gt;&gt; out.write(file("somehiddenfile.pdf", "rb").read())
&gt;&gt;&gt; out.close()
</snippet></ROW><ROW><id>17270333</id><snippet>copy</snippet></ROW><ROW><id>17270339</id><snippet>add()</snippet></ROW><ROW><id>17270339</id><snippet>test</snippet></ROW><ROW><id>17270339</id><snippet>a</snippet></ROW><ROW><id>17270339</id><snippet>.</snippet></ROW><ROW><id>17270339</id><snippet>add().a</snippet></ROW><ROW><id>17270339</id><snippet>a</snippet></ROW><ROW><id>17270339</id><snippet>add</snippet></ROW><ROW><id>17270339</id><snippet>add.a</snippet></ROW><ROW><id>17270611</id><snippet>board = [
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1]
]

def clamp(minV,maxV,x):
    if x &lt; minV:
        return minV 
    elif x &gt; maxV:
        return maxV
    else:
        return x

def getNeighbour(grid,startx,starty,radius):
    width = len(grid[starty])
    height = len(grid)
    neighbourhood = []
    for y in range(clamp(0,height,starty-radius),clamp(0,height,starty+radius)+1):
        row = []
        for x in range(clamp(0,width,startx-radius),clamp(0,width,startx+radius)+1):
            if x != startx or (x==startx and  y != starty):
                row.append(grid[y][x])
        neighbourhood.append(row)
    return neighbourhood
</snippet></ROW><ROW><id>17270611</id><snippet>&gt;&gt;&gt; pprint(getNeighbour(board, 0, 0, 1))
[0]
[1, 0] (expected)
&gt;&gt;&gt; pprint(getNeighbour(board, 2, 2, 1))
[0, 1, 0]
[0, 0]
[0, 1, 0] (expected)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17270611</id><snippet>board = [[1,0]*2000]*1000
</snippet></ROW><ROW><id>17270929</id><snippet>curl</snippet></ROW><ROW><id>17271145</id><snippet>import StringIO
import re
import select
import socket
import sys
import threading

class IPC(threading.Thread):

    def __init__(self, line_filter = None):
        threading.Thread.__init__(self)
        self.daemon = True
        self.lock = threading.Lock()
        self.event = threading.Event()
        self.event.clear()
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.recv_buffer_size = 8192
        self.buffer = StringIO.StringIO()
        if(line_filter == None):
            self.line_filter = lambda x: x
        else:
            self.line_filter = line_filter


    def run(self):
        self.sock.connect(("localhost", 32000))
        data = True
        while data:
            try:
                data = self.sock.recv(self.recv_buffer_size)
            except socket.error, e:
                print e
                self.sock.close()
                break

            self.lock.acquire()
            self.buffer.write(data)
            self.lock.release()
            self.event.set()

    def readlines(self):
        self.lock.acquire()

        self.buffer.seek(0)
        raw_lines = self.buffer.readlines()
        self.buffer.truncate(0)

        self.lock.release()

        lines = map(self.line_filter, raw_lines)
        return lines

proc_control = IPC()
while True:
    proc_control.event.wait()
    data = proc_control.readlines()
    if(data):
        # Do Stuff

    proc_control.event.clear()
</snippet></ROW><ROW><id>17271145</id><snippet>package project;

import java.net.Socket;
import java.net.ServerSocket;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class SocketIPC {

    public PrintWriter out;
    public BufferedReader in;
    Socket socket = null;
    ServerSocket serverSocket = null;
    ConnectionListener connlisten = null;
    DataListener datalisten = null;
    Thread connlisten_thread = null;
    Thread datalisten_thread = null;
    CommandObject ipc_event_cmd = null;

    // Server thread accepts incoming client connections
    class ConnectionListener extends Thread {

        private int port;

        ConnectionListener(int port) {
            this.port = port;
        }

        @Override
        public void run() {
            try {
                serverSocket = new ServerSocket(port);
                socket = serverSocket.accept();
                out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                datalisten = new DataListener();
                datalisten_thread = new Thread(datalisten);
                datalisten_thread.start();
            } catch (Exception e) {
                System.err.println("SocketIPC creation error: " + e.getMessage());
            }
        }
    }

    // Server thread accepts incoming client connections
    class DataListener extends Thread {

        String data_str = null;

        DataListener() {
        }

        @Override
        public void run() {
            try {
                while(true) {
                    data_str = recv();
                    ipc_event_cmd.buffer.add(data_str);
                    ipc_event_cmd.execute();
                }
            } catch (Exception e) {
                System.err.println("SocketIPC reading error: " + e.getMessage());
            }
        }
        public String read() {
            String ret_string = null;
            if(!ipc_event_cmd.buffer.isEmpty()) {
                ret_string = ipc_event_cmd.buffer.remove(0);
            }
            return ret_string;
        }
    }

    public SocketIPC(int port) {
        ipc_event_cmd = new CommandObject();
        connlisten = new ConnectionListener(port);
        connlisten_thread = new Thread(connlisten);
        connlisten_thread.start();
    }

    public void send(String msg) {
        if (out != null) {
            out.println(msg);
        }
    }

    public void flush() {
        if (out != null) {
            out.flush();
        }
    }

    public void close() {
        if (out != null) {
            out.flush();
            out.close();
            try {
                in.close();
                socket.close();
                serverSocket.close();
            } catch (Exception e) {
                System.err.println("SocketIPC closing error: " + e.getMessage());
            }
        }
    }

    public String recv() throws Exception {
        if (in != null) {
            return in.readLine();
        } else {
            return "";
        }
    }

    public void set_cmd(CommandObject event_cmd) {
        if (event_cmd != null) {
            this.ipc_event_cmd = event_cmd;
        }
    }
}
</snippet></ROW><ROW><id>17271145</id><snippet>package project;

import java.util.List;
import java.util.ArrayList;

public class CommandObject {

    List&lt;String&gt; buffer;

    public CommandObject() {
        this.buffer = new ArrayList&lt;String&gt;();
    }

    public void execute() {
    }

}
</snippet></ROW><ROW><id>17271145</id><snippet>package project;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Random;

public class DoStuff extends CommandObject {

    public DoStuff () {
    }

    @Override
    public void execute() {
        String tmp_string = null;
        while (!buffer.isEmpty()) {
            tmp_string = buffer.remove(0);
            // Do Stuff
        }
    }
}
</snippet></ROW><ROW><id>17271359</id><snippet>selenium</snippet></ROW><ROW><id>17271359</id><snippet>makes testing easier</snippet></ROW><ROW><id>17271359</id><snippet>django_nose</snippet></ROW><ROW><id>17271359</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17271359</id><snippet>TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'</snippet></ROW><ROW><id>17271359</id><snippet>python manage.py test &lt;project_name&gt;</snippet></ROW><ROW><id>17271359</id><snippet>request.method</snippet></ROW><ROW><id>17271359</id><snippet>/reports/messages</snippet></ROW><ROW><id>17271359</id><snippet>/reports/messages</snippet></ROW><ROW><id>17271359</id><snippet>Batch</snippet></ROW><ROW><id>17271359</id><snippet>ProcessRequests</snippet></ROW><ROW><id>17271359</id><snippet>Batch</snippet></ROW><ROW><id>17271359</id><snippet>ProcessRequests</snippet></ROW><ROW><id>17271359</id><snippet>test_views.py</snippet></ROW><ROW><id>17271359</id><snippet>from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.test.client import Client
from django.test import TestCase


class ProcessAllTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')

    def test_login_required(self):
        response = self.client.get(reverse('process_all'))
        self.assertRedirects(response, '/login')

    def test_get_method(self):
        self.client.login(username='john', password='johnpassword')
        response = self.client.get(reverse('process_all'))
        self.assertRedirects(response, '/reports/messages')

        # assert no messages were sent

    def test_post_method(self):
        self.client.login(username='john', password='johnpassword')

        # add pending messages, mock sms sending?

        response = self.client.post(reverse('process_all'))
        self.assertRedirects(response, '/reports/messages')

        # assert that sms messages were sent
</snippet></ROW><ROW><id>17271483</id><snippet>shelve</snippet></ROW><ROW><id>17271668</id><snippet>globals()</snippet></ROW><ROW><id>17271668</id><snippet>&gt;&gt;&gt; for i in range(1,10):
...         globals()['r'+str(i)] = "foo"
...     
&gt;&gt;&gt; r1
'foo'
&gt;&gt;&gt; r2
'foo'
</snippet></ROW><ROW><id>17271668</id><snippet>globals()</snippet></ROW><ROW><id>17271668</id><snippet>&gt;&gt;&gt; my_vars = dict()
&gt;&gt;&gt; for i in range(1,10):
        my_vars['r'+str(i)] = "foo"
&gt;&gt;&gt; my_vars['r1']
'foo'
&gt;&gt;&gt; my_vars['r2']
'foo'
</snippet></ROW><ROW><id>17271675</id><snippet>my_args = sys.argv
# do something to my_args
# ...
parser.parse_args(my_args)
</snippet></ROW><ROW><id>17271694</id><snippet>row</snippet></ROW><ROW><id>17271694</id><snippet>col</snippet></ROW><ROW><id>17271694</id><snippet>header = Label(...).grid(...)</snippet></ROW><ROW><id>17271694</id><snippet>header</snippet></ROW><ROW><id>17271694</id><snippet>header = Label(...)
header.grid(...)
</snippet></ROW><ROW><id>17271899</id><snippet>from random import shuffle
random.shuffle(your_lis)
your_lis = your_lis[:10000]
</snippet></ROW><ROW><id>17271899</id><snippet>from random import randrange
diff = len(your_lis) - 10000
for _ in xrange(diff):
    ind = randrange(len(your_lis))
    your_lis.pop(ind)  #a quick timing check suggests that `pop` is faster than `del`
</snippet></ROW><ROW><id>17272254</id><snippet>sorted_array = sorted([2,3,1])</snippet></ROW><ROW><id>17272318</id><snippet>const</snippet></ROW><ROW><id>17272318</id><snippet>default</snippet></ROW><ROW><id>17272318</id><snippet>type=int</snippet></ROW><ROW><id>17272318</id><snippet>max_entries_shown = 10
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-s",
    nargs = '?',
    const = max_entries_shown,
    type=int)
args = parser.parse_args()
</snippet></ROW><ROW><id>17272318</id><snippet>$ python parse.py
Namespace(s=None)
$ python parse.py -s
Namespace(s=10)
$ python parse.py -s 12
Namespace(s=12)
</snippet></ROW><ROW><id>17272501</id><snippet>gevent</snippet></ROW><ROW><id>17272501</id><snippet>&gt;&gt;&gt; import gevent
&gt;&gt;&gt; from gevent import socket
&gt;&gt;&gt; urls = ['www.google.com', 'www.example.com', 'www.python.org']
&gt;&gt;&gt; jobs = [gevent.spawn(socket.gethostbyname, url) for url in urls]
&gt;&gt;&gt; gevent.joinall(jobs, timeout=2)
&gt;&gt;&gt; [job.value for job in jobs]
['74.125.79.106', '208.77.188.166', '82.94.164.162']
</snippet></ROW><ROW><id>17272553</id><snippet>unicode</snippet></ROW><ROW><id>17272553</id><snippet>unicode</snippet></ROW><ROW><id>17272553</id><snippet>str</snippet></ROW><ROW><id>17272553</id><snippet>str</snippet></ROW><ROW><id>17272553</id><snippet>[i.replace(u"\u2022", u" ") for i in dList]
</snippet></ROW><ROW><id>17272588</id><snippet>try:
    import zumba
except ImportError:
    import pip
    pip.main(['install', '--user', 'zumba'])
    import zumba
</snippet></ROW><ROW><id>17272635</id><snippet>classmethod</snippet></ROW><ROW><id>17272635</id><snippet>class A(object):
  @classmethod
  def cfun(cls):
    print 'I am in %r' % (cls,)

class AA(A):
  pass
</snippet></ROW><ROW><id>17272794</id><snippet>a2b_hex()</snippet></ROW><ROW><id>17272794</id><snippet>import xively

from os import environ    
from hashlib import sha1
from binascii import a2b_hex
import hmac

secret = environ['XIVELY_PRODUCT_SECRET']
serial = environ['XIVELY_DEVICE_SERIAL_NUMBER']

activation = hmac.new(a2b_hex(secret), serial, sha1).hexdigest()

creds = xively.Client(key=None).get('/v2/devices/'+activation+'/activate').json()

xi_feed = xively.XivelyAPIClient(creds['apikey']).feeds.get(creds['feed_id'])
</snippet></ROW><ROW><id>17272794</id><snippet>#!/usr/bin/python

from os import environ 
from hashlib import sha1 
from binascii import a2b_hex 
import hmac
import sys, subprocess
import ConfigParser
import xively

CONFIG_FILE = 'xively.conf'

PROVISIONING = 'PROVISIONING'

PROVISIONING_PRODUCT_SECRET = 'PRODUCT_SECRET'
PROVISIONING_DEVICE_SERIAL = 'DEVICE_SERIAL'

PROVISIONING_FEED_ID = 'FEED_ID'
PROVISIONING_API_KEY = 'API_KEY'

def get_setting(config, section, key):
    try:
    value = config.get(section, key)
    except:
    print key + " not found in config file. Using environment variable " + key + " instead."

    try:
        value = environ[key]
    except:
        print key + " not found in environment."
        raise
    # value defined?
    if not value:
    raise
    return value

def xively_activate_product(secret, serial):
    activation = hmac.new(a2b_hex(secret), serial, sha1).hexdigest()
    creds = xively.Client(key=None).get('/v2/devices/'+activation+'/activate').json()
    return creds 

# main
config = ConfigParser.RawConfigParser()
config.read(CONFIG_FILE)

try:
    # see if we already have an api key and feed id
    feed_id = config.get(PROVISIONING, PROVISIONING_FEED_ID)
    api_key = config.get(PROVISIONING, PROVISIONING_API_KEY)

    print "Provisioned product details:"
    print "FEED_ID: " + str(feed_id)
    print "API_KEY: " + api_key

    # continue working with your activated product here

except:
    print "FEED_ID and API_KEY not found. Activating product now."

    # no error handling for secret- it _is_ needed
    try:
    secret = get_setting(config, PROVISIONING, PROVISIONING_PRODUCT_SECRET)
    except:        
    print "Finding " + PROVISIONING_PRODUCT_SECRET + " failed. Giving up."
    sys.exit(1)

    try:
    serial = get_setting(config, PROVISIONING, PROVISIONING_DEVICE_SERIAL)
    except:        
    serial = subprocess.check_output("hostname", shell=True)
    if not serial:
        print "Fallback to hostname for " + PROVISIONING_DEVICE_SERIAL + " failed. Giving up."
        sys.exit(1)

    try:    
    creds = xively_activate_product(secret, serial)

    # check if there were errors
    try:
        creds["errors"]
    except:
        pass
    else:
        print "Product activation failed (" + creds["title"] +": "+ creds["errors"] + ")."
        sys.exit(1)

    feed_id = creds['feed_id']
    api_key = creds['apikey']

    print "Product activation successful."
    print "FEED_ID: " + str(feed_id)
    print "API_KEY: " + api_key

    if not config.has_section(PROVISIONING):
        config.add_section(PROVISIONING)

    config.set(PROVISIONING, PROVISIONING_FEED_ID, feed_id)
    config.set(PROVISIONING, PROVISIONING_API_KEY, api_key)

    # Writing our configuration file to 'example.cfg'
    with open(CONFIG_FILE, 'wb') as configfile:
        config.write(configfile)

    except Exception as e:
    print "Product activation failed (" + str(e) +")."
    sys.exit(1)
</snippet></ROW><ROW><id>17272889</id><snippet>BlobReference</snippet></ROW><ROW><id>17272889</id><snippet>get_serving_url()</snippet></ROW><ROW><id>17272889</id><snippet>get_serving_url()</snippet></ROW><ROW><id>17272889</id><snippet>delete_serving_url()</snippet></ROW><ROW><id>17272927</id><snippet>use strict;
use warnings;
use Text::CSV;

my %data;
my $csv = Text::CSV-&gt;new({
            binary =&gt; 1,      # safety precaution
            eol    =&gt; $/,     # important when using $csv-&gt;print()
    });
while ( my $row = $csv-&gt;getline(*ARGV) ) {
    my ($id, $J) = @$row;   # first two fields
    $data{$id}{$J} = $row;  # store line
}
</snippet></ROW><ROW><id>17273124</id><snippet>len("original")</snippet></ROW><ROW><id>17273124</id><snippet>"original"</snippet></ROW><ROW><id>17273124</id><snippet>8</snippet></ROW><ROW><id>17273124</id><snippet>if</snippet></ROW><ROW><id>17273124</id><snippet>True</snippet></ROW><ROW><id>17273124</id><snippet>len(original)</snippet></ROW><ROW><id>17273124</id><snippet>len("original")</snippet></ROW><ROW><id>17273502</id><snippet>from pprint import pprint
import urllib2
from bs4 import BeautifulSoup as soup


url = "http://app2.nea.gov.sg/anti-pollution-radiation-protection/air-pollution/psi/psi-readings-over-the-last-24-hours"
web_soup = soup(urllib2.urlopen(url))

table = web_soup.find(name="div", attrs={'class': 'c1'}).find_all(name="div")[2].find_all('table')[0]

table_rows = []
for row in table.find_all('tr'):
    table_rows.append([td.text.strip() for td in row.find_all('td')])

data = {}
for tr_index, tr in enumerate(table_rows):
    if tr_index % 2 == 0:
        for td_index, td in enumerate(tr):
            data[td] = table_rows[tr_index + 1][td_index]

pprint(data)
</snippet></ROW><ROW><id>17273502</id><snippet>{'10AM': '49',
 '10PM': '-',
 '11AM': '52',
 '11PM': '-',
 '12AM': '76',
 '12PM': '54',
 '1AM': '70',
 '1PM': '59',
 '2AM': '64',
 '2PM': '65',
 '3AM': '59',
 '3PM': '72',
 '4AM': '54',
 '4PM': '79',
 '5AM': '51',
 '5PM': '82',
 '6AM': '48',
 '6PM': '79',
 '7AM': '47',
 '7PM': '-',
 '8AM': '47',
 '8PM': '-',
 '9AM': '47',
 '9PM': '-',
 'Time': '3-hr PSI'}
</snippet></ROW><ROW><id>17273638</id><snippet>import win32process
import win32process as process
import win32gui
import sys

PORTABLE_APPLICATION_LOCATION = "C:\\Windows\\system32\\notepad.exe"
processHandler = -1


def callback(hwnd, procid):
    if procid in  win32process.GetWindowThreadProcessId(hwnd):
        win32gui.SetForegroundWindow(hwnd)

def show_window_by_process(procid):
    win32gui.EnumWindows(callback, procid)


def runProgram():
    global processHandler
    #don't run a process more than once
    if (isLiveProcess(processHandler)):
        #Bring focus back to running window!
        show_window_by_process(processHandler)
        return;
    try:
        startObj = process.STARTUPINFO()
        myProcessTuple = process.CreateProcess(PORTABLE_APPLICATION_LOCATION,None,None,None,8,8,None,None,startObj)
        processHandler = myProcessTuple[2]
    except:
        print(sys.exc_info[0])

def isLiveProcess(processHandler): #Process handler is dwProcessId
    processList = process.EnumProcesses()
    for aProcess in processList:
        if (aProcess == processHandler):
            return True
    return False

 runProgram()
</snippet></ROW><ROW><id>17273641</id><snippet>&gt;&gt;&gt; mylist = ["apple", "samsung", "toshiba", "Don’t know", "Can’t recall"]
&gt;&gt;&gt; [item.replace('\xe2\x80\x99',"'") for item in mylist]
['apple', 'samsung', 'toshiba', "Don't know", "Can't recall"]
</snippet></ROW><ROW><id>17273641</id><snippet>&gt;&gt;&gt; mylist = [u"apple", u"samsung", u"toshiba", u"Don’t know", u"Can’t recall"]
&gt;&gt;&gt; [item.replace(u'’',u"'") for item in mylist]
[u'apple', u'samsung', u'toshiba', u"Don't know", u"Can't recall"]
</snippet></ROW><ROW><id>17273732</id><snippet>np.unique</snippet></ROW><ROW><id>17273732</id><snippet>unified_verts</snippet></ROW><ROW><id>17273732</id><snippet>unifed_verts</snippet></ROW><ROW><id>17273732</id><snippet>np.unique</snippet></ROW><ROW><id>17273732</id><snippet>def unify2(raw_data):
    dtype = np.dtype((np.void, (raw_data.shape[1] * raw_data.dtype.itemsize)))
    uniq, inv = np.unique(raw_data.view(dtype), return_inverse=True)
    uniq = uniq.view(raw_data.dtype).reshape(-1, raw_data.shape[1])
    return uniq, inv
</snippet></ROW><ROW><id>17273732</id><snippet>raw_data</snippet></ROW><ROW><id>17273732</id><snippet>unify</snippet></ROW><ROW><id>17273732</id><snippet>unify2</snippet></ROW><ROW><id>17273732</id><snippet>unified, ref = unify(raw_data)
uniq, inv = unify2(raw_data)
assert np.allclose(uniq[inv], unified[ref])  # raw_data
</snippet></ROW><ROW><id>17273732</id><snippet>unified, ref = unify(raw_data)</snippet></ROW><ROW><id>17273732</id><snippet>uniq, inv = unify2(raw_data)</snippet></ROW><ROW><id>17273750</id><snippet>result.get(3)</snippet></ROW><ROW><id>17273750</id><snippet>get</snippet></ROW><ROW><id>17273837</id><snippet>instance.user.username</snippet></ROW><ROW><id>17273837</id><snippet>instance.username</snippet></ROW><ROW><id>17273837</id><snippet>doc = Document2(random stuff but no docfile2)
doc.username = userName
doc.docfile2 = theFile
doc.save()
</snippet></ROW><ROW><id>17273926</id><snippet>from blqblq.lqlqlqlq.bla import (
                                 fobarbazbarbarbazar
                                 as foo)
from matplotlib.backends.backend_qt4agg import (
                                                 FigureCanvasQTAgg
                                                 as FigureCanvas)
</snippet></ROW><ROW><id>17273926</id><snippet># Just 1 indent
from blqblq.lqlqlqlq.bla import (
    fobarbazbarbarbazar
    as foo
) # end at the next line so it's always clear where what ends

from matplotlib.backends.backend_qt4agg import (
    FigureCanvasQTAgg as FigureCanvas
)
</snippet></ROW><ROW><id>17274027</id><snippet>throttling</snippet></ROW><ROW><id>17274252</id><snippet>result = re.sub("""(?sx)
    (              # Either match and capture in group 1:
     ^             # A match beginning at the start of the string
     (?:(?!foo).)* # with all characters in the string unless foo intervenes
     $             # until the end of the string.
    |              # OR
     (?=foo)       # The empty string right before "foo"
    )              # End of capturing group 1
    (?:foo)?       # Match foo if it's there, but don't capture it.""", 
                     r"\1bar", subject)
</snippet></ROW><ROW><id>17274542</id><snippet>{}</snippet></ROW><ROW><id>17274542</id><snippet>string.Format</snippet></ROW><ROW><id>17274542</id><snippet>string.Formatter</snippet></ROW><ROW><id>17274707</id><snippet>numpy</snippet></ROW><ROW><id>17274707</id><snippet>&gt;&gt;&gt; np.logical_and(True, np.nan), np.logical_and(False, np.nan)
(True, False)
&gt;&gt;&gt; np.logical_and(np.nan, True), np.logical_and(np.nan, False)
(True, False)
&gt;&gt;&gt;
&gt;&gt;&gt; np.logical_or(True, np.nan), np.logical_or(False, np.nan)
(True, True)
&gt;&gt;&gt; np.logical_or(np.nan, True), np.logical_or(np.nan, False)
(True, True)
</snippet></ROW><ROW><id>17274707</id><snippet>x and y</snippet></ROW><ROW><id>17274707</id><snippet>if x is false, then x, else y</snippet></ROW><ROW><id>17274707</id><snippet>False</snippet></ROW><ROW><id>17274707</id><snippet>&gt;&gt;&gt; (None and True) is None
True
&gt;&gt;&gt; [] and True
[]
&gt;&gt;&gt; [] and False
[]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17274874</id><snippet>def get(*args, **kwargs):
    if kwargs:
        return query.filter_by(**kwargs)
    else:
        return query.filter(*args)
</snippet></ROW><ROW><id>17274941</id><snippet>from Exscript.util.interact import read_login
from Exscript.protocols import SSH2


account = read_login()
conn = SSH2()                       
conn.connect('192.168.1.1')     
conn.login(account)  


while True:
    command = raw_input('cli: ')
    if command == 'q': break
    conn.execute(command)
    print conn.response



conn.send('quit\r')               
conn.close() 
</snippet></ROW><ROW><id>17274968</id><snippet>enumerate()</snippet></ROW><ROW><id>17274968</id><snippet>for count, line in enumerate(lines):
    #do something here
</snippet></ROW><ROW><id>17274968</id><snippet>enumerate()</snippet></ROW><ROW><id>17274968</id><snippet>start</snippet></ROW><ROW><id>17274968</id><snippet>count</snippet></ROW><ROW><id>17274968</id><snippet>start</snippet></ROW><ROW><id>17274968</id><snippet>enumerate</snippet></ROW><ROW><id>17274968</id><snippet>&gt;&gt;&gt; help(enumerate)

 |  enumerate(iterable[, start]) -&gt; iterator for index, value of iterable
 |  
 |  Return an enumerate object.  iterable must be another object that supports
 |  iteration.  The enumerate object yields pairs containing a count (from
 |  start, which defaults to zero) and a value yielded by the iterable argument.
 |  enumerate is useful for obtaining an indexed list:
 |      (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
</snippet></ROW><ROW><id>17275180</id><snippet>//td[3]/p/INPUT/@onClick
</snippet></ROW><ROW><id>17275180</id><snippet>//td[3]/p/input/@onclick
</snippet></ROW><ROW><id>17275180</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from scrapy.item import Item, Field


class DmozItem(Item):
    number = Field()
    question = Field()
    answer = Field()


class DmozSpider(BaseSpider):
    name = "dmoz"
    allowed_domains = ["2345.com"]
    start_urls = ["http://www.2345.com/jzw/1.htm"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        rows = hxs.select('//body/center/table[2]/tr')
        for row in rows:
            item = DmozItem()
            try:
                item['number'] = row.select(".//td[1]/p/font/text()").extract()[0]
                item['question'] = row.select(".//td[2]/font/text()").extract()[0]
                item['answer'] = row.select(".//td[3]/p/input/@onclick").extract()[0][13:-2]
            except:
                continue
            yield item
</snippet></ROW><ROW><id>17275180</id><snippet>scrapy runspider &lt;spider_name.py&gt; --output-format csv --output output.csv</snippet></ROW><ROW><id>17275180</id><snippet>output.csv</snippet></ROW><ROW><id>17275330</id><snippet>print str(selection) * countdifference
</snippet></ROW><ROW><id>17275330</id><snippet>for ii in xrange(countdifference):
    print selection
</snippet></ROW><ROW><id>17275558</id><snippet>def create_logo(absolute_path):
    image = Image(absolute_path)
    image._restrictSize(2 * inch, 1 * inch)
</snippet></ROW><ROW><id>17275611</id><snippet>def invert_int(n):
    number_bit_len = n.bit_length()
    max_val = (2 ** number_bit_len) - 1
    return ~n &amp; max_val
</snippet></ROW><ROW><id>17276194</id><snippet>Something</snippet></ROW><ROW><id>17276194</id><snippet>super</snippet></ROW><ROW><id>17276194</id><snippet>A</snippet></ROW><ROW><id>17276194</id><snippet>A.Something(self)</snippet></ROW><ROW><id>17276194</id><snippet>super</snippet></ROW><ROW><id>17276421</id><snippet>lxml.html</snippet></ROW><ROW><id>17276421</id><snippet>import lxml.html

rexml = ...

def depth(node):
    d = 0
    while node is not None:
        d += 1
        node = node.getparent()
    return d

tree = lxml.html.fromstring(rexml)
for node in tree.iter('page'):
    print depth(node)
    for url in node.iterfind('url'):
        print url.text
    for title in node.iterfind('title'):
        print title.text.encode("utf-8")
    print '-' * 30
</snippet></ROW><ROW><id>17276457</id><snippet>handler.addFilter(logging.Filter('foo'))
</snippet></ROW><ROW><id>17276457</id><snippet>basicConfig</snippet></ROW><ROW><id>17276457</id><snippet># foo.py
import logging
import bar

logger = logging.getLogger('foo')

def foo():
    logger.info('hello from foo')

if __name__ == '__main__':
    # Trivial logging setup.
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(name)-20s %(levelname)-8s %(message)s',
        datefmt='%m-%d %H:%M')
    for handler in logging.root.handlers:
        handler.addFilter(logging.Filter('foo'))

    foo()
    bar.bar()
</snippet></ROW><ROW><id>17276457</id><snippet>06-24 09:17 foo                  INFO     hello from foo
</snippet></ROW><ROW><id>17276457</id><snippet>foo</snippet></ROW><ROW><id>17276457</id><snippet>bar</snippet></ROW><ROW><id>17276457</id><snippet>import logging
foo_logger = logging.getLogger('foo')
bar_logger = logging.getLogger('bar')
baz_logger = logging.getLogger('baz')

class Whitelist(logging.Filter):
    def __init__(self, *whitelist):
        self.whitelist = [logging.Filter(name) for name in whitelist]

    def filter(self, record):
        return any(f.filter(record) for f in self.whitelist)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(name)-20s %(levelname)-8s %(message)s',
    datefmt='%m-%d %H:%M')
for handler in logging.root.handlers:
    handler.addFilter(Whitelist('foo', 'bar'))

foo_logger.info('hello from foo')
# 06-24 09:41 foo                  INFO     hello from foo
bar_logger.info('hello from bar')
# 06-24 09:41 bar                  INFO     hello from bar
baz_logger.info('hello from baz')
# No output since Whitelist filters if record.name not begin with 'foo' or 'bar'
</snippet></ROW><ROW><id>17276457</id><snippet>class Blacklist(Whitelist):
    def filter(self, record):
        return not Whitelist.filter(self, record)
</snippet></ROW><ROW><id>17276712</id><snippet>x="hai this is an exe file created from python scripts using cxfreeze. Press Enter to exit &gt;&gt; "
y=input(x)
</snippet></ROW><ROW><id>17276712</id><snippet>console</snippet></ROW><ROW><id>17276712</id><snippet>C:\Documents and Settings\suh&gt;c:\python32\scripts\cxfreeze -help</snippet></ROW><ROW><id>17276731</id><snippet>&lt;![CDATA["]]&gt;</snippet></ROW><ROW><id>17276731</id><snippet>"</snippet></ROW><ROW><id>17276731</id><snippet>"</snippet></ROW><ROW><id>17276731</id><snippet>&lt;![CDATA[xxx]]&gt;</snippet></ROW><ROW><id>17276731</id><snippet>xxx</snippet></ROW><ROW><id>17276801</id><snippet>&gt;&gt;&gt; a = dict((x, x) for x in range(10))
&gt;&gt;&gt; a
{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}
</snippet></ROW><ROW><id>17276801</id><snippet>&gt;&gt;&gt; dict([(1, 1), ('a', 'a')])
{'a': 'a', 1: 1}
</snippet></ROW><ROW><id>17276801</id><snippet>&gt;&gt;&gt; dict([(1, None), ("1foo", None), ("foo2bar3", None)])
{1: None, '1foo': None, 'foo2bar3': None}
</snippet></ROW><ROW><id>17276879</id><snippet>MySQLdb</snippet></ROW><ROW><id>17276879</id><snippet>import pymysql
pymysql.install_as_MySQLdb()
</snippet></ROW><ROW><id>17276879</id><snippet>MySQLdb.py</snippet></ROW><ROW><id>17276879</id><snippet>MySQLdb</snippet></ROW><ROW><id>17277060</id><snippet>import os, fnmatch

#globals
start_dir = os.getenv('md')

def excelfiles(pattern):
    file_list = []
    for root, dirs, files in os.walk(start_dir):
        for filename in files:
            if fnmatch.fnmatch(filename.lower(), pattern):
                if filename.endswith(".xls") or filename.endswith(".xlsx") or filename.endswith(".xlsm"):
                    file_list.append(os.path.join(root, filename))
    return file_list

file_list = excelfiles('*cd*')
for i in file_list: print i
</snippet></ROW><ROW><id>17277060</id><snippet>import os, csv, sys, Tkinter, tkFileDialog as fd, xlrd

# stop tinker shell from opening as only needed for file dialog
root = Tkinter.Tk()
root.withdraw()

def format_date(dt):
    yyyy, mm, dd = str(dt[0]), str(dt[1]), str(dt[2])
    hh, mi, ss = str(dt[3]), str(dt[4]), str(dt[5])

    if len(mm) == 1:
        mm = '0'+mm
    if len(dd) == 1:
        dd = '0'+dd

    if hh == '0' and mi == '0' and ss == '0':
        datetime_str = dd+'/'+mm+'/'+yyyy
    else:
        if len(hh) == 1:
            hh = '0'+hh
        if len(mi) == 1:
            mi = '0'+mi
        if len(ss) == 1:
            ss = '0'+ss
        datetime_str = dd+'/'+mm+'/'+yyyy+' '+hh+':'+mi+':'+ss

    return datetime_str

def xl_to_csv(in_path, out_path):
    # set up vars to read file
    wb = xlrd.open_workbook(in_path)
    sh1 = wb.sheet_by_index(0)
    row_cnt, col_cnt = sh1.nrows, sh1.ncols

    # set up vars to write file
    fileout = open(out_path, 'wb')
    writer = csv.writer(fileout)

    # iterate through rows and cols
    for r in range(row_cnt):

        # make list from row data
        row = []
        for c in range(col_cnt):
            #print "...debug - sh1.cell(",r,c,").value set to:", sh1.cell(r,c).value
            #print "...debug - sh1.cell(",r,c,").ctype set to:", sh1.cell(r,c).ctype

            # check data type and make conversions
            val = sh1.cell(r,c).value
            if sh1.cell(r,c).ctype == 2: # number data type
                if val == int(val):
                    val = int(val) # convert to int if only no decimal other than .0
                #print "...debug - res 1 (float to str), val set to:", val
            elif sh1.cell(r,c).ctype == 3: # date fields
                dt = xlrd.xldate_as_tuple(val, 0) # date no from excel to dat obj
                val = format_date(dt)
                #print "...debug - res 2 (date to str), val set to:", val
            elif sh1.cell(r,c).ctype == 4: # boolean data types
                val = str(bool(val)) # convert 1 or 0 to bool true / false, then string
                #print "...debug - res 3 (bool to str), val set to:", val
            else:
                val = str(val)
                #print "...debug - else, val set to:", val

            row.append(val)
            #print ""

        # write row to csv file
        try:
            writer.writerow(row)
        except:
            print '...row failed in write to file:', row
            exc_type, exc_value, exc_traceback = sys.exc_info()
            lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
            for line in lines:
                print '!!', line

    print 'Data written to:', out_path, '\n'

def main():
    in_path, out_path = None, None

    # set current working directory to user's my documents folder
    os.chdir(os.path.join(os.getenv('userprofile'),'documents'))

    # ask user for path to Excel file...
    while not in_path:
        print "Please select the excel file to read data from ..."
        try:
            in_path = fd.askopenfilename()
        except:
            print 'Error selecting file, please try again.\n'

    # get dir for output...
    same = raw_input("Do you want to write the output to the same directory? (Y/N): ")
    if same.upper() == 'Y':
        out_path = os.path.dirname(in_path)
    else:
        while not out_path:
            print "Please select a directory to write the csv file to ..."
            try:
                out_path = fd.askdirectory()
            except:
                print 'Error selecting file, please try again.\n'

    # get file name and join to dir
    f_name = os.path.basename(in_path)
    f_name = f_name[:f_name.find('.')]+'.csv'
    out_path = os.path.join(out_path,f_name)

    # get data from file and write to csv...
    print 'Attempting read data from', in_path
    print ' and write csv data to', out_path, '...\n'
    xl_to_csv(in_path, out_path)

    v_open = raw_input("Open file (Y/N):").upper()
    if v_open == 'Y':
        os.startfile(out_path)
    sys.exit()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17277060</id><snippet>def write_html_file(path, data, heads):
    html = []
    tab_attr = ' border="1" cellpadding="3" style="background-color:#FAFCFF; text-align:right"'
    head_attr = ' style="background-color:#C0CFE2"'

    # opening lines needed for html table
    try:
        html.append('&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ')
        html.append('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; ')
        html.append('&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;')
        html.append('&lt;body&gt;')
        html.append('  &lt;table'+tab_attr+'&gt;')
    except:
        print 'Error setting up html heading data'

    # html table headings (if required)
    if headings_on:
        try:
            html.append('    &lt;tr'+head_attr+'&gt;')
            for item in heads:
                html.append(' '*6+'&lt;th&gt;'+str(item)+'&lt;/th&gt;')
            html.append('    &lt;/tr&gt;')
        except:
            exc_type, exc_value, exc_traceback = sys.exc_info()
            lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
            print 'Error writing html table headings:'
            print ''.join('!! ' + line for line in lines)

    # html table content
    try:
        for row in data:
            html.append('    &lt;tr&gt;')
            for item in row:
                html.append(' '*6+'&lt;td&gt;'+str(item)+'&lt;/td&gt;')
            html.append('    &lt;/tr&gt;')
    except:
        print 'Error writing body of html data'

    # closing lines needed
    try:
        html.append('  &lt;/table&gt;')
        html.append('&lt;/body&gt;')
        html.append('&lt;/html&gt;')
    except:
        print 'Error closing html data'

    # write html data to file
    fileout = open(path, 'w')
    for line in html:
        fileout.write(line)

    print 'Data written to:', path, '\n'

    if sql_path:
        os.startfile(path)
    else:
        v_open = raw_input("Open file (Y/N):").upper()
        if v_open == 'Y':
            os.startfile(path)
</snippet></ROW><ROW><id>17277125</id><snippet>numpy</snippet></ROW><ROW><id>17277125</id><snippet>slice = arr[:2,:2]
</snippet></ROW><ROW><id>17277125</id><snippet>slice = arr[0:2,0:2]
</snippet></ROW><ROW><id>17277125</id><snippet>slice</snippet></ROW><ROW><id>17277125</id><snippet>slice = [arr[i][0:2] for i in range(0,2)]
</snippet></ROW><ROW><id>17277125</id><snippet>[arr[i][:2] for i in range(2)]</snippet></ROW><ROW><id>17277125</id><snippet>arr[i]</snippet></ROW><ROW><id>17277125</id><snippet>arr[0:2]</snippet></ROW><ROW><id>17277125</id><snippet>arr[0:2][0:2]</snippet></ROW><ROW><id>17277133</id><snippet>datetime.date()</snippet></ROW><ROW><id>17277133</id><snippet>date.weekday()</snippet></ROW><ROW><id>17277133</id><snippet>.isocalendar()</snippet></ROW><ROW><id>17277133</id><snippet>import datetime

today = datetime.date(2013, 06, 26)
dates = [today + datetime.timedelta(days=i) for i in range(0 - today.weekday(), 7 - today.weekday())]
</snippet></ROW><ROW><id>17277133</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date(2013, 06, 26)
&gt;&gt;&gt; pprint([today + datetime.timedelta(days=i) for i in range(0 - today.weekday(), 7 - today.weekday())])
[datetime.date(2013, 6, 24),
 datetime.date(2013, 6, 25),
 datetime.date(2013, 6, 26),
 datetime.date(2013, 6, 27),
 datetime.date(2013, 6, 28),
 datetime.date(2013, 6, 29),
 datetime.date(2013, 6, 30)]
</snippet></ROW><ROW><id>17277133</id><snippet>range()</snippet></ROW><ROW><id>17277133</id><snippet>xrange()</snippet></ROW><ROW><id>17277133</id><snippet>datetime.weekday()</snippet></ROW><ROW><id>17277133</id><snippet>.isoweekday()</snippet></ROW><ROW><id>17277133</id><snippet>.isocalendar()</snippet></ROW><ROW><id>17277166</id><snippet>GitHub</snippet></ROW><ROW><id>17277166</id><snippet>ax.plot_date(d, nv, ls='solid', fmt='')
</snippet></ROW><ROW><id>17277166</id><snippet>fmt='bo'</snippet></ROW><ROW><id>17277166</id><snippet>fmt</snippet></ROW><ROW><id>17277166</id><snippet>plot_date()</snippet></ROW><ROW><id>17277186</id><snippet>names</snippet></ROW><ROW><id>17277186</id><snippet>import re
import csv
from pygoogle import pygoogle

names = []

with open('parse2.txt') as fin:
   names = [x.strip() for x in fin.read().strip('\'"[]').split(' '*6)]

with open("output.txt") as fout:
  for name in names:
    g = pygoogle(name)
    g.pages = 1
    if (g.get_result_count()) == 0:
      print "[Error]: could find no result for '{}'".format(name)
    else:
      fout.write("{}    {} results\n".format(name, g.get_result_count()) )
</snippet></ROW><ROW><id>17277186</id><snippet>with</snippet></ROW><ROW><id>17277186</id><snippet>for</snippet></ROW><ROW><id>17277186</id><snippet>with open("output.txt", "wb+") as f:
  for line in lines:
    # Stuff...
    for name in names:
      f.writelines(name)
</snippet></ROW><ROW><id>17277186</id><snippet>for name in names:
    with open("output.txt", "a") as f:
        f.writelines(name)
</snippet></ROW><ROW><id>17277186</id><snippet>import re
from itertools import *

A = ["blah blah", "blah blah", "blah", "list"]

#
# from itertools doc page
#
def flatten(listOfLists):
  "Flatten one level of nesting"
  return list(chain.from_iterable(listOfLists))

def pairwise(t):
  it = iter(t)
  return izip(it,it)

#
# Transform data
#
list_of_lists = [re.split("[ ,]", item) for item in A]
# [['blah', 'blah'], ['blah', 'blah'], ['blah'], ['list']]
a_words = flatten(list_of_lists)
a_pairs = pairwise(a_words)

with open("output.csv", "wb") as f:
    writer = csv.writer(f)
    writer.writerows(a_pairs)
</snippet></ROW><ROW><id>17277186</id><snippet>A_pairs = pairwise(flatten([re.split("[ ,]", item) for item in A]))
with open("output.csv", "wb") as f:
    csv.writer(f).writerows(A_pairs)
</snippet></ROW><ROW><id>17277186</id><snippet>csvwriter</snippet></ROW><ROW><id>17277186</id><snippet>&gt;&gt;&gt; csv.register_dialect('mydialect', delimiter=' ', quoting=csv.QUOTE_MINIMAL)
&gt;&gt;&gt; csv.writer(open("try.csv", "w"), dialect="mydialect").writerows(a_ps)
</snippet></ROW><ROW><id>17277186</id><snippet>➤ cat try.csv 
blah blah
blah blah
blah list
</snippet></ROW><ROW><id>17277267</id><snippet>279=2☺55=ZN☺48=00A0IN00ZNZ☺10455=ZNU3☺167=FUT☺207=CBOT☺15=USD☺200=201309☺290=1☺269=0☺270=126.4375☺271=9☺387=12237☺</snippet></ROW><ROW><id>17277267</id><snippet>279=0☺269=0☺270=126.421875☺271=57☺</snippet></ROW><ROW><id>17277377</id><snippet>a if condition == True else b</snippet></ROW><ROW><id>17277377</id><snippet>a</snippet></ROW><ROW><id>17277377</id><snippet>condition</snippet></ROW><ROW><id>17277377</id><snippet>True</snippet></ROW><ROW><id>17277377</id><snippet>b</snippet></ROW><ROW><id>17277377</id><snippet>condition == True</snippet></ROW><ROW><id>17277377</id><snippet>True</snippet></ROW><ROW><id>17277377</id><snippet>a</snippet></ROW><ROW><id>17277377</id><snippet>&gt;&gt;&gt; class c(a if condition == True else b): pass
&gt;&gt;&gt; c.__bases__
(&lt;class __main__.a at 0xb615444c&gt;,)
</snippet></ROW><ROW><id>17277377</id><snippet>&gt;&gt;&gt; print 'foo' if 0&gt;1 else 'bar'
bar
&gt;&gt;&gt; print 'foo' if 1&gt;0 else 'bar'
foo
</snippet></ROW><ROW><id>17277377</id><snippet>x if C else y</snippet></ROW><ROW><id>17277377</id><snippet>C</snippet></ROW><ROW><id>17277377</id><snippet>x</snippet></ROW><ROW><id>17277377</id><snippet>C</snippet></ROW><ROW><id>17277377</id><snippet>x</snippet></ROW><ROW><id>17277377</id><snippet>y</snippet></ROW><ROW><id>17277411</id><snippet>pro =  get_object_or_404(Product, username= category) -&gt; (This doesnt seem to work ))
</snippet></ROW><ROW><id>17277411</id><snippet>Product</snippet></ROW><ROW><id>17277411</id><snippet>username</snippet></ROW><ROW><id>17277411</id><snippet>category</snippet></ROW><ROW><id>17277411</id><snippet>get_object_or_404</snippet></ROW><ROW><id>17277411</id><snippet>pro = Product.objects.filter(category=category)
</snippet></ROW><ROW><id>17277411</id><snippet>get_object_or_404</snippet></ROW><ROW><id>17277551</id><snippet>sys.exit</snippet></ROW><ROW><id>17277551</id><snippet>SystemExit</snippet></ROW><ROW><id>17277551</id><snippet>with self.assertRaises(SystemExit) as cm:
    sys.exit('some message')

self.assertEqual(cm.exception.args[0], 'some message')
...
</snippet></ROW><ROW><id>17277776</id><snippet>    for line in syn:
        match = re.search("kernel", line, re.MULTILINE)
        if match:  # gets rid lines that don't match, which return `None`
            print line
</snippet></ROW><ROW><id>17277776</id><snippet>match</snippet></ROW><ROW><id>17277776</id><snippet>print line</snippet></ROW><ROW><id>17277904</id><snippet>inlines</snippet></ROW><ROW><id>17277904</id><snippet>ManyToMany</snippet></ROW><ROW><id>17277904</id><snippet>admin.py</snippet></ROW><ROW><id>17277904</id><snippet>class JobInline(admin.TabularInline):
     model = Host.jobs.through
</snippet></ROW><ROW><id>17277913</id><snippet>1</snippet></ROW><ROW><id>17277913</id><snippet>-1+2 is 1</snippet></ROW><ROW><id>17277913</id><snippet>True</snippet></ROW><ROW><id>17277913</id><snippet>NotInFile = object()
</snippet></ROW><ROW><id>17277913</id><snippet>NotImplemented</snippet></ROW><ROW><id>17277913</id><snippet>Ellipsis</snippet></ROW><ROW><id>17278280</id><snippet>right</snippet></ROW><ROW><id>17278280</id><snippet>np.asarray(some_string)</snippet></ROW><ROW><id>17278280</id><snippet>np.mean</snippet></ROW><ROW><id>17278280</id><snippet>In [29]: np.asarray('1 2 3')
Out[29]: 
array('1 2 3', 
      dtype='|S5')
In [31]: np.mean(a)
TypeError: cannot perform reduce with flexible type
</snippet></ROW><ROW><id>17278280</id><snippet>a = np.genfromtxt(filename, ...)
</snippet></ROW><ROW><id>17278338</id><snippet>Field</snippet></ROW><ROW><id>17278515</id><snippet>kind</snippet></ROW><ROW><id>17278515</id><snippet>"parents": [{ "id": self.folderId }]
</snippet></ROW><ROW><id>17278590</id><snippet>def get_context_data(request)
</snippet></ROW><ROW><id>17278590</id><snippet>def get_context_data(self, **kwargs):
    request = self.request
</snippet></ROW><ROW><id>17278590</id><snippet>self</snippet></ROW><ROW><id>17278590</id><snippet>request</snippet></ROW><ROW><id>17278642</id><snippet>with open('noslang.txt') as f:
    dic = dict(line.strip().split(None,1) for line in f)
...     
with open('test.txt') as f:
    for line in f:                                             
        spl = line.split()
        new_lis =[dic.get(word,word) for word in spl]
        print " ".join(new_lis)
...         
yeah right
i'll attend the class
tomorrow will b great
</snippet></ROW><ROW><id>17278642</id><snippet>noslang.txt</snippet></ROW><ROW><id>17278642</id><snippet>ya   yeah
2morow   tomorrow 
2mz   tomorrow
2night   tonight
2nite   tonight
2nyt   tonight
</snippet></ROW><ROW><id>17278762</id><snippet>print ('{:5d} '*5).format(*values)
</snippet></ROW><ROW><id>17278762</id><snippet>&gt;&gt;&gt; '{:5d} '*5
'{:5d} {:5d} {:5d} {:5d} {:5d} '
</snippet></ROW><ROW><id>17278827</id><snippet>xml</snippet></ROW><ROW><id>17278827</id><snippet>import re

xml = re.sub(r'.*&lt;root&gt;', '&lt;root&gt;', xml, flags=re.DOTALL)    # Remove leading junk
xml = re.sub(r'\\par[^&lt;]*&lt;', '&lt;', xml)                       # Middle junk
xml = re.sub(r'&lt;/root&gt;.*', '&lt;/root&gt;', xml, flags=re.DOTALL)  # Trailing junk
</snippet></ROW><ROW><id>17278827</id><snippet>root</snippet></ROW><ROW><id>17279198</id><snippet>&gt;&gt;&gt; l1 = ['a', 'b', 'c']
&gt;&gt;&gt; l2 = ['1', '2', '3']
&gt;&gt;&gt; l3 = ['x', 'y', 'z']
&gt;&gt;&gt; for row in zip(l1, l2, l3):
...     print ' '.join(row)

a 1 x
b 2 y
c 3 z
</snippet></ROW><ROW><id>17279278</id><snippet>adjectives</snippet></ROW><ROW><id>17279278</id><snippet>adverbs</snippet></ROW><ROW><id>17279278</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from nltk.corpus import wordnet as wn
&gt;&gt;&gt; from difflib import get_close_matches as gcm
&gt;&gt;&gt; possible_adjectives = [k.name for k in chain(*[j.pertainyms() for j in chain(*[i.lemmas for i in wn.synsets('terribly')])])]
['terrible', 'atrocious', 'awful', 'rotten']
&gt;&gt;&gt; gcm('terribly',possible_adjectives)
['terrible']
</snippet></ROW><ROW><id>17279278</id><snippet>possible_adjective</snippet></ROW><ROW><id>17279278</id><snippet>possible_adj = []
for ss in wn.synsets('terribly'):
  for lemmas in ss.lemmas: # all possible lemmas.
    for lemma in lemmas: 
      for ps in lemma.pertainyms(): # all possible pertainyms.
        for p in ps:
          for ln in p.name: # all possible lemma names.
            possible_adj.append(ln)
</snippet></ROW><ROW><id>17279301</id><snippet>models</snippet></ROW><ROW><id>17279301</id><snippet>IntegrityErrors</snippet></ROW><ROW><id>17279301</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>17279546</id><snippet>subsurface</snippet></ROW><ROW><id>17279546</id><snippet>rect = pygame.Rect(25, 25, 100, 50)
sub = screen.subsurface(rect)
pygame.image.save(sub, "screenshot.jpg")
</snippet></ROW><ROW><id>17279546</id><snippet>subsurface</snippet></ROW><ROW><id>17279546</id><snippet>screen</snippet></ROW><ROW><id>17279546</id><snippet>rect = pygame.Rect(25, 25, 100, 50)
screenshot = pygame.Surface(100, 50)
screenshot.blit(screen, area=rect)
pygame.image.save(screenshot, "screenshot.jpg")
</snippet></ROW><ROW><id>17279740</id><snippet>"a^Mb"
</snippet></ROW><ROW><id>17279740</id><snippet>#!/usr/bin/env python2.7

import csv

with open('xyz.csv', 'wb') as outfile:
      w = csv.writer(outfile)
      w.writerow(['stringa','multiline\015string',])
</snippet></ROW><ROW><id>17279892</id><snippet>def create_directed_graph(rows):
    g = nx.DiGraph()
    for row in rows:
        curRow = row['r']
        curCol = row['c']
        weight = row['val']
        g.add_edge(curRow,curCol,Weight=weight)
    return g
</snippet></ROW><ROW><id>17280279</id><snippet>%d</snippet></ROW><ROW><id>17280279</id><snippet>%f</snippet></ROW><ROW><id>17280279</id><snippet>%d</snippet></ROW><ROW><id>17280279</id><snippet>&gt;&gt;&gt; print "My GPA is %f" % ((math + physics + algebra + geometry)/2)
My GPA is 17.500000
</snippet></ROW><ROW><id>17280279</id><snippet>&gt;&gt;&gt; print "My GPA is %.1f" % ((math + physics + algebra + geometry)/2)
My GPA is 17.5
</snippet></ROW><ROW><id>17280279</id><snippet>&gt;&gt;&gt; print "My GPA is {:.1f}" .format((math + physics + algebra + geometry)/2)
My GPA is 17.5
</snippet></ROW><ROW><id>17280279</id><snippet>&gt;&gt;&gt; 3/2
1
&gt;&gt;&gt; 3/float(2)
1.5
&gt;&gt;&gt; 3/2.
1.5
</snippet></ROW><ROW><id>17280279</id><snippet>divison</snippet></ROW><ROW><id>17280279</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 3/2
1.5
</snippet></ROW><ROW><id>17280610</id><snippet>pprint</snippet></ROW><ROW><id>17280610</id><snippet>from pprint import pprint

# Build the tree somehow

with open('output.txt', 'wt') as out:
    pprint(myTree, stream=out)
</snippet></ROW><ROW><id>17280827</id><snippet>t</snippet></ROW><ROW><id>17280827</id><snippet>&lt;t:latex-object\b(?=\s)(?=(?:(?![^&gt;])'[^']*'|"[^"]*"|.)*\surl='([^"]*)').*?&lt;\/t:latex-object&gt;</snippet></ROW><ROW><id>17280827</id><snippet>import re

string = """
&lt;t:latex-object url='%28-3%29%5E%7B2%7D%3D3%5E%7B2%7D'&gt;&lt;![CDATA[(-3)^{2}=3^{2}]]&gt;&lt;/t:latex-object&gt;
""";

for matchObj in re.finditer( r'&lt;t:latex-object\b(?=\s)(?=(?:(?![^&gt;])\'[^\']*\'|"[^"]*"|.)*\surl=\'([^"]*)\').*?&lt;\/t:latex-object&gt;', string, re.M|re.I|re.S):
    print "-------"
    print "matchObj.group(0) : ", matchObj.group(0)
    print "matchObj.group(1) : ", matchObj.group(1)
</snippet></ROW><ROW><id>17280827</id><snippet>matchObj.group(0) :  &lt;t:latex-object url='%28-3%29%5E%7B2%7D%3D3%5E%7B2%7D'&gt;&lt;![CDATA[(-3)^{2}=3^{2}]]&gt;&lt;/t:latex-object&gt;
matchObj.group(1) :  %28-3%29%5E%7B2%7D%3D3%5E%7B2%7D
</snippet></ROW><ROW><id>17280858</id><snippet>df['sales'] = df['price'] * df['quantity']
</snippet></ROW><ROW><id>17280890</id><snippet>import Tkinter as tk
root = tk.Tk()
root.withdraw()
tkMessageBox.showinfo("Say Hello", "Hello World")
</snippet></ROW><ROW><id>17280890</id><snippet>import Tkinter as tk
root = tk.Tk()
root.title("Say Hello")
label = tk.Label(root, text="Hello World")
label.pack(side="top", fill="both", expand=True, padx=20, pady=20)
button = tk.Button(root, text="OK", command=lambda: root.destroy())
button.pack(side="bottom", fill="none", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>17281008</id><snippet>num2/num1</snippet></ROW><ROW><id>17281008</id><snippet>num1/num2</snippet></ROW><ROW><id>17281008</id><snippet>0</snippet></ROW><ROW><id>17281008</id><snippet>num1</snippet></ROW><ROW><id>17281008</id><snippet>num2</snippet></ROW><ROW><id>17281008</id><snippet>num1/num2</snippet></ROW><ROW><id>17281008</id><snippet>0</snippet></ROW><ROW><id>17281008</id><snippet>num1 = random.randint(1,12)
num2 = random.randint(1,12) * num1
</snippet></ROW><ROW><id>17281058</id><snippet>import numpy as np

data = np.array(
    [
        [1.23456789, 2.34567890],
        [0.00000001, 0.22222222]
    ]
)


print data

--output:--
[[  1.23456789e+00   2.34567890e+00]
 [  1.00000000e-08   2.22222220e-01]]



np.set_printoptions(
    precision=6,
    suppress=True,  #get rid of scientific notation(e.g. e+00)
)

print data

--output:--
[[ 1.234568  2.345679]
 [ 0.        0.222222]]
</snippet></ROW><ROW><id>17281183</id><snippet>__name__</snippet></ROW><ROW><id>17281183</id><snippet>exampleMethod</snippet></ROW><ROW><id>17281183</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmembers('')[20]
('__ne__', &lt;method-wrapper '__ne__' of str object at 0x10bbb2508&gt;)
&gt;&gt;&gt; inspect.getmembers('')[20][1].__name__
'__ne__'
</snippet></ROW><ROW><id>17281183</id><snippet>__doc__</snippet></ROW><ROW><id>17281183</id><snippet>&gt;&gt;&gt; [getattr(o, '__name__', None) for n, o in inspect.getmembers('')]
['__add__', 'str', '__contains__', '__delattr__', None, '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
</snippet></ROW><ROW><id>17281183</id><snippet>__doc__</snippet></ROW><ROW><id>17281250</id><snippet>def my_rounding(x):
    return math.ceil(x) if x &gt; 0. else math.floor(x)
</snippet></ROW><ROW><id>17281381</id><snippet>&gt;&gt;&gt; lis =[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
&gt;&gt;&gt; lis[1::9]
[1, 10]
</snippet></ROW><ROW><id>17281381</id><snippet>lis[start : stop : step]  #default values : start = 0, stop = len(lis), step = 1
</snippet></ROW><ROW><id>17281381</id><snippet>start</snippet></ROW><ROW><id>17281381</id><snippet>&gt;&gt;&gt; lis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
&gt;&gt;&gt; se = set(range(0, len(lis),9))   #use a list if the lis is not huge.
&gt;&gt;&gt; [x for i,x in enumerate(lis) if i not in se]
[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17]

#for your example even this will work:
&gt;&gt;&gt; [x for i,x in enumerate(lis) if i%9 != 0]
[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17]
</snippet></ROW><ROW><id>17281550</id><snippet>print</snippet></ROW><ROW><id>17281550</id><snippet>&gt;&gt;&gt; r"foo\t"
'foo\\t'
&gt;&gt;&gt; print r"foo\t"
foo\t
</snippet></ROW><ROW><id>17281550</id><snippet>repr</snippet></ROW><ROW><id>17281550</id><snippet>str</snippet></ROW><ROW><id>17281550</id><snippet>&gt;&gt;&gt; s = r"foo\t"
&gt;&gt;&gt; print str(s)
foo\t
&gt;&gt;&gt; print repr(s)
'foo\\t'
</snippet></ROW><ROW><id>17281550</id><snippet>repr</snippet></ROW><ROW><id>17281550</id><snippet>repr</snippet></ROW><ROW><id>17281663</id><snippet>writer = open("filename.txt", 'w+')
# w+ is the flag for overwriting if the file already exists
# a+ is the flag for appending if it already exists

t = (val1, val2) #a tuple of values you want to save

for elem in t:
    writer.write(str(elem) + ', ')
writer.write('\n') #the write function doesn't automatically put a new line at the end

writer.close()
</snippet></ROW><ROW><id>17281785</id><snippet>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        }
    }
}
</snippet></ROW><ROW><id>17281785</id><snippet>process_exception</snippet></ROW><ROW><id>17281976</id><snippet>import ipdb;ipdb.set_trace()</snippet></ROW><ROW><id>17281976</id><snippet>import ipdb;ipdb.set_trace()
for i in range(100):
    print i
</snippet></ROW><ROW><id>17281976</id><snippet>b xx, i == 10</snippet></ROW><ROW><id>17281976</id><snippet>c</snippet></ROW><ROW><id>17281976</id><snippet>r</snippet></ROW><ROW><id>17281976</id><snippet>l</snippet></ROW><ROW><id>17281976</id><snippet>          xx-1                  for i in range(100): 
bpnumber&gt; xx                        print i
          xx+1                      ...
</snippet></ROW><ROW><id>17282160</id><snippet>~=</snippet></ROW><ROW><id>17282160</id><snippet>Django &gt;= 1.4.3, &lt; 1.5
</snippet></ROW><ROW><id>17282211</id><snippet>chdir /svbase/
expect fork

script
    exec /usr/bin/python /svbase/smapp/Main.py /svbase/config/product/smapp.xml &amp;
end script
</snippet></ROW><ROW><id>17282263</id><snippet>import urllib2
import datetime

from bs4 import BeautifulSoup as soup


url = "http://app2.nea.gov.sg/anti-pollution-radiation-protection/air-pollution/psi/psi-readings-over-the-last-24-hours"
web_soup = soup(urllib2.urlopen(url))

table = web_soup.find(name="div", attrs={'class': 'c1'}).find_all(name="div")[2].find_all('table')[0]

data = {}
bold_time = ''
cur_time = datetime.datetime.strptime("12AM", "%I%p")
for tr_index, tr in enumerate(table.find_all('tr')):
    if 'Time' in tr.text:
        continue
    for td_index, td in enumerate(tr.find_all('td')):
        if not td_index:
            continue
        data[cur_time] = td.text.strip()
        if td.find('strong'):
            bold_time = cur_time
        cur_time += datetime.timedelta(hours=1)

print data.get(bold_time)  # bold
print data.get(bold_time - datetime.timedelta(hours=1))  # before bold
print data.get(bold_time - datetime.timedelta(hours=2))  # before before bold
</snippet></ROW><ROW><id>17282263</id><snippet>3-hr PSI</snippet></ROW><ROW><id>17282376</id><snippet>import numpy as np
W1 = np.arange(25*64).reshape(25, 64)
W2 = np.arange(25*64).reshape(64, 25)
b1 = np.arange(25)
b2 = np.arange(64)

theta = np.concatenate([W1.flat, W2.flat, b1, b2])
print(theta.shape)
# (3289,)
</snippet></ROW><ROW><id>17282497</id><snippet>&gt;&gt;&gt; dic = {'PhysicalDrive0': ['0', '1', '2'], 'PhysicalDrive1': ['0', '1']}
&gt;&gt;&gt; dic['PhysicalDrive0'].append('3')
&gt;&gt;&gt; dic['PhysicalDrive1'].append('2')
&gt;&gt;&gt; dic
{'PhysicalDrive1': ['0', '1', '2'], 'PhysicalDrive0': ['0', '1', '2', '3']}
</snippet></ROW><ROW><id>17282497</id><snippet>dict.setdefault</snippet></ROW><ROW><id>17282497</id><snippet>#creates a new key PhysicalDrive3' and appends a value to it.
&gt;&gt;&gt; dic.setdefault('PhysicalDrive3', []).append('3')
&gt;&gt;&gt; dic
{'PhysicalDrive1': ['0', '1', '2'], 'PhysicalDrive0': ['0', '1', '2', '3'], 'PhysicalDrive3': ['3']}

&gt;&gt;&gt; dic.setdefault('PhysicalDrive1', []).append('5')
&gt;&gt;&gt; dic
{'PhysicalDrive1': ['0', '1', 2, '5'], 'PhysicalDrive0': ['0', '1', '2', 3], 'PhysicalDrive3': [3]}
</snippet></ROW><ROW><id>17282525</id><snippet>-flatten</snippet></ROW><ROW><id>17282525</id><snippet>-layers flatten</snippet></ROW><ROW><id>17282525</id><snippet>-layers flatten</snippet></ROW><ROW><id>17282525</id><snippet>convert</snippet></ROW><ROW><id>17282525</id><snippet>.composite()</snippet></ROW><ROW><id>17282525</id><snippet>import PythonMagick

img = PythonMagick.Image("infile.pdf")

img.density('400')

bgColour = PythonMagick.ColorRGB(1.0, 1.0, 1.0)
size = "%sx%s" % (img.columns(), img.rows())

flattened = PythonMagick.Image(size, bgColour)
flattened.type = img.type

flattened.composite(img, 0, 0, PythonMagick.CompositeOperator.SrcOverCompositeOp)

flattened.resize('1900x')
flattened.magick('JPG')
flattened.quality(60)

flattened.write("outfile.jpg")
</snippet></ROW><ROW><id>17282525</id><snippet>PythonMagick.CompositeOperator.DstOverCompositeOp</snippet></ROW><ROW><id>17282525</id><snippet>gs</snippet></ROW><ROW><id>17282525</id><snippet>os.system('gs ...')</snippet></ROW><ROW><id>17282525</id><snippet>convert</snippet></ROW><ROW><id>17282577</id><snippet>%y</snippet></ROW><ROW><id>17282577</id><snippet>$y</snippet></ROW><ROW><id>17282577</id><snippet>date = datetime.datetime.strptime(var, '%m/%d/%y')
</snippet></ROW><ROW><id>17283163</id><snippet>def func(l=None, d=None):
    if l is None:
       l = list()  #or l = []
    if d is None:
       d = dict()  #or d = {}
</snippet></ROW><ROW><id>17283163</id><snippet>[]</snippet></ROW><ROW><id>17283163</id><snippet>{}</snippet></ROW><ROW><id>17283230</id><snippet>str</snippet></ROW><ROW><id>17283230</id><snippet>str</snippet></ROW><ROW><id>17283230</id><snippet>&gt;&gt;&gt; str((x for x in range(3)))
'&lt;generator object &lt;genexpr&gt; at 0xb624b93c&gt;'
</snippet></ROW><ROW><id>17283230</id><snippet>for item in store:
   strs = " ".join([cflist[i]) for i in range(3)])
   print(str(item + "|" + strs + "\n" + ("-------------" * 7)))
</snippet></ROW><ROW><id>17283275</id><snippet>bisect</snippet></ROW><ROW><id>17283275</id><snippet>O(LogN)</snippet></ROW><ROW><id>17283275</id><snippet>O(N)</snippet></ROW><ROW><id>17283275</id><snippet>&gt;&gt;&gt; import bisect
def solve(lis, item):
     ind = bisect.bisect_right(lis, item, hi = len(lis)-1)
     return lis[ind] if lis[ind] &lt;= item else lis[ind-1]

&gt;&gt;&gt; L = range(10, 100)
&gt;&gt;&gt; L.remove(15)       
&gt;&gt;&gt; solve(L,15)
14
&gt;&gt;&gt; solve(L,17)
17
&gt;&gt;&gt; L.pop(20)
31
&gt;&gt;&gt; solve(L,31)
30
</snippet></ROW><ROW><id>17283304</id><snippet>fnmatch.filter()</snippet></ROW><ROW><id>17283304</id><snippet>import os, fnmatch

def get_all_files(path, pattern):
    datafiles = []

    for root,dirs,files in os.walk(path):
        for file in fnmatch.filter(files, pattern):
            pathname = os.path.join(root, file)
            filesize = os.stat(pathname).st_size
            datafiles.append([file, pathname, filesize])

    return datafiles

print get_all_files('.', 'something.*') # all files named 'something'
</snippet></ROW><ROW><id>17283304</id><snippet>os.walk()</snippet></ROW><ROW><id>17283304</id><snippet>import os, fnmatch

def glob_walk(top, pattern, **kwargs):
    """ Wrapper for os.walk() that filters the files returned
        with a pattern composed of Unix shell-style wildcards
        as documented in the fnmatch module.
    """
    for root, dirs, files in os.walk(top, **kwargs):
        yield root, dirs, fnmatch.filter(files, pattern)

# sample usage
def get_all_files(path, pattern):
    for root, dirs, files in glob_walk(path, pattern):
        for file in files:
            pathname = os.path.join(root, file)
            filesize = os.stat(pathname).st_size
            yield file, pathname, filesize

print list(get_all_files('.', 'something.*')) # all files named 'something'
</snippet></ROW><ROW><id>17283304</id><snippet>glob_walk()</snippet></ROW><ROW><id>17283304</id><snippet>get_all_files()</snippet></ROW><ROW><id>17283304</id><snippet>os.walk()</snippet></ROW><ROW><id>17283457</id><snippet>import numpy as np
import matplotlib.pyplot as plt

width=0.5

strong_dis = np.array((20, 10, 5, 10, 15))
disagree = np.array((20, 25, 15, 15, 10))
# shortcut here
therest = np.subtract(100, strong_dis + disagree)

q = np.arange(5)

bsd=plt.barh(q, strong_dis, width, color='red')
bd=plt.barh(q, disagree, width, left=strong_dis, color='pink')
br=plt.barh(q, therest, width, left=strong_dis+disagree, color='lightblue')

ylabels = tuple(reversed(['A', 'B', 'C', 'D', 'E']))
plt.yticks(q+width/2., ylabels)

plt.xlabel('Responses (%)')
plt.legend((bsd, bd, br), ('strong disagree', 'disagree', 'the rest'))
plt.show()
</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>while</snippet></ROW><ROW><id>17283513</id><snippet>for i in xrange(1, MAXM + 1):</snippet></ROW><ROW><id>17283513</id><snippet>while</snippet></ROW><ROW><id>17283513</id><snippet>for</snippet></ROW><ROW><id>17283513</id><snippet>def s(n):
    tsum = 0
    i = 1
    con = n
    while i &lt; con:
        if n % i == 0:
            temp = n / i
            tsum += i
            if temp != i:
                tsum += temp 
            con = temp
        i += 1                    
    return tsum
</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>i</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>con</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n = 2*p</snippet></ROW><ROW><id>17283513</id><snippet>p</snippet></ROW><ROW><id>17283513</id><snippet>n/2</snippet></ROW><ROW><id>17283513</id><snippet>n = 3*p</snippet></ROW><ROW><id>17283513</id><snippet>n/3</snippet></ROW><ROW><id>17283513</id><snippet>p = 2</snippet></ROW><ROW><id>17283513</id><snippet>x</snippet></ROW><ROW><id>17283513</id><snippet>x/log x</snippet></ROW><ROW><id>17283513</id><snippet>log</snippet></ROW><ROW><id>17283513</id><snippet>Ω(MAXNUM² / log MAXNUM)
</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>d</snippet></ROW><ROW><id>17283513</id><snippet>n/d</snippet></ROW><ROW><id>17283513</id><snippet>d = n/d</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>def s(n):
    tsum = 0
    root = int(n**0.5)  # floor of the square root of n, at least for small enough n
    i = 1
    while i &lt; root + 1:
        if n % i == 0:
            tsum += i + n/i
        i += 1
    # check whether n is a square, if it is, we have added root twice
    if root*root == n:
        tsum -= root
    return tsum
</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>1 &lt;= n &lt;= MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>Θ(MAXNUM^1.5)</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>n &lt;= MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>O(MAXM * MAXNUM^1.5)</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n = p^k</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>1, p, p², ..., p^k</snippet></ROW><ROW><id>17283513</id><snippet>(p^(k+1) - 1) / (p - 1)
</snippet></ROW><ROW><id>17283513</id><snippet>k+1</snippet></ROW><ROW><id>17283513</id><snippet>p</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n = p^k * m</snippet></ROW><ROW><id>17283513</id><snippet>p</snippet></ROW><ROW><id>17283513</id><snippet>m</snippet></ROW><ROW><id>17283513</id><snippet>p</snippet></ROW><ROW><id>17283513</id><snippet>m</snippet></ROW><ROW><id>17283513</id><snippet>s(n) = s(p^k) * s(m)
</snippet></ROW><ROW><id>17283513</id><snippet>d</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>d = p^a * g</snippet></ROW><ROW><id>17283513</id><snippet>p</snippet></ROW><ROW><id>17283513</id><snippet>g</snippet></ROW><ROW><id>17283513</id><snippet>p^a</snippet></ROW><ROW><id>17283513</id><snippet>p^k</snippet></ROW><ROW><id>17283513</id><snippet>a &lt;= k</snippet></ROW><ROW><id>17283513</id><snippet>g</snippet></ROW><ROW><id>17283513</id><snippet>m</snippet></ROW><ROW><id>17283513</id><snippet>0 &lt;= a &lt;= k</snippet></ROW><ROW><id>17283513</id><snippet>g</snippet></ROW><ROW><id>17283513</id><snippet>m</snippet></ROW><ROW><id>17283513</id><snippet>p^a * g</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>1 = g_1 &lt; g_2 &lt; ... &lt; g_r = m</snippet></ROW><ROW><id>17283513</id><snippet>m</snippet></ROW><ROW><id>17283513</id><snippet> 1*g_1   1*g_2  ...  1*g_r
 p*g_1   p*g_2  ...  p*g_r
  :        :           :
p^k*g_1 p^k*g_2 ... p^k*g_r
</snippet></ROW><ROW><id>17283513</id><snippet>p^a * s(m)</snippet></ROW><ROW><id>17283513</id><snippet>def s(n):
    tsum = 1
    for p in primes:
        d = 1
        # divide out all factors p of n
        while n % p == 0:
            n = n//p
            d = p*d + 1
        tsum *= d
        if p*p &gt; n: # n = 1, or n is prime
            break
    if n &gt; 1:       # one last prime factor to account for
        tsum *= 1 + n
    return tsum
</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>n**0.5</snippet></ROW><ROW><id>17283513</id><snippet>for p in primes:</snippet></ROW><ROW><id>17283513</id><snippet>for p in xrange(2, n):</snippet></ROW><ROW><id>17283513</id><snippet>n**0.5</snippet></ROW><ROW><id>17283513</id><snippet>[2] + [3,5,7...]</snippet></ROW><ROW><id>17283513</id><snippet>[2,3] + [5,7, 11,13, 17,19, ...]</snippet></ROW><ROW><id>17283513</id><snippet>n &lt;= MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>Ω(MAXNUM^1.5 / log MAXNUM)</snippet></ROW><ROW><id>17283513</id><snippet>MAXNUM^1.5</snippet></ROW><ROW><id>17283513</id><snippet>s(56)</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>1 &lt;= n &lt;= MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>n</snippet></ROW><ROW><id>17283513</id><snippet>def divisorSums(n):
    dsums = [0] + [1]*n
    for k in xrange(2, n+1):
        for m in xrange(k, n+1, k):
            dsums[m] += k
    return dsums
</snippet></ROW><ROW><id>17283513</id><snippet>O(n * log n)</snippet></ROW><ROW><id>17283513</id><snippet>O(n * log log n)</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>n &lt;= MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>s(n)</snippet></ROW><ROW><id>17283513</id><snippet>MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>dsums = divisorSums(MAXNUM)
def memo_s(n):
    if n &lt;= MAXNUM:
        return dsums[n]
    return s(n)
</snippet></ROW><ROW><id>17283513</id><snippet>Found 414 distinct (m-k)-perfect numbers (0.10350 per cent of 400000 ) in 496 occurrences
Found 4 perfect numbers
Found 8 multiperfect numbers (including perfect numbers)
Found 7 superperfect numbers
12.709428072 seconds
</snippet></ROW><ROW><id>17283513</id><snippet>import time
start_time = time.time()


def s(n):
    tsum = 1
    for p in xrange(2,n):
        d = 1
        # divide out all factors p of n
        while n % p == 0:
            n = n//p
            d = p*d + 1
        tsum *= d
        if p*p &gt; n: # n = 1, or n is prime
            break
    if n &gt; 1:       # one last prime factor to account for
        tsum *= 1 + n
    return tsum
def divisorSums(n):
    dsums = [0] + [1]*n
    for k in xrange(2, n+1):
        for m in xrange(k, n+1, k):
            dsums[m] += k
    return dsums

MAXM = 6
MAXNUM = 400000

dsums = divisorSums(MAXNUM)
def memo_s(n):
    if n &lt;= MAXNUM:
        return dsums[n]
    return s(n)

i = 2

perc = 0
perc1 = 0
perf = 0
multperf = 0
supperf = 0
while i &lt;= MAXNUM:
    pert = perc1
    num = i
    for m in xrange(1, MAXM + 1):
        tsum = memo_s(num)
        if tsum % i == 0:
            perc1 += 1
            k = tsum / i
            mes = "%d is a (%d-%d)-perfect number" % (i, m, k)
            if m == 1:
                multperf += 1
                if k == 2:
                    perf += 1
                    print mes + ", that is a perfect number"
                else:
                    print mes + ", that is a multiperfect number"
            elif m == 2 and k == 2:
                supperf += 1
                print mes + ", that is a superperfect number"
            else:
                print mes
        num = tsum
    i += 1
    if pert != perc1: perc += 1
print "Found %d distinct (m-k)-perfect numbers (%.5f per cent of %d ) in %d occurrences" % (
perc, float(perc) / MAXNUM * 100, MAXNUM, perc1)
print "Found %d perfect numbers" % perf
print "Found %d multiperfect numbers (including perfect numbers)" % multperf
print "Found %d superperfect numbers" % supperf
print time.time() - start_time, "seconds"
</snippet></ROW><ROW><id>17283513</id><snippet>n &gt; MAXNUM</snippet></ROW><ROW><id>17283513</id><snippet>d = {}
for i in xrange(1, MAXNUM+1):
    d[i] = dsums[i]
def memo_s(n):
    if n in d:
        return d[n]
    else:
        t = s(n)
        d[n] = t
        return t
</snippet></ROW><ROW><id>17283513</id><snippet>3.33684396744 seconds
</snippet></ROW><ROW><id>17283582</id><snippet>Request</snippet></ROW><ROW><id>17283582</id><snippet>item</snippet></ROW><ROW><id>17283582</id><snippet>meta</snippet></ROW><ROW><id>17283582</id><snippet>from scrapy.http import Request
from scrapy.item import Item, Field
from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector


class EpinionsTestItem(Item):
    title = Field()
    star = Field()
    date = Field()
    review = Field()


class MySpider(BaseSpider):
    name = "epinions"
    allow_domains = ["epinions.com"]
    start_urls = ['http://www.epinions.com/reviews/samsung-galaxy-note-16-gb-cell-phone/pa_~1']

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//div[@class="review_info"]')

        for sites in sites:
            item = EpinionsTestItem()
            item["title"] = sites.select('h2/a/text()').extract()
            item["star"] = sites.select('span/a/span/@title').extract()
            item["date"] = sites.select('span/span/span/@title').extract()

            url = sites.select('p/span/a/@href').extract()
            url = str("http://www.epinions.com%s" % str(url)[3:-2])

            yield Request(url=url, callback=self.parse_url2, meta={'item': item})

    def parse_url2(self, response):
        hxs = HtmlXPathSelector(response)

        item = response.meta['item']
        fullReview = hxs.select('//div[@class = "user_review_full"]')
        item["review"] = fullReview.select('p/text()').extract()
        yield item
</snippet></ROW><ROW><id>17283738</id><snippet>A = 1</snippet></ROW><ROW><id>17283738</id><snippet>count</snippet></ROW><ROW><id>17283738</id><snippet>count</snippet></ROW><ROW><id>17283738</id><snippet>import itertools

def transform(d, key_generator=None, conversion=None):
    if key_generator is None:
        key_generator = itertools.count(start=1)
    if conversion is None:
        conversion = {}
    output = {}
    for k, v in d.iteritems():
        if k in conversion:
            k = conversion[k]
        else:
            next_key = next(key_generator)
            conversion[k] = next_key
            k = next_key
        if isinstance(v, dict):
            v = transform(v, key_generator, conversion)
        output[k] = v
    return output
</snippet></ROW><ROW><id>17283738</id><snippet>conversion = {}
transform(dict1, conversion=conversion)
print conversion

{1: {1: 1},
 2: {1: 0.5, 2: 0.5},
 3: {2: 0.36, 3: 0.5, 4: 0.14},
 4: {5: 1},
 5: {},
 6: {7: 1}}
{'A': 1, 'C': 2, 'B': 3, 'E': 4, 'D': 6, 'G': 7, 'F': 5}
</snippet></ROW><ROW><id>17283738</id><snippet>E</snippet></ROW><ROW><id>17283738</id><snippet>D</snippet></ROW><ROW><id>17283996</id><snippet>from collections import namedtuple
SomeClass = namedtuple('Name of class', ['variableX', 'variableY'], verbose=True)
myObject = SomeClass("value", 120)

print myObject.variableX
</snippet></ROW><ROW><id>17284097</id><snippet>len(set(listA).intersection(listB)) &gt; 0
</snippet></ROW><ROW><id>17284097</id><snippet>if</snippet></ROW><ROW><id>17284097</id><snippet>if set(listA).intersection(listB):
</snippet></ROW><ROW><id>17284097</id><snippet>listA</snippet></ROW><ROW><id>17284097</id><snippet>stringB</snippet></ROW><ROW><id>17284097</id><snippet>any(e in stringB for e in listA)
</snippet></ROW><ROW><id>17284276</id><snippet>import simplejson, urllib
orig_coord = orig_lat, orig_lng
dest_coord = dest_lat, dest_lng
url = "http://maps.googleapis.com/maps/api/distancematrix/json?origins={0}&amp;destinations={1}&amp;mode=driving&amp;language=en-EN&amp;sensor=false".format(str(orig_coord),str(dest_coord))
result= simplejson.load(urllib.urlopen(url))
driving_time = result['rows'][0]['elements'][0]['duration']['value']
</snippet></ROW><ROW><id>17284323</id><snippet>apple</snippet></ROW><ROW><id>17284323</id><snippet>from collections import Counter
counter = Counter()

dup_list = ['apple','banana','cherry','banana','cherry','orange','cherry']
deduped = []
for name in dup_list:
    new = name + str(counter[name]) if counter[name] else name
    counter.update({name: 1})
    deduped.append(new)
</snippet></ROW><ROW><id>17284391</id><snippet>__cmp__</snippet></ROW><ROW><id>17284391</id><snippet>__gt__</snippet></ROW><ROW><id>17284432</id><snippet>all</snippet></ROW><ROW><id>17284432</id><snippet>&gt;&gt;&gt; lis1 =  ['a', 'b', 'c'] 
&gt;&gt;&gt; lis2 =  ['c','d','e','f','g','h']
&gt;&gt;&gt; all(x in lis2 for x in lis1)
False
</snippet></ROW><ROW><id>17284432</id><snippet>lis2</snippet></ROW><ROW><id>17284432</id><snippet>set</snippet></ROW><ROW><id>17284432</id><snippet>O(1)</snippet></ROW><ROW><id>17284432</id><snippet>&gt;&gt;&gt; se = set(lis2)
&gt;&gt;&gt; all(x in se for x in lis1)
False
</snippet></ROW><ROW><id>17284459</id><snippet>nmap</snippet></ROW><ROW><id>17284459</id><snippet>sudo apt-get install nmap</snippet></ROW><ROW><id>17284461</id><snippet>In [11]: df[2].str.contains('Dollar')
Out[11]:
0     True
1    False
2    False
3     True
4     True
5     True
6     True
Name: 2, dtype: bool

In [12]: df[3].str.startswith('(')
Out[12]:
0     True
1    False
2    False
3     True
4     True
5     True
6     True
Name: 3, dtype: bool
</snippet></ROW><ROW><id>17284461</id><snippet>In [13]: df[df[3].str.startswith('(')]
Out[13]:
    0             1        2         3        4       5            6   7
0  24  DRFT.146.856  Dollar-    (60.00)  DEBITS-   0.00  CREDITSDRA-   0
3  27  DRFT.146.867  Dollar-   (200.00)  DEBITS-   0.00  CREDITSDRA-   0
4  28  DRFT.146.922  Dollar-    (25.00)  DEBITS-   0.00  CREDITSDRA-   0
5  29  DRFT.146.963  Dollar-   (100.00)  DEBITS-   0.00  CREDITSDRA-   0
6  30  DRFT.146.964  Dollar-   (100.00)  DEBITS-   0.00  CREDITSDRA-   0
</snippet></ROW><ROW><id>17284477</id><snippet>classmethod</snippet></ROW><ROW><id>17284477</id><snippet>class point(object):
    @classmethod
    def from_coordinates(cls, x, y):
        pt = cls()
        pt.x, pt.y = x, y
        return pt
</snippet></ROW><ROW><id>17284477</id><snippet>__init__</snippet></ROW><ROW><id>17284477</id><snippet>classmethod</snippet></ROW><ROW><id>17284567</id><snippet>Integer</snippet></ROW><ROW><id>17284567</id><snippet>Tag</snippet></ROW><ROW><id>17284567</id><snippet>String</snippet></ROW><ROW><id>17284567</id><snippet>create_product</snippet></ROW><ROW><id>17284567</id><snippet>def create_product(title, description, image, link, price, expiration, tags):
    image = imagefolder + image
    tag_list = []
    for tag in tags:
        tagcheck = Tag.query.filter_by(name=tag).first()
        if tagcheck is None:
            tag_list.append(Tag(tag))
        else:
            tag_list.append(tagcheck)
    product = Product(title, description, image, link, price, datetime.utcnow(), expiration, tag_list)
    return product
</snippet></ROW><ROW><id>17284567</id><snippet>__init___</snippet></ROW><ROW><id>17284567</id><snippet>class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(128))
    description = db.Column(db.Text)
    image = db.Column(db.String(64))
    link = db.Column(db.String(256))
    price = db.Column(db.Float())
    timestamp = db.Column(db.DateTime)
    expiration = db.Column(db.String(6))
    tags = db.relationship('Tag', secondary=product_tags,
            backref=db.backref('products', lazy='dynamic'))

    def __init__(self, title, description, image, link, price, timestamp, expiration, tags):
        self.title = title
        self.description = description
        self.image = image
        self.link = link
        self.price = price
        self.timestamp = timestamp
        self.expiration = expiration

        for tag in tags:
            tagcheck = Tag.query.filter_by(name=tag).first()
            if tagcheck is None:
                self.tags.append(Tag(tag))
            else:
                self.tags.append(tagcheck)

    def __repr__(self):
        return '&lt;{}, {}&gt;'.format(self.title, ":".join([x.name for x in self.tags]))
</snippet></ROW><ROW><id>17284567</id><snippet>ta = Tag('cat')
tb = Tag('dog')
db.session.add_all([ta, tb])
db.session.commit()

&gt;&gt;&gt; Tag.query.all()
[&lt;Tag u'cat'&gt;, &lt;Tag u'dog'&gt;]
</snippet></ROW><ROW><id>17284567</id><snippet>p = Product(
    'title',
    'description',
    'image',
    'link',
    0.0,
    datetime.now(),
    'expiry',
    ['dog','cat','horse']
)
db.session.add(p)
db.session.commit()
</snippet></ROW><ROW><id>17284567</id><snippet>&gt;&gt;&gt; Tag.query.all()
[&lt;Tag u'cat'&gt;, &lt;Tag u'dog'&gt;, &lt;Tag u'horse'&gt;]
</snippet></ROW><ROW><id>17284567</id><snippet>&gt;&gt;&gt; tag = Tag.query.get('dog')
&gt;&gt;&gt; products = tag.products
&gt;&gt;&gt; [x.title for x in products]
['title','other','examples']
</snippet></ROW><ROW><id>17284605</id><snippet>user == "paper" or "Paper"
</snippet></ROW><ROW><id>17284605</id><snippet>or</snippet></ROW><ROW><id>17284605</id><snippet>or</snippet></ROW><ROW><id>17284605</id><snippet>user == "paper"</snippet></ROW><ROW><id>17284605</id><snippet>True or x</snippet></ROW><ROW><id>17284605</id><snippet>x</snippet></ROW><ROW><id>17284605</id><snippet>"Paper"</snippet></ROW><ROW><id>17284605</id><snippet>user == "paper" or user == "Paper"
</snippet></ROW><ROW><id>17284605</id><snippet>user in ("paper", "Paper")
</snippet></ROW><ROW><id>17284605</id><snippet>user.lower() == "paper"
</snippet></ROW><ROW><id>17284654</id><snippet>from sqlalchemy import text

class Test(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    created = db.Column(db.DateTime, server_default=text('now()'))
</snippet></ROW><ROW><id>17284654</id><snippet>CREATE TABLE test (
    id SERIAL NOT NULL, 
    created TIMESTAMP WITHOUT TIME ZONE DEFAULT now(), 
    PRIMARY KEY (id)
)
</snippet></ROW><ROW><id>17284929</id><snippet>distutils</snippet></ROW><ROW><id>17284929</id><snippet>cx_Freeze</snippet></ROW><ROW><id>17284929</id><snippet>zc.buildout</snippet></ROW><ROW><id>17284929</id><snippet>cx_Freeze</snippet></ROW><ROW><id>17284929</id><snippet>py2exe</snippet></ROW><ROW><id>17284929</id><snippet>cx_freeze</snippet></ROW><ROW><id>17284929</id><snippet>package_data</snippet></ROW><ROW><id>17284929</id><snippet>data_files</snippet></ROW><ROW><id>17284929</id><snippet>data_files</snippet></ROW><ROW><id>17284929</id><snippet>distutils</snippet></ROW><ROW><id>17284929</id><snippet>distutils</snippet></ROW><ROW><id>17284929</id><snippet>DISTUTILS_DEBUG</snippet></ROW><ROW><id>17284929</id><snippet>"True"</snippet></ROW><ROW><id>17284968</id><snippet>'%Y-%m-%d %H:%M:%S'
</snippet></ROW><ROW><id>17284968</id><snippet>.00</snippet></ROW><ROW><id>17284968</id><snippet>try</snippet></ROW><ROW><id>17284968</id><snippet>try:
    dt = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S.%f')
except ValueError:
    dt = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>17285014</id><snippet>re.findall(r'(.*?)\[.*?\]', example_str)
</snippet></ROW><ROW><id>17285014</id><snippet>(s.split(']')[-1] for s in example_str.split('['))
</snippet></ROW><ROW><id>17285014</id><snippet>re.findall(r"(.*?)\[.*\]+", example_str)
</snippet></ROW><ROW><id>17285014</id><snippet>+</snippet></ROW><ROW><id>17285014</id><snippet>'abc [def][ghi] jkl[mno]'</snippet></ROW><ROW><id>17285014</id><snippet>['abc ', '', ' jkl']</snippet></ROW><ROW><id>17285014</id><snippet>['abc ', ' jkl']</snippet></ROW><ROW><id>17285014</id><snippet>+</snippet></ROW><ROW><id>17285014</id><snippet>r'(.*?)(?:\[.*?\])+</snippet></ROW><ROW><id>17285014</id><snippet>split</snippet></ROW><ROW><id>17285014</id><snippet>re.split</snippet></ROW><ROW><id>17285014</id><snippet>re.findall</snippet></ROW><ROW><id>17285014</id><snippet>\[.*?\]</snippet></ROW><ROW><id>17285014</id><snippet>$</snippet></ROW><ROW><id>17285014</id><snippet>re.findall(r"(.*?)(?:\[.*?\]|$)", example_str)
</snippet></ROW><ROW><id>17285287</id><snippet>file.readlines()</snippet></ROW><ROW><id>17285287</id><snippet>split</snippet></ROW><ROW><id>17285287</id><snippet>lines = inf.readlines()
</snippet></ROW><ROW><id>17285287</id><snippet>str.split</snippet></ROW><ROW><id>17285287</id><snippet>lines</snippet></ROW><ROW><id>17285287</id><snippet>str.split</snippet></ROW><ROW><id>17285287</id><snippet>ampdu = [x.split() for x in lines] # Applies `str.split` to each item of lines.
                                   # This create a new list, a list of lists
                                   # as `str.split` returns a list itself.    
</snippet></ROW><ROW><id>17285287</id><snippet>for line in lines:
    ampdu = line.split()
    #now do something with `ampdu`
</snippet></ROW><ROW><id>17285363</id><snippet>"to be or not to be"
</snippet></ROW><ROW><id>17285363</id><snippet>whoosh.fields.TEXT</snippet></ROW><ROW><id>17285592</id><snippet>from collections import Counter
c = Counter(y for _, y in item_labels)
item_labels.sort(key=lambda t : c[t[1]])
</snippet></ROW><ROW><id>17285592</id><snippet>Counter</snippet></ROW><ROW><id>17285592</id><snippet>defaultdict</snippet></ROW><ROW><id>17285592</id><snippet>from collections import defaultdict
def Counter(x):
    d = defaultdict(int)
    for v in x: d[v]+=1
    return d
</snippet></ROW><ROW><id>17285592</id><snippet>def Counter(x):
    lst = list(x)
    d = [0] * (max(lst)+1)
    for v in lst: d[v]+=1
    return d
</snippet></ROW><ROW><id>17285592</id><snippet>item_labels.sort(key=lambda t : len([x[1] for x in item_labels if x[1]==t[1] ]))
</snippet></ROW><ROW><id>17285592</id><snippet>g</snippet></ROW><ROW><id>17285906</id><snippet>resp.data</snippet></ROW><ROW><id>17285906</id><snippet>resp.release_conn()</snippet></ROW><ROW><id>17285906</id><snippet>resp.read(amt)</snippet></ROW><ROW><id>17285906</id><snippet>resp.release_conn()</snippet></ROW><ROW><id>17285906</id><snippet>import urllib3
http = urllib3.PoolManager()
r = http.request('GET', url)

with open(path, 'wb') as out:
    while True:
        data = r.read(chunk_size)
        if data is None:
            break
        out.write(data)

r.release_conn()
</snippet></ROW><ROW><id>17286079</id><snippet>ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'
</snippet></ROW><ROW><id>17286079</id><snippet>print cmd_string</snippet></ROW><ROW><id>17286079</id><snippet>ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*//p' | sed 's/^[    ]*//;s/[    ]*$//'
</snippet></ROW><ROW><id>17286079</id><snippet>\1</snippet></ROW><ROW><id>17286079</id><snippet>\t</snippet></ROW><ROW><id>17286079</id><snippet>repr</snippet></ROW><ROW><id>17286079</id><snippet>print repr(cmd_string)</snippet></ROW><ROW><id>17286079</id><snippet>"ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\\.){3}[0-9]{1,3}).*/\x01/p' | sed 's/^[ \t]*//;s/[ \t]*$//'"
</snippet></ROW><ROW><id>17286079</id><snippet>\x01</snippet></ROW><ROW><id>17286079</id><snippet>cmd_string = r"ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'"
</snippet></ROW><ROW><id>17286079</id><snippet>ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'
</snippet></ROW><ROW><id>17286159</id><snippet>re</snippet></ROW><ROW><id>17286159</id><snippet>import re
from itertools import chain

some_list = ['MIA', 'BOS', '08:17 AM', '-107', '-103', '08:17 AM', '+1 -111', '-1 +103', u'91', u'93']
print list(chain.from_iterable(re.split('(?&lt;=\d)\s(?=[-+]\d\d\d)', s) for s in some_list))
# ['MIA', 'BOS', '08:17 AM', '-107', '-103', '08:17 AM', '+1', '-111', '-1', '+103', u'91', u'93']
</snippet></ROW><ROW><id>17286169</id><snippet>sample_weight</snippet></ROW><ROW><id>17286169</id><snippet>fit</snippet></ROW><ROW><id>17286169</id><snippet>n_samples</snippet></ROW><ROW><id>17286169</id><snippet>y</snippet></ROW><ROW><id>17286169</id><snippet>esimator.fit(X, y, sample_weight=some_array)
</snippet></ROW><ROW><id>17286287</id><snippet>prescription</snippet></ROW><ROW><id>17286287</id><snippet>prescription2</snippet></ROW><ROW><id>17286287</id><snippet>prescriptions = {}
prescriptions2 = {}

#Open ABCD table and create a dictionary mapping A,B,C to D
with open(table_file) as table:
    reader = csv.reader(table, delimiter = '\t')
    for row in reader:
        code = (row[0], row[1], row[2])
        prescriptions[code]=row[3]
        key = (row[0],row[1])
        if not key in prescription2:
            prescription2[key] = []
        value = (row[2],row[3])
        prescription2[key].append(value)

for x in objects:
    x_code = (x.A, x.B)
    if x_code in prescription2:
        for item in prescription2[x_code]:
            line = ",".join(x_code+item)+"\n"
            output.write(line)
</snippet></ROW><ROW><id>17286387</id><snippet>ampdu</snippet></ROW><ROW><id>17286387</id><snippet>join</snippet></ROW><ROW><id>17286387</id><snippet>for columns in ampdu:
</snippet></ROW><ROW><id>17286387</id><snippet>ckey = (columns[0], columns[1])
</snippet></ROW><ROW><id>17286486</id><snippet>from collections import defaultdict
d1, d2 = defaultdict(list) , defaultdict(list)
for pxa in marker_array:
    d1[pxa[1]].extend(pxa[:1])
    d2[pxa[1]].extend(pxa[2:])

res = [[' '.join(d1[x]), x, ' '.join(d2[x])] for x in sorted(d1)]
</snippet></ROW><ROW><id>17286486</id><snippet>for p in res:
    if not p[-1]:
        p.pop()
</snippet></ROW><ROW><id>17286490</id><snippet>import time
# target rate: 100 ops / 1 second
target = 100.0
round_time = 1.0
# at first, assume the writes are immediate
sleepTime = round_time/target

ops = 0
t_start = time.time()

while True:
    #doYourIOoperationHere()
    ops += 1
    time.sleep(sleepTime)

    # adjust sleep time periodically
    if ops == target:
        t_end = time.time()
        elapsed = t_end - t_start
        difference = round_time - elapsed
        # print out the vars here to debug adjustment
        print "%d ops done, elapsed %.3f, difference %.3f" % (ops, elapsed, difference)
        # increase or decrease the sleep time, approach the target time slowly
        sleepTime += difference/target/2
        t_start = time.time()
        ops = 0
</snippet></ROW><ROW><id>17286583</id><snippet>ws.Range(ws.Cells(1,1),ws.Cells(8+rows,total_length)).CopyPicture()    
wb = excel.Workbooks.Add()
ws = wb.ActiveSheet
ws.Paste()
ws.Shapes('Picture 1').Copy()
img = ImageGrab.grabclipboard()
imgFile = os.path.join(r'C:\Windows\Temp\WS_Template_Images','test.png')
img.save(imgFile)
</snippet></ROW><ROW><id>17286690</id><snippet>split</snippet></ROW><ROW><id>17286690</id><snippet>&gt;&gt;&gt; testString.split(' ', 1)[1]
'quick brown fox jumps over the lazy dog!'
</snippet></ROW><ROW><id>17286690</id><snippet>" ".join(testTokens.split(' ')[1:])</snippet></ROW><ROW><id>17286690</id><snippet>.split(' ', 1)[1]</snippet></ROW><ROW><id>17286690</id><snippet>partition</snippet></ROW><ROW><id>17286690</id><snippet>rsplit</snippet></ROW><ROW><id>17286690</id><snippet>&gt;&gt;&gt; testString.rsplit(' ', 6)[0]
'The quick brown'
</snippet></ROW><ROW><id>17286690</id><snippet>" ".join(testTokens.split(' ')[:3])</snippet></ROW><ROW><id>17286711</id><snippet>int(variable)</snippet></ROW><ROW><id>17286711</id><snippet>total = int(rent) + int(utilities)
</snippet></ROW><ROW><id>17286849</id><snippet>if isinstance(value,list):
    for v in value:
        parent = find_parent(search_term,v,key)
        if parent is not None: return parent
</snippet></ROW><ROW><id>17286849</id><snippet>return</snippet></ROW><ROW><id>17286849</id><snippet>return</snippet></ROW><ROW><id>17286849</id><snippet>&gt;&gt;&gt; def find_parent(search_term,collection,parent=None):
...   if isinstance(collection,dict):
...     for key,value in collection.iteritems():
...       if key.lower() == search_term.lower():
...         print "the parent of %s is %s" % (key,parent)
...         return parent
...       if isinstance(value,list):
...         for v in value:
...           parent = find_parent(search_term,v,key)
...           if parent is not None: return parent
... 
&gt;&gt;&gt; my_child = "two"
&gt;&gt;&gt; tree = { u'one' : [ { u'two' : [ { u'three' : [] }, { u'four' : [] } ] }, { u'five' : [ { u'six' : [] } ] } ] }
&gt;&gt;&gt; find_parent(my_child,tree)
the parent of two is one
u'one'
</snippet></ROW><ROW><id>17286886</id><snippet>wget http://prdownloads.sourceforge.net/swig/swig-2.0.8.tar.gz
tar -xf swig-2.0.8.tar.gz 
cd swig-2.0.8
./configure --prefix=$HOME
make
make install
</snippet></ROW><ROW><id>17286886</id><snippet>svn checkout http://svn.osafoundation.org/m2crypto/tags/0.21/ m2crypto-0.21
cd m2crypto-0.21/
</snippet></ROW><ROW><id>17286886</id><snippet>SWIG_FEATURES=-cpperraswarn python setup.py $*
</snippet></ROW><ROW><id>17286886</id><snippet>SWIG_FEATURES=-cpperraswarn python2.7 setup.py $*
</snippet></ROW><ROW><id>17286886</id><snippet>./fedora_setup.sh build
./fedora_setup.sh install --prefix=$HOME

[me@web342 lib]$ python2.7
Python 2.7.5 (default, May 16 2013, 20:16:09) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import M2Crypto
&gt;&gt;&gt; print M2Crypto
&lt;module 'M2Crypto' from '/home/me/lib/python2.7/site-packages/M2Crypto-0.21-py2.7-linux-x86_64.egg/M2Crypto/__init__.pyc'&gt;
</snippet></ROW><ROW><id>17286902</id><snippet>__init__</snippet></ROW><ROW><id>17286902</id><snippet>__init__</snippet></ROW><ROW><id>17286902</id><snippet>class AorB: pass

class A(AorB):
    def __init__(self,par):
        self.par=par

class B(AorB):
    def __init__(self):
        pass

def AorB(par):
    return A(par) if par else B()
</snippet></ROW><ROW><id>17286902</id><snippet>AorB</snippet></ROW><ROW><id>17286902</id><snippet>A()</snippet></ROW><ROW><id>17286902</id><snippet>B()</snippet></ROW><ROW><id>17286902</id><snippet>__new__</snippet></ROW><ROW><id>17286902</id><snippet>class AorB:
    def __new__(cls, par=None):
        if cls is not AorB: return super().__new__(cls)
        return super().__new__(A) if par else super().__new__(B)

class A(AorB):
    def __init__(self, par):
        self.par = par

class B(AorB):
    def __init__(self, par=None):
        pass
</snippet></ROW><ROW><id>17286902</id><snippet>__new__</snippet></ROW><ROW><id>17286902</id><snippet>super().__new__</snippet></ROW><ROW><id>17286902</id><snippet>par</snippet></ROW><ROW><id>17286902</id><snippet>A</snippet></ROW><ROW><id>17286902</id><snippet>B</snippet></ROW><ROW><id>17286902</id><snippet>par</snippet></ROW><ROW><id>17286902</id><snippet>if cls is not AorB</snippet></ROW><ROW><id>17286902</id><snippet>A()</snippet></ROW><ROW><id>17286902</id><snippet>B()</snippet></ROW><ROW><id>17286902</id><snippet>AorB</snippet></ROW><ROW><id>17286907</id><snippet>CREATE TABLE UserNames (`username` varchar(35) unique, `duplicates` int);

INSERT INTO UserNames (`username`, `duplicates`)
 VALUES ('stackoverflow.com', 0);

INSERT INTO UserNames (`username`, `duplicates`)
 VALUES ('dba.stackexchange.com/', 0)
 ON DUPLICATE KEY UPDATE `duplicates` = `duplicates`+1;

INSERT INTO UserNames (`username`, `duplicates`)
 VALUES ('stackoverflow.com', 0)
 ON DUPLICATE KEY UPDATE `duplicates` = `duplicates`+1;
</snippet></ROW><ROW><id>17286907</id><snippet>username</snippet></ROW><ROW><id>17286907</id><snippet>INSERT</snippet></ROW><ROW><id>17286907</id><snippet>ON DUPLICATE KEY UPDATE `duplicates` = `duplicates`+1
</snippet></ROW><ROW><id>17286907</id><snippet>duplicates</snippet></ROW><ROW><id>17286907</id><snippet>stackoverflow.com</snippet></ROW><ROW><id>17286907</id><snippet>duplicates</snippet></ROW><ROW><id>17286907</id><snippet>dba.stackexchange.com</snippet></ROW><ROW><id>17286907</id><snippet>duplicates</snippet></ROW><ROW><id>17286934</id><snippet>class AppToolbar(wx.ToolBar, metaclass=abc.ABCMeta):
     # ... as above, but with the following added
     @abc.abstractmethod
     def _PopulateToolbar():
         pass
</snippet></ROW><ROW><id>17286934</id><snippet>class AppToolbar(wx.ToolBar):
     def _PopulateToolbar():
         ''' This is an abstract method; subclasses must override it. '''

         raise NotImplementedError('Abstract method "_PopulateToolbar" must be overridden before it can be called.')
</snippet></ROW><ROW><id>17287046</id><snippet>In [13]: df[df &gt; df.quantile(0.8)].dropna()
Out[13]: 
       data
c  0.860467
j  1.887577

In [14]: list(df[df &gt; df.quantile(0.8)].dropna().index)
Out[14]: ['c', 'j']
</snippet></ROW><ROW><id>17287202</id><snippet>min(max(x,lo),hi)
</snippet></ROW><ROW><id>17287202</id><snippet>max</snippet></ROW><ROW><id>17287202</id><snippet>min</snippet></ROW><ROW><id>17287321</id><snippet>int **zip(int *arr1, int *arr2, int length)
{
    int **ret = new int*[length];
    for(int i = 0; i&lt;length; i++)
    {
        ret[i] = new int[2];
        ret[i][0] = arr1[i];
        ret[i][1] = arr2[i];
    }
    return ret;
}
</snippet></ROW><ROW><id>17287327</id><snippet>changecheck</snippet></ROW><ROW><id>17287327</id><snippet>set</snippet></ROW><ROW><id>17287327</id><snippet>changelist = {'355199','352470','346917','350882','348521'}

with open('input') as fin, open('output', 'w') as fout:
    lines = (line.split() for line in fin)
    valid = (' '.join(line) + '\n' for line in lines if all(el in changelist for el in line))
    fout.writelines(valid)
</snippet></ROW><ROW><id>17287425</id><snippet>modelo = request.POST[modelo]
</snippet></ROW><ROW><id>17287425</id><snippet>modelo</snippet></ROW><ROW><id>17287425</id><snippet>modelo = request.POST['modelo']
</snippet></ROW><ROW><id>17287671</id><snippet>mean</snippet></ROW><ROW><id>17287671</id><snippet>vitaminA, calcium, vitaminD = mean()
print vitaminA
print calcium
print vitaminD
</snippet></ROW><ROW><id>17287671</id><snippet>x, y, z = (1, 2, 3)
print "x: {x}, y: {y}, z: {z}".format(**locals())
</snippet></ROW><ROW><id>17287671</id><snippet>def generator_func():
    yield "Even"
    yield "generators"
    yield "participate"

w1, w2, w3 = generator_func()
print w1
print w2
print w3
# Even
# generators
# participate
</snippet></ROW><ROW><id>17287671</id><snippet>head, *tail = range(1, 11)
print head  # 1
print tail  # [2, 3, 4, 5, 6, 7, 8, 9, 10]
</snippet></ROW><ROW><id>17287842</id><snippet>null</snippet></ROW><ROW><id>17287842</id><snippet>Room.objects.filter(surface_area__isnull=True)
</snippet></ROW><ROW><id>17287842</id><snippet>lte</snippet></ROW><ROW><id>17287842</id><snippet>from django.db.models import Q
Room.objects.filter( Q(surface_area__lte=40) | Q(surface_area__isnull=True) )
</snippet></ROW><ROW><id>17288205</id><snippet>NaN</snippet></ROW><ROW><id>17288205</id><snippet>DataFrame</snippet></ROW><ROW><id>17288205</id><snippet>In [55]: df = pd.DataFrame({'A': ['loc_a'] * 12 + ['loc_b'],
   ....:                    'B': ['group_a'] * 7 + ['group_b'] * 3 + ['group_c'] * 2 + ['group_a'],
   ....:                    'Date': ["2013-06-11",
   ....:                            "2013-07-02",
   ....:                            "2013-07-09",
   ....:                            "2013-07-30",
   ....:                            "2013-08-06",
   ....:                            "2013-09-03",
   ....:                            "2013-10-01",
   ....:                            "2013-07-09",
   ....:                            "2013-08-06",
   ....:                            "2013-09-03",
   ....:                            "2013-07-09",
   ....:                            "2013-09-03",
   ....:                            "2013-10-01"],
   ....:                     'Value': [22, 35, 14,  9,  4, 40, 18, 4, 2, 5, 1, 2, 3]})

In [56]: 

In [56]: df.Date = pd.to_datetime(df.Date)

In [57]: df = df.set_index(['A', 'B', 'Date'])

In [58]: 

In [58]: print(df)
                          Value
A     B       Date             
loc_a group_a 2013-06-11     22
              2013-07-02     35
              2013-07-09     14
              2013-07-30      9
              2013-08-06      4
              2013-09-03     40
              2013-10-01     18
      group_b 2013-07-09      4
              2013-08-06      2
              2013-09-03      5
      group_c 2013-07-09      1
              2013-09-03      2
loc_b group_a 2013-10-01      3
</snippet></ROW><ROW><id>17288205</id><snippet>unstack</snippet></ROW><ROW><id>17288205</id><snippet>stack</snippet></ROW><ROW><id>17288205</id><snippet>NaN</snippet></ROW><ROW><id>17288205</id><snippet>In [71]: df.unstack(['A', 'B'])
Out[71]: 
              Value                           
A             loc_a                      loc_b
B           group_a  group_b  group_c  group_a
Date                                          
2013-06-11       22      NaN      NaN      NaN
2013-07-02       35      NaN      NaN      NaN
2013-07-09       14        4        1      NaN
2013-07-30        9      NaN      NaN      NaN
2013-08-06        4        2      NaN      NaN
2013-09-03       40        5        2      NaN
2013-10-01       18      NaN      NaN        3


In [59]: df.unstack(['A', 'B']).fillna(0).stack(['A', 'B'])
Out[59]: 
                          Value
Date       A     B             
2013-06-11 loc_a group_a     22
                 group_b      0
                 group_c      0
           loc_b group_a      0
2013-07-02 loc_a group_a     35
                 group_b      0
                 group_c      0
           loc_b group_a      0
2013-07-09 loc_a group_a     14
                 group_b      4
                 group_c      1
           loc_b group_a      0
2013-07-30 loc_a group_a      9
                 group_b      0
                 group_c      0
           loc_b group_a      0
2013-08-06 loc_a group_a      4
                 group_b      2
                 group_c      0
           loc_b group_a      0
2013-09-03 loc_a group_a     40
                 group_b      5
                 group_c      2
           loc_b group_a      0
2013-10-01 loc_a group_a     18
                 group_b      0
                 group_c      0
           loc_b group_a      3
</snippet></ROW><ROW><id>17288205</id><snippet>fillna(0)</snippet></ROW><ROW><id>17288205</id><snippet>NaN</snippet></ROW><ROW><id>17288205</id><snippet>stack</snippet></ROW><ROW><id>17288205</id><snippet>dropna</snippet></ROW><ROW><id>17288205</id><snippet>NaN</snippet></ROW><ROW><id>17288306</id><snippet>fishermanA = ['George', 'Tom', 'Joel', 'Tom', 'Lance']
fishermanB = ['George', 'Tom', 'Tom']
a_set = set(fishermanA)
b_set = set(fishermanB)
inter = a_set.intersection(b_set)
for i in inter:
    print(i, fishermanA.count(i) + fishermanB.count(i))


Output:
('George', 2)
('Tom', 4)
</snippet></ROW><ROW><id>17288334</id><snippet>superVar = {'subVar1': 'a', 'subVar2': 'b'}
superVar['subVar1']
# 'a'
superVar['subVar2']
# 'b'
</snippet></ROW><ROW><id>17288334</id><snippet>class Foo(object):
    def __init__(self, a, b):
        self.superVar = {'subVar1' : a, 'subVar2' : b}


bar = Foo('one', 'two')
bar.superVar.values()
# ['one', 'two']
</snippet></ROW><ROW><id>17288511</id><snippet>import os
import random

def synthesizeFrameAndCreateMovie(folder):

  # Create an empty movie to receive the frames
  movie = makeMovie()

  # Compute &amp; save the frames
  w = 40
  h = 25
  nb_frames = 60       # Will give 60 frames at 30 fps =&gt; movie duration : 2 sec.
  for z in range(0, nb_frames):
    pic=makeEmptyPicture(w, h)
    for x in range (0, w):
      for y in range (0, h):
        #makeColor() takes red, green, and blue (in that order) between 0 and 255
        r = random.randint(0, 255)
        g = random.randint(0, 255)
        b = random.randint(0, 255)
        color = makeColor(r,g,b)
        px = getPixel(pic, x, y)
        setColor(px, color)

    # Create one frame and inject in the movie object
    filename = os.path.join(folder, 'pic%03d.png' % z)
    writePictureTo(pic, filename)
    addFrameToMovie(filename, movie)

  # return the movie
  return movie

movie = synthesizeFrameAndCreateMovie("D:\\FOLDER")
print movie
#writeQuicktime(movie,"D:\\FOLDER\\movie.mov", 30)
playMovie(movie)
</snippet></ROW><ROW><id>17288511</id><snippet>import os
import random

# Draw point, with check if the point is in the image area
def drawPoint(pic, col, x, y):
   if (x &gt;= 0) and (x &lt; getWidth(pic)) and (y &gt;= 0) and (y &lt; getHeight(pic)):
     px = getPixel(pic, x, y)
     setColor(px, col)


# Draw line segment, given two points
# From Bresenham's line algorithm
# http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
def drawLine(pic, col, x0, y0, x1, y1):

   dx = abs(x1-x0)
   dy = abs(y1-y0) 
   sx = sy = 0

   #sx = 1 if x0 &lt; x1 else -1
   #sy = 1 if y0 &lt; y1 else -1

   if (x0 &lt; x1): 
     sx = 1 
   else: 
     sx = -1
   if (y0 &lt; y1):
     sy = 1 
   else: 
     sy = -1

   err = dx - dy

   while (True):

     drawPoint(pic, col, x0, y0)

     if (x0 == x1) and (y0 == y1): 
       break

     e2 = 2 * err
     if (e2 &gt; -dy):
       err = err - dy
       x0 = x0 + sx

     if (x0 == x1) and (y0 == y1):
       drawPoint(pic, col, x0, y0)
       break

     if (e2 &lt;  dx):
       err = err + dx
       y0 = y0 + sy 

# Draw infinite line from segment
def drawInfiniteLine(pic, col, x0, y0, x1, y1):
   # y = m * x + b
   m = (y0-y1) / (x0-x1)
   if (abs(m) &gt; 100.0):
     m = 100.0

   # y0 = m * x0 + b   =&gt;   b = y0 - m * x0
   b = y0 - m * x0

   x0 = 0
   y0 = int(m*x0 + b)
   # get a 2nd point far away from the 1st one
   x1 = getWidth(pic) 
   y1 = int(m*x1 + b)

   drawLine(pic, col, x0, y0, x1, y1)

# Draw infinite line from origin point and angle
# Angle 'theta' expressed in degres
def drawInfiniteLineA(pic, col, x, y, theta):

   # y = m * x + b
   dx = y * tan(theta * pi / 180.0)  # (need radians)
   dy = y

   if (dx == 0):
     dx += 0.000000001 # Avoid to divide by zero 

   m = dy / dx

   # y = m * x + b   =&gt;   b = y - m * x
   b = y - m * x

   # get a 2nd point far away from the 1st one
   x1 = 2 * getWidth(pic)
   y1 = m*x1 + b

   drawInfiniteLine(pic, col, x, y, x1, y1)


def synthesizeFrameAndCreateMovie(folder):

  # Create an empty movie to receive the frames
  movie = makeMovie()

  # Compute &amp; save the frames
  w = 40
  h = 25
  nb_frames = 120       # Will give 120 frames at 30 fps =&gt; movie duration : 4 sec.
  for z in range(0, nb_frames):
    pic = makeEmptyPicture(w, h)
    addRectFilled(pic, 0, 0, w-1, h-1)
    #makeColor() takes red, green, and blue (in that order) between 0 and 255
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    col = makeColor(r,g,b)
    theta = z * 360 / nb_frames
    if (theta != 180.0) and (theta != 0.0):
      drawInfiniteLineA(pic, col, w//2, h//2, theta)

    # Create one frame and inject in the movie object
    filename = os.path.join(folder, 'pic%03d.png' % z)
    writePictureTo(pic, filename)
    addFrameToMovie(filename, movie)

  # return the movie
  return movie

movie = synthesizeFrameAndCreateMovie("/home/FOLDER")
print movie
#writeQuicktime(movie,"/home/golgauth/Desktop/FOLDER/movie.mov", 30)
#writeAVI(movie,"/home/golgauth/Desktop/FOLDER/movie.avi")
playMovie(movie)
</snippet></ROW><ROW><id>17288517</id><snippet>random.choice()</snippet></ROW><ROW><id>17288517</id><snippet>&gt;&gt;&gt; random.choice([1, 2, 3])
2
&gt;&gt;&gt; random.choice([1, 2, 3])
1
&gt;&gt;&gt; random.choice([1, 2, 3])
2
&gt;&gt;&gt; random.choice([1, 2, 3])
3
</snippet></ROW><ROW><id>17288644</id><snippet>and</snippet></ROW><ROW><id>17288644</id><snippet>or</snippet></ROW><ROW><id>17288644</id><snippet>or</snippet></ROW><ROW><id>17288644</id><snippet>Python 2.7.3 (default, Jan  2 2013, 13:56:14)
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 2 or 3
2
&gt;&gt;&gt; 0 or 3
3
</snippet></ROW><ROW><id>17288644</id><snippet>&gt;&gt;&gt; 2 and 3
3
&gt;&gt;&gt; 0 and 3
0
&gt;&gt;&gt; 3 and 0
0
&gt;&gt;&gt; 3 and []
[]
&gt;&gt;&gt; 0 and []
0
</snippet></ROW><ROW><id>17288644</id><snippet>password and PASS_RE.match(password)</snippet></ROW><ROW><id>17288644</id><snippet>password</snippet></ROW><ROW><id>17288644</id><snippet>and</snippet></ROW><ROW><id>17288644</id><snippet>PASS_RE.match(None)</snippet></ROW><ROW><id>17288644</id><snippet>&gt;&gt;&gt; 3 or []
3
&gt;&gt;&gt; [] or 3
3
&gt;&gt;&gt; 0 or []
[]
&gt;&gt;&gt; [] or 0
0
&gt;&gt;&gt; 0 and []
0
&gt;&gt;&gt; [] and 0
[]
</snippet></ROW><ROW><id>17288644</id><snippet>&gt;&gt;&gt; value = "hello"
&gt;&gt;&gt; print (value.upper())
HELLO
&gt;&gt;&gt; print (value and value.upper())
HELLO
&gt;&gt;&gt; value = None
&gt;&gt;&gt; print (value.upper())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'upper'
&gt;&gt;&gt; print (value and value.upper())
None
</snippet></ROW><ROW><id>17288644</id><snippet>and</snippet></ROW><ROW><id>17288817</id><snippet>itertools</snippet></ROW><ROW><id>17288817</id><snippet>islice()</snippet></ROW><ROW><id>17288817</id><snippet>&gt;&gt;&gt; s = "abcdefghijklmnopqrstuvwxyz"
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for val in itertools.islice(s, 0, None, 8):
...   print val
...
a
i
q
y
&gt;&gt;&gt; for val in itertools.islice(s, 1, None, 8):
...   print val
...
b
j
r
z
&gt;&gt;&gt; for val in itertools.islice(s, 2, None, 8):
...   print val
...
c
k
s
</snippet></ROW><ROW><id>17288817</id><snippet>import itertools
a = [item for item in itertools.islice(e, 0, None, 8)]
b = [item for item in itertools.islice(e, 1, None, 8)]
c = [item for item in itertools.islice(e, 2, None, 8)]
</snippet></ROW><ROW><id>17288817</id><snippet>columns = []
for n in range(8):
    columns.append([item for item in itertools.islice(e, n, None, 8)])
</snippet></ROW><ROW><id>17288817</id><snippet>itertools</snippet></ROW><ROW><id>17289075</id><snippet>0</snippet></ROW><ROW><id>17289075</id><snippet>1</snippet></ROW><ROW><id>17289075</id><snippet>marked = [0] * 2000000     # &lt;- just set up the list
value = 3                  # &lt;- starting at 3 then checking only odds
s = 2                      # &lt;- BUT include 2 since its the only even prime
while value &lt; 2000000:
    if marked[value] == 0: # &lt;- if number at index value is 0 it's prime
        s += value         #    so add value to s (the sum)
        i = value          # &lt;- now mark off future numbers that are multiples of
        while i &lt; 2000000: #    value up until 2mil
            marked[i] = 1  # &lt;- number @ index i is a multiple of value so mark
            i += value     # &lt;- increment value each time (looking for multiples)
    value += 2             # &lt;- only check every odd number
print s
</snippet></ROW><ROW><id>17289075</id><snippet>i</snippet></ROW><ROW><id>17289075</id><snippet>value*value</snippet></ROW><ROW><id>17289075</id><snippet>value**2</snippet></ROW><ROW><id>17289855</id><snippet>In [4]: %timeit all_data.groupby(all_data.index.time).mean()
1 loops, best of 3: 11.8 s per loop

In [5]: %timeit all_data.groupby(lambda x: x.time()).mean()
Exception RuntimeError: 'maximum recursion depth exceeded while calling a Python object' in &lt;type 'exceptions.RuntimeError'&gt; ignored
Exception RuntimeError: 'maximum recursion depth exceeded while calling a Python object' in &lt;type 'exceptions.RuntimeError'&gt; ignored
Exception RuntimeError: 'maximum recursion depth exceeded while calling a Python object' in &lt;type 'exceptions.RuntimeError'&gt; ignored
1 loops, best of 3: 11.8 s per loop
</snippet></ROW><ROW><id>17289855</id><snippet>In [1]: pd.version.version
Out[1]: '0.11.1.dev-06cd915'

In [5]: %timeit all_data.groupby(lambda x: x.time()).mean()
1 loops, best of 3: 215 ms per loop

In [6]: %timeit all_data.groupby(all_data.index.time).mean()
10 loops, best of 3: 113 ms per loop
'0.11.1.dev-06cd915'
</snippet></ROW><ROW><id>17290408</id><snippet>a</snippet></ROW><ROW><id>17290408</id><snippet>b</snippet></ROW><ROW><id>17290408</id><snippet>import os

def dup_structure(src, dst):
    os.makedirs(dst)
    for p, ds, fs in os.walk(src):
        for dn in ds:
            dp = os.path.relpath(os.path.join(p, dn), src)
            os.makedirs(os.path.join(dst, dp))
        #for fn in fs:
        #    fp = os.path.relpath(os.path.join(p, fn), src)
        #    with open(os.path.join(dst, fp), 'wb'): pass

dup_structure('a', 'b')
</snippet></ROW><ROW><id>17290408</id><snippet>b</snippet></ROW><ROW><id>17290506</id><snippet>for skill in keyskills.split(','):
  employerkeyskills.objects.create(emp=..., job=..., keyskills=skill)
</snippet></ROW><ROW><id>17290556</id><snippet>&gt;&gt;&gt; [(1, 2, 3)][0][0]
1
</snippet></ROW><ROW><id>17290556</id><snippet>list(itertools.combinations(...))</snippet></ROW><ROW><id>17290556</id><snippet>map()</snippet></ROW><ROW><id>17290556</id><snippet>map(str, [1, 2, 3])</snippet></ROW><ROW><id>17290556</id><snippet>[str(i) for i in [1, 2, 3]]
</snippet></ROW><ROW><id>17290556</id><snippet>[(0, 1)]</snippet></ROW><ROW><id>17290556</id><snippet>(0, 1)</snippet></ROW><ROW><id>17290556</id><snippet>[(0, 1)]</snippet></ROW><ROW><id>17290556</id><snippet>TypeError: unhashable type: 'list'</snippet></ROW><ROW><id>17290556</id><snippet>random</snippet></ROW><ROW><id>17290556</id><snippet>import random
{(0, 1) : random.randint(1,10)} # This is just an example, of course
</snippet></ROW><ROW><id>17290556</id><snippet>&gt;&gt;&gt; [list(itertools.combinations(range(x, i), i-x)) for x in range(0, items+1) for i in range(0, items+1) if (i-x) &gt; 0]
[[(0,)], [(0, 1)], [(0, 1, 2)], [(0, 1, 2, 3)], [(1,)], [(1, 2)], [(1, 2, 3)], [(2,)], [(2, 3)], [(3,)]]
</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; def f(seq):
...     pdb.set_trace()
... 
&gt;&gt;&gt; f([1,2,3])
--Return--
&gt; &lt;stdin&gt;(2)f()-&gt;None
(Pdb) [x for x in seq]
[1, 2, 3]
(Pdb) [x in seq for x in seq]
[True, True, True]
</snippet></ROW><ROW><id>17290645</id><snippet>NameError</snippet></ROW><ROW><id>17290645</id><snippet>seq</snippet></ROW><ROW><id>17290645</id><snippet>test</snippet></ROW><ROW><id>17290645</id><snippet>for</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; def test(): [x in seq for x in seq]
... 
&gt;&gt;&gt; dis.dis(test)
  1           0 BUILD_LIST               0
              3 LOAD_GLOBAL              0 (seq)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER                18 (to 28)
             10 STORE_FAST               0 (x)
             13 LOAD_FAST                0 (x)
             16 LOAD_GLOBAL              0 (seq)
             19 COMPARE_OP               6 (in)
             22 LIST_APPEND              2
             25 JUMP_ABSOLUTE            7
        &gt;&gt;   28 POP_TOP             
             29 LOAD_CONST               0 (None)
             32 RETURN_VALUE        
</snippet></ROW><ROW><id>17290645</id><snippet>FOR_ITER</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; def test(): [x in seq2 for x in seq]
... 
&gt;&gt;&gt; dis.dis(test)
  1           0 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0xb6fef160, file "&lt;stdin&gt;", line 1&gt;) 
              3 MAKE_FUNCTION            0 
              6 LOAD_GLOBAL              0 (seq) 
              9 GET_ITER             
             10 CALL_FUNCTION            1 
             13 POP_TOP              
             14 LOAD_CONST               0 (None) 
             17 RETURN_VALUE      
</snippet></ROW><ROW><id>17290645</id><snippet>FOR_ITER</snippet></ROW><ROW><id>17290645</id><snippet>MAKE_FUNCTION</snippet></ROW><ROW><id>17290645</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; test.__code__.co_consts[1]
&lt;code object &lt;listcomp&gt; at 0xb6fef160, file "&lt;stdin&gt;", line 1&gt;
&gt;&gt;&gt; test.__code__.co_consts[1].co_argcount   # it has one argument
1
&gt;&gt;&gt; test.__code__.co_consts[1].co_names      # global variables
('seq2',)
&gt;&gt;&gt; test.__code__.co_consts[1].co_varnames   # local variables
('.0', 'x')
</snippet></ROW><ROW><id>17290645</id><snippet>.0</snippet></ROW><ROW><id>17290645</id><snippet>x</snippet></ROW><ROW><id>17290645</id><snippet>seq2</snippet></ROW><ROW><id>17290645</id><snippet>.0</snippet></ROW><ROW><id>17290645</id><snippet>seq</snippet></ROW><ROW><id>17290645</id><snippet>seq</snippet></ROW><ROW><id>17290645</id><snippet>GET_ITER</snippet></ROW><ROW><id>17290645</id><snippet>dis</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; def test():
...     [x in seq for x in zip(seq, a)]
... 
&gt;&gt;&gt; dis.dis(test)
  2           0 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0xb7196f70, file "&lt;stdin&gt;", line 2&gt;) 
              3 MAKE_FUNCTION            0 
              6 LOAD_GLOBAL              0 (zip) 
              9 LOAD_GLOBAL              1 (seq) 
             12 LOAD_GLOBAL              2 (a) 
             15 CALL_FUNCTION            2 
             18 GET_ITER             
             19 CALL_FUNCTION            1 
             22 POP_TOP              
             23 LOAD_CONST               0 (None) 
             26 RETURN_VALUE 
&gt;&gt;&gt; test.__code__.co_consts[1].co_varnames
('.0', 'x')
</snippet></ROW><ROW><id>17290645</id><snippet>.0</snippet></ROW><ROW><id>17290645</id><snippet>zip(seq, a)</snippet></ROW><ROW><id>17290645</id><snippet>seq</snippet></ROW><ROW><id>17290645</id><snippet>a</snippet></ROW><ROW><id>17290645</id><snippet>iter(zip(seq, a))</snippet></ROW><ROW><id>17290645</id><snippet>pdb</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; def test(seq): pdb.set_trace()
... 
&gt;&gt;&gt; test([1,2,3])
--Return--
&gt; &lt;stdin&gt;(1)test()-&gt;None
(Pdb) def test2(): print(seq)
(Pdb) test2()
*** NameError: global name 'seq' is not defined
</snippet></ROW><ROW><id>17290645</id><snippet>test2</snippet></ROW><ROW><id>17290645</id><snippet>seq</snippet></ROW><ROW><id>17290645</id><snippet>test</snippet></ROW><ROW><id>17290645</id><snippet>#python 2 no error
&gt;&gt;&gt; class A(object):
...     x = 1
...     L = [x for _ in range(3)]
... 
&gt;&gt;&gt; 

#python3 error!
&gt;&gt;&gt; class A(object):
...     x = 1
...     L = [x for _ in range(3)]
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in A
  File "&lt;stdin&gt;", line 3, in &lt;listcomp&gt;
NameError: global name 'x' is not defined
</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; class A(object):
...     x = 1
...     L = []
...     for _ in range(3): L.append(x)
... 
</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; class A(object):
...     x = 1
...     def test():
...             print(x)
...     test()
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in A
  File "&lt;stdin&gt;", line 4, in test
NameError: global name 'x' is not defined
</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; def test(seq): pdb.set_trace()
... 
&gt;&gt;&gt; test([1,2,3])
--Return--
&gt; &lt;stdin&gt;(1)test()-&gt;None
(Pdb) list(x in seq for x in seq)
*** Error in argument: '(x in seq for x in seq)'
</snippet></ROW><ROW><id>17290645</id><snippet>pdb</snippet></ROW><ROW><id>17290645</id><snippet>pdb</snippet></ROW><ROW><id>17290645</id><snippet>pdb</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def test(): [x + y for x in seq1 for y in seq2]
... 
&gt;&gt;&gt; dis.dis(test)
  1           0 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0xb71bf5c0, file "&lt;stdin&gt;", line 1&gt;) 
              3 MAKE_FUNCTION            0 
              6 LOAD_GLOBAL              0 (seq1) 
              9 GET_ITER             
             10 CALL_FUNCTION            1 
             13 POP_TOP              
             14 LOAD_CONST               0 (None) 
             17 RETURN_VALUE         
&gt;&gt;&gt; # The only argument to the listcomp is seq1
&gt;&gt;&gt; import types
&gt;&gt;&gt; func = types.FunctionType(test.__code__.co_consts[1], globals())
&gt;&gt;&gt; dis.dis(func)
  1           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                29 (to 38) 
              9 STORE_FAST               1 (x) 
             12 LOAD_GLOBAL              0 (seq2) 
             15 GET_ITER             
        &gt;&gt;   16 FOR_ITER                16 (to 35) 
             19 STORE_FAST               2 (y) 
             22 LOAD_FAST                1 (x) 
             25 LOAD_FAST                2 (y) 
             28 BINARY_ADD           
             29 LIST_APPEND              3 
             32 JUMP_ABSOLUTE           16 
        &gt;&gt;   35 JUMP_ABSOLUTE            6 
        &gt;&gt;   38 RETURN_VALUE        
</snippet></ROW><ROW><id>17290645</id><snippet>listcomp</snippet></ROW><ROW><id>17290645</id><snippet>FOR_ITER</snippet></ROW><ROW><id>17290645</id><snippet>seq2</snippet></ROW><ROW><id>17290645</id><snippet>FOR_ITER</snippet></ROW><ROW><id>17290645</id><snippet>seq2</snippet></ROW><ROW><id>17290645</id><snippet>pdb</snippet></ROW><ROW><id>17290645</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; def test(seq1, seq2): pdb.set_trace()
... 
&gt;&gt;&gt; test([1,2,3], [4,5,6])
--Return--
&gt; &lt;stdin&gt;(1)test()-&gt;None
(Pdb) [x + y for x in seq1 for y in seq2]
*** NameError: global name 'seq2' is not defined
(Pdb) [x + y for x in non_existent for y in seq2]
*** NameError: name 'non_existent' is not defined
</snippet></ROW><ROW><id>17290645</id><snippet>NameError</snippet></ROW><ROW><id>17290645</id><snippet>seq2</snippet></ROW><ROW><id>17290645</id><snippet>seq1</snippet></ROW><ROW><id>17290645</id><snippet>NameError</snippet></ROW><ROW><id>17290645</id><snippet>seq1</snippet></ROW><ROW><id>17290681</id><snippet>1. When a Sales Order is approved add it to history of customer.
2. When a Sales Invoice is confirmed, mail to customer.
3. When a CRM case is closed, popup a window on client side for summary of interaction/ feedback etc.
</snippet></ROW><ROW><id>17290681</id><snippet>1. Action Name: As obvious as the name is
2. Object: The object/model from which the server action will be triggered. Eg. Sale Order
3. Action Type: More on this later as each case will be handled.
Sequence: Used when Action Type is multi actions, where a series of actions will occur in the order of sequence.
4. Condition: A single line python condition. eg. if you want to send sms alerts whenever a voucher of more than 5000 occurs. object.amount&gt;5000. If there are no conditions, you must give True for the execution.
5. Action Type Specific Tab: Here i will explain each action type in detail

6. Dummy: A dummy stage does nothing. (God knows why its there..)
7. Client Action: You Can select a form to Open, a wizard to run or a report to launch. Select the report from the list.
Iteration: Based on a python loop expression, you can iterate server actions, eg: When a stock inward move occurs and you confirm it, you want each line item to be historised.. you can loop on expression object.move_lines and create another server action which is referred to do the historising job.
8. Python Code: you can execute a multiline python code. the returned value is the value of the variable action = {}. This makes sense only if you want to pop a specific window(form) specific to the context. IMHO you wont need a return value. Note: The code is executed using the exec function of python, which is run in the dictionary namespace with variables: object,time,cr,uid,ids
9. Trigger: Any transition of the workflow can be triggered using this. The options you need to set are. Workflow Model: The target object on which you want to trigger the workflow. 'Trigger on' field should have the ID of the target model record. Eg have the ID of invoice if you want to trigger a change in invoice. 'Trigger Name' is the signal you have to use to initiate the transition. The drop down lists all possible triggers. Note:Trigger Name list shows all possible transitions from ther models also, so ensure you select the right trigger. Models are given in bracket.
10. Email: Set an email address, Subject &amp; message. You need to configure the Open ERP builting smtpserver for this. Power email, a generic email architecture for Open ERP can be used for emailing as it offers a lot more features and automated emails (no messing with server actions required). Its available at: http://launchpad.net/poweremail and downloads at http://launchpad.net/poweremail/+download
11. SMS: Choose mobile no. eg: [[ object.shipping_address.mobile ]] and the subject. 
Create Object: This is used to create a new record in any model, when the server action is triggered. The historise feature discussed can be implemented using this. Field mappings are used to give value for fields in record
</snippet></ROW><ROW><id>17290681</id><snippet>&lt;record id="ir_actions_server_timsheet_sheet" model="ir.actions.server"&gt;
            &lt;field name="sequence" eval="5"/&gt;
            &lt;field name="state"&gt;code&lt;/field&gt;
            &lt;field name="type"&gt;ir.actions.server&lt;/field&gt;
            &lt;field name="model_id" ref="model_hr_timesheet_current_open"/&gt;
            &lt;field name="code"&gt;action = pool.get('hr.timesheet.current.open').open_timesheet(cr, uid, None, context)&lt;/field&gt;
            &lt;field name="condition"&gt;True&lt;/field&gt;
            &lt;field name="name"&gt;My Timesheet&lt;/field&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>17290681</id><snippet>&lt;field name="model_id" eval="Selling"/&gt;</snippet></ROW><ROW><id>17290847</id><snippet>tag</snippet></ROW><ROW><id>17290847</id><snippet>data.write(str(tag).rstrip('\n'))
</snippet></ROW><ROW><id>17291136</id><snippet>class gui:
...
    def OnButtonClick1(self):
        self.labelVariable.set( self.entryVariable.get())
        self.entry.focus_set()
        self.entry.selection_range(0, tkinter.END)
        filename = askopenfilename()
        self.filename = filename
        with open(filename,'r') as f:
        for file in f:
            data = f.read()
            self.entry.insert(0,filename)
    def GetFilename(self):
        return self.filename
...
gui_object = gui()
...
#Opening my enquiry list .cvs file
myfile = gui_object.GetFilename()
datafile = open(myfile, 'r')
datareader = csv.reader(datafile)
n1 = []
for row in datareader:
n1.append(row)

n = list(itertools.chain(*n1))
</snippet></ROW><ROW><id>17291454</id><snippet>$ python -m timeit 'counter = 0
&gt; for _ in xrange(200000): counter += 1'
100 loops, best of 3: 9.25 msec per loop
</snippet></ROW><ROW><id>17291454</id><snippet>counter += 1</snippet></ROW><ROW><id>17291454</id><snippet>while</snippet></ROW><ROW><id>17291454</id><snippet>$ python -m timeit 'counter = 0
&gt; while counter &lt; 200000: counter += 1'
100 loops, best of 3: 10.5 msec per loop
</snippet></ROW><ROW><id>17291872</id><snippet>Customers.objects.exclude(status__in=[1,2])
</snippet></ROW><ROW><id>17291872</id><snippet>Customers.objects.filter(whatever=whatever).exclude(status__in=[1,2])
</snippet></ROW><ROW><id>17291906</id><snippet>if request.method == "POST" :
    form = UserCreationForm(request.POST, request.FILES) #since request.POST is present, populate the form with POST values
    if form.is_valid(): #Check if its valid
       print "form is valid"
       form.save()
       return render_to_response("action_succes.html")
    else: #invalid case
        print form.is_valid()   #form contains data and errors
        print form.errors
else:
    form = UserCreationForm() #No post data

args = {}
args.update(csrf(request))
return render(request, "registration.html", {'form':form}) #Sending the form to view
</snippet></ROW><ROW><id>17291915</id><snippet>annotate</snippet></ROW><ROW><id>17291915</id><snippet>text</snippet></ROW><ROW><id>17291915</id><snippet>py.scatter</snippet></ROW><ROW><id>17291915</id><snippet>``'$...$'``                    render the string using mathtext.
</snippet></ROW><ROW><id>17291915</id><snippet>import pylab as py

data = [["peach", 1.0, 1.0], 
        ["apples", 19, 3.5], 
        ["oranges", 7, 2.2], 
        ["grapes", 23, 7.8]]

for item in data:
    py.scatter(item[1], item[2], s=700*item[1], 
           c=(item[2]/10.0, 0, 1 - item[2]/10.0), 
           marker=r"$ {} $".format(item[0]), edgecolors='none' )

py.show()
</snippet></ROW><ROW><id>17291915</id><snippet>\textrm{}</snippet></ROW><ROW><id>17292117</id><snippet>weightvalue = file_list.sheet.cell(3, 3).value
</snippet></ROW><ROW><id>17292117</id><snippet>weightvalue = sheet.cell(3, 3).value
</snippet></ROW><ROW><id>17292117</id><snippet>import xlrd
import os, fnmatch

start_dir = 'C:/eclipse/TST-folder'

def excelfiles(pattern):
    file_list = []
    for root, dirs, files in os.walk(start_dir):
        for filename in files:
            if fnmatch.fnmatch(filename.lower(), pattern):
                if filename.endswith(".xls") or filename.endswith(".xlsx") or filename.endswith(".xlsm"):
                    file_list.append(os.path.join(root, filename))
    return file_list

file_list = excelfiles('*tst*')     # only accept docs hwom title includes tst
for i in file_list: print i


'''Location of each val from the excel spreadsheet'''


def locate_vals():
    val_dict = {}
    for filename in file_list:
        wb = xlrd.open_workbook(os.path.join(start_dir, filename))
        sheet = wb.sheet_by_index(0)

        # problem 2: extract these values once per sheet
        weightvalue = sheet.cell(3, 3).value
        lengthvalue = sheet.cell(3, 2).value
        speedvalue = sheet.cell(3, 4).value

        # problem 3: store them in a dictionary, keyed on filename
        val_dict[filename] = [weightvalue, lengthvalue, speedvalue]

    # dictionary keyed on filename, with value a list of the extracted vals
    return val_dict

print locate_vals()
</snippet></ROW><ROW><id>17292487</id><snippet>a,b = b,a
</snippet></ROW><ROW><id>17292487</id><snippet>a = a*b
b = a/b
a = a/b
</snippet></ROW><ROW><id>17292487</id><snippet>a = a ^ b
b = b ^ a
a = b ^ a
</snippet></ROW><ROW><id>17292541</id><snippet>dict.txt</snippet></ROW><ROW><id>17292541</id><snippet>ħ</snippet></ROW><ROW><id>17292541</id><snippet>0xc4 0xa7</snippet></ROW><ROW><id>17292541</id><snippet>import codecs
with codecs.open('./dict.txt', encoding="utf-8") as maltese:
    # etc.
</snippet></ROW><ROW><id>17292541</id><snippet>unicode()</snippet></ROW><ROW><id>17292911</id><snippet>   import tkinter
   from tkinter.filedialog import asksaveasfilename

   with open(asksaveasfilename(), 'w') as fp:
</snippet></ROW><ROW><id>17293113</id><snippet>from splinter import *
from selenium import *

username1 = '***'
password1 = '***'

browser1 = Browser('phantomjs')
browser1.visit('http://***.nl/admin')
browser1.fill('username', username1)
browser1.fill('password', password1)
browser1.click_link_by_text('Inloggen')

url1 = browser1.url
title1 = browser1.title

titlecheck1 = 'Dashboard'

print "Step 1 (***):"

if title1 == titlecheck1:
    print('Succeeded')

else:
    print('Failed')
    browser1.quit()

print 'The source is:'
print browser1.html

browser1.quit()
</snippet></ROW><ROW><id>17293435</id><snippet>regex</snippet></ROW><ROW><id>17293435</id><snippet>itertools.product</snippet></ROW><ROW><id>17293435</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; line = 'a   b  c  d,e,f    g   h  i,j,k,l   m   n'
&gt;&gt;&gt; items = [x[0].split(',') for x in re.findall(r'((\w+,)+\w)',line)]
&gt;&gt;&gt; strs = re.sub(r'((\w+,)+\w+)','{}',line)
&gt;&gt;&gt; for prod in product(*items):
...     print (strs.format(*prod))
...     
a   b  c  d    g   h  i   m   n
a   b  c  d    g   h  j   m   n
a   b  c  d    g   h  k   m   n
a   b  c  d    g   h  l   m   n
a   b  c  e    g   h  i   m   n
a   b  c  e    g   h  j   m   n
a   b  c  e    g   h  k   m   n
a   b  c  e    g   h  l   m   n
a   b  c  f    g   h  i   m   n
a   b  c  f    g   h  j   m   n
a   b  c  f    g   h  k   m   n
a   b  c  f    g   h  l   m   n
</snippet></ROW><ROW><id>17293435</id><snippet>&gt;&gt;&gt; line = 'a   b  c  d,e,f    g   h  i,j,k,l   m   n q,w,e,r  f o   o'
&gt;&gt;&gt; items = [x[0].split(',') for x in re.findall(r'((\w+,)+\w)',line)]
&gt;&gt;&gt; strs = re.sub(r'((\w+,)+\w+)','{}',line)
for prod in product(*items):
    print (strs.format(*prod))
...     
a   b  c  d    g   h  i   m   n q  f o   o
a   b  c  d    g   h  i   m   n w  f o   o
a   b  c  d    g   h  i   m   n e  f o   o
a   b  c  d    g   h  i   m   n r  f o   o
a   b  c  d    g   h  j   m   n q  f o   o
a   b  c  d    g   h  j   m   n w  f o   o
a   b  c  d    g   h  j   m   n e  f o   o
a   b  c  d    g   h  j   m   n r  f o   o
a   b  c  d    g   h  k   m   n q  f o   o
a   b  c  d    g   h  k   m   n w  f o   o
a   b  c  d    g   h  k   m   n e  f o   o
a   b  c  d    g   h  k   m   n r  f o   o
a   b  c  d    g   h  l   m   n q  f o   o
a   b  c  d    g   h  l   m   n w  f o   o
a   b  c  d    g   h  l   m   n e  f o   o
a   b  c  d    g   h  l   m   n r  f o   o
a   b  c  e    g   h  i   m   n q  f o   o
a   b  c  e    g   h  i   m   n w  f o   o
a   b  c  e    g   h  i   m   n e  f o   o
a   b  c  e    g   h  i   m   n r  f o   o
a   b  c  e    g   h  j   m   n q  f o   o
a   b  c  e    g   h  j   m   n w  f o   o
a   b  c  e    g   h  j   m   n e  f o   o
a   b  c  e    g   h  j   m   n r  f o   o
a   b  c  e    g   h  k   m   n q  f o   o
a   b  c  e    g   h  k   m   n w  f o   o
a   b  c  e    g   h  k   m   n e  f o   o
a   b  c  e    g   h  k   m   n r  f o   o
a   b  c  e    g   h  l   m   n q  f o   o
a   b  c  e    g   h  l   m   n w  f o   o
a   b  c  e    g   h  l   m   n e  f o   o
a   b  c  e    g   h  l   m   n r  f o   o
a   b  c  f    g   h  i   m   n q  f o   o
a   b  c  f    g   h  i   m   n w  f o   o
a   b  c  f    g   h  i   m   n e  f o   o
a   b  c  f    g   h  i   m   n r  f o   o
a   b  c  f    g   h  j   m   n q  f o   o
a   b  c  f    g   h  j   m   n w  f o   o
a   b  c  f    g   h  j   m   n e  f o   o
a   b  c  f    g   h  j   m   n r  f o   o
a   b  c  f    g   h  k   m   n q  f o   o
a   b  c  f    g   h  k   m   n w  f o   o
a   b  c  f    g   h  k   m   n e  f o   o
a   b  c  f    g   h  k   m   n r  f o   o
a   b  c  f    g   h  l   m   n q  f o   o
a   b  c  f    g   h  l   m   n w  f o   o
a   b  c  f    g   h  l   m   n e  f o   o
a   b  c  f    g   h  l   m   n r  f o   o
</snippet></ROW><ROW><id>17293795</id><snippet>functionNS = etree.FunctionNamespace(None)
functionNS['test'] = lambda context, nodes, *args: print(context, nodes, args)
</snippet></ROW><ROW><id>17293795</id><snippet>test</snippet></ROW><ROW><id>17293795</id><snippet>root.xpath("//*[test(., 'arg1', 'arg2')]")
</snippet></ROW><ROW><id>17293795</id><snippet>"{http://exslt.org/regular-expressions}test"</snippet></ROW><ROW><id>17293795</id><snippet>functionNS['test']</snippet></ROW><ROW><id>17293795</id><snippet>re</snippet></ROW><ROW><id>17293795</id><snippet>etree.FunctionNamespace("http://exslt.org/regular-expressions").prefix = 're'
</snippet></ROW><ROW><id>17294002</id><snippet>.endswith('/')</snippet></ROW><ROW><id>17294002</id><snippet>for path in lst:
    if path.endswith('/'):
        dir_list.append(path)
    else:
        file_list.append(path)
</snippet></ROW><ROW><id>17294002</id><snippet>.endswith()</snippet></ROW><ROW><id>17294002</id><snippet>&gt;&gt;&gt; sample = ['fileA.jpg', 'fileB.jpg', 'images/'] * 30
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.shuffle(sample)
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; import re
&gt;&gt;&gt; def re_partition(pattern=re.compile(r'/$')):
...     for e in sample:
...         if pattern.search(e): pass
...         else: pass
... 
&gt;&gt;&gt; def endswith_partition():
...     for e in sample:
...         if e.endswith('/'): pass
...         else: pass
... 
&gt;&gt;&gt; timeit('f()', 'from __main__ import re_partition as f, sample', number=10000)
0.2553541660308838
&gt;&gt;&gt; timeit('f()', 'from __main__ import endswith_partition as f, sample', number=10000)
0.20675897598266602
</snippet></ROW><ROW><id>17294378</id><snippet>cmnd = ["ffmpeg", "-i", "/your/file.avi", "-acodec", "copy", "-ss", "00:00:00", "-t", "00:00:30", "-f", "avi", "pipe:1"]

p = subprocess.Popen(cmnd, stdout=subprocess.PIPE)

out, err = p.communicate()

print len(out) # print the length of the data received
</snippet></ROW><ROW><id>17294698</id><snippet>as_view()</snippet></ROW><ROW><id>17294698</id><snippet>RegistrationView.register</snippet></ROW><ROW><id>17294698</id><snippet>RegistrationView</snippet></ROW><ROW><id>17294698</id><snippet>form_class</snippet></ROW><ROW><id>17294698</id><snippet>class RecaptchaRegistrationView(RegistrationView):
    """
    Subclass of RegistrationView that uses RecaptchaRegistrationForm
    """
    form_class = RecaptchaRegistrationForm

urlpatterns = patterns('',
    url(r'^register/$', RecaptchaRegistrationView.as_view(), name='registration_register'),
</snippet></ROW><ROW><id>17294768</id><snippet>from random import shuffle
numbers  = list(range(1,51))
shuffle(numbers)
draw = numbers[:6]
print(draw)
</snippet></ROW><ROW><id>17295128</id><snippet>import os
goal_dir = os.path.join(os.getcwd(), "../../my_dir")
print goal_dir  # prints C:/here/I/am/../../my_dir
print os.path.normpath(goal_dir)  # prints C:/here/my_dir
print os.path.realpath(goal_dir)  # prints C:/here/my_dir
print os.path.abspath(goal_dir)  # prints C:/here/my_dir
</snippet></ROW><ROW><id>17295149</id><snippet>&gt;&gt;&gt; lis = [['Mumbai', 98.3], ['London', 23.23], ['Agra', 12.22]]
&gt;&gt;&gt; print sorted(lis, key = lambda x : x[1], reverse = True)[:10] #[:10] returns first ten items
[['Mumbai', 98.3], ['London', 23.23], ['Agra', 12.22]]
</snippet></ROW><ROW><id>17295149</id><snippet>with open('abc') as f:
    next(f)  #skip header 
    lis = [[city,float(val)]  for city, val in( line.split() for line in f)]
    print lis 
    #[['Mumbai', 98.3], ['London', 23.23], ['Agra', 12.22]]  
</snippet></ROW><ROW><id>17295149</id><snippet>new_lis = sorted(sc_percentage, key = lambda x : x[1], reverse = True)[:10]
for item in new_lis:
   print item
</snippet></ROW><ROW><id>17295149</id><snippet>sorted</snippet></ROW><ROW><id>17295149</id><snippet>key</snippet></ROW><ROW><id>17295149</id><snippet>key = lambda x : x[1]</snippet></ROW><ROW><id>17295149</id><snippet>reverse= True</snippet></ROW><ROW><id>17295401</id><snippet>class WithoutDocString(object):

    def __init__(self):
        pass


class WithADocString(object):

    """Summary line.

    Bla bla bla bla.
    """

    def __init__(self):
        pass
</snippet></ROW><ROW><id>17295408</id><snippet>key_skill, title = "python,web developer".split(',')
</snippet></ROW><ROW><id>17295408</id><snippet>jobs = Job.objects.filter(title=title, employerkeyskills__keyskills=key_skill)
</snippet></ROW><ROW><id>17295819</id><snippet>&gt;&gt;&gt; subs = {
...         "Houston": "HOU", 
...         "L.A. Clippers": "LAC",
... 
...     }
&gt;&gt;&gt; rev_subs = { v:k for k,v in subs.iteritems()}
&gt;&gt;&gt; [rev_subs.get(item,item)  for item in my_lst]
['L.A. Clippers', 'Houston', '03/03 06:11 PM', '2.13', '1.80', '03/03 03:42 PM']
</snippet></ROW><ROW><id>17295819</id><snippet>indexes = [0, 1]
for ind in indexes:
    val =  my_lst[ind]
    my_lst[ind] = rev_subs.get(val, val)
</snippet></ROW><ROW><id>17295922</id><snippet>wrap=tk.WORD</snippet></ROW><ROW><id>17296114</id><snippet>asciidoc_call = ["asciidoc","-b", "docbook45", asciidoc_file_name]
</snippet></ROW><ROW><id>17296114</id><snippet>"-b docbook45"</snippet></ROW><ROW><id>17296215</id><snippet>import csv

DICT = {a:a*a for a in [1,2,3,4,5]}
n = [2, 5, 99, 3]

headings = ['dict', 'list']

##Writing to .cvs file       
with open("try.csv", 'w') as fp:
  a = csv.writer(fp)
  a.writerow(headings)
  for name in n:
    if name in DICT:
       a.writerow([name, DICT[name]])
    else:
       a.writerow([name, "Not Available"])
</snippet></ROW><ROW><id>17296215</id><snippet>try.csv</snippet></ROW><ROW><id>17296215</id><snippet>dict,list
2,4
5,25
99,Not Available
3,9
</snippet></ROW><ROW><id>17296215</id><snippet>import csv

DICT = {a:a*a for a in [1,2,3,4,5,6]}
ns = [2,3,99,5]

headings = ['dict', 'list']

ns_squared = [DICT[name] if name in DICT else "NOT_FOUND" for name in names]

print(ns_squared) #=&gt; [4, 9, 'NOT_FOUND', 25]

rows = zip(ns,ns_squared)

with open("try.csv", 'w') as fp:
  a = csv.writer(fp)
  a.writerow(headings)
  a.writerows(rows)
</snippet></ROW><ROW><id>17296215</id><snippet>dict,list
2,4
3,9
99,NOT_FOUND
5,25
</snippet></ROW><ROW><id>17296215</id><snippet>zip()</snippet></ROW><ROW><id>17296215</id><snippet>&gt;&gt;&gt; column1 = ["value", 1, 2, 3, 4]
&gt;&gt;&gt; column2 = ["square", 2, 4, 9, 16]
&gt;&gt;&gt; zip(column1,column2)
[('value', 'square'), (1, 2), (2, 4), (3, 9), (4, 16)]
</snippet></ROW><ROW><id>17296319</id><snippet>.contents</snippet></ROW><ROW><id>17296319</id><snippet>&gt;&gt;&gt; Doc = soup.find('div', {'class': 'document'}) # assuming soup is your main content
&gt;&gt;&gt; for i in [x for x in Doc.contents if x != '\n']:
...     print i
... 
&lt;p&gt;Text.&lt;/p&gt;
&lt;p&gt;More text&lt;/p&gt;
</snippet></ROW><ROW><id>17296443</id><snippet>import MySQLdb

    db = MySQLdb.connect("localhost","root","jimmypq79","pytest" )
    cursor = db.cursor()
    cursor.execute("INSERT INTO `first_table` (`name`) VALUES ('boop') ")
    db.commit()
</snippet></ROW><ROW><id>17296443</id><snippet>db = MySQLdb.connect("localhost","root","jimmypq79","pytest" )
db.autocommit(True)
</snippet></ROW><ROW><id>17296492</id><snippet>browser2.find_by_id('gebruikersnaam').first.find_by_tag('input').fill(username2)
browser2.find_by_id('wachtwoord').first.find_by_tag('input').fill(password2)
</snippet></ROW><ROW><id>17296492</id><snippet>.firstfield</snippet></ROW><ROW><id>17296578</id><snippet>\d{2,9}</snippet></ROW><ROW><id>17296587</id><snippet>select(2)</snippet></ROW><ROW><id>17296587</id><snippet>select(2)</snippet></ROW><ROW><id>17296587</id><snippet>IFileDescriptor</snippet></ROW><ROW><id>17296587</id><snippet>IReactorFDSet</snippet></ROW><ROW><id>17296712</id><snippet>Deferred</snippet></ROW><ROW><id>17296712</id><snippet>gatherResults</snippet></ROW><ROW><id>17297092</id><snippet>python path_to_script.py [arg_1] [arg_n]
</snippet></ROW><ROW><id>17297377</id><snippet>wup_similarity()</snippet></ROW><ROW><id>17297377</id><snippet>&gt;&gt;&gt; from nltk.corpus import wordnet as wn
&gt;&gt;&gt; game = wn.synset('game.n.04')
&gt;&gt;&gt; leonardo = wn.synset('leonardo.n.01')
&gt;&gt;&gt; game.lowest_common_hypernyms(leonardo)
[Synset('organism.n.01')]
&gt;&gt;&gt; organism = game.lowest_common_hypernyms(leonardo)[0]
&gt;&gt;&gt; game.shortest_path_distance(organism)
2
&gt;&gt;&gt; leonardo.shortest_path_distance(organism)
3
</snippet></ROW><ROW><id>17297377</id><snippet>&gt;&gt;&gt; game.wup_similarity(leonardo)
0.7058823529411765
</snippet></ROW><ROW><id>17297377</id><snippet>from nltk.corpus import wordnet as wn
from itertools import product

def compare(word1, word2):
    ss1 = wn.synsets(word1)
    ss2 = wn.synsets(word2)
    return max(s1.path_similarity(s2) for (s1, s2) in product(ss1, ss2))

for word1, word2 in (('game', 'leonardo'), ('game', 'chess')):
    print "Path similarity of %-10s and %-10s is %.2f" % (word1,
                                                          word2,
                                                          compare(word1, word2))
</snippet></ROW><ROW><id>17297377</id><snippet>Path similarity of game       and leonardo   is 0.17
Path similarity of game       and chess      is 0.25
</snippet></ROW><ROW><id>17297464</id><snippet>xmlrpc.test.foo()</snippet></ROW><ROW><id>17297464</id><snippet>xmlrpc.test</snippet></ROW><ROW><id>17297464</id><snippet>foo</snippet></ROW><ROW><id>17297464</id><snippet>__call__</snippet></ROW><ROW><id>17297464</id><snippet>class WrapperProxy(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, name):
        attr = getattr(self.wrapped, name)
       return type(self)(attr)

    def __call__(self, *args, **kw):
        return self.wrapped(*args, **kw)

class XMLRPC(object):
    def __init__(self):
        self.xmlrpc = xmlrpclib.ServerProxy("http://localhost:1025/RPC2")

    def __getattr__(self, name):
        attr = getattr(self.xmlrpc, name)
        return WrapperProxy(attr)
</snippet></ROW><ROW><id>17297464</id><snippet>class XMLRPCWrapperProxy(object):
    def __init__(self, wrapped=None):
        if wrapped is None: 
            wrapped = xmlrpclib.ServerProxy("http://localhost:1025/RPC2")
        self.wrapped = wrapped

    def __getattr__(self, name):
        attr = getattr(self.wrapped, name)
       return type(self)(attr)

    def __call__(self, *args, **kw):
        return self.wrapped(*args, **kw)
</snippet></ROW><ROW><id>17297587</id><snippet>combined_array = np.concatenate((X2WINa, X2Winb))
</snippet></ROW><ROW><id>17297821</id><snippet>for i in range(data.shape[0]):
      for j in range(data.shape[1]):
          if j == data.shape[1]-1: #check if last row element 
              quotient=(data2[i][:-1]*data[i][:-1]).sum()
              data2[i][j] = -quotient/data[i][-1]
          else:
              data2[i][j] = random.uniform(1)
      print dot(data[i],data2[i])
</snippet></ROW><ROW><id>17297964</id><snippet>class Molecule(object):
    # ...

    @classmethod
    def fromFile(cls, filename):
        data = # ... parse data from filename ...
        return cls(data)
</snippet></ROW><ROW><id>17297964</id><snippet>import mymodule

mol = mymodule.Molecule.fromFile('toto')
</snippet></ROW><ROW><id>17298131</id><snippet># for large numbers, xrange will throw an error.
# OverflowError: Python int too large to convert to C long
# to get over this:

def mrange(start, stop, step):
    while start &lt; stop:
        yield start
        start += step

# benchmarked on an old single-core system with 2GB RAM.

from math import sqrt

def is_prime(num):
    if num == 2:
        return True
    if (num &lt; 2) or (num % 2 == 0):
        return False
    return all(num % i for i in mrange(3, int(sqrt(num)) + 1, 2))

# benchmark is_prime(100**10-1) using mrange
# 10000 calls, 53191 per second.
# 60006 function calls in 0.190 seconds.
</snippet></ROW><ROW><id>17298131</id><snippet>not any</snippet></ROW><ROW><id>17298131</id><snippet>def is_prime(num)
    # ...
    return not any(num % i == 0 for i in mrange(3, int(sqrt(num)) + 1, 2))
</snippet></ROW><ROW><id>17298131</id><snippet>70006 function calls in 0.272 seconds.</snippet></ROW><ROW><id>17298131</id><snippet>all</snippet></ROW><ROW><id>17298131</id><snippet>60006 function calls in 0.190 seconds.</snippet></ROW><ROW><id>17298131</id><snippet>100**10-1</snippet></ROW><ROW><id>17298131</id><snippet>Miller-Rabin</snippet></ROW><ROW><id>17298131</id><snippet>def is_prime(n, k=10):
    if num == 2:
        return True
    if not num &amp; 1:
        return False

    def check(a, s, d, n):
        x = pow(a, d, n)
        if x == 1:
            return True
        for i in xrange(s - 1):
            if x == n - 1:
                return True
            x = pow(x, 2, n)
        return x == n - 1

    s = 0
    d = n - 1

    while d % 2 == 0:
        d &gt;&gt;= 1
        s += 1

    for i in xrange(k):
        a = randrange(2, n - 1)
        if not check(a, s, d, n):
            return False
    return True
</snippet></ROW><ROW><id>17298131</id><snippet>Fermat</snippet></ROW><ROW><id>17298131</id><snippet>def is_prime(num):
    if num == 2:
        return True
    if not num &amp; 1:
        return False
    return pow(2, num-1, num) == 1
</snippet></ROW><ROW><id>17298131</id><snippet>def next_prime(num):
    if (not num &amp; 1) and (num != 2):
        num += 1
    if is_prime(num):
        num += 1
    while True:
        if is_prime(num):
            break
        num += 2
    return num

print next_prime(100**10-1) # returns `100000000000000000039`

# benchmark next_prime(100**10-1) using Miller-Rabin algorithm.
1000 calls, 337 per second.
258669 function calls in 2.971 seconds
</snippet></ROW><ROW><id>17298131</id><snippet>Fermat</snippet></ROW><ROW><id>17298131</id><snippet>45006 function calls in 0.885 seconds.</snippet></ROW><ROW><id>17298131</id><snippet>is_prime</snippet></ROW><ROW><id>17298131</id><snippet>mrange</snippet></ROW><ROW><id>17298131</id><snippet>next_prime</snippet></ROW><ROW><id>17298131</id><snippet>next_prime</snippet></ROW><ROW><id>17298131</id><snippet>Miller-Rabin</snippet></ROW><ROW><id>17298131</id><snippet>print next_prime(10^301)

# prints in 2.9s on the old single-core system, opposed to fermat's 2.8s
1000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000531
</snippet></ROW><ROW><id>17298131</id><snippet>return all(num % i for i in mrange(3, int(sqrt(num)) + 1, 2))</snippet></ROW><ROW><id>17298131</id><snippet>next_prime(10^301)</snippet></ROW><ROW><id>17298131</id><snippet>Miller-Rabin</snippet></ROW><ROW><id>17298131</id><snippet>Fermat</snippet></ROW><ROW><id>17298131</id><snippet>Solovay-Strassen</snippet></ROW><ROW><id>17298412</id><snippet>resp['Content-Disposition'] = 'attachment; filename=data.ZIP'
</snippet></ROW><ROW><id>17298412</id><snippet>mimetype</snippet></ROW><ROW><id>17298412</id><snippet>content_type</snippet></ROW><ROW><id>17298412</id><snippet>resp = HttpResponse(wrapper, content_type="application/octet-stream")
</snippet></ROW><ROW><id>17298427</id><snippet>from splinter import *
from selenium import *     

# Define the username and password
username2 = '***'
password2 = '***'

# Chose the browser (default is Firefox)
browser2 = Browser()

# Fill in the url
browser2.visit('https://mijn.ing.nl/internetbankieren/SesamLoginServlet')

# Find the username form and fill it with the defined username
browser2.find_by_id('gebruikersnaam').first.find_by_tag('input').fill(username2)

# Find the password form and fill it with the defined password
browser2.find_by_id('wachtwoord').first.find_by_tag('input').fill(password2)

# Find the submit button and click
browser2.find_by_css('.submit').first.click()

# Print the current url
print browser2.url

# Print the current browser title
print browser2.title

# Print the current html source code
print browser2.html
</snippet></ROW><ROW><id>17298454</id><snippet>pivot_table</snippet></ROW><ROW><id>17298454</id><snippet>In [11]: medals = df.pivot_table('no of medals', ['Year', 'Country'], 'medal')

In [12]: medals
Out[12]:
medal             Bronze  Gold  Silver
Year Country
1896 Afghanistan       3     5       4
     Algeria           3     1       2
</snippet></ROW><ROW><id>17298454</id><snippet>In [12]: medals.reindex_axis(['Gold', 'Silver', 'Bronze'], axis=1)
Out[12]:
medal             Gold  Silver  Bronze
Year Country
1896 Afghanistan     5       4       3
     Algeria         1       2       3
</snippet></ROW><ROW><id>17298538</id><snippet>while True:
    print "accepting"
    c, _ = s.accept()
    p = Process(target=process, args=(c,))
    p.start()
    print "started process"
    c.close()
</snippet></ROW><ROW><id>17298583</id><snippet>re.sub</snippet></ROW><ROW><id>17298583</id><snippet>&gt;&gt;&gt; strs = "abc+bcd+cdf"
&gt;&gt;&gt; re.sub(r'\+|;','\n',strs)
'abc\nbcd\ncdf'
</snippet></ROW><ROW><id>17298583</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; with open('abc') as f:
...     for line in f:       
...         line = re.sub(r'\+|;','\n',line.strip())
...         print line                              
...                                                 
abc
abc
bcd
cdf
adf
asfg
</snippet></ROW><ROW><id>17298734</id><snippet>next = input("&gt; ") # ipnut should be input
how_much = int(next) # indent correctly here
</snippet></ROW><ROW><id>17298734</id><snippet>import sys
sys.exit(0)
</snippet></ROW><ROW><id>17298782</id><snippet>In [43]: df = DataFrame(dict(ivalue = range(123901), date = 20060101, 
              value = Series([1]*123901,dtype='int32'))).set_index(['ivalue','date'])

In [44]: df
Out[44]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 123901 entries, (0, 20060101) to (123900, 20060101)
Data columns (total 1 columns):
value    123901  non-null values
dtypes: int32(1)

In [45]: df.head()
Out[45]: 
                 value
ivalue date           
0      20060101      1
1      20060101      1
2      20060101      1
3      20060101      1
4      20060101      1

In [46]: store = pd.HDFStore('test.h5',mode='w')

In [48]: store.append('df',df)

In [49]: store
Out[49]: 
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: test.h5
/df            frame_table  (typ-&gt;appendable_multi,nrows-&gt;123901,ncols-&gt;3,indexers-&gt;[index],dc-&gt;[date,ivalue])

In [50]: store.get_storer('df')
Out[50]: frame_table  (typ-&gt;appendable_multi,nrows-&gt;123901,ncols-&gt;3,indexers-&gt;[index],dc-&gt;[date,ivalue])
In [51]: store.get_storer('df').attrs
Out[51]: 
/df._v_attrs (AttributeSet), 14 attributes:
   [CLASS := 'GROUP',
    TITLE := '',
    VERSION := '1.0',
    data_columns := ['date', 'ivalue'],
    encoding := None,
    index_cols := [(0, 'index')],
    info := {'index': {}},
    levels := ['ivalue', 'date'],
    nan_rep := 'nan',
    non_index_axes := [(1, ['ivalue', 'date', 'value'])],
    pandas_type := u'frame_table',
    pandas_version := '0.10.1',
    table_type := u'appendable_multiframe',
    values_cols := ['values_block_0', 'date', 'ivalue']]

In [52]: store.get_storer('df').table
Out[52]: 
/df/table (Table(123901,)) ''
  description := {
  "index": Int64Col(shape=(), dflt=0, pos=0),
  "values_block_0": Int32Col(shape=(1,), dflt=0, pos=1),
  "date": Int64Col(shape=(), dflt=0, pos=2),
  "ivalue": Int64Col(shape=(), dflt=0, pos=3)}
  byteorder := 'little'
  chunkshape := (2340,)
  autoIndex := True
  colindexes := {
    "date": Index(6, medium, shuffle, zlib(1)).is_CSI=False,
    "index": Index(6, medium, shuffle, zlib(1)).is_CSI=False,
    "ivalue": Index(6, medium, shuffle, zlib(1)).is_CSI=False}
</snippet></ROW><ROW><id>17299079</id><snippet>def __init__(self, ...):
  for key, val in JSON_dict.iteritems():
    setattr(self, '_%s' % (key,), val)
</snippet></ROW><ROW><id>17299131</id><snippet>setattr()</snippet></ROW><ROW><id>17299131</id><snippet>argparse</snippet></ROW><ROW><id>17299131</id><snippet>class _StoreAction(Action):

    def __init__(self,
                 option_strings,
                 dest,
                 nargs=None,
                 const=None,
                 default=None,
                 type=None,
                 choices=None,
                 required=False,
                 help=None,
                 metavar=None):
        if nargs == 0:
            raise ValueError('nargs for store actions must be &gt; 0; if you '
                             'have nothing to store, actions such as store '
                             'true or store const may be more appropriate')
        if const is not None and nargs != OPTIONAL:
            raise ValueError('nargs must be %r to supply const' % OPTIONAL)
        super(_StoreAction, self).__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=nargs,
            const=const,
            default=default,
            type=type,
            choices=choices,
            required=required,
            help=help,
            metavar=metavar)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)
</snippet></ROW><ROW><id>17299131</id><snippet>__getattribute__()</snippet></ROW><ROW><id>17299131</id><snippet>class Something(object):
    def __init__(self, values_dict):
        self.values_dict = values_dict
    def __getattribute__(self, name):
        try:
            ## by default trying to access "normal" object's attributes
            return super(Something, self).__getattribute__(name)
        except AttributeError: 
            ## in case that it's not "normal" attribute, taking them from our dict
            value = self.values_dict.get(name)
            if value is None:
                ## it wasn't in the dict, re-raise the AttributeError 
                raise 
            else:
                return value
</snippet></ROW><ROW><id>17299131</id><snippet>__dict__</snippet></ROW><ROW><id>17299131</id><snippet>class Something(object):
    def __init__(self, values_dict):
        self.__dict__.update(values_dict)
</snippet></ROW><ROW><id>17299243</id><snippet>django-dajaxice</snippet></ROW><ROW><id>17299243</id><snippet>index1</snippet></ROW><ROW><id>17299243</id><snippet>/bank/index1/</snippet></ROW><ROW><id>17299243</id><snippet>/bank/index1/</snippet></ROW><ROW><id>17299243</id><snippet>index1</snippet></ROW><ROW><id>17299243</id><snippet>Dajaxice.bank.index1(my_callback)</snippet></ROW><ROW><id>17299243</id><snippet>HttpResponse()</snippet></ROW><ROW><id>17299243</id><snippet>index1</snippet></ROW><ROW><id>17299243</id><snippet>HttpResponse</snippet></ROW><ROW><id>17299394</id><snippet>def process_element(catalog, *args, **kwargs):
    for child in catalog.getchildren():
        print(child.text)
</snippet></ROW><ROW><id>17299493</id><snippet>//*[@id="product_addtocart_form"]/div[2]/div[1]/p[3]
</snippet></ROW><ROW><id>17299493</id><snippet>&lt;p&gt;This product is part of the Basics T.shirts line made of 100% Cotton.&lt;br&gt;
                        Stripes Muscle Fit T.shirts that come in Green Color.&lt;br&gt;
                        Casual that comes with Henley away.&lt;/p&gt;
</snippet></ROW><ROW><id>17299493</id><snippet>&lt;p&gt;This product is part of the Basics Shirts line made of 100% Cotton.&lt;br&gt;
                    Plain Slim Fit Shirts that come in Orange Color.&lt;br&gt;
                    Casual that comes with Button Down away.&lt;/p&gt;
</snippet></ROW><ROW><id>17299522</id><snippet>wave</snippet></ROW><ROW><id>17299676</id><snippet>for char in textlist[:]: #shallow copy of the list
    # etc
</snippet></ROW><ROW><id>17299676</id><snippet>print char, textlist</snippet></ROW><ROW><id>17299676</id><snippet>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
e ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
l ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
o ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
k ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!
  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
W ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
o ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] 
d ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
s ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
Hy lk Words!
</snippet></ROW><ROW><id>17299676</id><snippet>for x in y</snippet></ROW><ROW><id>17299676</id><snippet>o</snippet></ROW><ROW><id>17299676</id><snippet>"look"</snippet></ROW><ROW><id>17299676</id><snippet>o</snippet></ROW><ROW><id>17299676</id><snippet>"Words"</snippet></ROW><ROW><id>17299676</id><snippet>'o'</snippet></ROW><ROW><id>17299676</id><snippet>def remove_vowels(text): # function names should start with verbs! :)
    return ''.join([ch for ch in text if ch.lower() not in 'aeiou'])
</snippet></ROW><ROW><id>17299719</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; print platform.linux_distribution()
('Ubuntu', '12.04', 'precise')
</snippet></ROW><ROW><id>17299758</id><snippet>subprocess</snippet></ROW><ROW><id>17299758</id><snippet>echo</snippet></ROW><ROW><id>17299758</id><snippet>WindowsError: [Error 2] The system cannot find the file specified
</snippet></ROW><ROW><id>17299758</id><snippet>echo</snippet></ROW><ROW><id>17299758</id><snippet>shell=True</snippet></ROW><ROW><id>17299758</id><snippet>subprocess.check_output(["echo", "Hello World!"], shell=True)
</snippet></ROW><ROW><id>17299758</id><snippet>subprocess.check_output(["notepad.exe", "file.txt"])
</snippet></ROW><ROW><id>17299758</id><snippet>subprocess.check_output("exit 1", shell=True)
</snippet></ROW><ROW><id>17300321</id><snippet>xml</snippet></ROW><ROW><id>17300321</id><snippet>XAML</snippet></ROW><ROW><id>17300321</id><snippet>import base64
img = open('some.png',rb').read()
base64.b64encode(img)

# append it to your buffer
</snippet></ROW><ROW><id>17300321</id><snippet>#get the img portion in the buffer
import base64
img = base64.b64decode(fetched_img)
# write it to disk or whatever
</snippet></ROW><ROW><id>17300321</id><snippet>XML</snippet></ROW><ROW><id>17300321</id><snippet>base64</snippet></ROW><ROW><id>17300321</id><snippet>In [1]: import base64
In [4]: base64.b64encode('example')
Out[4]: 'ZXhhbXBsZQ=='
In [5]: base64.b64decode('ZXhhbXBsZQ==')
Out[5]: 'example'
</snippet></ROW><ROW><id>17300447</id><snippet>^</snippet></ROW><ROW><id>17300447</id><snippet>&gt;&gt;&gt; re.split('\^A', line)
['8=FIX.4.2', '9=0126', '35=0', '34=000742599', '49=L3Q206N', '50=2J6L', '52=20130620-11:16:27.344', '369=000733325', '56=CME', '57=G', '142=US,IL', '1603=OMS2', '1604=0.1', '']
</snippet></ROW><ROW><id>17300447</id><snippet>|</snippet></ROW><ROW><id>17300447</id><snippet>\x07</snippet></ROW><ROW><id>17300447</id><snippet>\a</snippet></ROW><ROW><id>17300447</id><snippet>^A</snippet></ROW><ROW><id>17300447</id><snippet>.split()</snippet></ROW><ROW><id>17300447</id><snippet>&gt;&gt;&gt; line = line.replace('^A', '\a')
&gt;&gt;&gt; line
'8=FIX.4.2\x079=0126\x0735=0\x0734=000742599\x0749=L3Q206N\x0750=2J6L\x0752=20130620-11:16:27.344\x07369=000733325\x0756=CME\x0757=G\x07142=US,IL\x071603=OMS2\x071604=0.1\x07'
&gt;&gt;&gt; line.split('\a')
['8=FIX.4.2', '9=0126', '35=0', '34=000742599', '49=L3Q206N', '50=2J6L', '52=20130620-11:16:27.344', '369=000733325', '56=CME', '57=G', '142=US,IL', '1603=OMS2', '1604=0.1', '']
</snippet></ROW><ROW><id>17300521</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>17300521</id><snippet>heapq.&lt;b&gt;nlargest&lt;/b&gt;(&lt;i&gt;n, iterable[, key]&lt;/i&gt;)</snippet></ROW><ROW><id>17300521</id><snippet>key=str.lower</snippet></ROW><ROW><id>17300521</id><snippet>sorted(iterable, key=key, reverse=True)[:n]</snippet></ROW><ROW><id>17300592</id><snippet>L = [float('nan') if el[0] == 1 else el for el in L]
</snippet></ROW><ROW><id>17300592</id><snippet>if .. else ..</snippet></ROW><ROW><id>17300592</id><snippet>L[:] = [float('nan') if el[0] == 1 else el for el in L]
</snippet></ROW><ROW><id>17300592</id><snippet>L</snippet></ROW><ROW><id>17300592</id><snippet>L</snippet></ROW><ROW><id>17300752</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>17300752</id><snippet>datetime(*(time.strptime(date_string, format)[0:6]))</snippet></ROW><ROW><id>17300752</id><snippet>import datetime
import time

datetime.datetime(*(time.strptime(myTimestring, '%Y-%m-%d %H:%M:%S')[:6]))
</snippet></ROW><ROW><id>17300752</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; myTimestring = '2013-01-01 12:42:23'
&gt;&gt;&gt; datetime.datetime(*(time.strptime(myTimestring, '%Y-%m-%d %H:%M:%S')[:6]))
datetime.datetime(2013, 1, 1, 12, 42, 23)
</snippet></ROW><ROW><id>17300929</id><snippet>\\</snippet></ROW><ROW><id>17300929</id><snippet>print st.replace('&amp;','\\')</snippet></ROW><ROW><id>17300929</id><snippet>&gt;&gt;&gt; st = "a&amp;b"
&gt;&gt;&gt; print st.replace('&amp;','\\')
a\b
&gt;&gt;&gt; len(st.replace('&amp;','\\'))
3
</snippet></ROW><ROW><id>17300953</id><snippet>y &gt; low</snippet></ROW><ROW><id>17300953</id><snippet>y</snippet></ROW><ROW><id>17300953</id><snippet>True</snippet></ROW><ROW><id>17300953</id><snippet>False</snippet></ROW><ROW><id>17300953</id><snippet>True</snippet></ROW><ROW><id>17300953</id><snippet>np.where</snippet></ROW><ROW><id>17300953</id><snippet>np.nonzero</snippet></ROW><ROW><id>17300953</id><snippet>&gt;&gt;&gt; a = np.random.randint(10, size=(10,))
&gt;&gt;&gt; a
array([3, 7, 5, 9, 3, 7, 0, 7, 0, 0])
&gt;&gt;&gt; a &gt; 3
array([False,  True,  True,  True, False,  True, False,  True, False, False], dtype=bool)
&gt;&gt;&gt; np.where(a &gt; 3)
(array([1, 2, 3, 5, 7], dtype=int64),)
&gt;&gt;&gt; np.nonzero(a &gt; 3)
(array([1, 2, 3, 5, 7], dtype=int64),)
</snippet></ROW><ROW><id>17300953</id><snippet>indices = np.where(y &gt; low)[0]</snippet></ROW><ROW><id>17301205</id><snippet>sys.modules</snippet></ROW><ROW><id>17301205</id><snippet>del sys.modules['yourmodule']</snippet></ROW><ROW><id>17301243</id><snippet>subprocess.call()</snippet></ROW><ROW><id>17301243</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17301243</id><snippet>.poll()</snippet></ROW><ROW><id>17301243</id><snippet>import itertools
import os
import subprocess
import sys
import time

def installing():
    null = open(os.devnull, 'wb')
    p = subprocess.Popen('echo blah &amp;&amp; sleep 5', shell=True, stdout=null)
    #p = subprocess.Popen('sudo sh installer.sh', shell=True, stdout=null)
    return p, null

def spin(p_stdout):
    p, stdout = p_stdout
    syms = itertools.cycle(['\\', '|', '/', '-'])
    sys.stdout.write('processing....')
    sys.stdout.flush()
    while p.poll() is None:
        sys.stdout.write('\b'+next(syms))
        sys.stdout.flush()
        time.sleep(0.1)
    p.wait()
    stdout.close()

spin(installing())
</snippet></ROW><ROW><id>17301444</id><snippet>r'\w{4}\d{1}\.\d{3}\.\d{3}'
</snippet></ROW><ROW><id>17301444</id><snippet>.</snippet></ROW><ROW><id>17301444</id><snippet>\</snippet></ROW><ROW><id>17301444</id><snippet>\w{4}</snippet></ROW><ROW><id>17301444</id><snippet>DRFT5.147.002</snippet></ROW><ROW><id>17301844</id><snippet>timeout</snippet></ROW><ROW><id>17301844</id><snippet>urlopen()</snippet></ROW><ROW><id>17301854</id><snippet>xrange()</snippet></ROW><ROW><id>17301867</id><snippet># Available since Python 2.6
from __future__ import print_function

# Now you can use Python 3's print
print(1, 'hello', 2, 'fart', sep='\t')
</snippet></ROW><ROW><id>17301931</id><snippet>re.sub(r'\(\d*\D+\d*\)\s+','',re.sub(r'\{.+?\#(\d+)\.\d+\)}',r'(\1)',s))
</snippet></ROW><ROW><id>17302076</id><snippet>   self.speed.y -= GRAVITY

   displacement = Vec2d(
        self.direction.x * self.speed.x,
        self.direction.y * self.speed.y
    )
    self.pos += displacement
</snippet></ROW><ROW><id>17302076</id><snippet>delta v_y = - g #* (1 second)
</snippet></ROW><ROW><id>17302076</id><snippet>50*GRAVITY m/s</snippet></ROW><ROW><id>17302076</id><snippet>time_passed</snippet></ROW><ROW><id>17302076</id><snippet>Dot.update</snippet></ROW><ROW><id>17302076</id><snippet>def update(self, time_passed):
    self.speed.y -= GRAVITY * time_passed/1000. #time converted from millisecond to seconds
</snippet></ROW><ROW><id>17302076</id><snippet>GRAVITY</snippet></ROW><ROW><id>17302076</id><snippet>x</snippet></ROW><ROW><id>17302076</id><snippet>t = 1000/x</snippet></ROW><ROW><id>17302076</id><snippet>t</snippet></ROW><ROW><id>17302076</id><snippet>def update(self, time):
    time /= 1000.
    self.speed.y -= GRAVITY * time

    displacement = Vec2d(
        self.direction.x * self.speed.x * time,
        self.direction.y * self.speed.y * time
    )
    self.pos += displacement
</snippet></ROW><ROW><id>17302076</id><snippet>max height = v0**2 / 2g
</snippet></ROW><ROW><id>17302076</id><snippet>    displacement = Vec2d(
        self.direction.x * self.speed.x * time * scaling_factor,
        self.direction.y * self.speed.y * time * scaling_factor
    )
</snippet></ROW><ROW><id>17302185</id><snippet>single_source_shortest_path</snippet></ROW><ROW><id>17302185</id><snippet>single_source_shortest_path_length</snippet></ROW><ROW><id>17302185</id><snippet>p</snippet></ROW><ROW><id>17302185</id><snippet>nx.single_source_shortest_path_length(G ,source=i, cutoff=p)
</snippet></ROW><ROW><id>17302193</id><snippet>Proportion()</snippet></ROW><ROW><id>17302193</id><snippet>common_flags</snippet></ROW><ROW><id>17302193</id><snippet>SizerFlags</snippet></ROW><ROW><id>17302193</id><snippet>common_flags = wx.SizerFlags().Expand().Border(wx.ALL, 1)  # creates the object
bar_flags = common_flags.Proportion(0)  # bar_flags points to the common_flags object

# Referencing common_flags with Proportion set to 0
main_box.Add(toolbar1, bar_flags)

# Changes the value of common_flags.
main_box.Add(wrap_panels_box, common_flags.Proportion(1))

# Since bar_flags points to common_flags, it also has Proportion set to 1
main_box.Add(toolbar2, bar_flags)
main_box.Add(statusbar, bar_flags)
</snippet></ROW><ROW><id>17302193</id><snippet>bar_flags</snippet></ROW><ROW><id>17302193</id><snippet>box_flags</snippet></ROW><ROW><id>17302193</id><snippet>bar_flags = wx.SizerFlags().Expand().Border(wx.ALL, 1).Proportion(0)
box_flags = wx.SizerFlags().Expand().Border(wx.ALL, 1).Proportion(1)

main_box.Add(tool_status_bars.main, bar_flags)
main_box.Add(wrap_panels_box, box_flags)
main_box.Add(tool_status_bars.panel_view, bar_flags)
main_box.Add(tool_status_bars.status, bar_flags)
</snippet></ROW><ROW><id>17302193</id><snippet>wrap_panels_box</snippet></ROW><ROW><id>17302228</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17302228</id><snippet>$ sudo easy_install beautifulsoup
$ python
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
</snippet></ROW><ROW><id>17302228</id><snippet>$ sudo easy_install beautifulsoup4
$ python
&gt;&gt;&gt; from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>17302328</id><snippet>b64encode</snippet></ROW><ROW><id>17302328</id><snippet>stringResult += base64.b64encode(f.read()).decode('ascii')
</snippet></ROW><ROW><id>17302339</id><snippet>url(r'^time/plus/(\d{1,2})/$', hours_ahead),
</snippet></ROW><ROW><id>17302339</id><snippet>\</snippet></ROW><ROW><id>17302339</id><snippet>d</snippet></ROW><ROW><id>17302478</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17302478</id><snippet>sys.path.append('/home/name/my_name/numpy/local/lib/python2.7/site-packages/sklearn')
</snippet></ROW><ROW><id>17302478</id><snippet>sys.path.append('/home/name/my_name/numpy/local/lib/python2.7/site-packages')
</snippet></ROW><ROW><id>17302589</id><snippet>class myRowObj(object):
    def __init__(self, mac, port, dpid):
        self.mac  = mac
        self.port = port
        self.dpid  = dpid


myTable = list()
for each in some_inputs:
    myTable.append(myRowObj(*each.split())
</snippet></ROW><ROW><id>17302589</id><snippet>_str_</snippet></ROW><ROW><id>17302589</id><snippet>_repr_</snippet></ROW><ROW><id>17302718</id><snippet>db.init_app</snippet></ROW><ROW><id>17302718</id><snippet>db = SQLAlchemy()</snippet></ROW><ROW><id>17302718</id><snippet>db.Model</snippet></ROW><ROW><id>17302718</id><snippet>db.metadata</snippet></ROW><ROW><id>17302718</id><snippet>create_app</snippet></ROW><ROW><id>17302718</id><snippet>alembic</snippet></ROW><ROW><id>17302718</id><snippet>sys.path</snippet></ROW><ROW><id>17302718</id><snippet>sqlalchemy.url</snippet></ROW><ROW><id>17302718</id><snippet>db</snippet></ROW><ROW><id>17302718</id><snippet>target_metadata = db.metadata</snippet></ROW><ROW><id>17302718</id><snippet>load_models</snippet></ROW><ROW><id>17302718</id><snippet>init_views</snippet></ROW><ROW><id>17302788</id><snippet>etree.parse(open(args.inputfile))</snippet></ROW><ROW><id>17302788</id><snippet>print( args.inputfile )
f = open( args.inputfile )
print( f.tell() )
print( f.read() )
f.seek(0)
xml = etree.parse( f )
print( xml )
root = xml.getroot()
print( root )
</snippet></ROW><ROW><id>17303048</id><snippet>args</snippet></ROW><ROW><id>17303048</id><snippet>[handler_file]
class=handlers.TimedRotatingFileHandler
interval=midnight
args=('logs/readings.log',)
</snippet></ROW><ROW><id>17303048</id><snippet>[handler_file]
class=handlers.TimedRotatingFileHandler
args=('logs/readings.log', 'midnight',)
</snippet></ROW><ROW><id>17303062</id><snippet>import difflib

sourcename = 'xiaoshanwujzw'
destname = 'bindresult'

with open('%s.txt' % destname, 'w+') as destfile:

  # we read in the file so that on subsequent runs of this script, we 
  # won't duplicate the lines.
  known_lines = set(destfile.readlines())

  with open('%s.txt' % sourcename) as sourcefile:
    for line in sourcefile:
      similar = False
      for known in known_lines:
        ratio = difflib.SequenceMatcher(None, line, known).ratio()
        if ratio &gt; 0.8:
          print ratio
          print line
          print known
          similar = True
          break
      if not similar:
        destfile.write(line)
        known_lines.add(line)
</snippet></ROW><ROW><id>17303062</id><snippet>ratio()</snippet></ROW><ROW><id>17303062</id><snippet>quick_ratio()</snippet></ROW><ROW><id>17303062</id><snippet>real_quick_ratio()</snippet></ROW><ROW><id>17303490</id><snippet>.communicate</snippet></ROW><ROW><id>17303490</id><snippet>Popen</snippet></ROW><ROW><id>17303490</id><snippet>p1.stdin.write('break main\n')</snippet></ROW><ROW><id>17303490</id><snippet>'\n'</snippet></ROW><ROW><id>17303490</id><snippet>p1.stdout.readline()</snippet></ROW><ROW><id>17303490</id><snippet>start</snippet></ROW><ROW><id>17303490</id><snippet>p1.stdin.write('start ' + args1 + '\n')
p2.stdin.write('start ' + args2 + '\n')
</snippet></ROW><ROW><id>17303490</id><snippet>Popen.poll</snippet></ROW><ROW><id>17303490</id><snippet>None</snippet></ROW><ROW><id>17303490</id><snippet>while True:
    if p1.poll() is not None and p2.poll is not None:
        print 'p1 and p2 have both finished'
        break
    elif p1.poll() is not None:
        print 'p1 finished before p2'
        break
    elif p2.poll() is not None:
        print 'p2 finished before p1'
        break

    p1.stdin.write('continue\n')
    p2.stdin.write('continue\n')
    p1out = p1.stdout.readline()
    p2out = p2.stdout.readline()
</snippet></ROW><ROW><id>17303490</id><snippet>stderr</snippet></ROW><ROW><id>17303490</id><snippet>/dev/null</snippet></ROW><ROW><id>17303560</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17303560</id><snippet>WebDriverWait</snippet></ROW><ROW><id>17303698</id><snippet>relative_paths</snippet></ROW><ROW><id>17303958</id><snippet>textfield</snippet></ROW><ROW><id>17303958</id><snippet>textfield.focus()</snippet></ROW><ROW><id>17303958</id><snippet>import tkinter as tk

root = tk.Tk()
textfield = tk.Text(root)
textfield.pack()
textfield.focus()
root.mainloop()
</snippet></ROW><ROW><id>17304066</id><snippet>timer</snippet></ROW><ROW><id>17304066</id><snippet>threading.Timer</snippet></ROW><ROW><id>17304066</id><snippet>lambda</snippet></ROW><ROW><id>17304066</id><snippet>#!/usr/bin/env python

import time
import smtplib
import threading

if True:
    t = threading.Timer(300, lambda: send_email('Tank temperature Overheat',tank_temp))
    t.start() 
print "rest of the script keeps running"
print "keeps running the scrpit and after 300s the email is sent"
</snippet></ROW><ROW><id>17304066</id><snippet>lambda: send_email('Tank temperature Overheat',tank_temp)
</snippet></ROW><ROW><id>17304066</id><snippet>send_email</snippet></ROW><ROW><id>17304066</id><snippet>t = threading.Timer(300,send_email('Tank temperature Overheat',tank_temp))
</snippet></ROW><ROW><id>17304066</id><snippet>send_email</snippet></ROW><ROW><id>17304066</id><snippet>Timer</snippet></ROW><ROW><id>17304066</id><snippet>n=300

start = time.time()

while (time.time() - start &lt; n):

    led_temp = 56

        if led_temp &gt; 55:
        t = threading.Timer(100, lambda: send_email('Lights temperature Overheat',led_temp))
        t.start()
</snippet></ROW><ROW><id>17304066</id><snippet>while</snippet></ROW><ROW><id>17304066</id><snippet>break</snippet></ROW><ROW><id>17304066</id><snippet>&gt;&gt;&gt; import threading
&gt;&gt;&gt; import threading
&gt;&gt;&gt; def send_email(): print("email sent!")
... 
&gt;&gt;&gt; for _ in range(5):
...     t = threading.Timer(7, send_email)
...     t.start()
... 
&gt;&gt;&gt; email sent!
email sent!
email sent!
email sent!
email sent!
</snippet></ROW><ROW><id>17304066</id><snippet>Timer</snippet></ROW><ROW><id>17304066</id><snippet>email sent!</snippet></ROW><ROW><id>17304066</id><snippet>&gt;&gt;&gt; for i in range(5):
...     t = threading.Timer(7 + i, send_email)
...     t.start()
... 
&gt;&gt;&gt; email sent!
email sent!
email sent!
email sent!
email sent!
</snippet></ROW><ROW><id>17304066</id><snippet>email sent!</snippet></ROW><ROW><id>17304154</id><snippet>{% for tag in tag_filters %} 
    {% with "/?tag="|add:tag as to_cut %}
    &lt;a href='{{ request.get_full_path|cut:to_cut }}'&gt;
    {% endwith %}
    {{ tag }}
    &lt;/a&gt;
{% endfor %} 
</snippet></ROW><ROW><id>17304154</id><snippet>http://www.domain.com/?tags=foo+bar+baz
</snippet></ROW><ROW><id>17304164</id><snippet>&gt;&gt;&gt; lis = [u'File:Saddam Hussein (107).jpg', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'File:AlBakr.jpg', u'Template:Fn (page does not exist)', u'File:Chiracsaddam.jpg', u'File:Donald saddam.jpg', u'Template:Fn (page does not exist)', u'File:SaddamandCuellar.jpg.jpg', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'File:SaddamBaghdadwalkabout.jpg', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'Template:Fn (page does not exist)', u'Kurdish Patriotic Front (page does not exist)', u'File:TrialSaddam.jpg', u'Mohammad Rashdan (page does not exist)', u'Emmanuel Ludot (page does not exist)', u'Marc Henzelin (page does not exist)', u'Adnan Khairallah Tuffah (page does not exist)', u'Nidal al-Hamdani (page does not exist)', u'Ali Hussein (page does not exist)', u'File:SaddamandRana.jpg.jpg', u'Saddam Kamel Majid (page does not exist)', u'Template:Fn (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)', u'Template:Fnb (page does not exist)']
</snippet></ROW><ROW><id>17304164</id><snippet>&gt;&gt;&gt; lis[:] = [item for item in lis if "(page does not exist)" not in item]
</snippet></ROW><ROW><id>17304164</id><snippet>new_lis = [item for item in lis if "(page does not exist)" not in item]
</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; seq = b"\x30\xC0"
&gt;&gt;&gt; seq
b'0\xc0'
</snippet></ROW><ROW><id>17304235</id><snippet>decode</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; seq.decode("UTF-8")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 1: invalid start byte
</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; seq = b"\x30\x3C"
&gt;&gt;&gt; seq.decode("UTF-8")
'0&lt;'
</snippet></ROW><ROW><id>17304235</id><snippet>0&lt;</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; seq = b"\xE0\xAD\xAA"
&gt;&gt;&gt; seq.decode("UTF-8")
'୪'
&gt;&gt;&gt; len(seq.decode("UTF-8"))
1
</snippet></ROW><ROW><id>17304235</id><snippet>ord</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; ord(seq.decode("UTF-8"))
2922
</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; "{:04X}".format( ord(seq.decode("UTF-8")) )
'0B6A'
</snippet></ROW><ROW><id>17304235</id><snippet>0xE0 0xAD 0xAA</snippet></ROW><ROW><id>17304235</id><snippet>U+0B6A</snippet></ROW><ROW><id>17304235</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name( seq.decode("UTF-8") )
'ORIYA DIGIT FOUR'
</snippet></ROW><ROW><id>17304303</id><snippet>#!/usr/bin/python
import os
import time
import urllib2 

os.system("gpio mode 6 out &amp;&amp; gpio mode 5 out")

while True:
    try:
        urllib2.urlopen("http://www.google.com").close()
    except urllib2.URLError:
        print "Not Connected"
        os.system("gpio write 6 0 &amp;&amp; gpio write 5 1")
        time.sleep(1)
    else:
        print "Connected"
        os.system("gpio write 6 1 &amp;&amp; gpio write 5 0")
        break
</snippet></ROW><ROW><id>17304844</id><snippet>toronto</snippet></ROW><ROW><id>17304844</id><snippet>toronto = t.get_place_trends(id=4118)
trend_array = []

if toronto:
    for trend in toronto[0].get('trends', []):
        trend_array.append(trend['name'])
        print trend_array
        print trend
</snippet></ROW><ROW><id>17304963</id><snippet>&gt;&gt;&gt; array2 = [{'id': 'A', 'name': 'Greg'},
... {'id': 'Desk', 'name': 'Will'},
... {'id': 'E', 'name': 'Craig'},
... {'id': 'G', 'name': 'Johnson'}]
&gt;&gt;&gt; array1 = ['A', 'C', 'Desk']
&gt;&gt;&gt; filtered = [item for item in array2 if item['id'] not in array1]
&gt;&gt;&gt; filtered
[{'id': 'E', 'name': 'Craig'}, {'id': 'G', 'name': 'Johnson'}]
</snippet></ROW><ROW><id>17305060</id><snippet>def findZip(selected, search):
    results = []
    with open(selected) as file:
        handle = csv.reader(file, delimiter=',')
        for row in handle:
            if row[0] == search
                results.append(row[1:4])
    return results
</snippet></ROW><ROW><id>17305060</id><snippet>def findZip(selected, search):
    with open(selected) as file:
        handle = csv.reader(file, delimiter=',')
        for row in handle:
            if row[0] == search
                return row[1:4]
</snippet></ROW><ROW><id>17305489</id><snippet>x.replace(",","-",3)</snippet></ROW><ROW><id>17305489</id><snippet>str.replace</snippet></ROW><ROW><id>17305489</id><snippet>count</snippet></ROW><ROW><id>17305489</id><snippet>str.replace</snippet></ROW><ROW><id>17305489</id><snippet>S.replace(old, new[, count]) -&gt; string
</snippet></ROW><ROW><id>17305757</id><snippet>for image in folderToResizeContents:
    for fmt in sizeFormats:
        (w,h) = fmt.split('x')
</snippet></ROW><ROW><id>17305761</id><snippet>import win32com.client
oWS = win32com.client.Dispatch("WScript.Shell")
print("A", "mother starts child")
oEx = oWS.Exec("cscript ..\\vbs\\child.vbs")
while not oEx.Stdout.AtEndOfStream:
   print(oEx.Stdout.ReadLine())
print("B", "mother done")
</snippet></ROW><ROW><id>17305761</id><snippet>A mother starts child
1 child
2 child
3 child
4 child
5 child
B mother done
</snippet></ROW><ROW><id>17305761</id><snippet>print</snippet></ROW><ROW><id>17305761</id><snippet>dir</snippet></ROW><ROW><id>17305767</id><snippet>return x + (nx) * (y + (ny) * (z))
</snippet></ROW><ROW><id>17305767</id><snippet>return x + (nx) * (y + (ny))
</snippet></ROW><ROW><id>17305767</id><snippet>return x + (nx) * y
</snippet></ROW><ROW><id>17305793</id><snippet>import os
print(os.path.abspath(os.curdir))
</snippet></ROW><ROW><id>17305793</id><snippet>os.chdir</snippet></ROW><ROW><id>17305793</id><snippet>open()</snippet></ROW><ROW><id>17305793</id><snippet>open('/home/wayne/test.txt', 'w')</snippet></ROW><ROW><id>17305890</id><snippet>with open("abc") as f:
    #read the first line and set the number from it as the value of `prev`
    num, col4 = next(f).rsplit(None,2)[-2:] #use `str.rsplit` for minimum splits
    prev  = int(num)
    col4_prev = col4
    count = 1                               #initialize `count` to 1
    for lin in f:
        num, col4 = lin.rsplit(None,2)[-2:]
        num  = int(num)                    
        if num - prev == 1:             #if current `num` - `prev` == 1
            count+=1                        # increment `count` 
            prev = num                      # set `prev` = `num`
        else:
            print count,col4_prev       #else print `count` or write it to a file 
            count = 1                       #reset `count` to 1
            prev = num                      #set `prev` = `num`
            col4_prev = col4

    if num - prev != 1:
        print count,col4
</snippet></ROW><ROW><id>17305890</id><snippet>2 400
3 600
2 400
1 111
1 500
1 999
1 888
</snippet></ROW><ROW><id>17305890</id><snippet>aa:bb:cc dd:ee:ff 100 400
aa:bb:cc dd:ee:ff 101 400 
dd:ee:ff aa:bb:cc 230 600 
dd:ee:ff aa:bb:cc 231 600
dd:ee:ff aa:bb:cc 232 600
aa:bb:cc dd:ee:ff 102 400
aa:bb:cc dd:ee:ff 103 400
aa:bb:cc dd:ee:ff 108 111 
dd:ee:ff aa:bb:cc 233 500 
gg:hh:ii jj:kk:ll 450 999
jj:kk:ll gg:hh:ii 600 888 
</snippet></ROW><ROW><id>17305993</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>17305993</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>17305993</id><snippet>import multiprocessing


def produce(n, queue):
    for i in xrange(n):
        queue.put(i)

def worker(in_queue, out_queue):
    for i in iter( in_queue.get, None):
        out_queue.put(i*i)

def consumer(queue):
    ans = []
    for i in iter( queue.get, None):
        print(i)
        ans.append(i)
    return ans


def main(n):
    in_queue = multiprocessing.Queue()
    out_queue = multiprocessing.Queue()
    producer = multiprocessing.Process(target=produce, args=(n, in_queue))
    for i in range(2):
        w = multiprocessing.Process(target=worker, args=(in_queue, out_queue))
        w.start()
    producer.start()
    res = consumer(out_queue)

main(200)
</snippet></ROW><ROW><id>17305993</id><snippet>consumer</snippet></ROW><ROW><id>17305993</id><snippet>consumer</snippet></ROW><ROW><id>17305993</id><snippet>None</snippet></ROW><ROW><id>17306347</id><snippet>import requests
url = 'http://ES_search_demo.com/document/record/_search?pretty=true'
data = '{"query":{"bool":{"must":[{"text":{"record.document":"SOME_JOURNAL"}},{"text":{"record.articleTitle":"farmers"}}],"must_not":[],"should":[]}},"from":0,"size":50,"sort":[],"facets":{}}'
response = requests.get(url, data=data)
</snippet></ROW><ROW><id>17306347</id><snippet>response.text</snippet></ROW><ROW><id>17306347</id><snippet>response.json()</snippet></ROW><ROW><id>17306347</id><snippet>response.status_code</snippet></ROW><ROW><id>17306674</id><snippet>def mapindex(self):
    """Function called to update a row in the tableview and database"""
    i, ok = QtGui.QInputDialog.getInteger(self,
            "Update Row", "Row:", 1, 1, 100, 1)
    row = "%d" % i
    row = int(row) - 1
    if ok:
        self.ui.Submit.hide()
        self.ui.updateButton.show()
        self.mapper.setCurrentIndex(row)


def updaterow(self):
    """Function to update data from line edits to the database"""
    text1 = self.ui.lineEditUser.text()
    text2 = self.ui.lineEditEmail.text()
    row = self.mapper.currentIndex() #being the missing link
    self.model.setData(self.model.index(row, 0), str(text1).upper())
    self.model.setData(self.model.index(row, 1), str(text2))
    self.model.submitAll()
    self.ui.lineEditUser.clear()
    self.ui.lineEditEmail.clear()
    self.ui.Submit.show()
    self.ui.updateButton.hide()
</snippet></ROW><ROW><id>17306808</id><snippet>subprocess</snippet></ROW><ROW><id>17306808</id><snippet>shell=True</snippet></ROW><ROW><id>17306808</id><snippet>/bin/sh -c 'echo' '$ATESTVARIABLE'
</snippet></ROW><ROW><id>17306808</id><snippet>/bin/sh -c 'echo $ATESTVARIABLE'
</snippet></ROW><ROW><id>17306808</id><snippet>import os, subprocess

os.environ['ATESTVARIABLE'] = 'value'
value = subprocess.check_output('echo $ATESTVARIABLE', shell=True)
assert 'value' in value
</snippet></ROW><ROW><id>17306808</id><snippet>/bin/sh -c 'echo' '$ATESTVARIABLE'
</snippet></ROW><ROW><id>17306808</id><snippet>echo</snippet></ROW><ROW><id>17306808</id><snippet>$0</snippet></ROW><ROW><id>17306808</id><snippet>'$ATESTVARIABLE'</snippet></ROW><ROW><id>17306808</id><snippet>$ /bin/sh -c 'echo $0'
/bin/sh
$ /bin/sh -c 'echo $0' '$ATESTVARIABLE'
$ATESTVARIABLE
</snippet></ROW><ROW><id>17306808</id><snippet>/bin/sh -c 'echo $ATESTVARIABLE'
</snippet></ROW><ROW><id>17306808</id><snippet>echo</snippet></ROW><ROW><id>17306808</id><snippet>ATESTVARIABLE</snippet></ROW><ROW><id>17306928</id><snippet>INST_HT = [1.545000,
           1.335000]
lines = open('tmp.txt')
out = open('tmp2.txt', 'w')
i = -1
while True:
    try:
        line = lines.next()
    except StopIteration:
        break
    if 'slope' in line.lower():
        i += 1
        out.write(line)
        while True:
            line = lines.next()
            if 'end slope' in line.lower():
                out.write(line)
                break
            else:
                out.write('    ' + line.strip()[:-1] + ', ' + str(INST_HT[i]) + ';\n')
    else:
        out.write(line)
out.close()
</snippet></ROW><ROW><id>17307066</id><snippet>while move in ("5,1", "5,2", "5,3", "5,4", ... etc):
    # body
</snippet></ROW><ROW><id>17307107</id><snippet>--output</snippet></ROW><ROW><id>17307107</id><snippet>mallet</snippet></ROW><ROW><id>17307107</id><snippet>tutorial.mallet</snippet></ROW><ROW><id>17307107</id><snippet>C:\mallet-2.0.7\inputdirectory</snippet></ROW><ROW><id>17307107</id><snippet>C:\mallet-2.0.7\inputdirectory</snippet></ROW><ROW><id>17307107</id><snippet>mallet</snippet></ROW><ROW><id>17307107</id><snippet>C:\mallet-2.0.7\inputdirectory</snippet></ROW><ROW><id>17307141</id><snippet>ax.set_title( "${0} \\times 10^{{{1}}}$".format('3.5','+20'))
</snippet></ROW><ROW><id>17307141</id><snippet>ax.set_title( "$%s \\times 10^{%s}$" % ('3.5','+20'))
</snippet></ROW><ROW><id>17307289</id><snippet>import __main__
__main__.some_variable = module.module_variable
</snippet></ROW><ROW><id>17307294</id><snippet>check-resize</snippet></ROW><ROW><id>17307294</id><snippet>resize_image()</snippet></ROW><ROW><id>17307294</id><snippet>check-resize</snippet></ROW><ROW><id>17307415</id><snippet>upload: .*
</snippet></ROW><ROW><id>17307415</id><snippet>upload: .*\.(html|css|js|gif|jpg|png|ico)
</snippet></ROW><ROW><id>17307442</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict()
&gt;&gt;&gt; od[1] = 2
&gt;&gt;&gt; od[0] = 4
&gt;&gt;&gt; od
OrderedDict([(1, 2), (0, 4)])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17307442</id><snippet>IRONPYTHONPATH</snippet></ROW><ROW><id>17307521</id><snippet>global</snippet></ROW><ROW><id>17307521</id><snippet>global</snippet></ROW><ROW><id>17307521</id><snippet>pickle</snippet></ROW><ROW><id>17307521</id><snippet>lis = ["link1", "link2",...]

def update():
  global lis
  #do something
  return lis
</snippet></ROW><ROW><id>17307521</id><snippet>import pickle
def update():
  lis = pickle.load( open( "lis.pkl", "rb" ) ) # Load the list
  #do something with lis                     #modify it 
  pickle.dump( lis, open( "lis.pkl", "wb" ) )  #save it again
</snippet></ROW><ROW><id>17307606</id><snippet>&gt;&gt;&gt; pickle.dumps(data, 0)
'(dp0\nI1\nV\xe9\np1\ns.'
</snippet></ROW><ROW><id>17307606</id><snippet>TextField</snippet></ROW><ROW><id>17307606</id><snippet>&gt;&gt;&gt; pickled_data.decode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xe9 in position 9: invalid continuation byte
</snippet></ROW><ROW><id>17307606</id><snippet>TextField</snippet></ROW><ROW><id>17307606</id><snippet>BinaryField</snippet></ROW><ROW><id>17307606</id><snippet>bytes</snippet></ROW><ROW><id>17307606</id><snippet>bytes</snippet></ROW><ROW><id>17307606</id><snippet>bytes</snippet></ROW><ROW><id>17307606</id><snippet>latin1</snippet></ROW><ROW><id>17307606</id><snippet>&gt;&gt;&gt; pickled_data.decode('latin1')
u'(dp0\nI1\nV\xe9\np1\ns.'
</snippet></ROW><ROW><id>17307606</id><snippet>&gt;&gt;&gt; encoded = pickled_data.decode('latin1')
&gt;&gt;&gt; pickle.loads(encoded)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python2.7/pickle.py", line 1381, in loads
    file = StringIO(str)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 9: ordinal not in range(128)
&gt;&gt;&gt; pickle.loads(encoded.encode('latin1'))
{1: u'\xe9'}
</snippet></ROW><ROW><id>17307606</id><snippet>\n</snippet></ROW><ROW><id>17307606</id><snippet>\r\n</snippet></ROW><ROW><id>17307755</id><snippet>import os
path="c:\\windows\\system32\\loopymusic.wav"
f=open(path,"rb")

# read the ByteRate field from file (see the Microsoft RIFF WAVE file format)
# https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
# ByteRate is located at the first 28th byte
f.seek(28)
a = f.read(4)

# convert string a into integer/longint value
# a is little endian, so proper conversion is required
byteRate = 0
for i in range(4):
    byteRate += a[i] * pow(256, i)

# get the file size in bytes
fileSize = os.path.getsize(path)  

# the duration of the data, in milliseconds, is given by
ms = ((fileSize - 44) * 1000)) / byteRate

print "File duration in miliseconds : " % ms
print "File duration in H,M,S,mS : " % ms / (3600 * 1000) % "," % ms / (60 * 1000) % "," % ms / 1000 % "," ms % 1000
print "Actual sound data (in bytes) : " % fileSize - 44
f.close()
</snippet></ROW><ROW><id>17307841</id><snippet>python_pip "extremely_cool_package" do
     action :install
     options "--index-url=http://username:password@server address:portno/simple"
end
</snippet></ROW><ROW><id>17307852</id><snippet>substring</snippet></ROW><ROW><id>17307852</id><snippet>public String slice_start(String s, int startIndex) {
    if (startIndex &lt; 0) startIndex = s.length() + startIndex;
    return s.substring(startIndex);
}

public String slice_end(String s, int endIndex) {
    if (endIndex &lt; 0) endIndex = s.length() + endIndex;
    return s.substring(0, endIndex);
}

public String slice_range(String s, int startIndex, int endIndex) {
    if (startIndex &lt; 0) startIndex = s.length() + startIndex;
    if (endIndex &lt; 0) endIndex = s.length() + endIndex;
    return s.substring(startIndex, endIndex);
}
</snippet></ROW><ROW><id>17307852</id><snippet>subSequence</snippet></ROW><ROW><id>17307852</id><snippet>substring</snippet></ROW><ROW><id>17307852</id><snippet>subSequence</snippet></ROW><ROW><id>17307852</id><snippet>String</snippet></ROW><ROW><id>17307852</id><snippet>CharSequence</snippet></ROW><ROW><id>17307910</id><snippet>1 2 3
4 5 6
7 8 ''
</snippet></ROW><ROW><id>17307910</id><snippet>sol = np.genfromtxt("a.txt",
                dtype=float,
                invalid_raise=False,
                missing_values='',
                usemask=False,
                filling_values=0.0)
</snippet></ROW><ROW><id>17307910</id><snippet>array([[  1.,   2.,   3.],
       [  4.,   5.,   6.],
       [  7.,   8.,  nan]])
</snippet></ROW><ROW><id>17307910</id><snippet>sol = np.genfromtxt("a.txt",
                dtype=float,
                invalid_raise=False,
                usemask=False,
                filling_values=0.0,
                usecols=(0,1))
sol
array([[ 1.,  2.],
   [ 4.,  5.],
   [ 7.,  8.]])

sol2 = np.genfromtxt("a.txt",
                dtype=float,
                invalid_raise=False,
                usemask=False,
                filling_values=0.0,
                usecols=(2,),
                skip_footer=1)
sol2
array([ 3.,  6.])
</snippet></ROW><ROW><id>17307910</id><snippet>sol2=np.append(sol2, 0.0)
sol2=sol2.reshape(3,1)
sol=np.hstack([sol,sol2])
sol
array([[ 1.,  2.,  3.],
   [ 4.,  5.,  6.],
   [ 7.,  8.,  0.]])
</snippet></ROW><ROW><id>17308029</id><snippet>and_</snippet></ROW><ROW><id>17308029</id><snippet>from sqlalchemy import and_
variants = variants.filter_by(and_(cond_1,cond_2....cond_n)).distinct()
</snippet></ROW><ROW><id>17308052</id><snippet>import subprocess
params = ['convert', 'pdf_file', 'jpg:-']
image_data = subprocess.check_output(params)
</snippet></ROW><ROW><id>17308242</id><snippet>Username =forms.CharField(max_length=35,
                          required=True, 
                          widget=forms.TextInput(attrs={'placeholder': 'Username'}))
</snippet></ROW><ROW><id>17308270</id><snippet>def social_home(request):
    oauth_token_secret = request.session['twitter_auth']['oauth_token_secret']
    oauth_token = request.session['twitter_auth']['oauth_token']
    twitter = Twython(settings.TWITTER_KEY, settings.TWITTER_SECRET, oauth_token, oauth_token_secret)
    authorized_tokens = twitter.get_authorized_tokens(request.GET['oauth_verifier'])

    twitter = Twython(settings.TWITTER_KEY, settings.TWITTER_SECRET, authorized_tokens['oauth_token'], authorized_tokens['oauth_token_secret'])
    user_tweets = twitter.get_home_timeline()
    return render(request, "social_summary.html", {"user_tweets":user_tweets})
</snippet></ROW><ROW><id>17308353</id><snippet>def match_on_list_of_strings(list_of_strings):
    regex = compile(r'(?=(%s))')
    for string in list_of_strings:
        yield regex.findall(string)
</snippet></ROW><ROW><id>17308353</id><snippet>def match_on_list_of_strings(bigstring, list_of_strings):
    for string in list_of_strings:
        if string in bigstring:
            yield string
</snippet></ROW><ROW><id>17308353</id><snippet>def match_on_list_of_strings(bigstring, list_of_strings):
    for string in list_of_strings:
        if re.match('.*'+string+'.*', bigstring):
            yield string
</snippet></ROW><ROW><id>17308474</id><snippet>import matplotlib.pyplot as plt

...
plotting nitty gritty
...

plt.setp(ax.get_xmajorticklabels(), visible=False)
plt.show()
</snippet></ROW><ROW><id>17308476</id><snippet>id()</snippet></ROW><ROW><id>17308476</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 1            #same id() here as integer 1 is cached by python.
&gt;&gt;&gt; x is y
True
</snippet></ROW><ROW><id>17308476</id><snippet>&gt;&gt;&gt; x = y = 300
&gt;&gt;&gt; x is y        # x and y point to the same object
True
&gt;&gt;&gt; x += 1        # modify x
&gt;&gt;&gt; x             #  x now points to a different object 
301
&gt;&gt;&gt; y             #y still points to the old object
300
</snippet></ROW><ROW><id>17308476</id><snippet>&gt;&gt;&gt; x = y = []
&gt;&gt;&gt; x is y
True
&gt;&gt;&gt; x.append(1)   # list.extend is an in-place operation
&gt;&gt;&gt; y.append(2)   # in-place operation 
&gt;&gt;&gt; x
[1, 2]
&gt;&gt;&gt; y             #works fine so far
[1, 2]

&gt;&gt;&gt; x = x + [1]   #not an in-place operation
&gt;&gt;&gt; x
[1, 2, 1]          #assigns a new object to x
&gt;&gt;&gt; y              #y still points to the same old object
[1, 2]
</snippet></ROW><ROW><id>17308754</id><snippet>value = myDict.get('lastName', myDict.get('firstName', myDict.get('userName')))
</snippet></ROW><ROW><id>17308754</id><snippet>value = None
for key in keySet:
    if key in myDict:
        value = myDict[key]
        break
</snippet></ROW><ROW><id>17308767</id><snippet>#!/usr/bin/env python
import os, pexpect

class zz:
    def __init__(self):
        child = pexpect.spawn ('/home/usr/Desktop/b.sh')
        # grab the first screen from 'less'
        child.read(1)
        child.send('q')

z = zz()
</snippet></ROW><ROW><id>17308767</id><snippet>~/tmp/reader$ cat a.py
#!/usr/bin/env python
import pexpect

try:
    open('status.txt', 'w')
    child = pexpect.spawn('/bin/sh "./b.sh"', timeout=10)
    child.send('q')
    child.expect(pexpect.EOF)
except Exception,e:
    print 'exception'
print open('status.txt').read()


~/tmp/reader$ cat text.txt
iamtext

~/tmp/reader$ cat b.sh
#!/bin/sh
less text.txt
echo 'all done'
sleep 3
date &gt; status.txt
</snippet></ROW><ROW><id>17308819</id><snippet>chdir</snippet></ROW><ROW><id>17308819</id><snippet>listdir</snippet></ROW><ROW><id>17308819</id><snippet>open</snippet></ROW><ROW><id>17309010</id><snippet>csv</snippet></ROW><ROW><id>17309010</id><snippet>import re
import csv

username = input()

with open('Users.csv', 'rt') as f:
     reader = csv.reader(f, delimiter=',') # good point by @paco
     for row in reader:
          for field in row:
              if field == username:
                  print "is in file"
</snippet></ROW><ROW><id>17309010</id><snippet>with open('Users.csv', 'rt') as f:
     reader = csv.reader(f, delimiter=',')
     for row in reader:
          if username == row[2]: # if the username shall be on column 3 (-&gt; index 2)
              print "is in file"
</snippet></ROW><ROW><id>17309048</id><snippet>0xFFE0[length]0x4A46585800</snippet></ROW><ROW><id>17309048</id><snippet>0xFFE0[length]0x4A46494600</snippet></ROW><ROW><id>17309073</id><snippet>L_1 = len(seq_1)
L_2 = len(seq_2)
L_3 = len(seq_3)

junctions = [2, 9, 15, 20]
c_1, c_2, c_3 = (0, 0, 0)

for j in junctions:
    if j &lt; L_1:
        c_1 += 1
    elif j &lt; L_1 + L_2:
        c_2 += 1
    elif j &lt; L_1 + L_2 + L_3:
        c_3 += 1
    else:
        Raise error
</snippet></ROW><ROW><id>17309178</id><snippet>your_list.index(min(your_list))</snippet></ROW><ROW><id>17309348</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; name_owner = 'Jimmy'
&gt;&gt;&gt; r = re.compile(r'[A-Za-z\s]+\nName: {}'.format(name_owner))
&gt;&gt;&gt; len([m for m in r.finditer(listing_read) if 'BTS' not in m.group(0)])
2
</snippet></ROW><ROW><id>17309607</id><snippet>/home/alex/build</snippet></ROW><ROW><id>17309607</id><snippet>sudo pip</snippet></ROW><ROW><id>17309607</id><snippet>/home</snippet></ROW><ROW><id>17309607</id><snippet>root</snippet></ROW><ROW><id>17309607</id><snippet>root</snippet></ROW><ROW><id>17309607</id><snippet>pip</snippet></ROW><ROW><id>17309607</id><snippet>--build</snippet></ROW><ROW><id>17309607</id><snippet>pip install --help</snippet></ROW><ROW><id>17309607</id><snippet>pip</snippet></ROW><ROW><id>17309607</id><snippet>--user</snippet></ROW><ROW><id>17309607</id><snippet>sudo</snippet></ROW><ROW><id>17309607</id><snippet>sudo</snippet></ROW><ROW><id>17309616</id><snippet>import os</snippet></ROW><ROW><id>17309616</id><snippet>os.system(str("cat"+filename))</snippet></ROW><ROW><id>17309616</id><snippet>def show(filename):
   os.system("cat"+filename)
#notice that i used the filename as parameter,
#however if its a global variable this is unnecessary.
</snippet></ROW><ROW><id>17309747</id><snippet>ZipFile</snippet></ROW><ROW><id>17309747</id><snippet>close</snippet></ROW><ROW><id>17309747</id><snippet>close()</snippet></ROW><ROW><id>17309747</id><snippet>getvalue()</snippet></ROW><ROW><id>17309747</id><snippet>StringIO</snippet></ROW><ROW><id>17309747</id><snippet>str</snippet></ROW><ROW><id>17309747</id><snippet>StringIO</snippet></ROW><ROW><id>17309747</id><snippet>close()</snippet></ROW><ROW><id>17309747</id><snippet>BytesIO</snippet></ROW><ROW><id>17309747</id><snippet>StringIO</snippet></ROW><ROW><id>17309747</id><snippet>BytesIO</snippet></ROW><ROW><id>17309747</id><snippet>with</snippet></ROW><ROW><id>17309747</id><snippet>close</snippet></ROW><ROW><id>17309747</id><snippet>with BytesIO() as zip_file:
    with zipfile.ZipFile(zip_file, 'a', zipfile.ZIP_DEFLATED, False) as zip:
        zip.writestr('redirects.csv', f_redirects.getvalue())
        zip.writestr('links.csv', f_bad_links.getvalue())
        zip.writestr('metadata.csv', f_metadata.getvalue())
    zip_contents = zip_file.getvalue()

k = Key(BUCKET)
k.key = '%s.zip' % base_name
k.set_metadata('Content-Type', 'application/zip')
k.set_contents_from_string(zip_contents)
</snippet></ROW><ROW><id>17309747</id><snippet>StringIO</snippet></ROW><ROW><id>17309747</id><snippet>with contextlib.closing(StringIO()) as zip_file:
</snippet></ROW><ROW><id>17309764</id><snippet>&gt;&gt;&gt; import httplib, urllib
&gt;&gt;&gt; params = urllib.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
&gt;&gt;&gt; print params
'%40action=show&amp;%40number=12524&amp;%40type=issue'
&gt;&gt;&gt; params = urllib.urlencode({'number': 12524, 'type': 'issue', 'action': 'show'})
&gt;&gt;&gt; print params
'action=show&amp;type=issue&amp;number=12524'
</snippet></ROW><ROW><id>17309764</id><snippet>@</snippet></ROW><ROW><id>17309764</id><snippet>%40</snippet></ROW><ROW><id>17309764</id><snippet>POST</snippet></ROW><ROW><id>17309765</id><snippet>lightness method</snippet></ROW><ROW><id>17309765</id><snippet>(max(R, G, B) + min(R, G, B)) / 2
</snippet></ROW><ROW><id>17309765</id><snippet>average method</snippet></ROW><ROW><id>17309765</id><snippet>(R + G + B) / 3
</snippet></ROW><ROW><id>17309765</id><snippet>luminosity method</snippet></ROW><ROW><id>17309765</id><snippet>0.21 R + 0.71 G + 0.07 B
</snippet></ROW><ROW><id>17309765</id><snippet>      original           |         average          |         luminosity 
</snippet></ROW><ROW><id>17309765</id><snippet>px = getPixels(pic)
level = int(0.21 * getRed(px) + 0.71 * getGreen(px) + 0.07 * getBlue(px))
color = makeColor(level, level, level)
</snippet></ROW><ROW><id>17309765</id><snippet>level = 255 - level
</snippet></ROW><ROW><id>17309765</id><snippet>def greyScaleAndNegate(pic):  

   for px in getPixels(pic):
      level = 255 - int(0.21*getRed(px) + 0.71*getGreen(px) +0.07*getBlue(px))
      color = makeColor(level, level, level)
      setColor(px, color)


file = pickAFile()
picture = makePicture(file) 
greyScaleAndNegate(picture)
show(picture)
</snippet></ROW><ROW><id>17309765</id><snippet>      original          |         luminosity        |           negative
</snippet></ROW><ROW><id>17309904</id><snippet>def paths(tree, path=()):
    for key, subtree in tree.items():
        if subtree:
            yield from paths(subtree, path + (key,))
        else:
            yield path + (key,)
</snippet></ROW><ROW><id>17309904</id><snippet>def prefix_paths(prefix_length, tree, path=()):
    for key, subtree in tree.items():
        if subtree and len(path) + 1 &lt; prefix_length:
            yield from prefix_paths(prefix_length, subtree, path + (key,))
        else:
            yield path + (key,)
</snippet></ROW><ROW><id>17309904</id><snippet>&gt;&gt;&gt; results = list(prefix_paths(3, taxonomy))
&gt;&gt;&gt; print(results)
[('Animalia', 'Chordata', 'Mammalia'),
 ('Plantae', 'Solanales', 'Solanaceae'),
 ('Plantae', 'Solanales', 'Convolvulaceae')]
</snippet></ROW><ROW><id>17309904</id><snippet>&gt;&gt;&gt; flatten = itertools.chain.from_iterable
&gt;&gt;&gt; keys = flatten(prefix_paths(3, taxonomy))
&gt;&gt;&gt; unique_keys = tuple(set(keys))
&gt;&gt;&gt; print(unique_keys)
('Chordata', 'Convolvulaceae', 'Plantae', 'Solanales', 'Animalia', 'Mammalia', 'Solanaceae')
</snippet></ROW><ROW><id>17309904</id><snippet>taxonomy['Animalia']['Chordata']['Mammalia']
</snippet></ROW><ROW><id>17309904</id><snippet>dicts(taxonomy)['Animalia']['Chordata']['Mammalia']
</snippet></ROW><ROW><id>17309904</id><snippet>dicts(taxonomy['Animalia']['Chordata']['Mammalia'])
</snippet></ROW><ROW><id>17309904</id><snippet>def subtree(tree, three_keys):
    return tree[three_keys[0]][three_keys[1]][three_keys[2]]
</snippet></ROW><ROW><id>17309904</id><snippet>def subtree(tree, keys):
    while keys:
        tree, keys = tree[keys[0]], keys[1:]
    return tree
</snippet></ROW><ROW><id>17309904</id><snippet>subtree(taxonomy, ('Animalia', 'Chordata', 'Mammalia'))
</snippet></ROW><ROW><id>17309904</id><snippet>taxonomy</snippet></ROW><ROW><id>17309904</id><snippet>dicts</snippet></ROW><ROW><id>17309904</id><snippet>{'Carnivora': {'Canidae': {'Canis': {'dog': {}}},
</snippet></ROW><ROW><id>17309904</id><snippet>defaultdict</snippet></ROW><ROW><id>17309904</id><snippet>pprint.pprint(subtree(dicts(taxonomy), ('Animalia', 'Chordata', 'Mammalia')))
</snippet></ROW><ROW><id>17309904</id><snippet>{'Carnivora': {'Canidae': {'Canis': {'dog': {}}},
               'Felidae': {'Felis': {'cat': {}},
                           'Panthera': {'lion': {}}}}}}
</snippet></ROW><ROW><id>17310038</id><snippet>text/html</snippet></ROW><ROW><id>17310038</id><snippet>Content-Type</snippet></ROW><ROW><id>17310038</id><snippet>text/plain</snippet></ROW><ROW><id>17310038</id><snippet># If you want *all* your responses to be text/plain
# then this is what you want
@app.after_request
def treat_as_plain_text(response):
    response.headers["content-type"] = "text/plain"
    return response

# If you want only *this* route to respond
# with Content-Type=text/plain
@app.route("/plain-text")
def a_plain_text_route():
    response = make_response(getKickstartFile())
    response.headers["content-type"] = "text/plain"
    return response
</snippet></ROW><ROW><id>17310038</id><snippet>@route("/plain-text")
def plain_text():
    response.content_type = "text/plain"
    return """This
              multi-line string
              will show up
              just fine"""
</snippet></ROW><ROW><id>17310128</id><snippet>print "1234567890" * 2
print "{:4}{:4}{:4}{:4}".format('aaaa', 'bbbb', 'cccc', 'dddd')

--output:--
12345678901234567890
aaaabbbbccccdddd
</snippet></ROW><ROW><id>17310128</id><snippet>lb.insert(tk.END, "{:&lt;5}-{:&lt;2}".format(123, 9))
</snippet></ROW><ROW><id>17310128</id><snippet>'&lt;'   Forces the field to be left-aligned within the available space 
      (this is the default for most objects).
</snippet></ROW><ROW><id>17310128</id><snippet>__format__()</snippet></ROW><ROW><id>17310128</id><snippet>print "{:4}".format("a")
print "{:4}".format(9)

--output:--
a   
   9
</snippet></ROW><ROW><id>17310128</id><snippet>import Tkinter as tk

root = tk.Tk()
root.geometry("1000x200")

lb = tk.Listbox(root, width=150)
lb.insert("1", "{:4}{:4}".format("a", "b") )
lb.insert(tk.END, "1234567890" * 4)
lb.insert(tk.END, "{:&lt;17}{:&lt;10}".format(100, 200) )
lb.pack()

root.mainloop()
</snippet></ROW><ROW><id>17310128</id><snippet>import Tkinter as tk
import tkFont

root = tk.Tk()

my_font = tkFont.Font(family="Monaco", size=12)  #Must come after the previous line.

root.geometry("1000x200")

lb = tk.Listbox(root, width=150, font=my_font)
lb.insert("1", "{:4}{:4}".format("a", "b") )
lb.insert(tk.END, "1234567890" * 4)
lb.insert(tk.END, "{:&gt;10}{:&gt;10}".format(100, 200) )
lb.pack()

root.mainloop()
</snippet></ROW><ROW><id>17310230</id><snippet>chaid</snippet></ROW><ROW><id>17310230</id><snippet>library("CHAID")

### fit tree to subsample
set.seed(290875)
USvoteS &lt;- USvote[sample(1:nrow(USvote), 1000),]
ctrl &lt;- chaid_control(minsplit = 200, minprob = 0.1)
chaidUS &lt;- chaid(vote3 ~ ., data = USvoteS, control = ctrl)
print(chaidUS)
</snippet></ROW><ROW><id>17310268</id><snippet>pass</snippet></ROW><ROW><id>17310268</id><snippet>while True:
    pass  # The pass is needed syntactically
</snippet></ROW><ROW><id>17310268</id><snippet>continue</snippet></ROW><ROW><id>17310268</id><snippet>i = 1
while i&lt;5:
    continue   # Endless loop because we're going to the next iteration
    i = i + 1
</snippet></ROW><ROW><id>17310321</id><snippet>&gt;&gt;&gt; lst = [['bread', 0, 5, 2], ['pasta', 2, 8, 9], ['onion', 3, 6, 12]]
&gt;&gt;&gt; d = {lst[0][0] : lst[0]}
{'bread': ['bread', 0, 5, 2]}
</snippet></ROW><ROW><id>17310321</id><snippet>&gt;&gt;&gt; locals()[lst[0][0]] = lst[0]
&gt;&gt;&gt; bread
['bread', 0, 5, 2]
</snippet></ROW><ROW><id>17310321</id><snippet>list</snippet></ROW><ROW><id>17310342</id><snippet>sys.getrefcount()</snippet></ROW><ROW><id>17310342</id><snippet>a</snippet></ROW><ROW><id>17310342</id><snippet>b</snippet></ROW><ROW><id>17310464</id><snippet>['&lt;a href="%s"&gt;%s' % (n, l) for (n, l) in zip(name, link)]
</snippet></ROW><ROW><id>17310464</id><snippet>n</snippet></ROW><ROW><id>17310464</id><snippet>l</snippet></ROW><ROW><id>17310554</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>17310554</id><snippet>&gt;&gt;&gt; soup.find('img', width=True).parent['href']
'/wiki/File:Edmund-Hillary.web.jpg'
</snippet></ROW><ROW><id>17310554</id><snippet>findAll</snippet></ROW><ROW><id>17310554</id><snippet>.siblings</snippet></ROW><ROW><id>17310585</id><snippet>toggled</snippet></ROW><ROW><id>17310585</id><snippet> def on_cellrenderertoggle_toggled(self, cellrenderertoggle, path):
    # self.liststore is the tree modal of that treeview
    self.liststore[path][1] = not self.liststore[path][1]
</snippet></ROW><ROW><id>17310687</id><snippet>b=[]
a = Board_status.objects.values('board_id').distinct()
for i in range(a.count()):
 b.append(Board_status.objects.filter(board_id=a[i]['board_id']).latest('time'))
</snippet></ROW><ROW><id>17310734</id><snippet>from fortanFile import fortranFile</snippet></ROW><ROW><id>17310734</id><snippet>from fortranFile import FortranFile</snippet></ROW><ROW><id>17310734</id><snippet>pip</snippet></ROW><ROW><id>17310734</id><snippet>fortranfile</snippet></ROW><ROW><id>17310734</id><snippet>numpy</snippet></ROW><ROW><id>17310734</id><snippet>apt-get install -y libpython-dev # For compiling the numpy C wrappers.
                                 # May alternatively be called python-dev or python-devel.
pip install numpy
pip install fortranfile
</snippet></ROW><ROW><id>17310769</id><snippet>text.read()</snippet></ROW><ROW><id>17310769</id><snippet>text1 = open('/Users/student/Desktop/Harry.txt', 'r')
x = text1.read()
print(x) 
</snippet></ROW><ROW><id>17310863</id><snippet>&gt;&gt;&gt; str(u'あ')
UnicodeEncodeError: 'ascii' codec can't encode character u'\u3042' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>17310863</id><snippet>encode('ascii')</snippet></ROW><ROW><id>17310863</id><snippet>&gt;&gt;&gt; u'あ'.encode('ascii')
UnicodeEncodeError: 'ascii' codec can't encode character u'\u3042' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>17310863</id><snippet>str</snippet></ROW><ROW><id>17310863</id><snippet>&gt;&gt;&gt; bytes(u'あ')
TypeError: string argument without an encoding
</snippet></ROW><ROW><id>17311225</id><snippet>On.*?wrote</snippet></ROW><ROW><id>17311225</id><snippet>On ... wrote:</snippet></ROW><ROW><id>17311225</id><snippet>On.*wrote:\s*</snippet></ROW><ROW><id>17311225</id><snippet>def format_mail_plain(value, from_address):
    value = re.compile(r'^On.*?wrote:\s*', re.IGNORECASE | re.MULTILINE | re.DOTALL).sub('', value)
    res = [re.compile(r'From:\s*' + re.escape(from_address), re.IGNORECASE),
           re.compile('&lt;' + re.escape(from_address) + '&gt;', re.IGNORECASE),
           re.compile(r'-+original\s+message-+\s*$', re.IGNORECASE),
           re.compile(r'^from:', re.IGNORECASE),
           re.compile(r'^&gt;')]

    lines = filter(None, [line.rstrip() for line in value.split('\n')])

    result = []
    for line in lines:
        result.append(line)
        for reg_ex in res:
            if reg_ex.search(line):
                result.pop()
                break

    return '\n'.join(filter(None, result))
</snippet></ROW><ROW><id>17311307</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date.today()
&gt;&gt;&gt; filename = 'ex{:02}{:02}{:02}.log'.format(today.year%100, today.month, today.day)
&gt;&gt;&gt; filename
'ex130625.log'
</snippet></ROW><ROW><id>17311307</id><snippet>strftime</snippet></ROW><ROW><id>17311307</id><snippet>&gt;&gt;&gt; today.strftime('ex%y%m%d.log')
'ex130625.log'
</snippet></ROW><ROW><id>17311402</id><snippet>ValueError</snippet></ROW><ROW><id>17311402</id><snippet>data.append(...)</snippet></ROW><ROW><id>17311402</id><snippet>[
    {
        "direction": "left",
        "time": 1
    },
    {
        "direction": "right",
        "time": 2
    }
]
</snippet></ROW><ROW><id>17311402</id><snippet>with open('output.json', 'r') as f:
    data = json.load(f)
</snippet></ROW><ROW><id>17311402</id><snippet>{
    "direction": "left",
    "time": 1
}
{
    "direction": "right",
    "time": 2
}
</snippet></ROW><ROW><id>17311402</id><snippet>with open('output.json', 'r') as f:
    json_data = f.read()
</snippet></ROW><ROW><id>17311402</id><snippet>decode_raw</snippet></ROW><ROW><id>17311402</id><snippet>JSONDecoder</snippet></ROW><ROW><id>17311402</id><snippet>decoder = json.JSONDecoder()
</snippet></ROW><ROW><id>17311402</id><snippet>while json_data.strip():  # while there's still non-whitespace...
    # strip off whitespace on the left side of the string
    data = json_data.lstrip()
    # and parse an item, setting the new data to be whatever's left
    item, data = decoder.parse_raw(data)
    # ...and then append that item to our list
    data.append(item)
</snippet></ROW><ROW><id>17311608</id><snippet>writer = UnicodeWriter(response, quoting=csv.QUOTE_ALL, encoding="utf-8-sig")
</snippet></ROW><ROW><id>17311608</id><snippet>writer = UnicodeWriter(response, quoting=csv.QUOTE_ALL, encoding="utf16")
</snippet></ROW><ROW><id>17311608</id><snippet>utf8</snippet></ROW><ROW><id>17311608</id><snippet>utf-16le</snippet></ROW><ROW><id>17311608</id><snippet>utf-16be</snippet></ROW><ROW><id>17311903</id><snippet>zip</snippet></ROW><ROW><id>17311903</id><snippet>&lt;zip object at 0x7fea10ce4b90&gt;</snippet></ROW><ROW><id>17311903</id><snippet>list</snippet></ROW><ROW><id>17311903</id><snippet>list(zip(name,number))
</snippet></ROW><ROW><id>17311903</id><snippet>dict(zip(name,number))
</snippet></ROW><ROW><id>17312143</id><snippet>&lt;appname&gt;</snippet></ROW><ROW><id>17312143</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17312143</id><snippet>django-admin.py startapp &lt;appneam&gt;</snippet></ROW><ROW><id>17312143</id><snippet>\&lt;mainfolder&gt;\&lt;projectfolder&gt;</snippet></ROW><ROW><id>17312143</id><snippet>from &lt;yourprojectname&gt;.&lt;yourappname&gt;.views import hello
</snippet></ROW><ROW><id>17312143</id><snippet>django-admin.py startapp &lt;appneam&gt;</snippet></ROW><ROW><id>17312143</id><snippet>\&lt;mainfolder&gt;\</snippet></ROW><ROW><id>17312143</id><snippet>from &lt;yourappname&gt;.views import hello
</snippet></ROW><ROW><id>17312204</id><snippet>return</snippet></ROW><ROW><id>17312204</id><snippet>sys.exit</snippet></ROW><ROW><id>17312204</id><snippet>sys.exit</snippet></ROW><ROW><id>17312204</id><snippet>return</snippet></ROW><ROW><id>17312204</id><snippet>sys.exit</snippet></ROW><ROW><id>17312204</id><snippet>def do_something():
    //process something
    return 1

if __name__ == '__main__':
    query = raw_input("Do you want to continue? (Y/N)")
    if query.lower() == 'y':
        //do something
        do_something()
    else:
        print 'ERROR: Cant Understand Input. It has to be (Y/N). Exiting...'
        return 0
</snippet></ROW><ROW><id>17312758</id><snippet>to_excel</snippet></ROW><ROW><id>17312758</id><snippet>df.to_excel("Path\file_name.xlsx", "Sheet_name")
</snippet></ROW><ROW><id>17312787</id><snippet>from ctypes import *
my_dll = windll.Script
my_dll.Script_GetFindedList.restype = None
size = c_uint()
my_dll.Script_GetFindedList(None, byref(size))
result = (c_uint*(size.value//4))()
my_dll.Script_GetFindedList(result, byref(size))
result = list(result)
</snippet></ROW><ROW><id>17312787</id><snippet>library TestDLL;

procedure Script_GetFindedList(List : Pointer; out Len : Cardinal); stdcall;
var
  X: TArray&lt;Cardinal&gt;;
begin
  X := TArray&lt;Cardinal&gt;.Create(1, 2, 3, 4, 5);
  Len := Length(X) * 4;
  if Assigned(List) then
    Move(Pointer(X)^, List^, Len);
end;

exports
  Script_GetFindedList;

begin
end.
</snippet></ROW><ROW><id>17312787</id><snippet>from ctypes import *
my_dll = WinDLL(r'full/path/to/TestDLL.dll')
my_dll.Script_GetFindedList.restype = None
size = c_uint()
my_dll.Script_GetFindedList(None, byref(size))
result = (c_uint*(size.value//4))()
my_dll.Script_GetFindedList(result, byref(size))
result = list(result)
print result
</snippet></ROW><ROW><id>17313238</id><snippet>pandas</snippet></ROW><ROW><id>17313238</id><snippet>29 11 2000 13 17 56 2.44 1.71 3.12 9.12 11.94 5.03 12.74 .83 8.95 15.03 1.80 .86
29 11 2000 13 31 16 2.43 1.74 4.16 9.17 11.30 4.96 11.70 .84 8.84 11.86 1.80 .87
</snippet></ROW><ROW><id>17313238</id><snippet>pandas</snippet></ROW><ROW><id>17313238</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>17313238</id><snippet>None</snippet></ROW><ROW><id>17313238</id><snippet>In [131]: import datetime as dt

In [132]: import pandas as pd

In [133]: pd.read_csv('test.csv', 
                       parse_dates=[[2,1,0,3,4,5]], 
                       date_parser=lambda *arr:dt.datetime(*[int(x) for x in arr]),
                       delimiter=' ', 
                       header=None)
Out[133]:
          2_1_0_3_4_5     6     7     8     9     10    11     12    13    14  \
0 2000-11-29 13:17:56  2.44  1.71  3.12  9.12  11.94  5.03  12.74  0.83  8.95
1 2000-11-29 13:31:16  2.43  1.74  4.16  9.17  11.30  4.96  11.70  0.84  8.84

      15   16    17
0  15.03  1.8  0.86
1  11.86  1.8  0.87
</snippet></ROW><ROW><id>17313879</id><snippet>??</snippet></ROW><ROW><id>17313879</id><snippet>??rds  # brings up ...
?readRDS   # from the base package.
</snippet></ROW><ROW><id>17313879</id><snippet>.Internal(serialize, ...)</snippet></ROW><ROW><id>17313962</id><snippet>numpy.core.fromnumeric.sum</snippet></ROW><ROW><id>17313962</id><snippet>In [1]: sum
Out[1]: &lt;function numpy.core.fromnumeric.sum&gt;

In [2]: sum({1,2,3,4})
Out[2]: set([1, 2, 3, 4])  # returns a set

In [3]: del sum

In [4]: sum({1,2,3,4})
Out[4]: 10
</snippet></ROW><ROW><id>17313962</id><snippet>import __builtin__
sum = __builtin__.sum
</snippet></ROW><ROW><id>17314190</id><snippet>class Triangle:
    def __init__(self, a, b, c):
        sides = [a, b, c]
        sides.sort()
        if sides[0]+sides[1] &lt; sides[2]:
            raise ValueError()
        self._a = a
        self._b = b
        self._c = c
</snippet></ROW><ROW><id>17314190</id><snippet>class Triangle:
    def __init__(self, a, b, c):
        sides = [a, b, c]
        sides.sort()
        assert sides[0]+sides[1] &gt;= sides[2]
        self._a = a
        self._b = b
        self._c = c
</snippet></ROW><ROW><id>17314190</id><snippet>-O</snippet></ROW><ROW><id>17314200</id><snippet>Decimal</snippet></ROW><ROW><id>17314200</id><snippet>&gt;&gt;&gt; from decimal import *

&gt;&gt;&gt; Decimal(1./3.)                  # Your code
Decimal('0.333333333333333314829616256247390992939472198486328125')

&gt;&gt;&gt; Decimal("1")/Decimal("3")       # My code
Decimal('0.3333333333333333333333333333')
</snippet></ROW><ROW><id>17314200</id><snippet>Decimal</snippet></ROW><ROW><id>17314200</id><snippet>&gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2

&gt;&gt;&gt; dividende = Decimal("100.00")
&gt;&gt;&gt; john = (dividende / Decimal("3")).quantize(TWOPLACES)
&gt;&gt;&gt; john
Decimal('33.33')
&gt;&gt;&gt; paul = (dividende / Decimal("3")).quantize(TWOPLACES)
&gt;&gt;&gt; georges = (dividende / Decimal("3")).quantize(TWOPLACES)
&gt;&gt;&gt; john+paul+georges
Decimal('99.99')
</snippet></ROW><ROW><id>17314279</id><snippet>val_dict.get(weightvalue)</snippet></ROW><ROW><id>17314279</id><snippet>weightvalue</snippet></ROW><ROW><id>17314279</id><snippet>None</snippet></ROW><ROW><id>17314279</id><snippet>val_dict.get(filename)[0]</snippet></ROW><ROW><id>17314279</id><snippet>eval()</snippet></ROW><ROW><id>17314279</id><snippet>int()</snippet></ROW><ROW><id>17314430</id><snippet>python -m cProfile --sort cumulative your_single_thread_script.py &amp;&gt; out.log
</snippet></ROW><ROW><id>17314687</id><snippet>3</snippet></ROW><ROW><id>17314687</id><snippet>a</snippet></ROW><ROW><id>17314687</id><snippet>b</snippet></ROW><ROW><id>17314761</id><snippet>resolution</snippet></ROW><ROW><id>17314761</id><snippet>Image</snippet></ROW><ROW><id>17314761</id><snippet>with Image(filename='file.pdf', resolution=200) as image:
    image.compression_quality = 99
    image.save(filename='file.jpg')
</snippet></ROW><ROW><id>17314860</id><snippet>global</snippet></ROW><ROW><id>17314860</id><snippet>def myfunc():
    global a
    a = 5

print a
# NameError: name 'a' is not defined
myfunc()
print a
# 5
</snippet></ROW><ROW><id>17314930</id><snippet>#create flag filled with zeros with same shape as data
flag=numpy.zeros(data.shape)
#get bool array stating where data&gt;=threshold
barray=data&gt;=threshold
#everywhere where barray==True put a 1 in flag
flag[barray]=1
</snippet></ROW><ROW><id>17314930</id><snippet>#create flag filled with zeros with same shape as data
flag=numpy.zeros(data.shape)
#combine the two operations without temporary barray
flag[data&gt;=threshold]=1
</snippet></ROW><ROW><id>17315024</id><snippet>warp = db.warps.find('player' : query).sort(u'player', 1)
</snippet></ROW><ROW><id>17315286</id><snippet>from django import forms

class MyForm(forms.Form):
    choice1 = forms.BooleanField(label='Choice A')
    choice2 = forms.BooleanField(label='Choice B')
    choice3 = forms.BooleanField(label='Choice C')
</snippet></ROW><ROW><id>17315286</id><snippet>form = MyForm(initial={'choice1': True}
</snippet></ROW><ROW><id>17315286</id><snippet>&lt;form action="" method="post"&gt;
    {{form.as_table}}
    &lt;input type='submit' value='Submit'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17315286</id><snippet>choice1</snippet></ROW><ROW><id>17315286</id><snippet>if form.is_valid():
  request.session['user_choice']=form.cleaned_data
</snippet></ROW><ROW><id>17315286</id><snippet>request.session['user_choice']</snippet></ROW><ROW><id>17315849</id><snippet>file1.foo</snippet></ROW><ROW><id>17315849</id><snippet>import file1
ret = file1.foo()  #strore it's return value in `ret`
file1.bar(ret)     #now pass `ret` to this function
</snippet></ROW><ROW><id>17315849</id><snippet>sum</snippet></ROW><ROW><id>17315849</id><snippet>sum</snippet></ROW><ROW><id>17315875</id><snippet>np.array_split</snippet></ROW><ROW><id>17315875</id><snippet>Docstring:
Split an array into multiple sub-arrays.

Please refer to the ``split`` documentation.  The only difference
between these functions is that ``array_split`` allows
`indices_or_sections` to be an integer that does *not* equally
divide the axis.
</snippet></ROW><ROW><id>17315875</id><snippet>In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
   ...:                           'foo', 'bar', 'foo', 'foo'],
   ...:                    'B' : ['one', 'one', 'two', 'three',
   ...:                           'two', 'two', 'one', 'three'],
   ...:                    'C' : randn(8), 'D' : randn(8)})

In [3]: print df
     A      B         C         D
0  foo    one -0.174067 -0.608579
1  bar    one -0.860386 -1.210518
2  foo    two  0.614102  1.689837
3  bar  three -0.284792 -1.071160
4  foo    two  0.843610  0.803712
5  bar    two -1.514722  0.870861
6  foo    one  0.131529 -0.968151
7  foo  three -1.002946 -0.257468

In [4]: np.array_split(df, 3)
Out[4]: 
[     A    B         C         D
0  foo  one -0.174067 -0.608579
1  bar  one -0.860386 -1.210518
2  foo  two  0.614102  1.689837,
      A      B         C         D
3  bar  three -0.284792 -1.071160
4  foo    two  0.843610  0.803712
5  bar    two -1.514722  0.870861,
      A      B         C         D
6  foo    one  0.131529 -0.968151
7  foo  three -1.002946 -0.257468]
</snippet></ROW><ROW><id>17315921</id><snippet>file_read = csv.reader(self.file)
</snippet></ROW><ROW><id>17315921</id><snippet>file_read = csv.reader(self.file, dialect=csv.excel_tab)
</snippet></ROW><ROW><id>17315921</id><snippet>universal newline mode</snippet></ROW><ROW><id>17315921</id><snippet>csv.reader</snippet></ROW><ROW><id>17315921</id><snippet>reader = csv.reader(open(self.file, 'rU'), dialect=csv.excel_tab)
</snippet></ROW><ROW><id>17315921</id><snippet>splitlines()</snippet></ROW><ROW><id>17315921</id><snippet>def read_file(self):
    with open(self.file, 'r') as f:
        data = [row for row in csv.reader(f.read().splitlines())]
    return data
</snippet></ROW><ROW><id>17316212</id><snippet>from StringIO import StringIO
import pandas as pd

indf1 = StringIO("""BuildingID  Blah
3   'a'
4   'b'
7   'c'
7   'd'
7   'x'""")    

indf2 = StringIO("""ItemID  BuildingID  EnergyID
7   3   2
11  3   11
12  3   12
13  4   2
14  5   12
17  4   10
17  7   2
17  7   3
17  7   4""")

df1 = pd.read_csv(indf1, delim_whitespace=True, index_col='BuildingID')
df2 = pd.read_csv(indf2, delim_whitespace=True, index_col='ItemID')

dfboth = df1.merge(df2, right_on='BuildingID', left_index=True, how='left')

dfboth.set_index('BuildingID', append=True, inplace=True)
dfboth.reorder_levels(['BuildingID', 'ItemID'])

                  Blah  EnergyID
BuildingID ItemID               
3          7       'a'         2
           11      'a'        11
           12      'a'        12
4          13      'b'         2
           17      'b'        10
7          17      'c'         2
           17      'c'         3
           17      'c'         4
           17      'd'         2
           17      'd'         3
           17      'd'         4
           17      'x'         2
           17      'x'         3
           17      'x'         4
</snippet></ROW><ROW><id>17316267</id><snippet>slicing</snippet></ROW><ROW><id>17316267</id><snippet>list comprehension</snippet></ROW><ROW><id>17316267</id><snippet>&gt;&gt;&gt; lis = ['abcd','efgh','ijkl','mnop']
&gt;&gt;&gt; [ x[1:3] for x in lis]
['bc', 'fg', 'jk', 'no']
</snippet></ROW><ROW><id>17316267</id><snippet>&gt;&gt;&gt; s = 'abcd'
&gt;&gt;&gt; s[1:3]      #return sub-string from 1 to 2th index (3 in not inclusive)
'bc'
</snippet></ROW><ROW><id>17316370</id><snippet>self.b</snippet></ROW><ROW><id>17316370</id><snippet>self.b</snippet></ROW><ROW><id>17316370</id><snippet>list()</snippet></ROW><ROW><id>17316370</id><snippet>self.b = self.a[:]
</snippet></ROW><ROW><id>17316370</id><snippet>self.b = list(self.a)
</snippet></ROW><ROW><id>17316370</id><snippet>&gt;&gt;&gt; a = b = []  # two references to the same list
&gt;&gt;&gt; a
[]
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; a.append(42)
&gt;&gt;&gt; b
[42]
&gt;&gt;&gt; b = a[:]  # create a copy
&gt;&gt;&gt; a.append(3.14)
&gt;&gt;&gt; a
[42, 3.14]
&gt;&gt;&gt; b
[42]
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>17316476</id><snippet>str.replace</snippet></ROW><ROW><id>17316476</id><snippet>&gt;&gt;&gt; strs = "Hello yee valiant ones!"
&gt;&gt;&gt; strs.replace(' yee','')
'Hello valiant ones!'
#or
&gt;&gt;&gt; strs.replace('yee ','')
'Hello valiant ones!'
</snippet></ROW><ROW><id>17316532</id><snippet>class CSV:
    def __init__(self, file=None):
        self.file = file
        with open(self.file, 'r') as f:
            self.data = [row for row in csv.reader(f)]

    def get_row_count(self):
        return len(self.data)

    def get_column_count(self):
        return len(self.data[0])

    def get_data(self, rows=1):
        return self.data
</snippet></ROW><ROW><id>17316532</id><snippet>csv.reader()</snippet></ROW><ROW><id>17316532</id><snippet>.read()</snippet></ROW><ROW><id>17316532</id><snippet>.read().splitlines()</snippet></ROW><ROW><id>17316532</id><snippet>open()</snippet></ROW><ROW><id>17316532</id><snippet>class CSV:
    def __init__(self, f=None):
        self.file = f
        if isinstance(self.file, str): # if the file is a string, it's a path that has to be opened
            with open(self.file, 'r') as f:
                self.data = [row for row in csv.reader(f)]
        elif isinstance(self.file, File) or isinstance(self.file, file): # if that's a file object, no need to open
            self.data = [row for row in csv.reader(self.file)]
        else: # otherwise, I don't know what to do, so aaaaaaaargh!
            raise Exception("File object type unknown: %s %s" % (type(file), file,))

    def get_row_count(self):
        return len(self.data)

    def get_column_count(self):
        return len(self.data[0])

    def get_data(self, rows=1):
        return self.data
</snippet></ROW><ROW><id>17316532</id><snippet>file</snippet></ROW><ROW><id>17316532</id><snippet>File</snippet></ROW><ROW><id>17316532</id><snippet>file</snippet></ROW><ROW><id>17316532</id><snippet>self.file</snippet></ROW><ROW><id>17316532</id><snippet>str</snippet></ROW><ROW><id>17316532</id><snippet>open()</snippet></ROW><ROW><id>17316532</id><snippet>file()</snippet></ROW><ROW><id>17316532</id><snippet>self.file</snippet></ROW><ROW><id>17316532</id><snippet>File</snippet></ROW><ROW><id>17316532</id><snippet>file()</snippet></ROW><ROW><id>17316738</id><snippet>  import OS
  os.environ['product']='product1'
  subprocess.call("make clean", shell=True)
</snippet></ROW><ROW><id>17316761</id><snippet>meshgrid</snippet></ROW><ROW><id>17316761</id><snippet>u</snippet></ROW><ROW><id>17316761</id><snippet>v</snippet></ROW><ROW><id>17316761</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
from pylab import *


# read CSV as a numpy array
data = mlab.csv2rec('datasets/mix.csv')

# print CSV file headers
print data.dtype.names

# load columns as vectors
data_x = data['longitude']
data_y = data['latitude']
data_u = data['x']
data_v = data['y']

U = cos(data_u)
V = sin(data_v)


# plot raw data
Q = quiver(data_x, data_y, U, V, units='width')
qk = quiverkey(Q, 0.5, 0.92, 2, '.', labelpos='W',
               fontproperties={'weight': 'bold'})
title('Current Surface')
</snippet></ROW><ROW><id>17316824</id><snippet>dirs[:] = []
</snippet></ROW><ROW><id>17316824</id><snippet>del dirs[:]
</snippet></ROW><ROW><id>17317291</id><snippet>&gt;&gt;svndiff.xml</snippet></ROW><ROW><id>17317291</id><snippet>subprocess.call</snippet></ROW><ROW><id>17317291</id><snippet>svn</snippet></ROW><ROW><id>17317291</id><snippet>subprocess.call</snippet></ROW><ROW><id>17317291</id><snippet>stderr</snippet></ROW><ROW><id>17317291</id><snippet>with open('svndiff.xml', 'a') as log:
    subprocess.call(["svn", "di", "--revision", "%s:head" % rev_number,
                     "--summarize", "--xml"], stdout=log)
</snippet></ROW><ROW><id>17317291</id><snippet>shell=True</snippet></ROW><ROW><id>17317291</id><snippet>subprocess.call("svn di --revision %s:HEAD --summarize --xml &gt;&gt;svndiff.xml" % rev_number,
                shell=True)
</snippet></ROW><ROW><id>17317396</id><snippet>def render_js(self):
    return [u'&lt;script type="text/javascript" src="%s"&gt;&lt;/script&gt;' % self.absolute_path(path) for path in self._js]
</snippet></ROW><ROW><id>17317396</id><snippet>from django import forms

class TestForm(forms.Form):
    def get_media_js(self):
        return [self.media.absolute_path(path) for path in self.media._js]
</snippet></ROW><ROW><id>17317450</id><snippet>A B D</snippet></ROW><ROW><id>17317450</id><snippet>a &lt;= MITTEN</snippet></ROW><ROW><id>17317450</id><snippet>print("D")</snippet></ROW><ROW><id>17317450</id><snippet>a=36
MITTEN = 42
if a &lt;= MITTEN:
  print("A", end=" ")
  print("B", end=" ")
  print("D")
else:
  print("C", end=" ")
</snippet></ROW><ROW><id>17317450</id><snippet>print("D")</snippet></ROW><ROW><id>17317450</id><snippet>a &lt;= MITTEN</snippet></ROW><ROW><id>17317450</id><snippet>a=36
MITTEN = 42
if a &lt;= MITTEN:
  print("A", end=" ")
  print("B", end=" ")
else:
  print("C", end=" ")
print("D")
</snippet></ROW><ROW><id>17317468</id><snippet>import os, sys, subprocess

def open_file(filename):
    if sys.platform == "win32":
        os.startfile(filename)
    else:
        opener ="open" if sys.platform == "darwin" else "xdg-open"
        subprocess.call([opener, filename])
</snippet></ROW><ROW><id>17317557</id><snippet>if not connect: 
</snippet></ROW><ROW><id>17317557</id><snippet>if connect is None. 
</snippet></ROW><ROW><id>17317589</id><snippet>sep = ''</snippet></ROW><ROW><id>17317589</id><snippet>print (variety,"\n",shape,"\n",brand, sep = '')
</snippet></ROW><ROW><id>17317589</id><snippet>sep</snippet></ROW><ROW><id>17317589</id><snippet>&gt;&gt;&gt; print('a','b')
a b
&gt;&gt;&gt; print('a','b', sep ='')
ab
</snippet></ROW><ROW><id>17317589</id><snippet>print</snippet></ROW><ROW><id>17317589</id><snippet>print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)</snippet></ROW><ROW><id>17317589</id><snippet>Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.          &lt;-----
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.
</snippet></ROW><ROW><id>17317650</id><snippet>perl -pe 's/(^[^\r\n]*)\n/\1/' input &gt; output
</snippet></ROW><ROW><id>17317650</id><snippet>perl -pe 's/(?&lt;!\r)\n//' input &gt; output
</snippet></ROW><ROW><id>17317650</id><snippet>\n</snippet></ROW><ROW><id>17317650</id><snippet>\r</snippet></ROW><ROW><id>17317650</id><snippet>\r\n</snippet></ROW><ROW><id>17317650</id><snippet>perl -pe 's/\n//; s/\r/\r\n/' input &gt; output
</snippet></ROW><ROW><id>17317818</id><snippet>config</snippet></ROW><ROW><id>17317818</id><snippet>media</snippet></ROW><ROW><id>17317818</id><snippet>meta</snippet></ROW><ROW><id>17317818</id><snippet>meta</snippet></ROW><ROW><id>17317818</id><snippet>other</snippet></ROW><ROW><id>17317818</id><snippet>search_ext = (
     config.get("Miscellaneous", "media").strip() + '|' +
     config.get("Miscellaneous", "meta").strip() + '|' +
     config.get("Miscellaneous", "other").strip()
).split('|')
</snippet></ROW><ROW><id>17317993</id><snippet>zip</snippet></ROW><ROW><id>17317993</id><snippet>enumerate</snippet></ROW><ROW><id>17317993</id><snippet>def solve(lis, num):
    for i, (x,y,z) in enumerate(zip(lis, lis[1:], lis[2:])):
        if all(k &lt; num for k in (x,y,z)):
            return i
    #default return value if none of the items matched the condition
    return -1    #or use None 
...     

&gt;&gt;&gt; lis = [1, 2, 3, 1, 0.4, 1, 0.1, 0.4, 0.3, 1, 2]
&gt;&gt;&gt; solve(lis, 0.5)
6
&gt;&gt;&gt; solve(lis, 4)   # for values &gt;3 the answer is index 0, 
0                   # so 0 shouldn't be the default  return value.
&gt;&gt;&gt; solve(lis, .1)
-1
</snippet></ROW><ROW><id>17317993</id><snippet>itertools.izip</snippet></ROW><ROW><id>17318206</id><snippet>&gt;&gt;&gt; x = (('a',1), (2,3), (4,))
&gt;&gt;&gt; [str(item[0]) for item in x if item and item[0]]
['a', '2', '4']
</snippet></ROW><ROW><id>17318472</id><snippet>def access(time_object, max_lvl, lvl):
    tmp = time_object
    while(lvl &lt; max_lvl):
        tmp = time_object[0]
    return tmp
</snippet></ROW><ROW><id>17318472</id><snippet>timeN[0][0][0][0][1][0] = list[N-4][0]
</snippet></ROW><ROW><id>17318567</id><snippet>twisted.internet.defer.gatherResults</snippet></ROW><ROW><id>17318567</id><snippet>d = gatherResults([calc(a), calc2(b), calc3(c)])
def calculated((j, i, f)):
    if s:
        return combine(i, j, f)
d.addCallback(calculated)
</snippet></ROW><ROW><id>17318567</id><snippet>s</snippet></ROW><ROW><id>17318567</id><snippet>s</snippet></ROW><ROW><id>17318567</id><snippet>calc3</snippet></ROW><ROW><id>17318567</id><snippet>def calc3(argument):
    s = bool(argument % 2)
    return argument + 1
</snippet></ROW><ROW><id>17318567</id><snippet>Calc3Result = namedtuple("Calc3Result", "condition value")

def calc3(argument):
    s = bool(argument % 2)
    return Calc3Result(s, argument + 1)
</snippet></ROW><ROW><id>17318567</id><snippet>d = gatherResults([calc(a), calc2(b), calc3(c)])
def calculated((j, i, calc3result)):
    if calc3result.condition:
        return combine(i, j, calc3result.value)
d.addCallback(calculated)
</snippet></ROW><ROW><id>17318567</id><snippet>calc3</snippet></ROW><ROW><id>17318567</id><snippet>calc3</snippet></ROW><ROW><id>17318567</id><snippet>def _calc3Result(result, argument):
    if result == "250":
        # SMTP Success response, yay
        return Calc3Result(True, argument)
    # Anything else is bad
    return Calc3Result(False, argument)

def calc3(argument):
    d = emailObserver("The argument was %s" % (argument,))
    d.addCallback(_calc3Result)
    return d
</snippet></ROW><ROW><id>17318567</id><snippet>calc3</snippet></ROW><ROW><id>17318567</id><snippet>gatherResults</snippet></ROW><ROW><id>17318567</id><snippet>calculated</snippet></ROW><ROW><id>17318638</id><snippet>--dry-run</snippet></ROW><ROW><id>17318638</id><snippet>install</snippet></ROW><ROW><id>17318638</id><snippet>mkdir tmpdst
python setup.py install --root tmpdst --record myfiles.txt
rm -rf tmpdst
</snippet></ROW><ROW><id>17318638</id><snippet>tmpdst</snippet></ROW><ROW><id>17318638</id><snippet>tmpdst</snippet></ROW><ROW><id>17318726</id><snippet>apply</snippet></ROW><ROW><id>17318726</id><snippet>apply_async</snippet></ROW><ROW><id>17318944</id><snippet>class create_db(object):

    def __init__(self):
        import psycopg2 as pq
        self.cn = pq.connect('dbname=mydb user=me')
        self.cr = self.cn.cursor()

    def execute(self, query, *args):

        results = self.cr.execute(query, args)

        return results
</snippet></ROW><ROW><id>17318944</id><snippet>cur.execute('SELECT * FROM table1 WHERE column = ?;', (42,))
</snippet></ROW><ROW><id>17318944</id><snippet>;</snippet></ROW><ROW><id>17319117</id><snippet>global</snippet></ROW><ROW><id>17319117</id><snippet>import os
import re
from contextlib import closing

def list_files_to_process(directory='results'):
  """
  Return a list of files from directory where the file extension is '.res',
  case insensitive.
  """
  results = []
  for filename in os.listdir(directory):
    filepath = os.path.join(directory,filename)
    if os.path.isfile(filepath) and filename.lower().endswith('.res'):
      results.append(filepath)
  return results

def group_lines(sequence):
  """
  Generator, process a sequence of lines, separated by a particular line.
  Yields batches of lines along with the id from the separator.
  """
  separator = re.compile('^A:(?P&lt;id&gt;\d+):$')
  batch = []
  batch_id = None
  for line in sequence:
    if not line: # Ignore blanks
      continue
    m = separator.match(line):
    if m is not None:
      if batch_id is not None or len(batch) &gt; 0:
        yield (batch_id,batch)
      batch_id = m.group('id')
      batch = []
    else:
      batch.append(line)
  if batch_id is not None or len(batch) &gt; 0:
    yield (batch_id,batch)

def filename_for_results(batch_id,result_directory):
  """
  Return an appropriate filename for a batch_id under the result directory
  """
  return os.path.join(result_directory,"results-%s.res" % (batch_id,))

def open_result_file(filename,header="source,rssi,lqi,packetId,run,counter"):
  """
  Return an open file object in append mode, having appended a header if 
  filename doesn't exist or is empty
  """
  if os.path.exists(filename) and os.path.getsize(filename) &gt; 0:
    # No need to write header
    return open(filename,'a')
  else:
    f = open(filename,'a')
    f.write(header + '\n')
    return f

def process_file(filename,result_directory='results/processed'):
  """
  Open filename and process it's contents. Uses group_lines() to group
  lines into different files based upon specific line acting as a
  content separator.
  """
  error_filename = filename_for_results('error',result_directory)
  with open(filename,'r') as in_file, open(error_filename,'w') as error_out:
    for batch_id, lines in group_lines(in_file):
      if len(lines) == 0:
        error_out.write("Received batch %r with 0 lines" % (batch_id,))
        continue
      out_filename = filename_for_results(batch_id,result_directory)
      with closing(open_result_file(out_filename)) as out_file:
        for line in lines:
          if line.startswith('L') and line.endswith('E') and line.count(',') == 5:
            line = line.lstrip('L').rstrip('E')
            out_file.write(line + '\n')
          else:
            error_out.write("Unknown line, batch=%r: %r\n" %(batch_id,line))

if __name__ == '__main__':
  files = list_files_to_process()
  for filename in files:
    print "Processing %s" % (filename,)
    process_file(filename)
</snippet></ROW><ROW><id>17319197</id><snippet>open("Ausstellungen.txt",mode="r", encoding="latin-1")
</snippet></ROW><ROW><id>17319208</id><snippet>#!/usr/bin/env python3

from gi.repository import Gtk


class Demo:
    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_default_size(640, 480)
        self.window.connect('delete-event', self.on_app_exit)

        scrolledwindow = Gtk.ScrolledWindow()
        self.window.add(scrolledwindow)

        self.liststore = Gtk.ListStore(str, str, int, str)

        # You need to use self.fillStore() instead.
        self.liststore.append(['Debian', 'i386', 0, 'ok'])
        self.liststore.append(['Fedora', 'amd64', 1, 'ok'])
        self.liststore.append(['Ubuntu', 'i386', 2, 'ok'])

        treeview = Gtk.TreeView(model=self.liststore)
        scrolledwindow.add(treeview)

        names = ('Name', 'URL', 'Bitrate', 'Format')
        for i in range(4):
            renderer_text = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn(names[i], renderer_text, text=i)
            treeview.append_column(column)

    def fillStore(self):
        pass

    def run(self):
        self.window.show_all()
        Gtk.main()

    def on_app_exit(self, widget, event=None):
        Gtk.main_quit()


if __name__ == '__main__':
    demo = Demo()
    demo.run()
</snippet></ROW><ROW><id>17319775</id><snippet>File -&gt; Settings -&gt; Code Style -&gt; General: Right margin (columns)</snippet></ROW><ROW><id>17319816</id><snippet>&lt;form action="{{ url_for('new_task') }}" method="POST" class=new-task&gt;
</snippet></ROW><ROW><id>17319816</id><snippet>@app.route('/tasks/', methods=['GET','POST'])
def new_task():
    if request.method == 'POST':
        tts = request.form['tts']
        flash(str(tts)+'is being selected')
    return render_template("tasks.html")
</snippet></ROW><ROW><id>17320116</id><snippet>buildout.dumppickedversions</snippet></ROW><ROW><id>17320116</id><snippet>[buildout]
extensions =
# We don't need this in 2.x:
# buildout.dumppickedversions
</snippet></ROW><ROW><id>17320116</id><snippet>$ curl -O https://raw.github.com/buildout/buildout/1/bootstrap/bootstrap.py
$ bin/python bootstrap.py
</snippet></ROW><ROW><id>17320331</id><snippet>&gt;&gt;&gt; import boto.s3.key
&gt;&gt;&gt; k = boto.s3.key.Key('somebucket')
&gt;&gt;&gt; dir(k)
['BufferSize', 'DefaultContentType', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattr__', '__getattribute__', '__hash__', '__init__', '__iter__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'add_email_grant', 'add_user_grant', 'base64md5', 'bucket', 'cache_control', 'change_storage_class', 'close', 'closed', 'compute_md5', 'content_disposition', 'content_encoding', 'content_language', 'content_type', 'copy', 'delete', 'delete_marker', 'encrypted', 'endElement', 'etag', 'exists', 'filename', 'generate_url', 'get_acl', 'get_contents_as_string', 'get_contents_to_file', 'get_contents_to_filename', 'get_file', 'get_md5_from_hexdigest', 'get_metadata', 'get_torrent_file', 'get_xml_acl', 'handle_encryption_headers', 'handle_version_headers', 'is_latest', 'last_modified', 'make_public', 'md5', 'metadata', 'mode', 'name', 'next', 'open', 'open_read', 'open_write', 'owner', 'path', 'provider', 'read', 'resp', 'send_file', 'set_acl', 'set_canned_acl', 'set_contents_from_file', 'set_contents_from_filename', 'set_contents_from_stream', 'set_contents_from_string', 'set_metadata', 'set_xml_acl', 'size', 'source_version_id', 'startElement', 'storage_class', 'update_metadata', 'version_id']
</snippet></ROW><ROW><id>17320395</id><snippet>def datameans(df, avggrouper1, avggrouper2, startdate, enddate):  
    df_hour_means = df[startdate:enddate]      
    df_hour_means = df_hour_means.groupby(
        lambda x: (getattr(x,avggrouper1), getattr(x,avggrouper2))).mean()  
    print df_hour_means.to_string()
    df_hour_means.plot()
</snippet></ROW><ROW><id>17320395</id><snippet>datameans</snippet></ROW><ROW><id>17320395</id><snippet>datameans(dataframe, 'quarter', 'hour' , '2010-01-01 00:00:00', '2012-12-31 23:00:00')
</snippet></ROW><ROW><id>17320395</id><snippet>import operator
keyfunc = operator.attrgetter(avggrouper1, avggrouper2)
df_hour_means = df_hour_means.groupby(keyfunc).mean()  
</snippet></ROW><ROW><id>17320579</id><snippet>import unittest

class TestFoo(unittest.TestCase):
    def test_ok(self):
        self.assertEqual(1+2, 3)
    def test_fail(self):
        self.assertEqual(1+2, 4)
    def test_error(self):
        1/0
    @unittest.skip('blah')
    def test_skip(self):
        self.assertEqual(42, 42)

class MyResult(unittest.TextTestResult):
    def addError(self, test, err):
        self.call_web_api(test, err)
        return super(MyResult, self).addError(test, err)
    def addFailure(self, test, err):
        self.call_web_api(test, err)
        return super(MyResult, self).addFailure(test, err)
    def call_web_api(self, test, err):
        print('***', test, err)

if __name__ == '__main__':
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestFoo))

    runner = unittest.TextTestRunner(resultclass=MyResult)
    runner.run(suite)
</snippet></ROW><ROW><id>17320579</id><snippet>...
    runner = unittest.TextTestRunner()
    result = runner.run(suite)
    print(result.errors)
    print(result.failures)
    print(result.skipped)
</snippet></ROW><ROW><id>17320705</id><snippet>self.data</snippet></ROW><ROW><id>17320705</id><snippet>CSV</snippet></ROW><ROW><id>17320705</id><snippet>self.data = [row for row in csv.reader(f)]
self.data = [row for row in csv.reader(file.read().splitlines())]
</snippet></ROW><ROW><id>17320705</id><snippet>this_file</snippet></ROW><ROW><id>17320705</id><snippet>this_file = csv_object.get_data()
</snippet></ROW><ROW><id>17320705</id><snippet>new_object = CSVImport(csvfile=this_file,...)</snippet></ROW><ROW><id>17320705</id><snippet>CSVImport</snippet></ROW><ROW><id>17320705</id><snippet>csvfile</snippet></ROW><ROW><id>17320705</id><snippet>list</snippet></ROW><ROW><id>17320723</id><snippet>celery worker --concurrency=4
</snippet></ROW><ROW><id>17320748</id><snippet>@property</snippet></ROW><ROW><id>17320748</id><snippet>__get__</snippet></ROW><ROW><id>17320748</id><snippet>__set__</snippet></ROW><ROW><id>17320748</id><snippet>@escaped
@property
def users_name(self):
  ...
</snippet></ROW><ROW><id>17320748</id><snippet>class escaped:
  def __init__(self, property_to_wrap):
    # we wrap the property object created by the other decorator
    self.property = property_to_wrap

  def __get__(self, instance, objtype=None):
    # delegate to the original property
    original_value = self.property_to_wrap.__get__(instance, objtype)
    # ... change the data however you like
    return frotz(original_value)

  def __set__(self, instance, new_value):
    actual_value = frob(new_value)
    self.property.__set__(instance, actual_value)

  ...
</snippet></ROW><ROW><id>17320748</id><snippet>getter</snippet></ROW><ROW><id>17320748</id><snippet>setter</snippet></ROW><ROW><id>17320748</id><snippet>deleter</snippet></ROW><ROW><id>17320748</id><snippet>property</snippet></ROW><ROW><id>17320748</id><snippet>@users_name.setter</snippet></ROW><ROW><id>17320842</id><snippet>with open('input1.txt', 'rb') as file1:
    file1_data = dict(line.split(None, 2)[1::-1] for line in file1 if line.strip())
with open('input2.txt', 'rb') as file2, open('output.txt', 'wb') as outputfile:
    output = csv.writer(outputfile, delimiter='|')
    for line in file2:
        row = line.strip().split('|')
        key, n = row[0], ' '+row[1].split(' ')[1]
        if key in file1_data:
            row = [row[0], row[1][:row[1].find(' ')], file1_data[key] + n]
            output.writerow(row)
            print row
</snippet></ROW><ROW><id>17321031</id><snippet>output = sample.lstrip('[').rstrip(']').split(', ')
</snippet></ROW><ROW><id>17321031</id><snippet>.split(',')</snippet></ROW><ROW><id>17321031</id><snippet>.split(',')</snippet></ROW><ROW><id>17321031</id><snippet>output = map(lambda x: int(x), output)
</snippet></ROW><ROW><id>17321031</id><snippet>import json
output = json.loads(sample)
</snippet></ROW><ROW><id>17321089</id><snippet>db.session.add_all(objects)</snippet></ROW><ROW><id>17321089</id><snippet>merged_object = db.session.merge(other_object, load=False)</snippet></ROW><ROW><id>17321089</id><snippet>app</snippet></ROW><ROW><id>17321089</id><snippet>with app.app_context():</snippet></ROW><ROW><id>17321089</id><snippet>db.session.add</snippet></ROW><ROW><id>17321170</id><snippet>x if y else z</snippet></ROW><ROW><id>17321170</id><snippet>[ x if x%2 else x*100 for x in range(1, 10) ]
</snippet></ROW><ROW><id>17321170</id><snippet>[ EXP for x in seq if COND ]
</snippet></ROW><ROW><id>17321170</id><snippet>[ EXP for x in seq ]
</snippet></ROW><ROW><id>17321170</id><snippet>if-else</snippet></ROW><ROW><id>17321196</id><snippet>serializable</snippet></ROW><ROW><id>17321196</id><snippet>import inspect
def serializable(func):
    def wrapper(self):
        pass
    wrapper.serialized = True
    return wrapper

class Book:
    @serializable
    def pretty_status(self):
        pass
    def foo(self):
        pass


for name, member in inspect.getmembers(Book, inspect.ismethod):
    if getattr(member, 'serialized', False):
        print(name, member)
</snippet></ROW><ROW><id>17321196</id><snippet>('pretty_status', &lt;unbound method Book.wrapper&gt;)
</snippet></ROW><ROW><id>17321241</id><snippet>Builder Pattern</snippet></ROW><ROW><id>17321241</id><snippet>self</snippet></ROW><ROW><id>17321241</id><snippet>setXXX()</snippet></ROW><ROW><id>17321241</id><snippet>class Person: 
   def setName(self, name):
      self.name = name
      return self   ## this is what makes this work

   def setAge(self, age):
      self.age = age;
      return self;

   def setSSN(self, ssn):
      self.ssn = ssn
      return self
</snippet></ROW><ROW><id>17321241</id><snippet>p = Person()
p.setName("Hunter")
 .setAge(24)
 .setSSN("111-22-3333")
</snippet></ROW><ROW><id>17321241</id><snippet>p.a().b().c()</snippet></ROW><ROW><id>17321253</id><snippet>pyxbgen -u po1.xsd -m po1
</snippet></ROW><ROW><id>17321253</id><snippet>Address</snippet></ROW><ROW><id>17321253</id><snippet>import example
address = Address()
address.FullName = "Jo La Banane"
# fill other members of address
# ...
with open('myoutput.xml', 'w') as file
    f.write(address.toxml("utf-8"))
</snippet></ROW><ROW><id>17321312</id><snippet>csv_file = default_storage.open(self.filepath, 'r')
</snippet></ROW><ROW><id>17321312</id><snippet>self.filepath</snippet></ROW><ROW><id>17321312</id><snippet>FieldFile</snippet></ROW><ROW><id>17321312</id><snippet>new_object = CSVImport(csvfile=self.filepath.read(), ... )
</snippet></ROW><ROW><id>17321312</id><snippet>self.filepath</snippet></ROW><ROW><id>17321338</id><snippet>global</snippet></ROW><ROW><id>17321495</id><snippet>FeedItem.user</snippet></ROW><ROW><id>17321495</id><snippet>$sum</snippet></ROW><ROW><id>17321645</id><snippet>unix</snippet></ROW><ROW><id>17321645</id><snippet>head</snippet></ROW><ROW><id>17321645</id><snippet>python manage.py test appname | head -n 3
</snippet></ROW><ROW><id>17321645</id><snippet>3</snippet></ROW><ROW><id>17321645</id><snippet>OK</snippet></ROW><ROW><id>17321645</id><snippet>verbosity</snippet></ROW><ROW><id>17321645</id><snippet>python manage.py test appname -v 0
</snippet></ROW><ROW><id>17321674</id><snippet>self.tbIcon.RemoveIcon()
self.tbIcon.Destroy()
self.Destroy()
</snippet></ROW><ROW><id>17322058</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>17322058</id><snippet>&lt;img src="{{ STATIC_URL }}{{myImage}}"/&gt;
</snippet></ROW><ROW><id>17322058</id><snippet>def base_book(request):
    (...)
    myImage = "two_scoops_django.png"
    return render(request, 'base_book.html', 
      {'book': theBook, 'author': myAuthors, 'myImage': myImage}
      )
</snippet></ROW><ROW><id>17322082</id><snippet>with open("file.txt") as fileobj:
    sets = [set(line.split()) for line in fileobj]
    for first_index in range(len(sets) - 2, -1, -1):
        for second_index in range(len(sets) - 1, first_index, -1):
            union = sets[first_index] | sets[second_index]
            intersection = sets[first_index] &amp; sets[second_index]
            if len(intersection) / float(len(union)) &gt; 0.25:
                del sets[second_index]
with open("output.txt", "w") as fileobj:
    for set_ in sets:
        # order of the set is undefined, so we need to sort each set
        output = " ".join(sorted(set_, key=lambda x: int(x[1:])))
        fileobj.write("{0}\n".format(output))
</snippet></ROW><ROW><id>17322283</id><snippet>try</snippet></ROW><ROW><id>17322283</id><snippet>try:
    code a
except ExplicitException:
    pass

try:
    code b
except ExplicitException:
    try:
        code c
    except ExplicitException:
        try:
            code d
        except ExplicitException:
            pass
</snippet></ROW><ROW><id>17322283</id><snippet>code c</snippet></ROW><ROW><id>17322283</id><snippet>code b</snippet></ROW><ROW><id>17322283</id><snippet>code c</snippet></ROW><ROW><id>17322283</id><snippet>try</snippet></ROW><ROW><id>17322283</id><snippet>try:
    code a
except ExplicitException:
    pass

try:
    code b
except ExplicitException:
    pass

try:
    code c
except ExplicitException:
    pass

try:
    code d
except ExplicitException:
    pass
</snippet></ROW><ROW><id>17322283</id><snippet>except ExplicitException</snippet></ROW><ROW><id>17322283</id><snippet>MemoryError</snippet></ROW><ROW><id>17322283</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17322283</id><snippet>SystemExit</snippet></ROW><ROW><id>17322506</id><snippet>turtle</snippet></ROW><ROW><id>17322506</id><snippet>import turtle

turtle.speed('slowest')

walk = randomWalkb(25)

for x, y in zip(*walk):
    #multiply by 10, since 1 pixel differences are hard to see
    turtle.goto(x*10,y*10)

turtle.exitonclick()
</snippet></ROW><ROW><id>17322585</id><snippet>In [17]: df = DataFrame(randn(20,4),columns=list('ABCD'))

In [18]: df[(df['A']&gt;0) &amp; (df['B']&gt;0) &amp; (df['C']&gt;0)]
Out[18]: 
           A         B         C         D
12  0.491683  0.137766  0.859753 -1.041487
13  0.376200  0.575667  1.534179  1.247358
14  0.428739  1.539973  1.057848 -1.254489

In [19]: df[(df['A']&gt;0) &amp; (df['B']&gt;0) &amp; (df['C']&gt;0)].count()
Out[19]: 
A    3
B    3
C    3
D    3
dtype: int64

In [20]: len(df[(df['A']&gt;0) &amp; (df['B']&gt;0) &amp; (df['C']&gt;0)])
Out[20]: 3
</snippet></ROW><ROW><id>17322665</id><snippet>(8, 1, 0)</snippet></ROW><ROW><id>17322707</id><snippet>d.keys()</snippet></ROW><ROW><id>17322707</id><snippet>shuffle</snippet></ROW><ROW><id>17322707</id><snippet>d.keys()</snippet></ROW><ROW><id>17322707</id><snippet>d.keys()</snippet></ROW><ROW><id>17322707</id><snippet>dict_keys</snippet></ROW><ROW><id>17322707</id><snippet>set</snippet></ROW><ROW><id>17322707</id><snippet>list</snippet></ROW><ROW><id>17322707</id><snippet>list(d.keys())</snippet></ROW><ROW><id>17322707</id><snippet>shuffle</snippet></ROW><ROW><id>17322969</id><snippet>def countA(word):
    return word.count('a')
</snippet></ROW><ROW><id>17322969</id><snippet>myString.count('c')</snippet></ROW><ROW><id>17322999</id><snippet>new_cell.style.number_format.format_code = 'mm/dd/yyyy'</snippet></ROW><ROW><id>17322999</id><snippet>    import openpyxl

    wb = openpyxl.load_workbook(file)
    old_sheet = wb.get_sheet_by_name('Sheet1')
    old_sheet.title = 'Sheet1.5'
    max_row = old_sheet.get_highest_row()
    max_col = old_sheet.get_highest_column()
    wb.create_sheet(0, 'Sheet1')

    new_sheet = wb.get_sheet_by_name('Sheet1')

    # Do the header.
    for col_num in range(0, max_col):
        new_sheet.cell(row=0, column=col_num).value = old_sheet.cell(row=0, column=col_num).value

    # The row to be inserted. We're manually populating each cell.
    new_sheet.cell(row=1, column=0).value = 'DUMMY'
    new_sheet.cell(row=1, column=1).value = 'DUMMY'

    # Now do the rest of it. Note the row offset.
    for row_num in range(1, max_row):
        for col_num in range (0, max_col):
            new_sheet.cell(row = (row_num + 1), column = col_num).value = old_sheet.cell(row = row_num, column = col_num).value

    wb.save(file)
</snippet></ROW><ROW><id>17323144</id><snippet>'''\
    '''+line1+'''
    '''+line2+'''
    '''+line3+'''
    '''+line4+'''
    '''+line5+'''
    '''+line6+'''
    '''+line7+''''''
</snippet></ROW><ROW><id>17323144</id><snippet>line1</snippet></ROW><ROW><id>17323144</id><snippet>print("\n".join([line1, line2, line3, line4, line5, line 6, line7]))</snippet></ROW><ROW><id>17323312</id><snippet>$gte</snippet></ROW><ROW><id>17323312</id><snippet>$gte</snippet></ROW><ROW><id>17323312</id><snippet>db.test.find({
  'node.components.type': 'backup', 
  'node.components.sensors': { 
      $elemMatch: {'name': 'backup-start-date', 
                   'value': {'$gte': 168571445}}}})
</snippet></ROW><ROW><id>17323352</id><snippet>bestval</snippet></ROW><ROW><id>17323352</id><snippet>d</snippet></ROW><ROW><id>17323352</id><snippet>bestval</snippet></ROW><ROW><id>17323352</id><snippet>d</snippet></ROW><ROW><id>17323352</id><snippet>bestval</snippet></ROW><ROW><id>17323352</id><snippet>if bestval == -1 or d &lt; bestval:
    bestval = d 
</snippet></ROW><ROW><id>17323352</id><snippet>bestval == -1</snippet></ROW><ROW><id>17323352</id><snippet>bestval</snippet></ROW><ROW><id>17323352</id><snippet>d &lt; bestval</snippet></ROW><ROW><id>17323417</id><snippet>ord</snippet></ROW><ROW><id>17323417</id><snippet>ord = {}</snippet></ROW><ROW><id>17323417</id><snippet>d = {}
k = 0 
while k &lt; 5: 
    s = input("name: ") 
    d[k] = s
    k += 1
</snippet></ROW><ROW><id>17323417</id><snippet>sum</snippet></ROW><ROW><id>17323417</id><snippet>raw_input()</snippet></ROW><ROW><id>17323417</id><snippet>input()</snippet></ROW><ROW><id>17323417</id><snippet>d = {}
for k in range(5): 
    d[k] = input("name: ")
</snippet></ROW><ROW><id>17323417</id><snippet>d = { k:input('name: ') for k in range(5) }
</snippet></ROW><ROW><id>17323417</id><snippet>list</snippet></ROW><ROW><id>17323417</id><snippet>d = [ input('name: ') for _ in range(5) ]
</snippet></ROW><ROW><id>17323589</id><snippet>%</snippet></ROW><ROW><id>17323589</id><snippet>&amp;</snippet></ROW><ROW><id>17323589</id><snippet>'%Y-%m-%dT%H:&amp;M:%S.%fZ'
             ^
             |
         this is wrong
</snippet></ROW><ROW><id>17323589</id><snippet>&gt;&gt;&gt; strs = "2013-06-26T02:01:05.000Z"
&gt;&gt;&gt; datetime.strptime(strs, '%Y-%m-%dT%H:%M:%S.%fZ')
datetime.datetime(2013, 6, 26, 2, 1, 5)
</snippet></ROW><ROW><id>17323652</id><snippet>tornado.py</snippet></ROW><ROW><id>17323652</id><snippet>hello.py</snippet></ROW><ROW><id>17323652</id><snippet>import tornado.ioloop</snippet></ROW><ROW><id>17323652</id><snippet>ioloop</snippet></ROW><ROW><id>17323652</id><snippet>tornado</snippet></ROW><ROW><id>17323764</id><snippet>dict</snippet></ROW><ROW><id>17323764</id><snippet>all('abc' in d for d in (d1, d2, d3, d4))
</snippet></ROW><ROW><id>17323764</id><snippet>common_keys = set(d1).intersection(d2, d2, d3, d4)
'abc' in common_keys
</snippet></ROW><ROW><id>17323803</id><snippet>import ToBuildOrNot
needsBuild = ToBuildOrNot.run() # or whatever you call your top-level function
</snippet></ROW><ROW><id>17323885</id><snippet>line</snippet></ROW><ROW><id>17323885</id><snippet>line</snippet></ROW><ROW><id>17323885</id><snippet>re.search</snippet></ROW><ROW><id>17323885</id><snippet>file</snippet></ROW><ROW><id>17323885</id><snippet>for line in file:
    lis = re.search('^''$', line) # line not file
</snippet></ROW><ROW><id>17323885</id><snippet>list</snippet></ROW><ROW><id>17323885</id><snippet>file</snippet></ROW><ROW><id>17323885</id><snippet>with open('artsplus_categories.txt') as f:
    for line in f:
        print re.search(r"'(.*)'", line).group(1)
...         
MMA
acrylic
acting lessons
aerobic
alto
art therapy
ballet
ballroom
banjo
</snippet></ROW><ROW><id>17323906</id><snippet>_id</snippet></ROW><ROW><id>17323906</id><snippet>e["_id"]</snippet></ROW><ROW><id>17323906</id><snippet>jp.update(e['_id'], {'$set':{'sensesJa':sensesJa,'last':'#pushFormsAndSetNewAtt'},
                     '$push':{'forms':{'$each':forms_to_push}}})
</snippet></ROW><ROW><id>17323906</id><snippet>from pymongo import *
client = MongoClient()
coll = client.test.test

coll.save({'_id': 1, 'hello': 'world'})
e = coll.find_one()

print(e)
coll.find(e).count()
</snippet></ROW><ROW><id>17323906</id><snippet>e</snippet></ROW><ROW><id>17323906</id><snippet>e</snippet></ROW><ROW><id>17323907</id><snippet>funcs = (
    (20, f),
    (40, g),
    (float('inf'), h),
)

def superFunction(x):
    for limit, f in funcs:
        if x &lt;= limit:
            return f(x)
</snippet></ROW><ROW><id>17323907</id><snippet>bisect</snippet></ROW><ROW><id>17324422</id><snippet>pp = 2
ps = [pp]
lim = raw_input("Generate prime numbers up to what number? : ")
while pp &lt; int(lim):
    pp += 1
    for a in ps:
        if pp%a==0:
            break
    else:                # unindent
        ps.append(pp)    #  this
</snippet></ROW><ROW><id>17324422</id><snippet>pp = 2
ps = [pp]
lim = raw_input("Generate prime numbers up to what number? : ")
while pp &lt; int(lim):
    pp += 1
    for a in ps:
        if a*a &gt; pp:         # stop
            ps.append(pp)    #  early
            break
        if pp%a==0:
            break
</snippet></ROW><ROW><id>17324494</id><snippet>PYTHON_EXECUTABLE=/usr/bin/python2.7/
PYTHON_INCLUDE=/usr/include/python2.7/
PYTHON_LIBRARY=/usr/lib/libpython2.7.a    //or .so for shared library
PYTHON_PACKAGES_PATH=/usr/local/lib/python2.7/site-packages/
PYTHON_NUMPY_INCLUDE_DIR=/usr/local/lib/python2.7/dist-packages/numpy/core/include
</snippet></ROW><ROW><id>17324642</id><snippet>product</snippet></ROW><ROW><id>17324642</id><snippet>In [19]: list( product([1, 2, 3, 4, 5], repeat=2) )
Out[19]: 
[(1, 1),
 (1, 2),
 (1, 3),
 (1, 4),
 (1, 5),
 (2, 1),
 (2, 2),
 (2, 3),
 (2, 4),
 (2, 5),
 (3, 1),
 (3, 2),
 (3, 3),
 (3, 4),
 (3, 5),
 (4, 1),
 (4, 2),
 (4, 3),
 (4, 4),
 (4, 5),
 (5, 1),
 (5, 2),
 (5, 3),
 (5, 4),
 (5, 5)]
</snippet></ROW><ROW><id>17324701</id><snippet>{% for row in rows %}
    &lt;tr&gt;
        &lt;td&gt;{{ row.number }}&lt;/td&gt;
        &lt;td&gt;{{ row.call_type }}&lt;/td&gt;
        {% if row.customer_id %}
            &lt;td&gt;{{ row.costumer_id }}&lt;/td&gt;
        {% else %}
            &lt;td&gt;{{ row.department_name }}{{ row.description }}&lt;/td&gt;
        {% endif %}
        &lt;td&gt;{{ ???? }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>17324701</id><snippet>{% ifequal row.costumer_id NULL %}
{% ifequal row.costumer_id None %}
...
</snippet></ROW><ROW><id>17325114</id><snippet>python main.py --config=/path/to/config.ini</snippet></ROW><ROW><id>17325114</id><snippet>--config</snippet></ROW><ROW><id>17325114</id><snippet>config.ini</snippet></ROW><ROW><id>17325114</id><snippet>environ</snippet></ROW><ROW><id>17325114</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17325114</id><snippet>SetEnv my_namespace.some_param some_value</snippet></ROW><ROW><id>17325114</id><snippet>os.environ</snippet></ROW><ROW><id>17325114</id><snippet>import os
os.environ['my_namespace.some_param']
</snippet></ROW><ROW><id>17325133</id><snippet>trace</snippet></ROW><ROW><id>17325133</id><snippet>import sys
import trace

# create a Trace object, telling it what to ignore, and whether to
# do tracing or line-counting or both.
tracer = trace.Trace(
    ignoredirs=[sys.prefix, sys.exec_prefix],
    trace=0,
    count=1)

# run the new command using the given tracer
tracer.run('main()')

# make a report, placing output in the current directory
r = tracer.results()
r.write_results(show_missing=True, coverdir=".")
</snippet></ROW><ROW><id>17325314</id><snippet>raw_input()</snippet></ROW><ROW><id>17325314</id><snippet>import re
s1 = '1321 .. 123123'
s2 = '-21323 , 1312321'
s3 = '- 12312.. - 9'

[int(x) for x in re.findall(r'[^,.]+', ''.join(s1.split()))]
=&gt; [1321, 123123]

[int(x) for x in re.findall(r'[^,.]+', ''.join(s2.split()))]
=&gt; [-21323, 1312321]

[int(x) for x in re.findall(r'[^,.]+', ''.join(s3.split()))]
=&gt; [-12312, -9]
</snippet></ROW><ROW><id>17325325</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re._MAXCACHE
100
</snippet></ROW><ROW><id>17325325</id><snippet>compiled_expression = re.compile(r'(?i)User [_0-9A-z]+ is ')

compiled_expression.sub(r"User .. is ", s)
</snippet></ROW><ROW><id>17325325</id><snippet>functools.partial()</snippet></ROW><ROW><id>17325325</id><snippet>sub()</snippet></ROW><ROW><id>17325325</id><snippet>from functools import partial

compiled_expression = re.compile(r'(?i)User [_0-9A-z]+ is ')
ready_to_use_sub = partial(compiled_expression.sub, r"User .. is ")
</snippet></ROW><ROW><id>17325325</id><snippet>ready_to_use_sub(s)</snippet></ROW><ROW><id>17325680</id><snippet>stderr</snippet></ROW><ROW><id>17325680</id><snippet>SIGHUP</snippet></ROW><ROW><id>17325680</id><snippet>stderr</snippet></ROW><ROW><id>17325883</id><snippet>driver = webdriver.Firefox() #First FF window
second_driver = webdriver.Firefox() #The new window you wanted to open
</snippet></ROW><ROW><id>17325883</id><snippet>print driver.title #to interact with the first driver
print second_driver.title #to interact with the second driver
</snippet></ROW><ROW><id>17325933</id><snippet>**kwargs</snippet></ROW><ROW><id>17325933</id><snippet>obj = MyClass(
    API_KEY,
    API_SECRET,
    OAUTH_TOKEN,
    OAUTH_TOKEN_SECRET,
    data=DATA
)
</snippet></ROW><ROW><id>17325933</id><snippet>**kwargs</snippet></ROW><ROW><id>17325933</id><snippet>obj = MyClass(
    API_KEY,
    API_SECRET,
    OAUTH_TOKEN,
    OAUTH_TOKEN_SECRET,
    **{'data': DATA}
)
</snippet></ROW><ROW><id>17325933</id><snippet>BaseClass</snippet></ROW><ROW><id>17326061</id><snippet>  try:                                                                        
      return globals()[action]()                                              
  except KeyError:                                                           
      return 'Action not found' 
</snippet></ROW><ROW><id>17326098</id><snippet>Default=</snippet></ROW><ROW><id>17326098</id><snippet>default=</snippet></ROW><ROW><id>17326098</id><snippet>class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0) 
    #                           ^ Check the case here
</snippet></ROW><ROW><id>17326099</id><snippet>dict.pop()</snippet></ROW><ROW><id>17326099</id><snippet>__dunder__</snippet></ROW><ROW><id>17326099</id><snippet>dict.pop()</snippet></ROW><ROW><id>17326099</id><snippet>dict</snippet></ROW><ROW><id>17326236</id><snippet>subprocess</snippet></ROW><ROW><id>17326236</id><snippet>import subprocess

#code
prog = subprocess.Popen(['python', filename, args])
#more code
</snippet></ROW><ROW><id>17326444</id><snippet>\2013</snippet></ROW><ROW><id>17326444</id><snippet>\201</snippet></ROW><ROW><id>17326444</id><snippet>\x81</snippet></ROW><ROW><id>17326444</id><snippet>C:\Users\Josh\Desktopü30216</snippet></ROW><ROW><id>17326444</id><snippet>\</snippet></ROW><ROW><id>17326444</id><snippet>os.chdir(r"C:\Users\Josh\Desktop\20130216")
</snippet></ROW><ROW><id>17326457</id><snippet>numpy.unique</snippet></ROW><ROW><id>17326457</id><snippet>import numpy as np
import pandas

df = pandas.DataFrame(dict(x=['1', 'a5', 'cde9', '1', 'cde9']))

unique_vals, df['keys'] = np.unique(df.x, return_inverse=True)

print df
</snippet></ROW><ROW><id>17326634</id><snippet>==</snippet></ROW><ROW><id>17326634</id><snippet>is</snippet></ROW><ROW><id>17326634</id><snippet>is</snippet></ROW><ROW><id>17326634</id><snippet>if needsBuild == True:
    print "The MSS_sims Needs To rebuilt"

elif needsBuild == False:
    print "The MSS_sims does NOT Need to be Rebuilt"

else:
    print "error
</snippet></ROW><ROW><id>17326650</id><snippet>In [140]: from dateutil import parser

In [130]: def parse(x):
   .....:     date, hh, mm, ss = x.split(':')
   .....:     dd, mo, yyyy = date.split('/')
   .....:     return parser.parse("%s %s %s %s:%s:%s" % (yyyy,mo,dd,hh,mm,ss))
   .....: 

In [131]: map(parse,idx)
Out[131]: 
[datetime.datetime(2013, 5, 16, 23, 56, 43),
 datetime.datetime(2013, 5, 16, 23, 56, 42),
 datetime.datetime(2013, 5, 16, 23, 56, 43),
 datetime.datetime(2013, 5, 17, 23, 54, 45),
 datetime.datetime(2013, 5, 17, 23, 54, 45),
 datetime.datetime(2013, 5, 17, 23, 54, 45)]

In [132]: pd.to_datetime(map(parse,idx))
Out[132]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-05-16 23:56:43, ..., 2013-05-17 23:54:45]
Length: 6, Freq: None, Timezone: None

In [133]: df = DataFrame(dict(time = pd.to_datetime(map(parse,idx))))

In [134]: df
Out[134]: 
                 time
0 2013-05-16 23:56:43
1 2013-05-16 23:56:42
2 2013-05-16 23:56:43
3 2013-05-17 23:54:45
4 2013-05-17 23:54:45
5 2013-05-17 23:54:45

In [138]: df['delta'] = (df['time']-df['time'].shift()).fillna(0)

In [139]: df
Out[139]: 
                 time     delta
0 2013-05-16 23:56:43  00:00:00
1 2013-05-16 23:56:42 -00:00:01
2 2013-05-16 23:56:43  00:00:01
3 2013-05-17 23:54:45  23:58:02
4 2013-05-17 23:54:45  00:00:00
5 2013-05-17 23:54:45  00:00:00
</snippet></ROW><ROW><id>17326684</id><snippet>fibConstant</snippet></ROW><ROW><id>17326684</id><snippet>from math import sqrt

phi = (1 + sqrt(5)) / 2.

def fib(n):
    return (phi**n - (1-phi)**n) / sqrt(5)

fib_constant_list = [1./fib(1)]
def fib_constant(n):
    new_fib_c = (1./fib(n) + fib_constant_list[-1])
    fib_constant_list.append(new_fib_c)
    return new_fib_c

n = 2
N_MAX = 1000
while n &lt; N_MAX:
     print fib_constant(n)
</snippet></ROW><ROW><id>17326808</id><snippet>#!/usr/bin/env python
content = open('test', 'r').read()
correct_block, blockonly = False, False

for line in content.split('\n'):
  if 'FixedBlock' in line: correct_block = True
  if correct_block == True and 'completed' in line and 'YES' in line: blockonly = True

if blockonly:
  #TODO SOMETHING
else:
  #TODO SOMETHINGELSE
</snippet></ROW><ROW><id>17326885</id><snippet>result.sum_adt_out</snippet></ROW><ROW><id>17326885</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>17326885</id><snippet>!=</snippet></ROW><ROW><id>17326885</id><snippet>float()</snippet></ROW><ROW><id>17326885</id><snippet>&lt;td style="text-align: right;" tal:define="sum_adt_out python:float(result.sum_adt_out)"&gt;
    &lt;span tal:condition="sum_adt_out"
          tal:content="python:'%.1f' % (float(result.sum_cenmn)/sum_adt_out,)"&gt;currentindex&lt;/span&gt;

    &lt;span tal:condition="not:sum_adt_out"&gt;0.0&lt;/span&gt;

&lt;/td&gt;
</snippet></ROW><ROW><id>17327009</id><snippet>&gt;&gt;&gt; a = [("hello", 1.6), ("Hi", 1.2), ("dear", 0.9)]
&gt;&gt;&gt; res = [x for x in a if x[1] &gt;= 1]
&gt;&gt;&gt; res
[('hello', 1.6), ('Hi', 1.2)]
</snippet></ROW><ROW><id>17327009</id><snippet>res = []
for x in a:
    if x[1] &gt;= 1:
       res.append(x)
</snippet></ROW><ROW><id>17327009</id><snippet>list comprehensions</snippet></ROW><ROW><id>17327009</id><snippet>filter</snippet></ROW><ROW><id>17327009</id><snippet>lambda</snippet></ROW><ROW><id>17327145</id><snippet>Tk.geometry</snippet></ROW><ROW><id>17327145</id><snippet>from Tkinter import * # from tkinter import * (In Python 3.x)

root = Tk()
root.geometry('3000x3000+-100+-100')
root.mainloop()
</snippet></ROW><ROW><id>17327199</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>17327199</id><snippet>from itertools import chain

for elem in chain.from_iterable(nested_list):
</snippet></ROW><ROW><id>17327199</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; nested_list = [['a', 'b'], ['c', 'd']]
&gt;&gt;&gt; for elem in chain.from_iterable(nested_list):
...     print elem,
... 
a b c d
</snippet></ROW><ROW><id>17327915</id><snippet>_name_map</snippet></ROW><ROW><id>17327915</id><snippet>for field in Board._meta.fields:
    if isinstance(field, ForeignKey):
        k = field.name
        # then whatever
</snippet></ROW><ROW><id>17327915</id><snippet>get_field_by_name</snippet></ROW><ROW><id>17328155</id><snippet>set</snippet></ROW><ROW><id>17328155</id><snippet>str.strip</snippet></ROW><ROW><id>17328155</id><snippet>str.lower</snippet></ROW><ROW><id>17328155</id><snippet>str.strip</snippet></ROW><ROW><id>17328155</id><snippet>'\n'</snippet></ROW><ROW><id>17328155</id><snippet>O(1)</snippet></ROW><ROW><id>17328155</id><snippet>O(n^2)</snippet></ROW><ROW><id>17328155</id><snippet>str.strip</snippet></ROW><ROW><id>17328155</id><snippet>str.lower</snippet></ROW><ROW><id>17328155</id><snippet>with open(r"words.txt") as f1, open(r"text.txt", "r") as f2:

    dlist = set(line.strip().lower() for line in f2)  #set of words from database
    for line in f1:
        line = line.strip().lower()     #use strip to remove '\n'
        words = set(line.split())    #use split to get the words from the line
                                     #and convert it into a set
        common_words = words &amp; dlist  #use set intersection to find common words
        for word in common_words:  
           *trick* 
</snippet></ROW><ROW><id>17328155</id><snippet>f1</snippet></ROW><ROW><id>17328155</id><snippet>f2</snippet></ROW><ROW><id>17328165</id><snippet>def get_py_type(access_type):
    if access_type == "integer":
        return "int"
    elif access_type.startswith("varchar"):
        return "str"
    elif access_type == "double":
        return "float"
    elif access_type == "date":
        return "datetime"
    else:
        return "unknown"
</snippet></ROW><ROW><id>17328165</id><snippet>&gt;&gt;&gt; Types = ['integer', 'varchar(12)', 'integer', 'double', 'date']
&gt;&gt;&gt; pyTypes = [get_py_type(item) for item in Types]
&gt;&gt;&gt; print pyTypes
['int', 'str', 'int', 'float', 'datetime']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17328255</id><snippet>shelve</snippet></ROW><ROW><id>17328255</id><snippet>import pickle

## I am making up a dictionary here to show you how this works...
## Because I want to store this outside of this single run, it could be that this
## dictionary is dynamic and user based - so persistance beyond this run has
## meaning for me.  
myMadeUpDictionary = {"one": "banana", "two": "banana", "three": "banana", "four": "no-more"}

with open("mySavedDict.txt", "wb") as myFile:
    pickle.dump(myMadeUpDictionary, myFile)
</snippet></ROW><ROW><id>17328255</id><snippet>nammer@crunchyQA:~/workspace/SandBox/POSTS/Pickle &amp; cPickle$ cat mySavedDict.txt 
(dp0
S'four'
p1
S'no-more'
p2
sS'three'
p3
S'banana'
p4
sS'two'
p5
g4
sS'one'
p6
g4
s.
</snippet></ROW><ROW><id>17328255</id><snippet>import pickle

with open("mySavedDict.txt", "rb") as myFile:
    myNewPulledInDictionary = pickle.load(myFile)

print myNewPulledInDictionary
</snippet></ROW><ROW><id>17328255</id><snippet>{'four': 'no-more', 'one': 'banana', 'three': 'banana', 'two': 'banana'}
</snippet></ROW><ROW><id>17328255</id><snippet>import cPickle as pickle
</snippet></ROW><ROW><id>17328255</id><snippet>import cPickle
</snippet></ROW><ROW><id>17328255</id><snippet>pickle</snippet></ROW><ROW><id>17328255</id><snippet>load()</snippet></ROW><ROW><id>17328255</id><snippet>loads()</snippet></ROW><ROW><id>17328255</id><snippet>dump()</snippet></ROW><ROW><id>17328255</id><snippet>dumps()</snippet></ROW><ROW><id>17328255</id><snippet>shelve</snippet></ROW><ROW><id>17328255</id><snippet>dict_items_read = dict_items_open.read()</snippet></ROW><ROW><id>17328255</id><snippet>read()</snippet></ROW><ROW><id>17328255</id><snippet>import cPickle as pickle

BDICT = {}

## Automatically generated START
name = "BOB"
name_title = name.title()
count = 5
BDICT[name_title] = count

name = "TOM"
name_title = name.title()
count = 5
BDICT[name_title] = count

name = "TIMMY JOE"
name_title = name.title()
count = 5
BDICT[name_title] = count
## Automatically generated END

if BDICT:
    with open('DICT_ITEMS.txt', 'wb') as dict_items_save:
        pickle.dump(BDICT, dict_items_save)

BDICT = {} ## Wiping the dictionary

## Usually in a loop
firstrunDICT = True

if firstrunDICT:
    with open('DICT_ITEMS.txt', 'rb') as dict_items_open:
        BDICT = pickle.load(dict_items_open)
        firstrunDICT = False
        print BDICT
</snippet></ROW><ROW><id>17328262</id><snippet>.idxmax()</snippet></ROW><ROW><id>17328262</id><snippet>.max</snippet></ROW><ROW><id>17328262</id><snippet>ndarray.argmax</snippet></ROW><ROW><id>17328262</id><snippet>In [19]: data.groupby(['date'])['sales'].sum().idxmax()
Out[19]: '31-May-13'
</snippet></ROW><ROW><id>17328273</id><snippet>*args</snippet></ROW><ROW><id>17328273</id><snippet>**kwargs</snippet></ROW><ROW><id>17328273</id><snippet>def bar(*args, **kwargs):
    return foo(*args, **kwargs)
</snippet></ROW><ROW><id>17328273</id><snippet>args</snippet></ROW><ROW><id>17328273</id><snippet>kwargs</snippet></ROW><ROW><id>17328273</id><snippet>args</snippet></ROW><ROW><id>17328273</id><snippet>kwargs</snippet></ROW><ROW><id>17328273</id><snippet>*</snippet></ROW><ROW><id>17328273</id><snippet>**</snippet></ROW><ROW><id>17328475</id><snippet>input.txt</snippet></ROW><ROW><id>17328475</id><snippet>Suzuki music
Chinese music
Conservatory
Blue grass
Rock n roll
Rhythm
Composition
Contra
Instruments 
</snippet></ROW><ROW><id>17328475</id><snippet>with open('input.txt', 'r') as f:
   print ", ".join(['"%s"' % row.lower() for row in f.read().splitlines()])
</snippet></ROW><ROW><id>17328475</id><snippet>"Suzuki music", "Chinese music", "Conservatory", "Blue grass", "Rock n roll", "Rhythm", "Composition", "Contra", "Instruments"
</snippet></ROW><ROW><id>17328488</id><snippet>condeded_away = 0
   ^
</snippet></ROW><ROW><id>17328488</id><snippet>final_stats</snippet></ROW><ROW><id>17328488</id><snippet>teams = {
    'team1': [...],
    'team2': [...],
    ...
}
</snippet></ROW><ROW><id>17328488</id><snippet>stats = teams['team2']
</snippet></ROW><ROW><id>17328523</id><snippet>numpy</snippet></ROW><ROW><id>17328523</id><snippet>numpy.mean</snippet></ROW><ROW><id>17328523</id><snippet># there are no builtin avg function
def avg(lst):
    return sum(lst)/len(lst)

rows = list(avg(row) for row in a)
</snippet></ROW><ROW><id>17328528</id><snippet>.replace(',',', ')</snippet></ROW><ROW><id>17328528</id><snippet>.replace(',',',=')</snippet></ROW><ROW><id>17328602</id><snippet>getattr()</snippet></ROW><ROW><id>17328602</id><snippet>getattr(options, 'pass')</snippet></ROW><ROW><id>17328858</id><snippet>set_index</snippet></ROW><ROW><id>17328858</id><snippet>inplace=True</snippet></ROW><ROW><id>17328858</id><snippet>In [7]: df = df.set_index(pd.DatetimeIndex(df['b']))

In [8]: df
Out[8]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 100 entries, 2013-06-14 09:10:23.523845 to 2013-06-14 10:12:51.650043
Data columns (total 2 columns):
b    100  non-null values
c    100  non-null values
dtypes: datetime64[ns](1), int64(1)
</snippet></ROW><ROW><id>17328858</id><snippet>unit=us</snippet></ROW><ROW><id>17328858</id><snippet>In [13]: pd.to_datetime(a,unit='us')
Out[13]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-06-14 13:10:23.523845, ..., 2013-06-14 14:12:51.650043]
Length: 100, Freq: None, Timezone: None
</snippet></ROW><ROW><id>17328864</id><snippet>mv ~/.idlerc ~/.idlerc-save
</snippet></ROW><ROW><id>17328924</id><snippet>heapq</snippet></ROW><ROW><id>17328924</id><snippet>heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
</snippet></ROW><ROW><id>17328924</id><snippet>&gt;&gt;&gt; from heapq import *
&gt;&gt;&gt; l = []
&gt;&gt;&gt; heappush(l, (4, 'element')) # priority, element
&gt;&gt;&gt; l
[(4, 'element')]
&gt;&gt;&gt; heappush(l, (3, 'element2'))
&gt;&gt;&gt; l
[(3, 'element2'), (4, 'element')]
&gt;&gt;&gt; heappush(l, (5, 'element3'))
&gt;&gt;&gt; l
[(3, 'element2'), (4, 'element'), (5, 'element3')]
&gt;&gt;&gt; heappop(l)
(3, 'element2')
&gt;&gt;&gt; heappop(l)
(4, 'element')
&gt;&gt;&gt; heappop(l)
(5, 'element3')
</snippet></ROW><ROW><id>17328924</id><snippet>len(l)</snippet></ROW><ROW><id>17328924</id><snippet>l</snippet></ROW><ROW><id>17328924</id><snippet>l = [(3, 1000), (4, 2000), (5, 500)]
estimated = sum(t[1] for t in l)
totalSize = sum(t[0] for t in l)
</snippet></ROW><ROW><id>17328924</id><snippet>{priority : [queue]}</snippet></ROW><ROW><id>17328946</id><snippet>regex</snippet></ROW><ROW><id>17328946</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "xtpo, example1=x, example2, example3=thisValue"
&gt;&gt;&gt; key = 'example1'
&gt;&gt;&gt; re.search(r'{}=(\w+)'.format(key), strs).group(1)
'x'
&gt;&gt;&gt; key = 'example3'
&gt;&gt;&gt; re.search(r'{}=(\w+)'.format(key), strs).group(1)
'thisValue'
</snippet></ROW><ROW><id>17329009</id><snippet>text[a[l]] = text[a[l]]+text[b[m]]
</snippet></ROW><ROW><id>17329009</id><snippet>['A', '123', 'BCR', 'EFRTY', 'RTY', 'B', '123', 'VCR', 'EF', 'B', '123', 'RRR', 'EFRTY', 'RTY']
</snippet></ROW><ROW><id>17329140</id><snippet>for item in list:
    item.lower()
</snippet></ROW><ROW><id>17329140</id><snippet>list</snippet></ROW><ROW><id>17329140</id><snippet>l</snippet></ROW><ROW><id>17329140</id><snippet>l</snippet></ROW><ROW><id>17329140</id><snippet>l = [item.lower() for item in l]
</snippet></ROW><ROW><id>17329140</id><snippet>lower</snippet></ROW><ROW><id>17329188</id><snippet>b</snippet></ROW><ROW><id>17329188</id><snippet>\x</snippet></ROW><ROW><id>17329188</id><snippet>'&gt;%dI' % (len(b) / 4)
</snippet></ROW><ROW><id>17329188</id><snippet>%</snippet></ROW><ROW><id>17329188</id><snippet>%d</snippet></ROW><ROW><id>17329188</id><snippet>`&gt;8I`
</snippet></ROW><ROW><id>17329188</id><snippet>&gt;</snippet></ROW><ROW><id>17329188</id><snippet>I</snippet></ROW><ROW><id>17329188</id><snippet>&gt;IIIIIIII
</snippet></ROW><ROW><id>17329188</id><snippet>0x00</snippet></ROW><ROW><id>17329341</id><snippet>python</snippet></ROW><ROW><id>17329341</id><snippet>#!/usr/bin/env python

# Code goes here
</snippet></ROW><ROW><id>17329493</id><snippet>sys.executable = '/bin/custom_python'

setup(
  entry_points={
    'console_scripts': [
       ... etc...
    ]
  }
)
</snippet></ROW><ROW><id>17329493</id><snippet>setup(
  entry_points={
    'console_scripts': [
       ... etc...
    ]
  },
  options={
      'build_scripts': {
          'executable': '/bin/custom_python',
      },
  }
)
</snippet></ROW><ROW><id>17329836</id><snippet>site_base.html</snippet></ROW><ROW><id>17329836</id><snippet>{% if debug %}
    &lt;link rel="stylesheet" type="text/css" href="{% static 'autocomplete_light/style.css' %}" /&gt;
    &lt;link href="{{ STATIC_URL }}bootstrap/less/bootstrap.less" charset="utf-8" type="text/less" rel="stylesheet"&gt;
    &lt;script type="text/javascript"&gt;less = {}; less.env = 'development';&lt;/script&gt;
    &lt;script type="text/javascript" src="{{ STATIC_URL }}less.js" &gt;&lt;/script&gt;
{% else %}
    {% compress css %}
    &lt;link rel="stylesheet" type="text/css" href="{% static 'autocomplete_light/style.css' %}" /&gt;
    &lt;link href="{{ STATIC_URL }}bootstrap/less/bootstrap.less" charset="utf-8" type="text/less" rel="stylesheet"&gt;
     {% endcompress %}
{% endif %}
</snippet></ROW><ROW><id>17329836</id><snippet>COMPRESS_PRECOMPILERS = (
    ('text/less', 'recess --compile {infile} &gt; {outfile}'),
)
</snippet></ROW><ROW><id>17329836</id><snippet>custom.less</snippet></ROW><ROW><id>17329836</id><snippet>custom.less</snippet></ROW><ROW><id>17329836</id><snippet>custom.less</snippet></ROW><ROW><id>17329836</id><snippet>custom.less</snippet></ROW><ROW><id>17329836</id><snippet>bootstrap.less</snippet></ROW><ROW><id>17329836</id><snippet>master.less</snippet></ROW><ROW><id>17329836</id><snippet>bootstrap/less/bootstrap.less</snippet></ROW><ROW><id>17329836</id><snippet>custom.less</snippet></ROW><ROW><id>17329836</id><snippet>master.less</snippet></ROW><ROW><id>17329836</id><snippet>bootstrap.less</snippet></ROW><ROW><id>17329836</id><snippet>site_base.html</snippet></ROW><ROW><id>17329916</id><snippet>inp = open("filelocation").readlines()
with open("filelocation", "w") as out:
    for line in inp:
        t = line[12:14]
        p = int(t)
        if p&gt;12:
            line = '{}{:02}{}'.format(line[:12], p-12, line[14:])
        out.write(line)
</snippet></ROW><ROW><id>17329931</id><snippet>session['token'] = [token.itervalues().next()]
</snippet></ROW><ROW><id>17329931</id><snippet>return graph.get_object("me")
</snippet></ROW><ROW><id>17330005</id><snippet>displayJob()</snippet></ROW><ROW><id>17330005</id><snippet>def displayJob(self):
    results = [
        "Job: " + self.jobName,
        "Job Category: " + self.jobCategory,
        "Job Pay: " + self.jobPay
    ]

    return "\n".join(results)
</snippet></ROW><ROW><id>17330005</id><snippet>file</snippet></ROW><ROW><id>17330005</id><snippet>import sys

def displayJob(self, file=sys.stdout):
    print("Job: " + self.jobName, file=file)
    print("Job Category: " + self.jobCategory, file=file)
    print("Job Pay: " + self.jobPay, file=file)
    print(file=file)

...

NewJob.displayJob(myFile)
</snippet></ROW><ROW><id>17330121</id><snippet>#!/usr/bin/python

import re

r = re.compile('(?:\n\s\&lt;b&gt;\$|\"FF0000"&gt;&lt;b&gt;\$)(\d*\.\d{2})(?=\&lt;\/)')
p = re.findall(r, '&lt;x y="FF0000"&gt;&lt;b&gt;$30.99&lt;/b&gt;&lt;/x&gt;\n &lt;b&gt;$31.99&lt;/b&gt;')
print p
</snippet></ROW><ROW><id>17330121</id><snippet>['30.99', '31.99']</snippet></ROW><ROW><id>17330144</id><snippet>import easygui as eg

question = "This is your question"
title = "This is your window title"
listOfOptions = ["option 1", "option 2", "option 3"]

choice = eg.multchoicebox(question , title, listOfOptions)
</snippet></ROW><ROW><id>17330144</id><snippet>choice</snippet></ROW><ROW><id>17330144</id><snippet>multchoicebox</snippet></ROW><ROW><id>17330144</id><snippet>choicebox</snippet></ROW><ROW><id>17330263</id><snippet>print "{:&lt;8} {:&lt;15} {:&lt;10}".format('Key','Label','Number')
for k,v in d.iteritems():
    label, num = v
    print "{:&lt;8} {:&lt;15} {:&lt;10}".format(k,label, num)
</snippet></ROW><ROW><id>17330263</id><snippet>Key      Label           Number    
1        Spices          38.0      
2        Other stuff     24.0      
3        Tea             44.0      
5        Fruit           5.0       
6        Textiles        37.0      
10       Contraband      1000.0 
</snippet></ROW><ROW><id>17330273</id><snippet>property()</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; property()
&lt;property object at 0x10ff07940&gt;
</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; property().getter
&lt;built-in method getter of property object at 0x10ff07998&gt;
&gt;&gt;&gt; property().setter
&lt;built-in method setter of property object at 0x10ff07940&gt;
&gt;&gt;&gt; property().deleter
&lt;built-in method deleter of property object at 0x10ff07998&gt;
</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; property().getter(None)
&lt;property object at 0x10ff079f0&gt;
</snippet></ROW><ROW><id>17330273</id><snippet>@decorator</snippet></ROW><ROW><id>17330273</id><snippet>@property
def foo(self): return self._foo
</snippet></ROW><ROW><id>17330273</id><snippet>def foo(self): return self._foo
foo = property(foo)
</snippet></ROW><ROW><id>17330273</id><snippet>foo</snippet></ROW><ROW><id>17330273</id><snippet>property(foo)</snippet></ROW><ROW><id>17330273</id><snippet>@foo.setter()</snippet></ROW><ROW><id>17330273</id><snippet>property().setter</snippet></ROW><ROW><id>17330273</id><snippet>property</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; def getter(self): print 'Get!'
... 
&gt;&gt;&gt; def setter(self, value): print 'Set to {!r}!'.format(value)
... 
&gt;&gt;&gt; def deleter(self): print 'Delete!'
... 
&gt;&gt;&gt; prop = property(getter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is None
True
&gt;&gt;&gt; prop.fdel is None
True
</snippet></ROW><ROW><id>17330273</id><snippet>.setter()</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; prop = prop.setter(setter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is None
True
</snippet></ROW><ROW><id>17330273</id><snippet>.deleter()</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; prop = prop.deleter(deleter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is deleter
True
</snippet></ROW><ROW><id>17330273</id><snippet>property</snippet></ROW><ROW><id>17330273</id><snippet>.__get__()</snippet></ROW><ROW><id>17330273</id><snippet>.__set__()</snippet></ROW><ROW><id>17330273</id><snippet>.__delete__()</snippet></ROW><ROW><id>17330273</id><snippet>&gt;&gt;&gt; class Foo(object): pass
... 
&gt;&gt;&gt; prop.__get__(Foo(), Foo)
Get!
&gt;&gt;&gt; prop.__set__(Foo(), 'bar')
Set to 'bar'!
&gt;&gt;&gt; prop.__delete__(Foo())
Delete!
</snippet></ROW><ROW><id>17330273</id><snippet>property()</snippet></ROW><ROW><id>17330273</id><snippet>class Property(object):
    "Emulate PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError("unreadable attribute")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError("can't set attribute")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError("can't delete attribute")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</snippet></ROW><ROW><id>17330307</id><snippet>print</snippet></ROW><ROW><id>17330307</id><snippet>&gt;&gt;&gt; i =0
&gt;&gt;&gt; print 'Sent email', i+1 
Sent email `1
</snippet></ROW><ROW><id>17330307</id><snippet>()</snippet></ROW><ROW><id>17330307</id><snippet>print</snippet></ROW><ROW><id>17330307</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print ('Sent email', i+1)
Sent email 1
</snippet></ROW><ROW><id>17330499</id><snippet>if isinstance(values, basestring):
    html += values + "&lt;br /&gt;"
else:
    for value in values:
        html += value + "&lt;br /&gt;"
</snippet></ROW><ROW><id>17330505</id><snippet>r"start_of_line:.*?(?=start_of_line|$)"
</snippet></ROW><ROW><id>17330505</id><snippet>*?</snippet></ROW><ROW><id>17330505</id><snippet>start_of_line:</snippet></ROW><ROW><id>17330505</id><snippet>r"start_of_line:(?:[^\n]+|\n(?!start_of_line:))*"
</snippet></ROW><ROW><id>17330505</id><snippet>\n</snippet></ROW><ROW><id>17330505</id><snippet>start_of_line:</snippet></ROW><ROW><id>17330682</id><snippet>%</snippet></ROW><ROW><id>17330682</id><snippet>'%%r_%%'</snippet></ROW><ROW><id>17330682</id><snippet>cursor.execute</snippet></ROW><ROW><id>17330682</id><snippet>cursor.execute(QryString, matter)
</snippet></ROW><ROW><id>17330714</id><snippet>filedata</snippet></ROW><ROW><id>17330714</id><snippet>name</snippet></ROW><ROW><id>17330714</id><snippet>file = request.files['filedata']   # gives you a FileStorage
test = request.form['name']        # gives you the string 'Test'
</snippet></ROW><ROW><id>17330714</id><snippet>request.files['Test']</snippet></ROW></DATA>