<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>2188541</id><snippet>print</snippet></ROW><ROW><id>2188541</id><snippet>open("my-debug-log.txt", "w").write(repr(variable))</snippet></ROW><ROW><id>2188784</id><snippet>/desktop/gnome/interface/buttons_have_icons
</snippet></ROW><ROW><id>2188784</id><snippet>C:\Program Files\Gtk+\etc\gtkrc</snippet></ROW><ROW><id>2188784</id><snippet>image = gtk.Image()
#  (from http://www.pygtk.org/docs/pygtk/gtk-stock-items.html)
image.set_from_stock(gtk.STOCK_**)
button = gtk.Button()
button.set_image(image)
button.set_label("")
</snippet></ROW><ROW><id>2188878</id><snippet>seen = set()
for x in foo:
    if x in seen:
        continue
    seen.add(x)
    # do something
</snippet></ROW><ROW><id>2188878</id><snippet>set</snippet></ROW><ROW><id>2188878</id><snippet>unique_everseen</snippet></ROW><ROW><id>2188878</id><snippet>for x in unique_everseen(foo):
    # do something
</snippet></ROW><ROW><id>2188904</id><snippet>test_detail_status_code</snippet></ROW><ROW><id>2188904</id><snippet>test_list_status_code</snippet></ROW><ROW><id>2188904</id><snippet>get_absolute_url()</snippet></ROW><ROW><id>2188904</id><snippet>test_list_numer_of_items</snippet></ROW><ROW><id>2188904</id><snippet>test_detail_template</snippet></ROW><ROW><id>2188904</id><snippet>test_list_template</snippet></ROW><ROW><id>2188904</id><snippet>save()</snippet></ROW><ROW><id>2188904</id><snippet>null</snippet></ROW><ROW><id>2188904</id><snippet>null</snippet></ROW><ROW><id>2188904</id><snippet>save()</snippet></ROW><ROW><id>2189118</id><snippet>-</snippet></ROW><ROW><id>2189118</id><snippet>stdin</snippet></ROW><ROW><id>2189118</id><snippet>python - &lt;&lt;END
</snippet></ROW><ROW><id>2189271</id><snippet>__unicode__</snippet></ROW><ROW><id>2189271</id><snippet>__str__</snippet></ROW><ROW><id>2189271</id><snippet>class A(int):
    def __str__(self):
        print "A.str"
        return int.__str__(self)

    def __unicode__(self):
        print "A.unicode"
        return int.__str__(self)

class B(int):
    def __str__(self):
        print "B.str"
        return int.__str__(self)


unicode(A(1)) # prints "A.unicode"
unicode(B(1)) # prints "B.str"
</snippet></ROW><ROW><id>2189347</id><snippet>l = [huge list from your example]
for e in l: # for each list
    for t in e: # for each tuple
        for s in t: # each string
            if 'playAudio' in s:
                args = s[9:].split(',') #skip 'playAudio' split on comma
                print "%s,%s" % (args[0].strip('('),
                                 args[1].lstrip(" ")[0:args[1].find(')')]
</snippet></ROW><ROW><id>2189347</id><snippet>from BeautifulSoup import BeautifulSoup, SoupStrainer
import re
import urllib2

doc = urllib2.urlopen("http://www.learnersdictionary.com/search/python").read()
doc = doc.replace('&lt;/SCR', '')
audioLinks = SoupStrainer('a', onclick=re.compile(r'^playAudio'))
soup = [str(elm) for elm in BeautifulSoup(doc, parseOnlyThese=audio)]
for elm in soup:
    print re.search(r'playAudio\((.*[^)])\)', elm).group(1)
    # prints 'python01.wav', 'py*thon'
</snippet></ROW><ROW><id>2189425</id><snippet>select_related</snippet></ROW><ROW><id>2189425</id><snippet>x = MainTable.objects.get( id="some Object" )
y= x.subTable
</snippet></ROW><ROW><id>2189425</id><snippet>for m in MainTable.objects.all():
    y = m.subTable
    if y.someAttribute &gt; 5: 
        break
</snippet></ROW><ROW><id>2189425</id><snippet>MainTable</snippet></ROW><ROW><id>2189425</id><snippet>x.subTable</snippet></ROW><ROW><id>2189425</id><snippet>MainTable.objects.select_related()...</snippet></ROW><ROW><id>2189437</id><snippet>'D:\\aaa.db'</snippet></ROW><ROW><id>2189618</id><snippet>data = data[1] + data[0]
</snippet></ROW><ROW><id>2189618</id><snippet>struct</snippet></ROW><ROW><id>2189618</id><snippet>&gt;&gt;&gt; from struct import pack, unpack
&gt;&gt;&gt; unpack('&lt;H', '\x12\x13')
(4882,)
&gt;&gt;&gt; pack('&gt;H', *unpack('&lt;H', '\x12\x13'))
'\x13\x12'
</snippet></ROW><ROW><id>2189662</id><snippet>table.insert()</snippet></ROW><ROW><id>2189662</id><snippet>result.last_inserted_ids()</snippet></ROW><ROW><id>2189814</id><snippet>str(133)</snippet></ROW><ROW><id>2189814</id><snippet>len(str(123))</snippet></ROW><ROW><id>2190549</id><snippet>__import__('some_module')
</snippet></ROW><ROW><id>2190965</id><snippet>import sys
import subprocess

class Fanspeed(object):

    def __init__(self, command):
        self.command = command.split()

    def average_fan_speed(self):
        data = subprocess.Popen(CMD,stdout=subprocess.PIPE).stdout.readlines()

        count = total = 0
        for item in data:
            if "Reading" in item:
                # Extract variable length fan speed, without regex.
                total += int(item.split(":")[1].split()[0])
                count += 1
        # Sometimes omreport returns zero output if omsa services aren't started.
        if not count or not total:
            raise ValueError("I found no fans. Is OMSA services started?"

        avg = (total / count)
        return % avg

if __main__ == '__main__':
    # Munin populates sys.argv[1] with "" (an empty argument), lets remove it.
    sys.argv = [x for x in sys.argv if x]

    if len(sys.argv) &gt; 1:
        if sys.argv[1].lower() == "autoconfig":
            print "autoconfig"
        elif sys.argv[1].lower() == "config":
            print "graph_title Average Fan Speed"
            print "graph_args --base 1000 -l 0"
            print "graph_vlabel speed (RPM)"
            print "graph_category Chassis"
            print "graph_info This graph shows the average speed of all fans"
            print "graph_period second"
            print "speed.label speed"
            print "speed.info Average fan speed for the five minutes."
    else:
        try:
            cmd = "/usr/sbin/omreport chassis fans"
            fanspeed = Fanspeed(cmd)
            average = fanspeed.average_fan_speed()
        except OSError, e:
            print &gt;&gt; sys.stderr, "Error running '%s', %s" % (cmd, e)
            sys.exit(1)
        except ValueError, e:
            # Sometimes omreport returns zero output if omsa services aren't started.
            print &gt;&gt; sys.stderr, 'Error: "omreport chassis fans" returned 0 output.'
            print &gt;&gt; sys.stderr, 'OMSA running? Try: "srvadmin-services.sh status".'
            sys.exit(1)
</snippet></ROW><ROW><id>2191006</id><snippet>title = u'\xb5\xb1\xc4\xe3\xb9\xc2\xb5\xa5\xc4\xe3\xbb\xe1\xcf\xeb\xc6\xf0\xcb\xad'
print title.encode('latin-1').decode('gbk')
当你孤单你会想起谁
</snippet></ROW><ROW><id>2191085</id><snippet>&lt;input type="checkbox" name="vehicle" value="Bike" /&gt;
&lt;input type="checkbox" name="vehicle" value="Car" /&gt;
&lt;input type="checkbox" name="vehicle" value="Airplane" /&gt;
</snippet></ROW><ROW><id>2191085</id><snippet>def delete(request):
    values = request.POST.getlist(u'vehicle')
    # Handling goes here.
</snippet></ROW><ROW><id>2191243</id><snippet>print results.split(' ')[5]
</snippet></ROW><ROW><id>2191243</id><snippet>rx = re.compile('version\s+([\d.]+)\s+')
rxx = rx.search(results)
if rxx:
    print rxx.group(1)
</snippet></ROW><ROW><id>2191304</id><snippet>filename="file1"
if filename == 'file1':
    print 1
</snippet></ROW><ROW><id>2191360</id><snippet>boost::python::object</snippet></ROW><ROW><id>2191360</id><snippet>PyObject*</snippet></ROW><ROW><id>2191360</id><snippet>object();</snippet></ROW><ROW><id>2191360</id><snippet>None</snippet></ROW><ROW><id>2191458</id><snippet>def filepath(filename, foldername=None, envar='MYAPPDIR'):
  default = '~/myFolder'
  if foldername:
    default = os.path.join(default, foldername)
  dirpath = os.path.expanduser(os.environ.get(envar, default))

  try:
    os.makedirs(dirpath)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise
  return os.path.join(dirpath, filename)
</snippet></ROW><ROW><id>2191458</id><snippet>def filepath(filename, foldername=None, envar='MYAPPDIR'):
  dirpath = os.path.expanduser(os.environ.get(envar, "~/myFolder"))
  if foldername:
    dirpath = os.path.join(dirpath, foldername)

  try:
    os.makedirs(dirpath)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise
  return os.path.join(dirpath, filename)
</snippet></ROW><ROW><id>2191458</id><snippet>def filepath(filename, foldername=None, envar='MYAPPDIR'):
  default = os.path.join(os.environ.get("XDG_CONFIG_HOME", "~/.config"), "myFolder")
  dirpath = os.path.expanduser(os.environ.get(envar, default))
  if foldername:
    dirpath = os.path.join(dirpath, foldername)

  try:
    os.makedirs(dirpath)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise
  return os.path.join(dirpath, filename)
</snippet></ROW><ROW><id>2191602</id><snippet>(?:[a-z]+-\d{1,5})(?:, [a-z]+-\d{1,5})*\|.*
</snippet></ROW><ROW><id>2191602</id><snippet>&gt;&gt;&gt; regex = '[a-z]+-\d{1,5}(?:, [a-z]+-\d{1,5})*\|.*'
&gt;&gt;&gt; re.match(regex, 'proj-234, proj-345|log message') is not None
True
</snippet></ROW><ROW><id>2191602</id><snippet>prefs, _, log = subj.partition('|')
for group in prefs.split(', '):
    pref, _, id5 = group.partition('-')
    if id5.isdigit() and len(id5) &lt;= 5 and pref.isalpha():
         print(pref, id5)
</snippet></ROW><ROW><id>2191661</id><snippet>Temps</snippet></ROW><ROW><id>2191661</id><snippet>FanSpeed</snippet></ROW><ROW><id>2191661</id><snippet>Animal</snippet></ROW><ROW><id>2191661</id><snippet>Animal</snippet></ROW><ROW><id>2191707</id><snippet>[item for item in a if item[0] == 1]
</snippet></ROW><ROW><id>2191707</id><snippet>[item for item in a if 1 in item]
</snippet></ROW><ROW><id>2191711</id><snippet>class AutoRegister(type):
  def __new__(mcs, name, bases, D):
    self = type.__new__(mcs, name, bases, D)
    if "ID" in D:  # only register if has ID attribute directly
      if self.ID in self._by_id:
        raise ValueError("duplicate ID: %r" % self.ID)
      self._by_id[self.ID] = self
    return self

class Base(object):
  __metaclass__ = AutoRegister
  _by_id = {}
  ID = "base"

  @classmethod
  def from_id(cls, id):
    return cls._by_id[id]()

class A(Base):
  ID = "A"

class B(Base):
  ID = "B"

print Base.from_id("A")
print Base.from_id("B")
</snippet></ROW><ROW><id>2191711</id><snippet>class IDFactory(object):
  def __init__(self):
    self._by_id = {}
  def register(self, cls):
    self._by_id[cls.ID] = cls
    return cls

  def __call__(self, id, *args, **kwds):
    return self._by_id[id](*args, **kwds)
  # could use a from_id function instead, as above

factory = IDFactory()

@factory.register
class Base(object):
  ID = "base"

@factory.register
class A(Base):
  ID = "A"

@factory.register
class B(Base):
  ID = "B"

print factory("A")
print factory("B")
</snippet></ROW><ROW><id>2191711</id><snippet>class IDFactory(object):
  def __init__(self):
    self._by_id = {}

  def register(self, cls):
    self._by_id[cls.ID] = cls
    return cls

  def register_as(self, name):
    def wrapper(cls):
      self._by_id[name] = cls
      return cls
    return wrapper

  # ...

@factory.register_as("A")  # doesn't require ID anymore
@factory.register          # can still use ID, even mix and match
@factory.register_as("B")  # imagine we got rid of B,
class A(object):           #  and A fulfills that roll now
  ID = "A"
</snippet></ROW><ROW><id>2191711</id><snippet>class IDFactory(object):
  #...

class Base(object):
  factory = IDFactory()

  @classmethod
  def register(cls, subclass):
    if subclass.ID in cls.factory:
      raise ValueError("duplicate ID: %r" % subclass.ID)
    cls.factory[subclass.ID] = subclass
    return subclass

@Base.factory.register  # still completely decoupled
                        # (it's an attribute of Base, but that can be easily
                        # changed without modifying the class A below)
@Base.register  # alternatively more coupled, but possibly desired
class A(Base):
  ID = "A"
</snippet></ROW><ROW><id>2191740</id><snippet>DiGraph.out_edges(nbunch=None, data=False)
</snippet></ROW><ROW><id>2191740</id><snippet>graph.out_edges([my_node])
</snippet></ROW><ROW><id>2191845</id><snippet>codecs</snippet></ROW><ROW><id>2191845</id><snippet>import codecs
outputFile = codecs.open("textbase.tab", "w", "ISO-8859-1")
</snippet></ROW><ROW><id>2191845</id><snippet>unicode</snippet></ROW><ROW><id>2191845</id><snippet>str</snippet></ROW><ROW><id>2191845</id><snippet>codecs.open</snippet></ROW><ROW><id>2191896</id><snippet>value = b if a &gt; 10 else c
</snippet></ROW><ROW><id>2191896</id><snippet>value = [c, b][a &gt; 10]
</snippet></ROW><ROW><id>2192401</id><snippet>while True</snippet></ROW><ROW><id>2192401</id><snippet>if-break</snippet></ROW><ROW><id>2192603</id><snippet>System.DirectoryServices.AccountManagment</snippet></ROW><ROW><id>2192603</id><snippet>UserPrincipal</snippet></ROW><ROW><id>2193000</id><snippet>j = i
</snippet></ROW><ROW><id>2193000</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>2193000</id><snippet>BUILD_CLASS</snippet></ROW><ROW><id>2193000</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>import</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>__del__</snippet></ROW><ROW><id>2193071</id><snippet>__del__</snippet></ROW><ROW><id>2193071</id><snippet>&gt;&gt;&gt; class visdel(object):
...   def __del__(self): print 'del', id(self)
... 
&gt;&gt;&gt; d = visdel()
&gt;&gt;&gt; a = list()
&gt;&gt;&gt; a.append(d)
&gt;&gt;&gt; del d
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>__del__</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>__del__</snippet></ROW><ROW><id>2193071</id><snippet>&gt;&gt;&gt; a.append(visdel())
&gt;&gt;&gt; a[:]=[1, 2, 3]
del 550864
del 551184
</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>__del__</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>del</snippet></ROW><ROW><id>2193071</id><snippet>pop</snippet></ROW><ROW><id>2193256</id><snippet>class Worker</snippet></ROW><ROW><id>2193256</id><snippet>run</snippet></ROW><ROW><id>2193342</id><snippet>__code__</snippet></ROW><ROW><id>2193342</id><snippet>func_code</snippet></ROW><ROW><id>2193342</id><snippet>dis.dis</snippet></ROW><ROW><id>2193342</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def f():
...   print 'ciao'
... 
&gt;&gt;&gt; inspect.getsource(f)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 694, in getsource
    lines, lnum = getsourcelines(object)
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 683, in getsourcelines
    lines, lnum = findsource(object)
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 531, in findsource
    raise IOError('could not get source code')
IOError: could not get source code
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2193342</id><snippet>inspect</snippet></ROW><ROW><id>2193342</id><snippet>readline</snippet></ROW><ROW><id>2193342</id><snippet>readline</snippet></ROW><ROW><id>2193342</id><snippet>&gt;&gt;&gt; readline.write_history_file('/tmp/hist.txt')
</snippet></ROW><ROW><id>2193508</id><snippet>gzip</snippet></ROW><ROW><id>2193508</id><snippet>zlib</snippet></ROW><ROW><id>2193508</id><snippet>GzipWrap</snippet></ROW><ROW><id>2193508</id><snippet>from gzip import GzipFile

class GzipWrap(object):
    # input is a filelike object that feeds the input
    def __init__(self, input, filename = None):
        self.input = input
        self.buffer = ''
        self.zipper = GzipFile(filename, mode = 'wb', fileobj = self)

    def read(self, size=-1):
        if (size &lt; 0) or len(self.buffer) &lt; size:
            for s in self.input:
                self.zipper.write(s)
                if size &gt; 0 and len(self.buffer) &gt;= size:
                    self.zipper.flush()
                    break
            else:
                self.zipper.close()
            if size &lt; 0:
                ret = self.buffer
                self.buffer = ''
        else:
            ret, self.buffer = self.buffer[:size], self.buffer[size:]
        return ret

    def flush(self):
        pass

    def write(self, data):
        self.buffer += data

    def close(self):
        self.input.close()
</snippet></ROW><ROW><id>2193546</id><snippet>import paramiko
transport=paramiko.Transport("10.10.0.0")
transport.connect(username="service",password="word")
sftp=paramiko.SFTPClient.from_transport(transport)
filestat=sftp.stat("/opt/ad/bin/email_tidyup.sh")
</snippet></ROW><ROW><id>2193546</id><snippet>import paramiko
client=paramiko.SSHClient()
client.load_system_host_keys()
client.connect("10.10.0.0",username="service",password="word")
_,stdout,_=client.exec_command("[ -f /opt/ad/bin/email_tidyup.sh ] &amp;&amp; echo OK")
assert stdout.read()
</snippet></ROW><ROW><id>2193712</id><snippet>SQLAlchemyError</snippet></ROW><ROW><id>2193746</id><snippet>site-packages</snippet></ROW><ROW><id>2193746</id><snippet>PYTHON_EGG_CACHE</snippet></ROW><ROW><id>2193746</id><snippet>~/.python-eggs</snippet></ROW><ROW><id>2193746</id><snippet>.python-eggs</snippet></ROW><ROW><id>2193746</id><snippet>/tmp/python-eggs</snippet></ROW><ROW><id>2193746</id><snippet>PYTHON_EGG_CACHE</snippet></ROW><ROW><id>2193746</id><snippet>-Z</snippet></ROW><ROW><id>2193746</id><snippet>easy_install</snippet></ROW><ROW><id>2193749</id><snippet>if not name.startswith('doc'):
     print name
</snippet></ROW><ROW><id>2193749</id><snippet>if not name.startswith(('prefix', 'another', 'yetanother')):
     print name
</snippet></ROW><ROW><id>2194111</id><snippet>load_dynamic_engine()</snippet></ROW><ROW><id>2194111</id><snippet>load_dynamic()</snippet></ROW><ROW><id>2194111</id><snippet>load_openssl()</snippet></ROW><ROW><id>2194111</id><snippet>load_dynamic_engine()</snippet></ROW><ROW><id>2194214</id><snippet>class Foo:
    # static method
    @staticmethod
    def test():
        pass

    # class variable
    c = {'name' : test }
</snippet></ROW><ROW><id>2194482</id><snippet>class FocusEmittingButton(QPushButton):
    #...
    def focusInEvent(self, event):
        # emit your signal
</snippet></ROW><ROW><id>2194482</id><snippet>Promote To</snippet></ROW><ROW><id>2194482</id><snippet>FocusEmittingButton</snippet></ROW><ROW><id>2194482</id><snippet>QApplication.focusChanged</snippet></ROW><ROW><id>2194482</id><snippet>QApplication.focusChanged(oldQWidget, newQWidget)</snippet></ROW><ROW><id>2194482</id><snippet>QApplication.focusChanged</snippet></ROW><ROW><id>2194703</id><snippet>Enumerable.Select</snippet></ROW><ROW><id>2194703</id><snippet>Func&lt;TSource, int, TResult&gt;</snippet></ROW><ROW><id>2194703</id><snippet>char[] letters = new[] { 'a', 'b', 'c' };
var enumerate = letters.Select((c, i) =&gt; new { Char = c, Index = i });
foreach (var result in enumerate) {
    Console.WriteLine(
        String.Format("Char = {0}, Index = {1}", result.Char, result.Index)
    );
}
</snippet></ROW><ROW><id>2194703</id><snippet>Char = a, Index = 0
Char = b, Index = 1
Char = c, Index = 2
</snippet></ROW><ROW><id>2194814</id><snippet>def foo(
        flab_nickers, # a series of under garments to process
        has_polka_dots=False,
        needs_pressing=False  # Whether the list of garments should all be pressed
   ):
    ...
</snippet></ROW><ROW><id>2194814</id><snippet>def foo(
        flab_nickers, 
        has_polka_dots=False,
        needs_pressing=False,
   ):
   """foo

   :param flab_nickers: a series of under garments to process
   :param has_polka_dots: default False
   :param needs_pressing: default False, Whether the list of garments should all be pressed
   """
    ...
</snippet></ROW><ROW><id>2194814</id><snippet>docutils</snippet></ROW><ROW><id>2195098</id><snippet>make</snippet></ROW><ROW><id>2195186</id><snippet>(id)   0   1   
0   1 smooth 
1   11  choppy
2   20  turbulent
3   2  smooth
4   5  choppy
5  7   bumpy
</snippet></ROW><ROW><id>2195186</id><snippet>import numpy as np
arr=np.loadtxt('datafile',
               dtype=[('id','int'),('speed','float'),('surface','|S20')], 
               skiprows=1)
</snippet></ROW><ROW><id>2195186</id><snippet>skiprows=1</snippet></ROW><ROW><id>2195186</id><snippet>arr[1]</snippet></ROW><ROW><id>2195186</id><snippet>arr['speed']</snippet></ROW><ROW><id>2195186</id><snippet>arr[3]['speed']</snippet></ROW><ROW><id>2195186</id><snippet>arr['speed'][3]</snippet></ROW><ROW><id>2195354</id><snippet>re.sub</snippet></ROW><ROW><id>2195354</id><snippet>import re
s = "87 foo 87 bar"
r = re.compile(r"87\s*")
s = r.sub('', s)
print s
</snippet></ROW><ROW><id>2195354</id><snippet>foo bar
</snippet></ROW><ROW><id>2195698</id><snippet>def addslashes(value):
    """
    Adds slashes before quotes. Useful for escaping strings in CSV, for
    example. Less useful for escaping JavaScript; use the ``escapejs``
    filter instead.
    """
    return value.replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
addslashes.is_safe = True
addslashes = stringfilter(addslashes)
</snippet></ROW><ROW><id>2195739</id><snippet>{% if is_loggedin or is_anonymous %}
test message
{% endif %}
</snippet></ROW><ROW><id>2195849</id><snippet>&gt;&gt;&gt; class A(object):
...     def set(self):
...             pass
...     def test(self, x=set):
...             return x
... 
&gt;&gt;&gt; set
&lt;type 'set'&gt;
&gt;&gt;&gt; A().test()
&lt;function set at 0x64270&gt;
</snippet></ROW><ROW><id>2195849</id><snippet>class A(object):
    def some_method(self):
        pass
    some_other_method = some_method
</snippet></ROW><ROW><id>2195849</id><snippet>set</snippet></ROW><ROW><id>2195849</id><snippet>__builtins__.set</snippet></ROW><ROW><id>2195979</id><snippet>unload</snippet></ROW><ROW><id>2195979</id><snippet>fixtures</snippet></ROW><ROW><id>2196014</id><snippet>&gt;&gt;&gt; id(2) == id(1+1)
True
&gt;&gt;&gt; id(1000) == id(1000+0)
False
&gt;&gt;&gt; id(1000) == id(1000)
True
</snippet></ROW><ROW><id>2196014</id><snippet>&gt;&gt;&gt; id(0)
8402324
</snippet></ROW><ROW><id>2196014</id><snippet>id(1000) == id(1000)</snippet></ROW><ROW><id>2196283</id><snippet>libvlc_media_player_new</snippet></ROW><ROW><id>2196675</id><snippet>setUp</snippet></ROW><ROW><id>2196675</id><snippet>test</snippet></ROW><ROW><id>2196675</id><snippet>class OurTest( unittest.TestCase ):
    def setUp( self ):
        self.load_data()
        self.load_results()
        self.uut = ... UUT ...
    def runTest( self ):
        ... exercise UUT with source data ...
        ... check results, using self.assertXXX methods ...
</snippet></ROW><ROW><id>2196675</id><snippet>class Test1( OurTest ):
    source_file = 'this'
    result_file = 'that'

class Test2( OutTest ):
    source_file= 'foo'
    result_file= 'bar'
</snippet></ROW><ROW><id>2196882</id><snippet>sudo rm /usr/local/bin/python</snippet></ROW><ROW><id>2196882</id><snippet>ls ~/.bash_profile.pysave</snippet></ROW><ROW><id>2196882</id><snippet>rm ~/.bash_profile &amp;&amp; mv ~/.bash_profile.pysave ~/.bash_profile</snippet></ROW><ROW><id>2196912</id><snippet>def saveSnapshot(dcSource):
    # based largely on code posted to wxpython-users by Andrea Gavana 2006-11-08
    size = dcSource.Size

    # Create a Bitmap that will later on hold the screenshot image
    # Note that the Bitmap must have a size big enough to hold the screenshot
    # -1 means using the current default colour depth
    bmp = wx.EmptyBitmap(size.width, size.height)

    # Create a memory DC that will be used for actually taking the screenshot
    memDC = wx.MemoryDC()

    # Tell the memory DC to use our Bitmap
    # all drawing action on the memory DC will go to the Bitmap now
    memDC.SelectObject(bmp)

    # Blit (in this case copy) the actual screen on the memory DC
    # and thus the Bitmap
    memDC.Blit( 0, # Copy to this X coordinate
        0, # Copy to this Y coordinate
        size.width, # Copy this width
        size.height, # Copy this height
        dcSource, # From where do we copy?
        0, # What's the X offset in the original DC?
        0  # What's the Y offset in the original DC?
        )

    # Select the Bitmap out of the memory DC by selecting a new
    # uninitialized Bitmap
    memDC.SelectObject(wx.NullBitmap)

    img = bmp.ConvertToImage()
    img.SaveFile('saved.png', wx.BITMAP_TYPE_PNG)
</snippet></ROW><ROW><id>2196972</id><snippet>l = [[0]] * 4
l[0][0] += 1
print l # prints "[[1], [1], [1], [1]]"
</snippet></ROW><ROW><id>2196972</id><snippet>import copy
l = [copy.copy(x) for x in [[0]] * 4]
l[0][0] += 1
print l # prints "[[1], [0], [0], [0]]"
</snippet></ROW><ROW><id>2196972</id><snippet>__copy__</snippet></ROW><ROW><id>2196972</id><snippet>copy</snippet></ROW><ROW><id>2196972</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2196972</id><snippet>arrayList = []
for x in allValues:
    result = model(x)
    arrayList.append(wM) # appends the wM object to the list
    wM.reset()           # clears  the wM object
</snippet></ROW><ROW><id>2196972</id><snippet>import copy
arrayList = []
for x in allValues:
    result = model(x)
    arrayList.append(copy.copy(wM)) # appends a copy to the list
    wM.reset()                      # clears the wM object
</snippet></ROW><ROW><id>2196972</id><snippet>wM</snippet></ROW><ROW><id>2196972</id><snippet>wM</snippet></ROW><ROW><id>2196972</id><snippet>model()</snippet></ROW><ROW><id>2196972</id><snippet>wM</snippet></ROW><ROW><id>2196972</id><snippet>result</snippet></ROW><ROW><id>2197247</id><snippet>writeback=True</snippet></ROW><ROW><id>2197247</id><snippet>shelf['foobar'].append(23)
</snippet></ROW><ROW><id>2197247</id><snippet>shelf</snippet></ROW><ROW><id>2197247</id><snippet>'foobar'</snippet></ROW><ROW><id>2197247</id><snippet>shelf</snippet></ROW><ROW><id>2197247</id><snippet>thelist = shelf['foobar']
thelist.append(23)
shekf['foobar'] = thelist
</snippet></ROW><ROW><id>2197334</id><snippet>datetime</snippet></ROW><ROW><id>2197334</id><snippet>&gt;&gt;&gt; datetime.datetime(1601, 1, 1) + datetime.timedelta(microseconds=1e16)
datetime.datetime(1917, 11, 21, 17, 46, 40)
&gt;&gt;&gt; _.isoformat()
'1917-11-21T17:46:40'
</snippet></ROW><ROW><id>2197334</id><snippet>datetime</snippet></ROW><ROW><id>2197334</id><snippet>strftime</snippet></ROW><ROW><id>2197493</id><snippet>str.split</snippet></ROW><ROW><id>2197493</id><snippet>str.join</snippet></ROW><ROW><id>2197493</id><snippet>"/".join(['', 'segment', 'segment', ''])
</snippet></ROW><ROW><id>2197493</id><snippet>'/'</snippet></ROW><ROW><id>2197493</id><snippet>join()</snippet></ROW><ROW><id>2197506</id><snippet>if set(L) &amp; set(M):
    # there is an intersection
else:
    # no intersection
</snippet></ROW><ROW><id>2197506</id><snippet>True</snippet></ROW><ROW><id>2197506</id><snippet>False</snippet></ROW><ROW><id>2197506</id><snippet>bool(set(L) &amp; set(M))
</snippet></ROW><ROW><id>2197506</id><snippet>m_set=set(M)
any(x in m_set  for x in L)
</snippet></ROW><ROW><id>2197506</id><snippet>any(x in M for x in L)
</snippet></ROW><ROW><id>2197506</id><snippet>M=range(100)
L=range(100,200)

timeit set(L) &amp; set(M)
10000 loops, best of 3: 32.3 µs per loop

timeit any(x in M for x in L)
1000 loops, best of 3: 374 µs per loop

timeit m_set=frozenset(M);any(x in m_set  for x in L)
10000 loops, best of 3: 31 µs per loop

L=range(50,150)

timeit set(L) &amp; set(M)
10000 loops, best of 3: 18 µs per loop

timeit any(x in M for x in L)
100000 loops, best of 3: 4.88 µs per loop

timeit m_set=frozenset(M);any(x in m_set  for x in L)
100000 loops, best of 3: 9.39 µs per loop


# Now for some random lists
import random
L=[random.randrange(200000) for x in xrange(1000)]
M=[random.randrange(200000) for x in xrange(1000)]

timeit set(L) &amp; set(M)
1000 loops, best of 3: 420 µs per loop

timeit any(x in M for x in L)
10 loops, best of 3: 21.2 ms per loop

timeit m_set=set(M);any(x in m_set  for x in L)
1000 loops, best of 3: 168 µs per loop

timeit m_set=frozenset(M);any(x in m_set  for x in L)
1000 loops, best of 3: 371 µs per loop
</snippet></ROW><ROW><id>2197625</id><snippet>&gt;&gt;&gt; class MyThread(threading.Thread):
...   def __init__(self):
...     super(MyThread, self).__init__()
</snippet></ROW><ROW><id>2197625</id><snippet>super</snippet></ROW><ROW><id>2197625</id><snippet>super(threading.Thread, ...</snippet></ROW><ROW><id>2197712</id><snippet>  SELECT CONCAT(x.weight, ' ', GROUP_CONCAT(t.id SEPARATOR ' '), '\n')
    FROM TRANSACTIONLOG t
    JOIN (SELECT tl.tableid,
                 tl.tupleid,
                 COUNT(DISTINCT tl.transactionid) AS weight
            FROM TRANSACTIONLOG tl
           WHERE tl.querytype = 'update'
        GROUP BY tl.tableid, tl.tupleid) x ON x.tableid = t.tableid
                                          AND x.tupleid = t.tupleid
                                          AND x.weight &gt; 0
GROUP BY t.tableid, t.tupleid, x.weight
  HAVING COUNT(*) &gt; 1
</snippet></ROW><ROW><id>2197936</id><snippet>pwd</snippet></ROW><ROW><id>2197936</id><snippet>pwd</snippet></ROW><ROW><id>2197963</id><snippet>&gt;&gt;&gt; f = open("/tmp/gs.pid", "r")
&gt;&gt;&gt; for line in f:
    ...   word = line.strip().split()[1].lower()
    ...   print " --&gt;", word
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>2197963</id><snippet>split()</snippet></ROW><ROW><id>2197963</id><snippet>[1]</snippet></ROW><ROW><id>2197963</id><snippet>lower()</snippet></ROW><ROW><id>2197963</id><snippet>&gt;&gt;&gt; f = open("/tmp/gs.pid", "r")
&gt;&gt;&gt; for line in f:
    ...   words = line.strip().split()
    ...   if len(words) &gt;= 2:
    ...      print " --&gt;", words[1].lower()
    ...   else:
    ...      print 'Line contains fewer than 2 words.'
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>2198052</id><snippet>socket.inet_ntoa(packed_ip)</snippet></ROW><ROW><id>2198052</id><snippet>packed ip</snippet></ROW><ROW><id>2198052</id><snippet>struct.pack()</snippet></ROW><ROW><id>2198052</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; import struct
&gt;&gt;&gt; addr_long = int("0200A8C0",16)
&gt;&gt;&gt; hex(addr_long)
'0x200a8c0'
&gt;&gt;&gt; struct.pack("&lt;L", addr_long)
'\xc0\xa8\x00\x02'

&gt;&gt;&gt; socket.inet_ntoa(struct.pack("&lt;L", addr_long))
'192.168.0.2'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2198402</id><snippet>CommaSeparatedIntegerField</snippet></ROW><ROW><id>2198402</id><snippet>my_ints = [1,2,3,4,5]
</snippet></ROW><ROW><id>2198402</id><snippet>class MyModel(models.Model):
    values = CommaSeparatedIntegerField(max_length = 200)
</snippet></ROW><ROW><id>2198402</id><snippet>my_ints</snippet></ROW><ROW><id>2198402</id><snippet>MyModel</snippet></ROW><ROW><id>2198402</id><snippet>m = MyModel(values = ','.join(my_ints))
m.save()
</snippet></ROW><ROW><id>2198657</id><snippet>Model</snippet></ROW><ROW><id>2198657</id><snippet>1</snippet></ROW><ROW><id>2198657</id><snippet>2</snippet></ROW><ROW><id>2198657</id><snippet>3</snippet></ROW><ROW><id>2198657</id><snippet>for</snippet></ROW><ROW><id>2198657</id><snippet>{% for object in objects %}
    Some value: {{ object.value }}
{% endfor %}
</snippet></ROW><ROW><id>2199320</id><snippet>'&amp;'.join('%s=%s' % (k,v) for k,v in params.items())
</snippet></ROW><ROW><id>2199320</id><snippet>&gt;&gt;&gt; params = { 'foo' : 'bar+baz', 'qux' : 'quux' }
&gt;&gt;&gt; urllib.urlencode(params)
'qux=quux&amp;foo=bar%2Bbaz'
</snippet></ROW><ROW><id>2199325</id><snippet>select_related</snippet></ROW><ROW><id>2199325</id><snippet>select_related</snippet></ROW><ROW><id>2199325</id><snippet>[ l.event_set.order_by( start_date ).all()[0] for l in Location.objects.select_related().all() ]
</snippet></ROW><ROW><id>2199325</id><snippet>events = []
for l in Location.objects.select_related().all():
    events.append( l.event_set.order_by( start_date ).all()[0] )
</snippet></ROW><ROW><id>2199497</id><snippet>oauth_request.to_header()</snippet></ROW><ROW><id>2199497</id><snippet>password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
top_level_url = "http://example.com/"
password_mgr.add_password(None, top_level_url, 'user', 'password')
handler = urllib2.HTTPBasicAuthHandler(password_mgr)
opener = urllib2.build_opener(urllib2.HTTPHandler, handler)
request = urllib2.Request(url)
</snippet></ROW><ROW><id>2199744</id><snippet>re.M</snippet></ROW><ROW><id>2199744</id><snippet>re.S</snippet></ROW><ROW><id>2199744</id><snippet>&gt;&gt;&gt; doc = """&lt;table border="1"&gt;
    &lt;tr&gt;
        &lt;td&gt;row 1, cell 1&lt;/td&gt;
        &lt;td&gt;row 1, cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;row 2, cell 1&lt;/td&gt;
        &lt;td&gt;row 2, cell 2&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;"""

&gt;&gt;&gt; re.findall('&lt;tr&gt;(.*?)&lt;/tr&gt;', doc, re.S)
['\n        &lt;td&gt;row 1, cell 1&lt;/td&gt;\n        &lt;td&gt;row 1, cell 2&lt;/td&gt;\n    ', 
 '\n        &lt;td&gt;row 2, cell 1&lt;/td&gt;\n        &lt;td&gt;row 2, cell 2&lt;/td&gt;\n    ']
&gt;&gt;&gt; re.findall('&lt;tr&gt;(.*?)&lt;/tr&gt;', doc, re.M)
[]
</snippet></ROW><ROW><id>2200091</id><snippet>str</snippet></ROW><ROW><id>2200091</id><snippet>str</snippet></ROW><ROW><id>2200091</id><snippet>mmap</snippet></ROW><ROW><id>2201617</id><snippet>from project.project import *</snippet></ROW><ROW><id>2201617</id><snippet>setenv PYTHONPATH /User/username/project</snippet></ROW><ROW><id>2201617</id><snippet>import sys</snippet></ROW><ROW><id>2201617</id><snippet>sys.path.append('/User/username/project')
</snippet></ROW><ROW><id>2201715</id><snippet>Listener</snippet></ROW><ROW><id>2201715</id><snippet>PyObject*</snippet></ROW><ROW><id>2201715</id><snippet>notify</snippet></ROW><ROW><id>2201715</id><snippet>notify</snippet></ROW><ROW><id>2201715</id><snippet>PyObject*</snippet></ROW><ROW><id>2201715</id><snippet>PyObject_CallMethod</snippet></ROW><ROW><id>2201785</id><snippet>''.join(unicode(page_title, 'utf-8').splitlines())</snippet></ROW><ROW><id>2201785</id><snippet>splitlines()</snippet></ROW><ROW><id>2201893</id><snippet>def engine_initz(self):
        """Return engine name"""
        return m2.engine_initz(self._ptr)
</snippet></ROW><ROW><id>2201893</id><snippet>void engine_init(PyObject *engine_err) {
    Py_INCREF(engine_err);
    _engine_err = engine_err;
}
</snippet></ROW><ROW><id>2201893</id><snippet>%rename(engine_initz) ENGINE_init;
extern int ENGINE_init(ENGINE *);
</snippet></ROW><ROW><id>2202055</id><snippet>urls = [many urls]
links = []
funcs = []

for url in urls:
    @funcs.append
    def func(url=url):
        page = open(url)
        link = searchForLink(page)
        links.append(link)
</snippet></ROW><ROW><id>2202119</id><snippet>lfmt</snippet></ROW><ROW><id>2202119</id><snippet>inspect</snippet></ROW><ROW><id>2202119</id><snippet>inspect</snippet></ROW><ROW><id>2202119</id><snippet>import inspect
def lfmt(s):
    caller = inspect.currentframe().f_back
    return s.format(**caller.f_locals)

a = 3
b = 'foo'
c = dict(mykey='myval')

print(lfmt('a is {a}, b is {b}, mykey is {c[mykey]}'))
# a is 3, b is foo, mykey is myval
</snippet></ROW><ROW><id>2202438</id><snippet>&gt;&gt;&gt; [(m.group(0), m.start()) for m in re.finditer('[aeiou]',s)]
[('u', 1), ('e', 3), ('a', 6), ('i', 8), ('a', 11), ('i', 13), ('i', 15), ('i', 18), ('e', 20), ('i', 23), ('a', 24), ('i', 26), ('o', 28), ('i', 30), ('o', 31), ('u', 32)]
</snippet></ROW><ROW><id>2202485</id><snippet>grouper</snippet></ROW><ROW><id>2202485</id><snippet>itertools</snippet></ROW><ROW><id>2202485</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>2202485</id><snippet>[iter(iterable)]*n</snippet></ROW><ROW><id>2202485</id><snippet>itertools</snippet></ROW><ROW><id>2202676</id><snippet>if hasattr(program, 'swimprogram'):
    # ...
elif hasattr(program, 'campprogram'):
    # ...
</snippet></ROW><ROW><id>2202676</id><snippet>class Archive(models.Model):
    pub_date = models.DateField()

    def __unicode__(self):
        return "Archive: %s" % self.pub_date

class ArchiveB(Archive):
    def __unicode__(self):
        return "ArchiveB: %s" % self.pub_date
</snippet></ROW><ROW><id>2202676</id><snippet>&gt; a_id = Archive.objects.create(pub_date="2010-10-10").id
&gt; b_id = ArchiveB.objects.create(pub_date="2011-11-11").id
&gt; a = Archive.objects.get(id=a_id)
&gt; b = Archive.objects.get(id=b_id)
&gt; (a, b) # they both look like archive objects
(&lt;Archive: Archive: 2010-10-10&gt;, &lt;Archive: Archive: 2011-11-11&gt;)
&gt; hasattr(a, 'archiveb')
False
&gt; hasattr(b, 'archiveb') # but only one has access to an ArchiveB
True
</snippet></ROW><ROW><id>2203002</id><snippet>import wx

class TextObjectValidator(wx.PyValidator):
     """ This validator is used to ensure that the user has entered something
         into the text object editor dialog's text field.
     """
     def __init__(self):
         """ Standard constructor.
         """
         wx.PyValidator.__init__(self)



     def Clone(self):
         """ Standard cloner.

             Note that every validator must implement the Clone() method.
         """
         return TextObjectValidator()


     def Validate(self, win):
         """ Validate the contents of the given text control.
         """
         textCtrl = self.GetWindow()
         text = textCtrl.GetValue()

         if len(text) == 0:
             wx.MessageBox("A text object must contain some text!", "Error")
             textCtrl.SetBackgroundColour("pink")
             textCtrl.SetFocus()
             textCtrl.Refresh()
             return False
         else:
             textCtrl.SetBackgroundColour(
                 wx.SystemSettings_GetColour(wx.SYS_COLOUR_WINDOW))
             textCtrl.Refresh()
             return True


     def TransferToWindow(self):
         """ Transfer data from validator to window.

             The default implementation returns False, indicating that an error
             occurred.  We simply return True, as we don't do any data transfer.
         """
         return True # Prevent wxDialog from complaining.


     def TransferFromWindow(self):
         """ Transfer data from window to validator.

             The default implementation returns False, indicating that an error
             occurred.  We simply return True, as we don't do any data transfer.
         """
         return True # Prevent wxDialog from complaining.

#----------------------------------------------------------------------

class TestValidateDialog(wx.Dialog):
    def __init__(self, parent):
        wx.Dialog.__init__(self, parent, -1, "Validated Dialog")

        self.SetAutoLayout(True)
        VSPACE = 10

        fgs = wx.FlexGridSizer(0, 2)

        fgs.Add((1,1));
        fgs.Add(wx.StaticText(self, -1,
                             "These controls must have text entered into them.  Each\n"
                             "one has a validator that is checked when the Okay\n"
                             "button is clicked."))

        fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE))

        label = wx.StaticText(self, -1, "First: ")
        fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER)

        fgs.Add(wx.TextCtrl(self, -1, "", validator = TextObjectValidator()))

        fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE))

        label = wx.StaticText(self, -1, "Second: ")
        fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER)
        fgs.Add(wx.TextCtrl(self, -1, "", validator = TextObjectValidator()))


        buttons = wx.StdDialogButtonSizer() #wx.BoxSizer(wx.HORIZONTAL)
        b = wx.Button(self, wx.ID_OK, "OK")
        b.SetDefault()
        buttons.AddButton(b)
        buttons.AddButton(wx.Button(self, wx.ID_CANCEL, "Cancel"))
        buttons.Realize()

        border = wx.BoxSizer(wx.VERTICAL)
        border.Add(fgs, 1, wx.GROW|wx.ALL, 25)
        border.Add(buttons)
        self.SetSizer(border)
        border.Fit(self)
        self.Layout()



app = wx.App(redirect=False)
f = wx.Frame(parent=None)
f.Show()
dlg = TestValidateDialog(f)
dlg.ShowModal()
dlg.Destroy()

app.MainLoop()
</snippet></ROW><ROW><id>2203479</id><snippet>getattr</snippet></ROW><ROW><id>2203479</id><snippet>&gt;&gt;&gt; class MyClass(object):
...  def sayhello(self):
...   print "Hello World!"
... 
&gt;&gt;&gt; m=MyClass()
&gt;&gt;&gt; getattr(m,"sayhello")()
Hello World!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2203479</id><snippet>&gt;&gt;&gt; def sayhello():
...  print "Hello World!"
... 
&gt;&gt;&gt; globals().get("sayhello")()
Hello World!
</snippet></ROW><ROW><id>2203479</id><snippet>prove_riemann_hypothesis</snippet></ROW><ROW><id>2203479</id><snippet>sayhello</snippet></ROW><ROW><id>2203479</id><snippet>&gt;&gt;&gt; globals().get("prove_riemann_hypothesis", sayhello)()
Hello World!
</snippet></ROW><ROW><id>2203479</id><snippet>&gt;&gt;&gt; json_functions={}
&gt;&gt;&gt; def make_available_to_json(f):
...  json_functions[f.__name__]=f
...  return f
...
&gt;&gt;&gt; @make_available_to_json
... def sayhello():
...  print "Hello World!"
...
&gt;&gt;&gt; json_functions.get("sayhello")()
Hello World!
&gt;&gt;&gt; json_functions["sayhello"]()
Hello World!
&gt;&gt;&gt; json_functions.get("prove_riemann_hypothesis", sayhello)()
Hello World!
</snippet></ROW><ROW><id>2203524</id><snippet>reload</snippet></ROW><ROW><id>2203731</id><snippet>request.sessions</snippet></ROW><ROW><id>2203731</id><snippet>request.session</snippet></ROW><ROW><id>2204284</id><snippet>select count(*), sender from messages group by sender;
</snippet></ROW><ROW><id>2204284</id><snippet>select count(*), sender, day, hour
    from messages group by sender, day, hour
    order by sender, day, hour;
</snippet></ROW><ROW><id>2204630</id><snippet>class SearchForm(forms.Form):
  text = forms.CharField()
  metadata = forms.CharField()
  figures = forms.CharField()

  def generateSolrQuery(self):
    return "+and+".join(["%s\u003A%s" % (f,v) for f,v in self.cleaned_data.items()])
</snippet></ROW><ROW><id>2204650</id><snippet>from paste.deploy import appconfig
from pylons import config

from project.config.environment import load_environment

conf = appconfig('config:development.ini', relative_to='.')
load_environment(conf.global_conf, conf.local_conf)

from project.model import *
</snippet></ROW><ROW><id>2204656</id><snippet>from paste.deploy import appconfig
from pylons import config

from project.config.environment import load_environment

conf = appconfig('config:development.ini', relative_to='.')
load_environment(conf.global_conf, conf.local_conf)

from project.model import *
</snippet></ROW><ROW><id>2204702</id><snippet>__slots__</snippet></ROW><ROW><id>2204702</id><snippet>__getstate__</snippet></ROW><ROW><id>2204702</id><snippet>-1</snippet></ROW><ROW><id>2204702</id><snippet>__slots__</snippet></ROW><ROW><id>2204702</id><snippet>__getstate__</snippet></ROW><ROW><id>2204702</id><snippet>&gt;&gt;&gt; class sic(object):
...   __slots__ = 'a', 'b'
... 
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.dumps(sic(), -1)
'\x80\x02c__main__\nsic\nq\x00)\x81q\x01.'
&gt;&gt;&gt; pickle.dumps(sic())
Traceback (most recent call last):
  [snip snip]
    raise TypeError("a class that defines __slots__ without "
TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2204702</id><snippet>-1</snippet></ROW><ROW><id>2204702</id><snippet>__slots__</snippet></ROW><ROW><id>2204702</id><snippet>-1</snippet></ROW><ROW><id>2204702</id><snippet>__slots__</snippet></ROW><ROW><id>2204702</id><snippet>-1</snippet></ROW><ROW><id>2204741</id><snippet>__new__</snippet></ROW><ROW><id>2204741</id><snippet>&gt;&gt;&gt; class sic(object):
...   def __new__(cls, *x): return object.__new__(cls, *x)
... 
&gt;&gt;&gt; type(sic.__dict__['__new__'])
&lt;type 'staticmethod'&gt;
</snippet></ROW><ROW><id>2204741</id><snippet>&gt;&gt;&gt; class cis(sic): pass
... 
&gt;&gt;&gt; class oops(sic, cis): pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution
order (MRO) for bases sic, cis
</snippet></ROW><ROW><id>2204741</id><snippet>object</snippet></ROW><ROW><id>2204741</id><snippet>object</snippet></ROW><ROW><id>2204761</id><snippet>def transform(functions, arguments):
  return [f(a) for f, a in zip(functions, arguments)]
</snippet></ROW><ROW><id>2204884</id><snippet>sc.enter(10, 1, t.timestamp, (sc,)
</snippet></ROW><ROW><id>2204884</id><snippet>sc.enter(3600, 1, t.timestamp, (sc,)
</snippet></ROW><ROW><id>2204884</id><snippet>s.enter(1, 1, t.timestamp, (s,))
</snippet></ROW><ROW><id>2204890</id><snippet>class FurniturePiece(models.Model):
    type = models.ForeignKey(FurnitureType)
    color = models.ForeignKey(FurnitureColor)
    sqft = models.IntegerField()
    name = models.CharField(max_length=200, unique=True)
</snippet></ROW><ROW><id>2204890</id><snippet>Room</snippet></ROW><ROW><id>2204890</id><snippet>FurniturePiece</snippet></ROW><ROW><id>2204890</id><snippet>FurniturePiece</snippet></ROW><ROW><id>2204890</id><snippet>Room</snippet></ROW><ROW><id>2204890</id><snippet>class FurniturePiece(models.Model):
    room = models.ForeignKey(Room)
    type = models.ForeignKey(FurnitureType)
    color = models.ForeignKey(FurnitureColor)
    sqft = models.IntegerField()
    name = models.CharField(max_length=200)
</snippet></ROW><ROW><id>2205049</id><snippet>HttpResponseRedirect(((u'/page/?title=' + query_string).encode('utf-8'))
</snippet></ROW><ROW><id>2205049</id><snippet>/page</snippet></ROW><ROW><id>2205095</id><snippet>def specialconvolve(a):
    # sorry, you must pad the input yourself
    rowconvol = a[1:-1,:] + a[:-2,:] + a[2:,:]
    colconvol = rowconvol[:,1:-1] + rowconvol[:,:-2] + rowconvol[:,2:] - 9*a[1:-1,1:-1]
    return colconvol
</snippet></ROW><ROW><id>2205131</id><snippet>time.struct_time(tm_year=2010, tm_mon=2, tm_mday=4, tm_hour=23, tm_min=44, tm_sec=19, tm_wday=3, tm_yday=35, tm_isdst=0)</snippet></ROW><ROW><id>2205131</id><snippet>import time
import calendar

struct = time.localtime()
seconds = calendar.timegm(struct)
</snippet></ROW><ROW><id>2205745</id><snippet>utilpackage</snippet></ROW><ROW><id>2205745</id><snippet>foo</snippet></ROW><ROW><id>2205745</id><snippet>import urllib2

__all__ = ["foo"]

class foo(object):
    myStringHtml = urllib2.urlopen("http://www.google.com").read()
</snippet></ROW><ROW><id>2205745</id><snippet>from utilpackage import foo
</snippet></ROW><ROW><id>2205745</id><snippet>from utilpackage import urllib2
</snippet></ROW><ROW><id>2205894</id><snippet>import mako</snippet></ROW><ROW><id>2205894</id><snippet>repr(mako)</snippet></ROW><ROW><id>2206105</id><snippet>re.sub()</snippet></ROW><ROW><id>2206105</id><snippet>lookForPrefix('foobar?',listOfPrefixes)</snippet></ROW><ROW><id>2206105</id><snippet>''</snippet></ROW><ROW><id>2206105</id><snippet>if</snippet></ROW><ROW><id>2206105</id><snippet>\?\s*$</snippet></ROW><ROW><id>2206105</id><snippet>re.search()</snippet></ROW><ROW><id>2206105</id><snippet>re.match()</snippet></ROW><ROW><id>2206105</id><snippet>doSearch = { "text":"Search for: ", "url":"http://www.google.com/#&amp;q=QUERY", "words":["^\?\s*","\?\s*$"] }

def lookForPrefix(query,listOfPrefixes):
    for l in listOfPrefixes:
        if re.search(l, query):
            return re.sub(l,'', query)
    return False
</snippet></ROW><ROW><id>2206105</id><snippet>&gt;&gt;&gt; lookForPrefix('?foobar', doSearch["words"])
'foobar'
&gt;&gt;&gt; lookForPrefix('foobar?', doSearch["words"])
'foobar'
&gt;&gt;&gt; lookForPrefix('foobar', doSearch["words"])
False
</snippet></ROW><ROW><id>2206105</id><snippet>^\?\s*|\?\s*$</snippet></ROW><ROW><id>2206163</id><snippet>return next( (i for i,(k,v) in enumerate(items) if k=='Spock'),None)
</snippet></ROW><ROW><id>2206163</id><snippet>next</snippet></ROW><ROW><id>2206163</id><snippet>None</snippet></ROW><ROW><id>2206246</id><snippet>&gt;&gt;&gt; s = u'если'
&gt;&gt;&gt; print repr(s)
u'\u0435\u0441\u043b\u0438'
</snippet></ROW><ROW><id>2206562</id><snippet>def get_random_filename(car_picture, filename):
    extension = filename.split('.')[-1]
    return u'_%s_%s.%s' % (random.randint(0,10000000),
                           random.randint(0,10000000),
                           extension)

class CarPicture(models.Model):
    title = models.TextField()
    image = models.ImageField(upload_to=get_random_filename)
</snippet></ROW><ROW><id>2206562</id><snippet>picture = CarPicture(title="Some Title", image=request.FILES['image'])
picture.save()
</snippet></ROW><ROW><id>2206562</id><snippet>picture.image.url()
</snippet></ROW><ROW><id>2206562</id><snippet>&lt;img src="{{picture.image.url}}" title="{{picture.image.title}}"/&gt;
</snippet></ROW><ROW><id>2206888</id><snippet>&gt;&gt;&gt; L = [{'id':44}, {'name':'alexa'},{'color':'blue'}]

&gt;&gt;&gt; newd = {}
&gt;&gt;&gt; for d in L:
...    newd.update(d)
&gt;&gt;&gt; newd['id']
44
</snippet></ROW><ROW><id>2207293</id><snippet>badp</snippet></ROW><ROW><id>2207293</id><snippet>shell=True</snippet></ROW><ROW><id>2207293</id><snippet>/bin/sh</snippet></ROW><ROW><id>2207293</id><snippet>COMSPEC</snippet></ROW><ROW><id>2207293</id><snippet>shell=True</snippet></ROW><ROW><id>2207293</id><snippet>dir</snippet></ROW><ROW><id>2207293</id><snippet>copy</snippet></ROW><ROW><id>2207293</id><snippet>shell=True</snippet></ROW><ROW><id>2207293</id><snippet>shell=True</snippet></ROW><ROW><id>2207293</id><snippet>/bin/sh</snippet></ROW><ROW><id>2207293</id><snippet>/bin/sh /usr/bin/sh /tmp/run/launch.sh</snippet></ROW><ROW><id>2207293</id><snippet>subprocess.Popen('/tmp/run/launch.sh', shell=True)
</snippet></ROW><ROW><id>2207293</id><snippet>subprocess.Popen('/tmp/run/launch.sh', executable = '/usr/bin/sh', shell=True)
</snippet></ROW><ROW><id>2207293</id><snippet>shell=True</snippet></ROW><ROW><id>2207315</id><snippet>data = [[0] * cols for i in range(rows)]
</snippet></ROW><ROW><id>2207315</id><snippet>cols = 2</snippet></ROW><ROW><id>2207315</id><snippet>rows = 3</snippet></ROW><ROW><id>2207315</id><snippet>data = [[0, 0],
        [0, 0],
        [0, 0]]
</snippet></ROW><ROW><id>2207315</id><snippet>v = data[row][col]
</snippet></ROW><ROW><id>2207315</id><snippet>val = 10
set_col = 5

for row in range(rows):
    data[row][set_col] = val
</snippet></ROW><ROW><id>2207315</id><snippet>for row in data:
    row[set_col] = val
</snippet></ROW><ROW><id>2207343</id><snippet>   email_dispatcher.add_to_queue(my_email)
</snippet></ROW><ROW><id>2207911</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>2207911</id><snippet>ContentType</snippet></ROW><ROW><id>2207911</id><snippet>Product</snippet></ROW><ROW><id>2207911</id><snippet>Jacket</snippet></ROW><ROW><id>2207911</id><snippet>class Product(models.Model):
    price = models.FloatField()
    description = models.TextField()
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    details = generic.GenericForeignKey('content_type', 'object_id')

class Jacket(models.Model):
    size = models.PositiveIntegerField()
    color = models.CharField(max_length=25)
</snippet></ROW><ROW><id>2207911</id><snippet>Jacket</snippet></ROW><ROW><id>2207911</id><snippet>jacket = Jacket(size=69, color="pink")
jacket.save()
prod = Product(price=0.99)
prod.details = jacket  # It's like magic!
prod.save()
</snippet></ROW><ROW><id>2207913</id><snippet>ForeignKey</snippet></ROW><ROW><id>2207913</id><snippet>def popularity(self):
    return self.playlistitem_set.count()
</snippet></ROW><ROW><id>2208423</id><snippet>/usr/lib/pymodules/python2.5</snippet></ROW><ROW><id>2208423</id><snippet>/usr/lib/python2.5/site-packages</snippet></ROW><ROW><id>2208423</id><snippet>sys.path.append('/usr/lib/pymodules/python2.5') 
</snippet></ROW><ROW><id>2208714</id><snippet> args = self.request.arguments()
 data = {}
 for i in args:
     data[i] = self.request.get_all(i)
 form = forms.KeywordForm(data=data)
 if form.is_valid():
     [...]
</snippet></ROW><ROW><id>2209083</id><snippet>platform</snippet></ROW><ROW><id>2209083</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('32bit', 'WindowsPE')
</snippet></ROW><ROW><id>2209083</id><snippet>('32bit', 'WindowsPE')
</snippet></ROW><ROW><id>2209356</id><snippet>&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; conn = psycopg2.connect('')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('select current _date')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
psycopg2.ProgrammingError: syntax error at or near "_date"
LINE 1: select current _date
                       ^

&gt;&gt;&gt; cur.execute('select current_date')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
psycopg2.InternalError: current transaction is aborted, commands ignored until end of transaction block

&gt;&gt;&gt; conn.rollback()
&gt;&gt;&gt; cur.execute('select current_date')
&gt;&gt;&gt; cur.fetchall()
[(datetime.date(2010, 2, 5),)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2209356</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>2209356</id><snippet>try:
    cur.execute("...")
    cur.fetchall()
    cur.close()
    connection.commit()
except:
    connection.rollback()
</snippet></ROW><ROW><id>2209781</id><snippet>==</snippet></ROW><ROW><id>2209781</id><snippet>__eq__</snippet></ROW><ROW><id>2209781</id><snippet>__cmp__</snippet></ROW><ROW><id>2209781</id><snippet>is</snippet></ROW><ROW><id>2209781</id><snippet>is</snippet></ROW><ROW><id>2209781</id><snippet>is</snippet></ROW><ROW><id>2209781</id><snippet>is not</snippet></ROW><ROW><id>2209781</id><snippet>None</snippet></ROW><ROW><id>2209781</id><snippet>None</snippet></ROW><ROW><id>2209781</id><snippet>None</snippet></ROW><ROW><id>2210209</id><snippet>surf_inst</snippet></ROW><ROW><id>2210209</id><snippet>SURF</snippet></ROW><ROW><id>2210209</id><snippet>newKeyPoints = surf_inst(img, mask, keypoints)
</snippet></ROW><ROW><id>2210209</id><snippet>keypoints</snippet></ROW><ROW><id>2210209</id><snippet>img</snippet></ROW><ROW><id>2210209</id><snippet>mask</snippet></ROW><ROW><id>2210209</id><snippet>Mat</snippet></ROW><ROW><id>2210209</id><snippet>keypoints</snippet></ROW><ROW><id>2210209</id><snippet>operator()</snippet></ROW><ROW><id>2210209</id><snippet>__call__</snippet></ROW><ROW><id>2210209</id><snippet>keypoints</snippet></ROW><ROW><id>2210511</id><snippet>round</snippet></ROW><ROW><id>2210511</id><snippet>&gt;&gt;&gt; int(round(1.5))
2
</snippet></ROW><ROW><id>2210511</id><snippet>&gt;&gt;&gt; help(round)
Help on built-in function round in module __builtin__:

round(...)
    round(number[, ndigits]) -&gt; floating point number

    Round a number to a given precision in decimal digits (default 0 digits).
    This always returns a floating point number.  Precision may be negative.
</snippet></ROW><ROW><id>2210511</id><snippet>floor</snippet></ROW><ROW><id>2210511</id><snippet>math</snippet></ROW><ROW><id>2210511</id><snippet>from math import log10, floor
def format_value_error(value,error):
    E = int(floor(log10(error)))
    val = int(round(float(value) / 10**E))
    err = int(round(float(error) / 10**E))
    return "(%d +- %d) x 10^%d" % (val, err, E)

print format_value_error(123, 12)
print format_value_error(4234.3, 2)
print format_value_error(0.02312, 0.003)
</snippet></ROW><ROW><id>2210511</id><snippet>(12 +- 1) x 10^1
(4234 +- 2) x 10^0
(23 +- 3) x 10^-3
</snippet></ROW><ROW><id>2210511</id><snippet>text x 10^0</snippet></ROW><ROW><id>2210612</id><snippet>int</snippet></ROW><ROW><id>2210612</id><snippet>defaultdict</snippet></ROW><ROW><id>2210612</id><snippet>from collections import defaultdict

myDict = defaultdict(int)

for item in myTupleList:
    myDict[item[1]] += item[2]
</snippet></ROW><ROW><id>2210612</id><snippet>defaultdict</snippet></ROW><ROW><id>2210612</id><snippet>int</snippet></ROW><ROW><id>2210612</id><snippet>from collections import defaultdict

myDict = defaultdict(int)

for _, key, val in myTupleList:
    myDict[key] += val
</snippet></ROW><ROW><id>2210612</id><snippet>_</snippet></ROW><ROW><id>2210612</id><snippet>key</snippet></ROW><ROW><id>2210612</id><snippet>val</snippet></ROW><ROW><id>2210612</id><snippet>_</snippet></ROW><ROW><id>2210612</id><snippet>item[1]</snippet></ROW><ROW><id>2210612</id><snippet>item[2]</snippet></ROW><ROW><id>2210612</id><snippet>myTupleList</snippet></ROW><ROW><id>2210612</id><snippet>myTupleList</snippet></ROW><ROW><id>2211420</id><snippet>--universal-archs=32-bit</snippet></ROW><ROW><id>2211420</id><snippet>configure</snippet></ROW><ROW><id>2211420</id><snippet>MACOSX_DEPLOYMENT_TARGET=10.6</snippet></ROW><ROW><id>2211420</id><snippet>export MACOSX_DEPLOYMENT_TARGET=10.6
./configure --universal-archs=32-bit --enable-universalsdk=/Developer/SDKs/MacOSX10.6.sdk ...
</snippet></ROW><ROW><id>2211420</id><snippet>configure</snippet></ROW><ROW><id>2211433</id><snippet>AC_INIT</snippet></ROW><ROW><id>2211433</id><snippet>somefile</snippet></ROW><ROW><id>2211433</id><snippet>AC_CONFIG_FILES</snippet></ROW><ROW><id>2211433</id><snippet>configure</snippet></ROW><ROW><id>2211433</id><snippet>somefile.in</snippet></ROW><ROW><id>2211433</id><snippet>somefile</snippet></ROW><ROW><id>2211433</id><snippet>somescript.py</snippet></ROW><ROW><id>2211433</id><snippet>configure.ac</snippet></ROW><ROW><id>2211433</id><snippet>AC_INIT(MILHOUSE, 0.3.6)
...blah blah...
AC_CONFIG_FILES([
  some/Makefile
  some/other/Makefile
  somescript.py
])
</snippet></ROW><ROW><id>2211433</id><snippet>somescript.py.in</snippet></ROW><ROW><id>2211433</id><snippet>version = '''@PACKAGE_VERSION@'''
</snippet></ROW><ROW><id>2211558</id><snippet>except</snippet></ROW><ROW><id>2211558</id><snippet>DoesNotExist</snippet></ROW><ROW><id>2211558</id><snippet>django.core.exceptions.ObjectDoesNotExist</snippet></ROW><ROW><id>2211558</id><snippet>len(SomeModel.objects.filter(...))</snippet></ROW><ROW><id>2211676</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulStoneSoup(
    """&lt;alan x="y" &gt;&lt;anne&gt;hello&lt;/anne&gt;"""
    )
&gt;&gt;&gt; print soup.prettify()
&lt;alan x="y"&gt;
 &lt;anne&gt;
  hello
 &lt;/anne&gt;
&lt;/alan&gt;

&gt;&gt;&gt; soup = BeautifulSoup.BeautifulStoneSoup(
    """&lt;alan x="y" &gt;&lt;anne&gt;hello&lt;/anne&gt;""",
    selfClosingTags=['alan'])
&gt;&gt;&gt; print soup.prettify()
&lt;alan x="y" /&gt;
&lt;anne&gt;
 hello
&lt;/anne&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2211676</id><snippet>&lt;alan x="y" /&gt;</snippet></ROW><ROW><id>2211676</id><snippet>/</snippet></ROW><ROW><id>2211676</id><snippet>alan</snippet></ROW><ROW><id>2211691</id><snippet>class Attribute(models.Model):
    name = models.CharField(max_length=20)

class Equipment(models.Model):
    name = models.CharField(max_length=20)
    attributes = models.ManyToManyField(Attribute)

equips = Equipment.objects.filter(
    attributes__name='wheels').exclude(attributes__name='blades')
</snippet></ROW><ROW><id>2211691</id><snippet>print equips.query.as_sql()
</snippet></ROW><ROW><id>2211913</id><snippet>setup_environ</snippet></ROW><ROW><id>2211913</id><snippet>myapp</snippet></ROW><ROW><id>2211913</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2211913</id><snippet>#!/usr/bin/env python

from django.core.management import setup_environ

# If myapp is not in your PYTHONPATH, append it to sys.path
import sys
sys.path.append('/path/to/myapp/')

# This must be AFTER you update sys.path
from myapp import settings
setup_environ(settings)

from myapp.models import Foo, Bar

# do stuff
foo = Foo.objects.get(id=1)
bar = Bar.objects.filter(foo=foo.baz)
</snippet></ROW><ROW><id>2211913</id><snippet>standalone.py</snippet></ROW><ROW><id>2211913</id><snippet>D:\zjm_code\sphinx_test</snippet></ROW><ROW><id>2211913</id><snippet>sphinx_test
|-- __init__.py
|-- manage.py
|-- settings.py
`-- urls.py
</snippet></ROW><ROW><id>2211913</id><snippet>file_test</snippet></ROW><ROW><id>2211913</id><snippet>python manage.py startapp file_test</snippet></ROW><ROW><id>2211913</id><snippet>D:\zjm_code\sphinx_test</snippet></ROW><ROW><id>2211913</id><snippet>sphinx_test
|-- __init__.py
|-- __init__.pyc
|-- file_test
|   |-- __init__.py
|   |-- models.py
|   |-- tests.py
|   `-- views.py
|-- manage.py
|-- settings.py
|-- settings.pyc
`-- urls.py
</snippet></ROW><ROW><id>2211913</id><snippet>File</snippet></ROW><ROW><id>2211913</id><snippet>file_test\models.py</snippet></ROW><ROW><id>2211913</id><snippet>from django.db import models
from djangosphinx.models import SphinxSearch,SphinxQuerySet

class File(models.Model):
    name = models.CharField(max_length=200)
    tags = models.CharField(max_length=200) 
    objects = models.Manager()
    search  = SphinxQuerySet(index="test1")
    #class Meta:#&lt;-----------  1
    #    app_label = 'sphinx_test'#&lt;------ 2
</snippet></ROW><ROW><id>2211913</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>2211913</id><snippet>standalone.py</snippet></ROW><ROW><id>2211913</id><snippet>file_test.models.File</snippet></ROW><ROW><id>2211913</id><snippet>#!/path/to/python
from django.core.management import setup_environ
import sys
sys.path.append('D:\zjm_code\sphinx_test')

from sphinx_test import settings
setup_environ(settings)

# NOW you can import from your app
from sphinx_test.file_test.models import File

f = File(name='test', tags='abc,xyz,', search='foo')
f.save()

# confirm the data was saved
if f.id:
    print 'success!'
else:
    print 'fail!'
</snippet></ROW><ROW><id>2212006</id><snippet>word1,1</snippet></ROW><ROW><id>2212006</id><snippet>d['1'] = 'word1'</snippet></ROW><ROW><id>2212006</id><snippet>&gt;&gt;&gt; K = sys.getsizeof('123456789012345678')
&gt;&gt;&gt; V = sys.getsizeof('1234567')
&gt;&gt;&gt; K, V
(42, 31)
</snippet></ROW><ROW><id>2212006</id><snippet>sys.getsizeof(str_object) =&gt; 24 + len(str_object)</snippet></ROW><ROW><id>2212006</id><snippet>&gt;&gt;&gt; sys.getsizeof(())
28
&gt;&gt;&gt; sys.getsizeof((1,))
32
&gt;&gt;&gt; sys.getsizeof((1,2))
36
&gt;&gt;&gt; sys.getsizeof((1,2,3))
40
&gt;&gt;&gt; sys.getsizeof(("foo", "bar"))
36
&gt;&gt;&gt; sys.getsizeof(("fooooooooooooooooooooooo", "bar"))
36
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2212006</id><snippet>sys.getsizeof(tuple_object) =&gt; 28 + 4 * len(tuple_object)</snippet></ROW><ROW><id>2212006</id><snippet>sys.getsizeof(list_object) =&gt; 36 + 4 * len(list_object)</snippet></ROW><ROW><id>2212006</id><snippet>&gt;&gt;&gt; sys.getsizeof(1234567)
12
</snippet></ROW><ROW><id>2212121</id><snippet>&lt;SimpleMathOperation&gt; ::= &lt;NumericalValue&gt;&lt;Operator&gt;&lt;NumericalValue&gt;
</snippet></ROW><ROW><id>2212232</id><snippet>def padArgsWithTrue(func, *args):
    passed_args = list(args)
    num_args = len(inspect.getargspec(func).args)
    passed_args += [True] * (num_args - len(args))
    return func(*passed_args)

print padArgsWithTrue(lambda x,y,z,w: (x*y, z, w), 5, 6)
</snippet></ROW><ROW><id>2212283</id><snippet>cdef extern from "foo.h":
    void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset)
    cdef int PROT_READ
    cdef int MAP_ANONYMOUS
    ...
</snippet></ROW><ROW><id>2212442</id><snippet>len(yourdict.keys())
</snippet></ROW><ROW><id>2212442</id><snippet>len(yourdict)
</snippet></ROW><ROW><id>2212442</id><snippet>set</snippet></ROW><ROW><id>2212442</id><snippet>len(set(open(yourdictfile).read().split()))
</snippet></ROW><ROW><id>2212698</id><snippet>os.walk</snippet></ROW><ROW><id>2212698</id><snippet>for root, subFolders, files in os.walk(rootdir):
</snippet></ROW><ROW><id>2212698</id><snippet>root</snippet></ROW><ROW><id>2212698</id><snippet>subFolders</snippet></ROW><ROW><id>2212698</id><snippet>root</snippet></ROW><ROW><id>2212698</id><snippet>files</snippet></ROW><ROW><id>2212698</id><snippet>root</snippet></ROW><ROW><id>2212698</id><snippet>subFolders</snippet></ROW><ROW><id>2212698</id><snippet>os.path.join</snippet></ROW><ROW><id>2212698</id><snippet>filePath = rootdir + '/' + file</snippet></ROW><ROW><id>2212698</id><snippet>filePath = os.path.join(root, file)</snippet></ROW><ROW><id>2212698</id><snippet>import os
import sys

rootdir = sys.argv[1]

for root, subFolders, files in os.walk(rootdir):
    outfileName = os.path.join(root, "py-outfile.txt")
    print "outfileName is " + outfileName
    with open( outfileName, 'w' ) as folderOut:
        for folder in subFolders:
            print "%s has subdirectory %s" % (root, folder)

        for filename in files:
            filePath = os.path.join(root, filename)

            with open( filePath, 'r' ) as f:
                toWrite = f.read()
                folderOut.write("The file %s contains %s" % (filePath, toWrite))
                folderOut.write( toWrite )
</snippet></ROW><ROW><id>2212698</id><snippet>with</snippet></ROW><ROW><id>2212698</id><snippet>with open("filename", "r") as f:
    dosomething()

# is effectively the same as

f = open("filename", "r")
try:
    dosomething()
finally:
    f.close()
</snippet></ROW><ROW><id>2212743</id><snippet>message</snippet></ROW><ROW><id>2212743</id><snippet>if ' ' in msg:
    get = message.split(' ')[1]
else:
    get = message
</snippet></ROW><ROW><id>2213108</id><snippet>namedtuple</snippet></ROW><ROW><id>2213183</id><snippet>from pydoc import ttypager

def jhelp(object):
     text = # get text for object
     ttypager(text) # display a scrollable screen.
</snippet></ROW><ROW><id>2213254</id><snippet>form</snippet></ROW><ROW><id>2213254</id><snippet>myparameter = form.getfirst("name_of_the_post_parameter")
</snippet></ROW><ROW><id>2213254</id><snippet>PythonHandler mod_python.psp</snippet></ROW><ROW><id>2213254</id><snippet>form</snippet></ROW><ROW><id>2213254</id><snippet>from mod_python import util

def handler(req):
   form = util.FieldStorage(req, keep_blank_values=1)
   myparameter = form.getfirst("name_of_the_post_parameter")
   ...other stuff...
</snippet></ROW><ROW><id>2213285</id><snippet>csv</snippet></ROW><ROW><id>2213285</id><snippet>csv</snippet></ROW><ROW><id>2213341</id><snippet>class Status(models.Model):
    code = models.IntegerField()
    text = models.CharField(maxlength=255)

    @classmethod
    def successful(cls):
        return cls.objects.get(code=0)

    @classmethod
    def failed(cls):
        return cls.objects.get(code=1)
</snippet></ROW><ROW><id>2213341</id><snippet>get()</snippet></ROW><ROW><id>2213341</id><snippet>Status.DoesNotExist</snippet></ROW><ROW><id>2213341</id><snippet>MultipleObjectsReturned</snippet></ROW><ROW><id>2213341</id><snippet>class StatusManager(models.Manager):
    def successful(self):
        return self.get(code=1)

    def failed(self):
        return self.get(code=0)

class Status(models.Model):
    code = models.IntegerField()
    text = models.CharField(maxlength=255)

    objects = StatusManager()
</snippet></ROW><ROW><id>2213341</id><snippet>Status.objects.successful()</snippet></ROW><ROW><id>2213341</id><snippet>Status.objects.failed()</snippet></ROW><ROW><id>2213498</id><snippet>_registry = {}

def register(choice_class):
    id = len(_registry) + 1
    choice_class.id = id
    _registry[id] = choice_class

def as_list():
    ret = []
    for id in sorted(_registry):
        ret.append((id, _registry[id].name))
    return ret

def get_choice(id):
    return _registry[id]

class SomeChoice:
    name = u"lorem"

class AnotherChoice:
    name = u"ipsum"

register(SomeChoice)
register(AnotherChoice)
</snippet></ROW><ROW><id>2213498</id><snippet>from django.db import models
import choices

class SomeModel(models.Model):
    somefield = models.IntegerField('field', choices=choices.as_list())
</snippet></ROW><ROW><id>2213501</id><snippet>def proxy_wrapper(name, docstring):
    def wrapper(self, *args, **kwargs):
        return self.proxy.__getattribute__(name)(*args, **kwargs)
    wrapper.__doc__ = docstring
    wrapper._is_wrapper = True
    return wrapper

class Something(object):
    def __init__(self):
        self.proxy = {}

    @classmethod
    def get_proxy_wrappers(cls):
        return [m for m in dir(cls) if hasattr(getattr(cls, m), "_is_wrapper")]

    update = proxy_wrapper("update", "wraps the proxy's update() method")
    proxy_keys = proxy_wrapper("keys", "wraps the proxy's keys() method")    
</snippet></ROW><ROW><id>2213501</id><snippet>&gt;&gt;&gt; a = Something()
&gt;&gt;&gt; print a.proxy
{}
&gt;&gt;&gt; a.update({1: 42})
&gt;&gt;&gt; print a.proxy
{1: 42}
&gt;&gt;&gt; a.update({"foo": "bar"})
&gt;&gt;&gt; print a.proxy_keys()
[1, 'foo']
&gt;&gt;&gt; print a.get_proxy_wrappers()
['proxy_keys', 'update']
</snippet></ROW><ROW><id>2213535</id><snippet>myclass</snippet></ROW><ROW><id>2213535</id><snippet>__init__</snippet></ROW><ROW><id>2213535</id><snippet>self.myvar = 0</snippet></ROW><ROW><id>2213535</id><snippet>self.myvare</snippet></ROW><ROW><id>2213710</id><snippet>timedelta</snippet></ROW><ROW><id>2213710</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime(2010, 12, 25, 18, 25)
&gt;&gt;&gt; d + datetime.timedelta(hours = 8)
datetime.datetime(2010, 12, 26, 2, 25)
</snippet></ROW><ROW><id>2213805</id><snippet>query = ( zipcode("zip") | foo("foo") ) 
</snippet></ROW><ROW><id>2213805</id><snippet>print t,"-&gt;", results, results.getName()
</snippet></ROW><ROW><id>2213805</id><snippet>80517 -&gt; ['80517'] zip
Expected Re:('\\d{5}(?:[-\\s]\\d{4})?') (at char 0), (line:1, col:1)
90001-3234 -&gt; ['90001-3234'] zip
! sfs -&gt; ['! sfs'] foo
</snippet></ROW><ROW><id>2213805</id><snippet># enclose zipcodes in '*'s, foos in '#'s
zipcode.setParseAction(lambda t: '*' + t[0] + '*')
foo.setParseAction(lambda t: '#' + t[0] + '#')

query = ( zipcode("zip") | foo("foo") ) 
</snippet></ROW><ROW><id>2213805</id><snippet>80517 -&gt; ['*80517*'] zip
Expected Re:('\\d{5}(?:[-\\s]\\d{4})?') (at char 0), (line:1, col:1)
90001-3234 -&gt; ['*90001-3234*'] zip
! sfs -&gt; ['#! sfs#'] foo
</snippet></ROW><ROW><id>2213805</id><snippet>ssn = Combine(Word(nums,exact=3) + '-' + 
        Word(nums,exact=2) + '-' + Word(nums,exact=4))
</snippet></ROW><ROW><id>2213805</id><snippet>delimitedList(ssn, '/')
</snippet></ROW><ROW><id>2213805</id><snippet>ssn * (1,3)
</snippet></ROW><ROW><id>2213805</id><snippet>class PairOf(Token):
    """Token for matching words composed of a pair
       of characters in a given set.
    """
    def __init__( self, chars ):
        super(PairOf,self).__init__()
        self.pair_chars = set(chars)

    def parseImpl( self, instring, loc, doActions=True ):
        if (loc &lt; len(instring)-1 and 
           instring[loc] in self.pair_chars and
           instring[loc+1] == instring[loc]):
            return loc+2, instring[loc:loc+2]
        else:
            raise ParseException(instring, loc, "Not at a pair of characters")
</snippet></ROW><ROW><id>2213805</id><snippet>punc = r"~!@#$%^&amp;*_-+=|\?/"
parser = OneOrMore(Word(alphas) | PairOf(punc))
print parser.parseString("Does ** this match @@@@ %% the parser?")
</snippet></ROW><ROW><id>2213805</id><snippet>['Does', '**', 'this', 'match', '@@', '@@', '%%', 'the', 'parser']
</snippet></ROW><ROW><id>2213876</id><snippet>f = open(xmlfile).readlines()
w = open('src_model.xml','w')
empty=re.compile('^$')
for line in open(xmlfile).readlines():
    if empty.match(line):
        continue
    else: 
        w.write(line)
</snippet></ROW><ROW><id>2213973</id><snippet>&gt;&gt;&gt; k = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; k.sort()
&gt;&gt;&gt; list(k for k,_ in itertools.groupby(k))
[[1, 2], [3], [4], [5, 6, 2]]
</snippet></ROW><ROW><id>2213973</id><snippet>itertools</snippet></ROW><ROW><id>2213973</id><snippet>timeit</snippet></ROW><ROW><id>2213973</id><snippet>nodup.py</snippet></ROW><ROW><id>2213973</id><snippet>import itertools

k = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]

def doset(k, map=map, list=list, set=set, tuple=tuple):
  return map(list, set(map(tuple, k)))

def dosort(k, sorted=sorted, xrange=xrange, len=len):
  ks = sorted(k)
  return [ks[i] for i in xrange(len(ks)) if i == 0 or ks[i] != ks[i-1]]

def dogroupby(k, sorted=sorted, groupby=itertools.groupby, list=list):
  ks = sorted(k)
  return [i for i, _ in itertools.groupby(ks)]

def donewk(k):
  newk = []
  for i in k:
    if i not in newk:
      newk.append(i)
  return newk

# sanity check that all functions compute the same result and don't alter k
if __name__ == '__main__':
  savek = list(k)
  for f in doset, dosort, dogroupby, donewk:
    resk = f(k)
    assert k == savek
    print '%10s %s' % (f.__name__, sorted(resk))
</snippet></ROW><ROW><id>2213973</id><snippet>python nodup.py</snippet></ROW><ROW><id>2213973</id><snippet>$ python -mtimeit -s'import nodup' 'nodup.doset(nodup.k)'
100000 loops, best of 3: 11.7 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.dosort(nodup.k)'
100000 loops, best of 3: 9.68 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.dogroupby(nodup.k)'
100000 loops, best of 3: 8.74 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.donewk(nodup.k)'
100000 loops, best of 3: 4.44 usec per loop
</snippet></ROW><ROW><id>2213973</id><snippet>$ python -mtimeit -s'import nodup' 'nodup.donewk([[i] for i in range(12)])'
10000 loops, best of 3: 25.4 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.dogroupby([[i] for i in range(12)])'
10000 loops, best of 3: 23.7 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.doset([[i] for i in range(12)])'
10000 loops, best of 3: 31.3 usec per loop
$ python -mtimeit -s'import nodup' 'nodup.dosort([[i] for i in range(12)])'
10000 loops, best of 3: 25 usec per loop
</snippet></ROW><ROW><id>2213973</id><snippet>k</snippet></ROW><ROW><id>2214018</id><snippet>easy_install</snippet></ROW><ROW><id>2214018</id><snippet>easy_install scipy
Searching for scipy
Reading http://pypi.python.org/simple/scipy/
Reading http://www.scipy.org
Reading http://sourceforge.net/project/showfiles.php?group_id=27747&amp;package_id=19531
Reading http://new.scipy.org/Wiki/Download
</snippet></ROW><ROW><id>2214018</id><snippet>pip</snippet></ROW><ROW><id>2214018</id><snippet>pip install svn+http://svn.scipy.org/svn/scipy/trunk/#egg=scipy
</snippet></ROW><ROW><id>2214018</id><snippet>pip install git+http://github.com/scipy/scipy/
</snippet></ROW><ROW><id>2214223</id><snippet>None</snippet></ROW><ROW><id>2214223</id><snippet>object.c</snippet></ROW><ROW><id>2214223</id><snippet>TypeError</snippet></ROW><ROW><id>2214223</id><snippet>None</snippet></ROW><ROW><id>2214223</id><snippet>None</snippet></ROW><ROW><id>2214664</id><snippet>&lt;Location&gt;</snippet></ROW><ROW><id>2214664</id><snippet>testproject</snippet></ROW><ROW><id>2214664</id><snippet>/testproject/</snippet></ROW><ROW><id>2214771</id><snippet>a[i] += 1
</snippet></ROW><ROW><id>2215003</id><snippet>null=True</snippet></ROW><ROW><id>2215003</id><snippet>syncdb</snippet></ROW><ROW><id>2215003</id><snippet>NULL</snippet></ROW><ROW><id>2215099</id><snippet>import sys
import signal
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import QWebPage

class Render(QWebPage):
    def __init__(self, url):
        self.app = QApplication(sys.argv)
        QWebPage.__init__(self)
        self.html = None
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        self.connect(self, SIGNAL('loadFinished(bool)'), self._finished_loading)
        self.mainFrame().load(QUrl(url))
        self.app.exec_()

    def _finished_loading(self, result):
        self.html = self.mainFrame().toHtml()
        self.app.quit()


if __name__ == '__main__':
    try:
        url = sys.argv[1]
    except IndexError:
        print 'Usage: %s url' % sys.argv[0]
    else:
        javascript_html = Render(url).html
</snippet></ROW><ROW><id>2215331</id><snippet>%</snippet></ROW><ROW><id>2215443</id><snippet>last_name = soup.find('last_name') and soup.find('last_name').string
</snippet></ROW><ROW><id>2215443</id><snippet>if</snippet></ROW><ROW><id>2215443</id><snippet>last_name_node = soup.find('last_name')
last_name = last_name_node and last_name_node.string
</snippet></ROW><ROW><id>2215443</id><snippet>last_name = getattr(soup.find('last_name'), 'string', None)
</snippet></ROW><ROW><id>2215443</id><snippet>if</snippet></ROW><ROW><id>2215674</id><snippet>o, = bar(x,m,width=w,color='0.6', yerr=None) # note the comma after the o
eBarX = o.get_x()+o.get_width()/2.0
eBarY = o.get_height()
errorbar(eBarX,eBarY,e,capsize=7,elinewidth=6,ecolor='k')
</snippet></ROW><ROW><id>2215674</id><snippet>axes().xaxis.set_visible(False)
</snippet></ROW><ROW><id>2215733</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.dates as dates
import datetime, random
import matplotlib.ticker as ticker

def random_date():
      date = datetime.date(2008, 12,01)
      while 1:
        date += datetime.timedelta(days=30)
        yield (date)

def format_date(x, pos=None):
     return dates.num2date(x).strftime('%Y-%m-%d') #use FuncFormatter to format dates

r_d = random_date()
some_dates = [dates.date2num(r_d.next()) for i in range(0,20)]

fig = plt.figure()
ax = Axes3D(fig,rect=[0,0.1,1,1]) #make room for date labels

for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):
    xs = np.array(some_dates)
    ys = np.random.rand(20)
    ax.bar(xs, ys, zs=z, zdir='y', color=c, alpha=0.8,width=8)

ax.w_xaxis.set_major_locator(ticker.FixedLocator(some_dates)) # I want all the dates on my xaxis
ax.w_xaxis.set_major_formatter(ticker.FuncFormatter(format_date))
for tl in ax.w_xaxis.get_ticklabels(): # re-create what autofmt_xdate but with w_xaxis
       tl.set_ha('right')
       tl.set_rotation(30)     

ax.set_ylabel('Series')
ax.set_zlabel('Amount')

plt.show()
</snippet></ROW><ROW><id>2215833</id><snippet>C = numpy.ascontiguousarray([5,6,7],"uint16")  # make an array
C
rawPointer = C.ctypes.data
pC = ctypes.cast( rawPointer, ctypes.POINTER( ctypes.c_uint16 ))
pC[0:3]
pC[1]=100
pC[0:3]
C
</snippet></ROW><ROW><id>2216157</id><snippet>class B(A):
    def __init__(self, *a, **k):
      if 'W' in k:
        w = k.pop('W')
      else:
        w = a.pop()
      A.__init__(self, *a, **k)
      self._W = w
</snippet></ROW><ROW><id>2216257</id><snippet>time</snippet></ROW><ROW><id>2216257</id><snippet>strptime()</snippet></ROW><ROW><id>2216257</id><snippet>import time
date = input('Date (mm/dd/yyyy): ')
try:
  valid_date = time.strptime(date, '%m/%d/%Y')
except ValueError:
  print('Invalid date!')
</snippet></ROW><ROW><id>2216257</id><snippet>raw_input</snippet></ROW><ROW><id>2216257</id><snippet>input</snippet></ROW><ROW><id>2216326</id><snippet>def get_value(param1,param2):
    return "value %s - %s " % (str(param1),str(param2))

def fetch(key,val_function,**kwargs)
    val = cache.get(key)
    if not val:
        val = val_function(**kwargs)
        cache.set(key,val)
    return val
</snippet></ROW><ROW><id>2216326</id><snippet>fetch('key',get_value,param1='first',param2='second')
</snippet></ROW><ROW><id>2216456</id><snippet>&gt;&gt;&gt; l = [(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)]
&gt;&gt;&gt; s = sum(i[0] for i in l)
&gt;&gt;&gt; print s
18
</snippet></ROW><ROW><id>2216842</id><snippet>for filepath in sys.argv[1:]:
    # ...
    self.player.set_property("uri", "file://" + filepath)
</snippet></ROW><ROW><id>2216842</id><snippet>'file:' + urllib.pathname2url(filepath)
</snippet></ROW><ROW><id>2216842</id><snippet>C:\a\b.mp3</snippet></ROW><ROW><id>2216855</id><snippet>(1[Hh].|2[Hh]..|3[Hh]...|etc...)
</snippet></ROW><ROW><id>2217005</id><snippet>MyClass.__contains__()</snippet></ROW><ROW><id>2217270</id><snippet>urlpatterns = patterns('',
    (r'^(?P&lt;city&gt;[a-z-]+)/(?P&lt;area&gt;[a-z-]+)/$', 'yourapp.views.areaview'),
    (r'^(?P&lt;city&gt;[a-z-]+)/(?P&lt;area&gt;[a-z-]+)/(?P&lt;entry&gt;[a-z-]+)/$', 'yourapp.views.entryview'),
)
</snippet></ROW><ROW><id>2217449</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
server = SimpleXMLRPCServer(("localhost", 8000),
                            requestHandler=RequestHandler)

def myfunction(x, y):
    status = 1
    result = [5, 6, [4, 5]]
    return (status, result)
server.register_function(myfunction)

# Run the server's main loop
server.serve_forever()
</snippet></ROW><ROW><id>2217449</id><snippet>import xmlrpclib

s = xmlrpclib.ServerProxy('http://localhost:8000')
print s.myfunction(2, 4)
</snippet></ROW><ROW><id>2217634</id><snippet>struct.pack('bbbb', *(int(x) for x in '127.0.0.1'.split('.')))
</snippet></ROW><ROW><id>2217719</id><snippet>// Do this once per session, e.g. an __init__ 

JNI_CreateJavaVM(&amp;jvm, &amp;env, &amp;vm_args); 

// When needed invoke Example.foo(int)
jclass cls =
env-&gt;FindClass("Example");  jmethodID
mid = env-&gt;GetStaticMethodID(cls,
"foo", "(I)V"); 
env-&gt;CallStaticVoidMethod(cls, mid,100);
</snippet></ROW><ROW><id>2218249</id><snippet>[mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist),-1,-1)]
</snippet></ROW><ROW><id>2218249</id><snippet>&gt;&gt;&gt; mylist=['A','B']
&gt;&gt;&gt; newelement='X'
&gt;&gt;&gt; [mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist),-1,-1)]
[['X', 'A', 'B'], ['B', 'X', 'A'], ['A', 'B', 'X']]
</snippet></ROW><ROW><id>2218265</id><snippet>class Meta:
    ordering = ['user__first_name', 'user__last_name']
</snippet></ROW><ROW><id>2218605</id><snippet>&lt;h4&gt;Statistics&lt;/h4&gt;
&lt;ul&gt;
 {% for key, value in manor_stats.get_fields.items %}
 &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;
 {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>2218605</id><snippet>    manor_stats = Manors.objects.get(structidx__exact=id).get_fields()
    return render_to_response('template.html', { 'place' : place, 'manor_stats' : manor_stats }, context_instance = RequestContext(request))
</snippet></ROW><ROW><id>2218605</id><snippet>&lt;h4&gt;Statistics&lt;/h4&gt;
&lt;ul&gt;
 {% for key, value in manor_stats.items %}
 &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;
 {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>2218736</id><snippet>id()</snippet></ROW><ROW><id>2218736</id><snippet>{{ question.key }}</snippet></ROW><ROW><id>2218736</id><snippet>{{ question.key.id }}</snippet></ROW><ROW><id>2218772</id><snippet>time.localtime()[0]</snippet></ROW><ROW><id>2218772</id><snippet>__gettiem__()</snippet></ROW><ROW><id>2218772</id><snippet>time.struct_time</snippet></ROW><ROW><id>2218772</id><snippet>&gt;&gt;&gt; class MyTime(object):
...     def __init__(self, year, month, mday, hour, minute):
...         self.data =  year, month, mday, hour, minute
...     def __getitem__(self, idx):
...         return self.data[idx]
...     def __str__(self):
...         return "MyTime(tm_year=%s, tm_mon=%s, tm_mday=%s, tm_hour=%s, tm_min=%s)"%self.data
... 
&gt;&gt;&gt; x=MyTime(2010,2,7,14,46)
&gt;&gt;&gt; x[0]
2010
&gt;&gt;&gt; x[1]
2
&gt;&gt;&gt; print x
MyTime(tm_year=2010, tm_mon=2, tm_mday=7, tm_hour=14, tm_min=46)
</snippet></ROW><ROW><id>2218772</id><snippet>time.struct_time</snippet></ROW><ROW><id>2218772</id><snippet>time.localtime()</snippet></ROW><ROW><id>2218772</id><snippet>&gt;&gt;&gt; tm_year,tm_mon,tm_mday,tm_hour,tm_min=map(str,time.localtime()[:5])
</snippet></ROW><ROW><id>2218852</id><snippet>3.*</snippet></ROW><ROW><id>2218852</id><snippet>2.*</snippet></ROW><ROW><id>2219460</id><snippet>save_m2m()</snippet></ROW><ROW><id>2219460</id><snippet>form</snippet></ROW><ROW><id>2219460</id><snippet>form = form.save(commit=False)</snippet></ROW><ROW><id>2219460</id><snippet>instance = form.save(commit=False)</snippet></ROW><ROW><id>2219460</id><snippet>form.save_m2m()</snippet></ROW><ROW><id>2219460</id><snippet>instance.save()</snippet></ROW><ROW><id>2219470</id><snippet>random.Random</snippet></ROW><ROW><id>2219470</id><snippet>random</snippet></ROW><ROW><id>2219470</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2219470</id><snippet>random</snippet></ROW><ROW><id>2219470</id><snippet>fileinput</snippet></ROW><ROW><id>2219493</id><snippet>from webhelpers.pylonslib import secure_form
</snippet></ROW><ROW><id>2219614</id><snippet>sysv_ipc</snippet></ROW><ROW><id>2219853</id><snippet>urlparse</snippet></ROW><ROW><id>2219853</id><snippet>urlparse</snippet></ROW><ROW><id>2219853</id><snippet>urllib.parse</snippet></ROW><ROW><id>2219853</id><snippet>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
&gt;&gt;&gt; o   # doctest: +NORMALIZE_WHITESPACE
    ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
    params='', query='', fragment='')
&gt;&gt;&gt; o.scheme
'http'
&gt;&gt;&gt; o.port
80
&gt;&gt;&gt; o.geturl()
'http://www.cwi.nl:80/%7Eguido/Python.html'
</snippet></ROW><ROW><id>2220059</id><snippet>&gt;&gt;&gt; try:
...     0/0
... except Exception,e:
...     print e.message
...
integer division or modulo by zero
</snippet></ROW><ROW><id>2220059</id><snippet>e.args</snippet></ROW><ROW><id>2220059</id><snippet>BaseException.message has been deprecated</snippet></ROW><ROW><id>2220059</id><snippet>&gt;&gt;&gt; try:
...     0/0
... except Exception,e:
...     print e.args
...
('integer division or modulo by zero',)
</snippet></ROW><ROW><id>2220103</id><snippet>multiprocessing</snippet></ROW><ROW><id>2220103</id><snippet>Pool</snippet></ROW><ROW><id>2220103</id><snippet>subprocess</snippet></ROW><ROW><id>2220103</id><snippet>Popen</snippet></ROW><ROW><id>2220103</id><snippet>stdin</snippet></ROW><ROW><id>2220103</id><snippet>stdout</snippet></ROW><ROW><id>2220103</id><snippet>sterr</snippet></ROW><ROW><id>2220103</id><snippet>Popen.returncode</snippet></ROW><ROW><id>2220107</id><snippet>select max(rowid)</snippet></ROW><ROW><id>2220107</id><snippet>records=(1000,)</snippet></ROW><ROW><id>2220107</id><snippet>numerator / records[0]</snippet></ROW><ROW><id>2220121</id><snippet>object</snippet></ROW><ROW><id>2220121</id><snippet>__subclasses__</snippet></ROW><ROW><id>2220121</id><snippet>class A(object):
 def hello(self):
  print "Hello A"

class B(A):
 def hello(self):
   print "Hello B"

&gt;&gt;&gt; for cls in A.__subclasses__():
...  print cls.__name__
...
B
</snippet></ROW><ROW><id>2220121</id><snippet>&gt;&gt;&gt; def f(x):
...  class C(A):
...   def hello(self):
...    print "Hello C"
...  c = C()
...  c.hello()
...  print x
...  for cls in A.__subclasses__():
...   print cls.__name__
...
&gt;&gt;&gt; f(4)
Hello C
4
B
C
</snippet></ROW><ROW><id>2220121</id><snippet>C</snippet></ROW><ROW><id>2220121</id><snippet>f</snippet></ROW><ROW><id>2220356</id><snippet>SocketHandler</snippet></ROW><ROW><id>2220356</id><snippet>createSocket</snippet></ROW><ROW><id>2220356</id><snippet>sock</snippet></ROW><ROW><id>2220356</id><snippet>SocketHandler</snippet></ROW><ROW><id>2220356</id><snippet>None</snippet></ROW><ROW><id>2220356</id><snippet>None</snippet></ROW><ROW><id>2220356</id><snippet>makeSocket</snippet></ROW><ROW><id>2220356</id><snippet>makeSocket</snippet></ROW><ROW><id>2220356</id><snippet>SocketHandler</snippet></ROW><ROW><id>2220356</id><snippet>emit</snippet></ROW><ROW><id>2220356</id><snippet>FileHandler</snippet></ROW><ROW><id>2220356</id><snippet>SMTPHandler</snippet></ROW><ROW><id>2220356</id><snippet>emit</snippet></ROW><ROW><id>2220356</id><snippet>if self.sock is None:
    self.createSocket()
if self.sock is None:
    # creation failed: do self.alternate_handler.handle(record)
else:
    # creation succeeded: defer to superclass implementation
</snippet></ROW><ROW><id>2220700</id><snippet>__exact</snippet></ROW><ROW><id>2220700</id><snippet>__contains</snippet></ROW><ROW><id>2220700</id><snippet>exclude()</snippet></ROW><ROW><id>2220700</id><snippet>filter()</snippet></ROW><ROW><id>2220759</id><snippet>self</snippet></ROW><ROW><id>2220759</id><snippet>def get_class_from_frame(fr):
  import inspect
  args, _, _, value_dict = inspect.getargvalues(fr)
  # we check the first parameter for the frame function is
  # named 'self'
  if len(args) and args[0] == 'self':
    # in that case, 'self' will be referenced in value_dict
    instance = value_dict.get('self', None)
    if instance:
      # return its class
      return getattr(instance, '__class__', None)
  # return None otherwise
  return None
</snippet></ROW><ROW><id>2220759</id><snippet>getargvalues</snippet></ROW><ROW><id>2220759</id><snippet>frame.f_locals</snippet></ROW><ROW><id>2220759</id><snippet>value_dict</snippet></ROW><ROW><id>2220759</id><snippet>frame.f_code.co_varnames[:frame.f_code.co_argcount]</snippet></ROW><ROW><id>2220759</id><snippet>args</snippet></ROW><ROW><id>2220759</id><snippet>self</snippet></ROW><ROW><id>2220759</id><snippet>get_class_from_frame</snippet></ROW><ROW><id>2220759</id><snippet>@classmethod</snippet></ROW><ROW><id>2220759</id><snippet>@staticmethod</snippet></ROW><ROW><id>2220759</id><snippet>self</snippet></ROW><ROW><id>2220790</id><snippet>exec</snippet></ROW><ROW><id>2220790</id><snippet>exec 'print 5'           # prints 5.
exec 'print 5\nprint 6'  # prints 5{newline}6.
exec 'if True: print 6'  # prints 6.
exec '5'                 # does nothing and returns nothing.
</snippet></ROW><ROW><id>2220790</id><snippet>eval</snippet></ROW><ROW><id>2220790</id><snippet>x = eval('5')              # x &lt;- 5
x = eval('%d + 6' % x)     # x &lt;- 11
x = eval('abs(%d)' % -100) # x &lt;- 100
x = eval('print 5')        # INVALID; print is a statement, not an expression (in Python 2.x).
x = eval('if 1: x = 4')    # INVALID; if is a statement, not an expression.
</snippet></ROW><ROW><id>2220790</id><snippet>compile</snippet></ROW><ROW><id>2220790</id><snippet>exec</snippet></ROW><ROW><id>2220790</id><snippet>eval</snippet></ROW><ROW><id>2220790</id><snippet>compile(string, '', 'eval')</snippet></ROW><ROW><id>2220790</id><snippet>eval(string)</snippet></ROW><ROW><id>2220790</id><snippet>compile(string, '', 'exec')</snippet></ROW><ROW><id>2220790</id><snippet>exec(string)</snippet></ROW><ROW><id>2220790</id><snippet>compile(string, '', 'single')</snippet></ROW><ROW><id>2220790</id><snippet>exec</snippet></ROW><ROW><id>2220790</id><snippet>if</snippet></ROW><ROW><id>2220790</id><snippet>else</snippet></ROW><ROW><id>2220980</id><snippet>burn_values</snippet></ROW><ROW><id>2220980</id><snippet>[255,0,0]</snippet></ROW><ROW><id>2220980</id><snippet>burn=[1,2,3],burn_values=[255,0,0]</snippet></ROW><ROW><id>2220980</id><snippet>gdal.RasterizeLayer(ds,bands,layer,burn_values, options = ["BURN_VALUE_FROM=Z"])</snippet></ROW><ROW><id>2220983</id><snippet>a[i,j] = x
</snippet></ROW><ROW><id>2221400</id><snippet>  from django.db import transaction


  @transaction.autocommit  
  def my_count():     
      while True:
          transaction.commit()
          print "Number of Things: %d" % Thing.objects.count()
          time.sleep(5)
</snippet></ROW><ROW><id>2222172</id><snippet>from mako.template import Template

print Template("${'foo %(a)s bar %(b)s' % data}").render(data=dict(a='Alpha',b='Beta'))
</snippet></ROW><ROW><id>2222228</id><snippet>iter</snippet></ROW><ROW><id>2222228</id><snippet>next()</snippet></ROW><ROW><id>2222228</id><snippet>for</snippet></ROW><ROW><id>2222228</id><snippet>l1[0]</snippet></ROW><ROW><id>2222228</id><snippet>l1 = ['1']
l2 = ['A']
l3 = ['2']
l4 = ['B']
l5 = ['3']
l6 = ['C']

listoflists = [l1,l2,l3,l4,l5,l6]

f = open ('order.txt','w')

for inner_list in listoflists:
    for element in inner_list:
        f.write(element+'\n')

f.close()
</snippet></ROW><ROW><id>2222530</id><snippet>i</snippet></ROW><ROW><id>2222530</id><snippet>i</snippet></ROW><ROW><id>2222530</id><snippet>func</snippet></ROW><ROW><id>2222530</id><snippet>funcs = []
for i in range(10):
    def func(value=i):
        print value
    funcs.append(func)

for f in funcs:
    f()
</snippet></ROW><ROW><id>2222530</id><snippet>def func(i=i):
    print i
</snippet></ROW><ROW><id>2222530</id><snippet>value</snippet></ROW><ROW><id>2223182</id><snippet>def f():
    # do something here ...
    # call f() again in 60 seconds
    threading.Timer(60, f).start()

# start calling f now and every 60 sec thereafter
f()
</snippet></ROW><ROW><id>2223193</id><snippet>tkinter._fix</snippet></ROW><ROW><id>2223193</id><snippet>tkinter/__init__.py</snippet></ROW><ROW><id>2223193</id><snippet>--include-modules</snippet></ROW><ROW><id>2223193</id><snippet>includes</snippet></ROW><ROW><id>2223193</id><snippet>cx_Freeze.Executable</snippet></ROW><ROW><id>2223193</id><snippet>setup.py</snippet></ROW><ROW><id>2223343</id><snippet>type</snippet></ROW><ROW><id>2223343</id><snippet>object</snippet></ROW><ROW><id>2223343</id><snippet>object</snippet></ROW><ROW><id>2223343</id><snippet>type</snippet></ROW><ROW><id>2223343</id><snippet>type</snippet></ROW><ROW><id>2223343</id><snippet>object</snippet></ROW><ROW><id>2223343</id><snippet>type</snippet></ROW><ROW><id>2223343</id><snippet>type</snippet></ROW><ROW><id>2223343</id><snippet>object</snippet></ROW><ROW><id>2224065</id><snippet>canvas.pack()
</snippet></ROW><ROW><id>2224065</id><snippet>&gt;&gt;&gt;def hello():
...    print "hello world"
...    return
</snippet></ROW><ROW><id>2224065</id><snippet>&gt;&gt;&gt;hello</snippet></ROW><ROW><id>2224065</id><snippet>&gt;&gt;&gt;hello()</snippet></ROW><ROW><id>2224147</id><snippet>sys.stdout.isatty()</snippet></ROW><ROW><id>2224218</id><snippet>LineDemo.reload</snippet></ROW><ROW><id>2224218</id><snippet>src_b           = [l for l in self.fobj.readline() if l.strip()]
</snippet></ROW><ROW><id>2224218</id><snippet>src_b           = [l for l in self.fobj.readlines() if l.strip()]
</snippet></ROW><ROW><id>2224250</id><snippet>config/environment.py</snippet></ROW><ROW><id>2224250</id><snippet>engine_from_config</snippet></ROW><ROW><id>2224250</id><snippet>create_engine</snippet></ROW><ROW><id>2224250</id><snippet>sqlalchemy.create_engine()</snippet></ROW><ROW><id>2224250</id><snippet>url</snippet></ROW><ROW><id>2224250</id><snippet>username</snippet></ROW><ROW><id>2224250</id><snippet>password</snippet></ROW><ROW><id>2224454</id><snippet>inspect.getfullargspec</snippet></ROW><ROW><id>2224454</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>2224454</id><snippet> &gt;&gt;&gt; def foo(x): pass

&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getfullargspec(foo)
FullArgSpec(args=['x'], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})
</snippet></ROW><ROW><id>2224625</id><snippet>with open('myfile') as f:
    for line in f:
        print line,
</snippet></ROW><ROW><id>2224625</id><snippet>filenames = ['file1', 'file2', 'file3']
for filename in filenames:
    with open(filename) as f:
        for line in f:
            print line,
</snippet></ROW><ROW><id>2224625</id><snippet>subprocess</snippet></ROW><ROW><id>2224729</id><snippet>prefix_with("TEXT")</snippet></ROW><ROW><id>2224729</id><snippet>INSERT</snippet></ROW><ROW><id>2224729</id><snippet>execute()</snippet></ROW><ROW><id>2224729</id><snippet>inserter = table_object.insert().prefix_with("OR REPLACE")
inserter.execute([{'column1':'value1'}, {'column1':'value2'}])
</snippet></ROW><ROW><id>2224833</id><snippet>gnlcomposition</snippet></ROW><ROW><id>2224833</id><snippet>gnlfilesource</snippet></ROW><ROW><id>2224833</id><snippet>source.mp3</snippet></ROW><ROW><id>2224833</id><snippet>destination.ogg</snippet></ROW><ROW><id>2224833</id><snippet>gst-launch-0.10 gnlfilesource location=$PWD/source.mp3 \
start=0 duration=5000000000 media-start=10000000000 media-duration=5000000000 ! \
audioconvert ! vorbisenc ! oggmux ! filesink location=destination.ogg
</snippet></ROW><ROW><id>2225060</id><snippet>pattern = r'^1?$|^(11+?)\1+$'
re.match(pattern, '1'*10)    #matches
re.match(pattern, '1'*11)    #doesn't match
</snippet></ROW><ROW><id>2225060</id><snippet>\1</snippet></ROW><ROW><id>2225066</id><snippet>&gt;&gt;&gt; type( [] ) == list
True
&gt;&gt;&gt; type( {} ) == dict
True
&gt;&gt;&gt; type( "" ) == str
True
&gt;&gt;&gt; type( 0 ) == int
True
&gt;&gt;&gt; class Test1 ( object ):
    pass
&gt;&gt;&gt; class Test2 ( Test1 ):
    pass
&gt;&gt;&gt; a = Test1()
&gt;&gt;&gt; b = Test2()
&gt;&gt;&gt; type( a ) == Test1
True
&gt;&gt;&gt; type( b ) == Test2
True
&gt;&gt;&gt; type( b ) == Test1
False
&gt;&gt;&gt; isinstance( b, Test1 )
True
&gt;&gt;&gt; isinstance( b, Test2 )
True
&gt;&gt;&gt; isinstance( a, Test1 )
True
&gt;&gt;&gt; isinstance( a, Test2 )
False
&gt;&gt;&gt; isinstance( [], list )
True
&gt;&gt;&gt; isinstance( {}, dict )
True
</snippet></ROW><ROW><id>2225477</id><snippet>help</snippet></ROW><ROW><id>2225582</id><snippet>glob.glob('145592*.jpg')</snippet></ROW><ROW><id>2226040</id><snippet>fields =</snippet></ROW><ROW><id>2226040</id><snippet>('foreign_model_field', ('nested_field1', 'nested_field2'))
</snippet></ROW><ROW><id>2226040</id><snippet>fields = ('updated', 'expires', 'created', 
    ('request', ('incident', 'reason', ('inputter', ('username',)))))
</snippet></ROW><ROW><id>2226373</id><snippet>zap</snippet></ROW><ROW><id>2226373</id><snippet>vars(zap)</snippet></ROW><ROW><id>2226373</id><snippet>globals()</snippet></ROW><ROW><id>2226494</id><snippet>&gt;&gt;&gt; def ness():
...  pie='yum'
...  exec pie+"=4"
...  print vars()[pie]
...  print yum
...
&gt;&gt;&gt;
&gt;&gt;&gt; ness()
4
4
</snippet></ROW><ROW><id>2226494</id><snippet>&gt;&gt;&gt; def ness():
...  dic={}
...  pie='yum'
...  dic[pie]=4
...  print dic[pie]
...  print dic['yum']
...
&gt;&gt;&gt; ness()
4
4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2226534</id><snippet>import numpy as NP
from matplotlib import pyplot as PLT

# just create some random data
fnx = lambda : NP.random.randint(3, 10, 10)
y = NP.row_stack((fnx(), fnx(), fnx()))   
# this call to 'cumsum' (cumulative sum), passing in your y data, 
# is necessary to avoid having to manually order the datasets
x = NP.arange(10) 
y_stack = NP.cumsum(y, axis=0)   # a 3x10 array

fig = PLT.figure()
ax1 = fig.add_subplot(111)

ax1.fill_between(x, 0, y_stack[0,:], fc="#CC6666", alpha=.7)
ax1.fill_between(x, y_stack[0,:], y_stack[1,:], fc="#1DACD6", alpha=.7)
ax1.fill_between(x, y_stack[1,:], y_stack[2,:], fc="#6E5160")

PLT.show()
</snippet></ROW><ROW><id>2226569</id><snippet>records</snippet></ROW><ROW><id>2226569</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2
import codecs

response = urllib2.urlopen('http://www.reality.sk/zakazka/0747-003578/predaj/1-izb-byt/kosice-mestska-cast-sever-sladkovicova-kosice-sever/art-real-1-izb-byt-sladkovicova-ul-kosice-sever')
html = response.read()
soup = BeautifulSoup(html)

tabulka = soup.find("table", {"class" : "detail-char"})

records = [] # store all of the records in this list
for row in tabulka.findAll('tr'):
    col = row.findAll('td')
    prvy = col[0].string.strip()
    druhy = col[1].string.strip()
    record = '%s;%s' % (prvy, druhy) # store the record with a ';' between prvy and druhy
    records.append(record)

fl = codecs.open('output.txt', 'wb', 'utf8')
line = ';'.join(records)
fl.write(line + u'\r\n')
fl.close()
</snippet></ROW><ROW><id>2227023</id><snippet>file</snippet></ROW><ROW><id>2227023</id><snippet>cd /opt/local/Library/Frameworks/Python.framework/Versions/2.6/
cd lib/python2.6/lib-dynload/
file itertools.so 
itertools.so: Mach-O universal binary with 2 architectures
itertools.so (for architecture x86_64): Mach-O 64-bit bundle x86_64
itertools.so (for architecture i386):   Mach-O bundle i386
</snippet></ROW><ROW><id>2227023</id><snippet>sudo port selfupdate
sudo port -u install python26 +universal ...
</snippet></ROW><ROW><id>2227023</id><snippet>import objc</snippet></ROW><ROW><id>2227023</id><snippet>import sys
sys.stderr.write(sys.executable)
</snippet></ROW><ROW><id>2227023</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
</snippet></ROW><ROW><id>2227023</id><snippet>py2app</snippet></ROW><ROW><id>2227220</id><snippet>frozenset</snippet></ROW><ROW><id>2227220</id><snippet>tuple</snippet></ROW><ROW><id>2227220</id><snippet>str</snippet></ROW><ROW><id>2227220</id><snippet>list</snippet></ROW><ROW><id>2227220</id><snippet>set</snippet></ROW><ROW><id>2227220</id><snippet>dict</snippet></ROW><ROW><id>2227220</id><snippet>with list1Lock:
    # change or read from the list here
# continue doing other stuff (the lock is released when you leave the with block)
</snippet></ROW><ROW><id>2227220</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>2227220</id><snippet>try:...finally:</snippet></ROW><ROW><id>2227566</id><snippet>&gt;&gt;&gt; t1 = ("A", "B", "C")
&gt;&gt;&gt; t2 = ("1", "2", "3")
&gt;&gt;&gt; [x + y for x in t1 for y in t2]
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
&gt;&gt;&gt; [[x + y for y in t2] for x in t1]
[['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]
&gt;&gt;&gt; x = _  # assign x to the last value
&gt;&gt;&gt; for row in x:
...   print " ".join(row)
... 
A1 A2 A3
B1 B2 B3
C1 C2 C3
&gt;&gt;&gt; for x in t1:
...   for y in t2:
...     print x + y,  # notice the comma, special print-statement syntax
...   print
A1 A2 A3
B1 B2 B3
C1 C2 C3
</snippet></ROW><ROW><id>2227566</id><snippet>[..]</snippet></ROW><ROW><id>2228109</id><snippet>Node</snippet></ROW><ROW><id>2228109</id><snippet>from xml.dom.minidom import parseString
documentNode = parseString("&lt;types name='character' shortName='chrs'&gt;&lt;/types&gt;")
typesNode = documentNode.firstChild

# Getting an attribute
print typesNode.attributes["name"].value # will print "character"

# Setting an attribute
typesNode.attributes["mynewattribute"] = u"mynewvalue"
print documentNode.toprettyxml()
</snippet></ROW><ROW><id>2228109</id><snippet>print</snippet></ROW><ROW><id>2228109</id><snippet>&lt;?xml version="1.0" ?&gt;
&lt;types mynewattribute="mynewvalue" name="character" shortName="chrs"/&gt;
</snippet></ROW><ROW><id>2228896</id><snippet>user_name</snippet></ROW><ROW><id>2228896</id><snippet>user_pass</snippet></ROW><ROW><id>2228896</id><snippet>MapNetworkDrive</snippet></ROW><ROW><id>2228896</id><snippet>testnetwork.MapNetworkDrive(drive_letter, network_path, True, user_name, user_pass)
</snippet></ROW><ROW><id>2228896</id><snippet>True</snippet></ROW><ROW><id>2229067</id><snippet>addr_file = addr_file.encode("utf-8")
values = {'q' : addr_file, 'output':out_fmt, 'key':gkey}
data = urllib.urlencode(values)
</snippet></ROW><ROW><id>2229067</id><snippet>inf = codecs.open(addr_file, 'r', 'iso-8859-1')
</snippet></ROW><ROW><id>2229080</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

        self.wfile.write("magic content goes here")

if __name__=="__main__":
    try:
        server = HTTPServer(("", 8080), Handler)
        server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()
</snippet></ROW><ROW><id>2229080</id><snippet>self.wfile.write</snippet></ROW><ROW><id>2229080</id><snippet>self.path</snippet></ROW><ROW><id>2229080</id><snippet>Handler</snippet></ROW><ROW><id>2229309</id><snippet>f = open(filename,'rb')
m = hashlib.md5()
while True:
    ## Don't read the entire file at once...
    data = f.read(10240)
    if len(data) == 0:
        break
    m.update(data)
print m.hexdigest()
</snippet></ROW><ROW><id>2229553</id><snippet>class FormSettings(Model):
  form = CharField(..)

class FormAttrib(Model):
  form_settings = ForeignKey(FormSettings)
  field = CharField(..)
  attrib_name=CharField(..)
  attrib_value=CharField(..)
</snippet></ROW><ROW><id>2229553</id><snippet>settings = FormSettings.objects.get(form=app_name + self.__class__.name)
</snippet></ROW><ROW><id>2229553</id><snippet>for setting in settings.formattrib_set():
</snippet></ROW><ROW><id>2229553</id><snippet>exec("getattr(self, settings.field)[attrib_name] = %s" % attrib_value)
</snippet></ROW><ROW><id>2229634</id><snippet>  hints = dict(zip(WORD, HINT))
</snippet></ROW><ROW><id>2229634</id><snippet>  if guess=='hint':
    print hints[current_word]
</snippet></ROW><ROW><id>2229634</id><snippet>if</snippet></ROW><ROW><id>2229634</id><snippet>if guess != 'hint':
  print "Sorry, that's not the answer."
</snippet></ROW><ROW><id>2230227</id><snippet>range=[10,100]
options='abc' 
def func(val)
     choose=str(options[bisect(range,val)])
     exec choose+"()"
def a():
      do_stuff
def b():
      do_other_stuff
def c():
      do_other_other stuff
</snippet></ROW><ROW><id>2230304</id><snippet>continue</snippet></ROW><ROW><id>2230304</id><snippet>break</snippet></ROW><ROW><id>2230304</id><snippet>continue</snippet></ROW><ROW><id>2230304</id><snippet>ok = 0
for x in range(0,10):
    print "x=",x
    if ok == 1:
        ok = 0
        continue
    for y in range(0,20): 
        print "y=",y
        if y == 5:
            ok = 1
            break
</snippet></ROW><ROW><id>2230541</id><snippet>ldconfig(8)</snippet></ROW><ROW><id>2230541</id><snippet>-p</snippet></ROW><ROW><id>2230541</id><snippet>-r</snippet></ROW><ROW><id>2230541</id><snippet>man crle</snippet></ROW><ROW><id>2230541</id><snippet>man dyld</snippet></ROW><ROW><id>2230571</id><snippet>imaplib</snippet></ROW><ROW><id>2230571</id><snippet>t == 'OK'</snippet></ROW><ROW><id>2230571</id><snippet>data[0][1]</snippet></ROW><ROW><id>2230571</id><snippet>import getpass, os, imaplib, email
from OpenSSL.crypto import load_certificate, FILETYPE_PEM

def getMsgs(servername="myimapserverfqdn"):
  usernm = getpass.getuser()
  passwd = getpass.getpass()
  subject = 'Your SSL Certificate'
  conn = imaplib.IMAP4_SSL(servername)
  conn.login(usernm,passwd)
  conn.select('Inbox')
  typ, data = conn.search(None,'(UNSEEN SUBJECT "%s")' % subject)
  for num in data[0].split():
    typ, data = conn.fetch(num,'(RFC822)')
    msg = email.message_from_string(data[0][1])
    typ, data = conn.store(num,'-FLAGS','\\Seen')
    yield msg

def getAttachment(msg,check):
  for part in msg.walk():
    if part.get_content_type() == 'application/octet-stream':
      if check(part.get_filename()):
        return part.get_payload(decode=1)

if __name__ == '__main__':
  for msg in getMsgs():
    payload = getAttachment(msg,lambda x: x.endswith('.pem'))
    if not payload:
      continue
    try:
      cert = load_certificate(FILETYPE_PEM,payload)
    except:
      cert = None
    if cert:
      cn = cert.get_subject().commonName
      filename = "%s.pem" % cn
      if not os.path.exists(filename):
        open(filename,'w').write(payload)
        print "Writing to %s" % filename
      else:
        print "%s already exists" % filename
</snippet></ROW><ROW><id>2230623</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; test = "Hi, I'm a string"
&gt;&gt;&gt; enc = base64.urlsafe_b64encode(test)
&gt;&gt;&gt; enc
'SGksIEknbSBhIHN0cmluZw=='
&gt;&gt;&gt; uenc = unicode(enc)
&gt;&gt;&gt; base64.urlsafe_b64decode(enc)
"Hi, I'm a string"
&gt;&gt;&gt; base64.urlsafe_b64decode(uenc)
Traceback (most recent call last):
...
TypeError: character mapping must return integer, None or unicode
</snippet></ROW><ROW><id>2230623</id><snippet>&gt;&gt;&gt; base64.urlsafe_b64decode(uenc.encode("utf-8"))
"Hi, I'm a string"
</snippet></ROW><ROW><id>2230661</id><snippet>519 def _isPILImage(im):
520     import Image as PIL_Image
521     try:
522         return isinstance(im,Image.Image) or isinstance(im, PIL_Image.Image)
523     except ImportError:
524         return 0
</snippet></ROW><ROW><id>2230755</id><snippet>from lxml import etree
data = etree.parse(fname)
result = [node.text.strip() 
    for node in data.xpath("//AssetType[@longname='characters']/type")]
</snippet></ROW><ROW><id>2231020</id><snippet>/opt/local</snippet></ROW><ROW><id>2231020</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>2231020</id><snippet>python_select</snippet></ROW><ROW><id>2231020</id><snippet>PATH</snippet></ROW><ROW><id>2231023</id><snippet>from thread import start_new_thread
from threading import Condition, Timer

class ConditionWithoutPolling():
    """Implements wait() with a timeout without polling.  Wraps the Condition
    class."""
    def __init__(self, condition):
        self.condition = condition
        self.wait_timeout_condition = Condition()

    def wait(self, timeout=None):
        """Same as Condition.wait() but it does not use a poll-and-sleep method
        to implement timeouts.  Instead, if a timeout is requested two new
        threads are spawned to implement a non-pol-and-wait method."""
        if timeout is None:
            # just use the original implementation if no waiting is involved
            self.condition.wait()
            return
        else:
            # this new boolean will tell us whether we are done waiting or not
            done = [False]

            # wait on the original condition in a new thread
            start_new_thread(self.wait_on_original, (done,))

            # wait for a timeout (without polling) in a new thread
            Timer(timeout, lambda : self.wait_timed_out(done)).start()

            # wait for EITHER of the previous threads to stop waiting
            with self.wait_timeout_condition:
                while not done[0]:
                    self.wait_timeout_condition.wait()

    def wait_on_original(self, done):
        """Waits on the original Condition and signals wait_is_over when done."""
        self.condition.wait()
        self.wait_is_over(done)

    def wait_timed_out(self, done):
        """Called when the timeout time is reached."""
        # we must re-acquire the lock we were waiting on before we can return
        self.condition.acquire()
        self.wait_is_over(done)

    def wait_is_over(self, done):
        """Modifies done to indicate that the wait is over."""
        done[0] = True
        with self.wait_timeout_condition:
            self.wait_timeout_condition.notify()

    # wrap Condition methods since it wouldn't let us subclass it ...
    def acquire(self, *args):
        self.condition.acquire(*args)
    def release(self):
        self.condition.release()
    def notify(self):
        self.condition.notify()
    def notify_all(self):
        self.condition.notify_all()
    def notifyAll(self):
        self.condition.notifyAll()

def test(wait_timeout, wait_sec_before_notification):
    import time
    from threading import Lock
    lock = Lock()
    cwp = ConditionWithoutPolling(Condition(lock))
    start = time.time()

    def t1():
        with lock:
            print 't1 has the lock, will wait up to %f sec' % (wait_timeout,)
            cwp.wait(wait_timeout)
        time_elapsed = time.time() - start
        print 't1: alive after %f sec' % (time_elapsed,)        

    # this thread will acquire the lock and then conditionally wait for up to 
    # timeout seconds and then print a message 
    start_new_thread(t1, ())

    # wait until it is time to send the notification and then send it
    print 'main thread sleeping (will notify in %f sec)' % (wait_sec_before_notification,)
    time.sleep(wait_sec_before_notification)
    with lock:
        cwp.notifyAll()
        print 'notification sent, will continue in 2sec'
    time.sleep(2.0) # give the other time thread to finish before exiting

if __name__ == "__main__":
    print 'test wait() ending before the timeout ...'
    test(2.0, 1.0)

    print '\ntest wait() ending due to the timeout ...'
    test(2.0, 4.0)
</snippet></ROW><ROW><id>2231252</id><snippet>&gt;&gt;&gt; def f():
...   print "F called"
...   return 1
...
&gt;&gt;&gt; 0 &lt; f() &lt; 100
F called
True
&gt;&gt;&gt; 0 &lt; f() and f() &lt; 100
F called
F called
True
&gt;&gt;&gt; if (0 &lt; f() and f() &lt; 100):
...   print True
...
F called
F called
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2231310</id><snippet>baudrate = 9600
parity = N
</snippet></ROW><ROW><id>2231310</id><snippet>baudrate</snippet></ROW><ROW><id>2231310</id><snippet>baudrate</snippet></ROW><ROW><id>2231310</id><snippet>None</snippet></ROW><ROW><id>2231310</id><snippet>input</snippet></ROW><ROW><id>2231478</id><snippet>threading.Condition</snippet></ROW><ROW><id>2231478</id><snippet>&gt;&gt;&gt; type(threading.Condition)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>2231649</id><snippet>self.__data</snippet></ROW><ROW><id>2231649</id><snippet>__iadd__</snippet></ROW><ROW><id>2231649</id><snippet>__add__</snippet></ROW><ROW><id>2231649</id><snippet>self[epoch] += traffic</snippet></ROW><ROW><id>2231649</id><snippet>self[epoch] = self[epoch].__iadd__(traffic)
</snippet></ROW><ROW><id>2231649</id><snippet>__iadd__</snippet></ROW><ROW><id>2231649</id><snippet>__iadd__</snippet></ROW><ROW><id>2231649</id><snippet>operator</snippet></ROW><ROW><id>2231649</id><snippet>operator.__iadd__(self[epoch], traffic)</snippet></ROW><ROW><id>2231649</id><snippet>self[epoch].__iadd__(traffic)</snippet></ROW><ROW><id>2231649</id><snippet>self[epoch]</snippet></ROW><ROW><id>2231649</id><snippet>__iadd__</snippet></ROW><ROW><id>2231685</id><snippet>[input[i:i+n] for i in range(0, len(input), n)]        # use xrange in py2k
</snippet></ROW><ROW><id>2231685</id><snippet>n</snippet></ROW><ROW><id>2231685</id><snippet>input</snippet></ROW><ROW><id>2231685</id><snippet>n</snippet></ROW><ROW><id>2231685</id><snippet>n</snippet></ROW><ROW><id>2231982</id><snippet>with</snippet></ROW><ROW><id>2231982</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>2232073</id><snippet>MY_CONSTANT</snippet></ROW><ROW><id>2232073</id><snippet>is</snippet></ROW><ROW><id>2232073</id><snippet>==</snippet></ROW><ROW><id>2232325</id><snippet>$ tshark -i eth0 -n -Nn  tcp port 3128 or tcp port 80</snippet></ROW><ROW><id>2232325</id><snippet>from mechanize import Browser
br = Browser()
br.open('http://news.bbc.co.uk')
</snippet></ROW><ROW><id>2232325</id><snippet>br.set_proxies({'http':'some.proxy:3128'})
br.open('http://news.bbc.co.uk')
</snippet></ROW><ROW><id>2232382</id><snippet>numpy</snippet></ROW><ROW><id>2232382</id><snippet>float32</snippet></ROW><ROW><id>2232463</id><snippet>import os

os.cmd ("mkdir ~/mnt/data_dir mount -t data:/dir/ /mnt/data_dir")
</snippet></ROW><ROW><id>2232772</id><snippet>MyClass.f</snippet></ROW><ROW><id>2232772</id><snippet>x = MyClass()
x.f()
</snippet></ROW><ROW><id>2232772</id><snippet>static method</snippet></ROW><ROW><id>2232772</id><snippet>class MyClass(object):
    def f():                 #no self parameter
        return 'hello world'
print MyClass.f()
</snippet></ROW><ROW><id>2233247</id><snippet>iter()</snippet></ROW><ROW><id>2233247</id><snippet>[x] * n</snippet></ROW><ROW><id>2233247</id><snippet>n</snippet></ROW><ROW><id>2233247</id><snippet>x</snippet></ROW><ROW><id>2233247</id><snippet>*arg</snippet></ROW><ROW><id>2233247</id><snippet>zip()</snippet></ROW><ROW><id>2233247</id><snippet>x = iter([1,2,3,4,5,6,7,8,9])
print zip(x, x, x)
</snippet></ROW><ROW><id>2233436</id><snippet>purge = []
for i,object in enumerate(self.list):
    if object.mycond()
        purge.append(i)
for i in reversed(purge):
    del self.list[i]
</snippet></ROW><ROW><id>2233436</id><snippet>for i in reversed([ i for (i,o) in enumerate(self.list) if o.mycond() ]):
    del self.list[i]
</snippet></ROW><ROW><id>2233441</id><snippet>zxJDBC</snippet></ROW><ROW><id>2233778</id><snippet>HTTPError</snippet></ROW><ROW><id>2233778</id><snippet>read</snippet></ROW><ROW><id>2233778</id><snippet>try:
    resp = urllib2.urlopen(url)
    contents = resp.read()
except urllib2.HTTPError, error:
    contents = error.read()
</snippet></ROW><ROW><id>2233801</id><snippet>__nonzero__()</snippet></ROW><ROW><id>2233801</id><snippet>class test:
    def __nonzero__(self):
        return False
</snippet></ROW><ROW><id>2233923</id><snippet>tuple(int(x.strip()) for x in raw_input().split(','))
</snippet></ROW><ROW><id>2234212</id><snippet>from django.forms.forms import Form
from django.forms.fields import CharField
class FunkyForm(Form):
    def __init__(self, *args, **kwargs):
        super(FunkyForm, self).__init__(*args, **kwargs)
        for item in range(5):
            self.fields['test_field_%s' % item] = CharField(max_length=255)
</snippet></ROW><ROW><id>2234282</id><snippet>glib</snippet></ROW><ROW><id>2234282</id><snippet>glib</snippet></ROW><ROW><id>2234282</id><snippet>g_slist_foreach</snippet></ROW><ROW><id>2234282</id><snippet>glib</snippet></ROW><ROW><id>2234342</id><snippet>def f(obj, errs):
  try: return not obj.mycond()
  except MyException as err: errs.append((obj, err))

errs = []
l = [obj for obj in objlist if f(obj, errs)]
if errs:
  emiterrorinfo(errs)
</snippet></ROW><ROW><id>2234342</id><snippet>errs</snippet></ROW><ROW><id>2234342</id><snippet>l</snippet></ROW><ROW><id>2234342</id><snippet>objlist</snippet></ROW><ROW><id>2234342</id><snippet>obj</snippet></ROW><ROW><id>2234410</id><snippet>import curses, sys, time

def test_streams(wot):
    print wot, "stdout"
    print &gt;&gt;sys.stderr, wot, "stderr"

def curses_mode(stdscr):
    test_streams("wrap")
    time.sleep(1.0)

test_streams("before")
curses.wrapper(curses_mode)
test_streams("after")
</snippet></ROW><ROW><id>2234410</id><snippet>wrap stderr</snippet></ROW><ROW><id>2234489</id><snippet>A.objects.order_by('B__name')
</snippet></ROW><ROW><id>2234489</id><snippet>A.objects.annotate(bname='B__name').order_by('bname')
</snippet></ROW><ROW><id>2234589</id><snippet>PyImport_Import()</snippet></ROW><ROW><id>2234589</id><snippet>PyImport_ImportModule()</snippet></ROW><ROW><id>2234589</id><snippet>const char *</snippet></ROW><ROW><id>2234589</id><snippet>PyImport_Import*()</snippet></ROW><ROW><id>2234589</id><snippet>Py_DECREF()</snippet></ROW><ROW><id>2234589</id><snippet>PyEval_CallObject()</snippet></ROW><ROW><id>2234589</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>2234589</id><snippet>Py_DECREF()</snippet></ROW><ROW><id>2234589</id><snippet>PyFloat_AsDouble()</snippet></ROW><ROW><id>2234589</id><snippet>PyArg_Parse()</snippet></ROW><ROW><id>2234589</id><snippet>PyErr_ExceptionMatches()</snippet></ROW><ROW><id>2234589</id><snippet>PyErr_Occurred()</snippet></ROW><ROW><id>2234589</id><snippet>PyErr_Print()</snippet></ROW><ROW><id>2234589</id><snippet>PyErr_Clear()</snippet></ROW><ROW><id>2234589</id><snippet>PyErr_Fetch()</snippet></ROW><ROW><id>2234589</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>2234729</id><snippet>''' Get windows special folders without pythonwin
    Example:
            import specialfolders
            start_programs = specialfolders.get(specialfolders.PROGRAMS)

Code is public domain, do with it what you will. 

Luke Pinner - Environment.gov.au, 2010 February 10
'''

#Imports use _syntax to mask them from autocomplete IDE's
import ctypes as _ctypes
from ctypes.wintypes import HWND as _HWND, HANDLE as _HANDLE,DWORD as _DWORD,LPCWSTR as _LPCWSTR,MAX_PATH as _MAX_PATH, create_unicode_buffer as _cub
_SHGetFolderPath = _ctypes.windll.shell32.SHGetFolderPathW

#public special folder constants
DESKTOP=                             0
PROGRAMS=                            2
MYDOCUMENTS=                         5
FAVORITES=                           6
STARTUP=                             7
RECENT=                              8
SENDTO=                              9
STARTMENU=                          11
MYMUSIC=                            13
MYVIDEOS=                           14
NETHOOD=                            19
FONTS=                              20
TEMPLATES=                          21
ALLUSERSSTARTMENU=                  22
ALLUSERSPROGRAMS=                   23
ALLUSERSSTARTUP=                    24
ALLUSERSDESKTOP=                    25
APPLICATIONDATA=                    26
PRINTHOOD=                          27
LOCALSETTINGSAPPLICATIONDATA=       28
ALLUSERSFAVORITES=                  31
LOCALSETTINGSTEMPORARYINTERNETFILES=32
COOKIES=                            33
LOCALSETTINGSHISTORY=               34
ALLUSERSAPPLICATIONDATA=            35

def get(intFolder):
    _SHGetFolderPath.argtypes = [_HWND, _ctypes.c_int, _HANDLE, _DWORD, _LPCWSTR]
    auPathBuffer = _cub(_MAX_PATH)
    exit_code=_SHGetFolderPath(0, intFolder, 0, 0, auPathBuffer)
    return auPathBuffer.value
</snippet></ROW><ROW><id>2235012</id><snippet>logging</snippet></ROW><ROW><id>2235012</id><snippet>import logging</snippet></ROW><ROW><id>2235012</id><snippet>import logging.config</snippet></ROW><ROW><id>2235012</id><snippet>import logging.config</snippet></ROW><ROW><id>2235012</id><snippet>logging</snippet></ROW><ROW><id>2235115</id><snippet>xdg-open</snippet></ROW><ROW><id>2235580</id><snippet>__getslice__</snippet></ROW><ROW><id>2235580</id><snippet>class MyList(list):
    #your stuff here

    def __getslice__(self, i, j):
        return MyList(list.__getslice__(self, i, j))
</snippet></ROW><ROW><id>2235947</id><snippet>def __init__(self, sample_rate, data=[], label=u""):</snippet></ROW><ROW><id>2235947</id><snippet>self</snippet></ROW><ROW><id>2235947</id><snippet>data</snippet></ROW><ROW><id>2235947</id><snippet>__getslice__</snippet></ROW><ROW><id>2235947</id><snippet>label</snippet></ROW><ROW><id>2235947</id><snippet>return Channel(self.sample_rate, label=self.label, data=list.__getslice__(self,start,stop))
</snippet></ROW><ROW><id>2236050</id><snippet>{{ forloop.counter0|add:page.start_index }}
</snippet></ROW><ROW><id>2236050</id><snippet>start_index</snippet></ROW><ROW><id>2236050</id><snippet>{{ page.start_index|add:forloop.counter0 }}
</snippet></ROW><ROW><id>2236194</id><snippet>COUNT()</snippet></ROW><ROW><id>2236194</id><snippet>points</snippet></ROW><ROW><id>2236935</id><snippet>next(x[0] for x in enumerate(L) if x[1] &gt; 0.7)
</snippet></ROW><ROW><id>2236941</id><snippet>(r'^category/(?P&lt;category_id&gt;\d+)$', 'myapp.views.category_list')
</snippet></ROW><ROW><id>2236941</id><snippet>from django.views.generic.list_detail import object_list
def category_list(request, category_id):
    queryset = ModelObject.objects.filter(category=category_id)
    return object_list(request, queryset=queryset)
</snippet></ROW><ROW><id>2237040</id><snippet>socket.create_connection</snippet></ROW><ROW><id>2237040</id><snippet>-&gt; urllib2.urlopen
-&gt; httplib.HTTPConnection
-&gt; socket.create_connection
</snippet></ROW><ROW><id>2237040</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>2237040</id><snippet>connect</snippet></ROW><ROW><id>2237040</id><snippet>self.host</snippet></ROW><ROW><id>2237040</id><snippet>socket.create_connection</snippet></ROW><ROW><id>2237040</id><snippet>HTTPHandler</snippet></ROW><ROW><id>2237040</id><snippet>HTTPSHandler</snippet></ROW><ROW><id>2237040</id><snippet>http_open</snippet></ROW><ROW><id>2237040</id><snippet>HTTPConnection</snippet></ROW><ROW><id>2237040</id><snippet>do_open</snippet></ROW><ROW><id>2237040</id><snippet>import urllib2
import httplib
import socket

def MyResolver(host):
  if host == 'news.bbc.co.uk':
    return '66.102.9.104' # Google IP
  else:
    return host

class MyHTTPConnection(httplib.HTTPConnection):
  def connect(self):
    self.sock = socket.create_connection((MyResolver(self.host),self.port),self.timeout)
class MyHTTPSConnection(httplib.HTTPSConnection):
  def connect(self):
    sock = socket.create_connection((MyResolver(self.host), self.port), self.timeout)
    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)

class MyHTTPHandler(urllib2.HTTPHandler):
  def http_open(self,req):
    return self.do_open(MyHTTPConnection,req)

class MyHTTPSHandler(urllib2.HTTPSHandler):
  def https_open(self,req):
    return self.do_open(MyHTTPSConnection,req)

opener = urllib2.build_opener(MyHTTPHandler,MyHTTPSHandler)
urllib2.install_opener(opener)

f = urllib2.urlopen('http://news.bbc.co.uk')
data = f.read()
from lxml import etree
doc = etree.HTML(data)

&gt;&gt;&gt; print doc.xpath('//title/text()')
['Google']
</snippet></ROW><ROW><id>2237118</id><snippet>class DynamicForm(Form):
  def __init__(self, *args, **kwargs):
    my_arg = kwargs.pop('my_arg')
    super(DynamicForm, self).__init__(*args, **kwargs)
    for item in range(5):
        self.fields['test_field_%d' % item] = CharField(max_length=255)
</snippet></ROW><ROW><id>2237118</id><snippet>form = DynamicForm(..., my_arg='value')
</snippet></ROW><ROW><id>2237268</id><snippet>text_file = open("write_it.txt", "w")
while 1:
    word = input("Please add to a text file: ")
    if not word:
        break
    text_file.write(word)
text_file.close()
</snippet></ROW><ROW><id>2237514</id><snippet>from django.conf import settings

urlpatterns += patterns('',
    (r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),
)
</snippet></ROW><ROW><id>2238053</id><snippet>date.today</snippet></ROW><ROW><id>2238053</id><snippet>datetime.now().date()</snippet></ROW><ROW><id>2238053</id><snippet>datetime.now</snippet></ROW><ROW><id>2238053</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date.today()
datetime.date(2010, 2, 10)
&gt;&gt;&gt; datetime.datetime.now().date()
datetime.date(2010, 2, 10)
</snippet></ROW><ROW><id>2238076</id><snippet>import inspect

def decallmethods(decorator, prefix='test_'):
  def dectheclass(cls):
    for name, m in inspect.getmembers(cls, inspect.ismethod):
      if name.startswith(prefix):
        setattr(cls, name, decorator(m))
    return cls
  return dectheclass
</snippet></ROW><ROW><id>2238076</id><snippet>@decallmethods(login_testuser)
class TestCase(object):
    def setUp(self):
        pass

    def test_1(self):
        print "test_1()"

    def test_2(self):
        print "test_2()"
</snippet></ROW><ROW><id>2238076</id><snippet>@decallmethods</snippet></ROW><ROW><id>2238076</id><snippet>class TestCase</snippet></ROW><ROW><id>2238076</id><snippet>TestCase = decallmethods(login_testuser)(TestCase)
</snippet></ROW><ROW><id>2238162</id><snippet>import os
import time
import shutil
numdays = 86400*7
now = time.time()
directory=os.path.join("/home","path")
for r,d,f in os.walk(directory):
    for dir in d:
         timestamp = os.path.getmtime(os.path.join(r,dir))
         if now-numdays &gt; timestamp:
             try:
                  print "removing ",os.path.join(r,dir)
                  # shutil.rmtree(os.path.join(r,dir))  #uncomment to use
             except Exception,e:
                  print e
                  pass
             else: 
                  print "some message for success"
</snippet></ROW><ROW><id>2238261</id><snippet>F:\JavaWorkspace\Test\src\gui_geo_location.py</snippet></ROW><ROW><id>2238261</id><snippet>self.entryVariable</snippet></ROW><ROW><id>2238261</id><snippet>entryVariable</snippet></ROW><ROW><id>2238261</id><snippet>__init__</snippet></ROW><ROW><id>2238261</id><snippet>__init__</snippet></ROW><ROW><id>2238261</id><snippet>entryVariable</snippet></ROW><ROW><id>2238261</id><snippet>self.entryVariable = Tkinter.StringVar()
</snippet></ROW><ROW><id>2238261</id><snippet>__init__</snippet></ROW><ROW><id>2238361</id><snippet>func(*tuple)</snippet></ROW><ROW><id>2238361</id><snippet>t = (2010, 10, 2, 11, 4, 0, 2, 41, 0)
dt = datetime.datetime(*t[0:7])
</snippet></ROW><ROW><id>2238361</id><snippet>&gt;&gt;&gt; range(3, 6)             # normal call with separate arguments
[3, 4, 5]
&gt;&gt;&gt; args = [3, 6]
&gt;&gt;&gt; range(*args)            # call with arguments unpacked from a list
[3, 4, 5]
</snippet></ROW><ROW><id>2239162</id><snippet>u'über'</snippet></ROW><ROW><id>2239162</id><snippet>s = utf8_string.decode('utf8') + latin1_string.decode('latin1')
</snippet></ROW><ROW><id>2239162</id><snippet>send(s.encode('utf8'))</snippet></ROW><ROW><id>2239162</id><snippet>input1 = get_possibly_nonascii_input().decode('iso-8859-1')
input2 = get_possibly_nonascii_input().decode('iso-8859-1')
input3 = u'üvw'

s =  u'%s -&gt; %s' % (input3, (input1 + input2).upper())

send_output(s.encode('utf8'))
</snippet></ROW><ROW><id>2239679</id><snippet>tarfile.addfile()</snippet></ROW><ROW><id>2239679</id><snippet>TarInfo</snippet></ROW><ROW><id>2239679</id><snippet>name</snippet></ROW><ROW><id>2239679</id><snippet>/path/to/filename</snippet></ROW><ROW><id>2239679</id><snippet>myfilename</snippet></ROW><ROW><id>2239679</id><snippet>tar.addfile(tarfile.TarInfo("myfilename"), file("/path/to/filename"))
</snippet></ROW><ROW><id>2239753</id><snippet>==</snippet></ROW><ROW><id>2239753</id><snippet>is</snippet></ROW><ROW><id>2239905</id><snippet>fp.flush()</snippet></ROW><ROW><id>2240144</id><snippet>try:
    user = User.objects.get(email__exact=email)
    if authenticate(user, email, password):
        request.session['user'] = user
        return HttpResponseRedirect('/home/')
    else:
        return HttpResponseRedirect('/home/login/')
except User.DoesNotExist: # A user with the e-mail provided was not found
    return HttpResponseRedirect('/home/')
</snippet></ROW><ROW><id>2240144</id><snippet>get</snippet></ROW><ROW><id>2240144</id><snippet>QuerySet</snippet></ROW><ROW><id>2240144</id><snippet>len</snippet></ROW><ROW><id>2240144</id><snippet>q = User.objects.filter(email = 'foo@bar.com')
print len(q)
</snippet></ROW><ROW><id>2240144</id><snippet>count()</snippet></ROW><ROW><id>2240144</id><snippet>print User.objects.filter(email = 'foo@bar.com').count()
</snippet></ROW><ROW><id>2240144</id><snippet>len</snippet></ROW><ROW><id>2240144</id><snippet>QuerySet</snippet></ROW><ROW><id>2240144</id><snippet>count()</snippet></ROW><ROW><id>2240144</id><snippet>QuerySet</snippet></ROW><ROW><id>2240144</id><snippet>SELECT COUNT(*)</snippet></ROW><ROW><id>2240144</id><snippet>/home/</snippet></ROW><ROW><id>2240144</id><snippet>/home/login/</snippet></ROW><ROW><id>2240368</id><snippet>class PathInfo(object):
</snippet></ROW><ROW><id>2240372</id><snippet>s='17GB'
for i,c in enumerate(s):
    if not c.isdigit():
        break
number=int(s[:i])
unit=s[i:]
</snippet></ROW><ROW><id>2240456</id><snippet>easy_install django-nose  
</snippet></ROW><ROW><id>2240456</id><snippet>INSTALLED_APPS = (
...
'django_nose',
...
)
</snippet></ROW><ROW><id>2240456</id><snippet>TEST_RUNNER = 'django_nose.run_tests'
</snippet></ROW><ROW><id>2240456</id><snippet>manage.py test
</snippet></ROW><ROW><id>2240486</id><snippet>gen_server:call/2,3</snippet></ROW><ROW><id>2240486</id><snippet>gen_server</snippet></ROW><ROW><id>2240528</id><snippet>nohup</snippet></ROW><ROW><id>2240528</id><snippet>start</snippet></ROW><ROW><id>2240549</id><snippet>distutils</snippet></ROW><ROW><id>2240549</id><snippet>py_compile.compile()</snippet></ROW><ROW><id>2240549</id><snippet>doraise</snippet></ROW><ROW><id>2240549</id><snippet>True</snippet></ROW><ROW><id>2240549</id><snippet>distutils</snippet></ROW><ROW><id>2240549</id><snippet>py_compile.compile()</snippet></ROW><ROW><id>2240549</id><snippet>doraise=True</snippet></ROW><ROW><id>2240549</id><snippet>setup.py</snippet></ROW><ROW><id>2240549</id><snippet>py_compile.compile()</snippet></ROW><ROW><id>2240549</id><snippet>setup.py</snippet></ROW><ROW><id>2240549</id><snippet>from setuptools import setup
import py_compile

# Replace py_compile.compile with a function that calls it with doraise=True
orig_py_compile = py_compile.compile

def doraise_py_compile(file, cfile=None, dfile=None, doraise=False):
    orig_py_compile(file, cfile=cfile, dfile=dfile, doraise=True)

py_compile.compile = doraise_py_compile

# Usual setup...
</snippet></ROW><ROW><id>2240828</id><snippet>basic.return</snippet></ROW><ROW><id>2240828</id><snippet>basic.return</snippet></ROW><ROW><id>2241072</id><snippet>&gt;&gt;&gt; def sha1(s):
...     return hashlib.sha1(s).hexdigest()
...
&gt;&gt;&gt; def sha512(s):
...     return hashlib.sha512(s).hexdigest()
...
&gt;&gt;&gt; t1 = timeit.Timer("sha1('asdf' * 100)", "from __main__ import sha1")
&gt;&gt;&gt; t512 = timeit.Timer("sha512('asdf' * 100)", "from __main__ import sha512")
&gt;&gt;&gt; t1.timeit()
3.2463729381561279
&gt;&gt;&gt; t512.timeit()
6.5079669952392578
</snippet></ROW><ROW><id>2241072</id><snippet>hash512</snippet></ROW><ROW><id>2241072</id><snippet>sha1</snippet></ROW><ROW><id>2241072</id><snippet>&gt;&gt;&gt; s = "asdf"
&gt;&gt;&gt; hash(s)
-618826466
&gt;&gt;&gt; s = "xxx"
&gt;&gt;&gt; hash(s)
943435
&gt;&gt;&gt; hash("xxx")
943435
</snippet></ROW><ROW><id>2241072</id><snippet>hash = hashlib.sha1(object_to_cache_as_string).hexdigest()
cache[hash] = object_to_cache
</snippet></ROW><ROW><id>2241072</id><snippet>cache[object_to_cache_as_string] = object_to_cache
</snippet></ROW><ROW><id>2241072</id><snippet>cache[object_to_cache] = object_to_cache
</snippet></ROW><ROW><id>2241232</id><snippet>&gt;&gt;&gt; def myFunc(*args, **kwargs):
...   # This function accepts arbitary arguments:
...   # Keywords arguments are available in the kwargs dict;
...   # Regular arguments are in the args tuple.
...   # (This behaviour is dictated by the stars, not by
...   #  the name of the formal parameters.)
...   print args, kwargs
...
&gt;&gt;&gt; myFunc()
() {}
&gt;&gt;&gt; myFunc(2)
(2,) {}
&gt;&gt;&gt; myFunc(2,5)
(2, 5) {}
&gt;&gt;&gt; myFunc(b = 3)
() {'b': 3}
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(myFunc)
  1           0 LOAD_FAST                0 (args)
              3 PRINT_ITEM
              4 LOAD_FAST                1 (kwargs)
              7 PRINT_ITEM
              8 PRINT_NEWLINE
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE
</snippet></ROW><ROW><id>2241232</id><snippet>myFunc</snippet></ROW><ROW><id>2241904</id><snippet>dict.fromkeys([1, 2, 3, 4])</snippet></ROW><ROW><id>2241904</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>2241904</id><snippet>None</snippet></ROW><ROW><id>2242202</id><snippet>import xmlrpclib

s = xmlrpclib.ServerProxy('http://localhost:8000')
print s.myfunction(2, 4)
</snippet></ROW><ROW><id>2242202</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
server = SimpleXMLRPCServer(("localhost", 8000),
                            requestHandler=RequestHandler)

def myfunction(x, y):
    status = 1
    result = [5, 6, [4, 5]]
    return (status, result)
server.register_function(myfunction)

# Run the server's main loop
server.serve_forever()
</snippet></ROW><ROW><id>2242202</id><snippet>xmlrpclib</snippet></ROW><ROW><id>2242202</id><snippet>xmlrpclib.Transport</snippet></ROW><ROW><id>2242444</id><snippet>nmake -f msisupport.mak
</snippet></ROW><ROW><id>2242444</id><snippet>("Tcl", "tcl8*", "license.terms"),
        ("Tk", "tk8*", "license.terms"),
        ("Tix", "Tix-*", "license.terms")):</snippet></ROW><ROW><id>2242444</id><snippet>("Tcl", "tcl-8*", "license.terms"),
        ("Tk", "tk-8*", "license.terms"),
        ("Tix", "Tix*", "license.terms")):</snippet></ROW><ROW><id>2242444</id><snippet>c:\python26\python msi.py</snippet></ROW><ROW><id>2242444</id><snippet>nmake -f icons.mak
</snippet></ROW><ROW><id>2242496</id><snippet>def get_max(f, s):
  return max(s, key=f)
</snippet></ROW><ROW><id>2242528</id><snippet>&lt;input type="text" class="reg-txt{% if form.fieldname.errors %} errors{% endif %}"/&gt;
</snippet></ROW><ROW><id>2243060</id><snippet>git log -1 --format=format:%h TREEISH</snippet></ROW><ROW><id>2243060</id><snippet>SHA_OF_THE_RELEASE</snippet></ROW><ROW><id>2243060</id><snippet>git log -1 --format=format:%h SHA_OF_THE_RELEASE requirements.txt</snippet></ROW><ROW><id>2243060</id><snippet>1d02afc</snippet></ROW><ROW><id>2243060</id><snippet>1d02afc</snippet></ROW><ROW><id>2243060</id><snippet>pip install -E /path/to/venv/1d02afc -r /path/to/requirements.txt</snippet></ROW><ROW><id>2243060</id><snippet>path/to/venv/1d02afc</snippet></ROW><ROW><id>2243060</id><snippet>git archive my-branch</snippet></ROW><ROW><id>2243060</id><snippet>git archive 1d02afc</snippet></ROW><ROW><id>2243066</id><snippet>&gt;&gt;&gt; {1,2,{3,4,5}}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
</snippet></ROW><ROW><id>2243066</id><snippet>&gt;&gt;&gt; {1,2,f{3,4,5}}
</snippet></ROW><ROW><id>2243186</id><snippet>data = """&lt;link rel="index" href="/index.php" /&gt;
&lt;link rel="contents" href="/getdata.php" /&gt;
&lt;link rel="copyright" href="/blabla.php" /&gt;
&lt;link rel="shortcut icon" href="/img/all/favicon.ico" /&gt;
"""

from lxml import etree

d = etree.HTML(data)

d.xpath('//link[@rel="shortcut icon"]/@href')
['/img/all/favicon.ico']
</snippet></ROW><ROW><id>2243406</id><snippet>import random
from twisted.internet import task

class MyProcess:
  def __init__(self):
    self.stats = []
    self.lp = None
  def myloopingCall(self):
    print "I have %s stats" % len(self.stats)
  def myMainFunction(self,reactor):
    self.stats.append(random.random())
    reactor.callLater(0,self.myMainFunction,reactor)
  def start(self,reactor):
    self.lp = task.LoopingCall(self.myloopingCall)
    self.lp.start(2)
    reactor.callLater(0,self.myMainFunction,reactor)
  def stop(self):
    if self.lp is not None:
      self.lp.stop()
    print "I'm done"

if __name__ == '__main__':
  myproc = MyProcess()
  from twisted.internet import reactor
  reactor.callWhenRunning(myproc.start,reactor)
  reactor.addSystemEventTrigger('during','shutdown',myproc.stop)
  reactor.callLater(10,reactor.stop)
  reactor.run()
</snippet></ROW><ROW><id>2243562</id><snippet>from heapq import nlargest
lst = [9,1,6,4,2,8,3,7,5]
nlargest(3, lst) # Gives [9,8,7]
</snippet></ROW><ROW><id>2243562</id><snippet>from heapq import nlargest
tags = [ ("python", 30), ("ruby", 25), ("c++", 50), ("lisp", 20) ]
nlargest(2, tags, key=lambda e:e[1]) # Gives [ ("c++", 50), ("python", 30) ]
</snippet></ROW><ROW><id>2243652</id><snippet>list(self.items)</snippet></ROW><ROW><id>2243652</id><snippet>self.items</snippet></ROW><ROW><id>2243652</id><snippet>list(qs)</snippet></ROW><ROW><id>2243865</id><snippet>class ImpersonateMiddleware(object):
    def process_request(self, request):
        if request.user.is_superuser and "__impersonate" in request.GET:
            request.user = models.User.objects.get(id=int(request.GET["__impersonate"]))

    def process_response(self, request, response):
        if request.user.is_superuser and "__impersonate" in request.GET:
            if isinstance(response, http.HttpResponseRedirect):
                location = response["Location"]
                if "?" in location:
                    location += "&amp;"
                else:
                    location += "?"
                location += "__impersonate=%s" % request.GET["__impersonate"]
                response["Location"] = location
        return response
</snippet></ROW><ROW><id>2243990</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt;
&gt;&gt;&gt; data = dict(
...   list1 = set(list("alphabet")),
...   list2 = set(list("fiddlesticks")),
...   list3 = set(list("geography")),
...   list4 = set(list("bovinespongiformencephalopathy")),
... )
&gt;&gt;&gt;
&gt;&gt;&gt; variations = {}
&gt;&gt;&gt; for i in range(len(data)):
...   for v in combinations(data.keys(),i+1):
...     vsets = [ data[x] for x in v ]
...     variations[tuple(sorted(v))] = reduce(lambda x,y: x.intersection(y), vsets)
...
&gt;&gt;&gt; for k,v in sorted(variations.items(),key=lambda x: (len(x[0]),x[0])):
...   print "%r\n\t%r" % (k,v)
...
('list1',)
        set(['a', 'b', 'e', 'h', 'l', 'p', 't'])
('list2',)
        set(['c', 'e', 'd', 'f', 'i', 'k', 'l', 's', 't'])
('list3',)
        set(['a', 'e', 'g', 'h', 'o', 'p', 'r', 'y'])
('list4',)
        set(['a', 'c', 'b', 'e', 'g', 'f', 'i', 'h', 'm', 'l', 'o', 'n', 'p', 's', 'r', 't', 'v', 'y'])
('list1', 'list2')
        set(['e', 'l', 't'])
('list1', 'list3')
        set(['a', 'h', 'e', 'p'])
('list1', 'list4')
        set(['a', 'b', 'e', 'h', 'l', 'p', 't'])
('list2', 'list3')
        set(['e'])
('list2', 'list4')
        set(['c', 'e', 'f', 'i', 'l', 's', 't'])
('list3', 'list4')
        set(['a', 'e', 'g', 'h', 'o', 'p', 'r', 'y'])
('list1', 'list2', 'list3')
        set(['e'])
('list1', 'list2', 'list4')
        set(['e', 'l', 't'])
('list1', 'list3', 'list4')
        set(['a', 'h', 'e', 'p'])
('list2', 'list3', 'list4')
        set(['e'])
('list1', 'list2', 'list3', 'list4')
        set(['e'])
</snippet></ROW><ROW><id>2244051</id><snippet>filename = "my.csv"
reader = csv.reader(open(filename))
try:
    for row in reader:
        print 'Row read with success!', row
except csv.Error, e:
    sys.exit('file %s, line %d: %s' % (filename, reader.line_num, e))
</snippet></ROW><ROW><id>2244051</id><snippet>next()</snippet></ROW><ROW><id>2244051</id><snippet>while True:
    try: 
        print reader.next()
    except csv.Error:
        print "Error"
    except StopIteration:
        print "Iteration End"
        break
</snippet></ROW><ROW><id>2244307</id><snippet>def files(a):
    pass

while True:
    try:
        i = int(input('Select: '))
        if i in range(4):
            files(i)
            break
    except:    
        pass

    print '\nIncorrect input, try again'
</snippet></ROW><ROW><id>2244447</id><snippet>import matplotlib.pyplot as plt
import numpy as np

length=np.random.random(10)
length.sort()
time=np.random.random(10)
time.sort()
slope,intercept=np.polyfit(np.log(length),np.log(time),1)
print(slope)
plt.loglog(length,time,'--')
plt.show()
</snippet></ROW><ROW><id>2244457</id><snippet>&gt;&gt;&gt; list1 = ['one','two','three','four','five']
&gt;&gt;&gt; list2 = ['one','two','four']
&gt;&gt;&gt; set(list1) - set(list2)
set(['five', 'three'])
</snippet></ROW><ROW><id>2244619</id><snippet>import syslog
# Define identifier
syslog.openlog("Python")
# Record a message
syslog.syslog(syslog.LOG_ALERT, "Example message")
</snippet></ROW><ROW><id>2244668</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; data = """&lt;assetsMain&gt;
... &lt;assetParent type='character' shortName='char'&gt;
... &lt;asset&gt;pub&lt;/asset&gt;
... &lt;asset&gt;car&lt;/asset&gt;
... &lt;/assetParent&gt;
... &lt;assetParent type='par' shortName='pr'&gt;
... &lt;asset&gt;camera&lt;/asset&gt;
... &lt;asset&gt;rig&lt;/asset&gt;
... &lt;/assetParent&gt;
... &lt;/assetsMain&gt;
... """
&gt;&gt;&gt; doc = etree.XML(data)
&gt;&gt;&gt; for aP in doc.xpath('//assetParent'):
...   parent = aP.attrib['type']
...   for a in aP.xpath('./asset/text()'):
...     print parent, a.strip()
...
character pub
character car
par camera
par rig
</snippet></ROW><ROW><id>2244972</id><snippet>spawn helloworld.simple_app
spawn helloworld.simple_app middleware.Upperware
</snippet></ROW><ROW><id>2244972</id><snippet>paste.deploy</snippet></ROW><ROW><id>2245290</id><snippet>from functools import wraps
from time import time

def timed(f):
  @wraps(f)
  def wrapper(*args, **kwds):
    start = time()
    result = f(*args, **kwds)
    elapsed = time() - start
    print "%s took %d time to finish" % (f.__name__, elapsed)
    return result
  return wrapper
</snippet></ROW><ROW><id>2245290</id><snippet>@timed
def somefunction(countto):
  for i in xrange(countto):
    pass
  return "Done"
</snippet></ROW><ROW><id>2245290</id><snippet>&gt;&gt;&gt; timedec.somefunction(10000000)
somefunction took 0 time to finish
'Done'
&gt;&gt;&gt; timedec.somefunction(100000000)
somefunction took 2 time to finish
'Done'
&gt;&gt;&gt; timedec.somefunction(1000000000)
somefunction took 22 time to finish
'Done'
</snippet></ROW><ROW><id>2245661</id><snippet>#!/usr/bin/env python
import os
import time
import win32com.client
import logging

old_mappings = [
    r'\\192.168.1.100\old',
    ]
new_mapping = r'\\192.168.1.200\new'
LOG_FILENAME = 'status.log'

def main():
    """
    Check to see if Z: is mapped to the old server; if so remove it and
    map the Z: to the new server.

    Then, repeatedly monitor the Z: mapping. If the Z: drive exists,
    report to status.log that we are working. Otherwise, re-map it and
    report errors to the log.
    """
    setupLogging()
    replaceMapping()
    monitorMapping()

def replaceMapping():
    if removeMapping():
        createNewMapping()

def setupLogging():
    format = os.environ['COMPUTERNAME'] + " - %(asctime)s - %(message)s"
    logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG, format=format)

def getCredentials():
    """
    Return one of three things:
    - an empty tuple
    - a tuple containing just a username (if a password is not required)
    - a tuple containing username and password
    """
    return ('someuser', 'somepass')

def createNewMapping():
    network = win32com.client.Dispatch('WScript.Network')
    params = (
        'Z:', # drive letter
        new_mapping, # UNC path
        True, # update profile
        )
    params += getCredentials()
    try:
        network.MapNetworkDrive(*params)
        msg = '{params} - Drive has been mapped'
        logging.getLogger().info(msg.format(**vars()))
    except Exception as e:
        msg = 'error mapping {params}'
        logging.getLogger().exception(msg.format(**vars()))

def monitorMapping():
    while True:
        # only check once a minute
        time.sleep(60)
        checkMapping()

def checkMapping():
    if getDriveMappings()['Z:'] == new_mapping:
        msg = 'Drive is still mapped'
        logging.getLogger().info(msg.format(**vars()))
    else:
        replaceMapping()

# From Python 2.6.4 docs
from itertools import izip_longest
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

def getDriveMappings():
    """
    Return a dictionary of drive letter to UNC paths as mapped on the
    system.
    """
    network = win32com.client.Dispatch('WScript.Network')
    # http://msdn.microsoft.com/en-us/library/t9zt39at%28VS.85%29.aspx
    drives = network.EnumNetworkDrives()
    # EnumNetworkDrives returns an even-length array of drive/unc pairs.
    # Use grouper to convert this to a dictionary.
    result = dict(grouper(2, drives))
    # Potentially several UNC paths will be connected but not assigned
    # to any drive letter. Since only the last will be in the
    # dictionary, remove it.
    if '' in result: del result['']
    return result

def getUNCForDrive(drive):
    """
    Get the UNC path for a mapped drive.
    Throws a KeyError if no mapping exists.
    """
    return getDriveMappings()[drive.upper()]

def removeMapping():
    """
    Remove the old drive mapping. If it is removed, or was not present,
    return True.
    Otherwise, return False or None.
    """
    mapped_drives = getDriveMappings()
    drive_letter = 'Z:'
    if not drive_letter in mapped_drives:
        return True
    if mapped_drives[drive_letter] in old_mappings:
        network = win32com.client.Dispatch('WScript.Network')
        force = True
        update_profile = True
        network.RemoveNetworkDrive(drive_letter, force, update_profile)
        return True
    # return None

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2245908</id><snippet>for g in request.user.groups.all():
    l.append(g.name)
</snippet></ROW><ROW><id>2245908</id><snippet>l = request.user.groups.values_list('name',flat=True)
</snippet></ROW><ROW><id>2245993</id><snippet>a.foo</snippet></ROW><ROW><id>2245993</id><snippet>A.foo</snippet></ROW><ROW><id>2245993</id><snippet>A.foo</snippet></ROW><ROW><id>2245993</id><snippet>type -- object
  |       |
Meta --   A  -- a
</snippet></ROW><ROW><id>2245993</id><snippet>a → A → object</snippet></ROW><ROW><id>2245993</id><snippet> object
   ^
   |
   A  &lt;-- a
</snippet></ROW><ROW><id>2245993</id><snippet>foo</snippet></ROW><ROW><id>2245993</id><snippet>foo</snippet></ROW><ROW><id>2245993</id><snippet>A</snippet></ROW><ROW><id>2245993</id><snippet>type
  ^
  |       
Meta &lt;--   A 
</snippet></ROW><ROW><id>2246067</id><snippet>words = 'She sells seashells by the seashore'

unique_letters = set(words.lower())
unique_letters.discard(' ') # If there was a space, remove it.
</snippet></ROW><ROW><id>2246395</id><snippet>yes</snippet></ROW><ROW><id>2246395</id><snippet>y</snippet></ROW><ROW><id>2246395</id><snippet>yes | rm *.txt
</snippet></ROW><ROW><id>2246742</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = ('myapp.processor.foos',)
</snippet></ROW><ROW><id>2246742</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    "django.core.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "myapp.processor.foos",
)
</snippet></ROW><ROW><id>2247113</id><snippet>virtualenv test
cd test/
. bin/activate
easy_install spawning
python -c 'import spawning'
</snippet></ROW><ROW><id>2247236</id><snippet>len()</snippet></ROW><ROW><id>2247236</id><snippet>unicode</snippet></ROW><ROW><id>2247236</id><snippet>str</snippet></ROW><ROW><id>2247236</id><snippet>&gt;&gt;&gt; # creates a str literal (with utf-8 encoding, if this was
&gt;&gt;&gt; # specified on the beginning of the file):
&gt;&gt;&gt; len('ë́aúlt') 
9
&gt;&gt;&gt; # creates a unicode literal (you should generally use this
&gt;&gt;&gt; # version if you are dealing with special characters):
&gt;&gt;&gt; len(u'ë́aúlt') 
6
&gt;&gt;&gt; # the same str literal (written in an encoded notation):
&gt;&gt;&gt; len('\xc3\xab\xcc\x81a\xc3\xbalt') 
9
&gt;&gt;&gt; # you can convert any str to an unicode object by decoding() it:
&gt;&gt;&gt; len('\xc3\xab\xcc\x81a\xc3\xbalt'.decode('utf-8')) 
6
</snippet></ROW><ROW><id>2247236</id><snippet>unicode</snippet></ROW><ROW><id>2247236</id><snippet>str</snippet></ROW><ROW><id>2247236</id><snippet>basestring</snippet></ROW><ROW><id>2247236</id><snippet>&gt;&gt;&gt; test = u'ë́aúlt'
&gt;&gt;&gt; print test[0]
ë
</snippet></ROW><ROW><id>2247236</id><snippet>unicode</snippet></ROW><ROW><id>2247236</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>2247236</id><snippet>str</snippet></ROW><ROW><id>2247236</id><snippet>unicode</snippet></ROW><ROW><id>2247237</id><snippet>socket.SOCK_DGRAM</snippet></ROW><ROW><id>2247433</id><snippet>def reverse_insort(a, x, lo=0, hi=None):
    """Insert item x in list a, and keep it reverse-sorted assuming a
    is reverse-sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """
    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if x &gt; a[mid]: hi = mid
        else: lo = mid+1
    a.insert(lo, x)
</snippet></ROW><ROW><id>2247462</id><snippet>try/except</snippet></ROW><ROW><id>2247462</id><snippet>try</snippet></ROW><ROW><id>2247462</id><snippet>'subject'</snippet></ROW><ROW><id>2247462</id><snippet>if 'subject' in request.POST:
    subject = request.POST['subject']
else:
    subject = some_default
</snippet></ROW><ROW><id>2247462</id><snippet>request.POST.get('subject', some_default)</snippet></ROW><ROW><id>2247616</id><snippet>remove</snippet></ROW><ROW><id>2247616</id><snippet>None</snippet></ROW><ROW><id>2247616</id><snippet>l= MyWords.upper().split()
l.remove(SpamWords[SpamCheckRange])
# l is ['YES']
</snippet></ROW><ROW><id>2247616</id><snippet>&gt;&gt;&gt; [word for word in MyWords.split() if word.upper() not in SpamWords]
['yes']
</snippet></ROW><ROW><id>2247756</id><snippet>use_for_related_fields = True</snippet></ROW><ROW><id>2247756</id><snippet>def do_something(
    ids = self.get_query_set().values_list('user__id', flat=True)
    return User.objects.filter(id__in=ids).distinct()
</snippet></ROW><ROW><id>2248041</id><snippet>(await-svctim)/await*100</snippet></ROW><ROW><id>2248201</id><snippet>from apache.httpd import request_rec
r = request_rec(environ['apache.request_rec'])
r.user = user
</snippet></ROW><ROW><id>2248272</id><snippet>os.system()</snippet></ROW><ROW><id>2248272</id><snippet>subprocess</snippet></ROW><ROW><id>2248660</id><snippet>import warnings
warnings.filterwarnings(action="ignore", message='the sets module is deprecated')
import sets
</snippet></ROW><ROW><id>2248820</id><snippet>stdout, stderr = p.communicate(str.encode('utf-8'))
</snippet></ROW><ROW><id>2248820</id><snippet>str</snippet></ROW><ROW><id>2248820</id><snippet>shell=True</snippet></ROW><ROW><id>2248820</id><snippet>p = subprocess.Popen(['/usr/bin/dot', '-Kfdp', '-Tsvg'],
    stdin=subprocess.PIPE, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>2248965</id><snippet>-o</snippet></ROW><ROW><id>2249046</id><snippet>DeadlineExceededError</snippet></ROW><ROW><id>2249046</id><snippet>CancelledError</snippet></ROW><ROW><id>2249046</id><snippet>CancelledError</snippet></ROW><ROW><id>2249060</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2249060</id><snippet>import itertools
import operator

L = [('grape', 100), ('grape', 3), ('apple', 15), ('apple', 10),
     ('apple', 4), ('banana', 3)]

def accumulate(l):
    it = itertools.groupby(l, operator.itemgetter(0))
    for key, subiter in it:
       yield key, sum(item[1] for item in subiter) 

&gt;&gt;&gt; print list(accumulate(L))
[('grape', 103), ('apple', 29), ('banana', 3)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2249209</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; class Album(object):
...     def __init__(self, title, artist, tracks, length, bitrate, md5):
...         self.title=title
...         self.artist=artist
...         self.tracks=tracks
...         self.length=length
...         self.bitrate=bitrate
...         self.md5=md5
...     def __str__(self):
...         return textwrap.dedent("""
...         %(artist)s;
...         %(title)s;
...                       %(tracks)s - %(length)s - %(bitrate)s - %(md5)s"""%(vars(self)))
... 
&gt;&gt;&gt; a=Album("album title","artist name",10,52.1,"320kb/s","4d53b0cb432ec371ca93ea30b62521d9")
&gt;&gt;&gt; print a

artist name;
album title;
              10 - 52.1 - 320kb/s - 4d53b0cb432ec371ca93ea30b62521d9
</snippet></ROW><ROW><id>2249219</id><snippet>import os,shutil
root="/home"
destination="/tmp"
directory = os.path.join(root,"mydir")
os.chdir(directory)
for file in os.listdir("."):
    flag=""
    #check contents of file ?
    for line in open(file):
       if "something" in line:
           flag="found"
    if flag=="found":
       try:
           # or use os.rename() on local
           shutil.move(file,destination)
       except Exception,e: print e
       else:
           print "success"
</snippet></ROW><ROW><id>2249219</id><snippet>shutil.move(src, dst)¶

    Recursively move a file or directory to another location.
    If the destination is on the current filesystem, then simply use rename. 
Otherwise, copy src (with copy2()) to the dst and then remove src.
</snippet></ROW><ROW><id>2249250</id><snippet>db.foo.find({"purchase_date": {"$gt": monday_midnight, "$lte": tuesday_midnight}})
</snippet></ROW><ROW><id>2249332</id><snippet>if __FILE__ == $0
    foo()
    bar()
end
</snippet></ROW><ROW><id>2249370</id><snippet>import re
text="""{{rdex|001|001|Bulbasaur|2|Grass|Poison}}"""
re.findall("\{\{[^|]+\|(\d+)\|\d+\|([^|]+)",text)
[('001', 'Bulbasaur')]
</snippet></ROW><ROW><id>2249426</id><snippet>page</snippet></ROW><ROW><id>2249426</id><snippet>s = 'This is string : %d' % (page + 1,)
</snippet></ROW><ROW><id>2249529</id><snippet>url(r'^read/^$', 'read', name="read_name"),</snippet></ROW><ROW><id>2249540</id><snippet>google_appengine/google/appengine/tools/appcfg.py</snippet></ROW><ROW><id>2249540</id><snippet>RequestLogLines</snippet></ROW><ROW><id>2249540</id><snippet>LogsRequester</snippet></ROW><ROW><id>2249559</id><snippet>python manage.py inspectdb
</snippet></ROW><ROW><id>2249559</id><snippet>python manage.py inspectdb &gt; models.py
</snippet></ROW><ROW><id>2249559</id><snippet>settings.py</snippet></ROW><ROW><id>2249660</id><snippet>next()</snippet></ROW><ROW><id>2249660</id><snippet>in</snippet></ROW><ROW><id>2249660</id><snippet>for</snippet></ROW><ROW><id>2249849</id><snippet>print repr(u'あいうえお'.encode('utf-16be'))
print repr(u'あいうえお'.encode('utf-16le'))
</snippet></ROW><ROW><id>2249988</id><snippet>datetime</snippet></ROW><ROW><id>2249988</id><snippet>try:
  nextmonthdate = x.replace(month=x.month+1)
except ValueError:
  if x.month == 12:
    nextmonthdate = x.replace(year=x.year+1, month=1)
  else:
    # next month is too short to have "same date"
    # pick your own heuristic, or re-raise the exception:
    raise
</snippet></ROW><ROW><id>2249998</id><snippet>os.environ['QUERY_STRING']</snippet></ROW><ROW><id>2249998</id><snippet>request.environ['QUERY_STRING']</snippet></ROW><ROW><id>2250371</id><snippet>def format_float_fld(v):
    #return str(v)
    return ('%20.0f' % (v)).strip()
</snippet></ROW><ROW><id>2250371</id><snippet>str(s)</snippet></ROW><ROW><id>2250371</id><snippet>bigint</snippet></ROW><ROW><id>2250371</id><snippet>float</snippet></ROW><ROW><id>2250371</id><snippet> SELECT (EXTRACT(EPOCH FROM TIMESTAMP '2010-02-16 20:38:40.123') * 1000)::bigint;
</snippet></ROW><ROW><id>2250384</id><snippet>o=open("output.txt","w")
for line in open("file"):
    s=line.split(",")
    s[0]="1"
    o.write(','.join(s))
o.close()
</snippet></ROW><ROW><id>2250384</id><snippet>import fileinput
for line in fileinput.FileInput("file",inplace=1):
    s=line.split(",")
    s[0]="1"
    print ','.join(s)
</snippet></ROW><ROW><id>2250418</id><snippet>linalg.lstsq(A,y)</snippet></ROW><ROW><id>2250418</id><snippet>A</snippet></ROW><ROW><id>2250418</id><snippet>linalg.solve(A,y)</snippet></ROW><ROW><id>2250418</id><snippet>A</snippet></ROW><ROW><id>2250502</id><snippet>saxParser.parse( thexml , new DefaultHandler() );
</snippet></ROW><ROW><id>2250502</id><snippet> saxParser.parse( thexml , new MyFreakingHandler() );
</snippet></ROW><ROW><id>2250502</id><snippet>public void startDocument () throws SAXException
public void endElement (String name) throws SAXException
</snippet></ROW><ROW><id>2250553</id><snippet>-ln(f(x)/x</snippet></ROW><ROW><id>2250553</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>2250800</id><snippet>shell&gt; jython
&gt;&gt;&gt; from com.ziclix.python.sql import zxJDBC
&gt;&gt;&gt; (d, v) = "jdbc:mysql://localhost/test", "org.gjt.mm.mysql.Driver"
&gt;&gt;&gt; cnx = zxJDBC.connect(d, None, None, v)
&gt;&gt;&gt; cur = cnx.cursor()
&gt;&gt;&gt; cur.execute("SELECT %s", ('ham',))
..
zxJDBC.Error: error setting index [1] [SQLCode: 0]
Parameter index out of range (1 &gt; number of parameters,
  which is 0). [SQLCode: 0], [SQLState: S1009]
</snippet></ROW><ROW><id>2250800</id><snippet>&gt;&gt;&gt; cur.execute("SELECT '?'", ('ham',)) 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
zxJDBC.Error: error setting index [1] [SQLCode: 0]
Parameter index out of range (1 &gt; number of parameters,
  which is 0). [SQLCode: 0], [SQLState: S1009]
</snippet></ROW><ROW><id>2250800</id><snippet>&gt;&gt;&gt; cur.execute("SELECT ?", ('ham',))  
&gt;&gt;&gt; cur.fetchall()
[(u'ham',)]
</snippet></ROW><ROW><id>2250800</id><snippet>start = "%d,%d,%d,%d,%d" % (int(tempStart.month),
  int(tempStart.day), int(tempStart.year),int(tempStart.hour), 
  int(tempStart.minute))
stop = "%d,%d,%d,%d,%d" % (int(tempEnd.month),
  int(tempEnd.day), int(tempEnd.year), int(tempEnd.hour),
  int(tempEnd.minute))
</snippet></ROW><ROW><id>2250800</id><snippet>select = """SELECT value FROM table_name
  WHERE value_till_dt &gt;= str_to_date(?, '%%m,%%d,%%Y,%%H,%%i')
  AND value_till_dt &lt;= str_to_date(?, '%%m,%%d,%%Y,%%H,%%i')
  AND granularity=?
  ORDER BY value_till_dt
"""
cursor.execute(select, (start,stop,5))
</snippet></ROW><ROW><id>2250841</id><snippet>decimal</snippet></ROW><ROW><id>2250878</id><snippet>def is_sublist(a, b):
    if a == []: return True
    if b == []: return False
    return b[:len(a)] == a or is_sublist(a, b[1:])
</snippet></ROW><ROW><id>2250878</id><snippet>set</snippet></ROW><ROW><id>2250963</id><snippet>convert</snippet></ROW><ROW><id>2251072</id><snippet>configparser</snippet></ROW><ROW><id>2251072</id><snippet>json</snippet></ROW><ROW><id>2251072</id><snippet>pickle</snippet></ROW><ROW><id>2251072</id><snippet>safe_load</snippet></ROW><ROW><id>2251072</id><snippet>datetime</snippet></ROW><ROW><id>2251072</id><snippet>import yaml

sql = """
query         : "SELECT * from cities
WHERE name='Unknown';"
count         : 0
level         : 1
name          : "Check for cities whose name should be null"
suggested_fix : "UPDATE cities SET name=NULL WHERE name='Unknown';"
"""

sql_dict = yaml.safe_load(sql)

print(sql_dict['query'])
</snippet></ROW><ROW><id>2251072</id><snippet>SELECT * from cities WHERE name='Unknown';
</snippet></ROW><ROW><id>2251753</id><snippet>timeout</snippet></ROW><ROW><id>2251753</id><snippet>timeout</snippet></ROW><ROW><id>2251820</id><snippet>import filecmp
compare = filecmp.dircmp( "C:/", "D:/" )
for f in compare.left_only:
    print "C: new", f
for f in compare.right_only:
    print "D: new", f
</snippet></ROW><ROW><id>2252272</id><snippet>TypeError</snippet></ROW><ROW><id>2252272</id><snippet>str</snippet></ROW><ROW><id>2252272</id><snippet>repr</snippet></ROW><ROW><id>2252272</id><snippet>Decimal</snippet></ROW><ROW><id>2252549</id><snippet>super(Picture,self).save()</snippet></ROW><ROW><id>2252549</id><snippet>super</snippet></ROW><ROW><id>2252549</id><snippet>save</snippet></ROW><ROW><id>2252549</id><snippet>def save(self,*args,**kwargs):
    ...
    super(Picture, self).save(*args,**kwargs)
</snippet></ROW><ROW><id>2252549</id><snippet>save</snippet></ROW><ROW><id>2252660</id><snippet>class Test(object):

    def __init__(self):
        self.a = 20
        self.b = 30

if __name__ == '__main__':
    test_instance = Test()
</snippet></ROW><ROW><id>2252660</id><snippet>from class1 import Test

class Test2(Test):

    def e(self):
        print self.a
        print self.b


if __name__ == '__main__':
    test_instance = Test2()
    test_instance.e() # prints 20 and 30
</snippet></ROW><ROW><id>2252660</id><snippet>self</snippet></ROW><ROW><id>2252660</id><snippet>self.variable = value</snippet></ROW><ROW><id>2252660</id><snippet>__init__</snippet></ROW><ROW><id>2252660</id><snippet>Test()</snippet></ROW><ROW><id>2252660</id><snippet>test2()</snippet></ROW><ROW><id>2252773</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>2252773</id><snippet>self.request.body</snippet></ROW><ROW><id>2252773</id><snippet>enctype</snippet></ROW><ROW><id>2252773</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>2252773</id><snippet>enctype="application/octet-stream"</snippet></ROW><ROW><id>2252798</id><snippet>main</snippet></ROW><ROW><id>2252798</id><snippet>stdout</snippet></ROW><ROW><id>2252798</id><snippet>import xxx
results = xxx.main('foo')
# Do something with results
</snippet></ROW><ROW><id>2253038</id><snippet>PythonOption django.root /mysite</snippet></ROW><ROW><id>2253326</id><snippet>&gt;&gt;&gt; a = "11011"
&gt;&gt;&gt; b = "01001"
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def strslice():
    return a[:3] + b[3:]

&gt;&gt;&gt; def lstslice():
    return list(a)[:3] + list(b)[3:]
&gt;&gt;&gt; c = list(a)
&gt;&gt;&gt; d = list(b)
&gt;&gt;&gt; def lsts():
    return c[:3] + d[3:]

&gt;&gt;&gt; timeit.timeit(strslice)
0.5103488475836432
&gt;&gt;&gt; timeit.timeit(lstslice)
2.4350100538824613
&gt;&gt;&gt; timeit.timeit(lsts)
1.0648406858527295
</snippet></ROW><ROW><id>2253824</id><snippet>from HTMLParser import HTMLParser
</snippet></ROW><ROW><id>2253879</id><snippet>params = [3,2,1]
stmt = 'SELECT * FROM table WHERE id IN (%s)' % ','.join('%s' for i in params)
cursor.execute(stmt, params)
</snippet></ROW><ROW><id>2253879</id><snippet>&gt;&gt;&gt; from pg8000 import DBAPI
&gt;&gt;&gt; conn = DBAPI.connect(user="a", database="d", host="localhost", password="p")
&gt;&gt;&gt; c = conn.cursor()
&gt;&gt;&gt; prms = [1,2,3]
&gt;&gt;&gt; stmt = 'SELECT * FROM table WHERE id IN (%s)' % ','.join('%s' for i in prms)
&gt;&gt;&gt; c.execute(stmt,prms)
&gt;&gt;&gt; c.fetchall()
((1, u'myitem1'), (2, u'myitem2'), (3, u'myitem3'))
</snippet></ROW><ROW><id>2254035</id><snippet>ball[i][j]</snippet></ROW><ROW><id>2254035</id><snippet>ball</snippet></ROW><ROW><id>2254035</id><snippet>ball = []    
for i in range(5):
    ball.append([])
    for y in range(5):
        ball[i].append(sphere())
</snippet></ROW><ROW><id>2254452</id><snippet>INSERT INTO site_entry (field1, field2)
(
         SELECT i.field1, i.field2
         FROM (VALUES %s) AS i(field1, field2)
         LEFT JOIN site_entry as existing
                 ON (existing.field1 = i.field1 AND existing.field2 = i.field2)
         WHERE existing.id IS NULL
)
</snippet></ROW><ROW><id>2254452</id><snippet>("field1, field2"), ("field3, field4"), ("field5, field6")</snippet></ROW><ROW><id>2254735</id><snippet>self.frameRect().setTopLeft(Qt.QPoint(event.x, event.y))
</snippet></ROW><ROW><id>2254735</id><snippet>self.frameRect.setTopLeft(Qt.QPoint(event.x, event.y))
</snippet></ROW><ROW><id>2254871</id><snippet>print</snippet></ROW><ROW><id>2254871</id><snippet>sys.stdout</snippet></ROW><ROW><id>2255217</id><snippet>f = t.fileobj.__class__(newfn, 'w')
</snippet></ROW><ROW><id>2255466</id><snippet># Lets rename:    
&gt;&gt;&gt; procname.setprocname('My super name')    

# Lets check. Press Ctrl+Z       
user@comp:~/procname$ ps

    PID TTY TIME CMD 

13016 pts/2 00:00:00 bash

13128 pts/2 00:00:00 My super name &lt;-- it's here
</snippet></ROW><ROW><id>2255466</id><snippet>prctl</snippet></ROW><ROW><id>2255466</id><snippet>PR_SET_NAME</snippet></ROW><ROW><id>2255517</id><snippet>Event</snippet></ROW><ROW><id>2255517</id><snippet>class Event:
  # stuff here

  @property
  def status(self):
     # do the same thing here as in your status function
     return status
</snippet></ROW><ROW><id>2255517</id><snippet>{{ event.status }}
</snippet></ROW><ROW><id>2255567</id><snippet>app.sub2.sub2</snippet></ROW><ROW><id>2255567</id><snippet>app</snippet></ROW><ROW><id>2255636</id><snippet>import random

_memomask = {}

def hash_function(n):
  mask = _memomask.get(n)
  if mask is None:
    random.seed(n)
    mask = _memomask[n] = random.getrandbits(32)
  def myhash(x):
    return hash(x) ^ mask
  return myhash
</snippet></ROW><ROW><id>2255892</id><snippet>**</snippet></ROW><ROW><id>2255892</id><snippet>**kwargs</snippet></ROW><ROW><id>2255892</id><snippet>*args</snippet></ROW><ROW><id>2256068</id><snippet>sshfile</snippet></ROW><ROW><id>2256068</id><snippet>sshfile</snippet></ROW><ROW><id>2256068</id><snippet>class sshfile:
    pass

def a():
    f = sshfile() # UnboundLocalError here
    sshfile = 0

a()
</snippet></ROW><ROW><id>2256078</id><snippet>ORDER BY</snippet></ROW><ROW><id>2256078</id><snippet>create table artists (
id integer not null primary key,
name char(1) not null);

insert into artists
values
    (8, 'a'),
    (1, 'b'), 
    (2, 'c'),
    (15, 'd'),
    (14, 'e'),
    (3,  'f'),
    (13, 'g');

select *
from artists
where id in (8, 1, 2, 15, 14, 3, 13)
order by
    id = 8 desc,
    id = 1 desc,
    id = 2 desc,
    id = 15 desc,
    id = 14 desc,
    id = 3 desc,
    id = 13 desc;
</snippet></ROW><ROW><id>2256078</id><snippet>select
    a.*
from
    artists a,
    rankings r
where
    a.id = r.artist_id
order by
    r.score desc;
</snippet></ROW><ROW><id>2256132</id><snippet>__init__.py</snippet></ROW><ROW><id>2256132</id><snippet>import Models
</snippet></ROW><ROW><id>2256132</id><snippet>Models.my_model.MyClassName
</snippet></ROW><ROW><id>2256132</id><snippet>from</snippet></ROW><ROW><id>2256132</id><snippet>from Models import my_model
</snippet></ROW><ROW><id>2256132</id><snippet>my_model.MyClassName
</snippet></ROW><ROW><id>2256132</id><snippet>from Models.my_model import my_method_name
my_method_name()
</snippet></ROW><ROW><id>2256154</id><snippet>class User(Base):
    __tablename__='users'
    id = Column(Integer, primary_key=True)
    name = Column(String(32))
    posts = relation("UserPost", backref="poster")

class UserPost(Base):
    __tablename__='posts'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    subject = Column(String(32))
</snippet></ROW><ROW><id>2257148</id><snippet>&gt;&gt;&gt; l = [1, 2, 37, 32, 4]
&gt;&gt;&gt; d = dict = {
...     32: 'Megumi', 
...     1: 'Ai',
...     2: 'Risa',
...     3: 'Eri', 
...     4: 'Sayumi', 
...     37: 'Mai'
... }
</snippet></ROW><ROW><id>2257148</id><snippet>&gt;&gt;&gt; s = list((i, d.get(i)) for i in L)
&gt;&gt;&gt; print s
[(1, 'Ai'), (2, 'Risa'), (37, 'Mai'), (32, 'Megumi'), (4, 'Sayumi')]
</snippet></ROW><ROW><id>2257148</id><snippet>&gt;&gt;&gt; s = list(d.get(i) for i in L)
&gt;&gt;&gt; print s
['Ai', 'Risa', 'Mai', 'Megumi', 'Sayumi']
</snippet></ROW><ROW><id>2257350</id><snippet>soffice -headless -accept="socket,host=127.0.0.1,port=8100;urp;" -nofirststartwizard
</snippet></ROW><ROW><id>2257394</id><snippet>from myapp import models

...

models.SideNames = None
</snippet></ROW><ROW><id>2257394</id><snippet>t.sidenames_set.all()</snippet></ROW><ROW><id>2257449</id><snippet>''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(N))
</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for x in range(size))
...
&gt;&gt;&gt; id_generator()
'G5G74W'
&gt;&gt;&gt; id_generator(3, "6793YUIO")
'Y3U'
</snippet></ROW><ROW><id>2257449</id><snippet>string</snippet></ROW><ROW><id>2257449</id><snippet>random</snippet></ROW><ROW><id>2257449</id><snippet>string.ascii_uppercase + string.digits</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
&gt;&gt;&gt; ['elem' for x in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']
</snippet></ROW><ROW><id>2257449</id><snippet>[</snippet></ROW><ROW><id>2257449</id><snippet>id_generator</snippet></ROW><ROW><id>2257449</id><snippet>elem</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; random.choice("abcde")
'a'
&gt;&gt;&gt; random.choice("abcde")
'd'
&gt;&gt;&gt; random.choice("abcde")
'b'
</snippet></ROW><ROW><id>2257449</id><snippet>random.choice(chars) for x in range(size)</snippet></ROW><ROW><id>2257449</id><snippet>size</snippet></ROW><ROW><id>2257449</id><snippet>chars</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; [random.choice('abcde') for x in range(3)]
['a', 'b', 'b']
&gt;&gt;&gt; [random.choice('abcde') for x in range(3)]
['e', 'b', 'e']
&gt;&gt;&gt; [random.choice('abcde') for x in range(3)]
['d', 'a', 'c']
</snippet></ROW><ROW><id>2257449</id><snippet>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])
'abb'
&gt;&gt;&gt; [random.choice('abcde') for x in range(3)]
['d', 'c', 'b']
&gt;&gt;&gt; ''.join(random.choice('abcde') for x in range(3))
'dac'
</snippet></ROW><ROW><id>2257520</id><snippet>import wx

class MyPanel(wx.Panel):
    """ class MyPanel creates a panel to draw on, inherits wx.Panel """
    def __init__(self, parent, id):
        # create a panel
        wx.Panel.__init__(self, parent, id)
        self.SetBackgroundColour("white")
        self.Bind(wx.EVT_PAINT, self.OnPaint)

    def OnPaint(self, evt):
        """set up the device context (DC) for painting"""
        self.dc = wx.PaintDC(self)
        self.dc.BeginDrawing()
        self.dc.SetPen(wx.Pen("grey",style=wx.TRANSPARENT))
        self.dc.SetBrush(wx.Brush("grey", wx.SOLID))
        # set x, y, w, h for rectangle
        self.dc.DrawRectangle(250,250,50, 50)
        self.dc.EndDrawing()
        del self.dc

app = wx.PySimpleApp()
# create a window/frame, no parent, -1 is default ID
frame = wx.Frame(None, -1, "Drawing A Rectangle...", size = (500, 500))
# call the derived class, -1 is default ID
MyPanel(frame,-1)
# show the frame
frame.Show(True)
# start the event loop
app.MainLoop()
</snippet></ROW><ROW><id>2257689</id><snippet>with open("mytextfile.txt", "rtU") as f:
  for line in f:
    # Now you have one line of text in the variable "line" and can
    # iterate over its characters like so:
    for ch in line:
      ... # do something here
</snippet></ROW><ROW><id>2257689</id><snippet>line</snippet></ROW><ROW><id>2257689</id><snippet>line = line.rstrip()</snippet></ROW><ROW><id>2257814</id><snippet>tokenMapping = {"&amp;&amp;" : "and"}

for token in source file: # &lt;-- pseudocode
    translatedToken = tokenMapping[token] if token in tokenMapping else "transliteration unknown"
</snippet></ROW><ROW><id>2257814</id><snippet>get</snippet></ROW><ROW><id>2257814</id><snippet>    translatedToken = tokenMapping.get(token, "transliteration unknown")
</snippet></ROW><ROW><id>2257966</id><snippet>for ch in f:                                                  \
  ( translatedToken = english_hindi_dict[ch] )                \
    if (ch in english_hindi_dict) else (translatedToken = ch)
                                                        ↑

SyntaxError: invalid syntax
</snippet></ROW><ROW><id>2257966</id><snippet>for ch in f:
  if ch in english_hindi_dict:
    translatedToken = english_hindi_dict[ch]
  else:
    translatedToken = ch
</snippet></ROW><ROW><id>2257966</id><snippet>for ch in f:
  translatedToken = english_hindi_dict[ch] if ch in english_hindi_dict else ch
</snippet></ROW><ROW><id>2257966</id><snippet>translated = str(english_hindi_dict.get(ch, ch) for ch in f)</snippet></ROW><ROW><id>2257967</id><snippet>class OtherEntity(db.Model):
# ... some properties

@classmethod
def update_descendants(cls, ancestor, with_transaction=True):
  if with_transaction:
    return db.run_in_transaction(cls.update_descendants, ancestor,
                                 with_transaction=False)

  # Now I can assume I am in a transaction one way or another...
  descendants = cls.all().ancestor(ancestor).fetch(10)
  for descendant in descendants:
    descendant.update_yourself(ancestor.count)
  return db.put(descendants)
</snippet></ROW><ROW><id>2257967</id><snippet>put</snippet></ROW><ROW><id>2258055</id><snippet>import urllib2 
import urllib
import cookielib
import re

def write_f_to_f(fname,f):
    f1 = open(fname,"w")
    f1.write(f.read())
    f1.close()

def gen_req(url,referer=None):
    req = urllib2.Request(url)
    return req



myjar = cookielib.FileCookieJar("cookies.txt");
cookieHandler = urllib2.HTTPCookieProcessor(myjar)

password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
tlurl="http://127.0.0.1:8081/webgoat/attack"

password_mgr.add_password(None,tlurl,user="guest",passwd="guest")
find = "Blind Numeric."

authhandler = urllib2.HTTPBasicAuthHandler(password_mgr)
opener = urllib2.build_opener(authhandler,cookieHandler)

url = "http://127.0.0.1:8081/webgoat/attack"
req = gen_req(url,url)
f = opener.open(req)# Setup session and login.

params = urllib.urlencode({'start':'Start WebGoat'})
url = "http://127.0.0.1:8081/webgoat/attack"
req = gen_req(url,url)
f = opener.open(req,params) # Submit the "Start" form
dat = f.read() # Get the menu html from the firstpage.
f.close()


m = re.search("attack\?Screen=(\d+).*%s"%find,dat) # Try to find screen id for what i want
if not m is None:
    scr= m.group(1)
    qs = urllib.urlencode( {'Screen':scr, 'menu':1200 } )
    ourl = url
    url = "http://127.0.0.1:8081/webgoat/attack?%s"%qs
    req = gen_req(url,ourl)
    f = opener.open(req)
    write_f_to_f("f4.html",f)
    f.close()
    print "Found the page and saved it to f4.html"
else:
    print "Didnt find screen id for %s"%find
</snippet></ROW><ROW><id>2258137</id><snippet>def button1():
        text.insert(INSERT, text1.get("1.0", END))
</snippet></ROW><ROW><id>2258137</id><snippet>import Tkinter
text = Tkinter.Text()
</snippet></ROW><ROW><id>2258137</id><snippet>import Tkinter as tk
text = tk.Text()
</snippet></ROW><ROW><id>2258307</id><snippet>'पत्र'</snippet></ROW><ROW><id>2258307</id><snippet>ऄ</snippet></ROW><ROW><id>2258307</id><snippet>u'a'</snippet></ROW><ROW><id>2258307</id><snippet>output_text = input_text.translate(thedict)</snippet></ROW><ROW><id>2258313</id><snippet>host.toggle_axisline(False)
</snippet></ROW><ROW><id>2258313</id><snippet>from mpl_toolkits.axes_grid.parasite_axes import SubplotHost
import matplotlib.pyplot as plt

fig = plt.figure(1)

host = SubplotHost(fig, 111)
fig.add_subplot(host)

par = host.twinx()

host.set_xlabel("Distance")
host.set_ylabel("Density")
par.set_ylabel("Temperature")

p1, = host.plot([0, 1, 2], [0, 1, 2], label="Density")
p2, = par.plot([0, 1, 2], [0, 3, 2], label="Temperature")

host.axis["left"].label.set_color(p1.get_color())
par.axis["right"].label.set_color(p2.get_color())

host.toggle_axisline(False)
host.grid(True)

host.legend()

plt.show()
</snippet></ROW><ROW><id>2258362</id><snippet>os.fstat</snippet></ROW><ROW><id>2258420</id><snippet>from pylons import config

def my_cache(*args, **kwargs):
    if config["debug"]:
        decorate = lambda f: f
    else: 
        decorate = beaker_cache(*args, **kwargs)

    return decorate
</snippet></ROW><ROW><id>2258570</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>2258570</id><snippet>logRequests</snippet></ROW><ROW><id>2258570</id><snippet>server = SimpleXMLRPCServer(("localhost", 8000), logRequests = False)
</snippet></ROW><ROW><id>2258570</id><snippet>BaseServer</snippet></ROW><ROW><id>2258570</id><snippet>def handle_error(self, request, client_address):
    """Handle an error gracefully.  May be overridden.

    The default is to print a traceback and continue.

    """
    print '-'*40
    print 'Exception happened during processing of request from',
    print client_address
    import traceback
    traceback.print_exc() # XXX But this goes to stderr!
    print '-'*40
</snippet></ROW><ROW><id>2258570</id><snippet>&amp;2&gt;1</snippet></ROW><ROW><id>2258744</id><snippet>content_css</snippet></ROW><ROW><id>2258744</id><snippet>TINYMCE_DEFAULT_CONFIG</snippet></ROW><ROW><id>2258744</id><snippet>TINYMCE_DEFAULT_CONFIG = {
    # your other settings
    'content_css': '/media/css/main.css',
}
</snippet></ROW><ROW><id>2258826</id><snippet>def foo(bar, baz):
    """Function foo()

* Summary:
    Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them.

* Developers:
    When you change foo(), be sure you don't add any global variables, and don't forget to run the unit tests.

* Testers:
    When you test foo, be sure to try negative values for baz.
"""
    pass # code would go here
</snippet></ROW><ROW><id>2258826</id><snippet>s = foo.__doc__  # s now refers to the docstring

lst = s.split("\n* ")
section = [section for section in lst if section.startswith("Developers")][0]
print(section) # prints the "Developers" section
</snippet></ROW><ROW><id>2258826</id><snippet>def foo(bar, baz):
    """Function foo()

Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."
    pass # code goes here

doc_developers["foo"] = "When you change foo(), be sure you don't add any global variables, and don't forget to run the unit tests."

doc_testers["foo"] = "When you change foo(), be sure you don't add any global variables, and don't forget to run the unit tests."
</snippet></ROW><ROW><id>2258826</id><snippet>def</snippet></ROW><ROW><id>2258826</id><snippet>def doc_dict = {} # this will be a dict of dicts
doc_dict["developers"] = {}
doc_dict["testers"] = {}

def doc_update(fn, d):
    name = fn.__name__
    for key, value in d.items():
        doc_dict[key][name] = value

def foo(bar, baz):
    """Function foo()

Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."
    pass # code goes here

d = { "developers": "When you change foo(), be sure you don't add any global variables, and don't forget to run the unit tests.",
"testers": " When you test foo, be sure to try negative values for baz."}

doc_update(foo, d)
</snippet></ROW><ROW><id>2258968</id><snippet>__import__</snippet></ROW><ROW><id>2258968</id><snippet>None</snippet></ROW><ROW><id>2258968</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['pwd'] = None
&gt;&gt;&gt; import pwd
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named pwd
</snippet></ROW><ROW><id>2258992</id><snippet>ImageFile.ImageFile</snippet></ROW><ROW><id>2258992</id><snippet>ImageFile.ImageFile</snippet></ROW><ROW><id>2258992</id><snippet>_open()</snippet></ROW><ROW><id>2258992</id><snippet>self.fp</snippet></ROW><ROW><id>2258992</id><snippet>_open()</snippet></ROW><ROW><id>2259250</id><snippet>&gt;&gt;&gt; print "%r, %r" % (True, False)
True, False
</snippet></ROW><ROW><id>2259250</id><snippet>%r</snippet></ROW><ROW><id>2259250</id><snippet>__repr__</snippet></ROW><ROW><id>2259250</id><snippet>%s</snippet></ROW><ROW><id>2259250</id><snippet>str</snippet></ROW><ROW><id>2259252</id><snippet>string.py</snippet></ROW><ROW><id>2259252</id><snippet>string.pyc</snippet></ROW><ROW><id>2259387</id><snippet>os.path.isfile(path)</snippet></ROW><ROW><id>2259387</id><snippet>True</snippet></ROW><ROW><id>2259387</id><snippet>islink()</snippet></ROW><ROW><id>2259387</id><snippet>isfile()</snippet></ROW><ROW><id>2259516</id><snippet>import sys, os

print 'sys.argv[0] =', sys.argv[0]             1
pathname = os.path.dirname(sys.argv[0])        2
print 'path =', pathname
print 'full path =', os.path.abspath(pathname)
</snippet></ROW><ROW><id>2259632</id><snippet>{{ form.as_something }}</snippet></ROW><ROW><id>2259711</id><snippet>from datetime import date

def calculate_age(born):
    today = date.today()
    try: 
        birthday = born.replace(year=today.year)
    except ValueError: # raised when birth date is February 29 and the current year is not a leap year
        birthday = born.replace(year=today.year, day=born.day-1)
    if birthday &gt; today:
        return today.year - born.year - 1
    else:
        return today.year - born.year
</snippet></ROW><ROW><id>2259754</id><snippet>Template</snippet></ROW><ROW><id>2259766</id><snippet>main</snippet></ROW><ROW><id>2259766</id><snippet>app.yaml</snippet></ROW><ROW><id>2259766</id><snippet>app.yaml</snippet></ROW><ROW><id>2259766</id><snippet>.py</snippet></ROW><ROW><id>2259766</id><snippet>main</snippet></ROW><ROW><id>2259766</id><snippet>main</snippet></ROW><ROW><id>2259766</id><snippet>app.yaml</snippet></ROW><ROW><id>2259769</id><snippet>timeit.Timer.repeat(testn, cycles)</snippet></ROW><ROW><id>2259769</id><snippet>testn</snippet></ROW><ROW><id>2259769</id><snippet>cycles</snippet></ROW><ROW><id>2259769</id><snippet>hashlookup:          0.13s     100%
lookup:              0.15s     109%
stringcount:         0.29s     220%
unrolled_bitwise:    0.36s     272%
log_e:               0.60s     450%
bitcounter:          0.64s     479%
log_2:               0.69s     515%
ilog:                0.81s     609%
bitwise:             1.10s     821%
olgn:                1.42s    1065%
</snippet></ROW><ROW><id>2259769</id><snippet>hashlookup:          0.11s     100%
unrolled_bitwise:    0.26s     229%
log_e:               0.30s     268%
stringcount:         0.30s     270%
log_2:               0.34s     301%
ilog:                0.41s     363%
bitwise:             0.87s     778%
olgn:                1.02s     912%
bitcounter:          1.42s    1264%
</snippet></ROW><ROW><id>2259769</id><snippet>hashlookup:     0.01s     100%
stringcount:    0.03s     264%
log_e:          0.04s     315%
log_2:          0.04s     383%
olgn:           0.18s    1585%
bitcounter:     1.41s   12393%
</snippet></ROW><ROW><id>2259769</id><snippet>log_e:          0.00s     100%
log_2:          0.01s     118%
stringcount:    0.02s     354%
olgn:           0.03s     707%
bitcounter:     1.73s   37695%
</snippet></ROW><ROW><id>2259769</id><snippet>import math, sys

def stringcount(v):
    """mac"""    
    return len(bin(v)) - 3

def log_2(v):
    """mac"""    
    return int(round(math.log(v, 2), 0)) # 2**101 generates 100.999999999

def log_e(v):
    """bp on mac"""    
    return int(round(math.log(v)/0.69314718055994529, 0))  # 0.69 == log(2)

def bitcounter(v):
    """John Y on mac"""
    r = 0
    while v &gt; 1 :
        v &gt;&gt;= 1
        r += 1
    return r

def olgn(n) :
    """outis"""
    if n &lt; 1:
        return -1
    low = 0
    high = sys.getsizeof(n)*8 # not the best upper-bound guesstimate, but...
    while True:
        mid = (low+high)//2
        i = n &gt;&gt; mid
        if i == 1:
            return mid
        if i == 0:
            high = mid-1
        else:
            low = mid+1

def hashlookup(v):
    """mac on brone -- limit: v &lt; 2**131"""
#    def prepareTable(max_log2=130) :
#        hash_table = {}
#        for p in range(1, max_log2) :
#            hash_table[2**p] = p
#        return hash_table

    global hash_table
    return hash_table[v] 

def lookup(v):
    """brone -- limit: v &lt; 2**11"""
#    def prepareTable(max_log2=10) :
#        log2s_table=[0]*((1&lt;&lt;max_log2)+1)
#        for i in range(max_log2+1):
#            log2s_table[1&lt;&lt;i]=i
#        return tuple(log2s_table)

    global log2s_table
    return log2s_table[v]

def bitwise(v):
    """Mark Byers -- limit: v &lt; 2**32"""
    b = (0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000)
    S = (1, 2, 4, 8, 16)
    r = 0
    for i in range(4, -1, -1) :
        if (v &amp; b[i]) :
            v &gt;&gt;= S[i];
            r |= S[i];
    return r

def unrolled_bitwise(v):
    """x4u on Mark Byers -- limit:   v &lt; 2**33"""
    r = 0;
    if v &gt; 0xffff : 
        v &gt;&gt;= 16
        r = 16;
    if v &gt; 0x00ff :
        v &gt;&gt;=  8
        r += 8;
    if v &gt; 0x000f :
        v &gt;&gt;=  4
        r += 4;
    if v &gt; 0x0003 : 
        v &gt;&gt;=  2
        r += 2;
    return r + (v &gt;&gt; 1)

def ilog(v):
    """Gregory Maxwell - (Original code: B. Terriberry) -- limit: v &lt; 2**32"""
    ret = 1
    m = (not not v &amp; 0xFFFF0000) &lt;&lt; 4;
    v &gt;&gt;= m;
    ret |= m;
    m = (not not v &amp; 0xFF00) &lt;&lt; 3;
    v &gt;&gt;= m;
    ret |= m;
    m = (not not v &amp; 0xF0) &lt;&lt; 2;
    v &gt;&gt;= m;
    ret |= m;
    m = (not not v &amp; 0xC) &lt;&lt; 1;
    v &gt;&gt;= m;
    ret |= m;
    ret += (not not v &amp; 0x2);
    return ret - 1;


# following table is equal to "return hashlookup.prepareTable()" 
hash_table = {...} # numbers have been cut out to avoid cluttering the post

# following table is equal to "return lookup.prepareTable()" - cached for speed
log2s_table = (...) # numbers have been cut out to avoid cluttering the post
</snippet></ROW><ROW><id>2259785</id><snippet>auth</snippet></ROW><ROW><id>2259785</id><snippet>auth</snippet></ROW><ROW><id>2259785</id><snippet>/admin</snippet></ROW><ROW><id>2259785</id><snippet>/login</snippet></ROW><ROW><id>2259974</id><snippet>menubar = QtGui.MenuBar()
</snippet></ROW><ROW><id>2259980</id><snippet>types = [col.type for col in q.columns]
</snippet></ROW><ROW><id>2259980</id><snippet>types = [col.type for col in res.context.compiled.statement.columns]
</snippet></ROW><ROW><id>2259980</id><snippet>types = [elem[1] for elem in res.cursor.description]
</snippet></ROW><ROW><id>2259980</id><snippet>ResultProxy</snippet></ROW><ROW><id>2260082</id><snippet>self.total_sold</snippet></ROW><ROW><id>2260082</id><snippet>self.tax_rate</snippet></ROW><ROW><id>2260082</id><snippet>Item.tax_rate</snippet></ROW><ROW><id>2260082</id><snippet>self.</snippet></ROW><ROW><id>2260117</id><snippet>import re
print re.findall(r'\bv\w+', thesentence)
</snippet></ROW><ROW><id>2260117</id><snippet>'v'</snippet></ROW><ROW><id>2260117</id><snippet>split</snippet></ROW><ROW><id>2260117</id><snippet>re</snippet></ROW><ROW><id>2260156</id><snippet>replacer</snippet></ROW><ROW><id>2260194</id><snippet>wx.EVT_SIZE</snippet></ROW><ROW><id>2260194</id><snippet>wx.FULL_REPAINT_ON_RESIZE</snippet></ROW><ROW><id>2260291</id><snippet>render_uploads</snippet></ROW><ROW><id>2260291</id><snippet>return markdown(render_uploads(markup))
</snippet></ROW><ROW><id>2260355</id><snippet>import sys
import Tkinter

class App:
    def __init__(self, master):
        fr = Tkinter.Frame(master, height=42, width=42)
        fr.pack()
        self.txt_ent = Tkinter.Entry(fr)
        self.txt_ent.pack()
        self.clear_button = Tkinter.Button(fr, text="clear text", command=self.clear_text)
        self.clear_button.pack()  

    def clear_text(self):
        self.perform_random_action()
        self.txt_ent.delete(0, Tkinter.END)

    def perform_random_action():
        # Do random stuff

def main():
    main_win = Tkinter.Tk()
    app = App(main_win)
    main_win.mainloop()
    return 0

if __name__ == "__main__":
    sys.exit(main())
</snippet></ROW><ROW><id>2260366</id><snippet>import poplib

#connect to server
mailserver = poplib.POP3_SSL('pop.gmail.com')
mailserver.user('recent:YOURUSERNAME') #use 'recent mode'
mailserver.pass_('YOURPASSWORD') #consider not storing in plaintext!

#newest email has the highest message number
numMessages = len(mailserver.list()[1])

#confirm this is the right one, can comment these out later
newestEmail = mailserver.retr(numMessages)
print newestEmail

#most servers will not delete until you quit
mailserver.dele(numMessages)
mailserver.quit()
</snippet></ROW><ROW><id>2260510</id><snippet>env.AlwaysBuild(env.Alias('convert_all', pix_conversions))
</snippet></ROW><ROW><id>2260510</id><snippet>ConvToPNG = Builder(action = 'convert $SOURCE $TARGET',
        suffix = '.png',
        src_suffix = '.jpg')
env['BUILDERS']['ConvToPNG'] = ConvToPNG
pix_conversions = [env.ConvToPNG(jpg_src) for jpg_src in Glob('pix/img_*.jpg')]
env.AlwaysBuild(env.Alias('convert_all', pix_conversions))
</snippet></ROW><ROW><id>2260630</id><snippet>x = 3
y = 4
def f(x): return (x&lt;4)
</snippet></ROW><ROW><id>2260630</id><snippet>import sys

# somehow modnames should be a list of strings that are the names of config files
#
# you can do this more dynamically depending on what you're doing                                                                                                     
modnames = ['bar']

for modname in modnames:
  exec('import %s' % modname)

for modname in modnames:
  mod = sys.modules[modname]
  for k in mod.__dict__:
    if k[:2] != '__':
      print modname, k, mod.__dict__[k]
</snippet></ROW><ROW><id>2260630</id><snippet>bar f &lt;function f at 0x7f2354eb4cf8&gt;
bar x 3
bar y 4
</snippet></ROW><ROW><id>2260745</id><snippet>python manage.py runserver 0.0.0.0:8000
</snippet></ROW><ROW><id>2260745</id><snippet>8000</snippet></ROW><ROW><id>2260745</id><snippet>80</snippet></ROW><ROW><id>2260745</id><snippet>sudo python manage.py runserver 0.0.0.0:80</snippet></ROW><ROW><id>2260840</id><snippet>u'm:/\u0411\u043b\u043e\u043a\u043d\u043e\u0442/home.tdl'</snippet></ROW><ROW><id>2261025</id><snippet>    @objc.IBAction
    def okSelected(self, sender):
</snippet></ROW><ROW><id>2261025</id><snippet>    @objc.IBAction
    def okSelected_(self, sender):
</snippet></ROW><ROW><id>2261082</id><snippet>root.geometry("500x500")
</snippet></ROW><ROW><id>2261171</id><snippet>Gadget</snippet></ROW><ROW><id>2261171</id><snippet>Element</snippet></ROW><ROW><id>2261219</id><snippet>def owns_console():
    wnd = GetConsoleWindow()
    if wnd is None:
        return False
    return GetCurrentProcessId() == GetWindowThreadProcessId(wnd)
</snippet></ROW><ROW><id>2261282</id><snippet># create the main sections of the layout, 
# and lay them out
top = Frame(root)
bottom = Frame(root)
top.pack(side=TOP)
bottom.pack(side=BOTTOM, fill=BOTH, expand=True)

# create the widgets for the top part of the GUI,
# and lay them out
b = Button(root, text="Enter", width=10, height=2, command=button1)
c = Button(root, text="Clear", width=10, height=2, command=clear)
b.pack(in_=top, side=LEFT)
c.pack(in_=top, side=LEFT)

# create the widgets for the bottom part of the GUI,
# and lay them out
text = Text(root, width=35, height=15)
scrollbar = Scrollbar(root)
scrollbar.config(command=text.yview)
text.config(yscrollcommand=scrollbar.set)
scrollbar.pack(in_=bottom, side=RIGHT, fill=Y)
text.pack(in_=bottom, side=LEFT, fill=BOTH, expand=True)
</snippet></ROW><ROW><id>2261282</id><snippet>b = Button(root, text="Enter", width=10, height=2, command=button1)
c = Button(root, text="Clear", width=10, height=2, command=clear)
b.grid(row=0,column=0, sticky=W)
c.grid(row=0,column=1, sticky=W)

textframe = Frame(root)
textframe.grid(in_=root, row=1, column=0, columnspan=3, sticky=NSEW)
root.columnconfigure(0, weight=1)
root.rowconfigure(1, weight=1)

text = Text(root, width=35, height=15)
scrollbar = Scrollbar(root)
scrollbar.config(command=text.yview)
text.config(yscrollcommand=scrollbar.set)
scrollbar.pack(in_=textframe, side=RIGHT, fill=Y)
text.pack(in_=textframe, side=LEFT, fill=BOTH, expand=True)
</snippet></ROW><ROW><id>2261602</id><snippet>str()</snippet></ROW><ROW><id>2261602</id><snippet>eval()</snippet></ROW><ROW><id>2261602</id><snippet>repr()</snippet></ROW><ROW><id>2261602</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>2261973</id><snippet>import httplib
import urlparse

def getUrl(url):
    maxattempts = 10
    turl = url
    while (maxattempts  &gt;  0) :               
        host,path,query = urlparse.urlsplit(turl)[1:4]
        if  len(host.strip()) == 0 :
            return None
        try: 
            connection = httplib.HTTPConnection(host,timeout=10)
            connection.request("GET", path+'?'+query)
            resp = connection.getresponse()
        except:                         
            return None                     
        maxattempts = maxattempts - 1
        if (resp.status &gt;= 300) and (resp.status &lt;= 399):
            turl = resp.getheader('location')
        elif (resp.status &gt;= 200) and (resp.status &lt;= 299) :
            return turl
        else :
            #some problem with this url
            return None               
    return None
print getUrl('http://bit.ly/cDdh1c')
</snippet></ROW><ROW><id>2261977</id><snippet>ssl</snippet></ROW><ROW><id>2261977</id><snippet>setup.py build -cmingw32</snippet></ROW><ROW><id>2261977</id><snippet>-cmingw32</snippet></ROW><ROW><id>2261977</id><snippet>setup.py install</snippet></ROW><ROW><id>2261977</id><snippet>ssl</snippet></ROW><ROW><id>2262152</id><snippet>Blue =  RGBint &amp; 255
Green = (RGBint &gt;&gt; 8) &amp; 255
Red =   (RGBint &gt;&gt; 16) &amp; 255
</snippet></ROW><ROW><id>2262162</id><snippet>while 1:</snippet></ROW><ROW><id>2262162</id><snippet>True = 1</snippet></ROW><ROW><id>2262162</id><snippet>True</snippet></ROW><ROW><id>2262162</id><snippet>True</snippet></ROW><ROW><id>2262162</id><snippet>1</snippet></ROW><ROW><id>2262162</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def while_1():
...     while 1:
...         pass
...
&gt;&gt;&gt; def while_true():
...     while True:
...         pass
...
&gt;&gt;&gt; dis.dis(while_1)
  2           0 SETUP_LOOP               5 (to 8)


  3     &gt;&gt;    3 JUMP_ABSOLUTE            3
              6 POP_TOP
              7 POP_BLOCK
        &gt;&gt;    8 LOAD_CONST               0 (None)
             11 RETURN_VALUE
&gt;&gt;&gt; dis.dis(while_true)
  2           0 SETUP_LOOP              12 (to 15)
        &gt;&gt;    3 LOAD_GLOBAL              0 (True)
              6 JUMP_IF_FALSE            4 (to 13)
              9 POP_TOP


  3          10 JUMP_ABSOLUTE            3
        &gt;&gt;   13 POP_TOP
             14 POP_BLOCK
        &gt;&gt;   15 LOAD_CONST               0 (None)
             18 RETURN_VALUE
</snippet></ROW><ROW><id>2262162</id><snippet>while True:</snippet></ROW><ROW><id>2262162</id><snippet>while 1:</snippet></ROW><ROW><id>2262200</id><snippet>Entry</snippet></ROW><ROW><id>2262200</id><snippet>EntryCompletion</snippet></ROW><ROW><id>2262200</id><snippet>ComboBoxEntry</snippet></ROW><ROW><id>2262200</id><snippet># simplified example from the tutorial
import gtk

urls = [
    'http://www.google.com',
    'http://www.google.com/android',
    'http://www.greatstuff.com',
    'http://www.facebook.com',
    ]
liststore = gtk.ListStore(str)
for s in urls:
    liststore.append([s])

completion = gtk.EntryCompletion()
completion.set_model(liststore)
completion.set_text_column(0)

entry = gtk.Entry()
entry.set_completion(completion)

# boilerplate
window = gtk.Window()
window.add(entry)

window.connect('destroy', lambda w: gtk.main_quit())
window.show_all()
gtk.main()
</snippet></ROW><ROW><id>2262200</id><snippet>def match_anywhere(completion, entrystr, iter, data):
    modelstr = completion.get_model()[iter][0]
    return entrystr in modelstr
completion.set_match_func(match_anywhere, None)
</snippet></ROW><ROW><id>2262234</id><snippet>(T)~(T)0</snippet></ROW><ROW><id>2262234</id><snippet>def count_set_bits(v, N=128):
    mask = (1 &lt;&lt; N) - 1

    v = v - ((v &gt;&gt; 1) &amp; mask//3)
    v = (v &amp; mask//15*3) + ((v &gt;&gt; 2) &amp; mask//15*3)
    v = (v + (v &gt;&gt; 4)) &amp; mask//255*15
    return (mask &amp; v * (mask//255)) &gt;&gt; (N//8 - 1) * 8
</snippet></ROW><ROW><id>2262424</id><snippet>def ignore_exception(IgnoreException=Exception,DefaultVal=None):
    """ Decorator for ignoring exception from a function
    e.g.   @ignore_exception(DivideByZero)
    e.g.2. ignore_exception(DivideByZero)(Divide)(2/0)
    """
    def dec(function):
        def _dec(*args, **kwargs):
            try:
                return function(*args, **kwargs)
            except IgnoreException:
                return DefaultVal
        return _dec
    return dec
</snippet></ROW><ROW><id>2262424</id><snippet>sint = ignore_exception(ValueError)(int)
print sint("Hello World") # prints none
print sint("1340") # prints 1340
</snippet></ROW><ROW><id>2262586</id><snippet>from src import module_name 
</snippet></ROW><ROW><id>2262609</id><snippet>characters</snippet></ROW><ROW><id>2262609</id><snippet>def startElement(self, name, attrs):
    self.map[name] = ''
    self.tag = name

def characters(self, content):
    self.map[self.tag] += content

def endElement(self, name):
    print self.map[name]
</snippet></ROW><ROW><id>2262650</id><snippet>class MyCPPException : public std::exception {...}
</snippet></ROW><ROW><id>2262650</id><snippet>class_&lt;MyCPPException&gt; myCPPExceptionClass("MyCPPException"...);
PyObject *myCPPExceptionType=myCPPExceptionClass.ptr();
register_exception_translator&lt;MyCPPException&gt;(&amp;translateFunc);
</snippet></ROW><ROW><id>2262650</id><snippet>void translate(MyCPPException const &amp;e)
{
    PyErr_SetObject(myCPPExceptionType, boost::python::object(e).ptr());
}
</snippet></ROW><ROW><id>2262650</id><snippet>#include &lt;boost/python.hpp&gt;
#include &lt;assert.h&gt;
#include &lt;iostream&gt;

class MyCPPException : public std::exception
{
private:
  std::string message;
  std::string extraData;
public:
  MyCPPException(std::string message, std::string extraData)
  {
    this-&gt;message = message;
    this-&gt;extraData = extraData;
  }
  const char *what() const throw()
  {
    return this-&gt;message.c_str();
  }
  ~MyCPPException() throw()
  {
  }
  std::string getMessage()
  {
    return this-&gt;message;
  }
  std::string getExtraData()
  {
    return this-&gt;extraData;
  }
};

void my_cpp_function(bool throwException)
{
  std::cout &lt;&lt; "Called a C++ function." &lt;&lt; std::endl;
  if (throwException)
    {
      throw MyCPPException("Throwing an exception as requested.",
               "This is the extra data.");
    }
}

PyObject *myCPPExceptionType = NULL;

void translateMyCPPException(MyCPPException const &amp;e)
{
  assert(myCPPExceptionType != NULL);
  boost::python::object pythonExceptionInstance(e);
  PyErr_SetObject(myCPPExceptionType, pythonExceptionInstance.ptr());
}

BOOST_PYTHON_MODULE(my_cpp_extension)
{
  boost::python::class_&lt;MyCPPException&gt;
    myCPPExceptionClass("MyCPPException",
            boost::python::init&lt;std::string, std::string&gt;());
  myCPPExceptionClass.add_property("message", &amp;MyCPPException::getMessage)
    .add_property("extra_data", &amp;MyCPPException::getExtraData);
  myCPPExceptionType = myCPPExceptionClass.ptr();
  boost::python::register_exception_translator&lt;MyCPPException&gt;
    (&amp;translateMyCPPException);
  boost::python::def("my_cpp_function", &amp;my_cpp_function);
}
</snippet></ROW><ROW><id>2262650</id><snippet>import my_cpp_extension
try:
    my_cpp_extension.my_cpp_function(False)
    print 'This line should be reached as no exception should be thrown.'
except my_cpp_extension.MyCPPException, e:
    print 'Message:', e.message
    print 'Extra data:',e.extra_data

try:
    my_cpp_extension.my_cpp_function(True)
    print ('This line should not be reached as an exception should have been' +
       'thrown by now.')
except my_cpp_extension.MyCPPException, e:
    print 'Message:', e.message
    print 'Extra data:',e.extra_data
</snippet></ROW><ROW><id>2263072</id><snippet>import os.path
open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'cardlist.xml'))
</snippet></ROW><ROW><id>2263281</id><snippet>top_products</snippet></ROW><ROW><id>2263281</id><snippet># in project/app/context_processors.py
from app.models import Product

def top_products(request):
    return {'top_products': Products.objects.all()} # of course some filter here
</snippet></ROW><ROW><id>2263281</id><snippet>settings.py</snippet></ROW><ROW><id>2263281</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    # maybe other here
    'app.context_processors.top_products',
)
</snippet></ROW><ROW><id>2263281</id><snippet>{% for product in top_products %}
    ...
</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.py</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.py</snippet></ROW><ROW><id>2263382</id><snippet>.py</snippet></ROW><ROW><id>2263382</id><snippet>.py</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.py</snippet></ROW><ROW><id>2263382</id><snippet>.pyc</snippet></ROW><ROW><id>2263382</id><snippet>.pyo</snippet></ROW><ROW><id>2263382</id><snippet>1.5.2</snippet></ROW><ROW><id>2263382</id><snippet>.pyc-2.0</snippet></ROW><ROW><id>2263382</id><snippet>.pyc-2.2</snippet></ROW><ROW><id>2263382</id><snippet>.pyo-X.Y</snippet></ROW><ROW><id>2263382</id><snippet>virtualenv</snippet></ROW><ROW><id>2263456</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2263456</id><snippet>cp850</snippet></ROW><ROW><id>2263456</id><snippet>cp1252</snippet></ROW><ROW><id>2263456</id><snippet>cp866</snippet></ROW><ROW><id>2263456</id><snippet>cp1251</snippet></ROW><ROW><id>2263456</id><snippet>IDLE 2.6.4      
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.popen('chcp').read()
'Active code page: 850\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2263456</id><snippet>os.popen('chcp').read()</snippet></ROW><ROW><id>2263456</id><snippet>:</snippet></ROW><ROW><id>2263456</id><snippet>codepage = result.split()[-1]</snippet></ROW><ROW><id>2263456</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2263826</id><snippet>for r in results:
     print r.get('key_name')
</snippet></ROW><ROW><id>2263826</id><snippet>None</snippet></ROW><ROW><id>2263826</id><snippet>key_name</snippet></ROW><ROW><id>2263826</id><snippet>for r in results:
     print r.get('key_name', 'Missing: key_name')
</snippet></ROW><ROW><id>2263826</id><snippet>for r in results:
    if 'key_name' in r:
        print r['key_name']
</snippet></ROW><ROW><id>2263826</id><snippet>for r in results:
    try: print r['key_name']
    except KeyError: pass
</snippet></ROW><ROW><id>2264214</id><snippet>0</snippet></ROW><ROW><id>2264214</id><snippet>1</snippet></ROW><ROW><id>2264214</id><snippet>0</snippet></ROW><ROW><id>2264214</id><snippet>1</snippet></ROW><ROW><id>2264214</id><snippet>&gt;&gt;&gt; format(23, '08b')
'00010111'
</snippet></ROW><ROW><id>2264214</id><snippet>&gt;&gt;&gt; int('00010111', 2)
23
</snippet></ROW><ROW><id>2264225</id><snippet>s = """A' B F2 E' B2 A2 C' D2 C D' E2 F"""

L = s.split(' ')

for i in xrange(len(L)):
  if len(L[i]) == 1:
    L[i] += 'x'

str_out = ' '.join(L)
</snippet></ROW><ROW><id>2264251</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>2264592</id><snippet>close()</snippet></ROW><ROW><id>2264592</id><snippet>Qt.WA_DeleteOnClose</snippet></ROW><ROW><id>2264592</id><snippet>button.setAttribute(Qt.WA_DeleteOnClose)
</snippet></ROW><ROW><id>2264604</id><snippet>&lt;script type="text/javascript"&gt;
    var a='{{form}}';

    alert(a);
&lt;/script&gt;
</snippet></ROW><ROW><id>2264712</id><snippet>re.sub()</snippet></ROW><ROW><id>2264712</id><snippet>repl</snippet></ROW><ROW><id>2264712</id><snippet>print 'My name is %(name)s' % rowdict
</snippet></ROW><ROW><id>2264850</id><snippet>openid</snippet></ROW><ROW><id>2264900</id><snippet>i = 5
if i &gt; 5:
    print "i is greater than 5."
else:
    print "i is less than or equal to 5."

hash = {'a': 1, 'b': 2, 'monkey': 3, 42: 'the answer'}
print hash['a']
print hash[42]

for item in hash:
    print item.Key, '=&gt;', item.Value
</snippet></ROW><ROW><id>2265001</id><snippet>external</snippet></ROW><ROW><id>2265033</id><snippet>executemany()</snippet></ROW><ROW><id>2265131</id><snippet>foo = B()
print foo.__class__.__bases__[0].msg
# 'hehehe'
</snippet></ROW><ROW><id>2265131</id><snippet>A.msg</snippet></ROW><ROW><id>2265277</id><snippet>import fileinput
for line in fileinput.input(remaining_args):
    process(line)
</snippet></ROW><ROW><id>2265383</id><snippet>datetime</snippet></ROW><ROW><id>2265383</id><snippet>datetime.datetime.strptime(date_string, format1).strftime(format2)
</snippet></ROW><ROW><id>2265479</id><snippet>locals()</snippet></ROW><ROW><id>2265479</id><snippet>&gt;&gt;&gt; class c(object):
...     for i in range(10):
...         locals()['A' + str(i)] = i
... 
&gt;&gt;&gt; c.A0
0
&gt;&gt;&gt; c.A7
7
</snippet></ROW><ROW><id>2265506</id><snippet>x = arange(0, 7, 0.01)

subplot(2, 1, 1)
plot(x, sin(x))

subplot(2, 2, 3)
plot(x, cos(x))

subplot(2, 2, 4)
plot(x, sin(x)*cos(x))
</snippet></ROW><ROW><id>2265506</id><snippet>subplot()</snippet></ROW><ROW><id>2265506</id><snippet>subplot(2, 2, 3)</snippet></ROW><ROW><id>2265901</id><snippet>for i in range(10):
    print d.entries[i].summary
</snippet></ROW><ROW><id>2265950</id><snippet>rejected</snippet></ROW><ROW><id>2265950</id><snippet>approved</snippet></ROW><ROW><id>2265950</id><snippet>class BlogAdmin(admin.ModelAdmin):

    ...
    actions = ['approve']
    ...

    def approve(self, request, queryset):
        rejects = queryset.filter(state = rejected)
        if len(rejects) != 0:
            # You might want to raise an exception here, or notify yourself somehow
            self.message_user(request,
                              "%s of the blogs you selected were already rejected." % len(rejects))
            return

        rows_updated = queryset.update(state = approved)
        self.message_user(request, "%s blogs approved." % rows_updated)
    approve.short_description = "Mark selected blogs as approved"
</snippet></ROW><ROW><id>2266122</id><snippet>def read_as_flat( someFile ):
    line_iter= iter(someFile)
    time_header= None
    for line in line_iter:
        words = line.split()
        if words[0] == 'time':
            time_header = [ words[1:] ] # the "time" line
            description= line_iter.next()
            time_header.append( description )
        elif words[0] in subjectNameSet:
            data = line_iter.next()
            yield time_header + data
</snippet></ROW><ROW><id>2266122</id><snippet>for time, description, var1, var2, var3 in read_as_flat( someFile ):
    etc.
</snippet></ROW><ROW><id>2266169</id><snippet>('thumb',)</snippet></ROW><ROW><id>2266169</id><snippet>('thumb')</snippet></ROW><ROW><id>2266169</id><snippet>class UploadImageForm(ModelForm):
  class Meta: 
    model = ImageUpload 
    fields = ('thumb',)
</snippet></ROW><ROW><id>2266269</id><snippet># If more than 1 second difference
if os.stat(src).st_mtime - os.stat(dest).st_mtime &gt; 1:
    shutil.copy2 (src, dst)
</snippet></ROW><ROW><id>2266687</id><snippet>blueprint = Blueprint(
    self.blueprint_map[str(self.ui.blueprint_combo.currentText())],
    runs=self.ui.runs_spin.text(), 
    me=self.ui.me_spin.text(),
    pe=self.ui.pe_skill_combo.currentIndex(),
)
</snippet></ROW><ROW><id>2266950</id><snippet>"/search/hello+world/?order=votes"</snippet></ROW><ROW><id>2266950</id><snippet>"/search/hello+world/2/?order-votes"</snippet></ROW><ROW><id>2266950</id><snippet>/search/029af239ccd23/2"</snippet></ROW><ROW><id>2267043</id><snippet>class ExtendedRequest(urllib2.Request):
    def __init__(self,...):
        urllib2.Request.__init__(self,...)
</snippet></ROW><ROW><id>2267446</id><snippet>import string
digs = string.digits + string.lowercase

def int2base(x, base):
  if x &lt; 0: sign = -1
  elif x==0: return '0'
  else: sign = 1
  x *= sign
  digits = []
  while x:
    digits.append(digs[x % base])
    x /= base
  if sign &lt; 0:
    digits.append('-')
  digits.reverse()
  return ''.join(digits)
</snippet></ROW><ROW><id>2267486</id><snippet>return self</snippet></ROW><ROW><id>2267486</id><snippet>a += b</snippet></ROW><ROW><id>2267486</id><snippet>type(a)</snippet></ROW><ROW><id>2267486</id><snippet>__iadd__</snippet></ROW><ROW><id>2267486</id><snippet>  a = a.__iadd__(b)
</snippet></ROW><ROW><id>2267486</id><snippet>__iadd__</snippet></ROW><ROW><id>2267486</id><snippet>self</snippet></ROW><ROW><id>2267486</id><snippet>a</snippet></ROW><ROW><id>2267486</id><snippet>return</snippet></ROW><ROW><id>2267486</id><snippet>return None</snippet></ROW><ROW><id>2267567</id><snippet>logger = logging.getLogger('my-logger')
logger.propagate = False
# now if you use logger it will not log to console.
</snippet></ROW><ROW><id>2267630</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>2267630</id><snippet>addinfourl</snippet></ROW><ROW><id>2267630</id><snippet>headers</snippet></ROW><ROW><id>2267630</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://www.python.org/')
&gt;&gt;&gt; f.headers['content-type']
'text/html'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2268170</id><snippet>{% extends "base.html" %}
</snippet></ROW><ROW><id>2268170</id><snippet>{% extends "standard/bishop/base.html" %}
</snippet></ROW><ROW><id>2268226</id><snippet>plugins</snippet></ROW><ROW><id>2268226</id><snippet>__init__.py</snippet></ROW><ROW><id>2268226</id><snippet>import pkgutil
# import our package
import plugins
list(pkgutil.iter_modules(plugins.__path__))
</snippet></ROW><ROW><id>2268226</id><snippet>import pkgutil
list(pkgutil.iter_modules(["plugins"]))
</snippet></ROW><ROW><id>2268226</id><snippet>import types
import sys
plugins = types.ModuleType("plugins")
plugins.__path__ = ["plugins"]

sys.modules["plugins"] = plugins
import plugins.testplugin
</snippet></ROW><ROW><id>2268559</id><snippet>import re
s = "\t\tthis line has two tabs of indention"
re.match(r"\s*", s).group()
// "\t\t"
s = "    this line has four spaces of indention"
re.match(r"\s*", s).group()
// "    "
</snippet></ROW><ROW><id>2268559</id><snippet>&gt;&gt;&gt; timeit.timeit('r.match(s).group()', 'import re;r=re.compile(r"\s*")s="          hello world!"*10000', number=100000)
0.10037684440612793
&gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(lambda x:x.isspace(),s))', 'import itertools;s="          hello world!"*10000', number=100000)
0.7092740535736084
&gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspace,s))', 'import itertools;s="          hello world!"*10000', number=100000)
0.51730513572692871
&gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]', 's="          hello world!"*10000', number=100000)
2.6478431224822998
</snippet></ROW><ROW><id>2268559</id><snippet>&gt;&gt;&gt; timeit.timeit('r.match(s).group()', 'import re;r=re.compile(r"\s*");s="          hello world!"*100', number=100000)
0.099548101425170898
&gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspace,s))', 'import itertools;s="          hello world!"*100', number=100000)
0.53602385520935059
&gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]', 's="          hello world!"*100', number=100000)
0.064291000366210938
</snippet></ROW><ROW><id>2268559</id><snippet>&gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]', 's=" "*2000', number=10000)
0.047424077987670898
&gt;&gt;&gt; timeit.timeit('r.match(s).group()', 'import re;r=re.compile(r"\s*");s=" "*2000', number=10000)
0.2433168888092041
&gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspace,s))', 'import itertools;s=" "*2000', number=10000)
3.9949162006378174
</snippet></ROW><ROW><id>2268559</id><snippet>&gt;&gt;&gt; timeit.timeit('s[:-len(s.lstrip())]', 's=" "*200000', number=10000)
4.2374031543731689
&gt;&gt;&gt; timeit.timeit('r.match(s).group()', 'import re;r=re.compile(r"\s*");s=" "*200000', number=10000)
23.877214908599854
&gt;&gt;&gt; timeit.timeit('"".join(itertools.takewhile(str.isspace,s))', 'import itertools;s=" "*200000', number=100)*100
415.72158336639404
</snippet></ROW><ROW><id>2268603</id><snippet>(Foo.valid_from &lt;= func.current_timestamp()) &amp; (Foo.valid_until &gt; func.current_timestamp())</snippet></ROW><ROW><id>2268603</id><snippet>Foo.is_valid()</snippet></ROW><ROW><id>2268978</id><snippet>False</snippet></ROW><ROW><id>2268978</id><snippet>False</snippet></ROW><ROW><id>2268978</id><snippet>None</snippet></ROW><ROW><id>2269311</id><snippet>EVT_ENTER_WINDOW</snippet></ROW><ROW><id>2269311</id><snippet>EVT_LEAVE_WINDOW</snippet></ROW><ROW><id>2269311</id><snippet>wx.ClientDisplayRect</snippet></ROW><ROW><id>2269584</id><snippet>request</snippet></ROW><ROW><id>2269584</id><snippet>is_facebook</snippet></ROW><ROW><id>2269584</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>2269584</id><snippet>request</snippet></ROW><ROW><id>2269584</id><snippet>{% if request.facebook.uid %}
</snippet></ROW><ROW><id>2269765</id><snippet>import ae.util</snippet></ROW><ROW><id>2269765</id><snippet>import util</snippet></ROW><ROW><id>2269765</id><snippet>ae</snippet></ROW><ROW><id>2269765</id><snippet>util</snippet></ROW><ROW><id>2269765</id><snippet>print util</snippet></ROW><ROW><id>2269816</id><snippet>cursor.execute("""INSERT INTO life(user_id, utm) 
    values(%s,PointFromWKB(point(%s,%s)))""", 
    (the_user_id, utm_easting, utm_northing))
</snippet></ROW><ROW><id>2269816</id><snippet>execute()</snippet></ROW><ROW><id>2269816</id><snippet>cursor.execute("""INSERT INTO life(user_id, utm) 
    values(%s,PointFromWKB(point(%s,%s)))""", 
    [the_user_id, utm_easting, utm_northing])
</snippet></ROW><ROW><id>2269836</id><snippet>chr</snippet></ROW><ROW><id>2269836</id><snippet>&gt;&gt;&gt; chr(0x65) == '\x65'
True


&gt;&gt;&gt; hex(65)
'0x41'
&gt;&gt;&gt; chr(65) == '\x41'
True
</snippet></ROW><ROW><id>2269836</id><snippet>hex</snippet></ROW><ROW><id>2269978</id><snippet>Decimal('3.432')</snippet></ROW><ROW><id>2269978</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(Decimal('3.432'))
....
TypeError: Decimal('3.432') is not JSON serializable
</snippet></ROW><ROW><id>2269978</id><snippet>&gt;&gt;&gt; j = json.dumps(str(Decimal('3.000')))
&gt;&gt;&gt; j
'"3.000"'
&gt;&gt;&gt; Decimal(json.loads(j))
Decimal('3.000')
</snippet></ROW><ROW><id>2269978</id><snippet>json</snippet></ROW><ROW><id>2269978</id><snippet>load()</snippet></ROW><ROW><id>2269978</id><snippet>loads()</snippet></ROW><ROW><id>2270020</id><snippet>def evaluateHelper(self, g):
  return sum(a*b for a, b in zip(self.chromosome, self.chomosome[g:]))
</snippet></ROW><ROW><id>2270020</id><snippet>% len...</snippet></ROW><ROW><id>2270020</id><snippet>evaluate</snippet></ROW><ROW><id>2270020</id><snippet>range(1, len(...)-1)</snippet></ROW><ROW><id>2270020</id><snippet>N-1</snippet></ROW><ROW><id>2270022</id><snippet>ffmpeg</snippet></ROW><ROW><id>2270022</id><snippet>ffmpeg -i in.flv -f avi -vcodec mpeg4 -acodec libmp3lame out.avi
</snippet></ROW><ROW><id>2270214</id><snippet>AA</snippet></ROW><ROW><id>2270214</id><snippet>A</snippet></ROW><ROW><id>2270214</id><snippet>gh</snippet></ROW><ROW><id>2270214</id><snippet>g</snippet></ROW><ROW><id>2270214</id><snippet>shaakhaay-e-ng</snippet></ROW><ROW><id>2270214</id><snippet>sh</snippet></ROW><ROW><id>2270214</id><snippet>aa</snippet></ROW><ROW><id>2270214</id><snippet>sha</snippet></ROW><ROW><id>2270214</id><snippet>a</snippet></ROW><ROW><id>2270214</id><snippet>#!/usr/bin/python
# -*- coding: UTF-8 -*-

input_data = """
E-k- b-u-d-z*dhi-m-aan- p-ksii#

E-k- ghn-e- j-ngg-l- m-e-ng E-k- b-h-u-t- UUNNc-aa p-e-dr thaa#
[snip]
"t-o- k-z*y-aa h-u-AA"#
"""

roman_devanagari_dict={'A' : u'अ' ,  'AA' : u'आ ' , 'I' : u'इ' , 'II' : u'ई ' , 'U' : u'उ ' ,\
[snip]
            '2' : u'२' , '5' : u'५' , '3' : u'३' , '7' : u'७' , '9' : u'९' , '1' : u'१'}

#Presuming we need to do the 3-letter cases then the 2-letter then the 1-letter
replacements = [(-len(k), unicode(k), v) for k, v in roman_devanagari_dict.items()]
replacements.sort()

data = input_data.decode('ascii')

for _junk, from_text, to_text in replacements:
    data = data.replace(from_text, to_text)

# Presuming the '-' are inter-character markers, delete them last, not first
data = data.replace(u'-', '')
data = data.replace(u'#', '')
print "untransliterated:", set(c for c in data if 0x20 &lt; ord(c) &lt; 0x7f)

BOM = u'\ufeff'
outf = open('devanagari.txt', 'w')
outf.write(BOM.encode('utf8')) # for the benefit of clueless Windows s/w
outf.write(data.encode('utf8'))
outf.close()
</snippet></ROW><ROW><id>2270357</id><snippet>.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)</snippet></ROW><ROW><id>2270357</id><snippet>TIME_WAIT</snippet></ROW><ROW><id>2270357</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>2270675</id><snippet>\b__(\S+)__\b

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"\b__(\S+)__\b","Here __is__ a __test__ sentence")
['is', 'test']    
&gt;&gt;&gt; re.findall(r"\b__(\S+)__\b","__Here__ is a test __sentence__")
['Here', 'sentence']
&gt;&gt;&gt; re.findall(r"\b__(\S+)__\b","__Here's__ a test __sentence__")
["Here's", 'sentence']
</snippet></ROW><ROW><id>2270675</id><snippet>&gt;&gt;&gt; print re.sub(r"\b(__)(\S+)(__)\b",r"&lt;b&gt;\2&lt;\\b&gt;","__Here__ is a test __sentence__")
&lt;b&gt;Here&lt;\b&gt; is a test &lt;b&gt;sentence&lt;\b&gt;
</snippet></ROW><ROW><id>2270675</id><snippet>\b__([a-zA-Z0-9_':])__\b  ### count "'" and ":" as part of words

&gt;&gt;&gt; re.findall(r"\b__([a-zA-Z0-9_']+)__\b","__Here's__ a test __sentence:__")
["Here's"]
&gt;&gt;&gt; re.findall(r"\b__([a-zA-Z0-9_':]+)__\b","__Here's__ a test __sentence:__")
["Here's", 'sentence:']
</snippet></ROW><ROW><id>2270704</id><snippet>from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User

UserAdmin.list_display = ('email', 'first_name', 'last_name', 'is_active', 'date_joined', 'is_staff')

admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>2270822</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; try:
...     a&gt;0
... except (NameError,),e:
...     print re.findall("name '(\w+)' is not defined",str(e))[0]
a
</snippet></ROW><ROW><id>2270822</id><snippet>&gt;&gt;&gt; str(e).split("'")[1]
'a'
</snippet></ROW><ROW><id>2270935</id><snippet>&gt;&gt;&gt; u'あいうえお'.encode('shift-jis')
'\x82\xa0\x82\xa2\x82\xa4\x82\xa6\x82\xa8'
</snippet></ROW><ROW><id>2271021</id><snippet>all([5 &lt; x, x &lt; y])
</snippet></ROW><ROW><id>2271221</id><snippet>print</snippet></ROW><ROW><id>2271221</id><snippet>line.rstrip("\n")</snippet></ROW><ROW><id>2271221</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>2271257</id><snippet>int</snippet></ROW><ROW><id>2271257</id><snippet>int</snippet></ROW><ROW><id>2271257</id><snippet>class str_usr(str):
    def dup(self):
        return self + self # or 2 * self

s = str_usr("hi")
print s # prints hi
print s.dup() # print hihi
</snippet></ROW><ROW><id>2271279</id><snippet>appoinment = Appointment()
appointment.start_time = datetime.datetime.now()
# 1 hour appointment
appointment.end_time = appointment.start_time + datetime.timedelta(hours=1)
# more stuff here
appointment.save()

# Checking for collision
# where the start time for an appointment is between the the start and end times
# You would want to filter this on user, etc 
# There is also a problem if you book an appointment within another appointment
start_conflict = Appointment.objects.filter(
                     start_time__range=(appointment.start_time,
                                        appointment.end_time))
end_conflict = Appointment.objects.filter(
                   end_time__range=(appointment.start_time,
                                    appointment.end_time))

during_conflict = Appointment.objects.filter(
                      start_date__lte=appointment.start_time, 
                      end_date__gte=appointment.end_time)

if (start_conflict or end_conflict or during_conflict):
    # reject, for there is a conflict
</snippet></ROW><ROW><id>2271279</id><snippet>during_conflict</snippet></ROW><ROW><id>2271500</id><snippet>-r</snippet></ROW><ROW><id>2271500</id><snippet>os</snippet></ROW><ROW><id>2271500</id><snippet>dirname = "/some/path/"
filename = "somefile.txt"
pathname = os.path.abspath(os.path.join(dirname, filename))
if pathname.startswith(dirname):
   os.remove(pathname)
</snippet></ROW><ROW><id>2271500</id><snippet>abspath</snippet></ROW><ROW><id>2271606</id><snippet>c:/Python/python.exe ./emulate.py</snippet></ROW><ROW><id>2271606</id><snippet>#!c:/Python/python.exe</snippet></ROW><ROW><id>2271606</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>2271606</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>2271606</id><snippet>PATH=c:/Python/:$PATH ./emulate.py</snippet></ROW><ROW><id>2271606</id><snippet>emulate.py</snippet></ROW><ROW><id>2271606</id><snippet>/bin/env</snippet></ROW><ROW><id>2272174</id><snippet>def myround(x, base=5):
    return int(base * round(float(x)/base))
</snippet></ROW><ROW><id>2272174</id><snippet>round(float(x)/5)</snippet></ROW><ROW><id>2272174</id><snippet>int</snippet></ROW><ROW><id>2272174</id><snippet>round()</snippet></ROW><ROW><id>2272174</id><snippet>base</snippet></ROW><ROW><id>2272198</id><snippet>d={key: lambda self: self.__vals__[key] for key in objects_type}
</snippet></ROW><ROW><id>2272198</id><snippet>key</snippet></ROW><ROW><id>2272198</id><snippet>... lambda self, key=key: self.__vals__[key] ...
</snippet></ROW><ROW><id>2272198</id><snippet>key</snippet></ROW><ROW><id>2272775</id><snippet>class Class3():

    def printValue(self):
        print self.string1

class Class2(Class3):

    def e(self):
        self.value4 = self.value3 - self.value2
        print self.value4
        self.string1 = 'Hello'
        self.printValue()

class Class1(Class2):

    def __init__(self):
        self.value1 = 10
        self.value2 = 20

    def add(self):
        self.value3 = self.value1 + self.value2


if __name__ == '__main__':
    instance1 = Class1()
    instance1.add()
    instance1.e() # will print "10" and "Hello"
    print instance1.value3 # will print "30"
</snippet></ROW><ROW><id>2272921</id><snippet>numpy.select(condlist, choicelist, default=0)</snippet></ROW><ROW><id>2272921</id><snippet>False</snippet></ROW><ROW><id>2272921</id><snippet>x &gt; 7</snippet></ROW><ROW><id>2272921</id><snippet>x &gt;=4</snippet></ROW><ROW><id>2272921</id><snippet>x+10</snippet></ROW><ROW><id>2272921</id><snippet>x &gt;= 4</snippet></ROW><ROW><id>2272921</id><snippet>x</snippet></ROW><ROW><id>2272921</id><snippet>x &gt; 7</snippet></ROW><ROW><id>2272921</id><snippet>x &lt; 4</snippet></ROW><ROW><id>2272948</id><snippet>import httplib
conn = httplib.HTTPConnection("www.python.org")
conn.request("GET", "/index.html")
r1 = conn.getresponse()

dict = r1.getheaders()
print(dict)
</snippet></ROW><ROW><id>2273007</id><snippet>map(itemgetter(0), query)</snippet></ROW><ROW><id>2273007</id><snippet>for value, in query:</snippet></ROW><ROW><id>2273220</id><snippet>class MyPanel(wx.Panel):
    def __init__(self, *args):
        wx.Panel.__init__(self, *args)

    def draw(self):
        # Your code here
</snippet></ROW><ROW><id>2273230</id><snippet>setattr</snippet></ROW><ROW><id>2273230</id><snippet>setattr(self, param['key'], 'something')</snippet></ROW><ROW><id>2273738</id><snippet>from collections import defaultdict
import pprint

data = {
 'Bob' : {'item1':3, 'item2':8, 'item3':6},
 'Jim' : {'item1':6, 'item4':7},
 'Amy' : {'item1':6,'item2':5,'item3':9,'item4':2}
}

flipped = defaultdict(dict)
for key, val in data.items():
    for subkey, subval in val.items():
        flipped[subkey][key] = subval

pprint.pprint(dict(flipped))
</snippet></ROW><ROW><id>2273738</id><snippet>{'item1': {'Amy': 6, 'Bob': 3, 'Jim': 6},
 'item2': {'Amy': 5, 'Bob': 8},
 'item3': {'Amy': 9, 'Bob': 6},
 'item4': {'Amy': 2, 'Jim': 7}}
</snippet></ROW><ROW><id>2273807</id><snippet>#! /usr/bin/env python

import re
from collections import deque

pattern = r'([A-Z]{2,}(?=[A-Z]|$)|[A-Z](?=[a-z]|$))'
chunks = deque(re.split(pattern, 'HDMWhoSomeMONKEYThingXYZ'))

result = []
while len(chunks):
  buf = chunks.popleft()
  if len(buf) == 0:
    continue
  if re.match(r'^[A-Z]$', buf) and len(chunks):
    buf += chunks.popleft()
  result.append(buf)

print ' '.join(result)
</snippet></ROW><ROW><id>2273807</id><snippet>re.findall</snippet></ROW><ROW><id>2273807</id><snippet>pattern = r'([A-Z]{2,}(?=[A-Z]|$)|[A-Z][a-z]*)'
print ' '.join(re.findall(pattern, 'HDMWhoSomeMONKEYThingX'))
</snippet></ROW><ROW><id>2273845</id><snippet>sums = session.query(func.sum(Irterm.n).label('a1')).group_by(Irterm.item_id)
average = session.query(func.avg(sums.subquery().columns.a1)).scalar()
</snippet></ROW><ROW><id>2273968</id><snippet>test_data.json</snippet></ROW><ROW><id>2273968</id><snippet>[
{
    "model": "stats_agg.newevent",
    "pk": 1,
    "fields": {
        "name": "event1",
        "quantity":0.0,
        "timestamp": "2010-02-15 00:27:40"
     }
},
{
    "model": "stats_agg.newevent",
    "pk": 2,
    "fields": {
        "name": "event1",
        "quantity":1.0,
        "timestamp": "2010-02-15 00:27:40"
     }
},
...
</snippet></ROW><ROW><id>2273968</id><snippet>class SimpleTest(TestCase):
   fixtures = ['test_data.json']
</snippet></ROW><ROW><id>2274334</id><snippet>.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)</snippet></ROW><ROW><id>2274334</id><snippet>allow_reuse_address</snippet></ROW><ROW><id>2274334</id><snippet>httpd = SocketServer.ThreadingTCPServer(('localhost', port), CustomHandler, False) # Do not automatically bind
httpd.allow_reuse_address = True # Prevent 'cannot bind to address' errors on restart
httpd.server_bind()     # Manually bind, to support allow_reuse_address
httpd.server_activate() # (see above comment)
httpd.serve_forever()
</snippet></ROW><ROW><id>2274345</id><snippet>.get</snippet></ROW><ROW><id>2274929</id><snippet>User</snippet></ROW><ROW><id>2274929</id><snippet>User</snippet></ROW><ROW><id>2274929</id><snippet>User</snippet></ROW><ROW><id>2274929</id><snippet>User</snippet></ROW><ROW><id>2275071</id><snippet>from django.shortcuts import render_to_response

def index(request):
   """
   Main page.
   """
   return render_to_response('index.html') # display index.html
</snippet></ROW><ROW><id>2275071</id><snippet>from myproject.views import index
urlpatterns = patterns('',
   (r'^$', index),
)
</snippet></ROW><ROW><id>2275221</id><snippet>get</snippet></ROW><ROW><id>2275221</id><snippet>_notempty</snippet></ROW><ROW><id>2275221</id><snippet>put</snippet></ROW><ROW><id>2275221</id><snippet>get</snippet></ROW><ROW><id>2275221</id><snippet>put</snippet></ROW><ROW><id>2275221</id><snippet>block</snippet></ROW><ROW><id>2275652</id><snippet>User</snippet></ROW><ROW><id>2275652</id><snippet>contrib.auth</snippet></ROW><ROW><id>2275975</id><snippet>SetBackgroundColour</snippet></ROW><ROW><id>2275975</id><snippet>self.Bind</snippet></ROW><ROW><id>2276100</id><snippet>f = open('data.txt', 'r')
raw = f.readlines()

#generate set of all possible groupings
groups = set()
for lines in raw:
    data = lines.strip().split()
    for items in data:
        groups.add(items)

#parse input into groups
for group in groups:
    print "Group \'%s\':" % group
    for line in raw:
        if line.find(group) is not -1:
            print line.strip()
    print

#consider storing into a dictionary instead of just printing
</snippet></ROW><ROW><id>2276100</id><snippet>Group 'trainer':
good dog trainer

Group 'good':
good dog trainer

Group 'food':
dog food
cat food

Group 'dog':
dog food
good dog trainer

Group 'cat':
cat food

Group 'veterinarian':
veterinarian
</snippet></ROW><ROW><id>2276112</id><snippet>perm = Permission.objects.get(pk=1) # pk #1 for brevity.
group = Group.objects.get(pk=1)     # Again, for brevity.
group_perms = GroupPermission.objects.filter(permission=perm, group=group)
objects = [x.content_object for x in group_perms]
</snippet></ROW><ROW><id>2276112</id><snippet>perm</snippet></ROW><ROW><id>2276112</id><snippet>group</snippet></ROW><ROW><id>2276112</id><snippet>objects</snippet></ROW><ROW><id>2276112</id><snippet>class GroupPermissionManager(models.Manager):
    def for(self, perm):
        group_perms = GroupPermission.objects.filter(permission=perm, group=self)
        objects = [x.content_object for x in group_perms]

class Group(models.Model):
    name = models.CharField(max_length=30)
    permissions = GroupPermissionManager()
</snippet></ROW><ROW><id>2276112</id><snippet>perm = Permission.objects.get(pk=1) # pk #1 for brevity.
group = Group.objects.get(pk=1)     # Again, for brevity.
objects = group.permissions.for(perm)    
</snippet></ROW><ROW><id>2276258</id><snippet>from twisted.internet import reactor
from twisted.web import proxy, server
from twisted.web.resource import Resource

class Simple(Resource):
    isLeaf = False
    allowedMethods = ("GET","POST")
    def getChild(self, name, request):
        print "getChild called with name:'%s'" % name
        if name == "get.json" or name == "post.json":
            print "proxy on GAE"
            return proxy.ReverseProxyResource('localhost', 8085, "/"+name)
        else:
            print "proxy on GWT"
            return proxy.ReverseProxyResource('localhost', 8086, "/"+name)

simple = Simple()
site = server.Site(simple)
reactor.listenTCP(8080, site)
reactor.run()
</snippet></ROW><ROW><id>2276354</id><snippet>{% if thestring %}

    {% if "1" in thestring %}

    {% endif %}

{% endif %}
</snippet></ROW><ROW><id>2276366</id><snippet>multiprocessing</snippet></ROW><ROW><id>2276366</id><snippet>os.fork()</snippet></ROW><ROW><id>2276366</id><snippet>multiprocessing</snippet></ROW><ROW><id>2276366</id><snippet>subprocess</snippet></ROW><ROW><id>2276366</id><snippet>Popen</snippet></ROW><ROW><id>2276366</id><snippet>multiprocessing</snippet></ROW><ROW><id>2276366</id><snippet>subprocess</snippet></ROW><ROW><id>2276366</id><snippet>fork()</snippet></ROW><ROW><id>2276443</id><snippet>[something] * 2</snippet></ROW><ROW><id>2276443</id><snippet>y[0]</snippet></ROW><ROW><id>2276443</id><snippet>y[1]</snippet></ROW><ROW><id>2276443</id><snippet>y[0] is y[1]</snippet></ROW><ROW><id>2276443</id><snippet>id(y[0]) == id(y[1])</snippet></ROW><ROW><id>2276443</id><snippet>y[0] = [1]
</snippet></ROW><ROW><id>2276443</id><snippet>a = [0, 1] * 2
</snippet></ROW><ROW><id>2276443</id><snippet>[0, 1, 0, 1]</snippet></ROW><ROW><id>2276443</id><snippet>1</snippet></ROW><ROW><id>2276443</id><snippet>int</snippet></ROW><ROW><id>2276443</id><snippet>a[1] = 5</snippet></ROW><ROW><id>2276443</id><snippet>a</snippet></ROW><ROW><id>2276443</id><snippet>[0, 5, 0, 1]</snippet></ROW><ROW><id>2276557</id><snippet>sys.prefix</snippet></ROW><ROW><id>2276557</id><snippet>sys.exec_prefix</snippet></ROW><ROW><id>2276557</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.prefix
'/System/Library/Frameworks/Python.framework/Versions/2.6'
&gt;&gt;&gt; sys.exec_prefix
'/System/Library/Frameworks/Python.framework/Versions/2.6'
</snippet></ROW><ROW><id>2276875</id><snippet>re.split()</snippet></ROW><ROW><id>2276875</id><snippet>from BeautifulSoup import BeautifulSoup 

soup = BeautifulSoup(some_html)

paragraphs = list(unicode(x) for x in soup.findAll('p'))
</snippet></ROW><ROW><id>2276884</id><snippet>build_opener()</snippet></ROW><ROW><id>2276884</id><snippet>install_opener()</snippet></ROW><ROW><id>2276884</id><snippet>urlopen()</snippet></ROW><ROW><id>2276884</id><snippet>import urllib2
from StringIO import StringIO

def mock_response(req):
    if req.get_full_url() == "http://example.com":
        resp = urllib2.addinfourl(StringIO("mock file"), "mock message", req.get_full_url())
        resp.code = 200
        resp.msg = "OK"
        return resp

class MyHTTPHandler(urllib2.HTTPHandler):
    def http_open(self, req):
        print "mock opener"
        return mock_response(req)

my_opener = urllib2.build_opener(MyHTTPHandler)
urllib2.install_opener(my_opener)

response=urllib2.urlopen("http://example.com")
print response.read()
print response.code
print response.msg
</snippet></ROW><ROW><id>2277049</id><snippet>urlparse.urlparse()</snippet></ROW><ROW><id>2277049</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>2277059</id><snippet>def make_properties(c):
    from collections import defaultdict
    props=defaultdict(dict)
    for k,v in vars(c).items():
        if k.startswith("Get"):
            props[k[3:]]['getter']=v
        if k.startswith("Set"):
            props[k[3:]]['setter']=v
    for k,v in props.items():
        setattr(c,k,property(v.get('getter'),v.get('setter')))
    return c

@make_properties
class C(object):
    def GetX(self):
        print "GetX"
        return self._x

    def SetX(self, value):
        print "SetX"
        self._x = value

c=C()
c.X=5
c.X
</snippet></ROW><ROW><id>2277059</id><snippet>def make_properties(skip=None):
    if skip is None:
        skip=[]
    def f(c):
        from collections import defaultdict
        props=defaultdict(dict)
        for k,v in vars(c).items():
            if k.startswith("Get"):
                props[k[3:]]['getter']=v
            if k.startswith("Set"):
                props[k[3:]]['setter']=v
        for k,v in props.items():
            if k in skip:
                continue
            setattr(c,k,property(v.get('getter'),v.get('setter')))
        return c
    return f

@make_properties(skip=['Y'])
class C(object):
    def GetX(self):
        print "GetX"
        return self._x

    def SetX(self, value):
        print "SetX"
        self._x = value

    def GetY(self):
        print "GetY"
        return self._y

    def SetY(self, value):
        print "SetY"
        self._y = value

c=C()
c.X=5
c.X
c.Y=5
c.Y
</snippet></ROW><ROW><id>2277295</id><snippet>from django.contrib.auth.views import login
from django.http import HttpResponseRedirect

def mylogin(request, **kwargs):
    if request.user.is_authenticated():
        return HttpResponseRedirect('/')
    else:
        return login(request, **kwargs)
</snippet></ROW><ROW><id>2277295</id><snippet>django.contrib.auth.views.login</snippet></ROW><ROW><id>2277295</id><snippet>urls.py</snippet></ROW><ROW><id>2277313</id><snippet>urllib.unquote</snippet></ROW><ROW><id>2277313</id><snippet>urllib.unquote_plus</snippet></ROW><ROW><id>2277313</id><snippet>www.foo.com?x=11&amp;y=12</snippet></ROW><ROW><id>2277337</id><snippet>x = text.get('1.0', END).strip()
</snippet></ROW><ROW><id>2277363</id><snippet>re.findall</snippet></ROW><ROW><id>2277363</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('[A-Z][^A-Z]*', 'TheLongAndWindingRoad')
['The', 'Long', 'And', 'Winding', 'Road']
&gt;&gt;&gt; re.findall('[A-Z][^A-Z]*', 'ABC')
['A', 'B', 'C']
</snippet></ROW><ROW><id>2277442</id><snippet>#!/usr/bin/python
# -*- coding:utf-8 -*-

from optparse import OptionParser
import sys
from mechanize import Browser, CookieJar, Request, urlopen


accounts = [
    {'ipaddr': '127.0.0.1', 'user': 'joe', 'pass': 'foobar'},
    ]


class WebsiteAccount(object):

    def __init__(self, ipaddr, username, password, browser):
        self.ipaddr = ipaddr
        self.username = username
        self.password = password
        self.browser = browser
        self.cookiejar = CookieJar()
        self.browser.set_cookiejar(self.cookiejar)

    def login(self):
        self.browser.open('http://'+self.ipaddr+'/login.html')
        self.browser.select_form(name='loginform')
        self.browser.form.set_value(self.username, name='username')
        self.browser.form.set_value(self.password, name='password')
        resp = self.browser.submit()
        print 'Logging into account %s@%s ...' % (self.username, self.ipaddr),
        if resp.geturl().endswith('/login.html'):
            print 'FAILED!'
            sys.exit(1)
        print ' OK'

    def logout(self):
        print ('Logging out from account %s@%s...' % (self.username, self.ipaddr),
        self.browser.open('http://'+self.ipaddr+'/logout.html')
        self.browser.close()
        print 'OK'


def main():
    parser = OptionParser()
    parser.add_option('-d', '--debug', action='store_true', dest='debug', default=False)
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=False)
    (opts, args) = parser.parse_args()
    for account in accounts:
        browser = Browser()
        browser.set_handle_referer(True)
        browser.set_handle_redirect(True)
        browser.set_handle_robots(False)
        bs = WebsiteAccount(account['ipaddr'],
                            account['user'],
                            account['pass'],
                            browser)
        # DEBUG
        if opts.debug == True:
            browser.set_debug_redirects(True)
            browser.set_debug_responses(True)
            browser.set_debug_http(True)
        bs.login()
        try:
            # ... do some stuff
            # save cookies here?  
            pass
        finally:
            # you shouldn't use this if you are interested in the login cookies
            bs.logout()


if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>2277669</id><snippet>import numpy as NP
A = NP.random.randint(0, 10, 100)

bins = NP.array([0., 20., 40., 60., 80., 100.])

# d is an index array holding the bin id for each point in A
d = NP.digitize(A, bins)     
</snippet></ROW><ROW><id>2277729</id><snippet>void start(const Tab&amp; t)
{
    this-&gt;get_override("start")(t);
}
</snippet></ROW><ROW><id>2278059</id><snippet>./configure --prefix=/path/to/installdir  (other options)
make
make install
</snippet></ROW><ROW><id>2278059</id><snippet>cd virtualenv_source_dir
/path/to/installdir/bin/python setup.py install
</snippet></ROW><ROW><id>2278059</id><snippet># Just to be safe
export PATH="/path/to/installdir/bin:$PATH" 

virtualenv ~/ENV
~/ENV/bin/pip install somepackage # (and such)
</snippet></ROW><ROW><id>2278162</id><snippet>/bin/sh</snippet></ROW><ROW><id>2278162</id><snippet>/bin/ls</snippet></ROW><ROW><id>2278162</id><snippet>pfd = subprocess.Popen(['ls'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

out, err_output = pfd.communicate()
</snippet></ROW><ROW><id>2278162</id><snippet>subprocess.communicate</snippet></ROW><ROW><id>2278162</id><snippet>sh~#</snippet></ROW><ROW><id>2278162</id><snippet>while 1: 
    c = pfd.stdout.read(1)
    if not c:
        break
    elif c == '\n': # print line when found
        print repr(out)
        out = ''
    else:
        out += c
        if out.strip() == 'sh#':
            break
</snippet></ROW><ROW><id>2278300</id><snippet>uid.hex.upper().replace('D','Z')</snippet></ROW><ROW><id>2278300</id><snippet>hex.upper().replace</snippet></ROW><ROW><id>2278300</id><snippet>.hex</snippet></ROW><ROW><id>2278300</id><snippet>int(theslice, 16)</snippet></ROW><ROW><id>2278300</id><snippet>+=</snippet></ROW><ROW><id>2278300</id><snippet>''.join</snippet></ROW><ROW><id>2278331</id><snippet>Mat</snippet></ROW><ROW><id>2278515</id><snippet>EST-1 day, 19:00:00</snippet></ROW><ROW><id>2278595</id><snippet>class InnerClassDescriptor(object):
  def __init__(self, cls):
    self.cls = cls
  def __get__(self, instance, outerclass):
    class Wrapper(self.cls):
      outer = instance
    Wrapper.__name__ = self.cls.__name__
    return Wrapper

class Outer(object):
  @InnerClassDescriptor
  class Inner(object):
    def __init__(self):
      print self.outer

o = Outer()
i = o.Inner()
print 'Outer is a', type(Outer)
print 'Inner is a', type(o.Inner)
</snippet></ROW><ROW><id>2278595</id><snippet>&lt;__main__.Outer object at 0x82f90&gt;
Outer is a &lt;type 'type'&gt;
Inner is a &lt;type 'type'&gt;
</snippet></ROW><ROW><id>2278595</id><snippet>o1 = Outer()
o2 = Outer()
i1 = o1.Inner
i2 = o2.Inner
print i1(), i2(), i1(), i2()
</snippet></ROW><ROW><id>2278595</id><snippet>o1.Inner</snippet></ROW><ROW><id>2278595</id><snippet>o2.Inner</snippet></ROW><ROW><id>2278595</id><snippet>o.Inner</snippet></ROW><ROW><id>2278595</id><snippet>o</snippet></ROW><ROW><id>2278595</id><snippet>Outer</snippet></ROW><ROW><id>2278910</id><snippet>&gt;</snippet></ROW><ROW><id>2279112</id><snippet>&gt;&gt;&gt; e.__bases__[1].n
3
</snippet></ROW><ROW><id>2279212</id><snippet>page1=opener1.open(urllib2.quote(imageurl))
</snippet></ROW><ROW><id>2279353</id><snippet>sudo port selfupdate
sudo port -u install py26-curl   #edited
</snippet></ROW><ROW><id>2279353</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>2279353</id><snippet>sudo port selfupdate
sudo port -u install curl
</snippet></ROW><ROW><id>2279353</id><snippet>curl http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gz | tar xz
cd pycurl-7.19.0
python2.6 setup.py install --curl-config=/opt/local/bin/curl-config
</snippet></ROW><ROW><id>2279486</id><snippet>append</snippet></ROW><ROW><id>2279486</id><snippet>return</snippet></ROW><ROW><id>2279486</id><snippet>@composable
def f4(a):
    a.append(0)
    return a
</snippet></ROW><ROW><id>2279486</id><snippet>@composable
def f4(a):
  return a + [0]
</snippet></ROW><ROW><id>2279883</id><snippet>$ alias geturl="python /some/cool/script.py"
</snippet></ROW><ROW><id>2279883</id><snippet>$ geturl http://example.com/excitingstuff.jpg
</snippet></ROW><ROW><id>2279931</id><snippet>from cStringIO import StringIO

# ...
def test_some_log_reading_scenario(self):
    log1 = '\n'.join([
        'log line',
        'another log line'
    ])
    log2 = '\n'.join([
        'another log another line',
        'lala blah blah'
    ])
    # ...
    result = myobj.read_log_files([StringIO(log1), StringIO(log2)])
    # assert result
</snippet></ROW><ROW><id>2280456</id><snippet>lxml.etree</snippet></ROW><ROW><id>2280456</id><snippet>import datetime

projects = [{'code': 'demo',
 'created_at': datetime.datetime(2008, 6, 11, 7, 35, 19),
 'created_by': None,
 'id': 4,
 'image': 'https://website.com/files/0000/0000/blah.jpg',
 'name': 'Demo Project',
 'description': 'This is for demonstration purposes',
 'due': '2009-05-30',
 'start': '2009-05-06',
 'status': 'Active',
 'stype': 'Demo',
 'tag_list': [],
 'type': 'Project',
 'updated_at': datetime.datetime(2009, 5, 27, 1, 41, 55),
 'updated_by': {'id': 24, 'name': 'Test', 'type': 'HumanUser'},
 'users': [{'id': 19, 'name': 'User 1', 'type': 'HumanUser'},
           {'id': 18, 'name': 'User 2', 'type': 'HumanUser'},
           {'id': 17, 'name': 'User 3', 'type': 'HumanUser'},
           {'id': 16, 'name': 'User 4', 'type': 'HumanUser'},
           {'id': 15, 'name': 'User 5', 'type': 'HumanUser'},
           {'id': 14, 'name': 'User 6', 'type': 'HumanUser'},
           {'id': 13, 'name': 'User 7', 'type': 'HumanUser'},
           {'id': 12, 'name': 'User 8', 'type': 'HumanUser'},
           {'id': 20, 'name': 'Client 1', 'type': 'HumanUser'}]},
 ]

from lxml import etree

def E(tag, parent=None, content=None, children=None, **kw):
  e = etree.Element(tag)
  if not content is None:
    e.text = str(content)
  for k,v in kw.items():
    e.set(k, str(v))
  if not parent is None:
    parent.append(e)
  if not children is None:
    for c in children:
      e.append(c)
  return e

def processProject(data):
  attrs = ('name','type','id')
  p = E('Project')
  for item in attrs:
    p.set(item,str(data[item]))
  for k,v in [ x for x in data.items() if x[0] not in attrs ]:
    if v is None:
      E(k,parent=p)
    elif isinstance(v,basestring):
      E(k,content=v,parent=p)
    elif isinstance(v,(float,long,int)):
      E(k,content=str(v),parent=p)
    elif isinstance(v,datetime.datetime):
      E(k,content=v.strftime('%Y-%m-%d %H%M'),parent=p)
    elif k == 'users':
      users = E(k,parent=p)
      for u in v:
        E('user',parent=users,**dict([ (x,str(y)) for (x,y) in u.items()]))
    elif k in ('updated_by','created_by'):
      E(k,parent=p,**dict([ (x,str(y)) for (x,y) in v.items()]))
    elif k == 'tag_list':
      taglist = E(k,parent=p)
      for t in v:
        E('tag',parent=taglist,content=t)
  return p

&gt;&gt;&gt; projxml = processProject(projects[0])
&gt;&gt;&gt; etree.dump(projxml)
&lt;Project name="Demo Project" type="Project" id="4"&gt;
  &lt;status&gt;Active&lt;/status&gt;
  &lt;code&gt;demo&lt;/code&gt;
  &lt;created_at&gt;2008-06-11 0735&lt;/created_at&gt;
  &lt;due&gt;2009-05-30&lt;/due&gt;
  &lt;created_by/&gt;
  &lt;updated_at&gt;2009-05-27 0141&lt;/updated_at&gt;
  &lt;start&gt;2009-05-06&lt;/start&gt;
  &lt;image&gt;https://website.com/files/0000/0000/blah.jpg&lt;/image&gt;
  &lt;updated_by type="HumanUser" id="24" name="Test"/&gt;
  &lt;users&gt;
    &lt;user type="HumanUser" id="19" name="User 1"/&gt;
    &lt;user type="HumanUser" id="18" name="User 2"/&gt;
    &lt;user type="HumanUser" id="17" name="User 3"/&gt;
    &lt;user type="HumanUser" id="16" name="User 4"/&gt;
    &lt;user type="HumanUser" id="15" name="User 5"/&gt;
    &lt;user type="HumanUser" id="14" name="User 6"/&gt;
    &lt;user type="HumanUser" id="13" name="User 7"/&gt;
    &lt;user type="HumanUser" id="12" name="User 8"/&gt;
    &lt;user type="HumanUser" id="20" name="Client 1"/&gt;
  &lt;/users&gt;
  &lt;tag_list/&gt;
  &lt;stype&gt;Demo&lt;/stype&gt;
  &lt;description&gt;This is for demonstration purposes&lt;/description&gt;
&lt;/Project&gt;
</snippet></ROW><ROW><id>2280671</id><snippet>INFORMATION_SCHEMA</snippet></ROW><ROW><id>2280671</id><snippet>REFERENTIAL_CONSTRAINTS</snippet></ROW><ROW><id>2280671</id><snippet>KEY_COLUMN_USAGE</snippet></ROW><ROW><id>2280671</id><snippet>TABLE_CONSTRAINTS</snippet></ROW><ROW><id>2280671</id><snippet>INFORMATION_SCHEMA</snippet></ROW><ROW><id>2280671</id><snippet>SELECT</snippet></ROW><ROW><id>2280671</id><snippet>orm</snippet></ROW><ROW><id>2280671</id><snippet>backref</snippet></ROW><ROW><id>2280671</id><snippet>child1.Parent</snippet></ROW><ROW><id>2280671</id><snippet>Table</snippet></ROW><ROW><id>2280671</id><snippet>backref</snippet></ROW><ROW><id>2280671</id><snippet>foreign_keys</snippet></ROW><ROW><id>2280671</id><snippet>ForeignKey</snippet></ROW><ROW><id>2280671</id><snippet>references(...)</snippet></ROW><ROW><id>2280800</id><snippet>#!/usr/bin/env python
from html5lib import HTMLParser, treebuilders

parser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))

c = """&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Title&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;...... &lt;/BODY&gt;&lt;/HTML&gt;"""

soup = parser.parse(c)
print soup.prettify()
</snippet></ROW><ROW><id>2280800</id><snippet>&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;
   Title
  &lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  ......
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2280910</id><snippet>/modules/</snippet></ROW><ROW><id>2280910</id><snippet>import edit</snippet></ROW><ROW><id>2280910</id><snippet>import edit</snippet></ROW><ROW><id>2280923</id><snippet>d = {(1, 2): 'a', (3, 8, 1): 'b'}  # Valid.
d = {[1, 2]: 'a', [3, 8, 1]: 'b'}  # Error.
</snippet></ROW><ROW><id>2280936</id><snippet>curs.execute("insert into location_tr values\
        (NULL, '%s', '%s')" % (data.entries[i].title, data.feed.updated))
</snippet></ROW><ROW><id>2281001</id><snippet>__new__</snippet></ROW><ROW><id>2281001</id><snippet>__prepare__</snippet></ROW><ROW><id>2281194</id><snippet>dumps</snippet></ROW><ROW><id>2281194</id><snippet>&gt;&gt;&gt; from django.utils.simplejson import dumps, loads
&gt;&gt;&gt; original = u'\u042e\u0449\u0435\u043d\u043a\u043e'
&gt;&gt;&gt; print original
Ющенко
&gt;&gt;&gt; encoded = dumps(original)
&gt;&gt;&gt; print encoded
"\u042e\u0449\u0435\u043d\u043a\u043e"
&gt;&gt;&gt; decoded = loads(encoded)
&gt;&gt;&gt; print decoded
Ющенко
</snippet></ROW><ROW><id>2281390</id><snippet>def Authorize(self,jid):
  """ Authorise JID 'jid'. Works only if these JID requested auth previously. """ 
  self._owner.send(Presence(jid,'subscribed')) 
</snippet></ROW><ROW><id>2281439</id><snippet>for line in open("file"):
    if " Deposit" in line:
         line=line.rstrip()
         print line.split()
</snippet></ROW><ROW><id>2281439</id><snippet>for line in open("file"):
    if "Deposit" in line:
         line=line.rstrip()
         print line[line.index("Deposit"):].split()
</snippet></ROW><ROW><id>2282318</id><snippet>python_select</snippet></ROW><ROW><id>2282318</id><snippet>port</snippet></ROW><ROW><id>2282318</id><snippet>easy_install</snippet></ROW><ROW><id>2282318</id><snippet>sys.path</snippet></ROW><ROW><id>2282318</id><snippet>ports</snippet></ROW><ROW><id>2282335</id><snippet>new = [[x, y, val] for (x, y), val in zip(points, vals)]
</snippet></ROW><ROW><id>2282568</id><snippet>lang = lang and lang.get_name()</snippet></ROW><ROW><id>2282568</id><snippet>lang != None</snippet></ROW><ROW><id>2282568</id><snippet>not lang is None</snippet></ROW><ROW><id>2282648</id><snippet>__main__</snippet></ROW><ROW><id>2282648</id><snippet>def print_method_module(method):
    def printer(self):
        name = self.__module__
        if name == '__main__':
            filename = sys.modules[self.__module__].__file__
            name = os.path.splitext(os.path.basename(filename))[0]
        print name
        return method(self)
    return printer
</snippet></ROW><ROW><id>2282656</id><snippet>timeout.py</snippet></ROW><ROW><id>2282656</id><snippet>from functools import wraps
import errno
import os
import signal

class TimeoutError(Exception):
    pass

def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wraps(func)(wrapper)

    return decorator
</snippet></ROW><ROW><id>2282656</id><snippet>@timeout</snippet></ROW><ROW><id>2282656</id><snippet>from timeout import timeout

# Timeout a long running function with the default expiry of 10 seconds.
@timeout
def long_running_function1():
    ...

# Timeout after 5 seconds
@timeout(5)
def long_running_function2():
    ...

# Timeout after 30 seconds, with the error "Connection timed out"
@timeout(30, os.strerror(errno.ETIMEDOUT))
def long_running_function3():
    ...
</snippet></ROW><ROW><id>2282795</id><snippet>x</snippet></ROW><ROW><id>2282795</id><snippet>y</snippet></ROW><ROW><id>2282795</id><snippet>x.__op__(y)</snippet></ROW><ROW><id>2282795</id><snippet>NotImplemented</snippet></ROW><ROW><id>2282795</id><snippet>y.__rop__(x)</snippet></ROW><ROW><id>2282795</id><snippet>NotImplemented</snippet></ROW><ROW><id>2282795</id><snippet>__rop__()</snippet></ROW><ROW><id>2282795</id><snippet>__rop__()</snippet></ROW><ROW><id>2282795</id><snippet>__op__()</snippet></ROW><ROW><id>2282858</id><snippet>reload</snippet></ROW><ROW><id>2282858</id><snippet>reload</snippet></ROW><ROW><id>2283061</id><snippet>from __future__ import generators</snippet></ROW><ROW><id>2283243</id><snippet>funcdict = {
  'mypackage.mymodule.myfunction': mypackage.mymodule.myfunction,
    ....
}

funcdict[myvar](parameter1, parameter2)
</snippet></ROW><ROW><id>2283300</id><snippet>use strict</snippet></ROW><ROW><id>2283381</id><snippet>obj = PageModel.get_by_id(page_id)
</snippet></ROW><ROW><id>2283381</id><snippet>obj.key().id()</snippet></ROW><ROW><id>2283381</id><snippet>PageModel</snippet></ROW><ROW><id>2283423</id><snippet>import app.config.db_config</snippet></ROW><ROW><id>2283423</id><snippet>app</snippet></ROW><ROW><id>2283423</id><snippet>sys.path</snippet></ROW><ROW><id>2283423</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2283888</id><snippet>from twisted.application.service import Service</snippet></ROW><ROW><id>2283888</id><snippet>startService</snippet></ROW><ROW><id>2283888</id><snippet>amulecmd</snippet></ROW><ROW><id>2283888</id><snippet>#!/usr/bin/env python
# vim:ai:et:ts=2:sw=2:bg=dark
from twisted.internet import protocol
from twisted.protocols.basic import LineOnlyReceiver
from twisted.application import service


from xml.etree import ElementTree as ET

from aMuleClass import amulecmd

class DialogueProtocol(LineOnlyReceiver):
  def connectionMade(self):
    print "Connected: %s" % self.transport.getPeer().host
  def lineReceived(self, line):
    parsed= ET.XML(line)
    if parsed.attrib['type'] == 'request':
      if parsed.attrib['prompt'] == 'results':
        self.transport.write(self.factory.mule.results())
      elif parsed.attrib['prompt'] == 'downloads':
        self.transport.write(self.factory.mule.downloads())
      else:
        print "Invalid request: %s\n" % line
    else:
      query= parsed.attrib['value']
      if parsed.attrib['type'] == 'search':
        print "must search for %s" % query
        self.factory.mule.search(query)
      elif parsed.attrib['type'] == 'cancel':
        print "must cancel %s" % query
        self.factory.mule.command("cancel %s" % query)
      elif parsed.attrib['type'] == 'download':
        print "must download %s" % query
        self.factory.mule.command("download %s" % query)

class MyService(service.Service):
  def __init__(self,port=14000):
    self.port = port
  def startService(self):
    self.factory = protocol.Factory()
    self.factory.protocol = DialogueProtocol
    from twisted.internet import reactor
    reactor.callWhenRunning(self.startListening)
  def startListening(self):
    self.factory.mule = amulecmd()
    from twisted.internet import reactor
    self.listener = reactor.listenTCP(self.port,self.factory)
    print "Started listening"
  def stopService(self):
    self.listener.stopListening()

if __name__ == '__main__':
  pass
else:
  application = service.Application("aMuleSocket")
  services = service.IServiceCollection(application)
  MyService().setServiceParent(services)
</snippet></ROW><ROW><id>2284238</id><snippet>__dict__</snippet></ROW><ROW><id>2284238</id><snippet>In [1]: class data:
   ...:     def __init__(self, **kwargs):
   ...:         self.__dict__.update(kwargs)
   ...: 

In [2]: d = data(foo=1, bar=2)

In [3]: d.foo
Out[3]: 1

In [4]: d.bar
Out[4]: 2
</snippet></ROW><ROW><id>2284334</id><snippet>gedit.Document</snippet></ROW><ROW><id>2284334</id><snippet>GtkSourceBuffer</snippet></ROW><ROW><id>2284334</id><snippet>GtkTextBuffer</snippet></ROW><ROW><id>2284334</id><snippet>get_insert()</snippet></ROW><ROW><id>2284334</id><snippet>place_cursor(where)</snippet></ROW><ROW><id>2284334</id><snippet>GtkTextIter</snippet></ROW><ROW><id>2284334</id><snippet>get_iter_at_mark(mark)</snippet></ROW><ROW><id>2284334</id><snippet>GtkTextMark</snippet></ROW><ROW><id>2284634</id><snippet>s = numpy.sum((A[:,:,0:3]-B[:,:,0:3])**2)
</snippet></ROW><ROW><id>2284634</id><snippet>sum((A-B)**2)</snippet></ROW><ROW><id>2284634</id><snippet>((A-B)**2).sum()</snippet></ROW><ROW><id>2284899</id><snippet>tabsize = view.get_tab_width()
spaces = " " * tabsize
after = after.replace("\t",spaces)
</snippet></ROW><ROW><id>2284899</id><snippet>after = after.replace("\t", " " * view.get_tab_width())
</snippet></ROW><ROW><id>2284899</id><snippet>if lang == 'CSS':
    after = zen_core.expand_abbreviation(before,'css','xhtml')
else:
    after = zen_core.expand_abbreviation(before,'html','xhtml')
</snippet></ROW><ROW><id>2284899</id><snippet>after = zen_core.expand_abbreviation(before, 'css' if lang == 'CSS' else 'html', 'xhtml')
</snippet></ROW><ROW><id>2285024</id><snippet>import first</snippet></ROW><ROW><id>2285024</id><snippet>first.First</snippet></ROW><ROW><id>2285024</id><snippet>from first import First</snippet></ROW><ROW><id>2285169</id><snippet>C:\&gt;cd \Users\Junior\Downloads\Python\html5lib-0.90\
C:\Users\Junior\Downloads\Python\html5lib-0.90&gt;python setup.py install
</snippet></ROW><ROW><id>2285295</id><snippet>lst = map(int, raw_input().split())
</snippet></ROW><ROW><id>2285295</id><snippet>raw_input()</snippet></ROW><ROW><id>2285295</id><snippet>\n</snippet></ROW><ROW><id>2285295</id><snippet>.split()</snippet></ROW><ROW><id>2285295</id><snippet>map(int, ...)</snippet></ROW><ROW><id>2285785</id><snippet>def function1(a):
    print a

def function2(b):
    print b

def function3(c):
    print c

def function4():
    return "hello!"

def main():
    a, b, c = (1, 2, 3)
    function1(a)
    function2(b)
    function3(c)
    d = function4()
    print d

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>2285785</id><snippet>functions.py</snippet></ROW><ROW><id>2285785</id><snippet>import functions</snippet></ROW><ROW><id>2285785</id><snippet>import functions

def main():
    a, b, c = (1, 2, 3)
    functions.function1(a)
    functions.function2(b)
    functions.function3(c)
    d = functions.function4()
    print d

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>2285887</id><snippet>set.add()</snippet></ROW><ROW><id>2285887</id><snippet>set</snippet></ROW><ROW><id>2285887</id><snippet>set</snippet></ROW><ROW><id>2285887</id><snippet>word_dict = dict()
word_dict["foo"] = set()
word_dict["foo"].add("baz")                                    
word_dict["foo"].add("bang")
</snippet></ROW><ROW><id>2285887</id><snippet>for</snippet></ROW><ROW><id>2285887</id><snippet>for key in word_dict:
   print key, word_dict[key]
</snippet></ROW><ROW><id>2285887</id><snippet>word_dict.items()</snippet></ROW><ROW><id>2285887</id><snippet>word_dict.iteritems()</snippet></ROW><ROW><id>2285887</id><snippet>for key, value in word_dict.items():
   print key, value
</snippet></ROW><ROW><id>2286080</id><snippet>class TreeNode:
    children = []
</snippet></ROW><ROW><id>2286080</id><snippet>children</snippet></ROW><ROW><id>2286080</id><snippet>def add_child(self, child):
    self.children.append(child)
</snippet></ROW><ROW><id>2286080</id><snippet>class TreeNode(object):
    numChildren = 0
    board = zeros([8,8], Int)
    turn_color = 0 # signifies NEXT to act
    board_score = 0 # tally together board items
    recursive_score = 0 # set when the recursive score function is called

def __init__(self, board, turn_color):
    self.children = []
    self.board = copy.deepcopy(board)
    self.turn_color = turn_color
... etc, etc ...
</snippet></ROW><ROW><id>2286080</id><snippet>self.children</snippet></ROW><ROW><id>2286080</id><snippet>__init__</snippet></ROW><ROW><id>2286080</id><snippet>object</snippet></ROW><ROW><id>2286094</id><snippet>multiprocessing</snippet></ROW><ROW><id>2286349</id><snippet>Logger.debug()</snippet></ROW><ROW><id>2286478</id><snippet>C = http.cookie.SimpleCookie</snippet></ROW><ROW><id>2286478</id><snippet>C.output()</snippet></ROW><ROW><id>2286478</id><snippet>wfile</snippet></ROW><ROW><id>2286478</id><snippet>req_handler.send_response(200, 'OK')
req_handler.wfile.write(C.output()) # you may need to .encode() the C.output()
req_handler.end_headers()
#write body...
</snippet></ROW><ROW><id>2286608</id><snippet>if diff:</snippet></ROW><ROW><id>2286608</id><snippet>&gt;&gt;&gt; after_short_program = [
...     'Evgeni Plushenko',
...     'Evan Lysacek',
...     'Daisuke Takahashi',
...     'Nobunari Oda',
...     'Stephane Lambiel',
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; after_free_skate = [
...     'Evan Lysacek',
...     'Daisuke Takahashi',
...     'Evgeni Plushenko',
...     'Stephane Lambiel',
...     'Nobunari Oda',
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; for i,item in enumerate(after_free_skate):
...     diff = after_short_program.index(item)-i
...     print "%s (%+d)"%(item,diff)
...     
... 
Evan Lysacek (+1)
Daisuke Takahashi (+1)
Evgeni Plushenko (-2)
Stephane Lambiel (+1)
Nobunari Oda (-1)
</snippet></ROW><ROW><id>2286608</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; 
&gt;&gt;&gt; after_short_program = {
...     'Evgeni Plushenko':1,
...     'Evan Lysacek':2,
...     'Daisuke Takahashi':3,
...     'Stephane Lambiel':4,
...     'Nobunari Oda':5,
... }
&gt;&gt;&gt; 
&gt;&gt;&gt; after_free_skate = {
...     'Evan Lysacek':1,
...     'Daisuke Takahashi':2,
...     'Evgeni Plushenko':3,
...     'Stephane Lambiel':4,   # These are tied
...     'Nobunari Oda':4,       # at 4th place
... }
&gt;&gt;&gt; 
&gt;&gt;&gt; for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):
...     diff = after_short_program[k]-v
...     print "%s (%+d)"%(k,diff)
...     
... 
Evan Lysacek (+1)
Daisuke Takahashi (+1)
Evgeni Plushenko (-2)
Nobunari Oda (+1)
Stephane Lambiel (+0)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2286608</id><snippet>for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):
    try:
        diff = after_short_program[k]-v
        print "%s (%+d)"%(k,diff)
    except KeyError:
        print "%s (new)"%k
</snippet></ROW><ROW><id>2286704</id><snippet>&lt;l&gt;</snippet></ROW><ROW><id>2286704</id><snippet>&lt;v&gt;</snippet></ROW><ROW><id>2286704</id><snippet>from xml.dom.minidom import parseString

xmlDoc = parseString("""&lt;document goes here&gt;""")
lNodesWithLevel2 = [lNode for lNode in xmlDoc.getElementsByTagName("l")
                    if lNode.getAttribute("k") == "Level2"]

matchingVNodes = map(lambda lNode: lNode.getElementsByTagName("v"), lNodesWithLevel2)

print map(lambda vNode: vNode.firstChild.nodeValue, matchingVNodes)
# Prints [u'Intermediate Level']
</snippet></ROW><ROW><id>2287027</id><snippet>process = subprocess.Popen(['tf', 'changeset', '12345'], cwd='c:/somedir', env={'SOMEENVVAR': 'SOMEVALUE', ...}, stdout=subprocess.PIPE)

for line in process.stdout:
  print line

process.terminate()
</snippet></ROW><ROW><id>2287078</id><snippet>ant devmode -Dport=8821
</snippet></ROW><ROW><id>2287078</id><snippet>&lt;property name="port" value="8080" /&gt;  //replace 8080 with the default value you want.
</snippet></ROW><ROW><id>2287078</id><snippet>&lt;arg value="-port"/&gt;
&lt;arg value="${port}"/&gt;
</snippet></ROW><ROW><id>2287124</id><snippet>&gt;&gt;&gt; d={"key" : (100,"edge_list")}
&gt;&gt;&gt; for i,(time,edge_list) in d.items():
...  d[i] = time+1, edge_list
... 
&gt;&gt;&gt; d
{'key': (101, 'edge_list')}
</snippet></ROW><ROW><id>2287202</id><snippet>LOAD</snippet></ROW><ROW><id>2287202</id><snippet>query = "LOAD DATA INFILE '/path/to/file' INTO TABLE atable FIELDS TERMINATED BY ',' ENCLOSED BY '\"' ESCAPED BY '\\\\'"
cursor.execute( query )
</snippet></ROW><ROW><id>2287202</id><snippet>INSERT INTO x (a,b)
VALUES 
('1', 'one'),
('2', 'two'),  
('3', 'three')
</snippet></ROW><ROW><id>2287409</id><snippet>@last_modified</snippet></ROW><ROW><id>2287409</id><snippet>@etag</snippet></ROW><ROW><id>2287409</id><snippet>django.middleware.http.ConditionalGetMiddleware</snippet></ROW><ROW><id>2287536</id><snippet>engine</snippet></ROW><ROW><id>2287536</id><snippet>central_db</snippet></ROW><ROW><id>2287536</id><snippet>def __init__(self):
    global engine
    global central_db
    engine = engine_from_config(config, 'sqlalchemy.central.')     
    central_db = create_engine(engine)
</snippet></ROW><ROW><id>2287536</id><snippet>engine</snippet></ROW><ROW><id>2287536</id><snippet>central_db</snippet></ROW><ROW><id>2287980</id><snippet>altsep</snippet></ROW><ROW><id>2287980</id><snippet>&gt;&gt;&gt; import re, os.path
&gt;&gt;&gt; seps = os.path.sep
&gt;&gt;&gt; if os.path.altsep:
...   seps += os.path.altsep
...
&gt;&gt;&gt; seps
'\\/'
&gt;&gt;&gt; somepath = r"C:\foo/bar.txt"
&gt;&gt;&gt; print re.split('[%s]' % (seps,), somepath)
['C:\\foo', 'bar.txt'] # Whoops!! it was splitting using [\/] same as [/]
&gt;&gt;&gt; print re.split('[%r]' % (seps,), somepath)
['C:', 'foo', 'bar.txt'] # after fixing it
&gt;&gt;&gt; print re.split('[%r]' % seps, somepath)
['C:', 'foo', 'bar.txt'] # removed redundant cruft
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2287980</id><snippet>r"./foo/bar.txt"</snippet></ROW><ROW><id>2287980</id><snippet>r"C:foo\bar.txt"</snippet></ROW><ROW><id>2287980</id><snippet>[".", "foo", "bar.txt"]</snippet></ROW><ROW><id>2287980</id><snippet>["C:foo", "bar.txt"]</snippet></ROW><ROW><id>2287980</id><snippet>["", "CWD", "foo", "bar.txt"]</snippet></ROW><ROW><id>2287980</id><snippet>["C:", "CWD", "foo", "bar.txt"]</snippet></ROW><ROW><id>2287980</id><snippet>os.path.altsep</snippet></ROW><ROW><id>2287980</id><snippet>foo/bar/zot/../../whoopsy/daisy/somewhere/else</snippet></ROW><ROW><id>2287980</id><snippet>&gt;&gt;&gt; os.path.abspath(r"C:/hello\world.txt")
'C:\\hello\\world.txt'
&gt;&gt;&gt; os.path.abspath(r"C:hello\world.txt")
'C:\\Documents and Settings\\sjm_2\\hello\\world.txt'
&gt;&gt;&gt; os.path.abspath(r"/hello\world.txt")
'C:\\hello\\world.txt'
&gt;&gt;&gt; os.path.abspath(r"hello\world.txt")
'C:\\Documents and Settings\\sjm_2\\hello\\world.txt'
&gt;&gt;&gt; os.path.abspath(r"e:hello\world.txt")
'E:\\emoh_ruo\\hello\\world.txt'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2287980</id><snippet>C</snippet></ROW><ROW><id>2287980</id><snippet>\Documents and Settings\sjm_2</snippet></ROW><ROW><id>2287980</id><snippet>\emoh_ruo</snippet></ROW><ROW><id>2287980</id><snippet>and</snippet></ROW><ROW><id>2287980</id><snippet>or</snippet></ROW><ROW><id>2288126</id><snippet>import wmi
c = wmi.WMI()
for cdrom in c.Win32_CDROMDrive():
    print cdrom.Drive, cdrom.MediaLoaded
</snippet></ROW><ROW><id>2288126</id><snippet>Drive</snippet></ROW><ROW><id>2288126</id><snippet>MediaLoaded</snippet></ROW><ROW><id>2288126</id><snippet>Win32_CDROMDrive</snippet></ROW><ROW><id>2288516</id><snippet>def to_base_5(n):
    s=[]
    while n:
        s.append(str(n%5))
        n=n/5
    return ''.join(s[::-1])
</snippet></ROW><ROW><id>2288516</id><snippet>def to_base_5(n):
    s=""
    while n:
        s=str(n%5)+s
        n=n/5
    return s
</snippet></ROW><ROW><id>2288629</id><snippet>os.path.split</snippet></ROW><ROW><id>2288629</id><snippet>&gt;&gt;&gt; import os.path    
&gt;&gt;&gt; olddir = None
&gt;&gt;&gt; for name in open('input.txt'):
    dirname, fname = os.path.split(name)
    if olddir != dirname:
        prefix = ' ' * (len(dirname) +1)
        olddir = dirname
        print(name)
    else:
        print(prefix + fname)


/home/abc/a.txt
          b.txt
/home/xyz/test/d.txt
               e.txt
               f.txt
/home/xyz/g.txt
</snippet></ROW><ROW><id>2288875</id><snippet>if</snippet></ROW><ROW><id>2288875</id><snippet>for idA,val in enumerate(items):
    for idB in range(0, idA):
        process_it(val,items[idB]) 
</snippet></ROW><ROW><id>2288875</id><snippet>process_it</snippet></ROW><ROW><id>2288897</id><snippet>separators = [u"।", u",", u"."]
text = open("indiantext.txt").read()
#This converts the encoded text to an internal unicode object, where
# all characters are properly recognized as an entity:
text = text.decode("utf-8")

#this breaks the text on the white spaces, yielding a list of words:
words = text.split()

counter = 1

output = ""
for word in words:
    #if the last char is a separator, and is joined to the word:
    if word[-1] in separators and len(word) &gt; 1:
        #word up to the second to last char:
        output += word[:-1] + u"(%d) " % counter
        counter += 1
        #last char
        output += word[-1] +  u"(%d) " % counter
    else:
        output += word + u"(%d) " % counter
    counter += 1

print output
</snippet></ROW><ROW><id>2289108</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>2289108</id><snippet>heapq.nsmallest</snippet></ROW><ROW><id>2289108</id><snippet>import heapq

elements = heapq.nsmallest(4, my_list, key=f)
foo = choice(elements)
</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>self.isValid</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>type(self).isValid(self)</snippet></ROW><ROW><id>2289840</id><snippet>classmethods</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>State</snippet></ROW><ROW><id>2289840</id><snippet>class _NotValid(object):
  def isValid(self):
    return False
  def setValid(self, yesno):
    if yesno:
      self.__class__ = TheGoodOne

class TheGoodOne(object):
  def isValid(self):
    return True
  def setValid(self, yesno):
    if not yesno:
      self.__class__ = _NotValid
  # write all other methods here
</snippet></ROW><ROW><id>2289840</id><snippet>setValid</snippet></ROW><ROW><id>2289840</id><snippet>__class__</snippet></ROW><ROW><id>2289840</id><snippet>__class__</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>class _Valid(object):
  def __init__(self, actualobject):
    self._actualobject = actualobject
  # all actual methods go here
  # keeping state in self._actualobject

class Wrapit(object):
  def __init__(self):
    self._themethods = _Valid(self)
  def isValid(self):
    # whatever logic you want
    # (DON'T call other self. methods!-)
    return False
  def __getattr__(self, n):
    if self.isValid():
      return getattr(self._themethods, n)
    raise AttributeError(n)
</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>__getattr__</snippet></ROW><ROW><id>2289840</id><snippet>__dict__</snippet></ROW><ROW><id>2289840</id><snippet>_Valid</snippet></ROW><ROW><id>2289840</id><snippet>self._actualobject</snippet></ROW><ROW><id>2289840</id><snippet>__getattribute__</snippet></ROW><ROW><id>2289840</id><snippet>_actualobject</snippet></ROW><ROW><id>2289840</id><snippet>_Valid</snippet></ROW><ROW><id>2289840</id><snippet>_themethods</snippet></ROW><ROW><id>2289911</id><snippet>sorted(array, key=lambda x:x[:24])
</snippet></ROW><ROW><id>2289911</id><snippet>&gt;&gt;&gt; a = ["wxyz", "abce", "abcd", "bcde"]
&gt;&gt;&gt; sorted(a)
['abcd', 'abce', 'bcde', 'wxyz']
&gt;&gt;&gt; sorted(a, key=lambda x:x[:3])
['abce', 'abcd', 'bcde', 'wxyz']
</snippet></ROW><ROW><id>2290035</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>2290035</id><snippet>zipfile</snippet></ROW><ROW><id>2290035</id><snippet>zipfile.ZipFile</snippet></ROW><ROW><id>2290035</id><snippet>read()</snippet></ROW><ROW><id>2290035</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>2290035</id><snippet>&gt;&gt;&gt; files = urllib2.urlopen('ftp://ftp2.census.gov/geo/tiger/TIGER2008/01_ALABAMA/').read().splitlines()
&gt;&gt;&gt; for l in files[:4]: print l
... 
drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01001_Autauga_County
drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01003_Baldwin_County
drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01005_Barbour_County
drwxrwsr-x    2 0        4009         4096 Nov 26  2008 01007_Bibb_County
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2290035</id><snippet>&gt;&gt;&gt; for l in files[:4]: print l.split()[-1]
... 
01001_Autauga_County
01003_Baldwin_County
01005_Barbour_County
01007_Bibb_County
</snippet></ROW><ROW><id>2290235</id><snippet>permute_sequence</snippet></ROW><ROW><id>2290235</id><snippet>permute_sequence(range(1000))</snippet></ROW><ROW><id>2290235</id><snippet>    [500, 250, 750, 125, 625, 375, ...]
</snippet></ROW><ROW><id>2290235</id><snippet>calculate_jobs</snippet></ROW><ROW><id>2290235</id><snippet>permute_sequence</snippet></ROW><ROW><id>2290235</id><snippet>    [0, 1000, 500, 250, 750, 125, 625, 375, ...]
</snippet></ROW><ROW><id>2290634</id><snippet># models/__init__.py shown:
import user, other                 # ambiguous relative import
from . import user, other          # relative import
from app.models import user, other # absolute import
</snippet></ROW><ROW><id>2290634</id><snippet>import models</snippet></ROW><ROW><id>2290634</id><snippet>from models import user, other
# or:
import models.user, models.other
</snippet></ROW><ROW><id>2290711</id><snippet>x</snippet></ROW><ROW><id>2290711</id><snippet>nonlocal</snippet></ROW><ROW><id>2290711</id><snippet>global</snippet></ROW><ROW><id>2290819</id><snippet>getattr</snippet></ROW><ROW><id>2290819</id><snippet>getattr(x, 'foobar')</snippet></ROW><ROW><id>2290819</id><snippet>x.foobar</snippet></ROW><ROW><id>2290883</id><snippet>&gt;&gt;&gt; re.findall('Message: (.+?)$', s, re.M)
['1st message', '2dn message', '3rd message']
</snippet></ROW><ROW><id>2290883</id><snippet>re.M</snippet></ROW><ROW><id>2290883</id><snippet>^</snippet></ROW><ROW><id>2290883</id><snippet>$</snippet></ROW><ROW><id>2290883</id><snippet>'^'</snippet></ROW><ROW><id>2290883</id><snippet>'$'</snippet></ROW><ROW><id>2290883</id><snippet>'^'</snippet></ROW><ROW><id>2290883</id><snippet>'$'</snippet></ROW><ROW><id>2290883</id><snippet>(.+?)$</snippet></ROW><ROW><id>2290883</id><snippet>&gt;&gt;&gt; re.findall('Message: (.+)', s)
['1st message', '2dn message', '3rd message']
</snippet></ROW><ROW><id>2290941</id><snippet>def parseAndEvaluate(exp):
        if gdb.VERSION.startswith("6.8.50.2009"):
            return gdb.parse_and_eval(exp)
        # Work around non-existing gdb.parse_and_eval as in released 7.0
        gdb.execute("set logging redirect on")
        gdb.execute("set logging on")
        gdb.execute("print %s" % exp)
        gdb.execute("set logging off")
        return gdb.history(0)
</snippet></ROW><ROW><id>2290995</id><snippet>from collections import defaultdict

def leaders(xs, top=10):
    counts = defaultdict(int)
    for x in xs:
        counts[x] += 1
    return sorted(counts.items(), reverse=True, key=lambda tup: tup[1])[:top]
</snippet></ROW><ROW><id>2290995</id><snippet>defaultdict</snippet></ROW><ROW><id>2290995</id><snippet>top</snippet></ROW><ROW><id>2290995</id><snippet>&gt;&gt;&gt; xs = list("jkl;fpfmklmcvuioqwerklmwqpmksdvjioh0-45mkofwk903rmiok0fmdfjsd")
&gt;&gt;&gt; print leaders(xs)
[('k', 7), ('m', 7), ('f', 5), ('o', 4), ('0', 3), ('d', 3), ('i', 3), ('j', 3), ('l', 3), ('w', 3)]
</snippet></ROW><ROW><id>2291137</id><snippet>+=</snippet></ROW><ROW><id>2291160</id><snippet>doA</snippet></ROW><ROW><id>2291160</id><snippet>self.doA()</snippet></ROW><ROW><id>2291160</id><snippet>call</snippet></ROW><ROW><id>2291160</id><snippet>CoolIt.call(self.doA, args=(), timeout=100)
</snippet></ROW><ROW><id>2291160</id><snippet>call</snippet></ROW><ROW><id>2291160</id><snippet>doA</snippet></ROW><ROW><id>2291322</id><snippet>class Source(Base):
    __table__ = source

class Event(Base):
    __table__ = event
    source = relation(Source)
</snippet></ROW><ROW><id>2291322</id><snippet>conn = engine.connect()
conn.execute(event.insert(),[
    {'source_id': 1, 'info': 'xyz', 'item': 'foo'},
    {'source_id': 1, 'info': 'xyz', 'item': 'bar'},
    ...
])
</snippet></ROW><ROW><id>2291351</id><snippet>deferred()</snippet></ROW><ROW><id>2291351</id><snippet>class SomeClass(Base):
    __tablename__ = 'some_table'
    id = Column(Integer, primary_key=True)
    name =  deferred(Column(String(50)))
</snippet></ROW><ROW><id>2291403</id><snippet>from Crypto.Cipher import AES
from urllib import quote

# Note that for AES the key length must be either 16, 24, or 32 bytes
encryption_obj = AES.new('abcdefghijklmnop')
plain = "Testing"

# The plaintext must be a multiple of 16 bytes (for AES), so here we pad it
# with spaces if necessary.
mismatch = len(plain) % 16
if mismatch != 0:
  padding = (16 - mismatch) * ' '
  plain += padding

ciph = encryption_obj.encrypt(plain)

# Finally, to make the encrypted string safe to use in a URL we quote it
quoted_ciph = quote(ciph)
</snippet></ROW><ROW><id>2291403</id><snippet>encryption_obj</snippet></ROW><ROW><id>2291403</id><snippet>from urllib import unquote

# We've already created encryption_object as shown above

ciph = unquote(quoted_ciph)
plain = encryption_obj.decrypt(ciph)
</snippet></ROW><ROW><id>2291403</id><snippet>class Pk_lookup(models.Model):
  # since we're using sha256, set the max_length of this field to 32
  hashed_pk = models.CharField(primary_key=True, max_length=32)
  key = models.IntegerField()
</snippet></ROW><ROW><id>2291403</id><snippet>import hashlib
import Pk_lookup

hash = hashlib.sha256()
hash.update(str(pk)) # pk has been defined previously
pk_digest = hash.digest()

lookup = Pk_lookup(hashed_pk=pk_digest,key=pk)
lookup.save()
</snippet></ROW><ROW><id>2291403</id><snippet>hexdigest()</snippet></ROW><ROW><id>2291403</id><snippet>digest</snippet></ROW><ROW><id>2291650</id><snippet>sort()</snippet></ROW><ROW><id>2291863</id><snippet>manage.py reset_db</snippet></ROW><ROW><id>2291992</id><snippet>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; path = "example/path.epub"
&gt;&gt;&gt; epub = zipfile.ZipFile(open(path))
&gt;&gt;&gt; epub.namelist()
 ['some_file.txt']
&gt;&gt;&gt; file = epub.open('some_file.txt')
&gt;&gt;&gt; file.read()
</snippet></ROW><ROW><id>2292166</id><snippet>Process.terminate</snippet></ROW><ROW><id>2293508</id><snippet>Cookie:</snippet></ROW><ROW><id>2293508</id><snippet>output</snippet></ROW><ROW><id>2293508</id><snippet>None</snippet></ROW><ROW><id>2293508</id><snippet>Set-Cookie:</snippet></ROW><ROW><id>2293508</id><snippet>\r\n</snippet></ROW><ROW><id>2293508</id><snippet>thecookie.output(None, '')
</snippet></ROW><ROW><id>2293508</id><snippet>SimpleCookie</snippet></ROW><ROW><id>2293798</id><snippet>Widget.get_parent</snippet></ROW><ROW><id>2293798</id><snippet>show</snippet></ROW><ROW><id>2293798</id><snippet>no-show-all</snippet></ROW><ROW><id>2293798</id><snippet>show_all</snippet></ROW><ROW><id>2293886</id><snippet>insert</snippet></ROW><ROW><id>2293886</id><snippet>cursor.execute('insert into mytable (somefield) values ("%s")' % (mystring))
</snippet></ROW><ROW><id>2293886</id><snippet>cursor.execute('insert into mytable (somefield) values (%(myparam)s)',
                dict(myparam=mystring))
</snippet></ROW><ROW><id>2293998</id><snippet>set</snippet></ROW><ROW><id>2293998</id><snippet>delimiter</snippet></ROW><ROW><id>2293998</id><snippet>' '</snippet></ROW><ROW><id>2293998</id><snippet>lec_name</snippet></ROW><ROW><id>2293998</id><snippet>lec_name</snippet></ROW><ROW><id>2293998</id><snippet>lecturer</snippet></ROW><ROW><id>2293998</id><snippet>lec_name</snippet></ROW><ROW><id>2293998</id><snippet>.add</snippet></ROW><ROW><id>2293998</id><snippet>offered_proj</snippet></ROW><ROW><id>2293998</id><snippet>lecturers[lec_id] = Lecturer(lec_id, lec_name)
if lec_id in lecturers.keys():
    lecturers[lec_id].offered_proj.add(proj_id)
</snippet></ROW><ROW><id>2293998</id><snippet>lecturers</snippet></ROW><ROW><id>2293998</id><snippet>in....keys()</snippet></ROW><ROW><id>2293998</id><snippet>if lec_id in lecturers:
    thelec = lecturers[lec_id]
else:
    thelec = lecturers[lec_id] = Lecturer(lec_id, lec_name)
thelec.offered_proj.add(proj_id)
</snippet></ROW><ROW><id>2293998</id><snippet>thelec = lecturers.get(lec_id)
if thelec is None:
    thelec = lecturers[lec_id] = Lecturer(lec_id, lec_name)
thelec.offered_proj.add(proj_id)
</snippet></ROW><ROW><id>2294045</id><snippet>db.coll.group(
    key='function(doc) { return {"dt": doc.dt.toDateString()} }',
    condition={'dt': {'$gt': datetime_obj_30_days_ago}},
    initial={'downloads': 0},
    reduce='function(curr, prev) { prev.downloads = Math.max(curr.downloads, prev.downloads) }'
)
</snippet></ROW><ROW><id>2294165</id><snippet>&gt;&gt;&gt; def foo(x):
...   return x + a
&gt;&gt;&gt; foo
&lt;function foo at 0xb7dde454&gt;
&gt;&gt;&gt; foo(2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in foo
NameError: global name 'a' is not defined
</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>AutoOneToOneField</snippet></ROW><ROW><id>2294228</id><snippet>user.userprofile</snippet></ROW><ROW><id>2294228</id><snippet>user.get_profile()</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>user.get_profile()</snippet></ROW><ROW><id>2294228</id><snippet>DoesNotExist</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>POST</snippet></ROW><ROW><id>2294228</id><snippet>Form</snippet></ROW><ROW><id>2294228</id><snippet>ModelForm</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>UserProfile</snippet></ROW><ROW><id>2294228</id><snippet>User</snippet></ROW><ROW><id>2294228</id><snippet>ForeignKey</snippet></ROW><ROW><id>2294228</id><snippet>unique=True</snippet></ROW><ROW><id>2294228</id><snippet>ModelAdmin</snippet></ROW><ROW><id>2294359</id><snippet>ctypes</snippet></ROW><ROW><id>2294359</id><snippet>#include &lt;stdlib.h&gt;

float mysumsquares(float * array, size_t size) {
    float total = 0.0f;
    size_t idx;
    for (idx = 0; idx &lt; size; ++idx) {
        total += array[idx]*array[idx];
    }
    return total;
}
</snippet></ROW><ROW><id>2294359</id><snippet>$ gcc -O3 -fPIC -c ctsquare.c -o ctsquare.o
$ ld -dylib -o ctsquare.so -lc ctsquare.o
</snippet></ROW><ROW><id>2294359</id><snippet>import numpy
import ctypes

# pointer to float type, for convenience
c_float_p = ctypes.POINTER(ctypes.c_float)

# load the library
ctsquarelib = ctypes.cdll.LoadLibrary("ctsquare.so")

# define the return type and arguments of the function
ctsquarelib.mysumsquares.restype = ctypes.c_float
ctsquarelib.mysumsquares.argtypes = [c_float_p, ctypes.c_size_t]

# python front-end function, takes care of the ctypes interface
def myssq(arr):
    # make sure that the array is contiguous and the right data type
    arr = numpy.ascontiguousarray(arr, dtype='float32')

    # grab a pointer to the array's data
    dataptr = arr.ctypes.data_as(c_float_p)

    # this assumes that the array is 1-dimensional. 2d is more complex.
    datasize = arr.ctypes.shape[0]

    # call the C function
    ret = ctsquarelib.mysumsquares(dataptr, datasize)

    return ret

if __name__ == '__main__':
    a = numpy.array([1,2,3,4])
    print 'sum of squares of [1,2,3,4] =', myssq(a)
</snippet></ROW><ROW><id>2294489</id><snippet>if</snippet></ROW><ROW><id>2294489</id><snippet>if True:
  x = 5
else:
  x = y    # huh? what is y?
</snippet></ROW><ROW><id>2294489</id><snippet>else</snippet></ROW><ROW><id>2294489</id><snippet>y</snippet></ROW><ROW><id>2294489</id><snippet>else</snippet></ROW><ROW><id>2294489</id><snippet>if stuff:
   print stuff.contents
else:
   print "no stuff"
</snippet></ROW><ROW><id>2294489</id><snippet>stuff.contents</snippet></ROW><ROW><id>2294489</id><snippet>stuff</snippet></ROW><ROW><id>2294489</id><snippet>contents</snippet></ROW><ROW><id>2294489</id><snippet>if</snippet></ROW><ROW><id>2294489</id><snippet>stuff</snippet></ROW><ROW><id>2294489</id><snippet>None</snippet></ROW><ROW><id>2294489</id><snippet>else</snippet></ROW><ROW><id>2294548</id><snippet>print()</snippet></ROW><ROW><id>2294548</id><snippet>print(ascii(foo))</snippet></ROW><ROW><id>2294548</id><snippet>print(foo)</snippet></ROW><ROW><id>2294548</id><snippet>repr()</snippet></ROW><ROW><id>2294548</id><snippet>ascii()</snippet></ROW><ROW><id>2294631</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack("l",1024)
'\x00\x04\x00\x00'
&gt;&gt;&gt; struct.pack("l",10240)
'\x00(\x00\x00'
&gt;&gt;&gt; struct.pack("l",900000)
'\xa0\xbb\r\x00'
</snippet></ROW><ROW><id>2294847</id><snippet>a, b, c = [], [], []
</snippet></ROW><ROW><id>2294857</id><snippet>result = newline #you lose the newline here
</snippet></ROW><ROW><id>2294857</id><snippet>result = newline + '\n' #or '\r\n' depending on your newline format.
</snippet></ROW><ROW><id>2294967</id><snippet>&lt;xs:schema elementFormDefault="qualified" 
           targetNamespace="http://schemas.datacontract.org/2004/07/Foo" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           xmlns:tns="http://schemas.datacontract.org/2004/07/Foo"&gt;
    &lt;xs:complexType name="ArtPiece"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element minOccurs="0" name="image" nillable="true" type="xs:base64Binary"/&gt;
            &lt;xs:element minOccurs="0" name="imageId" type="xs:int"/&gt;
            &lt;xs:element minOccurs="0" name="title" nillable="true" type="xs:string"/&gt;
            &lt;xs:element minOccurs="0" name="year" nillable="true" type="xs:string"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;

    &lt;xs:element name="ArtPiece" nillable="true" type="tns:ArtPiece"/&gt;

    &lt;xs:complexType name="ArrayOfArtPiece"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element minOccurs="0" maxOccurs="unbounded" name="ArtPiece" nillable="true" type="tns:ArtPiece"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;

    &lt;xs:element name="ArrayOfArtPiece" nillable="true" type="tns:ArrayOfArtPiece"/&gt;
&lt;/xs:schema&gt;
</snippet></ROW><ROW><id>2294994</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

fig = plt.figure()
ax = Axes3D(fig)

x = [6,3,6,9,12,24]
y = [3,5,78,12,23,56]
# put 0s on the y-axis, and put the y axis on the z-axis
ax.plot(xs=x, ys=[0]*len(x), zs=y, zdir='z', label='ys=0, zdir=z')
plt.show()
</snippet></ROW><ROW><id>2294994</id><snippet>ys=[2]*len(x)</snippet></ROW><ROW><id>2295088</id><snippet>px</snippet></ROW><ROW><id>2295088</id><snippet>for i in range(0,blurAmount):
    origPx=getPixel(pic,x+i,y)
    rTotal=rTotal+getRed(origPx)
    gTotal=gTotal+getGreen(origPx)
    bTotal=bTotal+getBlue(origPx)
</snippet></ROW><ROW><id>2295088</id><snippet>main</snippet></ROW><ROW><id>2295088</id><snippet>show( makeBlurredPicture(pic,blurAmount) )
</snippet></ROW><ROW><id>2295368</id><snippet>&gt;&gt;&gt; adders = [0,1,2,3]
&gt;&gt;&gt; for i in [0,1,2,3]:
...     adders[i] = (lambda b: lambda a: b + a)(i)
...     
&gt;&gt;&gt; adders[1](3)
4
&gt;&gt;&gt; adders[2](3)
5
</snippet></ROW><ROW><id>2295368</id><snippet>def createAdder(x):
    return lambda y: y + x
adders = [createAdder(i) for i in range(4)]
</snippet></ROW><ROW><id>2295480</id><snippet>None</snippet></ROW><ROW><id>2295480</id><snippet>&gt;&gt;&gt; print min([None, 1,2])
None
&gt;&gt;&gt; None &lt; 1
True
</snippet></ROW><ROW><id>2295480</id><snippet>1</snippet></ROW><ROW><id>2295480</id><snippet>None</snippet></ROW><ROW><id>2295480</id><snippet>&gt;&gt;&gt; L = [None, 1, 2]
&gt;&gt;&gt; min(x for x in L if x is not None)
1
</snippet></ROW><ROW><id>2295784</id><snippet>do_something</snippet></ROW><ROW><id>2295784</id><snippet>class ChildClass1( ParentClass ):
    def do_something( argument_x= None )
        ....
</snippet></ROW><ROW><id>2295784</id><snippet>class ChildClass1( ParentClass ):
    def do_something( argument_x )
        return True
</snippet></ROW><ROW><id>2295954</id><snippet>re.sub(r'&lt;[^&gt;]*?&gt;', '', value)</snippet></ROW><ROW><id>2296005</id><snippet>b=BigHash(DB_DIR, url)
try:
    meta = bdecode(b.get())
    return meta
finally:
    #unlock b here
</snippet></ROW><ROW><id>2296005</id><snippet>with b as BigHash(DB_DIR, url):
    meta = bdecode(b.get())
    return meta
</snippet></ROW><ROW><id>2296384</id><snippet>import dateutil.rrule as dr
import dateutil.parser as dp
import dateutil.relativedelta as drel

start=dp.parse("19/02/2010")   # Third Friday in Feb 2010
</snippet></ROW><ROW><id>2296384</id><snippet>rr = dr.rrule(dr.MONTHLY,byweekday=drel.FR(3),dtstart=start, count=10)
</snippet></ROW><ROW><id>2296384</id><snippet>print map(str,rr)
# ['2010-02-19 00:00:00', '2010-03-19 00:00:00', '2010-04-16 00:00:00', '2010-05-21 00:00:00', '2010-06-18 00:00:00', '2010-07-16 00:00:00', '2010-08-20 00:00:00', '2010-09-17 00:00:00', '2010-10-15 00:00:00', '2010-11-19 00:00:00']
</snippet></ROW><ROW><id>2296384</id><snippet>print map(str,rr[::2])
# ['2010-02-19 00:00:00', '2010-04-16 00:00:00', '2010-06-18 00:00:00', '2010-08-20 00:00:00', '2010-10-15 00:00:00']
</snippet></ROW><ROW><id>2296384</id><snippet>str</snippet></ROW><ROW><id>2296384</id><snippet>strftime</snippet></ROW><ROW><id>2296384</id><snippet>print [d.strftime('%d/%m/%Y') for d in rr[::2]]
# ['19/02/2010', '16/04/2010', '18/06/2010', '20/08/2010', '15/10/2010']
</snippet></ROW><ROW><id>2296506</id><snippet>&gt;&gt;&gt; def chain(inp):
    d = {}
    for i in inp:
        d[i[0]] = i[:], i[-1]
    l, n = d.pop(min(d))
    while True:
        lt, n = d.pop(n, [None, None])
        if n is None:
            if len(d) == len(inp) - 1:
                l, n = d.pop(min(d))
                continue
            break
        l += lt[1:]
    return l

&gt;&gt;&gt; chain(input)
[1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; chain(([5,6,7], [1,2,10], [3,4,5], [8, 9]))
[3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>2296536</id><snippet>itertools</snippet></ROW><ROW><id>2296536</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in itertools.product(range(2), repeat=4):
    print(i)
</snippet></ROW><ROW><id>2296561</id><snippet>foo</snippet></ROW><ROW><id>2296561</id><snippet>  joe = 5
</snippet></ROW><ROW><id>2296561</id><snippet>bar</snippet></ROW><ROW><id>2296561</id><snippet>  from foo import joe
  print joe
</snippet></ROW><ROW><id>2296858</id><snippet>for i in range(1024): # some sensible upper limit, beyond which the input is suspicious
    myid= params.getfirst("myfield%d" % i)
    if not myid: break
        # do stuff with myid
</snippet></ROW><ROW><id>2297429</id><snippet>\x13</snippet></ROW><ROW><id>2297429</id><snippet>
</snippet></ROW><ROW><id>2297429</id><snippet>
</snippet></ROW><ROW><id>2297429</id><snippet>&lt;?xml version="1.1"?&gt;</snippet></ROW><ROW><id>2297429</id><snippet>re.sub('[\x00-\x08\x0B-\x1F]', '', s)
</snippet></ROW><ROW><id>2297587</id><snippet>activate.py</snippet></ROW><ROW><id>2297587</id><snippet>~/.ipython</snippet></ROW><ROW><id>2297587</id><snippet>import appscript
import sys
appscript.app(pid=int(sys.argv[1])).activate()
</snippet></ROW><ROW><id>2297587</id><snippet>~/.ipython/ipy_user_conf.py</snippet></ROW><ROW><id>2297587</id><snippet>def wxactivate(self, arg):
   import wx
   pid = wx.GetProcessId()
   ip = self.api
   import os
   here = os.path.dirname(__file__)
   import subprocess
   subprocess.Popen([os.path.join(here, 'activate.py'), str(pid)])
</snippet></ROW><ROW><id>2297587</id><snippet>ip.expose_magic('wxactivate', wxactivate)
</snippet></ROW><ROW><id>2297587</id><snippet>IPython -wthread</snippet></ROW><ROW><id>2297587</id><snippet>%wxactivate</snippet></ROW><ROW><id>2297587</id><snippet>activate()</snippet></ROW><ROW><id>2297655</id><snippet>/* XXX should we allow assignment of different item sizes
   as long as the byte length is the same?
   (e.g. assign 2 shorts to a 4-byte slice) */
if (srcview.itemsize != view-&gt;itemsize) {
    PyErr_Format(PyExc_TypeError,
        "mismatching item sizes for \"%.200s\" and \"%.200s\"", 
        view-&gt;obj-&gt;ob_type-&gt;tp_name, srcview.obj-&gt;ob_type-&gt;tp_name);
    goto _error;
}
</snippet></ROW><ROW><id>2297655</id><snippet>mv[0] = mv[0]
</snippet></ROW><ROW><id>2297847</id><snippet>?</snippet></ROW><ROW><id>2297847</id><snippet>page=1&amp;</snippet></ROW><ROW><id>2297847</id><snippet>page=2&amp;</snippet></ROW><ROW><id>2297875</id><snippet>Derived</snippet></ROW><ROW><id>2297875</id><snippet>d = Derived()</snippet></ROW><ROW><id>2297875</id><snippet>.virtual</snippet></ROW><ROW><id>2297875</id><snippet>d.func()</snippet></ROW><ROW><id>2297875</id><snippet>Derived.virtual</snippet></ROW><ROW><id>2297875</id><snippet>Derived</snippet></ROW><ROW><id>2297875</id><snippet>self</snippet></ROW><ROW><id>2297875</id><snippet>Derived.virtual</snippet></ROW><ROW><id>2298003</id><snippet>sys.stdout</snippet></ROW><ROW><id>2298003</id><snippet>class</snippet></ROW><ROW><id>2298003</id><snippet>file</snippet></ROW><ROW><id>2298003</id><snippet>class StdOut(object):
    def __init__(self,txtctrl):
        self.txtctrl = txtctrl
    def write(self,string):
        self.txtctrl.write(string)

sys.stdout = StdOut(the_text_ctrl)
</snippet></ROW><ROW><id>2298003</id><snippet>file</snippet></ROW><ROW><id>2298123</id><snippet>child</snippet></ROW><ROW><id>2298123</id><snippet>child.value</snippet></ROW><ROW><id>2298123</id><snippet>class ValueAttributeExtension(AttributeExtension):
  ...

class Child(Base):
  ...
  value = ColumnProperty(Column(Integer, nullable=False, default=0), 
                         extension=ValueAttributeExtension()) 
</snippet></ROW><ROW><id>2298123</id><snippet>from sqlalchemy import create_engine, Column, Integer, ForeignKey
from sqlalchemy.orm import relation, scoped_session, sessionmaker, AttributeExtension, ColumnProperty
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite:///:memory:', echo=False)
session = scoped_session(sessionmaker(bind=engine, autoflush=True))
Base = declarative_base()
Base.query = session.query_property()

class ValueAttributeExtension(AttributeExtension):
    active_history = True

    def append(self, state, child, initiator):
        assert False, "should not be called"

    def remove(self, state, child, initiator):
        assert False, "should not be called"

    def set(self, state, value, oldvalue, initiator):
        print 'set called', state.obj(), value, oldvalue
        child = state.obj()
        if not(child.parent is None):
            child.parent.sum_of_children += -oldvalue + value
        return value

class ChildrenAttributeExtension(AttributeExtension):
    active_history = True

    def append(self, state, child, initiator):
        print 'append called', state.obj(), child
        parent = state.obj()
        parent.sum_of_children += child.value
        return child

    def remove(self, state, child, initiator):
        print 'remove called', state.obj(), child
        parent = state.obj()
        parent.sum_of_children -= child.value

    def set(self, state, child, oldchild, initiator):
        print 'set called', state, child, oldchild
        parent = state.obj()
        parent.parent.sum_of_children += -oldchild.value + child.value
        #parent.sum_of_children += -oldchild.value + child.value
        return child

class Child(Base):
    __tablename__ = 'child'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('parent.id'), nullable=False)
    value = ColumnProperty(Column(Integer, nullable=False, default=0),
                    extension=ValueAttributeExtension())

class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)
    sum_of_children = Column(Integer, nullable=False, default=0)

    children = relation('Child', backref='parent',
                        extension=ChildrenAttributeExtension())

Base.metadata.create_all(engine)

# Add a parent
p = Parent()
session.add(p)
session.commit()

p = Parent.query.first()
assert p.sum_of_children == 0


# Add a child
c = Child(parent=p, value=5)
session.add(c)
session.commit()

p = Parent.query.first()
assert p.sum_of_children == 5

# Change a child
#c = Child.query.first()
c.value = 3 # fixed bug: = instead of ==
session.commit()  # extension.set() doesn't get called

p = Parent.query.first()
assert p.sum_of_children == 3 # Assertion is OK
</snippet></ROW><ROW><id>2298271</id><snippet>less -p regex file_name
</snippet></ROW><ROW><id>2298271</id><snippet>some_command | less -p regex
</snippet></ROW><ROW><id>2298316</id><snippet>O(log n)</snippet></ROW><ROW><id>2298316</id><snippet>bisect</snippet></ROW><ROW><id>2298675</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>2298675</id><snippet>QGridLayout</snippet></ROW><ROW><id>2298675</id><snippet>self.ui.layout().setSizeConstraint(QtGui.QLayout.SetFixedSize)</snippet></ROW><ROW><id>2298734</id><snippet>StartServers 8
MaxrequestsPerChild 4000
</snippet></ROW><ROW><id>2298734</id><snippet>import os
if os.uname()[1] == 'my.development.server.com':
    LOCAL = True
else:
    LOCAL = False
</snippet></ROW><ROW><id>2298747</id><snippet>d[a][b][c]</snippet></ROW><ROW><id>2298747</id><snippet>d[a, b, c]</snippet></ROW><ROW><id>2299223</id><snippet>twisted.words</snippet></ROW><ROW><id>2299582</id><snippet>.get()</snippet></ROW><ROW><id>2299582</id><snippet>.get()</snippet></ROW><ROW><id>2299582</id><snippet>Empty</snippet></ROW><ROW><id>2299582</id><snippet>Thread</snippet></ROW><ROW><id>2299582</id><snippet>Thread</snippet></ROW><ROW><id>2299582</id><snippet>target=</snippet></ROW><ROW><id>2299582</id><snippet>.start()</snippet></ROW><ROW><id>2299582</id><snippet>download_queue = queue.Queue()


class Downloader(threading.Thread):
    def __init__(self,work_queue, original_size):
        super().__init__()
        self.current_job = 0
        self.work_queue = work_queue
        self.queue_size = original_size

    def run(self):
        while True:
            try:
                url = self.work_queue.get(False)
                system_call = "wget -nc -q {0} -O {1}".format(url,local_file)
                os.system(system_call)
                # the following code is questionable. By the time we get here,
                #   many other items may have been taken off the queue. 
                self.current_job = int(self.queue_size) - int(self.work_queue.qsize())
                self.percent = (self.current_job / self.queue_size) * 100
                sys.stdout.flush()
                status = ("\rDownloading " + url.split('/')[-1] + 
                          " [status: " + str(self.current_job) + 
                          "/" + str(self.queue_size) + ", " + 
                          str(round(self.percent,2)) + "%]" )            
            except queue.Empty:
                pass
            finally: 
                self.work_queue.task_done()




def main:
    if download_queue.qsize() &gt; 0:
        original_size = download_queue.qsize()
        if options.active_downloads:
            active_downloads = options.active_downloads
        else:
            active_downloads = 3
        for x in range(active_downloads):
            downloader = Downloader(download_queue, original_size)
            downloader.start()
        download_queue.join()
</snippet></ROW><ROW><id>2299728</id><snippet>s = "orange apple grapes pear"

from itertools import product
l = s.split()
r='/'.join(''.join(k*v for k,v in zip(l, x))
           for x in product(range(2), repeat=len(l))
           if sum(x) &gt; 1)
print r
</snippet></ROW><ROW><id>2299728</id><snippet>bc/ac/ab/abc
</snippet></ROW><ROW><id>2299816</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>2299816</id><snippet>TEMPLATE_LOADERS</snippet></ROW><ROW><id>2299816</id><snippet>templates</snippet></ROW><ROW><id>2299830</id><snippet>class A(object):
    def __init__(self):
        self.aMap = {}
</snippet></ROW><ROW><id>2299896</id><snippet>x = 0
s = 0   
while x &lt; 5:
    x += 1
    s += (int(raw_input("Enter a number: ")))
print s
</snippet></ROW><ROW><id>2300304</id><snippet>alist = [
    '#', '3e98.mtz', 'MR_AUTO', 'with', 'model', '200la_.pdb', 'SPACegroup', 'HALL', 'P', '2yb',
    '#P', '1', '21', '1', 
    'SOLU', 'SET', 'RFZ=3.0', 'TFZ=4.7', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_',
        'EULER', '321.997', '124.066', '234.744', 'FRAC', '-0.14681', '0.50245', '-0.05722',
    'SOLU', 'SET', 'RFZ=3.3', 'TFZ=4.2', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_',
        'EULER', '329.492', '34.325', '209.775', 'FRAC', '0.70297', '0.00106', '-0.24023',
    'SOLU', 'SET', 'RFZ=3.6', 'TFZ=3.6', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_', 
        'EULER', '177.344', '78.287', '187.356', 'FRAC', '0.04890', '0.00090', '-0.57497'
    ]
</snippet></ROW><ROW><id>2300304</id><snippet>TAG0 = 'EULER'
TAG1 = 'FRAC'

def extract_rows(tokens):
    pos = 0
    while True:
        try:
            pos = tokens.index(TAG0, pos)
        except ValueError:
            return
        assert pos + 8 &lt;= len(tokens)
        assert tokens[pos+4] == TAG1
        yield (
            tuple(map(float, tokens[pos+1:pos+4])),
            tuple(map(float, tokens[pos+5:pos+8])),
            )
        pos += 8

for rowx, row in enumerate (extract_rows(alist)):
    print rowx, 'TAG0', row[0]
    print rowx, 'TAG1', row[1]
</snippet></ROW><ROW><id>2300304</id><snippet>0 TAG0 (321.99700000000001, 124.066, 234.744)
0 TAG1 (-0.14681, 0.50244999999999995, -0.05722)
1 TAG0 (329.49200000000002, 34.325000000000003, 209.77500000000001)
1 TAG1 (0.70296999999999998, 0.00106, -0.24023)
2 TAG0 (177.34399999999999, 78.287000000000006, 187.35599999999999)
2 TAG1 (0.048899999999999999, 0.00089999999999999998, -0.57496999999999998)
</snippet></ROW><ROW><id>2300304</id><snippet>for line in open('my_file.txt'):
    row = line.split()
    if row[0] == 'SOLU' and row[1] == '6DIM' and row[4] == 'EULER' and row[8] == 'FRAC':
        euler = map(float, row[5:8])
        frac = map(float, row[9:12])
        do_something_with(euler, frac)
</snippet></ROW><ROW><id>2300304</id><snippet>RFZ=3.0 TFZ=4.7</snippet></ROW><ROW><id>2300393</id><snippet>inspect</snippet></ROW><ROW><id>2300393</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>2300503</id><snippet>from cv import *

storage = CreateMemStorage(0)
img = LoadImage(file)  # or read from camera

found = list(HOGDetectMultiScale(img, storage, win_stride=(8,8),
                padding=(32,32), scale=1.05, group_threshold=2))
</snippet></ROW><ROW><id>2300503</id><snippet>src/cvaux/cvhog.cpp</snippet></ROW><ROW><id>2300503</id><snippet>samples/python/peopledetect.py</snippet></ROW><ROW><id>2300766</id><snippet>itertools.islice</snippet></ROW><ROW><id>2300766</id><snippet>&gt;&gt;&gt; next(itertools.islice(xrange(10), 5, 5 + 1))
5
</snippet></ROW><ROW><id>2300879</id><snippet>list1.extend(reversed(list2[someInt:someOtherInt]))
</snippet></ROW><ROW><id>2300879</id><snippet>list1.extend(list2[someOtherInt - 1: someInt - 1: -1])
</snippet></ROW><ROW><id>2300879</id><snippet>reversed</snippet></ROW><ROW><id>2300879</id><snippet>list1.sort()</snippet></ROW><ROW><id>2300879</id><snippet>sorted(list1)</snippet></ROW><ROW><id>2300896</id><snippet>opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
</snippet></ROW><ROW><id>2300896</id><snippet>import eventlet
from eventlet.green import urllib2
import re

login_url = 'https://secure-web28.secondlife.com/my/account/login.php?lang=en&amp;type=second-life-member&amp;nextpage=/my/index.php?lang=en'

pool = eventlet.GreenPool(10)

def fetch_title(opener, url):
    match = re.search(r'&lt;title&gt;(.*)&lt;/title&gt;', opener.open(url).read())
    if match:
        return match.group(1)
    else:
        return "no title"

def login(login_url, fullname, password):
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
    login_page = opener.open(login_url).read()
    csrf_token = re.search(r'&lt;input type="hidden" name="CSRFToken" value="(.*)"/&gt;', login_page).group(1)
    username, lastname = fullname.split()
    auth = "CSRFToken=%s&amp;form[type]=second-life-member&amp;form[nextpage]=/my/index.php?lang=en&amp;form[persistent]=Y&amp;form[form_action]=Log%%20In&amp;form[form_lang]=en&amp;form[username]=%s&amp;form[lastname]=%s&amp;form[password]=%s&amp;submit=Submit" % (
        csrf_token, username, lastname, password)
    logged_in = opener.open(login_url, auth).read()
    return opener


def login_and_fetch(login_url, fullname, password, page_urls):
    opener = login(login_url, fullname, password)
    # note that this deliberately uses the global pool
    pile = eventlet.GreenPile(pool)
    for url in page_urls:
        pile.spawn(fetch_title, opener, url)

    return pile

login_urls = [login_url] *2
usernames = [...]
passwords = [...]
page_urls = [['https://secure-web28.secondlife.com/my/account/?lang=en-US',
        'https://secure-web28.secondlife.com/my/community/events/index.php?lang=en-US']] * 2

for user_iter in pool.imap(login_and_fetch, login_urls, usernames, passwords, page_urls):
    for title in user_iter:
        print "got title", title
</snippet></ROW><ROW><id>2300985</id><snippet>MCreatePH = startGame()
</snippet></ROW><ROW><id>2300985</id><snippet>MCreatePH = startNewGame()
</snippet></ROW><ROW><id>2301536</id><snippet>output += word[-1] +  u'(%d) ' % counter</snippet></ROW><ROW><id>2301536</id><snippet>open("pyth_hinwp.py").readlines()[22-1]
</snippet></ROW><ROW><id>2301792</id><snippet>for line in reversed(open("filename").readlines()):
    print line.rstrip()
</snippet></ROW><ROW><id>2301792</id><snippet>for line in reversed(list(open("filename"))):
    print(line.rstrip())
</snippet></ROW><ROW><id>2302191</id><snippet>import profile
import numpy as NP

def np_test(a2darray) :
  row_sums = NP.sum(a2darray, axis=1)
  return NP.sum(row_sums)

def stdlib_test2(a2dlist) :
  return sum([sum(row) for row in a2dlist])

A = NP.random.randint(1, 6, 1e7).reshape(1e4, 1e3)
B = NP.ndarray.tolist(A)

profile.run("np_test(A)")
profile.run("stdlib_test2(B)")
</snippet></ROW><ROW><id>2302229</id><snippet>#!/usr/bin/python
# -*- coding: UTF-8 -*-
# encoding: utf-8

import re

list1 = []
separators = [u'।', ',', '.']
text = open('hinstest1.txt').read().decode('UTF-8')
output_file = ('ophwp1.txt')

for line in text.splitlines():
    counter = 1
    output = ''
    for word in line.split():
        # Special case for the number at the start of the line
        # The regex matches one or more decimal digits (\d+) followed by a dot (\.)
        if re.match(r'\d+\.', word):
            output += word + ' '
            continue
        # Special case: the last char is a separator joined to the word
        if word[-1] in separators and len(word) &gt; 1:
            # word up to the second to last char
            output += word[:-1] + u'(%d) ' % counter
            counter += 1
            # last char
            output += word[-1] + u'(%d) ' % counter
            counter += 1
        else:
            output += word + u'(%d) ' % counter
            counter += 1
    output += u'\n'
    list1.append(output.encode('UTF-8'))

f1=open(output_file,'w')
f1.write(''.join(list1))
f1.close()
</snippet></ROW><ROW><id>2302243</id><snippet>code</snippet></ROW><ROW><id>2302243</id><snippet>TINYMCE_DEFAULT_CONFIG = {
    # your other configuration
    'theme_advanced_buttons3_add': 'code',
}
</snippet></ROW><ROW><id>2302243</id><snippet>advanced</snippet></ROW><ROW><id>2302384</id><snippet>class noisePlugin(plugin.Plugin):
    def __init__(self, *a, **k):
        plugin.Plugin.__init__(self, *a, **k)
        self.name = "noise"
</snippet></ROW><ROW><id>2302384</id><snippet>self.</snippet></ROW><ROW><id>2302427</id><snippet>.get</snippet></ROW><ROW><id>2302427</id><snippet>multiprocessing</snippet></ROW><ROW><id>2302427</id><snippet>Queue</snippet></ROW><ROW><id>2302590</id><snippet>MarkerSetBackground()</snippet></ROW><ROW><id>2302590</id><snippet>MarkerAdd()</snippet></ROW><ROW><id>2302791</id><snippet>def createNode(doc_, **param_):
    cache = ( ('p', 'property'), , ('l', 'label'), ('td', 'totalDelay'),
              ('rd', 'routeDelay'), ('ld', 'logicDelay') )
    for index, newIndex in cache:
        if index not in param_:
            continue
        value = param_[index]
        print newIndex, '=', value
</snippet></ROW><ROW><id>2302791</id><snippet>createNode</snippet></ROW><ROW><id>2303018</id><snippet>&gt;&gt;&gt; try:
...    foo = x
... except NameError:
...    x = 5
...    foo = 1
</snippet></ROW><ROW><id>2303018</id><snippet>class Foo(object):
    bar = None
    def foo(self):
        if self.bar is None:
            self.bar = 5
        return self.bar
</snippet></ROW><ROW><id>2303191</id><snippet>get_value_for_datastore</snippet></ROW><ROW><id>2303191</id><snippet>make_value_from_datastore</snippet></ROW><ROW><id>2303191</id><snippet>main</snippet></ROW><ROW><id>2303191</id><snippet>class MyStringProperty(db.StringProperty):
    def get_value_for_datastore(self, model_instance):
        vv = db.StringProperty.get_value_for_datastore(self, model_instance)
        return vv.upper()

class MyModel(db.Model):
    foo = MyStringProperty()

class MainHandler(webapp.RequestHandler):

    def get(self):
        my = MyModel(foo='Hello World')
        k = my.put()
        mm = MyModel.get(k)
        s = mm.foo
        self.response.out.write('The secret word is: %r' % s)
</snippet></ROW><ROW><id>2303191</id><snippet>get</snippet></ROW><ROW><id>2303191</id><snippet>mm = my</snippet></ROW><ROW><id>2303191</id><snippet>db.Property</snippet></ROW><ROW><id>2303191</id><snippet>property</snippet></ROW><ROW><id>2303191</id><snippet>db.Property</snippet></ROW><ROW><id>2303191</id><snippet>property</snippet></ROW><ROW><id>2303191</id><snippet>Model</snippet></ROW><ROW><id>2303191</id><snippet>property</snippet></ROW><ROW><id>2303191</id><snippet>db.Property</snippet></ROW><ROW><id>2303313</id><snippet>class myPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        bitmap = wx.EmptyBitmap(15,15)
        self.button = wx.BitmapButton(self, -1, bitmap=bitmap, size=(15,15), style=wx.NO_BORDER)
        self.Bind(wx.EVT_BUTTON, self.onClick, self.button)

def onClick(self, event):
    self.Hide()
</snippet></ROW><ROW><id>2303425</id><snippet>_get_FOO()</snippet></ROW><ROW><id>2303425</id><snippet>_set_FOO()</snippet></ROW><ROW><id>2303425</id><snippet>_FOO</snippet></ROW><ROW><id>2303443</id><snippet>dummy.cmd</snippet></ROW><ROW><id>2303443</id><snippet>python.exe -m dummy
</snippet></ROW><ROW><id>2303443</id><snippet>dummy.app</snippet></ROW><ROW><id>2303836</id><snippet>memcache</snippet></ROW><ROW><id>2304115</id><snippet>$stdout.flush
</snippet></ROW><ROW><id>2304115</id><snippet>subprocess</snippet></ROW><ROW><id>2304115</id><snippet>os.popen</snippet></ROW><ROW><id>2304115</id><snippet>import subprocess
import sys

cmd = ["ruby", "/Users/smcho/Desktop/testit.rb"]
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
for line in iter(p.stdout.readline, ''):
    print line, 
    sys.stdout.flush() 
p.wait()
</snippet></ROW><ROW><id>2304157</id><snippet>tostring</snippet></ROW><ROW><id>2304157</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>2304157</id><snippet>xml.etree.ElementTree.ElementTree</snippet></ROW><ROW><id>2304157</id><snippet>from xml.etree.ElementTree import ElementTree
from xml.etree.ElementTree import tostring

tree = ElementTree()
node = tree.parse(open("my_xml.xml"))
text = tostring(node)
</snippet></ROW><ROW><id>2304172</id><snippet>id</snippet></ROW><ROW><id>2304172</id><snippet>match_id</snippet></ROW><ROW><id>2304172</id><snippet>match.match_id</snippet></ROW><ROW><id>2304172</id><snippet>symmetrical</snippet></ROW><ROW><id>2304179</id><snippet>require 'adt'

table = ADT::Table.new("test.adt")

table.each do |record|
  puts record.name
  puts record.email
end
</snippet></ROW><ROW><id>2304856</id><snippet>menu</snippet></ROW><ROW><id>2304856</id><snippet>[k for k, v in menu.iteritems() if 'chips' in v]
</snippet></ROW><ROW><id>2304856</id><snippet>defaultdict</snippet></ROW><ROW><id>2304909</id><snippet>None</snippet></ROW><ROW><id>2304909</id><snippet>api.GetUser(username)</snippet></ROW><ROW><id>2304909</id><snippet>api.VerifyCredentials()</snippet></ROW><ROW><id>2305088</id><snippet>path = os.getcwd()
self.webview.settings().setUserStyleSheetUrl(QUrl.fromLocalFile(path + "/myCustom.css"))
</snippet></ROW><ROW><id>2305144</id><snippet>with open("file1") as infile:
    with open("file2","w") as outfile:
        for i,line in enumerate(infile):
            if i==2:
                # 3rd line
                outfile.write("new line1\n")
                outfile.write("new line2\n")
                outfile.write("new line3\n")
            elif i==3:
                # 4th line
                pass
            else:
                outfile.write(line)
</snippet></ROW><ROW><id>2305144</id><snippet>with open("file1") as infile, open("file2","w") as outfile:
    for i,line in enumerate(infile):
        if i==2:
            # 3rd line
            outfile.write("new line1\n")
            outfile.write("new line2\n")
            outfile.write("new line3\n")
        elif i==3:
            # 4th line
            pass
        else:
            outfile.write(line)
</snippet></ROW><ROW><id>2305197</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>2305592</id><snippet>def build_cdf(distrib):
    cdf = []
    val = 0
    for key, freq in distrib.items():
        val += freq
        cdf.append((val, key))
    return (val, cdf)
</snippet></ROW><ROW><id>2305592</id><snippet>import random
def sample_from_cdf(val_and_cdf):
    (val, cdf) = val_and_cdf;
    rand = random.uniform(0, val)
    # use bisect.bisect_left to reduce search time from O(n) to O(log n).
    return [key for index, key in cdf if index &gt; rand][0]
</snippet></ROW><ROW><id>2305592</id><snippet>x = build_cdf({"a":0.2, "b":0.3, "c":0.5});
y = [sample_from_cdf(x) for i in range(0,100000)];
print (len([t for t in y if t == "a"]))   # 19864
print (len([t for t in y if t == "b"]))   # 29760
print (len([t for t in y if t == "c"]))   # 50376
</snippet></ROW><ROW><id>2305649</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>2305747</id><snippet>any(a[i:i + len(b)] == b for i in range(len(a) - len(b) + 1))
</snippet></ROW><ROW><id>2305823</id><snippet>class Person( object ):
    def __init__( self, name, addr, email, etc. ):
        self.observer= []
        ... etc. ...
    @property
    def name( self ): return self._name
    @name.setter
    def name( self, value ): 
        self._name= value
        for observer in self.observedBy: observer.update( self )
    ... etc. ...
</snippet></ROW><ROW><id>2305823</id><snippet>observer</snippet></ROW><ROW><id>2305823</id><snippet>class PersonCollection( set ):
    def __init__( self, *args, **kw ):
        self.byName= collections.defaultdict(list)
        self.byEmail= collections.defaultdict(list)
        super( PersonCollection, self ).__init__( *args, **kw )
    def add( self, person ):
        super( PersonCollection, self ).append( person )
        person.observer.append( self )
        self.byName[person.name].append( person )
        self.byEmail[person.email].append( person )
    def update( self, person ):
        """This person changed.  Find them in old indexes and fix them."""
        changed = [(k,v) for k,v in self.byName.items() if id(person) == id(v) ]
        for k, v in changed:
            self.byName.pop( k )
        self.byName[person.name].append( person )
        changed = [(k,v) for k,v in self.byEmail.items() if id(person) == id(v) ]
        for k, v in changed:
            self.byEmail.pop( k )
        self.byEmail[person.email].append( person)

    ... etc. ... for all methods of a collections.Set.
</snippet></ROW><ROW><id>2305823</id><snippet>getattr</snippet></ROW><ROW><id>2305823</id><snippet>class GenericIndexedCollection( set ):
    attributes_to_index = [ ] # List of attribute names
    def __init__( self, *args, **kw ):
        self.indexes = dict( (n, {}) for n in self.attributes_to_index ]
        super( PersonCollection, self ).__init__( *args, **kw )
    def add( self, person ):
        super( PersonCollection, self ).append( person )
        for i in self.indexes:
            self.indexes[i].append( getattr( person, i )
</snippet></ROW><ROW><id>2305913</id><snippet>dot plone.dot -Tsvg &gt; plone.svg</snippet></ROW><ROW><id>2306010</id><snippet>\x92</snippet></ROW><ROW><id>2306010</id><snippet>’</snippet></ROW><ROW><id>2306010</id><snippet>&gt;&gt;&gt; print unicode('We\x92ve','1252')
We’ve
</snippet></ROW><ROW><id>2306153</id><snippet>pyfsevents</snippet></ROW><ROW><id>2306153</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>2306153</id><snippet>multiprocessing</snippet></ROW><ROW><id>2306204</id><snippet>import functools

def iterate(update):
    @functools.wraps(update)
    def inner(X, A=None, S=None, K=2, maxiter=10, c=0.1):
        M, N = X.shape
        O = matrix(ones([M, N]))
        if A is None:
            A = matrix(rand(M, K))
        if S is None:
            S = matrix(rand(K, N))
        for iter in range(maxiter):
            A, S = update(X, A, S, K, maxiter, c)
            for k in range(K):
                na = norm(A[:,k])
                A[:,k] /= na
                S[k,:] *= na
        return A, S
    return inner
</snippet></ROW><ROW><id>2306204</id><snippet>def</snippet></ROW><ROW><id>2306204</id><snippet>def algo1(X, A, S, c):
</snippet></ROW><ROW><id>2306204</id><snippet>iterator</snippet></ROW><ROW><id>2306204</id><snippet>@decorname</snippet></ROW><ROW><id>2306204</id><snippet>@decorname(23)</snippet></ROW><ROW><id>2306204</id><snippet>functools.wraps</snippet></ROW><ROW><id>2306204</id><snippet>functools</snippet></ROW><ROW><id>2306204</id><snippet>partial</snippet></ROW><ROW><id>2306204</id><snippet>def algo1(X, A, S,
  c)</snippet></ROW><ROW><id>2306204</id><snippet>def inner(X, A=None, S=None,
  K=2, maxiter=10, c=0.1)</snippet></ROW><ROW><id>2306204</id><snippet>algo1(X, maxiter=20)</snippet></ROW><ROW><id>2306204</id><snippet>inner</snippet></ROW><ROW><id>2306204</id><snippet>algo1</snippet></ROW><ROW><id>2306204</id><snippet>algo1</snippet></ROW><ROW><id>2306204</id><snippet>X, A, S, c</snippet></ROW><ROW><id>2306204</id><snippet>algo1</snippet></ROW><ROW><id>2306216</id><snippet>xmldoc.documentElement.setAttribute('xmlns', 'http://www.w3.org/2005/Atom')
</snippet></ROW><ROW><id>2306922</id><snippet>def bench_lxml_xpath_direct(root): # Very slow but very fast if text() is removed.
  name_list = root.xpath("book/author/name/text()")
  print ("Size of list = " + str(len(name_list)))

def bench_lxml_xpath_loop(root): # Fast
  name_list = root.xpath("book/author/name")
  result = []
  for n in name_list:
    result.append(n.text)

  print ("Size of list = " + str(len(name_list)))

def bench_lxml_getiterator(tree): # Very fast
  result = []
  for name in tree.getiterator("name"):
    result.append(name.text)
  print ("Size of list = " + str(len(result)))


def bench_lxml_findall(tree):  # Superfast
  result = []
  for name in tree.findall("//name"):
    result.append(name.text)
  print ("Size of list = " + str(len(result)))
</snippet></ROW><ROW><id>2307000</id><snippet>array</snippet></ROW><ROW><id>2307000</id><snippet>numpy</snippet></ROW><ROW><id>2307000</id><snippet># Using explicit field types for compactness and access by name
# (e.g. data[i]['mean'] == data[i][2]).
fields = [('x', int), ('y', int), ('mean', float), 
          ('stdv', float), ('npixels', int)]
# The simplest way is to build lists as you do now, and convert them
# to numpy array when done.
data = numpy.array(data, dtype=fields)
mask = numpy.array(mask, dtype=fields)
...
</snippet></ROW><ROW><id>2307000</id><snippet>.data</snippet></ROW><ROW><id>2307000</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>2307000</id><snippet>pytables</snippet></ROW><ROW><id>2307065</id><snippet>os.path.join</snippet></ROW><ROW><id>2307065</id><snippet>B - A</snippet></ROW><ROW><id>2307065</id><snippet>C</snippet></ROW><ROW><id>2307065</id><snippet>import os
import shutil

pathA = r"C:\Users\Morpheous\Desktop\Python Test"
pathB = r"C:\Users\Morpheous\Desktop\Python Test 2"

A = set(os.listdir(pathA))
B = set(os.listdir(pathB))
C = B - A

if len(C):
    print("Difference is: %s" % repr(C))

    for addedFile in C:
        shutil.copy2(os.path.join(pathB, addedFile),
                     os.path.join(pathA, addedFile))
else:
    print("No new files")
</snippet></ROW><ROW><id>2307132</id><snippet>clean</snippet></ROW><ROW><id>2307132</id><snippet>foo_date</snippet></ROW><ROW><id>2307132</id><snippet>foo_time</snippet></ROW><ROW><id>2307132</id><snippet>required=False</snippet></ROW><ROW><id>2307132</id><snippet>clean</snippet></ROW><ROW><id>2307132</id><snippet>class FooForm(forms.Form)
    # your field definitions

    def clean(self):
        data = self.cleaned_data
        if data.get('foo_timestamp', None) or (data.get('foo_date', None) and data.get('foo_time', None)):
            return data
        else:
            raise forms.ValidationError('Provide either a date and time or a timestamp')
</snippet></ROW><ROW><id>2307557</id><snippet>params = """Action: login
Events: off
Username: admin
Secret: mypass"""

s.send(params + '\r\n')
data = s.recv(1024)
print data + '\n'

params = 'Action: status'
s.send(params + '\r\n')
data = s.recv(1024)
print data + '\n'

params = 'Action: Logoff'
s.send(params + '\r\n')
data = s.recv(1024)
print data + '\n'
</snippet></ROW><ROW><id>2307729</id><snippet>get()</snippet></ROW><ROW><id>2307729</id><snippet>post()</snippet></ROW><ROW><id>2307729</id><snippet>def get(self):</snippet></ROW><ROW><id>2307729</id><snippet>def post(self):</snippet></ROW><ROW><id>2308078</id><snippet>time.sleep(1)
ser.setDTR(level=0)
time.sleep(1)
</snippet></ROW><ROW><id>2308271</id><snippet># A.func = func
A.__dict__['func'] = func # This just sets the attribute
# A.func
#   The __getattribute__ method of a type object calls the __get__ method with
#   None as the first parameter and the type as the second.
A.__dict__['func'].__get__(None, A) # The __get__ method of a function object
                                    # returns an unbound method object if the
                                    # first parameter is None.
a = A()
# a.func()
#   The __getattribute__ method of object finds an attribute on the type object
#   and calls the __get__ method of it with the instance as its first parameter.
a.__class__.__dict__['func'].__get__(a, a.__class__)
#   This returns a bound method object that is actually just a proxy for
#   inserting the object as the first parameter to the function call.
</snippet></ROW><ROW><id>2308271</id><snippet>classmethod</snippet></ROW><ROW><id>2308271</id><snippet>staticmethod</snippet></ROW><ROW><id>2308452</id><snippet>locale.atoi()</snippet></ROW><ROW><id>2308452</id><snippet>int("1,234".replace(",", ""))</snippet></ROW><ROW><id>2308452</id><snippet>int("1.234".replace(".", ""))</snippet></ROW><ROW><id>2308541</id><snippet>getpass.getpass()</snippet></ROW><ROW><id>2308635</id><snippet>import resource

rsrc = resource.RLIMIT_DATA
soft, hard = resource.getrlimit(rsrc)
print 'Soft limit starts as  :', soft

resource.setrlimit(rsrc, (1024, hard)) #limit to one kilobyte

soft, hard = resource.getrlimit(rsrc)
print 'Soft limit changed to :', soft
</snippet></ROW><ROW><id>2308691</id><snippet>str = "" # byte stream for encoding data
str += struct.pack("5f i", vert1.x, vert1.y, vert1.z, vert1.u, vert1.v, vert1.color) # 5 floats and an int
# same for other vertices

device. ReadVertices( verts, 3) # send vertices to C library</snippet></ROW><ROW><id>2308691</id><snippet>"si"</snippet></ROW><ROW><id>2308887</id><snippet>print '\n'.join('\t'.join(x) for x in L)
</snippet></ROW><ROW><id>2308950</id><snippet>if any(s in line for s in ('string1', 'string2', ...)):
</snippet></ROW><ROW><id>2309055</id><snippet>def func(name, klassDict):
    return type(name, (), klassDict)

class MyMeta(type):
    def __new__(self, name, bases, klassDict):
        return bases[0](name, klassDict)

class Klass(func):
    __metaclass__ = MyMeta

print Klass
</snippet></ROW><ROW><id>2309122</id><snippet>&gt;&gt;&gt; sorted_scores = [
...     ('Apolo Ohno', 0),
...     ('Shanie Davis', -1),
...     ('Bodie Miller', -2),
...     ('Lindsay Vohn', -3),  
...     ('Shawn White', -3),
...     ('Bryan Veloso',-4)
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; res = {}
&gt;&gt;&gt; prev = None
&gt;&gt;&gt; for i,(k,v) in enumerate(sorted_scores):
...     if v!=prev:
...         place,prev = i+1,v
...     res[k] = place
... 
&gt;&gt;&gt; print res
{'Apolo Ohno': 1, 'Bryan Veloso': 6, 'Shanie Davis': 2, 'Lindsay Vohn': 4, 'Bodie Miller': 3, 'Shawn White': 4}
</snippet></ROW><ROW><id>2309122</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; print sorted(res.items(),key=itemgetter(1))
[('Apolo Ohno', 1), ('Shanie Davis', 2), ('Bodie Miller', 3), ('Lindsay Vohn', 4), ('Shawn White', 4), ('Bryan Veloso', 6)]
</snippet></ROW><ROW><id>2309187</id><snippet>self</snippet></ROW><ROW><id>2309187</id><snippet>f</snippet></ROW><ROW><id>2309187</id><snippet>def online_only(func):
    def f(self, *args, **kwargs):
        if self.running:
            return func(self, *args, **kwargs)
        else:
            return False
    return f
</snippet></ROW><ROW><id>2309264</id><snippet>threadsafety</snippet></ROW><ROW><id>2309264</id><snippet>threadsafety</snippet></ROW><ROW><id>2309264</id><snippet>threaded</snippet></ROW><ROW><id>2309264</id><snippet>threading.local</snippet></ROW><ROW><id>2309264</id><snippet>finally</snippet></ROW><ROW><id>2309264</id><snippet>Get</snippet></ROW><ROW><id>2309264</id><snippet>StopIteration</snippet></ROW><ROW><id>2309264</id><snippet>def imthecaller():
  for i, row in enumerate(Get()):
    print i, row
    if i &gt; 1: break
  # this is the moment the generators' finally-clause runs
  print 'bye'
</snippet></ROW><ROW><id>2309264</id><snippet>finally</snippet></ROW><ROW><id>2309264</id><snippet>yield</snippet></ROW><ROW><id>2309334</id><snippet>a = ('Product', '500.00', '1200.00')
a = list(a)
a.insert(3, 'foobar')
a = tuple(a)
print a

&gt;&gt; ('Product', '500.00', '1200.00', 'foobar')
</snippet></ROW><ROW><id>2309572</id><snippet>@</snippet></ROW><ROW><id>2309572</id><snippet>permission_required</snippet></ROW><ROW><id>2309572</id><snippet>@</snippet></ROW><ROW><id>2309660</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>2309802</id><snippet>bigxml = '''&lt;?xml ...
  ....
  ....
  ....
&lt;/topelement&gt;'''
</snippet></ROW><ROW><id>2309802</id><snippet>from xmldoc import bigxml
</snippet></ROW><ROW><id>2309910</id><snippet>&gt;&gt;&gt; t=time.strftime('%m/%d/%Y',time.strptime('12/1/2009', '%m/%d/%Y'))
&gt;&gt;&gt; '/'.join( map( str, map(int,t.split("/")) ) )
'12/1/2009'
</snippet></ROW><ROW><id>2309927</id><snippet>os.dup2(1, 2)</snippet></ROW><ROW><id>2309927</id><snippet>/bin/ls</snippet></ROW><ROW><id>2309927</id><snippet>ls</snippet></ROW><ROW><id>2310047</id><snippet>import fileinput
f=0
for line in fileinput.input("file",inplace=0):
    if "hostname" in line and "ser1-xyz" in line:
       line=line.replace("ser1-xyz","ser1")
       f=1
    if f and "group" in line:
       a=line.rstrip().split(" ")
       a[-1]=str(int(a[-1])+1)
       line=' '.join(a)
       f=0
    print line.rstrip()
</snippet></ROW><ROW><id>2310047</id><snippet>$ ./python.py
hostname ser1
myuser   name
passwd   secret
group    1235

hostname ser2-xyz
myuser   name
passwd   secret
group    2345
</snippet></ROW><ROW><id>2310047</id><snippet>inplace=0</snippet></ROW><ROW><id>2310047</id><snippet>inplace=1</snippet></ROW><ROW><id>2310131</id><snippet>tarfile</snippet></ROW><ROW><id>2310407</id><snippet>def extract_by_letters(letters, dictionary):
    d = []
    for word in dictionary:
       for letter in letters:
           if word.count(letter)&gt;0:
               d.append(word)
               break
    return d
</snippet></ROW><ROW><id>2310407</id><snippet>import re
def extract_by_letters(letters, dictionary):
    regex = re.compile('['+letters+']')
    d=[]
    for word in dictionary:
       if regex.search(word):
           d.append(word)
    return d
</snippet></ROW><ROW><id>2310407</id><snippet>import re
def extract_by_letters(letters, dictionary):
    regex = re.compile('['+letters+']')
    return [word for word in dictionary if regex.search(word)]
</snippet></ROW><ROW><id>2310485</id><snippet>data = {
        (1, 'user1'): ("name1", "coord1", "hero1"),
        (2, 'user1'): ("name2", "coord2", "hero2"),
        #...
        (1, 'user2'): ("name11", "coord11", "hero11"),
        (2, 'user2'): ("name12", "coord12", "hero12"),
        # ...
    }


class CityBean:
    def __init__(self,name,coords,hero):
        self.name = name
        self.coords = coords
        self.hero = hero

class Castles:
    def __init__(self,user,n):
        self.user = user
        self.n = n
        name, coords, hero = data.get((n, user))
        self.citybean = CityBean(name, coords, hero)
</snippet></ROW><ROW><id>2310928</id><snippet>' '.join(r)
</snippet></ROW><ROW><id>2310928</id><snippet>TypeError</snippet></ROW><ROW><id>2310928</id><snippet>' '.join(str(i) for i in r)
</snippet></ROW><ROW><id>2310928</id><snippet>' '.join(r[1:])</snippet></ROW><ROW><id>2311086</id><snippet>if re.match(r'\A[\w-]+\Z', word):
  print "Single word"
</snippet></ROW><ROW><id>2311086</id><snippet>\A</snippet></ROW><ROW><id>2311086</id><snippet>\Z</snippet></ROW><ROW><id>2311086</id><snippet>word</snippet></ROW><ROW><id>2311090</id><snippet>c:\python26\bin</snippet></ROW><ROW><id>2311327</id><snippet>  &lt;iframe src="http://docs.google.com/gview?url=http://infolab.stanford.edu/pub/papers/google.pdf&amp;embedded=true" style="width:600px; height:500px;" frameborder="0"&gt;&lt;/iframe&gt;
</snippet></ROW><ROW><id>2311355</id><snippet> input_name =request.session['name']
 input_sirname =request.session['sirname']
</snippet></ROW><ROW><id>2311629</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; uuid.uuid1()
UUID('b46fa8cf-1fc1-11df-b891-001641ec3fab')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2311629</id><snippet>pp.py</snippet></ROW><ROW><id>2311629</id><snippet>self.__stats[hostid] = _Statistics(ncpus, rworker)
</snippet></ROW><ROW><id>2311629</id><snippet>get_stats()</snippet></ROW><ROW><id>2311751</id><snippet>document.getElementsByTagName("textarea")
</snippet></ROW><ROW><id>2311792</id><snippet>def dynSlicing(data, targetsize):
    return data[tuple(slice(x) for x in targetsize)]
</snippet></ROW><ROW><id>2311920</id><snippet>[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=MyApp
Type=Application
Exec=python /home/anushri/display.anurag/xxx.py
TryExec=
Icon=/usr/share/pixmaps/gnome-qeye.png
X-GNOME-DocPath=
Terminal=false
Name[en_IN]=MyApp
GenericName[en_IN]=MyApp
Comment[en_IN]=MyApp
GenericName=MyApp
Comment=MyApp
</snippet></ROW><ROW><id>2312128</id><snippet>import cPickle
   ...
thestring = cPickle.dumps(thedict, -1)
</snippet></ROW><ROW><id>2312128</id><snippet>-1</snippet></ROW><ROW><id>2312128</id><snippet>TEXT</snippet></ROW><ROW><id>2312128</id><snippet>BLOB</snippet></ROW><ROW><id>2312128</id><snippet>-1</snippet></ROW><ROW><id>2312128</id><snippet>thenewdict = cPickle.loads(thestring)
</snippet></ROW><ROW><id>2312184</id><snippet>-pylab</snippet></ROW><ROW><id>2312184</id><snippet>ion()</snippet></ROW><ROW><id>2312184</id><snippet>show()</snippet></ROW><ROW><id>2312184</id><snippet>draw()</snippet></ROW><ROW><id>2312184</id><snippet>plot(x, y)</snippet></ROW><ROW><id>2312184</id><snippet>ioff()</snippet></ROW><ROW><id>2312202</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>2312202</id><snippet>!=</snippet></ROW><ROW><id>2312243</id><snippet>Include/unicodeobject.h</snippet></ROW><ROW><id>2312243</id><snippet>#define PyUnicode_AS_UNICODE(op) \                                              
        (((PyUnicodeObject *)(op))-&gt;str)
</snippet></ROW><ROW><id>2312243</id><snippet>unicode</snippet></ROW><ROW><id>2312243</id><snippet>str</snippet></ROW><ROW><id>2312243</id><snippet>unicode</snippet></ROW><ROW><id>2312243</id><snippet>unicode</snippet></ROW><ROW><id>2312243</id><snippet>super</snippet></ROW><ROW><id>2312243</id><snippet>/usr/bin/ipython:3: DeprecationWarning: object.__init__() takes no parameters</snippet></ROW><ROW><id>2312243</id><snippet>class Foo(unicode):
    def __init__(self, msg):
        super(unicode, self).__init__(msg)
    def __str__(self): return 'str msg'
    def __repr__(self): return 'repr msg'
    def __unicode__(self): return u'unicode msg'
</snippet></ROW><ROW><id>2312243</id><snippet>In [12]: print(Foo("asdf"))
asdf

In [13]: str(Foo("asdf"))
Out[13]: 'str msg'

In [14]: print str(Foo("asdf"))
-------&gt; print(str(Foo("asdf")))
str msg

In [15]: print(str(Foo("asdf")))
str msg

In [16]: print('%s' % Foo("asdf"))
asdf
</snippet></ROW><ROW><id>2312243</id><snippet>unicode</snippet></ROW><ROW><id>2312243</id><snippet>unicode</snippet></ROW><ROW><id>2312243</id><snippet>__str__</snippet></ROW><ROW><id>2312243</id><snippet>Foo</snippet></ROW><ROW><id>2312566</id><snippet>request.path</snippet></ROW><ROW><id>2313050</id><snippet>import mimetypes

mimetypes.add_type("image/svg+xml", ".svg", True)
mimetypes.add_type("image/svg+xml", ".svgz", True)
</snippet></ROW><ROW><id>2313098</id><snippet>states = ['IA', 'KS', 'UT', 'VA', 'NC', 'NE', 'SD', 'AL', 'ID', 'FM', 'DE', 'AK', 'CT', 'PR', 'NM', 'MS', 'PW', 'CO', 'NJ', 'FL', 'MN', 'VI', 'NV', 'AZ', 'WI', 'ND', 'PA', 'OK', 'KY', 'RI', 'NH', 'MO', 'ME', 'VT', 'GA', 'GU', 'AS', 'NY', 'CA', 'HI', 'IL', 'TN', 'MA', 'OH', 'MD', 'MI', 'WY', 'WA', 'OR', 'MH', 'SC', 'IN', 'LA', 'MP', 'DC', 'MT', 'AR', 'WV', 'TX']
regex = re.compile(r'\b(' + '|'.join(states) + r')\b', re.IGNORECASE)
</snippet></ROW><ROW><id>2313119</id><snippet>import glob, os
glob.glob(os.path.expanduser('~/.mozilla/firefox/*.default'))
</snippet></ROW><ROW><id>2313119</id><snippet>~/.mozilla/firefox</snippet></ROW><ROW><id>2313119</id><snippet>~</snippet></ROW><ROW><id>2313119</id><snippet>*.default</snippet></ROW><ROW><id>2313309</id><snippet>fun eval radix lst = let
  fun f (element, sum) = sum * radix + element
in
  foldr f 0 lst
end
</snippet></ROW><ROW><id>2313309</id><snippet>- eval 10 [1,2,3];
val it = 321 : int
</snippet></ROW><ROW><id>2313495</id><snippet>/usr/lib/pyshared/python2.6
/usr/lib/pyshared/python2.6/_mysql.so
/usr/share/pyshared
/usr/share/pyshared/MySQLdb
/usr/share/pyshared/MySQLdb/constants
/usr/share/pyshared/MySQLdb/constants/CLIENT.py
/usr/share/pyshared/MySQLdb/constants/REFRESH.py
/usr/share/pyshared/MySQLdb/constants/FLAG.py
/usr/share/pyshared/MySQLdb/constants/FIELD_TYPE.py
/usr/share/pyshared/MySQLdb/constants/__init__.py
/usr/share/pyshared/MySQLdb/constants/ER.py
/usr/share/pyshared/MySQLdb/constants/CR.py
/usr/share/pyshared/MySQLdb/__init__.py
/usr/share/pyshared/MySQLdb/cursors.py
/usr/share/pyshared/MySQLdb/times.py
/usr/share/pyshared/MySQLdb/connections.py
/usr/share/pyshared/MySQLdb/converters.py
/usr/share/pyshared/MySQLdb/release.py
/usr/share/pyshared/_mysql_exceptions.py
</snippet></ROW><ROW><id>2313495</id><snippet>mysql -u USER -pPASSWORD -D DATABASE -Bse "select * from table;"

-B tells mysql to run in "batch" mode
-s tells mysql to run in "silent" mode
-e tells mysql to execute the following statement
</snippet></ROW><ROW><id>2313495</id><snippet>subprocess</snippet></ROW><ROW><id>2313495</id><snippet>mysql</snippet></ROW><ROW><id>2313495</id><snippet>import subprocess
user='xxxxxx'
password='xxxxxxxx'
database='xxxxxxxx'
cmd=['mysql', '-u', user, '-p%s'%password, '-D', database, '-Bse', "select * from table;"]
proc=subprocess.Popen(cmd,stdout=subprocess.PIPE)
retval=proc.communicate()[0]
print(retval)
</snippet></ROW><ROW><id>2313495</id><snippet>retval</snippet></ROW><ROW><id>2313653</id><snippet>class</snippet></ROW><ROW><id>2313975</id><snippet>ret = np.zeros_like(data[0,:,:])
for latIdx in xrange(grid.shape[1]):
    for lonIdx in xrange(grid.shape[2]):
        # check if we need to flip the column
        if grid[0,latIdx,lonIdx] &gt; grid[-1,latIdx,lonIdx]:
            ind = -1
        else:
            ind = 1
        f = interpolate.interp1d(grid[::ind,latIdx,lonIdx], \
                data[::ind,latIdx,lonIdx], \
                kind=interp)
        ret[latIdx,lonIdx] = f(value)
return ret
</snippet></ROW><ROW><id>2314209</id><snippet>00000010</snippet></ROW><ROW><id>2314209</id><snippet>00000101</snippet></ROW><ROW><id>2314209</id><snippet>00000001</snippet></ROW><ROW><id>2314209</id><snippet>00000010</snippet></ROW><ROW><id>2314427</id><snippet>class MyBackend:
    def authenticate(self, username=None, password=None):
        # Check the username/password and return a User.
</snippet></ROW><ROW><id>2314427</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>2314427</id><snippet>('django.contrib.auth.backends.YourCustomBackend',)</snippet></ROW><ROW><id>2314461</id><snippet>plt.plot(R,P,color='0.2',lw=1.5, zorder=1)
plt.scatter(R,P,s=150,color=c, zorder=2)
</snippet></ROW><ROW><id>2314465</id><snippet>get_all_field_names()</snippet></ROW><ROW><id>2314465</id><snippet>Meta</snippet></ROW><ROW><id>2314465</id><snippet>foo._meta.get_all_field_names()</snippet></ROW><ROW><id>2314465</id><snippet>&gt;&gt;&gt; from foo.models import Foo
&gt;&gt;&gt; f = Foo.objects.get(pk=1)
&gt;&gt;&gt; f._meta.get_all_field_names()
['active', 'created', 'expires', 'id', , 'inputter', 'reason', 'requester', 'updated']
</snippet></ROW><ROW><id>2314465</id><snippet>def print_all_fields_starting_with(obj, starter):
    fields = [x for x in obj._meta.get_all_field_names() if x.startswith(starter)]
    for field in fields:
        print getattr(obj, field)
</snippet></ROW><ROW><id>2314465</id><snippet>save()</snippet></ROW><ROW><id>2314465</id><snippet>def save(self):
    print_all_fields_starting_with(self, "foo_")
    super(MyModel, self).save()
</snippet></ROW><ROW><id>2314477</id><snippet>class OurService {
    def getAResource( String argValue ) {
        path = { "fixed", argValue };
        URI uri= build_path( path );
        return connection.get( uri )
</snippet></ROW><ROW><id>2314477</id><snippet>class Some_REST_Stub( object ):
    def get_some_resource( self, arg ): # This name is from the WSDL
        uri = "http://host:port/path/to/resource/%s/" % arg # This path is from the WSDL
        data= urllib2.open( uri )
        return json.load( data )
</snippet></ROW><ROW><id>2314565</id><snippet>f = open(filename, 'rtU')

for line in f:
    ...
</snippet></ROW><ROW><id>2315053</id><snippet>links = [rel.get_accessor_name() for rel in a._meta.get_all_related_objects()]
</snippet></ROW><ROW><id>2315053</id><snippet>for link in links:
    objects = getattr(a, link).all()
    for object in objects:
        # do something with related object instance
</snippet></ROW><ROW><id>2315059</id><snippet>checkingaccount</snippet></ROW><ROW><id>2315059</id><snippet>savingsaccount</snippet></ROW><ROW><id>2315275</id><snippet>#include</snippet></ROW><ROW><id>2315279</id><snippet>&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; d = [date(2010, 2, 23),date(2010, 2, 24),date(2010, 2, 25),
         date(2010, 2, 26),date(2010, 3, 1),date(2010, 3, 2)]
&gt;&gt;&gt; date_set = set(d[0]+timedelta(x) for x in range((d[-1]-d[0]).days))
&gt;&gt;&gt; missing = sorted(date_set-set(d))
&gt;&gt;&gt; missing
[datetime.date(2010, 2, 27), datetime.date(2010, 2, 28)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2315316</id><snippet>django.contrib.comments.views.moderation.delete()</snippet></ROW><ROW><id>2315316</id><snippet>from django.contrib.auth.decorators import login_required
from django.contrib.comments.models import Comment
from django.shortcuts import get_object_or_404
from django.conf import settings
from django.contrib import comments

@login_required
def delete_own_comment(request, message_id):
    comment = get_object_or_404(comments.get_model(), pk=message_id,
            site__pk=settings.SITE_ID)
    if comment.user == request.user:
        comment.is_removed = True
        comment.save()
</snippet></ROW><ROW><id>2315369</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; m = types.ModuleType('m', 'The m module')
</snippet></ROW><ROW><id>2315369</id><snippet>sys.modules</snippet></ROW><ROW><id>2315369</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['m']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'm'
</snippet></ROW><ROW><id>2315369</id><snippet>&gt;&gt;&gt; sys.modules['m'] = m
&gt;&gt;&gt; sys.modules['m']
&lt;module 'm' (built-in)&gt;
</snippet></ROW><ROW><id>2315369</id><snippet>sys.modules</snippet></ROW><ROW><id>2315369</id><snippet>sys.modules[__name__]</snippet></ROW><ROW><id>2315369</id><snippet>KeyError</snippet></ROW><ROW><id>2315369</id><snippet>m.__file__</snippet></ROW><ROW><id>2315369</id><snippet>&gt;&gt;&gt; code = compile("a=23", "m.py", "exec")
&gt;&gt;&gt; exec code in m.__dict__
&gt;&gt;&gt; m.a
23
</snippet></ROW><ROW><id>2315369</id><snippet>exec</snippet></ROW><ROW><id>2315369</id><snippet>new</snippet></ROW><ROW><id>2315369</id><snippet>types</snippet></ROW><ROW><id>2315369</id><snippet>new</snippet></ROW><ROW><id>2315457</id><snippet>unicode</snippet></ROW><ROW><id>2315457</id><snippet>&gt;&gt;&gt; mystring = "işğüı"
&gt;&gt;&gt; print mystring.decode('utf-8').upper()
IŞĞÜI
</snippet></ROW><ROW><id>2315501</id><snippet>rc = subprocess.call(
    ["cmd", "--thing", "foo", "--stuff", "bar", 
     "-a", "b", "input", "output"])
print "Return code was", rc
</snippet></ROW><ROW><id>2315501</id><snippet>pexpect</snippet></ROW><ROW><id>2315501</id><snippet>wexpect</snippet></ROW><ROW><id>2315529</id><snippet>for k, v in mydict.iteritems():
    if v is None:
        mydict[k] = ''
</snippet></ROW><ROW><id>2315529</id><snippet>items</snippet></ROW><ROW><id>2315529</id><snippet>iteritems</snippet></ROW><ROW><id>2315531</id><snippet>null=True</snippet></ROW><ROW><id>2315531</id><snippet>picture_url = models.CharField(max_length=2000, null=True)
</snippet></ROW><ROW><id>2315662</id><snippet>from operator import attrgetter
sorted(item_list, key=attrgetter('fitness'))
</snippet></ROW><ROW><id>2315662</id><snippet>&gt;&gt;&gt; class C(object):
...     def __init__(self, fitness):
...         self.fitness=fitness
...     def __repr__(self):
...         return "fitness: %s"%self.fitness
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; from operator import attrgetter
&gt;&gt;&gt; L=[C(10),C(4),C(1),C(99)]
&gt;&gt;&gt; sorted(L, key=attrgetter('fitness'))
[fitness: 1, fitness: 4, fitness: 10, fitness: 99]
&gt;&gt;&gt; S=set(L)
&gt;&gt;&gt; sorted(S, key=attrgetter('fitness'))
[fitness: 1, fitness: 4, fitness: 10, fitness: 99]
</snippet></ROW><ROW><id>2315755</id><snippet>plt.imshow(im1)
plt.axis('image')
x = plt.ginput(4)
</snippet></ROW><ROW><id>2315758</id><snippet>class UpdateForm(ModelForm):
  name = forms.CharField(
    max_length=140,
    required=False,
    widget=forms.TextInput(attrs={"class": "blankable"})
  )

  class Meta:
    model = Update
    exclude = ("user",)
</snippet></ROW><ROW><id>2315914</id><snippet>str(info())</snippet></ROW><ROW><id>2315914</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://tejp.de')
&gt;&gt;&gt; print str(f.info())
Connection: close
Vary: Accept-Encoding
Content-Type: text/html
Accept-Ranges: bytes
ETag: "-807357257"
Last-Modified: Wed, 01 Jul 2009 10:05:34 GMT
Content-Length: 285
Date: Tue, 23 Feb 2010 03:24:10 GMT
Server: lighttpd/1.4.19
</snippet></ROW><ROW><id>2315914</id><snippet>p</snippet></ROW><ROW><id>2316038</id><snippet>linebreaks</snippet></ROW><ROW><id>2316070</id><snippet>Cursor.execute*()</snippet></ROW><ROW><id>2316070</id><snippet>Cursor.rowcount</snippet></ROW><ROW><id>2316070</id><snippet>int sqlite3_changes(sqlite3*)</snippet></ROW><ROW><id>2316175</id><snippet>d={}
f=open("file")
for line in f:
    a,b=map( int, line.split() ) 
    d[a]=b
f.close()
print d
</snippet></ROW><ROW><id>2316175</id><snippet>$ cat file
9 120
10 12
11 4
12 1
13 515
14 32

$ ./python.py
{9: 120, 10: 12, 11: 4, 12: 1, 13: 515, 14: 32}
</snippet></ROW><ROW><id>2316420</id><snippet>lpr(1)</snippet></ROW><ROW><id>2316420</id><snippet>subprocess</snippet></ROW><ROW><id>2316503</id><snippet>\r</snippet></ROW><ROW><id>2316503</id><snippet>\n</snippet></ROW><ROW><id>2316797</id><snippet>temp_board</snippet></ROW><ROW><id>2316797</id><snippet>0</snippet></ROW><ROW><id>2316797</id><snippet># First figure out where the array is zero
zindex = numpy.where(temp_board == 0)
# Make a set of tuples out of it
zindex = set(zip(*zindex))
# Make a set of tuples from indices_to_watch too
indices_to_watch = set([(0,1), (1,2)])
# Find the intersection.  These are the indices that need to be set
indices_to_set = indices_to_watch &amp; zindex
# Set the value
temp_board[zip(*indices_to_set)] = level
</snippet></ROW><ROW><id>2316797</id><snippet>indices_to_watch = [(0,1), (1,2)]
</snippet></ROW><ROW><id>2316797</id><snippet>indices_to_watch = numpy.array(indices_to_watch)
</snippet></ROW><ROW><id>2316797</id><snippet>index = zip(*indices_to_watch)
</snippet></ROW><ROW><id>2316797</id><snippet>indices_to_set = numpy.where(temp_board[index] == 0)
</snippet></ROW><ROW><id>2316797</id><snippet>final_index = zip(*indices_to_watch[indices_to_set])
</snippet></ROW><ROW><id>2316797</id><snippet>temp_board[final_index] = level
</snippet></ROW><ROW><id>2316808</id><snippet>x = !echo $$$$PATH
</snippet></ROW><ROW><id>2316808</id><snippet>$</snippet></ROW><ROW><id>2316808</id><snippet>PATH="$PATH"
x = !echo $PATH
x[0].split(":")
</snippet></ROW><ROW><id>2316912</id><snippet>&gt;&gt;&gt; d={'a':6, 'b':"hello", 'c':set()}
&gt;&gt;&gt; exec '\n'.join("%s=%r"%i for i in d.items())
&gt;&gt;&gt; a
6
&gt;&gt;&gt; b
'hello'
&gt;&gt;&gt; c
set([])
</snippet></ROW><ROW><id>2316912</id><snippet>&gt;&gt;&gt; d={'a':6, 'b':"hello", 'c':set()}
&gt;&gt;&gt; exec '\n'.join("%s=d['%s']"%(k,k) for k in d)
&gt;&gt;&gt; id(d['c'])
3079176684L
&gt;&gt;&gt; id(c)
3079176684L
</snippet></ROW><ROW><id>2316990</id><snippet>time.strptime</snippet></ROW><ROW><id>2316990</id><snippet>time_struct</snippet></ROW><ROW><id>2316990</id><snippet>time.strftime</snippet></ROW><ROW><id>2316990</id><snippet>time_struct</snippet></ROW><ROW><id>2316990</id><snippet>&gt;&gt;&gt;s = time.strptime(page.editTime(), "%Y%m%d%H%M%S")
&gt;&gt;&gt;print time.strftime('%H:%M %d %B %Y (UTC)', s)
</snippet></ROW><ROW><id>2316990</id><snippet>05:09 29 December 2009 (UTC)</snippet></ROW><ROW><id>2317173</id><snippet>&gt;&gt; s = ''' ... ''' # as above
&gt;&gt; t = re.search( 'Registry "unique-name" =(.*?)\n;', s, re.S ).group( 1 )
&gt;&gt; u = re.findall( '^\s*(\w+) "?(.*?)"? = "(.*?)";\s*$', t, re.M )
&gt;&gt; for x in u:
       print( x )

('String', 'name', 'modulename')
('String', 'timestamp', 'not specified')
('String', 'java', 'not specified')
('String', 'user', 'not specified')
('String', 'host', 'not specified')
('String', 'system', 'not specified')
('String', 'version', 'This I want')
('String', 'version-major', 'not specified')
('String', 'version-minor', 'not specified')
('String', 'scm', 'not specified')
('String', 'scmrevision', 'not specified')
('String', 'mode', 'release')
</snippet></ROW><ROW><id>2317173</id><snippet>t = re.search( 'Registry "unique-name"\s*=\s*((?:\s*\w+ "?[^"=]+"?\s*=\s*"[^"]*?";\s*)+)\s*;', s ).group( 1 )
u = re.findall( '^\s*(\w+) "?([^"=]+)"?\s*=\s*"([^"]*?)";\s*$', t, re.M )
</snippet></ROW><ROW><id>2317552</id><snippet>query = "SELECT *, ((ACOS(SIN(%s * PI() / 180) * SIN(lat * PI() / 180) + COS(%s * PI() / 180) * COS(lat * PI() / 180) * COS((%s - lon) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) AS distance FROM app_car WHERE price BETWEEN %s AND %s HAVING distance&lt;=%s ORDER BY distance ASC"

cars = Car.objects.raw(query, [lat, lat, lon, min_price, max_price, miles])

return HttpResponse(len(list(cars))
</snippet></ROW><ROW><id>2317843</id><snippet>class Something(Base):
    ...
    _foo = Column('foo', String(123))

    @property
    def foo(self):
        return self._foo

    @foo.setter
    def foo(self, value):
        if len(value) &gt; _foo.type.length:
            raise Exception("Value too long")
        self._foo = value 
</snippet></ROW><ROW><id>2317843</id><snippet>from sqlalchemy.orm.interfaces import AttributeExtension, InstrumentationManager
from sqlalchemy.orm import ColumnProperty

class InstallValidatorListeners(InstrumentationManager):
    def post_configure_attribute(self, class_, key, inst):
        """Add validators for any attributes that can be validated."""
        prop = inst.prop
        # Only interested in simple columns, not relations
        if isinstance(prop, ColumnProperty) and len(prop.columns) == 1:
            col = prop.columns[0]
            # if we have string column with a length, install a length validator
            if isinstance(col.type, String) and col.type.length:
                inst.impl.extensions.insert(0, LengthValidator(col.type.length))

class ValidationError(Exception):
    pass

class LengthValidator(AttributeExtension):
    def __init__(self, max_length):
        self.max_length = max_length

    def set(self, state, value, oldvalue, initiator):
        if len(value) &gt; self.max_length:
            raise ValidationError("Length %d exceeds allowed %d" %
                                (len(value), self.max_length))
        return value
</snippet></ROW><ROW><id>2317843</id><snippet>__sa_instrumentation_manager__ = InstallValidatorListeners</snippet></ROW><ROW><id>2317901</id><snippet>.values(...)</snippet></ROW><ROW><id>2317901</id><snippet>serializers</snippet></ROW><ROW><id>2317901</id><snippet>queryset = Model.objects.filter(make__slug__exact=make)
return serializers.serialize("json", queryset, fields=('slug', 'name'))
</snippet></ROW><ROW><id>2317941</id><snippet>print my_object.__dict__
</snippet></ROW><ROW><id>2318078</id><snippet>globals()[classname]</snippet></ROW><ROW><id>2318188</id><snippet>Model.objects.filter(id=Q(season_id))
</snippet></ROW><ROW><id>2319003</id><snippet>getstatusoutput()</snippet></ROW><ROW><id>2319003</id><snippet>commands</snippet></ROW><ROW><id>2319003</id><snippet>subprocess</snippet></ROW><ROW><id>2319003</id><snippet>cmd = subprocess.Popen(['ls'], stdout=file('output', 'w'))
</snippet></ROW><ROW><id>2319003</id><snippet>cmd = subprocess.Popen(['ls'], stdout=subprocess.PIPE)
for line in cmd.stdout:
    do_stuff(line)
</snippet></ROW><ROW><id>2319006</id><snippet>import numpy as np
storageMatrix=np.empty((4,9),dtype='object')
</snippet></ROW><ROW><id>2319006</id><snippet>dtype</snippet></ROW><ROW><id>2319006</id><snippet>'object'</snippet></ROW><ROW><id>2319006</id><snippet>storageMatrix</snippet></ROW><ROW><id>2319006</id><snippet>storageMatrix[column,row]=np.arange(4096)
</snippet></ROW><ROW><id>2319006</id><snippet>storageMatrix[column,row][0] = 1
storageMatrix[column,row][4092] = 2
</snippet></ROW><ROW><id>2319116</id><snippet>re.sub</snippet></ROW><ROW><id>2319116</id><snippet>def removeComments(string):
    string = re.sub(re.compile("/\*.*?\*/",re.DOTALL ) ,"" ,string) # remove all occurance streamed comments (/*COMMENT */) from string
    string = re.sub(re.compile("//.*?\n" ) ,"" ,string) # remove all occurance singleline comments (//COMMENT\n ) from string
    return string
</snippet></ROW><ROW><id>2319706</id><snippet>http://localhost:8080
</snippet></ROW><ROW><id>2319894</id><snippet>pywin32_postinstall.py -install</snippet></ROW><ROW><id>2319894</id><snippet>N:\Python26</snippet></ROW><ROW><id>2319894</id><snippet>N:\Python26\python.exe N:\Python26\Scripts\pywin32_postinstall.py -install
</snippet></ROW><ROW><id>2319894</id><snippet>Good Luck!</snippet></ROW><ROW><id>2319894</id><snippet>admin</snippet></ROW><ROW><id>2320089</id><snippet>from sqlalchemy.orm.collections import column_mapped_collection, attribute_mapped_collection, mapped_collection

mapper(Item, items_table, properties={
    # key by column
    'notes': relation(Note, collection_class=column_mapped_collection(notes_table.c.keyword)),
    # or named attribute
    'notes2': relation(Note, collection_class=attribute_mapped_collection('keyword')),
    # or any callable
    'notes3': relation(Note, collection_class=mapped_collection(lambda entity: entity.a + entity.b))
})

# ...
item = Item()
item.notes['color'] = Note('color', 'blue')
print item.notes['color']
</snippet></ROW><ROW><id>2320089</id><snippet>list</snippet></ROW><ROW><id>2320089</id><snippet>dict</snippet></ROW><ROW><id>2320089</id><snippet>associationproxy</snippet></ROW><ROW><id>2320175</id><snippet>formfield_for_manytomany</snippet></ROW><ROW><id>2320175</id><snippet>SiteAdmin</snippet></ROW><ROW><id>2320175</id><snippet>from django.contrib.admin import widgets

class SitebAdmin(admin.ModelAdmin):

   list_display = ('id', 'name')
   list_filter = ('name', 'categories')

   def formfield_for_manytomany(self, db_field, request, **kwargs):
      if db_field.name == 'categories':
         kwargs['widget'] = widgets.FilteredSelectMultiple(
              db_field.verbose_name, (db_field.name in self.filter_vertical))
      return super(SitebAdmin, self).formfield_for_foreignkey(
         db_field, request, **kwargs)

   fieldsets = (
       (None, {
            "fields": ("name", "categories",)
       }),
   )
</snippet></ROW><ROW><id>2320706</id><snippet>from mock import Mock

class Person(object):
    def __init__(self, name):
        super(Person, self).__init__()
        self.name = name

    def say(self, str):
        print "%s says \"%s\"" % (self.name, str)


...

#In your unit test....
#create the class as normal
person = Person("Bob")
#now mock all of person's methods/attributes
person = Mock(spec=person)
#talkto is some function you are testing
talkTo(person)
#make sure the Person class's say method was called
self.assertTrue(person.say.called, "Person wasn't asked to talk")

#make sure the person said "Hello"
args = ("Hello")
keywargs = {}
self.assertEquals(person.say.call_args, (args, keywargs), "Person did not say hello")
</snippet></ROW><ROW><id>2320746</id><snippet>np.hypot</snippet></ROW><ROW><id>2320746</id><snippet>blockData = np.fromfile(ReadFile.fid, np.int16, num_receivers*num_channels*num_samples*2)
blockData = blockData.reshape((num_receivers, num_channes, num_samples, 2))
return np.hypot(blockData[:,:,:,0], blockData[:,:,:,1])
</snippet></ROW><ROW><id>2320926</id><snippet>urllib2</snippet></ROW><ROW><id>2320926</id><snippet>import urllib
import urllib2

request_data = urlllib.urlencode({"DATA": xml})
response = urlilib2.urlopen("https://url of the virtual bank POS", request_data)

response_data = response.read()
data = response_data.split('\n')
</snippet></ROW><ROW><id>2320926</id><snippet>xml</snippet></ROW><ROW><id>2320930</id><snippet>git ls-files | grep '\.pwc$' | xargs git rm

find . -name *.pwc | xargs git rm
</snippet></ROW><ROW><id>2320930</id><snippet>rm</snippet></ROW><ROW><id>2320930</id><snippet>git rm</snippet></ROW><ROW><id>2320951</id><snippet>if __name__ == "__main__": 
    if len(sys.argv) &lt; 5: 
        print "For usage: %s --help" % (sys.argv[0]) 
    else: 
        CommitHook() 
</snippet></ROW><ROW><id>2320951</id><snippet>if __name__ == "__main__": 
    if len(sys.argv) &lt; 5: 
        print "For usage: %s --help" % (sys.argv[0]) 
    else: 
        try:
            CommitHook()
        except Exception, e:
            print &gt;&gt; sys.stderr, str(e)
            sys.exit(1)
</snippet></ROW><ROW><id>2320966</id><snippet>httplib</snippet></ROW><ROW><id>2321344</id><snippet>SSL.Connection.clientPostConnectionCheck = None</snippet></ROW><ROW><id>2321344</id><snippet>SSL.Connection.clientPostConnectionCheck = None</snippet></ROW><ROW><id>2321530</id><snippet>min_date = cur.fetchone()[0]
min_date = min_date if min_date is not None else default_value
</snippet></ROW><ROW><id>2321575</id><snippet>import feedparser
url = "http://..."
feed = feedparser.parse(url)
for post in feed.entries:
    title = post.title
    print(title)
</snippet></ROW><ROW><id>2321575</id><snippet>post=feed.entries[2]
</snippet></ROW><ROW><id>2321575</id><snippet>post</snippet></ROW><ROW><id>2321575</id><snippet>print post
</snippet></ROW><ROW><id>2321575</id><snippet>print post['title']
</snippet></ROW><ROW><id>2321575</id><snippet>print post.title
</snippet></ROW><ROW><id>2321633</id><snippet>variable0
variable1
variable2
variable3
</snippet></ROW><ROW><id>2321633</id><snippet>list</snippet></ROW><ROW><id>2321633</id><snippet>for</snippet></ROW><ROW><id>2321633</id><snippet>sequence = []
for i in xrange(10):
    sequence.append(function_that_returns_data())
</snippet></ROW><ROW><id>2321633</id><snippet>i</snippet></ROW><ROW><id>2321633</id><snippet>for</snippet></ROW><ROW><id>2321633</id><snippet>sequence[0]
sequence[1]
sequence[2]
sequence[3]
[...]
sequence[9]
</snippet></ROW><ROW><id>2321633</id><snippet>for datum in sequence:
    process_data(datum)
</snippet></ROW><ROW><id>2321633</id><snippet>vars()</snippet></ROW><ROW><id>2321633</id><snippet>locals()</snippet></ROW><ROW><id>2321633</id><snippet>locals()['x'] = 4
x = 4
</snippet></ROW><ROW><id>2321633</id><snippet>vars()['x']</snippet></ROW><ROW><id>2321633</id><snippet>x</snippet></ROW><ROW><id>2321633</id><snippet>locals()</snippet></ROW><ROW><id>2321633</id><snippet>vars()</snippet></ROW><ROW><id>2321633</id><snippet>locals()[4] = 'An integer'</snippet></ROW><ROW><id>2321633</id><snippet>&gt;&gt;&gt; x = 5
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', 'x']
&gt;&gt;&gt; locals()[4] = 'An integer'
&gt;&gt;&gt; dir()
[4, '__builtins__', '__doc__', '__name__', 'x']
&gt;&gt;&gt; x
5
&gt;&gt;&gt; 4
4
&gt;&gt;&gt; locals()[4]
'An integer'
</snippet></ROW><ROW><id>2321633</id><snippet>locals()</snippet></ROW><ROW><id>2321909</id><snippet>rsvg_handle_get_pixbuf_sub()</snippet></ROW><ROW><id>2321909</id><snippet>rsvg_handle_render_cairo_sub()</snippet></ROW><ROW><id>2321909</id><snippet>import gtk
import rsvg
handle = rsvg.Handle()
handle.write(buffer=xml_data) 
# xml_data is the XML string for the object you want
image = gtk.Image()
image.set_from_pixbuf(handle.get_pixbuf())
</snippet></ROW><ROW><id>2321909</id><snippet>gtk.Image</snippet></ROW><ROW><id>2321909</id><snippet>handle.render_cairo(cr)</snippet></ROW><ROW><id>2321909</id><snippet>cr</snippet></ROW><ROW><id>2321909</id><snippet>_sub()</snippet></ROW><ROW><id>2321909</id><snippet>id=</snippet></ROW><ROW><id>2321909</id><snippet>#!/usr/bin/env python

import gtk
import rsvg

window = gtk.Window()
window.set_title("Foo")
window.connect("destroy", gtk.main_quit)
window.show()

svg = rsvg.Handle(file='cards.svg')
pixbuf = svg.get_pixbuf(id='#3_diamond')

image = gtk.Image()
image.set_from_pixbuf(pixbuf)
image.show()

window.add(image)

gtk.main()
</snippet></ROW><ROW><id>2321931</id><snippet>repr()</snippet></ROW><ROW><id>2321931</id><snippet>unicodedata.name()</snippet></ROW><ROW><id>2321931</id><snippet>&gt;&gt;&gt; s = ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal '
&gt;&gt;&gt; print repr(s.decode('utf8'))
u' mwen bezwen \xe3 \xa8 d medikal '
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name(u'\xe3')
'LATIN SMALL LETTER A WITH TILDE'
&gt;&gt;&gt; unicodedata.name(u'\xa8')
'DIAERESIS'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2321931</id><snippet>&gt;&gt;&gt; s = ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal '
&gt;&gt;&gt; for enc in 'euc-kr big5 gb2312 shift-jis euc-jp cp1251 koi8-r'.split():
    print enc, s.decode(enc)


euc-kr  mwen bezwen 찾 짢 d medikal 
big5  mwen bezwen 瓊 穡 d medikal 
gb2312  mwen bezwen 茫 篓 d medikal 
shift-jis  mwen bezwen ﾃ｣ ﾂｨ d medikal 
euc-jp  mwen bezwen 達 即 d medikal 
cp1251  mwen bezwen ГЈ ВЁ d medikal 
koi8-r  mwen bezwen цё б╗ d medikal 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2321931</id><snippet>Input language: English (guess)
Output language: Haitian Creole
Operating system: linux
Python version: unknown
C++ package name: unknown
C++ package URL: unknown
C++ package output encoding: unknown

Test 1 input: unknown
Test 1 expected output: unknown
Test 1 actual output (utf8): ' mwen bezwen \xc3\xa3 \xc2\xa8 d medikal '
[Are all of those internal spaces really in the string?]

Test 2 input: 'I need medical aid.'
Test 2 expected output (utf8): 'Mwen bezwen \xc3\xa8d medikal.'
Test 2 actual output (utf8): unknown
</snippet></ROW><ROW><id>2321931</id><snippet>Mwen bezwen èd medikal</snippet></ROW><ROW><id>2321931</id><snippet>8a 99164
95 27682
c3 8210
a8 6004
b2 2159
</snippet></ROW><ROW><id>2321931</id><snippet>e-grave is c3 a8 in UTF-8
o-grave is c3 b2 in UTF-8
2159 + 6004 approx == 8210
6004 approx == 3 * 2159
</snippet></ROW><ROW><id>2321931</id><snippet>e-grave is 8a in old Western Europe DOS encodings like cp850!!
o-grave is 95 in old Western Europe DOS encodings like cp850!!
99164 approx == 3 * 27682
</snippet></ROW><ROW><id>2322030</id><snippet>print("Hello, World!")
print("Please enter a number: ")
x = input()
print(x)
</snippet></ROW><ROW><id>2322194</id><snippet>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; import tst
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "tst.py", line 12, in &lt;module&gt;
    Bus=getBus()
  File "tst.py", line 9, in getBus
    return sys.modules[mod_name].__dict__["Bus"]
KeyError: 'Bus'
</snippet></ROW><ROW><id>2322292</id><snippet>MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware', 
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.locale.LocaleMiddleware',
    'localeurl.middleware.LocaleURLMiddleware',
    'multilingual.middleware.DefaultLanguageMiddleware',
    'multilingual.flatpages.middleware.FlatpageFallbackMiddleware',
    'django.middleware.common.CommonMiddleware', 
)
</snippet></ROW><ROW><id>2322483</id><snippet>print response.content</snippet></ROW><ROW><id>2322483</id><snippet>pdb</snippet></ROW><ROW><id>2322483</id><snippet>\</snippet></ROW><ROW><id>2322614</id><snippet>**kwargs</snippet></ROW><ROW><id>2322614</id><snippet>import re

remove_non_digits = re.compile(r'[^\d.]+')

inputList = ["a='0.015in' lPrime='0.292' offX='45um' offY='75um' sPrime='0.393' twistLength='0'",
 "a='0.015in' lPrime='0.292' offX='60um' offY='75um' sPrime='0.393' twistLength='0'",
 "a='0.015in' lPrime='0.292' offX='75um' offY='75um' sPrime='0.393' twistLength='0'", '']

#remove empty strings
flag = True
while flag:
    try:
        inputList.remove('')
    except ValueError:
        flag=False

outputList = []

for varString in inputList:
    varStringList = varString.split()
    varDict = {}
    for aVar in varStringList:
        varList = aVar.split('=')
        varDict[varList[0]] = varList[1]
    outputList.append(varDict)

for aDict in outputList:
    for aKey in aDict:
        aDict[aKey] = float(remove_non_digits.sub('', aDict[aKey]))

print outputList
</snippet></ROW><ROW><id>2322614</id><snippet>[{'a': 0.014999999999999999, 'offY': 75.0, 'offX': 45.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 60.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 75.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}]
</snippet></ROW><ROW><id>2322711</id><snippet>import itertools
class Indexable(object):
    def __init__(self,it):
        self.it=it
    def __iter__(self):
        for elt in self.it:
            yield elt
    def __getitem__(self,index):
        try:
            return next(itertools.islice(self.it,index,index+1))
        except TypeError:
            return list(itertools.islice(self.it,index.start,index.stop,index.step))
</snippet></ROW><ROW><id>2322711</id><snippet>it=Indexable(fib())
print(it[10])
#144
print(it[2:12:2])
#[610, 1597, 4181, 10946, 28657]
</snippet></ROW><ROW><id>2322711</id><snippet>it[2:12:2]</snippet></ROW><ROW><id>2322711</id><snippet>[3, 8, 21, 55, 144]</snippet></ROW><ROW><id>2322711</id><snippet>it[10]</snippet></ROW><ROW><id>2322711</id><snippet>it[2:12:2]</snippet></ROW><ROW><id>2322711</id><snippet>[3, 8, 21, 55, 144]</snippet></ROW><ROW><id>2322711</id><snippet>class Indexable(object):
    def __init__(self,it):
        self.it=it
        self.already_computed=[]
    def __iter__(self):
        for elt in self.it:
            self.already_computed.append(elt)
            yield elt
    def __getitem__(self,index):
        try:
            max_idx=index.stop
        except AttributeError:
            max_idx=index
        n=max_idx-len(self.already_computed)+1
        if n&gt;0
            self.already_computed.extend(itertools.islice(self.it,n))
        return self.already_computed[index]            
</snippet></ROW><ROW><id>2322711</id><snippet>self.already_computed</snippet></ROW><ROW><id>2322762</id><snippet>media</snippet></ROW><ROW><id>2322762</id><snippet>{% for file in media %}
    &lt;a href="{{ file.url }}"&gt;{{ file.title }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>2322762</id><snippet>thumbnail_list = []
for file in media:
    file_info = {}
    file_info['url'] = file.url
    file_info['title'] = file.title
    thumbnail_list.append(file_info)

{% for file in thumbnail_list %}
    &lt;a href="{{ file.url }}"&gt;{{ file.title }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>2322762</id><snippet>class FileInfo(object):
    def __init__(self, file):
        self.url = file.url # do whatever
        self.title = file.title # do whatever

thumbnail_list = []
for file in media:
    thumbnail_list.append(FileInfo(file))
</snippet></ROW><ROW><id>2323165</id><snippet>any(pred(x) for x in lst)
</snippet></ROW><ROW><id>2323165</id><snippet>from itertools import imap
any(imap(pred, lst))
</snippet></ROW><ROW><id>2323267</id><snippet>class CheapClone(object):
    def __init__(self, original):
        self.__dict__ = original.__dict__
</snippet></ROW><ROW><id>2323267</id><snippet>from sqlalchemy.orm.attributes import ClassManager, instrumentation_registry

class ReadonlyClassManager(ClassManager):
    """Enables configuring a mapper to return instances of uninstrumented 
    classes instead. To use add a readonly_type attribute referencing the
    desired class to use instead of the instrumented one."""
    def __init__(self, class_):
        ClassManager.__init__(self, class_)
        self.readonly_version = getattr(class_, 'readonly_type', None)
        if self.readonly_version:
            # default instantiation logic doesn't know to install finders
            # for our alternate class
            instrumentation_registry._dict_finders[self.readonly_version] = self.dict_getter()
            instrumentation_registry._state_finders[self.readonly_version] = self.state_getter()

    def new_instance(self, state=None):
        if self.readonly_version:
            instance = self.readonly_version.__new__(self.readonly_version)
            self.setup_instance(instance, state)
            return instance
        return ClassManager.new_instance(self, state)

Base = declarative_base()
Base.__sa_instrumentation_manager__ = ReadonlyClassManager
</snippet></ROW><ROW><id>2323267</id><snippet>class ReadonlyFoo(object):
    pass

class Foo(Base, ReadonlyFoo):
    __tablename__ = 'foo'
    id = Column(Integer, primary_key=True)
    name = Column(String(32))

    readonly_type = ReadonlyFoo

assert type(session.query(Foo).first()) is ReadonlyFoo
</snippet></ROW><ROW><id>2323336</id><snippet>slave.max_builds</snippet></ROW><ROW><id>2323336</id><snippet>nextSlave</snippet></ROW><ROW><id>2323336</id><snippet>Builder</snippet></ROW><ROW><id>2323336</id><snippet>Builder</snippet></ROW><ROW><id>2323336</id><snippet>list</snippet></ROW><ROW><id>2323336</id><snippet>buildbot.buildslave.BuildSlave</snippet></ROW><ROW><id>2323336</id><snippet>None</snippet></ROW><ROW><id>2323422</id><snippet>itertools</snippet></ROW><ROW><id>2323422</id><snippet>izip</snippet></ROW><ROW><id>2323422</id><snippet>from itertools import izip
for i, j in izip(handle1, handle2):
    ...
</snippet></ROW><ROW><id>2323422</id><snippet>izip_longest</snippet></ROW><ROW><id>2323422</id><snippet>izip</snippet></ROW><ROW><id>2323563</id><snippet>raw_input</snippet></ROW><ROW><id>2323563</id><snippet>webbrowser</snippet></ROW><ROW><id>2323563</id><snippet>sys.stdout</snippet></ROW><ROW><id>2323563</id><snippet>sys.stderr</snippet></ROW><ROW><id>2323563</id><snippet>import os
gmail_user = raw_input('Please enter your Gmail username: ')
savout = os.dup(1)
os.close(1)
os.open(os.devnull, os.O_RDWR)
try:
   webbrowser.open(whatever)
finally:
   os.dup2(savout, 1)
</snippet></ROW><ROW><id>2323743</id><snippet>import wx

class SelectableFrame(wx.Frame):

    c1 = None
    c2 = None

    def __init__(self, parent=None, id=-1, title=""):
        wx.Frame.__init__(self, parent, id, title, size=wx.DisplaySize())

        self.panel = wx.Panel(self, size=self.GetSize())

        self.panel.Bind(wx.EVT_MOTION, self.OnMouseMove)
        self.panel.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
        self.panel.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)
        self.panel.Bind(wx.EVT_PAINT, self.OnPaint)

        self.SetCursor(wx.StockCursor(wx.CURSOR_CROSS))

        self.SetTransparent(50)

    def OnMouseMove(self, event):
        if event.Dragging() and event.LeftIsDown():
            self.c2 = event.GetPosition()
            self.Refresh()

    def OnMouseDown(self, event):
        self.c1 = event.GetPosition()

    def OnMouseUp(self, event):
        self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))

    def OnPaint(self, event):
        if self.c1 is None or self.c2 is None: return

        dc = wx.PaintDC(self.panel)
        dc.SetPen(wx.Pen('red', 1))
        dc.SetBrush(wx.Brush(wx.Color(0, 0, 0), wx.TRANSPARENT))

        dc.DrawRectangle(self.c1.x, self.c1.y, self.c2.x - self.c1.x, self.c2.y - self.c1.y)

    def PrintPosition(self, pos):
        return str(pos.x) + " " + str(pos.y)


class MyApp(wx.App):

    def OnInit(self):
        frame = SelectableFrame()
        frame.Show(True)
        self.SetTopWindow(frame)

        return True


app = MyApp(0)
app.MainLoop()
</snippet></ROW><ROW><id>2324133</id><snippet>fh = open("imageToSave.png", "wb")
fh.write(imgData.decode('base64'))
fh.close()
</snippet></ROW><ROW><id>2324472</id><snippet>a = b if b else {}
</snippet></ROW><ROW><id>2324472</id><snippet>if b:
    a = b
else:
    a = {}
</snippet></ROW><ROW><id>2324472</id><snippet>is None</snippet></ROW><ROW><id>2324472</id><snippet>a = b if b is not None else {}
</snippet></ROW><ROW><id>2324487</id><snippet>ttest_...</snippet></ROW><ROW><id>2324487</id><snippet>&gt;&gt;&gt; print 't-statistic = %6.3f pvalue = %6.4f' %  stats.ttest_1samp(x, m)
t-statistic =  0.391 pvalue = 0.6955
</snippet></ROW><ROW><id>2324494</id><snippet>string = (str(a/b)+      #this value is something
          '\t'+str(c)+   #this value is another thing
          '\t'+str(d)+   #and this one too
          ...
          '\n')
</snippet></ROW><ROW><id>2325047</id><snippet>setup.py</snippet></ROW><ROW><id>2325047</id><snippet>bdist</snippet></ROW><ROW><id>2325047</id><snippet>sdist_rpm</snippet></ROW><ROW><id>2325047</id><snippet>bdist</snippet></ROW><ROW><id>2325261</id><snippet>*pool</snippet></ROW><ROW><id>2325261</id><snippet>product()</snippet></ROW><ROW><id>2325261</id><snippet>for n in itertools.product(*pool):
   print(n)
</snippet></ROW><ROW><id>2325261</id><snippet>pool</snippet></ROW><ROW><id>2325336</id><snippet>sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)),'..'))
</snippet></ROW><ROW><id>2325401</id><snippet>auth_ldap</snippet></ROW><ROW><id>2325401</id><snippet>if config.auth_method == 'ldap':
  import ldap_auth as auth
elif config.auth_method == 'db':
  import db_auth as auth
else:
  raise Exception("No valid authentication module configured")

auth.check_login(user, password)
</snippet></ROW><ROW><id>2325401</id><snippet>check_login</snippet></ROW><ROW><id>2325401</id><snippet>LoginFailure</snippet></ROW><ROW><id>2325401</id><snippet>True</snippet></ROW><ROW><id>2325401</id><snippet>False</snippet></ROW><ROW><id>2325460</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2325460</id><snippet>.bashrc</snippet></ROW><ROW><id>2325460</id><snippet>export PYTHONPATH=/projects/my_py_lib
</snippet></ROW><ROW><id>2325751</id><snippet>M-x cd</snippet></ROW><ROW><id>2325751</id><snippet>M-x pdb</snippet></ROW><ROW><id>2325751</id><snippet>Run pdb (like this): pdb</snippet></ROW><ROW><id>2325751</id><snippet>test.py</snippet></ROW><ROW><id>2325751</id><snippet>(Pdb)</snippet></ROW><ROW><id>2325751</id><snippet>help</snippet></ROW><ROW><id>2325751</id><snippet>import pdb 
pdb.set_trace()
</snippet></ROW><ROW><id>2325751</id><snippet>test.py</snippet></ROW><ROW><id>2325751</id><snippet>M-x shell</snippet></ROW><ROW><id>2325751</id><snippet>pdb</snippet></ROW><ROW><id>2325751</id><snippet>pdb.set_trace()</snippet></ROW><ROW><id>2326045</id><snippet>sys.path</snippet></ROW><ROW><id>2326045</id><snippet>/home/bodacydo/work/project</snippet></ROW><ROW><id>2326045</id><snippet>sys.path</snippet></ROW><ROW><id>2326045</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>2326513</id><snippet>&gt;&gt;&gt;&gt; l = [(1,2), (3,4)]
&gt;&gt;&gt;&gt; for i, e in enumerate(l):
....     l[i] = (e[0]+xk, e[1]+yk)
</snippet></ROW><ROW><id>2326513</id><snippet>&gt;&gt;&gt;&gt; l = [(e[0]+xk, e[1]+yk) for e in l]
</snippet></ROW><ROW><id>2327164</id><snippet>if my_event.isSet():
    continue
</snippet></ROW><ROW><id>2327298</id><snippet># -*- coding: utf-8 -*-
normalString = "äöü"

# Now convert to unicode. Specified encoding must match the file encoding
# in this example. In general, you must specify how the bytes-only string
# contained in "normalString" is encoded.
unicodeString = unicode(normalString, "utf-8")

with open(unicodeString, "w") as f:
    ...
</snippet></ROW><ROW><id>2327403</id><snippet>wsgi</snippet></ROW><ROW><id>2327873</id><snippet>with</snippet></ROW><ROW><id>2327873</id><snippet>import time    
from contextlib import contextmanager

@contextmanager  
def measureTime(title):
    t1 = time.clock()
    yield
    t2 = time.clock()
    print '%s: %0.2f seconds elapsed' % (title, t2-t1)
</snippet></ROW><ROW><id>2327873</id><snippet>def myFunc():
    #...

    with measureTime('myFunc'):
        #block of code to time here

    #...
</snippet></ROW><ROW><id>2328116</id><snippet>SIG_IGN</snippet></ROW><ROW><id>2328146</id><snippet>GameClass</snippet></ROW><ROW><id>2328146</id><snippet>FieldClass</snippet></ROW><ROW><id>2328146</id><snippet>PlayerClass</snippet></ROW><ROW><id>2328146</id><snippet>GameClass</snippet></ROW><ROW><id>2328146</id><snippet>class GameClass:
    def __init__( self, fc, pc ):
        self.Field = fc
        self.Player = pc

class PlayerClass:
    def __init__( self, fc ):
        self.fc = fc

    def DoMagicHere( self ):
        # use self.fc
        pass

fc=FieldClass()
pc=PlayerClass(fc)
gc=GameClass(fc, pc)
</snippet></ROW><ROW><id>2328444</id><snippet>from M2Crypto import SSL, httpslib

context = SSL.Context("sslv3")

# Disable certificate checking
context.set_verify(0, depth = 0)

connection = httpslib.HTTPSConnection("somehostname", 443, ssl_context=context)

# Hack (!!!) for disabling host name check &lt;CN&gt; == &lt;expected host name&gt;.
# Will affect any future SSL connections made by M2Crypto!
SSL.Connection.postConnectionCheck = None

connection.connect() # &lt;-- this would normally raise SSL verification errors
connection.request("GET", "/")

...
</snippet></ROW><ROW><id>2328444</id><snippet>socket</snippet></ROW><ROW><id>2328444</id><snippet>M2Crypto.SSL</snippet></ROW><ROW><id>2328444</id><snippet>socket.ssl</snippet></ROW><ROW><id>2328619</id><snippet>import os
import urllib2
import datetime
import ftplib

currdate = datetime.datetime.now()
formatdate = currdate.strftime("%m-%d-%Y-%H%M")

def log():

    fqn = os.uname()[1]
    ext_ip = urllib2.urlopen('http://whatismyip.org').read()
    smush = str(fqn + formatdate)
    s = ftplib.FTP('10.7.1.71','username','password')
    f = open('/Users/admin/Documents/%s.txt' % smush,'w')
    f.write(str("Asset: %s " % fqn))
    f.write('\n')
    f.write(str("Checking in from IP#: %s" % ext_ip))
    f.write('\n')
    f.write(str("On: %s" % formatdate))
    f.close
    f = open('/Users/admin/Documents/%s.txt' % smush,'rb')
    s.storbinary('STOR %s.txt' % smush , f)
    s.close
    f.close
</snippet></ROW><ROW><id>2328812</id><snippet>settings.py</snippet></ROW><ROW><id>2328812</id><snippet>import os
def abspath(file):
    return os.path.join(os.path.dirname(__file__), file).replace('\\','/')
</snippet></ROW><ROW><id>2328812</id><snippet>DATABASE_NAME = abspath('mydb.db')
MEDIA_ROOT = abspath('media/')
</snippet></ROW><ROW><id>2328859</id><snippet>i * (3 * i - 1 ) / 2</snippet></ROW><ROW><id>2328859</id><snippet>if i == g</snippet></ROW><ROW><id>2328859</id><snippet>if p_i &gt; p_g</snippet></ROW><ROW><id>2328859</id><snippet>def main():
        maxNumber = 5000
        diff = 1000

        p = {}
        quickCache = {}

        for i in range(maxNumber):
            p[i] = i * (3 * i - 1 ) / 2

        def quickCheck(n):
            if n in quickCache: return quickCache[n]
            partial_c = (sqrt(1 + 24 * (n)))/-6 
            c = 1/6 + partial_c
            if int(c.real) == c.real:
                    quickCache[n] = True
                    return True
            c = c - 2*partial_c
            if int(c.real) == c.real:
                    quickCache[n] = True
                    return True
            quickCache[n] = False
            return False

        for i in range(1, maxNumber):
                mi = p[i]
                for g in range(i+1, maxNumber):
                        ma = p[g]
                        if ma - mi &lt; diff and quickCheck(ma - mi) and quickCheck(ma + mi):
                                print('New couple ', ma, mi)
                                diff = ma - mi
</snippet></ROW><ROW><id>2329076</id><snippet>def initialize():
    ... lots of initialization ...
    return foo.bar.SomeClass(init_variable)

if __name__ == "__main__":
    myObject = initialize()
    myObject.member1 # works
</snippet></ROW><ROW><id>2329076</id><snippet>class</snippet></ROW><ROW><id>2329076</id><snippet>class MyProgram(object):
    def __init__(self):
        # ... lots of initialization ...
        self.myObject = foo.bar.SomeClass(init_variable)

    def usage(self):
        self.myObject.member1

if __name__ == "__main__":
    m = MyProgram()
    m.usage()
</snippet></ROW><ROW><id>2329138</id><snippet>httpresponse_kwargs = {'mimetype': kwargs.pop('mimetype', None)}
return HttpResponse(loader.render_to_string(*args, **kwargs), **httpresponse_kwargs)
</snippet></ROW><ROW><id>2329193</id><snippet>c = range(a, b)
print [d * e for d in c for e in c]
</snippet></ROW><ROW><id>2329727</id><snippet>dict</snippet></ROW><ROW><id>2329727</id><snippet>UserDict</snippet></ROW><ROW><id>2329727</id><snippet>dict</snippet></ROW><ROW><id>2329727</id><snippet>help(dict)</snippet></ROW><ROW><id>2329727</id><snippet>__delitem__</snippet></ROW><ROW><id>2329727</id><snippet>__setitem__</snippet></ROW><ROW><id>2329727</id><snippet>clear</snippet></ROW><ROW><id>2329727</id><snippet>__iter__</snippet></ROW><ROW><id>2329727</id><snippet>keys</snippet></ROW><ROW><id>2329727</id><snippet>values</snippet></ROW><ROW><id>2329727</id><snippet>items</snippet></ROW><ROW><id>2329727</id><snippet>&gt;&gt;&gt; class odict(dict):
...     def __init__(self, *args, **kw):
...         super(odict,self).__init__(*args, **kw)
...         self.itemlist = super(odict,self).keys()
...     def __setitem__(self, key, value):
...          # TODO: what should happen to the order if
...          #       the key is already in the dict       
...         self.itemlist.append(key)
...         super(odict,self).__setitem__(key, value)
...     def __iter__(self):
...         return iter(self.itemlist)
...     def keys(self):
...         return self.itemlist
...     def values(self):
...         return [self[key] for key in self]  
...     def itervalues(self):
...         return (self[key] for key in self)
... 
&gt;&gt;&gt; od = odict(a=1,b=2)
&gt;&gt;&gt; print od
{'a': 1, 'b': 2}
&gt;&gt;&gt; od['d']=4
&gt;&gt;&gt; od['c']=3
&gt;&gt;&gt; print od   # look at the `__str__` and `__repr__` methods 
{'a': 1, 'c': 3, 'b': 2, 'd': 4}
&gt;&gt;&gt; print od.keys()
['a', 'b', 'd', 'c']
&gt;&gt;&gt; print od.values()
[1, 2, 4, 3]
</snippet></ROW><ROW><id>2329753</id><snippet>print repr(filename)</snippet></ROW><ROW><id>2329753</id><snippet>import ntpath
print ntpath.basename(filename)
</snippet></ROW><ROW><id>2329972</id><snippet>def removeLine(filename, lineno):
    fro = open(filename, "rb")

    current_line = 0
    while current_line &lt; lineno:
        fro.readline()
        current_line += 1

    seekpoint = fro.tell()
    frw = open(filename, "r+b")
    frw.seek(seekpoint, 0)

    # read the line we want to discard
    fro.readline()

    # now move the rest of the lines in the file 
    # one line back 
    chars = fro.readline()
    while chars:
        frw.writelines(chars)
        chars = fro.readline()

    fro.close()
    frw.truncate()
    frw.close()
</snippet></ROW><ROW><id>2330297</id><snippet>sys.stdout.isatty()</snippet></ROW><ROW><id>2330297</id><snippet>def hilite(string, status, bold):
    attr = []
    if status:
        # green
        attr.append('32')
    else:
        # red
        attr.append('31')
    if bold:
        attr.append('1')
    return '\x1b[%sm%s\x1b[0m' % (';'.join(attr), string)
</snippet></ROW><ROW><id>2330581</id><snippet>opendir(3)</snippet></ROW><ROW><id>2330610</id><snippet>&gt;&gt;&gt; ctypes.c_long(1).value
1
</snippet></ROW><ROW><id>2330756</id><snippet>set http_proxy=http://wwwcache.lancs.ac.uk:8080
</snippet></ROW><ROW><id>2330756</id><snippet>export http_proxy=http://wwwcache.lancs.ac.uk:8080/
</snippet></ROW><ROW><id>2330856</id><snippet>try:
    while True:
        data = ser.read(1).__repr__()
        if data:
            print "Received: %s." % data
        else:
            print "Looping."
except KeyboardInterrupt:
    print "Done."
except:
    raise
finally:
    ser.close()
    print "Closed port."
</snippet></ROW><ROW><id>2330861</id><snippet>pickle</snippet></ROW><ROW><id>2330861</id><snippet>pickle</snippet></ROW><ROW><id>2330861</id><snippet>import cPickle
from collections import namedtuple

ChanVal= namedtuple( 'ChanVal', ['eventTime','eventTimeExact', 'other_clock', ... ] )
for line socket:
    c= ChanVal( **line.split(',') )
    cPickle.dump( sys.stdout )
</snippet></ROW><ROW><id>2330861</id><snippet>import cPickle
from collections import namedtuple
ChanVal= namedtuple( 'ChanVal', ['eventTime','eventTimeExact', 'other_clock', ... ] )
while True:
    item = cPickle.load( sys.stdin )
    # processing
    cPickle.dump( sys.stdout )
</snippet></ROW><ROW><id>2330861</id><snippet>python proc1.py | python proc2.py
</snippet></ROW><ROW><id>2330880</id><snippet>import json
obj= json.loads( aString )
obj['session_key']
</snippet></ROW><ROW><id>2330880</id><snippet>obj= eval(myString)
obj['session_key']
</snippet></ROW><ROW><id>2331026</id><snippet>options</snippet></ROW><ROW><id>2331026</id><snippet>print options.input_pattern
</snippet></ROW><ROW><id>2331379</id><snippet>stdout=</snippet></ROW><ROW><id>2331379</id><snippet>stderr=</snippet></ROW><ROW><id>2331640</id><snippet>datetime.astimezone</snippet></ROW><ROW><id>2331640</id><snippet>import pytz  # 3rd party
u=datetime.utcnow()
u=u.replace(tzinfo=pytz.utc)
</snippet></ROW><ROW><id>2331640</id><snippet>print datetime.astimezone(u, pytz.timezone("EST"))
</snippet></ROW><ROW><id>2332437</id><snippet>fb(method='stream_publish', args={'session_key': settings.FACEBOOK_SESSION, 'uid':PAGE_ID, 'target_id': 'NULL', 'message':'MESSAGE_HERE'})
</snippet></ROW><ROW><id>2332520</id><snippet>cm.set_bad</snippet></ROW><ROW><id>2332520</id><snippet>set_bad</snippet></ROW><ROW><id>2332520</id><snippet>import numpy as NP
from matplotlib import pyplot as PLT
from matplotlib import cm as CM

A = NP.random.randint(10, 100, 100).reshape(10, 10)
mask =  NP.tri(A.shape[0], k=-1)
A = NP.ma.array(A, mask=mask) # mask out the lower triangle
fig = PLT.figure()
ax1 = fig.add_subplot(111)
cmap = CM.get_cmap('jet', 10) # jet doesn't have white color
cmap.set_bad('w') # default value is 'k'
ax1.imshow(A, interpolation="nearest", cmap=cmap)
ax1.grid(True)
PLT.show()
</snippet></ROW><ROW><id>2332524</id><snippet>def list_ajax_etag(request):
    return str(request.GET.get('l',''))+str(request.GET.get('a',''))
</snippet></ROW><ROW><id>2332902</id><snippet>def logs(user):
    return Log.objects.filter(email=user.email)

from django.contrib.auth.models import User
User.logs = property(logs)
</snippet></ROW><ROW><id>2332902</id><snippet>user = request.user
logs = user.logs
</snippet></ROW><ROW><id>2333251</id><snippet>lstsq</snippet></ROW><ROW><id>2333251</id><snippet>a</snippet></ROW><ROW><id>2333251</id><snippet>b</snippet></ROW><ROW><id>2333251</id><snippet>eig(cov(data))</snippet></ROW><ROW><id>2333251</id><snippet>svd</snippet></ROW><ROW><id>2333251</id><snippet>import numpy as np

# Generate some data that lies along a line

x = np.mgrid[-2:5:120j]
y = np.mgrid[1:9:120j]
z = np.mgrid[-5:3:120j]

data = np.concatenate((x[:, np.newaxis], 
                       y[:, np.newaxis], 
                       z[:, np.newaxis]), 
                      axis=1)

# Perturb with some Gaussian noise
data += np.random.normal(size=data.shape) * 0.4

# Calculate the mean of the points, i.e. the 'center' of the cloud
datamean = data.mean(axis=0)

# Do an SVD on the mean-centered data.
uu, dd, vv = np.linalg.svd(data - datamean)

# Now vv[0] contains the first principal component, i.e. the direction
# vector of the 'best fit' line in the least squares sense.

# Now generate some points along this best fit line, for plotting.

# I use -7, 7 since the spread of the data is roughly 14
# and we want it to have mean 0 (like the points we did
# the svd on). Also, it's a straight line, so we only need 2 points.
linepts = vv[0] * np.mgrid[-7:7:2j][:, np.newaxis]

# shift by the mean to get the line in the right place
linepts += datamean

# Verify that everything looks right.

import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d as m3d

ax = m3d.Axes3D(plt.figure())
ax.scatter3D(*data.T)
ax.plot3D(*linepts.T)
plt.show()
</snippet></ROW><ROW><id>2333682</id><snippet>numpy.nonzero(numpy.setmember1d(a2, a1))[0]
</snippet></ROW><ROW><id>2333682</id><snippet>len(a2) == 100</snippet></ROW><ROW><id>2333682</id><snippet>len(a1) == 10000</snippet></ROW><ROW><id>2333682</id><snippet>a1</snippet></ROW><ROW><id>2333682</id><snippet>a2</snippet></ROW><ROW><id>2333883</id><snippet>MySQLdb</snippet></ROW><ROW><id>2333883</id><snippet>oursql</snippet></ROW><ROW><id>2333883</id><snippet>urllib2</snippet></ROW><ROW><id>2333883</id><snippet>mechanize</snippet></ROW><ROW><id>2333883</id><snippet>etree</snippet></ROW><ROW><id>2333883</id><snippet>lxml</snippet></ROW><ROW><id>2333883</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>2333883</id><snippet>lxml</snippet></ROW><ROW><id>2333883</id><snippet>etree</snippet></ROW><ROW><id>2333883</id><snippet>lxml</snippet></ROW><ROW><id>2333883</id><snippet>FormEncode</snippet></ROW><ROW><id>2333883</id><snippet>Genshi</snippet></ROW><ROW><id>2333883</id><snippet>Jinja2</snippet></ROW><ROW><id>2333883</id><snippet>mako</snippet></ROW><ROW><id>2333883</id><snippet>cheetah</snippet></ROW><ROW><id>2333883</id><snippet>urllib2</snippet></ROW><ROW><id>2333883</id><snippet>etree</snippet></ROW><ROW><id>2333979</id><snippet>f = open(tmpFile, 'w')
f.write(text)
# make sure that all data is on disk
# see http://stackoverflow.com/questions/7433057/is-rename-without-fsync-safe
f.flush()
os.fsync(f.fileno()) 
f.close()

os.rename(tmpFile, myFile)
</snippet></ROW><ROW><id>2333979</id><snippet>os.fsync</snippet></ROW><ROW><id>2334179</id><snippet>internalPointer()</snippet></ROW><ROW><id>2334179</id><snippet>QModelIndex</snippet></ROW><ROW><id>2334179</id><snippet>QVariant</snippet></ROW><ROW><id>2334179</id><snippet>class TestModel(QAbstractItemModel):
    def __init__(self, plan):
        QAbstractItemModel.__init__(self)

    def index(self, row, column, parent):
        if not parent.isValid():
            return self.createIndex(row, column, "foo")
        return self.createIndex(row, column, "bar")

    def parent(self, index):
         if index.internalPointer() == "bar":
            return self.createIndex(0, 0, "foo")
        return QModelIndex()

    def rowCount(self, index):
        if index.internalPointer() == "bar":
            return 0
        return 1

    def columnCount(self, index):
        return 1

    def data(self, index, role):
        if role == 0:  # Qt.DisplayRole
            return index.internalPointer()
        else:
            return None
</snippet></ROW><ROW><id>2334722</id><snippet>def reencode(file):
    for line in file:
        yield line.decode('windows-1250').encode('utf-8')

csv_writer = csv.writer(open(outfilepath,'w'), delimiter=',',quotechar='"', quoting=csv.QUOTE_MINIMAL)
csv_reader = csv.reader(reencode(open(filepath)), delimiter=";",quotechar='"')
for c in csv_reader:
    l = # rearange columns here
    csv_writer.writerow(l)
</snippet></ROW><ROW><id>2334784</id><snippet>Q(question__startswith='Who') | ~Q(pub_date__year=2005)
</snippet></ROW><ROW><id>2334784</id><snippet>Record.objects.filter( Q(parameter__icontains="wd2") | ~Q(parameter__icontains="wd") )
</snippet></ROW><ROW><id>2334857</id><snippet> os.chdir(r"C:\Program Files(x86)\SomeFolder")
 the_dll = WinDLL("SomeDLL.dll")      
</snippet></ROW><ROW><id>2335122</id><snippet>ssl</snippet></ROW><ROW><id>2335122</id><snippet>socket.socket</snippet></ROW><ROW><id>2335174</id><snippet>f.func_defaults</snippet></ROW><ROW><id>2335174</id><snippet>def f(a, L=[]):
    L.append(a)
    return L

print f(1)
print f(2)
print f(3)
print f.func_defaults
f.func_defaults = (['foo'],) # Don't do this!
print f(4)
</snippet></ROW><ROW><id>2335174</id><snippet>[1]
[1, 2]
[1, 2, 3]
([1, 2, 3],)
['foo', 4]
</snippet></ROW><ROW><id>2335248</id><snippet>return u'Галерея %s' % self.title
</snippet></ROW><ROW><id>2335424</id><snippet>./manage.py</snippet></ROW><ROW><id>2335734</id><snippet>import win32gui
hwnd = win32gui.GetForegroundWindow()
win32gui.MoveWindow(hwnd, 0, 0, 500, 500, True)
</snippet></ROW><ROW><id>2335878</id><snippet>&gt;&gt;&gt; '%11.4f' % -3.5
'    -3.5000'
</snippet></ROW><ROW><id>2335878</id><snippet>&gt;&gt;&gt; '{:11.4f}'.format(-3.5)
'    -3.5000'
</snippet></ROW><ROW><id>2336131</id><snippet>str( your_dbus_string )</snippet></ROW><ROW><id>2336324</id><snippet>Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; float('-0.69389E-03')
-0.00069388999999999996
</snippet></ROW><ROW><id>2336483</id><snippet>myFunc</snippet></ROW><ROW><id>2336483</id><snippet>eval(input, {"__builtins__": {}, "myFunc": myFunc})
</snippet></ROW><ROW><id>2336483</id><snippet>eval</snippet></ROW><ROW><id>2336659</id><snippet>python-dateutil</snippet></ROW><ROW><id>2336659</id><snippet>datetime</snippet></ROW><ROW><id>2336659</id><snippet>datetime</snippet></ROW><ROW><id>2336659</id><snippet>.astimezone(dateutil.tz.tzutc())</snippet></ROW><ROW><id>2336659</id><snippet>datetime.datetime.utcnow().replace(tzinfo=dateutil.tz.tzutc())</snippet></ROW><ROW><id>2336659</id><snippet>import dateutil.tz

cet = dateutil.tz.gettz('CET')

cesttime = datetime.datetime(2010, 4, 1, 12, 57, tzinfo=cet)
cesttime.isoformat()
'2010-04-01T12:57:00+02:00'

cettime = datetime.datetime(2010, 1, 1, 12, 57, tzinfo=cet)
cettime.isoformat() 
'2010-01-01T12:57:00+01:00'

# does not automatically parse the time zone portion
dateutil.parser.parse('Feb 25 2010, 16:19:20 CET')\
    .replace(tzinfo=dateutil.tz.gettz('CET'))
</snippet></ROW><ROW><id>2337134</id><snippet>&lt; flowers:3</snippet></ROW><ROW><id>2337134</id><snippet>{% blocktrans count flowers|length as counter %}
    There is one flower in the vase.
{% plural %}
    There are {{ counter }} flowers in the vase.
{% endblocktrans %}
</snippet></ROW><ROW><id>2337178</id><snippet>.create()</snippet></ROW><ROW><id>2337178</id><snippet>create</snippet></ROW><ROW><id>2337178</id><snippet>create</snippet></ROW><ROW><id>2337178</id><snippet>sys.modules['__main__']</snippet></ROW><ROW><id>2337178</id><snippet>vars(sys.modules['__main__'])</snippet></ROW><ROW><id>2337349</id><snippet>%pdb on</snippet></ROW><ROW><id>2337349</id><snippet>%run scriptname</snippet></ROW><ROW><id>2337349</id><snippet>%run -d scriptname</snippet></ROW><ROW><id>2337435</id><snippet>users_to_exclude = Noticesetting.objects.filter(send=False, notice_type__label='announcement').values('user')
emails = Emailaddress.objects.exclude(user__in=users_to_exclude)
</snippet></ROW><ROW><id>2337571</id><snippet>Media</snippet></ROW><ROW><id>2337571</id><snippet>your-app</snippet></ROW><ROW><id>2337571</id><snippet>your-app</snippet></ROW><ROW><id>2337571</id><snippet>your-model</snippet></ROW><ROW><id>2337571</id><snippet>{% extends "admin/change_form.html" %}
{% block extrahead %}
&lt;script type="text/javascript" charset="utf-8"&gt;
    var MYAPP_objectSlug = "{{ original.slug|escapejs }}";
&lt;/script&gt;
{{ block.super }}
{% endblock %}
</snippet></ROW><ROW><id>2337571</id><snippet>extrahead</snippet></ROW><ROW><id>2337571</id><snippet>original</snippet></ROW><ROW><id>2337571</id><snippet>tinyMCE.init</snippet></ROW><ROW><id>2337571</id><snippet>MYAPP_objectSlug</snippet></ROW><ROW><id>2337571</id><snippet>if (MYAPP_objectSlug == "ticker"){
    var MYAPP_cssFile = "../css/special.css"; // change to your path
} else {
    var MYAPP_cssFile = "../css/default.css"; // change to your path
}

tinyMCE.init({
    ...
    content_css : MYAPP_cssFile,
    ...
});
</snippet></ROW><ROW><id>2337591</id><snippet>#!/usr/bin/python -u
</snippet></ROW><ROW><id>2337591</id><snippet>import os,sys
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) # no buffering
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1) # line buffering
</snippet></ROW><ROW><id>2337881</id><snippet>subtransactions=True</snippet></ROW><ROW><id>2337881</id><snippet>begin()</snippet></ROW><ROW><id>2337881</id><snippet>autocommit=True</snippet></ROW><ROW><id>2337881</id><snippet>session.begin(subtransactions=True)</snippet></ROW><ROW><id>2337881</id><snippet>session.begin(nested=True)</snippet></ROW><ROW><id>2337881</id><snippet>session.begin_nested()</snippet></ROW><ROW><id>2337881</id><snippet>    emits_warning_on('mssql', 'Savepoint support in mssql is experimental and may lead to data loss.'),
    no_support('access', 'not supported by database'),
    no_support('sqlite', 'not supported by database'),
    no_support('sybase', 'FIXME: guessing, needs confirmation'),
    exclude('mysql', '&lt;', (5, 0, 3), 'not supported by database')
</snippet></ROW><ROW><id>2337894</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.urandom(10).encode('hex')
'3fa0c2f72ff275f48d66'
&gt;&gt;&gt; os.urandom(20).encode('hex')
'ecc1143b3fc90bd99bcd609b326694f13291e3d1'
&gt;&gt;&gt; os.urandom(30).encode('hex')
'd4a9a2cd7b48eca831e9805e68dd6f7db7275b654e55cdec603631a5a355'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2338033</id><snippet>numpy</snippet></ROW><ROW><id>2338033</id><snippet>scipy</snippet></ROW><ROW><id>2338033</id><snippet>numpy</snippet></ROW><ROW><id>2338033</id><snippet>scipy</snippet></ROW><ROW><id>2338137</id><snippet>pickle</snippet></ROW><ROW><id>2338137</id><snippet>pickle</snippet></ROW><ROW><id>2338137</id><snippet>pickle.py</snippet></ROW><ROW><id>2338159</id><snippet>cPickle</snippet></ROW><ROW><id>2338159</id><snippet>array.array</snippet></ROW><ROW><id>2338335</id><snippet>from django import db

db.reset_queries()
</snippet></ROW><ROW><id>2338335</id><snippet>DEBUG</snippet></ROW><ROW><id>2338335</id><snippet>False</snippet></ROW><ROW><id>2338335</id><snippet>db.reset_queries()</snippet></ROW><ROW><id>2338477</id><snippet>&gt;&gt;&gt; print xspar
  (0, 0) 1
  (0, 2) 3
  (1, 1) 4
  (1, 2) 5
  (2, 0) 7
  (2, 1) 8
&gt;&gt;&gt; print xspar[[[0],[2]],[0,2]]
  (0, 0) 1
  (0, 2) 3
  (2, 0) 7
</snippet></ROW><ROW><id>2338477</id><snippet>&gt;&gt;&gt; print xspar[[0,2],[0,2]]
  [[1 0]]
</snippet></ROW><ROW><id>2338540</id><snippet>somelist.sort(key = lambda x: x.resultType)
</snippet></ROW><ROW><id>2338540</id><snippet>import operator
s.sort(key = operator.attrgetter('resultType'))
</snippet></ROW><ROW><id>2338540</id><snippet>sorted</snippet></ROW><ROW><id>2338651</id><snippet>Deferred.chainDeferred</snippet></ROW><ROW><id>2338955</id><snippet>setup()</snippet></ROW><ROW><id>2338955</id><snippet>setup(windows=['myfile.py'])</snippet></ROW><ROW><id>2338955</id><snippet>setup()</snippet></ROW><ROW><id>2339072</id><snippet>record.value</snippet></ROW><ROW><id>2339072</id><snippet>record</snippet></ROW><ROW><id>2339072</id><snippet>whatever = QSqlTableModel.data(self, modelIndex, role)
</snippet></ROW><ROW><id>2339239</id><snippet>def update_rank(rank, article):
      old = Article.object.get(rank=rank)
      old.rank = None
      old.save()
      article.rank = rank
      article.save()
</snippet></ROW><ROW><id>2339260</id><snippet>import socks
import socket
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 8080)
socket.socket = socks.socksocket
import urllib2
print urllib2.urlopen('http://www.google.com').read()
</snippet></ROW><ROW><id>2339415</id><snippet>class Dog(object):
    def make_sound(self):
        return "woof!"

class Cat(object):
    def make_sound(self):
        return "meow!"

class LolCat(object):
    def make_sound(self):
        return "i can has cheezburger?"
</snippet></ROW><ROW><id>2339437</id><snippet>try:
  yield 42
finally:
  do_something()
</snippet></ROW><ROW><id>2339437</id><snippet>try:
  yield 42
except:  # bare except, catches *anything*
  do_something()
  raise  # re-raise same exception
do_something()
</snippet></ROW><ROW><id>2339437</id><snippet>raise sys.exc_info[0], sys.exc_info[1], sys.exc_info[2]</snippet></ROW><ROW><id>2339494</id><snippet>os.popen</snippet></ROW><ROW><id>2339494</id><snippet>import os

process = os.popen('gcc -E myHeader.h')
preprocessed = process.read()
process.close()
</snippet></ROW><ROW><id>2339494</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2339494</id><snippet>os.popen</snippet></ROW><ROW><id>2339753</id><snippet>/home/bin/foobar</snippet></ROW><ROW><id>2339753</id><snippet>*/10 * * * *  /home/bin/foobar
</snippet></ROW><ROW><id>2339753</id><snippet>/home/bin/mycrontab</snippet></ROW><ROW><id>2339753</id><snippet>crontab /home/bin/crontab</snippet></ROW><ROW><id>2339753</id><snippet>crontab -l</snippet></ROW><ROW><id>2339767</id><snippet>fab -h</snippet></ROW><ROW><id>2339801</id><snippet>.decode</snippet></ROW><ROW><id>2339801</id><snippet>.encode</snippet></ROW><ROW><id>2339801</id><snippet>u'...'</snippet></ROW><ROW><id>2339871</id><snippet>class Product(models.Model):
    name    = models.CharField(max_length = 100)
    base_price = models.DecimalField(max_digits = 5, decimal_places = 2)


    def __unicode__(self):
        return self.name


class Country(models.Model):
    name = models.CharField(max_length = 2)
    base_price = models.DecimalField(max_digits = 5, decimal_places = 2)    
    products = models.ManyToManyField(Product, through = 'CountryProduct')

    def __unicode__(self):
        return self.name


class CountryProduct(models.Model):
    country = models.ForeignKey(Country)
    product = models.ForeignKey(Product)
    overriden_price = models.DecimalField(max_digits = 5, decimal_places = 2)

    class Meta:
        unique_together = (("country", "product"),)


class CountryProductInline(admin.TabularInline):
    model = CountryProduct

class CountryAdmin(admin.ModelAdmin):
    inlines = [CountryProductInline]

class ProductAdmin(admin.ModelAdmin):
    inlines = [CountryProductInline]
</snippet></ROW><ROW><id>2339963</id><snippet>request.POST</snippet></ROW><ROW><id>2339963</id><snippet>QueryDict</snippet></ROW><ROW><id>2339963</id><snippet>copy()</snippet></ROW><ROW><id>2339963</id><snippet>request.POST</snippet></ROW><ROW><id>2339963</id><snippet>request.GET</snippet></ROW><ROW><id>2340216</id><snippet> ___     ___     ___     
|   |___|   |___|   |___
|___|   |___|   |___|   |
|   |___|   |___|   |___|
|___|   |___|   |___|   |
|   |___|   |___|   |___|
|___|   |___|   |___|   |
    |___|   |___|   |___|
</snippet></ROW><ROW><id>2340216</id><snippet>(i+1, j), (i-1, j), (i, j-1), (i, j+1), (i-1, j-1), (i+1, j-1)
</snippet></ROW><ROW><id>2340216</id><snippet>(i+1, j), (i-1, j), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j+1)
</snippet></ROW><ROW><id>2340228</id><snippet>from zipfile import _ZipDecrypter

fp = open(somefile, 'rb')
zd = _ZipDecrypter(somekey)

fp.read(12)
print ''.join(zd(c) for c in fp.read())

fp.close()
</snippet></ROW><ROW><id>2340358</id><snippet>hex</snippet></ROW><ROW><id>2340358</id><snippet>binascii</snippet></ROW><ROW><id>2340358</id><snippet>&gt;&gt;&gt; binascii.hexlify(b'hello')
b'68656c6c6f'
</snippet></ROW><ROW><id>2340579</id><snippet>from xml.dom.minidom import DOMImplementation

imp = DOMImplementation()
doctype = imp.createDocumentType(
    qualifiedName='foo',
    publicId='', 
    systemId='http://www.path.to.my.dtd.com/my.dtd',
)
doc = imp.createDocument(None, 'foo', doctype)
doc.toxml()
</snippet></ROW><ROW><id>2340579</id><snippet>&lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE foo  SYSTEM \'http://www.path.to.my.dtd.com/my.dtd\'&gt;&lt;foo/&gt;
</snippet></ROW><ROW><id>2341031</id><snippet>py_compile</snippet></ROW><ROW><id>2341031</id><snippet>$ python -tt -c "import py_compile; py_compile.compile('test.py', doraise=True)"
</snippet></ROW><ROW><id>2341031</id><snippet>doraise=True</snippet></ROW><ROW><id>2341505</id><snippet>def mysum(l):
    s2 = 0
    s = 0
    for e in l:
        s += e
        s2 += e * e
    return (s, s2)
</snippet></ROW><ROW><id>2341505</id><snippet>sigma</snippet></ROW><ROW><id>2342095</id><snippet>&gt;&gt;&gt; str(b'GET http://...', 'UTF-8')
'GET http://...'
</snippet></ROW><ROW><id>2342095</id><snippet>&gt;&gt;&gt; str(b'GET http://...')
"b'GET http://...'"
</snippet></ROW><ROW><id>2342102</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>2342102</id><snippet>from django import forms
from django.shortcuts import render_to_response

class UploadForm(forms.Form):
    cpk = forms.CharField(max_length=256)
    f = forms.FileField()

def my_upload_view(request):
    if request.method == 'POST':
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            print "Got cpk",form.cleaned_data['cpk']
            print "Got file",request.FILES['f'].read()
    else:
        form = UploadForm()
    return render_to_response('upload.html', {'form':form})
</snippet></ROW><ROW><id>2342102</id><snippet>&lt;html&gt;
&lt;body&gt;
    &lt;form enctype="multipart/form-data" method="post"&gt;
        {{ form.f }}
        {{ form.cpk }}
        &lt;input type="submit" /&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2342102</id><snippet>&lt;input type="file" name="f" id="id_f" /&gt;</snippet></ROW><ROW><id>2342102</id><snippet>settings.FILE_UPLOAD_MAX_MEMORY_SIZE</snippet></ROW><ROW><id>2342102</id><snippet>settings.FILE_UPLOAD_HANDLERS</snippet></ROW><ROW><id>2342136</id><snippet>admin.site.unregister(User)
admin.site.unregister(Group)
admin.site.unregister(Site)
</snippet></ROW><ROW><id>2342214</id><snippet>wx.Yield</snippet></ROW><ROW><id>2342214</id><snippet>wx.SafeYield</snippet></ROW><ROW><id>2342214</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>2342214</id><snippet>def start_work(self):
    thread = threading.Thread(target=self.do_work, args=(args, go, here))
    thread.setDaemon(True)
    thread.start()
def do_work(self, args, go, here):
    # do work here
    # wx.CallAfter will call the specified function on the GUI thread
    # and it's safe to call from a separate thread
    wx.CallAfter(self.work_completed, result, args, here)
def work_completed(self, result, args, here):
    # use result args to update GUI controls here
    self.text.SetLabel(result)
</snippet></ROW><ROW><id>2342214</id><snippet>start_work</snippet></ROW><ROW><id>2342214</id><snippet>EVT_BUTTON</snippet></ROW><ROW><id>2342214</id><snippet>do_work</snippet></ROW><ROW><id>2342214</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>2342500</id><snippet>nb_add</snippet></ROW><ROW><id>2342500</id><snippet>tp_as_number</snippet></ROW><ROW><id>2342637</id><snippet>def update
  @company = Company.find(params[:id])

  @scraper = Scraper.find(:page =&gt; some_url, :method =&gt; :rip)

  @scraper.product_details.each do |params|
    @company.products.create(params)
  end
end
</snippet></ROW><ROW><id>2342697</id><snippet>import</snippet></ROW><ROW><id>2342697</id><snippet>from</snippet></ROW><ROW><id>2342697</id><snippet>def</snippet></ROW><ROW><id>2342697</id><snippet>class</snippet></ROW><ROW><id>2342697</id><snippet>main</snippet></ROW><ROW><id>2342697</id><snippet>datetime</snippet></ROW><ROW><id>2342697</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>2342697</id><snippet>time</snippet></ROW><ROW><id>2342697</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2342697</id><snippet>main</snippet></ROW><ROW><id>2342972</id><snippet>__lt__()</snippet></ROW><ROW><id>2343029</id><snippet>flashvars.userVO = "{{ userVO }}"</snippet></ROW><ROW><id>2343377</id><snippet>SITE_NAME</snippet></ROW><ROW><id>2343380</id><snippet>$ mkdir /tmp/path
$ mkdir /tmp/path/top /tmp/path/top/p1 /tmp/path/top/p2
$ touch /tmp/path/top/__init__.py /tmp/path/top/p1/__init__.py /tmp/path/top/p2/__init__.py
$ touch /tmp/path/top/p1/quick1.py /tmp/path/top/p2/quick2.py$ echo 'import top.p1.quick1' &gt; /tmp/path/top/p2/quick2.py
$ PYTHONPATH=/tmp/path python /tmp/path/top/p2/quick2.py
$ python -c 'import sys; sys.path.append("/tmp/path"); import top.p2.quick2'
</snippet></ROW><ROW><id>2343380</id><snippet>__all__</snippet></ROW><ROW><id>2343380</id><snippet>from ... import *</snippet></ROW><ROW><id>2343380</id><snippet>top</snippet></ROW><ROW><id>2343380</id><snippet>/tmp/path</snippet></ROW><ROW><id>2343380</id><snippet>sys.path</snippet></ROW><ROW><id>2343636</id><snippet>range()</snippet></ROW><ROW><id>2343636</id><snippet>r = range(100000000)
</snippet></ROW><ROW><id>2343640</id><snippet>dict</snippet></ROW><ROW><id>2343640</id><snippet>{ '__ClassName___': { ... } }
</snippet></ROW><ROW><id>2343640</id><snippet>dict</snippet></ROW><ROW><id>2343640</id><snippet>dict</snippet></ROW><ROW><id>2343640</id><snippet>TYPES = { 'ParentClass': ParentClass,
          'ChildClass': ChildClass }


class CustomTypeEncoder(json.JSONEncoder):
    """A custom JSONEncoder class that knows how to encode core custom
    objects.

    Custom objects are encoded as JSON object literals (ie, dicts) with
    one key, '__TypeName__' where 'TypeName' is the actual name of the
    type to which the object belongs.  That single key maps to another
    object literal which is just the __dict__ of the object encoded."""

    def default(self, obj):
        if isinstance(obj, TYPES.values()):
            key = '__%s__' % obj.__class__.__name__
            return { key: obj.__dict__ }
        return json.JSONEncoder.default(self, obj)


def CustomTypeDecoder(dct):
    if len(dct) == 1:
        type_name, value = dct.items()[0]
        type_name = type_name.strip('_')
        if type_name in TYPES:
            return TYPES[type_name].from_dict(value)
    return dct
</snippet></ROW><ROW><id>2343640</id><snippet>from_dict()</snippet></ROW><ROW><id>2343640</id><snippet>dict</snippet></ROW><ROW><id>2343640</id><snippet>datetime</snippet></ROW><ROW><id>2343640</id><snippet>TYPES</snippet></ROW><ROW><id>2343640</id><snippet>class ChildClass(object):
    def __init__(self):
        self.foo = 'foo'
        self.bar = 1.1
        self.parent = ParentClass(1)
</snippet></ROW><ROW><id>2343640</id><snippet>{ '__ChildClass__': {
    'bar': 1.1,
    'foo': 'foo',
    'parent': {
        '__ParentClass__': {
            'foo': 1}
        }
    }
}
</snippet></ROW><ROW><id>2344074</id><snippet>getdata()</snippet></ROW><ROW><id>2344074</id><snippet>putdata()</snippet></ROW><ROW><id>2344074</id><snippet># get data from old image (as you already did)
data = list(oldimg.getdata())

# create empty new image of appropriate format
newimg = Image.new(format, size)  # e.g. ('RGB', (640, 480))

# insert saved data into the image
newimg.putdata(data)
</snippet></ROW><ROW><id>2344106</id><snippet>dict</snippet></ROW><ROW><id>2344106</id><snippet>std::map</snippet></ROW><ROW><id>2344119</id><snippet>cancel</snippet></ROW><ROW><id>2344119</id><snippet>False</snippet></ROW><ROW><id>2344228</id><snippet>class Bot:
    def fight(self):
       print "fighting is fun!"

class Scheduler:       
    def schedule_action(self,action):
       bot = Bot()
       getattr(bot,action)()

scheduler = Scheduler()
scheduler.schedule_action('fight')
</snippet></ROW><ROW><id>2344648</id><snippet>filelist</snippet></ROW><ROW><id>2344648</id><snippet>print the_file</snippet></ROW><ROW><id>2344648</id><snippet>re.escape</snippet></ROW><ROW><id>2344810</id><snippet>bisect.bisect</snippet></ROW><ROW><id>2344810</id><snippet>import datetime
import bisect
import collections

data=[ (datetime.datetime(2010, 2, 26, 12, 8, 17), 5594813L), 
  (datetime.datetime(2010, 2, 26, 12, 7, 31), 5594810L), 
  (datetime.datetime(2010, 2, 26, 12, 6, 4) , 5594807L),
]
interval=datetime.timedelta(minutes=1,seconds=30)
start=datetime.datetime(2010, 2, 26, 12, 6, 4)
grid=[start+n*interval for n in range(10)]
bins=collections.defaultdict(list)
for date,num in data:
    idx=bisect.bisect(grid,date)
    bins[idx].append(num)
for idx,nums in bins.iteritems():
    print('{0} --- {1}'.format(grid[idx],len(nums)))
</snippet></ROW><ROW><id>2344828</id><snippet>setUp</snippet></ROW><ROW><id>2344828</id><snippet>tearDown</snippet></ROW><ROW><id>2344828</id><snippet>__init__</snippet></ROW><ROW><id>2344828</id><snippet>__init__</snippet></ROW><ROW><id>2344828</id><snippet>__del__</snippet></ROW><ROW><id>2344895</id><snippet>exe</snippet></ROW><ROW><id>2344895</id><snippet>zip</snippet></ROW><ROW><id>2344895</id><snippet>.pyo</snippet></ROW><ROW><id>2344895</id><snippet>.pyc</snippet></ROW><ROW><id>2344895</id><snippet>-O</snippet></ROW><ROW><id>2344895</id><snippet>sys.path</snippet></ROW><ROW><id>2344895</id><snippet>.pyd</snippet></ROW><ROW><id>2344895</id><snippet>.so</snippet></ROW><ROW><id>2345041</id><snippet>class Foo(models.Model):
    name = models.CharField(max_length=50)
    extra_param = False

def save(self, *args, **kwargs):
    ... 
    print self.extra_param
</snippet></ROW><ROW><id>2345041</id><snippet>Foo(name="Bill Gates").save(extra_param=True)

def save(self, *args, **kwargs):
    ... 
    print kwargs["extra_param"]
</snippet></ROW><ROW><id>2345112</id><snippet>&gt;&gt;&gt; tuple([1, 2]) == (1, 2)
True
</snippet></ROW><ROW><id>2345201</id><snippet>import pickle

som = SOM_CLASS()
fileObject = &lt;any file-like object&gt;
pickle.dump(som, fileObject)
#...
som = pickle.load(fileObject)
som.work()
</snippet></ROW><ROW><id>2345428</id><snippet>s="WE THE PEOPLE OF THE UNITED STATES, IN ORDER TO FORM A MORE PERFECT UNION, ESTABLISH JUSTICE, INSURE DOMESTIC TRANQUILITY, PROVIDE FOR THE COMMON DEFENSE, PROMOTE THE GENERAL WELFARE, AND SECURE THE BLESSINGS OF LIBERTY TO OURSELVES AND OUR POSTERITY, DO ORDAIN AND ESTABLISH THIS CONSTITUTION FOR THE UNITED STATES OF AMERICA."

import textwrap
print "\n".join(textwrap.wrap(s, 80))
</snippet></ROW><ROW><id>2345428</id><snippet># You don't even use this so why import it? --&gt; import string

def main():
    user_string = raw_input()
    all_caps = user_string.upper() # guess you wanted to make it uppercase
    output = [] # this will hold the decoded characters

    for char in all_caps:
        if char.isalpha():
            value = ord(char)
            if 70 &lt;= value &lt;= 90: # look at this, almost no other programming language supports that syntax
                num = value - 5
            elif 65 &lt;= value &lt;= 69:
                num = value + 21
            output.append(chr(num)) # add the decoded character to the output list
        else:
            output.append(char) # add the character verbatim to the output list (e.g. whitespace)

    print "".join(output) # print out the list by putting it together into a string

main()
</snippet></ROW><ROW><id>2345662</id><snippet>row_stack</snippet></ROW><ROW><id>2345662</id><snippet>numcols = 4
growsize = 60*60 #60 samples/min * 60 min/hour
numrows = 3*growsize #3 hours, to start with
private.data = npy.zeros([numrows, numcols]) #alloc one big memory block
rowctr = 0
while (recording):
    private.data[rowctr] = npy.array([new_x, new_y1, new_y2, new_y3])
    rowctr += 1
    if (rowctr == numrows): #full, grow by another hour's worth of data
        private.data = npy.row_stack([private.data, npy.zeros([growsize, numcols])])
        numrows += growsize
</snippet></ROW><ROW><id>2345662</id><snippet>row_stack</snippet></ROW><ROW><id>2345680</id><snippet>C:\Python26\Lib\idlelib\idle.pyw "C:\file1.py" "C:\file2.py"
</snippet></ROW><ROW><id>2345877</id><snippet>import urllib2
import urlparse
import re

def get_hops(url):
    redirect_re = re.compile('&lt;meta[^&gt;]*?url=(.*?)["\']', re.IGNORECASE)
    hops = []
    while url:
        if url in hops:
            url = None
        else:
            hops.insert(0, url)
            response = urllib2.urlopen(url)
            if response.geturl() != url:
                hops.insert(0, response.geturl())
            # check for redirect meta tag
            match = redirect_re.search(response.read())
            if match:
                url = urlparse.urljoin(url, match.groups()[0].strip())
            else:
                url = None
    return hops
</snippet></ROW><ROW><id>2345901</id><snippet>if x in set(request.session['vote_set'])
</snippet></ROW><ROW><id>2345901</id><snippet>if x in request.session['vote_set']
</snippet></ROW><ROW><id>2345953</id><snippet>__getstate__</snippet></ROW><ROW><id>2345953</id><snippet>__setstate__</snippet></ROW><ROW><id>2345967</id><snippet>from blog.models import *
</snippet></ROW><ROW><id>2345967</id><snippet>INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    ...snip...
    'sorl.thumbnail',
    'mysite.blog',
)
</snippet></ROW><ROW><id>2345967</id><snippet>INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    ...snip...
    'sorl.thumbnail',
    'blog',
)
</snippet></ROW><ROW><id>2346012</id><snippet>void*</snippet></ROW><ROW><id>2346012</id><snippet>c_void_p</snippet></ROW><ROW><id>2346012</id><snippet>free</snippet></ROW><ROW><id>2346012</id><snippet>memcpy</snippet></ROW><ROW><id>2346012</id><snippet>memcpy</snippet></ROW><ROW><id>2346012</id><snippet>void*</snippet></ROW><ROW><id>2346012</id><snippet>free</snippet></ROW><ROW><id>2346012</id><snippet>struct</snippet></ROW><ROW><id>2346012</id><snippet>cdef struct data:
    void* hdr
    void* data
    unsigned int* len
</snippet></ROW><ROW><id>2346012</id><snippet>header</snippet></ROW><ROW><id>2346012</id><snippet>data</snippet></ROW><ROW><id>2346012</id><snippet>len</snippet></ROW><ROW><id>2346012</id><snippet>size_t</snippet></ROW><ROW><id>2346012</id><snippet>unsigned int</snippet></ROW><ROW><id>2346220</id><snippet>group()</snippet></ROW><ROW><id>2346220</id><snippet>frase = re.search(...).group(1)
</snippet></ROW><ROW><id>2346507</id><snippet>NSPropertyListSerialization.dataWithPropertyList_format_options_error_
</snippet></ROW><ROW><id>2346507</id><snippet>:</snippet></ROW><ROW><id>2346507</id><snippet>-writeToFile:atomically:</snippet></ROW><ROW><id>2346858</id><snippet>from wx.lib.newevent import NewEvent

ResultEvent, EVT_RESULT = NewEvent()
</snippet></ROW><ROW><id>2346858</id><snippet>wx.PostEvent(handler, ResultEvent(data=data))
</snippet></ROW><ROW><id>2346858</id><snippet>def OnResult(event):
    event.data

handler.Bind(EVT_RESULT, OnResult)
</snippet></ROW><ROW><id>2346858</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>2346858</id><snippet>event.Skip()</snippet></ROW><ROW><id>2346986</id><snippet>&gt;&gt;&gt; s="This | is || token || some ||| text"
&gt;&gt;&gt; items=s.split()
&gt;&gt;&gt; items
['This', '|', 'is', '||', 'token', '||', 'some', '|||', 'text']
&gt;&gt;&gt; for n,i in enumerate(items):
...     if "|" in i and i.count("|")!=2:
...          items[n]=i.replace("|","\|")
...
&gt;&gt;&gt; print ' '.join(items)
This \| is || token || some \|\|\| text
</snippet></ROW><ROW><id>2347165</id><snippet>def home(request):
    if not  logged_in:
        return HttpResponseRedirect("/login?next=%s"%reverse("home"))

    return HttpResponse(...)
</snippet></ROW><ROW><id>2347354</id><snippet>&gt;&gt;&gt; def listFrom(here):
...     print "[DBG] here: " + here
... 
&gt;&gt;&gt; def book(here, there, amount):
...     print "[DBG] here: " + here + "; there: " + there + "; amount: " + str(amount)
... 
&gt;&gt;&gt; book('LON', 'MAN', 8)
[DBG] here: LON; there: MAN; amount: 8
&gt;&gt;&gt; input = """book('LON', 'MAN', 8)"""
&gt;&gt;&gt; eval(input, {"__builtins__": {}, "listFrom": listFrom, "book": book})
[DBG] here: LON; there: MAN; amount: 8
&gt;&gt;&gt; eval("""listFrom('LON')""", {"__builtins__": {}, "listFrom": listFrom, "book": book})
[DBG] here: LON
</snippet></ROW><ROW><id>2347401</id><snippet>big(lite, (1, 2, 3))
</snippet></ROW><ROW><id>2347401</id><snippet>def big(func, args):
    func(*args)
</snippet></ROW><ROW><id>2347678</id><snippet>import os
import sys
.....
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..')
....
</snippet></ROW><ROW><id>2347825</id><snippet>yourname.py</snippet></ROW><ROW><id>2347825</id><snippet>import os, sys
filename = os.path.splitext(os.path.basename(sys.argv[0]))[0]
if not os.path.exists(filename):
    # filename does not exists, we will emulate cmd behaviour
    sys.stderr.write("'%s' is not recognized as an internal or external command,\noperable program or batch file." % filename)
    sys.exit(9009)
ret = os.system("python %s %s" % (
        filename,
        " ".join(sys.argv[1:])
        ))
exit(ret)
</snippet></ROW><ROW><id>2347871</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2348473</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>2348473</id><snippet>StringIO</snippet></ROW><ROW><id>2348473</id><snippet>cStringIO</snippet></ROW><ROW><id>2348473</id><snippet>Image.open()</snippet></ROW><ROW><id>2348684</id><snippet>import gamelib</snippet></ROW><ROW><id>2348684</id><snippet>import gamelib</snippet></ROW><ROW><id>2348684</id><snippet>class ScriptObject:
    def action(self):
        import gamelib
        print("ScriptObject.action(): calling gamelib.play_sound()")
        gamelib.play_sound()
</snippet></ROW><ROW><id>2348796</id><snippet>python-crontab</snippet></ROW><ROW><id>2348796</id><snippet>from crontab import CronTab

tab = CronTab()
cron = tab.new(command='/foo/bar')
cron.every_reboot()
tab.write()
</snippet></ROW><ROW><id>2348959</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>2349182</id><snippet>config.py</snippet></ROW><ROW><id>2349182</id><snippet>config.teamdata</snippet></ROW><ROW><id>2349182</id><snippet>config.data['teamdata']</snippet></ROW><ROW><id>2349182</id><snippet>config</snippet></ROW><ROW><id>2349182</id><snippet>/etc</snippet></ROW><ROW><id>2349182</id><snippet>/usr/local</snippet></ROW><ROW><id>2349327</id><snippet>tril</snippet></ROW><ROW><id>2349327</id><snippet>triu</snippet></ROW><ROW><id>2349613</id><snippet>(datetime.date(2010,'%d',1))%month</snippet></ROW><ROW><id>2349613</id><snippet>TypeError: an integer is required</snippet></ROW><ROW><id>2349613</id><snippet>1</snippet></ROW><ROW><id>2349613</id><snippet>'1'</snippet></ROW><ROW><id>2349613</id><snippet>month</snippet></ROW><ROW><id>2349613</id><snippet>month_start = datetime.date(2010,month,1)</snippet></ROW><ROW><id>2349613</id><snippet>next_month_begin</snippet></ROW><ROW><id>2349613</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>2349613</id><snippet>datetime</snippet></ROW><ROW><id>2349613</id><snippet>timedelta()</snippet></ROW><ROW><id>2349845</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2349945</id><snippet>Recon</snippet></ROW><ROW><id>2349945</id><snippet>ReconFile</snippet></ROW><ROW><id>2349945</id><snippet>.put</snippet></ROW><ROW><id>2349945</id><snippet>.get</snippet></ROW><ROW><id>2349945</id><snippet>logging</snippet></ROW><ROW><id>2349945</id><snippet>logging.info</snippet></ROW><ROW><id>2349998</id><snippet>import file.py</snippet></ROW><ROW><id>2349998</id><snippet>import file</snippet></ROW><ROW><id>2349998</id><snippet>__init__.py</snippet></ROW><ROW><id>2349998</id><snippet>__init__.pyc</snippet></ROW><ROW><id>2349998</id><snippet>__import__()</snippet></ROW><ROW><id>2349998</id><snippet>pmName = input('Enter file name : folder/___.py ')
pm = __import__(pmName)
print(dir(pm)) # just for fun :)
</snippet></ROW><ROW><id>2349998</id><snippet>help(__import__())</snippet></ROW><ROW><id>2350051</id><snippet>(defun add-py-debug ()  
      "add debug code and move line down"  
    (interactive)  
    (move-beginning-of-line 1)  
    (insert "import pdb; pdb.set_trace();\n"))  

(local-set-key (kbd "&lt;f9&gt;") 'add-py-debug)
</snippet></ROW><ROW><id>2350051</id><snippet>(defun remove-py-debug ()  
  "remove py debug code, if found"  
  (interactive)  
  (let ((x (line-number-at-pos))  
    (cur (point)))  
    (search-forward-regexp "^[ ]*import pdb; pdb.set_trace();")  
    (if (= x (line-number-at-pos))  
    (let ()  
      (move-beginning-of-line 1)  
      (kill-line 1)  
      (move-beginning-of-line 1))  
      (goto-char cur))))  

(local-set-key (kbd "C c &lt;f9&gt;") 'remove-py-debug)
</snippet></ROW><ROW><id>2350051</id><snippet>(local-set-key (kbd "&lt;f3&gt;") '(lambda ()  
                                 (interactive)   
                                 (search-forward-regexp "^[ ]*import pdb; pdb.set_trace();")   
                                 (move-beginning-of-line 1)))
</snippet></ROW><ROW><id>2350057</id><snippet>dir(caribou)</snippet></ROW><ROW><id>2350057</id><snippet>['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__']
</snippet></ROW><ROW><id>2350057</id><snippet>caribou</snippet></ROW><ROW><id>2350057</id><snippet>__builtins__</snippet></ROW><ROW><id>2350057</id><snippet>Caribou instance</snippet></ROW><ROW><id>2350057</id><snippet>dir</snippet></ROW><ROW><id>2350057</id><snippet>caribou.on_key_up</snippet></ROW><ROW><id>2350057</id><snippet>caribou</snippet></ROW><ROW><id>2350057</id><snippet>caribou.py</snippet></ROW><ROW><id>2350057</id><snippet>caribou</snippet></ROW><ROW><id>2350057</id><snippet>caribou_instance = Caribou()
</snippet></ROW><ROW><id>2350057</id><snippet>caribou</snippet></ROW><ROW><id>2350057</id><snippet>caribou</snippet></ROW><ROW><id>2350057</id><snippet>caribou_instance</snippet></ROW><ROW><id>2350061</id><snippet>set</snippet></ROW><ROW><id>2350061</id><snippet>dict</snippet></ROW><ROW><id>2350061</id><snippet>myset = set(myset)</snippet></ROW><ROW><id>2350073</id><snippet>csvreader.fieldnames</snippet></ROW><ROW><id>2350073</id><snippet>reader.fieldnames</snippet></ROW><ROW><id>2350073</id><snippet>reader.next()</snippet></ROW><ROW><id>2350073</id><snippet>reader = csv.DictReader(open(PATH_FILE),skipinitialspace=True)
reader.next()
headers = reader.fieldnames
</snippet></ROW><ROW><id>2350206</id><snippet>import urllib2, BeautifulSoup

opener = urllib2.build_opener()
opener.addheaders[0] = ('User-agent', 'Mozilla/5.1')

response = opener.open('http://www.whitepages.com/carrier_lookup?carrier=other&amp;number_0=1112223333&amp;response=1').read()

bs = BeautifulSoup.BeautifulSoup(response)
print bs.findAll('div', attrs={'class': 'carrier_result'})[0].next.strip()
</snippet></ROW><ROW><id>2350274</id><snippet>Observer</snippet></ROW><ROW><id>2350274</id><snippet>observe</snippet></ROW><ROW><id>2350274</id><snippet>handler=self.log_join</snippet></ROW><ROW><id>2350274</id><snippet>bot</snippet></ROW><ROW><id>2350274</id><snippet>self</snippet></ROW><ROW><id>2350274</id><snippet>Callback</snippet></ROW><ROW><id>2350274</id><snippet>__call__</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350400</id><snippet>eval</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350400</id><snippet>global</snippet></ROW><ROW><id>2350400</id><snippet>eval</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350400</id><snippet>def</snippet></ROW><ROW><id>2350400</id><snippet>_exec</snippet></ROW><ROW><id>2350400</id><snippet>class</snippet></ROW><ROW><id>2350400</id><snippet>print 'one: %r' % _exec(None, '"foo"', 'range', 7)
print 'two: %r' % allowed_builtins['result']
</snippet></ROW><ROW><id>2350400</id><snippet>one: ''
two: [0, 1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>2350400</id><snippet>result</snippet></ROW><ROW><id>2350400</id><snippet>__dict__</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350400</id><snippet>allowed_builtins</snippet></ROW><ROW><id>2350400</id><snippet>global</snippet></ROW><ROW><id>2350400</id><snippet>exec</snippet></ROW><ROW><id>2350542</id><snippet>xml.dom</snippet></ROW><ROW><id>2350542</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>2350673</id><snippet>self.SetDoubleBuffered(True)</snippet></ROW><ROW><id>2350728</id><snippet>to_python</snippet></ROW><ROW><id>2350728</id><snippet>get_prep_value</snippet></ROW><ROW><id>2350728</id><snippet>to_python</snippet></ROW><ROW><id>2350728</id><snippet>CharField</snippet></ROW><ROW><id>2350728</id><snippet>def to_python(self, value):
    value = super(LowerCaseCharField, self).to_python(value)
    if isinstance(value, basestring):
        return value.lower()
    return value
</snippet></ROW><ROW><id>2350728</id><snippet>MyModel.objects.filter(lccf="MiXeD")
</snippet></ROW><ROW><id>2350728</id><snippet>__get__</snippet></ROW><ROW><id>2350728</id><snippet>__set__</snippet></ROW><ROW><id>2350728</id><snippet>contribute_to_class</snippet></ROW><ROW><id>2350728</id><snippet>class ModifyingFieldDescriptor(object):
    """ Modifies a field when set using the field's (overriden) .to_python() method. """
    def __init__(self, field):  
        self.field = field  
    def __get__(self, instance, owner=None):
        if instance is None:
            raise AttributeError('Can only be accessed via an instance.')  
        return instance.__dict__[self.field.name]
    def __set__(self, instance, value):
        instance.__dict__[self.field.name] = self.field.to_python(value)

class LowerCaseCharField(CharField):
    def to_python(self, value):
        value = super(LowerCaseCharField, self).to_python(value)
        if isinstance(value, basestring):
            return value.lower()
        return value
    def contribute_to_class(self, cls, name):
        super(LowerCaseCharField, self).contribute_to_class(cls, name)
        setattr(cls, self.name, ModifyingFieldDescriptor(self))
</snippet></ROW><ROW><id>2350809</id><snippet>DEBUG</snippet></ROW><ROW><id>2350809</id><snippet>False</snippet></ROW><ROW><id>2350809</id><snippet>mod_python</snippet></ROW><ROW><id>2350809</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2350809</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2350809</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2350827</id><snippet>class A(object): pass

a = A()
a.randomattr = 1
</snippet></ROW><ROW><id>2350904</id><snippet>def grouper( page_size, iterable ):
    page= []
    for item in iterable:
        page.append( item )
        if len(page) == page_size:
            yield page
            page= []
    yield page
</snippet></ROW><ROW><id>2350904</id><snippet>yield iter(page)</snippet></ROW><ROW><id>2350904</id><snippet>StopIteration</snippet></ROW><ROW><id>2350967</id><snippet>youtube-dl.py -b  -o %%(uploader)s-%%(title)s-%%(id)s.%%(ext)s
</snippet></ROW><ROW><id>2351868</id><snippet>import scipy
X = scipy.rand(3,3)
Y = scipy.rand(3,3)
print X+Y
print scipy.delete(X, 1, 0)
print scipy.delete(X, 1, 1)
X[1,:] = [1,2,3]
print X
</snippet></ROW><ROW><id>2351928</id><snippet>NameError</snippet></ROW><ROW><id>2351928</id><snippet>core</snippet></ROW><ROW><id>2351928</id><snippet>Core</snippet></ROW><ROW><id>2351928</id><snippet>texto()</snippet></ROW><ROW><id>2351928</id><snippet>@staticmethod</snippet></ROW><ROW><id>2351928</id><snippet>import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
import carrier

class Core:    
    def __init__(self, username, password):
        # code could be added here to auto load these from a file
        self.gmail_user = username
        self.gmail_pwd = password

# Send one text to one number
# TODO: send to multiple addresses

    def mail(self, to, text):
       msg = MIMEMultipart()
       msg['From'] = self.gmail_user
       msg['To'] = to
       msg.attach(MIMEText(text))

       mailServer = smtplib.SMTP("smtp.gmail.com", 587)
       mailServer.ehlo()
       mailServer.starttls()
       mailServer.ehlo()
       mailServer.login(self.gmail_user, self.gmail_pwd)
       mailServer.sendmail(self.gmail_user, to, msg.as_string())
       # Should be mailServer.quit(), but that crashes...
       mailServer.close()


def texto(sendtoaddress, messagetext):
    numbersendlist = []
    for number in sendtoaddress:
        numbersendlist.append(carrier.carriercheck(number))

    core = Core('username', 'password')
    for number in numbersendlist:
        core.mail(number, messagetext)

texto(['1112223333'], 'hi. this better work.')
</snippet></ROW><ROW><id>2352047</id><snippet>&gt;&gt;&gt; chr(10000)
'✐'
</snippet></ROW><ROW><id>2352180</id><snippet>localrepo.status()</snippet></ROW><ROW><id>2352180</id><snippet>node1</snippet></ROW><ROW><id>2352180</id><snippet>node2</snippet></ROW><ROW><id>2352195</id><snippet>__getattr__</snippet></ROW><ROW><id>2352195</id><snippet>__setattr__</snippet></ROW><ROW><id>2352229</id><snippet>sys._current_frames()</snippet></ROW><ROW><id>2352316</id><snippet>class Bunch(dict):
    def __init__(self, d):
        dict.__init__(self, d)
        self.__dict__.update(d)

def to_bunch(d):
    r = {}
    for k, v in d.items():
        if isinstance(v, dict):
            v = to_bunch(v)
        r[k] = v
    return Bunch(r)
</snippet></ROW><ROW><id>2352316</id><snippet>to_bunch</snippet></ROW><ROW><id>2352479</id><snippet>error</snippet></ROW><ROW><id>2352479</id><snippet>warning</snippet></ROW><ROW><id>2352479</id><snippet>class User(object):
    def __init__(self):
        self.messages = {}

    def add(self):
        error = False
        warning = False

        #Check that name has a space
        try:
            if (self.name.find(' ') == -1):
                warning = True
                self.messages['email'] = {'type': 'warning',
                                          'msg': 'Your name has no space.'}
        except NameError:
            error = True
            self.messages['email'] = {'type': 'error',
                                      'msg': 'You have no name.'}

        #Check that e-mail has been completed
        try:
            #Validate e-mail address
            if (isAddressValid(self.email)):
                error = True
                self.messages['email'] = {'type': 'error',
                                          'msg': 'Invalid e-mail address'}
        except NameError:
            error = True
            self.messages['email'] = {'type': 'error',
                                      'msg': 'No e-mail address specified'}

        return error, warning
</snippet></ROW><ROW><id>2352526</id><snippet>numpy.poly1d</snippet></ROW><ROW><id>2352526</id><snippet>integ</snippet></ROW><ROW><id>2352526</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; p = numpy.poly1d([2, 4, 6])
&gt;&gt;&gt; print p
   2
2 x + 4 x + 6
&gt;&gt;&gt; i = p.integ()
&gt;&gt;&gt; i
poly1d([ 0.66666667,  2.        ,  6.        ,  0.        ])
&gt;&gt;&gt; integrand = i(1) - i(0) # Use call notation to evaluate a poly1d
&gt;&gt;&gt; integrand
8.6666666666666661
</snippet></ROW><ROW><id>2352526</id><snippet>scipy.integrate</snippet></ROW><ROW><id>2352526</id><snippet>sympy</snippet></ROW><ROW><id>2352575</id><snippet>unittest</snippet></ROW><ROW><id>2352742</id><snippet>&gt;&gt;&gt; for i in range(0x3040, 0x30a0): print(chr(i), end='')

぀ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ゗゘゙゚゛゜ゝゞゟ
&gt;&gt;&gt; for i in range(0x30a0, 0x3100): print(chr(i), end='')

゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ
&gt;&gt;&gt; for i in range(0x4e00, 0x4f00): print(chr(i), end='')

一丁丂七丄丅丆万丈三上下丌不与丏丐丑丒专且丕世丗丘丙业丛东丝丞丟丠両丢丣两严並丧丨丩个丫丬中丮丯丰丱串丳临丵丶丷丸丹为主丼丽举丿乀乁乂乃乄久乆乇么义乊之乌乍乎乏乐乑乒乓乔乕乖乗乘乙乚乛乜九乞也习乡乢乣乤乥书乧乨乩乪乫乬乭乮乯买乱乲乳乴乵乶乷乸乹乺乻乼乽乾乿亀亁亂亃亄亅了亇予争亊事二亍于亏亐云互亓五井亖亗亘亙亚些亜亝亞亟亠亡亢亣交亥亦产亨亩亪享京亭亮亯亰亱亲亳亴亵亶亷亸亹人亻亼亽亾亿什仁仂仃仄仅仆仇仈仉今介仌仍从仏仐仑仒仓仔仕他仗付仙仚仛仜仝仞仟仠仡仢代令以仦仧仨仩仪仫们仭仮仯仰仱仲仳仴仵件价仸仹仺任仼份仾仿
</snippet></ROW><ROW><id>2352768</id><snippet>__getattr__</snippet></ROW><ROW><id>2352768</id><snippet>__getattr__</snippet></ROW><ROW><id>2352768</id><snippet>class C(object):
    def __init__(self):
        self.foo = "hi"
        self.bar = "mom"

    def __getattr__(self, attr):
        return "hello world"

c = C()
print c.foo # hi
print c.bar # mom 
print c.baz # hello world
print c.qux # hello world
</snippet></ROW><ROW><id>2352846</id><snippet>kerneldt = np.dtype([('myintname', np.int32), ('myfloats', np.float64, 9)])
arr = np.empty(dims, dtype=kerneldt)
</snippet></ROW><ROW><id>2352859</id><snippet>class whatever:
    animals = AnimalObject()
    fruits = FruitObject()

class AnimalObject:
    animals = ['cows','moose']
    properties = [9,26]

class FruitObject:
    land = ['strawberries', 'other berries']
    space = ['apples', 'cherries']
</snippet></ROW><ROW><id>2353067</id><snippet>from subprocess import Popen, PIPE
proc = Popen('ls', shell=True, stdout=PIPE)
proc.wait()
proc.communicate()
</snippet></ROW><ROW><id>2353165</id><snippet>class Foo:
   def __init__(self, foo, bar):
       self.foo, self.bar = foo, bar
</snippet></ROW><ROW><id>2353165</id><snippet>class Thing:
   def __init__(self, **kwargs):
       self.something = kwargs['something']
       #..
</snippet></ROW><ROW><id>2353165</id><snippet>t = Thing(something=1)
</snippet></ROW><ROW><id>2353165</id><snippet>class Thing:
   def __init__(self, **kwargs):
       self.__dict__.update(kwargs)
</snippet></ROW><ROW><id>2353165</id><snippet>t = Thing(a=1, b=2, c=3)
print t.a, t.b, t.c # prints 1, 2, 3
</snippet></ROW><ROW><id>2353165</id><snippet>class Thing:
    keywords = 'foo', 'bar', 'snafu', 'fnord'
    def __init__(self, **kwargs):
        for kw in self.keywords:
            setattr(self, kw, kwargs[kw])
</snippet></ROW><ROW><id>2353183</id><snippet>    elif form.is_valid():
      name = form.cleaned_data['name']
      sender = form.cleaned_data['sender']
      subject = form.cleaned_data['subject']
      message = form.cleaned_data['message']
</snippet></ROW><ROW><id>2353214</id><snippet>from django.db.models import Count
Tag.objects.annotate(img_count=Count('image')).order_by('img_count')
</snippet></ROW><ROW><id>2353232</id><snippet>int</snippet></ROW><ROW><id>2353232</id><snippet>int</snippet></ROW><ROW><id>2353251</id><snippet>appengine_config.py</snippet></ROW><ROW><id>2353251</id><snippet>google.appengine.ext.appstats.recording.AppStatsDjangoMiddleware
</snippet></ROW><ROW><id>2353251</id><snippet>settings.py</snippet></ROW><ROW><id>2353251</id><snippet>appengine_config.py</snippet></ROW><ROW><id>2353251</id><snippet>def webapp_add_wsgi_middleware(app):
  from google.appengine.ext.appstats import recording
  app = recording.appstats_wsgi_middleware(app)
  return app
</snippet></ROW><ROW><id>2353251</id><snippet>def webapp_add_wsgi_middleware(app):
  # from google.appengine.ext.appstats import recording
  # app = recording.appstats_wsgi_middleware(app)
  return app
</snippet></ROW><ROW><id>2353251</id><snippet>from</snippet></ROW><ROW><id>2353256</id><snippet>import virtkey

v = virtkey.virtkey()
v.press_keycode(66)
v.release_keycode(66)  # first release doesn't release it
v.release_keycode(66)
</snippet></ROW><ROW><id>2353256</id><snippet>v.press_keycode(66)    # turns capslock on
v.release_keycode(66)
v.press_keycode(66)    # turns capslock off
v.release_keycode(66)
</snippet></ROW><ROW><id>2353256</id><snippet>v.release_keycode(66)  # toggles capslock
v.release_keycode(66)  # toggles back again capslock
</snippet></ROW><ROW><id>2353738</id><snippet>lstrip()</snippet></ROW><ROW><id>2353738</id><snippet>exec</snippet></ROW><ROW><id>2353783</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G=nx.empty_graph()
&gt;&gt;&gt; G.add_edge(1,2)
&gt;&gt;&gt; G.add_edge(2,3)
&gt;&gt;&gt; G.add_edge(4,5)
&gt;&gt;&gt; nx.path.bidirectional_dijkstra(G,1,2)
(1, [1, 2])
&gt;&gt;&gt; nx.path.bidirectional_dijkstra(G,1,3)
(2, [1, 2, 3])
&gt;&gt;&gt; nx.path.bidirectional_dijkstra(G,1,4)
False
&gt;&gt;&gt; nx.path.bidirectional_dijkstra(G,1,5)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2353783</id><snippet>&gt;&gt;&gt; if nx.path.bidirectional_dijkstra(G,1,2): print "path exists"
... 
path exists
&gt;&gt;&gt; if nx.path.bidirectional_dijkstra(G,1,4): print "path exists"
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2353855</id><snippet>winreg</snippet></ROW><ROW><id>2353855</id><snippet>_</snippet></ROW><ROW><id>2353855</id><snippet>_winreg.HKEY</snippet></ROW><ROW><id>2353855</id><snippet> &gt;&gt;&gt; import _winreg
 &gt;&gt;&gt; [k for k in dir(_winreg) if k.startswith('HKEY')]
</snippet></ROW><ROW><id>2353855</id><snippet>try</snippet></ROW><ROW><id>2353855</id><snippet>except</snippet></ROW><ROW><id>2353855</id><snippet>WindowsError</snippet></ROW><ROW><id>2353867</id><snippet>from django.conf.urls.defaults import *

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    (r'^polls/', include('mysite.polls.urls')),
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>2353867</id><snippet>from django.conf.urls.defaults import *

urlpatterns = patterns('mysite.polls.views',
    (r'^$', 'index'),
    (r'^(?P&lt;poll_id&gt;\d+)/$', 'detail'),
    (r'^(?P&lt;poll_id&gt;\d+)/results/$', 'results'),
    (r'^(?P&lt;poll_id&gt;\d+)/vote/$', 'vote'),
)
</snippet></ROW><ROW><id>2353944</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>2353944</id><snippet>os.unlink</snippet></ROW><ROW><id>2354273</id><snippet>__init__.py</snippet></ROW><ROW><id>2354273</id><snippet>subdir</snippet></ROW><ROW><id>2354273</id><snippet>import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
</snippet></ROW><ROW><id>2354273</id><snippet>fix_path.py</snippet></ROW><ROW><id>2354273</id><snippet>main.py</snippet></ROW><ROW><id>2354273</id><snippet>import fix_path</snippet></ROW><ROW><id>2354273</id><snippet>__init__.py</snippet></ROW><ROW><id>2354273</id><snippet>__init__.py</snippet></ROW><ROW><id>2354273</id><snippet>__init__.py</snippet></ROW><ROW><id>2354273</id><snippet>__all__</snippet></ROW><ROW><id>2354316</id><snippet>import main_code

class COMInterface:
    _public_methods_ = [ 'method1' ]
    _reg_progid_ = "My.Test"
    _reg_clsid_ = "{D6AA2A12-A5CE-4B6C-8603-7952B711728B}"

    def methods(self, input1,input2,input3):
        # force python to reload the code that does the actual work 
        reload(main_code)
        return main_code.Runner().go(input1,input2,input3)
</snippet></ROW><ROW><id>2354586</id><snippet>pip install -e .</snippet></ROW><ROW><id>2354652</id><snippet>&lt;blah&gt;</snippet></ROW><ROW><id>2354652</id><snippet>__str__</snippet></ROW><ROW><id>2354652</id><snippet>__repr__</snippet></ROW><ROW><id>2354652</id><snippet>http://docs.python.org/reference/datamodel.html#object.__repr__</snippet></ROW><ROW><id>2354763</id><snippet>PRAGMA table_info('table_name');
</snippet></ROW><ROW><id>2355202</id><snippet>sys.stdin</snippet></ROW><ROW><id>2355202</id><snippet>sys.stdin</snippet></ROW><ROW><id>2355202</id><snippet>sys.stdin</snippet></ROW><ROW><id>2355202</id><snippet>file1 = sys.argv[1].open().read() + sys.stdin.read()</snippet></ROW><ROW><id>2355228</id><snippet>follow_redirects=False</snippet></ROW><ROW><id>2355228</id><snippet>response = urlfetch.fetch(your_url, follow_redirects=False)
location = response.headers['Location']
</snippet></ROW><ROW><id>2355248</id><snippet>import urllib2
url="http://www.test.com/page.html"
page=urllib2.urlopen(url)
data=page.read()
for item in data.split("&lt;/h3&gt;"):
    if "&lt;h3&gt;" in item:
         print item.split("&lt;h3&gt;")[1]
</snippet></ROW><ROW><id>2355324</id><snippet>sys.modules[module_name]</snippet></ROW><ROW><id>2355324</id><snippet>import</snippet></ROW><ROW><id>2355324</id><snippet>os.path.xxx</snippet></ROW><ROW><id>2355580</id><snippet>for src in universe:
   for dst in universe:
      if src == dst:
         continue
      ...
</snippet></ROW><ROW><id>2355687</id><snippet>&gt;&gt;&gt; s = "123456789"
&gt;&gt;&gt; for group in (s[:3], s[3:6], s[6:]): print group
...
123
456
789
</snippet></ROW><ROW><id>2355781</id><snippet>FTP constructor</snippet></ROW><ROW><id>2355781</id><snippet>timeout</snippet></ROW><ROW><id>2355781</id><snippet>class ftplib.FTP([host[, user[, passwd[, acct[, timeout]]]]])</snippet></ROW><ROW><id>2355781</id><snippet>socket.setdefaulttimeout(timeout)</snippet></ROW><ROW><id>2355967</id><snippet>lib/site-packages/</snippet></ROW><ROW><id>2356374</id><snippet> ((move src tmp dst (- num 1))
  (move src dst tmp 1)
  (move tmp dst src (- num 1)))
</snippet></ROW><ROW><id>2356374</id><snippet>((λ ()
  (move src tmp dst (- num 1))
  (move src dst tmp 1)
  (move tmp dst src (- num 1))))
</snippet></ROW><ROW><id>2356374</id><snippet>(begin
   (move ...)
   (move ...)
   (move ...)
   ...)
</snippet></ROW><ROW><id>2356374</id><snippet>((move ...) (move ...) (move ...))
</snippet></ROW><ROW><id>2356374</id><snippet>(op param1 param2)</snippet></ROW><ROW><id>2356374</id><snippet>#&lt;void&gt;; arguments were: #&lt;void&gt; #&lt;void&gt;</snippet></ROW><ROW><id>2356420</id><snippet>__main__.__file__</snippet></ROW><ROW><id>2356420</id><snippet>import __main__ as main
print hasattr(main, '__file__')
</snippet></ROW><ROW><id>2356420</id><snippet>python -c</snippet></ROW><ROW><id>2356420</id><snippet>python -m</snippet></ROW><ROW><id>2356510</id><snippet>ceil</snippet></ROW><ROW><id>2356510</id><snippet>import math
print math.ceil(4.2)
</snippet></ROW><ROW><id>2356572</id><snippet>Post.objects.filter(author=user)
</snippet></ROW><ROW><id>2356572</id><snippet>user</snippet></ROW><ROW><id>2356572</id><snippet>Post.objects.filter(author__in=users)
</snippet></ROW><ROW><id>2356609</id><snippet>return</snippet></ROW><ROW><id>2356609</id><snippet>return</snippet></ROW><ROW><id>2356609</id><snippet>None</snippet></ROW><ROW><id>2356609</id><snippet>def add(self):

    #1 -- VALIDATE EMAIL ADDRESS
    #Check that e-mail has been completed
    try:
        #Validate if e-mail address is in correct format
        if (isAddressValid(self.email) == 0):
            self.errors['email'] = 'You have entered an invalid e-mail address';
            return False

    except NameError:
        self.errors['email'] = 'Please enter your e-mail'
        return False

    return True
</snippet></ROW><ROW><id>2356675</id><snippet>import zipfile
from lxml import etree

z = zipfile.ZipFile('mydocument.ods')

data = z.read('content.xml')
data = etree.XML(data)

etree.dump(data)
</snippet></ROW><ROW><id>2356930</id><snippet>from matplotlib import mlab
psdResults = mlab.psd(inputData, NFFT=512, Fs=sampleRate, window=blackman)
</snippet></ROW><ROW><id>2357034</id><snippet>isFloat</snippet></ROW><ROW><id>2357251</id><snippet>help(add)</snippet></ROW><ROW><id>2357251</id><snippet>def add(self):
"""Create a new user.
Line 2 of comment...
And so on... """
</snippet></ROW><ROW><id>2357782</id><snippet>position: absolute</snippet></ROW><ROW><id>2357782</id><snippet>position: relative</snippet></ROW><ROW><id>2357785</id><snippet>import scipy
X = scipy.rand(9,4,1)
Y = X.repeat(4096,2)
</snippet></ROW><ROW><id>2357785</id><snippet>X</snippet></ROW><ROW><id>2357785</id><snippet>import scipy
X = scipy.rand(9,4)
Y = X.reshape(9,4,1).repeat(4096,2)
</snippet></ROW><ROW><id>2358484</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2358879</id><snippet>true</snippet></ROW><ROW><id>2358879</id><snippet>false</snippet></ROW><ROW><id>2358879</id><snippet>setDTR()</snippet></ROW><ROW><id>2358879</id><snippet>DTR</snippet></ROW><ROW><id>2358879</id><snippet>true</snippet></ROW><ROW><id>2358879</id><snippet>import serial
from time import sleep

conn = serial.Serial('/dev/ttyS0',
                     baudrate=9600,
                     bytesize=serial.EIGHTBITS,
                     parity=serial.PARITY_NONE,
                     stopbits=serial.STOPBITS_ONE,
                     timeout=1,
                     xonxoff=0,
                     rtscts=0
                     )
# Wake Modem
conn.setDTR(True)
sleep(3)
conn.setDTR(False)

sleep(5)

# Start talking
conn.setDTR(True)
try:
    while True:
        conn.write('AT'+chr(13));
        print conn.readline() # readlines() will probably never return.
finally:
    conn.close()
</snippet></ROW><ROW><id>2358879</id><snippet>socket</snippet></ROW><ROW><id>2359165</id><snippet>raw_input()</snippet></ROW><ROW><id>2359165</id><snippet>input()</snippet></ROW><ROW><id>2359165</id><snippet>logging</snippet></ROW><ROW><id>2359165</id><snippet>sys.stdout</snippet></ROW><ROW><id>2359165</id><snippet>sys.stderr</snippet></ROW><ROW><id>2359165</id><snippet>logging</snippet></ROW><ROW><id>2359165</id><snippet>traceback</snippet></ROW><ROW><id>2359165</id><snippet>import logging, traceback
logging.basicConfig(filename=r'C:\Temp\log.txt', level=logging.DEBUG)

try:
    #do some stuff
    logging.debug('I did some stuff!')
except SomeException:
    logging.error(traceback.format_exc())
</snippet></ROW><ROW><id>2359165</id><snippet>stdout</snippet></ROW><ROW><id>2359165</id><snippet>stderr</snippet></ROW><ROW><id>2359165</id><snippet>if __name__ == '__main__':
    save_out = sys.stdout  # save the original stdout so you can put it back later
    out_file = open(r'C:\Temp\out.txt', 'w')
    sys.stdout = out_file

    save_err = sys.stderr
    err_file = open(r'C:\Temp\err.txt', 'w')
    sys.stderr = err_file

    main()  #call your main function

    sys.stdout = save_out  # set stdout back to it's original object
    sys.stderr = save_err

    out_file.close()
    err_file.close()
</snippet></ROW><ROW><id>2359255</id><snippet>/Library/Frameworks/Python.frameworks</snippet></ROW><ROW><id>2359255</id><snippet>+universal</snippet></ROW><ROW><id>2359255</id><snippet>/opt/local/etc/macports/variants.conf</snippet></ROW><ROW><id>2359255</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin</snippet></ROW><ROW><id>2359255</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>2359255</id><snippet>sudo port selfupdate  # ensure you have the latest ports file information
sudo port install py26-libxml2 py26-twisted py26-openssl py26-simplejson py26-setuptools python_select
sudo python_select python26  # optionally make /opt/local/bin/python -&gt; python2.6
sudo /opt/local/bin/easy_install-2.6 scrapy
# or install manually
cd /path/to/scrapy
sudo /opt/local/bin/python2.6 setup.py install
</snippet></ROW><ROW><id>2359255</id><snippet>/opt/local/etc/macports/variants.conf</snippet></ROW><ROW><id>2359255</id><snippet>+bash_completion +quartz +ssl +no_x11 +no_neon +no_tkinter +universal +libyaml -scientific
</snippet></ROW><ROW><id>2359255</id><snippet>$ ls -l /opt/local/bin/python2.6
lrwxr-xr-x  1 root  wheel  73 Oct 28 20:25 /opt/local/bin/python2.6@ -&gt; /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
$ file /opt/local/bin/python2.6
/opt/local/bin/python2.6: Mach-O universal binary with 2 architectures
/opt/local/bin/python2.6 (for architecture x86_64): Mach-O 64-bit executable x86_64
/opt/local/bin/python2.6 (for architecture i386):   Mach-O executable i386
</snippet></ROW><ROW><id>2359255</id><snippet>+universal</snippet></ROW><ROW><id>2359255</id><snippet>$ echo $PATH
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin ...
</snippet></ROW><ROW><id>2359255</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>2359255</id><snippet>python</snippet></ROW><ROW><id>2359255</id><snippet>python_select</snippet></ROW><ROW><id>2359255</id><snippet>$ sudo rm -r /opt/local
</snippet></ROW><ROW><id>2359267</id><snippet>stderr</snippet></ROW><ROW><id>2359267</id><snippet>ffmpeg.stderr.read()</snippet></ROW><ROW><id>2359267</id><snippet>.communicate</snippet></ROW><ROW><id>2359267</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>2359267</id><snippet>&gt;/dev/null</snippet></ROW><ROW><id>2359267</id><snippet>nulfp = open(os.devnull, "w")
…
… = subprocess.Popen(…, stderr=nulfp.fileno())
</snippet></ROW><ROW><id>2359267</id><snippet>nulfp</snippet></ROW><ROW><id>2359267</id><snippet>stderr</snippet></ROW><ROW><id>2359299</id><snippet>django-openid-auth</snippet></ROW><ROW><id>2359619</id><snippet>import re

token_pattern = r"""
(?P&lt;identifier&gt;[a-zA-Z_][a-zA-Z0-9_]*)
|(?P&lt;integer&gt;[0-9]+)
|(?P&lt;dot&gt;\.)
|(?P&lt;open_variable&gt;[$][{])
|(?P&lt;open_curly&gt;[{])
|(?P&lt;close_curly&gt;[}])
|(?P&lt;newline&gt;\n)
|(?P&lt;whitespace&gt;\s+)
|(?P&lt;equals&gt;[=])
|(?P&lt;slash&gt;[/])
"""

token_re = re.compile(token_pattern, re.VERBOSE)

class TokenizerException(Exception): pass

def tokenize(text):
    pos = 0
    while True:
        m = token_re.match(text, pos)
        if not m: break
        pos = m.end()
        tokname = m.lastgroup
        tokvalue = m.group(tokname)
        yield tokname, tokvalue
    if pos != len(text):
        raise TokenizerException('tokenizer stopped at pos %r of %r' % (
            pos, len(text)))
</snippet></ROW><ROW><id>2359619</id><snippet>stuff = r'property.${general.name}.ip = ${general.ip}'
stuff2 = r'''
general {
  name = myname
  ip = 127.0.0.1
}
'''

print ' stuff '.center(60, '=')
for tok in tokenize(stuff):
    print tok

print ' stuff2 '.center(60, '=')
for tok in tokenize(stuff2):
    print tok
</snippet></ROW><ROW><id>2359619</id><snippet>========================== stuff ===========================
('identifier', 'property')
('dot', '.')
('open_variable', '${')
('identifier', 'general')
('dot', '.')
('identifier', 'name')
('close_curly', '}')
('dot', '.')
('identifier', 'ip')
('whitespace', ' ')
('equals', '=')
('whitespace', ' ')
('open_variable', '${')
('identifier', 'general')
('dot', '.')
('identifier', 'ip')
('close_curly', '}')
========================== stuff2 ==========================
('newline', '\n')
('identifier', 'general')
('whitespace', ' ')
('open_curly', '{')
('newline', '\n')
('whitespace', '  ')
('identifier', 'name')
('whitespace', ' ')
('equals', '=')
('whitespace', ' ')
('identifier', 'myname')
('newline', '\n')
('whitespace', '  ')
('identifier', 'ip')
('whitespace', ' ')
('equals', '=')
('whitespace', ' ')
('integer', '127')
('dot', '.')
('integer', '0')
('dot', '.')
('integer', '0')
('dot', '.')
('integer', '1')
('newline', '\n')
('close_curly', '}')
('newline', '\n')
</snippet></ROW><ROW><id>2359690</id><snippet>from scipy.io import wavfile
fs, data = wavfile.read(filename)
</snippet></ROW><ROW><id>2359690</id><snippet>data</snippet></ROW><ROW><id>2359690</id><snippet>int</snippet></ROW><ROW><id>2359690</id><snippet>data</snippet></ROW><ROW><id>2359690</id><snippet>int16</snippet></ROW><ROW><id>2359690</id><snippet>data</snippet></ROW><ROW><id>2359690</id><snippet>2**15</snippet></ROW><ROW><id>2359771</id><snippet>class</snippet></ROW><ROW><id>2359771</id><snippet>def</snippet></ROW><ROW><id>2359880</id><snippet>from lxml import etree
data = """
 &lt;svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://web.resource.org/cc/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
    xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
    width="50"
    height="25"
    id="svg2"
    sodipodi:version="0.32"
    inkscape:version="0.45.1"
    version="1.0"
    sodipodi:docbase="/home/tcooksey/Projects/qt-4.4/demos/embedded/embeddedsvgviewer/files"
    sodipodi:docname="v-slider-handle.svg"
    inkscape:output_extension="org.inkscape.output.svg.inkscape"&gt;
    &lt;text
       xml:space="preserve"
       style="font-size:14.19380379px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans Mono;-inkscape-font-specification:DejaVu Sans Mono"
       x="109.38555"
       y="407.02847"
       id="libcode-00"
       sodipodi:linespacing="125%"
       inkscape:label="#text4638"&gt;&lt;tspan
         sodipodi:role="line"
         id="tspan4640"
         x="109.38555"
         y="407.02847"&gt;12345678&lt;/tspan&gt;&lt;/text&gt;
    &lt;/svg&gt;
"""

nsmap = {
    'sodipodi': 'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd',
    'cc': 'http://web.resource.org/cc/',
    'svg': 'http://www.w3.org/2000/svg',
    'dc': 'http://purl.org/dc/elements/1.1/',
    'xlink': 'http://www.w3.org/1999/xlink',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'inkscape': 'http://www.inkscape.org/namespaces/inkscape'
    }


data = etree.XML(data)

# All svg text elements
&gt;&gt;&gt; data.xpath('//svg:text',namespaces=nsmap)
[&lt;Element {http://www.w3.org/2000/svg}text at b7cfc9dc&gt;]
# All svg text elements with id="libcode-00"
&gt;&gt;&gt; data.xpath('//svg:text[@id="libcode-00"]',namespaces=nsmap)
[&lt;Element {http://www.w3.org/2000/svg}text at b7cfc9dc&gt;]
# TSPAN child elements of text elements with id="libcode-00"
&gt;&gt;&gt; data.xpath('//svg:text[@id="libcode-00"]/svg:tspan',namespaces=nsmap)
[&lt;Element {http://www.w3.org/2000/svg}tspan at b7cfc964&gt;]
# All text elements with id starting with "libcode"
&gt;&gt;&gt; data.xpath('//svg:text[fn:startswith(@id,"libcode")]',namespaces=nsmap)
[&lt;Element {http://www.w3.org/2000/svg}text at b7cfcc34&gt;]
# Iterate text elements, access tspan child
&gt;&gt;&gt; for elem in data.xpath('//svg:text[fn:startswith(@id,"libcode")]',namespaces=nsmap):
...     tp = elem.xpath('./svg:tspan',namespaces=nsmap)[0]
...     tp.text = "new text"

open("newfile.svg","w").write(etree.tostring(data))
</snippet></ROW><ROW><id>2359930</id><snippet>c=1
while [[ -s file.txt ]] ; # Stop when file.txt has no more lines
do
    echo "Python script called $c times"
    python script.py # Uses file.txt and removes lines from it
    c=$(($c + 1))
done
</snippet></ROW><ROW><id>2360047</id><snippet>import codecs

with codecs.open(file, "r", "utf-8-sig") as f:
    a, b, c= map(int, f.readline().split(","))
</snippet></ROW><ROW><id>2360047</id><snippet>codecs.open</snippet></ROW><ROW><id>2360284</id><snippet>smartindent</snippet></ROW><ROW><id>2360284</id><snippet>nosmartindent</snippet></ROW><ROW><id>2360284</id><snippet>smartindent</snippet></ROW><ROW><id>2360284</id><snippet>nosmartindent</snippet></ROW><ROW><id>2360284</id><snippet>:set</snippet></ROW><ROW><id>2360639</id><snippet>html.parser.HTMLParser.unescape</snippet></ROW><ROW><id>2360639</id><snippet>import html.parser    
html.parser.HTMLParser().unescape('Suzy &amp; John')
# 'Suzy &amp; John'

html.parser.HTMLParser().unescape('"')
# '"'
</snippet></ROW><ROW><id>2360639</id><snippet>import HTMLParser
HTMLParser.HTMLParser().unescape('Suzy &amp; John')
</snippet></ROW><ROW><id>2360718</id><snippet>/detail/(\d)</snippet></ROW><ROW><id>2360718</id><snippet>class DetailHandler(webapp.RequestHandler):
    def get(self, detail_id):
      # put your code here, detail_id contains the passed variable

def main():
  # Note the wildcard placeholder in the url matcher
  application = webapp.WSGIApplication([('/details/(.*)', DetailHandler)]
  wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>2360718</id><snippet>Index.py</snippet></ROW><ROW><id>2360718</id><snippet>class IndexHandler(webapp.RequestHandler):
    def get(self):
      # put your handler code here

def main():
  # Note the wildcard without parens
  application = webapp.WSGIApplication([('/.*', IndexHandler)]
  wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>2360808</id><snippet>from xyz import *</snippet></ROW><ROW><id>2360808</id><snippet>&gt;&gt;&gt; from math import *
&gt;&gt;&gt;pi
3.141592653589793
&gt;&gt;&gt;sin(pi/2)
&gt;&gt;&gt;1.0
</snippet></ROW><ROW><id>2360808</id><snippet>&gt;&gt;&gt;from math import pi
&gt;&gt;&gt;pi
&gt;&gt;&gt;3.141592653589793
&gt;&gt;&gt; sin(pi/2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'sin' is not defined
</snippet></ROW><ROW><id>2360808</id><snippet>  &gt;&gt;&gt;import math
  &gt;&gt;&gt;math.pi
  &gt;&gt;&gt;3.141592653589793
  etc..


  &gt;&gt;&gt;import math as m  #bad example math being so short and standard...
  &gt;&gt;&gt;m.pi
  &gt;&gt;&gt;3.141592653589793
  etc..
</snippet></ROW><ROW><id>2360808</id><snippet>from xyz import *</snippet></ROW><ROW><id>2360808</id><snippet>__all__</snippet></ROW><ROW><id>2360858</id><snippet>        try:
            project.model.connectCentral()
</snippet></ROW><ROW><id>2361204</id><snippet>scipy.linalg.solve</snippet></ROW><ROW><id>2361252</id><snippet>pickle</snippet></ROW><ROW><id>2361278</id><snippet>__init__.py</snippet></ROW><ROW><id>2361278</id><snippet>__init__.py</snippet></ROW><ROW><id>2361278</id><snippet>__init__.py</snippet></ROW><ROW><id>2361373</id><snippet>Customer.objects.get(name = request.POST['name']).delete()
</snippet></ROW><ROW><id>2361373</id><snippet>action</snippet></ROW><ROW><id>2361373</id><snippet>'delete'</snippet></ROW><ROW><id>2361373</id><snippet>&lt;form method="POST" action="/customer/{{ action }}/"&gt;
</snippet></ROW><ROW><id>2361991</id><snippet>&gt;&gt;&gt; data = [ 1, 4,5,6, 10, 15,16,17,18, 22, 25,26,27,28]
&gt;&gt;&gt; for k, g in groupby(enumerate(data), lambda (i,x):i-x):
...     print map(itemgetter(1), g)
...
[1]
[4, 5, 6]
[10]
[15, 16, 17, 18]
[22]
[25, 26, 27, 28]
</snippet></ROW><ROW><id>2362056</id><snippet>.clear { clear: both; }</snippet></ROW><ROW><id>2362468</id><snippet>from sqlalchemy import func 
func.avg(...) 
func.sum(...) 
func.max(...) 
</snippet></ROW><ROW><id>2362468</id><snippet>session.query(func.max(Table.column)) 
</snippet></ROW><ROW><id>2362675</id><snippet>class SelectionWindow(QtGui.QMainWindow):
    ...
    def getSelection(self):
        result = self.exec_()
        if result:
            # User clicked Ok - read currentRow
            selectedRow = self.ui.myQtTreeViewWidget.currentIndex()
        else:
            # User clicked Cancel
            selectedRow = None
        return selectedRow
    ...
</snippet></ROW><ROW><id>2362682</id><snippet>import locale
setlocale(LC_ALL, 'de')
x = locale.format('%.2f', 123)
setlocale(LC_ALL, '')
</snippet></ROW><ROW><id>2362682</id><snippet>from babel.numbers import format_decimal
x = format_decimal(123, format='#0.00', locale='de')
</snippet></ROW><ROW><id>2362745</id><snippet>res</snippet></ROW><ROW><id>2362745</id><snippet>test</snippet></ROW><ROW><id>2363303</id><snippet>txt</snippet></ROW><ROW><id>2363303</id><snippet>read_node</snippet></ROW><ROW><id>2363303</id><snippet>+=</snippet></ROW><ROW><id>2363303</id><snippet>txt</snippet></ROW><ROW><id>2363303</id><snippet>read_node</snippet></ROW><ROW><id>2363303</id><snippet>&gt;&gt;&gt; def a():
...  x = ""
...  def b():
...   x += "X"
...  b()
...  print x
... 
&gt;&gt;&gt; a()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in a
  File "&lt;stdin&gt;", line 4, in b
UnboundLocalError: local variable 'x' referenced before assignment
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; def a():
...  x = []
...  def b():
...   x.append("X")
...  b()
...  print "".join(x)
... 
&gt;&gt;&gt; a()
X
</snippet></ROW><ROW><id>2363303</id><snippet>"".join(...)</snippet></ROW><ROW><id>2363303</id><snippet>str += ...</snippet></ROW><ROW><id>2363330</id><snippet>/(?:(?:@\S+\s+)+|^)@\S+/g
</snippet></ROW><ROW><id>2363330</id><snippet>@name</snippet></ROW><ROW><id>2363330</id><snippet>RT</snippet></ROW><ROW><id>2363330</id><snippet>http://twitter.com/name</snippet></ROW><ROW><id>2363559</id><snippet>&gt;&gt;&gt; mylist='d.complex.1\n24\n25\n67\n123\n764\nd.complex.200\n23\n54\n35\n64\nd.complex.302'.split("\n")
&gt;&gt;&gt; res=[]
&gt;&gt;&gt; for line in mylist:
...  if line.startswith("d.complex"):
...   res.append([])
...  res[-1].append(line)
... 
&gt;&gt;&gt; res
[['d.complex.1', '24', '25', '67', '123', '764'], ['d.complex.200', '23', '54', '35', '64'], ['d.complex.302']]
</snippet></ROW><ROW><id>2363643</id><snippet>def func(self, foo):
    return any(foo.boolfunc() for foo in self.list)
</snippet></ROW><ROW><id>2363867</id><snippet>img = Image.open(GIF_FILENAME)
rgbimg = img.convert('RGB')
for i in range(5):
    print rgbimg.getpixel((i, 0))
</snippet></ROW><ROW><id>2364138</id><snippet>def file_loader(f):
    file_dict = {}
    current_set = None
    for line in f:
        if line.startswith('d.complex'):
            file_dict[line] = current_set = {}
            continue

        if current_set is not None:
            current_set[line] = current_set.get(line, 0)

    return file_dict
</snippet></ROW><ROW><id>2364138</id><snippet>def count_number(file_dict, num):
    count = 0
    for set_name, number_set in file_dict.iteritems():
        count += number_set.get(num, 0)

    return count
</snippet></ROW><ROW><id>2364138</id><snippet>s = """d.complex.1
10
11
12
10
11
12"""

file_dict = file_loader(s.split("\n"))
print file_dict
print count_number(file_dict, '10')
</snippet></ROW><ROW><id>2364138</id><snippet>{'d.complex.1': {'11': 2, '10': 2, '12': 2}}
2
</snippet></ROW><ROW><id>2364277</id><snippet>next(x for x in the_iterable if x &gt; 3)</snippet></ROW><ROW><id>2364277</id><snippet>StopIteration</snippet></ROW><ROW><id>2364277</id><snippet>next( (x for x in the_iterable if x&gt;3), default_value)</snippet></ROW><ROW><id>2364277</id><snippet>default_value</snippet></ROW><ROW><id>2364277</id><snippet>None</snippet></ROW><ROW><id>2364277</id><snippet>next</snippet></ROW><ROW><id>2364277</id><snippet>next</snippet></ROW><ROW><id>2364277</id><snippet>.next()</snippet></ROW><ROW><id>2364277</id><snippet>StopIteration</snippet></ROW><ROW><id>2364277</id><snippet>.next()</snippet></ROW><ROW><id>2364277</id><snippet>next</snippet></ROW><ROW><id>2364277</id><snippet>itertools</snippet></ROW><ROW><id>2364277</id><snippet>for...: break</snippet></ROW><ROW><id>2364277</id><snippet>try/except StopIteration</snippet></ROW><ROW><id>2364411</id><snippet>list_2</snippet></ROW><ROW><id>2364411</id><snippet>list_1 = ['a', 'big', 'list']
list_2 = ['another', 'big', 'list']

target_set = set(list_2)

for a in list_1:
    if a in target_set:
         print a
</snippet></ROW><ROW><id>2364411</id><snippet>big
list
</snippet></ROW><ROW><id>2364411</id><snippet>list_2</snippet></ROW><ROW><id>2364633</id><snippet>def copypart(src,dest,start,length,bufsize=1024*1024):
    f1 = open(src,'rb')
    f1.seek(start)

    f2 = open(dest,'wb')

    while length:
        chunk = min(bufsize,length)
        data = f1.read(chunk)
        f2.write(data)
        length -= chunk

    f1.close()
    f2.close()

if __name__ == '__main__':
    GIG = 2**30
    copypart('test.bin','test2.bin',1*GIG,8*GIG)
</snippet></ROW><ROW><id>2364667</id><snippet>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# multiproc_sums.py
"""A program that reads integer values from a CSV file and writes out their
sums to another CSV file, using multiple processes if desired.
"""

import csv
import multiprocessing
import optparse
import sys

NUM_PROCS = multiprocessing.cpu_count()

def make_cli_parser():
    """Make the command line interface parser."""
    usage = "\n\n".join(["python %prog INPUT_CSV OUTPUT_CSV",
            __doc__,
            """
ARGUMENTS:
    INPUT_CSV: an input CSV file with rows of numbers
    OUTPUT_CSV: an output file that will contain the sums\
"""])
    cli_parser = optparse.OptionParser(usage)
    cli_parser.add_option('-n', '--numprocs', type='int',
            default=NUM_PROCS,
            help="Number of processes to launch [DEFAULT: %default]")
    return cli_parser

class CSVWorker(object):
    def __init__(self, numprocs, infile, outfile):
        self.numprocs = numprocs
        self.infile = open(infile)
        self.outfile = outfile
        self.in_csvfile = csv.reader(self.infile)
        self.inq = multiprocessing.Queue()
        self.outq = multiprocessing.Queue()

        self.pin = multiprocessing.Process(target=self.parse_input_csv, args=())
        self.pout = multiprocessing.Process(target=self.write_output_csv, args=())
        self.ps = [ multiprocessing.Process(target=self.sum_row, args=())
                        for i in range(self.numprocs)]

        self.pin.start()
        self.pout.start()
        for p in self.ps:
            p.start()

        self.pin.join()
        i = 0
        for p in self.ps:
            p.join()
            print "Done", i
            i += 1

        self.pout.join()
        self.infile.close()

    def parse_input_csv(self):
            """Parses the input CSV and yields tuples with the index of the row
            as the first element, and the integers of the row as the second
            element.

            The index is zero-index based.

            The data is then sent over inqueue for the workers to do their
            thing.  At the end the input thread sends a 'STOP' message for each
            worker.
            """
            for i, row in enumerate(self.in_csvfile):
                row = [ int(entry) for entry in row ]
                self.inq.put( (i, row) )

            for i in range(self.numprocs):
                self.inq.put("STOP")

    def sum_row(self):
        """
        Workers. Consume inq and produce answers on outq
        """
        tot = 0
        for i, row in iter(self.inq.get, "STOP"):
                self.outq.put( (i, sum(row)) )
        self.outq.put("STOP")

    def write_output_csv(self):
        """
        Open outgoing csv file then start reading outq for answers
        Since I chose to make sure output was synchronized to the input there
        is some extra goodies to do that.

        Obviously your input has the original row number so this is not
        required.
        """
        cur = 0
        stop = 0
        buffer = {}
        # For some reason csv.writer works badly across threads so open/close
        # and use it all in the same thread or else you'll have the last
        # several rows missing
        outfile = open(self.outfile, "w")
        self.out_csvfile = csv.writer(outfile)

        #Keep running until we see numprocs STOP messages
        for works in range(self.numprocs):
            for i, val in iter(self.outq.get, "STOP"):
                # verify rows are in order, if not save in buffer
                if i != cur:
                    buffer[i] = val
                else:
                    #if yes are write it out and make sure no waiting rows exist
                    self.out_csvfile.writerow( [i, val] )
                    cur += 1
                    while cur in buffer:
                        self.out_csvfile.writerow([ cur, buffer[cur] ])
                        del buffer[cur]
                        cur += 1

        outfile.close()

def main(argv):
    cli_parser = make_cli_parser()
    opts, args = cli_parser.parse_args(argv)
    if len(args) != 2:
        cli_parser.error("Please provide an input file and output file.")

    c = CSVWorker(opts.numprocs, args[0], args[1])

if __name__ == '__main__':
    main(sys.argv[1:])
</snippet></ROW><ROW><id>2364698</id><snippet>&gt;&gt;&gt; results = [] # an empty list
&gt;&gt;&gt; item = results[0] # Raises an IndexError, because there is nothing in the list
</snippet></ROW><ROW><id>2364698</id><snippet>item = db.GqlQuery("SELECT * FROM Item WHERE CSIN = :1", CSIN).get()
</snippet></ROW><ROW><id>2364698</id><snippet>item</snippet></ROW><ROW><id>2364698</id><snippet>None</snippet></ROW><ROW><id>2365771</id><snippet>__get__</snippet></ROW><ROW><id>2365771</id><snippet>def dec_check(f):
  def deco(self):
    print 'In deco'
    f(self)
  return deco

class bar(object):
  @dec_check
  def foo(self):
    print 'in bar.foo'

b = bar()
b.foo()
</snippet></ROW><ROW><id>2365771</id><snippet>In deco
in bar.foo
</snippet></ROW><ROW><id>2365782</id><snippet>from matplotlib import pyplot

while True:
  fig = pyplot.figure()
  ax = fig.add_subplot(111)
  ax.plot(x,y)
  ax.legend(legendStrings, loc = 'best')
  fig.savefig('himom.png')
  # etc....
</snippet></ROW><ROW><id>2365804</id><snippet>for i, grp in enumerate((s[:3],s[3:6],s[6:])):
    print "'%s'"%(grp)

    total = calc_total(grp)
    # more code that needs to happen every time

    if i == 0:
        # code that needs to happen only the first time
    elif i == 1:
        # code that needs to happen only the second time
</snippet></ROW><ROW><id>2365804</id><snippet>==</snippet></ROW><ROW><id>2365804</id><snippet>enumerate</snippet></ROW><ROW><id>2365837</id><snippet>ply</snippet></ROW><ROW><id>2365873</id><snippet>Either Int String</snippet></ROW><ROW><id>2365873</id><snippet>Left</snippet></ROW><ROW><id>2365873</id><snippet>Right</snippet></ROW><ROW><id>2365873</id><snippet>if someCondition then 1 else "this won't compile"</snippet></ROW><ROW><id>2365969</id><snippet>maketrans</snippet></ROW><ROW><id>2365969</id><snippet>import string
'(123) 456-7890'.translate(string.maketrans('', ''), '-(), ')
</snippet></ROW><ROW><id>2366078</id><snippet>with open(thefile, 'rb') as f: data = f.read()</snippet></ROW><ROW><id>2366078</id><snippet>struct.unpack</snippet></ROW><ROW><id>2366216</id><snippet>split</snippet></ROW><ROW><id>2366216</id><snippet>&gt;&gt;&gt; s = "First Middle Last"
&gt;&gt;&gt; s.split(" ")
['First', 'Middle', 'Last']
</snippet></ROW><ROW><id>2367102</id><snippet>from lxml import etree
root = etree.fromstring("...your xml...")

el, = root.xpath("//div[text() = 'the string']/preceding-sibling::*[9]")
</snippet></ROW><ROW><id>2367509</id><snippet>class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.panel = wx.Panel(self)
        self.panel.BackgroundColour = wx.RED
        self.panel.Bind(wx.EVT_LEFT_UP, self.onClick)

    def onClick(self, event):
        self.panel.BackgroundColour = wx.GREEN
</snippet></ROW><ROW><id>2367565</id><snippet>COPY FROM</snippet></ROW><ROW><id>2367565</id><snippet>COPY tablename ( column1, column2, ... ) FROM ...
</snippet></ROW><ROW><id>2367565</id><snippet>sed</snippet></ROW><ROW><id>2367565</id><snippet>echo '1,23,56,we,89,2009-12-06' | sed -e 's/,/,,/5;s/,/,,/4'
</snippet></ROW><ROW><id>2367565</id><snippet>1,23,56,we,,89,,2009-12-06
</snippet></ROW><ROW><id>2367565</id><snippet>perl</snippet></ROW><ROW><id>2367565</id><snippet>perl</snippet></ROW><ROW><id>2367565</id><snippet>echo '1,23,56,we,89,2009-12-06' |
  perl -F/,/ -nae 'print "$F[0],$F[1],$F[2],$F[3],,$F[4],,$F[5]"'
</snippet></ROW><ROW><id>2367565</id><snippet>1,23,56,we,,89,,2009-12-06
</snippet></ROW><ROW><id>2367565</id><snippet>awk</snippet></ROW><ROW><id>2367565</id><snippet>echo '1,23,56,we,89,2009-12-06' |
  awk -F, '{print $1","$2","$3","$4",,"$5",,"$6}'
</snippet></ROW><ROW><id>2367565</id><snippet>-a</snippet></ROW><ROW><id>2367565</id><snippet>-F</snippet></ROW><ROW><id>2367565</id><snippet>$F[5]</snippet></ROW><ROW><id>2367565</id><snippet>chomp</snippet></ROW><ROW><id>2367565</id><snippet>split</snippet></ROW><ROW><id>2367565</id><snippet>\n</snippet></ROW><ROW><id>2367565</id><snippet>awk</snippet></ROW><ROW><id>2367565</id><snippet>perl -ne 'chomp;@F=split/,/;print "$F[0],$F[1],$F[2],$F[3],,$F[4],,$F[5]\n"'
</snippet></ROW><ROW><id>2367565</id><snippet>COMMAS_TO_DOUBLE="1 4 5"
echo '1,23,56,we,89,2009-12-06' |
  sed -e `for f in $COMMAS_TO_DOUBLE ; do echo "s/,/,,/$f" ; done |
    sort -t/ -k4,4nr | paste -s -d ';'`

1,,23,56,we,,89,,2009-12-06
</snippet></ROW><ROW><id>2367605</id><snippet>def class_decorator(cls):
   for name, method in cls.__dict__.iteritems():
        if hasattr(method, "use_class"):
            # do something with the method and class
            print name, cls
   return cls

def method_decorator(view):
    # mark the method as something that requires view's class
    view.use_class = True
    return view

@class_decorator
class ModelA(object):
    @method_decorator
    def a_method(self):
        # do some stuff
        pass
</snippet></ROW><ROW><id>2367782</id><snippet>Programme</snippet></ROW><ROW><id>2367782</id><snippet>programme</snippet></ROW><ROW><id>2367793</id><snippet>class GpsPoint(object):
    """A class for representing gps coordinates"""
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    def __add__(self, other):
        try:
            return GpsPoint(self.x + other.x, self.y + other.y, self.z + other.z)
        except AttributeError:
            return GpsPoint(self.x + other, self.y + other, self.z + other)
    def __radd__(self, other):
        try:
            return GpsPoint(self.x + other.x, self.y + other.y, self.z + other.z)
        except AttributeError:
            return GpsPoint(self.x + other, self.y + other, self.z + other)
    def __str__(self):
        return "%d, %d, %d" % (self.x, self.y, self.z)
</snippet></ROW><ROW><id>2367954</id><snippet>MAILTO</snippet></ROW><ROW><id>2367954</id><snippet>MAILTO=username
</snippet></ROW><ROW><id>2367954</id><snippet>#!/bin/sh
echo "$0 ran on `date +%c`" &gt;&gt; /tmp/crontab_test.log

# ... rest of program
</snippet></ROW><ROW><id>2367992</id><snippet>special_cats = ['cat1','cat2','cat3']
</snippet></ROW><ROW><id>2367992</id><snippet>def generic_cat_view(request, cat_slug):
    if cat_slug in special_cats:
        return special_view(request, cat_slug)
    else:
        #generic view
</snippet></ROW><ROW><id>2368108</id><snippet>&lt;ul&gt;
% for prompt in whateveryoucalledit.values():
  &lt;li&gt;${prompt}&lt;/li&gt;
% endfor
&lt;/ul&gt;
</snippet></ROW><ROW><id>2368108</id><snippet>whateveryoucalledit</snippet></ROW><ROW><id>2368248</id><snippet>link</snippet></ROW><ROW><id>2368248</id><snippet>.encode()</snippet></ROW><ROW><id>2368248</id><snippet>html = urllib.urlopen(link).read()
unicode_str = html.decode(&lt;source encoding&gt;)
encoded_str = unicode_str.encode("utf8")
</snippet></ROW><ROW><id>2368248</id><snippet>html = '\xa0'
encoded_str = html.encode("utf8")
</snippet></ROW><ROW><id>2368248</id><snippet>UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>2368248</id><snippet>html = '\xa0'
decoded_str = html.decode("windows-1252")
encoded_str = decoded_str.encode("utf8")
</snippet></ROW><ROW><id>2368248</id><snippet>.urlopen().read()</snippet></ROW><ROW><id>2368248</id><snippet>.encode()</snippet></ROW><ROW><id>2368248</id><snippet>self.response.out.write(html)</snippet></ROW><ROW><id>2368248</id><snippet>read()</snippet></ROW><ROW><id>2368248</id><snippet>.decode()</snippet></ROW><ROW><id>2368364</id><snippet>start_iter.forward_search</snippet></ROW><ROW><id>2368364</id><snippet>found</snippet></ROW><ROW><id>2368364</id><snippet>match_start</snippet></ROW><ROW><id>2368364</id><snippet>match_end</snippet></ROW><ROW><id>2368364</id><snippet>search_str =  self.text_to_find.get_text()
start_iter =  textbuffer.get_start_iter()
# don't need these lines anymore
#match_start = textbuffer.get_start_iter() 
#match_end =   textbuffer.get_end_iter() 
found =       start_iter.forward_search(search_str,0, None) 
if found:
   match_start,match_end = found #add this line to get match_start and match_end
   textbuffer.select_range(match_start,match_end)
</snippet></ROW><ROW><id>2368412</id><snippet>def func(x,y):
    return cos(x) + cos(y)

def func2(y, a, b):
    return integrate.quad(func, a, b, args=(y,))[0]

print integrate.quad(func2, -pi/2, pi/2, args=(-pi/2, pi/2))[0]
</snippet></ROW><ROW><id>2368412</id><snippet>print integrate.dblquad(func, -pi/2, pi/2, lambda x:-pi/2, lambda x:pi/2)[0]
</snippet></ROW><ROW><id>2368468</id><snippet>filter-with</snippet></ROW><ROW><id>2368468</id><snippet>[app:main]
use = ...
...

filter-with = flickzeug


[filter:flickzeug]
use = egg:...#...
...</snippet></ROW><ROW><id>2368533</id><snippet>class BaseHandler(webapp.RequestHandler):

    def get(self, CSIN=None):
        self.response.headers['Content-Type'] = 'text/html'
        render('Views/header.html', self, {'title' : 'Store'})
        self.response.out.write('&lt;h1&gt;%s&lt;/h1&gt; '% self.h1(CSIN))
        self.do_body(CSIN)
        render('Views/footer.html', self, {})

class MainPage(BaseHandler):

    def h1(self, CSIN):
        return 'This is going to be the best Store app EVER!'

    def do_body(self, CSIN):
        items = Item.all().order('name').fetch(10)
        render('Views/table.html', self, {'items': items})

class Detail(BaseHandler):

    def h1(self, CSIN):
        return 'DETAILS %s' % CSIN

    def do_body(self, CSIN):
        # no risk whatsoever of SQL injection here;-)
        item = db.GqlQuery("SELECT * FROM Item WHERE CSIN = :1", int(CSIN)).get()
        if (item):
            render('Views/item_detail.html', self, {'item': item})
        else:
            render('Views/item_not_found.html', self, {'CSIN': CSIN})
</snippet></ROW><ROW><id>2368555</id><snippet>&gt;&gt;&gt; class Example(object):
...     a = []
...     def __init__(self):
...         self.b = []
... 

&gt;&gt;&gt; foo = Example()
&gt;&gt;&gt; bar = Example()

&gt;&gt;&gt; foo.a
[]
&gt;&gt;&gt; bar.a
[]
&gt;&gt;&gt; foo.b
[]
&gt;&gt;&gt; bar.b
[]

&gt;&gt;&gt; foo.a.append(1)
&gt;&gt;&gt; foo.b.append(2)
&gt;&gt;&gt; foo.a
[1]
&gt;&gt;&gt; foo.b
[2]
&gt;&gt;&gt; bar.a
[1]
&gt;&gt;&gt; bar.b
[]
</snippet></ROW><ROW><id>2368676</id><snippet>menu_items = {'menu_items': [{'href': '/', 'name': 'Home'},
                             {'href': '/cart', 'name': 'Cart'}],
              }
render('Views/menu.html', self, {'menu_items': menu_items})
</snippet></ROW><ROW><id>2368676</id><snippet>menu_items = [{'href': '/', 'name': 'Home'}, {'href': '/cart', 'name': 'Cart' }]
</snippet></ROW><ROW><id>2368749</id><snippet>2to3</snippet></ROW><ROW><id>2368749</id><snippet>3to2</snippet></ROW><ROW><id>2368749</id><snippet>2to3</snippet></ROW><ROW><id>2368749</id><snippet>try: 
    any
except NameError:
    def any(iterable):
        for item in iterable:
            if item:
                return True
        return False
</snippet></ROW><ROW><id>2368749</id><snippet>NameError</snippet></ROW><ROW><id>2368749</id><snippet>ImportError</snippet></ROW><ROW><id>2368892</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/</snippet></ROW><ROW><id>2368892</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/</snippet></ROW><ROW><id>2368892</id><snippet>sh setuptools-X.Y.Z.egg</snippet></ROW><ROW><id>2368892</id><snippet>site-packages</snippet></ROW><ROW><id>2368892</id><snippet>easy_install</snippet></ROW><ROW><id>2368969</id><snippet>fout</snippet></ROW><ROW><id>2368969</id><snippet>fout = file('test.out','w+b')
</snippet></ROW><ROW><id>2368971</id><snippet>Profile._meta.fields</snippet></ROW><ROW><id>2368971</id><snippet>name</snippet></ROW><ROW><id>2368971</id><snippet>Profile._meta.get_fields_with_model()</snippet></ROW><ROW><id>2368971</id><snippet>(field, model)</snippet></ROW><ROW><id>2368971</id><snippet>model</snippet></ROW><ROW><id>2368971</id><snippet>None</snippet></ROW><ROW><id>2368971</id><snippet>Profile</snippet></ROW><ROW><id>2369121</id><snippet>lib/site-packages/scipy/sparse/lil.py</snippet></ROW><ROW><id>2369121</id><snippet>from scipy import sparse
from bisect import bisect_left

class lil2(sparse.lil_matrix):
    def removecol(self,j):
        if j &lt; 0:
            j += self.shape[1]

        if j &lt; 0 or j &gt;= self.shape[1]:
            raise IndexError('column index out of bounds')

        rows = self.rows
        data = self.data
        for i in xrange(self.shape[0]):
            pos = bisect_left(rows[i], j)
            if pos == len(rows[i]):
                continue
            elif rows[i][pos] == j:
                rows[i].pop(pos)
                data[i].pop(pos)
                if pos == len(rows[i]):
                    continue
            for pos2 in xrange(pos,len(rows[i])):
                rows[i][pos2] -= 1

        self._shape = (self._shape[0],self._shape[1]-1)
</snippet></ROW><ROW><id>2369121</id><snippet>    def removerow(self,i):
        if i &lt; 0:
            i += self.shape[0]

        if i &lt; 0 or i &gt;= self.shape[0]:
            raise IndexError('row index out of bounds')

        self.rows = numpy.delete(self.rows,i,0)
        self.data = numpy.delete(self.data,i,0)
        self._shape = (self._shape[0]-1,self.shape[1])
</snippet></ROW><ROW><id>2369474</id><snippet>import fileinput
for line in fileinput.FileInput("file",inplace=1):
    if line.rstrip():
        print line
</snippet></ROW><ROW><id>2370380</id><snippet>print 'Hello dear user, your name is %(first_name)s %(last_name)s' % params
</snippet></ROW><ROW><id>2370396</id><snippet>(button|submit|cancel)</snippet></ROW><ROW><id>2370396</id><snippet>?:</snippet></ROW><ROW><id>2370396</id><snippet>(?:</snippet></ROW><ROW><id>2370396</id><snippet>&gt;&gt;&gt; re.findall('&lt;html:(?:button|submit|cancel)[\s\S]*?&lt;/html:(?:button|submit|cancel)&gt;',TheHTMLWhichShouldntParseWithRegex)
['&lt;html:button ...&gt;&lt;/html:button&gt;', '&lt;html:submit ...&gt;&lt;/html:submit&gt;']
</snippet></ROW><ROW><id>2370725</id><snippet>a/b</snippet></ROW><ROW><id>2370725</id><snippet>a/b</snippet></ROW><ROW><id>2370725</id><snippet>a</snippet></ROW><ROW><id>2370725</id><snippet>b</snippet></ROW><ROW><id>2370725</id><snippet>3.1</snippet></ROW><ROW><id>2370725</id><snippet>1/k</snippet></ROW><ROW><id>2370725</id><snippet>range</snippet></ROW><ROW><id>2371004</id><snippet>s.split(None, 1)[-1]
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; test = "somestring 363 1 46 17,363 1 34 17,401 3 8 14,"
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; from pyparsing import *
&gt;&gt;&gt; integer = Word(nums)
&gt;&gt;&gt; patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress(',')))
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; patt.parseString(test).asList()
['somestring', ['363', '1', '46', '17'], ['363', '1', '34', '17'], ['401', '3', '8', '14']]
</snippet></ROW><ROW><id>2371353</id><snippet>Word(nums)</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; integer = Word(nums).setParseAction(lambda tokens:int(tokens[0]))
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress(',')))
&gt;&gt;&gt; patt.parseString(test).asList()
['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; patt = Word(alphas)("desc") + OneOrMore(Group(integer*4 + Suppress(',')))("numgroups")
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; patt.parseString(test).asList()
['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; print patt.parseString(test).dump()
['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]
- desc: somestring
- numgroups: [[363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]
</snippet></ROW><ROW><id>2371353</id><snippet>&gt;&gt;&gt; res = patt.parseString(test)
&gt;&gt;&gt; print res.desc
somestring
&gt;&gt;&gt; print res.numgroups
[[363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]
&gt;&gt;&gt; for ng in res.numgroups: print sum(ng)
...
427
415
426
</snippet></ROW><ROW><id>2371353</id><snippet>test = "somestring 363 1 46 17,363 1 34 17,401 3 8 14,"
from pyparsing import *
integer = Word(nums).setParseAction(lambda tokens:int(tokens[0]))
patt = Word(alphas)("desc") + \
    OneOrMore(Group(integer*4 + Suppress(',')))("numgroups")

print patt.parseString(test).asList()
print patt.parseString(test).dump()
res = patt.parseString(test)
print res.desc
print res.numgroups
for ng in res.numgroups: 
    print sum(ng)
</snippet></ROW><ROW><id>2371546</id><snippet>def complex_file_to_dict(filename):
    out = dict()
    for line in open(filename):
        line = line.strip()
        if line.startswith('d.complex'):
            name = line
            out[name] = set()
        elif line:
            out[name].add(line)

    return out

res_1 = complex_file_to_dict('file1.txt')
res_2 = complex_file_to_dict('file2.txt')

for k1, set_1 in res_1.iteritems():
    for k2, set_2 in res_2.iteritems():
      print k1
      print k2
      for v in set_1 - set_2:
        print v
      print
</snippet></ROW><ROW><id>2371546</id><snippet>for k1, set_1 in res_1.iteritems():
    for k2, set_2 in res_2.iteritems():
      print k1
      print k2,
      l = [v for v in set_1 - set_2]
      print '(' + ', '.join(l) + ')'
</snippet></ROW><ROW><id>2371546</id><snippet>d.complex.1
d.complex.1 (1, 65, 48)
d.complex.1
d.complex.10 (1, 65, 48)
d.complex.10
d.complex.1 (46, 109, 192)
d.complex.10
d.complex.10 (109, 21)
</snippet></ROW><ROW><id>2371789</id><snippet>from __future__ import division
from pyparsing import (Literal,CaselessLiteral,Word,Combine,Group,Optional,
                       ZeroOrMore,Forward,nums,alphas,oneOf)
import math
import operator

__author__='Paul McGuire'
__version__ = '$Revision: 0.0 $'
__date__ = '$Date: 2009-03-20 $'
__source__='''http://pyparsing.wikispaces.com/file/view/fourFn.py
http://pyparsing.wikispaces.com/message/view/home/15549426
'''
__note__='''
All I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it
more easily in other places.
'''

class NumericStringParser(object):
    '''
    Most of this code comes from the fourFn.py pyparsing example

    '''
    def pushFirst(self, strg, loc, toks ):
        self.exprStack.append( toks[0] )
    def pushUMinus(self, strg, loc, toks ):
        if toks and toks[0]=='-': 
            self.exprStack.append( 'unary -' )
    def __init__(self):
        """
        expop   :: '^'
        multop  :: '*' | '/'
        addop   :: '+' | '-'
        integer :: ['+' | '-'] '0'..'9'+
        atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'
        factor  :: atom [ expop factor ]*
        term    :: factor [ multop factor ]*
        expr    :: term [ addop term ]*
        """
        point = Literal( "." )
        e     = CaselessLiteral( "E" )
        fnumber = Combine( Word( "+-"+nums, nums ) + 
                           Optional( point + Optional( Word( nums ) ) ) +
                           Optional( e + Word( "+-"+nums, nums ) ) )
        ident = Word(alphas, alphas+nums+"_$")       
        plus  = Literal( "+" )
        minus = Literal( "-" )
        mult  = Literal( "*" )
        div   = Literal( "/" )
        lpar  = Literal( "(" ).suppress()
        rpar  = Literal( ")" ).suppress()
        addop  = plus | minus
        multop = mult | div
        expop = Literal( "^" )
        pi    = CaselessLiteral( "PI" )
        expr = Forward()
        atom = ((Optional(oneOf("- +")) +
                 (pi|e|fnumber|ident+lpar+expr+rpar).setParseAction(self.pushFirst))
                | Optional(oneOf("- +")) + Group(lpar+expr+rpar)
                ).setParseAction(self.pushUMinus)       
        # by defining exponentiation as "atom [ ^ factor ]..." instead of 
        # "atom [ ^ atom ]...", we get right-to-left exponents, instead of left-to-right
        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
        factor = Forward()
        factor &lt;&lt; atom + ZeroOrMore( ( expop + factor ).setParseAction( self.pushFirst ) )
        term = factor + ZeroOrMore( ( multop + factor ).setParseAction( self.pushFirst ) )
        expr &lt;&lt; term + ZeroOrMore( ( addop + term ).setParseAction( self.pushFirst ) )
        # addop_term = ( addop + term ).setParseAction( self.pushFirst )
        # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)
        # expr &lt;&lt;  general_term       
        self.bnf = expr
        # map operator symbols to corresponding arithmetic operations
        epsilon = 1e-12
        self.opn = { "+" : operator.add,
                "-" : operator.sub,
                "*" : operator.mul,
                "/" : operator.truediv,
                "^" : operator.pow }
        self.fn  = { "sin" : math.sin,
                "cos" : math.cos,
                "tan" : math.tan,
                "abs" : abs,
                "trunc" : lambda a: int(a),
                "round" : round,
                "sgn" : lambda a: abs(a)&gt;epsilon and cmp(a,0) or 0}
    def evaluateStack(self, s ):
        op = s.pop()
        if op == 'unary -':
            return -self.evaluateStack( s )
        if op in "+-*/^":
            op2 = self.evaluateStack( s )
            op1 = self.evaluateStack( s )
            return self.opn[op]( op1, op2 )
        elif op == "PI":
            return math.pi # 3.1415926535
        elif op == "E":
            return math.e  # 2.718281828
        elif op in self.fn:
            return self.fn[op]( self.evaluateStack( s ) )
        elif op[0].isalpha():
            return 0
        else:
            return float( op )
    def eval(self,num_string,parseAll=True):
        self.exprStack=[]
        results=self.bnf.parseString(num_string,parseAll)
        val=self.evaluateStack( self.exprStack[:] )
        return val
</snippet></ROW><ROW><id>2371789</id><snippet>nsp=NumericStringParser()
result=nsp.eval('2^4')
print(result)
# 16.0
</snippet></ROW><ROW><id>2371987</id><snippet>try urllib.urlopen("http://&lt;path to images&gt;/%s/%sPR-IT,PM.jpg" % (folder, sku)):
        urllib.URLopener().retrieve("http://&lt;path to images&gt;/%s/%sPR-IT,PM.jpg" % (folder, sku), "%sPR-IT,PM.jpg" % (sku))
        found_url = True
    except:
        found_url = False
</snippet></ROW><ROW><id>2371987</id><snippet>try:
    urllib.urlopen("http://&lt;path to images&gt;/%s/%sPR-IT,PM.jpg" % (folder, sku)):
    urllib.URLopener().retrieve("http://&lt;path to images&gt;/%s/%sPR-IT,PM.jpg" % (folder, sku), "%sPR-IT,PM.jpg" % (sku))
    found_url = True
except:
    found_url = False
</snippet></ROW><ROW><id>2371987</id><snippet>except:</snippet></ROW><ROW><id>2372007</id><snippet>itertools.dropwhile</snippet></ROW><ROW><id>2372007</id><snippet>False</snippet></ROW><ROW><id>2372007</id><snippet>enumerate</snippet></ROW><ROW><id>2372007</id><snippet>itertools</snippet></ROW><ROW><id>2372007</id><snippet>lambda</snippet></ROW><ROW><id>2372007</id><snippet>lambda x: not pred (x)</snippet></ROW><ROW><id>2372007</id><snippet>pred</snippet></ROW><ROW><id>2372007</id><snippet>def negate(f):
    def wrapped(x):
        return not f(x)
    return wrapped
</snippet></ROW><ROW><id>2372007</id><snippet>def odd(x): return x % 2 == 1
itertools.dropwhile(negate(odd), [2,4,1]).next()
# =&gt; 1
</snippet></ROW><ROW><id>2372007</id><snippet>StopIteration</snippet></ROW><ROW><id>2372219</id><snippet>    row = ['0x14', '0xb6', '0xa1', '0x0', '0xa1', '0x0']
    as_hex = ''.join(byte[2:].zfill(2) for byte in row)
  # as_hex = '14b6a100a100'
    bytes = buffer(as_hex.decode('hex'))

    cur.execute("INSERT INTO mylog (binaryfield) VALUES (%(bytes)s)", 
                {'bytes': bytes})
</snippet></ROW><ROW><id>2372219</id><snippet>    cur.execute("SELECT binaryfield FROM mylog")
    res = cur.fetchone()
    my_data = str(res[4:]).encode('hex')
</snippet></ROW><ROW><id>2372219</id><snippet>integers</snippet></ROW><ROW><id>2372270</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>2372270</id><snippet>import xml.etree.cElementTree as etree

with open(xml_file_path) as xml_file:
    tree = etree.iterparse(xml_file)
    for items in tree:
        for item in items:
            print item.text
</snippet></ROW><ROW><id>2372270</id><snippet>&gt;&gt;&gt; x="""&lt;?xml version="1.0"?&gt;
&lt;test&gt;
    &lt;items&gt;
        &lt;item&gt;item 1&lt;/item&gt;
        &lt;item&gt;item 2&lt;/item&gt;
    &lt;/items&gt;
&lt;/test&gt;"""
&gt;&gt;&gt; x
'&lt;?xml version="1.0"?&gt;\n&lt;test&gt;\n    &lt;items&gt;\n        &lt;item&gt;item 1&lt;/item&gt;\n        &lt;item&gt;item 2&lt;/item&gt;\n    &lt;/items&gt;\n&lt;/test&gt;'
&gt;&gt;&gt; import xml.etree.cElementTree as etree
&gt;&gt;&gt; tree = etree.fromstring(x)
&gt;&gt;&gt; tree
&lt;Element 'test' at 0xb63ad248&gt;
&gt;&gt;&gt; for i in tree:
        for j in i:
            print j


&lt;Element 'item' at 0xb63ad2f0&gt;
&lt;Element 'item' at 0xb63ad338&gt;
&gt;&gt;&gt; for i in tree:
        for j in i:
            j.text

'item 1'
'item 2'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2372308</id><snippet>def parsefile(filename):
  ret = {}
  cur = None
  for line in ( x.strip() for x in open(filename,'r')):
    if line.startswith('d.complex'):
      cur = set()
      ret[line] = cur
    if not cur or not line.isdigit():
      continue
    cur.add(int(line))
  return ret

def compareStructures(first,second):
  # Iterate through key,value pairs in first
  for firstcmplx, firstmembers in first.iteritems():
    # Iterate through key,value pairs in second
    for secondcmplx, secondmembers in second.iteritems():
      notinsecond = firstmembers- secondmembers
      if notinsecond:
        # There are items in first that aren't in second
        print firstcmplx
        print secondcmplx
        print "\n".join([ str(x) for x in notinsecond])

first = parsefile("myFirstFile.txt")
second = parsefile("mySecondFile.txt")

compareStructures(first,second)
</snippet></ROW><ROW><id>2372578</id><snippet>&gt;&gt;&gt; "    xyz     ".rstrip()
'    xyz'
</snippet></ROW><ROW><id>2372578</id><snippet>rstrip</snippet></ROW><ROW><id>2373397</id><snippet>CharField</snippet></ROW><ROW><id>2373397</id><snippet>UserProfileConfig.username</snippet></ROW><ROW><id>2373397</id><snippet>self.tester</snippet></ROW><ROW><id>2373397</id><snippet>__init__</snippet></ROW><ROW><id>2373689</id><snippet>grid.cells</snippet></ROW><ROW><id>2373689</id><snippet>grid.cells</snippet></ROW><ROW><id>2373689</id><snippet>def get_adjacent_cells( self, x_coord, y_coord ):
    result = {}
    for x,y in [(x_coord+i,y_coord+j) for i in (-1,0,1) for j in (-1,0,1) if i != 0 or j != 0]:
        if (x,y) in grid.cells:
            result[(x,y)] = grid.cells[(x,y)]
</snippet></ROW><ROW><id>2373689</id><snippet>grid.cells</snippet></ROW><ROW><id>2374072</id><snippet>class UserProfileConfig(forms.Form):

    def __init__(self,request,*args,**kwargs):
        super (UserProfileConfig,self).__init__(*args,**kwargs)
        self.fields['username'] = forms.CharField(label='Username',max_length=100,initial=request.session['some_var'])
</snippet></ROW><ROW><id>2374160</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; var = urllib2.urlopen('http://www.stackoverflow.com/')
&gt;&gt;&gt; var.geturl()
'http://stackoverflow.com/'
</snippet></ROW><ROW><id>2374240</id><snippet>prefix</snippet></ROW><ROW><id>2374240</id><snippet>form = MyFormClass(prefix='some_prefix')
</snippet></ROW><ROW><id>2374240</id><snippet>form = MyFormClass(request.POST, prefix='some_prefix')
</snippet></ROW><ROW><id>2374361</id><snippet>permutations</snippet></ROW><ROW><id>2374361</id><snippet>itertools.product</snippet></ROW><ROW><id>2374361</id><snippet>&gt;&gt;&gt; s = 'atgc'
&gt;&gt;&gt; d = dict(zip(s, 'tacg'))
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in itertools.product(s, repeat=10):
    sta = ''.join(i)
    stb = ''.join(d[x] for x in i)
</snippet></ROW><ROW><id>2374361</id><snippet>'atgc'</snippet></ROW><ROW><id>2374361</id><snippet>sta</snippet></ROW><ROW><id>2374361</id><snippet>stb</snippet></ROW><ROW><id>2374361</id><snippet>&gt;&gt;&gt; trans = str.maketrans(s, 'tacg')
&gt;&gt;&gt; for i in itertools.product(s, repeat=10):
    sta = ''.join(i)
    stb = sta.translate(trans)
</snippet></ROW><ROW><id>2374507</id><snippet>sys.stdout</snippet></ROW><ROW><id>2374662</id><snippet>percentile()</snippet></ROW><ROW><id>2375127</id><snippet>*</snippet></ROW><ROW><id>2375127</id><snippet>[:6]</snippet></ROW><ROW><id>2375127</id><snippet>time.localtime()</snippet></ROW><ROW><id>2375127</id><snippet>time.struct_time</snippet></ROW><ROW><id>2375127</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2375362</id><snippet> del request.session['mykey']
</snippet></ROW><ROW><id>2375382</id><snippet>&gt;&gt;&gt; l = ((1,2),(3,4))
&gt;&gt;&gt; dict(map(lambda n: (n[0], unicode(n[1])), l))
{1: u'2', 3: u'4'}
</snippet></ROW><ROW><id>2375382</id><snippet>&gt;&gt;&gt; l = ((1,2),(3,4))
&gt;&gt;&gt; {n[0] : str(n[1]) for n in l}
{1: '2', 3: '4'}
</snippet></ROW><ROW><id>2375414</id><snippet>def __call__(self, cls):
    def init(cls_self, *args, **kw):
        if len(args)+len(kw) != len(self.params):
            raise RuntimeError("Wrong number of arguments")
        for param, value in zip(self.params, args):
            setattr(cls_self, param, value)
        vars(cls_self).update(kw)
    cls.__init__ = init
    return cls
</snippet></ROW><ROW><id>2375414</id><snippet>def __call__(self, cls):
    def init(cls_self, *args, **kw):
        for param, value in zip(self.params, args):
            if param in kw:
                raise TypeError("Multiple values for %s"%param)
            kw[param]=value
        if len(args) &gt; len(self.params) or set(kw) != set(self.params):
            raise TypeError("Wrong number of arguments")
        vars(cls_self).update(kw)
    cls.__init__ = init
    return cls
</snippet></ROW><ROW><id>2375414</id><snippet>def __call__(self, cls):
    def init(cls_self, *args, **kw):
        for param, value in zip(self.params, args):
            if param in kw:
                raise TypeError("Multiple values for %s"%param)
            kw[param]=value
        unexpected_args = list(set(kw)-set(self.params))
        if unexpected_args:
            raise TypeError("Unexpected args %s"%unexpected_args)
        missing_args = list(set(self.params)-set(kw))
        if missing_args:
            raise TypeError("Expected args %s"%missing_args)
        vars(cls_self).update(kw)
    cls.__init__ = init
    return cls
</snippet></ROW><ROW><id>2375443</id><snippet>from a_package.baz import do_something_expensive
do_something_expensive = lambda: 'Something really cheap.'
</snippet></ROW><ROW><id>2375443</id><snippet>do_something_expensive = a_package.baz['do_something_expensive']
do_something_expensive = lambda: 'Something really cheap.'
</snippet></ROW><ROW><id>2375443</id><snippet>import bar
bar.do_something_expensive = lambda: 'Something really cheap.'
</snippet></ROW><ROW><id>2375535</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent=None, title=None):
        wx.Frame.__init__(self, parent, wx.ID_ANY, title)
        self.panel = wx.Panel(self, size=(350, 450))
        # this sets up the painting canvas
        self.panel.Bind(wx.EVT_PAINT, self.on_paint)
        # set frame size to fit panel
        self.Fit()

    def on_paint(self, event):
        # establish the painting canvas
        dc = wx.PaintDC(self.panel)
        x = 0
        y = 0
        w, h = self.GetSize()
        dc.GradientFillLinear((x, y, w, h), 'blue', 'black')


app = wx.App(0)
MyFrame(title='Gradient Test').Show()
app.MainLoop()
</snippet></ROW><ROW><id>2375535</id><snippet>import numpy as np

def GetBitmap( self, width=640, height=480, leftColour=(255,128,0), rightColour=(64,0,255) ):
        ## Create a horizontal gradient
        array = np.zeros( (height, width, 3),'uint8')
        # alpha is a one dimensional array with a linear gradient from 0.0 to 1.0
        alpha = np.linspace( 0., 1., width )
        # This uses alpha to linearly interpolate between leftColour and rightColour
        colourGradient = np.outer(alpha, leftColour) + np.outer((1.-alpha), rightColour)
        # NumPy's broadcasting rules will assign colourGradient to every row of the destination array
        array[:,:,:] = colourGradient
        image = wx.EmptyImage(width,height)
        image.SetData( array.tostring())
        return image.ConvertToBitmap()# wx.BitmapFromImage(image)
</snippet></ROW><ROW><id>2375624</id><snippet>attrs[attr].strip()
</snippet></ROW><ROW><id>2375905</id><snippet>import wx
import wx.aui

########################################################################
class TabPanel(wx.Panel):
    """
    This will be the first notebook tab
    """
    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""

        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)

        sizer = wx.BoxSizer(wx.VERTICAL)
        txtOne = wx.TextCtrl(self, wx.ID_ANY, "")
        txtTwo = wx.TextCtrl(self, wx.ID_ANY, "")

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(txtOne, 0, wx.ALL, 5)
        sizer.Add(txtTwo, 0, wx.ALL, 5)

        self.SetSizer(sizer)

class DemoPanel(wx.Panel):
    """
    This will be the first notebook tab
    """
    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)

        # create the AuiNotebook instance
        nb = wx.aui.AuiNotebook(self)

        # add some pages to the notebook
        pages = [(TabPanel(nb), "Tab 1"),
                 (TabPanel(nb), "Tab 2"),
                 (TabPanel(nb), "Tab 3")]
        for page, label in pages:
            nb.AddPage(page, label)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(nb, 1, wx.EXPAND)
        self.SetSizer(sizer)

########################################################################
class DemoFrame(wx.Frame):
    """
    Frame that holds all other widgets
    """

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, wx.ID_ANY,
                          "AUI-Notebook Tutorial",
                          size=(600,400))
        panel = DemoPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = DemoFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>2376009</id><snippet>(add-hook 'rudel-document-attach-hook 'my-rudel-set-mode-appropriately)
(defun my-rudel-set-mode-appropriately (document buffer)
  "try to set the mode appropriately"
  (set-buffer buffer)
  (let ((buffer-file-name ...get-name-from-document...))
    (set-auto-mode)))
</snippet></ROW><ROW><id>2376009</id><snippet>...get-name-from-document...</snippet></ROW><ROW><id>2376009</id><snippet>myfile.py</snippet></ROW><ROW><id>2376009</id><snippet>(buffer-name)</snippet></ROW><ROW><id>2376009</id><snippet>(buffer-name)</snippet></ROW><ROW><id>2376009</id><snippet>(rudel-suggested-buffer-name document)</snippet></ROW><ROW><id>2376009</id><snippet>  (let ((buffer-file-name (buffer-name)))
</snippet></ROW><ROW><id>2376009</id><snippet>  (let ((buffer-file-name (rudel-suggested-buffer-name document)))
</snippet></ROW><ROW><id>2376009</id><snippet>set-auto-mode</snippet></ROW><ROW><id>2376009</id><snippet>buffer-file-name</snippet></ROW><ROW><id>2376513</id><snippet>  class_&lt;std::list&lt;Item&gt; &gt;("ItemList")
    .def("__iter__", iterator&lt;std::list&lt;Item&gt; &gt;());
</snippet></ROW><ROW><id>2376513</id><snippet>  class Py_BaseClass : public BaseClass {
  public:
    std::list&lt;Item&gt; &amp; py_get_items();
  }
</snippet></ROW><ROW><id>2376848</id><snippet>items = []
for entry in cartEntries:
    items.append(entry.item) 
</snippet></ROW><ROW><id>2376848</id><snippet>items = [entry.item for entry in cartEntries]
</snippet></ROW><ROW><id>2376923</id><snippet>from BeautifulSoup import BeautifulSoup, SoupStrainer
import re
import urllib2

doc = urllib2.urlopen("http://somesite.com").read()
links = SoupStrainer('a', href=re.compile(r'^test'))
soup = [str(elm) for elm in BeautifulSoup(doc, parseOnlyThese=links)]
for elm in soup:
    print elm
</snippet></ROW><ROW><id>2376923</id><snippet>somesite.com</snippet></ROW><ROW><id>2376978</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>2376978</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>2376978</id><snippet>python</snippet></ROW><ROW><id>2376978</id><snippet>which python
</snippet></ROW><ROW><id>2376978</id><snippet>python</snippet></ROW><ROW><id>2377117</id><snippet>make install</snippet></ROW><ROW><id>2377117</id><snippet>redis-server</snippet></ROW><ROW><id>2377117</id><snippet>redis-server</snippet></ROW><ROW><id>2377117</id><snippet>redis.conf</snippet></ROW><ROW><id>2377117</id><snippet>make 32bit</snippet></ROW><ROW><id>2377148</id><snippet>from lxml import etree

def keep(self, xmlfile, elem_name, attr_name, pattern, dst):
    try: 
        rep = re.compile(pattern)
    except TypeError:
        # Create regex pattern if a list is given. 
        # TypeError: unhashable type: 'list'
        rep = re.compile("|".join(pattern))

    dom = etree.parse(xmlfile)
    for node in dom.findall('//%s' % elem_name):
        if not rep.search(node.get(attr_name)):
            node.getparent().remove(node)

    dom.write(dst)
</snippet></ROW><ROW><id>2377148</id><snippet>keep('coverage.xml', 'package', 'name', 'ae|tests', 'wanted-coverage.xml')
</snippet></ROW><ROW><id>2377204</id><snippet>wx.TR_HAS_VARIABLE_ROW_HEIGHT</snippet></ROW><ROW><id>2377808</id><snippet>def view_function(request,id):
    object_to_edit = get_object_or_404(Model,id=id) #Or slug=slug
    form = ModelForm(data = request.POST or None, instance=object_to_edit)
    if form.is_valid():
        form.save()
        redirect()
    return render_to_response('template_name',{},RequestContext(request))
</snippet></ROW><ROW><id>2377983</id><snippet>@property
def myattr(self):
    """This is the doc string."""
    return self._half * 2

@myattr.setter
def myattr(self, value):
    self._half = value / 2

@myattr.deleter
def myattr(self):
    del self._half
</snippet></ROW><ROW><id>2378139</id><snippet>Use 4 spaces per indentation level.
</snippet></ROW><ROW><id>2378342</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>2378342</id><snippet>import doctest
from model import car
from tools import tool

doctest.testmod(car)
doctest.testmod(tool)
</snippet></ROW><ROW><id>2378342</id><snippet>import unittest
import doctest

modules = ("model.car", 
           "tools.tool")

suite = unittest.TestSuite()
for mod in modules:
    suite.addTest(doctest.DocTestSuite(mod))
runner = unittest.TextTestRunner()
runner.run(suite)
</snippet></ROW><ROW><id>2378342</id><snippet>easy_install nose
nosetests --with-doctest # done :-)
</snippet></ROW><ROW><id>2378342</id><snippet>from x import *</snippet></ROW><ROW><id>2378342</id><snippet>import x</snippet></ROW><ROW><id>2378342</id><snippet>from x import y</snippet></ROW><ROW><id>2378646</id><snippet>import datetime

def minute_interval(start, end):
     reverse = False
     if start &gt; end:
          start, end = end, start
          reverse = True

     delta = (end.hour - start.hour)*60 + end.minute - start.minute + (end.second - start.second)/60.0
     if reverse:
          delta = 24*60 - delta
     return delta

t1 = datetime.time(12, 10, 0) # 12:10
t2 = datetime.time(13, 13, 0) #13:13
t3 = datetime.time(23, 55, 0) #23:55 
t4 = end = datetime.time(01, 10, 0) #01:10

print minute_interval(t1, t2)
print minute_interval(t3, t4)
</snippet></ROW><ROW><id>2378646</id><snippet>63
75
</snippet></ROW><ROW><id>2378714</id><snippet>--exe</snippet></ROW><ROW><id>2378714</id><snippet>$ nosetests --help

...    

--exe               Look for tests in python modules that are executable.
                    Normal behavior is to exclude executable modules,
                    since they may not be import-safe [NOSE_INCLUDE_EXE]
</snippet></ROW><ROW><id>2378988</id><snippet>&gt;&gt;&gt; s = "   xyz"
&gt;&gt;&gt; len(s) - len(s.lstrip())
3
</snippet></ROW><ROW><id>2379063</id><snippet>import xml.etree.ElementTree as E
e = E.parse("test.xml")
print(e.find("type").text)
</snippet></ROW><ROW><id>2379063</id><snippet>import xml.dom.minidom
d = xml.dom.minidom.parse("test.xml")
print(d.getElementsByTagName("type")[0].firstChild.data)
</snippet></ROW><ROW><id>2379063</id><snippet>from BeautifulSoup import BeautifulStoneSoup
soup = BeautifulStoneSoup(open("test.xml"))
print(soup.find("type").text)
</snippet></ROW><ROW><id>2379353</id><snippet>__import__</snippet></ROW><ROW><id>2379353</id><snippet>my_module = __import__("mymodule")
</snippet></ROW><ROW><id>2379353</id><snippet>testmod</snippet></ROW><ROW><id>2379353</id><snippet>doctest.testmod(my_module)
</snippet></ROW><ROW><id>2379353</id><snippet>invenio.webtag</snippet></ROW><ROW><id>2379353</id><snippet>module = __import__('invenio.webtag', globals(), locals(), ['invenio'], -1)
</snippet></ROW><ROW><id>2379912</id><snippet>numpy.get_include()</snippet></ROW><ROW><id>2379912</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
import numpy as np                           # &lt;---- New line

ext_modules = [Extension("hello", ["hello.pyx"])]

setup(
  name = 'Hello world app',
  cmdclass = {'build_ext': build_ext},
  include_dirs = [np.get_include()],         # &lt;---- New line
  ext_modules = ext_modules
)
</snippet></ROW><ROW><id>2380078</id><snippet>time</snippet></ROW><ROW><id>2380078</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>2380078</id><snippet>import datetime
dt=datetime.datetime.strptime(data[4]+data[5],'%Y%m%d%H%M%S')
print(dt)
# 2010-03-04 08:28:35
</snippet></ROW><ROW><id>2380078</id><snippet>%Y%m%d%H%M%S</snippet></ROW><ROW><id>2380078</id><snippet>strftime</snippet></ROW><ROW><id>2380177</id><snippet>import sys, traceback

try:
   os.mkdir('/valid_created_dir')
   os.listdir('/invalid_path')
except OSError, msg:
   tb = sys.exc_info()[-1]
   stk = traceback.extract_tb(tb, 1)
   fname = stk[0][2]
   print 'The failing function was', fname
</snippet></ROW><ROW><id>2380177</id><snippet>print</snippet></ROW><ROW><id>2380177</id><snippet>if</snippet></ROW><ROW><id>2380295</id><snippet>tell application "Safari"
    set url_list to URL of every document
end tell
</snippet></ROW><ROW><id>2380295</id><snippet>sudo easy_install appscript
</snippet></ROW><ROW><id>2380295</id><snippet>&gt;&gt;&gt; import appscript
&gt;&gt;&gt; print appscript.app("Safari").windows.first.current_tab.URL()
http://wiki.python.org/moin/MacPython/Safari
</snippet></ROW><ROW><id>2380440</id><snippet>__init__</snippet></ROW><ROW><id>2380440</id><snippet>__new__</snippet></ROW><ROW><id>2380440</id><snippet>callback</snippet></ROW><ROW><id>2380440</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>2380440</id><snippet>__init__</snippet></ROW><ROW><id>2380440</id><snippet>app.yaml</snippet></ROW><ROW><id>2380440</id><snippet>.py</snippet></ROW><ROW><id>2380440</id><snippet>.py</snippet></ROW><ROW><id>2380672</id><snippet>ast.NodeVisitor</snippet></ROW><ROW><id>2380672</id><snippet>&gt;&gt;&gt; class VisitCalls(ast.NodeVisitor):
...   def visit_Call(self, what):
...     if what.func.value.id == 'self':
...       print what.func.attr
... 
&gt;&gt;&gt; f='''def x(self):
...   return self.bar() + self.baz()
... '''
&gt;&gt;&gt; xx = ast.parse(f)
&gt;&gt;&gt; VisitCalls().visit(xx)
bar
baz
</snippet></ROW><ROW><id>2380672</id><snippet>self.something</snippet></ROW><ROW><id>2380672</id><snippet>somelist.append(self.blah)</snippet></ROW><ROW><id>2380672</id><snippet>somelist[i + j]()</snippet></ROW><ROW><id>2380672</id><snippet>self.blah</snippet></ROW><ROW><id>2380789</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>2380789</id><snippet>exception urllib2.HTTPError</snippet></ROW><ROW><id>2380789</id><snippet>code</snippet></ROW><ROW><id>2380789</id><snippet>&gt;&gt;&gt; try: 
...     conn = urllib2.urlopen('http://www.example.com/admin')
...     # read conn and process data
... except urllib2.HTTPError, x:
...     print 'Ignoring', x.code
...     
Ignoring 401
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2381019</id><snippet>DEBUG</snippet></ROW><ROW><id>2381019</id><snippet>watch -n 1 mysqladmin --user=&lt;user&gt; --password=&lt;password&gt; processlist
</snippet></ROW><ROW><id>2381054</id><snippet>set</snippet></ROW><ROW><id>2381158</id><snippet>PyUnicode_FromWideChar()</snippet></ROW><ROW><id>2381694</id><snippet>fuzzy</snippet></ROW><ROW><id>2381764</id><snippet>&gt;&gt;&gt; dataVersionsRequest = getDataVersions**()**
&gt;&gt;&gt; dataVersionsRequest._accountInfo = acctInfo
&gt;&gt;&gt; service.getDataVersions(dataVersionsRequest)
</snippet></ROW><ROW><id>2381764</id><snippet>if isinstance(request, getDataVersions) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
</snippet></ROW><ROW><id>2381888</id><snippet>try:
    import simplejson
except ImportError:
    print "***FAILURE: simplejson missing***"
    sys.exit( 2 )
sys.exit( 0 )
</snippet></ROW><ROW><id>2382033</id><snippet>lambda pkt:((pkt.chksumpresent == 1) or (pkt.special == 1))
</snippet></ROW><ROW><id>2382238</id><snippet>from datetime import date
from datetime import timedelta

today = date.today()
offset = (today.weekday() - 2) % 7
last_wednesday = today - timedelta(days=offset)
</snippet></ROW><ROW><id>2382238</id><snippet>for x in xrange(1, 32):
    today = date(year=2010, month=3, day=x)
    offset = (today.weekday() - 2) % 7
    last_wednesday = today - timedelta(days=offset)

    print last_wednesday
</snippet></ROW><ROW><id>2382365</id><snippet>import ssl
import socket
from httplib2 import has_timeout
import httplib2
import socks


class CertificateValidationError(httplib2.HttpLib2Error):
    pass


def validating_sever_factory(ca_cert_file):
    # we need to define a closure here because we don't control
    # the arguments this class is instantiated with
    class ValidatingHTTPSConnection(httplib2.HTTPSConnectionWithTimeout):

        def connect(self):
            # begin copypasta from HTTPSConnectionWithTimeout
            "Connect to a host on a given (SSL) port."

            if self.proxy_info and self.proxy_info.isgood():
                sock = socks.socksocket(socket.AF_INET, socket.SOCK_STREAM)
                sock.setproxy(*self.proxy_info.astuple())
            else:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            if has_timeout(self.timeout):
                sock.settimeout(self.timeout)
            sock.connect((self.host, self.port))
            # end copypasta


            try:
                self.sock = ssl.wrap_socket(sock,
                            self.key_file,
                            self.cert_file,
                            cert_reqs=ssl.CERT_REQUIRED,
                            ca_certs=ca_cert_file
                            )
            except ssl.SSLError:
                # we have to capture the exception here and raise later because 
                # httplib2 tries to ignore exceptions on connect
                import sys
                self._exc_info = sys.exc_info()
                raise
            else:
                self._exc_info = None

                # this might be redundant
                server_cert = self.sock.getpeercert()
                if not server_cert:
                    raise CertificateValidationError(repr(server_cert))

        def getresponse(self):
            if not self._exc_info:
                return httplib2.HTTPSConnectionWithTimeout.getresponse(self)
            else:
                raise self._exc_info[1], None, self._exc_info[2]
    return ValidatingHTTPSConnection


def do_request(url,
        method='GET',
        body=None,
        headers=None,
        keyfile=None,
        certfile=None,
        ca_certs=None,
        proxy_info=None,
        timeout=30):
    """
    makes an http/https request, with optional client certificate and server
    certificate verification.
    returns response, content
    """
    kwargs = {}
    h = httplib2.Http(proxy_info=proxy_info, timeout=timeout)
    is_ssl = url.startswith('https')
    if is_ssl and ca_certs:
        kwargs['connection_type'] = validating_sever_factory(ca_certs)

    if is_ssl and keyfile and certfile:
        h.add_certificate(keyfile, certfile, '')
    return h.request(url, method=method, body=body, headers=headers, **kwargs)
</snippet></ROW><ROW><id>2382919</id><snippet>mus.extend(reversed(mus))
</snippet></ROW><ROW><id>2382919</id><snippet>import itertools
for item in itertools.chain(mus, reversed(mus)):
    do_something...
</snippet></ROW><ROW><id>2383041</id><snippet>2** (2**(2**2))
</snippet></ROW><ROW><id>2383333</id><snippet>import os
if sys.argv[0] != os.path.join(os.environ['WINDIR'],'blalah.exe'):
</snippet></ROW><ROW><id>2383569</id><snippet>values = []
for row in woof_1.findAll("tr", { "class" : "row_b" }):
  for col in row.findAll(re.compile('td')):
    if col.string:
      values.append(col.string)
result = ''.join(values)
</snippet></ROW><ROW><id>2383703</id><snippet>tot = 0.

for i in xrange(data.shape[0]-1):
    tot += ((((data[i+1:]-data[i])**2).sum(1))**.5).sum()

avg = tot/((data.shape[0]-1)*(data.shape[0])/2.)
</snippet></ROW><ROW><id>2383704</id><snippet>/^(?=([^@]*@){,2}[^@]*$)./
</snippet></ROW><ROW><id>2383829</id><snippet>try:
    os.makedirs('C:\\test\\')
except OSError:
    pass
</snippet></ROW><ROW><id>2383829</id><snippet>OSError</snippet></ROW><ROW><id>2383829</id><snippet>import errno
try:
    os.makedirs('C:\\test\\')
except OSError as e:
    if e.errno != errno.EEXIST:
        raise  # raises the error again
</snippet></ROW><ROW><id>2383859</id><snippet>nx.draw(G, node_size=size</snippet></ROW><ROW><id>2383859</id><snippet>size</snippet></ROW><ROW><id>2384139</id><snippet>O(N log N)</snippet></ROW><ROW><id>2384258</id><snippet>*/10 * * * * ( date ; python /webapps/foo/manage.py fetch_articles ) &gt;&gt;/tmp/fetch.out 2&gt;&amp;1
</snippet></ROW><ROW><id>2384258</id><snippet>set -x
</snippet></ROW><ROW><id>2384258</id><snippet>#!/bin/bash
#set -x
</snippet></ROW><ROW><id>2384348</id><snippet>$PATH</snippet></ROW><ROW><id>2384348</id><snippet>os.environ['PATH']</snippet></ROW><ROW><id>2384348</id><snippet>blkid</snippet></ROW><ROW><id>2384348</id><snippet>which blkid</snippet></ROW><ROW><id>2384348</id><snippet>sudo su</snippet></ROW><ROW><id>2384348</id><snippet>echo $PATH</snippet></ROW><ROW><id>2384348</id><snippet>getoutput</snippet></ROW><ROW><id>2384348</id><snippet>blkid</snippet></ROW><ROW><id>2384368</id><snippet>asyncore</snippet></ROW><ROW><id>2384368</id><snippet>goroutines</snippet></ROW><ROW><id>2384368</id><snippet>channels</snippet></ROW><ROW><id>2384717</id><snippet>backref</snippet></ROW><ROW><id>2384717</id><snippet>relation()</snippet></ROW><ROW><id>2384902</id><snippet>_meta</snippet></ROW><ROW><id>2384902</id><snippet>In [1]: from django.db import models

In [2]: model = models.get_model('timeapp', 'Employee')

In [3]: dep_field = model._meta.get_field_by_name('department')

In [4]: dep_field[0].rel.field_name
Out[4]: 'id'

In [5]: dep_field[0].rel.to
Out[5]: &lt;class 'timesite.timeapp.models.Department'&gt;
</snippet></ROW><ROW><id>2384902</id><snippet>def get_field_by_name(self, name):
    """
    Returns the (field_object, model, direct, m2m), where field_object is
    the Field instance for the given name, model is the model containing
    this field (None for local fields), direct is True if the field exists
    on this model, and m2m is True for many-to-many relations. When
    'direct' is False, 'field_object' is the corresponding RelatedObject
    for this field (since the field doesn't have an instance associated
    with it).

    Uses a cache internally, so after the first access, this is very fast.
    """
</snippet></ROW><ROW><id>2385331</id><snippet>file.name = slugify(myfile.filename)
name, ext = os.path.splitext(file.name)
while os.path.exists(os.path.join(permanent_store, file.name)):
    name += '_'
    file.name = name + ext

raw_file = os.path.join(permanent_store, file.name)
</snippet></ROW><ROW><id>2385782</id><snippet>\b(I[MBDPI]{2}|[MBDPI]I[MBDPI]|[MBDPI]{2}I)\b
</snippet></ROW><ROW><id>2385782</id><snippet>\b</snippet></ROW><ROW><id>2385782</id><snippet>\b[MBDPI]{3}\b
</snippet></ROW><ROW><id>2385782</id><snippet>\b(?=[MBDPI]{3}\b)\w*I\w*
</snippet></ROW><ROW><id>2385908</id><snippet>local_start</snippet></ROW><ROW><id>2385908</id><snippet>status</snippet></ROW><ROW><id>2385908</id><snippet>class TransactionalMiddlewareInterface(object):
    def __init__(self, application, **config):
        self.application = application
        self.config = config

    def __call__(self, environ, start_response):
        def local_start(stat_str, headers=[]):
            local_start.status = int(stat_str.split(' ')[0])
            return start_response(stat_str, headers)
        try:
            result = self.application(environ, local_start)
        finally:
            if local_start.status and local_start.status &gt; 199:
                pass
</snippet></ROW><ROW><id>2385955</id><snippet>urllib2</snippet></ROW><ROW><id>2385955</id><snippet>PycURL</snippet></ROW><ROW><id>2385955</id><snippet>mechanize</snippet></ROW><ROW><id>2386437</id><snippet>_spam</snippet></ROW><ROW><id>2386437</id><snippet>__spam</snippet></ROW><ROW><id>2386437</id><snippet>_classname__spam</snippet></ROW><ROW><id>2386437</id><snippet>exec</snippet></ROW><ROW><id>2386437</id><snippet>eval()</snippet></ROW><ROW><id>2386437</id><snippet>execfile()</snippet></ROW><ROW><id>2386437</id><snippet>getattr()</snippet></ROW><ROW><id>2386437</id><snippet>setattr()</snippet></ROW><ROW><id>2386437</id><snippet>delattr()</snippet></ROW><ROW><id>2386437</id><snippet>__dict__</snippet></ROW><ROW><id>2386611</id><snippet>value_from_datadict</snippet></ROW><ROW><id>2386740</id><snippet>pyflakes</snippet></ROW><ROW><id>2386990</id><snippet>ON</snippet></ROW><ROW><id>2386990</id><snippet>SQLite version 3.6.14
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; create table foo (bar int, zot int);
sqlite&gt; create index barx on foo(bar);
sqlite&gt; create index zotx    foo(zot);
SQL error: near "foo": syntax error
sqlite&gt;
</snippet></ROW><ROW><id>2387435</id><snippet>if y[35:38] !=x[35:38]:</snippet></ROW><ROW><id>2387435</id><snippet>   try:
     iy = int(y[35:38])
     ix = int(x[35:38])
   except ValueError:
     # here for whatever action is appropriate, including silent ignoring.
     print("Unexpected value for record # %s" % x[7:10])

   if abs(ix - iy) &gt; 2:
     print(x[7:10])
</snippet></ROW><ROW><id>2387476</id><snippet>django.core.urlresolvers.resolve</snippet></ROW><ROW><id>2387476</id><snippet>django.core.urlresolvers.reverse</snippet></ROW><ROW><id>2387701</id><snippet>my_list.extend(reversed(color[-bits:]))
</snippet></ROW><ROW><id>2387701</id><snippet>my_list.extend( itertools.islice( reversed(color), 0, bits))
</snippet></ROW><ROW><id>2387857</id><snippet>import inspect

class C:
    def otherFunction(self):
        print inspect.currentframe().f_back.f_locals
</snippet></ROW><ROW><id>2387857</id><snippet>&gt;&gt;&gt; A().callFunction(C())
{'self': &lt;__main__.A instance at 0x96b4fec&gt;, 'obj': &lt;__main__.C instance at 0x951ef2c&gt;}
</snippet></ROW><ROW><id>2388064</id><snippet>list1=[1,2,3,4]
list2=[1,5,3,4]
print [(i,j) for i,j in zip(list1,list2) if i!=j]
</snippet></ROW><ROW><id>2388064</id><snippet>[(2, 5)]
</snippet></ROW><ROW><id>2388064</id><snippet>list1=[1,2,3,4]
list2=[2,5,3,4]
print [(i,j) for i,j in zip(list1,list2)[1:] if i!=j]
</snippet></ROW><ROW><id>2388447</id><snippet>p1 = subprocess.Popen(["/usr/bin/java", "MyClass"], stdout=subprocess.PIPE)
print p1.stdout.read() 
</snippet></ROW><ROW><id>2388519</id><snippet>datetime</snippet></ROW><ROW><id>2388519</id><snippet>timedelta</snippet></ROW><ROW><id>2388519</id><snippet>datetime</snippet></ROW><ROW><id>2388519</id><snippet>datetime</snippet></ROW><ROW><id>2388519</id><snippet>datetime</snippet></ROW><ROW><id>2388590</id><snippet>http://www.clarityaccounting.com/api/v1</snippet></ROW><ROW><id>2388590</id><snippet> &lt;wsdl:service name="v1"&gt;
    &lt;wsdl:port binding="tns:v1SoapBinding" name="BooksApiV1Port"&gt;
      &lt;soap:address location="http://www.clarityaccounting.com/api/v1"/&gt;
    &lt;/wsdl:port&gt;
 &lt;/wsdl:service&gt;
</snippet></ROW><ROW><id>2388590</id><snippet>&lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt;
    &lt;soap:Body&gt;
        &lt;soap:Fault&gt;
            &lt;faultcode&gt;soap:Server&lt;/faultcode&gt;
            &lt;faultstring&gt;No such operation:  (HTTP GET PATH_INFO: /api/v1)&lt;/faultstring&gt;
        &lt;/soap:Fault&gt;
    &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
</snippet></ROW><ROW><id>2388590</id><snippet>Client</snippet></ROW><ROW><id>2388590</id><snippet>&gt;&gt;&gt; url
'https://www.clarityaccounting.com/api/v1?wsdl'
&gt;&gt;&gt; client = Client(url, location='https://www.clarityaccounting.com/api/v1')
&gt;&gt;&gt; token = client.service.doLogin('demo', 'demo', 'www.kashoo.com', 'en_US', 300000)
&gt;&gt;&gt; token
(authToken){
   authenticationCode = "ObaicdMJZY6UM8xZ2wzGjicT0jQ="
   expiryDate = 2010-03-05 12:31:41.000698
   locale = "en_US"
   myUserId = 4163
   site = "www.kashoo.com"
 }
</snippet></ROW><ROW><id>2388590</id><snippet>logging</snippet></ROW><ROW><id>2388590</id><snippet>DEBUG</snippet></ROW><ROW><id>2388590</id><snippet>import logging
logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)
logging.getLogger('suds.transport').setLevel(logging.DEBUG)
logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG)
logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>2388590</id><snippet>DEBUG:suds.transport.http:sending:
URL:http://www.clarityaccounting.com/api/v1
(xml output omitted)
</snippet></ROW><ROW><id>2388590</id><snippet>DEBUG:suds.client:http failed:
</snippet></ROW><ROW><id>2389101</id><snippet>for f, v in customFields.iteritems():
  try:
    v = v()
  except TypeError:
    pass
  values.append(v)
</snippet></ROW><ROW><id>2389101</id><snippet>callable</snippet></ROW><ROW><id>2389101</id><snippet>__call__</snippet></ROW><ROW><id>2389490</id><snippet>LOG_DIR = '/tmp/'
LOG_LEVEL = 4
WSFC_HOME = '/opt/wso2/wsf_c'
END_POINT = 'http://localhost:9090/axis2/services/echo/echoString'

if __name__ == '__main__':
    message = """
    &lt;ns1:echoString xmlns:ns1="http://ws.apache.org/axis2/services/echo"&gt;
        &lt;text&gt;Hello World!&lt;/text&gt;
    &lt;/ns1:echoString&gt;
    """
    try:
        client = wso2.wsf.WSClient({
            'to':END_POINT,
            'WSF_LOG_DIR':LOG_DIR,
            'WSF_LOG_LEVEL':LOG_LEVEL,
            'WSFC_HOME':WSFC_HOME,
            })

        print 'Sending: ' + message

        response = client.request(message)

        if response is not None:
            print 'Respose: ' + response + '\n'
        else:
            print 'Error occurred!'
    except wso2.wsf.WSFault, e:
        print 'Exception occurred:'
        print e
</snippet></ROW><ROW><id>2389643</id><snippet>sampleString.decode("cp1255")</snippet></ROW><ROW><id>2389643</id><snippet>print sampleString.decode("cp1255")</snippet></ROW><ROW><id>2389643</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2389643</id><snippet>print sampleString.decode("cp1255").encode("utf-8")
</snippet></ROW><ROW><id>2389643</id><snippet>import sys
print sys.stdout.encoding
samplestring = '\xe0\xe1\xe2\xe3\xe4'
print samplestring.decode("cp1255").encode(sys.argv[1])
</snippet></ROW><ROW><id>2389643</id><snippet>$ python2.6 test.py utf-8
UTF-8
אבגדה

$ python2.6 test.py latin1
UTF-8
Traceback (most recent call last):
UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-4: ordinal not in range(256)

$ python2.6 test.py ascii
UTF-8
Traceback (most recent call last):
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128)

$ python2.6 test.py cp424
UTF-8
ABCDE

$ python2.6 test.py iso8859_8
UTF-8
�����
</snippet></ROW><ROW><id>2389643</id><snippet>encode</snippet></ROW><ROW><id>2389643</id><snippet>import sys
samplestring = '\xe0\xe1\xe2\xe3\xe4'
print "'{0}'".format(samplestring.decode("cp1255").encode(sys.argv[1], 
      sys.argv[2]))
</snippet></ROW><ROW><id>2389643</id><snippet>$ python2.6 test.py latin1 strict
Traceback (most recent call last):
  File "test.py", line 4, in &lt;module&gt;
    sys.argv[2]))
UnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-4: ordinal not in range(256)
[/tmp]
$ python2.6 test.py latin1 ignore
''
[/tmp]
$ python2.6 test.py latin1 replace
'?????'
[/tmp]
$ python2.6 test.py latin1 xmlcharrefreplace
'אבגדה'
[/tmp]
$ python2.6 test.py latin1 backslashreplace
'\u05d0\u05d1\u05d2\u05d3\u05d4'
</snippet></ROW><ROW><id>2389647</id><snippet>records = []</snippet></ROW><ROW><id>2389647</id><snippet>CsvSet</snippet></ROW><ROW><id>2389647</id><snippet>__init__</snippet></ROW><ROW><id>2389647</id><snippet>record = {}</snippet></ROW><ROW><id>2389647</id><snippet>Record</snippet></ROW><ROW><id>2389647</id><snippet>__init__</snippet></ROW><ROW><id>2389647</id><snippet>class Record:
    def __init__(self,lines):
        self.record = {}
        self.__parse()

class CsvSet:
    def __init__(self,lines):
        self.records = []
        self.__parse()
</snippet></ROW><ROW><id>2389647</id><snippet>__init__</snippet></ROW><ROW><id>2389762</id><snippet>#psudo code

class myFile(object):
    def __init__(self, filename):
        self.f = open(filename)

    def read(self, size=None):
        return self.f.next().replace('\x1e', '').replace('some other bad character...' ,'')


#iterparse
context = lxml.etree.iterparse(myFile('bigfile.xml', tag='RECORD')
</snippet></ROW><ROW><id>2390047</id><snippet>format</snippet></ROW><ROW><id>2390047</id><snippet>'{0:.3g}'.format(num)
</snippet></ROW><ROW><id>2390047</id><snippet>'%.3g'%(num)
</snippet></ROW><ROW><id>2390047</id><snippet>{0}</snippet></ROW><ROW><id>2390047</id><snippet>format</snippet></ROW><ROW><id>2390047</id><snippet>num</snippet></ROW><ROW><id>2390047</id><snippet>format_spec</snippet></ROW><ROW><id>2390047</id><snippet>.3</snippet></ROW><ROW><id>2390047</id><snippet>g</snippet></ROW><ROW><id>2390047</id><snippet>tests=[(1.00,'1'),
       (1.2,'1.2'),
       (1.23,'1.23'),
       (1.234,'1.23'),
       (1.2345,'1.23')]

for num,answer in tests:
    result='{0:.3g}'.format(num)
    if result != answer:
        print('Error: {0} --&gt; {1} != {2}'.format(num,result,answer))
        exit()
    else:
        print('{0} --&gt; {1}'.format(num,result))
</snippet></ROW><ROW><id>2390047</id><snippet>1.0 --&gt; 1
1.2 --&gt; 1.2
1.23 --&gt; 1.23
1.234 --&gt; 1.23
1.2345 --&gt; 1.23
</snippet></ROW><ROW><id>2390578</id><snippet>re.sub(r'''(?&lt;![^\t\n])\W*b(["'])(.*)\1\W*(?![^\t\n])''', r'\2', line)
</snippet></ROW><ROW><id>2390578</id><snippet>import re

pattern = re.compile(r'''(?&lt;![^\t\n])\W*b(["'])(.*?)\1\W*?(?![^\t\n])''')
with open('outfile', 'w') as outfile:
    for line in open('infile'):
        outfile.write(pattern.sub(r'\2', line))
</snippet></ROW><ROW><id>2390760</id><snippet>context = etree.iterparse(xmlfile, tag="yourSubTree")
action, elem = context.next()
etree.iterwalk(elem, ...)...
</snippet></ROW><ROW><id>2390889</id><snippet>logging.basicConfig(level=logging.DEBUG)</snippet></ROW><ROW><id>2390889</id><snippet>__getitem__</snippet></ROW><ROW><id>2390889</id><snippet>__setitem__</snippet></ROW><ROW><id>2390889</id><snippet>[]</snippet></ROW><ROW><id>2390889</id><snippet>DictWatch</snippet></ROW><ROW><id>2390889</id><snippet>d[key]</snippet></ROW><ROW><id>2390889</id><snippet>d.get()</snippet></ROW><ROW><id>2390889</id><snippet>d.set()</snippet></ROW><ROW><id>2391105</id><snippet>__import__</snippet></ROW><ROW><id>2391105</id><snippet>module = __import__(sys.argv[1])
</snippet></ROW><ROW><id>2391105</id><snippet>.py</snippet></ROW><ROW><id>2391105</id><snippet>__import__()</snippet></ROW><ROW><id>2391106</id><snippet>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; __warningregistry__
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
NameError: name '__warningregistry__' is not defined

&gt;&gt;&gt; warnings.simplefilter('error')
&gt;&gt;&gt; __warningregistry__
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
NameError: name '__warningregistry__' is not defined

&gt;&gt;&gt; warnings.warn('asdf')
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
UserWarning: asdf

&gt;&gt;&gt; __warningregistry__
{}
</snippet></ROW><ROW><id>2391106</id><snippet>&gt;&gt;&gt; warnings.simplefilter("ignore")
&gt;&gt;&gt; warnings.warn('asdf')
&gt;&gt;&gt; __warningregistry__
{('asdf', &lt;type 'exceptions.UserWarning'&gt;, 1): True}
&gt;&gt;&gt; warnings.simplefilter("error")
&gt;&gt;&gt; warnings.warn('asdf')
&gt;&gt;&gt; warnings.warn('qwerty')
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
UserWarning: qwerty
</snippet></ROW><ROW><id>2391124</id><snippet>source.nodeType == source.ELEMENT_NAME</snippet></ROW><ROW><id>2391243</id><snippet>job = Job.objects.get(pk=1)
array_result = serializers.serialize('json', [job], ensure_ascii=False)
just_object_result = array_result[1:-1]
</snippet></ROW><ROW><id>2391597</id><snippet>read_until</snippet></ROW><ROW><id>2391597</id><snippet>tn.read_until("User Name: ")
</snippet></ROW><ROW><id>2391597</id><snippet>tn.read_until(b"User Name: ")
</snippet></ROW><ROW><id>2391597</id><snippet>b"..."</snippet></ROW><ROW><id>2391638</id><snippet>Accept-Encoding: gzip</snippet></ROW><ROW><id>2391638</id><snippet>Content-Encoding: gzip</snippet></ROW><ROW><id>2391638</id><snippet>SOAPpy.SOAPProxy</snippet></ROW><ROW><id>2391638</id><snippet>HTTPTransport</snippet></ROW><ROW><id>2391638</id><snippet>data = response.read()</snippet></ROW><ROW><id>2391638</id><snippet>gzip</snippet></ROW><ROW><id>2391638</id><snippet>zlib</snippet></ROW><ROW><id>2391638</id><snippet>.gz</snippet></ROW><ROW><id>2391638</id><snippet>.gz</snippet></ROW><ROW><id>2391638</id><snippet>gzip</snippet></ROW><ROW><id>2391638</id><snippet>zlib</snippet></ROW><ROW><id>2391876</id><snippet>settings.py</snippet></ROW><ROW><id>2391876</id><snippet>from django.core.cache import cache

def some_view_that_accesses_date(request):
  my_data = cache.get('some_key')

  if my_data is None:
    my_data = MyObject.objects.all()
    cache.set('some_key', my_data)

  ... snip ... normal view code
</snippet></ROW><ROW><id>2391876</id><snippet>None</snippet></ROW><ROW><id>2391876</id><snippet>None</snippet></ROW><ROW><id>2391876</id><snippet>None</snippet></ROW><ROW><id>2391876</id><snippet>None</snippet></ROW><ROW><id>2391876</id><snippet>from django.core.cache import cache
from django.db.models.signals import post_save
from myapp.models import MyModel

def kill_object_cache(sender, **kwargs):
    cache.delete('some_key')

post_save.connect(kill_object_cache, sender=MyModel)
post_delete.connect(kill_object_cache, sender=MyModel)
</snippet></ROW><ROW><id>2391876</id><snippet>some_key</snippet></ROW><ROW><id>2392529</id><snippet>repr()</snippet></ROW><ROW><id>2392569</id><snippet>{% if forloop.counter|divisbleby:"15" %}
    &lt;div class="menu"&gt;abc&lt;/div&gt;
{% endif %}
</snippet></ROW><ROW><id>2392612</id><snippet>fh = file('/dev/input/mice')
while True:                 
    fh.read(3)
    print 'Mouse moved!'
</snippet></ROW><ROW><id>2392803</id><snippet>&gt;&gt;&gt; oacute_latin1 = "\xF3"
&gt;&gt;&gt; oacute_unicode = oacute_latin1.decode('latin1')
&gt;&gt;&gt; oacute_utf8 = oacute_unicode.encode('utf8')
&gt;&gt;&gt; print repr(oacute_latin1)
'\xf3'
&gt;&gt;&gt; print repr(oacute_unicode)
u'\xf3'
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name(oacute_unicode)
'LATIN SMALL LETTER O WITH ACUTE'
&gt;&gt;&gt; print repr(oacute_utf8)
'\xc3\xb3'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2392803</id><snippet>&gt;&gt;&gt; unicode("\xF3")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xf3 in position 0: ordinal
not in range(128)
&gt;&gt;&gt; "\xF3".decode('latin1')
u'\xf3'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2392803</id><snippet>u'\xf3' == '\xF3'.decode('latin1')</snippet></ROW><ROW><id>2392803</id><snippet>unicode(str_object, encoding)</snippet></ROW><ROW><id>2392803</id><snippet>str_object.decode(encoding)</snippet></ROW><ROW><id>2392803</id><snippet>print repr(your_data[:400])</snippet></ROW><ROW><id>2392942</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2392942</id><snippet>&gt;&gt;&gt; [(g[0], len(list(g[1]))) for g in itertools.groupby(['a', 'a', 'b', 'b', 'b'])]
[('a', 2), ('b', 3)]
</snippet></ROW><ROW><id>2392957</id><snippet>aa = {'ALA':'A'}
test = ['ALA']  ### note this is now a list!

for i in test:
    if i in aa:
        print i, aa[i]  #### note i is the key, aa[i] is the value
</snippet></ROW><ROW><id>2392957</id><snippet>aa.iteritems()   # tuples of (key, value)
                 # ('ALA', 'A')
aa.iterkeys()    # keys only -- equivalent to just making an iterator directly from aa
                 # 'ALA'
aa.itervalues()  # items only
                 # 'A'
</snippet></ROW><ROW><id>2393027</id><snippet>animal</snippet></ROW><ROW><id>2393027</id><snippet>animal.dog</snippet></ROW><ROW><id>2393155</id><snippet>set foldmethod=indent
</snippet></ROW><ROW><id>2393229</id><snippet>bash</snippet></ROW><ROW><id>2393229</id><snippet>alias python=python2.4</snippet></ROW><ROW><id>2393229</id><snippet>2.4</snippet></ROW><ROW><id>2393328</id><snippet>import random
import string

minLength = 5 # the minimum length of the string.
maxLength = 15 # the maximum length of the string

randstring = string.join([random.choice(string.lowercase)
    for i in range(random.randrange(minlength,maxlength+1))], '')
</snippet></ROW><ROW><id>2393395</id><snippet>history=whatever</snippet></ROW><ROW><id>2393395</id><snippet>Browser</snippet></ROW><ROW><id>2393395</id><snippet>None</snippet></ROW><ROW><id>2393395</id><snippet>History</snippet></ROW><ROW><id>2393395</id><snippet>back</snippet></ROW><ROW><id>2393395</id><snippet>reload</snippet></ROW><ROW><id>2393395</id><snippet>class NoHistory(object):
  def add(self, *a, **k): pass
  def clear(self): pass

b = mechanize.Browser(history=NoHistory())
</snippet></ROW><ROW><id>2393395</id><snippet>NoHistory</snippet></ROW><ROW><id>2393395</id><snippet>back</snippet></ROW><ROW><id>2393395</id><snippet>reload</snippet></ROW><ROW><id>2393395</id><snippet>b._history</snippet></ROW><ROW><id>2393480</id><snippet>unittest</snippet></ROW><ROW><id>2393480</id><snippet>unittest</snippet></ROW><ROW><id>2393480</id><snippet>unittest</snippet></ROW><ROW><id>2393480</id><snippet>subprocess</snippet></ROW><ROW><id>2393480</id><snippet>setUp</snippet></ROW><ROW><id>2393480</id><snippet>tearDown</snippet></ROW><ROW><id>2393492</id><snippet>with open(file1) as f1:
  with open(file2) as f2:
    for line1, line2 in itertools.izip(f1, f2):
      if line1 != line2:
        print 'files are different'
        break
</snippet></ROW><ROW><id>2393492</id><snippet>zip</snippet></ROW><ROW><id>2393492</id><snippet>zip</snippet></ROW><ROW><id>2393492</id><snippet>itertools.izip</snippet></ROW><ROW><id>2393511</id><snippet>pyfacebook</snippet></ROW><ROW><id>2393571</id><snippet>class MainPage(BaseHandler):
</snippet></ROW><ROW><id>2393571</id><snippet>class MainPage(BaseHandler.BaseHandler):
</snippet></ROW><ROW><id>2393571</id><snippet>import BaseHandler
</snippet></ROW><ROW><id>2393571</id><snippet>from BaseHandler import BaseHandler
</snippet></ROW><ROW><id>2393857</id><snippet>random.choice</snippet></ROW><ROW><id>2393857</id><snippet>import random

d =[random.choice('ACUG') for x in xrange(3355)]
s = "".join(d)

print s
</snippet></ROW><ROW><id>2393857</id><snippet>s = "".join(random.choice('ACUG') for x in xrange(3355))
</snippet></ROW><ROW><id>2393919</id><snippet>import itertools
x = {"a": 600, "b": 75, "c": 75, "d": 90}
[(k, len(list(v))) for k, v in itertools.groupby(x.values())]
</snippet></ROW><ROW><id>2394377</id><snippet>location /tracking {
  empty_gif;
}
</snippet></ROW><ROW><id>2394377</id><snippet>log_format tracking '$remote_addr "$request" "$http_referer" $arg_param $upstream_x_track_id';

location /tracking {
  access_log /var/log/tracking.log tracking buffer=16k;
  proxy_pass http://upstream;
}
</snippet></ROW><ROW><id>2394377</id><snippet>proxy_cache_path /var/cache/nginx/cache_tracking keys_zone=tracking:20m;

location /tracking {
  access_log /var/log/tracking.log tracking buffer=16k;
  proxy_cache tracking;
  proxy_cache_valid 200 1m; # Cache responses with code 200 for 1 minute
  proxy_pass http://upstream;
}
</snippet></ROW><ROW><id>2394377</id><snippet>location /tracking {
  access_log /var/log/tracking.log tracking buffer=16k;
  proxy_cache_key $upstream_x_track_id;
  proxy_cache tracking;
  proxy_cache_valid 200 1m; # Cache responses with code 200 for 1 minute
  proxy_hide_header X-Track_Id;
  proxy_pass http://upstream;
}
</snippet></ROW><ROW><id>2394383</id><snippet>from lxml.html import fromstring
this1_tree=fromstring(this1)
all_cells=[(item[0], item[1]) for item in enumerate(this1_tree.cssselect('td'))] # I am hoping this gives you the cells with their relative position in the document)
</snippet></ROW><ROW><id>2394383</id><snippet>the_cell_before_numbers=[]
for cell in all_cells:
    if 'Item' in cell[1].text_content():
        the_cell_before_numbers.append(cell[0])
</snippet></ROW><ROW><id>2394383</id><snippet>todays_price=all_cells[the_cell_before_number+1][1].text_content()
</snippet></ROW><ROW><id>2394416</id><snippet>2.*</snippet></ROW><ROW><id>2394416</id><snippet>size</snippet></ROW><ROW><id>2394416</id><snippet>data</snippet></ROW><ROW><id>2394416</id><snippet>return</snippet></ROW><ROW><id>2394416</id><snippet>yield</snippet></ROW><ROW><id>2394416</id><snippet>data</snippet></ROW><ROW><id>2394416</id><snippet>self.data</snippet></ROW><ROW><id>2394416</id><snippet>self.data</snippet></ROW><ROW><id>2394416</id><snippet>size</snippet></ROW><ROW><id>2394416</id><snippet>class MySender(object):
  def __init__(self, data):
    self.data = data
    self.i = 0
    self.rest = 0
  def readfunction(self, size):
    if self.i &gt;= len(self.data):
      return ''
    result = self.data[self.i][self.rest:self.rest+size]
    self.rest += size
    if self.rest &gt;= len(self.data[self.i]):
      self.i += 1
      self.rest = 0
</snippet></ROW><ROW><id>2394416</id><snippet>struct</snippet></ROW><ROW><id>2394416</id><snippet>array</snippet></ROW><ROW><id>2394454</id><snippet>render to string</snippet></ROW><ROW><id>2394454</id><snippet>render_to_response</snippet></ROW><ROW><id>2394641</id><snippet>MONDAY, ...., SATURDAY = range(7)
JAN, ....., DEC = range(1, 12)

Holiday("Martin L King's Birthday", type='floating',
    ordinal=3, weekday=MON, month=JAN)
Holiday("Memorial Day", type='floating',
    ordinal=-1, weekday=MON, month=MAY)
</snippet></ROW><ROW><id>2394641</id><snippet>Holiday("Good Friday", type='moveable',
    base='gregorian_easter', delta_days=-2)
Holiday("Easter Monday", etc, delta_days=1)
# Some states in Australia used to have Easter Tuesday (no kidding)
Holiday("Easter Tuesday", etc, delta_days=2)
</snippet></ROW><ROW><id>2394641</id><snippet># Americans will get a day off on Friday 31 Dec 2010
# because 1 Jan 2011 is a Saturday.
Holiday("New Year's Day", type='fixed',
    day=1, month=JAN, sat_adj=-1, sun_adj=????)

# Australia observes ANZAC Day on the day, with no day off
# if the fixed date falls on a weekend.
Holiday("ANZAC Day", type='fixed', day=25, month=APR, sat_adj=0, sun_adj=0)

# Two consecutive "fixed" holidays is OK; three would need re-thinking.
# Australia again:
Holiday("Christmas Day", type='fixed', day=25, month=DEC, sat_adj=2, sun_adj=1)
Holiday("Boxing Day",    type='fixed', day=26, month=DEC, sat_adj=2, sun_adj=2)
</snippet></ROW><ROW><id>2394678</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>2394678</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>2394678</id><snippet>response = br.response()
response.set_data(response.get_data().replace("&lt;br/&gt;", "&lt;br /&gt;")) #Python mechanize is broken, fixing it.
br.set_response(response)
</snippet></ROW><ROW><id>2394678</id><snippet>re.sub()</snippet></ROW><ROW><id>2394678</id><snippet>/&gt;</snippet></ROW><ROW><id>2394937</id><snippet>SELECT * 
FROM mytable 
WHERE name LIKE 'matt%' OR name LIKE '[ ,-/]matt%'
</snippet></ROW><ROW><id>2394937</id><snippet>[^A-Z0-9]</snippet></ROW><ROW><id>2394937</id><snippet>O'Brian</snippet></ROW><ROW><id>2394937</id><snippet>brian</snippet></ROW><ROW><id>2394937</id><snippet>name</snippet></ROW><ROW><id>2394937</id><snippet>SELECT *</snippet></ROW><ROW><id>2395167</id><snippet>elif</snippet></ROW><ROW><id>2395167</id><snippet>else</snippet></ROW><ROW><id>2395167</id><snippet>def function(a):
    if a == '1':
        print('1a')
    elif a == '2':
        print('2a')
    else:
        print('3a')

function(input('input:'))
</snippet></ROW><ROW><id>2395230</id><snippet>.id()</snippet></ROW><ROW><id>2395230</id><snippet>id()</snippet></ROW><ROW><id>2395557</id><snippet>make -j</snippet></ROW><ROW><id>2395669</id><snippet>from os.path import dirname,realpath
sys.path.append(dirname(dirname(realpath(__file__))))
</snippet></ROW><ROW><id>2395674</id><snippet>return render(
    request, 
    template,
    {
        'var1' : value1,
        'var2' : value2,
        'var3' : value3
    }
)
</snippet></ROW><ROW><id>2395674</id><snippet>render(</snippet></ROW><ROW><id>2395875</id><snippet>if line and line[0].isalpha():
</snippet></ROW><ROW><id>2395957</id><snippet>class Author(Entity):
    first_name = Field(Unicode(64))
    last_name = Field(Unicode(64))

class Article(Entity):
    title = Field(Unicode(64))

class Category(Entity):
    name = Field(Unicode(64))
</snippet></ROW><ROW><id>2396158</id><snippet>"""
This is the xyz package.
"""
</snippet></ROW><ROW><id>2396247</id><snippet>with open("data.txt") as myfile:
    for line in myfile:
        do_something(line.rstrip("\n"))
</snippet></ROW><ROW><id>2396247</id><snippet>myfile = open("data.txt")
for line in myfile:
    do_something(line.rstrip("\n"))
</snippet></ROW><ROW><id>2396247</id><snippet>.rstrip("\n")</snippet></ROW><ROW><id>2396277</id><snippet>/dev/random</snippet></ROW><ROW><id>2396277</id><snippet>f = open("/dev/random","rb")
rnd_str = f.read(4)
</snippet></ROW><ROW><id>2396277</id><snippet>import struct
rand_int = struct.unpack('I', rnd_string)[0]
</snippet></ROW><ROW><id>2396277</id><snippet>rand_int = 0
for c in rnd_str:
    rand_int &lt;&lt;= 8
    rand_int += ord(c)
</snippet></ROW><ROW><id>2396301</id><snippet>-WindowStyle</snippet></ROW><ROW><id>2396497</id><snippet>edited_page = CP     
edited_page.title = title
edited_page.content = content
edited_page.type = type
edited_page.reference = reference
edited_page.template = template

edited_page.put()
</snippet></ROW><ROW><id>2396944</id><snippet>&gt;&gt;&gt; x = 'Ingl\xeas'
&gt;&gt;&gt; print x.decode('latin1')
Inglês
</snippet></ROW><ROW><id>2396949</id><snippet>User-agent</snippet></ROW><ROW><id>2397020</id><snippet>def del_A(name):
    print('An A deleted:' + name)

class A(object):
    def __init__(self, name, finalizers):
        print('A created')
        self.name = name
        finalizers.append(weakref.ref(self, lambda wr, n = self.name: del_A(n)))

class B(object):
    def __init__(self):
        print('B created')

def do_work(finalizers):
    a = A('a1', finalizers)
    b = B()
    a.other = b
    b.other = a

if __name__ == '__main__':
    finalizers = []
    do_work(finalizers)
</snippet></ROW><ROW><id>2397020</id><snippet>A created
B created
An A deleted:a1
</snippet></ROW><ROW><id>2397066</id><snippet>.</snippet></ROW><ROW><id>2397066</id><snippet>sys.path</snippet></ROW><ROW><id>2397066</id><snippet>models</snippet></ROW><ROW><id>2397066</id><snippet>.</snippet></ROW><ROW><id>2397189</id><snippet>import lxml.etree

example_doc = """
  &lt;root&gt;
    &lt;a name="listofplaces"/&gt;
    text
    &lt;sibling/&gt;
    &lt;sibling/&gt;
    &lt;a name="transport"/&gt;
  &lt;/root&gt;
"""
root = lxml.etree.XML(example_doc)

new_root = lxml.etree.Element("root")
it = iter(root)
for e in it:
  if e.tag == "a" and e.get("name") == "listofplaces":
    new_root.text = e.tail
    break
else:
  assert False, "TODO: handle tag not found"
for e in it:
  if e.tag == "a" and e.get("name") == "transport":
    break
  new_root.append(e)
else:
  assert False, "TODO: handle tag not found"

print lxml.etree.tostring(new_root)
</snippet></ROW><ROW><id>2397192</id><snippet>bar = []
for item in some_iterable:
    bar.append(SOME EXPRESSION)
</snippet></ROW><ROW><id>2397192</id><snippet>bar = [SOME EXPRESSION for item in some_iterable]
</snippet></ROW><ROW><id>2397192</id><snippet>twod_list = []                                       \                      
for i in range (0, 10):                               \
    new = []                  \ can be replaced        } this too
    for j in range (0, 10):    } with a list          /
        new.append(foo)       / comprehension        /
    twod_list.append(new)                           /
</snippet></ROW><ROW><id>2397305</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>2397305</id><snippet>&lt;form method="GET" action="http://www.google.com/u/ritaj"&gt;
</snippet></ROW><ROW><id>2397305</id><snippet>forms = ClientForms.ParseResponseEx(response)
</snippet></ROW><ROW><id>2397305</id><snippet>forms[0]</snippet></ROW><ROW><id>2397305</id><snippet>&gt;&gt;&gt; f = forms[0]
&gt;&gt;&gt; [c.name for c in f.controls]
['q', 'sitesearch', 'sa', 'domains', 'form:mode', 'form:id', '__confirmed_p', '__refreshing_p', 'return_url', 'time', 'token_id', 'hash', 'username', 'password', 'persistent_p', 'formbutton:ok']
</snippet></ROW><ROW><id>2397305</id><snippet>username</snippet></ROW><ROW><id>2397305</id><snippet>password</snippet></ROW><ROW><id>2397305</id><snippet>f</snippet></ROW><ROW><id>2397305</id><snippet>raw_input</snippet></ROW><ROW><id>2397305</id><snippet>str()</snippet></ROW><ROW><id>2397334</id><snippet>SPIDER_MANAGER_CLASS = 'mybot.spidermanager.MySpiderManager'
</snippet></ROW><ROW><id>2397334</id><snippet>from mybot.spider import MyParametrizedSpider

class MySpiderManager(object):
    loaded = True

    def fromdomain(self, name):
        start_urls, extra_domain_names, regexes = self._get_spider_info(name)
        return MyParametrizedSpider(name, start_urls, extra_domain_names, regexes)

    def close_spider(self, spider):
        # Put here code you want to run before spiders is closed
        pass

    def _get_spider_info(self, name):
        # query your backend (maybe a sqldb) using `name` as primary key, 
        # and return start_urls, extra_domains and regexes
        ...
        return (start_urls, extra_domains, regexes)
</snippet></ROW><ROW><id>2397334</id><snippet>from scrapy.spider import BaseSpider

class MyParametrizedSpider(BaseSpider):

    def __init__(self, name, start_urls, extra_domain_names, regexes):
        self.domain_name = name
        self.start_urls = start_urls
        self.extra_domain_names = extra_domain_names
        self.regexes = regexes

     def parse(self, response):
         ...
</snippet></ROW><ROW><id>2397334</id><snippet>./scrapy-ctl.py crawl &lt;name&gt;</snippet></ROW><ROW><id>2397334</id><snippet>name</snippet></ROW><ROW><id>2397363</id><snippet>.yaml</snippet></ROW><ROW><id>2397363</id><snippet>.yaml</snippet></ROW><ROW><id>2397487</id><snippet>items = Item.all().order('name').fetch(10)
headers = ['Name', 'Price', 'Quantity']
viewitems = [[getattr(x, h) for h in headers] for x in items]

template_values = {'items': viewitems,
                   'headers': headers}
render('Views/table.html', self, template_values)
</snippet></ROW><ROW><id>2397564</id><snippet>#!/usr/bin/env python
# coding: utf-8
"""
    package.module
    ~~~~~~~~~~~~~

    A description which can be long and explain the complete
    functionality of this module even with indented code examples.
    Class/Function however should not be documented here.

    :copyright: year by my name, see AUTHORS for more details
    :license: license_name, see LICENSE for more details
"""
</snippet></ROW><ROW><id>2397564</id><snippet>main</snippet></ROW><ROW><id>2397838</id><snippet>Axes</snippet></ROW><ROW><id>2397838</id><snippet>add_subplot</snippet></ROW><ROW><id>2397838</id><snippet>import</snippet></ROW><ROW><id>2397838</id><snippet>show</snippet></ROW><ROW><id>2397838</id><snippet>import matplotlib.pyplot as plt
f1 = plt.figure()
f2 = plt.figure()
ax1 = f1.add_subplot(111)
ax1.plot(range(0,10))
ax2 = f2.add_subplot(111)
ax2.plot(range(10,20))
plt.show()
</snippet></ROW><ROW><id>2397838</id><snippet>add_axes</snippet></ROW><ROW><id>2397838</id><snippet>ax1 = f1.add_axes([0.1,0.1,0.8,0.8])
ax1.plot(range(0,10))
ax2 = f2.add_axes([0.1,0.1,0.8,0.8])
ax2.plot(range(10,20))
</snippet></ROW><ROW><id>2398242</id><snippet>import datetime
lastplus = q.get()
if lastplus.date &lt; datetime.datetime.now()-datetime.timedelta(seconds=20):
    print "Go"
</snippet></ROW><ROW><id>2398409</id><snippet>maxlength</snippet></ROW><ROW><id>2398409</id><snippet>max_length</snippet></ROW><ROW><id>2398430</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>2398430</id><snippet>html5lib</snippet></ROW><ROW><id>2398430</id><snippet>from html5lib import HTMLParser, treebuilders

parser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))

text = "a&lt;b&gt;b&lt;b&gt;c"
soup = parser.parse(text)
print soup.prettify()
</snippet></ROW><ROW><id>2398430</id><snippet>&lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  a
  &lt;b&gt;
   b
   &lt;b&gt;
    c
   &lt;/b&gt;
  &lt;/b&gt;
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2398483</id><snippet>char[] {0x04H, 0xfe, 0x13}</snippet></ROW><ROW><id>2398696</id><snippet>body</snippet></ROW><ROW><id>2398696</id><snippet>get</snippet></ROW><ROW><id>2398696</id><snippet>class Detail(BaseHandler):
    def body(self, **kwargs):
        print kwargs['CSIN']

class MainPage(BaseHandler):
    def body(self, **kwargs): # can ignore kwargs

class Cart(BaseHandler):
    def body(self, **kwargs): # can ignore kwargs

class BaseHandler(webapp.RequestHandler):
    def get(self, CSIN=None):
        self.body(CSIN = CSIN, some_new_arg = 3)

class SomeNewHandler(BaseHandler):
    def body(self, **kwargs):
        print kwargs['some_new_arg']
</snippet></ROW><ROW><id>2398696</id><snippet>body</snippet></ROW><ROW><id>2398696</id><snippet>self</snippet></ROW><ROW><id>2398773</id><snippet>setup(...)</snippet></ROW><ROW><id>2398773</id><snippet>ext_modules</snippet></ROW><ROW><id>2398773</id><snippet>try</snippet></ROW><ROW><id>2398773</id><snippet>try:
  setup(..., ext_modules=...)
except SystemExit: ...
</snippet></ROW><ROW><id>2398773</id><snippet>except</snippet></ROW><ROW><id>2398773</id><snippet>setup(...)</snippet></ROW><ROW><id>2398773</id><snippet>ext_modules</snippet></ROW><ROW><id>2398773</id><snippet>setup.py</snippet></ROW><ROW><id>2398773</id><snippet>sys.version</snippet></ROW><ROW><id>2398773</id><snippet>'IronPython'</snippet></ROW><ROW><id>2398773</id><snippet>ext_modules</snippet></ROW><ROW><id>2398789</id><snippet>mydata = data()
</snippet></ROW><ROW><id>2398789</id><snippet>mydata.add('yes')
</snippet></ROW><ROW><id>2399001</id><snippet>lim</snippet></ROW><ROW><id>2399001</id><snippet>limit</snippet></ROW><ROW><id>2399001</id><snippet>sieve = [False]*limit</snippet></ROW><ROW><id>2399001</id><snippet>limit-1</snippet></ROW><ROW><id>2399001</id><snippet>if (n &lt;= limit) and (n % 12 == 1 or n % 12 == 5):
</snippet></ROW><ROW><id>2399001</id><snippet>n&lt;=limit</snippet></ROW><ROW><id>2399001</id><snippet>n==limit</snippet></ROW><ROW><id>2399001</id><snippet>sieve[n]</snippet></ROW><ROW><id>2399001</id><snippet>limit</snippet></ROW><ROW><id>2399001</id><snippet>sieve = [False]*(limit+1)
</snippet></ROW><ROW><id>2399001</id><snippet>sieve = [False]*limit</snippet></ROW><ROW><id>2399001</id><snippet>sieve</snippet></ROW><ROW><id>2399001</id><snippet>sieve[n]</snippet></ROW><ROW><id>2399001</id><snippet>sieve[n-1]</snippet></ROW><ROW><id>2399001</id><snippet>factor = int(math.sqrt(limit))
</snippet></ROW><ROW><id>2399001</id><snippet>int</snippet></ROW><ROW><id>2399001</id><snippet>math.sqrt(limit)</snippet></ROW><ROW><id>2399001</id><snippet>range(1,factor)</snippet></ROW><ROW><id>2399001</id><snippet>factor = int(math.sqrt(limit))+1
</snippet></ROW><ROW><id>2399001</id><snippet>def AtkinSieve (limit):
    results = [2,3,5]
    sieve = [False]*(limit+1)
    factor = int(math.sqrt(limit))+1
    for i in range(1,factor):
        for j in range(1, factor):
            n = 4*i**2+j**2
            if (n &lt;= limit) and (n % 12 == 1 or n % 12 == 5):
                sieve[n] = not sieve[n]
            n = 3*i**2+j**2
            if (n &lt;= limit) and (n % 12 == 7):
                sieve[n] = not sieve[n]
            if i&gt;j:
                n = 3*i**2-j**2
                if (n &lt;= limit) and (n % 12 == 11):
                    sieve[n] = not sieve[n]
    for index in range(5,factor):
        if sieve[index]:
            for jndex in range(index**2, limit, index**2):
                sieve[jndex] = False
    for index in range(7,limit):
        if sieve[index]:
            results.append(index)
    return results
</snippet></ROW><ROW><id>2399122</id><snippet>&gt;&gt;&gt; ','.join(map(str,a))
'1,2,3'
</snippet></ROW><ROW><id>2399145</id><snippet>threading.Timer</snippet></ROW><ROW><id>2399145</id><snippet>.enter</snippet></ROW><ROW><id>2399145</id><snippet>sched</snippet></ROW><ROW><id>2399145</id><snippet>def periodic(scheduler, interval, action, actionargs=()):
  scheduler.enter(interval, 1, periodic,
                  (scheduler, interval, action, actionargs))
  action(*actionargs)
</snippet></ROW><ROW><id>2399145</id><snippet>periodic(scheduler, 3600, query_rate_limit)
</snippet></ROW><ROW><id>2399145</id><snippet>threading.Timer</snippet></ROW><ROW><id>2399233</id><snippet>&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; list = [a]
&gt;&gt;&gt; print list
[[1]]
&gt;&gt;&gt; a[:] = [2]
&gt;&gt;&gt; print list
[[2]]
</snippet></ROW><ROW><id>2399233</id><snippet>a - ...</snippet></ROW><ROW><id>2399233</id><snippet>a</snippet></ROW><ROW><id>2399233</id><snippet>a[:] = ...</snippet></ROW><ROW><id>2399233</id><snippet>a</snippet></ROW><ROW><id>2399332</id><snippet>super()</snippet></ROW><ROW><id>2399332</id><snippet>class A(object):
 def __init__(self):
   print "world"

class B(A):
 def __init__(self):
   print "hello"
   super(B, self).__init__()

B()
</snippet></ROW><ROW><id>2399439</id><snippet>if os.path.exists("myWxApplication.exe"):
     self.SetIcon(wx.Icon("myWxApplication.exe",wx.BITMAP_TYPE_ICO))
</snippet></ROW><ROW><id>2399442</id><snippet>elif process.loop(i, len(list_i) != 'repeat':
</snippet></ROW><ROW><id>2399442</id><snippet>)</snippet></ROW><ROW><id>2399442</id><snippet>!=</snippet></ROW><ROW><id>2400193</id><snippet>__rlshift__</snippet></ROW><ROW><id>2400193</id><snippet>__lshift__</snippet></ROW><ROW><id>2400201</id><snippet>string_o = ""</snippet></ROW><ROW><id>2400201</id><snippet>string_o = ()</snippet></ROW><ROW><id>2400201</id><snippet>string_o</snippet></ROW><ROW><id>2400201</id><snippet>()</snippet></ROW><ROW><id>2400577</id><snippet>import re

s = 'Спорт not russianA'
d = {
'Спорт':'Досуг',
'russianA':'englishA'
}

pattern = re.compile(r'\b(' + '|'.join(d.keys()) + r')\b')
result = pattern.sub(lambda x: d[x.group()], s)
# Output: 'Досуг not englishA'
</snippet></ROW><ROW><id>2400577</id><snippet>pattern = re.compile('|'.join(d.keys()))
</snippet></ROW><ROW><id>2400601</id><snippet>__concat__</snippet></ROW><ROW><id>2400601</id><snippet>__add__</snippet></ROW><ROW><id>2400641</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>2400861</id><snippet>with open("thecounter.data","r") as counter:
    count= int( counter.read() )

count += 1
</snippet></ROW><ROW><id>2400861</id><snippet>settings= {}
execfile( "thecounter.py", settings )
count = settings['count']
</snippet></ROW><ROW><id>2400861</id><snippet>count = someNumber</snippet></ROW><ROW><id>2400861</id><snippet>import os
def numbers( path ):
    for filename in os.listdir(path):
        name, _ = os.path.splitext()
        yield int(name[4:])
count = max( numbers( '/path/to/files' ) )

count += 1
</snippet></ROW><ROW><id>2400875</id><snippet>&gt;&gt;&gt; t
[1, 3, 6]
&gt;&gt;&gt; [j-i for i, j in zip(t[:-1], t[1:])]  # or use itertools.izip in py2k
[2, 3]
</snippet></ROW><ROW><id>2401128</id><snippet>Popen(['/bin/sh', '-c', args[0], args[1], ...])
</snippet></ROW><ROW><id>2401128</id><snippet>Popen(['/bin/sh', '-c', 'du', '-s', '-b', maildir])
</snippet></ROW><ROW><id>2401128</id><snippet>-s</snippet></ROW><ROW><id>2401128</id><snippet>-b</snippet></ROW><ROW><id>2401128</id><snippet>maildir</snippet></ROW><ROW><id>2401128</id><snippet>du</snippet></ROW><ROW><id>2401128</id><snippet>shell=True</snippet></ROW><ROW><id>2401128</id><snippet>size = subprocess.Popen(['du', '-s', '-b', maildir],
                    stdout=subprocess.PIPE).communicate()[0].split()[0]
</snippet></ROW><ROW><id>2401128</id><snippet>size = subprocess.Popen('du -s -b "%s"' % maildir, shell=True,
                    stdout=subprocess.PIPE).communicate()[0].split()[0]
</snippet></ROW><ROW><id>2401181</id><snippet>after</snippet></ROW><ROW><id>2401181</id><snippet>after</snippet></ROW><ROW><id>2401181</id><snippet># for python 3.x use 'tkinter' rather than 'Tkinter'
import Tkinter as tk
import time

class App():
    def __init__(self):
        self.root = tk.Tk()
        self.label = tk.Label(text="")
        self.label.pack()
        self.update_clock()
        self.root.mainloop()

    def update_clock(self):
        now = time.strftime("%H:%M:%S")
        self.label.configure(text=now)
        self.root.after(1000, self.update_clock)

app=App()
app.mainloop()
</snippet></ROW><ROW><id>2401181</id><snippet>after</snippet></ROW><ROW><id>2401206</id><snippet>coverage xml -i</snippet></ROW><ROW><id>2401385</id><snippet>python -c "import code; code.interact(local=locals())"
</snippet></ROW><ROW><id>2401385</id><snippet>local</snippet></ROW><ROW><id>2401385</id><snippet>interact</snippet></ROW><ROW><id>2401385</id><snippet>locals()</snippet></ROW><ROW><id>2401385</id><snippet>python -c "import mymodule, code; code.interact(local=locals())"
</snippet></ROW><ROW><id>2401520</id><snippet>def primeList(n, i=2, acc=None):
    return i &gt; n and (acc or []) or primeList(n, i+1, (acc or []) + (isPrime(i) and [i] or []))
</snippet></ROW><ROW><id>2401520</id><snippet>print sum(n for n in xrange(2, 2000001) if all(n % i for i in xrange(2, int(n**0.5)+1)))
</snippet></ROW><ROW><id>2401610</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2401610</id><snippet>mod_python</snippet></ROW><ROW><id>2401655</id><snippet>import os

curpath = os.path.abspath(os.curdir)
packet_file = "%s/%s/%s/%s.mol2" % ("dir", "dir2", "dir3", "some_file")
print "Current path is: %s" % (curpath)
print "Trying to open: %s" % (os.path.join(curpath, packet_file))

packetFile = open(packet_file, "w")
</snippet></ROW><ROW><id>2401855</id><snippet>important_airports = (airport for airport in airports if airport.is_important)
for airport in important_airports:
    # do stuff
</snippet></ROW><ROW><id>2401864</id><snippet>json</snippet></ROW><ROW><id>2401864</id><snippet>simplejson</snippet></ROW><ROW><id>2401864</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>2401864</id><snippet>dump()</snippet></ROW><ROW><id>2401864</id><snippet>dumps()</snippet></ROW><ROW><id>2401864</id><snippet>codecs</snippet></ROW><ROW><id>2401881</id><snippet>clean</snippet></ROW><ROW><id>2401881</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>2401881</id><snippet>int</snippet></ROW><ROW><id>2401881</id><snippet>pk</snippet></ROW><ROW><id>2401881</id><snippet>SomeChoice</snippet></ROW><ROW><id>2401881</id><snippet>invalid</snippet></ROW><ROW><id>2401881</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>2401881</id><snippet>choice</snippet></ROW><ROW><id>2401881</id><snippet>to_field_name</snippet></ROW><ROW><id>2401881</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>2401881</id><snippet>__init__</snippet></ROW><ROW><id>2401927</id><snippet>&gt;&gt;&gt; x=['a','a','b','c','c','c']
&gt;&gt;&gt; map(x.count,x)
[2, 2, 1, 3, 3, 3]
&gt;&gt;&gt; dict(zip(x,map(x.count,x)))
{'a': 2, 'c': 3, 'b': 1}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2402316</id><snippet>Record 1:     Format(80A1)
</snippet></ROW><ROW><id>2402316</id><snippet>Record 6:     Format(2(I5,I10),2(1X,10A1,I10,I4))
</snippet></ROW><ROW><id>2402316</id><snippet>easy_install -U fortranformat</snippet></ROW><ROW><id>2402429</id><snippet>tw2.core</snippet></ROW><ROW><id>2402606</id><snippet>
perl -p -i -e 's/\.x/\.7/' foo.log
</snippet></ROW><ROW><id>2402653</id><snippet>alist, blist, clist, dlist, elist = ([] for i in range(5))
</snippet></ROW><ROW><id>2402653</id><snippet>=</snippet></ROW><ROW><id>2402653</id><snippet>range</snippet></ROW><ROW><id>2402653</id><snippet>alist, blist, clist, dlist, elist = [[]] * 5
</snippet></ROW><ROW><id>2402653</id><snippet>alist = blist = clist = dlist = elist = []
</snippet></ROW><ROW><id>2402912</id><snippet>__init__</snippet></ROW><ROW><id>2402912</id><snippet>def __init__(self, l=None):
    self.l = [] if l is None else l
</snippet></ROW><ROW><id>2403724</id><snippet>dict</snippet></ROW><ROW><id>2403724</id><snippet>dict</snippet></ROW><ROW><id>2403724</id><snippet>subdict = dict((k, v) for k, v in myDict.iteritems() if v.field2 &gt;= 2)
</snippet></ROW><ROW><id>2404471</id><snippet>__del__</snippet></ROW><ROW><id>2404471</id><snippet>with</snippet></ROW><ROW><id>2404471</id><snippet>def read_contents(file_path):
  with open(file_path, 'r') as f:
    return f.read()
</snippet></ROW><ROW><id>2404797</id><snippet>A.diagonal()</snippet></ROW><ROW><id>2404797</id><snippet>csr_matrix(eye(n,n))</snippet></ROW><ROW><id>2404990</id><snippet>jabber.RegisterHandler('presence', myPresenceHandler)

def myPresenceHandler(self, con, event):
  fromjid = event.getFrom().getStripped()
  status = myroster.getStatus(fromjid)
</snippet></ROW><ROW><id>2404990</id><snippet>jabber.Process()</snippet></ROW><ROW><id>2405126</id><snippet> BLOCKSIZE = 1024*1024
 with open(tmpfile, 'rb') as inf:
   with open(tmpfile, 'wb') as ouf:
     while True:
       data = inf.read(BLOCKSIZE)
       if not data: break
       converted = data.decode('latin1').encode('utf-8')
       ouf.write(converted)
</snippet></ROW><ROW><id>2405126</id><snippet>\n</snippet></ROW><ROW><id>2405300</id><snippet>yourString.isspace()
</snippet></ROW><ROW><id>2405300</id><snippet>strippedString = yourString.strip()
</snippet></ROW><ROW><id>2405448</id><snippet>OptionParser</snippet></ROW><ROW><id>2405448</id><snippet>print_help()</snippet></ROW><ROW><id>2405587</id><snippet>C:\OpenCV2.0\Python2.6\Lib\site-packages</snippet></ROW><ROW><id>2405587</id><snippet>C:\Python26\Lib\site-packages</snippet></ROW><ROW><id>2405587</id><snippet>C:\OpenCV2.0\samples\python</snippet></ROW><ROW><id>2405587</id><snippet>C:\OpenCV2.0\samples\swig_python</snippet></ROW><ROW><id>2405617</id><snippet>__getattr__</snippet></ROW><ROW><id>2405617</id><snippet>__getattr__</snippet></ROW><ROW><id>2405617</id><snippet>foo.bar</snippet></ROW><ROW><id>2405617</id><snippet>__getattr__</snippet></ROW><ROW><id>2405617</id><snippet>foo</snippet></ROW><ROW><id>2405617</id><snippet>bar</snippet></ROW><ROW><id>2405617</id><snippet>AttributeError</snippet></ROW><ROW><id>2405617</id><snippet>class Foo(object):
    def __getattr__(self, name):
        if some_predicate(name):
            # ...
        else:
            # Default behaviour
            raise AttributeError
</snippet></ROW><ROW><id>2405617</id><snippet>__getattr__</snippet></ROW><ROW><id>2405617</id><snippet>__getattribute__</snippet></ROW><ROW><id>2405617</id><snippet>class Foo(object):
    def __getattribute__(self, name):
        if some_predicate(name):
            # ...
        else:
            # Default behaviour
            return object.__getattribute__(self, name)
</snippet></ROW><ROW><id>2405659</id><snippet>format=0</snippet></ROW><ROW><id>2405659</id><snippet>load_cert()</snippet></ROW><ROW><id>2405690</id><snippet>conn = memcache.Client(['127.0.0.1:11211'], debug=0)
</snippet></ROW><ROW><id>2405814</id><snippet>object</snippet></ROW><ROW><id>2405814</id><snippet>object</snippet></ROW><ROW><id>2405814</id><snippet>Foo(object):</snippet></ROW><ROW><id>2405814</id><snippet>Foo:</snippet></ROW><ROW><id>2405985</id><snippet>value_key_map</snippet></ROW><ROW><id>2406041</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>2406043</id><snippet>__import__</snippet></ROW><ROW><id>2406043</id><snippet>__import__</snippet></ROW><ROW><id>2406043</id><snippet>sys.modules</snippet></ROW><ROW><id>2406043</id><snippet>beingimported = set()
originalimport = __import__
def newimport(modulename, *args, **kwargs):
    if modulename in beingimported:
        print "Importing in circles", modulename, args, kwargs
        print "    Import stack trace -&gt; ", beingimported
        # sys.exit(1) # Normally exiting is a bad idea.
    beingimported.add(modulename)
    result = originalimport(modulename, *args, **kwargs)
    if modulename in beingimported:
        beingimported.remove(modulename)
    return result
import __builtin__
__builtin__.__import__ = newimport
</snippet></ROW><ROW><id>2406321</id><snippet>DisableReflectionKey</snippet></ROW><ROW><id>2406321</id><snippet>+.. function:: DisableReflectionKey(key)
+   
+   Disables registry reflection for 32-bit processes running on a 64-bit
+   Operating System.
+   
+   *key* is an already open key, or one of the predefined :const:`HKEY_\*`
+   constants.
+   
+   Will generally raise :exc:`NotImplemented` if executed on a 32-bit
+   Operating System.

+   If the key is not on the reflection list, the function succeeds but has no
+   effect. Disabling reflection for a key does not affect reflection of any
+   subkeys.

+
+.. function:: EnableReflectionKey(key)
+
+   Restores registry reflection for the specified disabled key.
+   
+   *key* is an already open key, or one of the predefined :const:`HKEY_\*`
+   constants.
+
+   Will generally raise :exc:`NotImplemented` if executed on a 32-bit
+   Operating System.
+   
+   Restoring reflection for a key does not affect reflection of any subkeys.
+
+
+.. function:: QueryReflectionKey(key)
+
+   Determines the reflection state for the specified key.
+   
+   *key* is an already open key, or one of the predefined :const:`HKEY_\*`
+   constants.
+   
+   Returns ``True`` if reflection is disabled.
+
+   Will generally raise :exc:`NotImplemented` if executed on a 32-bit
+   Operating System.
</snippet></ROW><ROW><id>2406598</id><snippet>setattr(cat, 'name', 'mittens')
</snippet></ROW><ROW><id>2406598</id><snippet>cat.name = 'mittens'
</snippet></ROW><ROW><id>2406704</id><snippet>map.connect('/', controller='main', action='index')</snippet></ROW><ROW><id>2406744</id><snippet>os.py</snippet></ROW><ROW><id>2406744</id><snippet>posixpath</snippet></ROW><ROW><id>2406744</id><snippet>ntpath</snippet></ROW><ROW><id>2406744</id><snippet>path</snippet></ROW><ROW><id>2406744</id><snippet>os.path</snippet></ROW><ROW><id>2406922</id><snippet>var mydict = {
  'a': [3,5,6,43,3,6,3,],
  'b': [87,65,3,45,7,8],
  'c': [34,57,8,9,9,2],
};
for (var key in mydict) {
  alert(key);
}
</snippet></ROW><ROW><id>2406973</id><snippet>bool</snippet></ROW><ROW><id>2406973</id><snippet>int</snippet></ROW><ROW><id>2406973</id><snippet>&gt;&gt;&gt; issubclass(bool,int)
True
</snippet></ROW><ROW><id>2406973</id><snippet>/* Boolean type, a subtype of int */

/* We need to define bool_print to override int_print */
bool_print
    fputs(self-&gt;ob_ival == 0 ? "False" : "True", fp);

/* We define bool_repr to return "False" or "True" */
bool_repr
    ...

/* We define bool_new to always return either Py_True or Py_False */
    ...

// Arithmetic methods -- only so we can override &amp;, |, ^
bool_as_number
    bool_and,       /* nb_and */
    bool_xor,       /* nb_xor */
    bool_or,        /* nb_or */

PyBool_Type
    "bool",
    sizeof(PyIntObject),
    (printfunc)bool_print,          /* tp_print */
    (reprfunc)bool_repr,            /* tp_repr */
    &amp;bool_as_number,                /* tp_as_number */
    (reprfunc)bool_repr,            /* tp_str */
    &amp;PyInt_Type,                    /* tp_base */
    bool_new,                       /* tp_new */
</snippet></ROW><ROW><id>2407405</id><snippet>&gt;&gt;&gt; list_a = [1, 2, 3, 4]
&gt;&gt;&gt; list_b = [5, 6, 7, 8]
&gt;&gt;&gt; zip(list_a, list_b)
[(1, 5), (2, 6), (3, 7), (4, 8)]
</snippet></ROW><ROW><id>2408473</id><snippet>[[] for _ in range(4)]          # use xrange in python-2.x
</snippet></ROW><ROW><id>2408584</id><snippet>list</snippet></ROW><ROW><id>2408584</id><snippet>def foo(self, lst):
    length = len(lst)
</snippet></ROW><ROW><id>2408584</id><snippet>foo</snippet></ROW><ROW><id>2408584</id><snippet>Foo.foo(list)
</snippet></ROW><ROW><id>2408670</id><snippet>communicate</snippet></ROW><ROW><id>2408670</id><snippet>communicate()</snippet></ROW><ROW><id>2408670</id><snippet>shell=True</snippet></ROW><ROW><id>2408670</id><snippet>shell=False</snippet></ROW><ROW><id>2408670</id><snippet>Popen</snippet></ROW><ROW><id>2408670</id><snippet>p = subprocess.Popen(["./AO_FelixStrategy_UnitTest",
                      "--bats", "31441", "--chix", "12467",
                      "--enxutp", "31884", "--turq", "26372",
                      "--symbol", "SOGN", "--target_date", '2009-Oct-16'],
                     stdin=subprocess.PIPE, 
                     stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>2408670</id><snippet>p.stdin.write</snippet></ROW><ROW><id>2408670</id><snippet>p.stdout.read</snippet></ROW><ROW><id>2408670</id><snippet>p.stdout.read</snippet></ROW><ROW><id>2408670</id><snippet>p.stdin.write</snippet></ROW><ROW><id>2408670</id><snippet>select</snippet></ROW><ROW><id>2408670</id><snippet>Popen.communicate</snippet></ROW><ROW><id>2408670</id><snippet>AO_FelixStrategy_UnitTest</snippet></ROW><ROW><id>2408670</id><snippet>AO_FelixStrategy_UnitTest</snippet></ROW><ROW><id>2408670</id><snippet>p.stdin.close()</snippet></ROW><ROW><id>2408670</id><snippet>AO_FelixStrategy_UnitTest</snippet></ROW><ROW><id>2408670</id><snippet>AO_FelixStrategy_UnitTest</snippet></ROW><ROW><id>2408670</id><snippet>p = subprocess.Popen(["./AO_FelixStrategy_UnitTest",
                      "--bats", "31441", "--chix", "12467",
                      "--enxutp", "31884", "--turq", "26372",
                      "--symbol", "SOGN", "--target_date", '2009-Oct-16'],
                     stdin=subprocess.PIPE, 
                     stdout=subprocess.PIPE)
output = p.communicate('S\nL\n')[0]
print output
</snippet></ROW><ROW><id>2408847</id><snippet>u</snippet></ROW><ROW><id>2408847</id><snippet>ax.set_yticklabels([u'é', u'ã', u'â'])
</snippet></ROW><ROW><id>2408872</id><snippet>shell=True</snippet></ROW><ROW><id>2408872</id><snippet>PATH</snippet></ROW><ROW><id>2408872</id><snippet># -*- coding: utf-8 -*-
import subprocess

def execute(command):
    pipe = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, errs = pipe.communicate()
    retcode = pipe.poll()

    print "OUT: " + repr(out)
    print "ERRS: " + repr(errs)
    print "RET: " + str(retcode)
    return out


command = ['rsync.exe', '--stats', '-az', '--numeric-ids', '--delete', 
           '--blocking-io', '--modify-window=2', '--no-group', 
           '--chmod=u=rwX,g=,o=', '-e', 
           'cygnative plink -ssh -2 -batch -pw test', 
           u'/cygdrive/c/κόσμε'.encode('utf-8'), 
           'vaidab@192.168.1.86:/volatile/backup/vaidab/2010-03-03.15_41_56/', 
           '--link-dest=../2010-03-03.15_00_57']

execute(command)
</snippet></ROW><ROW><id>2409034</id><snippet>msvcrt</snippet></ROW><ROW><id>2409034</id><snippet>import msvcrt

num = 0
done = False
while not done:
    print num
    num += 1

    if msvcrt.kbhit():
        print "you pressed",msvcrt.getch(),"so now i will quit"
        done = True
</snippet></ROW><ROW><id>2409034</id><snippet>termios</snippet></ROW><ROW><id>2409034</id><snippet>import sys
import select
import tty
import termios

def isData():
    return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

old_settings = termios.tcgetattr(sys.stdin)
try:
    tty.setcbreak(sys.stdin.fileno())

    i = 0
    while 1:
        print i
        i += 1

        if isData():
            c = sys.stdin.read(1)
            if c == '\x1b':         # x1b is ESC
                break

finally:
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
</snippet></ROW><ROW><id>2409034</id><snippet>import pygame
from pygame.locals import *

def display(str):
    text = font.render(str, True, (255, 255, 255), (159, 182, 205))
    textRect = text.get_rect()
    textRect.centerx = screen.get_rect().centerx
    textRect.centery = screen.get_rect().centery

    screen.blit(text, textRect)
    pygame.display.update()

pygame.init()
screen = pygame.display.set_mode( (640,480) )
pygame.display.set_caption('Python numbers')
screen.fill((159, 182, 205))

font = pygame.font.Font(None, 17)

num = 0
done = False
while not done:
    display( str(num) )
    num += 1

    pygame.event.pump()
    keys = pygame.key.get_pressed()
    if keys[K_ESCAPE]:
        done = True
</snippet></ROW><ROW><id>2409242</id><snippet>users.get_current_user()</snippet></ROW><ROW><id>2409242</id><snippet>user</snippet></ROW><ROW><id>2409242</id><snippet>if</snippet></ROW><ROW><id>2409242</id><snippet>self.user</snippet></ROW><ROW><id>2409523</id><snippet>&gt;&gt;&gt; def afunc():
...    a = ['foo', 'bar', 'zot']
...    b = ('oof', 'rab', 'toz')
...    return
...
&gt;&gt;&gt; import dis; dis.dis(afunc)
  2           0 LOAD_CONST               1 ('foo')
              3 LOAD_CONST               2 ('bar')
              6 LOAD_CONST               3 ('zot')
              9 BUILD_LIST               3
             12 STORE_FAST               0 (a)

  3          15 LOAD_CONST               7 (('oof', 'rab', 'toz'))
             18 STORE_FAST               1 (b)

  4          21 LOAD_CONST               0 (None)
             24 RETURN_VALUE
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2409600</id><snippet>import csv
file_data = self.request.get('file_in')
file_data_list = file_data.split('\n')
file_Reader = csv.reader(file_data_list)
for fields in file_Reader:
    print row
</snippet></ROW><ROW><id>2409692</id><snippet>hay = "The fox jumped up the tree."
needle = "umpe"

print hay.replace(needle, "&lt;strong&gt;%s&lt;strong&gt;" % needle)
</snippet></ROW><ROW><id>2409692</id><snippet>import re

hay = "The fox jUMPed up the tree."
needle = "umpe"

regex = re.compile('(%s)' % needle, re.I)
print regex.sub('&lt;strong&gt;\\1&lt;/strong&gt;', hay)
</snippet></ROW><ROW><id>2409728</id><snippet>bar()</snippet></ROW><ROW><id>2409728</id><snippet>foo</snippet></ROW><ROW><id>2410065</id><snippet>n</snippet></ROW><ROW><id>2410065</id><snippet>n</snippet></ROW><ROW><id>2410065</id><snippet>n</snippet></ROW><ROW><id>2410136</id><snippet>import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import numpy as np

fig = plt.figure(1)
ax = fig.add_subplot(111)

# set up axis
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

# draw curve
x = np.arange(-2.5,2.5,0.01)
line, = ax.plot(x, x**2)

#set bounds
ax.set_ybound(-1,7)

# create grid
#ax.xaxis.set_major_locator(MultipleLocator(1))
#ax.xaxis.set_minor_locator(MultipleLocator(0.2))
#ax.yaxis.set_major_locator(MultipleLocator(1))
#ax.yaxis.set_minor_locator(MultipleLocator(0.2))
#ax.xaxis.grid(True,'minor')
#ax.yaxis.grid(True,'minor')
#ax.xaxis.grid(True,'major',linewidth=2)
#ax.yaxis.grid(True,'major',linewidth=2)

#adjust grid on the 2s
#for idx,loc in enumerate(ax.xaxis.get_majorticklocs()):
    #if loc !=0 and loc % 2 == 0: ax.get_xgridlines()[idx].set_c('r')
#for idx,loc in enumerate(ax.yaxis.get_majorticklocs()):
    #if loc !=0 and loc % 2 == 0: ax.get_ygridlines()[idx].set_c('r')

## THIS IS THE EDIT
ax.xaxis.set_minor_locator(MultipleLocator(0.2))
ax.yaxis.set_minor_locator(MultipleLocator(0.2))
ax.xaxis.grid(True,'minor',linewidth=2)
ax.yaxis.grid(True,'minor',linewidth=2)

minor_grid_lines = [tick.gridline for tick in ax.xaxis.get_minor_ticks()]
for idx,loc in enumerate(ax.xaxis.get_minorticklocs()):
    if loc % 2.0 == 0: minor_grid_lines[idx].set_c('r' )
    elif loc % 1.0 == 0: minor_grid_lines[idx].set_c('g' )
    else: minor_grid_lines[idx].set_c( 'b' )

plt.show()
</snippet></ROW><ROW><id>2410372</id><snippet>u</snippet></ROW><ROW><id>2410372</id><snippet>A</snippet></ROW><ROW><id>2410613</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>2410613</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d1 = datetime.datetime.strptime("00:08:30.291", "%H:%M:%S.%f")
&gt;&gt;&gt; d1
datetime.datetime(1900, 1, 1, 0, 8, 30, 291000)
&gt;&gt;&gt; d2
datetime.datetime(1900, 1, 1, 0, 2, 30, 291000)
&gt;&gt;&gt; dt1 = datetime.timedelta(minutes=d1.minute, seconds=d1.second, microseconds=d1.microsecond)
&gt;&gt;&gt; dt2 = datetime.timedelta(minutes=d2.minute, seconds=d2.second, microseconds=d2.microsecond)
&gt;&gt;&gt; fin = dt1 + dt2
&gt;&gt;&gt; fin
datetime.timedelta(0, 660, 582000)
&gt;&gt;&gt; str(fin)
'0:11:00.582000'
</snippet></ROW><ROW><id>2410613</id><snippet>sum</snippet></ROW><ROW><id>2410996</id><snippet>flush</snippet></ROW><ROW><id>2410996</id><snippet>display = Xlib.display.Display()
screen = display.screen()
root = screen.root

# ...

sendEvent(root, display.intern_atom("_NET_CURRENT_DESKTOP"), [1, X.CurrentTime])
display.flush()
</snippet></ROW><ROW><id>2411217</id><snippet>&gt;&gt;&gt; def f(arg1="hello", arg2="goodbye"):
    print "arg1 is", arg1
    print "arg2 is", arg2


&gt;&gt;&gt; f()
arg1 is hello
arg2 is goodbye
&gt;&gt;&gt; f(arg2="two")
arg1 is hello
arg2 is two
&gt;&gt;&gt; f(1,2)
arg1 is 1
arg2 is 2
&gt;&gt;&gt; f(arg2="foo", arg1="bar")
arg1 is bar
arg2 is foo
</snippet></ROW><ROW><id>2411217</id><snippet>&gt;&gt;&gt; def g(arg=None):
    if arg is None:
        arg = raw_input("What is the argument?")
    print "The argument was", arg


&gt;&gt;&gt; g(123)
The argument was 123
&gt;&gt;&gt; g()
What is the argument? foo bar
The argument was  foo bar
</snippet></ROW><ROW><id>2411540</id><snippet>StringIO</snippet></ROW><ROW><id>2411540</id><snippet>o.getvalue()</snippet></ROW><ROW><id>2411540</id><snippet>zf.write('picture.jpg')</snippet></ROW><ROW><id>2411680</id><snippet>def addone(item, alist=[]):
  alist.append(item)
  return alist
</snippet></ROW><ROW><id>2411680</id><snippet>addone</snippet></ROW><ROW><id>2411680</id><snippet>static</snippet></ROW><ROW><id>2411680</id><snippet>None</snippet></ROW><ROW><id>2411680</id><snippet>alist = alist.append(item)
</snippet></ROW><ROW><id>2411680</id><snippet>alist</snippet></ROW><ROW><id>2411680</id><snippet>alist</snippet></ROW><ROW><id>2411680</id><snippet>None</snippet></ROW><ROW><id>2411680</id><snippet>append</snippet></ROW><ROW><id>2411680</id><snippet>for i in range(10):
    Button(text="Button #%s" % i,
           click=lambda: say("I'm #%s!" % i))
</snippet></ROW><ROW><id>2411680</id><snippet>say</snippet></ROW><ROW><id>2411680</id><snippet>#9</snippet></ROW><ROW><id>2411680</id><snippet>i</snippet></ROW><ROW><id>2411680</id><snippet>lambda</snippet></ROW><ROW><id>2411680</id><snippet>           click=lambda i=i: say("I'm #%s!" % i))
</snippet></ROW><ROW><id>2411680</id><snippet>lambda</snippet></ROW><ROW><id>2411680</id><snippet>i</snippet></ROW><ROW><id>2411865</id><snippet>get</snippet></ROW><ROW><id>2411865</id><snippet>put</snippet></ROW><ROW><id>2412468</id><snippet>''</snippet></ROW><ROW><id>2412468</id><snippet>['',{}]</snippet></ROW><ROW><id>2412468</id><snippet>_d</snippet></ROW><ROW><id>2412468</id><snippet>&gt;&gt;&gt; x = patricia()
&gt;&gt;&gt; x.addWord('abcabc')
&gt;&gt;&gt; x._d
{'a': ['bcabc', {}]}
&gt;&gt;&gt; x.addWord('abcdef')
&gt;&gt;&gt; x._d
{'a': ['bc', {'a': ['bc', {}], 'd': ['ef', {}]}]}
&gt;&gt;&gt; x.addWord('abc')
{'a': ['bc', {'a': ['bc', {}], '': ['', {}], 'd': ['ef', {}]}]}
</snippet></ROW><ROW><id>2412468</id><snippet>class patricia():
    def __init__(self):
        self._data = {}

    def addWord(self, word):
        data = self._data
        i = 0
        while 1:
            try:
                node = data[word[i:i+1]]
            except KeyError:
                if data:
                    data[word[i:i+1]] = [word[i+1:],{}]
                else:
                    if word[i:i+1] == '':
                        return
                    else:
                        if i != 0:
                            data[''] = ['',{}]
                        data[word[i:i+1]] = [word[i+1:],{}]
                return

            i += 1
            if word.startswith(node[0],i):
                if len(word[i:]) == len(node[0]):
                    if node[1]:
                        try:
                            node[1]['']
                        except KeyError:
                            data = node[1]
                            data[''] = ['',{}]
                    return
                else:
                    i += len(node[0])
                    data = node[1]
            else:
                ii = i
                j = 0
                while ii != len(word) and j != len(node[0]) and \
                      word[ii:ii+1] == node[0][j:j+1]:
                    ii += 1
                    j += 1
                tmpdata = {}
                tmpdata[node[0][j:j+1]] = [node[0][j+1:],node[1]]
                tmpdata[word[ii:ii+1]] = [word[ii+1:],{}]
                data[word[i-1:i]] = [node[0][:j],tmpdata]
                return

    def isWord(self,word):
        data = self._data
        i = 0
        while 1:
            try:
                node = data[word[i:i+1]]
            except KeyError:
                return False
            i += 1
            if word.startswith(node[0],i):
                if len(word[i:]) == len(node[0]):
                    if node[1]:
                        try:
                            node[1]['']
                        except KeyError:
                            return False
                    return True
                else:
                    i += len(node[0])
                    data = node[1]
            else:
                return False

    def isPrefix(self,word):
        data = self._data
        i = 0
        wordlen = len(word)
        while 1:
            try:
                node = data[word[i:i+1]]
            except KeyError:
                return False
            i += 1
            if word.startswith(node[0][:wordlen-i],i):
                if wordlen - i &gt; len(node[0]):
                    i += len(node[0])
                    data = node[1]
                else:
                    return True
            else:
                return False

    def removeWord(self,word):
        data = self._data
        i = 0
        while 1:
            try:
                node = data[word[i:i+1]]
            except KeyError:
                print "Word is not in trie."
                return
            i += 1
            if word.startswith(node[0],i):
                if len(word[i:]) == len(node[0]):
                    if node[1]:
                        try:
                            node[1]['']
                            node[1].pop('')
                        except KeyError:
                            print "Word is not in trie."
                        return
                    data.pop(word[i-1:i])
                    return
                else:
                    i += len(node[0])
                    data = node[1]
            else:
                print "Word is not in trie."
                return


    __getitem__ = isWord
</snippet></ROW><ROW><id>2412468</id><snippet>__getitem__</snippet></ROW><ROW><id>2412468</id><snippet>x['abc']
</snippet></ROW><ROW><id>2412594</id><snippet>listA</snippet></ROW><ROW><id>2412594</id><snippet>auxdict = dict((d['name'], d['val']) for d in listA)
</snippet></ROW><ROW><id>2412594</id><snippet>changed = [d['name'] for d in listB 
           if d['name'] in auxdict and d['val'] != auxdict[d['name']]]
</snippet></ROW><ROW><id>2412802</id><snippet>Done</snippet></ROW><ROW><id>2412802</id><snippet>Done</snippet></ROW><ROW><id>2412802</id><snippet>Done</snippet></ROW><ROW><id>2412831</id><snippet>import operator

auths = Author.objects.order_by('-score')[:30]
ordered = sorted(auths, key=operator.attrgetter('last_name'))
</snippet></ROW><ROW><id>2412923</id><snippet>data = [[item.strip() for item in line.rstrip('\r\n').split('\t')] for line in open('input.txt')]
</snippet></ROW><ROW><id>2412923</id><snippet>data = []
for line in open('input.txt'):
    items = line.rstrip('\r\n').split('\t')   # strip new-line characters and split on column delimiter
    items = [item.strip() for item in items]  # strip extra whitespace off data items
    data.append(items)
</snippet></ROW><ROW><id>2413105</id><snippet>import wx
from wx.lib.mixins.listctrl import TextEditMixin

class EditableTextListCtrl(wx.ListCtrl, TextEditMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition,
                size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        TextEditMixin.__init__(self) 

class MyDialog(wx.Dialog):
    def __init__(self, parent, id, title):
        wx.Dialog.__init__(self, parent, id)
        listCtrl = EditableTextListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_VRULES|wx.LC_HRULES, size=(300, 200))
        listCtrl.InsertColumn(0, 'State')
        listCtrl.InsertColumn(1, 'Capital')
        listCtrl.SetColumnWidth(0, 140)
        listCtrl.SetColumnWidth(1, 153)
        states = ['Slovakia', 'Poland', 'Hungary']
        capitals = ['Brastislava', 'Warsaw', 'Budapest']
        for i in range(3):
            listCtrl.InsertStringItem(0, states[i])
            listCtrl.SetStringItem(0, 1, capitals[i])

class MyApp(wx.App):
    def OnInit(self):
        dia = MyDialog(None, -1, 'capitals.py')
        dia.ShowModal()
        dia.Destroy()
        return True

app = MyApp(0)
app.MainLoop()
</snippet></ROW><ROW><id>2413296</id><snippet>def log(func):
  def wrapper(*a, **kw):
    return func(*a, **kw)
  wrapper.func = func
  return wrapper

@log
def f():
  print 'f'

print f.func
</snippet></ROW><ROW><id>2413400</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.datetime.today()
&gt;&gt;&gt; today
datetime.datetime(2010, 3, 9, 18, 25, 19, 474362)
&gt;&gt;&gt; today + datetime.timedelta(days=1)
datetime.datetime(2010, 3, 10, 18, 25, 19, 474362)
</snippet></ROW><ROW><id>2414253</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; p = [{'fn':'bill'}, {'fn':'Bob'}, {'fn':'bobby'}]
&gt;&gt;&gt; sorted(p, key=itemgetter('fn'))
[{'fn': 'Bob'}, {'fn': 'bill'}, {'fn': 'bobby'}]
&gt;&gt;&gt; sorted(p, key=lambda x: x['fn'].lower())
[{'fn': 'bill'}, {'fn': 'Bob'}, {'fn': 'bobby'}]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2414485</id><snippet>rgx = "&lt;([a-zA-Z_0-9]*)&gt;"</snippet></ROW><ROW><id>2414485</id><snippet>*</snippet></ROW><ROW><id>2414485</id><snippet>+</snippet></ROW><ROW><id>2414505</id><snippet>Ego.objects.all().select_related.order_by("auth_user.first_name")
</snippet></ROW><ROW><id>2414732</id><snippet>/proc/partitions</snippet></ROW><ROW><id>2414732</id><snippet>/sys/class/block</snippet></ROW><ROW><id>2414732</id><snippet>#!/usr/bin/python
import os
partitionsFile = open("/proc/partitions")
lines = partitionsFile.readlines()[2:]#Skips the header lines
for line in lines:
    words = [x.strip() for x in line.split()]
    minorNumber = int(words[1])
    deviceName = words[3]
    if minorNumber % 16 == 0:
        path = "/sys/class/block/" + deviceName
        if os.path.islink(path):
            if os.path.realpath(path).find("/usb") &gt; 0:
                print "/dev/%s" % deviceName
</snippet></ROW><ROW><id>2414732</id><snippet>find("/usb")</snippet></ROW><ROW><id>2414740</id><snippet>c = xmpp.client.Client(...)
# connect
jid = xmpp.JID(node=c.User, domain=c.Server, resource=c.Resource)
</snippet></ROW><ROW><id>2414795</id><snippet>promotion_items = {
    'one': {'remaining_pcs': 100, 'discount_ratio': 10},
    'two': {'remaining_pcs': 200, 'discount_ratio': 20},
}
def bypcs(k):
  return promotion_items[k]['remaining_pcs']
byrempcs = sorted(promotion_items, key=bypcs)
def bydra(k):
  return promotion_items[k]['discount_ratio']
bydiscra = sorted(promotion_items, key=bydra)
</snippet></ROW><ROW><id>2415076</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; html = '&lt;b&gt;&lt;a href="http://foo.com/"&gt;foo&lt;/a&gt;&lt;/b&gt;&lt;img src="http://foo.com/bar.jpg" /&gt;'
&gt;&gt;&gt; bs = BeautifulSoup.BeautifulSoup(html)  
&gt;&gt;&gt; bs.findAll(text=True)
[u'foo']
</snippet></ROW><ROW><id>2415076</id><snippet>''.join(thatlist)</snippet></ROW><ROW><id>2415154</id><snippet>element</snippet></ROW><ROW><id>2415154</id><snippet>for subelement in element.GetElementsByTagName("field"):
    if subelement.hasAttribute("frame.len"):
        do_something()
</snippet></ROW><ROW><id>2415154</id><snippet>&lt;field&gt;</snippet></ROW><ROW><id>2415154</id><snippet>xmlfile = open("myfile.xml")
for line in xmlfile:
    match = re.search(r'&lt;field\s+name="frame.len"\s+([^&gt;]+)/&gt;', line):
    if match:
        result = match.group(1)
        do_something(result)
</snippet></ROW><ROW><id>2415154</id><snippet>&lt;field&gt;</snippet></ROW><ROW><id>2415154</id><snippet>filedump = open("myfile.xml").read()
for match in re.finditer(r'&lt;field\s+name="frame.len"\s+([^&gt;]+)/&gt;', filedump):
    result = match.group(1)
    do_something(result)
</snippet></ROW><ROW><id>2415154</id><snippet>result</snippet></ROW><ROW><id>2415154</id><snippet>frame.len</snippet></ROW><ROW><id>2415154</id><snippet>frame.len</snippet></ROW><ROW><id>2415187</id><snippet>pip install &lt;packagename&gt;</snippet></ROW><ROW><id>2415187</id><snippet>easy_install &lt;packagename&gt;
</snippet></ROW><ROW><id>2415187</id><snippet>easy_install</snippet></ROW><ROW><id>2415187</id><snippet>easy_install pip</snippet></ROW><ROW><id>2415187</id><snippet>easy_install</snippet></ROW><ROW><id>2415343</id><snippet>def weighted_avg_and_std(values, weights):
    """
    Return the weighted average and standard deviation.

    values, weights -- Numpy ndarrays with the same shape.
    """
    average = numpy.average(values, weights=weights)
    variance = numpy.average((values-average)**2, weights=weights)  # Fast and numerically precise
    return (average, math.sqrt(variance))
</snippet></ROW><ROW><id>2415707</id><snippet>u'f\xa4hre'</snippet></ROW><ROW><id>2415707</id><snippet>0xa4</snippet></ROW><ROW><id>2415707</id><snippet>ä</snippet></ROW><ROW><id>2415707</id><snippet>ä</snippet></ROW><ROW><id>2415707</id><snippet>0xa4</snippet></ROW><ROW><id>2415707</id><snippet>轮渡</snippet></ROW><ROW><id>2415707</id><snippet>u'\u8f6e\u6e21'</snippet></ROW><ROW><id>2415707</id><snippet>'\xe8\xbd\xae\xe6\xb8\xa1'</snippet></ROW><ROW><id>2415934</id><snippet>{% for ab in mylist %}
    {{ab.0}}
    {{ab.1}}
{% endfor %}
</snippet></ROW><ROW><id>2415934</id><snippet>zip</snippet></ROW><ROW><id>2415934</id><snippet>for</snippet></ROW><ROW><id>2416015</id><snippet>app.initialize()</snippet></ROW><ROW><id>2416015</id><snippet>import Tkinter

class simpleapp_tk(Tkinter.Tk):
    def __init__(self,parent):
        Tkinter.Tk.__init__(self,parent)
        self.parent=parent
    def initialize(self):
        self.grid()

        self.entry=Tkinter.Entry(self)
        self.entry.grid(column=0,row=0,sticky='EW')
        self.entry.bind("&lt;Return&gt;",self.OnPressEnter)

        button=Tkinter.Button(self,text="Post it!",command=self.OnButtonClick)
        # the text keyword argument was mis-typed as 'test'

        button.grid(column=1,row=0)

        label=Tkinter.Label(self,anchor="w",fg="white",bg="blue")
        label.grid(column=0,row=1,columnspan=2,sticky='EW')
        # the . in label.grid was mis-typed as '='

        self.grid_columnconfigure(0,weight=1)

    def OnButtonClick(self):
        print "you clicked the button!"

    def OnPressEnter(self,event):
        print "you pressed enter!"

if __name__=="__main__":
    app=simpleapp_tk(None)
    app.title('poster')
    app.initialize() # you forgot this
    app.mainloop()
</snippet></ROW><ROW><id>2416049</id><snippet>def timedelta_to_microtime(td):
  return td.microseconds + (td.seconds + td.days * 86400) * 1000000
</snippet></ROW><ROW><id>2416049</id><snippet>class TimeDeltaProperty(db.Property):
  def get_value_for_datastore(self, model_instance):
    value = self.__get__(model_instance, model_instance.__class__)
    if value is not None:
      return timedelta_to_microtime(value)

  def make_value_from_datastore(self, value):
    if value is not None:
      return datetime.timedelta(microseconds=value)
</snippet></ROW><ROW><id>2416049</id><snippet>class MyModel(db.Model):
  td = TimeDeltaProperty(required=True)

entity = MyModel(td=datetime.datetime.now()-some_datetime)
key = entity.put()

entity = db.get(key)
print entity.td
</snippet></ROW><ROW><id>2416131</id><snippet>__init__</snippet></ROW><ROW><id>2416131</id><snippet>__init__</snippet></ROW><ROW><id>2416131</id><snippet>def __init__(self, lalala, *args, **kwargs):
   # do something with lalala here...
   super(test, self).__init__(*args, **kwargs)
   # ...or here
</snippet></ROW><ROW><id>2416131</id><snippet>primary_key=True</snippet></ROW><ROW><id>2416131</id><snippet>class test(Base):
    __tablename__ = 'test'
    id = Column(Integer, primary_key=True)
    id2 = Column(String, index=True, unique=True)
    title = Column(String)

    # def __init__(self) is not necessary
</snippet></ROW><ROW><id>2416247</id><snippet>cur.execute("""
  INSERT INTO locations_musiq1(location, location_title) 
  SELECT %s, %s WHERE NOT EXISTS 
      (SELECT location_title FROM locations_musiq1 WHERE location_title=%s);
  """, (data.entries[i].title, data.entries[i].summary, data.entries[i].summary))
</snippet></ROW><ROW><id>2416841</id><snippet>''.join(soup.findAll(text=True))
</snippet></ROW><ROW><id>2416990</id><snippet>q = db_session.query(Device, ParentDevice)\
    .outerjoin(
                  (ParentDevice, Device.parent_device_id==ParentDevice.device_id)
              )
</snippet></ROW><ROW><id>2417329</id><snippet>module_name</snippet></ROW><ROW><id>2417329</id><snippet>def get_dir(module_name):
    import os,imp
    (file, pathname, description) = imp.find_module(module_name)
    return os.path.dirname(pathname)

print get_dir('os')
</snippet></ROW><ROW><id>2417329</id><snippet>C:\Python26\lib
</snippet></ROW><ROW><id>2417329</id><snippet>def foo():
    print 'foo'
</snippet></ROW><ROW><id>2417329</id><snippet>import foo
import os
print os.path.dirname(foo.__file__)
foo.foo()
</snippet></ROW><ROW><id>2417329</id><snippet>C:\Documents and Settings\xxx\My Documents
foo
</snippet></ROW><ROW><id>2417389</id><snippet>def removeHtmlTags(page):
    p = re.compile(r'''&lt;(?:"[^"]*"['"]*|'[^']*'['"]*|[^'"&gt;])+&gt;''')
    return p.sub('', page)
</snippet></ROW><ROW><id>2417498</id><snippet>lazy_gettext()</snippet></ROW><ROW><id>2417498</id><snippet>_ = lazy_gettext</snippet></ROW><ROW><id>2417498</id><snippet>_()</snippet></ROW><ROW><id>2417598</id><snippet>import MySQLdb
db = MySQLdb.connect("host", "user", "password", "dbname")
cursor = db.cursor()
sql = """SELECT count(*) as tot FROM simpletable"""
cursor.execute(sql)
data = cursor.fetchone()
db.close()
print data
</snippet></ROW><ROW><id>2417598</id><snippet>simpletable</snippet></ROW><ROW><id>2417653</id><snippet>sys.modules</snippet></ROW><ROW><id>2417653</id><snippet>sys.modules[foo.__module__].__file__
</snippet></ROW><ROW><id>2417861</id><snippet>manager.DetachPane(pane)
pane.Destroy()
manager.Update()
</snippet></ROW><ROW><id>2418007</id><snippet>type</snippet></ROW><ROW><id>2418176</id><snippet>from django import db 
db.reset_queries()
</snippet></ROW><ROW><id>2418341</id><snippet>re.search</snippet></ROW><ROW><id>2418341</id><snippet>re.match</snippet></ROW><ROW><id>2418341</id><snippet>re.finditer</snippet></ROW><ROW><id>2418341</id><snippet>re.findall</snippet></ROW><ROW><id>2418650</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.matplotlib_fname()
</snippet></ROW><ROW><id>2418726</id><snippet>self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "border:1px solid rgb(255, 170, 255);")
</snippet></ROW><ROW><id>2418726</id><snippet>self.groupBox.setStyleSheet("QGroupBox { background-color: rgb(255, 255,\
255); border:1px solid rgb(255, 170, 255); }")
</snippet></ROW><ROW><id>2418795</id><snippet># COMMENT: We dont want arrays in SOAP-XML so I commented out the following lines
# if typed:
#    self.out.append(
#        '&lt;%s %sarrayType="%s[%d]" %stype="%sArray"%s%s%s%s%s%s&gt;\n' %
#        (tag, ens, t, len(data), ins, ens, ndecl, edecl, idecl,
#         self.genroot(ns_map), id, a))

#if typed:
#    try: elemsname = obj._elemsname
#    except: elemsname = "item"
#else:
elemsname = tag

for i in data:
    self.dump(i, elemsname, not same_type, ns_map)

#if typed: self.out.append('&lt;/%s&gt;\n' % tag)
</snippet></ROW><ROW><id>2418795</id><snippet>&lt;SOAP-ENV:Body&gt;
&lt;ns1:executeCommand xmlns:ns1="urn:SoapOAM"&gt;
&lt;xsd:in-cmd&gt;
&lt;m-strName xsi:type="xsd:string"&gt;set-log-level&lt;/m-strName&gt;
&lt;m-argVector&gt;ERROR_LOG_LEVEL&lt;/m-argVector&gt;
&lt;m-argVector&gt;netborder&lt;/m-argVector&gt;
&lt;/xsd:in-cmd&gt;
&lt;/ns1:executeCommand&gt;
&lt;/SOAP-ENV:Body&gt;
</snippet></ROW><ROW><id>2418829</id><snippet>http://www.example.com/script?par=1&amp;par=6&amp;par=5
</snippet></ROW><ROW><id>2418829</id><snippet>par</snippet></ROW><ROW><id>2418829</id><snippet>par[]</snippet></ROW><ROW><id>2418829</id><snippet>u'...'</snippet></ROW><ROW><id>2418829</id><snippet>u'...'.encode('utf-8')</snippet></ROW><ROW><id>2418829</id><snippet>u</snippet></ROW><ROW><id>2418829</id><snippet>'</snippet></ROW><ROW><id>2418829</id><snippet>print</snippet></ROW><ROW><id>2418829</id><snippet>repr</snippet></ROW><ROW><id>2418837</id><snippet>#!/usr/bin/perl
(my$d=q[AA                GTCAGTTCCT
  CGCTATGTA                 ACACACACCA
    TTTGTGAGT                ATGTAACATA
      CTCGCTGGC              TATGTCAGAC
        AGATTGATC          GATCGATAGA
          ATGATAGATC     GAACGAGTGA
            TAGATAGAGT GATAGATAGA
              GAGAGA GATAGAACGA
                TC GATAGAGAGA
                 TAGATAGACA G
               ATCGAGAGAC AGATA
             GAACGACAGA TAGATAGAT
           TGAGTGATAG    ACTGAGAGAT
         AGATAGATTG        ATAGATAGAT
       AGATAGATAG           ACTGATAGAT
     AGAGTGATAG             ATAGAATGAG
   AGATAGACAG               ACAGACAGAT
  AGATAGACAG               AGAGACAGAT
  TGATAGATAG             ATAGATAGAT
  TGATAGATAG           AATGATAGAT
   AGATTGAGTG        ACAGATCGAT
     AGAACCTTTCT   CAGTAACAGT
       CTTTCTCGC TGGCTTGCTT
         TCTAA CAACCTTACT
           G ACTGCCTTTC
           TGAGATAGAT CGA
         TAGATAGATA GACAGAC
       AGATAGATAG  ATAGAATGAC
     AGACAGAGAG      ACAGAATGAT
   CGAGAGACAG          ATAGATAGAT
  AGAATGATAG             ACAGATAGAC
  AGATAGATAG               ACAGACAGAT
  AGACAGACTG                 ATAGATAGAT
   AGATAGATAG                 AATGACAGAT
     CGATTGAATG               ACAGATAGAT
       CGACAGATAG             ATAGACAGAT
         AGAGTGATAG          ATTGATCGAC
           TGATTGATAG      ACTGATTGAT
             AGACAGATAG  AGTGACAGAT
               CGACAGA TAGATAGATA
                 GATA GATAGATAG
                    ATAGACAGA G
                  AGATAGATAG ACA
                GTCGCAAGTTC GCTCACA
])=~s/\s+//g;%a=map{chr $_=&gt;$i++}65,84,67,
71;$p=join$;,keys%a;while($d=~/([$p]{4})/g
){next if$j++%96&gt;=16;$c=0;for$d(0..3){$c+=
$a{substr($1,$d,1)}*(4**$d)}$perl.=chr $c}
             eval $perl;
</snippet></ROW><ROW><id>2419175</id><snippet>".*\"</snippet></ROW><ROW><id>2419175</id><snippet>.*</snippet></ROW><ROW><id>2419175</id><snippet>.</snippet></ROW><ROW><id>2419175</id><snippet>*</snippet></ROW><ROW><id>2419175</id><snippet>.</snippet></ROW><ROW><id>2419175</id><snippet>\.</snippet></ROW><ROW><id>2419175</id><snippet>.</snippet></ROW><ROW><id>2419175</id><snippet>\</snippet></ROW><ROW><id>2419175</id><snippet>.</snippet></ROW><ROW><id>2419242</id><snippet>def sum(self):
    return self.a + self.b
</snippet></ROW><ROW><id>2419242</id><snippet>NameError</snippet></ROW><ROW><id>2419316</id><snippet>import</snippet></ROW><ROW><id>2419316</id><snippet>__init__</snippet></ROW><ROW><id>2419316</id><snippet>class UnsatisfiedExample(object):
    def __init__(self):
        try:
            import flibbertigibbet
        except ImportError:
            raise RuntimeError("You need to install flibbertigibbet-py")
        super(UnsatisfiedExample, self).__init__()
</snippet></ROW><ROW><id>2419384</id><snippet>==</snippet></ROW><ROW><id>2419384</id><snippet>is</snippet></ROW><ROW><id>2419541</id><snippet>inspect.getmodule(f)</snippet></ROW><ROW><id>2419541</id><snippet>sys.modules.get(object.__module__)</snippet></ROW><ROW><id>2419541</id><snippet>inspect</snippet></ROW><ROW><id>2419541</id><snippet>python /foo/bar/baz/bla.py
</snippet></ROW><ROW><id>2419541</id><snippet>bla.py</snippet></ROW><ROW><id>2419541</id><snippet>__main__</snippet></ROW><ROW><id>2419541</id><snippet>from</snippet></ROW><ROW><id>2419541</id><snippet>import</snippet></ROW><ROW><id>2419541</id><snippet>sys.path</snippet></ROW><ROW><id>2419541</id><snippet>/foo/bar</snippet></ROW><ROW><id>2419541</id><snippet>/foo/bar/baz</snippet></ROW><ROW><id>2419541</id><snippet>sys.path</snippet></ROW><ROW><id>2419541</id><snippet>/foo/bar/baz/__init__.py</snippet></ROW><ROW><id>2419541</id><snippet>from baz.bla import f</snippet></ROW><ROW><id>2419541</id><snippet>from bla import f</snippet></ROW><ROW><id>2419541</id><snippet>sys.path</snippet></ROW><ROW><id>2419541</id><snippet>/foo/bar/baz</snippet></ROW><ROW><id>2419541</id><snippet>sys.path</snippet></ROW><ROW><id>2419541</id><snippet>/fee/fie/foo</snippet></ROW><ROW><id>2419541</id><snippet>/fee/fie/foo/bla.py</snippet></ROW><ROW><id>2419541</id><snippet>from baz.bla import f</snippet></ROW><ROW><id>2419541</id><snippet>f.__module__</snippet></ROW><ROW><id>2419541</id><snippet>baz.bla</snippet></ROW><ROW><id>2419621</id><snippet>def rollback(self):
    """Roll back to the start of any pending transaction."""
    if self._cnx:
        if self._tnx:
            self._tnx = False
            try:
                self._cnx.source().execute("ROLLBACK")
            except Exception:
                raise OperationalError("can't rollback")
    else:
        raise OperationalError("connection has been closed")
</snippet></ROW><ROW><id>2419621</id><snippet>connections[instance].rollback()</snippet></ROW><ROW><id>2419621</id><snippet>connections[instance]._tnx = False
connections[instance]._cnx.source().execute("ROLLBACK")
</snippet></ROW><ROW><id>2419782</id><snippet>next(gen)</snippet></ROW><ROW><id>2420168</id><snippet>smbmount</snippet></ROW><ROW><id>2420168</id><snippet>mkdir WindowsShare # Do this only once
smbmount \\server\share /home/me/WindowsShare -ousername=...,password=...
ls /home/me/WindowsShare
smbumount /home/me/WindowsShare
</snippet></ROW><ROW><id>2420486</id><snippet>stdout</snippet></ROW><ROW><id>2420486</id><snippet>stdout</snippet></ROW><ROW><id>2420486</id><snippet>stdout</snippet></ROW><ROW><id>2420486</id><snippet>stdout</snippet></ROW><ROW><id>2420747</id><snippet>for x in 'bcdef':
    t = array.array('B', map( operator.xor, mydict['a'], mydict[x] ) )
    f1 = open(''.join('a',x),'wb')
    t.tofile(f1)
    f1.close()
</snippet></ROW><ROW><id>2421036</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2421036</id><snippet>mod_python</snippet></ROW><ROW><id>2421036</id><snippet>mod_python</snippet></ROW><ROW><id>2421036</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2421178</id><snippet>tradeclient</snippet></ROW><ROW><id>2421178</id><snippet>ordermatch</snippet></ROW><ROW><id>2421178</id><snippet>quickfixengine</snippet></ROW><ROW><id>2421178</id><snippet>initiator</snippet></ROW><ROW><id>2421178</id><snippet>acceptor</snippet></ROW><ROW><id>2421178</id><snippet>ordermatcher</snippet></ROW><ROW><id>2421178</id><snippet>tradeclient</snippet></ROW><ROW><id>2421235</id><snippet>select_related</snippet></ROW><ROW><id>2421247</id><snippet>designs = Design.objects.filter(author__user__profile__screenname__icontains=w)
</snippet></ROW><ROW><id>2421274</id><snippet>configure</snippet></ROW><ROW><id>2421274</id><snippet>configure</snippet></ROW><ROW><id>2421274</id><snippet>gen-make.py</snippet></ROW><ROW><id>2421274</id><snippet>configure</snippet></ROW><ROW><id>2421325</id><snippet>__init__</snippet></ROW><ROW><id>2421325</id><snippet>Base</snippet></ROW><ROW><id>2421325</id><snippet>class Child(Base):
    def __init__(self, something_else):
        Base.__init__(value = 20)
        self.something_else = something_else
</snippet></ROW><ROW><id>2421325</id><snippet>super</snippet></ROW><ROW><id>2421327</id><snippet>cmd.exe</snippet></ROW><ROW><id>2421327</id><snippet>cmd.exe</snippet></ROW><ROW><id>2421327</id><snippet>ñ</snippet></ROW><ROW><id>2421327</id><snippet>'\xc3\xb1'</snippet></ROW><ROW><id>2421327</id><snippet>cmd.exe</snippet></ROW><ROW><id>2421327</id><snippet>\xa4</snippet></ROW><ROW><id>2421327</id><snippet>cmd.exe</snippet></ROW><ROW><id>2421327</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'cp437'
</snippet></ROW><ROW><id>2421327</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'utf-8'
</snippet></ROW><ROW><id>2421378</id><snippet>any(Hamming_distance(genome[x:x+25], sequence) == 1 for x in xrange(len(genome)))
</snippet></ROW><ROW><id>2421378</id><snippet>def Hamming_check_0_or_1(genome, posn, sequence):
    errors = 0
    for i in xrange(25):
        if genome[posn+i] != sequence[i]:
            errors += 1
            if errors &gt;= 2:
                return errors
    return errors 
</snippet></ROW><ROW><id>2421378</id><snippet># coding: ascii

from collections import defaultdict
import re

_DEBUG = 0


# "Fast Text Searching with Errors" by Sun Wu and Udi Manber
# TR 91-11, Dept of Computer Science, University of Arizona, June 1991.
# http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.8854

def WM_approx_Ham1_search(pattern, text):
    """Generate (Hamming_dist, start_offset)
    for matches with distance 0 or 1"""
    m = len(pattern)
    S_table = defaultdict(int)
    for i, c in enumerate(pattern):
        S_table[c] |= 1 &lt;&lt; i
    R0 = 0
    R1 = 0
    mask = 1 &lt;&lt; (m - 1)
    for j, c in enumerate(text):
        S = S_table[c]
        shR0 = (R0 &lt;&lt; 1) | 1
        R0 = shR0 &amp; S
        R1 = ((R1 &lt;&lt; 1) | 1) &amp; S | shR0
        if _DEBUG:
            print "j= %2d msk=%s S=%s R0=%s R1=%s" \
                % tuple([j] + map(bitstr, [mask, S, R0, R1]))
        if R0 &amp; mask: # exact match
            yield 0, j - m + 1
        elif R1 &amp; mask: # match with one substitution
            yield 1, j - m + 1

if _DEBUG:

    def bitstr(num, mlen=8):
       wstr = ""
       for i in xrange(mlen):
          if num &amp; 1:
             wstr = "1" + wstr
          else:
             wstr = "0" + wstr
          num &gt;&gt;= 1
       return wstr

def Ham_dist(s1, s2):
    """Calculate Hamming distance between 2 sequences."""
    assert len(s1) == len(s2)
    return sum(c1 != c2 for c1, c2 in zip(s1, s2))

def long_check(pattern, text):
    """Naively and understandably generate (Hamming_dist, start_offset)
    for matches with distance 0 or 1"""
    m = len(pattern)
    for i in xrange(len(text) - m + 1):
        d = Ham_dist(pattern, text[i:i+m])
        if d &lt; 2:
            yield d, i

def Paul_McGuire_regex(pattern, text):
    searchSeqREStr = (
        '('
        + pattern
        + ')|('
        + ')|('.join(
            pattern[:i]
            + "[ACTGN]".replace(c,'')
            + pattern[i+1:]
            for i,c in enumerate(pattern)
            )
        + ')'
        )
    searchSeqRE = re.compile(searchSeqREStr)
    for match in searchSeqRE.finditer(text):
        locn = match.start()
        dist = int(bool(match.lastindex - 1))
        yield dist, locn


if __name__ == "__main__":

    genome1 = "TTTACGTAAACTAAACTGTAA"
    #         01234567890123456789012345
    #                   1         2

    tests = [
        (genome1, "ACGT ATGT ACTA ATCG TTTT ATTA TTTA"),
        ("T" * 10, "TTTT"),
        ("ACGTCGTAAAA", "TCGT"), # partial match can shadow an exact match
        ]

    nfailed = 0
    for genome, patterns in tests:
        print "genome:", genome
        for pattern in patterns.split():
            print pattern
            a1 = list(WM_approx_Ham1_search(pattern, genome))
            a2 = list(long_check(pattern, genome))
            a3 = list(Paul_McGuire_regex(pattern, genome))
            print a1
            print a2
            print a3
            print a1 == a2, a2 == a3
            nfailed += (a1 != a2 or a2 != a3)
    print "***", nfailed
</snippet></ROW><ROW><id>2421465</id><snippet>def ending(generator):
    z2 = generator.next()
    z1 = generator.next()
    for x in generator:
        yield (False, z2)
        z2, z1 = z1, x
    yield (True, z2)
    yield (False, z1)
</snippet></ROW><ROW><id>2421465</id><snippet>&gt;&gt;&gt; g = iter('abcd')
&gt;&gt;&gt; g
&lt;iterator object at 0x9925b0&gt;
</snippet></ROW><ROW><id>2421465</id><snippet>&gt;&gt;&gt; for is_last_but_one, char in ending(g):
...     if is_last_but_one:
...         print "The last but one is", char
... 
The last but one is c
</snippet></ROW><ROW><id>2421465</id><snippet>&gt;&gt;&gt; g = iter('abcd')
&gt;&gt;&gt; for x in ending(g):
...     print x
... 
(False, 'a')
(False, 'b')
(True, 'c')
(False, 'd')
</snippet></ROW><ROW><id>2421592</id><snippet>:</snippet></ROW><ROW><id>2421681</id><snippet>&gt;&gt;&gt; re.findall(r"(?:password\sis\s+|password\:\s+)(\S+)", a)
['GOD', 'G0D']
</snippet></ROW><ROW><id>2422054</id><snippet>pixbuf = pixbuf.add_alpha(True, 0xFF, 0xFF, 0xFF)
</snippet></ROW><ROW><id>2422245</id><snippet>unicodedata</snippet></ROW><ROW><id>2422245</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; foo = u'１２３４５６７８９０'
&gt;&gt;&gt; unicodedata.normalize('NFKC', foo)
u'1234567890'
</snippet></ROW><ROW><id>2422422</id><snippet>request.GET</snippet></ROW><ROW><id>2422422</id><snippet>q</snippet></ROW><ROW><id>2422422</id><snippet>if request.method == 'GET' and 'q' in request.GET:
</snippet></ROW><ROW><id>2422422</id><snippet>q</snippet></ROW><ROW><id>2422422</id><snippet>None</snippet></ROW><ROW><id>2422422</id><snippet>q = request.GET['q']
if q is not None and q != '':
    # Do processing here
</snippet></ROW><ROW><id>2422422</id><snippet>request.GET.get('q', None)</snippet></ROW><ROW><id>2422422</id><snippet>'q'</snippet></ROW><ROW><id>2422422</id><snippet>request.GET</snippet></ROW><ROW><id>2422422</id><snippet>get</snippet></ROW><ROW><id>2422422</id><snippet>None</snippet></ROW><ROW><id>2422422</id><snippet>False</snippet></ROW><ROW><id>2422422</id><snippet>''</snippet></ROW><ROW><id>2422422</id><snippet>False</snippet></ROW><ROW><id>2422422</id><snippet>True</snippet></ROW><ROW><id>2422422</id><snippet>q = request.GET['q']
if q:
    # Do processing here
</snippet></ROW><ROW><id>2422422</id><snippet>dict.get</snippet></ROW><ROW><id>2422764</id><snippet>LitAgent.objects.filter(author__book__year_published=2006)
</snippet></ROW><ROW><id>2422864</id><snippet>"c:sourcedir"</snippet></ROW><ROW><id>2422864</id><snippet>"c:/sourcedir"
os.path.join("/", "c:", "sourcedir")
os.path.join("c:/", "sourcedir")
</snippet></ROW><ROW><id>2422919</id><snippet>if</snippet></ROW><ROW><id>2423164</id><snippet>foo</snippet></ROW><ROW><id>2423164</id><snippet>hasattr()</snippet></ROW><ROW><id>2423164</id><snippet>hasattr()</snippet></ROW><ROW><id>2423164</id><snippet>if not hasattr(spam,'foo'):
    do_something()
</snippet></ROW><ROW><id>2423164</id><snippet>hasattr()</snippet></ROW><ROW><id>2423164</id><snippet>getattr(object, name)</snippet></ROW><ROW><id>2423164</id><snippet>hasattr()</snippet></ROW><ROW><id>2423164</id><snippet>hasattr()</snippet></ROW><ROW><id>2423164</id><snippet>spam</snippet></ROW><ROW><id>2423164</id><snippet>foo</snippet></ROW><ROW><id>2423164</id><snippet>spam</snippet></ROW><ROW><id>2423164</id><snippet>foo</snippet></ROW><ROW><id>2423164</id><snippet>if hasattr(spam, 'foo'):
    bar = spam.foo
else:
    do_somthing()
</snippet></ROW><ROW><id>2423184</id><snippet>None</snippet></ROW><ROW><id>2424194</id><snippet>python setup.py install
</snippet></ROW><ROW><id>2424234</id><snippet>line.split()</snippet></ROW><ROW><id>2424234</id><snippet>each</snippet></ROW><ROW><id>2424234</id><snippet>words</snippet></ROW><ROW><id>2424234</id><snippet>for i in range(len(words)):
    words[i]=words[i].rstrip()
</snippet></ROW><ROW><id>2424234</id><snippet>words=map(str.rstrip,words)
</snippet></ROW><ROW><id>2424234</id><snippet>words=[x.rstrip() for x in line.split("\t")]
</snippet></ROW><ROW><id>2424234</id><snippet>words=re.findall("[^\t]+",line)
</snippet></ROW><ROW><id>2424410</id><snippet>f = open(filename, 'r+')
text = f.read()
text = re.sub('foobar', 'bar', text)
f.seek(0)
f.write(text)
f.truncate()
f.close()
</snippet></ROW><ROW><id>2424425</id><snippet>map(int, ["1", "2", "3"])
</snippet></ROW><ROW><id>2424425</id><snippet>map</snippet></ROW><ROW><id>2424425</id><snippet>list(map(int, ["1", "2", "3"]))
</snippet></ROW><ROW><id>2424425</id><snippet>map</snippet></ROW><ROW><id>2424491</id><snippet>data=open("file").read().split("\n\n")
for rec in data:
    if "have paid" in rec:
         print rec.split("have paid")[0]
</snippet></ROW><ROW><id>2424549</id><snippet>d = zlib.decompressobj(16+zlib.MAX_WBITS)</snippet></ROW><ROW><id>2424549</id><snippet>CHUNKSIZE=1024</snippet></ROW><ROW><id>2424575</id><snippet>bar.num += 1</snippet></ROW><ROW><id>2424575</id><snippet>bar.num = bar.num + 1</snippet></ROW><ROW><id>2424575</id><snippet>Foo.num</snippet></ROW><ROW><id>2424575</id><snippet>bar.num</snippet></ROW><ROW><id>2424720</id><snippet>&gt;&gt;&gt; a=['1','2','3','4']; b=['2','3','4','5']
&gt;&gt;&gt; a = set(a)
&gt;&gt;&gt; b = set(b)
&gt;&gt;&gt; a &amp; b
set(['3', '2', '4'])
&gt;&gt;&gt; a - b
set(['1'])
&gt;&gt;&gt; b - a
set(['5'])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2424870</id><snippet>import _winreg

################################################################################

class HKEY:
    'Hive Constants'
    CLASSES_ROOT = -2147483648
    CURRENT_USER = -2147483647
    LOCAL_MACHINE = -2147483646
    USERS = -2147483645
    CURRENT_CONFIG = -2147483643

class KEY:
    'Mode Constants'
    QUERY_VALUE = 1
    SET_VALUE = 2
    CREATE_SUB_KEY = 4
    ENUMERATE_SUB_KEYS = 8
    NOTIFY = 16
    CREATE_LINK = 32
    WRITE = 131078
    EXECUTE = 131097
    READ = 131097
    ALL_ACCESS = 983103

class REG:
    'Type Constants'
    NONE = 0
    SZ = 1
    EXPAND_SZ = 2
    BINARY = 3
    DWORD = 4
    DWORD_BIG_ENDIAN = 5
    LINK = 6
    MULTI_SZ = 7
    RESOURCE_LIST = 8
    FULL_RESOURCE_DESCRIPTOR = 9
    RESOURCE_REQUIREMENTS_LIST = 10
    QWORD = 11

################################################################################

class _Value(object):

    '_Value(value) -&gt; _Value'

    def __init__(self, value):
        'Initialize the _Value object.'
        self.__value = value
        self.__repr = '%s(%r)' % (self.__class__.__name__, value)

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def __get_value(self):
        'Private class method.'
        return self.__value

    value = property(__get_value, doc='Value of this object.')

class REG_NONE(_Value): pass
class REG_SZ(_Value): pass
class REG_EXPAND_SZ(_Value): pass
class REG_BINARY(_Value): pass
class REG_DWORD(_Value): pass
class REG_DWORD_BIG_ENDIAN(_Value): pass
class REG_LINK(_Value): pass
class REG_MULTI_SZ(_Value): pass
class REG_RESOURCE_LIST(_Value): pass
class REG_FULL_RESOURCE_DESCRIPTOR(_Value): pass
class REG_RESOURCE_REQUIREMENTS_LIST(_Value): pass
class REG_QWORD(_Value): pass

################################################################################

class Registry(object):

    'Registry([computer]) -&gt; Registry'

    def __init__(self, computer=None):
        'Initialize the Registry object.'
        self.__computer = computer
        self.__repr = 'Registry()' if computer is None else 'Registry(%r)' % computer

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def __iter__(self):
        'Iterate over hives defined in HKEY.'
        return (Key(key, computer=self.__computer) for key in map(HKEY.__dict__.__getitem__, filter(str.isupper, dir(HKEY))))

    def __HKEY_CLASSES_ROOT(self):
        'Private class method.'
        return Key(HKEY.CLASSES_ROOT, computer=self.__computer)

    def __HKEY_CURRENT_USER(self):
        'Private class method.'
        return Key(HKEY.CURRENT_USER, computer=self.__computer)

    def __HKEY_LOCAL_MACHINE(self):
        'Private class method.'
        return Key(HKEY.LOCAL_MACHINE, computer=self.__computer)

    def __HKEY_USERS(self):
        'Private class method.'
        return Key(HKEY.USERS, computer=self.__computer)

    def __HKEY_CURRENT_CONFIG(self):
        'Private class method.'
        return Key(HKEY.CURRENT_CONFIG, computer=self.__computer)

    HKEY_CLASSES_ROOT = property(__HKEY_CLASSES_ROOT, doc='The CLASSES_ROOT hive.')
    HKEY_CURRENT_USER = property(__HKEY_CURRENT_USER, doc='The CURRENT_USER hive.')
    HKEY_LOCAL_MACHINE = property(__HKEY_LOCAL_MACHINE, doc='The LOCAL_MACHINE hive.')
    HKEY_USERS = property(__HKEY_USERS, doc='The USERS hive.')
    HKEY_CURRENT_CONFIG = property(__HKEY_CURRENT_CONFIG, doc='The CURRENT_CONFIG hive.')

################################################################################

class Key(object):

    '''Key(key[, subkey][, mode][, computer]) -&gt; Key

    Key(key) -&gt; Key
    Key(key, subkey) -&gt; Key
    Key(key, mode=value) -&gt; Key
    Key(key, subkey, mode) -&gt; Key
    Key(key, computer=value) -&gt; Key
    Key(key, subkey, computer=value) -&gt; Key
    Key(key, mode=value, computer=value) -&gt; Key
    Key(key, subkey, mode, computer) -&gt; Key'''

    def __init__(self, key, subkey=None, mode=None, computer=None):
        'Initialize the Key object.'
        if isinstance(key, (int, _winreg.HKEYType)) and subkey is None and mode is None and computer is None:
            self.__key = _winreg.OpenKey(key, '')
        elif isinstance(key, Key) and subkey is None and mode is None and computer is None:
            self.__key = _winreg.OpenKey(key.__key, '')
        elif isinstance(key, (int, _winreg.HKEYType)) and isinstance(subkey, str) and mode is None and computer is None:
            self.__key = _winreg.OpenKey(key, subkey)
        elif isinstance(key, Key) and isinstance(subkey, str) and mode is None and computer is None:
            self.__key = _winreg.OpenKey(key.__key, subkey)
        elif isinstance(key, (int, _winreg.HKEYType)) and subkey is None and isinstance(mode, int) and computer is None:
            self.__key = _winreg.OpenKey(key, '', 0, mode)
        elif isinstance(key, Key) and subkey is None and isinstance(mode, int) and computer is None:
            self.__key = _winreg.OpenKey(key.__key, '', 0, mode)
        elif isinstance(key, (int, _winreg.HKEYType)) and isinstance(subkey, str) and isinstance(mode, int) and computer is None:
            self.__key = _winreg.OpenKey(key, subkey, 0, mode)
        elif isinstance(key, Key) and isinstance(subkey, str) and isinstance(mode, int) and computer is None:
            self.__key = _winreg.OpenKey(key.__key, subkey, 0, mode)
        elif isinstance(key, int) and subkey is None and mode is None and isinstance(computer, str):
            self.__key = _winreg.ConnectRegistry(computer, key)
        elif isinstance(key, int) and isinstance(subkey, str) and mode is None and isinstance(computer, str):
            self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer, key), subkey)
        elif isinstance(key, int) and subkey is None and isinstance(mode, int) and isinstance(computer, str):
            self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer, key), '', 0, mode)
        elif isinstance(key, int) and isinstance(subkey, str) and isinstance(mode, int) and isinstance(computer, str):
            self.__key = _winreg.OpenKey(_winreg.ConnectRegistry(computer, key), subkey, 0, mode)
        else:
            raise TypeError, 'Please check documentation.'
        self.__keys = Keys(self.__key)
        self.__values = Values(self.__key)
        self.__info = Info(self.__key)
        self.__repr = 'Key(%s)' % ', '.join([repr(key)] + ['%s=%r' % (key, value) for key, value in zip(('subkey', 'mode', 'computer'), (subkey, mode, computer)) if value is not None])

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def save(self, file_name):
        'Save this key to file.'
        _winreg.SaveKey(self.__key, file_name)

    def load(self, subkey, file_name):
        'Load subkey from file.'
        _winreg.LoadKey(self.__key, subkey, file_name)

    def __get_keys(self):
        'Private class method.'
        return self.__keys

    def __set_keys(self, keys):
        'Private class method.'
        if isinstance(keys, str):
            _winreg.CreateKey(self.__key, keys)
        elif isinstance(keys, (list, tuple)):
            for key in keys:
                self.keys = key
        else:
            raise TypeError, 'Key Could Not Be Created'

    def __del_keys(self):
        'Private class method.'
        try:
            while True:
                _winreg.DeleteKey(self.__key, _winreg.EnumKey(self.__key, 0))
        except EnvironmentError:
            pass

    def __get_values(self):
        'Private class method.'
        return self.__values

    def __set_values(self, values):
        'Private class method.'
        if isinstance(values, str):
            _winreg.SetValueEx(self.__key, values, 0, REG.SZ, _winreg.QueryValue(self.__key, ''))
        elif isinstance(values, (list, tuple)):
            for value in values:
                self.values = value
        else:
            raise TypeError, 'Value Could Not Be Created'

    def __del_values(self):
        'Private class method.'
        try:
            while True:
                _winreg.DeleteValue(self.__key, _winreg.EnumValue(self.__key, 0)[0])
        except EnvironmentError:
            pass

    def __get_value(self):
        'Private class method.'
        return _winreg.QueryValue(self.__key, '')

    def __set_value(self, value):
        'Private class method.'
        _winreg.SetValue(self.__key, '', REG.SZ, value)

    def __del_value(self):
        'Private class method.'
        _winreg.DeleteValue(self.__key, '')

    def __get_info(self):
        'Private class method.'
        return self.__info

    keys = property(__get_keys, __set_keys, __del_keys, 'Keys of this key.')
    values = property(__get_values, __set_values, __del_values, 'Values of this key.')
    value = property(__get_value, __set_value, __del_value, 'Value of this key.')
    info = property(__get_info, doc='Information about this key.')

################################################################################

class Keys(object):

    'Keys(key) -&gt; Keys'

    def __init__(self, key):
        'Initialize the Keys object.'
        self.__key = key
        self.__repr = 'Keys(%r)' % key

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def __len__(self):
        'Return the number of keys.'
        return _winreg.QueryInfoKey(self.__key)[0]

    def __getitem__(self, key):
        'Return the specified key.'
        return Key(self.__key, key)

    def __setitem__(self, key, value):
        'Assign the item to a key.'
        key = Key(_winreg.CreateKey(self.__key, key), mode=KEY.ALL_ACCESS)
        for name in value.values:
            key.values[name] = value.values[name]
        for name in value.keys:
            key.keys[name] = value.keys[name]

    def __delitem__(self, key):
        'Delete the specified key.'
        _winreg.DeleteKey(self.__key, key)

    def __iter__(self):
        'Iterate over the key names.'
        return iter(tuple(_winreg.EnumKey(self.__key, index) for index in xrange(_winreg.QueryInfoKey(self.__key)[0])))

    def __contains__(self, item):
        'Check for a key\'s existence.'
        item = item.lower()
        for index in xrange(_winreg.QueryInfoKey(self.__key)[0]):
            if _winreg.EnumKey(self.__key, index).lower() == item:
                return True
        return False

################################################################################

class Values(object):

    'Values(key) -&gt; Values'

    TYPES = REG_NONE, REG_SZ, REG_EXPAND_SZ, REG_BINARY, REG_DWORD, REG_DWORD_BIG_ENDIAN, REG_LINK, REG_MULTI_SZ, REG_RESOURCE_LIST, REG_FULL_RESOURCE_DESCRIPTOR, REG_RESOURCE_REQUIREMENTS_LIST, REG_QWORD

    def __init__(self, key):
        'Initialize the Values object.'
        self.__key = key
        self.__repr = 'Values(%r)' % key

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def __len__(self):
        'Return the number of values.'
        return _winreg.QueryInfoKey(self.__key)[1]

    def __getitem__(self, key):
        'Return the specified value.'
        item_value, item_type = _winreg.QueryValueEx(self.__key, key)
        return self.TYPES[item_type](item_value)

    def __setitem__(self, key, value):
        'Assign the item to a value.'
        if isinstance(value, self.TYPES):
            _winreg.SetValueEx(self.__key, key, 0, list(self.TYPES).index(value.__class__), value.value)
        else:
            _winreg.SetValueEx(self.__key, key, 0, _winreg.QueryValueEx(self.__key, key)[1], value)

    def __delitem__(self, key):
        'Delete the specified value.'
        _winreg.DeleteValue(self.__key, key)

    def __iter__(self):
        'Iterate over the value names.'
        return iter(tuple(_winreg.EnumValue(self.__key, index)[0] for index in xrange(_winreg.QueryInfoKey(self.__key)[1])))

    def __contains__(self, item):
        'Check for a value\'s existence.'
        item = item.lower()
        for index in xrange(_winreg.QueryInfoKey(self.__key)[1]):
            if _winreg.EnumValue(self.__key, index)[0].lower() == item:
                return True
        return False

################################################################################

class Info(object):

    'Info(key) -&gt; Info'

    def __init__(self, key):
        'Initialize the Info object.'
        self.__key = key
        self.__repr = 'Info(%r)' % key

    def __repr__(self):
        'Return the object\'s representation.'
        return self.__repr

    def __get_keys(self):
        'Private class method.'
        return _winreg.QueryInfoKey(self.__key)[0]

    def __get_values(self):
        'Private class method.'
        return _winreg.QueryInfoKey(self.__key)[1]

    def __get_modified(self):
        'Private class method.'
        return _winreg.QueryInfoKey(self.__key)[2]

    def __get_difference(self):
        'Private class method.'
        return _time.time() + 11644473600.0 - self.modified / 10000000.0

    keys = property(__get_keys, doc='Number of keys.')
    values = property(__get_values, doc='Number of values.')
    modified = property(__get_modified, doc='Time last modified.')
    difference = property(__get_difference, doc='Seconds since modified.')

################################################################################

if __name__ == '__main__':
    def echo(key, prefix=''):
        for name in key.values:
            print '    ' + name + ' = ' + repr(key.values[name])
        for name in key.keys:
            print prefix + '\\' + name
            echo(key.keys[name], prefix + '\\' + name)
    key = '''\
SOFTWARE\\Network Associates\\TVD\\Shared Components\\\
On Access Scanner\\McShield\\Configuration\\Default'''
    server_list = open('server_test.txt')
    for computer in server_list:
        echo(Registry(computer).HKEY_LOCAL_MACHINE.keys[key])
    server_list.close()
</snippet></ROW><ROW><id>2424939</id><snippet>r'(?m)^#define (?:.*\\\r?\n)*.*$'
</snippet></ROW><ROW><id>2424939</id><snippet>(?:.*\\\r?\n)*</snippet></ROW><ROW><id>2424939</id><snippet>.*$</snippet></ROW><ROW><id>2425143</id><snippet>def allbutlast(iterable):
    it = iter(iterable)
    current = it.next()
    for i in it:
        yield current
        current = i


&gt;&gt;&gt; list(allbutlast([1,2,3]))
[1, 2]
</snippet></ROW><ROW><id>2425182</id><snippet>&lt;div tal:replace="structure provider:plone.resourceregistries.styles" /&gt;
</snippet></ROW><ROW><id>2425182</id><snippet>&lt;div tal:replace="structure provider:plone.resourceregistries.scripts" /&gt;
&lt;div tal:replace="structure provider:plone.resourceregistries.kineticstylesheets" /&gt;
</snippet></ROW><ROW><id>2425281</id><snippet>setattr(my_class_instance, 'attr_name', attr_value)
</snippet></ROW><ROW><id>2425347</id><snippet>import itertools

gen = iter([1,2,3])
peek = gen.next()
print list(itertools.chain([peek], gen))
</snippet></ROW><ROW><id>2425642</id><snippet>select_related()</snippet></ROW><ROW><id>2425642</id><snippet>Employee.objects.select_related()
</snippet></ROW><ROW><id>2425687</id><snippet>def deleteitem():
  showlist()

  with open("todo.txt") as f:
    lines = f.readlines()
  if len(lines) == 0:  # completely empty file
    return  # handle appropriately
  prompt = "Enter number to delete (1-%d), or 0 to abort: " % len(lines)
  while True:
    input = raw_input(prompt)
    try:
      input = int(input, 10)
    except ValueError:
      print "Invalid input."
    else:
      if 0 &lt;= input &lt;= len(lines):
        break
      print "Input out of range."
  if input == 0:
    return
  input -= 1  # adjust from [1,len] to [0,len)

  #del lines[input]  # if you want to remove that line completely
  lines[input] = "\n"  # or just make that line blank (what you had)

  with open("todo.txt", "w") as f:
    f.writelines(lines)

  showlist()
</snippet></ROW><ROW><id>2425785</id><snippet>class Thing(object):
    x = 1
something = Thing()
something.y = something.x
</snippet></ROW><ROW><id>2425785</id><snippet>__dict__</snippet></ROW><ROW><id>2425785</id><snippet>object.__setattr__</snippet></ROW><ROW><id>2425844</id><snippet>for k in s[i:i+60]:
    req.write('&lt;td&gt;%s&lt;/td&gt;' % k)
req.write('&lt;/tr&gt;')
</snippet></ROW><ROW><id>2425853</id><snippet>if request.method == 'POST':
    form = ProgrammeForm(user=request.user, data=request.POST)
    if form.is_valid():
        form.save()
else: ##this is the changge
    form = ProgrammeForm(request.user)
return render_to_response('form.html', {'form': form }) 
</snippet></ROW><ROW><id>2425874</id><snippet>WSGIPythonEggs</snippet></ROW><ROW><id>2426293</id><snippet>class TimeoutTransport(xmlrpclib.Transport):
    timeout = 10.0
    def set_timeout(self, timeout):
        self.timeout = timeout
    def make_connection(self, host):
        h = httplib.HTTP(host, timeout=self.timeout)
        return h

t = TimeoutTransport()
t.set_timeout(20.0)
server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=t)
</snippet></ROW><ROW><id>2426358</id><snippet>for (firstitem = 1 to maxitemnumber)
  for (seconditem = firstitemnumber+1 to maxitemnumber)
    compare(firstitem, seconditem)
</snippet></ROW><ROW><id>2426358</id><snippet>........
x.......
xx......
xxx.....
xxxx....
xxxxx...
xxxxxx..
xxxxxxx.
</snippet></ROW><ROW><id>2426429</id><snippet>Safari</snippet></ROW><ROW><id>2426429</id><snippet>HTTP_USER_AGENT</snippet></ROW><ROW><id>2426973</id><snippet>import weakref

class A(object):
  _get_obj_cache = weakref.WeakValueDictionary()
  @classmethod
  def get_obj(cls, identifier):
    cache = cls._get_obj_cache
    obj = cache.get((cls, identifier))
    if obj is None:
      obj = cache[(cls, identifier)] = cls(identifier)
    return obj

class B(A):
  pass
</snippet></ROW><ROW><id>2426973</id><snippet>cls(identifier)</snippet></ROW><ROW><id>2427007</id><snippet>In [1]: L = ['A', 'B', 'C']
In [2]: " ".join(L)
Out[2]: 'A B C'
</snippet></ROW><ROW><id>2427055</id><snippet>public static IEnumerable&lt;TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(
        this IEnumerable&lt;TFirst&gt; first,
        IEnumerable&lt;TSecond&gt; second,
        Func&lt;TFirst, TSecond, TResult&gt; func);
</snippet></ROW><ROW><id>2427308</id><snippet>strptime</snippet></ROW><ROW><id>2427308</id><snippet>strptime</snippet></ROW><ROW><id>2427581</id><snippet>datetime.datetime(year, 1, 1) + datetime.timedelta(days - 1)
</snippet></ROW><ROW><id>2427871</id><snippet>#include &lt;cstdio&gt;

int main() {
  float f = 42.79;
  printf("%.2f == %a\n", f, f);  
  fscanf(stdin, "%a", &amp;f);
  printf("%.2f == %a\n", f, f);  
}
</snippet></ROW><ROW><id>2427871</id><snippet>$ g++ *.cpp &amp;&amp; (python -c'print 12.34.hex()' | ./a.out )
</snippet></ROW><ROW><id>2427871</id><snippet>42.79 == 0x1.5651ecp+5
12.34 == 0x1.8ae148p+3
</snippet></ROW><ROW><id>2428119</id><snippet>import json

from django.http import HttpResponse

response_data = {}
response_data['result'] = 'failed'
response_data['message'] = 'You messed up'
return HttpResponse(json.dumps(response_data), content_type="application/json")
</snippet></ROW><ROW><id>2428132</id><snippet>"hurr..\n..durr".encode('string-escape')
</snippet></ROW><ROW><id>2428251</id><snippet>def getItem(item_id):
    q = Item.all()
    q.filter("itemid = ", int(item_id))
</snippet></ROW><ROW><id>2428336</id><snippet>logRequests=False</snippet></ROW><ROW><id>2428336</id><snippet>server = SimpleXMLRPCServer.SimpleXMLRPCServer((host, port), logRequests=False)
</snippet></ROW><ROW><id>2428460</id><snippet>__getattr__</snippet></ROW><ROW><id>2428460</id><snippet>__init__</snippet></ROW><ROW><id>2428460</id><snippet>__slots__</snippet></ROW><ROW><id>2428460</id><snippet>__new__</snippet></ROW><ROW><id>2428460</id><snippet>__str__</snippet></ROW><ROW><id>2428460</id><snippet>__repr__</snippet></ROW><ROW><id>2428460</id><snippet>__call__</snippet></ROW><ROW><id>2428460</id><snippet>__getitem__</snippet></ROW><ROW><id>2428460</id><snippet>__len__</snippet></ROW><ROW><id>2428747</id><snippet>''' Rest of your docstring and then...

    &gt;&gt;&gt; '%.2f' % funcreturningfloat()
    '123.45'

'''
</snippet></ROW><ROW><id>2428785</id><snippet>time</snippet></ROW><ROW><id>2428785</id><snippet>strptime</snippet></ROW><ROW><id>2428785</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; t = time.strptime("2010-02-02 7:31", "%Y-%m-%d %H:%M")
&gt;&gt;&gt; t
(2010, 2, 2, 7, 31, 0, 1, 33, -1)
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime(*t[:6])
datetime.datetime(2010, 2, 2, 7, 31)
</snippet></ROW><ROW><id>2428823</id><snippet>ls</snippet></ROW><ROW><id>2428823</id><snippet>ls -ld --full-time /tmp
</snippet></ROW><ROW><id>2428823</id><snippet>drwxrwxrwt 11 root root 69632 2010-03-11 13:16:30.000000000 -0800 /tmp
</snippet></ROW><ROW><id>2428823</id><snippet>drwxrwxrwt 16 root root 20480 2010-03-11 21:20:02.088188962 +0000 /tmp
</snippet></ROW><ROW><id>2428876</id><snippet>attr</snippet></ROW><ROW><id>2428876</id><snippet>def default_action():
    # do something else

action = getattr(obj, 'attr', default_action)

action()
</snippet></ROW><ROW><id>2428888</id><snippet>__del__</snippet></ROW><ROW><id>2429063</id><snippet>f = lambda x: f1(f2(x))
</snippet></ROW><ROW><id>2429100</id><snippet>from collections import Counter
counter = Counter(x for x in testGroupList if x&gt;=0)
minval = min(Counter) 
maxval = max(Counter)
messages={0:"(Test Group %(id)d missing)",
          1:"%(id)d",
          2:"(Test Group %(id)d duplicated %(val)d times)"}
for id in range(minval,maxval+1): 
    val = counter[id]
    print(messages[min(val,2)]%vars())
</snippet></ROW><ROW><id>2429100</id><snippet>from collections import defaultdict
counter = defaultdict(int)
for k in testGroupList:
    if k&gt;=0:counter[k]+=1

minval = min(counter) 
maxval = max(counter)
messages={0:"(Test Group %(id)d missing)",
          1:"%(id)d",
          2:"(Test Group %(id)d duplicated %(val)d times)"}
for id in range(minval,maxval+1): 
    val = counter[id]
    print messages[min(val,2)]%vars(),
</snippet></ROW><ROW><id>2429118</id><snippet>for item in list[:-1]:
    print "Not last: ", item
print "Last: ", list[-1]
</snippet></ROW><ROW><id>2429118</id><snippet># itr is short for "iterable" and can be any sequence, iterator, or generator

def notlast(itr):
    itr = iter(itr)  # ensure we have an iterator
    prev = itr.next()
    for item in itr:
        yield prev
        prev = item

# lst is short for "list" and does not shadow the built-in list()
# 'L' is also commonly used for a random list name
lst = range(4)
for x in notlast(lst):
    print "Not last: ", x
print "Last: ", lst[-1]
</snippet></ROW><ROW><id>2429118</id><snippet>import itertools
notlast = lambda lst:itertools.islice(lst, 0, len(lst)-1)
</snippet></ROW><ROW><id>2429175</id><snippet>isinstance(a, A)</snippet></ROW><ROW><id>2429175</id><snippet>isinstance</snippet></ROW><ROW><id>2429175</id><snippet>A</snippet></ROW><ROW><id>2429175</id><snippet>A</snippet></ROW><ROW><id>2429175</id><snippet>is</snippet></ROW><ROW><id>2429242</id><snippet>getattr(model, 'title_en')
</snippet></ROW><ROW><id>2429242</id><snippet>__getattr__</snippet></ROW><ROW><id>2429242</id><snippet>__getattribute__</snippet></ROW><ROW><id>2429536</id><snippet>Decimal.__gt__</snippet></ROW><ROW><id>2429536</id><snippet>Decimal.__gt__</snippet></ROW><ROW><id>2429536</id><snippet>Decimal._convert_other</snippet></ROW><ROW><id>2429536</id><snippet>Decimal._convert_other</snippet></ROW><ROW><id>2429536</id><snippet>Decimal._convert_other</snippet></ROW><ROW><id>2429536</id><snippet>long</snippet></ROW><ROW><id>2429536</id><snippet>int</snippet></ROW><ROW><id>2429536</id><snippet>Decimal</snippet></ROW><ROW><id>2429536</id><snippet>TypeException</snippet></ROW><ROW><id>2429536</id><snippet>NotImplemented</snippet></ROW><ROW><id>2429600</id><snippet>i</snippet></ROW><ROW><id>2429600</id><snippet>i = 0
while i &lt; some_value:
    if cond...:
        i+=1
    ...code...
    i+=1
</snippet></ROW><ROW><id>2429600</id><snippet>for(..a..; ..b..; ..c..) {
    ...code...
}
</snippet></ROW><ROW><id>2429600</id><snippet>..a..
while(..b..) {
     ..code..
     ..c..
}
</snippet></ROW><ROW><id>2429600</id><snippet>for x in ..a..:
    ..code..
</snippet></ROW><ROW><id>2429600</id><snippet>my_iter = iter(..a..)
while (my_iter is not empty):
    x = my_iter.next()
    ..code..
</snippet></ROW><ROW><id>2429654</id><snippet>CACHE_LIST_1</snippet></ROW><ROW><id>2429654</id><snippet>switch</snippet></ROW><ROW><id>2429706</id><snippet>from PIL import Image
image = Image.open("pepper.png")
bg = image.getpixel((0,0))
width, height = image.size
bg_count = next(n for n,c in image.getcolors(width*height) if c==bg)
img_count = width*height - bg_count
img_percent = img_count*100.0/width/height
</snippet></ROW><ROW><id>2429912</id><snippet>Zip</snippet></ROW><ROW><id>2429912</id><snippet>Reverse</snippet></ROW><ROW><id>2429957</id><snippet>&gt;&gt;&gt; class Bah(object): pass
... 
&gt;&gt;&gt; x = Bah(23)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: default __new__ takes no parameters
</snippet></ROW><ROW><id>2429957</id><snippet>__init__</snippet></ROW><ROW><id>2429957</id><snippet>traceback</snippet></ROW><ROW><id>2430231</id><snippet>title</snippet></ROW><ROW><id>2430231</id><snippet>str</snippet></ROW><ROW><id>2430231</id><snippet>string</snippet></ROW><ROW><id>2430231</id><snippet>"foo".title()</snippet></ROW><ROW><id>2430231</id><snippet>str.title("foo")</snippet></ROW><ROW><id>2430231</id><snippet>string.title("foo")</snippet></ROW><ROW><id>2430439</id><snippet>make</snippet></ROW><ROW><id>2430439</id><snippet>$(shell cp *.py /usr/bin)
</snippet></ROW><ROW><id>2430474</id><snippet>python-mode</snippet></ROW><ROW><id>2430474</id><snippet>'python-pdbtrack-toggle-stack-tracking</snippet></ROW><ROW><id>2430474</id><snippet>(fset 'add-docstring
   (lambda (&amp;optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("def ...unprintable characters...6\"3" 0 "%d")) arg)))
</snippet></ROW><ROW><id>2430474</id><snippet>(fset 'add-docstring
      (lambda (&amp;optional arg)
        "Keyboard macro."
        (interactive "p")
        (kmacro-exec-ring-item `(,(kbd "C-r def C-n C-a C-m C-p C-i C-u 6 \" C-u 3 C-b") 0 "%d")
                               arg)))
</snippet></ROW><ROW><id>2430474</id><snippet>M-x add-docstring</snippet></ROW><ROW><id>2430474</id><snippet>(add-hook 'python-mode-hook
          (lambda () (define-key python-mode-map (kbd "C-c C-d") 'add-docstring)))
</snippet></ROW><ROW><id>2430474</id><snippet>python-mode</snippet></ROW><ROW><id>2430474</id><snippet>python.el</snippet></ROW><ROW><id>2430474</id><snippet>kbd</snippet></ROW><ROW><id>2430474</id><snippet>eval-after-load</snippet></ROW><ROW><id>2430474</id><snippet>(add-hook 'python-mode-hook 'my-python-customizations)
(defun my-python-customizations ()
  "set up my personal customizations for python mode"
  ;; put other customizations in here
  (define-key python-mode-map (kbd "C-c C-d") 'add-docstring))
(defun add-docstring (&amp;optional arg)
  "Keyboard macro."
  (interactive "p")
  (kmacro-exec-ring-item `(,(kbd "C-r def C-n C-a C-m C-p C-i C-u 6 \" C-u 3 C-b") 0 "%d")
                         arg))
</snippet></ROW><ROW><id>2430474</id><snippet>(remove-hook 'python-mode-hook 'my-python-customizations)</snippet></ROW><ROW><id>2430474</id><snippet>.emacs</snippet></ROW><ROW><id>2430483</id><snippet>&gt;&gt;&gt; from minimock import mock
&gt;&gt;&gt; import os.path
&gt;&gt;&gt; mock('os.path.isfile', returns=True)
</snippet></ROW><ROW><id>2430483</id><snippet>os.path.isfile("blah")</snippet></ROW><ROW><id>2430483</id><snippet>True</snippet></ROW><ROW><id>2430510</id><snippet>StopIteration</snippet></ROW><ROW><id>2430510</id><snippet>for</snippet></ROW><ROW><id>2430510</id><snippet>else</snippet></ROW><ROW><id>2430550</id><snippet>ping</snippet></ROW><ROW><id>2430550</id><snippet>import os
while(1):
    ping = os.popen('ping www.google.com -n 1')
    result = ping.readlines()
    msLine = result[-1].strip()
    print msLine.splot(' = ')[-1]
</snippet></ROW><ROW><id>2430781</id><snippet>__get__</snippet></ROW><ROW><id>2430781</id><snippet>def plot_svg(view):

    def wrapper(*args, **kwargs):
        print args, kwargs
        fig = view(*args, **kwargs)
        canvas = FigureCanvas(fig)
        response = HttpResponse(content_type='image/svg+xml')
        canvas.print_svg(response)
        return response

    return wrapper
</snippet></ROW><ROW><id>2430781</id><snippet>self</snippet></ROW><ROW><id>2430781</id><snippet>__get__</snippet></ROW><ROW><id>2430781</id><snippet>__get__</snippet></ROW><ROW><id>2430781</id><snippet>__get__</snippet></ROW><ROW><id>2430781</id><snippet>view</snippet></ROW><ROW><id>2430781</id><snippet>self.view</snippet></ROW><ROW><id>2430781</id><snippet>self</snippet></ROW><ROW><id>2431550</id><snippet>#@PydevCodeAnalysisIgnore
</snippet></ROW><ROW><id>2432175</id><snippet>from django.core.management.commands.compilemessages import compile_messages
</snippet></ROW><ROW><id>2432175</id><snippet>setup.py</snippet></ROW><ROW><id>2432175</id><snippet>setup</snippet></ROW><ROW><id>2432175</id><snippet>setup</snippet></ROW><ROW><id>2432406</id><snippet>&gt;&gt;&gt; table = [(1L,), (1L,), (1L,), (2L,), (2L,), (2L,), (3L,), (3L,)]
&gt;&gt;&gt; [int(e[0]) for e in table]
[1, 1, 1, 2, 2, 2, 3, 3]

&gt;&gt;&gt; [str(e[0]) for e in table]
['1', '1', '1', '2', '2', '2', '3', '3']
</snippet></ROW><ROW><id>2432689</id><snippet>readline()</snippet></ROW><ROW><id>2432689</id><snippet>communicate()</snippet></ROW><ROW><id>2432689</id><snippet>shell=True</snippet></ROW><ROW><id>2432732</id><snippet>commit</snippet></ROW><ROW><id>2432732</id><snippet>conn</snippet></ROW><ROW><id>2432732</id><snippet>autoflush=False</snippet></ROW><ROW><id>2432992</id><snippet>import png
from StringIO import StringIO

# bitmap data
s = ['110010010011',
     '101011010100',
     '110010110101',
     '100010010011']
s = map(lambda x: map(int, x), s)

f = StringIO()
w = png.Writer(len(s[0]), len(s), greyscale=True, bitdepth=1)
w.write(f, s)

# binary PNG data
print f.getvalue()
</snippet></ROW><ROW><id>2432992</id><snippet>http://chart.apis.google.com/chart?chst=d_text_outline&amp;chld=000000|32|h|FFFFFF|_|Render text to image|with Google Charts.|Some Unicode too:|Здра́вствуйте|こんにちは|नमस्ते|你好|שלו</snippet></ROW><ROW><id>2433059</id><snippet>from collections import defaultdict
all_classes = defaultdict(set)
for group in groups_and_classes.values():
    for c, vals in group.iteritems():
        all_classes[c].update(set(vals))
</snippet></ROW><ROW><id>2433225</id><snippet>range(33, 127)</snippet></ROW><ROW><id>2433225</id><snippet>chars = [chr(c) for c in range(33, 127)]

...

for s0 in chars:
    for s1 in chars:
        for s2 in chars:
            b = l + s0 + s1 + s2 + '\n'
            f.write(b)
            hh += 1
</snippet></ROW><ROW><id>2433287</id><snippet>PolarAxes</snippet></ROW><ROW><id>2433287</id><snippet>import numpy as N
import matplotlib.pyplot as P

from matplotlib.projections import PolarAxes, register_projection
from matplotlib.transforms import Affine2D, Bbox, IdentityTransform

class NorthPolarAxes(PolarAxes):
    '''
    A variant of PolarAxes where theta starts pointing north and goes
    clockwise.
    '''
    name = 'northpolar'

    class NorthPolarTransform(PolarAxes.PolarTransform):
        def transform(self, tr):
            xy   = N.zeros(tr.shape, N.float_)
            t    = tr[:, 0:1]
            r    = tr[:, 1:2]
            x    = xy[:, 0:1]
            y    = xy[:, 1:2]
            x[:] = r * N.sin(t)
            y[:] = r * N.cos(t)
            return xy

        transform_non_affine = transform

        def inverted(self):
            return NorthPolarAxes.InvertedNorthPolarTransform()

    class InvertedNorthPolarTransform(PolarAxes.InvertedPolarTransform):
        def transform(self, xy):
            x = xy[:, 0:1]
            y = xy[:, 1:]
            r = N.sqrt(x*x + y*y)
            theta = N.arctan2(y, x)
            return N.concatenate((theta, r), 1)

        def inverted(self):
            return NorthPolarAxes.NorthPolarTransform()

    def _set_lim_and_transforms(self):
        PolarAxes._set_lim_and_transforms(self)
        self.transProjection = self.NorthPolarTransform()
        self.transData = (
            self.transScale + 
            self.transProjection + 
            (self.transProjectionAffine + self.transAxes))
        self._xaxis_transform = (
            self.transProjection +
            self.PolarAffine(IdentityTransform(), Bbox.unit()) +
            self.transAxes)
        self._xaxis_text1_transform = (
            self._theta_label1_position +
            self._xaxis_transform)
        self._yaxis_transform = (
            Affine2D().scale(N.pi * 2.0, 1.0) +
            self.transData)
        self._yaxis_text1_transform = (
            self._r_label1_position +
            Affine2D().scale(1.0 / 360.0, 1.0) +
            self._yaxis_transform)

register_projection(NorthPolarAxes)

angle = N.arange(0, 360, 10, dtype=float) * N.pi / 180.0
arbitrary_data = (N.abs(N.sin(angle)) + 0.1 * 
    (N.random.random_sample(size=angle.shape) - 0.5))

P.clf()
P.subplot(1, 1, 1, projection='northpolar')
P.plot(angle, arbitrary_data)
P.show()
</snippet></ROW><ROW><id>2433615</id><snippet>A[A&lt;=0.5] = 0.0
</snippet></ROW><ROW><id>2433615</id><snippet>vectorized</snippet></ROW><ROW><id>2433615</id><snippet>otypes</snippet></ROW><ROW><id>2433615</id><snippet>&lt;0.5</snippet></ROW><ROW><id>2433615</id><snippet>return 0</snippet></ROW><ROW><id>2433615</id><snippet>return 0.0
</snippet></ROW><ROW><id>2433615</id><snippet>my_func</snippet></ROW><ROW><id>2433615</id><snippet>f = np.vectorize(my_func, otypes=[np.float])
</snippet></ROW><ROW><id>2433678</id><snippet>ifile.read()</snippet></ROW><ROW><id>2433701</id><snippet>options()</snippet></ROW><ROW><id>2433701</id><snippet>eagerload()</snippet></ROW><ROW><id>2433701</id><snippet>eagerload_all()</snippet></ROW><ROW><id>2433701</id><snippet>Controlled</snippet></ROW><ROW><id>2433701</id><snippet>changes</snippet></ROW><ROW><id>2433701</id><snippet>DocumentChange</snippet></ROW><ROW><id>2433701</id><snippet>dco</snippet></ROW><ROW><id>2433701</id><snippet>Dco</snippet></ROW><ROW><id>2433701</id><snippet>eagerload_all()</snippet></ROW><ROW><id>2433701</id><snippet>declarative</snippet></ROW><ROW><id>2433701</id><snippet>from sqlalchemy.orm import eagerload, eagerload_all
...
controlled_docs = (m.Session.query(m.Controlled)
    .options(eagerload_all('changes.dco'))
    .order_by('number')
    .all())
</snippet></ROW><ROW><id>2433758</id><snippet>C:\Temp&gt;import.py
</snippet></ROW><ROW><id>2433758</id><snippet>#!/usr/bin/env python
import sys
print sys.executable
import xml.etree.ElementTree as ET
print "Success!"
</snippet></ROW><ROW><id>2433856</id><snippet>Trapping-but-not-handling = supressing</snippet></ROW><ROW><id>2433985</id><snippet>''.join</snippet></ROW><ROW><id>2433985</id><snippet>import cStringIO

class MyWriter(object):

    def __init__(self, stdout):
        self.stdout = stdout
        self.dumps = cStringIO.StringIO()
        self.final = None

    def write(self, text):
        self.stdout.write(smart_unicode(text).encode('cp1251'))
        self.dumps.write(text)

    def close(self):
        self.stdout.close()
        self.final = self.dumps.getvalue()
        self.dumps.close()

    def getvalue(self):
        if self.final is not None:
            return self.final
        return self.dumps.getvalue()
</snippet></ROW><ROW><id>2433985</id><snippet>getvalue</snippet></ROW><ROW><id>2433985</id><snippet>self.final</snippet></ROW><ROW><id>2433985</id><snippet>getvalue</snippet></ROW><ROW><id>2433985</id><snippet>print</snippet></ROW><ROW><id>2433985</id><snippet>write</snippet></ROW><ROW><id>2433985</id><snippet>getvalue</snippet></ROW><ROW><id>2433985</id><snippet>extend</snippet></ROW><ROW><id>2433985</id><snippet>array.array</snippet></ROW><ROW><id>2434254</id><snippet>f['username'] = username</snippet></ROW><ROW><id>2434254</id><snippet>f['password'] = password</snippet></ROW><ROW><id>2434254</id><snippet>f.click()</snippet></ROW><ROW><id>2434258</id><snippet>import scipy.io
import numpy as np
my_list = np.zeros((3,), dtype=np.object)
my_list[:] = ['abc', 'def', 'ghi']
scipy.io.savemat('test.mat', mdict={'my_list': my_list})
</snippet></ROW><ROW><id>2434278</id><snippet>import itertools

def getxy(point): return point[:2]

sortedpoints = sorted(points, key=getxy)

results = []

for xy, g in itertools.groupby(sortedpoints, key=getxy):
  results.append(max(g, key=operator.itemgetter(2)))
</snippet></ROW><ROW><id>2434278</id><snippet>(x,y)</snippet></ROW><ROW><id>2434278</id><snippet>z</snippet></ROW><ROW><id>2434278</id><snippet>z</snippet></ROW><ROW><id>2434278</id><snippet>(x, y)</snippet></ROW><ROW><id>2434759</id><snippet>re.search(r"\((?P&lt;remixer&gt;[^)]+) (Remix)\)", "Title (Blabla) (Menda Remix)")
</snippet></ROW><ROW><id>2434836</id><snippet>'0b'</snippet></ROW><ROW><id>2434836</id><snippet>&gt;&gt;&gt; '{:b}'.format(123)            #{0:b} in python 2.6
'1111011'
</snippet></ROW><ROW><id>2435074</id><snippet>if hasattr(f, "__call__"):
</snippet></ROW><ROW><id>2435447</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps( {'vld_id':1,'vls_error':2,'something_else':True} )
'{"vld_id": 1, "something_else": true, "vls_error": 2}'
</snippet></ROW><ROW><id>2435447</id><snippet>&gt;&gt;&gt; json.loads( '{"vld_id": 1, "something_else": true, "vls_error": 2}' )
{u'vld_id': 1, u'something_else': True, u'vls_error': 2}
</snippet></ROW><ROW><id>2435882</id><snippet>get_or_create()</snippet></ROW><ROW><id>2435899</id><snippet>def __unicode__(self):
    return self.Team_Name
</snippet></ROW><ROW><id>2436061</id><snippet>self</snippet></ROW><ROW><id>2436061</id><snippet>import inspect
import functools

def decorator(f):
  args = inspect.getargspec(f)
  if args and args[0] == 'self':
     # looks like a (future) method...
  else:
     # looks like a "real" function
     @functools.wraps(f)
     def wrapper  # etc etc
</snippet></ROW><ROW><id>2436061</id><snippet>wrapper._f = f</snippet></ROW><ROW><id>2436061</id><snippet>__init__</snippet></ROW><ROW><id>2436061</id><snippet>self</snippet></ROW><ROW><id>2436061</id><snippet>def</snippet></ROW><ROW><id>2436061</id><snippet>f_globals</snippet></ROW><ROW><id>2436061</id><snippet>f_name</snippet></ROW><ROW><id>2436061</id><snippet>self</snippet></ROW><ROW><id>2436061</id><snippet>wrapper._f</snippet></ROW><ROW><id>2436061</id><snippet>__init__</snippet></ROW><ROW><id>2436061</id><snippet>class Foo(Bar): ... # no decorations

@decorator
def f(*a, **k): ...

Foo.f = f   # "a killer"... function becomes method!
</snippet></ROW><ROW><id>2436061</id><snippet>__setattr__</snippet></ROW><ROW><id>2436061</id><snippet>class</snippet></ROW><ROW><id>2436254</id><snippet>class FakeSomethingOrOther( object ):
   def __init__( self ):
       self._count_me= 0
   def method_required_by_test( self ):
       return self.special_answer_required_by_test
   def count_this_method( self, *args, *kw ):
       self._count_me += 1
</snippet></ROW><ROW><id>2436254</id><snippet>class TestSomething( unittest.TestCase ):
    def setUp( self ):
        self.requiredSomething = FakeSomethingOrOther()
        self.requiredSomething.attribute_required_by_test= 12
        self.requiredSomething.special_answer_required_by_test = 32
        self.to_be_tested = ActualThing( self.requiredSomething )
</snippet></ROW><ROW><id>2436341</id><snippet>SystemError: dynamic module not initialized properly</snippet></ROW><ROW><id>2436341</id><snippet>_PyImport_LoadDynamicModule</snippet></ROW><ROW><id>2436341</id><snippet>Python/importdl.c</snippet></ROW><ROW><id>2436341</id><snippet>_functools.so</snippet></ROW><ROW><id>2436341</id><snippet>ldd mod_wsgi.so</snippet></ROW><ROW><id>2436341</id><snippet>libpython</snippet></ROW><ROW><id>2436341</id><snippet>./configure --with-python=/opt/python2.6/bin/python2.6
</snippet></ROW><ROW><id>2436341</id><snippet>sys.prefix</snippet></ROW><ROW><id>2436341</id><snippet>WSGIPythonHome</snippet></ROW><ROW><id>2436341</id><snippet>/usr/lib</snippet></ROW><ROW><id>2436341</id><snippet>/opt/python2.6</snippet></ROW><ROW><id>2436341</id><snippet>/opt/python2.6</snippet></ROW><ROW><id>2436341</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>2436341</id><snippet>LD_LIBRARY_PATH=/opt/python2.6/lib:$LD_LIBRARY_PATH ldd mod_wsgi.so
</snippet></ROW><ROW><id>2436341</id><snippet>.wsgi</snippet></ROW><ROW><id>2436341</id><snippet>def application(environ, start_response):
    status = '200 OK'
    start_response(status, [('Content-type', 'text/plain')])

    try:
        import sys
        return ['\n'.join([sys.prefix, sys.executable])]
    except:
        import traceback as tb
        return [tb.format_exc()]
</snippet></ROW><ROW><id>2436341</id><snippet>WSGIPythonHome /opt/python2.6
</snippet></ROW><ROW><id>2436352</id><snippet>weakref</snippet></ROW><ROW><id>2436374</id><snippet>struct ConnectionBaseWrap : ConnectionBase, wrapper&lt;ConnectionBase&gt;
{
    void OnEvent(const Overload_a &amp;obj) {
        if (override f = get_override("OnEventOverloadA"))
            f(obj);
    }
    void OnEvent(const Overload_b &amp;obj) {
        if (override f = get_override("OnEventOverloadB"))
            f(obj);
    }
};

BOOST_PYTHON_MODULE(yourmodule) {
    class_&lt;ConnectionBaseWrap, boost::noncopyable&gt;("ConnectionBase")
        //Your additional definitions here.
    ;
}
</snippet></ROW><ROW><id>2436374</id><snippet>.def</snippet></ROW><ROW><id>2436374</id><snippet>OnEventOverloadA</snippet></ROW><ROW><id>2436374</id><snippet>OnEventOverloadB</snippet></ROW><ROW><id>2436374</id><snippet>OnEvent</snippet></ROW><ROW><id>2436587</id><snippet>__call__</snippet></ROW><ROW><id>2436623</id><snippet>[m.group(1) for l in lines for m in [regex.search(l)] if m]
</snippet></ROW><ROW><id>2436623</id><snippet>for m in [regex.search(l)]</snippet></ROW><ROW><id>2436631</id><snippet>.hexdigest()</snippet></ROW><ROW><id>2436951</id><snippet>ls data[0-9]*txt|sort -nk1.5|awk 'BEGIN{rn=5;i=1}{while((getline _&lt;$0)&gt;0){print _ &gt;"data_new_"i".txt"}close($0)}NR%rn==0{i++}'
</snippet></ROW><ROW><id>2437199</id><snippet>import datetime

_3AM = datetime.time(hour=3)
_FRI = 4 # Monday=0 for weekday()

def next_friday_3am(now):
    now += datetime.timedelta(days=7)
    if now.time() &lt; _3AM:
        now = now.combine(now.date(),_3AM)
    else:
        now = now.combine(now.date(),_3AM) + datetime.timedelta(days=1)
    return now + datetime.timedelta((_FRI - now.weekday()) % 7)

if __name__ == '__main__':
    start = datetime.datetime.now()
    for i in xrange(7*24*60*60):
        now = start + datetime.timedelta(seconds=i)
        then = next_friday_3am(now)
        assert datetime.timedelta(days=7) &lt; then - now &lt;= datetime.timedelta(days=14)
        assert then.weekday() == _FRI
        assert then.time() == _3AM
</snippet></ROW><ROW><id>2437201</id><snippet>\v</snippet></ROW><ROW><id>2437201</id><snippet>\f</snippet></ROW><ROW><id>2437486</id><snippet>direct_to_template</snippet></ROW><ROW><id>2437486</id><snippet>RequestContext</snippet></ROW><ROW><id>2437486</id><snippet># urls.py
url('^some-url/$', some_view)

# views.py
def some_view(request):
    return render_to_response('template_name.html', context_instance=RequestContext(request))
</snippet></ROW><ROW><id>2437486</id><snippet># urls.py
url('^some-url/$', direct_to_template, {'template': 'template_name.html'})

# views.py doesn't need any code for this view anymore
</snippet></ROW><ROW><id>2437487</id><snippet>jsonValidateReturn = simplejson.dumps({'jsonValidateReturn': array_to_js})
return HttpResponse(jsonValidateReturn, mimetype='application/json') 
</snippet></ROW><ROW><id>2437645</id><snippet>class LimitedSizeDict(OrderedDict):
  def __init__(self, *args, **kwds):
    self.size_limit = kwds.pop("size_limit", None)
    OrderedDict.__init__(self, *args, **kwds)
    self._check_size_limit()

  def __setitem__(self, key, value):
    OrderedDict.__setitem__(self, key, value)
    self._check_size_limit()

  def _check_size_limit(self):
    if self.size_limit is not None:
      while len(self) &gt; self.size_limit:
        self.popitem(last=False)
</snippet></ROW><ROW><id>2437872</id><snippet>pydoc -w imdb
</snippet></ROW><ROW><id>2437872</id><snippet>pydoc -p 9090</snippet></ROW><ROW><id>2438234</id><snippet>adict.has_key(k)</snippet></ROW><ROW><id>2438234</id><snippet>k in adict</snippet></ROW><ROW><id>2438234</id><snippet>if len(doca_dic) &lt; len(docb_dict):
    short_dict, long_dict = doca_dic, docb_dic
else:
    short_dict, long_dict = docb_dic, doca_dic
similarity = 0
for x in short_dict:
    if x in long_dict:
        #calculate the similarity by summing the products of the tf-idf_norm 
        similarity += short_dict[x] * long_dict[x]
</snippet></ROW><ROW><id>2438234</id><snippet>docb = cursor2.fetchall()</snippet></ROW><ROW><id>2438234</id><snippet>similarity = 0
for b_token, b_value in docb:
    if b_token in doca_dic:
        similarity += doca_dic[b_token] * b_value
</snippet></ROW><ROW><id>2438234</id><snippet>similarity = sum(
    doca_dic[k] * docb_dic[k]
    for k in set(doca_dic) &amp; set(docb_dic)
    )
</snippet></ROW><ROW><id>2438234</id><snippet># Doc A
cursor1.execute("SELECT token, tfidf_norm FROM index WHERE doc_id = %s", (docid[i][0]))
doca = cursor1.fetchall()
# Doc B
cursor2.execute("SELECT token, tfidf_norm FROM index WHERE doc_id = %s", (docid[j][0]))
docb = cursor2.fetchall()
if len(doca) &lt; len(docb):
    short_doc, long_doc = doca, docb
else:
    short_doc, long_doc = docb, doca
long_dict = dict(long_doc) # yes, it should be that simple
similarity = 0
for key, value in short_doc:
    if key in long_dict:
        similarity += long_dict[key] * value
</snippet></ROW><ROW><id>2438234</id><snippet>time.time()</snippet></ROW><ROW><id>2438234</id><snippet>C:\junk\so&gt;sqlite3
SQLite version 3.6.14
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; create table atable(docid text, token text, score float,
    primary key (docid, token));
sqlite&gt; insert into atable values('a', 'apple', 12.2);
sqlite&gt; insert into atable values('a', 'word', 29.67);
sqlite&gt; insert into atable values('a', 'zulu', 78.56);
sqlite&gt; insert into atable values('b', 'apple', 11.0);
sqlite&gt; insert into atable values('b', 'word', 33.21);
sqlite&gt; insert into atable values('b', 'zealot', 11.56);
sqlite&gt; select sum(A.score * B.score) from atable A, atable B
    where A.token = B.token and A.docid = 'a' and B.docid = 'b';
1119.5407
sqlite&gt;
</snippet></ROW><ROW><id>2438234</id><snippet>token</snippet></ROW><ROW><id>2438234</id><snippet>token</snippet></ROW><ROW><id>2438234</id><snippet>create index atable_token_idx on atable(token);</snippet></ROW><ROW><id>2438234</id><snippet>drop index atable_token_idx;</snippet></ROW><ROW><id>2438325</id><snippet>from distutils.core import setup, Extension
import sys

libraries = []

if sys.platform == 'win32':
    libraries.append('ws2_32')

fastbinarymod = Extension('thrift.protocol.fastbinary',
                          sources = ['src/protocol/fastbinary.c'],
                          libraries = libraries, 
        )

setup(name = 'Thrift',
      version = '0.1',
      description = 'Thrift Python Libraries',
      author = 'Thrift Developers',
      author_email = 'thrift-dev@incubator.apache.org',
      url = 'http://incubator.apache.org/thrift/',
      license = 'Apache License 2.0',
      packages = [
        'thrift',
        'thrift.protocol',
        'thrift.transport',
        'thrift.server',
      ],
      package_dir = {'thrift' : 'src'},
      ext_modules = [fastbinarymod],
      )
</snippet></ROW><ROW><id>2438325</id><snippet>#ifdef _MSC_VER
  #define __BYTE_ORDER __LITTLE_ENDIAN
#endif
</snippet></ROW><ROW><id>2438325</id><snippet>python setup.py install</snippet></ROW><ROW><id>2438514</id><snippet>import os
from Tkinter import *
class App:
    def __init__(self):
        self.root = Tk()
        self.create_ui()
        self.url = "www.google.com"
        self.do_ping = False
        self.root.mainloop()

    def create_ui(self):
        self.label = Label(self.root, width=32, text="Ping!")
        self.button = Button(text="Start", width=5, command=self.toggle)
        self.button.pack(side="top")
        self.label.pack(side="top", fill="both", expand=True)

    def toggle(self):
        if self.do_ping:
            self.do_ping = False
            self.button.configure(text="Start")
        else:
            self.do_ping = True
            self.button.configure(text="Stop")
            self.ping()

    def ping(self):
        if not self.do_ping:
            return
        ping = os.popen('ping -c 1 %s' % self.url)
        result = ping.readlines()
        msLine = result[-1].strip()
        data = msLine.split(' = ')[-1] 
        self.label.configure(text=data)
        # re-schedule to run in another half-second
        if self.do_ping:
            self.root.after(500, self.ping)

app=App()
</snippet></ROW><ROW><id>2438609</id><snippet>from pyDes import *

data = "Please encrypt my data"
k = des("DESCRYPT", CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
d = k.encrypt(data)
print "Encrypted: %r" % d
print "Decrypted: %r" % k.decrypt(d)
assert k.decrypt(d, padmode=PAD_PKCS5) == data
</snippet></ROW><ROW><id>2438609</id><snippet>crypt.put_CryptAlgorithm("des")
crypt.put_CipherMode("cbc")
crypt.put_KeyLength(64)
crypt.put_PaddingScheme(0)
crypt.put_EncodingMode("hex")
ivHex = "0001020304050607"
crypt.SetEncodedIV(ivHex,"hex")
keyHex = "0001020304050607"
crypt.SetEncodedKey(keyHex,"hex")
encStr = crypt.encryptStringENC("The quick brown fox jumps over the lazy dog.")
print encStr
decStr = crypt.decryptStringENC(encStr)
print decStr
</snippet></ROW><ROW><id>2438628</id><snippet>def entry_icon_event(self, widget, icon, event):
    if icon == gtk.ENTRY_ICON_PRIMARY:
        ...
    elif icon == gtk.ENTRY_ICON_SECONDARY:
        ...
</snippet></ROW><ROW><id>2438756</id><snippet>mytable.__table__.select(mytable.value.in_(values)
</snippet></ROW><ROW><id>2438756</id><snippet>results = self.conn.execute(mytable.__table__.select(mytable.value.in_(values))
available_values = set(row.value for row in results)
to_insert = set(values) - available_values
</snippet></ROW><ROW><id>2438910</id><snippet>easy_install</snippet></ROW><ROW><id>2438910</id><snippet>__file__</snippet></ROW><ROW><id>2438910</id><snippet>__path__</snippet></ROW><ROW><id>2438910</id><snippet>easy_install</snippet></ROW><ROW><id>2438943</id><snippet>dict_a = dict_b</snippet></ROW><ROW><id>2438943</id><snippet>dict_b</snippet></ROW><ROW><id>2438943</id><snippet>dict_a</snippet></ROW><ROW><id>2438943</id><snippet>dict.copy</snippet></ROW><ROW><id>2438943</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2438943</id><snippet>&gt;&gt;&gt; a = {1:2}
&gt;&gt;&gt; b = a.copy()
&gt;&gt;&gt; b
{1: 2}
&gt;&gt;&gt; b[3] = 4
&gt;&gt;&gt; a
{1: 2}
&gt;&gt;&gt; b
{1: 2, 3: 4}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2439048</id><snippet>cur.execute('insert into tempPDBcode (PDBcode) values (%s);', s) 
</snippet></ROW></DATA>