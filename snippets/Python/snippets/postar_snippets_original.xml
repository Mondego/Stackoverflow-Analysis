<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>4387163</id><snippet>num=ord(char)
char=chr(num)
</snippet></ROW><ROW><id>4387163</id><snippet>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(98)
'b'
</snippet></ROW><ROW><id>4388244</id><snippet>'ab'</snippet></ROW><ROW><id>4388244</id><snippet>'r+b'</snippet></ROW><ROW><id>4388348</id><snippet>'^(\D*)(\d*)/(\d*)\.(\d*)\.'
</snippet></ROW><ROW><id>4388348</id><snippet>\D</snippet></ROW><ROW><id>4388348</id><snippet>\d</snippet></ROW><ROW><id>4388647</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>4388647</id><snippet>&gt;&gt;&gt; ast.literal_eval('{False: (1, 0x2), True: [3.14, 04, 0b101], None: ("6", u"7", r\'8\')}')
{False: (1, 2), True: [3.1400000000000001, 4, 5], None: ('6', u'7', '8')}
</snippet></ROW><ROW><id>4388983</id><snippet>asyncGatewayCalls</snippet></ROW><ROW><id>4388983</id><snippet>reactor.run</snippet></ROW><ROW><id>4388983</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>4388983</id><snippet>asyncGatewayCalls</snippet></ROW><ROW><id>4388983</id><snippet>asyncGatewayCalls</snippet></ROW><ROW><id>4388983</id><snippet>from twisted.internet.task import LoopingCall

class asyncGatewayCalls(object):
    def __init__(self, rpcfactory):
        self.rpcfactory = rpcfactory
        self.remoteMacList = [...]

    def run():
        self._call = LoopingCall(self._pokeMicro)
        return self._call.start(10)

    def _pokeMicro(self):
        while True:
            mac = self.remoteMacList[...]
            if mac in self.rpcfactory.references:
                proto = ...
                dataToSend = ...
                proto.transport.write(dataToSend)
                break

factory = ...
r = asyncGatewayCalls(factory)
r.run()

reactor.listenTCP(7080, factory)
reactor.run()
</snippet></ROW><ROW><id>4388983</id><snippet>asyncGatewayCalls</snippet></ROW><ROW><id>4388983</id><snippet>_pokeMicro</snippet></ROW><ROW><id>4389074</id><snippet>items = [{'category': m.category, 'message': m.message}
  for m in h.flash.pop_messages()]
</snippet></ROW><ROW><id>4389493</id><snippet>(?P&lt;browser&gt;Android) (?P&lt;major_version&gt;\d*)\.(?P&lt;minor_version&gt;\d*);[^;]*;(?P&lt;device&gt;[ \w]+) Build\/
</snippet></ROW><ROW><id>4389518</id><snippet>import re
pattern = re.compile(r"^Name=(.*)$", flags=re.MULTILINE)
re.sub(pattern, "Name=%s" % replace_name, s)
</snippet></ROW><ROW><id>4389518</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>4389518</id><snippet>^</snippet></ROW><ROW><id>4389518</id><snippet>$</snippet></ROW><ROW><id>4389518</id><snippet>import ConfigParser
parser = ConfigParser.RawConfigParser()
parser.optionxform = str # make option names case sensitive
parser.read("/etc/skel/examples.desktop")
parser.set("Desktop Entry", "Name", replace_name)
parser.write(open("modified.desktop", "w"))
</snippet></ROW><ROW><id>4389699</id><snippet>,</snippet></ROW><ROW><id>4389699</id><snippet>def kaboom(n):
    if (n % 2) == 0: print n,
    if n == 0: return # we "hit bottom"
    kaboom(n-1) # make the recursive call
    # From this point on, we are "on the way back", and print each value.
    print n,
</snippet></ROW><ROW><id>4389844</id><snippet>cookielib</snippet></ROW><ROW><id>4390235</id><snippet>linput = input.lower()
if 'seat' in linput:
    if 'suc' in linput:
        return 'SEAT, SUCTION'
    else:
        return 'SEAT, DISCHARGE'
</snippet></ROW><ROW><id>4390235</id><snippet>re.I</snippet></ROW><ROW><id>4390282</id><snippet>istartswith</snippet></ROW><ROW><id>4390421</id><snippet>product</snippet></ROW><ROW><id>4390421</id><snippet>__unicode__</snippet></ROW><ROW><id>4390421</id><snippet>form.product</snippet></ROW><ROW><id>4390797</id><snippet>eval</snippet></ROW><ROW><id>4390797</id><snippet>volume(eval('lambda x: %s' % args.equation), args.a, args.b)
</snippet></ROW><ROW><id>4390836</id><snippet>iregex</snippet></ROW><ROW><id>4390836</id><snippet>import re

text = "Kn"
text = re.escape(text) # make sure there are not regex specials
authors = Author.objects.filter(name__iregex=r"(^|\s)%s" % text)
</snippet></ROW><ROW><id>4390838</id><snippet>dict</snippet></ROW><ROW><id>4390838</id><snippet>{find_velocity: ("t", "ld"), ...}
</snippet></ROW><ROW><id>4390838</id><snippet>for func, reqs in funcs.items():
    args = [getattr(args, req) for req in reqs]
    if all(args):
        func(*args)
</snippet></ROW><ROW><id>4390933</id><snippet>&gt;&gt;&gt; 3600./350
10.285714285714286
</snippet></ROW><ROW><id>4391222</id><snippet>sequence1 = [1, 4, 8]
</snippet></ROW><ROW><id>4391222</id><snippet>max_validation = lambda x, y, z: x &lt; y &lt; z
</snippet></ROW><ROW><id>4391222</id><snippet>filter</snippet></ROW><ROW><id>4391222</id><snippet>filter(max_validation, sequence1)</snippet></ROW><ROW><id>4391222</id><snippet>True</snippet></ROW><ROW><id>4391222</id><snippet>False</snippet></ROW><ROW><id>4391222</id><snippet>filter</snippet></ROW><ROW><id>4391222</id><snippet>1</snippet></ROW><ROW><id>4391222</id><snippet>sequences = [[1, 4, 8], [2, 3, 9], [3, 2, 3]]
max_validation = lambda x: x[0] &lt; x[1] &lt; x[2] and len(x) == 3
</snippet></ROW><ROW><id>4391222</id><snippet>sequences</snippet></ROW><ROW><id>4391222</id><snippet>[[1, 4, 8]]</snippet></ROW><ROW><id>4391222</id><snippet>max_validation</snippet></ROW><ROW><id>4391222</id><snippet>and len(x) == 3</snippet></ROW><ROW><id>4391299</id><snippet>import re, urlparse

def urlEncodeNonAscii(b):
    return re.sub('[\x80-\xFF]', lambda c: '%%%02x' % ord(c.group(0)), b)

def iriToUri(iri):
    parts= urlparse.urlparse(iri)
    return urlparse.urlunparse(
        part.encode('idna') if parti==1 else urlEncodeNonAscii(part.encode('utf-8'))
        for parti, part in enumerate(parts)
    )

&gt;&gt;&gt; iriToUri(u'http://www.a\u0131b.com/a\u0131b')
'http://www.xn--ab-hpa.com/a%c4%b1b'
</snippet></ROW><ROW><id>4391299</id><snippet>urlparse</snippet></ROW><ROW><id>4391299</id><snippet>user:pass@</snippet></ROW><ROW><id>4391299</id><snippet>:port</snippet></ROW><ROW><id>4391299</id><snippet>urllib.quote</snippet></ROW><ROW><id>4391299</id><snippet>.encode('idna')</snippet></ROW><ROW><id>4391722</id><snippet>next(index for (index, d) in enumerate(lst) if d["name"] == "Tom")
# 1
</snippet></ROW><ROW><id>4391722</id><snippet>def get_index(seq, attr, value):
    return next(index for (index, d) in enumerate(seq) if d[attr] == value)

get_index(lst, "name", "Tom") 
# 1
</snippet></ROW><ROW><id>4391722</id><snippet>def build_dict(seq, key):
    return dict((d[key], dict(d, index=index)) for (index, d) in enumerate(seq))

d = build_dict(lst, key="name")
d["Tom"] 
# {'index': 1, 'id': '2345', 'name': 'Tom'}
</snippet></ROW><ROW><id>4392194</id><snippet>&gt;&gt;&gt; a = "test\\ing"
&gt;&gt;&gt; print(a)
test\ing
&gt;&gt;&gt; print(repr(a))
'test\\ing'
&gt;&gt;&gt; a
'test\\ing'
</snippet></ROW><ROW><id>4392252</id><snippet>save</snippet></ROW><ROW><id>4392252</id><snippet>request</snippet></ROW><ROW><id>4392252</id><snippet>save_model</snippet></ROW><ROW><id>4392252</id><snippet>def save_model(self, request, obj, form, change):
    # do something with obj and request here....
    obj.save()
</snippet></ROW><ROW><id>4392252</id><snippet>def my_view(request):
    obj = MyClass(ip_address = request.META['REMOTE_ADDR'])
</snippet></ROW><ROW><id>4392252</id><snippet>def foo(self, request):
    self.ip_address = request.META['REMOTE_ADDR']
    self..... = request.....
</snippet></ROW><ROW><id>4392252</id><snippet>obj.foo(request)</snippet></ROW><ROW><id>4392559</id><snippet>data['pact']  = ...
data['pdisc'] = ...
</snippet></ROW><ROW><id>4392559</id><snippet>class Data:
    pact = ...
    pdisc = ...
</snippet></ROW><ROW><id>4392559</id><snippet>longnames = {"pact": "Active parts", "pdisc": "Discontinued parts", ... }
</snippet></ROW><ROW><id>4392559</id><snippet>if report:
    for key, name in values:
        print "\t%s\t%d" % (name, len(data[key])) # if using a dict
        print "\t%s\t%d" % (name, len(getattr(data, key))) # if using a class
</snippet></ROW><ROW><id>4392622</id><snippet>import matplotlib.pyplot as plt
import numpy as np

arr=np.genfromtxt('foo.csv',delimiter=',')
plt.plot(arr[:,0],arr[:,1],'b-')
plt.show()
</snippet></ROW><ROW><id>4392622</id><snippet>1,2
2,4
3,9
</snippet></ROW><ROW><id>4392622</id><snippet>backend</snippet></ROW><ROW><id>4392622</id><snippet>GtkAgg</snippet></ROW><ROW><id>4392799</id><snippet>import datetime
import dateutil.rrule as drrule
import dateutil.relativedelta as drel
import pprint

def dt2d(date):
    '''
    Convert a datetime.datetime to datetime.date object
    '''
    return datetime.date(date.year,date.month,date.day)

def enumerate_dates(start,end):
    days=map(dt2d,drrule.rrule(drrule.DAILY, dtstart=start, until=end))

    # Find the Monday on or before start
    start_week=start+drel.relativedelta(weekday=drel.MO(-1))
    end_week=end+drel.relativedelta(weekday=drel.MO(-1))
    weeks=map(dt2d,drrule.rrule(drrule.WEEKLY, dtstart=start_week, until=end_week))

    # Find the first day of the month
    start_month=start.replace(day=1)
    end_month=end.replace(day=1)
    months=map(dt2d,drrule.rrule(drrule.MONTHLY, dtstart=start_month, until=end_month))
    return days,weeks,months


if __name__=='__main__':
    days,weeks,months=enumerate_dates(datetime.date(2010,11,28),
                                      datetime.date(2010,12,01))
    print('''\
days: {d}
weeks: {w}
months: {m}'''.format(d=map(str,days),w=map(str,weeks),m=map(str,months)))
</snippet></ROW><ROW><id>4392799</id><snippet>days: ['2010-11-28', '2010-11-29', '2010-11-30', '2010-12-01']
weeks: ['2010-11-22', '2010-11-29']
months: ['2010-11-01', '2010-12-01']
</snippet></ROW><ROW><id>4393011</id><snippet>renderer.py</snippet></ROW><ROW><id>4393011</id><snippet>import sys

if __name__ != "__main__":
    sys.modules[__name__] = OpenGLRenderer()
</snippet></ROW><ROW><id>4393011</id><snippet>OpenGLRenderer</snippet></ROW><ROW><id>4393011</id><snippet>import renderer</snippet></ROW><ROW><id>4393011</id><snippet>import sys
sys.modules["renderer"] = OpenGLRenderer()
import renderer   # gives current module access to the "module"
</snippet></ROW><ROW><id>4393011</id><snippet>renderer</snippet></ROW><ROW><id>4393361</id><snippet>self</snippet></ROW><ROW><id>4393361</id><snippet>class Utilities():
    def create_table(self, results):
         pass # more to come
</snippet></ROW><ROW><id>4393361</id><snippet>utils = Utilities()
Utilities.create_tables(utils, results)
</snippet></ROW><ROW><id>4393383</id><snippet>require 'rexml/document'
$number = 3
$start  = 1312

doc = REXML::Document.new(my_xml)
REXML::XPath.each(doc,'//variable') do |el|
  $number.times do
    el.text = "A-%07d" % $start
    File.open( "f-#{$start}.xml", 'w' ){ |f| f &lt;&lt; doc }
    $start += 1
  end
end
</snippet></ROW><ROW><id>4393654</id><snippet>ctypes</snippet></ROW><ROW><id>4393654</id><snippet>&gt;&gt;&gt; ctypes.create_string_buffer('abc\0def').value
'abc'
&gt;&gt;&gt; ctypes.create_string_buffer('abc\0def').raw
'abc\x00def'
</snippet></ROW><ROW><id>4393654</id><snippet>create_unicode_buffer</snippet></ROW><ROW><id>4393654</id><snippet>.raw</snippet></ROW><ROW><id>4393654</id><snippet>&gt;&gt;&gt; ctypes.wstring_at(ctypes.create_unicode_buffer(u'abc\0def), 7)
u'abc\x00def'
</snippet></ROW><ROW><id>4393981</id><snippet>/Library/Python/2.5/site-packages</snippet></ROW><ROW><id>4393981</id><snippet>/usr/local</snippet></ROW><ROW><id>4393981</id><snippet>--prefix</snippet></ROW><ROW><id>4393981</id><snippet>setuptools</snippet></ROW><ROW><id>4393981</id><snippet>easy_install</snippet></ROW><ROW><id>4393981</id><snippet>PIL</snippet></ROW><ROW><id>4394149</id><snippet>synchronous=off</snippet></ROW><ROW><id>4394153</id><snippet>random.choice()</snippet></ROW><ROW><id>4394153</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; a = ["Stack", "Overflow", "rocks"]
&gt;&gt;&gt; print(random.choice(a))
rocks
</snippet></ROW><ROW><id>4394362</id><snippet>question</snippet></ROW><ROW><id>4394362</id><snippet>question</snippet></ROW><ROW><id>4394362</id><snippet>question = random.choice(question)
</snippet></ROW><ROW><id>4394362</id><snippet>question = [...] # question is a list of strings
question = random.choice(question) # question is a single string
question = random.choice(question) # question is a character from that string
</snippet></ROW><ROW><id>4394362</id><snippet>question_pick = random.choice(question)
create = question_pick+" "+verb_pick+" "+noun_pick+"?"
</snippet></ROW><ROW><id>4394362</id><snippet>for</snippet></ROW><ROW><id>4394362</id><snippet>global a # Unnecessary and dangerous
a = 0
</snippet></ROW><ROW><id>4394362</id><snippet>for x in ...</snippet></ROW><ROW><id>4394362</id><snippet>x</snippet></ROW><ROW><id>4394362</id><snippet>x</snippet></ROW><ROW><id>4394362</id><snippet>x = 0 # Not necessary; x is about to be assigned to the first
      # element of range(10), which is 0
for x in range(10):
    ...
    x = x + 1 # Not necessary; as soon as this statement is done,
              # x will be assigned to the next element of range(10)
</snippet></ROW><ROW><id>4394362</id><snippet>name = ...</snippet></ROW><ROW><id>4394362</id><snippet>name</snippet></ROW><ROW><id>4394362</id><snippet>%s</snippet></ROW><ROW><id>4394362</id><snippet>create = "%s %s %s?" % (question, verb_pick, noun_pick)
</snippet></ROW><ROW><id>4394517</id><snippet>f</snippet></ROW><ROW><id>4394517</id><snippet>make_incrementor</snippet></ROW><ROW><id>4394517</id><snippet>&gt;&gt;&gt; f= lambda x: x+42
&gt;&gt;&gt; f(10)
52
</snippet></ROW><ROW><id>4394517</id><snippet>x</snippet></ROW><ROW><id>4394517</id><snippet>f</snippet></ROW><ROW><id>4394535</id><snippet>newton</snippet></ROW><ROW><id>4394535</id><snippet>&gt;&gt;&gt;&gt; from sympy import * # we are importing everything for ease of use
&gt;&gt;&gt;&gt; x = Symbol("x")
&gt;&gt;&gt;&gt; y = Symbol("y")     # create the two variables
&gt;&gt;&gt;&gt; equation = Eq(x ** 2, y) # create the equation
&gt;&gt;&gt;&gt; solve(equation, x)
[y**(1/2), -y**(1/2)]
</snippet></ROW><ROW><id>4394630</id><snippet>self</snippet></ROW><ROW><id>4394630</id><snippet>a</snippet></ROW><ROW><id>4394630</id><snippet>a</snippet></ROW><ROW><id>4394790</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4394790</id><snippet>import subprocess
import sys

# Create subprocess with pipes for stdin and stdout
progA = subprocess.Popen("a", stdin=subprocess.PIPE, stdout=subprocess.PIPE)

# Reassign the pipes to our stdin and stdout
sys.stdin = progA.stdout
sys.stdout = progA.stdin
</snippet></ROW><ROW><id>4394790</id><snippet>sys.stdin</snippet></ROW><ROW><id>4394790</id><snippet>sys.stdout</snippet></ROW><ROW><id>4395260</id><snippet>%include &lt;cstring.i&gt;
%cstring_output_allocate(char **str, free(*$1));
</snippet></ROW><ROW><id>4395425</id><snippet>views/debug.py</snippet></ROW><ROW><id>4395602</id><snippet>sys.path</snippet></ROW><ROW><id>4396247</id><snippet>In [1]: x=np.arange(10)

In [2]: x.dtype
Out[2]: dtype('int32')

In [3]: y=x.view('float32')

In [4]: y[:]=x

In [5]: y
Out[5]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.], dtype=float32)
</snippet></ROW><ROW><id>4396247</id><snippet>In [6]: x
Out[6]: 
array([         0, 1065353216, 1073741824, 1077936128, 1082130432,
       1084227584, 1086324736, 1088421888, 1090519040, 1091567616])
</snippet></ROW><ROW><id>4396472</id><snippet>ids = [int(s.split("/")[3]) for s in id_arr]
</snippet></ROW><ROW><id>4396639</id><snippet>{</snippet></ROW><ROW><id>4396639</id><snippet>}</snippet></ROW><ROW><id>4396639</id><snippet>[</snippet></ROW><ROW><id>4396639</id><snippet>]</snippet></ROW><ROW><id>4396639</id><snippet>:</snippet></ROW><ROW><id>4396639</id><snippet>JSON: {"foo":"bar", "items":[1, 2, 3], "staff":{"id":432, "first":"John", "last":"Doe"}}
Query: foo=bar&amp;items=1,2,3&amp;staff="id"%3A432,"first"%3A"John","last"%3A"Doe"
</snippet></ROW><ROW><id>4396970</id><snippet>&gt;&gt;&gt; int(re.search("curr_items (\d+)", out).group(1))
0
</snippet></ROW><ROW><id>4397343</id><snippet>fn = {'add user': add_user, 'modify user': modify_user}
</snippet></ROW><ROW><id>4397343</id><snippet>user = fn[subject]()
</snippet></ROW><ROW><id>4397773</id><snippet>str = 'This is first line \n 2 line start from her\nService Name: test \n some 4 line \nUser Name: amit \n some something \nLast Name: amit amit \n'
</snippet></ROW><ROW><id>4397773</id><snippet>dict([line.split(':') for line in str.split('\n') if ':' in line])
</snippet></ROW><ROW><id>4397773</id><snippet>{'Last Name': ' amit amit ', 'Service Name': ' test ', 'User Name': ' amit '}
</snippet></ROW><ROW><id>4397773</id><snippet>split(':')</snippet></ROW><ROW><id>4397773</id><snippet>split(':', 1)</snippet></ROW><ROW><id>4397773</id><snippet>strip</snippet></ROW><ROW><id>4397880</id><snippet>recv(4)</snippet></ROW><ROW><id>4397880</id><snippet>recv</snippet></ROW><ROW><id>4397880</id><snippet>udp(7)</snippet></ROW><ROW><id>4397880</id><snippet>   All receive operations return only one packet.  When the packet
   is smaller than the passed buffer, only that much data is
   returned; when it is bigger, the packet is truncated and the
   MSG_TRUNC flag is set.  MSG_WAITALL is not supported.
</snippet></ROW><ROW><id>4397966</id><snippet>b.form.click</snippet></ROW><ROW><id>4397966</id><snippet>request = b.form.click('vulnResultsForm:j_id116')
b.open(request)
result = b.response().read()
</snippet></ROW><ROW><id>4398291</id><snippet>rows = archesDB.read_all("""SELECT %s 
                       FROM arches 
                       WHERE lower(arch) like %%s""" % (",".join(columns),),
                       ("%%%s%%" % (arch.lower(),),))
</snippet></ROW><ROW><id>4398823</id><snippet>title</snippet></ROW><ROW><id>4398823</id><snippet>subtitle</snippet></ROW><ROW><id>4398823</id><snippet>regex = r"^(?P&lt;title&gt;[^;]+);" \
         "\s*(?P&lt;subtitle&gt;[^.]+)\." \
         "(\s*Tel\.:\s*(?P&lt;telephone&gt;.+?)(\.|;))?" \
         "\s*(?P&lt;url&gt;(www\.|http://).+?\.[a-zA-Z]+)(\.|;)" \
         "(\s*(?P&lt;text&gt;.+?)\.)?" \
         "\s*coor:(\s*(?P&lt;lat&gt;.+?),\s*(?P&lt;long&gt;.+?))?$"
</snippet></ROW><ROW><id>4399008</id><snippet>for thing in list:
    globals()[thing] = []
</snippet></ROW><ROW><id>4399246</id><snippet>import functools
def debug_on(*exceptions):
    if not exceptions:
        exceptions = (AssertionError, )
    def decorator(f):
        @functools.wraps(f)
        def wrapper(*args, **kwargs):
            try:
                return f(*args, **kwargs)
            except exceptions:
                pdb.post_mortem(sys.exc_info()[2])
        return wrapper
    return decorator

class tests(unittest.TestCase):
    @debug_on()
    def test_trigger_pdb(self):
        assert 1 == 0
</snippet></ROW><ROW><id>4399322</id><snippet>pack_forget</snippet></ROW><ROW><id>4399373</id><snippet>if txt.tag_ranges("sel"):
    print "there is a selection"
else:
    print "there is no selection"
</snippet></ROW><ROW><id>4399426</id><snippet>import Tkinter as tk
root = tk.Tk()
print "background is", root["background"]
</snippet></ROW><ROW><id>4399545</id><snippet>import Tkinter as tk

root = tk.Tk()
frame1 = tk.Frame(root, width=100, height=100, background="bisque")
frame2 = tk.Frame(root, width=50, height = 50, background="#b22222")

frame1.pack(fill=None, expand=False)
frame2.place(relx=.5, rely=.5, anchor="c")

root.mainloop()
</snippet></ROW><ROW><id>4399983</id><snippet>Object.ReferenceEquals()</snippet></ROW><ROW><id>4399983</id><snippet>List&lt;int&gt; listA = new List&lt;int&gt; { 1, 2, 3 };
List&lt;int&gt; listB = listA;
listA.Add(4);

bool equal = object.ReferenceEquals(listA, listB);
</snippet></ROW><ROW><id>4399983</id><snippet>equal</snippet></ROW><ROW><id>4399983</id><snippet>true</snippet></ROW><ROW><id>4401180</id><snippet>funcA()</snippet></ROW><ROW><id>4401180</id><snippet>funcB()</snippet></ROW><ROW><id>4401180</id><snippet>funcC()</snippet></ROW><ROW><id>4401180</id><snippet>subset_a = a &gt; 80
subset_b = (40 &lt; a) &amp; (a &lt;= 80)
subset_c = a &lt;= 40
a[subset_a] += 1
a[subset_b] += 2
a[subset_c] += 3
</snippet></ROW><ROW><id>4401180</id><snippet>a &gt; 80</snippet></ROW><ROW><id>4401671</id><snippet>P2PMapping</snippet></ROW><ROW><id>4401671</id><snippet>{'google.com' : '127.0.0.1'}</snippet></ROW><ROW><id>4401671</id><snippet>"""
Created on 16.08.2010

@author: Jochen Ritzel
"""

import dht

from twisted.names import dns, server, client, cache
from twisted.application import service, internet

class P2PMapping(dht.EntangledDHT):

    def __contains__(self, key):
        return key.endswith('.kad')

class MapResolver(client.Resolver):
    """
    Resolves names by looking in a mapping. 
    If `name in mapping` then mapping[name] should return a IP
    else the next server in servers will be asked for name    
    """
    def __init__(self, mapping, servers):
        self.mapping = mapping
        client.Resolver.__init__(self, servers=servers)
        self.ttl = 10

    def lookupAddress(self, name, timeout = None):
        # find out if this is a .kad. request
        if name in self.mapping:
            result = self.mapping[name] # get the result
            def packResult( value ):
                return [
                        (dns.RRHeader(name, dns.A, dns.IN, self.ttl, dns.Record_A(value, self.ttl)),), (), ()
                ]
            result.addCallback(packResult) # put it in a A Record
            return result
        else:
            return self._lookup(name, dns.IN, dns.A, timeout)


## this sets up the application


application = service.Application('dnsserver', 1, 1)


## set up the DHT
mapping = P2PMapping(bootstrap=[('127.0.0.1', 4001)])
mapping['jochen.kad'] = '99.99.99.99' # "register" domain with IP


# set up a resolver that uses the mapping or a secondary nameserver
p2presolver = MapResolver(mapping, servers=[('192.168.178.1', 53)])


# create the protocols
f = server.DNSServerFactory(caches=[cache.CacheResolver()], clients=[p2presolver])
p = dns.DNSDatagramProtocol(f)
f.noisy = p.noisy = False


# register as tcp and udp
ret = service.MultiService()
PORT=53

for (klass, arg) in [(internet.TCPServer, f), (internet.UDPServer, p)]:
    s = klass(PORT, arg)
    s.setServiceParent(ret)


# run all of the above as a twistd application
ret.setServiceParent(service.IServiceCollection(application))


# run it through twistd!
if __name__ == '__main__':
    import sys
    print "Usage: twistd -y %s" % sys.argv[0]
</snippet></ROW><ROW><id>4401790</id><snippet>exampleData</snippet></ROW><ROW><id>4401790</id><snippet>c</snippet></ROW><ROW><id>4401790</id><snippet>result = sum(c*i[0] for i in exampleData)</snippet></ROW><ROW><id>4401953</id><snippet>$ strace -eopen python -c 1 2&gt;&amp;1 | grep -ve '-1 E'
open("/etc/ld.so.cache", O_RDONLY)      = 3
open("/lib/libpthread.so.0", O_RDONLY)  = 3
open("/lib/libdl.so.2", O_RDONLY)       = 3
open("/lib/libutil.so.1", O_RDONLY)     = 3
open("/usr/lib/libssl.so.0.9.8", O_RDONLY) = 3
open("/usr/lib/libcrypto.so.0.9.8", O_RDONLY) = 3
open("/usr/lib/libz.so.1", O_RDONLY)    = 3
open("/lib/libm.so.6", O_RDONLY)        = 3
open("/lib/libc.so.6", O_RDONLY)        = 3
open("/proc/meminfo", O_RDONLY)         = 3
open("/usr/lib/python2.6/site.py", O_RDONLY) = 3
open("/usr/lib/python2.6/site.pyc", O_RDONLY) = 4
open("/usr/lib/python2.6/os.py", O_RDONLY) = 4
open("/usr/lib/python2.6/os.pyc", O_RDONLY) = 5
open("/usr/lib/python2.6/posixpath.py", O_RDONLY) = 5
open("/usr/lib/python2.6/posixpath.pyc", O_RDONLY) = 6
open("/usr/lib/python2.6/stat.py", O_RDONLY) = 6
open("/usr/lib/python2.6/stat.pyc", O_RDONLY) = 7
open("/usr/lib/python2.6/genericpath.py", O_RDONLY) = 6
open("/usr/lib/python2.6/genericpath.pyc", O_RDONLY) = 7
open("/usr/lib/python2.6/warnings.py", O_RDONLY) = 6
open("/usr/lib/python2.6/warnings.pyc", O_RDONLY) = 7
open("/usr/lib/python2.6/linecache.py", O_RDONLY) = 7
open("/usr/lib/python2.6/linecache.pyc", O_RDONLY) = 8
open("/usr/lib/python2.6/types.py", O_RDONLY) = 7
open("/usr/lib/python2.6/types.pyc", O_RDONLY) = 8
open("/usr/lib/python2.6/UserDict.py", O_RDONLY) = 5
open("/usr/lib/python2.6/UserDict.pyc", O_RDONLY) = 6
open("/usr/lib/python2.6/_abcoll.py", O_RDONLY) = 6
open("/usr/lib/python2.6/_abcoll.pyc", O_RDONLY) = 7
open("/usr/lib/python2.6/abc.py", O_RDONLY) = 7
open("/usr/lib/python2.6/abc.pyc", O_RDONLY) = 8
open("/usr/lib/python2.6/copy_reg.py", O_RDONLY) = 5
open("/usr/lib/python2.6/copy_reg.pyc", O_RDONLY) = 6
open("/usr/local/lib/python2.6/dist-packages", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 4
open("/usr/lib/python2.6/dist-packages", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 4
open("/usr/lib/python2.6/dist-packages/PIL.pth", O_RDONLY) = 4
open("/usr/lib/python2.6/dist-packages/pygst.pth", O_RDONLY) = 4
open("/usr/lib/python2.6/dist-packages/python-support.pth", O_RDONLY) = 4
open("/usr/lib/python2.6/dist-packages/wx.pth", O_RDONLY) = 4
open("/usr/lib/python2.6/dist-packages/zope.interface-3.5.3-nspkg.pth", O_RDONLY) = 4
open("/usr/lib/python2.6/sitecustomize.py", O_RDONLY) = 4
open("/usr/lib/python2.6/sitecustomize.pyc", O_RDONLY) = 5
open("/usr/lib/locale/locale-archive", O_RDONLY) = 3
open("/usr/lib/python2.6/encodings/__init__.py", O_RDONLY) = 3
open("/usr/lib/python2.6/encodings/__init__.pyc", O_RDONLY) = 4
open("/usr/lib/python2.6/codecs.py", O_RDONLY) = 4
open("/usr/lib/python2.6/codecs.pyc", O_RDONLY) = 5
open("/usr/lib/python2.6/encodings/aliases.py", O_RDONLY) = 4
open("/usr/lib/python2.6/encodings/aliases.pyc", O_RDONLY) = 5
open("/usr/lib/python2.6/encodings/utf_8.py", O_RDONLY) = 3
open("/usr/lib/python2.6/encodings/utf_8.pyc", O_RDONLY) = 4
</snippet></ROW><ROW><id>4401953</id><snippet>site.py</snippet></ROW><ROW><id>4401953</id><snippet>site.py</snippet></ROW><ROW><id>4401953</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>4401953</id><snippet>.pth</snippet></ROW><ROW><id>4401953</id><snippet>.pth</snippet></ROW><ROW><id>4402219</id><snippet>import numpy as np
np.array([1,2,3,4])
</snippet></ROW><ROW><id>4402219</id><snippet>import mfxLib01 as mfxLib
</snippet></ROW><ROW><id>4402219</id><snippet>import mfxLib02 as mfxLib
</snippet></ROW><ROW><id>4402447</id><snippet>&gt;&gt;&gt; s = 'hello world'
&gt;&gt;&gt; [s[i:i+3] for i in range(len(s)) if not i % 3]
['hel', 'lo ', 'wor', 'ld']
</snippet></ROW><ROW><id>4402447</id><snippet>def split_on_parts(s, *parts):
    total = 0
    buildstr = []
    for p in parts:
        buildstr.append(s[total:total+p])
        total += p
    return buildstr

s = 'hello world'
print split_on_parts(s, 3, 3, 3, 3)
print split_on_parts(s, 4, 3, 4)
</snippet></ROW><ROW><id>4402447</id><snippet>['hel', 'lo ', 'wor', 'ld']
['hell', 'o w', 'orld']
</snippet></ROW><ROW><id>4402447</id><snippet>def split_on_parts(s, *parts):
    return [s[sum(parts[:p]):sum(parts[:p+1])] for p in range(len(parts))]
</snippet></ROW><ROW><id>4402909</id><snippet>&gt;python -mtimeit "x=[34534534, 23423523, 77645645, 345346]" "[e for e in x]"
1000000 loops, best of 3: 0.638 usec per loop

&gt;python -mtimeit "x=[34534534, 23423523, 77645645, 345346]" "list(e for e in x)"
1000000 loops, best of 3: 1.72 usec per loop
</snippet></ROW><ROW><id>4402909</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; x=[34534534, 23423523, 77645645, 345346]
&gt;&gt;&gt; dis.dis(lambda: [e for e in x])
  1           0 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x0000000001F8B330, file "&lt;stdin&gt;", line 1&gt;)
              3 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (x)
              9 GET_ITER
             10 CALL_FUNCTION            1
             13 RETURN_VALUE
&gt;&gt;&gt; dis.dis(lambda: list(e for e in x))
  1           0 LOAD_GLOBAL              0 (list)
              3 LOAD_CONST               0 (&lt;code object &lt;genexpr&gt; at 0x0000000001F8B9B0, file "&lt;stdin&gt;", line 1&gt;)
              6 MAKE_FUNCTION            0
              9 LOAD_GLOBAL              1 (x)
             12 GET_ITER
             13 CALL_FUNCTION            1
             16 CALL_FUNCTION            1
             19 RETURN_VALUE
</snippet></ROW><ROW><id>4402909</id><snippet>genexpr</snippet></ROW><ROW><id>4402909</id><snippet>list</snippet></ROW><ROW><id>4402909</id><snippet>&gt;python -mtimeit "x=range(100000)" "[e for e in x]"
100 loops, best of 3: 8.51 msec per loop

&gt;python -mtimeit "x=range(100000)" "list(e for e in x)"
100 loops, best of 3: 11.8 msec per loop
</snippet></ROW><ROW><id>4402909</id><snippet>&gt;python -mtimeit "x=range(100000)" "[2*e for e in x]"
100 loops, best of 3: 12.8 msec per loop

&gt;python -mtimeit "x=range(100000)" "list(2*e for e in x)"
100 loops, best of 3: 16.8 msec per loop
</snippet></ROW><ROW><id>4402909</id><snippet>&gt;python -mtimeit "x=range(100000)" "[e for e in x if e%2]"
100 loops, best of 3: 14 msec per loop

&gt;python -mtimeit "x=range(100000)" "list(e for e in x if e%2)"
100 loops, best of 3: 16.5 msec per loop
</snippet></ROW><ROW><id>4402999</id><snippet>from django.contrib.auth.decorators import user_passes_test

def must_be_active( user ):
    if .... whatever .... 

def paywall_check( user ):
    if .... whatever .... 

@user_passes_test(must_be_active)
def my_view(request):
    do the work

@user_pass_test(paywall_check)
def another_view(request):
    do the work
</snippet></ROW><ROW><id>4403025</id><snippet>data = [{'category': 'nestedloops', 'title': 'Number Puzzle I', 'url': 'number-puzzle-i.html', 'n': '087', 'points': '60', 'key': 'numberpuzzles1'}, {'category': 'nestedloops', 'title': 'Getting Individual Digits', 'url': 'getting-individual-digits.html', 'n': '088', 'points': '80', 'key': 'gettingindividualdigits'}]
ordering = {'key': 0, 'url': 1, 'title': 2, 'category': 3,
            'flags': 4, 'points': 5, 'n': 6}
outlist = []
for d in data:
    outlist.append([])
    for k in sorted(d.keys(), key=lambda k: ordering[k]):
        outlist[-1].append(json.dumps({k: d[k]}))

for i, l in enumerate(outlist):
    outlist[i] = "{" + ",".join((s[1:-1] for s in outlist[i])) + "}"

s = "[" + ",".join(outlist) + "]"
</snippet></ROW><ROW><id>4403128</id><snippet>## pre-checkin_scan.bin
find . -name "*.py" -exec grep -H --file=/homes/js/bin/pre-checkin_scan_regexp_list.grep {} \;



## pre-checkin_scan_regexp_list.grep
## (The first pattern is to ignore Doxygen comments)

^##[^@]
pdb
^ *print *( *" *Dbg
^ *print *( *" *Debug
^ *debug
</snippet></ROW><ROW><id>4403361</id><snippet>import urllib
urllib.urlretrieve("http://www.example.com/songs/mp3.mp3", "/home/download/mp3.mp3")
</snippet></ROW><ROW><id>4403428</id><snippet>.py</snippet></ROW><ROW><id>4403428</id><snippet>AccountHandler</snippet></ROW><ROW><id>4403428</id><snippet>/project/handlers/AccountHandler.py</snippet></ROW><ROW><id>4403428</id><snippet>AccountHandler.py</snippet></ROW><ROW><id>4403428</id><snippet>from project.handlers.AccountHandler import AccountHandler
# Alternately
# from project.handler import AccountHandler
# AccountHandler.AccountHandler() # will also work.
</snippet></ROW><ROW><id>4403578</id><snippet>class testThread(Thread):
    def __init__(self, parent):
        self.parent = parent
        Thread.__init__(self)
        self.start()

    def run(self):
        self.value = 1
        while 1:
            print self.value
            time.sleep(1)

class testGUI(wx.Frame): 
    def __init__(self): 
        wx.Frame.__init__(self, None, -1, "Test", size=(500,270)) 
        panel = wx.Panel(self, -1)

        self.buttonStart = wx.Button(panel, -1, label="Start thread", pos=(0,0))
        self.buttonChange = wx.Button(panel, -1, label="Change var", pos=(0,30))
        panel.Bind(wx.EVT_BUTTON, self.startThread, id=self.buttonStart.GetId())
        panel.Bind(wx.EVT_BUTTON, self.changeVar, id=self.buttonChange.GetId())

    def startThread(self, event):
        self.the_thread = testThread(self)

    def changeVar(self, event):
        # DO SOMETHING HERE THAT CHANGES 'x' IN THREAD TO 2...
        self.the_thread.value = 2

if __name__ == '__main__': 
    app = wx.App(redirect=False)
    frame = testGUI() 
    frame.Show(True) 
    app.MainLoop()
</snippet></ROW><ROW><id>4403667</id><snippet>def vpn_connection_handler(*args, **keywords):
    state = args[0].get('State',0)
    if state == 2:
        # On connect code goes here

system_bus.add_signal_receiver(vpn_connection_handler,
    dbus_interface="org.freedesktop.NetworkManager.VPN.Connection",
        signal_name="PropertiesChanged")
</snippet></ROW><ROW><id>4403873</id><snippet>text = """
    ONE
    TWO 
    THREE
"""
</snippet></ROW><ROW><id>4403873</id><snippet>{{ text|linenumbers }}
</snippet></ROW><ROW><id>4403873</id><snippet>{% for n in lines %}
    &lt;div&gt;{{ forloop.counter }}. {{ line }}&lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>4404183</id><snippet>raise "Oops"</snippet></ROW><ROW><id>4404183</id><snippet>n+1</snippet></ROW><ROW><id>4404183</id><snippet>n</snippet></ROW><ROW><id>4404183</id><snippet>with
as
</snippet></ROW><ROW><id>4404183</id><snippet>set
frozenset
reversed
sorted
bytes
</snippet></ROW><ROW><id>4404183</id><snippet>raise</snippet></ROW><ROW><id>4404612</id><snippet>import user

class Thing(object):

    def doSomething(self):
        u = user.User(1)
        print u.name
        # ...
        user = something
</snippet></ROW><ROW><id>4404612</id><snippet>user</snippet></ROW><ROW><id>4404612</id><snippet>user</snippet></ROW><ROW><id>4404612</id><snippet>user</snippet></ROW><ROW><id>4404612</id><snippet>import user</snippet></ROW><ROW><id>4404612</id><snippet>user</snippet></ROW><ROW><id>4404838</id><snippet>urllib2</snippet></ROW><ROW><id>4404838</id><snippet>import urllib2
request = urllib2.Request('http://diveintomark.org/xml/atom.xml')
opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))    
feeddata = opener.open(request).read()
</snippet></ROW><ROW><id>4404838</id><snippet>urllib</snippet></ROW><ROW><id>4405152</id><snippet>from mako.template import Template

mytemplate = Template(filename='email.html')
sendemail("text@example.com", "me@example.com", mytemplate.render())
</snippet></ROW><ROW><id>4405162</id><snippet>d['close'] &gt; d['MA']</snippet></ROW><ROW><id>4405162</id><snippet>sum( pair[0] &gt; pair[1] for pair in zip(d['close'], d['MA']) )
</snippet></ROW><ROW><id>4405210</id><snippet>meshgrid</snippet></ROW><ROW><id>4405210</id><snippet>mplot3d</snippet></ROW><ROW><id>4405210</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plot
import numpy
import pylab

fig = plot.figure()
ax = Axes3D(fig)

n = numpy.linspace(0, 100)

x = n
y = x**2

X, Y = numpy.meshgrid(x, y)
Z = numpy.ones_like( X )

ax.plot_wireframe(X, Y, Z)
</snippet></ROW><ROW><id>4405286</id><snippet>$(document).ready(function() {
    alert('hi');
    $(".div_inside_abc").css("background","#000");
});
</snippet></ROW><ROW><id>4405286</id><snippet>&lt;script language="javascript"&gt;
    $(document).ready(function() {
        alert('hi');
        $(".div_inside_abc").css("background","#000");
});
&lt;/script&gt;
</snippet></ROW><ROW><id>4405286</id><snippet>(function(){
    alert('hi');
    $(".div_inside_abc").css("background","#000");

})();
</snippet></ROW><ROW><id>4405451</id><snippet>def lala(a):
    n = [0, 0 , 0]
    a = n
</snippet></ROW><ROW><id>4405451</id><snippet>a</snippet></ROW><ROW><id>4405451</id><snippet>n</snippet></ROW><ROW><id>4405451</id><snippet>n</snippet></ROW><ROW><id>4405451</id><snippet>a</snippet></ROW><ROW><id>4405451</id><snippet>a</snippet></ROW><ROW><id>4405451</id><snippet>n</snippet></ROW><ROW><id>4405451</id><snippet>lala</snippet></ROW><ROW><id>4405451</id><snippet>a</snippet></ROW><ROW><id>4405451</id><snippet>n</snippet></ROW><ROW><id>4405451</id><snippet>a[:] = n</snippet></ROW><ROW><id>4405451</id><snippet>a</snippet></ROW><ROW><id>4405916</id><snippet>biggest = period(0)
index = 0

for i in range (1, 100)
    if period(i) &gt; biggest
         biggest = period(i)
         index = i

return biggest
</snippet></ROW><ROW><id>4406013</id><snippet>sum</snippet></ROW><ROW><id>4406013</id><snippet>sum</snippet></ROW><ROW><id>4406013</id><snippet>return math.sqrt(sum((p[0]-centroid[0])**2 + (p[1]-centroid[1])**2 for p in points))
</snippet></ROW><ROW><id>4406042</id><snippet>Sub Copy_Connection_Info_To_Clipboard()

Dim ptCache As Excel.PivotCache
Dim qtQueryTable As Excel.QueryTable
Dim strPtCacheInfo As String
Dim strQueryTableInfo As String
Dim ws As Excel.Worksheet
Dim strConnectionInfo As String
Dim doConnectionInfo As DataObject

On Error Resume Next
For Each ptCache In ActiveWorkbook.PivotCaches
    With ptCache
        strPtCacheInfo = _
        strPtCacheInfo _
        &amp; "PivotCache #" &amp; "Index: " &amp; .Index &amp; vbCrLf &amp; vbCrLf _
                         &amp; "SourceDataFile: " &amp; .SourceDataFile &amp; vbCrLf &amp; vbCrLf _
                         &amp; "CommandText: " &amp; .CommandText &amp; vbCrLf &amp; vbCrLf _
                         &amp; "SourceConnectionFile: " &amp; .SourceConnectionFile &amp; vbCrLf &amp; vbCrLf _
                         &amp; "Connection: " &amp; .Connection &amp; vbCrLf &amp; vbCrLf
    End With
Next ptCache
If strPtCacheInfo &lt;&gt; "" Then
    strPtCacheInfo = "PivotCache Info" &amp; vbCrLf &amp; vbCrLf &amp; strPtCacheInfo
End If

For Each ws In ActiveWorkbook.Worksheets
    If ws.QueryTables.Count &gt; 0 Then
        strQueryTableInfo = "Worksheet: " &amp; ws.Name &amp; vbCrLf
        For Each qtQueryTable In ActiveSheet.QueryTables
            With qtQueryTable
                strQueryTableInfo = _
                strQueryTableInfo _
                &amp; "QueryTable Name: " &amp; .Name &amp; vbCrLf &amp; vbCrLf _
                &amp; .SourceDataFile &amp; vbCrLf &amp; vbCrLf _
                &amp; .CommandText &amp; vbCrLf &amp; vbCrLf _
                &amp; .SourceConnectionFile &amp; vbCrLf &amp; vbCrLf _
                &amp; .Connection &amp; vbCrLf &amp; vbCrLf
            End With
        Next qtQueryTable
    End If
Next ws
If strQueryTableInfo &lt;&gt; "" Then
    strQueryTableInfo = "Query Table Info" &amp; vbCrLf &amp; strQueryTableInfo
End If

strConnectionInfo = strPtCacheInfo &amp; strQueryTableInfo
If strConnectionInfo &lt;&gt; "" Then
    Set doConnectionInfo = New DataObject
    doConnectionInfo.SetText strConnectionInfo
    doConnectionInfo.PutInClipboard
End If

End Sub
</snippet></ROW><ROW><id>4406106</id><snippet>import gdata.apps
import gdata.apps.service
import gdata.alt.appengine

service = gs.AppsService(email="[[ account email with admin privs ]]",domain="[[ google apps domain ]]",password="[[ account password ]]")

gdata.alt.appengine.run_on_appengine(service)

service.ProgrammaticLogin()
users = service.RetrieveAllUsers()

for item in users.entry:
    print '----Username '+item.login.user_name' for user '+item.name.given_name+' '+item.name.family_name
</snippet></ROW><ROW><id>4406106</id><snippet>----Username john.doe for user John Doe
----Username jane.doe for user Jane Doe
</snippet></ROW><ROW><id>4406158</id><snippet>def dynamic_text(name, food):
    return """
    Dear %(name)s,
    We're glad to hear that you like %(food)s and we'll be sending you some more soon.
    """ % {'name':name, 'food':food}
</snippet></ROW><ROW><id>4406399</id><snippet>&gt;&gt;&gt; l = [22, 13, 45, 50, 98, 69, 43, 44, 1]
&gt;&gt;&gt; [x+1 if x &gt;= 45 else x+5 for x in l]
[27, 18, 46, 51, 99, 70, 48, 49, 6]
</snippet></ROW><ROW><id>4406521</id><snippet>dict[new_key] = dict[old_key]
del dict[old_key]
</snippet></ROW><ROW><id>4406521</id><snippet>dict[new_key] = dict.pop(old_key)
</snippet></ROW><ROW><id>4406521</id><snippet>KeyError</snippet></ROW><ROW><id>4406521</id><snippet>dict[old_key]</snippet></ROW><ROW><id>4406521</id><snippet>dict[old_key]</snippet></ROW><ROW><id>4406521</id><snippet>&gt;&gt;&gt; dict = { 1: 'one', 2:'two', 3:'three' }
&gt;&gt;&gt; dict['ONE'] = dict.pop(1)
&gt;&gt;&gt; dict
{2: 'two', 3: 'three', 'ONE': 'one'}
&gt;&gt;&gt; dict['ONE'] = dict.pop(1)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
KeyError: 1
</snippet></ROW><ROW><id>4406658</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'abc&gt;a'
&gt;&gt;&gt; r = re.compile(r'&gt;[:alpha:]$')
&gt;&gt;&gt; print( r.search(s) )
&lt;_sre.SRE_Match object at 0xb76c5a30&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4407394</id><snippet>a</snippet></ROW><ROW><id>4407394</id><snippet>b</snippet></ROW><ROW><id>4407394</id><snippet>next</snippet></ROW><ROW><id>4407394</id><snippet>StopIteration</snippet></ROW><ROW><id>4407394</id><snippet>def merge(a, b):
    """Merges two iterators a and b, returning a single iterator that yields
    the elements of a and b in non-decreasing order.  a and b are assumed to each
    yield their elements in non-decreasing order."""

    done = object()
    aNext = next(a, done)
    bNext = next(b, done)

    while (aNext is not done) or (bNext is not done):
        if (bNext is done) or ((aNext is not done) and (aNext &lt; bNext)):
            yield aNext
            aNext = next(a, done)
        else:
            yield bNext
            bNext = next(b, done)

for i in merge(iter(a), iter(b)):
    print i
</snippet></ROW><ROW><id>4407394</id><snippet>def merge(*iterators):
    """Merges a collection of iterators, returning a single iterator that yields
    the elements of the original iterators in non-decreasing order.  Each of
    the original iterators is assumed to yield its elements in non-decreasing
    order."""

    done = object()
    n = [next(it, done) for it in iterators]

    while any(v is not done for v in n):
        v, i = min((v, i) for (i, v) in enumerate(n) if v is not done)
        yield v
        n[i] = next(iterators[i], done)
</snippet></ROW><ROW><id>4407571</id><snippet>def getFloats(filepath):
  fd = open(filepath) # open the file
  try:
    content = fd.read().split() # read fully
    def flo(value):  # a function that returns a float for the given str or None
      try: return float(value)
      except ValueError: return None # skip invalid values
    # iterate through content and make items float or None,
    # iterate over the result to choose floats only
    return [x for x in [flo(y) for y in content] if x]
  finally:
    fd.close()
</snippet></ROW><ROW><id>4407915</id><snippet>{}</snippet></ROW><ROW><id>4408205</id><snippet>x</snippet></ROW><ROW><id>4408205</id><snippet>y</snippet></ROW><ROW><id>4408205</id><snippet>z</snippet></ROW><ROW><id>4408205</id><snippet>opt</snippet></ROW><ROW><id>4408205</id><snippet>def f(x, y, z, opt=None):
  # do required stuff
  if opt is not None:
    # do optional stuff
</snippet></ROW><ROW><id>4408341</id><snippet>import numpy as np
n = len(Tm)
t = np.empty(n)

t[0] = 0  # or whatever the initial condition is 
t[1:] = Tm[1:] + (t[0:n-1] - Tm[1:])**(-tau[1:])
</snippet></ROW><ROW><id>4408341</id><snippet>tt = np.empty(n)
tt[0] = 0.
for i in range(1,n):
    tt[i] = Tm[i] + (tt[i-1] - Tm[i])**(-tau[i])
</snippet></ROW><ROW><id>4408409</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; cmd = [ 'echo', 'arg1', 'arg2' ]
&gt;&gt;&gt; output = subprocess.Popen( cmd, stdout=subprocess.PIPE ).communicate()[0]
&gt;&gt;&gt; print output
arg1 arg2

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4408409</id><snippet>import subprocess
import tempfile

with tempfile.TemporaryFile() as tempf:
    proc = subprocess.Popen(['echo', 'a', 'b'], stdout=tempf)
    proc.wait()
    tempf.seek(0)
    print tempf.read()
</snippet></ROW><ROW><id>4408417</id><snippet>freqs = dict([(b,a) for (a,b) in exampleData])
</snippet></ROW><ROW><id>4408417</id><snippet>def printHuffTree2(freqs, huffTree, prefix = ''):
   if len(huffTree) == 2:
      letter = huffTree[1]
      val = len(prefix)*freqs[letter]
      print '%s: %s\t%u * %f = %f' % \
          (huffTree[1], prefix, len(prefix), freqs[letter], val)
      return val
   else:
      lhs = printHuffTree2(freqs, huffTree[1], prefix + '0')
      rhs = printHuffTree2(freqs, huffTree[2], prefix + '1')
      return (lhs+rhs)
</snippet></ROW><ROW><id>4408417</id><snippet>huffTree = makeHuffTree(exampleData)
tot = printHuffTree2(freqs, huffTree)
print 'Sum = ', tot
</snippet></ROW><ROW><id>4408417</id><snippet>#!/usr/bin/env python

import heapq

def makeHuffTree(symbolTupleList):
   trees = list(symbolTupleList)

   heapq.heapify(trees)
   while len(trees) &gt; 1:
      childR, childL = heapq.heappop(trees), heapq.heappop(trees)
      parent = (childL[0] + childR[0], childL, childR)
      heapq.heappush(trees, parent)

   return trees[0]

def printHuffTree(huffTree, prefix = ''):
   if len(huffTree) == 2:
      print huffTree[1], prefix, len(prefix)
   else:
      printHuffTree(huffTree[1], prefix + '0')
      printHuffTree(huffTree[2], prefix + '1')

def printHuffTree2(freqs, huffTree, prefix = ''):
   if len(huffTree) == 2:
      letter = huffTree[1]
      val = len(prefix)*freqs[letter]
      print '%s: %s\t%u * %f = %f' % \
          (huffTree[1], prefix, len(prefix), freqs[letter], val)
      return val
   else:
      lhs = printHuffTree2(freqs, huffTree[1], prefix + '0')
      rhs = printHuffTree2(freqs, huffTree[2], prefix + '1')
      return (lhs+rhs)

def buildHuffTree(huffTree, prefix = ''):
   if len(huffTree) == 2:
      return (huffTree[1], prefix, len(prefix))
   else:
      return (buildHuffTree(huffTree[1], prefix + '0'),
              buildHuffTree(huffTree[2], prefix + '1'))

if __name__ == '__main__':

   exampleData = [
     (0.124167  , 'e'),   
     (0.0969225 , 't'),   
     (0.0820011 , 'a'),   
     (0.0768052 , 'i'),
     (0.0368052 , 'h') 
   ]

   freqs = dict([(b,a) for (a,b) in exampleData])

   huffTree = makeHuffTree(exampleData)
   tot = printHuffTree2(freqs, huffTree)
   print 'Sum = ', tot
</snippet></ROW><ROW><id>4408760</id><snippet>for line in open(PATH_TO_FILE):
    cursor.execute(line)
</snippet></ROW><ROW><id>4409584</id><snippet>cur.execute</snippet></ROW><ROW><id>4409584</id><snippet>cur.execute("select * from contacts where name like ?", ('%'+search+'%',))
</snippet></ROW><ROW><id>4409584</id><snippet>('%'+search+'%',)</snippet></ROW><ROW><id>4410376</id><snippet>html_style = 'mydoc.css'
</snippet></ROW><ROW><id>4410376</id><snippet>_static/mydoc.css</snippet></ROW><ROW><id>4410376</id><snippet>@import url("default.css");

span.strikethrough { text-decoration: line-through; }
</snippet></ROW><ROW><id>4410376</id><snippet> ..  role:: strikethrough

 make text :strikethrough:`strikethrough` in the sphinx
</snippet></ROW><ROW><id>4410853</id><snippet>HuntingReportFrom(user=request.user)</snippet></ROW><ROW><id>4410853</id><snippet> def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        self.validate = kwargs.pop('validate', False)
        super(HuntingReportForm, self).__init__(*args, **kwargs)
        self.fields['bag_list'].queryset = Trophies.objects.filter(user = self.user)
</snippet></ROW><ROW><id>4411048</id><snippet>os.walk()</snippet></ROW><ROW><id>4411048</id><snippet>sftp.mkdir()</snippet></ROW><ROW><id>4411048</id><snippet>sftp.put()</snippet></ROW><ROW><id>4411048</id><snippet>os.path.islink()</snippet></ROW><ROW><id>4411115</id><snippet>import fileinput
import sys
import re

def convert(paths):
    for line in fileinput.input(paths, inplace=True, backup='~'):
        line=re.sub(r'#\s*print\s*(.*)',r'logging.debug(\1)',line)
        sys.stdout.write(line)

if __name__=='__main__':
    convert(sys.argv[1:])
</snippet></ROW><ROW><id>4411115</id><snippet>% print2log.py *.py
</snippet></ROW><ROW><id>4411115</id><snippet>~</snippet></ROW><ROW><id>4411115</id><snippet>#print 'foo'   --&gt;  logging.debug('foo')
</snippet></ROW><ROW><id>4411115</id><snippet>#print('foo')  --&gt; logging.debug(('foo'))
</snippet></ROW><ROW><id>4411115</id><snippet>#print('''foo        logging.debug(('''foo)
#bar''')       --&gt;   #bar''')
</snippet></ROW><ROW><id>4411143</id><snippet>import os
os.environ["TM_FILEPATH"]
</snippet></ROW><ROW><id>4411143</id><snippet>os.environ</snippet></ROW><ROW><id>4411184</id><snippet>bisect</snippet></ROW><ROW><id>4411184</id><snippet>#!/usr/bin/env python
import re
from trieMatch import PrefixMatch # https://gist.github.com/736416

pm = PrefixMatch(['YELLOW', 'GREEN', 'RED', ]) # huge list of 10 000 members
# if list is static, it might be worth picking "pm" to avoid rebuilding each time

f = open("huge_file.txt", "r") ## file with &gt; 100 000 lines
lines = f.readlines()
f.close()

regexp = re.compile(r'^.*?fruit=([A-Z]+)')
filtered = (line for line in lines if pm.match(regexp.match(line).group(1)))
</snippet></ROW><ROW><id>4411184</id><snippet>PrefixMatch</snippet></ROW><ROW><id>4411184</id><snippet>necessary</snippet></ROW><ROW><id>4411184</id><snippet>PickleMatch</snippet></ROW><ROW><id>4411184</id><snippet>/* Special wrapper to support stable sorting using the decorate-sort-undecorate
   pattern.  Holds a key which is used for comparisons and the original record
   which is returned during the undecorate phase.  By exposing only the key
   .... */
</snippet></ROW><ROW><id>4411184</id><snippet>sorted_generator = sorted(filtered, key=regexp.match(line).group(1))
</snippet></ROW><ROW><id>4411300</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>4411300</id><snippet>yield</snippet></ROW><ROW><id>4411391</id><snippet>table[:] = [row for row in table if '/' not in row[7]]
</snippet></ROW><ROW><id>4411671</id><snippet>from PIL import Image, ImageOps
</snippet></ROW><ROW><id>4411671</id><snippet>import Image, ImageOps
</snippet></ROW><ROW><id>4411837</id><snippet>levels = [{}, {}, {}]
</snippet></ROW><ROW><id>4412150</id><snippet>class FeatureManager(models.Manager):

    @staticmethod
    def _test_cases_eq_0( qs ):
       return qs.annotate( num_test_cases=models.Count('testcase_set') ).filter(num_test_cases=0)

    @staticmethod
    def _standardized_gt_0( qs ):
        return qs.annotate( standardised=Count('documentation_set__standard') ).filter(standardised__gt=0)

    def without_test_cases(self):
        return self._test_cases_eq_0( self.get_query_set() )

    def standardised(self):
        return self._standardized_gt_0( self.get_query_set() )

    def intersection( self ):
        return self._test_cases_eq_0( self._standardized_gt_0( self.get_query_set() ) )
</snippet></ROW><ROW><id>4412630</id><snippet>class Proxy(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.copyfile(urllib.urlopen(self.path), self.wfile)
</snippet></ROW><ROW><id>4412630</id><snippet>SimpleHTTPRequestHandler</snippet></ROW><ROW><id>4412630</id><snippet>path</snippet></ROW><ROW><id>4412630</id><snippet>do*</snippet></ROW><ROW><id>4412753</id><snippet>WM_LBUTTONDOWN</snippet></ROW><ROW><id>4412753</id><snippet>WM_LBUTTONUP</snippet></ROW><ROW><id>4412753</id><snippet>WM_LBUTTONDBLCLK</snippet></ROW><ROW><id>4412753</id><snippet>CS_DBLCLKS</snippet></ROW><ROW><id>4412753</id><snippet>WM_LBUTTONDBLCLK</snippet></ROW><ROW><id>4412753</id><snippet>WM_LBUTTONDBLCLK</snippet></ROW><ROW><id>4412855</id><snippet>import SocketServer

class MyTCPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
            # self.request is the TCP socket connected to the client
            self.data = self.request.recv(1024).strip()
            print "%s wrote:" % self.client_address[0]
            print self.data
            if '&lt;policy-file-request/&gt;' in self.data:
                print 'received policy'
                conn.send('&lt;?xml version="1.0"?&gt;&lt;cross-domain-policy&gt;&lt;allow-access-from domain="*" to-ports="50007" /&gt;&lt;/cross-domain-policy&gt;')
                conn.send('hellow wolrd')

def main():
    # Create the server, binding to localhost on port 9999
    server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

    # Activate the server; this will keep running until you
    # interrupt the program with Ctrl-C
    server.serve_forever()
</snippet></ROW><ROW><id>4413618</id><snippet>py&gt; matrix=defaultdict(lambda:defaultdict(lambda:0))
py&gt; matrix[2][4]
0
py&gt; matrix[2][4]=8
py&gt; matrix[2][4]
8
py&gt; matrix[-1][2]
0
</snippet></ROW><ROW><id>4413680</id><snippet>recv</snippet></ROW><ROW><id>4413680</id><snippet>recv</snippet></ROW><ROW><id>4413827</id><snippet>while True:
    #this is the menu
    menu=input("What would you like to do?\ntype 1 for method1 or 2 for method2: ")
    if(menu=="1"):
        method1()
    if(menu=="2"):
        method2()
</snippet></ROW><ROW><id>4413827</id><snippet>if menu == "3":
    break
</snippet></ROW><ROW><id>4413829</id><snippet>util</snippet></ROW><ROW><id>4413829</id><snippet>util</snippet></ROW><ROW><id>4414039</id><snippet>raw_input</snippet></ROW><ROW><id>4414039</id><snippet>input</snippet></ROW><ROW><id>4414039</id><snippet>input</snippet></ROW><ROW><id>4414039</id><snippet>int</snippet></ROW><ROW><id>4414039</id><snippet>input([prompt])</snippet></ROW><ROW><id>4414039</id><snippet>eval(raw_input(prompt))</snippet></ROW><ROW><id>4414039</id><snippet>SyntaxError</snippet></ROW><ROW><id>4414212</id><snippet>from collections import Counter # needs 2.7
from operator import itemgetter
def get_ngrams(strg, n, top=10, min_count=2):
    counter = Counter()
    for i in xrange(len(strg) - n + 1):
        gram = strg[i:i+n]
        counter[gram] += 1
    sort_these = [(gram, count) for gram, count in counter.iteritems() if count &gt;= min_count]
    best = sorted(sort_these, key=itemgetter(1), reverse=True)[:top]
    return best
</snippet></ROW><ROW><id>4414212</id><snippet>def multifind(strg, gram):
    positions = []
    end = len(strg)
    pos = 0
    while pos &lt; end:
        pos = strg.find(gram, pos)
        if pos == -1:
            break
        positions.append(pos)
        pos += 1
    return positions
</snippet></ROW><ROW><id>4414212</id><snippet>deltas = [b - a for a, b in zip(positions, positions[1:])]
</snippet></ROW><ROW><id>4414562</id><snippet>urllib2</snippet></ROW><ROW><id>4414562</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>4414710</id><snippet>import mechanize
br=mechanize.Browser()
br.open('https://mog.com/hp/sign_in')
br.select_form(nr=0) 
br['user[login]']= your_login
br['user[password]']= your_password
br.submit()
br.retrieve('http://mog.com/my_mog/playlists','playlist.html')
</snippet></ROW><ROW><id>4414710</id><snippet>for link in br.links():
    print link.url, link.text
</snippet></ROW><ROW><id>4414710</id><snippet>playlist.html</snippet></ROW><ROW><id>4414710</id><snippet>from BeautifulSoup import BeautifulSoup
import re
soup = BeautifulSoup(file('playlist.html').read())
for link in soup.findAll('a', attrs={'href': re.compile("your matching re")}):
    print link.get('href')
</snippet></ROW><ROW><id>4414788</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>4414788</id><snippet>(None, None, None)</snippet></ROW><ROW><id>4414788</id><snippet>self</snippet></ROW><ROW><id>4414788</id><snippet>@assertion_tracker
def test_foo(self):
    # some test logic
</snippet></ROW><ROW><id>4414841</id><snippet>string1.rstrip("-")
# "title"
string2.rstrip("-")
# "title"
string3.rstrip("-")
# "title-is-a-title"
</snippet></ROW><ROW><id>4414863</id><snippet>formfield_for_dbfield</snippet></ROW><ROW><id>4414863</id><snippet>class BlogAdmin(admin.ModelAdmin):

    def formfield_for_dbfield(self, db_field, **kwargs):
        field = super(BlogAdmin, self).formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == 'content':
            field.widget = ....
            field.widget.attrs['class'] = ...
        return field
</snippet></ROW><ROW><id>4414863</id><snippet>class BlogPost(Displayable, Ownable, Content):
    def __init__(self, *args, **kwargs):
        super(BlogPost, self).__init__(*args, **kwargs)
        def formfield_new(self, *args, **kwargs):
            # do here what you would like to do
            return formfield
        instancemethod = type(self._meta.get_field('content').formfield)
        self._meta.get_field('content').formfield = instancemethod(formfield_new,
                                                                   self, BlogPost)
</snippet></ROW><ROW><id>4415078</id><snippet>htmldata = htmldata.decode(&lt;the encoding you found in the headers&gt;)
</snippet></ROW><ROW><id>4415151</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1000/30
33.3333333333336
</snippet></ROW><ROW><id>4415278</id><snippet>QHeaderView</snippet></ROW><ROW><id>4415278</id><snippet>hideSection</snippet></ROW><ROW><id>4415685</id><snippet>Timer</snippet></ROW><ROW><id>4415685</id><snippet>import threading

def hello(arg):
    print arg

t = threading.Timer(2, hello, ["bb"])
t.start()

while 1:
    pass
</snippet></ROW><ROW><id>4415685</id><snippet>"bb"</snippet></ROW><ROW><id>4415685</id><snippet>["b", "b"]</snippet></ROW><ROW><id>4415685</id><snippet>kwargs</snippet></ROW><ROW><id>4415685</id><snippet>t = threading.Timer(2, hello, ["bb"], {arg: 1})
</snippet></ROW><ROW><id>4415948</id><snippet>for x in object</snippet></ROW><ROW><id>4415948</id><snippet>__iter__</snippet></ROW><ROW><id>4415948</id><snippet>next()</snippet></ROW><ROW><id>4415948</id><snippet>__next__</snippet></ROW><ROW><id>4415948</id><snippet>StopIteration</snippet></ROW><ROW><id>4415948</id><snippet>if x in object</snippet></ROW><ROW><id>4415948</id><snippet>__contains__</snippet></ROW><ROW><id>4416083</id><snippet>find</snippet></ROW><ROW><id>4416083</id><snippet>findall</snippet></ROW><ROW><id>4416083</id><snippet>[0]</snippet></ROW><ROW><id>4416083</id><snippet>table = soup.find('table' ,attrs={'class':'bp_ergebnis_tab_info'})
</snippet></ROW><ROW><id>4416083</id><snippet>find</snippet></ROW><ROW><id>4416083</id><snippet>td</snippet></ROW><ROW><id>4416083</id><snippet>first_td = soup.find('td')
</snippet></ROW><ROW><id>4416083</id><snippet>renderContents()</snippet></ROW><ROW><id>4416083</id><snippet>text = first_td.renderContents()
</snippet></ROW><ROW><id>4416083</id><snippet>strip()</snippet></ROW><ROW><id>4416083</id><snippet>trimmed_text = text.strip()
</snippet></ROW><ROW><id>4416083</id><snippet>&gt;&gt;&gt; print trimmed_text
This is a sample text
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4416448</id><snippet>def readfile(pathname):
    f = open(sti + '/testdata.txt')
    for line in f.readlines():
        line = line.strip()
        x, y = line.split(',')
        x, y = float(x),float(y)
        yield x, y
</snippet></ROW><ROW><id>4416448</id><snippet>points = list(readfile(pathname))
max_x = max(x for x, y in points)
max_y = max(y for x, y in points)
</snippet></ROW><ROW><id>4416529</id><snippet>import os
import subprocess
import textwrap

# create a batch file with some commands in it
batch_filename = 'commands.bat'
with open(batch_filename, "wt") as batchfile:
    batchfile.write(textwrap.dedent("""
        python hello.py
        if errorlevel 1 (
            @echo non-zero exit code: %errorlevel% - terminating
            exit
        )
        time /t
        date /t
    """))

# execute the batch file as a separate process and echo its output
kwargs = dict(stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
              universal_newlines=True)
with subprocess.Popen(batch_filename, **kwargs).stdout as output:
    for line in output:
        print line,

try: os.remove(batch_filename)  # clean up
except os.error: pass
</snippet></ROW><ROW><id>4416628</id><snippet>del a</snippet></ROW><ROW><id>4416628</id><snippet>a</snippet></ROW><ROW><id>4416628</id><snippet>a</snippet></ROW><ROW><id>4416628</id><snippet>b</snippet></ROW><ROW><id>4416628</id><snippet>del b</snippet></ROW><ROW><id>4416628</id><snippet>+----------+    +----------+
|  dict 1  |    |  dict 2  |
|          | &lt;- |  key 'a' |
|  key 'b' | -&gt; |          |
+----------+    +----------+
</snippet></ROW><ROW><id>4416992</id><snippet>sudo sh setuptools-0.6c11-py2.6.egg
</snippet></ROW><ROW><id>4417129</id><snippet>template.loader.get_template()</snippet></ROW><ROW><id>4417129</id><snippet>{% load %}</snippet></ROW><ROW><id>4417129</id><snippet>template.loader.get_template()</snippet></ROW><ROW><id>4417129</id><snippet>template.loader.get_template()</snippet></ROW><ROW><id>4417241</id><snippet>def draw(tick, (whatever other arguments you have...):
    ... #draw mud and grass
    #the modulo operator % gets the remainder of the two numbers, so 12 % 10 = 2
    filename = "images\water\water1000" + str(tick % 10) + ".png"
    waterimg = pygame.image.load(filename)
    ... #blit the waterimg, but don't flip
</snippet></ROW><ROW><id>4417241</id><snippet>waterimg = watertiles[tick % 10]
</snippet></ROW><ROW><id>4417432</id><snippet>#!/usr/bin/python

from distutils.core import setup
import py2exe, sys, wx, os

# Se eseguito senza argomenti, crea l'exe in quiet mode.
# If executed without args, it makes the exe in quiet mode
if len(sys.argv) == 1:
    sys.argv.append("py2exe")
    sys.argv.append("-q")

class FileBrowser(wx.FileDialog):
    def __init__(self):
        wildcard = "Python files (*.py)|*.py|" \
            "Tutti i files (*.*)|*.*"
        dialog = wx.FileDialog(None, "Choose the file", os.getcwd(),
            "", wildcard, wx.OPEN)
        if dialog.ShowModal() == wx.ID_OK:
            print(dialog.GetPath())
        self.file = dialog.GetPath()
        self.fin = open(self.file, 'r')
        dialog.Destroy()

class Target:
    def __init__(self, **kw):
        self.__dict__.update(kw)
        # info di versione
        self.version = "1.0.0"
        self.company_name = "Bancaldo TM"
        self.copyright = "no copyright"
        self.name = "py2exe sample files"

manifest_template = '''
&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;
&lt;assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'&gt;
  &lt;trustInfo xmlns="urn:schemas-microsoft-com:asm.v3"&gt;
    &lt;security&gt;
      &lt;requestedPrivileges&gt;
        &lt;requestedExecutionLevel level='asInvoker' uiAccess='false' /&gt;
      &lt;/requestedPrivileges&gt;
    &lt;/security&gt;
  &lt;/trustInfo&gt;
  &lt;dependency&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity
     type='win32'
     name='Microsoft.VC90.CRT'
     version='9.0.21022.8'
     processorArchitecture='*'
     publicKeyToken='1fc8b3b9a1e18e3b' /&gt;
    &lt;/dependentAssembly&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity
         type="win32"
         name="Microsoft.Windows.Common-Controls"
         version="6.0.0.0"
         processorArchitecture="*"
         publicKeyToken="6595b64144ccf1df"
         language="*" /&gt;
    &lt;/dependentAssembly&gt;
  &lt;/dependency&gt;
&lt;/assembly&gt;
'''
# File Browser
app = wx.PySimpleApp()
fb = FileBrowser()
# Assegno il nome all'eseguibile di uscita
# Give the name at the exe file being created
textentry = wx.TextEntryDialog(None, "name file EXE?",'','')
if textentry.ShowModal() == wx.ID_OK:
    destname = textentry.GetValue()

RT_MANIFEST = 24

test_wx = Target(
    description = "A GUI app",
    script = fb.file,     # programma sorgente dal quale creiamo l'exe
                          # source from wich we create the exe
    other_resources = [(RT_MANIFEST, 1, manifest_template % dict(prog="tried"))],
    icon_resources = [(1, "py.ico")],
#    dest_base = "prova_banco") # Nome file di destinazione
                                #Name Destination file
    dest_base = destname) # Nome file di destinazione

setup(
    data_files=["py.ico"],
    options = {"py2exe": {"compressed": 1,
                          "optimize": 2,
                          "ascii": 1,
                          "bundle_files": 1}},
    zipfile = None,
    windows = [test_wx],
    )
</snippet></ROW><ROW><id>4417432</id><snippet>from distutils.core import setup
import py2exe
setup(
    name = 'AppPyName',
    description = 'Python-based App',
    version = '1.0',
    windows = [{'script': 'Main.pyw'}],
    options = {'py2exe': {'bundle_files': 1,'packages':'encodings','includes': 'cairo, pango, pangocairo, atk, gobject',}},
    data_files=[ 'gui.glade',]
    zipfile = None, 
)
</snippet></ROW><ROW><id>4417432</id><snippet>from distutils.core import setup
import py2exe

setup(console=['hello.py'])
</snippet></ROW><ROW><id>4417432</id><snippet>python setup.py py2exe
</snippet></ROW><ROW><id>4417878</id><snippet>global</snippet></ROW><ROW><id>4417878</id><snippet>def add(n):
    #global numbers
    numbers = numbers + [n]
</snippet></ROW><ROW><id>4417878</id><snippet>global</snippet></ROW><ROW><id>4417878</id><snippet>num</snippet></ROW><ROW><id>4417878</id><snippet>num = thisnum
</snippet></ROW><ROW><id>4418036</id><snippet>str</snippet></ROW><ROW><id>4418036</id><snippet>any(all(c in match for c in x) for x in main)
</snippet></ROW><ROW><id>4418036</id><snippet>main = ['123', '147', '159', '258', '369', '357', '456', '789']

match1 = str(1374)
match2 = str(1892)

def has_any_match(main, match):
    return any(all(c in match for c in x) for x in main)

print has_any_match(main, match1)
print has_any_match(main, match2)
</snippet></ROW><ROW><id>4418036</id><snippet>def is_match(word, match):
    # Test if all the characters in word are also in match.
    return all(c in match for c in word)

def has_any_match(main, match):
    # Test if there is any word in main that matches.
    return any(is_match(word, match) for word in main)
</snippet></ROW><ROW><id>4418193</id><snippet>def execute(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # Poll process for new output until finished
    while True:
        nextline = process.stdout.readline()
        if nextline == '' and process.poll() != None:
            break
        sys.stdout.write(nextline)
        sys.stdout.flush()

    output = process.communicate()[0]
    exitCode = process.returncode

    if (exitCode == 0):
        return output
    else:
        raise ProcessException(command, exitCode, output)
</snippet></ROW><ROW><id>4418287</id><snippet>os.chdir</snippet></ROW><ROW><id>4418287</id><snippet>os.system("cls")</snippet></ROW><ROW><id>4418287</id><snippet>sys.ps1</snippet></ROW><ROW><id>4418287</id><snippet>sys.ps2</snippet></ROW><ROW><id>4418287</id><snippet>for</snippet></ROW><ROW><id>4418287</id><snippet>while</snippet></ROW><ROW><id>4418287</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4418287</id><snippet>import</snippet></ROW><ROW><id>4418287</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4418287</id><snippet>help</snippet></ROW><ROW><id>4418595</id><snippet>import a.a1.a1</snippet></ROW><ROW><id>4418595</id><snippet>from ..a1 import a1</snippet></ROW><ROW><id>4418757</id><snippet>&gt;&gt;&gt; class A(object):
...   def __eq__(self, other):
...     return True
... 
&gt;&gt;&gt; one, two = A(), A()
&gt;&gt;&gt; d = {one: "one"}
&gt;&gt;&gt; one == two
True
&gt;&gt;&gt; d[one]
'one'
&gt;&gt;&gt; d[two]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: &lt;__main__.A object at 0xb718836c&gt;

&gt;&gt;&gt; hash(set())  # sets cannot be dict keys
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
</snippet></ROW><ROW><id>4418757</id><snippet>class Unhashable(object):
  __hash__ = None
</snippet></ROW><ROW><id>4418820</id><snippet>book</snippet></ROW><ROW><id>4418820</id><snippet>mysql&gt; ALTER IGNORE TABLE book ADD UNIQUE INDEX book_index (title,author);
</snippet></ROW><ROW><id>4418820</id><snippet>author</snippet></ROW><ROW><id>4418820</id><snippet>(title,author)</snippet></ROW><ROW><id>4418820</id><snippet>(author)</snippet></ROW><ROW><id>4418820</id><snippet>sql='INSERT IGNORE INTO book (title,author,isbn) VALUES (%s, %s, %s)'
cursor.execute(sql,[title,author,isbn])
</snippet></ROW><ROW><id>4418820</id><snippet>(title,author)</snippet></ROW><ROW><id>4418820</id><snippet>(title,author,isbn)</snippet></ROW><ROW><id>4418820</id><snippet>book</snippet></ROW><ROW><id>4418820</id><snippet>(title,author)</snippet></ROW><ROW><id>4418820</id><snippet>INSERT</snippet></ROW><ROW><id>4418820</id><snippet>cursor.execute</snippet></ROW><ROW><id>4418891</id><snippet>#!/usr/bin/env python
"""Start process; wait 2 seconds; kill the process; print all process output."""
import subprocess
import tempfile
import time

def main():
    # open temporary file (it automatically deleted when it is closed)
    #  `Popen` requires `f.fileno()` so `SpooledTemporaryFile` adds nothing here
    f = tempfile.TemporaryFile() 

    # start process, redirect stdout
    p = subprocess.Popen(["top"], stdout=f)

    # wait 2 seconds
    time.sleep(2)

    # kill process
    #NOTE: if it doesn't kill the process then `p.wait()` blocks forever
    p.terminate() 
    p.wait() # wait for the process to terminate otherwise the output is garbled

    # print saved output
    f.seek(0) # rewind to the beginning of the file
    print f.read(), 
    f.close()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4418891</id><snippet>import collections
import subprocess
import time
import threading

def read_output(process, append):
    for line in iter(process.stdout.readline, ""):
        append(line)

def main():
    # start process, redirect stdout
    process = subprocess.Popen(["top"], stdout=subprocess.PIPE, close_fds=True)
    try:
        # save last `number_of_lines` lines of the process output
        number_of_lines = 200
        q = collections.deque(maxlen=number_of_lines) # atomic .append()
        t = threading.Thread(target=read_output, args=(process, q.append))
        t.daemon = True
        t.start()

        #
        time.sleep(2)
    finally:
        process.terminate() #NOTE: it doesn't ensure the process termination

    # print saved lines
    print ''.join(q)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4418891</id><snippet>q.append()</snippet></ROW><ROW><id>4418891</id><snippet>signal.alarm()</snippet></ROW><ROW><id>4418891</id><snippet>signal.alarm()</snippet></ROW><ROW><id>4418891</id><snippet>process.terminate()</snippet></ROW><ROW><id>4418891</id><snippet>subprocess</snippet></ROW><ROW><id>4418891</id><snippet>import collections
import signal
import subprocess

class Alarm(Exception):
    pass

def alarm_handler(signum, frame):
    raise Alarm

def main():
    # start process, redirect stdout
    process = subprocess.Popen(["top"], stdout=subprocess.PIPE, close_fds=True)

    # set signal handler
    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(2) # produce SIGALRM in 2 seconds

    try:
        # save last `number_of_lines` lines of the process output
        number_of_lines = 200
        q = collections.deque(maxlen=number_of_lines)
        for line in iter(process.stdout.readline, ""):
            q.append(line)
        signal.alarm(0) # cancel alarm
    except Alarm:
        process.terminate()
    finally:
        # print saved lines
        print ''.join(q)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4418891</id><snippet>process.stdout.readline()</snippet></ROW><ROW><id>4418891</id><snippet>threading.Timer</snippet></ROW><ROW><id>4418891</id><snippet>import collections
import subprocess
import threading

def main():
    # start process, redirect stdout
    process = subprocess.Popen(["top"], stdout=subprocess.PIPE, close_fds=True)

    # terminate process in timeout seconds
    timeout = 2 # seconds
    timer = threading.Timer(timeout, process.terminate)
    timer.start()

    # save last `number_of_lines` lines of the process output
    number_of_lines = 200
    q = collections.deque(process.stdout, maxlen=number_of_lines)
    timer.cancel()

    # print saved lines
    print ''.join(q),

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4418891</id><snippet>process.stdout</snippet></ROW><ROW><id>4418891</id><snippet>iter(process.stdout.readline, "")</snippet></ROW><ROW><id>4418891</id><snippet>process.terminate()</snippet></ROW><ROW><id>4418891</id><snippet>import collections
import subprocess
import sys
import time

def main():
    args = sys.argv[1:]
    if not args:
        args = ['top']

    # start process, redirect stdout
    process = subprocess.Popen(args, stdout=subprocess.PIPE, close_fds=True)

    # save last `number_of_lines` lines of the process output
    number_of_lines = 200
    q = collections.deque(maxlen=number_of_lines)

    timeout = 2 # seconds
    now = start = time.time()    
    while (now - start) &lt; timeout:
        line = process.stdout.readline()
        if not line:
            break
        q.append(line)
        now = time.time()
    else: # on timeout
        process.terminate()

    # print saved lines
    print ''.join(q),

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4418891</id><snippet>process.stdout.readline()</snippet></ROW><ROW><id>4419114</id><snippet>import sys

memo = set()

def getsizeof(memo, obj):
    location = id(obj)
    if location in memo:
        return 0
    memo.add(location)
    total = sys.getsizeof(obj)
    if isinstance(obj, dict):
        for key in obj:
            total += getsizeof(memo, key)
            total += getsizeof(memo, obj[key])
    elif isinstance(obj, (list, tuple)):
        for item in obj:
            total += getsizeof(memo, item)
    elif isinstance(obj, (int, str)):
        pass
    elif hasattr(obj, '__slots__') and not hasattr(obj, '__dict__'):
        for name in obj.__slots__:
            total += getsizeof(memo, getattr(obj, name))
    else:
        raise TypeError('Unknown: ' + repr(type(obj)))
    return total
</snippet></ROW><ROW><id>4419395</id><snippet>RB.bind( "&lt;Enter&gt;", lambda event: self.WSRB_UD(event, i) )
</snippet></ROW><ROW><id>4419395</id><snippet>functools.partial</snippet></ROW><ROW><id>4419413</id><snippet>auth</snippet></ROW><ROW><id>4419413</id><snippet>user</snippet></ROW><ROW><id>4419413</id><snippet>user</snippet></ROW><ROW><id>4419413</id><snippet>if</snippet></ROW><ROW><id>4419626</id><snippet>threading.Timer()</snippet></ROW><ROW><id>4419626</id><snippet>Thread</snippet></ROW><ROW><id>4419626</id><snippet>import threading

def ontimer():
    print threading.current_thread()

def main():
    threading.Timer(2, ontimer).start()
    print threading.current_thread()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4419626</id><snippet>Timer</snippet></ROW><ROW><id>4419716</id><snippet>htmllib</snippet></ROW><ROW><id>4419716</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>4419716</id><snippet>javascript:</snippet></ROW><ROW><id>4419716</id><snippet>href</snippet></ROW><ROW><id>4419716</id><snippet>on</snippet></ROW><ROW><id>4419873</id><snippet>help(the_funcion)</snippet></ROW><ROW><id>4419873</id><snippet>&gt;&gt;&gt; help(enumerate)
Help on class enumerate in module __builtin__:

class enumerate(object)
 |  enumerate(iterable[, start]) -&gt; iterator for index, value of iterable
 |
 |  Return an enumerate object.  iterable must be another object that supports
 |  iteration.  The enumerate object yields pairs containing a count (from
 |  start, which defaults to zero) and a value yielded by the iterable argument
 |  enumerate is useful for obtaining an indexed list:
 |      (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
 |
 |  Methods defined here:
 |
 |  __getattribute__(...)
 |      x.__getattribute__('name') &lt;==&gt; x.name
 |
 |  __iter__(...)
 |      x.__iter__() &lt;==&gt; iter(x)
 |
 |  next(...)
 |      x.next() -&gt; the next value, or raise StopIteration
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __new__ = &lt;built-in method __new__ of type object&gt;
 |      T.__new__(S, ...) -&gt; a new object with type S, a subtype of T
</snippet></ROW><ROW><id>4420022</id><snippet>content = [
    {'url':'url1', 'taglist':['b','a','c','d']},
    {'url':'url2', 'taglist':['c','a','b','d']},
    {'url':'url3', 'taglist':['a','b','c','d']},
    {'url':'url4', 'taglist':['a','b','d','c']},
    {'url':'url5', 'taglist':['d','a','c','b']}
]

search = {'d' : 1, 'a' : 2, 'b' : 3}

# We can create the tag cloud like this:
# tagCloud = set(sum((note['taglist'] for note in content), []))
# But we don't actually need it: instead, we'll just use a default value
# when looking things up in the 'search' dict.

# Create a [[relevance, tag],[],[],...] result list &amp; sort 
result = sorted(
    [
        [search.get(tag, 100), tag]
        for tag in note['taglist']
    ] + [[note['url']]]
    # The result will look like [ [relevance, tag],... , [url] ]
    # Note that the url is wrapped in a list too. This makes the
    # last processing step easier: we just take the last element of
    # each nested list.
    for note in content
)

# Remove the relevance values &amp; recreate a list containing
# the url string followed by corresponding tags. 
finalResult = [
    [x[-1] for x in note]
    for note in result
]

print "Content: ", content
print "Search: ", search
print "Final Result: ", finalResult
</snippet></ROW><ROW><id>4420238</id><snippet>def get_resource_path(rel_path):
    dir_of_py_file = os.path.dirname(__file__)
    rel_path_to_resource = os.path.join(dir_of_py_file, rel_path)
    abs_path_to_resource = os.path.abspath(rel_path_to_resource)
    return abs_path_to_resource
</snippet></ROW><ROW><id>4420238</id><snippet>self.set_icon_from_file(get_resource_path("icon.png"))
</snippet></ROW><ROW><id>4420238</id><snippet>./gtktest.py</snippet></ROW><ROW><id>4420238</id><snippet>icon.png</snippet></ROW><ROW><id>4420238</id><snippet>#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk

class HelloWorld:

    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget, data=None):
        gtk.main_quit()

    def __init__(self):
        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        self.window.set_icon_from_file('icon.png')

        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)

        # Creates a new button with the label "Hello World".
        self.button = gtk.Button("Hello World")

        self.window.add(self.button)
        self.button.show()
        self.window.show()

    def main(self):
        gtk.main()

if __name__ == "__main__":
    hello = HelloWorld()
    hello.main()
</snippet></ROW><ROW><id>4420536</id><snippet>myapp</snippet></ROW><ROW><id>4420536</id><snippet>myapp.wsgi</snippet></ROW><ROW><id>4420536</id><snippet>import sys
sys.path.append(DIRECTORY_WHERE_YOUR_PACKAGE_IS_LOCATED)
from myapp import app
</snippet></ROW><ROW><id>4420536</id><snippet>myapp</snippet></ROW><ROW><id>4420536</id><snippet>__init__.py</snippet></ROW><ROW><id>4421093</id><snippet>webview.load_uri()</snippet></ROW><ROW><id>4421093</id><snippet>'file.html'</snippet></ROW><ROW><id>4421093</id><snippet>'file://file.html'</snippet></ROW><ROW><id>4421125</id><snippet>__file__</snippet></ROW><ROW><id>4421125</id><snippet>__init__.py</snippet></ROW><ROW><id>4421125</id><snippet>__path__</snippet></ROW><ROW><id>4421125</id><snippet>hasattr(module_name, '__path__') and module_name.__path__[0] or module_name.__file__</snippet></ROW><ROW><id>4421125</id><snippet>import socket, SOAPpy # SOAPpy is a package
socket.__file__
# .../python2.5/socket.pyc
socket.__path__
# AttributeError: 'module' object has no attribute '__path__'
SOAPpy.__file__
# .../2.5/site-packages/SOAPpy/__init__.pyc
SOAPpy.__path__
# ['.../2.5/site-packages/SOAPpy']
</snippet></ROW><ROW><id>4421206</id><snippet>__init__.py</snippet></ROW><ROW><id>4421427</id><snippet>&gt;&gt;&gt; list01 = (['a','b','c'],['b','a','d'],['d','e','c'],['a','f','d'])
&gt;&gt;&gt; map(sorted, list01)
[['a', 'b', 'c'], ['a', 'b', 'd'], ['c', 'd', 'e'], ['a', 'd', 'f']]
&gt;&gt;&gt; sorted(map(sorted, list01))
[['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'd', 'f'], ['c', 'd', 'e']]
</snippet></ROW><ROW><id>4421485</id><snippet>import urllib2
request = urllib2.Request('http://localhost:8080')
request.get_method = lambda : 'HEAD'

response = urllib2.urlopen(request)
print response.info()
</snippet></ROW><ROW><id>4421485</id><snippet>Server: BaseHTTP/0.3 Python/2.6.6
Date: Sun, 12 Dec 2010 11:52:33 GMT
Content-type: text/html
X-REQUEST_METHOD: HEAD
</snippet></ROW><ROW><id>4421485</id><snippet>Sun Dec 12 12:52:28 2010 Server Starts - localhost:8080
localhost.localdomain - - [12/Dec/2010 12:52:33] "HEAD / HTTP/1.1" 200 -
</snippet></ROW><ROW><id>4421485</id><snippet>import httplib2
h = httplib2.Http()
resp = h.request("http://www.google.com", 'HEAD')
</snippet></ROW><ROW><id>4421523</id><snippet>filter()</snippet></ROW><ROW><id>4421523</id><snippet>&gt;&gt;&gt; filter(lambda x: not x in (4, 5, 7), xrange(10))
[0, 1, 2, 3, 6, 8, 9]
</snippet></ROW><ROW><id>4421523</id><snippet>&gt;&gt;&gt; filter(lambda x: not x[0] in (4, 5, 7), [[a] for a in xrange(10)])
[[0], [1], [2], [3], [6], [8], [9]]
</snippet></ROW><ROW><id>4421628</id><snippet>--noreload</snippet></ROW><ROW><id>4421628</id><snippet>call_command</snippet></ROW><ROW><id>4421628</id><snippet>call_command("runserver", noreload=True)</snippet></ROW><ROW><id>4421628</id><snippet>QThread</snippet></ROW><ROW><id>4421628</id><snippet>QApplication.exec_()</snippet></ROW><ROW><id>4421628</id><snippet>starter.start()</snippet></ROW><ROW><id>4422186</id><snippet>frequencies = {"a": 3, "b": 4}</snippet></ROW><ROW><id>4422186</id><snippet>frequencies.values()</snippet></ROW><ROW><id>4422186</id><snippet>[3, 4]</snippet></ROW><ROW><id>4422186</id><snippet>total = float(sum(frequencies.values()))
</snippet></ROW><ROW><id>4422186</id><snippet>probs = [(count / total, char) for char, count in frequencies.iteritems()]
</snippet></ROW><ROW><id>4422286</id><snippet>.so</snippet></ROW><ROW><id>4422374</id><snippet>def pairs( seq ):
    ret = []
    # go to the 2nd last item of seq
    for k in range(len(seq)-1):
        # append a pair
        ret.append((seq[k], seq[k+1]))
    return ret
</snippet></ROW><ROW><id>4422374</id><snippet>def sorted_pairs( seq ):
    ret = []
    for k in range(len(seq)-1):
        x,y = (seq[k], seq[k+1])
        if x &lt;= y:
            ret.append((x,y))
        else:
            ret.append((y,x))
    return ret
</snippet></ROW><ROW><id>4422374</id><snippet>def has_common_pairs( *seqs ):
    """ checks if there are any common pairs among any of the seqs """
    # store all the pairs we've seen
    seen = set()
    for seq in seqs:
        # generate pairs for each seq in seqs
        pair_seq = sorted_pairs(seq)
        for pair in pair_seq:
            # have we seen the pair before?
            if pair in seen:
                return True
            seen.add(pair)
    return False
</snippet></ROW><ROW><id>4422374</id><snippet>def check(xxr):
    return not has_common_pairs(*xxr)
</snippet></ROW><ROW><id>4422374</id><snippet>def sorted_pairs( seq ):
    """ yield pairs (fst, snd) generated from seq 
        where fst &lt;= snd for all fst, snd"""
    it = iter(seq)
    fst = next(it)
    for snd in it:
        if first &lt;= snd:
            yield fst, snd
        else:
            yield snd, fst
        first = snd
</snippet></ROW><ROW><id>4422476</id><snippet>void normalize_logspace_matrix(size_t nrow, size_t ncol, 
                               size_t rowstride, size_t colstride,
                               double* mat);
</snippet></ROW><ROW><id>4422476</id><snippet>def normalize_logspace(np.ndarray[np.double_t, ndim=2] mat):
    cdef Py_ssize_t n, d, rowstride, colstride
    n = mat.shape[0]
    d = mat.shape[1]
    rowstride = mat.strides[0] // mat.itemsize
    colstride = mat.strides[1] // mat.itemsize
    normalize_logspace_matrix(n, d, rowstride, colstride, &lt;double*&gt; mat.data)
    return mat
</snippet></ROW><ROW><id>4422476</id><snippet>mat[row*ncol + col]</snippet></ROW><ROW><id>4422476</id><snippet>mat[row*rowstride + col*colstride</snippet></ROW><ROW><id>4422489</id><snippet>"Username and password do not match" in br.response().read()
</snippet></ROW><ROW><id>4422489</id><snippet>any(c.domain == ".megaupload.com" and c.name == "user" for c in cj)
</snippet></ROW><ROW><id>4422496</id><snippet>sed -i "s/YOUR_STRING//g" *

/* or */
for file in `grep YOUR_STRING -l *`; do sed -i "s/YOUR_STRING//g" $file; done
</snippet></ROW><ROW><id>4422496</id><snippet>YOUR_STRING</snippet></ROW><ROW><id>4422974</id><snippet>if command.lower().startswith('!greet '):
    put('Hi, ' + command[7:].strip() + '!')

'!greet Greg' -&gt; [ put()s 'Greg' ]
'!Greet  Fred ' -&gt; [ put()s 'Fred' ]
'!hello John' -&gt; [ nothing ]
</snippet></ROW><ROW><id>4423505</id><snippet>split()</snippet></ROW><ROW><id>4423505</id><snippet>&gt;&gt;&gt; s = 'Your ID number is: 41233'
&gt;&gt;&gt; print s.split(":")[1].strip()
41233
</snippet></ROW><ROW><id>4423513</id><snippet>from multiprocessing import Process

def run_app():
    ... run the app ...

def run_server():
    ... run the server ...

def main():
    app = Process(target=run_app)
    app.start()

    server = Process(target=run_server)
    server.start()

    app.join()
    server.terminate()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>4423513</id><snippet>os.fork()</snippet></ROW><ROW><id>4423714</id><snippet>xrange</snippet></ROW><ROW><id>4423714</id><snippet>range</snippet></ROW><ROW><id>4423842</id><snippet>matplotlib.cbook.report_memory()</snippet></ROW><ROW><id>4423842</id><snippet>import matplotlib.cbook as mc
import multiprocessing as mp
import matplotlib.cm as cm

if __name__=='__main__':
    for _ in range(10):
        srcName='test.data'
        dstName='test.png'
        vmin = 0
        vmax = 5
        cmap = cm.jet
        sideLength = 500
        dataRanges = (0.0,1.0,0.0,1.0)
        delim = ','
        dpi = 72
        proc=mp.Process(target=makeFrame,args=(
            srcName,dstName,(vmin,vmax,cmap),sideLength,
            dataRanges,delim,dpi))
        proc.start()
        proc.join()
        usage=mc.report_memory()
        print(usage)
</snippet></ROW><ROW><id>4424064</id><snippet>setup(...,
      entry_points = {"gui_scripts" : ['name-of-executable = name_of_package.launcher:main']})
</snippet></ROW><ROW><id>4424139</id><snippet>import BeautifulSoup

doc = '''&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="firstpara" align="center"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;a onclick=""&gt;one&lt;/a&gt;.&lt;p id="secondpara" align="blah"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;b&gt;two&lt;/b&gt;.&lt;/html&gt;'''
soup = BeautifulSoup.BeautifulSoup(doc)

for tag in soup.recursiveChildGenerator():
    if isinstance(tag,BeautifulSoup.Tag) and tag.name in ('a','b','i'):
        print(tag)
</snippet></ROW><ROW><id>4424139</id><snippet>&lt;i&gt;paragraph&lt;/i&gt;
&lt;a onclick=""&gt;one&lt;/a&gt;
&lt;i&gt;paragraph&lt;/i&gt;
&lt;b&gt;two&lt;/b&gt;
</snippet></ROW><ROW><id>4424139</id><snippet>print(tag)</snippet></ROW><ROW><id>4424139</id><snippet>print(tag.string)</snippet></ROW><ROW><id>4424139</id><snippet>onclick=""</snippet></ROW><ROW><id>4424139</id><snippet>a</snippet></ROW><ROW><id>4424139</id><snippet>if isinstance(tag,BeautifulSoup.Tag) and tag.name in ('a','b','i'):
    if tag.name=='a':
        del tag['onclick']
    print(tag)
</snippet></ROW><ROW><id>4424295</id><snippet>s[1:]
</snippet></ROW><ROW><id>4424295</id><snippet>itertools.islice(s, 1, None)
</snippet></ROW><ROW><id>4424358</id><snippet>from</snippet></ROW><ROW><id>4424433</id><snippet>import eyeD3

tag = eyeD3.Tag ('file.mp3')
tag.setVersion (eyeD3.ID3_V2_4)
tag.setTextEncoding (eyeD3.UTF_8_ENCODING)
tag.setArtist ('artist')
tag.setAlbum ('album')
tag.setTitle ('title')
tag.update ()
</snippet></ROW><ROW><id>4424714</id><snippet>tkFileDialog.askopenfile()</snippet></ROW><ROW><id>4424714</id><snippet>file</snippet></ROW><ROW><id>4424714</id><snippet>from Tkinter import *
import tkFileDialog, Tkconstants,collections

root = Tk()
root.title("TEST")
root.geometry("800x600")

def openFile():
    f_in = tkFileDialog.askopenfile(
                            parent=root,
                            title="Open .txt file",
                            filetypes=[("txt file",".txt"),("All files",".*")])

    frequencies = collections.defaultdict(int)
    for line in f_in:
        for char in line:
            frequencies[char] += 1
    f_in.close()
    total = float(sum(frequencies.values()))
    print 'total:', total

button_opt = {'fill': Tkconstants.BOTH, 'padx': 66, 'pady': 5}
fileName = ''
Button(root, text = 'Open .txt file',
       fg = 'black',
       command= openFile).pack(**button_opt)

root.mainloop()
</snippet></ROW><ROW><id>4424714</id><snippet>Tk</snippet></ROW><ROW><id>4425076</id><snippet>&gt;&gt;&gt; print urllib2.urlopen(
...   urllib2.Request(
...     "http://opendata.diavgeia.gov.gr/api/decisions?count=50&amp;output=json_full&amp;from=1",
...     headers={"accept": "*/*"})).read()[:200]
{"model":{"queryInfo":{"total":117458,"count":50,"order":"desc","from":1},"expandedDecisions":[{"metadata":{"date":1291932000000,"tags":{"tag":[]},"decisionType":{"uid":27,"label":"ΔΑΠΑΝΗ","extr
</snippet></ROW><ROW><id>4425231</id><snippet>str.translate</snippet></ROW><ROW><id>4425231</id><snippet># 2.
import operator
def sorted_histogram(a_dict):
  return [
    x[1] # the value
    for x in sorted(a_dict.items(), key=operator.itemgetter(1))
    # of each dict item, sorted by value (i.e. the [1] element of each item).
  ]

# 3.
english_histogram = sorted_histogram(english_dict)
cipher_histogram = sorted_histogram(cipher_dict)

# 4.
# Make the lowercase version
mapping = dict(zip(english_histogram, cipher_histogram))
# Make the uppercase version, and merge it in at the same time.
mapping.update(dict(
  (k.upper(), v.upper()) for (k, v) in zip(english_histogram, cipher_histogram)
))

# 5.
translated = ''.join( # make this list of characters, and string them together:
  mapping.get(c, c) # the mapped result, if possible; otherwise the original
  for c in cipher
)

# 6. Do whatever you want with 'translated' - write to file, etc.
</snippet></ROW><ROW><id>4425773</id><snippet>from itertools import permutations

xlist = ["word1", "word2", "word3"]

for n in range(1, len(xlist)+1):
    for perm in permutations(xlist, n):
        print "".join(perm)
</snippet></ROW><ROW><id>4425773</id><snippet>word1
word2
word3
word1word2
word1word3
word2word1
word2word3
word3word1
word3word2
word1word2word3
word1word3word2
word2word1word3
word2word3word1
word3word1word2
word3word2word1
</snippet></ROW><ROW><id>4425807</id><snippet>start_response</snippet></ROW><ROW><id>4425807</id><snippet>write</snippet></ROW><ROW><id>4425807</id><snippet>class Upperware(object):
  def __init__(self, app):
    self.wrapped_app = app

  def __call__(self, environ, start_response):
    def my_start_response(status, response_headers, exc_info=None):
      write = start_response(status, response_headers, exc_info)
      def my_write(body_data):
        # Do your middleware handling of writes here
        body_data = body_data.upper()
        write(body_data)
      return my_write
    return self.wrapped_app(environ, my_start_response)
</snippet></ROW><ROW><id>4425990</id><snippet>print random.choice(test[0].split('\n'))
line 5
</snippet></ROW><ROW><id>4426004</id><snippet>&gt;&gt;&gt; basis = [ (lambda x,n=n: n*x) for n in [0, 1, 2] ]     
&gt;&gt;&gt; print basis[0](1)
0
</snippet></ROW><ROW><id>4426103</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>4426103</id><snippet>FORMAT</snippet></ROW><ROW><id>4426103</id><snippet>FIELDS</snippet></ROW><ROW><id>4426103</id><snippet>#include</snippet></ROW><ROW><id>4426103</id><snippet>// builddict.h -- for defining Py_BuildValue() arguments

// define apppropriate macros for current usage
#ifdef FORMAT
    #define SPA_FIELD_LAST(FIELD)           "s:d"
    #define SPA_FIELD(FIELD)                SPA_FIELD_LAST(FIELD)", "
    #define TIME_FIELD_LAST(NAME)           "s:(i,i,i,i)"
    #define TIME_FIELD(NAME)                TIME_FIELD_LAST(NAME)", "
    #define TIME_KEY_FIELD_LAST(KEY,NAME)   "s:(i,i,i,i)"
    #define TIME_KEY_FIELD(KEY,NAME)        TIME_KEY_FIELD_LAST(KEY,NAME)", "
    #undef FORMAT
#elif defined FIELDS
    #define SPA_FIELD_LAST(FIELD)           #FIELD, spa.FIELD
    #define SPA_FIELD(FIELD)                SPA_FIELD_LAST(FIELD),
    #define TIME_FIELD_LAST(NAME)           #NAME, NAME##_hour, NAME##_min, NAME##_sec, NAME##_microsec
    #define TIME_FIELD(NAME)                TIME_FIELD_LAST(NAME),
    #define TIME_KEY_FIELD_LAST(KEY,NAME)   #KEY, NAME##_hour, NAME##_min, NAME##_sec, NAME##_microsec
    #define TIME_KEY_FIELD(KEY,NAME)        TIME_KEY_FIELD_LAST(KEY,NAME),
    #undef FIELDS
#else
    #error neither FORMAT nor FIELDS usage macros are defined
#endif

SPA_FIELD(jd)               // Julian day
SPA_FIELD(jc)               // Julian century
SPA_FIELD(jde)              // Julian ephemeris day
SPA_FIELD(jce)              // Julian ephemeris century
SPA_FIELD(jme)              // Julian ephemeris millennium
SPA_FIELD(l)                // earth heliocentric longitude [degrees]
SPA_FIELD(b)                // earth heliocentric latitude [degrees]
SPA_FIELD(r)                // earth radius vector [Astronomical Units)  AU]
SPA_FIELD(theta)            // geocentric longitude [degrees]
SPA_FIELD(beta)             // geocentric latitude [degrees]
SPA_FIELD(x0)               // mean elongation (moon-sun) [degrees]
SPA_FIELD(x1)               // mean anomaly (sun) [degrees]
SPA_FIELD(x2)               // mean anomaly (moon) [degrees]
SPA_FIELD(x3)               // argument latitude (moon) [degrees]
SPA_FIELD(x4)               // ascending longitude (moon) [degrees]
SPA_FIELD(del_psi)          // nutation longitude [degrees]
SPA_FIELD(del_epsilon)      // nutation obliquity [degrees]
SPA_FIELD(epsilon0)         // ecliptic mean obliquity [arc seconds]
SPA_FIELD(epsilon)          // ecliptic true obliquity  [degrees]
SPA_FIELD(del_tau)          // aberration correction [degrees]
SPA_FIELD(lamda)            // apparent sun longitude [degrees]
SPA_FIELD(nu0)              // Greenwich mean sidereal time [degrees]
SPA_FIELD(nu)               // Greenwich sidereal time [degrees]
SPA_FIELD(alpha)            // geocentric sun right ascension [degrees]
SPA_FIELD(delta)            // geocentric sun declination [degrees]
SPA_FIELD(h)                // observer hour angle [degrees]
SPA_FIELD(xi)               // sun equatorial horizontal parallax [degrees]
SPA_FIELD(del_alpha)        // sun right ascension parallax [degrees]
SPA_FIELD(delta_prime)      // topocentric sun declination [degrees]
SPA_FIELD(alpha_prime)      // topocentric sun right ascension [degrees]
SPA_FIELD(h_prime)          // topocentric local hour angle [degrees])
SPA_FIELD(h0_prime)
SPA_FIELD(delta_zero)
SPA_FIELD(e0)               // topocentric elevation angle (uncorrected) [degrees]
SPA_FIELD(del_e)            // atmospheric refraction correction [degrees]
SPA_FIELD(e)                // topocentric elevation angle (corrected) [degrees]
SPA_FIELD(eot)              // equation of time [minutes]
SPA_FIELD(srha)             // sunrise hour angle [degrees]
SPA_FIELD(ssha)             // sunset hour angle [degrees]
SPA_FIELD(sta)              // sun transit altitude [degrees]
SPA_FIELD(zenith)           // topocentric zenith angle [degrees]
SPA_FIELD(azimuth180)       // topocentric azimuth angle (westward from south) [-180 to 180 degrees]
SPA_FIELD(azimuth)          // topocentric azimuth angle (eastward from north) [   0 to 360 degrees]
SPA_FIELD(incidence)        // surface incidence angle [degrees]
SPA_FIELD(suntransit)       // local sun transit time (or solar noon) [fractional hour]
SPA_FIELD(sunrise)          // local sunrise time (+/- 30 seconds) [fractional hour]
SPA_FIELD(sunset)           // local sunset time (+/- 30 seconds) [fractional hour]
TIME_FIELD(sunrise)
TIME_FIELD(sunset)
TIME_KEY_FIELD_LAST(noon, transit)  // must use a xxx_LAST macro on last one

// clean up to prevent warnings about redefining macros
#undef SPA_FIELD_LAST
#undef SPA_FIELD
#undef TIME_FIELD_LAST
#undef TIME_FIELD
#undef TIME_KEY_FIELD_LAST
#undef TIME_KEY_FIELD
</snippet></ROW><ROW><id>4426103</id><snippet>build_dict()</snippet></ROW><ROW><id>4426103</id><snippet>// build format string using header
char format_string[] = "{"
    #define FORMAT
    #include "builddict.h"
"}";

// use header again to build list of fields
PyObject* build_dict(SPA spa)
{
    return Py_BuildValue(format_string,
        #define FIELDS
        #include "builddict.h"
    );
}
</snippet></ROW><ROW><id>4426113</id><snippet>&gt;&gt;&gt; d={"A":(1.0,2.0,3.0), "B":(4.0,5.0,6.0), "C":(7.0,8.0,9.0)}
&gt;&gt;&gt; for row in zip(*([k]+map(str,v) for k,v in sorted(d.items()))):
...  print "\t".join(row)
... 
A       B       C
1.0     4.0     7.0
2.0     5.0     8.0
3.0     6.0     9.0
</snippet></ROW><ROW><id>4426128</id><snippet>[expression(x, y) for x in expression_that_creates_a_container 
                  for y in some_other_expression_that_creates_a_container(x)
                  if predicate(y, x)]
</snippet></ROW><ROW><id>4426128</id><snippet>for my_variable in</snippet></ROW><ROW><id>4426128</id><snippet>itertools</snippet></ROW><ROW><id>4426727</id><snippet>&gt;&gt;&gt; l = [0, 1, 2, 3, 4]
&gt;&gt;&gt; l.pop(0)
0
&gt;&gt;&gt; l
[1, 2, 3, 4]
</snippet></ROW><ROW><id>4426727</id><snippet>&gt;&gt;&gt; l = [0, 1, 2, 3, 4]
&gt;&gt;&gt; del l[0]
&gt;&gt;&gt; l
[1, 2, 3, 4]
</snippet></ROW><ROW><id>4426863</id><snippet>&gt;&gt;&gt; from lxml.cssselect import CSSSelector
&gt;&gt;&gt; from lxml.html import fromstring
&gt;&gt;&gt; html = '&lt;div class="entry"&gt;&lt;h3 class="foo"&gt;&lt;a href="http://www.example.com/blog-entry-slug" rel="bookmark"&gt;Blog Entry&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;'
&gt;&gt;&gt; h = fromstring(html)
&gt;&gt;&gt; sel = CSSSelector("a[rel=bookmark]")
&gt;&gt;&gt; [e.text for e in sel(h)]
['Blog Entry']
</snippet></ROW><ROW><id>4427013</id><snippet>easy_install</snippet></ROW><ROW><id>4427013</id><snippet>zc.buildout</snippet></ROW><ROW><id>4427013</id><snippet>pip</snippet></ROW><ROW><id>4427013</id><snippet>pip</snippet></ROW><ROW><id>4427325</id><snippet>s = "hello"
s = s[:-3] # string without last three characters
print s
# he
</snippet></ROW><ROW><id>4427325</id><snippet>s = "hello"
s = s.replace(s[-3:], '') # s[-3:] are the last three character of string
                          # returns a copy of string with replacement(s) made
print s
# he
</snippet></ROW><ROW><id>4427514</id><snippet>(r'^simple/gd/$', 'simple.views.getData'),

def getData(request):
    posted_t = request.POST['t']
    # Do some stuff with posted_t
    server_side_var = "Yay"
    return HttpResponse(u"{t:%s}" % server_side_var)
</snippet></ROW><ROW><id>4428246</id><snippet>theloggingfile.flush()
</snippet></ROW><ROW><id>4428246</id><snippet>.flush()</snippet></ROW><ROW><id>4428246</id><snippet>os.fsync</snippet></ROW><ROW><id>4428246</id><snippet>os.fsync(theloggingfile.fileno())
</snippet></ROW><ROW><id>4428319</id><snippet>sys.exc_info()[2]</snippet></ROW><ROW><id>4428605</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern="foobar\\"
&gt;&gt;&gt; re.search(pattern, "foobar")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 142, in search
    return _compile(pattern, flags).search(string)
  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 241, in _compile
    raise error, v # invalid expression
sre_constants.error: bogus escape (end of line)  
</snippet></ROW><ROW><id>4428661</id><snippet>def OnButton():
    exampleData = [(0.124167  , 'e'),   (0.0969225 , 't'),(0.0820011 , 'a'),]
    huffTree = makeHuffTree(exampleData)
    printHuffTree(huffTree)

button = Button(root, text="Press me!", command=OnButton)
button.pack()
</snippet></ROW><ROW><id>4428661</id><snippet>print</snippet></ROW><ROW><id>4428661</id><snippet>&lt;textwidget&gt;.insert</snippet></ROW><ROW><id>4428741</id><snippet>[[0]*ln]*lm</snippet></ROW><ROW><id>4428741</id><snippet>lm</snippet></ROW><ROW><id>4428741</id><snippet>self.matrix = [[0]*ln for i in xrange(lm)]
</snippet></ROW><ROW><id>4428946</id><snippet>unique = 'bflmpsvz'

my_namespaces = {
                 'http://www.topografix.com/GPX/1/0' :    unique,
                 'http://www.groundspeak.com/cache/1/0' : 'groundspeak',
                }
xml.etree.ElementTree._namespace_map.update( my_namespaces )
</snippet></ROW><ROW><id>4428946</id><snippet>def writeDown(data, output_filename):

    data.write(output_filename)
    txt = file(output_filename).read()
    txt = txt.replace(unique+':','')
    file(output_filename,'w').write(txt)
</snippet></ROW><ROW><id>4429948</id><snippet>def is_power(a,b):
    if(a%b != 0):
        return False
    elif(a/b == 1):
        return True
    else:
        return is_power(a/b,b)
</snippet></ROW><ROW><id>4430017</id><snippet>form_year = YearForm()
form_gender = GenderForm()
return render_to_response('report.html',
                            {
                                'form_year': form_year,
                                'form_gender': form_gender,
                                })
</snippet></ROW><ROW><id>4430017</id><snippet>if request.method == 'POST':
    form_year = YearForm(request.POST)
    form_gender = GenderForm(request.POST)
    if form_year.is_valid() and form_gender.is_valid():
        id_year = form_year.cleaned_data['years']
        id_gend = form_gender.cleaned_data['gender']
        filename = image #then insert this image into pdf file
</snippet></ROW><ROW><id>4430017</id><snippet>&lt;form action="./pdf" method="post"&gt;
    &lt;div&gt;
         {% for field in form_year %}
             {{ field }}
         {% endfor %}
    &lt;/div&gt;
    &lt;div&gt;
        {% for field in form_gender %}
            {{ field }}
        {% endfor %}
    &lt;/div&gt;
    &lt;p&gt;&lt;input type="submit" value="submit"/&gt;&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>4430047</id><snippet>echo.py</snippet></ROW><ROW><id>4430047</id><snippet>import sys

if __name__ == "__main__":
    for line in sys.stdin:
        sys.stderr.write("DEBUG: got line: " + line)
        sys.stdout.write(line)
</snippet></ROW><ROW><id>4430047</id><snippet>ls | python echo.py 2&gt;debug_output.txt | sort
</snippet></ROW><ROW><id>4430047</id><snippet>echo.py
test.py
test.sh
</snippet></ROW><ROW><id>4430047</id><snippet>DEBUG: got line: echo.py
DEBUG: got line: test.py
DEBUG: got line: test.sh
</snippet></ROW><ROW><id>4430061</id><snippet>as "foo [timestamp]"</snippet></ROW><ROW><id>4430061</id><snippet>import sqlite3
import datetime

db = sqlite3.connect(':memory:', detect_types = sqlite3.PARSE_COLNAMES)
c = db.cursor()
c.execute('create table foo (bar integer, baz timestamp)')
c.execute('insert into foo values(?, ?)', (23, datetime.datetime.now()))
c.execute('insert into foo values(?, ?)', (42, datetime.datetime.now() + datetime.timedelta(-1)))
c.execute('select bar, baz as "ts [timestamp]" from foo')
print c.fetchall()
c.execute('select max(baz) as "ts [timestamp]" from foo')
print c.fetchall()
</snippet></ROW><ROW><id>4430447</id><snippet>A$ mkfifo /tmp/stuff
A$ ./test.py &amp;&gt; /tmp/stuff
</snippet></ROW><ROW><id>4430447</id><snippet>B$ ssh A "cat /tmp/stuff"
hello world
hello world
...
</snippet></ROW><ROW><id>4430447</id><snippet>screen</snippet></ROW><ROW><id>4430447</id><snippet>detach</snippet></ROW><ROW><id>4430584</id><snippet>def iter_properties_of_class(cls):
    for varname in vars(cls):
        value = getattr(cls, varname)
        if isinstance(value, property):
            yield varname

def properties(inst):
    result = {}
    for cls in inst.__class__.mro():
        for varname in iter_properties_of_class(cls):
            result[varname] = getattr(inst, varname)
    return result

&gt;&gt;&gt; a = MyClass()
&gt;&gt;&gt; a.x = 5
Setting x to 5
&gt;&gt;&gt; properties(a)
{'x': 5}
</snippet></ROW><ROW><id>4430736</id><snippet>from ctypes import *
val = c_int64()
windll.Kernel32.QueryPerformanceCounter(byref(val))
print val.value
</snippet></ROW><ROW><id>4430756</id><snippet>words = [
'word1',
'word2',
'word3',
]

while len(words) &gt; 0:
     word = random.choice(words)
     print "Define: %s" % word
     words.remove(word) 
</snippet></ROW><ROW><id>4430811</id><snippet>fill='both'</snippet></ROW><ROW><id>4430811</id><snippet>pack</snippet></ROW><ROW><id>4430811</id><snippet>expand</snippet></ROW><ROW><id>4430972</id><snippet>lambda event, i=i: self.WSRB_UD(event, i))
</snippet></ROW><ROW><id>4430972</id><snippet>i</snippet></ROW><ROW><id>4431114</id><snippet>[e for e in soup(recursive=False, text=False) if e.span.string == 'Text2']
</snippet></ROW><ROW><id>4431253</id><snippet>test = {test:'blabla', test2:'blabla2'}

for key, val in test.items():
    key()
</snippet></ROW><ROW><id>4431891</id><snippet>memoized</snippet></ROW><ROW><id>4431891</id><snippet>reset</snippet></ROW><ROW><id>4431891</id><snippet>reset</snippet></ROW><ROW><id>4431891</id><snippet>    class memoized2(object):
       """Decorator that caches a function's return value each time it is called.
       If called later with the same arguments, the cached value is returned, and
       not re-evaluated.
       """
       def __init__(self, func):
          self.func = func
          self.cache = {}
       def __call__(self, *args):
          try:
             return self.cache[args]
          except KeyError:
             value = self.func(*args)
             self.cache[args] = value
             return value
          except TypeError:
             # uncachable -- for instance, passing a list as an argument.
             # Better to not cache than to blow up entirely.
             return self.func(*args)
       def __repr__(self):
          """Return the function's docstring."""
          return self.func.__doc__
       def __get__(self, obj, objtype):
          """Support instance methods."""
          fn = functools.partial(self.__call__, obj)
          fn.reset = self._reset
          return fn
       def _reset(self):
          self.cache = {}


    class my_class:
        @memoized2
        def my_func(self, val):
            print "in my_func"
            time.sleep(2)
            return val


    c = my_class()

    print "should take time"
    print c.my_func(55)
    print

    print "should be instant"
    print c.my_func(55)
    print

    c.my_func.reset()

    print "should take time"
    print c.my_func(55)
</snippet></ROW><ROW><id>4432097</id><snippet>0A</snippet></ROW><ROW><id>4432097</id><snippet>'\n'</snippet></ROW><ROW><id>4432097</id><snippet>OD 0A</snippet></ROW><ROW><id>4432097</id><snippet>'\r\n'</snippet></ROW><ROW><id>4432097</id><snippet>input_file = open('f1', 'rb')
contents = input_file.read()

#....
data = contents[offset+8:size+offset] #for example

output_file = open('f2', 'wb')
output_file.write(data)
</snippet></ROW><ROW><id>4432235</id><snippet>6%2</snippet></ROW><ROW><id>4432235</id><snippet>0</snippet></ROW><ROW><id>4432235</id><snippet>7%2</snippet></ROW><ROW><id>4432235</id><snippet>1</snippet></ROW><ROW><id>4432235</id><snippet>1</snippet></ROW><ROW><id>4432235</id><snippet>0</snippet></ROW><ROW><id>4432235</id><snippet>6%2</snippet></ROW><ROW><id>4432393</id><snippet>is_cons</snippet></ROW><ROW><id>4432399</id><snippet>a</snippet></ROW><ROW><id>4432534</id><snippet>float.h</snippet></ROW><ROW><id>4432534</id><snippet>float_hex</snippet></ROW><ROW><id>4432534</id><snippet>repr(your_float)</snippet></ROW><ROW><id>4432534</id><snippet>&gt;&gt;&gt; hex(int(time.time() * 1000000000))
'0x11ef11c41cf98b00L'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4432535</id><snippet>if my_answer != your_question:
    print "I did not understand your question. Please rephrase is."
else:
    print "Good luck. Python is fun."
</snippet></ROW><ROW><id>4433066</id><snippet>&gt;&gt;&gt; struct.unpack('&gt;q', s)[0]
511
</snippet></ROW><ROW><id>4433190</id><snippet>datefmt</snippet></ROW><ROW><id>4433190</id><snippet>basicConfig</snippet></ROW><ROW><id>4433190</id><snippet>logging.basicConfig(format=FORMAT,level=logging.INFO,datefmt='%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>4433190</id><snippet>fmt = logging.Formatter(FORMAT,datefmt='%Y-%m-%d')
handler.setFormatter(fmt)
</snippet></ROW><ROW><id>4433331</id><snippet>class Symbol(str):
    pass

# In serialising code:
if isinstance(x, Symbol):
    serialise_as_symbol(x)
</snippet></ROW><ROW><id>4433335</id><snippet>foo = re.findall(r'The ([\w ]+) won (\d+) - (\d+) over the ([\w ]+)\.', mystring)
</snippet></ROW><ROW><id>4433681</id><snippet>import MultipartPostHandler
import urllib2

form_opener = urllib2.build_opener(MultipartPostHandler.MultipartPostHandler) 
urllib2.install_opener(form_opener)
datagen = {vars}
o=opener.open(url, datagen) 
</snippet></ROW><ROW><id>4433681</id><snippet>import urllib

opener = urllib2.build_opener(urllib2.HTTPCookieProcessor()) 
# Or, (MultipartPostHandler.MultipartPostHandler, urllib2.HTTPCookieProcessor())
urllib2.install_opener(opener)
login = urllib.urlencode(dict(username='user',password='pass',login='Login')) 
o=opener.open(url, login) 
</snippet></ROW><ROW><id>4433741</id><snippet>getattr</snippet></ROW><ROW><id>4433741</id><snippet>class search(object):
  def __init__(self):
    for key, value in test.items():
      if test[key]['active']:
        getattr(self, key)(test['key']['id'])
</snippet></ROW><ROW><id>4433741</id><snippet>hasattr(self, name)</snippet></ROW><ROW><id>4433741</id><snippet>try:
  getattr(self, key)
except AttributeError, e:
  # code here that would handle a missing method.
</snippet></ROW><ROW><id>4433766</id><snippet>threading.Event()</snippet></ROW><ROW><id>4433766</id><snippet># ... main operation
self.readycleanup.set() # Still within loop
self.cleanupfinished.wait()
self.cleanupfinished.clear()
# End of loop
</snippet></ROW><ROW><id>4433766</id><snippet>for worker in workerthreads:
    worker.readycleanup.wait()
do_cleanup_stuff()
for worker in workerthreads:
    worker.readycleanup.clear()
    worker.cleanupfinished.set()
</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>''</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>f.read(n)</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>n</snippet></ROW><ROW><id>4433813</id><snippet>\r\n</snippet></ROW><ROW><id>4433813</id><snippet>with open(filename,'rb') as f:
    while True:
        s=f.read(max_size)
        if not s: break

        # process the data in s...
</snippet></ROW><ROW><id>4433813</id><snippet>def blocks(infile, bufsize=1024):
    while True:
        try:
            data=infile.read(bufsize)
            if data:
                yield data
            else:
                break
        except IOError as (errno, strerror):
            print "I/O error({0}): {1}".format(errno, strerror)
            break

f=open('somefile','rb')

for block in blocks(f,2**16):
    # process a block that COULD be up to 65,536 bytes long
</snippet></ROW><ROW><id>4433968</id><snippet>self.request</snippet></ROW><ROW><id>4433968</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>4434058</id><snippet>old_arr = x.entries
</snippet></ROW><ROW><id>4434058</id><snippet>new_max_entries = int(math.ceil(1.5 * x.max_entries))
new_entries = (POINTER(PAIR) * new_max_entries)()

# Copy the entries from the old array to the new array
for i in range(x.no_entries):
    new_entries[i] = x.entries[i]

x.entries = new_entries
x.max_entries = new_max_entries
</snippet></ROW><ROW><id>4434078</id><snippet>for item in ObjList:
    self.myCboBox.append(item.label, item)
</snippet></ROW><ROW><id>4434078</id><snippet>itemObject = self.myCboBox.GetClientData(self.myCboBox.GetSelection())
itemID = itemObject.id
</snippet></ROW><ROW><id>4434259</id><snippet>&gt;&gt;&gt; import xlrd
&gt;&gt;&gt; book = xlrd.open_workbook('pivot_table_demo.xls')
&gt;&gt;&gt; sheet = book.sheet_by_name('Summary')
&gt;&gt;&gt; for row_index in xrange(sheet.nrows):
...     print sheet.row_values(row_index)
...
[u'Sum of sales', u'qtr', '', '', '', '']
[u'person', 1.0, 2.0, 3.0, 4.0, u'Grand Total']
[u'dick', 100.0, 99.0, 95.0, 90.0, 384.0]
[u'harriet', 100.0, 110.0, 121.0, 133.1, 464.1]
[u'tom', 100.0, 101.0, 102.0, 103.0, 406.0]
[u'Grand Total', 300.0, 310.0, 318.0, 326.1, 1254.1]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4434842</id><snippet>def clean(self):
    cleaned_data = self.cleaned_data
    current_pass = cleaned_data['current_pass']
    new_pass = cleaned_data['new_pass']
    new_pass2 = cleaned_data['new_pass2']
    if current_pass or new_pass or new_pass2:
        if not current_pass:
            self._errors["current_pass"] = self.error_class(["- You must enter your current password."])
        if not new_pass:
            self._errors["new_pass"] = self.error_class(["- You must enter a new password."])
        if not new_pass2:
            self._errors["new_pass2"] = self.error_class(["- You must re-confirm your new password."])
        del cleaned_data["current_pass"]
        del cleaned_data["new_pass"]
        del cleaned_data["new_pass2"]
    return cleaned_data
</snippet></ROW><ROW><id>4434879</id><snippet>def coroutine(func):
    def start(*args,**kwargs):
        cr = func(*args,**kwargs)
        cr.next()
        return cr
    return start

@coroutine
def grep(pattern):
    print "Looking for %s" % pattern
    while True:
        line = (yield)
        if pattern in line:
            print(line)

g = grep("python")
# Notice how you don't need a next() call here
g.send("Yeah, but no, but yeah, but no")
g.send("A series of tubes")
g.send("python generators rock!")
# Looking for python
# python generators rock!
</snippet></ROW><ROW><id>4434879</id><snippet>send</snippet></ROW><ROW><id>4434879</id><snippet>class Foo(object):
    def __init__(self,pattern):
        self.count=1
        self.pattern=pattern
        self.grep=self._grep()
    @coroutine
    def _grep(self):
        while True:
            line = (yield)
            if self.pattern in line:
                print(self.count, line)
                self.count+=1
    def send(self,arg):
        self.grep.send(arg)

foo = Foo("python")
foo.send("Yeah, but no, but yeah, but no")
foo.send("A series of tubes")
foo.send("python generators rock!")
foo.pattern='spam'
foo.send("Some cheese?")
foo.send("More spam?")

# (1, 'python generators rock!')
# (2, 'More spam?')
</snippet></ROW><ROW><id>4434879</id><snippet>foo</snippet></ROW><ROW><id>4435165</id><snippet>&gt;&gt;&gt; s = 'I love %(x)s and %(y)s, he loves %(x)s and %(y)s.'
&gt;&gt;&gt; s % {"x" : "apples", "y" : "oranges"}
'I love apples and oranges, he loves apples and oranges.'
</snippet></ROW><ROW><id>4435165</id><snippet>format</snippet></ROW><ROW><id>4435165</id><snippet>&gt;&gt;&gt; s = 'I love {0} and {1}, she loves {0} and {1}'
&gt;&gt;&gt; s.format("apples", "oranges")
'I love apples and oranges, she loves apples and oranges'
</snippet></ROW><ROW><id>4435165</id><snippet>str</snippet></ROW><ROW><id>4435165</id><snippet>str([object])</snippet></ROW><ROW><id>4435303</id><snippet>innodb_lock_wait_timeout</snippet></ROW><ROW><id>4435303</id><snippet>SHOW ENGINE INNODB STATUS</snippet></ROW><ROW><id>4435309</id><snippet>#!/usr/bin/env python

from Tkinter import *
from tkFileDialog  import askopenfilename   

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        self.button = Button(frame, text="QUIT", command=frame.quit)
        self.button.pack(side=BOTTOM)

        self.text = Text(frame)
        self.text.pack(side=TOP)

        self.choosen = askopenfilename(initialdir='~')
        self.text.insert(END, open(self.choosen).read())        

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>4435309</id><snippet>INSERT</snippet></ROW><ROW><id>4435309</id><snippet>END</snippet></ROW><ROW><id>4435685</id><snippet>import logging

log = logging.getLogger('myscript')

def dostuff(...):
    ....
    log.info('message!')
    ...

if __name__ == '__main__':
    import sys
    log.setLevel(logging.INFO)
    log.addHandler(logging.StreamHandler(sys.stdout))
    ...
</snippet></ROW><ROW><id>4435685</id><snippet>log.addHandler(logging.NullHandler())
</snippet></ROW><ROW><id>4435685</id><snippet>class NullHandler(logging.Handler):
    def emit(self, record):
        pass    
</snippet></ROW><ROW><id>4435752</id><snippet>s = ""
for i in range(n):
    s+=str(n)
</snippet></ROW><ROW><id>4435752</id><snippet>void
PyBytes_ConcatAndDel(register PyObject **pv, register PyObject *w)
{
    PyBytes_Concat(pv, w);
    Py_XDECREF(w);
}


/* The following function breaks the notion that strings are immutable:
   it changes the size of a string.  We get away with this only if there
   is only one module referencing the object.  You can also think of it
   as creating a new string object and destroying the old one, only
   more efficiently.  In any case, don't use this if the string may
   already be known to some other part of the code...
   Note that if there's not enough memory to resize the string, the original
   string object at *pv is deallocated, *pv is set to NULL, an "out of
   memory" exception is set, and -1 is returned.  Else (on success) 0 is
   returned, and the value in *pv may or may not be the same as on input.
   As always, an extra byte is allocated for a trailing \0 byte (newsize
   does *not* include that), and a trailing \0 byte is stored.
*/

int
_PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)
{
    register PyObject *v;
    register PyBytesObject *sv;
    v = *pv;
    if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize &lt; 0) {
        *pv = 0;
        Py_DECREF(v);
        PyErr_BadInternalCall();
        return -1;
    }
    /* XXX UNREF/NEWREF interface should be more symmetrical */
    _Py_DEC_REFTOTAL;
    _Py_ForgetReference(v);
    *pv = (PyObject *)
        PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);
    if (*pv == NULL) {
        PyObject_Del(v);
        PyErr_NoMemory();
        return -1;
    }
    _Py_NewReference(*pv);
    sv = (PyBytesObject *) *pv;
    Py_SIZE(sv) = newsize;
    sv-&gt;ob_sval[newsize] = '\0';
    sv-&gt;ob_shash = -1;          /* invalidate cached hash value */
    return 0;
}
</snippet></ROW><ROW><id>4435907</id><snippet>import urllib
print urllib.urlopen('http://www.example.com/blah').read()
</snippet></ROW><ROW><id>4436082</id><snippet>value = my_dic.get(100, 0)
</snippet></ROW><ROW><id>4436239</id><snippet>/example_project/public/</snippet></ROW><ROW><id>4436254</id><snippet>xrange</snippet></ROW><ROW><id>4436254</id><snippet>range</snippet></ROW><ROW><id>4436707</id><snippet>select</snippet></ROW><ROW><id>4436707</id><snippet>select</snippet></ROW><ROW><id>4436707</id><snippet>decode</snippet></ROW><ROW><id>4436707</id><snippet>\n</snippet></ROW><ROW><id>4436707</id><snippet>tmp = sock.recv(1000)
readbuf += tmp
while b'\n' in readbuf:
    msg,readbuf = readbuf.split(b'\n',1)
    process(msg.decode('utf8'))
</snippet></ROW><ROW><id>4436731</id><snippet>os.path.split(path)</snippet></ROW><ROW><id>4436731</id><snippet>path_file = "a\b\c\dsdf\matchthis\erwe.txt"
path, file = os.path.split(path_file)
path, dir = os.path.split(path)
</snippet></ROW><ROW><id>4436753</id><snippet>import foo
</snippet></ROW><ROW><id>4436753</id><snippet>foo</snippet></ROW><ROW><id>4436753</id><snippet>foo</snippet></ROW><ROW><id>4436753</id><snippet>foo.bar = 7
</snippet></ROW><ROW><id>4436753</id><snippet>foo</snippet></ROW><ROW><id>4436753</id><snippet>7</snippet></ROW><ROW><id>4436753</id><snippet>bar</snippet></ROW><ROW><id>4436753</id><snippet>foo</snippet></ROW><ROW><id>4436753</id><snippet>sys.modules['foo']</snippet></ROW><ROW><id>4436753</id><snippet>from foo import bar
</snippet></ROW><ROW><id>4436753</id><snippet>globals()['bar']</snippet></ROW><ROW><id>4436753</id><snippet>foo.bar</snippet></ROW><ROW><id>4436753</id><snippet> bar = 7
</snippet></ROW><ROW><id>4436753</id><snippet>globals()['bar']</snippet></ROW><ROW><id>4436753</id><snippet>foo.bar</snippet></ROW><ROW><id>4436753</id><snippet>7</snippet></ROW><ROW><id>4436753</id><snippet>sys.modules</snippet></ROW><ROW><id>4436753</id><snippet> from foo import fobaz
 fobaz.foobar = 7
</snippet></ROW><ROW><id>4437181</id><snippet>char*</snippet></ROW><ROW><id>4437181</id><snippet>strcpy</snippet></ROW><ROW><id>4439575</id><snippet>syncdb</snippet></ROW><ROW><id>4439575</id><snippet>manage.py migrate</snippet></ROW><ROW><id>4439575</id><snippet>'south'</snippet></ROW><ROW><id>4439575</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4439575</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>4439575</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4439575</id><snippet>manage.py migrate --fake</snippet></ROW><ROW><id>4439575</id><snippet>manage.py migrate</snippet></ROW><ROW><id>4440115</id><snippet>.search()</snippet></ROW><ROW><id>4440115</id><snippet>.sub()</snippet></ROW><ROW><id>4440115</id><snippet>import re

text = """Some data la-la-la [image=test.png] next data...
Some data la-la-la 123 [image=test2.png]"""

text = re.sub(r'\[image\=([^\]]+)\]', r'\1', text)

print text
</snippet></ROW><ROW><id>4440115</id><snippet>Some data la-la-la test.png next data...
Some data la-la-la 123 test2.png
</snippet></ROW><ROW><id>4440370</id><snippet>example.com</snippet></ROW><ROW><id>4440370</id><snippet>weijwrgnerg hgqwv  blather example.com</snippet></ROW><ROW><id>4440370</id><snippet>weijwrgnerg hg</snippet></ROW><ROW><id>4440370</id><snippet>re.escape</snippet></ROW><ROW><id>4440370</id><snippet>.endswith()</snippet></ROW><ROW><id>4440370</id><snippet>output.decode()</snippet></ROW><ROW><id>4440370</id><snippet>bytes.decode(output)</snippet></ROW><ROW><id>4440550</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; print('\n'.join('{}: {}'.format(*k) for k in enumerate(lst)))
0: 1
1: 2
2: 3
</snippet></ROW><ROW><id>4440622</id><snippet>import win32com.client 
import win32con
import win32gui
import time

print "Start"
excel = win32com.client.Dispatch("Excel.Application") 
excel.Visible = 1   # Visible via automation
time.sleep(2)
hwnd = win32gui.FindWindow(None, "Microsoft Excel")  # Class or title
print "Hide"
win32gui.ShowWindow(hwnd, win32con.SW_HIDE) # Hide via Win32Api
time.sleep(2)
print "Show"
win32gui.ShowWindow(hwnd, win32con.SW_SHOW) # Show via Win32Api
time.sleep(2)

###
</snippet></ROW><ROW><id>4441373</id><snippet>m &lt;- match.call(expand.dots = FALSE)
m$model &lt;- m$method &lt;- m$control &lt;- NULL
m$x &lt;- m$y &lt;- m$parms &lt;- m$... &lt;- NULL
m$cost &lt;- NULL
m$na.action &lt;- na.action
m[[1L]] &lt;- as.name("model.frame")
m &lt;- eval(m, parent.frame())
</snippet></ROW><ROW><id>4441373</id><snippet>from rpy2.robjects import DataFrame, Formula
import rpy2.robjects.numpy2ri as npr
import numpy as np
from rpy2.robjects.packages import importr
rpart = importr('rpart')
stats = importr('stats')

cLogEC = np.random.uniform(size=10)
csplitData = np.array(range(10), 'i')

dataf = DataFrame({'responsev': cLogEC,
                   'predictorv': csplitData})
formula = Formula('responsev ~.')
rpart.rpart(formula=formula, data=dataf, 
            control=rpart.rpart_control(minsplit = 10, xval = 10),
            model = stats.model_frame(formula, data=dataf))
</snippet></ROW><ROW><id>4441673</id><snippet>pssh -O StrictHostKeyChecking=no</snippet></ROW><ROW><id>4441674</id><snippet>map(int, ','.join(l).split(','))
</snippet></ROW><ROW><id>4441674</id><snippet>l</snippet></ROW><ROW><id>4441956</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, getopt
import urllib
import simplejson

OPTIONS = ("m:", ["min="])

def print_usage():
    s = "usage: " + sys.argv[0] + " "
    for o in OPTIONS[0]:
        if o != ":" : s += "[-" + o + "] "
    print(s + "query_string\n")

def search(query, index, offset, min_count, quiet=False, rs=[]):
    url = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;rsz=large&amp;%s&amp;start=%s" % (query, offset)
    result = urllib.urlopen(url)
    json = simplejson.loads(result.read())
    status = json["responseStatus"]
    if status == 200:
        results = json["responseData"]["results"]
        cursor = json["responseData"]["cursor"]
        pages = cursor["pages"]
        for r in results:
            i = results.index(r) + (index -1) * len(results) + 1
            u = r["unescapedUrl"]
            rs.append(u)
            if not quiet:
                print("%3d. %s" % (i, u))
        next_index  = None
        next_offset = None
        for p in pages:
            if p["label"] == index:
                i = pages.index(p)
                if i &lt; len(pages) - 1:
                    next_index  = pages[i+1]["label"]
                    next_offset = pages[i+1]["start"]
                break
        if next_index != None and next_offset != None:
            if int(next_offset) &lt; min_count:
                search(query, next_index, next_offset, min_count, quiet, rs)
    return rs

def main():
    min_count = 64
    try:
        opts, args = getopt.getopt(sys.argv[1:], *OPTIONS)
        for opt, arg in opts:
            if opt in ("-m", "--min"):
                min_count = int(arg)
        assert len(args) &gt; 0
    except:
        print_usage()
        sys.exit(1)
    qs = " ".join(args)
    query = urllib.urlencode({"q" : qs})
    search(query, 1, "0", min_count)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>4441956</id><snippet>python gsearch.py --min=5 vanessa mae
</snippet></ROW><ROW><id>4441956</id><snippet>--min</snippet></ROW><ROW><id>4442026</id><snippet>level=NOTSET
</snippet></ROW><ROW><id>4442308</id><snippet>from distutils.core import setup

setup(name='connections',
      version='0.1.1',
      description='Print number of IHS connections',
      author='fandingo',
      author_email='fandingo@fandingo.com',
      packages=['X'],
      scripts=['connection-stats/connections.py'])
</snippet></ROW><ROW><id>4442924</id><snippet>In [36]: import dbus

In [37]: bus = dbus.SessionBus()

In [38]: bus.get_object('org.gnome.ScreenSaver','/org/gnome/ScreenSaver')
Out[38]: &lt;ProxyObject wrapping &lt;dbus._dbus.SessionBus (session) at 0xa41e38c&gt; :1.24 /org/gnome/ScreenSaver at 0xa4a3b0c&gt;
</snippet></ROW><ROW><id>4443260</id><snippet>def undefaulted(x):
  return dict(
    (k, undefaulted(v))
    for (k, v) in x.iteritems()
  ) if isinstance(x, nesteddict) else x

a = undefaulted(a)
</snippet></ROW><ROW><id>4443329</id><snippet>class Object:
    pass

obj = Object()
obj.x = 5
</snippet></ROW><ROW><id>4443841</id><snippet>graph = {}
graph[node_id] = [other_node_id for other_node_id in neighbors(node_id)]
</snippet></ROW><ROW><id>4443841</id><snippet>def df(node):
    if visited(node):
        pass # found a cycle here, do something with it
    visit(node)
    [df(node_id) for node_id in graph[node]]
</snippet></ROW><ROW><id>4443841</id><snippet>neighbors()</snippet></ROW><ROW><id>4443841</id><snippet>visited()</snippet></ROW><ROW><id>4443841</id><snippet>visit()</snippet></ROW><ROW><id>4443969</id><snippet>tones = (1004.523, 1004.575, 1004.475, 791.385, 791.298, 791.301, 791.305, 791.299)
splits = [i for i in range(1, len(tones)) if abs(tones[i-1] - tones[i]) &gt; 2]
splits = [0] + splits + [len(tones)]
tones = [mean(tones[splits[i-1]:splits[i]]) for i in range(1, len(splits))]
# [1004.5243333333333, 791.31759999999997]
</snippet></ROW><ROW><id>4443977</id><snippet>import turtle   # don't pollute the namespace
import time

def getInt(msg):
    return int(raw_input(msg))

def drawBall():
    turtle.down()
    for i in range(96):
        turtle.right(105)
        turtle.forward(100)
    turtle.up()

def moveOver():
    turtle.goto(120,0)

def Done():
    turtle.goto(0,-50)
    turtle.write('Done!')
    time.sleep(5)

def main(): 
    turtle.color('red','blue')
    for i in range(getInt('How many balls do you want?')):
        drawBall()
        moveOver()
    Done()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4444046</id><snippet>conn.request('GET', url + "?" + params, None, headers)
</snippet></ROW><ROW><id>4444177</id><snippet>shell=True</snippet></ROW><ROW><id>4444241</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>4444241</id><snippet>def _foo_iter(obj):
    try:
        return obj.iteritems()
    except AttributeError:
        return obj

def foo(*objs):
    for obj in objs:
        for item in _foo_iter(obj):
</snippet></ROW><ROW><id>4444891</id><snippet>yield_all</snippet></ROW><ROW><id>4444891</id><snippet>import itertools

def concatMap(fun, it):
    return itertools.chain.from_iterable(fun(x) for x in it)

def traverse(node):
    return itertools.chain([node], concatMap(traverse, node.children))
</snippet></ROW><ROW><id>4444891</id><snippet>from pep380 import supergenerator, _from

@supergenerator
def traverse(node):
    yield node
    for n in node.children:
      yield _from(traverse(n))
</snippet></ROW><ROW><id>4444952</id><snippet>os.path.splitext(filename)[0]
</snippet></ROW><ROW><id>4444952</id><snippet>.bashrc</snippet></ROW><ROW><id>4445194</id><snippet>graph = {'A': ['B', 'C'],
         'B': ['C', 'D'],
         'C': ['D'],
         'D': ['C'],
         'E': ['F'],
         'F': ['C']}
</snippet></ROW><ROW><id>4445194</id><snippet>neighbours_of_B = graph['B']
</snippet></ROW><ROW><id>4445194</id><snippet>def find_all_paths(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    if not graph.has_key(start):
        return []
    paths = []
    for node in graph[start]:
        if node not in path:
            newpaths = find_all_paths(graph, node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths
</snippet></ROW><ROW><id>4445194</id><snippet>find_all_paths(graph, 'A', 'D')
</snippet></ROW><ROW><id>4445251</id><snippet>numpy.triu_indices</snippet></ROW><ROW><id>4445251</id><snippet>numpy.triu_indices_from</snippet></ROW><ROW><id>4445358</id><snippet>nano</snippet></ROW><ROW><id>4445419</id><snippet>self</snippet></ROW><ROW><id>4445419</id><snippet>def updateVelocity(self):
</snippet></ROW><ROW><id>4445590</id><snippet>.split()</snippet></ROW><ROW><id>4445590</id><snippet>int</snippet></ROW><ROW><id>4445590</id><snippet>float</snippet></ROW><ROW><id>4445590</id><snippet>dict</snippet></ROW><ROW><id>4445590</id><snippet>conversion_rates = {
    'in': 2.54, # 2.54 inches in a centimetre
    'cm': 1.00, # this is our reference unit
    'sun': 3.03 # a traditional Japanese unit of measurement
}

# raises ValueError if the number of words in the input is wrong
amount, original_unit, final_unit = line.split()

# raises ValueError if the amount is not formatted as a floating-point number
amount = float(amount)

# Now we do the conversion.
# raises KeyError if either unit is not found in the dict.
result = amount * conversion_rates[original_unit] / conversion_rates[final_unit]
</snippet></ROW><ROW><id>4445611</id><snippet>class AttributeCollection(object):
    pass
shared_settings= AttributeCollection()
# now improvise
shared_settings.temperature= 30
shared_settings.samples= []
# etc
</snippet></ROW><ROW><id>4445611</id><snippet>shared_settings</snippet></ROW><ROW><id>4445611</id><snippet>locals()</snippet></ROW><ROW><id>4445611</id><snippet>shared_settings</snippet></ROW><ROW><id>4445849</id><snippet>def longest_path( paths ):
    key = lambda path:path.count('/')
    return max(paths, key=key)
</snippet></ROW><ROW><id>4445849</id><snippet>os.path.normpath</snippet></ROW><ROW><id>4445849</id><snippet>os.path.split</snippet></ROW><ROW><id>4445849</id><snippet>import os.path
def nesting(path):
    """ counts how often `os.path.split` works on `path` """
    c = 0
    head = tail = path
    while head and tail:
        head, tail = os.path.split(head)
        c +=1
    return c

def longest_path( paths ):
        return max(paths, key=nesting)
</snippet></ROW><ROW><id>4445849</id><snippet>def find_leafes( root ):
    """ finds folders with no subfolders """
    for root, dirs, files in os.walk(root):
        if not dirs: # can't go deeper
            yield root

print longest_path(find_leafes( root ))
</snippet></ROW><ROW><id>4445922</id><snippet>profile = list(profile)
</snippet></ROW><ROW><id>4445963</id><snippet>If a is True  and b is True,  then a AND b is True
If a is True  and b is False, then a AND b is False
If a is False and b is True,  then a AND b is False
If a is False and b is False, then a AND b is False
</snippet></ROW><ROW><id>4445963</id><snippet>NOT is "the opposite of": if a is False, then Not a is True
AND is true if "both of" a and b are true
OR is true if "at least one of" a or b is true
== is "equal to", true if a and b have the same value
!= is "not equal to", true if a and b have different values
</snippet></ROW><ROW><id>4446069</id><snippet>Watch out for [weekday_index+1] for 'sunday', 
use [(weekday_index+1)%7] to wrap down to 0.  
</snippet></ROW><ROW><id>4446069</id><snippet>def weekday_choices(self, todays_index):
    ...
    return choices_list
</snippet></ROW><ROW><id>4446069</id><snippet>returns_iter</snippet></ROW><ROW><id>4446348</id><snippet>*&lt;name&gt;</snippet></ROW><ROW><id>4446348</id><snippet>**&lt;name&gt;</snippet></ROW><ROW><id>4446348</id><snippet>add_arguments</snippet></ROW><ROW><id>4446348</id><snippet>def add_arguments(*posargs, **kwargs):
    if 'action' in kwargs:
        # do something
</snippet></ROW><ROW><id>4446385</id><snippet>lst.count(1)</snippet></ROW><ROW><id>4446385</id><snippet>list.count(x)</snippet></ROW><ROW><id>4446385</id><snippet>x</snippet></ROW><ROW><id>4446438</id><snippet>from django.db.models import Count

Tourist.objects.annotate(countries_visited=Count('country'))
</snippet></ROW><ROW><id>4446729</id><snippet>**</snippet></ROW><ROW><id>4446729</id><snippet>(2**(1/2)*y**(1/2)/2)**2      =&gt;
(2^(1/2) * (1/2) * y^(1/2))^2 =&gt;
2 * (1/4) * y                 =&gt;
y / 2
</snippet></ROW><ROW><id>4446729</id><snippet>antidifferentiate(y / 2) = y^2 / 4
</snippet></ROW><ROW><id>4446729</id><snippet>integral('y / 2', 0, 5) =
5^2 / 4 - 0^2 / 4 =
25 / 4 = 
6.25
</snippet></ROW><ROW><id>4446729</id><snippet>1/2</snippet></ROW><ROW><id>4446729</id><snippet>0.5</snippet></ROW><ROW><id>4446729</id><snippet>func = lambda y: (2**(0.5) * y**(0.5) / 2.0)**2.0 &amp; a == 0 &amp; b == 5

from scipy import integrate
integrate.quad(func, a b) # What's 'a b'? Maybe 'a, b' would work?
</snippet></ROW><ROW><id>4447147</id><snippet>class EmailThread(threading.Thread):
    def __init__(self, subject, html_content, recipient_list):
        self.subject = subject
        self.recipient_list = recipient_list
        self.html_content = html_content
        threading.Thread.__init__(self)

    def run (self):
        msg = EmailMessage(self.subject, self.html_content, EMAIL_HOST_USER, self.recipient_list)
        msg.content_subtype = "html"
        msg.send()

def send_html_mail(subject, html_content, recipient_list):
    EmailThread(subject, html_content, recipient_list).start()
</snippet></ROW><ROW><id>4447350</id><snippet>Encoding</snippet></ROW><ROW><id>4447350</id><snippet>py</snippet></ROW><ROW><id>4447350</id><snippet>html</snippet></ROW><ROW><id>4447464</id><snippet>"redirect"</snippet></ROW><ROW><id>4447553</id><snippet>imresize</snippet></ROW><ROW><id>4447553</id><snippet>import numpy as np
from scipy.misc import imresize

img = np.array([
 [0, 0, 1, 1, 1, 1, 0, 0],
 [0, 1, 1, 1, 1, 1, 1, 0],
 [0, 1, 0, 0, 0, 1, 1, 1],
 [0, 0, 0, 0, 0, 0, 1, 1],
 [0, 0, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 0, 0, 0, 0, 1, 1],
 [1, 1, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1],
 [0, 1, 1, 1, 1, 0, 1, 1]
])
newimg = imresize(img, (6,5))
</snippet></ROW><ROW><id>4447553</id><snippet>array([[  0,   0, 255, 255,   0],
       [  0, 255, 255, 255, 255],
       [  0,   0,   0,   0, 255],
       [255, 255, 255, 255, 255],
       [255, 255,   0,   0, 255],
       [255, 255, 255, 255, 255]], dtype=uint8)
</snippet></ROW><ROW><id>4448385</id><snippet>$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.exit(245)
$ echo $?
245
</snippet></ROW><ROW><id>4449094</id><snippet>[[v1, v2, v3],
 [v4, v5, v6],
 [v7, v8, v9]] 
</snippet></ROW><ROW><id>4449094</id><snippet>[v1, v2, v3, v4, v5, v6, v7, v8, v9]
</snippet></ROW><ROW><id>4449188</id><snippet>def verify_permissions(request):
  user = request.user
  sid = request.POST.get('subscription_id')
  try:
    sub = Subscription.objects.get(id=sid)
  except ObjectDoesNotExist:
    raise PermissionError, 'Given subscription does not exist.'
  if sub.user != user:
    raise PermissionError, 'Invalid permission.'

def subscribe(request):
  try:
    verify_permissions(request)
    sub.save()
    return ajax_response(True)
  except PermissionError, why:
    return ajax_response(False, [('subscription', why)])
</snippet></ROW><ROW><id>4449188</id><snippet>ajax_response</snippet></ROW><ROW><id>4449188</id><snippet>def verify_permissions(request, purpose):
  user = request.user
  sid = request.POST.get('subscription_id')
  try:
    sub = Subscription.objects.get(id=sid)
  except ObjectDoesNotExist:
    return (False, [(purpose, 'Given subscription does not exist.')]) 
  if sub.user != user:
    return (False, [(purpose, 'Invalid permission.')])
  return (True,)

def subscribe(request):
  result = verify_permissions(request, 'subscription')
  if result[0]: sub.save()
  return ajax_response(*result)
</snippet></ROW><ROW><id>4450201</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>4450305</id><snippet>numpy.savetxt()</snippet></ROW><ROW><id>4450305</id><snippet>x</snippet></ROW><ROW><id>4450305</id><snippet>y</snippet></ROW><ROW><id>4450305</id><snippet> # saving:
 f = open("data", "w")
 f.write("# x y\n")        # column names
 numpy.savetxt(f, numpy.array([x, y]).T)
 # loading:
 x, y = numpy.loadtxt("data", unpack=True)
</snippet></ROW><ROW><id>4450436</id><snippet>from itertools import izip_longest
def zip_plus(first, second):
    return [(a or []) + (b or []) for a, b in izip_longest(first, second)]

print zip_plus([], [[1, 2], [3, 4]])
print zip_plus([[1, 2], [3, 4]], [[11, 12], [13, 14]])
print zip_plus([[1, 2], [3, 4]], [[11, 12]])
print zip_plus([[1, 2]], [[11, 12], [13, 14]])
</snippet></ROW><ROW><id>4450436</id><snippet>from itertools import izip_longest
def zip_join2(first, second):
    return [(a or c or 0, (b or []) + (d or [])) for (a, b), (c, d) in \
              izip_longest(first, second, fillvalue=(None, None))]

print zip_join2([], [(5, [1, 2]), (6, [3, 4])])
print zip_join2([(5, [1, 2]), (6, [3, 4])], [(5, [11, 12]), (6, [13, 14])])
</snippet></ROW><ROW><id>4450610</id><snippet>name = "Spongebob Squarepants"
print "Who lives in a Pineapple under the sea? %(name)s." % locals()
</snippet></ROW><ROW><id>4450610</id><snippet>%</snippet></ROW><ROW><id>4450610</id><snippet>locals()</snippet></ROW><ROW><id>4450610</id><snippet>name</snippet></ROW><ROW><id>4450610</id><snippet>.format()</snippet></ROW><ROW><id>4450610</id><snippet>name = "Spongebob Squarepants"
print "Who lives in a Pineapple under the sea? %(name)s.".format(**locals())
</snippet></ROW><ROW><id>4450610</id><snippet>string.Template</snippet></ROW><ROW><id>4450610</id><snippet>tmpl = string.Template("Who lives in a Pineapple under the sea? $name.")
print tmpl.substitute(name="Spongebob Squarepants")
</snippet></ROW><ROW><id>4450817</id><snippet>User</snippet></ROW><ROW><id>4450817</id><snippet>Users</snippet></ROW><ROW><id>4450817</id><snippet>from django.db import models

class User(models.Model):
    name = models.CharField(max_length=25)

    def __repr__(self):
        return '&lt;User: %s&gt;' % self.name

class Job(models.Model):
    name = models.CharField(max_length=25)

    def __repr__(self):
        return '&lt;Job: %s&gt;' % self.name

class UserJob(models.Model):
    user = models.ForeignKey(User)
    job = models.ForeignKey(Job)

    def __repr__(self):
        return '&lt;UserJob: %s %s&gt;' % (self.user.name, self.job.name)
</snippet></ROW><ROW><id>4450817</id><snippet>u1 = User.objects.create(name='u1')
u2 = User.objects.create(name='u2')
u3 = User.objects.create(name='u3')

a = Job.objects.create(name='a')
b = Job.objects.create(name='b')
c = Job.objects.create(name='c')

UserJob.objects.create(user=u1, job=a)
UserJob.objects.create(user=u2, job=a)
UserJob.objects.create(user=u2, job=b)
UserJob.objects.create(user=u3, job=a)
UserJob.objects.create(user=u3, job=c)
</snippet></ROW><ROW><id>4450817</id><snippet>u = User.objects.filter(userjob__job=a).filter(userjob__job=c)
</snippet></ROW><ROW><id>4450817</id><snippet>u = User.objects.filter(userjob__job__name='a').filter(userjob__job__name='c')
</snippet></ROW><ROW><id>4450817</id><snippet>User</snippet></ROW><ROW><id>4450817</id><snippet>UserJob</snippet></ROW><ROW><id>4450817</id><snippet>User</snippet></ROW><ROW><id>4450817</id><snippet>u = User.objects.filter(userjob__job__name='a').filter(userjob__job__name='c')
jobs = u.userjob_set.all()
</snippet></ROW><ROW><id>4450827</id><snippet>import scipy
import scipy.signal as sig
rr = [1.0, 1.0, 0.5, 1.5, 1.0, 1.0] # rr time in seconds
fs = 8000.0 # sampling rate
pqrst = sig.wavelets.daub(10) # just to simulate a signal, whatever
ecg = scipy.concatenate([sig.resample(pqrst, int(r*fs)) for r in rr])
t = scipy.arange(len(ecg))/fs
pylab.plot(t, ecg)
pylab.show()
</snippet></ROW><ROW><id>4451215</id><snippet>for row in table:
    print '{0} - {1} - {2}'.format(*[x.name for x in row])
</snippet></ROW><ROW><id>4451627</id><snippet>items = root.findall('items')
</snippet></ROW><ROW><id>4451627</id><snippet>items = root.findall('items/item')
</snippet></ROW><ROW><id>4451630</id><snippet>x = []
</snippet></ROW><ROW><id>4451630</id><snippet>x</snippet></ROW><ROW><id>4451630</id><snippet>x = [[]] * 5
</snippet></ROW><ROW><id>4451630</id><snippet>x</snippet></ROW><ROW><id>4451630</id><snippet>&gt;&gt;&gt; y = []
&gt;&gt;&gt; x = [y]*5
&gt;&gt;&gt; x
[[], [], [], [], []]
&gt;&gt;&gt; x[0].append(0)
&gt;&gt;&gt; x
[[0], [0], [0], [0], [0]]
&gt;&gt;&gt; y
[0]
</snippet></ROW><ROW><id>4451630</id><snippet>[]</snippet></ROW><ROW><id>4451630</id><snippet>x</snippet></ROW><ROW><id>4451630</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>4451630</id><snippet>x = [[] for _ in range(5)]
</snippet></ROW><ROW><id>4451630</id><snippet>numpy</snippet></ROW><ROW><id>4451864</id><snippet>apply</snippet></ROW><ROW><id>4451877</id><snippet>some_task()#do processor heavy task  
</snippet></ROW><ROW><id>4451992</id><snippet>__iter__</snippet></ROW><ROW><id>4451992</id><snippet>for</snippet></ROW><ROW><id>4451992</id><snippet>__getitem__</snippet></ROW><ROW><id>4451992</id><snippet>__iter__</snippet></ROW><ROW><id>4452499</id><snippet>fft(wolfer)</snippet></ROW><ROW><id>4452499</id><snippet>2*pi/N</snippet></ROW><ROW><id>4452499</id><snippet>xs</snippet></ROW><ROW><id>4452499</id><snippet>Y[omega]*exp(1j*n*omega/N)</snippet></ROW><ROW><id>4452499</id><snippet>i</snippet></ROW><ROW><id>4452499</id><snippet>ctr</snippet></ROW><ROW><id>4452499</id><snippet>sqrt(-1)</snippet></ROW><ROW><id>4452499</id><snippet>n</snippet></ROW><ROW><id>4452499</id><snippet>N</snippet></ROW><ROW><id>4452499</id><snippet>__future__ division</snippet></ROW><ROW><id>4452499</id><snippet>fft</snippet></ROW><ROW><id>4452499</id><snippet>N</snippet></ROW><ROW><id>4452499</id><snippet>Y[n]</snippet></ROW><ROW><id>4452499</id><snippet>np.abs(Y)</snippet></ROW><ROW><id>4452499</id><snippet>from __future__ import division
import numpy as np
from scipy import *
from matplotlib import pyplot as gplt
from scipy import fftpack

def f(Y,x, N):
    total = 0
    for ctr in range(len(Y)):
        total += Y[ctr] * (np.cos(x*ctr*2*pi/N) + 1j*np.sin(x*ctr*2*pi/N))
    return real(total)

tempdata = np.loadtxt("sunspots.dat")

year=tempdata[:,0]
wolfer=tempdata[:,1]

Y=fft(wolfer)
N=len(Y)
print N

xs = range(N)
gplt.plot(xs, [f(Y, x, N) for x in xs])
gplt.show()
</snippet></ROW><ROW><id>4452782</id><snippet>cProfile</snippet></ROW><ROW><id>4452782</id><snippet>profile</snippet></ROW><ROW><id>4452782</id><snippet>guppy</snippet></ROW><ROW><id>4452792</id><snippet>Main</snippet></ROW><ROW><id>4452992</id><snippet>__setattr__</snippet></ROW><ROW><id>4452992</id><snippet>&gt;&gt;&gt; class B:
    def __init__(self, name, value):
        self.name = name
        self.value = value


&gt;&gt;&gt; class C:
    def __setattr__(self, name, value):
        if name == 'makeMeB':
            newb = B(name, value)
            self.__dict__[name] = newb
        else:
            self.__dict__[name] = value

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.makeMeB = 'foo'
&gt;&gt;&gt; isinstance(c.makeMeB, B)
True
&gt;&gt;&gt; c.makeMeB.name
'makeMeB'
&gt;&gt;&gt; c.makeMeB.value
'foo'
&gt;&gt;&gt; c.blah = 'foo'
&gt;&gt;&gt; isinstance(c.blah, B)
False
</snippet></ROW><ROW><id>4452992</id><snippet>if</snippet></ROW><ROW><id>4452992</id><snippet>&gt;&gt;&gt; class B:
    def __init__(self, name, value):
        self.name = name
        self.value = value


&gt;&gt;&gt; class C:
    def __setattr__(self, name, value):
        attr_as_b = B(name, value)
        self.__dict__[name] = attr_as_b

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.makeMeB = 'foo'
&gt;&gt;&gt; isinstance(c.makeMeB, B)
True
&gt;&gt;&gt; c.makeMeB.name
'makeMeB'
&gt;&gt;&gt; c.makeMeB.value
'foo'
&gt;&gt;&gt; c.amIalsoB = 'well?'
&gt;&gt;&gt; isinstance(c.amIalsoB, B)
True
&gt;&gt;&gt; c.amIalsoB.name
'amIalsoB'
&gt;&gt;&gt; c.amIalsoB.value
'well?'
</snippet></ROW><ROW><id>4453149</id><snippet>import random
from timeit import Timer

def random_strings(size):
    alpha = 'abcdefghijklmnopqrstuvwxyz'
    min = 3
    max = 8
    strings = []
    for count in xrange(1, size):
        current = ''
        for x in random.sample(alpha, random.randint(min,max)):
            current += x  
        strings.append(current)
    return strings

string_list_1 = random_strings(10000)
string_list_2 = random_strings(10000)

def string_test():
    common = filter(lambda x: x in string_list_2, string_list_1)
    return common

def set_test():
    string_set_1 = frozenset(string_list_1)
    string_set_2 = frozenset(string_list_2)
    common = string_set_1 &amp; string_set_2
    return common

string_timer = Timer("__main__.string_test()", "import __main__")
set_timer = Timer("__main__.set_test()", "import __main__")
print string_timer.timeit(10)
# 22.6108954005
print set_timer.timeit(10)
#  0.0226439453
</snippet></ROW><ROW><id>4453235</id><snippet>contents = ''.join([chr(v) for v in stream.ToArray()])
</snippet></ROW><ROW><id>4453355</id><snippet>cdef char* buffer = &lt;char*&gt;malloc(in_len)
memcpy(buffer, &lt;const_void *&gt;in_bin, in_len)
success = cmc.mcrypt_generic(self._mcStream, &lt;void*&gt;buffer, in_len)
</snippet></ROW><ROW><id>4453355</id><snippet>cdef char* buffer = &lt;char*&gt;malloc(in_len)
memcpy(buffer, &lt;char *&gt;in_bin, in_len)
success = cmc.mcrypt_generic(self._mcStream, &lt;void*&gt;buffer, in_len)
</snippet></ROW><ROW><id>4453715</id><snippet>mount</snippet></ROW><ROW><id>4453715</id><snippet>stat</snippet></ROW><ROW><id>4453715</id><snippet>stat</snippet></ROW><ROW><id>4453715</id><snippet>def find_mount_point(path):
    path = os.path.abspath(path)
    orig_dev = os.stat(path).st_dev

    while path != '/':
        dir = os.path.dirname(path)
        if os.stat(dir).st_dev != orig_dev:
            # we crossed the device border
            break
        path = dir
    return path
</snippet></ROW><ROW><id>4453715</id><snippet>os.path.ismount</snippet></ROW><ROW><id>4453715</id><snippet>def find_mount_point(path):
    path = os.path.abspath(path)
    while not os.path.ismount(path):
        path = os.path.dirname(path)
    return path
</snippet></ROW><ROW><id>4454290</id><snippet>declare @key as int;
insert into users (username)
values ('malcom.reynolds');
set @key = (select scope_identity());
insert into spaceships (name, owner)
values ('Serenity', @key)
</snippet></ROW><ROW><id>4454297</id><snippet>from itertools import groupby
from operator import itemgetter

mydict={
        ('a', 1): 0,
        ('a', 2): 0,
        ('a', 3): 0,
        ('a', 4): 1,
        ('a', 5): 2,
        ('a', 6): 2,
        ('a', 7): 0,
        ('a', 8): 0,           
}

data = mydict.items()
data.sort()

def groupkey(item):
    return item[0][0], item[1]

result = {}
for v, group in groupby(data, key=groupkey):
    char, value = v
    nums = [item[0][1] for item in group]
    result[char, min(nums), max(nums)] = value

print result
</snippet></ROW><ROW><id>4454297</id><snippet>{
 ('a', 1, 3): 0
 ('a', 4, 4): 1, 
 ('a', 5, 6): 2, 
 ('a', 7, 8): 0, 
}
</snippet></ROW><ROW><id>4454388</id><snippet>glib.io_add_watch</snippet></ROW><ROW><id>4454388</id><snippet>idle_add</snippet></ROW><ROW><id>4454968</id><snippet>argv</snippet></ROW><ROW><id>4454968</id><snippet>script = argv[0]
filename = argv[1]
</snippet></ROW><ROW><id>4454968</id><snippet>argparse</snippet></ROW><ROW><id>4454968</id><snippet>sys.argv</snippet></ROW><ROW><id>4454968</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser(description="Print a file.")
&gt;&gt;&gt; parser.add_argument("path", type=str, nargs=1, help="Path to the file to be printed.")
_StoreAction(option_strings=[], dest='path', nargs=1, const=None, default=None, type=&lt;type 'str'&gt;, choices=None, help='Path to the file to be printed.', metavar=None)
&gt;&gt;&gt; args = parser.parse_args()
&gt;&gt;&gt; print args
Namespace(path=[&lt;...&gt;])
</snippet></ROW><ROW><id>4455120</id><snippet>for item in itertools.islice(array, len(array) - 1):
</snippet></ROW><ROW><id>4455154</id><snippet>&gt;&gt;&gt; test[:,0]
array([1, 3, 5])
</snippet></ROW><ROW><id>4455154</id><snippet>&gt;&gt;&gt; test[1,:]
array([3, 4])
</snippet></ROW><ROW><id>4455289</id><snippet>writestr</snippet></ROW><ROW><id>4455554</id><snippet>my_project/
    my_app/
        models.py
        views.py
        tests.py
</snippet></ROW><ROW><id>4455554</id><snippet>my_project/
    my_app/
        management.py
        models.py
        views.py
        tests.py
</snippet></ROW><ROW><id>4455787</id><snippet>print("Content-Type: text/html\n\n")
print("""&lt;html&gt;
 &lt;head&gt;&lt;/head&gt;
 &lt;body&gt;
 &lt;form name='success' action='nav.py' method='post'&gt;
     &lt;input type='hidden' name='linkB' value='Add Assets' /&gt;
 &lt;/form&gt;
 &lt;script type='text/javascript'&gt;
     document.success.submit()
 &lt;/script&gt;
 &lt;/body&gt;""")
</snippet></ROW><ROW><id>4455933</id><snippet>&gt;&gt;&gt; y[0] is t[0] is z[0]
True
&gt;&gt;&gt; y[1] is t[1] is z[1]
True
</snippet></ROW><ROW><id>4455933</id><snippet>is</snippet></ROW><ROW><id>4455933</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; a = copy.deepcopy(y)
&gt;&gt;&gt; a
[['xxxx', 'ho'], ['xxxx', 'go']]
&gt;&gt;&gt; a[0] is y[0]
False
&gt;&gt;&gt; a[0][0] = 'copy!'
&gt;&gt;&gt; y
[['xxxx', 'ho'], ['xxxx', 'go']]
</snippet></ROW><ROW><id>4456016</id><snippet>date</snippet></ROW><ROW><id>4456016</id><snippet>timer.sh</snippet></ROW><ROW><id>4456016</id><snippet>randbegend.sh</snippet></ROW><ROW><id>4456016</id><snippet>timer.sh</snippet></ROW><ROW><id>4456016</id><snippet>#!/bin/bash

while read line; do
  if [[ "$line" == "BEGIN" ]]; then
    t1=$(date "+%s")
    echo t1=$t1
  elif [[ "$line" == "END" ]]; then
    t2=$(date "+%s")
    echo t2=$t2
  fi
done &lt; &lt;(./randbegend.sh) # Change this to call your executable

echo "delta = $((t2 - t1)) seconds"
</snippet></ROW><ROW><id>4456016</id><snippet>#!/bin/bash

sleep $((RANDOM % 5))
echo BEGIN
sleep $((RANDOM % 10))
echo END
</snippet></ROW><ROW><id>4456016</id><snippet>$ ./timer.sh
t1=1292451820
t2=1292451825
delta = 5 seconds

$ ./timer.sh
t1=1292451886
t2=1292451889
delta = 3 seconds

$ ./timer.sh
t1=1292451896
t2=1292451903
delta = 7 seconds
</snippet></ROW><ROW><id>4456284</id><snippet>urlpatterns = patterns('django.views.generic.simple',
    ('^$', 'redirect_to', {'url': '/first-page'}),
)
urlpatterns += patterns('myProject.myApp',
    ...
)
</snippet></ROW><ROW><id>4456284</id><snippet>urlpatterns = patterns('',
    ('^$', 'django.views.generic.simple.redirect_to', {'url': '/first-page'}),
    ...
)
</snippet></ROW><ROW><id>4456403</id><snippet>request.POST</snippet></ROW><ROW><id>4456403</id><snippet>QueryDict</snippet></ROW><ROW><id>4456403</id><snippet>getlist</snippet></ROW><ROW><id>4456403</id><snippet>debug = data.getlist('tags')
</snippet></ROW><ROW><id>4456512</id><snippet>a</snippet></ROW><ROW><id>4456512</id><snippet>numpy.hstack</snippet></ROW><ROW><id>4456512</id><snippet>a = numpy.array([[  0.,   1.,   2.,   3.],
                 [  4.,   5.,   6.,   7.],
                 [  8.,   9.,  10.,  11.]])
numpy.hstack((numpy.zeros((a.shape[0], 2)), a, numpy.zeros((a.shape[0], 1))))
# array([[  0.,   0.,   0.,   1.,   2.,   3.,   0.],
#        [  0.,   0.,   4.,   5.,   6.,   7.,   0.],
#        [  0.,   0.,   8.,   9.,  10.,  11.,   0.]])
</snippet></ROW><ROW><id>4456512</id><snippet>2</snippet></ROW><ROW><id>4456512</id><snippet>1</snippet></ROW><ROW><id>4457653</id><snippet>def dupli(the_list):
    return [(item, the_list.count(item)) for item in sorted(set(the_list))]
</snippet></ROW><ROW><id>4457653</id><snippet>def dupli(the_list):
    count = the_list.count # this optimization added courtesy of Sven's comment
    result = [(item, count(item)) for item in set(the_list)]
    result.sort()
    return result
</snippet></ROW><ROW><id>4457653</id><snippet>sorted</snippet></ROW><ROW><id>4457653</id><snippet>def dupli(the_list):
    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    for n in the_list:
        counts[n] += 1
    return [(i, counts[i]) for i in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) if counts[i]]
</snippet></ROW><ROW><id>4457653</id><snippet>the_list</snippet></ROW><ROW><id>4457653</id><snippet>dupli</snippet></ROW><ROW><id>4457653</id><snippet>import random; the_list=[random.randint(0,12) for i in xrange(10)]</snippet></ROW><ROW><id>4458107</id><snippet>with open('foo.txt', 'rb') as f:
    contents = f.read().decode('utf-8-sig')   # -sig takes care of BOM if present
</snippet></ROW><ROW><id>4458234</id><snippet>sorted(D)</snippet></ROW><ROW><id>4458234</id><snippet>['a', 'b', 'c']</snippet></ROW><ROW><id>4458323</id><snippet>root=etree.fromstring(responseFromAmazon)

# this creates a constant with the namespace in the form that lxml can use it
AMAZON_NS="{http://webservices.amazon.com/AWSECommerceService/2009-10-01}"

# this searches the tree and iterates over results, taking the namespace into account
for eachitem in root.iterfind(".//"+AMAZON_NS+"ItemAttributes"):
   for key,value in eachitem.items():
        if key == 'ISBN':
              # Do your stuff
        if key == 'Title':
              # Do your stuff
</snippet></ROW><ROW><id>4458323</id><snippet>root=etree.fromstring(responseFromAmazon)
AMAZON_NS="{http://webservices.amazon.com/AWSECommerceService/2009-10-01}"
item={}    
for attr in root.iterfind(".//"+AMAZON_NS+"ItemAttributes"):
     item[attr[0].tag.replace(AMAZON_NS,"")]=attr[0].text
</snippet></ROW><ROW><id>4458733</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.get_objects()
</snippet></ROW><ROW><id>4458733</id><snippet>&gt;&gt;&gt; locals()
</snippet></ROW><ROW><id>4458733</id><snippet>&gt;&gt;&gt; globals()
</snippet></ROW><ROW><id>4458788</id><snippet>except Exception, e:
</snippet></ROW><ROW><id>4458788</id><snippet>as</snippet></ROW><ROW><id>4458788</id><snippet>type(e)</snippet></ROW><ROW><id>4458788</id><snippet>type(e).__name__</snippet></ROW><ROW><id>4458788</id><snippet>e.__class__.__name__</snippet></ROW><ROW><id>4459730</id><snippet>my_list = list(set(my_list))
</snippet></ROW><ROW><id>4460004</id><snippet>reduce</snippet></ROW><ROW><id>4460004</id><snippet>media = reduce(lambda x, y: x + y, [form.media for form in forms])
</snippet></ROW><ROW><id>4460303</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4460303</id><snippet>chmod +x</snippet></ROW><ROW><id>4460303</id><snippet>0 0 */2 * * /path/to/your/pythonscript.py</snippet></ROW><ROW><id>4460625</id><snippet>int()</snippet></ROW><ROW><id>4460625</id><snippet>print</snippet></ROW><ROW><id>4460625</id><snippet>pdb</snippet></ROW><ROW><id>4460765</id><snippet>import dateutil.parser as parser
text = 'Thu, 16 Dec 2010 12:14:05 +0000'
date = (parser.parse(text))
print(date.isoformat())
# 2010-12-16T12:14:05+00:00
</snippet></ROW><ROW><id>4460771</id><snippet>inspect</snippet></ROW><ROW><id>4460771</id><snippet>locals</snippet></ROW><ROW><id>4460784</id><snippet>str()</snippet></ROW><ROW><id>4460784</id><snippet>response_dict.update({'error': str(e)})
</snippet></ROW><ROW><id>4461245</id><snippet>if not isinstance(data, unicode):
    # It's not Unicode!
    data = data.decode('UTF8')
</snippet></ROW><ROW><id>4461624</id><snippet>lang = 'simple'
wiki = Wikipedia(lang)

try:
    raw = wiki.article('Uruguay')
except:
    raw = None

if raw:
    wiki2plain = Wiki2Plain(raw)
    content = wiki2plain.text
</snippet></ROW><ROW><id>4462064</id><snippet>super()</snippet></ROW><ROW><id>4462064</id><snippet>class InputError(Error):
    def __init__(self, val):
        super(InputError, self).__init__(val)
        print val
</snippet></ROW><ROW><id>4462117</id><snippet>__getattr__</snippet></ROW><ROW><id>4462117</id><snippet>c</snippet></ROW><ROW><id>4462117</id><snippet>__repr__</snippet></ROW><ROW><id>4462117</id><snippet>__getitem__</snippet></ROW><ROW><id>4462117</id><snippet>__setitem__</snippet></ROW><ROW><id>4462117</id><snippet>__delitem__</snippet></ROW><ROW><id>4462117</id><snippet>c["name"]</snippet></ROW><ROW><id>4462117</id><snippet>c.name</snippet></ROW><ROW><id>4462117</id><snippet>get()</snippet></ROW><ROW><id>4462117</id><snippet>return False</snippet></ROW><ROW><id>4462287</id><snippet>def __hash__(self):
    return hash(frozenset(self.iteritems()))
</snippet></ROW><ROW><id>4462503</id><snippet>{% load mptt_tags %}
&lt;ul class="root"&gt;
    {% recursetree nodes %}            
        &lt;li&gt;
            {{ node.message }}
            {% if not node.is_leaf_node %}
                &lt;ul class="children"&gt;
                    {{ children }}
                &lt;/ul&gt;
            {% endif %}
        &lt;/li&gt;
    {% endrecursetree %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>4462503</id><snippet>threads = Thread.tree.all()  
data = {  
    'nodes':threads  
}
return render_to_response("show.html",data )
</snippet></ROW><ROW><id>4462591</id><snippet>itertools.permutations</snippet></ROW><ROW><id>4462591</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(list(itertools.permutations("spam")))
[('s', 'p', 'a', 'm'),
 ('s', 'p', 'm', 'a'),
 ('s', 'a', 'p', 'm'),
 ('s', 'a', 'm', 'p'),
 ('s', 'm', 'p', 'a'),
 ('s', 'm', 'a', 'p'),
 ('p', 's', 'a', 'm'),
 ('p', 's', 'm', 'a'),
 ('p', 'a', 's', 'm'),
 ('p', 'a', 'm', 's'),
 ('p', 'm', 's', 'a'),
 ('p', 'm', 'a', 's'),
 ('a', 's', 'p', 'm'),
 ('a', 's', 'm', 'p'),
 ('a', 'p', 's', 'm'),
 ('a', 'p', 'm', 's'),
 ('a', 'm', 's', 'p'),
 ('a', 'm', 'p', 's'),
 ('m', 's', 'p', 'a'),
 ('m', 's', 'a', 'p'),
 ('m', 'p', 's', 'a'),
 ('m', 'p', 'a', 's'),
 ('m', 'a', 's', 'p'),
 ('m', 'a', 'p', 's')]
</snippet></ROW><ROW><id>4462591</id><snippet>pprint</snippet></ROW><ROW><id>4462591</id><snippet>&gt;&gt;&gt; list(map("".join, itertools.permutations("spam")))
['spam', 'spma', 'sapm', 'samp', 'smpa', 'smap', 'psam', 'psma', 'pasm', 'pams', 'pmsa', 'pmas', 'aspm', 'asmp', 'apsm', 'apms', 'amsp', 'amps', 'mspa', 'msap', 'mpsa', 'mpas', 'masp', 'maps']
</snippet></ROW><ROW><id>4462796</id><snippet>dict_</snippet></ROW><ROW><id>4462796</id><snippet>cls</snippet></ROW><ROW><id>4462796</id><snippet>class Meta(DeclarativeMeta):
    def __init__(cls, *args, **kw):
        if getattr(cls, '_decl_class_registry', None) is None:
            return # they use this in the docs, so maybe its not a bad idea
        cls.__mapper_args__ = {'polymorphic_identity': cls.__name__}
        return super(Meta, cls).__init__(*args, **kw)

class Experiment(Entity):
    __metaclass__ = Meta
</snippet></ROW><ROW><id>4462817</id><snippet>import re

text = "&lt;br /&gt;&lt;strong&gt;Date: 06/12/2010&lt;/strong&gt; &lt;br /&gt;"
m = re.search("&lt;strong&gt;(Date:.*?)&lt;/strong&gt;", text)
print m.group(1)
</snippet></ROW><ROW><id>4462817</id><snippet>Date: 06/12/2010
</snippet></ROW><ROW><id>4462877</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://yahoo.com').read()
soup = BeautifulSoup(page)
soup.prettify()
for anchor in soup.findAll('a', href=True):
    print anchor['href']
</snippet></ROW><ROW><id>4462877</id><snippet>inner_div = soup.findAll("div", {"id": "y-shade"})</snippet></ROW><ROW><id>4463133</id><snippet>py2exe</snippet></ROW><ROW><id>4463135</id><snippet>if curr.left is not None and curr.left is not TreeNode.NULL:
    yield self._next(curr.left)

yield curr

if curr.right is not None and curr.right is not TreeNode.NULL:
    yield self._next(curr.right)   
</snippet></ROW><ROW><id>4463135</id><snippet>if curr.left is not None and curr.left is not TreeNode.NULL:
    for x in self._next(curr.left):
        yield x

yield curr

if curr.right is not None and curr.right is not TreeNode.NULL:
    for x in self._next(curr.right):
        yield x
</snippet></ROW><ROW><id>4463135</id><snippet>yield</snippet></ROW><ROW><id>4463135</id><snippet>self._next(curr.left)</snippet></ROW><ROW><id>4463341</id><snippet>def g(i):
    return f(i, 20)
</snippet></ROW><ROW><id>4463341</id><snippet>map()</snippet></ROW><ROW><id>4463341</id><snippet>def g(tup):
    return f(*tup)
</snippet></ROW><ROW><id>4463341</id><snippet>lambda tup: f(*tup)</snippet></ROW><ROW><id>4463683</id><snippet>res</snippet></ROW><ROW><id>4463683</id><snippet>delta</snippet></ROW><ROW><id>4463683</id><snippet>None</snippet></ROW><ROW><id>4463726</id><snippet>with file('a.py','rU') as f:
  co=compile(f.read(),'foobar','exec')
  exec co in {'__name__':'__main__'}
</snippet></ROW><ROW><id>4464015</id><snippet>python</snippet></ROW><ROW><id>4464015</id><snippet>Python m.n</snippet></ROW><ROW><id>4464015</id><snippet>/Applications/Python 2.7</snippet></ROW><ROW><id>4464015</id><snippet>Update Shell Profile.command</snippet></ROW><ROW><id>4464015</id><snippet>bash</snippet></ROW><ROW><id>4464015</id><snippet>sh</snippet></ROW><ROW><id>4464015</id><snippet>csh</snippet></ROW><ROW><id>4464015</id><snippet>Update Shell Profile.command</snippet></ROW><ROW><id>4464015</id><snippet>$ cat ~/.bash_profile
# .bash_profile
# ... other stuff

# Setting PATH for Python 2.7
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
export PATH
</snippet></ROW><ROW><id>4464015</id><snippet>$ ls -l /Library/Frameworks/Python.framework/Versions/2.7/bin
total 272
lrwxr-xr-x  1 root  admin      8 Nov 30 00:49 2to3@ -&gt; 2to3-2.7
-rwxrwxr-x  1 root  admin    140 Nov 30 00:30 2to3-2.7*
lrwxr-xr-x  1 root  admin      7 Nov 30 00:49 idle@ -&gt; idle2.7
-rwxrwxr-x  1 root  admin    138 Nov 30 00:30 idle2.7*
lrwxr-xr-x  1 root  admin      8 Nov 30 00:49 pydoc@ -&gt; pydoc2.7
-rwxrwxr-x  1 root  admin    123 Nov 30 00:30 pydoc2.7*
lrwxr-xr-x  1 root  admin      9 Nov 30 00:49 python@ -&gt; python2.7
lrwxr-xr-x  1 root  admin     16 Nov 30 00:49 python-config@ -&gt; python2.7-config
-rwxrwxr-x  1 root  admin  33764 Nov 30 00:31 python2.7*
-rwxrwxr-x  1 root  admin   1663 Nov 30 00:31 python2.7-config*
lrwxr-xr-x  1 root  admin     10 Nov 30 00:49 pythonw@ -&gt; pythonw2.7
-rwxrwxr-x  1 root  admin  33764 Nov 30 00:31 pythonw2.7*
lrwxr-xr-x  1 root  admin     11 Nov 30 00:49 smtpd.py@ -&gt; smtpd2.7.py
-rwxrwxr-x  1 root  admin  18586 Nov 30 00:30 smtpd2.7.py*
</snippet></ROW><ROW><id>4464015</id><snippet>python2.7</snippet></ROW><ROW><id>4464015</id><snippet>python</snippet></ROW><ROW><id>4464015</id><snippet>$ echo $PATH
/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</snippet></ROW><ROW><id>4464015</id><snippet>python</snippet></ROW><ROW><id>4464015</id><snippet>python</snippet></ROW><ROW><id>4464015</id><snippet>/usr/bin</snippet></ROW><ROW><id>4464015</id><snippet>$ ls /usr/bin/py*
/usr/bin/pydoc*            /usr/bin/python-config*    /usr/bin/python2.6-config@
/usr/bin/pydoc2.5@         /usr/bin/python2.5@        /usr/bin/pythonw*
/usr/bin/pydoc2.6@         /usr/bin/python2.5-config@ /usr/bin/pythonw2.5@
/usr/bin/python*           /usr/bin/python2.6@        /usr/bin/pythonw2.6@
</snippet></ROW><ROW><id>4464015</id><snippet>/usr/bin</snippet></ROW><ROW><id>4464015</id><snippet>$ /Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 -c 'import sys;print(sys.version)'
2.7.1 (r271:86882M, Nov 30 2010, 09:39:13) 
[GCC 4.0.1 (Apple Inc. build 5494)]
$ python2.7 -c 'import sys;print(sys.version)'
2.7.1 (r271:86882M, Nov 30 2010, 09:39:13) 
[GCC 4.0.1 (Apple Inc. build 5494)]
$ python -c 'import sys;print(sys.version)'
2.7.1 (r271:86882M, Nov 30 2010, 09:39:13) 
[GCC 4.0.1 (Apple Inc. build 5494)]
$ /usr/bin/python -c 'import sys;print(sys.version)'
2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)]
$ /usr/bin/python2.6 -c 'import sys;print(sys.version)'
2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)]
</snippet></ROW><ROW><id>4464286</id><snippet>for x in d.get("kids", ()):
    print "kid:", x
</snippet></ROW><ROW><id>4464496</id><snippet>jobm</snippet></ROW><ROW><id>4464496</id><snippet>device_fd</snippet></ROW><ROW><id>4464496</id><snippet>device_fd</snippet></ROW><ROW><id>4464496</id><snippet>poll</snippet></ROW><ROW><id>4464496</id><snippet>select</snippet></ROW><ROW><id>4464497</id><snippet>render</snippet></ROW><ROW><id>4464497</id><snippet>yourapp.lib.base</snippet></ROW><ROW><id>4464497</id><snippet>return render('/path/to/error/template')</snippet></ROW><ROW><id>4464511</id><snippet>import re

test = 'id:foo'

match = re.search(r'^id:(.*)$', test)
if match:
    print match.group(1)
</snippet></ROW><ROW><id>4464511</id><snippet>re</snippet></ROW><ROW><id>4464511</id><snippet>r</snippet></ROW><ROW><id>4464511</id><snippet>re.search</snippet></ROW><ROW><id>4464511</id><snippet>=~</snippet></ROW><ROW><id>4464511</id><snippet>re.match</snippet></ROW><ROW><id>4464511</id><snippet>:</snippet></ROW><ROW><id>4464743</id><snippet>export TZ='US/East'</snippet></ROW><ROW><id>4464743</id><snippet>date</snippet></ROW><ROW><id>4464838</id><snippet>&gt;&gt;&gt; f = open('480p.m4v')
&gt;&gt;&gt; print str(f)
&lt;open file '480p.m4v', mode 'r' at 0x0224C9D0&gt;
</snippet></ROW><ROW><id>4464838</id><snippet>&gt;&gt;&gt; sha = str(hashlib.sha224(f.read()).hexdigest())    # read() slurps the whole file into a string
</snippet></ROW><ROW><id>4464896</id><snippet>form = SearchProjectForm(project, request.POST)
</snippet></ROW><ROW><id>4464896</id><snippet>class SearchProjectForm(forms.Form):
    text = forms.CharField(label = "Search")

    def __init__(self, project, *args, **kwargs):
      form = forms.Form.__init__(self, *args, **kwargs)
      if project.has_additional_fields():
        self.fields['additional_field'] = forms.SomeField()
      if project.only_additional_fields():
        self.fields['text'].required = False
</snippet></ROW><ROW><id>4464969</id><snippet>import re

re.search("", "ffff")
&lt;_sre.SRE_Match object at 0xb7166410&gt;

re.search("", "ffff").start()
0

re.search("$", "ffff").start()
4
</snippet></ROW><ROW><id>4465333</id><snippet>hadoop@ubuntu:/usr/local/hadoop$ bin/hadoop jar contrib/streaming/hadoop-0.20.0-streaming.jar -file /home/hadoop/mapper.py -mapper mapper.py -file /home/hadoop/reducer.py -reducer reducer.py -input my-input/* -output my-output
</snippet></ROW><ROW><id>4465508</id><snippet>altList = origList[:]
</snippet></ROW><ROW><id>4465790</id><snippet>&gt;&gt;&gt; int(float("3.5"))
</snippet></ROW><ROW><id>4465790</id><snippet>math</snippet></ROW><ROW><id>4465790</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; x = "3.5"
&gt;&gt;&gt; math.floor(float(x)) # returns FP; still needs to be wrapped in int()
3.0
&gt;&gt;&gt; math.ceil(float(x)) # same
4.0
&gt;&gt;&gt; math.trunc(float(x)) # returns an int; essentially the same as int(float(x))
3
</snippet></ROW><ROW><id>4465790</id><snippet>round</snippet></ROW><ROW><id>4465790</id><snippet>&gt;&gt;&gt; int(round(float(x))) # 3.5 =&gt; 4
4
&gt;&gt;&gt; int(round(3.4999))
3
</snippet></ROW><ROW><id>4465988</id><snippet>class datetime.timedelta</snippet></ROW><ROW><id>4465988</id><snippet>if (y-x) &gt;datetime.timedelta(0,30):
</snippet></ROW><ROW><id>4466035</id><snippet>sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>4466174</id><snippet>twill</snippet></ROW><ROW><id>4466174</id><snippet>coverage</snippet></ROW><ROW><id>4466190</id><snippet>def was_published_today(self):
    return (self.pub_date.date() == datetime.date.today())
</snippet></ROW><ROW><id>4466258</id><snippet>parser = argparse.ArgumentParser(description='Lookup servers by ip address from host file')
parser.add_argument('host', nargs=1,
            help="ip address to lookup")
main_group = parser.add_mutually_exclusive_group()
mysql_group = main_group.add_argument_group()
main_group.add_argument("-s", "--ssh", dest='ssh', action='store_true',
            default=False,
            help='Connect to this machine via ssh, instead of printing hostname')
mysql_group.add_argument("-m", "--mysql", dest='mysql', action='store_true',
            default=False,
            help='Start a mysql tunnel to the host, instead of printing hostname')
main_group.add_argument("-f", "--firefox", dest='firefox', action='store_true',
            default=False,
            help='Start a firefox session to the remotemyadmin instance')
</snippet></ROW><ROW><id>4466258</id><snippet>usage = 'whichboom [-h] [-s | [-h] [-s]] host'
parser = argparse.ArgumentParser(description, usage)
options, args = parser.parse_args()
if options.ssh and options.firefox:
    parser.print_help()
    sys.exit()
</snippet></ROW><ROW><id>4466397</id><snippet>Provider=Microsoft.ACE.OLEDB.12.0;Data Source=T:\data.mdb;
</snippet></ROW><ROW><id>4466482</id><snippet>&gt;&gt;&gt; members = set()
&gt;&gt;&gt; members.add(1)
&gt;&gt;&gt; 1 in members
True
&gt;&gt;&gt; 2 in members
False
</snippet></ROW><ROW><id>4466482</id><snippet>&gt;&gt;&gt; set(codes)
</snippet></ROW><ROW><id>4466818</id><snippet>clean_password</snippet></ROW><ROW><id>4466818</id><snippet>clean_password</snippet></ROW><ROW><id>4466818</id><snippet>clean_password2</snippet></ROW><ROW><id>4466818</id><snippet>def clean_password(self):
    if not self.cleaned_data['password']:
        raise forms.ValidationError("Enter a password.")
    return self.cleaned_data['password']

def clean_password2(self):
    if not self.cleaned_data['password2']:
        raise forms.ValidationError("Enter your password (again)")
    return self.cleaned_data['password2']
</snippet></ROW><ROW><id>4466818</id><snippet>def clean_password2(self):
    data = self.cleaned_data['password2']
        raise forms.ValidationError("Enter your password (again)")
    return data
</snippet></ROW><ROW><id>4466904</id><snippet>name = forms.CharField(error_messages={'required': 'Your Name is Required'}) 
</snippet></ROW><ROW><id>4467247</id><snippet>c.execute(newdata)</snippet></ROW><ROW><id>4467247</id><snippet>#!/usr/bin/python
# Filename : hello.py

from sqlite3 import *

conn = connect('database')

c = conn.cursor()

c.execute('select * from table limit 2')
result = c.fetchall()

for row in result:
    newname = row[1]
    newname = newname[:-3]+"hello"
    newdata = "UPDATE table SET name = '" + newname + "', originalPath = '' WHERE id = '" + str(row[0]) + "'"
    print row
    c.execute(newdata)
conn.commit()    
c.close()
conn.close()
</snippet></ROW><ROW><id>4467299</id><snippet>&gt;&gt;&gt; def beep():
...     print "\a"
&gt;&gt;&gt; beep()
</snippet></ROW><ROW><id>4467299</id><snippet>sys.stdout.write("\a")</snippet></ROW><ROW><id>4467565</id><snippet>math -script graph.m</snippet></ROW><ROW><id>4467565</id><snippet>graph.m</snippet></ROW><ROW><id>4467770</id><snippet>$ pip install noise
</snippet></ROW><ROW><id>4467770</id><snippet>2dtexture</snippet></ROW><ROW><id>4468319</id><snippet>sys.modules</snippet></ROW><ROW><id>4468319</id><snippet>reload</snippet></ROW><ROW><id>4468467</id><snippet>import urlparse

def make_links_absolute(soup, url):
    for tag in soup.findAll('a', href=True):
        tag['href'] = urlparse.urljoin(url, tag['href'])
</snippet></ROW><ROW><id>4468598</id><snippet>digraph {

  node [    fill=cornflowerblue,
            fontcolor=white,
            shape=diamond,
            style=filled];

  Step1 [   color=darkgoldenrod2,
            fontcolor=navy,
            label=start,
            shape=box];

  Step2;

  Step3a [  style=filled,
            fillcolor=grey80,
            color=grey80,
            shape=circle,
            fontcolor=navy];

  Step1  -&gt; Step2;
  Step1  -&gt; Step2a;
  Step2a -&gt; Step3a;
  Step3;
  Step3a -&gt; Step3;
  Step3a -&gt; Step2b;
  Step2  -&gt; Step2b;
  Step2b -&gt; Step3;
  End [ shape=rectangle,
        color=darkgoldenrod2,
        fontcolor=navy];
  Step3  -&gt; End [label=193];
}
</snippet></ROW><ROW><id>4468717</id><snippet>HKEY_CURRENT_USER\Control Panel\Desktop</snippet></ROW><ROW><id>4468717</id><snippet>TileWallpaper</snippet></ROW><ROW><id>4468717</id><snippet>1</snippet></ROW><ROW><id>4468717</id><snippet>WallpaperStyle</snippet></ROW><ROW><id>4468717</id><snippet>0</snippet></ROW><ROW><id>4468717</id><snippet>SPIF_UPDATEINIFILE | SPIF_SENDCHANGE</snippet></ROW><ROW><id>4469011</id><snippet>var canHazStorage = function () {
    "use strict";
    try {
        return 'localStorage' in window &amp;&amp; window.localStorage !== null;
    } catch(e) {
        return false;
    }
};
</snippet></ROW><ROW><id>4469011</id><snippet>$('#section1').toggle();

if ( canHazStorage ) {
    if ( is_shown ) { // you'll need to write that yourself
        window.localStorage['section1'] = true;
    } else {
        window.localStorage['section1'] = false;
    }
} else {
    // same code using cookies
}
</snippet></ROW><ROW><id>4469011</id><snippet>if ( canHazStorage ) {
    var toggled = window.localStorage['section1'];
    $('#section1').toggle(toggled);
} else {
    // same code using cookies
}
</snippet></ROW><ROW><id>4469202</id><snippet>self._mgr.GetPane("notebook-content").Show().Top().Layer(0).Row(0).Position(0)
</snippet></ROW><ROW><id>4469291</id><snippet>tweepy</snippet></ROW><ROW><id>4469291</id><snippet>oauth-python</snippet></ROW><ROW><id>4469291</id><snippet>tweepy</snippet></ROW><ROW><id>4469602</id><snippet>&lt;?xml version="1.1" encoding="iso-8859-1"?&gt;
&lt;container&gt;
  &lt;person name="Jim"&gt;
    &lt;number type="home" value="000-000-0000"/&gt;
    &lt;number type="work" value="111-111-1111"/&gt;
  &lt;/person&gt;
  &lt;person name="Fred"&gt;
    &lt;number type="home" value="222-222-2222"/&gt;
    &lt;number type="work" value="333-333-3333"/&gt;
  &lt;/person&gt;
&lt;/container&gt;
</snippet></ROW><ROW><id>4469602</id><snippet>from xml.etree.ElementTree import ElementTree

f = open('/path/to/xml/file', 'r')

xml = ElementTree(file=f)
for person in xml.findall('person'):
    print(person.attrib['name'])
    for number in person.findall('number'):
        print('%s -&gt; %s' % (number.attrib['type'], number.attrib['value']))
</snippet></ROW><ROW><id>4469602</id><snippet>Jim
home -&gt; 000-000-0000
work -&gt; 111-111-1111
Fred
home -&gt; 222-222-2222
work -&gt; 333-333-3333
</snippet></ROW><ROW><id>4469969</id><snippet>for line in f:</snippet></ROW><ROW><id>4469969</id><snippet>isRequired(line)</snippet></ROW><ROW><id>4469969</id><snippet>writeLoc = 0
readLoc = 0
with open( "filename" , "r+" ) as f:
    while True:
        line = f.readline()

        #manual EOF check; not sure of the correct
        #Python way to do this manually...
        if line == "":
            break

        #save how far we've read
        readLoc = f.tell()

        #if we need this line write it and
        #update the write location
        if isRequired(line):
            f.seek( writeLoc )
            f.write( line )
            writeLoc = f.tell()
            f.seek( readLoc )

    #finally, chop off the rest of file that's no longer needed
    f.truncate( writeLoc )
</snippet></ROW><ROW><id>4470210</id><snippet>&gt;&gt;&gt; from lxml.etree import tostring
&gt;&gt;&gt; from lxml.builder import E
&gt;&gt;&gt; print tostring(
             E.results(
                 E.Country(name='Germany',
                           Code='DE',
                           Storage='Basic',
                           Status='Fresh',
                           Type='Photo')
             ), pretty_print=True, xml_declaration=True, encoding='UTF-16')

��&lt;?xml version='1.0' encoding='UTF-16'?&gt;
&lt;results&gt;
  &lt;Country Status="Fresh" Type="Photo" Code="DE" Storage="Basic" name="Germany"/&gt;
&lt;/results&gt;
</snippet></ROW><ROW><id>4470251</id><snippet> for h in host1 host2 host3
 do
     scan $h &gt;$h.scan &amp;
 done
 cat *.scan &gt;all.scan
</snippet></ROW><ROW><id>4470251</id><snippet>.scan</snippet></ROW><ROW><id>4470251</id><snippet>.scan</snippet></ROW><ROW><id>4470251</id><snippet>all.scan</snippet></ROW><ROW><id>4470513</id><snippet>#!/usr/bin/env python

# Imports the monkeyrunner modules used by this program
from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice

text = MonkeyRunner.help("html");

f = open('help.html', 'w')
f.write(text);
f.close();
</snippet></ROW><ROW><id>4470513</id><snippet>$ monkeyrunner help.py
</snippet></ROW><ROW><id>4471312</id><snippet>Client.log()</snippet></ROW><ROW><id>4471332</id><snippet>A.number</snippet></ROW><ROW><id>4471332</id><snippet>class A():
    number = 0
</snippet></ROW><ROW><id>4471332</id><snippet>__init__</snippet></ROW><ROW><id>4471332</id><snippet>number</snippet></ROW><ROW><id>4471332</id><snippet>class A(object):
    def __init__(self, number):
        self.number = number
</snippet></ROW><ROW><id>4471332</id><snippet>List = [A(i) for i in range(5)]
print List
</snippet></ROW><ROW><id>4471332</id><snippet>Numbers = set([1,2,3]) 
</snippet></ROW><ROW><id>4471332</id><snippet>x in Numbers</snippet></ROW><ROW><id>4471332</id><snippet>filtered = [a for a in List if a.number in Numbers]
</snippet></ROW><ROW><id>4471537</id><snippet>"&lt;&lt;&lt;A goes here&gt;&gt;&gt;"</snippet></ROW><ROW><id>4471537</id><snippet>Aflag = "&lt;&lt;&lt;A goes here&gt;&gt;&gt;"
Bflag = "&lt;&lt;&lt;B goes here&gt;&gt;&gt;"
Aidx = C.find(Aflag)
Bidx = C.find(Bflag, Aidx+len(Aflag)+1)

newC = "".join((C[:Aidx], A, C[Aidx+len(Aflag)+1:Bidx], B, C[Bidx+len(Bflag)+1:]))
</snippet></ROW><ROW><id>4471797</id><snippet>appscript.app("Google Chrome").windows.active_tab.URL()
</snippet></ROW><ROW><id>4471797</id><snippet>.help()</snippet></ROW><ROW><id>4471797</id><snippet>appscript.app("Google Chrome").help()</snippet></ROW><ROW><id>4471797</id><snippet>windows</snippet></ROW><ROW><id>4471797</id><snippet>appscript.app("Google Chrome").windows.help()</snippet></ROW><ROW><id>4471797</id><snippet>windows</snippet></ROW><ROW><id>4471984</id><snippet>save_model</snippet></ROW><ROW><id>4471984</id><snippet>ModelAdmin</snippet></ROW><ROW><id>4471984</id><snippet>class BlogPostAdmin(model_admin):   

    def save_model(self, request, instance, form, change):
        user = request.user 
        instance = form.save(commit=False)
        if not change or not instance.author:
            instance.author = user
        instance.save()
        form.save_m2m()
        return instance
</snippet></ROW><ROW><id>4472406</id><snippet>\v</snippet></ROW><ROW><id>4472406</id><snippet>:help magic</snippet></ROW><ROW><id>4472501</id><snippet>\s</snippet></ROW><ROW><id>4472501</id><snippet>\b</snippet></ROW><ROW><id>4472501</id><snippet>.*?</snippet></ROW><ROW><id>4472501</id><snippet>\S</snippet></ROW><ROW><id>4472501</id><snippet>&gt;&gt;&gt; regex = re.compile(r'\b\S*\.example\.com')
&gt;&gt;&gt; regex.findall(string)
[u'suba1.suba2.example.com', u'subb1.subb2.example.com']
</snippet></ROW><ROW><id>4472833</id><snippet>Item</snippet></ROW><ROW><id>4472833</id><snippet>Cart</snippet></ROW><ROW><id>4472833</id><snippet>add_item</snippet></ROW><ROW><id>4472833</id><snippet>def add_item(self, product, quantity=1):
        item = Cart.Item(self.next_item_id, product, quantity)
        self.items.push(item)
</snippet></ROW><ROW><id>4472833</id><snippet>self.Item(...)</snippet></ROW><ROW><id>4472993</id><snippet>class MyEnum:
  VAL1, VAL2, VAL3 = range(3)
  @classmethod
  def tostring(cls, val):
    for k,v in vars(cls).iteritems():
        if v==val:
            return k

  @classmethod
  def fromstring(cls, str):
      return getattr(cls, str.upper(), None)

print MyEnum.fromstring('Val1')
print MyEnum.tostring(2)
</snippet></ROW><ROW><id>4473022</id><snippet>maxent_tagger = ClassifierBasedPosTagger(train=train_sents, classifier_builder=lambda train_feats: MaxentClassifier.train(train_feats, algorithm='megam', max_iter=10, min_lldelta=0.1))
</snippet></ROW><ROW><id>4473149</id><snippet>^([a-z] )*</snippet></ROW><ROW><id>4473149</id><snippet>PARIS …</snippet></ROW><ROW><id>4473149</id><snippet>[a-z] </snippet></ROW><ROW><id>4473149</id><snippet>paris </snippet></ROW><ROW><id>4473149</id><snippet>+</snippet></ROW><ROW><id>4473149</id><snippet>+</snippet></ROW><ROW><id>4473149</id><snippet>^(?P&lt;city&gt;([a-z] )+|(paris )).*$
</snippet></ROW><ROW><id>4473245</id><snippet>import</snippet></ROW><ROW><id>4473245</id><snippet>import swineflu as f</snippet></ROW><ROW><id>4473245</id><snippet>import swineflu

fibo = swineflu.fibo()  # get an instance of the class
fibo.f()                # call the method f of the instance
</snippet></ROW><ROW><id>4473542</id><snippet>command = 'tcpdump -c5 -tttt -w {0} host {1}'.format(raw, input_host)
</snippet></ROW><ROW><id>4473542</id><snippet>command = 'tcpdump -c5 -tttt -w {0} host {1}'.format(self.raw, self.input_host)
</snippet></ROW><ROW><id>4473542</id><snippet>self</snippet></ROW><ROW><id>4473947</id><snippet>&gt;&gt;&gt; class B(object):
...     class C(object):
...             pass
... 
&gt;&gt;&gt; D = B.C
&gt;&gt;&gt; x = D()
&gt;&gt;&gt; isinstance(x, B.C)
True
</snippet></ROW><ROW><id>4473947</id><snippet>x</snippet></ROW><ROW><id>4473947</id><snippet>D</snippet></ROW><ROW><id>4473947</id><snippet>B.C</snippet></ROW><ROW><id>4473947</id><snippet>pickle</snippet></ROW><ROW><id>4473947</id><snippet>x</snippet></ROW><ROW><id>4473947</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; t = open('/tmp/x.pickle', 'w+b')
&gt;&gt;&gt; pickle.dump(x, t)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/pickle.py", line 1362, in dump
    Pickler(file, protocol).dump(obj)
  ...
  File "/usr/lib/python2.6/pickle.py", line 748, in save_global
   (obj, module, name))
  pickle.PicklingError: Can't pickle &lt;class '__main__.C'&gt;: it's not found as __main__.C
</snippet></ROW><ROW><id>4473947</id><snippet>_class_path</snippet></ROW><ROW><id>4473947</id><snippet>class A(object):
  _class_path = 'mymodule.A'
  class B(object):
    _class_path = 'mymodule.A.B'
    ...
</snippet></ROW><ROW><id>4473947</id><snippet>D=B.C</snippet></ROW><ROW><id>4473947</id><snippet>pickle</snippet></ROW><ROW><id>4473947</id><snippet>save_global</snippet></ROW><ROW><id>4473947</id><snippet>__name__</snippet></ROW><ROW><id>4473947</id><snippet>__module__</snippet></ROW><ROW><id>4473947</id><snippet>sys.modules</snippet></ROW><ROW><id>4473947</id><snippet>__import__(module_name)
class_obj = getattr(sys.modules[module_name], class_name)
</snippet></ROW><ROW><id>4474448</id><snippet>catch(Exception e)
{
    Console.WriteLine(e.StackTrace);
}
</snippet></ROW><ROW><id>4474478</id><snippet>&gt;&gt;&gt; Product.objects.all()
[&lt;SimpleProduct: ...&gt;, &lt;OtherProduct: ...&gt;, &lt;BlueProduct: ...&gt;, ...]
</snippet></ROW><ROW><id>4474478</id><snippet>Meal</snippet></ROW><ROW><id>4474478</id><snippet>Salad(Meal)</snippet></ROW><ROW><id>4474495</id><snippet>class abstractstatic(staticmethod):
    __slots__ = ()
    def __init__(self, function):
        super(abstractstatic, self).__init__(function)
        function.__isabstractmethod__ = True
    __isabstractmethod__ = True

class A(object):
    __metaclass__ = abc.ABCMeta
    @abstractstatic
    def test():
        print 5
</snippet></ROW><ROW><id>4474501</id><snippet>&gt;&gt;&gt; hex(ord(u'°'))
'0xb0'
&gt;&gt;&gt; hex(ord(u'ç'))
'0xe7'
</snippet></ROW><ROW><id>4474589</id><snippet>from sgmllib import SGMLParser
import urllib2
import urllib

# Define the class that will parse the suggestion XML
class PullSuggestions(SGMLParser):

   def reset(self):
      SGMLParser.reset(self)
      self.suggestions = []
      self.queries = []

   def start_suggestion(self, attrs):
      for a in attrs:
         if a[0] == 'data': self.suggestions.append(a[1])

   def start_num_queries(self, attrs):
      for a in attrs:
         if a[0] == 'int': self.queries.append(a[1])

# ENTER THE BASE QUERY HERE

base_query = ""  #This is the base query

base_query += "%s"
alphabet = "abcdefghijklmnopqrstuvwxyz"
for letter in alphabet:
   q = base_query % letter;
   query = urllib.urlencode({'q' : q})
   url = "http://google.com/complete/search?output=toolbar&amp;%s" % query

   res = urllib2.urlopen(url)
   parser = PullSuggestions()
   parser.feed(res.read())
   parser.close()

   for i in range(0,len(parser.suggestions)):
      print "%s\t%s" % (parser.suggestions[i], parser.queries[i])
</snippet></ROW><ROW><id>4474654</id><snippet>log4net</snippet></ROW><ROW><id>4474654</id><snippet>TraceListener</snippet></ROW><ROW><id>4474700</id><snippet>rows = [2,2,4]
</snippet></ROW><ROW><id>4474700</id><snippet>rows[0]</snippet></ROW><ROW><id>4474700</id><snippet>rows[2]</snippet></ROW><ROW><id>4474981</id><snippet>site_media</snippet></ROW><ROW><id>4474991</id><snippet>from multiprocessing.pool import ThreadPool

def identity((a,b)): return a, b

print map(identity, zip([1, 2, 3], [4, 5, 6]))

p = ThreadPool(2)

#gives above error:
print p.map(identity, zip([1, 2, 3], [4, 5, 6]))
</snippet></ROW><ROW><id>4474991</id><snippet>[(1, 4), (2, 5), (3, 6)]
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>4475098</id><snippet>strptime(3)</snippet></ROW><ROW><id>4475098</id><snippet>   %I     The hour on a 12-hour clock (1-12).

 ...

   %p     The locale’s equivalent of AM or PM.  (Note: there may be none.)
</snippet></ROW><ROW><id>4475931</id><snippet>f1 = File.readlines('file1.txt')
f2 = File.readlines('file2.txt')

File.open('file3.txt','w') do |output_file|

    f1.zip(f2) do |a,b|
        output_file.puts a.sub('/article/','/article/'+b)
    end

end
</snippet></ROW><ROW><id>4475931</id><snippet>f1.zip(f2,f3,...) do |a,b,c,...|</snippet></ROW><ROW><id>4475933</id><snippet>cur.execute(
    "UPDATE posts SET html = ? WHERE id = ?", (html ,temp[i][1]))
</snippet></ROW><ROW><id>4475933</id><snippet>html</snippet></ROW><ROW><id>4475933</id><snippet>string</snippet></ROW><ROW><id>4475933</id><snippet>response=urllib2.urlopen(str(temp[i][4]))
</snippet></ROW><ROW><id>4475933</id><snippet>content_type=response.headers.getheader('Content-Type')
print(content_type)
</snippet></ROW><ROW><id>4475933</id><snippet>'text/html; charset=utf-8'
</snippet></ROW><ROW><id>4475933</id><snippet>html</snippet></ROW><ROW><id>4475933</id><snippet>utf-8</snippet></ROW><ROW><id>4475933</id><snippet>html = response.read().decode('utf-8')
</snippet></ROW><ROW><id>4475933</id><snippet>html</snippet></ROW><ROW><id>4475933</id><snippet>ProgrammingError</snippet></ROW><ROW><id>4475946</id><snippet>findAll()</snippet></ROW><ROW><id>4475946</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>4475946</id><snippet>href</snippet></ROW><ROW><id>4476266</id><snippet>appscript</snippet></ROW><ROW><id>4476266</id><snippet>MacPorts</snippet></ROW><ROW><id>4476266</id><snippet>Fink</snippet></ROW><ROW><id>4476266</id><snippet>HomeBrew</snippet></ROW><ROW><id>4476389</id><snippet>&gt;&gt;&gt; from httplib2 import Http
&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; h = Http()
&gt;&gt;&gt; data = dict(name="Joe", comment="A test comment")
&gt;&gt;&gt; resp, content = h.request("http://bitworking.org/news/223/Meet-Ares", "POST", urlencode(data))
&gt;&gt;&gt; resp
{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',
 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', 
 'content-type': 'text/html'}
</snippet></ROW><ROW><id>4476530</id><snippet>__builtin__.__import__</snippet></ROW><ROW><id>4476530</id><snippet>try:
    from mercurial import demandimport; demandimport.enable()
except ImportError:
    import sys
    sys.stderr.write("abort: couldn't find mercurial libraries in [%s]\n" %
                     ' '.join(sys.path))
    sys.stderr.write("(check your install and PYTHONPATH)\n")
    sys.exit(-1)
</snippet></ROW><ROW><id>4476530</id><snippet>pass</snippet></ROW><ROW><id>4476709</id><snippet>addheaders</snippet></ROW><ROW><id>4476709</id><snippet>set_handle_robots</snippet></ROW><ROW><id>4476709</id><snippet>from mechanize import Browser, _http
from BeautifulSoup import BeautifulSoup

br = Browser()    
br.set_handle_robots(False)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]

url = "http://www.delicious.com/varunsrin"
page = br.open(url)
html = page.read()

soup = BeautifulSoup(html)
print soup.prettify()
</snippet></ROW><ROW><id>4476722</id><snippet>authenticate</snippet></ROW><ROW><id>4476722</id><snippet>openid_key</snippet></ROW><ROW><id>4476722</id><snippet>provider</snippet></ROW><ROW><id>4476722</id><snippet>grep -r "openid" django</snippet></ROW><ROW><id>4476722</id><snippet> class OpenIdBackend:
    def authenticate(self, openid_key, request, provider, user=None):
        try:
            assoc = UserAssociation.objects.get(openid_key=openid_key)
            return assoc.user
        #.... 
</snippet></ROW><ROW><id>4476722</id><snippet>authenticate</snippet></ROW><ROW><id>4476836</id><snippet>$ cat .hgsub
greenlet = [svn]http://codespeak.net/svn/greenlet/trunk/c
testrunner = [svn]http://codespeak.net/svn/pypy/build/testrunner
lib_pypy/pyrepl = [svn]http://codespeak.net/svn/pyrepl/trunk/pyrepl/pyrepl
lib_pypy/sqlite3 = [svn]http://codespeak.net/svn/pypy/pysqlite2
</snippet></ROW><ROW><id>4476836</id><snippet>svn</snippet></ROW><ROW><id>4476865</id><snippet>pywin32-214.win32-py2.6.exe</snippet></ROW><ROW><id>4476897</id><snippet>prime_factorize(n)</snippet></ROW><ROW><id>4476897</id><snippet>if n &lt; 2 or not isinstance(n, numbers.Integral):
    raise ValueError("Number to factor can't be less than 2")
else:
    # normal behavior
</snippet></ROW><ROW><id>4476897</id><snippet>try...except</snippet></ROW><ROW><id>4477122</id><snippet>from django.views.generic.base import TemplateView
</snippet></ROW><ROW><id>4477174</id><snippet>class Question(models.Model):
    blablabla #your definition

    def count_yes(self):
        return Vote.objects.filter(question__exact = self,
                                   choice__exact = 'Y').count()
</snippet></ROW><ROW><id>4477360</id><snippet>try:
    server_url = self._get_pingback_server(target)
except PingbackClientError, e:
    # If evaluating `e.message` raises an exception then status is not set.
    status = e.message  # &lt;--- here
else:
    try:
        # If either of these two lines fails with something other than
        # xmlrcplib.Fault, then status is not set.
        server = xmlrpclib.ServerProxy(server_url)             # &lt;--- here
        status = server.pingback.ping(self.source, target)     # &lt;--- here
    # If xmlrpclib.Fault is not defined status is not set.
    except xmlrpclib.Fault, e:                                 # &lt;--- here
        status = e
finally:
    db(table.id==id_).update(status=status)
</snippet></ROW><ROW><id>4477360</id><snippet>xmlrpclib.Fault</snippet></ROW><ROW><id>4477524</id><snippet># initial string
input_string = "123245wkjsvd :/'"
# Convert string to list of characters
list_of_chars = list(input_string)
# Sort list
list_of_chars.sort()
# Convert to string
output_string = ''.join(list_of_chars)
</snippet></ROW><ROW><id>4477524</id><snippet>print ''.join(sorted("123245wkjsvd :/'"))
</snippet></ROW><ROW><id>4477529</id><snippet>from account.urls import urlpatterns as accounts_urlpatterns
from django_authopenid.urls import urlpatterns as authopenid_urlpatterns

urlpatterns = patterns("")
urlpatterns += accounts_urlpatterns
urlpatterns += authopenid_urlpatterns
</snippet></ROW><ROW><id>4477582</id><snippet>class someForm(forms.Form):
    afield = CharField()

    def clean(self, **kwargs):
        cleaned_data = self.cleaned_data
        afield = cleaned_data.get('afield')
        if 'ip' in kwargs:
            ip = kwargs['ip']
            # ip check block, you migth use your cleaned data in here
        return cleaned_data


some_info = {'afield':123} #you will wish to use post or gt form data instead, but tihs iis for example
form = someForm(some_info) 
if form.is_valid():
    data = form.clean({'ip':request.META['REMOTE_ADDR']}) # you pass a dict with kwargs, which wwill be used in custom clean method
</snippet></ROW><ROW><id>4477774</id><snippet>dic = {'a':1, 'b':2}
dic['keys'] = dic.keys()
return render_to_response('your_template.html', dic)
</snippet></ROW><ROW><id>4477774</id><snippet>{% for variable in keys %}
     {{ variable }}
{% endfor %}
</snippet></ROW><ROW><id>4477856</id><snippet>and</snippet></ROW><ROW><id>4477856</id><snippet>or</snippet></ROW><ROW><id>4477856</id><snippet>True</snippet></ROW><ROW><id>4477856</id><snippet>False</snippet></ROW><ROW><id>4477856</id><snippet>&gt;&gt;&gt; 0 or 42
42
&gt;&gt;&gt; 0 and 42
0
</snippet></ROW><ROW><id>4477856</id><snippet>not</snippet></ROW><ROW><id>4477856</id><snippet>&gt;&gt;&gt; not 0
True
&gt;&gt;&gt; not 42
False
</snippet></ROW><ROW><id>4478037</id><snippet>serializers.serialize("json", [x.object for x in queryset]</snippet></ROW><ROW><id>4478189</id><snippet>for st in Stadion:
    StoreToFile(r'C:\pytest\prod.psr',st)
</snippet></ROW><ROW><id>4478189</id><snippet>StoreToFile(r'C:\pytest\prod.psr', Stadion)
</snippet></ROW><ROW><id>4478189</id><snippet>ReadFromFile()</snippet></ROW><ROW><id>4478189</id><snippet>return True
if Thefile.close()
</snippet></ROW><ROW><id>4478257</id><snippet>installer.py dir [-h] [-v]</snippet></ROW><ROW><id>4478470</id><snippet>con.execute("PRAGMA foreign_keys = ON")</snippet></ROW><ROW><id>4478655</id><snippet>__constant</snippet></ROW><ROW><id>4478655</id><snippet>__global</snippet></ROW><ROW><id>4478655</id><snippet>__constant</snippet></ROW><ROW><id>4479176</id><snippet>class AbstractClass(models.Model):
    created_at=models.DateField("Created at")
    created_by=models.ForeignKey(User, db_column="created_by", related_name="poll_user_created_by")
    updated_at=models.DateTimeField("Updated at")
    updated_by=models.ForeignKey(User, db_column="updated_by", null=True, related_name="poll_user_updated_by")
    class Meta:
        abstract = True
</snippet></ROW><ROW><id>4479176</id><snippet>class Poll(AbstractClass):
    question=models.CharField(max_length=300)
    start_poll_at=models.DateTimeField(null=True)
    end_poll_at=models.DateTimeField(null=True)
    is_active=models.BooleanField(default=True)
</snippet></ROW><ROW><id>4479215</id><snippet># '0' is appended so that swapping values is still possible
items = [item for item in scores] + ['0']

for indx in range(6):
    # don't change the box which triggered the update
    if not indx == indx_in_combo_list:
        # I'm not 100% sure that this next line is correct, but it should be close
        existing_values = [model_item[0] for model_item in combolist[indx].get_model()]

        if existing_values != items:
            # the idea is to clear each list and then repopulate it with the
            # remaining available items
            combo_list[indx].get_model().clear()
            for item in items:
                combo_list[indx].append_text(item)
</snippet></ROW><ROW><id>4479842</id><snippet>import datetime

dt = datetime.datetime(2010, 12, 01)
end = datetime.datetime(2010, 12, 30, 23, 59, 59)
step = datetime.timedelta(seconds=5)

result = []

while dt &lt; end:
    result.append(dt.strftime('%Y-%m-%d %H:%M:%S'))
    dt += step
</snippet></ROW><ROW><id>4479843</id><snippet>class A: pass
class B(object): pass
</snippet></ROW><ROW><id>4479843</id><snippet>&gt; type(A)
&lt;type "classobj"&gt;
&gt; type(B)
&lt;type "type"&gt;
</snippet></ROW><ROW><id>4479843</id><snippet>list</snippet></ROW><ROW><id>4479843</id><snippet>&gt; type(list)
&lt;type "type"&gt;
</snippet></ROW><ROW><id>4479843</id><snippet>class B(object): pass</snippet></ROW><ROW><id>4479843</id><snippet>&gt; c = []
&gt; type(c)
&lt;type "list"&gt;
</snippet></ROW><ROW><id>4479849</id><snippet>X = scipy.fft(x)
Y = scipy.zeros(len(X))
Y[important frequencies] = X[important frequencies]
</snippet></ROW><ROW><id>4479849</id><snippet>z = [x, x]</snippet></ROW><ROW><id>4479849</id><snippet>x</snippet></ROW><ROW><id>4479849</id><snippet>Z[2k] = X[k]</snippet></ROW><ROW><id>4479849</id><snippet>k</snippet></ROW><ROW><id>4479849</id><snippet>Z = scipy.zeros(2*len(X))
Z[::2] = X
</snippet></ROW><ROW><id>4480028</id><snippet>from jinja2 import Template
t = '''{% set name=name or "John Doe" %}Hello {{ name }}'''
template = Template(t)
print template.render(name='Jonnie Doe')
print template.render()
</snippet></ROW><ROW><id>4480028</id><snippet>Hello Jonnie Doe
Hello John Doe
</snippet></ROW><ROW><id>4480105</id><snippet>django-reversion</snippet></ROW><ROW><id>4480105</id><snippet>Version</snippet></ROW><ROW><id>4480105</id><snippet>Version</snippet></ROW><ROW><id>4480105</id><snippet>Revision</snippet></ROW><ROW><id>4480105</id><snippet>@revision.create_on_success</snippet></ROW><ROW><id>4480105</id><snippet>@revision.create_on_success
def import_csv(request, csv):
    # Old versions of all objects save()d here will
    # belong to single revision.

def undo_last_csv_import(request):
    # First, get latest revision saved by this user.
    # (Assuming you create revisions only when user imports a CSV
    # and do not version control other data.)
    revision = Revision.objects.filter(user=request.user)\
        .order_by('-date_created')[0]
    # And revert it, delete=True means we want to delete
    # any newly added records as well
    revision.revert(delete=True)
</snippet></ROW><ROW><id>4480105</id><snippet>def undo_last_csv_import(request):
    some_record = Record.objects.by_user(request.user).from_the_last_import()[0]
    latest_saved_version_of_some_record = Version.objects.get_for_date(
        some_record,
        datetime.now(), # The latest saved Version at the moment.
        )
    # Revert all versions that belong to the same revision
    # as the version we got above.
    latest_saved_version_of_some_record.revision.revert()
</snippet></ROW><ROW><id>4480105</id><snippet>django-reversion</snippet></ROW><ROW><id>4480105</id><snippet>Version.objects.get_for_date(your_model, date)</snippet></ROW><ROW><id>4480124</id><snippet>ColorBar</snippet></ROW><ROW><id>4480124</id><snippet>color_bar.set_alpha(1)
color_bar.draw_all()
</snippet></ROW><ROW><id>4480202</id><snippet>nargs='?'</snippet></ROW><ROW><id>4480202</id><snippet>parser.add_argument('dir', nargs='?', default=os.getcwd())
</snippet></ROW><ROW><id>4480202</id><snippet>&gt;&gt;&gt; import os, argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-v', action='store_true')
_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.add_argument('dir', nargs='?', default=os.getcwd())
_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args('somedir -v'.split())
Namespace(dir='somedir', v=True)
&gt;&gt;&gt; parser.parse_args('-v'.split())
Namespace(dir='/home/vinay', v=True)
&gt;&gt;&gt; parser.parse_args(''.split())
Namespace(dir='/home/vinay', v=False)
&gt;&gt;&gt; parser.parse_args(['somedir'])
Namespace(dir='somedir', v=False)
&gt;&gt;&gt; parser.parse_args('somedir -h -v'.split())
usage: [-h] [-v] [dir]

positional arguments:
  dir

optional arguments:
  -h, --help  show this help message and exit
  -v
</snippet></ROW><ROW><id>4480387</id><snippet>strace</snippet></ROW><ROW><id>4480387</id><snippet>stat()</snippet></ROW><ROW><id>4480387</id><snippet>getgroups()</snippet></ROW><ROW><id>4480387</id><snippet>stat()</snippet></ROW><ROW><id>4480387</id><snippet>getgroups()</snippet></ROW><ROW><id>4480387</id><snippet>os</snippet></ROW><ROW><id>4480387</id><snippet>def effectively_readable(path):
    import os, stat

    uid = os.getuid()
    euid = os.geteuid()
    gid = os.getgid()
    egid = os.getegid()

    # This is probably true most of the time, so just let os.access()
    # handle it.  Avoids potential bugs in the rest of this function.
    if uid == euid and gid == egid:
        return os.access(path, os.R_OK)

    st = os.stat(path)

    # This may be wrong depending on the semantics of your OS.
    # i.e. if the file is -------r--, does the owner have access or not?
    if st.st_uid == euid:
        return st.st_mode &amp; stat.S_IRUSR != 0

    # See comment for UID check above.
    groups = os.getgroups()
    if st.st_gid == egid or st.st_gid in groups:
        return st.st_mode &amp; stat.S_IRGRP != 0

    return st.st_mode &amp; stat.S_IROTH != 0
</snippet></ROW><ROW><id>4480900</id><snippet>urllib</snippet></ROW><ROW><id>4480900</id><snippet>encode()</snippet></ROW><ROW><id>4480900</id><snippet>urlencode()</snippet></ROW><ROW><id>4480900</id><snippet>urllib.urlencode(params)
</snippet></ROW><ROW><id>4481200</id><snippet>usb.py</snippet></ROW><ROW><id>4481200</id><snippet>usb</snippet></ROW><ROW><id>4481341</id><snippet>a and b or c</snippet></ROW><ROW><id>4481341</id><snippet>(a ? b : c)</snippet></ROW><ROW><id>4481440</id><snippet>vote</snippet></ROW><ROW><id>4481440</id><snippet>   vote = BeautifulSoup(html)
   vote = bookmark.findAll('span', attrs={'class': 'delNavCount'})
</snippet></ROW><ROW><id>4481731</id><snippet>join</snippet></ROW><ROW><id>4481731</id><snippet>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; ''.join(a)
'abcd'
</snippet></ROW><ROW><id>4481741</id><snippet>import OneHelper</snippet></ROW><ROW><id>4481741</id><snippet>dir(One)</snippet></ROW><ROW><id>4481741</id><snippet>OneHelper</snippet></ROW><ROW><id>4481741</id><snippet>One.OneHelper</snippet></ROW><ROW><id>4481741</id><snippet>self.OneHelper</snippet></ROW><ROW><id>4481741</id><snippet>One.OneHelper</snippet></ROW><ROW><id>4481861</id><snippet>class Stopwatch(object):
    def __init__(self, callback):
        self._stop = False
        self.callback = callback

    @property
    def stop(self): return self._stop

    @stop.setter
    def stop(self, value):
        self._stop = value
        if value: self.callback()
</snippet></ROW><ROW><id>4481902</id><snippet>&gt;&gt;&gt; import Tkinter
&gt;&gt;&gt; w = Tkinter.Tk()
&gt;&gt;&gt; w.wm_state('iconic')
</snippet></ROW><ROW><id>4481902</id><snippet>w.iconify()
</snippet></ROW><ROW><id>4482067</id><snippet>mock.patch</snippet></ROW><ROW><id>4482067</id><snippet>datetime.date.today</snippet></ROW><ROW><id>4482067</id><snippet>Mock</snippet></ROW><ROW><id>4482067</id><snippet>today()</snippet></ROW><ROW><id>4482067</id><snippet>datetime.date.today</snippet></ROW><ROW><id>4482067</id><snippet>@mock.patch('datetime.date.today')
def test():
    datetime.date.today.return_value = date(2010, 1, 1)
    print datetime.date.today()
</snippet></ROW><ROW><id>4482067</id><snippet>&gt;&gt;&gt; test()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "build/bdist.macosx-10.6-universal/egg/mock.py", line 557, in patched
  File "build/bdist.macosx-10.6-universal/egg/mock.py", line 620, in __enter__
TypeError: can't set attributes of built-in/extension type 'datetime.date'
</snippet></ROW><ROW><id>4482067</id><snippet>import datetime
class NewDate(datetime.date):
    @classmethod
    def today(cls):
        return cls(2010, 1, 1)
datetime.date = NewDate
</snippet></ROW><ROW><id>4482067</id><snippet>&gt;&gt;&gt; datetime.date.today()
NewDate(2010, 1, 1)
</snippet></ROW><ROW><id>4482474</id><snippet># IN YOUR VIEW 
# pass request.user as a keyword argument to the form
myform = MyForm(user=request.user)


# IN YOUR forms.py
# at the top:

from myapp.foo.bar import ok_to_post # some abstracted utility you write to rate-limit posting 

# and in your particular Form definition

class MyForm(forms.Form)

   ... your fields here ...

   def __init__(self, *args, **kwargs):
      self.user = kwargs.pop('user') #cache the user object you pass in
      super(MyForm, self).__init__(*args, **kwargs) #and carry on to init the form


   def clean(self):
      # test the rate limit by passing in the cached user object

      if not ok_to_post(self.user): #use your throttling utility here
          raise forms.ValidationError("You cannot post more than once every x minutes")

      return self.cleaned_data #never forget this! ;o)
</snippet></ROW><ROW><id>4482474</id><snippet>ValidationError</snippet></ROW><ROW><id>4482474</id><snippet>clean()</snippet></ROW><ROW><id>4482474</id><snippet>myform.non_field_errors</snippet></ROW><ROW><id>4482474</id><snippet>{{form.non_field_errors}}</snippet></ROW><ROW><id>4482479</id><snippet>for ch in s:
    if ch not in sort_fmt:  # &lt;--- "in" requires a linear search. O(n*m)
        sorted_str += ch    # &lt;--- Ouch! Concatenation! O(n^2)
</snippet></ROW><ROW><id>4482479</id><snippet>in</snippet></ROW><ROW><id>4482479</id><snippet>collections.Counter</snippet></ROW><ROW><id>4482479</id><snippet>Counter</snippet></ROW><ROW><id>4482479</id><snippet>defaultdict</snippet></ROW><ROW><id>4482479</id><snippet>from collections import Counter

def sort_str(s, sort_fmt):
    counter = Counter(s)
    d = set(sort_fmt)
    result = ''.join(c * counter[c] for c in sort_fmt)
    result += ''.join(c for c in s if c not in d)
    return result

if __name__ == '__main__':
    print sort_str('abdcdfs', 'dacg')
</snippet></ROW><ROW><id>4482479</id><snippet>&gt;&gt;&gt; d = dict((v,k) for (k,v) in enumerate('dacg'))
&gt;&gt;&gt; sorted('abdcdfs', key = lambda c:d.get(c, len(d)))
['d', 'd', 'a', 'c', 'b', 'f', 's']
</snippet></ROW><ROW><id>4482598</id><snippet>logging</snippet></ROW><ROW><id>4482598</id><snippet>logging.py</snippet></ROW><ROW><id>4482598</id><snippet>print logging.__file__</snippet></ROW><ROW><id>4482694</id><snippet>__init__</snippet></ROW><ROW><id>4482694</id><snippet>def __init__(self,name,location,cpu,mem,obj):
</snippet></ROW><ROW><id>4482694</id><snippet>WS.__init__(obj,name,location,cpu,mem)
</snippet></ROW><ROW><id>4482694</id><snippet>self</snippet></ROW><ROW><id>4482694</id><snippet>self</snippet></ROW><ROW><id>4482694</id><snippet>WS(obj,name,location,cpu,mem)
</snippet></ROW><ROW><id>4482705</id><snippet>&gt;&gt;&gt; class ABC(object):
...     C1 = 1
...  
&gt;&gt;&gt; class DEF(object):
...     def __init__(self, v=ABC.C1):
...         self.v = v
...  
&gt;&gt;&gt; a = ABC()
&gt;&gt;&gt; d = DEF()
&gt;&gt;&gt; d.v
1
</snippet></ROW><ROW><id>4482804</id><snippet>/site/
    __init__.py
    manage.py
    settings.py
    urls.py
    /apps/
        __init__.py
        /appA/
            __init__.py
        /appB/
            __init__.py
    /lib/
        __init__.py
        /django-lib/
            __init__.py
        /shared-lib/
            __init__.py
</snippet></ROW><ROW><id>4482804</id><snippet>import sys
sys.path.append('/path/to/site/')
</snippet></ROW><ROW><id>4482804</id><snippet>__init__.py</snippet></ROW><ROW><id>4483013</id><snippet>__import__</snippet></ROW><ROW><id>4483084</id><snippet>entryconfig</snippet></ROW><ROW><id>4483084</id><snippet>self.B3Me.entryconfig("Hello", label="Goodbye!")
</snippet></ROW><ROW><id>4483183</id><snippet>def URLRequest(url, params, method="POST"):
    res, content = Http().request(url, method, urllib.urlencode(params))
    return {'res':res, 'content':content}
</snippet></ROW><ROW><id>4483511</id><snippet>calendar.day_name</snippet></ROW><ROW><id>4483511</id><snippet>range</snippet></ROW><ROW><id>4483511</id><snippet>day_indexes = {name:i for i, name in enumerate(calendar.day_name)}
def weekdays_consecutive(days):
    indexes = [day_indexes[d] for d in days]
    expected = range(indexes[0], indexes[-1] + 1)
    return indexes == expected
</snippet></ROW><ROW><id>4483511</id><snippet>day_indexes = dict((name, i) for i, name in enumerate(calendar.day_name))
</snippet></ROW><ROW><id>4483511</id><snippet>day_indexes = ... calendar.day_name[:-2] ...
</snippet></ROW><ROW><id>4483511</id><snippet>def weekdays_consecutive(days):
    indexes = [day_indexes[d] for d in days]
    return all(indexes[i + 1] % 7 == (indexes[i] + 1) % 7
               for i in range(len(indexes) - 1))
</snippet></ROW><ROW><id>4483511</id><snippet>def weekdays_to_string(days):
    # convert days to indexes
    day_indexes = {name:i for i, name in enumerate(calendar.day_name)}
    indexes = [day_indexes[d] for d in days]

    # find the places where sequential days end
    ends = [i + 1
            for i in range(len(indexes))
            if (indexes[(i + 1) % len(indexes)]) % 7 !=
               (indexes[(i) % len(indexes)] + 1) % 7]

    # wrap the days if necessary to get longest possible sequences
    split = ends[-1]
    if split != len(days):
        days = days[split:] + days[:split]
        ends = [len(days) - split + end for end in ends]

    # group the days in sequential spans
    spans = [days[begin:end] for begin, end in zip([0] + ends, ends)]

    # format as requested, with "to", "and", commas, etc.
    words = []
    for span in spans:
        if len(span) &lt; 3:
            words.extend(span)
        else:
            words.append("%s to %s" % (span[0], span[-1]))
    if len(days) == 1:
        return words[0]
    elif len(days) == 2:
        return "%s and %s" % tuple(words)
    else:
        return ", ".join(words)
</snippet></ROW><ROW><id>4483511</id><snippet>if/elif/else</snippet></ROW><ROW><id>4483511</id><snippet>    if len(words) == 1:
        return words[0]
    else:
        return "%s and %s" % (", ".join(words[:-1]), words[-1])
</snippet></ROW><ROW><id>4483581</id><snippet>from twisted.web.server import Site  # Site is a server factory for HTTP
from twisted.web.resource import Resource
from twisted.internet import reactor

class PrintPostBody(Resource):  # Resources are what Site knows how to deal with
    isLeaf = True  # Disable child lookup

    def render_POST(self, request):  # Define a handler for POST requests
        print request.content.read()  # Get the request body from this file-like object
        return "" # Define the response body as empty

reactor.listenTCP(80, Site(PrintPostBody()))
reactor.run()
</snippet></ROW><ROW><id>4483705</id><snippet>import locale

locales=('en_AU.utf8', 'en_BW.utf8', 'en_CA.utf8',
    'en_DK.utf8', 'en_GB.utf8', 'en_HK.utf8', 'en_IE.utf8', 'en_IN', 'en_NG',
    'en_PH.utf8', 'en_US.utf8', 'en_ZA.utf8',
    'en_ZW.utf8', 'ja_JP.utf8')
for l in locales:
    locale.setlocale(locale.LC_ALL, l)
    conv=locale.localeconv()
    print('{ics} ==&gt; {s}'.format(ics=conv['int_curr_symbol'],
                                 s=conv['currency_symbol']))
</snippet></ROW><ROW><id>4483705</id><snippet>AUD  ==&gt; $
BWP  ==&gt; Pu
CAD  ==&gt; $
DKK  ==&gt; kr
GBP  ==&gt; £
HKD  ==&gt; HK$
EUR  ==&gt; €
INR  ==&gt; ₨
NGN  ==&gt; ₦
PHP  ==&gt; Php
USD  ==&gt; $
ZAR  ==&gt; R
ZWD  ==&gt; Z$
JPY  ==&gt; ￥
</snippet></ROW><ROW><id>4483705</id><snippet>language-pack-*</snippet></ROW><ROW><id>4483705</id><snippet>en_GB.utf8</snippet></ROW><ROW><id>4483705</id><snippet>locale -a
</snippet></ROW><ROW><id>4483705</id><snippet>subprocess</snippet></ROW><ROW><id>4483758</id><snippet>class AuditBase(models.Model):
    created_at = models.DateTimeField("Created at", auto_now_add=True)
    created_by = models.IntegerField(required=True)
    updated_at = models.DateTimeField("Updated at", auto_now=True)
    updated_by = models.IntegerField(required=True)

    class Meta:
        abstract = True

@property
def creator(self):
    return User.objects.get(id=self.created_by) 

@property
def last_editor(self):
    return User.objects.get(id=self.updated_by)

def save(self, *args, **kwargs):
    #track the creator/last editor via an optional kwarg
    active_user = self.kwargs.get('user')
    if active_user:
       self.updated_by = active_user
    if active_user and not self.created_by:
       self.created_by = active_user

    return super(AuditBase, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>4484147</id><snippet>insertItem</snippet></ROW><ROW><id>4484147</id><snippet>self.command.setCurrentIndex(1)</snippet></ROW><ROW><id>4484147</id><snippet>self.option.setCurrentIndex(1)</snippet></ROW><ROW><id>4484147</id><snippet>currentIndex()</snippet></ROW><ROW><id>4484147</id><snippet>itemData()</snippet></ROW><ROW><id>4484261</id><snippet>print("Concat", "String")
</snippet></ROW><ROW><id>4484261</id><snippet>tuple</snippet></ROW><ROW><id>4484261</id><snippet>,</snippet></ROW><ROW><id>4484261</id><snippet>&gt;&gt;&gt; t = ('Let', 'Us', 'Test')
&gt;&gt;&gt; type(t)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>4484312</id><snippet>gc</snippet></ROW><ROW><id>4484312</id><snippet>collect()</snippet></ROW><ROW><id>4484330</id><snippet>class Datacenter:
    def __init__(self,name,location,cpu,mem):
        self.name=name
        self.location=location
        self.cpu=cpu
        self.mem=mem

class Workstation:
    def __init__(self,name,location,cpu,mem,datacenter):
        self.name=name
        self.location=location
        self.cpu=cpu
        self.mem=mem
        self.datacenter=datacenter

class Computer:
    def __init__(self,name,location,cpu,mem,workstation):
        # This line does nothing:
        self.name=name
        self.location=location
        self.cpu=cpu
        self.mem=mem
        self.workstation=workstation
</snippet></ROW><ROW><id>4484330</id><snippet>obj.getname()</snippet></ROW><ROW><id>4484330</id><snippet>class Datacenter:
    def __init__(self,name,location):
        self.name=name
        self.location=location

class Workstation:
    def __init__(self,name,location,datacenter):
        self.name=name
        self.location=location
        self.datacenter=datacenter

class Computer:
    def __init__(self,name,cpu,mem,workstation):
        # This line does nothing:
        self.name=name
        self.cpu=cpu
        self.mem=mem
        self.workstation=workstation

   def location(self):
       return self.workstation.location

   def datacenter(self):
       return self.workstation.datacenter
</snippet></ROW><ROW><id>4484360</id><snippet>xml = minidom.parse("test.xml")
with codecs.open("out.xml", "w", "utf-8") as out:
    xml.writexml(out)
</snippet></ROW><ROW><id>4484360</id><snippet>with codecs.open("test.xml", "r", "utf-8") as inp:
    xml = minidom.parseString(inp.read().encode("utf-8"))
with codecs.open("out.xml", "w", "utf-8") as out:
    xml.writexml(out)
</snippet></ROW><ROW><id>4484360</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import codecs
import xml.dom.minidom as minidom

xml = minidom.parseString(u"&lt;ru&gt;Тест&lt;/ru&gt;".encode("utf-8"))
with codecs.open("out.xml", "w", "utf-8") as out:
    xml.writexml(out)
</snippet></ROW><ROW><id>4484510</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2

page = urllib2.urlopen('http://www.example.com')
soup = BeautifulSoup(page.read())
print soup.find('head')
</snippet></ROW><ROW><id>4484510</id><snippet>&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;title&gt;Example Web Page&lt;/title&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>4484730</id><snippet>'None'</snippet></ROW><ROW><id>4484730</id><snippet>dict((k, 'updated') for k, v in d.iteritems() if v != 'None')
</snippet></ROW><ROW><id>4484730</id><snippet>None</snippet></ROW><ROW><id>4484730</id><snippet>dict((k, 'updated') for k, v in d.iteritems() if v is None)
</snippet></ROW><ROW><id>4484743</id><snippet>n</snippet></ROW><ROW><id>4484743</id><snippet>n</snippet></ROW><ROW><id>4484743</id><snippet>n[previous:next]</snippet></ROW><ROW><id>4484743</id><snippet>''</snippet></ROW><ROW><id>4484743</id><snippet>invalid literal for int() with base 10: ''</snippet></ROW><ROW><id>4484743</id><snippet>&gt;&gt;&gt; int('')
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: ''
</snippet></ROW><ROW><id>4484774</id><snippet>result = freebase.sandbox.mqlread(query, extended=True)
</snippet></ROW><ROW><id>4484846</id><snippet>result["\/common\/topic\/weblink"][0].url
</snippet></ROW><ROW><id>4484946</id><snippet>def test2():
    """Test with a subfunction."""
    exec 'print "hi from test2"' in globals(), locals()
    def subfunction():
        return True
</snippet></ROW><ROW><id>4484992</id><snippet>raw</snippet></ROW><ROW><id>4484992</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(raw)

for x in soup.findAll("html:td"):
   if x.string == "Equity share capital":
       VALS = [y.string for y in x.parent.findAll() if y.has_key("class")]

print VALS
</snippet></ROW><ROW><id>4484992</id><snippet>[u'30.36', u'17.17', u'15.22', u'9.82', u'9.82']
</snippet></ROW><ROW><id>4485121</id><snippet>from urllib.request import urlopen
html = urlopen("http://www.stackoverflow.com/").read().decode('utf-8')
print(html)
</snippet></ROW><ROW><id>4485159</id><snippet>xmldoc.getElementsByTagName('myTagName')[0].firstChild.nodeValue
</snippet></ROW><ROW><id>4485198</id><snippet>text = re.sub(r"([" + re.escape(string.punctuation) + r"])\1+", r"\1", text)
</snippet></ROW><ROW><id>4485198</id><snippet>re.escape()</snippet></ROW><ROW><id>4485198</id><snippet>\1</snippet></ROW><ROW><id>4485198</id><snippet>()</snippet></ROW><ROW><id>4485208</id><snippet>d1</snippet></ROW><ROW><id>4485208</id><snippet>d2 = {'edges' : map(lambda x: x.getDict(), d1['edges'])}
</snippet></ROW><ROW><id>4485208</id><snippet>d2 = {'edges' : [i.getDict() for i in d1['edges']]}
</snippet></ROW><ROW><id>4485254</id><snippet>a == b</snippet></ROW><ROW><id>4485254</id><snippet>a != b</snippet></ROW><ROW><id>4485254</id><snippet>__eq__</snippet></ROW><ROW><id>4485254</id><snippet>__ne__</snippet></ROW><ROW><id>4485254</id><snippet>a is b</snippet></ROW><ROW><id>4485254</id><snippet>a is not b</snippet></ROW><ROW><id>4485254</id><snippet>id(a) == id(b)</snippet></ROW><ROW><id>4485290</id><snippet>... ,"-Oqv","","-Ln", ...
            ^^
</snippet></ROW><ROW><id>4485290</id><snippet>"192.168.1.1 1.3.6.1.2.1.2.2.1.10.7"
</snippet></ROW><ROW><id>4485290</id><snippet>"192.168.1.1", "1.3.6.1.2.1.2.2.1.10.7"
</snippet></ROW><ROW><id>4485290</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4485290</id><snippet>snmpget -v 1 -c public -Oqv -Ln '192.168.1.1 1.3.6.1.2.1.2.2.1.10.7'
</snippet></ROW><ROW><id>4485590</id><snippet>&gt;&gt;&gt; 10
10
&gt;&gt;&gt; 0x10
16
&gt;&gt;&gt; 0o10
8
&gt;&gt;&gt; 0b10
2
&gt;&gt;&gt; 010
  File "&lt;stdin&gt;", line 1
    010
      ^
SyntaxError: invalid token
</snippet></ROW><ROW><id>4485617</id><snippet>if self.changed_single_score_locked:
    return
else:
    self.changed_single_score_locked = True
</snippet></ROW><ROW><id>4485617</id><snippet>self.changed_single_score_locked = False
</snippet></ROW><ROW><id>4485736</id><snippet>import ctypes
MessageBox = ctypes.windll.user32.MessageBoxA
MessageBox(None, 'Hello', 'Window title', 0)
</snippet></ROW><ROW><id>4485736</id><snippet>MessageBoxW</snippet></ROW><ROW><id>4485736</id><snippet>MessageBoxA</snippet></ROW><ROW><id>4485849</id><snippet>&gt;&gt;&gt; a = numpy.array([2, 0, 1.5, -3])
&gt;&gt;&gt; b = numpy.ma.log(a)
&gt;&gt;&gt; b
masked_array(data = [0.69314718056 -- 0.405465108108 --],
             mask = [False  True False  True],
       fill_value = 1e+20)

&gt;&gt;&gt; b.sum()
1.0986122886681096
</snippet></ROW><ROW><id>4486483</id><snippet>cron</snippet></ROW><ROW><id>4486483</id><snippet>script_name.py</snippet></ROW><ROW><id>4486483</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>4486483</id><snippet>PATH</snippet></ROW><ROW><id>4486483</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>4486483</id><snippet>/opt/local/bin/</snippet></ROW><ROW><id>4486483</id><snippet>PATH</snippet></ROW><ROW><id>4486483</id><snippet>script_name.py</snippet></ROW><ROW><id>4486551</id><snippet>{{ result.mylink.0.url }}</snippet></ROW><ROW><id>4486616</id><snippet>&gt;&gt;&gt; def mydeco(count):
...     def multipass(fn):
...         def caller(*args, **kw):
...             return [fn(*args, **kw) for x in range(count)]
...         return caller
...     return multipass
... 
&gt;&gt;&gt; @mydeco(5)
... def printer(text):
...     print(text)
... 
&gt;&gt;&gt; printer("Yabbadabbadoo!")
Yabbadabbadoo!
Yabbadabbadoo!
Yabbadabbadoo!
Yabbadabbadoo!
Yabbadabbadoo!
[None, None, None, None, None]
</snippet></ROW><ROW><id>4486631</id><snippet>{% ifchanged %}
    {% if some_time &gt; result.time %}
        &lt;hr /&gt;
    {% endif %}
{% endifchanged %}
</snippet></ROW><ROW><id>4486661</id><snippet>pickle.PicklingError</snippet></ROW><ROW><id>4486661</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.dumps(type(None))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "C:\Python27\lib\pickle.py", line 224, in dump
    self.save(obj)
  File "C:\Python27\lib\pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "C:\Python27\lib\pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle &lt;type 'NoneType'&gt;: it's not found as __builtin__.NoneType
&gt;&gt;&gt; try:
...     pickle.dumps(type(None))
... except pickle.PicklingError:
...     print 'Oops.'
...
Oops.
</snippet></ROW><ROW><id>4487068</id><snippet>list</snippet></ROW><ROW><id>4487068</id><snippet>vector&lt;int&gt;</snippet></ROW><ROW><id>4487068</id><snippet>data = ('John','Los Angeles, CA',[1,2,3,4,5,6])
</snippet></ROW><ROW><id>4487068</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Data = collections.namedtuple('Data','name location times')
&gt;&gt;&gt; data = Data('John','Los Angeles',[1,2,3,4])
&gt;&gt;&gt; data.name
'John'
&gt;&gt;&gt; data.location
'Los Angeles'
&gt;&gt;&gt; data.times
[1, 2, 3, 4]
&gt;&gt;&gt; data.times[0]
1
</snippet></ROW><ROW><id>4487509</id><snippet>{% include "header.html" %}</snippet></ROW><ROW><id>4487509</id><snippet>TemplateDoesNotExist home.html</snippet></ROW><ROW><id>4487520</id><snippet>unicode-escape</snippet></ROW><ROW><id>4487520</id><snippet>&gt;&gt;&gt; print '\\u4f53\\u91cd\\u8a08'.decode('unicode-escape')
体重計
</snippet></ROW><ROW><id>4487520</id><snippet>&gt;&gt;&gt; print json.loads('"\\u4f53\\u91cd\\u8a08"')
体重計
</snippet></ROW><ROW><id>4487600</id><snippet>ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>4487600</id><snippet>plot_surface</snippet></ROW><ROW><id>4487600</id><snippet>X</snippet></ROW><ROW><id>4487600</id><snippet>Y</snippet></ROW><ROW><id>4487600</id><snippet>Z</snippet></ROW><ROW><id>4487600</id><snippet>ValueError</snippet></ROW><ROW><id>4487949</id><snippet>s = ''.join('%s: %s &lt;/br&gt;' % 
               (a,getattr(user, a)) for a in dir(user) if '__' not in a
           )
</snippet></ROW><ROW><id>4488596</id><snippet>f = open(filename, 'w')
f.write("hello\talex")
</snippet></ROW><ROW><id>4488698</id><snippet>self.</snippet></ROW><ROW><id>4488698</id><snippet>SubElement</snippet></ROW><ROW><id>4488698</id><snippet>from lxml import etree

# derive from 'object' if Python 2.X (it is default in Python 3.X)
class XmlReportGenerator(object):

    def __init__(self):
        # clearer to init instance variables here.
        self.root = etree.Element('results')
        self.doc = etree.ElementTree(self.root)

    def AddMatchRow(self,teamA,teamB, score):
        # Need self.root here
        pageElement = etree.SubElement(self.root,'Flight')
        # Added data elements (or did you want attributes?)
        etree.SubElement(pageElement,'teamA').text = teamA
        etree.SubElement(pageElement,'teamB').text = teamB
        etree.SubElement(pageElement,'score').text = score

    def Save(self,path = None):
        outFile = open('Matches.xml', 'w')
        # Need self.doc here
        self.doc.write(outFile)

# This code will run if the script is executed directly,
# but will be skipped if the script is imported by another script.
if __name__ == '__main__':
    docs = XmlReportGenerator()
    docs.AddMatchRow('FC Barcelona','Madryt','5:0')
    docs.Save()
</snippet></ROW><ROW><id>4488999</id><snippet>contents = str(notices)</snippet></ROW><ROW><id>4488999</id><snippet>contents = notices.renderContents()</snippet></ROW><ROW><id>4489794</id><snippet>import re
re.split(r'&lt;(br\/|strong)&gt;wwww', mystr)[::2]
</snippet></ROW><ROW><id>4490055</id><snippet>class MyBasePage(webapp.RequestHandler):
    def __init__(self):
        # common setup/init stuff here, 
        # omitted for this discussion

    def Setup(self):
        # request handling setup code needed in both GET/POST methods, like
        # checking for user login, getting session cookies, etc.
        # omitted for this discussion

    def get(self, *args):
        self.Setup()
        # call the derived class' 'DoGet' method that actually has 
        # the logic inside it
        self.DoGet(*args)

    def post(self, *args):
        self.Setup()
        # call the derived class' 'DoPost' method 
        self.DoPost(*args)

    def DoGet(self, *args):
        ''' derived classes override this method and 
            put all of their GET logic inside. Base class does nothing.'''
        pass

    def DoPost(self, *args):
        ''' derived classes override this method and 
            put all of their POST logic inside. Base class does nothing.'''
        pass
</snippet></ROW><ROW><id>4490055</id><snippet>DoGet()</snippet></ROW><ROW><id>4490055</id><snippet>DoPost()</snippet></ROW><ROW><id>4490056</id><snippet>val</snippet></ROW><ROW><id>4490056</id><snippet>value</snippet></ROW><ROW><id>4490056</id><snippet>def __str__(self):
    return repr(self.val) # &lt;--- not self.value
</snippet></ROW><ROW><id>4490056</id><snippet>str.format</snippet></ROW><ROW><id>4490056</id><snippet>def __str__(self):
    return "Hello: {0}".format(self.val)
</snippet></ROW><ROW><id>4490056</id><snippet>def __str__(self):
    return "val1 = {}, val2 = {}".format(self.val1, self.val2)
</snippet></ROW><ROW><id>4490128</id><snippet>class Base_Metaclass(type):
    def __new__(meta, classname, bases, class_dict):
        new_type = type.__new__(meta, classname, bases, class_dict)
        if not (new_type.NOMINATOR % new_type.DENOMINATOR) == 0:
            raise Exception("Invalid subclass created - validation failed")
        return new_type

# have Base and all its descendants be enforced:
class Base(object):
    __metaclass__ = Base_Metaclass
    # I must pass the validation myself, no None's anymore...
    NOMINATOR = 1
    DENOMINATOR = 1
</snippet></ROW><ROW><id>4490902</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>4491549</id><snippet>import numpy
a = numpy.arange(10)
# [0 1 2 3 4 5 6 7 8 9]
## Replace a[2:7] with length-2 noise:
insert = -1 * numpy.ones((2))
new = slice(2, 4)
old = slice(2, 7)
#Just to indicate what we'll be replacing:
a[old] = 0
# [0 1 0 0 0 0 0 7 8 9]
a[new] = insert
# [0 1 -1 -1 0 0 0 7 8 9]
#Shift the remaining data over:
a[new.stop:(new.stop - old.stop)] = a[old.stop:]
# [0 1 -1 -1 7 8 9 7 8 9]
#Zero out the dangly bit at the end:
a[(new.stop - old.stop):] = 0
# [0 1 -1 -1 7 8 9 0 0 0]
</snippet></ROW><ROW><id>4491573</id><snippet>Xwt = Xw - Xc;
Ywt = Yw - Yc;
Zwt = Zw;

(Xc,Yc,Zc) = camera position
(Xw,Yw,Zw) = world coordinates of object in the scene
(Xwt,Ywt,Zwt) = world coordinates of object translated to camera position
</snippet></ROW><ROW><id>4491573</id><snippet>Xwc =  Xwt * Cos(psi) + Ywt * Sin(psi);
Ywc = -Xwt * Sin(psi) + Ywt * Cos(psi);
Zwc =  Zwt

Psi = angle of camera rotation
(Xwc,Ywc,Zwc) = world coordinates of object transformed to camera orientation
</snippet></ROW><ROW><id>4491729</id><snippet>import tweepy
# http://dev.twitter.com/apps/myappid
CONSUMER_KEY = 'my consumer key'
CONSUMER_SECRET = 'my consumer secret'
# http://dev.twitter.com/apps/myappid/my_token
ACCESS_TOKEN_KEY= 'my access token key'
ACCESS_TOKEN_SECRET= 'my access token secret'

def tweet(status):
    '''
    updates the status of my twitter account
    requires tweepy (https://github.com/joshthecoder/tweepy)
    '''
    if len(status) &gt; 140:
        raise Exception('status message is too long!')
    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET)
    api = tweepy.API(auth)
    result = api.update_status(status)
    return result
</snippet></ROW><ROW><id>4491738</id><snippet>import util
def view(request):
    util.process_post_rankings(request.user.id)
    # ... write additional logic and render to template
</snippet></ROW><ROW><id>4491756</id><snippet>cron</snippet></ROW><ROW><id>4492037</id><snippet>import win32file
&gt;&gt;&gt; win32file.GetDriveType("C:/") == win32file.DRIVE_FIXED ##hardrive
True
&gt;&gt;&gt; win32file.GetDriveType("Z:/") == win32file.DRIVE_FIXED ##network
False
&gt;&gt;&gt; win32file.GetDriveType("D:/") == win32file.DRIVE_FIXED ##cd-rom
False
</snippet></ROW><ROW><id>4492038</id><snippet>scipy.tensordot(P, T, axes=[1,1]).swapaxes(0,1)
</snippet></ROW><ROW><id>4492108</id><snippet>import urllib
from lxml import html

url = "http://www.infolanka.com/miyuru_gee/art/art.html"
page = html.fromstring(urllib.urlopen(url).read())

for link in page.xpath("//a"):
    print "Name", x.text, "URL", x.get("href")

output &gt;&gt;
    [('Aathma Liyanage', 'athma.html'),
     ('Abewardhana Balasuriya', 'abewardhana.html'),
     ('Aelian Thilakeratne', 'aelian_thi.html'),
     ('Ahamed Mohideen', 'ahamed.html'),
    ]
</snippet></ROW><ROW><id>4492153</id><snippet>str</snippet></ROW><ROW><id>4492153</id><snippet>AsciiString</snippet></ROW><ROW><id>4492153</id><snippet>UnicodeString</snippet></ROW><ROW><id>4492153</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>4492153</id><snippet>random.normalvariate</snippet></ROW><ROW><id>4492153</id><snippet>do_something_with_type_a</snippet></ROW><ROW><id>4492153</id><snippet>chain</snippet></ROW><ROW><id>4492153</id><snippet>cycle</snippet></ROW><ROW><id>4492153</id><snippet>repeat</snippet></ROW><ROW><id>4492153</id><snippet>islice</snippet></ROW><ROW><id>4492153</id><snippet>izip</snippet></ROW><ROW><id>4492221</id><snippet>2to3 -w -f import myproject/</snippet></ROW><ROW><id>4492272</id><snippet>files = sorted( (f for f in files if firstFile &lt;= int(f) &lt; lastFile), key=int)
</snippet></ROW><ROW><id>4493065</id><snippet>callback = request.GET.get('callback=?', '')</snippet></ROW><ROW><id>4493065</id><snippet>callback</snippet></ROW><ROW><id>4493065</id><snippet>callback = request.GET.get( 'callback', None ) 
</snippet></ROW><ROW><id>4493065</id><snippet>print</snippet></ROW><ROW><id>4493065</id><snippet>print repr(request.GET)</snippet></ROW><ROW><id>4493187</id><snippet>subprocess.Popen([sys.executable, "sub_script.py"], stdout=open("log.txt", "a"))
</snippet></ROW><ROW><id>4493488</id><snippet>input_formats</snippet></ROW><ROW><id>4493488</id><snippet>'%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
'%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
'%Y-%m-%d',              # '2006-10-25'
'%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
'%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
'%m/%d/%Y',              # '10/25/2006'
'%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
'%m/%d/%y %H:%M',        # '10/25/06 14:30'
'%m/%d/%y',              # '10/25/06'
</snippet></ROW><ROW><id>4493488</id><snippet>2010-12-19 17:08:22.498000</snippet></ROW><ROW><id>4493488</id><snippet>DateTimeField</snippet></ROW><ROW><id>4493488</id><snippet>DateTimeInput</snippet></ROW><ROW><id>4493488</id><snippet>datetime</snippet></ROW><ROW><id>4493488</id><snippet>HiddenInput</snippet></ROW><ROW><id>4493488</id><snippet>HiddenInput</snippet></ROW><ROW><id>4493488</id><snippet>strftime</snippet></ROW><ROW><id>4493488</id><snippet>datetime</snippet></ROW><ROW><id>4493488</id><snippet>DateTimeInput</snippet></ROW><ROW><id>4493488</id><snippet>attrs</snippet></ROW><ROW><id>4493488</id><snippet>class PostForm(ModelForm):
    class Meta:
        model = Post
        fields = ('title', 'message', 'pub_date',)
        widgets = {
            'message' : Textarea(attrs={'cols':80, 'rows':20}),
            'pub_date' : DateTimeInput(attrs={'style': 'display:none;'}),
        }
</snippet></ROW><ROW><id>4493523</id><snippet>_insert()</snippet></ROW><ROW><id>4493523</id><snippet>_update()</snippet></ROW><ROW><id>4493523</id><snippet>get_query_set()</snippet></ROW><ROW><id>4493523</id><snippet>create()</snippet></ROW><ROW><id>4493523</id><snippet>get_or_create()</snippet></ROW><ROW><id>4493523</id><snippet>update()</snippet></ROW><ROW><id>4493523</id><snippet>settings.py</snippet></ROW><ROW><id>4493523</id><snippet>"READ_ONLY"</snippet></ROW><ROW><id>4493523</id><snippet>def get_query_set() return super(ReadOnlyManager, self).get_query_set().using("READ_ONLY")</snippet></ROW><ROW><id>4493523</id><snippet>"READ_ONLY"</snippet></ROW><ROW><id>4493588</id><snippet>{% if foo in bar %}</snippet></ROW><ROW><id>4493818</id><snippet>from datetime import date
...
@register.filter
def future_dates_only(the_date):
   if the_date &gt; date.today():
       return the_date
   else:
       return None
</snippet></ROW><ROW><id>4493818</id><snippet>{{specialdate|future_dates_only|date:"d M Y"}}
</snippet></ROW><ROW><id>4493921</id><snippet>self.instance</snippet></ROW><ROW><id>4493921</id><snippet>self.cleaned_data</snippet></ROW><ROW><id>4493939</id><snippet>split()</snippet></ROW><ROW><id>4493939</id><snippet>&gt;&gt;&gt; name, args = re.match(r'(\w+)\((.*)\)', 'function_name(foo=&lt;str&gt;, bar=&lt;array&gt;, baz=&lt;int&gt;)').groups()
&gt;&gt;&gt; args = [re.match(r'(\w+)=&lt;(\w+)&gt;', arg).groups() for arg in args.split(', ')]
&gt;&gt;&gt; name, args
('function_name', [('foo', 'str'), ('bar', 'array'), ('baz', 'int')])
</snippet></ROW><ROW><id>4493939</id><snippet>\s+</snippet></ROW><ROW><id>4493995</id><snippet>__import__</snippet></ROW><ROW><id>4493995</id><snippet>save_import = __builtin__.__import__
def my_import(name, *rest):
    if name=="hidden":
        raise ImportError, "Hidden package"
    return save_import(name, *rest)
__builtin__.__import__ = my_import
</snippet></ROW><ROW><id>4494122</id><snippet>^\s*\bif\s*\(\s*\w+\s*\)\s*$
</snippet></ROW><ROW><id>4494445</id><snippet>f=open("conf.txt","r")
txt=f.read() #all text is in txt
f.close()

fwrite=open("modified.txt","w")
splitedlines = txt.splitlines():
#print splitedlines 
for line in splitedlines:
    #print line
    conf = line.split('=')
    #conf[0] is what it is on left and conf[1] is what it is on right
    #print conf
    if conf[0] == "youget":
        #we get this
        conf[1] = "the_super_idea" #the_idea is now the_super_idea
    #join conf whit '=' and write
    newline = '='.join(conf)
    #print newline
    fwrite.write(newline+"\n")

fwrite.close()
</snippet></ROW><ROW><id>4494484</id><snippet>from ez_setup import use_setuptools
use_setuptools()
</snippet></ROW><ROW><id>4494484</id><snippet>python setup.py install
</snippet></ROW><ROW><id>4494484</id><snippet>cat</snippet></ROW><ROW><id>4494484</id><snippet>subprocess</snippet></ROW><ROW><id>4494846</id><snippet>#!/usr/bin/env python
import threading, time

class A(threading.Thread):
    def __init__(self, name):
            threading.Thread.__init__(self)
            self.name=name
            self.count=0
    def run(self):
            while self.count&lt;10:
                    print self.name, "Running!"
                    time.sleep(1)
                    self.count+=1

a=A("first")
a.start()
time.sleep(5)
a=A("second")
a.start()
</snippet></ROW><ROW><id>4494870</id><snippet>safe</snippet></ROW><ROW><id>4494870</id><snippet>unsafe</snippet></ROW><ROW><id>4494870</id><snippet>this content is varying degrees of safe</snippet></ROW><ROW><id>4495153</id><snippet>def URLPost(url, params, method="POST", headers = {}):
    req = urllib2.Request(url)
    for k, v in headers.items():
        req.add_header(k, v)
    r  = urllib2.urlopen(req, data=urllib.urlencode(params))
    return r
</snippet></ROW><ROW><id>4495175</id><snippet>/usr/lib64/python2.6/distutils/distutils.cfg</snippet></ROW><ROW><id>4495175</id><snippet>[install]
prefix=/usr/local
</snippet></ROW><ROW><id>4495175</id><snippet>install --prefix=/usr/local</snippet></ROW><ROW><id>4495175</id><snippet>~/.pydistutils.cfg</snippet></ROW><ROW><id>4495175</id><snippet>[install]
prefix=
</snippet></ROW><ROW><id>4495175</id><snippet>=</snippet></ROW><ROW><id>4495175</id><snippet>--user</snippet></ROW><ROW><id>4495197</id><snippet>import numpy as np

def main():
    # Generate some random data
    x = np.cumsum(np.random.random(1000) - 0.5)
    condition = np.abs(x) &lt; 1

    # Print the start and stop indicies of each region where the absolute 
    # values of x are below 1, and the min and max of each of these regions
    for start, stop in contiguous_regions(condition):
        segment = x[start:stop]
        print start, stop
        print segment.min(), segment.max()

def contiguous_regions(condition):
    """Finds contiguous True regions of the boolean array "condition". Returns
    a 2D array where the first column is the start index of the region and the
    second column is the end index."""

    # Find the indicies of changes in "condition"
    d = np.diff(condition)
    idx, = d.nonzero() 

    # We need to start things after the change in "condition". Therefore, 
    # we'll shift the index by 1 to the right.
    idx += 1

    if condition[0]:
        # If the start of condition is True prepend a 0
        idx = np.r_[0, idx]

    if condition[-1]:
        # If the end of condition is True, append the length of the array
        idx = np.r_[idx, condition.size] # Edit

    # Reshape the result into two columns
    idx.shape = (-1,2)
    return idx

main()
</snippet></ROW><ROW><id>4495343</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>4495343</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as bs
&gt;&gt;&gt; markup = """&lt;a*&gt;Link1&lt;/a&gt; &lt;a*&gt;Link2&lt;/a&gt; or &lt;a*&gt;Link3&lt;/a&gt;
... &lt;a*&gt;A bad link*&lt;/a&gt;
... some text* &lt;a*&gt;update*&lt;/a&gt;
... other text right before link &lt;a*&gt;click here&lt;/a&gt;"""
&gt;&gt;&gt; soup = bs(markup)
&gt;&gt;&gt; TAGS_TO_EXTRACT = ('a',)
&gt;&gt;&gt; for tag in soup.findAll():
...   if tag.name in TAGS_TO_EXTRACT:
...     tag.extract()
...
&gt;&gt;&gt; soup
  or

some text*
other text right before link
</snippet></ROW><ROW><id>4495343</id><snippet>&gt;&gt;&gt; for tag in soup.findAll():
...   if tag.name in TAGS_TO_EXTRACT:
...     tag.replaceWith(tag.text)
...
&gt;&gt;&gt; soup
Link1 Link2 or Link3
A bad link*
some text* update*
other text right before link click here
</snippet></ROW><ROW><id>4495356</id><snippet>batch.add(6, GL_TRIANGLES, TextureBindGroup(texture), ('v3i', (64, 64, 0, -64, -64, 205, -64, 64, 205, 64, -64, 205, 64, 64, 0, -64, -64, 205)), ('t2i', (0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1)))
</snippet></ROW><ROW><id>4495487</id><snippet>simplejson.loads</snippet></ROW><ROW><id>4495487</id><snippet>None</snippet></ROW><ROW><id>4495507</id><snippet>import composite

class Simple(object):
   ...
  def __add__(self, other):
    c = composite.Composite()
    c._members.append(self)
    c._members.append(other)
    return c
</snippet></ROW><ROW><id>4495559</id><snippet>p</snippet></ROW><ROW><id>4495559</id><snippet>(((pow(g, u1, p) * pow(y, u2, p))) % p ) % q</snippet></ROW><ROW><id>4495589</id><snippet>games["name"] = name,</snippet></ROW><ROW><id>4495611</id><snippet>dis</snippet></ROW><ROW><id>4495611</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def x(a,b):
...     return a+b
... 
&gt;&gt;&gt; dis.dis(x)
  2           0 LOAD_FAST                0 (a)
              3 LOAD_FAST                1 (b)
              6 BINARY_ADD          
              7 RETURN_VALUE  
</snippet></ROW><ROW><id>4495627</id><snippet>+=</snippet></ROW><ROW><id>4495627</id><snippet>C:\junk&gt;\python15\python
Python 1.5.2 (#0, Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)] on win32
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; def mysplit(s):
...     words = []
...     inword = 0
...     for c in s:
...         if c in " \r\n\t": # whitespace
...             inword = 0
...         elif not inword:
...             words = words + [c]
...             inword = 1
...         else:
...             words[-1] = words[-1] + c
...     return words
...
&gt;&gt;&gt; mysplit('')
[]
&gt;&gt;&gt; mysplit('x')
['x']
&gt;&gt;&gt; mysplit('foo')
['foo']
&gt;&gt;&gt; mysplit('  foo')
['foo']
&gt;&gt;&gt; mysplit('  foo    ')
['foo']
&gt;&gt;&gt; mysplit('\nfoo\tbar\rzot ugh\n\n   ')
['foo', 'bar', 'zot', 'ugh']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4495960</id><snippet>python path/to/yourScript.py
</snippet></ROW><ROW><id>4496176</id><snippet>p_guess=(np.median(x),np.min(y),np.max(y),.01)
</snippet></ROW><ROW><id>4496176</id><snippet>def _eNegX_(p,x):
    x0,y0,c,k=p  
    y = (c * np.exp(-k*(x-x0))) + y0
    return y
</snippet></ROW><ROW><id>4496176</id><snippet>leastsq</snippet></ROW><ROW><id>4496176</id><snippet>green</snippet></ROW><ROW><id>4496176</id><snippet>(1.736, 0.85299999999999998, 3.4889999999999999, 0.01)</snippet></ROW><ROW><id>4496176</id><snippet>(-59.20295956,   1.8562    ,   1.03477144,   0.69483784)</snippet></ROW><ROW><id>4496444</id><snippet>result = [entry for entry in result if entry[0] &gt;= 0 and
  entry[0] &lt; board.dimensions and entry[1] &gt;= 0 and
  entry[1] &lt; board.dimensions]
</snippet></ROW><ROW><id>4496449</id><snippet>list_obj_array = np.ndarray((1,), dtype=object)
list_obj_array[0] = [1,2,3]
f2(X,list_obj_array)  # using your definition from above
</snippet></ROW><ROW><id>4496449</id><snippet>type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
</snippet></ROW><ROW><id>4496449</id><snippet>array([ 6.        ,  5.4       ,  4.90909091,  4.5       ,  4.15384615,
        3.85714286,  3.6       ,  3.375     ,  3.17647059,  3.        ])
</snippet></ROW><ROW><id>4496449</id><snippet>def curry_f(A):
    def f_curried(x):
        return f(x, A)  # using your definition from above
    return f_curried

f2 = np.vectorize(curry_f(P))
f2(X)
</snippet></ROW><ROW><id>4496449</id><snippet>type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
type(A)=&lt;type 'list'&gt;, A=[1, 2, 3]
</snippet></ROW><ROW><id>4496449</id><snippet>array([ 6.        ,  5.4       ,  4.90909091,  4.5       ,  4.15384615,
        3.85714286,  3.6       ,  3.375     ,  3.17647059,  3.        ])
</snippet></ROW><ROW><id>4496696</id><snippet>ipconfig /all</snippet></ROW><ROW><id>4496696</id><snippet>import subprocess
subprocess.call('ipconfig /all')
</snippet></ROW><ROW><id>4496732</id><snippet>bzip2</snippet></ROW><ROW><id>4496732</id><snippet>crcVar = 0xffffffff # Init
    for cha in list(dataIn):
        crcVar = crcVar &amp; 0xffffffff # Unsigned
        crcVar = ((crcVar &lt;&lt; 8) ^ (BZ2_crc32Table[(crcVar &gt;&gt; 24) ^ (ord(cha))]))

    return hex(~crcVar &amp; 0xffffffff)[2:-1].upper()
</snippet></ROW><ROW><id>4496732</id><snippet>bzlib_private.h</snippet></ROW><ROW><id>4496732</id><snippet>BZ2_crc32Table</snippet></ROW><ROW><id>4496732</id><snippet>crctable.c</snippet></ROW><ROW><id>4496732</id><snippet>bzip2</snippet></ROW><ROW><id>4496732</id><snippet>crctable.c</snippet></ROW><ROW><id>4496734</id><snippet>from django.test import TestCase
from django.template import Context, Template

class TagTests(TestCase):
    def tag_test(self, template, context, output):
        t = Template('{% load multifor %}'+template)
        c = Context(context)
        self.assertEqual(t.render(c), output)
    def test_for_tag_multi(self):
        template = "{% for x in x_list; y in y_list %}{{ x }}:{{ y }}/{% endfor %}"
        context = {"x_list": ('one', 1, 'carrot'), "y_list": ('two', 2, 'orange')}
        output = u"one:two/1:2/carrot:orange/"
        self.tag_test(template, context, output)
</snippet></ROW><ROW><id>4497099</id><snippet>def shell_script(appname, *commands):
        workspace = tempfile.mkdtemp(prefix=appname + '-')
        installer = open(workspace + "/installer.sh", 'w')

        installer.write("#!/bin/bash\n")
        installer.write("cd " + workspace + "\n")
        for line in commands:
                installer.write(line + "\n")
        ShellCommand("chmod u+x " + installer.name)
        installer.close()
        ShellCommand(installer.name)
</snippet></ROW><ROW><id>4497363</id><snippet>my_list = [[1,2,3,4,5,6],[1,3,4],[34,56,56,56]]

def func(*var):
    for arg in var:
        print arg,
    print

for args in my_list:
    func(*args)
</snippet></ROW><ROW><id>4497363</id><snippet>1 2 3 4 5 6 
1 3 4 
34 56 56 56 
</snippet></ROW><ROW><id>4497363</id><snippet>my_list = [[1,2,3,4,5,6],[1,3,4],[34,56,56,56]]

def func(var1=None,var2=None,var3=None,var4=None,var5=None,var6=None):
    print var1,var2,var3,var4,var5,var6

for args in my_list:
    func(*args)
</snippet></ROW><ROW><id>4497363</id><snippet>1 2 3 4 5 6
1 3 4 None None None
34 56 56 56 None None
</snippet></ROW><ROW><id>4497363</id><snippet>**</snippet></ROW><ROW><id>4497363</id><snippet>my_list = [dict(var1=1,var5=5,var6=6),dict(var2=2,var4=4)]

def func(var1=None,var2=None,var3=None,var4=None,var5=None,var6=None):
    print var1,var2,var3,var4,var5,var6

for args in my_list:
    func(**args)
</snippet></ROW><ROW><id>4497363</id><snippet>1 None None None 5 6
None 2 None 4 None None
</snippet></ROW><ROW><id>4497798</id><snippet>/usr/lib/pymodules/python2.6/webkit/webkit.so</snippet></ROW><ROW><id>4497985</id><snippet>class DataStream(object):
    def __init__(self, iterable):
        self.iterable = iter(iterable)
        self.next_item = (None, 0)
        self.next_x = None
        self.current_y = 0
        self.next()

    def next(self):
        if self.next_item is None:
            raise StopIteration()
        self.current_y = self.next_item[1]
        try:
            self.next_item = self.iterable.next()
            self.next_x = self.next_item[0]
        except StopIteration:
            self.next_item = None
            self.next_x = None
        return self.next_item

    def __iter__(self):
        return self


class MergedDataStream(object):
    def __init__(self, *iterables):
        self.streams = [DataStream(i) for i in iterables]
        self.outseq = []

    def next(self):
        xs = [stream.next_x for stream in self.streams if stream.next_x is not None]
        if not xs:
            raise StopIteration()
        next_x = min(xs)
        current_y = 0
        for stream in self.streams:
            if stream.next_x == next_x:
                stream.next()
            current_y += stream.current_y
        self.outseq.append((next_x, current_y))
        return self.outseq[-1]

    def __iter__(self):
        return self


if __name__ == '__main__':
    seqs = [
        [(1, 100), (5, 100), (10, 100)],
        [(4, 150), (5, 100), (18, 150)],
        ]

    sm = MergedDataStream(*seqs)
    for x, y in sm:
        print "%02s: %s" % (x, y)

    print sm.outseq
</snippet></ROW><ROW><id>4498379</id><snippet>while True:
    try:
        os.remove(yourfilename) # try to remove it directly
    except OSError as e:
        if e.errno == errno.ENOENT: # file doesn't exist
            break
        time.sleep(5)
    else:
        break
</snippet></ROW><ROW><id>4498956</id><snippet>gsprint.exe</snippet></ROW><ROW><id>4498956</id><snippet>p = subprocess.Popen([r"p:\ath\to\gsprint.exe", "test.pdf"], 
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
print stdout
print stderr
</snippet></ROW><ROW><id>4498956</id><snippet>gsprint.exe</snippet></ROW><ROW><id>4498956</id><snippet>communicate</snippet></ROW><ROW><id>4499167</id><snippet>def handleFile(self, request):
    file = request.FILES["file"]
    destination = open('filename.ext', 'wb')
        for chunk in file.chunks():
            destination.write(chunk)
            destination.close()
</snippet></ROW><ROW><id>4499172</id><snippet>print</snippet></ROW><ROW><id>4499172</id><snippet>'foo' * 20</snippet></ROW><ROW><id>4499172</id><snippet>&gt;&gt;&gt; print 'a' * 20
aaaaaaaaaaaaaaaaaaaa
</snippet></ROW><ROW><id>4499172</id><snippet>print</snippet></ROW><ROW><id>4499172</id><snippet>+=</snippet></ROW><ROW><id>4499172</id><snippet>&gt;&gt;&gt; for i in xrange(20):
...     s += 'a'
... 
&gt;&gt;&gt; print s
aaaaaaaaaaaaaaaaaaaa
</snippet></ROW><ROW><id>4499172</id><snippet>print</snippet></ROW><ROW><id>4499172</id><snippet>a</snippet></ROW><ROW><id>4499172</id><snippet>&gt;&gt;&gt; for i in xrange(20):
...     sys.stdout.write('a')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4499172</id><snippet>print</snippet></ROW><ROW><id>4499172</id><snippet>end</snippet></ROW><ROW><id>4499172</id><snippet>__future__</snippet></ROW><ROW><id>4499172</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; for i in xrange(20):
...     print('a', end='')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4499435</id><snippet>def appendleft(self, item):
</snippet></ROW><ROW><id>4499568</id><snippet>from test import test_handler</snippet></ROW><ROW><id>4499617</id><snippet>lxml</snippet></ROW><ROW><id>4499617</id><snippet>__init___</snippet></ROW><ROW><id>4499617</id><snippet>__new__</snippet></ROW><ROW><id>4499617</id><snippet>__init__</snippet></ROW><ROW><id>4499617</id><snippet>__init__</snippet></ROW><ROW><id>4499617</id><snippet>_init()</snippet></ROW><ROW><id>4499617</id><snippet>_init()</snippet></ROW><ROW><id>4499617</id><snippet>_init()</snippet></ROW><ROW><id>4499617</id><snippet>_init()</snippet></ROW><ROW><id>4499644</id><snippet>//b[.='Some unique string']/following::table[1] 
</snippet></ROW><ROW><id>4499644</id><snippet>table</snippet></ROW><ROW><id>4499644</id><snippet>b</snippet></ROW><ROW><id>4500340</id><snippet>gsprint.exe</snippet></ROW><ROW><id>4500340</id><snippet>file_path = "C:\\temp\\test.pdf"
p = subprocess.Popen(["C:\\Ghostgum\\gsview\\gsprint.exe", "-printer", printer_name, "-colour",  file_path],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate() # waits for the gs process to end
os.remove(file_path) # now the file can be removed
</snippet></ROW><ROW><id>4500340</id><snippet>gsprint</snippet></ROW><ROW><id>4500476</id><snippet>{% for day in day_list %}
    {{ day }}
{% endfor %}
</snippet></ROW><ROW><id>4500476</id><snippet>for</snippet></ROW><ROW><id>4500607</id><snippet>stat()</snippet></ROW><ROW><id>4500607</id><snippet>import os

def sorted_ls(path):
    mtime = lambda f: os.stat(os.path.join(path, f)).st_mtime
    return list(sorted(os.listdir(path), key=mtime))

print(sorted_ls('documents'))
</snippet></ROW><ROW><id>4501100</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>4501100</id><snippet>simplejson.load(r)</snippet></ROW><ROW><id>4501317</id><snippet>class TimeMaterialsForm(ModelForm):
   status = forms.ChoiceField(choices=STATUS_CHOICES)
   project_manager = forms.forms.ModelChoiceField(queryset=customUser.objects.filter(pm=True))
   ...  
</snippet></ROW><ROW><id>4501400</id><snippet>PrintList([1,2,3])
prints [1,2,3][0] =&gt; 1
runs printList([1,2,3][1:]) =&gt; printList([2,3])
=&gt; we're now in printList([2,3])
    prints [2,3][0] =&gt; 2
    runs printList([2,3][1:]) =&gt; printList([3])
    =&gt; we are now in printList([3])
        prints [3][0] =&gt; 3
        runs printList([3][1:]) =&gt; printList([])
        =&gt; we are now in printList([])
            "if L" is false for an empty list, so we return None
        =&gt; we are back in printList([3])
        prints [3][0] =&gt; 3
        it reaches the end of the function and returns None
    =&gt; we are back in printList([2,3])
   prints [2,3][0] =&gt; 2
   it reaches the end of the function and returns None
=&gt; we are back in printList([1,2,3])
prints [1,2,3][0] =&gt; 1
it reaches the end of the function and returns None
</snippet></ROW><ROW><id>4501471</id><snippet>def create_blah(class_type = different_classes.first, x=x1, y=y1, z=z1):
    instance = class_type(x, y, z)
</snippet></ROW><ROW><id>4501471</id><snippet>getattr()</snippet></ROW><ROW><id>4501471</id><snippet>instance = getattr(different_classes, class_type)(x, y, z)
</snippet></ROW><ROW><id>4501487</id><snippet>e = pygame.event.poll()
if e == pygame.MOUSEBUTTONDOWN:
    pos = e.pos
    # where "screen" is your variable holding the screen surface
    color = screen.get_at((pos))
</snippet></ROW><ROW><id>4501720</id><snippet>In [17]: seq=[1,2,3,4,5,6,7,8]
In [18]: [seq[i:i+3] for i in range(0,len(seq),3)]
Out[18]: [[1, 2, 3], [4, 5, 6], [7, 8]]
</snippet></ROW><ROW><id>4501720</id><snippet>In [19]: import itertools
In [20]: list(itertools.izip_longest(*[iter(seq)]*3))
Out[20]: [(1, 2, 3), (4, 5, 6), (7, 8, None)]
</snippet></ROW><ROW><id>4501720</id><snippet>fillvalue</snippet></ROW><ROW><id>4501720</id><snippet>list1+=[list2]</snippet></ROW><ROW><id>4501720</id><snippet>list1.append(list2)</snippet></ROW><ROW><id>4501720</id><snippet>list1.append(list2)</snippet></ROW><ROW><id>4501720</id><snippet>In [41]: %timeit list1=[1,2,3]; list1.append(list2)
1000000 loops, best of 3: 612 ns per loop

In [42]: %timeit list1=[1,2,3]; list1+=[list2]
1000000 loops, best of 3: 847 ns per loop
</snippet></ROW><ROW><id>4502366</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall("{{(.*?)}}", "this {{is}} a sample {{text}}")
['is', 'text']
</snippet></ROW><ROW><id>4502387</id><snippet>child.__class__.__bases__[0]().getAttributes()
</snippet></ROW><ROW><id>4502387</id><snippet>__base__</snippet></ROW><ROW><id>4502387</id><snippet>&gt;&gt;&gt; child.getAttributes()
a
_bar
b

&gt;&gt;&gt; child.__class__.__bases__[0]().getAttributes()
_bar
</snippet></ROW><ROW><id>4502483</id><snippet>def factorial( n ):
   if n &lt;1:   # base case
       return 1
   else:
       returnNumber = n * factorial( n - 1 )  # recursive call
       print(str(n) + '! = ' + str(returnNumber))
       return returnNumber
</snippet></ROW><ROW><id>4502661</id><snippet>os.system</snippet></ROW><ROW><id>4502661</id><snippet>os.execv</snippet></ROW><ROW><id>4502661</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4502661</id><snippet>subprocess</snippet></ROW><ROW><id>4502661</id><snippet>os.system</snippet></ROW><ROW><id>4502661</id><snippet>subprocess.Popen(shell=True, ...)</snippet></ROW><ROW><id>4502918</id><snippet>self.s.shutdown(socket.SHUT_RDWR)</snippet></ROW><ROW><id>4502918</id><snippet>Server.stop</snippet></ROW><ROW><id>4502918</id><snippet>def stop(self):
    self.is_stop.set()
    self.s.shutdown(socket.SHUT_RDWR) 
    self.s.close()
</snippet></ROW><ROW><id>4502957</id><snippet>self</snippet></ROW><ROW><id>4502957</id><snippet>App.</snippet></ROW><ROW><id>4502957</id><snippet>c</snippet></ROW><ROW><id>4502957</id><snippet>myapp</snippet></ROW><ROW><id>4502957</id><snippet>self.c</snippet></ROW><ROW><id>4502957</id><snippet>self</snippet></ROW><ROW><id>4502957</id><snippet>self</snippet></ROW><ROW><id>4502957</id><snippet>class A:
    def __init__(self, foo):
        self.bar = foo

    def echo(self):
        print self.bar

one = A(1)

one.echo() # prints '1'

two = A(2)

two.echo() # prints '2'
one.echo() # still prints '1'
</snippet></ROW><ROW><id>4502957</id><snippet>self</snippet></ROW><ROW><id>4503142</id><snippet>&gt;&gt;&gt; def foo(**kwargs):
...   return None
... 
&gt;&gt;&gt; foo(a.b=1)
  File "&lt;stdin&gt;", line 1
SyntaxError: keyword can't be an expression
</snippet></ROW><ROW><id>4503162</id><snippet>def f(s, c, start):
    i = s.find(c, start)
    if i &lt; 0:
        return [s]
    else:
        return f(s, c, i+1) + f(s[:i]+s[i+1:], c, i)

s = 'aAabbAA'
print f(s, 'A', 0)
# ['aAabbAA', 'aAabbA', 'aAabbA', 'aAabb', 'aabbAA', 'aabbA', 'aabbA', 'aabb']
</snippet></ROW><ROW><id>4503162</id><snippet>set</snippet></ROW><ROW><id>4503162</id><snippet>def f(s, c, start):
    i = s.find(c, start)
    if i &lt; 0:
        return set([s])
    else:
        return set.union(f(s, c, i+1), f(s[:i]+s[i+1:], c, i))

s = 'aAabbAA'
print f(s, 'A', 0)
# set(['aAabbA', 'aabbAA', 'aAabbAA', 'aabb', 'aAabb', 'aabbA'])
</snippet></ROW><ROW><id>4503162</id><snippet>def f(s, c, start):
    i = s.find(c, start)
    return [s] if i &lt; 0 else f(s, c, i+1) + f(s[:i]+s[i+1:], c, i)

s = 'aAabbAA'
print f(s, 'A', 0)
# ['aAabbAA', 'aAabbA', 'aAabbA', 'aAabb', 'aabbAA', 'aabbA', 'aabbA', 'aabb']
</snippet></ROW><ROW><id>4503162</id><snippet>timeit</snippet></ROW><ROW><id>4503162</id><snippet>In [32]: timeit.timeit('x = f("aAabbAA", "A", 0)', 
                       'from test3 import f', number=10000) 
Out[32]: 0.11674594879150391

In [33]: timeit.timeit('x = deperm("aAabbAA", "A")', 
                       'from test4 import deperm', number=10000) 
Out[33]: 0.35839986801147461

In [34]: timeit.timeit('x = f("aAabbAA"*6, "A", 0)', 
                       'from test3 import f', number=1) 
Out[34]: 0.45998811721801758

In [35]: timeit.timeit('x = deperm("aAabbAA"*6, "A")', 
                       'from test4 import deperm', number=1) 
Out[35]: 7.8437530994415283
</snippet></ROW><ROW><id>4503640</id><snippet>f_stdout = PySys_GetObject("stdout");
text = PyUnicode_DecodeUTF8((char*)str, strlen(str), "strict");
PyFile_WriteObject(text, f_stdout, Py_PRINT_RAW);
</snippet></ROW><ROW><id>4503640</id><snippet>PyUnicode_AsEncodedString()</snippet></ROW><ROW><id>4503691</id><snippet>import numpy
from numpy.fft import fft, ifft

data = numpy.arange(5*4).reshape(5, 4)
print data
##[[ 0  1  2  3]
## [ 4  5  6  7]
## [ 8  9 10 11]
## [12 13 14 15]
## [16 17 18 19]]
dataFT = fft(data, axis=1)
dataAC = ifft(dataFT * numpy.conjugate(dataFT), axis=1).real
print dataAC
##[[   14.     8.     6.     8.]
## [  126.   120.   118.   120.]
## [  366.   360.   358.   360.]
## [  734.   728.   726.   728.]
## [ 1230.  1224.  1222.  1224.]]
</snippet></ROW><ROW><id>4503691</id><snippet>import numpy
from numpy.fft import fft, ifft

data = numpy.arange(5*4).reshape(5, 4)
padding = numpy.zeros((5, 3))
dataPadded = numpy.concatenate((data, padding), axis=1)
print dataPadded
##[[  0.   1.   2.   3.   0.   0.   0.   0.]
## [  4.   5.   6.   7.   0.   0.   0.   0.]
## [  8.   9.  10.  11.   0.   0.   0.   0.]
## [ 12.  13.  14.  15.   0.   0.   0.   0.]
## [ 16.  17.  18.  19.   0.   0.   0.   0.]]
dataFT = fft(dataPadded, axis=1)
dataAC = ifft(dataFT * numpy.conjugate(dataFT), axis=1).real
print numpy.round(dataAC, 10)[:, :4]
##[[   14.     8.     3.     0.     0.     3.     8.]
## [  126.    92.    59.    28.    28.    59.    92.]
## [  366.   272.   179.    88.    88.   179.   272.]
## [  734.   548.   363.   180.   180.   363.   548.]
## [ 1230.   920.   611.   304.   304.   611.   920.]]
</snippet></ROW><ROW><id>4503692</id><snippet>MainHandler.get</snippet></ROW><ROW><id>4503692</id><snippet>class MainHandler(webapp.RequestHandler):
    def get(self, bar_id=None):
        if bar_id is None:
            # Handle /bar requests
        else:
            # Handle /bar/whatever requests
</snippet></ROW><ROW><id>4503831</id><snippet>for each in form.controls[:]:
  if each not "some criteria":
    form.controls.remove(each)
</snippet></ROW><ROW><id>4504067</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; argument_string = "-a arga -b \"argument b\" arg1 arg2"
&gt;&gt;&gt; l = shlex.split(argument_string)
&gt;&gt;&gt; l
['-a', 'arga', '-b', 'argument b', 'arg1', 'arg2']
</snippet></ROW><ROW><id>4504097</id><snippet>from cStringIO import StringIO
from lxml import etree

URL_TAG = "{http://webservices.amazon.com/AWSECommerceService/2009-10-01}URL"

tree = etree.fromstring(body)
print tree.findtext(".//%s" % (URL_TAG,)) # 1st way

for ev, el in etree.iterparse(StringIO(body), tag=URL_TAG): # 2nd approach
    print el.text
</snippet></ROW><ROW><id>4504097</id><snippet>body</snippet></ROW><ROW><id>4504097</id><snippet>http://ecx.images-amazon.com/images/I/51dSYJcTaTL.jpg
http://ecx.images-amazon.com/images/I/51dSYJcTaTL.jpg
http://ecx.images-amazon.com/images/I/51dSYJcTaTL.jpg
http://ecx.images-amazon.com/images/I/51dSYJcTaTL.jpg
http://ecx.images-amazon.com/images/I/51dSYJcTaTL.jpg
</snippet></ROW><ROW><id>4504438</id><snippet># open an HTTP connection
h1 = httplib.HTTPConnection('localhost:8080')

# create a mime multipart message of type multipart/related
msg = MIMEMultipart("related")

# create a mime-part containing a zip file, with a Content-Disposition header
# on the section
fp = open('file.zip', 'rb')
base = MIMEBase("application", "zip")
base['Content-Disposition'] = 'file; name="package"; filename="file.zip"'
base.set_payload(fp.read())
encoders.encode_base64(base)
msg.attach(base)

# Here's a rubbish bit: chomp through the header rows, until hitting a newline on
# its own, and read each string on the way as an HTTP header, and reading the rest
# of the message into a new variable
header_mode = True
headers = {}
body = []
for line in msg.as_string().splitlines(True):
    if line == "\n" and header_mode == True:
        header_mode = False
    if header_mode:
        (key, value) = line.split(":", 1)
        headers[key.strip()] = value.strip()
    else:
        body.append(line)
body = "".join(body)

# do the request, with the separated headers and body
h1.request("POST", "http://localhost:8080/server", body, headers)
</snippet></ROW><ROW><id>4504483</id><snippet>(rank, suit)</snippet></ROW><ROW><id>4504483</id><snippet>hand = [('2', 'Clubs'),
        ('king', 'Diamonds'),
        ('2', 'Diamonds'),
        ('2', 'Spades'),
        ('2', 'Hearts')]
</snippet></ROW><ROW><id>4504483</id><snippet>from collections import defaultdict

def get_counts(hand):
    """Returns a dict mapping card ranks to counts in the given hand."""
    counts = defaultdict(int)
    for rank, suit in hand:
        counts[rank] += 1
    return counts

def get_points(hand):
    """Returns the number of points (ie, ranks with all 4 cards) in the given
    hand."""
    return sum(1 for count in get_counts(hand).itervalues() if count == 4)
</snippet></ROW><ROW><id>4504483</id><snippet>sum</snippet></ROW><ROW><id>4504483</id><snippet>get_points</snippet></ROW><ROW><id>4504483</id><snippet>&gt;&gt;&gt; get_counts(hand)
defaultdict(&lt;type 'int'&gt;, {'king': 1, '2': 4})

&gt;&gt;&gt; get_points(hand)
1
</snippet></ROW><ROW><id>4504591</id><snippet>main = gtk.VBox(False)
...
main.pack_start(self.hbox4, False)
</snippet></ROW><ROW><id>4504626</id><snippet>repr()</snippet></ROW><ROW><id>4504626</id><snippet>&gt;&gt;&gt; print repr(q[:10000])
</snippet></ROW><ROW><id>4504626</id><snippet>repr()</snippet></ROW><ROW><id>4504626</id><snippet>repr()</snippet></ROW><ROW><id>4504626</id><snippet>None</snippet></ROW><ROW><id>4504626</id><snippet>&gt;&gt;&gt; q[:10000]
</snippet></ROW><ROW><id>4504677</id><snippet>range(0, 10)</snippet></ROW><ROW><id>4504677</id><snippet>[0,1,2,3,4,5,6,7,8,9]</snippet></ROW><ROW><id>4504677</id><snippet>len(range(0, 10))</snippet></ROW><ROW><id>4504677</id><snippet>for i in range(len(li)):
  pass
</snippet></ROW><ROW><id>4504677</id><snippet>range()</snippet></ROW><ROW><id>4504677</id><snippet>len(li)</snippet></ROW><ROW><id>4504677</id><snippet>for(int i = 0; i &lt; 10; i++)</snippet></ROW><ROW><id>4504677</id><snippet>for(int i = 0; i &lt;= 9; i++)</snippet></ROW><ROW><id>4504677</id><snippet>&gt;&gt;&gt; range1 = lambda start, end: range(start, end+1)
&gt;&gt;&gt; range1(1, 10)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</snippet></ROW><ROW><id>4505221</id><snippet>class FooHandler(webapp.RequestHandler):
  def get(self, fruit, number):
    # Do something with your fruit and number (which are both strings, remember!)


application = webapp.WSGIApplication([
    ('/([^/]+)/(\d+)', FooHandler),
])
</snippet></ROW><ROW><id>4505612</id><snippet>HttpRequest</snippet></ROW><ROW><id>4505612</id><snippet>request</snippet></ROW><ROW><id>4506001</id><snippet>PyObjC</snippet></ROW><ROW><id>4506001</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>4506001</id><snippet>PyObjC</snippet></ROW><ROW><id>4506001</id><snippet>python.org</snippet></ROW><ROW><id>4506001</id><snippet>easy_install</snippet></ROW><ROW><id>4506001</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/bin/easy_install pyobjc
</snippet></ROW><ROW><id>4506001</id><snippet>defaults</snippet></ROW><ROW><id>4506001</id><snippet>defaults write com.apple.versioner.python Version 2.6
</snippet></ROW><ROW><id>4506081</id><snippet>func_code</snippet></ROW><ROW><id>4506081</id><snippet>None</snippet></ROW><ROW><id>4506081</id><snippet>import inspect, gc

def giveupthefunc():
    frame = inspect.currentframe(1)
    code  = frame.f_code
    globs = frame.f_globals
    functype = type(lambda: 0)
    funcs = []
    for func in gc.get_referrers(code):
        if type(func) is functype:
            if getattr(func, "func_code", None) is code:
                if getattr(func, "func_globals", None) is globs:
                    funcs.append(func)
                    if len(funcs) &gt; 1:
                        return None
    return funcs[0] if funcs else None
</snippet></ROW><ROW><id>4506081</id><snippet>def foo():
    return giveupthefunc()

zed = lambda: giveupthefunc()

bar, foo = foo, None

print bar()
print zed()
</snippet></ROW><ROW><id>4506098</id><snippet>self.event_chat_func</snippet></ROW><ROW><id>4506098</id><snippet>chat.VPSDK(vp, instance)</snippet></ROW><ROW><id>4506098</id><snippet>chat.VPSDK</snippet></ROW><ROW><id>4506098</id><snippet>bot</snippet></ROW><ROW><id>4506098</id><snippet>VPSDK</snippet></ROW><ROW><id>4506131</id><snippet>torrents</snippet></ROW><ROW><id>4506131</id><snippet>torrent.links[1].rel</snippet></ROW><ROW><id>4506131</id><snippet>opener = urllib2.build_opener()
torrent = opener.open(url)
savefile = open(torrent_name, "wb")
savefile.write(torrent)
savefile.close()
</snippet></ROW><ROW><id>4506256</id><snippet>$(document).ready(function() {
  Documentation.init();
  $('tbody tr:even').css('background-color','#dddddd');
});
</snippet></ROW><ROW><id>4506296</id><snippet>def setUp():
    print "In method", self._testMethodName
</snippet></ROW><ROW><id>4506398</id><snippet>&gt;&gt;&gt; def f(a1, b1, c1): print a1
... 
&gt;&gt;&gt; a = [5, 6, 9]
&gt;&gt;&gt; f(*a)
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4506398</id><snippet>&gt;&gt;&gt; a = [['a', 'b'], 5, 9]
&gt;&gt;&gt; f(*a)
['a', 'b']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4506398</id><snippet>&gt;&gt;&gt; a = ['arg1', 'arg2', 'arg3', 'arg4']
&gt;&gt;&gt; f(*a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() takes exactly 3 arguments (4 given)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4506398</id><snippet>&gt;&gt;&gt; def f(*args): print args
... 
&gt;&gt;&gt; f(*a)
('arg1', 'arg2', 'arg3', 'arg4')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4506417</id><snippet>template = Template(filename='../template/dummy.html', default_filters=['decode.utf8'], input_encoding='utf-8', output_encoding='utf-8')
</snippet></ROW><ROW><id>4506423</id><snippet>class Post(Get): # inherits the Get class above
    def __init__(self,url,data,multipart=False):
        super(HTTP.Post,self).__init__(url)
        if multipart:
            from MultipartPostHandler import MultipartPostHandler
            self._add_handler(MultipartPostHandler)
            self.request.add_data(data)
        else:
            self.request.add_data(urlencode(data))
</snippet></ROW><ROW><id>4506587</id><snippet>&gt;&gt;&gt; import this
</snippet></ROW><ROW><id>4506642</id><snippet>class Test(db.Model):
  link = db.LinkProperty()

t = Test()
t.link = 'http://google.com'

print str(t.link)
</snippet></ROW><ROW><id>4507173</id><snippet>from operator import itemgetter

all = [ [2,2],[2,1],[1,2],[1,1] ]
result = sorted(all, key=itemgetter(0,1))
</snippet></ROW><ROW><id>4507215</id><snippet>Combine</snippet></ROW><ROW><id>4507215</id><snippet>c:\program files\adobe\combiner ...</snippet></ROW><ROW><id>4507215</id><snippet>...</snippet></ROW><ROW><id>4507215</id><snippet>import subprocess
cmd = [r"c:\program files\adobe\combiner"]
cmd.extend(file_list)
p = subprocess.Popen(cmd)
</snippet></ROW><ROW><id>4507536</id><snippet>file2</snippet></ROW><ROW><id>4507536</id><snippet>new_thread</snippet></ROW><ROW><id>4507536</id><snippet>new_thread</snippet></ROW><ROW><id>4507536</id><snippet>file2</snippet></ROW><ROW><id>4507536</id><snippet>file2.py</snippet></ROW><ROW><id>4507536</id><snippet>file1.py</snippet></ROW><ROW><id>4507536</id><snippet>file2.py</snippet></ROW><ROW><id>4507536</id><snippet>def run(self):
    ...
    child_process = subprocess.Popen(args, ...)
    ...
    # time to quit - tell file2 to terminate
    child_process.terminate()
</snippet></ROW><ROW><id>4507536</id><snippet>import signal
import sys
...
kolejka = nfqueue.queue()
...
def sigterm_handler(signum, frame):
    # close kolejka and do any other cleanup needed, then do:
    sys.exit()

# Make sure sigterm_handler() is run when file1.py tells us
# to quit using child_process.terminate()
signal.signal(signal.SIGTERM, sigterm_handler)
</snippet></ROW><ROW><id>4507997</id><snippet>action</snippet></ROW><ROW><id>4507997</id><snippet>form</snippet></ROW><ROW><id>4507997</id><snippet>test/</snippet></ROW><ROW><id>4507997</id><snippet>test/&lt;first_val&gt;/&lt;second_val&gt;/&lt;third_val&gt;/</snippet></ROW><ROW><id>4507997</id><snippet>test/</snippet></ROW><ROW><id>4507997</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>4507997</id><snippet>def test_view(request):
  return HttpResponseRedirect('/test/%s/%s/%s/' % request.POST['first'],
                                                  request.POST['second'],
                                                  request.POST['third])
</snippet></ROW><ROW><id>4508083</id><snippet>module.workflow_set.filter(trigger_roles__in=self.role.id,allowed=True)
</snippet></ROW><ROW><id>4508083</id><snippet>self.role.id</snippet></ROW><ROW><id>4508083</id><snippet>module.workflow_set.filter(trigger_roles__id__exact=self.role.id,allowed=True)
</snippet></ROW><ROW><id>4508187</id><snippet>codeconv={"agt":"r1p1d", "aga":"r2p1d"}
opened_files = {}

for key, value in codeconv.items():
    file_name = "c:\Biochemistry\Pythonscripts\Splittest\split%s.txt" % value
    file=open(file_name, 'w')
    opened_files.update({key: file})
</snippet></ROW><ROW><id>4508187</id><snippet>f = opened_files['agt'] 
f.read()
....
</snippet></ROW><ROW><id>4508187</id><snippet>for f in opened_files.values():
    f.close()
</snippet></ROW><ROW><id>4508330</id><snippet>bytes = struct.pack('4s','name')
</snippet></ROW><ROW><id>4508503</id><snippet>for w in words:
    if w.startswith('x'):
      listX.append(w)
      words.remove(w)
</snippet></ROW><ROW><id>4508503</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; for i in a:
...  a.remove(i)
... 
&gt;&gt;&gt; a
[1, 3]
</snippet></ROW><ROW><id>4508503</id><snippet>1</snippet></ROW><ROW><id>4508503</id><snippet>0</snippet></ROW><ROW><id>4508503</id><snippet>1</snippet></ROW><ROW><id>4508503</id><snippet>2</snippet></ROW><ROW><id>4508503</id><snippet>1</snippet></ROW><ROW><id>4508503</id><snippet>3</snippet></ROW><ROW><id>4508503</id><snippet>4</snippet></ROW><ROW><id>4509349</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = "[^_]_[^_]|[^_]"
&gt;&gt;&gt; re.findall(pattern, "SAB_bARGS_D", re.IGNORECASE)
['S', 'A', 'B_b', 'A', 'R', 'G', 'S_D']
</snippet></ROW><ROW><id>4509686</id><snippet>if isinstance(var, str):
    var = unicode(var, 'utf-8')
else:
    var = unicode(var)
</snippet></ROW><ROW><id>4510206</id><snippet>print_exception()</snippet></ROW><ROW><id>4510206</id><snippet>traceback.format_exception()</snippet></ROW><ROW><id>4510206</id><snippet>import sys
import traceback

try:
    asdf
except NameError:
    exc_type, exc_value, exc_traceback = sys.exc_info()
    lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
    print ''.join('!! ' + line for line in lines)  # Log it or whatever here
</snippet></ROW><ROW><id>4510206</id><snippet>!! Traceback (most recent call last):
!!   File "&lt;stdin&gt;", line 2, in &lt;module&gt;
!! NameError: name 'asdf' is not defined
</snippet></ROW><ROW><id>4510298</id><snippet>install_opener</snippet></ROW><ROW><id>4510298</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>4510298</id><snippet>build_opener</snippet></ROW><ROW><id>4510298</id><snippet>import urllib2
direct = urllib2.build_opener()
proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxied = urllib2.build_opener(proxy_handler)


direct.open('http://stackoverflow.com') # opens directly
proxied.open('http://stackoverflow.com') # opens through proxy
</snippet></ROW><ROW><id>4510388</id><snippet>response = HttpResponse(open(file_path, 'rb').read(),\
                             content_type='application/zip')
</snippet></ROW><ROW><id>4510762</id><snippet>re.search()</snippet></ROW><ROW><id>4510762</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s1 = "thishasadigit4here"
&gt;&gt;&gt; m = re.search("\d", s1)
&gt;&gt;&gt; if m:
...     print "Digit found at position %d" % m.start()
... else:
...     print "No digit in that string"
... 
Digit found at position 13
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4510985</id><snippet>sys.path.append(path)</snippet></ROW><ROW><id>4510985</id><snippet>sys.path</snippet></ROW><ROW><id>4510985</id><snippet>sys.path</snippet></ROW><ROW><id>4510985</id><snippet>sys.path</snippet></ROW><ROW><id>4510985</id><snippet>sys.path.insert(0, path)</snippet></ROW><ROW><id>4510985</id><snippet>plugindir/
    __init__.py
    plugin1/
        __init__.py
    plugin2/
        __init__.py
</snippet></ROW><ROW><id>4510985</id><snippet>sys.path.insert(0, path_to_plugindir)
for folder in dirArray:
    __import__(folder)
</snippet></ROW><ROW><id>4510998</id><snippet>ugettext</snippet></ROW><ROW><id>4510998</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>4510998</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>4510998</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>4510998</id><snippet>&lt;django.utils.functional...&gt;
</snippet></ROW><ROW><id>4510998</id><snippet>return HttpResponse(ugettext_lazy("Hello").encode('utf-8'))
</snippet></ROW><ROW><id>4511124</id><snippet>from celery.decorators import task

@task
def publish_post(post_id):
    ''' Sets the status of a post to Published '''
    from blog.models import Post

    Post.objects.filter(pk=post_id).update(status=Post.STATUS_PUBLISHED)
</snippet></ROW><ROW><id>4511124</id><snippet>from celery.decorators import task

@task
def publish_post(post_id):
    ''' Sets the status of a post to Published '''
    from blog.models import Post
    from datetime import datetime

    Post.objects.filter(
        pk=post_id,
        date_published__lte=datetime.now(),
        status=Post.STATUS_SCHEDULED
    ).update(status=Post.STATUS_PUBLISHED)
</snippet></ROW><ROW><id>4511776</id><snippet>rpmbuild -bs</snippet></ROW><ROW><id>4511785</id><snippet>import httplib 
conn = httplib.HTTPConnection('www.foo.com')
conn.request('PUT', '/myurl', body) 
resp = conn.getresponse()
content = resp.read()
</snippet></ROW><ROW><id>4511785</id><snippet>import urllib2
opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request('http://example.org', data='your_put_data')
request.add_header('Content-Type', 'your/contenttype')
request.get_method = lambda: 'PUT'
url = opener.open(request)
</snippet></ROW><ROW><id>4512427</id><snippet>(VARIABLE1,
VARIABLE2,
VARIABLE3,
...
VARIABLE14) = range(14)
</snippet></ROW><ROW><id>4512459</id><snippet>ush</snippet></ROW><ROW><id>4512721</id><snippet>def strip_accents(text):
    return ''.join(char for char in
                   unicodedata.normalize('NFKD', text)
                   if unicodedata.category(char) != 'Mn')

&gt;&gt;&gt; strip_accents('áéíñóúü')
'aeinouu'
&gt;&gt;&gt; strip_accents('Ramírez Sánchez')
'Ramirez Sanchez'
</snippet></ROW><ROW><id>4512721</id><snippet>&gt;&gt;&gt; strip_accents('ø')
'ø'
</snippet></ROW><ROW><id>4512880</id><snippet>stdin</snippet></ROW><ROW><id>4512880</id><snippet>stdout</snippet></ROW><ROW><id>4512880</id><snippet>stderr</snippet></ROW><ROW><id>4512880</id><snippet>sys</snippet></ROW><ROW><id>4512880</id><snippet>StringIO</snippet></ROW><ROW><id>4513009</id><snippet>"blah"</snippet></ROW><ROW><id>4513009</id><snippet>move_key</snippet></ROW><ROW><id>4513167</id><snippet>io</snippet></ROW><ROW><id>4513167</id><snippet>io</snippet></ROW><ROW><id>4513167</id><snippet>&gt;&gt;&gt; f1 = open('test.txt','w')
</snippet></ROW><ROW><id>4513167</id><snippet>&gt;&gt;&gt; f1 = io.open('test.txt','wb')
</snippet></ROW><ROW><id>4513214</id><snippet>classmap = {
  'foo': foo
}

obj = classmap[parser['name']]()
</snippet></ROW><ROW><id>4513537</id><snippet>link = 'https://graph.facebook.com/123'
result = browser.open(link)
data = json.load(result)
print data['id']
</snippet></ROW><ROW><id>4513632</id><snippet>import xml.sax.xmlreader
import xml.sax.saxutils

def testJunk(file, e2content):
  attr0 = xml.sax.xmlreader.AttributesImpl({})
  x =  xml.sax.saxutils.XMLGenerator(file)
  x.startDocument()
  x.startElement("document", attr0)

  x.startElement("element1", attr0)
  x.characters("bingo")
  x.endElement("element1")

  x.startElement("element2", attr0)
  x.characters(e2content)
  x.endElement("element2")

  x.endElement("document")
  x.endDocument()
</snippet></ROW><ROW><id>4513632</id><snippet>&gt;&gt;&gt; import xmltest
&gt;&gt;&gt; xmltest.testJunk(open("test.xml","w"), "wham &lt; 3!")
</snippet></ROW><ROW><id>4513632</id><snippet>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;document&gt;&lt;element1&gt;bingo&lt;/element1&gt;&lt;element2&gt;wham &lt; 3!&lt;/element2&gt;&lt;/document&gt;
</snippet></ROW><ROW><id>4513723</id><snippet>&gt;&gt;&gt;&gt; date.fromtimestamp(0)
datetime.date(1969, 12, 31)
&gt;&gt;&gt; date.fromtimestamp(-1)
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: timestamp out of range for platform localtime() function
</snippet></ROW><ROW><id>4513740</id><snippet>from ftplib import *
from os import listdir
from os.path import getsize


ftp_dt = FTP(host,user,password)
ftp_pi = FTP(host,user,password)
print '\n- Ouverture de connection et logging : OK'


ftp_dt.cwd('public_html/soleil')
ftp_pi.cwd('public_html/soleil')


def func(content, li = [0], la = [], si = [0], memname = ['']):
    if name!=memname[0]:
        memname[0],li[0:1],la[:],si[0:1] = name,[0],[],[0]
    li[0] = li[0] + 1
    si[0] = si[0] + len(content)
    la.append(str(len(content)))
    if li[0]%8==0:
        print '  '.join(la) +\
              '   total: '+str(li[0])+' chunks,  '+str(si[0])+' bytes'
        la[:] = []
    f.write(content)


li_files = []
for name in ftp_dt.nlst():
    try:
        ftp_dt.size(name)
        if name not in ('.','..') and name[-4:]=='.pdf':
            li_files.append(name)
    except:
        pass


if li_files:
    for name in li_files:
        print '\n- Downloading  '+name

        with open('E:\\PDF\\DOWNS\\'+name,'wb') as f:
            ftp_pi.retrbinary('RETR '+name,func)

        if getsize('E:\\PDF\\DOWNS\\'+name)==ftp_dt.size(name):
            print '   OK !  Download of complete  '+repr(name)+'  SUCCEEDED'
        else:
            print '   FAILURE !! :  '+name+'  only partially downloaded'
else:
    print '\nThere is no PDF file in this FTP directory'


ftp_dt.quit()
ftp_pi.quit()
</snippet></ROW><ROW><id>4513740</id><snippet>def func(content):
    f.write()
</snippet></ROW><ROW><id>4513887</id><snippet> randint(1,0)
</snippet></ROW><ROW><id>4513887</id><snippet> empty range for randrange()
</snippet></ROW><ROW><id>4514174</id><snippet>dict</snippet></ROW><ROW><id>4514174</id><snippet>return dict((u.id, u.name) for u in users)
</snippet></ROW><ROW><id>4514206</id><snippet>EventForm</snippet></ROW><ROW><id>4514206</id><snippet>cost</snippet></ROW><ROW><id>4514206</id><snippet>model.TextField</snippet></ROW><ROW><id>4514206</id><snippet>forms.CharField</snippet></ROW><ROW><id>4514284</id><snippet>request.get_host()</snippet></ROW><ROW><id>4514398</id><snippet>run_with_reloader</snippet></ROW><ROW><id>4514398</id><snippet>serving.py</snippet></ROW><ROW><id>4514398</id><snippet>restart_with_reloader</snippet></ROW><ROW><id>4514398</id><snippet>reloader_loop</snippet></ROW><ROW><id>4514398</id><snippet>run_with_reloader</snippet></ROW><ROW><id>4514398</id><snippet>thread</snippet></ROW><ROW><id>4514398</id><snippet>reloader_loop</snippet></ROW><ROW><id>4514398</id><snippet>reloader_loop</snippet></ROW><ROW><id>4514398</id><snippet>def reloader_loop(extra_files=None, interval=1):
    """When this function is run from the main thread, it will force other
    threads to exit when any modules currently loaded change.

    Copyright notice.  This function is based on the autoreload.py from
    the CherryPy trac which originated from WSGIKit which is now dead.

    :param extra_files: a list of additional files it should watch.
    """
    def iter_module_files():
        for module in sys.modules.values():
            filename = getattr(module, '__file__', None)
            if filename:
                old = None
                while not os.path.isfile(filename):
                    old = filename
                    filename = os.path.dirname(filename)
                    if filename == old:
                        break
                else:
                    if filename[-4:] in ('.pyc', '.pyo'):
                        filename = filename[:-1]
                    yield filename

    mtimes = {}
    while 1:
        for filename in chain(iter_module_files(), extra_files or ()):
            try:
                mtime = os.stat(filename).st_mtime
            except OSError:
                continue

            old_time = mtimes.get(filename)
            if old_time is None:
                mtimes[filename] = mtime
                continue
            elif mtime &gt; old_time:
                _log('info', ' * Detected change in %r, reloading' % filename)
                sys.exit(3)
        time.sleep(interval)


def restart_with_reloader():
    """Spawn a new Python interpreter with the same arguments as this one,
    but running the reloader thread.
    """
    while 1:
        _log('info', ' * Restarting with reloader...')
        args = [sys.executable] + sys.argv
        new_environ = os.environ.copy()
        new_environ['WERKZEUG_RUN_MAIN'] = 'true'

        # a weird bug on windows. sometimes unicode strings end up in the
        # environment and subprocess.call does not like this, encode them
        # to latin1 and continue.
        if os.name == 'nt':
            for key, value in new_environ.iteritems():
                if isinstance(value, unicode):
                    new_environ[key] = value.encode('iso-8859-1')

        exit_code = subprocess.call(args, env=new_environ)
        if exit_code != 3:
            return exit_code


def run_with_reloader(main_func, extra_files=None, interval=1):
    """Run the given function in an independent python interpreter."""
    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
        thread.start_new_thread(main_func, ())
        try:
            reloader_loop(extra_files, interval)
        except KeyboardInterrupt:
            return
    try:
        sys.exit(restart_with_reloader())
    except KeyboardInterrupt:
        pass
</snippet></ROW><ROW><id>4514421</id><snippet>"\001"</snippet></ROW><ROW><id>4514421</id><snippet>&gt;&gt;&gt; import xml.etree.cElementTree as ET
# Raw newline works
&gt;&gt;&gt; t = ET.fromstring("&lt;e&gt;\n&lt;/e&gt;")
&gt;&gt;&gt; t.text
'\n'

# Hex escaping of a newline works
&gt;&gt;&gt; t = ET.fromstring("&lt;e&gt;
&lt;/e&gt;")
&gt;&gt;&gt; t.text
'\n'

# Hex escaping of "\x01" doesn't work; it's not a valid XML character
&gt;&gt;&gt; t = ET.fromstring("&lt;e&gt;&#1;&lt;/e&gt;")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 106, in XML
cElementTree.ParseError: reference to invalid character number: line 1, column 3
</snippet></ROW><ROW><id>4514421</id><snippet>_xhhhh_</snippet></ROW><ROW><id>4514421</id><snippet>hhhh</snippet></ROW><ROW><id>4514421</id><snippet>_x0001_</snippet></ROW><ROW><id>4514421</id><snippet>_</snippet></ROW><ROW><id>4514421</id><snippet>_xhhhh_</snippet></ROW><ROW><id>4514421</id><snippet>\r</snippet></ROW><ROW><id>4514421</id><snippet>&lt;u&gt;hhhh&lt;/u&gt;</snippet></ROW><ROW><id>4514421</id><snippet>if (len(g1) &gt; 0):</snippet></ROW><ROW><id>4514421</id><snippet>if g1:</snippet></ROW><ROW><id>4514421</id><snippet>if (not foo == None):</snippet></ROW><ROW><id>4514421</id><snippet>not x == y</snippet></ROW><ROW><id>4514421</id><snippet>x != y</snippet></ROW><ROW><id>4514421</id><snippet>!= None</snippet></ROW><ROW><id>4514421</id><snippet>is not None</snippet></ROW><ROW><id>4514421</id><snippet>list</snippet></ROW><ROW><id>4514421</id><snippet>splitInvalidXML2 = re.compile(
    ur'([^\x09\x0A\x0D\x20-\x7E\x85\xA0-\xFF\u0100-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD])'
    ).split

def submitCharacters2(x, string):
    badchar = True
    for fragment in splitInvalidXML2(string):
        badchar = not badchar
        if badchar:
            x.startElement("u", attr0)
            x.characters('%04X' % ord(fragment))
            x.endElement("u")
        elif fragment:
            x.characters(fragment)
</snippet></ROW><ROW><id>4514520</id><snippet>self.connect(lb, SIGNAL('doubleClicked()'), self.someMethod)
</snippet></ROW><ROW><id>4514520</id><snippet>lb.doubleClicked.connect(self.someMethod)
</snippet></ROW><ROW><id>4514577</id><snippet>reindent.py</snippet></ROW><ROW><id>4514776</id><snippet>ls</snippet></ROW><ROW><id>4514776</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>4514776</id><snippet>&gt;&gt;&gt; proc = subprocess.Popen('ls', stdout=subprocess.PIPE)
&gt;&gt;&gt; output = proc.stdout.read()
&gt;&gt;&gt; print output
bar
baz
foo
</snippet></ROW><ROW><id>4514776</id><snippet>cdrecord --help</snippet></ROW><ROW><id>4514776</id><snippet>shell=True</snippet></ROW><ROW><id>4514776</id><snippet>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stderr=subprocess.PIPE)
&gt;&gt;&gt; output = proc.stderr.read()
&gt;&gt;&gt; print output
Usage: wodim [options] track1...trackn
Options:
    -version    print version information and exit
    dev=target  SCSI target to use as CD/DVD-Recorder
    gracetime=# set the grace time before starting to write to #.
...
</snippet></ROW><ROW><id>4514776</id><snippet>subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>4514776</id><snippet>proc.communicate()</snippet></ROW><ROW><id>4514776</id><snippet>proc.read()</snippet></ROW><ROW><id>4514776</id><snippet>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = proc.communicate()
&gt;&gt;&gt; print 'stdout:', out
stdout: 
&gt;&gt;&gt; print 'stderr:', err
stderr:Usage: wodim [options] track1...trackn
Options:
    -version    print version information and exit
    dev=target  SCSI target to use as CD/DVD-Recorder
    gracetime=# set the grace time before starting to write to #.
...
</snippet></ROW><ROW><id>4514948</id><snippet>__bases__</snippet></ROW><ROW><id>4514948</id><snippet>class StoryHTMLMixin(object):
    def render(self):
        return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
            "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
            % (self.name, self.content))

class Story(object, StoryHTMLMixin):
    def __init__(self, name, content):
        self.name = name
        self.content = content
</snippet></ROW><ROW><id>4514948</id><snippet>StoryHTMLMixin &lt;--- Story
            |   _____/
            |  |
            v  v
           object
</snippet></ROW><ROW><id>4514948</id><snippet>object</snippet></ROW><ROW><id>4514948</id><snippet>Story</snippet></ROW><ROW><id>4514948</id><snippet>StoryHTMLMixin</snippet></ROW><ROW><id>4514948</id><snippet>TypeError: __bases__ assignment: 'StoryHTMLMixin' deallocator differs from 'object'</snippet></ROW><ROW><id>4514948</id><snippet>class Story(object):
    def __init__(self, name, content):
        self.name = name
        self.content = content

class StoryHTMLMixin(object):
    def render(self):
        return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
            "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
            % (self.name, self.content))

def MixIn(TargetClass, MixInClass, name=None):
    if name is None:
        name = "mixed_%s_with_%s" % (TargetClass.__name__, MixInClass.__name__)

    class CombinedClass(TargetClass, MixInClass):
        pass

    CombinedClass.__name__ = name
    return CombinedClass

if __name__ == "__main__":
    MixedStory = MixIn(Story, StoryHTMLMixin, "MixedStory")
    my_story = MixedStory("My Life", "&lt;p&gt;Is good.&lt;/p&gt;")
    print my_story.render()
</snippet></ROW><ROW><id>4515144</id><snippet>a.html</snippet></ROW><ROW><id>4515144</id><snippet>a.html</snippet></ROW><ROW><id>4515144</id><snippet>app_a/a.html</snippet></ROW><ROW><id>4515144</id><snippet>mysite
    app_a
       templates
           app_a
               a.html
    app_b
       templates
           app_b
               b.html
       views.py

    global_templates
       app_b
            b.html
</snippet></ROW><ROW><id>4515144</id><snippet>app_a/a.html</snippet></ROW><ROW><id>4515146</id><snippet>__import__('cmds.' + command_name)
</snippet></ROW><ROW><id>4515279</id><snippet>simplerandom</snippet></ROW><ROW><id>4515279</id><snippet>.pyx</snippet></ROW><ROW><id>4515279</id><snippet>Cython.Distutils.build_ext</snippet></ROW><ROW><id>4515279</id><snippet>.c</snippet></ROW><ROW><id>4515279</id><snippet>.pyx</snippet></ROW><ROW><id>4515279</id><snippet>setup.py</snippet></ROW><ROW><id>4515279</id><snippet>from distutils.core import setup
from distutils.extension import Extension

try:
    from Cython.Distutils import build_ext
except ImportError:
    use_cython = False
else:
    use_cython = True

cmdclass = { }
ext_modules = [ ]

if use_cython:
    ext_modules += [
        Extension("mypackage.mycythonmodule", [ "cython/mycythonmodule.pyx" ]),
    ]
    cmdclass.update({ 'build_ext': build_ext })
else:
    ext_modules += [
        Extension("mypackage.mycythonmodule", [ "cython/mycythonmodule.c" ]),
    ]

setup(
    name='mypackage',
    ...
    cmdclass = cmdclass,
    ext_modules=ext_modules,
    ...
)
</snippet></ROW><ROW><id>4515279</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>4515279</id><snippet>mycythonmodule.c</snippet></ROW><ROW><id>4515279</id><snippet>python setup.py sdist</snippet></ROW><ROW><id>4515279</id><snippet>...
recursive-include cython *
...
</snippet></ROW><ROW><id>4515279</id><snippet>mycythonmodule.c</snippet></ROW><ROW><id>4515279</id><snippet>python setup.py build_ext</snippet></ROW><ROW><id>4515279</id><snippet>mycythonmodule.c</snippet></ROW><ROW><id>4515514</id><snippet>MacPorts</snippet></ROW><ROW><id>4515514</id><snippet>Fink</snippet></ROW><ROW><id>4515514</id><snippet>Homebrew</snippet></ROW><ROW><id>4515514</id><snippet>MacPorts</snippet></ROW><ROW><id>4515514</id><snippet>$ sudo port selfupdate
</snippet></ROW><ROW><id>4515514</id><snippet>$ sudo port install py26-mysql
</snippet></ROW><ROW><id>4515514</id><snippet>$ /opt/local/bin/python2.6 -c "import MySQLdb; print(MySQLdb.version_info)"
(1, 2, 3, 'final', 0)
</snippet></ROW><ROW><id>4515514</id><snippet>$ sudo port clean db46
$ sudo port install db46 +no_java
$ sudo port install py26-mysql
</snippet></ROW><ROW><id>4515516</id><snippet>p = Process(target=d.start())</snippet></ROW><ROW><id>4515516</id><snippet>d.start()</snippet></ROW><ROW><id>4515516</id><snippet>...
def main():
    jobQueue = Queue()
    jobQueue.put("http://google.com")
    d = Downloader(jobQueue)
    p = Process(target=d.start)
    p.start()

if __name__ == '__main__':
    freeze_support()
    main()
</snippet></ROW><ROW><id>4516443</id><snippet>result = arr.get('key1', arr.get('key2', arr.get('key3')))
</snippet></ROW><ROW><id>4517012</id><snippet>Run Script</snippet></ROW><ROW><id>4517012</id><snippet>Run Script in Terminal</snippet></ROW><ROW><id>4517012</id><snippet>Run Script command</snippet></ROW><ROW><id>4517012</id><snippet>Run Script in Terminal</snippet></ROW><ROW><id>4517012</id><snippet>#! /usr/local/bin/python3
import sys
print(sys.executable)
</snippet></ROW><ROW><id>4517012</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>4517294</id><snippet>for line in f:
    print line
</snippet></ROW><ROW><id>4517294</id><snippet>\n</snippet></ROW><ROW><id>4517294</id><snippet>\r\n</snippet></ROW><ROW><id>4517294</id><snippet>import sys
while True:
    data = f.read(4096)
    sys.stdout.write(data)
    if not data:
        break
</snippet></ROW><ROW><id>4517294</id><snippet>-u</snippet></ROW><ROW><id>4517560</id><snippet>firefox = webbrowser.get('firefox')
</snippet></ROW><ROW><id>4518738</id><snippet>SyntaxError</snippet></ROW><ROW><id>4518738</id><snippet>raise</snippet></ROW><ROW><id>4518738</id><snippet>or raise KeyError</snippet></ROW><ROW><id>4518738</id><snippet>None</snippet></ROW><ROW><id>4518738</id><snippet>0</snippet></ROW><ROW><id>4518738</id><snippet>''</snippet></ROW><ROW><id>4518738</id><snippet>def raise_KeyError(msg=''): raise KeyError(msg)

try:
   protocol = serverInfo_D['protocol'] or raise_KeyError('protocol not present')
except KeyError:
   print 'server config is not proper'
</snippet></ROW><ROW><id>4518941</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>4518941</id><snippet>user.record["fullname"] + u" 准备好了"
</snippet></ROW><ROW><id>4518941</id><snippet>unicode(user.record["fullname"]) + u" 准备好了"
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         Problem
</snippet></ROW><ROW><id>4518941</id><snippet>unicode(something)</snippet></ROW><ROW><id>4518941</id><snippet>user.record["fullname"]</snippet></ROW><ROW><id>4518941</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>4518941</id><snippet># Decode the str to unicode using the right encoding
# here i used utf-8 because mostly is the right one but maybe it not (another problem!!!)
a = user.record["fullname"].decode('utf-8')

self.talk(a + u" 准备好了")
</snippet></ROW><ROW><id>4519044</id><snippet>8.833333333339</snippet></ROW><ROW><id>4519044</id><snippet>8.833333333333334</snippet></ROW><ROW><id>4519044</id><snippet>8.83</snippet></ROW><ROW><id>4519044</id><snippet>math</snippet></ROW><ROW><id>4519044</id><snippet>ceil</snippet></ROW><ROW><id>4519044</id><snippet>import math

v = 8.8333333333333339
print math.ceil(v*100)/100
# 8.84
</snippet></ROW><ROW><id>4519044</id><snippet>8.76</snippet></ROW><ROW><id>4519044</id><snippet>8.83</snippet></ROW><ROW><id>4519044</id><snippet>8.87</snippet></ROW><ROW><id>4520116</id><snippet>import subprocess

def callback(self, widget, date=None):
    cmd = "Your command here"
    other_process = subprocess.Popen(cmd, shell=True)
</snippet></ROW><ROW><id>4520385</id><snippet>str</snippet></ROW><ROW><id>4520385</id><snippet>UserString.MutableString</snippet></ROW><ROW><id>4520385</id><snippet>class MutableString(object):
    def __init__(self, value):
        self.value = value

    def conc(self, value, delim=' '):
        self.value = "{self.value}{delim}{value}".format(**locals())

    def __str__(self):
        return self.value
</snippet></ROW><ROW><id>4520385</id><snippet>StringIO</snippet></ROW><ROW><id>4520385</id><snippet>StringIO</snippet></ROW><ROW><id>4520385</id><snippet>super</snippet></ROW><ROW><id>4520385</id><snippet>&gt;&gt;&gt; from StringIO import StringIO as sIO
&gt;&gt;&gt; class DelimitedStringIO(sIO):
...     def __init__(self, initial, *args, **kwargs):
...             sIO.__init__(self, *args, **kwargs)
...             self.write(initial)
...
...     def conc(self, value, delim=" "):
...             self.write(delim)
...             self.write(value)
...
...     def __str__(self):
...             return self.getvalue()
...
&gt;&gt;&gt; x = DelimitedStringIO("Hello")
&gt;&gt;&gt; x.conc("Alice")
&gt;&gt;&gt; x.conc("Bob", delim=", ")
&gt;&gt;&gt; x.conc("Charlie", delim=", and ")
&gt;&gt;&gt; print x
Hello Alice, Bob, and Charlie
</snippet></ROW><ROW><id>4520385</id><snippet>__repr__</snippet></ROW><ROW><id>4520385</id><snippet>x</snippet></ROW><ROW><id>4520385</id><snippet>__repr__</snippet></ROW><ROW><id>4520509</id><snippet>if request.env.http_referrer:
    redirect(request.env.http_referrer)
</snippet></ROW><ROW><id>4520691</id><snippet>import gtk

def new_button_pressed(widget, data=None):
    ## data is a reference to the dialog widget
    ## do some validation, in this case the folder has to start with "/home"
    if not(data.get_filename().startswith("/home")):
        ## force cancel response
        print "failed validation..."        
        data.response(gtk.RESPONSE_CANCEL)
    else:
        print "success validation..."
        data.response(gtk.RESPONSE_OK)

newDialog = gtk.FileChooserDialog(
title="Create new folder", parent=None, 
action=gtk.FILE_CHOOSER_ACTION_CREATE_FOLDER, 
buttons= (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL), backend=None)
new_button = newDialog.add_button(gtk.STOCK_NEW, gtk.RESPONSE_OK)
new_button.connect("pressed", new_button_pressed, newDialog)
newDialog.run()
</snippet></ROW><ROW><id>4520888</id><snippet>python-mode</snippet></ROW><ROW><id>4520888</id><snippet>py-shell</snippet></ROW><ROW><id>4521533</id><snippet>csv</snippet></ROW><ROW><id>4521533</id><snippet>import csv
...

input = open(in_fnam, 'rb')
output = open(out_fnam, 'wb')
writer = csv.writer(output)
for row in csv.reader(input):
    if row:
        writer.writerow(row)
input.close()
output.close()
</snippet></ROW><ROW><id>4521533</id><snippet>if row:</snippet></ROW><ROW><id>4521533</id><snippet>if any(row):
</snippet></ROW><ROW><id>4521533</id><snippet>if any(field.strip() for field in row):
</snippet></ROW><ROW><id>4521625</id><snippet>sock.getOutPutStream().write(Integer.toString(mPort))

s._PORT = int(s._sock.recv(1024))
</snippet></ROW><ROW><id>4521628</id><snippet>cur = con.execute(
         "insert into sometable OUTPUT INSERTED.idcolumn values('something')"
         )
</snippet></ROW><ROW><id>4521652</id><snippet>leastsq</snippet></ROW><ROW><id>4521652</id><snippet>import numpy as np
import scipy.optimize as optimize
import collections

x = np.array([821,576,473,377,326,300])
y = np.array([255,235,208,166,157,140])

def sigmoid(p,x):
    x0,y0,c,k=p
    y = c / (1 + np.exp(-k*(x-x0))) + y0
    return y

def residuals(p,x,y):
    return y - sigmoid(p,x)

Param=collections.namedtuple('Param','x0 y0 c k')
p_guess=Param(x0=600,y0=200,c=100,k=0.01)
p,cov,infodict,mesg,ier = optimize.leastsq(
    residuals,p_guess,args=(x,y),full_output=1,warning=True)
p=Param(*p)
xp = np.linspace(100, 1600, 1500)
print('''\
x0 = {p.x0}
y0 = {p.y0}
c = {p.c}
k = {p.k}
'''.format(p=p))
</snippet></ROW><ROW><id>4521652</id><snippet>resid=residuals(p,x,y)
print(resid)
# [ 0.76205302 -2.010142    2.60265297 -3.02849144  1.6739274 ]
</snippet></ROW><ROW><id>4521652</id><snippet>resid</snippet></ROW><ROW><id>4521652</id><snippet>infodict['fvec']</snippet></ROW><ROW><id>4521652</id><snippet>print(infodict['fvec'])
# [ 0.76205302 -2.010142    2.60265297 -3.02849144  1.6739274 ]

chisq=(infodict['fvec']**2).sum()
# dof is degrees of freedom
dof=len(x)-len(p)
rmse=np.sqrt(chisq/dof)
print(rmse)
# 5.40092057562
</snippet></ROW><ROW><id>4521669</id><snippet>decimal</snippet></ROW><ROW><id>4521669</id><snippet>math</snippet></ROW><ROW><id>4521669</id><snippet>ceil</snippet></ROW><ROW><id>4521669</id><snippet>decimal.getcontext().prec</snippet></ROW><ROW><id>4521669</id><snippet>3</snippet></ROW><ROW><id>4521669</id><snippet>import decimal

def main():
    principle = decimal.Decimal(raw_input('Please enter your loan amount:'))
    rate = decimal.Decimal(raw_input('Please enter rate of interest (percent):')) / 100
    term = decimal.Decimal(raw_input('Please enter loan period (years):')) * 12

    interest = (principle * rate).quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_HALF_EVEN)
    balance = principle + interest
    payment = (balance / term).quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_CEILING)
    print "Payment\t\tAmount Paid\t\tRem.Bal."
    for count in range(1+term):
        if count == 0:
            print count, "\t\t0.00\t\t\t", balance
        elif count == term: # last payment?
            payment = balance
            balance -= payment
            print count, "\t\t", payment, "\t\t\t", balance
        else:
            balance -= payment
            print count, "\t\t", payment, "\t\t\t", balance

main()

# &gt; python loan_calc.py
# Please enter your loan amount:100
# Please enter rate of interest (percent):6
# Please enter loan period (years):1
# Payment         Amount Paid             Rem.Bal.
# 0               0.00                    106.00
# 1               8.84                    97.16
# 2               8.84                    88.32
# 3               8.84                    79.48
# 4               8.84                    70.64
# 5               8.84                    61.80
# 6               8.84                    52.96
# 7               8.84                    44.12
# 8               8.84                    35.28
# 9               8.84                    26.44
# 10              8.84                    17.60
# 11              8.84                    8.76
# 12              8.76                    0.00
</snippet></ROW><ROW><id>4521863</id><snippet>repr</snippet></ROW><ROW><id>4521863</id><snippet>obj = pickle.loads(%s)
</snippet></ROW><ROW><id>4521863</id><snippet>%s</snippet></ROW><ROW><id>4521863</id><snippet>repr(pickle.dumps(obj))</snippet></ROW><ROW><id>4521943</id><snippet>settings.py</snippet></ROW><ROW><id>4521943</id><snippet>from django.conf import settings

COLOR_CHOICES = getattr(settings, 'COLOR_CHOICES',(
        ('R', 'Red'),
        ('B', 'Blue'),
        ('G', 'Green'),
 ))
</snippet></ROW><ROW><id>4521943</id><snippet>settings.py</snippet></ROW><ROW><id>4522896</id><snippet>import operator

class CommonEqualityMixin(object):

    __slots__ = ()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            if self.__slots__ == other.__slots__:
                 attr_getters = [operator.attrgetter(attr) for attr in self.__slots__]
                 return all(getter(self) == getter(other) for getter in attr_getters)

        return False

    def __ne__(self, other):
        return not self.__eq__(other)
</snippet></ROW><ROW><id>4522896</id><snippet>class Foo(CommonEqualityMixin):
    __slots__ = ('a', )
    def __init__(self, a):
        self.a = a

Foo(1) == Foo(2)
# False
Foo(1) == Foo(1)
# True
</snippet></ROW><ROW><id>4522896</id><snippet>__slots__</snippet></ROW><ROW><id>4522896</id><snippet>__dict__</snippet></ROW><ROW><id>4522896</id><snippet>class FooBar(Foo):
    __slots__ = ('z')
    def __init__(self, a, z):
        self.z = z
        super(FooBar, self).__init__(a)

FooBar(1, 1) == FooBar(2, 1)
# True

print FooBar(1, 1).__slots__
# 'z'
</snippet></ROW><ROW><id>4523014</id><snippet>from foo.conf import settings
</snippet></ROW><ROW><id>4523014</id><snippet>foo = __import__('foo')
conf = __import__('foo.conf').conf
settings = __import__('foo.conf.settings').conf.settings
</snippet></ROW><ROW><id>4523242</id><snippet>c</snippet></ROW><ROW><id>4523242</id><snippet>int</snippet></ROW><ROW><id>4523242</id><snippet>float</snippet></ROW><ROW><id>4523242</id><snippet>b[:,1]=numpy.nan
c = numpy.r_[a, b]
c.sort(0)
c = c[numpy.unique(c[:,0], True)[1]]
</snippet></ROW><ROW><id>4523458</id><snippet>3</snippet></ROW><ROW><id>4523458</id><snippet>[3, 4]</snippet></ROW><ROW><id>4523458</id><snippet>&gt;&gt;&gt; array([[1, 2], [3, 4]])
array([[1, 2],
       [3, 4]])
</snippet></ROW><ROW><id>4523520</id><snippet>b = bytes([x])
</snippet></ROW><ROW><id>4523520</id><snippet>&gt;&gt;&gt; bytes([255])
b'\xff'
</snippet></ROW><ROW><id>4523564</id><snippet>bin(ord('P'))
# 0b1010000
</snippet></ROW><ROW><id>4523685</id><snippet>#!c:/Python27/python.exe -u

import sys

print "Content-Type: text/plain;"
print "Content-Disposition: attachment; filename=TEST.txt"
print

filename = "C:\\TEST.TXT"
f = open(filename, 'rb')
while True:
    data = f.read(4096)
    sys.stdout.write(data)
    if not data:
        break
</snippet></ROW><ROW><id>4523912</id><snippet>mysite</snippet></ROW><ROW><id>4523912</id><snippet>mysite/__init__.py</snippet></ROW><ROW><id>4524137</id><snippet>cities.sort()
for i in range(len(cities)):
    print "(%d, '%s', 0, '%s')" % (i+1, cities[i], cities[i])
</snippet></ROW><ROW><id>4524137</id><snippet>(1, 'Boca Raton', 0, 'Boca Raton')
(2, 'Boynton Beach', 0, 'Boynton Beach')
(3, 'Bradenton', 0, 'Bradenton')
(4, 'Cape Coral', 0, 'Cape Coral')
(5, 'Deltona', 0, 'Deltona')
</snippet></ROW><ROW><id>4524393</id><snippet>sys.path</snippet></ROW><ROW><id>4524393</id><snippet>C:\Users\Max\Documents\pysal\pysal.py</snippet></ROW><ROW><id>4524393</id><snippet>C:\Users\Max\Documents\pysal\pysal\__init__.py</snippet></ROW><ROW><id>4524486</id><snippet>def foo(a):
    """Take a number a and return its value incremented by 1."""
    return a + 1
</snippet></ROW><ROW><id>4524486</id><snippet>def build_connection_string(params):
    """Build a connection string from a dictionary of parameters.

    Return string."""
</snippet></ROW><ROW><id>4525038</id><snippet># Daily:
every day 00:00

# Weekly:
every monday 00:00

# Monthly:
1 of month 00:00

# Yearly:
1 of jan 00:00
</snippet></ROW><ROW><id>4525290</id><snippet>AuditColumns</snippet></ROW><ROW><id>4525290</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>4525294</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; tree = lxml.html.parse('test.html')
&gt;&gt;&gt; for node in tree.xpath('/html/body/div/table[2]/tbody/tr/td[2]'):
...     print node.text
...          
first row, second column
second row, second column
</snippet></ROW><ROW><id>4525422</id><snippet>print "%d %d closed" % (now_text, remote_port)
</snippet></ROW><ROW><id>4525422</id><snippet>print("{0} {1} closed".format(now_text, remote_port))
</snippet></ROW><ROW><id>4525422</id><snippet>.format()</snippet></ROW><ROW><id>4525557</id><snippet>os.system</snippet></ROW><ROW><id>4525615</id><snippet>os.system("screencapture screen.png")
</snippet></ROW><ROW><id>4525699</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r"DATE: (\d+)Key Type: (.*?) Key: ((?:\w{5}-){5}\w{5})")
&gt;&gt;&gt; match = regex.match("DATE: 12242010Key Type: Nod32 Anti-Vir (30d trial) Key: a5B2s-sH12B-hgtY3-io87N-srg98-KLMNO")
&gt;&gt;&gt; mydict = {"DATE": match.group(1),
...           "Key Type": match.group(2),
...           "Key": match.group(3)}
&gt;&gt;&gt; mydict
{'DATE': '12242010', 'Key': 'a5B2s-sH12B-hgtY3-io87N-srg98-KLMNO', 'Key Type': '
Nod32 Anti-Vir (30d trial)'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4525699</id><snippet>DATE: (\d+)Key Type: (.*?) Key: ((?:\w{5}-){5}\w{5})</snippet></ROW><ROW><id>4525853</id><snippet>&gt;&gt;&gt; def foo():
...     return 1, 2, 3, 4 # Returns a tuple
&gt;&gt;&gt; foo()
(1, 2, 3, 4)

&gt;&gt;&gt; a, b, c, d = foo()
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
&gt;&gt;&gt; c
3
&gt;&gt;&gt; d
4
</snippet></ROW><ROW><id>4525853</id><snippet>&gt;&gt;&gt; a, *b = foo()
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2, 3, 4]
&gt;&gt;&gt; *a, b = foo()
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; b
4
&gt;&gt;&gt; a, *b, c = foo()
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2, 3]
&gt;&gt;&gt; c
4
</snippet></ROW><ROW><id>4526549</id><snippet>class First:
    def __init__(self):
        self.str = ""

    @classmethod
    def TQ(self):
        pass

    def main(self):
        T = Second(self.str) # Called here

class Second():
    def __init__(self):
        list =  {u"RANDINT":First.TQ} # List of funcs maybe called in first
        .....
        .....
        return data
</snippet></ROW><ROW><id>4526831</id><snippet>print a, b</snippet></ROW><ROW><id>4526831</id><snippet>print (a,b)</snippet></ROW><ROW><id>4526831</id><snippet>&gt;&gt;&gt; a, b = "ab"
&gt;&gt;&gt; a
'a'
&gt;&gt;&gt; b
'b'
&gt;&gt;&gt; print a, b
a b
&gt;&gt;&gt; print (a, b)
('a', 'b')
</snippet></ROW><ROW><id>4526831</id><snippet>print a, b</snippet></ROW><ROW><id>4526831</id><snippet>a</snippet></ROW><ROW><id>4526831</id><snippet>b</snippet></ROW><ROW><id>4526831</id><snippet>print (a, b)</snippet></ROW><ROW><id>4526831</id><snippet>a, b</snippet></ROW><ROW><id>4526831</id><snippet>&gt;&gt;&gt; w = sys.stdout.write
&gt;&gt;&gt; _ = w(str(a)), w(' '), w(str(b)), w('\n')
a b
&gt;&gt;&gt; _ = w(str((a,b))), w('\n')
('a', 'b')
</snippet></ROW><ROW><id>4526831</id><snippet>&gt;&gt;&gt; class A:
...    def __str__(self):
...        return '1'
...    def __repr__(self):
...        return 'A()'
... 
&gt;&gt;&gt; print A(), A()
1 1
&gt;&gt;&gt; print (A(), A())
(A(), A())
</snippet></ROW><ROW><id>4526831</id><snippet>__str__</snippet></ROW><ROW><id>4526831</id><snippet>str(obj)</snippet></ROW><ROW><id>4526831</id><snippet>__str__</snippet></ROW><ROW><id>4526831</id><snippet>__repr__</snippet></ROW><ROW><id>4526831</id><snippet>repr(obj)</snippet></ROW><ROW><id>4526913</id><snippet>import lxml

xml = """
&lt;brochures&gt;
    &lt;brochure&gt;
        &lt;onlinePath&gt;http://EEE&lt;/onlinePath&gt;
        &lt;downloadPath&gt;http://YYY&lt;/downloadPath&gt;
        &lt;Name&gt;ABC&lt;/Name&gt;
        &lt;AAA&gt;
            &lt;P&gt;JPG&lt;/P&gt;
            &lt;Q&gt;JPG&lt;/Q&gt;
        &lt;/AAA&gt;
    &lt;/brochure&gt;
    &lt;brochure&gt;
        &lt;onlinePath&gt;http://EKK&lt;/onlinePath&gt;
        &lt;downloadPath&gt;http://XXX&lt;/downloadPath&gt;
        &lt;Name&gt;DEF&lt;/Name&gt;
        &lt;AAA&gt;
            &lt;P&gt;JPG&lt;/P&gt;
            &lt;Q&gt;JPG&lt;/Q&gt;
        &lt;/AAA&gt;
    &lt;/brochure&gt;
&lt;/brochures&gt;
"""

root = lxml.etree.fromstring(xml)
mylist = root.xpath('//brochure/onlinePath/text()')
</snippet></ROW><ROW><id>4526913</id><snippet>['http://EEE', 'http://EKK']
</snippet></ROW><ROW><id>4527030</id><snippet>GROUP BY</snippet></ROW><ROW><id>4527030</id><snippet>sqlite3 :memory:</snippet></ROW><ROW><id>4527030</id><snippet>CREATE TABLE category
(
  id INT
);

CREATE TABLE item
(
  id INT,
  category_id INT
);

INSERT INTO category VALUES (1);
INSERT INTO category VALUES (2);
INSERT INTO category VALUES (3);


INSERT INTO item VALUES (1,1);
INSERT INTO item VALUES (2,2);
INSERT INTO item VALUES (3,3);
INSERT INTO item VALUES (4,1);
INSERT INTO item VALUES (5,2);

SELECT id, category_id, COUNT(category_id) FROM item GROUP BY category_id;
</snippet></ROW><ROW><id>4527030</id><snippet>4|1|2
5|2|2
3|3|1
</snippet></ROW><ROW><id>4527030</id><snippet>GROUP BY "category_id"</snippet></ROW><ROW><id>4527030</id><snippet>GROUP BY "id", "category_id"</snippet></ROW><ROW><id>4527030</id><snippet>qs = Item.objects.raw('SELECT *, COUNT(category_id) FROM myapp_item GROUP BY category_id')
</snippet></ROW><ROW><id>4527030</id><snippet>from django.db import connection
print connection.queries[-1]
</snippet></ROW><ROW><id>4527030</id><snippet>items = []
for c in Category.objects.all():
    items.append(c.item_set[0])
</snippet></ROW><ROW><id>4527030</id><snippet>items = Item.objects.select_related()
</snippet></ROW><ROW><id>4527357</id><snippet>$ ./my-script.py
</snippet></ROW><ROW><id>4527357</id><snippet>$ /usr/local/bin/python2.6 myscript.py
</snippet></ROW><ROW><id>4527357</id><snippet>$ mkdir tmp
$ cd tmp
$ gunzip -c /Volumes/Universal\ MacPython\ 2.6/MacPython.mpkg/Contents/Packages/PythonUnixTools-2.6.pkg/Contents/Archive.pax.gz | pax
</snippet></ROW><ROW><id>4527357</id><snippet>file</snippet></ROW><ROW><id>4527357</id><snippet>$ file Versions/2.6/bin/python
Versions/2.6/bin/python: Mach-O universal binary with 2 architectures
Versions/2.6/bin/python (for architecture ppc): Mach-O executable ppc
Versions/2.6/bin/python (for architecture i386):    Mach-O executable i386
</snippet></ROW><ROW><id>4527479</id><snippet>&gt;&gt;&gt; dictionary = {'C1' : [10,20,30],'C2' : [20,30,40]}
&gt;&gt;&gt; dictionary['C1'] = [x+1 for x in dictionary['C1']]
&gt;&gt;&gt; dictionary
{'C2': [20, 30, 40], 'C1': [11, 21, 31]}
</snippet></ROW><ROW><id>4527622</id><snippet>setup.py</snippet></ROW><ROW><id>4527622</id><snippet>setup.py</snippet></ROW><ROW><id>4527622</id><snippet>package = 'package_name'
try:
    return __import__(package)
except ImportError:
    return None
</snippet></ROW><ROW><id>4527622</id><snippet>package_name</snippet></ROW><ROW><id>4527622</id><snippet>subprocess</snippet></ROW><ROW><id>4527949</id><snippet>setup.py</snippet></ROW><ROW><id>4527949</id><snippet>setup</snippet></ROW><ROW><id>4527949</id><snippet>foo</snippet></ROW><ROW><id>4527949</id><snippet>foo</snippet></ROW><ROW><id>4527949</id><snippet>setuptools</snippet></ROW><ROW><id>4527978</id><snippet>shared_items = set(x.items()) &amp; set(y.items())
print len(shared_items)
</snippet></ROW><ROW><id>4528057</id><snippet>virtualenv</snippet></ROW><ROW><id>4528057</id><snippet>C:\Windows\system32</snippet></ROW><ROW><id>4528057</id><snippet>activate</snippet></ROW><ROW><id>4528057</id><snippet>&lt;env&gt;\Scripts</snippet></ROW><ROW><id>4528057</id><snippet>deactivate</snippet></ROW><ROW><id>4528057</id><snippet>c:\Temp&gt;virtualenv myenv
New python executable in myenv\Scripts\python.exe
Installing setuptools..................done.
c:\Temp&gt;myenv\Scripts\activate
(myenv) C:\Temp&gt;deactivate
C:\Temp&gt;
</snippet></ROW><ROW><id>4528057</id><snippet>deactivate</snippet></ROW><ROW><id>4528057</id><snippet>activate</snippet></ROW><ROW><id>4528057</id><snippet>import sys; sys.prefix</snippet></ROW><ROW><id>4528057</id><snippet>activate</snippet></ROW><ROW><id>4528057</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>4528057</id><snippet>virtualenv</snippet></ROW><ROW><id>4528057</id><snippet>virtualenv</snippet></ROW><ROW><id>4528057</id><snippet>pip</snippet></ROW><ROW><id>4528057</id><snippet>distribute</snippet></ROW><ROW><id>4528057</id><snippet>setuptools</snippet></ROW><ROW><id>4528057</id><snippet>python setup.py install</snippet></ROW><ROW><id>4528057</id><snippet>virtualenv</snippet></ROW><ROW><id>4528110</id><snippet>json.loads()</snippet></ROW><ROW><id>4528110</id><snippet>d = json.loads(j)
print d['glossary']['title']
</snippet></ROW><ROW><id>4528212</id><snippet>strptime</snippet></ROW><ROW><id>4528212</id><snippet>strptime</snippet></ROW><ROW><id>4528238</id><snippet>intern()</snippet></ROW><ROW><id>4528238</id><snippet>&gt;&gt;&gt; a = 'foo'
&gt;&gt;&gt; b = 'foo'
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; b = 'f' + ('oo',)[0]
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = intern('foo')
&gt;&gt;&gt; b = intern('f' + ('oo',)[0])
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>4528396</id><snippet>import sys
from PyQt4 import QtGui, QtCore, QtWebKit 

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        self.pages = ['http://www.google.com', 'http://www.citrix.com', 'http://yahoo.com', 'http://reddit.com']
        self.index = 0

        self.view = QtWebKit.QWebView()  
        self.view.connect(self.view, QtCore.SIGNAL('loadFinished(bool)'), self.loadFinished)
        self.setCentralWidget(self.view)

        self.view.load(QtCore.QUrl(self.pages[self.index]))

    def loadFinished(self, ok):
        self.index += 1
        if self.index &lt; len(self.pages) :
            self.view.load(QtCore.QUrl(self.pages[self.index]))
        else:
            print 'done'

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main() 
</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528418</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; del a
&gt;&gt;&gt; a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
&gt;&gt;&gt; b
[1, 2]
</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528418</id><snippet>b</snippet></ROW><ROW><id>4528418</id><snippet>del</snippet></ROW><ROW><id>4528451</id><snippet>if (something):   #note the : at the end
  ...
else:
  ...
</snippet></ROW><ROW><id>4528564</id><snippet>dir = sys.argv[1]

fileList = os.listdir(dir)
for file in fileList:
    file = os.path.join(dir, file)  # Get the full path to the file.
    # etc...
</snippet></ROW><ROW><id>4528637</id><snippet>print myarray
</snippet></ROW><ROW><id>4528637</id><snippet>for each_item in myarray:
    print each_item
</snippet></ROW><ROW><id>4528637</id><snippet>print ', '.join([str(x) for x in myarray])
</snippet></ROW><ROW><id>4528637</id><snippet>numpy</snippet></ROW><ROW><id>4528637</id><snippet>_str_</snippet></ROW><ROW><id>4528637</id><snippet>array</snippet></ROW><ROW><id>4528637</id><snippet>print</snippet></ROW><ROW><id>4528647</id><snippet>self</snippet></ROW><ROW><id>4528647</id><snippet>staticmethod</snippet></ROW><ROW><id>4528647</id><snippet>class Corrector:

    def correctAll(self, dir):
        print "ok"
</snippet></ROW><ROW><id>4528647</id><snippet>class Corrector:

    @staticmethod
    def correctAll(dir):
        print "ok"
</snippet></ROW><ROW><id>4528647</id><snippet>self</snippet></ROW><ROW><id>4528647</id><snippet>self</snippet></ROW><ROW><id>4528747</id><snippet>n</snippet></ROW><ROW><id>4528747</id><snippet>L = L[n:] + L[:n]
</snippet></ROW><ROW><id>4528929</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>4528929</id><snippet>csvfile = open('dump.csv', 'w')
for file in glob.glob('*.html'):
    print 'Processing', file
    soup = BeautifulSoup(open(file).read())
    for tr in soup.findAll('tr'):
        print &gt;&gt;csvfile, ' '.join(tr.findAll('td'))
</snippet></ROW><ROW><id>4529488</id><snippet># p = 1; s = p
s=p=1
#exec"if s%p*s%~-~p:print`p`+','+`p+2`\ns*=p*p;p+=2\n"*999
for i in range(999):
    # s%p = remainder of s/p
    # ~p = 1s complement of p
    if s%p*s%~-~p:
        # `p` = repr(p)
        print`p`+','+`p+2`
    # s = s*p*p
    s*=p*p
    # p = p+2
    p+=2
</snippet></ROW><ROW><id>4529492</id><snippet>var jstree_jsondata={{json1}}
</snippet></ROW><ROW><id>4529492</id><snippet>var jstree_jsondata={{ json1|safe }}
</snippet></ROW><ROW><id>4529492</id><snippet>safe</snippet></ROW><ROW><id>4529799</id><snippet>-c &lt;filename&gt;</snippet></ROW><ROW><id>4529901</id><snippet>pickle</snippet></ROW><ROW><id>4529901</id><snippet>import pickle

class Company:
    def __init__(self, name, value):
        self.name = name
        self.value = value

with open('company_data.pk', 'wb') as output:
    company1 = Company('banana', 40)
    pickle.dump(company1, output, pickle.HIGHEST_PROTOCOL)

    company2 = Company('spam', 42)
    pickle.dump(company2, output, pickle.HIGHEST_PROTOCOL)

company1 = None
company2 = None

with open('company_data.pk', 'rb') as input:
    company1 = pickle.load(input)
    print company1.name
    # banana
    print company1.value
    # 40

    company2 = pickle.load(input)
    print company2.name
    # spam
    print company2.value
    # 42
</snippet></ROW><ROW><id>4529901</id><snippet>def saveobject(obj, filename):
    with open(filename, 'wb') as output:
        pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)

saveobject(company1, r'c:\mypythonobject')
</snippet></ROW><ROW><id>4529901</id><snippet>cPickle</snippet></ROW><ROW><id>4529901</id><snippet>pickle</snippet></ROW><ROW><id>4529901</id><snippet>import</snippet></ROW><ROW><id>4529901</id><snippet>import cPickle as pickle
</snippet></ROW><ROW><id>4529901</id><snippet>pickle.HIGHEST_PROTOCOL</snippet></ROW><ROW><id>4529901</id><snippet>-1</snippet></ROW><ROW><id>4529901</id><snippet>pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)
</snippet></ROW><ROW><id>4529901</id><snippet>pickle.dump(obj, output, -1)
</snippet></ROW><ROW><id>4529901</id><snippet>Pickler</snippet></ROW><ROW><id>4529901</id><snippet>pickler = pickle.Pickler(output, -1)
pickler.dump(obj)
</snippet></ROW><ROW><id>4529969</id><snippet>pickle</snippet></ROW><ROW><id>4529969</id><snippet>data</snippet></ROW><ROW><id>4529969</id><snippet>with open('data.pickle', 'w') as pickle_file:
    pickle.dump(data, pickle_file)
</snippet></ROW><ROW><id>4529969</id><snippet>with open('data.pickle') as pickle_file:
    data = pickle.load(pickle_file)  # You get the data back!
</snippet></ROW><ROW><id>4530132</id><snippet>filename</snippet></ROW><ROW><id>4530132</id><snippet>object</snippet></ROW><ROW><id>4530132</id><snippet>object</snippet></ROW><ROW><id>4530166</id><snippet>win32timezone.utcnow()</snippet></ROW><ROW><id>4530166</id><snippet>import pytz
from datetime import datetime
datetime.utcnow().replace(tzinfo = pytz.utc)
</snippet></ROW><ROW><id>4530166</id><snippet>datetime.today()</snippet></ROW><ROW><id>4530166</id><snippet>datetime.now()</snippet></ROW><ROW><id>4530166</id><snippet>.replace(tzinfo = pytz.utc)</snippet></ROW><ROW><id>4530166</id><snippet>datetime.now(pytz.utc)
</snippet></ROW><ROW><id>4530244</id><snippet>open</snippet></ROW><ROW><id>4530244</id><snippet>obj</snippet></ROW><ROW><id>4530244</id><snippet>fruits</snippet></ROW><ROW><id>4530244</id><snippet>fruits</snippet></ROW><ROW><id>4530244</id><snippet>NameError</snippet></ROW><ROW><id>4530244</id><snippet>&gt;&gt;&gt; filehandler = open("fruits.obj", "w")
</snippet></ROW><ROW><id>4530252</id><snippet>tn = telnetlib.Telnet(HOST)

tn.read_until('Username : ')

tn.write(user+ "\r")

tn.read_until("Password : ")

tn.write(password+ "\n")

tn.write("\r")
</snippet></ROW><ROW><id>4530264</id><snippet>virtualenv</snippet></ROW><ROW><id>4530264</id><snippet>sys.path</snippet></ROW><ROW><id>4530264</id><snippet>sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'dev.env/lib/python2.5/site-packages/'))
</snippet></ROW><ROW><id>4530356</id><snippet>filehandler = open(b"fruits.obj","wb")
</snippet></ROW><ROW><id>4530515</id><snippet>#...in SpellFactory:  
def setQuery(self, query):
    self.query = query


#...and in SpellClient:
def connectionMade(self):
    self.transport.write(self.factory.query)
</snippet></ROW><ROW><id>4530515</id><snippet>f = SpellFactory()
f.setQuery('some query')
...
</snippet></ROW><ROW><id>4530702</id><snippet>&gt;&gt;&gt; parent = pygame.image.load("token1.png")
&gt;&gt;&gt; parent
&lt;Surface(128x128x32 SW)&gt;
&gt;&gt;&gt; s1 = parent.subsurface(pygame.Rect(0, 0, 2, 2))
&gt;&gt;&gt; s2 = parent.subsurface(pygame.Rect(0, 0, 2, 2))
&gt;&gt;&gt; s1
&lt;Surface(2x2x32 SW)&gt;
&gt;&gt;&gt; s2
&lt;Surface(2x2x32 SW)&gt;
&gt;&gt;&gt; s1 == s2
False
&gt;&gt;&gt; s1.get_parent() == s2.get_parent()
True
&gt;&gt;&gt; s1.get_offset() == s2.get_offset()
True
&gt;&gt;&gt; s1.get_parent() == s2.get_parent() and s1.get_offset() == s2.get_offset()
True
</snippet></ROW><ROW><id>4530730</id><snippet>So I don't want to get it installed in /usr/local/lib/python or anywhere in current sys.path as I can't make frequent changes in top level packages.
</snippet></ROW><ROW><id>4530730</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>4530828</id><snippet>save()</snippet></ROW><ROW><id>4530828</id><snippet>Poll</snippet></ROW><ROW><id>4530927</id><snippet>reactor.run()</snippet></ROW><ROW><id>4531023</id><snippet>listofvalues</snippet></ROW><ROW><id>4531023</id><snippet>&gt;&gt;&gt; a = [4, 5]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b.append(3)
&gt;&gt;&gt; b
[4, 5, 3]
&gt;&gt;&gt; a
[4, 5, 3]
&gt;&gt;&gt; b = [6, 7]
&gt;&gt;&gt; b
[6, 7]
&gt;&gt;&gt; a
[4, 5, 3]
</snippet></ROW><ROW><id>4531023</id><snippet>&gt;&gt;&gt; a = [4, 5, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b[:] = [6, 7]
&gt;&gt;&gt; b
[6, 7]
&gt;&gt;&gt; a
[6, 7]
</snippet></ROW><ROW><id>4531023</id><snippet>__slots__</snippet></ROW><ROW><id>4531023</id><snippet>__getattr__</snippet></ROW><ROW><id>4531023</id><snippet>def understand_copy():
   return {'listofvalues': [4, 5]}

def deepcopy(obj):
   if instance(obj, dict):
       copy = {}
       for key, value in obj.iteritems():
           copy[key] = deepcopy(value)  # Note the recursion
       return copy
   if instance(obj, list):
       copy = []
       for value in obj:
           copy.append(deepcopy(value)) # Note the recursion
       return copy
   return obj

def copy(obj):
   if instance(obj, dict):
       copy = {}
       for key, value in obj.iteritems():
           copy[key] = value  # No recursion this time, the copy is shallow
       return copy
   if instance(obj, list):
       copy = []
       for value in obj:
           copy.append(value) # No recursion this time, the copy is shallow
       return copy
   return obj

globals = {}
globals['ins'] = understand_copy()
globals['new'] = copy(global['ins'])
# Now globals['ins']['listofvalues']
# and globals['new']['listofvalues']
# reference the same object!

globals['ins']['listofvalues'].__setitem__(0, 3)
globals['ins']['listofvalues'].append(5)
# We are calling function on one object,
# but not changing a binding, so the two
# 'listofvalues' attribute still refers
# to the same object.

globals['ins']['listofvalues'] = [10, 11]
# Now we changed the binding of the name
# in the dictionary 'ins' so now the two
# objects attributes points to different
# lists.
</snippet></ROW><ROW><id>4531096</id><snippet>print(x)
</snippet></ROW><ROW><id>4531227</id><snippet>from geopy import Point
from geopy.distance import distance, VincentyDistance

# given: lat1, lon1, bearing, distMiles
lat2, lon2 = VincentyDistance(miles=distMiles).destination(Point(lat1, lon1), bearing)
</snippet></ROW><ROW><id>4531275</id><snippet>daemonic</snippet></ROW><ROW><id>4531275</id><snippet>the_timer.daemon=True</snippet></ROW><ROW><id>4531464</id><snippet>io.py</snippet></ROW><ROW><id>4531464</id><snippet>_io.BufferedReader</snippet></ROW><ROW><id>4531464</id><snippet>io.py</snippet></ROW><ROW><id>4531464</id><snippet># This is a prototype; hopefully eventually some of this will be
# reimplemented in C.
</snippet></ROW><ROW><id>4531464</id><snippet>io.py</snippet></ROW><ROW><id>4531464</id><snippet>_io</snippet></ROW><ROW><id>4531464</id><snippet>test = io.open('test.bmp', 'rb')</snippet></ROW><ROW><id>4531464</id><snippet>test = open('test.bmp', 'rb')
</snippet></ROW><ROW><id>4531464</id><snippet>while 1:
    c = f.read(1)
    if not c: break

2.6: io.open 20.4s, open 5.1s
2.7: io.open  3.3s, open 4.8s # io.open is better
3.1: io.open  3.6s, open 3.6s # effectively same code is used
</snippet></ROW><ROW><id>4531480</id><snippet>feedparser</snippet></ROW><ROW><id>4531480</id><snippet>f = feedparser.parse('http://example.com')
if f.bozo:
    raise f.bozo_exception
</snippet></ROW><ROW><id>4531480</id><snippet>feedparser.parse</snippet></ROW><ROW><id>4531480</id><snippet>f.feed</snippet></ROW><ROW><id>4531480</id><snippet>f.status</snippet></ROW><ROW><id>4531480</id><snippet>f.entries</snippet></ROW><ROW><id>4531480</id><snippet>f.version</snippet></ROW><ROW><id>4531736</id><snippet>ValueError</snippet></ROW><ROW><id>4531736</id><snippet>Queue.Empty</snippet></ROW><ROW><id>4531736</id><snippet>Empty</snippet></ROW><ROW><id>4531736</id><snippet>try:
    getiterme = item.get_nowait()
    # etc...
except Queue.Empty:
    # etc...
</snippet></ROW><ROW><id>4531795</id><snippet>import pycurl
c = pycurl.Curl()
c.setopt(pycurl.URL, 'www.example.com/login.php')
pycurlConnect.setopt(pycurl.POSTFIELDS, POST_DATA)
c.setopt(pycurl.PROXY, 'yourproxy')
c.setopt(pycurl.PROXYPORT, 8080)
c.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)
c.perform()
</snippet></ROW><ROW><id>4531795</id><snippet>POST_DATA = 'username=meatsafe&amp;password=murderer'
</snippet></ROW><ROW><id>4531814</id><snippet>name = input("what is your name?")
if name in ("Kamran", "Samaneh"):
    print("That is a nice name")
else:
    print("You have a boring name ;)")
</snippet></ROW><ROW><id>4531855</id><snippet>__str__</snippet></ROW><ROW><id>4531914</id><snippet>foos = []
count = 0
for i in range(50):
   count += 1
   foos.append(Object(init_variable))
</snippet></ROW><ROW><id>4531914</id><snippet>foo</snippet></ROW><ROW><id>4531914</id><snippet>foos[0]</snippet></ROW><ROW><id>4531914</id><snippet>foo</snippet></ROW><ROW><id>4531914</id><snippet>foo[49]</snippet></ROW><ROW><id>4531914</id><snippet>range</snippet></ROW><ROW><id>4531914</id><snippet>Object</snippet></ROW><ROW><id>4531914</id><snippet>count</snippet></ROW><ROW><id>4531914</id><snippet>i</snippet></ROW><ROW><id>4531914</id><snippet>for item in items: ...</snippet></ROW><ROW><id>4531914</id><snippet>for count, item in enumerate(items)</snippet></ROW><ROW><id>4531954</id><snippet>referenceElement</snippet></ROW><ROW><id>4531954</id><snippet>&gt;&gt;&gt; d1, d2 = {}, {}
&gt;&gt;&gt; d1[d2] = 1
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
</snippet></ROW><ROW><id>4531954</id><snippet>for element in referenceElement.keys()</snippet></ROW><ROW><id>4531954</id><snippet>for element in json['referenceElement'].keys()</snippet></ROW><ROW><id>4531954</id><snippet>json</snippet></ROW><ROW><id>4531954</id><snippet>referenceElement</snippet></ROW><ROW><id>4532023</id><snippet>path to me</snippet></ROW><ROW><id>4532023</id><snippet>set controller_script to (path to me as string) &amp; "Contents:Resources:Controller.py"
do shell script "PYTHONPATH=/Applications/gtk/inst/lib/python2.6/site-packages python " &amp; (quoted form of POSIX path of controller_script)
</snippet></ROW><ROW><id>4532213</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>4532213</id><snippet>print &gt;&gt;f, "Hello world"           # Python 2.x

print("Hello world", file=f)       # Python 3.x
</snippet></ROW><ROW><id>4532586</id><snippet>Node</snippet></ROW><ROW><id>4532586</id><snippet>    n = Node()
</snippet></ROW><ROW><id>4532586</id><snippet>n.value</snippet></ROW><ROW><id>4532586</id><snippet>Node.value</snippet></ROW><ROW><id>4532586</id><snippet>Node</snippet></ROW><ROW><id>4532586</id><snippet>nodes</snippet></ROW><ROW><id>4532586</id><snippet>Node</snippet></ROW><ROW><id>4532684</id><snippet>REQUEST_URI</snippet></ROW><ROW><id>4532693</id><snippet>def delete_everything(self):
    Reporter.objects.all().delete()

def drop_table(self):
    cursor = connection.cursor()
    table_name = self.model._meta.db_table
    sql = "DROP TABLE %s;" % (table_name, )
    cursor.execute(sql)
</snippet></ROW><ROW><id>4532768</id><snippet>tarfile</snippet></ROW><ROW><id>4532793</id><snippet>else</snippet></ROW><ROW><id>4532793</id><snippet>break</snippet></ROW><ROW><id>4532793</id><snippet>while</snippet></ROW><ROW><id>4532793</id><snippet>while_stmt ::=  "while" expression ":" suite
                ["else" ":" suite]
</snippet></ROW><ROW><id>4532793</id><snippet>else</snippet></ROW><ROW><id>4532793</id><snippet>break</snippet></ROW><ROW><id>4532793</id><snippet>else</snippet></ROW><ROW><id>4532793</id><snippet>continue</snippet></ROW><ROW><id>4532793</id><snippet>for</snippet></ROW><ROW><id>4532793</id><snippet>for element in container:
    if cond(element):
        break
else:
    # no such element
</snippet></ROW><ROW><id>4532793</id><snippet>element</snippet></ROW><ROW><id>4532793</id><snippet>else</snippet></ROW><ROW><id>4532793</id><snippet>False</snippet></ROW><ROW><id>4532793</id><snippet>while</snippet></ROW><ROW><id>4532793</id><snippet>else</snippet></ROW><ROW><id>4532793</id><snippet>break</snippet></ROW><ROW><id>4533243</id><snippet>GUI Design Tools and IDEs</snippet></ROW><ROW><id>4533460</id><snippet>def curl_progress(total, existing, upload_t, upload_d):
    try:
        frac = float(existing)/float(total)
    except:
        frac = 0
    print "Downloaded %d/%d (%0.2f%%)" % (existing, total, frac)

def curl_limit_rate(url, filename, rate_limit):
    """Rate limit in bytes"""
    import pycurl
    c = pycurl.Curl()
    c.setopt(c.URL, url)
    c.setopt(c.MAX_RECV_SPEED_LARGE, rate_limit)
    if os.path.exists(filename):
        file_id = open(filename, "ab")
        c.setopt(c.RESUME_FROM, os.path.getsize(filename))
    else:
        file_id = open(filename, "wb")

    c.setopt(c.WRITEDATA, file_id)
    c.setopt(c.NOPROGRESS, 0)
    c.setopt(c.PROGRESSFUNCTION, curl_progress)
    c.perform()
</snippet></ROW><ROW><id>4533900</id><snippet>readlines</snippet></ROW><ROW><id>4533971</id><snippet>__init__.py</snippet></ROW><ROW><id>4533971</id><snippet>includes</snippet></ROW><ROW><id>4533971</id><snippet>test.py</snippet></ROW><ROW><id>4533971</id><snippet>config.py</snippet></ROW><ROW><id>4533971</id><snippet>import</snippet></ROW><ROW><id>4533971</id><snippet>from includes import config</snippet></ROW><ROW><id>4533971</id><snippet>foo</snippet></ROW><ROW><id>4533971</id><snippet>config</snippet></ROW><ROW><id>4533971</id><snippet>config.foo()</snippet></ROW><ROW><id>4534069</id><snippet>re_cache1 = re.compile(regexp_string1)
...
re_cache1.search(data)
</snippet></ROW><ROW><id>4534069</id><snippet>re.search(regexp_string1, data)
</snippet></ROW><ROW><id>4534165</id><snippet>&gt;&gt;&gt; (-1 &lt; 0) | (0 &lt; 0)
True
</snippet></ROW><ROW><id>4534165</id><snippet>or</snippet></ROW><ROW><id>4534165</id><snippet>&gt;&gt;&gt; -1 &lt; 0 or 0 &lt; 0
True
</snippet></ROW><ROW><id>4534223</id><snippet>c[0] += 'c'
</snippet></ROW><ROW><id>4534223</id><snippet>c.__setitem__(0, c.__getitem__(0) + 'c')
</snippet></ROW><ROW><id>4534223</id><snippet>c</snippet></ROW><ROW><id>4534223</id><snippet>c</snippet></ROW><ROW><id>4534223</id><snippet>c += ['c']
c = [42]
</snippet></ROW><ROW><id>4534223</id><snippet>f()</snippet></ROW><ROW><id>4534223</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>4534223</id><snippet>c</snippet></ROW><ROW><id>4534223</id><snippet>c = c + ['c']
</snippet></ROW><ROW><id>4534223</id><snippet>c</snippet></ROW><ROW><id>4534526</id><snippet>timeit</snippet></ROW><ROW><id>4534526</id><snippet>import timeit

def fib(x):
    if x==0 or x==1: return 1
    else: return fib(x-1)+fib(x-2)

print timeit.Timer('fib(5)', 'from __main__ import fib').timeit()
</snippet></ROW><ROW><id>4534526</id><snippet>3.12172317505
</snippet></ROW><ROW><id>4534526</id><snippet>time.time()</snippet></ROW><ROW><id>4534526</id><snippet>def fibTimeLimited(limit):
  start = time.time()
  n, f0, f1 = 1, 0, 1
  while time.time() &lt; start + limit:
    n += 1
    f0, f1 = f1, f0+f1
  return (n, f1)
</snippet></ROW><ROW><id>4534526</id><snippet>Calculated 1st fibonacci number as 1 in 0.000001 seconds
Calculated 31st fibonacci number as 1346269 in 0.000010 seconds
Calculated 294th fibonacci number as 12384578529797304192493293627316781267732493780359086838016392 in 0.000100 seconds
</snippet></ROW><ROW><id>4534645</id><snippet>import pylab
fig = pylab.figure()
figlegend = pylab.figure(figsize=(3,2))
ax = fig.add_subplot(111)
lines = ax.plot(range(10), pylab.randn(10), range(10), pylab.randn(10))
figlegend.legend(lines, ('one', 'two'), 'center')
fig.show()
figlegend.show()
figlegend.savefig('legend.png')
</snippet></ROW><ROW><id>4534699</id><snippet>User</snippet></ROW><ROW><id>4534699</id><snippet>[(String, Integer)]</snippet></ROW><ROW><id>4534710</id><snippet>class UserModelAdmin(ModelAdmin):
    def get_urls(self):
        urls = super(UserModelAdmin, self).get_urls()
        info = self.model._meta.app_label, self.model._meta.module_name
        select_list_url = patterns('',
            url(r'^selectlist/$', self.selectlist_view, 
                name='%s_%s_select' % info)
        )
        return select_list_url + urls

    def selectlist_view(self, request, extra_context=None):
        temp_list_display_links = self.list_display_links
        self.list_display_links = (None, )
        response = self.changelist_view(request, extra_context)
        self.list_display_links = temp_list_display_links
        return response
</snippet></ROW><ROW><id>4534739</id><snippet>has = ['401k:T', 'health_in:F', 'has_childcare:T']
</snippet></ROW><ROW><id>4534739</id><snippet>"WHERE has = '401k:T' and has = 'health_in:F'"
</snippet></ROW><ROW><id>4534956</id><snippet>from multiprocessing import Pool

buf = ""

def f(x):
    buf.find("x")
    return 0

if __name__ == '__main__':
    buf = "a" * 1024 * 1024 * 1024
    pool = Pool(processes=1)
    result = pool.apply_async(f, [10])
    print result.get(timeout=5)
</snippet></ROW><ROW><id>4535065</id><snippet>&gt;&gt;&gt; filter(lambda s: s not in string.punctuation, "O João foi almoçar :) .".split())
['O', 'Jo\xc3\xa3o', 'foi', 'almo\xc3\xa7ar', ':)']
</snippet></ROW><ROW><id>4535065</id><snippet>d = { ':)': '&lt;HAPPY_SMILEY&gt;', ':(': '&lt;SAD_SMILEY&gt;'}
</snippet></ROW><ROW><id>4535065</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>4535065</id><snippet>for smiley, placeholder in d.iteritems():
    s = s.replace(smiley, placeholder)
</snippet></ROW><ROW><id>4535065</id><snippet>"O João foi almoçar &lt;HAPPY_SMILEY&gt; ."</snippet></ROW><ROW><id>4535065</id><snippet>s = ''.join(filter(lambda c: c not in '.,!', list(s)))
</snippet></ROW><ROW><id>4535065</id><snippet>"O João foi almoçar &lt;HAPPY_SMILEY&gt;"</snippet></ROW><ROW><id>4535065</id><snippet>for smiley, placeholder in d.iteritems():
    s = s.replace(placeholder, smiley)
</snippet></ROW><ROW><id>4535065</id><snippet>s = s.split()
</snippet></ROW><ROW><id>4535065</id><snippet>['O', 'Jo\xc3\xa3o', 'foi', 'almo\xc3\xa7ar', ':)']</snippet></ROW><ROW><id>4535065</id><snippet>def split_special(s):
    d = { ':)': '&lt;HAPPY_SMILEY&gt;', ':(': '&lt;SAD_SMILEY&gt;'}
    for smiley, placeholder in d.iteritems():
        s = s.replace(smiley, placeholder)
    s = ''.join(filter(lambda c: c not in '.,!', list(s)))
    for smiley, placeholder in d.iteritems():
        s = s.replace(placeholder, smiley)
    return s.split()
</snippet></ROW><ROW><id>4535277</id><snippet>class Category(models.Model):
    ...
    def last10items(self):
        return self.item_set.order_by('-created_date')[:10]
</snippet></ROW><ROW><id>4535277</id><snippet>{% for category in categories %}
  ...
  {% for item in category.last10items %}
      ...
</snippet></ROW><ROW><id>4535370</id><snippet>someArray[:,0,0]</snippet></ROW><ROW><id>4535370</id><snippet>someArray(:,1,1)</snippet></ROW><ROW><id>4535387</id><snippet>numpy.zeros</snippet></ROW><ROW><id>4535387</id><snippet>numpy.ones</snippet></ROW><ROW><id>4535387</id><snippet>numpy.empty</snippet></ROW><ROW><id>4535387</id><snippet>numpy.append</snippet></ROW><ROW><id>4535511</id><snippet>&gt;&gt;&gt; e = d['entries'][0]
&gt;&gt;&gt; print e["media_thumbnail"][0]["url"]
http://news.bbcimg.co.uk/media/images/50560000/jpg/_50560468_50557389.jpg
</snippet></ROW><ROW><id>4535675</id><snippet>def __init__(self, lst=[], intg=0):
     # ...
</snippet></ROW><ROW><id>4535675</id><snippet>def __init__(self, lst=None, intg=0):
     if lst is None:
         lst = []
     # ...
</snippet></ROW><ROW><id>4535675</id><snippet>func_defaults</snippet></ROW><ROW><id>4535675</id><snippet>print test.__init__.func_defaults
name_dict[name] = test()
# ...
</snippet></ROW><ROW><id>4535707</id><snippet>put</snippet></ROW><ROW><id>4535707</id><snippet>test</snippet></ROW><ROW><id>4535707</id><snippet>webob</snippet></ROW><ROW><id>4535707</id><snippet>def put(self):
    print "test"
    name = parse_body_to_extract_your_parameter(self.request.body)
    self.response.out.write(name)
</snippet></ROW><ROW><id>4535757</id><snippet>&gt;&gt;&gt; class A(object):
...    def __init__(self, attribute1, attribute2):
...        self.attribute1 = attribute1
...        self.attribute2 = attribute2
...

&gt;&gt;&gt; a = A(1, 2)
&gt;&gt;&gt; a.attribute1
1
&gt;&gt;&gt; a.attribute2
2
</snippet></ROW><ROW><id>4535757</id><snippet>self.attribute</snippet></ROW><ROW><id>4535947</id><snippet>Lyrics +=</snippet></ROW><ROW><id>4535978</id><snippet>super()</snippet></ROW><ROW><id>4536175</id><snippet>from Skype4Py import Skype
import sys

client = Skype()
client.Attach()
user = sys.argv[1]
message = ' '.join(sys.argv[2:]
client.SendMessage(user, message)
</snippet></ROW><ROW><id>4536175</id><snippet>$ python message.py someuser This is my message
</snippet></ROW><ROW><id>4536175</id><snippet>sys.argv[2:]</snippet></ROW><ROW><id>4536541</id><snippet>hold</snippet></ROW><ROW><id>4536541</id><snippet>append</snippet></ROW><ROW><id>4536541</id><snippet>def upsampler(seq, multiplier):
    if seq:
        step = 1.0 / multiplier
        y0 = seq[0];
        yield y0
        for y in seq[1:]:
            dY = (y-y0) * step
            for i in range(multiplier-1):
                y0 += dY;
                yield y0
            y0 = y;
            yield y0
</snippet></ROW><ROW><id>4536541</id><snippet>&gt;&gt;&gt; list(upsampler([], 3))  # this is just the same as [Y for Y in upsampler([], 3)]
[]
&gt;&gt;&gt; list(upsampler([1], 3))
[1]
&gt;&gt;&gt; list(upsampler([1,2], 3))
[1, 1.3333333333333333, 1.6666666666666665, 2]
&gt;&gt;&gt; from math import sin, pi
&gt;&gt;&gt; seq = [sin(2.0*pi * i/10) for i in range(20)]
&gt;&gt;&gt; seq
[0.0, 0.58778525229247314, 0.95105651629515353, 0.95105651629515364, 0.58778525229247325, 1.2246063538223773e-016, -0.58778525229247303, -0.95105651629515353, -0.95105651629515364, -0.58778525229247336, -2.4492127076447545e-016, 0.58778525229247214, 0.95105651629515353, 0.95105651629515364, 0.58778525229247336, 3.6738190614671318e-016, -0.5877852522924728, -0.95105651629515342, -0.95105651629515375, -0.58778525229247347]
&gt;&gt;&gt; list(upsampler(seq, 2))
[0.0, 0.29389262614623657, 0.58778525229247314, 0.76942088429381328, 0.95105651629515353, 0.95105651629515364, 0.95105651629515364, 0.7694208842938135, 0.58778525229247325, 0.29389262614623668, 1.2246063538223773e-016, -0.29389262614623646, -0.58778525229247303, -0.76942088429381328, -0.95105651629515353, -0.95105651629515364, -0.95105651629515364, -0.7694208842938135, -0.58778525229247336, -0.29389262614623679, -2.4492127076447545e-016, 0.29389262614623596, 0.58778525229247214, 0.76942088429381283, 0.95105651629515353, 0.95105651629515364, 0.95105651629515364, 0.7694208842938135, 0.58778525229247336, 0.29389262614623685, 3.6738190614671318e-016, -0.29389262614623618, -0.5877852522924728, -0.76942088429381306, -0.95105651629515342, -0.95105651629515364, -0.95105651629515375, -0.76942088429381361, -0.58778525229247347]
</snippet></ROW><ROW><id>4536541</id><snippet>/**
 *
 * @param src caller supplied array with data
 * @param src_len len of src
 * @param steps to interpolate
 * @param dst output param will be filled with (src_len - 1) * steps + 1 samples
 */
float* linearInterpolation(float* src, int src_len, int steps, float* dst)
{
    float step, y0, dy;
    float *src_end;
    if (src_len &gt; 0) {
        step = 1.0 / steps;
        for (src_end = src+src_len; *dst++ = y0 = *src++, src &lt; src_end; ) {
            dY = (*src - y0) * step;
            for (int i=steps; i&gt;0; i--) {
                *dst++ = y0 += dY;
            }
        }
    }
}
</snippet></ROW><ROW><id>4536676</id><snippet>django-celery</snippet></ROW><ROW><id>4536840</id><snippet>accounts/a.html</snippet></ROW><ROW><id>4536880</id><snippet>import numpy as np
x = np.array([[10, 1], [2, 12], [3, 5]])
multi_cols = x[:,0] * x[:,1]
print x[multi_cols.argmin()]
</snippet></ROW><ROW><id>4537152</id><snippet>$ cd /opt/local/Library/Frameworks/Python.framework/Versions/2.5
$ cd ./lib/python2.5/lib-dynload/
$ ls -l _ctypes.so 
-rwxr-xr-x  2 root  wheel  151536 Oct  8 00:26 _ctypes.so*
</snippet></ROW><ROW><id>4537152</id><snippet>ls -l</snippet></ROW><ROW><id>4537152</id><snippet>lib-dynload</snippet></ROW><ROW><id>4537152</id><snippet>_ctypes_failed.so</snippet></ROW><ROW><id>4537152</id><snippet>_ctypes</snippet></ROW><ROW><id>4537152</id><snippet>$ port sudo selfupdate
$ port -v upgrade --force python25
</snippet></ROW><ROW><id>4537442</id><snippet>
import py_compile
py_compile.compile('my_script.py')
</snippet></ROW><ROW><id>4537561</id><snippet>VK_CTLR</snippet></ROW><ROW><id>4537561</id><snippet>VK_CTRL</snippet></ROW><ROW><id>4537989</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4537989</id><snippet>sys.path</snippet></ROW><ROW><id>4538503</id><snippet>plt.figure(figsize=(8,8))
plt.axis('equal')
plt.savefig('circular_tree.png')
</snippet></ROW><ROW><id>4539193</id><snippet>import lxml.etree as ET
import io

content='''\
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;locales&gt;
&lt;api-url&gt;url&lt;/api-url&gt;
&lt;locale&gt;
    &lt;market&gt;AE&lt;/market&gt;
    &lt;languages&gt;
        &lt;language&gt;ar&lt;/language&gt;
    &lt;/languages&gt;
&lt;/locale&gt;
&lt;locale&gt;
    &lt;market&gt;AM&lt;/market&gt;
    &lt;languages&gt;
        &lt;language&gt;hy&lt;/language&gt;
        &lt;language&gt;ru&lt;/language&gt;
    &lt;/languages&gt;
&lt;/locale&gt;
&lt;/locales&gt;
'''
inputXml=ET.parse(io.BytesIO(content))

for locale in inputXml.xpath('//locale'):
    market = locale.xpath('market/text()')[0]
    for lang in locale.xpath('languages/language/text()'):
        print('{m}_{l}'.format(m=market,l=lang))
</snippet></ROW><ROW><id>4539193</id><snippet>AE_ar
AM_hy
AM_ru
</snippet></ROW><ROW><id>4539429</id><snippet>scrolledwindow.add(iconview)
</snippet></ROW><ROW><id>4539753</id><snippet>zip(*iterable)</snippet></ROW><ROW><id>4539753</id><snippet>values = ((book["rw"], book["rg"]) for book in books)
avg_review, avg_rating = [sum(xs) / len(books) for xs in zip(*values)]
</snippet></ROW><ROW><id>4539753</id><snippet>get_avg = lambda xs, attr: sum(x[attr] for x in xs) / len(xs)
avg_review = get_avg(books, "rw")
avg_rating = get_avg(books, "rg")
</snippet></ROW><ROW><id>4539805</id><snippet># columns in table x
for row in cursor.columns(table='x'):
    print row.column_name 
</snippet></ROW><ROW><id>4540109</id><snippet>http://your.url.here/polls/polls/235/results/
</snippet></ROW><ROW><id>4540109</id><snippet>include</snippet></ROW><ROW><id>4540109</id><snippet>urlpatterns</snippet></ROW><ROW><id>4540109</id><snippet>"polls/"</snippet></ROW><ROW><id>4540109</id><snippet>urlpatterns</snippet></ROW><ROW><id>4540109</id><snippet>"polls/"</snippet></ROW><ROW><id>4540678</id><snippet>__name__</snippet></ROW><ROW><id>4540678</id><snippet>__main__</snippet></ROW><ROW><id>4540678</id><snippet>if</snippet></ROW><ROW><id>4540678</id><snippet>re</snippet></ROW><ROW><id>4540678</id><snippet>re</snippet></ROW><ROW><id>4540678</id><snippet>re.compile</snippet></ROW><ROW><id>4541213</id><snippet>threading.Thread</snippet></ROW><ROW><id>4541213</id><snippet>run()</snippet></ROW><ROW><id>4541213</id><snippet>thread.exit()</snippet></ROW><ROW><id>4541305</id><snippet>for c in "漢字"</snippet></ROW><ROW><id>4541305</id><snippet>codecs.open</snippet></ROW><ROW><id>4541305</id><snippet>codecs.open("blar.txt", "w").write(u"漢字")
</snippet></ROW><ROW><id>4541305</id><snippet>import locale, codecs
lang, encoding = locale.getdefaultlocale()
codecs.open("blar.txt", "w", encoding).write(u"漢字")
</snippet></ROW><ROW><id>4541305</id><snippet>codecs.open</snippet></ROW><ROW><id>4541305</id><snippet>locale</snippet></ROW><ROW><id>4541305</id><snippet>os.stat(u"漢字")</snippet></ROW><ROW><id>4541537</id><snippet>from itertools import chain, combinations

def powerset(iterable):
    "Returns all the possible subsets of the elements in a given iterable"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def partition(iterable):
    "Returns all the possible ways to partition a set into two subsets"
    s = set(iterable)
    for s1 in powerset(s):
        yield s1, s-s1

def split_vertex(graph, v1):
    # Note that you only need one extra vertex, you can use v for the other
    v2 = graph.vcount()
    graph.add_vertices(1)

    # Find the neighbors of v1
    neis = set(graph.neighbors(v1))

    # Delete all the edges incident on v1 - some of them will be re-added
    g.delete_edges(g.incident(v1))

    # Iterate over the powerset of neis to find all possible splits
    for set1, set2 in partition(neis):
        if len(set1) &lt; 2 or len(set2) &lt; 2:
            continue

        # Copy the original graph
        g2 = g.copy()

        # Add edges between v1 and members of set1
        g2.add_edges([(v1, v3) for v3 in set1])

        # Add edges between v2 and members of set2
        g2.add_edges([(v2, v3) for v3 in set2])

        # Return the result
        yield g2
</snippet></ROW><ROW><id>4541567</id><snippet>db.GqlQuery("SELECT * FROM Pet WHERE owner = :1 and vet = :2", owner.key(), vet.key())

Pet.all().filter("owner =", owner.key()).filter("vet =", vet.key())
</snippet></ROW><ROW><id>4541567</id><snippet>Key.from_path(kind, id_or_name, parent=none, namespace=None, **kwds)
Key.from_path('Pet', 'Dr Vet')
Key.from_path('Pet', 123)
</snippet></ROW><ROW><id>4541607</id><snippet>class_list = []
class CollectSubclasses(type):
    def __new__(cls, name, bases, attrs):
        abstract = False
        if attrs.get('abstract', False):
            abstract = True
            del attrs['abstract']
        res = super(CollectSubclasses, cls).__new__(cls, name, bases, attrs)
        if not abstract:
            class_list.append(res)
        return res

class BaseFoo(object):
    __metaclass__ = CollectSubclasses
    abstract = True

class Concrete1(BaseFoo):
    pass

class Abstract(BaseFoo):
    abstract = True

class Concrete2(Abstract):
    pass

print class_list
</snippet></ROW><ROW><id>4541668</id><snippet>In [63]: datetime.datetime.now()
Out[63]: datetime.datetime(2010, 12, 27, 14, 39, 19, 700401)

In [64]: datetime.datetime.now() - datetime.timedelta(minutes=15)
Out[64]: datetime.datetime(2010, 12, 27, 14, 24, 21, 684435)
</snippet></ROW><ROW><id>4541700</id><snippet>data = {
  "AAPL":       ("Jan-1-1985",      "Dec-27-2010"),
...
}
</snippet></ROW><ROW><id>4541700</id><snippet>import random, string, pprint

def randsym():
    res =[]
    for i in range(4):
        res.append(random.choice(string.uppercase))
    return ''.join(res)

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
days = range(1,29)
years = range(1980,2010)
def randdate():
    return "%s-%s-%s" % (random.choice(months),
                         random.choice(days),
                         random.choice(years))

data = {}
for i in range(15000):
    data[randsym()] = (randdate(), "Dec-27-2010")

with open("data.py", "w") as f:
    f.write("data=")
    f.write(pprint.pformat(data))
</snippet></ROW><ROW><id>4541700</id><snippet>from data import data</snippet></ROW><ROW><id>4541728</id><snippet>&lt;video src=</snippet></ROW><ROW><id>4541740</id><snippet>assert.h</snippet></ROW><ROW><id>4541740</id><snippet>NDEBUG</snippet></ROW><ROW><id>4541740</id><snippet>-D</snippet></ROW><ROW><id>4541740</id><snippet>OPT="-g -O3" python setup.py build
</snippet></ROW><ROW><id>4541908</id><snippet>class MyForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(MyForm, self).__init__(*args, **kwargs)
        if kwargs.get('instance'):
            self.fields['myfield'].initial = 'custom value'

    class Meta:
        model = MyModel
</snippet></ROW><ROW><id>4541924</id><snippet>getClientContent</snippet></ROW><ROW><id>4541924</id><snippet>self.clientbuffer.readline();</snippet></ROW><ROW><id>4541966</id><snippet>{% load settings_tags %}</snippet></ROW><ROW><id>4541966</id><snippet>templatetags/settings_tags.py</snippet></ROW><ROW><id>4541966</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4542038</id><snippet>python3</snippet></ROW><ROW><id>4542038</id><snippet>$ python3 -V
</snippet></ROW><ROW><id>4542450</id><snippet>from MainDir.Dir.DirA import ClassA # which is actually a module
</snippet></ROW><ROW><id>4542450</id><snippet>__init__.py</snippet></ROW><ROW><id>4542462</id><snippet>[0]*len(z)</snippet></ROW><ROW><id>4542462</id><snippet>y</snippet></ROW><ROW><id>4542481</id><snippet>from celery.decorators import task

@task()
def add(x, y, results):
    results.append(x + y)

------------8&lt;-------------
from core.tasks import add

results = []

for i in range(100):
    add.delay(i, i, results)
</snippet></ROW><ROW><id>4542481</id><snippet>for result in results:
    while not result.state.ready():
        time.sleep(secs)
    if result.state == u'SUCCESS':
        print result.result
    else:
        print "Something Rotten in the State of Denmark..."
</snippet></ROW><ROW><id>4542481</id><snippet>for result in results:
    print result.get()
</snippet></ROW><ROW><id>4542647</id><snippet>def collect_names( node ):
    names = []
    while True:
        names.append(node[u'Name'])
        try:
            # deeper node
            node = node[u'Ancestors'][u'BrowseNode']
        except KeyError:
            # we are done, no ancestors 
            return names[::-1]

print collect_names(data[u'BrowseNode'])
# &gt;&gt; [u'Books', u'Subjects', u'Science', u'Physics', u'Electromagnetism']
</snippet></ROW><ROW><id>4542765</id><snippet>break</snippet></ROW><ROW><id>4542765</id><snippet>import random

print "\tWelcome to 'Guess My Number'!"
print "\nI'm thinking of a number between 1 and 100." 
print "Try to guess it in as few attempts as possible.\n"

# set the initial values
the_number = random.randrange(100) + 1

limit = 5
tries = 0

# guessing loop
while True: # we will test the conditions separately in the loop, not here
    # take a guess
    guess = int(raw_input("Take a guess: "))
    tries += 1 

    # first check the number
    if (guess &gt; the_number):
        print "Lower..."
    elif (guess &lt; the_number):
        print "Higher..."
    else: # it can only be equal here
        print "You guessed it!  The number was", the_number
        print "And it only took you", tries, "tries!\n"
        break # exit the while loop

    # now the tries:
    if tries == limit:
        print "You've used all %d of your attempts \
and didn't get the right answer. Shame on You!" % limit
        break

raw_input("\n\nPress the enter key to exit.")
</snippet></ROW><ROW><id>4543043</id><snippet>regex = Regexp.new(/^[0-9]* (.*), (.*) [a-zA-Z]{2} [0-9]{5}(-[0-9]{4})?$/)
addresses = ["420 Fanboy Lane, Cupertino CA 12345"]
addresses &lt;&lt; "1829 William Tell Oveture, by Gioachino Rossini 88421"
addresses &lt;&lt; "114801 Western East Avenue Apt. B32, Funky Township CA 12345"
addresses &lt;&lt; "1 Infinite Loop, Cupertino CA 12345-1234"
addresses &lt;&lt; "420 time!"

addresses.each do |address|
  print address
  if address.match(regex)
    puts " is an address"
  else
    puts " is not an address"
  end
end

# Outputs:
&gt; 420 Fanboy Lane, Cupertino CA 12345 is an address  
&gt; 1829 William Tell Oveture, by Gioachino Rossini 88421 is not an address  
&gt; 114801 Western East Avenue Apt. B32, Funky Township CA 12345 is an address  
&gt; 1 Infinite Loop, Cupertino CA 12345-1234 is an address  
&gt; 420 time! is not an address  
</snippet></ROW><ROW><id>4543139</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; timedeltas = [timedelta(1), timedelta(2)]

&gt;&gt;&gt; sum(timedeltas)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'int' and 'datetime.timedelta'

&gt;&gt;&gt; sum(timedeltas, timedelta())
datetime.timedelta(3)
</snippet></ROW><ROW><id>4543242</id><snippet>import Crypto.PublicKey.RSA
impl = Crypto.PublicKey.RSA.RSAImplementation()
</snippet></ROW><ROW><id>4543444</id><snippet>speed = raw_input("Recomended(4);Default(8))"
</snippet></ROW><ROW><id>4543444</id><snippet>speed = raw_input("Recomended(4);Default(8)")
</snippet></ROW><ROW><id>4543502</id><snippet>sftp</snippet></ROW><ROW><id>4543502</id><snippet>rsync</snippet></ROW><ROW><id>4543502</id><snippet>pyparsing</snippet></ROW><ROW><id>4543502</id><snippet>apachelogs</snippet></ROW><ROW><id>4543848</id><snippet>hg clone &lt;a href="https://joferkington@bitbucket.org/joferkington/paw-analysis"&gt;https://joferkington@bitbucket.org/joferkington/paw-analysis&lt;/a&gt;</snippet></ROW><ROW><id>4543848</id><snippet>def group_paws(data_slices, time):   
    # Sort slices by initial contact time
    data_slices.sort(key=lambda s: s[-1].start)

    # Get the centroid for each paw impact...
    paw_coords = []
    for x,y,z in data_slices:
        paw_coords.append([(item.stop + item.start) / 2.0 for item in (x,y)])
    paw_coords = np.array(paw_coords)

    # Make a vector between each sucessive impact...
    dx, dy = np.diff(paw_coords, axis=0).T

    #-- Group paws -------------------------------------------
    paw_code = {0:'LF', 1:'RH', 2:'RF', 3:'LH'}
    paw_number = np.arange(len(paw_coords))

    # Did we miss the hind paw impact after the first 
    # front paw impact? If so, first dx will be positive...
    if dx[0] &gt; 0: 
        paw_number[1:] += 1

    # Are we starting with the left or right front paw...
    # We assume we're starting with the left, and check dy[0].
    # If dy[0] &gt; 0 (i.e. the next paw impacts to the left), then
    # it's actually the right front paw, instead of the left.
    if dy[0] &gt; 0: # Right front paw impact...
        paw_number += 2

    # Now we can determine the paw with a simple modulo 4..
    paw_codes = paw_number % 4
    paw_labels = [paw_code[code] for code in paw_codes]

    return paw_labels
</snippet></ROW><ROW><id>4543848</id><snippet>def paw_pattern_problems(paw_labels, dx, dy):
    """Check whether or not the label sequence "paw_labels" conforms to our
    expected spatial pattern of paw impacts. "paw_labels" should be a sequence
    of the strings: "LH", "RH", "LF", "RF" corresponding to the different paws"""
    # Check for problems... (This could be written a _lot_ more cleanly...)
    problems = False
    last = paw_labels[0]
    for paw, dy, dx in zip(paw_labels[1:], dy, dx):
        # Going from a left paw to a right, dy should be negative
        if last.startswith('L') and paw.startswith('R') and (dy &gt; 0):
            problems = True
            break
        # Going from a right paw to a left, dy should be positive
        if last.startswith('R') and paw.startswith('L') and (dy &lt; 0):
            problems = True
            break
        # Going from a front paw to a hind paw, dx should be negative
        if last.endswith('F') and paw.endswith('H') and (dx &gt; 0):
            problems = True
            break
        # Going from a hind paw to a front paw, dx should be positive
        if last.endswith('H') and paw.endswith('F') and (dx &lt; 0):
            problems = True
            break
        last = paw
    return problems
</snippet></ROW><ROW><id>4543848</id><snippet>def paw_image(paw):
    from scipy.ndimage import map_coordinates
    ny, nx = paw.shape

    # Trim off any "blank" edges around the paw...
    mask = paw &gt; 0.01 * paw.max()
    y, x = np.mgrid[:ny, :nx]
    ymin, ymax = y[mask].min(), y[mask].max()
    xmin, xmax = x[mask].min(), x[mask].max()

    # Make a 20x20 grid to resample the paw pressure values onto
    numx, numy = 20, 20
    xi = np.linspace(xmin, xmax, numx)
    yi = np.linspace(ymin, ymax, numy)
    xi, yi = np.meshgrid(xi, yi)  

    # Resample the values onto the 20x20 grid
    coords = np.vstack([yi.flatten(), xi.flatten()])
    zi = map_coordinates(paw, coords)
    zi = zi.reshape((numy, numx))

    # Rescale the pressure values
    zi -= zi.min()
    zi /= zi.max()
    zi -= zi.mean() #&lt;- Helps distinguish front from hind paws...
    return zi
</snippet></ROW><ROW><id>4543848</id><snippet>paw_image</snippet></ROW><ROW><id>4543848</id><snippet>def make_eigenpaws(paw_data):
    """Creates a set of eigenpaws based on paw_data.
    paw_data is a numdata by numdimensions matrix of all of the observations."""
    average_paw = paw_data.mean(axis=0)
    paw_data -= average_paw

    # Determine the eigenvectors of the covariance matrix of the data
    cov = np.cov(paw_data.T)
    eigvals, eigvecs = np.linalg.eig(cov)

    # Sort the eigenvectors by ascending eigenvalue (largest is last)
    eig_idx = np.argsort(eigvals)
    sorted_eigvecs = eigvecs[:,eig_idx]
    sorted_eigvals = eigvals[:,eig_idx]

    # Now choose a cutoff number of eigenvectors to use 
    # (50 seems to work well, but it's arbirtrary...
    num_basis_vecs = 50
    basis_vecs = sorted_eigvecs[:,-num_basis_vecs:]

    return basis_vecs
</snippet></ROW><ROW><id>4543848</id><snippet>basis_vecs</snippet></ROW><ROW><id>4543848</id><snippet>codebook = np.load('codebook.npy') # Template vectors for each paw
average_paw = np.load('average_paw.npy')
basis_stds = np.load('basis_stds.npy') # Needed to "whiten" the dataset...
basis_vecs = np.load('basis_vecs.npy')
paw_code = {0:'LF', 1:'RH', 2:'RF', 3:'LH'}
def classify(paw):
    paw = paw.flatten()
    paw -= average_paw
    scores = paw.dot(basis_vecs) / basis_stds
    diff = codebook - scores
    diff *= diff
    diff = np.sqrt(diff.sum(axis=1))
    return paw_code[diff.argmin()]
</snippet></ROW><ROW><id>4544324</id><snippet>mu = Average()
sig = StandardDeviation()
for(i=0;i&lt;rows;i++)
{
   for(j=0;j&lt;cols;j++)
   {
       A[i,j] = (A[i,j]-mu)/sig;
   }
}
</snippet></ROW><ROW><id>4544409</id><snippet>type</snippet></ROW><ROW><id>4544409</id><snippet>type()</snippet></ROW><ROW><id>4544409</id><snippet>type_()</snippet></ROW><ROW><id>4544409</id><snippet>_type()</snippet></ROW><ROW><id>4544409</id><snippet>somethingtype()</snippet></ROW><ROW><id>4544662</id><snippet>print_function</snippet></ROW><ROW><id>4544699</id><snippet>class GrowingList(list):
    def __setitem__(self, index, value):
        if index &gt;= len(self):
            self.extend([None]*(index + 1 - len(self)))
        list.__setitem__(self, index, value)
</snippet></ROW><ROW><id>4544699</id><snippet>&gt;&gt;&gt; grow = GrowingList()
&gt;&gt;&gt; grow[10] = 4
&gt;&gt;&gt; len(grow)
11
&gt;&gt;&gt; grow
[None, None, None, None, None, None, None, None, None, None, 4]
</snippet></ROW><ROW><id>4544758</id><snippet># coding: utf8
import struct
text = u'我是美国人。'
encoded_text = text.encode('utf8')

# proof packing is redundant...
format = '{0}s'.format(len(encoded_text))
packed_text = struct.pack(format,encoded_text)
print encoded_text == packed_text # result: True
</snippet></ROW><ROW><id>4544860</id><snippet>urlretrieve</snippet></ROW><ROW><id>4544860</id><snippet>urllib</snippet></ROW><ROW><id>4544860</id><snippet>urllib2</snippet></ROW><ROW><id>4545647</id><snippet>DatabaseBackend</snippet></ROW><ROW><id>4545647</id><snippet>syncdb</snippet></ROW><ROW><id>4545647</id><snippet>Querysets</snippet></ROW><ROW><id>4545647</id><snippet>models.Manager</snippet></ROW><ROW><id>4545647</id><snippet># helper   
def fill_model_instance(instance, values):
    """ Fills an model instance with the values from dict values """                                    
    attributes = filter(lambda x: not x.startswith('_'), instance.__dict__.keys())

    for a in attributes:
        try:
            setattr(instance, a, values[a.upper()])
            del values[a.upper()]
        except:
            pass

    for v in values.keys():
        setattr(instance, v, values[v])

    return instance




class AuthorManager( models.Manager ):

    # You may try to use the default methods.
    # But should be freaking hard...
    def get_query_set(self):
        raise NotImplementedError("Maybe you can write a Non relational Queryset()! ")

    def latest(self, *args, **kwargs):
        # redis Latest query
        pass

    def filter(self, *args, **kwargs):
       # redis filter query
       pass

    # Custom methods that you may use, instead of rewriting
    # the defaults ones.
    def open_connection(self):
        # Open a redis connection
        pass

    def search_author( self, *args, **kwargs ):
        self.open_connection()

        # Write your query. I don't know how this shiny non-sql works.
        # Assumes it returns a dict for every matched author.
        authors_list = [{'name': 'Leibniz',   'email': 'iinventedcalculus@gmail.com'},
                         'name': 'Kurt Godel','email': 'self.consistent.error@gmail.com'}]

        return [fill_instance(Author(), author) for author in authors_list]



class Author( models.Model ):
    name      = models.CharField( max_length = 255 )
    email     = models.EmailField( max_length = 255 )

     def save(self):
         raise NotImplementedError("TODO: write a redis save")

     def delete(self):
         raise NotImplementedError(""TODO: write a delete save")

     class Meta:
          managed = False
</snippet></ROW><ROW><id>4545864</id><snippet> l = list(netaddr.IPNetwork('192.168.0.0/27').iter_hosts())
</snippet></ROW><ROW><id>4546129</id><snippet>unicode</snippet></ROW><ROW><id>4546129</id><snippet>str</snippet></ROW><ROW><id>4546129</id><snippet>str</snippet></ROW><ROW><id>4546129</id><snippet>bytes</snippet></ROW><ROW><id>4546129</id><snippet>\u</snippet></ROW><ROW><id>4546129</id><snippet>\U</snippet></ROW><ROW><id>4546129</id><snippet>import sys
print sys.stdout.encoding
</snippet></ROW><ROW><id>4546129</id><snippet>None</snippet></ROW><ROW><id>4546129</id><snippet>\u001A</snippet></ROW><ROW><id>4546129</id><snippet>import codecs
import locale
import sys

# Wrap sys.stdout into a StreamWriter to allow writing unicode.
sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout) 

uni = u"\u001A\u0BC3\u1451\U0001D10C"
print uni
</snippet></ROW><ROW><id>4546353</id><snippet>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 115
Connection: keep-alive
</snippet></ROW><ROW><id>4546464</id><snippet>send_mail</snippet></ROW><ROW><id>4546464</id><snippet>html</snippet></ROW><ROW><id>4546464</id><snippet>#Your html body
mail_html_body = '&lt;h1&gt;Hello!&lt;/h1&gt;'

# read data from request
mail_to = str(self.request.POST.get('to'))
mail_from = str(self.request.POST.get('from'))
mail_subject = str(self.request.POST.get('subject'))
mail_body = str(self.request.POST.get('body'))

mail.send_mail(mail_from, 
               mail_to,
               mail_subject, 
               mail_body,
               html = mail_html_body ) #your html body
</snippet></ROW><ROW><id>4546813</id><snippet>#!/usr/bin/env python
import json
import urllib, urllib2

def detect_language(text,
    userip=None,
    referrer="http://stackoverflow.com/q/4545977/4279",
    api_key=None):        

    query = {'q': text.encode('utf-8') if isinstance(text, unicode) else text}
    if userip: query.update(userip=userip)
    if api_key: query.update(key=api_key)

    url = 'https://ajax.googleapis.com/ajax/services/language/detect?v=1.0&amp;%s'%(
        urllib.urlencode(query))

    request = urllib2.Request(url, None, headers=dict(Referer=referrer))
    d = json.load(urllib2.urlopen(request))

    if d['responseStatus'] != 200 or u'error' in d['responseData']:
        raise IOError(d)

    return d['responseData']['language']

print detect_language("Python - can I detect unicode string language code?")
</snippet></ROW><ROW><id>4546813</id><snippet>en
</snippet></ROW><ROW><id>4546813</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json
import urllib, urllib2

from operator import itemgetter

def detect_language_v2(chunks, api_key):
    """
    chunks: either string or sequence of strings

    Return list of corresponding language codes
    """
    if isinstance(chunks, basestring):
        chunks = [chunks] 

    url = 'https://www.googleapis.com/language/translate/v2'

    data = urllib.urlencode(dict(
        q=[t.encode('utf-8') if isinstance(t, unicode) else t 
           for t in chunks],
        key=api_key,
        target="en"), doseq=1)

    # the request length MUST be &lt; 5000
    if len(data) &gt; 5000:
        raise ValueError("request is too long, see "
            "http://code.google.com/apis/language/translate/terms.html")

    #NOTE: use POST to allow more than 2K characters
    request = urllib2.Request(url, data,
        headers={'X-HTTP-Method-Override': 'GET'})
    d = json.load(urllib2.urlopen(request))
    if u'error' in d:
        raise IOError(d)
    return map(itemgetter('detectedSourceLanguage'), d['data']['translations'])
</snippet></ROW><ROW><id>4546813</id><snippet>def detect_language_v2(chunks, api_key):
    """
    chunks: either string or sequence of strings

    Return list of corresponding language codes
    """
    if isinstance(chunks, basestring):
        chunks = [chunks] 

    url = 'https://www.googleapis.com/language/translate/v2/detect'

    data = urllib.urlencode(dict(
        q=[t.encode('utf-8') if isinstance(t, unicode) else t
           for t in chunks],
        key=api_key), doseq=True)

    # the request length MUST be &lt; 5000
    if len(data) &gt; 5000:
        raise ValueError("request is too long, see "
            "http://code.google.com/apis/language/translate/terms.html")

    #NOTE: use POST to allow more than 2K characters
    request = urllib2.Request(url, data,
        headers={'X-HTTP-Method-Override': 'GET'})
    d = json.load(urllib2.urlopen(request))

    return [sorted(L, key=itemgetter('confidence'))[-1]['language']
            for L in d['data']['detections']]
</snippet></ROW><ROW><id>4546813</id><snippet>print detect_language_v2(
    ["Python - can I detect unicode string language code?",
     u"матрёшка",
     u"打水"], api_key=open('api_key.txt').read().strip())
</snippet></ROW><ROW><id>4546813</id><snippet>[u'en', u'ru', u'zh-CN']
</snippet></ROW><ROW><id>4546894</id><snippet>&gt;&gt;&gt; a = "I AM A DEVELOPER"

&gt;&gt;&gt; a.lower().split()
['i', 'am', 'a', 'developer']
</snippet></ROW><ROW><id>4547130</id><snippet>django-mptt</snippet></ROW><ROW><id>4547270</id><snippet>for i in range(10): ...</snippet></ROW><ROW><id>4547270</id><snippet>for i,v in enumerate(l): print i,v</snippet></ROW><ROW><id>4547270</id><snippet>l</snippet></ROW><ROW><id>4547342</id><snippet>cleaners = set()

def _call_cleaners():
    for cleaner in list(cleaners):
        cleaner()

atexit.register(_call_cleaners)

class Foo(object):
  def cleanup(self):
     if self.cleaned:
         raise RuntimeError("ALREADY CLEANED")
     self.cleaned = True
  def start(self):
     self.cleaned = False
     cleaners.add(self.cleanup)
  def end(self):
     self.cleanup()
     cleaners.remove(self.cleanup)
</snippet></ROW><ROW><id>4547346</id><snippet>list of list ... of int</snippet></ROW><ROW><id>4547346</id><snippet>'myjson'.encode('zlib').encode('base64')</snippet></ROW><ROW><id>4547346</id><snippet>A[j][d][d1][d2]</snippet></ROW><ROW><id>4547346</id><snippet>A[j][d][d1][d2] becomes D[(j,d,d1,d2)] or D[j,d,d1,d2]</snippet></ROW><ROW><id>4547350</id><snippet>while a:
    print a.pop()
</snippet></ROW><ROW><id>4547721</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>4547721</id><snippet>return render_to_response('contact.html', {'form': form},
                   context_instance=RequestContext(request))
</snippet></ROW><ROW><id>4547721</id><snippet>render</snippet></ROW><ROW><id>4547721</id><snippet>render_to_response</snippet></ROW><ROW><id>4547721</id><snippet>return render(request, 'contact.html', {form: form})
</snippet></ROW><ROW><id>4548535</id><snippet>for url, name, pnumber in re.findall('Name"&gt;&lt;div&gt;(?:&lt;a href="/si([^"&gt;]*)"&gt; )?([^&lt;]*)(?:.*?&lt;/strong&gt;([^&lt;]*))?',page):
</snippet></ROW><ROW><id>4548535</id><snippet>for url, name, pnumber in re.findall('Name"&gt;&lt;div&gt;(?:&lt;a href="/si([^"&gt;]*)"&gt; )?([^&lt;]*)(?:.*?&lt;/strong&gt;([^&lt;]*))?',page.replace("&lt;tr&gt;","\n"):
</snippet></ROW><ROW><id>4548535</id><snippet>.*?</snippet></ROW><ROW><id>4548535</id><snippet>.*?&lt;/strong&gt;</snippet></ROW><ROW><id>4548535</id><snippet>td class="lablinksMail</snippet></ROW><ROW><id>4548535</id><snippet>\n</snippet></ROW><ROW><id>4548535</id><snippet>.</snippet></ROW><ROW><id>4548535</id><snippet>[^&lt;]</snippet></ROW><ROW><id>4548547</id><snippet>http://www.lfd.uci.edu/~gohlke/pythonlibs/</snippet></ROW><ROW><id>4548547</id><snippet>PIL-1.1.7.win32-py2.7.‌exe</snippet></ROW><ROW><id>4548711</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>4548711</id><snippet>&gt;&gt;&gt; calendar.timegm(time.gmtime())
1293581619.0
</snippet></ROW><ROW><id>4548711</id><snippet>time.strptime()</snippet></ROW><ROW><id>4548711</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>4549229</id><snippet>quack()</snippet></ROW><ROW><id>4549229</id><snippet>quack()</snippet></ROW><ROW><id>4549229</id><snippet>Duck</snippet></ROW><ROW><id>4549229</id><snippet>dict</snippet></ROW><ROW><id>4549229</id><snippet>list</snippet></ROW><ROW><id>4549229</id><snippet>file</snippet></ROW><ROW><id>4549229</id><snippet>file</snippet></ROW><ROW><id>4549229</id><snippet>write()</snippet></ROW><ROW><id>4549229</id><snippet>flush()</snippet></ROW><ROW><id>4549229</id><snippet>close()</snippet></ROW><ROW><id>4549229</id><snippet>__call__()</snippet></ROW><ROW><id>4549229</id><snippet>type()</snippet></ROW><ROW><id>4549229</id><snippet>isinstance()</snippet></ROW><ROW><id>4549229</id><snippet>issubclass()</snippet></ROW><ROW><id>4549229</id><snippet>interface</snippet></ROW><ROW><id>4549229</id><snippet>abc</snippet></ROW><ROW><id>4549229</id><snippet>color</snippet></ROW><ROW><id>4549229</id><snippet>tail_length</snippet></ROW><ROW><id>4549229</id><snippet>quack</snippet></ROW><ROW><id>4549229</id><snippet>quack</snippet></ROW><ROW><id>4549488</id><snippet>r</snippet></ROW><ROW><id>4549488</id><snippet>one = re.sub("\n", '', line)
two = re.sub("\r", '', one)
</snippet></ROW><ROW><id>4549488</id><snippet>string.replace()</snippet></ROW><ROW><id>4549488</id><snippet>line = re.sub('r&lt;/name&gt;.*&lt;name&gt;', "','", line.replace('\n', '').replace('\r', ''))
out.write(line)
</snippet></ROW><ROW><id>4549488</id><snippet>results = []
for line in f:
    match = re.search(r'&lt;name&gt;(.*)&lt;/name&gt;', line)
    if match:
        results.append(match.group(1))
print &gt;&gt;out, "','".join(results)
</snippet></ROW><ROW><id>4549685</id><snippet>%pythoncode %{
Image = Imagedouble
%}
</snippet></ROW><ROW><id>4549901</id><snippet>__import__</snippet></ROW><ROW><id>4549901</id><snippet>myapp.settings = __import__(SETTINGS_MODULE_NAME, globals(), locals(), [], -1)
</snippet></ROW><ROW><id>4549901</id><snippet>from module import *</snippet></ROW><ROW><id>4549963</id><snippet>pymongo_collection_object.remove({'$or': [{'sku': '100-00'}, {'sku': '200-00'}]}, safe=True)
</snippet></ROW><ROW><id>4549963</id><snippet>pymongo_collection_object.remove({'sku': {'$in': ['100-00', '200-00']}}, safe=True)
</snippet></ROW><ROW><id>4550121</id><snippet>import threading
import pycurl

def testf():
    c = pycurl.Curl()
    c.setopt(pycurl.CONNECTTIMEOUT, 3)
    c.setopt(pycurl.TIMEOUT, 3)
    c.setopt(pycurl.NOSIGNAL, 1)
    c.setopt(pycurl.URL, 'http://localhost/cgi-bin/foo.py')
    c.setopt(pycurl.HTTPGET, 1)
    c.perform()

for i in range(100):
    t = threading.Thread(target=testf)
    t.start()
</snippet></ROW><ROW><id>4550243</id><snippet>import win32gui
import win32con
import winxpgui
import win32api
import subprocess
import time

subprocess.Popen("notepad.exe", shell=True)
time.sleep(1)
hwnd = win32gui.FindWindow(None, "New file - metapad")  ## The caption of my empty notepad (MetaPad)

win32gui.SetWindowLong (hwnd, win32con.GWL_EXSTYLE, win32gui.GetWindowLong (hwnd, win32con.GWL_EXSTYLE ) | win32con.WS_EX_LAYERED )
winxpgui.SetLayeredWindowAttributes(hwnd, win32api.RGB(0,0,0), 180, win32con.LWA_ALPHA)
</snippet></ROW><ROW><id>4550327</id><snippet>import math

speed = 5
angle = math.radians(90)    # Remember to convert to radians!
change = [speed * math.cos(angle), speed * math.sin(angle)]
</snippet></ROW><ROW><id>4550623</id><snippet>for i in ['a','b','c','d','e','f','g']:
    for j in range(1,15):
        url = BASE_URL + i + str(j)
        print url
</snippet></ROW><ROW><id>4550652</id><snippet>items</snippet></ROW><ROW><id>4550652</id><snippet>iteritems</snippet></ROW><ROW><id>4550652</id><snippet>iteritems</snippet></ROW><ROW><id>4550652</id><snippet>iteritems</snippet></ROW><ROW><id>4550652</id><snippet>iteritems</snippet></ROW><ROW><id>4550652</id><snippet>items</snippet></ROW><ROW><id>4550652</id><snippet>iteritems</snippet></ROW><ROW><id>4550652</id><snippet>collections.Counter</snippet></ROW><ROW><id>4550725</id><snippet>1.0 / i * score</snippet></ROW><ROW><id>4550725</id><snippet>1.0</snippet></ROW><ROW><id>4550725</id><snippet>1.0/i</snippet></ROW><ROW><id>4550725</id><snippet>1 / i * score</snippet></ROW><ROW><id>4551141</id><snippet>def makeSelect(name,values):
    SEL = '&lt;select name="{0}"&gt;\n{1}&lt;/select&gt;\n'
    OPT = '&lt;option value="{0}"&gt;{0}&lt;/option&gt;\n'
    return SEL.format(name, ''.join(OPT.format(v) for v in values))
</snippet></ROW><ROW><id>4551198</id><snippet>os.kill()</snippet></ROW><ROW><id>4551198</id><snippet>OSError</snippet></ROW><ROW><id>4551198</id><snippet>try:
    os.kill(pid, 0)
    print("process exists")
except OSError:
    print("process does not exist")
</snippet></ROW><ROW><id>4551198</id><snippet>kill(2)</snippet></ROW><ROW><id>4551549</id><snippet>void testfunc1(PIX *pix)
{
    static char staticBuffer[256] = "static memory";
    pix-&gt;text = staticBuffer;
}

void testfunc2(PIX *pix)
{
    pix-&gt;text = (char *)malloc(32);
    strcpy(pix-&gt;text, "dynamic memory");
}
</snippet></ROW><ROW><id>4551549</id><snippet>pix1, pix2 = PIX(), PIX()
mylib.testfunc1(ctypes.byref(pix1))
mylib.testfunc2(ctypes.byref(pix2))
</snippet></ROW><ROW><id>4551549</id><snippet>pix1</snippet></ROW><ROW><id>4551549</id><snippet>pix2</snippet></ROW><ROW><id>4551549</id><snippet>pix2</snippet></ROW><ROW><id>4551549</id><snippet>pix1</snippet></ROW><ROW><id>4551549</id><snippet>void freepix(PIX *pix)
{
    free(pix-&gt;text);
}


pix2 = PIX()
mylib.testfunc2(ctypes.byref(pix2))
...
mylib.freepix(ctypes.byref(pix2))
</snippet></ROW><ROW><id>4551807</id><snippet>obj.value = newvalue</snippet></ROW><ROW><id>4551807</id><snippet>__call__()</snippet></ROW><ROW><id>4551807</id><snippet>obj(newvalue)</snippet></ROW><ROW><id>4551807</id><snippet>__ilshift__()</snippet></ROW><ROW><id>4551807</id><snippet>obj &lt;&lt;= newval</snippet></ROW><ROW><id>4551807</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>4551807</id><snippet>int</snippet></ROW><ROW><id>4552060</id><snippet>DJANGO_MODULE_SETTINGS</snippet></ROW><ROW><id>4552060</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = "myproject.settings"
</snippet></ROW><ROW><id>4552478</id><snippet>def mapNumber(a):
    return int(a + 1000) / 10
</snippet></ROW><ROW><id>4552478</id><snippet>mapNumber(-1000)
&gt; 0

mapNumber(-500)
&gt; 50

mapNumber(0)
&gt; 100

mapNumber(500)
&gt; 150

mapNumber(1000)
&gt; 200
</snippet></ROW><ROW><id>4552478</id><snippet>def mapNumber(a):
    return (a + 1000.) / 10.
</snippet></ROW><ROW><id>4552838</id><snippet>print...</snippet></ROW><ROW><id>4552838</id><snippet>print select([my_table, func.current_date()]).execute()
</snippet></ROW><ROW><id>4552838</id><snippet>func.current_date(type_=types.Date, bind=engine1)
func.current_timestamp(type_=types.Time, bind=engine2)
</snippet></ROW><ROW><id>4553080</id><snippet>from twisted.internet import reactor, defer

def callback_func_2(result, previous_data):
    # here we pass the result of the deferred down the callback chain
    # (done synchronously)
    print "calling function 1 on result:%s with previous result:%s" % (result, previous_data)
    return result

def callback_func(result):
    #let's do some asynchronous stuff in this callback
    # simple trick here is to return a deferred from a callback 
    # instead of the result itself.
    # 
    # so we can do asynchronous stuff here, 
    # like firing something 1 second later and have 
    # another method processing the result
    print "calling function 1 on result:%s" % result
    d = defer.Deferred()
    reactor.callLater(1, d.callback, "second callback")
    d.addCallback(callback_func_2, result)
    return d

def do():
    d = defer.Deferred()
    reactor.callLater(1, d.callback, "first callback")
    d.addCallback(callback_func)
    return d

do()
reactor.run()
</snippet></ROW><ROW><id>4553134</id><snippet>&gt;&gt;&gt; text = "GoTo: 7018 6453 12654\n"
&gt;&gt;&gt; [token for token in text.split() if token.isdigit()]
['7018', '6453', '12654']
</snippet></ROW><ROW><id>4553303</id><snippet>stop = time.time()+10000
while time.time() &lt; stop:
  do things
</snippet></ROW><ROW><id>4553513</id><snippet>from celery.task import Task
class Randomer(Task):
    def run(self, **kwargs):
        while True:
           do_something(**kwargs)
           time.sleep(600)
</snippet></ROW><ROW><id>4553649</id><snippet>btn_new.connect("clicked", self.comboprint, combobox1, combobox2)
</snippet></ROW><ROW><id>4553649</id><snippet>comboprint</snippet></ROW><ROW><id>4553649</id><snippet>def comboprint(self, widget, *data):
    # Widget = btn_new
    # data = [clicked_event, combobox1, combobox2]
    ...  
</snippet></ROW><ROW><id>4553890</id><snippet>from socket import *

server = socket(AF_INET, SOCK_STREAM)
server.bind((gethostname(), 23))
server.listen(5)

(connection, address) = server.accept()
while 1:
    data = connection.recv(1024)
    print data
    if data=='X':
        break 

connection.close()
</snippet></ROW><ROW><id>4553890</id><snippet>if data.strip() == 'X':</snippet></ROW><ROW><id>4553890</id><snippet>if not data:
    break
</snippet></ROW><ROW><id>4553921</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>4553921</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>4553921</id><snippet>python-tk</snippet></ROW><ROW><id>4554147</id><snippet>a, b, c</snippet></ROW><ROW><id>4554147</id><snippet>a &gt; b</snippet></ROW><ROW><id>4554147</id><snippet>b &gt; c</snippet></ROW><ROW><id>4554147</id><snippet>a &gt; c</snippet></ROW><ROW><id>4554147</id><snippet>a = [1, 2]</snippet></ROW><ROW><id>4554147</id><snippet>b = [2, 1]</snippet></ROW><ROW><id>4554147</id><snippet>a[1] == b[0]</snippet></ROW><ROW><id>4554147</id><snippet>a[0] == b[1]</snippet></ROW><ROW><id>4554221</id><snippet>import dis

def swap1():
  a=5
  b=4
  a, b = b, a

def swap2():
  a=5
  b=4
  c = a
  a = b
  b = c

print 'swap1():'
dis.dis(swap1)
print 'swap2():'
dis.dis(swap2)
</snippet></ROW><ROW><id>4554221</id><snippet>swap1():
  6           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (a)

  7           6 LOAD_CONST               2 (4)
              9 STORE_FAST               1 (b)

  8          12 LOAD_FAST                1 (b)
             15 LOAD_FAST                0 (a)
             18 ROT_TWO             
             19 STORE_FAST               0 (a)
             22 STORE_FAST               1 (b)
             25 LOAD_CONST               0 (None)
             28 RETURN_VALUE        
swap2():
 11           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (a)

 12           6 LOAD_CONST               2 (4)
              9 STORE_FAST               1 (b)

 13          12 LOAD_FAST                0 (a)
             15 STORE_FAST               2 (c)

 14          18 LOAD_FAST                1 (b)
             21 STORE_FAST               0 (a)

 15          24 LOAD_FAST                2 (c)
             27 STORE_FAST               1 (b)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
</snippet></ROW><ROW><id>4554221</id><snippet>ROT_TWO</snippet></ROW><ROW><id>4554222</id><snippet>href="{% url foo %}?bar=1"
</snippet></ROW><ROW><id>4554296</id><snippet>here</snippet></ROW><ROW><id>4554329</id><snippet>errors='ignore'</snippet></ROW><ROW><id>4554329</id><snippet>sys.stdin</snippet></ROW><ROW><id>4554329</id><snippet>sys.stdin = codecs.getreader('utf8')(sys.stdin.detach(), errors='ignore')
</snippet></ROW><ROW><id>4554871</id><snippet>import sys
import os

for f in sys.argv[1:]:
    if os.path.exists(f):
        for line in open(f).readlines():
            process(line)
</snippet></ROW><ROW><id>4555080</id><snippet>nscd (Name Service Cache Daemon)</snippet></ROW><ROW><id>4555080</id><snippet>page.close()</snippet></ROW><ROW><id>4555533</id><snippet>uuid</snippet></ROW><ROW><id>4555585</id><snippet>use selectedImageUri = Uri.fromFile(photo);</snippet></ROW><ROW><id>4555585</id><snippet>selectedImageUri = data.getData();</snippet></ROW><ROW><id>4555585</id><snippet>selectedImagePath = selectedImagePath.substring(7);</snippet></ROW><ROW><id>4555585</id><snippet>// convert the image URI to the direct file system path of the image file  
public String getRealPathFromURI(Uri contentUri) {  

    // can post image  
    String [] proj={MediaStore.Images.Media.DATA};  
    Cursor cursor = managedQuery( contentUri,  
            proj, // Which columns to return  
            null,       // WHERE clause; which rows to return (all rows)  
            null,       // WHERE clause selection arguments (none)  
            null); // Order-by clause (ascending by name)  
    int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);  
    cursor.moveToFirst();  

    return cursor.getString(column_index);  
</snippet></ROW><ROW><id>4555668</id><snippet>~</snippet></ROW><ROW><id>4555668</id><snippet>WORKON_HOME</snippet></ROW><ROW><id>4555852</id><snippet>heapq</snippet></ROW><ROW><id>4555852</id><snippet>heapify()</snippet></ROW><ROW><id>4555852</id><snippet>heappop()</snippet></ROW><ROW><id>4555852</id><snippet>heapify()</snippet></ROW><ROW><id>4555852</id><snippet>heappop()</snippet></ROW><ROW><id>4555852</id><snippet>heapq.heapify(items)
size = 0
while items and size &lt; 45000:
  item = heapq.heappop(items)
  size += item[1]
  print item
</snippet></ROW><ROW><id>4555852</id><snippet>(0, 3234)
(1, 42341)
</snippet></ROW><ROW><id>4555970</id><snippet>foo.x = 0</snippet></ROW><ROW><id>4555970</id><snippet>foo.set_x(0)</snippet></ROW><ROW><id>4555970</id><snippet>@property</snippet></ROW><ROW><id>4555970</id><snippet>foo.x = 0</snippet></ROW><ROW><id>4555970</id><snippet>foo.set_x(0)</snippet></ROW><ROW><id>4555970</id><snippet>foo.x += 1
</snippet></ROW><ROW><id>4555970</id><snippet>foo.set_x(foo.get_x() + 1)
</snippet></ROW><ROW><id>4555970</id><snippet>__x</snippet></ROW><ROW><id>4555998</id><snippet>model/__init__.py</snippet></ROW><ROW><id>4555998</id><snippet>__init__.py</snippet></ROW><ROW><id>4555998</id><snippet>model</snippet></ROW><ROW><id>4555998</id><snippet>init_model()</snippet></ROW><ROW><id>4555998</id><snippet>model</snippet></ROW><ROW><id>4555998</id><snippet>objects.py</snippet></ROW><ROW><id>4555998</id><snippet>Event</snippet></ROW><ROW><id>4555998</id><snippet>from PRJ.model.objects import Event
</snippet></ROW><ROW><id>4555998</id><snippet>autoload-with</snippet></ROW><ROW><id>4555998</id><snippet>init_model()</snippet></ROW><ROW><id>4555998</id><snippet>Base.metadata.bind = engine
</snippet></ROW><ROW><id>4555998</id><snippet>class Event(Base):
    __tablename__ = 'events'
    __table_args__ = {'schema': 'events', 'autoload': True}

    event_identifiers = relationship(EventIdentifier)

    def __repr__(self):
        return "&lt;Event(%s)&gt;" % self.id
</snippet></ROW><ROW><id>4556118</id><snippet>A</snippet></ROW><ROW><id>4556118</id><snippet>from constants import A as DistinctA
</snippet></ROW><ROW><id>4556118</id><snippet>utils/
utils/__init__.py
utils/constants.py
</snippet></ROW><ROW><id>4556118</id><snippet>from utils.constants import A as DistinctA
</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_DOMAIN</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_PATH</snippet></ROW><ROW><id>4556331</id><snippet>'django.contrib.sessions'</snippet></ROW><ROW><id>4556331</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4556331</id><snippet>'django.contrib.sessions.middleware.SessionMiddleware'</snippet></ROW><ROW><id>4556331</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_DOMAIN</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_PATH</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_DOMAIN</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_PATH</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_COOKIE_PATH</snippet></ROW><ROW><id>4556331</id><snippet>SESSION_FILE_PATH</snippet></ROW><ROW><id>4556346</id><snippet>1</snippet></ROW><ROW><id>4556346</id><snippet>increment</snippet></ROW><ROW><id>4556346</id><snippet>1</snippet></ROW><ROW><id>4556346</id><snippet>2</snippet></ROW><ROW><id>4556511</id><snippet>Q(lord__isnull=False) | Q(overlord__isnull=False) 
</snippet></ROW><ROW><id>4556928</id><snippet>plot</snippet></ROW><ROW><id>4556928</id><snippet>yplot = 0 #added

#do the simulation
total_time = 0.0
dt = 0.04
times=[]
yvals=[]
while total_time&lt;2.0:
    x,y,z = body.getPosition()
    u,v,w = body.getLinearVel()
    print "%1.2fsec: pos=(%6.3f,%6.3f,%6.3f) vel=(%6.3f,%6.3f,%6.3f)" % \
        (total_time, x,y,z,u,v,w)
    world.step(dt)
    total_time += dt
    yplot += y 
    times.append(total_time)
    yvals.append(yplot)
plot(times, yvals,'r-')
xlabel('Time') #added
ylabel('Height') #added
show() #added
</snippet></ROW><ROW><id>4556928</id><snippet>'r-'</snippet></ROW><ROW><id>4556928</id><snippet>pylab</snippet></ROW><ROW><id>4556928</id><snippet>times</snippet></ROW><ROW><id>4556928</id><snippet>yvals</snippet></ROW><ROW><id>4556928</id><snippet>pylab</snippet></ROW><ROW><id>4556928</id><snippet>plot</snippet></ROW><ROW><id>4557157</id><snippet>import urllib2
from xml.etree import ElementTree

result = urllib2.urlopen('http://boardgamegeek.com/xmlapi/boardgame/13').read()
xml = ElementTree.fromstring(result)
print xml.findtext(".//age")
</snippet></ROW><ROW><id>4557281</id><snippet>for item in iterable:
    break
else:
    # handle the empty-sequence-case here
</snippet></ROW><ROW><id>4557281</id><snippet>item = next(iterator, sentinel)
if item is sentinel:
   # handle the empty-sequence-case here   
</snippet></ROW><ROW><id>4557281</id><snippet>empty_adapter()</snippet></ROW><ROW><id>4557281</id><snippet>def empty_adaptor(iterable, sentinel=object()):
    it = iter(iterable)
    item = next(it, sentinel)
    if item is sentinel:
       return None # empty
    else:
       def gen():
           yield item
           for i in it:
               yield i
       return gen()
</snippet></ROW><ROW><id>4557281</id><snippet>it = empty_adaptor(some_iter)
if it is not None: 
   for i in it:
       # handle items
else:
   # handle empty case
</snippet></ROW><ROW><id>4557326</id><snippet>break</snippet></ROW><ROW><id>4557326</id><snippet>continue</snippet></ROW><ROW><id>4557326</id><snippet>continue</snippet></ROW><ROW><id>4557326</id><snippet>while True: 
        choice = raw_input('What do you want? ')
        if choice == 'restart':
                continue
        else:
                break

print 'Break!' 
</snippet></ROW><ROW><id>4557326</id><snippet>choice = 'restart';

while choice == 'restart': 
        choice = raw_input('What do you want? ')

print 'Break!' 
</snippet></ROW><ROW><id>4557326</id><snippet>What do you want? restart
What do you want? break
Break!
</snippet></ROW><ROW><id>4557466</id><snippet>gc.get_referrers</snippet></ROW><ROW><id>4557466</id><snippet>&gt;&gt;&gt; l = [1, 2]
&gt;&gt;&gt; d = {0: l}
&gt;&gt;&gt; t = (l, )
&gt;&gt;&gt; import gc
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(gc.get_referrers(l))
[{'__builtins__': &lt;module '__builtin__' (built-in)&gt;,
  '__doc__': None,
  '__name__': '__main__',
  '__package__': None,
  'd': {0: [1, 2]},
  'gc': &lt;module 'gc' (built-in)&gt;,
  'l': [1, 2],
  'pprint': &lt;module 'pprint' from '/usr/lib/python2.6/pprint.pyc'&gt;,
  't': ([1, 2],)},   # This is globals()

 {0: [1, 2]},  # This is d
 ([1, 2],)]   # this is t
</snippet></ROW><ROW><id>4557466</id><snippet>l</snippet></ROW><ROW><id>4557466</id><snippet>globals()</snippet></ROW><ROW><id>4557622</id><snippet>d1 = datetime.datetime.now() + datetime.timedelta(minutes=15)
d2 = datetime.datetime.now() + datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>4557741</id><snippet>True</snippet></ROW><ROW><id>4557741</id><snippet>False</snippet></ROW><ROW><id>4557741</id><snippet># projectname/appname/context_processors.py

def booleans():
    return {
        'True': True,
        'False': False,
    }
</snippet></ROW><ROW><id>4557741</id><snippet>TEMPLATE_CONTEXT_PROCESSORS += {
    'projectname.appname.context_processors.booleans',
}
</snippet></ROW><ROW><id>4557800</id><snippet>import random
SEED = 448

myList = [ 'list', 'elements', 'go', 'here' ]
random.seed(SEED)
random.shuffle(myList)

print myList
</snippet></ROW><ROW><id>4557800</id><snippet>['here', 'go', 'list', 'elements']
</snippet></ROW><ROW><id>4557800</id><snippet>Order = list(range(len(myList)))
# Order is a list having the same number of items as myList,
# where each position's value equals its index

random.seed(SEED)
random.shuffle(Order)
# Order is now shuffled in the same order as myList;
# so each position's value equals its original index

originalList = [0]*len(myList)   # empty list, but the right length
for index,originalIndex in enumerate(Order):
    originalList[originalIndex] = myList[index]
    # copy each item back to its original index

print originalList
</snippet></ROW><ROW><id>4557800</id><snippet>['list', 'elements', 'go', 'here']
</snippet></ROW><ROW><id>4558138</id><snippet>class MotorFaultError(Exception) # top level exception
class MotorTempFault(MotorFaultError)
class MotorVoltageFault(MotorFaultError)
# etc
</snippet></ROW><ROW><id>4558344</id><snippet>def all_same_sign(ints):
    return all(x &lt; 0 for x in ints) or all(x &gt; 0 for x in ints)
</snippet></ROW><ROW><id>4558597</id><snippet>exec</snippet></ROW><ROW><id>4558597</id><snippet>eval()</snippet></ROW><ROW><id>4558597</id><snippet>exec</snippet></ROW><ROW><id>4558597</id><snippet>eval()</snippet></ROW><ROW><id>4558597</id><snippet>exec</snippet></ROW><ROW><id>4558597</id><snippet>eval()</snippet></ROW><ROW><id>4558597</id><snippet>func_globals</snippet></ROW><ROW><id>4558597</id><snippet># create a sandbox globals dict
sandbox = {}

# create a new version of test() that uses the sandbox for its globals
newtest = type(test)(test.func_code, sandbox, test.func_name, test.func_defaults,
                     test.func_closure)

# add the sandboxed version of test() to the sandbox
sandbox["test"] = newtest
</snippet></ROW><ROW><id>4558781</id><snippet>pip</snippet></ROW><ROW><id>4558901</id><snippet>print</snippet></ROW><ROW><id>4558901</id><snippet>logging</snippet></ROW><ROW><id>4558901</id><snippet>print &gt;&gt;sys.stderr, 'Goodbye, cruel world!'
</snippet></ROW><ROW><id>4558915</id><snippet>time.sleep()</snippet></ROW><ROW><id>4558999</id><snippet>def slicedict(d, s):
    return {k:v for k,v in d.iteritems() if k.startswith(s)}
</snippet></ROW><ROW><id>4559171</id><snippet>.local</snippet></ROW><ROW><id>4559171</id><snippet>.local</snippet></ROW><ROW><id>4559382</id><snippet>c.setopt(pycurl.POST, 1)
c.setopt(pycurl.POSTFIELDS, data)
</snippet></ROW><ROW><id>4559382</id><snippet>data</snippet></ROW><ROW><id>4559382</id><snippet>c.setopt(pycurl.POSTFIELDS, '"%s"' % data)</snippet></ROW><ROW><id>4559382</id><snippet>conn</snippet></ROW><ROW><id>4559382</id><snippet>c</snippet></ROW><ROW><id>4559450</id><snippet>found_match = False

for t in tuplelist:
    if t[1] == searchstring:
        #do something
        print "match was found"
        found_match = True

if not found_match:
    # ...
</snippet></ROW><ROW><id>4559488</id><snippet>&gt;&gt;&gt; "{0:.6f}".format(123455.12345678)
'123455.123457'
</snippet></ROW><ROW><id>4559557</id><snippet>create_db</snippet></ROW><ROW><id>4559557</id><snippet>read_db</snippet></ROW><ROW><id>4559557</id><snippet>import sqlite3
def create_db(conn):
    c = conn.cursor()
    c.execute('create table test (i integer)')
    conn.commit()
    max_val = 15000000
    chunk = 1000000
    for start in xrange(0, max_val, chunk):
        print "%i ..." % start
        for i in xrange(start, start + chunk):
            c = conn.cursor()
            c.execute('insert into test (i) values (?)', (i,))
        conn.commit()

def read_db(conn):
    c = conn.cursor()
    c.execute('select * from test')
    for x in xrange(15000000):
        c.fetchone()

    print "Done"

    # Sleep forever, to examine memory usage:
    while True:
        time.sleep(1)

def go():
    conn = sqlite3.connect('test.db')

    # Pick one:
    create_db(conn)
    # read_db(conn)

if __name__ == "__main__":
    go()
</snippet></ROW><ROW><id>4559775</id><snippet>_mysql.so</snippet></ROW><ROW><id>4559775</id><snippet>libmysqlclient.16.dylib</snippet></ROW><ROW><id>4559775</id><snippet>_mysql.so</snippet></ROW><ROW><id>4559775</id><snippet>libmysqlclient.16.dylib</snippet></ROW><ROW><id>4559775</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>4559775</id><snippet>libmysqlclient.16.dylib</snippet></ROW><ROW><id>4559775</id><snippet>/opt/local/lib/mysql5/mysql/libmysqlclient.16.dylib</snippet></ROW><ROW><id>4559775</id><snippet>c79ee91af08057dfc269ee212915801a</snippet></ROW><ROW><id>4559985</id><snippet>runner.run()
</snippet></ROW><ROW><id>4560119</id><snippet>void Main()
{
    object value1 = 1234.5F;
    object value2 = 1234.5F;
    Console.WriteLine(AreEqual(value1, value2));
    Console.WriteLine(AreEqual((float)value1, (float)value2));
}

bool AreEqual(object value1, object value2) {
    return value1 == value2;
}

bool AreEqual(float value1, float value2) {
    return value1 == value2;
}
</snippet></ROW><ROW><id>4560171</id><snippet>vpan = gtk.VPaned()
vpan.show()
vpan.pack1(box1, shrink=False)
vpan.pack2(box2, shrink=False)
</snippet></ROW><ROW><id>4560334</id><snippet>import traceback
try:
  x = 5
  y = 0
  print x/y
except ZeroDivisionError:
  print "Error Dividing %d/%d" % (x,y)
  traceback.print_exc()
except:
  print "A non-ZeroDivisionError occurred"
</snippet></ROW><ROW><id>4560334</id><snippet>traceback.print_exc()</snippet></ROW><ROW><id>4560722</id><snippet>from __future__ import print_function
from timeit import Timer
from math import factorial

try:
    range = xrange
except:
    pass

def perms(s):
    s = tuple(s)
    N = len(s)
    if N &lt;= 1:
        yield s[:]
        raise StopIteration()
    for x in perms(s[1:]):
        for i in range(0,N):
            yield x[:i] + (s[0],) + x[i:]

def testcase(s):
    for x in perms(s):
        pass

def test():
    for i in range(1,11):
        s = "".join(["%d" % x for x in range(i)])
        s = "testcase(\"%s\")" % s
        t = Timer(s,"from __main__ import testcase")
        factor = 100000
        factor = int(factor/factorial(i))
        factor = (factor&gt;0) and factor or 1
        yield (i,(1000*min(t.repeat(5,factor))/factor))

if __name__=="__main__":
    print("args\ttime[ms]")
    for x in test():
        print("%i\t%f" % x)
</snippet></ROW><ROW><id>4560722</id><snippet>case@quad:~$ py27 perms.py
args    time[ms]
1   0.002221
2   0.005072
3   0.010352
4   0.027648
5   0.111339
6   0.618658
7   4.207046
8   33.213019
9   294.044971
10  2976.780891

case@quad:~$ py32 perms.py
args    time[ms]
1   0.001725
2   0.004997
3   0.011208
4   0.032815
5   0.139474
6   0.761153
7   5.068729
8   39.760470
9   356.358051
10  3566.874027
</snippet></ROW><ROW><id>4560722</id><snippet>x[:i] + (s[0],) + x[i:]</snippet></ROW><ROW><id>4560722</id><snippet>case@quad:~$ py27 -m timeit -s "s=(1,2,3,4,5);x=(1,2,3,4,5,6,7,8)" "x[:3] + (s[0],) + x[3:]"
1000000 loops, best of 3: 0.549 usec per loop
case@quad:~$ py32 -m timeit -s "s=(1,2,3,4,5);x=(1,2,3,4,5,6,7,8)" "x[:3] + (s[0],) + x[3:]"
1000000 loops, best of 3: 0.687 usec per loop
</snippet></ROW><ROW><id>4560722</id><snippet>case@quad:~/src/Python-3.0.1$ py32
Python 3.2b2 (r32b2:87398, Dec 21 2010, 21:39:59) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import dis
&gt;&gt;&gt; s=(1,2,3,4,5)
&gt;&gt;&gt; x=(1,2,3,4,5,6,7,8)
&gt;&gt;&gt; def f(s,x):
...   return x[:3] + (s[0],) + x[3:]
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                1 (x) 
              3 LOAD_CONST               0 (None) 
              6 LOAD_CONST               1 (3) 
              9 BUILD_SLICE              2 
             12 BINARY_SUBSCR        
             13 LOAD_FAST                0 (s) 
             16 LOAD_CONST               2 (0) 
             19 BINARY_SUBSCR        
             20 BUILD_TUPLE              1 
             23 BINARY_ADD           
             24 LOAD_FAST                1 (x) 
             27 LOAD_CONST               1 (3) 
             30 LOAD_CONST               0 (None) 
             33 BUILD_SLICE              2 
             36 BINARY_SUBSCR        
             37 BINARY_ADD           
             38 RETURN_VALUE         
&gt;&gt;&gt; exit()
case@quad:~/src/Python-3.0.1$ py26
Python 2.6.6 (r266:84292, Oct 24 2010, 15:27:46) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import dis
&gt;&gt;&gt; s=(1,2,3,4,5)
&gt;&gt;&gt; x=(1,2,3,4,5,6,7,8)
&gt;&gt;&gt; def f(s,x):
...   return x[:3] + (s[0],) + x[3:]
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                1 (x)
              3 LOAD_CONST               1 (3)
              6 SLICE+2             
              7 LOAD_FAST                0 (s)
             10 LOAD_CONST               2 (0)
             13 BINARY_SUBSCR       
             14 BUILD_TUPLE              1
             17 BINARY_ADD          
             18 LOAD_FAST                1 (x)
             21 LOAD_CONST               1 (3)
             24 SLICE+1             
             25 BINARY_ADD          
             26 RETURN_VALUE        
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4560928</id><snippet>__future__</snippet></ROW><ROW><id>4560928</id><snippet>print_function</snippet></ROW><ROW><id>4560928</id><snippet>print()</snippet></ROW><ROW><id>4560928</id><snippet>__future__</snippet></ROW><ROW><id>4561743</id><snippet>__init__</snippet></ROW><ROW><id>4561743</id><snippet>decayer = tasks.Decayer()
</snippet></ROW><ROW><id>4561743</id><snippet>^</snippet></ROW><ROW><id>4561743</id><snippet>**</snippet></ROW><ROW><id>4561743</id><snippet>^</snippet></ROW><ROW><id>4561743</id><snippet>y = 2 ** x
</snippet></ROW><ROW><id>4561915</id><snippet>argparse.ArgumentParser</snippet></ROW><ROW><id>4561915</id><snippet>error()</snippet></ROW><ROW><id>4561915</id><snippet>ArgumentParser</snippet></ROW><ROW><id>4561915</id><snippet>error()</snippet></ROW><ROW><id>4561915</id><snippet>argparse.ArgumentParser</snippet></ROW><ROW><id>4561915</id><snippet>error()</snippet></ROW><ROW><id>4561915</id><snippet>argparse</snippet></ROW><ROW><id>4561915</id><snippet>def error(self, message):
    """error(message: string)

    Prints a usage message incorporating the message to stderr and
    exits.

    If you override this in a subclass, it should not return -- it
    should either exit or raise an exception.
    """
    self.print_usage(sys.stderr)
    self.exit(2, '%s: error: %s\n' % (self.prog, message))
</snippet></ROW><ROW><id>4561915</id><snippet>error()</snippet></ROW><ROW><id>4561915</id><snippet>parse_args()</snippet></ROW><ROW><id>4561915</id><snippet>*_command(args)</snippet></ROW><ROW><id>4561915</id><snippet>args</snippet></ROW><ROW><id>4561915</id><snippet>args.command(subparsers, args)  # Instead of args.command(args)
</snippet></ROW><ROW><id>4561915</id><snippet>*_command()</snippet></ROW><ROW><id>4561915</id><snippet>subparsers.choices['beaker'].print_help()  # or print_usage()
</snippet></ROW><ROW><id>4561915</id><snippet>*_command()</snippet></ROW><ROW><id>4561915</id><snippet>args.command(subparsers.choices[sys.argv[1]], args)
</snippet></ROW><ROW><id>4561915</id><snippet>*_command(subparser, args)</snippet></ROW><ROW><id>4561915</id><snippet>subparser.print_help()</snippet></ROW><ROW><id>4562126</id><snippet>Input and Output</snippet></ROW><ROW><id>4562278</id><snippet>import os.path

#Get the absolute path of the settings.py file's directory
PWD = os.path.dirname(os.path.realpath(__file__ )) 

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or 
    # "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.

    #Add Templates to the absolute directory
    os.path.join(PWD, "Templates") 
)
</snippet></ROW><ROW><id>4563540</id><snippet>[ord(c) for c in '6gAAAOsAAADsAAAACAEAAAkBAAAKAQAAJgEAACcBAAAoAQAA'.decode('base64')]
</snippet></ROW><ROW><id>4563613</id><snippet>word.count('e')</snippet></ROW><ROW><id>4563613</id><snippet>-1</snippet></ROW><ROW><id>4563613</id><snippet>while letters &gt;= 0</snippet></ROW><ROW><id>4563613</id><snippet>while letters &gt; 0</snippet></ROW><ROW><id>4563613</id><snippet>for</snippet></ROW><ROW><id>4563613</id><snippet>while</snippet></ROW><ROW><id>4563613</id><snippet>+=</snippet></ROW><ROW><id>4563613</id><snippet>count = count + 1</snippet></ROW><ROW><id>4563613</id><snippet>char='e'</snippet></ROW><ROW><id>4563613</id><snippet>has_no_e()</snippet></ROW><ROW><id>4563613</id><snippet>def count_letter(word, char='e'):
    count = 0
    for c in word:
        if c == char:
            count += 1
    return count
</snippet></ROW><ROW><id>4563613</id><snippet>&gt;&gt;&gt; count_letter('tee')
2
&gt;&gt;&gt; count_letter('tee', 't')
1
&gt;&gt;&gt; count_letter('tee', 'f')
0
&gt;&gt;&gt; count_letter('wh' + 'e'*100)
100
</snippet></ROW><ROW><id>4563642</id><snippet>EPOCH_DATETIME = datetime.datetime(1970,1,1)
SECONDS_PER_DAY = 24*60*60

def utc_to_local_datetime( utc_datetime ):
    delta = utc_datetime - EPOCH_DATETIME
    utc_epoch = SECONDS_PER_DAY * delta.days + delta.seconds
    time_struct = time.localtime( utc_epoch )
    dt_args = time_struct[:6] + (delta.microseconds,)
    return datetime.datetime( *dt_args )
</snippet></ROW><ROW><id>4563642</id><snippet>&gt;&gt;&gt; utc_to_local_datetime( datetime.datetime(2010, 6, 6, 17, 29, 7, 730000) )
datetime.datetime(2010, 6, 6, 19, 29, 7, 730000)
&gt;&gt;&gt; utc_to_local_datetime( datetime.datetime(2010, 12, 6, 17, 29, 7, 730000) )
datetime.datetime(2010, 12, 6, 18, 29, 7, 730000)
</snippet></ROW><ROW><id>4563931</id><snippet>bsddb</snippet></ROW><ROW><id>4563931</id><snippet>env = db.DBEnv()
env.open(None, db.DB_CREATE | db.DB_INIT_MPOOL)
internal_db = db.DB(env)
internal_db.open("the filename", "the internal db name", db.DB_BTREE, db.DB_RDONLY)
</snippet></ROW><ROW><id>4564595</id><snippet>traceback</snippet></ROW><ROW><id>4564595</id><snippet>format_exc()</snippet></ROW><ROW><id>4564595</id><snippet>import traceback

try:
    raise ValueError
except:
    tb = traceback.format_exc()
else:
    tb = "No error"
finally:
    print tb
</snippet></ROW><ROW><id>4565650</id><snippet>p = Popen(...)
pp = psutil.Process(p.pid)
for child in pp.get_children():
    child.send_signal(signal.SIGINT)
</snippet></ROW><ROW><id>4565650</id><snippet>ps -ef | grep manage.py | grep -v grep</snippet></ROW><ROW><id>4565650</id><snippet>vinay 7864 7795  9 22:10 pts/0 00:00:00 python ./manage.py runserver
vinay 7865 7864 16 22:10 pts/0 00:00:00 /usr/bin/python ./manage.py runserver
</snippet></ROW><ROW><id>4565650</id><snippet>vinay 7874 7795  7 22:10 pts/0 00:00:00 python ./manage.py runserver --noreload
</snippet></ROW><ROW><id>4565910</id><snippet>In [1]: import numpy as np

In [2]: a = np.array(2.3)

In [3]: len(np.atleast_1d(a))
Out[3]: 1
</snippet></ROW><ROW><id>4565957</id><snippet>from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin
from accounts.models import UserProfile

admin.site.unregister(User)

class UserProfileInline(admin.StackedInline):
    model = UserProfile

class UserProfileAdmin(UserAdmin):
    inlines = [ UserProfileInline, ]

admin.site.register(User, UserProfileAdmin)
</snippet></ROW><ROW><id>4566029</id><snippet>HKCU/Software/VendorName/AppName/
</snippet></ROW><ROW><id>4566093</id><snippet>#!/usr/bin/python
print "Content-type: text/html\r\n\r\n"
print "&lt;html&gt;&lt;head&gt;"
print "&lt;title&gt;CGI Test&lt;/title&gt;"
print "&lt;/head&gt;&lt;body&gt;"
print "&lt;p&gt;Test page using Python&lt;/p&gt;"
print "&lt;/body&gt;&lt;/html&gt;"
</snippet></ROW><ROW><id>4566093</id><snippet>cgi-bin</snippet></ROW><ROW><id>4566093</id><snippet>import bottle
# Put your bottle code here, following the docs on the Bottle site
bottle.run(server=bottle.CGIServer)
</snippet></ROW><ROW><id>4566190</id><snippet>pysqlite2</snippet></ROW><ROW><id>4566190</id><snippet>sqlite3</snippet></ROW><ROW><id>4566190</id><snippet>pysqlite2</snippet></ROW><ROW><id>4566190</id><snippet>sqlite3</snippet></ROW><ROW><id>4566190</id><snippet>sqlite3</snippet></ROW><ROW><id>4566190</id><snippet>SQLite</snippet></ROW><ROW><id>4566190</id><snippet>SQLite</snippet></ROW><ROW><id>4566411</id><snippet>propagate</snippet></ROW><ROW><id>4566411</id><snippet>[logger_sloggerMain]
handlers=consoleHandler,infoFileHandler,debugFileHandler
level=DEBUG
qualname=sloggerMain
propagate=0
</snippet></ROW><ROW><id>4566411</id><snippet>logging</snippet></ROW><ROW><id>4566411</id><snippet>sloggerMain</snippet></ROW><ROW><id>4566411</id><snippet>root</snippet></ROW><ROW><id>4566411</id><snippet>[logger_root]
handlers=
</snippet></ROW><ROW><id>4566550</id><snippet>def read_in_chunks(infile, chunk_size=1024*64):
    while True:
        chunk = infile.read(chunk_size)
        if chunk:
            yield chunk
        else:
            # The chunk was empty, which means we're at the end
            # of the file
            return
</snippet></ROW><ROW><id>4566550</id><snippet>&gt;&gt;&gt; from chunks import read_in_chunks
&gt;&gt;&gt; infile = open('quicklisp.lisp')
&gt;&gt;&gt; for chunk in read_in_chunks(infile):
...     print chunk
... 
&lt;contents of quicklisp.lisp in chunks&gt;
</snippet></ROW><ROW><id>4566550</id><snippet>with open('quicklisp.lisp') as infile:
    for chunk in read_in_chunks(infile):
        print chunk
</snippet></ROW><ROW><id>4566550</id><snippet>def read_in_chunks(infile, chunk_size=1024*64):
    chunk = infile.read(chunk_size)
    while chunk:
        yield chunk
        chunk = infile.read(chunk_size)
</snippet></ROW><ROW><id>4566610</id><snippet>@cache.cache('mycache', type="file", expire=15)
def my_action(self):
  stuff
</snippet></ROW><ROW><id>4566610</id><snippet>type</snippet></ROW><ROW><id>4566678</id><snippet>MyClass</snippet></ROW><ROW><id>4566678</id><snippet>c = Controller("Blog")
</snippet></ROW><ROW><id>4566678</id><snippet>c = Controller(Blog)
</snippet></ROW><ROW><id>4566678</id><snippet>eval()</snippet></ROW><ROW><id>4566992</id><snippet>import unittest

class Abstract(object):
    def test_a(self):
        print "Running for class", self.__class__

class Test(unittest.TestCase, Abstract):
    pass

unittest.main()
</snippet></ROW><ROW><id>4567461</id><snippet>blank_image.paste(image64, (0,0))
blank_image.paste(fluid128, (400,0))
blank_image.paste(fluid512, (0,300))
blank_image.paste(fluid1024, (400,300))
blank_image.save(out)
</snippet></ROW><ROW><id>4567461</id><snippet>image64 = Image.open(fluid64 + "%02d.jpg" % pic)
</snippet></ROW><ROW><id>4567657</id><snippet>matrix_result = matrix_a + matrix_b
</snippet></ROW><ROW><id>4567657</id><snippet>matrix_result = (matrix_a.tocsr() + matrix_b.tocsr()).tolil()
</snippet></ROW><ROW><id>4567661</id><snippet>print Foo.__dict__
    {'__doc__': None,
     '__module__': '__main__',
     'm1': &lt;function m1 at 0x02861630&gt;,
     'm2': &lt;built-in function access&gt;,
     'm3': &lt;function myfun at 0x028616F0&gt;}
</snippet></ROW><ROW><id>4567661</id><snippet>self.m(1, 2) -&gt; m(self, 1, 2)</snippet></ROW><ROW><id>4567661</id><snippet>self.m2("/", os.R_OK)</snippet></ROW><ROW><id>4567661</id><snippet>m2(self, "/", os.R_OK)</snippet></ROW><ROW><id>4567661</id><snippet>print Foo.m1
    &lt;unbound method Foo.m1&gt;
print Foo.m2
    &lt;built-in function access&gt;
print f.m1
    &lt;bound method Foo.m1 of &lt;__main__.Foo instance at 0x02324418&gt;&gt;
print f.m2
    &lt;built-in function access&gt;
</snippet></ROW><ROW><id>4567810</id><snippet>return</snippet></ROW><ROW><id>4567810</id><snippet>logging</snippet></ROW><ROW><id>4567820</id><snippet>method_name</snippet></ROW><ROW><id>4567820</id><snippet>original_method</snippet></ROW><ROW><id>4567820</id><snippet>for</snippet></ROW><ROW><id>4567820</id><snippet># -*- coding: utf-8 -*-
import unittest
import logging

#template method:
def log_setup(self, name):
    #self.hdl = logging.FileHandler('testcase_%s.log' % name, mode='w')
    #log.addHandler(self.hdl)
    self.name = name


class MetaTestCase(type):
    def __new__(cls, cls_name, bases, dict):
        for name, item in dict.items():
            if name.startswith("test"):
                def scope_freezer(method_name, original_method):
                    def wrapper(self, *args, **kw):
                        log_setup(self, method_name)
                        return original_method(self, *args, **kw)
                    return wrapper
                dict[name] = scope_freezer(name, item)
        return type.__new__(cls, cls_name, bases, dict)


class TestExample(unittest.TestCase):
    __metaclass__ = MetaTestCase
    def test_a(self):
        print self.name

    def test_b(self):
        print self.name

    def tearDown(self):
        pass
        #log.removeHandler(self.hdl)

unittest.main()
</snippet></ROW><ROW><id>4567820</id><snippet>self</snippet></ROW><ROW><id>4567820</id><snippet>name</snippet></ROW><ROW><id>4568176</id><snippet>f.readlines()</snippet></ROW><ROW><id>4568176</id><snippet>readlines</snippet></ROW><ROW><id>4568176</id><snippet>readlines</snippet></ROW><ROW><id>4568253</id><snippet>sys.stdout.buffer</snippet></ROW><ROW><id>4568253</id><snippet>out = codecs.getwriter('utf-8')(sys.stdout.buffer)
</snippet></ROW><ROW><id>4568253</id><snippet>sys.stdout</snippet></ROW><ROW><id>4568253</id><snippet>.buffer</snippet></ROW><ROW><id>4568638</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; types = ('*.pdf', '*.cpp') # the tuple of file types
&gt;&gt;&gt; files_grabbed = []
&gt;&gt;&gt; for files in types:
...     files_grabbed.extend(glob.glob(files))
... 
&gt;&gt;&gt; files_grabbed   # the list of pdf and cpp files
</snippet></ROW><ROW><id>4568724</id><snippet>python setup.py
        py2exe</snippet></ROW><ROW><id>4568759</id><snippet>counter = 0
while counter &lt; 5:
   print counter
   counter += 1
</snippet></ROW><ROW><id>4568759</id><snippet>for i in xrange(5):
   print i
</snippet></ROW><ROW><id>4568783</id><snippet>config.py</snippet></ROW><ROW><id>4568783</id><snippet>__init__.py</snippet></ROW><ROW><id>4568783</id><snippet>Configuration</snippet></ROW><ROW><id>4568783</id><snippet>class Configuration:

    def getVersion():
        ....

    def getFoo()
        ....

    def getBar()
        ....
</snippet></ROW><ROW><id>4569210</id><snippet>class SimAdmin(admin.ModelAdmin):
    phone = forms.ModelChoiceField(queryset=Item.objects.filter(name='phone'))
</snippet></ROW><ROW><id>4569404</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>4569404</id><snippet>def set_trace():
    import pdb, sys
    debugger = pdb.Pdb(stdin=sys.__stdin__, 
        stdout=sys.__stdout__)
    debugger.set_trace(sys._getframe().f_back)
</snippet></ROW><ROW><id>4569404</id><snippet>$ ./bin/devappserver /Users/twillis/projects/hydrant/parts/hydrant-app/
</snippet></ROW><ROW><id>4569695</id><snippet>enumerate()</snippet></ROW><ROW><id>4569695</id><snippet>enumerate()</snippet></ROW><ROW><id>4569695</id><snippet>os.path</snippet></ROW><ROW><id>4569695</id><snippet>splitext()</snippet></ROW><ROW><id>4569695</id><snippet>enumerate()</snippet></ROW><ROW><id>4569695</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>4569695</id><snippet>import os
projectFilenames = ['2010-10-30-markdown-example.txt',
                    '2010-12-29-hello-world.mdown',
                    '2011-1-1-tester.markdown']

for i,f in enumerate(projectFilenames):
    root,ext = os.path.splitext(f)
    if ext in ('.txt', '.mdown', '.markdown'):
        projectFilenames[i] = root  # update filename list leaving ext off

print projectFilenames
# ['2010-10-30-markdown-example', '2010-12-29-hello-world', '2011-1-1-tester']
</snippet></ROW><ROW><id>4569695</id><snippet>if ext in ('.txt', '.mdown', '.markdown'):</snippet></ROW><ROW><id>4569695</id><snippet>if ext:</snippet></ROW><ROW><id>4570032</id><snippet>python 2.7</snippet></ROW><ROW><id>4570032</id><snippet>python</snippet></ROW><ROW><id>4570032</id><snippet>-3</snippet></ROW><ROW><id>4570142</id><snippet>&gt;&gt;&gt; [b for a in ((x,-x) for x in range(1, 10 + 1)) for b in a]
[1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]
</snippet></ROW><ROW><id>4570554</id><snippet>winfo_rootx</snippet></ROW><ROW><id>4570554</id><snippet>winfo_rooty</snippet></ROW><ROW><id>4570554</id><snippet>winfo_width</snippet></ROW><ROW><id>4570554</id><snippet>winfo_height</snippet></ROW><ROW><id>4570554</id><snippet>geometry</snippet></ROW><ROW><id>4570765</id><snippet>from django.db.models.signals import post_save

#####SIGNALS######
def after_save_instance_handler(sender, **kwargs):
    #get the saved instance
    instance_object = kwargs['instance']

    #get the needed data
    the_date = ...
    the_user = ...
    the_object_id = ...

    #create the relation to the audit object
    instance_object.audit_obj.create(operation="op963",operation_at=the_date,operation_by=the_user,object_id=the_object_id)

#connect the handler with the post save signal - django 1.1 + 1.2
post_save.connect(after_save_instance_handler, sender=Instances)
</snippet></ROW><ROW><id>4570765</id><snippet>@receiver(post_save, sender=Instances)
def after_save_instance_handler(sender, **kwargs):
</snippet></ROW><ROW><id>4571260</id><snippet>c:\python27\python.exe c:\somescript.py %*
</snippet></ROW><ROW><id>4571301</id><snippet>csv</snippet></ROW><ROW><id>4571301</id><snippet>import csv
with open('csvfile.csv', 'rb') as source:
    rdr= csv.reader( source )
    for row in rdr:
        # do whatever with row
</snippet></ROW><ROW><id>4572033</id><snippet>A date-time specification. 
            field  octets  contents                  range
            -----  ------  --------                  -----
              1      1-2   year*                     0..65536
              2       3    month                     1..12
              3       4    day                       1..31
              4       5    hour                      0..23
              5       6    minutes                   0..59
              6       7    seconds                   0..60
                           (use 60 for leap-second)
              7       8    deci-seconds              0..9
              8       9    direction from UTC        '+' / '-'
              9      10    hours from UTC*           0..13
             10      11    minutes from UTC          0..59
* Notes:
            - the value of year is in network-byte order
            - daylight saving time in New Zealand is +13 For example, 
              Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as:
                 1992-5-26,13:30:15.0,-4:0 
              Note that if only local time is known, then timezone
              information (fields 8-10) is not present.
</snippet></ROW><ROW><id>4572033</id><snippet>&gt;&gt;&gt; import struct, datetime
&gt;&gt;&gt; s = '\x07\xd8\t\x17\x03\x184\x00'
&gt;&gt;&gt; datetime.datetime(*struct.unpack('&gt;HBBBBBB', s))
datetime.datetime(2008, 9, 23, 3, 24, 52)
</snippet></ROW><ROW><id>4572176</id><snippet>json.loads</snippet></ROW><ROW><id>4572176</id><snippet>json.dumps</snippet></ROW><ROW><id>4572176</id><snippet>result = json.dumps(response[1])
</snippet></ROW><ROW><id>4572254</id><snippet>app/__init__.py</snippet></ROW><ROW><id>4572254</id><snippet>import pdb;pdb.set_trace()
</snippet></ROW><ROW><id>4572378</id><snippet>AttributeError</snippet></ROW><ROW><id>4572378</id><snippet>class Foo:
    def __init__(self):
        self.a = 1

f = Foo()
print(f.a)
print(f.b)
</snippet></ROW><ROW><id>4572378</id><snippet>$ python foo.py
1
Traceback (most recent call last):
  File "foo.py", line 10, in &lt;module&gt;
    print(f.b)
AttributeError: Foo instance has no attribute 'b'
</snippet></ROW><ROW><id>4572378</id><snippet>import traceback

try:
    # call function that gets AttributeError
except AttributeError:
    traceback.print_exc()
</snippet></ROW><ROW><id>4572497</id><snippet>to evaluate a tree:
  if it is a value:
    you have the final value; return it
  otherwise, it is an operator:
    evaluate the left sub-tree
    evaluate the right sub-tree
    do operation(left-tree-value, right-tree-value)
    return the result
</snippet></ROW><ROW><id>4572497</id><snippet>what is tree value?
    add: {tree1} + {tree2}
    what is tree1?
        subtract: {tree3} - {tree4}
        what is tree3?
            multiply: {tree5} * {tree6}
            what is tree5?
            2
            what is tree6?
                add: {tree7} + {tree8}
                what is tree7?
                1
                what is tree8?
                3
                add: 1 + 3
            4
            multiply: 2 * 4
        8
        what is tree4?
        4
        subtract: 8 - 4
    4
    what is tree2?
    5
    add: 4 + 5
9
</snippet></ROW><ROW><id>4573304</id><snippet>In [52]: import xml.etree.ElementTree as ET

In [53]: xml=ET.fromstring(contents)

In [54]: xml.find('./bar').attrib['key']
Out[54]: 'value'
</snippet></ROW><ROW><id>4573803</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>4573803</id><snippet>print()</snippet></ROW><ROW><id>4573803</id><snippet>from __future__ import print_function

def f(x, print=print):
    print(x*x)

f(5)
L=[]
f(6, print=L.append)
print(L)
</snippet></ROW><ROW><id>4573990</id><snippet>__getstate__</snippet></ROW><ROW><id>4573990</id><snippet>__setstate__</snippet></ROW><ROW><id>4574163</id><snippet>li = [[0,0] for i in range(players)]
</snippet></ROW><ROW><id>4574180</id><snippet>&gt; u = matrix(1:9,nrow=3,ncol=3)
&gt; v = u[,1:2]
&gt; v[1,1]
[2] 1
&gt; w = u[,1]
&gt; w[1,1]
Error in w[1, 1] : incorrect number of dimensions
</snippet></ROW><ROW><id>4574180</id><snippet>&gt; class(v)
[1] "matrix"
&gt; class(u)
[1] "matrix"
&gt; class(w)
[1] "integer"
</snippet></ROW><ROW><id>4574180</id><snippet>&gt; w2 = u[,1,drop=FALSE]
&gt; w2[1,1]
[3] 1
&gt; class(w2)
[1] "matrix"
</snippet></ROW><ROW><id>4574180</id><snippet>str</snippet></ROW><ROW><id>4574180</id><snippet>class</snippet></ROW><ROW><id>4574180</id><snippet>example</snippet></ROW><ROW><id>4574180</id><snippet>help</snippet></ROW><ROW><id>4574180</id><snippet>&gt; xx = factor(c(3,2,3,4))
&gt; xx
[1] 3 2 3 4
Levels: 2 3 4
&gt; yy = as.numeric(xx)
&gt; yy
[1] 2 1 2 3
</snippet></ROW><ROW><id>4574180</id><snippet>&gt; as.numeric(levels(xx))[xx]
[1] 3 2 3 4
</snippet></ROW><ROW><id>4574180</id><snippet>factor</snippet></ROW><ROW><id>4574305</id><snippet>self</snippet></ROW><ROW><id>4574305</id><snippet>object</snippet></ROW><ROW><id>4574305</id><snippet>self</snippet></ROW><ROW><id>4574305</id><snippet>self</snippet></ROW><ROW><id>4574305</id><snippet>&gt;&gt;&gt; class Foo(object):
...   def __init__(bippity, colour):
...     bippity.colour = colour
...   def get_colour(_):
...     return _.colour
... 
&gt;&gt;&gt; f = Foo('Blue')
&gt;&gt;&gt; f.get_colour()
'Blue'
</snippet></ROW><ROW><id>4574500</id><snippet>L[1:1]</snippet></ROW><ROW><id>4574500</id><snippet>L</snippet></ROW><ROW><id>4574516</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'([a-z])\1+', r'\1', 'ffffffbbbbbbbqqq')
'fbq'
</snippet></ROW><ROW><id>4574516</id><snippet>()</snippet></ROW><ROW><id>4574516</id><snippet>[a-z]</snippet></ROW><ROW><id>4574516</id><snippet>\1</snippet></ROW><ROW><id>4574516</id><snippet>a</snippet></ROW><ROW><id>4574516</id><snippet>&gt;&gt;&gt; re.sub('a*', 'a', 'aaabbbccc')
'abababacacaca'
</snippet></ROW><ROW><id>4574516</id><snippet>'a+'</snippet></ROW><ROW><id>4574516</id><snippet>'a*'</snippet></ROW><ROW><id>4574516</id><snippet>*</snippet></ROW><ROW><id>4574516</id><snippet>a</snippet></ROW><ROW><id>4574516</id><snippet>+</snippet></ROW><ROW><id>4574647</id><snippet>bind</snippet></ROW><ROW><id>4574647</id><snippet>list</snippet></ROW><ROW><id>4574647</id><snippet>IN</snippet></ROW><ROW><id>4574647</id><snippet>setParameterList()</snippet></ROW><ROW><id>4574647</id><snippet>args=['A', 'C']
sql='SELECT fooid FROM foo WHERE bar IN (%s)' 
in_p=', '.join(list(map(lambda x: '%s', args)))
sql = sql % in_p
cursor.execute(sql, args)
</snippet></ROW><ROW><id>4574647</id><snippet>', '.join(list(map(lambda x: '%s', args)))</snippet></ROW><ROW><id>4574647</id><snippet>', '.join(map(lambda x: '%s', args))</snippet></ROW><ROW><id>4574659</id><snippet>127.0.0.1</snippet></ROW><ROW><id>4574659</id><snippet>myServer = SocketServer.ThreadingTCPServer(('0.0.0.0', 7777), MyHandler) 
</snippet></ROW><ROW><id>4574902</id><snippet>Form</snippet></ROW><ROW><id>4574902</id><snippet>has_changed()</snippet></ROW><ROW><id>4574902</id><snippet>&gt;&gt;&gt; f = MyForm({})
&gt;&gt;&gt; f.has_changed()
False
&gt;&gt;&gt; f = MyForm({})
&gt;&gt;&gt; f.has_changed()
False
&gt;&gt;&gt; f = MyForm({'name': 'test'})
&gt;&gt;&gt; f.has_changed()
True
&gt;&gt;&gt; f = MyForm({'name': 'test'}, initial={'name': 'test'})
&gt;&gt;&gt; f.has_changed()
False
</snippet></ROW><ROW><id>4574902</id><snippet>form_is_blank()</snippet></ROW><ROW><id>4574966</id><snippet>open</snippet></ROW><ROW><id>4574966</id><snippet>target = open("pls.m3u", 'w')
j = os.path.abspath(os.getcwd())
for filename in os.listdir(j):
    (title, extn) = os.path.splitext(filename)
    if extn == ".mp3":
        target.write(filename)
        target.write("\n")
</snippet></ROW><ROW><id>4574966</id><snippet>target = None
j = os.path.abspath(os.getcwd())
for filename in os.listdir(j):
    (title, extn) = os.path.splitext(filename)
    if extn == ".mp3":
        if not target:
            target = open("pls.m3u", 'w')
        target.write(filename)
        target.write("\n")
if target:
    target.write("\n")
    target.write("\n")
</snippet></ROW><ROW><id>4574966</id><snippet>j = os.path.abspath(os.getcwd())
mp3s = [filename for filename in os.listdir(j)
        if os.path.splitext(filename)[1] == ".mp3"]
if mp3s:
    target = open("pls.m3u", 'w')
    for filename in mp3s:
        target.write(filename)
        target.write("\n")
    target.write("\n")
    target.write("\n")
</snippet></ROW><ROW><id>4574966</id><snippet>for</snippet></ROW><ROW><id>4574966</id><snippet>append</snippet></ROW><ROW><id>4575117</id><snippet>def __init__(...):
    ...
    self.locked = False
    ...

def text_next(self, event):
    if not self.locked:
        &lt;do the "next" logic&gt;
        self.lock(10) # lock for 10 seconds

def text_previous(self, event):
    if not self.locked:
        &lt;do the "previous" logic&gt;
        self.lock(10) # lock for 10 seconds

def lock(self, n):
    if n == 0:
        self.locked = False
        self.status.config(text="")
    else:
        self.locked = True
        self.status.config(text="Locked for %s more seconds" % n)
        self.status.after(1000, lambda n=n-1: self.lock(n))
</snippet></ROW><ROW><id>4575346</id><snippet>for name, obj in self.__dict__.iteritems():
    if isinstance(obj, QtCore.QObject) and not obj.objectName(): # QObject without a name
        obj.setObjectName(name)
</snippet></ROW><ROW><id>4575371</id><snippet>None</snippet></ROW><ROW><id>4575371</id><snippet>arg2</snippet></ROW><ROW><id>4575371</id><snippet>sentinel = object()
def myfunc(arg1, arg2=sentinel):
    if arg2 is sentinel:
        arg2 = arg1
    print (arg1, arg2)

myfunc("foo")           # Prints 'foo foo'
myfunc("foo", None)     # Prints 'foo None'
</snippet></ROW><ROW><id>4575675</id><snippet>ddof</snippet></ROW><ROW><id>4575707</id><snippet>i</snippet></ROW><ROW><id>4575707</id><snippet>i</snippet></ROW><ROW><id>4575766</id><snippet>findAll</snippet></ROW><ROW><id>4575766</id><snippet>&gt;&gt;&gt; for track in soup.findAll('track'):
...     print track.title.string
...     print track.location.string
... 
Coldplay-Sparks
file:///home/ashu/Music/Collections/randomPicks/ipod%20on%20sep%2009/Coldplay-Sparks.mp3
Coldplay Warning sign
file:///home/ashu/Music/Collections/randomPicks/gud%201s/Coldplay%20Warning%20sign.mp3
</snippet></ROW><ROW><id>4575792</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-g', '--global')
&gt;&gt;&gt; subparsers = parser.add_subparsers(dest="subparser_name") # this line changed
&gt;&gt;&gt; foo_parser = subparsers.add_parser('foo')
&gt;&gt;&gt; foo_parser.add_argument('-c', '--count')
&gt;&gt;&gt; bar_parser = subparsers.add_parser('bar')
&gt;&gt;&gt; args = parser.parse_args(['-g, 'xyz', 'foo', '--count', '42'])
&gt;&gt;&gt; args
Namespace(count='42', global='xyz', subparser_name='foo')
</snippet></ROW><ROW><id>4575792</id><snippet>set_defaults()</snippet></ROW><ROW><id>4575985</id><snippet>tempList = [(i[0], i[2]) for i in data if i[1] == 'fruit']
tempList = [i[:1]+i[2:] for i in data if i[1] == 'fruit']
</snippet></ROW><ROW><id>4575985</id><snippet>&gt;&gt;&gt; tempListGen = ((a,c) for a,b,c in data if b == 'fruit')
&gt;&gt;&gt; tempListGen
&lt;generator object &lt;genexpr&gt; at 0x0266FD50&gt;
&gt;&gt;&gt; print sorted(tempListGen)
[('apple', 1.23), ('pear', 2.34)]
</snippet></ROW><ROW><id>4576110</id><snippet>import nltk.data

tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')
fp = open("test.txt")
data = fp.read()
print '\n-----\n'.join(tokenizer.tokenize(data))
</snippet></ROW><ROW><id>4576128</id><snippet>b = dict(zip(a[0::2], a[1::2]))
</snippet></ROW><ROW><id>4576128</id><snippet>a</snippet></ROW><ROW><id>4576128</id><snippet>from itertools import izip
i = iter(a)
b = dict(izip(i, i))
</snippet></ROW><ROW><id>4576128</id><snippet>range()</snippet></ROW><ROW><id>4576128</id><snippet>len()</snippet></ROW><ROW><id>4576128</id><snippet>b = {a[i]: a[i+1] for i in range(0, len(a), 2)}
</snippet></ROW><ROW><id>4576128</id><snippet>iter()/izip()</snippet></ROW><ROW><id>4576128</id><snippet>zip()</snippet></ROW><ROW><id>4576128</id><snippet>izip()</snippet></ROW><ROW><id>4576128</id><snippet>i = iter(a)
b = dict(zip(i, i))
</snippet></ROW><ROW><id>4576168</id><snippet>import csv
csv_reader = csv.reader(open('data.csv', 'rb'), delimiter=';')
for row in csv_reader:
    # do something with row....
</snippet></ROW><ROW><id>4576382</id><snippet>"w"</snippet></ROW><ROW><id>4576382</id><snippet>&gt;&gt;&gt; writer.flush()
&gt;&gt;&gt; reader.read()
'hello world\n'
</snippet></ROW><ROW><id>4576649</id><snippet>QuerySet</snippet></ROW><ROW><id>4576649</id><snippet>QuerySet</snippet></ROW><ROW><id>4577034</id><snippet>python.el</snippet></ROW><ROW><id>4577034</id><snippet>run-python</snippet></ROW><ROW><id>4577034</id><snippet>data-directory</snippet></ROW><ROW><id>4577034</id><snippet>/usr/share/emacs/23.1/etc/</snippet></ROW><ROW><id>4577034</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>4577034</id><snippet>emacs.py</snippet></ROW><ROW><id>4577034</id><snippet>(python-send-string "import emacs")</snippet></ROW><ROW><id>4577034</id><snippet>defadvice</snippet></ROW><ROW><id>4577034</id><snippet>tramp</snippet></ROW><ROW><id>4577034</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4577034</id><snippet>M-x customize-variable RET tramp-remote-process-environment RET</snippet></ROW><ROW><id>4577034</id><snippet>INS</snippet></ROW><ROW><id>4577034</id><snippet>PYTHONPATH=/usr/share/emacs/23.1/etc</snippet></ROW><ROW><id>4577034</id><snippet>STATE</snippet></ROW><ROW><id>4577034</id><snippet>emacs.py</snippet></ROW><ROW><id>4577034</id><snippet>python-send-buffer</snippet></ROW><ROW><id>4577034</id><snippet>No such file or directory: '/tmp/py24574XdA'</snippet></ROW><ROW><id>4577034</id><snippet>python-mode</snippet></ROW><ROW><id>4577034</id><snippet>python-send-region</snippet></ROW><ROW><id>4577034</id><snippet>make-temp-file</snippet></ROW><ROW><id>4577034</id><snippet>tramp-make-tramp-temp-file</snippet></ROW><ROW><id>4577135</id><snippet>url2pathname</snippet></ROW><ROW><id>4577135</id><snippet>import urllib2

path = urllib2.url2pathname("file:///home/ashu/Music/Collections/randomPicks/ipod%20on%20sep%2009/Coldplay-Sparks.mp3")
</snippet></ROW><ROW><id>4577489</id><snippet>[x * y for x, y in zip(vec1, vec2)]
</snippet></ROW><ROW><id>4578442</id><snippet>&gt;&gt;&gt; def argmax(**kw):
...   return max(kw, key=kw.get)
... 
&gt;&gt;&gt; argmax(foo=3, bar=5, frotz=1, kaka=-3)
'bar'
</snippet></ROW><ROW><id>4578442</id><snippet>&gt;&gt;&gt; def argmax(**kw):
...     wk = {v:k for k,v in kw.items()}
...     return wk[max(wk)]
... 
&gt;&gt;&gt; argmax(foo=3, bar=5, frotz=1, kaka=-3)   
'bar'
</snippet></ROW><ROW><id>4578442</id><snippet>&gt;&gt;&gt; def argmax(**kw):
...     wk = dict([(v,k) for k,v in kw.items()])
...     return wk[max(wk)]
... 
&gt;&gt;&gt; argmax(foo=3, bar=5, frotz=1, kaka=-3)   
'bar'
</snippet></ROW><ROW><id>4578605</id><snippet>def partition(pred, iterable):
    trues = []
    falses = []
    for item in iterable:
        if pred(item):
            trues.append(item)
        else:
            falses.append(item)
    return trues, falses
</snippet></ROW><ROW><id>4578605</id><snippet>&gt;&gt;&gt; trues, falses = partition(lambda x: x &gt; 10, [1,4,12,7,42])
&gt;&gt;&gt; trues
[12, 42]
&gt;&gt;&gt; falses
[1, 4, 7]
</snippet></ROW><ROW><id>4578605</id><snippet>from itertools import filterfalse, tee

def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</snippet></ROW><ROW><id>4578605</id><snippet>filterfalse</snippet></ROW><ROW><id>4578605</id><snippet>ifilterfalse</snippet></ROW><ROW><id>4578606</id><snippet>Regex = re.compile(r'''
^(Rain|Snow|Wind|Standard) &lt;(\d+:\d+|\d+/\d+/\d+)&gt;
''', re.VERBOSE)
</snippet></ROW><ROW><id>4578690</id><snippet>import subprocess
import os

def combine_pdfs(infiles, outfile, basedir=''):
    """
    Accept a list of pdf filenames,
    merge the files,
    save the result as outfile

    @param infiles: list of string, names of PDF files to combine
    @param outfile: string, name of merged PDF file to create
    @param basedir: string, base directory for PDFs (if filenames are not absolute)
    """

    # From the pdftk documentation:
    #   Merge Two or More PDFs into a New Document:
    #   pdftk 1.pdf 2.pdf 3.pdf cat output 123.pdf

    if basedir:
        infiles = [os.path.join(basedir,i) for i in infiles]
        outfile = [os.path.join(basedir,outfile)]

    pdftk =   [r'C:\Program Files (x86)\Pdftk\pdftk.exe']   # or wherever you installed it
    op =      ['cat']
    outcmd =  ['output']

    args = pdftk + infiles + op + outcmd + outfile
    res = subprocess.call(args)

combine_pdfs(
    ['p1.pdf', 'p2.pdf'],
    'p_total.pdf',
    'C:\\Users\\Me\\Downloads'
)
</snippet></ROW><ROW><id>4578707</id><snippet># oo is the symbol for infinity
from sympy import Interval, oo, Rational

i1 = Interval(10, 15)
i2 = Interval(0, oo)
i3 = Interval(-5, -1)
# adding intervals
i4 = i1 + i3
i5 = i1 + i2
# interval with open end
i6 = Interval(Rational(1, 2), Rational(45, 3), left_open=True)

print 11 in i1 # True
print -1 in i1 # False
print 0 in i4 # False
print Rational(3, 2) in i6 # True
print oo in i2 # False
print i2.sup # oo (infinity)
print Rational(1, 2) in i6 # False
print i6.inf # 1/2
</snippet></ROW><ROW><id>4578772</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>lambda</snippet></ROW><ROW><id>4578943</id><snippet>__init__()</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>__init__()</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>9</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>lambda</snippet></ROW><ROW><id>4578943</id><snippet>i</snippet></ROW><ROW><id>4578943</id><snippet>.__init__()</snippet></ROW><ROW><id>4578943</id><snippet>self._numberButtons[i].clicked.connect(lambda i=i: self._number(i))
</snippet></ROW><ROW><id>4578943</id><snippet>functools.partial</snippet></ROW><ROW><id>4578943</id><snippet>self._numberButtons[i].clicked.connect(partial(self._number, i))
</snippet></ROW><ROW><id>4579093</id><snippet>é = \u00E9</snippet></ROW><ROW><id>4579093</id><snippet>e+ ́</snippet></ROW><ROW><id>4579093</id><snippet>\u0065+\u0301 (LATIN SMALL LETTER E</snippet></ROW><ROW><id>4579093</id><snippet>COMBINING ACUTE ACCENT)</snippet></ROW><ROW><id>4579093</id><snippet>\w\u0065</snippet></ROW><ROW><id>4579093</id><snippet>\'&lt;the_letter&gt;</snippet></ROW><ROW><id>4579093</id><snippet>import unicodedata</snippet></ROW><ROW><id>4579954</id><snippet>i</snippet></ROW><ROW><id>4579954</id><snippet>class Foo:
  def bar(self):
    print 42

finst = Foo
finst.bar()
</snippet></ROW><ROW><id>4580120</id><snippet>PYTHONPATH=/foo/bar/baz python somescript.py somecommand
</snippet></ROW><ROW><id>4580120</id><snippet>pythonpath.bat</snippet></ROW><ROW><id>4580120</id><snippet>@ECHO OFF
setlocal
set PYTHONPATH=%1
python %2 %3
endlocal
</snippet></ROW><ROW><id>4580120</id><snippet>pythonpath.bat</snippet></ROW><ROW><id>4580120</id><snippet>pythonpath.bat /foo/bar/baz somescript.py somecommand
</snippet></ROW><ROW><id>4580215</id><snippet>repr()</snippet></ROW><ROW><id>4580215</id><snippet>__repr__()</snippet></ROW><ROW><id>4580215</id><snippet>repr()</snippet></ROW><ROW><id>4580648</id><snippet>import cv

capture = cv.CaptureFromFile(filename)
while Condition1:
    # Need a frame to get the output video dimensions
    frame = cv.RetrieveFrame(capture) # Will return None if there are no frames
    # New video file
    video_out = cv.CreateVideoWriter(output_filenameX, CV_FOURCC('M','J','P','G'), capture.fps, frame.size(), 1)
    # Write the frames
    cv.WriteFrame(video_out, frame)
    while Condition2:
        frame = cv.RetrieveFrame(capture) # Will return None if there are no frames
        cv.WriteFrame(video_out, frame)
</snippet></ROW><ROW><id>4580663</id><snippet>os.makedirs</snippet></ROW><ROW><id>4580931</id><snippet>'c:foo'</snippet></ROW><ROW><id>4580931</id><snippet>'c:\\foo'</snippet></ROW><ROW><id>4580931</id><snippet>drive + os.path.join(*other_pieces)</snippet></ROW><ROW><id>4580931</id><snippet>os.sep</snippet></ROW><ROW><id>4580931</id><snippet>'foo'</snippet></ROW><ROW><id>4580931</id><snippet>'foo/'</snippet></ROW><ROW><id>4580931</id><snippet>import os.path

def os_path_split_asunder(path, debug=False):
    parts = []
    while True:
        newpath, tail = os.path.split(path)
        if debug: print repr(path), (newpath, tail)
        if newpath == path:
            assert not tail
            if path: parts.append(path)
            break
        parts.append(tail)
        path = newpath
    parts.reverse()
    return parts

def spacedman_parts(path):
    components = [] 
    while True:
        (path,tail) = os.path.split(path)
        if tail == "":
            components.reverse()
            return components
        components.append(tail)

if __name__ == "__main__":
    tests = [
        '',
        'foo',
        'foo/',
        'foo\\',
        '/foo',
        '\\foo',
        'foo/bar',
        '/',
        'c:',
        'c:/',
        'c:foo',
        'c:/foo',
        'c:/users/john/foo.txt',
        '/users/john/foo.txt',
        'foo/bar/baz/loop',
        'foo/bar/baz/',
        '//hostname/foo/bar.txt',
        ]
    for i, test in enumerate(tests):
        print "\nTest %d: %r" % (i, test)
        drive, path = os.path.splitdrive(test)
        print 'drive, path', repr(drive), repr(path)
        a = os_path_split_asunder(path)
        b = spacedman_parts(path)
        print "a ... %r" % a
        print "b ... %r" % b
        print a == b
</snippet></ROW><ROW><id>4580931</id><snippet>Test 0: ''
drive, path '' ''
a ... []
b ... []
True

Test 1: 'foo'
drive, path '' 'foo'
a ... ['foo']
b ... ['foo']
True

Test 2: 'foo/'
drive, path '' 'foo/'
a ... ['foo', '']
b ... []
False

Test 3: 'foo\\'
drive, path '' 'foo\\'
a ... ['foo', '']
b ... []
False

Test 4: '/foo'
drive, path '' '/foo'
a ... ['/', 'foo']
b ... ['foo']
False

Test 5: '\\foo'
drive, path '' '\\foo'
a ... ['\\', 'foo']
b ... ['foo']
False

Test 6: 'foo/bar'
drive, path '' 'foo/bar'
a ... ['foo', 'bar']
b ... ['foo', 'bar']
True

Test 7: '/'
drive, path '' '/'
a ... ['/']
b ... []
False

Test 8: 'c:'
drive, path 'c:' ''
a ... []
b ... []
True

Test 9: 'c:/'
drive, path 'c:' '/'
a ... ['/']
b ... []
False

Test 10: 'c:foo'
drive, path 'c:' 'foo'
a ... ['foo']
b ... ['foo']
True

Test 11: 'c:/foo'
drive, path 'c:' '/foo'
a ... ['/', 'foo']
b ... ['foo']
False

Test 12: 'c:/users/john/foo.txt'
drive, path 'c:' '/users/john/foo.txt'
a ... ['/', 'users', 'john', 'foo.txt']
b ... ['users', 'john', 'foo.txt']
False

Test 13: '/users/john/foo.txt'
drive, path '' '/users/john/foo.txt'
a ... ['/', 'users', 'john', 'foo.txt']
b ... ['users', 'john', 'foo.txt']
False

Test 14: 'foo/bar/baz/loop'
drive, path '' 'foo/bar/baz/loop'
a ... ['foo', 'bar', 'baz', 'loop']
b ... ['foo', 'bar', 'baz', 'loop']
True

Test 15: 'foo/bar/baz/'
drive, path '' 'foo/bar/baz/'
a ... ['foo', 'bar', 'baz', '']
b ... []
False

Test 16: '//hostname/foo/bar.txt'
drive, path '' '//hostname/foo/bar.txt'
a ... ['//', 'hostname', 'foo', 'bar.txt']
b ... ['hostname', 'foo', 'bar.txt']
False
</snippet></ROW><ROW><id>4580997</id><snippet>utilizing an ORM and(or) HTML-based GUI
</snippet></ROW><ROW><id>4581445</id><snippet>python -i myPythonConsole.py</snippet></ROW><ROW><id>4581592</id><snippet>std::random_shuffle</snippet></ROW><ROW><id>4581592</id><snippet>&lt;algorithm&gt;</snippet></ROW><ROW><id>4581592</id><snippet>#include &lt;algorithm&gt;                                                                                                    
#include &lt;vector&gt;                                                                                                       
#include &lt;iostream&gt;                                                                                                     
#include &lt;iterator&gt;                                                                                                     

int main()                                                                                                              
{                                                                                                                       
   const int SIZE=10;

   // create and initialize an array                                                                                                   
   int arr[] = {1,2,3,4,5,6,7,8,9,10};                                                                                  

   std::random_shuffle(arr, arr+SIZE);      

   // copy the contents of the array to output                                                                            
   std::copy(arr, arr+SIZE, std::ostream_iterator&lt;int&gt;(std::cout, " "));                                                
   std::cout &lt;&lt; std::endl;                                                                                              

   // shuffling an std:: container, here it's std::vector                                                                                         
   std::vector&lt;int&gt; ivec(arr, arr+SIZE);                                                                                
   std::random_shuffle(ivec.begin(), ivec.end());                                                                       
   std::copy(ivec.begin(), ivec.end(), std::ostream_iterator&lt;int&gt;(std::cout, " "));                                     
}        
</snippet></ROW><ROW><id>4581592</id><snippet>std::vector</snippet></ROW><ROW><id>4581592</id><snippet>std::deque</snippet></ROW><ROW><id>4581706</id><snippet>sum(len(v) for v in food_colors.itervalues())
</snippet></ROW><ROW><id>4581742</id><snippet>from django.contrib.contenttypes.models import ContentType
class Contact(models.Model):

    content_type = models.ForeignKey(ContentType,editable=False,null=True)

    def save(self):
        if(not self.content_type):
            self.content_type = ContentType.objects.get_for_model(self.__class__)
        self.save_base()

    def as_leaf_class(self):
        content_type = self.content_type
        model = content_type.model_class()
        if(model == Contact):
            return self
        return model.objects.get(id=self.id)
</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581847</id><snippet>long</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581847</id><snippet>long</snippet></ROW><ROW><id>4581847</id><snippet>sys.maxint</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581847</id><snippet>long</snippet></ROW><ROW><id>4581847</id><snippet>sys.maxint + 1
</snippet></ROW><ROW><id>4581847</id><snippet>long</snippet></ROW><ROW><id>4581847</id><snippet>sys.maxint</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581847</id><snippet>long</snippet></ROW><ROW><id>4581847</id><snippet>int</snippet></ROW><ROW><id>4581997</id><snippet>def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip
</snippet></ROW><ROW><id>4581997</id><snippet>mod_rpaf</snippet></ROW><ROW><id>4582040</id><snippet>def smartcopy(filestocopy, dest_path, show_progress = False):
    """Determines what buffer size to use with copy()
       Setting show_progress to True calls back display_progress()"""
    #filestocopy is a list of dictionaries for the files needed to be copied
    #dictionaries are used as the fullpath, st_mtime, and size are needed
    if len(filestocopy.keys()) == 0:
        return None
    #Determines average file size for which buffer to use
    average_size = 0
    for key in filestocopy.keys():
        average_size += int(filestocopy[key]['size'])
    average_size = average_size/len(filestocopy.keys())
    #Smaller buffer for smaller files

    if show_progress:
        progress_callback = lambda pos, total: display_progress(pos, total, key)
    else:
        progress_callback = None

    #Bigger buffer for bigger files 
    if average_size &lt; 1024*10000: #Buffer sizes determined by informal tests on my laptop
        buffer = None
    else:
        buffer = 1024 * 2600

    for key, value in filestocopy.iteritems():
        #dest_path+key is the destination path, as the key is the relative path
        #and the dest_path is the top level folder
        copy(value['fullpath'], dest_path+key, buffer, callback=progress_callback)
</snippet></ROW><ROW><id>4582040</id><snippet>def smartcopy(filestocopy, dest_path, show_progress = False):
    """Determines what buffer size to use with copy()
       Setting show_progress to True calls back display_progress()"""
    #filestocopy is a list of dictionaries for the files needed to be copied
    #dictionaries are used as the fullpath, st_mtime, and size are needed
    if len(filestocopy.keys()) == 0:
        return None
    #Determines average file size for which buffer to use
    average_size = 0
    for key in filestocopy.keys():
        average_size += int(filestocopy[key]['size'])
    average_size = average_size/len(filestocopy.keys())
    #Smaller buffer for smaller files

    kwargs = {}
    if show_progress:
        kwargs['callback'] = lambda pos, total: display_progress(pos, total, key)

    #Bigger buffer for bigger files 
    if average_size &gt;= 1024*10000: #Buffer sizes determined by informal tests on my laptop
        kwargs['buffer'] = 1024 * 2600

    for key, value in filestocopy.iteritems():
        #dest_path+key is the destination path, as the key is the relative path
        #and the dest_path is the top level folder
        copy(value['fullpath'], dest_path+key, **kwargs)
</snippet></ROW><ROW><id>4582040</id><snippet>if len(filestocopy.keys()) == 0:
    return None
</snippet></ROW><ROW><id>4582040</id><snippet>if not filestocopy:
    return
</snippet></ROW><ROW><id>4582040</id><snippet>for key, value in filestocopy.iteritems():
        #dest_path+key is the destination path, as the key is the relative path
        #and the dest_path is the top level folder
        copy(value['fullpath'], dest_path+key, **kwargs)
</snippet></ROW><ROW><id>4582040</id><snippet>keys()</snippet></ROW><ROW><id>4582040</id><snippet>keys = list(some_dict)
keys = some_dict.keys()
keys = list(some_dict.keys())
keys = list(some_dict.iterkeys())
</snippet></ROW><ROW><id>4582106</id><snippet>&gt;&gt;&gt; struct.pack("BHB",1,1,1)
'\x01\x00\x01\x00\x01'
&gt;&gt;&gt; struct.pack("=BHB",1,1,1)
'\x01\x01\x00\x01'
</snippet></ROW><ROW><id>4582163</id><snippet>ModelAdmin</snippet></ROW><ROW><id>4582163</id><snippet>django.contrib.admin.options</snippet></ROW><ROW><id>4582163</id><snippet>admin.site.unregister(User)

class AProfileInline(admin.StackedInline):
    model = UserProfileA

class BProfileInline(admin.StackedInline):
    model = UserProfileB

class UserProfileAdmin(UserAdmin):
    inlines = [AProfileInline, BProfileInline, ]

    def get_object(self, *args, **kwargs):
        obj = super(UserProfileAdmin, self).get_object(*args, **kwargs)
        if obj:
            self.inline_instances = []
            if AProfileInline.model.objects.filter(user=obj):
                inline_instance = AProfileInline(self.model, self.admin_site)
                self.inline_instances.append(inline_instance) 
            if BProfileInline.model.objects.filter(user=obj):
                inline_instance = BProfileInline(self.model, self.admin_site)
                self.inline_instances.append(inline_instance)
        return obj

admin.site.register(User, UserProfileAdmin)
</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileA</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileB</snippet></ROW><ROW><id>4582163</id><snippet>User</snippet></ROW><ROW><id>4582163</id><snippet>user</snippet></ROW><ROW><id>4582163</id><snippet>change_view</snippet></ROW><ROW><id>4582163</id><snippet>delete_view</snippet></ROW><ROW><id>4582163</id><snippet>get_object</snippet></ROW><ROW><id>4582163</id><snippet>get_object</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileA</snippet></ROW><ROW><id>4582163</id><snippet>User</snippet></ROW><ROW><id>4582163</id><snippet>user</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileA</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileB</snippet></ROW><ROW><id>4582163</id><snippet>User</snippet></ROW><ROW><id>4582163</id><snippet>user</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileB</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileAdmin.__init__</snippet></ROW><ROW><id>4582163</id><snippet>self.inline_instances</snippet></ROW><ROW><id>4582163</id><snippet>change_view</snippet></ROW><ROW><id>4582163</id><snippet>delete_view</snippet></ROW><ROW><id>4582163</id><snippet>UserProfileAdmin.get_object</snippet></ROW><ROW><id>4582548</id><snippet>utime</snippet></ROW><ROW><id>4582548</id><snippet>ctime</snippet></ROW><ROW><id>4582548</id><snippet>ctime</snippet></ROW><ROW><id>4582548</id><snippet>os.stat</snippet></ROW><ROW><id>4582548</id><snippet>os.stat</snippet></ROW><ROW><id>4582594</id><snippet>def makefunc(val):
  def somephase():
    return '%dd' % (val,)
  return somephase

Phase2 = makefunc(2)
Phase3 = makefunc(3)
</snippet></ROW><ROW><id>4582617</id><snippet>timesince</snippet></ROW><ROW><id>4582617</id><snippet>{{ mytemplatevar|timesince }}
</snippet></ROW><ROW><id>4582641</id><snippet>entities = MyEntity.query.order_by(desc(MyEntity.time)).limit(3).all()
</snippet></ROW><ROW><id>4582641</id><snippet>from sqlalchemy import desc
</snippet></ROW><ROW><id>4582675</id><snippet>for j in json:
    name = j['name']
</snippet></ROW><ROW><id>4582697</id><snippet>newfile = open(url.split('/')[-1],'w')
</snippet></ROW><ROW><id>4582697</id><snippet>'w'</snippet></ROW><ROW><id>4582697</id><snippet>'\n'</snippet></ROW><ROW><id>4582697</id><snippet>'\r\n'</snippet></ROW><ROW><id>4582697</id><snippet>'b'</snippet></ROW><ROW><id>4582697</id><snippet>'w'</snippet></ROW><ROW><id>4582697</id><snippet>'wb'</snippet></ROW><ROW><id>4582697</id><snippet>fopen</snippet></ROW><ROW><id>4582697</id><snippet>fopen</snippet></ROW><ROW><id>4582729</id><snippet>os.walk</snippet></ROW><ROW><id>4582729</id><snippet>.x</snippet></ROW><ROW><id>4582729</id><snippet>.xc</snippet></ROW><ROW><id>4582729</id><snippet>import os

for dirpath, dnames, fnames in os.walk("./"):
    for f in fnames:
        if f.endswith(".x"):
            x(os.path.join(dirpath, f))
        elif f.endswith(".xc"):
            xc(os.path.join(dirpath,f))
</snippet></ROW><ROW><id>4582729</id><snippet>x</snippet></ROW><ROW><id>4582729</id><snippet>xc</snippet></ROW><ROW><id>4583105</id><snippet>if</snippet></ROW><ROW><id>4583105</id><snippet>Model.clean()</snippet></ROW><ROW><id>4583105</id><snippet>clean</snippet></ROW><ROW><id>4583105</id><snippet>def clean(self):
  if instance.category == 1 #a specific category
    instance.poster.url = u'/media/special_image_for_1.png'
</snippet></ROW><ROW><id>4583145</id><snippet>units.compatibility.compatible</snippet></ROW><ROW><id>4583145</id><snippet>__eq__</snippet></ROW><ROW><id>4583145</id><snippet>__eq__</snippet></ROW><ROW><id>4583145</id><snippet>AbstractUnit.__eq__ = lambda self, other: repr(self)==repr(other)
</snippet></ROW><ROW><id>4583481</id><snippet>self.page7.pack_start(scrolled_win, False, False, 0)
</snippet></ROW><ROW><id>4583481</id><snippet>self.page7.pack_start(scrolled_win, True, True, 0)
</snippet></ROW><ROW><id>4583663</id><snippet>dict(dict_)</snippet></ROW><ROW><id>4583663</id><snippet>list(list_)</snippet></ROW><ROW><id>4583663</id><snippet>copy()</snippet></ROW><ROW><id>4583663</id><snippet>dict</snippet></ROW><ROW><id>4584180</id><snippet>python</snippet></ROW><ROW><id>4584180</id><snippet>PATH=c:\python\2.5;c:\python\2.6</snippet></ROW><ROW><id>4584180</id><snippet>c:\python\2.5\python.exe</snippet></ROW><ROW><id>4584180</id><snippet>c:\python\2.6\python.exe</snippet></ROW><ROW><id>4584180</id><snippet>python25</snippet></ROW><ROW><id>4584264</id><snippet>setup.py</snippet></ROW><ROW><id>4584264</id><snippet>setproctitle</snippet></ROW><ROW><id>4584264</id><snippet>unistd.h</snippet></ROW><ROW><id>4584264</id><snippet>stdlib.h</snippet></ROW><ROW><id>4584264</id><snippet>stdlib.h</snippet></ROW><ROW><id>4584264</id><snippet>--- setup.py~   Mon Jan  3 12:05:39 2011
+++ setup.py    Mon Jan  3 12:05:39 2011
@@ -39,7 +39,7 @@
     # Old BSD versions don't have setproctitle
     # TODO: not tested on an "old BSD"
     if 0 == os.spawnlp(os.P_WAIT, 'grep',
-            'grep', '-q', 'setproctitle', '/usr/include/unistd.h'):
+            'grep', '-q', 'setproctitle', '/usr/include/unistd.h', '/usr/include/stdlib.h'):
         define_macros['HAVE_SETPROCTITLE'] = 1
     else:
         define_macros['HAVE_PS_STRING'] = 1
</snippet></ROW><ROW><id>4584264</id><snippet>stdlib.h</snippet></ROW><ROW><id>4584817</id><snippet>for k1 in sorted(a.keys()):
   sub = a[k1]
   for k2 in sorted(sub.keys()):
     print k1, k2, sub[k2] # or do whatever else
</snippet></ROW><ROW><id>4585305</id><snippet>egrep -o '[^ ]{N,}' &lt;filename&gt;
</snippet></ROW><ROW><id>4585305</id><snippet>N</snippet></ROW><ROW><id>4585305</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>4586073</id><snippet>re</snippet></ROW><ROW><id>4586073</id><snippet>re.finditer()</snippet></ROW><ROW><id>4586073</id><snippet>finditer()</snippet></ROW><ROW><id>4586996</id><snippet>create_login_url</snippet></ROW><ROW><id>4586996</id><snippet>users.create_login_url(dest_url='/edit')
</snippet></ROW><ROW><id>4587545</id><snippet>.py</snippet></ROW><ROW><id>4587545</id><snippet>.cgi</snippet></ROW><ROW><id>4587545</id><snippet>cgi-script</snippet></ROW><ROW><id>4587545</id><snippet>AddHandler</snippet></ROW><ROW><id>4587545</id><snippet>SetHandler</snippet></ROW><ROW><id>4587545</id><snippet>ExecCGI</snippet></ROW><ROW><id>4587545</id><snippet>Options</snippet></ROW><ROW><id>4587590</id><snippet>self.rows</snippet></ROW><ROW><id>4587590</id><snippet>self.cols</snippet></ROW><ROW><id>4587590</id><snippet>self.rows[x]</snippet></ROW><ROW><id>4587590</id><snippet>self.rows[y]</snippet></ROW><ROW><id>4587590</id><snippet>self.cols</snippet></ROW><ROW><id>4587590</id><snippet>self.rows[z]</snippet></ROW><ROW><id>4587590</id><snippet>{}</snippet></ROW><ROW><id>4587590</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>4587920</id><snippet>j2 = [i for i in j if i &gt;= 5]
</snippet></ROW><ROW><id>4587920</id><snippet>sorted</snippet></ROW><ROW><id>4587920</id><snippet>j2 = sorted(i for i in j if i &gt;= 5)
</snippet></ROW><ROW><id>4587920</id><snippet>sort</snippet></ROW><ROW><id>4587920</id><snippet>j2 = [i for i in j if i &gt;= 5]
j2.sort()
</snippet></ROW><ROW><id>4587943</id><snippet>import urllib
import urlparse

query=urllib.urlencode({"test":1})
urls=['http://www.aaa.com',
      'http://www.aaa.com/home',
      'http://www.aaa.com/?location=home',
      'http://www.aaa.com/?location=home&amp;page=1']
for url in urls:
    x=urlparse.urlparse(url)
    new_query=(x.query+'&amp;'+query) if x.query else query
    y=urlparse.urlunparse((x.scheme,x.netloc,x.path,x.params,new_query,x.fragment))
    print(y)
</snippet></ROW><ROW><id>4587943</id><snippet>http://www.aaa.com?test=1
http://www.aaa.com/home?test=1
http://www.aaa.com/?location=home&amp;test=1
http://www.aaa.com/?location=home&amp;page=1&amp;test=1
</snippet></ROW><ROW><id>4588056</id><snippet>AddHandler fcgid-script .fcgi
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.fcgi/$1 [QSA,L]
</snippet></ROW><ROW><id>4588110</id><snippet>a</snippet></ROW><ROW><id>4588110</id><snippet>b</snippet></ROW><ROW><id>4588110</id><snippet>a</snippet></ROW><ROW><id>4588110</id><snippet>b</snippet></ROW><ROW><id>4588110</id><snippet>&gt;&gt;&gt; a = range(3)
&gt;&gt;&gt; b = a                     # same object
&gt;&gt;&gt; b.append(3)
&gt;&gt;&gt; a, b                      # same contents
([0, 1, 2, 3], [0, 1, 2, 3])
</snippet></ROW><ROW><id>4588110</id><snippet>b</snippet></ROW><ROW><id>4588110</id><snippet>a</snippet></ROW><ROW><id>4588110</id><snippet>b = a[:]</snippet></ROW><ROW><id>4588110</id><snippet>&gt;&gt;&gt; a = range(3)
&gt;&gt;&gt; b = a[:]                  # make b a new copy of a
&gt;&gt;&gt; b.append(3)
&gt;&gt;&gt; a, b                      # a is left unchanged
([0, 1, 2], [0, 1, 2, 3])
</snippet></ROW><ROW><id>4588110</id><snippet>&gt;&gt;&gt; a = [range(2), range(3)]
&gt;&gt;&gt; b = copy.copy(a)          # shallow copy of a, equivalent to a[:]
&gt;&gt;&gt; b[0] = range(4)
&gt;&gt;&gt; a, b                      # setting an element of b leaves a unchanged
([[0, 1], [0, 1, 2]], [[0, 1, 2, 3], [0, 1, 2]])
&gt;&gt;&gt; b[1].append(3)
&gt;&gt;&gt; a, b                      # modifying an element of b modifies the element in a
([[0, 1], [0, 1, 2, 3]], [[0, 1, 2, 3], [0, 1, 2, 3]])

&gt;&gt;&gt; a = [range(2), range(3)]
&gt;&gt;&gt; b = copy.deepcopy(a)      # deep recursive copy of a
&gt;&gt;&gt; b[1].append(3)
&gt;&gt;&gt; a, b                      # modifying anything in b leaves a unchanged
([[0, 1], [0, 1, 2]], [[0, 1], [0, 1, 2, 3]])
</snippet></ROW><ROW><id>4588460</id><snippet>b.submit()  # The second of the two forms
c = csv.DictReader(b.response(), dialect='excel-tab')
</snippet></ROW><ROW><id>4588637</id><snippet>total = 0
for c in "#car":
    total &lt;&lt;= 7
    total += ord(c)
print total
</snippet></ROW><ROW><id>4588637</id><snippet>result = []
while total:
    result.append(chr(total % 128))
    total &gt;&gt;= 7
print ''.join(reversed(result))
</snippet></ROW><ROW><id>4588654</id><snippet>&gt;&gt;&gt; x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])
&gt;&gt;&gt; numpy.where(x == 0)[0]
array([1, 3, 5])
</snippet></ROW><ROW><id>4588855</id><snippet>parseJSON</snippet></ROW><ROW><id>4588855</id><snippet>@interface GSData : NSObject {
NSMutableData *responseData;
}

/////////////////////////

// in my .m file

- (void)getData {
    responseData = [[NSMutableData data] retain];
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:DATA_URL]];
    [[NSURLConnection alloc] initWithRequest:request delegate:self];
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    [responseData setLength:0];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    [responseData appendData:data];
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    NSLog(@"Connection failed: %@", [error description]);
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    [connection release];

    NSString *responseString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
    [responseData release];

    [self parseJSON:responseString];
    [responseString release];
}
</snippet></ROW><ROW><id>4589063</id><snippet>elts</snippet></ROW><ROW><id>4589063</id><snippet>dates</snippet></ROW><ROW><id>4589063</id><snippet>elts</snippet></ROW><ROW><id>4589063</id><snippet>all_dates = set(e['created'] for e in dates) # gets a list of all dates that exist in `dates`
elts_dates = set(e['created'] for e in elts) # same for elts

missing_dates = all_dates - elts_dates

for entry in missing_dates:
    elts.append(dict(created=entry))
</snippet></ROW><ROW><id>4589290</id><snippet>from PIL import ImageGrab
im = ImageGrab.grab()
im.save('screenshot.png')
</snippet></ROW><ROW><id>4589290</id><snippet>import win32gui, win32ui, win32con, win32api
hwin = win32gui.GetDesktopWindow()
width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
hwindc = win32gui.GetWindowDC(hwin)
srcdc = win32ui.CreateDCFromHandle(hwindc)
memdc = srcdc.CreateCompatibleDC()
bmp = win32ui.CreateBitmap()
bmp.CreateCompatibleBitmap(srcdc, width, height)
memdc.SelectObject(bmp)
memdc.BitBlt((0, 0), (width, height), srcdc, (left, top), win32con.SRCCOPY)
bmp.SaveBitmapFile(memdc, 'screenshot.bmp')
</snippet></ROW><ROW><id>4589311</id><snippet>Query.from_statement</snippet></ROW><ROW><id>4589344</id><snippet>f = open('file.txt')
lines = f.readlines()
matrix = [[a for a in b[:4]] for b in lines] # this gets all columns, up to 4
</snippet></ROW><ROW><id>4589553</id><snippet>article = page.summary()   # Extract article using readability
article.findAll("a")       # Return a list of all links in the article
</snippet></ROW><ROW><id>4589739</id><snippet>import cookielib, urllib2

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
# default User-Agent ('Python-urllib/2.6') will *not* work
opener.addheaders = [
    ('User-Agent', 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11'),
    ]


stylesheets = [
    'https://www.idcourts.us/repository/css/id_style.css',
    'https://www.idcourts.us/repository/css/id_print.css',
]

home = opener.open('https://www.idcourts.us/repository/start.do')
print cj
sessid = cj._cookies['www.idcourts.us']['/repository']['JSESSIONID'].value
# Note the +=
opener.addheaders += [
    ('Referer', 'https://www.idcourts.us/repository/start.do'),
    ]
for st in stylesheets:
    # da trick
    opener.open(st+';jsessionid='+sessid)
search = opener.open('https://www.idcourts.us/repository/partySearch.do')
print cj
# perhaps need to keep updating the referer...
</snippet></ROW><ROW><id>4589742</id><snippet>X509_REQ_get_extensions</snippet></ROW><ROW><id>4589742</id><snippet>X509_REQ *req = /* ... */;
STACK_OF(X509_EXTENSION) *exts = X509_REQ_get_extensions(req);
int count = sk_X509_EXTENSION_num(exts);
int i;
for (i = 0; i &lt; count; ++i) {
    X509_EXTENSION *ext = sk_X509_EXTENSION_value(exts, i);
    /* Do something with ext */
}
sk_X509_EXTENSION_pop_free(exts, X509_EXTENSION_free);
</snippet></ROW><ROW><id>4590150</id><snippet>import png:-
</snippet></ROW><ROW><id>4590150</id><snippet>import</snippet></ROW><ROW><id>4590150</id><snippet>png</snippet></ROW><ROW><id>4590370</id><snippet>setup.py</snippet></ROW><ROW><id>4590370</id><snippet>    if COMPILED_WITH_PYDEBUG or not have_usable_openssl:
        # The _sha module implements the SHA1 hash algorithm.
        exts.append( Extension('_sha', ['shamodule.c']) )
        # The _md5 module implements the RSA Data Security, Inc. MD5
        # Message-Digest Algorithm, described in RFC 1321.  The
        # necessary files md5.c and md5.h are included here.
        exts.append( Extension('_md5',
                        sources = ['md5module.c', 'md5.c'],
                        depends = ['md5.h']) )
</snippet></ROW><ROW><id>4590370</id><snippet>./configure --with-pydebug
make
</snippet></ROW><ROW><id>4590370</id><snippet>&gt;&gt;&gt; import _sha
[38571 refs]
&gt;&gt;&gt; _sha.__file__
'/home/senthil/python/release27-maint/build/lib.linux-i686-2.7-pydebug/_sha.so'
[38573 refs]
</snippet></ROW><ROW><id>4590413</id><snippet>$  /Users/paulo/Desktop/ashtanga/ping/sender.py
</snippet></ROW><ROW><id>4590473</id><snippet>data = []
... data is eventually populated ...
x, y = data
</snippet></ROW><ROW><id>4590473</id><snippet>klist = ['x', 'y']
data = ['2,3,4', '5,5,6']
mydict = dict(zip(klist, data))
# mydict['x'] == '2,3,4'
</snippet></ROW><ROW><id>4590594</id><snippet>@login_required
def edit_dependents(request, id):
employee = request.user.get_profile() 
try:
    dependent = employee.dependent.get(id=id)
except Dependent.DoesNotExist:
    messages.error(request, "You can't edit this dependent(id: %s)." %id)
    return HttpResponseRedirect(reverse('core_show_dependent_details'))
dependent_relation = DependentRelation.objects.get(dependent=dependent, employee=employee)
if request.method == "POST":
    form = DependentForm(data=request.POST, instance=dependent)
    if form.is_valid():
        dependent = form.save(commit=False)
        dependent_relation = DependentRelation.objects.get(dependent=dependent, employee=employee)
        dependent_relation.relationship = form.cleaned_data['relationship']
        try:
            dependent_relation.full_clean()
        except ValidationError, e:
             form = DependentForm(data=request.POST)
        dependent.save()
        dependent_relation.save()
    return HttpResponseRedirect(reverse('core_show_dependent_details'))
else:
    form = DependentForm(instance=dependent,
        initial={'relationship': dependent_relation.relationship})
dictionary = {'form':form,'title':'Edit Dependents',}
return render_to_response('core/create_edit_form.html',dictionary, context_instance = RequestContext(request))
</snippet></ROW><ROW><id>4590594</id><snippet>dependent = employee.dependent.get(id = id)
</snippet></ROW><ROW><id>4591139</id><snippet>if(some_bool == True):
  ...
</snippet></ROW><ROW><id>4591139</id><snippet>if(some_bool):
  ...
</snippet></ROW><ROW><id>4591139</id><snippet>is</snippet></ROW><ROW><id>4591139</id><snippet>==</snippet></ROW><ROW><id>4591139</id><snippet>bool(x) is True</snippet></ROW><ROW><id>4591139</id><snippet>True</snippet></ROW><ROW><id>4591139</id><snippet>bool(x) == True</snippet></ROW><ROW><id>4591139</id><snippet>x is True</snippet></ROW><ROW><id>4591139</id><snippet>x == True</snippet></ROW><ROW><id>4591139</id><snippet>x = 1</snippet></ROW><ROW><id>4591836</id><snippet>plot()</snippet></ROW><ROW><id>4591836</id><snippet>def polar_to_rect(theta, r):
    return (r*cos(theta), r*sin(theta))
</snippet></ROW><ROW><id>4591836</id><snippet>def my_polar(theta, r, *args, **kwargs):
    """
    theta, r -- NumPy arrays with polar coordinates.
    """
    rect_coords = polar_to_rect(theta, r)
    pyplot.plot(rect_coords[0], rect_coords[1], *args, **kwargs)
    # You can customize the plot with additional arguments, or use `Line2D` on the points in rect_coords.
</snippet></ROW><ROW><id>4592749</id><snippet>def foo(some_dict=None):
  if some_dict is None:
    some_dict = {}
</snippet></ROW><ROW><id>4592749</id><snippet>def foo(arg={})
</snippet></ROW><ROW><id>4592749</id><snippet>{}</snippet></ROW><ROW><id>4593005</id><snippet>No, not possible</snippet></ROW><ROW><id>4593005</id><snippet>parser = OptionParser(usage='usage: %prog [options] arguments')
parser.add_option('-f', '--file', 
                        dest='filename',
                        help='foo help')
(options, args) = parser.parse_args()
if options.filename is None:   # if filename is not given
    parser.error('Filename not given')
</snippet></ROW><ROW><id>4593005</id><snippet>-f</snippet></ROW><ROW><id>4593005</id><snippet>argparse</snippet></ROW><ROW><id>4593005</id><snippet>optparse</snippet></ROW><ROW><id>4593266</id><snippet>server.framework.getattr('busy?')()
</snippet></ROW><ROW><id>4593288</id><snippet>Table.objects.filter(name__in=keyword.split(' '))
</snippet></ROW><ROW><id>4593288</id><snippet>result = []
for keyword in keywords.split(' '):
    result += list(Table.objects.filter(name__icontains=keyword))
</snippet></ROW><ROW><id>4593288</id><snippet>   final_pred = Q()
   for pred in [Q(name__icontains=keyword) for keyword in keywords.split(' ')]:
     final_pred = final_pred | pred;
   Table.objects.filter(final_pre)
</snippet></ROW><ROW><id>4593322</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>4593322</id><snippet>user2 = forms.ModelChoiceField(queryset=User.objects.all())
</snippet></ROW><ROW><id>4593322</id><snippet>__unicode__</snippet></ROW><ROW><id>4593322</id><snippet>__unicode__</snippet></ROW><ROW><id>4593322</id><snippet>class MatchForm(forms.Form):
    user1 = forms.ChoiceField(choices = [])

    def __init__(self, *args, **kwargs):
        super(MatchForm, self).__init__(*args, **kwargs)
        self.fields['user1'].choices = [(x.pk, x.get_full_name()) for x in User.objects.all()]
</snippet></ROW><ROW><id>4593774</id><snippet>thread.interrupt_main()</snippet></ROW><ROW><id>4593774</id><snippet>import thread
import time

def main():
    try:
        m = thread.start_new_thread(killable_input, tuple())
        while 1:
            time.sleep(0.1) 
    except KeyboardInterrupt:
        print "exception" 

def killable_input():
    w = thread.start_new_thread(normal_input, tuple())
    i = thread.start_new_thread(wait_sometime, tuple())


def normal_input():
    s = raw_input("input:")


def wait_sometime():
    time.sleep(4) # or any other condition to kill the thread
    print "too slow, killing imput"
    thread.interrupt_main()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4594060</id><snippet>std::string ciphertext = "..."; // what Python encryption produces
std::string decryptedtext;

byte key[ CryptoPP::AES::DEFAULT_KEYLENGTH ], iv[ CryptoPP::AES::BLOCKSIZE ];

// populate key and iv with the correct values

CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);
CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption( aesDecryption, iv );

CryptoPP::StreamTransformationFilter stfDecryptor(cbcDecryption, new CryptoPP::StringSink( decryptedtext ) );
stfDecryptor.Put( reinterpret_cast&lt;const unsigned char*&gt;( ciphertext.c_str() ), ciphertext.size() );
stfDecryptor.MessageEnd();

// it's all in decryptedText now
</snippet></ROW><ROW><id>4594238</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; myre = re.compile(r"\w{4,}")
&gt;&gt;&gt; myre.findall('Lorem, ipsum! dolor sit? amet...')
['Lorem', 'ipsum', 'dolor', 'amet']
</snippet></ROW><ROW><id>4594238</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; myre = re.compile(r"\w{4,}")
&gt;&gt;&gt; myre.findall('Lorem, ipsum! dolör sit? amet...')
['Lorem', 'ipsum', 'dolör', 'amet']
</snippet></ROW><ROW><id>4594238</id><snippet>&gt;&gt;&gt; myre = re.compile(r"\w{4,}", re.UNICODE)
&gt;&gt;&gt; myre.findall(u'Lorem, ipsum! dolör sit? amet...')
[u'Lorem', u'ipsum', u'dol\xf6r', u'amet']
</snippet></ROW><ROW><id>4594618</id><snippet>suds.transport.Request()</snippet></ROW><ROW><id>4594618</id><snippet>client</snippet></ROW><ROW><id>4594618</id><snippet>from suds.transport import Request

transport = client.options.transport
request = Request('http://www.example.org/document.html')
document = transport.open(request).read()
</snippet></ROW><ROW><id>4594618</id><snippet>transport.u2open(request)</snippet></ROW><ROW><id>4594758</id><snippet>('/details/(\d+)', DetailsPage),
</snippet></ROW><ROW><id>4594758</id><snippet>DetailsPage::get()</snippet></ROW><ROW><id>4594758</id><snippet>class DetailsPage(webapp.RequestHandler):
    def get(self, announcement_id):
        # next line no longer needed
        # announcement_id = self.request.get("id") 
</snippet></ROW><ROW><id>4595008</id><snippet>ones = elements.exclude('series__subtopic1_name'='').\
   values_list('series__subtopic1_name','series__subtopic1_slug').distinct()

twos = elements.exclude('series__subtopic2_name'='').\
   values_list('series__subtopic2_name', 'series__subtopic2_slug').distinct()

threes = elements.exclude('series__subtopic3_name'='').\
   values_list('series__subtopic3_name', 'series__subtopic3_slug').distinct()

# concatenate element of twos and threes into list 'ones'
ones.extend(twos)
ones.extend(threes)

# we already filtered empty names in the db query,
# so we can just return the subtopic_list
subtopic_list = [{'name': name, 'slug': slug} for name, slug in ones]
</snippet></ROW><ROW><id>4595030</id><snippet>settings.py</snippet></ROW><ROW><id>4595030</id><snippet>import gc
class GCMiddleware(object):
    def process_response(self, request, response):
        gc.collect()
        return response
</snippet></ROW><ROW><id>4595177</id><snippet>$ python -m pydoc -p 5555
</snippet></ROW><ROW><id>4595258</id><snippet>def group_by_heading( some_source ):
    buffer= []
    for line in some_source:
        if line.startswith( "Heading" ):
            if buffer: yield buffer
            buffer= [ line ]
        else:
            buffer.append( line )
    yield buffer

with open( "some_file", "r" ) as source:
    for heading_and_lines in group_by_heading( source ):
        heading= heading_and_lines[0]
        lines= heading_and_lines[1:]
        # process away.
</snippet></ROW><ROW><id>4595269</id><snippet>struct</snippet></ROW><ROW><id>4595269</id><snippet>import struct
print [hex(ord(b)) for b in struct.pack('&gt;L',777007543)]
# ['0x2e', '0x50', '0x31', '0xb7']
</snippet></ROW><ROW><id>4595269</id><snippet>import string
import struct
xlate = string.maketrans('abcdef', 'ABCDEF')

print [hex(ord(b)).translate(xlate) for b in struct.pack('&gt;L',777007543)]
# ['0x2E', '0x50', '0x31', '0xB7']
</snippet></ROW><ROW><id>4595516</id><snippet>import struct
import hashlib

x = struct.pack('&gt;II8B', 777007543, 114997259, 0x47, 0x30, 0x22, 0x2D, 0x5A, 0x3F, 0x47, 0x58)
hash = hashlib.md5(x).digest()

print [hex(ord(d)) for d in x]
(output) ['0x2e', '0x50', '0x31', '0xb7', '0x6', '0xda', '0xb8', '0xb', '0x47', '0x30', '0x22', '0x2d', '0x5a', '0x3f', '0x47', '0x58']

print [hex(ord(d)) for d in hash]
(output) ['0x30', '0x73', '0x74', '0x33', '0x52', '0x6c', '0x26', '0x71', '0x2d', '0x32', '0x5a', '0x55', '0x5e', '0x77', '0x65', '0x75']
</snippet></ROW><ROW><id>4596337</id><snippet>import re  
if re.search(r'.*apps\.facebook\.com.*', stringName):
    print('Yay, it matches!')
</snippet></ROW><ROW><id>4596443</id><snippet>import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        #Rename your files and use os.path.join(root, name)
</snippet></ROW><ROW><id>4596968</id><snippet>auth_permission</snippet></ROW><ROW><id>4597004</id><snippet>import urllib, urllib2
url = '/doaction.php'
data= {'hashcode': 'blah', 'name':'blahblah', 'type':'blahblahblah'}
request = urllib2.Request(url, urllib.urlencode(data))
response = urllib2.urlopen(request)
</snippet></ROW><ROW><id>4597005</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>4597005</id><snippet>from collections import defaultdict

a = defaultdict(lambda:None)
print a[100]
</snippet></ROW><ROW><id>4597276</id><snippet>.has_perm</snippet></ROW><ROW><id>4597276</id><snippet>User</snippet></ROW><ROW><id>4597276</id><snippet>UserProfile</snippet></ROW><ROW><id>4597276</id><snippet>user.has_perm('profiles.is_student')
</snippet></ROW><ROW><id>4597276</id><snippet>profiles</snippet></ROW><ROW><id>4597276</id><snippet>User.has_perm</snippet></ROW><ROW><id>4597437</id><snippet># myproject/myapp/models.py

class MyModel(models.Model):
    class Meta:
        permissions = (
            ('permission_code', 'Friendly permission description'),
        )
</snippet></ROW><ROW><id>4597437</id><snippet>@user_passes_test(lambda u: u.has_perm('myapp.permission_code'))
def some_view(request):
    # ...
</snippet></ROW><ROW><id>4597542</id><snippet>XSCREENSAVER_WINDOW</snippet></ROW><ROW><id>4597831</id><snippet>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
print('{0:n}'.format(1234))
</snippet></ROW><ROW><id>4597831</id><snippet>1,234
</snippet></ROW><ROW><id>4597831</id><snippet>locale.getlocale()</snippet></ROW><ROW><id>4597831</id><snippet>In [31]: locale.getlocale()
Out[31]: ('en_US', 'UTF8')
</snippet></ROW><ROW><id>4597831</id><snippet>locale.getdefaultlocale()</snippet></ROW><ROW><id>4597831</id><snippet>locale -a</snippet></ROW><ROW><id>4597838</id><snippet>pydot</snippet></ROW><ROW><id>4597838</id><snippet>graphvis</snippet></ROW><ROW><id>4597911</id><snippet>from osgeo import ogr

ds = ogr.Open("somelayer.shp")
lyr = ds.GetLayerByName("somelayer")
lyr.ResetReading()

point = ogr.CreateGeometryFromWkt("POINT(4 5)")

for feat in lyr:
    geom = feat.GetGeometryRef()
    if geom.Contains(point):
        sm = feat.GetField(feat.GetFieldIndex("surface_material"))
        # do stuff...
</snippet></ROW><ROW><id>4598140</id><snippet>sys.argv</snippet></ROW><ROW><id>4598140</id><snippet>for arg in sys.argv[1:]:
    print client.service.setId(arg)
</snippet></ROW><ROW><id>4598452</id><snippet>    for row in cur:
        for i in row:
            print i
</snippet></ROW><ROW><id>4598452</id><snippet>cur.execute('''SELECT * FROM tasks WHERE taskcust=1''')</snippet></ROW><ROW><id>4598472</id><snippet>urllib2.urlopen("http://www.example.com")</snippet></ROW><ROW><id>4598472</id><snippet>2</snippet></ROW><ROW><id>4598509</id><snippet>soup.findAll('catalog', recursive=False)</snippet></ROW><ROW><id>4598509</id><snippet>item.title</snippet></ROW><ROW><id>4598509</id><snippet>None</snippet></ROW><ROW><id>4598509</id><snippet>soup.findAll("book")</snippet></ROW><ROW><id>4598509</id><snippet>soup.find("catalog").findChildren()</snippet></ROW><ROW><id>4598509</id><snippet>BSS.NESTABLE_TAGS["book"] = []
soup = BSS(open("catalog.xml"))
soup.catalog.findChildren(recursive=False)
</snippet></ROW><ROW><id>4598730</id><snippet>class SelfReferenceProperty</snippet></ROW><ROW><id>4598730</id><snippet>None</snippet></ROW><ROW><id>4598730</id><snippet>None</snippet></ROW><ROW><id>4598931</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>4598931</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>4598931</id><snippet>\n</snippet></ROW><ROW><id>4599023</id><snippet>post.date</snippet></ROW><ROW><id>4599031</id><snippet>hexdump = """\
. a . v a l i d . s t r i n g . 
. a n o t h e r . s t r i n g . 
. e t c . . . . . . . . . . . . 
l i n e . w . a .   s p a c e . 
. e t c . . . . . . . . . . . . 
"""

from pyparsing import oneOf, printables, delimitedList, White, LineEnd

# expression for a single char or space
dumpchar = oneOf(list(printables)+[' ']).leaveWhitespace()

# convert '.'s to something else, if you like; in this example, '_'
dumpchar.setParseAction(lambda t:'_' if t[0]=='.' else None)

# expression for a whole line of dump chars - intervening spaces will
# be discarded by delimitedList
dumpline = delimitedList(dumpchar, delim=White(' ',exact=1)) + LineEnd().suppress()

# if you want the intervening spaces, use this form instead
#dumpline = delimitedList(dumpchar, delim=White(' ',exact=1), combine=True) + LineEnd().suppress()

# read dumped lines from hexdump
for t in dumpline.searchString(hexdump):
    print ''.join(t)
</snippet></ROW><ROW><id>4599031</id><snippet>_a_valid_string_
_another_string_
_etc____________
line_w_a_ space_
_etc____________
</snippet></ROW><ROW><id>4599044</id><snippet>__builtin__</snippet></ROW><ROW><id>4599044</id><snippet>def open():
    pass

import __builtin__

print open
print __builtin__.open
</snippet></ROW><ROW><id>4599044</id><snippet>&lt;function open at 0x011E8670&gt;
&lt;built-in function open&gt;
</snippet></ROW><ROW><id>4599195</id><snippet>from django import template
from django.utils.html import escape
from django.utils.safestring import mark_safe

register = template.Library()

import re

readmore_showscript = ''.join([
"this.parentNode.style.display='none';",
"this.parentNode.parentNode.getElementsByClassName('more')[0].style.display='inline';",
"return false;",
]);

@register.filter
def readmore(txt, showwords=15):
    global readmore_showscript
    words = re.split(r' ', escape(txt))

    # wrap the more part
    words.insert(showwords, '&lt;span class="more" style="display:none;"&gt;')
    words.append('&lt;/span&gt;')

    # insert the readmore part
    words.insert(showwords, '&lt;span class="readmore"&gt;... &lt;a href="#" onclick="')
    words.insert(showwords+1, readmore_showscript)
    words.insert(showwords+2, '"&gt;read more&lt;/a&gt;')
    words.insert(showwords+3, '&lt;/span&gt;')

    # Wrap with &lt;p&gt;
    words.insert(0, '&lt;p&gt;')
    words.append('&lt;/p&gt;')

    return mark_safe(' '.join(words))

readmore.is_safe = True
</snippet></ROW><ROW><id>4599195</id><snippet>__init__.py</snippet></ROW><ROW><id>4599195</id><snippet>readmore.py</snippet></ROW><ROW><id>4599195</id><snippet>{% load readmore %}</snippet></ROW><ROW><id>4599195</id><snippet>{{ some_long_text_var|readmore:15 }}</snippet></ROW><ROW><id>4599690</id><snippet>TypeDecorator</snippet></ROW><ROW><id>4599690</id><snippet>PickleType</snippet></ROW><ROW><id>4599690</id><snippet>class JsonType(types.TypeDecorator):
    impl = types.Unicode

    def process_bind_param(self, value, dialect):
        return json.dumps(value)

    def process_result_value(self, value, dialect):
        return json.loads(value)
</snippet></ROW><ROW><id>4599776</id><snippet>0e7cc62d5339491aa701b67453405ccb</snippet></ROW><ROW><id>4599776</id><snippet>0e7</snippet></ROW><ROW><id>4599776</id><snippet>`</snippet></ROW><ROW><id>4599806</id><snippet>&gt;&gt;&gt; for n in xrange(11):
    print ", ".join(str((a, n-2*a)) for a in xrange(n/2+1))
...     
...     
(0, 0)
(0, 1)
(0, 2), (1, 0)
(0, 3), (1, 1)
(0, 4), (1, 2), (2, 0)
(0, 5), (1, 3), (2, 1)
(0, 6), (1, 4), (2, 2), (3, 0)
(0, 7), (1, 5), (2, 3), (3, 1)
(0, 8), (1, 6), (2, 4), (3, 2), (4, 0)
(0, 9), (1, 7), (2, 5), (3, 3), (4, 1)
(0, 10), (1, 8), (2, 6), (3, 4), (4, 2), (5, 0)
</snippet></ROW><ROW><id>4599864</id><snippet>with open("filename.txt", "r+b") as f:
     f.write(chr(10) + chr(20) + chr(30) + chr(40))
</snippet></ROW><ROW><id>4599864</id><snippet>with open("filename.txt", "r+b") as f:
    fourbytes = [ord(b) for b in f.read(4)]
    fourbytes[0] = fourbytes[1]  # whatever, manipulate your bytes here
    f.seek(0)
    f.write("".join(chr(b) for b in fourbytes))
</snippet></ROW><ROW><id>4599935</id><snippet>pizza.toppings.order_by('topping_relationship__order_to_add_topping')
</snippet></ROW><ROW><id>4600010</id><snippet>.close()</snippet></ROW><ROW><id>4600010</id><snippet>f = open('test.txt','r')
buf = f.readlines()
f.close()
</snippet></ROW><ROW><id>4600010</id><snippet>with</snippet></ROW><ROW><id>4600010</id><snippet>with</snippet></ROW><ROW><id>4600010</id><snippet>&gt;&gt;&gt; with open('test.txt','r') as f:
...     buf = f.readlines()
&gt;&gt;&gt; f.closed
True
</snippet></ROW><ROW><id>4600115</id><snippet>#!/usr/bin/env python
import fileinput

for line in fileinput.input():
    line = line.rstrip("\r\n")    # equiv of chomp
    H = line.split('\t')

    if H[30]=='Good':
        # some operation in col

        # first - what do you get from this?
        print repr(H[22])

        # second - what do you get from this?
        print unicode(H[22], "Latin-1")
    else:
        # do something else
        pass  # only necessary if no code in this section
</snippet></ROW><ROW><id>4600456</id><snippet>ScriptRuntimeSetup setup = Python.CreateRuntimeSetup(new Dictionary&lt;string, object&gt;() {
    { "Frames", true }
});
</snippet></ROW><ROW><id>4600466</id><snippet>extra_compile_args</snippet></ROW><ROW><id>4600466</id><snippet>extra_link_args</snippet></ROW><ROW><id>4600466</id><snippet>Extension</snippet></ROW><ROW><id>4600560</id><snippet>AppId:Namespace:[parent Kind:id|name:]Kind:id|name</snippet></ROW><ROW><id>4600860</id><snippet>Image image = Image.createImage(path_to_img+"/img.PNG");

g.drawImage(image, x, y, Graphics.TOP | Graphics.LEFT);   // 1) Use drawImage function.

Sprite mainSprite = new Sprite(image); // 2) Use Sprite to display your image.
mainSprite.setRefPixelPosition(x, y);
mainSprite.paint(g);
</snippet></ROW><ROW><id>4601209</id><snippet>__init__.py</snippet></ROW><ROW><id>4601209</id><snippet>from submodule import mymodule
</snippet></ROW><ROW><id>4601258</id><snippet>from sqlalchemy.orm import lazyload
joe = (s2.query(User)
    .options(lazyload('addresses'))
    .filter_by(name = "Joe").one())
for addr in joe.addresses:
    print addr.address
</snippet></ROW><ROW><id>4601369</id><snippet>new_list</snippet></ROW><ROW><id>4601369</id><snippet>import random

new_list += random.sample(old_list, 5)
</snippet></ROW><ROW><id>4601369</id><snippet>new_list</snippet></ROW><ROW><id>4601369</id><snippet>new_list = random.sample(old_list, 5)
</snippet></ROW><ROW><id>4601369</id><snippet>new_list</snippet></ROW><ROW><id>4601369</id><snippet>new_new_list</snippet></ROW><ROW><id>4601369</id><snippet>new_new_list = new_list + random.sample(old_list, 5)
</snippet></ROW><ROW><id>4601369</id><snippet>new_list</snippet></ROW><ROW><id>4601369</id><snippet>new_new_list</snippet></ROW><ROW><id>4601590</id><snippet>globals()['Foo']()</snippet></ROW><ROW><id>4601590</id><snippet>&gt;&gt;&gt; class Foo:
...   def __init__(self): print "Created a Foo!"
...
&gt;&gt;&gt; globals()['Foo']()
Created a Foo!
&lt;__main__.Foo instance at 0x02A33350&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4601660</id><snippet>subprocess</snippet></ROW><ROW><id>4601660</id><snippet>processes = {}
for cmd in ['cmd1', 'cmd2', 'cmd3']:
    p = subprocess.Popen('cmd1', stdout=subprocess.PIPE)
    processes[p.stdout] = p

while len(processes):
    rfds, _, _ = select.select(processes.keys(), [], [])
    for fd in rfds:
        process = processses[fd]
        print fd.read()

        if process.returncode is not None:
            print "Process {0} returned with code {1}".format(process.pid, process.returncode)
            del processes[fd]
</snippet></ROW><ROW><id>4601725</id><snippet>import random
print(random.__file__)
</snippet></ROW><ROW><id>4601943</id><snippet>sys.stdout.buffer.write(b"Content-type: text/html;encoding=UTF-8\n\n") # Not 100% sure about the spelling.
sys.stdout.buffer.write(site.encode('UTF8'))
</snippet></ROW><ROW><id>4601943</id><snippet>print("Content-type: text/html;encoding=UTF-8\n\n") # Not 100% sure about the spelling.
print(site.encode('UTF8'))
</snippet></ROW><ROW><id>4602583</id><snippet>import someapp
</snippet></ROW><ROW><id>4602732</id><snippet>enumerate</snippet></ROW><ROW><id>4602732</id><snippet>i</snippet></ROW><ROW><id>4602732</id><snippet>i</snippet></ROW><ROW><id>4602732</id><snippet>f</snippet></ROW><ROW><id>4602732</id><snippet>with open('C:/Twitter/user_' + str(self.id) + '.json', mode='w') as f:
   f.write('{')
   for i, friends in enumerate(Cursor(api.followers_ids,screen_name=self.ip).items()):
        if i&gt;0:
            f.write(", ")
        f.write("%s:%s" % (json.dumps(i), json.dumps(dict(fu=self.ip, su=friends))))
   f.write("}")
</snippet></ROW><ROW><id>4602814</id><snippet>list</snippet></ROW><ROW><id>4602814</id><snippet>.append()</snippet></ROW><ROW><id>4602814</id><snippet>list</snippet></ROW><ROW><id>4602814</id><snippet>string</snippet></ROW><ROW><id>4602814</id><snippet>str()</snippet></ROW><ROW><id>4602814</id><snippet>x</snippet></ROW><ROW><id>4602814</id><snippet>string += 'MA[' + str(x) + '] |'
</snippet></ROW><ROW><id>4602814</id><snippet>string += 'MA[%d] | % x
</snippet></ROW><ROW><id>4602814</id><snippet>range(a, -1, -1)</snippet></ROW><ROW><id>4602814</id><snippet>join()</snippet></ROW><ROW><id>4602814</id><snippet>&gt;&gt;&gt; ' | '.join('MA[%d]' % x for x in xrange(5, -1, -1))
'MA[5] | MA[4] | MA[3] | MA[2] | MA[1] | MA[0]'
</snippet></ROW><ROW><id>4602906</id><snippet>nbemail</snippet></ROW><ROW><id>4602906</id><snippet>main</snippet></ROW><ROW><id>4603428</id><snippet>vector&lt;char&gt;</snippet></ROW><ROW><id>4603428</id><snippet>std::string</snippet></ROW><ROW><id>4603428</id><snippet>vector&lt;string&gt; exch_symbols;
exch_symbols.push_back("1il");
exch_symbols.push_back("s5");
exch_symbols.push_back("b8");
exch_symbols.push_back("mn");
</snippet></ROW><ROW><id>4603428</id><snippet>void insert_all_exch_pairs(const vector&lt;string&gt;&amp; exch_symbols) 
{
  for (vector&lt;string&gt;::const_iterator symsets_it = exch_symbols.begin(); symsets_it != exch_symbols.end(); ++symsets_it) 
  {
    for (string::const_iterator sym1_it = symsets_it-&gt;begin();  sym1_it != symsets_it-&gt;end(); ++sym1_it) 
    {
      for (string::const_iterator sym2_it = symsets_it-&gt;begin(); sym2_it != symsets_it-&gt;end(); ++sym2_it) 
      {
        if (sym1_it != sym2_it)
          exch_symbol_map.insert(pair&lt;char, char&gt;(*sym1_it, *sym2_it));
      }
    }
  }
}
</snippet></ROW><ROW><id>4603609</id><snippet>shuffle()</snippet></ROW><ROW><id>4603609</id><snippet>shuffle()</snippet></ROW><ROW><id>4603609</id><snippet>a</snippet></ROW><ROW><id>4603609</id><snippet>b</snippet></ROW><ROW><id>4603609</id><snippet>a = numpy.array([[[  0.,   1.,   2.],
                  [  3.,   4.,   5.]],

                 [[  6.,   7.,   8.],
                  [  9.,  10.,  11.]],

                 [[ 12.,  13.,  14.],
                  [ 15.,  16.,  17.]]])

b = numpy.array([[ 0.,  1.],
                 [ 2.,  3.],
                 [ 4.,  5.]])
</snippet></ROW><ROW><id>4603609</id><snippet>c = numpy.c_[a.reshape(len(a), -1), b.reshape(len(b), -1)]
# array([[  0.,   1.,   2.,   3.,   4.,   5.,   0.,   1.],
#        [  6.,   7.,   8.,   9.,  10.,  11.,   2.,   3.],
#        [ 12.,  13.,  14.,  15.,  16.,  17.,   4.,   5.]])
</snippet></ROW><ROW><id>4603609</id><snippet>a</snippet></ROW><ROW><id>4603609</id><snippet>b</snippet></ROW><ROW><id>4603609</id><snippet>a2 = c[:, :a.size//len(a)].reshape(a.shape)
b2 = c[:, a.size//len(a):].reshape(b.shape)
</snippet></ROW><ROW><id>4603609</id><snippet>a2</snippet></ROW><ROW><id>4603609</id><snippet>b2</snippet></ROW><ROW><id>4603609</id><snippet>c</snippet></ROW><ROW><id>4603609</id><snippet>numpy.random.shuffle(c)</snippet></ROW><ROW><id>4603609</id><snippet>a</snippet></ROW><ROW><id>4603609</id><snippet>b</snippet></ROW><ROW><id>4603609</id><snippet>c</snippet></ROW><ROW><id>4603609</id><snippet>a2</snippet></ROW><ROW><id>4603609</id><snippet>b2</snippet></ROW><ROW><id>4603609</id><snippet>a</snippet></ROW><ROW><id>4603609</id><snippet>b</snippet></ROW><ROW><id>4603636</id><snippet>sudo brew install python     ( the system python is not good enough)
</snippet></ROW><ROW><id>4603816</id><snippet>str_b</snippet></ROW><ROW><id>4603816</id><snippet>In [19]: list(str_b)
Out[19]: ['\\', 'u', '5', '5', 'a', 'e', '\\', 'u', '8', 'e', 'c', 'a']
</snippet></ROW><ROW><id>4603816</id><snippet>u</snippet></ROW><ROW><id>4603816</id><snippet>str_a</snippet></ROW><ROW><id>4603816</id><snippet>In [24]: list(str_a)
Out[24]: [u'\u55ae', u'\u8eca']
</snippet></ROW><ROW><id>4603816</id><snippet>str_b</snippet></ROW><ROW><id>4603816</id><snippet>unicode-escape</snippet></ROW><ROW><id>4603816</id><snippet>In [20]: str_b.decode('unicode-escape')
Out[20]: u'\u55ae\u8eca'

In [21]: print(str_b.decode('unicode-escape'))
單車
</snippet></ROW><ROW><id>4604048</id><snippet>print</snippet></ROW><ROW><id>4604048</id><snippet>map()</snippet></ROW><ROW><id>4604048</id><snippet>filter()</snippet></ROW><ROW><id>4604048</id><snippet>range()</snippet></ROW><ROW><id>4604048</id><snippet>xrange()</snippet></ROW><ROW><id>4604048</id><snippet>dict</snippet></ROW><ROW><id>4604048</id><snippet>dict.keys()</snippet></ROW><ROW><id>4604053</id><snippet>/</snippet></ROW><ROW><id>4604652</id><snippet>import sqlite3

# connect to memory-only database for testing
con = sqlite3.connect('')
cur = con.cursor()

# create the table
cur.execute('''
CREATE TABLE CorpWalletJournal (
    date INT, refID INT, refTypeID INT, ownerName1 TEXT, 
    ownerID1 INT, ownerName2 TEXT, ownerID2 INT, argName1 TEXT, 
    argID1 ID, amount INT, balance INT, reason TEXT, accountKey INT, 
    UNIQUE (ownerID1, ownerID2, accountKey, argID1)
);
''')
con.commit()

insert_sql = '''INSERT INTO CorpWalletJournal 
(date, refID, refTypeID, ownerName1, ownerID1, ownerName2, ownerID2, 
argName1, argID1, amount, balance, reason, accountKey)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''

## create 5 rows changing only argID1 - it works:
for argid in xrange(5): 
    cur.execute(insert_sql, (1, 1, 1, 'a', 1, 'a', 1, 'a', argid, 1, 1, 'a', 1))
con.commit()

# now try to insert a row that is already there:
cur.execute(insert_sql,  (1, 1, 1, 'a', 1, 'a', 1, 'a', 0, 1, 1, 'a', 1))
</snippet></ROW><ROW><id>4604652</id><snippet>Traceback (most recent call last):
  File "teststdio.py", line 41, in &lt;module&gt;
    cur.execute(insert_sql,  (1, 1, 1, 'a', 1, 'a', 1, 'a', 0, 1, 1, 'a', 1))
sqlite3.IntegrityError: columns ownerID1, ownerID2, accountKey, argID1 
    are not unique
</snippet></ROW><ROW><id>4604787</id><snippet>\n</snippet></ROW><ROW><id>4604787</id><snippet>'''
Some string
with 
enters.
'''
</snippet></ROW><ROW><id>4604826</id><snippet>default=None</snippet></ROW><ROW><id>4604826</id><snippet>NULL</snippet></ROW><ROW><id>4605104</id><snippet>from twisted.internet import reactor, protocol

PORT = 9000

class MyServer(protocol.Protocol):
    pass

class MyServerFactory(protocol.Factory):
    protocol = MyServer

factory = MyServerFactory()
reactor.listenTCP(PORT, factory)
reactor.run()
</snippet></ROW><ROW><id>4605104</id><snippet>from twisted.internet import reactor, protocol

HOST = 'localhost'
PORT = 9000

class MyClient(protocol.Protocol):
    def connectionMade(self):
        print "connected!"

class MyClientFactory(protocol.ClientFactory):
    protocol = MyClient

factory = MyClientFactory()
reactor.connectTCP(HOST, PORT, factory)

reactor.run()
</snippet></ROW><ROW><id>4605184</id><snippet>INSERT INTO PROGRAMME ( GENREID, PROGTITLE, YR, DIRECTOR, PERFORMERS, FILM, WIDESCREEN, BNW, CERTIFICATE, DESCRIPTION)
SELECT G.GENREID, T.PROGTITLE, T.YR, T.DIRECTOR, T.PERFORMERS, T.FILM, T.WIDESCREEN, T.BNW, T.CERTIFICATE, T.DESCRIPTION
FROM TVTEMPTABLE T,GENRE G
WHERE G.GENRENAME = T.GENRE
AND T.PROGTITLE NOT IN ( SELECT DISTINCT P.PROGTITLE FROM PROGRAMME P) 
</snippet></ROW><ROW><id>4605184</id><snippet>NOT EXISTS</snippet></ROW><ROW><id>4605184</id><snippet>NOT IN</snippet></ROW><ROW><id>4605435</id><snippet>/_ah/</snippet></ROW><ROW><id>4605435</id><snippet>/_ah/warmup</snippet></ROW><ROW><id>4606474</id><snippet>&gt;&gt;&gt; float('fish')
ValueError:...
</snippet></ROW><ROW><id>4606480</id><snippet>import ctypes, win32gui
def getSystemPalette():
    hwnd = win32gui.GetDesktopWindow()

    hwndDC = win32gui.GetWindowDC(hwnd)

    buff = ctypes.c_buffer("0"*(256*4)) #R, G, B, and flags
    ctypes.windll.gdi32.GetSystemPaletteEntries(hwndDC, 0, 256, buff)

    win32gui.ReleaseDC(hwnd, hwndDC)

    #ignore every 4th entry which is the flags
    res = [ord(x) for i,x in enumerate(buff) if i%4 != 3]
    return res
</snippet></ROW><ROW><id>4606485</id><snippet>import ctypes, win32gui
def getPalette(hwnd):
    #hwnd = win32gui.GetDesktopWindow() #if you want desktop window palette?

    hwndDC = win32gui.GetWindowDC(hwnd)

    buff = ctypes.c_buffer("0"*(256*4)) #R, G, B, and flags
    ctypes.windll.gdi32.GetSystemPaletteEntries(hwndDC, 0, 256, buff)

    win32gui.ReleaseDC(hwnd, hwndDC)

    #ignore every 4th entry which is the flags
    res = [ord(x) for i,x in enumerate(buff) if i%4 != 3]
    return res
</snippet></ROW><ROW><id>4606504</id><snippet>def bsearch(s, first, last): 
    if (last-first) &lt; 2: 
        if cmp(s[first]) == 0: 
            return first 
    else:
        return last
</snippet></ROW><ROW><id>4606504</id><snippet>def bsearch(s, first, last): 
    if (last-first) &lt; 2: 
        if cmp(s[first]) == 0: 
            return first 
        else:
            return last
</snippet></ROW><ROW><id>4606504</id><snippet>    if cmp(s[mid]) == -1:
</snippet></ROW><ROW><id>4606504</id><snippet>    if cmp(s[mid]) == 1:
</snippet></ROW><ROW><id>4606504</id><snippet>(last - first) &lt; 2</snippet></ROW><ROW><id>4606504</id><snippet>bsearch</snippet></ROW><ROW><id>4606504</id><snippet>last</snippet></ROW><ROW><id>4606504</id><snippet>            floor = med
</snippet></ROW><ROW><id>4606504</id><snippet>            floor = med + 1
</snippet></ROW><ROW><id>4606504</id><snippet>cmp</snippet></ROW><ROW><id>4606504</id><snippet>cmpGuess</snippet></ROW><ROW><id>4606629</id><snippet>def convert(value):
   if value is None:
      return 0 # or 1, or whatever
   else:
      return int(value)
</snippet></ROW><ROW><id>4606641</id><snippet>static</snippet></ROW><ROW><id>4606641</id><snippet>def append_and_return_static_list(item, items=[]):
    items.append(item)
    return items

append_and_return_static_list(0)
append_and_return_static_list(1)
print append_and_return_static_list(2) #=&gt; [0,1,2]
</snippet></ROW><ROW><id>4606641</id><snippet>_items = []
def append_and_return_static_list(item):
    _items.append(item)
    return _items

append_and_return_static_list(0)
append_and_return_static_list(1)
print append_and_return_static_list(2) #=&gt; [0,1,2]
</snippet></ROW><ROW><id>4606646</id><snippet>try/except</snippet></ROW><ROW><id>4606646</id><snippet>import socket

try:
    m = imaplib.IMAP4("some host")
except socket.error, e:
    print "Error opening IMAP connection: ", e
</snippet></ROW><ROW><id>4606966</id><snippet>break</snippet></ROW><ROW><id>4606966</id><snippet>while</snippet></ROW><ROW><id>4606966</id><snippet>result = None</snippet></ROW><ROW><id>4606966</id><snippet>is None</snippet></ROW><ROW><id>4606966</id><snippet>continue</snippet></ROW><ROW><id>4606966</id><snippet>pass</snippet></ROW><ROW><id>4606966</id><snippet>break</snippet></ROW><ROW><id>4606966</id><snippet>except:</snippet></ROW><ROW><id>4606966</id><snippet>result = None
while result is None:
    try:
        # connect
        result = get_data(...)
    except:
         pass
# other code that uses result but is not involved in getting it
</snippet></ROW><ROW><id>4606983</id><snippet>connection.creation.destroy_test_db(old_name, verbosity)</snippet></ROW><ROW><id>4606983</id><snippet>connection.creation.create_test_db(..)</snippet></ROW><ROW><id>4606983</id><snippet>try:
    # Create the database the first time.
    connection.creation.create_test_db(verbosity, autoclobber=not interactive) 
except ..: # Look at the error that this will raise when create a database that already exist
    # Test database already created.
    pass 
</snippet></ROW><ROW><id>4607005</id><snippet>class TaskFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, parent = None, id = -1, title="ScrolledPanel", size = (500, 600))
        MainPanel = wx.Panel(self)
        NewPanel = scrolled.ScrolledPanel(parent = MainPanel, pos = (100, 100), size = (300, 200), id = -1, style = wx.TAB_TRAVERSAL|wx.SUNKEN_BORDER, name="panel" )

        PanelSizer  = wx.BoxSizer()
        InsidePanel = wx.Panel(NewPanel)
        self.Button = wx.Button(parent=InsidePanel, id = -1, label="Log", pos=(500, 30), size=(50, 20))
        PanelSizer.Add(InsidePanel, proportion=1)

        NewPanel.SetSizer(PanelSizer)
        NewPanel.SetupScrolling()
</snippet></ROW><ROW><id>4607296</id><snippet>def call_bk_fn(self, event, shell):
    print('hello world')
</snippet></ROW><ROW><id>4607739</id><snippet>class Complex(object):
    def __init__(self, realpart=0, imagpart=0):
        self.realpart = realpart
        self.imagpart = imagpart
</snippet></ROW><ROW><id>4607739</id><snippet>Complex.some_attribute
</snippet></ROW><ROW><id>4608010</id><snippet>diff -r 142e08f1b589 PIL/ImageShow.py
--- a/PIL/ImageShow.py  Sun Aug 01 22:00:26 2010 +0200
+++ b/PIL/ImageShow.py  Wed Jan 05 10:46:47 2011 -0800
@@ -97,7 +97,7 @@
     class WindowsViewer(Viewer):
         format = "BMP"
         def get_command(self, file, **options):
-            return "start /wait %s &amp;&amp; del /f %s" % (file, file)
+            return "start /wait %s &amp;&amp; ping -n 2 127.0.0.1 &gt;NUL &amp;&amp; del /f %s" % (file, file)

     register(WindowsViewer)
</snippet></ROW><ROW><id>4608303</id><snippet>mmap</snippet></ROW><ROW><id>4608303</id><snippet>import pygeoip
gi = pygeoip.GeoIP('GeoIP.dat', flags=pygeoip.const.MEMORY_CACHE)
Location = gi.country_code_by_addr(self.request.remote_addr)
</snippet></ROW><ROW><id>4608303</id><snippet>MEMORY_CACHE</snippet></ROW><ROW><id>4608303</id><snippet>STANDARD</snippet></ROW><ROW><id>4608444</id><snippet>class Controller:
    def __init__(self):
        self.model = Model()
        self.view = View()
    def main(self):
        self.model.filename()
        self.view.tcpdump()
</snippet></ROW><ROW><id>4608444</id><snippet>class Controller:
    def __init__(self):
        self.view = View()
    def main(self):
        self.view.filename()
        self.view.tcpdump()
</snippet></ROW><ROW><id>4608485</id><snippet>from BeautifulSoup import BeautifulSoup

def removeTags(html, *tags):
    soup = BeautifulSoup(html)
    for tag in tags:
        for tag in soup.findAll(tag):
            tag.replaceWith("")

    return soup


testhtml = '''
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Page title&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;text here&lt;p id="firstpara" align="center"&gt;This is paragraph &lt;b&gt;one&lt;/b&gt;.&lt;/p&gt;
        &lt;p id="secondpara" align="blah"&gt;This is paragraph &lt;b&gt;two&lt;/b&gt;.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;'''

print removeTags(testhtml, 'b', 'p')
</snippet></ROW><ROW><id>4608693</id><snippet>x = ('GCI/PyFiles/prova3.py', 'GCI/', \
     'GCI/PyFiles/', 'GCI/Screenshots/', \
     'GCI/prova2.py', 'prova.py')

structure = {}
for fn in x:
    path = fn.split('/')

    tmpd = structure
    for p in path[:-1]:
        try:
            tmpd = tmpd[p]
        except KeyError:
            tmpd = tmpd[p] = {}

    tmpd[path[-1]] = None
</snippet></ROW><ROW><id>4608693</id><snippet>structure</snippet></ROW><ROW><id>4608693</id><snippet>None</snippet></ROW><ROW><id>4608693</id><snippet>class Node(object):
    def __init__(self):
        self.dirs = {}
        self.files = []
</snippet></ROW><ROW><id>4608693</id><snippet>[sp for _,sp in sorted(
         (len(splitpath),splitpath) for splitpath in
            (path.split('/') for path in x)
         )
    ]
</snippet></ROW><ROW><id>4608693</id><snippet>[['prova.py'], ['GCI', ''], ['GCI', 'prova2.py'], 
 ['GCI', 'PyFiles', ''], ['GCI', 'PyFiles', 'prova3.py'], 
 ['GCI', 'Screenshots', '']]
</snippet></ROW><ROW><id>4609011</id><snippet>ld -o libmy.so B.o A.o</snippet></ROW><ROW><id>4609011</id><snippet>objdump -x _foo.so</snippet></ROW><ROW><id>4609011</id><snippet>g++ -shared -L. -lpython2.6 -Wl,-soname,_foo.so foo_wrap.o -lfoo  -o _foo.so</snippet></ROW><ROW><id>4609192</id><snippet>cwt = commonWordTweets()   # Replace with code to get the item from your datastore
d = {"commonWords":cwt.commonWords, "venue": cwt.venue.name}
jsonout = simplejson.dumps(d)
</snippet></ROW><ROW><id>4609398</id><snippet>start</snippet></ROW><ROW><id>4609398</id><snippet>start</snippet></ROW><ROW><id>4609398</id><snippet>next</snippet></ROW><ROW><id>4609533</id><snippet>register_models</snippet></ROW><ROW><id>4609565</id><snippet>index</snippet></ROW><ROW><id>4609565</id><snippet>&gt;&gt;&gt; text_widget.index('end')  # returns line.column 
'3.0'

&gt;&gt;&gt; int(text_widget.index('end').split('.')[0]) - 1  # returns line count
2 
</snippet></ROW><ROW><id>4609565</id><snippet>&gt;&gt;&gt; int(text_widget.index('end-1c').split('.')[0])  # returns line count
2 
</snippet></ROW><ROW><id>4609835</id><snippet>except Exception as e:
    raise
</snippet></ROW><ROW><id>4609835</id><snippet>except IOError as e:
    if e.args[1].args[0].errno != errno.ECONNRESET:
       raise
</snippet></ROW><ROW><id>4610149</id><snippet>&gt;&gt;&gt; a = ['ONE', 'TWO', 'SEVEN', 'TWELVE', 'ONE', 'SEVEN']
&gt;&gt;&gt; [a[x+1] if x+1 &lt; len(a) else None for x in range(len(a)) if a[x] == 'ONE']
['TWO', 'SEVEN']
</snippet></ROW><ROW><id>4610267</id><snippet>xml = lxml.etree.tostring(e, with_tail=False)</snippet></ROW><ROW><id>4610267</id><snippet>from lxml.html import fragment_fromstring
from lxml.etree import tostring
frag = fragment_fromstring('&lt;p&gt;This stuff is &lt;em&gt;really&lt;/em&gt; great!')
em = frag.cssselect('em').pop(0)
print tostring(em, with_tail=False)
</snippet></ROW><ROW><id>4610267</id><snippet>with_tail</snippet></ROW><ROW><id>4610271</id><snippet>from models import *

class SlotInline(admin.StackedInline):
    model = Slot

class MatchupAdmin(admin.ModelAdmin):
    model = Matchup
    inlines = [SlotInline]

admin.site.register(Matchup, MatchupAdmin)
</snippet></ROW><ROW><id>4610274</id><snippet>class Demo:
    a = ['to update']
    b = a

&gt;&gt;&gt; demo = Demo()
&gt;&gt;&gt; demo.a[0]
'to update'
&gt;&gt;&gt; demo.b[0]
'to update'
&gt;&gt;&gt; demo.b[0] = 'updated'
&gt;&gt;&gt; demo.b[0]
'updated'
&gt;&gt;&gt; demo.a[0]
'updated'
</snippet></ROW><ROW><id>4610274</id><snippet>class Demo(object):
    def __init__(self):
        self._shared = None

    @property
    def a(self):
        return self._shared

    @a.setter
    def a(self, value):
        self._shared = value

    @property
    def b(self):
        return self._shared

    @b.setter
    def b(self, value):
        self._shared = value
</snippet></ROW><ROW><id>4610392</id><snippet>(Person, Date, Comment)</snippet></ROW><ROW><id>4610508</id><snippet>   def OnDrawClipboard (self, msg, wParam, lParam):
    if self.first:
       self.first = False
    else:
        #print "changed"
        self.word_search()
        #self.word_search()

    if self.nextWnd:
       # pass the message to the next window in chain
       win32api.SendMessage(self.nextWnd, msg, wParam, lParam)
</snippet></ROW><ROW><id>4610508</id><snippet>   def OnDrawClipboard (self, msg, wParam, lParam):
    if self.first:
       self.first = False
    else:
        #print "changed"
        self.after_idle(self.word_search)
        #self.word_search()

    if self.nextWnd:
       # pass the message to the next window in chain
       win32api.SendMessage(self.nextWnd, msg, wParam, lParam)
</snippet></ROW><ROW><id>4610776</id><snippet># find point around :
latitude = 46.2037010192871
longitude = 5.20353984832764
query= "SELECT ID, NOM, LAT, LON, 3956 * 2 * ASIN(SQRT(POWER(SIN((%s - LAT) * 0.0174532925 / 2), 2) + COS(%s * 0.0174532925) * COS(LAT * 0.0174532925) * POWER(SIN((%s - LON) * 0.0174532925 / 2), 2) )) as distance from POI  having distance &lt; 50 ORDER BY distance ASC " % ( latitude, latitude, longitude)
</snippet></ROW><ROW><id>4610776</id><snippet>from django.db import connection
cursor = connection.cursor()
cursor.execute( query )
rows = cursor.fetchall()
</snippet></ROW><ROW><id>4610876</id><snippet>import sqlite3

class DatabaseManager(object):
    def __init__(self, db):
        self.conn = sqlite3.connect(db)
        self.conn.execute('pragma foreign_keys = on')
        self.conn.commit()
        self.cur = self.conn.cursor()

    def query(self, arg):
        self.cur.execute(arg)
        self.conn.commit()
        return self.cur

    def __del__(self):
        self.conn.close()
</snippet></ROW><ROW><id>4610876</id><snippet>dbmgr = DatabaseManager("testdb.db")
for row in dbmgr.query("select * from users")
    print row
</snippet></ROW><ROW><id>4611170</id><snippet>import croniter
import datetime

now = datetime.datetime.now()
sched = '1 15 1,15 * *'    # at 3:01pm on the 1st and 15th of every month
cron = croniter.croniter(sched, now)

for i in range(4):
    nextdate = cron.get_next(datetime.datetime)
    print nextdate
</snippet></ROW><ROW><id>4611170</id><snippet>2011-01-15 15:01:00
2011-02-01 15:01:00
2011-02-15 15:01:00
2011-03-01 15:01:00
</snippet></ROW><ROW><id>4611220</id><snippet>def find_using_like( some_partial_key, dictionary ):
    for  k in dictionary:
        if some_partial_key in key:
            return dictionary[k]
</snippet></ROW><ROW><id>4611229</id><snippet>@x,y</snippet></ROW><ROW><id>4611229</id><snippet>@0,0</snippet></ROW><ROW><id>4611229</id><snippet>winfo_width</snippet></ROW><ROW><id>4611229</id><snippet>winfo height</snippet></ROW><ROW><id>4611229</id><snippet>yview</snippet></ROW><ROW><id>4611310</id><snippet>itertools.compress(b,a)
</snippet></ROW><ROW><id>4611310</id><snippet>&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; a=[True, False, True]
&gt;&gt;&gt; b=[1,2,3]
&gt;&gt;&gt; list(compress(b,a))
[1, 3]
</snippet></ROW><ROW><id>4611310</id><snippet>&gt;&gt;&gt; [j for i,j in zip(a,b) if i]
[1, 3]
</snippet></ROW><ROW><id>4611310</id><snippet>&gt;&gt;&gt; primes = [False, False, True, True, False, True]
&gt;&gt;&gt; list(compress(*zip(*enumerate(primes))))
[2, 3, 5]
</snippet></ROW><ROW><id>4611394</id><snippet>eval</snippet></ROW><ROW><id>4611394</id><snippet>dlopen</snippet></ROW><ROW><id>4611437</id><snippet>ancestor()</snippet></ROW><ROW><id>4611437</id><snippet>ANCESTOR IS</snippet></ROW><ROW><id>4611483</id><snippet>perl -E '$_ = 'Mastering Regular Expressions'; /(\p{L}*)(?{ say qq![$^N]! })(?!)/g;'
</snippet></ROW><ROW><id>4611577</id><snippet>regex = '(.*):( *)(.*)\n'
</snippet></ROW><ROW><id>4611580</id><snippet>from django.template import Context, Template
t = Template("My name is {{ my_name }}.")
c = Context({"my_name": "Adrian"})
output = t.render(c)
</snippet></ROW><ROW><id>4611639</id><snippet>import gdata.docs.service
import gdata.docs.data

client = gdata.docs.service.DocsService()
client.ClientLogin("me@gmail.com", 'pass', 'test')

ms = gdata.data.MediaSource(file_path="/home/jake/Desktop/test.txt",
                            content_type=gdata.docs.service.SUPPORTED_FILETYPES['TXT'])
entry = client.Upload(ms, "Test File")
</snippet></ROW><ROW><id>4611649</id><snippet>def x(*args, **kwargs):
    a = kwargs.get('a', False)
    print args, a

x(1,2,3,a=42)
</snippet></ROW><ROW><id>4611709</id><snippet>run_in_transaction</snippet></ROW><ROW><id>4611838</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; variable1 = lambda: random.randint(13, 19)
&gt;&gt;&gt; print(variable1())
18
&gt;&gt;&gt; print(variable1())
15
&gt;&gt;&gt; print(variable1())
17
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4611850</id><snippet>use_privatekey_file()</snippet></ROW><ROW><id>4611850</id><snippet>use_certificate_file()</snippet></ROW><ROW><id>4611850</id><snippet>SubjectName</snippet></ROW><ROW><id>4612189</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; h = hashlib.sha256('something to hash')
&gt;&gt;&gt; h.hexdigest()
'a3899c4070fc75880fa445b6dfa44207cbaf924a450ce7175cd8500e597d3ec1'
&gt;&gt;&gt; n = int(h.hexdigest(),base=16)
&gt;&gt;&gt; print n
73970130776712578303406724846815845410916448611708558169000368019946742824641
</snippet></ROW><ROW><id>4613045</id><snippet>from datetime import datetime, timedelta

request.session['x'] = dict(dt=datetime.now(), value='something')

MAX_AGE = timedelta(seconds=240)

if ('x' in request.session and datetime.now() - request.session['x']['dt'] &gt; MAX_AGE):
    del request.session['x']
</snippet></ROW><ROW><id>4613300</id><snippet>StockPrices</snippet></ROW><ROW><id>4613300</id><snippet>ticker_symbol</snippet></ROW><ROW><id>4613300</id><snippet>time</snippet></ROW><ROW><id>4613300</id><snippet>price</snippet></ROW><ROW><id>4613300</id><snippet>ticker_symbol</snippet></ROW><ROW><id>4613300</id><snippet>SELECT time,price FROM StockPrices WHERE ticker_symbol='GOOG' ORDER BY time DESC</snippet></ROW><ROW><id>4613300</id><snippet>ticker_symbol</snippet></ROW><ROW><id>4613300</id><snippet>time</snippet></ROW><ROW><id>4613761</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; a=['1','2','3']
&gt;&gt;&gt; b=['bc','b']
&gt;&gt;&gt; c=['#']
&gt;&gt;&gt; map("".join, product(a,b,c))
['1bc#', '1b#', '2bc#', '2b#', '3bc#', '3b#']
</snippet></ROW><ROW><id>4613761</id><snippet>&gt;&gt;&gt; list_of_things = [a,b,c]
&gt;&gt;&gt; map("".join, product(*list_of_things))
</snippet></ROW><ROW><id>4614070</id><snippet>result</snippet></ROW><ROW><id>4614070</id><snippet>for row in result:
    c.writerow(row)
</snippet></ROW><ROW><id>4614277</id><snippet>reader.next()</snippet></ROW><ROW><id>4614277</id><snippet>for line in reader:
  print line
</snippet></ROW><ROW><id>4614277</id><snippet>next</snippet></ROW><ROW><id>4614277</id><snippet>for</snippet></ROW><ROW><id>4614277</id><snippet>reader.next()</snippet></ROW><ROW><id>4614277</id><snippet>for line in reader:
  print line[0]
</snippet></ROW><ROW><id>4614278</id><snippet>msg = "Hello " + ("there" if name is None else ("Neo" if name == "Mr Anderson" else name))
</snippet></ROW><ROW><id>4614285</id><snippet>TVTEMPTABLE</snippet></ROW><ROW><id>4614285</id><snippet>-- All genres (matches your existing genres table)
create table genres_temp as
   select distinct genre
     from tvtemptable;

-- All programmes (matches your existing programme table)
create table programmes_temp as
   select distinct all_the_programme_columns
     from tvtemptable;

-- Contains the many-to-many relationship between genres and programmes
create table programme_genre_temp as 
   select distinct genre, progtitle
     from tvtemptable;
</snippet></ROW><ROW><id>4614285</id><snippet>progtitle</snippet></ROW><ROW><id>4614285</id><snippet>MAX()</snippet></ROW><ROW><id>4614285</id><snippet>SELECT T.PROGTITLE, max(G.GENREID), max(T.YR), max(T.DIRECTOR), etc
  FROM TVTEMPTABLE T
 INNER JOIN GENRE G ON G.GENRENAME=T.GENRE
       LEFT JOIN PROGRAMME P ON P.PROGTITLE=T.PROGTITLE
 WHERE P.PROGTITLE IS NULL
 group by T.PROGTITLE;
</snippet></ROW><ROW><id>4614540</id><snippet>SELECT * FROM "soft drinks" WHERE "drink name" = 'Coke';</snippet></ROW><ROW><id>4614824</id><snippet>Form</snippet></ROW><ROW><id>4614824</id><snippet>errors</snippet></ROW><ROW><id>4614824</id><snippet>{% if form.errors %}
    &lt;p&gt;Your username and password didn't match. Please try again.&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>4614824</id><snippet>has_errors</snippet></ROW><ROW><id>4614824</id><snippet>errors</snippet></ROW><ROW><id>4615026</id><snippet>activate_this = '/path/to/env/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))
</snippet></ROW><ROW><id>4615208</id><snippet>pip install .</snippet></ROW><ROW><id>4615208</id><snippet>python setup.py install</snippet></ROW><ROW><id>4615378</id><snippet>apt_get</snippet></ROW><ROW><id>4615378</id><snippet>easy_install</snippet></ROW><ROW><id>4615378</id><snippet>site-packages</snippet></ROW><ROW><id>4615378</id><snippet>pip</snippet></ROW><ROW><id>4615451</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4615451</id><snippet>import parsedatetime.parsedatetime as pdt
import parsedatetime.parsedatetime_consts as pdc
import datetime
c = pdc.Constants()
p = pdt.Calendar(c)
for text in ('january 6, 2011', '4 days ago', '12 hours ago'):
    date=datetime.datetime(*p.parse(text)[0][:6])
    # print(date.isoformat())
    # 2011-01-06T09:00:18
    # 2011-01-02T09:00:18
    # 2011-01-05T21:00:18
    print(date.strftime('%Y%m%dT%H%M%S'))
    # 20110106T090208
    # 20110102T090208
    # 20110105T210208
</snippet></ROW><ROW><id>4615473</id><snippet>from pyramid.response import Response
from pyramid.view import action

class Page(object):

    def __init__(self, request):
        self.request = request

    def view_page(self):
        matchdict = request.matchdict
        id = matchdict.get('id', None)
        return {'id': id}
</snippet></ROW><ROW><id>4615573</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>4615573</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>4615573</id><snippet>mysite.settings</snippet></ROW><ROW><id>4615797</id><snippet>isinstance(obj, Klass)</snippet></ROW><ROW><id>4615835</id><snippet>Client()</snippet></ROW><ROW><id>4615835</id><snippet>suds.sax.document.Document</snippet></ROW><ROW><id>4615835</id><snippet>from suds.plugin import MessagePlugin
class EnvelopeFixer(MessagePlugin):
    def sending(self, context):
        # context is the envelope text
        context.envelope = context.envelope.upper()
        return context

client = Client(..., plugins=[EnvelopeFixer()])
</snippet></ROW><ROW><id>4616298</id><snippet>__init__</snippet></ROW><ROW><id>4616298</id><snippet>for book_type in BOOK_TYPES:
  setattr(self, 'has_book_type_%s' % book_type, self.has_book_type_(book_type))
</snippet></ROW><ROW><id>4616298</id><snippet>user.get_profile.has_book_type_TA</snippet></ROW><ROW><id>4616691</id><snippet>newthread.daemon = True</snippet></ROW><ROW><id>4616837</id><snippet>&gt;&gt;&gt; from getpass import getpass
&gt;&gt;&gt; getpass()
Password:
'secret'
</snippet></ROW><ROW><id>4617069</id><snippet>with open('a', 'w') as a, open('b', 'w') as b:
    do_something()
</snippet></ROW><ROW><id>4617069</id><snippet>contextlib.nested()</snippet></ROW><ROW><id>4617623</id><snippet>from sqlalchemy.sql import compiler

from psycopg2.extensions import adapt as sqlescape
# or use the appropiate escape function from your db driver

def compile_query(query):
    dialect = query.session.bind.dialect
    statement = query.statement
    comp = compiler.SQLCompiler(dialect, statement)
    comp.compile()
    enc = dialect.encoding
    params = {}
    for k,v in comp.params.iteritems():
        if isinstance(v, unicode):
            v = v.encode(enc)
        params[k] = sqlescape(v)
    return (comp.string.encode(enc) % params).decode(enc)
</snippet></ROW><ROW><id>4617942</id><snippet>import wx

class StaticWrapText(wx.PyControl):
   def __init__(self, parent, id=wx.ID_ANY, label='', pos=wx.DefaultPosition,
                size=wx.DefaultSize, style=wx.NO_BORDER,
                validator=wx.DefaultValidator, name='StaticWrapText'):
      wx.PyControl.__init__(self, parent, id, pos, size, style, validator, name)
      self.statictext = wx.StaticText(self, wx.ID_ANY, label, style=style)
      self.wraplabel = label
      #self.wrap()
   def wrap(self):
      self.Freeze()
      self.statictext.SetLabel(self.wraplabel)
      self.statictext.Wrap(self.GetSize().width)
      self.Thaw()
   def DoGetBestSize(self):
      self.wrap()
      #print self.statictext.GetSize()
      self.SetSize(self.statictext.GetSize())
      return self.GetSize()

class MyForm(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)

        text = "I'm subclasses the statictext because I want it to act exactly like a static text, but correctly wordwrap as needed. I've found several examples of it on the web, but none that worked how I wanted. The wordwrap makes it look much nicer when the user may decide to re-size the window, so I would definitely like to have it be wordwrapped. I know about the wx.lib.wordwrap, but chose to use the built in Wrap function of the statictext control instead. It basically does the same thing from what I understand."
        #txt = wx.StaticText(panel, label=text)
        txt = StaticWrapText(panel, label=text)
        wxbutton = wx.Button(panel, label='Button', size=wx.Size(120,50))
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(txt,      0, wx.EXPAND, 5)
        sizer.Add(wxbutton, 1, wx.EXPAND, 5)
        panel.SetSizer(sizer)

# Run the program
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>4617942</id><snippet>import wx

class StaticWrapText(wx.PyControl):
   def __init__(self, parent, id=wx.ID_ANY, label='', pos=wx.DefaultPosition,
                size=wx.DefaultSize, style=wx.NO_BORDER,
                validator=wx.DefaultValidator, name='StaticWrapText'):
      wx.PyControl.__init__(self, parent, id, pos, size, style, validator, name)
      self.statictext = wx.StaticText(self, wx.ID_ANY, label, style=style)
      self.wraplabel = label
      #self.wrap()
   def wrap(self):
      self.Freeze()
      self.statictext.SetLabel(self.wraplabel)
      self.statictext.Wrap(self.GetSize().width)
      self.Thaw()
   def DoGetBestSize(self):
      self.wrap()
      #print self.statictext.GetSize()
      self.SetSize(self.statictext.GetSize())
      return self.GetSize()

class MyForm(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        self.panel = wx.Panel(self, wx.ID_ANY)

        text = "I'm subclasses the statictext because I want it to act exactly like a static text, but correctly wordwrap as needed. I've found several examples of it on the web, but none that worked how I wanted. The wordwrap makes it look much nicer when the user may decide to re-size the window, so I would definitely like to have it be wordwrapped. I know about the wx.lib.wordwrap, but chose to use the built in Wrap function of the statictext control instead. It basically does the same thing from what I understand."
        txt = StaticWrapText(self.panel, label=text)
        wxbutton = wx.Button(self.panel, label='Button', size=wx.Size(120,50))
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(txt,      0, wx.EXPAND, 5)
        sizer.Add(wxbutton, 1, wx.EXPAND, 5)
        self.panel.SetSizer(sizer)

# Run the program
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm()
    frame.Show()
    #frame.panel.SendSizeEvent()
    frame.panel.GetSizer().Layout()
    app.MainLoop()
</snippet></ROW><ROW><id>4617961</id><snippet>import os
os.environ['PATH'] = ';'.join((os.path.join(
    os.path.abspath(os.path.dirname(__file__)), "bin"),
    os.environ['PATH']))
</snippet></ROW><ROW><id>4618090</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'sv_SE.utf8')
'sv_SE.utf8'
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; 
&gt;&gt;&gt; data = ['January 20 1999', 'March 4 2010', 'June 11 1819']
&gt;&gt;&gt; for item in data:
...     print datetime.datetime.strptime(item, '%B %d %Y')
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "/usr/lib/python2.6/_strptime.py", line 325, in _strptime
    (data_string, format))
ValueError: time data 'January 20 1999' does not match format '%B %d %Y'
</snippet></ROW><ROW><id>4618090</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'sv_SE.utf8')
'sv_SE.utf8'
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; 
&gt;&gt;&gt; data = ['Januari 20 1999', 'Mars 4 2010', 'Juni 11 1819']
&gt;&gt;&gt; for item in data:
...     print datetime.datetime.strptime(item, '%B %d %Y')
... 
1999-01-20 00:00:00
2010-03-04 00:00:00
1819-06-11 00:00:00
</snippet></ROW><ROW><id>4618090</id><snippet>$ locale -a
C
en_AG
en_AU.utf8
en_BW.utf8
en_CA.utf8
en_DK.utf8
en_GB.utf8
en_HK.utf8
en_IE.utf8
en_IN
en_NG
en_NZ.utf8
en_PH.utf8
en_SG.utf8
en_US.utf8
en_ZA.utf8
en_ZW.utf8
POSIX
sv_FI.utf8
sv_SE.utf8
</snippet></ROW><ROW><id>4618095</id><snippet>import sys, os

from zope.interface import implements

from twisted.python.failure import Failure
from twisted.python.log import err
from twisted.internet.error import ConnectionDone
from twisted.internet.defer import Deferred, succeed, setDebugging
from twisted.internet.interfaces import IStreamClientEndpoint
from twisted.internet.protocol import Factory, Protocol

from twisted.conch.ssh.common import NS
from twisted.conch.ssh.channel import SSHChannel
from twisted.conch.ssh.transport import SSHClientTransport
from twisted.conch.ssh.connection import SSHConnection
from twisted.conch.client.default import SSHUserAuthClient
from twisted.conch.client.options import ConchOptions

# setDebugging(True)


class _CommandTransport(SSHClientTransport):
    _secured = False

    def verifyHostKey(self, hostKey, fingerprint):
        return succeed(True)


    def connectionSecure(self):
        self._secured = True
        command = _CommandConnection(
            self.factory.command,
            self.factory.commandProtocolFactory,
            self.factory.commandConnected)
        userauth = SSHUserAuthClient(
            os.environ['USER'], ConchOptions(), command)
        self.requestService(userauth)


    def connectionLost(self, reason):
        if not self._secured:
            self.factory.commandConnected.errback(reason)



class _CommandConnection(SSHConnection):
    def __init__(self, command, protocolFactory, commandConnected):
        SSHConnection.__init__(self)
        self._command = command
        self._protocolFactory = protocolFactory
        self._commandConnected = commandConnected


    def serviceStarted(self):
        channel = _CommandChannel(
            self._command, self._protocolFactory, self._commandConnected)
        self.openChannel(channel)



class _CommandChannel(SSHChannel):
    name = 'session'

    def __init__(self, command, protocolFactory, commandConnected):
        SSHChannel.__init__(self)
        self._command = command
        self._protocolFactory = protocolFactory
        self._commandConnected = commandConnected


    def openFailed(self, reason):
        self._commandConnected.errback(reason)


    def channelOpen(self, ignored):
        self.conn.sendRequest(self, 'exec', NS(self._command))
        self._protocol = self._protocolFactory.buildProtocol(None)
        self._protocol.makeConnection(self)


    def dataReceived(self, bytes):
        self._protocol.dataReceived(bytes)


    def closed(self):
        self._protocol.connectionLost(
            Failure(ConnectionDone("ssh channel closed")))



class SSHCommandClientEndpoint(object):
    implements(IStreamClientEndpoint)

    def __init__(self, command, sshServer):
        self._command = command
        self._sshServer = sshServer


    def connect(self, protocolFactory):
        factory = Factory()
        factory.protocol = _CommandTransport
        factory.command = self._command
        factory.commandProtocolFactory = protocolFactory
        factory.commandConnected = Deferred()

        d = self._sshServer.connect(factory)
        d.addErrback(factory.commandConnected.errback)

        return factory.commandConnected



class StdoutEcho(Protocol):
    def dataReceived(self, bytes):
        sys.stdout.write(bytes)
        sys.stdout.flush()


    def connectionLost(self, reason):
        self.factory.finished.callback(None)



def copyToStdout(endpoint):
    echoFactory = Factory()
    echoFactory.protocol = StdoutEcho
    echoFactory.finished = Deferred()
    d = endpoint.connect(echoFactory)
    d.addErrback(echoFactory.finished.errback)
    return echoFactory.finished



def main():
    from twisted.python.log import startLogging
    from twisted.internet import reactor
    from twisted.internet.endpoints import TCP4ClientEndpoint

    # startLogging(sys.stdout)

    sshServer = TCP4ClientEndpoint(reactor, "localhost", 22)
    commandEndpoint = SSHCommandClientEndpoint("/bin/ls", sshServer)

    d = copyToStdout(commandEndpoint)
    d.addErrback(err, "ssh command / copy to stdout failed")
    d.addCallback(lambda ignored: reactor.stop())
    reactor.run()



if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4618095</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>4618095</id><snippet>_CommandTransport.verifyHostKey</snippet></ROW><ROW><id>4618095</id><snippet>twisted/conch/client/default.py</snippet></ROW><ROW><id>4618095</id><snippet>$USER</snippet></ROW><ROW><id>4618095</id><snippet>SSHUserAuthClient</snippet></ROW><ROW><id>4618095</id><snippet>getPassword</snippet></ROW><ROW><id>4618095</id><snippet>_CommandTransport</snippet></ROW><ROW><id>4618095</id><snippet>_CommandConnection</snippet></ROW><ROW><id>4618095</id><snippet>_CommandChannel</snippet></ROW><ROW><id>4618095</id><snippet>_CommandChannel</snippet></ROW><ROW><id>4618095</id><snippet>StdoutEcho</snippet></ROW><ROW><id>4618227</id><snippet>mimetypes</snippet></ROW><ROW><id>4618227</id><snippet>extra_mimetypes</snippet></ROW><ROW><id>4618227</id><snippet>import extra_mimetypes</snippet></ROW><ROW><id>4618227</id><snippet>from mimetypes import *</snippet></ROW><ROW><id>4618227</id><snippet>from mimetypes import add_type</snippet></ROW><ROW><id>4618227</id><snippet>add_type()</snippet></ROW><ROW><id>4618363</id><snippet>import random
with open('the_file','r') as source:
    data = [ (random.random(), line) for line in source ]
data.sort()
with open('another_file','w') as target:
    for _, line in data:
        target.write( line )
</snippet></ROW><ROW><id>4618428</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4618453</id><snippet>import re</snippet></ROW><ROW><id>4618661</id><snippet>pyparsing</snippet></ROW><ROW><id>4618661</id><snippet>pip install -U pyparsing
</snippet></ROW><ROW><id>4618891</id><snippet>import win32ui, win32con as w

def MoveToBack(window_name):
    flags = w.SWP_NOSIZE | w.SWP_NOMOVE | w.SWP_NOACTIVATE | w.SWP_SHOWWINDOW | w.SWP_ASYNCWINDOWPOS 
    hwnd = win32ui.FindWindow(None, window_name)
    hwnd.SetWindowPos(w.HWND_BOTTOM, (0,0,0,0), flags)
</snippet></ROW><ROW><id>4618952</id><snippet>glDrawArrays(GL_POINTS, 0, 1)
</snippet></ROW><ROW><id>4618952</id><snippet>glDrawArrays(GL_POINTS, 0, 3)
</snippet></ROW><ROW><id>4618952</id><snippet>  vertexPositions = [0.0, 0.0, 0.0, 1.0,
                     0.25, 0.0, 0.0, 1.0,
                     1.75, 1.75, 0.0, 1.0]
</snippet></ROW><ROW><id>4618952</id><snippet>  vertexPositions = [0.0, 0.0, 0.0,
                     0.25, 0.0, 0.0,
                     1.75, 1.75, 0.0]
</snippet></ROW><ROW><id>4618952</id><snippet>glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0)
</snippet></ROW><ROW><id>4618952</id><snippet>glBufferData(GL_ARRAY_BUFFER, len(vertexPositionsGl)*4, vertexPositionsGl, GL_STATIC_DRAW)
</snippet></ROW><ROW><id>4618954</id><snippet>In [32]: repr(myarr[1])
Out[32]: '6.6499999999999995'

In [33]: repr(6.65)
Out[33]: '6.6500000000000004'
</snippet></ROW><ROW><id>4618954</id><snippet>np.arange</snippet></ROW><ROW><id>4618954</id><snippet>myarr[1]</snippet></ROW><ROW><id>4618954</id><snippet>6.65</snippet></ROW><ROW><id>4618954</id><snippet>def near(a,b,rtol=1e-5,atol=1e-8):
    try:
        return np.abs(a-b)&lt;(atol+rtol*np.abs(b))
    except TypeError:
        return False

myarr = np.arange(6.6,10.25,0.05)
for item in [6.6,6.65,6.7,6.8,6.9,6.95,7.95,8.0,8.1,8.15,6.2,6.25,6.35]:
    print (np.where(near(myarr,item)))

# (array([0]),)
# (array([1]),)
# (array([2]),)
# (array([4]),)
# (array([6]),)
# (array([7]),)
# (array([27]),)
# (array([28]),)
# (array([30]),)
# (array([31]),)
# (array([], dtype=int32),)
# (array([], dtype=int32),)
# (array([], dtype=int32),)
</snippet></ROW><ROW><id>4619047</id><snippet>class App(object):

    def __init__(self):
        self.c = Canvas(root, ...)
        self.stop = StopWatch(self.infobar, self.c)

class StopWatch(object):

    def __init__(self, infobar, canvas):
        self.canvas = canvas

    def draw_line_on_canvas(self):
        self.canvas.create_line(...)
</snippet></ROW><ROW><id>4619503</id><snippet>mysqldump</snippet></ROW><ROW><id>4619680</id><snippet>ld</snippet></ROW><ROW><id>4619680</id><snippet>-L/my/directory</snippet></ROW><ROW><id>4619680</id><snippet>-lpython26</snippet></ROW><ROW><id>4619680</id><snippet>Python.h</snippet></ROW><ROW><id>4619680</id><snippet>-I/my/directory/</snippet></ROW><ROW><id>4619680</id><snippet>main</snippet></ROW><ROW><id>4619680</id><snippet>int main(int argc, char *argv[]) {
    PyObject *t;
    t = PyTuple_New(3);
    PyTuple_SetItem(t, 0, PyInt_FromLong(1L));
    PyTuple_SetItem(t, 1, PyInt_FromLong(2L));
    PyTuple_SetItem(t, 2, PyString_FromString("three"));

    return 0;
}
</snippet></ROW><ROW><id>4619680</id><snippet>PyObject *t;</snippet></ROW><ROW><id>4619739</id><snippet>my_exit = $?</snippet></ROW><ROW><id>4619739</id><snippet>$my_exit</snippet></ROW><ROW><id>4619739</id><snippet>$?</snippet></ROW><ROW><id>4620197</id><snippet>",".join(value)</snippet></ROW><ROW><id>4620197</id><snippet>value</snippet></ROW><ROW><id>4620197</id><snippet>printCSV</snippet></ROW><ROW><id>4620197</id><snippet>values = []

for i in range(0,5):
    row = ('A', 0, stringval, intval)
    values.append(row)
</snippet></ROW><ROW><id>4620244</id><snippet>Traceback (most recent call last):
  File "boot_com_servers.py", line 37, in &lt;module&gt;
pywintypes.error: (126, 'GetModuleFileName', 'The specified module could not be found.')
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'DllRegisterServer' is not defined
</snippet></ROW><ROW><id>4620346</id><snippet>xmppClient.send(xmpp.Message(operator, msg, typ='chat'))
</snippet></ROW><ROW><id>4620346</id><snippet>type</snippet></ROW><ROW><id>4620514</id><snippet>import zlib

crc_table = None

def make_crc_table():
  global crc_table
  crc_table = [0] * 256
  for n in xrange(256):
    c = n
    for k in xrange(8):
        if c &amp; 1:
            c = 0xedb88320L ^ (c &gt;&gt; 1)
        else: 
            c = c &gt;&gt; 1
    crc_table[n] = c

make_crc_table()    

"""
/* Update a running CRC with the bytes buf[0..len-1]--the CRC
should be initialized to all 1's, and the transmitted value
is the 1's complement of the final running CRC (see the
crc() routine below)). */
"""
def update_crc(crc, buf):
  c = crc
  for byte in buf:
    c = crc_table[int((c ^ ord(byte)) &amp; 0xff)] ^ (c &gt;&gt; 8)
  return c

# /* Return the CRC of the bytes buf[0..len-1]. */
def crc(buf):
  return update_crc(0xffffffffL, buf) ^ 0xffffffffL

if __name__ == "__main__":
    tests = [
        "",
        "\x00",
        "\x01",
        "Twas brillig and the slithy toves did gyre and gimble in the wabe",
        ]

    for test in tests:
        model = crc(test) &amp; 0xFFFFFFFFL
        zlib_result = zlib.crc32(test) &amp; 0xFFFFFFFFL
        print (model, zlib_result, model == zlib_result)
</snippet></ROW><ROW><id>4620514</id><snippet>(0L, 0L, True)
(3523407757L, 3523407757L, True)
(2768625435L, 2768625435L, True)
(4186783197L, 4186783197L, True)
</snippet></ROW><ROW><id>4620598</id><snippet>attrs</snippet></ROW><ROW><id>4620598</id><snippet>widget</snippet></ROW><ROW><id>4620598</id><snippet>address = forms.TextField(widget=forms.TextInput(attrs={'placeholder': 'username'}))
</snippet></ROW><ROW><id>4620798</id><snippet>vxd.auth</snippet></ROW><ROW><id>4620798</id><snippet>vxd.myauth</snippet></ROW><ROW><id>4620798</id><snippet>auth_user</snippet></ROW><ROW><id>4620897</id><snippet>all={
    1:{ ('a',123,145):20, ('a',155,170):12, ('b',234,345): 34},
    2:{ ('a',121,135):10, ('a',155,175):28, ('b',230,345): 16},
    3:{ ('a',130,140):20, ('a',150,170):10, ('b',234,345): 30}
}

from collections import defaultdict
summer = defaultdict(int)
mini, maxi = 0,0
for d in all.values():
    for (name, start, stop), value in d.iteritems(): 
        # im completely ignoring the `name` here, not sure if that's what you want
        # else just separate the data before doing this ...
        if mini == 0:
            mini = start
        mini, maxi = min(mini, start), max(maxi, stop)
        for i in range(start, stop+1):
            summer[i]+=value

# now we have the values at each point, very redundant but very fast so  far
print summer

# now we can find the intervals:
def get_intervals(points, start, stop):
    cstart = start
    for i in range(start, stop+1):
        if points[cstart] != points[i]: # did the value change ?
            yield cstart, i-1, points[cstart]
            cstart = i

    if cstart != i:
        yield cstart, i, points[cstart]


print list(get_intervals(summer, mini, maxi))
</snippet></ROW><ROW><id>4620897</id><snippet>[(121, 122, 10), (123, 129, 30), (130, 135, 50), (136, 140, 40), (141, 145, 20), (146, 149, 0), (150, 154, 10), (155, 170, 50), (171, 175, 28)]
</snippet></ROW><ROW><id>4620897</id><snippet>from collections import defaultdict
from heapq import heappush, heappop

class Summer(object):
    def __init__(self):
        # its a priority queue, kind of like a sorted list
        self.hq = []

    def additem(self, start, stop, value):
        # at `start` add it as a positive value
        heappush(self.hq, (start, value))
        # at `stop` subtract that value again
        heappush(self.hq, (stop, -value))

    def intervals(self):
        hq = self.hq
        start, val = heappop(hq)
        while hq:
            point, value = heappop(hq)
            yield start, point, val
            # just maintain the current value and where the interval started
            val += value
            start = point
        assert val == 0

summers = defaultdict(Summer)
for d in all.values():
    for (name, start, stop), value in d.iteritems():
        summers[name].additem(start, stop, value)

for name,s in summers.iteritems():
    print name, list(s.intervals())
</snippet></ROW><ROW><id>4620899</id><snippet>f= Relationships.objects.filter( from_user=some_user, is_friend=True )
</snippet></ROW><ROW><id>4621239</id><snippet>proc_open</snippet></ROW><ROW><id>4621239</id><snippet>popen</snippet></ROW><ROW><id>4621239</id><snippet>system</snippet></ROW><ROW><id>4621239</id><snippet>exec</snippet></ROW><ROW><id>4621239</id><snippet>&lt;?php
$descriptorspec = array(
   0 =&gt; array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 =&gt; array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 =&gt; array("file", "./error-output.txt", "a") // stderr is a file to write to
);
$process = proc_open('ruby ./test.rb', $descriptorspec, $pipes);

if (is_resource($process)) {
    // $pipes now looks like this:
    // 0 =&gt; writeable handle connected to child stdin
    // 1 =&gt; readable handle connected to child stdout
    // Any error output will be appended to /tmp/error-output.txt

    fwrite($pipes[0], 'hello world');
    fclose($pipes[0]);

    echo stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // It is important that you close any pipes before calling
    // proc_close in order to avoid a deadlock
    $return_value = proc_close($process);

    echo "command returned $return_value\n";
}
?&gt;
</snippet></ROW><ROW><id>4621239</id><snippet>#!/usr/bin/env ruby

puts "&lt;b&gt;#{ ARGF.read }&lt;/b&gt;"
</snippet></ROW><ROW><id>4621239</id><snippet>Greg:Desktop greg$ php test.php 
&lt;b&gt;hello world&lt;/b&gt;
command returned 0
</snippet></ROW><ROW><id>4621239</id><snippet>HTML2Markdown.new('&lt;h1&gt;HTMLcode&lt;/h1&gt;').to_s
</snippet></ROW><ROW><id>4621239</id><snippet>#!/usr/bin/env ruby

require_relative 'html2markdown'

puts HTML2Markdown.new("&lt;h1&gt;#{ ARGF.read }&lt;/h1&gt;").to_s
</snippet></ROW><ROW><id>4621758</id><snippet>import __builtin__
__builtin__.property
</snippet></ROW><ROW><id>4621960</id><snippet>composite</snippet></ROW><ROW><id>4621984</id><snippet>word in []</snippet></ROW><ROW><id>4621984</id><snippet>and</snippet></ROW><ROW><id>4621984</id><snippet>[]</snippet></ROW><ROW><id>4621984</id><snippet>word</snippet></ROW><ROW><id>4621984</id><snippet>False</snippet></ROW><ROW><id>4621984</id><snippet>[]</snippet></ROW><ROW><id>4621984</id><snippet>False</snippet></ROW><ROW><id>4621984</id><snippet>("word" in []) == False</snippet></ROW><ROW><id>4621984</id><snippet>( )</snippet></ROW><ROW><id>4621984</id><snippet>False</snippet></ROW><ROW><id>4621984</id><snippet>[]</snippet></ROW><ROW><id>4621984</id><snippet>False</snippet></ROW><ROW><id>4621984</id><snippet>foo = []

if ("word" in foo) and (foo == False):
    print "True"
else:
    print "False"
</snippet></ROW><ROW><id>4622181</id><snippet>&gt;&gt;&gt; hashlib.md5('thecakeisalie').digest().decode("iso-8859-1")
u"'\xfc\xce\x84h\xa9\x1e\x8a\x12;\xa5\xb1K\xea\xef\xd6"
</snippet></ROW><ROW><id>4622181</id><snippet>.encode("iso-8859-1")</snippet></ROW><ROW><id>4622321</id><snippet>User.ID</snippet></ROW><ROW><id>4622321</id><snippet>User</snippet></ROW><ROW><id>4622321</id><snippet>class User(db.Model):
    datejoined = db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>4622321</id><snippet>class User(db.Model):
    datejoined = db.DateTimeProperty(auto_now_add=True)

    @property
    def name(self):
        return self.key().name()
</snippet></ROW><ROW><id>4622321</id><snippet>User</snippet></ROW><ROW><id>4622321</id><snippet>key_name</snippet></ROW><ROW><id>4622321</id><snippet>someuser = User(key_name='john_doe')
...
someuser.save()
</snippet></ROW><ROW><id>4622321</id><snippet>def create_user(username):
    checkeduser = User.get_by_key_name(username)
    if checkeduser is not None:
        raise db.Rollback, 'User already exists!'
    newuser = User(key_name=username)
    # more code
    newuser.put()
</snippet></ROW><ROW><id>4622321</id><snippet>db.run_in_transaction(create_user, 'john_doe')
</snippet></ROW><ROW><id>4622321</id><snippet>someuser = User.get_by_key_name('john_doe')
</snippet></ROW><ROW><id>4622321</id><snippet>somecontent = Content(parent=User.get_by_key_name('john_doe'))
</snippet></ROW><ROW><id>4622321</id><snippet>someuser = User.get(somecontent.key().parent())
</snippet></ROW><ROW><id>4622321</id><snippet>allcontent = Content.gql('where ancestor is :user', user=someuser).fetch(10)
</snippet></ROW><ROW><id>4622442</id><snippet>import BeautifulSoup

fname = r'c:\mydir\beautifulSoup.html'
soup = BeautifulSoup.BeautifulSoup(open(fname, 'r'))

items = []
last_seen_date = None
for el in soup.findAll('tr'):
    daterow = el.find('td', {'class':'date'})
    if daterow is None:     # not a date - get headline and link
        headline = el.find('td', {'class':'headline'}).text
        link = el.find('a').get('href')
        items.append((last_seen_date, headline, link))
    else:                   # get new date
        last_seen_date = daterow.text
</snippet></ROW><ROW><id>4622449</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import matplotlib.pyplot as plt
fig = plt.figure()
ax = Axes3D(fig)
x = [0,1,1,0]
y = [0,0,1,1]
z = [0,1,0,1]
verts = [zip(x, y,z)]
ax.add_collection3d(Poly3DCollection(verts))
plt.show()
</snippet></ROW><ROW><id>4622542</id><snippet>list_of_extensions = ['flv','mp4','avi'] # Supplement it with what you find.
list_of_files = []


import os

def callback(arg, directory, files):
    for file in files:
        extn = file.split('.')[-1]
        if extn in arg:
               list_of_files.append(os.path.join(directory,file))

os.path.walk(".", callback, list_of_extensions)
</snippet></ROW><ROW><id>4622569</id><snippet>set()</snippet></ROW><ROW><id>4622569</id><snippet>lists = [
    [...su's for file 1...],
    [...su's for file 2...],
    etc.
]
</snippet></ROW><ROW><id>4622569</id><snippet>set(su for sus in lists for su in sus)
</snippet></ROW><ROW><id>4622606</id><snippet>&gt;&gt;&gt; value_regex = re.compile("(?&lt;=Value=)(?P&lt;value&gt;.*?)(?=&amp;)")
&gt;&gt;&gt; match = value_regex.search(strJunk)
&gt;&gt;&gt; match.group('value')
'five'
&gt;&gt;&gt; value_regex.sub("six", strJunk)
'asdf2adsf29Value=six&amp;lakl23ljk43asdldl'
</snippet></ROW><ROW><id>4622718</id><snippet>\r</snippet></ROW><ROW><id>4622718</id><snippet>p = subprocess.Popen(args, stdout=subprocess.PIPE, \
                     stderr=subprocess.PIPE, \
                     universal_newlines=True)
for line in iter(p.stdout.readline, ""):
    sys.stdout.write('\r'+line[:-1])
    sys.stdout.flush()
</snippet></ROW><ROW><id>4622718</id><snippet>\n</snippet></ROW><ROW><id>4622783</id><snippet>os.path</snippet></ROW><ROW><id>4623038</id><snippet>select field1, field1, ..., fieldn from users 
where 
    user_lat &gt; this_lat - phi and user_lat &lt; this_lat + phi
    and
    user_lon &gt; this_lon - omega and user_lon &lt; this_lon + omega
</snippet></ROW><ROW><id>4623038</id><snippet>phi</snippet></ROW><ROW><id>4623038</id><snippet>omega</snippet></ROW><ROW><id>4623296</id><snippet>return whatever</snippet></ROW><ROW><id>4623363</id><snippet>&gt;&gt;&gt; symbol_map = dict([(chr(x), x) for x in range(33,64) + range (91,96) + range(123,126)])
&gt;&gt;&gt; symbol_map
{'!': 33, '#': 35, '"': 34, '%': 37, '$': 36, "'": 39, '&amp;': 38, ')': 41, '(': 40, '+': 43, '*': 42, '-': 45, ',': 44, '/': 47, '.': 46, '1': 49, '0': 48, '3': 51, '2': 50, '5': 53, '4': 52, '7': 55, '6': 54, '9': 57, '8': 56, ';': 59, ':': 58, '=': 61, '&lt;': 60, '?': 63, '&gt;': 62, '[': 91, ']': 93, '\\': 92, '_': 95, '^': 94, '{': 123, '}': 125, '|': 124}
</snippet></ROW><ROW><id>4623363</id><snippet>&gt;&gt;&gt; symbol_map['/']
47
</snippet></ROW><ROW><id>4623363</id><snippet>&gt;&gt;&gt; for x in sorted(symbol_map): print x,
... 
! " # $ % &amp; ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ? [ \ ] ^ _ { | }
</snippet></ROW><ROW><id>4623363</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; symbol_map = dict([(x, 0) for x in string.punctuation + string.digits])
&gt;&gt;&gt; symbol_map.keys()
['!', '#', '"', '%', '$', "'", '&amp;', ')', '(', '+', '*', '-', ',', '/', '.', '1', '0', '3', '2', '5', '4', '7', '6', '9', '8', ';', ':', '=', '&lt;', '?', '&gt;', '@', '[', ']', '\\', '_', '^', '`', '{', '}', '|', '~']
</snippet></ROW><ROW><id>4623363</id><snippet>~</snippet></ROW><ROW><id>4623518</id><snippet>import re

def tryint(s):
    try:
        return int(s)
    except:
        return s

def alphanum_key(s):
    """ Turn a string into a list of string and number chunks.
        "z23a" -&gt; ["z", 23, "a"]
    """
    return [ tryint(c) for c in re.split('([0-9]+)', s) ]

def sort_nicely(l):
    """ Sort the given list in the way that humans expect.
    """
    l.sort(key=alphanum_key)
</snippet></ROW><ROW><id>4623591</id><snippet>/opt/local/bin/python is a macport distribution</snippet></ROW><ROW><id>4623591</id><snippet>sudo port install python-select sudo
python-select python26
</snippet></ROW><ROW><id>4623591</id><snippet>export PATH=/opt/local/bin:$PATH
</snippet></ROW><ROW><id>4623633</id><snippet>@user_passes_test</snippet></ROW><ROW><id>4623633</id><snippet>from django.utils.functional import wraps

def beta(view):
    @wraps(view)
    def inner(request, *args, **kwargs):
        if request.user.user_profile.beta:
            return view(request, *args, **kwargs)
        # Up to you how you return failure...
    return inner
</snippet></ROW><ROW><id>4623633</id><snippet>@beta
def my_view(request):
    # do something new here.
</snippet></ROW><ROW><id>4623633</id><snippet>@user_passes_test(lambda u: u.profile.beta)
def my_view(request):
    # do something clever
</snippet></ROW><ROW><id>4623633</id><snippet>@beta</snippet></ROW><ROW><id>4623663</id><snippet>virtualenv</snippet></ROW><ROW><id>4623663</id><snippet>--no-site-packages</snippet></ROW><ROW><id>4623663</id><snippet>django</snippet></ROW><ROW><id>4623663</id><snippet>pip install -e</snippet></ROW><ROW><id>4623663</id><snippet>pip install -e hg+http://...</snippet></ROW><ROW><id>4624045</id><snippet>QTreeWidget</snippet></ROW><ROW><id>4624045</id><snippet>QTreeView</snippet></ROW><ROW><id>4624045</id><snippet>void QTreeView::expandAll ()
</snippet></ROW><ROW><id>4624045</id><snippet>slot</snippet></ROW><ROW><id>4624146</id><snippet>def stringify_children(node):
    from lxml.etree import tostring
    from itertools import chain
    parts = ([node.text] +
            list(chain(*([c.text, tostring(c), c.tail] for c in node.getchildren()))) +
            [node.tail])
    # filter removes possible Nones in texts and tails
    return ''.join(filter(None, parts))
</snippet></ROW><ROW><id>4624146</id><snippet>from lxml import etree
node = etree.fromstring("""&lt;content&gt;
Text outside tag &lt;div&gt;Text &lt;em&gt;inside&lt;/em&gt; tag&lt;/div&gt;
&lt;/content&gt;""")
stringify_children(node)
</snippet></ROW><ROW><id>4624146</id><snippet>'\nText outside tag &lt;div&gt;Text &lt;em&gt;inside&lt;/em&gt; tag&lt;/div&gt;\n'</snippet></ROW><ROW><id>4624798</id><snippet>__init__.py</snippet></ROW><ROW><id>4624798</id><snippet>import package</snippet></ROW><ROW><id>4624798</id><snippet>from package.functions import *
from package.classes import *
</snippet></ROW><ROW><id>4624798</id><snippet>import *</snippet></ROW><ROW><id>4624798</id><snippet>from package.functions import do
from package.classes import A
</snippet></ROW><ROW><id>4624798</id><snippet>do</snippet></ROW><ROW><id>4624798</id><snippet>A</snippet></ROW><ROW><id>4624798</id><snippet>import *</snippet></ROW><ROW><id>4624923</id><snippet>import numpy as np

Nbig = 100
Nsmall = 20
big = np.arange(Nbig * Nbig).reshape([Nbig, Nbig]) # 100x100

small = big.reshape([Nsmall, Nbig/Nsmall, Nsmall, Nbig/Nsmall]).mean(3).mean(1)
</snippet></ROW><ROW><id>4624923</id><snippet>Nbig = 6
Nsmall = 3
big = np.arange(36).reshape([6,6])
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])

small = big.reshape([Nsmall, Nbig/Nsmall, Nsmall, Nbig/Nsmall]).mean(3).mean(1)

array([[  3.5,   5.5,   7.5],
       [ 15.5,  17.5,  19.5],
       [ 27.5,  29.5,  31.5]])
</snippet></ROW><ROW><id>4625132</id><snippet>a</snippet></ROW><ROW><id>4625132</id><snippet>numpy.r_[True, a[1:] &lt; a[:-1]] &amp; numpy.r_[a[:-1] &lt; a[1:], True]
</snippet></ROW><ROW><id>4625132</id><snippet>numpy.convolve()</snippet></ROW><ROW><id>4625175</id><snippet>QStackedWidget</snippet></ROW><ROW><id>4625175</id><snippet>setCurrentWidget</snippet></ROW><ROW><id>4625383</id><snippet>#!/usr/bin/python
from random import sample, choice
from cPickle import dump

# Generate sample dataset
value_ceiling = 1000
dataset_size = 900000
dataset_filename = 'dataset.pkl'

# number of distinct values per column
col_distrib = [400,20,20,20,20,20,20]

col_values = [ sample(xrange(value_ceiling),x) for x in col_distrib ]

dataset = []
for _ in xrange(dataset_size):
  dataset.append(tuple([ choice(x) for x in col_values ]))

dump(dataset,open(dataset_filename,'wb'))
</snippet></ROW><ROW><id>4625383</id><snippet>#/usr/bin/python

from random import sample, choice
from cPickle import load

dataset_filename = 'dataset.pkl'

class DataSearch(object):
  def __init__(self,filename):
    self.data = load(open(filename,'rb'))
    self.col_sets = [ dict() for x in self.data[0] ]
    self.process_data()
  def process_data(self):
    for row in self.data:
      for i,v in enumerate(row):
        self.col_sets[i].setdefault(v,set()).add(row)
  def search(self,*args):
    # args are integers, sequences of integers, or None in related column positions.
    results = []
    for i,v in enumerate(args):
      if v is None:
        continue
      elif isinstance(v,int):
        results.append(self.col_sets[i].get(v,set()))
      else: # sequence
        r = [ self.col_sets[i].get(x,set()) for x in v ]
        r = reduce(set.union,r[1:],r[0])
        results.append(r)
    #
    results.sort(key=len)
    results = reduce(set.intersection,results[1:],results[0])
    return results
  def sample_search(self,*args):
    search = []
    for i,v in enumerate(args):
      if v is None:
        search.append(None)
      else:
        search.append(sample(self.col_sets[i].keys(),v))
    return search

d = DataSearch(dataset_filename)
</snippet></ROW><ROW><id>4625383</id><snippet>&gt;&gt;&gt; d.search(*d.sample_search(1,1,1,5))
set([(117, 557, 273, 437, 639, 981, 587), (117, 557, 273, 170, 53, 640, 467), (117, 557, 273, 584, 459, 127, 649)])
&gt;&gt;&gt; d.search(*d.sample_search(1,1,1,1))
set([])
&gt;&gt;&gt; d.search(*d.sample_search(10,None,1,1,1,1))
set([(801, 334, 414, 283, 107, 990, 221)])
&gt;&gt;&gt; d.search(*d.sample_search(10,None,1,1,1,1))
set([])
&gt;&gt;&gt; d.search(*d.sample_search(10,None,1,1,1,1))
set([(193, 307, 547, 549, 901, 940, 343)])
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('d.search(*d.sample_search(10,None,1,1,1,1))','from __main__ import d').timeit(100)
1.787431001663208
</snippet></ROW><ROW><id>4625483</id><snippet>public class Java {
    static private int count = 0;

    public void increment() {
       synchronized (this) {
          count++;
       }
    }
}
</snippet></ROW><ROW><id>4625483</id><snippet>import threading

class Java:
   cout = 0
   lock = threading.RLock()

   def increment():
       with Java.lock:
           Java.cout += 1
</snippet></ROW><ROW><id>4625483</id><snippet>public class Java {
    static private int count = 0;

    public synchronized void increment() {
        count ++;
    }
}
</snippet></ROW><ROW><id>4625483</id><snippet>import threading

def synchronized(method):
    """ Work with instance method only !!! """

    def new_method(self, *arg, **kws):
        with self.lock:
            return method(self, *arg, **kws)


    return new_method

class Java:
    count = 0
    lock = threading.RLock()

    @synchronized
    def incremenet(self):
        Java.count += 1
</snippet></ROW><ROW><id>4625803</id><snippet>import numpy as np

a = np.array([[1, 5, 6],
              [2, 4, 1],
              [3, 1, 5]])

np.ma.MaskedArray(a, mask=(np.ones_like(a)*(a[:,0]==1)).T)

# Returns: 
masked_array(data =
 [[-- -- --]
 [2 4 1]
 [3 1 5]],
             mask =
 [[ True  True  True]
 [False False False]
 [False False False]])
</snippet></ROW><ROW><id>4625871</id><snippet>choices</snippet></ROW><ROW><id>4625871</id><snippet>STATUS_CHOICES = (
    ('open', _('open')),
    ('closed', _('closed'))
)

class MyModel(models.Model):
    status = models.CharField(max_length=10, choices=STATUS_CHOICES)
</snippet></ROW><ROW><id>4625871</id><snippet>get_status_display</snippet></ROW><ROW><id>4625871</id><snippet>&lt;td&gt; {{ object.get_status_display }} &lt;/td&gt;
</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625900</id><snippet>_strptime</snippet></ROW><ROW><id>4625900</id><snippet>locale</snippet></ROW><ROW><id>4625900</id><snippet>setlocale</snippet></ROW><ROW><id>4625900</id><snippet>locale.h</snippet></ROW><ROW><id>4625900</id><snippet>setlocale</snippet></ROW><ROW><id>4625900</id><snippet>setlocale</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625900</id><snippet>time.strptime</snippet></ROW><ROW><id>4625962</id><snippet>$.get('ajax/test.html', function(data) {
    $('.result').html(data);
    alert('Load was performed.');
});
</snippet></ROW><ROW><id>4625962</id><snippet>ajax/test.html</snippet></ROW><ROW><id>4626432</id><snippet> func = foo
</snippet></ROW><ROW><id>4626432</id><snippet> func = theobject.foo
</snippet></ROW><ROW><id>4626460</id><snippet>&gt;&gt;&gt; x, y, z = (-379.99418604651157, 47.517234218543351, 0.0)
&gt;&gt;&gt; abs(x - -370) &lt; 10
True
&gt;&gt;&gt; abs(y - 40) &lt; 10
True
</snippet></ROW><ROW><id>4626507</id><snippet>from math import log10

if log10(n) &lt; -5:
    print "%e" % n
else:
    print "%f" % n
</snippet></ROW><ROW><id>4626507</id><snippet>("%e" if log10(n) &lt; -5 else "%f") % n
</snippet></ROW><ROW><id>4626507</id><snippet>log10(abs(n))</snippet></ROW><ROW><id>4626507</id><snippet>log10(n)</snippet></ROW><ROW><id>4626507</id><snippet>"%e" % n if n and log10(abs(n)) &lt; -5 else ("%f" % n).rstrip("0")
</snippet></ROW><ROW><id>4626507</id><snippet>if</snippet></ROW><ROW><id>4626816</id><snippet>strace</snippet></ROW><ROW><id>4626816</id><snippet>$ strace -o logfile -e trace=network cmdline
</snippet></ROW><ROW><id>4626975</id><snippet>socket.gethostbyname()</snippet></ROW><ROW><id>4627087</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; import sys
&gt;&gt;&gt; blah = "This is written slowly\n"
&gt;&gt;&gt; for l in blah:
...   sys.stdout.write(l)
...   sys.stdout.flush()
...   time.sleep(0.2)
...
This is written slowly
</snippet></ROW></DATA>