<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>7813461</id><snippet>slice(None)</snippet></ROW><ROW><id>7813461</id><snippet>:</snippet></ROW><ROW><id>7813461</id><snippet>[index[0], slice(None), index[1], index[2]]
</snippet></ROW><ROW><id>7813732</id><snippet>print item in mylist if item is not ""</snippet></ROW><ROW><id>7813732</id><snippet>&gt;&gt;&gt; mylist = ["foo","bar","","baz"]
&gt;&gt;&gt; print [item for item in mylist if item]
['foo', 'bar', 'baz']
</snippet></ROW><ROW><id>7813807</id><snippet>&gt;&gt;&gt; MySQLdb.constants.FIELD_TYPE.TIMESTAMP
7
&gt;&gt;&gt; MySQLdb.constants.FIELD_TYPE.DATETIME
12
&gt;&gt;&gt; MySQLdb.constants.FIELD_TYPE.TIMESTAMP==MySQLdb.DATETIME
True
&gt;&gt;&gt; MySQLdb.constants.FIELD_TYPE.DATETIME==MySQLdb.DATETIME
True
&gt;&gt;&gt; MySQLdb.DATETIME
DBAPISet([12, 7])
</snippet></ROW><ROW><id>7813997</id><snippet>raw_input</snippet></ROW><ROW><id>7813997</id><snippet>input</snippet></ROW><ROW><id>7813997</id><snippet>input</snippet></ROW><ROW><id>7813997</id><snippet>eval</snippet></ROW><ROW><id>7813997</id><snippet>choice</snippet></ROW><ROW><id>7813997</id><snippet>input</snippet></ROW><ROW><id>7813997</id><snippet>def select():
    convert()
    choice = raw_input('Enter Choice Number:')
    if choice == '1':
        C2F()
    elif choice == '2':
        F2C()
</snippet></ROW><ROW><id>7814300</id><snippet>collection_name.create_index</snippet></ROW><ROW><id>7814300</id><snippet>eval()</snippet></ROW><ROW><id>7814300</id><snippet>eval()</snippet></ROW><ROW><id>7814317</id><snippet>curl http://localhost:8000/api/v1/books/?username=issackelly\&amp;api_key=123456789adfljafal
</snippet></ROW><ROW><id>7814317</id><snippet>from django.contrib.auth.models import User
from django.db import models
from tastypie.models import create_api_key

models.signals.post_save.connect(create_api_key, sender=User)
</snippet></ROW><ROW><id>7815016</id><snippet>replace()</snippet></ROW><ROW><id>7815016</id><snippet>readlines</snippet></ROW><ROW><id>7815016</id><snippet>str(i)</snippet></ROW><ROW><id>7815016</id><snippet>filename = "/Users/sacredgeometry/Desktop/data.txt"
text = open(filename, 'r')
linesNew = []

for line in text:
    # i is already a string, no need to str it
    # temp = str(i)

    # also, just append the result of the replace to linesNew:
    linesNew.append(line.replace(' ', ', ', 2))

# DEBUGGING THE CODE    
print(linesNew[0])
print(linesNew[1])

# Another test to check that the replace works ... It does!
test2 = linesNew[0].replace(' ', ', ',2)
test2 = test2.replace('\t', ', ')
print('Proof of Concept: ' + '\n' + test2)  

text.close()
</snippet></ROW><ROW><id>7815042</id><snippet>[2, 3, 1, 4]</snippet></ROW><ROW><id>7815042</id><snippet>[2, 3, 1, 4]</snippet></ROW><ROW><id>7815042</id><snippet>winners</snippet></ROW><ROW><id>7815042</id><snippet>[6, 1, 2, 3, 4]</snippet></ROW><ROW><id>7815042</id><snippet>winners</snippet></ROW><ROW><id>7815042</id><snippet>for winner in winners:
    won = True
    for move in winner:
        if move not in self.game.moves['Black']:
            won = False
    if won:
        # game ending logic
        break
</snippet></ROW><ROW><id>7815042</id><snippet>if any(all(m in self.game.moves['Black'] for m in w) for w in winners)):
    # game ending logic
</snippet></ROW><ROW><id>7815146</id><snippet>raw_input()</snippet></ROW><ROW><id>7815146</id><snippet>text = ''

# keep looping forever
while True:
    try:
        # grab the data from the user, and add back the newline
        # which raw_input() strips off
        text += raw_input() + "\n"
    except EOFError:
        # if you encounter EOF (which ctrl-d causes) break out of the loop
        break

# print the text you've gathered after a dashed line
print "\n------------\n" + text
</snippet></ROW><ROW><id>7815146</id><snippet>raw_input()</snippet></ROW><ROW><id>7815146</id><snippet>exec()</snippet></ROW><ROW><id>7815146</id><snippet>input()</snippet></ROW><ROW><id>7815146</id><snippet>print()</snippet></ROW><ROW><id>7815146</id><snippet>exec(text)
</snippet></ROW><ROW><id>7815359</id><snippet>ArrayList</snippet></ROW><ROW><id>7815359</id><snippet>std::vector</snippet></ROW><ROW><id>7815359</id><snippet>random.randint(0, len(L) - 1)</snippet></ROW><ROW><id>7815359</id><snippet>i</snippet></ROW><ROW><id>7815359</id><snippet>L[i] = calculation(L[i])</snippet></ROW><ROW><id>7815359</id><snippet>i</snippet></ROW><ROW><id>7815950</id><snippet>import operator
if (image == 'lighten'):
    op = operator.add
else:
    op = operator.sub

red_channel = op(red_channel, 50)
</snippet></ROW><ROW><id>7815950</id><snippet>op = {
    'lighten':operator.add,
    'darken':operator.sub,
     ...
    }
red_channel = op[image](red_channel,50)
</snippet></ROW><ROW><id>7815978</id><snippet>json.dumps(listDicts)</snippet></ROW><ROW><id>7816234</id><snippet>user_input_list = input("Enter your name and age:").split(' ')
</snippet></ROW><ROW><id>7816234</id><snippet>&gt;&gt;&gt; 'George 25'.split(' ')
['George', '25']
</snippet></ROW><ROW><id>7816234</id><snippet>user_input_list[0] # George
user_input_list[1] # 25
</snippet></ROW><ROW><id>7816387</id><snippet>titlecase</snippet></ROW><ROW><id>7816387</id><snippet>$ pip install titlecase
...
$ python
...
&gt;&gt;&gt; from titlecase import titlecase
&gt;&gt;&gt; titlecase('the spam and eggs')
'The Spam and Eggs'
</snippet></ROW><ROW><id>7816439</id><snippet>if A:
</snippet></ROW><ROW><id>7816439</id><snippet>A.__nonzero__()</snippet></ROW><ROW><id>7816439</id><snippet>object.__nonzero__(self)</snippet></ROW><ROW><id>7816439</id><snippet>bool()</snippet></ROW><ROW><id>7816439</id><snippet>False</snippet></ROW><ROW><id>7816439</id><snippet>True</snippet></ROW><ROW><id>7816439</id><snippet>0</snippet></ROW><ROW><id>7816439</id><snippet>1</snippet></ROW><ROW><id>7816439</id><snippet>__len__()</snippet></ROW><ROW><id>7816439</id><snippet>__len__()</snippet></ROW><ROW><id>7816439</id><snippet>__nonzero__()</snippet></ROW><ROW><id>7816439</id><snippet>if A is not None:
</snippet></ROW><ROW><id>7816439</id><snippet>A</snippet></ROW><ROW><id>7816439</id><snippet>None</snippet></ROW><ROW><id>7817127</id><snippet>zope.interface</snippet></ROW><ROW><id>7817127</id><snippet>py2exe</snippet></ROW><ROW><id>7817127</id><snippet>zope</snippet></ROW><ROW><id>7817127</id><snippet>zope</snippet></ROW><ROW><id>7817127</id><snippet>.pth</snippet></ROW><ROW><id>7817127</id><snippet>zope.interface-3.*.*-py2.*-nspkg.pth</snippet></ROW><ROW><id>7817127</id><snippet>site-packages</snippet></ROW><ROW><id>7817127</id><snippet>py2exe</snippet></ROW><ROW><id>7817127</id><snippet>zope</snippet></ROW><ROW><id>7817127</id><snippet>site-packages</snippet></ROW><ROW><id>7817127</id><snippet>py2exe</snippet></ROW><ROW><id>7817127</id><snippet>py2exe</snippet></ROW><ROW><id>7817127</id><snippet>zope</snippet></ROW><ROW><id>7817127</id><snippet>py2exe</snippet></ROW><ROW><id>7817172</id><snippet>setuptools</snippet></ROW><ROW><id>7817172</id><snippet>Distribute</snippet></ROW><ROW><id>7817172</id><snippet>setuptools</snippet></ROW><ROW><id>7817702</id><snippet>p4 print</snippet></ROW><ROW><id>7817702</id><snippet>change-content</snippet></ROW><ROW><id>7817702</id><snippet>change-commit</snippet></ROW><ROW><id>7817702</id><snippet>def fail(sComment):
  print sComment
  sys.exit(1)
  return

sCmd = "p4 -G files //sw/...@=%s" % sChangeNr

stream = os.popen(sCmd, 'rb')
dictResult = []
try:
  while 1:
   dictResult.append(marshal.load(stream))
except EOFError:
  pass

stream.close()


failures = []
# check all files for tabs
for element in dictResult:
  depotFile =  element['depotFile']

sCmd = "p4 print -q %s@=%s" % (depotFile,sChangeNr)
content = os.popen(sCmd, 'rb').read()
if content.find('\t') != -1:
  failures.append(depotFile)

if len(failures) != 0:
  error = "Files contain tabulators (instead of spaces):\n"
  for i in failures:
    error = error + str(i) + "\n"
  fail(error)
</snippet></ROW><ROW><id>7818152</id><snippet>print</snippet></ROW><ROW><id>7818172</id><snippet>f = open('/Users/output_test_%d.txt' % i, 'w')
</snippet></ROW><ROW><id>7818172</id><snippet>%</snippet></ROW><ROW><id>7818172</id><snippet>with open('/Users/output_test_%d.txt' % i, 'w') as f:
    for line in r:
        try:
            f.write('%s\n' % line)
        except UnicodeEncodeError:
            pass
</snippet></ROW><ROW><id>7818172</id><snippet>f.close()</snippet></ROW><ROW><id>7818477</id><snippet>find_module()</snippet></ROW><ROW><id>7818477</id><snippet>__path__</snippet></ROW><ROW><id>7818477</id><snippet>path</snippet></ROW><ROW><id>7818477</id><snippet>TypeError</snippet></ROW><ROW><id>7818477</id><snippet>find_module()</snippet></ROW><ROW><id>7818477</id><snippet>TouchImportFinder</snippet></ROW><ROW><id>7818477</id><snippet>str</snippet></ROW><ROW><id>7818477</id><snippet>meta_path</snippet></ROW><ROW><id>7818477</id><snippet>sys.meta_path.append(TouchImportFinder)
</snippet></ROW><ROW><id>7818477</id><snippet>sys.meta_path.append(TouchImportFinder())
</snippet></ROW><ROW><id>7818482</id><snippet>pygame.sndarray.samples</snippet></ROW><ROW><id>7818482</id><snippet>samples = [math.sin(2.0 * math.pi * frequency * t / sample_rate) for t in xrange(0, duration_in_samples)]
</snippet></ROW><ROW><id>7818482</id><snippet>frequency</snippet></ROW><ROW><id>7818482</id><snippet>sample_rate</snippet></ROW><ROW><id>7818482</id><snippet>duration_in_samples</snippet></ROW><ROW><id>7818482</id><snippet>samples</snippet></ROW><ROW><id>7818482</id><snippet>numpy.array</snippet></ROW><ROW><id>7818482</id><snippet>pygame.sndarray.samples</snippet></ROW><ROW><id>7818482</id><snippet>pygame.mixer.get_init</snippet></ROW><ROW><id>7818482</id><snippet>samples</snippet></ROW><ROW><id>7818482</id><snippet>mixer.get_init</snippet></ROW><ROW><id>7818482</id><snippet>sample_rate</snippet></ROW><ROW><id>7818482</id><snippet>samples</snippet></ROW><ROW><id>7818508</id><snippet>import xml.etree.cElementTree as etree
from pprint import pprint
tree = etree.parse('find_title.xml')
for value in tree.getiterator(tag='title'):
    print value.text
for value in tree.getiterator(tag='page'):
    pprint(value.attrib)
</snippet></ROW><ROW><id>7818508</id><snippet>$ python file.py
Title
{'categories': '0',
 'id': '31239628',
 'newlength': '4524',
 'orglength': '6822',
 'outlinks': '1',
 'stub': '0',
 'urls': '10'}
</snippet></ROW><ROW><id>7818683</id><snippet>None</snippet></ROW><ROW><id>7818683</id><snippet>my_dict = lambda: defaultdict(my_dict)
d = my_dict()
for x in my_list:
    reduce(defaultdict.__getitem__, x.split("/"), d)
</snippet></ROW><ROW><id>7818834</id><snippet>Windows 2000/XP
---------------

For raw Ethernet sending, install the WinPcap driver and DLLs, and
extract their developer pack to a build directory:

        http://winpcap.polito.it/install/default.htm

# XXX - unsupported for now
# For tunnel interface support, install the OpenVPN "TAP-Win32 Virtual
# Ethernet Adapter" component (their Windows installer will let you
# install it alone):
#
#       http://openvpn.sourceforge.net/

For firewall support, install HSC's PktFilter service:

        http://www.hsc.fr/ressources/outils/pktfilter/index.html.en

Most Windows developers should just use the libdnet developer's pack
(with MinGW and MSVC++ libraries) instead of building it themselves.
But for those who really want to know...

To build a MinGW native library (under Cygwin+MinGW):

        ./configure &amp;&amp; make

To build a Microsoft Visual C++ native library and Python module
(again, under Cygwin+MinGW):

        ./configure
        cd python &amp;&amp; C:/Python23/python.exe setup.py build
        cd ../src &amp;&amp; lib /out:dnet.lib *.obj
</snippet></ROW><ROW><id>7819025</id><snippet>q = d.setdefault(x, {})
</snippet></ROW><ROW><id>7819025</id><snippet>dict.setdefualt()</snippet></ROW><ROW><id>7819067</id><snippet>'CSS'</snippet></ROW><ROW><id>7819067</id><snippet>TypeError</snippet></ROW><ROW><id>7819067</id><snippet>try..except</snippet></ROW><ROW><id>7819067</id><snippet>try:
    self.se.get_attribute("CSS")
except TypeError:
    self.se.get_text("another CSS")
</snippet></ROW><ROW><id>7819798</id><snippet>lxml</snippet></ROW><ROW><id>7819798</id><snippet>from lxml import etree

doc = etree.XML("""
&lt;mediawiki xmlns="http://www.mediawiki.org/xml/export-0.5/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.5/ http://www.mediawiki.org/xml/export-0.5.xsd" version="0.5" xml:lang="en"&gt;
  &lt;siteinfo&gt;
    &lt;sitename&gt;Wiki&lt;/sitename&gt;
    &lt;case&gt;first-letter&lt;/case&gt;
    &lt;namespaces&gt;
      &lt;namespace key="0" case="first-letter" /&gt;
    &lt;/namespaces&gt;
  &lt;/siteinfo&gt;
  &lt;page&gt;
    &lt;title&gt;Sex&lt;/title&gt;
    &lt;title_id&gt;31239628&lt;/title_id&gt;
    &lt;revision&gt;
      &lt;id&gt;437708703&lt;/id&gt;
      &lt;timestamp&gt;2011-07-04T13:53:52Z&lt;/timestamp&gt;
      &lt;text xml:space="preserve" bytes="6830"&gt;{{ Hello}}
      &lt;/text&gt;
    &lt;/revision&gt;
  &lt;/page&gt;
&lt;/mediawiki&gt;
""")

def first(seq,default=None):
  for item in seq:
    return item
  return default

NSMAP=dict(mw="http://www.mediawiki.org/xml/export-0.5/")

print first(doc.xpath('/mw:mediawiki/mw:page/mw:title/text()',namespaces=NSMAP))
print first(doc.xpath('/mw:mediawiki/mw:page/mw:title_id/text()',namespaces=NSMAP))
</snippet></ROW><ROW><id>7819798</id><snippet>first</snippet></ROW><ROW><id>7819798</id><snippet>for i,page in enumerate(doc.xpath('/mw:mediawiki/mw:page',namespaces=NSMAP)):
  title = first(page.xpath('./mw:title/text()',namespaces=NSMAP))
  title_id = first(page.xpath('./mw:title_id/text()',namespaces=NSMAP))
  print "Page %s: %s (%s)"  % (i,title,title_id)
</snippet></ROW><ROW><id>7820249</id><snippet>fileConfig</snippet></ROW><ROW><id>7820249</id><snippet>logging.config.fileConfig("logging.cfg")
</snippet></ROW><ROW><id>7820249</id><snippet>from foo import Foo
</snippet></ROW><ROW><id>7820249</id><snippet>logging.config.fileConfig("logging.cfg",disable_existing_loggers=0)
</snippet></ROW><ROW><id>7820376</id><snippet>adminmedia</snippet></ROW><ROW><id>7820376</id><snippet>python manage.py runserver --adminmedia=./myadminmedia
</snippet></ROW><ROW><id>7820701</id><snippet>from __future__ import division

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure(figsize=plt.figaspect(1))  # Square figure
ax = fig.add_subplot(111, projection='3d')

coefs = (1, 2, 2)  # Coefficients in a0/c x**2 + a1/c y**2 + a2/c z**2 = 1 
# Radii corresponding to the coefficients:
rx, ry, rz = [1/np.sqrt(coef) for coef in coefs]

# Set of all spherical angles:
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)

# Cartesian coordinates that correspond to the spherical angles:
# (this is the equation of an ellipsoid):
x = rx * np.outer(np.cos(u), np.sin(v))
y = ry * np.outer(np.sin(u), np.sin(v))
z = rz * np.outer(np.ones_like(u), np.cos(v))

# Plot:
ax.plot_surface(x, y, z,  rstride=4, cstride=4, color='b')

# Adjustment of the axes, so that they all have the same span:
max_radius = max(rx, ry, rz)
for axis in 'xyz':
    getattr(ax, 'set_{}lim'.format(axis))((-max_radius, max_radius))

plt.show()
</snippet></ROW><ROW><id>7820908</id><snippet>p.start()</snippet></ROW><ROW><id>7820967</id><snippet>def encode_model(obj, recursive=False):
    if obj is None:
        return obj
    if isinstance(obj, (mongoengine.Document, mongoengine.EmbeddedDocument)):
        out = dict(obj._data)
        for k,v in out.items():
            if isinstance(v, ObjectId):
                if k is None:
                    out['_id'] = str(v)
                    del(out[k])
                else:
                    # Unlikely that we'll hit this since ObjectId is always NULL key
                    out[k] = str(v)
            else:
                out[k] = encode_model(v)
    elif isinstance(obj, mongoengine.queryset.QuerySet):
        out = encode_model(list(obj))
    elif isinstance(obj, ModuleType):
        out = None
    elif isinstance(obj, groupby):
        out = [ (g,list(l)) for g,l in obj ]
    elif isinstance(obj, (list)):
        out = [encode_model(item) for item in obj]
    elif isinstance(obj, (dict)):
        out = dict([(k,encode_model(v)) for (k,v) in obj.items()])
    elif isinstance(obj, datetime.datetime):
        out = str(obj)
    elif isinstance(obj, ObjectId):
        out = {'ObjectId':str(obj)}
    elif isinstance(obj, (str, unicode)):
        out = obj
    elif isinstance(obj, float):
        out = str(obj)
    else:
        raise TypeError, "Could not JSON-encode type '%s': %s" % (type(obj), str(obj))
    return out
</snippet></ROW><ROW><id>7820967</id><snippet>return json.dumps(result, default=encode_model)
</snippet></ROW><ROW><id>7821079</id><snippet>arange</snippet></ROW><ROW><id>7821079</id><snippet>range</snippet></ROW><ROW><id>7821079</id><snippet>importing *</snippet></ROW><ROW><id>7821079</id><snippet>pylab.</snippet></ROW><ROW><id>7821079</id><snippet>import pylab
i = pylab.arange(0, 40, 1) # or pylab.arange(40) will suffice
y = 0.1 * pylab.cos(i / 20. * pylab.pi)
</snippet></ROW><ROW><id>7821135</id><snippet>np.nonzero</snippet></ROW><ROW><id>7821135</id><snippet>m1</snippet></ROW><ROW><id>7821135</id><snippet>m2</snippet></ROW><ROW><id>7821135</id><snippet>a[m1, m2] == a[m1.nonzero(), m2.nonzero()]
</snippet></ROW><ROW><id>7821135</id><snippet>m1.nonzero().shape == m2.nonzero().shape</snippet></ROW><ROW><id>7821135</id><snippet>[a[i, i] for i in range(a.shape[0]) if m1[i] and m2[i]]
</snippet></ROW><ROW><id>7821135</id><snippet>a[np.ix_(m1, m2)]
</snippet></ROW><ROW><id>7821135</id><snippet>[[a[i,j] for j in range(a.shape[1]) if m2[j]] for i in range(a.shape[0]) if m1[i]]
</snippet></ROW><ROW><id>7821670</id><snippet>stepregistry = portal.portal_setup.getImportStepRegistry()
stepregistry.listSteps()
</snippet></ROW><ROW><id>7821670</id><snippet>&gt;&gt;&gt; portal.portal_setup.getSortedImportSteps()
(u'PloneSurvey_various', u'rolemap', u'sharing', u'plone-difftool',...
</snippet></ROW><ROW><id>7821670</id><snippet>&gt;&gt;&gt; portal.portal_setup.getImportStepMetadata('jsregistry')
{'handler': 'Products.ResourceRegistries.exportimport.jsregistry.importJSRegistry', 'description': u'Import javascript registry', 'version': None, 'title': u'Javascript registry', 'dependencies': (u'toolset', u'componentregistry'), 'id': u'jsregistry', 'invalid': False}
</snippet></ROW><ROW><id>7821956</id><snippet>import readline

class MyCompleter(object):  # Custom completer

    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        if state == 0:  # on first trigger, build possible matches
            if text:  # cache matches (entries that start with entered text)
                self.matches = [s for s in self.options 
                                    if s and s.startswith(text)]
            else:  # no text entered, all matches possible
                self.matches = self.options[:]

        # return match indexed by state
        try: 
            return self.matches[state]
        except IndexError:
            return None

completer = MyCompleter(["hello", "hi", "how are you", "goodbye", "great"])
readline.set_completer(completer.complete)
readline.parse_and_bind('tab: complete')

input = raw_input("Input: ")
print "You entered", input
</snippet></ROW><ROW><id>7821956</id><snippet>&lt;TAB&gt;</snippet></ROW><ROW><id>7821956</id><snippet>Input: &lt;TAB&gt;&lt;TAB&gt;
goodbye      great        hello        hi           how are you

Input: h&lt;TAB&gt;&lt;TAB&gt;
hello        hi           how are you

Input: ho&lt;TAB&gt;ow are you
</snippet></ROW><ROW><id>7821956</id><snippet>readline</snippet></ROW><ROW><id>7821956</id><snippet>self.matches = [s for s in self.options 
                   if s and s.startswith(text)]
</snippet></ROW><ROW><id>7821956</id><snippet>self.matches = [s for s in self.options 
                   if text in s]
</snippet></ROW><ROW><id>7821956</id><snippet>Input: &lt;TAB&gt;&lt;TAB&gt;
goodbye      great        hello        hi           how are you

Input: o&lt;TAB&gt;&lt;TAB&gt;
goodbye      hello        how are you
</snippet></ROW><ROW><id>7821956</id><snippet>keywords = ["hello", "hi", "how are you", "goodbye", "great"]
completer = MyCompleter(keywords)
readline.set_completer(completer.complete)
readline.parse_and_bind('tab: complete')
for kw in keywords:
    readline.add_history(kw)

input = raw_input("Input: ")
print "You entered", input
</snippet></ROW><ROW><id>7822271</id><snippet>def my_sort2(seq, keyname):
    sort by getattr(seq[n], keyname)

my_sort2(people, 'wealth')
</snippet></ROW><ROW><id>7822271</id><snippet>def my_sort2(seq, keyfunc):
    sort by keyfunc(seq[n])

my_sort2(people, operator.attrgetter('wealth'))
</snippet></ROW><ROW><id>7823051</id><snippet>-199703103</snippet></ROW><ROW><id>7823051</id><snippet>0xf</snippet></ROW><ROW><id>7823051</id><snippet>hex()</snippet></ROW><ROW><id>7823051</id><snippet>def tohex(val, nbits):
  return hex((val + (1 &lt;&lt; nbits)) % (1 &lt;&lt; nbits))

print tohex(-199703103, 64)
print tohex(199703103, 64)
</snippet></ROW><ROW><id>7823051</id><snippet>0xfffffffff418c5c1L
0xbe73a3fL
</snippet></ROW><ROW><id>7823068</id><snippet>python manage.py runserver 8084
</snippet></ROW><ROW><id>7823848</id><snippet>myFunc</snippet></ROW><ROW><id>7823848</id><snippet>myFunc()</snippet></ROW><ROW><id>7823848</id><snippet>from time import sleep

class MyClass:
    def _my_func(self, x=sleep(1)):
        pass
    def my_func2(self):
        self._my_func()

class MyClass2:
    def my_func2(self):
        def my_func(x=sleep(1)):
            pass
        my_func()
</snippet></ROW><ROW><id>7823848</id><snippet>myClass.myFunc2()</snippet></ROW><ROW><id>7823848</id><snippet>myClass2.myFunc2()</snippet></ROW><ROW><id>7823989</id><snippet>world = b2World(gravity=(0,-10), doSleep=True)
</snippet></ROW><ROW><id>7823989</id><snippet>worldAABB=box2d.b2AABB()
worldAABB.lowerBound = (-100.0, -100.0)
worldAABB.upperBound = ( 100.0, 100.0)
gravity = (0.0, -10.0)
world = box2d.b2World(worldAABB, gravity, True)
</snippet></ROW><ROW><id>7824050</id><snippet>a = set(open("a.txt"))
b = set(open("b.txt"))
new = open("new.txt", "w")
new.write("".join(a - b))
</snippet></ROW><ROW><id>7824605</id><snippet>return render_template('page.html'), 201
</snippet></ROW><ROW><id>7825517</id><snippet>Qt::Window | Qt::CustomizeWindowHint | Qt::WindowStaysOnTopHint</snippet></ROW><ROW><id>7825517</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *

class Form(QMainWindow):

    def __init__(self, parent=None):
        super(Form, self).__init__(parent)
        self.setWindowFlags(Qt::Window | Qt::CustomizeWindowHint | Qt::WindowStaysOnTopHint)


if __name__ == '__main__':
    # Create the Qt Application
    app = QApplication(sys.argv)
    # Create and show the form
    form = Form()
    form.show()
    # Run the main Qt loop
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7825523</id><snippet>for el in tree.getiterator(tag='page'):
    page_id = el.get('id', None) # returns second arg if id not exists
    if page_id:
        print page_id, el.find('title').text
    else:
        pprint(el.attrib)
</snippet></ROW><ROW><id>7825588</id><snippet>&gt;&gt;&gt; '%.30f' % math.cos(60./180.*math.pi)
'0.500000000000000111022302462516'
&gt;&gt;&gt; '%.30f' % np.cos(60./180.*np.pi)
'0.500000000000000111022302462516'
</snippet></ROW><ROW><id>7825588</id><snippet>np.cos</snippet></ROW><ROW><id>7825588</id><snippet>np.float64</snippet></ROW><ROW><id>7825588</id><snippet>float</snippet></ROW><ROW><id>7825588</id><snippet>double</snippet></ROW><ROW><id>7825718</id><snippet>def possibilities(available_products, target_price):
    if target_price == 0 or not available_products:
        return []
    this_price = available_products[0]
    remaining_products = available_products[1:]
    results = []
    for qty in range(1 + target_price / this_price):
        remaining_price = target_price - qty*this_price
        if remaining_price == 0:
            results.append([qty] + [0] * len(remaining_products))
        else:
            for option in possibilities(remaining_products, remaining_price):
                results.append([qty] + option)
    return results
</snippet></ROW><ROW><id>7825718</id><snippet>pprint.pprint(possibilities([1, 2, 5], 10))
[[0, 0, 2],
 [0, 5, 0],
 [1, 2, 1],
 [2, 4, 0],
 [3, 1, 1],
 [4, 3, 0],
 [5, 0, 1],
 [6, 2, 0],
 [8, 1, 0],
 [10, 0, 0]]
</snippet></ROW><ROW><id>7825870</id><snippet>@echo off
set test_script=.pyexe.py
rem Let's create temporary Python script which prints info we need
echo from __future__ import print_function; import sys; print(sys.executable); print(sys.version) &gt; %test_script%
echo Python accessible through system PATH:
python %test_script%
echo ---
echo Python set as handler for Python files:
%test_script%
del %test_script%
set test_script=
</snippet></ROW><ROW><id>7825870</id><snippet>some_script.py</snippet></ROW><ROW><id>7825870</id><snippet>@echo off
setlocal
set test_script=.pyexe.py
rem Let's create temporary Python script which prints info we need
echo from __future__ import print_function; import sys; print(sys.executable); print(sys.version) &gt; %test_script%
echo Python accessible through the system PATH:
python %test_script%
echo ---
echo Python set as a handler for Python files:
rem We need to check if a handler set in the registry exists to prevent "Open With"
rem dialog box in case it doesn't exist
rem ftype Python.File hypothetical return value:
rem Python.File="%PYTHON_HOME%\python.exe" "%1" %*
for /f "tokens=2 delims==" %%i in ('ftype Python.File') do set reg_entry=%%i
rem ...now in 'reg_entry' variable we have everything after equal sign:
rem "%PYTHON_HOME%\python.exe" "%1" %*
set "handler="
setlocal enableDelayedExpansion
for %%A in (!reg_entry!) do if not defined handler endlocal &amp; set handler=%%A
rem ...now in 'handler' variable we have the first token:
rem "%PYTHON_HOME%\python.exe"
rem Now we expand any environment variables that might be present
rem in the handler's path
for /f "delims=" %%i in ('echo %handler%') do set expanded_handler=%%i
if exist "!expanded_handler!" (
    "%test_script%"
) else (
  if not "!handler!" == "!expanded_handler!" (
    set "handler=!expanded_handler! ^(!handler!^)"
  )
  echo Handler is set to !handler! which does not exist
)
del %test_script%
</snippet></ROW><ROW><id>7825870</id><snippet>@echo off
setlocal
echo Python accessible through the system PATH:
where python
echo ---
echo Python set as a handler for Python source files (.py):
for /f "skip=2 tokens=1,2*" %%i in ('reg query HKCR\.py /ve') do set "file_type=%%k"
for /f "skip=2 tokens=1,2*" %%i in ('reg query HKCR\%file_type%\shell\open\command /ve') do echo %%k
</snippet></ROW><ROW><id>7825870</id><snippet>@echo off
setlocal EnableDelayedExpansion
echo Python interpreter accessible through the system PATH:
where python
if not errorlevel 1 (
    python -c "from __future__ import print_function; import sys; print(sys.version)"
)
echo ---
echo Python interpreter registered as a handler for Python source files (.py):
reg query HKCR\.py /ve &gt;nul 2&gt;&amp;1
if errorlevel 1 (
    echo No "HKEY_CLASSES_ROOT\.py" registry key found
) else (
    for /f "skip=2 tokens=1,2*" %%i in ('reg query HKCR\.py /ve 2^&gt;nul') do set "file_type=%%k"
    if "!file_type!"=="(value not set)" (
        echo "No file type set for .py extension"
    ) else (
        reg query HKCR\!file_type!\shell\open\command /ve &gt;nul 2&gt;&amp;1
        if errorlevel 1 (
            echo No "HKEY_CLASSES_ROOT\!file_type!\shell\open\command" registry key found
        ) else (
            for /f "skip=2 tokens=1,2*" %%i in ('reg query HKCR\!file_type!\shell\open\command /ve 2^&gt;nul') do set "handler=%%k"
            if "!handler!"=="(value not set)" (
                echo No command set for !file_type!
            ) else (
                echo !handler!
            )
        )
    )
)
</snippet></ROW><ROW><id>7825876</id><snippet>"foo'; DELETE FROM pr;"</snippet></ROW><ROW><id>7825876</id><snippet>pr_name</snippet></ROW><ROW><id>7825876</id><snippet>group_query = Group.objects.all()
group_name = form.cleaned_data['group_name']
if group_name:
    group_query = group_query.filter(name__icontains=group_name)
org = form.cleaned_data['org']
if org:
    group_query = group_query.filter(org__name=org)
</snippet></ROW><ROW><id>7825949</id><snippet>parser_logger.setLevel(logging.INFO)
</snippet></ROW><ROW><id>7825949</id><snippet>NOTSET</snippet></ROW><ROW><id>7825949</id><snippet>WARNING</snippet></ROW><ROW><id>7826203</id><snippet>globals()</snippet></ROW><ROW><id>7826203</id><snippet>locals()</snippet></ROW><ROW><id>7826203</id><snippet>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def f(x):
...     return x
... 
&gt;&gt;&gt; globals()['f']
&lt;function f at 0x1004c0230&gt;
&gt;&gt;&gt; import types
&gt;&gt;&gt; isinstance(globals()['f'], types.FunctionType)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7826259</id><snippet>with open('.myfile', 'r') as myfile:
    header = myfile.readline().split()
    game_number, tourney_number, hand_number = header[1], header[3], header[5]
    for line in myfile:
        player_name, player_action = line.split()[1:]
</snippet></ROW><ROW><id>7826259</id><snippet>split()</snippet></ROW><ROW><id>7826704</id><snippet>from itertools import permutations

with open('List.txt') as f:    
    letters = (l.strip() for l in f if l.strip())    
    for p in permutations(letters, 2):
        print ''.join(p)
</snippet></ROW><ROW><id>7826704</id><snippet>ab
ac
ad
ba
bc
bd
ca
cb
cd
da
db
dc
</snippet></ROW><ROW><id>7826704</id><snippet>with</snippet></ROW><ROW><id>7826704</id><snippet>letters</snippet></ROW><ROW><id>7826704</id><snippet>l.strip()</snippet></ROW><ROW><id>7826704</id><snippet>itertools.permutations</snippet></ROW><ROW><id>7826704</id><snippet>itertools.combinations</snippet></ROW><ROW><id>7826704</id><snippet>ab</snippet></ROW><ROW><id>7826704</id><snippet>ba</snippet></ROW><ROW><id>7826979</id><snippet>{{ news.description|truncatewords:50 }}
</snippet></ROW><ROW><id>7827272</id><snippet>nestedExpr</snippet></ROW><ROW><id>7827272</id><snippet>import pyparsing as pp

text = '''\
///&lt;summary&gt;
/// foobar
///&lt;/summary&gt;
blah blah
///&lt;summary&gt; /// bar ///&lt;/summary&gt;
///&lt;summary&gt;  ///&lt;summary&gt; /// baz  ///&lt;/summary&gt; ///&lt;/summary&gt;    
'''

comment=pp.nestedExpr("///&lt;summary&gt;","///&lt;/summary&gt;")
for match in comment.searchString(text):
    print(match)
    # [['///', 'foobar']]
    # [['///', 'bar']]
    # [[['///', 'baz']]]
</snippet></ROW><ROW><id>7827395</id><snippet>def get(self):
    id = self.request.get('id')
    user_details = {}
    if something:
        # assign user_details['id'], user_details['photo'], user_details['first_name'] etc. values
    get_or_create_user(id, **user_details)
</snippet></ROW><ROW><id>7827759</id><snippet>import urllib

params = {}

params['access_token'] = '*****'
params['message'] = 'Hello, Arjun. I like this new API.'

params = urllib.urlencode(params)
f = urllib.urlopen("https://graph.facebook.com/arjun/feed", params)
print f.read()
</snippet></ROW><ROW><id>7828159</id><snippet>TABLE recipes
    name text primary key
    preparation text

TABLE ingredients
    recipe foreign key
    name text
    quantity double
</snippet></ROW><ROW><id>7828278</id><snippet>globals()['name']</snippet></ROW><ROW><id>7828278</id><snippet>'name'</snippet></ROW><ROW><id>7828278</id><snippet>dict</snippet></ROW><ROW><id>7828278</id><snippet>node={}
node['rootNode']=Node('Hips')
node['childNode0']=TransformNode('RightPirateLeg',node['rootNode'])
...
</snippet></ROW><ROW><id>7828384</id><snippet>telnet</snippet></ROW><ROW><id>7828384</id><snippet>% telnet kh4250-39.cselabs.umn.edu 8353
Trying 128.101.38.44... 
</snippet></ROW><ROW><id>7828384</id><snippet>telnet: connect to address 128.101.38.44: Connection timed out
</snippet></ROW><ROW><id>7828384</id><snippet>Trying</snippet></ROW><ROW><id>7828388</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree
&gt;&gt;&gt; doc = xml.etree.ElementTree.fromstring(content)
&gt;&gt;&gt; doc.findtext('creator/version')
'1.0.3'
</snippet></ROW><ROW><id>7828399</id><snippet>In [48]: import matplotlib.pyplot as pl

In [49]: target = pl.imread("r.png")

In [50]: match = pl.imread("xx.png")

In [51]: target.shape
Out[51]: (65, 173, 4)

In [52]: match.shape
Out[52]: (29, 29, 4)

In [53]: for y in range(2):
   ....:     for x in range(5):
   ....:         sub_x = 36*x
   ....:         sub_y = 36*y
   ....:         sub_target = target[sub_y:sub_y+29,sub_x:sub_x+29,:]
   ....:         if (match == sub_target).all():
   ....:             print "Match found between (%d,%d) and (%d,%d)" % (sub_x,sub_y,sub_x+29,sub_y+29)
   ....:
Match found between (72,0) and (101,29)
</snippet></ROW><ROW><id>7828413</id><snippet>name = 'foo'
longname = 'foo bar'
c=Name(name, longname)
c.func()
</snippet></ROW><ROW><id>7828413</id><snippet>name</snippet></ROW><ROW><id>7828413</id><snippet>name</snippet></ROW><ROW><id>7828413</id><snippet>func</snippet></ROW><ROW><id>7828652</id><snippet>application/json</snippet></ROW><ROW><id>7828652</id><snippet>An object is an unordered collection of zero or more name/value pairs
</snippet></ROW><ROW><id>7828652</id><snippet>The names within an object SHOULD be unique.
</snippet></ROW><ROW><id>7828652</id><snippet>"subType"</snippet></ROW><ROW><id>7828652</id><snippet>outputMode=xml</snippet></ROW><ROW><id>7828652</id><snippet>import simplejson as json
from collections import defaultdict

def multidict(ordered_pairs):
    """Convert duplicate keys values to lists."""
    # read all values into lists
    d = defaultdict(list)
    for k, v in ordered_pairs:
        d[k].append(v)

    # unpack lists that have only 1 item
    for k, v in d.items():
        if len(v) == 1:
            d[k] = v[0]
    return dict(d)

print json.JSONDecoder(object_pairs_hook=multidict).decode(text)
</snippet></ROW><ROW><id>7828652</id><snippet>text = """{
  "type": "Person",
  "subType": "Athlete",
  "subType": "AwardWinner"
}"""
</snippet></ROW><ROW><id>7828652</id><snippet>{u'subType': [u'Athlete', u'AwardWinner'], u'type': u'Person'}
</snippet></ROW><ROW><id>7828775</id><snippet>New</snippet></ROW><ROW><id>7828775</id><snippet>Test</snippet></ROW><ROW><id>7828775</id><snippet>class New:
    def __init__(self, one):
        one.run()
</snippet></ROW><ROW><id>7828775</id><snippet>import new

class Test:
    def __init__(self):
        return
    def run(self):
        return 1


if __name__ == "__main__":
    one=Test()
    two = new.New(one);
</snippet></ROW><ROW><id>7828981</id><snippet>PyPy &lt;-&gt; CPython</snippet></ROW><ROW><id>7829202</id><snippet>cat oldformat | python conversion.py &gt; outputfile</snippet></ROW><ROW><id>7829202</id><snippet>os.open</snippet></ROW><ROW><id>7829220</id><snippet>in</snippet></ROW><ROW><id>7829220</id><snippet>in</snippet></ROW><ROW><id>7829220</id><snippet>n</snippet></ROW><ROW><id>7829220</id><snippet>in</snippet></ROW><ROW><id>7829220</id><snippet>if 5 in (data.n for data in myList):
    print "Found it"
</snippet></ROW><ROW><id>7829220</id><snippet>any</snippet></ROW><ROW><id>7829220</id><snippet>if any(data.n == 5 for data in myList):
    print "Found it"
</snippet></ROW><ROW><id>7829286</id><snippet>TurboGears2</snippet></ROW><ROW><id>7829286</id><snippet>tg.devtools</snippet></ROW><ROW><id>7829286</id><snippet>easy_install -i http://www.turbogears.org/2.1/downloads/current/index tg.devtools
</snippet></ROW><ROW><id>7829295</id><snippet>PL</snippet></ROW><ROW><id>7829295</id><snippet>playlist_uri = "http://gdata.youtube.com/feeds/api/playlists/CD939C4D974A5815"
</snippet></ROW><ROW><id>7829295</id><snippet>.replace('playlists/PL', 'playlists/)</snippet></ROW><ROW><id>7829388</id><snippet>def compare(s, t):
    return Counter(s) == Counter(t)
</snippet></ROW><ROW><id>7829388</id><snippet>def compare(s, t):
    return sorted(s) == sorted(t)
</snippet></ROW><ROW><id>7829388</id><snippet>def compare(s, t):
    t = list(t)   # make a mutable copy
    try:
        for elem in s:
            t.remove(elem)
    except ValueError:
        return False
    return not t
</snippet></ROW><ROW><id>7829463</id><snippet>int fc( int N, const double a[], const double b[], double z[] )
{
    for( int i = 0;  i &lt; N;  i++ ){
        for( int j = 0;  j &lt; N;  j ++ ){
            z[(i*N)+j] = somefunction(a[i],b[j]);
    }
    return N;
}
</snippet></ROW><ROW><id>7829463</id><snippet>int fc( int N, const double a[], const double b[],const double c[], double z[] )
{
    for( int i = 0;  i &lt; N;  i++ ){
        for( int j = 0;  j &lt; N;  j ++ ){
           for( int k = 0;  k &lt; N;  k ++ ){
            z[((i*N)+j)*N+k] = somefunction(a[i],b[j],c[k]);
    }
    return N;
}
</snippet></ROW><ROW><id>7829569</id><snippet>import collections, weakref

class OrderedSet(collections.MutableSet):
    def __init__(self, values=()):
        self._od = collections.OrderedDict().fromkeys(values)
    def __len__(self):
        return len(self._od)
    def __iter__(self):
        return iter(self._od)
    def __contains__(self, value):
        return value in self._od
    def add(self, value):
        self._od[value] = None
    def discard(self, value):
        self._od.pop(value, None)

class OrderedWeakrefSet(weakref.WeakSet):
    def __init__(self, values=()):
        super(OrderedWeakrefSet, self).__init__()
        self.data = OrderedSet()
        for elem in values:
            self.add(elem)
</snippet></ROW><ROW><id>7829658</id><snippet>f.read(128)</snippet></ROW><ROW><id>7829658</id><snippet>import hashlib
from functools import partial

def md5sum(filename):
    with open(filename, mode='rb') as f:
        d = hashlib.md5()
        for buf in iter(partial(f.read, 128), b''):
            d.update(buf)
    return d.hexdigest()

print(md5sum('utils.py'))
</snippet></ROW><ROW><id>7829703</id><snippet>import operator
inverted = dict((v,k) for k,v in sorted(d.iteritems(), key=operator.itemgetter(1)))
</snippet></ROW><ROW><id>7829756</id><snippet>from multiprocessing import Process, Queue

def start_process(queue):
  while True:
    try:
        m = queue.get()
        if m == 'exit':
            print 'cleaning up worker...'
            # add here your cleaning up code
            break
        else:
            print m
    except KeyboardInterrupt:
        print 'ignore CTRL-C from worker'


if __name__ == '__main__':
  queue = Queue()

  process = Process(target=start_process, args=(queue,))
  process.start()

  queue.put(12)

  try:
    process.join()
  except KeyboardInterrupt:
    print 'wait for worker to cleanup...'
    queue.put('exit')
    process.join()

    ## or to kill anyway the worker if is not terminated after 5 seconds ...
    ## process.join(5)
    ## if process.is_alive():
    ##     process.terminate()
</snippet></ROW><ROW><id>7830648</id><snippet>TypeError: 'Queue' object does not support indexing</snippet></ROW><ROW><id>7830648</id><snippet>dict</snippet></ROW><ROW><id>7830648</id><snippet>Queue</snippet></ROW><ROW><id>7830648</id><snippet>dict</snippet></ROW><ROW><id>7830648</id><snippet>dict</snippet></ROW><ROW><id>7830648</id><snippet>my_dict</snippet></ROW><ROW><id>7830648</id><snippet>stdtypes</snippet></ROW><ROW><id>7830648</id><snippet>dict</snippet></ROW><ROW><id>7830648</id><snippet>tasks</snippet></ROW><ROW><id>7830648</id><snippet>Queue</snippet></ROW><ROW><id>7830648</id><snippet>rules()</snippet></ROW><ROW><id>7830648</id><snippet>tasks = multiprocessing.Queue()
worker = [rules(tasks) for i in xrange(num_consumers)]

def rules(dict):
    day1Count = dict[0]
    day1Value = dict[1]
    dayCurrentCount = dict[2] 
    dayCurrentValue = dict[3] 
</snippet></ROW><ROW><id>7831245</id><snippet>os.path.split</snippet></ROW><ROW><id>7831245</id><snippet>In [83]: full_path = "/dir/blah/dog.tldr"

In [84]: os.path.split(full_path)
Out[84]: ('/dir/blah', 'dog.tldr')

In [85]: os.path.split(full_path)[1]
Out[85]: 'dog.tldr'
</snippet></ROW><ROW><id>7831377</id><snippet>mysql_config --cflags</snippet></ROW><ROW><id>7831377</id><snippet>mysql_config --libs</snippet></ROW><ROW><id>7831377</id><snippet>mysql_config --cflags</snippet></ROW><ROW><id>7831377</id><snippet>mysql_config --libs</snippet></ROW><ROW><id>7831495</id><snippet>readlines</snippet></ROW><ROW><id>7831495</id><snippet>with open(infile, mode='r') as in_f, open(outfile, mode='w') as out_f:
    for line in in_f.readlines():
        ...
</snippet></ROW><ROW><id>7831495</id><snippet>with open(infile, mode='r') as in_f, open(outfile, mode='w') as out_f:
    lines = [line for line in in_f.readlines()]
    for i, line in enumerate(lines):
        if 'read' in line:
            data = lines[i+1].replace(':', '..').split('..')
            try:
                a = data[1].split('chr')[-1]
                b = data[2]
                c = data[3].split()[0]
                out_f.write('{} {} {}\n'.format(a, b, c))
            except IndexError:
                pass
</snippet></ROW><ROW><id>7831685</id><snippet>import sqlite3
connection = sqllite3.connect('~/foo.sqlite')
cursor = connection.execute('select * from bar')
</snippet></ROW><ROW><id>7831685</id><snippet>names = list(map(lambda x: x[0], cursor.description))
</snippet></ROW><ROW><id>7831800</id><snippet>import logging
logger = logging.getLogger('myapp')
hdlr = logging.FileHandler('var/myapp.log')
hdlr2 = logging.FileHandler('var/myapp2.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
hdlr2.setFormatter(formatter)
logger.addHandler(hdlr)
logger.addHandler(hdlr2)
logger.setLevel(logging.INFO)
logger.info('a log message')
</snippet></ROW><ROW><id>7831899</id><snippet>Dataset</snippet></ROW><ROW><id>7831899</id><snippet>[0, 0]</snippet></ROW><ROW><id>7831899</id><snippet>[1, 0]</snippet></ROW><ROW><id>7831899</id><snippet>[[0, 0] for i in xrange(5)] + [[1, 0] for i in xrange(5)]</snippet></ROW><ROW><id>7831899</id><snippet>xrange</snippet></ROW><ROW><id>7831899</id><snippet>for row in Dataset:
    response = row[0]
    for k in Key:
        row[i + 1] = response if random.random() &lt; k[response] else 1 - response
</snippet></ROW><ROW><id>7831899</id><snippet>[i + 1]</snippet></ROW><ROW><id>7831899</id><snippet>Dataset</snippet></ROW><ROW><id>7831899</id><snippet>import random
random.seed(1234567)
Key=[[.5,.5]]
Initial_Conditions=[0]*int(10/2) +[1]*int(10/2)

Dataset = [
    [i] + [
        i if random.random() &lt; k[i] else 1 - i
        for k in Key
    ]
    for i in Initial_Conditions
]
</snippet></ROW><ROW><id>7831942</id><snippet>&gt;&gt;&gt; class User():
    def __init__(self, first, last, age):
        self.first = first
        self.last = last
        self.age = age

&gt;&gt;&gt; user = User("John", "Doe", 25)
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; s = pickle.dumps(user)
&gt;&gt;&gt; del user
&gt;&gt;&gt; user = pickle.loads(s)    # reconstruct the object
&gt;&gt;&gt; print vars(user)
{'age': 25, 'last': 'Doe', 'first': 'John'}
</snippet></ROW><ROW><id>7832415</id><snippet>class MySQLConstants():
  DECIMAL = 0
  TINY = 1
  SHORT = 2
  LONG = 3
  FLOAT = 4
  DOUBLE = 5

  def create_dict( dicForReversing ):
    fieldTypeDic = {}
    for key, value in dicForReversing.items():
      if isinstance(value, int):
        fieldTypeDic[ value ] = key
    return fieldTypeDic
  fieldTypeDic = create_dict( vars() )
</snippet></ROW><ROW><id>7832415</id><snippet>ENUM = 247

CHAR = TINY
INTERVAL = ENUM  

def create_dict( dicForReversing ):
  fieldTypeDic = {}
  for key, value in dicForReversing.items():
    if isinstance(value, int):
      if not value in fieldTypeDic: 
        fieldTypeDic[ value ] = set()
      fieldTypeDic[ value ].add( key )
  return fieldTypeDic
fieldTypeDic = create_dict( vars() )
</snippet></ROW><ROW><id>7832437</id><snippet>from sphinx.ext import autodoc

class SimpleDocumenter(autodoc.MethodDocumenter):
    objtype = "simple"

    #do not indent the content
    content_indent = ""

    #do not add a header to the docstring
    def add_directive_header(self, sig):
        pass
</snippet></ROW><ROW><id>7832437</id><snippet>def setup(app):
    app.add_autodocumenter(SimpleDocumenter)
</snippet></ROW><ROW><id>7832437</id><snippet>.. autosimple:: mod.MyClass.my_method
</snippet></ROW><ROW><id>7832519</id><snippet>items =  [some(m['a'].split(), m['d'], m['n']) for m in dl]
</snippet></ROW><ROW><id>7832519</id><snippet>OrderedDict</snippet></ROW><ROW><id>7832519</id><snippet>items =  [some(a.split(), d, n) for a,d,n in (m.values() for m in dl)]
</snippet></ROW><ROW><id>7833063</id><snippet>Frame.__init__</snippet></ROW><ROW><id>7833063</id><snippet>class myTestFrame( tk.Frame ):
    tk.Frame.__init__(self, parent, *args, **kwargs)
</snippet></ROW><ROW><id>7833063</id><snippet>import sys
import Tkinter as tk
E=tk.E
W=tk.W
N=tk.N
S=tk.S
def main():
    app = App()
    app.master.title("Sample application")
    app.mainloop()

class App(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.grid(sticky=N+S+E+W)

        top = self.winfo_toplevel()
        top.rowconfigure(0, weight=1)
        top.columnconfigure(0, weight=1)

        self.rowconfigure(1, weight=1)
        self.columnconfigure(0, weight=1)
        self.__createWidgets()

    def __createWidgets(self):
        self.f1 = tk.Frame(self, height=100, width=200, bg='green')
        self.f1.grid(row=0, sticky=E+W)

        self.f2 = myTestFrame(self, bg='yellow', height=100, width=200)

        self.f3 = tk.Frame( self, bg = "cyan", height = 100, width = 200)
        self.f3.grid(row=2, sticky=E+W)

        self.quitButton = tk.Button(self, text="Quit", command=self.quit)
        self.quitButton.grid(row=4, column=0, sticky=E+W)

class myTestFrame( tk.Frame ):
    def __init__(self, parent, cnf={}, **kw):
        tk.Frame.__init__(self, parent, cnf, **kw)
        self.grid(row=1, sticky=N+S+E+W)
        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)                
        self.myText = tk.Text(self)
        self.myText.grid(row=0, sticky=N+S+E+W)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>7833069</id><snippet>get_model</snippet></ROW><ROW><id>7833069</id><snippet>def my_view(request):
    model_name = "myapp.MyModel"   #make sure the app name is also provided
    from django.db.models import get_model
    model_class = get_model(*model_name.split('.'))

    class MyModelForm(ModelForm):
        class Meta:
            model = model_class
        # other attributes of the form

    form = MyModelForm()
    # ... 
</snippet></ROW><ROW><id>7833621</id><snippet>def exception(self)
    try:
        Something.objects.all()
    except Exception, err:
        #print err.message (if you want)
        raise err
</snippet></ROW><ROW><id>7833642</id><snippet>a = [3, 5, 7, 9]
b = [2, 3, 4, 5]
c = [2, 4, 6, 8]

a_ex, b_ex, c_ex = zip(*(
                        [elem if elem in col else None
                            for col in a, b, c] 
                                for elem in set(a).union(b, c)
                      ))
</snippet></ROW><ROW><id>7833642</id><snippet>def paditers(*args):
    iters = [iter(x) for x in args]

    this = [next(i) for i in iters]

    while True:
        try:
            key = min(i for i in this if i != None)
        except ValueError:
            break
        for i, val in enumerate(this):
            if val == key:
                yield val
                this[i] = next(iters[i], None)
            else:
                yield None

padded = list(paditers(a, b, c))
next_item = iter(padded).next
print zip(*((next_item(), next_item(), next_item()) 
         for _ in range(len(padded) // 3)))
</snippet></ROW><ROW><id>7833963</id><snippet>import wave
import contextlib
fname = '/tmp/test.wav'
with contextlib.closing(wave.open(fname,'r')) as f:
    frames = f.getnframes()
    rate = f.getframerate()
    duration = frames / float(rate)
    print(duration)
</snippet></ROW><ROW><id>7833963</id><snippet>import math
import wave
import struct
FILENAME = "/tmp/test.wav"
freq = 440.0
data_size = 40000
frate = 1000.0
amp = 64000.0
nchannels = 2
sampwidth = 2
framerate = int(frate)
nframes = data_size
comptype = "NONE"
compname = "not compressed"
data = [(math.sin(2 * math.pi * freq * (x / frate)),
        math.cos(2 * math.pi * freq * (x / frate))) for x in range(data_size)]
try:
    wav_file = wave.open(FILENAME, 'w')
    wav_file.setparams(
        (nchannels, sampwidth, framerate, nframes, comptype, compname))
    for values in data:
        for v in values:
            wav_file.writeframes(struct.pack('h', int(v * amp / 2)))
finally:
    wav_file.close()
</snippet></ROW><ROW><id>7834652</id><snippet>print dt.strftime("%d-%m-%Y %H:%M:%S")
</snippet></ROW><ROW><id>7834734</id><snippet>F()</snippet></ROW><ROW><id>7834734</id><snippet>schedule_interval_seconds</snippet></ROW><ROW><id>7834734</id><snippet>extra()</snippet></ROW><ROW><id>7834734</id><snippet>sql = "DATE_ADD(last_check_timestamp, INTERVAL schedule.interval_seconds SECOND) &lt; DATE(NOW())"
Tasks.objects.filter(Q(last_check_timestamp__isnull=True) || Q(last_check_timestamp + datetime.timedelta(seconds=schedule__interval_seconds)))
tasks = Task.object.select_related('schedule').extra(where=[sql,]
</snippet></ROW><ROW><id>7834734</id><snippet>DATE_ADD</snippet></ROW><ROW><id>7834734</id><snippet>select_related</snippet></ROW><ROW><id>7834734</id><snippet>last_check_timestamp</snippet></ROW><ROW><id>7834734</id><snippet>extra()</snippet></ROW><ROW><id>7834734</id><snippet>Q</snippet></ROW><ROW><id>7834734</id><snippet>sql = """last_check_timestamp is NULL or DATE_ADD(last_check_timestamp, INTERVAL schedule.interval_seconds SECOND) &lt; DATE(NOW())"""
</snippet></ROW><ROW><id>7834946</id><snippet>unique_together</snippet></ROW><ROW><id>7834946</id><snippet>db_index=True</snippet></ROW><ROW><id>7835034</id><snippet>MySQLdb/cursors.py</snippet></ROW><ROW><id>7835034</id><snippet>execute()</snippet></ROW><ROW><id>7835034</id><snippet>_query()</snippet></ROW><ROW><id>7835034</id><snippet>self._executed</snippet></ROW><ROW><id>7835034</id><snippet>cursor._executed</snippet></ROW><ROW><id>7835084</id><snippet>import re
from xml.etree import ElementTree                                               

with open('films.xml') as f:                                                    
    xml = ElementTree.parse(f)                                                  

for t in xml.findall('.//{http://www.mediawiki.org/xml/export-0.5/}text'):
    print '===================='
    m = re.search(r'(?s).*?{{(Infobox film.*?)}}', t.text)
    if m:
        print m.group(1)
</snippet></ROW><ROW><id>7835084</id><snippet>(?s)</snippet></ROW><ROW><id>7835084</id><snippet>DOTALL</snippet></ROW><ROW><id>7835084</id><snippet>.</snippet></ROW><ROW><id>7835084</id><snippet>.*?</snippet></ROW><ROW><id>7835326</id><snippet>Long</snippet></ROW><ROW><id>7835497</id><snippet>?status__exact=a
</snippet></ROW><ROW><id>7835497</id><snippet>status__in=a%2Cm
</snippet></ROW><ROW><id>7835497</id><snippet>a</snippet></ROW><ROW><id>7835497</id><snippet>m</snippet></ROW><ROW><id>7835497</id><snippet>%2C</snippet></ROW><ROW><id>7835781</id><snippet>class YourView(DetailView):

    queryset = YourModel.objects.all()

    def get_object(self):
        object = super(YourView, self).get_object()
        object.views = object.views + 1
        object.save()
        return object
</snippet></ROW><ROW><id>7835787</id><snippet>import numpy as np
a = np.fromfile("file A", dtype="uint8")
b = np.fromfile("file B", dtype="uint8")

# Compute the number of bytes that are different
different_bytes = np.sum(a != b)

# Compute the sum of the differences
difference = np.sum(a - b)

# Compute the sum of the absolute value of the differences
absolute_difference = np.sum(np.abs(a - b))

# In some cases, the number of bits that have changed is a better
# measurement of change. To compute it we make a lookup array where 
# bitcount_lookup[byte] == number_of_1_bits_in_byte (so
# bitcount_lookup[0:16] == [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4])
bitcount_lookup = np.array(
    [bin(i).count("1") for i in range(256)], dtype="uint8")

# Numpy allows using an array as an index. ^ computes the XOR of
# each pair of bytes. The result is a byte with a 1 bit where the
# bits of the input differed, and a 0 bit otherwise.
bit_diff_count = np.sum(bitcount_lookup[a ^ b])
</snippet></ROW><ROW><id>7835787</id><snippet>a != b</snippet></ROW><ROW><id>7836024</id><snippet>from subclassa ...</snippet></ROW><ROW><id>7836024</id><snippet>__init__.py</snippet></ROW><ROW><id>7836356</id><snippet>threads = [threading.Thread(target=myFunc) for i in range(n)]
for t in threads:
    t.start()
...
for t in threads:
    t.join()
</snippet></ROW><ROW><id>7836356</id><snippet>threads</snippet></ROW><ROW><id>7836356</id><snippet>threading.Thread</snippet></ROW><ROW><id>7836817</id><snippet>\a</snippet></ROW><ROW><id>7836817</id><snippet>\b</snippet></ROW><ROW><id>7836817</id><snippet>r'$ \alpha $
</snippet></ROW><ROW><id>7836890</id><snippet>for i in {1..200}
  do
    curl --cookie "ACSID=your-acsid-cookie" http://your-app-id.appspot.com/populatepath
    sleep(5)
  done
</snippet></ROW><ROW><id>7837060</id><snippet>request.method</snippet></ROW><ROW><id>7837060</id><snippet>None</snippet></ROW><ROW><id>7837060</id><snippet>HttpRequest</snippet></ROW><ROW><id>7837060</id><snippet>django/http/__init__.py</snippet></ROW><ROW><id>7837060</id><snippet>class HttpRequest(object):
    ...
    def __init__(self):
        ...
        self.method = None
        ...
</snippet></ROW><ROW><id>7837060</id><snippet>HttpRequest</snippet></ROW><ROW><id>7837060</id><snippet>None</snippet></ROW><ROW><id>7837060</id><snippet>WSGIRequest</snippet></ROW><ROW><id>7837060</id><snippet>ModPythonRequest</snippet></ROW><ROW><id>7837060</id><snippet>HttpRequest.__init__</snippet></ROW><ROW><id>7837060</id><snippet>mod_wsgi</snippet></ROW><ROW><id>7837060</id><snippet>django/core/handlers/wsgi.py</snippet></ROW><ROW><id>7837060</id><snippet>class WSGIRequest(http.HttpRequest):
    ...
    def __init__(self, environ):
        ...
        self.method = environ['REQUEST_METHOD'].upper()
        ...
</snippet></ROW><ROW><id>7837060</id><snippet>request.method</snippet></ROW><ROW><id>7837060</id><snippet>None</snippet></ROW><ROW><id>7837060</id><snippet>environ['REQUEST_METHOD']</snippet></ROW><ROW><id>7837060</id><snippet>None</snippet></ROW><ROW><id>7837060</id><snippet>mod_python</snippet></ROW><ROW><id>7837060</id><snippet>django/core/handlers/modpython.py</snippet></ROW><ROW><id>7837060</id><snippet>class ModPythonRequest(http.HttpRequest):
    ...
    def _get_method(self):
        return self.META['REQUEST_METHOD'].upper()
    ...
    method = property(_get_method)
</snippet></ROW><ROW><id>7837060</id><snippet>WSGIRequest</snippet></ROW><ROW><id>7837060</id><snippet>None</snippet></ROW><ROW><id>7837060</id><snippet>django.test.client.RequestFactory.request</snippet></ROW><ROW><id>7837060</id><snippet>WSGIRequest</snippet></ROW><ROW><id>7837060</id><snippet>REQUEST_METHOD</snippet></ROW><ROW><id>7837060</id><snippet>environ</snippet></ROW><ROW><id>7837060</id><snippet>assert request.method is not None
</snippet></ROW><ROW><id>7837060</id><snippet>request.method == 'POST'</snippet></ROW><ROW><id>7837060</id><snippet>request.META.get('CONTENT_TYPE', '') is None</snippet></ROW><ROW><id>7837060</id><snippet>Content-Type</snippet></ROW><ROW><id>7837435</id><snippet>for</snippet></ROW><ROW><id>7837435</id><snippet>plugin</snippet></ROW><ROW><id>7837435</id><snippet>id</snippet></ROW><ROW><id>7837435</id><snippet>3</snippet></ROW><ROW><id>7837435</id><snippet>plugin</snippet></ROW><ROW><id>7837435</id><snippet>[...]
selection = raw_input("Enter your choice: ")
plugin = yXML.getElementsByTagName('plugin')[int(selection)]
if selection:
  [...]
</snippet></ROW><ROW><id>7837469</id><snippet>reload(handler)</snippet></ROW><ROW><id>7837469</id><snippet>handler()</snippet></ROW><ROW><id>7837469</id><snippet>dbconnection = connect(...)
while True:
    ...
    socket.send(handler(data, dbconnection))
</snippet></ROW><ROW><id>7837947</id><snippet>close</snippet></ROW><ROW><id>7837947</id><snippet>pct_change = close[1:]/close[:-1]
</snippet></ROW><ROW><id>7837947</id><snippet>pct_change = []
for row in close:
    pct_change.append(...)
</snippet></ROW><ROW><id>7837947</id><snippet>for i, row in enumerate(...)</snippet></ROW><ROW><id>7838047</id><snippet>self.foo = arg1
</snippet></ROW><ROW><id>7838047</id><snippet>self.foo</snippet></ROW><ROW><id>7838047</id><snippet>arg1</snippet></ROW><ROW><id>7838047</id><snippet>self.foo.age = 23
</snippet></ROW><ROW><id>7838047</id><snippet>arg1</snippet></ROW><ROW><id>7838047</id><snippet>Person1</snippet></ROW><ROW><id>7838047</id><snippet>person</snippet></ROW><ROW><id>7838047</id><snippet>baz(Person1)</snippet></ROW><ROW><id>7838047</id><snippet>Person1.age</snippet></ROW><ROW><id>7838047</id><snippet>bar1.foo.age</snippet></ROW><ROW><id>7838047</id><snippet>Person1</snippet></ROW><ROW><id>7838047</id><snippet>bar1.foo</snippet></ROW><ROW><id>7838047</id><snippet>person</snippet></ROW><ROW><id>7838047</id><snippet>Person1 is bar1.foo</snippet></ROW><ROW><id>7838047</id><snippet>True</snippet></ROW><ROW><id>7838047</id><snippet>def teh(arg1):
    arg1 = [3,2,1]
</snippet></ROW><ROW><id>7838047</id><snippet>arg1</snippet></ROW><ROW><id>7838047</id><snippet>meh = [1,2,3]
teh(meh)
</snippet></ROW><ROW><id>7838047</id><snippet>arg1 = meh</snippet></ROW><ROW><id>7838047</id><snippet>arg1</snippet></ROW><ROW><id>7838047</id><snippet>meh</snippet></ROW><ROW><id>7838047</id><snippet>arg1 = [3, 2, 1]</snippet></ROW><ROW><id>7838047</id><snippet>arg1</snippet></ROW><ROW><id>7838047</id><snippet>[3, 2, 1] = arg1</snippet></ROW><ROW><id>7838047</id><snippet>arg1 = meh; arg1 = [3, 2, 1]</snippet></ROW><ROW><id>7838047</id><snippet>meh</snippet></ROW><ROW><id>7838047</id><snippet>Person1</snippet></ROW><ROW><id>7838047</id><snippet>bar1</snippet></ROW><ROW><id>7838047</id><snippet>x = (4, 2)
y = x  # This is equivalent to copying the value (4, 2), because tuples are immutable
y += (1, 2, 3)  # This does not change x, because tuples are immutable; this does y = (4, 2) + (1, 2, 3)

x = [4, 2]
y = x  # This is equivalent to copying a pointer to the [4, 2] list
y += [1, 2, 3]  # This also changes x, because x and y are different names for the same (mutable) object
</snippet></ROW><ROW><id>7838047</id><snippet>y = y + [1, 2, 3]</snippet></ROW><ROW><id>7838047</id><snippet>y</snippet></ROW><ROW><id>7838047</id><snippet>y</snippet></ROW><ROW><id>7838047</id><snippet>x</snippet></ROW><ROW><id>7838102</id><snippet>urls = dict((thing.slug, thing.get_absolute_url) for thing in things)
for word in object.text.split():
  if word in urls:
     result.append('&lt;a href="'+urls[words]+'"&gt;'+word+'&lt;/a&gt; ')
  else
     result.append(word+' ')
</snippet></ROW><ROW><id>7838283</id><snippet>request.form</snippet></ROW><ROW><id>7838283</id><snippet>csrf_enabled</snippet></ROW><ROW><id>7838283</id><snippet>@app.route("/", methods=("GET", "POST"))
def submit():
    form = MyForm(request.form, csrf_enabled=False)
    if form.validate_on_submit():
        print form.data

    return render_template("index.html", form=form)
</snippet></ROW><ROW><id>7838387</id><snippet>malloc</snippet></ROW><ROW><id>7838387</id><snippet>c_void_p</snippet></ROW><ROW><id>7838387</id><snippet>int</snippet></ROW><ROW><id>7838387</id><snippet>c_char_p</snippet></ROW><ROW><id>7838387</id><snippet>malloc = ctypes.dll.msvcrt.malloc
malloc.restype = ctypes.c_void_p

pBuf = malloc(nBufSize)
...
# Convert void pointer to byte array pointer, then convert that to a string. 
# This works even if there are embedded NULs in the string.
data = ctypes.cast(pBuf, ctypes.POINTER(ctypes.c_ubyte * nBufSize))
byteData = ''.join(map(chr, data.contents))

with open(filename, mode='wb') as f:
    f.write(byteData)
</snippet></ROW><ROW><id>7838395</id><snippet>import lxml.etree as ET

content='''\
&lt;text&gt;
    The 40-Year-Old Virgin is a 2005 American buddy comedy
    film about a middle-aged man's journey to finally have sex.

    &lt;h1&gt;The plot&lt;/h1&gt;
    Andy Stitzer (Steve Carell) is the eponymous 40-year-old virgin.
    &lt;h1&gt;Cast&lt;/h1&gt;

    &lt;h1&gt;Soundtrack&lt;/h1&gt;

    &lt;h1&gt;External Links&lt;/h1&gt;
&lt;/text&gt;
'''

text=ET.fromstring(content)
print(text.text)
</snippet></ROW><ROW><id>7838395</id><snippet>    The 40-Year-Old Virgin is a 2005 American buddy comedy
    film about a middle-aged man's journey to finally have sex.
</snippet></ROW><ROW><id>7838660</id><snippet>getpass</snippet></ROW><ROW><id>7838660</id><snippet>getpass.win_getpass()</snippet></ROW><ROW><id>7838660</id><snippet>import sys

def win_getpass(prompt='Password: ', stream=None):
    """Prompt for password with echo off, using Windows getch()."""
    import msvcrt
    for c in prompt:
        msvcrt.putch(c)
    pw = ""
    while 1:
        c = msvcrt.getch()
        if c == '\r' or c == '\n':
            break
        if c == '\003':
            raise KeyboardInterrupt
        if c == '\b':
            pw = pw[:-1]
            msvcrt.putch('\b')
        else:
            pw = pw + c
            msvcrt.putch("*")
    msvcrt.putch('\r')
    msvcrt.putch('\n')
    return pw
</snippet></ROW><ROW><id>7838818</id><snippet>J * d_lambda = -G
</snippet></ROW><ROW><id>7838833</id><snippet>./conf/locale</snippet></ROW><ROW><id>7838833</id><snippet>./locale</snippet></ROW><ROW><id>7838833</id><snippet>./conf/locale</snippet></ROW><ROW><id>7838833</id><snippet>django-admin.py makemessages</snippet></ROW><ROW><id>7838833</id><snippet>./locale</snippet></ROW><ROW><id>7839023</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        widget = QtGui.QWidget(self)
        layout = QtGui.QVBoxLayout(widget)
        self.edit = QtGui.QLineEdit(self)
        self.list = QtGui.QListWidget(self)
        layout.addWidget(self.edit)
        layout.addWidget(self.list)
        self.setCentralWidget(widget)

    def eventFilter(self, source, event):
        if event.type() == QtCore.QEvent.MouseMove:
            if event.buttons() == QtCore.Qt.NoButton:
                pos = event.pos()
                self.edit.setText('x: %d, y: %d' % (pos.x(), pos.y()))
            else:
                pass # do other stuff
        return QtGui.QMainWindow.eventFilter(self, source, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    win = Window()
    win.show()
    app.installEventFilter(win)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7839025</id><snippet>pdb = [
['Cytochrome_C']
['1giw','TITLE']
['1lc1','TITLE']
['1lc2','TITLE']
]
cwd = os.path.abspath(os.getcwd())

for pdb in pdbs:
    if pdb[0] == 'Cytochrome_C':
        shutil.mkdir(os.path.join(cwd, pdb[0]))

    if len(pdb) == 2:
        s = urllib2.urlopen('http://www.pdb.org/pdb/files/%s.pdb' % pdb[0]).read()
        open(os.path.join(cwd, 'Cytochrome_C', '%s.pdb' % pdb[0]), "w").write(s)
</snippet></ROW><ROW><id>7839256</id><snippet>&gt;&gt;&gt; headers = [('content-length', '2501479'),
...  ('accept-ranges', 'bytes'),
...  ('vary', 'Accept-Encoding'),
...  ('server', 'off'),
...  ('last-modified', 'Thu, 20 Oct 2011 04:30:01 GMT'),
...  ('etag', '"2c8171a-262b67-4afb368edfffc"'),
...  ('date', 'Thu, 20 Oct 2011 16:01:11 GMT'),
...  ('content-type', 'text/plain')]
&gt;&gt;&gt; 
&gt;&gt;&gt; headers = dict(headers)
&gt;&gt;&gt; int(headers['content-length'])
2501479
</snippet></ROW><ROW><id>7839256</id><snippet>&gt;&gt;&gt; import email.utils
&gt;&gt;&gt; email.utils.parsedate(headers['date'])
(2011, 10, 20, 16, 1, 11, 0, 1, -1)
</snippet></ROW><ROW><id>7839576</id><snippet>environ['REMOTE_ADDR']</snippet></ROW><ROW><id>7839576</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>7839576</id><snippet>HTTP_X_FORWARDED_FOR</snippet></ROW><ROW><id>7839576</id><snippet>def get_client_address(environ):
    try:
        return environ['HTTP_X_FORWARDED_FOR'].split(',')[-1].strip()
    except KeyError:
        return environ['REMOTE_ADDR']
</snippet></ROW><ROW><id>7839576</id><snippet>from eventlet import wsgi
import eventlet

from pprint import pformat

def show_env(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['%s\r\n' % pformat(env)]

wsgi.server(eventlet.listen(('', 8090)), show_env)
</snippet></ROW><ROW><id>7839576</id><snippet>from eventlet import wsgi
import eventlet

from pprint import pformat

def get_client_address(environ):
    try:
        return environ['HTTP_X_FORWARDED_FOR'].split(',')[-1].strip()
    except KeyError:
        return environ['REMOTE_ADDR']

def show_env(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['%s\r\n\r\nClient Address: %s\r\n' % (pformat(env), get_client_address(env))]

wsgi.server(eventlet.listen(('', 8090)), show_env)
</snippet></ROW><ROW><id>7839644</id><snippet>In [80]: def foo():
   ....:     def bar():
   ....:         pass
   ....:     return bar
   ....: 

In [81]: id(foo())
Out[81]: 29654024

In [82]: id(foo())
Out[82]: 29651384
</snippet></ROW><ROW><id>7839714</id><snippet>class Gallery(models.Model):
    "Represents a set of images."
    # maybe a title or other fields?

class Image(models.Model):
    "Represents one image."
    # field names are usually lowercase, for clarity
    image = models.ImageField(upload_to="gallery")
    gallery = models.ForeignKey(Gallery, related_name='images')
    # you might want more fields here, e.g. title, alt_text, etc

class Tour(models.Model):
    gallery = models.OneToOneField(Gallery)

class Agency(models.Model):
    gallery = models.OneToOneField(Gallery)
</snippet></ROW><ROW><id>7839714</id><snippet>Gallery</snippet></ROW><ROW><id>7839714</id><snippet>Tour</snippet></ROW><ROW><id>7839714</id><snippet>Agency</snippet></ROW><ROW><id>7839714</id><snippet>Gallery</snippet></ROW><ROW><id>7839714</id><snippet>Tour</snippet></ROW><ROW><id>7839714</id><snippet>Agency</snippet></ROW><ROW><id>7839714</id><snippet>ForeignKey</snippet></ROW><ROW><id>7839714</id><snippet>OneToOneField</snippet></ROW><ROW><id>7839714</id><snippet>ManyToManyField</snippet></ROW><ROW><id>7839714</id><snippet>ForeignKey</snippet></ROW><ROW><id>7839714</id><snippet>Image</snippet></ROW><ROW><id>7840285</id><snippet>GObject</snippet></ROW><ROW><id>7840285</id><snippet>import pygtk
pygtk.require('2.0')
import gobject

class Car(gobject.GObject):

    __gsignals__ = {
        'engine-started': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, ()),
        'engine-stopped': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, ()),
    }

    def __init__(self):
        gobject.GObject.__init__(self)
        self._state = 0

    def start(self):
        if not self._state:
            self._state = 1
            self.emit('engine-started')

    def stop(self):
        if self._state:
            self._state = 0
            self.emit('engine-stopped')


gobject.type_register(Car)

def kill_switch(c):
    def callback(*unused, **ignored):
        c.stop()
    return callback

def on_start(*unused, **ignored):
    print "Started..."

def on_stop(*unused, **ignored):
    print "Stopped..."

some_car = Car()
some_car.connect('engine-started', on_start)
some_car.connect('engine-started', kill_switch(some_car))
some_car.connect('engine-stopped', on_stop)
some_car.start()
</snippet></ROW><ROW><id>7840596</id><snippet>'my_ip'</snippet></ROW><ROW><id>7840596</id><snippet>127.0.0.1</snippet></ROW><ROW><id>7840596</id><snippet>HOST=''</snippet></ROW><ROW><id>7840596</id><snippet>python -m SimpleHTTPServer</snippet></ROW><ROW><id>7840671</id><snippet>style = wx.SYSTEM_MENU | wx.CLOSE_BOX | wx.CLIP_CHILDREN
</snippet></ROW><ROW><id>7840772</id><snippet>FileExplor</snippet></ROW><ROW><id>7840772</id><snippet>QDialog</snippet></ROW><ROW><id>7840772</id><snippet>class FileExplor(QtGui.QDialog):
</snippet></ROW><ROW><id>7840772</id><snippet>FileExplorer</snippet></ROW><ROW><id>7840772</id><snippet>def handleShowDialog(self):
    if not hasattr(self, 'dialog'):
        self.dialog = FileExplor(self)
    self.dialog.show()
</snippet></ROW><ROW><id>7840772</id><snippet>showButton.clicked.connect(self.handleShowDialog)
</snippet></ROW><ROW><id>7840956</id><snippet>new</snippet></ROW><ROW><id>7840956</id><snippet>self</snippet></ROW><ROW><id>7840956</id><snippet>class Parent(object):
    @classmethod
    def new(cls,*args,**kwargs):
        return cls(*args,**kwargs)
class Child(Parent): pass

p=Parent()
p2=p.new()
assert isinstance(p2,Parent)
c=Child()
c2=c.new()
assert isinstance(c2,Child)
</snippet></ROW><ROW><id>7840956</id><snippet>new</snippet></ROW><ROW><id>7840956</id><snippet>self</snippet></ROW><ROW><id>7840956</id><snippet>type(self)</snippet></ROW><ROW><id>7840956</id><snippet>self</snippet></ROW><ROW><id>7840956</id><snippet>class Parent(object):
    def new(self,*args,**kwargs):
        # use `self` in some way to perhaps change `args` and/or `kwargs`
        return type(self)(*args,**kwargs)
</snippet></ROW><ROW><id>7841022</id><snippet>&gt;&gt;&gt; def a(*args):
...     x=[]
...     for i in args:
...             if '__iter__' in dir(i):
...                     x+=list(i)
...             else:
...                     x.append(i)
...     return x
... 
&gt;&gt;&gt; a(1,2,3,4)
[1, 2, 3, 4]
&gt;&gt;&gt; a(1,2,[3,4])
[1, 2, 3, 4]
&gt;&gt;&gt; a(1,2,[3,4],'123')
[1, 2, 3, 4, '123']
&gt;&gt;&gt; a(1,2,[3,4],'123', 1231, (1, 2, 3, 4))
[1, 2, 3, 4, '123', 1231, 1, 2, 3, 4]
</snippet></ROW><ROW><id>7841110</id><snippet>msgBox</snippet></ROW><ROW><id>7841110</id><snippet>msgBox = QMessageBox(self)
</snippet></ROW><ROW><id>7841601</id><snippet>App</snippet></ROW><ROW><id>7841855</id><snippet>for filename in set(newlist) - set(oldlist):
    print 'New file: ', filename
</snippet></ROW><ROW><id>7841855</id><snippet>from ftplib import FTP
import shelve

olddir = shelve.open('filelist.shl')   # create a persistent dictionary

ftp = FTP('ftp1.freebsd.org')
ftp.login()

result = []
ftp.dir(result.append)
newdir = set(result[1:])

print ' New Files '.center(50, '=')
for line in sorted(set(newdir) - set(olddir)):
    print line
    olddir[line] = ''
print ' Done '.center(50, '=')
olddir.close()
</snippet></ROW><ROW><id>7842204</id><snippet>shutil.copytree('/Full/Path', 'target',
              ignore=lambda p,f: ['Common'] if p == '/Full/Path/To/aDir' else [])
</snippet></ROW><ROW><id>7842204</id><snippet>copytree</snippet></ROW><ROW><id>7842204</id><snippet>import os.path
def ignorePath(path):
  def ignoref(p, files):
    return (f for f in files if os.abspath(os.path.join(p, f)) == path)
  return ignoref

shutil.copytree('Path', 'target', ignorePath('/Full/Path/To/aDir/Common'))
</snippet></ROW><ROW><id>7842248</id><snippet>def foo():
    while True:
        return False
</snippet></ROW><ROW><id>7842280</id><snippet>name = jobs[j]['Job_Name'][0]</snippet></ROW><ROW><id>7842280</id><snippet>name = j['Job_name'][0]</snippet></ROW><ROW><id>7842280</id><snippet>name = j</snippet></ROW><ROW><id>7842280</id><snippet>j</snippet></ROW><ROW><id>7842280</id><snippet>p=re.compile("(\\w*):?\\w*-?\\d*")</snippet></ROW><ROW><id>7842280</id><snippet>p=re.compile(r"(\w*):?\w*-?\d*")</snippet></ROW><ROW><id>7842280</id><snippet>group(1)</snippet></ROW><ROW><id>7842280</id><snippet>in</snippet></ROW><ROW><id>7842280</id><snippet>name = name.split(':')[0]</snippet></ROW><ROW><id>7842610</id><snippet>self.tbNavigate.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
...
self.actionBack.setIconText("Back")
</snippet></ROW><ROW><id>7842620</id><snippet>&gt;&gt;&gt; a = np.array([(0, 1, 2),
              (3, 4, 5)],[('x', int), ('y', float), ('z', int)]).view(np.recarray)
rec.array([(0, 1.0, 2), (3, 4.0, 5)], 
      dtype=[('x', '&lt;i4'), ('y', '&lt;f8'), ('z', '&lt;i4')])
</snippet></ROW><ROW><id>7842620</id><snippet>&gt;&gt;&gt; a.astype([('x', '&lt;f8'), ('y', '&lt;f8'), ('z', '&lt;f8')]).view('&lt;f8')
array([ 0.,  1.,  2.,  3.,  4.,  5.])
</snippet></ROW><ROW><id>7842620</id><snippet>a</snippet></ROW><ROW><id>7842620</id><snippet>a</snippet></ROW><ROW><id>7842620</id><snippet>a.astype(...)</snippet></ROW><ROW><id>7842620</id><snippet>view</snippet></ROW><ROW><id>7842620</id><snippet>a.tolist()</snippet></ROW><ROW><id>7842620</id><snippet>a.tolist()</snippet></ROW><ROW><id>7842620</id><snippet>a.astype(...)</snippet></ROW><ROW><id>7842620</id><snippet>a.astype(...).view(...)</snippet></ROW><ROW><id>7842620</id><snippet>np.array(a.tolist())</snippet></ROW><ROW><id>7842620</id><snippet>In [8]: a = np.array(zip(*[iter(xrange(300))]*3),[('x', int), ('y', float), ('z', int)]).view(np.recarray)

In [9]: %timeit a.astype([('x', '&lt;f8'), ('y', '&lt;f8'), ('z', '&lt;f8')]).view('&lt;f8')
10000 loops, best of 3: 165 us per loop

In [10]: %timeit np.array(a.tolist())
1000 loops, best of 3: 683 us per loop
</snippet></ROW><ROW><id>7842685</id><snippet>ENODEV: No such device</snippet></ROW><ROW><id>7842685</id><snippet>import errno, os

def error_text(errnumber):
  return '%s: %s' % (errno.errorcode[errnumber], os.strerror(errnumber))

print error_text(errno.ENODEV)
</snippet></ROW><ROW><id>7842937</id><snippet>python -c &lt;stuff&gt;</snippet></ROW><ROW><id>7842937</id><snippet>&lt;stuff&gt;</snippet></ROW><ROW><id>7842937</id><snippet>python -c "import sys; print sys.path"
</snippet></ROW><ROW><id>7842937</id><snippet>-p</snippet></ROW><ROW><id>7842937</id><snippet>$_</snippet></ROW><ROW><id>7842937</id><snippet>raw_input()</snippet></ROW><ROW><id>7842937</id><snippet>input()</snippet></ROW><ROW><id>7842937</id><snippet>print</snippet></ROW><ROW><id>7842937</id><snippet>print()</snippet></ROW><ROW><id>7842937</id><snippet>cat results.txt | python -c "import re, sys; print ''.join(re.sub(r'.+(\d\.\d+)\.\n', r'\1 ', line) for line in sys.stdin)"
</snippet></ROW><ROW><id>7842960</id><snippet>wget</snippet></ROW><ROW><id>7843064</id><snippet>import sys
sys.modules['os'] = None
sys.modules['system'] = None
</snippet></ROW><ROW><id>7843064</id><snippet>system</snippet></ROW><ROW><id>7843064</id><snippet>sys</snippet></ROW><ROW><id>7843455</id><snippet>return "break"</snippet></ROW><ROW><id>7843504</id><snippet>dict</snippet></ROW><ROW><id>7843504</id><snippet>In [30]: import networkx as nx

In [31]: G = nx.Graph()

In [32]: G.add_edge(1, 2, weight=3, type="green")

In [33]: G[1][2]
Out[33]: {'type': 'green', 'weight': 3}

In [34]: G[1][2]["weight"]
Out[34]: 3
</snippet></ROW><ROW><id>7843504</id><snippet>In [35]: G[1][2]["weight"] = 5

In [36]: del G[1][2]["type"]

In [37]: G[1][2]["color"] = "green"

In [38]: G[1][2]
Out[38]: {'color': 'green', 'weight': 5}
</snippet></ROW><ROW><id>7843504</id><snippet>In [39]: G.add_edge(1, 3, weight=1)

In [40]: G.add_edge(2, 3, weight=2)

In [41]: G.edges()
Out[41]: [(1, 2), (1, 3), (2, 3)]

In [42]: nx.shortest_path(G, source=1, target=2, weight="weight")
Out[42]: [1, 3, 2]
</snippet></ROW><ROW><id>7843504</id><snippet>1/max(k_i,k_j)</snippet></ROW><ROW><id>7843504</id><snippet>(i,j)</snippet></ROW><ROW><id>7843504</id><snippet>k_i</snippet></ROW><ROW><id>7843504</id><snippet>k_j</snippet></ROW><ROW><id>7843504</id><snippet>i</snippet></ROW><ROW><id>7843504</id><snippet>j</snippet></ROW><ROW><id>7843805</id><snippet>(a, b)</snippet></ROW><ROW><id>7843805</id><snippet>(a, b, c)</snippet></ROW><ROW><id>7843805</id><snippet>(a)</snippet></ROW><ROW><id>7843805</id><snippet>a</snippet></ROW><ROW><id>7843805</id><snippet>(a,)</snippet></ROW><ROW><id>7844038</id><snippet>import operator

MAKE_BINARY  = lambda opfn : lambda self,other : BinaryOp(self, asMagicNumber(other), opfn)
MAKE_RBINARY = lambda opfn : lambda self,other : BinaryOp(asMagicNumber(other), self, opfn)

class MagicNumber(object):    
    __add__  = MAKE_BINARY(operator.add)
    __sub__  = MAKE_BINARY(operator.sub)
    __mul__  = MAKE_BINARY(operator.mul)
    __div__  = MAKE_BINARY(operator.div)
    __radd__ = MAKE_RBINARY(operator.add)
    __rsub__ = MAKE_RBINARY(operator.sub)
    __rmul__ = MAKE_RBINARY(operator.mul)
    __rdiv__ = MAKE_RBINARY(operator.div)

    def __neg__(self, other):
        return UnaryOp(self, lambda x : -x)

    @property
    def value(self):
        return self.eval()

class Constant(MagicNumber):
    def __init__(self, value):
        self.value_ = value

    def eval(self):
        return self.value_

class Parameter(Constant):
    def __init__(self):
        super(Parameter, self).__init__(0.0)

    def setValue(self, v):
        self.value_ = v

    value = property(fset=setValue, fget=lambda self: self.value_)

class BinaryOp(MagicNumber):
    def __init__(self, op1, op2, operation):
        self.op1 = op1
        self.op2 = op2
        self.opn = operation

    def eval(self):
        return self.opn(self.op1.eval(), self.op2.eval())


class UnaryOp(MagicNumber):
    def __init__(self, op1, operation):
        self.op1 = op1
        self.operation = operation

    def eval(self):
        return self.opn(self.op1.eval())

asMagicNumber = lambda x : x if isinstance(x, MagicNumber) else Constant(x)
</snippet></ROW><ROW><id>7844038</id><snippet>x = Parameter()
y = 2*x*x + 3*x - x/2

x.value = 10
print y.value
# prints 225

x.value = 20
print y.value
# prints 850

# compute a series of x-y values for the function
print [(x.value, y.value) for x.value in range(5)]
# prints [(0, 0), (1, 5), (2, 13), (3, 26), (4, 42)]
</snippet></ROW><ROW><id>7844128</id><snippet>&gt;&gt;&gt; my_string = 'A,B,C,D,E'
&gt;&gt;&gt; my_list = my_string.split(",")
&gt;&gt;&gt; print my_list
['A', 'B', 'C', 'D', 'E']
</snippet></ROW><ROW><id>7844128</id><snippet>&gt;&gt;&gt; print tuple(my_list)
('A', 'B', 'C', 'D', 'E')
</snippet></ROW><ROW><id>7844128</id><snippet>&gt;&gt;&gt; my_list.append('F')
&gt;&gt;&gt; print my_list
['A', 'B', 'C', 'D', 'E', 'F']
</snippet></ROW><ROW><id>7844334</id><snippet>def __reduce__(self):
    'Return state information for pickling'
    return self.__class__, (int(self.hash_code), str(self.file_pointer))
</snippet></ROW><ROW><id>7844492</id><snippet>term_width = 50
with contextlib.closing(fileinput.input(['my_file'], inplace=True)) as f:
    for line in f:
        if line.strip():
            sys.stdout.write('_____ {l}'.format(l=line))
        else:
            sys.stdout.write('\n'.rjust(term_width, '_'))
</snippet></ROW><ROW><id>7844783</id><snippet>search_terms = ['a','b','c'] #User's search query, split into a list of strings
</snippet></ROW><ROW><id>7844783</id><snippet>keys_in_order_of_appearance = []
key_frequency = defaultdict(int)

for item in search_terms:
    subquery = SomeEntity.all(keys_only=True)                   
    subquery.filter('SearchIndex = ', item) #SearchIndex is a StringListProperty
    #more filters...            
    subquery.order('-DateCreated')                  
    for returned_item in subquery:
        key = str(returned_item)
        if key not in key_frequency:
            key_order_of_appearance.append(key)
        key_frequency[key] += 1

keys = keys_in_order_of_appearance[:]   # order of appearance kept as secondary sort
keys.sort(key=key_frequency.__getitem__, reverse=True) # descending freq as primary sort
result = SomeEntity.get(ordered_key_list)
</snippet></ROW><ROW><id>7844831</id><snippet>q</snippet></ROW><ROW><id>7844831</id><snippet>BoundedQueue</snippet></ROW><ROW><id>7844831</id><snippet>[1]</snippet></ROW><ROW><id>7844831</id><snippet>list</snippet></ROW><ROW><id>7844831</id><snippet>__eq__</snippet></ROW><ROW><id>7844831</id><snippet>repr</snippet></ROW><ROW><id>7845221</id><snippet>num_array = list()
num = raw_input("Enter how many elements you want:")
print 'Enter numbers in array: '
for i in range(int(num)):
    n = raw_input("num :")
    num_array.append(int(n))
print 'ARRAY: ',num_array
</snippet></ROW><ROW><id>7845221</id><snippet>raw_input</snippet></ROW><ROW><id>7845288</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>7845288</id><snippet>pdb</snippet></ROW><ROW><id>7845288</id><snippet>timeit</snippet></ROW><ROW><id>7845321</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>7845321</id><snippet>def deepcopy(obj):
    if isinstance(obj, dict):
        return {deepcopy(key): deepcopy(value) for key, value in obj.items()}
    if hasattr(obj, '__iter__'):
        return type(obj)(deepcopy(item) for item in obj)
    return obj
</snippet></ROW><ROW><id>7845321</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>7845490</id><snippet>fpconst</snippet></ROW><ROW><id>7845509</id><snippet>from django.http import HttpResponse</snippet></ROW><ROW><id>7846177</id><snippet>f</snippet></ROW><ROW><id>7846177</id><snippet>myfile = open(f, 'r')
</snippet></ROW><ROW><id>7846177</id><snippet>'f'</snippet></ROW><ROW><id>7846177</id><snippet>f</snippet></ROW><ROW><id>7846177</id><snippet>f</snippet></ROW><ROW><id>7846177</id><snippet>file</snippet></ROW><ROW><id>7846177</id><snippet>file</snippet></ROW><ROW><id>7846177</id><snippet>file</snippet></ROW><ROW><id>7846177</id><snippet>help</snippet></ROW><ROW><id>7846177</id><snippet>&gt;&gt;&gt; help(file)

Help on class file in module __builtin__:

class file(object)
 |  file(name[, mode[, buffering]]) -&gt; file object
 |  
 |  Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
 |  writing or appending.  The file will be created if it doesn't exist
</snippet></ROW><ROW><id>7846603</id><snippet>conn = SMTP(SMTPserver, 587)</snippet></ROW><ROW><id>7846724</id><snippet>v = np.random.randint(1, 7, (num, 4))
</snippet></ROW><ROW><id>7846724</id><snippet>num*4</snippet></ROW><ROW><id>7846724</id><snippet>[1, 7)</snippet></ROW><ROW><id>7846724</id><snippet>num</snippet></ROW><ROW><id>7846724</id><snippet>4</snippet></ROW><ROW><id>7846724</id><snippet>v = np.random.randint(1, 7, 4 * num)
z = np.reshape(v, (num, 4))
</snippet></ROW><ROW><id>7846724</id><snippet>v</snippet></ROW><ROW><id>7846724</id><snippet>z</snippet></ROW><ROW><id>7846724</id><snippet>v</snippet></ROW><ROW><id>7846724</id><snippet>v</snippet></ROW><ROW><id>7846724</id><snippet>z</snippet></ROW><ROW><id>7846724</id><snippet>z = np.reshape(v, (num, -4))
</snippet></ROW><ROW><id>7846724</id><snippet>-4</snippet></ROW><ROW><id>7846724</id><snippet>-1</snippet></ROW><ROW><id>7846724</id><snippet>(num, 4)</snippet></ROW><ROW><id>7846724</id><snippet>(num, -1)</snippet></ROW><ROW><id>7846724</id><snippet>num</snippet></ROW><ROW><id>7846724</id><snippet>[ 1 2 3 4 5 6 7 8 ]</snippet></ROW><ROW><id>7846838</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>7846884</id><snippet>class CurUserOnlyDetailView(DetailView):
    def get_object(self, *args, **kwargs):
        obj = super(CurUserOnlyDetailView, self).get_object(*args, **kwargs)
        if obj.user != self.request.user:
            raise PermissionDenied()
        else:
            return obj

class CarDetail(CurUserOnlyDetailView):
    context_object_name = 'car'
    template_name = 'my_app/car_details.html'
    model = models.Car

# another view, no DRY violation
class BikeDetail(CurUserOnlyDetailView):
    context_object_name = 'bike'
    template_name = 'my_app/bike_details.html'
    model = models.Bike
</snippet></ROW><ROW><id>7846993</id><snippet>import Image, pickle, cStringIO

i = open('button_home.gif', 'rb')
i.seek(0)
w = i.read()
i.close()
dic = {'1':w,'2':w,'3':w,'4':w}

F=open('allicons.dat','w')
pickle.dump(dic,F)
F.close()

#Ok now you take your pickled string and unpickle your object and select
#the item you want and put it in a cStringIO or StringIO so we can open
#it directly with PIL.
F=open('allicons.dat','r')
o=pickle.load(F)
F.close()

one_im = o['1']
c = cStringIO.StringIO()
c.write(one_im)
c.seek(0)
im = Image.open(c)
im.show()
</snippet></ROW><ROW><id>7847070</id><snippet>/usr/lib</snippet></ROW><ROW><id>7847070</id><snippet>/usr/local/mysql-5.5.16-osx10.6-x86_64/lib/libmysqlclient.18.dylib</snippet></ROW><ROW><id>7847490</id><snippet>upload_to</snippet></ROW><ROW><id>7848019</id><snippet>def image_path(instance, filename):
    return instance.id + os.path.splitext(filename)[1]

class Brand(models.Model):
    ...
    logo = models.ImageField(upload_to=image_path, null=True, blank=True)
</snippet></ROW><ROW><id>7848297</id><snippet>keywords = ['abc', 'def', 'ghi']

for line in f:
    if all(keyword in line for keyword in keywords):
        print line
</snippet></ROW><ROW><id>7848297</id><snippet>all</snippet></ROW><ROW><id>7848297</id><snippet>any</snippet></ROW><ROW><id>7848374</id><snippet>foo = __import__('a')
mydocstring = foo.__doc__
</snippet></ROW><ROW><id>7848374</id><snippet>import a
mydocstring = a.__doc__
</snippet></ROW><ROW><id>7848959</id><snippet>import os
f = open('/tmp/test.txt', 'w')
os.unlink(f.name)
# You can still use f here, it's just only visible for people having a handle.
# close it when you're finished.
</snippet></ROW><ROW><id>7848959</id><snippet>/dev/null</snippet></ROW><ROW><id>7849619</id><snippet>".*"
</snippet></ROW><ROW><id>7849619</id><snippet>.*</snippet></ROW><ROW><id>7849619</id><snippet>(".*")</snippet></ROW><ROW><id>7849619</id><snippet>group(0)</snippet></ROW><ROW><id>7849619</id><snippet>group(1)</snippet></ROW><ROW><id>7849619</id><snippet>(?s)".*"
</snippet></ROW><ROW><id>7849619</id><snippet>.</snippet></ROW><ROW><id>7849619</id><snippet>(?s)</snippet></ROW><ROW><id>7849619</id><snippet>DOTALL</snippet></ROW><ROW><id>7849619</id><snippet>search()</snippet></ROW><ROW><id>7849619</id><snippet>match()</snippet></ROW><ROW><id>7849619</id><snippet>match()</snippet></ROW><ROW><id>7849619</id><snippet>^".*"</snippet></ROW><ROW><id>7849619</id><snippet>search()</snippet></ROW><ROW><id>7849721</id><snippet>select([True if roles_table.c.is_admin or roles_table.c.id == 1 else False],
       roles_table.c.id == persons_table.c.role_id)
</snippet></ROW><ROW><id>7849721</id><snippet>sqlalchemy.select()</snippet></ROW><ROW><id>7849721</id><snippet>select([True], some_expression_object)
</snippet></ROW><ROW><id>7849721</id><snippet>roles_table.c.is_admin</snippet></ROW><ROW><id>7849721</id><snippet>True</snippet></ROW><ROW><id>7849721</id><snippet>sqlalchemy.sql.expression.case()</snippet></ROW><ROW><id>7849721</id><snippet>if ... else ...</snippet></ROW><ROW><id>7849721</id><snippet>column_property(
    select([case([(roles_table.c.is_admin, 1),
                  (roles_table.c.id == 1, 1)], else_=0)],
           roles_table.c.id == persons_table.c.role_id))
</snippet></ROW><ROW><id>7849721</id><snippet>Person</snippet></ROW><ROW><id>7849721</id><snippet>Role</snippet></ROW><ROW><id>7849721</id><snippet>N:1</snippet></ROW><ROW><id>7849721</id><snippet>orm.relationship</snippet></ROW><ROW><id>7849721</id><snippet>Person.role</snippet></ROW><ROW><id>7849721</id><snippet>class Person:
    # ...

    @property
    def administrator(self):
        return self.role and (self.role.is_admin or self.role.id == 1)
</snippet></ROW><ROW><id>7849761</id><snippet>m = re.search(r'(?ms).*?{{(Infobox film.*?)}}', text)
if m:
    print m.group(1)
</snippet></ROW><ROW><id>7849761</id><snippet>text</snippet></ROW><ROW><id>7849859</id><snippet>class FileAlarmForm(ModelForm):

    def __init__(self,file,*args,**kwargs):
        super(FileAlarmForm, self).__init__(*args, **kwargs)
        p = Product.objects.get(id=file.product_id)
        self.fields['alarm_type'].widget = Select(attrs={'onchange':'updateAlarmImage'})
        self.fields['alarm_type'].queryset = Alarm.objects.filter(product=p)
</snippet></ROW><ROW><id>7849903</id><snippet>sys.argv[1].startswith('http://')</snippet></ROW><ROW><id>7849903</id><snippet>from urllib2 import urlopen

try:
    f = urlopen(sys.argv[1])
except ValueError:  # invalid URL
    f = open(sys.argv[1])
</snippet></ROW><ROW><id>7850446</id><snippet>&gt;&gt;&gt; d
{1: ['1,2,3', '4,5,6', '7,8'], 2: ['9,10', '11']}
&gt;&gt;&gt; for k,v in d.iteritems():
...     d[k] = [",".join(v)]
...
&gt;&gt;&gt; d
{1: ['1,2,3,4,5,6,7,8'], 2: ['9,10,11']}
</snippet></ROW><ROW><id>7851138</id><snippet>{% friendly_load %}</snippet></ROW><ROW><id>7851138</id><snippet>{% if_has_tag %}</snippet></ROW><ROW><id>7851138</id><snippet>{% ifnot_has_tag %}</snippet></ROW><ROW><id>7851138</id><snippet>friendly_load</snippet></ROW><ROW><id>7851138</id><snippet>InvalidTemplateLibrary</snippet></ROW><ROW><id>7851138</id><snippet>if_has_tag</snippet></ROW><ROW><id>7851138</id><snippet>ifnot_has_tag</snippet></ROW><ROW><id>7851166</id><snippet>key</snippet></ROW><ROW><id>7851166</id><snippet>&gt;&gt;&gt; s = [2, 3, 1, 4, 5]
&gt;&gt;&gt; sorted(range(5), key=lambda k: s[k])
[2, 0, 1, 3, 4]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7851623</id><snippet>__init__.py</snippet></ROW><ROW><id>7851623</id><snippet>__all__</snippet></ROW><ROW><id>7851623</id><snippet>__init__.py</snippet></ROW><ROW><id>7851623</id><snippet>__all__ = ["echo", "surround", "reverse"]
</snippet></ROW><ROW><id>7851776</id><snippet>pid = subprocess.Popen(["/bin/sh", "-c", "cat", filename + "*"]);
</snippet></ROW><ROW><id>7851776</id><snippet>pid = subprocess.Popen(["cat"] + glob.glob(filename + "*"));
</snippet></ROW><ROW><id>7852037</id><snippet>os.walk()</snippet></ROW><ROW><id>7852037</id><snippet>?</snippet></ROW><ROW><id>7852037</id><snippet>for file in filesInDir(directory=u'.'):
    with open(file,'r') as f:
        print f
</snippet></ROW><ROW><id>7852037</id><snippet>def filesInDir(directory, mask=u'*.*'):
    for root, dir, files in os.walk(directory):
        for file in glob.glob(os.path.join(root, mask)):            
            yield file
</snippet></ROW><ROW><id>7852229</id><snippet>z = ZipFile(HttpFile(url))</snippet></ROW><ROW><id>7852229</id><snippet>#!/usr/bin/python
import urllib2

class HttpFile(object):
    def __init__(self, url):
        self.url = url
        self.offset = 0
        self._size = -1

    def size(self):
        if self._size &lt; 0:
            f = urllib2.urlopen(self.url)
            self._size = int(f.headers["Content-length"])
        return self._size

    def read(self, count=-1):
        req = urllib2.Request(self.url)
        if count &lt; 0:
            end = self.size() - 1
        else:
            end = self.offset + count - 1
        req.headers['Range'] = "bytes=%s-%s" % (self.offset, end)
        f = urllib2.urlopen(req)
        data = f.read()
        # FIXME: should check that we got the range expected, etc.
        chunk = len(data)
        if count &gt;= 0:
            assert chunk == count
        self.offset += chunk
        return data

    def seek(self, offset, whence=0):
        if whence == 0:
            self.offset = offset
        elif whence == 1:
            self.offset += offset
        elif whence == 2:
            self.offset = self.size() + offset
        else:
            raise Exception("Invalid whence")

    def tell(self):
        return self.offset
</snippet></ROW><ROW><id>7852279</id><snippet>MovingPixel</snippet></ROW><ROW><id>7852279</id><snippet>pix = MovingPixel()
</snippet></ROW><ROW><id>7852427</id><snippet>def groupByPrefix(strings):
    stringsByPrefix = {}
    for string in strings:
            prefix, suffix = map(str.strip, string.split("/", 1))
            group = stringsByPrefix.setdefault(prefix, [])
            group.append(suffix)
    return stringsByPrefix
</snippet></ROW><ROW><id>7852564</id><snippet>os.path.join(zipped_files_dir, folder)</snippet></ROW><ROW><id>7852564</id><snippet>get_folder_directories</snippet></ROW><ROW><id>7852564</id><snippet>import zipfile
import os
import sys

zipped_files_dir = 'Z:\Dev\some_files'

def get_folder_names():
    path_list = []
    for folder_name in os.listdir(zipped_files_dir):
        path_list.append(folder_name)
    return path_list

def get_folder_directories(folder_list):
    for folder in folder_list:
        pathname = os.path.abspath(os.path.join(zipped_files_dir, folder))
        print(pathname)

def main():
    get_folder_directories(get_folder_names())
</snippet></ROW><ROW><id>7852564</id><snippet>path_list.append(os.path.join(zipped_files_dir, folder_name))</snippet></ROW><ROW><id>7852564</id><snippet>get_folder_names()</snippet></ROW><ROW><id>7852564</id><snippet>import zipfile
import os
import sys

zipped_files_dir = 'Z:\Dev\some_files'

def get_folder_names():
    path_list = []
    for folder_name in os.listdir(zipped_files_dir):
        path_list.append(os.path.join(zipped_files_dir, folder_name))
    return path_list

def get_folder_directories(folder_list):
    for folder in folder_list:
        pathname = os.path.abspath(folder)
        print(pathname)

def main():
    get_folder_directories(get_folder_names())
</snippet></ROW><ROW><id>7852573</id><snippet>numpy.where()</snippet></ROW><ROW><id>7852573</id><snippet>&gt;&gt;&gt; print numpy.where(numpy.arange(10) &lt; 3, 'a', 'b')
['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b']
</snippet></ROW><ROW><id>7852573</id><snippet>numpy.choose()</snippet></ROW><ROW><id>7852969</id><snippet>timedelta</snippet></ROW><ROW><id>7852969</id><snippet>total_seconds()</snippet></ROW><ROW><id>7852969</id><snippet>&gt;&gt;&gt; (t-datetime.datetime(1970,1,1)).total_seconds()
1256083200.0
</snippet></ROW><ROW><id>7853030</id><snippet>headline</snippet></ROW><ROW><id>7853030</id><snippet>text</snippet></ROW><ROW><id>7853030</id><snippet>import nltk
import re

IN = re.compile (r'.*\bin\b(?!\b.+ing)')

class doc():
  pass

doc.headline=['foo']
doc.text=[nltk.Tree('ORGANIZATION', ['WHYY']), 'in', nltk.Tree('LOCATION',['Philadelphia']), '.', 'Ms.', nltk.Tree('PERSON', ['Gross']), ',']

for rel in  nltk.sem.extract_rels('ORG','LOC',doc,corpus='ieer',pattern=IN):
   print nltk.sem.relextract.show_raw_rtuple(rel)
</snippet></ROW><ROW><id>7853030</id><snippet>[ORG: 'WHYY'] 'in' [LOC: 'Philadelphia']
</snippet></ROW><ROW><id>7853030</id><snippet>extract_rels</snippet></ROW><ROW><id>7853220</id><snippet>[(k,i) for k,m in enumerate(ref, 1) for i,j in enumerate(m, 1) if 'yellow' in j]
</snippet></ROW><ROW><id>7853220</id><snippet>enumerate</snippet></ROW><ROW><id>7853319</id><snippet>file2 = open("/path/to/file2", "r")
market_names = {}
for line in file2:
  fields = line.split(",")
  market_names[int(fields[0])] = fields[1]
file2.close()

file1 = open("/path/to/file1", "r")
for line in file1:
  fields = line.split(",")
  market_name = market_names[int(fields[1])]
  # do what ever you want with the Market_Name associated with
  # the Market_ID contained in this line
file1.close()
</snippet></ROW><ROW><id>7853690</id><snippet>reader</snippet></ROW><ROW><id>7853690</id><snippet>spamReader = csv.reader(open('eggs.csv', 'r'), ...
</snippet></ROW><ROW><id>7853690</id><snippet>open('eggs.csv, 'rb')</snippet></ROW><ROW><id>7853690</id><snippet>file</snippet></ROW><ROW><id>7853690</id><snippet>9</snippet></ROW><ROW><id>7853690</id><snippet>str</snippet></ROW><ROW><id>7853690</id><snippet>9</snippet></ROW><ROW><id>7853690</id><snippet>csv.reader(open('input.csv', 'r', newline = ''))
</snippet></ROW><ROW><id>7853934</id><snippet>for card in self.thegame.game_deck.deck[0][:]:
                                          ^^^ copies the list
</snippet></ROW><ROW><id>7853934</id><snippet>game_deck = self.thegame.game_deck
game_deck.deck[0] = [card for card in game_deck.deck[0] if 'CASTLE' in card.symbols]
</snippet></ROW><ROW><id>7854016</id><snippet>def test(this=1, that=2):
    ...
</snippet></ROW><ROW><id>7854016</id><snippet>collections.namedtuple('Point', ['x', 'y'], verbose=True)</snippet></ROW><ROW><id>7854016</id><snippet>    def _replace(_self, **kwds):
        'Return a new Point object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, ('x', 'y'), _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % kwds.keys())
        return result 
</snippet></ROW><ROW><id>7854044</id><snippet>subprocess.Popen('ssh root@IP "cd /opt/msys/pe2/bin;./perlscript.pl;" -a file.csv'
</snippet></ROW><ROW><id>7854307</id><snippet>QTreeWidget</snippet></ROW><ROW><id>7854307</id><snippet>QListWidget</snippet></ROW><ROW><id>7854307</id><snippet>columns = [tree.columnWidth(index) for index in range(tree.columnCount())]
</snippet></ROW><ROW><id>7854442</id><snippet>from email.mime.text import MIMEText

msg = MIMEText('&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; CHARSET=UTF-8"&gt;&lt;/head&gt;&lt;body&gt;&lt;tt&gt;&lt;pre&gt;'
               + body
               + '&lt;/pre&gt;&lt;/tt&gt;&lt;/body&gt;&lt;/html&gt;', "html")
</snippet></ROW><ROW><id>7854637</id><snippet>PATH=$PATH:/home/user/.QtSDK/Simulator/Qt/gcc/bin/
export PATH
</snippet></ROW><ROW><id>7854639</id><snippet>class incidenceMatrix:
    def __init__(self, vertexNumber):
        self.matrix = [[] for k in range(vertexNumber)]

    def showGraph(self):
        for i, row in enumerate(self.matrix, 1):
            print i, row

    def isEdge(self, v1, v2):
        return any(x and y for x, y in zip(self.matrix[v1-1], self.matrix[v2-1]))

    def addEdge(self, v1, v2):
        for i, row in enumerate(self.matrix, 1):
            row.append(int(v1==i or v2==i))

    def removeEdge(self, v1, v2):
        num_edges = len(self.matrix[0])
        for j in range(num_edges):
            if self.matrix[v1-1][j] and self.matrix[v2-1][j]:
                for row in self.matrix:
                    del row[j]
                return
        raise Exception('Edge(%d, %d) not found' % (v1, v2))

    def removeVertex(self, v):
        targetrow = self.matrix.pop(v-1)    # fetch and delete the target vertex
        for col, selector in reversed(list(enumerate(targetrow))):
            if selector:                    # find columns that had an edge on the target row
                for row in self.matrix:
                    del row[col]            # remove that column (because the edge is gone)

if __name__ == '__main__':
    GrafIM = incidenceMatrix(5) #verticesNumber
    GrafIM.addEdge(2,3)
    GrafIM.addEdge(1,3)
    GrafIM.addEdge(2,1)
    GrafIM.addEdge(5,2)
    print GrafIM.isEdge(2,4)
    for pair in [(2,3), (1,3), (2,1), (5,2)]:
        print GrafIM.isEdge(*pair)
    GrafIM.showGraph()
    print "-------"
    GrafIM.removeEdge(2,5)
    GrafIM.showGraph()
    print "-------"
    GrafIM.removeVertex(2)
    GrafIM.showGraph()    
</snippet></ROW><ROW><id>7854639</id><snippet>, 1</snippet></ROW><ROW><id>7854639</id><snippet>-1</snippet></ROW><ROW><id>7854959</id><snippet>        copytree(src, real_dst, symlinks=True)
        rmtree(src)
</snippet></ROW><ROW><id>7854959</id><snippet>src='old'</snippet></ROW><ROW><id>7854959</id><snippet>real_dst='new/old'</snippet></ROW><ROW><id>7854959</id><snippet>copytree</snippet></ROW><ROW><id>7854959</id><snippet>old</snippet></ROW><ROW><id>7854959</id><snippet>new/old</snippet></ROW><ROW><id>7854959</id><snippet>rmtree</snippet></ROW><ROW><id>7854959</id><snippet>old</snippet></ROW><ROW><id>7854959</id><snippet>new</snippet></ROW><ROW><id>7855024</id><snippet>data = []
with open('data.txt') as f:
    for line in f:                   # loop over the rows
        fields = line.split()        # parse the columns
        rowdata = map(float, fields) # convert text to numbers
        data.extend(rowdata)         # accumulate the results
print 'Minimum:', min(data)
print 'Maximum:', max(data)
</snippet></ROW><ROW><id>7855122</id><snippet>get_by__id()</snippet></ROW><ROW><id>7855122</id><snippet>key().id()</snippet></ROW><ROW><id>7855139</id><snippet>extensions.wrapcommand</snippet></ROW><ROW><id>7855139</id><snippet>"""fogbugzreminder

Reminds the user to include a FogBugz case reference in their commit message if none is specified
"""

from mercurial import commands, extensions
import re

RE_CASE = re.compile(r'(case):?\s*\d+', re.IGNORECASE)
RE_CASENUM = re.compile(r'\d+', re.IGNORECASE)

def commit(originalcommit, ui, repo, **opts):

    haschange = False   
    for changetype in repo.status():
        if len(changetype) &gt; 0:
            haschange = True

    if not haschange and ui.config('ui', 'commitsubrepos', default=True):
        ctx = repo['.']
        for subpath in sorted(ctx.substate):
            subrepo = ctx.sub(subpath)
            if subrepo.dirty(): haschange = True

    if haschange and not opts["nofb"] and not RE_CASE.search(opts["message"]):

        casenumResponse = ui.prompt('*** Please specify a case number, x to abort, or hit enter to ignore:', '')
        casenum = RE_CASENUM.search(casenumResponse)        

        if casenum:         
            opts["message"] += ' (Case ' + casenum.group(0) + ')'
            print '*** Continuing with updated commit message: ' + opts["message"]          
        elif (casenumResponse == 'x'):
            ui.warn('*** User aborted\n')
            return False    

    return originalcommit(ui, repo, **opts)

def uisetup(ui):    
    entry = extensions.wrapcommand(commands.table, "commit", commit)
    entry[1].append(('', 'nofb', None, ('suppress the fogbugzreminder warning if no case number is present in the commit message')))
</snippet></ROW><ROW><id>7855139</id><snippet>fogbugzreminder.py</snippet></ROW><ROW><id>7855139</id><snippet>[extensions]</snippet></ROW><ROW><id>7855139</id><snippet>fogbugzreminder=[path to the fogbugzreminder.py file]
</snippet></ROW><ROW><id>7855382</id><snippet>setup = '''
d = {'a': 1}
k = 'b'
'''

LBYL = '''
if k in d:
    pass
else:
    pass
'''

EAPF = '''
try:
    d[k]
except KeyError:
    pass
'''

from timeit import Timer

print min(Timer(LBYL, setup).repeat(7, 1000000))
print min(Timer(EAPF, setup).repeat(7, 1000000))
</snippet></ROW><ROW><id>7855493</id><snippet>extensions.wrapcommand</snippet></ROW><ROW><id>7855493</id><snippet>def commit(originalcommit, ui, repo, **opts):
    return originalcommit(ui, repo, **opts)

def uisetup(ui):    
    entry = extensions.wrapcommand(commands.table, "commit", commit)
    entry[1].append(('', 'newcommitoption', None, ('Description for the new commit option')))
</snippet></ROW><ROW><id>7855618</id><snippet>options={
             "py2exe": {
                        'packages': ['wx.lib.pubsub'],
                        'includes': ['comtypes.gen._3050F1C5_98B5_11CF_BB82_00AA00BDCE0B_0_4_0'],
                        'skip_scan': ['comtypes.gen._3050F1C5_98B5_11CF_BB82_00AA00BDCE0B_0_4_0']
                        }
             },
</snippet></ROW><ROW><id>7855729</id><snippet>Pool.map</snippet></ROW><ROW><id>7855729</id><snippet>def helper(*args):
    return args[0](*args[1:])
</snippet></ROW><ROW><id>7855729</id><snippet>pool = Pool()
results = pool.map(helper, [obj.method, arg1, arg2])
</snippet></ROW><ROW><id>7855829</id><snippet>staticmethod</snippet></ROW><ROW><id>7855829</id><snippet>classmethod</snippet></ROW><ROW><id>7855907</id><snippet>def ToSeoFriendly(s, maxlen):
    '''Join with dashes, eliminate punction, clip to maxlen, lowercase.

        &gt;&gt;&gt; ToSeoFriendly("The quick. brown4 fox jumped", 14)
        'the-quick-brow'

    '''
    t = '-'.join(s.split())                                # join words with dashes
    u = ''.join([c for c in t if c.isalnum() or c=='-'])   # remove punctation   
    return u[:maxlen].rstrip('-').lower()                  # clip to maxlen

if __name__ == '__main__':
    import doctest
    print doctest.testmod()
</snippet></ROW><ROW><id>7856009</id><snippet>import random
from numpy import *
</snippet></ROW><ROW><id>7856009</id><snippet>random</snippet></ROW><ROW><id>7856009</id><snippet>import *</snippet></ROW><ROW><id>7856009</id><snippet>random</snippet></ROW><ROW><id>7856009</id><snippet>import random as rnd    # or whatever name you like
from numpy import *
</snippet></ROW><ROW><id>7856009</id><snippet>import random
import numpy as np      # or leave as numpy, or whatever name you like
</snippet></ROW><ROW><id>7856193</id><snippet>sys.argv</snippet></ROW><ROW><id>7856315</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; string_version = hashlib.md5(b'hello world').hexdigest()
</snippet></ROW><ROW><id>7856315</id><snippet>&gt;&gt;&gt; save_as_binary = string_version.encode('utf-8')
&gt;&gt;&gt; print(save_as_binary)
b'5eb63bbbe01eeed093cb22bb8f5acdc3'
</snippet></ROW><ROW><id>7856315</id><snippet>&gt;&gt;&gt; back_to_string = save_as_binary.decode('utf-8')
&gt;&gt;&gt; print(back_to_string)
5eb63bbbe01eeed093cb22bb8f5acdc3
</snippet></ROW><ROW><id>7856361</id><snippet>lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
</snippet></ROW><ROW><id>7856361</id><snippet>d = dict()
key = lol[6][0]      # cell A7
value = lol[6][3]    # cell D7
d[key] = value       # add the entry to the dictionary
 ...
</snippet></ROW><ROW><id>7856404</id><snippet>lines = inFile.readline()
</snippet></ROW><ROW><id>7856457</id><snippet>N</snippet></ROW><ROW><id>7856574</id><snippet>Py_BEGIN_ALLOW_THREADS
    a = 1 + 1;
Py_END_ALLOW_THREADS
</snippet></ROW><ROW><id>7856574</id><snippet>very_long_computation_requires_gil();
Py_BEGIN_ALLOW_THREADS;
a = a + i;
Py_END_ALLOW_THREADS;
very_long_computation_also_requires_gil();
</snippet></ROW><ROW><id>7856664</id><snippet>QWebView.linkClicked</snippet></ROW><ROW><id>7856664</id><snippet>QWebView.load</snippet></ROW><ROW><id>7856664</id><snippet>QtCore.QUrl</snippet></ROW><ROW><id>7856664</id><snippet>from PySide import QtCore, QtGui, QtWebKit

class BrowserWindow(QtWebKit.QWebView):
    def __init__(self, parent=None):
        super(BrowserWindow, self).__init__()
        self.linkClicked.connect(self.handleLinkClicked)

    def handleLinkClicked(self, url):
        print(url.toString())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    view = BrowserWindow()
    view.load(QtCore.QUrl("http://google.com"))
    view.page().setLinkDelegationPolicy(
        QtWebKit.QWebPage.DelegateAllLinks)
    view.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7856837</id><snippet>from tkinter import *
import threading

class MyApp:
    def __init__(self, root):
        self.root = root
        self.timer_evt = threading.Event()
        cf = Frame(root, borderwidth=1, relief="raised")
        cf.pack()
        Button(cf, text="Run", command=self.Run).pack(fill=X)
        Button(cf, text="Pause", command=self.Pause).pack(fill=X)
        Button(cf, text="Kill", command=self.Kill).pack(fill=X)

    def process_stuff(self):        # processing threads
        while self.go:
            print("Spam... ")
            self.timer_evt.wait()
            self.timer_evt.clear()

    def Run(self):                  # start another thread
        self.go = 1
        threading.Thread(target=self.process_stuff, name="_proc").start()
        self.root.after(0, self.tick)

    def Pause(self):
        self.go = 0

    def Kill(self):                 # wake threads up so they can die
        self.go = 0
        self.timer_evt.set()

    def tick(self):
        if self.go:
            self.timer_evt.set()    # unblock processing threads
            self.root.after(1000, self.tick)

def main():
    root = Tk()
    root.title("ProcessingThread")
    app = MyApp(root)
    root.mainloop()

main()
</snippet></ROW><ROW><id>7856877</id><snippet>AttributeError</snippet></ROW><ROW><id>7856877</id><snippet>Worm.move()</snippet></ROW><ROW><id>7856877</id><snippet>Worm.draw()</snippet></ROW><ROW><id>7856877</id><snippet>AttributeError</snippet></ROW><ROW><id>7856877</id><snippet>draw()</snippet></ROW><ROW><id>7856877</id><snippet>Worm</snippet></ROW><ROW><id>7856877</id><snippet> 43     def move(self):
 44         """ Move the worm. """
 45         self.x += self.vx
 46         self.y += self.vy
 47 
 48         if (self.x, self.y) in self.body:
 49             self.crashed = True
 50 
 51         self.body.insert(0, (self.x, self.y))
 52 
 53         if (self.grow_to &gt; self.length):
 54             self.length += 1
 55 
 56         if len(self.body) &gt; self.length:
 57             self.body.pop()
 58
 59     def draw(self):
 60         #for x, y in self.body:
 61         #    self.surface.set_at((x, y), self.color)
 62         x, y = self.body[0]
 63         self.surface.set_at((x, y), self.color)
 64         x, y = self.body[-1]
 65         self.surface.set_at((x, y), (0, 0, 0))
</snippet></ROW><ROW><id>7856877</id><snippet>AttributeError</snippet></ROW><ROW><id>7856877</id><snippet>Worm.vx</snippet></ROW><ROW><id>7856877</id><snippet>vy</snippet></ROW><ROW><id>7856877</id><snippet>Worm.__init__()</snippet></ROW><ROW><id>7856877</id><snippet>__init__()</snippet></ROW><ROW><id>7856877</id><snippet>def __init__(self, surface):
    ...
    ...
    self.vx = 0
    self.vy = -1
    ...
    ...
</snippet></ROW><ROW><id>7857179</id><snippet>&gt;&gt;&gt; salt = '\\0001\\072\\206\\277\\354\\107\\134\\061\\361\\076\\150\\047\\010\\
124\\200\\315\\100'
&gt;&gt;&gt; md5(salt).hexdigest()
'ce24166858853dfb12a86d7d602b0638'
</snippet></ROW><ROW><id>7857179</id><snippet>&gt;&gt;&gt; salt = '\\0001\\072\\206\\277\\354\\107\\134\\061\\361\\076\\150\\047\\010\\
124\\200\\315\\100'
&gt;&gt;&gt; md5(salt).hexdigest()
'ce24166858853dfb12a86d7d602b0638'
</snippet></ROW><ROW><id>7857179</id><snippet>data = ['\\0001', '\\072', '\\206', '\\277', '\\354', '\\107', '\\134', 
        '\\061', '\\361', '\\076', '\\150', '\\047', '\\010', '\\124', 
        '\\200', '\\315', '\\100']
</snippet></ROW><ROW><id>7857179</id><snippet>salt = ''.join(chr(int(d[1:], 8)) for d in data)
print repr(salt)
print md5(salt).hexdigest()
</snippet></ROW><ROW><id>7857179</id><snippet>"\x01:\x86\xbf\xecG\\1\xf1&gt;h'\x08T\x80\xcd@"
d2092426d1bd5bec1579c8b7ed9c73c2
</snippet></ROW><ROW><id>7857403</id><snippet>zipfile.open</snippet></ROW><ROW><id>7857403</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>7857403</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>7857403</id><snippet>newline=None</snippet></ROW><ROW><id>7857403</id><snippet>import zipfile
import io

zf = zipfile.ZipFile('data/test_zip.zip')
for filename in zf.namelist():
    with zf.open(filename, 'r') as f:
        words = io.TextIOWrapper(f, newline=None)
        for line in words:
            print(repr(line))
</snippet></ROW><ROW><id>7857403</id><snippet>'This is a test line...\n'
'This is a test line...'
</snippet></ROW><ROW><id>7857403</id><snippet>print</snippet></ROW><ROW><id>7857403</id><snippet>print(words.read())</snippet></ROW><ROW><id>7857403</id><snippet>end</snippet></ROW><ROW><id>7857403</id><snippet>print(line, end='')</snippet></ROW><ROW><id>7857554</id><snippet>import csv

original = file('southpark.csv', 'rU')
reader = csv.reader(original)

for row in reader:
    #will print each row by itself (all columns from names up to what they wear)
    print row
    print "-----------------"
    #will print first column (character names only)
    print row[0]
</snippet></ROW><ROW><id>7857554</id><snippet>import csv</snippet></ROW><ROW><id>7857554</id><snippet>for</snippet></ROW><ROW><id>7857554</id><snippet>print row</snippet></ROW><ROW><id>7857554</id><snippet>['Stan Marsh', 'DOB: October 19th', 'Dude!', 'Aww #$%^!', 'Star Quarterback', 'Wendy', 'red gloves']

-----------------
['Kyle Broflovski', 'DOB: May 26th', 'Kick the baby!', 'You ***!', 'Jewish', 'Canadian', 'Ushanka']
-----------------
['Eric Theodore Cartman', 'DOB: July 1', 'Respect My Authroitah!', 'Mooom!', 'Big-boned', 'Political
ly incorrect', 'Knit-cap!']
-----------------
['Kenny McCormick', 'DOB: March 22', 'DOD: Every other week', 'Mmff Mmff', 'MMMFFF!!!', 'Mysterion!'
, 'Orange Parka']
-----------------
['Leopold Butters Stotch', 'DOB:Younger than the others!', 'The 4th friend', 'Professor chaos', 'stu
tter', 'innocent', 'nerdy']
-----------------
</snippet></ROW><ROW><id>7857554</id><snippet>print row[0]</snippet></ROW><ROW><id>7857554</id><snippet>A=0, B=1, C=2, etc...</snippet></ROW><ROW><id>7857554</id><snippet>print</snippet></ROW><ROW><id>7857554</id><snippet>-----------------
Stan Marsh
-----------------
Kyle Broflovski
-----------------
Eric Theodore Cartman
-----------------
Kenny McCormick
-----------------
Leopold Butters Stotch
</snippet></ROW><ROW><id>7857554</id><snippet>print "-----------------"</snippet></ROW><ROW><id>7857554</id><snippet>import csv

original = file('southpark.csv', 'rU')
reader = csv.reader(original)

stan = reader.next()
kyle = reader.next()
eric = reader.next()
kenny = reader.next()
butters = reader.next()

print eric
</snippet></ROW><ROW><id>7857554</id><snippet>['Eric Theodore Cartman', 'DOB: July 1', 'Respect My Authroitah!', 'Mooom!', 'Big-boned', 'Politically incorrect', 'Knit-cap!']
</snippet></ROW><ROW><id>7857880</id><snippet>&gt;&gt;&gt; def run():
...   print 'run'
... 
&gt;&gt;&gt; def walk():
...   print 'walk'
... 
&gt;&gt;&gt; def talk():
...    print 'talk'
&gt;&gt;&gt; switch={'run':run,'walk':walk,'talk':talk}
&gt;&gt;&gt; switch['run']()
run
</snippet></ROW><ROW><id>7857880</id><snippet>&gt;&gt;&gt; switch={0:run,1:walk} 
&gt;&gt;&gt; switch[0]()
run
&gt;&gt;&gt; switch[max(0,1)]()
walk
</snippet></ROW><ROW><id>7857880</id><snippet>switch / default</snippet></ROW><ROW><id>7857880</id><snippet>&gt;&gt;&gt; default_value=1
&gt;&gt;&gt; try:
...    switch[49]()
... except KeyError:
...    switch[default_value]()
</snippet></ROW><ROW><id>7857880</id><snippet>&gt;&gt;&gt; switch[switch.get(49,default_value)]()
walk
</snippet></ROW><ROW><id>7857880</id><snippet>&gt;&gt;&gt; def get_t1():
...    return 0
... 
&gt;&gt;&gt; def get_t2():
...    return 1
... 
&gt;&gt;&gt; switch={(get_t1(),get_t2()):run}
&gt;&gt;&gt; switch
{(0, 1): &lt;function run at 0x100492d70&gt;}
</snippet></ROW><ROW><id>7858482</id><snippet>getattr</snippet></ROW><ROW><id>7858482</id><snippet>data.single_arg</snippet></ROW><ROW><id>7858482</id><snippet>single_arg = 'data2'
data.single_arg = 100

# you can NOT set an attribute by a string this way. 
# You're just setting an attribute called single_arg to 100 which isn't a model 
# field, so it's not going to be saved.
</snippet></ROW><ROW><id>7858482</id><snippet>setattr</snippet></ROW><ROW><id>7858482</id><snippet>single_arg = 'data2'
data = Data.objects.get(id=1)
setattr(data, single_arg, 100)
data.save()
</snippet></ROW><ROW><id>7858482</id><snippet>data_entry</snippet></ROW><ROW><id>7858482</id><snippet>single_arg</snippet></ROW><ROW><id>7858482</id><snippet>getattr(data_entry, single_arg)</snippet></ROW><ROW><id>7858482</id><snippet>single_arg</snippet></ROW><ROW><id>7858534</id><snippet>__getitem__</snippet></ROW><ROW><id>7858534</id><snippet>class A:
    def __getitem__(self, index):
        return index+1

a = A()
print(a[1]) # prints 2
</snippet></ROW><ROW><id>7858534</id><snippet>__getitem__</snippet></ROW><ROW><id>7858534</id><snippet>A[i,j]</snippet></ROW><ROW><id>7858790</id><snippet>icom</snippet></ROW><ROW><id>7858790</id><snippet>[buildout]</snippet></ROW><ROW><id>7858790</id><snippet>[buildout]
...
eggs =
   icom
   sqlalchemy
   flask
   scss
</snippet></ROW><ROW><id>7858790</id><snippet>[icom]</snippet></ROW><ROW><id>7858790</id><snippet>[icom]
recipe = zc.recipe.egg
eggs =
    icom
    ${buildout:eggs}
...
</snippet></ROW><ROW><id>7858923</id><snippet>sudo port select python python26
</snippet></ROW><ROW><id>7858967</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>7858967</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>7858967</id><snippet>def myview(request):
    image = request.FILES['imageName_1'] 
    tour = Tour()
    tour.Name = request.POST.get('name')
    tour.capacity = request.POST.get('capacity')
    tour.image.save(image.name, image)
    tour.save()
</snippet></ROW><ROW><id>7858967</id><snippet>class MyForm(forms.ModelForm):
   class Meta:
       model = Tour

def myview(self):     
    if request.method == 'POST':
        form = MyForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
    else:
        form = MyForm()
    return render(request, 'my_template.html', {'form': form})


&lt;form method='POST' enctype="multipart/form-data"&gt;
    {% csrf_token %}
    {{ form.as_p }}
    &lt;input type="submit" /&gt;
&lt;/form&gt;    
</snippet></ROW><ROW><id>7859208</id><snippet>numpy</snippet></ROW><ROW><id>7859208</id><snippet>def getRoundedThresholdv1(a, MinClip):
    return round(float(a) / MinClip) * MinClip
</snippet></ROW><ROW><id>7859208</id><snippet>a</snippet></ROW><ROW><id>7859208</id><snippet>round</snippet></ROW><ROW><id>7859208</id><snippet>np.round</snippet></ROW><ROW><id>7859208</id><snippet>float(a)</snippet></ROW><ROW><id>7859208</id><snippet>np.array(a, dtype=float)</snippet></ROW><ROW><id>7859316</id><snippet>comment = cd["email"],
</snippet></ROW><ROW><id>7859541</id><snippet>ESC</snippet></ROW><ROW><id>7859926</id><snippet>QSql*Model</snippet></ROW><ROW><id>7859926</id><snippet>QAbstractProxyModel</snippet></ROW><ROW><id>7859926</id><snippet>QAbstractProxyModel</snippet></ROW><ROW><id>7859926</id><snippet>QAbstractProxyModel</snippet></ROW><ROW><id>7859926</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>7859926</id><snippet>import sys
from collections import namedtuple
import random

from PyQt4 import QtCore, QtGui

groupItem = namedtuple("groupItem",["name","children","index"])
rowItem = namedtuple("rowItem",["groupIndex","random"])


class GrouperProxyModel(QtGui.QAbstractProxyModel):
    def __init__(self, parent=None):
        super(GrouperProxyModel, self).__init__(parent)

        self._rootItem = QtCore.QModelIndex()
        self._groups = []       # list of groupItems
        self._groupMap = {}     # map of group names to group indexes
        self._groupIndexes = [] # list of groupIndexes for locating group row
        self._sourceRows = []   # map of source rows to group index
        self._groupColumn = 0   # grouping column.

    def setSourceModel(self, source, groupColumn=0):
        super(GrouperProxyModel, self).setSourceModel(source)

        # connect signals
        self.sourceModel().columnsAboutToBeInserted.connect(self.columnsAboutToBeInserted.emit)
        self.sourceModel().columnsInserted.connect(self.columnsInserted.emit)
        self.sourceModel().columnsAboutToBeRemoved.connect(self.columnsAboutToBeRemoved.emit)
        self.sourceModel().columnsRemoved.connect(self.columnsRemoved.emit)

        self.sourceModel().rowsInserted.connect(self._rowsInserted)
        self.sourceModel().rowsRemoved.connect(self._rowsRemoved)
        self.sourceModel().dataChanged.connect(self._dataChanged)

        # set grouping
        self.groupBy(groupColumn)

    def rowCount(self, parent):
        if parent == self._rootItem:
            # root level
            return len(self._groups)
        elif parent.internalPointer() == self._rootItem:
            # children level
            return len(self._groups[parent.row()].children)
        else:
            return 0

    def columnCount(self, parent):
        if self.sourceModel():
            return self.sourceModel().columnCount(QtCore.QModelIndex())
        else:
            return 0

    def index(self, row, column, parent):
        if parent == self._rootItem:
            # this is a group
            return self.createIndex(row,column,self._rootItem)
        elif parent.internalPointer() == self._rootItem:
            return self.createIndex(row,column,self._groups[parent.row()].index)
        else:
            return QtCore.QModelIndex()

    def parent(self, index):
        parent =  index.internalPointer()
        if parent == self._rootItem:
            return self._rootItem
        else:
            parentRow = self._getGroupRow(parent)
            return self.createIndex(parentRow,0,self._rootItem)

    def data(self, index, role):
        if role == QtCore.Qt.DisplayRole:
            parent = index.internalPointer()
            if parent == self._rootItem:
                return self._groups[index.row()].name
            else:
                parentRow = self._getGroupRow(parent)
                sourceRow = self._sourceRows.index(self._groups[parentRow].children[index.row()])
                sourceIndex = self.createIndex(sourceRow, index.column(), 0)
                return self.sourceModel().data(sourceIndex, role)
        return None

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable

    def headerData(self, section, orientation, role):
        return self.sourceModel().headerData(section, orientation, role)

    def mapToSource(self, index):
        if not index.isValid():
            return QtCore.QModelIndex()

        parent = index.internalPointer()
        if not parent.isValid():
            return QtCore.QModelIndex()
        elif parent == self._rootItem:
            return QtCore.QModelIndex()
        else:
            rowItem_ = self._groups[parent.row()].children[index.row()]
            sourceRow = self._sourceRows.index(rowItem_)
            return self.createIndex(sourceRow, index.column(), QtCore.QModelIndex())

    def mapFromSource(self, index):
        rowItem_ = self._sourceRows[index.row()]
        groupRow = self._getGroupRow(rowItem_.groupIndex)
        itemRow = self._groups[groupRow].children.index(rowItem_)
        return self.createIndex(itemRow,index.column(),self._groupIndexes[groupRow])

    def _clearGroups(self):
        self._groupMap = {}
        self._groups = []
        self._sourceRows = []

    def groupBy(self,column=0):
        self.beginResetModel()
        self._clearGroups()
        self._groupColumn = column
        sourceModel = self.sourceModel()
        for row in range(sourceModel.rowCount(QtCore.QModelIndex())):
            groupName = sourceModel.data(self.createIndex(row,column,0),
                                         QtCore.Qt.DisplayRole)

            groupIndex = self._getGroupIndex(groupName)
            rowItem_ = rowItem(groupIndex,random.random())
            self._groups[groupIndex.row()].children.append(rowItem_)
            self._sourceRows.append(rowItem_)

        self.endResetModel()

    def _getGroupIndex(self, groupName):
        """ return the index for a group denoted with name.
        if there is no group with given name, create and then return"""
        if groupName in self._groupMap:
            return self._groupMap[groupName]
        else:
            groupRow = len(self._groupMap)
            groupIndex = self.createIndex(groupRow,0,self._rootItem)
            self._groupMap[groupName] = groupIndex
            self._groups.append(groupItem(groupName,[],groupIndex))
            self._groupIndexes.append(groupIndex)
            self.layoutChanged.emit()
            return groupIndex

    def _getGroupRow(self, groupIndex):
        for i,x in enumerate(self._groupIndexes):
            if id(groupIndex)==id(x):
                return i
        return 0

    def _rowsInserted(self, parent, start, end):
        for row in range(start, end+1):
            groupName = self.sourceModel().data(self.createIndex(row,self._groupColumn,0),
                                                QtCore.Qt.DisplayRole)
            groupIndex = self._getGroupIndex(groupName)
            self._getGroupRow(groupIndex)
            groupItem_ = self._groups[self._getGroupRow(groupIndex)]
            rowItem_ = rowItem(groupIndex,random.random())
            groupItem_.children.append(rowItem_)
            self._sourceRows.insert(row, rowItem_)
        self.layoutChanged.emit()

    def _rowsRemoved(self, parent, start, end):
        for row in range(start, end+1):
            rowItem_ = self._sourceRows[start]
            groupIndex = rowItem_.groupIndex
            groupItem_ = self._groups[self._getGroupRow(groupIndex)]
            childrenRow = groupItem_.children.index(rowItem_)
            groupItem_.children.pop(childrenRow)
            self._sourceRows.pop(start)
            if not len(groupItem_.children):
                # remove the group
                groupRow = self._getGroupRow(groupIndex)
                groupName = self._groups[groupRow].name
                self._groups.pop(groupRow)
                self._groupIndexes.pop(groupRow)
                del self._groupMap[groupName]
        self.layoutChanged.emit()

    def _dataChanged(self, topLeft, bottomRight):
        topRow = topLeft.row()
        bottomRow = bottomRight.row()
        sourceModel = self.sourceModel()
        # loop through all the changed data
        for row in range(topRow,bottomRow+1):
            oldGroupIndex = self._sourceRows[row].groupIndex
            oldGroupItem = self._groups[self._getGroupRow(oldGroupIndex)]
            newGroupName = sourceModel.data(self.createIndex(row,self._groupColumn,0),QtCore.Qt.DisplayRole)
            if newGroupName != oldGroupItem.name:
                # move to new group...
                newGroupIndex = self._getGroupIndex(newGroupName)
                newGroupItem = self._groups[self._getGroupRow(newGroupIndex)]

                rowItem_ = self._sourceRows[row]
                newGroupItem.children.append(rowItem_)

                # delete from old group
                oldGroupItem.children.remove(rowItem_)
                if not len(oldGroupItem.children):
                    # remove the group
                    groupRow = self._getGroupRow(oldGroupItem.index)
                    groupName = oldGroupItem.name
                    self._groups.pop(groupRow)
                    self._groupIndexes.pop(groupRow)
                    del self._groupMap[groupName]

        self.layoutChanged.emit()
</snippet></ROW><ROW><id>7859988</id><snippet> #data - stuff between text tags
 firstparagraph = re.search("}}(.*?)\r*\n\r*\n",data,re.DOTALL)
 print firstparagraph.group(1)
</snippet></ROW><ROW><id>7860199</id><snippet>Vehicles.objects.all()</snippet></ROW><ROW><id>7860199</id><snippet>raise VehicleDoesNotExists(...)</snippet></ROW><ROW><id>7860292</id><snippet>pattern = re.compile(r'^(...)+')
</snippet></ROW><ROW><id>7860292</id><snippet>re.findall()</snippet></ROW><ROW><id>7860349</id><snippet>sql = """INSERT INTO pmass_experiment (user,filetype,createddate,uploaddate,time,size,located)
    VALUES (user, ftype, date, date, time, size, located)"""
</snippet></ROW><ROW><id>7860349</id><snippet>cursor.execute</snippet></ROW><ROW><id>7860349</id><snippet>sql = """INSERT INTO pmass_experiment (user,filetype,createddate,uploaddate,time,size,located)
         VALUES (%s, %s, %s, %s, %s, %s, %s)"""
try:
   # Execute the SQL command
   cursor.execute(sql,(user, ftype, date, date, time, size, located))
   # Commit your changes in the database
   conn.commit()
except Exception as err:
   # logger.error(err) 
   # Rollback in case there is any error
   conn.rollback()
</snippet></ROW><ROW><id>7860349</id><snippet>INSERT INTO pmass_experiment (user,filetype,createddate,uploaddate,time,size,located)
    VALUES (user, ftype, date, date, time, size, located)
</snippet></ROW><ROW><id>7860349</id><snippet>mysql</snippet></ROW><ROW><id>7860349</id><snippet>mysql&gt; insert into foo (first,last,value) values (first,last,value);
Query OK, 1 row affected (0.00 sec)
mysql&gt; select * from foo order by id desc;
+-----+-------+------+-------+
| id  | first | last | value |
+-----+-------+------+-------+
| 802 | NULL  | NULL |  NULL | 
+-----+-------+------+-------+
1 row in set (0.00 sec)
</snippet></ROW><ROW><id>7860583</id><snippet>zf.namelist()</snippet></ROW><ROW><id>7860583</id><snippet>for line in words</snippet></ROW><ROW><id>7860583</id><snippet>new_file.write('\n')</snippet></ROW><ROW><id>7860691</id><snippet>from cmd import Cmd

class PipelineExample(Cmd):

    def do_greet(self, person):
        if person:
            greeting = "hello, " + person
        else:
            greeting = 'hello'
        self.output = greeting

    def do_echo(self, text):
        self.output = text

    def do_pipe(self, args):
        buffer = None
        for arg in args:
            s = arg
            if buffer:
                # This command just adds the output of a previous command as the last argument
                s += ' ' + buffer
            self.onecmd(s)
            buffer = self.output

    def postcmd(self, stop, line):
        if hasattr(self, 'output') and self.output:
            print self.output
            self.output = None
        return stop

    def parseline(self, line):
        if '|' in line:
            return 'pipe', line.split('|'), line
        return Cmd.parseline(self, line)

    def do_EOF(self, line):
        return True

if __name__ == '__main__':
    PipelineExample().cmdloop()
</snippet></ROW><ROW><id>7860691</id><snippet>(Cmd) greet wong
hello, wong
(Cmd) echo wong | greet
hello, wong
(Cmd) echo wong | greet | greet
hello, hello, wong
</snippet></ROW><ROW><id>7860905</id><snippet>if not os.path.exists("E:/Contact"):
    os.mkdir("E:/Contact")  
</snippet></ROW><ROW><id>7861680</id><snippet>s = 'term:foo term:"foo bar" term:bar foo term:"foo term:'
re.findall(r'(?&lt;=term:)[^" ]+|(?&lt;=term:")[^"]+(?=")', s)
</snippet></ROW><ROW><id>7861680</id><snippet>['foo', 'foo bar', 'bar']
</snippet></ROW><ROW><id>7861953</id><snippet>%</snippet></ROW><ROW><id>7861953</id><snippet>f.write("add unit at-wc 0 0 0 %s %s %s 0.000 0.000 0.000 " % (x, y, z))
</snippet></ROW><ROW><id>7861953</id><snippet>x, y, z</snippet></ROW><ROW><id>7861953</id><snippet>%</snippet></ROW><ROW><id>7861953</id><snippet>write()</snippet></ROW><ROW><id>7861953</id><snippet>f.write(
    "add unit at-wc 0 0 0 %s" % x,
    y,
    z,
    "0.000 0.000 0.000 "
)
</snippet></ROW><ROW><id>7862033</id><snippet>sum([x[0] * x[1] for x in combinations(args, 2)])
</snippet></ROW><ROW><id>7862033</id><snippet>sum([x*y for x,y in combinations(args, 2)])
</snippet></ROW><ROW><id>7862033</id><snippet>In : a=[1,2,3,4,5,6]

In : from operator import mul

In : reduce(mul,a)
Out: 720
</snippet></ROW><ROW><id>7862193</id><snippet>testposition = (22, 3, 1, 2, 18, 19, 5, 6, 8, 9, 12, 23)

def giveme(s, words=()):
    lista = s.split(' ',22)
    result=[lista[item-1] for item in words]
    return result

rec='Lorem ipsum dolor sit amet consectetur adipiscing elit In vitae neque nec magna tristique ornare Cras faucibus risus eu odio pharetra interdum Nunc dui mi rhoncus ut aliquet'
print(giveme(rec, testposition)[-1])
</snippet></ROW><ROW><id>7862193</id><snippet>'Nunc dui mi rhoncus ut aliquet'
</snippet></ROW><ROW><id>7862193</id><snippet>rec='Lorem ipsum dolor sit amet consectetur adipiscing elit In vitae neque nec magna tristique ornare Cras faucibus risus eu odio pharetra interdum Nunc dui mi'
print(giveme(rec, testposition)[-1])
</snippet></ROW><ROW><id>7862193</id><snippet>'Nunc dui mi'
</snippet></ROW><ROW><id>7862243</id><snippet>easygui.enterbox</snippet></ROW><ROW><id>7862243</id><snippet>message</snippet></ROW><ROW><id>7862243</id><snippet>argDefaultText</snippet></ROW><ROW><id>7862243</id><snippet>import easygui
result = easygui.enterbox(msg='Enter your name', title='Name query', default='Ian Ozsvald')
</snippet></ROW><ROW><id>7862243</id><snippet>enterbox</snippet></ROW><ROW><id>7862257</id><snippet>cmd</snippet></ROW><ROW><id>7862257</id><snippet>subprocess.check_output(['cmd', '/c', 'ftype http'])
</snippet></ROW><ROW><id>7862294</id><snippet>command_*()</snippet></ROW><ROW><id>7862294</id><snippet>privmsg()</snippet></ROW><ROW><id>7862294</id><snippet>getattr(self, 'command_'+command_name, None)</snippet></ROW><ROW><id>7862461</id><snippet>DictionaryGrid</snippet></ROW><ROW><id>7862651</id><snippet>execfile(file_content)</snippet></ROW><ROW><id>7862651</id><snippet>print x</snippet></ROW><ROW><id>7862651</id><snippet>x</snippet></ROW><ROW><id>7862721</id><snippet>program.py:1: 'service' imported but unused
program.py:6: 'defer' imported but unused
program.py:21: undefined name 'succeed'
program.py:48: local variable 'd' is assigned to but never used
program.py:57: undefined name 'application'
</snippet></ROW><ROW><id>7862721</id><snippet>NameError</snippet></ROW><ROW><id>7862721</id><snippet>NameError</snippet></ROW><ROW><id>7862721</id><snippet>x = y

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'y' is not defined
</snippet></ROW><ROW><id>7862807</id><snippet>pack</snippet></ROW><ROW><id>7862807</id><snippet>mainloop</snippet></ROW><ROW><id>7862807</id><snippet>mainloop</snippet></ROW><ROW><id>7862807</id><snippet>#Dev by Mkee
import Tkinter as tk
import sys

class Shuffle(object):
    def __init__(self,master=None):
        self.master=master
        self.text=tk.Text(master)
    def hide(self):
        self.text.pack_forget()
    def show(self):
        self.text.pack(side=tk.LEFT, padx=5, pady=5)

class Buttons(object):
    def __init__(self,master=None):
        self.master=master
        self.red = tk.Button(self.master, text="Red", bg="red", fg="white")
        self.green = tk.Button(self.master, text="Green", bg="green", fg="black")
        self.blue = tk.Button(self.master, text="Blue", bg="blue", fg="white")
    def hide(self):
        self.red.pack_forget()
        self.green.pack_forget()
        self.blue.pack_forget()                
    def show(self):
        self.red.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)
        self.green.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)
        self.blue.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)

class MainApp(object):
    def __init__(self,master=None):
        self.master=master
        app=self.app=tk.Tk()
        app.title("Mkee's Tools")
        app.geometry('300x200')
        self.shuffle=Shuffle(master)
        self.buttons=Buttons(master)
        self.current=None
        menubar=tk.Menu(app)
        program_menu=tk.Menu(menubar)
        program_menu.add_command(label='Shuffle',
                                 command=lambda: self.show(self.shuffle))
        program_menu.add_command(label='Buttons',
                                 command=lambda: self.show(self.buttons)) 
        program_menu.add_command(label='Quit',command=sys.exit) 
        menubar.add_cascade(label='Programs', menu=program_menu)
        app.config(menu=menubar)
    def show(self,obj):
        if self.current != obj:
            try: self.current.hide()
            except AttributeError: pass
            self.current=obj
            obj.show()

def main():
    m=MainApp()
    m.app.mainloop()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>7862984</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; 
&gt;&gt;&gt; signal = array([-2.,  8., -6.,  4.,  1., 0.,  3.,  5.]) 
&gt;
&gt;&gt;&gt; from numpy.fft import *
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; f = fft(signal)
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; print f
[ 13.00000000 +0.j           3.36396103 +4.05025253j   2.00000000 +1.j
  -9.36396103-13.94974747j -21.00000000 +0.j          -9.36396103+13.94974747j
   2.00000000 -1.j           3.36396103 -4.05025253j]
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; f = rfft(signal)
&gt;&gt;&gt; 
&gt;&gt;&gt; print f
[ 13.00000000 +0.j           3.36396103 +4.05025253j   2.00000000 +1.j
  -9.36396103-13.94974747j -21.00000000 +0.j        ]
&gt;&gt;&gt; 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7863069</id><snippet>&lt;style&gt;
#wrapper #PrimaryNav {margin:0;*overflow:hidden;}
a.scbbtnred{background-position:right -44px;}
a.scbbtnblack{background-position:right -176px;}
.ghsearch{width:58px;height:21px;line-height:21px;background-position:0 -80px;}
a.scbbtnred span span{background-color:#f00;background-position:0 -22px;}
&lt;/style&gt;
&lt;div&gt;
    &lt;p&gt;This bit is HTML&lt;/p&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>7863069</id><snippet>style</snippet></ROW><ROW><id>7863108</id><snippet>words = text.split()
print words.count('cat')
</snippet></ROW><ROW><id>7863108</id><snippet>words = re.findall("\b\w*") 
</snippet></ROW><ROW><id>7863108</id><snippet>print text.count("cat")
</snippet></ROW><ROW><id>7863205</id><snippet>&gt;&gt;&gt; o = {
    2: [0, 148, 149, 150, 151],
    3: [0, 152, 153, 154, 155, 156],
    4: [0, 157, 158, 159, 160],
    5: [0, 161, 162, 163, 164, 165, 166]
}
&gt;&gt;&gt; for key in o:
        seq = o[key]
        print key
        print seq
        print


2
[0, 148, 149, 150, 151]

3
[0, 152, 153, 154, 155, 156]

4
[0, 157, 158, 159, 160]

5
[0, 161, 162, 163, 164, 165, 166]   
</snippet></ROW><ROW><id>7863243</id><snippet>try:
    import Tkinter
    gui_installed = True
except ImportError:
    gui_installed = False


...

result = somecalc()
if gui_installed:
    display_with_gui(result)
else:
    display_as_text(result)
</snippet></ROW><ROW><id>7863331</id><snippet>&gt;&gt;&gt; x = float('-0.0')
&gt;&gt;&gt; x
-0.0
&gt;&gt;&gt; abs(x)
0.0
</snippet></ROW><ROW><id>7863470</id><snippet>if False:</snippet></ROW><ROW><id>7863470</id><snippet>AStar()</snippet></ROW><ROW><id>7863470</id><snippet>httplib</snippet></ROW><ROW><id>7863470</id><snippet>#   Useless stuff to help type info
if False :
    conn._set_tunnel("example.com")
</snippet></ROW><ROW><id>7863548</id><snippet>input</snippet></ROW><ROW><id>7863548</id><snippet>raw_input</snippet></ROW><ROW><id>7863548</id><snippet>if computer == 1 and play == 2:
</snippet></ROW><ROW><id>7863548</id><snippet>if computer == 1 and play == '2':
</snippet></ROW><ROW><id>7863548</id><snippet>computer_wins</snippet></ROW><ROW><id>7863548</id><snippet>main</snippet></ROW><ROW><id>7863548</id><snippet>global computer_wins</snippet></ROW><ROW><id>7863634</id><snippet>def addFuncs(f,g):
    return lambda x: f(x) + g(x)

addFuncs(add1,square)(10)
</snippet></ROW><ROW><id>7863683</id><snippet>import fnmatch
import re    
import os

with open('badwords.txt','r') as f:
    pat='|'.join(fnmatch.translate(badword)[:-1] for badword in 
                 f.read().splitlines())   

for fname in os.listdir('.'):
    new_fname=re.sub(pat,'',fname)
    if fname != new_fname:
        print('{o} --&gt; {n}'.format(o=fname,n=new_fname))
        os.rename(fname, new_fname)

# MyMusic.Songname.Artist-mp3.iTunes.mp3 --&gt; Songname.Artist.mp3
</snippet></ROW><ROW><id>7863683</id><snippet>badwords</snippet></ROW><ROW><id>7863683</id><snippet>os.rename</snippet></ROW><ROW><id>7863683</id><snippet>'.iTunes'</snippet></ROW><ROW><id>7863683</id><snippet>r'\.iTunes'</snippet></ROW><ROW><id>7863683</id><snippet>'(?i)'</snippet></ROW><ROW><id>7863683</id><snippet>pat</snippet></ROW><ROW><id>7863683</id><snippet>with open('badwords.txt','r') as f:
   pat='(?i)'+'|'.join(fnmatch.translate(badword)[:-1] for badword in 
                       f.read().splitlines())
</snippet></ROW><ROW><id>7864121</id><snippet>python setup.py develop</snippet></ROW><ROW><id>7864121</id><snippet>install</snippet></ROW><ROW><id>7864158</id><snippet>fileinput</snippet></ROW><ROW><id>7864158</id><snippet>-f</snippet></ROW><ROW><id>7864158</id><snippet>--file</snippet></ROW><ROW><id>7864158</id><snippet>-o</snippet></ROW><ROW><id>7864158</id><snippet>--output</snippet></ROW><ROW><id>7864158</id><snippet>#!/usr/bin/env python
import fileinput
import sys
from optparse import OptionParser

parser = OptionParser()
parser.add_option('-o', '--output',
    help='Specifies the output file.  The default is stdout.')
options, files = parser.parse_args()
if options.output and options.output != '-':
   sys.stdout = open(options.output, 'w')

for line in fileinput.input(files):
    process(line)
</snippet></ROW><ROW><id>7864158</id><snippet>argparse</snippet></ROW><ROW><id>7864158</id><snippet>#!/usr/bin/env python
import fileinput
import sys
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('files', nargs='*', help='specify input files')
group = parser.add_mutually_exclusive_group()
group.add_argument('-o', '--output', 
    help='specify the output file.  The default is stdout')
group.add_argument('-i', '--inplace', action='store_true',
    help='modify files inplace')
args = parser.parse_args()

if args.output and args.output != '-':
   sys.stdout = open(args.output, 'w')

for line in fileinput.input(args.files, inplace=args.inplace):
    process(line)
</snippet></ROW><ROW><id>7864158</id><snippet>--inplace</snippet></ROW><ROW><id>7864158</id><snippet>$ python util-argparse.py --help
usage: util-argparse.py [-h] [-o OUTPUT | -i] [files [files ...]]

positional arguments:
  files                 specify input files

optional arguments:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        specify the output file. The default is stdout
  -i, --inplace         modify files inplace
</snippet></ROW><ROW><id>7864249</id><snippet>strings</snippet></ROW><ROW><id>7864302</id><snippet>class Item(object):
    def __init__(self):
        self.broken = False

    def smash(self):
        print "This object broke."
        self.broken = True

class Person(object):
    def __init__(self, holding):
        self.holding = holding

    def using(self):
        if self.holding.broken != True:
            print "Pass."
        else:
            print "Fail."

Foo = Person(Item())
Bar = Person(Item())

Foo.holding.smash()
Foo.using()
Bar.using()
</snippet></ROW><ROW><id>7864727</id><snippet>from django.shortcuts import get_object_or_404

# get Room instance by id or raise 404 page if not found
room = get_object_or_404(Room,pk = id)
# add squawk to many-to-many relation
room.squawks.add(squawk_object)
</snippet></ROW><ROW><id>7864748</id><snippet>start</snippet></ROW><ROW><id>7864748</id><snippet>QThread</snippet></ROW><ROW><id>7864748</id><snippet>QThread</snippet></ROW><ROW><id>7864748</id><snippet>Worker</snippet></ROW><ROW><id>7864748</id><snippet>class Worker(QThread):
  def __init__(self, do_create_data=True, parent=None):
    super, etc
    self.do_create_data = create_data

  def run(self):
     if self.create_data:
         self.create_data()
     else:
         self.upload_data(), depends
</snippet></ROW><ROW><id>7864829</id><snippet>req = urllib2.Request("http://example.com", data, {'Content-Type': 'application/octet-stream'})
urllib2.urlopen(req)
</snippet></ROW><ROW><id>7864910</id><snippet>import re
string = 'file_name.c: 120'
find = re.findall("(\.[cm])*", string)
find = filter(None, find)
print find
</snippet></ROW><ROW><id>7865038</id><snippet>^((\+38)?\(0\d{2}\)|0\d{2})[-\s]\d{3}([-\s]\d{2}){2}$
</snippet></ROW><ROW><id>7865038</id><snippet>+38(022)-333-33-44</snippet></ROW><ROW><id>7865038</id><snippet>(022)-333-33-44</snippet></ROW><ROW><id>7865038</id><snippet>022-333-33-44</snippet></ROW><ROW><id>7865042</id><snippet>class MyHandler(webapp.RequestHandler):
    def get(self, page_text = None, page = 1)

application = webapp.WSGIApplication([('/something/', MyHandler)
                                     ('/something/(page(\d+))?/?',MyHandler)], 
                                     debug=True)
</snippet></ROW><ROW><id>7865312</id><snippet>os.path.join</snippet></ROW><ROW><id>7865312</id><snippet>settings.EXTRA_BASE.lstrip('/')</snippet></ROW><ROW><id>7865365</id><snippet>execute</snippet></ROW><ROW><id>7865365</id><snippet>vim.command(string)</snippet></ROW><ROW><id>7865365</id><snippet>eval</snippet></ROW><ROW><id>7865365</id><snippet>vim.eval(string)</snippet></ROW><ROW><id>7865365</id><snippet>vim.command("normal! V")
</snippet></ROW><ROW><id>7865365</id><snippet>vim.eval("feedkeys('V')")
</snippet></ROW><ROW><id>7865365</id><snippet>import json
# Some code that puts result into variable r
# This won't work if r contains non-unicode strings,
# you will have to write your own serializer in this case.
# As far as I know, it will also fail if some characters in the string
# can be represented only using surrogate pairs.
vim.command("let reply=".json.dumps(r))
# Now in the caller function variable l:reply is defined
</snippet></ROW><ROW><id>7865459</id><snippet>class</snippet></ROW><ROW><id>7865459</id><snippet>class</snippet></ROW><ROW><id>7865459</id><snippet>HistoricalData</snippet></ROW><ROW><id>7865459</id><snippet>object</snippet></ROW><ROW><id>7865459</id><snippet>class</snippet></ROW><ROW><id>7865459</id><snippet>__init__()</snippet></ROW><ROW><id>7865459</id><snippet>datapoints</snippet></ROW><ROW><id>7865459</id><snippet>class HistoricalData(object):

    def __init__(self):
        self.dataPoints = {}
</snippet></ROW><ROW><id>7865512</id><snippet>check_one</snippet></ROW><ROW><id>7865512</id><snippet>data</snippet></ROW><ROW><id>7865512</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7865512</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7865512</id><snippet>Queue</snippet></ROW><ROW><id>7865512</id><snippet>import multiprocessing as mp
import Queue

def foo(queue):
    pass

pool=mp.Pool()
q=Queue.Queue()

pool.map(foo,(q,))
</snippet></ROW><ROW><id>7865512</id><snippet>UnpickleableError: Cannot pickle &lt;type 'thread.lock'&gt; objects
</snippet></ROW><ROW><id>7865512</id><snippet>data</snippet></ROW><ROW><id>7865512</id><snippet>packages</snippet></ROW><ROW><id>7865512</id><snippet>Queue</snippet></ROW><ROW><id>7865512</id><snippet>qsize</snippet></ROW><ROW><id>7865512</id><snippet>qsize</snippet></ROW><ROW><id>7865512</id><snippet>mp.Value</snippet></ROW><ROW><id>7865512</id><snippet>check_one</snippet></ROW><ROW><id>7865512</id><snippet>pool.map</snippet></ROW><ROW><id>7865512</id><snippet>pool.map</snippet></ROW><ROW><id>7865512</id><snippet>import multiprocessing as mp
import Queue
import random
import logging

# logger=mp.log_to_stderr(logging.DEBUG)
logger = logging.getLogger(__name__)


qsize = mp.Value('i', 1)
def check_one(args):
    total, package, version = args
    i = qsize.value
    logger.info('\r[{0:.1%} - {1}, {2} / {3}]'.format(
        i / float(total), package, i, total))
    new_version = random.randrange(0,100)
    qsize.value += 1
    if new_version &gt; version:
        return (package, version, new_version, None)
    else:
        return None

def update():    
    logger.info('Searching for updates')
    set_len=10
    data = ( (set_len, 'project-{0}'.format(i), random.randrange(0,100))
             for i in range(set_len) )
    pool = mp.Pool()
    results = pool.map(check_one, data)
    pool.close()
    pool.join()
    for result in results:
        if result is None: continue
        package, version, new_version, json = result
        txt = 'A new release is avaiable for {0}: {1!s} (old {2}), update'.format(
            package, new_version, version)
        logger.info(txt)
    logger.info('Updating finished successfully')

if __name__=='__main__':
    logging.basicConfig(level=logging.DEBUG)
    update()
</snippet></ROW><ROW><id>7865539</id><snippet>HttpResponse</snippet></ROW><ROW><id>7865539</id><snippet>{% block %}</snippet></ROW><ROW><id>7865539</id><snippet>{% include %}</snippet></ROW><ROW><id>7865539</id><snippet>{% extend %}</snippet></ROW><ROW><id>7865539</id><snippet>&lt;div&gt; header code &lt;/div&gt;
{% block content %}
    &lt;div&gt;Default content&lt;/div&gt;
{% endblock content %}
&lt;div&gt; footer code &lt;/div&gt;
</snippet></ROW><ROW><id>7865539</id><snippet>{% extend 'base.html' %}
{% block content %}
  &lt;div&gt;My new content&lt;/div&gt;
{% endblock content %}
</snippet></ROW><ROW><id>7866096</id><snippet>for(int i=lo+r;i&lt;(hi-r);i+=step)
</snippet></ROW><ROW><id>7866096</id><snippet>step</snippet></ROW><ROW><id>7866096</id><snippet>i&gt;(hi-r)</snippet></ROW><ROW><id>7866096</id><snippet>lo+r</snippet></ROW><ROW><id>7866096</id><snippet>step</snippet></ROW><ROW><id>7866096</id><snippet>hi-r</snippet></ROW><ROW><id>7866180</id><snippet>d = "&gt;"
for line in all_lines:
    s =  [e+d for e in line.split(d) if e != ""]
</snippet></ROW><ROW><id>7866208</id><snippet>textvariable=self.globvar</snippet></ROW><ROW><id>7866208</id><snippet>self.globvar = tk.StringVar()</snippet></ROW><ROW><id>7866208</id><snippet>self.globvar.set</snippet></ROW><ROW><id>7866208</id><snippet>command=self.calc()</snippet></ROW><ROW><id>7866208</id><snippet>command=self.calc</snippet></ROW><ROW><id>7866208</id><snippet>self.calc()</snippet></ROW><ROW><id>7866208</id><snippet>self.buttn</snippet></ROW><ROW><id>7866208</id><snippet>self.calc()</snippet></ROW><ROW><id>7866208</id><snippet>None</snippet></ROW><ROW><id>7866208</id><snippet>command</snippet></ROW><ROW><id>7866208</id><snippet>None</snippet></ROW><ROW><id>7866208</id><snippet>command</snippet></ROW><ROW><id>7866208</id><snippet>self.calc</snippet></ROW><ROW><id>7866208</id><snippet>Shuffle</snippet></ROW><ROW><id>7866208</id><snippet>import Tkinter as tk
import sys, random

class Shuffle(object):
    def __init__(self,master=None):
        self.master=master
        self.text=tk.Label(master, text="Type in something:")
        self.box=tk.Entry(master)
        self.buttn = tk.Button(master, text="Done", width=10, command=self.calc)
        self.globvar = tk.StringVar()
        self.globvar.set(0)
        self.result = tk.Label(self.master, textvariable=self.globvar)
    def hide(self):
        self.text.pack_forget()
        self.box.pack_forget()
        self.buttn.pack_forget()
        self.result.pack_forget()
    def show(self):
        self.text.pack(padx=2, pady=2)
        self.box.focus_set()
        self.box.pack(side=tk.TOP, padx=3, pady=3)
        self.buttn.pack(side=tk.TOP, padx=3, pady=3)
        self.result.pack(side=tk.TOP, padx=3, pady=3)
    def calc(self):
        word = self.box.get()
        while len(word) != 0:
            i = random.randrange(0, len(word))
            self.globvar.set(word[i])
            word = word[0:i] + word[i+1:]

class MainApp(object):
    def __init__(self,master=None):
        self.master=master
        app=self.app=tk.Tk()
        app.title("Mkee's Tools")
        app.geometry('500x500')
        menubar=tk.Menu(app)
        self.shuffle=Shuffle(master)
        self.current=self.shuffle
        program_menu=tk.Menu(menubar)
        program_menu.add_command(label='Shuffle',command=self.show_shuffle)
        menubar.add_cascade(label='Programs', menu=program_menu)
        app.config(menu=menubar)
    def show_shuffle(self):
        self.current.hide()
        self.current=self.shuffle
        self.shuffle.show()
    def show_buttons(self):
        self.current.hide()
        self.current=self.buttons        
        self.buttons.show()

def main():
    m=MainApp()
    m.app.mainloop()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>7866369</id><snippet>import lxml.etree as ET
import matplotlib.pyplot as plt

text='''\
&lt;table&gt;
 &lt;row&gt;
   &lt;x&gt;10&lt;/x&gt;
   &lt;t&gt;10:00&lt;/t&gt;
&lt;/row&gt;
&lt;row&gt;
   &lt;x&gt;20&lt;/x&gt;
   &lt;t&gt;10:05&lt;/t&gt;
&lt;/row&gt;
&lt;/table&gt;
'''

def convert_t(text):
    a,b=map(float,t.split(':'))
    return a+b/60.0

doc=ET.fromstring(text)
x=[float(x) for x in doc.xpath('//x/text()')]
t=[convert_t(t) for t in doc.xpath('//t/text()')]
plt.plot(x,t)
plt.show()
</snippet></ROW><ROW><id>7866369</id><snippet>10:05</snippet></ROW><ROW><id>7866369</id><snippet>convert_t</snippet></ROW><ROW><id>7866369</id><snippet>&lt;/table&gt;</snippet></ROW><ROW><id>7866828</id><snippet>keys = ['key1', 'key2', 'key3']
words = u'word1 word2 word3'
vals = words.split()

d = dict(zip(keys, vals))
</snippet></ROW><ROW><id>7866828</id><snippet>' '.join(sorted(k + ':' + v for k,v in d.items()))
</snippet></ROW><ROW><id>7866878</id><snippet>sent</snippet></ROW><ROW><id>7866878</id><snippet>not_sent</snippet></ROW><ROW><id>7867281</id><snippet>&gt;&gt;&gt; for c in "Cadillac":
...     n = ord(c)                  # convert the character to a number
...     print '{0:08b}'.format(n)   # show the number with 8 binary digits
... 
01000011
01100001
01100100
01101001
01101100
01101100
01100001
01100011
</snippet></ROW><ROW><id>7867486</id><snippet>str.split</snippet></ROW><ROW><id>7867486</id><snippet>&gt;&gt;&gt; string  = "66,55,66,57"
&gt;&gt;&gt; numbers = [int(x) for x in string.split(",")]

&gt;&gt;&gt; print numbers
[66, 55, 66, 57]
</snippet></ROW><ROW><id>7867486</id><snippet>&gt;&gt;&gt; sum(numbers)
244
</snippet></ROW><ROW><id>7867892</id><snippet>struct.unpack</snippet></ROW><ROW><id>7867892</id><snippet>import struct

def unpack(fmt, astr):
    """
    Return struct.unpack(fmt, astr) with the optional single * in fmt replaced with
    the appropriate number, given the length of astr.
    """
    # http://stackoverflow.com/a/7867892/190597
    try:
        return struct.unpack(fmt, astr)
    except struct.error:
        flen = struct.calcsize(fmt.replace('*', ''))
        alen = len(astr)
        idx = fmt.find('*')
        before_char = fmt[idx-1]
        n = (alen-flen)/struct.calcsize(before_char)+1
        fmt = ''.join((fmt[:idx-1], str(n), before_char, fmt[idx+1:]))
        return struct.unpack(fmt, astr)

print(unpack('b*','abc'))
# (97, 98, 99)
</snippet></ROW><ROW><id>7868598</id><snippet>def increment_by(time_diff):
    def replace_time(matchobj):
        if matchobj.group(1) not in [None, '']:
            return (datetime.strptime(matchobj.group(1), "%H:%M:%S") + time_diff).strftime("%H:%M:%S")
    return replace_time

time_diff = timedelta(seconds=10)
print re.sub('(\d\d:\d\d:\d\d)', increment_by(time_diff), "01:27:55")
</snippet></ROW><ROW><id>7868598</id><snippet>partial</snippet></ROW><ROW><id>7868598</id><snippet>from functools import partial

def replace_time(time_diff, matchobj):
    if matchobj.group(1) not in [None, '']:
        return (datetime.strptime(matchobj.group(1), "%H:%M:%S") + time_diff).strftime("%H:%M:%S")

time_diff = timedelta(seconds=10)
print re.sub('(\d\d:\d\d:\d\d)', partial(replace_time, time_diff), "01:27:55")
</snippet></ROW><ROW><id>7868730</id><snippet>check_for_new_files</snippet></ROW><ROW><id>7868730</id><snippet>return</snippet></ROW><ROW><id>7868730</id><snippet>new_files=check_for_new_files(ROOT_DIR)
</snippet></ROW><ROW><id>7868730</id><snippet>None</snippet></ROW><ROW><id>7868730</id><snippet>None</snippet></ROW><ROW><id>7868730</id><snippet>check_for_new_files</snippet></ROW><ROW><id>7868730</id><snippet>def check_for_new_files(path=ROOT_DIR):
    new_files = os.listdir(path)
    for file in new_files:
        print "New file found ... ", file
    return new_files
</snippet></ROW><ROW><id>7868912</id><snippet>'a' or 'z'</snippet></ROW><ROW><id>7868912</id><snippet>'a'</snippet></ROW><ROW><id>7868912</id><snippet>'a' and 'z'</snippet></ROW><ROW><id>7868912</id><snippet>'z'</snippet></ROW><ROW><id>7868912</id><snippet>find</snippet></ROW><ROW><id>7868912</id><snippet>var1.find('a') != -1 or var.find('z') != -1
</snippet></ROW><ROW><id>7868912</id><snippet>var1.find('a') != -1 and var.find('z') != -1
</snippet></ROW><ROW><id>7869253</id><snippet># if func() is defined in `a.py`
import a

oldObj, a.Obj = a.Obj, MockObj
a.func()
a.Obj = oldObj
</snippet></ROW><ROW><id>7869432</id><snippet>as</snippet></ROW><ROW><id>7869432</id><snippet>from numpy import cos, arccos, sin, arcsin, tan, arctan
</snippet></ROW><ROW><id>7869432</id><snippet>globals()</snippet></ROW><ROW><id>7869432</id><snippet>me=globals();
trigfunctions = ('cos','arccos','sin','arcsin','tan','arctan')
for method in trigfunctions:
    me[method] = numpy.__dict__[method]
</snippet></ROW><ROW><id>7869432</id><snippet>sys.modules[__name__]</snippet></ROW><ROW><id>7869616</id><snippet>...
files= "file1 file2 ..."
myvar = ""
for tm in machine_list
         myvar = myvar+ subprocess.check_output(["ssh", "user@" + tm, "/bin/cat " + files]);
...
</snippet></ROW><ROW><id>7869616</id><snippet>         myvar = myvar+Popen(["ssh", "user@" +tm ... ], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>7869675</id><snippet>white = (255, 255, 255)

message = 'your message'
font = pygame.font.Font(None, 40)
text = font.render(message, 1, white)
screen.blit(text, (x_position,y_position))
</snippet></ROW><ROW><id>7869739</id><snippet>request.path</snippet></ROW><ROW><id>7869739</id><snippet>request.path.startswith('/static/')</snippet></ROW><ROW><id>7869739</id><snippet>request</snippet></ROW><ROW><id>7869739</id><snippet>db</snippet></ROW><ROW><id>7869739</id><snippet>import types

def get_db_connection(request):
    if not hasattr(request, '_db'):
        request._db = my_connect_to_db()
        request.add_finished_callback(close_db_connection)
    return request._db

def new_request_subscriber(event):
    request = event.request
    request.db = types.MethodType(get_db_connection, request)
</snippet></ROW><ROW><id>7869739</id><snippet>request.db()</snippet></ROW><ROW><id>7869739</id><snippet>request.db</snippet></ROW><ROW><id>7869739</id><snippet>Request</snippet></ROW><ROW><id>7869739</id><snippet>@reify</snippet></ROW><ROW><id>7869763</id><snippet>settings = paste.deploy.appconfig('test.ini')</snippet></ROW><ROW><id>7869763</id><snippet>app = pyramid.paster.get_app('test.ini')</snippet></ROW><ROW><id>7869763</id><snippet>main(global_conf, **settings)</snippet></ROW><ROW><id>7869862</id><snippet>if d == digit
    count +=1
else
    count +=0
</snippet></ROW><ROW><id>7869862</id><snippet>if d == digit:
    count +=1
else:
    count +=0 # or just pass, or better, skip the whole else tree
</snippet></ROW><ROW><id>7869862</id><snippet>a</snippet></ROW><ROW><id>7869870</id><snippet>def quicksort(alist):
    if len(alist) &lt; 2: 
        return alist # primitive case: a list of size one is ordered

    pivotelement = alist.pop()
    # compute the 2 lists for the next recursive call
    left  = [element for element in alist if element &lt; pivotelement]#left = smaller than pivotelemet
    right = [element for element in alist if element &gt;= pivotelement]#left = greater than pivotelemet

    # call function recursively
    return quicksort(left) + [pivotelement] + quicksort(right)
</snippet></ROW><ROW><id>7869952</id><snippet>def f(p=None):
    i = p or 4
    ...
</snippet></ROW><ROW><id>7869952</id><snippet>def f(p=None):
    i = p if p is not None else 4
    ...
</snippet></ROW><ROW><id>7869952</id><snippet>try:
    i = p
except NameError:
    pass
</snippet></ROW><ROW><id>7870076</id><snippet>import os
import tempfile

# By default mkstemp() creates a file with
# a name that begins with 'tmp' (lowercase)
tmphandle, tmppath = tempfile.mkstemp()
if os.path.exists(tmppath.upper()):
    # Case insensitive.
else:
    # Case sensitive.
</snippet></ROW><ROW><id>7870078</id><snippet>if (first == last):
    return isPalindrome(theSubListtest)
else:
    return False
</snippet></ROW><ROW><id>7870448</id><snippet>i</snippet></ROW><ROW><id>7870448</id><snippet>newlist = oldlist[i:]
</snippet></ROW><ROW><id>7870472</id><snippet> self.body.insert(0, (self.x, self.y))
 self.body.insert(0, (self.x, self.y+1))
 self.body.insert(0, (self.x, self.y-1))
 self.body.insert(0, (self.x+1, self.y))
 self.body.insert(0, (self.x-1, self.y))
   ...   # corner cases if they are important
</snippet></ROW><ROW><id>7870624</id><snippet>create</snippet></ROW><ROW><id>7870624</id><snippet>class_dict</snippet></ROW><ROW><id>7870624</id><snippet>create</snippet></ROW><ROW><id>7870624</id><snippet>class_dict</snippet></ROW><ROW><id>7870624</id><snippet>class_dict[index]()</snippet></ROW><ROW><id>7870624</id><snippet>class foo:
    id = 1
    def __init__(self):
        self.attr = 10

class bar:
    id = 2
    def __init__(self):
        self.attr = 20

def create_foo():
    return foo()

def create_bar():
    return bar()

class_dict = {1:create_foo,2:create_bar}

class_index = [1,2,1,2,1,1,1,2,2,2,1] #data read from file

class_list = [] #output list containing the newly instanciated bar or foo

for index in class_index:
    c = class_dict[index]()
    class_list.append(c)

for classe in class_list:
    print str(classe.attr),

print "\n-------------"
class_list[0].attr = 15

for classe in class_list:
    print str(classe.attr),
</snippet></ROW><ROW><id>7870777</id><snippet>def replacehtml(html, somelist):
    html = html.replace("VALUE1", somelist[0])
    html = html.replace("VALUE2", somelist[1])
    html = html.replace("VALUE3", somelist[2])
    print somelist[1]
    return html

html = replacehtml(html, southfile[0])
</snippet></ROW><ROW><id>7870887</id><snippet>main</snippet></ROW><ROW><id>7870887</id><snippet>class Example(object):
    def run(self):
        print "Hello, world!"

if __name__ == '__main__':
    Example().run()
</snippet></ROW><ROW><id>7870887</id><snippet>if</snippet></ROW><ROW><id>7870887</id><snippet>def main():
    print "Hello, world!"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7870887</id><snippet>if __name__ == '__main__':
    print "Hello, world!"
</snippet></ROW><ROW><id>7871059</id><snippet>index=False</snippet></ROW><ROW><id>7871077</id><snippet>def getSumOfLastDigits(numList):
  return sum(x % 10 for x in numList)
</snippet></ROW><ROW><id>7871154</id><snippet>length = random.randint(18, 20)</snippet></ROW><ROW><id>7871154</id><snippet>int length = rand() % 3 + 18</snippet></ROW><ROW><id>7871154</id><snippet>"\x02\x00%s%s" % (x, y)</snippet></ROW><ROW><id>7871154</id><snippet>sprintf()</snippet></ROW><ROW><id>7871154</id><snippet>x</snippet></ROW><ROW><id>7871154</id><snippet>y</snippet></ROW><ROW><id>7871154</id><snippet>x = pack("&gt;b", length)</snippet></ROW><ROW><id>7871154</id><snippet>struct.pack()</snippet></ROW><ROW><id>7871154</id><snippet>length</snippet></ROW><ROW><id>7871154</id><snippet>chr()</snippet></ROW><ROW><id>7871154</id><snippet>y = "".join(z)</snippet></ROW><ROW><id>7871154</id><snippet>z</snippet></ROW><ROW><id>7871154</id><snippet>"@".join(["a","b","c"]) --&gt; "a@b@c"</snippet></ROW><ROW><id>7871154</id><snippet>z = (random.choice(string.printable) for i in range(length))</snippet></ROW><ROW><id>7871154</id><snippet>length</snippet></ROW><ROW><id>7871154</id><snippet>string.printable</snippet></ROW><ROW><id>7871154</id><snippet>(char)length</snippet></ROW><ROW><id>7871154</id><snippet>length</snippet></ROW><ROW><id>7871154</id><snippet>string.printable</snippet></ROW><ROW><id>7871162</id><snippet>self.image.fill(color)</snippet></ROW><ROW><id>7871162</id><snippet>self.image.set_colorkey(white)</snippet></ROW><ROW><id>7871326</id><snippet>(every? f data)</snippet></ROW><ROW><id>7871326</id><snippet>all(f(x) for x in data)</snippet></ROW><ROW><id>7871326</id><snippet>(some f data)</snippet></ROW><ROW><id>7871326</id><snippet>any(f(x) for x in data)</snippet></ROW><ROW><id>7871326</id><snippet>f(x)</snippet></ROW><ROW><id>7871326</id><snippet>true</snippet></ROW><ROW><id>7871326</id><snippet>identity</snippet></ROW><ROW><id>7871326</id><snippet>(fn [x] x)</snippet></ROW><ROW><id>7871326</id><snippet>user=&gt; (every? identity [1, true, "non-empty string"])
true
user=&gt; (some identity [1, true "non-empty string"])
1
user=&gt; (some true? [1, true "non-empty string"])
true
</snippet></ROW><ROW><id>7871477</id><snippet>translate</snippet></ROW><ROW><id>7871477</id><snippet>&gt;&gt;&gt; import string

&gt;&gt;&gt; t = string.maketrans("abcdef", "bcdefa")
&gt;&gt;&gt; "abracadabra".translate(t)
'bcrbdbebcrb'

&gt;&gt;&gt; t2 = string.maketrans("bcdefa", "abcdef")
&gt;&gt;&gt; "bcrbdbebcrb".translate(t2)
'abracadabra'
</snippet></ROW><ROW><id>7871524</id><snippet>form = FeeChargeForm(initial={'section': section})
</snippet></ROW><ROW><id>7871524</id><snippet>if request.method == 'POST':
    form = FeeChargeForm(request.POST)
form = FeeChargeForm(initial={'section': section})
</snippet></ROW><ROW><id>7871699</id><snippet>#cmn.py
import sys
print 'I am being imported by', sys._getframe(1).f_globals.get('__name__')
</snippet></ROW><ROW><id>7871699</id><snippet>__main__</snippet></ROW><ROW><id>7871699</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>7871864</id><snippet>class WeightedArc(Arc):
    def __new__(cls, arc, weight):
        self = tuple.__new__(cls, arc)
        self.weight = weight
        return self
</snippet></ROW><ROW><id>7871864</id><snippet>&gt;&gt;&gt; from collections import namedtuple, OrderedDict
&gt;&gt;&gt; _property = property
&gt;&gt;&gt; from operator import itemgetter as _itemgetter
&gt;&gt;&gt; Arc = namedtuple('Arc', ['head', 'tail'], verbose=True)
class Arc(tuple):
    'Arc(head, tail)' 

    __slots__ = () 

    _fields = ('head', 'tail') 

    def __new__(_cls, head, tail):
        'Create new instance of Arc(head, tail)'
        return _tuple.__new__(_cls, (head, tail)) 

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new Arc object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != 2:
            raise TypeError('Expected 2 arguments, got %d' % len(result))
        return result 

    def __repr__(self):
        'Return a nicely formatted representation string'
        return 'Arc(head=%r, tail=%r)' % self 

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values'
        return OrderedDict(zip(self._fields, self)) 

    def _replace(_self, **kwds):
        'Return a new Arc object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, ('head', 'tail'), _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % kwds.keys())
        return result 

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self) 

    head = _property(_itemgetter(0), doc='Alias for field number 0')
    tail = _property(_itemgetter(1), doc='Alias for field number 1')
</snippet></ROW><ROW><id>7871864</id><snippet>WeightedArc = namedtuple('WeightedArc', Arc._fields + ('weight',))
</snippet></ROW><ROW><id>7872670</id><snippet>if not instance:
    return # will pass be better or worse here?
</snippet></ROW><ROW><id>7872670</id><snippet>pass</snippet></ROW><ROW><id>7872670</id><snippet>return</snippet></ROW><ROW><id>7872670</id><snippet>pass</snippet></ROW><ROW><id>7872670</id><snippet>pass</snippet></ROW><ROW><id>7872670</id><snippet>void foo()
{
}
</snippet></ROW><ROW><id>7872670</id><snippet>def foo():
</snippet></ROW><ROW><id>7872670</id><snippet>pass</snippet></ROW><ROW><id>7872670</id><snippet>def foo():
    pass
</snippet></ROW><ROW><id>7872765</id><snippet>pack</snippet></ROW><ROW><id>7872765</id><snippet>grid</snippet></ROW><ROW><id>7872765</id><snippet>Frame</snippet></ROW><ROW><id>7872765</id><snippet>.grid</snippet></ROW><ROW><id>7872765</id><snippet>from Tkinter import *
root = Tk()
f1 = Frame(root)
f1.pack()
Label(f1, text='some text').grid(row=0, column=0)
Button(f1, text='Button').grid(row=1, column=0)

f2 = Frame(root)
f2.pack()
Label(f2, text="content of Frame 2").pack()

root.mainloop()
</snippet></ROW><ROW><id>7872950</id><snippet>num1 = (20 if someBoolValue else num1)
</snippet></ROW><ROW><id>7872950</id><snippet>else num1</snippet></ROW><ROW><id>7872950</id><snippet>if someBoolValue: num1=20
</snippet></ROW><ROW><id>7872950</id><snippet>num1 = someBoolValue and 20 or num1</snippet></ROW><ROW><id>7872950</id><snippet>if someBoolValue:
    num1 = 20
</snippet></ROW><ROW><id>7872950</id><snippet>num1 = 20 if someBoolValue</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>timedelta</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873056</id><snippet>datetime</snippet></ROW><ROW><id>7873080</id><snippet>if 'client' in request.POST:
    # do something
</snippet></ROW><ROW><id>7873308</id><snippet>while reduction_pass(dataset) &gt; 0: pass
</snippet></ROW><ROW><id>7873308</id><snippet>from itertools import *
list(takewhile(lambda x: x &gt; 0, starmap(reduction_pass, repeat((dataset,)))))
</snippet></ROW><ROW><id>7873567</id><snippet>figure</snippet></ROW><ROW><id>7873567</id><snippet>fig = plt.figure()
fig.subplots_adjust(bottom=0.2)          # Remark 1
ax = fig.add_subplot(111)
ax.bar(arange(len(grosses)), grosses)
ax.ticklabel_format(style='plain')       # Remark 2
ax.set_xticks(arange(len(genres)))
ax.set_xticklabels(genres, rotation=80)
savefig('barchart.png', dpi=500)
</snippet></ROW><ROW><id>7873567</id><snippet>tight_layout</snippet></ROW><ROW><id>7873567</id><snippet>sci</snippet></ROW><ROW><id>7873567</id><snippet>plain</snippet></ROW><ROW><id>7873567</id><snippet>plain</snippet></ROW><ROW><id>7873567</id><snippet>set_yticklabels</snippet></ROW><ROW><id>7873567</id><snippet>text</snippet></ROW><ROW><id>7873886</id><snippet>user_id</snippet></ROW><ROW><id>7873886</id><snippet>user_id</snippet></ROW><ROW><id>7873886</id><snippet>db.test.update({user_id:1}, 
    {$set:{text:"Lorem ipsum", updated:new Date()}, $inc:{count:1}}, 
    true, 
    false)
</snippet></ROW><ROW><id>7873886</id><snippet>user_id</snippet></ROW><ROW><id>7873893</id><snippet>import time


mydate = datetime.date(2010, 1, 12) + datetime.timedelta(days = 3)
time.mktime(mydate.timetuple())
</snippet></ROW><ROW><id>7873893</id><snippet>a = datetime.datetime(2010, 1, 12) + datetime.timedelta(days = 3)
b = datetime.datetime.now()

a &lt; b 
a &gt; b 
a == b 
</snippet></ROW><ROW><id>7874095</id><snippet>readline-devel
sqlite-devel
zlib-devel
openssl-devel
</snippet></ROW><ROW><id>7874095</id><snippet>python2.6 setup.py install
</snippet></ROW><ROW><id>7874241</id><snippet>a_model</snippet></ROW><ROW><id>7874241</id><snippet>b_model</snippet></ROW><ROW><id>7874241</id><snippet>model_common</snippet></ROW><ROW><id>7874241</id><snippet>a_model</snippet></ROW><ROW><id>7874241</id><snippet>b_model</snippet></ROW><ROW><id>7874784</id><snippet>with open('data.txt') as f:
    full_lines = f.readlines()

# parse full lines to get the text to right of "-"
lines = [line.partition('-')[2].rstrip() for line in full_lines]

numcases = int(lines[0])
for i in range(1, len(lines), 2):
    caseinput = lines[i]
    caseoutput = lines[i+1]
    ...
</snippet></ROW><ROW><id>7874823</id><snippet>:set list</snippet></ROW><ROW><id>7874823</id><snippet>^I</snippet></ROW><ROW><id>7875408</id><snippet>next</snippet></ROW><ROW><id>7875408</id><snippet>app('VLC').next_()
</snippet></ROW><ROW><id>7875474</id><snippet># pylint: disable-msg=w0614
</snippet></ROW><ROW><id>7875648</id><snippet>pid2 = subprocess.Popen(["mv"] +
                        glob.glob(os.path.basename(filename)+'[0-9]*') +
                        [folder])
</snippet></ROW><ROW><id>7875648</id><snippet>glob.glob</snippet></ROW><ROW><id>7875648</id><snippet>bufsize</snippet></ROW><ROW><id>7875648</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7875648</id><snippet>mv</snippet></ROW><ROW><id>7875648</id><snippet>shutil.move</snippet></ROW><ROW><id>7875648</id><snippet>for f in glob.glob(os.path.basename(filename)+'[0-9]*'):
    shutil.move(f, folder)
</snippet></ROW><ROW><id>7875801</id><snippet>i</snippet></ROW><ROW><id>7875801</id><snippet>q = 50

for start in xrange(0, allfiles.shape[1], q):
    data = allfiles[:,start:start+q]
    ...
</snippet></ROW><ROW><id>7875987</id><snippet>quote_plus</snippet></ROW><ROW><id>7875987</id><snippet>&gt;&gt;&gt; '/'.join([urllib.quote_plus(d) for d in ['da/ta1', 'data2']])
'da%2Fta1/data2'
</snippet></ROW><ROW><id>7875987</id><snippet>&gt;&gt;&gt; urllib.unquote_plus('da%2Fta1/data2')
'da/ta1/data2'
</snippet></ROW><ROW><id>7875987</id><snippet>=</snippet></ROW><ROW><id>7875987</id><snippet>(r'^view/(?P&lt;item_id&gt;[^=]+)=/(?P&lt;changekey&gt;\w+)/$', 'view')
</snippet></ROW><ROW><id>7876021</id><snippet>a1</snippet></ROW><ROW><id>7876021</id><snippet>b1</snippet></ROW><ROW><id>7876021</id><snippet>a1</snippet></ROW><ROW><id>7876021</id><snippet>"b1"</snippet></ROW><ROW><id>7876021</id><snippet>a1</snippet></ROW><ROW><id>7876021</id><snippet>a1</snippet></ROW><ROW><id>7876021</id><snippet>b1</snippet></ROW><ROW><id>7876021</id><snippet>a1</snippet></ROW><ROW><id>7876021</id><snippet>  a1() # will print b1 a1
</snippet></ROW><ROW><id>7876021</id><snippet>a1()</snippet></ROW><ROW><id>7876021</id><snippet>"a1"</snippet></ROW><ROW><id>7876021</id><snippet>"b1"</snippet></ROW><ROW><id>7876021</id><snippet>@b1</snippet></ROW><ROW><id>7876021</id><snippet>def a1():</snippet></ROW><ROW><id>7876021</id><snippet>def b1(fnc):
  print "b1"
  return fnc

@b1
def a1():
  print "a1"

if __name__ == "__main__":
  print 'in __main__'
  a1()
  a1()
</snippet></ROW><ROW><id>7876021</id><snippet>def b1(fnc):
  def decorated():
    print "b1"
    return fnc()
  return decorated

@b1
def a1():
  print "a1"

if __name__ == "__main__":
  print 'in __main__'
  a1()
  a1()
</snippet></ROW><ROW><id>7876021</id><snippet>fnc()</snippet></ROW><ROW><id>7876060</id><snippet>from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import ColumnProperty
from sqlalchemy import event

def check_string_length(cls, key, inst):
    prop = inst.prop
    # Only interested in simple columns, not relations
    if isinstance(prop, ColumnProperty) and len(prop.columns) == 1:
        col = prop.columns[0]
        # if we have string column with a length, install a length validator
        if isinstance(col.type, String) and col.type.length:
            max_length = col.type.length
            def set_(instance, value, oldvalue, initiator):
                if len(value)&gt;max_length:
                    raise ValueError("Length %d exceeds allowed %d" % \
                                            (len(value), max_length))
            event.listen(inst, 'set', set_)

Base = declarative_base()

event.listen(Base, 'attribute_instrument', check_string_length)
</snippet></ROW><ROW><id>7876063</id><snippet>__iter__</snippet></ROW><ROW><id>7876063</id><snippet>yield</snippet></ROW><ROW><id>7876063</id><snippet>class MySequence(object):
    def __iter__(self):
        yield 1
        yield 2
        yield 3

for x in MySequence():
    print x # prints 1, then 2, then 3
</snippet></ROW><ROW><id>7876063</id><snippet>MySequence()[1]</snippet></ROW><ROW><id>7876063</id><snippet>__getitem__</snippet></ROW><ROW><id>7876063</id><snippet>__len__</snippet></ROW><ROW><id>7876063</id><snippet>class MySequence(object):
    def __len__(self):
        return 3

    def __getitem__(self, key):
        if key == 0:
            return 1
        elif key == 1:
            return 2
        elif key == 2:
            return 3
        else:
            raise IndexError()

s = new MySequence()

for i in range(len(s)):
    print s[i] # prints 1, then 2, then 3

for x in s:
    print x # prints 1, then 2, then 3
</snippet></ROW><ROW><id>7876063</id><snippet>__iter__</snippet></ROW><ROW><id>7876063</id><snippet>__getitem__</snippet></ROW><ROW><id>7876063</id><snippet>IndexError</snippet></ROW><ROW><id>7876063</id><snippet>__iter__</snippet></ROW><ROW><id>7876197</id><snippet>QListWidget</snippet></ROW><ROW><id>7876197</id><snippet>QAbstractItemView</snippet></ROW><ROW><id>7876197</id><snippet>QAbstractItemView.scrollTo(ModelIndex index)</snippet></ROW><ROW><id>7876197</id><snippet>QAbstractItemView.scrollToBottom()</snippet></ROW><ROW><id>7876199</id><snippet>multiprocessing</snippet></ROW><ROW><id>7876199</id><snippet>Pool.map()</snippet></ROW><ROW><id>7876199</id><snippet>mulitprocessing</snippet></ROW><ROW><id>7876322</id><snippet>results = [t.age for t in mylist if t.person_id == 10]
</snippet></ROW><ROW><id>7876322</id><snippet>results = [t[1] for t in mylist if t[0] == 10]
</snippet></ROW><ROW><id>7876322</id><snippet>(person_id, age, _, _, _, _)</snippet></ROW><ROW><id>7876619</id><snippet>error</snippet></ROW><ROW><id>7876619</id><snippet>variance</snippet></ROW><ROW><id>7876619</id><snippet>(max-min)/min</snippet></ROW><ROW><id>7876619</id><snippet>variance/n</snippet></ROW><ROW><id>7876619</id><snippet>variance/n &lt; epsilon</snippet></ROW><ROW><id>7876632</id><snippet>__class__</snippet></ROW><ROW><id>7876803</id><snippet>subprocess</snippet></ROW><ROW><id>7876803</id><snippet>from subprocess import Popen, PIPE
p = Popen('svn log -v --stop-on-copy http://subversion.repository.com/svn/repositoryname',
          stdout=PIPE)
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>7876803</id><snippet>stdout</snippet></ROW><ROW><id>7876803</id><snippet>stderr</snippet></ROW><ROW><id>7876803</id><snippet>&gt;&gt;&gt; s = Popen('svn log', shell=True, stdout=PIPE).communicate()[0]
&gt;&gt;&gt; m = re.search('\r\nr(?P&lt;rev&gt;\d+)\s+\|\s+(?P&lt;author&gt;\w+)\s+\|\s+(?P&lt;timestamp&gt;.*?)\s|', s)
{'timestamp': '2011-10-10 10:45:01 +0000 (wed, okt 10 2011)',
 'rev': '1234',
 'author': 'someuser'
}
</snippet></ROW><ROW><id>7877517</id><snippet>&gt;&gt;&gt; 'Jo\xc3\xa3o'</snippet></ROW><ROW><id>7877517</id><snippet>&gt;&gt;&gt; print 'Jo\xc3\xa3o'</snippet></ROW><ROW><id>7877517</id><snippet>repr</snippet></ROW><ROW><id>7877517</id><snippet>str</snippet></ROW><ROW><id>7877517</id><snippet>unicode</snippet></ROW><ROW><id>7877517</id><snippet>&gt;&gt;&gt; print 'Jo\xc3\xa3o'.decode('utf-8')
João
&gt;&gt;&gt; 'Jo\xc3\xa3o'.decode('utf-8')
u'Jo\xe3o'
&gt;&gt;&gt; print repr('Jo\xc3\xa3o'.decode('utf-8'))
u'Jo\xe3o'
</snippet></ROW><ROW><id>7877517</id><snippet>ldap_username</snippet></ROW><ROW><id>7877517</id><snippet>'ASCII string'</snippet></ROW><ROW><id>7877517</id><snippet>u'Unicode string'</snippet></ROW><ROW><id>7877517</id><snippet>u</snippet></ROW><ROW><id>7877517</id><snippet>ldap_username</snippet></ROW><ROW><id>7877517</id><snippet>'Jo\xc3\xa3o'</snippet></ROW><ROW><id>7877517</id><snippet>&gt;&gt;&gt; 'Jo\xc3\xa3o'.decode('utf-8')
u'Jo\xe3o'
&gt;&gt;&gt; print 'Jo\xc3\xa3o'.decode('utf-8') # To Unicode...
João
&gt;&gt;&gt; u'João'.encode('utf-8')             # ... back to ASCII
'Jo\xc3\xa3o'
</snippet></ROW><ROW><id>7877517</id><snippet>type</snippet></ROW><ROW><id>7877836</id><snippet>from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class MyMixin(object):
    id =  Column(Integer, primary_key=True)
    data = Column(String)

class MyModel1(MyMixin, Base):
    __tablename__ = 'models1'

class MyModel2(MyMixin, Base):
    __tablename__ = 'models2'
</snippet></ROW><ROW><id>7877918</id><snippet>from __future__ import print_function
print = lambda x: sys.stdout.write("%s\n" % x)
</snippet></ROW><ROW><id>7877974</id><snippet>fabric.context_managers.path</snippet></ROW><ROW><id>7877974</id><snippet>fabric.context_managers.cd</snippet></ROW><ROW><id>7877974</id><snippet>def srefresh():
    with cd('~me/myproject'):
        run('python manage.py collectstatic')
</snippet></ROW><ROW><id>7878882</id><snippet>with</snippet></ROW><ROW><id>7878882</id><snippet>with</snippet></ROW><ROW><id>7878882</id><snippet>with EXPR as VAR:
    BLOCK
</snippet></ROW><ROW><id>7878882</id><snippet>mgr = (EXPR)
exit = type(mgr).__exit__  # Not calling it yet
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value  # Only if "as VAR" is present
        BLOCK
    except:
        # The exceptional case is handled here
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
        # The exception is swallowed if exit() returns true
finally:
    # The normal and non-local-goto cases are handled here
    if exc:
        exit(mgr, None, None, None)
</snippet></ROW><ROW><id>7879027</id><snippet>C</snippet></ROW><ROW><id>7879027</id><snippet>schemamigration --auto</snippet></ROW><ROW><id>7879027</id><snippet>forwards</snippet></ROW><ROW><id>7879027</id><snippet>backwards</snippet></ROW><ROW><id>7879027</id><snippet>db.rename_table('yourappname_m2mtablename', 'yourappname_c')</snippet></ROW><ROW><id>7879027</id><snippet>db.rename_table('yourappname_c', 'yourappname_m2mtablename')</snippet></ROW><ROW><id>7879027</id><snippet>C</snippet></ROW><ROW><id>7879148</id><snippet>taskqueue.add(url='/path/to/my/worker/', params={'key': key},
              target='1.backend1')
</snippet></ROW><ROW><id>7879244</id><snippet>&gt;&gt;&gt; os.path.commonprefix(['abcde', 'abcdf', 'abcef', 'abcnn'])
'abc'
</snippet></ROW><ROW><id>7879483</id><snippet>direct_to_template</snippet></ROW><ROW><id>7880038</id><snippet>class Test:
    i = 3
    y = 3 * i
    def testF(self):
        print Test.y

v = Test()
v.testF()
# &gt;&gt; 9
</snippet></ROW><ROW><id>7880038</id><snippet>def</snippet></ROW><ROW><id>7880038</id><snippet>def</snippet></ROW><ROW><id>7880181</id><snippet>latin1</snippet></ROW><ROW><id>7880181</id><snippet>latin1</snippet></ROW><ROW><id>7880181</id><snippet>cp1252</snippet></ROW><ROW><id>7880181</id><snippet>&gt;&gt;&gt; guff = open('fr.dic', 'rb').read()
&gt;&gt;&gt; z = guff.decode('latin1')
&gt;&gt;&gt; sum((128 &lt;= ord(c) &lt; 160) for c in z) # count the C1 control characters
141 
&gt;&gt;&gt; aliens = set(c for c in z if 128 &lt;= ord(c) &lt; 160)
&gt;&gt;&gt; aliens
set([u'\x9c'])
&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; name(u'\x9c')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: no such name
&gt;&gt;&gt; name('\x9c'.decode('cp1252'))
'LATIN SMALL LIGATURE OE'

QED
</snippet></ROW><ROW><id>7880203</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>7880203</id><snippet>update</snippet></ROW><ROW><id>7880203</id><snippet>import collections

aMap = collections.defaultdict(dict)

for row in csv.DictReader(csv1):
    aMap[row['id']] = row

for row in csv.DictReader(csv2):
    aMap[row['id']].update(row)
</snippet></ROW><ROW><id>7880276</id><snippet>my_execfile()</snippet></ROW><ROW><id>7880276</id><snippet>execfile()</snippet></ROW><ROW><id>7880276</id><snippet>{3: 4, "a": 2}</snippet></ROW><ROW><id>7880276</id><snippet>dict()</snippet></ROW><ROW><id>7880276</id><snippet>dict([(3, 4), ('a', 2)])</snippet></ROW><ROW><id>7880276</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>7880276</id><snippet>import ast

class DictDisplayTransformer(ast.NodeTransformer):
    def visit_Dict(self, node):
        self.generic_visit(node)
        list_node = ast.List(
            [ast.copy_location(ast.Tuple(list(x), ast.Load()), x[0])
             for x in zip(node.keys, node.values)],
            ast.Load())
        name_node = ast.Name("dict", ast.Load())
        new_node = ast.Call(ast.copy_location(name_node, node),
                            [ast.copy_location(list_node, node)],
                            [], None, None)
        return ast.copy_location(new_node, node)

def my_execfile(filename, globals=None, locals=None):
    if globals is None:
        globals = {}
    if locals is None:
        locals = globals
    node = ast.parse(open(filename).read())
    transformed = DictDisplayTransformer().visit(node)
    exec compile(transformed, filename, "exec") in globals, locals
</snippet></ROW><ROW><id>7880276</id><snippet>dict</snippet></ROW><ROW><id>7880276</id><snippet># test.py
from collections import OrderedDict
print {3: 4, "a": 2}
dict = OrderedDict
print {3: 4, "a": 2}
</snippet></ROW><ROW><id>7880276</id><snippet>my_execfile("test.py")</snippet></ROW><ROW><id>7880276</id><snippet>{'a': 2, 3: 4}
OrderedDict([(3, 4), ('a', 2)])
</snippet></ROW><ROW><id>7880276</id><snippet>dict()</snippet></ROW><ROW><id>7880276</id><snippet>visit_DictComp()</snippet></ROW><ROW><id>7880276</id><snippet>DictDisplayTransformer</snippet></ROW><ROW><id>7880276</id><snippet>ConfigParser</snippet></ROW><ROW><id>7880359</id><snippet>.pylintrc</snippet></ROW><ROW><id>7880359</id><snippet>[MASTER]

# Add &lt;file or directory&gt; to the black list. It should be a base name, not a
# path. You may set this option multiple times.
ignore=tests.py, urls.py, migrations
</snippet></ROW><ROW><id>7880508</id><snippet> p1_tournaments = Tournament.objects.filter(team__player=p1)
</snippet></ROW><ROW><id>7880508</id><snippet>related_name</snippet></ROW><ROW><id>7880508</id><snippet>p1</snippet></ROW><ROW><id>7880519</id><snippet>LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/python
</snippet></ROW><ROW><id>7880519</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>7880519</id><snippet>libpython2.7.so.1.0</snippet></ROW><ROW><id>7880519</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>7880519</id><snippet>export LD_LIBRARY_PATH=/usr/local/lib</snippet></ROW><ROW><id>7880519</id><snippet>.profile</snippet></ROW><ROW><id>7880519</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>7880519</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>7880519</id><snippet>ldconfig</snippet></ROW><ROW><id>7880726</id><snippet>scipy.ndimage.map_coordinates</snippet></ROW><ROW><id>7880726</id><snippet>import numpy as np
import scipy.ndimage
import matplotlib.pyplot as plt

#-- Generate some data...
x, y = np.mgrid[-5:5:0.1, -5:5:0.1]
z = np.sqrt(x**2 + y**2) + np.sin(x**2 + y**2)

#-- Extract the line...
# Make a line with "num" points...
x0, y0 = 5, 4.5 # These are in _pixel_ coordinates!!
x1, y1 = 60, 75
num = 1000
x, y = np.linspace(x0, x1, num), np.linspace(y0, y1, num)

# Extract the values along the line, using cubic interpolation
zi = scipy.ndimage.map_coordinates(z, np.vstack((x,y)))

#-- Plot...
fig, axes = plt.subplots(nrows=2)
axes[0].imshow(z)
axes[0].plot([x0, x1], [y0, y1], 'ro-')
axes[0].axis('image')

axes[1].plot(zi)

plt.show()
</snippet></ROW><ROW><id>7880726</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#-- Generate some data...
x, y = np.mgrid[-5:5:0.1, -5:5:0.1]
z = np.sqrt(x**2 + y**2) + np.sin(x**2 + y**2)

#-- Extract the line...
# Make a line with "num" points...
x0, y0 = 5, 4.5 # These are in _pixel_ coordinates!!
x1, y1 = 60, 75
num = 1000
x, y = np.linspace(x0, x1, num), np.linspace(y0, y1, num)

# Extract the values along the line
zi = z[x.astype(np.int), y.astype(np.int)]

#-- Plot...
fig, axes = plt.subplots(nrows=2)
axes[0].imshow(z)
axes[0].plot([x0, x1], [y0, y1], 'ro-')
axes[0].axis('image')

axes[1].plot(zi)

plt.show()
</snippet></ROW><ROW><id>7880726</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#-- Generate some data...
x, y = np.mgrid[-5:5:0.1, -5:5:0.1]
z = np.sqrt(x**2 + y**2) + np.sin(x**2 + y**2)

#-- Extract the line...
# Make a line with "num" points...
x0, y0 = 5, 4.5 # These are in _pixel_ coordinates!!
x1, y1 = 60, 75
length = int(np.hypot(x1-x0, y1-y0))
x, y = np.linspace(x0, x1, length), np.linspace(y0, y1, length)

# Extract the values along the line
zi = z[x.astype(np.int), y.astype(np.int)]

#-- Plot...
fig, axes = plt.subplots(nrows=2)
axes[0].imshow(z)
axes[0].plot([x0, x1], [y0, y1], 'ro-')
axes[0].axis('image')

axes[1].plot(zi)

plt.show()
</snippet></ROW><ROW><id>7880923</id><snippet>def dict_filter(it, *keys):
    for d in it:
        yield dict((k, d[k]) for k in keys)
</snippet></ROW><ROW><id>7880923</id><snippet>dreader = [{'id':1, 'name':'Bob', 'other_stuff':'xy'},
           {'id':2, 'name':'Jen', 'other_stuff':'xx'}]

for d in dict_filter(dreader, 'id', 'name'):
    print d
</snippet></ROW><ROW><id>7880923</id><snippet>{'id': 1, 'name': 'Bob'}
{'id': 2, 'name': 'Jen'}
</snippet></ROW><ROW><id>7880956</id><snippet>You can assign a list of tags to each item using the "tags" 
item configuration option (again, when creating the item or later on).

Tag configuration options can then be specified, which will then 
apply to all items having that tag.
</snippet></ROW><ROW><id>7880956</id><snippet>tree.insert('', 'end', text = 'your text', tags = ('oddrow',))
</snippet></ROW><ROW><id>7880956</id><snippet>tree</snippet></ROW><ROW><id>7880956</id><snippet>tags</snippet></ROW><ROW><id>7880956</id><snippet>tree.tag_configure('oddrow', background='orange')
tree.tag_configure('evenrow', background='purple')
</snippet></ROW><ROW><id>7881103</id><snippet>pid=subprocess.Popen(...)//invoke the shell command which creates a bunch of files
pid.wait()//wait until terminates
for f in a folder
     open f and write something
commands..
</snippet></ROW><ROW><id>7881160</id><snippet>code.py</snippet></ROW><ROW><id>7881160</id><snippet>code</snippet></ROW><ROW><id>7881160</id><snippet>code.py</snippet></ROW><ROW><id>7881160</id><snippet>code.pyc</snippet></ROW><ROW><id>7881294</id><snippet>def listbox(listbox)</snippet></ROW><ROW><id>7881294</id><snippet>self.listbox</snippet></ROW><ROW><id>7881294</id><snippet>frame.listbox</snippet></ROW><ROW><id>7881294</id><snippet>call_listbox</snippet></ROW><ROW><id>7881294</id><snippet>Listbox</snippet></ROW><ROW><id>7881393</id><snippet>from AppKit import NSPasteboard
from LaunchServices import 
pb = NSPasteboard.generalPasteboard()
text = pb.stringForType_(kUTTypeUTF8PlainText)
</snippet></ROW><ROW><id>7881415</id><snippet>2.object_security</snippet></ROW><ROW><id>7881635</id><snippet>import csv

csvname = raw_input("Enter csv name: ")

sbuxfile = csv.reader(open(csvname), delimiter=',', quotechar='|')
# List of Data
row5, row8, row3, row7, avgequity, roe1, roe2 = ([] for i in range(7))

count = 0
# Grab data and numerical values from CSV.
for row in sbuxfile:
  count += 1
  if count == 8:     
     row8 = row
  elif count == 5:   
     row5 = row 
  elif count == 3:   
     row3 = row 
  elif count == 7:   
     row7 = row


a = 1

# Perform calculations for average equity and ROE.
while a &lt; 8 :
   if a == 1:
     avgequity.append(round(float(row8[a]),2))
     roe1.append(float(row5[a]) / float(row8[a]))
     roe2.append((float(row5[a]) / float(row3[a])) * (float(row3[a]) / float(row7[a])) * (float(row7[a]) / float(row8[a])))
     a+=1   #added this line
   else:    
     avgequity.append(round(float(row8[a]),2) + float(row8[a-1])/2) #rewrote this line as it had an error
     roe1.append(float(row5[a]) / float(row8[a]))
     roe2.append((float(row5[a]) / float(row3[a])) * (float(row3[a]) / float(row7[a])) * (float(row7[a]) / ((float(row8[a]) + float(row8[a-1]))/2)))     
     a+=1 

print "\nAverage equity is " + str(avgequity) + "\n"
print "ROE method 1 is " + str(roe1) + "\n"
print "ROE method 2 is " + str(roe2)
</snippet></ROW><ROW><id>7881708</id><snippet>[d.setdefault(j, [sum(d[len(d)-1][max(i, 0):i + 2]) for i in range(-1, j)])
 for j, d in enumerate([{0: [1]}] * 5)]
</snippet></ROW><ROW><id>7881854</id><snippet>str.split()</snippet></ROW><ROW><id>7881854</id><snippet>shlex.split()</snippet></ROW><ROW><id>7881854</id><snippet>&gt;&gt;&gt; shlex.split(myStr)
['A', 'B', 'C', 'DE', 'FE', 'GH I JK L', '', '', 'O P   Q', 'R']
</snippet></ROW><ROW><id>7881942</id><snippet>split_data = item.partition('=')
# If there was an '=', then it is now in split_data[1],
# and the pieces you want are split_data[0] and split_data[2].
# Otherwise, split_data[0] is the whole string, and
# split_data[1] and split_data[2] are empty strings ('').
</snippet></ROW><ROW><id>7882151</id><snippet>ldd mod_python.so
</snippet></ROW><ROW><id>7882385</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base
import random

Base= declarative_base()

class Customer(Base):
    __tablename__ = 'customer'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode)
    orders = relationship("Order", backref="customer")

class Order(Base):
    __tablename__ = "order"

    id = Column(Integer, primary_key=True)
    customer_id= Column(Integer, ForeignKey('customer.id'))
    amount = Column(Integer)

e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)

session = Session(e)

session.add_all([
    Customer(name="c%d" % i, orders=[
        Order(amount=random.randint(10, 100))
        for j in xrange(random.randint(0, 5))
    ])
    for i in xrange(100)
])

amount_sum = func.sum(Order.amount).label('totalamount')
amount = session.query(Order.customer_id, amount_sum).\
            group_by(Order.customer_id).\
            order_by(amount_sum.desc()).\
            limit(10).\
            subquery()

for a, b in session.query(Customer, amount.c.totalamount).\
    join(amount, amount.c.customer_id==Customer.id):
    print a.name, b
</snippet></ROW><ROW><id>7882432</id><snippet>matplotlib.pyplot.scatter</snippet></ROW><ROW><id>7882432</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Generate data...
t = np.linspace(0, 2 * np.pi, 20)
x = np.sin(t)
y = np.cos(t)

plt.scatter(t,x,c=y)
plt.show()
</snippet></ROW><ROW><id>7882564</id><snippet>setup.py build_ext -i</snippet></ROW><ROW><id>7882564</id><snippet>selftest.py</snippet></ROW><ROW><id>7882564</id><snippet>Tests\run.py</snippet></ROW><ROW><id>7882582</id><snippet>reactor.run()</snippet></ROW><ROW><id>7882582</id><snippet>.tac</snippet></ROW><ROW><id>7882582</id><snippet>.tac</snippet></ROW><ROW><id>7882582</id><snippet>twistd</snippet></ROW><ROW><id>7882582</id><snippet>.tac</snippet></ROW><ROW><id>7882582</id><snippet>Application</snippet></ROW><ROW><id>7882582</id><snippet>Service</snippet></ROW><ROW><id>7882582</id><snippet>tac</snippet></ROW><ROW><id>7882582</id><snippet>Service</snippet></ROW><ROW><id>7882582</id><snippet>.tac</snippet></ROW><ROW><id>7882582</id><snippet>Deferred</snippet></ROW><ROW><id>7882582</id><snippet>reactor.run()</snippet></ROW><ROW><id>7882582</id><snippet>Deferred</snippet></ROW><ROW><id>7882582</id><snippet>reactor.run()</snippet></ROW><ROW><id>7882582</id><snippet>&gt;&gt;&gt; from twisted.internet.defer import Deferred
&gt;&gt;&gt; d = Deferred()
&gt;&gt;&gt; def hello(result):
...     print "'d' was fired:", result
...     return result + 3
... 
&gt;&gt;&gt; d.addCallback(hello)
&lt;Deferred at ...&gt;
&gt;&gt;&gt; print d
&lt;Deferred at ...&gt;
&gt;&gt;&gt; d.callback(7)
'd' was fired: 7
&gt;&gt;&gt; print d
&lt;Deferred at ... current result: 10&gt;
</snippet></ROW><ROW><id>7882582</id><snippet>Deferred</snippet></ROW><ROW><id>7882582</id><snippet>.callback()</snippet></ROW><ROW><id>7882582</id><snippet>&gt;&gt;&gt; from twisted.internet.task import deferLater
&gt;&gt;&gt; from twisted.internet import reactor
&gt;&gt;&gt; deferLater(reactor, 1.0, lambda: 20).addCallback(hello)
&lt;Deferred at ...&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7882582</id><snippet>python -m twisted.conch.stdio</snippet></ROW><ROW><id>7882582</id><snippet>python</snippet></ROW><ROW><id>7882582</id><snippet>Deferred</snippet></ROW><ROW><id>7882582</id><snippet>.tac</snippet></ROW><ROW><id>7882582</id><snippet>tac</snippet></ROW><ROW><id>7882582</id><snippet>privilegedStartService</snippet></ROW><ROW><id>7882582</id><snippet>startService</snippet></ROW><ROW><id>7882582</id><snippet>stopService</snippet></ROW><ROW><id>7882582</id><snippet>twistd</snippet></ROW><ROW><id>7882582</id><snippet>twistd</snippet></ROW><ROW><id>7882582</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>7882582</id><snippet>twistd</snippet></ROW><ROW><id>7882582</id><snippet>select</snippet></ROW><ROW><id>7882582</id><snippet>poll</snippet></ROW><ROW><id>7882582</id><snippet>epoll</snippet></ROW><ROW><id>7882582</id><snippet>kqueue</snippet></ROW><ROW><id>7882582</id><snippet>twistd</snippet></ROW><ROW><id>7882619</id><snippet>plt.ion()</snippet></ROW><ROW><id>7882619</id><snippet>plt.show()</snippet></ROW><ROW><id>7882619</id><snippet>plt.plot(&lt;single line data&gt;, label='Construction')</snippet></ROW><ROW><id>7882619</id><snippet>plt.legend(loc='best')</snippet></ROW><ROW><id>7882708</id><snippet>--- Field.py    2011-10-24 20:33:49.000000000 +0200
+++ Field.py    2011-10-25 00:24:49.360826000 +0200
@@ -2,6 +2,7 @@

 import sys

+import xmlrpclib
 from copy import deepcopy
 from cgi import escape
 from cStringIO import StringIO
@@ -869,6 +870,8 @@
             filename = getattr(value, 'filename', value.getId())
             mimetype = getattr(value, 'content_type', mimetype)
             value = value.data
+        elif isinstance(value, xmlrpclib.Binary):
+            value = value.data
         elif isinstance(value, FileUpload) or shasattr(value, 'filename'):
             filename = value.filename
         elif isinstance(value, FileType) or shasattr(value, 'name'):
</snippet></ROW><ROW><id>7882811</id><snippet>urllib2</snippet></ROW><ROW><id>7882811</id><snippet>from lxml import html
from urllib2 import urlopen

html.parse(urlopen('https://duckduckgo.com'))
</snippet></ROW><ROW><id>7883017</id><snippet>import operator
ops = { 'or': operator.or_, 'and': operator.and_ }
print ops[op](True, False)
</snippet></ROW><ROW><id>7883028</id><snippet>site-packages</snippet></ROW><ROW><id>7883028</id><snippet>import x</snippet></ROW><ROW><id>7883028</id><snippet>site-packages</snippet></ROW><ROW><id>7883028</id><snippet>./app1.py
./lib1/__init__.py
./lib1/lib1.py
./lib2/__init__.py
./lib2/lib2.py
...etc
</snippet></ROW><ROW><id>7883028</id><snippet>site-packages</snippet></ROW><ROW><id>7883028</id><snippet>site-packages</snippet></ROW><ROW><id>7883028</id><snippet>develop</snippet></ROW><ROW><id>7883028</id><snippet>site-packages</snippet></ROW><ROW><id>7883038</id><snippet>&gt;&gt;&gt; wide_list = [[1,['a','b','c']],[2,['d','e']],[3, ['f']]]
&gt;&gt;&gt; long_list = [[k, v] for k, sublist in wide_list for v in sublist]
&gt;&gt;&gt; long_list
[[1, 'a'], [1, 'b'], [1, 'c'], [2, 'd'], [2, 'e'], [3, 'f']]
</snippet></ROW><ROW><id>7883038</id><snippet>[3, 'f']</snippet></ROW><ROW><id>7883038</id><snippet>[3, ['f']]</snippet></ROW><ROW><id>7883401</id><snippet>N/A</snippet></ROW><ROW><id>7883401</id><snippet>class MyHTMLParser(HTMLParser):
    def __init__(self, *args, **kwargs):
        self.outerloop = True
        self.capture_data = False
        self.dataArray = []
        self.celldata="NA"
        self.firstnum=0
        self.secondnum=0
        HTMLParser.__init__(self, *args, **kwargs)

    def handle_starttag(self, tag, attrs):
        if tag == 'table' and self.outerloop:
            self.outerloop=False
        elif tag=='td' and not self.outerloop:
            self.capture_data=True # bool to indicate we want to capture data
            self.firstnum+=1    # increment first num to say we have encountered the tag in question
        elif tag=='th':
            self.capture_data=False

    def handle_endtag(self, tag):
        if tag == 'table':
            self.capture_data=False
        elif tag == 'td' and not self.firstnum == self.secondnum:   #check if they are not equal
            self.dataArray.append(self.celldata)    # append filler data
            self.secondnum=self.firstnum    # make them equal for next tag

    def handle_data(self, data):
        if self.capture_data::
            self.dataArray.append(data)
            self.secondnum=self.firstnum

def getTides(self):
    self.p = MyHTMLParser()

    url = 'http://www.mysite.com/page.php'
    content = urllib.urlopen(url).read()
    self.p.feed(content)

    val=0
    resultString=""

    while val &lt; len(self.p.dataArray):
        resultString+=self.p.dataArray[val]+","
        val+=1

    return HttpResponse(resultString[:-1])
</snippet></ROW><ROW><id>7883677</id><snippet>dupChk()</snippet></ROW><ROW><id>7883677</id><snippet>Apath</snippet></ROW><ROW><id>7883677</id><snippet>self.APath</snippet></ROW><ROW><id>7883677</id><snippet>Apath</snippet></ROW><ROW><id>7883677</id><snippet>dupChk()</snippet></ROW><ROW><id>7883677</id><snippet>Apath</snippet></ROW><ROW><id>7883677</id><snippet>self.Apath</snippet></ROW><ROW><id>7883677</id><snippet>dupChk(self.Apath)</snippet></ROW><ROW><id>7883677</id><snippet>Window</snippet></ROW><ROW><id>7883677</id><snippet>Window</snippet></ROW><ROW><id>7883677</id><snippet>Widget</snippet></ROW><ROW><id>7883677</id><snippet>Widget</snippet></ROW><ROW><id>7883677</id><snippet>main()</snippet></ROW><ROW><id>7883677</id><snippet>__init__()</snippet></ROW><ROW><id>7883677</id><snippet>Button</snippet></ROW><ROW><id>7883677</id><snippet>Button</snippet></ROW><ROW><id>7883677</id><snippet>FileChooserButtons</snippet></ROW><ROW><id>7883677</id><snippet>"file-set"</snippet></ROW><ROW><id>7883677</id><snippet>char *filea, *fileb;
hyptothetical_widget widget = new_hypothetical_widget("foo");
hypthetical_connect(widget, &amp;callback, &amp;filea);
</snippet></ROW><ROW><id>7883677</id><snippet>&amp;filea</snippet></ROW><ROW><id>7883677</id><snippet>&amp;fileb</snippet></ROW><ROW><id>7883677</id><snippet>&amp;</snippet></ROW><ROW><id>7883677</id><snippet>#!/usr/bin/python

import gtk

def pick_file(widget, filename):
    filename[0] = widget.get_filename()
    print filename
    update_entry_boxes()

def update_entry_boxes():
    ea.set_text(filea[0])
    eb.set_text(fileb[0])



filea=["None Selected"]
fileb=["None Selected"]

win = gtk.Window(gtk.WINDOW_TOPLEVEL)
box = gtk.HBox();

ba = gtk.FileChooserButton("File A")
ba.connect("file-set", pick_file, filea)
bb = gtk.FileChooserButton("File B")
bb.connect("file-set", pick_file, fileb)
ea = gtk.Entry()
eb = gtk.Entry()

box.add(ba)
box.add(ea)
box.add(bb)
box.add(eb)

update_entry_boxes()

win.add(box)
win.show_all()

gtk.main()
</snippet></ROW><ROW><id>7883987</id><snippet>yield</snippet></ROW><ROW><id>7883987</id><snippet>yield</snippet></ROW><ROW><id>7883987</id><snippet>def get_lines(files):
    for f in files:
        for line in f:
            #preprocess line
            yield line
</snippet></ROW><ROW><id>7883987</id><snippet>for line in get_lines(files):
    #process line
</snippet></ROW><ROW><id>7883995</id><snippet>True</snippet></ROW><ROW><id>7883995</id><snippet>False</snippet></ROW><ROW><id>7883995</id><snippet>app = wx.PySimpleApp()

f = Frame(None, -1, "Some Title For This Frame")
f.Show()

app.MainLoop()

# Down here more code can follow.  
</snippet></ROW><ROW><id>7883995</id><snippet>wx.GetApp().ExitMainLoop()</snippet></ROW><ROW><id>7884156</id><snippet>remove</snippet></ROW><ROW><id>7884156</id><snippet>None</snippet></ROW><ROW><id>7884156</id><snippet>None</snippet></ROW><ROW><id>7884156</id><snippet>join</snippet></ROW><ROW><id>7884268</id><snippet>sys.path</snippet></ROW><ROW><id>7884268</id><snippet>lib</snippet></ROW><ROW><id>7884268</id><snippet>sys.path</snippet></ROW><ROW><id>7884268</id><snippet>lib</snippet></ROW><ROW><id>7884268</id><snippet>dev_appserver</snippet></ROW><ROW><id>7884634</id><snippet>from django.db import models

class Service(models.Model):
    port = models.PositiveIntegerField()

class SSHService(Service):
    username = models.CharField(max_length=64)
    pkey = models.TextField()   

class TelnetService(Service):
    username = models.CharField(max_length=64)
    password = models.CharField(max_length=64)

class GenericTcpService(Service):
    pass

class GenericUDPService(Service):
    pass

class Node(models.Model):
    name = models.CharField(max_length=64)
    # various fields                                                                                                                                
    services = models.ManyToManyField(Service)
</snippet></ROW><ROW><id>7884634</id><snippet>node = Node.objects.get(pk=node_id)

for service in node.services.all():
    # Do something with the service
</snippet></ROW><ROW><id>7884634</id><snippet>from django.core.exceptions import ObjectDoesNotExist

try:
    telnet_service = service.telnetservice
except (AttributeError, ObjectDoesNotExist):
    # You chose the wrong child type!
    telnet_service = None
</snippet></ROW><ROW><id>7884745</id><snippet>def debug(val):
  logging.debug('DEBUG: %r', val)
  return val

 ...
LengthOfWire = debug(CoilVolume / WireCrossSection / 2)
</snippet></ROW><ROW><id>7884820</id><snippet>__init__</snippet></ROW><ROW><id>7884820</id><snippet>models.Model</snippet></ROW><ROW><id>7884820</id><snippet>class Job(models.Model):
    veryImportant = models.IntegerField()
    def get_fee():
        return 2 * veryImportant

class Report(models.Model):
    job = models.ForeignKey(Job)
    overridableFee = models.DecimalField(max_digits=7, decimal_places=2)
    def __init__(self, *args, **kwargs):
        super(Report, self).__init__(*args, **kwargs)
        if not self.id:
            self.overridableFee = self.job.get_fee() 
</snippet></ROW><ROW><id>7884826</id><snippet>[][0].toxml()
</snippet></ROW><ROW><id>7884826</id><snippet>sub.firstChild.nodeValue
</snippet></ROW><ROW><id>7884905</id><snippet>def make_station_files(traveltimes, header_lines):
    'Gives the STAxx.tgrid files required by loc3d'

    with open (header_lines, 'r') as f:
        headers = f.readlines()

    def station_counter(line, cnt=[1]):
        'Stateful station counter -- Keeps the count in a mutable list'
        if line.strip() == '':
            cnt[0] += 1
        return cnt[0]

    with open(traveltimes, 'r') as times_file:
        for station, group in groupby(times_file, station_counter):
            with open('STA%s' % (station), 'w') as output_file:
                for header in headers[:3]:
                    output_file.write ('%s\n\t1\n' % (header.strip()))
                for line in group:
                    if not line.startswith('           '):
                        output_file.write ('%s' % (line)) 
</snippet></ROW><ROW><id>7884907</id><snippet>{% for list_id, dict in list_summary.items %}
    list_id: {{ list_id }}
    {% for k, v in dict.items %}
        key: {{ k }} &lt;!-- name, total --&gt;
        value: {{ v }} 
    {% endfor }
{% endfor %}


{% for list_id, value in list_summary.items %}
    list_id: {{ list_id }}
    Name: {{ value.name }}
    Value: {{ value.value }
{% endfor %}
</snippet></ROW><ROW><id>7885108</id><snippet>from tempfile import
from shutil import copyfileobj
from os import remove

tempFileObj = tempfile.NamedTemporaryFile(mode='w+b',suffix='jpg')
pilImage = open('/tmp/myfile.jpg','rb')
copyfileobj(pilImage,tempFileObj)
pilImage.close()
remove('/tmp/myfile.jpg')
tempFileObj.seek(0,0)
</snippet></ROW><ROW><id>7885108</id><snippet>from flask import make_response

@app.route('/path')
def view_method():
    response = make_response(tempFileObj)
    response.headers['Content-Type'] = 'image/jpeg'
    response.headers['Content-Disposition'] = 'attachment; filename=myfile.jpg'
    return response
</snippet></ROW><ROW><id>7885180</id><snippet>'</snippet></ROW><ROW><id>7885886</id><snippet>from BeautifulSoup import BeautifulSoup as parser

def detect_feeds_in_HTML(input_stream):
    """ examines an open text stream with HTML for referenced feeds.

    This is achieved by detecting all ``link`` tags that reference a feed in HTML.

    :param input_stream: an arbitrary opened input stream that has a :func:`read` method.
    :type input_stream: an input stream (e.g. open file or URL)
    :return: a list of tuples ``(url, feed_type)``
    :rtype: ``list(tuple(str, str))``
    """
    # check if really an input stream
    if not hasattr(input_stream, "read"):
        raise TypeError("An opened input *stream* should be given, was %s instead!" % type(input_stream))
    result = []
    # get the textual data (the HTML) from the input stream
    html = parser(input_stream.read())
    # find all links that have an "alternate" attribute
    feed_urls = html.findAll("link", rel="alternate")
    # extract URL and type
    for feed_link in feed_urls:
        url = feed_link.get("href", None)
        # if a valid URL is there
        if url:
            result.append(url)
    return result
</snippet></ROW><ROW><id>7885958</id><snippet>yield</snippet></ROW><ROW><id>7885958</id><snippet>yield</snippet></ROW><ROW><id>7885958</id><snippet>def simple_generator(start=0, end=100):
    while start &lt; end:
        start += 1
        yield start
gen = simple_generator()
gen() # 1
gen() # 2
gen() # 3
</snippet></ROW><ROW><id>7885958</id><snippet>class simple_generator {
    private $start;
    private $end;
    function __construct($start=0, $end=100) {
        $this-&gt;start = $start;
        $this-&gt;end = $end;
    }
    function __call() {
        if($this-&gt;start &lt; $this-&gt;end) {
            $this-&gt;start++;
            return $start;
        }
    }
}
gen = simple_generator();
gen(); // 1
gen(); // 2
</snippet></ROW><ROW><id>7885958</id><snippet>xrange</snippet></ROW><ROW><id>7885958</id><snippet>range</snippet></ROW><ROW><id>7885958</id><snippet>assert</snippet></ROW><ROW><id>7886060</id><snippet>&gt;&gt;&gt; query = 'INSERT INTO (%s) VALUES (%s)' % (','.join([str(i) for i in list1]),
                                              ','.join([str(i) for i in list2]))
&gt;&gt;&gt; print query
INSERT INTO (name,age,sex) VALUES (test,10,female)
</snippet></ROW><ROW><id>7886060</id><snippet>str</snippet></ROW><ROW><id>7886060</id><snippet>&gt;&gt;&gt; list1 = ['name', 'age', 'sex']
&gt;&gt;&gt; list2 = ['test', 10, 'female']
&gt;&gt;&gt; f = lambda l: ','.join(["'%s'" % str(s) for s in l])
&gt;&gt;&gt; print 'INSERT INTO (%s) VALUES (%s)' % (f(list1), f(list2))
INSERT INTO ('name','age','sex') VALUES ('test','10','female')
</snippet></ROW><ROW><id>7886125</id><snippet>2to3</snippet></ROW><ROW><id>7886125</id><snippet>ast</snippet></ROW><ROW><id>7886386</id><snippet>defaultdict</snippet></ROW><ROW><id>7886386</id><snippet>None</snippet></ROW><ROW><id>7886386</id><snippet>defaultdict(lambda: None)
</snippet></ROW><ROW><id>7887037</id><snippet>Signals.CTS</snippet></ROW><ROW><id>7887037</id><snippet>CTS, DSR, XXX, YYY, ZZZ = range(5)
</snippet></ROW><ROW><id>7887037</id><snippet>if signal == signals.CTS:</snippet></ROW><ROW><id>7887050</id><snippet>try:
    import MySQLdb as mysql
except ImportError:
    import mymodule as mysql
</snippet></ROW><ROW><id>7887082</id><snippet>def user_link(self, obj):
        return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (
            urlresolvers.reverse('admin:auth_user_change', args=(obj.user.id,)), obj.user
            )
user_link.allow_tags = True
user_link.short_description = 'User'
</snippet></ROW><ROW><id>7887210</id><snippet>[]</snippet></ROW><ROW><id>7887210</id><snippet>Data</snippet></ROW><ROW><id>7887210</id><snippet>self.data</snippet></ROW><ROW><id>7887210</id><snippet>class Data:
    def __init__(self, data=None):
        if data is None:
            data=[]
        self.data = data
    def add(self, data):
        self.data.extend(data)
</snippet></ROW><ROW><id>7887333</id><snippet>sys.path</snippet></ROW><ROW><id>7887333</id><snippet>sys.path.append(r'.\mymodule')            # Relative path
sys.path.append(r'C:\path\to\my\module')  # Absolute path
</snippet></ROW><ROW><id>7887333</id><snippet>Program Files</snippet></ROW><ROW><id>7887341</id><snippet>os.path.split(__file__)</snippet></ROW><ROW><id>7887341</id><snippet>def resource_path(relative):
    return os.path.join(
        os.environ.get(
            "_MEIPASS2",
            os.path.abspath(".")
        ),
        relative
    )


# in development
&gt;&gt;&gt; resource_path("logging.conf")
"/home/shish/src/my_app/logging.conf"

# in deployment
&gt;&gt;&gt; resource_path("logging.conf")
"/tmp/_MEI34121/logging.conf"
</snippet></ROW><ROW><id>7887647</id><snippet>yield</snippet></ROW><ROW><id>7887647</id><snippet>def node_cut(input_file):
    NODE_LENGTH = 500
    count_output = 0
    node_list=[]

    for line in input_file.readlines():
        if len(node_list) &gt;= NODE_LENGTH :
            count_output += 1   
            yield( node_list,count_output )
            node_list=[]  

        node,t=line.split(',')
        node_list.append(node) 

if __name__ =='__main__':
    with open('all_nodes.txt','r') as input_data:
      for node_list, count_output in node_cut(input_data):
        some_process(node_list)
</snippet></ROW><ROW><id>7888118</id><snippet>^([^t]|(t[^r])|(tr[^e])|(tre[^e]))*($|(t($|(r($|e$)))))
</snippet></ROW><ROW><id>7888217</id><snippet>TheWorld.Display()
</snippet></ROW><ROW><id>7888542</id><snippet>cpplint.py</snippet></ROW><ROW><id>7888542</id><snippet>subprocess.CalledProcessError</snippet></ROW><ROW><id>7888542</id><snippet>CalledProcessError</snippet></ROW><ROW><id>7888542</id><snippet>try:
    output = subprocess.check_output(cmd)
except subprocess.CalledProcessError as e:
    # ack!  cpplint.py failed... report an error to the user?
</snippet></ROW><ROW><id>7888542</id><snippet>SyntaxError</snippet></ROW><ROW><id>7888542</id><snippet>C:\Python32\lib</snippet></ROW><ROW><id>7888542</id><snippet>import site</snippet></ROW><ROW><id>7888542</id><snippet>c:/Python27/python.exe C:/users/me/Documents/dev/cpplint.py ...
</snippet></ROW><ROW><id>7888542</id><snippet>C:\Python32\lib\site.py</snippet></ROW><ROW><id>7888542</id><snippet>C:\Python27\lib\site.py</snippet></ROW><ROW><id>7888542</id><snippet>site.py</snippet></ROW><ROW><id>7888542</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>7888542</id><snippet>cpplint</snippet></ROW><ROW><id>7888542</id><snippet>CalledProcessError</snippet></ROW><ROW><id>7888542</id><snippet>C:\Python32\lib</snippet></ROW><ROW><id>7888542</id><snippet>python2_env = {"PYTHONPATH": "path/to/python2/stuff:..."}
output = subprocess.check_output(cmd, env=python2_env)
</snippet></ROW><ROW><id>7888562</id><snippet>//table[@id='table_1']//td/text()
</snippet></ROW><ROW><id>7888562</id><snippet>[&lt;TextNode textContent="Important text 1."&gt;,
 &lt;TextNode textContent="Important text 2."&gt;,
 &lt;TextNode textContent="Important text 3."&gt;,
 &lt;TextNode textContent="Important text 4."&gt;,
 &lt;TextNode textContent="Important text 5."&gt;]
</snippet></ROW><ROW><id>7888562</id><snippet>td</snippet></ROW><ROW><id>7888562</id><snippet>//div[contains(@id, "random_id")]</snippet></ROW><ROW><id>7888562</id><snippet>&lt;div id="random_div"&gt;</snippet></ROW><ROW><id>7888562</id><snippet>_id</snippet></ROW><ROW><id>7888562</id><snippet>_div</snippet></ROW><ROW><id>7888612</id><snippet>'was' : 'DECLARATOR_WAS'</snippet></ROW><ROW><id>7888612</id><snippet>'a' : 'DECLARATOR_A'</snippet></ROW><ROW><id>7888725</id><snippet>Cache-Control</snippet></ROW><ROW><id>7888725</id><snippet>Expires</snippet></ROW><ROW><id>7888815</id><snippet>python setup.py build -b &lt;somedir&gt; install
</snippet></ROW><ROW><id>7888864</id><snippet>items</snippet></ROW><ROW><id>7888864</id><snippet>iteritems</snippet></ROW><ROW><id>7888864</id><snippet>items()</snippet></ROW><ROW><id>7888864</id><snippet>len</snippet></ROW><ROW><id>7888864</id><snippet>in</snippet></ROW><ROW><id>7888864</id><snippet>top_words = (words.iteritems(), ...</snippet></ROW><ROW><id>7888864</id><snippet>sorted</snippet></ROW><ROW><id>7889014</id><snippet>with</snippet></ROW><ROW><id>7889014</id><snippet>__enter__()</snippet></ROW><ROW><id>7889014</id><snippet>__exit__()</snippet></ROW><ROW><id>7889014</id><snippet>__enter__()</snippet></ROW><ROW><id>7889014</id><snippet>with</snippet></ROW><ROW><id>7889014</id><snippet>__exit__()</snippet></ROW><ROW><id>7889014</id><snippet>with MyClass() as foo:
    # use foo here
</snippet></ROW><ROW><id>7889014</id><snippet>__enter__()</snippet></ROW><ROW><id>7889014</id><snippet>self</snippet></ROW><ROW><id>7889014</id><snippet>__exit__()</snippet></ROW><ROW><id>7889014</id><snippet>finish()</snippet></ROW><ROW><id>7889079</id><snippet>blogpost.tags[:] = []
</snippet></ROW><ROW><id>7889079</id><snippet>blogpost.tags[:] = new_tags
</snippet></ROW><ROW><id>7889427</id><snippet>add()</snippet></ROW><ROW><id>7889427</id><snippet>dbsession = db.session()
for row in data:
    newtoner = Toner(row[0], row[1], row[2])
    dbsession.add(newtoner)
dbsession.commit()
</snippet></ROW><ROW><id>7889606</id><snippet>tour.pk</snippet></ROW><ROW><id>7889606</id><snippet>%i</snippet></ROW><ROW><id>7889606</id><snippet>float</snippet></ROW><ROW><id>7889606</id><snippet>__int__</snippet></ROW><ROW><id>7889640</id><snippet>In [1]: import networkx as nx

In [2]: G=nx.path_graph(4)

In [3]: A=nx.to_agraph(G)

In [4]: A.layout(prog='dot')

In [5]: png=A.draw(format='png')

In [6]: png[0:10]
Out[6]: '\x89PNG\r\n\x1a\n\x00\x00'
</snippet></ROW><ROW><id>7890112</id><snippet>str.split</snippet></ROW><ROW><id>7890112</id><snippet>for element in l:
    parts = element.split(',')
    print parts
</snippet></ROW><ROW><id>7890112</id><snippet>element.strip().split(',')</snippet></ROW><ROW><id>7890373</id><snippet>len(list1)-1</snippet></ROW><ROW><id>7890373</id><snippet>list</snippet></ROW><ROW><id>7890373</id><snippet>list</snippet></ROW><ROW><id>7890373</id><snippet>class MyList(list):
    def last_index(self):
        return len(self)-1


&gt;&gt;&gt; l=MyList([1, 2, 33, 51])
&gt;&gt;&gt; l.last_index()
3
</snippet></ROW><ROW><id>7890645</id><snippet>self.Bind (wx.EVT_TREE_ITEM_ACTIVATED, self.OnAdd, id=10)
</snippet></ROW><ROW><id>7890645</id><snippet>source</snippet></ROW><ROW><id>7890645</id><snippet>id</snippet></ROW><ROW><id>7890645</id><snippet>self.tree = wx.TreeCtrl(self, size=(200,100)) # Or however you defined it
self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnAdd, self.tree, id=10)
</snippet></ROW><ROW><id>7890645</id><snippet>event</snippet></ROW><ROW><id>7890645</id><snippet>OnAdd</snippet></ROW><ROW><id>7890645</id><snippet>tree</snippet></ROW><ROW><id>7890645</id><snippet>GetItem</snippet></ROW><ROW><id>7890645</id><snippet>import wx

class TreeExample(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title='Tree Example', size=(200, 130))
        self.tree = wx.TreeCtrl(self, size=(200, 100))

        root = self.tree.AddRoot('root')
        for item in ['item1', 'item2', 'item3']:
            self.tree.AppendItem(root, item)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnActivated, self.tree)
        self.tree.Expand(root)

    def OnActivated(self, evt):
        print 'Double clicked on', self.tree.GetItemText(evt.GetItem())

app = wx.PySimpleApp(None)
TreeExample().Show()
app.MainLoop()
</snippet></ROW><ROW><id>7890829</id><snippet>update_task_state = DDL('''\
CREATE TRIGGER update_task_state UPDATE OF state ON obs
  BEGIN
    UPDATE task SET state = 2 WHERE (obs_id = old.id) and (new.state = 2);
  END;''')
event.listen(Obs.__table__, 'after_create', update_task_state)
</snippet></ROW><ROW><id>7890829</id><snippet>from sqlalchemy.orm import validates

class Obs(DeclarativeBase):
    __tablename__ = 'obs'
    id = Column(Integer, primary_key=True)
    state = Column(Integer, default=0)
    @validates('state')
    def update_state(self, key, value):
        self.task.state = value
        return value
</snippet></ROW><ROW><id>7891137</id><snippet>h5py</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>h5py</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>h5py</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>h5py</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891137</id><snippet>h5py</snippet></ROW><ROW><id>7891137</id><snippet>pyTables</snippet></ROW><ROW><id>7891282</id><snippet>a,b,c,a,b
1,2,3,4,5
6,7,8,9,10
</snippet></ROW><ROW><id>7891282</id><snippet>{'a': '4', 'c': '3', 'b': '5'}
{'a': '9', 'c': '8', 'b': '10'}
</snippet></ROW><ROW><id>7891282</id><snippet>a</snippet></ROW><ROW><id>7891282</id><snippet>b</snippet></ROW><ROW><id>7891302</id><snippet>Deferred</snippet></ROW><ROW><id>7891302</id><snippet>Deferred.addCallback</snippet></ROW><ROW><id>7891302</id><snippet>Deferred.addCallback</snippet></ROW><ROW><id>7891302</id><snippet>def function(self,filename):    
    def results(result, name):
       # do something
    for i in range(int(numbers)) :
        name = something that has to do with the value of i         
        df = function_which_returns_a defer(name)
        df.addCallback(results, name)
</snippet></ROW><ROW><id>7891302</id><snippet>        df.addCallback(results, name=name)
</snippet></ROW><ROW><id>7891302</id><snippet>addCallback</snippet></ROW><ROW><id>7891302</id><snippet>addErrback</snippet></ROW><ROW><id>7891532</id><snippet>mx.DateTime.ISO.ParseDateTimeUTC</snippet></ROW><ROW><id>7891532</id><snippet>tzoffset</snippet></ROW><ROW><id>7891681</id><snippet>def</snippet></ROW><ROW><id>7891681</id><snippet>&gt;&gt;&gt; class c:
...     def m(self):
...         pass
...
&gt;&gt;&gt; c.m
&lt;function m at 0x025FAE88&gt;
</snippet></ROW><ROW><id>7891681</id><snippet>__dict__</snippet></ROW><ROW><id>7891681</id><snippet>&gt;&gt;&gt; c.m.i = 0
&gt;&gt;&gt; c.m.__dict__
{'i': 0}
</snippet></ROW><ROW><id>7891681</id><snippet>&gt;&gt;&gt; c().m
&lt;bound method c.m of &lt;__main__.c object at 0x025206D0&gt;&gt;
&gt;&gt;&gt; c().m.__self__
&lt;__main__.c object at 0x02625070&gt;
&gt;&gt;&gt; c().m.__func__
&lt;function m at 0x025FAE88&gt;
&gt;&gt;&gt; c().m.__func__ is c.m
True
</snippet></ROW><ROW><id>7891681</id><snippet>__getattr__</snippet></ROW><ROW><id>7891681</id><snippet>&gt;&gt;&gt; c().m.i
0
</snippet></ROW><ROW><id>7891681</id><snippet>__dict__</snippet></ROW><ROW><id>7891681</id><snippet>&gt;&gt;&gt; c().m.__dict__['a'] = 42
&gt;&gt;&gt; c.m.a
42
&gt;&gt;&gt; c().m.__dict__ is c.m.__dict__
True
</snippet></ROW><ROW><id>7891681</id><snippet>__dict__</snippet></ROW><ROW><id>7891889</id><snippet>if len(a) &lt; len(b):
    c = b.copy()
    c[:len(a)] += a
else:
    c = a.copy()
    c[:len(b)] += b
</snippet></ROW><ROW><id>7892028</id><snippet>A</snippet></ROW><ROW><id>7892028</id><snippet>V</snippet></ROW><ROW><id>7892028</id><snippet>[1,2,0]</snippet></ROW><ROW><id>7892028</id><snippet>import numpy as np
A = np.arange(6).reshape((3,2)) + 1
V = [4,6,2]
column = A[:,1].tolist()
order = [column.index(item) for item in V]
print A[order,:]
</snippet></ROW><ROW><id>7892028</id><snippet>numpy.unique</snippet></ROW><ROW><id>7892028</id><snippet>unique</snippet></ROW><ROW><id>7892028</id><snippet>import numpy as np
A = np.arange(6).reshape((3,2)) + 1
V = np.array([4,6,2])
vals, order = np.unique(np.hstack((A[:,1],V)), return_inverse=True)
order = order[-V.size:]
print A[order,:]
</snippet></ROW><ROW><id>7892050</id><snippet>class A(object):
    def __enter__(self):
        return self
    def __exit__(self, *args):
        print "exit", self

class B(object):
    def __enter__(self):
        return self
    def __exit__(self, *args):
        print "exit", self
        raise Exception

with A() as a, B() as b:
    pass
</snippet></ROW><ROW><id>7892050</id><snippet>__exit__</snippet></ROW><ROW><id>7892050</id><snippet>A</snippet></ROW><ROW><id>7892050</id><snippet>B</snippet></ROW><ROW><id>7892050</id><snippet>B</snippet></ROW><ROW><id>7892050</id><snippet>A</snippet></ROW><ROW><id>7892050</id><snippet>__exit__</snippet></ROW><ROW><id>7892050</id><snippet>__exit__</snippet></ROW><ROW><id>7892050</id><snippet>__exit__</snippet></ROW><ROW><id>7892209</id><snippet>self</snippet></ROW><ROW><id>7892209</id><snippet>myCallback</snippet></ROW><ROW><id>7892209</id><snippet>self</snippet></ROW><ROW><id>7892209</id><snippet>class C(object):
   def f(self):
     def g():
        print self
     return g

c = C()
g = c.f()
g()
&gt;&gt;&gt; &lt;__main__.C object at 0x02AED1F0&gt;
</snippet></ROW><ROW><id>7892225</id><snippet>utf-8</snippet></ROW><ROW><id>7892225</id><snippet>ascii</snippet></ROW><ROW><id>7892225</id><snippet>utf-8</snippet></ROW><ROW><id>7892225</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>7892225</id><snippet>mecab</snippet></ROW><ROW><id>7893497</id><snippet>2</snippet></ROW><ROW><id>7893497</id><snippet>from networkx.algorithms.traversal.depth_first_search import dfs_tree

subtree_at_2 = dfs_tree(t, 2)
</snippet></ROW><ROW><id>7893497</id><snippet>dfs_tree(t.reverse(), 2)</snippet></ROW><ROW><id>7893523</id><snippet>from django.contrib.auth import authenticate, login
user = authenticate(username = username, password = password)
if user is not None:
    login(request, user)
</snippet></ROW><ROW><id>7893580</id><snippet>x[1, 2]</snippet></ROW><ROW><id>7893580</id><snippet>x.__getitem__((1, 2))</snippet></ROW><ROW><id>7893580</id><snippet>def __getitem__(self, ij):
   i, j = ij
   return self.x[i], self.y[j]
</snippet></ROW><ROW><id>7893882</id><snippet>&gt;&gt;&gt; data = (('A', 'B', 'C'), ('D', 'E', 'F'), ('H', 'I', 'J'))
&gt;&gt;&gt; [list(tup) for tup in data]
[['A', 'B', 'C'], ['D', 'E', 'F'], ['H', 'I', 'J']]
</snippet></ROW><ROW><id>7894020</id><snippet>subprocess.call("echo test", stdout=log_file, stderr=subprocess.STDOUT, shell=True)
</snippet></ROW><ROW><id>7894020</id><snippet>subprocess.call(["echo", "test"], stdout=log_file, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>7894078</id><snippet>paramiko.transport</snippet></ROW><ROW><id>7894078</id><snippet>auth_none</snippet></ROW><ROW><id>7894078</id><snippet>ssh.get_transport().auth_none('sachin')
</snippet></ROW><ROW><id>7894089</id><snippet>[['&lt;b&gt;%s&lt;/b&gt;' % x for x in data] for data in my_list]
</snippet></ROW><ROW><id>7894123</id><snippet>yoururl.com/bla.html?radioName=someValue&amp;bla=hi</snippet></ROW><ROW><id>7894474</id><snippet>url_for</snippet></ROW><ROW><id>7894474</id><snippet>url</snippet></ROW><ROW><id>7894474</id><snippet>from pylons import url</snippet></ROW><ROW><id>7894483</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; path = urlparse.urlparse('http://www.mydomain.com/hithere/something/else').path
&gt;&gt;&gt; path
'/hithere/something/else'
</snippet></ROW><ROW><id>7894483</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.split(path)
('/hithere/something', 'else')
</snippet></ROW><ROW><id>7894483</id><snippet>&gt;&gt;&gt; while os.path.dirname(path) != '/':
...     path = os.path.dirname(path)
... 
&gt;&gt;&gt; path
'/hithere'
</snippet></ROW><ROW><id>7894537</id><snippet>user.agencyposition_set.all()[:1]</snippet></ROW><ROW><id>7894537</id><snippet>user.agencypostiion_set.all()[0].Agency</snippet></ROW><ROW><id>7894597</id><snippet>re</snippet></ROW><ROW><id>7894597</id><snippet>&gt;&gt;&gt; a='alRfflkafdfaeGlkAYEuRFSbbvvcbF'
&gt;&gt;&gt; import re
&gt;&gt;&gt; r=re.compile("[A-Z]{3}[a-z][A-Z]{3}")
&gt;&gt;&gt; r.findall(a)
['AYEuRFS']
</snippet></ROW><ROW><id>7894608</id><snippet>datetime.strptime</snippet></ROW><ROW><id>7894608</id><snippet>time.strptime</snippet></ROW><ROW><id>7894695</id><snippet>&lt;ul&gt;
{% for blogpost in blogposts %}
    &lt;li&gt;&lt;b&gt;{{blogpost.title}}&lt;/b&gt;: {{blogpost.content|truncatewords:10}}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>7894695</id><snippet>truncatewords_html</snippet></ROW><ROW><id>7894695</id><snippet>striptags</snippet></ROW><ROW><id>7894695</id><snippet>slice</snippet></ROW><ROW><id>7894695</id><snippet>{{blogpost.content|slice:":10"}}
</snippet></ROW><ROW><id>7894695</id><snippet>striptags</snippet></ROW><ROW><id>7894695</id><snippet>{{blogpost.content|striptags|slice:":10"}}</snippet></ROW><ROW><id>7894725</id><snippet>numpy.fft.rfft2</snippet></ROW><ROW><id>7894725</id><snippet>numpy.fft.irfft2</snippet></ROW><ROW><id>7894725</id><snippet>numpy.fft.fft2</snippet></ROW><ROW><id>7894725</id><snippet>numpy.fft.ifft2</snippet></ROW><ROW><id>7894752</id><snippet>or</snippet></ROW><ROW><id>7894752</id><snippet>and</snippet></ROW><ROW><id>7894752</id><snippet>False and some_function()
True or some_function()
</snippet></ROW><ROW><id>7894752</id><snippet>some_function()</snippet></ROW><ROW><id>7894752</id><snippet>or_(True, some_function())</snippet></ROW><ROW><id>7894752</id><snippet>some_function()</snippet></ROW><ROW><id>7895212</id><snippet>class ItemInline(admin.TabularInline):
    model = Category.items.through

class CategoryAdmin(admin.ModelAdmin):
    inlines = [
        ItemInline,
    ]
    exclude = ('items',)
</snippet></ROW><ROW><id>7895331</id><snippet>PunktSentenceTokenizer</snippet></ROW><ROW><id>7895465</id><snippet>sum</snippet></ROW><ROW><id>7895465</id><snippet>values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
</snippet></ROW><ROW><id>7895465</id><snippet>html_values = ['&lt;tr&gt;' + i + '&lt;/tr&gt;' for i in values]
</snippet></ROW><ROW><id>7895508</id><snippet>property</snippet></ROW><ROW><id>7895508</id><snippet>teams</snippet></ROW><ROW><id>7895508</id><snippet>tuple</snippet></ROW><ROW><id>7895508</id><snippet>namedtuple</snippet></ROW><ROW><id>7895508</id><snippet>get</snippet></ROW><ROW><id>7895508</id><snippet>class match(object):
    __teams=(None,None)

    def setTeams(self,tms):
        "any sequence type will do, as long as length is two"
        if len(tms) != 2:
            raise TypeError(
                "Teams must be a sequence of length 2"
                )
        if not isinstance(tms[0], (str, unicode)):
            raise TypeError(
                "Team names must be str or unicode, not %r" % type(tms[0])
                )
        if not isinstance(tms[1], (str, unicode)):
            raise TypeError(
                "Team names must be str or unicode, not %r" % type(tms[0])
                )
        self.__teams = tuple(tms)

    def getTeams(self):
        return self.__teams

    teams=property(getTeams,setTeams)
</snippet></ROW><ROW><id>7895508</id><snippet>Traceback (most recent call last):
  File "test.py", line 22, in &lt;module&gt;
    match1.teams[0]=5
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>7895508</id><snippet>class match(object):
    __teams=(None,None)

    def setTeams(self,tms):
        "any sequence type will do, as long as length is two"
        if len(tms) != 2:
            raise TypeError(
                "Teams must be a sequence of length 2"
                )
        if not isinstance(tms[0], (str, unicode)):
            raise TypeError(
                "Team names must be str or unicode, not %r" % type(tms[0])
                 )
        if not isinstance(tms[1], (str, unicode)):
            raise TypeError(
                "Team names must be str or unicode, not %r" % type(tms[0])
                )
        self.__teams = list(tms)

    def getTeams(self):
        return list(self.__teams)

    teams=property(getTeams,setTeams)

# and the code in action...
match1=match()
match1.teams=('us',u'them')

match1.teams[0]=5
print match1.teams
</snippet></ROW><ROW><id>7895508</id><snippet>['us', u'them']
</snippet></ROW><ROW><id>7895508</id><snippet>match</snippet></ROW><ROW><id>7895577</id><snippet>def log_saved_event(sender, instance, signal, *args, **kwargs):
    # handle Event class
    pass

from django.db.models import signals
from django.db import models

for m in models.get_models():
    signals.post_save.connect(log_saved_event, sender=m)
</snippet></ROW><ROW><id>7895593</id><snippet>multienterbox</snippet></ROW><ROW><id>7895593</id><snippet>fieldNames = ['Name query','Burns Anxiety inventory query',...]</snippet></ROW><ROW><id>7895593</id><snippet>multienterbox</snippet></ROW><ROW><id>7895593</id><snippet>title</snippet></ROW><ROW><id>7895593</id><snippet>msg</snippet></ROW><ROW><id>7895593</id><snippet>fieldValues = multenterbox(msg,title, fieldNames)
</snippet></ROW><ROW><id>7895593</id><snippet># include one variable name for each value in fieldValues
namegui, baigui, bdcgui = fieldValues
</snippet></ROW><ROW><id>7895940</id><snippet>.py</snippet></ROW><ROW><id>7895940</id><snippet>.pyc</snippet></ROW><ROW><id>7895940</id><snippet>.pyo</snippet></ROW><ROW><id>7895940</id><snippet>f[-2:]  == "py"</snippet></ROW><ROW><id>7895940</id><snippet>os.path.splitext</snippet></ROW><ROW><id>7895940</id><snippet>[root for (root, ext) in map(os.path.splitext, os.listdir(path)) if ext == '.py']
</snippet></ROW><ROW><id>7896061</id><snippet>class A:
    foo = None
    def __init__(self):
        if A.foo is None:
             A.foo = bar()
        print(A.foo)
</snippet></ROW><ROW><id>7896061</id><snippet>if</snippet></ROW><ROW><id>7896061</id><snippet>A.__new__()</snippet></ROW><ROW><id>7896061</id><snippet>A.__init__()</snippet></ROW><ROW><id>7896061</id><snippet>A</snippet></ROW><ROW><id>7896295</id><snippet>data = [] #list()
maReader = csv.reader(open('TEST.csv', 'rb'), delimiter=',', quotechar='"')
for rindex, row in enumerate(maReader):
    for iindex, item in enumerate(row):
        try:
            data[iindex].append(item)
        except IndexError:
            data.append([item])
</snippet></ROW><ROW><id>7896383</id><snippet>hits</snippet></ROW><ROW><id>7896383</id><snippet>hits</snippet></ROW><ROW><id>7896383</id><snippet>hits</snippet></ROW><ROW><id>7896383</id><snippet>multiprocessing.Pool.map()</snippet></ROW><ROW><id>7896383</id><snippet>hits</snippet></ROW><ROW><id>7896397</id><snippet>ruudukko.append(rivi[:])
</snippet></ROW><ROW><id>7896585</id><snippet>if not line.strip():
    ... do something
</snippet></ROW><ROW><id>7896585</id><snippet>if line in ['\n', '\r\n']:
    ... do  something
</snippet></ROW><ROW><id>7896765</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7896765</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("""&lt;a href="ascii"&gt;""", fromEncoding="utf-8")
&gt;&gt;&gt; isinstance(soup('a', href=True)[0]['href'], unicode)
True

&gt;&gt;&gt; soup = BeautifulSoup("""&lt;a href="αβγ"&gt;""", fromEncoding="utf-8")
&gt;&gt;&gt; soup('a', href=True)[0]['href']
u'\u03b1\u03b2\u03b3'
</snippet></ROW><ROW><id>7896765</id><snippet>unicode</snippet></ROW><ROW><id>7896765</id><snippet>isinstance()</snippet></ROW><ROW><id>7896765</id><snippet>type()</snippet></ROW><ROW><id>7896765</id><snippet>encoding=None</snippet></ROW><ROW><id>7896765</id><snippet>i.renderContents(encoding=None)
</snippet></ROW><ROW><id>7896765</id><snippet>dir(obj)</snippet></ROW><ROW><id>7896765</id><snippet>help(obj.method)</snippet></ROW><ROW><id>7896830</id><snippet>libc.fopen.restype = ctypes.c_void_p
fp = libc.fopen(...)
libc.fclose(fp)
</snippet></ROW><ROW><id>7896926</id><snippet>import numpy

a = numpy.random.random(100)

# a_by_a[i,j] = a[i] &gt; a[j]
a_by_a = a[numpy.newaxis,:] &gt; a[:,numpy.newaxis]
# by taking the upper triangular, we ignore all cases where i &lt; j
a_by_a = numpy.triu(a_by_a)
# argmax will give the first index with the highest value (1 in this case)
print numpy.argmax(a_by_a, axis = 1)
</snippet></ROW><ROW><id>7896926</id><snippet>a = numpy.random.random(100)

@numpy.vectorize
def values(i):
    try:
        return (a[i:] &gt; a[i]).nonzero()[0][0] + i
    except IndexError:
        return -1 # no valid values found

b = values(numpy.arange(100))
</snippet></ROW><ROW><id>7896926</id><snippet>@np.vectorize
def values(i):
    try:
        return next(idx for idx, value in enumerate(A[i+1:]) if value &gt; A[i]) + i + 1
    except StopIteration:
        return -1 # no valid values found
return values(np.arange(len(A)))
</snippet></ROW><ROW><id>7896926</id><snippet>def future6(A):
    # list of tuples (index into A, value in A)
    # invariant: indexes and values in sorted order
    known = []
    result = []
    for idx in xrange(len(A) - 1, -1, -1):
        value = A[idx]
        # since known is sorted a binary search could be applied here
        # I haven't bothered

        # anything lower then the current value
        # cannot possibly be used again, since this value will be first index instead
        # of those
        known = [(x,y) for x,y in known if y &gt; value]


        if known: 
            # all values in known are &gt; current value
            # they reverse sorted by index               
            # the value with the lowest index is first
            result.append(known[-1][0])
        else:
            # no values exist this high, report -1
            result.append(-1)
        # add to end of the list to maintain invariant
        known.append( (idx, value) )

    # let numpy worry about reversing the array
    return np.array(result)[::-1]
</snippet></ROW><ROW><id>7896926</id><snippet>Average distance between value and its target: 9
Average length of ascends list: 24
Average length of segment in ascends list: 1.33
Average length of known list: 9.1
</snippet></ROW><ROW><id>7896926</id><snippet>Average distance between value and its target: 31.46
Average length of ascends list: 84
Average length of segment in ascends list: 1.70
Average length of known list: 57.98
</snippet></ROW><ROW><id>7896926</id><snippet>Average distance between value and its target: 2.57
Average length of ascends list: 40
Average length of segment in ascends list: 3.27
Average length of known list: 3037.97
</snippet></ROW><ROW><id>7896926</id><snippet>def future6(A):
    # list of tuples (index into A, value in A)
    # invariant: indexes and values in sorted order
    known = []
    result = []
    for idx in xrange(len(A) - 1, -1, -1):
        value = A[idx]
        # since known is sorted a binary search could be applied here
        # I haven't bothered

        # anything lower then the current value
        # cannot possibly be used again, since this value will be first index instead
        # of those
        while known and known[-1][1] &lt; value:
            known.pop()


        if known: 
            # all values in known are &gt; current value
            # they reverse sorted by index               
            # the value with the lowest index is first
            result.append(known[-1][0])
        else:
            # no values exist this high, report -1
            result.append(-1)
        # add to end of the list to maintain invariant
        known.append( (idx, value) )

    # let numpy worry about reversing the array
    return np.array(result)[::-1]
</snippet></ROW><ROW><id>7896926</id><snippet>def future8(A):
    B = [-1] * len(A)
    for index in xrange(len(A)-2, -1, -1):
        target = index + 1
        value = A[index]
        while target != -1 and A[target] &lt; value:
            target = B[target]
        B[index] = target
    return np.array(B)
</snippet></ROW><ROW><id>7896926</id><snippet>Random series:
future2 ascends  : 0.242569923401
future6 full list: 0.0363488197327
future7 vectorize: 0.129994153976
future8 reuse: 0.0299410820007
Oscillating series:
future2 ascends  : 0.233623981476
future6 full list: 0.0360488891602
future7 vectorize: 1.19140791893
future8 reuse: 0.0297570228577
Ascending trend series:
future2 ascends  : 0.120707035065
future6 full list: 0.0314049720764
future7 vectorize: 0.0640320777893
future8 reuse: 0.0246520042419
</snippet></ROW><ROW><id>7897115</id><snippet>dot</snippet></ROW><ROW><id>7897115</id><snippet>cross</snippet></ROW><ROW><id>7897115</id><snippet>magnitude</snippet></ROW><ROW><id>7897115</id><snippet>average</snippet></ROW><ROW><id>7897115</id><snippet>median</snippet></ROW><ROW><id>7897115</id><snippet>Points</snippet></ROW><ROW><id>7897115</id><snippet>.x</snippet></ROW><ROW><id>7897115</id><snippet>.y</snippet></ROW><ROW><id>7897115</id><snippet>Point</snippet></ROW><ROW><id>7897115</id><snippet>Point</snippet></ROW><ROW><id>7897115</id><snippet>@staticmethod</snippet></ROW><ROW><id>7897115</id><snippet>Point.midpoint(a,b)</snippet></ROW><ROW><id>7897115</id><snippet>@staticmethod</snippet></ROW><ROW><id>7897115</id><snippet>__new__</snippet></ROW><ROW><id>7897115</id><snippet>staticmethod</snippet></ROW><ROW><id>7897115</id><snippet>@staticmethod</snippet></ROW><ROW><id>7897662</id><snippet>print(br.response().read()) # print the response
</snippet></ROW><ROW><id>7897662</id><snippet>()</snippet></ROW><ROW><id>7897662</id><snippet>read</snippet></ROW><ROW><id>7897662</id><snippet>read</snippet></ROW><ROW><id>7897662</id><snippet>read</snippet></ROW><ROW><id>7898036</id><snippet>getattr(module_a, mod)()
</snippet></ROW><ROW><id>7898445</id><snippet>csv.writer</snippet></ROW><ROW><id>7898445</id><snippet>import csv

myparagraph = """
this is a long paragraph, with "quotes" and stuff.
"""

mycsv = csv.writer(open('foo.csv', 'wb'))
mycsv.writerow([myparagraph, 'word1'])
mycsv.writerow(['word2', 'word3'])
</snippet></ROW><ROW><id>7898445</id><snippet>"
this is a long paragraph, with ""quotes"" and stuff.
",word1
word2,word3
</snippet></ROW><ROW><id>7898629</id><snippet>r = receiver()</snippet></ROW><ROW><id>7898765</id><snippet>def andand(x, func):
    return func(x) if x else None

&gt;&gt;&gt; x = '10.25'
&gt;&gt;&gt; andand(x, float)
10.25
&gt;&gt;&gt; x = None
&gt;&gt;&gt; andand(x, float) is None
True
</snippet></ROW><ROW><id>7898899</id><snippet>&gt;&gt;&gt; NAME1 = 4
&gt;&gt;&gt; def name_of(value):
        for k, v in globals().items():
            if v is value:
                return k
        raise KeyError('did not find a name for %s' % value)

&gt;&gt;&gt; name_of(NAME1)
'NAME1'
</snippet></ROW><ROW><id>7898899</id><snippet>gc.get_referrers(value)</snippet></ROW><ROW><id>7898899</id><snippet>&gt;&gt;&gt; def names_of(value):
        'Find all names for the value'
        result = []
        for d in gc.get_referrers(value):
            if isinstance(d, dict):
                for k, v in d.items():
                    if v is value:
                        result.append(k)
        return result

&gt;&gt;&gt; import math
&gt;&gt;&gt; pie = math.pi
&gt;&gt;&gt; names_of(pie)
['pie', '_pi', 'pi', 'pi']
</snippet></ROW><ROW><id>7899227</id><snippet>xpath</snippet></ROW><ROW><id>7899227</id><snippet># for each element
row_dict = dict.fromkeys(xpathdict.keys())
...
# for each key 
row_dict[key] = element.xpath(xpathdict[key]) or None
...
dictwriter.writerow(row_dict)
</snippet></ROW><ROW><id>7899227</id><snippet>xpathdict</snippet></ROW><ROW><id>7899227</id><snippet>f(element) -&gt; csv field</snippet></ROW><ROW><id>7899231</id><snippet>match = set( [ x.name for x in aList ] ) &amp; set ( [ x.name for x in bList ] )
</snippet></ROW><ROW><id>7899238</id><snippet>from itty import get, run_itty
import glob, gzip, json, os, functools

def jsonify(origfunc):
    @functools.wraps(origfunc)
    def wrapper(*args, **kwds):
        result = origfunc(*args, **kwds)
        return json.dumps(result, indent=4)
    return wrapper

@get('/logs')
@jsonify
def list_logfiles(request):
    return glob.glob('/var/log/myserver/*.gz')

@get('/logs/(?P&lt;name&gt;\w+)')
def show_logfile(request, name):
    fullname = os.path.join('/var/log/myserver', name)
    with gzip.open(fullname, 'rb') as f:
        return f.read()

run_itty(host='localhost', port=8080)
</snippet></ROW><ROW><id>7899243</id><snippet>import cv
def main():
    import sys
    x = cv.Load(sys.argv[1])
    epsilon = float(sys.argv[2])
    y = cv.CloneImage(x)
    labels = range(x.height)
    tmp = cv.CreateImage((x.width, 1), x.depth, x.nChannels)
    for i in range(x.height):
        cv.SetImageROI(x, (0, i, x.width, 1))
        for j in range(i+1, x.height):
            cv.SetImageROI(y, (0, j, x.width, 1))
            cv.AbsDiff(x, y, tmp)
            dist, _, _, _ = cv.Avg(tmp)
            if dist &lt; epsilon:
                for k, lbl in enumerate(labels):
                    if lbl == j:
                        labels[k] = i

    for i, lbl in enumerate(labels):
        print i, lbl

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7899243</id><snippet>x</snippet></ROW><ROW><id>7899243</id><snippet>N x M</snippet></ROW><ROW><id>7899243</id><snippet>N</snippet></ROW><ROW><id>7899243</id><snippet>M</snippet></ROW><ROW><id>7899243</id><snippet>epsilon</snippet></ROW><ROW><id>7899243</id><snippet>O(N^3)</snippet></ROW><ROW><id>7900104</id><snippet>else</snippet></ROW><ROW><id>7900104</id><snippet>filelist = glob.glob(os.path.join(rootdir, '*.zip'))
 if filelist:
    for file in filelist:
        try:
            aa = file.split(sl)
            #print "aa ",aa
            bb = aa[len(aa) -1]
            #print "bb ", bb
            cc = bb.split(".")
            #print "cc ", cc
            ime_sole = cc[0]
            #print "imesole ", ime_sole

    fle = codecs.open(rootdir + sl +  'portal_schools.txt','r',encoding="cp1250")
            #line = fle.readline()

            data = []

            for line in iter(fle):
                line = line.replace("\r\n", "")
                x = line.split(";")
                data.append(x)

            result = [element for element in data if element[2] == ime_sole]
            fle.close()
            #print result


            if result:
                database =  result[0][1]

                vnos_data = "Podatki za %s , se vpisujejo v bazo %s " % (ime_sole, database)


                host ="####"
                user="####"
                password = "####"


                iUrnik_tables = iUrnik_tables_fromzip.Tables(defdir,file,sl,host,database,user,password)

                id_skripte =iUrnik_tables[0]
                date_begin = iUrnik_tables[1]
                date_end = iUrnik_tables[2]
                iUrnik_all_fromzip.FileWork(defdir,file,sl,host,database,user,password)


                iUrnik_itt_zip.Proces(defdir,file,sl,host,database,user,password,id_skripte,date_begin,date_end)


                trenutek  = datetime.datetime.now()
                trenutek = trenutek.strftime("%Y%m%d%H%M")

                newfilename = os.path.splitext(file)[0] 
                newfilename = newfilename +"_" + str(trenutek) + os.path.splitext(file)[1]


                folder = defdir + sl + ime_sole + sl + "archive"

                destination = folder  + sl

                novoimezipa= destination + newfilename.split(sl)[-1]

                if not os.path.exists(folder):
                    os.makedirs(folder)
                    os.chdir(folder)


                shutil.copy(file,destination)

                old = destination + file.split(sl)[-1]
                os.rename(old , novoimezipa )


                os.remove(file)



            else:
                nothing :)

                #return
        except:
            print sys.exc_info()


else:
    vnos_nodata= u"V mapi %s ni podatkov za prenos" % (rootdir)
    Logging(defdir, sl, vnos_nodata)
</snippet></ROW><ROW><id>7900310</id><snippet>schema_id</snippet></ROW><ROW><id>7900310</id><snippet>id = (models.AutoField(...),)</snippet></ROW><ROW><id>7900310</id><snippet>class Record(models.Model):
    id         = models.AutoField(primary_key=True, blank=True), # remove ,
    schema_id  = models.IntegerField(), # remove ,
    name       = models.CharField(max_length=50), # remove ,
    desc       = models.TextField(blank=True)

    class Meta:
        db_table = 'keeper_record'
</snippet></ROW><ROW><id>7900334</id><snippet>subprocess</snippet></ROW><ROW><id>7900334</id><snippet>from fnmatch import fnmatch
import os
import subprocess

def main():
    for root, dirs, files in os.walk('/home/wagnerf/test'):
        flacs = [f for f in files if fnmatch(f, '*.flac')]
        for f in flacs:
            cmd = ['oggenc', '-q7', f]
            subprocess.check_call(cmd, cwd=root)
</snippet></ROW><ROW><id>7900334</id><snippet>cwd</snippet></ROW><ROW><id>7900334</id><snippet>fnmatch</snippet></ROW><ROW><id>7900334</id><snippet>os.remove</snippet></ROW><ROW><id>7900380</id><snippet>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; def f(depth=0):
...     print depth, traceback.print_stack()
...     if depth &lt; 2:
...         f(depth + 1)
...
&gt;&gt;&gt; f()
0  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in f
 None
1  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in f
  File "&lt;stdin&gt;", line 2, in f
 None
2  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in f
  File "&lt;stdin&gt;", line 4, in f
  File "&lt;stdin&gt;", line 2, in f
 None
</snippet></ROW><ROW><id>7900380</id><snippet>f</snippet></ROW><ROW><id>7900380</id><snippet>traceback.extract_stack</snippet></ROW><ROW><id>7900380</id><snippet>if len(l[2] ...</snippet></ROW><ROW><id>7900380</id><snippet>&gt;&gt;&gt; def norecurse(f):
...     def func(*args, **kwargs):
...         if len([l[2] for l in traceback.extract_stack() if l[2] == f.func_name]) &gt; 0:
...             raise Exception, 'Recursed'
...         return f(*args, **kwargs)
...     return func
...
&gt;&gt;&gt; @norecurse
... def foo(depth=0):
...     print depth
...     foo(depth + 1)
...
&gt;&gt;&gt; foo()
0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in func
  File "&lt;stdin&gt;", line 4, in foo
  File "&lt;stdin&gt;", line 5, in func
Exception: Recursed
</snippet></ROW><ROW><id>7900420</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>7900420</id><snippet>writable()</snippet></ROW><ROW><id>7900420</id><snippet>DatagramProtocol</snippet></ROW><ROW><id>7900420</id><snippet>stopReading</snippet></ROW><ROW><id>7900420</id><snippet>stopWriting</snippet></ROW><ROW><id>7900420</id><snippet>startReading</snippet></ROW><ROW><id>7900420</id><snippet>startWriting</snippet></ROW><ROW><id>7900420</id><snippet>transport</snippet></ROW><ROW><id>7900726</id><snippet>import os
from os.path import abspath, dirname
import sys

# Set up django
project_dir = abspath(dirname(dirname(__file__)))
sys.path.insert(0, project_dir)
os.environ['DJANGO_SETTINGS_MODULE'] = 'py23.settings'
</snippet></ROW><ROW><id>7900850</id><snippet>EMAIL_USE_TLS = True 
</snippet></ROW><ROW><id>7900850</id><snippet>DEFAULT_FROM_EMAIL = 'user@gmail.com'
SERVER_EMAIL = 'user@gmail.com'
</snippet></ROW><ROW><id>7900909</id><snippet>[d for d in a if d['name'] == 'pluto']
</snippet></ROW><ROW><id>7900963</id><snippet>pickle</snippet></ROW><ROW><id>7900963</id><snippet>class WebSites(object):
    def __init__():
        self.SiteName = ""
        self.Rank = 0

import cPickle
# to serialize the object
with open("data.dump", "wb") as output:
    cPickle.dump(WebSites(), output, cPickle.HIGHEST_PROTOCOL)

# to deserialize the object
with open("data.dump", "rb") as input:
    obj = cPickle.load(input) # protocol version is auto detected
</snippet></ROW><ROW><id>7901244</id><snippet>traceback.print_exc()</snippet></ROW><ROW><id>7901244</id><snippet>traceback</snippet></ROW><ROW><id>7901244</id><snippet>import traceback

try:
    1/0
except:
    print '&gt;&gt;&gt; traceback &lt;&lt;&lt;'
    traceback.print_exc()
    print '&gt;&gt;&gt; end of traceback &lt;&lt;&lt;'
</snippet></ROW><ROW><id>7901244</id><snippet>traceback</snippet></ROW><ROW><id>7901603</id><snippet>name.pth</snippet></ROW><ROW><id>7901603</id><snippet>sys.path</snippet></ROW><ROW><id>7901603</id><snippet>.pth</snippet></ROW><ROW><id>7901603</id><snippet>[root@home]$ echo "/usr/local/lib/python2.7/site-packages/" &gt; /opt/python2.7.2/lib/python2.7/site-packages/usrlocal.pth
</snippet></ROW><ROW><id>7901638</id><snippet>app/templatetags</snippet></ROW><ROW><id>7901638</id><snippet>@register</snippet></ROW><ROW><id>7901741</id><snippet>__init__</snippet></ROW><ROW><id>7901741</id><snippet>class D(QtGui.QMainWindow,A):</snippet></ROW><ROW><id>7901741</id><snippet>class D(A, QtGui.QMainWindow):</snippet></ROW><ROW><id>7901741</id><snippet>A</snippet></ROW><ROW><id>7901741</id><snippet>QMainWindow</snippet></ROW><ROW><id>7901741</id><snippet>super()</snippet></ROW><ROW><id>7901924</id><snippet>import numpy as np
a = np.array([[4,9,2],[5,1,3]])
idx = np.argsort(a[1])
</snippet></ROW><ROW><id>7901924</id><snippet>b=a[:,idx]
</snippet></ROW><ROW><id>7902779</id><snippet>csv.reader</snippet></ROW><ROW><id>7902779</id><snippet>list1 = []
list2 = []
with open("input.csv", "rb") as f:
    for record in csv.reader(f, delimiter=";"):
        if len(record) == 3:
            list1.append(record)
        else:
            list2.append(record)
</snippet></ROW><ROW><id>7902833</id><snippet>currentThread</snippet></ROW><ROW><id>7902833</id><snippet>id</snippet></ROW><ROW><id>7902833</id><snippet>hash</snippet></ROW><ROW><id>7902833</id><snippet>weakref.WeakKeyDictionary</snippet></ROW><ROW><id>7902958</id><snippet>groupby</snippet></ROW><ROW><id>7902958</id><snippet>&gt;&gt;&gt; l = [4,4,4,4,5,5,5,6,7,7,7,2,2]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [(i, l.count(i)) for i,_ in groupby(l)]
[(4, 4), (5, 3), (6, 1), (7, 3), (2, 2)]
</snippet></ROW><ROW><id>7903310</id><snippet>debug</snippet></ROW><ROW><id>7903310</id><snippet>PyInstaller</snippet></ROW><ROW><id>7903310</id><snippet>exe = EXE( pyz,
           [...]
           debug=True,
           [...])
</snippet></ROW><ROW><id>7903310</id><snippet>console=True</snippet></ROW><ROW><id>7903310</id><snippet>Tcl</snippet></ROW><ROW><id>7903310</id><snippet>Tkinter</snippet></ROW><ROW><id>7903310</id><snippet>spec</snippet></ROW><ROW><id>7903777</id><snippet>super()</snippet></ROW><ROW><id>7903777</id><snippet>__init__()</snippet></ROW><ROW><id>7903777</id><snippet>super()</snippet></ROW><ROW><id>7903777</id><snippet>object</snippet></ROW><ROW><id>7903777</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def frob(self, arg):
...         print "Foo.frob"
...         if hasattr(super(Foo, self), 'frob'):
...             super(Foo, self).frob(arg)
... 
&gt;&gt;&gt; class Bar(object):
...     def frob(self, arg):
...         print "Bar.frob"
...         if hasattr(super(Bar, self), 'frob'):
...             super(Bar, self).frob(arg)
... 
&gt;&gt;&gt; class Baz(Foo, Bar):
...     def frob(self, arg):
...         print "Baz.frob"
...         super(Baz, self).frob(arg)
... 
&gt;&gt;&gt; b = Baz()
&gt;&gt;&gt; b.frob(1)
Baz.frob
Foo.frob
Bar.frob
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7903777</id><snippet>object</snippet></ROW><ROW><id>7903777</id><snippet>object.__init__</snippet></ROW><ROW><id>7903777</id><snippet>super().__init__()</snippet></ROW><ROW><id>7903777</id><snippet>object.__init__</snippet></ROW><ROW><id>7903777</id><snippet>object.__init__</snippet></ROW><ROW><id>7903777</id><snippet>__init__</snippet></ROW><ROW><id>7903777</id><snippet>__init__()</snippet></ROW><ROW><id>7903777</id><snippet>def __init__(self, **keywords):</snippet></ROW><ROW><id>7903777</id><snippet>object.__init__</snippet></ROW><ROW><id>7903777</id><snippet>__init__</snippet></ROW><ROW><id>7903777</id><snippet>super().__init__</snippet></ROW><ROW><id>7903777</id><snippet>object.__init__</snippet></ROW><ROW><id>7903892</id><snippet>a</snippet></ROW><ROW><id>7903892</id><snippet>b</snippet></ROW><ROW><id>7903892</id><snippet>Foo</snippet></ROW><ROW><id>7903892</id><snippet>class Foo(object):
   def __init__(self):
     self.a = []
     self.b = 2
</snippet></ROW><ROW><id>7903892</id><snippet>a</snippet></ROW><ROW><id>7903892</id><snippet>b</snippet></ROW><ROW><id>7903892</id><snippet>class Foo(object):
   a = []
   b = 2
</snippet></ROW><ROW><id>7903892</id><snippet>foo.b = 5
</snippet></ROW><ROW><id>7903892</id><snippet>Foo.b</snippet></ROW><ROW><id>7903892</id><snippet>foo</snippet></ROW><ROW><id>7903892</id><snippet>Foo.b</snippet></ROW><ROW><id>7903892</id><snippet>bar.b</snippet></ROW><ROW><id>7903892</id><snippet>Foo.b</snippet></ROW><ROW><id>7903892</id><snippet>del foo.b</snippet></ROW><ROW><id>7903892</id><snippet>foo.b</snippet></ROW><ROW><id>7903892</id><snippet>Foo.b</snippet></ROW><ROW><id>7904000</id><snippet>issn</snippet></ROW><ROW><id>7904000</id><snippet>print &gt;&gt;sys.stderr, repr(issn)</snippet></ROW><ROW><id>7904066</id><snippet>lxml</snippet></ROW><ROW><id>7904066</id><snippet>parser = etree.XMLParser(remove_blank_text=True)
root = etree.parse('file.xml', parser).getroot()
</snippet></ROW><ROW><id>7904172</id><snippet>   $ hadoop job -list-active-trackers
</snippet></ROW><ROW><id>7904320</id><snippet>max</snippet></ROW><ROW><id>7904320</id><snippet>suffix = ' ' * nb_spaces
</snippet></ROW><ROW><id>7904625</id><snippet>os.stat(filename)[6]</snippet></ROW><ROW><id>7904625</id><snippet>filename</snippet></ROW><ROW><id>7904625</id><snippet>os.stat()</snippet></ROW><ROW><id>7904625</id><snippet>random.randint(...)</snippet></ROW><ROW><id>7904625</id><snippet>n</snippet></ROW><ROW><id>7904625</id><snippet>n</snippet></ROW><ROW><id>7904625</id><snippet>os.stat()</snippet></ROW><ROW><id>7904625</id><snippet>readline()</snippet></ROW><ROW><id>7904652</id><snippet>H0</snippet></ROW><ROW><id>7904652</id><snippet>H0</snippet></ROW><ROW><id>7904652</id><snippet>In [23]: import scipy.stats as stats
In [24]: stats.kstest(np.random.normal(0,1,10000),'norm')
Out[24]: (0.007038739782416259, 0.70477679457831155)
</snippet></ROW><ROW><id>7904652</id><snippet>data=np.random.normal(mu,sigma,10000)
normed_data=(data-mu)/sigma
print(stats.kstest(normed_data,'norm'))
# (0.0085805670733036798, 0.45316245879609179)
</snippet></ROW><ROW><id>7904652</id><snippet>mu</snippet></ROW><ROW><id>7904652</id><snippet>sigma</snippet></ROW><ROW><id>7904652</id><snippet>import numpy as np
import scipy.stats as stats

mu = 0.3
sigma = 5

num_tests = 10**5
num_rejects = 0
alpha = 0.05
for i in xrange(num_tests):
    data = np.random.normal(mu, sigma, 10000)
    # normed_data = (data - mu) / sigma   # this is okay
    normed_data = (data - data.mean()) / data.std()     
    D, pval = stats.kstest(normed_data, 'norm')
    if pval &lt; alpha:
        num_rejects += 1
ratio = float(num_rejects) / num_tests
print('{}/{} = {:.2f} rejects at rejection level {}'.format(
    num_rejects, num_tests, ratio, alpha))     
    # 20/100000 = 0.00 rejects at rejection level 0.05
</snippet></ROW><ROW><id>7904981</id><snippet>def myGenerator(arg1, arg2):
    for i in arg1:
        myState = doSomeWork(i, arg2)
        yield myState

myGen = myGenerator(list1, list2)
tenthElement = expensiveOperation(next(itertools.islice(myGen,10,11)))
</snippet></ROW><ROW><id>7905253</id><snippet>LogEntry</snippet></ROW><ROW><id>7905253</id><snippet>LogEntry</snippet></ROW><ROW><id>7905253</id><snippet>objects</snippet></ROW><ROW><id>7905253</id><snippet>from django.contrib.admin.models import LogEntry, ADDITION, CHANGE

LogEntry.objects.log_action(
            user_id=request.user.id,
            content_type_id=ContentType.objects.get_for_model(model_object).pk,
            object_id=object.id,
            object_repr=unicode(object.title),
            action_flag=ADDITION if create else CHANGE)
</snippet></ROW><ROW><id>7905471</id><snippet>group by</snippet></ROW><ROW><id>7905945</id><snippet>p dir(a)</snippet></ROW><ROW><id>7906219</id><snippet>__init__</snippet></ROW><ROW><id>7906347</id><snippet>bind</snippet></ROW><ROW><id>7906347</id><snippet>netstat -tlp</snippet></ROW><ROW><id>7906347</id><snippet>telnet localhost 8888</snippet></ROW><ROW><id>7906497</id><snippet>&gt;&gt;&gt; import gtk
&gt;&gt;&gt; w = gtk.Window()
&gt;&gt;&gt; w.show_all()
&gt;&gt;&gt; gw = w.get_window()
&gt;&gt;&gt; gw
&lt;gtk.gdk.Window object at 0xa31e824 (GdkWindow at 0xa38ea28)&gt;
&gt;&gt;&gt; gw.ensure_native()
True
&gt;&gt;&gt; gw.has_native()
True
</snippet></ROW><ROW><id>7906497</id><snippet>GDK_NATIVE_WINDOWS=1</snippet></ROW><ROW><id>7906792</id><snippet>class Three(object):
    def __getattr__(self, name):
        return lambda *args, **kw: 3
</snippet></ROW><ROW><id>7906907</id><snippet>mystr = '...../your_string'
mystr = '/' + mystr.lstrip('./')
</snippet></ROW><ROW><id>7906978</id><snippet>&gt;&gt;&gt; from celery.task import tasks, PeriodicTask
&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; class EveryThirtySecondsTask(PeriodicTask):
...     run_every = timedelta(seconds=30)
...
...     def run(self, **kwargs):
...         logger = self.get_logger(**kwargs)
...         logger.info("Execute every 30 seconds")
</snippet></ROW><ROW><id>7906978</id><snippet>class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
</snippet></ROW><ROW><id>7907057</id><snippet>&gt;&gt;&gt; myint = 979
&gt;&gt;&gt; mystr = str(myint)
&gt;&gt;&gt; mystr
'979'
</snippet></ROW><ROW><id>7907057</id><snippet>&gt;&gt;&gt; mystr[1]
'7'
</snippet></ROW><ROW><id>7907057</id><snippet>&gt;&gt;&gt; int(mystr[1])
7
</snippet></ROW><ROW><id>7907057</id><snippet>&gt;&gt;&gt; sum( [ int(x) for x in mystr ] )
25
</snippet></ROW><ROW><id>7907349</id><snippet>{7,15}</snippet></ROW><ROW><id>7907395</id><snippet>x</snippet></ROW><ROW><id>7907395</id><snippet>x</snippet></ROW><ROW><id>7907395</id><snippet>x</snippet></ROW><ROW><id>7907395</id><snippet>s</snippet></ROW><ROW><id>7907395</id><snippet>s=0</snippet></ROW><ROW><id>7907395</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from scipy import interpolate

x = np.linspace(0, 6.*np.pi, num=100) #interval (0,6*pi) in 10'000 steps
A = 1.e-4 # Amplitude of sine function
y = A*np.sin(x)

fig, axes = plt.subplots(nrows=2)
for ax, s, title in zip(axes, [2, 0], ['With', 'Without']):
    yinterp = interpolate.UnivariateSpline(x, y, s=s)(x)
    ax.plot(x, yinterp, label='Interpolated')
    ax.plot(x, y, 'bo',label='Original')
    ax.legend()
    ax.set_title(title + ' Smoothing')

plt.show()
</snippet></ROW><ROW><id>7907395</id><snippet>scipy.interpolate.UnivariateSpline</snippet></ROW><ROW><id>7907395</id><snippet>A</snippet></ROW><ROW><id>7907395</id><snippet>1.0</snippet></ROW><ROW><id>7907657</id><snippet>flask.jsonify(**data)
</snippet></ROW><ROW><id>7907657</id><snippet>flask.jsonify(id=str(album.id), title=album.title)
</snippet></ROW><ROW><id>7907701</id><snippet>import numpy
arr = numpy.array(im)
return gtk.gdk.pixbuf_new_from_array(arr, gtk.gdk.COLORSPACE_RGB, 8)
</snippet></ROW><ROW><id>7907923</id><snippet>select_related</snippet></ROW><ROW><id>7907923</id><snippet># Select all values related to a record in your view
record = Record.objects.get(pk=record_id)
values = Value.objects.filter(record=record).select_related()

# In your template
{% for value in values %}
{{ value.record.name }} - {{ value.key.name }} - {{ value.value }}
{% endfor %}
</snippet></ROW><ROW><id>7907923</id><snippet>WHERE record_id = 1</snippet></ROW><ROW><id>7907923</id><snippet># filter all records which belong to the project with `project_id=1`
records = Record.objects.filter(project_id=1)
# select all values that belong to these records
values = Value.objects.filter(record__in=records).select_related().order_by('record')
</snippet></ROW><ROW><id>7908229</id><snippet>useradd -m -p PASSWORD
</snippet></ROW><ROW><id>7908229</id><snippet>PASSWORD</snippet></ROW><ROW><id>7908229</id><snippet>crypt()</snippet></ROW><ROW><id>7908229</id><snippet>unistd.h</snippet></ROW><ROW><id>7908229</id><snippet>import os 
import crypt 

password ="testpassword"
encPass = crypt.crypt(Password,"salt")
os.system("useradd -p "+encPass+" someuser ")
</snippet></ROW><ROW><id>7908657</id><snippet>sphinx.ext.graphviz</snippet></ROW><ROW><id>7908728</id><snippet>class StatusField(FlagsField):
  name = '4 bit status'
  def __init__(self, name):
    FlagsField.__init__(self, name, 0, 4, ["a", "b", "c", "d"])

class TotalStatus(Packet):
  name = "8 bit status"
  fields_desc = [
    StatusField("axis0"),
    StatusField("axis1"),
  ] 
</snippet></ROW><ROW><id>7908871</id><snippet>new_var = int(old_var)
</snippet></ROW><ROW><id>7908871</id><snippet>my_var = vars().get('variable_name')
</snippet></ROW><ROW><id>7908871</id><snippet>variable_name</snippet></ROW><ROW><id>7908871</id><snippet>vars</snippet></ROW><ROW><id>7908871</id><snippet>help(vars)</snippet></ROW><ROW><id>7908871</id><snippet>def is_true(my_variable):
    # Here the variable named "my_variable" is accessible
</snippet></ROW><ROW><id>7908915</id><snippet>sage: var("x y")
(x, y)
sage: bool(y &lt;= x)
False
sage: dens = 2 if y &lt;= x else 0
sage: dens
0
sage: dens(x,y) = 2 if y &lt;= x else 0
sage: dens
(x, y) |--&gt; 0
</snippet></ROW><ROW><id>7908934</id><snippet>result = [yourlist for yourlist in yourlists
          if any(node.startswith('4-') for node in yourlist)]
</snippet></ROW><ROW><id>7908934</id><snippet>result = (yourlist for yourlist in yourlists
          if any(node.startswith('4-') for node in yourlist))
</snippet></ROW><ROW><id>7908987</id><snippet>(A/n, B/n)</snippet></ROW><ROW><id>7908987</id><snippet>a</snippet></ROW><ROW><id>7908987</id><snippet>a</snippet></ROW><ROW><id>7908987</id><snippet>b</snippet></ROW><ROW><id>7909346</id><snippet>abspath</snippet></ROW><ROW><id>7909346</id><snippet>getcwd</snippet></ROW><ROW><id>7909346</id><snippet>chdir</snippet></ROW><ROW><id>7909449</id><snippet>for invoice in invoices \
when invoices.data.clientId() is client.data._id()
</snippet></ROW><ROW><id>7909449</id><snippet>for invoice in invoices \
when invoice.data.clientId() is client.data._id()
</snippet></ROW><ROW><id>7909449</id><snippet>invoices</snippet></ROW><ROW><id>7909449</id><snippet>invoice.data.clientId().should_be client.data._id() for invoice in invoices
</snippet></ROW><ROW><id>7909449</id><snippet>should_be</snippet></ROW><ROW><id>7909589</id><snippet>from matplotlib.pyplot import figure, show
import numpy as npy
from numpy.random import rand


if 1: # picking on a scatter plot (matplotlib.collections.RegularPolyCollection)

    x, y, c, s = rand(4, 100)
    def onpick3(event):
        ind = event.ind
        print 'onpick3 scatter:', ind, npy.take(x, ind), npy.take(y, ind)

    fig = figure()
    ax1 = fig.add_subplot(111)
    col = ax1.scatter(x, y, 100*s, c, picker=True)
    #fig.savefig('pscoll.eps')
    fig.canvas.mpl_connect('pick_event', onpick3)

show()
</snippet></ROW><ROW><id>7909706</id><snippet>os.path.dirname(sys.executable)</snippet></ROW><ROW><id>7909706</id><snippet>hasattr(sys, 'frozen')</snippet></ROW><ROW><id>7909706</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>7909706</id><snippet>imageformats</snippet></ROW><ROW><id>7909706</id><snippet>PyQt4.QtXml</snippet></ROW><ROW><id>7909706</id><snippet>PyQt4.QtSvg</snippet></ROW><ROW><id>7909848</id><snippet>lines.append(line.strip())
</snippet></ROW><ROW><id>7909874</id><snippet>import sys</snippet></ROW><ROW><id>7909874</id><snippet>sys.path.append('/usr/lib/pymodules/python2.7')</snippet></ROW><ROW><id>7909874</id><snippet>import sys</snippet></ROW><ROW><id>7909874</id><snippet>print sys.path</snippet></ROW><ROW><id>7909944</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"&gt;
&lt;html&gt;&lt;body&gt;&lt;div&gt;
&lt;p&gt;&lt;span&gt;&lt;a href="../url"/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class="header"&gt;&lt;a href="../url"&gt;Other&lt;/a&gt;&lt;/h3&gt;
&lt;a href="../url"&gt;Other&lt;/a&gt;&lt;br/&gt;&lt;a class="aaaaa" href="../url"&gt;Indice&lt;/a&gt;
&lt;p/&gt;               
</snippet></ROW><ROW><id>7910338</id><snippet>" ".join()</snippet></ROW><ROW><id>7910338</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.linux_distribution()
('Ubuntu', '11.04', 'natty')
&gt;&gt;&gt; " ".join(platform.linux_distribution())
'Ubuntu 11.04 natty'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7910697</id><snippet>eventOjbect.k = 'hello'</snippet></ROW><ROW><id>7910697</id><snippet>k</snippet></ROW><ROW><id>7910697</id><snippet>'hello'</snippet></ROW><ROW><id>7910697</id><snippet>for k in item.keys():
    setattr(eventObject, k, item[k])
    print "eventObject.%s: " % (k) + eventObject.k
</snippet></ROW><ROW><id>7910697</id><snippet>eventObject = Event(**items)
</snippet></ROW><ROW><id>7911058</id><snippet>bin</snippet></ROW><ROW><id>7911058</id><snippet>bin</snippet></ROW><ROW><id>7911058</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>7911058</id><snippet>/tmp/test.py</snippet></ROW><ROW><id>7911058</id><snippet>/usr/bin/env python /tmp/test.py
</snippet></ROW><ROW><id>7911058</id><snippet>#!/tmp/oh no/bin/python
</snippet></ROW><ROW><id>7911058</id><snippet>/tmp/oh</snippet></ROW><ROW><id>7911058</id><snippet>no/bin/python</snippet></ROW><ROW><id>7911058</id><snippet>/tmp/test.py</snippet></ROW><ROW><id>7911058</id><snippet>/tmp/oh</snippet></ROW><ROW><id>7911072</id><snippet>#gtk file inclusion
import gtk
# The runtime dir is in the same directory as the module:
GTK_RUNTIME_DIR = os.path.join(
    os.path.split(os.path.dirname(gtk.__file__))[0], "runtime")

assert os.path.exists(GTK_RUNTIME_DIR), "Cannot find GTK runtime data"
</snippet></ROW><ROW><id>7911072</id><snippet>GTK_THEME_DEFAULT = os.path.join("share", "themes", "Default")
GTK_THEME_WINDOWS = os.path.join("share", "themes", "MS-Windows")
GTK_GTKRC_DIR = os.path.join("etc", "gtk-2.0")
GTK_GTKRC = "gtkrc"
GTK_WIMP_DIR = os.path.join("lib", "gtk-2.0", "2.10.0", "engines")
GTK_WIMP_DLL = "libwimp.dll"
</snippet></ROW><ROW><id>7911072</id><snippet>GTK_ICONS = os.path.join("share", "icons")
</snippet></ROW><ROW><id>7911072</id><snippet>GTK_LOCALE_DATA = os.path.join("share", "locale")
</snippet></ROW><ROW><id>7911072</id><snippet>data_files</snippet></ROW><ROW><id>7911072</id><snippet>def generate_data_files(prefix, tree, file_filter=None):
    """
    Walk the filesystem starting at "prefix" + "tree", producing a list of files
    suitable for the data_files option to setup(). The prefix will be omitted
    from the path given to setup(). For example, if you have

        C:\Python26\Lib\site-packages\gtk-2.0\runtime\etc\...

    ...and you want your "dist\" dir to contain "etc\..." as a subdirectory,
    invoke the function as

        generate_data_files(
            r"C:\Python26\Lib\site-packages\gtk-2.0\runtime",
            r"etc")

    If, instead, you want it to contain "runtime\etc\..." use:

        generate_data_files(
            r"C:\Python26\Lib\site-packages\gtk-2.0",
            r"runtime\etc")

    Empty directories are omitted.

    file_filter(root, fl) is an optional function called with a containing
    directory and filename of each file. If it returns False, the file is
    omitted from the results.
    """
    data_files = []
    for root, dirs, files in os.walk(os.path.join(prefix, tree)):        
        to_dir = os.path.relpath(root, prefix)

        if file_filter is not None:
            file_iter = (fl for fl in files if file_filter(root, fl))
        else:
            file_iter = files

        data_files.append((to_dir, [os.path.join(root, fl) for fl in file_iter]))

    non_empties = [(to, fro) for (to, fro) in data_files if fro]

    return non_empties
</snippet></ROW><ROW><id>7911072</id><snippet>setup()</snippet></ROW><ROW><id>7911072</id><snippet>setup(
    # Other setup args here...

    data_files = (
                    # Use the function above...
                    generate_data_files(GTK_RUNTIME_DIR, GTK_THEME_DEFAULT) +
                    generate_data_files(GTK_RUNTIME_DIR, GTK_THEME_WINDOWS) +
                    generate_data_files(GTK_RUNTIME_DIR, GTK_ICONS) +

                    # ...or include single files manually
                    [
                        (GTK_GTKRC_DIR, [
                            os.path.join(GTK_RUNTIME_DIR,
                                GTK_GTKRC_DIR,
                                GTK_GTKRC)
                        ]),

                        (GTK_WIMP_DIR, [
                            os.path.join(
                                GTK_RUNTIME_DIR,
                                GTK_WIMP_DIR,
                                GTK_WIMP_DLL)
                        ])
                    ]
                )
)
</snippet></ROW><ROW><id>7911075</id><snippet>/lib/npyio.py</snippet></ROW><ROW><id>7911075</id><snippet>    # Parse each line, including the first
    for i, line in enumerate(itertools.chain([first_line], fh)):
        vals = split_line(line)
        if len(vals) == 0:
            continue
        if usecols:
            vals = [vals[i] for i in usecols]
        # Convert each value according to its column and store
        items = [conv(val) for (conv, val) in zip(converters, vals)]
        # Then pack it according to the dtype's nesting
        items = pack_items(items, packing)
        X.append(items)

    #...A bit further on
    X = np.array(X, dtype)
</snippet></ROW><ROW><id>7911275</id><snippet>if TESTING</snippet></ROW><ROW><id>7911275</id><snippet>TESTING</snippet></ROW><ROW><id>7911275</id><snippet>True</snippet></ROW><ROW><id>7911275</id><snippet>TESTING = False    # This is false until overridden in tests

def foo():
    if TESTING:
        print "expensive stuff..."
</snippet></ROW><ROW><id>7911275</id><snippet>import production

def test_foo():
    production.TESTING = True
    production.foo()    # Prints "expensive stuff..."
</snippet></ROW><ROW><id>7911275</id><snippet>assert</snippet></ROW><ROW><id>7911275</id><snippet>-O</snippet></ROW><ROW><id>7911275</id><snippet>-O</snippet></ROW><ROW><id>7911275</id><snippet>def expensive_checks():
    print "expensive stuff..."
    return True

def foo():
    print "normal, speedy stuff."
    assert expensive_checks()

foo()
</snippet></ROW><ROW><id>7911275</id><snippet>python mycode.py</snippet></ROW><ROW><id>7911275</id><snippet>normal, speedy stuff.
expensive stuff...
</snippet></ROW><ROW><id>7911275</id><snippet>python -O mycode.py</snippet></ROW><ROW><id>7911275</id><snippet>normal, speedy stuff.
</snippet></ROW><ROW><id>7911275</id><snippet>AssertionError</snippet></ROW><ROW><id>7911602</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as BSHTML
&gt;&gt;&gt; BS = BSHTML("""
... &lt;font face="ARIAL,HELVETICA" size="-2"&gt;  
... JUL 28         &lt;/font&gt;"""
... )
&gt;&gt;&gt; BS.font.contents[0].strip()
u'JUL 28'
</snippet></ROW><ROW><id>7911602</id><snippet>&gt;&gt;&gt; datetime.strptime(BS.font.contents[0].strip(), '%b %d')
&gt;&gt;&gt; datetime.datetime(1900, 7, 28, 0, 0)
datetime.datetime(1900, 7, 28, 0, 0)
</snippet></ROW><ROW><id>7911663</id><snippet>from PIL import Image
im = Image.open(r"C:\jk.png")
bg = Image.new("RGB", im.size, (255,255,255))
bg.paste(im,im)
bg.save(r"C:\jk2.jpg")
</snippet></ROW><ROW><id>7911819</id><snippet>@echo off
setlocal EnableDelayedExpansion
rem Read .csv data and split/store its elements in csv array.
set /P csv_data=&lt; example.csv
set i=0
for %%e in (!csv_data!) do (
    set /A i+=1
    set csv[!i!]=%%e
)
rem Create the new.csv file with its header.
echo %csv[1]%, %csv[2]%, %csv[3]%&gt; new.csv
rem Process each line of the text file.
set i=1
for /F %%l in (example.txt) do call :SeekAndWriteCsv %%l
goto :eof

:SeekAndWriteCsv
rem Seek the matching csv category.
set /A i+=3
if not !csv[%i%]! == %1 goto SeekAndWriteCsv
rem Write the matching category to the new.csv file.
set /A j=i+1, k=i+2
echo , !csv[%i%]!, !csv[%j%]!, !csv[%k%]!&gt;&gt; new.csv
</snippet></ROW><ROW><id>7911819</id><snippet>rem Create the new.csv file with its header.
echo %csv[1]%, %csv[2]%, %csv[3]%&gt; new.csv
</snippet></ROW><ROW><id>7911819</id><snippet>rem Create the new.csv file with its header.
echo/&gt; enter.txt
set /P dummy=%csv[1]%, %csv[2]%, %csv[3]%&lt; enter.txt &gt; new.csv
</snippet></ROW><ROW><id>7911819</id><snippet>echo , !csv[%i%]!, !csv[%j%]!, !csv[%k%]!&gt;&gt; new.csv
</snippet></ROW><ROW><id>7911819</id><snippet>set /P dummy=, !csv[%i%]!, !csv[%j%]!, !csv[%k%]!&lt; enter.txt &gt;&gt; new.csv
</snippet></ROW><ROW><id>7911819</id><snippet>    set csv[!i!]=%%e
</snippet></ROW><ROW><id>7911819</id><snippet>    set "csv[!i!]=%%e"
</snippet></ROW><ROW><id>7911940</id><snippet>def factor(arg):    
    o = arg
    n = o
    x = 2
    factors = [o]

    while abs(o) &gt;= x:
    if (o) % x == 0:
        n = o / x
        factors.append(n)
        x += 1
    else:
        x += 1

    return factors

A = int(raw_input("What is A in your quadratic equation?   A = "))
B = int(raw_input("What is B in your quadratic equation?   B = "))
C = int(raw_input("What is C in your quadratic equation?   C = "))

Br = abs(B) + abs(A)            # Range of B
Bpf = range (-Br, Br + 1)       # Possible factors of B
ABpf = factor(A * C)            # Possible factors of (A * C)
ACpf = []
for i in ABpf:
    ACpf.append(i)
    ACpf.append(-1*i) 

cf = []                          # Common factors

for i in Bpf:
    for j in ACpf:
    if i == j:
        cf.append(i)

print cf
</snippet></ROW><ROW><id>7912675</id><snippet>wand = lib.NewMagickWand()
</snippet></ROW><ROW><id>7912675</id><snippet>lib.NewMagickWand.restype = c_void_p
</snippet></ROW><ROW><id>7912761</id><snippet>d = dict(map(str.strip, a.split('=', 1)) for a in l)
</snippet></ROW><ROW><id>7912761</id><snippet>{'caption': '',
 'cinematography': '',
 'director': 'Sameer Butt',
 'distributor': '',
 'editing': '',
 'image': '',
 'music': 'Robin Ghosh',
 'name': 'Badmash Gujjar',
 'producer': '',
 'released': 'Film date2001',
 'starring': 'Saima&lt;br&gt;Shaan (actor)Shaan&lt;br&gt;',
 'writer': 'Nasir Adeeb'}
</snippet></ROW><ROW><id>7912761</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>7912761</id><snippet>d = dict(map(lambda x: x.strip().replace('&lt;br&gt;', ''), a.split('=', 1)) for a in l)
</snippet></ROW><ROW><id>7913030</id><snippet>@timed(2.1)
def test():
    func_with_timeout(timeout=2)
</snippet></ROW><ROW><id>7913198</id><snippet>aptitude install python-crypto
</snippet></ROW><ROW><id>7913198</id><snippet>aptitude install python-dev
</snippet></ROW><ROW><id>7913297</id><snippet>dict(enumerate('327VUQ56156TX374'))
</snippet></ROW><ROW><id>7913297</id><snippet>dict(enumerate('327VUQ56156TX374', start=1))
</snippet></ROW><ROW><id>7913880</id><snippet>if request.method == "POST":
    tform = TourForm(request.POST, request.FILES)
else
    tform = TourForm(instance=tour)
</snippet></ROW><ROW><id>7914212</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; class Spoken(namedtuple("Spoken", ["loudness", "pitch"])):
        __slots__ = ()
        def __str__(self):
            return str(self.loudness)

&gt;&gt;&gt; s = Spoken(loudness=90, pitch='high')
&gt;&gt;&gt; str(s)
'90'
</snippet></ROW><ROW><id>7914717</id><snippet>itertools.product()</snippet></ROW><ROW><id>7914717</id><snippet>my_list = [("car", 2), ("plane", 3), ("bike", 1)]
a = itertools.product(*([name + str(i + 1) for i in range(length)] 
                        for name, length in my_list))
for x in a:
    print x
</snippet></ROW><ROW><id>7914717</id><snippet>('car1', 'plane1', 'bike1')
('car1', 'plane2', 'bike1')
('car1', 'plane3', 'bike1')
('car2', 'plane1', 'bike1')
('car2', 'plane2', 'bike1')
('car2', 'plane3', 'bike1')
</snippet></ROW><ROW><id>7914744</id><snippet>log = easygui.multenterbox(msg='Fill in the blanks',title='log', fieldnames=fieldNames)
</snippet></ROW><ROW><id>7914744</id><snippet>log = easygui.multenterbox('Fill in the blanks', 'log', fieldNames)
</snippet></ROW><ROW><id>7914807</id><snippet>exec</snippet></ROW><ROW><id>7914807</id><snippet>getattr</snippet></ROW><ROW><id>7914807</id><snippet>class ItemDataForm(ModelForm):
    def __init__(self,product,*args,**kwargs):
        super(ItemDataForm, self).__init__(*args, **kwargs)
        del self.fields['created']
        fields = 'int1', 'int2', 'float1', 'float2', 'string1', 'string2'
        for field in fields:
            val = getattr(product, field + '_name')
            fval = field + '_val'
            if val:
                self.fields[fval].label = val
                self.fields[fval].value = getattr(product, field + '_default')
            else:
                del self.fields[fval]
</snippet></ROW><ROW><id>7914884</id><snippet>s_matrix</snippet></ROW><ROW><id>7915154</id><snippet>'wb'</snippet></ROW><ROW><id>7915154</id><snippet>bg_file2</snippet></ROW><ROW><id>7915154</id><snippet>'wb'</snippet></ROW><ROW><id>7915154</id><snippet>retrieve</snippet></ROW><ROW><id>7915288</id><snippet>input</snippet></ROW><ROW><id>7915288</id><snippet>eval(raw_input(prompt))</snippet></ROW><ROW><id>7915288</id><snippet>raw_input</snippet></ROW><ROW><id>7915288</id><snippet>input</snippet></ROW><ROW><id>7915288</id><snippet>raw_input</snippet></ROW><ROW><id>7915288</id><snippet>filename = raw_input("filename: ")
</snippet></ROW><ROW><id>7915357</id><snippet>class Car:
    pass
audi = Car()
myCar = Car()
myBrothersCar = Car()
</snippet></ROW><ROW><id>7915458</id><snippet>p_statement_list_comma</snippet></ROW><ROW><id>7915458</id><snippet>def p_statement_list_comma(p):
    'statement-list : statement COMMA statement-list'
    p[0] = [p[1]] + p[3]

def p_statement_print_expr(p):
    'statement-list : PRINT expr'
    p[0] = [p[2]]
</snippet></ROW><ROW><id>7915458</id><snippet>def p_statement_list_comma(p):
    'statement-list : statement COMMA statement-list'
    p[0] = p[3]

def p_statement_print_expr(p):
    'statement-list : PRINT expr'
    p[0] = p[2]
</snippet></ROW><ROW><id>7915495</id><snippet> relevant_widget.update_idletasks()
</snippet></ROW><ROW><id>7915655</id><snippet>text = """ name = Kurradu
 image =
 image_size =
 producer = P. Kiran
 writer =
 starring = Varun Sandesh,Neha Sharma
 music = Achu
 cinematography = Sarvesh Murari
 editing =
 distributor =
 released = 12 November 2009
 studio =
 country = IND"""


d = dict(map(str.strip, line.split('=', 1)) for line in text.splitlines())


# d is now:

{'cinematography': 'Sarvesh Murari',
 'country': 'IND',
 'distributor': '',
 'editing': '',
 'image': '',
 'image_size': '',
 'music': 'Achu',
 'name': 'Kurradu',
 'producer': 'P. Kiran',
 'released': '12 November 2009',
 'starring': 'Varun Sandesh,Neha Sharma',
 'studio': '',
 'writer': ''}
</snippet></ROW><ROW><id>7915749</id><snippet>os.remove</snippet></ROW><ROW><id>7915749</id><snippet>try</snippet></ROW><ROW><id>7915749</id><snippet>except</snippet></ROW><ROW><id>7915749</id><snippet>for filename in filenames:
    try:
        # try to remove the file
        os.remove(filename)
    except OSError:
        pass
        # file not removed (maybe does not exist or is write-protected)
        # you may report an error here
    else:
        # this executes only if os.remove was successful
        RemovedFiles.append(filename)
</snippet></ROW><ROW><id>7916055</id><snippet>lines.py</snippet></ROW><ROW><id>7916055</id><snippet>examples/barchart.py</snippet></ROW><ROW><id>7916055</id><snippet>examples</snippet></ROW><ROW><id>7916147</id><snippet>from HTMLParser import HTMLParser

class MyParser(HTMLParser):
    def __init__(self,link, keyword):
    HTMLParser.__init__(self)
    self.__html = []
    self.link = link
    self.keyword = keyword

    def handle_data(self, data):
    text = data.strip()
    self.__html.append(text.replace(self.keyword,'&lt;a href="'+self.link+'&gt;'+self.keyword+'&lt;/a&gt;'))

    def handle_starttag(self, tag, attrs):
    self.__html.append("&lt;"+tag+"&gt;")

    def handle_endtag(self, tag):
    self.__html.append("&lt;/"+tag+"&gt;")

    def new_html(self):
    return ''.join(self.__html).strip()


parser = MyParser("blah","keyword")
parser.feed("&lt;div&gt;&lt;p&gt;Text with keyword here&lt;/p&gt;&lt;/div&gt;")
parser.close()
print parser.new_html()
</snippet></ROW><ROW><id>7916147</id><snippet>&lt;div&gt;&lt;p&gt;Text with &lt;a href="blah&gt;keyword&lt;/a&gt; here&lt;/p&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>7916147</id><snippet>from lxml.html import fragments_fromstring, fromstring, tostring
from re import compile
def markup_aware_sub(pattern, repl, text):
    exp = compile(pattern)
    root = fromstring(text)
    els = [el for el in root.getiterator() if el.text]
    els = [el for el in els if el.text.strip()]

    if len(els) == 1:
      el = els[0]
      text = exp.sub(repl, el.text)
      parent = el.getparent()
      new_el = fromstring(text)
      new_el.tag = el.tag
      for k, v in el.attrib.items():
          new_el.attrib[k] = v
      return tostring(new_el)

    for el in els:
      text = exp.sub(repl, el.text)
      if text == el.text:
        continue
      parent = el.getparent()
      new_el = fromstring(text)
      new_el.tag = el.tag
      for k, v in el.attrib.items():
          new_el.attrib[k] = v
      parent.replace(el, new_el)
    return tostring(root)

print markup_aware_sub('keyword', '&lt;a&gt;blah&lt;/a&gt;', '&lt;p&gt;Text with keyword here&lt;/p&gt;')
</snippet></ROW><ROW><id>7917124</id><snippet>range()</snippet></ROW><ROW><id>7917124</id><snippet>sum()</snippet></ROW><ROW><id>7917124</id><snippet>&gt;&gt;&gt; from sympy import sum, var, solve
&gt;&gt;&gt; x = var('x')
&gt;&gt;&gt; f = lambda N: sum(n**2, (n, 1, N))
&gt;&gt;&gt; n = var("n")
&gt;&gt;&gt; f(x)
x/6 + x**2/2 + x**3/3
</snippet></ROW><ROW><id>7917124</id><snippet>&gt;&gt;&gt; N = var("N")
&gt;&gt;&gt; solve(sum(n**2, (n, 1, N)) - 55, N)
[-13/4 - I*359**(1/2)/4, 5, -13/4 + I*359**(1/2)/4]
</snippet></ROW><ROW><id>7917152</id><snippet>__future__</snippet></ROW><ROW><id>7917152</id><snippet>__future__</snippet></ROW><ROW><id>7917300</id><snippet>records = cursor.fatchone() 
--&gt; should be
records = cursor.fetchone() 
</snippet></ROW><ROW><id>7917364</id><snippet>dispatch</snippet></ROW><ROW><id>7917364</id><snippet>class MyView(View):
    @decorate
    def dispatch(self, *args, **kwargs):
        return super(MyView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>7917447</id><snippet>seq[i] = self.rule</snippet></ROW><ROW><id>7917447</id><snippet>seq[i]</snippet></ROW><ROW><id>7917447</id><snippet>self.rule</snippet></ROW><ROW><id>7917447</id><snippet>seq[i]</snippet></ROW><ROW><id>7917447</id><snippet>self.rule</snippet></ROW><ROW><id>7917447</id><snippet>self.rule</snippet></ROW><ROW><id>7917447</id><snippet>seq[i]</snippet></ROW><ROW><id>7917447</id><snippet>seq[i]</snippet></ROW><ROW><id>7917447</id><snippet>self.rule</snippet></ROW><ROW><id>7917612</id><snippet>boost::python</snippet></ROW><ROW><id>7917612</id><snippet>boost::python</snippet></ROW><ROW><id>7917612</id><snippet>    namespace {

        void Foo_methodUsingDate( Foo* pointer, const object&amp; dateObject )
        {
            boost::gregorian::date date = convertFromPython( dateObject );

            pointer-&gt;methodUsingDate( date );
        }
    }

    void wrap_Foo()
    {
        class_&lt; Foo &gt;( "Foo" )
            .def( "bar",
                &amp; Foo::bar
                )
            .def( "foobar",
                &amp; Foo::foobar
                )
            .def( "methodUsingDate",
                &amp; Foo_methodUsingDate
                )
            ;
    }
</snippet></ROW><ROW><id>7917612</id><snippet>boost::python::object</snippet></ROW><ROW><id>7917612</id><snippet>boost::gregorian::date</snippet></ROW><ROW><id>7917612</id><snippet>boost::python</snippet></ROW><ROW><id>7917612</id><snippet>std::string</snippet></ROW><ROW><id>7917787</id><snippet>tail -f</snippet></ROW><ROW><id>7917787</id><snippet>strace tail -f logfile</snippet></ROW><ROW><id>7918055</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>7918055</id><snippet>print</snippet></ROW><ROW><id>7918055</id><snippet>print</snippet></ROW><ROW><id>7918055</id><snippet>print('&lt;table&gt;')
</snippet></ROW><ROW><id>7918055</id><snippet>print('&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;'.format(index, col1, col2))   
</snippet></ROW><ROW><id>7918055</id><snippet>print</snippet></ROW><ROW><id>7918055</id><snippet>print</snippet></ROW><ROW><id>7918055</id><snippet>print('&lt;/table&gt;')
</snippet></ROW><ROW><id>7918248</id><snippet>@property
def _cache(self):
    """
    Implements transparent thread-safe access to a memcached client.
    """
    if getattr(self, '_client', None) is None:
        self._client = self._lib.Client(self._servers)

    return self._client
</snippet></ROW><ROW><id>7918248</id><snippet>c._cache.cas
</snippet></ROW><ROW><id>7918531</id><snippet>r2 &gt; 0.04</snippet></ROW><ROW><id>7918531</id><snippet>if</snippet></ROW><ROW><id>7918531</id><snippet>def q(x,y):
    r2 = (x/2.)**2 + (2.0*y)**2
    return 1.5 * (r2 &lt;= 0.04)
</snippet></ROW><ROW><id>7918549</id><snippet>plt.text(x,y,'text')</snippet></ROW><ROW><id>7918607</id><snippet>import _winreg as winreg
import ctypes

ENV_HTTP_PROXY = u'http://87.254.212.121:8080'


class Registry(object):
    def __init__(self, key_location, key_path):
        self.reg_key = winreg.OpenKey(key_location, key_path, 0, winreg.KEY_ALL_ACCESS)

    def set_key(self, name, value):
        try:
            _, reg_type = winreg.QueryValueEx(self.reg_key, name)
        except WindowsError:
            # If the value does not exists yet, we (guess) use a string as the
            # reg_type
            reg_type = winreg.REG_SZ
        winreg.SetValueEx(self.reg_key, name, 0, reg_type, value)

    def delete_key(self, name):
        try:
            winreg.DeleteValue(self.reg_key, name)
        except WindowsError:
            # Ignores if the key value doesn't exists
            pass



class EnvironmentVariables(Registry):
    """
    Configures the HTTP_PROXY environment variable, it's used by the PIP proxy
    """

    def __init__(self):
        super(EnvironmentVariables, self).__init__(winreg.HKEY_LOCAL_MACHINE,
                                                   r'SYSTEM\CurrentControlSet\Control\Session Manager\Environment')

    def on(self):
        self.set_key('HTTP_PROXY', ENV_HTTP_PROXY)
        self.refresh()

    def off(self):
        self.delete_key('HTTP_PROXY')
        self.refresh()

    def refresh(self):
        HWND_BROADCAST = 0xFFFF
        WM_SETTINGCHANGE = 0x1A

        SMTO_ABORTIFHUNG = 0x0002

        result = ctypes.c_long()
        SendMessageTimeoutW = ctypes.windll.user32.SendMessageTimeoutW
        SendMessageTimeoutW(HWND_BROADCAST, WM_SETTINGCHANGE, 0, u'Environment', SMTO_ABORTIFHUNG, 5000, ctypes.byref(result));
</snippet></ROW><ROW><id>7918663</id><snippet>!j = 0
</snippet></ROW><ROW><id>7918667</id><snippet>paintGui</snippet></ROW><ROW><id>7918667</id><snippet>Tk()</snippet></ROW><ROW><id>7918667</id><snippet>mainloop</snippet></ROW><ROW><id>7918667</id><snippet>paintGui</snippet></ROW><ROW><id>7918667</id><snippet>from Tkinter import *

class A:
    def __init__(self):
        self.var = True

obj = A()

def meth():
    obj.var = False
    paintGui()

def paintGui():    
    if obj.var == False:
        w.itemconfig("rect", fill="red")


master = Tk()
w = Canvas(master, width=200, height=100)
w.pack()
w.create_rectangle(50, 25, 150, 75, fill="blue", tags="rect")

btn = Button(master, text="Cerrar Mesa",command=meth)
btn.pack(side=BOTTOM)    
mainloop()
</snippet></ROW><ROW><id>7918726</id><snippet>class mainClass(irc.IRCClient):

    from othermodule import a, b, c
    # othermodule.a, b, and c are now methods of mainClass

    from anothermodule import *
    # everything in anothermodule is now in mainClass

    # if there are name conflicts, last import wins!
</snippet></ROW><ROW><id>7918726</id><snippet>import</snippet></ROW><ROW><id>7918726</id><snippet>import</snippet></ROW><ROW><id>7918726</id><snippet>othermodule</snippet></ROW><ROW><id>7918726</id><snippet>self</snippet></ROW><ROW><id>7918726</id><snippet>mainClass</snippet></ROW><ROW><id>7918772</id><snippet>with</snippet></ROW><ROW><id>7918772</id><snippet>__future__</snippet></ROW><ROW><id>7918772</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>7918810</id><snippet>tags = parenttag.findAll('tag')

if tags:
    for tag in tags:
        # do something to tag
</snippet></ROW><ROW><id>7918810</id><snippet>tags</snippet></ROW><ROW><id>7918810</id><snippet>if tags:</snippet></ROW><ROW><id>7918810</id><snippet>for</snippet></ROW><ROW><id>7918810</id><snippet>inputList = []</snippet></ROW><ROW><id>7918810</id><snippet>if</snippet></ROW><ROW><id>7918810</id><snippet>inputList</snippet></ROW><ROW><id>7918810</id><snippet>if not inputList:
    sys.exit(1)
</snippet></ROW><ROW><id>7918810</id><snippet>if inputList:
    # process inputList
</snippet></ROW><ROW><id>7918810</id><snippet>import sys</snippet></ROW><ROW><id>7919139</id><snippet>foo = MagicalEncryptor()
foo.ciphertext = foo.encrypt(data)
key = foo.key 

bar = key.decryptor()
data = bar.decrypt(ciphertext)
</snippet></ROW><ROW><id>7919139</id><snippet>key = createMagicalKey()

foo = key.encryptor()
ciphertext = foo.encrypt(data)

bar = key.decryptor()
data = bar.decrypt(ciphertext)
</snippet></ROW><ROW><id>7919139</id><snippet>key = createMagicalKey()

ciphertext = key.encrypt(data)

data = key.decrypt(ciphertext)
</snippet></ROW><ROW><id>7919383</id><snippet>import wx

########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a self.panel so it looks the correct on all platforms
        self.panel = wx.Panel(self, wx.ID_ANY)

        btn = wx.Button(self.panel, label="Change Cursor")
        btn.Bind(wx.EVT_BUTTON, self.changeCursor)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(btn)
        self.panel.SetSizer(sizer)

    #----------------------------------------------------------------------
    def changeCursor(self, event):
        """"""
        myCursor= wx.StockCursor(wx.CURSOR_WAIT)
        self.panel.SetCursor(myCursor)


#----------------------------------------------------------------------
# Run the program
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>7919388</id><snippet>isintance()</snippet></ROW><ROW><id>7919388</id><snippet>type()</snippet></ROW><ROW><id>7919388</id><snippet>edge</snippet></ROW><ROW><id>7919388</id><snippet>edge_id</snippet></ROW><ROW><id>7919509</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7919509</id><snippet>page = BeautifulSoup(urllib2.urlopen(query))
</snippet></ROW><ROW><id>7919509</id><snippet>page = BeautifulSoup(urllib2.urlopen(query).read())
</snippet></ROW><ROW><id>7919509</id><snippet>src</snippet></ROW><ROW><id>7919509</id><snippet>user_agent</snippet></ROW><ROW><id>7919509</id><snippet>robots.txt</snippet></ROW><ROW><id>7919574</id><snippet>len(vals)</snippet></ROW><ROW><id>7919673</id><snippet>list_data</snippet></ROW><ROW><id>7919673</id><snippet>dict_data = defaultdict(list)
for item in list_data:
    dict_data[item.category].append(item)
</snippet></ROW><ROW><id>7919673</id><snippet>item[3]</snippet></ROW><ROW><id>7919673</id><snippet>item.category</snippet></ROW><ROW><id>7919960</id><snippet>import numpy as np
arr = np.ma.array([0,np.nan,1])
print(np.ma.max(arr))
# &gt;&gt;&gt;nan    # since there is no mask
marr = np.ma.masked_array([0,np.nan,1], np.isnan(arr))
print(np.ma.max(marr))
# &gt;&gt;&gt;1.0    # since the mask tells mask to ignore the nan. The max of the rest (0,1) is 1.
</snippet></ROW><ROW><id>7920003</id><snippet>jstr = json.loads(my_string)
if jstr.get('response'):
    jstr_response = jstr.get('response')[1][0].get('name')
</snippet></ROW><ROW><id>7920042</id><snippet>...
c = conn.cursor()

c.execute('SELECT * FROM Pacientes')
for row in c.fetchall():
    Nome = row['nome']
    ID = row['Id']
    c.execute('SELECT File FROM Exames WHERE Id_Paciente=?', [ID])
    for exam in c:
        print exam['File']
</snippet></ROW><ROW><id>7920343</id><snippet>age</snippet></ROW><ROW><id>7920343</id><snippet>class MyForm(forms.Form):
    forename = forms.CharField()
    age = forms.IntegerField()
</snippet></ROW><ROW><id>7920343</id><snippet>my_form = MyForm({'name': request.user.first_name})
</snippet></ROW><ROW><id>7920343</id><snippet>age</snippet></ROW><ROW><id>7920343</id><snippet>age</snippet></ROW><ROW><id>7920343</id><snippet>my_form = MyForm(initial={'name':request.use.first_name})
</snippet></ROW><ROW><id>7920534</id><snippet>'qq'</snippet></ROW><ROW><id>7920534</id><snippet>'ff'</snippet></ROW><ROW><id>7920534</id><snippet>pairs = [('qq','ff'), ('ff','qq')]</snippet></ROW><ROW><id>7920534</id><snippet>&gt;&gt;&gt; d = dict(pairs)
&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile('|'.join(re.escape(k) for k in d))
&gt;&gt;&gt; pattern.sub(lambda k:d[k.group()], s))
frsfsdBBsdfvsdfvrtdsff
</snippet></ROW><ROW><id>7920564</id><snippet>__add__</snippet></ROW><ROW><id>7920564</id><snippet>.add()</snippet></ROW><ROW><id>7920564</id><snippet>a + b
</snippet></ROW><ROW><id>7920564</id><snippet>Vector()</snippet></ROW><ROW><id>7920564</id><snippet>class Vector:
  def __init__(self, x = 0, y = 0, z = 0):
    self.x = x
    self.y = y
    self.z = z

  def __add__(self, other):
    return Vector(self.x + other.x, self.y + other.y, self.z + other.z)
</snippet></ROW><ROW><id>7920840</id><snippet>str</snippet></ROW><ROW><id>7920840</id><snippet>unicode</snippet></ROW><ROW><id>7920840</id><snippet>newFileName = unicode(file.key).encode('ascii', 'ignore')</snippet></ROW><ROW><id>7920882</id><snippet>exec</snippet></ROW><ROW><id>7920882</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>7920882</id><snippet>import subprocess
p = subprocess.Popen('lspci', stdout=subprocess.PIPE)
for line in p.stdout:
  if 'VGA' in line:
    print line.strip()
p.wait()
</snippet></ROW><ROW><id>7920882</id><snippet>01:00.0 VGA compatible controller: nVidia Corporation GF104 [GeForce GTX 460] (rev a1)
</snippet></ROW><ROW><id>7920933</id><snippet>name</snippet></ROW><ROW><id>7920933</id><snippet>Something</snippet></ROW><ROW><id>7920933</id><snippet>if</snippet></ROW><ROW><id>7920933</id><snippet>response</snippet></ROW><ROW><id>7920933</id><snippet>&gt;&gt;&gt; data = {"response":[[{"uid":123456,"name":"LA_"}],[{"cid":"1","name":"Something"}],[{"cid":1,"name":"Something-else"}]]}
&gt;&gt;&gt; [lst for lst in data.get('response')]
[[{'name': 'LA_', 'uid': 123456}], [{'name': 'Something', 'cid': '1'}], [{'name': 'Something-else', 'cid': 1}]]
</snippet></ROW><ROW><id>7920933</id><snippet>lst[0]</snippet></ROW><ROW><id>7920933</id><snippet>&gt;&gt;&gt; [lst[0] for lst in data.get('response')]
[{'name': 'LA_', 'uid': 123456}, {'name': 'Something', 'cid': '1'}, {'name': 'Something-else', 'cid': 1}]
</snippet></ROW><ROW><id>7920933</id><snippet>if</snippet></ROW><ROW><id>7920933</id><snippet>name</snippet></ROW><ROW><id>7920933</id><snippet>&gt;&gt;&gt; [lst[0] for lst in data.get('response') if lst[0].get('name') == 'Something']
[{'name': 'Something', 'cid': '1'}]
</snippet></ROW><ROW><id>7920933</id><snippet>&gt;&gt;&gt; [lst[0] for lst in data.get('response') if lst[0].get('name') == 'Something'][0]
{'name': 'Something', 'cid': '1'}
</snippet></ROW><ROW><id>7920933</id><snippet>def get_obj_by_name(data, name):
    objects = [lst[0] for lst in data.get('response', []) if lst[0].get('name') == name]
    if objects:
        return objects[0]

    return None

print get_obj_by_name(data, 'Something')
# =&gt; {'name': 'Something', 'cid': '1'}

print get_obj_by_name(data, 'Something')['name']
# =&gt; 'Something'
</snippet></ROW><ROW><id>7920933</id><snippet>None</snippet></ROW><ROW><id>7920933</id><snippet>response</snippet></ROW><ROW><id>7920933</id><snippet>print get_obj_by_name({"error":"some-error"}, 'Something')
# =&gt; None
</snippet></ROW><ROW><id>7920986</id><snippet>print</snippet></ROW><ROW><id>7920986</id><snippet>__repr__</snippet></ROW><ROW><id>7920986</id><snippet>__str__</snippet></ROW><ROW><id>7921167</id><snippet>table</snippet></ROW><ROW><id>7921167</id><snippet>table</snippet></ROW><ROW><id>7921167</id><snippet>%s</snippet></ROW><ROW><id>7921167</id><snippet>"INSERT INTO `table` (%s, %s, &amp;s) VALUES (%s, %s, %s)"
</snippet></ROW><ROW><id>7921167</id><snippet>(cols, vals)</snippet></ROW><ROW><id>7921167</id><snippet>(cols[0], cols[1], cols[2] , vals[0], vals[1], vals[2])
</snippet></ROW><ROW><id>7921170</id><snippet>x</snippet></ROW><ROW><id>7921170</id><snippet>y</snippet></ROW><ROW><id>7921170</id><snippet>x</snippet></ROW><ROW><id>7921170</id><snippet>y</snippet></ROW><ROW><id>7921170</id><snippet>derivative = current_state - last_state</snippet></ROW><ROW><id>7921472</id><snippet>l = [10.0, 10.0, 10.0, 9.9, 9.9, 9.9, 10.0, 9.9, 10.0, 10.0, 10.0, 10.0, 9.9, 9.9, 9.9, 9.9, 9.9, 9.9, 10.0, 10.0, 10.0, 10.2, 10.0, 9.9, 9.9, 9.9, 9.9, 10.0, 10.2, 10.0, 9.9, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.3, 10.3, 10.2, 10.2, 10.3, 10.3, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.3, 10.2, 10.5, 10.9, 10.5, 10.3, 10.3, 10.3, 10.2, 10.2, 10.2, 10.2, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.4, 10.7, 10.3, 10.2, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 9.9, 9.9, 9.9, 10.0, 9.9, 9.9, 9.9, 10.1, 9.9, 9.9, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.7, 9.8, 9.8, 9.7, 9.7, 9.7, 9.7, 9.7, 9.7, 9.6, 9.7]
subl = [9.9, 9.9, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8, 9.8]
for i in xrange(len(l)-len(subl)):
  if l[i:i+len(subl)] == subl:
    print 'found at pos', i
    break
else:
  print 'not found'
</snippet></ROW><ROW><id>7921472</id><snippet>found at pos 118</snippet></ROW><ROW><id>7921472</id><snippet>list</snippet></ROW><ROW><id>7921781</id><snippet>id(obj)</snippet></ROW><ROW><id>7921781</id><snippet>__repr__()</snippet></ROW><ROW><id>7921781</id><snippet>__str__()</snippet></ROW><ROW><id>7921781</id><snippet>class Test(object):
    def __repr__(self):
        repr_template = ("&lt;{0.__class__.__module__}.{0.__class__.__name__}"
                         " object at {1}: name={0.name}, isValid={0.isValid}&gt;")

        return repr_template.format(self, hex(id(self)))
</snippet></ROW><ROW><id>7921781</id><snippet>test = Test()
test.name = "foo"
test.isValid = True
print repr(test)
print str(test)
print test
</snippet></ROW><ROW><id>7921781</id><snippet>"%s"</snippet></ROW><ROW><id>7921781</id><snippet>str.format()</snippet></ROW><ROW><id>7921781</id><snippet>str.format()</snippet></ROW><ROW><id>7921781</id><snippet>{1:#x}</snippet></ROW><ROW><id>7921781</id><snippet>hex(id(self))</snippet></ROW><ROW><id>7921781</id><snippet>id(self)</snippet></ROW><ROW><id>7921876</id><snippet>struct.pack_into(fmt, buffer, offset, v1, v2, ...)
</snippet></ROW><ROW><id>7921876</id><snippet>import struct
import ctypes

data=ctypes.create_string_buffer(10)
struct.pack_into("&gt;i", data, 5, 0x12345678)
print list(data)
</snippet></ROW><ROW><id>7921876</id><snippet>import struct

f=open('myfile.binary', 'rb')
contents=f.read(5)
data=list(contents)
data[0:4]=struct.pack("&gt;i", 0x12345678)
print data
</snippet></ROW><ROW><id>7922162</id><snippet>dar_xform</snippet></ROW><ROW><id>7922162</id><snippet>subprocess.Popen(...)</snippet></ROW><ROW><id>7922162</id><snippet>PATH</snippet></ROW><ROW><id>7922509</id><snippet>which</snippet></ROW><ROW><id>7922509</id><snippet>ls</snippet></ROW><ROW><id>7922509</id><snippet>python</snippet></ROW><ROW><id>7922509</id><snippet>.bashrc</snippet></ROW><ROW><id>7922509</id><snippet>alias python=python2.6
</snippet></ROW><ROW><id>7922523</id><snippet>class Video(object):

    def __init__(self, ...):
        self.__cbFileRefDone = []

    def open(self, filename):
        @WINFUNCTYPE(None, DWORD, DWORD)
        def cbFileRefDone(port, user_data):
            print "File indexed.", filename
        self.__cbFileRefDone.append(cbFileRefDone) # save reference

        if not self.hsdk.PlayM4_SetFileRefCallBack(
            c_long(self.port), cbFileRefDone, DWORD(0)):
            logging.error("Unable to set callback for indexing")
            return False
</snippet></ROW><ROW><id>7922523</id><snippet>#XXX this won't work
@WINFUNCTYPE(None, DWORD, DWORD)
def cbFileRefDone(self, port, user_data):
    print "File indexed."
</snippet></ROW><ROW><id>7922523</id><snippet>def method(prototype):
    class MethodDescriptor(object):
        def __init__(self, func):
            self.func = func
            self.bound_funcs = {} # hold on to references to prevent gc
        def __get__(self, obj, type=None):
            assert obj is not None # always require an instance
            try: return self.bound_funcs[obj,type]
            except KeyError:
                ret = self.bound_funcs[obj,type] = prototype(
                    self.func.__get__(obj, type))
                return ret
    return MethodDescriptor
</snippet></ROW><ROW><id>7922523</id><snippet>class Video(object):

    @method(WINFUNCTYPE(None, DWORD, DWORD))
    def cbFileRefDone(self, port, user_data):
        print "File indexed."

    def open(self, filename):
        # ...
        self.hsdk.PlayM4_SetFileRefCallBack(
            c_long(self.port), self.cbFileRefDone, DWORD(0))
</snippet></ROW><ROW><id>7922642</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from scipy import sparse
&gt;&gt;&gt; A = np.array([[1,2,0],[0,0,3],[1,0,4]])
&gt;&gt;&gt; B = np.matrix([[1,2,0],[0,0,3],[1,0,4]])

&gt;&gt;&gt; A
array([[1, 2, 0],
       [0, 0, 3],
       [1, 0, 4]])

&gt;&gt;&gt; sA = sparse.csr_matrix(A)   # Here's the initialization of the sparse matrix.
&gt;&gt;&gt; sB = sparse.csr_matrix(B)

&gt;&gt;&gt; sA
&lt;3x3 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
        with 5 stored elements in Compressed Sparse Row format&gt;

&gt;&gt;&gt; print sA
  (0, 0)        1
  (0, 1)        2
  (1, 2)        3
  (2, 0)        1
  (2, 2)        4
</snippet></ROW><ROW><id>7922862</id><snippet>property</snippet></ROW><ROW><id>7922862</id><snippet>object</snippet></ROW><ROW><id>7922862</id><snippet>class C(object):
    @property
    def dx(self):
        return self._dx

    def __init__(self, dx = 1):
        self._dx = dx
</snippet></ROW><ROW><id>7922877</id><snippet>__getstate__</snippet></ROW><ROW><id>7922877</id><snippet>__setstate__</snippet></ROW><ROW><id>7922877</id><snippet>import pickle

class Foo(object):
    __slots__ = ['this', 'that', 'other']

    def __init__(self):
        self.this = 1
        self.that = 2
        self.other = 3

    def __getstate__(self):
        return dict((name, getattr(self, name))
                    for name in self.__slots__)

    def __setstate__(self, state):
        for name, value in state.items():
            setattr(self, name, value)

pickle.dumps(Foo(), protocol=0)
</snippet></ROW><ROW><id>7922999</id><snippet>-R</snippet></ROW><ROW><id>7922999</id><snippet>less</snippet></ROW><ROW><id>7922999</id><snippet>-R</snippet></ROW><ROW><id>7923411</id><snippet>from lxml import etree

parser = etree.HTMLParser(encoding='utf8')
tree = etree.parse('source.html', parser)
print tree.xpath('//a/@href')
</snippet></ROW><ROW><id>7923411</id><snippet>['001.html', '002.html']
</snippet></ROW><ROW><id>7923488</id><snippet>now = time.localtime()[0:6]
dirname = dirfmt % now
csvafile = os.path.join(dirname, csvafmt % now)
csvbfile = os.path.join(dirname, csvbfmt % now)
logfile = os.path.join(dirname, logfmt % now)
</snippet></ROW><ROW><id>7923525</id><snippet>request.GET</snippet></ROW><ROW><id>7923525</id><snippet>request.POST</snippet></ROW><ROW><id>7923525</id><snippet>QueryDict</snippet></ROW><ROW><id>7923525</id><snippet>QueryDict</snippet></ROW><ROW><id>7923525</id><snippet>QueryDict</snippet></ROW><ROW><id>7923525</id><snippet>request.GET
GET = request.GET.copy()
GET.pop('key')    
</snippet></ROW><ROW><id>7923553</id><snippet>b = a[:][:]</snippet></ROW><ROW><id>7923553</id><snippet>b = (a[:])[:]</snippet></ROW><ROW><id>7923553</id><snippet>b = [l[:] for l in a] # a new list, consisting of copies each sublist
</snippet></ROW><ROW><id>7923553</id><snippet>from copy import deepcopy
b = deepcopy(a)
</snippet></ROW><ROW><id>7923595</id><snippet>include docs/*
</snippet></ROW><ROW><id>7923595</id><snippet>recursive-include docs *
</snippet></ROW><ROW><id>7923613</id><snippet>values = [</snippet></ROW><ROW><id>7923613</id><snippet>];</snippet></ROW><ROW><id>7923613</id><snippet>;</snippet></ROW><ROW><id>7923613</id><snippet>-24.92 -23.66 -22.55 
-24.77 -23.56 -22.45 
-24.54 -23.64 -22.56 
</snippet></ROW><ROW><id>7923613</id><snippet>loadtxt</snippet></ROW><ROW><id>7923613</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A = np.loadtxt('data.m')

&gt;&gt;&gt; A
array([[-24.92, -23.66, -22.55],
       [-24.77, -23.56, -22.45],
       [-24.54, -23.64, -22.56]])
</snippet></ROW><ROW><id>7923613</id><snippet>loadtxt</snippet></ROW><ROW><id>7923613</id><snippet>import StringIO
import numpy as np

def convert_m(fname):
    with open(fname, 'r') as fin:
        arrstr = fin.read()
    arrstr = arrstr.split('[', 1)[-1] # remove the content up to the first '['
    arrstr = arrstr.rsplit(']', 1)[0] # remove the content after ']'
    arrstr = arrstr.replace(';', '\n') # replace ';' with newline
    return StringIO.StringIO(arrstr)
</snippet></ROW><ROW><id>7923613</id><snippet>&gt;&gt;&gt; np.loadtxt(convert_m('data.m'))
array([[-24.92, -23.66, -22.55],
       [-24.77, -23.56, -22.45],
       [-24.54, -23.64, -22.56]])
</snippet></ROW><ROW><id>7923973</id><snippet>import urllib2, httplib
from BeautifulSoup import BeautifulSoup

def append_log(message):
    print message

def get_web_page(address):
    try:
        user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
        headers = { 'User-Agent' : user_agent }
        request = urllib2.Request(address, None, headers)
        response = urllib2.urlopen(request, timeout=20)
        try:
            return response.read()
        finally:
            response.close()
    except urllib2.HTTPError as e:
        error_desc = httplib.responses.get(e.code, '')
        append_log('HTTP Error: ' + str(e.code) + ': ' +
                  error_desc + ': ' + address)
    except urllib2.URLError as e:
        append_log('URL Error: ' + e.reason[1] + ': ' + address)
    except Exception as e:
        append_log('Unknown Error: ' + str(e) + address)

def process_web_page(data):
    if data is not None:
        print BeautifulSoup(data)
    else:
        pass # do something else

data = get_web_page('http://doesnotexistblah.com/')
process_web_page(data)

data = get_web_page('http://docs.python.org/copyright.html')
process_web_page(data)
</snippet></ROW><ROW><id>7924398</id><snippet>None</snippet></ROW><ROW><id>7924398</id><snippet>foobar_task</snippet></ROW><ROW><id>7924398</id><snippet>while-loop</snippet></ROW><ROW><id>7924398</id><snippet>threading.Thread</snippet></ROW><ROW><id>7924398</id><snippet>ThreadPool</snippet></ROW><ROW><id>7924398</id><snippet>import random
import time
import threading
import logging
import Queue

logger=logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

sentinel=None
queue = Queue.Queue()
num_threads = 5

def foobar_task(queue):
    while True:
        n = queue.get()
        logger.info('task called: {n}'.format(n=n))
        if n is sentinel: break
        n=random.random()
        if n &gt; .25:
            logger.info("task appended to queue")
            queue.put(n)
        queue.task_done()

# set up initial queue
for i in range(num_threads):
    queue.put(i)

threads=[threading.Thread(target=foobar_task,args=(queue,))
         for n in range(num_threads)]
for t in threads:
    t.start()

queue.join()
for i in range(num_threads):
    queue.put(sentinel)

for t in threads:
    t.join()
logger.info("threads are closed")
</snippet></ROW><ROW><id>7924451</id><snippet>class A:
    @classmethod
    def interfaceBasedMethod(cls):
        print "Want to delegate to overriding method in subclass"

    @classmethod
    def a(cls):
        cls.interfaceBasedMethod()

class B(A):
    @classmethod
    def interfaceBasedMethod(cls):
        print "Class B processes."

if __name__ == "__main__":
    b=B
    b.a()
</snippet></ROW><ROW><id>7924719</id><snippet>factors = [set() for index in xrange(1001)]
</snippet></ROW><ROW><id>7924778</id><snippet>import sys

for line in sys.stdin:
    # do something...
    print line,
</snippet></ROW><ROW><id>7924778</id><snippet>python readstdin.py &lt; hugefile.txt
</snippet></ROW><ROW><id>7925010</id><snippet>more</snippet></ROW><ROW><id>7925010</id><snippet>more</snippet></ROW><ROW><id>7925010</id><snippet>C:\Windows\System32\more.com</snippet></ROW><ROW><id>7925010</id><snippet>C:\Windows\System32</snippet></ROW><ROW><id>7925097</id><snippet>setup.py</snippet></ROW><ROW><id>7925097</id><snippet>Gemfile</snippet></ROW><ROW><id>7925097</id><snippet>/ -
  lib - classes / modules etc.
  bin - executables things you want on $PATH
  test - unit tests
</snippet></ROW><ROW><id>7925577</id><snippet>append</snippet></ROW><ROW><id>7925577</id><snippet>tree = []
tree.append(NodeInfo(0,1,2))

# or
tree = [NodeInfo(0,1,2)]
</snippet></ROW><ROW><id>7926560</id><snippet>&gt;&gt;&gt; range(1,1)
[]
</snippet></ROW><ROW><id>7926560</id><snippet>start_pod</snippet></ROW><ROW><id>7926560</id><snippet>end_pod</snippet></ROW><ROW><id>7926560</id><snippet>range(i,j)</snippet></ROW><ROW><id>7926560</id><snippet>[i, i + 1, .., j - 1]</snippet></ROW><ROW><id>7926560</id><snippet>for pod in range...</snippet></ROW><ROW><id>7926560</id><snippet>for pod in range(start_pod, end_pod + 1):
</snippet></ROW><ROW><id>7926671</id><snippet>Popen(' '.join(args+['&gt;', 'logFile', '2&gt;&amp;1']), # shell specific cmdline
      shell=True) # on Windows see _cmdline2list to understand what is going on
</snippet></ROW><ROW><id>7926728</id><snippet>connectTCP</snippet></ROW><ROW><id>7926728</id><snippet>endpoint.connect</snippet></ROW><ROW><id>7926728</id><snippet>TelnetProtocol</snippet></ROW><ROW><id>7926728</id><snippet>twisted.conch.telnet.TelnetProtocol</snippet></ROW><ROW><id>7926728</id><snippet>TelnetProtocol</snippet></ROW><ROW><id>7926728</id><snippet>twisted.conch.telnet.TelnetTransport</snippet></ROW><ROW><id>7926728</id><snippet>dataReceived</snippet></ROW><ROW><id>7926728</id><snippet>twisted.conch.telnet.TelnetTransport</snippet></ROW><ROW><id>7926728</id><snippet>IProtocol</snippet></ROW><ROW><id>7926728</id><snippet>enableLocal</snippet></ROW><ROW><id>7926728</id><snippet>enableRemote</snippet></ROW><ROW><id>7926728</id><snippet>TelnetTransport</snippet></ROW><ROW><id>7926728</id><snippet>connectTCP</snippet></ROW><ROW><id>7926728</id><snippet>TelnetTransport</snippet></ROW><ROW><id>7926728</id><snippet>.protocol</snippet></ROW><ROW><id>7926728</id><snippet>TelnetProtocol</snippet></ROW><ROW><id>7926728</id><snippet>Factory</snippet></ROW><ROW><id>7926728</id><snippet>protocol</snippet></ROW><ROW><id>7926728</id><snippet>ClientFactory</snippet></ROW><ROW><id>7926728</id><snippet>connectTCP</snippet></ROW><ROW><id>7926741</id><snippet>starttls()</snippet></ROW><ROW><id>7926741</id><snippet>smtp = smtplib.SMTP(mailhost)
smtp.starttls()
</snippet></ROW><ROW><id>7926924</id><snippet>ctypes</snippet></ROW><ROW><id>7926924</id><snippet>if</snippet></ROW><ROW><id>7927088</id><snippet>$ python write-big-zip.py
Traceback (most recent call last):
  File "write-big-zip.py", line 7, in &lt;module&gt;
    myzip.writestr('arcname%d'% i, b'a'*2**30)
  File "/usr/lib/python2.7/zipfile.py", line 1125, in writestr
    self._writecheck(zinfo)
  File "/usr/lib/python2.7/zipfile.py", line 1020, in _writecheck
    raise LargeZipFile("Zipfile size would require ZIP64 extensions")
zipfile.LargeZipFile: Zipfile size would require ZIP64 extensions
</snippet></ROW><ROW><id>7927088</id><snippet>#!/usr/bin/env python
"""Write big strings to zip file until error."""
from zipfile import ZipFile

with ZipFile('big.zip', 'w') as myzip:
    for i in range(4):
        myzip.writestr('arcname%d'% i, b'a'*2**30)
</snippet></ROW><ROW><id>7927690</id><snippet>import re

def splitRawString(s):
    return map(lambda x: re.sub('^"?([^"]*)"?$', r'\1', x),
        re.split('"\s*"', s))

a='"Hello" "World" "String 1" "String 2" "String 3" "Sting 4" "Hello" "World" "String 5" "String 6" "String 7" "String 8" "Hello" "World" "String 9" "String 10" "String 11" "String 12"'
print splitRawString(a)
</snippet></ROW><ROW><id>7927690</id><snippet>['Hello', 'World', 'String 1', 'String 2', 'String 3', 'Sting 4', 'Hello', 'World', 'String 5', 'String 6', 'String 7', 'String 8', 'Hello', 'World', 'String 9', 'String 10', 'String 11', 'String 12']
</snippet></ROW><ROW><id>7927760</id><snippet>request.user</snippet></ROW><ROW><id>7927760</id><snippet>password_change</snippet></ROW><ROW><id>7927760</id><snippet>RequestContext</snippet></ROW><ROW><id>7927760</id><snippet>user</snippet></ROW><ROW><id>7927760</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>7927760</id><snippet>CONTEXT_PROCESSORS</snippet></ROW><ROW><id>7927907</id><snippet>items</snippet></ROW><ROW><id>7927907</id><snippet>class Tile:
    def __init__(self, type):
        self.items = []
        self.type = type
</snippet></ROW><ROW><id>7927982</id><snippet>self.thread = Thread()</snippet></ROW><ROW><id>7927982</id><snippet>self.diff_thread = Thread(create=False)</snippet></ROW><ROW><id>7928523</id><snippet>make_chi_squared()</snippet></ROW><ROW><id>7928523</id><snippet>import inspect

chi_squared_template = """
def chi_squared(%(params)s):
    return (((f(data_x, %(params)s) - data_y) / errors) ** 2).sum()
"""

def make_chi_squared(f, data_x, data_y, errors):
    params = ", ".join(inspect.getargspec(f).args[1:])
    exec chi_squared_template % {"params": params}
    return chi_squared
</snippet></ROW><ROW><id>7928523</id><snippet>import numpy

def f(x, a1, a2, a3, a4):
    return a1 + a2*x + a3*x**2 + a4*x**3

data_x = numpy.arange(50)
errors = numpy.random.randn(50) * 0.3
data_y = data_x**3 + errors

chi_squared = make_chi_squared(f, data_x, data_y, errors)
print inspect.getargspec(chi_squared).args
</snippet></ROW><ROW><id>7928523</id><snippet>['a1', 'a2', 'a3', 'a4']
</snippet></ROW><ROW><id>7928710</id><snippet>base.html</snippet></ROW><ROW><id>7928710</id><snippet>login</snippet></ROW><ROW><id>7928710</id><snippet>login.html</snippet></ROW><ROW><id>7928710</id><snippet>{% block login %}
    ... login form here ...
{% endblock %}

{% block main %}
{% endblock %}
</snippet></ROW><ROW><id>7928710</id><snippet>{% extends "base.html" %}

{% block login %}
{% endblock %}

{% block main %}
   ... real login form here ...
{% endblock %}
</snippet></ROW><ROW><id>7928849</id><snippet>callLater</snippet></ROW><ROW><id>7928849</id><snippet>d</snippet></ROW><ROW><id>7928849</id><snippet>nextCall</snippet></ROW><ROW><id>7928849</id><snippet>callback</snippet></ROW><ROW><id>7928849</id><snippet>Deferred</snippet></ROW><ROW><id>7928938</id><snippet>__main__.ClassToPickle != ClassToPickle.ClassToPickle</snippet></ROW><ROW><id>7928938</id><snippet>ClassToPickle.py</snippet></ROW><ROW><id>7928938</id><snippet>ClassToPickle.py</snippet></ROW><ROW><id>7928938</id><snippet>__main__</snippet></ROW><ROW><id>7928938</id><snippet>pickle</snippet></ROW><ROW><id>7928938</id><snippet>__main__.ClassToPickle</snippet></ROW><ROW><id>7928938</id><snippet>__main__.ClassToPickle</snippet></ROW><ROW><id>7928938</id><snippet>from ClassToPickle import ClassToPickle</snippet></ROW><ROW><id>7928938</id><snippet>ClassToPickle.ClassToPickle</snippet></ROW><ROW><id>7928938</id><snippet>ClassToPickle.py</snippet></ROW><ROW><id>7928938</id><snippet>import pickle

from ClassToPickle import ClassToPickle

if __name__=="__main__":
    p = ClassToPickle(10)
    pickle.dump(p, open('10.pickle', 'w'))
</snippet></ROW><ROW><id>7929043</id><snippet>urllib</snippet></ROW><ROW><id>7929044</id><snippet>pairs = int(raw_input("How many pairs do you have?"))
for pair_n in xrange(1, pairs + 1):
  file1 = raw_input("pair%d-a: " % pair_n)
  file2 = raw_input("pair%d-b: " % pair_n)
  cmd = "samtools merge pair%d.bam '%s' '%s'" % (pair_n, file1, file2)
  # os.system(cmd) to run the command.
</snippet></ROW><ROW><id>7929087</id><snippet>s = """string literal...
...continues on second line...
...and ends here"""
</snippet></ROW><ROW><id>7929087</id><snippet>r"..."</snippet></ROW><ROW><id>7929087</id><snippet>r'...'</snippet></ROW><ROW><id>7929087</id><snippet>\n</snippet></ROW><ROW><id>7929158</id><snippet>EWOULDBLOCK</snippet></ROW><ROW><id>7929158</id><snippet>EWOULDBLOCK</snippet></ROW><ROW><id>7929158</id><snippet>udp.Port</snippet></ROW><ROW><id>7929158</id><snippet>IFileDescriptor</snippet></ROW><ROW><id>7929158</id><snippet>doRead</snippet></ROW><ROW><id>7929158</id><snippet>doWrite</snippet></ROW><ROW><id>7929158</id><snippet>startWriting</snippet></ROW><ROW><id>7929158</id><snippet>startWriting</snippet></ROW><ROW><id>7929158</id><snippet>stopWriting</snippet></ROW><ROW><id>7929158</id><snippet>self.transport.write(...)</snippet></ROW><ROW><id>7929158</id><snippet>LoopingCall</snippet></ROW><ROW><id>7929158</id><snippet>stopReading</snippet></ROW><ROW><id>7929158</id><snippet>startReading</snippet></ROW><ROW><id>7929193</id><snippet>&gt;&gt;&gt; tree
&lt;lxml.etree._ElementTree object at 0x0148AF08&gt;
</snippet></ROW><ROW><id>7929193</id><snippet>lxml._ElementTree</snippet></ROW><ROW><id>7929193</id><snippet>&gt;&gt;&gt; tree.getroot()
&lt;Element html at 147aae0&gt;
&gt;&gt;&gt; tree.getroot().tag
'html'
&gt;&gt;&gt; tree.getroot().text
&gt;&gt;&gt; for child in tree.getroot().getchildren():
    print child.tag, child.getchildren()
head
body
&gt;&gt;&gt; for child in tree.getroot().getchildren():
    print child.tag, [sub_child.tag for sub_child in child.getchildren()]
head ['title']
body ['h1', 'p', 'hr', 'address']
</snippet></ROW><ROW><id>7929419</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>7929419</id><snippet>Popen.wait()</snippet></ROW><ROW><id>7929419</id><snippet>communicate()</snippet></ROW><ROW><id>7929419</id><snippet>dar_slave</snippet></ROW><ROW><id>7929419</id><snippet>dar_xform</snippet></ROW><ROW><id>7929419</id><snippet>dar</snippet></ROW><ROW><id>7929419</id><snippet>cat</snippet></ROW><ROW><id>7929419</id><snippet>shell=True</snippet></ROW><ROW><id>7929438</id><snippet>execute</snippet></ROW><ROW><id>7929438</id><snippet>%s</snippet></ROW><ROW><id>7929438</id><snippet>execute</snippet></ROW><ROW><id>7929438</id><snippet>c=db.cursor()
max_price=5
c.execute("""SELECT spam, eggs, sausage FROM breakfast
          WHERE price &lt; %s""", (max_price,))
</snippet></ROW><ROW><id>7929438</id><snippet>c.execute("""SELECT spam, eggs, sausage FROM breakfast
          WHERE price &lt; %s""" % (max_price,))
</snippet></ROW><ROW><id>7929438</id><snippet>'%s'</snippet></ROW><ROW><id>7929441</id><snippet>options={'py2exe': {'bundle_files': 1}},</snippet></ROW><ROW><id>7929441</id><snippet>zipfile = None</snippet></ROW><ROW><id>7929441</id><snippet>from distutils.core import setup
import py2exe

setup(
    console=['watt.py'],
    options={'py2exe': {'bundle_files': 1}},
    zipfile = None
)
</snippet></ROW><ROW><id>7929512</id><snippet>['&lt;option value="id=%s+%s"&gt;%s - %s&lt;/option&gt;' % (x, y, x, y) for x, y in zip(numlist, numlist2)]
</snippet></ROW><ROW><id>7929760</id><snippet>__gobject_init__</snippet></ROW><ROW><id>7929896</id><snippet>update_type</snippet></ROW><ROW><id>7929896</id><snippet>None</snippet></ROW><ROW><id>7929896</id><snippet>any(cell.update_type(next_cells[cell.index]) for cell in cells)
</snippet></ROW><ROW><id>7929896</id><snippet>map</snippet></ROW><ROW><id>7929896</id><snippet>update_type</snippet></ROW><ROW><id>7929896</id><snippet>any</snippet></ROW><ROW><id>7929968</id><snippet>main.py</snippet></ROW><ROW><id>7929968</id><snippet>if __name__ == '__main__':

    import sys   
    from package import app

    sys.exit(app.run())
</snippet></ROW><ROW><id>7929968</id><snippet>main.py</snippet></ROW><ROW><id>7929968</id><snippet>from package.module import function</snippet></ROW><ROW><id>7930088</id><snippet>commit()</snippet></ROW><ROW><id>7930522</id><snippet>dict</snippet></ROW><ROW><id>7930522</id><snippet>list</snippet></ROW><ROW><id>7930522</id><snippet>synchronized</snippet></ROW><ROW><id>7930522</id><snippet>threading.Condition</snippet></ROW><ROW><id>7930522</id><snippet>import threading

def tryfinally(finallyf):
  u"returns a decorator that adds try/finally behavior with given no-argument call in the finally"
  def decorator(callable):
    def execute(*args, **kwargs):
      try: result = callable(*args, **kwargs)
      finally: finallyf()
      return result
    return execute
  return decorator

def usinglock(lock):
  u"returns a decorator whose argument will acquire the given lock while executing"
  def decorator(function):
    body = tryfinally(lock.release)(function)
    def execute(*args, **kwargs):
      lock.acquire()
      return body(*args, **kwargs)
    return execute
  return decorator

def synchronized(function):
  u"decorator; only one thread can enter the decorated function at a time; recursion is OK"
  return usinglock(threading.RLock())(function)
</snippet></ROW><ROW><id>7930522</id><snippet>@synchronized
def foo(*args):
  print 'Only one thread can enter this function at a time'
</snippet></ROW><ROW><id>7930522</id><snippet>(myclass, dict)</snippet></ROW><ROW><id>7930522</id><snippet>__setitem__</snippet></ROW><ROW><id>7930522</id><snippet>myclass</snippet></ROW><ROW><id>7930522</id><snippet>hasattr(class_or_instance, attribute)</snippet></ROW><ROW><id>7930522</id><snippet>object</snippet></ROW><ROW><id>7930522</id><snippet>&gt;&gt;&gt; class Foo(object):
...   def baz(self):
...     print 'Original Foo.baz'
...
&gt;&gt;&gt; class Bar(Foo): pass
...
&gt;&gt;&gt; def newprint(self):
...   print 'New Foo.baz'
...
&gt;&gt;&gt; x = Foo()
&gt;&gt;&gt; y = Bar()
&gt;&gt;&gt; Foo.baz = newprint
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; map(lambda k: k.baz(), (x, y, a, b))
New Foo.baz
New Foo.baz
New Foo.baz
New Foo.baz
[None, None, None, None]
</snippet></ROW><ROW><id>7930522</id><snippet>Foo</snippet></ROW><ROW><id>7931010</id><snippet>int</snippet></ROW><ROW><id>7931010</id><snippet>savetxt</snippet></ROW><ROW><id>7931010</id><snippet>savetxt</snippet></ROW><ROW><id>7931010</id><snippet>int_array = apply_along_axis(trapz, 0, data)
savetxt('int.txt', int_array)
</snippet></ROW><ROW><id>7931010</id><snippet>t = data[0,:]
int_array = apply_along_axis(trapz, 0, data[1:,:], t)
savetxt('int.txt', int_array)
</snippet></ROW><ROW><id>7931010</id><snippet>trapz</snippet></ROW><ROW><id>7931010</id><snippet>x</snippet></ROW><ROW><id>7931010</id><snippet>t = data[0,:]</snippet></ROW><ROW><id>7931010</id><snippet>trapz</snippet></ROW><ROW><id>7931010</id><snippet>dx</snippet></ROW><ROW><id>7931010</id><snippet>int_array = apply_along_axis(trapz, 0, data[1:,:], None, 30)
</snippet></ROW><ROW><id>7931046</id><snippet>time.sleep(5)
</snippet></ROW><ROW><id>7931046</id><snippet>if win32event.WaitForSingleObject(self.hWaitStop, 5000) == win32event.WAIT_OBJECT_0: 
    break
</snippet></ROW><ROW><id>7931064</id><snippet>get_or_create</snippet></ROW><ROW><id>7931064</id><snippet>mymodel, _ = Mymodel.objects.get_or_create(date=date, day=day, time=time)
</snippet></ROW><ROW><id>7931064</id><snippet>mymodel = Mymodel.objects.get_or_create(date=date, day=day, time=time)[0]
</snippet></ROW><ROW><id>7931135</id><snippet>dict</snippet></ROW><ROW><id>7931135</id><snippet>dict()</snippet></ROW><ROW><id>7931135</id><snippet>zip()</snippet></ROW><ROW><id>7931135</id><snippet>lookup = dict(zip(people, phoneNumbers))
</snippet></ROW><ROW><id>7931135</id><snippet>&gt;&gt;&gt; people = ["john", "jacob", "bob"]
&gt;&gt;&gt; phoneNumbers = ["5503942", "8659392", "8659392"]
&gt;&gt;&gt; zip(people, phoneNumbers)
[('john', '5503942'), ('jacob', '8659392'), ('bob', '8659392')]
&gt;&gt;&gt; dict(zip(people, phoneNumbers))
{'jacob': '8659392', 'bob': '8659392', 'john': '5503942'}
</snippet></ROW><ROW><id>7931135</id><snippet>if name in lookup:
    # ... phone number will be lookup[name]
</snippet></ROW><ROW><id>7931135</id><snippet>&gt;&gt;&gt; people = ["john", "jacob", "bob", "jacklyn", "cojack", "samantha"]
&gt;&gt;&gt; [x for x in enumerate(people) if "jac" in x[1]] 
[(1, 'jacob'), (3, 'jacklyn'), (4, 'cojack')]
</snippet></ROW><ROW><id>7931135</id><snippet>(index, name)</snippet></ROW><ROW><id>7931135</id><snippet>&gt;&gt;&gt; people = ["john", "jacob", "bob", "jacklyn", "cojack", "samantha"]
&gt;&gt;&gt; matches = [x for x in enumerate(people) if "jac" in x[1]]
&gt;&gt;&gt; for index, name in matches:
...     print index, name
... 
1 jacob
3 jacklyn
4 cojack
&gt;&gt;&gt; matches = [x for x in enumerate(people) if "doesnotexist" in x[1]]
&gt;&gt;&gt; if not matches:
...     print "no matches"
... 
no matches
</snippet></ROW><ROW><id>7931270</id><snippet>Counter</snippet></ROW><ROW><id>7931270</id><snippet>from collections import Counter
a = ["basically", "in", "Python", "I", "am", "trying", "to", "write",
     "a", "program", "to", "draw", "a", "histogram", "of", "the",
     "lengths", "of", "words", "present", "in", "a", "list"]
print Counter(map(len, a))
</snippet></ROW><ROW><id>7931270</id><snippet>Counter({2: 7, 1: 4, 7: 3, 4: 2, 5: 2, 6: 2, 9: 2, 3: 1})
</snippet></ROW><ROW><id>7931356</id><snippet>os.system</snippet></ROW><ROW><id>7931356</id><snippet>subprocess</snippet></ROW><ROW><id>7931356</id><snippet>os.system
os.spawn*
os.popen*
popen2.*
commands.*
</snippet></ROW><ROW><id>7931368</id><snippet>  &lt;dependency&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity 
          type="win32" 
          name="Microsoft.VC90.CRT" 
          version="9.0.21022.8" 
          processorArchitecture="x86" 
          publicKeyToken="1fc8b3b9a1e18e3b"&gt;
      &lt;/assemblyIdentity&gt;
    &lt;/dependentAssembly&gt;
  &lt;/dependency&gt;
</snippet></ROW><ROW><id>7931420</id><snippet>found = False
query = Employee.all().filter("some_boolean_property = ", True)
for employee in query:
    found = True
    # output employee.name etc.
    # ...
if not found:
    # output "no records found" message
    # ...
</snippet></ROW><ROW><id>7931659</id><snippet>experiment</snippet></ROW><ROW><id>7931659</id><snippet>npoints</snippet></ROW><ROW><id>7931659</id><snippet>vectorpoint</snippet></ROW><ROW><id>7931659</id><snippet>experiment = vstack([vectorpoint] * npoints)
</snippet></ROW><ROW><id>7931659</id><snippet>experiment</snippet></ROW><ROW><id>7931659</id><snippet>npoints</snippet></ROW><ROW><id>7931659</id><snippet>random.uniform()</snippet></ROW><ROW><id>7931659</id><snippet>vectorpoint</snippet></ROW><ROW><id>7931659</id><snippet>random.uniform()</snippet></ROW><ROW><id>7931659</id><snippet>def uniform(lines):
    return random.uniform(-1, 1, [lines, 2])
</snippet></ROW><ROW><id>7931659</id><snippet>array</snippet></ROW><ROW><id>7931659</id><snippet>random.uniform()</snippet></ROW><ROW><id>7931732</id><snippet>${result}</snippet></ROW><ROW><id>7931732</id><snippet>${structure: result}</snippet></ROW><ROW><id>7931849</id><snippet>any()</snippet></ROW><ROW><id>7931849</id><snippet>or</snippet></ROW><ROW><id>7931849</id><snippet>if any(key in dict_ for key in keys):
    # do stuff
</snippet></ROW><ROW><id>7931918</id><snippet>IMAPClient</snippet></ROW><ROW><id>7931918</id><snippet>from imapclient import IMAPClient

HOST = 'imap.gmail.com'
USERNAME = ''
PASSWORD = ''
ssl = True

server = IMAPClient(HOST, use_uid=True, ssl=ssl)
server.login(USERNAME, PASSWORD)

server.select_folder('INBOX')
messages = server.search(['X-GM-RAW has:attachment'])

print '%d messages with attachments' % (len(messages),)
print
print 'UIDs of messages with attachments:'
print messages
</snippet></ROW><ROW><id>7932017</id><snippet>^</snippet></ROW><ROW><id>7932017</id><snippet>$</snippet></ROW><ROW><id>7932017</id><snippet>&gt;&gt;&gt; mylist = ['var1', 'var2', 'var3_something', 'var1_text', 'var1var1']
&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'^var1$')
&gt;&gt;&gt; matches = [item for item in mylist if r.match(item)]
&gt;&gt;&gt; print matches
['var1']
</snippet></ROW><ROW><id>7932017</id><snippet>^var1$</snippet></ROW><ROW><id>7932017</id><snippet>var1</snippet></ROW><ROW><id>7932017</id><snippet>var1_text</snippet></ROW><ROW><id>7932017</id><snippet>var1var1</snippet></ROW><ROW><id>7932017</id><snippet>^\W*var1\W*$</snippet></ROW><ROW><id>7932017</id><snippet>var1</snippet></ROW><ROW><id>7932017</id><snippet>\W</snippet></ROW><ROW><id>7932017</id><snippet>\w</snippet></ROW><ROW><id>7932017</id><snippet>\w</snippet></ROW><ROW><id>7932017</id><snippet>*</snippet></ROW><ROW><id>7932017</id><snippet>variable_list = [' var1;', 'var1 ;', 'var1)', 'var1_more']
&gt;&gt;&gt; r = re.compile(r'^\W*var1\W*$')
&gt;&gt;&gt; matches = [item for item in variable_list if r.match(item)]
&gt;&gt;&gt; print matches
[' var1;', 'var1 ;', 'var1)']
</snippet></ROW><ROW><id>7932017</id><snippet>&gt;&gt;&gt; r = re.compile(r'^\W*(var1)\W*$')
&gt;&gt;&gt; matches = [r.match(item).group(1) for item in variable_list if r.match(item)]
&gt;&gt;&gt; print matches
['var1', 'var1', 'var1']
</snippet></ROW><ROW><id>7932151</id><snippet>def singleton(cls):
    instances = {}
    def getinstance():
        if cls not in instances:
            instances[cls] = cls()
        return instances[cls]
    return getinstance

@singleton
class MyClass:
    pass
</snippet></ROW><ROW><id>7932151</id><snippet>&gt;&gt;&gt; a = MyClass()
&gt;&gt;&gt; b = MyClass()
&gt;&gt;&gt; a == b
True
</snippet></ROW><ROW><id>7932190</id><snippet>Profile</snippet></ROW><ROW><id>7932190</id><snippet>age</snippet></ROW><ROW><id>7932190</id><snippet>p.age</snippet></ROW><ROW><id>7932190</id><snippet>Profile</snippet></ROW><ROW><id>7932190</id><snippet>Profiles</snippet></ROW><ROW><id>7932229</id><snippet>var result = parseInt("0x42", 16);  // 66
</snippet></ROW><ROW><id>7932238</id><snippet>\u201c</snippet></ROW><ROW><id>7932238</id><snippet>&gt;&gt;&gt; text = u'Try \u201cquotated text should be here\u201d try'
&gt;&gt;&gt; '\\' in text
False
&gt;&gt;&gt; print text
Try “quotated text should be here” try
</snippet></ROW><ROW><id>7932238</id><snippet>&gt;&gt;&gt; table = {0x201c: u'"', 0x201d: u'"'}
&gt;&gt;&gt; text.translate(table)
u'Try "quotated text should be here" try'
</snippet></ROW><ROW><id>7932417</id><snippet>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
</snippet></ROW><ROW><id>7932529</id><snippet>#
## Récupération du fichier de config à partir des paramètres du script
#
import sys
if (len(sys.argv) &gt; 0):
configFile = sys.argv[0]
else:
configFile = 'F:\config.xml'

#
### Variables d'environnement du script
#
server = AdminControl.queryNames('node='+AdminControl.getNode( )+',type=Server,*')
serverName = AdminControl.getAttribute(server, "name")
nodeName = AdminControl.getNode( )
cellName = AdminControl.getCell( )

# scope à remplacer par cluster=clusterName lorsqu'applicable??
scope = ' -node '+nodeName+' -server '+serverName
scopeAlt = ' -scope Node='+nodeName+',Server='+serverName
scopeConfig =       'server(cells/'+cellName+'/nodes/'+nodeName+'/servers/'+serverName+'|server.xml)'
scopeResources = 'cells/'+cellName+'/nodes/'+nodeName+'/servers/'+serverName+'|resources.xml'
authPrefix = nodeName


#
### Fonctions utilitaires
#
def getAttributeD(xmlElement, name, default):
if xmlElement.hasAttribute(name):
    return xmlElement.getAttribute(name)
return default

def getAttribute(xmlElement, name):
return xmlElement.getAttribute(name)

_regBuses = {}
def addBus(bus):
_regBuses[bus['name']] = bus

def getBus(busName):
return _regBuses[busName]

_regDataProviders = {}
def getDataProviderId(providerName):
if providerName in _regDataProviders.keys():
    return _regDataProviders[providerName]
ps = AdminJDBC.listJDBCProviders(providerName)
if len(ps) &gt; 0:
    p = ps[0]
else:
    print("JDBC Provider non trouve : " + providerName)
    p = providerName
_regDataProviders[providerName] = p
return p

#
### Lecture du fichier de config
#
print('Lecture du fichier de config : ' + configFile)
import javax.xml.parsers.DocumentBuilderFactory as DocumentBuilderFactory
dbf = DocumentBuilderFactory.newInstance()
db = dbf.newDocumentBuilder()
document = db.parse(configFile)
config = document.getDocumentElement()


#
### JVM properties
#
jvm = AdminConfig.list('JavaVirtualMachine')
props = config.getElementsByTagName('property')
for i in range(props.getLength()):
xmle = props.item(i)
propName = getAttribute(xmle, 'name')
propValue = getAttribute(xmle, 'value')
propDesc = getAttributeD(xmle, 'description', '')
propRequired = getAttributeD(xmle, 'required', 'false')
print('Creation de la propriete JVM : ' + propName)
AdminConfig.create('Property', jvm, '[[validationExpression ""] [name "'+propName+'"] [description "'+propDesc+'"] [value "'+propValue+'"] [required "'+propRequired+'"]]')


# 
### Authentication
#
auths = config.getElementsByTagName('authentication')
for i in range(auths.getLength()):
xmle = auths.item(i)
name = getAttribute(xmle, 'name')
user = getAttribute(xmle, 'user')
pwd = getAttribute(xmle, 'password')
desc = getAttributeD(xmle, 'description', '')
print('Creation de l\'authentification : ' + name)
AdminTask.createAuthDataEntry('[-alias '+name+' -user '+user+' -password "'+pwd+'" -  description "'+desc+'" ]')


#
### JDBC Providers
#
providers = config.getElementsByTagName('jdbcProvider')
for i in range(providers.getLength()):
xmle = providers.item(i)
name = getAttribute(xmle, 'name')
shortName = getAttributeD(xmle, 'shortName', name)
dbType = getAttribute(xmle, 'databaseType')
providerType = getAttribute(xmle, 'providerType')
implementationType = getAttribute(xmle,  'implementationType')
classPath = getAttribute(xmle,  'classPath')
nativePath = getAttribute(xmle,  'nativePath')
desc = getAttributeD(xmle,  'description', '')
print('Creation du fournisseur JDBC : ' + name)
AdminTask.createJDBCProvider('['+scopeAlt+' -databaseType '+dbType+' -providerType "'+providerType+'" -implementationType "'+implementationType+'" -name "'+name+'" -description "'+desc+'" -classpath ['+classPath+'] -nativePath ['+nativePath+' ] ]')

#
### JDBC Datasources
#
dss = config.getElementsByTagName('jdbcDataSource')
for i in range(dss.getLength()):
xmle = dss.item(i)
name = getAttribute(xmle, 'name')
jndiName = getAttribute(xmle, 'jndiName')
providerName = getAttribute(xmle, 'jdbcProvider')
auth = getAttribute(xmle, 'authentication')
dbName = getAttribute(xmle, 'database')
dbHost = getAttribute(xmle, 'host')
dbPort = getAttribute(xmle, 'port')
dataStoreHelperClassName = getAttributeD(xmle, 'dataStoreHelperClassName', 'com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper')
print('Creation de la source de données : ' + name)
providerId = getDataProviderId(providerName)
authX = authPrefix + '/' + auth
AdminTask.createDatasource(providerId, '[-name '+name+' -jndiName '+jndiName+' -  dataStoreHelperClassName '+dataStoreHelperClassName+' -containerManagedPersistence false -componentManagedAuthenticationAlias '+authX+' -xaRecoveryAuthAlias '+authX+' -configureResourceProperties [[databaseName java.lang.String '+dbName+'] [driverType java.lang.Integer 4] [serverName java.lang.String '+dbHost+'] [portNumber java.lang.Integer '+dbPort+']]]')


#   
### Internal &amp; External Buses (JMS)
#
buses = config.getElementsByTagName('internalBus')
for i in range(buses.getLength()):
xmle = buses.item(i)
busName = getAttribute(xmle, 'name')
busDesc = getAttributeD(xmle, 'description', '')
logSize = getAttributeD(xmle, 'logSize', '100')
minStoreSize = getAttributeD(xmle, 'minStoreSize', '200')
maxStoreSize = getAttributeD(xmle, 'minStoreSize', '500')
unlimitedStoreSize = getAttributeD(xmle, 'unlimitedStoreSize', 'false')
print('Creation du bus interne : ' + busName)
AdminTask.createSIBus('[-bus '+busName+' -description ['+busDesc+'] -busSecurity false]')
AdminTask.addSIBusMember('[-bus '+busName+' ' + scope + ' -fileStore  -logSize '+logSize+' -minPermanentStoreSize '+minStoreSize+' -maxPermanentStoreSize '+maxStoreSize+' -unlimitedPermanentStoreSize '+unlimitedStoreSize+' -minTemporaryStoreSize '+minStoreSize+' -maxTemporaryStoreSize '+maxStoreSize+' -unlimitedTemporaryStoreSize '+unlimitedStoreSize+' ]')
bus = {}
bus['name'] = busName
bus['type'] = 'internal'
addBus(bus)


buses = config.getElementsByTagName('externalBus')
for i in range(buses.getLength()):
xmle = buses.item(i)
bus = {}
busName = getAttribute(xmle, 'name')
print('Creation du bus externe : ' + busName)
bus['name'] = busName
bus['type'] = 'external'
bus['manager'] = getAttribute(xmle, 'manager')
bus['host'] = getAttribute(xmle, 'host')
bus['port'] = getAttribute(xmle, 'port')
bus['channel'] = getAttribute(xmle, 'channel')
addBus(bus)


#
### JMS Connections Factories
#
wmqRes = '"WebSphere MQ JMS Provider('+scopeResources+'#builtin_mqprovider)"'
cfs = config.getElementsByTagName('jmsConnectionFactory')
for i in range(cfs.getLength()):
xmle = cfs.item(i)
busName = getAttribute(xmle, 'bus')
jmsType = getAttribute(xmle, 'jmsType')
cfName = getAttribute(xmle, 'name')
cfJndiName = getAttribute(xmle, 'jndiName')
cfDesc = getAttributeD(xmle, 'description', '')
nonPersistentMapping=getAttributeD(xmle, 'nonPersistentMapping', 'ExpressNonPersistent')
persistentMapping=getAttributeD(xmle, 'persistentMapping', 'ReliablePersistent')
wmqTransportType=getAttributeD(xmle, 'wmqTransportType', 'BINDINGS_THEN_CLIENT')
print('Creation de la fabrique de connection jms : ' + cfName)
bus = getBus(busName)
if bus['type'] == 'internal':
    AdminTask.createSIBJMSConnectionFactory(scopeConfig, '[-type '+jmsType+' -name '+cfName+' -jndiName '+cfJndiName+' -description "'+cfDesc+'" -category  -busName '+busName+' -nonPersistentMapping '+nonPersistentMapping+' -readAhead Default -tempQueueNamePrefix  -target  -targetType BusMember -targetSignificance Preferred -targetTransportChain  -providerEndPoints  -connectionProximity Bus -authDataAlias  -containerAuthAlias  -mappingAlias  -shareDataSourceWithCMP false -logMissingTransactionContext false -manageCachedHandles false -xaRecoveryAuthAlias  -persistentMapping '+persistentMapping+' -consumerDoesNotModifyPayloadAfterGet false -producerDoesNotModifyPayloadAfterSet false]')
else:
    if jmsType == 'topic':
        cfType = 'TCF'
    else:
        cfType = 'TCF'
    AdminTask.createWMQConnectionFactory(wmqRes, '[-type '+cfType+' -name '+cfName+' -jndiName '+cfJndiName+' -description "'+cfDesc+'" -qmgrName ' +bus['manager']+ ' -wmqTransportType '+wmqTransportType+' -qmgrHostname '+bus['host']+' -qmgrPortNumber '+bus['port']+' -qmgrSvrconnChannel '+bus['channel']+' ]')


#
### Destinations JMS
#
dests = config.getElementsByTagName('jmsDestination')
for i in range(dests.getLength()):
xmle = dests.item(i)
busName = getAttribute(xmle, 'bus')
jmsType = getAttribute(xmle, 'jmsType')
destName = getAttribute(xmle, 'name')
destJndiName = getAttribute(xmle, 'jndiName')
destDest = getAttribute(xmle, 'destination')
destDesc = getAttributeD(xmle, 'description', '')
reliability = getAttributeD(xmle, 'reliability', 'EXPRESS_NONPERSISTENT')
deliveryMode = getAttributeD(xmle, 'deliveryMode', 'NonPersistent')
print('Creation de la destination jms : ' + destName)
bus = getBus(busName)
if bus['type'] == 'internal':
    if jmsType == 'queue':
        sibType = 'Queue'
    elif jmsType == 'topic':
        sibType = 'Topic'
    AdminTask.createSIBDestination('[-bus '+busName+' -name '+destDest+' -type '+sibType+' -reliability '+reliability+' -description "'+destDesc+'" '+scope+' ]')
    if jmsType == 'queue':
        AdminTask.createSIBJMSQueue(scopeConfig, '[-name '+destName+' -jndiName '+destJndiName+' -description "'+destDesc+'" -deliveryMode '+deliveryMode+' -readAhead AsConnection -busName '+busName+' -queueName '+destDest+' -scopeToLocalQP false -producerBind false -producerPreferLocal true -gatherMessages false]')
    elif jmsType == 'topic':
        AdminTask.createSIBJMSTopic(scopeConfig, '[-name '+destName+' -jndiName '+destJndiName+' -description "'+destDesc+'" -topicName -deliveryMode '+deliveryMode+' -readAhead AsConnection -busName '+busName+' -topicSpace '+destDest+']')
else:
    if jmsType == 'queue':
        AdminTask.createWMQQueue(scopeConfig, '[-name '+destName+' -jndiName '+destJndiName+' -queueName '+destDest+' -qmgr  -description "'+destDesc+'" ]')
    elif jmsType == 'topic':
        AdminTask.createWMQTopic(scopeConfig, '[-name '+destName+' -jndiName '+destJndiName+' -topicName '+destDest+' -description "'+destDesc+'" ]')


#
### JMS Activation Specs
#
wmqRes = '"WebSphere MQ JMS Provider('+scopeResources+'#builtin_mqprovider)"'
specs = config.getElementsByTagName('jmsActivationSpec')
for i in range(specs.getLength()):
xmle = specs.item(i)
busName = getAttribute(xmle, 'bus')
specName = getAttribute(xmle, 'name')
specJndiName = getAttribute(xmle, 'jndiName')
jmsType = getAttribute(xmle, 'jmsType')
destJndiName = getAttribute(xmle, 'jndiDestinationName')
specDesc = getAttributeD(xmle, 'description', '')
maxHandlers = getAttributeD(xmle, 'maxHandlers', '4')
wmqTransportType=getAttributeD(xmle, 'wmqTransportType', 'BINDINGS_THEN_CLIENT')
print('Creation de la spec d\'activation jms : ' + specName)
if jmsType == 'queue':
    jmsDestClass = 'Queue'
elif jmsType == 'topic':
    jmsDestClass = 'Topic'
bus = getBus(busName)
if bus['type'] == 'internal':
    AdminTask.createSIBJMSActivationSpec(scopeConfig, '[-name '+specName+' -   jndiName '+specJndiName+' -destinationJndiName '+destJndiName+' -description "'+specDesc+'" -busName '+busName+' -clientId  -durableSubscriptionHome  -destinationType javax.jms.'+jmsDestClass+' -messageSelector  -acknowledgeMode Auto-acknowledge -subscriptionName  -maxBatchSize 1 -maxConcurrency '+maxHandlers+' -subscriptionDurability NonDurable -shareDurableSubscriptions InCluster -authenticationAlias  -readAhead Default -target  -targetType BusMember -targetSignificance Preferred -targetTransportChain  -providerEndPoints  -shareDataSourceWithCMP false -consumerDoesNotModifyPayloadAfterGet false -forwarderDoesNotModifyPayloadAfterSet false -alwaysActivateAllMDBs false -retryInterval 30 -autoStopSequentialMessageFailure 0 -failingMessageDelay 0]')
else:
    AdminTask.createWMQActivationSpec(wmqRes, '[-name '+specName+' -jndiName '+specJndiName+' -description "'+specDesc+'" -destinationJndiName '+destJndiName+' -destinationType javax.jms.'+jmsDestClass+' -qmgrName '+bus['manager']+' -wmqTransportType '+wmqTransportType+' -qmgrHostname '+bus['host']+' -qmgrPortNumber '+bus['port']+' -qmgrSvrconnChannel '+bus['channel']+' ]')



AdminConfig.save()
</snippet></ROW><ROW><id>7932529</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;config&gt;

&lt;!-- Definition des propriétés JVM --&gt;
&lt;property 
    name="someproperty" 
    value="myvalue" 
/&gt;
&lt;property 
    description="Different jvm properties"
    name="myproperty" 
    value="true" 
/&gt;

&lt;!-- Définition des sources d'authentification  --&gt;
&lt;authentication
    description="Authentification pour accès DB"
    name="auth"
    user="dbuser"
    password="dbuser"
/&gt;


&lt;!-- Définition des fournisseurs JDBC --&gt;
&lt;jdbcProvider
    description="One-phase commit DB2 JCC provider that supports JDBC 3.0."
    shortName="DB2"
    name="DB2 Universal JDBC Driver Provider"
    databaseType="DB2"
    providerType="DB2 Universal JDBC Driver Provider"
    implementationType="Source de données du pool de connexions"
    classPath="${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc.jar ${UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar ${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cisuz.jar"
    nativePath="${DB2UNIVERSAL_JDBC_DRIVER_NATIVEPATH}"
/&gt;
&lt;jdbcProvider
    description="Two-phase commit DB2 JCC provider that supports JDBC 3.0."
    shortName="DB2(XA)"
    name="DB2 Universal JDBC Driver Provider (XA)"
    databaseType="DB2"
    providerType="DB2 Universal JDBC Driver Provider"
    implementationType="Source de données XA"
    classPath="${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc.jar ${UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar ${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cisuz.jar"
    nativePath="${DB2UNIVERSAL_JDBC_DRIVER_NATIVEPATH}"
/&gt;


&lt;!-- Définition des sources de données JDBC --&gt; 
&lt;jdbcDataSource
    description="Sources de données des Demandes"
    name="db_name"
    jndiName="jdbc/db_name"
    jdbcProvider="DB2 Universal JDBC Driver Provider (XA)"
    authentication="auth"
    database="DB2XXXXX"
    host="hostname"
    port="00000"
/&gt;


&lt;!-- Définition des bus internes --&gt;
&lt;internalBus 
    description="Bus Interne"
    name="BusInterne" 
/&gt;

&lt;!-- Définition des bus externes --&gt;
&lt;externalBus 
    description="Serveur Websphere MQ externe"
    name="ServeurMQ" 
    manager="Manager" 
    host="host" 
    port="1414" 
    channel="CLIENT.NAME"
/&gt;

&lt;!-- Définition des Fabriques de Connexions JMS--&gt;
&lt;jmsConnectionFactory 
    description="Queue de rafraichissement des demandes"
    name="QCF" 
    jndiName="jms/QCF" 
    jmsType="queue" 
    bus='BusInterne' 
/&gt;
&lt;jmsConnectionFactory 
    description="Topic "
    name="TCF" 
    jndiName="jms/TCF" 
    jmsType="topic" 
    bus='ServeurMQ' 
/&gt;

&lt;!-- Définition des Destinations JMS --&gt;
&lt;jmsDestination 
    description="Queue "
    name="queue" 
    jndiName="jms/queue" 
    jmsType="queue" 
    bus='BusInterne' 
    destination="Q.NAME" 
/&gt;
&lt;jmsDestination 
    description="Topic 2"
    name="topic2" 
    jndiName="topic2" 
    jmsType="topic" 
    bus='ServeurMQ' 
    destination="Q.TOPIC.NAME" 
/&gt;

&lt;!-- Définition des Spécifications d'Activation JMS --&gt;
&lt;jmsActivationSpec 
    description="Spec"
    name="Specs" 
    jndiName="jms/Specs" 
    jmsType="queue" 
    bus='BusInterne' 
    jndiDestinationName="jms/queue" 
    maxHandlers="4" 
/&gt;

&lt;/config&gt;
</snippet></ROW><ROW><id>7932529</id><snippet>wsadmin -lang jython -profileName MyProfile -f config.py config.xml
</snippet></ROW><ROW><id>7932604</id><snippet>py2app</snippet></ROW><ROW><id>7932604</id><snippet>BundleBuilder</snippet></ROW><ROW><id>7932604</id><snippet>setup.py</snippet></ROW><ROW><id>7932604</id><snippet>setuptools</snippet></ROW><ROW><id>7932604</id><snippet>sudo easy_install your_app_name
</snippet></ROW><ROW><id>7932604</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>7932604</id><snippet>PATH</snippet></ROW><ROW><id>7932604</id><snippet>PyPI</snippet></ROW><ROW><id>7932604</id><snippet>easy_install</snippet></ROW><ROW><id>7932604</id><snippet>easy_install-2.x</snippet></ROW><ROW><id>7932604</id><snippet>pip</snippet></ROW><ROW><id>7932604</id><snippet>Distribute</snippet></ROW><ROW><id>7932604</id><snippet>setuptools</snippet></ROW><ROW><id>7932604</id><snippet>py2app</snippet></ROW><ROW><id>7932604</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>7932816</id><snippet>def get_related_managers(self):
    managers = []
    for related_object in self._meta.get_all_related_objects():
        managers.append(getattr(self, related_object.get_accessor_name()))
    return managers
</snippet></ROW><ROW><id>7932816</id><snippet>self._meta.get_all_related_many_to_many_objects()</snippet></ROW><ROW><id>7932930</id><snippet>table = (experiment[:,0]**2 + experiment[:,1]**2 &lt;= 1).astype(int)
</snippet></ROW><ROW><id>7932930</id><snippet>astype(int)</snippet></ROW><ROW><id>7932930</id><snippet>table = 1 - (experiment**2).sum(axis=1).astype(int)
</snippet></ROW><ROW><id>7932930</id><snippet>table</snippet></ROW><ROW><id>7932930</id><snippet>table = zeros(npoints, dtype=int)
</snippet></ROW><ROW><id>7932930</id><snippet>zeros</snippet></ROW><ROW><id>7932930</id><snippet>range(npoints)</snippet></ROW><ROW><id>7932930</id><snippet>range(1, npoints)</snippet></ROW><ROW><id>7932930</id><snippet>for</snippet></ROW><ROW><id>7933055</id><snippet>import Tkinter as tk

data = {"Field 1": 1,
        "Field 2": 2,
        "Field 3": 3,
        "Field 4": 4,
}

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.variables ={}
        for label in sorted(data.keys()):
            self.variables[label] = tk.IntVar()
            cb = tk.Checkbutton(self, text=label, 
                                onvalue=data[label], offvalue=0, 
                                variable=self.variables[label])
            cb.pack(side="top", fill="x")


        button = tk.Button(self, text="Submit", command=self.OnSubmit)
        button.pack()

    def OnSubmit(self):
        for field in sorted(data.keys()):
            print "Value for %s: %s" % (field, self.variables[field].get())

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>7933106</id><snippet>v = cmp(ayy, byy)
if v != 0: return v
v = cmp(amm, bmm)
if v != 0: return v
return cmp(add, bdd)
</snippet></ROW><ROW><id>7933106</id><snippet>return cmp(ayy, byy) or cmp(amm, bmm) or cmp(add, bdd)
</snippet></ROW><ROW><id>7933106</id><snippet>return cmp((ayy,amm,add), (byy,bmm,bdd))
</snippet></ROW><ROW><id>7933538</id><snippet>lmer (y ~ x1 + x1 + (1|id), mydat)
</snippet></ROW><ROW><id>7933542</id><snippet>prefix = '111'
suffix = '222'

with open('source.txt', 'r') as src:
    with open('dest.txt', 'w') as dest:
       for line in src:
           dest.write('%s%s%s\n' % (prefix, line.rstrip('\n'), suffix))
</snippet></ROW><ROW><id>7933546</id><snippet>import urllib2
req = urllib2.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
resp = urllib2.urlopen(req)
content = resp.read()
</snippet></ROW><ROW><id>7933665</id><snippet>user_id</snippet></ROW><ROW><id>7933851</id><snippet>fi_list</snippet></ROW><ROW><id>7933851</id><snippet>amount</snippet></ROW><ROW><id>7933851</id><snippet>fi_list</snippet></ROW><ROW><id>7933851</id><snippet>var finInst = jQuery.parseJSON( "{{ jsonString }}" );

function checkLimit(amount) {
    // I don't know what amount is supposed to do.
    if (finInst[jQuery(this).text()] &gt; 100000)
        // do amount &gt; 100000 code
    else
        // amount within limit
}
</snippet></ROW><ROW><id>7933851</id><snippet>import json
if plan:
    investments = Investment.objects.all().filter(plan = plan).order_by('maturity_date').filter(maturity_date__gte = now)
    fi_list = {}
    for i in investments:
        financial_institution = i.financial_institution
        amount = i.get_current_value(date)
        fi_list[financial_institution] = amount
    context['jsonString'] = json.dumps(fi_list)
</snippet></ROW><ROW><id>7933851</id><snippet>checkLimit</snippet></ROW><ROW><id>7933962</id><snippet>parent.child = child
</snippet></ROW><ROW><id>7933962</id><snippet>child.parents.append(parent)
</snippet></ROW><ROW><id>7933993</id><snippet>sorted</snippet></ROW><ROW><id>7933993</id><snippet>key</snippet></ROW><ROW><id>7933993</id><snippet>import random
sorted(l, key=lambda *args: random.random())
</snippet></ROW><ROW><id>7933993</id><snippet>import os
sorted(l, key=os.urandom)
</snippet></ROW><ROW><id>7934210</id><snippet>print nine_lines()
</snippet></ROW><ROW><id>7934210</id><snippet>nine_lines()</snippet></ROW><ROW><id>7934210</id><snippet>return</snippet></ROW><ROW><id>7934210</id><snippet>None</snippet></ROW><ROW><id>7934210</id><snippet>nine_lines()
</snippet></ROW><ROW><id>7934439</id><snippet>Blog.objects.annotate(comment_count=Count('comments')).order_by('comment_count')
</snippet></ROW><ROW><id>7934577</id><snippet>eav.unregister(Encounter)
eav.register(Patient)
</snippet></ROW><ROW><id>7934577</id><snippet>import eav
from app.models import Patient, Encounter

eav.register(Encounter)
eav.register(Patient)
Attribute.objects.create(name='age', datatype=Attribute.TYPE_INT)
Attribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)
Attribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)
Attribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)
Attribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)

self.yes = EnumValue.objects.create(value='yes')
self.no = EnumValue.objects.create(value='no')
self.unkown = EnumValue.objects.create(value='unkown')
ynu = EnumGroup.objects.create(name='Yes / No / Unknown')
ynu.enums.add(self.yes)
ynu.enums.add(self.no)
ynu.enums.add(self.unkown)

Attribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\
                                       enum_group=ynu)

# When you register a model within EAV,
# you can access all of EAV attributes:

Patient.objects.create(name='Bob', eav__age=12,
                           eav__fever=no, eav__city='New York',
                           eav__country='USA')
# You can filter queries based on their EAV fields:

query1 = Patient.objects.filter(Q(eav__city__contains='Y'))
query2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)
</snippet></ROW><ROW><id>7934577</id><snippet>#app/models.py
class Something(models.Model):
    name = models.CharField(max_length=32)
    data = hstore.DictionaryField(db_index=True)
</snippet></ROW><ROW><id>7934577</id><snippet>&gt;&gt;&gt; instance = Something.objects.create(
                 name='something',
                 data={'a': '1', 'b': '2'}
           )
&gt;&gt;&gt; instance.data['a']
'1'        
&gt;&gt;&gt; empty = Something.objects.create(name='empty')
&gt;&gt;&gt; empty.data
{}
&gt;&gt;&gt; empty.data['a'] = '1'
&gt;&gt;&gt; empty.save()
&gt;&gt;&gt; Something.objects.get(name='something').data['a']
'1'
</snippet></ROW><ROW><id>7934577</id><snippet># equivalence
Something.objects.filter(data={'a': '1', 'b': '2'})

# subset by key/value mapping
Something.objects.filter(data__contains={'a': '1'})

# subset by list of keys
Something.objects.filter(data__contains=['a', 'b'])

# subset by single key
Something.objects.filter(data__contains='a')    
</snippet></ROW><ROW><id>7934577</id><snippet>from djangotoolbox.fields import DictField

class Image(models.Model):
    exif = DictField()
...

&gt;&gt;&gt; image = Image.objects.create(exif=get_exif_data(...))
&gt;&gt;&gt; image.exif
{u'camera_model' : 'Spamcams 4242', 'exposure_time' : 0.3, ...}
</snippet></ROW><ROW><id>7934577</id><snippet>class Container(models.Model):
    stuff = ListField(EmbeddedModelField())

class FooModel(models.Model):
    foo = models.IntegerField()

class BarModel(models.Model):
    bar = models.CharField()
...

&gt;&gt;&gt; Container.objects.create(
    stuff=[FooModel(foo=42), BarModel(bar='spam')]
)
</snippet></ROW><ROW><id>7934577</id><snippet>from dynamo import models

test_app, created = models.DynamicApp.objects.get_or_create(
                      name='dynamo'
                    )
test, created = models.DynamicModel.objects.get_or_create(
                  name='Test',
                  verbose_name='Test Model',
                  app=test_app
               )
foo, created = models.DynamicModelField.objects.get_or_create(
                  name = 'foo',
                  verbose_name = 'Foo Field',
                  model = test,
                  field_type = 'dynamiccharfield',
                  null = True,
                  blank = True,
                  unique = False,
                  help_text = 'Test field for Foo',
               )
bar, created = models.DynamicModelField.objects.get_or_create(
                  name = 'bar',
                  verbose_name = 'Bar Field',
                  model = test,
                  field_type = 'dynamicintegerfield',
                  null = True,
                  blank = True,
                  unique = False,
                  help_text = 'Test field for Bar',
               )
</snippet></ROW><ROW><id>7934624</id><snippet>data.get(num, data[min(data.keys(), key=lambda k: abs(k-num))])
</snippet></ROW><ROW><id>7934624</id><snippet>data[num] if num in data else data[min(data.keys(), key=lambda k: abs(k-num))]
</snippet></ROW><ROW><id>7934624</id><snippet>data</snippet></ROW><ROW><id>7934624</id><snippet>True</snippet></ROW><ROW><id>7934624</id><snippet>data.get(num) or data[min(data.keys(), key=lambda k: abs(k-num))]
</snippet></ROW><ROW><id>7934731</id><snippet>movies=["the holy grail",1975,"terry jones &amp; Terry gilliam",91, ["gilliam chapman",["michael palin","john cleese","terry gilliam","eric idle","terry jones"]]]

for each_item in movies:
  if isinstance(each_item , list):
    for nested_item in each_item:
      if isinstance(nested_item , list):
        for each_d in nested_item: print(each_d)
      else: print(nested_item)
  else: print(each_item)
</snippet></ROW><ROW><id>7934734</id><snippet>TreeCtrl</snippet></ROW><ROW><id>7934734</id><snippet>TreeCtrl</snippet></ROW><ROW><id>7934734</id><snippet>def item_exists(tree, match, root):
    item, cookie = tree.GetFirstChild(root)

    while item.IsOk():
        if tree.GetItemText(item) == match:
            return True
        #if tree.ItemHasChildren(item):
        #    if item_exists(tree, match, item):
        #        return True
        item, cookie = tree.GetNextChild(root, cookie)
    return False

result = item_exists(tree, 'some text', tree.GetRootItem())
</snippet></ROW><ROW><id>7934879</id><snippet>pre_save</snippet></ROW><ROW><id>7934879</id><snippet>instance.some_field</snippet></ROW><ROW><id>7934879</id><snippet>obj.some_field</snippet></ROW><ROW><id>7934879</id><snippet>@receiver(pre_save, sender=MyModel)
def send_email_if_changed(sender, instance, **kwargs):
    try:
        obj = MyModel.objects.get(pk=instance.pk)
    except MyModel.DoesNotExist:
        pass # It's new, so email hasn't technically changed, but you might want to do something else here.
    else:
        if not obj.email == instance.email: # Email has changed
            # send email
</snippet></ROW><ROW><id>7934906</id><snippet>O(n)</snippet></ROW><ROW><id>7934906</id><snippet>O(n**2)</snippet></ROW><ROW><id>7934906</id><snippet>n</snippet></ROW><ROW><id>7934906</id><snippet>cython.parallel.prange()</snippet></ROW><ROW><id>7934936</id><snippet>items = itertools.chain.from_iterable( iter(list_returning_method, None) )

for item in items:
    # do something with item
    print item

    if not Condition:
       break
</snippet></ROW><ROW><id>7934936</id><snippet>iter(callable, sentinel)</snippet></ROW><ROW><id>7934936</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>7934969</id><snippet>'Name: {0[person.name]}'.format({'person.name': 'Joe'})
</snippet></ROW><ROW><id>7935273</id><snippet>.rej</snippet></ROW><ROW><id>7935273</id><snippet>hg pull --rebase</snippet></ROW><ROW><id>7935273</id><snippet>.hg/strip-backup</snippet></ROW><ROW><id>7935273</id><snippet>--rebase</snippet></ROW><ROW><id>7935295</id><snippet>svml</snippet></ROW><ROW><id>7935299</id><snippet>function normalize($input=null) {
  if (! is_array($input)) {
    return strval($input);
  }

  $res = '';
  $keys = array_keys($input);
  sort($keys);
  foreach ($keys as $k) {
    if (!is_int($k)) $res .= $k;
    $res .= normalize($v);
  }
  return $res;
}
</snippet></ROW><ROW><id>7935653</id><snippet>class LoginSpider(BaseSpider):
name = 'example.com'
start_urls = ['http://www.example.com/users/login.php']

def parse(self, response):
    return [FormRequest.from_response(response,
                formdata={'username': 'john', 'password': 'secret'},
                callback=self.after_login)]

def after_login(self, response):
    # check login succeed before going on
    if "authentication failed" in response.body:
        self.log("Login failed", level=log.ERROR)
        return

    # continue scraping with authenticated session...
</snippet></ROW><ROW><id>7935760</id><snippet>myList = [ "1", "2", "3" ]
myList = [ int(i) for i in myList ]
</snippet></ROW><ROW><id>7935793</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>7935793</id><snippet>eval</snippet></ROW><ROW><id>7935793</id><snippet>&gt;&gt;&gt; s = "[(5, 2), (1,3), (4,5)]"
&gt;&gt;&gt; eval(s)
[(5, 2), (1, 3), (4, 5)]
</snippet></ROW><ROW><id>7935840</id><snippet>cp1254</snippet></ROW><ROW><id>7935840</id><snippet>ISO-8859-9</snippet></ROW><ROW><id>7935840</id><snippet>htmldata = urllib.unquote_plus(self.request.get('mdata'))</snippet></ROW><ROW><id>7935840</id><snippet>request_data = self.request.get('mdata')
htmldata = urllib.unquote_plus(request_data)
</snippet></ROW><ROW><id>7935840</id><snippet>repr(request_data)</snippet></ROW><ROW><id>7935840</id><snippet>repr(htmldata)</snippet></ROW><ROW><id>7935840</id><snippet>self.request.get('mdata')</snippet></ROW><ROW><id>7935840</id><snippet>u'I\n\n'</snippet></ROW><ROW><id>7935840</id><snippet>your_input.decode(some_encoding, 'ignore')</snippet></ROW><ROW><id>7935840</id><snippet>some_encoding</snippet></ROW><ROW><id>7935840</id><snippet>ascii</snippet></ROW><ROW><id>7935840</id><snippet>UTF-8</snippet></ROW><ROW><id>7935840</id><snippet># -*- coding: iso-8859-9 -*-</snippet></ROW><ROW><id>7935840</id><snippet>'mdata' : 'IıışŞşÖÖççç'</snippet></ROW><ROW><id>7935840</id><snippet>'mdata' : 'I\xFD\xFD etc etc'</snippet></ROW><ROW><id>7935840</id><snippet>"Content-type": "application/x-www-form-urlencoded"</snippet></ROW><ROW><id>7935840</id><snippet>"Content-Type": "application/x-www-form-urlencoded; charset:ISO-8859-9;"</snippet></ROW><ROW><id>7935887</id><snippet>all_sents = file_sent.read().replace('\n', '')
</snippet></ROW><ROW><id>7935887</id><snippet>all_sents = file_sent.read().replace('\n', ' ')
</snippet></ROW><ROW><id>7935984</id><snippet>nonlocal</snippet></ROW><ROW><id>7935984</id><snippet>def outer():
    string = ""
    def inner():
        nonlocal string
        string = "String was changed by a nested function!"
    inner()
    return string
</snippet></ROW><ROW><id>7935984</id><snippet>def outer():
    string = [""]
    def inner():
        string[0] = "String was changed by a nested function!"
    inner()
    return string[0]
</snippet></ROW><ROW><id>7936073</id><snippet>dir_path = os.path.join(self.feed, self.address)  # will return 'feed/address'
os.makedirs(dir_path)                             # create directory [current_path]/feed/address
output = open(os.path.join(dir_path, file_name), 'wb')
</snippet></ROW><ROW><id>7936137</id><snippet>if "mystring" in item:
</snippet></ROW><ROW><id>7936312</id><snippet>self.connection</snippet></ROW><ROW><id>7936312</id><snippet>self.rfile</snippet></ROW><ROW><id>7936312</id><snippet>select</snippet></ROW><ROW><id>7936312</id><snippet>self.rfile</snippet></ROW><ROW><id>7936312</id><snippet>self.rfile.read()</snippet></ROW><ROW><id>7936312</id><snippet>self.rfile</snippet></ROW><ROW><id>7936588</id><snippet>class MyClass(object):
    def install(self):
          print "In install"

method_name = 'install' # set by the command line options
my_cls = MyClass()
method = getattr(my_cls, method_name)
if not method:
    raise Exception("Method %s not implemented" % method_name)
method()
</snippet></ROW><ROW><id>7936588</id><snippet>def install():
       print "In install"

method_name = 'install' # set by the command line options
possibles = globals().copy()
possibles.update(locals())
method = possibles.get(method_name)()    
if not method:
     raise Exception("Method %s not implemented" % method_name)
method()
</snippet></ROW><ROW><id>7936941</id><snippet>byte[]</snippet></ROW><ROW><id>7936941</id><snippet>byte[]</snippet></ROW><ROW><id>7936941</id><snippet>return new ASCIIEncoding().GetString(bytes);

public static string ConvertByteArrayToString(byte[] bytes)
{
    try
    {
        return new ASCIIEncoding().GetString(bytes);
    }
    catch (Exception)
    {
        return "";
    }

}
</snippet></ROW><ROW><id>7937058</id><snippet>$ grep -v '[^a-zA-Z]' foo
</snippet></ROW><ROW><id>7937058</id><snippet>$ grep -v '[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]' foo
</snippet></ROW><ROW><id>7937058</id><snippet>sed</snippet></ROW><ROW><id>7937058</id><snippet>$ cat foo | sed 's/[^a-zA-Z]//g'
</snippet></ROW><ROW><id>7937058</id><snippet>$ strings foo
</snippet></ROW><ROW><id>7937893</id><snippet>django_mongodb_engine.mongodb</snippet></ROW><ROW><id>7937893</id><snippet>ENGINE</snippet></ROW><ROW><id>7938047</id><snippet>C1 = Cookie.SimpleCookie()
C1["emailAddress"] = self.request.get('emailAddress')
C2 = Cookie.SimpleCookie()
C2["secretCode"] = self.request.get('secretCode')
C2["secretCode"]["path"] = "/"
self.response.headers.add_header("Set-Cookie", C1.output(header=''))
self.response.headers.add_header("Set-Cookie", C2.output(header=''))
</snippet></ROW><ROW><id>7938051</id><snippet>Default</snippet></ROW><ROW><id>7938051</id><snippet>class Default(object):
    def __repr__(self):
        return '-'.join(
            str(getattr(self,key)) for key in self.__dict__ if not key.startswith('_'))
    def __eq__(self,other):
        try:
            return all(getattr(self,key)==getattr(other,key)
                       for key in self.__dict__ if not key.startswith('_'))
        except AttributeError:
            return False


class Foo(Default):
    def __init__(self):
        self.bar=1
        self.baz='hi'

foo=Foo()
print(foo)
# hi-1

foo2=Foo()
print(foo==foo2)
# True

foo2.bar=100
print(foo==foo2)
# False
</snippet></ROW><ROW><id>7938197</id><snippet>$ pip install psphere
</snippet></ROW><ROW><id>7938197</id><snippet>&gt;&gt;&gt; from psphere.client import Client
&gt;&gt;&gt; from psphere.managedobjects import VirtualMachine
&gt;&gt;&gt; client = Client(server="vcenter.mydomain.com", username="Administrator", password="strong")
&gt;&gt;&gt; vm = VirtualMachine.get(client, name="genesis")
&gt;&gt;&gt; vm
&lt;psphere.managedobjects.VirtualMachine object at 0xd3fbccc&gt;
&gt;&gt;&gt; print("%s has %s CPUs" % (vm.name, vm.config.hardware.numCPU))
genesis has 2 CPUs
</snippet></ROW><ROW><id>7938303</id><snippet>foo or ''</snippet></ROW><ROW><id>7938303</id><snippet>foo</snippet></ROW><ROW><id>7938303</id><snippet>0</snippet></ROW><ROW><id>7938303</id><snippet>'' if foo is None else foo</snippet></ROW><ROW><id>7938334</id><snippet>for flacfiles in flacs:
    if os.path.exists(os.path.splitext(flacfiles)[0] + '.cue')):
        # do something 
</snippet></ROW><ROW><id>7938561</id><snippet>gtk.TreeSelection</snippet></ROW><ROW><id>7938561</id><snippet>gtk.TreeSelection.get_selected_rows()</snippet></ROW><ROW><id>7938561</id><snippet>def onSelectionChanged(tree_selection) :
    (model, pathlist) = tree_selection.get_selected_rows()
    for path in pathlist :
        tree_iter = model.get_iter(path)
        value = model.get_value(tree_iter,0)
        print value

listStore = gtk.ListStore(int)
treeview = gtk.TreeView()
treeview.set_model(listStore)
tree_selection = treeview.get_selection()
tree_selection.set_mode(gtk.SELECTION_MULTIPLE)
tree_selection.connect("changed", onSelectionChanged)
</snippet></ROW><ROW><id>7938566</id><snippet>{{</snippet></ROW><ROW><id>7938566</id><snippet>'''Papori'''</snippet></ROW><ROW><id>7938566</id><snippet>import re
regex = re.compile(r"""{{.*?}}\s*('''Papori''')""", re.DOTALL)
print regex.sub(r"\1", rev_data)
</snippet></ROW><ROW><id>7938566</id><snippet>prefix, sep, rest = rev_data.partition("{{")
if sep: # found the first "{{"
    rest = sep + rest # put it back
    while rest.startswith("{{"):
        # remove nested "{{expr}}" one by one until there is none
        rest, n = re.subn(r"{{(?:[^{]|(?&lt;!{){)*?}}", "", rest, 1)
        if n == 0: 
            break # the first "{{" is unmatched; can't remove it
    else: # deletion is successful
        rev_data = prefix + rest
print(rev_data)
</snippet></ROW><ROW><id>7938566</id><snippet>prefix, sep, rest = rev_data.partition("{{")
if sep: # found the first "{{"
    depth = 1
    prevc = None
    for i, c in enumerate(rest):
        if c == "{" and  prevc == c:  # found "{{"
            depth += 1
            prevc = None # match "{{{ " only once
        elif c == "}" and prevc == c: # found "}}"
            depth -= 1
            if depth == 0: # found matching "}}"
                rev_data = prefix + rest[i+1:] # after matching "}}"
                break
            prevc = None # match "}}} " only once
        else:
            prevc = c
print(rev_data)
</snippet></ROW><ROW><id>7938566</id><snippet>#!/usr/bin/env python
import urllib, urllib2
import xml.etree.cElementTree as etree

# download &amp; parse xml, find rev data
params = dict(action="query", prop="revisions", rvprop="content",
              format="xml", titles="papori", rvsection=0)
request = urllib2.Request(
    "http://en.wikipedia.org/w/api.php?" + urllib.urlencode(params), 
    headers={"User-Agent": "WikiDownloader/1.0",
             "Referer": "http://stackoverflow.com/q/7937855"})
tree = etree.parse(urllib2.urlopen(request))
rev_data = tree.findtext('.//rev')

# remove everything from the first "{{" to matching "}}"
prefix, sep, rest = rev_data.partition("{{")
if sep: # found the first "{{"
    depth = 1
    prevc = None
    for i, c in enumerate(rest):
        if c == "{" and  prevc == c:  # found "{{"
            depth += 1
            prevc = None # match "{{{ " only once
        elif c == "}" and prevc == c: # found "}}"
            depth -= 1
            if depth == 0: # found matching "}}"
                rev_data = prefix + rest[i+1:] # after matching "}}"
                break
            prevc = None # match "}}} " only once
        else:
            prevc = c
print rev_data
</snippet></ROW><ROW><id>7938566</id><snippet>'''Papori''' ({{lang-as|'''পাপৰী'''}}) is an [[Assamese
language]] feature film directed by [[Jahnu Barua]]. The film
stars Gopi Desai, [[Biju Phukan]], Sushil Goswami, Chetana Das
and Dulal Roy. The film was released in 1986.&lt;ref name="ab"&gt;{{cite
web|url=http://www.chaosmag.in/barua.html|title=Papori – 1986 –
Assamese film|publisher=Chaosmag|accessdate=4 February
2010}}&lt;/ref&gt;
</snippet></ROW><ROW><id>7938790</id><snippet>threading.Condition</snippet></ROW><ROW><id>7938790</id><snippet>all threads have finished work or time out exceeded</snippet></ROW><ROW><id>7938790</id><snippet>import threading
import time
import logging


logging.basicConfig(
    format='%(threadName)s:%(message)s',
    level=logging.DEBUG,
)


NUM_OF_THREADS = 10
TIMEOUT = 5


def sleeping_thread(delay, cond):
    logging.debug("Hi, I'm going to delay by %d sec." % delay)
    time.sleep(delay)
    logging.debug("I was sleeping for %d sec." % delay)
    cond.acquire()
    logging.debug("Calling notify().")
    cond.notify()
    cond.release()


def create_sleeping_thread(delay, cond):
    return threading.Thread(target=sleeping_thread,
                            args=(delay, cond))


if __name__ == '__main__':
    cond = threading.Condition(threading.Lock())
    cond.acquire()

    working_counter = NUM_OF_THREADS
    for i in xrange(NUM_OF_THREADS):
        t = create_sleeping_thread(i, cond)
        t.start()

    start_time = time.time()
    while working_counter &gt; 0 and (time.time() - start_time &lt; TIMEOUT):
        cond.wait()
        working_counter -= 1
        logging.debug('%d workers still working', working_counter)
    cond.release()
    logging.debug('Finish waiting for threads (%d workers still working)',
                 working_counter)
</snippet></ROW><ROW><id>7939862</id><snippet>import re

lines = [
    "CAT One",
    "DOG SILVER FOX Two",
    " KING KONG ",
    "P'OT THEN Mark First",
    "FOO-BAR Second FISH",
    "horsE YELLOW thirD BLUE",
    ]

for line in lines:
    print re.findall(r'\b[A-Z]+(?:\W*[A-Z]+)*\b', line)
</snippet></ROW><ROW><id>7939862</id><snippet>['CAT']
['DOG SILVER FOX']
['KING KONG']
["P'OT THEN"]
['FOO-BAR', 'FISH']
['YELLOW', 'BLUE']
</snippet></ROW><ROW><id>7939862</id><snippet>\b[A-Z]+</snippet></ROW><ROW><id>7939862</id><snippet>\W*[A-Z]+</snippet></ROW><ROW><id>7939862</id><snippet>(?:\W*[A-Z]+)*\b</snippet></ROW><ROW><id>7939970</id><snippet>def link_emit(self, node):
    target = node.content
    if node.children:
        inside = self.emit_children(node)
    else:
        inside = self.html_escape(target)

    return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (
        self.attr_escape(target), inside)
</snippet></ROW><ROW><id>7939970</id><snippet>&gt;&gt;&gt; import creole
&gt;&gt;&gt; from creole.creole2html import emitter
&gt;&gt;&gt; def new_emitter(self, node):
...    return 'blah'
&gt;&gt;&gt; emitter.HtmlEmitter.link_emit = new_emitter
&gt;&gt;&gt; creole.creole2html(u"[[link]]")
u'&lt;p&gt;blah&lt;/p&gt;'
</snippet></ROW><ROW><id>7940090</id><snippet>print</snippet></ROW><ROW><id>7940090</id><snippet>dict</snippet></ROW><ROW><id>7940090</id><snippet>list</snippet></ROW><ROW><id>7940090</id><snippet>tuple</snippet></ROW><ROW><id>7940090</id><snippet>repr</snippet></ROW><ROW><id>7940090</id><snippet>str</snippet></ROW><ROW><id>7940090</id><snippet>print</snippet></ROW><ROW><id>7940090</id><snippet>mydict = dict(((u'520775', [[u'Kategori:2. divisjon fotball for herrer 2008']]),
(u'754686', [[u'Kategori:Debutalbum', u'Kategori:Musikkalbum fra 1990', 
              u'Kategori:Tre Sm\xe5 Kinesere-album']]),
(u'381191', [[u'Kategori:Serierundene i Adeccoligaen 2007']]),
(u'972597', [[u'Kategori:Tippeligaen 2011']]),
(u'263001', [[u'Kategori:Musikkalbum fra 2003']]),
(u'23037', [[u'Kategori:Luftforsvaret']]),
(u'640060', [[u'Kategori:Deltagermedaljen', u'Kategori:F\xf8dsler i 1923', 
              u'Kategori:Norske folkemusikere', 
              u'Kategori:Norske trekkspillere', u'Kategori:Paul Harris Fellow', 
              u'Kategori:Personer fra Vefsn kommune']])))

for key, value in mydict.iteritems():
    print key,
    for elem in value[0]:
        print elem + ',',
    print
</snippet></ROW><ROW><id>7940290</id><snippet>request.args.getlist(&lt;paramname&gt;)</snippet></ROW><ROW><id>7940395</id><snippet>def openFiles():
    global file1
    global file2
    file1 = open('file1.txt', 'w')
    file2 = open('file2.txt', 'w')

def writeFiles():
    file1.write("hello")

openFiles()
writeFiles()
</snippet></ROW><ROW><id>7940395</id><snippet>class FileOperations:
    def open_files(self):
        self.file1 = open('file1.txt', 'w')
        self.file2 = open('file2.txt', 'w')

    def write_to_files(self):
        self.file1.write("hello")
</snippet></ROW><ROW><id>7940395</id><snippet>&gt;&gt;&gt; fileHandler = FileOperations()
&gt;&gt;&gt; fileHandler.open_files()
&gt;&gt;&gt; fileHandler.write_files()
</snippet></ROW><ROW><id>7940581</id><snippet>self</snippet></ROW><ROW><id>7940581</id><snippet>self</snippet></ROW><ROW><id>7940581</id><snippet>self</snippet></ROW><ROW><id>7940581</id><snippet>self.o</snippet></ROW><ROW><id>7940581</id><snippet>A</snippet></ROW><ROW><id>7940581</id><snippet>Wrapper</snippet></ROW><ROW><id>7940581</id><snippet>__slots__</snippet></ROW><ROW><id>7940581</id><snippet>self.__class__ = self.o.__class__
self.__dict__ = self.o.__dict__
</snippet></ROW><ROW><id>7940581</id><snippet>is</snippet></ROW><ROW><id>7940581</id><snippet>False</snippet></ROW><ROW><id>7940671</id><snippet>writer.writerows(reader)
</snippet></ROW><ROW><id>7940671</id><snippet>for row in reader:
    writer.writerow(row)
</snippet></ROW><ROW><id>7940790</id><snippet>easy_install django</snippet></ROW><ROW><id>7940790</id><snippet>easy_install pip</snippet></ROW><ROW><id>7940790</id><snippet>pip install django</snippet></ROW><ROW><id>7940870</id><snippet>x = rand(1, 1000000)*7*pi;
y = rand(1, 1000000);
i = sin(x).* cos(x) &gt;y;
Area3 = (sum(i) / 10000000)*7*pi
</snippet></ROW><ROW><id>7940870</id><snippet>0.3511</snippet></ROW><ROW><id>7940870</id><snippet>import random,math
density=int(1e6)
x = [random.uniform(0,1)*7*math.pi for _ in range(density)]
y = [random.uniform(0,1) for _ in range(density)]
i = [math.sin(xx)*math.cos(xx) &gt; yy for (xx,yy) in zip(x,y)]

print sum(i)/(float(density)*10.0)*7*math.pi
</snippet></ROW><ROW><id>7940870</id><snippet>0.347935156296</snippet></ROW><ROW><id>7940870</id><snippet>import numpy as np
x = np.random.random(1e6) * 7 * np.pi
y = np.random.random(x.size)
i = np.sin(x) * np.cos(x) &gt; y
print 7 * np.pi * i.sum() / (10 * x.size)
</snippet></ROW><ROW><id>7940870</id><snippet>0.350475133957</snippet></ROW><ROW><id>7940875</id><snippet>os.system(
             "uniq -u %s &gt; %s"
         ) % ( # The % and this paren should be inside the call to os.system
                 str(curfile), 
                 str(curfile[:-4] + ".uniq")
               # you're missing a close paren here
</snippet></ROW><ROW><id>7940875</id><snippet>os.system(
             "uniq -u %s &gt; %s" % (
                                     str(curfile), 
                                     str(curfile[:-4] + ".uniq")
                                 )
         )
</snippet></ROW><ROW><id>7940875</id><snippet>os.system</snippet></ROW><ROW><id>7940875</id><snippet>os.system</snippet></ROW><ROW><id>7940875</id><snippet>%</snippet></ROW><ROW><id>7940875</id><snippet>int</snippet></ROW><ROW><id>7940875</id><snippet>uniq</snippet></ROW><ROW><id>7941022</id><snippet>if letter != text[-1]: 
</snippet></ROW><ROW><id>7941022</id><snippet>for i, letter in enumerate(text):
    #stuff
    if i &lt; len(text) - 1:
        sys.stdout.write(', ')
</snippet></ROW><ROW><id>7941022</id><snippet>print u', '.join([str(value) for value in unicode_values])
</snippet></ROW><ROW><id>7941022</id><snippet>nargs</snippet></ROW><ROW><id>7941022</id><snippet>'+'</snippet></ROW><ROW><id>7941022</id><snippet>' '.join(args)</snippet></ROW><ROW><id>7941183</id><snippet>import subprocess
import os          
subprocess.call([os.environ.get('SHELL', '/bin/sh'), '-i'])
</snippet></ROW><ROW><id>7941183</id><snippet>import os
import subprocess

subprocess.call([os.environ.get('SHELL', '/bin/sh') +
    ' -i &lt; /dev/tty &gt; /dev/tty 2&gt;&amp;1'], shell=True)
</snippet></ROW><ROW><id>7941245</id><snippet>DecorationRole</snippet></ROW><ROW><id>7941245</id><snippet>class IconModel(QSqlTableModel):
    def data(self, index, role=Qt.DisplayRole):
        if index.column() == FILENAME_COLUMN_INDEX:
             if role == Qt.DecorationRole:
                  filename = super(IconModel, self).data(index, Qt.DisplayRole)
                  return icon_for_filename(filename)
             elif role == Qt.DisplayRole:
                  return ''
        # Other columns/roles:
        return super(IconModel, self).data(index, role)
</snippet></ROW><ROW><id>7941285</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'\.\.+', '.', 'A..a.b.c')
'A.a.b.c'
</snippet></ROW><ROW><id>7941285</id><snippet>&gt;&gt;&gt; re.sub(r'\.+', '.', 'A..a.b.c')
'A.a.b.c'
</snippet></ROW><ROW><id>7941285</id><snippet>python -mtimeit -s"import re;subber=re.compile(r'\.+').sub;s=1000*'a.'" "subber('.',s)"
1000 loops, best of 3: 212 usec per loop

python -mtimeit -s"import re;subber=re.compile(r'\.\.+').sub;s=1000*'a.'" "subber('.',s)"
10000 loops, best of 3: 23.2 usec per loop
</snippet></ROW><ROW><id>7941492</id><snippet># encoding: UTF-8</snippet></ROW><ROW><id>7941492</id><snippet>Create Database DB_NAME CHARACTER SET = UTF8</snippet></ROW><ROW><id>7941492</id><snippet>row['name']</snippet></ROW><ROW><id>7941492</id><snippet>name = row['name'].encode('utf8')</snippet></ROW><ROW><id>7941594</id><snippet>import itertools
import numpy as np
import matplotlib.pyplot as plt

def main():
    np.random.seed(1977)
    numvars, numdata = 4, 10
    data = 10 * np.random.random((numvars, numdata))
    fig = scatterplot_matrix(data, ['mpg', 'disp', 'drat', 'wt'],
            linestyle='none', marker='o', color='black', mfc='none')
    fig.suptitle('Simple Scatterplot Matrix')
    plt.show()

def scatterplot_matrix(data, names, **kwargs):
    """Plots a scatterplot matrix of subplots.  Each row of "data" is plotted
    against other rows, resulting in a nrows by nrows grid of subplots with the
    diagonal subplots labeled with "names".  Additional keyword arguments are
    passed on to matplotlib's "plot" command. Returns the matplotlib figure
    object containg the subplot grid."""
    numvars, numdata = data.shape
    fig, axes = plt.subplots(nrows=numvars, ncols=numvars, figsize=(8,8))
    fig.subplots_adjust(hspace=0.05, wspace=0.05)

    for ax in axes.flat:
        # Hide all ticks and labels
        ax.xaxis.set_visible(False)
        ax.yaxis.set_visible(False)

        # Set up ticks only on one side for the "edge" subplots...
        if ax.is_first_col():
            ax.yaxis.set_ticks_position('left')
        if ax.is_last_col():
            ax.yaxis.set_ticks_position('right')
        if ax.is_first_row():
            ax.xaxis.set_ticks_position('top')
        if ax.is_last_row():
            ax.xaxis.set_ticks_position('bottom')

    # Plot the data.
    for i, j in zip(*np.triu_indices_from(axes, k=1)):
        for x, y in [(i,j), (j,i)]:
            axes[x,y].plot(data[x], data[y], **kwargs)

    # Label the diagonal subplots...
    for i, label in enumerate(names):
        axes[i,i].annotate(label, (0.5, 0.5), xycoords='axes fraction',
                ha='center', va='center')

    # Turn on the proper x or y axes ticks.
    for i, j in zip(range(numvars), itertools.cycle((-1, 0))):
        axes[j,i].xaxis.set_visible(True)
        axes[i,j].yaxis.set_visible(True)

    return fig

main()
</snippet></ROW><ROW><id>7941700</id><snippet>class</snippet></ROW><ROW><id>7941700</id><snippet>class Foo(object):
    print "bar"

    def __init__(self):
        print "baz"
</snippet></ROW><ROW><id>7941700</id><snippet>bar</snippet></ROW><ROW><id>7941700</id><snippet>__new__</snippet></ROW><ROW><id>7941700</id><snippet>class MyMeta(type):
    def __new__(mcs, name, bases, kwargs):
        print "I'm the metaclass, just checking in."
        return type.__new__(mcs, name, bases, kwargs)


class Foo(object):
    __metaclass__ = MyMeta

    print "I'm the Foo class"
</snippet></ROW><ROW><id>7941700</id><snippet>I'm the Foo class
I'm the metaclass, just checking in.
</snippet></ROW><ROW><id>7941808</id><snippet>inspect</snippet></ROW><ROW><id>7941808</id><snippet>import inspect

class Tester( object ):
    def method( self ):
        print 'I am a Tester'

print inspect.getsource(Tester)
</snippet></ROW><ROW><id>7941808</id><snippet>class Tester( object ):
    def method( self ):
        print 'I am a Tester'
</snippet></ROW><ROW><id>7941923</id><snippet>var channel;
var socket;
var handler = {
  onmessage: function(evt) {
    // evt.data will be what your server sends in channel.send_message
  }
};
var xhr = new XMLHttpRequest();
xhr.onReadyStateChange = function() {
  // error handling and whatnot elided
  if (xhr.readyState == 4 and xhr.status == 200) {
    // We got a response from the server. The responseText is
    // a channel token so we can listen for a "verified" message.
    token = xhr.responseText;
    channel = new goog.appengine.Channel(token);
    socket = channel.open(handler);
  }
};
xhr.open("POST", "http://ting-1.appspot.com/authsender", true);
xhr.send(formData);
</snippet></ROW><ROW><id>7941923</id><snippet>class AuthSenderHandler(webapp.RequestHandler):
  def post(self):
    # get whatever data is in the form to send an email.
    # let's say that user_id is a field we extracted either from a cookie or from
    # the POST parameters themselves.
    link = "http://your.server.com/authHandler?user_id=%s" % user_id
    message = mail.EmailMessage()
    message.body = """some stuff %s""" % link
    # fill in other message fields, then send it.

    # now we'll create a channel token using the user_id and return 
    # it to the client.
    token = channel.create_channel(user_id)
    self.response.out.write(token)
</snippet></ROW><ROW><id>7941923</id><snippet>authHandler</snippet></ROW><ROW><id>7941923</id><snippet>user_id</snippet></ROW><ROW><id>7941923</id><snippet>class AuthHandler(webapp.RequestHandler):
  def get(self):
    user_id = self.request.get("user_id")
    # send a message indicating the user received the email and
    # verified to our client page. You may want to send other data.
    channel.send_message(user_id, "authorized")
    # probably want to show a nice "you've been authorized" page or something
</snippet></ROW><ROW><id>7941940</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>7941940</id><snippet>lxml.etree</snippet></ROW><ROW><id>7941940</id><snippet>import xml.etree.ElementTree as et
import xml.etree.cElementTree as et
import lxml.etree as et
...
tree = et.fromstring(xmltext)
...
</snippet></ROW><ROW><id>7941940</id><snippet>lxml</snippet></ROW><ROW><id>7942080</id><snippet>class Member(Model):
    inviter = models.ForeignKey(
        'self',
        related_name="invited_set"
    )
</snippet></ROW><ROW><id>7942080</id><snippet>Member.objects.get(id__exact=5).inviter
</snippet></ROW><ROW><id>7942080</id><snippet>Member.objects.get(id__exact=5).invited_set
</snippet></ROW><ROW><id>7942111</id><snippet>RuntimeError: maximum recursion depth exceeded</snippet></ROW><ROW><id>7942111</id><snippet>toggled</snippet></ROW><ROW><id>7942111</id><snippet>on_btn1_tgl_clicked()</snippet></ROW><ROW><id>7942111</id><snippet>gtk.ToggleButton.set_active()</snippet></ROW><ROW><id>7942111</id><snippet>toggled</snippet></ROW><ROW><id>7942111</id><snippet>on_btn2_tg1_clicked()</snippet></ROW><ROW><id>7942111</id><snippet>toggled</snippet></ROW><ROW><id>7942113</id><snippet>def findFullURL(d, e, s):
    a = s[d]
    if a != "/":
        #Subtract from d to move back another letter
        d = d - 1
        return findFullURL(d, e, s)   # &lt;&lt;&lt;&lt;&lt;&lt;&lt; here
    else:
        fullURL = "http://download.ted.com/talks/" + s[(d+1):e] + "-480p.mp4"
        #print(fullURL)
        return fullURL
</snippet></ROW><ROW><id>7942113</id><snippet>rfind</snippet></ROW><ROW><id>7942113</id><snippet>def findFullURL(d, e, s):
    d = s.rfind('/', 0, d + 1)
    # You probably want to handle the condition where '/' is not found here.
    return "http://download.ted.com/talks/" + s[(d+1):e] + "-480p.mp4"
</snippet></ROW><ROW><id>7942264</id><snippet>import cv, cv2
import numpy as np

img1 = cv2.imread('myimage.jpg', cv2.CV_LOAD_IMAGE_GRAYSCALE)
h, w = img1.shape[:2]
vis0 = np.zeros((h,w), np.float32)
vis0[:h, :w] = img1
vis1 = cv2.dct(vis0)
img2 = cv.CreateMat(vis1.shape[0], vis1.shape[1], cv.CV_32FC3)
cv.CvtColor(cv.fromarray(vis1), img2, cv.CV_GRAY2BGR)

cv.SaveImage('output.jpg', img2)
</snippet></ROW><ROW><id>7942344</id><snippet>lsof</snippet></ROW><ROW><id>7942344</id><snippet>self.parent_conn.close()</snippet></ROW><ROW><id>7942344</id><snippet>self.child_conn.recv_bytes()</snippet></ROW><ROW><id>7942344</id><snippet>read()</snippet></ROW><ROW><id>7942344</id><snippet>EOF</snippet></ROW><ROW><id>7942344</id><snippet>EOFError</snippet></ROW><ROW><id>7942485</id><snippet>print 'generating test data'    
num_sets = 100000
set_size = 40
elements = range(500)
U = set(elements)
R = U
S = []
for i in range(num_sets):
    random.shuffle(elements)
    S.append(set(elements[:set_size]))
w = [random.randint(1,100) for i in xrange(100)]

C = []
costs = []
</snippet></ROW><ROW><id>7942485</id><snippet>         8200209 function calls in 14.391 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   14.391   14.391 &lt;string&gt;:1(&lt;module&gt;)
       41    4.802    0.117   14.389    0.351 test.py:23(findMin)
        1    0.001    0.001   14.391   14.391 test.py:40(func)
  4100042    0.428    0.000    0.428    0.000 {len}
       82    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
       41    0.001    0.000    0.001    0.000 {method 'difference' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
  4100000    9.160    0.000    9.160    0.000 {method 'intersection' of 'set' objects}
</snippet></ROW><ROW><id>7942530</id><snippet>&gt;&gt;&gt; integrate(f,(x,0,1))
    pi**(1/2)*erf(1)/2
</snippet></ROW><ROW><id>7942571</id><snippet>from sqlalchemy import or_
filter(or_(User.name == 'ed', User.name == 'wendy'))
</snippet></ROW><ROW><id>7942617</id><snippet>\</snippet></ROW><ROW><id>7942617</id><snippet>my_var = (somethinglikethis
          .where(we=do_things)
          .where(we=domore)
          .where(we=everdomore))
</snippet></ROW><ROW><id>7942617</id><snippet>[]</snippet></ROW><ROW><id>7942617</id><snippet>{}</snippet></ROW><ROW><id>7942617</id><snippet>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
            color == 'red' and emphasis == 'strong' or
            highlight &gt; 100):
            raise ValueError("sorry, you lose")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError("I don't think so -- values are %s, %s" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
</snippet></ROW><ROW><id>7942685</id><snippet>__getitem__</snippet></ROW><ROW><id>7942685</id><snippet>class Test(object):     
    def __getitem__(self, arg):
        return str(arg)*3

test = Test()

print test[0]
print test['kitten']
</snippet></ROW><ROW><id>7942715</id><snippet>nreceive = True#nreceive = Not Received
ticks = 0
f = None
while nreceive and ticks &lt; 101:#try to get the info 100 times or until it's received
    ticks+=1
    try:
        f = mysocket.makefile('rb')
        if not f == None:
            nreceive = False
    except:
        pass
data = f.read(1024)
</snippet></ROW><ROW><id>7942747</id><snippet>reactor.callFromThread()</snippet></ROW><ROW><id>7942747</id><snippet>threads.blockingCallFromThread()</snippet></ROW><ROW><id>7942747</id><snippet>twisted.words</snippet></ROW><ROW><id>7942747</id><snippet>wsgi.multithread</snippet></ROW><ROW><id>7942872</id><snippet>import numpy as np
import pylab as pl
from scipy.spatial import KDTree, cKDTree

import pycdf
from pyhdf.SD import SD,SDC

class SCB:
    def __init__(self, datadir="/projData/jplSCB/ROMS/",ijarea=[],
             lat1=None,lat2=None,lon1=None,lon2=None):
        self.i1 = 0     #
        self.i2 = 111   # Size of the grid.
        self.j1 = 0     # 
        self.j2 = 211   #
        self.datadir = datadir
        g = SD(datadir + '/scb_das_grid.nc', SDC.READ)
        self.lat = g.select('lat')[:]
        self.lon = g.select('lon')[:]-360
        self.llon,self.llat = np.meshgrid(self.lon,self.lat)

    def add_ij(self):
        i1=self.i1; i2=self.i2;j1=self.j1; j2=self.j2
        self.jmat,self.imat = np.meshgrid(np.arange(self.j2-self.j1),
                                          np.arange(self.i2-self.i1))
        self.ijvec = np.vstack((np.ravel(self.imat),np.ravel(self.jmat))).T

    def add_kd(self):
        self.kd = cKDTree(list(np.vstack((np.ravel(self.llon),
                                          np.ravel(self.llat))).T))
    def ll2ij(self,lon,lat,nei=1):
        if not hasattr(self,'kd'):
            self.add_kd()
            self.add_ij()
        dist,ij = self.kd.query(list(np.vstack((lon,lat)).T),nei)
        return self.ijvec[ij][:,0],self.ijvec[ij][:,1]
</snippet></ROW><ROW><id>7942872</id><snippet>---Lon---       ---Lat---    ---Data---   
12 13 14        30 30 30     5  8  3 
12 13 14        29 29 29     6  9  7
12 13 14        28 28 28     1  2  4
</snippet></ROW><ROW><id>7942872</id><snippet>obs1: 12.2; 29.1
obs2: 13.4; 28.7
</snippet></ROW><ROW><id>7942872</id><snippet>12 28
13 28
14 28
12 29
13 29
14 29
12 30
13 30 
14 30 
</snippet></ROW><ROW><id>7942872</id><snippet>0  0
1  0
2  0
0  1
1  1
2  1
0  2
1  2
2  2
</snippet></ROW><ROW><id>7942872</id><snippet>---Obs---         Grid
12.2; 29.1   -&gt;   i=0, j=1
13.4; 28.7   -&gt;   i=1, j=1
</snippet></ROW><ROW><id>7942872</id><snippet>       5 8 3
vals = 6 9 7
       1 2 4
</snippet></ROW><ROW><id>7942878</id><snippet>class IRC:
    def Connect(self):
        try:
            HOST = sys.argv[1]
            PORT = sys.argv[2]
        except IndexError:
            print "Usage: "+sys.argv[0]+" [server] [port]\n"
            sys.exit(1)
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.s.connect((HOST, PORT))

class Pong(threading.Thread):
    def __init__(self,ircclass):
        self.myirc = ircclass
    def Pong(self):
        while 1:
            self.myirc.s.send("Test")

gIRC = IRC
gIRC.connect()
myPong = Pong(gIRC)
</snippet></ROW><ROW><id>7942912</id><snippet>findall</snippet></ROW><ROW><id>7942912</id><snippet>import xml.etree.ElementTree as et

xmltext = """
&lt;root&gt;
    &lt;number&gt;1&lt;/number&gt;
    &lt;number&gt;2&lt;/number&gt;
    &lt;number&gt;3&lt;/number&gt;
    &lt;number&gt;4&lt;/number&gt;
&lt;/root&gt;
"""

tree = et.fromstring(xmltext)

for number in tree.findall('number'):
    print number.text
</snippet></ROW><ROW><id>7942912</id><snippet>from __future__ import with_statement
import xml.etree.ElementTree as et

with open('xmldata.xml', 'r') as f:
    xmldata = f.read()

tree = et.fromstring(xmldata)

for revision in tree.findall('.//{http://www.mediawiki.org/xml/export-0.5/}revision'):
    print revision.find('{http://www.mediawiki.org/xml/export-0.5/}text').text[0:10].encode('utf8')
</snippet></ROW><ROW><id>7942981</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>7942981</id><snippet>.json</snippet></ROW><ROW><id>7942981</id><snippet>recursive-include project/ *.json
</snippet></ROW><ROW><id>7943077</id><snippet>copy.py</snippet></ROW><ROW><id>7943077</id><snippet>copy</snippet></ROW><ROW><id>7943077</id><snippet>copy.pyc</snippet></ROW><ROW><id>7943143</id><snippet>QWidget</snippet></ROW><ROW><id>7943143</id><snippet>QWidget</snippet></ROW><ROW><id>7943143</id><snippet>QWidget</snippet></ROW><ROW><id>7943143</id><snippet>QWidget</snippet></ROW><ROW><id>7943143</id><snippet>styleSheet</snippet></ROW><ROW><id>7943143</id><snippet>background-color: white</snippet></ROW><ROW><id>7943143</id><snippet>layoutTopMargin</snippet></ROW><ROW><id>7943143</id><snippet>layoutLeftMargin</snippet></ROW><ROW><id>7943474</id><snippet>&gt;&gt;&gt; re.search('tune[ -]yards', '58 tune yards of music')
&lt;_sre.SRE_Match object at 0x1ad68b8&gt;
&gt;&gt;&gt; re.search('tune[ -]yards', '35 tune-yards of trombone')
&lt;_sre.SRE_Match object at 0x1ad6988&gt;
</snippet></ROW><ROW><id>7943474</id><snippet>None</snippet></ROW><ROW><id>7943474</id><snippet>if</snippet></ROW><ROW><id>7943768</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>7943768</id><snippet>http.server</snippet></ROW><ROW><id>7943768</id><snippet>python3 -m http.server</snippet></ROW><ROW><id>7943998</id><snippet>from celery.bin.camqadm import camqadm
camqadm('queue.purge', queue_name_as_string)
</snippet></ROW><ROW><id>7943998</id><snippet>kill_command =  "ps auxww | grep 'celeryd -n twitter_save' | awk '{print $2}' | xargs kill -9"
subprocess.call(kill_command, shell=True)

camqadm('queue.purge', 'twitter_save')
rerun_command = "/home/samos/Software/virt_env/twittersyncv1/bin/python %s/manage.py celeryd -n twitter_save -l info -Q twitter_save" % settings.PROJECT_ROOT

os.popen(rerun_command+' &amp;')
send_task("socialreport.tasks.twitter_save")
</snippet></ROW><ROW><id>7944072</id><snippet>easy_install webob==1.1.1
</snippet></ROW><ROW><id>7944072</id><snippet>easy_install -i http://www.turbogears.org/2.1/downloads/current/index tg.devtools 
</snippet></ROW><ROW><id>7944142</id><snippet>/__init__.py
/crawl.py
/crawl/__init__.py
/crawl/john.py
/tests/__init__.py
/tests/test_john.py
</snippet></ROW><ROW><id>7944142</id><snippet>from crawl.john import John
</snippet></ROW><ROW><id>7944142</id><snippet>from ..crawl.john import John
</snippet></ROW><ROW><id>7944300</id><snippet>2to3</snippet></ROW><ROW><id>7944300</id><snippet>raw_data</snippet></ROW><ROW><id>7944300</id><snippet>decode</snippet></ROW><ROW><id>7944300</id><snippet>json.loads</snippet></ROW><ROW><id>7944300</id><snippet>raw_data = raw_data.decode('utf-8')
</snippet></ROW><ROW><id>7944370</id><snippet>tiles</snippet></ROW><ROW><id>7944370</id><snippet>tiles</snippet></ROW><ROW><id>7944370</id><snippet>tiles[5]</snippet></ROW><ROW><id>7944370</id><snippet>Tile</snippet></ROW><ROW><id>7944370</id><snippet>tiles[5][5]</snippet></ROW><ROW><id>7944370</id><snippet>Tile</snippet></ROW><ROW><id>7944370</id><snippet>tiles.index(tile)</snippet></ROW><ROW><id>7944370</id><snippet>tiles[5].index(tile)</snippet></ROW><ROW><id>7944370</id><snippet>&gt;&gt;&gt; l = [[1,2], [3,4]]
&gt;&gt;&gt; l.index(4)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: 4 is not in list
&gt;&gt;&gt; l[1].index(4)
1
</snippet></ROW><ROW><id>7944502</id><snippet>if len(set(list_o_emails)) == len(list_o_emails):
    # all are different
else:
    # you had a duplicate
    raise forms.ValidationError # from your comment
</snippet></ROW><ROW><id>7944502</id><snippet>set</snippet></ROW><ROW><id>7944575</id><snippet>python3</snippet></ROW><ROW><id>7944575</id><snippet>python3</snippet></ROW><ROW><id>7944711</id><snippet>Range</snippet></ROW><ROW><id>7944711</id><snippet>import urllib2
req = urllib2.Request('http://www.python.org/')
#
# Here we request that bytes 18000--19000 be downloaded.
# The range is inclusive, and starts at 0.
#
req.headers['Range']='bytes=%s-%s' % (18000, 19000)
f = urllib2.urlopen(req)
# This shows you the actual bytes that have been downloaded.
content_range=f.headers.get('Content-Range')
print(content_range)
# bytes 18000-18030/18031
</snippet></ROW><ROW><id>7944912</id><snippet>4</snippet></ROW><ROW><id>7944912</id><snippet>sl = list(set(ls))
sl += [4] * (ls.count(4) - 1)
</snippet></ROW><ROW><id>7944912</id><snippet>4</snippet></ROW><ROW><id>7944912</id><snippet>s = set()
sl = []
for elem in ls:
    if elem == 4 or elem not in s:
        sl.append(elem)
        s.add(elem)
</snippet></ROW><ROW><id>7944912</id><snippet>set</snippet></ROW><ROW><id>7944912</id><snippet>s = set()
sl = [s.add(elem) or elem for elem in ls if elem == 4 or elem not in s]
</snippet></ROW><ROW><id>7945023</id><snippet># coding: utf-8</snippet></ROW><ROW><id>7945023</id><snippet>unicode()</snippet></ROW><ROW><id>7945023</id><snippet>str()</snippet></ROW><ROW><id>7945156</id><snippet>Session.flush()</snippet></ROW><ROW><id>7945156</id><snippet>Session.commit()</snippet></ROW><ROW><id>7945156</id><snippet>commit()</snippet></ROW><ROW><id>7945270</id><snippet>def matches(s, pattern):
    d = {}
    return all(cp == "." or d.setdefault(cp, cs) == cs
               for cs, cp in zip(s, pattern))

a = ["resign", "resins", "redyed", "resist", "reeded"]
print [s for s in a if matches(s, ".01.01")]
print [s for s in a if matches(s, ".00.0.")]
</snippet></ROW><ROW><id>7945270</id><snippet>['redyed']
['reeded']
</snippet></ROW><ROW><id>7945327</id><snippet>writev</snippet></ROW><ROW><id>7945445</id><snippet>javascript_catalog</snippet></ROW><ROW><id>7945507</id><snippet>from re import sub

print sub("[a-z]", '.', "hello.")
</snippet></ROW><ROW><id>7945507</id><snippet>str.replace</snippet></ROW><ROW><id>7945507</id><snippet>abcdefghijklmnopqrstuvwxyz</snippet></ROW><ROW><id>7945507</id><snippet>.</snippet></ROW><ROW><id>7945774</id><snippet>def __init__(self,real=0,imag=0):
    ...
</snippet></ROW><ROW><id>7945774</id><snippet>a.addition()</snippet></ROW><ROW><id>7945774</id><snippet>a</snippet></ROW><ROW><id>7945774</id><snippet>a.addition(b)</snippet></ROW><ROW><id>7945774</id><snippet>addition()</snippet></ROW><ROW><id>7945774</id><snippet>def addition(self,complex):
    return mycomplex(real+complex.real,imag+complex.imag)
</snippet></ROW><ROW><id>7945905</id><snippet>permutations</snippet></ROW><ROW><id>7945905</id><snippet>permutations</snippet></ROW><ROW><id>7945952</id><snippet>   if (handler.script and (handler.script.endswith('.py') or 
       '/' in handler.script)):
       raise appinfo_errors.ThreadsafeWithCgiHandler(
                    'threadsafe cannot be enabled with CGI handler: %s' %
                    handler.script)
</snippet></ROW><ROW><id>7945952</id><snippet>application.py</snippet></ROW><ROW><id>7945960</id><snippet>class PaymentForm(forms.Form):
    def __init__(self, exp = None, *args, **kwargs):
        super(PaymentForm, self).__init__(*args, **kwargs)
        if exp:
            self.fields['expiration'].initial = exp
</snippet></ROW><ROW><id>7945960</id><snippet>form = PaymentForm(exp=...)
</snippet></ROW><ROW><id>7946201</id><snippet>import commands
from easygui import *

output = commands.getstatusoutput("command")
msgbox(msg=output[1])
</snippet></ROW><ROW><id>7946375</id><snippet>staticfiles</snippet></ROW><ROW><id>7946375</id><snippet>DEBUG = False</snippet></ROW><ROW><id>7946375</id><snippet>static</snippet></ROW><ROW><id>7946375</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>7946375</id><snippet>settings.py</snippet></ROW><ROW><id>7946375</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>7946375</id><snippet>collectstatic</snippet></ROW><ROW><id>7946375</id><snippet>python manage.py collectstatic
</snippet></ROW><ROW><id>7946429</id><snippet>with open('myFile.txt') as fh:
  for line1 in fh:
    line2 = next(fh)

    # Code here can use line1 and line2.
</snippet></ROW><ROW><id>7946429</id><snippet>StopIteration</snippet></ROW><ROW><id>7946429</id><snippet>next(fh)</snippet></ROW><ROW><id>7946429</id><snippet>izip_longest</snippet></ROW><ROW><id>7946632</id><snippet>__init__</snippet></ROW><ROW><id>7946632</id><snippet>class Struct(Structure):
    _fields_ = [("a", c_int), ("b", c_int)]

    def __init__(self, a, b=2):
        super(Struct, self).__init__(a, b)

    def print_values(self):
        print self.a, self.b
</snippet></ROW><ROW><id>7946825</id><snippet>[val for pair in zip(l1, l2) for val in pair]
</snippet></ROW><ROW><id>7946825</id><snippet>l1</snippet></ROW><ROW><id>7946825</id><snippet>l2</snippet></ROW><ROW><id>7947127</id><snippet>    def read_in_chunks(file_object, chunk_size=1024):
        """Lazy function (generator) to read a file piece by piece.
        Default chunk size: 1k."""
        while True:
            data = file_object.read(chunk_size)
            if not data:
                break
            yield data


    f = open('really_big_file.dat')
    for piece in read_in_chunks(f):
        process_data(piece)
</snippet></ROW><ROW><id>7947208</id><snippet>from random import randint
from time import sleep
from threading import Thread
import sys

class RollAnimation ( Thread ):
    activated = True
    number = None

    def run ( self ):
        while self.activated:
            self.number = randint( 1, 100 )
            sys.stdout.write( '\r{: &gt;3}'.format( self.number ) )
            sys.stdout.flush()
            sleep( 0.05 )

t = RollAnimation()
t.start()

# Waiting for enter
input() # use raw_input() for Python 2.x
t.activated = False

print( 'Final roll result:', t.number )
</snippet></ROW><ROW><id>7947811</id><snippet>import contextlib
import selenium.webdriver as webdriver
import lxml.html as LH
import lxml.html.clean as clean

url="http://www.yahoo.com"
ignore_tags=('script','noscript','style')
with contextlib.closing(webdriver.Firefox()) as browser:
    browser.get(url) # Load page
    content=browser.page_source
    cleaner=clean.Cleaner()
    content=cleaner.clean_html(content)    
    with open('/tmp/source.html','w') as f:
       f.write(content.encode('utf-8'))
    doc=LH.fromstring(content)
    with open('/tmp/result.txt','w') as f:
        for elt in doc.iterdescendants():
            if elt.tag in ignore_tags: continue
            text=elt.text or ''
            tail=elt.tail or ''
            words=' '.join((text,tail)).strip()
            if words:
                words=words.encode('utf-8')
                f.write(words+'\n') 
</snippet></ROW><ROW><id>7948083</id><snippet>AB = [A[i] + B[i] for i in range(len(A))]
</snippet></ROW><ROW><id>7948083</id><snippet>xrange</snippet></ROW><ROW><id>7948083</id><snippet>range</snippet></ROW><ROW><id>7948083</id><snippet>AB = [A[i] + B[i] for i in range(min(len(A), len(B)))]

AB = map(sum, zip(A, B))

AB = [a + b for a, b in zip(A, B)]
</snippet></ROW><ROW><id>7948083</id><snippet>zip</snippet></ROW><ROW><id>7948083</id><snippet>for i in xrange</snippet></ROW><ROW><id>7948083</id><snippet>itertools.izip</snippet></ROW><ROW><id>7948083</id><snippet>import itertools
AB = map(sum, itertools.izip(A, B))
</snippet></ROW><ROW><id>7948083</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>7948083</id><snippet>import itertools
AB = map(sum, itertools.izip_longest(A, B, fillvalue=0))
</snippet></ROW><ROW><id>7948083</id><snippet>import itertools
AB = [a + b for a, b in itertools.izip_longest(A, B, fillvalue=0)]
</snippet></ROW><ROW><id>7948307</id><snippet>def prod(iterable):
    return reduce(operator.mul, iterable, 1)

&gt;&gt;&gt; prod(range(1, 5))
24
</snippet></ROW><ROW><id>7948411</id><snippet>self.response.headers[u'P3P'] = u'CP=HONK'</snippet></ROW><ROW><id>7948488</id><snippet>zip()</snippet></ROW><ROW><id>7948488</id><snippet>final_list = zip(list1, list2, list3)
</snippet></ROW><ROW><id>7948488</id><snippet>final_list</snippet></ROW><ROW><id>7948488</id><snippet>itertools.izip()</snippet></ROW><ROW><id>7948488</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>7948504</id><snippet>import my_module
</snippet></ROW><ROW><id>7948504</id><snippet>from my_package.timing.danger.internets import function_of_love
</snippet></ROW><ROW><id>7948959</id><snippet>list = [str(a[i]) +"+"+ str(b[i]) for i in range(len(a))]</snippet></ROW><ROW><id>7948959</id><snippet>list = [str(a[i]) + str(b[i]) for i in range(len(a))]
</snippet></ROW><ROW><id>7948959</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = ['a','b','c']
&gt;&gt;&gt; list = [str(a[i]) +"+"+ str(b[i]) for i in range(len(a))]
&gt;&gt;&gt; list
['1+a', '2+b', '3+c']
</snippet></ROW><ROW><id>7949030</id><snippet>def countPositive(nums):
    return len(filter(lambda x: x &gt; 0, nums))
</snippet></ROW><ROW><id>7949030</id><snippet>filter</snippet></ROW><ROW><id>7949030</id><snippet>len</snippet></ROW><ROW><id>7949030</id><snippet>$ python -m timeit "l = [-1, 0, 1] * 100; len(filter(lambda x: x &gt; 0, l))"  
  10000 loops, best of 3: 49.9 usec per loop

$ python -m timeit "l = [-1, 0, 1] * 1000; len(filter(lambda x: x &gt; 0, l))"                                                                  
1000 loops, best of 3: 476 usec per loop

$ python -m timeit "l = [-1, 0, 1] * 10000; len(filter(lambda x: x &gt;  0, l))" 
100 loops, best of 3: 4.86 msec per loop
</snippet></ROW><ROW><id>7949030</id><snippet>sum</snippet></ROW><ROW><id>7949030</id><snippet>$ python -m timeit "l = [1, 2, 3] * 100; sum(1 for x in l if x &gt; 0)" 
10000 loops, best of 3: 35.1 usec per loop

$ python -m timeit "l = [1, 2, 3] * 1000; sum(1 for x in l if x &gt; 0)"
1000 loops, best of 3: 336 usec per loop

$ python -m timeit "l = [1, 2, 3] * 10000; sum(1 for x in l if x &gt; 0)"
100 loops, best of 3: 3.4 msec per loop
</snippet></ROW><ROW><id>7949030</id><snippet>sum</snippet></ROW><ROW><id>7949030</id><snippet>len</snippet></ROW><ROW><id>7949030</id><snippet>filter</snippet></ROW><ROW><id>7949061</id><snippet>file.write(str(mylist))
</snippet></ROW><ROW><id>7949061</id><snippet>&gt;&gt;&gt; a= [1,2,3]
&gt;&gt;&gt; b = str(a)
&gt;&gt;&gt; b
'[1, 2, 3]'
&gt;&gt;&gt; f = open("data","w")
&gt;&gt;&gt; f.write(b)
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; 
$ cat data
[1, 2, 3] 
</snippet></ROW><ROW><id>7949185</id><snippet>&gt;&gt;&gt; x = '''\
&lt;channel xmlns:media="http://www.w3.org/TR/html4/"&gt;
  &lt;title&gt;Popular  Photography in the last 1 week&lt;/title&gt;
  &lt;item&gt;
    &lt;title&gt;foo&lt;/title&gt;
    &lt;media:category label="Miscellaneous"&gt;photography/misc&lt;/media:category&gt;
    &lt;media:content url="http://foo.com/1.jpg" height="375" width="500" medium="image"/&gt;
  &lt;/item&gt;
  &lt;item&gt; ... &lt;/item&gt;
&lt;/channel&gt;
'''
&gt;&gt;&gt; node = ElementTree.fromstring(x)
&gt;&gt;&gt; for elem in node.findall('item/{http://www.w3.org/TR/html4/}category'):
        print elem.text


photography/misc
</snippet></ROW><ROW><id>7949193</id><snippet>main()</snippet></ROW><ROW><id>7949193</id><snippet>A</snippet></ROW><ROW><id>7949193</id><snippet>B</snippet></ROW><ROW><id>7949193</id><snippet>C</snippet></ROW><ROW><id>7949193</id><snippet>global</snippet></ROW><ROW><id>7949193</id><snippet>c = 4
print c
def foo():
    c = 3
    print c
foo()
print c
</snippet></ROW><ROW><id>7949193</id><snippet>4
3
4
</snippet></ROW><ROW><id>7949193</id><snippet>c = 4
print c
def foo():
    global c
    c = 3
    print c
foo()
print c
</snippet></ROW><ROW><id>7949193</id><snippet>4
3
3
</snippet></ROW><ROW><id>7949193</id><snippet>c = 3</snippet></ROW><ROW><id>7949193</id><snippet>c</snippet></ROW><ROW><id>7949193</id><snippet>c</snippet></ROW><ROW><id>7949193</id><snippet>global c</snippet></ROW><ROW><id>7949193</id><snippet>c</snippet></ROW><ROW><id>7949333</id><snippet>help()</snippet></ROW><ROW><id>7949454</id><snippet>def countLongestSequence(nums):
        countMax=0
        count=0
        for i in range(0, len(nums)+1):
                if i == len(nums) or nums[i] &lt;= 0:
                        if count &gt; countMax:
                                countMax=count
                        count=0
                else:           
                        count+=1
        return countMax 
</snippet></ROW><ROW><id>7949457</id><snippet>    def get_active_threads(self, user):
        all_threads = MessageRecipient.objects.filter(recipient=user).order_by('-message__timestamp')

        deleted_threads = []
        final_threads = []

        for thread in all_threads:
            if thread.thread not in (deleted_threads or final_threads):
                if thread.status == "deleted":
                    deleted_threads.append(thread.thread)
                else:
                    final_threads.append(thread)

        return final_threads
</snippet></ROW><ROW><id>7949779</id><snippet>for</snippet></ROW><ROW><id>7949779</id><snippet>pdfname = "statementConcentrator"
if (pdfname in open("line56.good").read()):
    print "Found it"

lineNum = 0
for line in open("line56.good").readlines():
    lineNum = lineNum + 1
    if pdfname in line:
        print "#%5d: %s"%(lineNum, line[:-1])
</snippet></ROW><ROW><id>7949779</id><snippet>Found it
#  115:  statementConcentrator=0
</snippet></ROW><ROW><id>7949779</id><snippet>pdfname = "statementConcentrator"
lineNum = 0
count = 0
for line in open("line56.good").readlines():
    lineNum = lineNum + 1
    if pdfname in line:
        print "#%5d: %s"%(lineNum, line[:-1])
        count = count + 1
print "Found on %d line(s)."%(count)
</snippet></ROW><ROW><id>7949939</id><snippet>def unpack48(x):
    x1, x2, x3 = struct.unpack('&lt;HHI', x)
    return x1, x2 | (x3 &lt;&lt; 16)
</snippet></ROW><ROW><id>7950046</id><snippet>dict(one=1, two=2)
dict({'one': 1, 'two': 2})
dict(zip(('one', 'two'), (1, 2)))
dict([['two', 2], ['one', 1]])
</snippet></ROW><ROW><id>7950046</id><snippet>csv</snippet></ROW><ROW><id>7950046</id><snippet>axe99:315 W. 115th Street, Apt. 11B:New York:NY:10027
jab44:23 Rivington Street, Apt. 3R:New York:NY:10002
ap172:19 Boxer Rd.:New York:NY:10005
jb23:115 Karas Dr.:Jersey City:NJ:07127
jb29:119 Xylon Dr.:Jersey City:NJ:07127
ak9:234 Main Street:Philadelphia:PA:08990
</snippet></ROW><ROW><id>7950046</id><snippet>city_dict =  {}
for line in open('ex1.txt'):
    if item.split(':')[3] in city_dict:
        city_dict[item.split(':')[3]] += 1
    else:
        city_dict[item.split(':')[3]] = 1

print (city_dict)
</snippet></ROW><ROW><id>7950046</id><snippet>{'NY': 3, 'NJ': 2, 'PA': 1}</snippet></ROW><ROW><id>7950135</id><snippet>int</snippet></ROW><ROW><id>7950135</id><snippet>chkseq = [int(line) for line in open("sequence.txt")] 
</snippet></ROW><ROW><id>7950135</id><snippet>map</snippet></ROW><ROW><id>7950135</id><snippet>chkseq = map(int, open("sequence.txt"))
</snippet></ROW><ROW><id>7950339</id><snippet>    (X[i,   j],   Y[i,   j]),
    (X[i,   j+1], Y[i,   j+1]),
    (X[i+1, j],   Y[i+1, j]),
    (X[i+1, j+1], Y[i+1, j+1]).
</snippet></ROW><ROW><id>7950535</id><snippet>"Copyright @2003, Billy Moon".match(/copyright\W+\d{4}/i)
</snippet></ROW><ROW><id>7950535</id><snippet>copyright</snippet></ROW><ROW><id>7950535</id><snippet>\W+</snippet></ROW><ROW><id>7950535</id><snippet>\d{4}</snippet></ROW><ROW><id>7950535</id><snippet>i</snippet></ROW><ROW><id>7950764</id><snippet>DBSession</snippet></ROW><ROW><id>7950764</id><snippet>ScopedSession</snippet></ROW><ROW><id>7950764</id><snippet>DBSession()</snippet></ROW><ROW><id>7950807</id><snippet>try:
    # tricky code goes here

except IOError, e:
    # an IOError exception occurred (socket.error is a subclass)
    if e.errno == 101:
        # now we had the error code 101, network unreachable
        do_some_recovery
    else:
        # other exceptions we reraise again
        raise
</snippet></ROW><ROW><id>7951346</id><snippet>[{'key': '\xed\x95\x9c\xea\xb8\x80'}]
</snippet></ROW><ROW><id>7951346</id><snippet>[{"key": "한글"}]</snippet></ROW><ROW><id>7951346</id><snippet>json</snippet></ROW><ROW><id>7951346</id><snippet>print json.dumps(a_list, ensure_ascii=False, encoding=your_source_code_encoding)
</snippet></ROW><ROW><id>7951346</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json

a = "한글" # you should use u"" literals to work with Unicode strings
a_list = []
a_list.append({'key': a})

print json.dumps(a_list, ensure_ascii=False) # "utf-8" encoding is default
</snippet></ROW><ROW><id>7951346</id><snippet>[{"key": "한글"}]
</snippet></ROW><ROW><id>7951538</id><snippet>import tempfile, os

from pyx import *
import Tkinter
import Image, ImageTk

# first we create some pyx graphics
c = canvas.canvas()
c.text(0, 0, "Hello, world!")
c.stroke(path.line(0, 0, 2, 0))

# now we use pipeGS (ghostscript) to create a bitmap graphics
fd, fname = tempfile.mkstemp()
f = os.fdopen(fd, "wb")
f.close()
c.pipeGS(fname, device="pngalpha", resolution=100)
# and load with PIL
i = Image.open(fname)
i.load()
# now we can already remove the temporary file
os.unlink(fname)

# finally we can use this image in Tkinter
root = Tkinter.Tk()
root.geometry('%dx%d' % (i.size[0],i.size[1]))
tkpi = ImageTk.PhotoImage(i)
label_image = Tkinter.Label(root, image=tkpi)
label_image.place(x=0,y=0,width=i.size[0],height=i.size[1])
root.mainloop()
</snippet></ROW><ROW><id>7951975</id><snippet>def udi_to_device(self, udi):
    return self.bus.get_object("org.freedesktop.Hal", udi)
</snippet></ROW><ROW><id>7951975</id><snippet>def udi_to_device(self, udi):
    obj = self.bus.get_object("org.freedesktop.Hal", udi)
    return dbus.Interface(obj, dbus_interface='org.freedesktop.Hal.Device')
</snippet></ROW><ROW><id>7951992</id><snippet># this has forms.ModelForm
class ImageAttachmentForm(forms.ModelForm):
# this has forms.Form
class AudioAttachmentForm(forms.Form):
</snippet></ROW><ROW><id>7951992</id><snippet>forms.Form</snippet></ROW><ROW><id>7951992</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>7952013</id><snippet>from registration.views import activate
urlpatterns = patterns('',
    url(r'^activate/(?P&lt;activation_key&gt;\w+)/$',
            activate,
            {'backend': 'registration.backends.default.DefaultBackend'},
            name='registration_activate',
            # You could use reverse() here instead of a URL to be DRY'er
            success_url = "http://..." 
            ),
</snippet></ROW><ROW><id>7952013</id><snippet>from registration.view import activate
def custom_activate(request, backend,
         template_name='registration/activate.html',
         success_url=None, extra_context=None, **kwargs):
    success_url = request.GET.get('next', None)
    return activate(request, template_name=template_name, success_url=success_url, extra_context=None, **kwargs)
</snippet></ROW><ROW><id>7952013</id><snippet>{% url 'registration.view.activate' activation_key as a_url %}

Thanks! ....

{% autoescape off %}
&lt;a href="http://{{ site.domain }}{{ a_url }}?next='http://somepage_or_url'"&gt;
    http://{{ site.domain }}{{ url_registration_activate }}/
&lt;/a&gt;
{% endautoescape %}

Thanks!
</snippet></ROW><ROW><id>7952013</id><snippet>from registration.backends.default import DefaultBackend
class RedirectBackend(DefaultBackend):
    def register(self, request, **kwargs):
        request.session['redirect'] = request.GET.get("next",None)
        super(RedirectBackend, self).register(request, **kwargs)

    def post_activation_redirect(self, request, user):
        return(request.session['redirect'], (), {})
</snippet></ROW><ROW><id>7952013</id><snippet>url(r'^activate/(?P&lt;activation_key&gt;\w+)/$',
    activate,
    {'backend': 'custombackend.RedirectBackend'},
    name='registration_activate'),
url(r'^register/$',
    register,
    {'backend': 'custombackend.RedirectBackend'},
    name='registration_register'),
</snippet></ROW><ROW><id>7952100</id><snippet>time</snippet></ROW><ROW><id>7952100</id><snippet>now</snippet></ROW><ROW><id>7952100</id><snippet>remaining.days * 24 * 3600 + remaining.seconds</snippet></ROW><ROW><id>7952100</id><snippet>remaining.seconds</snippet></ROW><ROW><id>7952184</id><snippet>print '|'.join('{:^6}'.format(i) for i in range(self.size))
...
print ''.join('{:^4}'.format(i) for i in humangrid[0])
</snippet></ROW><ROW><id>7952184</id><snippet>string.format()</snippet></ROW><ROW><id>7952184</id><snippet>print '|'.join(['{:^6}'*self.size]).format(*range(self.size))
...
print ('{:^4}'*len(humangrid[0])).format(*humangrid[0])
</snippet></ROW><ROW><id>7952240</id><snippet>echo=True</snippet></ROW><ROW><id>7952240</id><snippet>SELECT relationship.id AS relationship_id, relationship.parent_id AS relationship_parent_id, relationship.child_id AS relationship_child_id, vote.id AS vote_id, vote.rel_id AS vote_rel_id, vote.voter_id AS vote_voter_id 
FROM relationship LEFT OUTER JOIN vote ON relationship.id = vote.rel_id 
WHERE relationship.parent_id = ? AND vote.voter_id = ? AND vote.rel_id = relationship.id
</snippet></ROW><ROW><id>7952240</id><snippet>vote.rel_id = relationship.id</snippet></ROW><ROW><id>7952240</id><snippet>JOIN</snippet></ROW><ROW><id>7952240</id><snippet>WHERE</snippet></ROW><ROW><id>7952240</id><snippet>Relationship</snippet></ROW><ROW><id>7952240</id><snippet>filter(Vote.rel_id == Relationship.id).</snippet></ROW><ROW><id>7952240</id><snippet>filter(Vote.voter_id == thisuser.id)</snippet></ROW><ROW><id>7952240</id><snippet>WHERE</snippet></ROW><ROW><id>7952240</id><snippet>LEFT JOIN</snippet></ROW><ROW><id>7952240</id><snippet>outerjoin(Vote, and_(Relationship.id == Vote.rel_id, Vote.voter_id == thisuser.id))</snippet></ROW><ROW><id>7952243</id><snippet>from PyQt4 import QtGui as qt
from PyQt4 import QtCore as qc

class MainWin(qt.QMainWindow):
    def setKeepAbove(self, above):
        if above:
            self.setWindowFlags(self.windowFlags() | qc.Qt.WindowStaysOnTopHint)
        else:
            self.setWindowFlags(self.windowFlags() &amp; ~qc.Qt.WindowStaysOnTopHint)
</snippet></ROW><ROW><id>7952348</id><snippet>    options={
            'py2exe': {
                    'compressed': 2,
                    'optimize': 2,
                    'includes': includes,
                    'excludes': excludes,
                    'packages': packages,
                    'dll_excludes': dll_excludes,
                    'bundle_files': 1,  # 1 = .exe; 2 = .zip; 3 = separate
                    'dist_dir': 'dist',  # Put .exe in dist/
                    'xref': False,
                    'skip_archive': False,
                    'ascii': False,
                    'custom_boot_script': '',
                    #'unbuffered': True,  # Immediately flush output.
            }
    },
    zipfile=None,  # Put libs into .exe to save space.
</snippet></ROW><ROW><id>7952574</id><snippet>self.axes.get_xaxis().set_visible(False)
self.axes.get_yaxis().set_visible(False)
</snippet></ROW><ROW><id>7952753</id><snippet>self.surface = self.axis.plot_surface( self.X, self.Y, self.Z, cmap=cm.gray, linewidth=0, antialiased=True )
self.axis.mouse_init()
</snippet></ROW><ROW><id>7952892</id><snippet>bar()</snippet></ROW><ROW><id>7952892</id><snippet>try</snippet></ROW><ROW><id>7952892</id><snippet>try:
    foo()
except: 
    pass
bar()
</snippet></ROW><ROW><id>7952892</id><snippet>except</snippet></ROW><ROW><id>7952914</id><snippet>import scipy.special
if scipy.version.version &lt; "0.9.0":
    scipy.special.btdtri = my_btdtri
</snippet></ROW><ROW><id>7952914</id><snippet>scipy.special</snippet></ROW><ROW><id>7953300</id><snippet>def keyfun(p):
    return p.name.split()[-1]

persons = sorted(Person.objects.all(), key = keyfun)
</snippet></ROW><ROW><id>7953300</id><snippet>from itertools import groupby
for lname, persons in groupby(persons, keyfun):
    print ' - '.join(p.name for p in persons)
</snippet></ROW><ROW><id>7953300</id><snippet>from re import findall
def keyfun(p):
    v1, v2 = findall(p.name, '\d+')
    tot = int(v1) + int(v2) % 2
    return tot
</snippet></ROW><ROW><id>7954155</id><snippet>pickle</snippet></ROW><ROW><id>7954155</id><snippet>pickle</snippet></ROW><ROW><id>7954155</id><snippet>pickle</snippet></ROW><ROW><id>7954155</id><snippet>Pickle</snippet></ROW><ROW><id>7954155</id><snippet>pickle</snippet></ROW><ROW><id>7954155</id><snippet>shelve</snippet></ROW><ROW><id>7954155</id><snippet>cPickle</snippet></ROW><ROW><id>7954192</id><snippet># Delete the 3D subplot
self.fig.delaxes(self.axes)
# Create a new subplot that is 2D
self.axes = self.fig.add_subplot(111)
# 2D scatter
self.axes.plot(10*np.random.randn(100), 10*np.random.randn(100), 'o')
# Update the figure
self.canvas.draw()
</snippet></ROW><ROW><id>7954317</id><snippet>wx.Button(self, 1, 'Close', (50, 130))
wx.Button(self, 2, 'Random Move', (150, 130), (110, -1))
</snippet></ROW><ROW><id>7954317</id><snippet>wx.Button(panel, 1, 'Close', (50, 130))
wx.Button(panel, 2, 'Random Move', (150, 130), (110, -1))
</snippet></ROW><ROW><id>7954317</id><snippet>wx.RegisterId(1)
wx.RegisterId(2)
</snippet></ROW><ROW><id>7954317</id><snippet>closeBtn = wx.Button(panel, wx.ID_ANY, 'Close', (50, 130))
self.Bind(wx.EVT_BUTTON, self.OnClose, closeBtn)
randomBtn = wx.Button(panel, wx.ID_ANY, 'Random Move', (150, 130), (110, -1))
self.Bind(wx.EVT_BUTTON, self.OnRandomMove, randomBtn)
</snippet></ROW><ROW><id>7954414</id><snippet>print dict(sh.row_values(rownum) for rownum in range(sh.nrows))
</snippet></ROW><ROW><id>7954414</id><snippet>print dict((sh.cell_value(rownum, i), sh.cell_value(rownum, j)) for rownum in range(sh.nrows))
</snippet></ROW><ROW><id>7954414</id><snippet>dict()</snippet></ROW><ROW><id>7954432</id><snippet>os.fork()</snippet></ROW><ROW><id>7954432</id><snippet>class MySlowStuff</snippet></ROW><ROW><id>7954432</id><snippet>class MySlowStuff</snippet></ROW><ROW><id>7954432</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>7954446</id><snippet>import os
import time

while(1):                                              
    os.spawnl(os.P_NOWAIT, "/path/to/php-cli twitter_clean.php")
    print "checked twitter"
    time.sleep(45)
</snippet></ROW><ROW><id>7954508</id><snippet>import argparse
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = "Print a range.")

    parser.add_argument("start", type = int, help = "Specify start.", )
    parser.add_argument("stop", type = int, help = "Specify stop.", )
    parser.add_argument("step", type = int, help = "Specify step.", )

    args=parser.parse_args()
    print(args)
</snippet></ROW><ROW><id>7954508</id><snippet>% test.py -h
usage: test.py [-h] start stop step

Print a range.

positional arguments:
  start       Specify start.
  stop        Specify stop.
  step        Specify step.

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>7954546</id><snippet>content_query[0]</snippet></ROW><ROW><id>7954546</id><snippet>content_class</snippet></ROW><ROW><id>7954546</id><snippet>objects</snippet></ROW><ROW><id>7954546</id><snippet>content_type = ContentType.objects.get(app_label='myproject', model='Building')
</snippet></ROW><ROW><id>7954546</id><snippet>s = "%build%"
content_query = content_class.objects.raw("Select * from pms_building where namelike %s", [s])
</snippet></ROW><ROW><id>7954618</id><snippet>sl = DBSession.query(Puesto.id).filter(Puesto.locales_id == id).subquery()
DBSession.query(Servicio).filter(Servicio.puestos_id.in_(sl)) \
.delete(synchronize_session='fetch')
</snippet></ROW><ROW><id>7954618</id><snippet>fetch</snippet></ROW><ROW><id>7954618</id><snippet>synchronize_session=False</snippet></ROW><ROW><id>7954618</id><snippet>session.expire_all()</snippet></ROW><ROW><id>7954618</id><snippet>MetaData</snippet></ROW><ROW><id>7955322</id><snippet>p.terminate()</snippet></ROW><ROW><id>7955322</id><snippet> if p.poll() is None: # Child still around?
     p.terminate() # kill it
</snippet></ROW><ROW><id>7955322</id><snippet>os.kill(p.pid, signal.SIGTERM)</snippet></ROW><ROW><id>7955322</id><snippet>p.terminate()</snippet></ROW><ROW><id>7955322</id><snippet>raise</snippet></ROW><ROW><id>7955418</id><snippet>PyObject_Print(string)</snippet></ROW><ROW><id>7955454</id><snippet>help(str.startswith)</snippet></ROW><ROW><id>7955454</id><snippet>&gt;&gt;&gt; 'Mon is the first day'.startswith(('Mon','Tue','Wed','Thu','Fri','Sat','Sun'))
True
</snippet></ROW><ROW><id>7955454</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']
&gt;&gt;&gt; pattern = '|'.join(days)
&gt;&gt;&gt; if re.match(pattern, 'Tue is the first day'):
        print 'Found'

Found
</snippet></ROW><ROW><id>7955573</id><snippet>unlinkNode()</snippet></ROW><ROW><id>7955573</id><snippet>pydoc libxml2.xmlNode
</snippet></ROW><ROW><id>7955573</id><snippet>unlinkNode</snippet></ROW><ROW><id>7955573</id><snippet>unlinkNode(self)
    Unlink a node from it's current context, the node is not
    freed
</snippet></ROW><ROW><id>7955573</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Document Title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="content"&gt;This is a test.&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>7955573</id><snippet>&gt;&gt;&gt; import libxml2
&gt;&gt;&gt; doc = libxml2.parseFile('input.html')
</snippet></ROW><ROW><id>7955573</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>7955573</id><snippet>&gt;&gt;&gt; node = doc.xpathEval('//*[@id="content"])[0]
</snippet></ROW><ROW><id>7955573</id><snippet>&gt;&gt;&gt; node.unlinkNode()
</snippet></ROW><ROW><id>7955573</id><snippet>&gt;&gt;&gt; print doc
&lt;head&gt;            
    &lt;title&gt;Document Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>7956418</id><snippet>import scipy
import matplotlib.pyplot as plt

Ns=[10**i for i in range(1,7)]
means=[scipy.random.uniform(0,1,size=N).mean() for N in Ns]

plt.semilogx(Ns,means)
plt.xlabel('N')
plt.grid(True)
plt.show()
</snippet></ROW><ROW><id>7956418</id><snippet>distribution</snippet></ROW><ROW><id>7956418</id><snippet>np.array(distribution)</snippet></ROW><ROW><id>7956418</id><snippet>from module import *</snippet></ROW><ROW><id>7956418</id><snippet>from module import *</snippet></ROW><ROW><id>7956857</id><snippet>timeit</snippet></ROW><ROW><id>7957049</id><snippet>&gt;&gt;&gt; from sqlalchemy.sql import func
&gt;&gt;&gt; stmt = session.query(Address.user_id, func.count('*').\
...         label('address_count')).\
...         group_by(Address.user_id).subquery()

&gt;&gt;&gt; for u, count in session.query(User, stmt.c.address_count).\
...     outerjoin(stmt, User.id==stmt.c.user_id).order_by(stmt.c.address_count): 
...     print u, count
</snippet></ROW><ROW><id>7957083</id><snippet>p = subprocess.Popen(['grep', "%s *.log"%userid]...
</snippet></ROW><ROW><id>7957083</id><snippet>shell=True</snippet></ROW><ROW><id>7957083</id><snippet>os.execvp</snippet></ROW><ROW><id>7957083</id><snippet>foo12 *.log</snippet></ROW><ROW><id>7957083</id><snippet>p = subprocess.Popen(['grep', userid, '*.log']...)
</snippet></ROW><ROW><id>7957083</id><snippet>shell=True</snippet></ROW><ROW><id>7957083</id><snippet>execvp</snippet></ROW><ROW><id>7957083</id><snippet>*.log</snippet></ROW><ROW><id>7957083</id><snippet>shell=True</snippet></ROW><ROW><id>7957083</id><snippet>import glob
args = ['grep', userid]
args.extend(glob.glob('*.log')
p = subprocess.Popen(args, ...)
</snippet></ROW><ROW><id>7957131</id><snippet>uchar* ptr = (uchar*)(imgHsv-&gt;imageData);
printf("H: %d, S:%d, V:%d\n", ptr[0], ptr[1], ptr[2]);
</snippet></ROW><ROW><id>7957131</id><snippet>H: 30, S:109, V:255
</snippet></ROW><ROW><id>7957236</id><snippet>def StringToHexString(s):
    return ''.join( map(lambda param:hexLoookup[param], map(ord,s) ) )
</snippet></ROW><ROW><id>7957246</id><snippet>arch -i386 python
</snippet></ROW><ROW><id>7957246</id><snippet>file `which python`
</snippet></ROW><ROW><id>7957246</id><snippet>λ &gt; file /usr/local/bin/python
/usr/local/bin/python: Mach-O universal binary with 2 architectures
/usr/local/bin/python (for architecture i386):  Mach-O executable i386
/usr/local/bin/python (for architecture x86_64):    Mach-O 64-bit executable x86_64
</snippet></ROW><ROW><id>7957246</id><snippet>i386</snippet></ROW><ROW><id>7957246</id><snippet>arch -i386 python</snippet></ROW><ROW><id>7957246</id><snippet>platform.architecture()</snippet></ROW><ROW><id>7957246</id><snippet>sys.maxsize</snippet></ROW><ROW><id>7957246</id><snippet>sys.maxsize &gt; 2**32</snippet></ROW><ROW><id>7957246</id><snippet>λ &gt; arch -i386 python
Python 2.7.2 (default, Oct 31 2011, 00:51:07) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize &gt; 2**32
False
&gt;&gt;&gt; sys.maxsize
2147483647
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', '')
</snippet></ROW><ROW><id>7957246</id><snippet>λ &gt; python
Python 2.7.2 (default, Oct 31 2011, 00:51:07) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize
9223372036854775807
&gt;&gt;&gt; sys.maxsize &gt; 2**32
True
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', '')
</snippet></ROW><ROW><id>7957451</id><snippet>start_date = datetime.date(2005, 1, 1)
end_date = datetime.date(2005, 3, 31)
Event.objects.filter(event_date__range=(start_date, end_date)
</snippet></ROW><ROW><id>7957451</id><snippet>class EventManager(models.Manager):
    def get_query_set(self):
     # Quick check to see what dates we should search within
     return super(EventManager, self).get_query_set().filter(event_date__range=(start_date, end_date))

class Event(models.Model):
    this_year = EventManager()
    ...
</snippet></ROW><ROW><id>7957451</id><snippet>Event.this_year.all()
</snippet></ROW><ROW><id>7957496</id><snippet>&gt;&gt;&gt; class TestFailed(Exception):
    def __init__(self, m):
        self.message = m
    def __str__(self):
        return self.message

&gt;&gt;&gt; try:
    raise TestFailed('Oops')
except TestFailed as x:
    print x


Oops
</snippet></ROW><ROW><id>7957711</id><snippet>import pytz
import datetime as dt
ktm = pytz.timezone('Asia/Katmandu')
utc = pytz.utc
now = dt.datetime.now()

now_utc = utc.localize(now)
now_ktm = now_utc.astimezone(ktm)

diff = now_ktm.replace(tzinfo=None) - now_utc.replace(tzinfo=None) 
print(diff)
5:45:00
</snippet></ROW><ROW><id>7957711</id><snippet>print(now_ktm.strftime('%z'))
# +0545
</snippet></ROW><ROW><id>7957872</id><snippet>cgitb</snippet></ROW><ROW><id>7957872</id><snippet>import cgitb
cgitb.enable()
</snippet></ROW><ROW><id>7958248</id><snippet>import re

regex = re.compile(r""" # r'' means that \n and the like is two chars
                        # '\\','n' and not a single newline character

    ( # begin capturing group #1; you can get it: regex.match(text).group(1)
      ^   # match begining of the string or a new line if re.MULTILINE is set
      .*  # match zero or more characters except newline (unless
          # re.DOTALL is set)
      def # match string 'def'
      \W* # match zero or more non-\w chars i.e., [^a-zA-Z0-9_] if no
          # re.LOCALE or re.UNICODE
    ) # end capturing group #1

    (\w+) # second capturing group [a-zA-Z0-9_] one or more times if
          # no above flags

    \W*   # see above

    \(    # match literal paren '('
      (.*)  # 3rd capturing group NOTE: `*` is greedy `.` matches even ')'
            # therefore re.match(r'\((.*)\)', '(a)(b)').group(1) == 'a)(b'
    \)    # match literal paren ')'
     :    # match literal ':'
    """, re.VERBOSE|re.DEBUG)
</snippet></ROW><ROW><id>7958248</id><snippet>re.DEBUG</snippet></ROW><ROW><id>7958248</id><snippet>subpattern 1
  at at_beginning
  max_repeat 0 65535
    any None
  literal 100
  literal 101
  literal 102
  max_repeat 0 65535
    in
      category category_not_word
subpattern 2
  max_repeat 1 65535
    in
      category category_word
max_repeat 0 65535
  in
    category category_not_word
literal 40
subpattern 3
  max_repeat 0 65535
    any None
literal 41
literal 58
</snippet></ROW><ROW><id>7958269</id><snippet>&gt;&gt;&gt; "string1 string2 None string4".replace('None ', '')
'string1 string2 string4'
</snippet></ROW><ROW><id>7958269</id><snippet>&gt;&gt;&gt; fields = ['string0', 'string1', 'string2', None, 'string4']
&gt;&gt;&gt; fields_out = filter(lambda f: f is not None, fields[1:])
&gt;&gt;&gt; template = ' '.join('%s' for field in fields_out)
&gt;&gt;&gt; template % tuple(fields_out)
'string1 string2 string4'
</snippet></ROW><ROW><id>7958441</id><snippet>def metaclass(future_class_name, future_class_parents, future_class_attrs):
    print "module.__metaclass__"
    future_class_attrs["bar"]="bar"
    return type(future_class_name, future_class_parents, future_class_attrs)

class Foo(object):
    __metaclass__ = metaclass

    def __init__(self):
        print 'Foo.__init__'

f=Foo()
</snippet></ROW><ROW><id>7958522</id><snippet>for k,v in d.iteritems():
    if k.startswith('ev'):
        result = v
        break
else:
    raise KeyError()  # or set to default value
</snippet></ROW><ROW><id>7958643</id><snippet>from google.appengine.ext import db

xg_on = db.create_transaction_options(xg=True)

def my_txn():
    x = MyModel(a=3)
    x.put()
    y = MyModel(a=7)
    y.put()

db.run_in_transaction_options(xg_on, my_txn)
</snippet></ROW><ROW><id>7959010</id><snippet>.proto</snippet></ROW><ROW><id>7959010</id><snippet>message SomeCoolMessage {
    required string key = 1;
    required double value = 2;
}
</snippet></ROW><ROW><id>7959010</id><snippet>randKey = random.choice( nodeList.keys() )
data = SomeCoolMessage()
data.key = randKey
data.value = nodeList[randKey]
mySocket.sendto ( data.SerializeToString() , address ) 
</snippet></ROW><ROW><id>7959466</id><snippet>strptime</snippet></ROW><ROW><id>7959466</id><snippet>datetime.datetime.strptime(s, "%Y-%m-%d").date()
</snippet></ROW><ROW><id>7959702</id><snippet>self._action_group = gtk.ActionGroup("ExamplePyPluginActions")
self._action_group.add_actions([("ExamplePy", None, _("Clear document"),
         None, _("Clear the document"),
         self.on_clear_document_activate)])
manager.insert_action_group(self._action_group, -1)
</snippet></ROW><ROW><id>7959702</id><snippet>None</snippet></ROW><ROW><id>7959702</id><snippet>self._action_group.add_actions([("ExamplePy", None, _("Clear document"),
        None, _("Clear the document"),
        self.on_clear_document_activate)])
</snippet></ROW><ROW><id>7959702</id><snippet>self._action_group.add_actions([("ExamplePy", None, _("Clear document"),
        "&lt;control&gt;r", _("Clear the document"), # &lt;- here
        self.on_clear_document_activate)])
</snippet></ROW><ROW><id>7959702</id><snippet>action = gtk.Action("ExamplePy", 
        _("Clear document"), 
        _("Clear the document"), None)
action.connect("activate", self.on_open_regex_dialog)
action_group = gtk.ActionGroup("ExamplePyPluginActions")
action_group.add_action(action)
</snippet></ROW><ROW><id>7959702</id><snippet>action_group.add_action()</snippet></ROW><ROW><id>7959702</id><snippet>action_group.add_action_with_accel()</snippet></ROW><ROW><id>7959702</id><snippet>action_group = gtk.ActionGroup("ExamplePyPluginActions")
action_group.add_action_with_accel(action, "&lt;control&gt;r")
</snippet></ROW><ROW><id>7959764</id><snippet>s = unichr(i)
</snippet></ROW><ROW><id>7959764</id><snippet>unichr(i)</snippet></ROW><ROW><id>7959794</id><snippet>lol()</snippet></ROW><ROW><id>7959794</id><snippet>class Foo (object):
    pass

Foo.lol = staticmethod (lambda: 1)
print Foo.lol ()
</snippet></ROW><ROW><id>7959822</id><snippet>auto_now_add</snippet></ROW><ROW><id>7959822</id><snippet>auto_add</snippet></ROW><ROW><id>7959822</id><snippet>models.py</snippet></ROW><ROW><id>7960238</id><snippet>rawcommand = 'date -s' + datetime_string
</snippet></ROW><ROW><id>7960238</id><snippet>rawcommand = 'date -s "%s"' % datetime_string
</snippet></ROW><ROW><id>7960238</id><snippet>rawcommand.format(pattern=apattern)</snippet></ROW><ROW><id>7960238</id><snippet>datetime_string = raw_input("Enter date and time in format 11/1/2011 1600")
command1 = 'date -s "%s"' % datetime_string
stdin, stdout, stderr = ssh.exec_command(command1)
dateresult = stdout.read().splitlines()
</snippet></ROW><ROW><id>7960518</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; findnames = re.compile(r'([A-Z]\w*(?:\s[A-Z]\w*)?)')
&gt;&gt;&gt; def is_name_in_text(text, names):
        for possible_name in set(findnames.findall(text)):
            if possible_name in names:
                return possible_name
        return False

&gt;&gt;&gt; names = set(['James John', 'Robert David', 'Paul'])
&gt;&gt;&gt; is_name_in_text('I saw James today', names)
False
&gt;&gt;&gt; is_name_in_text('I saw James John today', names)
'James John'
&gt;&gt;&gt; is_name_in_text('I met Paul', names)
'Paul'
</snippet></ROW><ROW><id>7960544</id><snippet>__import__</snippet></ROW><ROW><id>7960544</id><snippet>m = __import__('A.B', globals(), locals(), ['C'])
C = getattr(m, 'C')
c = C()
</snippet></ROW><ROW><id>7960811</id><snippet>a[ind_row, 1] = 3
</snippet></ROW><ROW><id>7960811</id><snippet>a[ind_row, 1][1] = 5
</snippet></ROW><ROW><id>7960811</id><snippet>a[ind_row, 1]</snippet></ROW><ROW><id>7960811</id><snippet>[1]</snippet></ROW><ROW><id>7960811</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; a[2:4] = -1, -2
&gt;&gt;&gt; a
[0, 1, -1, -2, 4]
&gt;&gt;&gt; a[2:4][1] = -3
&gt;&gt;&gt; a
[0, 1, -1, -2, 4]
</snippet></ROW><ROW><id>7960811</id><snippet>a[ind_row[1], 1] = 5
</snippet></ROW><ROW><id>7960992</id><snippet>def has_duplicates(d):
    return len(d) != len(set(d.values()))

print has_duplicates({'a': 1, 'b': 1, 'c': 2})
</snippet></ROW><ROW><id>7960992</id><snippet>True
</snippet></ROW><ROW><id>7961038</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>7961038</id><snippet>shutil.copyfile(oldfile, os.path.join(deleted, newpagename))
</snippet></ROW><ROW><id>7961251</id><snippet>None</snippet></ROW><ROW><id>7961251</id><snippet>cd1 = self.cleaned_data['string1_val']
lsi1 = latestSI.string1_val
cd2 = self.cleaned_data['string2_val']
lsi2 = latestSI.string2_val
if lsi1 is None:
  lsi1 = ''
if lsi2 is None:
  lsi2 = ''
return not (cd1 == lsi1 and cd2 == lsi2)
</snippet></ROW><ROW><id>7961317</id><snippet>repr</snippet></ROW><ROW><id>7961317</id><snippet>$ echo 您好 | python -c "import sys; print repr(sys.stdin.read().decode('utf8'))"
u'\u60a8\u597d\n'
</snippet></ROW><ROW><id>7961367</id><snippet>in = open("inputfile", "r")
out = open("outputfile", "w")

for line in in:
    line = line.split(",", 1)
    line[0] = line[0].replace("-", ",")
    out.write(','.join(line))

in.close()
out.close()
</snippet></ROW><ROW><id>7961390</id><snippet>&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 5, 6, 7, 8]
&gt;&gt;&gt; t
[1, 2, 3, 1, 2, 5, 6, 7, 8]
&gt;&gt;&gt; list(set(t))
[1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; s = [1, 2, 3]
&gt;&gt;&gt; list(set(t) - set(s))
[8, 5, 6, 7]
</snippet></ROW><ROW><id>7961513</id><snippet>for c in reversed(string):
     print c
</snippet></ROW><ROW><id>7961545</id><snippet>date</snippet></ROW><ROW><id>7961545</id><snippet>{{ report.date|date:"f A" }}
</snippet></ROW><ROW><id>7961644</id><snippet>a = (base * tax / 100)
b = (base*license /100)
c = a + b + base
d = c + dealer_prep
e = d + destination_charge

print "\nAfter taxes the price is: ", a + base
print "\nAfter taxes and license fee the price is: ", c
print "\nAfter taxes and license fee and dealer prep the price is: ", d
print "\nAfter taxes, license fees, dealer prep, and destination charge, the total price is: ", e

raw_input("\nPress the enter key to close the window.")
</snippet></ROW><ROW><id>7961651</id><snippet>&gt;&gt;&gt; mywords = ['red', 'blue', 'red', 'green', 'blue', 'blue']
&gt;&gt;&gt; cnt = Counter(mywords)
&gt;&gt;&gt; cnt
Counter({'blue': 3, 'red': 2, 'green': 1})
</snippet></ROW><ROW><id>7961651</id><snippet>&gt;&gt;&gt; mywords = ['red', 'blue', 'red', 'green', 'blue', 'blue']
&gt;&gt;&gt; myletters=list("".join(mywords))
&gt;&gt;&gt; myletters
['r', 'e', 'd', 'b', 'l', 'u', 'e', 'r', 'e', 'd', 'g', 'r', 'e', 'e', 'n', 'b', 'l', 'u', 'e', 'b', 'l', 'u', 'e']
&gt;&gt;&gt; Counter(myletters)
</snippet></ROW><ROW><id>7961660</id><snippet>&gt;&gt;&gt; lst = [ ( 132, 'foobar' ), ( 58, 'other value' ) ]
&gt;&gt;&gt; lst.append( ( 70, 'some data value' ) )
&gt;&gt;&gt; lst
[(132, 'foobar'), (58, 'other value'), (70, 'some data value')]
&gt;&gt;&gt; lst.sort( key=lambda x: x[0] )
&gt;&gt;&gt; lst
[(58, 'other value'), (70, 'some data value'), (132, 'foobar')]
&gt;&gt;&gt; lst.sort( key=lambda x: x[1] )
&gt;&gt;&gt; lst
[(132, 'foobar'), (58, 'other value'), (70, 'some data value')]
</snippet></ROW><ROW><id>7961660</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>7961660</id><snippet>dict</snippet></ROW><ROW><id>7961660</id><snippet>list</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961663</id><snippet>$ sudo STATIC_DEPS=true /usr/bin/easy_install-2.7 lxml
</snippet></ROW><ROW><id>7961663</id><snippet>lxml.etree</snippet></ROW><ROW><id>7961663</id><snippet>$ /usr/bin/python2.7
Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; etree.__file__
'/Library/Python/2.7/site-packages/lxml-2.3.1-py2.7-macosx-10.7-intel.egg/lxml/etree.so'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961663</id><snippet>ld: warning: ignoring file /private/tmp/easy_install-83mJsV/lxml-2.3.1/build/tmp/libxml2/lib/libxslt.a, file was built for archive which is not the architecture being linked (i386)
</snippet></ROW><ROW><id>7961663</id><snippet>$ arch -i386 /usr/bin/python2.7
Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:06) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from lxml import etree
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: dlopen(/Library/Python/2.7/site-packages/lxml-2.3.1-py2.7-macosx-10.7-intel.egg/lxml/etree.so, 2): Symbol not found: _htmlParseChunk
  Referenced from: /Library/Python/2.7/site-packages/lxml-2.3.1-py2.7-macosx-10.7-intel.egg/lxml/etree.so
  Expected in: flat namespace
 in /Library/Python/2.7/site-packages/lxml-2.3.1-py2.7-macosx-10.7-intel.egg/lxml/etree.so
&gt;&gt;&gt; ^D
</snippet></ROW><ROW><id>7961663</id><snippet>libxml2</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961663</id><snippet>lxml</snippet></ROW><ROW><id>7961736</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>7961794</id><snippet>Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; def Foo(a=0.1, b=1.6):
    pass

&gt;&gt;&gt; help(Foo)
Help on function Foo in module __main__:

Foo(a=0.1, b=1.6)
</snippet></ROW><ROW><id>7961820</id><snippet>handlers.TimedRotatingFileHandler</snippet></ROW><ROW><id>7961820</id><snippet>import logging
import logging.config

logging.fileConfig('mylog.conf')
logger = logging.getLogger('root')
</snippet></ROW><ROW><id>7961820</id><snippet>#======================

# mylog.conf
[loggers]
keys=root

[handlers]
keys=default

[formatters]
keys=default

[logger_root]
level=INFO
handlers=default
qualname=(root) # note - this is used in non-root loggers
propagate=1 # note - this is used in non-root loggers
channel=
parent=

[handler_default]
class=handlers.TimedRotatingFileHandler
level=INFO
formatter=default
args=('try.log', 'd', 1)

[formatter_default]
format=%(asctime)s %(pathname)s(%(lineno)d): %(levelname)s %(message)s
</snippet></ROW><ROW><id>7961926</id><snippet>if ( x == ord('\t')):
    ...
</snippet></ROW><ROW><id>7961926</id><snippet>if ( x == 9):
    ...
</snippet></ROW><ROW><id>7962177</id><snippet>&gt;&gt;&gt; x = []
&gt;&gt;&gt; x[0] = True
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
</snippet></ROW><ROW><id>7962177</id><snippet>addr[j] = key
</snippet></ROW><ROW><id>7962177</id><snippet>addr.append(key)
</snippet></ROW><ROW><id>7962177</id><snippet>j</snippet></ROW><ROW><id>7962177</id><snippet>msg</snippet></ROW><ROW><id>7962224</id><snippet>&gt;&gt;&gt; M = N.repeat(N.arange(1,11), 5).reshape(10,-1)
&gt;&gt;&gt; M
array([[ 1,  1,  1,  1,  1],
       [ 2,  2,  2,  2,  2],
       [ 3,  3,  3,  3,  3],
       [ 4,  4,  4,  4,  4],
       [ 5,  5,  5,  5,  5],
       [ 6,  6,  6,  6,  6],
       [ 7,  7,  7,  7,  7],
       [ 8,  8,  8,  8,  8],
       [ 9,  9,  9,  9,  9],
       [10, 10, 10, 10, 10]])
&gt;&gt;&gt; for i in range(5): 
...    N.random.shuffle(M[:,i])
&gt;&gt;&gt; M
array([[ 3,  9,  7,  9,  2],
       [ 5,  4,  2,  5,  3],
       [ 8,  8,  8,  1,  4],
       [ 1,  2,  6, 10,  8],
       [ 2,  1,  9,  2,  5],
       [ 7,  7, 10,  7,  1],
       [ 4,  3,  5,  8,  9],
       [ 6,  5,  4,  4,  7],
       [10, 10,  3,  6,  6],
       [ 9,  6,  1,  3, 10]])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7962692</id><snippet>hmm.py</snippet></ROW><ROW><id>7962692</id><snippet>#!/usr/bin/env python
"""
CS 65 Lab #3 -- 5 Oct 2008
Dougal Sutherland

Implements a hidden Markov model, based on Jurafsky + Martin's presentation,
which is in turn based off work by Jason Eisner. We test our program with
data from Eisner's spreadsheets.
"""


identity = lambda x: x

class HiddenMarkovModel(object):
    """A hidden Markov model."""

    def __init__(self, states, transitions, emissions, vocab):
        """
        states - a list/tuple of states, e.g. ('start', 'hot', 'cold', 'end')
                 start state needs to be first, end state last
                 states are numbered by their order here
        transitions - the probabilities to go from one state to another
                      transitions[from_state][to_state] = prob
        emissions - the probabilities of an observation for a given state
                    emissions[state][observation] = prob
        vocab: a list/tuple of the names of observable values, in order
        """
        self.states = states
        self.real_states = states[1:-1]
        self.start_state = 0
        self.end_state = len(states) - 1
        self.transitions = transitions
        self.emissions = emissions
        self.vocab = vocab

    # functions to get stuff one-indexed
    state_num = lambda self, n: self.states[n]
    state_nums = lambda self: xrange(1, len(self.real_states) + 1)

    vocab_num = lambda self, n: self.vocab[n - 1]
    vocab_nums = lambda self: xrange(1, len(self.vocab) + 1)
    num_for_vocab = lambda self, s: self.vocab.index(s) + 1

    def transition(self, from_state, to_state):
        return self.transitions[from_state][to_state]

    def emission(self, state, observed):
        return self.emissions[state][observed - 1]


    # helper stuff
    def _normalize_observations(self, observations):
        return [None] + [self.num_for_vocab(o) if o.__class__ == str else o
                                               for o in observations]

    def _init_trellis(self, observed, forward=True, init_func=identity):
        trellis = [ [None for j in range(len(observed))]
                          for i in range(len(self.real_states) + 1) ]

        if forward:
            v = lambda s: self.transition(0, s) * self.emission(s, observed[1])
        else:
            v = lambda s: self.transition(s, self.end_state)
        init_pos = 1 if forward else -1

        for state in self.state_nums():
            trellis[state][init_pos] = init_func( v(state) )
        return trellis

    def _follow_backpointers(self, trellis, start):
        # don't bother branching
        pointer = start[0]
        seq = [pointer, self.end_state]
        for t in reversed(xrange(1, len(trellis[1]))):
            val, backs = trellis[pointer][t]
            pointer = backs[0]
            seq.insert(0, pointer)
        return seq


    # actual algorithms

    def forward_prob(self, observations, return_trellis=False):
        """
        Returns the probability of seeing the given `observations` sequence,
        using the Forward algorithm.
        """
        observed = self._normalize_observations(observations)
        trellis = self._init_trellis(observed)

        for t in range(2, len(observed)):
            for state in self.state_nums():
                trellis[state][t] = sum(
                    self.transition(old_state, state)
                        * self.emission(state, observed[t])
                        * trellis[old_state][t-1]
                    for old_state in self.state_nums()
                )
        final = sum(trellis[state][-1] * self.transition(state, -1)
                    for state in self.state_nums())
        return (final, trellis) if return_trellis else final


    def backward_prob(self, observations, return_trellis=False):
        """
        Returns the probability of seeing the given `observations` sequence,
        using the Backward algorithm.
        """
        observed = self._normalize_observations(observations)
        trellis = self._init_trellis(observed, forward=False)

        for t in reversed(range(1, len(observed) - 1)):
            for state in self.state_nums():
                trellis[state][t] = sum(
                    self.transition(state, next_state)
                        * self.emission(next_state, observed[t+1])
                        * trellis[next_state][t+1]
                    for next_state in self.state_nums()
                )
        final = sum(self.transition(0, state)
                        * self.emission(state, observed[1])
                        * trellis[state][1]
                    for state in self.state_nums())
        return (final, trellis) if return_trellis else final


    def viterbi_sequence(self, observations, return_trellis=False):
        """
        Returns the most likely sequence of hidden states, for a given
        sequence of observations. Uses the Viterbi algorithm.
        """
        observed = self._normalize_observations(observations)
        trellis = self._init_trellis(observed, init_func=lambda val: (val, [0]))

        for t in range(2, len(observed)):
            for state in self.state_nums():
                emission_prob = self.emission(state, observed[t])
                last = [(old_state, trellis[old_state][t-1][0] * \
                                    self.transition(old_state, state) * \
                                    emission_prob)
                        for old_state in self.state_nums()]
                highest = max(last, key=lambda p: p[1])[1]
                backs = [s for s, val in last if val == highest]
                trellis[state][t] = (highest, backs)

        last = [(old_state, trellis[old_state][-1][0] * \
                            self.transition(old_state, self.end_state)) 
                for old_state in self.state_nums()]
        highest = max(last, key = lambda p: p[1])[1]
        backs = [s for s, val in last if val == highest]
        seq = self._follow_backpointers(trellis, backs)

        return (seq, trellis) if return_trellis else seq


    def train_on_obs(self, observations, return_probs=False):
        """
        Trains the model once, using the forward-backward algorithm. This
        function returns a new HMM instance rather than modifying this one.
        """
        observed = self._normalize_observations(observations)
        forward_prob,  forwards  = self.forward_prob( observations, True)
        backward_prob, backwards = self.backward_prob(observations, True)

        # gamma values
        prob_of_state_at_time = posat = [None] + [
            [0] + [forwards[state][t] * backwards[state][t] / forward_prob
                for t in range(1, len(observations)+1)]
            for state in self.state_nums()]
        # xi values
        prob_of_transition = pot = [None] + [
            [None] + [
                [0] + [forwards[state1][t] 
                        * self.transition(state1, state2)
                        * self.emission(state2, observed[t+1]) 
                        * backwards[state2][t+1]
                        / forward_prob
                  for t in range(1, len(observations))]
              for state2 in self.state_nums()]
          for state1 in self.state_nums()]

        # new transition probabilities
        trans = [[0 for j in range(len(self.states))]
                    for i in range(len(self.states))]
        trans[self.end_state][self.end_state] = 1

        for state in self.state_nums():
            state_prob = sum(posat[state])
            trans[0][state] = posat[state][1]
            trans[state][-1] = posat[state][-1] / state_prob
            for oth in self.state_nums():
                trans[state][oth] = sum(pot[state][oth]) / state_prob

        # new emission probabilities
        emit = [[0 for j in range(len(self.vocab))]
                   for i in range(len(self.states))]
        for state in self.state_nums():
            for output in range(1, len(self.vocab) + 1):
                n = sum(posat[state][t] for t in range(1, len(observations)+1)
                                              if observed[t] == output)
                emit[state][output-1] = n / sum(posat[state])

        trained = HiddenMarkovModel(self.states, trans, emit, self.vocab)
        return (trained, posat, pot) if return_probs else trained


# ======================
# = reading from files =
# ======================

def normalize(string):
    if '#' in string:
        string = string[:string.index('#')]
    return string.strip()

def make_hmm_from_file(f):
    def nextline():
        line = f.readline()
        if line == '': # EOF
            return None
        else:
            return normalize(line) or nextline()

    n = int(nextline())
    states = [nextline() for i in range(n)] # &lt;3 list comprehension abuse

    num_vocab = int(nextline())
    vocab = [nextline() for i in range(num_vocab)]

    transitions = [[float(x) for x in nextline().split()] for i in range(n)]
    emissions   = [[float(x) for x in nextline().split()] for i in range(n)]

    assert nextline() is None
    return HiddenMarkovModel(states, transitions, emissions, vocab)

def read_observations_from_file(f):
    return filter(lambda x: x, [normalize(line) for line in f.readlines()])

# =========
# = tests =
# =========

import unittest
class TestHMM(unittest.TestCase):
    def setUp(self):
        # it's complicated to pass args to a testcase, so just use globals
        self.hmm = make_hmm_from_file(file(HMM_FILENAME))
        self.obs = read_observations_from_file(file(OBS_FILENAME))

    def test_forward(self):
        prob, trellis = self.hmm.forward_prob(self.obs, True)
        self.assertAlmostEqual(prob,           9.1276e-19, 21)
        self.assertAlmostEqual(trellis[1][1],  0.1,        4)
        self.assertAlmostEqual(trellis[1][3],  0.00135,    5)
        self.assertAlmostEqual(trellis[1][6],  8.71549e-5, 9)
        self.assertAlmostEqual(trellis[1][13], 5.70827e-9, 9)
        self.assertAlmostEqual(trellis[1][20], 1.3157e-10, 14)
        self.assertAlmostEqual(trellis[1][27], 3.1912e-14, 13)
        self.assertAlmostEqual(trellis[1][33], 2.0498e-18, 22)
        self.assertAlmostEqual(trellis[2][1],  0.1,        4)
        self.assertAlmostEqual(trellis[2][3],  0.03591,    5)
        self.assertAlmostEqual(trellis[2][6],  5.30337e-4, 8)
        self.assertAlmostEqual(trellis[2][13], 1.37864e-7, 11)
        self.assertAlmostEqual(trellis[2][20], 2.7819e-12, 15)
        self.assertAlmostEqual(trellis[2][27], 4.6599e-15, 18)
        self.assertAlmostEqual(trellis[2][33], 7.0777e-18, 22)

    def test_backward(self):
        prob, trellis = self.hmm.backward_prob(self.obs, True)
        self.assertAlmostEqual(prob,           9.1276e-19, 21)
        self.assertAlmostEqual(trellis[1][1],  1.1780e-18, 22)
        self.assertAlmostEqual(trellis[1][3],  7.2496e-18, 22)
        self.assertAlmostEqual(trellis[1][6],  3.3422e-16, 20)
        self.assertAlmostEqual(trellis[1][13], 3.5380e-11, 15)
        self.assertAlmostEqual(trellis[1][20], 6.77837e-9, 14)
        self.assertAlmostEqual(trellis[1][27], 1.44877e-5, 10)
        self.assertAlmostEqual(trellis[1][33], 0.1,        4)
        self.assertAlmostEqual(trellis[2][1],  7.9496e-18, 22)
        self.assertAlmostEqual(trellis[2][3],  2.5145e-17, 21)
        self.assertAlmostEqual(trellis[2][6],  1.6662e-15, 19)
        self.assertAlmostEqual(trellis[2][13], 5.1558e-12, 16)
        self.assertAlmostEqual(trellis[2][20], 7.52345e-9, 14)
        self.assertAlmostEqual(trellis[2][27], 9.66609e-5, 9)
        self.assertAlmostEqual(trellis[2][33], 0.1,        4)

    def test_viterbi(self):
        path, trellis = self.hmm.viterbi_sequence(self.obs, True)
        self.assertEqual(path, [0] + [2]*13 + [1]*14 + [2]*6 + [3])
        self.assertAlmostEqual(trellis[1][1] [0],  0.1,      4)
        self.assertAlmostEqual(trellis[1][6] [0],  5.62e-05, 7)
        self.assertAlmostEqual(trellis[1][7] [0],  4.50e-06, 8)
        self.assertAlmostEqual(trellis[1][16][0], 1.99e-09, 11)
        self.assertAlmostEqual(trellis[1][17][0], 3.18e-10, 12)
        self.assertAlmostEqual(trellis[1][23][0], 4.00e-13, 15)
        self.assertAlmostEqual(trellis[1][25][0], 1.26e-13, 15)
        self.assertAlmostEqual(trellis[1][29][0], 7.20e-17, 19)
        self.assertAlmostEqual(trellis[1][30][0], 1.15e-17, 19)
        self.assertAlmostEqual(trellis[1][32][0], 7.90e-19, 21)
        self.assertAlmostEqual(trellis[1][33][0], 1.26e-19, 21)  
        self.assertAlmostEqual(trellis[2][ 1][0], 0.1,      4)
        self.assertAlmostEqual(trellis[2][ 4][0], 0.00502,  5)
        self.assertAlmostEqual(trellis[2][ 6][0], 0.00045,  5)
        self.assertAlmostEqual(trellis[2][12][0], 1.62e-07, 9)
        self.assertAlmostEqual(trellis[2][18][0], 3.18e-12, 14)
        self.assertAlmostEqual(trellis[2][19][0], 1.78e-12, 14)
        self.assertAlmostEqual(trellis[2][23][0], 5.00e-14, 16)
        self.assertAlmostEqual(trellis[2][28][0], 7.87e-16, 18)
        self.assertAlmostEqual(trellis[2][29][0], 4.41e-16, 18)
        self.assertAlmostEqual(trellis[2][30][0], 7.06e-17, 19)
        self.assertAlmostEqual(trellis[2][33][0], 1.01e-18, 20)

    def test_learning_probs(self):
        trained, gamma, xi = self.hmm.train_on_obs(self.obs, True)

        self.assertAlmostEqual(gamma[1][1],  0.129, 3)
        self.assertAlmostEqual(gamma[1][3],  0.011, 3)
        self.assertAlmostEqual(gamma[1][7],  0.022, 3)
        self.assertAlmostEqual(gamma[1][14], 0.887, 3)
        self.assertAlmostEqual(gamma[1][18], 0.994, 3)
        self.assertAlmostEqual(gamma[1][23], 0.961, 3)
        self.assertAlmostEqual(gamma[1][27], 0.507, 3)
        self.assertAlmostEqual(gamma[1][33], 0.225, 3)
        self.assertAlmostEqual(gamma[2][1],  0.871, 3)
        self.assertAlmostEqual(gamma[2][3],  0.989, 3)
        self.assertAlmostEqual(gamma[2][7],  0.978, 3)
        self.assertAlmostEqual(gamma[2][14], 0.113, 3)
        self.assertAlmostEqual(gamma[2][18], 0.006, 3)
        self.assertAlmostEqual(gamma[2][23], 0.039, 3)
        self.assertAlmostEqual(gamma[2][27], 0.493, 3)
        self.assertAlmostEqual(gamma[2][33], 0.775, 3)

        self.assertAlmostEqual(xi[1][1][1],  0.021, 3)
        self.assertAlmostEqual(xi[1][1][12], 0.128, 3)
        self.assertAlmostEqual(xi[1][1][32], 0.13,  3)
        self.assertAlmostEqual(xi[2][1][1],  0.003, 3)
        self.assertAlmostEqual(xi[2][1][22], 0.017, 3)
        self.assertAlmostEqual(xi[2][1][32], 0.095, 3)
        self.assertAlmostEqual(xi[1][2][4],  0.02,  3)
        self.assertAlmostEqual(xi[1][2][16], 0.018, 3)
        self.assertAlmostEqual(xi[1][2][29], 0.010, 3)
        self.assertAlmostEqual(xi[2][2][2],  0.972, 3)
        self.assertAlmostEqual(xi[2][2][12], 0.762, 3)
        self.assertAlmostEqual(xi[2][2][28], 0.907, 3)

    def test_learning_results(self):
        trained = self.hmm.train_on_obs(self.obs)

        tr = trained.transition
        self.assertAlmostEqual(tr(0, 0), 0,      5)
        self.assertAlmostEqual(tr(0, 1), 0.1291, 4)
        self.assertAlmostEqual(tr(0, 2), 0.8709, 4)
        self.assertAlmostEqual(tr(0, 3), 0,      4)
        self.assertAlmostEqual(tr(1, 0), 0,      5)
        self.assertAlmostEqual(tr(1, 1), 0.8757, 4)
        self.assertAlmostEqual(tr(1, 2), 0.1090, 4)
        self.assertAlmostEqual(tr(1, 3), 0.0153, 4)
        self.assertAlmostEqual(tr(2, 0), 0,      5)
        self.assertAlmostEqual(tr(2, 1), 0.0925, 4)
        self.assertAlmostEqual(tr(2, 2), 0.8652, 4)
        self.assertAlmostEqual(tr(2, 3), 0.0423, 4)
        self.assertAlmostEqual(tr(3, 0), 0,      5)
        self.assertAlmostEqual(tr(3, 1), 0,      4)
        self.assertAlmostEqual(tr(3, 2), 0,      4)
        self.assertAlmostEqual(tr(3, 3), 1,      4)

        em = trained.emission
        self.assertAlmostEqual(em(0, 1), 0,      4)
        self.assertAlmostEqual(em(0, 2), 0,      4)
        self.assertAlmostEqual(em(0, 3), 0,      4)
        self.assertAlmostEqual(em(1, 1), 0.6765, 4)
        self.assertAlmostEqual(em(1, 2), 0.2188, 4)
        self.assertAlmostEqual(em(1, 3), 0.1047, 4)
        self.assertAlmostEqual(em(2, 1), 0.0584, 4)
        self.assertAlmostEqual(em(2, 2), 0.4251, 4)
        self.assertAlmostEqual(em(2, 3), 0.5165, 4)
        self.assertAlmostEqual(em(3, 1), 0,      4)
        self.assertAlmostEqual(em(3, 2), 0,      4)
        self.assertAlmostEqual(em(3, 3), 0,      4)

        # train 9 more times
        for i in range(9):
            trained = trained.train_on_obs(self.obs)

        tr = trained.transition
        self.assertAlmostEqual(tr(0, 0), 0,      4)
        self.assertAlmostEqual(tr(0, 1), 0,      4)
        self.assertAlmostEqual(tr(0, 2), 1,      4)
        self.assertAlmostEqual(tr(0, 3), 0,      4)
        self.assertAlmostEqual(tr(1, 0), 0,      4)
        self.assertAlmostEqual(tr(1, 1), 0.9337, 4)
        self.assertAlmostEqual(tr(1, 2), 0.0663, 4)
        self.assertAlmostEqual(tr(1, 3), 0,      4)
        self.assertAlmostEqual(tr(2, 0), 0,      4)
        self.assertAlmostEqual(tr(2, 1), 0.0718, 4)
        self.assertAlmostEqual(tr(2, 2), 0.8650, 4)
        self.assertAlmostEqual(tr(2, 3), 0.0632, 4)
        self.assertAlmostEqual(tr(3, 0), 0,      4)
        self.assertAlmostEqual(tr(3, 1), 0,      4)
        self.assertAlmostEqual(tr(3, 2), 0,      4)
        self.assertAlmostEqual(tr(3, 3), 1,      4)

        em = trained.emission
        self.assertAlmostEqual(em(0, 1), 0,      4)
        self.assertAlmostEqual(em(0, 2), 0,      4)
        self.assertAlmostEqual(em(0, 3), 0,      4)
        self.assertAlmostEqual(em(1, 1), 0.6407, 4)
        self.assertAlmostEqual(em(1, 2), 0.1481, 4)
        self.assertAlmostEqual(em(1, 3), 0.2112, 4)
        self.assertAlmostEqual(em(2, 1), 0.00016,5)
        self.assertAlmostEqual(em(2, 2), 0.5341, 4)
        self.assertAlmostEqual(em(2, 3), 0.4657, 4)
        self.assertAlmostEqual(em(3, 1), 0,      4)
        self.assertAlmostEqual(em(3, 2), 0,      4)
        self.assertAlmostEqual(em(3, 3), 0,      4)

if __name__ == '__main__':
    import sys
    HMM_FILENAME = sys.argv[1] if len(sys.argv) &gt;= 2 else 'example.hmm'
    OBS_FILENAME = sys.argv[2] if len(sys.argv) &gt;= 3 else 'observations.txt'

    unittest.main()
</snippet></ROW><ROW><id>7962692</id><snippet>observations.txt</snippet></ROW><ROW><id>7962692</id><snippet>2
3
3
2
3
2
3
2
2
3
1
3
3
1
1
1
2
1
1
1
3
1
2
1
1
1
2
3
3
2
3
2
2
</snippet></ROW><ROW><id>7962692</id><snippet>example.hmm</snippet></ROW><ROW><id>7962692</id><snippet>4 # number of states
START
COLD
HOT
END

3 # size of vocab
1
2
3

# transition matrix
0.0 0.5 0.5 0.0  # from start
0.0 0.8 0.1 0.1  # from cold
0.0 0.1 0.8 0.1  # from hot
0.0 0.0 0.0 1.0  # from end

# emission matrix
0.0 0.0 0.0  # from start
0.7 0.2 0.1  # from cold
0.1 0.2 0.7  # from hot
0.0 0.0 0.0  # from end
</snippet></ROW><ROW><id>7963532</id><snippet>SMTPException</snippet></ROW><ROW><id>7963532</id><snippet>smtplib.SMTPException</snippet></ROW><ROW><id>7963532</id><snippet>from smtplib import SMTPException</snippet></ROW><ROW><id>7963576</id><snippet>This project is no longer updated. Please see http://github.com/dcramer/django-sentry for its successor
</snippet></ROW><ROW><id>7963687</id><snippet>class QSettings(fileName, format[, parent=None])</snippet></ROW><ROW><id>7963687</id><snippet>self.settings = QSettings("__settings.ini", QSettings.IniFormat)
</snippet></ROW><ROW><id>7963751</id><snippet>def recursive_dict_sum_helper(v1, v2):
    # "add" two values: if they can be added with '+', then do so,
    # otherwise expect dictionaries and treat them appropriately.
    try: return v1 + v2
    except: return recursive_dict_sum(v1, v2)

def recursive_dict_sum(d1, d2):
    # Recursively produce the new key-value pair for each
    # original key-value pair, and make a dict with the results.
    return dict(
        (k, recursive_dict_sum_helper(v, d2[k]))
        for (k, v) in d1.items()
    )

mainDict = recursive_dict_sum(mainDict, b)
</snippet></ROW><ROW><id>7963782</id><snippet>import os
import shutil
import subprocess

def loop_loc3d(file_in):
    """Loops loc3d over the source files"""
    return subprocess.call(["loc3d"], shell=True)

path = "/Users/software/fmtomo/remaker_lastplot/source_relocation"
path2 = "/Users/Programming/working_directory/2test"
new_file_name = 'observed_arrivals'
def define_object_file ():
    for filename in os.listdir("."):
        file_in = os.rename (filename, new_file_name) # get the observal_arrivals file
        file_in = shutil.copy ("/Users/simone/Programming/working_directory/2test/observed_arrivals", "/Users/software/fmtomo/remaker_lastplot/source_relocation")
        os.chdir(path) # goes where loc3d is
        loop_loc3d (file_in)
        os.remove("/Users/software/fmtomo/remaker_lastplot/source_relocation/observed_arrivals")
        os.remove ("/Users/Programming/working_directory/2test/observed_arrivals")
        os.chdir(path2)
</snippet></ROW><ROW><id>7964005</id><snippet>HTTPNotFound</snippet></ROW><ROW><id>7964278</id><snippet>COLORS = ["red", "blue", "black", "yellow", "green"]
NUMBERS = ['0', '1', '2', '3', '4']
PANELS = ["Things", "More things", "Ultra!"]

import random
import wx

class TabPanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.SetBackgroundColour(random.choice(COLORS))
        self.listBox = wx.ListBox(self, size=(200, -1), choices=NUMBERS, style=wx.LB_SINGLE)
#        self.button = wx.Button(self, label="Something else here? Maybe!")

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.listBox, proportion=0, flag=wx.ALL | wx.EXPAND, border=5)
#        self.sizer.Add(self.button, proportion=1, flag=wx.ALL)

        self.SetSizer(self.sizer)


class MyNotebook(wx.Notebook):
    def __init__(self, *args, **kwargs):
        wx.Notebook.__init__(self, *args, **kwargs)

        self.panels = []
        for name in PANELS:
            panel = TabPanel(self)
            self.panels.append(panel)
            self.AddPage(panel, name)


class MyPanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)

        self.notebook = MyNotebook(self, size=(400, -1))
#        self.button = wx.Button(self, label="Something else here? Maybe!")

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.notebook, proportion=0, flag=wx.EXPAND)
#        self.sizer.Add(self.button, proportion=0)
        self.SetSizer(self.sizer)


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = MyPanel(self)

        self.status = self.CreateStatusBar()

        self.menubar = wx.MenuBar()
        first=wx.Menu()
        second=wx.Menu()
        first.Append(wx.NewId(), "New", "Creates A new file")
        first.Append(wx.NewId(), "ADID", "Yo")
        self.menubar.Append(first, "File")
        self.menubar.Append(second, "Edit")
        self.SetMenuBar(self.menubar)

        self.Show()


app = wx.App(False)
win = MainWindow(None, size=(600, 400))
app.MainLoop()
</snippet></ROW><ROW><id>7964422</id><snippet>get</snippet></ROW><ROW><id>7964501</id><snippet>(future (some-function))</snippet></ROW><ROW><id>7965197</id><snippet>class MathOperations:
    def testAddition (self,x, y):
        return x + y

    def testMultiplication (self,a, b):
        return a * b
</snippet></ROW><ROW><id>7965197</id><snippet>tmp = MathOperations
print tmp.testAddition(2,3)
</snippet></ROW><ROW><id>7965197</id><snippet>print MathOperation.testAddtion(2,3)
</snippet></ROW><ROW><id>7965197</id><snippet>class MathsOperations:
    @staticmethod
    def testAddition (x, y):
        return x + y

    @staticmethod
    def testMultiplication (a, b):
        return a * b
</snippet></ROW><ROW><id>7965197</id><snippet>print MathsOperations.testAddition(2,3)
</snippet></ROW><ROW><id>7965446</id><snippet>unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>7965446</id><snippet>suite</snippet></ROW><ROW><id>7965536</id><snippet>bins</snippet></ROW><ROW><id>7965536</id><snippet>bins=[1,2,3,..,120,30000,60000]</snippet></ROW><ROW><id>7965536</id><snippet>bins = [100,125,150,160,170,180,190,200,210,220,230,240,250,275,300]</snippet></ROW><ROW><id>7965746</id><snippet>.serialize()</snippet></ROW><ROW><id>7965746</id><snippet>jQuery.post()</snippet></ROW><ROW><id>7965953</id><snippet>save</snippet></ROW><ROW><id>7965953</id><snippet>django.contrib.auth.forms.PasswordResetForm</snippet></ROW><ROW><id>7965953</id><snippet>password_reset</snippet></ROW><ROW><id>7966081</id><snippet>$ locate girepository | grep WebKit
/usr/lib/girepository-1.0/WebKit-3.0.typelib
</snippet></ROW><ROW><id>7966081</id><snippet># apt-get install gir1.2-webkit-3.0 
</snippet></ROW><ROW><id>7966081</id><snippet>import gi
gi.require_version('WebKit', '3.0')
from gi.repository import WebKit
</snippet></ROW><ROW><id>7966095</id><snippet>setattr()</snippet></ROW><ROW><id>7966095</id><snippet>def __init__(self, details):
    for field,value in details.iteritems():
        setattr(self, field, value)
</snippet></ROW><ROW><id>7966096</id><snippet>unittest</snippet></ROW><ROW><id>7966096</id><snippet>unittest2</snippet></ROW><ROW><id>7966096</id><snippet>import glob
import sys
import TestBase
sys.path.append("tests")
for path in glob.iglob("tests/*.py"):
    module = __import__(os.path.basename(path)[:-3])
    for name in dir(module):
        obj = getattr(module, name)
        if isinstance(obj, type) and issubclass(obj, TestBase.TestBase):
            test = obj()
            test.TestFunction()
</snippet></ROW><ROW><id>7966208</id><snippet>__missing__</snippet></ROW><ROW><id>7966208</id><snippet>dict</snippet></ROW><ROW><id>7966208</id><snippet>__missing__</snippet></ROW><ROW><id>7966208</id><snippet>class A(dict):
    def __missing__(self, key):
        value = self[key] = [None] * key
        return value
</snippet></ROW><ROW><id>7966437</id><snippet>Escape</snippet></ROW><ROW><id>7966437</id><snippet>Escape</snippet></ROW><ROW><id>7966437</id><snippet>import Tkinter as tk

class FullScreenApp(object):
    def __init__(self, master, **kwargs):
        self.master=master
        pad=3
        self._geom='200x200+0+0'
        master.geometry("{0}x{1}+0+0".format(
            master.winfo_screenwidth()-pad, master.winfo_screenheight()-pad))
        master.bind('&lt;Escape&gt;',self.toggle_geom)            
    def toggle_geom(self,event):
        geom=self.master.winfo_geometry()
        print(geom,self._geom)
        self.master.geometry(self._geom)
        self._geom=geom

root=tk.Tk()
app=FullScreenApp(root)
root.mainloop()
</snippet></ROW><ROW><id>7966719</id><snippet>subprocess.check_call([EDITOR, file_path])
</snippet></ROW><ROW><id>7966719</id><snippet>OSError</snippet></ROW><ROW><id>7966719</id><snippet>EDITOR</snippet></ROW><ROW><id>7967206</id><snippet>lxml</snippet></ROW><ROW><id>7967206</id><snippet>import lxml.etree as et

xmltext = """
&lt;root&gt;
    &lt;fruit&gt;apple&lt;/fruit&gt;
    &lt;fruit&gt;pear&lt;/fruit&gt;
    &lt;fruit&gt;mango&lt;/fruit&gt;
    &lt;fruit&gt;kiwi&lt;/fruit&gt;
&lt;/root&gt;
"""

tree = et.fromstring(xmltext)

for fruit in tree.xpath('//fruit'):
    fruit.text = 'rotten %s' % (fruit.text,)

print et.tostring(tree, pretty_print=True)
</snippet></ROW><ROW><id>7967206</id><snippet>&lt;root&gt;
    &lt;fruit&gt;rotten apple&lt;/fruit&gt;
    &lt;fruit&gt;rotten pear&lt;/fruit&gt;
    &lt;fruit&gt;rotten mango&lt;/fruit&gt;
    &lt;fruit&gt;rotten kiwi&lt;/fruit&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>7967279</id><snippet>__dict__</snippet></ROW><ROW><id>7967279</id><snippet>class foo(object):
    def go(self, method):
        getattr(self, method)()

    def a(self):
        ...

    def b(self):
        ...
</snippet></ROW><ROW><id>7967279</id><snippet>class foo(object):
    methods = { 1: 'a', 2: 'b' }
    def go(self, n):
        getattr(self, self.methods[n])()
</snippet></ROW><ROW><id>7967574</id><snippet>Event.past_school_year_events.all()</snippet></ROW><ROW><id>7967574</id><snippet>self.model</snippet></ROW><ROW><id>7967574</id><snippet>past_school_year_events</snippet></ROW><ROW><id>7967574</id><snippet>get_query_set</snippet></ROW><ROW><id>7967574</id><snippet>SchoolYearManager</snippet></ROW><ROW><id>7967574</id><snippet>class SchoolYearManager(models.Manager):
    def live_events(self, start_date, end_date):
       return self.filter(status=self.model.LIVE).filter(event_date__range=(start_date, end_date))

    def this_year(self):
        now = datetime.datetime.now()
        current_year = now.year
        start_date = datetime.date(current_year, 7, 1)
        end_date = datetime.date((current_year + 1), 6, 30)
        return self.live_events(start_date, end_date)

    def from_year(self, year):
        start_date = datetime.date(year, 7, 1)
        end_date = datetime.date(year+1, 6, 30)
        return self.live_events(start_date, end_date)
</snippet></ROW><ROW><id>7967574</id><snippet>get_query_set</snippet></ROW><ROW><id>7967574</id><snippet>objects</snippet></ROW><ROW><id>7967574</id><snippet>Event.objects.this_year()  # all this year's events
Event.objects.from_year(2010) # all events from 2010
</snippet></ROW><ROW><id>7967636</id><snippet>&lt;?xml version="1.0"?&gt;

&lt;?xml-stylesheet href="chrome://global/skin/" type="text/css"?&gt;

&lt;window id="main" title="My App" width="300" height="300" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"&gt;

  &lt;script type="application/javascript" src="chrome://myapp/content/main.js"/&gt;

  &lt;caption label="Hello World"/&gt;
  &lt;separator/&gt;
  &lt;button label="More &gt;&gt;" oncommand="showMore();"/&gt;
  &lt;separator/&gt;
  &lt;description id="more-text" hidden="true"&gt;This is a simple XULRunner application. XUL is simple to use and quite powerful and can even be used on mobile devices.&lt;/description&gt;

&lt;/window&gt;
</snippet></ROW><ROW><id>7967636</id><snippet>function showMore() {
  document.getElementById("more-text").hidden = false;
}
</snippet></ROW><ROW><id>7967905</id><snippet>def my_dict(obj):
    if not  hasattr(obj,"__dict__"):
        return obj
    result = {}
    for key, val in obj.__dict__.items():
        if key.startswith("_"):
            continue
        if isinstance(val, list):
            element = []
            for item in val:
                elements.append(my_dict(item))
        else:
            element = my_dict(item)
        result[key] = element
    return result
</snippet></ROW><ROW><id>7968098</id><snippet>defaultdict</snippet></ROW><ROW><id>7968098</id><snippet>from collections import defaultdict

datasets = [{'foo': 3}, {'bar': 4}], [{'bar': 1}, {'foo': 8}]    

result = defaultdict(list)

for dataset in datasets:
    for eachdict in dataset:
        for key, value in eachdict.iteritems():
            result[key].append(value)

# the nested loops as a one-liner (utterly unnecessary):
# any(result[key].append(value) for dataset in datasets 
#                               for eachdict in dataset 
#                               for key, value in eachdict.iteritems())


# if you really need your output in exactly that format:
# result = [(key,) + tuple(values) for key, values in result.iteritems()]
print result
</snippet></ROW><ROW><id>7968117</id><snippet>SELECT sum(investment.amount)
FROM investment, maturity_date
WHERE investment.id = maturity_date.investment_id and year=%s
GROUP BY investment.amount
</snippet></ROW><ROW><id>7968117</id><snippet>investments = Investment.objects.all().filter(plan = p).order_by('financial_institution')
cur_inv = investments.filter(maturity_date__year = current_year)
nxt_inv = investments.filter(maturity_date__year = next_yr)
thr_inv = investments.filter(maturity_date__year = thr_yr)
fr_inv = investments.filter(maturity_date__year = fr_yr)
fv_inv = investments.filter(maturity_date__year = fv_yr)
</snippet></ROW><ROW><id>7968247</id><snippet>urlpatterns += patterns('',
    url(r'^(?P&lt;loc&gt;\w+)/(?P&lt;subctg&gt;\w+)/(?P&lt;title&gt;\w+)/$',
                         'beta.views.queryFromIndexDeep'),
)
</snippet></ROW><ROW><id>7968247</id><snippet>beta.views.queryFromIndexDeep(request, loc, subctg, title)</snippet></ROW><ROW><id>7968320</id><snippet>where id=(select max(id)from entries)</snippet></ROW><ROW><id>7968320</id><snippet>&lt;a href="{{ url_for('delete_entry', entry.id) }}"&gt;Delete&lt;/a&gt;
</snippet></ROW><ROW><id>7968320</id><snippet>g.db.execute('delete from entries where id=' + id)
</snippet></ROW><ROW><id>7968320</id><snippet>@app.route('/delete/&lt;int:entry_id&gt;')
</snippet></ROW><ROW><id>7968320</id><snippet>def delete_entry(entry_id):
g.db.execute('delete from entries where id=' + entry_id)
</snippet></ROW><ROW><id>7968320</id><snippet>&lt;a href="{{ url_for('delete_entry', entry_id = entry.id) }}"&gt;Delete&lt;/a&gt;
</snippet></ROW><ROW><id>7968680</id><snippet>curl</snippet></ROW><ROW><id>7968680</id><snippet>except IOError, e</snippet></ROW><ROW><id>7968680</id><snippet>except IOError as e</snippet></ROW><ROW><id>7968690</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def forceAspect(ax,aspect=1):
    im = ax.get_images()
    extent =  im[0].get_extent()
    ax.set_aspect(abs((extent[1]-extent[0])/(extent[3]-extent[2]))/aspect)

data = np.random.rand(10,20)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(data)
ax.set_xlabel('xlabel')
ax.set_aspect(2)
fig.savefig('equal.png')
ax.set_aspect('auto')
fig.savefig('auto.png')
forceAspect(ax,aspect=1)
fig.savefig('force.png')
</snippet></ROW><ROW><id>7968690</id><snippet>axes.set_aspect()</snippet></ROW><ROW><id>7968690</id><snippet>axes.set_aspect('auto')</snippet></ROW><ROW><id>7968690</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.rand(10,20)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(data)
ax.set_aspect('equal')
fig.savefig('equal.png')
ax.set_aspect('auto')
fig.savefig('auto.png')
</snippet></ROW><ROW><id>7968690</id><snippet>import matplotlib.pyplot as plt

def adjustFigAspect(fig,aspect=1):
    '''
    Adjust the subplot parameters so that the figure has the correct
    aspect ratio.
    '''
    xsize,ysize = fig.get_size_inches()
    minsize = min(xsize,ysize)
    xlim = .4*minsize/xsize
    ylim = .4*minsize/ysize
    if aspect &lt; 1:
        xlim *= aspect
    else:
        ylim /= aspect
    fig.subplots_adjust(left=.5-xlim,
                        right=.5+xlim,
                        bottom=.5-ylim,
                        top=.5+ylim)

fig = plt.figure()
adjustFigAspect(fig,aspect=.5)
ax = fig.add_subplot(111)
ax.plot(range(10),range(10))

fig.savefig('axAspect.png')
</snippet></ROW><ROW><id>7968690</id><snippet>hspace</snippet></ROW><ROW><id>7968690</id><snippet>wspace</snippet></ROW><ROW><id>7968710</id><snippet>class Listener:
    def __init__(self, data_to_catch):
        self.data_to_catch = data_to_catch
        self.data = ""
        self.found = False
        self.pos = 0

    def process(self, data):
        if self.found:
            return

        self.data += data
        self.found = self.data_to_catch in self.data[self.pos:]
        self.pos = max(0, len(self.data) - len(self.data_to_catch))

        if self.found:
            print "found!"

l = Listener("hello")
l.process("he")
l.process("llh")
l.process("e")
l.process("ll")
l.process("he")
l.process("llohe")
</snippet></ROW><ROW><id>7968710</id><snippet>self.data</snippet></ROW><ROW><id>7968710</id><snippet>    def process(self, data):
        if self.found:
            return

        self.data += data
        self.found = self.data_to_catch in self.data

        pos = max(0, len(self.data) - len(self.data_to_catch))
        self.data = self.data[pos:]

        if self.found:
            print "found!"
</snippet></ROW><ROW><id>7968772</id><snippet>arparse</snippet></ROW><ROW><id>7968772</id><snippet>args.arg_name
</snippet></ROW><ROW><id>7968772</id><snippet>args["arg_name"]
</snippet></ROW><ROW><id>7968772</id><snippet>Namespace</snippet></ROW><ROW><id>7968772</id><snippet>argparse</snippet></ROW><ROW><id>7968772</id><snippet>init_function(**args.__dict__)</snippet></ROW><ROW><id>7968953</id><snippet>itertools</snippet></ROW><ROW><id>7968953</id><snippet>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result
    for elem in it:
        result = result[1:] + (elem,)
        yield result

def does_segment_exist(iterable, sublist):
    return tuple(sublist) in window(iterable, len(sublist))

print(does_segment_exist([1,3,4,5,2], [3,4,5]))
</snippet></ROW><ROW><id>7968953</id><snippet>def does_segment_exist(seq, sublist):
    # seq and sublist must both be lists
    n = len(sublist)
    return sublist in (seq[i:i+n] for i in range(len(seq) + 1 - n))
</snippet></ROW><ROW><id>7968953</id><snippet>def does_segment_exist(seq, sublist):
    first = sublist[0]
    i = 0
    n = len(sublist)
    while True:
        try:
            i = seq.index(first, i)
        except ValueError:
            return False
        if sublist == seq[i:i+n]:
            return True
        i += 1

print(does_segment_exist([1,3,4,5,2], [3,4,5]))
</snippet></ROW><ROW><id>7969318</id><snippet>#!/usr/bin/python
import sys

if len(sys.argv) &lt; 2:
    print "you did not give any arguments\n"
else:
    print sys.argv[1]
</snippet></ROW><ROW><id>7969318</id><snippet>$ ./foo.py 
you did not give any arguments

$ ./foo.py hello_world
hello_world
$ 
</snippet></ROW><ROW><id>7969329</id><snippet>attachThreadToJVM</snippet></ROW><ROW><id>7969329</id><snippet>import neo4j</snippet></ROW><ROW><id>7969329</id><snippet>threading.Thread</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>_</snippet></ROW><ROW><id>7969447</id><snippet>lambda</snippet></ROW><ROW><id>7969447</id><snippet>lambda x, *args: ...</snippet></ROW><ROW><id>7969447</id><snippet>dummy</snippet></ROW><ROW><id>7969447</id><snippet>range()</snippet></ROW><ROW><id>7969447</id><snippet>for i in range(n)</snippet></ROW><ROW><id>7969447</id><snippet>i</snippet></ROW><ROW><id>7969447</id><snippet>lambda x, *args: ...</snippet></ROW><ROW><id>7969617</id><snippet>TypeError</snippet></ROW><ROW><id>7969617</id><snippet>if (PyNumber_Check(v))
    vname = "";
else
    vname = v-&gt;ob_type-&gt;tp_name;
if (PyNumber_Check(w))
    wname = "";
else
    wname = w-&gt;ob_type-&gt;tp_name;
c = strcmp(vname, wname);
</snippet></ROW><ROW><id>7969812</id><snippet>str.strip()</snippet></ROW><ROW><id>7969812</id><snippet>&gt;&gt;&gt; '"abcd'.strip( '"\'' )
'abcd'
&gt;&gt;&gt; '\'blahblah'.strip( '"\'' )
'blahblah'
&gt;&gt;&gt; print( '"abcd'.strip( '"\'' ) )
abcd
&gt;&gt;&gt; print( '\'blahblah'.strip( '"\'' ) )
blahblah
</snippet></ROW><ROW><id>7969864</id><snippet>value=sum([ord(x) for x in name])
</snippet></ROW><ROW><id>7969881</id><snippet>'psftp' +devserv.split()</snippet></ROW><ROW><id>7969881</id><snippet>('psftp' +devserv).split()</snippet></ROW><ROW><id>7969881</id><snippet>split</snippet></ROW><ROW><id>7969913</id><snippet>+=</snippet></ROW><ROW><id>7969913</id><snippet>total_m*</snippet></ROW><ROW><id>7969913</id><snippet>0</snippet></ROW><ROW><id>7969953</id><snippet>globals()</snippet></ROW><ROW><id>7969953</id><snippet>locals()</snippet></ROW><ROW><id>7969953</id><snippet>vars()</snippet></ROW><ROW><id>7969953</id><snippet>locals</snippet></ROW><ROW><id>7969953</id><snippet>vars</snippet></ROW><ROW><id>7969953</id><snippet>locals()</snippet></ROW><ROW><id>7969953</id><snippet>def test():
    a = 1
    b = 2
    huh = locals()
    c = 3
    print(huh)
    huh['d'] = 4
    print(d)
</snippet></ROW><ROW><id>7969953</id><snippet>{'a': 1, 'b': 2}
Traceback (most recent call last):
  File "test.py", line 30, in &lt;module&gt;
    test()
  File "test.py", line 26, in test
    print(d)
NameError: global name 'd' is not defined
</snippet></ROW><ROW><id>7969953</id><snippet>exec "pass"</snippet></ROW><ROW><id>7969953</id><snippet>locals()</snippet></ROW><ROW><id>7969953</id><snippet>class Test(object):
    a = 'one'
    b = 'two'
    huh = locals()
    c = 'three'
    huh['d'] = 'four'
    print huh
</snippet></ROW><ROW><id>7969953</id><snippet>{
  'a': 'one',
  'b': 'two',
  'c': 'three',
  'd': 'four',
  'huh': {...},
  '__module__': '__main__',
}
</snippet></ROW><ROW><id>7969953</id><snippet>locals()</snippet></ROW><ROW><id>7969953</id><snippet>vars()</snippet></ROW><ROW><id>7969953</id><snippet>vars()</snippet></ROW><ROW><id>7969953</id><snippet>__dict__</snippet></ROW><ROW><id>7969953</id><snippet>__dict__</snippet></ROW><ROW><id>7969953</id><snippet>class Test(object):
    a = 'one'
    b = 'two'
    def frobber(self):
        print self.c
t = Test()
huh = vars(t)
huh['c'] = 'three'
t.frobber()
</snippet></ROW><ROW><id>7969953</id><snippet>three
</snippet></ROW><ROW><id>7969953</id><snippet>__dict__</snippet></ROW><ROW><id>7969953</id><snippet>def test():
    a = 1
    b = 2
    print test.c
huh = vars(test)       # these two lines are the same as 'test.c = 3'
huh['c'] = 3
test()
</snippet></ROW><ROW><id>7969953</id><snippet>3
</snippet></ROW><ROW><id>7970127</id><snippet>[]</snippet></ROW><ROW><id>7970127</id><snippet>[ab]</snippet></ROW><ROW><id>7970127</id><snippet>a</snippet></ROW><ROW><id>7970127</id><snippet>b</snippet></ROW><ROW><id>7970127</id><snippet>[^pib(strong)]</snippet></ROW><ROW><id>7970127</id><snippet>p</snippet></ROW><ROW><id>7970127</id><snippet>i</snippet></ROW><ROW><id>7970127</id><snippet>b</snippet></ROW><ROW><id>7970127</id><snippet>(</snippet></ROW><ROW><id>7970127</id><snippet>^</snippet></ROW><ROW><id>7970127</id><snippet>lxml</snippet></ROW><ROW><id>7970127</id><snippet>from lxml import html
dom = html.fromstring(your_code)
illegal = set(dom.cssselect('*')) - set(dom.cssselect('p,b'))
for tag in illegal:
    do_something_with(tag)
</snippet></ROW><ROW><id>7970127</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7970286</id><snippet>oauth2.clients.imap</snippet></ROW><ROW><id>7970286</id><snippet>import oauth2 as oauth
import oauth2.clients.imap as imaplib

# the rest of your code as it was
</snippet></ROW><ROW><id>7970336</id><snippet>r'&lt;a\s[^&gt;]*&gt;([^&lt;]*)&lt;/a&gt;|\b(\w+://[^&lt;&gt;\'"\t\r\n\xc2\xa0]*[^&lt;&gt;\'"\t\r\n\xc2\xa0 .,()])'
</snippet></ROW><ROW><id>7970336</id><snippet>map(''.join, re.findall(pattern, content))
</snippet></ROW><ROW><id>7970336</id><snippet>src</snippet></ROW><ROW><id>7970336</id><snippet>r'&lt;a\s[^&gt;]*src=[\'"]([^"\']*)[\'"][^&gt;]*&gt;[^&lt;]*&lt;/a&gt;|\b(\w+://[^&lt;&gt;\'"\t\r\n\xc2\xa0]*[^&lt;&gt;\'"\t\r\n\xc2\xa0 .,()])'
</snippet></ROW><ROW><id>7970336</id><snippet>src</snippet></ROW><ROW><id>7970336</id><snippet>r'\b\w+://[^&lt;&gt;\'"\t\r\n\xc2\xa0]*[^&lt;&gt;\'"\t\r\n\xc2\xa0 .,()]'
</snippet></ROW><ROW><id>7970336</id><snippet>'://'</snippet></ROW><ROW><id>7970715</id><snippet>total = 0
for line in infile:
    line = line.strip("\n")
    if line.startswith('&gt;'):
        name = line
    else:
        pattern = line.count('P') 
        total += pattern
        print '%s:%s' %(name,pattern)

#this goes outside the for loop
out.write('%s:%s\n' %(name,total))
</snippet></ROW><ROW><id>7970789</id><snippet>import string
def Validate(self, win):
    """
    Enter your code here...
    """
    return True


def OnChar(self, event):
    txtObj = event.GetEventObject()
    txt = txtObj.GetValue()
    if txt == "": txt = '0'
    key = chr(event.GetKeyCode())

    if key in string.digits:
        if int(txt+str(key)) &lt; 150:
            event.Skip()
        else:
            msg = "You have entered an age greater than 150!"
            wx.MessageBox(msg, "Improbable entry", style=wx.OK|wx.ICON_ERROR)

            # PROBLEM ARISES HERE
            # ===================
            MyDialog().ageWarning_ST.Show()
            MyDialog().mainSizer.Fit(MyDialog())

            return False

    key = event.GetKeyCode()
    if key in(wx.WXK_RETURN, wx.WXK_DELETE, wx.WXK_BACK):
        event.Skip()

    elif (chr(key)).isdigit():
        event.Skip()
    else:
        return
</snippet></ROW><ROW><id>7970843</id><snippet>BaseHandler</snippet></ROW><ROW><id>7970843</id><snippet>prepare()</snippet></ROW><ROW><id>7970843</id><snippet>prepare</snippet></ROW><ROW><id>7970843</id><snippet>superclass.prepare</snippet></ROW><ROW><id>7970843</id><snippet>subclass.prepare</snippet></ROW><ROW><id>7970843</id><snippet>class MetaHandler(type):
    def __new__(cls, name, bases, attrs):
        instance = type.__new__(cls, name, bases, attrs)
        super_instance = super(instance, instance)
        if hasattr(super_instance, 'prepare') and hasattr(instance, 'prepare'):
            super_prepare = getattr(super_instance, 'prepare')
            sub_prepare = getattr(instance, 'prepare')
            def new_prepare(self):
                super_prepare(self)
                sub_prepare(self)
            setattr(instance, 'prepare', new_prepare)
        return instance


class BaseHandler(object):
    __metaclass__ = MetaHandler
    def prepare(self):
        print 'BaseHandler.prepare'


class SubHandler(BaseHandler):
    def prepare(self):
        print 'SubHandler.prepare'
</snippet></ROW><ROW><id>7970843</id><snippet>&gt;&gt;&gt; sh = SubHandler()
&gt;&gt;&gt; sh.prepare()
BaseHandler.prepare
SubHandler.prepare
</snippet></ROW><ROW><id>7970943</id><snippet>#define cal_client:
self.cal_client = gdata.calendar.client.CalendarClient(source='Milosz-GCal-1.0')
#initiate calendar service (log in):
self.cal_client.ClientLogin(email, password, self.cal_client.source);
#get url for custom calendar (cal_index):
self.cal_url=self.cal_client.GetOwnCalendarsFeed().entry[self.cal_index].GetAlternateLink().href
#then, to read from the custom calendar:
self.feed=self.cal_client.GetCalendarEventFeed(self.cal_url)
#and to write to custom calendar:
new_event = self.cal_client.InsertEvent(event,self.cal_url)
</snippet></ROW><ROW><id>7971091</id><snippet>which python</snippet></ROW><ROW><id>7971091</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7971091</id><snippet>/home/myuser/bin/python</snippet></ROW><ROW><id>7971091</id><snippet>#!/home/myuser/bin/python
</snippet></ROW><ROW><id>7971091</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7971091</id><snippet>import sys; sys.path.append('/path/to/MySQLdb-lib/')
</snippet></ROW><ROW><id>7971354</id><snippet>QTextHtmlImporter</snippet></ROW><ROW><id>7971354</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        self.edit = QtGui.QTextEdit(self)
        self.undo = QtGui.QPushButton('Undo')
        self.redo = QtGui.QPushButton('Redo')
        self.insert = QtGui.QPushButton('Set Html')
        layout.addWidget(self.edit)
        layout.addWidget(self.undo)
        layout.addWidget(self.redo)
        layout.addWidget(self.insert)
        self.undo.clicked.connect(self.edit.undo)
        self.redo.clicked.connect(self.edit.redo)
        self.insert.clicked.connect(self.handleInsert)
        self.edit.append('One')
        self.edit.append('Two')
        self.edit.append('Three')

    def handleInsert(self):
        cursor = QtGui.QTextCursor(self.edit.document())
        cursor.select(QtGui.QTextCursor.Document)
        cursor.insertHtml("""&lt;p&gt;Some &lt;b&gt;HTML&lt;/b&gt; text&lt;/p&gt;""")

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    win = Window()
    win.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7971420</id><snippet>velx</snippet></ROW><ROW><id>7971420</id><snippet>vely</snippet></ROW><ROW><id>7971655</id><snippet>dict</snippet></ROW><ROW><id>7971655</id><snippet>n_items = take(n, d.iteritems())
</snippet></ROW><ROW><id>7971655</id><snippet>take</snippet></ROW><ROW><id>7971655</id><snippet>itertools</snippet></ROW><ROW><id>7971655</id><snippet>from itertools import islice

def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))
</snippet></ROW><ROW><id>7971800</id><snippet>slugify</snippet></ROW><ROW><id>7971800</id><snippet>&gt;&gt;&gt; from django.template.defaultfilters import slugify
&gt;&gt;&gt; for obj in MyModel.objects.all():
...     obj.slug = slugify(obj.title)
...     obj.save()
</snippet></ROW><ROW><id>7971923</id><snippet>dict</snippet></ROW><ROW><id>7971923</id><snippet>(key, value)</snippet></ROW><ROW><id>7971923</id><snippet>&gt;&gt;&gt; x = ((1L, 'I.T.'), (2L, 'Project Management'), (3L, 'Creative'), (4L, 'Programming'), (5L, 'Sales'), (6L, 'Administration'), (7L, 'AV'), (8L, 'Human Resources'), (9L, 'Conference Rooms'), (10L, 'Testing'), (11L, 'none')
&gt;&gt;&gt; dict(x)
{1L: 'I.T.', 2L: 'Project Management', 3L: 'Creative', 4L: 'Programming', 5L: 'Sales', 6L: 'Administration', 7L: 'AV', 8L: 'Human Resources', 9L: 'Conference Rooms', 10L: 'Testing', 11L: 'none'}
</snippet></ROW><ROW><id>7972101</id><snippet>tree.findall( './/bar' )</snippet></ROW><ROW><id>7972101</id><snippet>bar</snippet></ROW><ROW><id>7972225</id><snippet>from selenium import webdriver
b = webdriver.Firefox()
b.find_element_by_xpath("//select[@name='element_name']/option[text()='option_text']").click()
</snippet></ROW><ROW><id>7972341</id><snippet>next()</snippet></ROW><ROW><id>7972341</id><snippet>def gen(num):
    j=0
    for i in xrange(num):
        j += i
        yield j
</snippet></ROW><ROW><id>7972699</id><snippet>sum(len(val) for val in dictionary.itervalues())
</snippet></ROW><ROW><id>7973204</id><snippet>import glob
for file in glob.glob("*.py"):
    with open(file, "a") as f:
        # f.write("print 'hello'")
        # etc.
</snippet></ROW><ROW><id>7973348</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>7973659</id><snippet>Filter</snippet></ROW><ROW><id>7973809</id><snippet>productSoFar = 1
digitsLeftToMultipy = #the number
while there are digits left to multiply:
    get the next digit and
    update produtsSoFar and digitsLeftToMultiply
</snippet></ROW><ROW><id>7973809</id><snippet>10 &lt;= n &lt; 100
</snippet></ROW><ROW><id>7973809</id><snippet>n in range(10, 100)
</snippet></ROW><ROW><id>7973852</id><snippet>databases/py-sqlite3</snippet></ROW><ROW><id>7973852</id><snippet>cd /usr/ports/databases/py-sqlite3
make &amp;&amp; make install
</snippet></ROW><ROW><id>7973864</id><snippet>def bisect(sortedlist,targetvalue,firstindex=0,lastindex=None):

    if(len(sortedlist)==0):
        return None
    if(len(sortedlist)==1):
        if(sortedlist[0]==targetvalue):
            return firstindex
        else:
            return None
    center = int(round(len(sortedlist)/2))

    if(sortedlist[center]==targetvalue):
        return firstindex+center
    if(targetvalue&gt;sortedlist[center]):
        return bisect(sortedlist[center+1:lastindex],targetvalue,center+1,lastindex)
    else:
        return bisect(sortedlist[0:center],targetvalue,firstindex,center-1)
</snippet></ROW><ROW><id>7973890</id><snippet>import unittest

class InputParser:
    def parse(self, input):
        input = input.replace("\n", "").replace(" ", "")
        bits = input.split("=&gt;")
        return bits[:-1]

class InputParserTest ( unittest.TestCase ):
    def test_parse ( self ):
        subject = InputParser()
        self.assertEqual(subject.parse("a =&gt;\nb =&gt; "), ["a", "b"])

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>7973925</id><snippet>"media/style.css"</snippet></ROW><ROW><id>7973925</id><snippet>"/media/style.css"</snippet></ROW><ROW><id>7973925</id><snippet>"/hello/media/style.css"</snippet></ROW><ROW><id>7973925</id><snippet>"/media/style.css"</snippet></ROW><ROW><id>7973967</id><snippet>from operator import itemgetter
from itertools import groupby, imap

def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D
    return imap(next, imap(itemgetter(1), groupby(iterable, key)))
</snippet></ROW><ROW><id>7973967</id><snippet>from bisect import bisect_left, insort

def dedup(seq):
    'Remove duplicates. Preserve order first seen.  Assume orderable, but not hashable elements'
    result = []
    seen = []
    for x in seq:
        i = bisect_left(seen, x)
        if i == len(seen) or seen[i] != x:
            seen.insert(i, x)
            result.append(x)
    return result
</snippet></ROW><ROW><id>7974019</id><snippet>yes | command
</snippet></ROW><ROW><id>7974019</id><snippet>expect</snippet></ROW><ROW><id>7974189</id><snippet>   -u     Force stdin, stdout and stderr to be totally unbuffered.  On systems where it matters, also put stdin, stdout and stderr in binary mode.  Note that
          there  is  internal  buffering  in  xreadlines(),  readlines()  and file-object iterators ("for line in sys.stdin") which is not influenced by this
          option.  To work around this, you will want to use "sys.stdin.readline()" inside a "while 1:" loop.
</snippet></ROW><ROW><id>7974283</id><snippet>int</snippet></ROW><ROW><id>7974283</id><snippet>line = ...
line = line.strip() # strip whitespace
if line: # only go on if the line was not blank
    line_value = int(line)
</snippet></ROW><ROW><id>7974487</id><snippet>def f(op, x, y):
    return op(x, y)

def add(x, y):
    return x + y

f(add, 10, 7) #gives 17
</snippet></ROW><ROW><id>7974487</id><snippet>import operator

operator.add(1, 2)
(lambda x,y : x+y)(1, 2)
</snippet></ROW><ROW><id>7974487</id><snippet>10 &lt;= x &lt; 100</snippet></ROW><ROW><id>7974487</id><snippet>f = lambda x, y: x + y
</snippet></ROW><ROW><id>7974487</id><snippet>print</snippet></ROW><ROW><id>7974487</id><snippet>def make_printer(msg):
    def printer():
        print msg
    return printer

printer('a message')()
</snippet></ROW><ROW><id>7974487</id><snippet>def make_counter(n):
    def inc():
        n = n + 1
        return n
    return inc
</snippet></ROW><ROW><id>7974487</id><snippet>def make_counter(n):
    def inc():
        nonlocal n
        n = n + 1
        return n
    return inc
</snippet></ROW><ROW><id>7974487</id><snippet>def make_counter(n):
    nw = [n]
    def inc():
       nw[0] = nw[0] + 1
       return nw[0]
    return inc
</snippet></ROW><ROW><id>7974487</id><snippet>__call__</snippet></ROW><ROW><id>7974487</id><snippet>class Counter:
    def __init__(self, n):
        self.n = n
    def __call__(self):
        self.n += 1
        return self.n
</snippet></ROW><ROW><id>7974519</id><snippet>File "C:\Users\kiwi\Dropbox\Programming Projects\Django Projects\ponysite\forum\admin.py" in
1. from forum.models  import Category, Thread, Post, Report, Subscription, Ban
</snippet></ROW><ROW><id>7974519</id><snippet>from forum.models  import Category, Thread, Post, Report, Subscription, Ban
</snippet></ROW><ROW><id>7974519</id><snippet>Ban</snippet></ROW><ROW><id>7974716</id><snippet>from Crypto.PublicKey import RSA
from Crypto import Random
rng = Random.new().read
RSAkey = RSA.generate(1024, rng) 
</snippet></ROW><ROW><id>7974746</id><snippet>Defaults !env_reset</snippet></ROW><ROW><id>7974746</id><snippet>Defaults env_keep += "PYTHONPATH"</snippet></ROW><ROW><id>7974746</id><snippet>Defaults env_reset</snippet></ROW><ROW><id>7974746</id><snippet>env_keep</snippet></ROW><ROW><id>7974746</id><snippet>env_keep</snippet></ROW><ROW><id>7974746</id><snippet>!env_reset</snippet></ROW><ROW><id>7974746</id><snippet>export PYTHONPATH=/your/custom/path</snippet></ROW><ROW><id>7974746</id><snippet>~/.bashrc</snippet></ROW><ROW><id>7974746</id><snippet>/etc/bash.bashrc</snippet></ROW><ROW><id>7974746</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7974746</id><snippet>Defaults env_keep += "ENV1 ENV2 ..."</snippet></ROW><ROW><id>7974746</id><snippet>Defaults !env_reset</snippet></ROW><ROW><id>7974770</id><snippet>import tkFileDialog
import os
import os.path
import re

directory = tkFileDialog.askdirectory()

for dirpath, dirnames, filenames in os.walk(directory):
    for filename in filenames:
        path = os.path.join(dirpath, filename)

        with open(path) as file:
            contents = file.read()

            print path[:30], contents.count('Tmp'), re.findall('Tmp\d{5}', contents)
</snippet></ROW><ROW><id>7974981</id><snippet>$ ls
requirements.txt appfolder
$ ls appfolder
__init__.py   manage.py   settings.py    urls.py
</snippet></ROW><ROW><id>7974987</id><snippet>key = +1
</snippet></ROW><ROW><id>7974987</id><snippet>+1</snippet></ROW><ROW><id>7974987</id><snippet>1</snippet></ROW><ROW><id>7974987</id><snippet>key += 1</snippet></ROW><ROW><id>7974987</id><snippet>split</snippet></ROW><ROW><id>7974987</id><snippet>with open('words') as f3data:
    mydict = dict(enumerate(line.strip() for line in f3data))
</snippet></ROW><ROW><id>7975010</id><snippet>dct = dict(zip(data2['causes'], data2['analyst']))
all_data = mlab.rec_append_fields(data1, 'analyst',
    [dct[x] for x in data1['causes']])
</snippet></ROW><ROW><id>7975182</id><snippet>ignore = set(ignore)
</snippet></ROW><ROW><id>7975182</id><snippet>in</snippet></ROW><ROW><id>7975182</id><snippet>itertools</snippet></ROW><ROW><id>7975182</id><snippet>zip</snippet></ROW><ROW><id>7975182</id><snippet>[i for i, (o, n) in enumerate(izip_longest(old, new)) 
                          if o != n and i not in ignore]
</snippet></ROW><ROW><id>7975182</id><snippet>chain</snippet></ROW><ROW><id>7975182</id><snippet>repeat</snippet></ROW><ROW><id>7975182</id><snippet>izip_longest</snippet></ROW><ROW><id>7975182</id><snippet>enumerate</snippet></ROW><ROW><id>7975182</id><snippet>xrange</snippet></ROW><ROW><id>7975182</id><snippet>filter</snippet></ROW><ROW><id>7975182</id><snippet>[i for i, v in set(enumerate(new)).symmetric_difference(enumerate(old)) 
                                                     if i not in ignore]
</snippet></ROW><ROW><id>7975182</id><snippet>filter</snippet></ROW><ROW><id>7975182</id><snippet>map</snippet></ROW><ROW><id>7975182</id><snippet>lambda</snippet></ROW><ROW><id>7975182</id><snippet>set</snippet></ROW><ROW><id>7975182</id><snippet>symmetric_difference</snippet></ROW><ROW><id>7975182</id><snippet>^</snippet></ROW><ROW><id>7975327</id><snippet>INTO table_name</snippet></ROW><ROW><id>7975327</id><snippet>ب</snippet></ROW><ROW><id>7975327</id><snippet>\xd8\xa8</snippet></ROW><ROW><id>7975327</id><snippet>\xXX</snippet></ROW><ROW><id>7975327</id><snippet>\x20</snippet></ROW><ROW><id>7975385</id><snippet>{% for key,value in location_map_india.items() %}
{{value.name}}
{% endfor %}
</snippet></ROW><ROW><id>7975427</id><snippet>findall</snippet></ROW><ROW><id>7975427</id><snippet>,</snippet></ROW><ROW><id>7975427</id><snippet>B</snippet></ROW><ROW><id>7975427</id><snippet>&gt;&gt;&gt; regex.findall("((A:[c1]0.1,B:[c2]0.2),C:[c2]0.3);")
[('(A:[c1]0.1,', '(', 'A', ':', '[c1]', '0.1', ','), (',C:[c2]0.3)', ',', 'C', ':', '[c2]', '0.3', ')')]
</snippet></ROW><ROW><id>7975427</id><snippet>&gt;&gt;&gt; regex = re.compile(r"""
... (
...     ([,(])              # boundary
...     ([A-Z0-9_\-\.]+)    # label
...     (:)?                # optional colon
...     (\[.+?\])?          # optional comment chunk
...     (\d+\.\d+)?         # optional branchlengths
...     (?=[),])            # end!
... )
... """, re.IGNORECASE + re.VERBOSE + re.DOTALL)
&gt;&gt;&gt;
&gt;&gt;&gt; regex.findall("((A:[c1]0.1,B:[c2]0.2),C:[c2]0.3);")
[('(A:[c1]0.1', '(', 'A', ':', '[c1]', '0.1'), (',B:[c2]0.2', ',', 'B', ':', '[c2]', '0.2'), (',C:[c2]0.3', ',', 'C', ':
', '[c2]', '0.3')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7975427</id><snippet>findall</snippet></ROW><ROW><id>7975427</id><snippet>search</snippet></ROW><ROW><id>7975427</id><snippet>pos</snippet></ROW><ROW><id>7975427</id><snippet>&gt;&gt;&gt; x = "((A:[c1]0.1,B:[c2]0.2),C:[c2]0.3);"
&gt;&gt;&gt; r = []
&gt;&gt;&gt; index = 0
&gt;&gt;&gt; while True:
...     m = regex.search(x, index)
...     if not m:
...        break
...     r.append(m.groups())
...     index = m.end(7)-1
...
&gt;&gt;&gt; r
[('(A:[c1]0.1,', '(', 'A', ':', '[c1]', '0.1', ','), (',B:[c2]0.2)', ',', 'B', ':', '[c2]', '0.2', ')'), (',C:[c2]0.3)',
 ',', 'C', ':', '[c2]', '0.3', ')')]
</snippet></ROW><ROW><id>7975511</id><snippet>import file</snippet></ROW><ROW><id>7975511</id><snippet>file.py</snippet></ROW><ROW><id>7975511</id><snippet>import</snippet></ROW><ROW><id>7975511</id><snippet>.py</snippet></ROW><ROW><id>7975511</id><snippet>execfile('file.py')</snippet></ROW><ROW><id>7975511</id><snippet>os.system('python file.py')</snippet></ROW><ROW><id>7975535</id><snippet>while True:</snippet></ROW><ROW><id>7975558</id><snippet>import sqlite3
import pickle
import collections

class DBDict(collections.MutableMapping):
    'Database driven dictlike object (with non-persistent in-memory option).'

    def __init__(self, db_filename=':memory:', **kwds):
        self.db = sqlite3.connect(db_filename)
        self.db.text_factory = str
        try:
            self.db.execute('CREATE TABLE dict (key text PRIMARY KEY, value text)')
            self.db.execute('CREATE INDEX key ON dict (key)')
            self.db.commit()
        except sqlite3.OperationalError:
            pass                # DB already exists
        self.update(kwds)

    def __setitem__(self, key, value):
        if key in self:
            del self[key]
        value = pickle.dumps(value)
        self.db.execute('INSERT INTO dict VALUES (?, ?)', (key, value))
        self.db.commit()

    def __getitem__(self, key):
        cursor = self.db.execute('SELECT value FROM dict WHERE key = (?)', (key,))
        result = cursor.fetchone()
        if result is None:
            raise KeyError(key)
        return pickle.loads(result[0])

    def __delitem__(self, key):
        if key not in self:
            raise KeyError(key)
        self.db.execute('DELETE FROM dict WHERE key = (?)', (key,))
        self.db.commit()

    def __iter__(self):
        return iter([row[0] for row in self.db.execute('SELECT key FROM dict')])

    def __repr__(self):
        list_of_str = ['%r: %r' % pair for pair in self.items()]
        return '{' + ', '.join(list_of_str) + '}'

    def __len__(self):
        return len(list(iter(self)))



&gt;&gt;&gt; d = DBDict(raymond='red', rachel='blue')
&gt;&gt;&gt; d
{'rachel': 'blue', 'raymond': 'red'}
&gt;&gt;&gt; d['critter'] = ('xyz', [1,2,3])
&gt;&gt;&gt; d['critter']
('xyz', [1, 2, 3])
&gt;&gt;&gt; len(d)
3
&gt;&gt;&gt; list(d)
['rachel', 'raymond', 'critter']
&gt;&gt;&gt; d.keys()
['rachel', 'raymond', 'critter']
&gt;&gt;&gt; d.items()
[('rachel', 'blue'), ('raymond', 'red'), ('critter', ('xyz', [1, 2, 3]))]
&gt;&gt;&gt; d.values()
['blue', 'red', ('xyz', [1, 2, 3])]
</snippet></ROW><ROW><id>7975923</id><snippet>def push_batch(batch):
    # Send a big INSERT request to MySQL

current_batch = []
with open('filename') as f:
    for line in f:
        batch.append(line)

        if len(current_batch) &gt; 1000:
            push_batch(current_batch)
            current_batch = []

    push_batch(current_batch)
</snippet></ROW><ROW><id>7975969</id><snippet>query = "insert into cms_object_metadata (cms_object_id, cms_object_metadata_data, cms_object_metadata_type_id, \
         cms_object_metadata_status_id) values ((select id from cms_objects where cms_object_ident = %(objIdent)s), \
         %(objMetaString)s, (select id from cms_object_metadata_types where cms_object_metadata_type_name = 'PDAT'), \
         (select id from cms_object_metadata_status where cms_object_metadata_status_name = 'active'))"

dataDict = {'objIdent':objIdent, 'objMetaString':objMetaString}

dbCursor.execute(query, dataDict)
</snippet></ROW><ROW><id>7975969</id><snippet>%(objMetaString)s</snippet></ROW><ROW><id>7976171</id><snippet>soup = BeautifulSoup(html, convertEntities=BeautifulSoup.HTML_ENTITIES)
</snippet></ROW><ROW><id>7976171</id><snippet> </snippet></ROW><ROW><id>7976171</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; import sys
&gt;&gt;&gt; csv_file = sys.stdout
&gt;&gt;&gt; writer = csv.writer(csv_file, delimiter="|")
&gt;&gt;&gt; soup = BeautifulSoup("&lt;tr&gt;&lt;td&gt;1&lt;td&gt; &lt;td&gt;3",
...                      convertEntities=BeautifulSoup.HTML_ENTITIES)
&gt;&gt;&gt; writer.writerows([''.join(t.encode('utf-8') for t in td(text=True))
...                   for td in tr('td')] for tr in soup('tr'))
1| |3
</snippet></ROW><ROW><id>7976171</id><snippet>t.encode('utf-8')</snippet></ROW><ROW><id>7976171</id><snippet> </snippet></ROW><ROW><id>7976171</id><snippet>U+00A0</snippet></ROW><ROW><id>7976272</id><snippet>True</snippet></ROW><ROW><id>7976272</id><snippet>False</snippet></ROW><ROW><id>7976272</id><snippet>__len__</snippet></ROW><ROW><id>7976272</id><snippet>0</snippet></ROW><ROW><id>7976272</id><snippet>__nonzero__</snippet></ROW><ROW><id>7976272</id><snippet>False</snippet></ROW><ROW><id>7976272</id><snippet>__nonzero__</snippet></ROW><ROW><id>7976272</id><snippet>__bool__</snippet></ROW><ROW><id>7976272</id><snippet>True</snippet></ROW><ROW><id>7976272</id><snippet>False</snippet></ROW><ROW><id>7976272</id><snippet>try:
    next
except NameError:       # doesn't show up until python 2.6
    def next(iter):
        return iter.next()

Empty = object()

class Boolean_Iterator(object):
    """Adds the abilities
    True/False tests:  True means there /may/ be items still remaining to be used
    """
    def __init__(self, iterator):
        try:
            self._iter = iter(iterator)
        except TypeError:
            self._iter = iter(iterator())
        self._alive = True
    def __iter__(self):
        return self
    def __next__(self):
        try:
            result = next(self._iter)
        except StopIteration:
            self._alive = False
            raise
        return result
    next = __next__                     # python 2.x
    def __bool__(self):
        return self._alive
    __nonzero__ = __bool__              # python 2.x
</snippet></ROW><ROW><id>7976272</id><snippet>False</snippet></ROW><ROW><id>7976272</id><snippet>StopIteration</snippet></ROW><ROW><id>7976272</id><snippet>try:
    next
except NameError:       # doesn't show up until python 2.6
    def next(iter):
        return iter.next()

Empty = object()

class Iterator(object):
    """Adds the abilities
    True/False tests:  True means there are items still remaining to be used
    peek(): get the next item without removing it from the sequence
    """
    def __init__(self, iterator):
        try:
            self._iter = iter(iterator)
        except TypeError:
            self._iter = iter(iterator())
        self._peek = Empty
        self.peek()
    def __next__(self):
        peek, self._peek = self._peek, Empty
        self.peek()
        if peek is not Empty:
            return peek
        raise StopIteration
    next = __next__                     # python 2.x
    def __bool__(self):
        if self._peek is Empty:
            return False
        return True
    __nonzero__ = __bool__              # python 2.x
    def peek(self):
        if self._peek is not Empty:
            return self._peek
        try:
            self._peek = next(self._iter)
        except StopIteration:
            self._peek = Empty
        return self._peek
</snippet></ROW><ROW><id>7976272</id><snippet>True</snippet></ROW><ROW><id>7976272</id><snippet>__nonzero__</snippet></ROW><ROW><id>7976272</id><snippet>__bool__</snippet></ROW><ROW><id>7976693</id><snippet>session.remove()</snippet></ROW><ROW><id>7976731</id><snippet>import string

myFilename = "countries.txt"

myTuples = []


myFile = open (myFilename, 'r')

for line in myFile.readlines():
    splitLine = string.split (line)
    code = splitLine [-3]
    country = string.join(splitLine[:-3])
    myTuples.append(tuple([country, code]))

myDict = dict(myTuples)
print myDict
</snippet></ROW><ROW><id>7976731</id><snippet>import string

myFilename = "countries.txt"


myDict = {}

myFile = open (myFilename, 'r')

for line in myFile:
    splitLine = string.split (line)
    code = splitLine [-3]
    country = " ".join(splitLine[:-3])
    myDict[country] = code

print myDict
</snippet></ROW><ROW><id>7976921</id><snippet>def underline(title):
    return title + '\n' + len(title) * '_'
</snippet></ROW><ROW><id>7977112</id><snippet>chmod a+x ./logserver.py</snippet></ROW><ROW><id>7977112</id><snippet>./logserver.py</snippet></ROW><ROW><id>7977112</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>7977142</id><snippet>xmlns</snippet></ROW><ROW><id>7977359</id><snippet>for i in sorted(d.keys(), key=lambda x: x.lower()): print i
</snippet></ROW><ROW><id>7977359</id><snippet>for i, j in sorted(d.items(), key=lambda x: x[0].lower()): print i, j
</snippet></ROW><ROW><id>7977359</id><snippet>for i in sorted(d, key=str.lower):
    print i, d[i]
</snippet></ROW><ROW><id>7977497</id><snippet>diagrams</snippet></ROW><ROW><id>7978000</id><snippet>cmd = ["./my_program.sh"]
p = subprocess.Popen( cmd, shell=False, stdout=subprocess.PIPE)   # launch the process
while p.poll() is None:          # check if the process is still alive
    out = p.stdout.readline()    # if it is still alive, grab the output
    do_something_with(out)       # do what you want with it
</snippet></ROW><ROW><id>7978213</id><snippet>str = 'The {} are {}, {}, {}, and {}'.format('numbers', *lstData)
</snippet></ROW><ROW><id>7978459</id><snippet>def unwrap_data(filename, wrap_len=101, map_func=None):
    """
    Generator which reads a file and returns a list of float,
    one for each data row.

    Rows in the file are assumed to be wrapped after every 
    wrap_len columns, so we unwrap it before returning each
    data row.

    wrap_len defaults to 101 (1 time column + 100 cell values).

    Caveat: If a timing data has exactly 100 cell values (101 
    columns), the output of this function will be wrong unless
    an additional newline exists before the next timing row, e.g.

         time1      cell1_1    cell1_2  ... cell1_100
         cell1_101  cell1_102  ...
         time2      cell2_1    cell2_2  ... cell2_100

         time3      cell3_1    cell3_2  ...
    """
    next_data = []
    for line in open(filename, 'r'):  # for each line in file
        L = line.strip().split()
        if map_func:
            L = map(map_func, L)  # run map_func() on each list element
        next_data.extend(L)  # add to prev row
        if len(L) != wrap_len and next_data: 
            # the line was not wrapped, assume new timing data
            # "and next_data" will avoid returning empty lists for blank lines
            yield next_data
            next_data = []
</snippet></ROW><ROW><id>7978459</id><snippet>out = open("outfile.dat", "w")
for line in unwrap_data("input_file.dat"):
    out.write("\t".join(line) + "\n")
</snippet></ROW><ROW><id>7978459</id><snippet>map_func</snippet></ROW><ROW><id>7978459</id><snippet>float()</snippet></ROW><ROW><id>7978459</id><snippet>time</snippet></ROW><ROW><id>7978459</id><snippet>for line in unwrap_data("input_file.dat"):
    print line[0], min(line[1:]), max(line[1:])
</snippet></ROW><ROW><id>7978459</id><snippet>wrap_len=&lt;new_value&gt;</snippet></ROW><ROW><id>7978513</id><snippet>self.worker_queue = Queue() # queue for messages to workers
self.server_queue = Queue() # queue for messages to ampq server
</snippet></ROW><ROW><id>7978513</id><snippet>def send_into_ampq():
    while True:
       message = dispatcher.get_workger_msg()

       try:
          connection.send(self.encode(message))
       except:
           connection.kill()

def read_from_ampq():
    while True:
        message = connection.wait()

        dispatcher.put_ampq_msg(self.decode(message))
</snippet></ROW><ROW><id>7978513</id><snippet>self._writelock = Semaphore(1) 
# this is a gevent locking thing. eventlet must have something like this too..
# just counts - 1 for locks and +1 for releases blocks otherwise blocks until 
# 0 agian.... why not google it i though.. and yes im right:
# eventlet.semaphore.Semaphore(value=1)

def send(self, message):
    """
    you need a write lock to prevent more greenlets
    sending more messages when previous sent is not done yet.
    """

    with self._writelock:
        self.socket.sendall(message)
</snippet></ROW><ROW><id>7979092</id><snippet>HKEY_CURRENT_USER\JetBrains\IntelliJ IDEA\&lt;build number&gt;\(Default)</snippet></ROW><ROW><id>7979288</id><snippet>patterns</snippet></ROW><ROW><id>7979288</id><snippet>urlpatterns = patterns('news.views',
    (r'^articles/2003/$', 'special_case_2003'),
    (r'^articles/(\d{4})/$', 'year_archive'),
)
</snippet></ROW><ROW><id>7979288</id><snippet>''</snippet></ROW><ROW><id>7979288</id><snippet>urlpatterns = patterns('',
    url(r'^$',
        'zinnia.views.entries.entry_index', entry_conf_index,
        name='zinnia_entry_archive_index'),
    )
</snippet></ROW><ROW><id>7979693</id><snippet>import numpy as np
arr=np.array([
    ( 54.51399994, -12.10200024, -11.88099957),
    ( 56.23899841, -8.30799961, -2.03500009)])
print(arr.astype('|S10'))
</snippet></ROW><ROW><id>7979693</id><snippet>[['54.51399994', '-12.10200024', '-11.88099957'], ['56.23899841', '-8.30799961', '-2.03500009']]
</snippet></ROW><ROW><id>7979710</id><snippet>parser.feed( open(tmp[0]).read( ) )
</snippet></ROW><ROW><id>7979710</id><snippet>parser.feed( tagclean(url) )
</snippet></ROW><ROW><id>7979828</id><snippet>import os
from ctypes import c_int, WINFUNCTYPE, windll
from ctypes.wintypes import HWND, LPCSTR, UINT
prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)

filename = "readme.txt"
os.startfile(filename, "edit")

try:
    os.startfile(filename, "edit")
except WindowsError, e:
    MessageBox(text=str(e))
</snippet></ROW><ROW><id>7980060</id><snippet>Event</snippet></ROW><ROW><id>7980060</id><snippet>None</snippet></ROW><ROW><id>7980060</id><snippet>class StopProcessing(object):
    pass

#...

q.put(StopProcessing())

#...

while True:
    dat = self._q.get()
    if type(dat) is StopProcessing:
        # ...
</snippet></ROW><ROW><id>7980060</id><snippet>multiprocessing.Event</snippet></ROW><ROW><id>7980060</id><snippet>class StopProcessing(object):
    pass
#...
q.put(StopProcessing)
#...
while True:
    dat = self._q.get()
    if dat is StopProcessing:
        #...
</snippet></ROW><ROW><id>7980348</id><snippet>:Entry</snippet></ROW><ROW><id>7980348</id><snippet>import itertools as it
filename='test.dat'

with open(filename,'r') as f:
    for key,group in it.groupby(f,lambda line: line.startswith(':Entry')):
        if not key:
            group = list(group)
            print(group)
</snippet></ROW><ROW><id>7980348</id><snippet>['- Name\n', 'John Doe\n', '\n', '- Date\n', '20/12/1979\n']
['\n', '-Name\n', 'Jane Doe\n', '- Date\n', '21/12/1979\n']
</snippet></ROW><ROW><id>7980348</id><snippet>group</snippet></ROW><ROW><id>7980348</id><snippet>with open(filename,'r') as f:
    for key,group in it.groupby(f,lambda line: line.startswith(':Entry')):
        if not key:
            for line in group:
                ...
</snippet></ROW><ROW><id>7980527</id><snippet>post-receive</snippet></ROW><ROW><id>7980527</id><snippet>.git/hooks/</snippet></ROW><ROW><id>7980676</id><snippet>xy = (int(user_x), int(user_y))
</snippet></ROW><ROW><id>7980931</id><snippet>second="*/30"</snippet></ROW><ROW><id>7980931</id><snippet>seconds="*30/"</snippet></ROW><ROW><id>7980931</id><snippet>add_cron_job</snippet></ROW><ROW><id>7980931</id><snippet>    def add_cron_job(self, func, year=None, month=None, day=None,
 week=None, day_of_week=None, hour=None, minute=None, second=None,
 start_date=None, args=None, kwargs=None, **options):

         """
         Schedules a job to be completed on times that match the given
         expressions.

         :param func: callable to run
         :param year: year to run on
         :param month: month to run on
         :param day: day of month to run on
         :param week: week of the year to run on
         :param day_of_week: weekday to run on (0 = Monday)
         :param hour: hour to run on
         :param second: second to run on
         :param args: list of positional arguments to call func with
         :param kwargs: dict of keyword arguments to call func with
         :param name: name of the job
         :param jobstore: alias of the job store to add the job to
         :param misfire_grace_time: seconds after the designated run time that
             the job is still allowed to be run
         :return: the scheduled job
         :rtype: :class:`~apscheduler.job.Job`
         """
</snippet></ROW><ROW><id>7980931</id><snippet>from apscheduler.scheduler import Scheduler

def job_def(var1, var2):
    print "%s - %s" % (str(var1), str(var2))


s = Scheduler()

s.add_cron_job(job_def, args=['hello', 'there'], second='*/30')

s.start()
</snippet></ROW><ROW><id>7980949</id><snippet>namespace prefixes</snippet></ROW><ROW><id>7980949</id><snippet>http://schemas.google.com/gsa/2007</snippet></ROW><ROW><id>7980949</id><snippet>import lxml.etree as et

xml="""
&lt;entry xmlns="http://www.w3.org/2005/Atom" xmlns:gsa="http://schemas.google.com/gsa/2007"&gt;
  &lt;gsa:content name="reportName"&gt;bbb&lt;/gsa:content&gt;
  &lt;gsa:content name="collectionName"&gt;default_collection&lt;/gsa:content&gt;
  &lt;gsa:content name="reportDate"&gt;date_3_25_2009&lt;/gsa:content&gt;
 &lt;/entry&gt;
"""

NS = {'rootns': 'http://www.w3.org/2005/Atom',
      'gsa': 'http://schemas.google.com/gsa/2007'}

tree = et.fromstring(xml)

for el in tree.xpath('//gsa:content', namespaces=NS):
    print el.attrib['name']

print len(tree.xpath('//rootns:entry', namespaces=NS))
</snippet></ROW><ROW><id>7981032</id><snippet>os.path.basename</snippet></ROW><ROW><id>7981032</id><snippet>new/dir1/file1</snippet></ROW><ROW><id>7981032</id><snippet>new/</snippet></ROW><ROW><id>7981032</id><snippet>dir1/file1</snippet></ROW><ROW><id>7981032</id><snippet>os.path.basename</snippet></ROW><ROW><id>7981032</id><snippet>myzip.write(os.path.join(path, file))
</snippet></ROW><ROW><id>7981032</id><snippet>os.walk</snippet></ROW><ROW><id>7981032</id><snippet>if __name__ == '__main__':
    path=os.path.join(os.getcwd(), 'new')
    myzip = zipfile.ZipFile('myzipped.zip', 'w')

    # Change into the top level directory.
    os.chdir(path)

    zipfunc('.',myzip)
    myzip.close()
</snippet></ROW><ROW><id>7981032</id><snippet>/home/lars/new
  file1
  file2
  dir1/
    file1
    file2
    file3
</snippet></ROW><ROW><id>7981032</id><snippet>Archive:  myzipped.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
       29  11-02-2011 09:14   file1
       29  11-02-2011 09:14   file2
       29  11-02-2011 09:14   dir1/file3
       29  11-02-2011 09:14   dir1/file1
       29  11-02-2011 09:14   dir1/file2
---------                     -------
      145                     5 files
</snippet></ROW><ROW><id>7981032</id><snippet>os.walk</snippet></ROW><ROW><id>7981032</id><snippet>os.listdir</snippet></ROW><ROW><id>7981032</id><snippet>os.path.isfile</snippet></ROW><ROW><id>7981330</id><snippet>if not os.path.isfile("%s.stidx"%genome):
  cmd = "python /space/tierzucht/mgholami/stampy-1.0.13/stampy.py -G %s %s/*.fa" %(genome, pathway)
</snippet></ROW><ROW><id>7981330</id><snippet>%</snippet></ROW><ROW><id>7981623</id><snippet>mmap</snippet></ROW><ROW><id>7981623</id><snippet>StringIO</snippet></ROW><ROW><id>7981623</id><snippet>array.fromfile()</snippet></ROW><ROW><id>7981623</id><snippet>StringIO</snippet></ROW><ROW><id>7981623</id><snippet>array.fromstring()</snippet></ROW><ROW><id>7981623</id><snippet>infile.seek()</snippet></ROW><ROW><id>7981623</id><snippet>data.fromfile(infile,1)</snippet></ROW><ROW><id>7981623</id><snippet>volume_size</snippet></ROW><ROW><id>7981809</id><snippet>tal:replace</snippet></ROW><ROW><id>7981809</id><snippet>tal:content</snippet></ROW><ROW><id>7981809</id><snippet>&lt;tr tal:repeat="row results"&gt;
    &lt;td tal:content="python:row['name']"&gt;the name&lt;/td&gt;
    &lt;td tal:content="python:row['value']"&gt;1&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>7981809</id><snippet>python:</snippet></ROW><ROW><id>7981809</id><snippet>&lt;tr tal:repeat="row results"&gt;
    &lt;td tal:content="row.name"&gt;the name&lt;/td&gt;
    &lt;td tal:content="row.value"&gt;1&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>7981809</id><snippet>${}</snippet></ROW><ROW><id>7981809</id><snippet>tal:content</snippet></ROW><ROW><id>7981809</id><snippet>&lt;tr tal:repeat="row results"&gt;
    &lt;td&gt;${row.name}&lt;/td&gt;
    &lt;td&gt;${row.value}&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>7981894</id><snippet>remove</snippet></ROW><ROW><id>7981894</id><snippet>tree=et.fromstring(xml)

for bad in tree.xpath("//fruit[@state=\'rotten\']"):
  bad.getparent().remove(bad)     # here I grab the parent of the element to call the remove directly on it

print et.tostring(tree, pretty_print=True, xml_declaration=True)
</snippet></ROW><ROW><id>7982209</id><snippet>                 a.py  b.py  c.py    
                 ----  ----  ----
CPython 2.6.5     ok    bad   bad
CPython 3.?       ok    bad   bad
Jython 2.2.1      ok    ok    bad
Jython 2.5.2      bad   bad   bad
IronPython 2.7.1  ok    bad   ok
</snippet></ROW><ROW><id>7982209</id><snippet>\</snippet></ROW><ROW><id>7982260</id><snippet>filter()</snippet></ROW><ROW><id>7982260</id><snippet>&gt;&gt;&gt; s = "bla bla bla 54467 bla"
&gt;&gt;&gt; int(filter(str.isdigit, s))
54467
</snippet></ROW><ROW><id>7982260</id><snippet>&gt;&gt;&gt; s = "bla 1223 bla 54467 bla"
&gt;&gt;&gt; map(int, filter(str.isdigit, s.split()))
[1223, 54467]
</snippet></ROW><ROW><id>7982260</id><snippet>&gt;&gt;&gt; s = "bla bla bla 54467 bla"
&gt;&gt;&gt; int("".join(filter(str.isdigit, s)))
54467
&gt;&gt;&gt; s = "bla 1223 bla 54467 bla"
&gt;&gt;&gt; list(map(int, filter(str.isdigit, s.split())))
[1223, 54467]
</snippet></ROW><ROW><id>7982442</id><snippet>os.read(0, some_big_enough_number)</snippet></ROW><ROW><id>7982442</id><snippet>results</snippet></ROW><ROW><id>7982442</id><snippet>os.write(1, "".join(results))</snippet></ROW><ROW><id>7982442</id><snippet>os.read()</snippet></ROW><ROW><id>7982442</id><snippet>os.write()</snippet></ROW><ROW><id>7982484</id><snippet>[...]</snippet></ROW><ROW><id>7982484</id><snippet>par = r'(Bid|Ask)'</snippet></ROW><ROW><id>7982484</id><snippet>if whatever in ('Bid', 'Ask'):
    # it's one of these two
else:
    # it isn't
</snippet></ROW><ROW><id>7982484</id><snippet>if any(word in whatever for word in ('Bid', 'Ask')):
    # one of the words is in the sting whatever
</snippet></ROW><ROW><id>7982543</id><snippet>copied_list = existing_list[:]</snippet></ROW><ROW><id>7982749</id><snippet>#!/usr/bin/env python

import struct
from socket import socket, AF_UNIX, SOCK_STREAM, SOL_SOCKET

SO_PEERCRED = 17 # Pulled from /usr/include/asm-generic/socket.h

s = socket(AF_UNIX, SOCK_STREAM)

s.bind('/tmp/pass_cred')
s.listen(1)

conn, addr = s.accept()

creds = conn.getsockopt(SOL_SOCKET, SO_PEERCRED, struct.calcsize('3i'))

pid, uid, gid = struct.unpack('3i',creds)

print 'pid: %d, uid: %d, gid %d' % (pid, uid, gid)
</snippet></ROW><ROW><id>7982749</id><snippet>#!/usr/bin/env python

from socket import socket, AF_UNIX, SOCK_STREAM, SOL_SOCKET

SO_PASSCRED = 16 # Pulled from /usr/include/asm-generic/socket.h

s = socket(AF_UNIX, SOCK_STREAM)

s.setsockopt(SOL_SOCKET, SO_PASSCRED, 1)

s.connect('/tmp/pass_cred')

s.close()
</snippet></ROW><ROW><id>7982758</id><snippet>def buildTestSuite():
    suite = unittest.TestSuite()
    for testcase in glob.glob('src/testsuite/test_*.py'):
        modname = os.path.splitext(testcase)[0]
        module=__import__(modname,{},{},['1'])
        suite.addTest(unittest.TestLoader().loadTestsFromModule(module))
    return suite
</snippet></ROW><ROW><id>7982842</id><snippet>re</snippet></ROW><ROW><id>7982842</id><snippet>.</snippet></ROW><ROW><id>7982842</id><snippet>&gt;&gt;&gt; src = """&lt;name&gt; James Gold
... &lt;/name&gt; said to meet with &lt;name&gt; Mable Helen  &lt;/name&gt; tomorrow night"""
&gt;&gt;&gt;
&gt;&gt;&gt; [s.strip() for s in re.findall(r'&lt;name&gt;(.*?)&lt;/name&gt;', src, re.DOTALL)]
['James Gold', 'Mable Helen']
</snippet></ROW><ROW><id>7982842</id><snippet>strip</snippet></ROW><ROW><id>7982842</id><snippet>?</snippet></ROW><ROW><id>7982842</id><snippet>&lt;/name&gt;</snippet></ROW><ROW><id>7983042</id><snippet>max()</snippet></ROW><ROW><id>7983042</id><snippet>&gt;&gt;&gt; my_list = [5, 2, 4, 3]
&gt;&gt;&gt; max(my_list)
5
</snippet></ROW><ROW><id>7983141</id><snippet>os.getcwd()</snippet></ROW><ROW><id>7983141</id><snippet>import os</snippet></ROW><ROW><id>7983151</id><snippet>body.read()</snippet></ROW><ROW><id>7983151</id><snippet>request.process_request_body</snippet></ROW><ROW><id>7983151</id><snippet>request.method_with_bodies</snippet></ROW><ROW><id>7983190</id><snippet>time.pause</snippet></ROW><ROW><id>7983351</id><snippet>d = {'x':0, 'z':2, 'w':3}
lst = [""] * (max(d.values()) + 1)
for k, v in d.items():
    lst[v] = k
print(lst)
</snippet></ROW><ROW><id>7983351</id><snippet>['x', '', 'z', 'w']
</snippet></ROW><ROW><id>7983587</id><snippet>return json.dumps({'lat': result.lat, 'lon': result.lon})</snippet></ROW><ROW><id>7983775</id><snippet>values = struct.unpack('!7h', data)
</snippet></ROW><ROW><id>7983848</id><snippet>&gt;&gt;&gt;mystr = "abcdefghijkl"
&gt;&gt;&gt;mystr[-4:]
'ijkl'
</snippet></ROW><ROW><id>7983870</id><snippet>using</snippet></ROW><ROW><id>7983870</id><snippet>MyModel.objects</snippet></ROW><ROW><id>7983870</id><snippet>MyModel.objects.using('my_non_default_database').get_or_create(name="Bob")
</snippet></ROW><ROW><id>7983870</id><snippet>my_model = MyModel(name="Bob")
my_model.save(using='my_non_default_database')
</snippet></ROW><ROW><id>7984019</id><snippet>for line in codecs.open("data.txt", "r", encoding="utf-8"):
    tup = ast.literal_eval(line)
    print tup[1]
</snippet></ROW><ROW><id>7984121</id><snippet>def get_Windows_name():
    import subprocess, re
    o = subprocess.Popen('systeminfo', stdout=subprocess.PIPE).communicate()[0]
    try: o = str(o, "latin-1")  # Python 3+
    except: pass  
    return re.search("OS Name:\s*(.*)", o).group(1).strip()

print(get_Windows_name())
</snippet></ROW><ROW><id>7984121</id><snippet>try: import winreg
except: import _winreg as winreg
with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion") as key:
    print(winreg.QueryValueEx(key, "EditionID")[0])
</snippet></ROW><ROW><id>7984121</id><snippet>from win32com.client import GetObject
wim = GetObject('winmgmts:')
print([o.Caption for o in wim.ExecQuery("Select * from Win32_OperatingSystem")][0])
</snippet></ROW><ROW><id>7984562</id><snippet>.decode('utf-8', 'ignore').encode('utf-8')</snippet></ROW><ROW><id>7984899</id><snippet>[{
  "id":            null,
  "name":          [],
  "/common/topic/image": [{}],
  "limit":         10,
  "type":      []
}]​
</snippet></ROW><ROW><id>7984899</id><snippet>[{
  "id":            null,
  "name":          [],
  "type":          "/people/person",
  "/common/topic/image": [{}],
  "limit":         10,
  "ns0:type":      []
}]​
</snippet></ROW><ROW><id>7984963</id><snippet>join</snippet></ROW><ROW><id>7984963</id><snippet>class MyStr(unicode):
    def join(self, strs):
        # your code here
</snippet></ROW><ROW><id>7984963</id><snippet>MyStr(...).join(...)</snippet></ROW><ROW><id>7984963</id><snippet>unicode</snippet></ROW><ROW><id>7984963</id><snippet>unicode</snippet></ROW><ROW><id>7984963</id><snippet>PyUnicode_Join</snippet></ROW><ROW><id>7984963</id><snippet>res = _PyUnicode_New(res_alloc);
</snippet></ROW><ROW><id>7984963</id><snippet>PyUnicode_Join</snippet></ROW><ROW><id>7984963</id><snippet>PyUnicode</snippet></ROW><ROW><id>7984963</id><snippet>/* Convert item to Unicode. */
if (! PyUnicode_Check(item) &amp;&amp; ! PyString_Check(item)) {
    PyErr_Format(PyExc_TypeError,
                 "sequence item %zd: expected string or Unicode,"
                 " %.80s found",
                 i, Py_TYPE(item)-&gt;tp_name);
    goto onError;
}
</snippet></ROW><ROW><id>7984963</id><snippet>unicode</snippet></ROW><ROW><id>7984963</id><snippet>':'.join( [MyStr('A'), 'B', u'C'] )
</snippet></ROW><ROW><id>7985075</id><snippet>tally[length_word]</snippet></ROW><ROW><id>7985075</id><snippet>- 1</snippet></ROW><ROW><id>7985075</id><snippet>#lines = open ('E:\Python\Assessment\dracula.txt', 'r'). readlines ()

#stripped_list = [item.strip() for item in lines]

with open('/home/facundo/tmp/words.txt') as i:
    stripped_list = [x.strip() for x in i.readlines()]

#tally = [] #empty set of lengths
#for lengths in range(1,20):
#    tally.append(0)

tally = [0] * 20

print tally #original tally

for i in stripped_list:
    #length_word = int(len(i))
    word_length = len(i)
    #tally[length_word] = tally[length_word] + 1
    if word_length &gt; 0:
        tally[word_length - 1] += 1

print tally
</snippet></ROW><ROW><id>7985217</id><snippet>res.headers.add('Set-Cookie', header_value)
</snippet></ROW><ROW><id>7985435</id><snippet>import gtk

def print_size(widget, data=None):
    print window.get_size()

def delete_event(widget, data=None):
    print window.get_size()
    return False

def destroy(widget, data=None):
    gtk.main_quit()

window = gtk.Window()
window.connect('delete_event', delete_event)
window.connect('destroy', destroy)

button = gtk.Button(label='Print size')
button.connect('clicked', print_size)
window.add(button)

window.show_all()

gtk.main()
</snippet></ROW><ROW><id>7985435</id><snippet>get_size</snippet></ROW><ROW><id>7985435</id><snippet>delete_event</snippet></ROW><ROW><id>7985435</id><snippet>destroy</snippet></ROW><ROW><id>7985435</id><snippet>destroy</snippet></ROW><ROW><id>7985480</id><snippet>export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH
</snippet></ROW><ROW><id>7985480</id><snippet>python ./waf configure</snippet></ROW><ROW><id>7985480</id><snippet>PKG_CONFIG_PATH</snippet></ROW><ROW><id>7985480</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>7985480</id><snippet>Checking for 'cairo' &gt;= 1.10.0
['/opt/local/bin/pkg-config', '--atleast-version=1.10.0', 'cairo']
not found
</snippet></ROW><ROW><id>7985480</id><snippet>/opt/local/bin/pkg-config --libs cairo</snippet></ROW><ROW><id>7985480</id><snippet>PKG_CONFIG_PATH</snippet></ROW><ROW><id>7985665</id><snippet>&gt;&gt;&gt; new_tally = [5, 7, 8, 6, 4, 2]
&gt;&gt;&gt; for i, b in enumerate(new_tally, 1):
        print i, ':', b, '*' * b

1 : 5 *****
2 : 7 *******
3 : 8 ********
4 : 6 ******
5 : 4 ****
6 : 2 **
</snippet></ROW><ROW><id>7985665</id><snippet>new_tally(i)</snippet></ROW><ROW><id>7985665</id><snippet>new_tally[i]</snippet></ROW><ROW><id>7985750</id><snippet>tuple</snippet></ROW><ROW><id>7985750</id><snippet>list</snippet></ROW><ROW><id>7985750</id><snippet>&gt;&gt;&gt; class Coffee(object):
...     pass
... 
&gt;&gt;&gt; class Tea(object):
...     pass
... 
&gt;&gt;&gt; c = Coffee()
&gt;&gt;&gt; t = Tea()
&gt;&gt;&gt; c &gt; t
False
&gt;&gt;&gt; c == t
False
&gt;&gt;&gt; c &lt; t
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7985937</id><snippet>option1</snippet></ROW><ROW><id>7985937</id><snippet>self.output.Clear()</snippet></ROW><ROW><id>7985937</id><snippet>option1</snippet></ROW><ROW><id>7985937</id><snippet>clipdata = wx.TextDataObject()
clipdata.SetText("Text here")
wx.TheClipboard.Open()
wx.TheClipboard.SetData(clipdata)
wx.TheClipboard.Close()
</snippet></ROW><ROW><id>7986500</id><snippet>from config.common import *
from config.specific import *
</snippet></ROW><ROW><id>7986500</id><snippet>manage.py</snippet></ROW><ROW><id>7986511</id><snippet>ShellExecuteEx()</snippet></ROW><ROW><id>7986511</id><snippet>properties</snippet></ROW><ROW><id>7986511</id><snippet>properties</snippet></ROW><ROW><id>7986511</id><snippet>ctypes</snippet></ROW><ROW><id>7986511</id><snippet>import time
import ctypes
import ctypes.wintypes

SEE_MASK_NOCLOSEPROCESS = 0x00000040
SEE_MASK_INVOKEIDLIST = 0x0000000C

class SHELLEXECUTEINFO(ctypes.Structure):
    _fields_ = (
        ("cbSize",ctypes.wintypes.DWORD),
        ("fMask",ctypes.c_ulong),
        ("hwnd",ctypes.wintypes.HANDLE),
        ("lpVerb",ctypes.c_char_p),
        ("lpFile",ctypes.c_char_p),
        ("lpParameters",ctypes.c_char_p),
        ("lpDirectory",ctypes.c_char_p),
        ("nShow",ctypes.c_int),
        ("hInstApp",ctypes.wintypes.HINSTANCE),
        ("lpIDList",ctypes.c_void_p),
        ("lpClass",ctypes.c_char_p),
        ("hKeyClass",ctypes.wintypes.HKEY),
        ("dwHotKey",ctypes.wintypes.DWORD),
        ("hIconOrMonitor",ctypes.wintypes.HANDLE),
        ("hProcess",ctypes.wintypes.HANDLE),
    )

ShellExecuteEx = ctypes.windll.shell32.ShellExecuteEx
ShellExecuteEx.restype = ctypes.wintypes.BOOL

sei = SHELLEXECUTEINFO()
sei.cbSize = ctypes.sizeof(sei)
sei.fMask = SEE_MASK_NOCLOSEPROCESS | SEE_MASK_INVOKEIDLIST
sei.lpVerb = "properties"
sei.lpFile = "C:\\Desktop\\test.txt"
sei.nShow = 1
ShellExecuteEx(ctypes.byref(sei))
time.sleep(5)
</snippet></ROW><ROW><id>7986511</id><snippet>sleep</snippet></ROW><ROW><id>7986511</id><snippet>ShellExecuteEx</snippet></ROW><ROW><id>7986526</id><snippet>a.readlines()</snippet></ROW><ROW><id>7986526</id><snippet>float('0.000\t0.000\t0.000\t0.000\n')</snippet></ROW><ROW><id>7986526</id><snippet>&gt;&gt;&gt; x = '0.000\t0.000\t0.000\t0.000\n'
# To simulate a.readlines()' list
&gt;&gt;&gt; lines = [x,]
&gt;&gt;&gt; 

# Strip the newline, and separate the values based on the tab control character.
&gt;&gt;&gt; lines_values = map(lambda l: l.strip().split('\t'), lines)
&gt;&gt;&gt; lines_values
[['0.000', '0.000', '0.000', '0.000']]

# For each value in in the list of lines' values, convert from string to a float.
&gt;&gt;&gt; values_float = [map(float, v) for v in values]
&gt;&gt;&gt; values_float
[[0.0, 0.0, 0.0, 0.0]]
</snippet></ROW><ROW><id>7986963</id><snippet>results</snippet></ROW><ROW><id>7986963</id><snippet>results = ast.literal_eval(responseAsJson['results'][0]['value'])
</snippet></ROW><ROW><id>7987159</id><snippet>{"fname" : "Bob", "lname" : "Johnson", "email" : "email.@email.com" ... }
</snippet></ROW><ROW><id>7987159</id><snippet>var fname = response.fname; // etc
</snippet></ROW><ROW><id>7987324</id><snippet>getoutput</snippet></ROW><ROW><id>7987324</id><snippet>commands</snippet></ROW><ROW><id>7987324</id><snippet>from commands import getoutput

response = getoutput('php myscript.php')
</snippet></ROW><ROW><id>7987348</id><snippet>_meta</snippet></ROW><ROW><id>7987348</id><snippet>app_label = obj._meta.app_label
model = obj._meta.module_name

reverse('admin:%s_%s_change' % (app_label, model), args=(obj.id,))
</snippet></ROW><ROW><id>7987462</id><snippet>f1</snippet></ROW><ROW><id>7987462</id><snippet>pl.figure(f1.number)
</snippet></ROW><ROW><id>7987462</id><snippet>pl.figure("Share values")
# ... some plots ...
pl.figure("Profits")
# ... some plots ...

pl.figure("Share values")  # Selects the first figure again
</snippet></ROW><ROW><id>7987462</id><snippet>pylab.figure()</snippet></ROW><ROW><id>7987462</id><snippet>matplotlib.pyplot.figure()</snippet></ROW><ROW><id>7987754</id><snippet>a = str(msg)
i = a.decode('quopri').decode('utf-8').replace('&amp;', '&amp;')
saver.write(i)
savercontent = saver.getvalue()
</snippet></ROW><ROW><id>7987754</id><snippet>i = a.decode('quopri').replace('&amp;', '&amp;').decode('utf-8')
</snippet></ROW><ROW><id>7988307</id><snippet>libpythonplugin.so</snippet></ROW><ROW><id>7988307</id><snippet>sip</snippet></ROW><ROW><id>7988307</id><snippet>python-sip-dev</snippet></ROW><ROW><id>7988307</id><snippet>python3-sip-dev</snippet></ROW><ROW><id>7988307</id><snippet>PyQt-x11-gpl-4.8.5</snippet></ROW><ROW><id>7988307</id><snippet>$ cd ~/tmp
$ tar -xf python-qt4_4.8.5.orig.tar.gz
$ cd PyQt-x11-gpl-4.8.5
$ /usr/bin/python3.2 configure.py -c -j 4
</snippet></ROW><ROW><id>7988307</id><snippet>$ make
</snippet></ROW><ROW><id>7988307</id><snippet>libpythonplugin.so</snippet></ROW><ROW><id>7988307</id><snippet>PyQt-x11-gpl-4.8.5/designer</snippet></ROW><ROW><id>7988307</id><snippet>/usr/lib/qt/plugins/designer</snippet></ROW><ROW><id>7988435</id><snippet>difflib</snippet></ROW><ROW><id>7988435</id><snippet>&gt;&gt;&gt; from difflib import SequenceMatcher
&gt;&gt;&gt; number1 = 54378
&gt;&gt;&gt; number2 = 54379
&gt;&gt;&gt; SequenceMatcher(None, str(number1), str(number2)).ratio()
0.80000000000000004
</snippet></ROW><ROW><id>7988435</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>7988435</id><snippet>ratio()</snippet></ROW><ROW><id>7988435</id><snippet>quick_ratio()</snippet></ROW><ROW><id>7988435</id><snippet>real_quick_ratio()</snippet></ROW><ROW><id>7988435</id><snippet>metric = 0.6   # just an example value
if SequenceMatcher(None, str(a), str(b)).ratio() &gt; metric:
    # a and b are similar
</snippet></ROW><ROW><id>7988535</id><snippet>from itertools import chain
def makeMap(d):
    nodes = set([x for x in chain.from_iterable(d.values())])
    return dict([[x, [y for y in d.keys() if x in d[y]]] for x in nodes ])
</snippet></ROW><ROW><id>7988535</id><snippet>def makeMap(d):
    return dict([[x, [y for y in d.keys() if x in d[y]]]
                 for x in set([x for x in chain.from_iterable(d.values())])
                 ])
</snippet></ROW><ROW><id>7988564</id><snippet># do this:
import random

for x in xrange(SOMEVERYLARGENUMBER):
    n = random.randint(1,1000) # whatever your range of random numbers is
    # Do stuff with n

# don't do this:
import random

# This list comprehension generates random numbers in a list
numbers = [random.randint(1,1000) for x in xrange(SOMEVERYLARGENUMBER)]

for n in numbers:
    # Do stuff with n
</snippet></ROW><ROW><id>7988622</id><snippet>%s</snippet></ROW><ROW><id>7988622</id><snippet>%r</snippet></ROW><ROW><id>7988622</id><snippet>%s</snippet></ROW><ROW><id>7988732</id><snippet>from itertools import izip

l = [[10, 9, 1], [2, 1, 1,], [4, 11, 16]]
# flatten the list and sort it
f = sorted(inner for outer in l for inner in outer)
# group it into 3s again using izip
new_list = [list(l) for l in izip(*[iter(f)]*3)]
</snippet></ROW><ROW><id>7988886</id><snippet>select id,title, text,pub_date,category from entries where category = music
</snippet></ROW><ROW><id>7988886</id><snippet>select id,title, text,pub_date,category from entries where category = 'music'
</snippet></ROW><ROW><id>7988886</id><snippet> cur = g.db.execute(
         'select id,title, text,pub_date,category from entries where category = ?',
         [category_name])
</snippet></ROW><ROW><id>7988897</id><snippet>QMainWidget</snippet></ROW><ROW><id>7988897</id><snippet>QFormLayout</snippet></ROW><ROW><id>7988897</id><snippet>QWidget</snippet></ROW><ROW><id>7988897</id><snippet>QWidget</snippet></ROW><ROW><id>7988897</id><snippet>QWidget</snippet></ROW><ROW><id>7988897</id><snippet>QFormLayout</snippet></ROW><ROW><id>7988897</id><snippet>range</snippet></ROW><ROW><id>7988897</id><snippet>from PySide import QtGui, QtCore

class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.textEdit = Editor(self)
        self.toolBar = QtGui.QToolBar(self)
        self.actionZoomIn = QtGui.QAction('Zoom In', self)
        self.actionZoomOut = QtGui.QAction('Zoom Out', self)
        self.textEdit.setHtml('&lt;font color=blue&gt;Hello &lt;b&gt;world&lt;/b&gt;&lt;/font&gt;')
        self.setCentralWidget(self.textEdit)
        self.addToolBar(self.toolBar)
        self.toolBar.addAction(self.actionZoomIn)
        self.toolBar.addAction(self.actionZoomOut)
        self.actionZoomIn.triggered.connect(self.onZoomInClicked)
        self.actionZoomOut.triggered.connect(self.onZoomOutClicked)

    def onZoomInClicked(self):
        self.textEdit.zoom(+1)

    def onZoomOutClicked(self):
        self.textEdit.zoom(-1)

class Editor(QtGui.QTextEdit):
    def __init__(self, parent=None):
        super(Editor, self).__init__(parent)

    def zoom(self, delta):
        if delta &lt; 0:
            self.zoomOut(1)
        elif delta &gt; 0:
            self.zoomIn(5)

    def wheelEvent(self, event):
        if (event.modifiers() &amp; QtCore.Qt.ControlModifier):
            self.zoom(event.delta())
        else:
            QtGui.QTextEdit.wheelEvent(self, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    app.exec_()
</snippet></ROW><ROW><id>7988907</id><snippet>sys.excepthook</snippet></ROW><ROW><id>7988907</id><snippet>import sys

def exc_hook(type, value, traceback):
    print type

sys.excepthook = exc_hook
</snippet></ROW><ROW><id>7988907</id><snippet>sys</snippet></ROW><ROW><id>7988907</id><snippet>sys.excepthook(type, value, traceback)</snippet></ROW><ROW><id>7988907</id><snippet>sys.excepthook</snippet></ROW><ROW><id>7988907</id><snippet>sys.__displayhook__</snippet></ROW><ROW><id>7988907</id><snippet>sys.__excepthook__</snippet></ROW><ROW><id>7988907</id><snippet>--xmode</snippet></ROW><ROW><id>7988907</id><snippet>Plain</snippet></ROW><ROW><id>7988907</id><snippet>$ ipython [options] files

--xmode=&lt;modename&gt;
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Plain</snippet></ROW><ROW><id>7988907</id><snippet>[ 19:55 jon@hozbox ~/SO/python ]$ ipython --xmode=Plain ipython-debugger-full-traceback-on-interactive-pdb.py 
------------------------------------------------------------
Traceback (most recent call last):
  File "ipython-debugger-full-traceback-on-interactive-pdb.py", line 2, in &lt;module&gt;
    1 / 0
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Context</snippet></ROW><ROW><id>7988907</id><snippet>[ 19:55 jon@hozbox ~/SO/python ]$ ipython --xmode=Context ipython-debugger-full-traceback-on-interactive-pdb.py 
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/home/jon/SO/python/ipython-debugger-full-traceback-on-interactive-pdb.py in &lt;module&gt;()
      1 
----&gt; 2 #!/usr/bin/python
      3 1 / 0
      4 
      5 

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Verbose</snippet></ROW><ROW><id>7988907</id><snippet>[ 19:54 jon@hozbox ~/SO/python ]$ ipython --xmode=Verbose ipython-debugger-full-traceback-on-interactive-pdb.py 
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/home/jon/SO/python/ipython-debugger-full-traceback-on-interactive-pdb.py in &lt;module&gt;()
      1 
----&gt; 2 #!/usr/bin/python
      3 1 / 0
      4 
      5 

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Plain</snippet></ROW><ROW><id>7988907</id><snippet>[ 19:55 jon@hozbox ~/SO/python ]$ ipython --xmode=Plain

In [1]: 1 / 0
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Context</snippet></ROW><ROW><id>7988907</id><snippet>[ 20:03 jon@hozbox ~/SO/python ]$ ipython --xmode=Context

In [1]: 1 / 0
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/home/jon/SO/python/&lt;ipython console&gt; in &lt;module&gt;()

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988907</id><snippet>--xmode=Verbose</snippet></ROW><ROW><id>7988907</id><snippet>[ 20:01 jon@hozbox ~/SO/python ]$ ipython --xmode=Verbose


In [1]: 1 / 0
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/home/jon/SO/python/&lt;ipython console&gt; in &lt;module&gt;()

ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>7988963</id><snippet>(?P&lt;name&gt;regex)</snippet></ROW><ROW><id>7989062</id><snippet>raclose = []
ramid = []
rafar = []
decdlose = []
decmid = []
decfar = []

for ii in range(len(dist)):
  if dist[ii] &lt; 10.:
    raclose.append(ra[ii])
    decclose.append(dec[ii])
  elif dist[ii] &gt; 20.:
    rafar.append(ra[ii])
    decfar.append(dec[ii])
  else:
    ramid.append(ra[ii])
    decmid.append(dec[ii])

plt.clf
ax1 = scatter(raclose, decclose, marker='o', s=20, color="darkgreen", alpha=0.6)
ax2 = scatter(ramid, decmid, marker='o', s=20, color="goldenrod", alpha=0.6)
ax3 = scatter(rafar, decfar, marker='o', s=20, color="firebrick", alpha=0.6)
line1 = Line2D(range(10), range(10), marker='o', color="darkgreen")
line2 = Line2D(range(10), range(10), marker='o',color="goldenrod")
line3 = Line2D(range(10), range(10), marker='o',color="firebrick")
plt.legend((line1,line2,line3),('d &lt; 10pc','20pc &gt; d &gt; 10pc', 'd &gt; 20pc'),numpoints=1, loc=3)
show()
</snippet></ROW><ROW><id>7989062</id><snippet>import matplotlib.pyplot as plt
from matplotlib import cm
ax = pylab.contourf(RA,Dec,dists, levels=[1, 5, 10, 15], cmap=plt.cm.spectral)
cbar=pylab.colorbar()
</snippet></ROW><ROW><id>7989182</id><snippet>if char == '"'</snippet></ROW><ROW><id>7989182</id><snippet>elif char == ',' and not quote</snippet></ROW><ROW><id>7989182</id><snippet>current</snippet></ROW><ROW><id>7989182</id><snippet>"</snippet></ROW><ROW><id>7989182</id><snippet>quote</snippet></ROW><ROW><id>7989182</id><snippet>,</snippet></ROW><ROW><id>7989182</id><snippet>quote</snippet></ROW><ROW><id>7989236</id><snippet>enumerate</snippet></ROW><ROW><id>7989297</id><snippet>zip</snippet></ROW><ROW><id>7989297</id><snippet>def compare(A,B):
    Awins = 0
    Aties = 0
    Alosses = 0
    for i in range(0, whatever):
        random.shuffle(listA)
        random.shuffle(listB)
        for a,b in zip(A,B):
            if a &gt; b:
                Awins += 1
            elif a == b:
                Aties += 1
            else:
                Alosses += 1
</snippet></ROW><ROW><id>7989341</id><snippet>with</snippet></ROW><ROW><id>7989341</id><snippet>with open('path + 'write_file.csv', 'wb') as f:
    writer = csv.writer(f)
    for line in r:
        ...
</snippet></ROW><ROW><id>7989519</id><snippet>LOCALE_PATHS</snippet></ROW><ROW><id>7989636</id><snippet>hdf5.so</snippet></ROW><ROW><id>7989636</id><snippet>edd@max:~$ ldd /usr/lib/R/site-library/XML/libs/XML.so 
        linux-vdso.so.1 =&gt;  (0x00007fffcbf75000)
        libxml2.so.2 =&gt; /usr/lib/libxml2.so.2 (0x00007fc0a1514000)
        libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007fc0a12fc000)
        libR.so =&gt; /usr/lib/libR.so (0x00007fc0a0d92000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc0a09fe000)
        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc0a07fa000)
        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc0a0574000)
        libblas.so.3gf =&gt; /usr/lib/atlas-base/atlas/libblas.so.3gf (0x00007fc09fcff000)
        libgfortran.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libgfortran.so.3 (0x00007fc09fa1b000)
        libreadline.so.6 =&gt; /lib/libreadline.so.6 (0x00007fc09f7d8000)
        libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fc09f59c000)
        liblzma.so.2 =&gt; /usr/lib/liblzma.so.2 (0x00007fc09f37a000)
        libbz2.so.1.0 =&gt; /lib/libbz2.so.1.0 (0x00007fc09f169000)
        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc09ef61000)
        libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00007fc09ed53000)
        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc09eb34000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fc0a1ab6000)
        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc09e91e000)
        libncurses.so.5 =&gt; /lib/libncurses.so.5 (0x00007fc09e6d9000)
edd@max:~$ 
</snippet></ROW><ROW><id>7989840</id><snippet>from myapp.model import user

from formalchemy import Field
from formalchemy import FieldSet
from formalchemy import Grid

UserFieldSet = FieldSet(user.User)
UserFieldSet.configure()

UserGrid = Grid(user.User)
UserGrid.configure()
</snippet></ROW><ROW><id>7989942</id><snippet>shell</snippet></ROW><ROW><id>7989956</id><snippet>bool([False,True])</snippet></ROW><ROW><id>7989956</id><snippet>True</snippet></ROW><ROW><id>7989956</id><snippet>bool(np.array([False, True]))</snippet></ROW><ROW><id>7989956</id><snippet>np.any</snippet></ROW><ROW><id>7989956</id><snippet>np.all</snippet></ROW><ROW><id>7989956</id><snippet>len</snippet></ROW><ROW><id>7989956</id><snippet>c in l</snippet></ROW><ROW><id>7989956</id><snippet>c</snippet></ROW><ROW><id>7989956</id><snippet>l</snippet></ROW><ROW><id>7989956</id><snippet>a</snippet></ROW><ROW><id>7989956</id><snippet>bool(c==a)</snippet></ROW><ROW><id>7989956</id><snippet>bool(np.array([True True]))</snippet></ROW><ROW><id>7989956</id><snippet>import numpy as np
a=np.array((2,1))
b=np.array((3,3))
c=np.array((2,1))
l=[a,b]
print(any(np.all(c==elt) for elt in l))
# True
</snippet></ROW><ROW><id>7990077</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.executable
/usr/bin/python
</snippet></ROW><ROW><id>7990216</id><snippet>var decodedData = $("&lt;div /&gt;").html(encodedData).text();
</snippet></ROW><ROW><id>7990216</id><snippet>var el = document.createElement("div");
el.innerHTML = encodedData; //shows text that is looks to user like the HTML
var decodedData = el.firstChild.nodeValue; //text node value to use as HTML later
</snippet></ROW><ROW><id>7990252</id><snippet>entry_list = [entry.title.text for entry in feed.entry]
</snippet></ROW><ROW><id>7990252</id><snippet>entry_list.extend([entry.title.text for entry in feed.entry])
</snippet></ROW><ROW><id>7990315</id><snippet>numpy.array(list(set(tuple(p) for p in points)))</snippet></ROW><ROW><id>7990416</id><snippet>{% for offer in offers %}</snippet></ROW><ROW><id>7990416</id><snippet>{{offer.title}}</snippet></ROW><ROW><id>7990416</id><snippet>{{offer.get_absolute_url}}</snippet></ROW><ROW><id>7990416</id><snippet>{% url url_related_name id=id %}</snippet></ROW><ROW><id>7990416</id><snippet>slug=offer.slug</snippet></ROW><ROW><id>7990451</id><snippet>import sys
old_stdout, old_stderr = sys.stdout, sys.stderr
sys.stdout = open('/dev/null', 'w')
sys.stderr = open('/dev/null', 'w')
</snippet></ROW><ROW><id>7990525</id><snippet>csv</snippet></ROW><ROW><id>7990525</id><snippet>from io import StringIO

indata = StringIO(u"""read_1    +   345995|PACid:16033981   599 AGTAGTAATCAGTCACCCGCAAGGTAGACAAGG   qqqqqqqqqqqqqqqqqqqqq!!qqqqqqqqqq   0
read_2  +   949205|PACid:16054220   338 TACCAGCACTAATGCACCGGATCCCATCAGATC   qqqqqqqqqqqqqqqqqqqqqqqqqqqqqq!!q   0   31:A&gt;T
read_3  +   932004|PACid:16034380   1226    GGCACCTTATGAGAAATCAAAGTTTTTGGGTTC   qqqqqqqqqqqqqqq!!qqqqqqqqqqqqq!!q   3
""")

# that StringIO stuff is just for testing, you should do
# with open('your_file_name', 'r') as indata:
# before the 'for' loop, and then indent the rest one level.

from csv import reader

for line in reader(indata, delimiter='\t'):
    if len(line) &gt; 3:
        line[3] = str(int(line[3]) - 1)
    print '\t'.join(line)
</snippet></ROW><ROW><id>7990727</id><snippet>reshape</snippet></ROW><ROW><id>7990727</id><snippet>&gt;&gt;&gt; a = np.random.randn(5)
&gt;&gt;&gt; a.shape
(5,)
&gt;&gt;&gt; b = a.reshape(5,1)
&gt;&gt;&gt; b.shape
(5, 1)
&gt;&gt;&gt; a.shape
(5,)
</snippet></ROW><ROW><id>7990727</id><snippet>np.asarray</snippet></ROW><ROW><id>7990727</id><snippet>(400,1)</snippet></ROW><ROW><id>7990727</id><snippet>np.asarray(lst).reshape((-1, 1))</snippet></ROW><ROW><id>7990727</id><snippet>-1</snippet></ROW><ROW><id>7990727</id><snippet>np.asarray([lst]).T</snippet></ROW><ROW><id>7990727</id><snippet>.T</snippet></ROW><ROW><id>7990727</id><snippet>(1,5)</snippet></ROW><ROW><id>7990727</id><snippet>(5,1)</snippet></ROW><ROW><id>7990727</id><snippet>ary.reshape((-1,))</snippet></ROW><ROW><id>7990779</id><snippet>fieldNames1</snippet></ROW><ROW><id>7990779</id><snippet>repr()</snippet></ROW><ROW><id>7990779</id><snippet>feildNames1</snippet></ROW><ROW><id>7990779</id><snippet>e</snippet></ROW><ROW><id>7990779</id><snippet>i</snippet></ROW><ROW><id>7990855</id><snippet>memoizer/
  memoizer.py
  tests.py
  strategies/
    __init__.py
    perfect.py
    mru/
      __init__.py &lt;- This is what used to be mru.py
      queue.py
README
</snippet></ROW><ROW><id>7990855</id><snippet>import memoizer.strategies.mru</snippet></ROW><ROW><id>7990855</id><snippet>mru.py</snippet></ROW><ROW><id>7990855</id><snippet>__init__.py</snippet></ROW><ROW><id>7990855</id><snippet>import mru as _mru

SomeClass = _mru.SomeClass
# etc...
</snippet></ROW><ROW><id>7991230</id><snippet>tup = ... # some sequence/tuple of unknown length
sql = 'SELECT * FROM table WHERE word IN (%s)' % ', '.join('?' for a in tup)
c.execute(sql, tup)
</snippet></ROW><ROW><id>7991458</id><snippet>import xlrd
book = xlrd.open_workbook("sample.xls", formatting_info=1)
sheets = book.sheet_names()
print "sheets are:", sheets
for index, sh in enumerate(sheets):
    sheet = book.sheet_by_index(index)
    print "Sheet:", sheet.name
    rows, cols = sheet.nrows, sheet.ncols
    print "Number of rows: %s   Number of cols: %s" % (rows, cols)
    for row in range(rows):
        for col in range(cols):
            print "row, col is:", row+1, col+1,
            thecell = sheet.cell(row, col)      # could get 'dump',
'value', 'xf_index'
            print thecell.value,
            xfx = sheet.cell_xf_index(row, col)
            xf = book.xf_list[xfx]
            bgx = xf.background.pattern_colour_index
            print bgx
</snippet></ROW><ROW><id>7991831</id><snippet>input.bookFlightButton</snippet></ROW><ROW><id>7991831</id><snippet>mouseup</snippet></ROW><ROW><id>7991831</id><snippet>click</snippet></ROW><ROW><id>7991831</id><snippet>Submit Form</snippet></ROW><ROW><id>7991831</id><snippet>$('input.bookFlightButton').click()
$('input.bookFlightButton').mouseup()
</snippet></ROW><ROW><id>7991831</id><snippet>sel.click</snippet></ROW><ROW><id>7991831</id><snippet>sel.get_eval("window.jQuery('input.bookFlightButton').mouseup()")
</snippet></ROW><ROW><id>7991909</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import xml.etree.cElementTree as etree

en2jp = {u"State": u"州", u"City": u"都市", u"Town": u"町"} # English -&gt; Japanese

tree = etree.parse(filename)
for field in tree.iterfind('.//Fields/Field'):
    name, alias = [field.find(tag) for tag in ['Name', 'AliasName']]
    if name is None or name.text is None or alias is None: continue
    alias.text = en2jp.get(name.text.strip(), alias.text)
tree.write('output.xml', encoding='utf-8')
</snippet></ROW><ROW><id>7991909</id><snippet>&lt;AliasName&gt;</snippet></ROW><ROW><id>7991909</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>7991909</id><snippet>&lt;Field&gt;</snippet></ROW><ROW><id>7991909</id><snippet>#!/usr/bin/env python
import xml.etree.cElementTree as etree

tree = etree.parse("input.xml")
for field in tree.iterfind('.//Fields/FieldArray/Field'):
    name, alias = [field.find(tag) for tag in ['Name', 'AliasName']]
    if name is None or alias is None: 
       continue # skip if either &lt;Name&gt; or &lt;AliasName&gt; are not found
    alias.text = name.text # set &lt;AliasName&gt; text to be the same as &lt;Name&gt;

tree.write('output.xml', encoding='utf-8')
</snippet></ROW><ROW><id>7992159</id><snippet>Return the “identity” of an object. This is an integer (or long integer) 
which is guaranteed to be unique and constant for this object during its lifetime. 
Two objects with non-overlapping lifetimes may have the same id() value.
</snippet></ROW><ROW><id>7992159</id><snippet>import md5
&gt;&gt;&gt; md5.new(str(range(1,5))).hexdigest()
'd5397571a7f9c05bd58bed77f9dbe8f0'
&gt;&gt;&gt; md5.new(str(range(1,15))).hexdigest()
'000b3ca7f2653a13cdb5b96f21c2ba4d'
</snippet></ROW><ROW><id>7992519</id><snippet>__new__</snippet></ROW><ROW><id>7992519</id><snippet>__init__</snippet></ROW><ROW><id>7992519</id><snippet>__new__</snippet></ROW><ROW><id>7992519</id><snippet>__init__</snippet></ROW><ROW><id>7992519</id><snippet>float.__new__</snippet></ROW><ROW><id>7992519</id><snippet>def rounded_float(f): return round(f, 2)
</snippet></ROW><ROW><id>7992519</id><snippet>from functools import partial
rounded_float = partial(round, ndigits=2)
</snippet></ROW><ROW><id>7992519</id><snippet>rounded_float(1.0/3.0)</snippet></ROW><ROW><id>7992519</id><snippet>0.33</snippet></ROW><ROW><id>7992519</id><snippet>Decimal</snippet></ROW><ROW><id>7992643</id><snippet>a = [
   "a",
   "b"
   "c"
]
</snippet></ROW><ROW><id>7993116</id><snippet>def __init__(self, parent, b):
    self = wx.Frame(parent = parent, id=-1, title="Parameters")
</snippet></ROW><ROW><id>7993116</id><snippet>self</snippet></ROW><ROW><id>7993116</id><snippet>ParamWindow</snippet></ROW><ROW><id>7993116</id><snippet>    self.a = b
</snippet></ROW><ROW><id>7993116</id><snippet>a</snippet></ROW><ROW><id>7993116</id><snippet>self</snippet></ROW><ROW><id>7993116</id><snippet>Frame</snippet></ROW><ROW><id>7993116</id><snippet>ParamWindow</snippet></ROW><ROW><id>7993116</id><snippet>ParamWindow.a</snippet></ROW><ROW><id>7993116</id><snippet>Frame</snippet></ROW><ROW><id>7993116</id><snippet>class ParamWindow(wx.Frame):
    def __init__(self, parent, b):
        # Initialize the superclass (wx.Frame).
        super(ParamWindow, self).__init__(parent=parent, id=-1, title="Parameters")
        self.a = b
        print self.a
</snippet></ROW><ROW><id>7993144</id><snippet>good_stuff.encode('ascii', 'ignore')</snippet></ROW><ROW><id>7993144</id><snippet>ISO-8859-9</snippet></ROW><ROW><id>7993378</id><snippet>&gt;&gt;&gt; msg = u'abc' # Unicode string
&gt;&gt;&gt; message_body = '\xc5' # bytestring
&gt;&gt;&gt; msg += message_body
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 0: ordinal \
not in range(128)
</snippet></ROW><ROW><id>7993378</id><snippet>self.headers</snippet></ROW><ROW><id>7993378</id><snippet>headers</snippet></ROW><ROW><id>7993378</id><snippet>self.headers = dict((k.encode('ascii') if isinstance(k, unicode) else k,
                     v.encode('ascii') if isinstance(v, unicode) else v)
                    for k,v in self.headers.items())
</snippet></ROW><ROW><id>7993378</id><snippet>self.url</snippet></ROW><ROW><id>7993554</id><snippet>os.chdir</snippet></ROW><ROW><id>7993570</id><snippet>admin.py</snippet></ROW><ROW><id>7993570</id><snippet>models.py</snippet></ROW><ROW><id>7993570</id><snippet>management/commands</snippet></ROW><ROW><id>7993570</id><snippet>fixtures</snippet></ROW><ROW><id>7994137</id><snippet>CrawlerProcess</snippet></ROW><ROW><id>7994137</id><snippet>start</snippet></ROW><ROW><id>7994137</id><snippet>stop</snippet></ROW><ROW><id>7994137</id><snippet>stop</snippet></ROW><ROW><id>7994137</id><snippet>crawler.stop()</snippet></ROW><ROW><id>7994137</id><snippet>crawler.start()</snippet></ROW><ROW><id>7994137</id><snippet>stop</snippet></ROW><ROW><id>7994137</id><snippet>from scrapy import project, signals
from scrapy.conf import settings
from scrapy.crawler import CrawlerProcess
from scrapy.xlib.pydispatch import dispatcher
from multiprocessing.queues import Queue
from multiprocessing import Process

class CrawlerWorker(Process):
    def __init__(self, spider, results):
        Process.__init__(self)
        self.results = results

        self.crawler = CrawlerProcess(settings)
        if not hasattr(project, 'crawler'):
            self.crawler.install()
        self.crawler.configure()

        self.items = []
        self.spider = spider
        dispatcher.connect(self._item_passed, signals.item_passed)

    def _item_passed(self, item):
        self.items.append(item)

    def run(self):
        self.crawler.crawl(self.spider)
        self.crawler.start()
        self.crawler.stop()
        self.results.put(self.items)

# The part below can be called as often as you want
results = Queue()
crawler = CrawlerWorker(MySpider(myArgs), results)
crawler.start()
for item in results.get():
    pass # Do something with item
</snippet></ROW><ROW><id>7994155</id><snippet>msword.ActiveDocument</snippet></ROW><ROW><id>7994155</id><snippet>PrintOut</snippet></ROW><ROW><id>7994155</id><snippet>expression.PrintOut(Background, Append, Range, OutputFileName, From, To, Item, 
  Copies, Pages, PageType, PrintToFile, Collate, FileName, ActivePrinterMacGX, 
  ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, 
  PrintZoomPaperHeight)
</snippet></ROW><ROW><id>7994155</id><snippet>Background</snippet></ROW><ROW><id>7994155</id><snippet>True</snippet></ROW><ROW><id>7994155</id><snippet>msword.ActiveDocument.Printout()</snippet></ROW><ROW><id>7994155</id><snippet>msword.ActiveDocument.printout()</snippet></ROW><ROW><id>7994155</id><snippet>ActiveDocument</snippet></ROW><ROW><id>7994155</id><snippet>activedocument</snippet></ROW><ROW><id>7994155</id><snippet>PrintOut</snippet></ROW><ROW><id>7994155</id><snippet>printout</snippet></ROW><ROW><id>7994184</id><snippet>elevation[elevation &gt; 0] = numpy.NAN
</snippet></ROW><ROW><id>7994276</id><snippet>class Old:
    ...

class New(object):
    ....
</snippet></ROW><ROW><id>7994377</id><snippet>rpm -i --relocate /usr=/opt/python27 python-2.7.rpm
</snippet></ROW><ROW><id>7994426</id><snippet>b = a[a&gt;threshold]</snippet></ROW><ROW><id>7994426</id><snippet>import numpy as np, datetime
# array of zeros and ones interleaved
lrg = np.arange(2).reshape((2,-1)).repeat(1000000,-1).flatten()

t0 = datetime.datetime.now()
flt = lrg[lrg==0]
print datetime.datetime.now() - t0

t0 = datetime.datetime.now()
flt = np.array(filter(lambda x:x==0, lrg))
print datetime.datetime.now() - t0
</snippet></ROW><ROW><id>7994426</id><snippet>$ python test.py
0:00:00.028000
0:00:02.461000
</snippet></ROW><ROW><id>7994439</id><snippet>allow_tags</snippet></ROW><ROW><id>7994439</id><snippet>def network_name(instance):
    return '&lt;img src="%s" /&gt;' % instance.network.image_url
network_name.allow_tags = True
</snippet></ROW><ROW><id>7994990</id><snippet>tkinter.filedialog</snippet></ROW><ROW><id>7994990</id><snippet>from tkinter import filedialog
</snippet></ROW><ROW><id>7994990</id><snippet>filedialog</snippet></ROW><ROW><id>7994990</id><snippet>help(filedialog)</snippet></ROW><ROW><id>7994990</id><snippet>filedialog.LoadFileDialog</snippet></ROW><ROW><id>7995015</id><snippet>&gt;&gt;&gt; a - a.min(axis=0)
array([[0, 4],
       [2, 2],
       [4, 0]])
</snippet></ROW><ROW><id>7995447</id><snippet>nsmap = {None: default_ns, "gsa": gsa_ns}
</snippet></ROW><ROW><id>7995586</id><snippet>operator()</snippet></ROW><ROW><id>7995586</id><snippet>callable</snippet></ROW><ROW><id>7995586</id><snippet>__call__</snippet></ROW><ROW><id>7995743</id><snippet>for name, value in sorted(os.environ.items()):
    print("   " + name + "=" + value)
</snippet></ROW><ROW><id>7995925</id><snippet>&gt;&gt;&gt; s='=?ISO-8859-1?Q?Mr_Kr=F6ber?= [mr.kroeber@gmail.com]'
&gt;&gt;&gt; from email.header import decode_header
&gt;&gt;&gt; decode_header(s)
[('Mr Kr\xf6ber', 'iso-8859-1'), ('[mr.kroeber@gmail.com]', None)]
&gt;&gt;&gt; u = u' '.join(w.decode(e or 'ascii') for w,e in decode_header(s))
&gt;&gt;&gt; u
u'Mr Kr\xf6ber [mr.kroeber@gmail.com]'
&gt;&gt;&gt; print u
Mr Kröber [mr.kroeber@gmail.com]
</snippet></ROW><ROW><id>7996295</id><snippet>portfd = os.open(portname, os.O_RDWR | getattr(os, 'O_NONBLOCK', 0))
</snippet></ROW><ROW><id>7996326</id><snippet>i</snippet></ROW><ROW><id>7996326</id><snippet>aDictionary[i]</snippet></ROW><ROW><id>7996339</id><snippet>from webscraping import common, download, xpath

# download html
D = download.Download()
html = D.get('http://www.expatistan.com/cost-of-living/comparison/melbourne/auckland')

# extract data
items = xpath.search(html, '//td[@class="item-name"]')
city1_prices = xpath.search(html, '//td[@class="price city-1"]')
city2_prices = xpath.search(html, '//td[@class="price city-2"]')

# display and format
for item, city1_price, city2_price in zip(items, city1_prices, city2_prices):
    print item.strip(), city1_price.strip(), common.remove_tags(city2_price, False).strip()
</snippet></ROW><ROW><id>7996367</id><snippet>ZeroOrMore</snippet></ROW><ROW><id>7996367</id><snippet>+ LineEnd</snippet></ROW><ROW><id>7996392</id><snippet>map(list.extend, T, B)
</snippet></ROW><ROW><id>7996392</id><snippet>for t, b in zip(T, B):
    t.extend(b)
</snippet></ROW><ROW><id>7996530</id><snippet>difflib</snippet></ROW><ROW><id>7996530</id><snippet>&gt;&gt;&gt; def comp(old_dict, new_dict):
...     for key, old_val in old_dict.items():
...         new_val = new_dict[key]  # warning: to be used on keys in both dict
...         print 'evolutions for', key
...         print 'new content:', [x for x in new_val if x not in old_val]
...         print 'removed content:', [x for x in old_val if x not in new_val]

# now testing on a simple example
&gt;&gt;&gt; o = {'key1': ['a', 'b', 'c']}
&gt;&gt;&gt; n = {'key1': ['b', 'c', 'd']}
&gt;&gt;&gt; comp(o, n)
evolutions for key1
new content: ['d']
removed content: ['a']
</snippet></ROW><ROW><id>7996530</id><snippet>new_dict</snippet></ROW><ROW><id>7996530</id><snippet>old_dict</snippet></ROW><ROW><id>7996530</id><snippet>new_val</snippet></ROW><ROW><id>7996530</id><snippet>old_dict</snippet></ROW><ROW><id>7996530</id><snippet>new_dict</snippet></ROW><ROW><id>7996530</id><snippet>new_dict</snippet></ROW><ROW><id>7996530</id><snippet>old_dict</snippet></ROW><ROW><id>7996613</id><snippet>import gzip
import StringIO

stringio = StringIO.StringIO()
gzip_file = gzip.GzipFile(fileobj=stringio, mode='w')
gzip_file.write('Hello World')
gzip_file.close()

stringio.getvalue()
</snippet></ROW><ROW><id>7997019</id><snippet>b.something</snippet></ROW><ROW><id>7997019</id><snippet>b.something</snippet></ROW><ROW><id>7997019</id><snippet>b.</snippet></ROW><ROW><id>7997019</id><snippet>std::partition</snippet></ROW><ROW><id>7997019</id><snippet>[x for x in li if x.startswith('b.')] + [x for x in li if not x.startswith('b.')]
</snippet></ROW><ROW><id>7997019</id><snippet>key</snippet></ROW><ROW><id>7997019</id><snippet>key</snippet></ROW><ROW><id>7997056</id><snippet>request</snippet></ROW><ROW><id>7997056</id><snippet>LocalProxy</snippet></ROW><ROW><id>7997056</id><snippet>request</snippet></ROW><ROW><id>7997056</id><snippet>MultiDict</snippet></ROW><ROW><id>7997056</id><snippet>getlist</snippet></ROW><ROW><id>7997056</id><snippet>page_ids = request.form.getlist("do_delete")
</snippet></ROW><ROW><id>7997453</id><snippet>input()</snippet></ROW><ROW><id>7997453</id><snippet>C:\Python32&gt;python
Python 3.2 (r32:88445, Feb 20 2011, 21:29:02) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print(repr(input()))
test
'test\r'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7997467</id><snippet>DATABASES = {
    'default': {
        'NAME': 'app_data',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': 'postgres_user',
        'PASSWORD': 's3krit'
    },
    'users': {
        'NAME': 'user_data',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'mysql_user',
        'PASSWORD': 'priv4te'
    }
}
</snippet></ROW><ROW><id>7997467</id><snippet>Author.objects.using('other').all()</snippet></ROW><ROW><id>7997789</id><snippet>in</snippet></ROW><ROW><id>7997789</id><snippet>elements = set((element1, element2, ..., elementn))
...
if item in elements:
   do something
</snippet></ROW><ROW><id>7997893</id><snippet>Walk1d</snippet></ROW><ROW><id>7997893</id><snippet>print(Walk1d(10).cumsum())
</snippet></ROW><ROW><id>7998317</id><snippet>INSERT INTO res_partner_address VALUES (1, 1, '2011-11-02 14:50:55.607533', '2011-11-03    12:48:03.231399', 1, 5, '', NULL, '', '', true, 1, '', '', '', NULL, NULL, 67, NULL, 2, 'default', '');
</snippet></ROW><ROW><id>7998423</id><snippet>repr()</snippet></ROW><ROW><id>7998423</id><snippet>print</snippet></ROW><ROW><id>7998423</id><snippet>&gt;&gt;&gt; print '23:45 \xe2\x80\x93 23:59'
23:45 – 23:59
</snippet></ROW><ROW><id>7998819</id><snippet>OrderedSet</snippet></ROW><ROW><id>7998819</id><snippet>class IndexOrderedSet(OrderedSet):
    def index(self, elem):
        if key in self.map:
            return next(i for i, e in enumerate(self) if e == elem)
        else:
            raise KeyError("That element isn't in the set")
</snippet></ROW><ROW><id>7998819</id><snippet>add</snippet></ROW><ROW><id>7998819</id><snippet>index</snippet></ROW><ROW><id>7998819</id><snippet>OrderedDict</snippet></ROW><ROW><id>7998819</id><snippet>collections.Set</snippet></ROW><ROW><id>7998819</id><snippet>frozenset</snippet></ROW><ROW><id>7998819</id><snippet>from itertools import count, izip
from collections import OrderedDict, Set

class IndexOrderedSet(Set):
    """An OrderedFrozenSet-like object
       Allows constant time 'index'ing
       But doesn't allow you to remove elements"""
    def __init__(self, iterable = ()):
        self.num = count()
        self.dict = OrderedDict(izip(iterable, self.num))
    def add(self, elem):
        if elem not in self:
            self.dict[elem] = next(self.num)
    def index(self, elem):
        return self.dict[elem]
    def __contains__(self, elem):
        return elem in self.dict
    def __len__(self):
        return len(self.dict)
    def __iter__(self):
        return iter(self.dict)
    def __repr__(self):
        return 'IndexOrderedSet({})'.format(self.dict.keys())
</snippet></ROW><ROW><id>7998819</id><snippet>collections.MutableSet</snippet></ROW><ROW><id>7999052</id><snippet>list.append()</snippet></ROW><ROW><id>7999052</id><snippet>list.extend()</snippet></ROW><ROW><id>7999052</id><snippet>def score_add(team, exit_scores):
    for t, e in zip(team, exit_scores)
        t.append(e)
    print team
</snippet></ROW><ROW><id>7999052</id><snippet>B</snippet></ROW><ROW><id>7999052</id><snippet>exit_scores</snippet></ROW><ROW><id>7999052</id><snippet>for t, b in zip(T, B):
    t.extend(b)
    t.append(t[2] - t[0])
</snippet></ROW><ROW><id>7999101</id><snippet>unicode</snippet></ROW><ROW><id>7999101</id><snippet>unicode</snippet></ROW><ROW><id>7999101</id><snippet>'ISO-8859-1'</snippet></ROW><ROW><id>7999101</id><snippet>$LANG</snippet></ROW><ROW><id>7999270</id><snippet>QObject</snippet></ROW><ROW><id>7999270</id><snippet>QObject</snippet></ROW><ROW><id>7999270</id><snippet>from PyQt4 import QtGui

class Widget(QtGui.QWidget):
    def __init__(self, parent):
        QtGui.QWidget.__init__(self, parent)
        self.destroyed.connect(self.handleDestroyed)

    def __del__(self):
        print ('__del__:', self)

    def handleDestroyed(self, source):
        print ('destroyed:', source)

class Foo(Widget):
    def __init__(self, parent):
        Widget.__init__(self, parent)

class Bar(Widget):
    def __init__(self, parent):
        Widget.__init__(self, parent)

class Window(Widget):
    def __init__(self, parent=None):
        Widget.__init__(self, parent)
        self.foo = Foo(self)
        self.bar = Bar(None)

if __name__ == "__main__":

    app = QtGui.QApplication([__file__, '-widgetcount'])
    window = Window()
    window.show()
    app.exec_()
</snippet></ROW><ROW><id>7999270</id><snippet>__del__: &lt;__main__.Window object at 0x88f514c&gt;
destroyed: &lt;__main__.Foo object at 0x88f5194&gt;
__del__: &lt;__main__.Bar object at 0x88f51dc&gt;
Widgets left: 0    Max widgets: 4 
</snippet></ROW><ROW><id>7999270</id><snippet>tmp = window; del tmp, window
</snippet></ROW><ROW><id>7999270</id><snippet>__del__: &lt;__main__.Window object at 0x8d3a14c&gt;
__del__: &lt;__main__.Foo object at 0x8d3a194&gt;
__del__: &lt;__main__.Bar object at 0x8d3a1dc&gt;
Widgets left: 0    Max widgets: 4
</snippet></ROW><ROW><id>7999328</id><snippet>row = int(raw_input("Enter the first row number: "   ))
col = int(raw_input("Enter the frist column number: "))

lastRow = row + 5
firstCol = col
lastCol = col + 5

while (row &lt; lastRow):
    while(col &lt; lastCol):
        print "%4d" % (col * row),
        col += 1

    col = firstCol
    row += 1
    print
</snippet></ROW><ROW><id>7999328</id><snippet>col</snippet></ROW><ROW><id>7999328</id><snippet>lastCol</snippet></ROW><ROW><id>7999328</id><snippet>print</snippet></ROW><ROW><id>7999328</id><snippet>row</snippet></ROW><ROW><id>7999328</id><snippet>while</snippet></ROW><ROW><id>7999384</id><snippet>__import__</snippet></ROW><ROW><id>7999384</id><snippet>import</snippet></ROW><ROW><id>7999384</id><snippet>__import__</snippet></ROW><ROW><id>7999384</id><snippet>import spam</snippet></ROW><ROW><id>7999384</id><snippet>spam = __import__('spam', globals(), locals(), [], 0)
</snippet></ROW><ROW><id>7999384</id><snippet>emb</snippet></ROW><ROW><id>7999384</id><snippet>emb</snippet></ROW><ROW><id>7999384</id><snippet>__main__</snippet></ROW><ROW><id>7999384</id><snippet>PyObject* emb_module = PyImport_ImportModule("emb");
PyObject* main_module = PyImport_AddModule("__main__");
PyObject_SetAttrString(main_module, "emb", emb_module);
Py_XDECREF(main_module);
Py_XDECREF(emb_module);
</snippet></ROW><ROW><id>7999561</id><snippet>travel = travel(location)
</snippet></ROW><ROW><id>7999561</id><snippet>travel</snippet></ROW><ROW><id>7999561</id><snippet>travel</snippet></ROW><ROW><id>7999561</id><snippet>travel</snippet></ROW><ROW><id>7999745</id><snippet>&lt;script type="text/javascript"&gt;
$("#useruname").change = function() {
    var selecteduname = this.value;
}


function updateAdduser()
{
    var fields = null;
    $.ajax(url: "ajaxuseradd.psp?=",
           dataType = 'json',
        success: function(data){
          fields = data;
          Object.keys(fields).forEach(function (name) {
              var input = $(name);
              input.value = fields[name];
          });
      }
    });  
}    
&lt;/script&gt;

&lt;form action="adduser.psp" method="get"&gt;
&lt;fieldset&gt;
&lt;label for="uname"&gt;Username:&lt;/label&gt;
&lt;select name="uname" id="useruname" onChange="updateAdduser();"&gt;
&lt;%
import MySQLdb

db =
c = db.cursor()

c.execute("""SELECT user from employees;""")

tup = c.fetchall()

tupstr = str(tup)

tupstr = tupstr.replace("(", "").replace("'", "").replace(")", "").replace(",,", ",").replace("'", "").replace("' ", "'").replace(", ", ",")

tupstr = tupstr.rstrip(",")

numlist = tupstr.split(",")

optionlist =  ['&lt;option value="%s"&gt;%s&lt;/option&gt;' % (x, x) for x in numlist]

options = "\n".join(optionlist)

%&gt;


 &lt;%= options %&gt;

 &lt;/select&gt;

 &lt;/fieldset&gt;
 &lt;fieldset&gt;
    &lt;label for="fname"&gt;First Name:&lt;/label&gt;
&lt;input type="text" name="fname" /&gt;
&lt;/fieldset&gt;
 &lt;fieldset&gt;
    &lt;label for="lname"&gt;Last Name:&lt;/label&gt;
&lt;input type="text" name="lname" /&gt;
&lt;/fieldset&gt;
&lt;fieldset&gt;
    &lt;label for="email"&gt;Email:&lt;/label&gt;
    &lt;input type="text" name="email"&gt;
&lt;/fieldset&gt;
</snippet></ROW><ROW><id>7999872</id><snippet>(</snippet></ROW><ROW><id>7999872</id><snippet>&gt;&gt;&gt; re.findall(r'[a-zA-Z]+(?![a-zA-Z(])', "movav(x/2, 2)*movsum(y, 3)*z")
['x', 'y', 'z']
</snippet></ROW><ROW><id>7999977</id><snippet>&gt;&gt;&gt; datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
'2011-11-03 18:21:26'
</snippet></ROW><ROW><id>8000058</id><snippet>Persistable</snippet></ROW><ROW><id>8000058</id><snippet>Persistable</snippet></ROW><ROW><id>8000058</id><snippet>Persistable</snippet></ROW><ROW><id>8000058</id><snippet>yaml.representer.BaseRepresenter</snippet></ROW><ROW><id>8000058</id><snippet>import yaml
from functools import partial

class Persistable(object):
    # simulate a unique id
    _unique = 0

    def __init__(self, *args, **kw):
        Persistable._unique += 1
        self.persistent_id = ("%s.%d" %
                              (self.__class__.__name__, Persistable._unique))

def persistable_representer(dumper, data):
    id = data.persistent_id
    print "Writing to file: %s" % id
    outfile = open(id, 'w')
    outfile.write(yaml.dump(data))
    outfile.close()
    return dumper.represent_scalar(u'!xref', u'%s' % id)

class PersistingDumper(yaml.Dumper):
    pass

PersistingDumper.add_representer(Persistable, persistable_representer)
my_yaml_dump = partial(yaml.dump, Dumper=PersistingDumper)

def persistable_constructor(loader, node):
    xref = loader.construct_scalar(node)
    print "Reading from file: %s" % id
    infile = open(xref, 'r')
    value = yaml.load(infile.read())
    infile.close()
    return value

yaml.add_constructor(u'!xref', persistable_constructor)


# example use, also serves as a test
class Foo(Persistable):
    def __init__(self):
        self.one = 1
        Persistable.__init__(self)

class Bar(Persistable):
    def __init__(self, foo):
        self.foo = foo
        Persistable.__init__(self)

foo = Foo()
bar = Bar(foo)
print "=== foo ==="
dumped_foo = my_yaml_dump(foo)
print dumped_foo
print yaml.load(dumped_foo)
print yaml.load(dumped_foo).one

print "=== bar ==="
dumped_bar = my_yaml_dump(bar)
print dumped_bar
print yaml.load(dumped_bar)
print yaml.load(dumped_bar).foo
print yaml.load(dumped_bar).foo.one

baz = Bar(Persistable())
print "=== baz ==="
dumped_baz = my_yaml_dump(baz)
print dumped_baz
print yaml.load(dumped_baz)
</snippet></ROW><ROW><id>8000058</id><snippet>my_yaml_dump</snippet></ROW><ROW><id>8000058</id><snippet>yaml.dump</snippet></ROW><ROW><id>8000058</id><snippet>Persistable</snippet></ROW><ROW><id>8000058</id><snippet>persistable_representer</snippet></ROW><ROW><id>8000058</id><snippet>persistable_constructor</snippet></ROW><ROW><id>8000058</id><snippet>yaml.load</snippet></ROW><ROW><id>8000190</id><snippet>dateutil.rrule.rrule</snippet></ROW><ROW><id>8000558</id><snippet>incoming</snippet></ROW><ROW><id>8000558</id><snippet>id</snippet></ROW><ROW><id>8000558</id><snippet>HG_NODE</snippet></ROW><ROW><id>8000558</id><snippet>os.environ['HG_NODE']</snippet></ROW><ROW><id>8001147</id><snippet>execute</snippet></ROW><ROW><id>8001147</id><snippet>fetchall</snippet></ROW><ROW><id>8001147</id><snippet>fetchone</snippet></ROW><ROW><id>8001147</id><snippet>cursor.execute("""SELECT fname from employees WHERE user = %s""", (useruname,))
row = cursor.fetchone()
print row[0]
</snippet></ROW><ROW><id>8001278</id><snippet>Decimal(f)</snippet></ROW><ROW><id>8001373</id><snippet>fields = """{"fname" : %s, "lname" : %s, "email" : %s, "deptid" : deptid, "active" : active, "sentient" : sentient}""" % (fname, lname, email)</snippet></ROW><ROW><id>8001459</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.Bind(wx.EVT_PAINT, self.OnPaint)

    #----------------------------------------------------------------------
    def OnPaint(self, event):
        """"""
        pdc = wx.PaintDC(self)
        try:
            dc = wx.GCDC(pdc)
        except:
            dc = pdc

        w, h = self.GetSizeTuple()
        w = w - 10
        h = h - 10

        dc.Clear()
        dc.DrawRectangle(x=5, y=5, width=w, height=h)


#----------------------------------------------------------------------
def OnSize(event):
    event.EventObject.Refresh()
    event.Skip()


if __name__ == "__main__":
    app = wx.App(False)
    frame = wx.Frame(None, title="Test")
    panel = MyPanel(frame)
    frame.Bind(wx.EVT_SIZE, OnSize)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8001459</id><snippet>frame = wx.Frame(None, title="Test", style=wx.DEFAULT_FRAME_STYLE|wx.FULL_REPAINT_ON_RESIZE)
</snippet></ROW><ROW><id>8001489</id><snippet>filter(lambda obj: obj.value == 1, [a, b])
</snippet></ROW><ROW><id>8001489</id><snippet>filter(fn, list)</snippet></ROW><ROW><id>8001489</id><snippet>list</snippet></ROW><ROW><id>8001489</id><snippet>fn</snippet></ROW><ROW><id>8001489</id><snippet>fn</snippet></ROW><ROW><id>8001489</id><snippet>def find_instance(fn, objs):
    all_matches = filter(fn, objs)
    if len(all_matches) == 0:
        return False # no matches
    else:
        return all_matches[0]
</snippet></ROW><ROW><id>8001489</id><snippet>def find_instance(fn, objs):
    all_matches = filter(fn, objs)
    return len(all_matches) &gt; 0 and all_matches[0] # uses the fact that 'and' returns its second argument if its first argument evaluates to True. 
</snippet></ROW><ROW><id>8001489</id><snippet>instance = find_instance(lambda x: x.value == 1, [a, b])
</snippet></ROW><ROW><id>8001489</id><snippet>instance</snippet></ROW><ROW><id>8001489</id><snippet>a</snippet></ROW><ROW><id>8001497</id><snippet>def mimeTypes(self):
    return QtCore.QStringList([
        'text/uri-list',
        'application/x-qabstractitemmodeldatalist',
        ])
</snippet></ROW><ROW><id>8001648</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = 'John - Smith : 0123\nchildren: \n  Sam\n  Kim'
&gt;&gt;&gt; match = re.match(r'(\w+) - (\w+) : (\d+).*?children:(.*)', data, re.S)
&gt;&gt;&gt; match.groups()
('John', 'Smith', '0123', ' \n  Sam\n  Kim')
</snippet></ROW><ROW><id>8001648</id><snippet>&gt;&gt;&gt; firstName, lastName, number = match.groups()[:3]
&gt;&gt;&gt; children = [c.strip() for c in match.group(4).strip().split('\n')]
</snippet></ROW><ROW><id>8001648</id><snippet>&gt;&gt;&gt; firstName
'John'
&gt;&gt;&gt; lastName
'Smith'
&gt;&gt;&gt; number
'0123'
&gt;&gt;&gt; children
['Sam', 'Kim']
</snippet></ROW><ROW><id>8001709</id><snippet>save()</snippet></ROW><ROW><id>8001783</id><snippet>from xml.etree import ElementTree as et

class Kml(object):
    def __init__(self):
        self.root = et.Element('kml')
        self.doc = et.SubElement(self.root,'Document')

    def add_placemark(self,name,desc,lat,long,alt):
        pm = et.SubElement(self.doc,'Placemark')
        et.SubElement(pm,'name').text = name
        et.SubElement(pm,'description').text = desc
        pt = et.SubElement(pm,'Point')
        et.SubElement(pt,'coordinates').text = '{},{},{}'.format(lat,long,alt)

    def write(self,filename):
        tree = et.ElementTree(self.root)
        tree.write(filename)

kml = Kml()
kml.add_placemark('Location1','Description1',-120,45,0)
kml.add_placemark('Location2','Description2',60,-45,0)
kml.write('out.kml')
</snippet></ROW><ROW><id>8001893</id><snippet>@task(alias = 'database-reset')
def database_reset():
    ...
</snippet></ROW><ROW><id>8001965</id><snippet>int
ParseArguments(unsigned long arr[],Py_ssize_t size, PyObject *args) {
    /* Get arbitrary number of positive numbers from Py_Tuple */
    Py_ssize_t i;
    PyObject *temp_p, *temp_p2;


    for (i=0;i&lt;size;i++) {
        temp_p = PyTuple_GetItem(args,i);
        if(temp_p == NULL) {return NULL;}

        /* Check if temp_p is numeric */
        if (PyNumber_Check(temp_p) != 1) {
            PyErr_SetString(PyExc_TypeError,"Non-numeric argument.");
            return NULL;
        }

        /* Convert number to python long and than C unsigned long */
        temp_p2 = PyNumber_Long(temp_p);
        arr[i] = PyLong_AsUnsignedLong(temp_p2);
        Py_DECREF(temp_p2);
        if (arr[i] == 0) {
            PyErr_SetString(PyExc_ValueError,"Zero doesn't allowed as argument.");
            return NULL;
        }
        if (PyErr_Occurred()) {return NULL; }
    }

    return 1;
}
</snippet></ROW><ROW><id>8001965</id><snippet>static PyObject *
function_name_was_here(PyObject *self, PyObject *args)
{
    Py_ssize_t TupleSize = PyTuple_Size(args);
    Py_ssize_t i;
    struct bigcouples *temp = malloc(sizeof(struct bigcouples));
    unsigned long current;

    if(!TupleSize) {
        if(!PyErr_Occurred()) 
            PyErr_SetString(PyExc_TypeError,"You must supply at least one argument.");
        free(temp);
        return NULL;
    }

    unsigned long *nums = malloc(TupleSize * sizeof(unsigned long));

    if(!ParseArguments(nums, TupleSize, args)){
        /* Make a cleanup and than return null*/
        return null;
    }
</snippet></ROW><ROW><id>8002234</id><snippet>%</snippet></ROW><ROW><id>8002234</id><snippet>n % k == 0
</snippet></ROW><ROW><id>8002234</id><snippet>n</snippet></ROW><ROW><id>8002234</id><snippet>k</snippet></ROW><ROW><id>8002458</id><snippet>print sorted(data,key=lambda x: x[4])
</snippet></ROW><ROW><id>8002476</id><snippet>delta_x = delta_y = 3
while True:
      objects = canv.find_overlapping(canv.coords(ball)[0], canv.coords(ball)[1], canv.coords(ball)[2], canv.coords(ball)[3])
      for obj in objects:
        if obj == 1:
            delta_y = -delta_y
        if obj == 2:
            delta_x = -delta_x
        if obj == 3:
            delta_x = -delta_x
        if obj == 4:
            delta_y = -delta_y

      new_x, new_y = delta_x, delta_y
      canv.move(ball, new_x, new_y)
      canv.update()
      time.sleep(0.025)

      root.bind('&lt;Right&gt;', move_right)
      root.bind('&lt;Left&gt;', move_left)
</snippet></ROW><ROW><id>8002498</id><snippet>{{&gt;header}}
    Hello {{name}}
{{&gt;footer}}
</snippet></ROW><ROW><id>8002498</id><snippet>{{#extendBase}}      
    Hello {{name}}
{{/extendBase}} 
</snippet></ROW><ROW><id>8002498</id><snippet>{
   "name": "Walden",
   "extendBase": function() {
       return function(text) {
           return "&lt;html&gt;&lt;head&gt;&lt;/head&gt;" + render(text) + "&lt;/body&gt;&lt;/html&gt;"
       }
   }
}
</snippet></ROW><ROW><id>8002498</id><snippet>{{&gt;header}}
    {{{body}}}
{{&gt;footer}}
</snippet></ROW><ROW><id>8002498</id><snippet>body</snippet></ROW><ROW><id>8002632</id><snippet>|name,item_det|
</snippet></ROW><ROW><id>8002632</id><snippet>reader = csv.reader(open(path, "rb"), delimiter=',', quoting=csv.QUOTE_NONE, escapechar="\\")
</snippet></ROW><ROW><id>8002632</id><snippet>name\,item_det
</snippet></ROW><ROW><id>8002777</id><snippet>h5py</snippet></ROW><ROW><id>8002777</id><snippet>h5py</snippet></ROW><ROW><id>8003342</id><snippet>next(file)
next(file)
</snippet></ROW><ROW><id>8003342</id><snippet>file</snippet></ROW><ROW><id>8003344</id><snippet>import numpy as np

P = np.array([1, 2, 3, 4, 5]) 
T = np.array([0, 0, 1, 1, 1])

U,inverse = np.unique(T,return_inverse=True)
Q = np.bincount(inverse,weights=P)
print (Q, U)
# (array([  3.,  12.]), array([0, 1]))
</snippet></ROW><ROW><id>8003344</id><snippet>import numpy as np

N = 1000
P = np.repeat(np.array([1, 2, 3, 4, 5]),N)
T = np.repeat(np.array([0, 0, 1, 1, 1]),N)

def using_bincount():
    U,inverse = np.unique(T,return_inverse=True)
    Q = np.bincount(inverse,weights=P)
    return Q,U
    # (array([  3.,  12.]), array([0, 1]))

def using_lc():
    U = list(set(T))
    Q = [sum([p for (p,t) in zip(P,T) if t == u]) for u in U]
    return Q,U

def using_slice():
    U = np.unique(T)
    Q = np.array([P[T == u].sum() for u in U])
    return Q,U
</snippet></ROW><ROW><id>8003344</id><snippet>% python -mtimeit -s'import test' 'test.using_lc()'
100000 loops, best of 3: 18.4 usec per loop
% python -mtimeit -s'import test' 'test.using_slice()'
10000 loops, best of 3: 66.8 usec per loop
% python -mtimeit -s'import test' 'test.using_bincount()'
10000 loops, best of 3: 52.8 usec per loop
</snippet></ROW><ROW><id>8003344</id><snippet>% python -mtimeit -s'import test' 'test.using_lc()'
100 loops, best of 3: 9.93 msec per loop
% python -mtimeit -s'import test' 'test.using_slice()'
1000 loops, best of 3: 390 usec per loop
% python -mtimeit -s'import test' 'test.using_bincount()'
1000 loops, best of 3: 846 usec per loop
</snippet></ROW><ROW><id>8003486</id><snippet>enumerate()</snippet></ROW><ROW><id>8003486</id><snippet>for i, (k,v) in enumerate(container):
    if k == 24:
        container[i] = (k, v+" good")
</snippet></ROW><ROW><id>8003510</id><snippet>d = {}
lst = ['i', 'am', 'a', 'brown', 'cow']
for key in lst:
  d[key] = 'term'
</snippet></ROW><ROW><id>8003510</id><snippet>In:  print d['am']
Out: 'term'
</snippet></ROW><ROW><id>8003510</id><snippet>zip()</snippet></ROW><ROW><id>8003510</id><snippet>zip()</snippet></ROW><ROW><id>8003510</id><snippet>lst = ['i', 'am', 'a', 'brown', 'cow']
res = [[item, ['term']] for item in lst]
</snippet></ROW><ROW><id>8003510</id><snippet>lst = ['i', 'am', 'a', 'brown', 'cow']
res = [(item, 'term') for item in lst]
d = dict(res)
</snippet></ROW><ROW><id>8003510</id><snippet>In : print d['am']
Out: 'term'
</snippet></ROW><ROW><id>8003510</id><snippet>lst = ['i', 'am', 'a', 'brown', 'cow']
terms = ['term1', 'term2', 'term3', 'term4', 'term5']
</snippet></ROW><ROW><id>8003510</id><snippet>zip()</snippet></ROW><ROW><id>8003510</id><snippet>lst</snippet></ROW><ROW><id>8003510</id><snippet>terms</snippet></ROW><ROW><id>8003510</id><snippet>res</snippet></ROW><ROW><id>8003510</id><snippet>In : zip(lst, terms)
Out: [('i', 'term1'), ('am', 'term2'), ('a', 'term3'), ('brown', 'term4'), ('cow', 'term5')]
</snippet></ROW><ROW><id>8003510</id><snippet>dict</snippet></ROW><ROW><id>8003510</id><snippet>what_i_need = dict(zip(lst, terms))
</snippet></ROW><ROW><id>8003676</id><snippet>x</snippet></ROW><ROW><id>8003676</id><snippet>x % 1 == 0</snippet></ROW><ROW><id>8003676</id><snippet>False</snippet></ROW><ROW><id>8003676</id><snippet>sqrt(x)</snippet></ROW><ROW><id>8003676</id><snippet>q &gt; sqrt(x)</snippet></ROW><ROW><id>8003676</id><snippet>x</snippet></ROW><ROW><id>8003676</id><snippet>p = x / q</snippet></ROW><ROW><id>8003676</id><snippet>x</snippet></ROW><ROW><id>8003676</id><snippet>p &lt; sqrt(x)</snippet></ROW><ROW><id>8003710</id><snippet>            while not done:
                categoryRow = cursor.fetchone();
                print categoryRow;
                if not categoryRow:
                    done = True;
                    continue;
            categoryResults.append(categoryRow['cl_to']);
</snippet></ROW><ROW><id>8003710</id><snippet>continue</snippet></ROW><ROW><id>8003710</id><snippet>while</snippet></ROW><ROW><id>8003710</id><snippet>categoryRow</snippet></ROW><ROW><id>8003710</id><snippet> categoryRow['cl_to'] 
</snippet></ROW><ROW><id>8003710</id><snippet>            while not done:
                categoryRow = cursor.fetchone();
                print categoryRow;
                if not categoryRow:
                    done = True;
                    continue;
                categoryResults.append(categoryRow['cl_to']);
</snippet></ROW><ROW><id>8003721</id><snippet>bytearray</snippet></ROW><ROW><id>8003721</id><snippet>ndarray</snippet></ROW><ROW><id>8003766</id><snippet>distance = sqrt((mouse_position.x - the_ball.x)**2 + (mouse_position.y - the_ball.y)**2)
</snippet></ROW><ROW><id>8003766</id><snippet>return distance &lt;= circle_radius
</snippet></ROW><ROW><id>8003766</id><snippet>from math import sqrt</snippet></ROW><ROW><id>8003766</id><snippet>x_good = mouse_position.x in range(the_ball.x - 10, the_ball.x + 10)
y_good = mouse_position.y in range(the_ball.y - 10, the_ball.y + 10)
return x_good and y_good
</snippet></ROW><ROW><id>8003871</id><snippet>rowdata</snippet></ROW><ROW><id>8003871</id><snippet>rowdata = []</snippet></ROW><ROW><id>8003871</id><snippet>print i</snippet></ROW><ROW><id>8003871</id><snippet>def create_data_lists():

    for symbol in symbols:
        with open(symbol+'.csv', 'r') as f:
        print symbol
        rowdata = []
        reader = csv.reader(f)
        reader.next()
        for row in reader:
            rowdata.append(row)
    data_by_symbol.append(rowdata)
</snippet></ROW><ROW><id>8003871</id><snippet>i</snippet></ROW><ROW><id>8004080</id><snippet>def __init__(self, *args, **kwargs):
    # ...
    self.first_link_after_comment = False
</snippet></ROW><ROW><id>8004080</id><snippet>def handle_comment(self, data):
    if data.strip() == '/topOfPage':
        self.first_link_after_comment = True
</snippet></ROW><ROW><id>8004080</id><snippet>def handle_starttag(self, tag, attrs):
    if not self.first_link_after_comment:
        return
    # ...
</snippet></ROW><ROW><id>8004080</id><snippet>def handle_endtag(self, tag):
    if tag == 'a' and self.in_linktag: # ignore '&lt;a name=""...'
        self.in_linktag = False
        self.first_link_after_comment = False
</snippet></ROW><ROW><id>8004080</id><snippet>def handle_data(self, data):
    if self.in_linktag and data.strip():
        self.url_cache[-1].append(data)
</snippet></ROW><ROW><id>8004080</id><snippet>$ your_script.py
[['http://test']]
</snippet></ROW><ROW><id>8004169</id><snippet>MySvg</snippet></ROW><ROW><id>8004169</id><snippet>QGraphicsSvgItem</snippet></ROW><ROW><id>8004169</id><snippet>MySvg.image</snippet></ROW><ROW><id>8004169</id><snippet>MySvg</snippet></ROW><ROW><id>8004169</id><snippet>MySvg</snippet></ROW><ROW><id>8004169</id><snippet>#!/usr/bin/python

import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4.QtSvg import *

class Main(QWidget):

    def __init__(self):
        super(Main, self).__init__()

        hbox = QHBoxLayout()

        self.setLayout(hbox)
        self.view = MyView(self)
        self.scene = QGraphicsScene()
        self.view.setScene(self.scene)

        hbox.addWidget(self.view)


class MyView(QGraphicsView):

    def __init__(self, parent):
        super(MyView, self).__init__(parent)
        self.parent = parent

    def mousePressEvent(self, event):
        super(MyView, self).mousePressEvent(event)
        test = MySvg()
        self.parent.scene.addItem(test)


class MySvg(QGraphicsSvgItem):

    def __init__(self):
        super(MySvg, self).__init__('ubuntu.svg')

        self.setFlags(QGraphicsItem.ItemIsSelectable|
                      QGraphicsItem.ItemIsMovable)

        self.setAcceptsHoverEvents(True)

    def hoverEnterEvent(self, event):
        print 'Enter'

    def hoverLeaveEvent(self, event):
        print 'Leave'

    def hoverMoveEvent(self, event):
        print 'Moving'


def runMain():

    app = QApplication(sys.argv)
    ex = Main()
    ex.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    runMain()
</snippet></ROW><ROW><id>8004195</id><snippet>class Person(object):
    def __init__(self):
        self.first_name = 'Will'
        self.second_name = 'Awesome'

my_guy = Person()
my_guy.gender = "Male"
print(my_guy.gender)
</snippet></ROW><ROW><id>8004195</id><snippet>Male</snippet></ROW><ROW><id>8004837</id><snippet>%feature("autodoc", "1")
</snippet></ROW><ROW><id>8004889</id><snippet>struct</snippet></ROW><ROW><id>8004889</id><snippet>bin</snippet></ROW><ROW><id>8004889</id><snippet>con = pyodbc.connect("...")
con.execute("CREATE TABLE bin_test ( bin_col varbinary(max) )")
con.execute("INSERT INTO bin_test VALUES (?)",
    (int("000001110100111000110101100010", 2),))
result = con.execute("SELECT * FROM bin_test").fetchone()
bin(struct.unpack("&gt;I", result[0])[0])
</snippet></ROW><ROW><id>8004889</id><snippet>'0b1110100111000110101100010'
</snippet></ROW><ROW><id>8005323</id><snippet>eHouseAccess</snippet></ROW><ROW><id>8005323</id><snippet>NameError: global name 'items' is not defined</snippet></ROW><ROW><id>8005323</id><snippet>global eHouse, items</snippet></ROW><ROW><id>8005323</id><snippet>items[curItem][0]</snippet></ROW><ROW><id>8005323</id><snippet>use</snippet></ROW><ROW><id>8005323</id><snippet>return</snippet></ROW><ROW><id>8005323</id><snippet>else</snippet></ROW><ROW><id>8005323</id><snippet>if location == items[curItem][0]:
</snippet></ROW><ROW><id>8005323</id><snippet>0</snippet></ROW><ROW><id>8005323</id><snippet>if location == items[curItem].location:
</snippet></ROW><ROW><id>8005323</id><snippet>if location in items[curItem].valid_locations:
</snippet></ROW><ROW><id>8005449</id><snippet>email</snippet></ROW><ROW><id>8005449</id><snippet>get_payload()</snippet></ROW><ROW><id>8005449</id><snippet>walk()</snippet></ROW><ROW><id>8005449</id><snippet>get_payload()</snippet></ROW><ROW><id>8005549</id><snippet>chorus.processors.topics</snippet></ROW><ROW><id>8005549</id><snippet>processors.topics.tasks</snippet></ROW><ROW><id>8005667</id><snippet>repr()</snippet></ROW><ROW><id>8005667</id><snippet>f = open('output.txt', 'a')
f.write('\n'.join(fieldNames1))
f.close()
</snippet></ROW><ROW><id>8005667</id><snippet>write()</snippet></ROW><ROW><id>8005667</id><snippet>join()</snippet></ROW><ROW><id>8005667</id><snippet>\n</snippet></ROW><ROW><id>8005667</id><snippet>file</snippet></ROW><ROW><id>8005667</id><snippet>file</snippet></ROW><ROW><id>8005820</id><snippet>%</snippet></ROW><ROW><id>8005820</id><snippet>def ept(s):
    return "%s is good" % s

ept(self.request.get('content'))
</snippet></ROW><ROW><id>8005820</id><snippet>%</snippet></ROW><ROW><id>8005937</id><snippet>adapt</snippet></ROW><ROW><id>8005937</id><snippet>copy_from</snippet></ROW><ROW><id>8005937</id><snippet>copy_from</snippet></ROW><ROW><id>8005937</id><snippet>copy_adapt</snippet></ROW><ROW><id>8005937</id><snippet>\t</snippet></ROW><ROW><id>8005937</id><snippet>\r</snippet></ROW><ROW><id>8005937</id><snippet>\n</snippet></ROW><ROW><id>8005937</id><snippet>SELECT now()</snippet></ROW><ROW><id>8006165</id><snippet>.jar</snippet></ROW><ROW><id>8006165</id><snippet>.zip</snippet></ROW><ROW><id>8006165</id><snippet>zipfile</snippet></ROW><ROW><id>8006165</id><snippet>def show_jar_classes(jar_file):
    """prints out .class files from jar_file"""
    zf = zipfile.ZipFile(jar_file, 'r')
    try:
        lst = zf.infolist()
        for zi in lst:
            fn = zi.filename
            if fn.endswith('.class'):
                print(fn)
    finally:
        zf.close()
</snippet></ROW><ROW><id>8006165</id><snippet>java</snippet></ROW><ROW><id>8006165</id><snippet>-Xmx</snippet></ROW><ROW><id>8006180</id><snippet>class_&lt;Radish&gt;("Radish");
</snippet></ROW><ROW><id>8006180</id><snippet>static void* radishConvert(PyObject* obj)
{
    char thisStr[] = "this";
    //first we need to get the this attribute from the Python Object
    if (!PyObject_HasAttrString(obj, thisStr))
            return NULL;

    PyObject* thisAttr = PyObject_GetAttrString(obj, thisStr);
    if (thisAttr == NULL)
            return NULL;
    //This Python Object is a SWIG Wrapper and contains our pointer
    void* pointer = ((PySwigObject*)thisAttr)-&gt;ptr;
    Py_DECREF(thisAttr);
    return pointer;
}
</snippet></ROW><ROW><id>8006180</id><snippet>struct PySwigObject 
{
    PyObject_HEAD 
    void * ptr;
    const char * desc;
};
</snippet></ROW><ROW><id>8006180</id><snippet>boost::python::converter::registry::insert(&amp;radishConvert, type_id&lt;Radish&gt;());
</snippet></ROW><ROW><id>8006576</id><snippet>test = re.compile(('(?P&lt;full_path&gt;.+):\d+:\s+warning:\s+Member'
                   '\s+(?P&lt;member_name&gt;.+)\s+\((?P&lt;member_type&gt;%s)\) '
                   'of (class|group|namespace)\s+(?P&lt;class_name&gt;.+)'
                   '\s+is not documented') % (self.__MEMBER_TYPES), re.IGNORECASE)
</snippet></ROW><ROW><id>8006576</id><snippet>()</snippet></ROW><ROW><id>8006576</id><snippet>'</snippet></ROW><ROW><id>8006576</id><snippet>"</snippet></ROW><ROW><id>8007447</id><snippet>.jar</snippet></ROW><ROW><id>8007447</id><snippet>C:\jre7\bin\javaw.exe -jar "%1" %*
</snippet></ROW><ROW><id>8007447</id><snippet>.jar</snippet></ROW><ROW><id>8007447</id><snippet>.jar</snippet></ROW><ROW><id>8007737</id><snippet>QueryDict</snippet></ROW><ROW><id>8007737</id><snippet>import json
...
parsed_json = json.load(request.POST) # Or GET, depends on what you are using
</snippet></ROW><ROW><id>8007802</id><snippet>stdout</snippet></ROW><ROW><id>8007802</id><snippet>mod_wsgi</snippet></ROW><ROW><id>8007802</id><snippet>stderr</snippet></ROW><ROW><id>8007802</id><snippet>import logging, sys
logging.basicConfig(stream=sys.stderr)
</snippet></ROW><ROW><id>8007958</id><snippet>rope-completions</snippet></ROW><ROW><id>8008332</id><snippet>Blogs</snippet></ROW><ROW><id>8008332</id><snippet>apps1.models</snippet></ROW><ROW><id>8008332</id><snippet>Post</snippet></ROW><ROW><id>8008332</id><snippet>from apps2.models import Blogs
...
class Post(models.Model):
    ...
    my_blog = models.ForeignKey(Blogs)
</snippet></ROW><ROW><id>8008332</id><snippet>class Post(models.Model):
    ...
    my_blog = models.ForeignKey("apps2.Blogs")
</snippet></ROW><ROW><id>8008641</id><snippet>(r'^ajaxrequest$', 'app.views.iEventAjax')
</snippet></ROW><ROW><id>8008641</id><snippet>$(document).ready(function() {
    $.post("/ajaxrequest", {
        lat : searchResult._point.__lat,
        lng : searchResult._point.__lng,
        text : searchResult.text
    },  function(data) {
           alert(data);
        });
    });
</snippet></ROW><ROW><id>8008641</id><snippet>def iEventAjax(request):
    return HttpResponse("ok")
</snippet></ROW><ROW><id>8009086</id><snippet>appsrc</snippet></ROW><ROW><id>8009086</id><snippet>appsrc</snippet></ROW><ROW><id>8009120</id><snippet>with tarfile.open("sample.tar") as tar:
    subdir_and_files = [
        tarinfo for tarinfo in tar.getmembers()
        if tarinfo.name.startswith("subfolder/")
        ]
    tar.extractall(members=subdir_and_files)
</snippet></ROW><ROW><id>8009120</id><snippet>"subfolder"</snippet></ROW><ROW><id>8009256</id><snippet>def quit(self):
    self.root.destroy()
</snippet></ROW><ROW><id>8009256</id><snippet>destroy</snippet></ROW><ROW><id>8009256</id><snippet>command=self.root.destroy</snippet></ROW><ROW><id>8009256</id><snippet>Tkinter.Button</snippet></ROW><ROW><id>8009256</id><snippet>Tkinter.Button</snippet></ROW><ROW><id>8009256</id><snippet>quit</snippet></ROW><ROW><id>8009256</id><snippet>self.root.destroy()</snippet></ROW><ROW><id>8010073</id><snippet>([...]+)*</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>"A*BCD"</snippet></ROW><ROW><id>8010073</id><snippet>(\w+)</snippet></ROW><ROW><id>8010073</id><snippet>A</snippet></ROW><ROW><id>8010073</id><snippet>\*</snippet></ROW><ROW><id>8010073</id><snippet>*</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>BCD</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>BC</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>B</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>CD</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>B</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>C</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>BC</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>D</snippet></ROW><ROW><id>8010073</id><snippet>[\w\s]+</snippet></ROW><ROW><id>8010073</id><snippet>B</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>C</snippet></ROW><ROW><id>8010073</id><snippet>(...)*</snippet></ROW><ROW><id>8010073</id><snippet>/</snippet></ROW><ROW><id>8010073</id><snippet>B</snippet></ROW><ROW><id>8010073</id><snippet>*</snippet></ROW><ROW><id>8010073</id><snippet>pattern = r"(\w+)\*([\w\s]+)$"
</snippet></ROW><ROW><id>8010133</id><snippet>with open(...) as f:
    for line in f:
        &lt;do something with line&gt;
</snippet></ROW><ROW><id>8010133</id><snippet>with</snippet></ROW><ROW><id>8010133</id><snippet>for line in f</snippet></ROW><ROW><id>8010133</id><snippet>f</snippet></ROW><ROW><id>8010360</id><snippet>points</snippet></ROW><ROW><id>8010360</id><snippet>a</snippet></ROW><ROW><id>8010360</id><snippet>import numpy as np
points = np.array([[1,2],[4,0],[3,0],[2,4]])
a = np.array([[1,2], [3,0]])


np.array([np.argwhere((points==a[i]).all(axis=1))[0][0] for i in xrange(a.shape[0])])
# returns array([0, 2])
</snippet></ROW><ROW><id>8010360</id><snippet>a</snippet></ROW><ROW><id>8010360</id><snippet>points</snippet></ROW><ROW><id>8010491</id><snippet>from itertools import chain, combinations

def weight(A):
    return sum(weights[x] for x in A)

# Copied from example at http://docs.python.org/library/itertools.html
def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in xrange(len(s) + 1))

[x for x in powerset({'A', 'B', 'C', 'D', 'E'}) if weight(x) == W]
</snippet></ROW><ROW><id>8010491</id><snippet>[('A', 'D'), ('C', 'B'), ('C', 'E'), ('A', 'B', 'E'), ('B', 'E', 'D')]
</snippet></ROW><ROW><id>8010491</id><snippet>tuple(sorted(x))</snippet></ROW><ROW><id>8010491</id><snippet>list</snippet></ROW><ROW><id>8010491</id><snippet>powerset</snippet></ROW><ROW><id>8010491</id><snippet>sorted</snippet></ROW><ROW><id>8010542</id><snippet>__del__</snippet></ROW><ROW><id>8010542</id><snippet>import atexit

def cleanup_directories():
    directories = ["C:\\projects\\project_alpha\\tmp",]
    for path in directories:
        if os.path.exists(path) and os.path.isdir(path):
            shutil.rmtree(path)

atexit.register(cleanup_directories)
</snippet></ROW><ROW><id>8010542</id><snippet>import gc; gc.collect()</snippet></ROW><ROW><id>8010599</id><snippet>highgui</snippet></ROW><ROW><id>8010983</id><snippet>random.seed(1)
uuid += random.choice(hexdigits)
</snippet></ROW><ROW><id>8010983</id><snippet>rand = random.WichmannHill(1)
uuid += rand.choice(hexdigits)
</snippet></ROW><ROW><id>8011080</id><snippet>x = 123.0
dist = int(math.log10(abs(x)))
</snippet></ROW><ROW><id>8011080</id><snippet>t</snippet></ROW><ROW><id>8011080</id><snippet>int()</snippet></ROW><ROW><id>8011080</id><snippet>&gt;&gt;&gt; [(int(math.log10(abs(x))), y) for x, y in t]
[(2, 2), (1, 1), (0, 0), (0, 0), (-1, -1), (-4, -4)]
</snippet></ROW><ROW><id>8011314</id><snippet>&gt;&gt;&gt; s = "string"
&gt;&gt;&gt; map(ord, s)
[115, 116, 114, 105, 110, 103]
</snippet></ROW><ROW><id>8011373</id><snippet>import itk
imageType = itk.Image.F3
buf =  scipy.zeros( (100,100,100), dtype = numpy.float32)
itkImage = itk.PyBuffer[imageType].GetImageFromArray(buf)
</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>engine_module.c</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>RTDL_LOCAL</snippet></ROW><ROW><id>8011667</id><snippet>dlopen</snippet></ROW><ROW><id>8011667</id><snippet>dlopen</snippet></ROW><ROW><id>8011667</id><snippet>initxxx</snippet></ROW><ROW><id>8011667</id><snippet>initxxx</snippet></ROW><ROW><id>8011667</id><snippet>RTDL_GLOBAL</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>Engine</snippet></ROW><ROW><id>8011667</id><snippet>dlsym</snippet></ROW><ROW><id>8011667</id><snippet>extern</snippet></ROW><ROW><id>8011667</id><snippet>dlopen</snippet></ROW><ROW><id>8011836</id><snippet>with open('pagehead.section.htm','r') as f:
    output = f.read()
</snippet></ROW><ROW><id>8011836</id><snippet>.close()</snippet></ROW><ROW><id>8011865</id><snippet>class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return json.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>8011865</id><snippet>json.dumps(my_variable, cls=DecimalEncoder)
</snippet></ROW><ROW><id>8011865</id><snippet>class DateEncoder(json.JSONEncoder):
    def default(self, obj):
        if hasattr(obj, 'isoformat'):
            return obj.isoformat()
        else:
            return str(obj)
        return json.JSONEncoder.default(self, obj)


json.dumps(my_variable, cls=DateEncoder)
</snippet></ROW><ROW><id>8011918</id><snippet>startdata = raw_input('enter_input:')
</snippet></ROW><ROW><id>8011918</id><snippet>import sys
startdata = sys.argv[1]
</snippet></ROW><ROW><id>8011918</id><snippet>$ nohup python myprogram.py SOMETHING &amp;
</snippet></ROW><ROW><id>8011960</id><snippet>def asciirepl(match):
  chr = binascii.unhexlify(match.group()[2:])
  return '\\' + chr if chr in ('\\"') else chr
</snippet></ROW><ROW><id>8011960</id><snippet>json</snippet></ROW><ROW><id>8011960</id><snippet>def asciirepl(match):
  return '\\u00' + match.group()[2:]
</snippet></ROW><ROW><id>8012204</id><snippet>Cookie</snippet></ROW><ROW><id>8012204</id><snippet>Cookie: …</snippet></ROW><ROW><id>8012204</id><snippet>?cachebuster=1234</snippet></ROW><ROW><id>8012212</id><snippet>from gi.repository import GdkX11, Gtk

class App:
    def __init__(self):
        win = Gtk.Window()
        win.resize(400, 400)
        win.connect('delete-event', Gtk.main_quit)

        da = Gtk.DrawingArea()
        win.add(da)
        win.show_all()

        print da.get_property('window').get_xid()

if __name__ == "__main__":
    App()
    Gtk.main()
</snippet></ROW><ROW><id>8012433</id><snippet>.*</snippet></ROW><ROW><id>8012433</id><snippet>\d</snippet></ROW><ROW><id>8012433</id><snippet>re.match</snippet></ROW><ROW><id>8012433</id><snippet>.group()</snippet></ROW><ROW><id>8012433</id><snippet>&gt;&gt;&gt; re.match('.*(\d\.\d\.\d)', 'factor-1.6.2.tar.gz').group(1)
'1.6.2'
</snippet></ROW><ROW><id>8012433</id><snippet>.*</snippet></ROW><ROW><id>8012433</id><snippet>&gt;&gt;&gt; re.search('\d\.\d\.\d', 'factor-1.6.2.tar.gz').group(0)
'1.6.2'
</snippet></ROW><ROW><id>8012533</id><snippet>np.dot</snippet></ROW><ROW><id>8012533</id><snippet>np.dot</snippet></ROW><ROW><id>8012533</id><snippet>*</snippet></ROW><ROW><id>8012533</id><snippet>*</snippet></ROW><ROW><id>8012533</id><snippet>np.dot</snippet></ROW><ROW><id>8012533</id><snippet>rgb</snippet></ROW><ROW><id>8012533</id><snippet>np.dot</snippet></ROW><ROW><id>8012533</id><snippet>    For N dimensions it is a sum product over the last axis of `a` and
    the second-to-last of `b`::

        dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])
</snippet></ROW><ROW><id>8012533</id><snippet>rgb_to_ycc</snippet></ROW><ROW><id>8012533</id><snippet>rgb_to_ycc</snippet></ROW><ROW><id>8012533</id><snippet>convert_rgb_to_ycc</snippet></ROW><ROW><id>8012533</id><snippet>np.allclose(...)</snippet></ROW><ROW><id>8012533</id><snippet>import numpy as np

def rgb_to_ycc(rgb):
    M = np.array(
         (0.2990,  0.5870,  0.1140,
        -0.1687, -0.3313,  0.5000,
         0.5000, -0.4187, -0.0813,)
        ).reshape( 3,3 )
    return np.dot(rgb, M.T)

def convert_rgb_to_ycc( rgb ) :
    M = np.matrix(
         (0.2990,  0.5870,  0.1140,
        -0.1687, -0.3313,  0.5000,
         0.5000, -0.4187, -0.0813,)
        ).reshape( 3,3 )
    shape=rgb.shape
    rgb=rgb.reshape((-1,3))
    ycc = np.zeros_like( rgb )
    for i in range(len(rgb)):
        ycc[i] = rgb[i] * M.T
    return ycc.reshape(shape)

rgb=np.random.random((100,100,3))
assert np.allclose(rgb_to_ycc(rgb),convert_rgb_to_ycc(rgb))
</snippet></ROW><ROW><id>8012768</id><snippet>etree.parse(file, parser)</snippet></ROW><ROW><id>8012768</id><snippet>file</snippet></ROW><ROW><id>8012768</id><snippet>parser.feed</snippet></ROW><ROW><id>8012768</id><snippet>self.done=True</snippet></ROW><ROW><id>8012768</id><snippet>target.done</snippet></ROW><ROW><id>8012768</id><snippet>import lxml.etree as ET
class HaltingTarget(object):
    def __init__(self, limit=None):
        self.done=False
        self.limit=limit
        self.counter=0
        self.result=[]
    def start(self, tag, attrib):
        if self.limit and self.counter&gt;self.limit:
            self.done=True
            return
        if attrib:
            self.result.append(attrib)
        self.counter+=1
    def end(self, tag):
        pass
    def data(self, data):
        pass
    def comment(self, text):
        pass
    def close(self):
        return
def halt_parser():
    content='''\
        &lt;node1&gt;
          &lt;Title a1="x1"&gt; My Title &lt;/Title&gt;
          &lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
          &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
        &lt;/node1&gt;
        '''
    target=HaltingTarget()
    parser=ET.XMLParser(target=target)
    for line in content.splitlines():
        parser.feed(line.strip())
        if target.done: break
    # We can't call parser.close() since the XML we've fed it is probably 
    # incomplete. We don't plan to use `parser` anymore, so delete it.
    del parser
    print(target.result)
    # [{'a1': u'x1'}, {'a1': u'x2'}, {'a1': u'x1'}]
</snippet></ROW><ROW><id>8012861</id><snippet>other</snippet></ROW><ROW><id>8012861</id><snippet>Fraction</snippet></ROW><ROW><id>8012861</id><snippet>def __rsub__(self, other):
    return Fraction(other, 1) - self
</snippet></ROW><ROW><id>8012861</id><snippet>__rsub__()</snippet></ROW><ROW><id>8012861</id><snippet>other</snippet></ROW><ROW><id>8012861</id><snippet>Fraction</snippet></ROW><ROW><id>8012861</id><snippet>__sub__()</snippet></ROW><ROW><id>8012861</id><snippet>other</snippet></ROW><ROW><id>8012861</id><snippet>Fraction</snippet></ROW><ROW><id>8013133</id><snippet>super</snippet></ROW><ROW><id>8013133</id><snippet>super</snippet></ROW><ROW><id>8013133</id><snippet>__init__</snippet></ROW><ROW><id>8013133</id><snippet>class Parent1(object):
    def __init__(self):
        super(Parent1, self).__init__()
        self.var1 = 1

class Parent2(object):
    def __init__(self):
        super(Parent2, self).__init__()
        self.var2 = 2

class Child(Parent1, Parent2):
    def __init__(self):
        super(Child, self).__init__()
</snippet></ROW><ROW><id>8013133</id><snippet>super()</snippet></ROW><ROW><id>8013133</id><snippet>super(type, instance)</snippet></ROW><ROW><id>8013314</id><snippet>&lt;AliasName&gt;</snippet></ROW><ROW><id>8013314</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>8013314</id><snippet>&lt;AliasName&gt;</snippet></ROW><ROW><id>8013314</id><snippet> alias.text = jp2en.get(name.text.strip(), alias.text)
</snippet></ROW><ROW><id>8013314</id><snippet> alias.text = jp2en.get(name.text.strip(), name.text)
</snippet></ROW><ROW><id>8013314</id><snippet>&lt;AliasName&gt;</snippet></ROW><ROW><id>8013314</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>8013314</id><snippet> if alias.text is not None:
    alias.text = jp2en.get(alias.text.strip(), name.text)
 else:
    alias.text = name.text
</snippet></ROW><ROW><id>8013588</id><snippet>redirect_uri</snippet></ROW><ROW><id>8013778</id><snippet>#Put this in the initialisation 
Map foos&lt;row.type,String&gt; = new Map&lt;row.type, String&gt;()
#Populate the map 
map.set('a') = 'headerA specific params x=1'
map.set('b') = 'headerB specific params x=2'
map.set('c') = 'headerC specific params y=3'
map.set ...

Map bars&lt;String,String&gt; = new Map&lt;String,String()
bars.set('fooA') = 'a,b'
bars.set('fooB') = 'a,c'
String commonheader = "HTTP/1.1"


#This would be in a method    
row = db.query_for_service()
String output_header += commonheader
for i in bars.get(fooN).split(','):
    output_header += foos.get(i)
send_request()
</snippet></ROW><ROW><id>8013842</id><snippet>raw_input()</snippet></ROW><ROW><id>8013842</id><snippet>input</snippet></ROW><ROW><id>8013842</id><snippet>raw_input</snippet></ROW><ROW><id>8013842</id><snippet>if __name__ == '__main__':
    print(approximate_size(1000000000000, False))
    print (approximate_size(1000000000000))

input('Press Enter to exit')
</snippet></ROW><ROW><id>8014338</id><snippet>__cmp__()</snippet></ROW><ROW><id>8014338</id><snippet>__eq__()</snippet></ROW><ROW><id>8014338</id><snippet>__hash__()</snippet></ROW><ROW><id>8014338</id><snippet>__eq__()</snippet></ROW><ROW><id>8014590</id><snippet>select_related()</snippet></ROW><ROW><id>8014590</id><snippet>Foo.objects.get(id=1).select_related('bar__baz__winning')
</snippet></ROW><ROW><id>8014710</id><snippet>from django.contrib.auth import logout

def logout_view(request):
    logout(request)
    return http.HttpResponse("You've been logged out")
</snippet></ROW><ROW><id>8015152</id><snippet>sys.path</snippet></ROW><ROW><id>8015152</id><snippet>import sys, os

sys.path.insert(0,
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src import stringbuilder

del sys.path[0]
</snippet></ROW><ROW><id>8015152</id><snippet>sys.path</snippet></ROW><ROW><id>8015152</id><snippet>project /
    package /
        __init__.py
        src /
            __init__.py
            stringbuilder.py
        tests / 
            __init__.py
            stringbuilder_test.py
    main.py
    test.py
</snippet></ROW><ROW><id>8015152</id><snippet>test.py</snippet></ROW><ROW><id>8015152</id><snippet>from package.tests import stringbuilder_test
</snippet></ROW><ROW><id>8015152</id><snippet>stringbuilder_test.py</snippet></ROW><ROW><id>8015152</id><snippet>src</snippet></ROW><ROW><id>8015152</id><snippet>from package.src import stringbuilder
</snippet></ROW><ROW><id>8015235</id><snippet>r'^https?://(www.)?domain.com/?(?P&lt;path&gt;.*?)/?$'
</snippet></ROW><ROW><id>8015235</id><snippet>$</snippet></ROW><ROW><id>8015235</id><snippet>/?</snippet></ROW><ROW><id>8015252</id><snippet>setDefaultPage</snippet></ROW><ROW><id>8015252</id><snippet>setDefaultPage</snippet></ROW><ROW><id>8015252</id><snippet>setDefaultPage</snippet></ROW><ROW><id>8015252</id><snippet>ISelectableBrowserDefault</snippet></ROW><ROW><id>8015632</id><snippet>productPart._date = modDate
</snippet></ROW><ROW><id>8015632</id><snippet>PilotTest</snippet></ROW><ROW><id>8015632</id><snippet>productPart</snippet></ROW><ROW><id>8015632</id><snippet>productPart</snippet></ROW><ROW><id>8015632</id><snippet>productPart = ...something here...
</snippet></ROW><ROW><id>8015692</id><snippet>cron:
- description: update source ABC
  url: /cron/ABC/
  schedule: every 5 minutes
  login: admin
- description: update source XYZ
  url: /cron/XYZ/
  schedule: every 12 minutes
  login: admin

webapp.WSGIApplication([('/cron/([^/]+)/', CronHandler)])    

class CronHandler(webapp.RequestHandler):
    def post(self, source): 
            #do something with source variable...
</snippet></ROW><ROW><id>8015943</id><snippet>Set()</snippet></ROW><ROW><id>8015943</id><snippet>self.mylistbox.Set(listofchoices)
</snippet></ROW><ROW><id>8015996</id><snippet>variables</snippet></ROW><ROW><id>8015996</id><snippet>data.total</snippet></ROW><ROW><id>8015996</id><snippet>data.pass</snippet></ROW><ROW><id>8015996</id><snippet>data.fail</snippet></ROW><ROW><id>8015996</id><snippet>data[0]</snippet></ROW><ROW><id>8015996</id><snippet>data[1]</snippet></ROW><ROW><id>8015996</id><snippet>data[2]</snippet></ROW><ROW><id>8015996</id><snippet>'spec'</snippet></ROW><ROW><id>8015996</id><snippet>'nd'</snippet></ROW><ROW><id>8015996</id><snippet>'addr'</snippet></ROW><ROW><id>8015996</id><snippet>variables</snippet></ROW><ROW><id>8015996</id><snippet>variables['nd']</snippet></ROW><ROW><id>8015996</id><snippet>variables[1]</snippet></ROW><ROW><id>8015996</id><snippet>nd_fail</snippet></ROW><ROW><id>8015996</id><snippet>variables['nd'].fail</snippet></ROW><ROW><id>8015996</id><snippet>variables[1][2]</snippet></ROW><ROW><id>8015996</id><snippet>import collections
# define the namedtuple class Point (used below).
Point = collections.namedtuple('Point', 'total pass fail')

# Notice we declare `variables` empty at first; we'll fill in the values later.
variables={}
keys=('spec','nd','addr','pmtu','icmp')
for s in sections:
    for key in keys:
        page = input_page + s
        url_reference = urllib.urlopen(page)
        html_page = url_reference.read()
        m = re.search(r'TOTAL&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;:&lt;/TD&gt;&lt;TD&gt;([0-9,]+)', html_page)
        ntotal = int(m.group(1)) 
        m = re.search(r'PASS&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;:&lt;/TD&gt;&lt;TD&gt;([0-9,]+)', html_page)
        npass = int(m.group(1))
        m = re.search(r'FAIL&lt;/FONT&gt;&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;:&lt;/TD&gt;&lt;TD&gt;([0-9,]+)', html_page)
        nfail = int(m.group(1))

        # We create an instance of the namedtuple on the right-hand side
        # and store the value in `variables[key]`, thus building the 
        # variables dict incrementally.
        variables[key]=Point(ntotal,npass,nfail)
</snippet></ROW><ROW><id>8016172</id><snippet>models.py</snippet></ROW><ROW><id>8016172</id><snippet>models/__init__.py</snippet></ROW><ROW><id>8016447</id><snippet>def MonteCarlo(T, S, x):
    for i in range(0, x):
        starterTrans(T, S)
</snippet></ROW><ROW><id>8016447</id><snippet>def MonteCarlo(T, S, x):
    for i in range(0, x):
        starterTrans(T[:], S)
</snippet></ROW><ROW><id>8016447</id><snippet>T</snippet></ROW><ROW><id>8016447</id><snippet>starterTrans(..)</snippet></ROW><ROW><id>8016447</id><snippet>T</snippet></ROW><ROW><id>8016447</id><snippet>starterTrans(..)</snippet></ROW><ROW><id>8016823</id><snippet>import re

def getMove(playerInput):
    m = re.search('([\d]+)[\D]*([\d]+)[\D]*([\d]+)[\D]*([\d]+)[\D]*', playerInput)
    if m:
        nums = [int(x) for x in m.groups()]
    else:
        raise ValueError("Invalid argument")
    return ((nums[0], nums[1]),(nums[2], nums[3]))
</snippet></ROW><ROW><id>8016823</id><snippet>"((12,5wf),(21,4xx))"</snippet></ROW><ROW><id>8016823</id><snippet>((12, 5), (21, 4))</snippet></ROW><ROW><id>8016823</id><snippet>"((0,1),(2,3))"</snippet></ROW><ROW><id>8016823</id><snippet>((0, 1), (2, 3))</snippet></ROW><ROW><id>8016823</id><snippet>"   (0,  1),(2,    3)"</snippet></ROW><ROW><id>8016823</id><snippet>((0, 1), (2, 3))</snippet></ROW><ROW><id>8016961</id><snippet>export CC=/usr/bin/gcc
python setup.py build
</snippet></ROW><ROW><id>8017093</id><snippet>Python 2.6.7 (r267:88850, Aug 14 2011, 12:32:40) [GCC 4.6.2] on linux3
&gt;&gt;&gt; a = u'\xa6\n'
&gt;&gt;&gt; sys.stdout.write(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec cant encode character u'\xa6' ...
&gt;&gt;&gt; reload(sys).setdefaultencoding('utf8')
&gt;&gt;&gt; sys.stdout.write(a)
¦
</snippet></ROW><ROW><id>8017093</id><snippet>class StdOut(object):
    def write(self, string):
        if isinstance(string, unicode):
            string = string.encode(sys.__stdout__.encoding)
        sys.__stdout__.write(string)

&gt;&gt;&gt; sys.stdout = StdOut()
&gt;&gt;&gt; sys.stdout.write(a)
¦
</snippet></ROW><ROW><id>8017106</id><snippet>import glob
import os

outfile = open('output.csv', 'w')
outfile.write('X ; Y ; Z ; filename\n')
for filename in glob.glob('*.csv'):
  if filename == 'output.csv': # Skip the file we're writing.
    continue
  with open(filename, 'r') as infile:
    count = 0 
    lineno = 0 
    for line in infile:
      lineno += 1
      if lineno == 1: # Skip the header line.
        continue
      fields = line.split(';')
      x = int(fields[0])
      y = int(fields[1])
      z = float(fields[2])
      if x == 1 and y == 2:
        outfile.write('%d ; %d ; %g ; %s\n' % (x, y, z, filename))
        count += 1
    if count == 0: # Handle the case when no lines were found.
      outfile.write('1 ; 2 ; NA ; %s\n' % filename)
outfile.close()
</snippet></ROW><ROW><id>8017150</id><snippet>defaultdict</snippet></ROW><ROW><id>8017150</id><snippet>import sys
from collections import defaultdict
from multiprocessing import Pool, Queue
import re

GLOBAL_CONCORDANCE = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))

def concordance_worker(index_sentence):
    sent_index, sentence = index_sentence
    words = sentence.split()

    return [(word, colo_word, colo_index, sent_index)
            for i, word in enumerate(words)
            for colo_index, colo_word in enumerate(words[i:])]

def build_concordance(sentences):
    global GLOBAL_CONCORDANCE
    pool = Pool(8)

    results = pool.map(concordance_worker, enumerate(sentences))

    for result in results:
        for word, colo_word, colo_index, sent_index in result:
            GLOBAL_CONCORDANCE[word][colo_word][colo_index].append(sent_index)

    print len(GLOBAL_CONCORDANCE)


def main():
    sentences = ["Sentence 1", "Sentence 2", "Sentence 3", "Sentence 4"]
    build_concordance(sentences)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>8017254</id><snippet>[Ingredient(*ing) for ing in ings]
</snippet></ROW><ROW><id>8017470</id><snippet>sentences</snippet></ROW><ROW><id>8017470</id><snippet>words</snippet></ROW><ROW><id>8017470</id><snippet>sentences_words</snippet></ROW><ROW><id>8017470</id><snippet>word_id</snippet></ROW><ROW><id>8017470</id><snippet>sentence_id</snippet></ROW><ROW><id>8017470</id><snippet>words</snippet></ROW><ROW><id>8017470</id><snippet>SELECT `id` FROM `words` WHERE `word` IN ('word1', 'word2', 'word3');
</snippet></ROW><ROW><id>8017470</id><snippet>sentence_id</snippet></ROW><ROW><id>8017470</id><snippet>sentences</snippet></ROW><ROW><id>8017470</id><snippet>word_id</snippet></ROW><ROW><id>8017470</id><snippet>words</snippet></ROW><ROW><id>8017470</id><snippet>SELECT `sentence_id`, `word_id` FROM `sentences_words`
WHERE `word_id` IN ([here goes list of words' ids]);
</snippet></ROW><ROW><id>8017470</id><snippet>SELECT `sentence_id`, `word_id` FROM `sentences_words`
WHERE `word_id` IN (
    SELECT `id` FROM `words` WHERE `word` IN ('word1', 'word2', 'word3')
);
</snippet></ROW><ROW><id>8017470</id><snippet>sentence_id</snippet></ROW><ROW><id>8017470</id><snippet>word_id</snippet></ROW><ROW><id>8017470</id><snippet>sentences_words</snippet></ROW><ROW><id>8017470</id><snippet>position</snippet></ROW><ROW><id>8017567</id><snippet>deferToThread</snippet></ROW><ROW><id>8017567</id><snippet>cStringIO</snippet></ROW><ROW><id>8017567</id><snippet>Deferred</snippet></ROW><ROW><id>8017567</id><snippet>deferToThread</snippet></ROW><ROW><id>8017567</id><snippet>Deferred</snippet></ROW><ROW><id>8017567</id><snippet>Deferred</snippet></ROW><ROW><id>8017567</id><snippet>twisted.web.template</snippet></ROW><ROW><id>8017631</id><snippet>QTextEdit.zoomIn/Out</snippet></ROW><ROW><id>8017631</id><snippet>pointSize</snippet></ROW><ROW><id>8017631</id><snippet>span</snippet></ROW><ROW><id>8017631</id><snippet>font-size</snippet></ROW><ROW><id>8017631</id><snippet>small</snippet></ROW><ROW><id>8017631</id><snippet>large</snippet></ROW><ROW><id>8017631</id><snippet>    # Font Size
    self.comboSize = QtGui.QComboBox(self.toolBar)
    self.toolBar.addWidget(self.comboSize)
    self.comboSize.addItem('small')
    self.comboSize.addItem('medium')
    self.comboSize.addItem('large')
    self.comboSize.addItem('x-large')
    self.comboSize.addItem('xx-large')
    self.comboSize.setCurrentIndex(1)
    self.comboSize.activated[int].connect(self.textSize)

def textSize(self, size):
    fmt = QtGui.QTextCharFormat()
    fmt.setProperty(QtGui.QTextFormat.FontSizeAdjustment, size - 1)
    self.mergeFormatOnWordOrSelection(fmt)
</snippet></ROW><ROW><id>8017728</id><snippet>def MonteCarlo(starter, x):
    result = dict(w=0,l=0,n=0)
    for i in range(0, x):
        w,l,n = starterTrans3(starter)
        result['w']+=w
        result['l']+=l
        result['n']+=n
    return result
</snippet></ROW><ROW><id>8017728</id><snippet>    return result['w']/float(x),result['l']/float(x),result['n']/float(x)
</snippet></ROW><ROW><id>8017761</id><snippet>type()</snippet></ROW><ROW><id>8017761</id><snippet>/</snippet></ROW><ROW><id>8017761</id><snippet>float</snippet></ROW><ROW><id>8017761</id><snippet>//</snippet></ROW><ROW><id>8017761</id><snippet>if a % 5 == 0:
    c = c + 1
</snippet></ROW><ROW><id>8017761</id><snippet>is</snippet></ROW><ROW><id>8017761</id><snippet>b != 0</snippet></ROW><ROW><id>8017761</id><snippet>b is not 0</snippet></ROW><ROW><id>8017906</id><snippet>tp_methods</snippet></ROW><ROW><id>8017906</id><snippet>METH_STATIC</snippet></ROW><ROW><id>8017906</id><snippet>METH_CLASS</snippet></ROW><ROW><id>8017906</id><snippet>ml_flags</snippet></ROW><ROW><id>8017906</id><snippet>PyMethodDef</snippet></ROW><ROW><id>8017906</id><snippet>@staticmethod</snippet></ROW><ROW><id>8017906</id><snippet>@classmethod</snippet></ROW><ROW><id>8017906</id><snippet>NULL</snippet></ROW><ROW><id>8017906</id><snippet>PyTypeObject*</snippet></ROW><ROW><id>8017906</id><snippet>tp_dict</snippet></ROW><ROW><id>8017906</id><snippet>PyType_Ready()</snippet></ROW><ROW><id>8017906</id><snippet>tp_dict</snippet></ROW><ROW><id>8017906</id><snippet>NULL</snippet></ROW><ROW><id>8017906</id><snippet>PyType_Ready()</snippet></ROW><ROW><id>8017906</id><snippet>tp_dict</snippet></ROW><ROW><id>8017999</id><snippet>unittest2</snippet></ROW><ROW><id>8017999</id><snippet>def test_this_thing(self):
  pass
</snippet></ROW><ROW><id>8017999</id><snippet>@skip</snippet></ROW><ROW><id>8017999</id><snippet>@unittest.expectedFailure</snippet></ROW><ROW><id>8018433</id><snippet>lst.sort(key=lambda x: x['profile']['first_name'])
</snippet></ROW><ROW><id>8018433</id><snippet>lst</snippet></ROW><ROW><id>8018433</id><snippet>sorted(lst, key=lambda x: x['profile']['first_name'])
</snippet></ROW><ROW><id>8018614</id><snippet>import urllib2
urllib2.urlopen('http://stackoverflow.com').read()
</snippet></ROW><ROW><id>8018681</id><snippet>&gt;&gt;&gt; [str(i) for i in range(5)]
['0', '1', '2', '3', '4']
</snippet></ROW><ROW><id>8018681</id><snippet>for</snippet></ROW><ROW><id>8018681</id><snippet>lst = []
for i in range(5):
    lst.append(str(i))
</snippet></ROW><ROW><id>8018681</id><snippet>for</snippet></ROW><ROW><id>8018681</id><snippet>def convex_hull(pts):
    """Returns the points on the convex hull of pts in CCW order."""
    for t in xrange(len(pts)):
        m = 2 ** (2 ** t)
        hulls = []
        for i in xrange(0, len(pts), m):
            hulls.append(_graham_scan(pts[i:i + m]))
    # more code
</snippet></ROW><ROW><id>8018681</id><snippet>pts[i:i + m]</snippet></ROW><ROW><id>8018681</id><snippet>i</snippet></ROW><ROW><id>8018681</id><snippet>i + m</snippet></ROW><ROW><id>8018681</id><snippet>[first index to include : first index to exclude : step]
</snippet></ROW><ROW><id>8018691</id><snippet>GetPageText()</snippet></ROW><ROW><id>8018742</id><snippet>import os
print os.path.isfile(r"C:\Users\Desktop\kk.fasta")
</snippet></ROW><ROW><id>8018742</id><snippet>r</snippet></ROW><ROW><id>8018742</id><snippet>\</snippet></ROW><ROW><id>8018742</id><snippet>\\</snippet></ROW><ROW><id>8018908</id><snippet>import json
from pprint import pprint

data = json.load(json_data)
pprint(data)

for category in data['query']['categorymembers']:
    print 'PageID: %d and Title: %s' % (category['pageid'], category['title'])
</snippet></ROW><ROW><id>8018989</id><snippet>data = {'a': [ [1, 2] ], 'b': [ [3, 4] ],'c':[ [5,6]] }</snippet></ROW><ROW><id>8018989</id><snippet>dict.items()</snippet></ROW><ROW><id>8018989</id><snippet>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;a&lt;/td&gt;
        &lt;td&gt;b&lt;/td&gt;
        &lt;td&gt;c&lt;/td&gt;
    &lt;/tr&gt;

    {% for key, values in data.items %}
    &lt;tr&gt;
        &lt;td&gt;{{key}}&lt;/td&gt;
        {% for v in values[0] %}
        &lt;td&gt;{{v}}&lt;/td&gt;
        {% endfor %}
    &lt;/tr&gt;
    {% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>8018989</id><snippet>ingredients</snippet></ROW><ROW><id>8018989</id><snippet>recipe_name</snippet></ROW><ROW><id>8019286</id><snippet>_keep_left</snippet></ROW><ROW><id>8019286</id><snippet>hull</snippet></ROW><ROW><id>8019286</id><snippet>,  [])</snippet></ROW><ROW><id>8019286</id><snippet>_keep_left</snippet></ROW><ROW><id>8019286</id><snippet>hull</snippet></ROW><ROW><id>8019286</id><snippet>lh</snippet></ROW><ROW><id>8019286</id><snippet>uh</snippet></ROW><ROW><id>8019286</id><snippet>lh</snippet></ROW><ROW><id>8019286</id><snippet>uh</snippet></ROW><ROW><id>8019286</id><snippet>reduce</snippet></ROW><ROW><id>8019286</id><snippet>_keep_left</snippet></ROW><ROW><id>8019286</id><snippet>_keep_left</snippet></ROW><ROW><id>8019286</id><snippet>not len(hull)</snippet></ROW><ROW><id>8019286</id><snippet>hull[-1] != r</snippet></ROW><ROW><id>8019286</id><snippet>r</snippet></ROW><ROW><id>8019286</id><snippet>hull.append(r)</snippet></ROW><ROW><id>8019286</id><snippet>r</snippet></ROW><ROW><id>8019286</id><snippet>hull</snippet></ROW><ROW><id>8019286</id><snippet>r</snippet></ROW><ROW><id>8019286</id><snippet>hull</snippet></ROW><ROW><id>8019286</id><snippet>r</snippet></ROW><ROW><id>8019286</id><snippet>hull</snippet></ROW><ROW><id>8019286</id><snippet>r</snippet></ROW><ROW><id>8019361</id><snippet>isprime(x)</snippet></ROW><ROW><id>8019361</id><snippet>if x % 2 == 0</snippet></ROW><ROW><id>8019361</id><snippet>def isprime(x):
    for i in range(2, x-1):
        if x % i == 0:
            return False
    else:
        return True
</snippet></ROW><ROW><id>8019361</id><snippet>else:</snippet></ROW><ROW><id>8019361</id><snippet>for</snippet></ROW><ROW><id>8019361</id><snippet>if</snippet></ROW><ROW><id>8019418</id><snippet>from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace_3_line(file):
    new_3rd_line = 'new_3_line\n'
    #Create temp file
    fh, abs_path = mkstemp()
    new_file = open(abs_path,'w')
    old_file = open(file)
    counter = 0
    for line in old_file:
        counter = counter + 1
        if counter == 3:
            new_file.write(new_3rd_line)
        else:
            new_file.write(line)
    #close temp file
    new_file.close()
    close(fh)
    old_file.close()
    #Remove original file
    remove(file)
    #Move new file
    move(abs_path, file)

replace_3_line('tmp.ann')
</snippet></ROW><ROW><id>8019418</id><snippet>Traceback (most recent call last):
  File "D:\xxx\replace.py", line 27, in &lt;module&gt;
    replace_3_line('tmp.ann')
  File "D:\xxx\replace.py", line 12, in replace_3_line
    for line in old_file:
  File "C:\Python31\lib\encodings\cp1251.py", line 23, in decode
    return codecs.charmap_decode(input,self.errors,decoding_table)[0]
UnicodeDecodeError: 'charmap' codec can't decode byte 0x98 in position 32: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>8019418</id><snippet>фвыафыв
sdadf
试试
阿斯达а
阿斯顿飞
</snippet></ROW><ROW><id>8019455</id><snippet>&gt;&gt;&gt; d = {"cars": ["Chevrolet", "Toyota", "Hummer", "Ferrari"],
         "computers": ["mac", "windows", "linux", "amstrad"]}
&gt;&gt;&gt; d["cars"]
['Chevrolet', 'Toyota', 'Hummer', 'Ferrari']
</snippet></ROW><ROW><id>8019594</id><snippet>def on_tweet(data):
    tweet = json.loads(data)
    db.posts.insert(tweet)


 buffer = ""

 def on_receive(data):
     buffer += data.strip()         
     if (data.endswith("\r\n")):    
         if buffer: 
             on_tweet(buffer)
         buffer = ""
</snippet></ROW><ROW><id>8019732</id><snippet>N = 10000

# initialize an array of flags
is_prime = [1 for num in xrange(N)]
is_prime[0] = 0 # this is because indexing starts at zero
is_prime[1] = 0 # one is not a prime, but don't mark all of its multiples!

def set_prime(num):
    "num is a prime; set all of its multiples in is_prime to zero"
    for x in xrange(num*2, N, num):
        is_prime[x] = 0

# iterate over all integers up to N and update the is_prime array accordingly
for num in xrange(N):
    if is_prime[num] == 1:
        set_prime(num)

primes = [num for num in xrange(N) if is_prime[num]]
</snippet></ROW><ROW><id>8019858</id><snippet>hulls[i][j]='foo'</snippet></ROW><ROW><id>8019858</id><snippet>min('a','b') is 'a'</snippet></ROW><ROW><id>8020264</id><snippet>def initialize():
    print('initialize')
def do_the_thing(args):
    print('doing things',args)
def function(args):
    _function(args)
def firsttime(args):
    global _function
    initialize()
    do_the_thing(args)
    _function=do_the_thing
_function=firsttime
</snippet></ROW><ROW><id>8020264</id><snippet>function</snippet></ROW><ROW><id>8020264</id><snippet>_function</snippet></ROW><ROW><id>8020264</id><snippet>_function</snippet></ROW><ROW><id>8020264</id><snippet>firsttime</snippet></ROW><ROW><id>8020264</id><snippet>do_the_thing</snippet></ROW><ROW><id>8020264</id><snippet>from module import function
function(1)
function([2,3])
</snippet></ROW><ROW><id>8020264</id><snippet>initialize
('doing things', 1)
('doing things', [2, 3])
</snippet></ROW><ROW><id>8020264</id><snippet>def coroutine(func):
    # http://www.dabeaz.com/coroutines/index.html
    def start(*args,**kwargs):
        cr = func(*args,**kwargs)
        cr.next()
        return cr
    return start

def initialize():
    print('initialize')

def do_the_thing(*args, **kwargs):
    print('doing things', args, kwargs)
    return ('result', args)

@coroutine
def _function():
    args, kwargs = (yield)
    initialize()
    while True:
        args, kwargs = (yield do_the_thing(*args, **kwargs))
_function = _function().send
def function(*args, **kwargs):
    # This is purely to overcome the limitation that send can only accept 1 argument
    return _function((args,kwargs))
</snippet></ROW><ROW><id>8020264</id><snippet>print(function(1, x = 2))
print(function([2, 3]))
</snippet></ROW><ROW><id>8020264</id><snippet>initialize
('doing things', (1,), {'x': 2})
('result', (1,))
('doing things', ([2, 3],), {})
('result', ([2, 3],))
</snippet></ROW><ROW><id>8020296</id><snippet>dtype=None</snippet></ROW><ROW><id>8020296</id><snippet>import numpy as np
import io

alist = [['1','a','.3'],
        ['2','b','-.5']]

f = io.BytesIO('\n'.join(' '.join(row) for row in alist))
arr = np.genfromtxt(f,dtype=None)
print(arr)
print(arr.dtype)
# [(1, 'a', 0.3) (2, 'b', -0.5)]
# [('f0', '&lt;i4'), ('f1', '|S1'), ('f2', '&lt;f8')]
</snippet></ROW><ROW><id>8020296</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>8020296</id><snippet>List</snippet></ROW><ROW><id>8020296</id><snippet>alist</snippet></ROW><ROW><id>8020296</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>8020296</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>8020413</id><snippet>my_list.sort(key=lambda x: x[-1])
</snippet></ROW><ROW><id>8020413</id><snippet>my_list.sort(key=operator.itemgetter(-1))
</snippet></ROW><ROW><id>8020560</id><snippet>&gt;&gt;&gt; for i in xrange(len(mat)):
...  print(mat[i:] + mat[:i])
... 
[[0], [1], [2]]
[[1], [2], [0]]
[[2], [0], [1]]
</snippet></ROW><ROW><id>8020639</id><snippet>fork()</snippet></ROW><ROW><id>8020639</id><snippet>import threading

def my_tcp_server():
    sock = socket.socket(...)
    sock.bind(...)
    sock.listen()
    while True:
        conn, address = sock.accept()
        ...
        ... talk on the connection ...
        ...
        conn.close()

def main():
    ...
    threading.Thread(target=my_tcp_server).start()
    ...
</snippet></ROW><ROW><id>8020639</id><snippet>Queue.Queue()</snippet></ROW><ROW><id>8021021</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>8021039</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; tab = random.choice([[0, 1], [1, 0], [0, -1], [-1, 0]])
&gt;&gt;&gt; tab
[-1, 0]
</snippet></ROW><ROW><id>8021039</id><snippet>random</snippet></ROW><ROW><id>8021039</id><snippet>numpy.random</snippet></ROW><ROW><id>8021130</id><snippet>Europe/Warsaw</snippet></ROW><ROW><id>8021162</id><snippet>feedparser._FeedParserMixin</snippet></ROW><ROW><id>8021162</id><snippet>feedparser._FeedParserMixin.unknown_starttag</snippet></ROW><ROW><id>8021162</id><snippet>feedparser._FeedParserMixin.unknown_endtag</snippet></ROW><ROW><id>8021180</id><snippet>&gt;&gt;&gt; string1 = 'red blue white'
&gt;&gt;&gt; string2 = 'first second third'
&gt;&gt;&gt; dict(zip(string1.split(), string2.split()))
{'blue': 'second', 'red': 'first', 'white': 'third'}
</snippet></ROW><ROW><id>8021195</id><snippet>sock = urllib2.urlopen(request)
ch = sock.read()
sock.close()

print '\n'.join(str(i) + '  ' + repr(line)
                for i,line in enumerate(ch.splitlines(True)))
</snippet></ROW><ROW><id>8021195</id><snippet>from io import StringIO

ss = '''&lt;input type="hidden" name="__FOO" id="__FOO" value="garble" /&gt;

&lt;script type="text/javascript"&gt;
//&lt;![CDATA[
$(function () {
    // convert to 
    var True = true, False = false;

    manatee.start({
        pageIDs: ["16798", "16799", "16800", "16801", "16802"],
        userNames: ["Alice", "Bob", "Carol", "Dave", "Eve"],
        wordCounts: [77,23,64,89,93],
        linkCounts: [2,0,3,1,4],
        pageUrls: ["","/blog/35318264c9a98faf79965c270ac80c5606774df1/data.pdf","/blog/da6645f6e22bf5f75974dc7eed5fcd6160d6b51e/data.pdf","/blog/6f90f101115140727c43cadee0b9e17881403a63/data.pdf","/blog/333584fc2850d1a1f97a0a7bf8c5a12e684856bf/data.pdf","/blog/9a018ecc48a37a9247a6404fd83e085384b445aa/data.pdf"],

        toolbar: {
            id: "ManateeToolbar",
            buttons: [
                {
                    id: "ManateeBrowser",
                    text: "Enter Fullscreen",
                    toggleText: "Escape Fullscreen"
                }
            ]
        }

    });
});
//]]&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;var blah&lt;/script&gt;'''



simili_file = StringIO(ss)

for line in simili_file:
    if line[0:13] == '\t\tpageUrls: [':
        urls = tuple(el[1:-1] for el in line[13:line.find(']')].split(',') if el[1:-1])           
    print( urls )
</snippet></ROW><ROW><id>8021195</id><snippet>('/blog/35318264c9a98faf79965c270ac80c5606774df1/data.pdf',
'/blog/da6645f6e22bf5f75974dc7eed5fcd6160d6b51e/data.pdf', 
'/blog/6f90f101115140727c43cadee0b9e17881403a63/data.pdf', 
'/blog/333584fc2850d1a1f97a0a7bf8c5a12e684856bf/data.pdf', 
'/blog/9a018ecc48a37a9247a6404fd83e085384b445aa/data.pdf')
</snippet></ROW><ROW><id>8021195</id><snippet>ss = '''&lt;input type="hidden" name="__FOO" id="__FOO" value="garble" /&gt;

&lt;script type="text/javascript"&gt;
//&lt;![CDATA[
$(function () {
    // convert to 
    var True = true, False = false;

    manatee.start({
        pageIDs: ["16798", "16799", "16800", "16801", "16802"],
        userNames: ["Alice", "Bob", "Carol", "Dave", "Eve"],
        wordCounts: [77,23,64,89,93],
        linkCounts: [2,0,3,1,4],
        pageUrls: ["","/blog/35318264c9a98faf79965c270ac80c5606774df1/data.pdf","/blog/da6645f6e22bf5f75974dc7eed5fcd6160d6b51e/data.pdf","/blog/6f90f101115140727c43cadee0b9e17881403a63/data.pdf","/blog/333584fc2850d1a1f97a0a7bf8c5a12e684856bf/data.pdf","/blog/9a018ecc48a37a9247a6404fd83e085384b445aa/data.pdf"],

        toolbar: {
            id: "ManateeToolbar",
            buttons: [
                {
                    id: "ManateeBrowser",
                    text: "Enter Fullscreen",
                    toggleText: "Escape Fullscreen"
                }
            ]
        }

    });
});
//]]&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;var blah&lt;/script&gt;'''


import re


regx = re.compile('^\t*pageUrls[\t ]*:[\t ]*\[(.*?)\],[\t ]*$',re.MULTILINE)

for mat in regx.finditer(ss):
    urls = tuple(el[1:-1] for el in mat.group(1).split(',') if el[1:-1])
    print( urls )
</snippet></ROW><ROW><id>8021195</id><snippet>],[\t ]*$</snippet></ROW><ROW><id>8021195</id><snippet>[\t ]</snippet></ROW><ROW><id>8021278</id><snippet>tree.find( './/*[@cookie_diameter="12"]' )
</snippet></ROW><ROW><id>8021332</id><snippet>O(n^2)</snippet></ROW><ROW><id>8021332</id><snippet>O(n log n)</snippet></ROW><ROW><id>8021339</id><snippet>step2d()</snippet></ROW><ROW><id>8021339</id><snippet>__init__()</snippet></ROW><ROW><id>8021339</id><snippet>__init__()</snippet></ROW><ROW><id>8021339</id><snippet>step2d()</snippet></ROW><ROW><id>8021339</id><snippet>__new__()</snippet></ROW><ROW><id>8021339</id><snippet>step2d()</snippet></ROW><ROW><id>8021339</id><snippet>self.dimension</snippet></ROW><ROW><id>8021339</id><snippet>TypeError</snippet></ROW><ROW><id>8021339</id><snippet>def step2d(self, ns):
    if self.dimension != 2:
        raise TypeError("dimension must be 2")
    # continue with what to do if the dimensionality is 2
</snippet></ROW><ROW><id>8021498</id><snippet>url(r'^logout/(?P&lt;key&gt;[a-zA-Z0-9\-]+)/$', "airAgency.views.logout", name="logout"),
</snippet></ROW><ROW><id>8021498</id><snippet>&lt;a href="{% url logout agn.WebSite %}"&gt;
</snippet></ROW><ROW><id>8021617</id><snippet>__init__()</snippet></ROW><ROW><id>8021617</id><snippet>object</snippet></ROW><ROW><id>8021617</id><snippet>object.__new__(cls)
</snippet></ROW><ROW><id>8021617</id><snippet>cls</snippet></ROW><ROW><id>8021617</id><snippet>copy.copy()</snippet></ROW><ROW><id>8021617</id><snippet>__getstate__()</snippet></ROW><ROW><id>8021617</id><snippet>__setstate__()</snippet></ROW><ROW><id>8021617</id><snippet>cls</snippet></ROW><ROW><id>8021617</id><snippet>__init__()</snippet></ROW><ROW><id>8021617</id><snippet>class EmptyClass:
    pass

new_instance = EmptyClass()
new_instance.__class__ = cls
new_instance.__dict__.update(whatever)
</snippet></ROW><ROW><id>8021711</id><snippet>_[1]</snippet></ROW><ROW><id>8021711</id><snippet>def roulette(self):
    return [drink.fitness + (locals()['_[1]'][-1] if locals()['_[1]'] else 0) 
            for drink 
            in self.drinkList]
</snippet></ROW><ROW><id>8021711</id><snippet>for</snippet></ROW><ROW><id>8021824</id><snippet>result = []
for h, i in hull:
    result.append(hulls[h][i])
return result
</snippet></ROW><ROW><id>8021963</id><snippet>from my_flask_app import app as application
</snippet></ROW><ROW><id>8021963</id><snippet>&lt;init-param&gt;
  &lt;param-name&gt;app_import_name&lt;/param-name&gt;
  &lt;param-value&gt;wsgi.application&lt;/param-value&gt;
&lt;/init-param&gt;
</snippet></ROW><ROW><id>8021963</id><snippet>def handler(environ, start_response):
    return application.wsgi_app(environ, start_response)
</snippet></ROW><ROW><id>8022282</id><snippet>&lt;table cellspacing="0"&gt;
{% for item in in_country.list|dictsort:"name" %}

{% if forloop.counter0|divisibleby:4 %}
&lt;tr style="text-align:center;"&gt;
{% endif %}

 &lt;td width="200px" class='community_table'&gt;
    &lt;img src="{{ item.image }}" style="height:40px;"&gt;&lt;br /&gt;
    &lt;a href='{{ item.url }}' style="font-size:10px; margin-left:10px;" TARGET = "_blank"&gt;{{ item.name }}&lt;/a&gt;&lt;br /&gt;
    {{ item.com_type }}&lt;br /&gt;
    {{ item.in_city }}&lt;br /&gt;
 &lt;/td&gt;

{% if forloop.counter|divisibleby:4 %}
 &lt;/tr&gt;
{% endif %}

{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>8022340</id><snippet>&gt;&gt;&gt; t = datetime.datetime.now()
&gt;&gt;&gt; t
datetime.datetime(2011, 11, 5, 11, 26, 15, 37496)

&gt;&gt;&gt; time.mktime(t.timetuple()) + t.microsecond / 1E6
1320517575.037496
</snippet></ROW><ROW><id>8022365</id><snippet>setdefault</snippet></ROW><ROW><id>8022365</id><snippet>None</snippet></ROW><ROW><id>8022365</id><snippet>Counter</snippet></ROW><ROW><id>8022365</id><snippet>None</snippet></ROW><ROW><id>8022365</id><snippet>Counter</snippet></ROW><ROW><id>8022365</id><snippet>collections.Counter</snippet></ROW><ROW><id>8022415</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[[ 7.,  3.,  1.],
...         [ 9.,  6.,  9.]],
...
...        [[ 4.,  6.,  8.],
...         [ 8.,  1.,  1.]]])
&gt;&gt;&gt; a
array([[[ 7.,  3.,  1.],
        [ 9.,  6.,  9.]],

       [[ 4.,  6.,  8.],
        [ 8.,  1.,  1.]]])

&gt;&gt;&gt; a[:,:,1][a[:,:,1] &lt;; 5 ] = 9
&gt;&gt;&gt; a
array([[[ 7.,  9.,  1.],
        [ 9.,  6.,  9.]],

       [[ 4.,  6.,  8.],
        [ 8.,  9.,  1.]]])
</snippet></ROW><ROW><id>8022415</id><snippet>a[:,:,1]</snippet></ROW><ROW><id>8022415</id><snippet>a[:,:,1] &lt; 5</snippet></ROW><ROW><id>8022584</id><snippet>@</snippet></ROW><ROW><id>8022584</id><snippet>.</snippet></ROW><ROW><id>8022584</id><snippet>@</snippet></ROW><ROW><id>8022584</id><snippet>[^@]+@[^@]+\.[^@]+
</snippet></ROW><ROW><id>8022584</id><snippet>import re

if not re.match(r"... regex here ...", email):
  # whatever
</snippet></ROW><ROW><id>8022584</id><snippet>r</snippet></ROW><ROW><id>8022584</id><snippet>import re

EMAIL_REGEX = re.compile(r"... regex here ...")

if not EMAIL_REGEX.match(email):
  # whatever
</snippet></ROW><ROW><id>8022872</id><snippet>class A(models.Model):
    #some details
    pass


class B(models.Model):
    a = models.ForeignKey("A", null=True, blank=True) # note the quotes
    c = models.ForeignKey("C", null=True, blank=True) # note the quotes

class C(models.Model):
    pass
</snippet></ROW><ROW><id>8022872</id><snippet>C</snippet></ROW><ROW><id>8022872</id><snippet>A</snippet></ROW><ROW><id>8022872</id><snippet>B</snippet></ROW><ROW><id>8022872</id><snippet>C.method</snippet></ROW><ROW><id>8022872</id><snippet>def C_method [...] C.method = C_method</snippet></ROW><ROW><id>8023033</id><snippet>file.readline()</snippet></ROW><ROW><id>8023033</id><snippet>repr</snippet></ROW><ROW><id>8023033</id><snippet>import re
filename='/tmp/test.txt'
with open(filename,'w') as f:
    f.write(r'\"Hello,\s\"\s*\+\s*\"world!\"')

with open(filename,'r') as f:
    pat = f.readline()
    print(pat)
    # \"Hello,\s\"\s*\+\s*\"world!\"
    print(repr(pat))
    # '\\"Hello,\\s\\"\\s*\\+\\s*\\"world!\\"'
    assert re.search(pat,'  "Hello, " +   "world!"')  # Shows match was found
</snippet></ROW><ROW><id>8023130</id><snippet>bmonth = self.get_argument('bmonth', '')
bday = self.get_argument('bday', '')
byear = self.get_argument('byear', '')

bd = datetime.datetime(int(byear), int(bmonth), int(bday))
min_age = datetime.timedelta(weeks = 52*13)
if datetime.datetime.now() - bd &lt; min_age:
    response = tornado.escape.json_encode({"error":"true", "msg":
                     "You must be 13 years of age or older to join uSocial'N"})
</snippet></ROW><ROW><id>8023178</id><snippet>virtualenv -p /usr/local/bin/python3.2
</snippet></ROW><ROW><id>8023255</id><snippet>django-reversion</snippet></ROW><ROW><id>8023255</id><snippet>merged_into</snippet></ROW><ROW><id>8023255</id><snippet>merged_from</snippet></ROW><ROW><id>8023255</id><snippet>Organization(models.Model):
    name = models.CharField(max_length=100)
    merged_into = models.ForeignKey('self', null=True, blank=True)

Event(models.Model):
    organization = models.ForeignKey(Organization)
    name = models.CharField(max_length=100)  
    merged_from = models.ForeignKey(Organization null=True, blank=True)
</snippet></ROW><ROW><id>8023337</id><snippet>dict</snippet></ROW><ROW><id>8023337</id><snippet>for name, age in list.iteritems():
    if age == search_age:
        print name
</snippet></ROW><ROW><id>8023398</id><snippet>r</snippet></ROW><ROW><id>8023398</id><snippet>f = re.compile("nothing is (\\d+)").search
</snippet></ROW><ROW><id>8023398</id><snippet>'\d'</snippet></ROW><ROW><id>8023398</id><snippet>f = re.compile("nothing is (\d+)").search
</snippet></ROW><ROW><id>8023398</id><snippet>'r'</snippet></ROW><ROW><id>8023398</id><snippet>'R'</snippet></ROW><ROW><id>8023398</id><snippet>r"\n"</snippet></ROW><ROW><id>8023398</id><snippet>'n'</snippet></ROW><ROW><id>8023398</id><snippet>r"\""</snippet></ROW><ROW><id>8023398</id><snippet>r"\"</snippet></ROW><ROW><id>8023617</id><snippet>a.py</snippet></ROW><ROW><id>8023617</id><snippet>b.py</snippet></ROW><ROW><id>8023617</id><snippet>b.py</snippet></ROW><ROW><id>8023617</id><snippet>import b
</snippet></ROW><ROW><id>8023617</id><snippet># Code in b.py
def some_func():
    # Implementation
</snippet></ROW><ROW><id>8023617</id><snippet>import b
b.some_func()
</snippet></ROW><ROW><id>8023617</id><snippet>from b import some_func
some_func()
</snippet></ROW><ROW><id>8023617</id><snippet># Code in b.py
class ClassB():
    def some_func(self):
        # Implementation
</snippet></ROW><ROW><id>8023617</id><snippet>from b import ClassB
obj_b = ClassB()
obj_b.some_func()
</snippet></ROW><ROW><id>8023630</id><snippet>form.validate()</snippet></ROW><ROW><id>8023630</id><snippet>form = AdForm(formdata=self.request.POST)
if form.validate():
    ad.title = form.title.data
</snippet></ROW><ROW><id>8023754</id><snippet>if (l_name, f_name) in my_dict:
</snippet></ROW><ROW><id>8023948</id><snippet>zope.interface</snippet></ROW><ROW><id>8024106</id><snippet>import webbrowser

webbrowser.open("http://xkcd.com/353/")
</snippet></ROW><ROW><id>8024232</id><snippet>from collections import defaultdict

terms = ['Electronic rock', 'Alternative rock', 'Indie pop']
d = defaultdict(list)
for term in terms:
    for word in term.split():
        d[word].append(term)

for k,v in d.iteritems():
    if len(v) &gt; 1:
        print k,v
</snippet></ROW><ROW><id>8024355</id><snippet>import numpy as np
a = np.array([[[9, 8, 8],
               [4, 9, 1]],

              [[6, 6, 3],
               [9, 3, 5]]])

ind=(a[:,:,1]&lt;=8) &amp; (a[:,:,1]&gt;=6)
a[ind,1]=a[ind,0]*2
print(a)
</snippet></ROW><ROW><id>8024355</id><snippet>[[[ 9 18  8]
  [ 4  9  1]]

 [[ 6 12  3]
  [ 9  3  5]]]
</snippet></ROW><ROW><id>8024355</id><snippet>check_tuple</snippet></ROW><ROW><id>8024355</id><snippet>import numpy as np
np.random.seed(1)

N = 10
a = np.random.randint(1, 1000, (2, 2, 3))
check_tuple = np.random.randint(1, 1000, N)

def using_in1d(a):
    idx = np.in1d(a[:,:,1], check_tuple)
    idx=idx.reshape(a[:,:,1].shape)
    a[idx,1] = a[idx,0] * 2
    return a

def using_in(a):
    idx = np.zeros(a[:,:,0].shape,dtype=bool)
    for n in check_tuple:
        idx |= a[:,:,1]==n
    a[idx,1] = a[idx,0]*2
    return a

assert np.allclose(using_in1d(a),using_in(a))    
</snippet></ROW><ROW><id>8024355</id><snippet>using_in</snippet></ROW><ROW><id>8024355</id><snippet>% python -m timeit -s'import test' 'test.using_in1d(test.a)'
10000 loops, best of 3: 156 usec per loop
% python -m timeit -s'import test' 'test.using_in(test.a)'
10000 loops, best of 3: 143 usec per loop
</snippet></ROW><ROW><id>8024355</id><snippet>using_in1d</snippet></ROW><ROW><id>8024355</id><snippet>% python -m timeit -s'import test' 'test.using_in1d(test.a)'
10000 loops, best of 3: 171 usec per loop
% python -m timeit -s'import test' 'test.using_in(test.a)'
1000 loops, best of 3: 1.15 msec per loop
</snippet></ROW><ROW><id>8024651</id><snippet>unsigned int getPath(char* buffer, unsigned int size);
</snippet></ROW><ROW><id>8024651</id><snippet>const char* getPath();
</snippet></ROW><ROW><id>8024651</id><snippet>getPath()</snippet></ROW><ROW><id>8024651</id><snippet>getPath()</snippet></ROW><ROW><id>8024764</id><snippet>In [8]: import numpy as np
In [9]: A = np.array([[(0, 0), (0, 1)], [(1, 0), None]], dtype=object)

In [10]: A[1, 1] = (2, 3)

In [11]: A.shape
Out[11]: (2, 2)

In [12]: A
Out[12]: 
array([[(0, 0), (0, 1)],
       [(1, 0), (2, 3)]], dtype=object)
</snippet></ROW><ROW><id>8024764</id><snippet>&gt;&gt;&gt; A = np.array([[(0, 0), (0, 1)], [(1, 0), None]], dtype=object)
&gt;&gt;&gt; A[1][1] = (2,3)
&gt;&gt;&gt; A
array([[(0, 0), (0, 1)], [(1, 0), (2, 3)]], dtype=object)
</snippet></ROW><ROW><id>8024764</id><snippet>&gt;&gt;&gt; C = np.empty((2,2),object)
&gt;&gt;&gt; B = [[(0, 0), (0, 1)], [(1, 0), None]]
&gt;&gt;&gt; C[:] = B
&gt;&gt;&gt; C
array([[(0, 0), (0, 1)],
       [(1, 0), None]], dtype=object)
&gt;&gt;&gt; C.shape
(2, 2)
&gt;&gt;&gt; C[1,1] = (2,3)
&gt;&gt;&gt; C
array([[(0, 0), (0, 1)],
       [(1, 0), (2, 3)]], dtype=object)
</snippet></ROW><ROW><id>8024972</id><snippet>%</snippet></ROW><ROW><id>8024972</id><snippet>(old, new, sel)</snippet></ROW><ROW><id>8024972</id><snippet>%d</snippet></ROW><ROW><id>8024972</id><snippet>'OnPageChanged,  old:0, new:2, sel:4\n'
</snippet></ROW><ROW><id>8025426</id><snippet>[0]</snippet></ROW><ROW><id>8025617</id><snippet>plt.xticks(rotation=30)
</snippet></ROW><ROW><id>8025742</id><snippet>os.system('sudo -u hadoop bin/hadoop-daemon.sh stop tasktracker')
</snippet></ROW><ROW><id>8025742</id><snippet>os.system('su hadoop -c "bin/hadoop-daemon.sh stop tasktracker"')
</snippet></ROW><ROW><id>8025847</id><snippet>xrange()</snippet></ROW><ROW><id>8025847</id><snippet>range()</snippet></ROW><ROW><id>8025847</id><snippet>[1, 2, 3, ..., 20]</snippet></ROW><ROW><id>8025847</id><snippet>all()</snippet></ROW><ROW><id>8025847</id><snippet>while</snippet></ROW><ROW><id>8025847</id><snippet>for</snippet></ROW><ROW><id>8025847</id><snippet>xrange()</snippet></ROW><ROW><id>8025847</id><snippet>check_list = [11, 13, 14, 16, 17, 18, 19, 20]

def find_solution(step):
    for num in xrange(step, 999999999, step):
        if all(num % n == 0 for n in check_list):
            return num
    return None

if __name__ == '__main__':
    solution = find_solution(20)
    if solution is None:
        print "No answer found"
    else:
        print "found an answer:", solution
</snippet></ROW><ROW><id>8025847</id><snippet>find_solution()</snippet></ROW><ROW><id>8025847</id><snippet>find_solution(2520)</snippet></ROW><ROW><id>8025922</id><snippet>__del__()</snippet></ROW><ROW><id>8025922</id><snippet>__del__()</snippet></ROW><ROW><id>8026042</id><snippet>matplotlib 1.0.1 (ActivePython 2.6.7, win7 64bit)           --&gt; reproduced the behavior
matplotlib 1.1.0.dev (ActivePython 3.2.2, winXP, 32bit)     --&gt; works as expected
</snippet></ROW><ROW><id>8026541</id><snippet>conn.execute</snippet></ROW><ROW><id>8026541</id><snippet>get_some_data()</snippet></ROW><ROW><id>8026586</id><snippet>import gtk
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop

class MyDBUSObject(dbus.service.Object):
    def __init__(self, path):
        bus_name = dbus.service.BusName('org.fusegui', bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, path)

    @dbus.service.method('org.fusegui.site')
    def hello(self):
        return "Hello,World!"

DBusGMainLoop(set_as_default=True)
for i in range(0, 50):
    MyDBUSObject('/org/fusegui/sites/%i' % i)
gtk.main()
</snippet></ROW><ROW><id>8026706</id><snippet>list1</snippet></ROW><ROW><id>8026706</id><snippet>f1</snippet></ROW><ROW><id>8026706</id><snippet>def f1(list1):
    list1.append(2)
    f2(list1)
</snippet></ROW><ROW><id>8026706</id><snippet>&gt;&gt;&gt; l = [1]
&gt;&gt;&gt; f1(l)       # Modifies l in-place!
[1, 2]
&gt;&gt;&gt; l
[1, 2]
</snippet></ROW><ROW><id>8026706</id><snippet>list1</snippet></ROW><ROW><id>8026706</id><snippet>def f1(list1):
    f2(list1 + [2])
</snippet></ROW><ROW><id>8026706</id><snippet>&gt;&gt;&gt; l = [1]
&gt;&gt;&gt; f1(l)       # Leaves l alone!
[1, 2]
&gt;&gt;&gt; l
[1]
</snippet></ROW><ROW><id>8026711</id><snippet>urls = (
    '/', 'index', 
    '/login/?', 'login',
)
</snippet></ROW><ROW><id>8026711</id><snippet>/login/?</snippet></ROW><ROW><id>8026711</id><snippet>/login</snippet></ROW><ROW><id>8026711</id><snippet>/login/</snippet></ROW><ROW><id>8026827</id><snippet>"http://my.wikisite.org/w/api.php"</snippet></ROW><ROW><id>8026827</id><snippet>"http://en.wikipedia.org/w/api.php"</snippet></ROW><ROW><id>8027059</id><snippet>ie = PAMIE()</snippet></ROW><ROW><id>8027059</id><snippet>ie = PAMIE.PAMIE()</snippet></ROW><ROW><id>8027118</id><snippet>{% if request.user.is_authenticated %}</snippet></ROW><ROW><id>8027118</id><snippet>{% if user.username %}</snippet></ROW><ROW><id>8027118</id><snippet>user</snippet></ROW><ROW><id>8027118</id><snippet>def main_page(request):
  return render_to_response(
      'main_page.html',
       context_instance=RequestContext(request)
  )
</snippet></ROW><ROW><id>8027315</id><snippet>my_window.stick()</snippet></ROW><ROW><id>8027560</id><snippet>import subprocess
r = subprocess.call(['script', 'argument1', ...])
</snippet></ROW><ROW><id>8027560</id><snippet>r</snippet></ROW><ROW><id>8027560</id><snippet>open('statusfile.txt', 'w').write('%d\n' % r)
</snippet></ROW><ROW><id>8027934</id><snippet>import sys
print sys.executable
print sys.path
</snippet></ROW><ROW><id>8028329</id><snippet>App(0) &lt;-&gt; App(False) &lt;-&gt; App(redirect=False)  -&gt; output to shell (i.e stderr, stdout)
App(1) &lt;-&gt; App(True) &lt;-&gt; App(redirect=True)    -&gt; output to an application Frame
</snippet></ROW><ROW><id>8028329</id><snippet>wx.App.__doc__</snippet></ROW><ROW><id>8028329</id><snippet>sys.stdout</snippet></ROW><ROW><id>8028329</id><snippet>sys.stderr</snippet></ROW><ROW><id>8028329</id><snippet>filename</snippet></ROW><ROW><id>8028329</id><snippet>outputWindowClass</snippet></ROW><ROW><id>8028329</id><snippet>wx.App(redirect=True, filename=None, useBestVisual=False, clearSigInt=True)
</snippet></ROW><ROW><id>8028404</id><snippet>matches = re.findall('(?:^|xx)(BEGIN.*?END|.*?)(?=xx|$)', s)
</snippet></ROW><ROW><id>8028404</id><snippet>['11', '22', '33', 'BEGINxx44xx55xxEND', '66', '77']
</snippet></ROW><ROW><id>8028510</id><snippet>lpr -o landscape</snippet></ROW><ROW><id>8028510</id><snippet>savefig</snippet></ROW><ROW><id>8028510</id><snippet>from pylab import *
import numpy as np

x = np.arange(0, 10, 0.1)
y = np.sin(x)
plot(x, y)
xlabel('x')
ylabel('y')
savefig('img.eps', orientation='landscape')
</snippet></ROW><ROW><id>8028510</id><snippet>img.eps</snippet></ROW><ROW><id>8028510</id><snippet>epstopdf img.eps
</snippet></ROW><ROW><id>8028510</id><snippet>img.pdf</snippet></ROW><ROW><id>8028510</id><snippet>pylab.show()</snippet></ROW><ROW><id>8028510</id><snippet>pylab.savefig('patch.pdf')</snippet></ROW><ROW><id>8028510</id><snippet>pylab.savefig('patch.eps')</snippet></ROW><ROW><id>8028602</id><snippet>ping Nonexistentsite.com</snippet></ROW><ROW><id>8028689</id><snippet>class Meeting(models.Model):
    organizer=models.ForeignKey(User, related_name="meetings_orginizer")
    participants=models.ManyToManyField(User, related_name="meetings_participants")
</snippet></ROW><ROW><id>8028689</id><snippet>me = User.objects.get(id=0)
# Meetings I'm organising
m1 = me.meetings_orginizer.all()
# Meetings I'm participating in
m2 = me.meetings_participants.all()
</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>&gt;&gt;&gt; def foo():
    lcl = locals()
    lcl['xyz'] = 42
    print(xyz)


&gt;&gt;&gt; foo()

Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    foo()
  File "&lt;pyshell#5&gt;", line 4, in foo
    print(xyz)
NameError: global name 'xyz' is not defined
</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>globals()</snippet></ROW><ROW><id>8028772</id><snippet>d = {}
d['xyz'] = 42
print(d['xyz'])
</snippet></ROW><ROW><id>8028772</id><snippet>class C: pass

obj = C()
setattr(obj, 'xyz', 42)
print(obj.xyz)
</snippet></ROW><ROW><id>8028772</id><snippet>__slots__</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028772</id><snippet>locals</snippet></ROW><ROW><id>8028772</id><snippet>&gt;&gt;&gt; def foo():
...     abc = 123
...     lcl = zzz()
...     lcl['abc'] = 456
...     deF = 789
...     print(abc)
...     print(zzz())
...     print(lcl)
...
&gt;&gt;&gt; zzz =locals
&gt;&gt;&gt; foo()
123
{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}
{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8028772</id><snippet>locals()</snippet></ROW><ROW><id>8028839</id><snippet>{{ }}</snippet></ROW><ROW><id>8028839</id><snippet>re.sub</snippet></ROW><ROW><id>8028839</id><snippet>{{test}} paragraph {{test}}</snippet></ROW><ROW><id>8028839</id><snippet>&gt;&gt;&gt; text = """
... {{ name = name
...     prodcuer =producer
...     writer = writer 
...     language = {{english}}
...     country = USA 
... }}
... Here is text I Need This paragraph.;
... """
&gt;&gt;&gt; import re
&gt;&gt;&gt; exp = "\{\{.+\}\}"
&gt;&gt;&gt; re.sub(exp, "", text, flags=re.S | re.I).strip()
'Here is text I Need This paragraph.;'
</snippet></ROW><ROW><id>8028919</id><snippet>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; fo = open("foo.txt", "wb")
&gt;&gt;&gt; fo.write("this");
&gt;&gt;&gt; fo.close()
&gt;&gt;&gt; 
&gt;&gt;&gt; fo = open("foo.txt")
&gt;&gt;&gt; fo.read()
'this'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8028919</id><snippet>fo.write(bytes("this", 'UTF-8'))
</snippet></ROW><ROW><id>8028919</id><snippet>fo = open("foo.txt", "rb")
s2 = fo.read().decode('UTF-8')
</snippet></ROW><ROW><id>8029014</id><snippet>setuptools</snippet></ROW><ROW><id>8029014</id><snippet>easy_install</snippet></ROW><ROW><id>8029014</id><snippet>pip</snippet></ROW><ROW><id>8029014</id><snippet>site-packages</snippet></ROW><ROW><id>8029014</id><snippet>sh setuptools-0.6c11-py2.7.egg</snippet></ROW><ROW><id>8029014</id><snippet>--prefix</snippet></ROW><ROW><id>8029191</id><snippet>os.rename</snippet></ROW><ROW><id>8029191</id><snippet>with</snippet></ROW><ROW><id>8029191</id><snippet>path</snippet></ROW><ROW><id>8029191</id><snippet>os.walk</snippet></ROW><ROW><id>8029191</id><snippet>(path, new_path)</snippet></ROW><ROW><id>8029191</id><snippet>match</snippet></ROW><ROW><id>8029191</id><snippet>None</snippet></ROW><ROW><id>8029191</id><snippet>match.group</snippet></ROW><ROW><id>8029191</id><snippet>AttributeError</snippet></ROW><ROW><id>8029191</id><snippet>os.path.normpath</snippet></ROW><ROW><id>8029191</id><snippet>os.path.sep</snippet></ROW><ROW><id>8029282</id><snippet>request.url</snippet></ROW><ROW><id>8029282</id><snippet>request.GET</snippet></ROW><ROW><id>8029282</id><snippet>request.POST</snippet></ROW><ROW><id>8029282</id><snippet>request.params</snippet></ROW><ROW><id>8029301</id><snippet>Common/__init__.py</snippet></ROW><ROW><id>8029301</id><snippet>import whenver_you_put_your_env as envloc

if (envloc.env == VersionA)
    import VersionA.Package as Package
elif (envloc.env == VersionB)
    import VersionB.Package as Package
</snippet></ROW><ROW><id>8029301</id><snippet>import Common.Package
</snippet></ROW><ROW><id>8029425</id><snippet>import scipy as sc
myone = sc.ones(100)
ind = sc.random.permutation(100)[:10]
myone[ind] = 0
</snippet></ROW><ROW><id>8029517</id><snippet>wx.BoxSizer</snippet></ROW><ROW><id>8029517</id><snippet>wx.Panel</snippet></ROW><ROW><id>8029517</id><snippet>sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
</snippet></ROW><ROW><id>8029517</id><snippet>import wx

# begin wxGlade: extracode
# end wxGlade

class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = wx.CLOSE_BOX|wx.SYSTEM_MENU| wx.CAPTION
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        ------ create other widgets here ------

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetTitle("frame_2")
        self.SetMinSize((300,200))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
        ------ add other widgets or even sizers to the sizer here ------
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame1

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame1(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8029518</id><snippet>class Answer(models.Model):
    answer_text = models.CharField(...)

class Question(models.Model):
    """What all questions have in common"""
    title = models.CharField(...)
    text = models.CharField(...)
    answer = models.ForeignKey(Answer)

class PythonQuestion(Question):
    """What specifics a python question might have"""
    python_version = models.CharField(...)
</snippet></ROW><ROW><id>8029721</id><snippet>{{</snippet></ROW><ROW><id>8029721</id><snippet>}}</snippet></ROW><ROW><id>8029721</id><snippet>{{</snippet></ROW><ROW><id>8029721</id><snippet>}}</snippet></ROW><ROW><id>8029721</id><snippet>.*</snippet></ROW><ROW><id>8029721</id><snippet>?</snippet></ROW><ROW><id>8029721</id><snippet>re.search(r'(?ms).*?{{(Infobox film.*)}}', text)
</snippet></ROW><ROW><id>8029721</id><snippet>}}</snippet></ROW><ROW><id>8030224</id><snippet>def a(self,event):
    aframe = aFrame(parent=self, id=997)  # parent is the MainFrame instance self
    aframe.Centre()
    aframe.Show()
    self.Hide()                           # Hide the MainFrame instance
</snippet></ROW><ROW><id>8030224</id><snippet>class bFrame(wx.Frame):
    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, '2', size=(353,270), style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.parent = parent              # parent is the MainFrame instance (self --&gt; parent)
        self.panel = wx.Panel(self)

        mainButton = wx.Button(self.panel, -1, '&amp;Back to Main',pos=(100,100),size=(-1,30))
        self.Bind(wx.EVT_BUTTON, self.backMain,mainButton)

    def backMain (self, event):
        self.parent.Show()                # now I can show again Mainframe
        self.Destroy()
</snippet></ROW><ROW><id>8030309</id><snippet>extract()</snippet></ROW><ROW><id>8030309</id><snippet>extractall()</snippet></ROW><ROW><id>8030309</id><snippet>extractfile()</snippet></ROW><ROW><id>8030309</id><snippet>path</snippet></ROW><ROW><id>8030309</id><snippet>getmembers()</snippet></ROW><ROW><id>8030691</id><snippet>sudo port selfupdate
sudo port install python26
</snippet></ROW><ROW><id>8030835</id><snippet>groceries</snippet></ROW><ROW><id>8030835</id><snippet>def main():
    key = ''
    infile = open('shoppinglist.txt', 'r')

    count = infile.readline()
    groceries = {}

    print('This program keeps a running total of your shopping list.')
    print('Use \'EXIT\' to exit.')

    grocery = raw_input('Enter an item: ')

    for line in infile:
        line = line.strip()     #take out newlines codes.
        if key == '':
            key = line
        else:
            groceries[key] = line     #maybe use here float(line) instead
            key = ''

    print 'Your current total is %s $' % groceries[grocery]

main()
</snippet></ROW><ROW><id>8030835</id><snippet>total = 0
while True:
  grocery = input('Enter an item: ')
  if grocery == 'EXIT':
       print('Your final total is $%s' %total)
       break
  else:
       cost = groceries[grocery]
       total += cost
       print('Your current total is $%s' %total)
</snippet></ROW><ROW><id>8030838</id><snippet>def escape(s):
    isIn = False
    ret = []
    for i in range(len(s)):
        if not isIn and s[i]=="'": ret += ["""]
        else: ret += s[i:i+1]

        if isIn and s[i:i+2]=="%}": isIn = False
        if not isIn and s[i:i+2]=="{%": isIn = True

    return "".join(ret)
</snippet></ROW><ROW><id>8031226</id><snippet>[m(False) for m in lambdas]
</snippet></ROW><ROW><id>8031226</id><snippet>False</snippet></ROW><ROW><id>8031226</id><snippet>lamb = (lambda a, real_co = co : self.StartGame(8, real_co))
</snippet></ROW><ROW><id>8031226</id><snippet>False</snippet></ROW><ROW><id>8031252</id><snippet>for name, line in zip(event_list, coords_file.readlines()):
    adict.setdefault(name, []).append(line.strip())
</snippet></ROW><ROW><id>8031252</id><snippet>zip</snippet></ROW><ROW><id>8031252</id><snippet>izip</snippet></ROW><ROW><id>8031252</id><snippet>from itertools import izip

for name, line in izip(event_list, coords_file):
    # as before
</snippet></ROW><ROW><id>8031252</id><snippet>chdir</snippet></ROW><ROW><id>8031252</id><snippet>open(os.path.join(path, 'reloc_coord_complete'))</snippet></ROW><ROW><id>8031269</id><snippet>z</snippet></ROW><ROW><id>8031269</id><snippet>x, y</snippet></ROW><ROW><id>8031269</id><snippet>from operator import itemgetter
from itertools import groupby
from csv import reader


def min_z(iterable):
    # the data converted from strings to numbers
    floats = [[float(n) for n in row] for row in iterable]
    # the data sorted by x, y, z
    floats.sort(key=lambda (x, y, z, e): (x, y, z))
    # group the data by x, y
    grouped_floats = groupby(floats, key=itemgetter(slice(0, 2)))
    # return the first item from each group
    # because the data is sorted
    # the first item is the smallest z for the x, y group
    return [next(rowgroup) for xy, rowgroup in grouped_floats]


data = """-2.800000,-1.000000,5.470000,-0.26488315
-3.000000,1.000000,4.070000,-0.81185718
-2.800000,-1.000000,3.270000,1.29303723
-2.800000,-0.400000,4.870000,-0.51165026""".splitlines()


print min_z(reader(data))
</snippet></ROW><ROW><id>8031269</id><snippet>[[-3.0, 1.0, 4.07, -0.81185718], 
 [-2.8, -1.0, 3.27, 1.29303723], 
 [-2.8, -0.4, 4.87, -0.51165026]]
</snippet></ROW><ROW><id>8031704</id><snippet>en.split(' ')</snippet></ROW><ROW><id>8031704</id><snippet>en.split()</snippet></ROW><ROW><id>8031704</id><snippet>import re
print len(re.findall(r'\w+', line))
</snippet></ROW><ROW><id>8032055</id><snippet>from __future__ import division</snippet></ROW></DATA>