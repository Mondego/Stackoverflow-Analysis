<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>2439235</id><snippet>::</snippet></ROW><ROW><id>2439235</id><snippet>s = 'string'
s = s[::-1]
print s  # gnirts
</snippet></ROW><ROW><id>2439235</id><snippet>&gt;&gt;&gt; s[len(s):None:-1]  
'gnirts'
&gt;&gt;&gt; s[5:None:-1]  
'gnirts'
&gt;&gt;&gt; s[::-1]  # and of course
'gnirts'
</snippet></ROW><ROW><id>2439676</id><snippet>get_query_set</snippet></ROW><ROW><id>2439676</id><snippet>get_db_prep_lookup</snippet></ROW><ROW><id>2439710</id><snippet>parse.y</snippet></ROW><ROW><id>2439724</id><snippet>print()</snippet></ROW><ROW><id>2439724</id><snippet>1 / 0</snippet></ROW><ROW><id>2439724</id><snippet>10 / 3</snippet></ROW><ROW><id>2439724</id><snippet>%</snippet></ROW><ROW><id>2439724</id><snippet>For</snippet></ROW><ROW><id>2439724</id><snippet>For</snippet></ROW><ROW><id>2439724</id><snippet>items()</snippet></ROW><ROW><id>2439724</id><snippet>values()</snippet></ROW><ROW><id>2439724</id><snippet>keys()</snippet></ROW><ROW><id>2439724</id><snippet>for</snippet></ROW><ROW><id>2439724</id><snippet>IOErrors</snippet></ROW><ROW><id>2439724</id><snippet>strip()</snippet></ROW><ROW><id>2439724</id><snippet>lower()</snippet></ROW><ROW><id>2439724</id><snippet>split()</snippet></ROW><ROW><id>2439724</id><snippet>return</snippet></ROW><ROW><id>2439724</id><snippet>print()</snippet></ROW><ROW><id>2439724</id><snippet>print()</snippet></ROW><ROW><id>2439724</id><snippet>Try</snippet></ROW><ROW><id>2439724</id><snippet>Except</snippet></ROW><ROW><id>2439724</id><snippet>Import</snippet></ROW><ROW><id>2439724</id><snippet>print</snippet></ROW><ROW><id>2439724</id><snippet>raw_input</snippet></ROW><ROW><id>2439724</id><snippet>%</snippet></ROW><ROW><id>2439724</id><snippet>+</snippet></ROW><ROW><id>2439724</id><snippet>,</snippet></ROW><ROW><id>2439724</id><snippet>for</snippet></ROW><ROW><id>2439724</id><snippet>while</snippet></ROW><ROW><id>2439724</id><snippet>while</snippet></ROW><ROW><id>2439724</id><snippet>+=</snippet></ROW><ROW><id>2439724</id><snippet>enumerate</snippet></ROW><ROW><id>2439724</id><snippet>for</snippet></ROW><ROW><id>2439724</id><snippet>enumerate</snippet></ROW><ROW><id>2439724</id><snippet>len</snippet></ROW><ROW><id>2439724</id><snippet>fd.read</snippet></ROW><ROW><id>2439724</id><snippet>fd.realines</snippet></ROW><ROW><id>2439724</id><snippet>range</snippet></ROW><ROW><id>2439724</id><snippet>with</snippet></ROW><ROW><id>2439847</id><snippet>ModelForm</snippet></ROW><ROW><id>2439847</id><snippet>DateField</snippet></ROW><ROW><id>2439847</id><snippet>MY_DATE_FORMATS = ['%d/%m/%Y',]

class MyModelForm(forms.ModelForm):
    date = forms.DateField(input_formats=MY_DATE_FORMATS)
    class Meta:
        model = MyModel

class MyModelAdmin(admin.ModelAdmin):
    form = MyModelForm
</snippet></ROW><ROW><id>2440179</id><snippet>name</snippet></ROW><ROW><id>2440179</id><snippet>fetchone</snippet></ROW><ROW><id>2440179</id><snippet>SELECT count(*)</snippet></ROW><ROW><id>2440179</id><snippet>fetchall</snippet></ROW><ROW><id>2440179</id><snippet>fetchall</snippet></ROW><ROW><id>2440179</id><snippet>name</snippet></ROW><ROW><id>2440179</id><snippet>fetchall</snippet></ROW><ROW><id>2440179</id><snippet>[(rowid,),]</snippet></ROW><ROW><id>2440179</id><snippet>[]</snippet></ROW><ROW><id>2440179</id><snippet>rowid</snippet></ROW><ROW><id>2440179</id><snippet>fetchall</snippet></ROW><ROW><id>2440179</id><snippet>rowid</snippet></ROW><ROW><id>2440179</id><snippet>fetchone</snippet></ROW><ROW><id>2440179</id><snippet>(rowid,)</snippet></ROW><ROW><id>2440179</id><snippet>None</snippet></ROW><ROW><id>2440179</id><snippet>rowid</snippet></ROW><ROW><id>2440179</id><snippet>rowid</snippet></ROW><ROW><id>2440179</id><snippet>SELECT count(*)</snippet></ROW><ROW><id>2440179</id><snippet>(1,)</snippet></ROW><ROW><id>2440179</id><snippet>(0,)</snippet></ROW><ROW><id>2440179</id><snippet>import sqlite3
connection = sqlite3.connect(':memory:')
cursor=connection.cursor()
cursor.execute('create table components (rowid int,name varchar(50))')    
cursor.execute('insert into components values(?,?)', (1,'foo',))
</snippet></ROW><ROW><id>2440179</id><snippet>fetchall</snippet></ROW><ROW><id>2440179</id><snippet>for name in ('bar','foo'): 
    cursor.execute("SELECT rowid FROM components WHERE name = ?", (name,))
    data=cursor.fetchall()
    if len(data)==0:
        print('There is no component named %s'%name)
    else:
        print('Component %s found with rowids %s'%(name,','.join(map(str,zip(*data)[0]))))
</snippet></ROW><ROW><id>2440179</id><snippet>There is no component named bar
Component foo found with rowids 1
</snippet></ROW><ROW><id>2440179</id><snippet>fetchone</snippet></ROW><ROW><id>2440179</id><snippet>for name in ('bar','foo'): 
    cursor.execute("SELECT rowid FROM components WHERE name = ?", (name,))
    data=cursor.fetchone()
    if data is None:
        print('There is no component named %s'%name)
    else:
        print('Component %s found with rowid %s'%(name,data[0]))
</snippet></ROW><ROW><id>2440179</id><snippet>There is no component named bar
Component foo found with rowid 1
</snippet></ROW><ROW><id>2440179</id><snippet>SELECT count(*)</snippet></ROW><ROW><id>2440179</id><snippet>for name in ('bar','foo'): 
    cursor.execute("SELECT count(*) FROM components WHERE name = ?", (name,))
    data=cursor.fetchone()[0]
    if data==0:
        print('There is no component named %s'%name)
    else:
        print('Component %s found in %s row(s)'%(name,data))
</snippet></ROW><ROW><id>2440179</id><snippet>There is no component named bar
Component foo found in 1 row(s)
</snippet></ROW><ROW><id>2440183</id><snippet>304 Not Modified</snippet></ROW><ROW><id>2440583</id><snippet>__len__</snippet></ROW><ROW><id>2440583</id><snippet>__length_hint__</snippet></ROW><ROW><id>2440583</id><snippet>&gt;&gt;&gt; def foo(func, iterable):
...     return [func(i) for i in iterable]
...
&gt;&gt;&gt; import dis; dis.dis(foo)
  2           0 BUILD_LIST               0 #### build empty list
              3 DUP_TOP
              4 STORE_FAST               2 (_[1])
              7 LOAD_FAST                1 (iterable)
             10 GET_ITER
        &gt;&gt;   11 FOR_ITER                19 (to 33)
             14 STORE_FAST               3 (i)
             17 LOAD_FAST                2 (_[1])
             20 LOAD_FAST                0 (func)
             23 LOAD_FAST                3 (i)
             26 CALL_FUNCTION            1
             29 LIST_APPEND      #### stack[-2].append(stack[-1]); pop()
             30 JUMP_ABSOLUTE           11
        &gt;&gt;   33 DELETE_FAST              2 (_[1])
             36 RETURN_VALUE
</snippet></ROW><ROW><id>2440583</id><snippet>&gt;&gt;&gt; def bar(func, iterable):
...     return [func(i) for i in iterable if i]
...
&gt;&gt;&gt; import dis; dis.dis(bar)
  2           0 BUILD_LIST               0
              3 DUP_TOP
              4 STORE_FAST               2 (_[1])
              7 LOAD_FAST                1 (iterable)
             10 GET_ITER
        &gt;&gt;   11 FOR_ITER                30 (to 44)
             14 STORE_FAST               3 (i)
             17 LOAD_FAST                3 (i)
             20 JUMP_IF_FALSE           17 (to 40)
             23 POP_TOP
             24 LOAD_FAST                2 (_[1])
             27 LOAD_FAST                0 (func)
             30 LOAD_FAST                3 (i)
             33 CALL_FUNCTION            1
             36 LIST_APPEND
             37 JUMP_ABSOLUTE           11
        &gt;&gt;   40 POP_TOP
             41 JUMP_ABSOLUTE           11
        &gt;&gt;   44 DELETE_FAST              2 (_[1])
             47 RETURN_VALUE
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2440583</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def comprehension(f, iterable): return [f(i) for i in iterable]
...
&gt;&gt;&gt; dis.dis(comprehension)
  1           0 LOAD_CLOSURE             0 (f)
              3 BUILD_TUPLE              1
              6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x00C4B8D
8, file "&lt;stdin&gt;", line 1&gt;)
              9 MAKE_CLOSURE             0
             12 LOAD_FAST                1 (iterable)
             15 GET_ITER
             16 CALL_FUNCTION            1
             19 RETURN_VALUE
&gt;&gt;&gt; dis.dis(comprehension.__code__.co_consts[1])
  1           0 BUILD_LIST               0
              3 LOAD_FAST                0 (.0)
        &gt;&gt;    6 FOR_ITER                18 (to 27)
              9 STORE_FAST               1 (i)
             12 LOAD_DEREF               0 (f)
             15 LOAD_FAST                1 (i)
             18 CALL_FUNCTION            1
             21 LIST_APPEND              2
             24 JUMP_ABSOLUTE            6
        &gt;&gt;   27 RETURN_VALUE
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2440583</id><snippet>list.extend(iterable)</snippet></ROW><ROW><id>2440583</id><snippet>iterable</snippet></ROW><ROW><id>2440583</id><snippet>list.append(object)</snippet></ROW><ROW><id>2440690</id><snippet>mod_fastcgi</snippet></ROW><ROW><id>2440786</id><snippet>('%f' % x).rstrip('0').rstrip('.')</snippet></ROW><ROW><id>2440786</id><snippet>%g</snippet></ROW><ROW><id>2440786</id><snippet>%g</snippet></ROW><ROW><id>2440802</id><snippet>telnetlib</snippet></ROW><ROW><id>2440802</id><snippet>socket.create_connection</snippet></ROW><ROW><id>2440802</id><snippet>socket</snippet></ROW><ROW><id>2440802</id><snippet>socket</snippet></ROW><ROW><id>2440802</id><snippet>create_connection</snippet></ROW><ROW><id>2440802</id><snippet>create_connection</snippet></ROW><ROW><id>2441030</id><snippet>import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore", DeprecationWarning)
    import MySQLdb
[...]
</snippet></ROW><ROW><id>2441184</id><snippet>py2exe is a Python Distutils extension which converts Python scripts 
into executable Windows programs, able to run without requiring a 
Python installation
</snippet></ROW><ROW><id>2441373</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import division

import sys
import gobject
gobject.threads_init()
import pygst
pygst.require("0.10")
import gst
d = gst.parse_launch("filesrc name=source ! decodebin2 ! fakesink")
source = d.get_by_name("source")
source.set_property("location", sys.argv[1])
d.set_state(gst.STATE_PLAYING)
d.get_state()
format = gst.Format(gst.FORMAT_TIME)
duration = d.query_duration(format)[0]
d.set_state(gst.STATE_NULL)

import datetime
delta = datetime.timedelta(seconds=(duration / gst.SECOND))
print delta
</snippet></ROW><ROW><id>2441373</id><snippet>$ python duration.py VIDEO_TS/VTS_03_1.VOB
0:20:10.528000
$ python duration.py ~/Movies/BigBuckBunny_640x360.m4v
0:09:56.461667
</snippet></ROW><ROW><id>2441559</id><snippet>class MainHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        http = tornado.httpclient.AsyncHTTPClient()
        http.fetch("http://friendfeed-api.com/v2/feed/bret",
               callback=self.async_callback(self.on_response))

    def on_response(self, response):
        if response.error: raise tornado.web.HTTPError(500)
        json = tornado.escape.json_decode(response.body)
        self.write("Fetched " + str(len(json["entries"])) + " entries "
                   "from the FriendFeed API")
        self.finish()
</snippet></ROW><ROW><id>2441783</id><snippet>ALTER TABLE `appname_books` ADD COLUMN `user_id` INTEGER NOT NULL UNIQUE;
ALTER TABLE `appname_books` ADD CONSTRAINT `user_id_refs_user` FOREIGN KEY (`user_id`) REFERENCES auth_user (`id`);
</snippet></ROW><ROW><id>2442013</id><snippet>Y = [x.v for x in X]
</snippet></ROW><ROW><id>2442037</id><snippet>repr()</snippet></ROW><ROW><id>2442037</id><snippet>ascii()</snippet></ROW><ROW><id>2442037</id><snippet>prompt&gt;\python26\python -c "print repr(open('report.csv','rb').read()[:300])"
'\xff\xfeW\x00e\x00b\x00 \x00S\x00e\x00a\x00r\x00c\x00h\x00 \x00I\x00n\x00t\x00e
\x00r\x00e\x00s\x00t\x00:\x00 \x00f\x00o\x00o\x00b\x00a\x00r\x00\r\x00\n\x00W\x0
[snip]
x001\x007\x00\t\x004\x004\x00\r\x00\n\x002\x000\x00'
</snippet></ROW><ROW><id>2442037</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; lines = list(codecs.open('report.csv', 'r', encoding='UTF-16'))
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(lines[:8])
[u'Web Search Interest: foobar\r\n',
 u'Worldwide; 2004 - present\r\n',
 u'\r\n',
 u'Interest over time\r\n',
 u'Week\tfoobar\r\n',
 u'2004-01-04 - 2004-01-10\t44\r\n',
 u'2004-01-11 - 2004-01-17\t44\r\n',
 u'2004-01-18 - 2004-01-24\t37\r\n']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2442037</id><snippet>\n</snippet></ROW><ROW><id>2442037</id><snippet>\r\n</snippet></ROW><ROW><id>2442279</id><snippet>for x in os.listdir(dir):
    if x.endswith(fext):
        filename = os.path.join(dir, x)
        # do your stuff here
</snippet></ROW><ROW><id>2442589</id><snippet>&gt;&gt;&gt; a
[[(1L,)], [(2L,)], [(3L,)], [(4L,)], [(5L,)]]
&gt;&gt;&gt; a = [[x[0][0]] for x in a]
&gt;&gt;&gt; a
[[1L], [2L], [3L], [4L], [5L]]
</snippet></ROW><ROW><id>2442655</id><snippet>L[:] = [el for el in L if el != 3]
</snippet></ROW><ROW><id>2442655</id><snippet>L[:]</snippet></ROW><ROW><id>2442655</id><snippet>&gt;&gt;&gt; ndel = 0
&gt;&gt;&gt; for i, el in enumerate(list(L)):
...    if el==3:
...      del L[i-ndel]
...      ndel += 1
</snippet></ROW><ROW><id>2442655</id><snippet>for i in reversed(range(len(L))):
  if L[i] == 3: del L[i]
</snippet></ROW><ROW><id>2442655</id><snippet>reversed</snippet></ROW><ROW><id>2442655</id><snippet>reversed(range(...</snippet></ROW><ROW><id>2442655</id><snippet>reversed</snippet></ROW><ROW><id>2442655</id><snippet>for i in range(len(L) - 1, -1, -1):
</snippet></ROW><ROW><id>2442733</id><snippet>&gt;</snippet></ROW><ROW><id>2442733</id><snippet>def stringfor(command, data, accesskey='\0'*6, tid=1):
  length = 16 + len(data)
  prefix = struct.pack('&gt;BBIBB6s', 6, 2, length, tid, command, accesskey)
  checksum = sum(ord(c) for c in prefix) &amp;0xFF
  return prefix + chr(checksum) + chr(3)
</snippet></ROW><ROW><id>2442899</id><snippet>$Revision$</snippet></ROW><ROW><id>2442899</id><snippet>THEOPTION = 10
</snippet></ROW><ROW><id>2442999</id><snippet>.features(0)</snippet></ROW><ROW><id>2442999</id><snippet>.features[0]</snippet></ROW><ROW><id>2442999</id><snippet>def wrap(datum):
  # don't wrap strings
  if isinstance(datum, basestring):
    return datum
  # don't wrap numbers, either
  try: return datum + 0
  except TypeError: pass
  return Fourie(datum)

class Fourie(object):
  def __init__(self, data):
    self._data = data
  def __getattr__(self, n):
    return wrap(self._data[n])
  def __call__(self, n):
    return wrap(self._data[n])
</snippet></ROW><ROW><id>2442999</id><snippet>x = wrap(x['product'])</snippet></ROW><ROW><id>2442999</id><snippet>x.product.features(0).size</snippet></ROW><ROW><id>2442999</id><snippet>features[0]</snippet></ROW><ROW><id>2442999</id><snippet>features(0)</snippet></ROW><ROW><id>2442999</id><snippet>  def __getitem__(self, n):
    return wrap(self._data[n])
</snippet></ROW><ROW><id>2442999</id><snippet>__getitem__</snippet></ROW><ROW><id>2442999</id><snippet>__call__</snippet></ROW><ROW><id>2442999</id><snippet>Fourie</snippet></ROW><ROW><id>2443036</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([1, 2, 'a'], dtype=object) # makes type of array what you need
&gt;&gt;&gt; numpy.equal(a, None)
array([False, False, False], dtype=bool)
</snippet></ROW><ROW><id>2443036</id><snippet>[item is None for item in [1, 2, 'a']]</snippet></ROW><ROW><id>2443056</id><snippet>guess</snippet></ROW><ROW><id>2443056</id><snippet>any()</snippet></ROW><ROW><id>2443056</id><snippet>hasfactors = any(guess % n == 0 for n in numbers)
</snippet></ROW><ROW><id>2443056</id><snippet>all()</snippet></ROW><ROW><id>2443056</id><snippet>isprime()</snippet></ROW><ROW><id>2443056</id><snippet>onlyprimes = all(isprime(n) for n in numbers)
</snippet></ROW><ROW><id>2443260</id><snippet>itertools.chain</snippet></ROW><ROW><id>2443260</id><snippet>import itertools

def my_generator():
    yield 1
    yield 2

for i in itertools.chain(my_generator(), [5]):
    print i
</snippet></ROW><ROW><id>2443260</id><snippet>1
2
5
</snippet></ROW><ROW><id>2443296</id><snippet>select.select</snippet></ROW><ROW><id>2443296</id><snippet>select.select</snippet></ROW><ROW><id>2443296</id><snippet>asyncore</snippet></ROW><ROW><id>2443296</id><snippet>asynchat</snippet></ROW><ROW><id>2443296</id><snippet>twisted</snippet></ROW><ROW><id>2443296</id><snippet>select</snippet></ROW><ROW><id>2443323</id><snippet>arg=None</snippet></ROW><ROW><id>2443323</id><snippet>None</snippet></ROW><ROW><id>2443323</id><snippet>class Foo:
    sentinel = {}
    def bar(self, arg=sentinel):
        if arg is self.sentinel:
            print "You didn't supply an argument!"
        else:
            print "The argument was", arg

f = Foo()
f.bar(123)
f.bar()
f.bar(None)
f.bar({})
</snippet></ROW><ROW><id>2443323</id><snippet>Foo.sentinel</snippet></ROW><ROW><id>2443323</id><snippet>Foo.sentinel</snippet></ROW><ROW><id>2443323</id><snippet>x is Foo.sentinel</snippet></ROW><ROW><id>2443323</id><snippet>Foo.sentinel</snippet></ROW><ROW><id>2443323</id><snippet>Foo.sentinel</snippet></ROW><ROW><id>2443559</id><snippet>item.title()</snippet></ROW><ROW><id>2443559</id><snippet>except</snippet></ROW><ROW><id>2443559</id><snippet>item</snippet></ROW><ROW><id>2443559</id><snippet>title</snippet></ROW><ROW><id>2443559</id><snippet>self.title = getattr(item, 'title', lambda: None)()
</snippet></ROW><ROW><id>2443559</id><snippet>self.title()</snippet></ROW><ROW><id>2443559</id><snippet>self.title().content.string</snippet></ROW><ROW><id>2443559</id><snippet>AttributeError</snippet></ROW><ROW><id>2443559</id><snippet>except</snippet></ROW><ROW><id>2443748</id><snippet>communicate</snippet></ROW><ROW><id>2443748</id><snippet>EOF</snippet></ROW><ROW><id>2443748</id><snippet>EOF</snippet></ROW><ROW><id>2443748</id><snippet>stdin</snippet></ROW><ROW><id>2443748</id><snippet>stdout</snippet></ROW><ROW><id>2443748</id><snippet>communicate</snippet></ROW><ROW><id>2443770</id><snippet>class FactoryMetaclassObject(type):
    def __init__(cls, name, bases, attrs):
        """__init__ will happen when the metaclass is constructed: 
        the class object itself (not the instance of the class)"""
        pass

    def __call__(*args, **kw):
        """
        __call__ will happen when an instance of the class (NOT metaclass)
        is instantiated. For example, We can add instance methods here and they will
        be added to the instance of our class and NOT as a class method
        (aka: a method applied to our instance of object).

        Or, if this metaclass is used as a factory, we can return a whole different
        classes' instance

        """
        return "hello world!"

class FactorWorker(object):
  __metaclass__ = FactoryMetaclassObject

f = FactorWorker()
print f.__class__
</snippet></ROW><ROW><id>2444219</id><snippet>listen</snippet></ROW><ROW><id>2444219</id><snippet>try</snippet></ROW><ROW><id>2444219</id><snippet>except socket.timeout:</snippet></ROW><ROW><id>2444219</id><snippet>select.select</snippet></ROW><ROW><id>2444399</id><snippet>&gt;&gt;&gt; array = ['ca', 'bd', 'ac', 'ab']
&gt;&gt;&gt; order = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; sorted(array, key=lambda v:map(order.index,v))
['ab', 'ac', 'bd', 'ca']

&gt;&gt;&gt; order = ['b', 'a', 'c', 'd']
&gt;&gt;&gt; sorted(array, key=lambda v:map(order.index,v))
['bd', 'ab', 'ac', 'ca']

&gt;&gt;&gt; order = ['d', 'c', 'b', 'a']
&gt;&gt;&gt; sorted(array, key=lambda v:map(order.index,v))
['ca', 'bd', 'ac', 'ab']
</snippet></ROW><ROW><id>2444399</id><snippet>map</snippet></ROW><ROW><id>2444399</id><snippet>order.index</snippet></ROW><ROW><id>2444399</id><snippet>v</snippet></ROW><ROW><id>2444399</id><snippet>v</snippet></ROW><ROW><id>2444399</id><snippet>array</snippet></ROW><ROW><id>2444399</id><snippet>&gt;&gt;&gt; order = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; map(order.index,array[0])
[2, 0]
&gt;&gt;&gt; map(order.index,array[1])
[1, 3]
&gt;&gt;&gt; map(order.index,array[2])
[0, 2]
&gt;&gt;&gt; map(order.index,array[3])
[0, 1]
</snippet></ROW><ROW><id>2444399</id><snippet>key=</snippet></ROW><ROW><id>2444483</id><snippet>socket.listen(backlog)</snippet></ROW><ROW><id>2444559</id><snippet>line = linecache.getline(thefilename, 33)
</snippet></ROW><ROW><id>2444559</id><snippet>linecache</snippet></ROW><ROW><id>2444638</id><snippet>ioff()
</snippet></ROW><ROW><id>2444689</id><snippet>threadstop</snippet></ROW><ROW><id>2444689</id><snippet>True</snippet></ROW><ROW><id>2444689</id><snippet>True</snippet></ROW><ROW><id>2444715</id><snippet>items = sorted(dictionary.items())</snippet></ROW><ROW><id>2444922</id><snippet>import thread, time

def timer():
    while True:
        time.sleep(1)
        # do something here

thread.start_new_thread(timer, ())
</snippet></ROW><ROW><id>2444942</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; A = numpy.array(((1,2),(3,4)))
&gt;&gt;&gt; idx = (0,0)
&gt;&gt;&gt; A[idx]
1
</snippet></ROW><ROW><id>2445233</id><snippet>def increase(first, second):</snippet></ROW><ROW><id>2445233</id><snippet>increase</snippet></ROW><ROW><id>2445233</id><snippet>first</snippet></ROW><ROW><id>2445233</id><snippet>second</snippet></ROW><ROW><id>2445233</id><snippet>increase</snippet></ROW><ROW><id>2445233</id><snippet>return first + second</snippet></ROW><ROW><id>2445233</id><snippet>increase('foo', 'bar')</snippet></ROW><ROW><id>2445233</id><snippet>'foobar'</snippet></ROW><ROW><id>2445233</id><snippet>increase(23, 45)</snippet></ROW><ROW><id>2445233</id><snippet>68</snippet></ROW><ROW><id>2445618</id><snippet>gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -r100 -sOutputFile=out.png in.pdf</snippet></ROW><ROW><id>2445847</id><snippet>ForeignKey</snippet></ROW><ROW><id>2445847</id><snippet>unique=True</snippet></ROW><ROW><id>2445944</id><snippet>/usr/share/doc/python-qt4-doc/examples</snippet></ROW><ROW><id>2445967</id><snippet>is_staff</snippet></ROW><ROW><id>2445967</id><snippet>is_authenticated</snippet></ROW><ROW><id>2445967</id><snippet>is_authenticated</snippet></ROW><ROW><id>2446071</id><snippet>$1</snippet></ROW><ROW><id>2446071</id><snippet>$2</snippet></ROW><ROW><id>2446071</id><snippet>"I have 1 banana and 2 apples!".replace(/(banana|apple)/gi, "&lt;b&gt;$1&lt;/b&gt;");
</snippet></ROW><ROW><id>2446549</id><snippet>#!/usr/bin/env python
import datetime, fileinput, re

for line in fileinput.input():
    if 'FILED AS OF DATE' in line:
       line = line.rstrip()
       dt = datetime.datetime.strptime(line, 'FILED AS OF DATE:       %Y%m%d')

       # or with regex
       date_str, = re.findall(r'\d+', line)
       dt = datetime.datetime.strptime(date_str, '%Y%m%d')

       print dt.date()
</snippet></ROW><ROW><id>2446549</id><snippet>$ ./finddate.py input.txt
</snippet></ROW><ROW><id>2446549</id><snippet>2009-02-09
</snippet></ROW><ROW><id>2447007</id><snippet>import time

def my_time():
    return 0.0

old_time = time.time
time.time = my_time
</snippet></ROW><ROW><id>2447160</id><snippet>close()</snippet></ROW><ROW><id>2447474</id><snippet>import rpy2.robjects.numpy2ri
rpy2.robjects.numpy2ri.activate()
</snippet></ROW><ROW><id>2447482</id><snippet>from django.contrib.gis.db import models

class User(models.Model):
    location = models.PointField()
    objects = models.GeoManager()
</snippet></ROW><ROW><id>2447482</id><snippet>User.objects.filter(location__dwithin=(current_user.location, D(m=500)))
</snippet></ROW><ROW><id>2447961</id><snippet>cdef double a[] = [0.5, 0.3, 0.1, 0.1]
</snippet></ROW><ROW><id>2448539</id><snippet>node = api.item_lookup(...)
from lxml import etree
print etree.tostring(node, pretty_print=True)
</snippet></ROW><ROW><id>2448541</id><snippet>def __getattribute__(self, name):</snippet></ROW><ROW><id>2448541</id><snippet>def __getattr__(self, name):</snippet></ROW><ROW><id>2448541</id><snippet>PureProxy</snippet></ROW><ROW><id>2448541</id><snippet>__getattribute__</snippet></ROW><ROW><id>2448541</id><snippet>setattr(self, name, ...</snippet></ROW><ROW><id>2448541</id><snippet>__getattr__</snippet></ROW><ROW><id>2448541</id><snippet>setattr</snippet></ROW><ROW><id>2448541</id><snippet>object.__getattribute__(self, "underlying")</snippet></ROW><ROW><id>2448541</id><snippet>self.underlying</snippet></ROW><ROW><id>2448541</id><snippet>__getattribute__</snippet></ROW><ROW><id>2448541</id><snippet>enumerate</snippet></ROW><ROW><id>2448541</id><snippet>print</snippet></ROW><ROW><id>2448603</id><snippet>import ctypes
print ctypes.windll.shell32.IsUserAnAdmin()
</snippet></ROW><ROW><id>2448930</id><snippet>Ship.__table__.columns</snippet></ROW><ROW><id>2448930</id><snippet>Ship.__table__.foreign_keys</snippet></ROW><ROW><id>2448930</id><snippet>Ship.__table__.constraints</snippet></ROW><ROW><id>2448930</id><snippet>Ship.__table__.indexes</snippet></ROW><ROW><id>2448969</id><snippet>AS_IF</snippet></ROW><ROW><id>2448969</id><snippet>if test</snippet></ROW><ROW><id>2448969</id><snippet>AS_IF([test "x${HAVE_PYMOD_JSON}" = "xno"], 
    AS_IF([test "x${HAVE_PYMOD_SIMPLEJSON}" = "xno"],
        [AC_MSG_ERROR([Requires one of json or simplejson])]))
</snippet></ROW><ROW><id>2448969</id><snippet>#define</snippet></ROW><ROW><id>2449126</id><snippet>amount</snippet></ROW><ROW><id>2449126</id><snippet>q = session.query(Transaction,
                  case([(Transaction.transfer_account_id==1, -1*Transaction.amount)], else_=Transaction.amount).label('special_amount')
                  )
q = q.filter(or_(Transaction.account_id==1, Transaction.transfer_account_id==1))
</snippet></ROW><ROW><id>2449126</id><snippet>Transaction</snippet></ROW><ROW><id>2449126</id><snippet>tuple(Transaction, Decimal)</snippet></ROW><ROW><id>2449126</id><snippet>case when ...</snippet></ROW><ROW><id>2449126</id><snippet>WHERE</snippet></ROW><ROW><id>2449126</id><snippet>case when ...</snippet></ROW><ROW><id>2449126</id><snippet>@property
def special_amount(self):
    return -self.amount if self.transfer_account_id == 1 else self.amount
</snippet></ROW><ROW><id>2449126</id><snippet>@special_amount.setter
def special_amount(self, value):
    if self.transfer_account_id is None:
        raise Exception('Cannot decide on special handling, because transfer_account_id is not set')
    self.amount = -value if self.transfer_account_id == 1 else value
</snippet></ROW><ROW><id>2449126</id><snippet>or_</snippet></ROW><ROW><id>2449126</id><snippet>q = session.query(Transaction).filter(
    or_(Transaction.account_id==1, 
        Transaction.transfer_account_id==1)
)

# then get your results with the proper amount sign:
for t in q.all():
    print q.id, q.special_amount
</snippet></ROW><ROW><id>2449301</id><snippet>os.system</snippet></ROW><ROW><id>2449301</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2449301</id><snippet>import subprocess
proc=subprocess.Popen('echo "to stdout"', shell=True, stdout=subprocess.PIPE, )
output=proc.communicate()[0]
print output
</snippet></ROW><ROW><id>2449526</id><snippet>Book.read = column_property(
        select(
            [func.count(user_to_book_table.c.user_id)],
            user_to_book_table.c.book_id == book_table.c.id
        ).label('read')
    )
</snippet></ROW><ROW><id>2449526</id><snippet>if mybook.read:
    print 'very popular book indeed'
</snippet></ROW><ROW><id>2449526</id><snippet>@property
def read(self):
    return len(self.books)!=0
</snippet></ROW><ROW><id>2449797</id><snippet>if request.method=='POST':
  PrimaryFunctionFormSet = inlineformset_factory(Position,Function)
  if 'add' in request.POST:
    cp = request.POST.copy()
    cp['prim-TOTAL_FORMS'] = int(cp['prim-TOTAL_FORMS'])+ 1
    prims = PrimaryFunctionFormSet(cp,prefix='prim')
</snippet></ROW><ROW><id>2449985</id><snippet>re</snippet></ROW><ROW><id>2449985</id><snippet>input = '17k, 14.05m, 1.235b'

multipliers = { 'k': 1e3,
                'm': 1e6,
                'b': 1e9,
              }

pattern = r'([0-9.]+)([bkm])'

for number, suffix in re.findall(pattern, input):
    number = float(number)
    print number * multipliers[suffix]
</snippet></ROW><ROW><id>2450296</id><snippet>$ python3
Python 3.1.1+ (r311:74480, Nov  2 2009, 14:49:22) 
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; '{0} is not'.format('That that is not')
'That that is not is not'
</snippet></ROW><ROW><id>2450296</id><snippet>$ python2.5
Python 2.5.4 (r254:67916, Jan 20 2010, 21:44:03) 
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; '{0} is not'.format('That that is not')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'format'
</snippet></ROW><ROW><id>2450773</id><snippet>Unprotect</snippet></ROW><ROW><id>2450773</id><snippet>import win32com.client

excel = win32com.client.Dispatch('Excel.Application')

workbook = excel.Workbooks.open(r'c:\mybook.xls', 'password')

workbook.SaveAs('unencrypted.xls')
</snippet></ROW><ROW><id>2451064</id><snippet>onTimer(self)</snippet></ROW><ROW><id>2451393</id><snippet>&gt;&gt;&gt; 0^0
0
&gt;&gt;&gt; 1^1
0
&gt;&gt;&gt; 1^0
1
&gt;&gt;&gt; 0^1
1
</snippet></ROW><ROW><id>2451393</id><snippet>&gt;&gt;&gt; 8^3
11
</snippet></ROW><ROW><id>2451473</id><snippet>&lt;li&gt;&lt;img src="{{MEDIA_URL}}/160.jpg" /&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>2451473</id><snippet>'http://some-good-URL/galleries/160.jpg'</snippet></ROW><ROW><id>2451473</id><snippet>'django.core.context_processors.media'</snippet></ROW><ROW><id>2451473</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>2451473</id><snippet>if settings.DEBUG:
# Serve static files in debug.
urlpatterns += patterns('',
    (r'^site_media/(?P&lt;path&gt;.*)$', 'django.views.static.serve',
    {'document_root': settings.MEDIA_ROOT,
    'show_indexes' : True}),
)
</snippet></ROW><ROW><id>2451476</id><snippet>del</snippet></ROW><ROW><id>2451751</id><snippet>bitmap = wx.EmptyBitmap(w, h)
dc = wx.MemoryDC(bitmap)
</snippet></ROW><ROW><id>2451825</id><snippet>text = raw_input("please give 2 numbers to multiply separated with a comma:")
split_text = text.split(',')
a = int(split_text[0])
b = int(split_text[1])
# The last three lines could be written: a, b = map(int, text.split(','))
# but you may find the code I used a bit easier to understand for now.

if b &gt; 0:
    num_times = b
else:
    num_times = -b

total = 0
# While loops with counters basically should not be used, so I replaced the loop 
# with a for loop. Using a while loop at all is rare.
for i in xrange(num_times):
    total += a 
    # We do this a times, giving us total == a * abs(b)

if b &lt; 0:
    # If b is negative, adjust the total to reflect this.
    total = -total

print total
</snippet></ROW><ROW><id>2451825</id><snippet>a * b
</snippet></ROW><ROW><id>2451826</id><snippet>print '&lt;a href="%(url)s"&gt;%(url)s&lt;/a&gt;' % {'url': my_url}
</snippet></ROW><ROW><id>2452082</id><snippet>field</snippet></ROW><ROW><id>2452082</id><snippet>form</snippet></ROW><ROW><id>2452082</id><snippet>@register.filter
def alignboxes(boxes, cls):

    r = ""
    i = 0
    for box in boxes.field.choices.queryset:
        checked = "checked=checked" if i in boxes.form.initial[boxes.name] else ""
        r += "&lt;label for=\"id_%s_%d\" class=\"%s\"&gt;&lt;input type=\"checkbox\" name=\"%s\" value=\"%s\" id=\"id_%s_%d\" %s /&gt; %s&lt;/label&gt;\n" % (
            boxes.name,
            i,
            cls,
            boxes.name,
            box.pk,
            boxes.name,
            i,
            checked,
            box.name
        )
        i = i + 1

    return r
</snippet></ROW><ROW><id>2452082</id><snippet>checked</snippet></ROW><ROW><id>2452082</id><snippet>boxes.form.initial[boxes.name]</snippet></ROW><ROW><id>2452108</id><snippet>L = [([1, 2, 3], 4), ([5, 6, 7], 8)]
element = [5, 6, 7]

for a, b in L:
  if a == element:
    print b
    break
else:
  print "not found"
</snippet></ROW><ROW><id>2452108</id><snippet>L = [([1, 2, 3], 4), ([5, 6, 7], 8)]
element = [5, 6, 7]

D = dict((tuple(a), b) for a, b in L)
# keys must be hashable: list is not, but tuple is
# or you could just build the dict directly:
#D = {(1,2,3): 4, (5,6,7): 8}

v = D.get(tuple(element))
if v is not None:
  print v
else:
  print "not found"
</snippet></ROW><ROW><id>2452203</id><snippet>client.token_store.add_token(sessionToken)
</snippet></ROW><ROW><id>2452331</id><snippet>d[1, 1]</snippet></ROW><ROW><id>2452331</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2452342</id><snippet>x^y</snippet></ROW><ROW><id>2452342</id><snippet>x^y</snippet></ROW><ROW><id>2452342</id><snippet>x^y</snippet></ROW><ROW><id>2452342</id><snippet>x</snippet></ROW><ROW><id>2452342</id><snippet>y</snippet></ROW><ROW><id>2452342</id><snippet>x</snippet></ROW><ROW><id>2452342</id><snippet>x^y</snippet></ROW><ROW><id>2452342</id><snippet>x, y = y, x
</snippet></ROW><ROW><id>2452639</id><snippet>route('/hello')
</snippet></ROW><ROW><id>2452639</id><snippet>bottle.default_app()
</snippet></ROW><ROW><id>2452639</id><snippet>from bottle import route</snippet></ROW><ROW><id>2452639</id><snippet>from bottle import *</snippet></ROW><ROW><id>2452639</id><snippet>import bottle</snippet></ROW><ROW><id>2452639</id><snippet>from foo import bar</snippet></ROW><ROW><id>2452639</id><snippet>bar</snippet></ROW><ROW><id>2452746</id><snippet>all_clubs</snippet></ROW><ROW><id>2452746</id><snippet>all_clubs[clubname]</snippet></ROW><ROW><id>2452746</id><snippet>club_names</snippet></ROW><ROW><id>2452746</id><snippet>clubs</snippet></ROW><ROW><id>2452746</id><snippet>class Player(object):
    # ...

    @property
    def clubs(self):
        result = []
        for name in self.club_names:
            result.append(all_clubs.get(name))
        return result
</snippet></ROW><ROW><id>2452779</id><snippet>compress</snippet></ROW><ROW><id>2452779</id><snippet>encrypt</snippet></ROW><ROW><id>2452779</id><snippet>from pyDes import *
import bz2

def encrypt(data,password):
    k = des(password, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
    d = k.encrypt(data)
    return d

def decrypt(data,password):
    k = des(password, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
    d = k.decrypt(data)
    return d

password = "eight222" # password length should be 8

data = '''
&lt;?xml version="1.0"?&gt;
  &lt;library&gt;
   &lt;shelf id="fiction"&gt;
    &lt;book&gt;
     &lt;title&gt;Of Mice and Men&lt;/title&gt;
     &lt;author&gt;John Steinbeck&lt;/author&gt;
    &lt;/book&gt;
    &lt;book&gt;
     &lt;title&gt;Harry Potter and the Philosopher's Stone&lt;/title&gt;
     &lt;author&gt;J.K. Rowling&lt;/author&gt;
    &lt;/book&gt;
   &lt;/shelf&gt;
  &lt;/library&gt; 
'''

print len(data)

compressed_data = bz2.compress(data)
print len(compressed_data)

encrypted_data = encrypt(compressed_data,password)

print "%r"%encrypted_data

uncompressed_encrypted_data = encrypt(data,password)

print len(encrypted_data)
print len(uncompressed_encrypted_data)
print bz2.decompress(decrypt(encrypted_data,password))
</snippet></ROW><ROW><id>2452862</id><snippet>a op b op c
</snippet></ROW><ROW><id>2452862</id><snippet>(a op b) and (b op c)
</snippet></ROW><ROW><id>2452862</id><snippet>in</snippet></ROW><ROW><id>2452862</id><snippet>==</snippet></ROW><ROW><id>2452862</id><snippet>is</snippet></ROW><ROW><id>2452862</id><snippet>1 in [1] == True  # -&gt; (1 in [1]) and ([1] == True) -&gt; True and False -&gt; False
</snippet></ROW><ROW><id>2452991</id><snippet>#try a function
def func_tim():
    bob = True
    while bob == True:
        #define vars
        a = int(input('Please insert a number: '))
        b = int(input('Please insert a second number: '))

        if a == b:
            print('nice and equal')
            bob = False
        elif b &gt; a:
             print('b is picking on a!')
        else:
            print('a is picking on b!')
#call a function
func_tim()
</snippet></ROW><ROW><id>2453027</id><snippet># -*- coding: utf8 -*- 
gsm = (u"@£$¥èéùìòÇ\nØø\rÅåΔ_ΦΓΛΩΠΨΣΘΞ\x1bÆæßÉ !\"#¤%&amp;'()*+,-./0123456789:;&lt;=&gt;"
       u"?¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ`¿abcdefghijklmnopqrstuvwxyzäöñüà")
ext = (u"````````````````````^```````````````````{}`````\\````````````[~]`"
       u"|````````````````````````````````````€``````````````````````````")

def gsm_encode(plaintext):
    res = ""
    for c in plaintext:
        idx = gsm.find(c)
        if idx != -1:
            res += chr(idx)
            continue
        idx = ext.find(c)
        if idx != -1:
            res += chr(27) + chr(idx)
    return res.encode('hex')

print gsm_encode(u"Hello World")
</snippet></ROW><ROW><id>2453027</id><snippet># -*- coding: utf8 -*- 
import binascii
gsm = ("@£$¥èéùìòÇ\nØø\rÅåΔ_ΦΓΛΩΠΨΣΘΞ\x1bÆæßÉ !\"#¤%&amp;'()*+,-./0123456789:;&lt;=&gt;?"
       "¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ`¿abcdefghijklmnopqrstuvwxyzäöñüà")
ext = ("````````````````````^```````````````````{}`````\\````````````[~]`"
       "|````````````````````````````````````€``````````````````````````")

def gsm_encode(plaintext):
    res = ""
    for c in plaintext:
        idx = gsm.find(c);
        if idx != -1:
            res += chr(idx)
            continue
        idx = ext.find(c)
        if idx != -1:
            res += chr(27) + chr(idx)
    return binascii.b2a_hex(res.encode('utf-8'))

print(gsm_encode("Hello World"))
</snippet></ROW><ROW><id>2453455</id><snippet>PanType</snippet></ROW><ROW><id>2453492</id><snippet>ColorDB.nearest()</snippet></ROW><ROW><id>2453492</id><snippet>ColorDB.py</snippet></ROW><ROW><id>2453492</id><snippet>Introduction

    Pynche is a color editor based largely on a similar program that I
    originally wrote back in 1987 for the Sunview window system.  That
    editor was called ICE, the Interactive Color Editor.  I'd always
    wanted to port this program to X but didn't feel like hacking X
    and C code to do it.  Fast forward many years, to where Python +
    Tkinter provides such a nice programming environment, with enough
    power, that I finally buckled down and re-implemented it.  I
    changed the name because these days, too many other systems have
    the acronym `ICE'.

    Pynche should work with any variant of Python after 1.5.2
    (e.g. 2.0.1 and 2.1.1), using Tk 8.0.x.  It's been tested on
    Solaris 2.6, Windows NT 4, and various Linux distros.  You'll want
    to be sure to have at least Tk 8.0.3 for Windows.  Also, Pynche is
    very colormap intensive, so it doesn't work very well on 8-bit
    graphics cards; 24bit+ graphics cards are so cheap these days,
    I'll probably never "fix" that.

    Pynche must find a text database of colors names in order to
    provide `nearest' color matching.  Pynche is distributed with an
    rgb.txt file from the X11R6.4 distribution for this reason, along
    with other "Web related" database (see below).  You can use a
    different file with the -d option.  The file xlicense.txt contains
    the license only for rgb.txt and both files are in the X/
    subdirectory.

    Pynche is pronounced: Pin'-chee


Running Standalone

    On Unix, start it by running the `pynche' script.  On Windows, run
    pynche.pyw to inhibit the console window.  When run from the
    command line, the following options are recognized:

    --database file
    -d file
        Alternate location of the color database file.  Without this
        option, the first valid file found will be used (see below).

    --initfile file
    -i file
        Alternate location of the persistent initialization file.  See 
        the section on Persistency below.

    --ignore
    -X
        Ignore the persistent initialization file when starting up.
        Pynche will still write the current option settings to the
        persistent init file when it quits.

    --help
    -h
        Print the help message.

    initialcolor
        a Tk color name or #rrggbb color spec to be used as the
        initially selected color.  This overrides any color saved in
        the persistent init file.  Since `#' needs to be escaped in
        many shells, it is optional in the spec (e.g. #45dd1f is the
        same as 45dd1f).


Running as a Modal Dialog

    Pynche can be run as a modal dialog, inside another application,
    say as a general color chooser.  In fact, Grail 0.6 uses Pynche
    and a future version of IDLE may as well.  Pynche supports the API
    implemented by the Tkinter standard tkColorChooser module, with a
    few changes as described below.  By importing pyColorChooser from
    the Pynche package, you can run

        pyColorChooser.askcolor()

    which will popup Pynche as a modal dialog, and return the selected 
    color.

    There are some UI differences when running as a modal
    vs. standalone.  When running as a modal, there is no "Quit" menu
    item under the "File" menu.  Instead there are "Okay" and "Cancel"
    buttons.

    When "Okay" is hit, askcolor() returns the tuple

        ((r, g, b), "name")

    where r, g, and b are red, green, and blue color values
    respectively (in the range 0 to 255).  "name" will be a color name
    from the color database if there is an exact match, otherwise it
    will be an X11 color spec of the form "#rrggbb".  Note that this
    is different than tkColorChooser, which doesn't know anything
    about color names.

    askcolor() supports the following optional keyword arguments:

        color
            the color to set as the initial selected color

        master[*]
            the master window to use as the parent of the modal
            dialog.  Without this argument, pyColorChooser will create 
            its own Tkinter.Tk instance as the master.  This may not
            be what you want.

        databasefile
            similar to the --database option, the value must be a
            file name

        initfile[*]
            similar to the --initfile option, the value must be a
            file name

        ignore[*]
            similar to the --ignore flag, the value is a boolean

        wantspec
            When this is true, the "name" field in the return tuple
            will always be a color spec of the form "#rrggbb".  It
            will not return a color name even if there is a match;
            this is so pyColorChooser can exactly match the API of
            tkColorChooser.

        [*] these arguments must be specified the first time
        askcolor() is used and cannot be changed on subsequent calls.


The Colorstrip Window

    The top part of the main Pynche window contains the "variation
    strips".  Each strip contains a number of "color chips".  The
    strips always indicate the currently selected color by a highlight
    rectangle around the selected color chip, with an arrow pointing
    to the chip.  Each arrow has an associated number giving you the
    color value along the variation's axis.  Each variation strip
    shows you the colors that are reachable from the selected color by
    varying just one axis of the color solid.

    For example, when the selected color is (in Red/Green/Blue
    notation) 127/127/127, the Red Variations strip shows you every
    color in the range 0/127/127 to 255/127/127.  Similarly for the
    green and blue axes.  You can select any color by clicking on its
    chip.  This will update the highlight rectangle and the arrow, as
    well as other displays in Pynche.

    Click on "Update while dragging" if you want Pynche to update the
    selected color while you drag along any variation strip (this will
    be a bit slower).  Click on "Hexadecimal" to display the arrow
    numbers in hex.

    There are also two shortcut buttons in this window, which
    auto-select Black (0/0/0) and White (255/255/255).


The Proof Window

    In the lower left corner of the main window you see two larger
    color chips.  The Selected chip shows you a larger version of the
    color selected in the variation strips, along with its X11 color
    specification.  The Nearest chip shows you the closest color in
    the X11 database to the selected color, giving its X11 color
    specification, and below that, its X11 color name.  When the
    Selected chip color exactly matches the Nearest chip color, you
    will see the color name appear below the color specification for
    the Selected chip.

    Clicking on the Nearest color chip selects that color.  Color
    distance is calculated in the 3D space of the RGB color solid and
    if more than one color name is the same distance from the selected
    color, the first one found will be chosen.

    Note that there may be more than one X11 color name for the same
    RGB value.  In that case, the first one found in the text database
    is designated the "primary" name, and this is shown under the
    Nearest chip.  The other names are "aliases" and they are visible
    in the Color List Window (see below).

    Both the color specifications and color names are selectable for
    copying and pasting into another window.


The Type-in Window

    At the lower right of the main window are three entry fields.
    Here you can type numeric values for any of the three color axes.
    Legal values are between 0 and 255, and these fields do not allow
    you to enter illegal values.  You must hit Enter or Tab to select
    the new color.

    Click on "Update while typing" if you want Pynche to select the
    color on every keystroke (well, every one that produces a legal
    value!)  Click on "Hexadecimal" to display and enter color values
    in hex.


Other Views

    There are three secondary windows which are not displayed by
    default.  You can bring these up via the "View" menu on the main
    Pynche window.


The Text Window

    The "Text Window" allows you to see what effects various colors
    have on the standard Tk text widget elements.  In the upper part
    of the window is a plain Tk text widget and here you can edit the
    text, select a region of text, etc.  Below this is a button "Track
    color changes".  When this is turned on, any colors selected in
    the other windows will change the text widget element specified in
    the radio buttons below.  When this is turned off, text widget
    elements are not affected by color selection.

    You can choose which element gets changed by color selection by
    clicking on one of the radio buttons in the bottom part of this
    window.  Text foreground and background affect the text in the
    upper part of the window.  Selection foreground and background
    affect the colors of the primary selection which is what you see
    when you click the middle button (depending on window system) and
    drag it through some text.

    The Insertion is the insertion cursor in the text window, where
    new text will be inserted as you type.  The insertion cursor only
    has a background.


The Color List Window

    The "Color List" window shows every named color in the color name
    database (this window may take a while to come up).  In the upper
    part of the window you see a scrolling list of all the color names
    in the database, in alphabetical order.  Click on any color to
    select it.  In the bottom part of the window is displayed any
    aliases for the selected color (those color names that have the
    same RGB value, but were found later in the text database).  For
    example, find the color "Black" and you'll see that its aliases
    are "gray0" and "grey0".

    If the color has no aliases you'll see "&lt;no aliases&gt;" here.  If you
    just want to see if a color has an alias, and do not want to select a
    color when you click on it, turn off "Update on Click".

    Note that the color list is always updated when a color is selected
    from the main window.  There's no way to turn this feature off.  If
    the selected color has no matching color name you'll see
    "&lt;no matching color&gt;" in the Aliases window.


The Details Window

    The "Details" window gives you more control over color selection
    than just clicking on a color chip in the main window.  The row of
    buttons along the top apply the specified increment and decrement
    amounts to the selected color.  These delta amounts are applied to
    the variation strips specified by the check boxes labeled "Move
    Sliders".  Thus if just Red and Green are selected, hitting -10
    will subtract 10 from the color value along the red and green
    variation only.  Note the message under the checkboxes; this
    indicates the primary color level being changed when more than one
    slider is tied together.  For example, if Red and Green are
    selected, you will be changing the Yellow level of the selected
    color.

    The "At Boundary" behavior determines what happens when any color
    variation hits either the lower or upper boundaries (0 or 255) as
    a result of clicking on the top row buttons:

    Stop
        When the increment or decrement would send any of the tied
        variations out of bounds, the entire delta is discarded.

    Wrap Around
        When the increment or decrement would send any of the tied
        variations out of bounds, the out of bounds value is wrapped
        around to the other side.  Thus if red were at 238 and +25
        were clicked, red would have the value 7.

    Preserve Distance
        When the increment or decrement would send any of the tied
        variations out of bounds, all tied variations are wrapped as
        one, so as to preserve the distance between them.  Thus if
        green and blue were tied, and green was at 238 while blue was
        at 223, and +25 were clicked, green would be at 15 and blue
        would be at 0.

    Squash
        When the increment or decrement would send any of the tied
        variations out of bounds, the out of bounds variation is set
        to the ceiling of 255 or floor of 0, as appropriate.  In this
        way, all tied variations are squashed to one edge or the
        other.

    The top row buttons have the following keyboard accelerators:

    -25 == Shift Left Arrow
    -10 == Control Left Arrow
     -1 == Left Arrow
     +1 == Right Arrow
    +10 == Control Right Arrow
    +25 == Shift Right Arrow


Keyboard Accelerators

    Alt-w in any secondary window dismisses the window.  In the main
    window it exits Pynche (except when running as a modal).

    Alt-q in any window exits Pynche (except when running as a modal).


Persistency

    Pynche remembers various settings of options and colors between
    invocations, storing these values in a `persistent initialization
    file'.  The actual location of this file is specified by the
    --initfile option (see above), and defaults to ~/.pynche.

    When Pynche exits, it saves these values in the init file, and
    re-reads them when it starts up.  There is no locking on this
    file, so if you run multiple instances of Pynche at a time, you
    may clobber the init file.

    The actual options stored include

    - the currently selected color

    - all settings of checkbox and radio button options in all windows

    - the contents of the text window, the current text selection and
      insertion point, and all current text widget element color
      settings.

    - the name of the color database file (but not its contents)

    You can inhibit Pynche from reading the init file by supplying the
    --ignore option on the command line.  However, you cannot suppress
    the storing of the settings in the init file on Pynche exit.  If
    you really want to do this, use /dev/null as the init file, using
    --initfile.


Color Name Database Files

    Pynche uses a color name database file to calculate the nearest
    color to the selected color, and to display in the Color List
    view.  Several files are distributed with Pynche, described
    below.  By default, the X11 color name database file is selected.
    Other files:

    html40colors.txt -- the HTML 4.0 guaranteed color names

    websafe.txt -- the 216 "Web-safe" colors that Netscape and MSIE
    guarantee will not be dithered.  These are specified in #rrggbb
    format for both values and names

    webcolors.txt -- The 140 color names that Tim Peters and his
    sister say NS and MSIE both understand (with some controversy over 
    AliceBlue).

    namedcolors.txt -- an alternative set of Netscape colors.

    You can switch between files by choosing "Load palette..." from
    the "File" menu.  This brings up a standard Tk file dialog.
    Choose the file you want and then click "Ok".  If Pynche
    understands the format in this file, it will load the database and 
    update the appropriate windows.  If not, it will bring up an error 
    dialog.


To Do

    Here's a brief list of things I want to do (some mythical day):

    - Better support for resizing the top level windows

    - More output views, e.g. color solids

    - Have the notion of a `last color selected'; this may require a
      new output view

    - Support setting the font in the text view

    - Support distutils setup.py for installation

    I'm open to suggestions!




Local Variables:
indent-tabs-mode: nil
End:
</snippet></ROW><ROW><id>2453688</id><snippet>L[:]</snippet></ROW><ROW><id>2453688</id><snippet>is</snippet></ROW><ROW><id>2453688</id><snippet>False</snippet></ROW><ROW><id>2453688</id><snippet>L == L[:]</snippet></ROW><ROW><id>2453688</id><snippet>True</snippet></ROW><ROW><id>2453912</id><snippet>data = """&lt;link rel="stylesheet" type="text/css" href="/media/css/first.css" /&gt;
&lt;style&gt;body:{font-size: 10px;}&lt;/style&gt;
&lt;link rel="stylesheet" type="text/css" href="/media/css/second.css" /&gt;
"""

from lxml import etree

h = etree.HTML(data)

h.xpath('//link[@rel="stylesheet"]|//style')

[&lt;Element link at 97a007c&gt;,
 &lt;Element style at 97a002c&gt;,
 &lt;Element link at 97a0054&gt;]
</snippet></ROW><ROW><id>2454022</id><snippet>from django.db.models import Count
qs = Foo.objects.filter(
           bar__eg_id__in=id_list
      ).annotate(
           bar_count=Count('bar')
      ).order_by('bar_count')
</snippet></ROW><ROW><id>2454101</id><snippet>import datetime

d = datetime.datetime(year=2010,day=5,month=12)

d
datetime.datetime(2010, 12, 5, 0, 0)
</snippet></ROW><ROW><id>2454303</id><snippet>urllib</snippet></ROW><ROW><id>2454303</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; resp = urllib.urlopen('http://bit.ly/bcFOko')
&gt;&gt;&gt; resp.getcode()
200
&gt;&gt;&gt; resp.url
'http://mrdoob.com/lab/javascript/harmony/'
</snippet></ROW><ROW><id>2454448</id><snippet>a = Staff.objects.get(NameFirst=u'"ANDREA"')
</snippet></ROW><ROW><id>2454448</id><snippet>u</snippet></ROW><ROW><id>2454448</id><snippet>str</snippet></ROW><ROW><id>2454448</id><snippet>s[0].NameFirst</snippet></ROW><ROW><id>2454613</id><snippet>.headers</snippet></ROW><ROW><id>2454613</id><snippet>httplib.HTTPMessage</snippet></ROW><ROW><id>2454613</id><snippet>help(httplib.HTTPMessage)
...

If multiple header fields with the same name occur, they are combined
according to the rules in RFC 2616 sec 4.2:

Appending each subsequent field-value to the first, each separated
by a comma. The order in which header fields with the same field-name
are received is significant to the interpretation of the combined
field value.
</snippet></ROW><ROW><id>2454613</id><snippet>import httplib
from StringIO import StringIO

msg = \
"""Set-Cookie: Foo
Set-Cookie: Bar
Set-Cookie: Baz

This is the message"""

msg = StringIO(msg)

msg = httplib.HTTPMessage(msg)

assert msg['Set-Cookie'] == 'Foo, Bar, Baz'
</snippet></ROW><ROW><id>2454649</id><snippet>itertools.product</snippet></ROW><ROW><id>2455379</id><snippet>f = window.GetFont()
dc = wx.WindowDC(window)
dc.SetFont(f)
width, height = dc.GetTextExtent("Text to measure")
</snippet></ROW><ROW><id>2455756</id><snippet>import SocketServer
import BaseHTTPServer

class ThreadingHTTPServer(SocketServer.ThreadingMixIn, BaseHttpServer.HTTPServer):
    pass
</snippet></ROW><ROW><id>2456292</id><snippet>print</snippet></ROW><ROW><id>2456292</id><snippet>print("foo" % bar, end=" ")</snippet></ROW><ROW><id>2456292</id><snippet>print ("foo" % bar, end=" ")</snippet></ROW><ROW><id>2456292</id><snippet>print "foo" % bar, end=" "</snippet></ROW><ROW><id>2456292</id><snippet>print</snippet></ROW><ROW><id>2456292</id><snippet>end=" "</snippet></ROW><ROW><id>2456292</id><snippet>print "foo" % bar,</snippet></ROW><ROW><id>2456292</id><snippet>sys.stdout</snippet></ROW><ROW><id>2456292</id><snippet>__future__</snippet></ROW><ROW><id>2456292</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>2456292</id><snippet>unicode_literals</snippet></ROW><ROW><id>2456292</id><snippet>with_statement</snippet></ROW><ROW><id>2457170</id><snippet>namedict = dict((x['name'], y) for y in data for x in data[y]['localNodes'])
proddict = dict((z['name'], [y for y in z['consumesFrom'] if namedict[y] != x])
  for x in data for z in data[x]['localNodes'] if z['consumesFrom'] is not None)

print 'nA' in proddict['nC']
</snippet></ROW><ROW><id>2457220</id><snippet>for col in row:
    total += int(col)
</snippet></ROW><ROW><id>2457220</id><snippet>import csv
from StringIO import StringIO

total = 0
for row in csv.reader(StringIO("1,2,3,4")):
    for col in row:
        total += int(col)

print total    # prints 10
</snippet></ROW><ROW><id>2457220</id><snippet>line = open("ints.txt").read().split(",")
total = sum(int(i) for i in line)
</snippet></ROW><ROW><id>2457281</id><snippet>if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>2457281</id><snippet>if __name__ == '__main__':
    try: unittest.main()
    except SystemExit: pass
</snippet></ROW><ROW><id>2457971</id><snippet>from math import floor

Lista = [1,3,2,3,4,5,3.2,4,2,2]
ic=0
nintervals= 3

lmin=min(Lista)
print "min= ",lmin
lmax=max(Lista)
print "max= ",lmax

width=1.0*(lmax-lmin)/nintervals
print "width= ",width

nelements=len(Lista)
print "nelements= ",nelements
print " "
histogram =[0]*nintervals

for item in Lista:
    ind = int(floor(1.0*(item-lmin)/width))
    if ind==nintervals:
        ind=ind-1
    histogram[ind]+=1

for i,v in enumerate(histogram):
    print "from", lmin+i*width, "to", lmin+(i+1)*width, "are",v,"values"

for i,v in enumerate(histogram):
    print "Visual presentation:","="*int(round(v*40.0/lmax))
</snippet></ROW><ROW><id>2458105</id><snippet>or</snippet></ROW><ROW><id>2458105</id><snippet>l = [True, [[True, False], [False, [False, True]]]]

def foo(x):
    if isinstance(x, list):
        return foo(x[0]) or foo(x[1])
    else:
        return x

print foo(l)
</snippet></ROW><ROW><id>2458442</id><snippet>&lt;?xml .....</snippet></ROW><ROW><id>2458633</id><snippet>(foobar(x) for x in S)
</snippet></ROW><ROW><id>2458866</id><snippet>mv</snippet></ROW><ROW><id>2459073</id><snippet>setEqual</snippet></ROW><ROW><id>2459073</id><snippet>restore</snippet></ROW><ROW><id>2459073</id><snippet>=</snippet></ROW><ROW><id>2459073</id><snippet>restore</snippet></ROW><ROW><id>2459073</id><snippet># Bind the identifier `restore` to the number object 1.
restore = 1
# Bind the identifier `restore` to the string object 'Some string.'
# The original object that `restore` was bound to is unaffected.
restore = 'Some string.'
</snippet></ROW><ROW><id>2459073</id><snippet>restore = []
</snippet></ROW><ROW><id>2459073</id><snippet>restore</snippet></ROW><ROW><id>2459073</id><snippet>restore</snippet></ROW><ROW><id>2459073</id><snippet>setEqual</snippet></ROW><ROW><id>2459073</id><snippet>test_variable = 1
setEqual(test_variable, [1, 2, 3, 4])
# Passes, because the identifier test_variable
# CAN'T be rebound within this scope from setEqual.
assert test_variable == 1 
</snippet></ROW><ROW><id>2459073</id><snippet>def set_foo_to_bar(foo, bar)</snippet></ROW><ROW><id>2459073</id><snippet>original = [1, 2, 3, 4]
backup = list(original) # Make a shallow copy of the original.
backup.remove(3)
assert original == [1, 2, 3, 4] # It's okay!
</snippet></ROW><ROW><id>2459363</id><snippet>callable</snippet></ROW><ROW><id>2459363</id><snippet>True</snippet></ROW><ROW><id>2459363</id><snippet>__call__</snippet></ROW><ROW><id>2459363</id><snippet>inspect</snippet></ROW><ROW><id>2459363</id><snippet>inspect</snippet></ROW><ROW><id>2459363</id><snippet>inspect</snippet></ROW><ROW><id>2459384</id><snippet>from</snippet></ROW><ROW><id>2459384</id><snippet>moda</snippet></ROW><ROW><id>2459384</id><snippet>modb</snippet></ROW><ROW><id>2459384</id><snippet>modc</snippet></ROW><ROW><id>2459384</id><snippet>modd</snippet></ROW><ROW><id>2459384</id><snippet>moda</snippet></ROW><ROW><id>2459384</id><snippet>moda</snippet></ROW><ROW><id>2459384</id><snippet>moda</snippet></ROW><ROW><id>2459384</id><snippet>sys.modules</snippet></ROW><ROW><id>2459384</id><snippet>import sys</snippet></ROW><ROW><id>2459719</id><snippet>C</snippet></ROW><ROW><id>2459719</id><snippet>object</snippet></ROW><ROW><id>2459719</id><snippet>class C()</snippet></ROW><ROW><id>2459719</id><snippet>class C(object)</snippet></ROW><ROW><id>2459793</id><snippet>&gt;&gt;&gt; s = u'Hello, world!'.encode('utf-8-sig')
&gt;&gt;&gt; s
'\xef\xbb\xbfHello, world!'
&gt;&gt;&gt; s.decode('utf-8-sig')
u'Hello, world!'
</snippet></ROW><ROW><id>2460094</id><snippet>sum</snippet></ROW><ROW><id>2460094</id><snippet>int</snippet></ROW><ROW><id>2460094</id><snippet>int</snippet></ROW><ROW><id>2460094</id><snippet>print sum</snippet></ROW><ROW><id>2460094</id><snippet>sum</snippet></ROW><ROW><id>2460094</id><snippet>file</snippet></ROW><ROW><id>2460094</id><snippet>list</snippet></ROW><ROW><id>2460322</id><snippet>import locale
locale.getdefaultlocale()
</snippet></ROW><ROW><id>2460322</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dt = '16-MAR-2010 03:37:04'
&gt;&gt;&gt; datetime.strptime(dt, " %d-%b-%Y %H:%M:%S ")
datetime.datetime(2010, 3, 16, 3, 37, 4)
</snippet></ROW><ROW><id>2460722</id><snippet>meshgrid</snippet></ROW><ROW><id>2460850</id><snippet>datetime.fromtimestamp()</snippet></ROW><ROW><id>2460850</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.fromtimestamp(0)
datetime.datetime(1970, 1, 1, 1, 0)
&gt;&gt;&gt; datetime.fromtimestamp(1268816500)
datetime.datetime(2010, 3, 17, 10, 1, 40)
</snippet></ROW><ROW><id>2460850</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.mktime(datetime(2010, 3, 17, 10, 1, 40).timetuple())
1268816500.0
</snippet></ROW><ROW><id>2461220</id><snippet>StringIO</snippet></ROW><ROW><id>2461220</id><snippet>from io import StringIO    # version &lt; 2.6: from StringIO import StringIO

buffer = StringIO()
buffer.writelines(mylist)
buffer.seek(0)

session.storlines("...", buffer)
</snippet></ROW><ROW><id>2461220</id><snippet>writelines</snippet></ROW><ROW><id>2461220</id><snippet>\n</snippet></ROW><ROW><id>2461220</id><snippet>\n</snippet></ROW><ROW><id>2461220</id><snippet>buffer.writelines(line + '\n' for line in mylist)
</snippet></ROW><ROW><id>2461347</id><snippet>rot90</snippet></ROW><ROW><id>2461347</id><snippet>rotated = numpy.rot90(orignumpyarray,3)
</snippet></ROW><ROW><id>2461786</id><snippet>from itertools import izip_longest
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

i = grouper(3,range(100))
i.next()
(0, 1, 2)
</snippet></ROW><ROW><id>2461898</id><snippet>class</snippet></ROW><ROW><id>2461898</id><snippet>def meta(name):
    class cls(Unit):
        pass

    cls.__name__ = name
    return cls
</snippet></ROW><ROW><id>2461898</id><snippet>type()</snippet></ROW><ROW><id>2461898</id><snippet>class X(object): pass
X = type("X", (object,), {})
</snippet></ROW><ROW><id>2461898</id><snippet>__name__</snippet></ROW><ROW><id>2461898</id><snippet>__name__</snippet></ROW><ROW><id>2461898</id><snippet>__repr__()</snippet></ROW><ROW><id>2461898</id><snippet>class</snippet></ROW><ROW><id>2461898</id><snippet>class X(object):
    def foo(self): print "foo"

def foo(self): print "foo"
X = type("X", (object,), {'foo':foo})
</snippet></ROW><ROW><id>2461898</id><snippet>type</snippet></ROW><ROW><id>2461898</id><snippet>type.__new__()</snippet></ROW><ROW><id>2461898</id><snippet>type()</snippet></ROW><ROW><id>2461961</id><snippet>Foo</snippet></ROW><ROW><id>2461961</id><snippet>Bar</snippet></ROW><ROW><id>2461961</id><snippet>Bar</snippet></ROW><ROW><id>2461961</id><snippet>Bar</snippet></ROW><ROW><id>2461961</id><snippet>class Foo</snippet></ROW><ROW><id>2461961</id><snippet>Foo</snippet></ROW><ROW><id>2461961</id><snippet>Foo</snippet></ROW><ROW><id>2461961</id><snippet>class Bar</snippet></ROW><ROW><id>2461961</id><snippet>ImportError</snippet></ROW><ROW><id>2461961</id><snippet>foo.Foo</snippet></ROW><ROW><id>2461961</id><snippet>Foo</snippet></ROW><ROW><id>2461961</id><snippet>bar.Bar</snippet></ROW><ROW><id>2461961</id><snippet>Bar</snippet></ROW><ROW><id>2461961</id><snippet>Foo</snippet></ROW><ROW><id>2461961</id><snippet>Bar</snippet></ROW><ROW><id>2461961</id><snippet>AttributeError</snippet></ROW><ROW><id>2462132</id><snippet>outfile = open(os.path.join(dir, os.path.basename(name)), 'wb')
</snippet></ROW><ROW><id>2462132</id><snippet>os.mkdir()</snippet></ROW><ROW><id>2462132</id><snippet>pass</snippet></ROW><ROW><id>2462583</id><snippet>sys.exit()</snippet></ROW><ROW><id>2462583</id><snippet>return</snippet></ROW><ROW><id>2462921</id><snippet>Meta</snippet></ROW><ROW><id>2462921</id><snippet>verbose_name</snippet></ROW><ROW><id>2462921</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>2463217</id><snippet>if not '&lt;body&gt;Tomcat is running...&lt;/body&gt;' in results:
   notify_us()
</snippet></ROW><ROW><id>2463397</id><snippet>a = ['apple', 'orange']

d ={'apple': [2,4], 'carrot': [44,33], 'orange': [345,667]}

fo = open('test.csv','w')
fo.write(',\t'.join(a)+'\n')
for y in xrange(len(d[a[0]])):
    fo.write(',\t'.join([str(d[i][y]) for i in a])+'\n')

fo.close()
</snippet></ROW><ROW><id>2463397</id><snippet>apple,  orange
2,      345
4,      667
</snippet></ROW><ROW><id>2463774</id><snippet>import wx

def alignToBottomRight(win):
    dw, dh = wx.DisplaySize()
    w, h = win.GetSize()
    x = dw - w
    y = dh - h
    win.SetPosition((x, y))

app = wx.PySimpleApp()
frame = wx.MiniFrame(None, title="My PopUp", size=(200,300), style=wx.DEFAULT_MINIFRAME_STYLE|wx.CLOSE_BOX)
alignToBottomRight(frame)
app.SetTopWindow(frame)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>2463819</id><snippet>class zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])

  Open a ZIP file, where file can be either a path to a file (a string) or a file-like object. 
</snippet></ROW><ROW><id>2463819</id><snippet>file_like_object = io.BytesIO(my_zip_data)
zipfile = zipfile.ZipFile(file_like_object)
</snippet></ROW><ROW><id>2463844</id><snippet>def on_button_clear(self, evt):
    if self.subframe_opened:
        self.subframe.Close()
    self.figure.set_canvas(self.figurecanvas)
    self.axe.clear()
    self.figurecanvas.draw()  
    self.SetSize((self.Size[0],self.figurecanvas.Size[1]))
</snippet></ROW><ROW><id>2464578</id><snippet>issubclass()</snippet></ROW><ROW><id>2464578</id><snippet>true</snippet></ROW><ROW><id>2464578</id><snippet>class</snippet></ROW><ROW><id>2464578</id><snippet>classinfo</snippet></ROW><ROW><id>2464578</id><snippet>classinfo</snippet></ROW><ROW><id>2464578</id><snippet>classinfo</snippet></ROW><ROW><id>2464578</id><snippet>TypeError</snippet></ROW><ROW><id>2464831</id><snippet> for index, group in enumerate(FundTypeGroups):
     print "%s: %s" % (index, group)
</snippet></ROW><ROW><id>2464837</id><snippet>backup = open(filename, 'rb')
while True:
    part_of_file = backup.read(60000000) # not exactly 60 MB....
    response = connection.put() # submit part_of_file here to amazon
</snippet></ROW><ROW><id>2464856</id><snippet>multiprocessing</snippet></ROW><ROW><id>2465152</id><snippet>contextlib.nested()</snippet></ROW><ROW><id>2465152</id><snippet>with contextlib.nested(open(...), open(...), ...) as (in_1, in_2, ...):
  ....
</snippet></ROW><ROW><id>2465319</id><snippet>$ gdb python
(gdb) run /path/to/script.py
# wait for crash #
(gdb) bt
# stack trace here #
</snippet></ROW><ROW><id>2465364</id><snippet>import subprocess

p = subprocess.Popen(['/bin/bash', '-c', "echo 'select user from mysql.user;' | mysql" ],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

lines = [line for line in p.stdout]
</snippet></ROW><ROW><id>2465411</id><snippet>  def truncate_long_words(s, num):
     """Splits long words in string"""
     words = s.split()
     for word in words:
        if len(word) &gt; num:
                for i in xrange(0,len(word),num):
                       yield word[i:i+num]
        else:
            yield word

 for t in truncate_long_words(s):
    print t
</snippet></ROW><ROW><id>2466007</id><snippet>class NamedModel(db.Model):
    """A Model subclass for entities which automatically generate their own key
    names on creation. See documentation for _generate_key function for
    requirements."""

    def __init__(self, *args, **kwargs):
        kwargs['key_name'] = _generate_key(self, kwargs)
        super(NamedModel, self).__init__(*args, **kwargs)


def _generate_key(entity, kwargs):
    """Generates a key name for the given entity, which was constructed with
    the given keyword args.  The entity must have a KEY_NAME property, which
    can either be a string or a callable.

    If KEY_NAME is a string, the keyword args are interpolated into it.  If
    it's a callable, it is called, with the keyword args passed to it as a
    single dict."""

    # Make sure the class has its KEY_NAME property set
    if not hasattr(entity, 'KEY_NAME'):
        raise RuntimeError, '%s entity missing KEY_NAME property' % (
            entity.entity_type())

    # Make a copy of the kwargs dict, so any modifications down the line don't
    # hurt anything
    kwargs = dict(kwargs)

    # The KEY_NAME must either be a callable or a string.  If it's a callable,
    # we call it with the given keyword args.
    if callable(entity.KEY_NAME):
        return entity.KEY_NAME(kwargs)

    # If it's a string, we just interpolate the keyword args into the string,
    # ensuring that this results in a different string.
    elif isinstance(entity.KEY_NAME, basestring):
        # Try to create the key name, catching any key errors arising from the
        # string interpolation
        try:
            key_name = entity.KEY_NAME % kwargs
        except KeyError:
            raise RuntimeError, 'Missing keys required by %s entity\'s KEY_NAME '\
                'property (got %r)' % (entity.entity_type(), kwargs)

        # Make sure the generated key name is actually different from the
        # template
        if key_name == entity.KEY_NAME:
            raise RuntimeError, 'Key name generated for %s entity is same as '\
                'KEY_NAME template' % entity.entity_type()

        return key_name

    # Otherwise, the KEY_NAME is invalid
    else:
        raise TypeError, 'KEY_NAME of %s must be a string or callable' % (
            entity.entity_type())
</snippet></ROW><ROW><id>2466007</id><snippet>class Foo(NamedModel):
    KEY_NAME = '%(name)s'
    name = db.StringProperty()
</snippet></ROW><ROW><id>2466007</id><snippet>NamedModel</snippet></ROW><ROW><id>2466007</id><snippet>__init__</snippet></ROW><ROW><id>2466007</id><snippet>kwargs['key_name'] = kwargs['name']
</snippet></ROW><ROW><id>2466207</id><snippet>class Employee(object):
    def __init__(self, initial_data):
        for key in initial_data:
            setattr(self, key, initial_data[key])
</snippet></ROW><ROW><id>2466207</id><snippet>class Employee(object):
    def __init__(self, *initial_data, **kwargs):
        for dictionary in initial_data:
            for key in dictionary:
                setattr(self, key, dictionary[key])
        for key in kwargs:
            setattr(self, key, kwargs[key])
</snippet></ROW><ROW><id>2466207</id><snippet>e = Employee({"name": "abc", "age": 32})
</snippet></ROW><ROW><id>2466207</id><snippet>e = Employee(name="abc", age=32)
</snippet></ROW><ROW><id>2466207</id><snippet>employee_template = {"role": "minion"}
e = Employee(employee_template, name="abc", age=32)
</snippet></ROW><ROW><id>2466250</id><snippet>sleep</snippet></ROW><ROW><id>2466250</id><snippet>#!/usr/bin/env python
from twisted.internet import reactor,defer, threads
from twisted.internet.task import LoopingCall
import time

def main_loop():
    print 'doing stuff in main loop.. do not block me!'

def aBlockingRedisCall(x):
    if x&lt;5: #all connections are busy, try later
        print '%s is less than 5, get a redis client later' % x
        x+=1
        d = defer.Deferred()
        d.addCallback(aBlockingRedisCall)
        reactor.callLater(1.0,d.callback,x)
        return d

    else: 
        print 'got a redis client; doing lookup.. this may take a while'
        def getstuff( x ):
            time.sleep(3)
            return "stuff is %s" % x

        # getstuff is blocking, so you need to push it to a new thread
        d = threads.deferToThread(getstuff, x)
        d.addCallback(gotFinalResult)
        return d

def gotFinalResult(x):
    return 'final result is %s' % x

def result(res):
    print res

def aBlockingMethod():
    print 'going to sleep...'
    time.sleep(10)
    print 'woke up'

def main():
    lc = LoopingCall(main_loop)
    lc.start(2)


    d = defer.Deferred()
    d.addCallback(aBlockingRedisCall)
    d.addCallback(result)
    reactor.callInThread(d.callback, 1)
    reactor.run()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>2466705</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>2466826</id><snippet>bulkloader.py --dump --app_id=&lt;app-id&gt; --url=http://&lt;appname&gt;.appspot.com/remote_api --filename=&lt;data-filename&gt;
</snippet></ROW><ROW><id>2466966</id><snippet>f()[0:2][0:10]</snippet></ROW><ROW><id>2466966</id><snippet>f()</snippet></ROW><ROW><id>2466966</id><snippet>[0:2]</snippet></ROW><ROW><id>2466966</id><snippet>[0:10]</snippet></ROW><ROW><id>2466966</id><snippet>f()[0:2][0:10]</snippet></ROW><ROW><id>2466966</id><snippet>f()[i]</snippet></ROW><ROW><id>2466966</id><snippet>i</snippet></ROW><ROW><id>2466966</id><snippet>[0:10]</snippet></ROW><ROW><id>2466966</id><snippet>f()[i]</snippet></ROW><ROW><id>2466966</id><snippet>[i]</snippet></ROW><ROW><id>2466966</id><snippet>[i:j]</snippet></ROW><ROW><id>2467121</id><snippet>google.appengine.ext.ereporter</snippet></ROW><ROW><id>2467172</id><snippet>from paste.httpheaders import *
</snippet></ROW><ROW><id>2467186</id><snippet>def main():</snippet></ROW><ROW><id>2467186</id><snippet>if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>2467186</id><snippet>main()</snippet></ROW><ROW><id>2467186</id><snippet>main()</snippet></ROW><ROW><id>2467225</id><snippet>self</snippet></ROW><ROW><id>2467225</id><snippet>self.status</snippet></ROW><ROW><id>2467225</id><snippet>status</snippet></ROW><ROW><id>2467225</id><snippet>elif user_info().okstatus(user):
</snippet></ROW><ROW><id>2467225</id><snippet>user_info</snippet></ROW><ROW><id>2467457</id><snippet>&gt;&gt;&gt; x_idxs = [(0,1,0,0),(0,1,1,1),(0,1,1),(0,0,1),(1,1,1,1),(0,0,0,0)]
&gt;&gt;&gt; y_idxs = [(1,1),(0,1),(1,0),(0,0)]
&gt;&gt;&gt; a = np.random.random((len(x_idxs),len(y_idxs)))
&gt;&gt;&gt; x_idxs2, xi = zip(*sorted(zip(x_idxs,range(len(x_idxs)))))
&gt;&gt;&gt; y_idxs2, yi = zip(*sorted(zip(y_idxs,range(len(y_idxs)))))
&gt;&gt;&gt; a2 = a[xi,:][:,yi]
</snippet></ROW><ROW><id>2467457</id><snippet>x_idxs</snippet></ROW><ROW><id>2467457</id><snippet>y_idxs</snippet></ROW><ROW><id>2467457</id><snippet>a</snippet></ROW><ROW><id>2467457</id><snippet>xi</snippet></ROW><ROW><id>2467457</id><snippet>yi</snippet></ROW><ROW><id>2467457</id><snippet>a2</snippet></ROW><ROW><id>2467457</id><snippet>x_idxs2</snippet></ROW><ROW><id>2467457</id><snippet>y_idxs2</snippet></ROW><ROW><id>2467457</id><snippet>0</snippet></ROW><ROW><id>2467457</id><snippet>1</snippet></ROW><ROW><id>2467457</id><snippet>np.argsort</snippet></ROW><ROW><id>2468247</id><snippet>def all_matching_strings(alphabet, max_length, regex):
"""Find the list of all strings over 'alphabet' of length up to 'max_length' that match 'regex'"""

if max_length == 0: return 

L = len(alphabet)
for N in range(1, max_length+1):
    indices = [0]*N
    for z in xrange(L**N):
        r = ''.join(alphabet[i] for i in indices)
        if regex.match(r):                
           yield(r)

        i = 0
        indices[i] += 1
        while (i&lt;N) and (indices[i]==L):
            indices[i] = 0
            i += 1
            if i&lt;N: indices[i] += 1

return
</snippet></ROW><ROW><id>2468247</id><snippet>alphabet = 'abcdef1234567890'
import re
regex = re.compile('f*[1-3]+$')
for r in all_matching_strings(alphabet, 5, regex): 
    print r
</snippet></ROW><ROW><id>2468247</id><snippet>1
2
3
f1
11
21
31
f2
12
22
32
f3
13
23
33
ff1
[more output omitted...]
</snippet></ROW><ROW><id>2468374</id><snippet>userdata = { "data":[]}

def fil_userdata():
  for i in xrange(0,5):
    user = {}
    user["name"]=...
    user["age"]=...
    user["country"]=...
    add_user(user)

def add_user(user):
  userdata["data"].append(user)
</snippet></ROW><ROW><id>2468374</id><snippet>def gen_user():
  return {"name":"foo", "age":22}

userdata = {"data": [gen_user() for i in xrange(0,5)]}

# or fill separated from declaration so you can fill later
userdata ={"data":None} # None: not initialized
userdata["data"]=[gen_user() for i in xrange(0,5)]
</snippet></ROW><ROW><id>2468649</id><snippet>f=open("file")
for line in f:
    if len(line)==81:
       n=f.next()
       line=line.rstrip()+n
    print line.rstrip()
f.close()
</snippet></ROW><ROW><id>2469278</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>2469278</id><snippet>pushd /path/you/want/to/serve; python -m SimpleHTTPServer; popd
</snippet></ROW><ROW><id>2469557</id><snippet>type</snippet></ROW><ROW><id>2469557</id><snippet>data_file_path</snippet></ROW><ROW><id>2469557</id><snippet>def f(type,data_file_path=os.path.join(os.getcwd(),'temp')):
</snippet></ROW><ROW><id>2469698</id><snippet>&gt;&gt;&gt; from numpy import linspace
&gt;&gt;&gt; linspace(-7.5, 0.1, 6)
array([-7.5 , -5.98, -4.46, -2.94, -1.42,  0.1])
&gt;&gt;&gt; linspace(-7.5, 0.1, 6).tolist()
[-7.5, -5.9800000000000004, -4.46, -2.9399999999999995, -1.4199999999999999, 0.10000000000000001]
</snippet></ROW><ROW><id>2469762</id><snippet>&gt;&gt;&gt; param = [2, 6, 3]
&gt;&gt;&gt; pattern = 'www.url?param=%s&amp;param2=%s&amp;param3=%s'
&gt;&gt;&gt; url = pattern % tuple(param)
&gt;&gt;&gt; url
'www.url?param=2&amp;param2=6&amp;param3=3'
</snippet></ROW><ROW><id>2469762</id><snippet>&gt;&gt;&gt; ast.literal_eval('[2,6,3]')
[2, 6, 3]
</snippet></ROW><ROW><id>2469762</id><snippet>&gt;&gt;&gt; json.loads(param)
[2, 6, 3]
</snippet></ROW><ROW><id>2469762</id><snippet>&gt;&gt;&gt; simplejson.loads(param)
[2, 6, 3]
</snippet></ROW><ROW><id>2469832</id><snippet>sel.get_eval("this.browserbot.getCurrentWindow().document.getElementById('your-id').innerHTML"
</snippet></ROW><ROW><id>2470034</id><snippet>py_object</snippet></ROW><ROW><id>2470034</id><snippet>ctypes.py_object</snippet></ROW><ROW><id>2470034</id><snippet>c_voidp</snippet></ROW><ROW><id>2470034</id><snippet>*void</snippet></ROW><ROW><id>2470034</id><snippet>byref</snippet></ROW><ROW><id>2470034</id><snippet>py_object</snippet></ROW><ROW><id>2470034</id><snippet>myfunc = mylib.myfunc
myfunc.restype = c_int
myfuncFUNCTYPE = CFUNCTYPE(STRING)
myfunc.argtypes = [POINTER(c_char), callbackFUNCTYPE]


def mycb(result, userdata):
    userdata.append(result)

input="A large chunk of data."
userdata = []
myfunc(input, myfuncFUNCTYPE(lambda x: mycb(x, userdata)))
</snippet></ROW><ROW><id>2470061</id><snippet>&gt;&gt;&gt; Popen(["nice"]).communicate()
0
(None, None)
&gt;&gt;&gt; Popen(["nice"], preexec_fn=lambda : os.nice(10)).communicate()
10
(None, None)
&gt;&gt;&gt; Popen(["nice"], preexec_fn=lambda : os.nice(20)).communicate()
19
(None, None)
</snippet></ROW><ROW><id>2470120</id><snippet>find_overlapping</snippet></ROW><ROW><id>2470120</id><snippet>find_overlapping(x1, y1, x2, y2)</snippet></ROW><ROW><id>2470120</id><snippet>tuple</snippet></ROW><ROW><id>2470120</id><snippet>Returns a tuple of all items that overlap the given rectangle, or that are 
</snippet></ROW><ROW><id>2470549</id><snippet>file_data</snippet></ROW><ROW><id>2470811</id><snippet>O(len(A)</snippet></ROW><ROW><id>2470811</id><snippet>aud = dict((tuple(a[:3]), i) for i, a in enumerate(A))
</snippet></ROW><ROW><id>2470811</id><snippet>O(len(B))</snippet></ROW><ROW><id>2470811</id><snippet>result = [(b, aud[tuple(b[:3])]) for b in B if tuple(b[:3]) in aud]
</snippet></ROW><ROW><id>2470989</id><snippet>"Window"</snippet></ROW><ROW><id>2470989</id><snippet>"Preferences"</snippet></ROW><ROW><id>2470989</id><snippet>"PyDev"</snippet></ROW><ROW><id>2470989</id><snippet>"Interpreter - Python"</snippet></ROW><ROW><id>2470989</id><snippet>"New"</snippet></ROW><ROW><id>2470989</id><snippet>"Auto Config"</snippet></ROW><ROW><id>2470989</id><snippet>"Interpreter Name"</snippet></ROW><ROW><id>2470989</id><snippet>"Interpreter Executable"</snippet></ROW><ROW><id>2470989</id><snippet>"OK"</snippet></ROW><ROW><id>2470989</id><snippet>Readme.txt</snippet></ROW><ROW><id>2470989</id><snippet>EPD.mkpg/Contents/Resources/Readme.txt</snippet></ROW><ROW><id>2470989</id><snippet>epd-6.1-1-macosx-i386.dmg</snippet></ROW><ROW><id>2470989</id><snippet>Interpreter Executable</snippet></ROW><ROW><id>2470989</id><snippet>Interpreter Name</snippet></ROW><ROW><id>2470989</id><snippet>“Error getting info on interpreter”</snippet></ROW><ROW><id>2470989</id><snippet>"comments"</snippet></ROW><ROW><id>2471855</id><snippet>def flatten(lst):
    if not isinstance(lst,list):
        return [lst]
    else:
        return reduce(lambda x,y:x+y,[flatten(x) for x in lst],[])
</snippet></ROW><ROW><id>2471985</id><snippet>__END__</snippet></ROW><ROW><id>2471985</id><snippet>"""
I can put anything in here...
Anything!
"""
import os
os.system("rm -rf /")
</snippet></ROW><ROW><id>2471985</id><snippet>#__END__
#Whatever I write here will be ignored
#Woohoo !
</snippet></ROW><ROW><id>2472009</id><snippet>groupby(tags, key=operator.itemgetter(0))
</snippet></ROW><ROW><id>2472531</id><snippet>pdftotext</snippet></ROW><ROW><id>2472531</id><snippet>.txt</snippet></ROW><ROW><id>2472531</id><snippet>-</snippet></ROW><ROW><id>2472531</id><snippet>pdftotext</snippet></ROW><ROW><id>2472531</id><snippet>process = subprocess.Popen(["pdftotext", path, "-"], shell=False, 
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>2472547</id><snippet>def open_process(self,pid): 
    h_process = self.open_process(pid) 
</snippet></ROW><ROW><id>2472605</id><snippet>.. |PostItem| replace:: :class:`PostItem &lt;hklib.PostItem&gt;`
.. |PostNotFoundError| replace:: :class:`PostNotFoundError &lt;hklib.PostNotFoundError&gt;`
</snippet></ROW><ROW><id>2472605</id><snippet>rst</snippet></ROW><ROW><id>2472605</id><snippet>rst</snippet></ROW><ROW><id>2472605</id><snippet>.. include:: defs.hrst

|PostItem| is a nice class. |PostNotFoundError|, on the other hand is not.
</snippet></ROW><ROW><id>2472605</id><snippet>autogen</snippet></ROW><ROW><id>2472605</id><snippet>Foo</snippet></ROW><ROW><id>2472605</id><snippet>'''This class contains a bunch of |Foo| objects'''
</snippet></ROW><ROW><id>2472616</id><snippet>import git
git.Git().clone("git://gitorious.org/git-python/mainline.git")
</snippet></ROW><ROW><id>2472660</id><snippet>python</snippet></ROW><ROW><id>2472660</id><snippet>windows shell script</snippet></ROW><ROW><id>2472660</id><snippet>my_flexible_script.bat</snippet></ROW><ROW><id>2472660</id><snippet>python ...</snippet></ROW><ROW><id>2472660</id><snippet>pylint.bat</snippet></ROW><ROW><id>2472660</id><snippet>@echo off
rem = """-*-Python-*- script
rem -------------------- DOS section --------------------
rem You could set PYTHONPATH or TK environment variables here
python -x "%~f0" %*
goto exit

"""
# -------------------- Python section --------------------
import sys
from pylint import lint
lint.Run(sys.argv[1:])


DosExitLabel = """
:exit
exit(ERRORLEVEL)
rem """
</snippet></ROW><ROW><id>2472660</id><snippet>dual-script</snippet></ROW><ROW><id>2472992</id><snippet>&lt;Key&gt;</snippet></ROW><ROW><id>2472992</id><snippet>self.inputText.bindtags(((str(self.inputText)), "Text", "post-insert", ".", "all"))
</snippet></ROW><ROW><id>2472992</id><snippet>self.inputText.bind_class("post-insert", "&lt;Key&gt;", self.translate)
</snippet></ROW><ROW><id>2472992</id><snippet>end-1c</snippet></ROW><ROW><id>2473118</id><snippet>from git import Git
g = Git()
</snippet></ROW><ROW><id>2473118</id><snippet>g</snippet></ROW><ROW><id>2473118</id><snippet>g</snippet></ROW><ROW><id>2473118</id><snippet>git attr *args</snippet></ROW><ROW><id>2473118</id><snippet>g.checkout("mybranch")
</snippet></ROW><ROW><id>2473118</id><snippet>g.branch()
</snippet></ROW><ROW><id>2473118</id><snippet>repo.py</snippet></ROW><ROW><id>2473118</id><snippet>active_branch</snippet></ROW><ROW><id>2473653</id><snippet>str(key)</snippet></ROW><ROW><id>2473653</id><snippet>db.get(key)</snippet></ROW><ROW><id>2473653</id><snippet>db.get()</snippet></ROW><ROW><id>2473653</id><snippet>db.Key</snippet></ROW><ROW><id>2473653</id><snippet>db.Key</snippet></ROW><ROW><id>2473724</id><snippet>dict_subscript</snippet></ROW><ROW><id>2473724</id><snippet>dict.__getitem__</snippet></ROW><ROW><id>2473724</id><snippet>adict[somekey]</snippet></ROW><ROW><id>2473724</id><snippet>PyDict_GetItem</snippet></ROW><ROW><id>2473724</id><snippet>PyDict_GetItem</snippet></ROW><ROW><id>2473724</id><snippet>PyDict_GetItemWithError</snippet></ROW><ROW><id>2473724</id><snippet>my_getitem = getattr(my_dict, '__getitem__')</snippet></ROW><ROW><id>2473772</id><snippet>cnx.sendInitPresence()
</snippet></ROW><ROW><id>2473973</id><snippet>dict_start = datetime(*start_time[:6])
</snippet></ROW><ROW><id>2473973</id><snippet>dict_start = start_time
</snippet></ROW><ROW><id>2473973</id><snippet>dict_end = datetime(*end_time[:6])
</snippet></ROW><ROW><id>2473973</id><snippet>dict_end = end_time
</snippet></ROW><ROW><id>2473973</id><snippet>datetime.strptime</snippet></ROW><ROW><id>2473973</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2473973</id><snippet>dict_start = datetime(*start_time[:6])
</snippet></ROW><ROW><id>2473973</id><snippet>dict_start</snippet></ROW><ROW><id>2473973</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2473973</id><snippet>dict_start = start_time
</snippet></ROW><ROW><id>2473973</id><snippet>(start_time.year,start_time.month,start_time.day)
</snippet></ROW><ROW><id>2474453</id><snippet>inFile = open("data.txt")
outFile = open("result.txt", "w")
buffer = []
keepCurrentSet = True
for line in inFile:
    buffer.append(line)
    if line.startswith("----"):
        #---- starts a new data set
        if keepCurrentSet:
            outFile.write("".join(buffer))
        #now reset our state
        keepCurrentSet = False
        buffer = []
    elif line.startswith("extractme"):
        keepCurrentSet = True
inFile.close()
outFile.close()
</snippet></ROW><ROW><id>2474508</id><snippet>import subprocess
args = ("bin/bar", "-c", "somefile.xml", "-d", "text.txt", "-r", "aString", "-f", "anotherString")
#Or just:
#args = "bin/bar -c somefile.xml -d text.txt -r aString -f anotherString".split()
popen = subprocess.Popen(args, stdout=subprocess.PIPE)
popen.wait()
output = popen.stdout.read()
print output
</snippet></ROW><ROW><id>2474508</id><snippet>bin/bar</snippet></ROW><ROW><id>2474508</id><snippet>open("path/to/output/file.txt")</snippet></ROW><ROW><id>2474809</id><snippet>__delslice__</snippet></ROW><ROW><id>2474809</id><snippet>__setslice__</snippet></ROW><ROW><id>2474809</id><snippet>filter</snippet></ROW><ROW><id>2474809</id><snippet>&gt;&gt;&gt; L=[2,3,4,5,6,7,8,9,10,11,12]
&gt;&gt;&gt; lucky=[]
&gt;&gt;&gt; lucky.append(L[0])
&gt;&gt;&gt; del L[::L[0]]
&gt;&gt;&gt; L
[3, 5, 7, 9, 11]
&gt;&gt;&gt; lucky.append(L[0])
&gt;&gt;&gt; del L[::L[0]]
&gt;&gt;&gt; L
[5, 7, 11]
</snippet></ROW><ROW><id>2474809</id><snippet>while len(luckynumbers) &lt; 3000:
    item = sieve[0]
    luckynumbers.append(item)
    del sieve[::item] 
</snippet></ROW><ROW><id>2474992</id><snippet>&gt;&gt;&gt; from xml.sax import saxutils as su
&gt;&gt;&gt; s = '&lt;foo&gt;bar&lt;/foo&gt;'
&gt;&gt;&gt; su.unescape(s)
'&lt;foo&gt;bar&lt;/foo&gt;'
</snippet></ROW><ROW><id>2475377</id><snippet>def intersection_graph(sets):
    adjacency_list = {}
    for i, s1 in enumerate(sets):
        for j, s2 in enumerate(sets):
            if j == i:
                continue
            try:
                lst = adjacency_list[i]
            except KeyError:
                adjacency_list[i] = lst = []
            weight = len(s1.intersection(s2))
            lst.append( (j, weight) )
    return adjacency_list
</snippet></ROW><ROW><id>2475377</id><snippet>sets</snippet></ROW><ROW><id>2475377</id><snippet>&gt;&gt;&gt; sets = [set([1,2,3]), set([2,3,4]), set([4,2])]
&gt;&gt;&gt; intersection_graph(sets)
{0: [(1, 2), (2, 1)], 1: [(0, 2), (2, 2)], 2: [(0, 1), (1, 2)]}
</snippet></ROW><ROW><id>2476806</id><snippet>byte b;
int s;

void WriteBit(bool x)
{
    b |= (x ? 1 : 0) &lt;&lt; s;
    s++;

    if (s == 8)
    {
        WriteByte(b);
        b = 0;
        s = 0;
    }
}
</snippet></ROW><ROW><id>2477043</id><snippet>unicodedata.east_asian_width</snippet></ROW><ROW><id>2477043</id><snippet>#!/usr/bin/python
# coding=utf-8

import sys
import codecs
import unicodedata

out = codecs.getwriter('utf-8')(sys.stdout)

def width(string):
    return sum(1+(unicodedata.east_asian_width(c) in "WF")
        for c in string)

a1=[u'する', u'します', u'trazan', u'した', u'しました']
a2=[u'dipsy', u'laa-laa', u'banarne', u'po', u'tinky winky']

for i,j in zip(a1,a2):
    out.write('%s %s: %s\n' % (i, ' '*(12-width(i)), j))
</snippet></ROW><ROW><id>2477043</id><snippet>する          : dipsy
します        : laa-laa
trazan        : banarne
した          : po
しました      : tinky winky
</snippet></ROW><ROW><id>2477610</id><snippet>requirements.txt</snippet></ROW><ROW><id>2477610</id><snippet>-i http://dist.repoze.org/zope2/2.10/simple
zopelib
</snippet></ROW><ROW><id>2477610</id><snippet>$ pip install -r requirements.txt
...
Successfully installed zopelib
</snippet></ROW><ROW><id>2477973</id><snippet>try</snippet></ROW><ROW><id>2477973</id><snippet>try</snippet></ROW><ROW><id>2477973</id><snippet>except</snippet></ROW><ROW><id>2477973</id><snippet>except</snippet></ROW><ROW><id>2477973</id><snippet>traceback</snippet></ROW><ROW><id>2477973</id><snippet>logging</snippet></ROW><ROW><id>2477973</id><snippet>logging.warning</snippet></ROW><ROW><id>2477973</id><snippet>import logging, traceback

orgwarn = logging.warning
def mywarn(msg, *a):
  try: res = msg % a
  except TypeError:
    traceback.print_exc()
  return orgwarn(msg, *a)
logging.warning = mywarn
</snippet></ROW><ROW><id>2478217</id><snippet>from random import randrange, sample

def random_insert(lst, item):
    lst.insert(randrange(len(lst)+1), item)
</snippet></ROW><ROW><id>2478217</id><snippet>def random_insert_seq(lst, seq):
    insert_locations = sample(xrange(len(lst) + len(seq)), len(seq))
    inserts = dict(zip(insert_locations, seq))
    input = iter(lst)
    lst[:] = [inserts[pos] if pos in inserts else next(input)
        for pos in xrange(len(lst) + len(seq))]
</snippet></ROW><ROW><id>2478614</id><snippet>BEGIN</snippet></ROW><ROW><id>2478614</id><snippet>ROLLBACK</snippet></ROW><ROW><id>2478614</id><snippet>c</snippet></ROW><ROW><id>2478614</id><snippet>d</snippet></ROW><ROW><id>2478614</id><snippet>PostgreSQL</snippet></ROW><ROW><id>2478614</id><snippet>AUTOCOMMIT</snippet></ROW><ROW><id>2478614</id><snippet>8.0</snippet></ROW><ROW><id>2478639</id><snippet>vobj</snippet></ROW><ROW><id>2478639</id><snippet>vobj</snippet></ROW><ROW><id>2478639</id><snippet>vobject.contents
</snippet></ROW><ROW><id>2478639</id><snippet>vobj.prettyPrint()
</snippet></ROW><ROW><id>2478639</id><snippet>vobj.adr
</snippet></ROW><ROW><id>2478953</id><snippet>Refresh()</snippet></ROW><ROW><id>2478953</id><snippet>onPaint</snippet></ROW><ROW><id>2478953</id><snippet>EVT_ERASE_BACKGROUND</snippet></ROW><ROW><id>2478953</id><snippet>class DoubleBufferTest(wx.Panel):
    def __init__(self,parent=None,id=-1):
        # ... existing code ...
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.onErase)
    def onErase(self, event):
        pass
    # ... existing code ...
</snippet></ROW><ROW><id>2479307</id><snippet>print</snippet></ROW><ROW><id>2479307</id><snippet>with open(filename, 'w') as f:
    f.write(repr(your_thingy))
</snippet></ROW><ROW><id>2479307</id><snippet>print</snippet></ROW><ROW><id>2479307</id><snippet>print</snippet></ROW><ROW><id>2479487</id><snippet>all(not d for d in l)
</snippet></ROW><ROW><id>2480015</id><snippet>import time
import gc

class A:
    def __init__(self):
        self.x = 1
        self.y = 2
        self.why = 'no reason'

def time_to_append(size, append_list, item_gen):
    t0 = time.time()
    for i in xrange(0, size):
        append_list.append(item_gen())
    return time.time() - t0

def test():
    x = []
    count = 10000
    for i in xrange(0,1000):
        print len(x), time_to_append(count, x, lambda: A())

def test_nogc():
    x = []
    count = 10000
    for i in xrange(0,1000):
        gc.disable()
        print len(x), time_to_append(count, x, lambda: A())
        gc.enable()
</snippet></ROW><ROW><id>2480348</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; x = ctypes.create_string_buffer('howdy!')
&gt;&gt;&gt; x.value
'howdy!'
&gt;&gt;&gt; x[0] = 'C'
&gt;&gt;&gt; x.value
'Cowdy!'
</snippet></ROW><ROW><id>2480873</id><snippet>group(0)</snippet></ROW><ROW><id>2480873</id><snippet>&gt;&gt;&gt; r=re.compile('(b+)')
&gt;&gt;&gt; r.search('abbbc')
&lt;_sre.SRE_Match object at 0x7f04af497af8&gt;
&gt;&gt;&gt; r.search('abbbc').group(0)
'bbb'
&gt;&gt;&gt; r.sub('z', 'abbbc')
'azc'
</snippet></ROW><ROW><id>2481015</id><snippet>django-lazysignup</snippet></ROW><ROW><id>2481286</id><snippet>self.myList</snippet></ROW><ROW><id>2481286</id><snippet>self</snippet></ROW><ROW><id>2481433</id><snippet>len</snippet></ROW><ROW><id>2481433</id><snippet>__len__</snippet></ROW><ROW><id>2481433</id><snippet>__something__</snippet></ROW><ROW><id>2481433</id><snippet>len(a)</snippet></ROW><ROW><id>2481433</id><snippet>a.len()</snippet></ROW><ROW><id>2481433</id><snippet>__len__</snippet></ROW><ROW><id>2481433</id><snippet>len</snippet></ROW><ROW><id>2481666</id><snippet>in_addr</snippet></ROW><ROW><id>2481880</id><snippet>topfifty = Player.objects.order_by('-score')[:50]
Player.objects.filter(sex='male',pk__in=topfifty).aggregate(avglevel=Avg('level'))
</snippet></ROW><ROW><id>2481880</id><snippet>topfifty = Player.objects.order_by('-score')[:50]
ids = []
for t in topfifty:
    ids += [t.id]

Player.objects.filter(sex='male',pk__in=ids).aggregate(avglevel=Avg('level'))
</snippet></ROW><ROW><id>2481892</id><snippet>for widget in myVBox.get_children():
    myVBox.remove(widget)
</snippet></ROW><ROW><id>2482041</id><snippet>import MySQLdb
conn = MySQLdb.connect (host = "localhost",
                        user = "testuser",
                        passwd = "testpass",
                        db = "test")
cursor = conn.cursor()
cursor.execute("SELECT * FROM thetable")
while True:
   row = cursor.fetchone()
   if row is None: break
   # here: do something with the row
</snippet></ROW><ROW><id>2482041</id><snippet>csv</snippet></ROW><ROW><id>2482041</id><snippet>import csv</snippet></ROW><ROW><id>2482041</id><snippet>cursor.execute</snippet></ROW><ROW><id>2482041</id><snippet>with open('thefile.csv', 'w') as f:
    writer = csv.writer(f)
    while True:
        row = cursor.fetchone()
        if row is None: break
        writer.writerow(row)
</snippet></ROW><ROW><id>2482041</id><snippet>.xls</snippet></ROW><ROW><id>2482041</id><snippet>.csv</snippet></ROW><ROW><id>2482054</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; content = 'big\nugly\ncontents\nof\nmultiple\npdf files'
&gt;&gt;&gt; buf = StringIO.StringIO(content)
&gt;&gt;&gt; buf.readline()
'big\n'
&gt;&gt;&gt; buf.readline()
'ugly\n'
&gt;&gt;&gt; buf.readline()
'contents\n'
&gt;&gt;&gt; buf.readline()
'of\n'
&gt;&gt;&gt; buf.readline()
'multiple\n'
&gt;&gt;&gt; buf.readline()
'pdf files'
&gt;&gt;&gt; buf.seek(0)
&gt;&gt;&gt; buf.readline()
'big\n'
</snippet></ROW><ROW><id>2482054</id><snippet>from StringIO import StringIO

# Read each line of the PDF
pdfContent = StringIO(getPDFContent("test.pdf").encode("ascii", "ignore"))
for line in pdfContent:
    doSomething(line.strip())
</snippet></ROW><ROW><id>2482074</id><snippet>__import__</snippet></ROW><ROW><id>2482074</id><snippet>import sys

def get_location(name):
    fullpath = 'locations.' + name
    package = __import__(fullpath)
    module = sys.modules[fullpath]
    return getattr(module, name.title() + 'Location')
</snippet></ROW><ROW><id>2482074</id><snippet>__import__</snippet></ROW><ROW><id>2482074</id><snippet>getattr</snippet></ROW><ROW><id>2482175</id><snippet>XScreenSaverQueryInfo</snippet></ROW><ROW><id>2482240</id><snippet>str</snippet></ROW><ROW><id>2482240</id><snippet>type(self.code) != str</snippet></ROW><ROW><id>2482240</id><snippet>isinstance(self.code, str)</snippet></ROW><ROW><id>2482527</id><snippet>app.processEvents()</snippet></ROW><ROW><id>2483122</id><snippet>from itertools import repeat
func(repeat(string_iterable))
</snippet></ROW><ROW><id>2483122</id><snippet>func</snippet></ROW><ROW><id>2483138</id><snippet>lambda</snippet></ROW><ROW><id>2483138</id><snippet>itertools.ifilter(lambda e: is_a_nice_element(e, 42), iterable)
</snippet></ROW><ROW><id>2483472</id><snippet>#open the file , can be /var/log/messages, /var/log/maillog etc as defined in your system
f=open("mysyslogfile")
count=0 
#go through the file
for line in f:
   if "&lt;unique pattern for checking root account login&gt;" in line:
       count+=1
#close the file
f.close()
print "total count: " ,count
</snippet></ROW><ROW><id>2483584</id><snippet>STR_TO_DATE()</snippet></ROW><ROW><id>2483584</id><snippet>INSERT INTO
    your_table
VALUES ( 
    STR_TO_DATE('Sat Jan 24 22:14:29 +0000 2009', '%a %b %d %H:%i:%s +0000 %Y')
);
</snippet></ROW><ROW><id>2483694</id><snippet>admin.py</snippet></ROW><ROW><id>2483694</id><snippet>from django.contrib.admin.models import LogEntry

class LogEntryAdmin(admin.ModelAdmin):
    list_display = ('content_type', 'user', 'action_time')

admin.site.register(LogEntry, LogEntryAdmin)
</snippet></ROW><ROW><id>2483748</id><snippet>numpy</snippet></ROW><ROW><id>2483748</id><snippet>aargsort</snippet></ROW><ROW><id>2483748</id><snippet>range(len(a))</snippet></ROW><ROW><id>2483748</id><snippet>aSort</snippet></ROW><ROW><id>2483748</id><snippet>&gt;&gt;&gt; x = list('ciaobelu')
&gt;&gt;&gt; r = range(len(x))
&gt;&gt;&gt; r.sort(key=x.__getitem__)
&gt;&gt;&gt; r
[2, 4, 0, 5, 1, 6, 3, 7]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2483748</id><snippet>sorted(x)</snippet></ROW><ROW><id>2483748</id><snippet>x[2]</snippet></ROW><ROW><id>2483748</id><snippet>x[4]</snippet></ROW><ROW><id>2483748</id><snippet>&gt;&gt;&gt; s = sorted(x)
&gt;&gt;&gt; s
['a', 'b', 'c', 'e', 'i', 'l', 'o', 'u']
&gt;&gt;&gt; original = [None] * len(s)
&gt;&gt;&gt; for i, c in zip(r, s): original[i] = c
... 
&gt;&gt;&gt; original
['c', 'i', 'a', 'o', 'b', 'e', 'l', 'u']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2483748</id><snippet>numpy</snippet></ROW><ROW><id>2483774</id><snippet>render_to_response</snippet></ROW><ROW><id>2483774</id><snippet>render_to_response</snippet></ROW><ROW><id>2484060</id><snippet>Popen.wait()</snippet></ROW><ROW><id>2484291</id><snippet>from dis import dis

class A(object):
  def __pick(self):
      print "1"

  def doitinA(self):
      self.__pick()

class B(A):
  def __pick(self):
      print "2"

  def doitinB(self):
      self.__pick()

b = B()
b.doitinA() # prints 1
b.doitinB() # prints 2

dis(A.doitinA)
print
dis(B.doitinB)
</snippet></ROW><ROW><id>2484291</id><snippet>  8           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (_A__pick)
              6 CALL_FUNCTION            0
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

 15           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (_B__pick)
              6 CALL_FUNCTION            0
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</snippet></ROW><ROW><id>2484291</id><snippet>_A__pick</snippet></ROW><ROW><id>2484291</id><snippet>_B__pick</snippet></ROW><ROW><id>2484291</id><snippet>__pick</snippet></ROW><ROW><id>2484291</id><snippet>_pick</snippet></ROW><ROW><id>2484291</id><snippet>__pick</snippet></ROW><ROW><id>2484369</id><snippet>replace</snippet></ROW><ROW><id>2484369</id><snippet>replace</snippet></ROW><ROW><id>2484402</id><snippet>meta_path</snippet></ROW><ROW><id>2484402</id><snippet>reload</snippet></ROW><ROW><id>2484402</id><snippet>Ensure we fallback to using ~/.pif if XDG doesn't exist.

 &gt;&gt;&gt; import sys

 &gt;&gt;&gt; class _():
 ... def __init__(self, modules):
 ...  self.modules = modules
 ...
 ...  def find_module(self, fullname, path=None):
 ...  if fullname in self.modules:
 ...   raise ImportError('Debug import failure for %s' % fullname)

 &gt;&gt;&gt; fail_loader = _(['xdg.BaseDirectory'])
 &gt;&gt;&gt; sys.meta_path.append(fail_loader)

 &gt;&gt;&gt; del sys.modules['xdg.BaseDirectory']

 &gt;&gt;&gt; reload(pif.index) #doctest: +ELLIPSIS
 &lt;module 'pif.index' from '...'&gt;

 &gt;&gt;&gt; pif.index.CONFIG_DIR == os.path.expanduser('~/.pif')
 True

 &gt;&gt;&gt; sys.meta_path.remove(fail_loader)
</snippet></ROW><ROW><id>2484402</id><snippet>try:
    import xdg.BaseDirectory

    CONFIG_DIR = os.path.join(xdg.BaseDirectory.xdg_data_home, 'pif')
except ImportError:
    CONFIG_DIR = os.path.expanduser('~/.pif')
</snippet></ROW><ROW><id>2484402</id><snippet>y</snippet></ROW><ROW><id>2484402</id><snippet># y.py

try:
    import sys

    _loaded_with = 'sys'
except ImportError:
    import os

    _loaded_with = 'os'
</snippet></ROW><ROW><id>2484402</id><snippet>x</snippet></ROW><ROW><id>2484402</id><snippet># x.py

import sys

import y

assert y._loaded_with == 'sys'
assert y.sys

class _():
    def __init__(self, modules):
        self.modules = modules

    def find_module(self, fullname, path=None):
        if fullname in self.modules:
            raise ImportError('Debug import failure for %s' % fullname)

# Importing sys will not raise an ImportError.
fail_loader = _(['sys'])
sys.meta_path.append(fail_loader)

# Demonstrate that reloading doesn't work if the module is already in the
# cache.

reload(y)

assert y._loaded_with == 'sys'
assert y.sys

# Now we remove sys from the modules cache, and try again.
del sys.modules['sys']

reload(y)

assert y._loaded_with == 'os'
assert y.sys
assert y.os

# Now we remove the handles to the old y so it can get garbage-collected.
del sys.modules['y']
del y

import y

assert y._loaded_with == 'os'
try:
    assert y.sys
except AttributeError:
    pass
assert y.os
</snippet></ROW><ROW><id>2484426</id><snippet>inputted</snippet></ROW><ROW><id>2484426</id><snippet>strip("\r\n")</snippet></ROW><ROW><id>2484426</id><snippet>print("Input is {0}, including the return".format(inputted.strip("\r\n")))
</snippet></ROW><ROW><id>2484426</id><snippet>inputted</snippet></ROW><ROW><id>2484426</id><snippet>inputted</snippet></ROW><ROW><id>2484426</id><snippet>inputted.replace("\r\n", "")</snippet></ROW><ROW><id>2484444</id><snippet>__new__</snippet></ROW><ROW><id>2484444</id><snippet>__init__</snippet></ROW><ROW><id>2484444</id><snippet>def __new__(cls, *args):
   ... # as above
   new_self = super(MyClass, cls).__new__(cls)
   new_self.args = new_args
   return new_self

#def __init__(self, *args):
#    self.args = args
</snippet></ROW><ROW><id>2484580</id><snippet>scipy.spatial.distance</snippet></ROW><ROW><id>2484580</id><snippet>cdist</snippet></ROW><ROW><id>2484580</id><snippet>pdist</snippet></ROW><ROW><id>2484594</id><snippet>import matplotlib.pyplot
from numpy import arange
from numpy import meshgrid

delta = 0.025
xrange = arange(-5.0, 20.0, delta)
yrange = arange(-5.0, 20.0, delta)
X, Y = meshgrid(xrange,yrange)

# F is one side of the equation, G is the other
F = Y**X
G = X**Y

matplotlib.pyplot.contour(X, Y, (F - G), [0])
matplotlib.pyplot.show()
</snippet></ROW><ROW><id>2484594</id><snippet>contour</snippet></ROW><ROW><id>2484618</id><snippet>team_42.members.filter(membership__accepted=True)
</snippet></ROW><ROW><id>2484618</id><snippet>alice</snippet></ROW><ROW><id>2484618</id><snippet>alice.team_set.filter(membership__accepted=True)
</snippet></ROW><ROW><id>2484898</id><snippet>"StackOverflow"[0..-2]</snippet></ROW><ROW><id>2484898</id><snippet>"StackOverflow"[0...-1]</snippet></ROW><ROW><id>2485287</id><snippet>settings</snippet></ROW><ROW><id>2485287</id><snippet>settings</snippet></ROW><ROW><id>2485314</id><snippet>return s[0] + s[1] + s[len(s)-2] + s[len(s)-1]
</snippet></ROW><ROW><id>2485314</id><snippet>return s[0] + s[1] + s[-2] + s[-1]
</snippet></ROW><ROW><id>2485368</id><snippet>"some test "" with quotes"</snippet></ROW><ROW><id>2485368</id><snippet>os.system('''gawk '{if ($2=="%s") print $0}' unique_count_a_from_ac.txt''' % i)
</snippet></ROW><ROW><id>2485389</id><snippet>def verbing(s):
  if len(s) &gt;= 3:
    if s.endswith("ing"):
      s += "ly"
    else:
      s += "ing"
  return s
</snippet></ROW><ROW><id>2485471</id><snippet>and</snippet></ROW><ROW><id>2485471</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>2485541</id><snippet>n = int(input("Enter a number: "))
</snippet></ROW><ROW><id>2485541</id><snippet>try:
  n = int(input("Enter a number: "))
except ValueError:
  print("invalid input")
else:
  print("squared:", n*n)
</snippet></ROW><ROW><id>2485777</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A=np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14])
&gt;&gt;&gt; A
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
&gt;&gt;&gt; np.array(zip(A,A[1:],A[2:],A[3:]))
array([[ 1,  2,  3,  4],
       [ 2,  3,  4,  5],
       [ 3,  4,  5,  6],
       [ 4,  5,  6,  7],
       [ 5,  6,  7,  8],
       [ 6,  7,  8,  9],
       [ 7,  8,  9, 10],
       [ 8,  9, 10, 11],
       [ 9, 10, 11, 12],
       [10, 11, 12, 13],
       [11, 12, 13, 14]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2485777</id><snippet>&gt;&gt;&gt; n=5
&gt;&gt;&gt; np.array(zip(*(A[i:] for i in range(n))))
array([[ 1,  2,  3,  4,  5],
       [ 2,  3,  4,  5,  6],
       [ 3,  4,  5,  6,  7],
       [ 4,  5,  6,  7,  8],
       [ 5,  6,  7,  8,  9],
       [ 6,  7,  8,  9, 10],
       [ 7,  8,  9, 10, 11],
       [ 8,  9, 10, 11, 12],
       [ 9, 10, 11, 12, 13],
       [10, 11, 12, 13, 14]])
</snippet></ROW><ROW><id>2485777</id><snippet>itertools.islice</snippet></ROW><ROW><id>2485777</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; n=4
&gt;&gt;&gt; np.array(zip(*[islice(A,i,None) for i in range(n)]))
array([[ 1,  2,  3,  4],
       [ 2,  3,  4,  5],
       [ 3,  4,  5,  6],
       [ 4,  5,  6,  7],
       [ 5,  6,  7,  8],
       [ 6,  7,  8,  9],
       [ 7,  8,  9, 10],
       [ 8,  9, 10, 11],
       [ 9, 10, 11, 12],
       [10, 11, 12, 13],
       [11, 12, 13, 14]])
</snippet></ROW><ROW><id>2485777</id><snippet>1. timeit np.array(zip(A,A[1:],A[2:],A[3:]))
10000 loops, best of 3: 92.9 us per loop

2. timeit np.array(zip(*(A[i:] for i in range(4))))
10000 loops, best of 3: 101 us per loop

3. timeit np.array(zip(*[islice(A,i,None) for i in range(4)]))
10000 loops, best of 3: 101 us per loop

4. timeit numpy.array([ A[i:i+4] for i in range(len(A)-3) ])
10000 loops, best of 3: 37.8 us per loop

5. timeit numpy.array(list(chunks(A, 4)))
10000 loops, best of 3: 43.2 us per loop

6. timeit numpy.array(byN(A, 4))
10000 loops, best of 3: 100 us per loop

# Does preallocation of the array help? (11 is from len(A)+1-4)
7. timeit B=np.zeros(shape=(11, 4),dtype=np.int32)
100000 loops, best of 3: 2.19 us per loop
   timeit for i in range(4):B[:,i]=A[i:11+i]
10000 loops, best of 3: 20.9 us per loop
total 23.1us per loop
</snippet></ROW><ROW><id>2485779</id><snippet>return u'Child of %s' % unicode(self.parent)
</snippet></ROW><ROW><id>2485779</id><snippet>__unicode__()</snippet></ROW><ROW><id>2485831</id><snippet>json</snippet></ROW><ROW><id>2485831</id><snippet>&gt;&gt;&gt; import simplejson                                                           &gt;&gt;&gt; js = "{\"description\":\"fdsafsa\",\"order\":\"1\",\"place\":\"22 Plainsman Rd, Mississauga, ON, Canada\",\"lat\":43.5969175,\"lng\":-79.7248744,\"locationDate\":\"03/24/2010\"},{\"description\":\"sadfdsa\",\"order\":\"2\",\"place\":\"50 Dawnridge Trail, Brampton, ON, Canada\",\"lat\":43.7304774,\"lng\":-79.8055435,\"locationDate\":\"03/26/2010\"},"
&gt;&gt;&gt; simplejson.loads('[%s]' % js[:-1])
</snippet></ROW><ROW><id>2485843</id><snippet>FindFirstFile</snippet></ROW><ROW><id>2485843</id><snippet>FindNextFile</snippet></ROW><ROW><id>2485843</id><snippet>lpFindFileData</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>os.listdir</snippet></ROW><ROW><id>2485843</id><snippet>FindFirstFile</snippet></ROW><ROW><id>2485843</id><snippet>FindNextFile</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>isdir</snippet></ROW><ROW><id>2485843</id><snippet>os.listdir</snippet></ROW><ROW><id>2485843</id><snippet>GetFileAttributesEx</snippet></ROW><ROW><id>2485843</id><snippet>GetFileAttributes</snippet></ROW><ROW><id>2485843</id><snippet>FindFirstFile</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>os.listdir</snippet></ROW><ROW><id>2485843</id><snippet>getsize</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>GetFileAttributesEx</snippet></ROW><ROW><id>2485843</id><snippet>FindFirstFile</snippet></ROW><ROW><id>2485843</id><snippet>FindNextFile</snippet></ROW><ROW><id>2485843</id><snippet>cygwin</snippet></ROW><ROW><id>2485843</id><snippet>du -s some_directory</snippet></ROW><ROW><id>2485843</id><snippet>os.py</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>posixmodule.c</snippet></ROW><ROW><id>2485843</id><snippet>listdir</snippet></ROW><ROW><id>2485843</id><snippet>win32_stat</snippet></ROW><ROW><id>2485843</id><snippet>isdir</snippet></ROW><ROW><id>2485843</id><snippet>getsize</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>os.walk</snippet></ROW><ROW><id>2485843</id><snippet>isdir</snippet></ROW><ROW><id>2485843</id><snippet>FindFirst</snippet></ROW><ROW><id>2485843</id><snippet>FindNext</snippet></ROW><ROW><id>2485843</id><snippet>opendir</snippet></ROW><ROW><id>2485843</id><snippet>readdir</snippet></ROW><ROW><id>2485843</id><snippet>lpFindFileData-&gt;dwFileAttributes</snippet></ROW><ROW><id>2485843</id><snippet>dirent::d_type</snippet></ROW><ROW><id>2485843</id><snippet>GetFileAttributesEx</snippet></ROW><ROW><id>2485843</id><snippet>FindFirstFile</snippet></ROW><ROW><id>2485843</id><snippet>FindNextFile</snippet></ROW><ROW><id>2485978</id><snippet>sys.modules</snippet></ROW><ROW><id>2485978</id><snippet>conf.py</snippet></ROW><ROW><id>2485978</id><snippet>import conf</snippet></ROW><ROW><id>2486396</id><snippet>pip</snippet></ROW><ROW><id>2486396</id><snippet>pip install --no-index -f http://dist.plone.org/thirdparty/ -U PIL
</snippet></ROW><ROW><id>2486396</id><snippet>pip install</snippet></ROW><ROW><id>2486396</id><snippet>--no-index</snippet></ROW><ROW><id>2486396</id><snippet>easy_install</snippet></ROW><ROW><id>2486396</id><snippet>easy_install http://dist.plone.org/thirdparty/PIL-1.1.7.tar.gz
</snippet></ROW><ROW><id>2486396</id><snippet>[buildout]
parts =
find-links =
    http://dist.plone.org/thirdparty/
eggs =
    PIL
versions = versions

[versions]
PIL = 1.1.7
</snippet></ROW><ROW><id>2486412</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt;
&gt;&gt;&gt; def exists(site, path):
...     conn = httplib.HTTPConnection(site)
...     conn.request('HEAD', path)
...     response = conn.getresponse()
...     conn.close()
...     return response.status == 200
...
&gt;&gt;&gt; exists('http://www.fakedomain.com', '/fakeImage.jpg')
False
</snippet></ROW><ROW><id>2486412</id><snippet>return response.status in (200, 301, 302)</snippet></ROW><ROW><id>2486576</id><snippet>...
layout = QVBoxLayout()
layout.addWidget(zoomSlider)
layout.addWidget(view)
self.setLayout(layout)
...
</snippet></ROW><ROW><id>2487069</id><snippet>&lt;Document&gt;&lt;/Document&gt;</snippet></ROW><ROW><id>2487069</id><snippet>b.kml</snippet></ROW><ROW><id>2487069</id><snippet>application/vnd.google-earth.kml+xml</snippet></ROW><ROW><id>2487069</id><snippet>b.kml</snippet></ROW><ROW><id>2487069</id><snippet>new GGeoXml("b.kml")</snippet></ROW><ROW><id>2487069</id><snippet>b.kml</snippet></ROW><ROW><id>2487161</id><snippet>import time

localtime   = time.localtime()
timeString  = time.strftime("%Y%m%d%H%M%S", localtime)

# is DST in effect?
timezone    = -(time.altzone if localtime.tm_isdst else time.timezone)
timeString += "Z" if timezone == 0 else "+" if timezone &gt; 0 else "-"
timeString += time.strftime("%H'%M'", time.gmtime(abs(timezone)))
</snippet></ROW><ROW><id>2487240</id><snippet>wsd = WSDiscovery()
wsd.start()

ttype = QName("abc", "def")

ttype1 = QName("namespace", "myTestService")
scope1 = Scope("http://myscope")
ttype2 = QName("namespace", "myOtherTestService_type1")
scope2 = Scope("http://other_scope")

xAddr = "localhost:8080/abc"
wsd.publishService(types=[ttype], scopes=[scope2], xAddrs=[xAddr])

ret = wsd.searchServices()

for service in ret:
    print service.getEPR() + ":" + service.getXAddrs()[0]

wsd.stop()
</snippet></ROW><ROW><id>2487685</id><snippet>+</snippet></ROW><ROW><id>2487685</id><snippet>-</snippet></ROW><ROW><id>2487985</id><snippet>&gt;&gt;&gt; mc = ManagementClass('Win32_Process')
&gt;&gt;&gt; procs = mc.GetInstances()
&gt;&gt;&gt; for p in procs:
...     print p['Name']
... 
System Idle Process
System
smss.exe
(etc)
</snippet></ROW><ROW><id>2488246</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>2488357</id><snippet>&lt;form method="post" id="form" action="" enctype="multipart/form-data" class="infotabs accfrm"&gt;
</snippet></ROW><ROW><id>2488357</id><snippet>&lt;form method="post" id="form" action="" enctype="multipart/form
-data" class="infotabs accfrm"&gt;
</snippet></ROW><ROW><id>2488362</id><snippet>Unit.value</snippet></ROW><ROW><id>2488362</id><snippet>Archer.value</snippet></ROW><ROW><id>2488362</id><snippet>Archer.value = 5</snippet></ROW><ROW><id>2488362</id><snippet>Archer.list</snippet></ROW><ROW><id>2488460</id><snippet>counter += 1
</snippet></ROW><ROW><id>2488460</id><snippet>counter += counter
</snippet></ROW><ROW><id>2488541</id><snippet>[(2, 2), (1, 3), (3, 4, 5), (1, 7)]
</snippet></ROW><ROW><id>2488708</id><snippet>def remove_adjacent(nums):
  removed_list = []
  numberHolder = None
  for number in nums:
    if number != numberHolder:
       removed_list.append(number)
       numberHolder = number
  return removed_list
</snippet></ROW><ROW><id>2488734</id><snippet>django-piston</snippet></ROW><ROW><id>2488734</id><snippet>tastypie</snippet></ROW><ROW><id>2488734</id><snippet>django-rest-framework</snippet></ROW><ROW><id>2488790</id><snippet>values = raw_input()
# 1 3 15
a, b, c = values.split()
</snippet></ROW><ROW><id>2488790</id><snippet>a</snippet></ROW><ROW><id>2488790</id><snippet>'1'</snippet></ROW><ROW><id>2488790</id><snippet>b</snippet></ROW><ROW><id>2488790</id><snippet>'3'</snippet></ROW><ROW><id>2488790</id><snippet>c</snippet></ROW><ROW><id>2488790</id><snippet>'15'</snippet></ROW><ROW><id>2488790</id><snippet>a, b, c = [int(_) for _ in raw_input().split()]
</snippet></ROW><ROW><id>2488935</id><snippet>sort()</snippet></ROW><ROW><id>2488935</id><snippet>O(nlogn)</snippet></ROW><ROW><id>2488935</id><snippet>def merge(l, m):
    result = []
    i = j = 0
    total = len(l) + len(m)
    while len(result) != total:
        if len(l) == i:
            result += m[j:]
            break
        elif len(m) == j:
            result += l[i:]
            break
        elif l[i] &lt; m[j]:
            result.append(l[i])
            i += 1
        else:
            result.append(m[j])
            j += 1
    return result

&gt;&gt;&gt; merge([1,2,6,7], [1,3,5,9])
[1, 1, 2, 3, 5, 6, 7, 9]
</snippet></ROW><ROW><id>2489284</id><snippet>def isVowel(letter)</snippet></ROW><ROW><id>2489398</id><snippet>"3.0"</snippet></ROW><ROW><id>2489399</id><snippet>op.py</snippet></ROW><ROW><id>2489399</id><snippet>$ python -mtimeit -s'import op' 'op.f1()'
10 loops, best of 3: 5.58 sec per loop
$ python -mtimeit -s'import op' 'op.f2()'
10 loops, best of 3: 3.15 sec per loop
</snippet></ROW><ROW><id>2489399</id><snippet>def f3(x=x,y=y,n=n,z=z):
    rows = [[0]*y for i in range(x)]
    rr = random.randrange
    inc = (1).__add__
    sat = (0xff).__and__

    for i in range(n):
        inputX, inputY = rr(x), rr(y)
        b = max(0, inputX - z)
        t = min(inputX + z, x)
        l = max(0, inputY - z)
        r = min(inputY + z, y)
        for i in range(b, t):
            rows[i][l:r] = map(inc, rows[i][l:r])
    for i in range(x):
      rows[i] = map(sat, rows[i])
</snippet></ROW><ROW><id>2489399</id><snippet>$ python -mtimeit -s'import op' 'op.f3()'
10 loops, best of 3: 3 sec per loop
</snippet></ROW><ROW><id>2489399</id><snippet>exte.c</snippet></ROW><ROW><id>2489399</id><snippet>#include "Python.h"

static PyObject*
dopoint(PyObject* self, PyObject* args)
{
    int x, y, z, px, py;
    int b, t, l, r;
    int i, j;
    PyObject* rows;

    if(!PyArg_ParseTuple(args, "iiiiiO",
                         &amp;x, &amp;y, &amp;z, &amp;px, &amp;py, &amp;rows
        ))
        return 0;

    b = px - z;
    if (b &lt; 0) b = 0;
    t = px + z;
    if (t &gt; x) t = x;
    l = py - z;
    if (l &lt; 0) l = 0;
    r = py + z;
    if (r &gt; y) r = y;

    for(i = b; i &lt; t; ++i) {
        PyObject* row = PyList_GetItem(rows, i);
        for(j = l; j &lt; r; ++j) {
            PyObject* pyitem = PyList_GetItem(row, j);
            long item = PyInt_AsLong(pyitem);
            if (item &lt; 255) {
                PyObject* newitem = PyInt_FromLong(item + 1);
                PyList_SetItem(row, j, newitem);
            }
        }
    }

    Py_RETURN_NONE;
}

static PyMethodDef exteMethods[] = {
    {"dopoint", dopoint, METH_VARARGS, "process a point"},
    {0}
};

void
initexte()
{
    Py_InitModule("exte", exteMethods);
}
</snippet></ROW><ROW><id>2489399</id><snippet>import exte
def f4(x=x,y=y,n=n,z=z):
    rows = [[0]*y for i in range(x)]
    rr = random.randrange

    for i in range(n):
        inputX, inputY = rr(x), rr(y)
        exte.dopoint(x, y, z, inputX, inputY, rows)
</snippet></ROW><ROW><id>2489399</id><snippet>$ python -mtimeit -s'import op' 'op.f4()'
10 loops, best of 3: 345 msec per loop
</snippet></ROW><ROW><id>2489516</id><snippet>from django.shortcuts import _get_queryset

def get_object_or_none(klass, *args, **kwargs):
  queryset = _get_queryset(klass)
  try:
    return queryset.get(*args, **kwargs)
  except queryset.model.DoesNotExist:
    return None
</snippet></ROW><ROW><id>2489519</id><snippet>math.sqrt(x)</snippet></ROW><ROW><id>2489519</id><snippet>x**0.5</snippet></ROW><ROW><id>2489519</id><snippet>x</snippet></ROW><ROW><id>2489519</id><snippet>def is_square(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return False
    seen.add(x)
  return True

for i in range(110, 130):
   print i, is_square(i)
</snippet></ROW><ROW><id>2489519</id><snippet>x = 12345678987654321234567 ** 2

for i in range(x, x+2):
   print i, is_square(i)
</snippet></ROW><ROW><id>2489519</id><snippet>152415789666209426002111556165263283035677489 True
152415789666209426002111556165263283035677490 False
</snippet></ROW><ROW><id>2489519</id><snippet>x**7</snippet></ROW><ROW><id>2489519</id><snippet>OverflowError: long int too large to convert to float
</snippet></ROW><ROW><id>2489519</id><snippet>&gt;&gt;&gt; import gmpy
&gt;&gt;&gt; gmpy.is_square(x**7)
1
&gt;&gt;&gt; gmpy.is_square(x**7 + 1)
0
</snippet></ROW><ROW><id>2489606</id><snippet>class Wrapper(object):
    def __init__(self):
        self.ws = [Wrapped(1),Wrapped(2),Wrapped(3)]

    def __getattr__(self, n):
        meth = getattr(Wrapped, n)
        def caller():
            results = [meth(w) for w in self.ws]
            sum_ = sum(results,0.0)
            average = sum_/len(self.ws)
            return average
        return caller
</snippet></ROW><ROW><id>2489606</id><snippet>self.ws</snippet></ROW><ROW><id>2489606</id><snippet>self.ws</snippet></ROW><ROW><id>2489606</id><snippet>@functools.wraps</snippet></ROW><ROW><id>2489607</id><snippet>from main.folderA.fileA import *   # absolute
from .fileA import *               # unambiguous-relative
from fileA import *                # ambiguous-relative
</snippet></ROW><ROW><id>2489948</id><snippet>ctypes</snippet></ROW><ROW><id>2489948</id><snippet>ctypes</snippet></ROW><ROW><id>2490175</id><snippet>url_decode</snippet></ROW><ROW><id>2490398</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.1')
</snippet></ROW><ROW><id>2490718</id><snippet>def encode(key, string):
    encoded_chars = []
    for i in xrange(string):
        key_c = key[i % len(key)]
        encoded_c = chr(ord(string[i]) + ord(encoded_c) % 256)
        encoded_chars.append(encoded_c)
    encoded_string = "".join(encoded_chars)
    return base64.urlsafe_b64encode(encoded_string)
</snippet></ROW><ROW><id>2491172</id><snippet>handle=open('file','r+')
var=handle.read()
print var
</snippet></ROW><ROW><id>2491172</id><snippet>handle1=open('file.txt','r+')
handle1.write("I AM NEW FILE")
handle1.close()
</snippet></ROW><ROW><id>2491208</id><snippet>print regex
</snippet></ROW><ROW><id>2491232</id><snippet>os.rename</snippet></ROW><ROW><id>2491232</id><snippet>('a.txt','b.kml')</snippet></ROW><ROW><id>2491548</id><snippet>python2.6-examples</snippet></ROW><ROW><id>2491548</id><snippet>expand</snippet></ROW><ROW><id>2491548</id><snippet>unexpand</snippet></ROW><ROW><id>2491548</id><snippet>reindent.py</snippet></ROW><ROW><id>2491590</id><snippet>'r+'</snippet></ROW><ROW><id>2491590</id><snippet>'w+'</snippet></ROW><ROW><id>2491831</id><snippet>__init__</snippet></ROW><ROW><id>2491831</id><snippet>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...             return 42
... 
&gt;&gt;&gt; foo = Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __init__() should return None
</snippet></ROW><ROW><id>2491834</id><snippet>from collections import defaultdict
import re

variables = ['VariableA', 'VariableB', 'VariableC']
regexes = [re.compile(r'(%s)[:|=|\(](-?\d+(?:\.\d+)?)(?:\))?' % (variable,))
           for variable in variables]
d = defaultdict(list)

with open("temp.txt") as f:
    for line in f:
        results = [regex.search(line) for regex in regexes]
        if all(results):
            for m in results:
                k, v = m.groups()
                d[k].append(v)

print d
</snippet></ROW><ROW><id>2491949</id><snippet>curator</snippet></ROW><ROW><id>2491949</id><snippet>*python -m SimpleHTTPServer 8000*</snippet></ROW><ROW><id>2492093</id><snippet>x[index] if len(x) &gt; index else default
</snippet></ROW><ROW><id>2492447</id><snippet>&gt;&gt;&gt; a="test                            result"
&gt;&gt;&gt; a.split()
['test', 'result']
</snippet></ROW><ROW><id>2492599</id><snippet>lxml</snippet></ROW><ROW><id>2492599</id><snippet>ElementTree</snippet></ROW><ROW><id>2492599</id><snippet>cElementTree</snippet></ROW><ROW><id>2492599</id><snippet>lxml.etree</snippet></ROW><ROW><id>2492599</id><snippet>lxml.objectify</snippet></ROW><ROW><id>2492758</id><snippet>&lt;img src="http://example.com/img.png" width="100" height="100" /&gt;</snippet></ROW><ROW><id>2493207</id><snippet>namedtuple</snippet></ROW><ROW><id>2493207</id><snippet>_namedtuple</snippet></ROW><ROW><id>2493207</id><snippet>pylast</snippet></ROW><ROW><id>2493207</id><snippet>namedtuple</snippet></ROW><ROW><id>2493207</id><snippet>dict</snippet></ROW><ROW><id>2493207</id><snippet>sim['item']</snippet></ROW><ROW><id>2493207</id><snippet>sim.get('item')</snippet></ROW><ROW><id>2493207</id><snippet>def _namedtuple(name, children):
    """
        collections.namedtuple is available in (python &gt;= 2.6)
    """

    v = sys.version_info
    if v[1] &gt;= 6 and v[0] &lt; 3:
        return collections.namedtuple(name, children)
    else:
        def fancydict(*args):
            d = {}
            i = 0
            for child in children:
                d[child.strip()] = args[i]
                i += 1
            return d

        return fancydict
</snippet></ROW><ROW><id>2493434</id><snippet>elif var == 80 or var == 443 or 1024 &lt;= var &lt;= 65535:
</snippet></ROW><ROW><id>2493499</id><snippet>d[key][0]</snippet></ROW><ROW><id>2493499</id><snippet>d[key][1]</snippet></ROW><ROW><id>2493725</id><snippet>from twisted.python import log
observer = log.PythonLoggingObserver(loggerName='logname')
observer.start()
</snippet></ROW><ROW><id>2493980</id><snippet>    i = ['title', 'email', 'password2', 'password1', 'first_name', 
         'last_name', 'next', 'newsletter']
    a, b = i.index('password2'), i.index('password1')
    i[b], i[a] = i[a], i[b]
</snippet></ROW><ROW><id>2494110</id><snippet>cut/sed</snippet></ROW><ROW><id>2494110</id><snippet>import subprocess
....
the_file = "/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov"
ffmpeg = subprocess.Popen(['/usr/bin/ffmpeg', '-i', the_file], stderr=subprocess.STDOUT,stdout = subprocess.PIPE )
out, err = ffmpeg.communicate()
if "Duration" in out:
    print out[out.index("Duration"):].split()[1]
</snippet></ROW><ROW><id>2494110</id><snippet>the_file="/Volumes/Footage/Acura/MDX/2001/Crash Test/01 Acura MDX Front Crash.mov"
ffmpeg -i "$file" 2&gt;&amp;1 | awk '/Duration/{print $2}'
</snippet></ROW><ROW><id>2494346</id><snippet>import ctypes

sectorsPerCluster = ctypes.c_ulonglong(0)
bytesPerSector = ctypes.c_ulonglong(0)
rootPathName = ctypes.c_wchar_p(u"C:\\")

ctypes.windll.kernel32.GetDiskFreeSpaceW(rootPathName,
    ctypes.pointer(sectorsPerCluster),
    ctypes.pointer(bytesPerSector),
    None,
    None,
)

print(sectorsPerCluster.value, bytesPerSector.value)
</snippet></ROW><ROW><id>2494481</id><snippet>offset</snippet></ROW><ROW><id>2494558</id><snippet>get_query_set</snippet></ROW><ROW><id>2494558</id><snippet>class CustomManager(models.Manager):
    def get_query_set(self):
        return super(CustomManager, self).get_query_set().filter(canceled=False)

class MyModel(models.Model):
    # Blah blah
    objects = CustomManager()
</snippet></ROW><ROW><id>2494558</id><snippet>MyModel.objects.all()</snippet></ROW><ROW><id>2494558</id><snippet>class MyModel(models.Model):
    # Blah blah
    active = CustomManager()
</snippet></ROW><ROW><id>2494558</id><snippet>MyModel.active.all()</snippet></ROW><ROW><id>2494645</id><snippet>openssh_pubkey = open('keyfile').read()
type, key_string, comment = openssh_pubkey.split()
data = base64.decodestring(key_string)
int_len = 4
str_len = struct.unpack('&gt;I', data[:int_len])[0] # this should return 7
data[int_len:int_len+str_len] == type
</snippet></ROW><ROW><id>2494645</id><snippet>AAAAB3NzaC1yc2EA</snippet></ROW><ROW><id>2494645</id><snippet>data[4:11]</snippet></ROW><ROW><id>2494764</id><snippet>sort</snippet></ROW><ROW><id>2494764</id><snippet>key</snippet></ROW><ROW><id>2494764</id><snippet>def lower_if_possible(x):
    try:
        return x.lower()
    except AttributeError:
        return x

L=[('a', 'c'), ('A', 'b'), ('a', 'a'), ('a', 5)]

L.sort(key=lambda x: map(lower_if_possible,x))
print(L)
</snippet></ROW><ROW><id>2494764</id><snippet>key</snippet></ROW><ROW><id>2494863</id><snippet>/env/&lt;env&gt;/artifact/&lt;artifact&gt;?verbose=1&amp;noformat=1
</snippet></ROW><ROW><id>2495133</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; [l[i::3] for i in xrange(3)]
[[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]
</snippet></ROW><ROW><id>2495133</id><snippet>3</snippet></ROW><ROW><id>2495133</id><snippet>&gt;&gt;&gt; [l[i::5] for i in xrange(5)]
[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]
</snippet></ROW><ROW><id>2495799</id><snippet>#Assuming words is a list of words you wish to query for
import urllib

# replace en.wikipedia.org with the address of the wiki you want to access
query = "http://en.wikipedia.org/w/api?action=query&amp;titles=%s&amp;format=xml" % "|".join(words)
pages = urllib.urlopen(query)
</snippet></ROW><ROW><id>2495799</id><snippet>&lt;?xml version="1.0"?&gt;&lt;api&gt;&lt;query&gt;&lt;pages&gt;

   &lt;page ns="0" title="DOESNOTEXIST" missing="" /&gt;

   &lt;page pageid="600799" ns="0" title="FOO" /&gt;

   &lt;page pageid="11178" ns="0" title="Foobar" /&gt;

&lt;/pages&gt;&lt;/query&gt;&lt;/api&gt;
</snippet></ROW><ROW><id>2495880</id><snippet>def get_longest_trip(self, board, processed_countries = list()):
    # see http://stackoverflow.com/questions/576988/python-specific-antipatterns-and-bad-practices/577198#577198
    processed_countries = list(processed_countries)
    processed_countries.append(self)

    longest_trip = list()
    if self.get_connections(board):
        possible_trips = list()
        for card in self.get_connections(board):
            if card not in processed_countries:
                possible_trips.append(card.get_longest_trip(board, 
                                                            processed_countries))
        if possible_trips:
            longest_trip = max(possible_trips, key=len)
            longest_trip.append(self)

    if not longest_trip:
        longest_trip.append(self)
    return longest_trip
</snippet></ROW><ROW><id>2495880</id><snippet>Traceback (most recent call last):
  File "main.py", line 1171, in &lt;module&gt;
    main()
  File "main.py", line 1162, in main
    interface = Interface(continent, screen, ev_manager)    
  File "main.py", line 72, in __init__
    self.deck = Deck(ev_manager, continent)
  File "main.py", line 125, in __init__
    self.rebuild(continent)  
  File "main.py", line 148, in rebuild
    self.stack.append(CountryCard(country, self.ev_manager))
  File "main.py", line 1093, in __init__
    Card.__init__(self, COUNTRY, country.name, country.image, country.color, ev_manager)  
  File "main.py", line 693, in __init__
    self.set_text(text)
  File "main.py", line 721, in set_text
    self.rendered_text = self.render_text_rec(text)  
  File "main.py", line 817, in render_text_rec
    return render_textrect(text, self.font, text_rect, self.text_color, self.text_bgcolor, 1)       
  File "/home/vasi/Desktop/Planes and Trains/src/textrect.py", line 47, in render_textrect
    raise TextRectException, "The word " + word + " is too long to fit in the rect passed."
textrect.TextRectException: The word Montenegro is too long to fit in the rect passed.
</snippet></ROW><ROW><id>2495884</id><snippet>imshow(Z1, cmap=cm.hsv, alpha=.6, extent=extent)
</snippet></ROW><ROW><id>2495884</id><snippet>imshow(cm.hsv(Z1), alpha=.6, extent=extent)
</snippet></ROW><ROW><id>2495884</id><snippet>cm.hsv()</snippet></ROW><ROW><id>2495884</id><snippet>def mycmap(x):
    tmp = cm.hsv(x)
    for i in xrange(tmp.shape[0]):
        for j in xrange(tmp.shape[0]):
            tmp[i,j][3] = somefunction of x[i,j] that generates the transparency
    return tmp

imshow(mycmap(Z1), extent=extent)
imshow(mycmap(Z2), extent=extent)
</snippet></ROW><ROW><id>2496018</id><snippet>db.articles.find({tags.geography : {$exists : true}})
</snippet></ROW><ROW><id>2496018</id><snippet>"geography" : []</snippet></ROW><ROW><id>2496018</id><snippet>geography_size</snippet></ROW><ROW><id>2496018</id><snippet>db.articles.find({tags.geography_size : {$gte : 1}})
</snippet></ROW><ROW><id>2496021</id><snippet>def contact_view_full(request, contact_id):
    c = get_object_or_404(Contact, id=contact_id)
    a = c.addresses.all()
    return render_to_response('contact_full.html', {'contact_item': c, 'addresses' : a }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>2496513</id><snippet>from ctypes import *</snippet></ROW><ROW><id>2496513</id><snippet>DWORD</snippet></ROW><ROW><id>2496513</id><snippet>class List(Structure):
    pass
List._fields_ = [("pnext", POINTER(List)),
                 ...
                ]
</snippet></ROW><ROW><id>2496513</id><snippet>class EXCEPTION_RECORD(Structure):
    pass
EXCEPTION_RECORD._fields_ = [
        ("ExceptionCode", DWORD),
        ("ExceptionFlags", DWORD),
        ("ExceptionRecord", POINTER(EXCEPTION_RECORD)),
        ("ExceptionAddress", LPVOID),
        ("NumberParameters", DWORD),
        ("ExceptionInformation", ULONG_PTR * EXCEPTION_MAXIMUM_PARAMETERS)]
</snippet></ROW><ROW><id>2496824</id><snippet>shell=True</snippet></ROW><ROW><id>2496824</id><snippet>svn</snippet></ROW><ROW><id>2496824</id><snippet>repos = ['/repo1', '/repo2', '/repo3']
# launch 3 async calls:
procs = [subprocess.Popen(['svn', 'update', repo]) for repo in repos]
# wait.
for proc in procs:
    proc.wait()
# check for results:
if any(proc.returncode != 0 for proc in procs):
    print 'Something failed'
</snippet></ROW><ROW><id>2496878</id><snippet>void raw_input(char *prompt, char *buffer, size_t length)
{
    printf("%s", prompt);
    fflush(stdout);
    fgets(buffer, length, stdin)
}
</snippet></ROW><ROW><id>2496878</id><snippet>char x[MAX_INPUT_LENGTH];
raw_input("Message Here:", x, sizeof x);
</snippet></ROW><ROW><id>2496922</id><snippet>good = True
buf = None
while True:
if good:
        buf = f.read(buf_size)
        else:
        # try again with cleaned buffer
        pass
        try:
            xp.Parse(buf, len(buf) == 0)
            if (len(buf) == 0):
                    break
        good = True
    except ExpatError:
        if xp.ErrorCode  == XML_ERROR_BAD_CHAR_REF:
            # look at ErrorByteIndex (or nearby)
            # for 0xEF 0xBF 0xBD (UTF8 replacement char) and remove it
            good = False
        else:
            # other errors processing
            pass
</snippet></ROW><ROW><id>2496953</id><snippet>print "Inventory:", player.inventory()
</snippet></ROW><ROW><id>2496953</id><snippet>print "Inventory:"
player.print_inventory()
</snippet></ROW><ROW><id>2496953</id><snippet>print "Inventory:", player.inventory_as_str()
</snippet></ROW><ROW><id>2497015</id><snippet>with</snippet></ROW><ROW><id>2497015</id><snippet>with open(...) as f:
  reader = pickle.load(f)
</snippet></ROW><ROW><id>2497015</id><snippet>with</snippet></ROW><ROW><id>2497015</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>2497015</id><snippet>with</snippet></ROW><ROW><id>2497061</id><snippet>.xls</snippet></ROW><ROW><id>2497061</id><snippet>.csv</snippet></ROW><ROW><id>2497162</id><snippet>class LazyMeta(type):
    def __init__(cls, name, bases, attr):
        super(LazyMeta, cls).__init__(name, bases, attr)
        def prop( x ):
            return property(lambda self: self._lazy_eval(x))
        for x in attr['lazyattrs']:
            setattr(cls, x, prop(x))

class Base(object):
    __metaclass__ = LazyMeta
    lazyattrs = []
    def _lazy_eval(self, attr):
        #Do complex stuff here
        return attr

class Child(Base):
    lazyattrs = ['foo', 'bar']

me = Child()

print me.foo
print me.bar
</snippet></ROW><ROW><id>2497188</id><snippet>self.ui.gridLayout.addWidget(getattr(self.ui,myname))</snippet></ROW><ROW><id>2497188</id><snippet>value = obj.attribute
value = getattr(obj, "attribute-name")
</snippet></ROW><ROW><id>2497506</id><snippet>&lt;Location "/"&gt;
    SetHandler python-program
    PythonHandler django.core.handlers.modpython
    SetEnv DJANGO_SETTINGS_MODULE mysite.settings
&lt;/Location&gt;

&lt;Location "/media"&gt;
    SetHandler None
&lt;/Location&gt;

&lt;LocationMatch "\.(jpg|gif|png)$"&gt;
    SetHandler None
&lt;/LocationMatch&gt;
</snippet></ROW><ROW><id>2497571</id><snippet>change = int(raw_input("What would you like to change the channel to?"))
</snippet></ROW><ROW><id>2497571</id><snippet>set_channel</snippet></ROW><ROW><id>2497571</id><snippet>channel=self.__channel
</snippet></ROW><ROW><id>2497571</id><snippet>self.__channel = choice
</snippet></ROW><ROW><id>2497767</id><snippet>json</snippet></ROW><ROW><id>2497767</id><snippet>import json

projects = []
projects.append({'project_name': 'foobar', 
                 'author': 'John Doe', 
                 'email': 'spam@example.com', 
                 'year': '2010'})
projects.append({'project_name': 'baz', 
                 'author': 'Cat Stevens', 
                 'email': 'cs@example.com', 
                 'year': '2009'})

with open('projects.json', 'w') as f:
    json.dump(projects, f)
</snippet></ROW><ROW><id>2497767</id><snippet>json.load(f)</snippet></ROW><ROW><id>2497767</id><snippet>f</snippet></ROW><ROW><id>2497807</id><snippet>__str__</snippet></ROW><ROW><id>2497807</id><snippet>class Meta(type):
    def __str__(self):
        return "Klass"

class A(object):
    __metaclass__ = Meta

    def __str__(self):
        return "instance"

print A
print A()
</snippet></ROW><ROW><id>2497807</id><snippet>Klass
instance
</snippet></ROW><ROW><id>2498412</id><snippet>iter</snippet></ROW><ROW><id>2498412</id><snippet>return iter(List)
</snippet></ROW><ROW><id>2498757</id><snippet>read()</snippet></ROW><ROW><id>2498757</id><snippet>myfile = getfile.read()
</snippet></ROW><ROW><id>2498909</id><snippet>from PIL import Image
import PIL.ImageOps    

image = Image.open('your_image.png')

inverted_image = PIL.ImageOps.invert(image)

inverted_image.save('new_name.png')
</snippet></ROW><ROW><id>2498924</id><snippet>zip</snippet></ROW><ROW><id>2498924</id><snippet>zip</snippet></ROW><ROW><id>2498924</id><snippet>post_and_form = zip(post, delpostformset.forms)
</snippet></ROW><ROW><id>2498924</id><snippet>{% for post, form in post_and_form %}
{% endfor %}
</snippet></ROW><ROW><id>2498957</id><snippet>&gt;&gt;&gt; g = (None, 'b', None, None)
&gt;&gt;&gt; next(x for x in g if x is not None)
'b'

&gt;&gt;&gt; g = (None, None, None)
&gt;&gt;&gt; next((x for x in g if x is not None), "default")  # try this with filter :)
'default'

&gt;&gt;&gt; g = (None, None, None)  # so you know what happens, and what you could catch
&gt;&gt;&gt; next(x for x in g if x is not None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>2499833</id><snippet>perl -ane "print qq(@F[0..2]\n)" file.txt
</snippet></ROW><ROW><id>2499907</id><snippet>][</snippet></ROW><ROW><id>2499907</id><snippet>s = "[segment1][segment2][segment2]"
s[1:-1].split('][')
</snippet></ROW><ROW><id>2499907</id><snippet>['segment1', 'segment2', 'segment2']
</snippet></ROW><ROW><id>2499965</id><snippet>def floatToInt(x):
    return int((x+1.0) * (2**31))
</snippet></ROW><ROW><id>2500023</id><snippet>p = "0(532) 222 22 22"
print ''.join([x for x in p if x.isdigit()])
</snippet></ROW><ROW><id>2500023</id><snippet>int()</snippet></ROW><ROW><id>2500136</id><snippet>l1 = ['a', 'b', 'c', 'd']
l2 = ['c', 'd', 'e']
set(l1).intersection(l2)
set(['c', 'd'])
</snippet></ROW><ROW><id>2500416</id><snippet>sed</snippet></ROW><ROW><id>2500416</id><snippet>sed -e '2s/  */ /g' infile.txt
</snippet></ROW><ROW><id>2500416</id><snippet>sed -e '2s/^\([^ ]*\)  /\1 /' infile.txt
</snippet></ROW><ROW><id>2500416</id><snippet>2</snippet></ROW><ROW><id>2500416</id><snippet>s</snippet></ROW><ROW><id>2500484</id><snippet>info</snippet></ROW><ROW><id>2500484</id><snippet>class SegregationCode(Entity):
    using_options(tablename="SEGREGATION_CODES")
    segCode = Field(String(20), colname="CODE", ...
                    primary_key=True, info={'description'='Segregation Code'})
</snippet></ROW><ROW><id>2500813</id><snippet>class Ship(object):

    def __init__(self, name="Enterprise", fuel=0):
        self.name = name
        self._fuel = fuel
        print "The spaceship", name, "has arrived!"

    def status(self):
        print "Name: ", self.name
        print "Fuel level: ", self.fuel

    @property
    def fuel(self):
        return self._fuel

    @fuel.setter
    def fuel(self,level):
        if level &lt; 0:
            self._fuel = 0
        else:
            self._fuel = level
</snippet></ROW><ROW><id>2500813</id><snippet>def main():

    ships = []
    for n in range(4):
        ship = Ship(raw_input("What would you like to name this ship?"))
        ship.fuel = int(raw_input("How much fuel does this ship have?"))
        ships.append(ship)

    for ship in ships:
        ship.status()

main()
raw_input("Press enter to exit.")
</snippet></ROW><ROW><id>2500894</id><snippet>big.txt</snippet></ROW><ROW><id>2500894</id><snippet>NWORDS</snippet></ROW><ROW><id>2501085</id><snippet>serial.Serial</snippet></ROW><ROW><id>2501085</id><snippet>read</snippet></ROW><ROW><id>2501085</id><snippet>readline</snippet></ROW><ROW><id>2501085</id><snippet>write</snippet></ROW><ROW><id>2501187</id><snippet>pc = pcap.pcapObject()
</snippet></ROW><ROW><id>2501187</id><snippet>pc = pcap.pcap()
</snippet></ROW><ROW><id>2501419</id><snippet>locals</snippet></ROW><ROW><id>2501419</id><snippet>Field.contribute_to_class</snippet></ROW><ROW><id>2501419</id><snippet>for currency in currencies:
    models.IntegerField().contribute_to_class(Car, 'price_%s' % currency.lower())
</snippet></ROW><ROW><id>2501419</id><snippet>Car.add_to_class</snippet></ROW><ROW><id>2501419</id><snippet>contribute_to_class</snippet></ROW><ROW><id>2501419</id><snippet>django.db.models.fields.Field.contribute_to_class</snippet></ROW><ROW><id>2501419</id><snippet>django.db.models.options.Options.add_field</snippet></ROW><ROW><id>2501419</id><snippet>_meta</snippet></ROW><ROW><id>2501419</id><snippet>Options</snippet></ROW><ROW><id>2501540</id><snippet>import numpy as np

strings = np.array(['hello    ', 'world    '], dtype='|S10')

print np.char.strip(strings) == 'hello'
# prints [ True False]
</snippet></ROW><ROW><id>2501684</id><snippet>' '.join(seq)</snippet></ROW><ROW><id>2501684</id><snippet>&gt;&gt;&gt; ' '.join(['1','2','3'])
'1 2 3'
</snippet></ROW><ROW><id>2501684</id><snippet>' '</snippet></ROW><ROW><id>2501711</id><snippet>__get__</snippet></ROW><ROW><id>2501711</id><snippet>__get__</snippet></ROW><ROW><id>2501711</id><snippet>self</snippet></ROW><ROW><id>2501711</id><snippet>__get__</snippet></ROW><ROW><id>2501711</id><snippet>__set__</snippet></ROW><ROW><id>2501711</id><snippet>__delete__</snippet></ROW><ROW><id>2501711</id><snippet>memoize</snippet></ROW><ROW><id>2501711</id><snippet>__get__</snippet></ROW><ROW><id>2501711</id><snippet>import functools

def memoize(f):
    @functools.wraps(f)
    def memoized(*args, _cache={}): 
        # This abuses the normally-unwanted behaviour of mutable default arguments.
        if args not in _cache:
            _cache[args] = f(*args)
        return _cache[args]
    return memoized
</snippet></ROW><ROW><id>2501711</id><snippet>import functools

class Memoize(object): #inherit object
    def __init__(self, function):
        self.function = function
        self.memoized = {}
    def __call__(self, *args): #don't accept kwargs you don't want.
        # I removed "hash = args" because it shadowed a builtin function and 
        # because it was untrue--it wasn't a hash, it was something you intended for
        # Python to hash for you.
        try:
            return self.memoized[args]
        except KeyError:
            self.memoized[args] = self.function(*args)
            return self.memoized[args]
    def __get__(self, obj, type):
        if obj is None: #We looked up on the class
            return self

        return functools.partial(self, obj)
</snippet></ROW><ROW><id>2501711</id><snippet>args</snippet></ROW><ROW><id>2501863</id><snippet>   -b, --debug            run the application in the Python Debugger (implies
                          nodaemon), sending SIGUSR2 will drop into debugger
</snippet></ROW><ROW><id>2502055</id><snippet>struct.unpack</snippet></ROW><ROW><id>2502055</id><snippet>mybytes = data[16:19]
</snippet></ROW><ROW><id>2502055</id><snippet>mybytes = data[16:20]
</snippet></ROW><ROW><id>2502132</id><snippet>%y</snippet></ROW><ROW><id>2502132</id><snippet>%Y</snippet></ROW><ROW><id>2502223</id><snippet>from BeautifulSoup import BeautifulSoup
import re
import urllib2

page = urllib2.urlopen("http://www.linkpages.com")
soup = BeautifulSoup(page)
for link in soup.findAll('a', attrs={'href': re.compile("^http://")}):
    print link
</snippet></ROW><ROW><id>2502616</id><snippet>from pyglet.gl import *
from ctypes import c_uint, byref

fb = c_uint()
glGenFramebuffersEXT(1, byref(fb))
glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fb) 
</snippet></ROW><ROW><id>2502616</id><snippet>&gt;&gt; glGenFramebuffersEXT(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: this function takes at least 2 arguments (1 given)
</snippet></ROW><ROW><id>2502616</id><snippet>fb = int(glGenFramebuffersEXT(1))
glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fb)
</snippet></ROW><ROW><id>2502883</id><snippet>communicate</snippet></ROW><ROW><id>2502883</id><snippet>import subprocess
p = subprocess.Popen(["ntpq", "-p"], stdout=subprocess.PIPE)
out, err = p.communicate()
</snippet></ROW><ROW><id>2502883</id><snippet>out</snippet></ROW><ROW><id>2502883</id><snippet>"ntpq -p"</snippet></ROW><ROW><id>2502883</id><snippet>Popen</snippet></ROW><ROW><id>2502883</id><snippet>["ntpq", "-p"]</snippet></ROW><ROW><id>2502883</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>2502883</id><snippet>from subprocess import check_output as qx

out = qx(["ntpq", "-p"])
</snippet></ROW><ROW><id>2503307</id><snippet>zoo</snippet></ROW><ROW><id>2503307</id><snippet>foo.bar(zoo, arg1, arg2)</snippet></ROW><ROW><id>2503307</id><snippet>object.method(arguments)</snippet></ROW><ROW><id>2503307</id><snippet>objects_class.method(object, arguments)</snippet></ROW><ROW><id>2503599</id><snippet>range(0,234,100)
</snippet></ROW><ROW><id>2503599</id><snippet>[0, 100, 200]
</snippet></ROW><ROW><id>2503599</id><snippet>for items in range(0,234,100):
    get_next_100()
</snippet></ROW><ROW><id>2503704</id><snippet>None</snippet></ROW><ROW><id>2503704</id><snippet>return</snippet></ROW><ROW><id>2503704</id><snippet>None</snippet></ROW><ROW><id>2503704</id><snippet>return</snippet></ROW><ROW><id>2503704</id><snippet>if foo: return</snippet></ROW><ROW><id>2503704</id><snippet>if foo: return somethingMeaningful</snippet></ROW><ROW><id>2503704</id><snippet>if foo: raise Exception("Foo")</snippet></ROW><ROW><id>2503704</id><snippet>None</snippet></ROW><ROW><id>2503737</id><snippet>class WebManager:
    def default(self, action, **kwds):
        return managerUtils.runAction(action, kwds)
    default.exposed = True
</snippet></ROW><ROW><id>2503737</id><snippet>.exposed</snippet></ROW><ROW><id>2503737</id><snippet>.enabled</snippet></ROW><ROW><id>2503737</id><snippet>index</snippet></ROW><ROW><id>2503737</id><snippet>default</snippet></ROW><ROW><id>2504133</id><snippet>mmap</snippet></ROW><ROW><id>2504133</id><snippet>import urllib2
import mmap

# Open the file as a memory mapped string. Looks like a string, but 
# actually accesses the file behind the scenes. 
f = open('somelargefile.zip','rb')
mmapped_file_as_string = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)

# Do the request
request = urllib2.Request(url, mmapped_file_as_string)
request.add_header("Content-Type", "application/zip")
response = urllib2.urlopen(request)

#close everything
mmapped_file_as_string.close()
f.close()
</snippet></ROW><ROW><id>2504457</id><snippet>"""</snippet></ROW><ROW><id>2504457</id><snippet>def foo():
    string = """line one
             line two
             line three"""
</snippet></ROW><ROW><id>2504457</id><snippet>def foo():
    string = ("this is an "
              "implicitly joined "
              "string")
</snippet></ROW><ROW><id>2504457</id><snippet>textwrap</snippet></ROW><ROW><id>2504457</id><snippet>def trim(docstring):
    if not docstring:
        return ''
    # Convert tabs to spaces (following the normal Python rules)
    # and split into a list of lines:
    lines = docstring.expandtabs().splitlines()
    # Determine minimum indentation (first line doesn't count):
    indent = sys.maxint
    for line in lines[1:]:
        stripped = line.lstrip()
        if stripped:
            indent = min(indent, len(line) - len(stripped))
    # Remove indentation (first line is special):
    trimmed = [lines[0].strip()]
    if indent &lt; sys.maxint:
        for line in lines[1:]:
            trimmed.append(line[indent:].rstrip())
    # Strip off trailing and leading blank lines:
    while trimmed and not trimmed[-1]:
        trimmed.pop()
    while trimmed and not trimmed[0]:
        trimmed.pop(0)
    # Return a single string:
    return '\n'.join(trimmed)
</snippet></ROW><ROW><id>2504473</id><snippet>import gtk


class PlaceholderEntry(gtk.Entry):

    placeholder = 'Username'
    _default = True

    def __init__(self, *args, **kwds):
        gtk.Entry.__init__(self, *args, **kwds)
        self.connect('focus-in-event', self._focus_in_event)
        self.connect('focus-out-event', self._focus_out_event)

    def _focus_in_event(self, widget, event):
        if self._default:
            self.set_text('')
            self.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('black'))

    def _focus_out_event(self, widget, event):
        if gtk.Entry.get_text(self) == '':
            self.set_text(self.placeholder)
            self.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('gray'))
            self._default = True
        else:
            self._default = False

    def get_text(self):
        if self._default:
            return ''
        return gtk.Entry.get_text(self)


if __name__ == '__main__':
    w = gtk.Window()
    vbox = gtk.VBox()
    w.add(vbox)
    vbox.pack_start(PlaceholderEntry())
    quitbtn = gtk.Button(stock=gtk.STOCK_QUIT)
    quitbtn.connect('clicked', gtk.main_quit)
    vbox.pack_start(quitbtn)
    w.connect('destroy', gtk.main_quit)
    w.show_all()
    gtk.main()
</snippet></ROW><ROW><id>2504510</id><snippet>__new__</snippet></ROW><ROW><id>2504510</id><snippet>class Test(object):
    def calculate_attr(self, attr):
        return something

    def __getattr__(self, name):
        return self.calculate_attr(name)
</snippet></ROW><ROW><id>2504555</id><snippet>char *someGlobalString = "very long "
                         "so broken "
                         "onto multiple "
                         "lines";
</snippet></ROW><ROW><id>2504555</id><snippet>uint64_t num = 5;
printf("Here is a number:  %"PRIX64", what do you think of that?", num);
</snippet></ROW><ROW><id>2504555</id><snippet>PRIo8 PRIoLEAST16 PRIoFAST32 PRIoMAX PRIoPTR
</snippet></ROW><ROW><id>2504607</id><snippet>wx.Image</snippet></ROW><ROW><id>2504607</id><snippet>Scale</snippet></ROW><ROW><id>2504607</id><snippet>import wx

def scale_bitmap(bitmap, width, height):
    image = wx.ImageFromBitmap(bitmap)
    image = image.Scale(width, height, wx.IMAGE_QUALITY_HIGH)
    result = wx.BitmapFromImage(image)
    return result

class Panel(wx.Panel):
    def __init__(self, parent, path):
        super(Panel, self).__init__(parent, -1)
        bitmap = wx.Bitmap(path)
        bitmap = scale_bitmap(bitmap, 300, 200)
        control = wx.StaticBitmap(self, -1, bitmap)
        control.SetPosition((10, 10))

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = wx.Frame(None, -1, 'Scaled Image')
    panel = Panel(frame, 'input.jpg')
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>2504835</id><snippet>unittest</snippet></ROW><ROW><id>2504835</id><snippet>unittest</snippet></ROW><ROW><id>2504835</id><snippet>unittest2</snippet></ROW><ROW><id>2504835</id><snippet>unittest</snippet></ROW><ROW><id>2504982</id><snippet>&gt;&gt;&gt; os.chdir('/tmp/az')
&gt;&gt;&gt; f = open('/tmp/a.zip', 'wb')
&gt;&gt;&gt; z = zipfile.ZipFile(f, 'w')
&gt;&gt;&gt; for root, dirs, files in os.walk('.'):
...   for fn in files:
...     if fn.endswith('.pyc'): continue
...     fp = os.path.join(root, fn)
...     z.write(fp)
... 
&gt;&gt;&gt; z.close()
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2504982</id><snippet>.pyc</snippet></ROW><ROW><id>2504982</id><snippet>zipfile.ZIP_DEFLATED</snippet></ROW><ROW><id>2504982</id><snippet>zipfile.ZipFile</snippet></ROW><ROW><id>2504991</id><snippet>create_menu</snippet></ROW><ROW><id>2504991</id><snippet>wx.Menu</snippet></ROW><ROW><id>2504991</id><snippet>show_popup</snippet></ROW><ROW><id>2505261</id><snippet>&gt;&gt;&gt; l = [11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; sorted(x for x in l if x &gt; 13)
[14, 15, 16]
</snippet></ROW><ROW><id>2505261</id><snippet>&gt;&gt;&gt; sorted(filter(lambda x: x &gt; 13, l))
[14, 15, 16]
</snippet></ROW><ROW><id>2505415</id><snippet>wx.NewId()</snippet></ROW><ROW><id>2505415</id><snippet>mit = wx.MenuItem(submenu, id=wx.NewId(), text=item)
</snippet></ROW><ROW><id>2505562</id><snippet>WSGIDaemonProcess</snippet></ROW><ROW><id>2505659</id><snippet>__</snippet></ROW><ROW><id>2505659</id><snippet>GUIEvents</snippet></ROW><ROW><id>2505659</id><snippet>ge_</snippet></ROW><ROW><id>2505659</id><snippet>GUIHelpers</snippet></ROW><ROW><id>2505659</id><snippet>gh_</snippet></ROW><ROW><id>2505659</id><snippet>self.ge.doSomething()</snippet></ROW><ROW><id>2505659</id><snippet>self.ge_doSomething()</snippet></ROW><ROW><id>2506444</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>2506444</id><snippet>env</snippet></ROW><ROW><id>2506444</id><snippet>python</snippet></ROW><ROW><id>2506444</id><snippet>$PATH</snippet></ROW><ROW><id>2506444</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>2506444</id><snippet>$PATH</snippet></ROW><ROW><id>2506477</id><snippet>import urllib
import urlparse

url = "http://stackoverflow.com/search?q=question"
params = {'lang':'en','tag':'python'}

url_parts = list(urlparse.urlparse(url))
query = dict(urlparse.parse_qsl(url_parts[4]))
query.update(params)

url_parts[4] = urllib.urlencode(query)

print urlparse.urlunparse(url_parts)
</snippet></ROW><ROW><id>2506843</id><snippet>os.system("pyrcc4.exe -o ui/images_rc.py ui/images/images.qrc")
uic.compileUiDir(appDir + '/ui', True)
</snippet></ROW><ROW><id>2506843</id><snippet>class MyMainWindow(QtGui.QMainWindow):

    def __init__(self, owner):
        QtGui.QMainWindow.__init__(self)
        # 'Ui_MyMainWindow' is the class, that was generated by uic, 
        # naming convention is: 'Ui_' plus the name of root widget in designer
        self.ui = Ui_MyMainWindow()
        self.ui.setupUi(self)
</snippet></ROW><ROW><id>2506843</id><snippet>    QtGui.QMainWindow.__init__(self)
    self.ui = None
    uic.loadUi('MyMainWindowUI.ui', self.ui)
    #now you have the instance of Ui_MyMainWindow in self.ui too, as above
</snippet></ROW><ROW><id>2507305</id><snippet>forloop.counter</snippet></ROW><ROW><id>2507305</id><snippet>{% for op in options %}
  {{op.choices}}&lt;input type="radio" name="template" id="template{{forloop.counter}}" value="template{{forloop.counter}}"/&gt;
{% endfor %}
</snippet></ROW><ROW><id>2507305</id><snippet>id</snippet></ROW><ROW><id>2507305</id><snippet>&lt;input /&gt;</snippet></ROW><ROW><id>2507305</id><snippet>&lt;input type="radio" /&gt;</snippet></ROW><ROW><id>2507405</id><snippet>node.nextSibling</snippet></ROW><ROW><id>2507405</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html)

nextNode = soup.find('p', {'class': 'top'})
while True:
    # process
    nextNode = nextNode.nextSibling
    if getattr(nextNode, 'name', None)  == 'p' and nextNode.get('class', None) == 'end':
        break
</snippet></ROW><ROW><id>2507847</id><snippet>$ for l in $(locale -a | grep utf8); do locale | cut -d= -f1 | LANG=$l xargs locale -kc | grep ^t_fmt=; done | sort -u

t_fmt="%H:%M:%S"
t_fmt="%H.%M.%S"
t_fmt="%H시 %M분 %S초"
t_fmt="ཆུ་ཚོད%Hཀསར་མ%Mཀསར་ཆ%S"
t_fmt="%H时%M分%S秒"
t_fmt="%H时%M分%S秒 %Z"
t_fmt="%H時%M分%S秒"
t_fmt="%I.%M.%S %p"
t_fmt="%I:%M:%S  %Z"
t_fmt="%I:%M:%S %Z"
t_fmt="%I.%M.%S. %Z"
t_fmt="%I時%M分%S秒 %Z"
t_fmt="kl. %H.%M %z"
t_fmt="%k,%M,%S"
t_fmt="%k:%M:%S"
t_fmt="%l:%M:%S"
t_fmt="%OH:%OM:%OS"
t_fmt="%OI:%OM:%OS %p"
t_fmt="%p%I.%M.%S %Z"
t_fmt="%r"
t_fmt="%t"
t_fmt="%T"
t_fmt="%Z %I:%M:%S "
</snippet></ROW><ROW><id>2507871</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat("file")[6]==0
True
</snippet></ROW><ROW><id>2508107</id><snippet>from xml.etree import cElementTree as ElementTree
</snippet></ROW><ROW><id>2508775</id><snippet>global</snippet></ROW><ROW><id>2508775</id><snippet>def SignalHandler(signum, stackframe):
  global sigterm_caught
  if signum == signal.SIGTERM:
    sigterm_caught = True
    sys.stdout.write("SIGTERM caught\n")
</snippet></ROW><ROW><id>2508775</id><snippet>sigterm_caught</snippet></ROW><ROW><id>2508775</id><snippet>global</snippet></ROW><ROW><id>2508901</id><snippet>s</snippet></ROW><ROW><id>2508901</id><snippet>u = s.decode('latin-1')
</snippet></ROW><ROW><id>2508901</id><snippet>u</snippet></ROW><ROW><id>2508901</id><snippet>s</snippet></ROW><ROW><id>2508901</id><snippet>latin-1</snippet></ROW><ROW><id>2508940</id><snippet>try</snippet></ROW><ROW><id>2508940</id><snippet>except</snippet></ROW><ROW><id>2508940</id><snippet>s</snippet></ROW><ROW><id>2508940</id><snippet>xs = s.strip()
if xs[0:1] in '+-': xs = xs[1:]
if xs.isdigit(): return int(s)
else: ...
</snippet></ROW><ROW><id>2508940</id><snippet>...</snippet></ROW><ROW><id>2508940</id><snippet>else</snippet></ROW><ROW><id>2508940</id><snippet>s</snippet></ROW><ROW><id>2508940</id><snippet>'iamnotanumber'</snippet></ROW><ROW><id>2508940</id><snippet>'23skidoo'</snippet></ROW><ROW><id>2508940</id><snippet>try: return int(s)
except ValueError: ...
</snippet></ROW><ROW><id>2508940</id><snippet>int(s.strip())</snippet></ROW><ROW><id>2508940</id><snippet>&gt;&gt;&gt; int('  23  ')
23
</snippet></ROW><ROW><id>2508940</id><snippet>int</snippet></ROW><ROW><id>2509157</id><snippet>col = collections.LineCollection(nlist,
   linewidths = width,
   linestyle = lstyle,
   alpha=self.alpha,zorder=100)
</snippet></ROW><ROW><id>2509414</id><snippet>import itertools, operator

def catalog(fields,people):
    cur_field = operator.itemgetter(fields[0])
    groups = itertools.groupby(sorted(people, key=cur_field),cur_field)
    if len(fields)==1:
        return dict((k,list(v)) for k,v in groups)
    else:
        return dict((k,catalog(fields[1:],v)) for k,v in groups)
</snippet></ROW><ROW><id>2509414</id><snippet>import pprint
pprint.pprint(catalog(('sex','age'), people))
{'F': {30: [{'age': 30, 'city': 'Dallas', 'name': 'Dana', 'sex': 'F'}]},
 'M': {20: [{'age': 20, 'city': 'NY', 'name': 'Roger', 'sex': 'M'},
            {'age': 20, 'city': 'Boston', 'name': 'Dan', 'sex': 'M'}],
       21: [{'age': 21, 'city': 'Boston', 'name': 'Roger', 'sex': 'M'}]}}
</snippet></ROW><ROW><id>2509590</id><snippet>&gt;&gt;&gt; x.decode('utf8').encode('iso-8859-2')
'Sk\xb3odowski'
</snippet></ROW><ROW><id>2509757</id><snippet>diff</snippet></ROW><ROW><id>2509757</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; x = numpy.array([1, 2, 4, 7, 0])
&gt;&gt;&gt; numpy.diff(x)
array([ 1,  2,  3, -7])
</snippet></ROW><ROW><id>2509757</id><snippet>-numpy.diff(x)</snippet></ROW><ROW><id>2509848</id><snippet>with open('fname', 'w') as file:
    file.writelines('\t'.join(i) + '\n' for i in nested_list)
</snippet></ROW><ROW><id>2510138</id><snippet>defaultdict</snippet></ROW><ROW><id>2510138</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>2510138</id><snippet>lambda</snippet></ROW><ROW><id>2510138</id><snippet>c = collections.defaultdict(lambda: collections.defaultdict(int))
</snippet></ROW><ROW><id>2510138</id><snippet>defaultdict</snippet></ROW><ROW><id>2510138</id><snippet>defaultdict</snippet></ROW><ROW><id>2510138</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; c = collections.defaultdict(lambda: collections.defaultdict(int))
&gt;&gt;&gt; c[5][6] += 1
&gt;&gt;&gt; c[5][6]
1
&gt;&gt;&gt; c[0][0]
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2510693</id><snippet>Recommendation.objects.filter(user__publication_set__subscriber=request.user).select_related()
</snippet></ROW><ROW><id>2510816</id><snippet>alphabet = 'abcdefghijklmnopqrstuvwxyz'

def enbase(x):
    n = len(alphabet)
    if x &lt; n:
        return alphabet[x]
    return enbase(x/n) + alphabet[x%n]

def debase(x):
    n = len(alphabet)
    result = 0
    for i, c in enumerate(reversed(x)):
        result += alphabet.index(c) * (n**i)
    return result

def average(a, b):
    a = debase(a)
    b = debase(b)
    return enbase((a + b) / 2)

print average('a', 'z') #m
print average('aa', 'zz') #mz
print average('cat', 'doggie') #budeel
print average('google', 'microsoft') #gebmbqkil
print average('microsoft', 'google') #gebmbqkil
</snippet></ROW><ROW><id>2510816</id><snippet>def pad(x, n):
    p = alphabet[0] * (n - len(x)) 
    return '%s%s' % (x, p)

def average(a, b):
    n = max(len(a), len(b))
    a = debase(pad(a, n))
    b = debase(pad(b, n))
    return enbase((a + b) / 2)

print average('a', 'z') #m
print average('aa', 'zz') #mz
print average('aa', 'az') #m (equivalent to ma)
print average('cat', 'doggie') #cumqec
print average('google', 'microsoft') #jlilzyhcw
print average('microsoft', 'google') #jlilzyhcw
</snippet></ROW><ROW><id>2511232</id><snippet>my_string = 'my string'
def string_to_int(s):
    ord3 = lambda x : '%.3d' % ord(x)
    return int(''.join(map(ord3, s)))

In[10]: string_to_int(my_string)
Out[11]: 109121032115116114105110103L
</snippet></ROW><ROW><id>2511232</id><snippet>chr</snippet></ROW><ROW><id>2511232</id><snippet>def int_to_string(n)
    s = str(n)
    return ''.join([chr(int(s[i:i+3])) for i in range(0, len(s), 3)])

In[12]: int_to_string(109121032115116114105110103L)
Out[13]: 'my string'
</snippet></ROW><ROW><id>2511335</id><snippet>__init__.py</snippet></ROW><ROW><id>2511335</id><snippet>__init__.py</snippet></ROW><ROW><id>2511335</id><snippet>__init__.py</snippet></ROW><ROW><id>2511335</id><snippet>meta.py</snippet></ROW><ROW><id>2511335</id><snippet>from sqlalchemy import MetaData
from sqlalchemy.orm import scoped_session, sessionmaker
__all__ = ['Session', 'engine', 'metadata']
engine = None
Session = scoped_session(sessionmaker())
metadata = MetaData()
</snippet></ROW><ROW><id>2511335</id><snippet>singleton</snippet></ROW><ROW><id>2511576</id><snippet>class User(object):
    def __init__(self, name, email):
        self.name = name
        self.email = email
    def commit(self):
        pass

jason = User('jason', 'jason@email.com')
jack = User('jack', 'jack@yahoo.com')
</snippet></ROW><ROW><id>2511576</id><snippet>def __init__(self):
    self.user = None
    self.email = None
</snippet></ROW><ROW><id>2511880</id><snippet>    def calculatepagerank4(self,iterations=20):
    # clear out the current PageRank tables
    self.con.execute("drop table if exists pagerank")
    self.con.execute("create table pagerank(urlid primary key,score)")
    self.con.execute("create index prankidx on pagerank(urlid)")

    # initialize every url with a PageRank of 1.0
    self.con.execute("insert into pagerank select rowid,1.0 from urllist")
    self.dbcommit()

    inlinks={}
    numoutlinks={}
    pagerank={}

    for (urlid,) in self.con.execute("select rowid from urllist"):
        inlinks[urlid]=[]
        numoutlinks[urlid]=0
        # Initialize pagerank vector with 1.0
        pagerank[urlid]=1.0

    for src,dest in self.con.execute("select distinct fromid, toid from link"):
        inlinks[dest].append(src)
        numoutlinks[src]+=1          

    for i in range(iterations):
        print "Iteration %d" % i

        for urlid in pagerank:
            pr=0.15
            for link in inlinks[urlid]:
                linkpr=pagerank[link]
                linkcount=numoutlinks[link]
                pr+=0.85*(linkpr/linkcount)
            pagerank[urlid]=pr

    args=((pagerank[urlid],urlid) for urlid in pagerank)
    self.con.executemany("update pagerank set score=? where urlid=?" , args)
    self.dbcommit() 
</snippet></ROW><ROW><id>2511880</id><snippet>allyourcode</snippet></ROW><ROW><id>2511880</id><snippet>˜unutbu</snippet></ROW><ROW><id>2511880</id><snippet>˜unutbu</snippet></ROW><ROW><id>2511880</id><snippet>&gt;&gt;&gt; cProfile.run("crawler.calculatepagerank4()")
     33512 function calls in 1.377 CPU seconds
Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1    0.004    0.004    1.377    1.377 &lt;string&gt;:1(&lt;module&gt;)
     2    0.000    0.000    0.073    0.036 searchengine.py:27(dbcommit)
     1    0.693    0.693    1.373    1.373 searchengine.py:286(calculatepagerank4
 10432    0.011    0.000    0.011    0.000 searchengine.py:321(&lt;genexpr&gt;)
 23065    0.009    0.000    0.009    0.000 {method 'append' of 'list' objects}
     2    0.073    0.036    0.073    0.036 {method 'commit' of 'sqlite3.Connectio
     1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler
     6    0.379    0.063    0.379    0.063 {method 'execute' of 'sqlite3.Connecti
     1    0.209    0.209    0.220    0.220 {method 'executemany' of 'sqlite3.Conn
     1    0.000    0.000    0.000    0.000 {range}
</snippet></ROW><ROW><id>2511880</id><snippet>%f</snippet></ROW><ROW><id>2511880</id><snippet>?</snippet></ROW><ROW><id>2511880</id><snippet>?</snippet></ROW><ROW><id>2511880</id><snippet>%f</snippet></ROW><ROW><id>2512035</id><snippet>simplejson</snippet></ROW><ROW><id>2512035</id><snippet>simplejson-2.1.0</snippet></ROW><ROW><id>2512035</id><snippet>simplejson</snippet></ROW><ROW><id>2512035</id><snippet>from django.utils import simplejson
</snippet></ROW><ROW><id>2512120</id><snippet>a_list = [[(1,100) for _ in range(32)] for _ in range(32)]
arr=numpy.array(a_list)
</snippet></ROW><ROW><id>2512120</id><snippet>a_list</snippet></ROW><ROW><id>2512155</id><snippet>%exception {
    Py_BEGIN_ALLOW_THREADS
    $action
    Py_END_ALLOW_THREADS
}
</snippet></ROW><ROW><id>2512346</id><snippet>url_for()</snippet></ROW><ROW><id>2512346</id><snippet>url</snippet></ROW><ROW><id>2512346</id><snippet>url.current()</snippet></ROW><ROW><id>2512358</id><snippet>sudo port install py25-matplotlib +cairo+gtk2
sudo port install py26-matplotlib +cairo+gtk2
</snippet></ROW><ROW><id>2512358</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>2512358</id><snippet>backend: GTKCairo
</snippet></ROW><ROW><id>2512358</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>2512358</id><snippet>backend: MacOSX
</snippet></ROW><ROW><id>2512358</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/matplotlib/backends/__init__.py:41: UserWarning: 
Your currently selected backend, 'Agg' does not support show().
Please select a GUI backend in your matplotlibrc file ('/Users/wlynch/.matplotlib/matplotlibrc') or with matplotlib.use()
(backend, matplotlib.matplotlib_fname()))
</snippet></ROW><ROW><id>2512521</id><snippet>fetchone</snippet></ROW><ROW><id>2512521</id><snippet>cursor.execute("SELECT COUNT(*) from result where server_state='2' AND name LIKE '"+digest+"_"+charset+"_%'")
result=cursor.fetchone()
</snippet></ROW><ROW><id>2512521</id><snippet>result</snippet></ROW><ROW><id>2512521</id><snippet>COUNT(*)</snippet></ROW><ROW><id>2512521</id><snippet>number_of_rows=result[0]
</snippet></ROW><ROW><id>2512521</id><snippet>cursor.execute("SELECT COUNT(*) from result where server_state='2' AND name LIKE '"+digest+"_"+charset+"_%'")
(number_of_rows,)=cursor.fetchone()
</snippet></ROW><ROW><id>2512521</id><snippet>cursor.execute("SELECT COUNT(*) from result where server_state= %s AND name LIKE %s",[2,digest+"_"+charset+"_%"])
(number_of_rows,)=cursor.fetchone()
</snippet></ROW><ROW><id>2512563</id><snippet>os.chroot('/var/www/')</snippet></ROW><ROW><id>2512572</id><snippet>fout=open("out.csv","a")
# first file:
for line in open("sh1.csv"):
    fout.write(line)
# now the rest:    
for num in range(2,201):
    f = open("sh"+str(num)+".csv")
    f.next() # skip the header
    for line in f:
         fout.write(line)
    f.close() # not really needed
fout.close()
</snippet></ROW><ROW><id>2513280</id><snippet>filter</snippet></ROW><ROW><id>2513280</id><snippet>QuerySet</snippet></ROW><ROW><id>2513280</id><snippet>name</snippet></ROW><ROW><id>2513280</id><snippet>info_l = info.objects.filter(id=1)[0]
</snippet></ROW><ROW><id>2513280</id><snippet>objects.get</snippet></ROW><ROW><id>2513280</id><snippet>info_l = info.objects.get(id=1)
</snippet></ROW><ROW><id>2513280</id><snippet>QuerySet</snippet></ROW><ROW><id>2513280</id><snippet>defer</snippet></ROW><ROW><id>2513280</id><snippet>only</snippet></ROW><ROW><id>2513280</id><snippet>defer</snippet></ROW><ROW><id>2513280</id><snippet>only</snippet></ROW><ROW><id>2513280</id><snippet>info_l = info.objects.filter(id=1).only('name')[0]
</snippet></ROW><ROW><id>2513463</id><snippet>collections.namedtuple(typename, field_names[, verbose])  
</snippet></ROW><ROW><id>2513463</id><snippet>credential = ('joeuser', 'secret123')  
print 'Username:', credential[0]  
print 'Password:', credential[1]  
</snippet></ROW><ROW><id>2513463</id><snippet>import collections  
# Create a new sub-tuple named Credential  
Credential = collections.namedtuple('Credential', 'username, password')  

credential = Credential(username='joeuser', password='secret123')  

print 'Username:', credential.username  
print 'Password:', credential.password  
</snippet></ROW><ROW><id>2513463</id><snippet>import collections  
Credential = collections.namedtuple('Credential', 'username, password', verbose=True)  

class Credential(tuple):                                       
    'Credential(username, password)'                       

    __slots__ = ()   

    _fields = ('username', 'password')   

    def __new__(_cls, username, password):  
        return _tuple.__new__(_cls, (username, password))   

    @classmethod  
    def _make(cls, iterable, new=tuple.__new__, len=len):  
        'Make a new Credential object from a sequence or iterable'  
        result = new(cls, iterable)                                 
        if len(result) != 2:                                        
            raise TypeError('Expected 2 arguments, got %d' % len(result))  
        return result  

    def __repr__(self):  
        return 'Credential(username=%r, password=%r)' % self  

    def _asdict(t):  
        'Return a new dict which maps field names to their values'  
        return {'username': t[0], 'password': t[1]}  

    def _replace(_self, **kwds):  
        'Return a new Credential object replacing specified fields with new values'  
        result = _self._make(map(kwds.pop, ('username', 'password'), _self))  
        if kwds:  
            raise ValueError('Got unexpected field names: %r' % kwds.keys())  
        return result  

    def __getnewargs__(self):  
        return tuple(self)  

    username = _property(_itemgetter(0))  
    password = _property(_itemgetter(1))  
</snippet></ROW><ROW><id>2513463</id><snippet>cred_tuple = ('joeuser', 'secret123')  
credential = Credential._make(cred_tuple) 
</snippet></ROW><ROW><id>2513511</id><snippet>old_stdout = sys.stdout

log_file = open("message.log","w")

sys.stdout = log_file

print "this will be written to message.log"

sys.stdout = old_stdout

log_file.close()
</snippet></ROW><ROW><id>2513749</id><snippet>#!/usr/bin/env python

import unittest

class TestCase(unittest.TestCase):

    def test(self):
        # Raise an assertion error to mark the revision as bad
        pass


if '__main__' == __name__:
    unittest.main()
</snippet></ROW><ROW><id>2513749</id><snippet>hg update tip
hg bisect --reset
hg bisect --bad
hg bisect --good 0
hg bisect --command ./bisector.py
</snippet></ROW><ROW><id>2513749</id><snippet>hg bisect --command bisector.py
</snippet></ROW><ROW><id>2514586</id><snippet>Event viewer</snippet></ROW><ROW><id>2514586</id><snippet>Security</snippet></ROW><ROW><id>2514953</id><snippet>Category.objects.filter(project__in=query).annotate(Count('project'))
</snippet></ROW><ROW><id>2514985</id><snippet>lxml.html</snippet></ROW><ROW><id>2515239</id><snippet>with open('ids.txt', 'rU') as f:
    interesting_ids = set('&gt;' + line.lower()[0:4] + "_" + line[4] for line in f)  # Get all ids in a set.

found_id = None
with open('seqres.txt', 'rU') as g:
    for line in g:
        if found_id is not None:
            with open(found_id+'.fasta','w') as h:
                h.write(line)

        id = line[:7]
        if id in interesting_ids: found_id = id
        else: found_id = None
</snippet></ROW><ROW><id>2515619</id><snippet>findall</snippet></ROW><ROW><id>2515619</id><snippet>findall</snippet></ROW><ROW><id>2515619</id><snippet>&gt;&gt;&gt; doc = """&lt;root&gt;
...  &lt;district&gt;
...   &lt;house&gt;&lt;room&gt;&lt;door/&gt;&lt;/room&gt;&lt;/house&gt;
...  &lt;/district&gt;
...  &lt;district&gt;
...   &lt;street&gt;
...    &lt;house&gt;and so on&lt;/house&gt;
...   &lt;/street&gt;
...  &lt;/district&gt;
... &lt;/root&gt;"""
&gt;&gt;&gt;
&gt;&gt;&gt; from xml.etree import cElementTree as ET
&gt;&gt;&gt;
&gt;&gt;&gt; r = ET.XML(doc)
&gt;&gt;&gt;
&gt;&gt;&gt; for house in r.findall('.//house'):
...   print house, house.findall('.//door')
...
&lt;Element 'house' at 0xb7f3ea70&gt; [&lt;Element 'door' at 0xb7f3eab8&gt;]
&lt;Element 'house' at 0xb7f3eb00&gt; []
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2515860</id><snippet>datetime.datetime(1970, 1, 1) + datetime.timedelta(microseconds=pr_time)
</snippet></ROW><ROW><id>2515860</id><snippet>print datetime.datetime(1970, 1, 1) + datetime.timedelta(microseconds=time.time()*1000*1000)
</snippet></ROW><ROW><id>2515860</id><snippet>2010-03-25 13:30:02.243000
</snippet></ROW><ROW><id>2516425</id><snippet>locals</snippet></ROW><ROW><id>2516425</id><snippet>locals</snippet></ROW><ROW><id>2516425</id><snippet>locals()</snippet></ROW><ROW><id>2516425</id><snippet>x['foo']</snippet></ROW><ROW><id>2516425</id><snippet>x.foo</snippet></ROW><ROW><id>2516425</id><snippet>foo</snippet></ROW><ROW><id>2516425</id><snippet>class Bunch(object): pass

...

# caller code
b = Bunch()
thefun(b)
print b.foo

...

# called function
def thefun(b):
  b.foo = 23
</snippet></ROW><ROW><id>2516425</id><snippet>thefun</snippet></ROW><ROW><id>2516425</id><snippet>b['foo'] = 23</snippet></ROW><ROW><id>2516425</id><snippet>b.foo = 23</snippet></ROW><ROW><id>2516425</id><snippet>thefun(vars(b))</snippet></ROW><ROW><id>2516425</id><snippet>thefun(b)</snippet></ROW><ROW><id>2516425</id><snippet>b.foo</snippet></ROW><ROW><id>2516663</id><snippet>class WindowsHttpAuthenticated(HttpAuthenticated):
    """
    Provides Windows (NTLM) http authentication.
    @ivar pm: The password manager.
    @ivar handler: The authentication handler.
    """

    def u2handlers(self):
        # try to import ntlm support  
        try:
            from ntlm import HTTPNtlmAuthHandler
        except ImportError:
            raise Exception("Cannot import python-ntlm module")
        handlers = HttpTransport.u2handlers(self)
        handlers.append(HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(self.pm))
        return handlers
</snippet></ROW><ROW><id>2516663</id><snippet>from suds.transport.https import WindowsHttpAuthenticated
ntlm = WindowsHttpAuthenticated(username='xx', password='xx')
client = Client(url, transport=ntlm)
</snippet></ROW><ROW><id>2516812</id><snippet>"true\n"</snippet></ROW><ROW><id>2516812</id><snippet>isdeployed.startswith("true")</snippet></ROW><ROW><id>2516870</id><snippet>def function1():
    al = [10]
    def function2():
        print al[0]
        al[0] -= 1
        if al[0]&gt;0:
           function2()
    function2()
</snippet></ROW><ROW><id>2518022</id><snippet>--time-style=long-iso</snippet></ROW><ROW><id>2518712</id><snippet>-*- coding: utf-8 -*-</snippet></ROW><ROW><id>2518712</id><snippet>&lt;meta http-equiv="content-type" content="text/html;charset=utf-8" /&gt;</snippet></ROW><ROW><id>2518735</id><snippet>len(set(a)) - len(c)</snippet></ROW><ROW><id>2518735</id><snippet>len(a)</snippet></ROW><ROW><id>2518735</id><snippet>a</snippet></ROW><ROW><id>2518828</id><snippet>time.mktime</snippet></ROW><ROW><id>2518828</id><snippet>mktime</snippet></ROW><ROW><id>2518828</id><snippet>mktime</snippet></ROW><ROW><id>2518828</id><snippet>datetime</snippet></ROW><ROW><id>2518828</id><snippet>datetime</snippet></ROW><ROW><id>2518828</id><snippet>datetime</snippet></ROW><ROW><id>2518828</id><snippet>timedelta</snippet></ROW><ROW><id>2518828</id><snippet>from datetime import datetime
epoch = datetime(1970, 1, 1)
t = datetime(1956, 3, 2)
diff = t-epoch
print diff.days * 24 * 3600 + diff.seconds
</snippet></ROW><ROW><id>2519610</id><snippet>#!/usr/bin/env python
import getpass
import sys
import telnetlib

HOST = "localhost"
user = raw_input("Enter your remote account: ")
password = getpass.getpass()

tn = telnetlib.Telnet(HOST)

tn.read_until("login: ")
tn.write(user + "\n")
if password:
    tn.read_until("Password: ")
    tn.write(password + "\n")

tn.write("ls\n")
tn.write("exit\n")

print tn.read_all()
</snippet></ROW><ROW><id>2519616</id><snippet>static PyStringObject *characters[UCHAR_MAX + 1];

...

PyObject *
PyString_FromStringAndSize(const char *str, Py_ssize_t size)
{

...

    if (size == 1 &amp;&amp; str != NULL &amp;&amp;
    (op = characters[*str &amp; UCHAR_MAX]) != NULL)
    {
        #ifdef COUNT_ALLOCS
            one_strings++;
        #endif

        Py_INCREF(op);
        return (PyObject *)op;
    }

...
</snippet></ROW><ROW><id>2519616</id><snippet>a = str(num)
b = str(num)
print a is b # &lt;-- this will print False in most cases (but try str(1) is str(1))
</snippet></ROW><ROW><id>2519616</id><snippet>a = "text"
b = "text"
print a is b # &lt;-- this will print True
</snippet></ROW><ROW><id>2519701</id><snippet>re.match</snippet></ROW><ROW><id>2519701</id><snippet>MatchObject</snippet></ROW><ROW><id>2519701</id><snippet>None</snippet></ROW><ROW><id>2519701</id><snippet>&gt;&gt;&gt; re.match("^[a-zA-Z0-9_.-]+$", "hello")
&lt;_sre.SRE_Match object at 0xb7600250&gt;
&gt;&gt;&gt; re.match("^[a-zA-Z0-9_.-]+$", "    ")
&gt;&gt;&gt; print re.match("^[a-zA-Z0-9_.-]+$", "    ")
None
</snippet></ROW><ROW><id>2519701</id><snippet>re.match(...) == True</snippet></ROW><ROW><id>2519701</id><snippet>re.match(...) is not None</snippet></ROW><ROW><id>2519701</id><snippet>if re.match(...)</snippet></ROW><ROW><id>2519721</id><snippet>lfi=lfi.union(set(li))
</snippet></ROW><ROW><id>2519721</id><snippet>lf</snippet></ROW><ROW><id>2519721</id><snippet>lfi.update(li)
</snippet></ROW><ROW><id>2519721</id><snippet>[set([1, 2, 7]), set([9, 3, 4, 6])]
</snippet></ROW><ROW><id>2519764</id><snippet>Attendance</snippet></ROW><ROW><id>2519764</id><snippet>Entity</snippet></ROW><ROW><id>2519764</id><snippet>Project</snippet></ROW><ROW><id>2519764</id><snippet>Student</snippet></ROW><ROW><id>2519764</id><snippet>sqlalchemy</snippet></ROW><ROW><id>2519764</id><snippet>delve into the database</snippet></ROW><ROW><id>2519764</id><snippet>composite keys</snippet></ROW><ROW><id>2519772</id><snippet>mox</snippet></ROW><ROW><id>2519772</id><snippet>setattr</snippet></ROW><ROW><id>2519772</id><snippet>mock.StubOutWithMock(myinstance, 'myproperty')
myinstance.myproperty = 'goodbye'
</snippet></ROW><ROW><id>2519772</id><snippet># Save old attribute so it can be replaced during teardown
saved = getattr(myinstance, 'myproperty')
# Replace the existing attribute with a mock
mocked = MockAnything()
setattr(myinstance, 'myproperty', mocked)
</snippet></ROW><ROW><id>2519772</id><snippet>myproperty</snippet></ROW><ROW><id>2519772</id><snippet>getattr</snippet></ROW><ROW><id>2519772</id><snippet>setattr</snippet></ROW><ROW><id>2519772</id><snippet>__get__</snippet></ROW><ROW><id>2519772</id><snippet>__set__</snippet></ROW><ROW><id>2519772</id><snippet>mock.StubOutWithMock(myinstance.__class__, 'myproperty')
myinstance.myproperty = 'goodbye'
</snippet></ROW><ROW><id>2519772</id><snippet>myproperty</snippet></ROW><ROW><id>2519829</id><snippet>import gnome.ui

gnome.program_init('Program', self.version) # This is going to trigger a warning that program name has been set twice, you can ignore this, it seems to be a problem with a recent version of glib, the warning is all over the place out there
client = gnome.ui.master_client() # connect us to gnome session manager, we need to init the program before this
client.connect('save-yourself', self.on_logout) # This gets called when the user confirms the logout/shutdown
client.connect('shutdown-cancelled', self.on_logout_cancel) # This gets called when the logout/shutdown is canceled
client.connect('die', self.on_logout) # Don't know when this gets called it never got in my tests

def on_logout(self, *args):
    # save settings an create a file that tells the wrapper that we have exited correctly!
    # we'll still return with status code 1, but that's just gtk crashing somehow

def on_logout_cancel(self, *args):
    # simply delete the logout file if it exists
</snippet></ROW><ROW><id>2519829</id><snippet>on_logout</snippet></ROW><ROW><id>2519895</id><snippet>property = 'foo'
value = 'bar'

class MC(type):
  def __init__(cls, name, bases, dict):
    setattr(cls, property, value)
    super(MC, cls).__init__(name, bases, dict)

class C(object):
  __metaclass__ = MC

print C.foo
</snippet></ROW><ROW><id>2520867</id><snippet>*******@gmail.com</snippet></ROW><ROW><id>2520936</id><snippet>my_choice in dict(VOTE_TYPE)</snippet></ROW><ROW><id>2521054</id><snippet>#!/usr/bin/python                                                               

import time
import sys
import curses

def alarmloop(stdscr):
    stdscr.addstr("How many seconds (alarm1)? ")
    curses.echo()
    alarm1 = int(stdscr.getstr())
    while (1):
        time.sleep(alarm1)
        curses.flushinp()
        stdscr.clear()
        stdscr.addstr("Alarm1\n")
        stdscr.addstr("Continue (Y/N)?[Y]:")
        doit = stdscr.getch()
        stdscr.addstr("\n")
        stdscr.addstr("Input "+chr(doit)+"\n")
        stdscr.refresh()
        if doit == ord('N') or doit == ord('n'):
            stdscr.addstr("Exiting.....\n")
            break

curses.wrapper(alarmloop)
</snippet></ROW><ROW><id>2521054</id><snippet>#!/usr/bin/python

import time
import subprocess
import sys
import msvcrt

alarm1 = int(raw_input("How many seconds (alarm1)? "))

while (1):
    time.sleep(alarm1)
    print "Alarm1"
    sys.stdout.flush()

    # Try to flush the buffer
    while msvcrt.kbhit():
        msvcrt.getch()

    print "Continue (Y/N)?[Y]"
    doit = msvcrt.getch()
    print "Input",doit
    if doit == 'N' or doit=='n':
        print "Exiting....."
        break
</snippet></ROW><ROW><id>2521624</id><snippet>def print_divide(x,y):
    try:
        print x/y
    except ZeroDivisionError:
        pass
</snippet></ROW><ROW><id>2521650</id><snippet>verify</snippet></ROW><ROW><id>2521650</id><snippet>&gt;&gt;&gt; from zope.interface import Interface, Attribute, implements
&gt;&gt;&gt; class IFoo(Interface):
...     x = Attribute("The X attribute")
...     y = Attribute("The Y attribute")

&gt;&gt;&gt; class Foo(object):
...     implements(IFoo)
...     x = 1
...     def __init__(self):
...         self.y = 2

&gt;&gt;&gt; from zope.interface.verify import verifyObject
&gt;&gt;&gt; verifyObject(IFoo, Foo())
True

&gt;&gt;&gt; from zope.interface.verify import verifyClass
&gt;&gt;&gt; verifyClass(IFoo, Foo)
True
</snippet></ROW><ROW><id>2521745</id><snippet>&lt;!-- ... --&gt;</snippet></ROW><ROW><id>2521745</id><snippet>soup.find('p', attrs={'class' : 'lead'})</snippet></ROW><ROW><id>2521745</id><snippet>&gt;&gt;&gt; html =re.sub(re.compile("&lt;!--.*?--&gt;",re.DOTALL),"",html)
&gt;&gt;&gt;
&gt;&gt;&gt; soup=BeautifulSoup(html)
&gt;&gt;&gt;
&gt;&gt;&gt; soup.find('p', attrs={'class' : 'lead'})
&lt;p class="lead"&gt;The class of exotic Jupiter-mass planets that orb  .....
</snippet></ROW><ROW><id>2521792</id><snippet>class User(object):

    def _setName(self, name=None):
        self._name = name

    def _getName(self):
        return self._name

    def _setPassword(self, password):
        self._password = password

    def _getPassword(self):
        return self._password

    def commit(self):
        pass

    name = property(_getName, _setName)
    password = property(_getPassword, _setPassword)

&gt;&gt;u = User()
&gt;&gt;u.name = 'Jason Martinez'
&gt;&gt;u.password = 'linebreak'
&gt;&gt;u.commit()
</snippet></ROW><ROW><id>2521937</id><snippet>locals()</snippet></ROW><ROW><id>2521937</id><snippet>def foo(a, b, c):
    print locals()

&gt;&gt;&gt; foo(1, 2, 3)
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>2521937</id><snippet>locals()</snippet></ROW><ROW><id>2521937</id><snippet>def foo(a, b, c):
    x = 4
    y = 5
    print locals()

&gt;&gt;&gt; foo(1, 2, 3)
{'y': 5, 'x': 4, 'c': 3, 'b': 2, 'a': 1}
</snippet></ROW><ROW><id>2521987</id><snippet>None</snippet></ROW><ROW><id>2521987</id><snippet>user_id</snippet></ROW><ROW><id>2521987</id><snippet>def __init__(self, user_id=None):
    if user_id is None:
         ...
</snippet></ROW><ROW><id>2521987</id><snippet>getFullName</snippet></ROW><ROW><id>2522013</id><snippet>timeit</snippet></ROW><ROW><id>2522013</id><snippet>import timeit

statements=["""\
try:
    b = 10/a
except ZeroDivisionError:
    pass""",
"""\
if a:
    b = 10/a""",
"b = 10/a"]

for a in (1,0):
    for s in statements:
        t = timeit.Timer(stmt=s, setup='a={}'.format(a))
        print("a = {}\n{}".format(a,s))
        print("%.2f usec/pass\n" % (1000000 * t.timeit(number=100000)/100000))
</snippet></ROW><ROW><id>2522013</id><snippet>a = 1
try:
    b = 10/a
except ZeroDivisionError:
    pass
0.25 usec/pass

a = 1
if a:
    b = 10/a
0.29 usec/pass

a = 1
b = 10/a
0.22 usec/pass

a = 0
try:
    b = 10/a
except ZeroDivisionError:
    pass
0.57 usec/pass

a = 0
if a:
    b = 10/a
0.04 usec/pass

a = 0
b = 10/a
ZeroDivisionError: int division or modulo by zero
</snippet></ROW><ROW><id>2522013</id><snippet>try/except</snippet></ROW><ROW><id>2522013</id><snippet>if</snippet></ROW><ROW><id>2522013</id><snippet>if</snippet></ROW><ROW><id>2522395</id><snippet>def text_message(self, msg):
    user = User.get_or_insert(msg.sender)

    if not user.partner:
        # user doesn't have a partner, find them one
        other = db.Query(User).filter('partner =', None).fetch(2)
        other = [u for u in other if u.key() != user.key()]
        if other:
            # connect user with other[0]
        else:
            # no one to connect to!
</snippet></ROW><ROW><id>2522531</id><snippet>[w for w in words if all([w[i] in chars[i] for i in range(len(w))])]
</snippet></ROW><ROW><id>2522547</id><snippet># -*- coding: utf-8 -*-

def filterKeyword(keyword, adText, filterType):
    # same as yours

filterKeyword(u'ポケモン', u'黄色のポケモン', 'contains')
</snippet></ROW><ROW><id>2522856</id><snippet>a, _, _ = numbers()
</snippet></ROW><ROW><id>2522856</id><snippet>a, *_ = numbers()
</snippet></ROW><ROW><id>2522856</id><snippet>_</snippet></ROW><ROW><id>2522878</id><snippet>namespace Foobar;

class Foo {
    static public function test($name) {
        print '[['. $name .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test'); // As of PHP 5.3.0

new InexistentClass;
</snippet></ROW><ROW><id>2522878</id><snippet>[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
</snippet></ROW><ROW><id>2523020</id><snippet>mypad = curses.newpad(40,60)
mypad_pos = 0
mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)
</snippet></ROW><ROW><id>2523020</id><snippet>if  cmd == curses.KEY_DOWN:
    mypad_pos += 1
    mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)
elif cmd == curses.KEY_UP:
    mypad_pos -= 1
    mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)
</snippet></ROW><ROW><id>2523345</id><snippet>def iter_sublists(l):
    n = len(l)+1
    for i in xrange(n):
        for j in xrange(i+1, n):
            yield l[i:j]

&gt;&gt;&gt; print list(iter_sublists([1,2,3]))
[[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]
</snippet></ROW><ROW><id>2523884</id><snippet>def xml = new MarkupBuilder(writer)
xml.records() {
  car(name:'HSV Maloo', make:'Holden', year:2006) {
    country('Australia')
    record(type:'speed', 'Production Pickup Truck with speed of 271kph')
  }
}
</snippet></ROW><ROW><id>2524000</id><snippet>instance = Type()
#bound method.
instance.methodName(params)

#unbound method call, 'instance' is the instance of some object, pointer to witch
#you want to pass to method. These calls are similar.
Type.methodName(instance, params)
</snippet></ROW><ROW><id>2524202</id><snippet>RuntimeError: maximum recursion depth exceeded</snippet></ROW><ROW><id>2524202</id><snippet>def find_key_nonrecursive(adict, key):
  stack = [adict]
  while stack:
    d = stack.pop()
    if key in d:
      return d[key]
    for k, v in d.iteritems():
      if isinstance(v, dict):
        stack.append(v)
</snippet></ROW><ROW><id>2524202</id><snippet>dict</snippet></ROW><ROW><id>2524202</id><snippet>while</snippet></ROW><ROW><id>2524202</id><snippet>.pop</snippet></ROW><ROW><id>2524202</id><snippet>.append</snippet></ROW><ROW><id>2524202</id><snippet>stack</snippet></ROW><ROW><id>2524242</id><snippet>from Tkinter import *
root = Tk()
root.title("MyApp")

myvar = StringVar()
def mywarWritten(*args):
    print "mywarWritten",myvar.get()

myvar.trace("w", mywarWritten)

label = Label(root, textvariable=myvar)
label.pack()

text_entry = Entry(root, textvariable=myvar)
text_entry.pack()

root.mainloop()
</snippet></ROW><ROW><id>2524272</id><snippet>wscript</snippet></ROW><ROW><id>2524272</id><snippet>import atexit
import time

class MayBeep(object):
  def __init__(self, deadline=10.0):
    self.deadline = time.time() + deadline
  def __call__(self):
    if time.time() &gt; self.deadline():
      print '\7'

atexit.register(MayBeep())

... rest of your wscript module ...
</snippet></ROW><ROW><id>2524272</id><snippet>print '\7'</snippet></ROW><ROW><id>2524316</id><snippet>virtual QVariant data ( int column, int role ) const
</snippet></ROW><ROW><id>2524316</id><snippet>virtual void setData ( int column, int role, const QVariant &amp; value)
</snippet></ROW><ROW><id>2524316</id><snippet>class TreeItem(QtGui.QTreeWidgetItem):

    PythonValueRole = QtCore.Qt.UserRole

    #values are list of python objects, that have __str__ and can be compared
    def __init__(self, tree, values):
        QtGui.QTreeWidgetItem.__init__(self, tree)
        i = 0
        for v in values:
            self.setData(i, TreeItem.PythonValueRole, v)
            i += 1

    #overridden to simplify data assigning. When called with PythonValueRole, passes
    #that object's string representation to DisplayRole and EditRole
    def setData(self, col, role, value):
        if role == TreeItem.PythonValueRole:
            QtGui.QTreeWidgetItem.setData(self, col, TreeItem.PythonValueRole, value)
            # sets DisplayRole and EditRole
            QtGui.QTreeWidgetItem.setData(self, col, QtCore.Qt.EditRole, str(value)) 
            QtGui.QTreeWidgetItem.setData(self, col, QtCore.Qt.DisplayRole, str(value))
        else:
            QtGui.QTreeWidgetItem.setData(self, col, role, value)

    def __lt__(self, other):
        c = self.treeWidget().sortColumn()
        return self.data(c, TreeItem.PythonValueRole).toPyObject() &lt; 
               other.data(c, TreeItem.PythonValueRole).toPyObject()
</snippet></ROW><ROW><id>2524549</id><snippet>suds</snippet></ROW><ROW><id>2524627</id><snippet>sub</snippet></ROW><ROW><id>2524627</id><snippet>&gt;&gt;&gt; print d2.find('/sub')[0]
&amp;test;
&gt;&gt;&gt; d2.find('/sub').getchildren()
[&amp;test;]
</snippet></ROW><ROW><id>2524716</id><snippet>import sys, tty, termios
fd = sys.stdin.fileno()
old_settings = termios.tcgetattr(fd)
tty.setraw(sys.stdin.fileno())
ch = sys.stdin.read(1)
</snippet></ROW><ROW><id>2524716</id><snippet>import msvcrt
ch = msvcrt.getch()
</snippet></ROW><ROW><id>2524880</id><snippet>try</snippet></ROW><ROW><id>2524880</id><snippet>except</snippet></ROW><ROW><id>2524880</id><snippet>None</snippet></ROW><ROW><id>2524880</id><snippet>0</snippet></ROW><ROW><id>2524880</id><snippet>''</snippet></ROW><ROW><id>2524880</id><snippet>c = None
b = [1, 2]


if c is None:
    a = b
else:
    a = c
</snippet></ROW><ROW><id>2524880</id><snippet>c = None
b = [1, 2]
a = c if c is not None else b
</snippet></ROW><ROW><id>2524880</id><snippet>or</snippet></ROW><ROW><id>2524880</id><snippet>c = None
b = [1, 2]
a = c or b
</snippet></ROW><ROW><id>2524880</id><snippet>c = []
b = [1, 2]
a = c or b
</snippet></ROW><ROW><id>2524880</id><snippet>a</snippet></ROW><ROW><id>2524880</id><snippet>[]</snippet></ROW><ROW><id>2524880</id><snippet>[1, 2]</snippet></ROW><ROW><id>2524880</id><snippet>[]</snippet></ROW><ROW><id>2524880</id><snippet>or</snippet></ROW><ROW><id>2524880</id><snippet>if foo:</snippet></ROW><ROW><id>2524880</id><snippet>if foo is not None:</snippet></ROW><ROW><id>2524956</id><snippet>memcached.html</snippet></ROW><ROW><id>2524956</id><snippet>set(self, key, val, time=0, min_compress_len=0)
</snippet></ROW><ROW><id>2524956</id><snippet>mc.set(key, val, time)
</snippet></ROW><ROW><id>2525117</id><snippet>Manager</snippet></ROW><ROW><id>2525117</id><snippet>class MyManager(models.Manager):
    def get_or_none(self, **kwargs):
        try:
            return self.get(**kwargs)
        except self.model.DoesNotExist:
            return None

class MyModel(models.Model):
    objects = MyManager()
</snippet></ROW><ROW><id>2525117</id><snippet>MyModel.objects.get_or_none(asdf=something)
</snippet></ROW><ROW><id>2525251</id><snippet>mapper(User, users_table, include_properties=['user_id', 'user_name'])

mapper(Address, addresses_table, exclude_properties=['street', 'city', 'state', 'zip'])
</snippet></ROW><ROW><id>2525339</id><snippet>^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$
</snippet></ROW><ROW><id>2525339</id><snippet>[a-zA-Z0-9]</snippet></ROW><ROW><id>2525339</id><snippet>(…)*</snippet></ROW><ROW><id>2525339</id><snippet>a(bc)*
</snippet></ROW><ROW><id>2525339</id><snippet>a|abc|abcbc|abcbcbc|abcbcbcbc|…
</snippet></ROW><ROW><id>2525339</id><snippet>(?=[a-zA-Z0-9-]{4,25}$)^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$
</snippet></ROW><ROW><id>2525473</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(["ping.exe","www.google.com"], stdout = subprocess.PIPE)
&gt;&gt;&gt; print p.communicate()[0]

Pinging www.l.google.com [209.85.225.99] with 32 bytes of data:

Reply from 209.85.225.99: bytes=32 time=59ms TTL=52
Reply from 209.85.225.99: bytes=32 time=64ms TTL=52
Reply from 209.85.225.99: bytes=32 time=104ms TTL=52
Reply from 209.85.225.99: bytes=32 time=64ms TTL=52

Ping statistics for 209.85.225.99:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 59ms, Maximum = 104ms, Average = 72ms
</snippet></ROW><ROW><id>2525493</id><snippet>import subprocess
import sys
child = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE)
while True:
    out = child.stderr.read(1)
    if out == '' and child.poll() != None:
        break
    if out != '':
        sys.stdout.write(out)
        sys.stdout.flush()
</snippet></ROW><ROW><id>2525506</id><snippet>next</snippet></ROW><ROW><id>2525506</id><snippet>def returnList(items):
  log.debug("Creating side effect function for %s", items)
  def func():
    for item in items:
      log.debug("side effect yielding %s", item)
      yield item
    yield mock.DEFAULT

  generator = func()

  def effect(*args, **kwargs):
    return generator.next()

  return effect
</snippet></ROW><ROW><id>2525617</id><snippet>| approach       | american-english, |      big.txt, | time w.r.t. defaultdict |
|                |     time, seconds | time, seconds |                         |
|----------------+-------------------+---------------+-------------------------|
| Counter        |             0.451 |         3.367 |                     3.6 |
| setdefault     |             0.348 |         2.320 |                     2.5 |
| list           |             0.277 |         1.822 |                       2 |
| try/except     |             0.158 |         1.068 |                     1.2 |
| defaultdict    |             0.141 |         0.925 |                       1 |
| numpy          |             0.012 |         0.076 |                   0.082 |
| S.Mark's ext.  |             0.003 |         0.019 |                   0.021 |
| ext. in Cython |             0.001 |         0.008 |                  0.0086 |
#+TBLFM: $4=$3/@7$3;%.2g
</snippet></ROW><ROW><id>2525617</id><snippet>'/usr/share/dict/american-english'</snippet></ROW><ROW><id>2525617</id><snippet>'big.txt'</snippet></ROW><ROW><id>2525617</id><snippet>import cython

@cython.locals(
    chars=unicode,
    i=cython.Py_ssize_t,
    L=cython.Py_ssize_t[0x10000])
def countchars_cython(chars):
    for i in range(0x10000): # unicode code points &gt; 0xffff are not supported
        L[i] = 0

    for c in chars:
        L[c] += 1

    return {unichr(i): L[i] for i in range(0x10000) if L[i]}
</snippet></ROW><ROW><id>2525617</id><snippet>* python (dict) : 0.5  seconds
* python (list) : 0.5  (ascii) (0.2 if read whole file in memory)
* perl          : 0.5
* python (numpy): 0.07 
* c++           : 0.05
* c             : 0.008 (ascii)
</snippet></ROW><ROW><id>2525617</id><snippet>$ tail /usr/share/dict/american-english
éclat's
élan
élan's
émigré
émigrés
épée
épées
étude
étude's
études

$ du -h /usr/share/dict/american-english
912K    /usr/share/dict/american-english
</snippet></ROW><ROW><id>2525617</id><snippet>#!/usr/bin/env python3.1
import collections, fileinput, textwrap

chars = (ch for word in fileinput.input() for ch in word.rstrip())
# faster (0.4s) but less flexible: chars = open(filename).read()
print(textwrap.fill(str(collections.Counter(chars)), width=79))
</snippet></ROW><ROW><id>2525617</id><snippet>$ time -p python3.1 count_char.py /usr/share/dict/american-english
</snippet></ROW><ROW><id>2525617</id><snippet>time -p perl -MData::Dumper -F'' -lanwe'$c{$_}++ for (@F);
END{ $Data::Dumper::Terse = 1; $Data::Dumper::Indent = 0; print Dumper(\%c) }
' /usr/share/dict/american-english
</snippet></ROW><ROW><id>2525617</id><snippet>#!/usr/bin/env python
import codecs, itertools, operator, sys
import numpy

filename = sys.argv[1] if len(sys.argv)&gt;1 else '/usr/share/dict/american-english'

# ucs2 or ucs4 python?
dtype = {2: numpy.uint16, 4: numpy.uint32}[len(buffer(u"u"))]

# count ordinals
text = codecs.open(filename, encoding='utf-8').read()
a = numpy.frombuffer(text, dtype=dtype)
counts = numpy.bincount(a)

# pretty print
counts = [(unichr(i), v) for i, v in enumerate(counts) if v]
counts.sort(key=operator.itemgetter(1))
print ' '.join('("%s" %d)' % c for c in counts  if c[0] not in ' \t\n')
</snippet></ROW><ROW><id>2525617</id><snippet>("Å" 1) ("í" 2) ("ô" 2) ("å" 3) ("û" 3) ("ç" 4) ("â" 6) ("ê" 6) ("ñ" 6) ("ä" 7) ("á" 10) ("ó" 10) ("ö" 12) ("ü" 12) ("è" 29) ("X" 42) ("Q" 63) ("U" 117) ("é" 128) ("Y" 140) ("Z" 150) ("V" 330) ("I" 344) ("O" 354) ("F" 502) ("W" 507) ("N" 531) ("J" 539) ("E" 618) ("K" 656) ("R" 749) ("D" 809) ("G" 811) ("T" 858) ("H" 860) ("L" 912) ("P" 974) ("A" 1345) ("j" 1376) ("B" 1387) ("q" 1447) ("S" 1515) ("C" 1549) ("M" 1686) ("x" 2082) ("z" 3088) ("w" 6924) ("v" 7573) ("k" 7800) ("f" 10049) ("y" 12367) ("b" 14137) ("h" 18453) ("m" 20747) ("p" 20917) ("g" 22262) ("'" 24511) ("u" 25810) ("d" 28068) ("c" 30020) ("l" 39914) ("o" 48425) ("t" 51588) ("r" 56286) ("n" 56696) ("a" 62778) ("i" 66548) ("s" 86620) ("e" 87823)
real 0.07
user 0.06
sys 0.01
</snippet></ROW><ROW><id>2525617</id><snippet>// $ g++ *.cc -lboost_program_options 
// $ ./a.out /usr/share/dict/american-english    
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdlib&gt; // exit

#include &lt;boost/program_options/detail/utf8_codecvt_facet.hpp&gt;
#include &lt;boost/tr1/unordered_map.hpp&gt;
#include &lt;boost/foreach.hpp&gt;

int main(int argc, char* argv[]) {
  using namespace std;

  // open input file
  if (argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " &lt;filename&gt;\n";
    exit(2);
  }
  wifstream f(argv[argc-1]); 

  // assume the file has utf-8 encoding
  locale utf8_locale(locale(""), 
      new boost::program_options::detail::utf8_codecvt_facet);
  f.imbue(utf8_locale); 

  // count characters frequencies
  typedef std::tr1::unordered_map&lt;wchar_t, size_t&gt; hashtable_t;  
  hashtable_t counts;
  for (wchar_t ch; f &gt;&gt; ch; )
    counts[ch]++;

  // print result
  wofstream of("output.utf8");
  of.imbue(utf8_locale);
  BOOST_FOREACH(hashtable_t::value_type i, counts) 
    of &lt;&lt; "(" &lt;&lt; i.first &lt;&lt; " " &lt;&lt; i.second &lt;&lt; ") ";
  of &lt;&lt; endl;
}
</snippet></ROW><ROW><id>2525617</id><snippet>$ cat output.utf8 
</snippet></ROW><ROW><id>2525617</id><snippet>// $ gcc -O3 cc_ascii.c -o cc_ascii &amp;&amp; time -p ./cc_ascii &lt; input.txt
#include &lt;stdio.h&gt;

enum { N = 256 };
size_t counts[N];

int main(void) {
  // count characters
  int ch = -1;
  while((ch = getchar()) != EOF)
    ++counts[ch];

  // print result
  size_t i = 0;
  for (; i &lt; N; ++i) 
    if (counts[i])
      printf("('%c' %zu) ", (int)i, counts[i]);
  return 0;
}
</snippet></ROW><ROW><id>2525653</id><snippet>//foo[1]/bar[@type='artist']
</snippet></ROW><ROW><id>2525653</id><snippet>string xml =
    @"&lt;root&gt;
        &lt;foo&gt;
            &lt;bar type='artist'&gt; Artist 1 &lt;/bar&gt;
            &lt;bar type='artist'&gt; Artist 2 &lt;/bar&gt;
            &lt;bar type='artist'&gt; Artist 3 &lt;/bar&gt;
        &lt;/foo&gt;
        &lt;foo&gt;
            &lt;bar type='artist'&gt; Artist 1 &lt;/bar&gt;
            &lt;bar type='artist'&gt; Artist 2 &lt;/bar&gt;
            &lt;bar type='artist'&gt; Artist 3 &lt;/bar&gt;
            &lt;bar type='artist'&gt; Artist 4 &lt;/bar&gt;
        &lt;/foo&gt;
    &lt;/root&gt;";
XmlDocument document = new XmlDocument();
document.LoadXml(xml);

Assert.That(document.SelectNodes(@"/root/foo[1]/bar[@type='artist']").Count,
                                 Is.EqualTo(3));
Assert.That(document.SelectNodes(@"//foo[1]/bar[@type='artist']").Count,
                                 Is.EqualTo(3));
</snippet></ROW><ROW><id>2525746</id><snippet>query = GqlQuery("SELECT * FROM Atable WHERE owner = :1", users.get_current_user())
</snippet></ROW><ROW><id>2525906</id><snippet>import sys, os, stat, time

def get_times(p):
    s = os.stat(p)
    return ( 
        os.path.getatime(p),
        os.path.getmtime(p),
        os.path.getctime(p),
        s[stat.ST_ATIME],
        s[stat.ST_MTIME],
        s[stat.ST_CTIME],
    )

def main(p, delay=1):
    delay = float(delay)
    (a,b) = (1000000000, 1500000000)

    open(p,'w').close()

    print 'initial:'
    print get_times(p)

    for t in [ (a,a), (a,b), (b,a), (b,b) ]:
        print
        print 'test:', t
        os.utime(p,t)
        print get_times(p)
        time.sleep(delay)
        print get_times(p)

main(*sys.argv[1:])
</snippet></ROW><ROW><id>2525906</id><snippet>cd "$HOME" &amp;&amp; ptyhon test.py tempfile 5</snippet></ROW><ROW><id>2525906</id><snippet>% python /tmp/test.py tempfile 5
initial:
(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)

test: (1000000000, 1000000000)
(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)
(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)

test: (1000000000, 1500000000)
(1000000000.0, 1500000000.0, 1269629886.0, 1000000000, 1500000000, 1269629886)
(1000000000.0, 1500000000.0, 1269629886.0, 1000000000, 1500000000, 1269629886)

test: (1500000000, 1000000000)
(1500000000.0, 1000000000.0, 1269629891.0, 1500000000, 1000000000, 1269629891)
(1500000000.0, 1000000000.0, 1269629891.0, 1500000000, 1000000000, 1269629891)

test: (1500000000, 1500000000)
(1500000000.0, 1500000000.0, 1269629896.0, 1500000000, 1500000000, 1269629896)
(1500000000.0, 1500000000.0, 1269629896.0, 1500000000, 1500000000, 1269629896)
</snippet></ROW><ROW><id>2525906</id><snippet>/Developer/Tools/GetFileInfo</snippet></ROW><ROW><id>2525906</id><snippet>print get_times(p)</snippet></ROW><ROW><id>2525906</id><snippet>sys.stdout.flush()
os.system('/Developer/Tools/GetFileInfo ' + p)
</snippet></ROW><ROW><id>2525906</id><snippet>[ (a,b), (a,a), (b,a), (b,b) ]</snippet></ROW><ROW><id>2525906</id><snippet>% rm /tmp/tempfile; python /tmp/test.py /tmp/tempfile 1
initial:
(1269636574.0, 1269636574.0, 1269636574.0, 1269636574, 1269636574, 1269636574)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 03/26/2010 15:49:34
modified: 03/26/2010 15:49:34

test: (1000000000, 1500000000)
(1000000000.0, 1500000000.0, 1269636574.0, 1000000000, 1500000000, 1269636574)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 03/26/2010 15:49:34
modified: 07/13/2017 21:40:00
(1000000000.0, 1500000000.0, 1269636574.0, 1000000000, 1500000000, 1269636574)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 03/26/2010 15:49:34
modified: 07/13/2017 21:40:00

test: (1000000000, 1000000000)
(1000000000.0, 1000000000.0, 1269636576.0, 1000000000, 1000000000, 1269636576)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 09/08/2001 20:46:40
(1000000000.0, 1000000000.0, 1269636576.0, 1000000000, 1000000000, 1269636576)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 09/08/2001 20:46:40

test: (1500000000, 1000000000)
(1500000000.0, 1000000000.0, 1269636577.0, 1500000000, 1000000000, 1269636577)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 09/08/2001 20:46:40
(1500000000.0, 1000000000.0, 1269636577.0, 1500000000, 1000000000, 1269636577)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 09/08/2001 20:46:40

test: (1500000000, 1500000000)
(1500000000.0, 1500000000.0, 1269636578.0, 1500000000, 1500000000, 1269636578)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 07/13/2017 21:40:00
(1500000000.0, 1500000000.0, 1269636578.0, 1500000000, 1500000000, 1269636578)
file: "/private/tmp/tempfile"
type: ""
creator: ""
attributes: avbstclinmedz
created: 09/08/2001 20:46:40
modified: 07/13/2017 21:40:00
</snippet></ROW><ROW><id>2526154</id><snippet>NameError</snippet></ROW><ROW><id>2526154</id><snippet>ValueError</snippet></ROW><ROW><id>2526154</id><snippet>TypeError</snippet></ROW><ROW><id>2526154</id><snippet>raise ValueError("password must be longer than 6 characters")
</snippet></ROW><ROW><id>2526154</id><snippet>if (user.password = 'short'): ...
</snippet></ROW><ROW><id>2526154</id><snippet>class Test:

    minlen = 6

    @property
    def password(self):
        retunr self._password

    @password.setter
    def password(self, value):
        if not isinstance(value, basestring):
            raise TypeError("password must be a string")
        if len(value) &lt; self.minlen:
            raise ValueError("password must be at least %d character len" % \
                                 self.minlen)
        self._password = value
</snippet></ROW><ROW><id>2526397</id><snippet>accept()</snippet></ROW><ROW><id>2526397</id><snippet>visit()</snippet></ROW><ROW><id>2526397</id><snippet>accept()</snippet></ROW><ROW><id>2526397</id><snippet>visit()</snippet></ROW><ROW><id>2526397</id><snippet>visit_*()</snippet></ROW><ROW><id>2526400</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = "settings.py"
</snippet></ROW><ROW><id>2526400</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = "settings"
</snippet></ROW><ROW><id>2526400</id><snippet>sys.path</snippet></ROW><ROW><id>2526400</id><snippet>import settings.py
</snippet></ROW><ROW><id>2526400</id><snippet>py</snippet></ROW><ROW><id>2526400</id><snippet>settings</snippet></ROW><ROW><id>2526641</id><snippet>python-dev</snippet></ROW><ROW><id>2526770</id><snippet>printList</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>blist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>blist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>blist</snippet></ROW><ROW><id>2526770</id><snippet>blist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>blist</snippet></ROW><ROW><id>2526770</id><snippet>alist</snippet></ROW><ROW><id>2526770</id><snippet>[abc],[] == alist,blist</snippet></ROW><ROW><id>2526770</id><snippet>                           [abc],[] 
                         /     |     \
                       a/     b|      \c
                       /       |       \
                  [bc],[a]  [ac],[b]   [ab],[c]
                  /     \
                b/       \c
                /         \
           [c],[ab]      [b],[ac]
              |             |
             c|             |b
              |             |
           [],[abc]      [],[acb]


def printList(alist, blist=[]):
    # if alist is empty, we are in a 'leaf' in the recursion tree;
    # then blist contains one permutation; print it
    if not len(alist): print ''.join(blist)

    # ELSE, for each possible position in alist,
    for i in range(len(alist)):

        # move the element at that position from alist to the end of blist
        blist.append(alist.pop(i))

        # go to the 'children' node and do the printing job for its subtree
        printList(alist, blist)

        # then move back the element from the end of blist to its original
        # position in alist, so we can continue with the for loop
        # without altering alist
        alist.insert(i, blist.pop())
</snippet></ROW><ROW><id>2527255</id><snippet>Subscription</snippet></ROW><ROW><id>2527255</id><snippet>SQLAlchemy/declarative</snippet></ROW><ROW><id>2527255</id><snippet>from sqlalchemy import create_engine, Column, Integer, DateTime, String, ForeignKey, Table
from sqlalchemy.orm import relation, scoped_session, sessionmaker, eagerload
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite:///:memory:', echo=True)
session = scoped_session(sessionmaker(bind=engine, autoflush=True))
Base = declarative_base()

t_subscription = Table('subscription', Base.metadata,
    Column('userId', Integer, ForeignKey('user.id')),
    Column('channelId', Integer, ForeignKey('channel.id')),
)

class Channel(Base):
    __tablename__ = 'channel'

    id = Column(Integer, primary_key = True)
    title = Column(String)
    description = Column(String)
    link = Column(String)
    pubDate = Column(DateTime)

class User(Base):
    __tablename__ = 'user'

    id = Column(Integer, primary_key = True)
    username = Column(String)
    password = Column(String)
    sessionId = Column(String)

    channels = relation("Channel", secondary=t_subscription)

# NOTE: no need for this class
# class Subscription(Base):
    # ...

Base.metadata.create_all(engine)


# ######################
# Add test data
c1 = Channel()
c1.title = 'channel-1'
c2 = Channel()
c2.title = 'channel-2'
c3 = Channel()
c3.title = 'channel-3'
c4 = Channel()
c4.title = 'channel-4'
session.add(c1)
session.add(c2)
session.add(c3)
session.add(c4)
u1 = User()
u1.username ='user1'
session.add(u1)
u1.channels.append(c1)
u1.channels.append(c3)
u2 = User()
u2.username ='user2'
session.add(u2)
u2.channels.append(c2)
session.commit()


# ######################
# clean the session and test the code
session.expunge_all()

# retrieve all (I assume those are not that many)
channels = session.query(Channel).all()

# get subscription info for the user
#q = session.query(User)
# use eagerload(...) so that all 'subscription' table data is loaded with the user itself, and not as a separate query
q = session.query(User).options(eagerload(User.channels))
for u in q.all():
    for c in channels:
        print (c.id, c.title, (c in u.channels))
</snippet></ROW><ROW><id>2527255</id><snippet>(1, u'channel-1', True)
(2, u'channel-2', False)
(3, u'channel-3', True)
(4, u'channel-4', False)
(1, u'channel-1', False)
(2, u'channel-2', True)
(3, u'channel-3', False)
(4, u'channel-4', False)
</snippet></ROW><ROW><id>2527255</id><snippet>eagerload</snippet></ROW><ROW><id>2527255</id><snippet>User</snippet></ROW><ROW><id>2527255</id><snippet>channels</snippet></ROW><ROW><id>2527255</id><snippet>from sqlalchemy import and_
from sqlalchemy.sql.expression import case
#...
q = (session.query(#User.username, 
                   Channel.id, Channel.title, 
                   case([(Subscription.channelId == None, False)], else_=True)
                  ).outerjoin((Subscription, 
                                and_(Subscription.userId==User.id, 
                                     Subscription.channelId==Channel.id))
                             )
    )
# optionally filter by user
q = q.filter(User.id == uid()) # assuming uid() is the function that provides user.id
q = q.filter(User.sessionId == id()) # assuming uid() is the function that provides user.sessionId
res = q.all()
for r in res:
    print r
</snippet></ROW><ROW><id>2527511</id><snippet>set([a, b, c, a])
</snippet></ROW><ROW><id>2527513</id><snippet>#!/usr/bin/python
import re
import sys
for line in open(sys.argv[1],'r').readlines():
  line = re.sub(r'TargetName=.+',r'TargetName=D:\\new', line)
  line = re.sub(r'FriendlyName=.+',r'FriendlyName=big', line)
  print line,
</snippet></ROW><ROW><id>2527513</id><snippet>./test.py myfile.txt &gt; output.txt</snippet></ROW><ROW><id>2527637</id><snippet>import time
import os
import glob
from ZODB import DB
from ZODB.FileStorage import FileStorage
import transaction
from zc.blist import BList

print('STARTING')

random = open('/dev/urandom', 'rb')


def test_list(my_list, loops = 1000, element_size = 100):
    print('testing list')
    start = time.time()
    for loop in xrange(loops):
        my_list.append(random.read(element_size))
    print('appending %s elements took %.4f seconds' % (loops, time.time() - start))

    start = time.time()
    length = len(my_list)
    print('length calculated in %.4f seconds' % (time.time() - start,))

    start = time.time()
    for loop in xrange(loops):
        my_list.insert(length / 2, random.read(element_size))
    print('inserting %s elements took %.4f seconds' % (loops, time.time() - start))

    start = time.time()
    for loop in xrange(loops):
        my_list[loop] = my_list[loop][1:] + my_list[loop][0]
    print('modifying %s elements took %.4f seconds' % (loops, time.time() - start))

    start = time.time()
    for loop in xrange(loops):
        del my_list[0]
    print('removing %s elements took %.4f seconds' % (loops, time.time() - start))

    start = time.time()
    transaction.commit()
    print('committing all above took %.4f seconds' % (time.time() - start,))

    del my_list[:loops]
    transaction.commit()

    start = time.time()
    pack()
    print('packing after removing %s elements took %.4f seconds' % (loops, time.time() - start))

for filename in glob.glob('database.db*'):    
    try:
        os.unlink(filename)
    except OSError:
        pass

db = DB(FileStorage('database.db'),
        cache_size = 2000)

def pack():
    db.pack()

root = db.open().root()

root['my_list'] = BList()

print('inserting initial data to blist')

for loop in xrange(10):
    root['my_list'].extend(random.read(100) for x in xrange(100000))
    transaction.commit()

transaction.commit()

test_list(root['my_list'])
</snippet></ROW><ROW><id>2527903</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "I love #stackoverflow because #people are very #helpful!"
&gt;&gt;&gt; re.findall(r"#(\w+)", s)
['stackoverflow', 'people', 'helpful']
</snippet></ROW><ROW><id>2527903</id><snippet>&gt;&gt;&gt; re.findall(r"#(\w+)", "http://example.org/#comments")
['comments']
</snippet></ROW><ROW><id>2527903</id><snippet>&gt;&gt;&gt; def extract_hash_tags(s):
...    return set(part[1:] for part in s.split() if part.startswith('#'))
...
&gt;&gt;&gt; extract_hash_tags("#test http://example.org/#comments #test")
set(['test'])
</snippet></ROW><ROW><id>2527950</id><snippet>query = """UPDATE animal SET name = %s
           WHERE name = %s
           """
values = ("snake", "turtle")

cursor.execute(query, values)
cursor2.execute(query, values)
</snippet></ROW><ROW><id>2527950</id><snippet>arglist = [query, values]
cursor.execute(*arglist)
cursor2.execute(*arglist)
</snippet></ROW><ROW><id>2528282</id><snippet>class HouseForm(forms.ModelForm):
    address = forms.CharField(widget=forms.Textarea)

    class Meta:
        model = House
</snippet></ROW><ROW><id>2528453</id><snippet>timezone</snippet></ROW><ROW><id>2528453</id><snippet>DateTime</snippet></ROW><ROW><id>2528453</id><snippet>datetime</snippet></ROW><ROW><id>2528453</id><snippet>datetime</snippet></ROW><ROW><id>2528453</id><snippet>from sqlalchemy import types
from dateutil.tz import tzutc
from datetime import datetime

class UTCDateTime(types.TypeDecorator):

    impl = types.DateTime

    def process_bind_param(self, value, engine):
        if value is not None:
            return value.astimezone(tzutc())

    def process_result_value(self, value, engine):
        if value is not None:
            return datetime(value.year, value.month, value.day,
                            value.hour, value.minute, value.second,
                            value.microsecond, tzinfo=tzutc())
</snippet></ROW><ROW><id>2528453</id><snippet>datetime</snippet></ROW><ROW><id>2528526</id><snippet>10^5</snippet></ROW><ROW><id>2528526</id><snippet>print sum(1 for num in nums_dialed if num in client_nums)
</snippet></ROW><ROW><id>2528526</id><snippet>nums_dialed</snippet></ROW><ROW><id>2528526</id><snippet>nums_dialed_dict = collections.defaultdict(int)
for num in nums_dialed:
    nums_dialed_dict[num] += 1
</snippet></ROW><ROW><id>2528526</id><snippet>sum(nums_dialed_dict[num] for num in this_client_nums)
</snippet></ROW><ROW><id>2528881</id><snippet>p= header(title=name,created_by=id)
p.save()
</snippet></ROW><ROW><id>2528881</id><snippet>c=criteria(details='some details', headerid=p)
c.save()
o=options(opt_details='more details', headerid=p)
o.save()
</snippet></ROW><ROW><id>2528916</id><snippet>django.utils.datastructures.DotExpandedDict</snippet></ROW><ROW><id>2528916</id><snippet>getlist</snippet></ROW><ROW><id>2528916</id><snippet>prefix</snippet></ROW><ROW><id>2529152</id><snippet>for i in arr: 
      self.findValue(i,"someText") 
</snippet></ROW><ROW><id>2529152</id><snippet>i</snippet></ROW><ROW><id>2529152</id><snippet>self.findValue(str(i),"someText") 
</snippet></ROW><ROW><id>2529311</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>2529311</id><snippet>:</snippet></ROW><ROW><id>2529311</id><snippet>els= document.getElementsByTagNameNS('*', 'tag')
</snippet></ROW><ROW><id>2529511</id><snippet>import traceback

def foo(**kwargs):
    # stack is a list of 4-tuples: (filename, line number, function name, text)
    # see http://docs.python.org/library/traceback.html#module-traceback

    (filename,line_number,function_name,text)=traceback.extract_stack()[-2]
    print('foo was called: %s'%text)

foo(**{})
# foo was called: foo(**{})
foo()
# foo was called: foo()
</snippet></ROW><ROW><id>2529511</id><snippet>def pv(var):
    (filename,line_number,function_name,text)=traceback.extract_stack()[-2]
    print('%s: %s'%(text[text.find('(')+1:-1],var))

x=5
pv(x)
# x: 5
</snippet></ROW><ROW><id>2529511</id><snippet>pv</snippet></ROW><ROW><id>2529511</id><snippet>x</snippet></ROW><ROW><id>2529543</id><snippet>&lt;value&gt; if &lt;condition&gt; else &lt;other_value&gt;</snippet></ROW><ROW><id>2529543</id><snippet>&lt;value&gt;</snippet></ROW><ROW><id>2529543</id><snippet>&lt;condition&gt; ? &lt;value&gt; : &lt;other_value&gt;</snippet></ROW><ROW><id>2529543</id><snippet>&lt;value&gt;</snippet></ROW><ROW><id>2529543</id><snippet>&lt;other_value&gt;</snippet></ROW><ROW><id>2529543</id><snippet>if: ... else: ...</snippet></ROW><ROW><id>2529584</id><snippet>#!/usr/bin/env python
""" Searches subdirectories of the current directory looking for .pyc files which
    do not have matching .py files, and deletes them.

    This is useful as a hook for version control when Python files are moved.
    It is dangerous for projects that deliberately include Python 
    binaries without source.
"""
import os
import os.path
for root, dirs, files in os.walk("."):
    pyc_files = filter(lambda filename: filename.endswith(".pyc"), files)
    py_files = set(filter(lambda filename: filename.endswith(".py"), files))
    excess_pyc_files = filter(lambda pyc_filename: pyc_filename[:-1] not in py_files, pyc_files)
    for excess_pyc_file in excess_pyc_files:
        full_path = os.path.join(root, excess_pyc_file)
        print "Removing old PYC file:", full_path
        os.remove(full_path)
</snippet></ROW><ROW><id>2529755</id><snippet>2K - 1</snippet></ROW><ROW><id>2529755</id><snippet>x xor x == 0 for all x</snippet></ROW><ROW><id>2529755</id><snippet>x xor y == y xor x for all x and y</snippet></ROW><ROW><id>2529755</id><snippet>x xor (y xor z) == (x xor y) xor z (associativity)</snippet></ROW><ROW><id>2529755</id><snippet>x xor 0 == x for all x</snippet></ROW><ROW><id>2529755</id><snippet>^</snippet></ROW><ROW><id>2529755</id><snippet>3 ^ 4 ^ 7 ^  4 ^ 3 == 7</snippet></ROW><ROW><id>2529755</id><snippet>2 ^ 10 ^ 2 ^ 10 ^ 5 == 5</snippet></ROW><ROW><id>2529844</id><snippet>import threading
mydata = threading.local()
mydata.nesting = 0

class auto_refresh(object):

  def __init__(self, f):
    self.f = f

  def __call__(self, *args, **kwargs):
    mydata.nesting += 1
    try: return self.f(*args, **kwargs)
    finally:
      mydata.nesting -= 1
      if mydata.nesting == 0:
        print 'refreshing'
</snippet></ROW><ROW><id>2529844</id><snippet>import</snippet></ROW><ROW><id>2529844</id><snippet>try:
    import threading
except ImportError:
    import dummy_threading as threading
</snippet></ROW><ROW><id>2529895</id><snippet>import inspect

def first():
    return second()

def second():
    return inspect.getouterframes( inspect.currentframe() )[1]

first()[3] # 'first'
</snippet></ROW><ROW><id>2530064</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]'
&gt;&gt;&gt; re.sub(r'\[|\]|\s*&lt;[^&gt;]*&gt;\s*', '', s)
'510 E Airline Way'
</snippet></ROW><ROW><id>2530064</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]'
&gt;&gt;&gt; b = BeautifulSoup(s)
&gt;&gt;&gt; b.find('span').getText()
u'510 E Airline Way'
</snippet></ROW><ROW><id>2530064</id><snippet>&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; s='[&lt;span class="street-address"&gt;\n            510 E Airline Way\n           &lt;/span&gt;]'
&gt;&gt;&gt; h = html.document_fromstring(s)
&gt;&gt;&gt; h.cssselect('span')[0].text.strip()
'510 E Airline Way'
</snippet></ROW><ROW><id>2530236</id><snippet>id</snippet></ROW><ROW><id>2530236</id><snippet>ref</snippet></ROW><ROW><id>2530236</id><snippet>ref_id</snippet></ROW><ROW><id>2530236</id><snippet>options.objects.filter(header=a_header)
</snippet></ROW><ROW><id>2530745</id><snippet>pygame.event.wait</snippet></ROW><ROW><id>2530745</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>2530745</id><snippet>SecondEvent</snippet></ROW><ROW><id>2530745</id><snippet>display.update</snippet></ROW><ROW><id>2530745</id><snippet>display.update</snippet></ROW><ROW><id>2530768</id><snippet>a = raw_input("give a word: ").strip()
b = raw_input("give another word: ").strip()
c = a + " " + b
</snippet></ROW><ROW><id>2530780</id><snippet>''gas-stations''
</snippet></ROW><ROW><id>2530780</id><snippet>'gas-stations'
</snippet></ROW><ROW><id>2530780</id><snippet>'gas-stations'</snippet></ROW><ROW><id>2530780</id><snippet>"'gas-stations'"
</snippet></ROW><ROW><id>2530799</id><snippet>RMID=732423sdfs73242;</snippet></ROW><ROW><id>2530916</id><snippet>from nose.tools import *
class Test_mysim():
    def setup(self):
        self.ans = calculate_it_once()

    def test_sync(self):
        ans=calculate_it_sync()
        assert_equal(ans,self.ans)

    def test_async(self):
        ans=calculate_it_async()
        assert_equal(ans,self.ans)
</snippet></ROW><ROW><id>2531215</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; io = subprocess.Popen('ls', stdout=subprocess.PIPE).stdout
&gt;&gt;&gt; for line in io: print(line.strip())
</snippet></ROW><ROW><id>2531385</id><snippet>cls</snippet></ROW><ROW><id>2531385</id><snippet>cls</snippet></ROW><ROW><id>2531385</id><snippet>"\033[[80;j"</snippet></ROW><ROW><id>2531387</id><snippet>sudo python2.6 setup.py install</snippet></ROW><ROW><id>2531554</id><snippet>urlparse.urljoin()</snippet></ROW><ROW><id>2531724</id><snippet>sw</snippet></ROW><ROW><id>2531724</id><snippet>sent</snippet></ROW><ROW><id>2531724</id><snippet>[word for word in sent if word not in sw]</snippet></ROW><ROW><id>2531724</id><snippet>sent</snippet></ROW><ROW><id>2531724</id><snippet>re</snippet></ROW><ROW><id>2531724</id><snippet>re.findall(r'\w+', sentstring)</snippet></ROW><ROW><id>2531724</id><snippet>sentstring</snippet></ROW><ROW><id>2531724</id><snippet>[word for word in sent if word.lower() not in sw]</snippet></ROW><ROW><id>2531749</id><snippet>import functools
def trace(f):
    '''This decorator shows how the function was called'''
    @functools.wraps(f)
    def wrapper(*arg,**kw):            
        arg_str=','.join(['%r'%a for a in arg]+['%s=%s'%(key,kw[key]) for key in kw])
        print "%s(%s)" % (f.__name__, arg_str)
        return f(*arg, **kw)
    return wrapper

@trace
def foo(*args):
    pass


for n in range(3):
    foo(n)
</snippet></ROW><ROW><id>2531749</id><snippet># foo(0)
# foo(1)
# foo(2)
</snippet></ROW><ROW><id>2531749</id><snippet>foo</snippet></ROW><ROW><id>2531749</id><snippet>foo</snippet></ROW><ROW><id>2531749</id><snippet>def foo(*args):
    print('foo({0})'.format(args))
</snippet></ROW><ROW><id>2531790</id><snippet>a, b, *c = someseq
</snippet></ROW><ROW><id>2531790</id><snippet>(a, b), c = someseq[:2], someseq[2:]
</snippet></ROW><ROW><id>2531882</id><snippet>int(''.join([str(ord(i)) for i in some_value]))</snippet></ROW><ROW><id>2531882</id><snippet>'\x01I'</snippet></ROW><ROW><id>2531882</id><snippet>'\x01\x02'</snippet></ROW><ROW><id>2531882</id><snippet>'\x01\x00'</snippet></ROW><ROW><id>2531882</id><snippet>'\x00I'</snippet></ROW><ROW><id>2531882</id><snippet>'\x03\x04'</snippet></ROW><ROW><id>2531882</id><snippet>'\x02\x01'</snippet></ROW><ROW><id>2531971</id><snippet>key</snippet></ROW><ROW><id>2531971</id><snippet>cmp</snippet></ROW><ROW><id>2531971</id><snippet>key</snippet></ROW><ROW><id>2531982</id><snippet>c.login(...)</snippet></ROW><ROW><id>2531982</id><snippet>check_password</snippet></ROW><ROW><id>2531982</id><snippet>False</snippet></ROW><ROW><id>2531982</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>2531982</id><snippet>def setUp(self):
    self.user = User.objects.create_user(username='tauri', 
                                         password='gaul', 
                                         email='')
</snippet></ROW><ROW><id>2531982</id><snippet>set_password</snippet></ROW><ROW><id>2531982</id><snippet>def setUp(self):
    self.user = user = User.objects.create(username='tauri')
    user.set_password('gaul')
    user.save()
</snippet></ROW><ROW><id>2532087</id><snippet>arr</snippet></ROW><ROW><id>2532087</id><snippet>matrix</snippet></ROW><ROW><id>2532087</id><snippet>join</snippet></ROW><ROW><id>2532087</id><snippet>arr</snippet></ROW><ROW><id>2532087</id><snippet>list</snippet></ROW><ROW><id>2532087</id><snippet>tolist()</snippet></ROW><ROW><id>2532087</id><snippet>join</snippet></ROW><ROW><id>2532087</id><snippet>&gt;&gt;&gt; a = arr.tolist() # now you can manipulate the list.
&gt;&gt;&gt; for i in a:
 '|'.join(map(str,i))    

'0|1|2|3|4'
'0|1|2|3|4'
'0|1|2|3|4'
'0|1|2|3|4'
'0|1|2|3|4'
</snippet></ROW><ROW><id>2532087</id><snippet>numpy.asarry</snippet></ROW><ROW><id>2532087</id><snippet>&gt;&gt;&gt; arr = numpy.matrix([[x for x in range(5)] for y in range(5)])
&gt;&gt;&gt; ele = numpy.asarray(arr)
&gt;&gt;&gt; '|'.join(map(str,ele[0,]))
'0|1|2|3|4' # as per your example.
</snippet></ROW><ROW><id>2532159</id><snippet>sqlite3</snippet></ROW><ROW><id>2532305</id><snippet>QuerySet.all()</snippet></ROW><ROW><id>2532305</id><snippet>logging.debug(a[0].details)

for m in a:
  logging.debug(m.details)
</snippet></ROW><ROW><id>2532344</id><snippet>import re
def is_valid_hostname(hostname):
    if len(hostname) &gt; 255:
        return False
    if hostname[-1] == ".":
        hostname = hostname[:-1] # strip exactly one dot from the right, if present
    allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?&lt;!-)$", re.IGNORECASE)
    return all(allowed.match(x) for x in hostname.split("."))
</snippet></ROW><ROW><id>2532344</id><snippet>not disallowed</snippet></ROW><ROW><id>2532344</id><snippet>hostname</snippet></ROW><ROW><id>2532344</id><snippet>.</snippet></ROW><ROW><id>2532344</id><snippet>hostname</snippet></ROW><ROW><id>2532368</id><snippet>__hash__</snippet></ROW><ROW><id>2532368</id><snippet>def __hash__(self):
    return hash(self.id) ^ hash(self.area)
</snippet></ROW><ROW><id>2532558</id><snippet>sum(iterable[, start]</snippet></ROW><ROW><id>2532558</id><snippet>&gt;&gt;&gt; nums
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; [sum(nums[i:i+3]) for i in  range(0, len(nums),3)]
[6, 15]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2532641</id><snippet>mod_python</snippet></ROW><ROW><id>2532641</id><snippet>mod_php</snippet></ROW><ROW><id>2533142</id><snippet>input()</snippet></ROW><ROW><id>2533142</id><snippet>raw_input()</snippet></ROW><ROW><id>2533142</id><snippet>readline</snippet></ROW><ROW><id>2533142</id><snippet>def rlinput(prompt, prefill=''):
   readline.set_startup_hook(lambda: readline.insert_text(prefill))
   try:
      return raw_input(prompt)
   finally:
      readline.set_startup_hook()
</snippet></ROW><ROW><id>2533224</id><snippet>3to2</snippet></ROW><ROW><id>2533342</id><snippet>unittest</snippet></ROW><ROW><id>2533342</id><snippet>class MappingTestBase(unittest.TestCase):
    dictype = None
    # write all the tests using self.dictype
</snippet></ROW><ROW><id>2533342</id><snippet>class HashtableTest(MappingTestBase):
    dictype = hashtable.HashDict

class OtherMappingTest(MappingTestBase):
    dictype = othermodule.mappingimpl
</snippet></ROW><ROW><id>2533342</id><snippet>dictype</snippet></ROW><ROW><id>2533342</id><snippet>MappingTestBase</snippet></ROW><ROW><id>2533342</id><snippet>import</snippet></ROW><ROW><id>2533392</id><snippet>hasattr</snippet></ROW><ROW><id>2533392</id><snippet>&gt;&gt;&gt; class A(object): pass
... 
&gt;&gt;&gt; class B(A): __eq__ = lambda *_: 1
... 
&gt;&gt;&gt; class C(B): pass
... 
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; hasattr(type(c), '__eq__')
True
</snippet></ROW><ROW><id>2533392</id><snippet>hasattr(c, '__eq__')</snippet></ROW><ROW><id>2533392</id><snippet>__eq__</snippet></ROW><ROW><id>2533392</id><snippet>c</snippet></ROW><ROW><id>2533392</id><snippet>__eq__</snippet></ROW><ROW><id>2533392</id><snippet>True</snippet></ROW><ROW><id>2533392</id><snippet>hasattr</snippet></ROW><ROW><id>2533392</id><snippet>object</snippet></ROW><ROW><id>2533392</id><snippet>import inspect

def whichancestor(c, attname):
  for ancestor in inspect.getmro(type(c)):
    if attname in ancestor.__dict__:
      return ancestor
  return None
</snippet></ROW><ROW><id>2533392</id><snippet>inspect</snippet></ROW><ROW><id>2533392</id><snippet>__mro__</snippet></ROW><ROW><id>2533392</id><snippet>type(c)</snippet></ROW><ROW><id>2533707</id><snippet>import fileinput
for line in fileinput.input():
    process(line)
</snippet></ROW><ROW><id>2533707</id><snippet>print</snippet></ROW><ROW><id>2533707</id><snippet>process</snippet></ROW><ROW><id>2533957</id><snippet>#!/usr/bin/env python
"""Run a unit test and return result.

This can be used with `hg bisect`.
It is assumed that this file resides in the same dir as settings.py

"""

import os
from os.path import abspath, dirname
import sys
import unittest

# Set up django
project_dir = abspath(dirname(dirname(__file__)))
sys.path.insert(0, project_dir)
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'

from django.db import connection
from django.test import TestCase
from django.test.utils import setup_test_environment, teardown_test_environment

from myproject import settings
from myproject.myapp.models import MyModel


class MyTestCase(TestCase):

    def test_something(self):
        # A failed assertion will make unittest.main() return non-zero
        # which if used with `hg bisect` will mark the revision as bad
        self.assertEqual(0, len(MyModel.objects.all())) # and so on


if '__main__' == __name__:
    try:
        setup_test_environment()
        settings.DEBUG = False    
        verbosity = 0
        old_database_name = settings.DATABASE_NAME
        connection.creation.create_test_db(verbosity)
        unittest.main()
    finally:
        connection.creation.destroy_test_db(old_database_name, verbosity)
        teardown_test_environment()
</snippet></ROW><ROW><id>2534513</id><snippet>&gt;&gt;&gt; from project.models.user import *
&gt;&gt;&gt; import project # get module reference for reload
&gt;&gt;&gt; reload(project.models.user) # reload step 1
&gt;&gt;&gt; from project.models.user import * # reload step 2
</snippet></ROW><ROW><id>2534513</id><snippet>import *</snippet></ROW><ROW><id>2534513</id><snippet>&gt;&gt;&gt; from project.models import user
&gt;&gt;&gt; reload(user)
</snippet></ROW><ROW><id>2534513</id><snippet>doctest</snippet></ROW><ROW><id>2534513</id><snippet>python -i</snippet></ROW><ROW><id>2534513</id><snippet>unittest</snippet></ROW><ROW><id>2534513</id><snippet>reload</snippet></ROW><ROW><id>2534513</id><snippet>reload()</snippet></ROW><ROW><id>2534513</id><snippet>exec</snippet></ROW><ROW><id>2534766</id><snippet>.date()</snippet></ROW><ROW><id>2534766</id><snippet>datetime</snippet></ROW><ROW><id>2534766</id><snippet>bins = {}
for event in Event.all().fetch(1000):
    bins.setdefault(event.doe.date(), []).append( event )
</snippet></ROW><ROW><id>2534766</id><snippet>counts = collections.defaultdict(int)
for event in Event.all().fetch(1000):
    counts[event.doe.date()] += 1
</snippet></ROW><ROW><id>2534876</id><snippet>pickle</snippet></ROW><ROW><id>2534876</id><snippet>timeit</snippet></ROW><ROW><id>2534876</id><snippet>&gt;&gt;&gt; timeit.repeat('g.get(23)', 'g = {}')
[0.29134988784790039, 0.27160286903381348, 0.27237796783447266]
</snippet></ROW><ROW><id>2534876</id><snippet>g</snippet></ROW><ROW><id>2534876</id><snippet>g</snippet></ROW><ROW><id>2534876</id><snippet>.get()</snippet></ROW><ROW><id>2534876</id><snippet>.next()</snippet></ROW><ROW><id>2534966</id><snippet>lock = Lock()

lock.acquire()   # will block if another thread has lock
try:
    ... use lock
finally:
    lock.release() 
</snippet></ROW><ROW><id>2534984</id><snippet>get</snippet></ROW><ROW><id>2534984</id><snippet>def get(self, name=None):
    if name is None:
        """deal with the /rest/users case"""
    else:
        # deal with the /rest/users/(.*) case
        self.response.out.write('Hello '+ name+'!') 
</snippet></ROW><ROW><id>2534984</id><snippet>application = webapp.WSGIApplication([(r'/rest/users/(.*)', UsersHandler),
                                      (r'/rest/users', UsersHandler)]                                      
                                     debug=True)
</snippet></ROW><ROW><id>2534984</id><snippet>get</snippet></ROW><ROW><id>2535075</id><snippet>class B(A):
    def __init__(self):
        A.__init__(self)
</snippet></ROW><ROW><id>2535407</id><snippet>.py</snippet></ROW><ROW><id>2535418</id><snippet>atexit</snippet></ROW><ROW><id>2535484</id><snippet>else
{
    PyObject *pSeqfast = PySequence_Fast(pylist, "must be a sequence");
    Py_ssize_t n = PySequence_Fast_GET_SIZE(pSeqFast);

    for(Py_ssize_t i = 0; i &lt; n ; ++i)
    {
        gpointer obj = func(PySequence_Fast_GET_ITEM(pSeqfast, i));
        if (obj != NULL) result = g_list_append(result, obj);
        else fprintf(stderr, "Could not convert PyObject to C object.\n");
    }
    Py_DECREF(pSeqfast);
}
</snippet></ROW><ROW><id>2535654</id><snippet>cutoffs</snippet></ROW><ROW><id>2535654</id><snippet>d</snippet></ROW><ROW><id>2535654</id><snippet>float</snippet></ROW><ROW><id>2535654</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>2535654</id><snippet>&gt;&gt;&gt; # Here is a vectorized array operation, like you get from numpy. It won't
&gt;&gt;&gt; # happen if you just use a float and a list.
&gt;&gt;&gt; 2.0 &gt; [0.0, 1.8, 3.6, 5.4, 7.2]
[True, True, False, False, False] # not real
</snippet></ROW><ROW><id>2535654</id><snippet>&gt;&gt;&gt; # This is an actual copy-paste from a Python interpreter
&gt;&gt;&gt; 2.0 &gt; [0.0, 1.8, 3.6, 5.4, 7.2]
False
</snippet></ROW><ROW><id>2535654</id><snippet>cutoffs</snippet></ROW><ROW><id>2535654</id><snippet>list</snippet></ROW><ROW><id>2535654</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>2535770</id><snippet>as</snippet></ROW><ROW><id>2535934</id><snippet>[''.join(str(y) for y in x) for x in itertools.product(a, b, c)]
</snippet></ROW><ROW><id>2535964</id><snippet>class ValidationRule: 
    def __init__(self, **kwargs): 
        self.__dict__.update(kwargs)
</snippet></ROW><ROW><id>2536233</id><snippet>def flatten(*args):
    output = []
    for arg in args:
        if hasattr(arg, '__iter__'):
            output.extend(flatten(*arg))
        else:
            output.append(arg)
    return output
</snippet></ROW><ROW><id>2536296</id><snippet>whitespace = ' \t\r\n'
operators = '~!%^&amp;*()-+=[]{};:\'"/?.,&lt;&gt;\\|'

def scan(s):
    "returns a token and a state/token id"
    words = {0:'', 1:'', 2:''} # normal, operator, whitespace
    state = 2 # I pick ws as first state
    for c in s:
        if c in operators:
            if state != 1:
                yield (words[state], state)
                words[state] = ''
            state = 1
            words[state] += c
        elif c in whitespace:
            if state != 2:
                yield (words[state], state)
                words[state] = ''
            state = 2
            words[state] += c
        else:
            if state != 0:
                yield (words[state], state)
                words[state] = ''
            state = 0
            words[state] += c
    yield (words[state], state)
</snippet></ROW><ROW><id>2536296</id><snippet>&gt;&gt;&gt; it = scan('foo(); i++')
&gt;&gt;&gt; it.next()
('', 2)
&gt;&gt;&gt; it.next()
('foo', 0)
&gt;&gt;&gt; it.next()
('();', 1)
&gt;&gt;&gt; it.next()
(' ', 2)
&gt;&gt;&gt; it.next()
('i', 0)
&gt;&gt;&gt; it.next()
('++', 1)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2536330</id><snippet>ServicePointManager.ServerCertificateValidationCallback = (a, b, c, e) =&gt; true ;
</snippet></ROW><ROW><id>2536342</id><snippet>&gt;&gt;&gt; d = { 1 : 'foo', 2 : 'bar' }
&gt;&gt;&gt; ' '.join(d.values())
'foo bar'
</snippet></ROW><ROW><id>2536342</id><snippet>str</snippet></ROW><ROW><id>2536342</id><snippet>&gt;&gt;&gt; d = { 1 : 2, 3: 4 }
&gt;&gt;&gt; ' '.join(str(v) for v in d.values())
'2 4'
</snippet></ROW><ROW><id>2536419</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2536419</id><snippet>$ find
.
./test
./test/test.py
./some
./some/__init__.py

$ cat some/__init__.py 
x = 10

$ cat test/test.py 
import some
print some.x

$ cd test
$ export PYTHONPATH=..
$ python test.py
10
</snippet></ROW><ROW><id>2536560</id><snippet>f = open('file.txt', 'wb')
</snippet></ROW><ROW><id>2536686</id><snippet>def flatten_dict_values(d):
    values = []
    for value in d.itervalues():
        if isinstance(value, dict):
            values.extend(flatten_dict_values(value))
        else:
            values.append(value)
    return values

&gt;&gt;&gt; " ".join(flatten_dict_values({'one': 'not-nested',
...                                'two': {'three': 'nested',
...                                        'four': {'five': 'double-nested'}}}))
'double-nested nested not-nested'
</snippet></ROW><ROW><id>2536686</id><snippet>def flatten_dict_values(d, seen_dict_ids=None):
    values = []
    seen_dict_ids = seen_dict_ids or set()
    seen_dict_ids.add(id(d))
    for value in d.itervalues():
        if id(value) in seen_dict_ids:
            continue
        elif isinstance(value, dict):
            values.extend(flatten_dict_values(value, seen_dict_ids))
        else:
            values.append(value)
    return values

&gt;&gt;&gt; recursive_dict = {'one': 'not-nested',
...                   'two': {'three': 'nested'}}
&gt;&gt;&gt; recursive_dict['recursive'] = recursive_dict
&gt;&gt;&gt; " ".join(flatten_dict_values(recursive_dict))
'nested not-nested'
</snippet></ROW><ROW><id>2536690</id><snippet>std::vector</snippet></ROW><ROW><id>2536714</id><snippet>import pkg

sub_modules = (                                 
    pkg.__dict__.get(a) for a in dir(pkg) 
    if isinstance(                              
        pkg.__dict__.get(a), types.ModuleType
    )                                           
)               

for m in sub_modules:                                      
    for c in (                                             
        m.__dict__.get(a) for a in dir(m)                  
        if isinstance(m.__dict__.get(a), type(Base))
    ):          
        """ c is what I needed """
</snippet></ROW><ROW><id>2536716</id><snippet>result.groups()[x]</snippet></ROW><ROW><id>2536716</id><snippet>result.group(x+1)</snippet></ROW><ROW><id>2536716</id><snippet>foo</snippet></ROW><ROW><id>2536716</id><snippet>bar</snippet></ROW><ROW><id>2536716</id><snippet>r'foo(.*)bar'</snippet></ROW><ROW><id>2536716</id><snippet>with</snippet></ROW><ROW><id>2536716</id><snippet>import re
pattern = re.compile(r'foo(.*)bar')
with open(inFile, 'r') as fileList:
  searchResults = (pattern.search(line) for line in fileList)
  groups = (result.group(1) for result in searchResults if result is not None)
  print '\n'.join(groups)
</snippet></ROW><ROW><id>2536921</id><snippet>for varname in a.__class__.__dict__['A1'].__code__.co_varnames:
    print varname
</snippet></ROW><ROW><id>2536921</id><snippet>self
test1
</snippet></ROW><ROW><id>2536921</id><snippet>a.__class__</snippet></ROW><ROW><id>2536921</id><snippet>A</snippet></ROW><ROW><id>2537352</id><snippet>FloatField</snippet></ROW><ROW><id>2537478</id><snippet>class LoginError(Exception):
    CODES = { 'mismatch': 'Wrong credentials', 'disabled': 'Account disabled' }
    ...

try:
    // your authentication code
    raise LoginError('mismatch')
    ...
    raise LoginError('disabled')
except LoginError as e:
    self.redirect(your_login_url + '?err=' + e)

# In login page you must not print arbitrary GET parameter directly
err_reason = LoginError.CODES[self.request.get('err')]`
</snippet></ROW><ROW><id>2537798</id><snippet>geohash</snippet></ROW><ROW><id>2537935</id><snippet>^((?!\.part(?!0*1\.rar$)\d+\.rar$).)*\.(?:rar|r?0*1)$
</snippet></ROW><ROW><id>2537935</id><snippet>^((?:(?!\.part\d+\.rar$).)*)\.(?:(?:part0*1\.)?rar|r?0*1)$
</snippet></ROW><ROW><id>2537969</id><snippet>%%</snippet></ROW><ROW><id>2538241</id><snippet>import pymqi

queue_manager = "QUEUE_MANAGER_NAME"
channel = "SVRCONN.1"
host = "host.domain.com"
port = "1434"
conn_info = "%s(%s)" % (host, port)

qmgr = pymqi.QueueManager(None)
qmgr.connectTCPClient(queue_manager, pymqi.cd(), channel, conn_info)
</snippet></ROW><ROW><id>2538657</id><snippet>radians</snippet></ROW><ROW><id>2538657</id><snippet>degrees</snippet></ROW><ROW><id>2538657</id><snippet>45.9</snippet></ROW><ROW><id>2538657</id><snippet>-66.6</snippet></ROW><ROW><id>2538657</id><snippet>ephem</snippet></ROW><ROW><id>2538805</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>2538901</id><snippet>sys.path</snippet></ROW><ROW><id>2538901</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os
&lt;module 'posixpath' from '/environments/userpython/lib/python2.6/posixpath.pyc'&gt;
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil
&lt;module 'shutil' from '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/shutil.pyc'&gt;
</snippet></ROW><ROW><id>2539014</id><snippet>from PIL import Image
import numpy
im = Image.open( filename )
data = numpy.asarray( im )
</snippet></ROW><ROW><id>2539148</id><snippet>if</snippet></ROW><ROW><id>2539148</id><snippet>else</snippet></ROW><ROW><id>2539148</id><snippet>if (a and b and c)</snippet></ROW><ROW><id>2539307</id><snippet>SESSION_COOKIE_AGE</snippet></ROW><ROW><id>2539307</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>2539452</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2539452</id><snippet>top_users = [(k, list(g)) for k,g in groupby(top_users, key=lambda x: x.score))]
for u in top_users[0][1]:
    u.status = 'First prize'
for u in top_users[1][1]:
    u.status = 'Second prize'
for u in top_users[2][1]:
    u.status = 'Third prize'
for score, users in top_users[3:]:
    for u in users:
        u.status = 'Highly recommended'
</snippet></ROW><ROW><id>2539452</id><snippet>itertools.count</snippet></ROW><ROW><id>2539452</id><snippet>top_users = [(k, list(g)) for k,g in groupby(top_users, key=lambda x: x.score))]
for c, (score, group) in zip(count(0), top_users):
    if c == 0:
        prize = 'First prize'
    elif c == 1:
        prize = 'Second prize'
    elif c == 2:
        prize = 'Third prize'
    else:
        prize = 'Highly recommended'
    map(lambda x: setattr(x, 'status', prize), group)
</snippet></ROW><ROW><id>2539452</id><snippet>top_users = [(k, list(g)) for k,g in groupby(top_users, key=lambda x: x.score))]
prize_list = ['First prize', 'Second prize', 'Third prize', 'Highly recommended']
for c, (score, group) in zip(count(0), top_users):
    prize = prize_list[c] if c &lt; len(prize_list) else prize_list[-1]
    map(lambda x: setattr(x, 'status', prize), group)
</snippet></ROW><ROW><id>2539590</id><snippet># make namespace explicit
from matplotlib import pyplot as PLT

cbar = fig.colorbar(result)
</snippet></ROW><ROW><id>2539590</id><snippet>import numpy as NP
from matplotlib import pyplot as PLT

A = NP.random.random_integers(0, 10, 100).reshape(10, 10)
fig = PLT.figure()
ax1 = fig.add_subplot(111)

cax = ax1.imshow(A, interpolation="nearest")

# set the tickmarks *if* you want cutom (ie, arbitrary) tick labels:
cbar = fig.colorbar(cax, ticks=[0, 5, 10])

# note: 'ax' is not the same as the 'axis' instance created by calling 'add_subplot'
# the latter instance i bound to the variable 'ax1' to avoid confusing the two
cbar.ax.set_yticklabels(["lo", "med", "hi"])

PLT.show()
</snippet></ROW><ROW><id>2539590</id><snippet>from matplotlib import pyplot as PLT
</snippet></ROW><ROW><id>2539718</id><snippet>Point</snippet></ROW><ROW><id>2539718</id><snippet>from collections import namedtuple

class Point(namedtuple("Point", "x y")):
    __slots__ = ()

    def interpolate(self, other, ratio = 0.5):
        return Point(x = self.x * (1.0-ratio) + other.x * float(ratio), \
                     y = self.y * (1.0-ratio) + other.y * float(ratio))
</snippet></ROW><ROW><id>2539718</id><snippet>Point</snippet></ROW><ROW><id>2539718</id><snippet>class CubicBSpline(object):
    __slots__ = ("points", )

    def __init__(self, points):
        self.points = [Point(*coords) for coords in points]
</snippet></ROW><ROW><id>2539718</id><snippet>BSplineDrawer</snippet></ROW><ROW><id>2539718</id><snippet>class BSplineDrawer(object):
    def __init__(self, context):
        self.ctx = context

    def draw(self, bspline):
        pairs = zip(bspline.points[:-1], bspline.points[1:])
        one_thirds = [p1.interpolate(p2, 1/3.) for p1, p2 in pairs)
        two_thirds = [p2.interpolate(p1, 1/3.) for p1, p2 in pairs)

        coords = [None] * 6
        for i in xrange(len(bspline.points) - 3):
            start = two_thirds[i].interpolate(one_thirds[i+1])
            coords[0:2] = one_thirds[i+1]
            coords[2:4] = two_thirds[i+1]
            coords[4:6] = two_thirds[i+1].interpolate(one_thirds[i+2])

            self.context.move_to(*start)
            self.context.curve_to(*coords)
            self.context.stroke()
</snippet></ROW><ROW><id>2539718</id><snippet>class CubicBSpline(object):
    [...]
    def clamped(self):
        new_points = [self.points[0]] * 3 + self.points + [self.points[-1]] * 3
        return CubicBSpline(new_points)
</snippet></ROW><ROW><id>2539718</id><snippet>import cairo

surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 600, 400)
ctx = cairo.Context(surface)

points = [(100,100), (200,100), (200,200), (100,200), (100,400), (300,400)]
spline = CubicBSpline(points).clamped()

ctx.set_source_rgb(0., 0., 1.)
ctx.set_line_width(5)
BSplineDrawer(ctx).draw(spline)
</snippet></ROW><ROW><id>2540058</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1269884900.480978
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2540533</id><snippet>import os
import sys
bindir = os.path.abspath(os.path.dirname(sys.argv[0]))
</snippet></ROW><ROW><id>2540536</id><snippet>index</snippet></ROW><ROW><id>2540536</id><snippet>http://localhost/test.py/any_func</snippet></ROW><ROW><id>2540536</id><snippet>index</snippet></ROW><ROW><id>2540598</id><snippet>def __unicode__(self):
    return "[%s(%s)]" % (self.__class__.__name__, ', '.join('%s=%s' % (k, self.__dict__[k]) for k in sorted(self.__dict__) if '_sa_' != k[:4]))
</snippet></ROW><ROW><id>2540598</id><snippet>Base</snippet></ROW><ROW><id>2540598</id><snippet>__table__</snippet></ROW><ROW><id>2540598</id><snippet>for c in JobStatus.__table__.columns:
    print c

for c in JobStatus.__table__.foreign_keys:
    print c
</snippet></ROW><ROW><id>2540948</id><snippet>import mechanize
br = mechanize.Browser()
br.open('http://www.systempuntoout.com')
for link in br.links():
    print(link)
br.follow_link(text='[IMG]', nr=0)
print br
&gt;&gt;&gt;&lt;Browser visiting http://www.systempuntoout.com/quiz&gt;
br.back()
br.follow_link(text='[IMG]', nr=1)
&gt;&gt;&gt;&lt;Browser visiting http://www.systempuntoout.com/about&gt;
</snippet></ROW><ROW><id>2541412</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; b=[4,5,6]
&gt;&gt;&gt; itertools.product(a,b)
&lt;itertools.product object at 0x10049b870&gt;
&gt;&gt;&gt; list(itertools.product(a,b))
[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]
</snippet></ROW><ROW><id>2541507</id><snippet>include</snippet></ROW><ROW><id>2541524</id><snippet>urllib</snippet></ROW><ROW><id>2541524</id><snippet>import urllib
urllib.quote("http://mydomain.com/#url=http://stackoverflow.com")
</snippet></ROW><ROW><id>2541524</id><snippet>urllib.unquote("http%3A//mydomain.com/%23url%3Dhttp%3A//stackoverflow.com")
</snippet></ROW><ROW><id>2541549</id><snippet>class_&lt;Tree&gt;("Tree")
    .add_property("head",
     make_getter(&amp;Tree::head, return_value_policy&lt;reference_existing_object&gt;()),
     make_setter(&amp;Tree::head, return_value_policy&lt;reference_existing_object&gt;()))
;
</snippet></ROW><ROW><id>2541557</id><snippet>list1 = [1, 2, 3, 4, 5, 6]
list2 = []

# You couldn't just make 'list1_copy = list1',
# because this would just copy (share) the reference.
# (i.e. when you change list1_copy, list1 will also change)

# this will make a (new) copy of list1
# so you can happily iterate over it ( without anything getting lost :)
list1_copy = list1[:]

for item in list1_copy:
    list2.append(item)
    list1.remove(item)
</snippet></ROW><ROW><id>2541557</id><snippet>list1[start:end:step]</snippet></ROW><ROW><id>2541557</id><snippet>extend</snippet></ROW><ROW><id>2541557</id><snippet>list</snippet></ROW><ROW><id>2541596</id><snippet>'y'</snippet></ROW><ROW><id>2541596</id><snippet>x</snippet></ROW><ROW><id>2541596</id><snippet>y</snippet></ROW><ROW><id>2541596</id><snippet>match</snippet></ROW><ROW><id>2541596</id><snippet>x = some list
y = some list
match = []
def find_match():
    for i in x:
        for j in y:
            if i[0] == j[0]:
                 match.append(j)
    return match # This is the only line I changed. I think you meant 
                 # your return to be over here?
find_match()
</snippet></ROW><ROW><id>2541596</id><snippet>x = some list
y = some list


def find_match(x, y):
    match = []
    for i in x:
        for j in y:
            if i[0] == j[0]:
                 match.append(j)
     return match
match = find_match(x, y)
</snippet></ROW><ROW><id>2541596</id><snippet>def f(...):
    return_value = []
    for...
        return_value.append(foo)
    return return_value
</snippet></ROW><ROW><id>2541596</id><snippet>def f(...):
    for...
        yield foo
</snippet></ROW><ROW><id>2541596</id><snippet>def find_match(x, y):
    for i in x:
        for j in y:
            if i[0] == j[0]:
                 yield j
</snippet></ROW><ROW><id>2541596</id><snippet>(j for i in x for j in y if i[0] == j[0])</snippet></ROW><ROW><id>2541814</id><snippet>set.intersection()</snippet></ROW><ROW><id>2541814</id><snippet>u = set.intersection(s1, s2, s3)
</snippet></ROW><ROW><id>2541814</id><snippet>u = set.intersection(*setlist)
</snippet></ROW><ROW><id>2541882</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>2541882</id><snippet>import copy
b = copy.deepcopy(a)
</snippet></ROW><ROW><id>2542021</id><snippet>int unsigned</snippet></ROW><ROW><id>2542021</id><snippet>INET_ATON()</snippet></ROW><ROW><id>2542021</id><snippet>INET_NTOA()</snippet></ROW><ROW><id>2542021</id><snippet>SELECT INET_ATON('127.0.0.1');

+------------------------+
| INET_ATON('127.0.0.1') |
+------------------------+
|             2130706433 | 
+------------------------+
1 row in set (0.00 sec)


SELECT INET_NTOA('2130706433');

+-------------------------+
| INET_NTOA('2130706433') |
+-------------------------+
| 127.0.0.1               | 
+-------------------------+
1 row in set (0.02 sec)
</snippet></ROW><ROW><id>2542026</id><snippet>df</snippet></ROW><ROW><id>2542026</id><snippet>os.statvfs</snippet></ROW><ROW><id>2542065</id><snippet>+∞</snippet></ROW><ROW><id>2542065</id><snippet>-∞</snippet></ROW><ROW><id>2542065</id><snippet>utol = 100.
ltol = -100.
yy = 1/(xx-2)
yy[yy&gt;utol] = np.inf
yy[yy&lt;ltol] = -np.inf

ax.plot(xx, yy, zorder=100, linewidth=3, color='red') 
</snippet></ROW><ROW><id>2542070</id><snippet>print</snippet></ROW><ROW><id>2542070</id><snippet>print("continue")</snippet></ROW><ROW><id>2542070</id><snippet>&gt;&gt;&gt; try:
...     fsock = open("/bla")
... except IOError:
...     print "Caught"
...
(some output shows here)
&gt;&gt;&gt; print "continue"
</snippet></ROW><ROW><id>2542128</id><snippet>==</snippet></ROW><ROW><id>2542216</id><snippet>Date.getTimezoneOffset();</snippet></ROW><ROW><id>2542659</id><snippet>def _fetchInfo(self, data):
    try:
        data=int(data)
        sql='SELECT ... WHERE id = %s'
        args=[data]
    except ValueError:
        sql='SELECT ... WHERE email = %s'
        args=[data]
        # This might fail, in which case, data was neither a valid integer or email address
</snippet></ROW><ROW><id>2542806</id><snippet>xsd:element</snippet></ROW><ROW><id>2542806</id><snippet>def getElems(schemaDoc, xmlDoc, typeName):
    names = schemaDoc.xpath("//xsd:element[@type = $n]/@name",
                            namespaces={"xsd": 
                                        "http://www.w3.org/2001/XMLSchema"},
                            n=typeName)
</snippet></ROW><ROW><id>2542806</id><snippet>    elements = []
    for name in names: 
        namedElements = xmlDoc.xpath("//*[local-name() = $name]", name=name)
        elements.extend(namedElements)
</snippet></ROW><ROW><id>2542806</id><snippet>    return elements
</snippet></ROW><ROW><id>2542850</id><snippet>-v</snippet></ROW><ROW><id>2542850</id><snippet>$ python -v
...
&gt;&gt;&gt; import re
# /usr/lib/python2.6/re.pyc matches /usr/lib/python2.6/re.py
import re # precompiled from /usr/lib/python2.6/re.pyc
...
</snippet></ROW><ROW><id>2542850</id><snippet>-v</snippet></ROW><ROW><id>2542850</id><snippet>$ python -v -v
...
&gt;&gt;&gt; import re
# trying re.so
# trying remodule.so
# trying re.py
# trying re.pyc
# trying /usr/lib/python2.6/re.so
# trying /usr/lib/python2.6/remodule.so
# trying /usr/lib/python2.6/re.py
# /usr/lib/python2.6/re.pyc matches /usr/lib/python2.6/re.py
import re # precompiled from /usr/lib/python2.6/re.pyc
...
</snippet></ROW><ROW><id>2542930</id><snippet>setattr</snippet></ROW><ROW><id>2542930</id><snippet>attributes = ['name', 'email'...]</snippet></ROW><ROW><id>2542930</id><snippet>for name in self.attributes:
    setattr(self, "_" + name, row[name])
</snippet></ROW><ROW><id>2542930</id><snippet>SELECT *</snippet></ROW><ROW><id>2542979</id><snippet>def clear(self):    
    for listener in list(self.listeners):
        if not isinstance(listener, CPUSpinnerController):  
            if not isinstance(listener, RoomController):  
                if not isinstance(listener, PyGameEventController):  
                    self.unregister_listener(listener)
</snippet></ROW><ROW><id>2543132</id><snippet>import urllib

response = urllib.urlopen('http://api.hostip.info/get_html.php?ip=12.215.42.19&amp;position=true').read()

print(response)
</snippet></ROW><ROW><id>2544413</id><snippet>{ ('AS091209M02', '100113', 'R16', '1263399103', 'Responses', 'N01', 'Sequential', 'Ch1' ): array, 
...
</snippet></ROW><ROW><id>2544413</id><snippet>namedtuple</snippet></ROW><ROW><id>2544413</id><snippet>Array = namedtuple( 'Array', 'individual, session, region, timestamp, properties, roi, format, channel, data' )
</snippet></ROW><ROW><id>2544413</id><snippet>for a in theMasterArrrayList:
    if a.region = 'R16' and interest = 'N01':
        # do something on these items only.
</snippet></ROW><ROW><id>2544413</id><snippet>individual_dict = defaultdict(list)
for a in theMasterArrayList:
    individual_dict[ a.individual ].append( a )
</snippet></ROW><ROW><id>2544413</id><snippet>region_dict = defaultdict(list)
for a in theMasterArrayList:
    region_dict[ a.region ].append( a )
</snippet></ROW><ROW><id>2544413</id><snippet>for a in theMasterArrayList:
    someTransformationFunction( a.data )
</snippet></ROW><ROW><id>2544413</id><snippet>def region_filter( array_list, region_set ):
    for a in array_list:
        if a.region in region_set:
            yield a

def array_map( array_list, someConstant ):
    for a in array_list:
        yield Array( *(a[:8] + (someTranformation( a.data, someConstant ),) )

def some_result( array_list, region, someConstant ):
    for a in array_map( region_filter( array_list, region ), someConstant ):
        yield a
</snippet></ROW><ROW><id>2544515</id><snippet>wx.CallAfter(text_control.SetValue, "some_text")
</snippet></ROW><ROW><id>2544515</id><snippet>CallAfter</snippet></ROW><ROW><id>2544614</id><snippet>from google.appengine.api.datastore import Key
query.filter("__key__ &gt;=", Key.from_path('User', 'abc'))
</snippet></ROW><ROW><id>2544761</id><snippet>res = dict((k,v) for k,v in kwargs.iteritems() if v is not None)
</snippet></ROW><ROW><id>2544761</id><snippet>res = {k:v for k,v in kwargs.items() if v is not None}
</snippet></ROW><ROW><id>2545417</id><snippet>str.split</snippet></ROW><ROW><id>2545417</id><snippet>&gt;&gt;&gt; '1000 2000 3000 4000'.split()
['1000', '2000', '3000', '4000']
</snippet></ROW><ROW><id>2545417</id><snippet>split</snippet></ROW><ROW><id>2545417</id><snippet>readlines()</snippet></ROW><ROW><id>2545417</id><snippet>lst = map(int, open('filename.txt').readlines())
</snippet></ROW><ROW><id>2545561</id><snippet>super()</snippet></ROW><ROW><id>2545561</id><snippet>SubClassAgain</snippet></ROW><ROW><id>2545561</id><snippet>@class_decorator
class SubClassAgain(BaseClass):
    def print_class(self):
        BaseClass.print_class(self)
</snippet></ROW><ROW><id>2545835</id><snippet>xmltext = re.sub(u"[^\x20-\x7f]+",u"",xmltext)
</snippet></ROW><ROW><id>2545835</id><snippet>xmltext = re.sub(u"[^\x01-\x7f]+",u"",xmltext)
</snippet></ROW><ROW><id>2545937</id><snippet>bindings.py</snippet></ROW><ROW><id>2545937</id><snippet>suds.egg</snippet></ROW><ROW><id>2545937</id><snippet>http://www.w3.org/2003/05/soap-envelope</snippet></ROW><ROW><id>2546107</id><snippet>sys.exit()</snippet></ROW><ROW><id>2546107</id><snippet>Popen</snippet></ROW><ROW><id>2546107</id><snippet>set()</snippet></ROW><ROW><id>2546107</id><snippet>Popen.terminate()</snippet></ROW><ROW><id>2546107</id><snippet>communicate()</snippet></ROW><ROW><id>2546113</id><snippet>from suds.sax.element import Element 
client = client(url) 
ssnns = ('ssn', 'http://namespaces/sessionid') 
ssn = Element('SessionID', ns=ssnns).setText('123') 
client.set_options(soapheaders=ssn)  
result = client.service.addPerson(person)
</snippet></ROW><ROW><id>2546113</id><snippet>addPrefix</snippet></ROW><ROW><id>2546113</id><snippet>ssn = Element('SessionID', ns=ssnns).setText('123').addPrefix(p='SOAP-ENC', u='http://www.w3.org/2003/05/soap-encoding')
</snippet></ROW><ROW><id>2546113</id><snippet>p = 'SOAP-ENC'</snippet></ROW><ROW><id>2546113</id><snippet>eg. wsa</snippet></ROW><ROW><id>2546113</id><snippet>u = &lt;a href="http://address"&gt;http://address&lt;/a&gt;</snippet></ROW><ROW><id>2546113</id><snippet>#!/usr/local/bin/python2.6

import suds
#import logging
from suds.client import Client
from suds.sax.element import Element
from suds.sax.attribute import Attribute
from suds.xsd.sxbasic import Import

def absoluteMove():

    # connects to WSDL file and stores location in variable 'client'
    client = Client('http://10.10.10.10/p.wsdl')
    client.options.location = 'http://10.10.10.10:32963'

    # Create the header
    wsans = ('wsa', 'http://schemas.xmlsoap.org/ws/2004/08/addressing')
    mustAttribute = Attribute('SOAP-ENV:mustUnderstand', 'true')
    n1s = ('SOAP-ENC', 'http://www.w3.org/2003/05/soap-encoding')
    msgId = Element('Element').addPrefix(p='SOAP-ENC', u='http://www.w3.org/2003/05/soap-encoding')

    msgId2 = Element('Address', ns=wsans).setText('http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous')
    msgId1 = Element('ReplyTo', ns=wsans).insert(msgId2)
    msgId1.append(mustAttribute)

    msgId3 = Element('To', ns=wsans).setText('http://10.10.10.10:32954')
    msgId3.append(mustAttribute)

    client.set_options(soapheaders=[msgId, msgId1, msgId3, msgId2])

    # Create 'token' object to pass as an argument using the 'factory' namespace
    token = client.factory.create('ns4:ReferenceToken')

    # Create 'dest' object to pass as an argument and values passed to this object
    dest = client.factory.create('ns4:PTZVector')
    dest.PanTilt._x=1
    dest.PanTilt._y=4.9
    dest.Zoom._x=1


    # Create 'speed' object to pass as an argument and values passed to this object
    speed = client.factory.create('ns4:PTZSpeed')
    speed.PanTilt._x=0
    speed.PanTilt._y=0
    speed.Zoom._x=1

    # 'AbsoluteMove' method invoked passing in the new values entered in the above objects

    try:
        result = client.service.AbsoluteMove(token, dest, speed)
        print "absoluteMove result ", result
        return result
    except suds.WebFault, e:
        print "suds.WebFaults caught: "
        print e

if __name__ == '__main__': result = absoluteMove()
</snippet></ROW><ROW><id>2546113</id><snippet>import logging
logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>2546244</id><snippet>project 
  main.py
  README
  models
      bar.py
      foo.py
  views
      foolist.hml
      barlist.hml
  controllers
      controller1.py
      controller2.py
  api
      controllerapi.py
  helpers
      utilities.py
  lib
      extfoo.py
  db
     foo.db
  test
     test.py
</snippet></ROW><ROW><id>2546397</id><snippet>SIGTERM</snippet></ROW><ROW><id>2546620</id><snippet>py2app.recipes</snippet></ROW><ROW><id>2546620</id><snippet>check</snippet></ROW><ROW><id>2546620</id><snippet>dict</snippet></ROW><ROW><id>2546620</id><snippet>'prescripts'</snippet></ROW><ROW><id>2546626</id><snippet>Test.A = Test("A")
Test.B = Test("B")
</snippet></ROW><ROW><id>2546955</id><snippet>O(n)</snippet></ROW><ROW><id>2546956</id><snippet>CommandSource</snippet></ROW><ROW><id>2546956</id><snippet>class CommandSource(object):

    def listCommands(self, *args, **kwargs):
        commands = []
        for command in dir(self.__class__):
            func = getattr(self, command, None)
            if func == None or getattr(func, 'command', False) == False:
                continue
            for validator in func.validators:
                if not validator(self, *args, **kwargs):
                    break
            else:
                commands.append(command)
        return commands
</snippet></ROW><ROW><id>2547418</id><snippet>from django.template.defaultfilters import slugify
class SomeModel(models.Model):
    title = models.CharField(max_length=100)
    def video_filename(instance, filename):
        fname, dot, extension = filename.rpartition('.')
        slug = slugify(instance.title)
        return '%s.%s' % (slug, extension) 
    video = models.FileField(upload_to=video_filename)
</snippet></ROW><ROW><id>2547577</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>2547577</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>2547577</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>2547688</id><snippet>unicode(uk,"utf-8").encode("utf-8")</snippet></ROW><ROW><id>2547688</id><snippet>ukeys = unicode(uk,"utf-8").encode("utf-8"):</snippet></ROW><ROW><id>2547688</id><snippet>ukeys</snippet></ROW><ROW><id>2547996</id><snippet>Content-Encoding</snippet></ROW><ROW><id>2547996</id><snippet>gzip</snippet></ROW><ROW><id>2548252</id><snippet>for k in sorted(a):
    print k, a[k] # or whatever.
</snippet></ROW><ROW><id>2548252</id><snippet>sortedlist = [(k, a[k]) for k in sorted(a)]
</snippet></ROW><ROW><id>2548252</id><snippet>key=int</snippet></ROW><ROW><id>2548252</id><snippet>'test'</snippet></ROW><ROW><id>2548252</id><snippet>cmp</snippet></ROW><ROW><id>2548252</id><snippet>def _compare_keys(x, y):
    try:
        x = int(x)
    except ValueError:
        xint = False
    else:
        xint = True
    try:
        y = int(y)
    except ValueError:
        if xint:
            return -1
        return cmp(x.lower(), y.lower())
        # or cmp(x, y) if you want case sensitivity.
    else:
        if xint:
            return cmp(x, y)
        return 1

for k in sorted(a, cmp=_compare_keys):
    print k, a[k] # or whatever.
</snippet></ROW><ROW><id>2548252</id><snippet># Won't work for integers with more than this many digits, or negative integers.
MAX_DIGITS = 10
def _keyify(x):
    try:
        xi = int(x)
    except ValueError:
        return 'S{0}'.format(x)
    else:
        return 'I{0:0{1}}'.format(xi, MAX_DIGITS)

for k in sorted(a, key=_keyify):
    print k, a[k] # or whatever.
</snippet></ROW><ROW><id>2548252</id><snippet>cmp</snippet></ROW><ROW><id>2548480</id><snippet>      61      F1      80      80      E1      80      C2      62
1   U+0061  U+FFFD                                          U+0062
2   U+0061  U+FFFD                  U+FFFD          U+FFFD  U+0062
3   U+0061  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+FFFD  U+0062
</snippet></ROW><ROW><id>2548480</id><snippet>&gt;&gt;&gt; bad = '\x61\xf1\x80\x80\xe1\x80\xc2\x62cdef'
&gt;&gt;&gt; bad.decode('utf8', 'replace')
u'a\ufffd\ufffd\ufffdcdef'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2548480</id><snippet>&lt;C2 41 42&gt;</snippet></ROW><ROW><id>2548480</id><snippet>&lt;U+FFFD&gt;</snippet></ROW><ROW><id>2548480</id><snippet>&lt;U+FFFD, U+0042&gt;</snippet></ROW><ROW><id>2548480</id><snippet>&lt;U+FFFD, U+0041, U+0042&gt;</snippet></ROW><ROW><id>2548480</id><snippet>#36</snippet></ROW><ROW><id>2548480</id><snippet>&gt;&gt;&gt; bad2 = "\xc2\x41\x42"
&gt;&gt;&gt; bad2.decode('utf8', 'replace')
u'\ufffdB'
# FAIL
</snippet></ROW><ROW><id>2548480</id><snippet>'replace'</snippet></ROW><ROW><id>2548480</id><snippet>'ignore'</snippet></ROW><ROW><id>2548480</id><snippet>'5.1.0'</snippet></ROW><ROW><id>2548480</id><snippet>'oht'.encode('rot13')</snippet></ROW><ROW><id>2548531</id><snippet>connection.insert_id()</snippet></ROW><ROW><id>2548703</id><snippet>xml.etree</snippet></ROW><ROW><id>2548703</id><snippet>xml.etree</snippet></ROW><ROW><id>2548703</id><snippet>etree</snippet></ROW><ROW><id>2548964</id><snippet>&lt;a href="http://docs.python.org/library/os.path.html#os.path.realpath"&gt;os.path.realpath()&lt;/a&gt;</snippet></ROW><ROW><id>2549257</id><snippet>{}</snippet></ROW><ROW><id>2549257</id><snippet>namespace = 'http://kuler.adobe.com/kuler/API/rss/'

def xml():
    kulerurl = 'http://kuler-api.adobe.com/rss/get.cfm?listType=popular&amp;startIndex=0&amp;itemsPerPage=5&amp;timeSpan=30&amp;key=mykey'
    rss = parse(urllib.urlopen(kulerurl)).getroot()
    for element in rss.findall('channel/item/{%s}themeItem' % namespace):
        print(element.findtext('{%s}themeID' % namespace))
    dump (rss)
</snippet></ROW><ROW><id>2549311</id><snippet>&gt;&gt;&gt; '-1' &lt;= 0
False
</snippet></ROW><ROW><id>2549311</id><snippet>number</snippet></ROW><ROW><id>2549311</id><snippet>number = int(sys.argv[1])
</snippet></ROW><ROW><id>2549311</id><snippet>&gt;&gt;&gt; '-1' &lt;= 0
Traceback (most recent call last):
  File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;
    '-1' &lt;= 0
TypeError: unorderable types: str() &lt;= int()
</snippet></ROW><ROW><id>2549477</id><snippet>AF_</snippet></ROW><ROW><id>2549477</id><snippet>PF_</snippet></ROW><ROW><id>2549477</id><snippet>AF_</snippet></ROW><ROW><id>2549477</id><snippet>AF_</snippet></ROW><ROW><id>2549477</id><snippet>AF_</snippet></ROW><ROW><id>2549477</id><snippet>PF_</snippet></ROW><ROW><id>2549484</id><snippet>datetime.datetime.utcnow()</snippet></ROW><ROW><id>2549598</id><snippet>mimetypes</snippet></ROW><ROW><id>2549598</id><snippet>Archive::Extract</snippet></ROW><ROW><id>2549760</id><snippet>csv</snippet></ROW><ROW><id>2549760</id><snippet>newrow = row[:8] + row[-2:]
</snippet></ROW><ROW><id>2549760</id><snippet>csv</snippet></ROW><ROW><id>2549765</id><snippet>TypeError</snippet></ROW><ROW><id>2549765</id><snippet>int</snippet></ROW><ROW><id>2549765</id><snippet>...
sdy = int(request.POST['start_date_year'])
#Do the same with the other 5 fields
</snippet></ROW><ROW><id>2549765</id><snippet>try/except</snippet></ROW><ROW><id>2549765</id><snippet>if request.method == 'POST':
    form = ReportFiltersForm(request.POST)
    if form.is_valid():
        start_date = form.cleaned_data['start_date']
        end_date = form.cleaned_data['end_date']
        #Do whatever you need to do with this data now. Since you had
        #defined the fields as DateFields, you will automatically get
        #datetime.date objects.
    else:
        return render_to_response('mytemplate.html', {'form' : form})
....
</snippet></ROW><ROW><id>2549765</id><snippet>datetime.date</snippet></ROW><ROW><id>2549803</id><snippet>sendall()</snippet></ROW><ROW><id>2549803</id><snippet>recv()</snippet></ROW><ROW><id>2549803</id><snippet>recv()</snippet></ROW><ROW><id>2549898</id><snippet>    class myThread (threading.Thread):
        def __init__(self, threadID, src, counter, image_name):
             ###############
             #Add ftp connection here!
             self.ftp = FTP('host')   # connect to host, default port
             self.ftp.login()               # user anonymous, passwd anonymous@   
             ################
             self.threadID = threadID
             self.src = src
             self.counter = counter
             self.image_name = image_name
             threading.Thread.__init__(self)
        def run(self):
             uploadFile(self.src, self.image_name)

    def uploadFile(src, image_name):
          f = open(src, "rb")            
          self.ftp.storbinary('STOR ' + image_name, f)
          f.close()

     dirname = "/home/folder/"
     i = 1   
     threads = []

     for image in os.listdir(dirname):
          if os.path.isfile(dirname + image):
             thread = myThread(i , dirname + image, i, image )   
             thread.start()
             threads.append( thread )        
             i += 1  

      for t in threads:
          t.join()
</snippet></ROW><ROW><id>2549901</id><snippet>cElementTree</snippet></ROW><ROW><id>2549901</id><snippet>lxml</snippet></ROW><ROW><id>2549901</id><snippet>dessert</snippet></ROW><ROW><id>2549950</id><snippet>import signal
dict((k, v) for v, k in signal.__dict__.iteritems() if v.startswith('SIG'))
</snippet></ROW><ROW><id>2550184</id><snippet>freqDict = {}
...
if word not in freqDict:
    freqDict[word] = 1
else:
    freqDict[word] += 1
</snippet></ROW><ROW><id>2550184</id><snippet>import collections
freqDict = collections.defaultdict(int)
...
freqDict[word] += 1
</snippet></ROW><ROW><id>2550184</id><snippet>freqDict = {}
...
freqDict.setdefault(word, 0) += 1
</snippet></ROW><ROW><id>2550215</id><snippet>MyModel.objects.extra(where=['thetime &lt; INTERVAL 1 HOUR'])
</snippet></ROW><ROW><id>2550282</id><snippet>import datetime
created_time = datetime.datetime.now() - datetime.timedelta(minutes=30)
old_objects = MyModel.objects.filter(created__lte=created_time)
</snippet></ROW><ROW><id>2550452</id><snippet>def register(self, callback):
    self.callbacks.append(callback)

def emit(self, eventName):
    for callback in self.callbacks:
         callback(eventName)
</snippet></ROW><ROW><id>2550482</id><snippet>safe_md5 = hashlib.md5(salt + password)
crypto_hash = safe_md5.digest()
hash_correct = crypto_hash.encode('base64')
</snippet></ROW><ROW><id>2550693</id><snippet>wfsc_pod1</snippet></ROW><ROW><id>2550693</id><snippet>def wfsc_pod1(self):
    return "%s\t%s\t%s" % (self.name[0], self.subnet[0], self.gateway[0])
</snippet></ROW><ROW><id>2550693</id><snippet>wfsc_ip</snippet></ROW><ROW><id>2550693</id><snippet>network.wfsc_ip() # no print
</snippet></ROW><ROW><id>2550693</id><snippet>wfsc_pod1</snippet></ROW><ROW><id>2550693</id><snippet>wfsc_ip</snippet></ROW><ROW><id>2550693</id><snippet>def wfsc_combined(self):
    output = []
    output.append("%s\t%s\t%s" % (self.name[0], self.subnet[0], self.gateway[0]))
    for ip in range(100,110):
        output.append("192.168.1.%d" % ip)
    return '\n'.join(output)
</snippet></ROW><ROW><id>2550693</id><snippet>wfsc_combined</snippet></ROW><ROW><id>2550693</id><snippet>def wfsc_combined(self):
    print "%s\t%s\t%s" % (self.name[0], self.subnet[0], self.gateway[0])
    for ip in range(100,110):
        print "192.168.1.%d" % ip
</snippet></ROW><ROW><id>2550824</id><snippet>right_now = datetime.datetime.now()
one_hour_before = right_now - datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>2550853</id><snippet>now()</snippet></ROW><ROW><id>2550853</id><snippet>auto_now_add</snippet></ROW><ROW><id>2550853</id><snippet>auto_add</snippet></ROW><ROW><id>2550853</id><snippet>class Link(models.Model):
    ...
    last_updated = models.DateTimeField(auto_now_add = True)
    ...
</snippet></ROW><ROW><id>2550853</id><snippet>Link</snippet></ROW><ROW><id>2551038</id><snippet>ntwdblib.dll</snippet></ROW><ROW><id>2551038</id><snippet>setup.py</snippet></ROW><ROW><id>2551038</id><snippet>import os, pymssql
from distutils.core import setup
import py2exe
dll = []
dll.append(os.path.join(os.path.split(pymssql.__file__)[0], 'ntwdblib.dll'))
pyops = {"includes": ['decimal']}
setup(console=['app.py'], options={"py2exe": pyops}, data_files=dll)
</snippet></ROW><ROW><id>2551200</id><snippet>$ sudo apt-get install ipython
</snippet></ROW><ROW><id>2551200</id><snippet>import &lt;tab&gt;</snippet></ROW><ROW><id>2551200</id><snippet>import pygraphviz
</snippet></ROW><ROW><id>2551255</id><snippet>&gt;&gt;&gt; temp_body = 'Hello %s, please visit %s to confirm your registration.'
&gt;&gt;&gt; temp_body%("anurag", "stackoverflow")
'Hello anurag, please visit stackoverflow to confirm your registration.'
</snippet></ROW><ROW><id>2551419</id><snippet>UserProfile.objects.filter(mailCom='1').values_list('email', flat=True)
</snippet></ROW><ROW><id>2551487</id><snippet>Log.objects.filter(last_updated__gt=the_tag.time_before, last_updated__lt=the_tag.time_after)
</snippet></ROW><ROW><id>2551487</id><snippet>__gte</snippet></ROW><ROW><id>2551487</id><snippet>__lte</snippet></ROW><ROW><id>2551487</id><snippet>Log.objects.filter(last_updated__range=(the_tag.time_before, the_tag.time_after))
</snippet></ROW><ROW><id>2551579</id><snippet>title</snippet></ROW><ROW><id>2551579</id><snippet>getText</snippet></ROW><ROW><id>2551579</id><snippet>nodeType</snippet></ROW><ROW><id>2551579</id><snippet>node.TEXT_NODE</snippet></ROW><ROW><id>2551579</id><snippet>getText</snippet></ROW><ROW><id>2551579</id><snippet>def getTextSingle(node):
    parts = [child.data for child in node.childNodes if child.nodeType == node.TEXT_NODE]
    return u"".join(parts)

def getText(nodelist):
    return u"".join(getTextSingle(node) for node in nodelist)
</snippet></ROW><ROW><id>2551579</id><snippet>node.normalize()</snippet></ROW><ROW><id>2551579</id><snippet>getTextSingle</snippet></ROW><ROW><id>2551579</id><snippet>node.TEXT_NODE</snippet></ROW><ROW><id>2551579</id><snippet>node.TEXT_NODE</snippet></ROW><ROW><id>2551800</id><snippet>subdirA</snippet></ROW><ROW><id>2551800</id><snippet>piter</snippet></ROW><ROW><id>2551800</id><snippet>subdirA</snippet></ROW><ROW><id>2551800</id><snippet>a.py</snippet></ROW><ROW><id>2551800</id><snippet>piter</snippet></ROW><ROW><id>2551800</id><snippet>subdirA</snippet></ROW><ROW><id>2551800</id><snippet>os.walk</snippet></ROW><ROW><id>2552075</id><snippet>uuid</snippet></ROW><ROW><id>2552214</id><snippet>import sys
import os

import java.lang.ClassLoader 
import java.io.InputStreamReader
import java.io.BufferedReader

loader = java.lang.ClassLoader.getSystemClassLoader()
stream = loader.getResourceAsStream("com/example/action/myAction.py")
reader = java.io.BufferedReader(java.io.InputStreamReader(stream))

script = ""                          
line = reader.readLine()
while (line != None) : 
    script += line + "\n"
    line = reader.readLine()

exec(script)
</snippet></ROW><ROW><id>2552311</id><snippet>Group</snippet></ROW><ROW><id>2552311</id><snippet>for idx, group in enumerate(self.groups[1:]):
    # do some stuff
</snippet></ROW><ROW><id>2552860</id><snippet>feedquery = gdata.contacts.service.ContactsQuery()
feedquery.query.max_results = 1000
gmlf = gd_client.GetContactsFeed(feedquery.ToUri())
for index,gmc in enumerate(gmlf.entry):
        print str(index) +":"+ gmc .title.text
</snippet></ROW><ROW><id>2552860</id><snippet>query.max_results</snippet></ROW><ROW><id>2553175</id><snippet>l_array_obj = [..., obj.lastname.value, .... ]
</snippet></ROW><ROW><id>2553532</id><snippet>dict( (name,eval(name)) for name in ['some','list','of','vars'] )
</snippet></ROW><ROW><id>2553532</id><snippet>&gt;&gt;&gt; some= 1
&gt;&gt;&gt; list= 2
&gt;&gt;&gt; of= 3
&gt;&gt;&gt; vars= 4
&gt;&gt;&gt; dict( (name,eval(name)) for name in ['some','list','of','vars'] )
{'list': 2, 'some': 1, 'vars': 4, 'of': 3}
</snippet></ROW><ROW><id>2553824</id><snippet>def searchServices(self, types=None, scopes=None, timeout=3)
</snippet></ROW><ROW><id>2553824</id><snippet>class Service:

def __init__(self, types, scopes, xAddrs, epr, instanceId):
    self.__types = types
    self.__scopes = scopes
    self.__xAddrs = xAddrs
    self.__epr = epr
    self.__instanceId = instanceId
    self.__messageNumber = 0
    self.__metadataVersion = 1
</snippet></ROW><ROW><id>2553976</id><snippet>&gt;&gt;&gt; import simplejson as json 
    # "simplejson" works exactly the same as with "json"
&gt;&gt;&gt; json.dumps({})
'{}'
&gt;&gt;&gt; json.dumps({'asdf':1,'poi':[2,3,4,{'qwer':5}]})
'{"asdf": 1, "poi": [2, 3, 4, {"qwer": 5}]}'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2554376</id><snippet>response.read()</snippet></ROW><ROW><id>2554376</id><snippet>try/except</snippet></ROW><ROW><id>2554466</id><snippet>from jinja2 import Environment, PackageLoader
env = Environment(loader=PackageLoader('yourapplication', 'templates'))
</snippet></ROW><ROW><id>2554466</id><snippet>env.globals['session'] = session # Your session
# Your template can contain things like {{ session['key'] }}
template = env.get_template('mytemplate.html')
print template.render(the='variables', go='here')
#return response using rendered data
</snippet></ROW><ROW><id>2554631</id><snippet>&gt;&gt;&gt; with open("food.txt") as f:
...     res = []
...     s=[]
...     for line in f:
...         line=line.rstrip()
...         x=len(line)
...         line=line.lstrip()
...         indent = x-len(line)
...         s=s[:indent/2]+[line]
...         res.append("/".join(s))
...     print res
... 
['Fruits', 'Fruits/Apple', 'Fruits/Apple/Auxiliary', 'Fruits/Apple/Core', 'Fruits/Apple/Extras', 'Fruits/Banana', 'Fruits/Banana/Something', 'Fruits/Coconut', 'Vegetables', 'Vegetables/Eggplant', 'Vegetables/Rutabaga']
</snippet></ROW><ROW><id>2554633</id><snippet>unicode.encode()</snippet></ROW><ROW><id>2554633</id><snippet>unicode</snippet></ROW><ROW><id>2554633</id><snippet>str</snippet></ROW><ROW><id>2554633</id><snippet>v_dict['code'].encode('utf-8')
</snippet></ROW><ROW><id>2554679</id><snippet>@cherrypy.expose
def index(self):
    templates = cheetah_import('templates.index')
    t = getattr(getattr(templates, 'index'), 'index')(searchList=[{'foo': self.foo}])
    return t.respond()
</snippet></ROW><ROW><id>2554679</id><snippet>__init__.py</snippet></ROW><ROW><id>2554679</id><snippet>engine.autoreload_on</snippet></ROW><ROW><id>2554679</id><snippet>True</snippet></ROW><ROW><id>2554679</id><snippet>cheetah_import = __import__</snippet></ROW><ROW><id>2554679</id><snippet>__builtin__.import</snippet></ROW><ROW><id>2554816</id><snippet>ValueError</snippet></ROW><ROW><id>2554816</id><snippet>TypeError</snippet></ROW><ROW><id>2554816</id><snippet>RuntimeError</snippet></ROW><ROW><id>2554816</id><snippet>NotImplementedError</snippet></ROW><ROW><id>2555047</id><snippet>import re

class REMatcher(object):
    def __init__(self, matchstring):
        self.matchstring = matchstring

    def match(self,regexp):
        self.rematch = re.match(regexp, self.matchstring)
        return bool(self.rematch)

    def group(self,i):
        return self.rematch.group(i)


for statement in ("I love Mary", 
                  "Ich liebe Margot", 
                  "Je t'aime Marie", 
                  "Te amo Maria"):

    m = REMatcher(statement)

    if m.match(r"I love (\w+)"): 
        print "He loves",m.group(1) 

    elif m.match(r"Ich liebe (\w+)"):
        print "Er liebt",m.group(1) 

    elif m.match(r"Je t'aime (\w+)"):
        print "Il aime",m.group(1) 

    else: 
        print "???"
</snippet></ROW><ROW><id>2555316</id><snippet>select</snippet></ROW><ROW><id>2555316</id><snippet>insert into table2 (name, title) select name, title from table1
</snippet></ROW><ROW><id>2555422</id><snippet>__lt__</snippet></ROW><ROW><id>2555422</id><snippet>__hash__</snippet></ROW><ROW><id>2555422</id><snippet>def __hash__(self):
    return hash(self._hex_digest)
</snippet></ROW><ROW><id>2555674</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>2555960</id><snippet>adate</snippet></ROW><ROW><id>2555960</id><snippet>datetime.date</snippet></ROW><ROW><id>2555960</id><snippet>def previousmonth(adate):
    m = adate.month - 1
    return m if m else 12
</snippet></ROW><ROW><id>2555960</id><snippet>import os, datetime
def cmonth(filename):
    ts = os.stat(filename).st_ctime
    return datetime.date.fromtimestamp(ts).month
</snippet></ROW><ROW><id>2555960</id><snippet>.year</snippet></ROW><ROW><id>2555960</id><snippet>os.listdir</snippet></ROW><ROW><id>2555960</id><snippet>os.walk</snippet></ROW><ROW><id>2555960</id><snippet>def fileswithcmonth(dirname, whatmonth):
    results = []
    for f in os.listdir(dirname):
        fullname = os.path.join(dirname, f)
        if whatmonth == cmonth(fullname):
            results.append(fullname)
    return results
</snippet></ROW><ROW><id>2555960</id><snippet>def filetimestamp(fullname):
    return os.stat(fullname).st_ctime
</snippet></ROW><ROW><id>2555960</id><snippet>files</snippet></ROW><ROW><id>2555960</id><snippet>max(files, key=filetimestamp)
</snippet></ROW><ROW><id>2555960</id><snippet>ym</snippet></ROW><ROW><id>2555960</id><snippet>(year, month)</snippet></ROW><ROW><id>2555960</id><snippet>def previousym(adate):
    y = adate.year
    m = adate.month - 1
    return (y, m) if m else (y - 1, 12)

import os, datetime
def cym(filename):
    ts = os.stat(filename).st_ctime
    dt datetime.date.fromtimestamp(ts)
    return cym.year, cym.month

def fileswithcym(dirname, whatym):
    results = []
    for f in os.listdir(dirname):
        fullname = os.path.join(dirname, f)
        # if you need to avoid subdirs, uncomment the following line
        # if not os.path.isfile(fullname): continue
        if whatym == cym(fullname):
            results.append(fullname)
    return results
</snippet></ROW><ROW><id>2555960</id><snippet>def fileswithcymintree(treeroot_dirname, whatym):
    results = []
    for dp, dirs, files in os.walk(treeroot_dirname):
        for f in files:
            fullname = os.path.join(dp, f)
            if whatym == cym(fullname):
                results.append(fullname)
    return results
</snippet></ROW><ROW><id>2556252</id><snippet>&gt;&gt;&gt; def rreplace(s, old, new, occurrence):
...  li = s.rsplit(old, occurrence)
...  return new.join(li)
... 
&gt;&gt;&gt; s
'1232425'
&gt;&gt;&gt; rreplace(s, '2', ' ', 2)
'123 4 5'
&gt;&gt;&gt; rreplace(s, '2', ' ', 3)
'1 3 4 5'
&gt;&gt;&gt; rreplace(s, '2', ' ', 4)
'1 3 4 5'
&gt;&gt;&gt; rreplace(s, '2', ' ', 0)
'1232425'
</snippet></ROW><ROW><id>2556819</id><snippet>&gt;&gt;&gt; f=open('test.txt')
&gt;&gt;&gt; f
&lt;open file 'test.txt', mode 'r' at 0x10047c938&gt;
&gt;&gt;&gt; hex(id(f))
'0x10047c938'
</snippet></ROW><ROW><id>2556974</id><snippet>from multiprocessing.managers import SyncManager


class MyManager(SyncManager):
    pass


syncdict = {}
def get_dict():
    return syncdict

if __name__ == "__main__":
    MyManager.register("syncdict", get_dict)
    manager = MyManager(("127.0.0.1", 5000), authkey="password")
    manager.start()
    raw_input("Press any key to kill server".center(50, "-"))
    manager.shutdown()
</snippet></ROW><ROW><id>2556974</id><snippet>from multiprocessing.managers import SyncManager
import sys, time

class MyManager(SyncManager):
    pass

MyManager.register("syncdict")

if __name__ == "__main__":
    manager = MyManager(("127.0.0.1", 5000), authkey="password")
    manager.connect()
    syncdict = manager.syncdict()

    print "dict = %s" % (dir(syncdict))
    key = raw_input("Enter key to update: ")
    inc = float(raw_input("Enter increment: "))
    sleep = float(raw_input("Enter sleep time (sec): "))

    try:
         #if the key doesn't exist create it
         if not syncdict.has_key(key):
             syncdict.update([(key, 0)])
         #increment key value every sleep seconds
         #then print syncdict
         while True:
              syncdict.update([(key, syncdict.get(key) + inc)])
              time.sleep(sleep)
              print "%s" % (syncdict)
    except KeyboardInterrupt:
         print "Killed client"
</snippet></ROW><ROW><id>2557196</id><snippet>help(yourmodule)</snippet></ROW><ROW><id>2557196</id><snippet>help</snippet></ROW><ROW><id>2557196</id><snippet>x.py</snippet></ROW><ROW><id>2557196</id><snippet>"""This module does blah blah."""

class Blah(object):
  """This class does blah blah."""
</snippet></ROW><ROW><id>2557196</id><snippet>&gt;&gt;&gt; import x; help(x)
</snippet></ROW><ROW><id>2557196</id><snippet>Help on module x:

NAME
    x - This module does blah blah.

FILE
    /tmp/x.py

CLASSES
    __builtin__.object
        Blah

    class Blah(__builtin__.object)
     |  This class does blah blah.
     |  
     |  Data and other attributes defined here:
     |  
     |  __dict__ = &lt;dictproxy object&gt;
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__ = &lt;attribute '__weakref__' of 'Blah' objects&gt;
     |      list of weak references to the object (if defined)
</snippet></ROW><ROW><id>2557264</id><snippet>from matplotlib import pyplot as PLT
fig = PLT.figure()
ax1 = fig.add_subplot(111)

ax1.axhline(linewidth=4, color="g")        # inc. width of x-axis and color it green
ax1.axvline(linewidth=4, color="r")        # inc. width of y-axis and color it red

PLT.show()
</snippet></ROW><ROW><id>2557316</id><snippet>logging</snippet></ROW><ROW><id>2557316</id><snippet>__init__.py</snippet></ROW><ROW><id>2557316</id><snippet>import logging

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    datefmt='%m-%d %H:%M',
                    )

logging.info('Danger Will Robinson!')
# 03-31 20:00 root         INFO     Danger Will Robinson!
root = logging.getLogger()
hdlr = root.handlers[0]
fmt = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
hdlr.setFormatter(fmt)
logging.info('Danger Will Robinson!')
# root        : INFO     Danger Will Robinson!
</snippet></ROW><ROW><id>2557711</id><snippet>DATABASE_NAME</snippet></ROW><ROW><id>2557711</id><snippet>DATABASE_NAME = '/home/USERNAME/SITE/DJANGOPROJECT/DATABASE.db'
</snippet></ROW><ROW><id>2557711</id><snippet>DATABASE_NAME = 'DATABASE.db'
</snippet></ROW><ROW><id>2557837</id><snippet>if "token" in mystring:
    print mystring
</snippet></ROW><ROW><id>2557837</id><snippet>&gt;&gt;&gt; mystring="""
...     qwertyuiop
...     asdfghjkl
...
...     zxcvbnm
...     token qwerty
...
...     asdfghjklñ
... """
&gt;&gt;&gt; for item in mystring.split("\n"):
...  if "token" in item:
...     print item.strip()
...
token qwerty
</snippet></ROW><ROW><id>2558254</id><snippet>from lxml import html
tree = html.fromstring(text)
[td.text for td in tree.xpath("//td")]
</snippet></ROW><ROW><id>2558254</id><snippet>['Header', 'Want This']
</snippet></ROW><ROW><id>2558783</id><snippet>revoke</snippet></ROW><ROW><id>2558783</id><snippet>Control.revoke(task_id, destination=None, terminate=False, signal='SIGTERM', **kwargs)
    Tell all (or specific) workers to revoke a task by id.

    If a task is revoked, the workers will ignore the task and not execute it after all.

    Parameters: 
        task_id – Id of the task to revoke.
        terminate – Also terminate the process currently working on the task (if any).
        signal – Name of signal to send to process if terminate. Default is TERM.
</snippet></ROW><ROW><id>2559113</id><snippet>title</snippet></ROW><ROW><id>2559113</id><snippet>__eq__</snippet></ROW><ROW><id>2559113</id><snippet>class YourObject:
    [...]
    def __eq__(self, other):
        return self.title == other.title
</snippet></ROW><ROW><id>2559113</id><snippet>__ne__</snippet></ROW><ROW><id>2559113</id><snippet>__cmp__</snippet></ROW><ROW><id>2559279</id><snippet>from win32com.client import Dispatch

SHELL = Dispatch("Shell.Application")

def get_ie(shell):
    for win in shell.Windows():
        if win.Name == "Windows Internet Explorer":
            return win
    return None

def main():
    ie = get_ie(SHELL)
    if ie:
        print ie.LocationURL
    else:
        print "no ie window"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2559279</id><snippet>Dispatch('InternetExplorer.Application')</snippet></ROW><ROW><id>2559279</id><snippet># This doesn't work
from win32com.client import Dispatch

# This line will always create a new window
ie = Dispatch("InternetExplorer.Application")

print ie.LocationURL
</snippet></ROW><ROW><id>2559721</id><snippet>settings.py</snippet></ROW><ROW><id>2559721</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>2559741</id><snippet>win32console</snippet></ROW><ROW><id>2559741</id><snippet>win32console</snippet></ROW><ROW><id>2559955</id><snippet>info.name</snippet></ROW><ROW><id>2559955</id><snippet>ManyToManyField</snippet></ROW><ROW><id>2559955</id><snippet>Name</snippet></ROW><ROW><id>2559955</id><snippet>.all()</snippet></ROW><ROW><id>2559955</id><snippet>Name</snippet></ROW><ROW><id>2559955</id><snippet>info_list = info.objects.filter(id=a)
for info_object in info_list:
    for name_object in info_object.name.all():
        print name_object.name
</snippet></ROW><ROW><id>2560176</id><snippet>def read_data(filename):
    return open(filename).read()
</snippet></ROW><ROW><id>2560176</id><snippet>try:
    data = read_data('data-file.txt')
except IOError:
    data = read_data('another-data-file.txt')
    # or
    show_error_message("Data file was not found.")
    # or something else
</snippet></ROW><ROW><id>2560268</id><snippet>get</snippet></ROW><ROW><id>2560268</id><snippet>gets</snippet></ROW><ROW><id>2560268</id><snippet>set</snippet></ROW><ROW><id>2560268</id><snippet>add</snippet></ROW><ROW><id>2560750</id><snippet>def a(x, stack=None):
    if stack is None:
        stack = [None]
    ...
    a(x + 1, stack)
</snippet></ROW><ROW><id>2560791</id><snippet>or</snippet></ROW><ROW><id>2560791</id><snippet>my_objects = MyModel.objects.all()
if my_objects:
    [a,b,c].extend(my_objects)
</snippet></ROW><ROW><id>2561254</id><snippet>MySQLdb.escape_string(SQL)
</snippet></ROW><ROW><id>2561254</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; MySQLdb.escape_string("'")
"\\'"
</snippet></ROW><ROW><id>2561490</id><snippet>for suffix in suffixList:
</snippet></ROW><ROW><id>2561490</id><snippet>for suffix in self.suffixList:
</snippet></ROW><ROW><id>2561497</id><snippet>I</snippet></ROW><ROW><id>2561497</id><snippet>#</snippet></ROW><ROW><id>2561636</id><snippet>from tagging.fields import TagField

class BlogPost(models.Model):
    # ...
    tags = TagField()
</snippet></ROW><ROW><id>2561918</id><snippet>subprocess.call()</snippet></ROW><ROW><id>2561918</id><snippet>subprocess.call()</snippet></ROW><ROW><id>2561918</id><snippet>wait()</snippet></ROW><ROW><id>2561918</id><snippet>wait()</snippet></ROW><ROW><id>2561918</id><snippet>communicate()</snippet></ROW><ROW><id>2561918</id><snippet>p = subprocess.Popen(
    ["scanx", "--udp", host],
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
out, err = p.communicate()
</snippet></ROW><ROW><id>2562061</id><snippet>python -c "import wx"
</snippet></ROW><ROW><id>2562061</id><snippet>import wx</snippet></ROW><ROW><id>2562340</id><snippet>def int_to_rgb(n):
    b = (n &amp; 0xff0000) &gt;&gt; 16
    g = (n &amp; 0x00ff00) &gt;&gt; 8
    r = (n &amp; 0x0000ff)
    return (r, g, b)
</snippet></ROW><ROW><id>2562371</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; a = ((1,2),(11,22,),(111,222))
&gt;&gt;&gt; print a
((1, 2), (11, 22), (111, 222))
&gt;&gt;&gt; message = json.dumps(a)
&gt;&gt;&gt; message
'[[1, 2], [11, 22], [111, 222]]'
&gt;&gt;&gt; b = json.loads(message)
&gt;&gt;&gt; b
[[1, 2], [11, 22], [111, 222]]
</snippet></ROW><ROW><id>2562797</id><snippet>emails = ["z@c.com", "a@c.com"]
salaries = [50, 60]
ids = [2, 1]

intermediate = zip(emails, salaries, ids)
intermediate.sort()

result = zip(*intermediate)
</snippet></ROW><ROW><id>2562881</id><snippet>type(sourceresult.sourcename) # I suspect it's already a UTF-8 encoded string

repr(sourceresult.sourcename)
</snippet></ROW><ROW><id>2562881</id><snippet>sourceresult.sourcename</snippet></ROW><ROW><id>2562881</id><snippet>sourceresult.sourcename</snippet></ROW><ROW><id>2562881</id><snippet>mystring</snippet></ROW><ROW><id>2562881</id><snippet>source_as_UTF8= sourceresult.sourcename.decode("cp1252").encode("utf-8")
</snippet></ROW><ROW><id>2563115</id><snippet># Get a random integer to use as the session's datastore ID.
# (So it can be stored in a cookie without being 'guessable'.)
random.seed();
id = None;
while None==id or Session.get_by_id( id ):
    id = random.randrange( sys.maxint );
seshKey = db.Key.from_path( 'Session', id );    
session = Session( key = seshKey );
</snippet></ROW><ROW><id>2563115</id><snippet>sid = session.key().id();
</snippet></ROW><ROW><id>2563115</id><snippet>session = Session.get_by_id( sid );
</snippet></ROW><ROW><id>2563544</id><snippet>for</snippet></ROW><ROW><id>2563544</id><snippet>settings.py</snippet></ROW><ROW><id>2563544</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.1')
</snippet></ROW><ROW><id>2563544</id><snippet>from django import template</snippet></ROW><ROW><id>2563883</id><snippet>paste</snippet></ROW><ROW><id>2563883</id><snippet>import Image
img=Image.open('/pathto/file','r')
img_w,img_h=img.size
background = Image.new('RGBA', (1440,900), (255, 255, 255, 255))
bg_w,bg_h=background.size
offset=((bg_w-img_w)/2,(bg_h-img_h)/2)
background.paste(img,offset)
background.save('out.png')
</snippet></ROW><ROW><id>2564098</id><snippet>files=[{'date': datetime(2010, 3, 1, 0, 0, 10), 'file': 'foo'}, 
       {'date': datetime(2010, 3, 1, 12, 0, 10), 'file': 'bar'}, 
       {'date': datetime(2010, 3, 2, 3, 5, 10), 'file': 'baz'}, 
       {'date': datetime(2010, 3, 2, 3, 3, 10), 'file': 'foo'}]
</snippet></ROW><ROW><id>2564098</id><snippet>from itertools import groupby
map(lambda x: next(x[1]), 
    groupby(sorted(files, 
                   key=lambda x: x['date'],
                   reverse=True), 
         key=lambda x: datetime(x['date'].year, x['date'].month, x['date'].day)))
</snippet></ROW><ROW><id>2564098</id><snippet>[{'date': datetime.datetime(2010, 3, 2, 3, 5, 10), 'file': 'baz'}, {'date': datetime.datetime(2010, 3, 1, 12, 0, 10), 'file': 'bar'}]
</snippet></ROW><ROW><id>2564098</id><snippet>sorted</snippet></ROW><ROW><id>2564098</id><snippet>groupby</snippet></ROW><ROW><id>2564098</id><snippet>next[1]</snippet></ROW><ROW><id>2564144</id><snippet>Universal Feedparser</snippet></ROW><ROW><id>2564157</id><snippet>field_name = funct()
params = {field_name + '__lte': arg1,       # field_name should still contain string
          'some_other_field_name': arg2}

locations = Locations.objects.filter(**params)

# is the same as (assuming field_name = 'some_name'):
# Locations.objects.filter(some_name__lte=arg1, some_other_field_name=arg2)
</snippet></ROW><ROW><id>2564161</id><snippet>try:
    start_thread()  
except (KeyboardInterrupt, SystemExit):
    cleanup_stop_thread();
    sys.exit()
</snippet></ROW><ROW><id>2564628</id><snippet>groupby()</snippet></ROW><ROW><id>2564628</id><snippet>files = sorted(get_files(), key=(lambda x: x[1]))</snippet></ROW><ROW><id>2564628</id><snippet>for</snippet></ROW><ROW><id>2564868</id><snippet>z</snippet></ROW><ROW><id>2564868</id><snippet>idx</snippet></ROW><ROW><id>2564868</id><snippet>z[idx]</snippet></ROW><ROW><id>2564868</id><snippet>idx2</snippet></ROW><ROW><id>2564868</id><snippet>z[idx2]</snippet></ROW><ROW><id>2564868</id><snippet>z</snippet></ROW><ROW><id>2564868</id><snippet>z.real</snippet></ROW><ROW><id>2564868</id><snippet>[z.real for z in zlist]</snippet></ROW><ROW><id>2564904</id><snippet>[x for x in N if n - 10 &lt;= x &lt;= n + 10]</snippet></ROW><ROW><id>2565220</id><snippet>python_32</snippet></ROW><ROW><id>2565220</id><snippet>chmod a+x python_32</snippet></ROW><ROW><id>2565220</id><snippet>python_32</snippet></ROW><ROW><id>2565220</id><snippet>#! /usr/bin/env python_32</snippet></ROW><ROW><id>2565425</id><snippet>abort(404)</snippet></ROW><ROW><id>2565592</id><snippet>(lambda (a,b,c): [a,b.upper(),c])(inp)
</snippet></ROW><ROW><id>2565592</id><snippet>[inp[0], inp[1].upper(), inp[1]]
</snippet></ROW><ROW><id>2565618</id><snippet>set volume</snippet></ROW><ROW><id>2565618</id><snippet>&gt;&gt;&gt; from osax import *
&gt;&gt;&gt; import time
&gt;&gt;&gt; sa = OSAX()
&gt;&gt;&gt; for i in range(50):
...   sa.set_volume(i*2)
...   time.sleep(1)
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2566173</id><snippet>    wid2.setStyleSheet("QWidget {background-color: #0000FF }")
    wid2.show()
    wid2.setAutoFillBackground(True)
</snippet></ROW><ROW><id>2566508</id><snippet>import numpy as np
def find_nearest(array,value):
    idx = (np.abs(array-value)).argmin()
    return array[idx]

array = np.random.random(10)
print(array)
# [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826
#   0.17104965  0.56874386  0.57319379  0.28719469]

value = 0.5

print(find_nearest(array, value))
# 0.568743859261
</snippet></ROW><ROW><id>2566727</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; import struct
&gt;&gt;&gt; V1 = struct.Struct("&gt;H10p")
&gt;&gt;&gt; V2 = struct.Struct("&gt;L10p")
&gt;&gt;&gt; def serialize(variant, n, s):
    if variant:
        return V2.pack(n,s)
    else:
        return V1.pack(n,s)[:len(s)+3]


&gt;&gt;&gt; print binascii.hexlify(serialize(False, 10, 'hello')) #V1
000a0568656c6c6f
&gt;&gt;&gt; print binascii.hexlify(serialize(True, 10, 'hello')) #V2
0000000a0568656c6c6f00000000
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2566805</id><snippet># first code a function to generate the axis labels you want 
# ie, turn numbers greater than 1000 into commified strings (12549 =&gt; 12,549)

import locale
locale.setlocale(locale.LC_ALL, 'en_US')
fnx = lambda x : locale.format("%d", x, grouping=True)

from matplotlib import pyplot as PLT
import numpy as NP

data = NP.random.randint(15000, 85000, 50).reshape(25, 2)
x, y = data[:,0], data[:,1]

fig = PLT.figure()
ax1 = fig.add_subplot(111)
ax1.plot(x, y, "ro")
default_xtick = range(20000, 100000, 10000)

# these two lines are the crux:
# create the custom tick labels
new_xtick = map(fnx, default_xtick)
# set those labels on the axis
ax1.set_xticklabels(new_xtick)

PLT.show()
</snippet></ROW><ROW><id>2566853</id><snippet>self.father = None
</snippet></ROW><ROW><id>2566853</id><snippet>father</snippet></ROW><ROW><id>2566860</id><snippet>&gt;&gt;&gt; xtract="""
... BT
...    /F13 12 Tf
...    288 720 Td
...    (ABC) Tj
... ET
...
... """
&gt;&gt;&gt; for chunk in xtract.split("ET"):
...     if "BT" in chunk:
...         for brace in chunk.split(")"):
...             if "(" in brace:
...                  print brace[brace.find("(")+1:]
...
ABC
</snippet></ROW><ROW><id>2566949</id><snippet>difflib.py</snippet></ROW><ROW><id>2566949</id><snippet>sys.path</snippet></ROW><ROW><id>2566949</id><snippet>difflib.py</snippet></ROW><ROW><id>2566949</id><snippet>f:\script</snippet></ROW><ROW><id>2566949</id><snippet>re</snippet></ROW><ROW><id>2566949</id><snippet>itertools</snippet></ROW><ROW><id>2566949</id><snippet>IronPython.modules.dll</snippet></ROW><ROW><id>2567221</id><snippet>any(arow['column1'] == 'value11' for arow in table.iteritems())</snippet></ROW><ROW><id>2567221</id><snippet>numpy</snippet></ROW><ROW><id>2567221</id><snippet>dict</snippet></ROW><ROW><id>2567221</id><snippet>dict</snippet></ROW><ROW><id>2567221</id><snippet>collections.defaultdict(dict)</snippet></ROW><ROW><id>2567221</id><snippet>import collections

class Table(object):
    def __init__(self):
        self.d = collections.defaultdict(dict)
    def add(self, row, col, val):
        self.d[row][col] = val
    def get(self, row, col, default=None):
        return self.d[row].get(col, default)
    def inrow(self, row, col):
        return col in self.d[row]
    def incol(self, col, val):
        return any(x[col]==val for x in self.d.iteritems())
</snippet></ROW><ROW><id>2567221</id><snippet>    def __setitem__(self, (row, col), val):
        self.add(row, col, val)
</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>yield tuple(pool[i] for i in indices[:r])
</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>j = cycles[i]
indices[i], indices[-j] = indices[-j], indices[i]
</snippet></ROW><ROW><id>2567451</id><snippet>cycles[i]</snippet></ROW><ROW><id>2567451</id><snippet>j</snippet></ROW><ROW><id>2567451</id><snippet>j</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>indices[-1]</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567451</id><snippet>indices[i:] = indices[i+1:] + indices[i:i+1]
cycles[i] = n - i
</snippet></ROW><ROW><id>2567451</id><snippet>i</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567451</id><snippet>i</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>n - i</snippet></ROW><ROW><id>2567451</id><snippet>i</snippet></ROW><ROW><id>2567451</id><snippet>cycles[i] -= 1
</snippet></ROW><ROW><id>2567451</id><snippet>yield</snippet></ROW><ROW><id>2567451</id><snippet>print</snippet></ROW><ROW><id>2567451</id><snippet>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    print 'I', 0, cycles, indices
    # yield tuple(pool[i] for i in indices[:r])
    print indices[:r]
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
        print 'B', i, cycles, indices
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
        print 'A', i, cycles, indices
            else:
        print 'b', i, cycles, indices
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
        print 'a', i, cycles, indices
                # yield tuple(pool[i] for i in indices[:r])
            print indices[:r]
                break
        else:
            return

permutations('ABC', 2)
</snippet></ROW><ROW><id>2567451</id><snippet>I 0 [3, 2] [0, 1, 2]
[0, 1]
b 1 [3, 1] [0, 1, 2]
a 1 [3, 1] [0, 2, 1]
[0, 2]
B 1 [3, 0] [0, 2, 1]
A 1 [3, 2] [0, 1, 2]
b 0 [2, 2] [0, 1, 2]
a 0 [2, 2] [1, 0, 2]
[1, 0]
b 1 [2, 1] [1, 0, 2]
a 1 [2, 1] [1, 2, 0]
[1, 2]
B 1 [2, 0] [1, 2, 0]
A 1 [2, 2] [1, 0, 2]
b 0 [1, 2] [1, 0, 2]
a 0 [1, 2] [2, 0, 1]
[2, 0]
b 1 [1, 1] [2, 0, 1]
a 1 [1, 1] [2, 1, 0]
[2, 1]
B 1 [1, 0] [2, 1, 0]
A 1 [1, 2] [2, 0, 1]
B 0 [0, 2] [2, 0, 1]
A 0 [3, 2] [0, 1, 2]
</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567451</id><snippet>yield</snippet></ROW><ROW><id>2567451</id><snippet>break</snippet></ROW><ROW><id>2567451</id><snippet>else</snippet></ROW><ROW><id>2567451</id><snippet>for</snippet></ROW><ROW><id>2567451</id><snippet>while n</snippet></ROW><ROW><id>2567451</id><snippet>while True</snippet></ROW><ROW><id>2567451</id><snippet>n</snippet></ROW><ROW><id>2567451</id><snippet>while</snippet></ROW><ROW><id>2567451</id><snippet>return</snippet></ROW><ROW><id>2567451</id><snippet>if not n: return</snippet></ROW><ROW><id>2567451</id><snippet>while True:</snippet></ROW><ROW><id>2567451</id><snippet>n</snippet></ROW><ROW><id>2567451</id><snippet>0</snippet></ROW><ROW><id>2567451</id><snippet>yield</snippet></ROW><ROW><id>2567451</id><snippet>if not n:</snippet></ROW><ROW><id>2567451</id><snippet>while</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567451</id><snippet>print</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>indices</snippet></ROW><ROW><id>2567451</id><snippet>cycles</snippet></ROW><ROW><id>2567643</id><snippet>dict</snippet></ROW><ROW><id>2567643</id><snippet>def raw_response(template):
    def wrap(view):
        def response(request, *args, **kwargs):
            context = view(request, *args, **kwargs)
            if request.method == 'GET' and request.GET.get('raw', '0') == '1':
                return HttpResponse(render_to_string(template, context),
                                    content_type='text/plain')
            # POST or not raw
            return render_to_response(template, context)
        return response
    return wrap

@raw_response('my_template_name.html')
def view_name(request):
    return {'x': 42}
</snippet></ROW><ROW><id>2567841</id><snippet>import mechanize

br = mechanize.Browser()
resp = br.open("http://www.mysitewithcookies.com/")
print resp.info()  # headers
print resp.read()  # content
</snippet></ROW><ROW><id>2568140</id><snippet>#!/usr/bin/env python

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

app = QApplication(sys.argv)

web = QWebView()
web.load(QUrl("http://www.stackoverflow.com"))
web.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>2568347</id><snippet>import httplib
from xml.dom import minidom

http.request("POST", "/path/to/my/webservice", body=xml, headers = {
    "Host": "myservername",
    "Content-Type": "text/xml; charset=UTF-8",
    "Content-Length": len(xml)
})

print minidom.parseString(http.getresponse().read())
</snippet></ROW><ROW><id>2568422</id><snippet>itertools.product()</snippet></ROW><ROW><id>2568422</id><snippet>import itertools
v = (a, b, c)
for d, e, f in itertools.product(*(generate(x) for x in v)):
  print d, e, f
</snippet></ROW><ROW><id>2568917</id><snippet>randint</snippet></ROW><ROW><id>2568917</id><snippet>INT_MAX</snippet></ROW><ROW><id>2568917</id><snippet>random.randrange(0, INT_MAX + 1)</snippet></ROW><ROW><id>2568917</id><snippet>(0, 0)</snippet></ROW><ROW><id>2568917</id><snippet>(0, INT_MIN)</snippet></ROW><ROW><id>2568917</id><snippet>Lib/whrandom.py</snippet></ROW><ROW><id>2568917</id><snippet>#
# Get a random integer in the range [a, b] including both end points.
# (Deprecated; use randrange below.)
#
def randint(self, a, b):
    return self.randrange(a, b+1)
</snippet></ROW><ROW><id>2568917</id><snippet>whrandom.randint</snippet></ROW><ROW><id>2568917</id><snippet>random.randint</snippet></ROW><ROW><id>2568917</id><snippet>random.py</snippet></ROW><ROW><id>2568917</id><snippet>random.randint</snippet></ROW><ROW><id>2568917</id><snippet>def randrange(self, start, stop=None, step=1, int=int, default=None):
    """Choose a random item from range(start, stop[, step]).

    This fixes the problem with randint() which includes the
    endpoint; in Python this is usually not what you want.
    Do not supply the 'int' and 'default' arguments.
    """
</snippet></ROW><ROW><id>2568917</id><snippet>randint</snippet></ROW><ROW><id>2568917</id><snippet>randint</snippet></ROW><ROW><id>2569174</id><snippet>Host</snippet></ROW><ROW><id>2569453</id><snippet>egg</snippet></ROW><ROW><id>2569453</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db=MySQLdb.connect(host="localhost",user="joebob",
                   passwd="moonpie",db="thangs")

&gt;&gt;&gt; c=db.cursor()
&gt;&gt;&gt; max_price=5
&gt;&gt;&gt; c.execute("""SELECT spam, eggs, sausage FROM breakfast
          WHERE price &lt; %s""", (max_price,))
&gt;&gt;&gt; c.fetchone()
(3L, 2L, 0L)
</snippet></ROW><ROW><id>2569467</id><snippet>import re

foo = 'ADCKAL+2AG.+2AG.+2AG.+2AGGG^+.+G+3AGGa4.'
pattern = '|'.join('\+%s[ACGTNacgtn]{%s}.' % (i, i) for i in range(1, 10))
regex = re.compile(pattern)
foo = regex.sub("+", foo)
print foo
</snippet></ROW><ROW><id>2569467</id><snippet>ADCKAL++++G^+.+G+4.
</snippet></ROW><ROW><id>2569561</id><snippet>&lt;meta http-equiv="refresh" content="2;url=http://nextlocation.com"&gt;
</snippet></ROW><ROW><id>2569584</id><snippet>count = len(set(d["code"] for d in li))
</snippet></ROW><ROW><id>2569685</id><snippet>mylist = stats.values()
</snippet></ROW><ROW><id>2569685</id><snippet>mylist = []
for k,v in stats.iteritems():
    mylist.append(v)
</snippet></ROW><ROW><id>2569879</id><snippet>wrapper = FileWrapper(file("C:/pics.zip", 'rb'))
</snippet></ROW><ROW><id>2569901</id><snippet>request.args.get('variable')</snippet></ROW><ROW><id>2570020</id><snippet>l</snippet></ROW><ROW><id>2570020</id><snippet>names = ['Bob','Dave','Jane']

Person.objects.[exclude][1](Name__[in][2]=names)
</snippet></ROW><ROW><id>2570020</id><snippet>present = Person.objects.values_list('Name', flat=True)
absent = set(names) - set(present)   
# or, if you prefer named functions to the set operator '-'
absent = set(names).difference(present) 
</snippet></ROW><ROW><id>2570032</id><snippet>if float(height) &gt; 1.8:
    height_string = 'tall'
    if float(height) &gt; 2:
        height_string = 'very tall'
elif float(height) &lt; 1.8 and float(height) &gt; 1.5:
    height_string = 'average'
elif float(height) &lt; 1.5:
    height_string = 'short'
    if float(height) &lt; 1.3:
        height_string = 'very short'
</snippet></ROW><ROW><id>2570032</id><snippet>elif float(height) &lt;= 1.8 and float(height) &gt;= 1.5:
</snippet></ROW><ROW><id>2570032</id><snippet>myOutput = descriptionGenerator(["char"])
</snippet></ROW><ROW><id>2570032</id><snippet>descriptionVariableSize == 1</snippet></ROW><ROW><id>2570032</id><snippet>elif descriptionVariableSize == 8:
</snippet></ROW><ROW><id>2570032</id><snippet>elif</snippet></ROW><ROW><id>2570032</id><snippet>if</snippet></ROW><ROW><id>2570032</id><snippet>return</snippet></ROW><ROW><id>2570032</id><snippet> return descriptionGenerator(randomDescriptionVariables)
</snippet></ROW><ROW><id>2570032</id><snippet>if</snippet></ROW><ROW><id>2570032</id><snippet>generateRandomDescription()</snippet></ROW><ROW><id>2570032</id><snippet>if</snippet></ROW><ROW><id>2570217</id><snippet>&lt;snip&gt;
# Test classifiers.
kernels = [LINEAR, POLY, RBF]
kname = ['linear','polynomial','rbf']
correct = defaultdict(int)
for kn,kt in zip(kname,kernels):
  print kt
  param = svm_parameter(kernel_type = kt, C=10) # Here -&gt; rm probability = 1
  model = svm_model(problem, param)
  for test_sample,correct_label in test:
      # Here -&gt; change predict_probability to just predict
      pred_label = model.predict(test_sample)
      correct[kn] += pred_label == correct_label
&lt;/snip&gt;
</snippet></ROW><ROW><id>2570217</id><snippet>--------------------------------------------------------------------------------
Accuracy:
        polynomial 1.000000 (4 of 4)
        rbf 1.000000 (4 of 4)
        linear 1.000000 (4 of 4)
</snippet></ROW><ROW><id>2570272</id><snippet>sys.stdout.write()
</snippet></ROW><ROW><id>2570272</id><snippet>sys.stderr</snippet></ROW><ROW><id>2570272</id><snippet>sys.stdout</snippet></ROW><ROW><id>2570272</id><snippet>sys.stdout</snippet></ROW><ROW><id>2570272</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>2570272</id><snippet>print</snippet></ROW><ROW><id>2570272</id><snippet>print</snippet></ROW><ROW><id>2570384</id><snippet>import pycurl
c1 = pycurl.Curl()
c1.setopt(pycurl.URL, 'http://www.google.com')
c1.setopt(pycurl.PROXY, 'localhost')
c1.setopt(pycurl.PROXYPORT, 8080)
c1.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)

c2 = pycurl.Curl()
c2.setopt(pycurl.URL, 'http://www.yahoo.com')
c2.setopt(pycurl.PROXY, 'localhost')
c2.setopt(pycurl.PROXYPORT, 8081)
c2.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)

c1.perform() 
c2.perform() 
</snippet></ROW><ROW><id>2570802</id><snippet>import random

def WeightedPick(d):
    r = random.uniform(0, sum(d.itervalues()))
    s = 0.0
    for k, w in d.iteritems():
        s += w
        if r &lt; s: return k
    return k

def Test():
    k = {'A': 68, 'B': 62, 'C': 47, 'D': 16, 'E': 81}
    results = {}
    for x in xrange(10000):
        p = WeightedPick(k)
        results[p] = results.get(p, 0) + 1
    print results

Test()
</snippet></ROW><ROW><id>2571154</id><snippet>Entry.objects.get(headline__icontains='Lennon')
</snippet></ROW><ROW><id>2571154</id><snippet>SELECT ... WHERE headline ILIKE '%Lennon%';
</snippet></ROW><ROW><id>2571245</id><snippet>def parse(html, *atrs):
 soup= BeautifulSoup(html)
 body = soup.find(*atrs)
 return body
</snippet></ROW><ROW><id>2571245</id><snippet>parse(htmlpage, 'div', {'id':'body'})
</snippet></ROW><ROW><id>2571385</id><snippet>json</snippet></ROW><ROW><id>2571385</id><snippet>import json
sequence = '[%s]' % ','.join(sequence)
data = json.loads(sequence)
print data[0]['First'], data[0]['Second']
</snippet></ROW><ROW><id>2571437</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>2571437</id><snippet>var &lt; datetime.datetime.today() - datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>2571568</id><snippet>fmt = u'%d\u200f/%m\u200f/%Y %H:%M:%S'
time.strftime(fmt.encode('utf-8'), &lt;your time here&gt;).decode('utf-8')
</snippet></ROW><ROW><id>2571970</id><snippet>def translate(x):
    if x == ' ': return '-'
    if 'a' &lt;= x &lt;= 'z': return x
    if 'A' &lt;= x &lt;= 'Z': return x
    if '0' &lt;= x &lt;= '9': return x

def mk_translator():
    translations = ''.join(translate(chr(c)) or chr(c) for c in xrange(256))
    deletions = ''.join(chr(c) for c in xrange(256) if translate(chr(c)) is None)
    return translations, deletions

def urlize(x, translator=mk_translator()):
    return x.translate(*translator)

print urlize('User Name')
</snippet></ROW><ROW><id>2572116</id><snippet>&lt;type of hash&gt;$&lt;salt&gt;$&lt;hash&gt;</snippet></ROW><ROW><id>2572116</id><snippet>def set_password(self, raw_password):
    import random
    algo = 'sha1'
    salt = get_hexdigest(algo, str(random.random()), str(random.random()))[:5]
    hsh = get_hexdigest(algo, salt, raw_password)
    self.password = '%s$%s$%s' % (algo, salt, hsh)
</snippet></ROW><ROW><id>2572116</id><snippet>hashlib.sha1('%s%s' % (salt, hash)).hexdigest()</snippet></ROW><ROW><id>2572116</id><snippet>def check_password(raw_password, enc_password):
    """
    Returns a boolean of whether the raw_password was correct. Handles
    encryption formats behind the scenes.
    """
    algo, salt, hsh = enc_password.split('$')
    return hsh == get_hexdigest(algo, salt, raw_password)
</snippet></ROW><ROW><id>2572181</id><snippet>atexit</snippet></ROW><ROW><id>2572181</id><snippet>class MySingleton:
    def __init__(self):
        import atexit
        atexit.register(self.stop)
        self._dokill = os.kill
        self._thesig = signal.SIGTERM

    def stop(self):
        self._dokill(self.sel_server_pid, self._thesig)
</snippet></ROW><ROW><id>2572181</id><snippet>os</snippet></ROW><ROW><id>2572263</id><snippet>            &lt;input type="hidden" name=".tries" value="1"&gt; 
            &lt;input type="hidden" name=".src" value="ym"&gt; 
            &lt;input type="hidden" name=".md5" value=""&gt; 
            &lt;input type="hidden" name=".hash" value=""&gt; 
            &lt;input type="hidden" name=".js" value=""&gt; 
            &lt;input type="hidden" name=".last" value=""&gt; 
            &lt;input type="hidden" name="promo" value=""&gt; 
            &lt;input type="hidden" name=".intl" value="us"&gt; 
            &lt;input type="hidden" name=".bypass" value=""&gt; 
            &lt;input type="hidden" name=".partner" value=""&gt; 
            &lt;input type="hidden" name=".u" value="bd5tdpd5rf2pg"&gt; 
            &lt;input type="hidden" name=".v" value="0"&gt; 
            &lt;input type="hidden" name=".challenge" value="5qUiIPGVFzRZ2BHhvtdGXoehfiOj"&gt; 
            &lt;input type="hidden" name=".yplus" value=""&gt; 
            &lt;input type="hidden" name=".emailCode" value=""&gt; 
            &lt;input type="hidden" name="pkg" value=""&gt; 
            &lt;input type="hidden" name="stepid" value=""&gt; 
            &lt;input type="hidden" name=".ev" value=""&gt; 
            &lt;input type="hidden" name="hasMsgr" value="0"&gt; 
            &lt;input type="hidden" name=".chkP" value="Y"&gt; 
            &lt;input type="hidden" name=".done" value="http://mail.yahoo.com"&gt; 
            &lt;input type="hidden" name=".pd" value="ym_ver=0&amp;c=&amp;ivt=&amp;sg="&gt; 
</snippet></ROW><ROW><id>2572263</id><snippet>User-Agent</snippet></ROW><ROW><id>2572306</id><snippet>USERAGENT = 'something'
HEADERS = {'User-Agent': USERAGENT}

req = urllib2.Request(URL_HERE, headers=HEADERS)
f = urllib2.urlopen(req)
s = f.read()
f.close()
</snippet></ROW><ROW><id>2572573</id><snippet>with_avg = SomeObject.objects.annotate(avg=Avg('something'))
with_avg_and_has = with_avg.extra(select={'has_something': 'something is NULL'})
sorted_result = with_avg_and_has.order_by('-has_something', '-avg').all() 
</snippet></ROW><ROW><id>2572575</id><snippet>f = lambda x:'' if x is None else x
</snippet></ROW><ROW><id>2572760</id><snippet>from struct import pack
from math import sin, pi
import time

def au_file(name, freq, freq1, dur, vol):
    fout = open(name, 'wb')
    # header needs size, encoding=2, sampling_rate=8000, channel=1
    fout.write('.snd' + pack('&gt;5L', 24, 8*dur, 2, 8000, 1))
    factor = 2 * pi * freq/8000
    factor1 = 2 * pi * freq1/8000
    # write data
    for seg in range(8 * dur):
        # sine wave calculations
        sin_seg = sin(seg * factor) + sin(seg * factor1)
        fout.write(pack('b', vol * 64 * sin_seg))
    fout.close()

t = time.strftime("%S", time.localtime())
ti = time.strftime("%M", time.localtime())
tis = float(t)
tis = tis * 100
tim = float(ti)
tim = tim * 100

if __name__ == '__main__':
    au_file(name='timeSound2.au', freq=tim, freq1=tis, dur=1000, vol=1.0)

    import os
    os.startfile('timeSound2.au')
</snippet></ROW><ROW><id>2572821</id><snippet>  my $handshake = bencode { 
    identity =&gt; '', client =&gt; '', ... }; # All fields from AZHandshake.java

  # send handshake to seeder and get a response
  my $handshake_response = ...

  my $dictionary = bdecode $handshake_response;

  print join "\n", @{$dictionary-&gt;{messages}}, "\n";
</snippet></ROW><ROW><id>2572905</id><snippet>setdefault</snippet></ROW><ROW><id>2572905</id><snippet>cache.setdefault(akey, f(x, y))
</snippet></ROW><ROW><id>2572905</id><snippet>f(x, y)</snippet></ROW><ROW><id>2572905</id><snippet>akey = whatever(x, y)
if akey not in cache:
    cache[akey] = f(x, y)
return cache[akey]
</snippet></ROW><ROW><id>2572905</id><snippet>f</snippet></ROW><ROW><id>2572905</id><snippet>None</snippet></ROW><ROW><id>2572905</id><snippet>result = cache.get(akey)
if result is None:
    result = cache[akey] = f(x, y)
return result
</snippet></ROW><ROW><id>2572905</id><snippet>whatever</snippet></ROW><ROW><id>2572905</id><snippet>f</snippet></ROW><ROW><id>2572905</id><snippet>frozenset</snippet></ROW><ROW><id>2572905</id><snippet>x</snippet></ROW><ROW><id>2572905</id><snippet>y</snippet></ROW><ROW><id>2572905</id><snippet>ta1 = tuple(a1)
ta2 = tuple(a2)
if ta1 &gt; ta2: key = ta1, ta2
else: key = ta2, ta1
</snippet></ROW><ROW><id>2572905</id><snippet>a1</snippet></ROW><ROW><id>2572905</id><snippet>a2</snippet></ROW><ROW><id>2573067</id><snippet>static</snippet></ROW><ROW><id>2573067</id><snippet>PyObject*</snippet></ROW><ROW><id>2573067</id><snippet>static</snippet></ROW><ROW><id>2573536</id><snippet>ll_mat</snippet></ROW><ROW><id>2573536</id><snippet>x = spmatrix.ll_mat(10, 10)
class ll_mat(type(x)): ...
</snippet></ROW><ROW><id>2573536</id><snippet>class ll_mat(object):
    def __init__(self, *a, **k):
        self.m = spmatrix.ll_mat(*a, **k)
        ...
    def __getattr__(self, n):
        return getattr(self.m, n)
</snippet></ROW><ROW><id>2573689</id><snippet>index.html</snippet></ROW><ROW><id>2573689</id><snippet>list_directory</snippet></ROW><ROW><id>2573689</id><snippet>zip</snippet></ROW><ROW><id>2573689</id><snippet>send_head</snippet></ROW><ROW><id>2573689</id><snippet>list_directory</snippet></ROW><ROW><id>2573689</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>2573711</id><snippet>&gt;&gt;&gt; for line in open("file"):
...     if "|" in line:
...         whatiwant_1=line.split("|")[1]
...         if "[" in line:
...             whatiwant_2=line.split("[")[1].split("]")[0]
...
&gt;&gt;&gt; print whatiwant_1 , whatiwant_2
ZP_01631227.1 Nodularia spumigena CCY9414
</snippet></ROW><ROW><id>2573715</id><snippet>info['pieces']</snippet></ROW><ROW><id>2573715</id><snippet>torrent_file = open(sys.argv[1], "rb")
metainfo = bencode.bdecode(torrent_file.read())
info = metainfo['info']
pieces = StringIO.StringIO(info['pieces'])
</snippet></ROW><ROW><id>2573715</id><snippet>pieces_generator()</snippet></ROW><ROW><id>2573715</id><snippet>import sys, os, hashlib, StringIO, bencode

def pieces_generator(info):
    """Yield pieces from download file(s)."""
    piece_length = info['piece length']
    if 'files' in info: # yield pieces from a multi-file torrent
        piece = ""
        for file_info in info['files']:
            path = os.sep.join([info['name']] + file_info['path'])
            print path
            sfile = open(path.decode('UTF-8'), "rb")
            while True:
                piece += sfile.read(piece_length-len(piece))
                if len(piece) != piece_length:
                    sfile.close()
                    break
                yield piece
                piece = ""
        if piece != "":
            yield piece
    else: # yield pieces from a single file torrent
        path = info['name']
        print path
        sfile = open(path.decode('UTF-8'), "rb")
        while True:
            piece = sfile.read(piece_length)
            if not piece:
                sfile.close()
                return
            yield piece

def corruption_failure():
    """Display error message and exit"""
    print("download corrupted")
    exit(1)

def main():
    # Open torrent file
    torrent_file = open(sys.argv[1], "rb")
    metainfo = bencode.bdecode(torrent_file.read())
    info = metainfo['info']
    pieces = StringIO.StringIO(info['pieces'])
    # Iterate through pieces
    for piece in pieces_generator(info):
        # Compare piece hash with expected hash
        piece_hash = hashlib.sha1(piece).digest()
        if (piece_hash != pieces.read(20)):
            corruption_failure()
    # ensure we've read all pieces 
    if pieces.read():
        corruption_failure()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>2573814</id><snippet>/home/user/project/static/upload/images/hello%23world.jpg
</snippet></ROW><ROW><id>2573982</id><snippet>def symmetrize(a):
    return a + a.T - numpy.diag(a.diagonal())
</snippet></ROW><ROW><id>2573982</id><snippet>a[0, 1] = 42</snippet></ROW><ROW><id>2573982</id><snippet>a[1, 0] = 123</snippet></ROW><ROW><id>2573982</id><snippet>symmetrize</snippet></ROW><ROW><id>2573982</id><snippet>__setitem__</snippet></ROW><ROW><id>2573982</id><snippet>class SymNDArray(numpy.ndarray):
    def __setitem__(self, (i, j), value):
        super(SymNDArray, self).__setitem__((i, j), value)                    
        super(SymNDArray, self).__setitem__((j, i), value)                    

def symarray(input_array):
    """
    Returns a symmetrized version of the array-like input_array.
    Further assignments to the array are automatically symmetrized.
    """
    return symmetrize(numpy.asarray(input_array)).view(SymNDArray)

# Example:
a = symarray(numpy.zeros((3, 3)))
a[0, 1] = 42
print a  # a[1, 0] == 42 too!
</snippet></ROW><ROW><id>2573982</id><snippet>a[:, 1] = -1</snippet></ROW><ROW><id>2573982</id><snippet>a[1, :]</snippet></ROW><ROW><id>2573982</id><snippet>def …(…, (i, j),…)</snippet></ROW><ROW><id>2573982</id><snippet>def __setitem__(self, indexes, value): (i, j) = indexes</snippet></ROW><ROW><id>2574090</id><snippet>versions_list.sort(key=lambda s: map(int, s.split('.')))
</snippet></ROW><ROW><id>2574090</id><snippet> ['1.0.0', '1.0.2', '1.0.12', '1.1.2', '1.3.3']
</snippet></ROW><ROW><id>2574309</id><snippet>get_db_prep_value</snippet></ROW><ROW><id>2574550</id><snippet>filesizeformat</snippet></ROW><ROW><id>2574550</id><snippet>{% for page in pages %}
    &lt;li&gt;page.name {{page.size|filesizeformat}}&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>2574550</id><snippet>pages</snippet></ROW><ROW><id>2574550</id><snippet>[{'name': 'page1', 'size': 10000}, {'name': 'page2', 'size': 5023034}]
</snippet></ROW><ROW><id>2574650</id><snippet>try:
    b = a[4]
except IndexError:
    b = 'sss'
</snippet></ROW><ROW><id>2574727</id><snippet>text|is_spam
hi bob! how are you?|0
what time are you coming over|0
how to buy viagra now!|1
</snippet></ROW><ROW><id>2574897</id><snippet>event = wx.PyEvent()
</snippet></ROW><ROW><id>2574897</id><snippet>PyEvent</snippet></ROW><ROW><id>2574897</id><snippet>PyEvent</snippet></ROW><ROW><id>2574897</id><snippet>class Frame(wx.Frame):
    def __init__(self, parent=None):
        wx.Frame.__init__(self, parent)
        self.Bind(wx.EVT_COLOURPICKER_CHANGED, self.on_event)
        self.Centre()
        self.Show(True)
        self.i = 0
        self.recalculating = False
        self.event_all()

    def on_event(self, event):
        self.recalculating = False
        print self.i
        self.i += 1

    def event_all(self):
        for j in range(1000):
            if not self.recalculating:
                event = wx.PyEvent()
                event.SetEventType(wx.EVT_COLOURPICKER_CHANGED.evtType[0])
                wx.PostEvent(self, event)
                self.recalculating = True
</snippet></ROW><ROW><id>2575016</id><snippet>columns</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>from sqlalchemy import Table, Column, Integer, Unicode, MetaData, create_engine
from sqlalchemy.orm import mapper, create_session

class Word(object):
    pass

wordColumns = ['english', 'korean', 'romanian']
e = create_engine('sqlite://')
metadata = MetaData(bind=e)

t = Table('words', metadata, Column('id', Integer, primary_key=True),
    *(Column(wordCol, Unicode(255)) for wordCol in wordColumns))
metadata.create_all()
mapper(Word, t)
session = create_session(bind=e, autocommit=False, autoflush=True)
</snippet></ROW><ROW><id>2575016</id><snippet>w = Word()
w.english = u'name'
w.korean = u'이름'
w.romanian = u'nume'

session.add(w)
session.commit()
</snippet></ROW><ROW><id>2575016</id><snippet>w = session.query(Word).filter_by(english=u'name').one()
print w.romanian
</snippet></ROW><ROW><id>2575016</id><snippet>sqlalchemy</snippet></ROW><ROW><id>2575016</id><snippet>tuple</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>getattr</snippet></ROW><ROW><id>2575016</id><snippet>setattr</snippet></ROW><ROW><id>2575016</id><snippet>language = 'korean'
print getattr(w, language)
</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>Word</snippet></ROW><ROW><id>2575016</id><snippet>class Word(object):
    def __getitem__(self, item): 
        return getattr(self, item)
    def __setitem__(self, item, value):
        return setattr(self, item, value)
</snippet></ROW><ROW><id>2575016</id><snippet>w = Word()
w['english'] = u'name'
</snippet></ROW><ROW><id>2575016</id><snippet>columns</snippet></ROW><ROW><id>2575016</id><snippet>dict</snippet></ROW><ROW><id>2575016</id><snippet>class AttributeDict(DictMixin):
    def __init__(self, obj):
        self._obj = obj
    def __getitem__(self, item):
        return getattr(self._obj, item)
    def __setitem__(self, item, value):
        return setattr(self._obj, item, value)

class Word(object):
    def __init__(self):
        self.columns = AttributeDict(self)
</snippet></ROW><ROW><id>2575016</id><snippet>w = Word()
w.columns['english'] = u'name' 
</snippet></ROW><ROW><id>2575105</id><snippet>memcache.add</snippet></ROW><ROW><id>2575105</id><snippet>memcache.set</snippet></ROW><ROW><id>2575105</id><snippet>memcache</snippet></ROW><ROW><id>2575517</id><snippet>m[0]</snippet></ROW><ROW><id>2575517</id><snippet>m[1]</snippet></ROW><ROW><id>2575517</id><snippet>members = {}
for m in elem.text.split(' '):
    key, value = m.split(':')
    members[key.replace("'", '')] = map(int, value.split(','))
    return members
</snippet></ROW><ROW><id>2575593</id><snippet>print
</snippet></ROW><ROW><id>2575708</id><snippet>file</snippet></ROW><ROW><id>2575708</id><snippet>writeln()</snippet></ROW><ROW><id>2575708</id><snippet>read()</snippet></ROW><ROW><id>2575708</id><snippet>write()</snippet></ROW><ROW><id>2575708</id><snippet>readlines()</snippet></ROW><ROW><id>2575708</id><snippet>writelines()</snippet></ROW><ROW><id>2575708</id><snippet>readline()</snippet></ROW><ROW><id>2575708</id><snippet>size</snippet></ROW><ROW><id>2575708</id><snippet>writeline()</snippet></ROW><ROW><id>2575708</id><snippet>writeln()</snippet></ROW><ROW><id>2575708</id><snippet>write()</snippet></ROW><ROW><id>2575708</id><snippet>writelines()</snippet></ROW><ROW><id>2575708</id><snippet>print</snippet></ROW><ROW><id>2575708</id><snippet>file</snippet></ROW><ROW><id>2575708</id><snippet>print()</snippet></ROW><ROW><id>2575708</id><snippet>print &gt;&gt;file, ...</snippet></ROW><ROW><id>2575708</id><snippet>file.write('...\n')</snippet></ROW><ROW><id>2575779</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.gethostbyaddr("69.59.196.211")
('stackoverflow.com', ['211.196.59.69.in-addr.arpa'], ['69.59.196.211'])
</snippet></ROW><ROW><id>2575786</id><snippet>xml</snippet></ROW><ROW><id>2575786</id><snippet>import xml.etree.ElementTree as xee
contents='''\
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Ip&gt;74.125.45.100&lt;/Ip&gt;
  &lt;Status&gt;OK&lt;/Status&gt;
  &lt;CountryCode&gt;US&lt;/CountryCode&gt;
  &lt;CountryName&gt;United States&lt;/CountryName&gt;
  &lt;RegionCode&gt;06&lt;/RegionCode&gt;
  &lt;RegionName&gt;California&lt;/RegionName&gt;
  &lt;City&gt;Mountain View&lt;/City&gt;
  &lt;ZipPostalCode&gt;94043&lt;/ZipPostalCode&gt;
  &lt;Latitude&gt;37.4192&lt;/Latitude&gt;
  &lt;Longitude&gt;-122.057&lt;/Longitude&gt;
  &lt;TimezoneName&gt;America/Los_Angeles&lt;/TimezoneName&gt;
  &lt;Gmtoffset&gt;-25200&lt;/Gmtoffset&gt;
  &lt;Isdst&gt;1&lt;/Isdst&gt;
&lt;/Response&gt;'''

doc=xee.fromstring(contents)
print dict(((elt.tag,elt.text) for elt in doc))
</snippet></ROW><ROW><id>2575786</id><snippet>lxml</snippet></ROW><ROW><id>2575786</id><snippet>import lxml.etree
import urllib2
url='http://ipinfodb.com/ip_query.php?ip=74.125.45.100&amp;timezone=true'
doc = lxml.etree.parse( urllib2.urlopen(url) ).getroot()
print dict(((elt.tag,elt.text) for elt in doc))
</snippet></ROW><ROW><id>2575829</id><snippet>{% url testapp.views.test n1=5,n2=2 %}
</snippet></ROW><ROW><id>2575926</id><snippet>import sys
sys.path.append ('/path/to/the/project')
from django.core.management import setup_environ
import settings
setup_environ(settings)

from app.models import MyModel
</snippet></ROW><ROW><id>2575999</id><snippet>__doc__</snippet></ROW><ROW><id>2575999</id><snippet>def fixdocstring(func):
    func.__doc__ = func.__doc__.replace('&lt;arg_a&gt;', 'a: a very common argument')
    #(This is just an example, other string formatting methods can be used as well.)
    return func

@fixdocstring
def test(a):
    '''
    Arguments:
    &lt;arg_a&gt;
    ''''
    pass
</snippet></ROW><ROW><id>2576084</id><snippet>import curses

def fillwin(w, c):
    y, x = w.getmaxyx()
    s = c * (x - 1)
    for l in range(y):
        w.addstr(l, 0, s)

def main(stdscr):
    fillwin(stdscr, 'S')
    stdscr.refresh()
    stdscr.getch()

    newwin=curses.newwin(10,20,5,5)
    fillwin(newwin, 'w')
    newwin.touchwin()
    newwin.refresh()
    newwin.getch()
    del newwin

    stdscr.touchwin()
    stdscr.refresh()
    stdscr.getch()

curses.wrapper(main)
</snippet></ROW><ROW><id>2576149</id><snippet>[:]</snippet></ROW><ROW><id>2576149</id><snippet>array = self.Array[:]
</snippet></ROW><ROW><id>2576149</id><snippet>array = copy.deepcopy(self.Array)
</snippet></ROW><ROW><id>2576149</id><snippet>import copy</snippet></ROW><ROW><id>2576153</id><snippet>def foo(text):
    writeResults(line, result)
</snippet></ROW><ROW><id>2576153</id><snippet>foo</snippet></ROW><ROW><id>2576153</id><snippet>line</snippet></ROW><ROW><id>2576153</id><snippet>for line in file:</snippet></ROW><ROW><id>2576153</id><snippet>line</snippet></ROW><ROW><id>2576153</id><snippet>writeResults</snippet></ROW><ROW><id>2576153</id><snippet>line</snippet></ROW><ROW><id>2576276</id><snippet>pprint</snippet></ROW><ROW><id>2576276</id><snippet>data = json.load(...)
pprint.pprint(data)
</snippet></ROW><ROW><id>2576633</id><snippet>def set_cursor(path, focus_column=None, start_editing=False)
</snippet></ROW><ROW><id>2576633</id><snippet>gtk.Widget.grab_focus()</snippet></ROW><ROW><id>2576847</id><snippet>x is y</snippet></ROW><ROW><id>2576847</id><snippet>x == y</snippet></ROW><ROW><id>2576847</id><snippet>x is y</snippet></ROW><ROW><id>2576847</id><snippet>id(x) == id(y)</snippet></ROW><ROW><id>2576847</id><snippet>x</snippet></ROW><ROW><id>2576847</id><snippet>y</snippet></ROW><ROW><id>2576847</id><snippet>id</snippet></ROW><ROW><id>2576847</id><snippet>x is y</snippet></ROW><ROW><id>2576847</id><snippet>x == y</snippet></ROW><ROW><id>2576847</id><snippet>x == y</snippet></ROW><ROW><id>2576847</id><snippet>x.__eq__(y)</snippet></ROW><ROW><id>2576847</id><snippet>x</snippet></ROW><ROW><id>2576847</id><snippet>__eq__</snippet></ROW><ROW><id>2576847</id><snippet>x == y</snippet></ROW><ROW><id>2576847</id><snippet>x is y</snippet></ROW><ROW><id>2576847</id><snippet>x is y</snippet></ROW><ROW><id>2576847</id><snippet>x == y</snippet></ROW><ROW><id>2576847</id><snippet>In [1]: 0 is False
Out[1]: False

In [2]: 0 == False
Out[2]: True
</snippet></ROW><ROW><id>2576847</id><snippet>if x is y:
    return True
else:
    return False
</snippet></ROW><ROW><id>2576847</id><snippet>return x is y
</snippet></ROW><ROW><id>2576847</id><snippet>if x == y:
    return True
else:
    return False
</snippet></ROW><ROW><id>2576847</id><snippet>return x == y
</snippet></ROW><ROW><id>2576900</id><snippet>import time

cache = {}
lastTime = time.time()

def timedCacheDecorator(func):

    def wrap(*args, **kwargs):

        key = str(args)+str(kwargs)

        # cache for 5 seconds
        global lastTime
        if key not in cache or time.time() - lastTime &gt; 5:
            lastTime = time.time()
            cache[key] = func(*args, **kwargs)

        return cache[key]

    return wrap


# lets test it

@timedCacheDecorator
def myquery():
    return time.time()

print myquery()
time.sleep(1)
print myquery()
time.sleep(5)
print myquery()
time.sleep(1)
print myquery()
</snippet></ROW><ROW><id>2576900</id><snippet>1270441034.58
1270441034.58
1270441040.58
1270441040.58
</snippet></ROW><ROW><id>2577088</id><snippet>import web
from md5 import md5

urls = (
    '/(.*)', 'digest' 
)

app = web.application(urls, globals())

class digest:        
    def GET(self):
        return md5("Nobody inspects the spammish repetition").hexdigest()

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>2577254</id><snippet>def get_mem(servername, q):
    res = os.popen('ssh %s "grep MemFree /proc/meminfo | sed \'s/[^0-9]//g\'"' % servername)
    q.put(res.read().strip())

# ...

import threading, queue
q = queue.Queue()
threading.Thread(target=get_mem, args=("server01", q)).start()
result = q.get()
</snippet></ROW><ROW><id>2577260</id><snippet>QuerySet</snippet></ROW><ROW><id>2577487</id><snippet>def bits(f):
    bytes = (ord(b) for b in f.read())
    for b in bytes:
        for i in xrange(8):
            yield (b &gt;&gt; i) &amp; 1

for b in bits(open('binary-file.bin', 'r')):
    print b
</snippet></ROW><ROW><id>2577615</id><snippet>class ClassDict(object):
  def __init__(self):
    self.classes = {}

  def add(self, cls):
    self.classes[cls.__name__] = cls

  def remove(self, cls):
    if self.classes[cls.__name__] == cls:
      del self.classes[cls.__name__]
    else:
      raise KeyError('%r' % cls)

  def __getitem__(self, key):
    return self.classes[key]

  def __repr__(self):
    return 'ClassDict(%s)' % (', '.join(self.classes),)

class C(object):
  pass

class D(object):
  pass

cd = ClassDict()
cd.add(C)
cd.add(D)

print cd

print cd['C']
</snippet></ROW><ROW><id>2577715</id><snippet># open for reading first since we need to get the text out
f = open('kk.txt','r')
# step 1
data = f.read()
# step 2
data = data.replace("hola", "hello")
f.close()
# *now* open for writing
f = open('kk.txt', 'w')
# step 3
f.write(data)
f.close()
</snippet></ROW><ROW><id>2578059</id><snippet>os.walk</snippet></ROW><ROW><id>2578059</id><snippet>import re
import os
from __future__ import with_statement

PATH = "/home/tirengarfio/Desktop/pruebaba"

for path, dirs, files in os.walk(PATH):
    for filename in files:
        fullpath = os.path.join(path, filename)
        with open(fullpath, 'r') as f:
            data = re.sub(r'(\s*function\s+.*\s*{\s*)',
                r'\1echo "The function starts here."',
                f.read())
        with open(fullpath, 'w') as f:
            f.write(data)
</snippet></ROW><ROW><id>2578109</id><snippet>gc</snippet></ROW><ROW><id>2578109</id><snippet>ref = None</snippet></ROW><ROW><id>2578109</id><snippet>__del__</snippet></ROW><ROW><id>2578109</id><snippet>def __init__(self):
    self.myself = self
</snippet></ROW><ROW><id>2578109</id><snippet>__del__</snippet></ROW><ROW><id>2578566</id><snippet>from urllib import urlopen
try:
    urlopen(path)
except IOError:
    pass # does not exist
else:
    pass # does exist
</snippet></ROW><ROW><id>2578566</id><snippet>import os
os.path.isdir(path)
</snippet></ROW><ROW><id>2578836</id><snippet>modernthingy = datetime.datetime.fromtimestamp(zopethingy.timeTime())
</snippet></ROW><ROW><id>2578836</id><snippet>datetime</snippet></ROW><ROW><id>2578836</id><snippet>DateTime</snippet></ROW><ROW><id>2578873</id><snippet>masked_array = np.ma.array (a, mask=np.isnan(a))
cmap = matplotlib.cm.jet
cmap.set_bad('w',1.)
ax.imshow(masked_array, interpolation='nearest', cmap=cmap)
</snippet></ROW><ROW><id>2579036</id><snippet>key = elem.findtext(colName)
</snippet></ROW><ROW><id>2579036</id><snippet>colName</snippet></ROW><ROW><id>2579036</id><snippet>findtext</snippet></ROW><ROW><id>2579036</id><snippet>title</snippet></ROW><ROW><id>2579036</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>2579036</id><snippet>for ana in elem.findall('a'):
    key = ana.get('title')
    if key is not None: break
</snippet></ROW><ROW><id>2579920</id><snippet>Movies
MovieID   int auto increment/identity PK
MovieTitle
MovieDescription
etc...

Actors
ActorID  int auto increment/identity PK
ActorName
DateOfBirth
etc...

MovieActors
MovieID      PK  and FK
ActorID      PK  and FK
RoleName
etc...
</snippet></ROW><ROW><id>2579973</id><snippet>(port == "443" and "https://") or "http://"
</snippet></ROW><ROW><id>2579973</id><snippet>x and y</snippet></ROW><ROW><id>2579973</id><snippet>y</snippet></ROW><ROW><id>2579973</id><snippet>x</snippet></ROW><ROW><id>2579973</id><snippet>x</snippet></ROW><ROW><id>2579973</id><snippet>x</snippet></ROW><ROW><id>2579973</id><snippet>a or b</snippet></ROW><ROW><id>2579973</id><snippet>a</snippet></ROW><ROW><id>2579973</id><snippet>b</snippet></ROW><ROW><id>2579973</id><snippet>port == "443"</snippet></ROW><ROW><id>2579973</id><snippet>and</snippet></ROW><ROW><id>2579973</id><snippet>"https://"</snippet></ROW><ROW><id>2579973</id><snippet>and</snippet></ROW><ROW><id>2579973</id><snippet>or</snippet></ROW><ROW><id>2579973</id><snippet>"https://" if port == "443" else "http://"
</snippet></ROW><ROW><id>2580007</id><snippet>$ sudo python setup.py install --with-libmemcached=/path/to/libmemcached-0.38
(lots of output)
$ python -m pylibmc -v
</snippet></ROW><ROW><id>2580056</id><snippet>def method(self, arg1=0, arg2=None):
    if arg2 is None:
        arg2 = self.member
    ...
</snippet></ROW><ROW><id>2580142</id><snippet>and</snippet></ROW><ROW><id>2580142</id><snippet>or</snippet></ROW><ROW><id>2580532</id><snippet>NavigableString</snippet></ROW><ROW><id>2580532</id><snippet>from BeautifulSoup import BeautifulSoup
import re

soup = BeautifulSoup('&lt;html&gt;&lt;p&gt;foo&lt;/p&gt;&lt;/html&gt;')

r = soup.findAll('p', text=re.compile('foo'))

print r[0].parent
</snippet></ROW><ROW><id>2580532</id><snippet>&lt;p&gt;foo&lt;/p&gt;
</snippet></ROW><ROW><id>2580543</id><snippet>sqlite3</snippet></ROW><ROW><id>2580543</id><snippet>from sqlalchemy import create_engine, Column, String, Integer, MetaData, Table
from sqlalchemy.orm import mapper, create_session
import csv
CSV_FILE = 'foo.csv'
engine = create_engine('sqlite://') # memory-only database

table = None
metadata = MetaData(bind=engine)
with open(CSV_FILE) as f:
    # assume first line is header
    cf = csv.DictReader(f, delimiter=',')
    for row in cf:
        if table is None:
            # create the table
            table = Table('foo', metadata, 
                Column('id', Integer, primary_key=True),
                *(Column(rowname, String()) for rowname in row.keys()))
            table.create()
        # insert data into the table
        table.insert().values(**row).execute()

class CsvTable(object): pass
mapper(CsvTable, table)
session = create_session(bind=engine, autocommit=False, autoflush=True)
</snippet></ROW><ROW><id>2580543</id><snippet>name,age,nickname
nosklo,32,nosklo
Afila Tun,32,afilatun
Foo Bar,33,baz
</snippet></ROW><ROW><id>2580543</id><snippet>name</snippet></ROW><ROW><id>2580543</id><snippet>age</snippet></ROW><ROW><id>2580543</id><snippet>nickname</snippet></ROW><ROW><id>2580543</id><snippet>for r in session.query(CsvTable).filter(CsvTable.age == '32'):
    print r.name, r.age, r.nickname
</snippet></ROW><ROW><id>2580543</id><snippet>SELECT</snippet></ROW><ROW><id>2580618</id><snippet>if len(self.cards)&gt;=7*(len(hands)):
</snippet></ROW><ROW><id>2580618</id><snippet>    if len(self.cards) &lt;= 7*(len(hands)):
            print "Reshuffling the deck."
            self.cards=[]
            self.populate()
            self.shuffle()
    for rounds in range(per_hand):
        for hand in hands:
                top_card=self.cards[0]
                self.give(top_card, hand)
</snippet></ROW><ROW><id>2580707</id><snippet>r"""(?:/{0,2}\**\s?todo):?\s*(?P&lt;todo&gt;.+)"""
</snippet></ROW><ROW><id>2580707</id><snippet>'todo'</snippet></ROW><ROW><id>2580707</id><snippet>r"""//\todo      stuff to fix"""
</snippet></ROW><ROW><id>2580707</id><snippet>'todo'</snippet></ROW><ROW><id>2580707</id><snippet>'t'</snippet></ROW><ROW><id>2580707</id><snippet>r"""(?:/{0,2}\**\s?\\?todo):?\s*(?P&lt;todo&gt;.+)"""
</snippet></ROW><ROW><id>2580768</id><snippet>__init__</snippet></ROW><ROW><id>2580768</id><snippet>TestCase</snippet></ROW><ROW><id>2580768</id><snippet>setUp</snippet></ROW><ROW><id>2580768</id><snippet>tearDown</snippet></ROW><ROW><id>2580768</id><snippet>fixtures=</snippet></ROW><ROW><id>2580768</id><snippet>setUp</snippet></ROW><ROW><id>2580768</id><snippet>save</snippet></ROW><ROW><id>2580768</id><snippet>setUp</snippet></ROW><ROW><id>2580813</id><snippet>setUp()</snippet></ROW><ROW><id>2580813</id><snippet>__init__</snippet></ROW><ROW><id>2580813</id><snippet>tearDown()</snippet></ROW><ROW><id>2580836</id><snippet>for char in sys.argv[1].lower():
  print nato.get(char, char) # try to get nato[char] otherwise return char
</snippet></ROW><ROW><id>2581032</id><snippet>import re


newstring = re.sub("\[%.*?%\]",newtext,oldstring)
</snippet></ROW><ROW><id>2581040</id><snippet>attrs</snippet></ROW><ROW><id>2581040</id><snippet>class CommentForm(forms.Form):
    name = forms.CharField(
                widget=forms.TextInput(attrs={'class':'special'}))
    url = forms.URLField()
    comment = forms.CharField(
               widget=forms.TextInput(attrs={'size':'40'}))
</snippet></ROW><ROW><id>2581040</id><snippet>'autocomplete'='off'</snippet></ROW><ROW><id>2581571</id><snippet>def _get_content(editor, initial=""):
    from subprocess import call
    from tempfile import NamedTemporaryFile

    # Create the initial temporary file.
    with NamedTemporaryFile(delete=False) as tf:
        tfName = tf.name
        tf.write(initial)

    # Fire up the editor.
    if call([editor, tfName]) != 0:
        return None # Editor died or was killed.

    # Get the modified content.
    with open(tfName).readlines() as result:
        os.remove(tfName)
        return result
</snippet></ROW><ROW><id>2581891</id><snippet>... existing stuff

import django.core.handlers.wsgi
_application = django.core.handlers.wsgi.WSGIHandler()

def application(environ, start_response):
    # Wrapper to clear SCRIPT_NAME..
    environ['SCRIPT_NAME'] = ''
    return _application(environ, start_response)
</snippet></ROW><ROW><id>2581943</id><snippet>import threading
import subprocess

def popenAndCall(onExit, popenArgs):
    """
    Runs the given args in a subprocess.Popen, and then calls the function
    onExit when the subprocess completes.
    onExit is a callable object, and popenArgs is a list/tuple of args that 
    would give to subprocess.Popen.
    """
    def runInThread(onExit, popenArgs):
        proc = subprocess.Popen(*popenArgs)
        proc.wait()
        onExit()
        return
    thread = threading.Thread(target=runInThread, args=(onExit, popenArgs))
    thread.start()
    # returns immediately after the thread starts
    return thread
</snippet></ROW><ROW><id>2581943</id><snippet>threading.Thread</snippet></ROW><ROW><id>2581943</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>2582004</id><snippet>return</snippet></ROW><ROW><id>2582004</id><snippet>l</snippet></ROW><ROW><id>2582004</id><snippet>p</snippet></ROW><ROW><id>2582004</id><snippet>p</snippet></ROW><ROW><id>2582004</id><snippet>perm</snippet></ROW><ROW><id>2582004</id><snippet>l</snippet></ROW><ROW><id>2582004</id><snippet>return</snippet></ROW><ROW><id>2582004</id><snippet>result = []
for i in range(sz):
  for p in perm(l[1:]):
    result.append(p[:i]+[l[0]]+p[i:])
return result
</snippet></ROW><ROW><id>2582004</id><snippet>perm</snippet></ROW><ROW><id>2582004</id><snippet>sz</snippet></ROW><ROW><id>2582004</id><snippet>for</snippet></ROW><ROW><id>2582004</id><snippet>result = []
for p in perm(l[1:]):
  for i in range(sz):
    result.append(p[:i]+[l[0]]+p[i:])
return result
</snippet></ROW><ROW><id>2582004</id><snippet>for</snippet></ROW><ROW><id>2582004</id><snippet>return [p[:i]+[l[0]]+p[i:] for p in perm(l[1:]) for i in range(sz)]
</snippet></ROW><ROW><id>2582183</id><snippet>&gt;&gt;&gt; a=[1,2,3,4,5,1,2,3,4,5,1]
&gt;&gt;&gt; for n,i in enumerate(a):
...   if i==1:
...      a[n]=10
...
&gt;&gt;&gt; a
[10, 2, 3, 4, 5, 10, 2, 3, 4, 5, 10]
</snippet></ROW><ROW><id>2582299</id><snippet>def unpack_args(func):
    def deco_func(*args):
        if isinstance(args, tuple):
            args = args[0]

        return func(*args)

    return deco_func


def func1(*args):
    return args

def func2(*args):
    return args

@unpack_args
def func3(*args):
    return args

print func1(1,2,3)    # &gt; (1,2,3)
print func2(1,2,3)    # &gt; (1,2,3)
print func1(*func2(1,2,3))    # &gt; (1,2,3)
print func1(func2(1,2,3))    # &gt; ( (1,2,3), )
print func3(func2(1,2,3))   # &gt; (1,2,3)
</snippet></ROW><ROW><id>2582504</id><snippet>find /System/Library/Frameworks/Python.framework/Versions/2.6/ -name "*.so"

/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.0.0.0.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.0.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/X11/xcb/xcb.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/CoreGraphics/_CoreGraphics.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/SSL.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/crypto.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/OpenSSL/rand.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_appmain.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_carbon.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_inlines.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsbezierpath.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsbitmap.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsfont.so
 /System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsquickdrawview.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nsview.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/AppKit/_nswindow.so
/System/Library/Frameworks/Python.framework/Versions/2.6//Extras/lib/python/PyObjC/CFNetwork/_manual.so
</snippet></ROW><ROW><id>2582592</id><snippet>br.select_form(nr=0)
</snippet></ROW><ROW><id>2582592</id><snippet>def select_form(self, name=None, predicate=None, &lt;b&gt;nr=None&lt;/b&gt;):
    """
    ...
    nr, if supplied, is the sequence number of the form (where 0 is the
    first).
    """
</snippet></ROW><ROW><id>2582826</id><snippet>value = func_returning_a_tuple()[0]</snippet></ROW><ROW><id>2582847</id><snippet>"get all users who work for departement x"</snippet></ROW><ROW><id>2582847</id><snippet>"get all sales from user x"</snippet></ROW><ROW><id>2582884</id><snippet>class Alien(object):
    def __init__(self):
        self.health = 5
    def do_damage(self, amount):
        self.health -= amount
</snippet></ROW><ROW><id>2582917</id><snippet>if set(a) &lt;= set(b):
    print "a is in b"
</snippet></ROW><ROW><id>2583774</id><snippet>import wx

app = None

class Size(wx.Frame):
    def __init__(self, parent, id, title):
        frame = wx.Frame.__init__(self, parent, id, title, size=(250, 200))
        w, h = 100, 100
        bmp = wx.EmptyBitmap(w, h)
        dc = wx.MemoryDC()
        dc.SelectObject(bmp)
        dc.Clear()
        text = "whatever"
        tw, th = dc.GetTextExtent(text)
        dc.DrawText(text, (w-tw)/2,  (h-th)/2)
        dc.SelectObject(wx.NullBitmap)
        wx.StaticBitmap(self, -1, bmp)
        self.Show(True)


app = wx.App()
app.MainLoop()
</snippet></ROW><ROW><id>2583775</id><snippet>from django_cron import cronScheduler, Job
class sendMail(Job):
       # period run every 300 seconds (5 minutes)
        run_every = 300

        def job(self):
                # This will be executed every 5 minutes
                datatuple = check_subscription_finishing()
                send_mass_mail(datatuple)
//and just register it             
cronScheduler.register(sendMail)
</snippet></ROW><ROW><id>2584474</id><snippet>from glob import iglob
from shutil import copy
from os.path import join

def copy_files(src_glob, dst_folder):
    for fname in iglob(src_glob):
        copy(fname, join(dst_folder, fname))

if __name__=='__main__':
    copy_files("123*.xml", "out_folder")
</snippet></ROW><ROW><id>2585065</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>2585065</id><snippet>from BeautifulSoup import BeautifulSoup
def removeTag(soup, tagname):
    for tag in soup.findAll(tagname):
        contents = tag.contents
        parent = tag.parent
        tag.extract()

s = BeautifulSoup("abcd &lt;b&gt; btag &lt;/b&gt; hello &lt;d&gt;dtag&lt;/d&gt;")

removeTag(s,"b")
print s
removeTag(s, "d")
print s
</snippet></ROW><ROW><id>2585065</id><snippet>&gt;&gt;&gt;
abcd  hello &lt;d&gt;dtag&lt;/d&gt;
abcd  hello
</snippet></ROW><ROW><id>2585406</id><snippet>C-c &gt;</snippet></ROW><ROW><id>2585406</id><snippet>C-c &lt;</snippet></ROW><ROW><id>2585406</id><snippet>C-u 8 C-c &gt;</snippet></ROW><ROW><id>2585406</id><snippet>C-u 8 C-c &lt;</snippet></ROW><ROW><id>2585406</id><snippet>M-x indent-rigidly</snippet></ROW><ROW><id>2585406</id><snippet>C-x TAB</snippet></ROW><ROW><id>2585406</id><snippet>C-u 8 C-x TAB</snippet></ROW><ROW><id>2585406</id><snippet>C-u -8 C-x TAB</snippet></ROW><ROW><id>2585406</id><snippet>C-x r o</snippet></ROW><ROW><id>2585406</id><snippet>C-x r k</snippet></ROW><ROW><id>2585406</id><snippet>C-x r t</snippet></ROW><ROW><id>2585406</id><snippet>C-u 8 &lt;space&gt;</snippet></ROW><ROW><id>2585406</id><snippet>python-mode</snippet></ROW><ROW><id>2585834</id><snippet>freqDict</snippet></ROW><ROW><id>2585834</id><snippet>freqDict</snippet></ROW><ROW><id>2585845</id><snippet>server_thread</snippet></ROW><ROW><id>2585845</id><snippet>server_thread.daemon = True
</snippet></ROW><ROW><id>2585845</id><snippet>server_thread.start()</snippet></ROW><ROW><id>2585845</id><snippet>while True: pass</snippet></ROW><ROW><id>2585845</id><snippet>while True: time.sleep(1.0)</snippet></ROW><ROW><id>2586509</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; lines = ["hello world", "second line", "third line"]
&gt;&gt;&gt; words = chain(*[re.split(r'\s+', line) for line in lines])
</snippet></ROW><ROW><id>2586509</id><snippet>&gt;&gt;&gt; for word in words:
...    print(word)
... 
hello
world
second
line
third
line
</snippet></ROW><ROW><id>2586509</id><snippet>list</snippet></ROW><ROW><id>2586509</id><snippet>&gt;&gt;&gt; words = list(chain(*[re.split(r'\s+', line) for line in lines]))
</snippet></ROW><ROW><id>2586600</id><snippet>class hidden(object): # or whatever its parent class is
    def __init__(self):
        self.value = 4
    def show(self):
        return self.value
    def change(self,n):
        self.value = n
    def __getattr__(self, attrname):
        # put the dep'd method/attribute names here
        deprecateds = ['dep_show','dep_change']
        if attrname in deprecateds:
            print("These aren't the methods you're looking for.")
            def dep_change(n):
                self.value = n
            def dep_show():
                return self.value
            return eval(attrname)
        else:
            raise AttributeError, attrname
</snippet></ROW><ROW><id>2586600</id><snippet>__getattr__</snippet></ROW><ROW><id>2586600</id><snippet>__getattribute__</snippet></ROW><ROW><id>2586600</id><snippet>import types
return types.MethodType(eval(attrname), self)
</snippet></ROW><ROW><id>2586600</id><snippet>return eval(attrname)</snippet></ROW><ROW><id>2586600</id><snippet>__getattr__</snippet></ROW><ROW><id>2586600</id><snippet>__init__</snippet></ROW><ROW><id>2586600</id><snippet>__dir__</snippet></ROW><ROW><id>2586600</id><snippet>class hidden(object):
    def __init__(self):
        self.value = 4
        from types import MethodType
        def dep_show(self):
            return self.value
        self.__setattr__('dep_show', MethodType(dep_show, self))
        def dep_change(self, n):
            self.value = n
        self.__setattr__('dep_change', MethodType(dep_change, self))
    def show(self):
        return self.value
    def change(self, n):
        self.value = n
    def __dir__(self):
        heritage = dir(super(self.__class__, self)) # inherited attributes
        hide = ['dep_show', 'dep_change']
        show = [k for k in self.__class__.__dict__.keys() + self.__dict__.keys() if not k in heritage + private]
        return sorted(heritage + show)
</snippet></ROW><ROW><id>2586600</id><snippet>__dir__</snippet></ROW><ROW><id>2586600</id><snippet>dir(hiddenObj)</snippet></ROW><ROW><id>2586600</id><snippet>__dict__</snippet></ROW><ROW><id>2586909</id><snippet>&gt;&gt;&gt; a="CS 240, CS 246, ECE 222"
&gt;&gt;&gt; b=tuple(a.strip() for a in a.split(','))
&gt;&gt;&gt; b
('CS 240', 'CS 246', 'ECE 222')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2587041</id><snippet>def get_or_create(session, model, defaults=None, **kwargs):
    instance = session.query(model).filter_by(**kwargs).first()
    if instance:
        return instance, False
    else:
        params = dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))
        params.update(defaults)
        instance = model(**params)
        session.add(instance)
        return instance, True
</snippet></ROW><ROW><id>2587047</id><snippet>end_of_price</snippet></ROW><ROW><id>2587047</id><snippet>start_of_price + 6</snippet></ROW><ROW><id>2587047</id><snippet>float</snippet></ROW><ROW><id>2587047</id><snippet>4.59&lt;/</snippet></ROW><ROW><id>2587047</id><snippet>end_of_price</snippet></ROW><ROW><id>2587047</id><snippet>start_of_price + 4</snippet></ROW><ROW><id>2587107</id><snippet>def do_the_thing():
    if not "id" in dir():
         print "id not set, cannot continue"
         return
         # exit here!
    # otherwise continue with the rest of the script...
    print "alright..."
    # [ more code ]

# Call the method
do_the_thing()
</snippet></ROW><ROW><id>2587107</id><snippet>import mymodule
mymodule.do_the_thing()
</snippet></ROW><ROW><id>2587315</id><snippet> int id = QMetaType.type("MyClass");
</snippet></ROW><ROW><id>2587315</id><snippet>from PyQt4 import QtCore    
id = QtCore.QMetaType.type('MyClass')
</snippet></ROW><ROW><id>2587315</id><snippet>self.emit(SIGNAL("newStatuses(PyQt_PyObject)"), statuses)
</snippet></ROW><ROW><id>2587414</id><snippet>&gt;&gt;&gt; random.sample(list(enumerate(a)), 5)
[(1, 'o'), (0, 'h'), (3, 'd'), (2, 'w'), (4, 'y')]
</snippet></ROW><ROW><id>2587419</id><snippet>lambda</snippet></ROW><ROW><id>2587419</id><snippet>sort</snippet></ROW><ROW><id>2587419</id><snippet>xs.sort(lambda x,y: cmp(len(x), len(y))
</snippet></ROW><ROW><id>2587419</id><snippet>cmp(x, y)</snippet></ROW><ROW><id>2587419</id><snippet>x</snippet></ROW><ROW><id>2587419</id><snippet>y</snippet></ROW><ROW><id>2587419</id><snippet>x</snippet></ROW><ROW><id>2587419</id><snippet>y</snippet></ROW><ROW><id>2587419</id><snippet>x</snippet></ROW><ROW><id>2587419</id><snippet>y</snippet></ROW><ROW><id>2587419</id><snippet>key</snippet></ROW><ROW><id>2587419</id><snippet>xs.sort(key = lambda s: len(s))
</snippet></ROW><ROW><id>2587419</id><snippet>sort</snippet></ROW><ROW><id>2587419</id><snippet>len</snippet></ROW><ROW><id>2587419</id><snippet>lambda</snippet></ROW><ROW><id>2587419</id><snippet>xs.sort(key = len)
</snippet></ROW><ROW><id>2587419</id><snippet>list.sort</snippet></ROW><ROW><id>2587419</id><snippet>print sorted(xs, key=len)
</snippet></ROW><ROW><id>2587456</id><snippet>from pyftpdlib import ftpserver
authorizer = ftpserver.DummyAuthorizer()
authorizer.add_user("user", "12345", "/home/user", perm="elradfmw")
authorizer.add_anonymous("/home/nobody")
handler = ftpserver.FTPHandler
handler.authorizer = authorizer
address = ("127.0.0.1", 21)
ftpd = ftpserver.FTPServer(address, handler)
ftpd.serve_forever()
</snippet></ROW><ROW><id>2587469</id><snippet>bytes = b"\x00\x00\x02\x01"
i = 0
for b in bytes:
    i &lt;&lt;= 7
    i += b     # Or use (b &amp; 0x7f) if the last bit might not be zero.
print(i)
</snippet></ROW><ROW><id>2587469</id><snippet>257
</snippet></ROW><ROW><id>2587733</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>2587794</id><snippet>if o.previous_rising(ephem.Sun()) &gt; o.previous_setting(ephem.Sun()):
  return "day"
elif:
  return "night"
</snippet></ROW><ROW><id>2588283</id><snippet>import urllib2
import time


def testProxies(url, proxies):
    # prepare the request
    req = urllib2.Request(url)
    # run the request for each proxy
    results = ["Proxy           isGood Time"]
    for proxy in (proxies):
        # now set the proxy
        req.set_proxy(proxy, "http")
        # time it
        start = time.time()
        # try to open the URL
        try:
            urllib2.urlopen(req)
            # format the results for success
            results.append("%s  y      %.2f" % (proxy, time.time()-start))
        except urllib2.URLError:
            # format the results for failure
            results.append("%s  n      %.2f" % (proxy, time.time()-start))

    return results

testResults = testProxies("http://www.abc.com", ["200.43.54.112", "200.43.54.222",
                  "200.43.54.102", "200.43.54.111"])
for result in testResults:
    print result
</snippet></ROW><ROW><id>2588283</id><snippet>urllib2.Request(url)</snippet></ROW><ROW><id>2588283</id><snippet>set_proxy()</snippet></ROW><ROW><id>2588289</id><snippet>request.env</snippet></ROW><ROW><id>2588289</id><snippet>request.META.get("HTTP_USER_AGENT")</snippet></ROW><ROW><id>2588294</id><snippet>&gt;&gt;&gt; l = ['yahoo', 'wikipedia', 'freebase']
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in range(1, len(l) +1):
    print(list(itertools.combinations(l, r=i)))


[('yahoo',), ('wikipedia',), ('freebase',)]
[('yahoo', 'wikipedia'), ('yahoo', 'freebase'), ('wikipedia', 'freebase')]
[('yahoo', 'wikipedia', 'freebase')]
</snippet></ROW><ROW><id>2588363</id><snippet>try...except...</snippet></ROW><ROW><id>2588363</id><snippet>try:
    input_list = list(input_val)
except TypeError:
    input_list = list((input_val,))
</snippet></ROW><ROW><id>2588667</id><snippet>object</snippet></ROW><ROW><id>2588667</id><snippet>class Foo: pass</snippet></ROW><ROW><id>2588667</id><snippet>class Foo(object): pass</snippet></ROW><ROW><id>2588667</id><snippet>@property</snippet></ROW><ROW><id>2588957</id><snippet>from ctypes import *

def encipher(v, k):
    y=c_uint32(v[0]);
    z=c_uint32(v[1]);
    sum=c_uint32(0);
    delta=0x9E3779B9;
    n=32
    w=[0,0]

    while(n&gt;0):
        sum.value += delta
        y.value += ( z.value &lt;&lt; 4 ) + k[0] ^ z.value + sum.value ^ ( z.value &gt;&gt; 5 ) + k[1]
        z.value += ( y.value &lt;&lt; 4 ) + k[2] ^ y.value + sum.value ^ ( y.value &gt;&gt; 5 ) + k[3]
        n -= 1

    w[0]=y.value
    w[1]=z.value
    return w

def decipher(v, k):
    y=c_uint32(v[0])
    z=c_uint32(v[1])
    sum=c_uint32(0xC6EF3720)
    delta=0x9E3779B9
    n=32
    w=[0,0]

    while(n&gt;0):
        z.value -= ( y.value &lt;&lt; 4 ) + k[2] ^ y.value + sum.value ^ ( y.value &gt;&gt; 5 ) + k[3]
        y.value -= ( z.value &lt;&lt; 4 ) + k[0] ^ z.value + sum.value ^ ( z.value &gt;&gt; 5 ) + k[1]
        sum.value -= delta
        n -= 1

    w[0]=y.value
    w[1]=z.value
    return w
</snippet></ROW><ROW><id>2588957</id><snippet>&gt;&gt;&gt; v
[1385482522, 639876499]
&gt;&gt;&gt; tea.decipher(tea.encipher(v,key),key)
[1385482522L, 639876499L]
</snippet></ROW><ROW><id>2589082</id><snippet>import re
text = "this isn't alphanumeric"
result = re.sub(r'\W','-',text) # result will be "this-isn-t-alphanumeric"
</snippet></ROW><ROW><id>2589082</id><snippet>\W</snippet></ROW><ROW><id>2589082</id><snippet>\w</snippet></ROW><ROW><id>2589082</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>2589082</id><snippet>\W</snippet></ROW><ROW><id>2589158</id><snippet>eval</snippet></ROW><ROW><id>2589158</id><snippet>a</snippet></ROW><ROW><id>2589158</id><snippet>locals</snippet></ROW><ROW><id>2589158</id><snippet>def thefirst(a):
    return eval('1+2+a', locals())
</snippet></ROW><ROW><id>2589213</id><snippet>import re
blah = "word word: monty py: thon"
answer = re.sub(r'\w+:\s?','',blah)
print answer
</snippet></ROW><ROW><id>2589340</id><snippet>raw_input</snippet></ROW><ROW><id>2589340</id><snippet>input</snippet></ROW><ROW><id>2589340</id><snippet>str</snippet></ROW><ROW><id>2589340</id><snippet>phoneNumber = raw_input("Please enter a phone number: ")
</snippet></ROW><ROW><id>2589484</id><snippet>.sort(key=lambda x: datetime.datetime.strptime(x['date'], '%Y-%m-%d'))
</snippet></ROW><ROW><id>2589572</id><snippet>isinstance</snippet></ROW><ROW><id>2589572</id><snippet>def my_print(text, begin, end):
    "Print 'text' in UPPER between 'begin' and 'end' in lower"
    try:
      print begin.lower() + text.upper() + end.lower()
    except (AttributeError, TypeError):
      raise AssertionError('Input variables should be strings')
</snippet></ROW><ROW><id>2589722</id><snippet>sys.executable</snippet></ROW><ROW><id>2589722</id><snippet>import sys

print sys.executable
</snippet></ROW><ROW><id>2589826</id><snippet>while</snippet></ROW><ROW><id>2589826</id><snippet>for</snippet></ROW><ROW><id>2589826</id><snippet>a = ["Hello", "world", "!"]
b = (x for x in a)
for c in b:
    print c,
</snippet></ROW><ROW><id>2589826</id><snippet>while</snippet></ROW><ROW><id>2590519</id><snippet>find()</snippet></ROW><ROW><id>2590519</id><snippet>a = '1234;5'
index = a.find('s')
if index == -1:
    print "Not found."
else:
    print "Found at index", index
</snippet></ROW><ROW><id>2590519</id><snippet>in</snippet></ROW><ROW><id>2590519</id><snippet>&gt;&gt;&gt; print 's' in a
False
&gt;&gt;&gt; print 's' not in a
True
</snippet></ROW><ROW><id>2590548</id><snippet>from matplotlib import pyplot as PLT

with open('name_of_your_file.csv') as f:
  v = NP.loadtxt(f, delimiter=",", dtype='float', comments="#", skiprows=1, usecols=None)
</snippet></ROW><ROW><id>2590548</id><snippet>from matplotlib import pyplot as PLT

v_hist = NP.ravel(v)   # 'flatten' v
fig = PLT.figure()
ax1 = fig.add_subplot(111)

n, bins, patches = ax1.hist(v_hist, bins=50, normed=1, facecolor='green')
PLT.show()
</snippet></ROW><ROW><id>2590800</id><snippet>from matplotlib import pyplot
</snippet></ROW><ROW><id>2590800</id><snippet>xPoints = []
yPoints = []
for x in range(1,500):
    y = random.randint(1,25000)
    xPoints.append(x)
    yPoints.append(y)
pyplot.plot(xPoints, yPoints)
pyplot.show()
</snippet></ROW><ROW><id>2590800</id><snippet>xPoints = range(1,500)
yPoints = [random.randint(1,25000) for _ in range(1,500)]
pyplot.plot(xPoints, yPoints)
pyplot.show()
</snippet></ROW><ROW><id>2590818</id><snippet>python manage.py runserver 0:8080
</snippet></ROW><ROW><id>2590818</id><snippet>http://yoursite.com:8080/
</snippet></ROW><ROW><id>2590818</id><snippet>import tagging</snippet></ROW><ROW><id>2590818</id><snippet>import tagging</snippet></ROW><ROW><id>2590818</id><snippet>sudo pip install django-tagging
</snippet></ROW><ROW><id>2591247</id><snippet>types</snippet></ROW><ROW><id>2591247</id><snippet>from types import GeneratorType

elementChosen = QtCore.pyqtSignal(GeneratorType)
</snippet></ROW><ROW><id>2591625</id><snippet>\xc3</snippet></ROW><ROW><id>2591633</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2591862</id><snippet>&lt;div title="a&gt;b"&gt;</snippet></ROW><ROW><id>2591862</id><snippet>&lt;div title="&lt;" onmouseover="script()" class="&lt;"&gt;"&gt;</snippet></ROW><ROW><id>2591862</id><snippet>def replaceWithContents(element):
    ix= element.parent.contents.index(element)
    for child in reversed(element.contents):
        element.parent.insert(ix, child)
    element.extract()

doc= BeautifulSoup(html) # maybe fromEncoding= 'utf-8'
for link in doc.findAll('a'):
    replaceWithContents(link)
str(doc)
</snippet></ROW><ROW><id>2591878</id><snippet>&gt;&gt;&gt; serv="""
... urn:uuid:7FDS890A-KD9E-3h53-G7E8-BHJSD6789D:[u'http://10.10.10.20:12365/7FDS890A-KD9E-3h53-G7E8-BHJSD6789D/']
... ---------------------------------------------
... urn:uuid:5EEF382F-JSQ9-3c45-D5E0-K15X8M8K76:[u'http://10.10.10.10:42365']
... ---------------------------------------------
... urn:uuid:8DSGF89S-FS90-5c87-K3DF-SDFU890US9:[u'http://10.10.10.40:5234']
... ---------------------------------------------
... """
&gt;&gt;&gt; tomatch="urn:uuid:5EEF382F-JSQ9-3c45-D5E0-K15X8M8K76"
&gt;&gt;&gt; for row in serv.split("\n"):
...  if tomatch in row:
...   print row[ row.find("[")+1 : ].replace("]","")
...
u'http://10.10.10.10:42365'
</snippet></ROW><ROW><id>2592052</id><snippet>cl.communicate()</snippet></ROW><ROW><id>2592052</id><snippet>result, err = ...</snippet></ROW><ROW><id>2592052</id><snippet>result</snippet></ROW><ROW><id>2592052</id><snippet>err</snippet></ROW><ROW><id>2592052</id><snippet>repr(...)</snippet></ROW><ROW><id>2592052</id><snippet>\n</snippet></ROW><ROW><id>2592094</id><snippet>gcc -O3</snippet></ROW><ROW><id>2592094</id><snippet>RPython toolchain</snippet></ROW><ROW><id>2592818</id><snippet>bytes</snippet></ROW><ROW><id>2592818</id><snippet>u</snippet></ROW><ROW><id>2592879</id><snippet>lines = iter(open('something.txt', 'r'))
for val in lines:
    if val == "!":
        lines.next()
        continue
    &lt;etc&gt;
</snippet></ROW><ROW><id>2592879</id><snippet>StopIteration</snippet></ROW><ROW><id>2593618</id><snippet> $ ssh-keygen -t dsa
</snippet></ROW><ROW><id>2593623</id><snippet>specials</snippet></ROW><ROW><id>2593623</id><snippet>if specials:
  special_smoothies = [x for x in smoothies if any(True for y in specials if x.startswith(y))]
else:
  special_smoothies = smoothies[:]
</snippet></ROW><ROW><id>2594224</id><snippet>"C:\Documents and Settings\Administrator\Desktop\bracket\python\python" "C:\Documents and Settings\Administrator\Desktop\bracket\[10,20]\brackettest.py"
</snippet></ROW><ROW><id>2594779</id><snippet>employeeName</snippet></ROW><ROW><id>2594779</id><snippet>getHours</snippet></ROW><ROW><id>2594779</id><snippet>getHours</snippet></ROW><ROW><id>2594779</id><snippet>getWage</snippet></ROW><ROW><id>2594779</id><snippet>while True</snippet></ROW><ROW><id>2594779</id><snippet>ValueError</snippet></ROW><ROW><id>2594779</id><snippet>getHours</snippet></ROW><ROW><id>2594779</id><snippet>getWage</snippet></ROW><ROW><id>2594779</id><snippet>booleanDone==False</snippet></ROW><ROW><id>2594779</id><snippet>not booleanDone</snippet></ROW><ROW><id>2595090</id><snippet>##fix the eq and hash to work correctly
class MyObject:
    def __init__(self,value,meta):
        self.value = value
        self.meta = meta
    def __eq__(self,other):
        return self.value, self.meta == other.value, other.meta
    def __hash__(self):
        return hash((self.value, self.meta))
    def __repr__(self):
        return "%s %s" % (self.value,self.meta)

a = MyObject('1','left')
b = MyObject('1','right')
c = MyObject('2','left')
d = MyObject('2','right')
e = MyObject('3','left')

union =  set([a,c,e]).union(set([b,d]))
print union
#set([2 left, 2 right, 1 left, 3 left, 1 right])

##sort the objects, so that older objs come before the newer equivalents
sl = sorted(union, key= lambda x: (x.value, x.meta) )
print sl
#[1 left, 1 right, 2 left, 2 right, 3 left]
import itertools
##group the objects by value, groupby needs the objs to be in order to do this
filtered = itertools.groupby(sl, lambda x: x.value)
##make a list of the oldest (first in group)
oldest = [ next(group) for key, group in filtered]
print oldest
#[1 left, 2 left, 3 left]
</snippet></ROW><ROW><id>2595112</id><snippet>_user</snippet></ROW><ROW><id>2595112</id><snippet>_user</snippet></ROW><ROW><id>2595112</id><snippet>class BasePage(webapp.RequestHandler):
    def render(self, template_name, data={}):
        template_data = {}
        user = template_data["user"] = users.get_current_user()
        template_data["login_logout_link"] = users.create_logout_url() if user else users.create_login_url()
        template_data.update(data)
        path = os.path.join(os.path.dirname(__file__), 'Static', 'Templates', '%s.html' % template_name)
        self.response.out.write(template.render(path, template_data)
</snippet></ROW><ROW><id>2595112</id><snippet>user</snippet></ROW><ROW><id>2595112</id><snippet>login_logout_link</snippet></ROW><ROW><id>2595112</id><snippet>template_data.update(data)</snippet></ROW><ROW><id>2595112</id><snippet>template_data</snippet></ROW><ROW><id>2595112</id><snippet>data</snippet></ROW><ROW><id>2595112</id><snippet>class MainPage(BasePage):
    def get(self):
        self.render('start', data={"now": datetime.now()})
</snippet></ROW><ROW><id>2595162</id><snippet>glob</snippet></ROW><ROW><id>2595162</id><snippet>[a-z]</snippet></ROW><ROW><id>2595162</id><snippet>path1 = "/Users/smcho/Desktop/bracket/[[]10,20[]]"
</snippet></ROW><ROW><id>2595162</id><snippet>[[]</snippet></ROW><ROW><id>2595162</id><snippet>[</snippet></ROW><ROW><id>2595162</id><snippet>[]]</snippet></ROW><ROW><id>2595162</id><snippet>]</snippet></ROW><ROW><id>2595463</id><snippet>def get_cookie_by_name(cj, name):
    return [cookie for cookie in cj if cookie.name == name][0]

cookie = get_cookie_by_name(cj, "PHPSESSID")
</snippet></ROW><ROW><id>2595463</id><snippet>[...]</snippet></ROW><ROW><id>2595463</id><snippet>[0]</snippet></ROW><ROW><id>2595657</id><snippet>__init__.py</snippet></ROW><ROW><id>2595657</id><snippet>polls</snippet></ROW><ROW><id>2595657</id><snippet>/home/kevin/crossen</snippet></ROW><ROW><id>2595657</id><snippet>$ python -c "import sys; print sys.path"
</snippet></ROW><ROW><id>2596304</id><snippet>print obj</snippet></ROW><ROW><id>2596304</id><snippet>__str__</snippet></ROW><ROW><id>2596304</id><snippet>      &gt;&gt;&gt; a = ('foo\nbar', '5')
      &gt;&gt;&gt; print a
      ('foo\nbar', '5')
</snippet></ROW><ROW><id>2596304</id><snippet>      &gt;&gt;&gt; class mytuple(tuple):
              def __str__(self):
                  return ''.join(self)
      &gt;&gt;&gt; b = mytuple(a)
      &gt;&gt;&gt; print b
      foo
      bar5
</snippet></ROW><ROW><id>2596304</id><snippet>__str__</snippet></ROW><ROW><id>2597102</id><snippet>keys.sort(key=lambda x: [int(y) for y in x.split('.')])
</snippet></ROW><ROW><id>2597134</id><snippet>return ''.join(sorted(comb_))
</snippet></ROW><ROW><id>2597178</id><snippet>dict(x[i:i+2] for i in range(0, len(x), 2))
</snippet></ROW><ROW><id>2597260</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2597260</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2597260</id><snippet>&gt;&gt;&gt; import unicodedata as ud
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp437'
&gt;&gt;&gt; ud.name(u'\xe9')
'LATIN SMALL LETTER E WITH ACUTE'
&gt;&gt;&gt; ud.name('\xe9'.decode('cp437'))
'GREEK CAPITAL LETTER THETA'
&gt;&gt;&gt; import unicodedata as ud
&gt;&gt;&gt; ud.name(u'\xe9')
'LATIN SMALL LETTER E WITH ACUTE'
&gt;&gt;&gt; '\xe9'.decode('cp437')
u'\u0398'
&gt;&gt;&gt; ud.name(u'\u0398')
'GREEK CAPITAL LETTER THETA'
&gt;&gt;&gt; print u'\xe9'
é
&gt;&gt;&gt; print '\xe9'
Θ
</snippet></ROW><ROW><id>2597260</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>2597351</id><snippet>break</snippet></ROW><ROW><id>2597351</id><snippet>find</snippet></ROW><ROW><id>2597351</id><snippet>True</snippet></ROW><ROW><id>2597351</id><snippet>for word1 in buf1: 
    find = False 
    for word2 in buf2: 
        ... 
        if res == res1: 
            print "BINGO " + word1 + ":" + word2 
            find = True 
            break             # &lt;-- break here too
    if find: 
        break 
</snippet></ROW><ROW><id>2597351</id><snippet>for</snippet></ROW><ROW><id>2597351</id><snippet>for word1,word2 in ((w1,w2) for w1 in buf1 for w2 in buf2):
    ... 
    if res == res1: 
        print "BINGO " + word1 + ":" + word2
        break 
</snippet></ROW><ROW><id>2597351</id><snippet>itertools.product</snippet></ROW><ROW><id>2597351</id><snippet>from itertools import product
for word1,word2 in product(buf1,buf2):
    ... 
    if res == res1: 
        print "BINGO " + word1 + ":" + word2
        break 
</snippet></ROW><ROW><id>2597440</id><snippet>Bunch</snippet></ROW><ROW><id>2597440</id><snippet>class Bunch(object):
  def __init__(self, adict):
    self.__dict__.update(adict)
</snippet></ROW><ROW><id>2597440</id><snippet>d</snippet></ROW><ROW><id>2597440</id><snippet>x.foo</snippet></ROW><ROW><id>2597440</id><snippet>d['foo']</snippet></ROW><ROW><id>2597440</id><snippet>x = Bunch(d)
</snippet></ROW><ROW><id>2597440</id><snippet>d</snippet></ROW><ROW><id>2597440</id><snippet>globals()</snippet></ROW><ROW><id>2597440</id><snippet>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters
   ...
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>2597446</id><snippet>randint()</snippet></ROW><ROW><id>2597446</id><snippet>&gt;&gt;&gt; random.randint(1,123456789012345678901234567890)
113144971884331658209492153398L
</snippet></ROW><ROW><id>2597459</id><snippet>map.connect('/page/{pageid}/{controller}/{action}', requirements={'pageid':'\d+'})
map.connect('/page/{pageid}/{controller}/{action}/{id}', requirements={'pageid':'\d+', 'id':'\d+'})
</snippet></ROW><ROW><id>2597459</id><snippet>def __before__(self, action, pageid=None):
    page_q = meta.Session.query(model.Page)
    c.page = pageid and page_q.filter_by(id=int(pageid)).first() or None
    if c.page is None:
        abort(404)
</snippet></ROW><ROW><id>2597605</id><snippet>c</snippet></ROW><ROW><id>2597605</id><snippet>type(c)</snippet></ROW><ROW><id>2597838</id><snippet>Foo.__dict__</snippet></ROW><ROW><id>2597838</id><snippet>for callable in Foo.__dict__.values():
    try:
        callable()    
    except TypeError:
        pass
</snippet></ROW><ROW><id>2597897</id><snippet>hashlib.hash</snippet></ROW><ROW><id>2597897</id><snippet>__str__</snippet></ROW><ROW><id>2597897</id><snippet>id</snippet></ROW><ROW><id>2597897</id><snippet>.hexdigest()</snippet></ROW><ROW><id>2597937</id><snippet>''.join(map(str, [1,2,3,4] ))
</snippet></ROW><ROW><id>2597937</id><snippet>map(str, array)</snippet></ROW><ROW><id>2597937</id><snippet>[str(x) for x in array]</snippet></ROW><ROW><id>2597937</id><snippet>map(str, [1,2,3,4])</snippet></ROW><ROW><id>2597937</id><snippet>['1', '2', '3', '4']</snippet></ROW><ROW><id>2597937</id><snippet>s.join(a)</snippet></ROW><ROW><id>2597937</id><snippet>a</snippet></ROW><ROW><id>2597937</id><snippet>s</snippet></ROW><ROW><id>2597937</id><snippet>&gt;&gt;&gt; ','.join(['foo', 'bar', '', 'baz'])
'foo,bar,,baz'
</snippet></ROW><ROW><id>2597937</id><snippet>.join</snippet></ROW><ROW><id>2597937</id><snippet>str</snippet></ROW><ROW><id>2597937</id><snippet>&gt;&gt;&gt; ''.join([1,2,3,4])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sequence item 0: expected string, int found
</snippet></ROW><ROW><id>2597937</id><snippet>map</snippet></ROW><ROW><id>2597938</id><snippet>import string
alphabet = string.letters + string.digits
max = 11

def int_to_base62(num):
    if num == 0:
        return alphabet[0]

    arr = []
    radix = len(alphabet)
    while num:
        arr.append(alphabet[num%radix])
        num /= radix
    arr.reverse()
    return (alphabet[0] * (max - len(arr))) + ''.join(arr)

def base62_to_int(str):
    radix = len(alphabet)
    power = len(str) - 1
    num = 0
    for char in str:
        num += alphabet.index(char) * (radix ** power)
        power -= 1
    return num
</snippet></ROW><ROW><id>2598072</id><snippet>datalen</snippet></ROW><ROW><id>2598072</id><snippet>0</snippet></ROW><ROW><id>2598072</id><snippet>&gt;&gt;&gt; datalen = 10
&gt;&gt;&gt; print [0,] * datalen
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>2598072</id><snippet>&gt;&gt;&gt; print [0] * datalen
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>2598165</id><snippet>./stream_generator | egrep 'TICK' | ./topic_processor</snippet></ROW><ROW><id>2598165</id><snippet>./stream_generator</snippet></ROW><ROW><id>2598165</id><snippet>egrep</snippet></ROW><ROW><id>2598165</id><snippet>egrep</snippet></ROW><ROW><id>2598165</id><snippet>egrep</snippet></ROW><ROW><id>2598165</id><snippet>egrep</snippet></ROW><ROW><id>2598165</id><snippet>egrep</snippet></ROW><ROW><id>2598165</id><snippet>--line-buffered</snippet></ROW><ROW><id>2598165</id><snippet>./stream_generator | egrep --line-buffered 'TICK' | ./topic_processor 
</snippet></ROW><ROW><id>2598201</id><snippet>import time
# at the beginning of the script
startTime = time.time()
# ...
def getUptime():
    """
    Returns the number of seconds since the program started.
    """
    # do return startTime if you just want the process start time
    return time.time() - startTime
</snippet></ROW><ROW><id>2598201</id><snippet>ps</snippet></ROW><ROW><id>2598201</id><snippet>/proc/pid</snippet></ROW><ROW><id>2598201</id><snippet>bash</snippet></ROW><ROW><id>2598201</id><snippet>ps -eo pid,etime | grep $YOUR_PID | awk '{print $2}'
</snippet></ROW><ROW><id>2598201</id><snippet>days-HH:MM:SS
</snippet></ROW><ROW><id>2598201</id><snippet>HH:MM:SS</snippet></ROW><ROW><id>2598201</id><snippet>ps -eo pid,stime | grep $YOUR_PID | awk '{print $2}'
</snippet></ROW><ROW><id>2598201</id><snippet>import sys
import datetime
import time
import subprocess

# call like this: python startTime.py $PID

pid = sys.argv[1]
proc = subprocess.Popen(['ps','-eo','pid,etime'], stdout=subprocess.PIPE)
# get data from stdout
proc.wait()
results = proc.stdout.readlines()
# parse data (should only be one)
for result in results:
    try:
        result.strip()
        if result.split()[0] == pid:
            pidInfo = result.split()[1]
            # stop after the first one we find
            break
    except IndexError:
        pass # ignore it
else:
    # didn't find one
    print "Process PID", pid, "doesn't seem to exist!"
    sys.exit(0)
pidInfo = [result.split()[1] for result in results
           if result.split()[0] == pid][0]
pidInfo = pidInfo.partition("-")
if pidInfo[1] == '-':
    # there is a day
    days = int(pidInfo[0])
    rest = pidInfo[2].split(":")
    hours = int(rest[0])
    minutes = int(rest[1])
    seconds = int(rest[2])
else:
    days = 0
    rest = pidInfo[0].split(":")
    if len(rest) == 3:
        hours = int(rest[0])
        minutes = int(rest[1])
        seconds = int(rest[2])
    elif len(rest) == 2:
        hours = 0
        minutes = int(rest[0])
        seconds = int(rest[1])
    else:
        hours = 0
        minutes = 0
        seconds = int(rest[0])

# get the start time
secondsSinceStart = days*24*3600 + hours*3600 + minutes*60 + seconds
# unix time (in seconds) of start
startTime = time.time() - secondsSinceStart
# final result
print "Process started on",
print datetime.datetime.fromtimestamp(startTime).strftime("%a %b %d at %I:%M:%S %p")
</snippet></ROW><ROW><id>2598215</id><snippet>basicConfig</snippet></ROW><ROW><id>2598215</id><snippet>logging</snippet></ROW><ROW><id>2598215</id><snippet>logging</snippet></ROW><ROW><id>2598682</id><snippet>import win32gui

def enumerationCallaback(hwnd, results):
    text = win32gui.GetWindowText(hwnd)
    if text.find("Mozilla Firefox") &gt;= 0:
        results.append((hwnd, text))

mywindows = []    
win32gui.EnumWindows(enumerationCallaback, mywindows)
for win, text in mywindows:
    print text

def recurseChildWindow(hwnd, results):
    win32gui.EnumChildWindows(hwnd, recurseChildWindow, results)
    print hwnd
    # try to get window class, text etc using SendMessage and see if it is what we want

mychildren = []
recurseChildWindow(mywindows[0][0], mychildren)
</snippet></ROW><ROW><id>2598820</id><snippet>numpy.apply_along_axis(lambda args: [complex(*args)], 3, Data)
</snippet></ROW><ROW><id>2598820</id><snippet>numpy.vectorize(complex)(Data[...,0], Data[...,1])  # The ellipsis is equivalent here to ":,:,:"
</snippet></ROW><ROW><id>2598820</id><snippet>Data[...,0] + 1j * Data[...,1]
</snippet></ROW><ROW><id>2599169</id><snippet>else</snippet></ROW><ROW><id>2599169</id><snippet>    else:
        return foo(a)
</snippet></ROW><ROW><id>2599231</id><snippet>for</snippet></ROW><ROW><id>2599231</id><snippet>empty</snippet></ROW><ROW><id>2599231</id><snippet>&lt;select&gt;
    {% for name in dict.names %}
    &lt;option value="{{name.id}}" 
      {% for selected_id in selected_name %}
        {% ifequal name.id selected_id %} {{ selected }} {% endifequal %} 
      {% endfor %}&gt;
      {{name.firstname}}
    &lt;/option&gt;
    {% empty %}
    &lt;option value=""&gt;No names&lt;/option&gt;
    {% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>2599465</id><snippet>def debug():
    import pdb
    import sys

    # set up the debugger
    debugger = pdb.Pdb()
    debugger.reset()

    # your custom stuff here
    debugger.do_where(None) # run the "where" command

    # invoke the interactive debugging prompt
    users_frame = sys._getframe().f_back # frame where the user invoked `debug()`
    debugger.interaction(users_frame, None)

if __name__ == '__main__':
    print 1
    debug()
    print 2
</snippet></ROW><ROW><id>2599465</id><snippet>pdb</snippet></ROW><ROW><id>2599465</id><snippet>bdb</snippet></ROW><ROW><id>2599629</id><snippet>[buildout]
  find-links =
      http://github.com/benoitc/gunicorn/tarball/master#egg=gunicorn
  parts = console_scripts


  [console_scripts]
  recipe = zc.recipe.egg
  eggs = gunicorn
</snippet></ROW><ROW><id>2599630</id><snippet>SELECT
    TagID,COUNT(*)
    FROM YourTable
    GROUP BY TagID
</snippet></ROW><ROW><id>2599726</id><snippet>xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
</snippet></ROW><ROW><id>2599726</id><snippet> import feedparser
 d = feedparser.parse('http://yourfeed.xml')
 print d.entries[0].['geo_lat']
 print d.entries[0].['geo_long']
</snippet></ROW><ROW><id>2600208</id><snippet>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
</snippet></ROW><ROW><id>2600239</id><snippet>sudo port install python31</snippet></ROW><ROW><id>2600239</id><snippet>/opt/local</snippet></ROW><ROW><id>2600239</id><snippet>port install &lt;portname&gt;</snippet></ROW><ROW><id>2600239</id><snippet>port search &lt;string&gt;</snippet></ROW><ROW><id>2600239</id><snippet>/opt/local</snippet></ROW><ROW><id>2600239</id><snippet>python31</snippet></ROW><ROW><id>2600239</id><snippet>sqlite3</snippet></ROW><ROW><id>2600239</id><snippet>/opt/local</snippet></ROW><ROW><id>2600731</id><snippet>None</snippet></ROW><ROW><id>2600731</id><snippet>.left</snippet></ROW><ROW><id>2600731</id><snippet>.right</snippet></ROW><ROW><id>2600813</id><snippet>d = defaultdict(lambda: defaultdict(int))
</snippet></ROW><ROW><id>2600813</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>2600813</id><snippet>d</snippet></ROW><ROW><id>2600994</id><snippet>* None
* False
* zero of any numeric type, for example, 0, 0L, 0.0, 0j.
* any empty sequence, for example, '', (), [].
* any empty mapping, for example, {}.
* instances of user-defined classes, if the class defines a
   `__nonzero__()` or `__len__()` method, when that method returns the integer
   zero or bool value False. [1]
</snippet></ROW><ROW><id>2600994</id><snippet>True</snippet></ROW><ROW><id>2601083</id><snippet>imp.load_source(path)</snippet></ROW><ROW><id>2601083</id><snippet>imp</snippet></ROW><ROW><id>2601358</id><snippet>PyArg_ParseTupleAndKeywords()</snippet></ROW><ROW><id>2601358</id><snippet>const &lt;something&gt; *</snippet></ROW><ROW><id>2601358</id><snippet>&lt;something&gt; *</snippet></ROW><ROW><id>2601358</id><snippet>PyArg_ParseTupleAndKeywords()</snippet></ROW><ROW><id>2601358</id><snippet>char *</snippet></ROW><ROW><id>2601358</id><snippet>PyArg_ParseTupleAndKeywords</snippet></ROW><ROW><id>2601358</id><snippet>const char *kwlist[]</snippet></ROW><ROW><id>2601358</id><snippet>const_cast</snippet></ROW><ROW><id>2601358</id><snippet>PyArg_ParseTupleAndKeywords()</snippet></ROW><ROW><id>2601358</id><snippet>PyArg_ParseTupleAndKeywords(..., ..., ..., const_cast&lt;char **&gt;(kwlist), ...);
</snippet></ROW><ROW><id>2601682</id><snippet>locals()</snippet></ROW><ROW><id>2601682</id><snippet>globals()</snippet></ROW><ROW><id>2601682</id><snippet>vars()</snippet></ROW><ROW><id>2601682</id><snippet>inspect</snippet></ROW><ROW><id>2601822</id><snippet>python /var/www/hash_info.py /var/www/Muha_Album.7912.torrent
</snippet></ROW><ROW><id>2602208</id><snippet>&gt;&gt;&gt; import mod
&gt;&gt;&gt; mod.myfunction()
</snippet></ROW><ROW><id>2602410</id><snippet>c = cv.WaitKey(10)</snippet></ROW><ROW><id>2602410</id><snippet>repeat()</snippet></ROW><ROW><id>2602410</id><snippet>time.sleep(10)</snippet></ROW><ROW><id>2602410</id><snippet>for i in range(3):
    capture = cv.CaptureFromCAM(i)
    if capture: break
</snippet></ROW><ROW><id>2602410</id><snippet>import cv

cv.NamedWindow("w1", cv.CV_WINDOW_AUTOSIZE)
camera_index = 0
capture = cv.CaptureFromCAM(camera_index)

def repeat():
    global capture #declare as globals since we are assigning to them now
    global camera_index
    frame = cv.QueryFrame(capture)
    cv.ShowImage("w1", frame)
    c = cv.WaitKey(10)
    if(c=="n"): #in "n" key is pressed while the popup window is in focus
        camera_index += 1 #try the next camera index
        capture = cv.CaptureFromCAM(camera_index)
        if not capture: #if the next camera index didn't work, reset to 0.
            camera_index = 0
            capture = cv.CaptureFromCAM(camera_index)

while True:
    repeat()
</snippet></ROW><ROW><id>2603107</id><snippet>pickle</snippet></ROW><ROW><id>2603107</id><snippet>shelve</snippet></ROW><ROW><id>2603107</id><snippet>pickle</snippet></ROW><ROW><id>2603306</id><snippet>pipe</snippet></ROW><ROW><id>2603306</id><snippet>p.wait()</snippet></ROW><ROW><id>2603306</id><snippet>communicate()</snippet></ROW><ROW><id>2603306</id><snippet>p.communicate()</snippet></ROW><ROW><id>2603306</id><snippet>p.stdout.read(num_bytes)</snippet></ROW><ROW><id>2603306</id><snippet>communicate()</snippet></ROW><ROW><id>2603306</id><snippet>.stdin.write</snippet></ROW><ROW><id>2603306</id><snippet>.stdout.read</snippet></ROW><ROW><id>2603306</id><snippet>.stderr.read</snippet></ROW><ROW><id>2603306</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>2603306</id><snippet>p.stdout.read(bytes)</snippet></ROW><ROW><id>2603306</id><snippet>while p.returncode is None:</snippet></ROW><ROW><id>2603306</id><snippet>p1 = Popen(["zgrep", "thingiwant", "largefile"], stdout=PIPE)
p2 = Popen(["processreceivingdata"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</snippet></ROW><ROW><id>2603306</id><snippet>p2</snippet></ROW><ROW><id>2603306</id><snippet>p1</snippet></ROW><ROW><id>2603371</id><snippet>while True</snippet></ROW><ROW><id>2603371</id><snippet>root.mainloop()</snippet></ROW><ROW><id>2603371</id><snippet>from Tkinter import *

root = Tk()
var = StringVar()
var.set('hello')

l = Label(root, textvariable = var)
l.pack()

t = Entry(root, textvariable = var)
t.pack()

root.mainloop() # the window is now displayed
</snippet></ROW><ROW><id>2603371</id><snippet>from Tkinter import *
from time import sleep

root = Tk()
var = StringVar()
var.set('hello')

l = Label(root, textvariable = var)
l.pack()

for i in range(6):
    sleep(1) # Need this to slow the changes down
    var.set('goodbye' if i%2 else 'hello')
    root.update_idletasks()
</snippet></ROW><ROW><id>2603966</id><snippet>&gt;&gt;&gt; def some_func():
...   return 2
... 
&gt;&gt;&gt; a = 2
&gt;&gt;&gt; if (a = some_func()):
  File "&lt;stdin&gt;", line 1
    if (a = some_func()):
          ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2604045</id><snippet>class SomeForm(Form):
    someField = Field(....)
    ...
</snippet></ROW><ROW><id>2604045</id><snippet>someField</snippet></ROW><ROW><id>2604045</id><snippet>SomeForm</snippet></ROW><ROW><id>2604045</id><snippet>__init__</snippet></ROW><ROW><id>2604045</id><snippet>field = copy(field)  #maybe you need deepcopy instead
setattr(self, name, field)   
</snippet></ROW><ROW><id>2604192</id><snippet>draw()</snippet></ROW><ROW><id>2604192</id><snippet>plot()</snippet></ROW><ROW><id>2604192</id><snippet>import time
ion()
x = linspace(-1,1,51)
plot(sin(x))
for i in range(10):
    plot([sin(i+j) for j in x])
    # make it appear immediately
    draw()
    time.sleep(1)
</snippet></ROW><ROW><id>2604192</id><snippet>import time

ion()

tstart = time.time()               # for profiling
x = arange(0,2*pi,0.01)            # x-array
line, = plot(x,sin(x))
for i in arange(1,200):
    line.set_ydata(sin(x+i/10.0))  # update the data
    draw()                         # redraw the canvas

print 'FPS:' , 200/(time.time()-tstart)
</snippet></ROW><ROW><id>2604192</id><snippet>line.set_ydata()</snippet></ROW><ROW><id>2604257</id><snippet>peers</snippet></ROW><ROW><id>2604257</id><snippet>struct</snippet></ROW><ROW><id>2604257</id><snippet>compact</snippet></ROW><ROW><id>2604257</id><snippet>port</snippet></ROW><ROW><id>2604257</id><snippet>event</snippet></ROW><ROW><id>2604602</id><snippet>def get_indicator_form(indicator, patient):
    class IndicatorForm(forms.Form):
        indicator_id = forms.IntegerField(initial=indicator.id, widget=forms.HiddenInput())
        patient_id = forms.IntegerField(initial=patient.id, widget=forms.HiddenInput())

        def __init__(self, *args, **kwargs):
            forms.Form.__init__(self, *args, **kwargs)
            self.indicator = indicator
            self.patient = patient

    for field in indicator.indicatorfield_set.all():
        IndicatorForm.base_fields[field.name] = field.get_field_type()

    return IndicatorForm
</snippet></ROW><ROW><id>2604694</id><snippet>zip_safe = False</snippet></ROW><ROW><id>2604694</id><snippet>setup()</snippet></ROW><ROW><id>2604694</id><snippet>setup.py</snippet></ROW><ROW><id>2604694</id><snippet>zip_ok = false</snippet></ROW><ROW><id>2604804</id><snippet>import select

def fromAtoB(A, B):
    r, w = select.select([A], [B], [])
    if not r: select.select([A], [], [])
    elif not w: select.select([], [B], [])
    B.sendall(A.recv(4096))
</snippet></ROW><ROW><id>2604849</id><snippet>&lt;a href="{% url feeds_view url="latest" %}"&gt;RSS feeds&lt;/a&gt;
</snippet></ROW><ROW><id>2604863</id><snippet>eventbox.set_events(...)</snippet></ROW><ROW><id>2604908</id><snippet>Point.__hash__()</snippet></ROW><ROW><id>2604908</id><snippet>Point.__eq__()</snippet></ROW><ROW><id>2604908</id><snippet>Point.__repr__()</snippet></ROW><ROW><id>2604908</id><snippet>Point</snippet></ROW><ROW><id>2604921</id><snippet>dos2unix</snippet></ROW><ROW><id>2604991</id><snippet>{% for d in mydata %}
    {% if forloop.first %}
        &lt;strong&gt;{{ d.title }}&lt;/strong&gt;
    {% else %}
        {{ d.title }}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>2605103</id><snippet>class Node(db.Model):
    children = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>2605125</id><snippet>mechanize</snippet></ROW><ROW><id>2605125</id><snippet>import logging
logger = logging.getLogger("mechanize")
# only log really bad events
logger.setLevel(logging.ERROR)
</snippet></ROW><ROW><id>2605125</id><snippet>sys.stdout</snippet></ROW><ROW><id>2605125</id><snippet>import sys
# save the old stdout so you can print later (do sys.stdout = OLD_STDOUT)
OLD_STDOUT = sys.stdout
sys.stdout = open("logfile.txt", 'w')
</snippet></ROW><ROW><id>2605125</id><snippet>sys.stderr</snippet></ROW><ROW><id>2605125</id><snippet>OLD_STDERR = sys.stderr
sys.stderr = open("errorLog.txt", 'w')
</snippet></ROW><ROW><id>2605125</id><snippet>class Discarder(object):
    def write(self, text):
        pass # do nothing
# now discard everything coming out of stdout
sys.stdout = Discarder()
</snippet></ROW><ROW><id>2605125</id><snippet># discards all input (change /dev/null to a file name to keep track of output)
python yourScript.py &gt; /dev/null
</snippet></ROW><ROW><id>2605578</id><snippet>nonlocal</snippet></ROW><ROW><id>2605578</id><snippet>def some_func(a):
  L = []

  def append():
    L.append(a)  # for the sake of example
    #...

  if a == 100:
    append()
    #...
  elif a == 200:
    append()
    #...
</snippet></ROW><ROW><id>2605635</id><snippet>soup.findAll('meta', attrs={'name':re.compile("^description$", re.I)})
</snippet></ROW><ROW><id>2605652</id><snippet>Student</snippet></ROW><ROW><id>2605652</id><snippet>Student</snippet></ROW><ROW><id>2605652</id><snippet>mapper(Student, students_table)</snippet></ROW><ROW><id>2605654</id><snippet>class voice(object):
  Voiced, Voiceless = range(2)
</snippet></ROW><ROW><id>2605654</id><snippet>class Vowel(object):
  def SomeInitialMethod(self):
    # ...

class Consonant(object):
  def SomeInitialMethod(self):
    # ...

p.SomeInitialMethod() # p can be either vowel or consonant

def SomeLaterFunction(p)
  # p is assumed to be either a Vowel or a Consonant
  if isinstance(p, Vowel):
    # ...
  elif isinstance(p, Consonant):
    # ...
</snippet></ROW><ROW><id>2605733</id><snippet>   import urllib2
   urlopen = urllib2.urlopen
   Request = urllib2.Request
   url = 'https://www.procom.ca/JobList.aspx?keywords=&amp;Cities=&amp;reference=&amp;JobType=0'
   headers =  {'Referer' : 'http://www.stackoverflow.com'}
   req = Request(url, None, headers)
   handle = urlopen(req)
   print handle.read()
</snippet></ROW><ROW><id>2605824</id><snippet>LoadModule cgi_module bin/mod_cgi.so
ScriptAlias /cgi-bin/ cgi-bin/
</snippet></ROW><ROW><id>2606423</id><snippet>pt = list()
pt.append(raw_input())
pt.append(raw_input())
print pt
</snippet></ROW><ROW><id>2606423</id><snippet>pt = [raw_input(), raw_input()]
</snippet></ROW><ROW><id>2606423</id><snippet>&gt;&gt;&gt; pt = [2]
&gt;&gt;&gt; pt[0] = raw_input()
1011
&gt;&gt;&gt; pt
['1011']
</snippet></ROW><ROW><id>2606423</id><snippet>pt = [2]</snippet></ROW><ROW><id>2606423</id><snippet>pt[1] = raw_input()</snippet></ROW><ROW><id>2606423</id><snippet>&gt;&gt;&gt; pt = [2]
&gt;&gt;&gt; pt[0] = raw_input()
1011
&gt;&gt;&gt; pt[1] = raw_input() # this is an assignment to an index not yet created.
1012
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
</snippet></ROW><ROW><id>2606423</id><snippet>pt = [2]</snippet></ROW><ROW><id>2606423</id><snippet>2</snippet></ROW><ROW><id>2606423</id><snippet>0</snippet></ROW><ROW><id>2606423</id><snippet>&gt;&gt;&gt; pt = [2]
&gt;&gt;&gt; pt
[2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2606423</id><snippet>append</snippet></ROW><ROW><id>2606532</id><snippet>nosetests module.submodule
</snippet></ROW><ROW><id>2606532</id><snippet>nosetests module.submodule:TestCase.test_method
</snippet></ROW><ROW><id>2606671</id><snippet>&gt;&gt;&gt; from igraph import Graph
&gt;&gt;&gt; g = Graph.Lattice([10, 10], circular=False)
&gt;&gt;&gt; g.get_all_shortest_paths(0)
[...a list of 3669 shortest paths starting from vertex 0...]
</snippet></ROW><ROW><id>2606671</id><snippet>get_all_shortest_paths</snippet></ROW><ROW><id>2606671</id><snippet>&gt;&gt;&gt; g.get_all_shortest_paths(0, 15)
[[0, 1, 2, 3, 4, 14, 15],
 [0, 1, 2, 12, 13, 14, 15],
 [0, 10, 11, 12, 13, 14, 15],
 [0, 1, 11, 12, 13, 14, 15],
 [0, 1, 2, 3, 13, 14, 15],
 [0, 1, 2, 3, 4, 5, 15]]
</snippet></ROW><ROW><id>2606671</id><snippet>Graph.Lattice([100, 100], circular=False)</snippet></ROW><ROW><id>2606671</id><snippet>def find_all_paths(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    paths = []
    for node in set(graph.neighbors(start)) - set(path):
        paths.extend(find_all_paths(graph, node, end, path))
    return paths
</snippet></ROW><ROW><id>2606671</id><snippet>graph.neighbors</snippet></ROW><ROW><id>2606671</id><snippet>def find_all_paths(graph, start, end):
    def find_all_paths_aux(adjlist, start, end, path):
        path = path + [start]
        if start == end:
            return [path]
        paths = []
        for node in adjlist[start] - set(path):
            paths.extend(find_all_paths_aux(adjlist, node, end, path))
        return paths

    adjlist = [set(graph.neighbors(node)) for node in xrange(graph.vcount())]
    return find_all_paths_aux(adjlist, start, end, [])
</snippet></ROW><ROW><id>2606724</id><snippet>pk=1</snippet></ROW><ROW><id>2606724</id><snippet>Employee.objects.get(pk=1).addresses.all()</snippet></ROW><ROW><id>2606810</id><snippet>array('l')
array('c', 'hello world')
array('u', u'hello \u2641')
array('l', [1, 2, 3, 4, 5])
array('d', [1.0, 2.0, 3.14])
</snippet></ROW><ROW><id>2607026</id><snippet>[(int(x) if x else 0) for x in data.split(',')]
</snippet></ROW><ROW><id>2607026</id><snippet>data.split(',')</snippet></ROW><ROW><id>2607026</id><snippet>['8', '5', '', '1', '4', '7', '', '', '', ...]
</snippet></ROW><ROW><id>2607026</id><snippet>(int(x) if x else 0)
</snippet></ROW><ROW><id>2607026</id><snippet>int(x)</snippet></ROW><ROW><id>2607026</id><snippet>x</snippet></ROW><ROW><id>2607026</id><snippet>x</snippet></ROW><ROW><id>2607060</id><snippet>Init</snippet></ROW><ROW><id>2607060</id><snippet>global</snippet></ROW><ROW><id>2607060</id><snippet>variable1 = ''
variable2 = ''

def Init(var1, var2)
   global variable1, variable2
   variable1 = var1
   variable2 = var2
</snippet></ROW><ROW><id>2607107</id><snippet>manage.py</snippet></ROW><ROW><id>2607107</id><snippet>runfcgi</snippet></ROW><ROW><id>2607107</id><snippet>import sys
if sys.argv[1] == "runfcgi":
    sys.stderr = open("/path/to/my/django-error.log", "a")
</snippet></ROW><ROW><id>2607239</id><snippet>'wrb'</snippet></ROW><ROW><id>2607239</id><snippet>import tempfile
import gzip

with tempfile.TemporaryFile(mode='w+b') as f:
    f.write(data.decode('base64'))
    f.flush()
    f.seek(0)
    gzf = gzip.GzipFile(mode='rb', fileobj=f)
    print gzf.read()
</snippet></ROW><ROW><id>2607483</id><snippet>- url: /(.*\.(gif|png|jpg))
  static_files: static/\1
  upload: static/(.*\.(gif|png|jpg))
</snippet></ROW><ROW><id>2607531</id><snippet>self.__map = [[c.state | s for c in row] for row in self.__map]
</snippet></ROW><ROW><id>2607531</id><snippet>for row in self.__map:
    for c in row:
        c.state |= s
</snippet></ROW><ROW><id>2607531</id><snippet>list1 = []
for row in self.__map:
    list2 = []
    for c in row:
        list2.append(c.state | s)
    list1.append(list2)
self.__map = list1
</snippet></ROW><ROW><id>2607531</id><snippet>        list2.append(c.state |= s)
</snippet></ROW><ROW><id>2607531</id><snippet>list2</snippet></ROW><ROW><id>2607531</id><snippet>for</snippet></ROW><ROW><id>2608064</id><snippet> class notes(models.Model):
    created_by = models.ForeignKey(User, related_name="note_created_by_user")
    detail = models.ForeignKey(Details, related_name="noted_and_detailed")
</snippet></ROW><ROW><id>2608096</id><snippet>urlfetch</snippet></ROW><ROW><id>2608141</id><snippet>sys.stdout</snippet></ROW><ROW><id>2608141</id><snippet>idlestartup</snippet></ROW><ROW><id>2608141</id><snippet>print</snippet></ROW><ROW><id>2608141</id><snippet>print</snippet></ROW><ROW><id>2608141</id><snippet>idlestartup</snippet></ROW><ROW><id>2608141</id><snippet>Tk</snippet></ROW><ROW><id>2608141</id><snippet>__main__</snippet></ROW><ROW><id>2608141</id><snippet>sys.modules['__main__'].pprint = pprint
</snippet></ROW><ROW><id>2608180</id><snippet>
from django.db.models import ForeignKey

def get_fk_model(model, fieldname):
    '''returns None if not foreignkey, otherswise the relevant model'''
    field_object, model, direct, m2m = model._meta.get_field_by_name(fieldname)
    if not m2m and direct and isinstance(field_object, ForeignKey):
        return field_object.rel.to
    return None
</snippet></ROW><ROW><id>2608180</id><snippet>
fk_model = get_fk_model(MyModel, 'fieldname')
</snippet></ROW><ROW><id>2608368</id><snippet>getfilesystemencoding</snippet></ROW><ROW><id>2608368</id><snippet>os.environ</snippet></ROW><ROW><id>2608368</id><snippet>os.environ</snippet></ROW><ROW><id>2608368</id><snippet>%APPDATA%</snippet></ROW><ROW><id>2608368</id><snippet>C:\Documents and Settings\αβγ\Application Data</snippet></ROW><ROW><id>2608368</id><snippet>ctypes</snippet></ROW><ROW><id>2608368</id><snippet>def getEnvironmentVariable(name):
    name= unicode(name) # make sure string argument is unicode
    n= ctypes.windll.kernel32.GetEnvironmentVariableW(name, None, 0)
    if n==0:
        return None
    buf= ctypes.create_unicode_buffer(u'\0'*n)
    ctypes.windll.kernel32.GetEnvironmentVariableW(name, buf, n)
    return buf.value
</snippet></ROW><ROW><id>2608368</id><snippet>os.environ</snippet></ROW><ROW><id>2608628</id><snippet>date &gt;&gt; /home/example.com/test.txt</snippet></ROW><ROW><id>2608760</id><snippet>B()</snippet></ROW><ROW><id>2608760</id><snippet>B()</snippet></ROW><ROW><id>2608760</id><snippet>import sys
import inspect

class A(object):
    def __init__(self):
        self.vanilla_b = B()
        self.chocolate_b = B()

class B(object):
    def __init__(self):
        line_num = sys._getframe().f_back.f_lineno
        lines = inspect.getsourcelines( sys.modules[__name__] )[0]
        line = lines[line_num - 1]
        attr = line.split("=")[0].split(".")[1].strip()
        print "B() is being assigned to", attr

A()
</snippet></ROW><ROW><id>2608760</id><snippet>B() is being assigned to vanilla_b
B() is being assigned to chocolate_b
</snippet></ROW><ROW><id>2608760</id><snippet>__main__</snippet></ROW><ROW><id>2609154</id><snippet>for delimiter, (open_tag, close_tag) in replacements.iteritems(): # or .items() in py3k
</snippet></ROW><ROW><id>2609177</id><snippet>&gt;&gt;&gt; class MetaA(type):
...     def __new__(cls, name, bases, dct):
...         print 'MetaA.__new__'
...         return type(name, bases, dct)
...     def __init__(cls, name, bases, dct):
...         print 'MetaA.__init__'
... 
&gt;&gt;&gt; class A(object):
...     __metaclass__ = MetaA
... 
MetaA.__new__
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2609177</id><snippet>__new__</snippet></ROW><ROW><id>2609177</id><snippet>&gt;&gt;&gt; class MetaA(type):
...     def __new__(cls, name, bases, dct):
...         print 'MetaA.__new__'
...         return type.__new__(cls, name, bases, dct)
...     def __init__(cls, name, bases, dct):
...         print 'MetaA.__init__'
... 
&gt;&gt;&gt; class A(object):
...     __metaclass__ = MetaA
... 
MetaA.__new__
MetaA.__init__
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2609180</id><snippet>for f in *.csv; do
  python playlist.py "$f" "${f%.csv}list.txt"
done
</snippet></ROW><ROW><id>2609335</id><snippet>%z</snippet></ROW><ROW><id>2609335</id><snippet>%z</snippet></ROW><ROW><id>2609499</id><snippet>range</snippet></ROW><ROW><id>2609499</id><snippet>line = calc_range(first_line_num, int1)
</snippet></ROW><ROW><id>2609499</id><snippet>line</snippet></ROW><ROW><id>2609499</id><snippet>out_str += line</snippet></ROW><ROW><id>2609499</id><snippet>str()</snippet></ROW><ROW><id>2609593</id><snippet>nonlocal</snippet></ROW><ROW><id>2609593</id><snippet>...
ctr = [0]
def keyfunc(x):
    ctr[0] += 1
    status("POSTCODE", "Sorting postcodes", ctr, len(self.postcodes))
    return x
...
</snippet></ROW><ROW><id>2609593</id><snippet>ctr[0]</snippet></ROW><ROW><id>2609593</id><snippet>ctr</snippet></ROW><ROW><id>2610274</id><snippet>i = arange(255)
j = arange(255)
x = simple_func1(i)
y = simple_func2(j)
y = y.reshape(-1,1)    

A = alpha * x * y + beta * x**2 + gamma * y**2 # broadcasting is your friend here
</snippet></ROW><ROW><id>2610274</id><snippet>B = empty(A.shape+(3,))
B[:,:,0] = A
B[:,:,1] = 1 # broadcasting again
B[:,:,2] = 0
</snippet></ROW><ROW><id>2610490</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen("http://yoursite.com")
soup = BeautifulSoup(page)

# See the docs on how to search through the soup. I'm not sure what
# you're looking for so my example stops here :)
</snippet></ROW><ROW><id>2610623</id><snippet>foo</snippet></ROW><ROW><id>2610623</id><snippet>bar</snippet></ROW><ROW><id>2610623</id><snippet>^(?!.*bar).*foo
</snippet></ROW><ROW><id>2610661</id><snippet>def depthGenerator(seq, depth):
    if depth==0:
        for x in seq:
            yield x[:2] #strip subsequences
        return

    for x in seq:
        if len(x)==3:   #has subsequence?
            for y in depthGenerator(x[2], depth-1):
                yield y
</snippet></ROW><ROW><id>2610661</id><snippet>&gt;&gt;&gt; list(depthGenerator(PLACES, 1))
[('AB', 'Alberta'), ('BC', 'British Columbia'), ('AL', 'Alabama'), ('AK', 'Alaska')]
</snippet></ROW><ROW><id>2610714</id><snippet>def Property(f):  
    fget, fset, fdel = f()
    fdoc = f.__doc__
    return property(fget, fset, fdel, fdoc)

class Foo(object):
    @Property
    def myprop():
        "Property docstring"
        def fget(self):  
            return 'fget' 
        def fset(self, x):
            pass
        def fdel(self):
            pass
        return fget, fset, fdel
</snippet></ROW><ROW><id>2610714</id><snippet>def Property(cls):
    fget = cls.__dict__.get('fget')
    fset = cls.__dict__.get('fset')
    fdel = cls.__dict__.get('fdel')
    fdoc = cls.__doc__
    return property(fget, fset, fdel, fdoc)
</snippet></ROW><ROW><id>2610714</id><snippet>class Foo(object):
    @Property
    class myprop(object):
        "Property docstring"
        def fget(self):
            return 'fget'
        def fset(self, x):
            pass
        def fdel(self):
            pass
</snippet></ROW><ROW><id>2610714</id><snippet>class Foo(object):
    @property
    def myprop(self):
        "Property docstring"
        return 'fget'
    @myprop.setter
    def myprop(self, x):
            pass
    @myprop.deleter
    def myprop(self):
            pass
</snippet></ROW><ROW><id>2610765</id><snippet>mysql&gt; create table so (a int, b char, c char, d char, e char, f char, `key` int, dupe char);
Query OK, 0 rows affected (0.05 sec)

mysql&gt; insert into so values (1, 'd', 'c', 'f', 'k', 'l', 1, 'x'), (2, 'g', null, 'h', null, 'j', 1, null), (3, 'i', null, 'h', 'u', 'u', 2, null), (4, 'u', 'r', null, null, 't', 2, 'x');
Query OK, 4 rows affected (0.00 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql&gt; select * from so order by a;
+------+------+------+------+------+------+------+------+
| a    | b    | c    | d    | e    | f    | key  | dupe |
+------+------+------+------+------+------+------+------+
|    1 | d    | c    | f    | k    | l    |    1 | x    |
|    2 | g    | NULL | h    | NULL | j    |    1 | NULL |
|    3 | i    | NULL | h    | u    | u    |    2 | NULL |
|    4 | u    | r    | NULL | NULL | t    |    2 | x    |
+------+------+------+------+------+------+------+------+
4 rows in set (0.00 sec)
</snippet></ROW><ROW><id>2610765</id><snippet>Python 2.6.5 (r265:79063, Mar 26 2010, 22:43:05) 
[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect(host="127.0.0.1", db="test")
&gt;&gt;&gt; c = db.cursor()
&gt;&gt;&gt; c.execute("SELECT a, b, c, d, e, f, `key`, dupe FROM so")
4L
&gt;&gt;&gt; rows = c.fetchall()
&gt;&gt;&gt; rows
((1L, 'd', 'c', 'f', 'k', 'l', 1L, 'x'), (4L, 'u', 'r', None, None, 't', 2L, 'x'), (2L, 'g', None, 'h', None, 'j', 1L, None), (3L, 'i', None, 'h', 'u', 'u', 2L, None))
&gt;&gt;&gt; data = dict()
&gt;&gt;&gt; for row in rows:
...  key, isDupe = row[-2], row[-1]
...  if key not in data:
...   data[key] = list(row[:-1])
...  else:
...   for i in range(len(row)-1):
...    if data[key][i] is None or (not isDupe and row[i] is not None):
...     data[key][i] = row[i]
... 
&gt;&gt;&gt; data
{1L: [2L, 'g', 'c', 'h', 'k', 'j', 1L], 2L: [3L, 'i', 'r', 'h', 'u', 'u', 2L]}
</snippet></ROW><ROW><id>2610911</id><snippet>self.daemon = True</snippet></ROW><ROW><id>2610911</id><snippet>Worker</snippet></ROW><ROW><id>2610911</id><snippet>SIGTERM, SIGINT</snippet></ROW><ROW><id>2610911</id><snippet>Worker</snippet></ROW><ROW><id>2610911</id><snippet>PID</snippet></ROW><ROW><id>2610911</id><snippet>os.getpid()</snippet></ROW><ROW><id>2610911</id><snippet>self.queue.get()</snippet></ROW><ROW><id>2610911</id><snippet>waiting = True
while waiting:
    # see if Parent is at home
    if os.getppid() != self.parentPID:
        # woe is me! My Parent has died!
        sys.exit() # or whatever you want to do to quit the Worker process
    try:
        # I picked the timeout randomly; use what works
        data = self.queue.get(block=False, timeout=0.1)
        waiting = False
    except queue.Queue.Empty:
        continue # try again
# now do stuff with data
</snippet></ROW><ROW><id>2610911</id><snippet>init</snippet></ROW><ROW><id>2610911</id><snippet>lauchd</snippet></ROW><ROW><id>2610911</id><snippet>def parentIsAlive(self):
    try:
        # try to call Parent
        os.kill(self.parentPID, 0)
    except OSError:
        # *beeep* oh no! The phone's disconnected!
        return False
    else:
        # *ring* Hi mom!
        return True
</snippet></ROW><ROW><id>2610911</id><snippet>:-D</snippet></ROW><ROW><id>2611547</id><snippet>sql = "INSERT INTO mytable (a,b,c) VALUES (%(qwe)s, %(asd)s, %(zxc)s);"
data = {'qwe':1, 'asd':2, 'zxc':None}

conn = MySQLdb.connect(**params)

cursor = conn.cursor()
cursor.execute(sql, data)
cursor.close()

conn.close()
</snippet></ROW><ROW><id>2611897</id><snippet>cls.__bases__
</snippet></ROW><ROW><id>2611897</id><snippet>&gt;&gt;&gt; str.__bases__
(&lt;type 'basestring'&gt;,)
</snippet></ROW><ROW><id>2611897</id><snippet>&gt;&gt;&gt; class A(object):
...   pass
... 
&gt;&gt;&gt; class B(object):
...   pass
... 
&gt;&gt;&gt; class C(A, B):
...   pass
... 
&gt;&gt;&gt; C.__bases__
(&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;)
</snippet></ROW><ROW><id>2611917</id><snippet>M = 10000
N = 10000

def thegoodone():
   for x in xrange(N):
       for y in xrange(M):
           pass

def thebadone():
    x = 0
    while x &lt; N:
        y = 0
        while y &lt; M:
            y += 1
        x += 1
</snippet></ROW><ROW><id>2611917</id><snippet>$ python -mtimeit -s'import loop' 'loop.thegoodone()'
10 loops, best of 3: 3.45 sec per loop
$ python -mtimeit -s'import loop' 'loop.thebadone()'
10 loops, best of 3: 10.6 sec per loop
</snippet></ROW><ROW><id>2611960</id><snippet>hg serve</snippet></ROW><ROW><id>2611960</id><snippet>python -m 'wsgiref.simple_server'
</snippet></ROW><ROW><id>2612264</id><snippet>dir(MyClass)</snippet></ROW><ROW><id>2612451</id><snippet>import os, sys
import Image

size = 128, 128

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + ".thumbnail"
    if infile != outfile:
        try:
            im = Image.open(infile)
            im.thumbnail(size)
            im.save(outfile, "JPEG")
        except IOError:
            print "cannot create thumbnail for", infile
</snippet></ROW><ROW><id>2612523</id><snippet>options={
    'py2exe':{'includes':['yourextensionname_without_pyd']}
}
</snippet></ROW><ROW><id>2612541</id><snippet>s</snippet></ROW><ROW><id>2612541</id><snippet>s[i]</snippet></ROW><ROW><id>2612541</id><snippet>append()</snippet></ROW><ROW><id>2612541</id><snippet>None</snippet></ROW><ROW><id>2612541</id><snippet>A</snippet></ROW><ROW><id>2612541</id><snippet>except</snippet></ROW><ROW><id>2612541</id><snippet>try:
    s.append(s[i]+A+B)
except TypeError:
    print "Failed to add", s[i], ",", A, ",", "and", B
    raise
</snippet></ROW><ROW><id>2612541</id><snippet>raise</snippet></ROW><ROW><id>2612542</id><snippet>append</snippet></ROW><ROW><id>2612542</id><snippet>B = l.append(...)</snippet></ROW><ROW><id>2612542</id><snippet>B.append(l[i]+A+B)</snippet></ROW><ROW><id>2612542</id><snippet>i</snippet></ROW><ROW><id>2612542</id><snippet>l</snippet></ROW><ROW><id>2612542</id><snippet>IndexError</snippet></ROW><ROW><id>2612577</id><snippet>.findAll()</snippet></ROW><ROW><id>2612577</id><snippet>inputTag = soup.findAll(attrs={"name" : "stainfo"})
</snippet></ROW><ROW><id>2612577</id><snippet>inputTag</snippet></ROW><ROW><id>2612577</id><snippet> output = inputTag[0]['value']
</snippet></ROW><ROW><id>2612577</id><snippet>.find()</snippet></ROW><ROW><id>2612577</id><snippet> inputTag = soup.find(attrs={"name": "stainfo"})
 output = inputTag['value']
</snippet></ROW><ROW><id>2612594</id><snippet>&gt;&gt;&gt; a = "abcd"
&gt;&gt;&gt; a[0]
'a'
&gt;&gt;&gt; a[2]
'c'
</snippet></ROW><ROW><id>2612615</id><snippet>getattr</snippet></ROW><ROW><id>2612615</id><snippet>setattr</snippet></ROW><ROW><id>2612615</id><snippet>getattr(object,attrname)
setattr(object,attrname,value)
</snippet></ROW><ROW><id>2612615</id><snippet>x = getattr(t,"attr1")
setattr(t,'attr1',21)
</snippet></ROW><ROW><id>2612730</id><snippet>l = [ord(a) ^ ord(b) for a,b in zip(s1,s2)]
</snippet></ROW><ROW><id>2612730</id><snippet>def sxor(s1,s2):    
    # convert strings to a list of character pair tuples
    # go through each tuple, converting them to ASCII code (ord)
    # perform exclusive or on the ASCII code
    # then convert the result back to ASCII (chr)
    # merge the resulting array of characters as a string
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))
</snippet></ROW><ROW><id>2612815</id><snippet>new_list = old_list[:]
</snippet></ROW><ROW><id>2612815</id><snippet>list()</snippet></ROW><ROW><id>2612815</id><snippet>new_list = list(old_list)
</snippet></ROW><ROW><id>2612815</id><snippet>copy.copy()</snippet></ROW><ROW><id>2612815</id><snippet>import copy
new_list = copy.copy(old_list)
</snippet></ROW><ROW><id>2612815</id><snippet>list()</snippet></ROW><ROW><id>2612815</id><snippet>old_list</snippet></ROW><ROW><id>2612815</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>2612815</id><snippet>import copy
new_list = copy.deepcopy(old_list)
</snippet></ROW><ROW><id>2612815</id><snippet>import copy

class Foo(object):
    def __init__(self, val):
         self.val = val

    def __repr__(self):
        return str(self.val)

foo = Foo(1)

a = ['foo', foo]
b = a[:]
c = list(a)
d = copy.copy(a)
e = copy.deepcopy(a)

# edit orignal list and instance 
a.append('baz')
foo.val = 5

print "original: %r\n slice: %r\n list(): %r\n copy: %r\n deepcopy: %r" \
       % (a, b, c, d, e)
</snippet></ROW><ROW><id>2612815</id><snippet>original: ['foo', 5, 'baz']
slice: ['foo', 5]
list(): ['foo', 5]
copy: ['foo', 5]
deepcopy: ['foo', 1]
</snippet></ROW><ROW><id>2612851</id><snippet>struct {                   11
    char a;      012345678901
    short b;     ------------
    char c;      axbbcxxxdddd
    int d;
};
</snippet></ROW><ROW><id>2612851</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('BHBL',1,2,3,4)
'\x01\x00\x02\x00\x03\x00\x00\x00\x04\x00\x00\x00'
&gt;&gt;&gt; struct.calcsize('BHBL')
12
</snippet></ROW><ROW><id>2612851</id><snippet>&gt;&gt;&gt; struct.calcsize('=BHBL')
8
&gt;&gt;&gt; struct.pack('=BHBL',1,2,3,4)
'\x01\x02\x00\x03\x04\x00\x00\x00'
</snippet></ROW><ROW><id>2612851</id><snippet>struct A {       struct B {
    short a;         int a;
    char b;          char b;
};               };
</snippet></ROW><ROW><id>2612851</id><snippet>&gt;&gt;&gt; struct.pack('LB',1,2)
'\x01\x00\x00\x00\x02'
&gt;&gt;&gt; struct.pack('LBLB',1,2,3,4)
'\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04'
</snippet></ROW><ROW><id>2612954</id><snippet>input()</snippet></ROW><ROW><id>2612954</id><snippet>d</snippet></ROW><ROW><id>2612954</id><snippet>"d"</snippet></ROW><ROW><id>2612954</id><snippet>raw_input()</snippet></ROW><ROW><id>2613173</id><snippet>PickleType</snippet></ROW><ROW><id>2613433</id><snippet>import urllib, urllib2
from BeautifulSoup import BeautifulSoup as bs_parse

data = urllib.urlencode(values)
req  = urllib2.Request(url, data)
res  = urllib2.urlopen(req)
page = bs_parse(res.read())
</snippet></ROW><ROW><id>2613456</id><snippet>html=urllib2.urlopen("http://somewhere").read()
for item in html.split("&lt;/title&gt;"):
    if "&lt;title&gt;" in item:
        print item[ item.find("&lt;title&gt;")+7: ]
</snippet></ROW><ROW><id>2613587</id><snippet>tag</snippet></ROW><ROW><id>2613587</id><snippet>tag.findNextSibling('h2')
</snippet></ROW><ROW><id>2613587</id><snippet>&lt;h2&gt;This is hell!&lt;/h2&gt;
</snippet></ROW><ROW><id>2613587</id><snippet>tag.nextSibling</snippet></ROW><ROW><id>2613587</id><snippet>u'\n'</snippet></ROW><ROW><id>2613587</id><snippet>u'\n'</snippet></ROW><ROW><id>2613587</id><snippet>tag.findNextSibling(text=None)
</snippet></ROW><ROW><id>2613587</id><snippet>tag.nextSibling.nextSibling
</snippet></ROW><ROW><id>2613587</id><snippet>tag</snippet></ROW><ROW><id>2613587</id><snippet>tag.nextSibling</snippet></ROW><ROW><id>2613587</id><snippet>None</snippet></ROW><ROW><id>2613587</id><snippet>tag.nextSibling.nextSibling</snippet></ROW><ROW><id>2613587</id><snippet>AttributeError</snippet></ROW><ROW><id>2614018</id><snippet>runserver --noreload</snippet></ROW><ROW><id>2614548</id><snippet>&gt;&gt;&gt; bytes((7,8,9,10,11))
b'\x07\x08\t\n\x0b'
&gt;&gt;&gt; bytes(range(7,12))
b'\x07\x08\t\n\x0b'
&gt;&gt;&gt; bytes((0b1,0b0,0b1))
b'\x01\x00\x01'
</snippet></ROW><ROW><id>2614642</id><snippet>__init__</snippet></ROW><ROW><id>2614642</id><snippet>parent</snippet></ROW><ROW><id>2614642</id><snippet>class Tab1(wx.Panel):
    def __init__(self, parent):
        self.parent = parent
        ...etc, etc...
</snippet></ROW><ROW><id>2614642</id><snippet>self.parent.GetPage(x)</snippet></ROW><ROW><id>2614642</id><snippet>x</snippet></ROW><ROW><id>2614642</id><snippet>self.jaddbutton.Disable()</snippet></ROW><ROW><id>2614642</id><snippet>othertab = self.parent.GetPage(1)
othertab.jaddbutton.Disable()
</snippet></ROW><ROW><id>2614772</id><snippet>random.shuffle(required_playlist)
</snippet></ROW><ROW><id>2614772</id><snippet>from collections import defaultdict
actual_plays = defaultdict(int)
for song in required_playlist: actual_plays[song] += 1
</snippet></ROW><ROW><id>2614951</id><snippet>TRIM(LEADING ... FROM ...)</snippet></ROW><ROW><id>2614951</id><snippet>SELECT *
FROM song
WHERE SUBSTRING(TRIM(LEADING 'The ' FROM TRIM(LEADING 'A ' FROM title)), 1, 1) = 'B'
ORDER BY TRIM(LEADING 'The ' FROM TRIM(LEADING 'A ' FROM title))
</snippet></ROW><ROW><id>2614951</id><snippet>CREATE TABLE song (title NVARCHAR(100) NOT NULL);
INSERT INTO song (title) VALUES
('The Bar'),
('Baz A'),
('Foo'),
('Qux'),
('A Quux');
</snippet></ROW><ROW><id>2614951</id><snippet>ORDER BY</snippet></ROW><ROW><id>2614983</id><snippet>popen('xsel -pi')</snippet></ROW><ROW><id>2614983</id><snippet>def select_xsel(text):
    import subprocess
    xsel_proc = subprocess.Popen(['xsel', '-pi'], stdin=subprocess.PIPE)
    xsel_proc.communicate(some_text)
</snippet></ROW><ROW><id>2614983</id><snippet>/usr/bin/pbcopy</snippet></ROW><ROW><id>2614983</id><snippet>xsel_proc = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>2614983</id><snippet>os.name</snippet></ROW><ROW><id>2614983</id><snippet>import os, subprocess
def select_text(text):
    if os.name == "posix":
        # try Mac first
        try:
            xsel_proc = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
        except:
            # try Linux version
            xsel_proc = subprocess.Popen(['xsel', '-pi'], stdin=subprocess.PIPE)
    elif os.name == "nt":
        # Windows...
</snippet></ROW><ROW><id>2615120</id><snippet>import logging

logging.debug('Debug Message')

if some_error:
   logging.error('Error Message')
</snippet></ROW><ROW><id>2615300</id><snippet>  File "D:\Projects\Reuters\ReutersParser.py", line 38, in __init__
    SGMLParser.__init__(self, verbose)
NameError: global name 'sgmllib' is not defined
</snippet></ROW><ROW><id>2615300</id><snippet>sgmllib.SGMLParser.__init__(self, verbose)</snippet></ROW><ROW><id>2615352</id><snippet>glib.timeout_add</snippet></ROW><ROW><id>2615352</id><snippet>import gtk
import glib

def yieldsleep(func):
    def start(*args, **kwds):
        iterable = func(*args, **kwds)
        def step(*args, **kwds):
            try:
                time = next(iterable)
                glib.timeout_add_seconds(time, step)
            except StopIteration:
                pass
        glib.idle_add(step)
    return start

class Fun(object):
    def __init__(self):
        window = gtk.Window()

        vbox = gtk.VBox()

        btnone = gtk.Button('one')
        btnone.connect('clicked', self.click_one)
        btnone.show()
        vbox.pack_start(btnone)

        btntwo = gtk.Button('two')
        btntwo.connect('clicked', self.click_two)
        btntwo.show()
        vbox.pack_start(btntwo)

        vbox.show()
        window.add(vbox)
        window.show()

    @yieldsleep
    def click_one(self, widget, data=None):
        yield 1 #time.sleep(1)
        print '1'
        yield 1 #time.sleep(1)
        print '2'
        yield 1 #time.sleep(1)
        print '3'

    @yieldsleep
    def click_two(self, widget, data=None):
        yield 1 #time.sleep(1)
        print '4'
        yield 1 #time.sleep(1)
        print '5'
        yield 1 #time.sleep(1)
        print '6'

do = Fun()
gtk.main()
</snippet></ROW><ROW><id>2615556</id><snippet>__file__</snippet></ROW><ROW><id>2615556</id><snippet>py_file= os.path.abspath(__file__) # path to main.py
py_dir = os.path.dirname(py_file) # path to the parent dir of main.py
txt_file = os.path.join(py_dir, 'info.txt') # path to info.txt
</snippet></ROW><ROW><id>2615603</id><snippet>import sqlite3   
import pysqlite2 
print sqlite3.sqlite_version   # should be 3.6.23.1
print pysqlite2.__path__       # eg C:\\Python26\\lib\\site-packages\\pysqlite2
</snippet></ROW><ROW><id>2615603</id><snippet>from sqlalchemy.interfaces import PoolListener
class ForeignKeysListener(PoolListener):
    def connect(self, dbapi_con, con_record):
        db_cursor = dbapi_con.execute('pragma foreign_keys=ON')

engine = create_engine(database_url, listeners=[ForeignKeysListener()])
</snippet></ROW><ROW><id>2615603</id><snippet># example
ins = Coverage.__table__.insert().values(id = 99,
                                    description = 'Wrong',
                                    area = 42.0,
                                    wall_id = 99,  # invalid fkey id
                                    type_id = 99)  # invalid fkey_id
session.execute(ins) 
</snippet></ROW><ROW><id>2615609</id><snippet>xkcdpicfile=open("C:\\Documents and Settings\\John Gann\\Desktop\\xkcd.png",
                 "wb")
</snippet></ROW><ROW><id>2615609</id><snippet>b</snippet></ROW><ROW><id>2615609</id><snippet>"wb"</snippet></ROW><ROW><id>2615609</id><snippet>"w"</snippet></ROW><ROW><id>2615609</id><snippet>print chunk</snippet></ROW><ROW><id>2615609</id><snippet>print repr(chunk)</snippet></ROW><ROW><id>2615609</id><snippet>len(chunk)</snippet></ROW><ROW><id>2615613</id><snippet>self.msg.done()
</snippet></ROW><ROW><id>2615613</id><snippet>msgbox().done()</snippet></ROW><ROW><id>2615613</id><snippet>done</snippet></ROW><ROW><id>2615613</id><snippet>done</snippet></ROW><ROW><id>2615613</id><snippet>def done(self):
    self.wTree.get_widget('dialog1').destroy()
</snippet></ROW><ROW><id>2615613</id><snippet>msgbox</snippet></ROW><ROW><id>2615613</id><snippet>object</snippet></ROW><ROW><id>2615613</id><snippet>msgbox</snippet></ROW><ROW><id>2615613</id><snippet>msgbox.done</snippet></ROW><ROW><id>2615613</id><snippet>class Msgbox(object):
    ...
    def __del__(self):
        self.wTree.get_widget('dialog1').destroy()

class Fun(object):
    ...
    @yieldsleep
    def one(self, widget, data=None):
        self.msg = Msgbox('Please wait...','')
        yield 500
        # actually, you probably need to delete the old self.msg
        # so it gets destroyed before the new message box is created
        del self.msg
        self.msg = Msgbox('Done!','')
</snippet></ROW><ROW><id>2615700</id><snippet>CoreFoundation</snippet></ROW><ROW><id>2615700</id><snippet>CoreFoundation</snippet></ROW><ROW><id>2615700</id><snippet>import locale
locale.getdefautlocale()
</snippet></ROW><ROW><id>2615754</id><snippet>url</snippet></ROW><ROW><id>2616025</id><snippet>2.*</snippet></ROW><ROW><id>2616025</id><snippet>name, value</snippet></ROW><ROW><id>2616025</id><snippet>os.environ['QUERY_STRING']</snippet></ROW><ROW><id>2616025</id><snippet>?</snippet></ROW><ROW><id>2616203</id><snippet>sys.executable</snippet></ROW><ROW><id>2616203</id><snippet>sysconfig</snippet></ROW><ROW><id>2616203</id><snippet>sys</snippet></ROW><ROW><id>2616262</id><snippet>def trimmedexceptions(type, value, tb, pylibdir=None, lev=None):
    """trim system packages from the exception printout"""
    if pylibdir is None:
        import traceback, distutils.sysconfig
        pylibdir = distutils.sysconfig.get_python_lib(1,1)
        nlev = trimmedexceptions(type, value, tb, pylibdir, 0)
        traceback.print_exception(type, value, tb, nlev)
    else:
        fn = tb.tb_frame.f_code.co_filename
        if tb.tb_next is None or fn.startswith(pylibdir):
            return lev
        else:
            return trimmedexceptions(type, value, tb.tb_next, pylibdir, lev+1)

import sys
sys.excepthook=trimmedexceptions

# --- test code ---

def f1(): f2()
def f2(): f3()
def f3():
    import xmlrpclib
    proxy = xmlrpclib.ServerProxy('http://nosuchserver')
    proxy.f()

f1()
</snippet></ROW><ROW><id>2616262</id><snippet>Traceback (most recent call last):
  File "./tsttraceback.py", line 47, in &lt;module&gt;
    f1()
  File "./tsttraceback.py", line 40, in f1
    def f1(): f2()
  File "./tsttraceback.py", line 41, in f2
    def f2(): f3()
  File "./tsttraceback.py", line 45, in f3
    proxy.f()
gaierror: [Errno -2] Name or service not known
</snippet></ROW><ROW><id>2616486</id><snippet>newGameStep2()</snippet></ROW><ROW><id>2616486</id><snippet>return newStep2Choice</snippet></ROW><ROW><id>2616486</id><snippet>return newGameStep2()
</snippet></ROW><ROW><id>2616590</id><snippet>for line in ['x_min', 'x_max', 'y_min', 'y_max']:

   setattr(self, line, config.getfloat('geography', line.replace('_', '')))
</snippet></ROW><ROW><id>2616685</id><snippet>contents</snippet></ROW><ROW><id>2616685</id><snippet>&gt;&gt;&gt; for x in schoolname:
&gt;&gt;&gt;    print x.contents
[u'A B Paterson College, Arundel, QLD']    
</snippet></ROW><ROW><id>2616818</id><snippet>r' .... (?P&lt;text&gt;.*?)(\n\n|$)'
</snippet></ROW><ROW><id>2616821</id><snippet>javascript:__doPostBack('...
</snippet></ROW><ROW><id>2616821</id><snippet>data</snippet></ROW><ROW><id>2616821</id><snippet>urlopen</snippet></ROW><ROW><id>2616824</id><snippet>_get_server</snippet></ROW><ROW><id>2616824</id><snippet>hash % len(buckets)</snippet></ROW><ROW><id>2617114</id><snippet>raw_input</snippet></ROW><ROW><id>2617114</id><snippet>open</snippet></ROW><ROW><id>2617114</id><snippet>os.environ.get</snippet></ROW><ROW><id>2617114</id><snippet>raw_input</snippet></ROW><ROW><id>2617114</id><snippet>open</snippet></ROW><ROW><id>2617114</id><snippet>import os
def say_hello(input_func):
    name = input_func()
    return "Hello " + name

def prompt_for_name():
    return raw_input("What is your name? ")

print say_hello(prompt_for_name)
# Normally would pass in methods, but lambdas can be used for brevity
print say_hello(lambda: open("a.txt").readline())
print say_hello(lambda: os.environ.get("USER"))
</snippet></ROW><ROW><id>2617114</id><snippet>def test_say_hello():
    output = say_hello(lambda: "test")
    assert(output == "Hello test")
</snippet></ROW><ROW><id>2617230</id><snippet>import sys
import linecache
import random

class Tracer(object):
    def __init__(self):
        self.lastframe = None

    def traceit(self, frame, event, arg):
        if event == "line":
            lineno = frame.f_lineno
            filename = frame.f_globals["__file__"]
            if filename == "&lt;stdin&gt;":
                filename = "traceit.py"
            if (filename.endswith(".pyc") or
                filename.endswith(".pyo")):
                filename = filename[:-1]
            name = frame.f_globals["__name__"]
            line = linecache.getline(filename, lineno)
            if frame.f_back is self.lastframe:
                print "%s:%s:%s: %s" % (name,  lineno,frame.f_code.co_name , line.rstrip())
            else:
                print "%s:%s:%s(%s)" % (name,  lineno,frame.f_code.co_name , str.join(', ', ("%s=%r" % item for item in frame.f_locals.iteritems())))

                print "%s:%s:%s: %s" % (name,  lineno,frame.f_code.co_name , line.rstrip())
                #print frame.f_locals
            self.lastframe = frame.f_back
        return self.traceit


def main():
    print "In main"
    for i in range(5):
        print i, random.randrange(0, 10)
    print "Done."

sys.settrace(Tracer().traceit)
main()
</snippet></ROW><ROW><id>2617689</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>2617689</id><snippet>django.contrib.admin</snippet></ROW><ROW><id>2617689</id><snippet>manage.py reset admin</snippet></ROW><ROW><id>2617689</id><snippet>manage.py reset django.contrib.admin</snippet></ROW><ROW><id>2617689</id><snippet>virtualenv</snippet></ROW><ROW><id>2617696</id><snippet>num = raw_input("Choose a number: ")
</snippet></ROW><ROW><id>2617696</id><snippet>num</snippet></ROW><ROW><id>2617696</id><snippet>num = int(num)</snippet></ROW><ROW><id>2617696</id><snippet>raw_input</snippet></ROW><ROW><id>2617696</id><snippet>input</snippet></ROW><ROW><id>2617696</id><snippet>True</snippet></ROW><ROW><id>2617696</id><snippet>False</snippet></ROW><ROW><id>2617733</id><snippet>__import__</snippet></ROW><ROW><id>2617733</id><snippet>try</snippet></ROW><ROW><id>2617733</id><snippet>except</snippet></ROW><ROW><id>2617733</id><snippet>for module_name in mymods:
  try:
    __import__(module_name)
  except ImportError:
    print "Module %s not found." %(module_name)
</snippet></ROW><ROW><id>2617733</id><snippet>import imp
for module_name in mymods:
  try:
    imp.find_module(module_name)
  except ImportError:
    print "Module %s not found." %(module_name)
</snippet></ROW><ROW><id>2617733</id><snippet>import</snippet></ROW><ROW><id>2617803</id><snippet>GET /index.html HTTP/1.1
host: www.blah.com
&lt;enter&gt; &lt;enter&gt;
</snippet></ROW><ROW><id>2617930</id><snippet>str</snippet></ROW><ROW><id>2617930</id><snippet>bytes</snippet></ROW><ROW><id>2617930</id><snippet>str</snippet></ROW><ROW><id>2617930</id><snippet>some_data</snippet></ROW><ROW><id>2617930</id><snippet>some_text.encode('utf8')</snippet></ROW><ROW><id>2617930</id><snippet>data.encode('base64')</snippet></ROW><ROW><id>2617930</id><snippet>data.encode('base64')</snippet></ROW><ROW><id>2617930</id><snippet>.encode()</snippet></ROW><ROW><id>2617930</id><snippet>.encode()</snippet></ROW><ROW><id>2617930</id><snippet>data.encode('base64').encode('utf8')</snippet></ROW><ROW><id>2617930</id><snippet>data.decode('latin1')</snippet></ROW><ROW><id>2617930</id><snippet>latin1</snippet></ROW><ROW><id>2618246</id><snippet>create.py</snippet></ROW><ROW><id>2618246</id><snippet># Code that creates folder, statusCode, statusMessage, groupId
response = render_to_response('create.xml', {'statusCode': statusCode,
                                                   'statusMessage': statusMessage,
                                                   'groupId': groupId,
                                                   }, mimetype = 'text/xml')
# Some other code, maybe an import pdb; pdb.set_trace() 
# So that you can inspect the response inside of a python shell.
return response
</snippet></ROW><ROW><id>2618441</id><snippet>__init__.py</snippet></ROW><ROW><id>2618441</id><snippet>__init__.py</snippet></ROW><ROW><id>2618478</id><snippet>randint</snippet></ROW><ROW><id>2618478</id><snippet>rand</snippet></ROW><ROW><id>2618478</id><snippet>def use_multinomial(length, num_points):
    probs = ones(length)/float(length)
    return multinomial(1, probs, num_points)

def use_rand(length, num_points):
    return [randint(1,length) for _ in range(num_points)]
</snippet></ROW><ROW><id>2618478</id><snippet>numpy.random.randint</snippet></ROW><ROW><id>2618478</id><snippet>def use_np_randint(length, num_point):
    return nprandint(1, length, num_points)
</snippet></ROW><ROW><id>2618478</id><snippet>Multinomial took: 13.6279997826 seconds
Rand took: 0.185000181198 seconds
NP randint took: 0.00100016593933 seconds
</snippet></ROW><ROW><id>2618946</id><snippet>foobar</snippet></ROW><ROW><id>2618946</id><snippet>from itertools import combinations
[j for i in range(len(foobar)+1) for j in combinations(foobar,i)]
</snippet></ROW><ROW><id>2618946</id><snippet>from itertools import combinations
[j for i in range(len(foobar)+1) for j in combinations(foobar,i)
 if minval &lt;= sum(f.bar for f in j) &lt;= maxval]
</snippet></ROW><ROW><id>2618946</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; class Foo(object):
...     def __init__(self, bar):
...         self.bar=bar
...     def __repr__(self):
...         return  "&lt;Foo: %s&gt;"%self.bar
... 
&gt;&gt;&gt; foobar=[Foo(5),Foo(10),Foo(15)]
&gt;&gt;&gt; minval=5
&gt;&gt;&gt; maxval=25
&gt;&gt;&gt; [j for i in range(len(foobar)+1) for j in combinations(foobar,i) 
     if minval &lt;= sum(f.bar for f in j) &lt;= maxval]
[(&lt;Foo: 5&gt;,), (&lt;Foo: 10&gt;,), (&lt;Foo: 15&gt;,), (&lt;Foo: 5&gt;, &lt;Foo: 10&gt;), (&lt;Foo: 5&gt;, &lt;Foo: 15&gt;), (&lt;Foo: 10&gt;, &lt;Foo: 15&gt;)]
</snippet></ROW><ROW><id>2618946</id><snippet>&gt;&gt;&gt; [list(j) for i in range(len(foobar)+1) for j in combinations(foobar,i) if minval &lt;= sum(f.bar for f in j) &lt;= maxval ]
[[&lt;Foo: 5&gt;], [&lt;Foo: 10&gt;], [&lt;Foo: 15&gt;], [&lt;Foo: 5&gt;, &lt;Foo: 10&gt;], [&lt;Foo: 5&gt;, &lt;Foo: 15&gt;], [&lt;Foo: 10&gt;, &lt;Foo: 15&gt;]]
</snippet></ROW><ROW><id>2618981</id><snippet>dbm</snippet></ROW><ROW><id>2618981</id><snippet>dbm</snippet></ROW><ROW><id>2618981</id><snippet>shelve</snippet></ROW><ROW><id>2618981</id><snippet>anydbm</snippet></ROW><ROW><id>2619191</id><snippet>import datetime
import time
src = "161,00:00:00,8.19,1,4.46,4,7.87,4,6.54,null,4.45,6,2010-04-12"
asFloat = lambda x : float(x)
asInt = lambda x : int(x)
asTime = lambda x : datetime.datetime(*time.strptime(x,'%H:%M:%S')[:7]).time()
asDate = lambda x : datetime.datetime(*time.strptime(x,'%Y-%m-%d')[:3]).date()
asNone = lambda x : None if x=='null' else int('ValueError')
converters = (asDate,asTime,asInt,asFloat,asNone,)
def convert(x):
  for cnv in converters:
    try:
      return cnv(x)
    except ValueError:
      pass
  return x

clean_data = [convert(s) for s in src.split(',')]
print clean_data
</snippet></ROW><ROW><id>2619191</id><snippet>[161, datetime.time(0, 0), 8.1899999999999995, 1, 4.46, 4, 
 7.8700000000000001, 4, 6.54, None, 4.4500000000000002, 6, 
 datetime.date(2010, 4, 12)]
</snippet></ROW><ROW><id>2619196</id><snippet>r'^test\.(?P&lt;extension&gt;(json)|(xml))$'</snippet></ROW><ROW><id>2619363</id><snippet>socketserver</snippet></ROW><ROW><id>2619363</id><snippet>asyncore</snippet></ROW><ROW><id>2619363</id><snippet>twisted</snippet></ROW><ROW><id>2619472</id><snippet>pressed</snippet></ROW><ROW><id>2619472</id><snippet>clicked</snippet></ROW><ROW><id>2619472</id><snippet>released</snippet></ROW><ROW><id>2619472</id><snippet>pressed</snippet></ROW><ROW><id>2619472</id><snippet>clicked</snippet></ROW><ROW><id>2619472</id><snippet>pressed</snippet></ROW><ROW><id>2619472</id><snippet>released</snippet></ROW><ROW><id>2619472</id><snippet>clicked</snippet></ROW><ROW><id>2619595</id><snippet>import lxml.html
data = """&lt;td style="padding: 20px"&gt;blah blah &lt;/td&gt;
&lt;td style="padding: 21px"&gt;bow bow&lt;/td&gt;
&lt;td style="padding: 20px"&gt;buh buh&lt;/td&gt;
"""
doc = lxml.html.document_fromstring(data)
for col in doc.cssselect('td'):
    style = col.attrib['style']
    if style=='padding: 20px':
        print(col.text.strip())
</snippet></ROW><ROW><id>2619595</id><snippet>blah blah
buh buh
</snippet></ROW><ROW><id>2619595</id><snippet>bow bow</snippet></ROW><ROW><id>2619832</id><snippet>container = wx.BoxSizer(wx.VERTICAL)
container.Add(self.nb, 1, wx.EXPAND)

login = wx.BoxSizer(wx.VERTICAL)
login.Add(self.userLabel)
login.Add(self.userText)

# ... clip, rest of login form additions here

bottom = wx.BoxSizer(wx.HORIZONTAL)
bottom.Add(image)
bottom.Add((0, 0), 1, wx.EXPAND)
bottom.Add(login)

container.Add(bottom, 1, wx.EXPAND)
</snippet></ROW><ROW><id>2619832</id><snippet>bottom.Add((0, 0), 1, wx.EXPAND)</snippet></ROW><ROW><id>2620058</id><snippet>from reportlab.platypus import SimpleDocTemplate, Image
from reportlab.lib.pagesizes import letter
from glob import glob

doc = SimpleDocTemplate('image-collection.pdf', pagesize=letter)
parts = [Image(filename) for filename in glob('*.jpg')]
doc.build(parts)
</snippet></ROW><ROW><id>2620378</id><snippet>conn=httplib.HTTPConnection("http://223.56.124.58:8080/wireless") 
</snippet></ROW><ROW><id>2620378</id><snippet>getaddrinfo()</snippet></ROW><ROW><id>2620378</id><snippet>getaddrinfo()</snippet></ROW><ROW><id>2620378</id><snippet>EAI_NONAME</snippet></ROW><ROW><id>2620378</id><snippet>getaddrinfo</snippet></ROW><ROW><id>2620378</id><snippet>"223.56.124.58:8080/wireless"</snippet></ROW><ROW><id>2620378</id><snippet>conn = httplib.HTTPConnection("223.56.124.58", 8080)
</snippet></ROW><ROW><id>2620378</id><snippet>conn.request("POST", "wireless", params, headers)
</snippet></ROW><ROW><id>2620378</id><snippet>conn.request("POST","http://202.45.139.58:8080/ppod-web",params,headers)
</snippet></ROW><ROW><id>2620378</id><snippet>http://202.45.139.58:8080/http://202.45.139.58:8080/ppod-web</snippet></ROW><ROW><id>2620378</id><snippet>conn = httplib.HTTPConnection("202.45.139.58", 8080)
conn.request("POST", "ppod-web", params, headers)
</snippet></ROW><ROW><id>2620378</id><snippet>HTTPConnection</snippet></ROW><ROW><id>2620378</id><snippet>request()</snippet></ROW><ROW><id>2620378</id><snippet>params</snippet></ROW><ROW><id>2620378</id><snippet>&gt;&gt;&gt; urllib.urlencode({"wifi":{"ssid":"guest","rssi","80"}})
SyntaxError: invalid syntax
&gt;&gt;&gt; urllib.urlencode({"wifi":{"ssid":"guest","rssi":"80"}})
'wifi=%7B%27rssi%27%3A+%2780%27%2C+%27ssid%27%3A+%27guest%27%7D'
</snippet></ROW><ROW><id>2620378</id><snippet>&gt;&gt;&gt; urllib.urlencode({"data": {"wifi":{"ssid":"guest","rssi":"80"}}})
'data=%7B%27wifi%27%3A+%7B%27rssi%27%3A+%2780%27%2C+%27ssid%27%3A+%27guest%27%7D%7D'
</snippet></ROW><ROW><id>2620514</id><snippet>getproxies</snippet></ROW><ROW><id>2620514</id><snippet>get</snippet></ROW><ROW><id>2620514</id><snippet>def check_proxy():    
     import urllib
     http_proxy = urllib.getproxies().get('http')
     # some “complex” code that uses http_proxy
</snippet></ROW><ROW><id>2620514</id><snippet>def check_proxy():    
     import urllib
     http_proxy = urllib.getproxies().get('http')
     _check_proxy(http_proxy)

def _check_proxy(http_proxy):
     # some “complex” code that uses http_proxy
</snippet></ROW><ROW><id>2620514</id><snippet>_check_proxy</snippet></ROW><ROW><id>2620514</id><snippet>http_proxy</snippet></ROW><ROW><id>2620514</id><snippet>_check_proxy</snippet></ROW><ROW><id>2620514</id><snippet>check_proxy</snippet></ROW><ROW><id>2621073</id><snippet>__init__</snippet></ROW><ROW><id>2621073</id><snippet>'save-update'</snippet></ROW><ROW><id>2621073</id><snippet>'all, delete-orphan'</snippet></ROW><ROW><id>2621073</id><snippet>save()</snippet></ROW><ROW><id>2621073</id><snippet>Session.flush()</snippet></ROW><ROW><id>2621073</id><snippet>Session.commit()</snippet></ROW><ROW><id>2621096</id><snippet>0.0</snippet></ROW><ROW><id>2621096</id><snippet>1.0</snippet></ROW><ROW><id>2621096</id><snippet>)</snippet></ROW><ROW><id>2621096</id><snippet>[</snippet></ROW><ROW><id>2621096</id><snippet>0.0</snippet></ROW><ROW><id>2621096</id><snippet>0.0</snippet></ROW><ROW><id>2621096</id><snippet>0.0</snippet></ROW><ROW><id>2621118</id><snippet>buyer = relation(User, backref=backref('buys', order_by=id))
user = relation(User, backref=backref('usings', order_by=id))
</snippet></ROW><ROW><id>2621118</id><snippet>primaryjoin</snippet></ROW><ROW><id>2621118</id><snippet>buyer = relation(User, primaryjoin=(buyer_id==User.id),
                 backref=backref('buys', order_by=id))
user = relation(User, primaryjoin=(user_id==User.id),
                backref=backref('usings', order_by=id))
</snippet></ROW><ROW><id>2621264</id><snippet>""</snippet></ROW><ROW><id>2621264</id><snippet>sum = ""
</snippet></ROW><ROW><id>2621264</id><snippet>sum = 0
</snippet></ROW><ROW><id>2621264</id><snippet>else:
 sum += ""
</snippet></ROW><ROW><id>2621558</id><snippet>_clone</snippet></ROW><ROW><id>2621558</id><snippet>QuerySet</snippet></ROW><ROW><id>2621558</id><snippet>News.published.all()</snippet></ROW><ROW><id>2621558</id><snippet>get_query_set</snippet></ROW><ROW><id>2621558</id><snippet>QuerySet</snippet></ROW><ROW><id>2621558</id><snippet>filter</snippet></ROW><ROW><id>2621558</id><snippet>filter</snippet></ROW><ROW><id>2621558</id><snippet>class PublishedNewsManager(models.Manager):
    def get_query_set(self):
        return super(PublishedNewsManager, self).get_query_set() \
                    .filter(is_published=True) \
                    .filter(pub_date__lte=datetime.datetime.now)
</snippet></ROW><ROW><id>2621597</id><snippet>class SmokeTests(): 

    def suite(self): #Function stores all the modules to be tested   
        modules_to_test = ('external_sanity', 'internal_sanity')  
        alltests = unittest.TestSuite()  
        for module in map(__import__, modules_to_test):  
            alltests.addTest(unittest.findTestCases(module))  
        return alltests  
if __name__ == '__main__':
    Smoke = SmokeTests()  
    unittest.main(defaultTest='Smoke.suite') 
</snippet></ROW><ROW><id>2621685</id><snippet>[a[i] for i in (1,2,5)]
# [11, 12, 15]
</snippet></ROW><ROW><id>2622254</id><snippet>awk -F, -vOFS=, -vc=1 '
    NR == 1 {
        for (i=1; i&lt;NF; i++) {
            if ($i != "") {
                g[c]=i;
                f[c++]=$i
            }
        }
    }
    NR&gt;2 {
        for (i=1; i &lt; c; i++) {
            print $1,$2, $g[i] &gt; "output_"f[i]".csv"
        }
    }' data.csv
</snippet></ROW><ROW><id>2622254</id><snippet>awk -F, -vOFS=, -vc=1 'NR == 1 {for (i=1; i&lt;NF; i++) {if ($i != "") {g[c]=i; f[c++]=$i}}} NR&gt;2 { for (i=1; i &lt; c; i++) {print $1,$2, $g[i] &gt; "file_"f[i]".csv" }}' data.csv
</snippet></ROW><ROW><id>2622254</id><snippet>$ cat file_L1.csv
EXAMPLEfoo,60,6
EXAMPLEbar,30,6
EXAMPLE1,60,3
EXAMPLE2,120,6
EXAMPLE3,60,6
EXAMPLE4,30,6
$ cat file_L2.csv
EXAMPLEfoo,60,0
EXAMPLEbar,30,6
EXAMPLE1,60,3
EXAMPLE2,120,0
EXAMPLE3,60,6
EXAMPLE4,30,6
$ cat file_L11.csv
EXAMPLEfoo,60,0
EXAMPLEbar,30,6
EXAMPLE1,60,3
EXAMPLE2,120,0
EXAMPLE3,60,0
EXAMPLE4,30,6
</snippet></ROW><ROW><id>2622506</id><snippet>from copy import deepcopy

print_matrix(mat)
s=[]
for x in range(3):
     s.append(scramble_matrix(deepcopy(mat),10))  # note the deepcopy()
for matrix in s:
     print ""
     print_matrix(matrix)
</snippet></ROW><ROW><id>2622632</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; string = 'A string with words'
&gt;&gt;&gt; textwrap.wrap(string,15)
['A string with', 'words']
</snippet></ROW><ROW><id>2623066</id><snippet>import socket
import time

command = '&lt;xml version="1.0" encoding="UTF-8"&gt;&lt;header/&gt;&lt;body&gt;&lt;code&gt;&lt;body/&gt;'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.1100.2.2", 54239))

s.send(command)

time.sleep(2)
resp = s.recv(3000)

print resp
</snippet></ROW><ROW><id>2623117</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; def swap_xy():
...   global x, y
...   (x, y) = (y, x)
... 
&gt;&gt;&gt; dis.dis(swap_xy)
  3           0 LOAD_GLOBAL              0 (y)
              3 LOAD_GLOBAL              1 (x)
              6 ROT_TWO             
              7 STORE_GLOBAL             1 (x)
             10 STORE_GLOBAL             0 (y)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE    
</snippet></ROW><ROW><id>2623117</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>2623117</id><snippet>ROT_TWO</snippet></ROW><ROW><id>2623117</id><snippet>STORE_GLOBAL</snippet></ROW><ROW><id>2623117</id><snippet>&gt;&gt;&gt; def swap_xy_repeatedly():
...   while 1:
...     swap_xy()
...     if x == y:
...       # If all swaps are atomic, there will never be a time when x == y.
...       # (of course, this depends on "if x == y" being atomic, which it isn't;
...       #  but if "if x == y" isn't atomic, what hope have we for the more complex
...       #  "x, y = y, x"?)
...       print 'non-atomic swap detected'
...       break
... 
&gt;&gt;&gt; t1 = threading.Thread(target=swap_xy_repeatedly)
&gt;&gt;&gt; t2 = threading.Thread(target=swap_xy_repeatedly)
&gt;&gt;&gt; t1.start()
&gt;&gt;&gt; t2.start()
&gt;&gt;&gt; non-atomic swap detected
</snippet></ROW><ROW><id>2623191</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2623191</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dt = datetime.fromordinal(733828)
&gt;&gt;&gt; dt
datetime.datetime(2010, 2, 25, 0, 0)
&gt;&gt;&gt; dt.strftime('%Y%m%d')
'20100225'
</snippet></ROW><ROW><id>2623495</id><snippet>print 'temp1',
print 'temp2'
</snippet></ROW><ROW><id>2623495</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>2623495</id><snippet>sys.stdout.write("Some output")
</snippet></ROW><ROW><id>2623545</id><snippet>import re
path2 = re.sub(r'(\[|])', r'[\1]', path)
</snippet></ROW><ROW><id>2623545</id><snippet>\[|]</snippet></ROW><ROW><id>2623545</id><snippet>\1</snippet></ROW><ROW><id>2623564</id><snippet>import MySQLdb
import datetime

THEHOST="localhost"
THEUSER="user"
THEPASSWD="passwd"
THEDB="database"

connection=MySQLdb.connect(
    host=THEHOST,user=THEUSER,passwd=THEPASSWD,db=THEDB)
cursor=connection.cursor()

abc,efg,ijk=1,2,3

data={'1': ['1', 'K', abc, 'xyz', None, None, None, datetime.date(2009, 6, 18)],
      '2': ['2', 'K', efg, 'xyz', None, None, None, None],
      '3': ['3', 'K', ijk, 'xyz', None, None, None,
            datetime.datetime(2010, 2, 5, 16, 31, 2)]}

sql='''\
CREATE TABLE IF NOT EXISTS temp (id int auto_increment primary key,
    field1 varchar(8),
    field2 int,
    field3 varchar(8),
    field4 bool,
    field5 varchar(8),
    field6 varchar(8),
    field7 datetime )'''

cursor.execute(sql)

sql='''\
INSERT INTO temp (id, field1, field2, field3, field4, field5, field6, field7)
VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
'''
cursor.executemany(sql, data.values())
</snippet></ROW><ROW><id>2624467</id><snippet>/Library/Python/2.6/site-packages/pyobjc_core-2.2-py2.6-macosx-10.6-universal.egg/</snippet></ROW><ROW><id>2624467</id><snippet>objc</snippet></ROW><ROW><id>2624467</id><snippet>/System/Library</snippet></ROW><ROW><id>2624467</id><snippet>/System/Library</snippet></ROW><ROW><id>2624467</id><snippet>&gt;&gt;&gt; import objc
&gt;&gt;&gt; print objc.__file__ 
/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/PyObjC/objc/__init__.pyc
</snippet></ROW><ROW><id>2624467</id><snippet>/opt/local/lib/libiconv.2.dylib</snippet></ROW><ROW><id>2624467</id><snippet>libiconv.2.dylib</snippet></ROW><ROW><id>2624467</id><snippet>/usr/lib</snippet></ROW><ROW><id>2625174</id><snippet>  obj.inspect =&gt; string
</snippet></ROW><ROW><id>2625174</id><snippet>obj</snippet></ROW><ROW><id>2625174</id><snippet>to_s</snippet></ROW><ROW><id>2625174</id><snippet>   [ 1, 2, 3..4, 'five' ].inspect   #=&gt; "[1, 2, 3..4, \"five\"]"
   Time.new.inspect                 #=&gt; "Wed Apr 09 08:54:39 CDT 2003"
</snippet></ROW><ROW><id>2625174</id><snippet> obj.to_s =&gt; string
</snippet></ROW><ROW><id>2625174</id><snippet>obj</snippet></ROW><ROW><id>2625174</id><snippet>to_s</snippet></ROW><ROW><id>2625361</id><snippet>reindent.py</snippet></ROW><ROW><id>2625361</id><snippet>python2.6-examples</snippet></ROW><ROW><id>2625366</id><snippet>from google_perftools_wrapped import StartProfiler, StopProfiler
impor c_extension # extension to profile c_extension.so

StartProfiler("output.prof")
... calling the interesting functions from the C extension module ...
StopProfiler()
</snippet></ROW><ROW><id>2625366</id><snippet>pprof --callgrind c_extension.so output.prof &gt; output.callgrind 
kcachegrind output.callgrind
</snippet></ROW><ROW><id>2625452</id><snippet>fun</snippet></ROW><ROW><id>2625452</id><snippet>oneThread</snippet></ROW><ROW><id>2625452</id><snippet>class oneThread(threading.Thread):
    def __init__(self, fun):
        self.fun = fun
        ...

class fun:
    def one(self, widget):
        oneThread(self):
</snippet></ROW><ROW><id>2625558</id><snippet>xrange()</snippet></ROW><ROW><id>2625558</id><snippet>for v in xrange(n // 2 - 1, -1, -1):
</snippet></ROW><ROW><id>2625558</id><snippet>range()</snippet></ROW><ROW><id>2625558</id><snippet>xrange()</snippet></ROW><ROW><id>2625558</id><snippet>//</snippet></ROW><ROW><id>2625613</id><snippet>list</snippet></ROW><ROW><id>2625613</id><snippet>list.sort</snippet></ROW><ROW><id>2625613</id><snippet>pydoc</snippet></ROW><ROW><id>2625613</id><snippet>help()</snippet></ROW><ROW><id>2625613</id><snippet>list.sort</snippet></ROW><ROW><id>2625668</id><snippet>coding</snippet></ROW><ROW><id>2625668</id><snippet>u"Par Catégorie"</snippet></ROW><ROW><id>2625668</id><snippet>str</snippet></ROW><ROW><id>2625668</id><snippet>bytes</snippet></ROW><ROW><id>2626008</id><snippet>main.py</snippet></ROW><ROW><id>2626008</id><snippet>__main__</snippet></ROW><ROW><id>2626008</id><snippet>main</snippet></ROW><ROW><id>2626008</id><snippet>main.py</snippet></ROW><ROW><id>2626008</id><snippet>main</snippet></ROW><ROW><id>2626008</id><snippet>__main__</snippet></ROW><ROW><id>2626062</id><snippet>defaultdict</snippet></ROW><ROW><id>2626062</id><snippet>from collections import defaultdict

foo = defaultdict(int)
foo[bar] += 1
</snippet></ROW><ROW><id>2626599</id><snippet>&gt;&gt;&gt; def horror():
...   exec "x=23"
...   return x
... 
&gt;&gt;&gt; print horror()
23
</snippet></ROW><ROW><id>2626599</id><snippet>exec</snippet></ROW><ROW><id>2626599</id><snippet>&gt;&gt;&gt; def better():
...   d = {}
...   exec "x=23" in d
...   return d['x']
... 
&gt;&gt;&gt; print better()
23
</snippet></ROW><ROW><id>2626634</id><snippet>C:\&gt; C:\Documents and Settings\fred\My Documents\Downloads\google-python-exercises
\google-python-exercises\hello.py John
</snippet></ROW><ROW><id>2626634</id><snippet>C:\&gt; hello.py John
</snippet></ROW><ROW><id>2626634</id><snippet>argv</snippet></ROW><ROW><id>2626634</id><snippet>hello.py</snippet></ROW><ROW><id>2626634</id><snippet>John</snippet></ROW><ROW><id>2626634</id><snippet>sys.argv[0] == 'hello.py'</snippet></ROW><ROW><id>2626634</id><snippet>sys.argv[1] == 'John'</snippet></ROW><ROW><id>2626634</id><snippet>len(sys.argv) &gt;= 2</snippet></ROW><ROW><id>2626634</id><snippet>define main() function:
    if there are at least 2 elements on the cmd-line:
        set 'name' to the second element located at index 1, e.g., John
    otherwise there is only 1 element... the program name, e.g., hello.py:
        set 'name' to "World" (since we did not get any useful user input)
    display 'Hello' followed by whatever i assigned to 'name'
</snippet></ROW><ROW><id>2626634</id><snippet>hello.py</snippet></ROW><ROW><id>2626634</id><snippet>Hello World</snippet></ROW><ROW><id>2626634</id><snippet>hello.py John</snippet></ROW><ROW><id>2626634</id><snippet>Hello John</snippet></ROW><ROW><id>2626634</id><snippet>hello.py John Paul</snippet></ROW><ROW><id>2626634</id><snippet>Hello John</snippet></ROW><ROW><id>2626634</id><snippet>sys.argv[2]</snippet></ROW><ROW><id>2626634</id><snippet>Paul</snippet></ROW><ROW><id>2626634</id><snippet>len(sys.argv) == 3</snippet></ROW><ROW><id>2626634</id><snippet>sys.argv</snippet></ROW><ROW><id>2627117</id><snippet>str(para)</snippet></ROW><ROW><id>2627117</id><snippet>ascii</snippet></ROW><ROW><id>2627117</id><snippet>para</snippet></ROW><ROW><id>2627117</id><snippet>encode()</snippet></ROW><ROW><id>2627117</id><snippet>&gt;&gt;&gt; s=u'123\u2019'
&gt;&gt;&gt; str(s)
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 3: ordinal not in range(128)
&gt;&gt;&gt; s.encode("utf-8")
'123\xe2\x80\x99'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2627117</id><snippet>para</snippet></ROW><ROW><id>2627117</id><snippet>encode("utf-8")</snippet></ROW><ROW><id>2627303</id><snippet>\</snippet></ROW><ROW><id>2627303</id><snippet>\textbackslash{}</snippet></ROW><ROW><id>2627303</id><snippet>{</snippet></ROW><ROW><id>2627303</id><snippet>\{</snippet></ROW><ROW><id>2627303</id><snippet>}</snippet></ROW><ROW><id>2627303</id><snippet>\}</snippet></ROW><ROW><id>2627303</id><snippet>$</snippet></ROW><ROW><id>2627303</id><snippet>\$</snippet></ROW><ROW><id>2627303</id><snippet>&amp;</snippet></ROW><ROW><id>2627303</id><snippet>\&amp;</snippet></ROW><ROW><id>2627303</id><snippet>#</snippet></ROW><ROW><id>2627303</id><snippet>\#</snippet></ROW><ROW><id>2627303</id><snippet>^</snippet></ROW><ROW><id>2627303</id><snippet>\textasciicircum{}</snippet></ROW><ROW><id>2627303</id><snippet>textcomp</snippet></ROW><ROW><id>2627303</id><snippet>_</snippet></ROW><ROW><id>2627303</id><snippet>\_</snippet></ROW><ROW><id>2627303</id><snippet>~</snippet></ROW><ROW><id>2627303</id><snippet>\textasciitilde{}</snippet></ROW><ROW><id>2627303</id><snippet>%</snippet></ROW><ROW><id>2627303</id><snippet>\%</snippet></ROW><ROW><id>2627303</id><snippet>&lt;</snippet></ROW><ROW><id>2627303</id><snippet>\textless{}</snippet></ROW><ROW><id>2627303</id><snippet>&gt;</snippet></ROW><ROW><id>2627303</id><snippet>\textgreater{}</snippet></ROW><ROW><id>2627303</id><snippet>|</snippet></ROW><ROW><id>2627303</id><snippet>\textbar{}</snippet></ROW><ROW><id>2627303</id><snippet>"</snippet></ROW><ROW><id>2627303</id><snippet>\textquotedbl{}</snippet></ROW><ROW><id>2627303</id><snippet>'</snippet></ROW><ROW><id>2627303</id><snippet>\textquotesingle{}</snippet></ROW><ROW><id>2627303</id><snippet>`</snippet></ROW><ROW><id>2627303</id><snippet>\textasciigrave{}</snippet></ROW><ROW><id>2627732</id><snippet>import yaml
class User(object):
    def __init__(self, name, surname):
       self.name= name
       self.surname= surname

    def yaml(self):
       return yaml.dump(self.__dict__)

    @staticmethod
    def load(data):
       values = yaml.safe_load(data)
       return User(values["name"], values["surname"])

user = User('spam', 'eggs')
serialized_user = user.yaml()
print "serialized_user:  %s" % serialized_user.strip()

#Network
deserialized_user = User.load(serialized_user)
print "name: %s, sname: %s" % (deserialized_user.name, deserialized_user.surname)
</snippet></ROW><ROW><id>2627748</id><snippet>urllib</snippet></ROW><ROW><id>2627748</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>2627748</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>2627748</id><snippet>urllib2</snippet></ROW><ROW><id>2627748</id><snippet>httplib</snippet></ROW><ROW><id>2627748</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>2627748</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>2627748</id><snippet>CGIHTTPServer</snippet></ROW><ROW><id>2627748</id><snippet>http.server</snippet></ROW><ROW><id>2627748</id><snippet>ftplib</snippet></ROW><ROW><id>2627748</id><snippet>telnetlib</snippet></ROW><ROW><id>2627748</id><snippet>imaplib</snippet></ROW><ROW><id>2627748</id><snippet>poplib</snippet></ROW><ROW><id>2627748</id><snippet>smtplib</snippet></ROW><ROW><id>2627748</id><snippet>smtpd</snippet></ROW><ROW><id>2627748</id><snippet>xmlrpclib</snippet></ROW><ROW><id>2627748</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>2627748</id><snippet>DocXMLRPCServer</snippet></ROW><ROW><id>2627748</id><snippet>xmlrpc.server</snippet></ROW><ROW><id>2627748</id><snippet>nntplib</snippet></ROW><ROW><id>2627852</id><snippet>''.join(x.split())
</snippet></ROW><ROW><id>2628290</id><snippet>urls</snippet></ROW><ROW><id>2628290</id><snippet>import views.interaction.gaerete
</snippet></ROW><ROW><id>2628290</id><snippet>interaction.garaete</snippet></ROW><ROW><id>2628290</id><snippet>interaction</snippet></ROW><ROW><id>2628290</id><snippet>interaction/__init__.py</snippet></ROW><ROW><id>2628290</id><snippet>import gaerete
</snippet></ROW><ROW><id>2628417</id><snippet>import os,glob,fileinput
root="/tmp"
path=os.path.join(root,"dir")
alines=["line 1\n","line 2\n","line 3\n","line 4\n"]
os.chdir(path)
# for clients
for clientfile in glob.glob("*.client.log"):
    data=open(clientfile).readlines()
    data.append(alines)
    open("temp","w").write(''.join(data))
    os.rename("temp",clientfile)
for svrfile in glob.glob("*.server.log"):
    f=0
    for line in fileinput.FileInput(svrfile,inplace=1):
         ind=line.find("After-this")
         if ind!=-1 and not f:
             line=line[:ind+10] + ''.join(alines) + line[ind+10:]
             f=1
         print line
</snippet></ROW><ROW><id>2628846</id><snippet>try:
    Person.objects.get(email=...)
    raise forms.ValidationError(...)
except Person.DoesNotExist:
    pass
</snippet></ROW><ROW><id>2628850</id><snippet>__init__.py</snippet></ROW><ROW><id>2628850</id><snippet>os</snippet></ROW><ROW><id>2628850</id><snippet>os.path</snippet></ROW><ROW><id>2628850</id><snippet>import os
print os.path.abspath('somefile')
</snippet></ROW><ROW><id>2628850</id><snippet>from wrappermodule import *</snippet></ROW><ROW><id>2628984</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; s3conn = boto.connect_s3('KEY', 'SECRET')
&gt;&gt;&gt; bucket = s3conn.get_bucket('mybucket', validate=False)
&gt;&gt;&gt; key = bucket.new_key('/some/key')
&gt;&gt;&gt; key.generate_url(expires_in=10)
&gt;&gt;&gt; 'https://mybucket.s3.amazonaws.com//some/key?Signature=fN4Hfys9Ky9w2IGpFd7fzh8TjBQ%3D&amp;Expires=1271156990&amp;AWSAccessKeyId=KEY'
</snippet></ROW><ROW><id>2629402</id><snippet>def walk_list(list_of_g):
    to_idx = 0
    for g_current in list_of_g:
        if not subtle_condition(g_current):
            list_of_g[to_idx] = g_current
            to_idx += 1
    del list_of_g[to_idx:]
</snippet></ROW><ROW><id>2629498</id><snippet>modulename.__file__</snippet></ROW><ROW><id>2629498</id><snippet>&gt;&gt;&gt;&gt; import django
&gt;&gt;&gt; django.__file__
'/home/bartek/.virtualenvs/safetyville/lib/python2.6/site-packages/django/__init__.pyc'
</snippet></ROW><ROW><id>2629642</id><snippet>get_friends</snippet></ROW><ROW><id>2629642</id><snippet>User</snippet></ROW><ROW><id>2629642</id><snippet>get_user</snippet></ROW><ROW><id>2629642</id><snippet>for friend in friends:
    for f in friend.get_friends(limit='200'):
        ...
</snippet></ROW><ROW><id>2629646</id><snippet>pairwise</snippet></ROW><ROW><id>2629646</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>2629646</id><snippet>for x1, x2 in pairwise(some_iterable):
    # etc..
</snippet></ROW><ROW><id>2629646</id><snippet>dict</snippet></ROW><ROW><id>2629766</id><snippet>multiprocessing</snippet></ROW><ROW><id>2629766</id><snippet>subprocess</snippet></ROW><ROW><id>2629766</id><snippet>multiprocessing</snippet></ROW><ROW><id>2629937</id><snippet>main()</snippet></ROW><ROW><id>2629937</id><snippet>add_models()</snippet></ROW><ROW><id>2629937</id><snippet>rest</snippet></ROW><ROW><id>2629937</id><snippet>main()</snippet></ROW><ROW><id>2630029</id><snippet>object = Emp.objects.get(pk=profile.id)
object.save(force_insert=True)
</snippet></ROW><ROW><id>2630239</id><snippet>&gt;&gt;&gt; [[0]*8 for x in xrange(8)]
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2630253</id><snippet>startswith</snippet></ROW><ROW><id>2630309</id><snippet>from collections import OrderedDict
data = OrderedDict()
for item in container:
  data[item] = OrderedDict()
  ...
  for key, val in item_container.iteritems():
    ...
    data[item][key] = val
</snippet></ROW><ROW><id>2630690</id><snippet>// net, cid, lac = 25002, 9164, 4000
$net = 25002;
$cid = 9164;
$lac = 4000;

// import urllib

//a = '000E00000000000000000000000000001B0000000000000000000000030000'
$a = '000E00000000000000000000000000001B0000000000000000000000030000';

//b = hex(cid)[2:].zfill(8) + hex(lac)[2:].zfill(8)
$b = sprintf("%08x%08x", $cid, $lac);

//c = hex(divmod(net,100)[1])[2:].zfill(8) + hex(divmod(net,100)[0])[2:].zfill(8)
$c = sprintf("%08x%08x", $net % 100, floor($net / 100));

//string = (a + b + c + 'FFFFFFFF00000000').decode('hex')
$string = $a . $b . $c . 'FFFFFFFF00000000';
$newstring = '';
for( $i = 0, $count = strlen($string); $i &lt; $count; $i++ ) {
 $newstring .= sprintf("%c", hexdec($string{$i} . $string{++$i}));
}

//data = urllib.urlopen('http://www.google.com/glm/mmap',string)
$ch = curl_init('http://www.google.com/glm/mmap');
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $newstring);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

//r = data.read().encode('hex')
$r = curl_exec($ch);

//print float(int(r[14:22],16))/1000000, float(int(r[22:30],16))/1000000
$r = array_pop(unpack("H*", $r));
printf("%f, %f", hexdec(substr($r, 14, 8)) / 1000000, hexdec(substr($r, 22, 8)) / 1000000);
</snippet></ROW><ROW><id>2630723</id><snippet>my_dict = {}
for obj in my_objects:
    my_dict.setdefault(obj.year, []).append(obj)
</snippet></ROW><ROW><id>2630947</id><snippet>Programmer.projects</snippet></ROW><ROW><id>2630947</id><snippet>secondary='assignment'</snippet></ROW><ROW><id>2630947</id><snippet>Assignment.project</snippet></ROW><ROW><id>2630947</id><snippet>Programmer.projects</snippet></ROW><ROW><id>2630947</id><snippet>association_proxy('assignments', 'project')</snippet></ROW><ROW><id>2631192</id><snippet>self._matrix.append( [gameSquare()] * 8 )
</snippet></ROW><ROW><id>2631192</id><snippet>self._matrix.append( [gameSquare() for _ in xrange(8)] )
</snippet></ROW><ROW><id>2631192</id><snippet>print _matrix[row][col],
</snippet></ROW><ROW><id>2631192</id><snippet>print _matrix[row][col]
</snippet></ROW><ROW><id>2631192</id><snippet>_darkQuad</snippet></ROW><ROW><id>2631222</id><snippet>&gt;&gt;&gt; data = [1,2,3,4,5,6]
&gt;&gt;&gt; zip(data[0::2], data[1::2])
[(1, 2), (3, 4), (5, 6)]
</snippet></ROW><ROW><id>2631396</id><snippet>logger = logging.getLogger(__name__)</snippet></ROW><ROW><id>2631396</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>2631396</id><snippet>logging.basicConfig(filename='/tmp/myapp.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
</snippet></ROW><ROW><id>2631396</id><snippet>import logging
logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>2631396</id><snippet>logger.debug('message with %s', 'arguments') # or .info, .warning, .error etc.
</snippet></ROW><ROW><id>2631655</id><snippet>TestApp</snippet></ROW><ROW><id>2631655</id><snippet>&gt;&gt;&gt; from webtest import TestApp
&gt;&gt;&gt; from myapp import my_wsgi_app
&gt;&gt;&gt; app = TestApp(my_wsgi_app)
&gt;&gt;&gt; res = app.get('/')
&gt;&gt;&gt; res.status
'200 OK'
&gt;&gt;&gt; res.status_int
200
&gt;&gt;&gt; params = {'email': 'foo@example.com', 'password': 'foo', }
&gt;&gt;&gt; res = app.post('/login/', params)
&gt;&gt;&gt; res.status_int
302
</snippet></ROW><ROW><id>2631655</id><snippet>self.app</snippet></ROW><ROW><id>2631655</id><snippet>TestApp</snippet></ROW><ROW><id>2631655</id><snippet>def test_index_page(self):
    res = self.app.get('/')
    self.failUnlessEqual(res.status_int, 200)
</snippet></ROW><ROW><id>2631947</id><snippet>tempfile.mkdtemp()</snippet></ROW><ROW><id>2632083</id><snippet>import getenv
print getenv("REMOTE_ADDR")
</snippet></ROW><ROW><id>2632251</id><snippet>os.listdir()</snippet></ROW><ROW><id>2632251</id><snippet>glob.glob</snippet></ROW><ROW><id>2632251</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>2632251</id><snippet>import os, os.path

print len([name for name in os.listdir('.') if os.path.isfile(name)])
</snippet></ROW><ROW><id>2632283</id><snippet>__import__</snippet></ROW><ROW><id>2632283</id><snippet>__import__('keyword.submodule')
</snippet></ROW><ROW><id>2632297</id><snippet>def we_are_frozen():
    # All of the modules are built-in to the interpreter, e.g., by py2exe
    return hasattr(sys, "frozen")

def module_path():
    encoding = sys.getfilesystemencoding()
    if we_are_frozen():
        return os.path.dirname(unicode(sys.executable, encoding))
    return os.path.dirname(unicode(__file__, encoding))
</snippet></ROW><ROW><id>2632297</id><snippet>import module_locator
my_path = module_locator.module_path()
</snippet></ROW><ROW><id>2632429</id><snippet>import wx
class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, 'test frame',size=(790, 524))
        self.Bind(wx.EVT_LEFT_DOWN, self.OnClick)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.clip = wx.Clipboard()
        self.x = wx.BitmapDataObject()
        self.bmp = None

    def OnClick(self, evt):
        self.clip.Open()
        self.clip.GetData(self.x)
        self.clip.Close()
        self.bmp = self.x.GetBitmap()
        self.Refresh()

    def OnPaint(self, evt):
        if self.bmp:
            dc = wx.PaintDC(self)
            dc.DrawBitmap(self.bmp, 20, 20, True)

if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>2632563</id><snippet>wx.BORDER_NONE</snippet></ROW><ROW><id>2632563</id><snippet>t1 = wx.TextCtrl(self, -1, "my text", style=wx.BORDER_NONE)
</snippet></ROW><ROW><id>2632595</id><snippet>import re

def extract_current(s):
    s = s[s.rfind(' ')+1:-1]
    s = re.sub('\d{6}-\d{6}', '', s)
    s = re.sub('[A-Z]+', '', s)
    return s

print extract_current('24.02 24.02VALINTATALO MEGAHERTSI4,76-')
print extract_current('24.02 24.02DOE MRIDANG 157235-1234582,00-')
</snippet></ROW><ROW><id>2632595</id><snippet>4,76
2,00
</snippet></ROW><ROW><id>2632687</id><snippet>++</snippet></ROW><ROW><id>2632687</id><snippet>number += 1
</snippet></ROW><ROW><id>2632919</id><snippet>session.query(User).filter_by(id=123).update({"name": u"Bob Marley"})
</snippet></ROW><ROW><id>2633626</id><snippet>arglist = [(2, 90), (1, 140), (3, -40), (4, 60)]
for args in arglist:
    do.something(*args)
    time.sleep(1)
    print "Did something (%d,%d)" % args
</snippet></ROW><ROW><id>2633806</id><snippet>Bar</snippet></ROW><ROW><id>2633806</id><snippet>bar(a, b)</snippet></ROW><ROW><id>2633806</id><snippet>Bar(a, b)</snippet></ROW><ROW><id>2633806</id><snippet>object</snippet></ROW><ROW><id>2633806</id><snippet>class Bar(object):</snippet></ROW><ROW><id>2633806</id><snippet>def __init__(num1, num2):</snippet></ROW><ROW><id>2633806</id><snippet>def __init__(self, num1, num2):</snippet></ROW><ROW><id>2633806</id><snippet>def foo()</snippet></ROW><ROW><id>2633806</id><snippet>self.</snippet></ROW><ROW><id>2633806</id><snippet>num1</snippet></ROW><ROW><id>2633806</id><snippet>self.num1</snippet></ROW><ROW><id>2633806</id><snippet>^</snippet></ROW><ROW><id>2633806</id><snippet>**</snippet></ROW><ROW><id>2633806</id><snippet>class Bar(object):
    num1, num2 = 0, 0
    def __init__(self, num1, num2):
        self.num1, self.num2 = num1, num2

    def foo(self):
        if self.num1 &gt; self.num2:
            print self.num1,'is greater than ',self.num2,'!'
        elif self.num1 is self.num2:
            print self.num1,' is equal to ',self.num2,'!'
        else:
            print self.num1,' is less than ',self.num2,'!'

a, b = 42, 84
t = Bar(a, b)
t.foo()

t.num1 = t.num1 ^ t.num2
t.num2 = t.num2 ^ t.num1
t.num1 = t.num1 ^ t.num2

t.foo()
</snippet></ROW><ROW><id>2633806</id><snippet>42  is less than  84 !
84 is greater than  42 !
</snippet></ROW><ROW><id>2634082</id><snippet>Enviroment.objects.exclude(name="env1").exclude(name="env2")
</snippet></ROW><ROW><id>2634082</id><snippet>Enviroment.objects.exclude(Q(name="env1") | Q(name="env2"))
</snippet></ROW><ROW><id>2634109</id><snippet>sys.exit(logThis(text)+display)
</snippet></ROW><ROW><id>2634109</id><snippet>logThisAndExit(text, display)</snippet></ROW><ROW><id>2634109</id><snippet>sys.exit(logThis(text))
</snippet></ROW><ROW><id>2634109</id><snippet>logThisAndExit(text)</snippet></ROW><ROW><id>2634109</id><snippet>call(msg+display)</snippet></ROW><ROW><id>2634441</id><snippet>toplevel/
   subproject/
        Foo.java
        Bar.java
   subproject2/
        Baz.java
        Qux.java
</snippet></ROW><ROW><id>2634441</id><snippet>toplevel/
    subproject.py &lt;-- put class Foo, Bar here
    subproject2.py &lt;-- put class Baz, Qux here
</snippet></ROW><ROW><id>2634716</id><snippet>import threading
import webbrowser

def start_browser(server_ready_event, url):
    print "[Browser Thread] Waiting for server to start"
    server_ready_event.wait()
    print "[Browser Thread] Opening browser"
    webbrowser.open(url)

url = "someurl"
server_ready = threading.Event()
browser_thread = threading.Thread(target=start_browser, args=(server_ready, url))
browser_thread.start()

print "[Main Thread] Starting server"
httpd = make_server('', 80, server)
print "[Main Thread] Server started"
server_ready.set()

httpd.serve_forever()
browser_thread.join()
</snippet></ROW><ROW><id>2634723</id><snippet>__str__</snippet></ROW><ROW><id>2634723</id><snippet>print L</snippet></ROW><ROW><id>2634723</id><snippet>[1, 2]</snippet></ROW><ROW><id>2634723</id><snippet>L</snippet></ROW><ROW><id>2634723</id><snippet>['1, 2']</snippet></ROW><ROW><id>2634723</id><snippet>print</snippet></ROW><ROW><id>2635066</id><snippet>from urlparse import urlparse
from threading import Thread
import httplib, sys
from Queue import Queue

concurrent = 200

def doWork():
    while True:
        url=q.get()
        status,url=getStatus(url)
        doSomethingWithResult(status,url)
        q.task_done()

def getStatus(ourl):
    try:
        url = urlparse(ourl)
        conn = httplib.HTTPConnection(url.netloc)   
        conn.request("HEAD", url.path)
        res = conn.getresponse()
        return res.status, ourl
    except:
        return "error", ourl

def doSomethingWithResult(status, url):
    print status, url

q=Queue(concurrent*2)
for i in range(concurrent):
    t=Thread(target=doWork)
    t.daemon=True
    t.start()
try:
    for url in open('urllist.txt'):
        q.put(url.strip())
    q.join()
except KeyboardInterrupt:
    sys.exit(1)
</snippet></ROW><ROW><id>2635429</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen("ls", shell=True)
&gt;&gt;&gt; p.pid
4136
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2635571</id><snippet>__new__</snippet></ROW><ROW><id>2635571</id><snippet>def makeLimitedInt(minimum, maximum, default):
    class LimitedInt(int):
        def __new__(cls, x= default, *args, **kwargs):
            instance= int.__new__(cls, x, *args, **kwargs)
            if not minimum&lt;=instance&lt;=maximum:
                raise ValueError('Value outside LimitedInt range')
            return instance
    return LimitedInt
</snippet></ROW><ROW><id>2635836</id><snippet>href="javascript:window.location.href=\"whatever\";"</snippet></ROW><ROW><id>2636023</id><snippet>bools = [True, True, False, True, True, False, True]

print ''.join(chr(ord('A') + i) if b else ' ' for i, b in enumerate(bools))
</snippet></ROW><ROW><id>2636518</id><snippet>y</snippet></ROW><ROW><id>2636518</id><snippet>y</snippet></ROW><ROW><id>2636518</id><snippet>y = ''
</snippet></ROW><ROW><id>2636518</id><snippet>y</snippet></ROW><ROW><id>2636518</id><snippet>str</snippet></ROW><ROW><id>2636518</id><snippet>y</snippet></ROW><ROW><id>2636518</id><snippet>self.y = t1.__init__(x)</snippet></ROW><ROW><id>2636518</id><snippet>self.y = t1(x)</snippet></ROW><ROW><id>2636565</id><snippet>if not Found:
    return "Not Found"
</snippet></ROW><ROW><id>2636565</id><snippet>GetImage</snippet></ROW><ROW><id>2636565</id><snippet>os.path.join(os.getcwd(),"Images",name)</snippet></ROW><ROW><id>2636565</id><snippet>Find</snippet></ROW><ROW><id>2636565</id><snippet>def Find(name):
    fname = os.path.join(os.getcwd(), "Images", name + '.bmp')
    image = Image.open(fname)
    imagebbox = image.getbbox()
    screen = ImageGrab.grab()
    YLimit =  screen.getbbox()[3] - imagebbox[3]
    XLimit = screen.getbbox()[2] - imagebbox[2]
    image = image.convert("L")
    Screen = screen.convert("L")
    Screen.load()
    image.load()
    image = image.getdata()
    for y in range(0, YLimit):
        for x in range(0, XLimit):
            BoxCoordinates = x, y, x+imagebbox[2], y+imagebbox[3]
            ScreenGrab = screen.crop(BoxCoordinates)
            ScreenGrab = ScreenGrab.getdata()
            if image == ScreenGrab:
                return x, y
    # returns None implicitly
</snippet></ROW><ROW><id>2636612</id><snippet>def tga_load_tiles(self,fname,size,tdata={}):</snippet></ROW><ROW><id>2636612</id><snippet>agroups,hit,config = tdata[n]
tile.agroups = self.string2groups(agroups)
</snippet></ROW><ROW><id>2636612</id><snippet>string2groups</snippet></ROW><ROW><id>2636612</id><snippet>tdata = {0x02: ('player,ghost', tile_hit, config)}</snippet></ROW><ROW><id>2636646</id><snippet>msvcrt.printf(b"%s", string)
</snippet></ROW><ROW><id>2636646</id><snippet>sprintf</snippet></ROW><ROW><id>2636646</id><snippet>s = ctypes.create_string_buffer(100)   #must be large enough!!
msvcrt.sprintf(s, b'%s', b'Hello World!')
val = s.value
</snippet></ROW><ROW><id>2636646</id><snippet>sprintf</snippet></ROW><ROW><id>2636663</id><snippet>in</snippet></ROW><ROW><id>2636663</id><snippet>if a in (7,8,9):
    pass
</snippet></ROW><ROW><id>2636769</id><snippet>y = int("0x000000001", 16)
</snippet></ROW><ROW><id>2636769</id><snippet>y = int(x, 16)
</snippet></ROW><ROW><id>2636769</id><snippet>y = str(int(x, 16))
</snippet></ROW><ROW><id>2637002</id><snippet>cursor.execute('INSERT INTO table_foo VALUES (%s, %s)', (col1, col2))
</snippet></ROW><ROW><id>2637002</id><snippet>cursor.execute('INSERT INTO "%s" VALUES (%s, %s)', (tablename, col1, col2))
</snippet></ROW><ROW><id>2637002</id><snippet>sql = 'INSERT INTO TABLE "%s" VALUES (%%s, %%s)' % (tablename,)
cursor.execute(sql, (col1, col2))
</snippet></ROW><ROW><id>2637158</id><snippet>if __name__ == '__main__':
    Main()
</snippet></ROW><ROW><id>2637191</id><snippet>SortedTagManager</snippet></ROW><ROW><id>2637191</id><snippet>Manager</snippet></ROW><ROW><id>2637191</id><snippet>notes</snippet></ROW><ROW><id>2637191</id><snippet>users</snippet></ROW><ROW><id>2637191</id><snippet>Count('notes', distinct=True)
</snippet></ROW><ROW><id>2637212</id><snippet>subprocess</snippet></ROW><ROW><id>2637296</id><snippet>$ cd path/to/python/source
$ ./configure
$ make all
... wait for some time ...
$ make test  # this runs python's test suite, you can usually skip this
$ ./python   # note the ./ runs the just installed python instead of system's python
$ # note: do not run make install yet, or you will override system's python, see below
</snippet></ROW><ROW><id>2637296</id><snippet>$ cd path/to/python/source/
$ ./configure --prefix=/where/you/want/to/install/it
$ make all
... wait for some time ...
$ make test  # this runs python's test suite, you can usually skip this
$ make install
</snippet></ROW><ROW><id>2637431</id><snippet>pyephem.Observer</snippet></ROW><ROW><id>2637431</id><snippet>Observer.previous_rising()</snippet></ROW><ROW><id>2637431</id><snippet>Observer.next_setting()</snippet></ROW><ROW><id>2637431</id><snippet>ephem.Sun()</snippet></ROW><ROW><id>2637431</id><snippet>use_center=</snippet></ROW><ROW><id>2637431</id><snippet>True</snippet></ROW><ROW><id>2637526</id><snippet>[names[0]] + [n for n in names[1:] if n != names[0]]
</snippet></ROW><ROW><id>2637526</id><snippet>set(names)</snippet></ROW><ROW><id>2637533</id><snippet>//td[text() = 'Header1']/ancestor::table[1]
</snippet></ROW><ROW><id>2637909</id><snippet>.//a[text()='Example']</snippet></ROW><ROW><id>2637909</id><snippet>tree.xpath(".//a[text()='Example']")[0].tag
</snippet></ROW><ROW><id>2637932</id><snippet>(defun py-do-it ()
  (interactive)
  (if (string-match
       (rx bos "test_")
       (file-name-nondirectory (buffer-file-name)))
      (compile "py.test")
    (py-execute-buffer)))

(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key
             (kbd "F5")                 ;or whatever
             'py-do-it)))
</snippet></ROW><ROW><id>2638115</id><snippet>STORE number +FLAGS (myflag) 
</snippet></ROW><ROW><id>2638115</id><snippet>SEARCH KEYWORD myflag
</snippet></ROW><ROW><id>2638257</id><snippet>.recv</snippet></ROW><ROW><id>2638257</id><snippet>int</snippet></ROW><ROW><id>2638257</id><snippet>Packet[9]</snippet></ROW><ROW><id>2638257</id><snippet>Packet[13]</snippet></ROW><ROW><id>2638257</id><snippet>Packet</snippet></ROW><ROW><id>2638257</id><snippet>int</snippet></ROW><ROW><id>2638257</id><snippet>(int)(720000+armcontrolpacket-&gt;dof0_rot*1000)</snippet></ROW><ROW><id>2638257</id><snippet>import struct
f = '&gt;x4bx11i'
values = struct.unpack(f, packet)
</snippet></ROW><ROW><id>2638257</id><snippet>f</snippet></ROW><ROW><id>2638257</id><snippet>values</snippet></ROW><ROW><id>2638384</id><snippet>class Tag(Base):
    __tablename__ = 'tag'

    id = Column(Integer, primary_key=True)
    label = Column(String)
    parent_id = Column(Integer, ForeignKey('tag.id'))

    parent = relation('Tag', remote_side=[id])
</snippet></ROW><ROW><id>2638438</id><snippet>print</snippet></ROW><ROW><id>2638438</id><snippet>else</snippet></ROW><ROW><id>2638438</id><snippet>print</snippet></ROW><ROW><id>2638438</id><snippet>cout</snippet></ROW><ROW><id>2638438</id><snippet>def rec(w, p, baseString):
    if w == p:
        print baseString
    else:
        for ...
</snippet></ROW><ROW><id>2638524</id><snippet>res = []
for x in nums:
  if x not in res:
    res.append(x)
</snippet></ROW><ROW><id>2638524</id><snippet>set</snippet></ROW><ROW><id>2638524</id><snippet>res</snippet></ROW><ROW><id>2638524</id><snippet>nums</snippet></ROW><ROW><id>2638524</id><snippet>set(nums)</snippet></ROW><ROW><id>2638524</id><snippet>res = []
aux = set()
for x in nums:
  if x not in aux:
    res.append(x)
    aux.add(x)
</snippet></ROW><ROW><id>2638524</id><snippet>vars()['_[1]']</snippet></ROW><ROW><id>2638524</id><snippet>self</snippet></ROW><ROW><id>2638524</id><snippet>'_[1]'</snippet></ROW><ROW><id>2639059</id><snippet>send</snippet></ROW><ROW><id>2639059</id><snippet>send</snippet></ROW><ROW><id>2639193</id><snippet>cProfile</snippet></ROW><ROW><id>2639193</id><snippet>str.__mod__</snippet></ROW><ROW><id>2639193</id><snippet>__getitem__</snippet></ROW><ROW><id>2639193</id><snippet>map[0][i]</snippet></ROW><ROW><id>2639613</id><snippet>import re
id = re.search('(?&lt;=\?v\=)[\w-]+', 'http://www.youtube.com/watch?v=AIiMa2Fe-ZQ')
print id.group(0)
</snippet></ROW><ROW><id>2639613</id><snippet>&gt;&gt;&gt; re.search("[\w|-]", "|").group(0)
'|'
</snippet></ROW><ROW><id>2639996</id><snippet>def</snippet></ROW><ROW><id>2639996</id><snippet>local</snippet></ROW><ROW><id>2640168</id><snippet>a[:,:,[5]].shape
# (10,10,1)
</snippet></ROW><ROW><id>2640183</id><snippet>from django.http import HttpResponse
import xlwt

def excel_view(request):
  normal_style = xlwt.easyxf("""
     font:
         name Verdana
     """) 
  response = HttpResponse(mimetype='application/ms-excel')
  wb = xlwt.Workbook()
  ws0 = wb.add_sheet('Worksheet')
  ws0.write(0, 0, "something", normal_style)
  wb.save(response)
  return response
</snippet></ROW><ROW><id>2640955</id><snippet>include pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>exclude pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>recursive-include dir pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>recursive-exclude dir pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>global-include pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>global-exclude pat1 pat2</snippet></ROW><ROW><id>2640955</id><snippet>prune dir</snippet></ROW><ROW><id>2640955</id><snippet>graft dir</snippet></ROW><ROW><id>2640955</id><snippet>graft</snippet></ROW><ROW><id>2640955</id><snippet>include</snippet></ROW><ROW><id>2640955</id><snippet>empty.txt</snippet></ROW><ROW><id>2641185</id><snippet>[HKEY_CLASSES_ROOT\Applications\python.exe\shell\open\command]
@="\"C:\\Python25\\python.exe\" \"%1\" %*"
</snippet></ROW><ROW><id>2641205</id><snippet>colored = ColoredComic.create_from_Inked(pk=ink_id)
colored.colored = True
colored.save()
</snippet></ROW><ROW><id>2641205</id><snippet>class ColoredComic(Comic):
    colored = models.BooleanField(default=False)

    @staticmethod
    def create_from_Inked(**kwargs):
        inked = InkedComic.objects.get(**kwargs)
        if inked:
            colored = ColoredComic.objects.create()
            colored.__dict__.update(inked.__dict__)
            colored.__dict__.update({'id': None}) # Remove pk field value
            return colored
        else:
            # or throw an exception...
            return None
</snippet></ROW><ROW><id>2641252</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.__class__ == Foo
True
</snippet></ROW><ROW><id>2641252</id><snippet>"Foo"</snippet></ROW><ROW><id>2641252</id><snippet>Foo</snippet></ROW><ROW><id>2641525</id><snippet>class attrdict(dict):
</snippet></ROW><ROW><id>2641525</id><snippet>def __init__(self, *args, **kwargs): 
    dict.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>2641525</id><snippet>__init__</snippet></ROW><ROW><id>2641525</id><snippet>dict.__init__(...)</snippet></ROW><ROW><id>2641525</id><snippet>__init__</snippet></ROW><ROW><id>2641525</id><snippet>self.__dict__ = self</snippet></ROW><ROW><id>2641525</id><snippet>__init__</snippet></ROW><ROW><id>2641714</id><snippet>import pickle
pickle.dumps(2**10000, 2)
</snippet></ROW><ROW><id>2641714</id><snippet>pickle.dump(2**10000, file, 2)</snippet></ROW><ROW><id>2641762</id><snippet>Q</snippet></ROW><ROW><id>2641762</id><snippet>QuerySet</snippet></ROW><ROW><id>2641762</id><snippet>QuerySet.select_related()</snippet></ROW><ROW><id>2641762</id><snippet>QuerySet.iterator()</snippet></ROW><ROW><id>2641762</id><snippet>QuerySet.extra()</snippet></ROW><ROW><id>2641762</id><snippet>IS NULL</snippet></ROW><ROW><id>2641762</id><snippet>len()</snippet></ROW><ROW><id>2641794</id><snippet>ContentType.objects.get_for_model()</snippet></ROW><ROW><id>2641794</id><snippet>ContentType</snippet></ROW><ROW><id>2641794</id><snippet>content_type</snippet></ROW><ROW><id>2641946</id><snippet># the array passed into your function
ax = NP.random.randint(10, 99, 20).reshape(5, 4)

# just define a function to operate on some data
fnx = lambda x : NP.sum(x)**2

# apply the function directly to the numpy array
new_row = NP.apply_along_axis(func1d=fnx, axis=0, arr=ax)

# 'append' the new values to the original array
new_row = new_row.reshape(1,4)
ax = NP.vstack((ax, new_row))
</snippet></ROW><ROW><id>2642002</id><snippet>instance1=np.array([(67111L,1.0),(104242L,1.0)],dtype=np.dtype([('f0', '&lt;u4'), ('f1', '&lt;f4')]))
instance2=np.array([(67112L,2.0),(104243L,2.0)],dtype=np.dtype([('f0', '&lt;u4'), ('f1', '&lt;f4')]))
instances=[instance1,instance2]
Y=np.array(instances, dtype = np.object)
</snippet></ROW><ROW><id>2642002</id><snippet>np.array</snippet></ROW><ROW><id>2642002</id><snippet>instances</snippet></ROW><ROW><id>2642002</id><snippet>np.array</snippet></ROW><ROW><id>2642002</id><snippet>Y</snippet></ROW><ROW><id>2642002</id><snippet>print(Y.shape)
# (2, 2)
</snippet></ROW><ROW><id>2642002</id><snippet>X=np.empty((len(instances),), dtype = np.object)
print(X.shape)
# (2,)
</snippet></ROW><ROW><id>2642002</id><snippet>(2, )</snippet></ROW><ROW><id>2642002</id><snippet>X[:] = instances
</snippet></ROW><ROW><id>2642002</id><snippet>instances</snippet></ROW><ROW><id>2642055</id><snippet>\n</snippet></ROW><ROW><id>2642055</id><snippet>\r\n</snippet></ROW><ROW><id>2642564</id><snippet>if __name__ == "__main__":
    print('Ah, what a hard day of threading...')
</snippet></ROW><ROW><id>2642699</id><snippet>import Queue
import threading

def serialize(q):
  """runs a serializer on queue q: put [-1]*4 on q to terminate."""
  while True:
    # get output-queue for result, a callable, its args and kwds
    out_q, tocall, args, kwds = q.get()
    if out_q == -1:
      return
    result = tocall(*args, **kwds)
    out_q.put(result)

class WrapCall(object):
  """Wraps a callable to serialize calls to it."""

  def __init__(self, inq, ouq, tocall):
    self.inq = inq
    self.ouq = ouq
    self.tocall = tocall

  def __call__(self, *a, **k):
    self.inq.put((self.ouq, self.tocall, a, k))
    if self.ouq is None:
      return None
    return self.ouq.get()

class WrapObj(object):
  """Wraps any object to serialize all calls to its methods."""

  def __init__(self, obj):
    self._o = obj
    self._q = Queue.Queue()
    t = threading.Thread(target=serialize, args=(self._q,))
    t.setDaemon(True)
    t.start()
    self.t = t

  def __getattr__(self, n):
    """Wraps methods of self.w into an appropriate WrapCall instance."""
    towrap = getattr(self._o, n)
    if not callable(towrap):
      raise TypeError('Cannot wrap noncallable attribute %r (type: %s)'
                       % (n, type(towrap)))
    q = Queue.Queue()
    return WrapCall(self._q, q, towrap)

  def WrapperWait(self):
    """Return only when self.t has served all pending requests."""
    q = Queue.Queue()
    w = WrapCall(self.__q, q, lambda: None)
    return w()
</snippet></ROW><ROW><id>2642699</id><snippet>myobj = WrapObj(Command())
</snippet></ROW><ROW><id>2642744</id><snippet>doctest</snippet></ROW><ROW><id>2642744</id><snippet>unittest</snippet></ROW><ROW><id>2642744</id><snippet>doctest</snippet></ROW><ROW><id>2642744</id><snippet>gmpy</snippet></ROW><ROW><id>2642744</id><snippet>unittest</snippet></ROW><ROW><id>2642744</id><snippet>doctest</snippet></ROW><ROW><id>2642914</id><snippet>String.format("Got value: %s", variable);
</snippet></ROW><ROW><id>2643177</id><snippet>timedelta</snippet></ROW><ROW><id>2643177</id><snippet>datetime</snippet></ROW><ROW><id>2643177</id><snippet>from datetime import datetime, timedelta

now = datetime.now()
four_months_ago = now - timedelta(days=(4*365)/12)
</snippet></ROW><ROW><id>2643177</id><snippet>&gt;&gt;&gt; january_first = datetime(2009, 1,1)
&gt;&gt;&gt; january_first - timedelta(days=(4*365)/12)
datetime.datetime(2008, 9, 2, 0, 0)
</snippet></ROW><ROW><id>2643194</id><snippet>x = [] # a normal python list, not np.array
y = [...some list of files...]

for file in y:
    ncfile = netcdf_file(file,'r')
    xFragment = ncfile.variables["varname"][:]
    ncfile.close()
    x.append(xFragment)

combined_array = concatenate(x, axis=0)
</snippet></ROW><ROW><id>2643230</id><snippet>&gt;&gt;&gt; stuff = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt;
&gt;&gt;&gt; n=len(stuff)
&gt;&gt;&gt;
&gt;&gt;&gt; [(stuff+stuff[:n/2-1])[i:i+n/2] for i in range(n)]
[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9], [7, 8, 9, 1], [8, 9, 1, 2], [9, 1, 2, 3]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2643230</id><snippet>[1, 2, 3, 4], [2, 3, 4, 5], ..., [9, 1, 2, 3]  
</snippet></ROW><ROW><id>2643782</id><snippet>pattern = re.compile('|'.join(map(re.escape, keys)), re.IGNORECASE)
def format_term(term):
    return '[%s](%s)' % (term, term.lower())

converted_text = pattern.sub(lambda m: format_term(m.group(0)), text)
</snippet></ROW><ROW><id>2643910</id><snippet>sum(1 if meets_condition(x) else 0 for x in my_list)
# or 
sum(1 for x in my_list if meets_condition(x))
</snippet></ROW><ROW><id>2643910</id><snippet>def count_matching(condition, seq):
    """Returns the amount of items in seq that return true from condition"""
    return sum(1 for item in seq if condition(item))

count_matching(meets_condition, my_list)
</snippet></ROW><ROW><id>2644045</id><snippet>max_mood = max(self.mood_scale)
min_mood = min(self.mood_scale)
</snippet></ROW><ROW><id>2644255</id><snippet>from matplotlib import pylab as pl
import numpy as np

data = np.random.rand(6,6)
fig = pl.figure(1)
fig.clf()
ax = fig.add_subplot(1,1,1)
cax = ax.imshow(data, interpolation='nearest', vmin=0.5, vmax=0.99)
fig.colorbar(cax)

pl.show()
</snippet></ROW><ROW><id>2644346</id><snippet>str = "[[0,0,0],[0,0,1],[1,1,0]]"
strs = str.replace('[','').split('],')
lists = [map(int, s.replace(']','').split(',')) for s in strs]
</snippet></ROW><ROW><id>2644368</id><snippet>gc.get_referrers(obj)</snippet></ROW><ROW><id>2644481</id><snippet>def my_eval(condition1, lo, condition2)
    return {
      'and': condition1 and condition2,
      'or': condition1 or condition2
           }[lo]
</snippet></ROW><ROW><id>2644481</id><snippet>condition = conditions[0]
for cond, op in zip(conditions[1:], operators):
    condition = my_eval(condition, op, cond)
</snippet></ROW><ROW><id>2644481</id><snippet>condition1</snippet></ROW><ROW><id>2644481</id><snippet>condition2</snippet></ROW><ROW><id>2644481</id><snippet>my_eval</snippet></ROW><ROW><id>2645764</id><snippet>from nltk.corpus import wordnet

dog = wordnet.synset('dog.n.01')
print dog.lemma_names
</snippet></ROW><ROW><id>2645764</id><snippet>['dog', 'domestic_dog', 'Canis_familiaris']
</snippet></ROW><ROW><id>2645814</id><snippet>if not isinstance(a, basestring):
    ...
</snippet></ROW><ROW><id>2646319</id><snippet>os.kill(p.pid)</snippet></ROW><ROW><id>2646319</id><snippet>p.terminate()</snippet></ROW><ROW><id>2646319</id><snippet>os.utime('websrv.py')</snippet></ROW><ROW><id>2646319</id><snippet>os.kill(p.pid, signal.SIGINT)</snippet></ROW><ROW><id>2646319</id><snippet>Ctrl-C</snippet></ROW><ROW><id>2646616</id><snippet>{'TERM': 'linux', 'PWD': '/', 'UPSTART_INSTANCE': '', 'UPSTART_JOB': 'greeenlog', 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin'}
</snippet></ROW><ROW><id>2646616</id><snippet># greeenlog

description     "I log stuff."

start on startup
stop on shutdown

env DISPLAY=:0.0
env GTK_RC_FILES=/etc/gtk/gtkrc:/home/greeenguru/.gtkrc-1.2-gnome2

script
    exec /usr/local/greeenlog/main.pyw &gt; /tmp/greeenlog.out 2&gt;&amp;1
end script
</snippet></ROW><ROW><id>2647188</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(htmlSource)
</snippet></ROW><ROW><id>2647188</id><snippet>urlopen</snippet></ROW><ROW><id>2647188</id><snippet>f = urllib.urlopen("http://SOMEWHERE") 
soup = BeautifulSoup(f)
</snippet></ROW><ROW><id>2647198</id><snippet>Account</snippet></ROW><ROW><id>2647198</id><snippet>Domain</snippet></ROW><ROW><id>2647198</id><snippet>Domain.accounts</snippet></ROW><ROW><id>2647198</id><snippet>username: password</snippet></ROW><ROW><id>2647198</id><snippet>os.system</snippet></ROW><ROW><id>2647369</id><snippet>__init__.py</snippet></ROW><ROW><id>2647369</id><snippet> import mydir.utils
 def get_hash(): return 1
</snippet></ROW><ROW><id>2647369</id><snippet>__init__.py</snippet></ROW><ROW><id>2647369</id><snippet>import mydir.utils</snippet></ROW><ROW><id>2647694</id><snippet>str</snippet></ROW><ROW><id>2647694</id><snippet>print "Length: %s" % len(self.listOfThings)
</snippet></ROW><ROW><id>2647694</id><snippet>%</snippet></ROW><ROW><id>2647694</id><snippet>str.format</snippet></ROW><ROW><id>2647694</id><snippet>print "Length: {0}".format(len(self.listOfThings))  
</snippet></ROW><ROW><id>2647736</id><snippet>f = urllib2.urlopen("http://example.com/foo/bar")
s = f.read()
# s now holds the contents of the site
</snippet></ROW><ROW><id>2647736</id><snippet>urlopen()</snippet></ROW><ROW><id>2647893</id><snippet>import foolib
print foolib.__file__
</snippet></ROW><ROW><id>2647893</id><snippet>sys</snippet></ROW><ROW><id>2648186</id><snippet>a[2]</snippet></ROW><ROW><id>2648186</id><snippet>a.c</snippet></ROW><ROW><id>2648186</id><snippet>def makestruct(name, fields):
    fields = fields.split()
    import textwrap
    template = textwrap.dedent("""\
    class {name}(object):
        __slots__ = {fields!r}
        def __init__(self, {args}):
            {self_fields} = {args}
        def __getitem__(self, idx): 
            return getattr(self, fields[idx])
    """).format(
        name=name,
        fields=fields,
        args=','.join(fields), 
        self_fields=','.join('self.' + f for f in fields))
    d = {'fields': fields}
    exec template in d
    return d[name]
</snippet></ROW><ROW><id>2648186</id><snippet>__getitem__</snippet></ROW><ROW><id>2648186</id><snippet>namedtuple.a  :  0.473686933517 
namedtuple[0] :  0.180409193039
struct.a      :  0.180846214294
struct[0]     :  1.32191514969
</snippet></ROW><ROW><id>2648186</id><snippet>__slots__</snippet></ROW><ROW><id>2648186</id><snippet>__slots__</snippet></ROW><ROW><id>2648255</id><snippet>143.252.249.141</snippet></ROW><ROW><id>2648255</id><snippet>8000</snippet></ROW><ROW><id>2648359</id><snippet>tearDown</snippet></ROW><ROW><id>2648359</id><snippet>TestCase</snippet></ROW><ROW><id>2648359</id><snippet>class ExampleTestCase(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        time.sleep(1)  # sleep time in seconds
</snippet></ROW><ROW><id>2648359</id><snippet>TestCase</snippet></ROW><ROW><id>2648359</id><snippet>setUp</snippet></ROW><ROW><id>2648359</id><snippet>tearDown</snippet></ROW><ROW><id>2649261</id><snippet>5</snippet></ROW><ROW><id>2649261</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>2649429</id><snippet>the_dict[akey][-1][1]</snippet></ROW><ROW><id>2649429</id><snippet># Original rollback code:
for rlist in the_dict.itervalues():
    if not rlist: continue
    while rlist[-1][0] &gt; target_revno:
        rlist.pop()

# New rollback code
for revno in xrange(current_revno, target_revno, -1):
    for rlist in delta_index[revno]:
        assert rlist[-1][0] == revno
        del rlist[-1] # faster than rlist.pop()    
del delta_index[target_revno+1:]
</snippet></ROW><ROW><id>2649429</id><snippet>import collections

class RevDict(collections.MutableMapping):

    def __init__(self):
        self.current_revno = 0
        self.dict = {}
        self.delta_index = [[]]

    def __setitem__(self, key, value):
        if key in self.dict:
            rlist = self.dict[key]
            last_revno = rlist[-1][0]
            rtup = (self.current_revno, value)
            if last_revno == self.current_revno:
                rlist[-1] = rtup
                # delta_index already has an entry for this rlist
            else:
                rlist.append(rtup)
                self.delta_index[self.current_revno].append(rlist)
        else:
            rlist = [(self.current_revno, value)]
            self.dict[key] = rlist
            self.delta_index[self.current_revno].append(rlist)

    def __getitem__(self, key):
        if not key in self.dict:
            raise KeyError(key)
        return self.dict[key][-1][1]

    def new_revision(self):
        self.current_revno += 1
        self.delta_index.append([])

    def roll_back(self, target_revno):
        assert 0 &lt;= target_revno &lt; self.current_revno
        for revno in xrange(self.current_revno, target_revno, -1):
            for rlist in self.delta_index[revno]:
                assert rlist[-1][0] == revno
                del rlist[-1]
        del self.delta_index[target_revno+1:]
        self.current_revno = target_revno

    def __delitem__(self, key):
        raise TypeError("RevDict doesn't do del")

    def keys(self):
        return self.dict.keys()

    def __contains__(self, key):
        return key in self.dict

    def iteritems(self):
        for key, rlist in self.dict.iteritems():
            yield key, rlist[-1][1]

    def __len__(self):
        return len(self.dict)

    def __iter__(self):
        return self.dict.iterkeys()
</snippet></ROW><ROW><id>2649524</id><snippet>for row in iter(cursor.fetchone, None):
    process(row)
</snippet></ROW><ROW><id>2649524</id><snippet>iter()</snippet></ROW><ROW><id>2649524</id><snippet>while True:
    row = cursor.fetchone()
    if row is None:
        break
    process(row)
</snippet></ROW><ROW><id>2649524</id><snippet>for row in cursor:
    process(row)
</snippet></ROW><ROW><id>2649540</id><snippet># Read in a WAV and find the freq's
import pyaudio
import wave
import numpy as np

chunk = 2048

# open up a wave
wf = wave.open('test-tones/440hz.wav', 'rb')
swidth = wf.getsampwidth()
RATE = wf.getframerate()
# use a Blackman window
window = np.blackman(chunk)
# open stream
p = pyaudio.PyAudio()
stream = p.open(format =
                p.get_format_from_width(wf.getsampwidth()),
                channels = wf.getnchannels(),
                rate = RATE,
                output = True)

# read some data
data = wf.readframes(chunk)
# play stream and find the frequency of each chunk
while len(data) == chunk*swidth:
    # write data out to the audio stream
    stream.write(data)
    # unpack the data and times by the hamming window
    indata = np.array(wave.struct.unpack("%dh"%(len(data)/swidth),\
                                         data))*window
    # Take the fft and square each value
    fftData=abs(np.fft.rfft(indata))**2
    # find the maximum
    which = fftData[1:].argmax() + 1
    # use quadratic interpolation around the max
    if which != len(fftData)-1:
        y0,y1,y2 = np.log(fftData[which-1:which+2:])
        x1 = (y2 - y0) * .5 / (2 * y1 - y2 - y0)
        # find the frequency and output it
        thefreq = (which+x1)*RATE/chunk
        print "The freq is %f Hz." % (thefreq)
    else:
        thefreq = which*RATE/chunk
        print "The freq is %f Hz." % (thefreq)
    # read some more data
    data = wf.readframes(chunk)
if data:
    stream.write(data)
stream.close()
p.terminate()
</snippet></ROW><ROW><id>2649570</id><snippet>from itertools import permutations

def is_solution(seq):
    return all(int(seq[:i]) % i == 0 for i in range(2, 9))

for p in permutations('123456789'):
    seq = ''.join(p)
    if is_solution(seq):
        print(seq)
</snippet></ROW><ROW><id>2650039</id><snippet>memcache</snippet></ROW><ROW><id>2650157</id><snippet>authenticate</snippet></ROW><ROW><id>2650157</id><snippet>get_user</snippet></ROW><ROW><id>2650157</id><snippet>authenticate</snippet></ROW><ROW><id>2650157</id><snippet>def authenticate(self, username=None, password=None):
</snippet></ROW><ROW><id>2650157</id><snippet>class FirstLastNameBackend(object):
    def authenticate(self, username=None, password=None):
        first, last = username.split(' ', 1)
        try:
            user = User.objects.get(first_name=first, last_name=last)
            if user:
                # Check if the password is correct
                # check if the user is active
                # etc., etc.
                return user
        except:
            pass
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except:
            return None
</snippet></ROW><ROW><id>2650157</id><snippet>split</snippet></ROW><ROW><id>2650337</id><snippet>&gt; 'Germany': [{"Luge - Men's Singles": 'Gold'},
             {"Luge - Men's Singles": 'Silver'},
             {"Luge - Women's Singles": 'Gold'},
             {"Luge - Women's Singles": 'Bronze'},
             {'Luge - Doubles': 'Bronze'}]
</snippet></ROW><ROW><id>2650337</id><snippet>&gt; 'Germany': [{"Luge - Men's Singles": ['Gold', 'Silver']},
             {"Luge - Women's Singles": ['Gold', 'Bronze'},
             {'Luge - Doubles': 'Bronze'}]
</snippet></ROW><ROW><id>2650337</id><snippet>[{'Germany': {"Luge - Men's Singles": 'Gold'}}, 
{'Germany': {"Luge - Men's Singles": 'Silver'}},
{'Italy': {"Luge - Men's Singles": 'Bronze'}}]
</snippet></ROW><ROW><id>2650337</id><snippet>['Germany': {"Luge - Men's Singles": ['Gold', 'Silver'],
             "Luge - Women's Singles": ['Gold', 'Bronze']},
 'Italy': {"Luge - Men's Singles": ['Bronze']}]
</snippet></ROW><ROW><id>2650337</id><snippet>[{'Germany': {"Luge - Women's Singles": 'Gold'}},
{'Austria': {"Luge - Women's Singles": 'Silver'}},
{'Germany': {"Luge - Women's Singles": 'Bronze'}}]
</snippet></ROW><ROW><id>2650337</id><snippet>['Germany': {"Luge - Women's Singles": ['Gold', 'Bronze']},
 'Austria': {"Luge - Women's Singles": ['Silver']}]
</snippet></ROW><ROW><id>2650337</id><snippet>from collections import defaultdict

merged = defaultdict(lambda: defaultdict(list))
for d in list_of_dicts:
    for k in d:
        for competition, medal in d[k].iteritems():
            merged[k][competition].append(medal)
</snippet></ROW><ROW><id>2650337</id><snippet>defaultdict(&lt;function &lt;lambda&gt; at 0x1907db0&gt;,
 {'Italy': defaultdict(&lt;type 'list'&gt;, {"Luge - Men's Singles": ['Bronze']}),
  'Germany': defaultdict(&lt;type 'list'&gt;, {"Luge - Men's Singles": ['Gold', 'Silver']})})
</snippet></ROW><ROW><id>2650337</id><snippet>from collections import defaultdict

merged = defaultdict(lambda: defaultdict(list))
for L in listoflistsofdicts:
  for d in L:
    for k in d:
      for competition, medal in d[k].iteritems():
          merged[k][competition].append(medal)
</snippet></ROW><ROW><id>2650337</id><snippet> defaultdict(&lt;function &lt;lambda&gt; at 0x1904b70&gt;,
    {'Italy': defaultdict(&lt;type 'list'&gt;, {"Luge - Men's Singles": ['Bronze']}),
     'Austria': defaultdict(&lt;type 'list'&gt;, {'Luge - Doubles': ['Gold'],
                                            "Luge - Women's Singles": ['Silver']}),
     'Latvia': defaultdict(&lt;type 'list'&gt;, {'Luge - Doubles': ['Silver']}),
     'Germany': defaultdict(&lt;type 'list'&gt;, {'Luge - Doubles': ['Bronze'],
                                            "Luge - Men's Singles": ['Gold', 'Silver'],
                                            "Luge - Women's Singles": ['Gold', 'Bronze']})
    })
</snippet></ROW><ROW><id>2650377</id><snippet>webbrowser</snippet></ROW><ROW><id>2650377</id><snippet>subprocess</snippet></ROW><ROW><id>2650377</id><snippet>firefox.exe -new-window &lt;url&gt;</snippet></ROW><ROW><id>2650377</id><snippet>&lt;url&gt;</snippet></ROW><ROW><id>2650377</id><snippet>firefox.exe -new-tab &lt;url&gt;</snippet></ROW><ROW><id>2650538</id><snippet>processed</snippet></ROW><ROW><id>2650538</id><snippet>processed = []
processed_lock = threading.Lock()

def consumer():
    while True:
        with processed_lock.acquire():
            fileInList = file in processed
        if fileInList:
            # ... et cetera
</snippet></ROW><ROW><id>2650538</id><snippet># do stuff here</snippet></ROW><ROW><id>2650538</id><snippet>multiprocessing</snippet></ROW><ROW><id>2650538</id><snippet>threading</snippet></ROW><ROW><id>2650666</id><snippet>munch &lt;filename&gt;
</snippet></ROW><ROW><id>2650666</id><snippet>munch --name &lt;filename&gt;
</snippet></ROW><ROW><id>2650666</id><snippet>&lt;filename&gt;</snippet></ROW><ROW><id>2650666</id><snippet>parse_args</snippet></ROW><ROW><id>2650666</id><snippet>optparse</snippet></ROW><ROW><id>2650902</id><snippet>from sys import stdin, stdout</snippet></ROW><ROW><id>2650926</id><snippet>(cmd0 &lt;/dev/null; cmd1) | cmd2
</snippet></ROW><ROW><id>2651078</id><snippet>anydbm</snippet></ROW><ROW><id>2651078</id><snippet>dumbdbm</snippet></ROW><ROW><id>2651078</id><snippet>iteritems</snippet></ROW><ROW><id>2651078</id><snippet>$ /usr/bin/python2.5
Python 2.5.4 (r254:67916, Feb 11 2010, 00:50:55) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import anydbm
&gt;&gt;&gt; db = anydbm.open('cache', 'c')
&gt;&gt;&gt; dir(db)
['close', 'get', 'has_key', 'keys', 'setdefault']
</snippet></ROW><ROW><id>2651078</id><snippet>$ /usr/local/bin/python2.5
Python 2.5.4 (r254:67917, Dec 23 2008, 14:57:27) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import anydbm
&gt;&gt;&gt; db = anydbm.open('cache2', 'c')
&gt;&gt;&gt; dir(db)
['__cmp__', '__contains__', '__del__', '__delitem__', '__doc__', '__getitem__', '__init__', '__iter__', '__len__', '__module__', '__repr__', '__setitem__', '_checkCursor', '_checkOpen', '_closeCursors', '_cursor_refs', '_gen_cref_cleaner', '_make_iter_cursor', 'clear', 'close', 'db', 'dbc', 'first', 'get', 'has_key', 'isOpen', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'last', 'next', 'pop', 'popitem', 'previous', 'saved_dbc_key', 'set_location', 'setdefault', 'sync', 'update', 'values']
&gt;&gt;&gt; db.iteritems()
&lt;generator object at 0x481760&gt;
&gt;&gt;&gt; db.__module__
'bsddb'
</snippet></ROW><ROW><id>2651223</id><snippet>Welcome to Scala version 2.8.0.r21561-b20100414020114 (Java HotSpot(TM) Client VM, Java 1.6.0_18).
Type in expressions to have them evaluated.
Type :help for more information.

scala&gt; val xs = 0 to 9
xs: scala.collection.immutable.Range.Inclusive with scala.collection.immutable.Range.ByOne = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

scala&gt; val ys = List.range(0,10)
ys: List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

scala&gt; val zs = Array.range(0,10)
zs: Array[Int] = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

scala&gt; (xs,ys).zipped.map{ _+_ }
res1: scala.collection.immutable.IndexedSeq[Int] = Vector(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)

scala&gt; (zs,ys,xs).zipped.map{ _+_+_ }
res2: Array[Int] = Array(0, 3, 6, 9, 12, 15, 18, 21, 24, 27)

scala&gt;
</snippet></ROW><ROW><id>2651394</id><snippet>python setup.py build
python setup.py install
</snippet></ROW><ROW><id>2651601</id><snippet>id_a</snippet></ROW><ROW><id>2651847</id><snippet>from module import *</snippet></ROW><ROW><id>2652213</id><snippet>class AuthLinkBackend(object):
  def authenticate(auth_link = None):
    if auth_link:
      # validate and expire this link, return authenticated user if successful
      return user
</snippet></ROW><ROW><id>2652213</id><snippet>user = auth.authenticate(auth_link=link)
if user:
  auth.login(request, user)
</snippet></ROW><ROW><id>2652425</id><snippet>a = array([1,1,-1,-2,-3,4,5])
asign = np.sign(a)
signchange = ((np.roll(asign, 1) - asign) != 0).astype(int)
print signchange
array([0, 0, 1, 0, 0, 1, 0])
</snippet></ROW><ROW><id>2652425</id><snippet>signchange[0] = 0
</snippet></ROW><ROW><id>2652425</id><snippet>sz = asign == 0
while sz.any():
    asign[sz] = np.roll(asign, 1)[sz]
    sz = asign == 0
</snippet></ROW><ROW><id>2652550</id><snippet>import Image, numpy
i = Image.open('img.png')
i = i.convert('L')    #convert to grayscale
a = numpy.asarray(i) # a is readonly

b = abs(numpy.fft.rfft2(a))

j = Image.fromarray(b)
j.save('img2.png')
</snippet></ROW><ROW><id>2652550</id><snippet>abs</snippet></ROW><ROW><id>2652550</id><snippet>axes</snippet></ROW><ROW><id>2652550</id><snippet>rfft2</snippet></ROW><ROW><id>2652550</id><snippet>import Image, numpy
i = Image.open('img.png')
i = i.convert('L')    #convert to grayscale
a = numpy.asarray(i)

b = numpy.fft.rfft2(a)
c = numpy.fft.irfft2(b)

j = Image.fromarray(c.astype(numpy.uint8))
j.save('img2.png')
</snippet></ROW><ROW><id>2652814</id><snippet>__iter__</snippet></ROW><ROW><id>2652814</id><snippet>__iter__</snippet></ROW><ROW><id>2652814</id><snippet>return iter(self._plurks)</snippet></ROW><ROW><id>2652814</id><snippet>__iter__</snippet></ROW><ROW><id>2652814</id><snippet>__iter__</snippet></ROW><ROW><id>2652814</id><snippet>def __iter__(self):
    for item in self._plurks:
        yield process(item)
</snippet></ROW><ROW><id>2652894</id><snippet>fig.legend((plot1,plot2), (lab1,lab2), 'right')
</snippet></ROW><ROW><id>2653143</id><snippet>StringIO</snippet></ROW><ROW><id>2653143</id><snippet>StringIO</snippet></ROW><ROW><id>2653143</id><snippet>io</snippet></ROW><ROW><id>2653503</id><snippet>    string_cookie = os.environ.get(u"HTTP_COOKIE", u"")
    self.cookie = Cookie.SimpleCookie()
    self.output_cookie = Cookie.SimpleCookie()
    self.cookie.load(string_cookie)
</snippet></ROW><ROW><id>2653503</id><snippet>string_cookie</snippet></ROW><ROW><id>2653503</id><snippet>u""</snippet></ROW><ROW><id>2653503</id><snippet>sessions.py</snippet></ROW><ROW><id>2653503</id><snippet>if type(rawdata) == type(""):
    self.__ParseString(rawdata)
else:
    # self.update() wouldn't call our custom __setitem__
    for k, v in rawdata.items():
</snippet></ROW><ROW><id>2653503</id><snippet>    if type(rawdata) == type(""):
        self.__ParseString(rawdata)
    else:
        self.update(rawdata)
</snippet></ROW><ROW><id>2653503</id><snippet>self.update(u'')</snippet></ROW><ROW><id>2653503</id><snippet>u''</snippet></ROW><ROW><id>2653503</id><snippet>load</snippet></ROW><ROW><id>2653822</id><snippet>/tmp/migrate.sql</snippet></ROW><ROW><id>2653822</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>2653994</id><snippet>cdef</snippet></ROW><ROW><id>2653994</id><snippet>cpdef</snippet></ROW><ROW><id>2654094</id><snippet>__import__('%s.handlers' % x.__name__)
</snippet></ROW><ROW><id>2654094</id><snippet>logging</snippet></ROW><ROW><id>2654094</id><snippet>x.handlers</snippet></ROW><ROW><id>2654130</id><snippet>inspect</snippet></ROW><ROW><id>2654130</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def f1(): f2()
... 
&gt;&gt;&gt; def f2():
...   curframe = inspect.currentframe()
...   calframe = inspect.getouterframes(curframe, 2)
...   print 'caller name:', calframe[1][3]
... 
&gt;&gt;&gt; f1()
caller name: f1
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2654175</id><snippet>import math
def number_of_bits(n):
    return int(math.log(n, 2)) + 1
</snippet></ROW><ROW><id>2654806</id><snippet>int</snippet></ROW><ROW><id>2654806</id><snippet>def is_new_style(cls):
    return hasattr(cls, '__class__') \
           and \
           ('__dict__' in dir(cls) or hasattr(cls, '__slots__'))


class new_style(object):
    pass

class old_style():
    pass

print is_new_style(int)
print is_new_style(new_style)
print is_new_style(old_style)
</snippet></ROW><ROW><id>2654806</id><snippet>False
True
False
</snippet></ROW><ROW><id>2654806</id><snippet>def is_new_style(cls):
    return str(cls).startswith('&lt;class ')
</snippet></ROW><ROW><id>2654818</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>2654818</id><snippet>settings.AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>2654818</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>2654818</id><snippet>django.contrib.auth.models.Group</snippet></ROW><ROW><id>2654818</id><snippet>User.get_profile()</snippet></ROW><ROW><id>2654818</id><snippet>save()</snippet></ROW><ROW><id>2654818</id><snippet>from django.db.models.signals import post_save
from django.contrib.auth import User
from myUserProfileApp import UserProfile

def make_user_profile(sender, **kwargs):
    if 'created' not in kwargs or not kwargs['created']:
        return

    # Assumes that the `ForeignKey(User)` field in "UserProfile" is named "user".
    profile = UserProfile(user=kwargs["instance"])
    # Set anything else you need to in the profile, then...
    profile.save()

post_save.connect(make_user_profile, sender=User, weak=False)
</snippet></ROW><ROW><id>2654818</id><snippet>$ ./manage.py shell
&gt;&gt;&gt; from django.contrib.auth import User
&gt;&gt;&gt; from myUserProfileApp import UserProfile
&gt;&gt;&gt; for u in User.objects.all():
...  UserProfile(user=u).save() # Add other params as needed.
...
</snippet></ROW><ROW><id>2654818</id><snippet>&gt;&gt;&gt; for u in User.objects.all():
...  try:
...   UserProfile(user=u).save() # Add other params as needed.
...  except:
...   pass
</snippet></ROW><ROW><id>2654886</id><snippet>print</snippet></ROW><ROW><id>2654886</id><snippet>sys.stdout</snippet></ROW><ROW><id>2654886</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>2654886</id><snippet>.getValue</snippet></ROW><ROW><id>2654886</id><snippet>StringIO</snippet></ROW><ROW><id>2654886</id><snippet>sys.stdout</snippet></ROW><ROW><id>2654886</id><snippet>logging</snippet></ROW><ROW><id>2654937</id><snippet>responses = {
        "resp1": {
                "start": function() { ...  },
                "stop": function() { ... },
        },
        "resp2": {
                "start": function() { ...  },
                "stop": function() { ... },
        },
        ...
}
responses["resp1"]["start"]();
</snippet></ROW><ROW><id>2654937</id><snippet>responses = {
        resp1 = {
                start = function() ...  end;
                end = function() ...  end;
        };
        ...
}
responses.resp1.start();
</snippet></ROW><ROW><id>2654937</id><snippet>responses = {
    "resp1" =&gt; {
        "start" =&gt; lambda { },
        "stop" =&gt; lambda { },
    },
}
responses["resp1"]["start"].call
</snippet></ROW><ROW><id>2654937</id><snippet>def resp1_start():
    pass
def resp1_stop():
    pass
responses = {
    "resp1": {
        "start": resp1_start,
        "stop": resp1_stop,
    },
}
responses["resp1"]["start"]()
</snippet></ROW><ROW><id>2655081</id><snippet>import re
UNIQ='_UNIQUE_STRING_'
class MarkPlaceholders(dict):
    def __getitem__(self, key):
        return UNIQ+('(?P&lt;%s&gt;.*?)'%key)+UNIQ

def format_to_re(format):
    parts = (format % MarkPlaceholders()).split(UNIQ)
    for i in range(0, len(parts), 2):
        parts[i] = re.escape(parts[i])
    return ''.join(parts)
</snippet></ROW><ROW><id>2655081</id><snippet>&gt;&gt;&gt; layout = '%(group)s/foo-%(locale)s/file.txt'
&gt;&gt;&gt; print format_to_re(layout)
(?P&lt;group&gt;.*?)\/foo\-(?P&lt;locale&gt;.*?)\/file\.txt
&gt;&gt;&gt; pattern = re.compile(format_to_re(layout))
&gt;&gt;&gt; print pattern.match('something/foo-en-gb/file.txt').groupdict()
{'locale': 'en-gb', 'group': 'something'}
</snippet></ROW><ROW><id>2655111</id><snippet>class Sample(object):
  _count = 0

  def __init__(self):
    Sample._count += 1

  @property
  def count(self):
    return Sample._count
</snippet></ROW><ROW><id>2655111</id><snippet>a.py</snippet></ROW><ROW><id>2655111</id><snippet>&gt;&gt;&gt; import a
&gt;&gt;&gt; x = a.Sample()
&gt;&gt;&gt; print x.count
1
&gt;&gt;&gt; y = a.Sample()
&gt;&gt;&gt; print x.count
2
</snippet></ROW><ROW><id>2655172</id><snippet>SlugField</snippet></ROW><ROW><id>2655558</id><snippet>trap "echo killing childs; pkill -P $$"  EXIT
</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index</snippet></ROW><ROW><id>2655593</id><snippet>Test</snippet></ROW><ROW><id>2655593</id><snippet>TestController</snippet></ROW><ROW><id>2655593</id><snippet>im_func</snippet></ROW><ROW><id>2655593</id><snippet>Test</snippet></ROW><ROW><id>2655593</id><snippet>__call__</snippet></ROW><ROW><id>2655593</id><snippet>TestController</snippet></ROW><ROW><id>2655593</id><snippet>class Test(object):
    def __call__( self, f):
        def wrapper(self, *args, **kwargs):
            # anything in the old Test.__call__ goes here.
            return f(self, *args, **kwargs)
        return wrapper

class TestController(BaseController):
    @Test()
    def index(self):
        return 'hello world'
</snippet></ROW><ROW><id>2655593</id><snippet>@decorator
def foo(...):
</snippet></ROW><ROW><id>2655593</id><snippet>def foo(...):
    ...
foo = decorator(foo)
</snippet></ROW><ROW><id>2655593</id><snippet>    @Test
    def index(self):
</snippet></ROW><ROW><id>2655593</id><snippet>Test</snippet></ROW><ROW><id>2655593</id><snippet>index</snippet></ROW><ROW><id>2655593</id><snippet>index</snippet></ROW><ROW><id>2655593</id><snippet>TestController</snippet></ROW><ROW><id>2655593</id><snippet>class TestController(BaseController)
    def index(self):
        ...
    index = Test(index)
</snippet></ROW><ROW><id>2655593</id><snippet>Test.__call__</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index</snippet></ROW><ROW><id>2655593</id><snippet>tc</snippet></ROW><ROW><id>2655593</id><snippet>TestController</snippet></ROW><ROW><id>2655593</id><snippet>tc.index()</snippet></ROW><ROW><id>2655593</id><snippet>tc.index.__call__()</snippet></ROW><ROW><id>2655593</id><snippet>Test.__call__(tc.index)</snippet></ROW><ROW><id>2655593</id><snippet>Test.__call__</snippet></ROW><ROW><id>2655593</id><snippet>tc</snippet></ROW><ROW><id>2655593</id><snippet>Test.index</snippet></ROW><ROW><id>2655593</id><snippet>tc.index</snippet></ROW><ROW><id>2655593</id><snippet>im_func</snippet></ROW><ROW><id>2655593</id><snippet>Test.__call__</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index</snippet></ROW><ROW><id>2655593</id><snippet>class Test(object):
    def __call__( self, f):
        # if done properly, __call__ will get invoked when the decorated method 
        # is defined, not when it's invoked
        print 'Test.__call__'
        def wrapper(self, *args, **kwargs):
            # wrapper will get invoked instead of the decorated method
            print 'wrapper in Test.__call__'
            return f(self, *args, **kwargs)
        return wrapper
</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index</snippet></ROW><ROW><id>2655593</id><snippet>class TestController(BaseController):
    def index(self):
        ...
    index = Test()(index) # note: Test.__call__ is invoked here.
    # 'index' is now 'wrapper' from Test.__call__

tc = TestController
tc.index() # wrapper from Test.__call__ is invoked here
</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index</snippet></ROW><ROW><id>2655593</id><snippet>tc.index()</snippet></ROW><ROW><id>2655593</id><snippet>TestController.index(tc)</snippet></ROW><ROW><id>2655593</id><snippet>tc</snippet></ROW><ROW><id>2655767</id><snippet>def get_web_content(url):
    # Extracted code
    url_handler = urllib2.urlopen(url)
    content = url_handler.read()
    url_handler.close()
    return content

def write_to_file(content, filename, tmpdir):
    # Extracted code
    file_handler = open(os.path.join(tempdir, filename), "w")
    file_handler.write(content)
    file_handler.close()

def download_distribution(url, tempdir):
    # Original code, after extractions
    distribution_contents = get_web_content(url)
    filename = get_file_name(url)
    write_to_file(distribution_contents, filename, tmpdir)
    return True
</snippet></ROW><ROW><id>2655767</id><snippet>import module_I_want_to_test

def mock_web_content(url):
    return """Some fake content, useful for testing"""
def mock_write_to_file(content, filename, tmpdir):
    # In this case, do nothing, as we don't do filesystem meddling while unit testing
    pass

module_I_want_to_test.get_web_content = mock_web_content
module_I_want_to_test.write_to_file = mock_write_to_file

class SomeTests(unittest.Testcase):
    # And so on...
</snippet></ROW><ROW><id>2656070</id><snippet>lambda</snippet></ROW><ROW><id>2656070</id><snippet>filter</snippet></ROW><ROW><id>2656070</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; [item for item in a if sum(item) &gt; 10]
[[4, 5, 6]]
</snippet></ROW><ROW><id>2656070</id><snippet>&gt;&gt;&gt; [(x, y, z) for x, y, z in a if (x + y) ** z &gt; 30]
[(4, 5, 6)]
</snippet></ROW><ROW><id>2656070</id><snippet>lambda (x, y, z): x + y + z</snippet></ROW><ROW><id>2656070</id><snippet>x</snippet></ROW><ROW><id>2656070</id><snippet>y</snippet></ROW><ROW><id>2656070</id><snippet>z</snippet></ROW><ROW><id>2656070</id><snippet>def</snippet></ROW><ROW><id>2656070</id><snippet>def f((x, y, z)): return x + y + z</snippet></ROW><ROW><id>2656070</id><snippet>def f(item): x, y, z = item; return x + y + z</snippet></ROW><ROW><id>2656070</id><snippet>lambda item: item[0] + item[1] + item[2]</snippet></ROW><ROW><id>2656170</id><snippet>addItems</snippet></ROW><ROW><id>2656170</id><snippet>qlistwidget</snippet></ROW><ROW><id>2656170</id><snippet>values = os.listdir("c:\\windows")

qlist = QtCore.QStringList(map(QtCore.QString, values))
qlistwidget.addItems(qlist)
</snippet></ROW><ROW><id>2656269</id><snippet>c.addFont('TestFont')
c.drawString(1,1,'test data here')
</snippet></ROW><ROW><id>2656269</id><snippet>setFont</snippet></ROW><ROW><id>2656269</id><snippet>drawString</snippet></ROW><ROW><id>2656320</id><snippet># if there's no user set, just setup a blank instance
c.current_user = auth.get_user(User()) 
</snippet></ROW><ROW><id>2656320</id><snippet>def get_user(default):
    """Return the user object from the `repoze.who` Metadata Plugin

    :param default: default item to send back if user not logged in

    Since we might not be logged in and template choke on trying to output
    None/empty data we can pass in a blank User object to get back as a default
    and the templates should work ok with default empty values on that

    """
    if 'repoze.who.identity' in request.environ:
        return request.environ['repoze.who.identity']['user']
    else:
        return default
</snippet></ROW><ROW><id>2656405</id><snippet>onerror()</snippet></ROW><ROW><id>2656405</id><snippet>pathutils.py</snippet></ROW><ROW><id>2656405</id><snippet>def onerror(func, path, exc_info):
    """
    Error handler for ``shutil.rmtree``.

    If the error is due to an access error (read only file)
    it attempts to add write permission and then retries.

    If the error is for another reason it re-raises the error.

    Usage : ``shutil.rmtree(path, onerror=onerror)``
    """
    import stat
    if not os.access(path, os.W_OK):
        # Is the error an access error ?
        os.chmod(path, stat.S_IWUSR)
        func(path)
    else:
        raise
</snippet></ROW><ROW><id>2656694</id><snippet>    def post_login(self):
    """ Handle logic post a user's login

    I want to create a login_handler that's redirected to after login. This would
    check 

    - if user was logged in, if not then send back to login
    - if user is admin, go to job list
    - adjust the max age on the existing cookie to XX remember me timeframe

    """
    if auth.check(not_anonymous()):
        log.debug('checked auth')
    else:
        # login failed, redirect back to login
        log.debug('failed auth')
        redirect_to(controller="root", action="login", login_failed=True)

    # expire this cookie into the future
    ck = request.cookies['authtkt']
    response.set_cookie('authtkt', ck,
            max_age=60*60*24*7,
            path='/'
    )

    redirect_to(controller="job", action="list")
</snippet></ROW><ROW><id>2656694</id><snippet>  app = setup_morpace_auth(app, User, Group, Permission, meta.Session,
                      post_login_url='/root/post_login',
                      post_logout_url='/login',
                      log_level='debug',
                      log_file='stdout'
                      )
</snippet></ROW><ROW><id>2656801</id><snippet>mail=Mail()
mail.settings.server="smtp.example.com:25" or "gae"
mail.settings.sender="you@example.com"
mail.settings.tls=True or False
mail.settings.login="you:password"
</snippet></ROW><ROW><id>2656878</id><snippet>class PermissiveDict(dict):
    default = None

    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            return self.default

def exec_with_default(code, default=None):
    ns = PermissiveDict()
    ns.default = default
    exec code in ns
    return ns
</snippet></ROW><ROW><id>2656916</id><snippet>shutil.copystat</snippet></ROW><ROW><id>2656916</id><snippet>pyexiv2</snippet></ROW><ROW><id>2656916</id><snippet>python-pyexiv2</snippet></ROW><ROW><id>2656916</id><snippet>pyexiv2</snippet></ROW><ROW><id>2656916</id><snippet>import os
import time
import Image
import ExifTags   # This is provided by PIL
img=Image.open(filename,'r')
</snippet></ROW><ROW><id>2656916</id><snippet>_getexif()</snippet></ROW><ROW><id>2656916</id><snippet>d = dict((ExifTags.TAGS[k], v) for k, v in img._getexif().items())
print(d['DateTimeOriginal'])
</snippet></ROW><ROW><id>2656916</id><snippet>dateutils</snippet></ROW><ROW><id>2656916</id><snippet>timestamp=time.strptime(d['DateTimeOriginal'],"%Y:%m:%d %H:%M:%S")
</snippet></ROW><ROW><id>2656916</id><snippet>w, h = img.size
width,height = 800,600
if h &gt; w: width,height = height,width
</snippet></ROW><ROW><id>2656916</id><snippet>os.utime</snippet></ROW><ROW><id>2656916</id><snippet>filename = filename + "-800x600.jpg"
shunken = img.resize((width, height), Image.ANTIALIAS)
shunken.save(filename)
st = os.stat(filename)
os.utime(filename,(st.st_atime,time.mktime(timestamp)))
</snippet></ROW><ROW><id>2656947</id><snippet>setattr(classname, "propertyname", value)</snippet></ROW><ROW><id>2656947</id><snippet>classname.property = value</snippet></ROW><ROW><id>2657006</id><snippet>'\t'</snippet></ROW><ROW><id>2657006</id><snippet>'\t\t'</snippet></ROW><ROW><id>2657006</id><snippet>'abc\tabc'</snippet></ROW><ROW><id>2657006</id><snippet>'abc'</snippet></ROW><ROW><id>2657006</id><snippet>'abc\tabc\tabc'</snippet></ROW><ROW><id>2657006</id><snippet>'abc'</snippet></ROW><ROW><id>2657006</id><snippet>'abc'</snippet></ROW><ROW><id>2657202</id><snippet>for</snippet></ROW><ROW><id>2657202</id><snippet>for</snippet></ROW><ROW><id>2657202</id><snippet>for</snippet></ROW><ROW><id>2657330</id><snippet>^</snippet></ROW><ROW><id>2657330</id><snippet>**</snippet></ROW><ROW><id>2657330</id><snippet>(288200/393000)^n
</snippet></ROW><ROW><id>2657330</id><snippet>288200/393000
</snippet></ROW><ROW><id>2657330</id><snippet>0</snippet></ROW><ROW><id>2657330</id><snippet>import math

def p(n):
    a = 393000.0 # &lt;-- notice the .0 
    b = 288200.0
    c = b / a
    return a * ( c**n * math.exp(-c) )/ math.factorial(n)

print p(3)
</snippet></ROW><ROW><id>2657330</id><snippet>12406.890756
</snippet></ROW><ROW><id>2657639</id><snippet>len</snippet></ROW><ROW><id>2657703</id><snippet>s = "0123456789"*100 # test string
import re
print re.sub("(.{64})", "\\1\n", s, 0, re.DOTALL)
</snippet></ROW><ROW><id>2657703</id><snippet>re.DOTALL</snippet></ROW><ROW><id>2657703</id><snippet>s/</snippet></ROW><ROW><id>2657911</id><snippet>class BaseView {
   public function display(&amp; $data, array $columnNames) {
      foreach($data as $row) {
         foreach($columnNames as $c) {
            echo $row-&gt;$c; // or $row[$c] or whatever your data is, I'm assuming objects
         }
      echo "\n";
   }
}

class UserView extends BaseView{
    public function display(&amp; $data) {
        parent::display($data, array('Name', 'Address');
    }
}
</snippet></ROW><ROW><id>2657911</id><snippet>echo '&lt;a href="user/',$record['id'],'"&gt;',$record['name'],'&lt;/a&gt;';
</snippet></ROW><ROW><id>2658332</id><snippet>re</snippet></ROW><ROW><id>2658332</id><snippet>re.sub("(?s).*?(cat|dog|rat)", "\\1", input_text, 1)
</snippet></ROW><ROW><id>2658332</id><snippet>rex= re.compile("(?s).*?(cat|dog|rat)")
result= rex.sub("\\1", input_text, 1)
</snippet></ROW><ROW><id>2658332</id><snippet>.*?</snippet></ROW><ROW><id>2658332</id><snippet>(?s)</snippet></ROW><ROW><id>2658332</id><snippet>&gt;&gt;&gt; input_text= "I have a dog and a cat"
&gt;&gt;&gt; re.sub(".*?(cat|dog|rat)", "\\1", input_text, 1)
'dog and a cat'

&gt;&gt;&gt; re.sub("(?s).*?(cat|dog|rat)", "\\1", input_text, 1)
'I have no animals!'

&gt;&gt;&gt; input_text= "This is irrational"
&gt;&gt;&gt; re.sub("(?s).*?(cat|dog|rat)", "\\1", input_text, 1)
'rational'
</snippet></ROW><ROW><id>2658332</id><snippet>&gt;&gt;&gt; re.sub(r"(?s).*?\b(cat|dog|rat)\b", "\\1", input_text, 1)
'This is irrational'
</snippet></ROW><ROW><id>2658546</id><snippet>// create models
QStandardItemModel* model = new (QStandardItemModel);
QSortFilterProxyModel* proxyModel = new QSortFilterProxyModel(this);
proxyModel-&gt;setSourceModel(model);

// set model
ui-&gt;treeView-&gt;setModel(proxyModel);   
ui-&gt;treeView-&gt;setSortingEnabled(true);

// generate items
QStandardItem* parentItem0 = model-&gt;invisibleRootItem();
QModelIndex index = parentItem0-&gt;index();
for (int i = 0; i &lt; 4; ++i)
{
    QStandardItem* item = new QStandardItem(QString("new item %0").arg(i));
    parentItem0-&gt;appendRow(item);
    parentItem0 = item;

    // expand items using proxyModel-&gt;mapFromSource 
    ui-&gt;treeView-&gt;expand(proxyModel-&gt;mapFromSource(item-&gt;index()));
    // line below doesn't work for you
    //ui-&gt;treeView-&gt;expand(item-&gt;index());
}
</snippet></ROW><ROW><id>2658595</id><snippet>export DJANGO_SETTINGS_MODULE=mysite.settings</snippet></ROW><ROW><id>2658595</id><snippet>from app.models import MyModel

a = MyModel(field=value)
a.save()
</snippet></ROW><ROW><id>2658595</id><snippet>from django.core.management import setup_environ
import mysite.settings
setup_environ(mysite.settings)
</snippet></ROW><ROW><id>2658595</id><snippet>from django.conf import settings
settings.configure(DEBUG=False, DATABASE_NAME="mydb", ...)
</snippet></ROW><ROW><id>2658737</id><snippet>fo.flush()
</snippet></ROW><ROW><id>2658737</id><snippet>os.fsync()
</snippet></ROW><ROW><id>2658810</id><snippet>input_text.strip(" ()").split(",")

&gt;&gt;&gt; "( ABC,2004 )".strip(" ()").split(",")
['ABC', '2004']
</snippet></ROW><ROW><id>2658810</id><snippet>[item.strip() for item in input_text.strip(" ()").split(",")]
</snippet></ROW><ROW><id>2659007</id><snippet>self.timer = QtCore.QTimer(self)
self.timer.singleShot(1, self.printRowCount)
</snippet></ROW><ROW><id>2659051</id><snippet>$ sudo chown -R me:me virtualenvdir
$ sudo chmod -R a+rX virtualenvdir
</snippet></ROW><ROW><id>2659051</id><snippet>me</snippet></ROW><ROW><id>2659051</id><snippet>virtualenvdir</snippet></ROW><ROW><id>2659296</id><snippet>from django.db.models import Count

class Model(models.Model):
    score = models.IntegerField()
    ...

    def ranking(self):
        aggregate = Model.objects.filter(score__lt=self.score).aggregate(ranking=Count('score'))
        return aggregate['ranking'] + 1
</snippet></ROW><ROW><id>2659296</id><snippet>print Model.objects.get(pk=1).ranking
</snippet></ROW><ROW><id>2659333</id><snippet>&gt;&gt;&gt; from babel import Locale
&gt;&gt;&gt; locale = Locale('ja', 'JP')
&gt;&gt;&gt; print locale.display_name
日本語 (日本)
</snippet></ROW><ROW><id>2659378</id><snippet>import Image
import numpy as np
w,h = 512,512
data = np.zeros( (w,h,3), dtype=np.uint8)
data[256,256] = [255,0,0]
img = Image.fromarray(data, 'RGB')
img.save('my.png')
</snippet></ROW><ROW><id>2659472</id><snippet>time.time</snippet></ROW><ROW><id>2659472</id><snippet>from time import time</snippet></ROW><ROW><id>2659472</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2010, 4, 17, 14, 5, 35, 642000)
&gt;&gt;&gt; import time
&gt;&gt;&gt; def mytime(): return 120000000.0
...
&gt;&gt;&gt; time.time = mytime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(1973, 10, 20, 17, 20)
</snippet></ROW><ROW><id>2659472</id><snippet># in file apptime.py (for example)
import time as _time

class MyTimeService(object):
    def __init__(self, get_time=None):
        self.get_time = get_time or _time.time

    def __call__(self):
        return self.get_time()

time = MyTimeService()
</snippet></ROW><ROW><id>2659472</id><snippet>import apptime as time; time.time()</snippet></ROW><ROW><id>2659472</id><snippet>apptime.time = MyTimeService(mock_time_func)</snippet></ROW><ROW><id>2659472</id><snippet>setUp()</snippet></ROW><ROW><id>2659563</id><snippet>print tuple(reversed(foo_t))</snippet></ROW><ROW><id>2659563</id><snippet>list</snippet></ROW><ROW><id>2659563</id><snippet>tuple</snippet></ROW><ROW><id>2659563</id><snippet>print ' '.join(str(x) for x in reversed(foo_t))
</snippet></ROW><ROW><id>2659563</id><snippet>foo_t[::-1]</snippet></ROW><ROW><id>2659563</id><snippet>reversed</snippet></ROW><ROW><id>2660005</id><snippet>sweden</snippet></ROW><ROW><id>2660005</id><snippet>datetime</snippet></ROW><ROW><id>2660005</id><snippet>sweden</snippet></ROW><ROW><id>2660005</id><snippet>datetime</snippet></ROW><ROW><id>2660005</id><snippet>datetime</snippet></ROW><ROW><id>2660005</id><snippet>datetime</snippet></ROW><ROW><id>2660005</id><snippet>datetime</snippet></ROW><ROW><id>2660034</id><snippet>def partition(lst, n):
    division = len(lst) / float(n)
    return [ lst[int(round(division * i)): int(round(division * (i + 1)))] for i in xrange(n) ]

&gt;&gt;&gt; partition([1,2,3,4,5],5)
[[1], [2], [3], [4], [5]]
&gt;&gt;&gt; partition([1,2,3,4,5],2)
[[1, 2, 3], [4, 5]]
&gt;&gt;&gt; partition([1,2,3,4,5],3)
[[1, 2], [3, 4], [5]]
&gt;&gt;&gt; partition(range(105), 10)
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], [95, 96, 97, 98, 99, 100, 101, 102, 103, 104]]
</snippet></ROW><ROW><id>2660118</id><snippet>def repeatable(func):
    func.times = new.instancemethod(times, func, func.__class__)
    return func
</snippet></ROW><ROW><id>2660118</id><snippet>@decorator
def func(...):
    ...
</snippet></ROW><ROW><id>2660118</id><snippet>def func(...):
    ....
func = decorator(func)
</snippet></ROW><ROW><id>2660334</id><snippet>\n</snippet></ROW><ROW><id>2660403</id><snippet>.app</snippet></ROW><ROW><id>2660403</id><snippet>Automator</snippet></ROW><ROW><id>2660403</id><snippet>AppleScript</snippet></ROW><ROW><id>2660574</id><snippet>import random

def die_roller(throws):
    """generates throws rolls of a die"""
    for _ in xrange(throws):
        yield random.randint(1, 6)

roller = die_roller(10)
print type(roller)      # =&gt; &lt;type 'generator'&gt;
print list(roller)      # =&gt; [6, 6, 3, 1, 6, 3, 1, 5, 4, 4]
print sum(roller)       # roller was exhausted, generates null list thus 0 sum

big_roller = die_roller(10**5)
print sum(big_roller)   # =&gt; 3500238
</snippet></ROW><ROW><id>2660637</id><snippet>urlpatterns = patterns('tlkmusic.apps.tlkmusic_base.views',
    # (r'^$', index),
    url(r'^(?P&lt;object_type&gt;\w+)/$', music_object_list, name='music_object_list'),
    url(r'^(?P&lt;object_type&gt;\w+)/(?P&lt;starts_with&gt;\w)/$', music_object_list, name='music_object_list_x'),
    url(r'^(?P&lt;object_type&gt;\w+)/(?P&lt;object_id&gt;\d+)/$', music_object_detail, name='music_object_detail'),

)
</snippet></ROW><ROW><id>2660637</id><snippet>{% url music_object_list_x object_type starts_with %} *
</snippet></ROW><ROW><id>2660637</id><snippet>music_object_list</snippet></ROW><ROW><id>2660637</id><snippet>music_object_list</snippet></ROW><ROW><id>2660637</id><snippet>def music_object_list(request, object_type, starts_with=None):
     if object_type == 'artists':
         return artist_list(request, starts_with=starts_with)
     elif object_type == 'albums':
         return album_list(request, starts_with=starts_with)
     ...
</snippet></ROW><ROW><id>2660637</id><snippet>django.views.generic.list_detail.object_list</snippet></ROW><ROW><id>2660637</id><snippet>object_type</snippet></ROW><ROW><id>2660637</id><snippet>extra_context</snippet></ROW><ROW><id>2660637</id><snippet>extra_context = {'object_type': 'songs', ...}
</snippet></ROW><ROW><id>2660637</id><snippet>{% url music_object_list_x object_type,starts_with %}
</snippet></ROW><ROW><id>2660911</id><snippet>A: row 0, column 0, sticky=W
B: row 0, column 1, sticky=W
C: row 1, column 0, span 3
grid_columnconfigure(2, weight=4)
</snippet></ROW><ROW><id>2660974</id><snippet>import pygame
pygame.init()

clock = pygame.time.Clock()
# or whatever loop you're using for the animation
while True:
    # draw animation
    # pause so that the animation runs at 30 fps
    clock.tick(30)
</snippet></ROW><ROW><id>2660974</id><snippet>import time

FPS = 30
last_time = time.time()
# whatever the loop is...
while True:
    # draw animation
    # pause so that the animation runs at 30 fps
    new_time = time.time()
    # see how many milliseconds we have to sleep for
    # then divide by 1000.0 since time.sleep() uses seconds
    sleep_time = ((1000.0 / FPS) - (new_time - last_time)) / 1000.0
    if sleep_time &gt; 0:
        time.sleep(sleep_time)
    last_time = new_time
</snippet></ROW><ROW><id>2661093</id><snippet>python2.5 manage.py runserver</snippet></ROW><ROW><id>2661093</id><snippet>python2.6 manage.py runserver</snippet></ROW><ROW><id>2661123</id><snippet>from Tkinter import *

root = Tk()
frame = Frame(root)
frame.configure(width=300,height=300)

def onmotion(event):
    root.title("Mouse at %s,%s"%(event.x, event.y))

frame.bind("&lt;Motion&gt;", onmotion)
frame.pack()
root.title("Event test")
root.mainloop()
</snippet></ROW><ROW><id>2661123</id><snippet>from Tkinter import *

class MyFrame(Frame):
    def __init__(self, root):
        Frame.__init__(self, root)
        self.parent = root
        self.configure(width=300,height=300)
        self.pack()
        self.bind("&lt;Motion&gt;", self.onmotion)

    def onmotion(self, event):
        self.parent.title("Mouse at %s,%s"%(event.x, event.y))

root = Tk()
frame = MyFrame(root)
root.title("Event test")
root.mainloop()
</snippet></ROW><ROW><id>2661154</id><snippet>svn</snippet></ROW><ROW><id>2661154</id><snippet>svn</snippet></ROW><ROW><id>2661392</id><snippet>def install_site():
    "Add the virtualhost file to apache"
    require('release', provided_by=[deploy, setup])

    with cd('%(path)s/releases/%(release)s/%(release)s' % env):
        sudo('cp %(project_name)s/%(virtualhost_path)s/%(project_domain)s '
                 '/etc/apache2/sites-available/%(project_domain)s' % env)
    with cd('/etc/apache2/sites-available'):
         sudo('a2ensite %(project_domain)s' % env) 
</snippet></ROW><ROW><id>2661925</id><snippet>finish_time = datetime.datetime.now() + datetime.timedelta(hours=6)
while datetime.datetime.now() &lt; finish_time:
    do_something()
    sleep_for_a_bit()
</snippet></ROW><ROW><id>2662865</id><snippet>import subprocess
log_file = open('/path/to/file', 'a')

return_code = subprocess.Popen(['/usr/bin/foo', 'arg1', 'arg2'], stdout=log_file).wait()
</snippet></ROW><ROW><id>2662892</id><snippet>pygame.display.Info</snippet></ROW><ROW><id>2662892</id><snippet>VideoInfo</snippet></ROW><ROW><id>2662892</id><snippet>current_w</snippet></ROW><ROW><id>2662892</id><snippet>current_h</snippet></ROW><ROW><id>2662892</id><snippet>pygame.display.list_modes</snippet></ROW><ROW><id>2662892</id><snippet>&gt;&gt;&gt; pygame.display.list_modes()
[(1920, 1080), (1768, 992), (1680, 1050), (1600, 1200), (1600, 1024), (1600, 900
), (1440, 900), (1400, 1050), (1360, 768), (1280, 1024), (1280, 960), (1280, 800
), (1280, 768), (1280, 720), (1152, 864), (1024, 768), (800, 600), (720, 576), (
720, 480), (640, 480)]
</snippet></ROW><ROW><id>2662892</id><snippet>pygame.display.set_mode</snippet></ROW><ROW><id>2663174</id><snippet>def __init__(self, *args, **kwargs):
    super(UserProfileForm, self).__init__(*args, **kwargs)
    try:            
        self.fields['first_name'].initial = self.instance.user.first_name
        self.fields['last_name'].initial = self.instance.user.last_name
        self.fields['email'].initial = self.instance.user.email
    except models.User.DoesNotExist:
        pass

email = forms.EmailField(label = "Główny adres email",
                         help_text="",
                         required=True)
first_name = forms.CharField(label = "Imię",
                             required=False)
last_name = forms.CharField(label = "Nazwisko",
                            required=False)
kod_pocztowy = forms.RegexField('\d{2}-\d{3}',
                                required = False,
                                label="Kod pocztowy",
                                error_messages={"invalid":'Poprawna wartość to np: 41-200'})

class Meta:
    model = UserExtended
    exclude  = ('user')

def save(self, *args, **kwargs):
    u = self.instance.user
    u.email = self.cleaned_data['email']
    u.first_name = self.cleaned_data['first_name']
    u.last_name = self.cleaned_data['last_name']
    u.kod_pocztowy = self.cleaned_data['kod_pocztowy']
    u.save()
    profile = super(UserProfileForm, self).save(*args, **kwargs)
    return profile
</snippet></ROW><ROW><id>2663562</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>2663562</id><snippet>os.path.join()</snippet></ROW><ROW><id>2663623</id><snippet>decimal</snippet></ROW><ROW><id>2663623</id><snippet>float_to_decimal</snippet></ROW><ROW><id>2663623</id><snippet>Decimal</snippet></ROW><ROW><id>2663623</id><snippet>decimal.Decimal(str(f))</snippet></ROW><ROW><id>2663623</id><snippet>str(f)</snippet></ROW><ROW><id>2663623</id><snippet>float_to_decimal</snippet></ROW><ROW><id>2663623</id><snippet>f</snippet></ROW><ROW><id>2663623</id><snippet>import decimal

def float_to_decimal(f):
    # http://docs.python.org/library/decimal.html#decimal-faq
    "Convert a floating point number to a Decimal with no loss of information"
    n, d = f.as_integer_ratio()
    numerator, denominator = decimal.Decimal(n), decimal.Decimal(d)
    ctx = decimal.Context(prec=60)
    result = ctx.divide(numerator, denominator)
    while ctx.flags[decimal.Inexact]:
        ctx.flags[decimal.Inexact] = False
        ctx.prec *= 2
        result = ctx.divide(numerator, denominator)
    return result 

def f(number, sigfig):
    # http://stackoverflow.com/questions/2663612/nicely-representing-a-floating-point-number-in-python/2663623#2663623
    assert(sigfig&gt;0)
    try:
        d=decimal.Decimal(number)
    except TypeError:
        d=float_to_decimal(float(number))
    sign,digits,exponent=d.as_tuple()
    if len(digits) &lt; sigfig:
        digits = list(digits)
        digits.extend([0] * (sigfig - len(digits)))    
    shift=d.adjusted()
    result=int(''.join(map(str,digits[:sigfig])))
    # Round the result
    if len(digits)&gt;sigfig and digits[sigfig]&gt;=5: result+=1
    result=list(str(result))
    # Rounding can change the length of result
    # If so, adjust shift
    shift+=len(result)-sigfig
    # reset len of result to sigfig
    result=result[:sigfig]
    if shift &gt;= sigfig-1:
        # Tack more zeros on the end
        result+=['0']*(shift-sigfig+1)
    elif 0&lt;=shift:
        # Place the decimal point in between digits
        result.insert(shift+1,'.')
    else:
        # Tack zeros on the front
        assert(shift&lt;0)
        result=['0.']+['0']*(-shift-1)+result
    if sign:
        result.insert(0,'-')
    return ''.join(result)

if __name__=='__main__':
    tests=[
        (0.1, 1, '0.1'),
        (0.0000000000368568, 2,'0.000000000037'),           
        (0.00000000000000000000368568, 2,'0.0000000000000000000037'),
        (756867, 3, '757000'),
        (-756867, 3, '-757000'),
        (-756867, 1, '-800000'),
        (0.0999999999999,1,'0.1'),
        (0.00999999999999,1,'0.01'),
        (0.00999999999999,2,'0.010'),
        (0.0099,2,'0.0099'),         
        (1.999999999999,1,'2'),
        (1.999999999999,2,'2.0'),           
        (34500000000000000000000, 17, '34500000000000000000000'),
        ('34500000000000000000000', 17, '34500000000000000000000'),  
        (756867, 7, '756867.0'),
        ]

    for number,sigfig,answer in tests:
        try:
            result=f(number,sigfig)
            assert(result==answer)
            print(result)
        except AssertionError:
            print('Error',number,sigfig,result,answer)
</snippet></ROW><ROW><id>2663863</id><snippet>import sys

def trace(frame, event, arg):
    print "%s, %s:%d" % (event, frame.f_code.co_filename, frame.f_lineno)
    return trace

def test():
    print "Line 8"
    print "Line 9"

sys.settrace(trace)
test()
</snippet></ROW><ROW><id>2663863</id><snippet>call, test.py:7
line, test.py:8
Line 8
line, test.py:9
Line 9
return, test.py:9
</snippet></ROW><ROW><id>2664122</id><snippet>coding:</snippet></ROW><ROW><id>2664122</id><snippet># coding: utf8
print u"åäö"
</snippet></ROW><ROW><id>2664122</id><snippet>C:\&gt;chcp
Active code page: 437

C:\&gt;x
åäö
</snippet></ROW><ROW><id>2664198</id><snippet>import re
my_str = "abcdefgfaabbbffbbbbbbfgbb"
len(max(re.compile("(b+b)").findall(my_str)))    
# max([len(i) for i in re.compile("(b+b)").findall(my_str)]) also works
</snippet></ROW><ROW><id>2664198</id><snippet>x=timeit.Timer(stmt='import itertools;my_str = "abcdefgfaabbbffbbbbbbfgbb";max(len(list(y)) for (c,y) in itertools.groupby(my_str) if c=="b")')
x.timeit()
22.759046077728271

x=timeit.Timer(stmt='import re;my_str = "abcdefgfaabbbffbbbbbbfgbb";len(max(re.compile("(b+b)").findall(my_str)))')
x.timeit()
8.4770550727844238
</snippet></ROW><ROW><id>2664253</id><snippet>python -m timeit ...</snippet></ROW><ROW><id>2664351</id><snippet>PMI(term, doc) = log [ P(term, doc) / (P(term)*P(doc)) ]</snippet></ROW><ROW><id>2664351</id><snippet>import nltk
from nltk.collocations import *
bigram_measures = nltk.collocations.BigramAssocMeasures()

# change this to read in your data
finder = BigramCollocationFinder.from_words(
   nltk.corpus.genesis.words('english-web.txt'))

# only bigrams that appear 3+ times
finder.apply_freq_filter(3) 

# return the 5 n-grams with the highest PMI
finder.nbest(bigram_measures.pmi, 5)  
</snippet></ROW><ROW><id>2664659</id><snippet>os.path.abspath</snippet></ROW><ROW><id>2664659</id><snippet>assert</snippet></ROW><ROW><id>2664659</id><snippet>python -O</snippet></ROW><ROW><id>2664659</id><snippet>STATIC_PATH</snippet></ROW><ROW><id>2664659</id><snippet>STATIC_PATH</snippet></ROW><ROW><id>2664659</id><snippet>/foo/bar</snippet></ROW><ROW><id>2664659</id><snippet>/foo/barbie/</snippet></ROW><ROW><id>2664659</id><snippet>STATIC_PATH</snippet></ROW><ROW><id>2664880</id><snippet>csv</snippet></ROW><ROW><id>2664880</id><snippet>delimiter='","'</snippet></ROW><ROW><id>2664880</id><snippet>converters</snippet></ROW><ROW><id>2664880</id><snippet>import re
import numpy as np

fieldFilter = re.compile(r'^"?([^"]*)"?$')
def filterTheField(s):
    m = fieldFilter.match(s.strip())
    if m:
        return float(m.group(1))
    else:
        return 0.0 # or whatever default

#...

# Yes, sorry, you have to know the number of columns, since the NumPy docs
# don't say you can specify a default converter for all columns.
convs = dict((col, filterTheField) for col in range(numColumns))
data = np.genfromtxt(csvfile, dtype=None, delimiter=',', names=True, 
    converters=convs)
</snippet></ROW><ROW><id>2664880</id><snippet>np.genfromtxt()</snippet></ROW><ROW><id>2664880</id><snippet>csv.csvreader</snippet></ROW><ROW><id>2664880</id><snippet>reader = csv.csvreader(csvfile)
result = np.array([[float(col) for col in row] for row in reader])
# BTW, column headings are in reader.fieldnames at this point.
</snippet></ROW><ROW><id>2664880</id><snippet>convs</snippet></ROW><ROW><id>2664880</id><snippet>genfromtxt</snippet></ROW><ROW><id>2664880</id><snippet>csv.csvreader</snippet></ROW><ROW><id>2664880</id><snippet>reader = csv.csvreader(csvfile)
converters = [datetime, float, int, float]
result = np.array([[conv(col) for col, conv in zip(row, converters)] 
    for row in reader])
# BTW, column headings are in reader.fieldnames at this point.
</snippet></ROW><ROW><id>2664880</id><snippet>magic</snippet></ROW><ROW><id>2664880</id><snippet>reader = csv.csvreader(csvfile)
result = np.array([[magic(col) for col in row] for row in reader])
</snippet></ROW><ROW><id>2664880</id><snippet>magic()</snippet></ROW><ROW><id>2664880</id><snippet>def magic(s):
    if '/' in s:
        return datetime(s)
    elif '.' in s:
        return float(s)
    else:
        return int(s)
</snippet></ROW><ROW><id>2664880</id><snippet>numpy.fromstring()</snippet></ROW><ROW><id>2664880</id><snippet>csvreader</snippet></ROW><ROW><id>2664880</id><snippet>csv</snippet></ROW><ROW><id>2665150</id><snippet>range(-2, 2)</snippet></ROW><ROW><id>2665150</id><snippet>dir(object)</snippet></ROW><ROW><id>2665150</id><snippet>object.&lt;TAB&gt;</snippet></ROW><ROW><id>2665150</id><snippet>help(anything)</snippet></ROW><ROW><id>2665150</id><snippet>%timeit func1()</snippet></ROW><ROW><id>2665150</id><snippet>%timeit func2()</snippet></ROW><ROW><id>2665150</id><snippet>&gt;&gt;&gt; a</snippet></ROW><ROW><id>2665150</id><snippet>a</snippet></ROW><ROW><id>2665159</id><snippet>DB/</snippet></ROW><ROW><id>2665159</id><snippet>Base.py</snippet></ROW><ROW><id>2665159</id><snippet>__init__</snippet></ROW><ROW><id>2665159</id><snippet>__init__.py</snippet></ROW><ROW><id>2665159</id><snippet>a foolish consistency is the hobgoblin of small minds</snippet></ROW><ROW><id>2665159</id><snippet>Class</snippet></ROW><ROW><id>2665159</id><snippet>import Users
class Base(Users.Class):
    def &lt;code&gt;__init__</snippet></ROW><ROW><id>2665159</id><snippet>__init__</snippet></ROW><ROW><id>2665159</id><snippet>from Users import Users</snippet></ROW><ROW><id>2665159</id><snippet>Users.py</snippet></ROW><ROW><id>2665159</id><snippet>from Base import x</snippet></ROW><ROW><id>2665188</id><snippet>config = wx.Config("StackOverflowTest")
config.Write("testdata", "yes it works!")
</snippet></ROW><ROW><id>2665188</id><snippet>config = wx.Config("StackOverflowTest")
print config.Read("testdata")
</snippet></ROW><ROW><id>2665188</id><snippet>import wx
import cPickle

class MyListCtrl(wx.ListCtrl):

    def __init__(self, *args, **kwargs):
        wx.ListCtrl.__init__(self, *args, **kwargs)
        self.config = wx.Config("MykoolApp")

        self.fillist()

    def filllist(self):
         # load rows and check for error too, if no data
        data = self.config.Read("list_cntrl_data")
        rowList = cPickle.loads(data)

        for row in rowList:
            # add this row to list cntrl
            pass

    def savelist(self):
        rows = []
        for row in self:
            # add data to rows
            pass

        data =  cPickle.dumps(rows)
        self.config.Write("list_cntrl_data", data)

    def onchange(self):
        """
        on changes to list e.g. add delete call save list
        """
        self.savelist()
</snippet></ROW><ROW><id>2665404</id><snippet>re.findall("%([^%]+)%", text)
</snippet></ROW><ROW><id>2665873</id><snippet>'rb'</snippet></ROW><ROW><id>2665963</id><snippet>=~</snippet></ROW><ROW><id>2665963</id><snippet>=~</snippet></ROW><ROW><id>2665963</id><snippet>$_</snippet></ROW><ROW><id>2665963</id><snippet>s/foo/bar/;</snippet></ROW><ROW><id>2665963</id><snippet>$_ =~ s/foo/bar/;</snippet></ROW><ROW><id>2665963</id><snippet>$var =~ s/foo/bar/;</snippet></ROW><ROW><id>2665963</id><snippet>$var</snippet></ROW><ROW><id>2665963</id><snippet>foo</snippet></ROW><ROW><id>2665963</id><snippet>bar</snippet></ROW><ROW><id>2665963</id><snippet>for</snippet></ROW><ROW><id>2665963</id><snippet>$var</snippet></ROW><ROW><id>2665963</id><snippet>for( $var ) {
    s/foo/bar/;
    s/fizz/buzz/;
    s/whop/bop-a-loo-bop/;
    s/parkay/butter/;
    s/cow/burger/;
}
</snippet></ROW><ROW><id>2665963</id><snippet>my $foo = transform(
    'abcd' =&gt;
    [ 'a',  'b'    ], 
    [ 'bb', 'c'    ],
    [ 'cc', 'd'    ],
    [ 'dd', 'DONE' ],
);

sub transform {
    my $var = shift;
    for (@_ ) {
        my ($old, $new) = @$_;
        $var =~ s/$old/$new/;
    }

    return $var;
}
</snippet></ROW><ROW><id>2665963</id><snippet>my $foo = 'abcd';

transform_in_place(
    $foo =&gt;
    [ 'a',  'b'    ], 
    [ 'bb', 'c'    ],
    [ 'cc', 'd'    ],
    [ 'dd', 'DONE' ],
);

print "$foo\n";

sub transform_in_place {
    for my $i (1..$#_ ) {
        my ($old, $new) = @{$_[$i]};
        $_[0] =~ s/$old/$new/;
    }
}
</snippet></ROW><ROW><id>2666299</id><snippet>tuple([x1, y1, x2, y2] for x1 in range(0, 8) for x2 in range(0, 8) for y1 in range(0, 8) for y2 in range(0, 8))
</snippet></ROW><ROW><id>2666299</id><snippet>import itertools
a = [range(0,8)]*4
print tuple(itertools.product(*a))
</snippet></ROW><ROW><id>2666299</id><snippet>tuple(itertools.imap(list, itertools.product(*a)))</snippet></ROW><ROW><id>2666383</id><snippet>&lt;ifmodule&gt;</snippet></ROW><ROW><id>2666383</id><snippet>.htaccess</snippet></ROW><ROW><id>2666383</id><snippet>DirectoryIndex index.py
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ /index.py/$1  [L]
</snippet></ROW><ROW><id>2666611</id><snippet>from xml.etree.ElementTree import ElementTree
tree = ElementTree()
tree.parse('in.xml')

foos = tree.findall('foo')
for foo in foos:
  bars = foo.findall('bar')
  for bar in bars:
    foo.remove(bar)

tree.write('out.xml')
</snippet></ROW><ROW><id>2666624</id><snippet>||</snippet></ROW><ROW><id>2666624</id><snippet>or</snippet></ROW><ROW><id>2666624</id><snippet>None</snippet></ROW><ROW><id>2666624</id><snippet>def merge(l1, l2):
  i = 0
  while l1[i] != None or l2[i] != None:
    pass
</snippet></ROW><ROW><id>2666624</id><snippet>!= None</snippet></ROW><ROW><id>2666624</id><snippet>is not None</snippet></ROW><ROW><id>2666624</id><snippet>while l1[i] is not None or l2[i] is not None:
</snippet></ROW><ROW><id>2666881</id><snippet>fileObject.writerow(current_list)
</snippet></ROW><ROW><id>2666881</id><snippet>writerows</snippet></ROW><ROW><id>2666881</id><snippet>writerows</snippet></ROW><ROW><id>2667004</id><snippet>role.users</snippet></ROW><ROW><id>2667004</id><snippet>cascade='none'</snippet></ROW><ROW><id>2667004</id><snippet>Role</snippet></ROW><ROW><id>2667004</id><snippet>User</snippet></ROW><ROW><id>2667004</id><snippet>roles</snippet></ROW><ROW><id>2667155</id><snippet>&lt;mx:HTTPService url="backend-url.cgi" id="service"/&gt;
&lt;mx:List dataProvider="{service.lastResult.yourElementName}"/&gt;
</snippet></ROW><ROW><id>2667155</id><snippet>service.send()</snippet></ROW><ROW><id>2667155</id><snippet>creationComplete</snippet></ROW><ROW><id>2667155</id><snippet>labelField</snippet></ROW><ROW><id>2667155</id><snippet>dataField</snippet></ROW><ROW><id>2667155</id><snippet>List</snippet></ROW><ROW><id>2667531</id><snippet>&gt;&gt;&gt; Image.VERSION  
'1.1.7'  
</snippet></ROW><ROW><id>2667531</id><snippet>.convert('RGB')</snippet></ROW><ROW><id>2667705</id><snippet>def blah(a="default value")
</snippet></ROW><ROW><id>2667705</id><snippet>def blah(a=None):
  if a is None
    a = []
</snippet></ROW><ROW><id>2667912</id><snippet>autopy</snippet></ROW><ROW><id>2668139</id><snippet>import urllib2

manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
manager.add_password(None, 'https://app.streamsend.com/emails', 'login', 'key')
handler = urllib2.HTTPBasicAuthHandler(manager)

director = urllib2.OpenerDirector()
director.add_handler(handler)

req = urllib2.Request('https://app.streamsend.com/emails', headers = {'Accept' : 'application/xml'})

result = director.open(req)
# result.read() will contain the data
# result.info() will contain the HTTP headers

# To get say the content-length header
length = result.info()['Content-Length']
</snippet></ROW><ROW><id>2668697</id><snippet>__and__</snippet></ROW><ROW><id>2668697</id><snippet>&amp;</snippet></ROW><ROW><id>2668697</id><snippet>and</snippet></ROW><ROW><id>2668697</id><snippet>and</snippet></ROW><ROW><id>2668889</id><snippet>-u</snippet></ROW><ROW><id>2668952</id><snippet>os.path.expanduser(path)</snippet></ROW><ROW><id>2668952</id><snippet>~</snippet></ROW><ROW><id>2668952</id><snippet>~user</snippet></ROW><ROW><id>2668952</id><snippet>~</snippet></ROW><ROW><id>2668952</id><snippet>pwd</snippet></ROW><ROW><id>2668952</id><snippet>~user</snippet></ROW><ROW><id>2668952</id><snippet>~user</snippet></ROW><ROW><id>2668952</id><snippet>os.path.expanduser('~user')
</snippet></ROW><ROW><id>2668968</id><snippet>builder = gtk.Builder()
builder.add_from_string(string, len(string))
builder.connect_signals(anobject)
builder.get_object(name)
</snippet></ROW><ROW><id>2668968</id><snippet>#!/usr/bin/env python

import gtk

class  QueryRelevanceEvaluationApp:

    def __init__(self):
        filename = "foo.glade"
        builder = gtk.Builder()
        builder.add_from_file(filename)
        builder.connect_signals(self)

    def on_buttonGenerate_clicked(self, widget):
        print "You clicked the button"

app = QueryRelevanceEvaluationApp()
gtk.main()
</snippet></ROW><ROW><id>2669317</id><snippet>/home/foo/Maildir/new</snippet></ROW><ROW><id>2669317</id><snippet>mailbox.Maildir</snippet></ROW><ROW><id>2669317</id><snippet>new</snippet></ROW><ROW><id>2669317</id><snippet>cur</snippet></ROW><ROW><id>2669317</id><snippet>new</snippet></ROW><ROW><id>2669317</id><snippet>cur</snippet></ROW><ROW><id>2669317</id><snippet>close()</snippet></ROW><ROW><id>2669317</id><snippet>flush()</snippet></ROW><ROW><id>2669523</id><snippet>sorted(data, key=lambda item: (int(item.partition(' ')[0])
                               if item[0].isdigit() else float('inf'), item))
</snippet></ROW><ROW><id>2669523</id><snippet>cmp</snippet></ROW><ROW><id>2669523</id><snippet>sorted</snippet></ROW><ROW><id>2669523</id><snippet>data = set(['booklet', '4 sheets', '48 sheets', '12 sheets'])
r = sorted(data, key=lambda item: (int(item.partition(' ')[0])
                                   if item[0].isdigit() else float('inf'), item))
print ',\n'.join(r)
</snippet></ROW><ROW><id>2669607</id><snippet>for textarea in soup.findAll('textarea'):
    contents = BeautifulSoup.BeautifulSoup(textarea.contents[0]).renderContents()
    textarea.replaceWith(contents)
</snippet></ROW><ROW><id>2669767</id><snippet>try:
    foo()
except (KeyboardInterrupt, SystemExit):
    raise
except:
    bar()
</snippet></ROW><ROW><id>2669907</id><snippet>class API():
    api_url = 'http://api.bitbucket.org/1.0/'

    def __init__(self, username, password, proxy=None):
        encodedstring = base64.encodestring("%s:%s" % (username, password))[:-1]
        self._auth = "Basic %s" % encodedstring
        self._opener = self._create_opener(proxy)

    def _create_opener(self, proxy=None):
        cj = cookielib.LWPCookieJar()
        cookie_handler = urllib2.HTTPCookieProcessor(cj)
        if proxy:
            proxy_handler = urllib2.ProxyHandler(proxy)
            opener = urllib2.build_opener(cookie_handler, proxy_handler)
        else:
            opener = urllib2.build_opener(cookie_handler)
        return opener

    def get_issues(self, username, repository):
        query_url = self.api_url + 'repositories/%s/%s/issues/' % (username, repository)
        try:
            req = urllib2.Request(query_url, None, {"Authorization": self._auth })
            handler = self._opener.open(req)
        except urllib2.HTTPError, e:
            print e.headers
            raise e
        return json.load(handler)
</snippet></ROW><ROW><id>2670177</id><snippet>settings.py</snippet></ROW><ROW><id>2670177</id><snippet>apps/auth/urls.py</snippet></ROW><ROW><id>2670177</id><snippet>apps/auth/templates/auth/</snippet></ROW><ROW><id>2670177</id><snippet>project/</snippet></ROW><ROW><id>2670177</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>2670177</id><snippet>project/</snippet></ROW><ROW><id>2670177</id><snippet>apps.notes</snippet></ROW><ROW><id>2670177</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>2670177</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>2670191</id><snippet>&gt;&gt;&gt; from sys import getsizeof
&gt;&gt;&gt; getsizeof(dict((n, 0) for n in range(5462)))/5462.
144.03368729403149
&gt;&gt;&gt; getsizeof(dict((n, 0) for n in range(5461)))/5461.
36.053470060428495
</snippet></ROW><ROW><id>2670387</id><snippet>time.clock()</snippet></ROW><ROW><id>2670387</id><snippet>time.time()</snippet></ROW><ROW><id>2670387</id><snippet>time.time()</snippet></ROW><ROW><id>2670387</id><snippet>time.time()</snippet></ROW><ROW><id>2670387</id><snippet>time.clock()</snippet></ROW><ROW><id>2670619</id><snippet>import subprocess
proc=subprocess.Popen(['tac','-'], shell=True, stdin=subprocess.PIPE,
                      stdout=subprocess.PIPE, )
output,_=proc.communicate('one\ntwo\nthree\n')
print output
</snippet></ROW><ROW><id>2670619</id><snippet>tac -</snippet></ROW><ROW><id>2670619</id><snippet>tac</snippet></ROW><ROW><id>2670619</id><snippet>communicate</snippet></ROW><ROW><id>2670619</id><snippet>communicate</snippet></ROW><ROW><id>2671016</id><snippet>print</snippet></ROW><ROW><id>2671199</id><snippet>f</snippet></ROW><ROW><id>2671199</id><snippet>.read(blocksize)</snippet></ROW><ROW><id>2671199</id><snippet>storbinary</snippet></ROW><ROW><id>2671199</id><snippet>def storbinary(self, cmd, fp, blocksize=8192, callback=None):
    """Store a file in binary mode.  A new port is created for you.

    Args:
      cmd: A STOR command.
      fp: A file-like object with a read(num_bytes) method.
      blocksize: The maximum data size to read from fp and send over
                 the connection at once.  [default: 8192]
      callback: An optional single parameter callable that is called on
                on each block of data after it is sent.  [default: None]

    Returns:
      The response code.
    """
    self.voidcmd('TYPE I')
    conn = self.transfercmd(cmd)
    while 1:
        buf = fp.read(blocksize)
        if not buf: break
        conn.sendall(buf)
        if callback: callback(buf)
    conn.close()
    return self.voidresp()
</snippet></ROW><ROW><id>2671199</id><snippet>read(n)</snippet></ROW><ROW><id>2671398</id><snippet>O(1)</snippet></ROW><ROW><id>2671398</id><snippet>HashMap</snippet></ROW><ROW><id>2671531</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>2671577</id><snippet>function normpath($path)
{
    if (empty($path))
        return '.';

    if (strpos($path, '/') === 0)
        $initial_slashes = true;
    else
        $initial_slashes = false;
    if (
        ($initial_slashes) &amp;&amp;
        (strpos($path, '//') === 0) &amp;&amp;
        (strpos($path, '///') === false)
    )
        $initial_slashes = 2;
    $initial_slashes = (int) $initial_slashes;

    $comps = explode('/', $path);
    $new_comps = array();
    foreach ($comps as $comp)
    {
        if (in_array($comp, array('', '.')))
            continue;
        if (
            ($comp != '..') ||
            (!$initial_slashes &amp;&amp; !$new_comps) ||
            ($new_comps &amp;&amp; (end($new_comps) == '..'))
        )
            array_push($new_comps, $comp);
        elseif ($new_comps)
            array_pop($new_comps);
    }
    $comps = $new_comps;
    $path = implode('/', $comps);
    if ($initial_slashes)
        $path = str_repeat('/', $initial_slashes) . $path;
    if ($path)
        return $path;
    else
        return '.';
}
</snippet></ROW><ROW><id>2671843</id><snippet>twisted.internet.interfaces.ITransport</snippet></ROW><ROW><id>2671843</id><snippet>twisted.web.soap.Proxy</snippet></ROW><ROW><id>2671843</id><snippet>SOAPpy</snippet></ROW><ROW><id>2671843</id><snippet>twisted.web.client.getPage</snippet></ROW><ROW><id>2671843</id><snippet>SOAPpy.buildSOAP</snippet></ROW><ROW><id>2671843</id><snippet>SOAPpy.parseSOAPRPC</snippet></ROW><ROW><id>2671843</id><snippet>twisted.web.soap.Proxy</snippet></ROW><ROW><id>2671843</id><snippet>twisted.web.client.getPage</snippet></ROW><ROW><id>2671843</id><snippet>twisted.web.client.Agent</snippet></ROW><ROW><id>2671843</id><snippet>getPage</snippet></ROW><ROW><id>2671843</id><snippet>Client.options.transport</snippet></ROW><ROW><id>2671843</id><snippet>Deferred</snippet></ROW><ROW><id>2671843</id><snippet>Deferred</snippet></ROW><ROW><id>2671843</id><snippet>greenlet</snippet></ROW><ROW><id>2672006</id><snippet>clients = []</snippet></ROW><ROW><id>2672006</id><snippet>self.clients = []
</snippet></ROW><ROW><id>2672006</id><snippet>__init__</snippet></ROW><ROW><id>2672077</id><snippet>marshal</snippet></ROW><ROW><id>2672077</id><snippet>pickle</snippet></ROW><ROW><id>2672077</id><snippet>cPickle</snippet></ROW><ROW><id>2672077</id><snippet>-1</snippet></ROW><ROW><id>2672077</id><snippet>import pickle
import cPickle
import marshal
import json

def maked(N=5400):
  d = {}
  for x in range(N):
    k = 'key%d' % x
    v = [x] * 5
    d[k] = v
  return d
d = maked()

def marsh():
  return marshal.dumps(d)

def pick():
  return pickle.dumps(d)

def pick1():
  return pickle.dumps(d, -1)

def cpick():
  return cPickle.dumps(d)

def cpick1():
  return cPickle.dumps(d, -1)

def jso():
  return json.dumps(d)

def rep():
  return repr(d)
</snippet></ROW><ROW><id>2672077</id><snippet>$ py26 -mtimeit -s'import pik' 'pik.marsh()'
1000 loops, best of 3: 1.56 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.pick()'
10 loops, best of 3: 173 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.pick1()'
10 loops, best of 3: 241 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.cpick()'
10 loops, best of 3: 21.8 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.cpick1()'
100 loops, best of 3: 10 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.jso()'
10 loops, best of 3: 138 msec per loop
$ py26 -mtimeit -s'import pik' 'pik.rep()'
100 loops, best of 3: 13.1 msec per loop
</snippet></ROW><ROW><id>2672077</id><snippet>json.dumps</snippet></ROW><ROW><id>2672077</id><snippet>repr</snippet></ROW><ROW><id>2672077</id><snippet>marshal</snippet></ROW><ROW><id>2672077</id><snippet>json</snippet></ROW><ROW><id>2672077</id><snippet>cPickle</snippet></ROW><ROW><id>2672077</id><snippet>json</snippet></ROW><ROW><id>2672077</id><snippet>marshal</snippet></ROW><ROW><id>2672077</id><snippet>marshal</snippet></ROW><ROW><id>2672077</id><snippet>repr</snippet></ROW><ROW><id>2672132</id><snippet>def create_sql(self, opts, args):
    #I've left out the error handling.
    strtime = datetime.datetime.now().strftime("%D %H:%M")
    vals = (strtime, opts.message, opts.keywords, False)
    return "insert into mytable values (?, ?, ?, ?)", vals

def create(self, opts, args):
    self.execute(*self.create_sql(opts, args))
    self.commit()
</snippet></ROW><ROW><id>2672132</id><snippet>create_sql</snippet></ROW><ROW><id>2672132</id><snippet>create</snippet></ROW><ROW><id>2672132</id><snippet>create</snippet></ROW><ROW><id>2672288</id><snippet>random.py</snippet></ROW><ROW><id>2672288</id><snippet>import random</snippet></ROW><ROW><id>2672338</id><snippet>\x</snippet></ROW><ROW><id>2672338</id><snippet>\xaa</snippet></ROW><ROW><id>2672338</id><snippet>chr(0xaa)</snippet></ROW><ROW><id>2672338</id><snippet>chr(16 * 10 + 10)</snippet></ROW><ROW><id>2672338</id><snippet>'a'</snippet></ROW><ROW><id>2672353</id><snippet>site_packages = os.path.join(base, 'lib', 'python%s' % sys.version[:3], 'site-packages')
</snippet></ROW><ROW><id>2672353</id><snippet>if sys.platform == 'win32':
    site_packages = os.path.join(base, 'Lib', 'site-packages')
else:
    site_packages = os.path.join(base, 'lib', 'python%s' % sys.version[:3], 'site-packages')
</snippet></ROW><ROW><id>2672363</id><snippet>import urllib2
req = urllib2.Request(url='http://stackoverflow.com/')
f = urllib2.urlopen(req)
print f.read()
</snippet></ROW><ROW><id>2673122</id><snippet>findAll(True)</snippet></ROW><ROW><id>2673122</id><snippet>from BeautifulSoup import BeautifulSoup 
soup = BeautifulSoup(source)
allTags = soup.findAll(True)
[tag.name for tag in allTags ]
[u'em', u'label']
</snippet></ROW><ROW><id>2673122</id><snippet>from BeautifulSoup import BeautifulSoup
def get_tags_set(source):
    soup = BeautifulSoup(source)
    all_tags = soup.findAll(True)
    return set([tag.name for tag in all_tags])

def verify(tags_source_orig, tags_source_to_verify):
    return tags_source_orig == set.intersection(tags_source_orig, tags_source_to_verify)

source= '&lt;label&gt;What\'s your name&lt;/label&gt;&lt;label&gt;What\'s your name&lt;/label&gt;&lt;em&gt;Hello&lt;/em&gt;'
source_to_verify= '&lt;em&gt;Hello&lt;/em&gt;&lt;label&gt;What\'s your name&lt;/label&gt;&lt;label&gt;What\'s your name&lt;/label&gt;'
print verify(get_tags_set(source),get_tags_set(source_to_verify))
</snippet></ROW><ROW><id>2673136</id><snippet>Enum</snippet></ROW><ROW><id>2673136</id><snippet>Integer</snippet></ROW><ROW><id>2673399</id><snippet>from random import randint
randint(100, 999)  # randint is inclusive at both ends
</snippet></ROW><ROW><id>2673399</id><snippet>from random import randint

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return randint(range_start, range_end)

print random_with_N_digits(2)
print random_with_N_digits(3)
print random_with_N_digits(4)
</snippet></ROW><ROW><id>2673399</id><snippet>33
124
5127
</snippet></ROW><ROW><id>2673599</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pyuca import Collator

metadata = MetaData()
Base = declarative_base(metadata=metadata)

class Item(Base):
    __tablename__ = 'Item'
    id = Column(Integer, primary_key=True)
    value = Column(String, nullable=False)

collator = Collator('allkeys.txt')

def collate_unicode(value1, value2):
    return cmp(collator.sort_key(value1), collator.sort_key(value2))

engine = create_engine('sqlite://')
engine.raw_connection().create_collation('unicode', collate_unicode)
metadata.create_all(engine)
session = sessionmaker(engine)()

for word in [u"ĉambr", u"ĉar", u"car'", u"carin'", u"ĉe", u"ĉef'",
             u"centjar'", u"centr'", u"cerb'", u"cert'", u"ĉes'", u"ceter'"]:
    item = Item(value=word)
    session.add(item)
    session.commit()

for item in session.query(Item).order_by(collate(Item.value, 'unicode')):
    print item.value
</snippet></ROW><ROW><id>2673863</id><snippet>&gt;&gt;&gt; class C(str):
...     def __new__(cls,*args,**kw):
...         return str.__new__(cls,*args,**kw)
... 
&gt;&gt;&gt; c=C("hello world")
&gt;&gt;&gt; type(c)
&lt;class '__main__.C'&gt;

&gt;&gt;&gt; c.__class__.__mro__
(&lt;class '__main__.C'&gt;, &lt;type 'str'&gt;, &lt;type 'basestring'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>2673863</id><snippet>__init__</snippet></ROW><ROW><id>2673863</id><snippet>__new__</snippet></ROW><ROW><id>2673863</id><snippet>cls</snippet></ROW><ROW><id>2673863</id><snippet>&gt;&gt;&gt; class C(str):
...     def __new__(cls,value,meta):
...         obj = str.__new__(cls, value)
...         obj.meta = meta
...         return obj
... 
&gt;&gt;&gt; c=C("hello world", "meta")
&gt;&gt;&gt; c
'hello world'
&gt;&gt;&gt; c.meta
'meta'
</snippet></ROW><ROW><id>2673911</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>2674052</id><snippet>classmethod</snippet></ROW><ROW><id>2674052</id><snippet>@classmethod
def spam(cls, ...):
   # cls is the class, you can use it to get class attributes
</snippet></ROW><ROW><id>2674052</id><snippet>classmethod</snippet></ROW><ROW><id>2674052</id><snippet>staticmethod</snippet></ROW><ROW><id>2674405</id><snippet>.find("is")</snippet></ROW><ROW><id>2674405</id><snippet>&gt;&gt;&gt; re.search("is", String).start()
2
</snippet></ROW><ROW><id>2674405</id><snippet>\b</snippet></ROW><ROW><id>2674405</id><snippet>\b</snippet></ROW><ROW><id>2674405</id><snippet>&gt;&gt;&gt; re.search(r"\bis\b", String).start()
5
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2674406</id><snippet>'Height': 1440,
</snippet></ROW><ROW><id>2674406</id><snippet>'Height': None, 
</snippet></ROW><ROW><id>2674406</id><snippet>AspectRatio</snippet></ROW><ROW><id>2674406</id><snippet>None</snippet></ROW><ROW><id>2674552</id><snippet>C:\tmp\eggs&gt;dir /B /S
C:\tmp\eggs\libs
C:\tmp\eggs\test.py
C:\tmp\eggs\libs\foo-1.0.egg
C:\tmp\eggs\libs\foo-2.0.egg
C:\tmp\eggs\libs\foo-1.0.egg\foo.py
C:\tmp\eggs\libs\foo-2.0.egg\foo.py
</snippet></ROW><ROW><id>2674552</id><snippet># contents of C:\tmp\eggs\libs\foo-1.0.egg\foo.py
version=(1,0)
</snippet></ROW><ROW><id>2674552</id><snippet># contents of C:\tmp\eggs\libs\foo-2.0.egg\foo.py
version=(2,0)
</snippet></ROW><ROW><id>2674552</id><snippet>#contents of C:\tmp\eggs\test.py:

import sys
sys.path.insert(1, 'libs')
from pkg_resources import require

require('foo&lt;1.5')
import foo
print foo.version
# will output (1,0)
</snippet></ROW><ROW><id>2674552</id><snippet>'foo&lt;1.5'</snippet></ROW><ROW><id>2674552</id><snippet>'foo&gt;1.5'</snippet></ROW><ROW><id>2674552</id><snippet>'foo'</snippet></ROW><ROW><id>2674552</id><snippet>(2,0)</snippet></ROW><ROW><id>2674820</id><snippet>DEBUG=True</snippet></ROW><ROW><id>2674840</id><snippet>class MyModel(db.Model):
    my_strings = db.StringListProperty()
    my_ints = db.ListProperty(int)

    def get_data(self):
        return zip(self.my_strings, self.my_ints)

    def set_data(self, data):
        self.my_strings = [element[0] for element in data]
        self.my_ints = [element[1] for element in data]

    data = property(get_data, set_data)
</snippet></ROW><ROW><id>2674840</id><snippet>entity = MyModel()
entity.data = [("xyz", 123), ("abc", 456), ("hij", 678)]
entity.put()

# ...

for string_value, int_value in entity.data:
    # do something
</snippet></ROW><ROW><id>2674872</id><snippet>interface</snippet></ROW><ROW><id>2674872</id><snippet>twisted.application.internet.TCPServer</snippet></ROW><ROW><id>2674872</id><snippet>smsInboundServer = internet.TCPServer(8001, webserver.Site(smsInbound),
    interface='10.0.0.78')
</snippet></ROW><ROW><id>2674872</id><snippet>reactor.listenTCP()</snippet></ROW><ROW><id>2674872</id><snippet>t.a.i.*Server</snippet></ROW><ROW><id>2674872</id><snippet>reactor.listenXXX</snippet></ROW><ROW><id>2675475</id><snippet>FromClass</snippet></ROW><ROW><id>2675475</id><snippet>FormClass</snippet></ROW><ROW><id>2675475</id><snippet>FormClass</snippet></ROW><ROW><id>2675475</id><snippet>    if extra.is_hidden():
        FromClass = HiddenExtraForm
</snippet></ROW><ROW><id>2675636</id><snippet>b = Element("Batch")
b.append(Attribute("OnError","Continue")).append(Attribute("ListVersion","3"))
bm= Element("Method")
bm.append(Attribute("ID","1")).append(Attribute("Cmd","Update"))
bm.append(Element("Field").append(Attribute("Name","ID")).setText(''))
bm.append(Element('Field').append(Attribute('Name','FileRef')).setText('http://.....'))
bm.append(Element('Field').append(Attribute('Name','Jurisdiction')).setText('UK'))
bm.append(Element('Field').append(Attribute('Name','Desk')).setText('Structured Equity Derivatives'))
bm.append(Element('Field').append(Attribute('Name','Business Area')).setText('Back Office'))
bm.append(Element('Field').append(Attribute('Name','Title')).setText('whatever'))
b.append(bm)
u = Element("ns1:updates")
u.append(b)
c.service.UpdateListItems("Reports",u)
</snippet></ROW><ROW><id>2675638</id><snippet>class Profile(models.Model):
    ...
    medias = models.ManyToManyField(Media, related_name='profiles')
    roles = models.ManyToManyField(Role, related_name='profiles')
</snippet></ROW><ROW><id>2675638</id><snippet>profile = Profile.objects.get(user=someone)
print profile.medias.all()
print profile.roles.all()
</snippet></ROW><ROW><id>2675859</id><snippet>a = numpy.array([Register() for _ in range(4)])
</snippet></ROW><ROW><id>2675859</id><snippet>a.dtype</snippet></ROW><ROW><id>2675859</id><snippet>dtype('object')</snippet></ROW><ROW><id>2675859</id><snippet>a = numpy.empty(shape=(4,), dtype=object)
a[0] = Register()  # etc.
</snippet></ROW><ROW><id>2675985</id><snippet>None</snippet></ROW><ROW><id>2675985</id><snippet>class Test:
    def  __init__(self,test=None):
        if test is None:
            self.__test = []
        else:
            self.__test = test
</snippet></ROW><ROW><id>2676142</id><snippet>__setitem__</snippet></ROW><ROW><id>2676142</id><snippet>Lib/site-packages/scipy/sparse/</snippet></ROW><ROW><id>2676142</id><snippet>if value==0:
</snippet></ROW><ROW><id>2676142</id><snippet>if value==0 and self.has_key((i,j)):
</snippet></ROW><ROW><id>2676182</id><snippet>dis</snippet></ROW><ROW><id>2676192</id><snippet>Tasks</snippet></ROW><ROW><id>2676325</id><snippet>raise apache.SERVER_RETURN, apache.HTTP_INTERNAL_SERVER_ERROR
</snippet></ROW><ROW><id>2676851</id><snippet>from django.utils import simplejson
</snippet></ROW><ROW><id>2676904</id><snippet>For this version of Visual C++  Use this compiler version
Visual C++ 4.x                  MSC_VER=1000
Visual C++ 5                    MSC_VER=1100
Visual C++ 6                    MSC_VER=1200
Visual C++ .NET                 MSC_VER=1300
Visual C++ .NET 2003            MSC_VER=1310
Visual C++ 2005                 MSC_VER=1400
Visual C++ 2008                 MSC_VER=1500
Visual C++ 2010                 MSC_VER=1600
Visual C++ 2012                 MSC_VER=1700
Visual C++ 2013                 MSC_VER=1800
</snippet></ROW><ROW><id>2677263</id><snippet>import inspect

def foo(a,b,x='blah'):
    pass

print(inspect.getargspec(foo))
# ArgSpec(args=['a', 'b', 'x'], varargs=None, keywords=None, defaults=('blah',))
</snippet></ROW><ROW><id>2677474</id><snippet>import uuid
import os

def get_file_path(instance, filename):
    ext = filename.split('.')[-1]
    filename = "%s.%s" % (uuid.uuid4(), ext)
    return os.path.join('uploads/logos', filename)
</snippet></ROW><ROW><id>2677474</id><snippet>get_file_path</snippet></ROW><ROW><id>2677474</id><snippet>upload_to</snippet></ROW><ROW><id>2677474</id><snippet>file = models.FileField(upload_to=get_file_path,
                        null=True,
                        blank=True,
                        verbose_name=_(u'Contact list'))
</snippet></ROW><ROW><id>2677580</id><snippet>a</snippet></ROW><ROW><id>2677580</id><snippet>b</snippet></ROW><ROW><id>2677580</id><snippet>c</snippet></ROW><ROW><id>2677580</id><snippet>self.a = a</snippet></ROW><ROW><id>2677580</id><snippet>a</snippet></ROW><ROW><id>2677580</id><snippet>self.a</snippet></ROW><ROW><id>2677580</id><snippet>self.a</snippet></ROW><ROW><id>2677852</id><snippet>class Prepender:

    def __init__(self, fname, mode='w'):
        self.__write_queue = []
        self.__f = open(fname, mode)

    def write(self, s):
        self.__write_queue.insert(0, s)

    def close(self):
        self.__exit__(None, None, None)

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self.__write_queue: 
            self.__f.writelines(self.__write_queue)
        self.__f.close()

with Prepender('test_d.out') as f:
    f.write('string 1\n')
    f.write('string 2\n')
    f.write('string 3\n')
</snippet></ROW><ROW><id>2678075</id><snippet>find . -name "*.pyc" -exec rm {} \;
</snippet></ROW><ROW><id>2678233</id><snippet>Array</snippet></ROW><ROW><id>2678233</id><snippet>Class</snippet></ROW><ROW><id>2678233</id><snippet>Class</snippet></ROW><ROW><id>2678233</id><snippet>metaclass</snippet></ROW><ROW><id>2678233</id><snippet>Object</snippet></ROW><ROW><id>2678233</id><snippet>Class</snippet></ROW><ROW><id>2678641</id><snippet>__init__.py</snippet></ROW><ROW><id>2678641</id><snippet>__init__.py</snippet></ROW><ROW><id>2678736</id><snippet>attributes = re.findall('(?:@)([^\( ]*)', query)
</snippet></ROW><ROW><id>2678736</id><snippet>regex0 = re.compile('''
    @               # at sign
    (?:             # start non-capturing group
        \w+             # non-whitespace, one or more
        \b              # a boundary character (i.e. no more \w)
        |               # OR
        (               # capturing group
            \(              # left paren
            [^@(),]+        # not an @(),
            (?:                 # another non-caputing group
                , *             # a comma, then some spaces
                [^@(),]+        # not @(),
            )*              # some quantity of this non-capturing group
            \)              # a right paren
        )               # end of non-capuring group
    )           # end of non-capturing group
    ''', re.VERBOSE)

# and this puts them into the attributes list.
groupedAttributes = re.findall(regex0, query)
for item in groupedAttributes:
    attributes.extend(item.strip("(").strip(")").split(", "))
</snippet></ROW><ROW><id>2678736</id><snippet># check if the values are valid.
validRegex = re.compile(r'^mice$|^mouse$|^cat$|^dog$')

# if they aren't add them to a new list.
badAttrs = []
for attribute in attributes:
    if len(attribute) == 0:
        # if it's a zero length attribute, we punt
        continue
    if validRegex.search(attribute.lower()) == None:
        # if the attribute from the search isn't in the valid list
        if attribute not in badAttrs:
            # and the attribute isn't already in the list
            badAttrs.append(attribute)
</snippet></ROW><ROW><id>2678797</id><snippet>cp1251</snippet></ROW><ROW><id>2678797</id><snippet>cp866</snippet></ROW><ROW><id>2678797</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.stdout.encoding
cp866
&gt;&gt;&gt; import locale
&gt;&gt;&gt; print locale.getdefaultlocale()
('ru_RU', 'cp1251')
</snippet></ROW><ROW><id>2678797</id><snippet>&gt;&gt;&gt; try:
...     os.remove('abc.file')
... except WindowsError, err:
...     print err.args[1].decode(locale.getdefaultlocale()[1])
...
</snippet></ROW><ROW><id>2678797</id><snippet>exc_info=True</snippet></ROW><ROW><id>2678797</id><snippet>logging.error()</snippet></ROW><ROW><id>2678816</id><snippet>%apply (float* INPLACE_ARRAY1, int DIM1) {(float* data1, int n1), (float* data2, int n2)};

class Class 
{
  public: 
  void test(float* data1, int n1, float* data2, int n2)
  {
    //...
  }
};
</snippet></ROW><ROW><id>2678932</id><snippet>CharField</snippet></ROW><ROW><id>2678932</id><snippet>__builtin__</snippet></ROW><ROW><id>2678932</id><snippet>getattr</snippet></ROW><ROW><id>2678932</id><snippet>VALUE_TYPE_CHOICES = (
    ("unicode", "Unicode String"),
    ("int", "Integer"),
    ("bool", "Boolean"),
)

class Setting(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    type = models.CharField(max_length=50, choices=VALUE_TYPE_CHOICES)
    default_value = models.CharField(max_length=127)

def get_setting(user, setting_id):
    profile_setting = #get the user's specific setting value here, not relevant
    type = getattr(__builtin__, profile_setting.setting.type)
    if type is bool:
        return type(int(profile_setting.value))
    else:
        return type(profile_setting.value)
</snippet></ROW><ROW><id>2678932</id><snippet>bool('0')</snippet></ROW><ROW><id>2678932</id><snippet>True</snippet></ROW><ROW><id>2678932</id><snippet>int</snippet></ROW><ROW><id>2678932</id><snippet>bool</snippet></ROW><ROW><id>2678932</id><snippet>ast</snippet></ROW><ROW><id>2678932</id><snippet>literal_eval</snippet></ROW><ROW><id>2679042</id><snippet>#!/usr/bin/env python3

import sys
import urllib.request
from urllib.request import urlopen, FancyURLopener
from urllib.parse import urlparse, parse_qs, unquote

class UndercoverURLopener(FancyURLopener):
    version = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.9 Safari/533.2"
urllib.request._urlopener = UndercoverURLopener()

def youtube_download(video_url):
    video_id = parse_qs(urlparse(video_url).query)['v'][0]

    url_data = urlopen('http://www.youtube.com/get_video_info?&amp;video_id=' + video_id).read()
    url_info = parse_qs(unquote(url_data.decode('utf-8')))
    token_value = url_info['token'][0]

    download_url = "http://www.youtube.com/get_video?video_id={0}&amp;t={1}&amp;fmt=18".format(
        video_id, token_value)

    video_title = url_info['title'][0] if 'title' in url_info else ''
    # Unicode filenames are more trouble than they're worth
    filename = video_title.encode('ascii', 'ignore').decode('ascii').replace("/", "-") + '.mp4'

    print("\t Downloading '{}' to '{}'...".format(video_title, filename))

    try:
        download = urlopen(download_url).read()
        f = open(filename, 'wb')
        f.write(download)
        f.close()
    except Exception as e:
        print("\t Downlad failed! {}".format(str(e)))
        print("\t Skipping...")
    else:
        print("\t Done.")

def main():
    print("\n--------------------------")
    print (" Youtube Video Downloader")
    print ("--------------------------\n")

    try:
        video_urls = sys.argv[1:]
    except:
        video_urls = input('Enter (space-separated) video URLs: ')

    for u in video_urls:
        youtube_download(u)
    print("\n Done.")

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2679117</id><snippet>pickle</snippet></ROW><ROW><id>2679117</id><snippet>marshal</snippet></ROW><ROW><id>2679117</id><snippet>JSON</snippet></ROW><ROW><id>2679215</id><snippet>to_url</snippet></ROW><ROW><id>2679215</id><snippet>d</snippet></ROW><ROW><id>2679215</id><snippet>&gt;&gt;&gt; def f(**kwargs): print kwargs
... 
&gt;&gt;&gt; d1 = { u'foo': u'bar' }
&gt;&gt;&gt; d2 = { 'foo': u'bar' }
&gt;&gt;&gt; f(**d1)
TypeError: f() keywords must be strings
&gt;&gt;&gt; f(**d2)
{'foo': u'bar'}
</snippet></ROW><ROW><id>2679215</id><snippet>d = dict( self.arguments.values_list('key', 'value') )
</snippet></ROW><ROW><id>2679215</id><snippet>d = dict((str(k), v) for k, v in self.arguments.values_list('key', 'value').iteritems())
</snippet></ROW><ROW><id>2679222</id><snippet>def dict_cursor(cursor):
    description = [x[0] for x in cursor.description]
    for row in cursor:
        yield dict(zip(description, row))
</snippet></ROW><ROW><id>2679222</id><snippet>simplify_description = lambda cursor: [x[0] for x in cursor.description]
dict_cursor = lambda c, d: dict(zip(d, r) for r in c))
</snippet></ROW><ROW><id>2679444</id><snippet>self.header().setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
self.header().customContextMenuRequested.connect(self.headerMenu)
</snippet></ROW><ROW><id>2679444</id><snippet>def headerMenu(self, pos):
    globalPos = self.mapToGlobal(pos)
    menu = QMenu()
    menu.addAction("test item")
    selectedItem = menu.exec_(globalPos)
    if selectedItem:
        print "selected: ", selectedItem
</snippet></ROW><ROW><id>2679751</id><snippet>button = gtk.Button("text on button")
button.set_size_request(width=30, height=20)
</snippet></ROW><ROW><id>2679752</id><snippet>xlwt</snippet></ROW><ROW><id>2679752</id><snippet>pyExcelerator</snippet></ROW><ROW><id>2679752</id><snippet>if not self.__parent._cell_overwrite_ok:
</snippet></ROW><ROW><id>2679752</id><snippet>_cell_overwrite_ok</snippet></ROW><ROW><id>2679823</id><snippet>c.create_oval</snippet></ROW><ROW><id>2679823</id><snippet>x</snippet></ROW><ROW><id>2679823</id><snippet>c.coords(x)
</snippet></ROW><ROW><id>2679823</id><snippet>(x1, y1, x2, y2)</snippet></ROW><ROW><id>2679823</id><snippet>coords</snippet></ROW><ROW><id>2679823</id><snippet>x</snippet></ROW><ROW><id>2679923</id><snippet>mount_enclosing_volume</snippet></ROW><ROW><id>2679957</id><snippet>-&gt;</snippet></ROW><ROW><id>2679957</id><snippet>decode</snippet></ROW><ROW><id>2679957</id><snippet>encode</snippet></ROW><ROW><id>2679957</id><snippet>iso-8859-1</snippet></ROW><ROW><id>2680237</id><snippet>D:\tmp\twill-0.9&gt;&lt;b&gt;python twill-sh&lt;/b&gt;

 -= Welcome to twill! =-

current page:  *empty page*
&gt;&gt;</snippet></ROW><ROW><id>2680237</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>2680237</id><snippet>import twill.shell
twill.shell.main()
</snippet></ROW><ROW><id>2680237</id><snippet>&gt;&gt;&gt; &lt;b&gt;import twill.shell&lt;/b&gt;
&gt;&gt;&gt; &lt;b&gt;twill.shell.main()&lt;/b&gt;

 -= Welcome to twill! =-

current page:  *empty page*
&gt;&gt; &lt;b&gt;?&lt;/b&gt;

Undocumented commands:
======================
add_auth             fa           info             save_html           title
add_extra_header     find         load_cookies     setglobal           url
agent                follow       notfind          setlocal
back                 formaction   redirect_error   show
clear_cookies        formclear    redirect_output  show_cookies
clear_extra_headers  formfile     reload           show_extra_headers
code                 formvalue    reset_browser    showforms
config               fv           reset_error      showhistory
debug                get_browser  reset_output     showlinks
echo                 getinput     run              sleep
exit                 getpassword  runfile          submit
extend_with          go           save_cookies     tidy_ok

current page:  *empty page*
&gt;&gt;</snippet></ROW><ROW><id>2680460</id><snippet>SQLite version 3.6.22
sqlite&gt; create table me (name text collate nocase);
sqlite&gt; .schema
CREATE TABLE me (name text collate nocase);
sqlite&gt; insert into me values("Bob");
sqlite&gt; insert into me values("alice");
sqlite&gt; select * from me order by name;
alice
Bob
</snippet></ROW><ROW><id>2680596</id><snippet>def update_filename(instance, filename):
    path = "upload/path/"
    format = instance.userid + instance.transaction_uuid + instance.file_extension
    return os.path.join(path, format)
</snippet></ROW><ROW><id>2680859</id><snippet>ALLOWED_MODES = frozenset(['r', 'rb', 'U', 'rU'])
</snippet></ROW><ROW><id>2680859</id><snippet>if mode not in FakeFile.ALLOWED_MODES:
  raise IOError('invalid mode: %s' % mode)
</snippet></ROW><ROW><id>2680859</id><snippet>import logging
....
logging.error('There was an error retrieving ...')
logging.debug('Finish something')
</snippet></ROW><ROW><id>2681127</id><snippet>incr()</snippet></ROW><ROW><id>2681127</id><snippet>decr()</snippet></ROW><ROW><id>2681299</id><snippet>thr.start(request)</snippet></ROW><ROW><id>2681299</id><snippet>thr.run(request)</snippet></ROW><ROW><id>2681440</id><snippet>def song_download(request, song_id):
    song = Song.objects.get(id=song_id)
    fsock = open('/path/to/file.mp3', 'r')
    response = HttpResponse(fsock, mimetype='audio/mpeg')
    response['Content-Disposition'] = "attachment; filename=%s - %s.mp3" % \
                                     (song.artist, song.title)
    return response
</snippet></ROW><ROW><id>2681507</id><snippet>&gt;&gt;&gt; class TestB():
...     def __init__(self, attr=1):
...         self.attr = attr
...     
&gt;&gt;&gt; a = TestB()
&gt;&gt;&gt; b = TestB()
&gt;&gt;&gt; a.attr = 2
&gt;&gt;&gt; a.attr
2
&gt;&gt;&gt; b.attr
1
</snippet></ROW><ROW><id>2681507</id><snippet>&gt;&gt;&gt; class Test():
...     def __init__(self, attr=[]):
...         self.attr = attr
...     
&gt;&gt;&gt; a = Test()
&gt;&gt;&gt; b = Test()
&gt;&gt;&gt; a.attr.append(1)
&gt;&gt;&gt; a.attr
[1]
&gt;&gt;&gt; b.attr
[1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2681507</id><snippet>&gt;&gt;&gt; class TestC():
...     def __init__(self, attr=None):
...         if attr is None:
...             attr = []
...         self.attr = attr
...     
&gt;&gt;&gt; a = TestC()
&gt;&gt;&gt; b = TestC()
&gt;&gt;&gt; a.attr.append(1)
&gt;&gt;&gt; a.attr
[1]
&gt;&gt;&gt; b.attr
[]
</snippet></ROW><ROW><id>2682075</id><snippet>def apply_on_all(seq, method, *args, **kwargs):
    for obj in seq:
         getattr(obj, method)(*args, **kwargs)
</snippet></ROW><ROW><id>2682075</id><snippet>def create_all_applier(method, doc=None):
    def on_all(seq, *args, **kwargs):
        for obj in seq:
            getattr(obj, method)(*args, **kwargs)
    on_all.__doc__ = doc
    return on_all

start_all = create_all_applier('start', "Start all instances")
stop_all = create_all_applier('stop', "Stop all instances")
...
</snippet></ROW><ROW><id>2682226</id><snippet>str</snippet></ROW><ROW><id>2682226</id><snippet>codecs.open()</snippet></ROW><ROW><id>2682226</id><snippet>bytes</snippet></ROW><ROW><id>2682226</id><snippet>codecs.open()</snippet></ROW><ROW><id>2682752</id><snippet>class Foo(object):
    CONST_NAME = "Name"
</snippet></ROW><ROW><id>2682752</id><snippet>CONST_NAME = "Name"
</snippet></ROW><ROW><id>2682853</id><snippet>inst = Complex(3,2)

inst.dosomething()
</snippet></ROW><ROW><id>2683149</id><snippet>'s' if count &gt; 1</snippet></ROW><ROW><id>2683149</id><snippet>count &lt;= 1</snippet></ROW><ROW><id>2683149</id><snippet>print "The plural of plural is plural{0}. {1}".format(
    's' if count &gt; 1 else '', "Isnt't it!?")
</snippet></ROW><ROW><id>2683629</id><snippet>property</snippet></ROW><ROW><id>2683629</id><snippet>self.foo = foo # read-write property
</snippet></ROW><ROW><id>2683629</id><snippet>a.foo = 3
</snippet></ROW><ROW><id>2683629</id><snippet>property</snippet></ROW><ROW><id>2683629</id><snippet>&gt;&gt;&gt; class ClassName(object):
    def __init__(self, foo):
        self.foo = foo


&gt;&gt;&gt; a = ClassName(1, 2)
&gt;&gt;&gt; a.foo
1
&gt;&gt;&gt; a.foo = 42
&gt;&gt;&gt; a.foo
42
</snippet></ROW><ROW><id>2683933</id><snippet>1,$s/\[\(\d\+\),\s\+\d\+,\s\+\(\d\+\),\s\+\(\d\+\)\]/[\1, 2, \2, \3]/g
</snippet></ROW><ROW><id>2683933</id><snippet>%s/\[\(\d\+\),\s\+\d\+,\s\+\(\d\+\),\s\+\(\d\+\)\]/[\1, 2, \2, \3]/
</snippet></ROW><ROW><id>2684277</id><snippet>listOfInts</snippet></ROW><ROW><id>2684277</id><snippet>self.listOfInts</snippet></ROW><ROW><id>2684277</id><snippet>self</snippet></ROW><ROW><id>2684277</id><snippet>append</snippet></ROW><ROW><id>2684277</id><snippet>listOfInts</snippet></ROW><ROW><id>2684277</id><snippet>self.listOfInts = []</snippet></ROW><ROW><id>2684277</id><snippet>__init__</snippet></ROW><ROW><id>2684742</id><snippet>## top of my .fcgi script
import sys, time
original_modules = sys.modules.copy()

## in a separate thread
old_ctime = os.path.getctime("mymodule.py")
while True:
    time.sleep(10)
    new_ctime = os.path.getctime("mymodule.py")
    if new_ctime &gt; old_ctime:
        sys.modules = original_modules # reset all imports
        import mymodule
        mymodule.dofcgi()
</snippet></ROW><ROW><id>2684758</id><snippet>args</snippet></ROW><ROW><id>2684758</id><snippet>Kelvin</snippet></ROW><ROW><id>2684758</id><snippet>person</snippet></ROW><ROW><id>2684758</id><snippet>hello.py -p Kelvin file1.txt</snippet></ROW><ROW><id>2684758</id><snippet>person</snippet></ROW><ROW><id>2684758</id><snippet>"Kelvin"</snippet></ROW><ROW><id>2684758</id><snippet>args</snippet></ROW><ROW><id>2684758</id><snippet>"file1.txt"</snippet></ROW><ROW><id>2684758</id><snippet>optparse</snippet></ROW><ROW><id>2684758</id><snippet>parse_args()</snippet></ROW><ROW><id>2684758</id><snippet>options</snippet></ROW><ROW><id>2684758</id><snippet>--file</snippet></ROW><ROW><id>2684758</id><snippet>options.file</snippet></ROW><ROW><id>2684758</id><snippet>None</snippet></ROW><ROW><id>2684758</id><snippet>args</snippet></ROW><ROW><id>2684827</id><snippet>.c</snippet></ROW><ROW><id>2684827</id><snippet>gcc -w -E input/file.py.c -o output/file.py</snippet></ROW><ROW><id>2684827</id><snippet>// comment</snippet></ROW><ROW><id>2684827</id><snippet>#define</snippet></ROW><ROW><id>2684827</id><snippet>def nothing(*args):
    pass

def print_debug(msg):
    print msg

if not DEBUG: 
    print_debug = nothing
</snippet></ROW><ROW><id>2684849</id><snippet>/usr/lib64/openoffice.org/program/soffice.bin -accept=socket,host=localhost,port=8100\;urp -headless
</snippet></ROW><ROW><id>2684849</id><snippet>import uno
from os.path import abspath, isfile, splitext
from com.sun.star.beans import PropertyValue
from com.sun.star.task import ErrorCodeIOException
from com.sun.star.connection import NoConnectException

FAMILY_TEXT = "Text"
FAMILY_SPREADSHEET = "Spreadsheet"
FAMILY_PRESENTATION = "Presentation"
FAMILY_DRAWING = "Drawing"
DEFAULT_OPENOFFICE_PORT = 8100

FILTER_MAP = {
    "pdf": {
        FAMILY_TEXT: "writer_pdf_Export",
        FAMILY_SPREADSHEET: "calc_pdf_Export",
        FAMILY_PRESENTATION: "impress_pdf_Export",
        FAMILY_DRAWING: "draw_pdf_Export"
    },
    "html": {
        FAMILY_TEXT: "HTML (StarWriter)",
        FAMILY_SPREADSHEET: "HTML (StarCalc)",
        FAMILY_PRESENTATION: "impress_html_Export"
    },
    "odt": { FAMILY_TEXT: "writer8" },
    "doc": { FAMILY_TEXT: "MS Word 97" },
    "rtf": { FAMILY_TEXT: "Rich Text Format" },
    "txt": { FAMILY_TEXT: "Text" },
    "docx": { FAMILY_TEXT: "MS Word 2007 XML" },
    "ods": { FAMILY_SPREADSHEET: "calc8" },
    "xls": { FAMILY_SPREADSHEET: "MS Excel 97" },
    "odp": { FAMILY_PRESENTATION: "impress8" },
    "ppt": { FAMILY_PRESENTATION: "MS PowerPoint 97" },
    "swf": { FAMILY_PRESENTATION: "impress_flash_Export" }
}

class DocumentConverter:

    def __init__(self, port=DEFAULT_OPENOFFICE_PORT):
        localContext = uno.getComponentContext()
        resolver = localContext.ServiceManager.createInstanceWithContext("com.sun.star.bridge.UnoUrlResolver", localContext)
        try:
            self.context = resolver.resolve("uno:socket,host=localhost,port=%s;urp;StarOffice.ComponentContext" % port)
        except NoConnectException:
            raise Exception, "failed to connect to OpenOffice.org on port %s" % port
        self.desktop = self.context.ServiceManager.createInstanceWithContext("com.sun.star.frame.Desktop", self.context)

    def convert(self, inputFile, outputFile):

        inputUrl = self._toFileUrl(inputFile)
        outputUrl = self._toFileUrl(outputFile)

        document = self.desktop.loadComponentFromURL(inputUrl, "_blank", 0, self._toProperties(Hidden=True))
        #document.setPropertyValue("DocumentTitle", "saf" ) TODO: Check how this can be set and set doc update mode to  FULL_UPDATE

        if self._detectFamily(document) == FAMILY_TEXT:
            indexes = document.getDocumentIndexes()
            for i in range(0, indexes.getCount()):
                index = indexes.getByIndex(i)
                index.update()

            try:
                document.refresh()
            except AttributeError:
                pass

            indexes = document.getDocumentIndexes()
            for i in range(0, indexes.getCount()):
                index = indexes.getByIndex(i)
                index.update()

        outputExt = self._getFileExt(outputFile)
        filterName = self._filterName(document, outputExt)

        try:
            document.storeToURL(outputUrl, self._toProperties(FilterName=filterName))
        finally:
            document.close(True)

    def _filterName(self, document, outputExt):
        family = self._detectFamily(document)
        try:
            filterByFamily = FILTER_MAP[outputExt]
        except KeyError:
            raise Exception, "unknown output format: '%s'" % outputExt
        try:
            return filterByFamily[family]
        except KeyError:
            raise Exception, "unsupported conversion: from '%s' to '%s'" % (family, outputExt)

    def _detectFamily(self, document):
        if document.supportsService("com.sun.star.text.GenericTextDocument"):
            # NOTE: a GenericTextDocument is either a TextDocument, a WebDocument, or a GlobalDocument
            # but this further distinction doesn't seem to matter for conversions
            return FAMILY_TEXT
        if document.supportsService("com.sun.star.sheet.SpreadsheetDocument"):
            return FAMILY_SPREADSHEET
        if document.supportsService("com.sun.star.presentation.PresentationDocument"):
            return FAMILY_PRESENTATION
        if document.supportsService("com.sun.star.drawing.DrawingDocument"):
            return FAMILY_DRAWING
        raise Exception, "unknown document family: %s" % document

    def _getFileExt(self, path):
        ext = splitext(path)[1]
        if ext is not None:
            return ext[1:].lower()

    def _toFileUrl(self, path):
        return uno.systemPathToFileUrl(abspath(path))

    def _toProperties(self, **args):
        props = []
        for key in args:
            prop = PropertyValue()
            prop.Name = key
            prop.Value = args[key]
            props.append(prop)
        return tuple(props)

if __name__ == "__main__":
    from sys import argv, exit

    if len(argv) &lt; 3:
        print "USAGE: python %s &lt;input-file&gt; &lt;output-file&gt;" % argv[0]
        exit(255)
    if not isfile(argv[1]):
        print "no such input file: %s" % argv[1]
        exit(1)

    try:
        converter = DocumentConverter()    
        converter.convert(argv[1], argv[2])
    except Exception, exception:
        print "ERROR!" + str(exception)
        exit(1)
</snippet></ROW><ROW><id>2685098</id><snippet>contents='0.259515E+03 0.235095E+03 0.208262E+03 0.230223E+03 0.267333E+03 0.217889E+03 0.156233E+03 0.144876E+03 0.136187E+03 0.137865E+00'
</snippet></ROW><ROW><id>2685098</id><snippet>string_numbers=contents.split()
print(string_numbers)
# ['0.259515E+03', '0.235095E+03', '0.208262E+03', '0.230223E+03', '0.267333E+03', '0.217889E+03', '0.156233E+03', '0.144876E+03', '0.136187E+03', '0.137865E+00']
</snippet></ROW><ROW><id>2685098</id><snippet>float</snippet></ROW><ROW><id>2685098</id><snippet>string_numbers</snippet></ROW><ROW><id>2685098</id><snippet>float</snippet></ROW><ROW><id>2685098</id><snippet>float_numbers=map(float,string_numbers)
print(float_numbers)
# [259.51499999999999, 235.095, 208.262, 230.22300000000001, 267.33300000000003, 217.88900000000001, 156.233, 144.876, 136.18700000000001, 0.13786499999999999]
</snippet></ROW><ROW><id>2685098</id><snippet>(1 if num&lt;1 else num)</snippet></ROW><ROW><id>2685098</id><snippet>processed_numbers=[(1 if num&lt;1 else num) for num in float_numbers]
print(processed_numbers)
# [259.51499999999999, 235.095, 208.262, 230.22300000000001, 267.33300000000003, 217.88900000000001, 156.233, 144.876, 136.18700000000001, 1]
</snippet></ROW><ROW><id>2685098</id><snippet>processed_numbers=[(1 if num&lt;1 else num) for num in map(float,contents.split())]
</snippet></ROW><ROW><id>2685098</id><snippet>processed_numbers</snippet></ROW><ROW><id>2685098</id><snippet>str.join</snippet></ROW><ROW><id>2685098</id><snippet>comma_separated_string=', '.join(map(str,processed_numbers))
# '259.515, 235.095, 208.262, 230.223, 267.333, 217.889, 156.233, 144.876, 136.187, 1'
</snippet></ROW><ROW><id>2685160</id><snippet>gtk.main()</snippet></ROW><ROW><id>2685160</id><snippet>gtk.main_iteration</snippet></ROW><ROW><id>2685160</id><snippet>while running:
    #filter events here
    gtk.main_iteration(true)
</snippet></ROW><ROW><id>2685184</id><snippet>__future__</snippet></ROW><ROW><id>2685184</id><snippet>[root@234571-app2 git]# /usr/bin/python2.5 test.py
</snippet></ROW><ROW><id>2685184</id><snippet>python2.5</snippet></ROW><ROW><id>2685184</id><snippet>env</snippet></ROW><ROW><id>2685184</id><snippet>PATH</snippet></ROW><ROW><id>2685184</id><snippet>#!/usr/bin/python2.5
</snippet></ROW><ROW><id>2685184</id><snippet>#!/usr/bin/env python2.5
</snippet></ROW><ROW><id>2685188</id><snippet>import maya.cmds

def myRotateCallback():
    print 'do something'

maya.cmds.scriptJob( attributeChange=['pCube1.rotateX', myRotateCallback] )
</snippet></ROW><ROW><id>2685801</id><snippet>model</snippet></ROW><ROW><id>2685801</id><snippet>gtk.TreeViewColumn ('...', gtk.CellRendererCombo (), text = N, model = M)
</snippet></ROW><ROW><id>2685801</id><snippet>M</snippet></ROW><ROW><id>2685801</id><snippet>gtk.ListStore</snippet></ROW><ROW><id>2685801</id><snippet>changed</snippet></ROW><ROW><id>2685801</id><snippet>M</snippet></ROW><ROW><id>2685801</id><snippet>store</snippet></ROW><ROW><id>2685801</id><snippet>gtk.ListStore</snippet></ROW><ROW><id>2685801</id><snippet>X</snippet></ROW><ROW><id>2685801</id><snippet>def combo1_changed (combo, path, iter):
    main_iter = store.get_iter (path)
    selected  = store.get_value (main_iter, X)
    if selected == 'Alphabet':
        store.set_value (main_iter, M, alphabet_list_store)
    elif selected == 'Numbers':
        store.set_value (main_iter, M, number_list_store)
    ...
</snippet></ROW><ROW><id>2686247</id><snippet>start</snippet></ROW><ROW><id>2686247</id><snippet>run</snippet></ROW><ROW><id>2686247</id><snippet>end</snippet></ROW><ROW><id>2686247</id><snippet>from multiprocessing import Process, Event
from time import sleep

class Test(Process):
    def __init__(self):
        Process.__init__(self)
        self.stop = Event()

    def run(self):
        while not self.stop.is_set():
            print "running"
            sleep(1.0)

    def end(self):
        print "stop message received"
        self.stop.set()

if __name__ == "__main__":
    test = Test()
    test.start()
    sleep(1.0)
    test.end()
    test.join()
</snippet></ROW><ROW><id>2686540</id><snippet>SUM</snippet></ROW><ROW><id>2686540</id><snippet>class RateableThing(db.Model):
    num_ratings = db.IntegerProperty()
    avg_rating = db.FloatProperty()
</snippet></ROW><ROW><id>2686540</id><snippet>thing.avg_ratings = ((thing.avg_ratings * thing.num_ratings) + new_rating) / thing.num_ratings + 1
thing.num_ratings += 1
thing.put()
</snippet></ROW><ROW><id>2687692</id><snippet>from google.appengine.api import xmpp
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class XMPPHandler(webapp.RequestHandler):
    def post(self):
        msg = xmpp.Message(self.request.POST)
        msg.reply("I got your msg: '%s'" % msg.body)

application = webapp.WSGIApplication([
    ('/_ah/xmpp/message/chat/', XMPPHandler),
], debug=True)

def main():
    run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2687723</id><snippet>export PATH=/Users/mycomp/bin:$PATH
</snippet></ROW><ROW><id>2687723</id><snippet>echo "export PATH=/Users/mycomp/bin:\$PATH" &gt;&gt; ~/.bashrc
source ~/.bashrc
</snippet></ROW><ROW><id>2687723</id><snippet>django-admin</snippet></ROW><ROW><id>2687723</id><snippet>django-admin</snippet></ROW><ROW><id>2687856</id><snippet>hash</snippet></ROW><ROW><id>2687856</id><snippet>hashlib</snippet></ROW><ROW><id>2687953</id><snippet>dict</snippet></ROW><ROW><id>2687953</id><snippet>type2templ</snippet></ROW><ROW><id>2687953</id><snippet>mako.template.Template</snippet></ROW><ROW><id>2687953</id><snippet>t = type2templ.get(type(theobj), default_templ)
... t.render() ...
</snippet></ROW><ROW><id>2687953</id><snippet>theobj</snippet></ROW><ROW><id>2687953</id><snippet>theobj.__class__</snippet></ROW><ROW><id>2687953</id><snippet>type(theobj)</snippet></ROW><ROW><id>2687953</id><snippet>default_templ</snippet></ROW><ROW><id>2687953</id><snippet>theobj</snippet></ROW><ROW><id>2687953</id><snippet>.get</snippet></ROW><ROW><id>2687953</id><snippet>foo</snippet></ROW><ROW><id>2687953</id><snippet>type2templ</snippet></ROW><ROW><id>2687953</id><snippet>bar</snippet></ROW><ROW><id>2687953</id><snippet>baz</snippet></ROW><ROW><id>2687953</id><snippet>foo</snippet></ROW><ROW><id>2687953</id><snippet>type2templ</snippet></ROW><ROW><id>2687953</id><snippet>baz</snippet></ROW><ROW><id>2687953</id><snippet>theobj.thetempl</snippet></ROW><ROW><id>2687953</id><snippet>thetempl</snippet></ROW><ROW><id>2688045</id><snippet>gb2312</snippet></ROW><ROW><id>2688045</id><snippet>print u'哈哈'.encode('utf-8')
</snippet></ROW><ROW><id>2688045</id><snippet>encode</snippet></ROW><ROW><id>2688045</id><snippet>sys.stdout</snippet></ROW><ROW><id>2688045</id><snippet>encoding</snippet></ROW><ROW><id>2688103</id><snippet>for item in your_list[:n]: 
    ...
</snippet></ROW><ROW><id>2688271</id><snippet>import re
from twisted.internet import reactor, protocol
from twisted.words.protocols import irc

find_command = re.compile(r'google ([a-z]+)').findall

class Googler(irc.IRCClient):
    def privmsg(self, user, channel, message):
        for text in find_command(message):
            self.say(channel, "http://google.com/search?q=%s" % (text,))

def connect():
    cc = protocol.ClientCreator(reactor, Googler)
    return cc.connectTCP(host, port)

def run(proto):
    proto.join(channel)

def main():
    d = connect()
    d.addCallback(run)
    reactor.run()
</snippet></ROW><ROW><id>2688271</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>2688271</id><snippet>import re
from twisted.internet import reactor, protocol, defer
from twisted.words.protocols import irc

find_command = re.compile(r'google ([a-z]+)').findall

class Googler(irc.IRCClient):
    def privmsg(self, user, channel, message):
        for text in find_command(message):
            self.say(channel, "http://google.com/search?q=%s" % (text,))

@defer.inlineCallbacks
def run():
    cc = protocol.ClientCreator(reactor, Googler)
    proto = yield cc.connectTCP(host, port)
    proto.join(channel)

def main():
    run()
    reactor.run()
</snippet></ROW><ROW><id>2688271</id><snippet>addCallbacks</snippet></ROW><ROW><id>2688271</id><snippet>yield</snippet></ROW><ROW><id>2688271</id><snippet>Googler</snippet></ROW><ROW><id>2688271</id><snippet>IRCClient</snippet></ROW><ROW><id>2688271</id><snippet>Googler.join</snippet></ROW><ROW><id>2688271</id><snippet>Channel</snippet></ROW><ROW><id>2688271</id><snippet>Channel</snippet></ROW><ROW><id>2688271</id><snippet>@defer.inlineCallbacks
def run():
    cc = protocol.ClientCreator(reactor, Googler)
    proto = yield cc.connectTCP(host, port)
    channel = proto.join(channel)
    for msg in channel:
        msg = yield msg
        for text in find_command(msg):
            channel.say("http://google.com/search?q=%s" % (text,))
</snippet></ROW><ROW><id>2688271</id><snippet>yield</snippet></ROW><ROW><id>2688271</id><snippet>Channel</snippet></ROW><ROW><id>2688271</id><snippet>from corotwine import protocol

def run():
    proto = Googler()
    transport = protocol.gConnectTCP(host, port)
    proto.makeConnection(transport)
    channel = proto.join(channel)
    for msg in channel:
        for text in find_command(msg):
            channel.say("http://google.com/search?q=%s" % (text,))
</snippet></ROW><ROW><id>2688271</id><snippet>Channel</snippet></ROW><ROW><id>2688271</id><snippet>from corotwine import defer

class Channel(object):
    def __init__(self, ircClient, name):
        self.ircClient = ircClient
        self.name = name

    def __iter__(self):
        while True:
            d = self.ircClient.getNextMessage(self.name)
            message = defer.blockOn(d)
            yield message
</snippet></ROW><ROW><id>2688271</id><snippet>Googler</snippet></ROW><ROW><id>2688271</id><snippet>getNextMessage</snippet></ROW><ROW><id>2688271</id><snippet>IRCClient</snippet></ROW><ROW><id>2688271</id><snippet>from twisted.internet import defer

class Googler(irc.IRCClient):
    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self._nextMessages = {}

    def getNextMessage(self, channel):
        if channel not in self._nextMessages:
            self._nextMessages[channel] = defer.DeferredQueue()
        return self._nextMessages[channel].get()

    def privmsg(self, user, channel, message):
        if channel not in self._nextMessages:
            self._nextMessages[channel] = defer.DeferredQueue()
        self._nextMessages[channel].put(message)
</snippet></ROW><ROW><id>2688271</id><snippet>run</snippet></ROW><ROW><id>2688271</id><snippet>from greenlet import greenlet

def main():
    greenlet(run).switch()
    reactor.run()
</snippet></ROW><ROW><id>2688271</id><snippet>run</snippet></ROW><ROW><id>2688271</id><snippet>run</snippet></ROW><ROW><id>2688271</id><snippet>run</snippet></ROW><ROW><id>2688484</id><snippet>test.twill</snippet></ROW><ROW><id>2688484</id><snippet>setlocal query "twill Python"

go http://google.com/

fv 1 q $query
submit btnI     # use the "I'm feeling lucky" button

show
</snippet></ROW><ROW><id>2688484</id><snippet>python twill-sh test.twill
</snippet></ROW><ROW><id>2688484</id><snippet>tests</snippet></ROW><ROW><id>2688484</id><snippet>test-back.twill
test-basic.twill
test-dns.twill
test-equiv-refresh.twill
test-find.twill
test-form.twill
test-formfill.twill
test-global-form.twill
test-go-exit.twill
....
</snippet></ROW><ROW><id>2688513</id><snippet>wkhtmltopdf</snippet></ROW><ROW><id>2688513</id><snippet>Python</snippet></ROW><ROW><id>2688513</id><snippet>PHP</snippet></ROW><ROW><id>2688617</id><snippet>import chardet
from lxml import html
content = urllib2.urlopen(url).read()
encoding = chardet.detect(content)['encoding']
if encoding != 'utf-8':
    content = content.decode(encoding, 'replace').encode('utf-8')
doc = html.fromstring(content, base_url=url)
</snippet></ROW><ROW><id>2689737</id><snippet>from django.db.models import Avg

p = Property.objects.get(...)
stars_average = p.rating_set.aggregate(Avg('stars')).values()[0]
</snippet></ROW><ROW><id>2690263</id><snippet>location /files/ {
   alias /true/path/to/mp3/files/;
   internal;
}
</snippet></ROW><ROW><id>2690263</id><snippet>def song_download(request, song_id):
    try:
        song = Song.objects.get(id=song_id)
        response = HttpResponse()
        response['Content-Type'] = 'application/mp3'
        response['X-Accel-Redirect'] = '/files/' + song.filenamename
        response['Content-Disposition'] = 'attachment;filename=' + song.filename
    except Exception:
        raise Http404
    return response
</snippet></ROW><ROW><id>2690368</id><snippet>print [name for name in os.listdir(".") if os.path.isdir(name)]
</snippet></ROW><ROW><id>2690368</id><snippet>split("-")</snippet></ROW><ROW><id>2690368</id><snippet>abspath</snippet></ROW><ROW><id>2690368</id><snippet>print [os.path.abspath(name) for name in os.listdir(".") if os.path.isdir(name)]
</snippet></ROW><ROW><id>2690368</id><snippet>walk</snippet></ROW></DATA>