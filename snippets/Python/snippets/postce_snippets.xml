<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>12872265</id><snippet>keepProgramRunning = True
a = int(input("Type a value for a: "))
b = int(input("Type a value for b: "))
print("Result when multiplying: ", a*b)
print("Result when dividing: ", a/b)
print("...", a-b)
print("...", a+b)
input("Press [enter] to continue..")
</snippet></ROW><ROW><id>12872600</id><snippet>rajinination.com</snippet></ROW><ROW><id>12872600</id><snippet>www.rajinination.com</snippet></ROW><ROW><id>12872672</id><snippet>work</snippet></ROW><ROW><id>12872672</id><snippet>work</snippet></ROW><ROW><id>12872672</id><snippet>multiprocessing</snippet></ROW><ROW><id>12872672</id><snippet>import sys
import os
import time
import itertools
import multiprocessing as mp
import numpy as np
import matplotlib.nxutils as nx
import liblas
import shapefile

clock = time.clock if sys.platform == 'win32' else time.time

def LAS2TXTClipSplitbyChunk(inFile, poly, chunkSize = 1, MinPoints = 1):
    sf = shapefile.Reader(poly) #open shpfile
    sr = sf.shapeRecords()
    poly_filename, ext = os.path.splitext(poly)
    for record in sr:
        inFile_filename = os.path.splitext(os.path.basename(inFile))[0]
        record_num = record.record[0]        
        out_filename = '{0}_{1}_{2}.txt'.format(
            poly_filename, inFile_filename, record_num)
        pool.apply_async(pointinside,
                         args = (record, out_filename, inFile, chunkSize, MinPoints),
                         callback = update)

def pointinside(record, out_filename, inFile, chunkSize, MinPoints):
    start = clock()
    record_num = record.record[0]   
    verts = np.array(record.shape.points, float)
    f = iter(liblas.file.File(inFile, None, 'rb'))
    result = []
    worth_writing = False
    for chunk in iter(lambda: list(itertools.islice(f, chunkSize)), []):
        points = [(p.x, p.y) for p in chunk]
        index = nx.points_inside_poly(points, verts)
        chunk = [p for inside, p in itertools.izip(index,chunk) if inside]
        for p in chunk:
            fields = (p.x, p.y, p.z, p.intensity, p.return_number,
                      p.number_of_returns, p.scan_direction, p.flightline_edge,
                      p.classification, p.scan_angle, record_num)
            result.append(' '.join(map(str, fields)))
        if len(result) &gt;= bufferSize:
            # Writing to disk is slow. Doing it once for every iteration is
            # inefficient.  So instead build up bufferSize number of lines
            # before writing them all to disk.
            worth_writing = True
            with open(out_filename, 'a') as file_out:
                file_out.write('\n'.join(result)+'\n')
            result = []
    # In case there were some results (less than bufferSize lines), we
    # dump them to disk here.
    if (len(result) &gt;= MinPoints) or worth_writing:
        with open(out_filename, 'a') as file_out:
            file_out.write('\n'.join(result)+'\n')
    f.close()                    
    end = clock()
    return end-start

def update(result):
    with open(debug_filename, 'a') as f:
        f.write('{r}\n'.format(r = result))

if __name__ == '__main__':
    workdir = 'C://04-las_clip_inside_area//prova//'
    # workdir = os.path.expanduser('~/tmp/tmp')
    os.chdir(workdir)
    inFile = 'Ku_115_class_Notground_normalize.las'
    poly = 'ku_115_plot_clip.shp'
    debug_filename = 'debug.dat'
    chunkSize = None
    MinPoints = 1
    bufferSize = max(MinPoints, 100)

    pool = mp.Pool()
    LAS2TXTClipSplitbyChunk(inFile, poly, chunkSize, MinPoints)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>12872672</id><snippet>In [129]: import matplotlib.pyplot as plt

In [130]: import numpy as np

In [131]: x = np.genfromtxt('debug.dat')

In [132]: plt.plot(x)
Out[132]: [&lt;matplotlib.lines.Line2D object at 0xe309b4c&gt;]

In [133]: plt.show()
</snippet></ROW><ROW><id>12872708</id><snippet>*</snippet></ROW><ROW><id>12872708</id><snippet>content = '**hello**'
content = re.sub('\*\*(.*)\*\*', lambda p : '&lt;i&gt;%s&lt;/i&gt;' % p.group(1), content)
</snippet></ROW><ROW><id>12872708</id><snippet>content = re.sub('\*\*(?P&lt;name&gt;.*)\*\*', '&lt;i&gt;\g&lt;name&gt;&lt;/i&gt;', '**hello**')
</snippet></ROW><ROW><id>12872708</id><snippet>content = re.sub('\*\*(.*)\*\*', '&lt;i&gt;\\1&lt;/i&gt;', '**hello**')
</snippet></ROW><ROW><id>12872721</id><snippet>elif node.left == last</snippet></ROW><ROW><id>12872721</id><snippet>last</snippet></ROW><ROW><id>12872721</id><snippet>node.left</snippet></ROW><ROW><id>12872721</id><snippet>last</snippet></ROW><ROW><id>12872721</id><snippet>last</snippet></ROW><ROW><id>12872721</id><snippet>None</snippet></ROW><ROW><id>12872721</id><snippet>node.left</snippet></ROW><ROW><id>12872721</id><snippet>last</snippet></ROW><ROW><id>12872721</id><snippet>None</snippet></ROW><ROW><id>12872721</id><snippet>def delete(node):
    if node:

        # recurse: visit all nodes in the two subtrees
        delete(node.left)           
        delete(node.right)

        # after both subtrees have been visited, set pointers of this node to None
        node.left = None
        node.right = None
</snippet></ROW><ROW><id>12872721</id><snippet>root</snippet></ROW><ROW><id>12872721</id><snippet>node</snippet></ROW><ROW><id>12873556</id><snippet>cmd</snippet></ROW><ROW><id>12873556</id><snippet>cd ..</snippet></ROW><ROW><id>12873556</id><snippet>cd folderName</snippet></ROW><ROW><id>12873556</id><snippet>folderName</snippet></ROW><ROW><id>12873556</id><snippet>python filename.py</snippet></ROW><ROW><id>12874032</id><snippet>&gt;&gt;&gt; numpy.array(data, dtype=[('label', str), ('x', float), ('y', float)])
array([('', 1.0, 2.0), ('', 2.0, 4.0), ('', 3.0, 6.0)], 
      dtype=[('label', '|S0'), ('x', '&lt;f8'), ('y', '&lt;f8')])
</snippet></ROW><ROW><id>12874032</id><snippet>'|S0'</snippet></ROW><ROW><id>12874032</id><snippet>&gt;&gt;&gt; numpy.array(data, dtype=[('label', 'S2'), ('x', float), ('y', float)])
array([('a', 1.0, 2.0), ('b', 2.0, 4.0), ('c', 3.0, 6.0)], 
      dtype=[('label', '|S2'), ('x', '&lt;f8'), ('y', '&lt;f8')])
</snippet></ROW><ROW><id>12874032</id><snippet>&gt;&gt;&gt; numpy.array(data, dtype=[('label', (str, 2)), ('x', float), ('y', float)])
array([('a', 1.0, 2.0), ('b', 2.0, 4.0), ('c', 3.0, 6.0)], 
      dtype=[('label', '|S2'), ('x', '&lt;f8'), ('y', '&lt;f8')])
</snippet></ROW><ROW><id>12874375</id><snippet>&gt;&gt;&gt; x = [1.,2.,3.,4.]
&gt;&gt;&gt; [ ((e-f)/f) for e,f in zip ( x[:-1], x[1:]) ]
[-0.5, -0.3333333333333333, -0.25]
</snippet></ROW><ROW><id>12874411</id><snippet># First, define the Manager subclass.
class ActiveManager(models.Manager):
    def get_query_set(self):
        return super(ActiveManager, self).get_query_set().filter(active=True)

# Then hook it into the Record model explicitly.
class Record(models.Model):
    active = BooleanField()

    objects = models.Manager() # The default manager.
    active_objects = ActiveManager() # The specific manager.

#to filter for all active records you can do:
Record.active_objects.all()
</snippet></ROW><ROW><id>12874450</id><snippet>raw_input</snippet></ROW><ROW><id>12874450</id><snippet>input</snippet></ROW><ROW><id>12874450</id><snippet>EOFError</snippet></ROW><ROW><id>12874450</id><snippet>while 1:
    try:
        num = int(raw_input("enter a number: "))
    except EOFError:
        break
</snippet></ROW><ROW><id>12874495</id><snippet>u</snippet></ROW><ROW><id>12874495</id><snippet>u'...'</snippet></ROW><ROW><id>12874495</id><snippet>os.listdir</snippet></ROW><ROW><id>12874495</id><snippet>In [51]: import os

In [52]: os.listdir('.')
Out[52]: ['a', 'a.ps']

In [53]: os.listdir(u'.')
Out[53]: [u'a', u'a.ps']
</snippet></ROW><ROW><id>12874834</id><snippet>urlhandler.py</snippet></ROW><ROW><id>12874834</id><snippet>opener</snippet></ROW><ROW><id>12874834</id><snippet>from urlhandler import opener</snippet></ROW><ROW><id>12874834</id><snippet>opener</snippet></ROW><ROW><id>12874834</id><snippet>req = urllib2.Request('http://www.yoururl.com')
res = opener.open(req)
</snippet></ROW><ROW><id>12874860</id><snippet>&gt;&gt;&gt; User.__subclasses__()
[&lt;class '__main__.Farmer'&gt;]
</snippet></ROW><ROW><id>12874860</id><snippet>User</snippet></ROW><ROW><id>12874860</id><snippet>object</snippet></ROW><ROW><id>12874860</id><snippet>def get_subclasses(c):
    subs = set(c.__subclasses__())
    return subs.union(*(get_subclasses(i) for i in subs))
</snippet></ROW><ROW><id>12874864</id><snippet>yr = datetime.datetime(year, 1, 1)
months = 12
</snippet></ROW><ROW><id>12874864</id><snippet>;</snippet></ROW><ROW><id>12874953</id><snippet>integrl</snippet></ROW><ROW><id>12874953</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate


def func(x,a):
   return a*x*x

def integrl(a):
   return integrate.quad(func,0,10,args=(a))[0]

print integrate.quad(lambda x: integrl(x),0,1)
</snippet></ROW><ROW><id>12875172</id><snippet>from decimal import *

def item_price(data):       
    soup = BeautifulSoup(data)
    info = soup.find('span', itemprop='price').text
    info = info.replace("$","")
    info = Decimal(info)
    info = (info * Decimal(0.2)) + info
    return '${0:.2f}'.format(info)
</snippet></ROW><ROW><id>12875309</id><snippet>names_1,names_2,...,names_200</snippet></ROW><ROW><id>12875309</id><snippet>names_i</snippet></ROW><ROW><id>12875309</id><snippet>i</snippet></ROW><ROW><id>12875309</id><snippet>dictionary:age-&gt;list&lt;names&gt;</snippet></ROW><ROW><id>12875453</id><snippet>pwickle=pickle.dump((wu, apost), open("The Wall.txt","wb"))
</snippet></ROW><ROW><id>12875453</id><snippet>shelve</snippet></ROW><ROW><id>12875453</id><snippet>.txt</snippet></ROW><ROW><id>12875453</id><snippet>.db</snippet></ROW><ROW><id>12875453</id><snippet>.pickle</snippet></ROW><ROW><id>12875744</id><snippet>remote_side</snippet></ROW><ROW><id>12875744</id><snippet>class Node(declarative_base()):
    ...
    prev = relationship(
        'Node',
        uselist=False,
        remote_side=[id],
        backref=backref('next', uselist=False)
    )
</snippet></ROW><ROW><id>12875809</id><snippet>def datagramReceived(self, data, (host, port)):
    pass
</snippet></ROW><ROW><id>12875809</id><snippet>    def datagramReceived(self, data, (host, port)):
                                     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>12875809</id><snippet>import sys
print(sys.version)
</snippet></ROW><ROW><id>12875880</id><snippet>from pprint import pformat

from twisted.internet import reactor
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.web.client import Agent
from twisted.web.http_headers import Headers

class BeginningPrinter(Protocol):
    def __init__(self, finished):
        self.finished = finished
        self.remaining = 1024 * 10

    def dataReceived(self, bytes):
        if self.remaining:
            display = bytes[:self.remaining]
            print 'Some data received:'
            print display
            self.remaining -= len(display)

    def connectionLost(self, reason):
        print 'Finished receiving body:', reason.getErrorMessage()
        self.finished.callback(None)

agent = Agent(reactor)
d = agent.request(
    'GET',
    'http://example.com/',
    Headers({'User-Agent': ['Twisted Web Client Example']}),
    None)

def cbRequest(response):
    print 'Response version:', response.version
    print 'Response code:', response.code
    print 'Response phrase:', response.phrase
    print 'Response headers:'
    print pformat(list(response.headers.getAllRawHeaders()))
    finished = Deferred()
    response.deliverBody(BeginningPrinter(finished))
    return finished
d.addCallback(cbRequest)

def cbShutdown(ignored):
    reactor.stop()
d.addBoth(cbShutdown)

reactor.run()
</snippet></ROW><ROW><id>12875880</id><snippet>Response version: ('HTTP', 1, 0)
Response code: 302
Response phrase: Found
Response headers:
[('Location', ['http://www.iana.org/domains/example/']), ('Server', ['BigIP'])]
Finished receiving body: Response body fully received
</snippet></ROW><ROW><id>12875880</id><snippet>if reason.check(twisted.web.client.ResponseDone)</snippet></ROW><ROW><id>12876025</id><snippet>append</snippet></ROW><ROW><id>12876025</id><snippet>list</snippet></ROW><ROW><id>12876025</id><snippet>name = []
name.append(myClass())
name.append(myClass())
</snippet></ROW><ROW><id>12876051</id><snippet>Test</snippet></ROW><ROW><id>12876051</id><snippet>__get__</snippet></ROW><ROW><id>12876051</id><snippet>__set__</snippet></ROW><ROW><id>12876194</id><snippet>&gt;&gt;&gt; a = [('a',), ('b',), ('c', 'd')]
</snippet></ROW><ROW><id>12876299</id><snippet> $("&lt;span&gt;{{ session['username'] }}$ &gt; " + $query + "&lt;/span&gt;&lt;br /&gt;").appendTo("#output");
</snippet></ROW><ROW><id>12876299</id><snippet>  $("&lt;span&gt;"+data[username] + $query + "&lt;/span&gt;&lt;br /&gt;").appendTo("#output");
</snippet></ROW><ROW><id>12876299</id><snippet>  def cmd:
    ...
    output[username] = session["username"]
    ...
</snippet></ROW><ROW><id>12876470</id><snippet>~</snippet></ROW><ROW><id>12876470</id><snippet>import os

PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))

DATABASE = os.path.join(PROJECT_ROOT, 'tmp', 'test.db')
</snippet></ROW><ROW><id>12876530</id><snippet>&gt;&gt;&gt; round(0.62000000000000011,2)
0.62
</snippet></ROW><ROW><id>12876636</id><snippet>battles = soup.find('td', 'td-number-nowidth')
if battles:
   print(battles.get_text())
</snippet></ROW><ROW><id>12876897</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>12876897</id><snippet>os.lisdir()</snippet></ROW><ROW><id>12876897</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>12876897</id><snippet>os.listdir()</snippet></ROW><ROW><id>12876897</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>12876897</id><snippet>gbk</snippet></ROW><ROW><id>12876897</id><snippet>print()</snippet></ROW><ROW><id>12876897</id><snippet>print(filename.encode('gbk', errors='replace'))</snippet></ROW><ROW><id>12876897</id><snippet>b'F:\\music'</snippet></ROW><ROW><id>12876933</id><snippet>Ð&#158;</snippet></ROW><ROW><id>12876933</id><snippet>\xD0\x9E</snippet></ROW><ROW><id>12876933</id><snippet>\u1054</snippet></ROW><ROW><id>12876933</id><snippet>О</snippet></ROW><ROW><id>12876933</id><snippet>{</snippet></ROW><ROW><id>12876933</id><snippet>chr(208)</snippet></ROW><ROW><id>12876933</id><snippet>&gt;&gt;&gt; (chr(208) + chr(158)).decode('utf-8')
u'\u1054'
&gt;&gt;&gt; print (chr(208) + chr(158)).decode('utf-8')
О
&gt;&gt;&gt; print (chr(208) + chr(158) + chr(209) + chr(130) + chr(208) + chr(178)).decode('utf-8')
Отв
</snippet></ROW><ROW><id>12876988</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12876988</id><snippet>eval</snippet></ROW><ROW><id>12877071</id><snippet>import winsound
# Play Windows exit sound.
winsound.PlaySound("SystemExit", winsound.SND_ALIAS)
</snippet></ROW><ROW><id>12877135</id><snippet>replace()</snippet></ROW><ROW><id>12877135</id><snippet>isalnum()</snippet></ROW><ROW><id>12877135</id><snippet>join()</snippet></ROW><ROW><id>12877135</id><snippet>''</snippet></ROW><ROW><id>12877135</id><snippet>' '.join(new_chars)</snippet></ROW><ROW><id>12877135</id><snippet>'abc'.join(new_chars)</snippet></ROW><ROW><id>12877135</id><snippet>abc</snippet></ROW><ROW><id>12877135</id><snippet>&gt;&gt;&gt; def random_function(string, replacement):
...     new_chars = [replacement if char.isalnum() else char for char in string]
...     return ''.join(new_chars)
...
&gt;&gt;&gt; random_function('Hello how are you', 'x')
'xxxxx xxx xxx xxx'
</snippet></ROW><ROW><id>12877135</id><snippet>random_function()</snippet></ROW><ROW><id>12877190</id><snippet>getLogger()</snippet></ROW><ROW><id>12877190</id><snippet>DEBUG</snippet></ROW><ROW><id>12877190</id><snippet>logger.setLevel(logging.DEBUG)</snippet></ROW><ROW><id>12877273</id><snippet>i = set(a).intersection(set(b))
a = list(set(a).difference(i))
b = list(set(b).difference(i))
</snippet></ROW><ROW><id>12877273</id><snippet>for x in a[:]:
    if x in b:
        b.remove(x)
        a.remove(x)
</snippet></ROW><ROW><id>12877474</id><snippet>get_urls()</snippet></ROW><ROW><id>12877474</id><snippet>admin_view()</snippet></ROW><ROW><id>12877474</id><snippet>/change_form</snippet></ROW><ROW><id>12877497</id><snippet>from svmutil import *</snippet></ROW><ROW><id>12877525</id><snippet>import wx

# Create a .png image with something drawn on a white background
# and put the path to it here.
IMAGE_PATH = 'image.png'


class ShapedFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Shaped Window",
                style = wx.FRAME_SHAPED | wx.SIMPLE_BORDER)
        self.hasShape = False
        self.delta = wx.Point(0,0)

        # Load the image
        image = wx.Image(IMAGE_PATH, wx.BITMAP_TYPE_PNG)
        image.SetMaskColour(255,255,255)
        image.SetMask(True)            
        self.bmp = wx.BitmapFromImage(image)

        self.SetClientSize((self.bmp.GetWidth(), self.bmp.GetHeight()))
        dc = wx.ClientDC(self)
        dc.DrawBitmap(self.bmp, 0,0, True)
        self.SetWindowShape()
        self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
        self.Bind(wx.EVT_MOTION, self.OnMouseMove)
        self.Bind(wx.EVT_RIGHT_UP, self.OnExit)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_WINDOW_CREATE, self.SetWindowShape)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
    def OnEraseBackground(self,evt=None):
        pass        
    def SetWindowShape(self, evt=None):
        r = wx.RegionFromBitmap(self.bmp)
        self.hasShape = self.SetShape(r)

    def OnDoubleClick(self, evt):
        if self.hasShape:
            self.SetShape(wx.Region())
            self.hasShape = False
        else:
            self.SetWindowShape()

    def OnPaint(self, evt):
        dc = wx.PaintDC(self)
        dc.DrawBitmap(self.bmp, 0,0, True)

    def OnExit(self, evt):
        self.Close()

    def OnLeftDown(self, evt):
        self.CaptureMouse()
        pos = self.ClientToScreen(evt.GetPosition())
        origin = self.GetPosition()
        self.delta = wx.Point(pos.x - origin.x, pos.y - origin.y)

    def OnMouseMove(self, evt):
        if evt.Dragging() and evt.LeftIsDown():
            pos = self.ClientToScreen(evt.GetPosition())
            newPos = (pos.x - self.delta.x, pos.y - self.delta.y)
            self.Move(newPos)

    def OnLeftUp(self, evt):
        if self.HasCapture():
            self.ReleaseMouse()



if __name__ == '__main__':
    app = wx.PySimpleApp()
    ShapedFrame().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>12877595</id><snippet>from fabric.context_managers import settings
with settings(host_string='remote_server'):
    run('ls -lart')
</snippet></ROW><ROW><id>12877698</id><snippet>&gt;&gt;&gt; def test():
...    print 'let\'s',
...    pass
...    print 'party'
... 
&gt;&gt;&gt; test()
let's party
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12877698</id><snippet># note the comma at the end
print 'Going to %s' % href,
try:
   self.opener.open(self.url+href)
   print 'OK'
except:
   print 'ERROR'
</snippet></ROW><ROW><id>12877698</id><snippet>'\n'</snippet></ROW><ROW><id>12877698</id><snippet>print</snippet></ROW><ROW><id>12877698</id><snippet>end=''</snippet></ROW><ROW><id>12877698</id><snippet># note the comma at the end
print('Going to %s' % href, end='')
try:
   self.opener.open(self.url+href)
   print(' OK')
except:
   print(' ERROR')
</snippet></ROW><ROW><id>12877829</id><snippet>def recVowelCount(s):
    if not s:
        return 0
    return (1 if s[0] in 'aeiouAEIOU' else 0) + recVowelCount(s[1:])
</snippet></ROW><ROW><id>12877829</id><snippet>def recVowelCount(s):
    def loop(s, acc):
        if not s:
            return acc
        return loop(s[1:], (1 if s[0] in 'aeiouAEIOU' else 0) + acc)
    loop(s, 0)
</snippet></ROW><ROW><id>12877829</id><snippet>def iterVowelCount(s):
    vowels = frozenset('aeiouAEIOU')
    return sum(1 for c in s if c in vowels)
</snippet></ROW><ROW><id>12877829</id><snippet>recVowelCount('murcielago')
&gt; 5

iterVowelCount('murcielago')
&gt; 5
</snippet></ROW><ROW><id>12877954</id><snippet>set</snippet></ROW><ROW><id>12877954</id><snippet>O(1)</snippet></ROW><ROW><id>12877954</id><snippet>&gt;&gt;&gt; def unique(it):
        s = set()
        for el in it:
            if el not in s:
                s.add(el)
                yield el


&gt;&gt;&gt; list(unique(a))
[1, 4, 5, 6]
</snippet></ROW><ROW><id>12877954</id><snippet>set</snippet></ROW><ROW><id>12877954</id><snippet>list(set(a))
</snippet></ROW><ROW><id>12877966</id><snippet>import time        

def main(device_id):
    data = None
    second_to_send = device_id % 60
    while 1:
        time_now = time.localtime().tm_sec
        if time_now == 0:
            data = read_sensors()
        if time_now == second_to_send and data:
            send(data)
        time.sleep(1)
</snippet></ROW><ROW><id>12877966</id><snippet>read</snippet></ROW><ROW><id>12877966</id><snippet>while 1:</snippet></ROW><ROW><id>12877966</id><snippet>/etc/security/limits.conf</snippet></ROW><ROW><id>12877966</id><snippet>ulimit</snippet></ROW><ROW><id>12877966</id><snippet>open files</snippet></ROW><ROW><id>12877966</id><snippet>httpd</snippet></ROW><ROW><id>12877966</id><snippet>httpd soft nofile 20480
httpd hard nofile 20480
</snippet></ROW><ROW><id>12877966</id><snippet>cat /proc/sys/fs/file-max</snippet></ROW><ROW><id>12877966</id><snippet>$ cat /proc/sys/fs/file-max
801108
</snippet></ROW><ROW><id>12877966</id><snippet>sudo sysctl -w fs.file-max=n</snippet></ROW><ROW><id>12877966</id><snippet>/etc/sysctl.conf</snippet></ROW><ROW><id>12878030</id><snippet>order_to_index</snippet></ROW><ROW><id>12878099</id><snippet>Content-Encoding</snippet></ROW><ROW><id>12878099</id><snippet>.decode</snippet></ROW><ROW><id>12878099</id><snippet>encoded_string</snippet></ROW><ROW><id>12878099</id><snippet>encoding</snippet></ROW><ROW><id>12878099</id><snippet>utf-8</snippet></ROW><ROW><id>12878132</id><snippet>import re

def do_compress(old_ints, ints):
    """
    whether the ints of the current entry is the continuation of the previous
    entry
    returns a list of the indexes to compress, or [] or False when the current
    line is not part of an indexed sequence
    """
    return len(old_ints) == len(ints) and \
        [i for o, n, i in zip(old_ints, ints, xrange(len(ints))) if n - o == 1]

def basic_format(file_start, file_stop):
    return "[seq]{} .. {}".format(file_start, file_stop)


def compress(files, do_compress=do_compress, seq_format=basic_format):
    p = None
    old_ints = ()
    old_indexes = ()

    seq_and_files_list = [] 
        # list of file names or dictionaries that represent sequences:
        #   {start, stop, start_f, stop_f}

    for f in files:
        ints = ()
        indexes = ()

        m = p is not None and p.match(f) # False, None, or a valid match
        if m:
            ints = [int(x) for x in m.groups()]
            indexes = do_compress(old_ints, ints)

        # state variations
        if not indexes: # end of sequence or no current sequence
            p = re.compile( \
                '(\d+)'.join(re.escape(x) for x in re.split('\d+',f)) + '$')
            m = p.match(f)
            old_ints = [int(x) for x in m.groups()]
            old_indexes = ()
            seq_and_files_list.append(f)

        elif indexes == old_indexes: # the sequence continues
            seq_and_files_list[-1]['stop'] = old_ints = ints
            seq_and_files_list[-1]['stop_f'] = f
            old_indexes = indexes

        elif old_indexes == (): # sequence started on previous filename
            start_f = seq_and_files_list.pop()
            s = {'start': old_ints, 'stop': ints, \
                'start_f': start_f, 'stop_f': f}
            seq_and_files_list.append(s)

            old_ints = ints
            old_indexes = indexes

        else: # end of sequence, but still matches previous pattern
            old_ints = ints
            old_indexes = ()
            seq_and_files_list.append(f)

    return [ isinstance(f, dict) and seq_format(f['start_f'], f['stop_f']) or f 
        for f in seq_and_files_list ]


if __name__ == "__main__":
    import sys
    if len(sys.argv) == 1:
        import os
        lst = sorted(os.listdir('.'))
    elif sys.argv[1] in ("-h", "--help"):
        print """USAGE: {} [FILE ...]
compress the listing of the current directory, or the content of the files by
collapsing identical lines, except for a sequence number
"""
        sys.exit(0)
    else:
        import string
        lst = [string.rstrip(l, '\r\n') for f in sys.argv[1:] for l in open(f)])
    for x in compress(lst):
        print x
</snippet></ROW><ROW><id>12878132</id><snippet>bernard $ ./ls_sequence_compression.py given_data
[seq]filename_v003_0001.geo .. filename_v003_0007.geo
[seq]filename_v003_0032.geo .. filename_v003_0036.geo
[seq]testxxtest.0057.exr .. testxxtest.0063.exr
</snippet></ROW><ROW><id>12878132</id><snippet>01 - test8.txt
01 - test9.txt
01 - test10.txt
02 - test11.txt
02 - test12.txt
03 - test13.txt
04 - test13.txt
05 - test13.txt
06
07
08
09
10
</snippet></ROW><ROW><id>12878132</id><snippet>[seq]01 - test8.txt .. 01 - test10.txt
[seq]02 - test11.txt .. 02 - test12.txt
[seq]03 - test13.txt .. 05 - test13.txt
[seq]06 .. 10
</snippet></ROW><ROW><id>12878189</id><snippet>def some_function()
end
</snippet></ROW><ROW><id>12878514</id><snippet>if form.is_valid():
    newdoc = ImageUpload(imagefile = request.FILES['imagefile'])
    newdoc.save()
else:
    # do something visible here
</snippet></ROW><ROW><id>12878514</id><snippet>form.save()</snippet></ROW><ROW><id>12878514</id><snippet>ImageUpload</snippet></ROW><ROW><id>12878514</id><snippet>User</snippet></ROW><ROW><id>12878757</id><snippet>question = raw_input("Do you want to see my name, age or favorite fruit?\n")
while not question in answers:
    print "I have no answer for that, ask something else"
    question = raw_input("Please type 'name', 'age' or 'fruit'.\n")
</snippet></ROW><ROW><id>12878757</id><snippet>return askme(answers)
</snippet></ROW><ROW><id>12878787</id><snippet>/myproject
    mycode.py
    thirdpartymodule1.py
    thirdpartymodule2.py
    thirdpartymodule3/
        &lt;contents&gt;
</snippet></ROW><ROW><id>12878787</id><snippet>requirements.txt</snippet></ROW><ROW><id>12878787</id><snippet>pip</snippet></ROW><ROW><id>12878787</id><snippet>$ curl http://python-distribute.org/distribute_setup.py | python</snippet></ROW><ROW><id>12878787</id><snippet>$ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python</snippet></ROW><ROW><id>12878787</id><snippet>requests</snippet></ROW><ROW><id>12878787</id><snippet>twisted</snippet></ROW><ROW><id>12878787</id><snippet>boto</snippet></ROW><ROW><id>12878787</id><snippet>$ pip install &lt;list of package names&gt;</snippet></ROW><ROW><id>12878787</id><snippet>$ pip install requests twisted boto</snippet></ROW><ROW><id>12878787</id><snippet>import boto</snippet></ROW><ROW><id>12878839</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; items = [1, 2, 3, 'a', 2, 4, 'a']
&gt;&gt;&gt; OrderedDict.fromkeys(items).keys()
[1, 2, 3, 'a', 4]
</snippet></ROW><ROW><id>12878889</id><snippet>nm</snippet></ROW><ROW><id>12878889</id><snippet>nm -A</snippet></ROW><ROW><id>12878889</id><snippet>nm</snippet></ROW><ROW><id>12878889</id><snippet>nm -R</snippet></ROW><ROW><id>12878984</id><snippet>&gt;&gt;&gt; a = [1, 5, 2, 5, 1]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [k for k, c in Counter(a).iteritems() if c == 1]
[2]
</snippet></ROW><ROW><id>12879109</id><snippet>findall('channel/item')</snippet></ROW><ROW><id>12879109</id><snippet>import urllib2
from xml.etree import ElementTree as etree
#reddit parse
reddit_file = urllib2.urlopen('http://www.reddit.com/r/videos/top/.rss')
#convert to string:
reddit_data = reddit_file.read()
print reddit_data
#close file because we dont need it anymore:
reddit_file.close()

#entire feed
reddit_root = etree.fromstring(reddit_data)
item = reddit_root.findall('channel/item')
print item

reddit_feed=[]
for entry in item:   
    #get description, url, and thumbnail
    desc = entry.findtext('description')  
    reddit_feed.append([desc])
</snippet></ROW><ROW><id>12879193</id><snippet>import sys

def f_to_c(x):
    return (x - 32) * (5/9)

def c_to_f(x):
    return x * (9/5) + 32

num_from = float(input('Enter a number to convert: '))
unit_from = input('What units would you like to convert from? ')
unit_to = input('What units would you like to convert to? ')

if (unit_from, unit_to) == ('fahrenheit', 'celsius'):
    num_to = f_to_c(num_from)
elif (unit_from, unit_to) == ('celsius', 'fahrenheit'):
    num_to = c_to_f(num_from)
else:
    print('unsupported units')
    sys.exit(1)

print('{} degrees {} is {} degrees {}'
      .format(num_from, unit_from, num_to, unit_to))
</snippet></ROW><ROW><id>12879193</id><snippet>convert</snippet></ROW><ROW><id>12879193</id><snippet>Converter</snippet></ROW><ROW><id>12879200</id><snippet>print('{:20} | {:20} {:5.2f} | {:20} {:5.2f}'.format(title, states[statemin], minimum, states[statemax], maximum))
</snippet></ROW><ROW><id>12879200</id><snippet>{:20}</snippet></ROW><ROW><id>12879200</id><snippet>20</snippet></ROW><ROW><id>12879200</id><snippet>{:5.2f}</snippet></ROW><ROW><id>12879200</id><snippet>5</snippet></ROW><ROW><id>12879200</id><snippet>2</snippet></ROW><ROW><id>12879240</id><snippet>def calculate_result(items):
    items = tuple(int(i) for i in items)
    result = sum(items) / 16500.0
    result = result / len(items)
    return '%i' % round(result) + '%'

result0 = calculate_result(item.start for item in exams)
result1 = calculate_result(item.s1 for item in exams)
result2 = calculate_result(item.s2 for item in exams)
</snippet></ROW><ROW><id>12879258</id><snippet>File "C:\Python32\Python shit\csc242hw4\csc242hw4.py", line 55, in evaluate
    self.entry1.insert(END, self.new_problem())
</snippet></ROW><ROW><id>12879258</id><snippet>self.new_problem()</snippet></ROW><ROW><id>12879258</id><snippet>None</snippet></ROW><ROW><id>12879258</id><snippet>None</snippet></ROW><ROW><id>12879258</id><snippet>insert</snippet></ROW><ROW><id>12879258</id><snippet>self.new_problem()
</snippet></ROW><ROW><id>12879258</id><snippet>self.entry.insert</snippet></ROW><ROW><id>12879258</id><snippet>new_problem</snippet></ROW><ROW><id>12879423</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; x = [1, 2, 3, 2, 1, 8]
&gt;&gt;&gt; counts = Counter(x)
&gt;&gt;&gt; [item for item in x if counts[item] == 1]
[3, 8]
</snippet></ROW><ROW><id>12879462</id><snippet>from pylab import *
</snippet></ROW><ROW><id>12879485</id><snippet>http://wallbase.cc/user/login

POST /user/login HTTP/1.1
Host: wallbase.cc
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:15.0)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referer: http://wallbase.cc/home
Cookie: xxx
Content-Type: application/x-www-form-urlencoded
Content-Length: 74
usrname=d&amp;pass=d&amp;nopass_email=Type+in+your+e-mail+and+press+enter&amp;nopass=0
HTTP/1.1 200 OK
Content-Encoding: gzip
Vary: Accept-Encoding
Content-Type: text/html
Transfer-Encoding: chunked
Date: Sun, 14 Oct 2012 05:05:21 GMT
Server: lighttpd
</snippet></ROW><ROW><id>12879485</id><snippet>usrname=&lt;YOUR USER NAME&gt;&amp;pass=&lt;PASSWORD&gt;&amp;nopass_email=Type+in+your+e-mail+and+press+enter&amp;nopass=0
</snippet></ROW><ROW><id>12879485</id><snippet>mechanize</snippet></ROW><ROW><id>12879506</id><snippet>url_for</snippet></ROW><ROW><id>12879506</id><snippet>with app.test_request_context():
    print url_for('login', username='testuser')
</snippet></ROW><ROW><id>12879506</id><snippet>__getitem__</snippet></ROW><ROW><id>12879506</id><snippet>&gt;&gt;&gt; def myfunc():
...     pass
... 
&gt;&gt;&gt; myfunc.__getitem__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'function' object has no attribute '__getitem__'
&gt;&gt;&gt; 'myfunc'.__getitem__
&lt;method-wrapper '__getitem__' of str object at 0x10049fde0&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12879573</id><snippet>view_config</snippet></ROW><ROW><id>12879573</id><snippet>view_config</snippet></ROW><ROW><id>12879573</id><snippet>@view_config(route_name='favicon.ico')
def favicon_view(request):
    return _fi_response
</snippet></ROW><ROW><id>12879573</id><snippet>/{id}</snippet></ROW><ROW><id>12879591</id><snippet>request.content_length</snippet></ROW><ROW><id>12879591</id><snippet>request.body</snippet></ROW><ROW><id>12879591</id><snippet>request.params</snippet></ROW><ROW><id>12879591</id><snippet>request.POST</snippet></ROW><ROW><id>12879788</id><snippet>mydict.values()</snippet></ROW><ROW><id>12879788</id><snippet>mydict.items()</snippet></ROW><ROW><id>12879788</id><snippet>category = random.choice(list(mydict.keys())
item = random.choice(mydict[category]))
print category, item
</snippet></ROW><ROW><id>12879790</id><snippet>return
self.pos+offset</snippet></ROW><ROW><id>12879790</id><snippet>return (self.pos[0]+offset[0],
self.pos[1]+offset[1])</snippet></ROW><ROW><id>12879790</id><snippet>import pygame
from pygame.locals import *

pygame.init()
# not normally all global, but simplified demo
color_bg = Color("gray20")    
color_fg = Color("gray80")
clock = pygame.time.Clock()   

screen = pygame.display.set_mode((600,400))

class Entity(): 
    def __init__(self, pos=(300, 300)):
        self.pos = pos
        self.armR = (10, 10)
        self.armL = (-10, 10)
        self.body = (0, -20)
        self.head_offset = self.offset(self.body)

    def offset(self, offset):
        # get offset to draw, relative stickman's hips
        return (self.pos[0]+offset[0], self.pos[1]+offset[1])

    def render(self):        
        b = self.pos
        #pygame.draw.line( screen, color_fg, (10,10), (20,30) )

        o = self.offset( self.armL )
        pygame.draw.line( screen, color_fg, b, o )

        o = self.offset( self.armR )
        pygame.draw.line( screen, color_fg, b, o )

        o = self.offset( self.body )
        pygame.draw.line( screen, Color("red"), b, o )

class Game():
    def __init__(self):
        self.e = Entity()

    def draw(self):                
            screen.fill( color_bg )

            self.e.render()            

            pygame.display.flip()            
            clock.tick(80)

    def loop(self):
        done=False

        while not done:
            events = pygame.event.get()

            for event in events:
                if event.type == pygame.QUIT: done = True
                # event: keydown
                elif event.type == KEYDOWN:
                    if event.key == K_ESCAPE or event.key == K_SPACE: done = True
                elif event.type == MOUSEMOTION:
                    self.mouse_loc = event.pos

            self.draw()

g = Game()
g.loop()
</snippet></ROW><ROW><id>12879833</id><snippet>for each</snippet></ROW><ROW><id>12879833</id><snippet>question</snippet></ROW><ROW><id>12879833</id><snippet>{% for each in the_question %}
</snippet></ROW><ROW><id>12879833</id><snippet>{% for question in the_question %}
</snippet></ROW><ROW><id>12880082</id><snippet>def f(a, b=5, *c, **d): return a, b, c, d
</snippet></ROW><ROW><id>12880082</id><snippet>a</snippet></ROW><ROW><id>12880082</id><snippet>b</snippet></ROW><ROW><id>12880082</id><snippet>c</snippet></ROW><ROW><id>12880082</id><snippet>d</snippet></ROW><ROW><id>12880082</id><snippet>f(1)
f(a=1)
</snippet></ROW><ROW><id>12880082</id><snippet>1, 5, (), {}
</snippet></ROW><ROW><id>12880082</id><snippet>f(a=5, foo=12) or f(5, foo=12) # -&gt; 5, 5, (), {'foo': 12}
f(1, 2, 3) # -&gt; 1, 2, (3,), {}
</snippet></ROW><ROW><id>12880082</id><snippet>a</snippet></ROW><ROW><id>12880082</id><snippet>b</snippet></ROW><ROW><id>12880082</id><snippet>c</snippet></ROW><ROW><id>12880082</id><snippet>f(b=90) # no value for a
f(12, a=90) # two values for a
</snippet></ROW><ROW><id>12880271</id><snippet>.time</snippet></ROW><ROW><id>12880271</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = datetime.datetime(2012, 10, 15, 1, 0, 0)
&gt;&gt;&gt; a.time
&lt;built-in method time of datetime.datetime object at 0x10049f508&gt;
&gt;&gt;&gt; a.time()
datetime.time(1, 0)
</snippet></ROW><ROW><id>12880271</id><snippet>if self.start.time() &lt; start.time()</snippet></ROW><ROW><id>12880343</id><snippet>myprint</snippet></ROW><ROW><id>12880343</id><snippet>revprint</snippet></ROW><ROW><id>12880343</id><snippet>revprint</snippet></ROW><ROW><id>12880343</id><snippet>def revprint(root,level):
    if root:
        if not level:
            print root.data,
        else:
            revprint(root.right,level-1)
            revprint(root.left,level-1)
</snippet></ROW><ROW><id>12880404</id><snippet>__getitem__</snippet></ROW><ROW><id>12880404</id><snippet>__getitem__</snippet></ROW><ROW><id>12880404</id><snippet>&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; img = Image.open("images/rock.png")
&gt;&gt;&gt; d1 = img.load()
&gt;&gt;&gt; dir (d1)
[]
&gt;&gt;&gt; d1.__getitem__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'PixelAccess' object has no attribute '__getitem__'
&gt;&gt;&gt; # However, this works:
... 
&gt;&gt;&gt; d1[32,32]
(255, 255, 255, 255)
&gt;&gt;&gt; d1.__getitem__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'PixelAccess' object has no attribute '__getitem__'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12880404</id><snippet>PixelAccess.__getitem__</snippet></ROW><ROW><id>12880404</id><snippet>object</snippet></ROW><ROW><id>12880404</id><snippet>__getattribute__</snippet></ROW><ROW><id>12880404</id><snippet>&gt;&gt;&gt; dir(d1)
[]
&gt;&gt;&gt; getattr(d1, "__getitem__")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'PixelAccess' object has no attribute '__getitem__'
&gt;&gt;&gt; object.__getattribute__(d1, "__getitem__")
&lt;method-wrapper '__getitem__' of PixelAccess object at 0x7f94e6f37170&gt;
&gt;&gt;&gt; # there is our man
... 
&gt;&gt;&gt; getattr(d1, "__getitem__")
&lt;method-wrapper '__getitem__' of PixelAccess object at 0x7f94e6f37170&gt;
&gt;&gt;&gt; # and this works now
... 
&gt;&gt;&gt; dir(d1)
['__class__', '__delattr__', '__delitem__', '__doc__', '__format__', '__getattribute__', '__getitem__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12880404</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>12880519</id><snippet>    ax.legend(ncol=3, numpoints=1)
</snippet></ROW><ROW><id>12880519</id><snippet>numpoints</snippet></ROW><ROW><id>12880519</id><snippet>xytext</snippet></ROW><ROW><id>12880519</id><snippet>    for i in range(len(xData2)):
    text='['+str(int(xData2[i]))+','+str(int(yData2[i]))+','+str(int(zData2[i]))+']'
    x2, y2, _ = proj3d.proj_transform(xData2[i],yData2[i],zData2[i], ax.get_proj())
    if i==4:
        label = pylab.annotate(text,
                       xycoords='data',
                       xy = (x2, y2), xytext = (0, -50),
                       textcoords = 'offset points', ha = 'right', va = 'bottom',
                       bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
                       arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'))
    elif i==6:
        label = pylab.annotate(text,
                           xycoords='data',
                           xy = (x2, y2), xytext = (-40, 0),
                           textcoords = 'offset points', ha = 'right', va = 'bottom',
                           bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
                           arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'))
    else:
        label = pylab.annotate(text,
                           xycoords='data',
                           xy = (x2, y2), xytext = (-20, 10),
                           textcoords = 'offset points', ha = 'right', va = 'bottom',
                           bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
                           arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'))
</snippet></ROW><ROW><id>12880847</id><snippet>__init__</snippet></ROW><ROW><id>12880847</id><snippet>list</snippet></ROW><ROW><id>12880847</id><snippet>__new__</snippet></ROW><ROW><id>12880847</id><snippet>class Environment(object):
    def __init__(self, rows, columns):
        self.env = [[None for column in range(columns)] for row in range(rows) ] 

    def addElement(self, row, column):
        self.env[row][column] = 0
</snippet></ROW><ROW><id>12880847</id><snippet>myEnv = createEnvironment(6,6)</snippet></ROW><ROW><id>12880847</id><snippet>__getitem__</snippet></ROW><ROW><id>12880847</id><snippet>__setitem__</snippet></ROW><ROW><id>12880847</id><snippet>def __getitem__(self, row, column):
    return self.env[row][column]
</snippet></ROW><ROW><id>12880847</id><snippet>some_environment[5, 6]</snippet></ROW><ROW><id>12880891</id><snippet>continue_game</snippet></ROW><ROW><id>12880891</id><snippet>def continue_game():
    while True:
        user_continue = raw_input("Would you like to play again? Y/N: ").upper()
        if user_continue in ["Y", "YES", "N", "NO"]:
            return user_continue in ["Y", "YES"]
        else:
            print "Press Y or N"

if continue_game():
    print "continue"
else:
    print "exit"
</snippet></ROW><ROW><id>12880891</id><snippet>continue_game = True
</snippet></ROW><ROW><id>12880891</id><snippet>while continue_game == True:
</snippet></ROW><ROW><id>12880891</id><snippet>while continue_game():
</snippet></ROW><ROW><id>12881273</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; hexstring = "20d8a7d986d98a20d985d8a720d8a7d8b9d8b1d98120d8b4d986d98820d98ad8b9d986d98a20d8a7d984d8acd986d8a7d8ad20d8a7d984d8b9d8b3d983d8b1d98a20d984d98a20d8add8b2d8a820d8a7d984d8afd8b9d988d8a920"
&gt;&gt;&gt; print binascii.unhexlify(hexstring.encode("utf-8")).decode("utf-8")
 اني ما اعرف شنو يعني الجناح العسكري لي حزب الدعوة 
</snippet></ROW><ROW><id>12881326</id><snippet>aegir</snippet></ROW><ROW><id>12881412</id><snippet>iteritems</snippet></ROW><ROW><id>12881412</id><snippet>format</snippet></ROW><ROW><id>12881412</id><snippet>'loader:\n {0}:{1}\n'.format(*slownik.iteritems())
</snippet></ROW><ROW><id>12881412</id><snippet>'loader:\n' + ''.join(' {0}:{1}\n'.format(k, v)
                      for k, v in slownik.iteritems())
</snippet></ROW><ROW><id>12881458</id><snippet>url(r'^contact/', include('form_handle_app.urls')),
</snippet></ROW><ROW><id>12881458</id><snippet>uform_handle_app.urls</snippet></ROW><ROW><id>12881458</id><snippet>url(r'^$', 'contact'),</snippet></ROW><ROW><id>12881636</id><snippet>eval</snippet></ROW><ROW><id>12881636</id><snippet>class Foo(object):
    pass

class Thing(object):
    pass

# List of interesting classes
classes = [Foo, Thing]

# Construct a dictionary where the key is the Classes __name__ attribute
classByNames = {cls.__name__:cls for cls in classes}

# Example usage
cName = 'Foo'
if cName in classByNames:
    inst = classByNames[cName]()
    print(inst) # &lt;__main__.Foo object at ...&gt;
else:
    print("Unknown class %s" % cName)
</snippet></ROW><ROW><id>12881894</id><snippet>w = b.MainWindow
</snippet></ROW><ROW><id>12881894</id><snippet>h = w.Hwnd
</snippet></ROW><ROW><id>12881894</id><snippet>import win32gui
win32gui.SetForegroundWindow(h)
</snippet></ROW><ROW><id>12882176</id><snippet>wim@wim-zenbook:~$ echo "print __file__" &gt; /tmp/spam.py
wim@wim-zenbook:~$ python /tmp/spam.py 
/tmp/spam.py
wim@wim-zenbook:~$ cd /tmp
wim@wim-zenbook:/tmp$ python spam.py
spam.py
</snippet></ROW><ROW><id>12882176</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>12882176</id><snippet>wim@wim-zenbook:~$ cat /tmp/spam.py
import os
print __file__
print os.path.dirname(__file__)
print os.path.dirname(os.path.abspath(__file__))
wim@wim-zenbook:~$ python /tmp/spam.py
/tmp/spam.py
/tmp
/tmp
wim@wim-zenbook:~$ cd /tmp
wim@wim-zenbook:/tmp$ python /tmp/spam.py
/tmp/spam.py
/tmp
/tmp
wim@wim-zenbook:/tmp$ python spam.py
spam.py

/tmp
</snippet></ROW><ROW><id>12882271</id><snippet>txtProgress.update_idletasks()</snippet></ROW><ROW><id>12882328</id><snippet>class Foo(object):
    def aninstancemethod(self):
        pass

    @classmethod
    def aclassmethod(cls):
        pass

    @staticmethod
    def astaticmethod():
        pass
</snippet></ROW><ROW><id>12882659</id><snippet>%</snippet></ROW><ROW><id>12882659</id><snippet>sql = "select count(*) from sbox_trig where date &gt; CURDATE() and name ='bw109nocd%%2Ezip'"
</snippet></ROW><ROW><id>12882659</id><snippet>%2E</snippet></ROW><ROW><id>12882698</id><snippet>some_func(x)</snippet></ROW><ROW><id>12882698</id><snippet>None</snippet></ROW><ROW><id>12882698</id><snippet>None</snippet></ROW><ROW><id>12882698</id><snippet>some_func(x)</snippet></ROW><ROW><id>12882698</id><snippet>None</snippet></ROW><ROW><id>12882698</id><snippet>some_func</snippet></ROW><ROW><id>12882698</id><snippet>y = some_func(x)
if y is not None:
    return y - .2
else:
    return None
</snippet></ROW><ROW><id>12882698</id><snippet>None</snippet></ROW><ROW><id>12882918</id><snippet>import matplotlib.pyplot as plt
import numpy as np
sin = np.sin
cos = np.cos
pi = np.pi

def delete(event):
    artist = event.artist
    artist.remove()
    event.canvas.draw()

fig = plt.figure()
ax = fig.add_subplot(111)

x = np.linspace(0, 2*pi, 50)
y = 2*sin(x)
z = 2*cos(x)
line1, = ax.plot(x,y)
line2, = ax.plot(x,z)
for artist in [line1, line2]:
    artist.set_picker(5)
fig.canvas.mpl_connect('pick_event', delete)

plt.show()
</snippet></ROW><ROW><id>12883025</id><snippet>numpy.fromfunction(function, shape)</snippet></ROW><ROW><id>12883025</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.fromfunction(lambda i,j: i+j, (6,6))
&gt;&gt;&gt; print arr
[[  0.   1.   2.   3.   4.   5.]
 [  1.   2.   3.   4.   5.   6.]
 [  2.   3.   4.   5.   6.   7.]
 [  3.   4.   5.   6.   7.   8.]
 [  4.   5.   6.   7.   8.   9.]
 [  5.   6.   7.   8.   9.  10.]]
</snippet></ROW><ROW><id>12883025</id><snippet>memmap</snippet></ROW><ROW><id>12883120</id><snippet>lambda: pass
</snippet></ROW><ROW><id>12883120</id><snippet>def f():
   return pass
</snippet></ROW><ROW><id>12883120</id><snippet>SyntaxError</snippet></ROW><ROW><id>12883240</id><snippet>self</snippet></ROW><ROW><id>12883240</id><snippet>Par</snippet></ROW><ROW><id>12883240</id><snippet>self.__dict__</snippet></ROW><ROW><id>12883240</id><snippet>self</snippet></ROW><ROW><id>12883240</id><snippet>self.fruit = chip
</snippet></ROW><ROW><id>12883240</id><snippet>self.__dict__</snippet></ROW><ROW><id>12883240</id><snippet>{'fruit':chip}</snippet></ROW><ROW><id>12883240</id><snippet>def __init__(self, chip, fig):
</snippet></ROW><ROW><id>12883240</id><snippet>Par</snippet></ROW><ROW><id>12883240</id><snippet>chip</snippet></ROW><ROW><id>12883240</id><snippet>fig</snippet></ROW><ROW><id>12883240</id><snippet>self</snippet></ROW><ROW><id>12883240</id><snippet>__init__</snippet></ROW><ROW><id>12883240</id><snippet>__init__</snippet></ROW><ROW><id>12883240</id><snippet>chip</snippet></ROW><ROW><id>12883240</id><snippet>fig</snippet></ROW><ROW><id>12883240</id><snippet>self.fruit = chip</snippet></ROW><ROW><id>12883240</id><snippet>fruit</snippet></ROW><ROW><id>12883240</id><snippet>chip</snippet></ROW><ROW><id>12883240</id><snippet>class Par(object):
    def __init__(self, chip, fig):
        self.fruit = chip
        self.fig = fig
        self.pear = 10

# 99 is being passed in as the value of `chip`
# 'bar' is being passed in as the value of `fig`    
par = Par(99,'bar') 
print(par.__dict__)
</snippet></ROW><ROW><id>12883240</id><snippet>{'fruit': 99, 'pear': 10, 'fig': 'bar'}
</snippet></ROW><ROW><id>12883240</id><snippet>par.fruit</snippet></ROW><ROW><id>12883240</id><snippet>par.__dict__['fruit']</snippet></ROW><ROW><id>12883240</id><snippet>par.__dict__</snippet></ROW><ROW><id>12883331</id><snippet>distinct</snippet></ROW><ROW><id>12883331</id><snippet>find</snippet></ROW><ROW><id>12883331</id><snippet>db.mycoll.find({"category": "movie"}).distinct("tags");
</snippet></ROW><ROW><id>12883382</id><snippet>import re

soup.find('a', href=re.compile('^http://get.cm/get'))['href']
</snippet></ROW><ROW><id>12883382</id><snippet>variable=soup.find('a', href=re.compile('^http://get.cm/get'))['href']
</snippet></ROW><ROW><id>12883382</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup
import re

request = urllib2.Request("http://download.cyanogenmod.com/?device=p970")
response = urllib2.urlopen(request)
soup = BeautifulSoup(response)
variable=soup.find('a', href=re.compile('^http://get.cm/get'))['href']
print variable

&gt;&gt;&gt; 
http://get.cm/get/4jj
</snippet></ROW><ROW><id>12883390</id><snippet>maxsplit</snippet></ROW><ROW><id>12883390</id><snippet>&gt;&gt;&gt; s = 'word1 word2 word3'
&gt;&gt;&gt; s.split(' ',1)
['word1', 'word2 word3']
&gt;&gt;&gt; s.split(' ',1)[1]
'word2 word3'
</snippet></ROW><ROW><id>12883499</id><snippet>docutils.parsers.rst</snippet></ROW><ROW><id>12883499</id><snippet>docutils/examples.py</snippet></ROW><ROW><id>12883499</id><snippet>internals()</snippet></ROW><ROW><id>12883685</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import PolyCollection
import matplotlib as mpl

# Generate data. In this case, we'll make a bunch of center-points and generate
# verticies by subtracting random offsets from those center-points
numpoly, numverts = 100, 4
centers = 100 * (np.random.random((numpoly,2)) - 0.5)
offsets = 10 * (np.random.random((numverts,numpoly,2)) - 0.5)
verts = centers + offsets
verts = np.swapaxes(verts, 0, 1)

# In your case, "verts" might be something like:
# verts = zip(zip(lon1, lat1), zip(lon2, lat2), ...)
# If "data" in your case is a numpy array, there are cleaner ways to reorder
# things to suit.

# Color scalar...
# If you have rgb values in your "colorval" array, you could just pass them
# in as "facecolors=colorval" when you create the PolyCollection
z = np.random.random(numpoly) * 500

fig, ax = plt.subplots()

# Make the collection and add it to the plot.
coll = PolyCollection(verts, array=z, cmap=mpl.cm.jet, edgecolors='none')
ax.add_collection(coll)
ax.autoscale_view()

# Add a colorbar for the PolyCollection
fig.colorbar(coll, ax=ax)
plt.show()
</snippet></ROW><ROW><id>12884330</id><snippet>max</snippet></ROW><ROW><id>12884330</id><snippet>max(arr)</snippet></ROW><ROW><id>12884330</id><snippet>a[1]</snippet></ROW><ROW><id>12884330</id><snippet>a[n]</snippet></ROW><ROW><id>12884330</id><snippet>n+1</snippet></ROW><ROW><id>12884330</id><snippet>max1</snippet></ROW><ROW><id>12884330</id><snippet>max2</snippet></ROW><ROW><id>12884330</id><snippet>def minmax(arr, i, j):
    if i==j:
        return arr[i], arr[i]
    elif i==j-1:
        if arr[i] &lt; arr[j]:
            return arr[i], arr[j]
        else:
            return arr[j], arr[i]
    else:
        mid = (i+j)//2
        min1, max1 = minmax(arr, i, mid)
        min2, max2 = minmax(arr, mid+1, j)
        if min2 &lt; min1: min1 = min2
        if max2 &gt; max1: max1 = max2
        return min1, max1
</snippet></ROW><ROW><id>12884412</id><snippet>fig = plt.figure(figsize=(16,8))
ax = [fig.add_subplot(121),fig.add_subplot(122)]

ax[0].things
ax[1].things

plt.show()

#show the button panel
</snippet></ROW><ROW><id>12884690</id><snippet>FacesView</snippet></ROW><ROW><id>12884690</id><snippet>from random import randint
from PySide.QtGui import QWidget, QPushButton, QVBoxLayout, QApplication
from facesview import FacesView

class Window(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.list = FacesView(self)
        self.button = QPushButton('Test', self)
        self.button.clicked.connect(self.handleButton)
        layout = QVBoxLayout(self)
        layout.addWidget(self.list)
        layout.addWidget(self.button)

    def handleButton(self):
        labels = []
        self.list.model().setRowCount(0)
        for row in range(10):
            labels.append(randint(0, 3))
            text = 'Item(%d) - Cluster(%d)' % (row, labels[-1])
            self.list.addItem(text, 'icon.png')
        self.list.updateFaceClusters(labels)

if __name__ == '__main__':

    import sys
    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12885031</id><snippet>import time

t = 1360454400
print time.strftime("%m/%d/%y", time.gmtime(t))
</snippet></ROW><ROW><id>12885031</id><snippet>t = time.gmtime(t)
print "%d/%d/%2d" % (t.tm_mon, t.tm_mday, t.tm_year % 100)
</snippet></ROW><ROW><id>12885042</id><snippet>def rand:
 import random
 from random import randint
 iter = 10
 segSize = 1/float(iter)
 for i in range(iter):
         segMin = float(i) * segSize
         point = segMin + (random.normalvariate(7.5,1) * segSize)
         pointValue = (point * (14 - 5)) + 4
         print point
         print pointValue
</snippet></ROW><ROW><id>12885042</id><snippet>0.686848045493
10.1816324094
0.871425699273
11.8428312935
1.08794202088
13.7914781879
1.08502172623
13.7651955361
1.24462345735
15.2016111161
1.10687801576
13.9619021418
1.1394488663
14.2550397967
1.37407532844
16.3666779559
1.54666717385
17.9200045647
1.6465869841
18.8192828569
</snippet></ROW><ROW><id>12885179</id><snippet>print_nested</snippet></ROW><ROW><id>12885179</id><snippet>print_nested</snippet></ROW><ROW><id>12885179</id><snippet>spam</snippet></ROW><ROW><id>12885179</id><snippet>spam cheese</snippet></ROW><ROW><id>12885179</id><snippet>get_children</snippet></ROW><ROW><id>12885179</id><snippet>spam cheese</snippet></ROW><ROW><id>12885179</id><snippet>comments</snippet></ROW><ROW><id>12885179</id><snippet>spam cheese monty</snippet></ROW><ROW><id>12885179</id><snippet>print_nested</snippet></ROW><ROW><id>12885179</id><snippet>get_children</snippet></ROW><ROW><id>12885179</id><snippet>class Comment(object):
    def __init__(self, pk, parent_pk, content):
        self.pk = pk
        self.parent_pk = parent_pk
        self.content = content

    def depth(self):
        depth = 0
        comment = self
        # this is just a recursive lookup converted to iterative
        while comment.parent_pk:
            # replace the array indexing with traversing up a tree
            comment = comments[comment.parent_pk - 1]
            depth += 1
        return depth

def print_nested(comments):
    for comment in comments:
        print comment.depth() * 2 * " " + comment.content

comments = [
    Comment(1, None, "foo"),
    Comment(2, 1, "foo bar"),
    Comment(3, None, "spam"),
    Comment(4, 3, "spam cheese"),
    Comment(5, 4, "spam cheese monty"),
    Comment(6, None, "muse"),
]

print_nested(comments)
</snippet></ROW><ROW><id>12885182</id><snippet>__doc__</snippet></ROW><ROW><id>12885296</id><snippet>t1 = threading.Thread(target=record)
t1.daemon = True
t1.start()

t2 = threading.Thread(target=ftp)
t2.daemon = True
t2.start()
</snippet></ROW><ROW><id>12885408</id><snippet>opener</snippet></ROW><ROW><id>12885408</id><snippet>def opener(user_agent):
    #Process Hadlers
    opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    opener.addheaders=[
                    ('User-Agent', user_agent),
                # snip...
                ]
    return opener
</snippet></ROW><ROW><id>12885408</id><snippet># this could be nicer, but demonstrates the point
openers = [opener(agent) for agent in open('your_f_path')]
</snippet></ROW><ROW><id>12885408</id><snippet>choice</snippet></ROW><ROW><id>12885408</id><snippet>self.opener = urlopener.opener()</snippet></ROW><ROW><id>12885408</id><snippet>Crawler</snippet></ROW><ROW><id>12885408</id><snippet>from random import choice
use_to_open = choice(openers)
</snippet></ROW><ROW><id>12885464</id><snippet>where</snippet></ROW><ROW><id>12885464</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; data = numpy.array([0.0, 35., 2., 44., numpy.pi, numpy.sqrt(2.)])
&gt;&gt;&gt; data
array([  0.        ,  35.        ,   2.        ,  44.        ,
         3.14159265,   1.41421356])
&gt;&gt;&gt; numpy.where(data &lt; 4)
(array([0, 2, 4, 5]),)
&gt;&gt;&gt; numpy.where(data &gt; 44.)
(array([], dtype=int64),)
&gt;&gt;&gt; numpy.where(data &gt;= 44.)
(array([3]),)
</snippet></ROW><ROW><id>12885464</id><snippet>&gt;&gt;&gt; numpy.where(data &lt; 4)[0]
array([0, 2, 4, 5])
</snippet></ROW><ROW><id>12885464</id><snippet>data</snippet></ROW><ROW><id>12885464</id><snippet>&gt;&gt;&gt; data[numpy.where(data &lt; 4)[0]]
array([ 0.        ,  2.        ,  3.14159265,  1.41421356])
</snippet></ROW><ROW><id>12885564</id><snippet>def my_function(*passed_arguments):
    query = Session.query(t).filter(t.column_c.in_(passed_arguments)).all()
    # ... do some work with query
    return some_value
</snippet></ROW><ROW><id>12885564</id><snippet>my_function(123, 456, 789)
</snippet></ROW><ROW><id>12885813</id><snippet>import ast

ls="['a','b','c']"

ast.literal_eval(ls)
Out[178]: ['a', 'b', 'c']
</snippet></ROW><ROW><id>12885813</id><snippet>In [195]: ast.literal_eval(out.split(':')[1])
Out[195]: [u'Error 1', u'Another error']
</snippet></ROW><ROW><id>12886177</id><snippet>'</snippet></ROW><ROW><id>12886177</id><snippet>"</snippet></ROW><ROW><id>12886177</id><snippet>"</snippet></ROW><ROW><id>12886177</id><snippet>POST / HTTP/1.0
Content-Length: 71

{"jsonrpc": "2.0", "params": [3, 6], "id": "er5qtdbz", "method": "pow"}
</snippet></ROW><ROW><id>12886177</id><snippet>import json
try:
    from urllib.request import urlopen
except ImportError: # Python&lt;3
    from urllib2 import urlopen

req = {"jsonrpc":"2.0","method":"add","params":[3,6],"id":0}
req_data = json.dumps(req).encode('utf-8')
u = urlopen('http://localhost:8080/', req_data)
print(u.read())
</snippet></ROW><ROW><id>12886184</id><snippet>a_list</snippet></ROW><ROW><id>12886184</id><snippet>list_a = [e['a'] for e in a_list]
set_b = {e['b'] for e in a_list}
</snippet></ROW><ROW><id>12886184</id><snippet>set_b</snippet></ROW><ROW><id>12886184</id><snippet>list_b</snippet></ROW><ROW><id>12886184</id><snippet>a_list</snippet></ROW><ROW><id>12886184</id><snippet>list_a = []
set_b = set()
for e in a_list:
    list_a.append(e['a'])
    set_b.add(e['b'])
</snippet></ROW><ROW><id>12886431</id><snippet>urls.py</snippet></ROW><ROW><id>12886431</id><snippet>urls.py</snippet></ROW><ROW><id>12886431</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

# ... the rest of your URLconf goes here ...

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>12886567</id><snippet>once</snippet></ROW><ROW><id>12886567</id><snippet>more</snippet></ROW><ROW><id>12886567</id><snippet>once</snippet></ROW><ROW><id>12886567</id><snippet>once</snippet></ROW><ROW><id>12886567</id><snippet>more</snippet></ROW><ROW><id>12886567</id><snippet>once</snippet></ROW><ROW><id>12886567</id><snippet>once</snippet></ROW><ROW><id>12886567</id><snippet>In [49]: f([1,4,6,7,3,2,4,5,7,5,6])
Out[49]: [1, 3, 2]
</snippet></ROW><ROW><id>12886652</id><snippet>dict</snippet></ROW><ROW><id>12886652</id><snippet>lst = [
    ('foo', 1),
    ('bar', 2),
    ('foo', 10)
]

print dict(lst) # {'foo': 10, 'bar': 2}
</snippet></ROW><ROW><id>12886774</id><snippet>import subprocess

process = subprocess.Popen("my command", shell=True,
                           stdout=None, # print to terminal
                           stderr=subprocess.PIPE)
duplicator = subprocess.Popen("tee /dev/stderr", shell=True, # duplicate input stream
                              stdin=process.stderr, 
                              stdout=subprocess.PIPE, # catch error stream of first process
                              stderr=None) # print to terminal
error_stream = duplicator.stdout
print('error_stream.read() = ' + error_stream.read())
</snippet></ROW><ROW><id>12886818</id><snippet>zipfile</snippet></ROW><ROW><id>12886818</id><snippet>import zipfile,os.path
def unzip(source_filename, dest_dir):
    with zipfile.ZipFile(source_filename) as zf:
        for member in zf.infolist():
            # Path traversal defense copied from
            # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
            words = member.filename.split('/')
            path = dest_dir
            for word in words[:-1]:
                drive, word = os.path.splitdrive(word)
                head, word = os.path.split(word)
                if word in (os.curdir, os.pardir, ''): continue
                path = os.path.join(path, word)
            zf.extract(member, path)
</snippet></ROW><ROW><id>12886818</id><snippet>extractall</snippet></ROW><ROW><id>12886926</id><snippet>try:
    from urllib2 import urlopen
except ImportError:
    from urllib.request import urlopen # py3k

from bs4 import BeautifulSoup # $ pip install beautifulsoup4

url = "http://www.cnn.com/2012/10/14/us/skydiver-record-attempt/index.html?hpt=hp_t1"
soup = BeautifulSoup(urlopen(url))
print(soup.prettify())
</snippet></ROW><ROW><id>12886981</id><snippet>try:
    fd, tmp = tempfile.mkstemp()
    with os.fdopen(tup[0], 'w') as out:
        out.write(input_file.read())
    wb = xlrd.open_workbook(tmp)
    ...  # do what you have to do
finally:
    os.unlink(tmp)  # delete the temp file no matter what
</snippet></ROW><ROW><id>12886981</id><snippet>wb = xlrd.open_workbook(input_file.name, file_contents=input_file.read())
</snippet></ROW><ROW><id>12887154</id><snippet>name = models.CharField(max_length=256, default=None)
</snippet></ROW><ROW><id>12887190</id><snippet>import re

pattern = "[- ]+"
re.sub(pattern, " ", your_string)
</snippet></ROW><ROW><id>12887201</id><snippet>    cj = cookielib.LWPCookieJar()
    br.set_cookiejar(cj)

    ...

    br.follow_link("www.address1.com")
    refe= br.geturl()
    req = urllib2.Request(url='www.site2.com')
    req.add_header('Referer', refe)
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj) )
    f = opener.open(req) 
    htm = f.read()
    print "\n\n", htm
</snippet></ROW><ROW><id>12887314</id><snippet>[0]</snippet></ROW><ROW><id>12887314</id><snippet>["children"]</snippet></ROW><ROW><id>12887314</id><snippet>[0]</snippet></ROW><ROW><id>12887314</id><snippet>reddit_posts = json.loads(f.read().decode("utf-8"))["data"]["children"]
</snippet></ROW><ROW><id>12887314</id><snippet>for post in reddit_posts:
    print post["data"]["media"]["oembed"]["url"]
</snippet></ROW><ROW><id>12887394</id><snippet>split_build_descriptor = buildDescriptor.split("#")
</snippet></ROW><ROW><id>12887394</id><snippet>if len(split_build_descriptor) == 1:
    buildfile = split_build_descriptor[0]
    target = ''
elif len(split_build_descriptor) == 2:
    buildfile, target = split_build_descriptor
else:
    pass  # handle error; there's two #s
</snippet></ROW><ROW><id>12887420</id><snippet>class Dict:

  def __init__(self):
    ...
    self.isSaveRequested = False
    self.timedSaveToIni()

  def timedSaveToIni(self):
    threading.Timer(5.0, self.timedSaveToIni).start()
    if self.isSaveRequested:
      self.saveToIni()
      self.isSaveRequested = False


  def __setattr__(self, key, value):
    self.__dict__['d'][key] = value
    ...
    self.isSaveRequested = True

  def saveToInit()
    ...
</snippet></ROW><ROW><id>12887704</id><snippet>GtkTreeSelection</snippet></ROW><ROW><id>12887704</id><snippet>gtk_tree_view_get_selection</snippet></ROW><ROW><id>12887704</id><snippet>GtkTreeIter</snippet></ROW><ROW><id>12887704</id><snippet>gtk_tree_selection_get_selected</snippet></ROW><ROW><id>12887704</id><snippet>gtk_tree_model_iter_next/previous</snippet></ROW><ROW><id>12887704</id><snippet>gtk_tree_selection_select_iter</snippet></ROW><ROW><id>12887704</id><snippet>static void on_down(GtkWidget *btn, gpointer user_data)
{
    GtkTreeSelection *sel = GTK_TREE_SELECTION(user_data);
    GtkTreeModel *model;
    GtkTreeIter current;

    gtk_tree_selection_get_selected(sel, &amp;model, &amp;current);
    if (gtk_tree_model_iter_next(model, &amp;current))
        gtk_tree_selection_select_iter(sel, &amp;current);
}
</snippet></ROW><ROW><id>12887704</id><snippet>TreeView = Gtk.TreeView()
list = Gtk.ListStore(str, str)
TreeView.set_model(list)

def down(widget):
    selection = TreeView.get_selection()
    sel = selection.get_selected()
    if not sel[1] == None:
        next = list.iter_next(sel[1])
        if next:
            selection.select_iter(next)
</snippet></ROW><ROW><id>12887820</id><snippet>~/coding:$ python divbug2.py 
1-1
10
</snippet></ROW><ROW><id>12887820</id><snippet>-1</snippet></ROW><ROW><id>12887820</id><snippet>-1</snippet></ROW><ROW><id>12887820</id><snippet>-1</snippet></ROW><ROW><id>12887820</id><snippet>        i-=1
        res._addFirst(i)
        if i==-1: i=0
</snippet></ROW><ROW><id>12887820</id><snippet>i == -1</snippet></ROW><ROW><id>12887820</id><snippet>res</snippet></ROW><ROW><id>12887820</id><snippet>        i-=1
        if i==-1: i=0
        res._addFirst(i)
</snippet></ROW><ROW><id>12887820</id><snippet>~/coding:$ python divbug2.py 
10
10
</snippet></ROW><ROW><id>12887820</id><snippet>.copy()</snippet></ROW><ROW><id>12887820</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>12887820</id><snippet>&gt;&gt;&gt;&gt; all(int(str(LongNum(x)._simple_div(LongNum(y)))) == x/y for x in range(2000) for y in range(1, 2000))
True
</snippet></ROW><ROW><id>12887889</id><snippet>media=null</snippet></ROW><ROW><id>12887889</id><snippet>post['data']['media']</snippet></ROW><ROW><id>12887889</id><snippet>oembed</snippet></ROW><ROW><id>12887889</id><snippet>url</snippet></ROW><ROW><id>12887889</id><snippet>     {
        "kind" : "t3",
        "data" : {
           "downs" : 24050,
           "link_flair_text" : null,
           "media" : null,
           "url" : "http://youtu.be/aNJgX3qH148?t=4m20s",
           "link_flair_css_class" : null,
           "id" : "rymif",
           "edited" : false,
           "num_reports" : null,
           "created_utc" : 1333847562,
           "banned_by" : null,
           "name" : "t3_rymif",
           "subreddit" : "videos",
           "title" : "An awesome young man",
           "author_flair_text" : null,
           "is_self" : false,
           "author" : "Lostinfrustration",
           "media_embed" : {},
           "permalink" : "/r/videos/comments/rymif/an_awesome_young_man/",
           "author_flair_css_class" : null,
           "selftext" : "",
           "domain" : "youtu.be",
           "num_comments" : 2260,
           "likes" : null,
           "clicked" : false,
           "thumbnail" : "http://a.thumbs.redditmedia.com/xUDtCtRFDRAP5gQr.jpg",
           "saved" : false,
           "ups" : 32312,
           "subreddit_id" : "t5_2qh1e",
           "approved_by" : null,
           "score" : 8262,
           "selftext_html" : null,
           "created" : 1333847562,
           "hidden" : false,
           "over_18" : false
        }
     },
</snippet></ROW><ROW><id>12887889</id><snippet>urlopen</snippet></ROW><ROW><id>12887889</id><snippet>IOError</snippet></ROW><ROW><id>12887889</id><snippet>"oembed" in post['data']['media']</snippet></ROW><ROW><id>12887889</id><snippet>post['data']['media']['oembed']['url']</snippet></ROW><ROW><id>12887889</id><snippet>oembed</snippet></ROW><ROW><id>12887889</id><snippet>url</snippet></ROW><ROW><id>12887889</id><snippet>for post in reddit_posts:
    if isinstance(post['data']['media'], dict) \
           and "oembed" in post['data']['media'] \
           and isinstance(post['data']['media']['oembed'], dict) \
           and 'url' in post['data']['media']['oembed']:
        print post["data"]["media"]["oembed"]["url"]
        reddit_feed.append(post["data"]["media"]["oembed"]["url"])
print reddit_feed
</snippet></ROW><ROW><id>12887889</id><snippet>post</snippet></ROW><ROW><id>12887889</id><snippet>post["data"]["media"]</snippet></ROW><ROW><id>12887889</id><snippet>None</snippet></ROW><ROW><id>12887889</id><snippet>None["oembed"]</snippet></ROW><ROW><id>12887889</id><snippet>'NoneType' object is not subscriptable</snippet></ROW><ROW><id>12887889</id><snippet>post['data']['media']['oembed']</snippet></ROW><ROW><id>12887889</id><snippet>url</snippet></ROW><ROW><id>12887889</id><snippet>data</snippet></ROW><ROW><id>12887889</id><snippet>import json
import urllib

try:
    f = urllib.urlopen("http://www.reddit.com/r/videos/top/.json")
except Exception:
    print("ERROR: malformed JSON response from reddit.com")
reddit_posts = json.loads(f.read().decode("utf-8"))

if isinstance(reddit_posts, dict) and "data" in reddit_posts \
   and isinstance(reddit_posts['data'], dict) \
   and 'children' in reddit_posts['data']:
    reddit_posts = reddit_posts["data"]["children"]
    reddit_feed = []
    for post in reddit_posts:
        if isinstance(post['data']['media'], dict) \
               and "oembed" in post['data']['media'] \
               and isinstance(post['data']['media']['oembed'], dict) \
               and 'url' in post['data']['media']['oembed']:
            print post["data"]["media"]["oembed"]["url"]
            reddit_feed.append(post["data"]["media"]["oembed"]["url"])
    print reddit_feed
</snippet></ROW><ROW><id>12888224</id><snippet>#!/bin/bash -e
nohup python ustream_recorder.py &gt; /tmp/ustream_recorder.log 2&gt;&amp;1 &amp;
echo $! &gt; /tmp/ustream_recorder.pid
</snippet></ROW><ROW><id>12888224</id><snippet>#!/bin/bash -e
kill -INT `cat /tmp/ustream_recorder.pid`
rm /tmp/ustream_recorder.pid
</snippet></ROW><ROW><id>12888276</id><snippet>def filterNegs(L):
    answer = []
    for i in L:
        if -1*i in L:
            answer.append(i)
    return answer
</snippet></ROW><ROW><id>12888276</id><snippet>return [i for i in a if -1*i in a]
</snippet></ROW><ROW><id>12888276</id><snippet>L</snippet></ROW><ROW><id>12888276</id><snippet>def filterNegs(L):
    L = set(L)
    answer = []
    for i in L:
        if -1*i in L:
            answer.append(i)
    return answer
</snippet></ROW><ROW><id>12888276</id><snippet>L = set(L)
return [i for i in a if -1*i in a]
</snippet></ROW><ROW><id>12888416</id><snippet>pip install numpy
</snippet></ROW><ROW><id>12888513</id><snippet>import httplib
conn = httplib.HTTPConnection('w3.com')
conn.request('OPTIONS', '/')
response = conn.getresponse()
print response.getheader('allow')
</snippet></ROW><ROW><id>12888513</id><snippet>OPTIONS, TRACE, GET, HEAD, POST
</snippet></ROW><ROW><id>12888678</id><snippet>setUp</snippet></ROW><ROW><id>12888678</id><snippet>TestCase</snippet></ROW><ROW><id>12888678</id><snippet>TestCase</snippet></ROW><ROW><id>12888678</id><snippet>TestCase</snippet></ROW><ROW><id>12888678</id><snippet>class BackendTests:
    def make_backend(self):
        raise NotImplementedError

    def test_one(self):
        backend = self.make_backend()
        # perform a test on the backend

class FooBackendTests(unittest.TestCase, BackendTests):
    def make_backend(self):
        # Create an instance of the "foo" backend:
        return foo_backend

class BarBackendTests(unittest.TestCase, BackendTests):
    def make_backend(self):
        # Create an instance of the "bar" backend:
        return bar_backend
</snippet></ROW><ROW><id>12888678</id><snippet>FooBackendTests.test_one</snippet></ROW><ROW><id>12888678</id><snippet>BarBackendTests.test_one</snippet></ROW><ROW><id>12888728</id><snippet>print</snippet></ROW><ROW><id>12888728</id><snippet>str()</snippet></ROW><ROW><id>12888728</id><snippet>print(repr(some_uuid))</snippet></ROW><ROW><id>12888728</id><snippet>&gt;&gt;&gt; some_uuid = uuid.UUID("3F2504E0-4F89-11D3-9A0C-0305E82C3301")
&gt;&gt;&gt; print(some_uuid)
3f2504e0-4f89-11d3-9a0c-0305e82c3301
&gt;&gt;&gt; print(repr(some_uuid))
UUID('3f2504e0-4f89-11d3-9a0c-0305e82c3301')
</snippet></ROW><ROW><id>12888728</id><snippet>isinstance()</snippet></ROW><ROW><id>12888728</id><snippet>False</snippet></ROW><ROW><id>12888728</id><snippet>&gt;&gt;&gt; isinstance(uuid.UUID("3F2504E0-4F89-11D3-9A0C-0305E82C3301"), uuid.UUID)
True
</snippet></ROW><ROW><id>12888958</id><snippet>delete()</snippet></ROW><ROW><id>12888958</id><snippet>PostImage.objects.get(...).delete()
</snippet></ROW><ROW><id>12888958</id><snippet>delete()</snippet></ROW><ROW><id>12888958</id><snippet>PostImage.objects.filter(...).delete()
</snippet></ROW><ROW><id>12888958</id><snippet>DELETE</snippet></ROW><ROW><id>12888958</id><snippet>delete()</snippet></ROW><ROW><id>12888958</id><snippet>post_delete</snippet></ROW><ROW><id>12888958</id><snippet>@receiver(post_delete, sender=PostImage)
def post_delete_user(sender, instance, *args, **kwargs):
    instance.image.delete(save=False)
    instance.image_thumb.delete(save=False)
    instance.image_web.delete(save=False)
    instance.image_infowindow.delete(save=False)
</snippet></ROW><ROW><id>12888958</id><snippet>delete()</snippet></ROW><ROW><id>12888986</id><snippet>pip install lxml
</snippet></ROW><ROW><id>12889132</id><snippet>import numpy
print numpy.__path__
</snippet></ROW><ROW><id>12889247</id><snippet>class Image(models.Model):
    # ...

class Video(models.Model):
    # ...

class Keyword(models.Model):
    keyword = models.CharField(max_length=64)
</snippet></ROW><ROW><id>12889247</id><snippet>class KeywordItem(models.Model):
    keyword = models.ForeignKey('Keyword')
    image = models.ForeignKey('Image')
</snippet></ROW><ROW><id>12889247</id><snippet>class KeywordItem(models.Model):
    keyword = models.ForeignKey('Keyword')
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>12889247</id><snippet>content_type</snippet></ROW><ROW><id>12889247</id><snippet>object_id</snippet></ROW><ROW><id>12889247</id><snippet>1</snippet></ROW><ROW><id>12889247</id><snippet>2</snippet></ROW><ROW><id>12889247</id><snippet>syncdb</snippet></ROW><ROW><id>12889247</id><snippet>1</snippet></ROW><ROW><id>12889247</id><snippet>7</snippet></ROW><ROW><id>12889247</id><snippet>11</snippet></ROW><ROW><id>12889247</id><snippet>KeywordItem.objects.create(keyword_id=7,
                           content_type_id=1,
                           object_id=11)

# or using Django magic (this automatically figures out the content type):
KeywordItem.objects.create(keyword_id=7,
                           object=Image.objects.get(pk=11))
</snippet></ROW><ROW><id>12889247</id><snippet>GenericRelation</snippet></ROW><ROW><id>12889247</id><snippet>img = Image.object.get(...)
img_type = ContentType.objects.get_for_model(img)
img_keywords = KeywordItem.objects.filter(content_type_id=img_type,
                                          object_id=img.pk)
</snippet></ROW><ROW><id>12889247</id><snippet>GenericRelation</snippet></ROW><ROW><id>12889247</id><snippet>Image</snippet></ROW><ROW><id>12889247</id><snippet>class Image(models.Model):
    # ...
    keywords = generic.GenericRelation('KeywordItem')
</snippet></ROW><ROW><id>12889247</id><snippet>Image.object.get(...).keywords.all()
</snippet></ROW><ROW><id>12889247</id><snippet>related_name</snippet></ROW><ROW><id>12889306</id><snippet>pip install -e .
</snippet></ROW><ROW><id>12889326</id><snippet>&gt;&gt;&gt; if (True or
... False or
... True):
...     print 'woo'
... 
woo
</snippet></ROW><ROW><id>12889337</id><snippet>twitter</snippet></ROW><ROW><id>12889337</id><snippet>easy_install twitter</snippet></ROW><ROW><id>12889453</id><snippet>jobTester</snippet></ROW><ROW><id>12889453</id><snippet>logging.error()</snippet></ROW><ROW><id>12889633</id><snippet>self.assertRaises(Exception, helpers.get_value, m, 'start_date')
</snippet></ROW><ROW><id>12889645</id><snippet>class Vote(db.Model):
    value = db.IntegerProperty() # Or whatever the vote value is.
</snippet></ROW><ROW><id>12889645</id><snippet>keyname = str(user.id) + "-" + str(post.id)
vote = Vote.get_or_insert(keyname, value="vote value")
</snippet></ROW><ROW><id>12890177</id><snippet>in</snippet></ROW><ROW><id>12890177</id><snippet>scalar</snippet></ROW><ROW><id>12890177</id><snippet>users_by_history = History.objects(time=searchObj.time).scalar('user_name')
LoginInfo.objects(user_name__in=users_by_history)
</snippet></ROW><ROW><id>12890194</id><snippet>indexed=False</snippet></ROW><ROW><id>12890194</id><snippet>class Tournament(db.Model):
   name = db.StringProperty(required = True)
   place = db.GeoPt()

class Teams(db.Model):
   belongs_to_tournament = db.ReferenceProperty(Tournament, collection_name =  'tournament_teams')
   name = db.StringProperty(required = True)
   players = db.IntegerProperty(required = True)
   price = db.FloatProperty(indexed=False)
</snippet></ROW><ROW><id>12890620</id><snippet>pd.DataFrame.from_records([i], index=0)
</snippet></ROW><ROW><id>12890846</id><snippet>setdefault</snippet></ROW><ROW><id>12890846</id><snippet>if key not in the_dict:
    the_dict[key] = value
return the_dict[key]
</snippet></ROW><ROW><id>12890846</id><snippet>dict</snippet></ROW><ROW><id>12890879</id><snippet>srcDir = '/user/local'
targetDir = '/user/data'
for fname in os.listdir(srcDir):
    if not os.path.isdir(os.path.join(srcDir, fname)):
        for prefix in ['jenjar.dat', 'jenmis.dat']:
            if fname.startswith(prefix):
                if not os.path.isdir(os.path.join(targetDir, prefix)):
                    os.mkdir(os.path.join(targetDir, prefix))
                shutil.move(os.path.join(srcDir, fnmae), targetDir)
</snippet></ROW><ROW><id>12890915</id><snippet>format(foo, "bar")
</snippet></ROW><ROW><id>12890915</id><snippet>type(foo).format(foo, "bar")
</snippet></ROW><ROW><id>12891199</id><snippet>recfromcsv</snippet></ROW><ROW><id>12891199</id><snippet>genfromtxt</snippet></ROW><ROW><id>12891199</id><snippet>names=True</snippet></ROW><ROW><id>12891199</id><snippet>import numpy as np

filename = 'data.csv'
writer = open(filename,mode='w')
writer.write('first column,second column,third column\n')
writer.write('0,1.1,1.2\n1,2.1,2.2\n2,3.1,3.2')
writer.close()

data = np.recfromcsv(filename)
print data
</snippet></ROW><ROW><id>12891199</id><snippet>recfromtxt</snippet></ROW><ROW><id>12891199</id><snippet>recfromcsv</snippet></ROW><ROW><id>12891199</id><snippet>recfromcsv(filename, names=['a','a','a'])
</snippet></ROW><ROW><id>12891284</id><snippet>locale.setlocale(locale.LC_COLLATE, 'jpn')
</snippet></ROW><ROW><id>12891476</id><snippet>__inserted</snippet></ROW><ROW><id>12891476</id><snippet>GtkTextBuffer</snippet></ROW><ROW><id>12891476</id><snippet>insert_text</snippet></ROW><ROW><id>12891476</id><snippet>connect_after</snippet></ROW><ROW><id>12891476</id><snippet>changed</snippet></ROW><ROW><id>12891793</id><snippet>shell=True</snippet></ROW><ROW><id>12891793</id><snippet>subprocess.check_output("cut -f1-4 " + temp1.name + "| uniq --count | sort -rn &gt; " +    temp2.name, shell=True)
</snippet></ROW><ROW><id>12891793</id><snippet>temp1.name</snippet></ROW><ROW><id>12891793</id><snippet>temp2.name</snippet></ROW><ROW><id>12891793</id><snippet>shell=True</snippet></ROW><ROW><id>12891905</id><snippet>pip</snippet></ROW><ROW><id>12891905</id><snippet>plone.app.jquery</snippet></ROW><ROW><id>12892525</id><snippet>str.format</snippet></ROW><ROW><id>12892525</id><snippet>r'/archives/{0}/{0}/{0}/{0}'.format(vi)
</snippet></ROW><ROW><id>12892719</id><snippet>lst = [' {0} '.format(elem) for elem in lst]
</snippet></ROW><ROW><id>12892719</id><snippet>0</snippet></ROW><ROW><id>12892735</id><snippet>{% for category in menu_categories|sort(attribute="id"): %}
    {% if category.name == 'Pizza': %}
        &lt;div&gt; {{ category.name }} &lt;/div&gt;
    {% endif %}
{% endfor %}
{% for category in menu_categories|sort(attribute="id"): %}
    {% if category.name != 'Pizza': %}
        &lt;div&gt; {{ category.name }} &lt;/div&gt;
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>12892910</id><snippet>dispatch</snippet></ROW><ROW><id>12892910</id><snippet>class MyView(View):
    @my_decorator
    def dispatch(self, *args, **kwargs):
        return super(MyView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>12893142</id><snippet>result = [x[0][0] for x in exampleArray]
</snippet></ROW><ROW><id>12893689</id><snippet>from collections import defaultdict

index_on_1 = defaultdict(list)
index_on_2 = defaultdict(list)
index_on_3 = defaultdict(list)

for i, (val1, val2, val3) in enumerate(yourstructure):
    index_on_1[val1].append(i)
    index_on_2[val2].append(i)
    index_on_3[val3].append(i)
</snippet></ROW><ROW><id>12893689</id><snippet>from itertools import chain

def lookup(entry):
    if isinstance(entry, str):
        entries = chain(index_on_1.get(entry, []), index_on_2.get(entry, []))
        return [yourstructure[i] for i in entries]
    else:
        return [yourstructure[i] for i in index_on_3.get(entry, [])]
</snippet></ROW><ROW><id>12893689</id><snippet>indexes = [defaultdict(list) for _ in range(3)]

for i, values in enumerate(yourstructure):
    for index, val in zip(indexes, values):
        index[val].append(i)
</snippet></ROW><ROW><id>12893689</id><snippet>def lookup(entry):
    entries = chain(*[index.get(entry, []) for index in indexes])
    return [yourstructure[i] for i in entries]
</snippet></ROW><ROW><id>12893830</id><snippet>update</snippet></ROW><ROW><id>12893830</id><snippet>def update(self, i):
    """Update the scatter plot."""
    dataX, dataY = next(self.stream)
    self.scat = self.ax.scatter(dataX, dataY, c="tomato", s=20, animated=True)
    return self.scat,
</snippet></ROW><ROW><id>12893830</id><snippet>def update(self, i):
    """Update the scatter plot."""
    data = next(self.stream)
    self.scat.set_offsets(data.transpose())
    return self.scat,
</snippet></ROW><ROW><id>12893830</id><snippet>setup_plot</snippet></ROW><ROW><id>12893830</id><snippet>__init__</snippet></ROW><ROW><id>12893830</id><snippet>global n,x,y</snippet></ROW><ROW><id>12893830</id><snippet>n</snippet></ROW><ROW><id>12893830</id><snippet>x</snippet></ROW><ROW><id>12893830</id><snippet>y</snippet></ROW><ROW><id>12893830</id><snippet>dataX</snippet></ROW><ROW><id>12893830</id><snippet>dataY</snippet></ROW><ROW><id>12893830</id><snippet>binaryRasted</snippet></ROW><ROW><id>12893853</id><snippet>(customerno, firstname, lastname, sales) = line
outLine = (sales, firstname, lastname, customerno)
output.writerow(outLine)
</snippet></ROW><ROW><id>12893883</id><snippet>__import__</snippet></ROW><ROW><id>12893883</id><snippet>glob</snippet></ROW><ROW><id>12893883</id><snippet>os.chdir(path)
for file in glob.glob('*.py')
    __import__(file[:-2])
</snippet></ROW><ROW><id>12894163</id><snippet>.items(section)</snippet></ROW><ROW><id>12894163</id><snippet>values = [v for k, v in config.items('main')]
</snippet></ROW><ROW><id>12894243</id><snippet>all()</snippet></ROW><ROW><id>12894243</id><snippet>from taggit.models import Tag
tags = Tag.objects.all()
</snippet></ROW><ROW><id>12894243</id><snippet>django-taggit-templatetags</snippet></ROW><ROW><id>12894392</id><snippet>mtime</snippet></ROW><ROW><id>12894392</id><snippet>max()</snippet></ROW><ROW><id>12894392</id><snippet>getmtime</snippet></ROW><ROW><id>12894392</id><snippet>modTime = max([os.path.getmtime(os.path.join(dir, p)) for p in os.listdir(dir)])
</snippet></ROW><ROW><id>12894871</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/tmp/test'
&gt;&gt;&gt; os.chdir('..')
&gt;&gt;&gt; os.getcwd()
'/tmp'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12894871</id><snippet>..</snippet></ROW><ROW><id>12894871</id><snippet>os.chdir</snippet></ROW><ROW><id>12894895</id><snippet>&lt;all that other stuff&gt;, first_blast_name, first_blast_hit, first_blast_score, second_blast_name, second...&lt;and so on&gt;
</snippet></ROW><ROW><id>12894895</id><snippet>loci</snippet></ROW><ROW><id>12894895</id><snippet>blast</snippet></ROW><ROW><id>12894953</id><snippet>real(8)</snippet></ROW><ROW><id>12894953</id><snippet>selected_real_kind</snippet></ROW><ROW><id>12894953</id><snippet>iso_c_binding</snippet></ROW><ROW><id>12894953</id><snippet>iso_fortran_env</snippet></ROW><ROW><id>12894953</id><snippet>c_double</snippet></ROW><ROW><id>12894953</id><snippet>value</snippet></ROW><ROW><id>12894953</id><snippet>byref()</snippet></ROW><ROW><id>12895740</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>12895740</id><snippet>enumerate()</snippet></ROW><ROW><id>12895740</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [['a','b', 'c'], 'd','e', ['f', 'g']]
&gt;&gt;&gt; for index, value in enumerate(itertools.chain.from_iterable(l), 1):
...     print(index, value)
... 
1 a
2 b
3 c
4 d
5 e
6 f
7 g
</snippet></ROW><ROW><id>12895740</id><snippet>def flatten(seq):
    for item in seq:
        if not isinstance(item, str): #Use `basestring` in 2.x
            yield from item
            #For Python &lt;3.3
            #for subitem in item:
            #    yield subitem
        else:
            yield item
</snippet></ROW><ROW><id>12896092</id><snippet>MemoryHandler</snippet></ROW><ROW><id>12896092</id><snippet>FileHandler</snippet></ROW><ROW><id>12896092</id><snippet>FileHandler</snippet></ROW><ROW><id>12896092</id><snippet>MemoryHandler</snippet></ROW><ROW><id>12896092</id><snippet>import logging
import logging.handlers
#create a logger object:
logger = logging.getLogger("MyLogger")
#define a memory handler:
memHandler = logging.handlers.MemoryHandler(capacity = 1024*10)
logger.addHandler(memHandler)
#...
#initialization code with several logging events (for example, loading a configuration file to a 'conf' object)
#everytnihg is ls logged by the memory handler
#...
#after configuration is loaded, a new logging handler is defined for a log file:
fileHandler = logging.FileHandler(conf.get("main","log_file"),'w')
#flush the memory handler into the new file handler:
memHandler.setTarget(fileHandler)
memHandler.flush()
memHandler.close()
logger.removeHandler(memHandler)
logger.addHandler(handler)
</snippet></ROW><ROW><id>12896102</id><snippet>def calc(mylist): # note the argument
    total = sum(mylist)
    avg = total / len(mylist) # no need for semicolons
    print('\n', "Original list input:", mylist)
    print("Ascending list:", sorted(mylist))
    print ("Number of items in list:", len(mylist))
    print ("Total:", total)
    print ("Average:", avg)

mylist = []
while True:
   inp = input()
   try:
       mylist.append(float(inp))
   except ValueError:
       if inp in {'', 'stop'}:
            calc(mylist)
            print('Quitting.')
            break
       else:
            print('Invalid input.')
</snippet></ROW><ROW><id>12896199</id><snippet>{
   "games" : [
      {
         "apct" : 0.377838,
         "dpct" : 0.263445,
         "expGoalDiff" : -0.04086,
         "awayID" : "6",
         "homeID" : "17",
         "date" : "20/10/2012",
         "away" : "Chelsea",
         "home" : "Tottenham",
         "hpct" : 0.358717
      },
      {
         "apct" : 0.237829,
         "dpct" : 0.250146,
         "expGoalDiff" : 0.594234,
         "awayID" : "1",
         "homeID" : "8",
         "date" : "20/10/2012",
         "away" : "Aston Villa",
         "home" : "Fulham",
         "hpct" : 0.512025
      }, /* shortened for brevity */
</snippet></ROW><ROW><id>12896204</id><snippet>f</snippet></ROW><ROW><id>12896204</id><snippet>b</snippet></ROW><ROW><id>12896204</id><snippet>Bar</snippet></ROW><ROW><id>12896204</id><snippet>b</snippet></ROW><ROW><id>12896204</id><snippet>Foo</snippet></ROW><ROW><id>12896204</id><snippet>Bar</snippet></ROW><ROW><id>12896204</id><snippet>Foo</snippet></ROW><ROW><id>12896204</id><snippet>Bar</snippet></ROW><ROW><id>12896204</id><snippet>Foo</snippet></ROW><ROW><id>12896204</id><snippet>isinstance(b, Foo)</snippet></ROW><ROW><id>12896204</id><snippet>Foo</snippet></ROW><ROW><id>12896204</id><snippet>bar</snippet></ROW><ROW><id>12896204</id><snippet>self</snippet></ROW><ROW><id>12896204</id><snippet>Bar</snippet></ROW><ROW><id>12896204</id><snippet>Foo</snippet></ROW><ROW><id>12896204</id><snippet>super</snippet></ROW><ROW><id>12896204</id><snippet>class Foo:
    def __init__(self, a):
        self.a = a

    def sayHello(self):
        print("Hello!")

class Bar(Foo):
    def __init__(self, a, b):
        super().__init__(self, a)  # calls overridden __init__ method from Foo
        self.b = b

    def doSomething(self):
        self.sayHello()            # calls a method defined in Foo
        return self.a + self.b     # accesses variable "a" that was set in Foo
</snippet></ROW><ROW><id>12896253</id><snippet>newFunction()</snippet></ROW><ROW><id>12896253</id><snippet>src/pyscanner.l</snippet></ROW><ROW><id>12896253</id><snippet>static void newFunction()
{
  if (current-&gt;name.left(2)=="__" &amp;&amp; current-&gt;name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current-&gt;protection=Public;
  }
  else if (current-&gt;name.left(2)=="__")
  {
    current-&gt;protection=Private;
  }
  else if (current-&gt;name.at(0)=='_')
  {
    current-&gt;protection=Protected;
  }
}
</snippet></ROW><ROW><id>12896436</id><snippet>getObjPositionInParent</snippet></ROW><ROW><id>12896436</id><snippet>Contents</snippet></ROW><ROW><id>12896436</id><snippet>portal_properties</snippet></ROW><ROW><id>12896436</id><snippet>navtree_properties</snippet></ROW><ROW><id>12896436</id><snippet>sortAttribute</snippet></ROW><ROW><id>12896436</id><snippet>plone.app.folder.base.BaseBTreeFolder</snippet></ROW><ROW><id>12896436</id><snippet>plone.dexterity.content.Container</snippet></ROW><ROW><id>12896815</id><snippet>STATIC_URL = "https://aws.domain.com/"
</snippet></ROW><ROW><id>12896815</id><snippet>from django.conf import settings

class Media:
    js = (settings.STATIC_URL + "js/myfile.js",
          settings.STATIC_URL + "js/myfile2.js")
</snippet></ROW><ROW><id>12897122</id><snippet>topmost</snippet></ROW><ROW><id>12897122</id><snippet>wm_attributes</snippet></ROW><ROW><id>12897122</id><snippet>fen.wm_attributes("-topmost", True)
</snippet></ROW><ROW><id>12897127</id><snippet>extract</snippet></ROW><ROW><id>12897127</id><snippet>path</snippet></ROW><ROW><id>12897127</id><snippet>dest_dir</snippet></ROW><ROW><id>12897127</id><snippet>gui</snippet></ROW><ROW><id>12897127</id><snippet>os.mkdir</snippet></ROW><ROW><id>12897140</id><snippet>self.player.get_property("current-uri")
</snippet></ROW><ROW><id>12897140</id><snippet>self.player.get_property("uri")
</snippet></ROW><ROW><id>12897324</id><snippet>assignment_tag</snippet></ROW><ROW><id>12897324</id><snippet>def get_campaign():
    #your stuff
    ....

    return campaign_article

register.assignment_tag(get_campaign, name='campaign')
</snippet></ROW><ROW><id>12897324</id><snippet>{% load campaign_article %}
{% campaign as campaign_list %} {# loads the tags and creates campaign_list context variable #}
{% for campaign_article in campaign_list %}
    {{ campaign_article.id }}
{% endfor %}
</snippet></ROW><ROW><id>12897352</id><snippet>Return True if path refers to a directory entry that is a symbolic link. 
Always False if symbolic links are not supported.
</snippet></ROW><ROW><id>12897371</id><snippet>result = self.method(inst)</snippet></ROW><ROW><id>12897371</id><snippet>setattr(inst,self.name,result)</snippet></ROW><ROW><id>12897371</id><snippet>my_instance.my_cached_property</snippet></ROW><ROW><id>12897440</id><snippet>$ awk  'BEGIN{FS=OFS=", "} {print $4, $3, $2, $1}' customer.csv
sales, lastname, firstname, customerno
2345.00, doe, john, 23242
1234.00, doe, jane, 23253
2345.00, johnson, greg, 23221
2345.00, gardner, howard, 23210
</snippet></ROW><ROW><id>12897579</id><snippet>with</snippet></ROW><ROW><id>12897579</id><snippet>def iterate_with(iterable):
    for element in iterable:
        with element:
            yield element
</snippet></ROW><ROW><id>12897579</id><snippet>for resource in iterate_with(gen_resources()):
    DoWork(resource)
</snippet></ROW><ROW><id>12897579</id><snippet>with</snippet></ROW><ROW><id>12897758</id><snippet>&gt;&gt;&gt; session.query("id", "name", "thenumber12").\
...         from_statement("SELECT id, name, 12 as "
...                 "thenumber12 FROM users where bit_count(column&amp;bitmask)&lt;:the_val").\
...                 params(the_val=5).all()
</snippet></ROW><ROW><id>12897758</id><snippet>&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; engine = create_engine('sqlite:///:memory:', echo=True)
&gt;&gt;&gt; engine.execute("select * from table where bit_count(column &amp; bitmask) &gt; 5").scalar()
</snippet></ROW><ROW><id>12898051</id><snippet>g = u""
s = s.decode('UTF-8')
</snippet></ROW><ROW><id>12898080</id><snippet>curl</snippet></ROW><ROW><id>12898080</id><snippet>-d</snippet></ROW><ROW><id>12898080</id><snippet>-H</snippet></ROW><ROW><id>12898080</id><snippet>curl -k -H X-User=user -H X-Password=password https://12.12.12.21
</snippet></ROW><ROW><id>12898080</id><snippet>values = {'X-User' : 'user', 'X-Password' : 'password'}
data = urllib.urlencode(values)
req = urllib2.Request("https://12.12.12.21", data)
rr = urllib2.urlopen(req)
</snippet></ROW><ROW><id>12898089</id><snippet>In [39]: a=[1,3,5,10,13]

In [40]: sub_list_start = 1

In [41]: sub_list_end = 3

In [42]: a[sub_list_start : sub_list_end+1] = [9,7]

In [43]: a
Out[43]: [1, 9, 7, 13]
</snippet></ROW><ROW><id>12898257</id><snippet>atexit</snippet></ROW><ROW><id>12898257</id><snippet>import atexit

def bar():
   print "World"
atexit.register(bar)

#atexit.register also can be used as a decorator since it returns
# the function:
@atexit.register
def foo():
   print "Goodbye"
</snippet></ROW><ROW><id>12898257</id><snippet>os._exit</snippet></ROW><ROW><id>12898374</id><snippet>s</snippet></ROW><ROW><id>12898374</id><snippet>s = Exception("\xd0\x91".decode("utf-8"))
# this will now throw a UnicodeEncodeError
unicode(str(s), 'utf-8', 'strict')
</snippet></ROW><ROW><id>12898374</id><snippet>try</snippet></ROW><ROW><id>12898374</id><snippet>s</snippet></ROW><ROW><id>12898374</id><snippet>Exception</snippet></ROW><ROW><id>12898374</id><snippet>object</snippet></ROW><ROW><id>12898374</id><snippet>object</snippet></ROW><ROW><id>12898374</id><snippet>__unicode__</snippet></ROW><ROW><id>12898747</id><snippet>s = []
s.append(expected_sentiment_tokens(tokens))
</snippet></ROW><ROW><id>12898747</id><snippet>def test_iterate(corpus_reader, sample_size, number_of_samples):
    s = []
    for i in xrange(number_of_samples):
        tokens = corpus_reader.sample_words_by_sents(sample_size)
        exp_sent = expected_sentiment_tokens(tokens)
        print exp_sent
        s.append(exp_sent)
    print "s =", s    
    print "Average expected no of sentiment tokens: %s" % average(s)
    print "Standard deviation of sentiment tokens: %s" % std(s)

test_iterate(rcr, 500, 3)
</snippet></ROW><ROW><id>12898840</id><snippet>In [2]: s='&lt;CharacterBlock Active="0" MaxVal="-15.000000" MinVal="-100.000000"&gt;'
In [3]: import re
In [4]: manReg='(?&lt;=MaxVal=")[^"]*'
In [5]: minReg='(?&lt;=MinVal=")[^"]*'

In [6]: re.findall(minReg, s)
Out[7]: ['-100.000000']

In [8]: re.findall(maxReg, s)
Out[9]: ['-15.000000']
</snippet></ROW><ROW><id>12899008</id><snippet>&gt;&gt;&gt; a = [True, True, True]
&gt;&gt;&gt; b = [True, True, False]
</snippet></ROW><ROW><id>12899008</id><snippet>&gt;&gt;&gt; [ai and bi for ai,bi in zip(a,b)]
[True, True, False]
</snippet></ROW><ROW><id>12899008</id><snippet>and_</snippet></ROW><ROW><id>12899008</id><snippet>map</snippet></ROW><ROW><id>12899008</id><snippet>&gt;&gt;&gt; from operator import and_
&gt;&gt;&gt; map(and_, a, b)
[True, True, False]
</snippet></ROW><ROW><id>12899008</id><snippet>numpy</snippet></ROW><ROW><id>12899008</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; a = array([True, True, True])
&gt;&gt;&gt; b = array([True, True, False])
&gt;&gt;&gt; a &amp; b
array([ True,  True, False], dtype=bool)
&gt;&gt;&gt; a | b
array([ True,  True,  True], dtype=bool)
&gt;&gt;&gt; a ^ b
array([False, False,  True], dtype=bool)
</snippet></ROW><ROW><id>12899092</id><snippet>QLabel</snippet></ROW><ROW><id>12899092</id><snippet>QWidget</snippet></ROW><ROW><id>12899092</id><snippet>x()</snippet></ROW><ROW><id>12899092</id><snippet>y()</snippet></ROW><ROW><id>12899092</id><snippet>pos()</snippet></ROW><ROW><id>12899395</id><snippet>food(**my_dictionary)
</snippet></ROW><ROW><id>12899395</id><snippet>my_dictionary = {'name':'Belgian Waffles', 'price':'$5.95'}</snippet></ROW><ROW><id>12899395</id><snippet>food(**my_dictionary)</snippet></ROW><ROW><id>12899395</id><snippet>food(name = 'Belgian Waffles', price = '$5.95')</snippet></ROW><ROW><id>12899396</id><snippet>for i in range(len(a)-1, 1)
</snippet></ROW><ROW><id>12899396</id><snippet>for i in range(len(a)-1, 0, -1)
</snippet></ROW><ROW><id>12899530</id><snippet>dError.label.set_text("test")
</snippet></ROW><ROW><id>12899530</id><snippet>vbox = dError.get_child()
hbox, label1, hbuttonbox = vbox.get_children()
label1.set_text("Test1")
im, vbox2 = hbox.get_children()
label2, label3 = vbox2.get_children()
label2.set_text("Text2")
label3.set_text("Text3") #This one is invisible as default
</snippet></ROW><ROW><id>12899872</id><snippet>start_position</snippet></ROW><ROW><id>12899872</id><snippet>x</snippet></ROW><ROW><id>12899872</id><snippet>end_position = end_position % 26</snippet></ROW><ROW><id>12899872</id><snippet>letters="abcdefghijklmnopqrstuvwxyz"
alphabet_length = len(letters)
start_position = 0
for i in range(1,1834):
    x=((i**2)%9)
    end_position = start_position + x
    end_position = end_position % alphabet_length
    if end_position &lt; start_position:
         print letters[start_position:alphabet_length-1] + letters[0:end_position]
    else:
         print letters[start_position:end_position] 
    start_position = end_position
</snippet></ROW><ROW><id>12899898</id><snippet>add_next = False # Do not add lines
# Until you encounter the first "start_here", which sets it to True
with open("file1.html", "r") as in_file:
    with open("file2.html", "w") as out_file:
        for line in in_file:
            if "end_here" in line: # or line.startswith("end_here") for example
                add_next = False
            if add_next:
                out_file.write(line)
            if "begin_here" in line:
                add_next = True
</snippet></ROW><ROW><id>12900008</id><snippet>sexpr()</snippet></ROW><ROW><id>12900008</id><snippet>x = Int('x')
fun = Function('fun', IntSort(), IntSort(), IntSort())
phi = ForAll(x, (fun(x, x) != x)) 
print phi
s = Solver()
s.add(phi)
print s.check()
print s.model().sexpr()
</snippet></ROW><ROW><id>12900008</id><snippet>fun</snippet></ROW><ROW><id>12900008</id><snippet>fun(v0, v1) = fun!6(k5(v0), k5(v1))</snippet></ROW><ROW><id>12900008</id><snippet>elem!0</snippet></ROW><ROW><id>12900008</id><snippet>k!5</snippet></ROW><ROW><id>12900126</id><snippet>.apply</snippet></ROW><ROW><id>12900126</id><snippet>my_task</snippet></ROW><ROW><id>12900126</id><snippet>myapp</snippet></ROW><ROW><id>12900126</id><snippet>tasks</snippet></ROW><ROW><id>12900126</id><snippet>$ python manage.py shell
&gt;&gt;&gt; from myapp.tasks import my_task
&gt;&gt;&gt; eager_result = my_task.apply()
</snippet></ROW><ROW><id>12900126</id><snippet>AsyncResult</snippet></ROW><ROW><id>12900126</id><snippet>.apply()</snippet></ROW><ROW><id>12900417</id><snippet>import re # to be able to use regular expressions
count = 0
found_one_at_least = False
result = ""
with open("read_file", "r") as f:
    for line in f:
        if re.search(regexp, line) is not None: # single line re to know when to start recording; returns None if there is no match, help(re.search) will tell you
            break # stop this loop and go on to the actual recording
    for line in f: # this will continue reading from where the last loop stopped, because it is an f is an iterator
        # to make it not do that you can use f.seek(0), but we do not need that
        result += line # append the line to the result
        count += line.count("[")-line.count("]") # compute the number of open/close brackets
        if count &gt;= 1: # this is just so it does not stop at the first line if there is no [ in it
            found_one_at_least = True
        if count == 0 and found_one_at_least:
            break # stop recording when we are back at the "root" level
with open("write_file", "w") as f: # open the file, and let python handle closing and cleaning up...
    f.write(result) # write the result
</snippet></ROW><ROW><id>12900417</id><snippet>regexp = re.compile(regexp_string)
# ...
if regexp.search(string) is not None:
# ...
</snippet></ROW><ROW><id>12900582</id><snippet>In [63]: lis = [['a, b'], ['a'], ['a,b,c']]

In [64]: [x[0].split(',') for x in lis]
Out[64]: [['a', ' b'], ['a'], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>12900582</id><snippet>map()</snippet></ROW><ROW><id>12900582</id><snippet>In [66]: map(lambda x:x[0].split(','),lis)
Out[66]: [['a', ' b'], ['a'], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>12900754</id><snippet>import psycopg2
import sys

class Get_results():
    def db_call(self,query,dbHost,dbName,dbUser,dbPass):
        try:
            con = None
            con = psycopg2.connect(host=dbHost, database=dbName,
                                   user=dbUser, password=dbPass)
            cur = con.cursor()
            cur.execute(query)
            data = cur.fetchall()  
            resultList = []  
            for data_out in data:  
                resultList.append(data_out[1])  


            return resultList   
        except psycopg2.DatabaseError, e:
                print 'Error %s' % e
                sys.exit(1)
        finally:
            if con:
                con.close()

 sql = " some sql "
 w = Get_results()
 for i in  w.db_call(sql, dbHost, dbName, dbUser, dbPass):
     print "The result is : " + i
</snippet></ROW><ROW><id>12900764</id><snippet>from math import *</snippet></ROW><ROW><id>12900764</id><snippet>import math</snippet></ROW><ROW><id>12900764</id><snippet>ScriptScope</snippet></ROW><ROW><id>12900764</id><snippet>ScriptScope scope = engine.CreateScope();

ScriptSource source = engine.CreateScriptSourceFromString("from math import *", SourceCodeKind.AutoDetect);
source.Execute(scope);

source = engine.CreateScriptSourceFromString("2*sin (2)", SourceCodeKind.AutoDetect);
button1.Text = source.Execute&lt;float&gt;(scope).ToString();
</snippet></ROW><ROW><id>12900764</id><snippet>scope.SetVariable("x", 0.577);
</snippet></ROW><ROW><id>12901459</id><snippet>class MyConfigParser(ConfigParser):
    my_defaults = {
            'Section 1': 'spam',
            'Section 2': 'eggs',
    }

    def get(self, section, key):
        try:
            return ConfigParser.get(self, section, key)
        except ConfigParser.NoSectionError:
            if section in self.my_defaults:
                self.add_section(section)
                self.set(section, key, self.my_defaults[section])
                return self.my_defaults[section]
            else:
                raise
        except ConfigParser.NoOptionError:
            if section in self.my_defaults:
                self.set(section, key, self.my_defaults[section])
                return self.my_defaults[section]
            else:
                raise
</snippet></ROW><ROW><id>12901477</id><snippet>for row in rows:
    cells = row.findAll('td')

    output = []

    for i, cell in enumerate(cells):
        if i == 0:
            output.append(cell.text.strip())
        elif cell.find('img'):
            output.append(cell.find('img')['title'])
        elif cell.find('input'):
            output.append(cell.find('input')['value'])
    print output
</snippet></ROW><ROW><id>12901477</id><snippet>[u'Logged-in users', u'True', u'True', u'True', u'True']
[u'User 1', u'Confirm', u'Confirm', u'Site', u'Confirm']
[u'User 2', u'Confirm', u'Confirm', u'Confirm', u'Confirm']
[u'User 3', u'Confirm', u'Confirm', u'Confirm', u'Confirm']
[u'User 4', u'Confirm', u'Site', u'Site', u'Confirm']
</snippet></ROW><ROW><id>12901655</id><snippet>communicate</snippet></ROW><ROW><id>12901755</id><snippet>&gt;&gt;&gt; bool("0")
True
</snippet></ROW><ROW><id>12901755</id><snippet>bool(int(israining_str))</snippet></ROW><ROW><id>12901755</id><snippet>int</snippet></ROW><ROW><id>12901755</id><snippet>bool</snippet></ROW><ROW><id>12901755</id><snippet>"0"</snippet></ROW><ROW><id>12901858</id><snippet>self.tabwidget.setStyleSheet('QTabBar::tab {background-color: red;}')
</snippet></ROW><ROW><id>12901991</id><snippet>socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1) 
</snippet></ROW><ROW><id>12902222</id><snippet>range()</snippet></ROW><ROW><id>12902222</id><snippet>for i in range(i, 0):
</snippet></ROW><ROW><id>12902222</id><snippet>for i in range(i, 0, -1):
</snippet></ROW><ROW><id>12902222</id><snippet>range()</snippet></ROW><ROW><id>12902222</id><snippet>range(5, 0, -1)</snippet></ROW><ROW><id>12902222</id><snippet>[5, 4, 3, 2, 1]</snippet></ROW><ROW><id>12902259</id><snippet>outfile = file("outfile.txt", "w")
lines_to_check_for = [ line for line in file("list.txt", "r") ]
for line in file("testing.txt", "r"):
    if not line in lines_to_check_for:
        outfile.write(line)
</snippet></ROW><ROW><id>12902259</id><snippet>list.txt</snippet></ROW><ROW><id>12902259</id><snippet>testing.txt</snippet></ROW><ROW><id>12902259</id><snippet>outfile.txt</snippet></ROW><ROW><id>12902259</id><snippet>newusers = file("newusers.txt", "w")
existing_users = [ line for line in file("users.txt", "r") ]
for line in file("testing.txt", "r"):
    # grab each comma-separated user, take the portion left of the @, if any
    new_users = [ entry.split["@"](0) for entry in line.split(",") ]
    for user in new_users:
        if not user in existing_users:
            newusers.write(user)
</snippet></ROW><ROW><id>12902341</id><snippet>re.findall</snippet></ROW><ROW><id>12902341</id><snippet>&gt;&gt;&gt; string = "+0.6810+0.0266-0.0140-0.0111-0.0080-00.026-0.0229+000.84"
&gt;&gt;&gt; 
&gt;&gt;&gt; import re
&gt;&gt;&gt; matches = re.findall(r'[-+]\d+\.\d+', string)
&gt;&gt;&gt; matches
['+0.6810', '+0.0266', '-0.0140', '-0.0111', '-0.0080', '-00.026', '-0.0229', 
 '+000.84']
&gt;&gt;&gt;
&gt;&gt;&gt; a = float(matches[0])
&gt;&gt;&gt; 0.681

&gt;&gt;&gt; (a, b, c, d, e, f, g) = map(float, matches)[:7]
</snippet></ROW><ROW><id>12902422</id><snippet>beep</snippet></ROW><ROW><id>12902422</id><snippet>beep</snippet></ROW><ROW><id>12902611</id><snippet>wrap()</snippet></ROW><ROW><id>12902611</id><snippet>replace_whitespace=False</snippet></ROW><ROW><id>12902712</id><snippet>average</snippet></ROW><ROW><id>12902712</id><snippet>avg</snippet></ROW><ROW><id>12902712</id><snippet>items</snippet></ROW><ROW><id>12902712</id><snippet>average</snippet></ROW><ROW><id>12902712</id><snippet>avg</snippet></ROW><ROW><id>12902712</id><snippet>items</snippet></ROW><ROW><id>12902712</id><snippet>return float(avg)/items</snippet></ROW><ROW><id>12902712</id><snippet>return (avg+0.0)/items</snippet></ROW><ROW><id>12902712</id><snippet>avg</snippet></ROW><ROW><id>12902712</id><snippet>avg</snippet></ROW><ROW><id>12902712</id><snippet>from __future__ import division</snippet></ROW><ROW><id>12902712</id><snippet>getLetterGrade</snippet></ROW><ROW><id>12902712</id><snippet>ceil</snippet></ROW><ROW><id>12902712</id><snippet>floor</snippet></ROW><ROW><id>12902712</id><snippet>math</snippet></ROW><ROW><id>12902712</id><snippet>ceil(score)</snippet></ROW><ROW><id>12902712</id><snippet>floor(score)</snippet></ROW><ROW><id>12902712</id><snippet>round(score)</snippet></ROW><ROW><id>12902800</id><snippet>import bs4</snippet></ROW><ROW><id>12902800</id><snippet>soup = bs4.BeautifulSoup(doc)</snippet></ROW><ROW><id>12902800</id><snippet>pip install</snippet></ROW><ROW><id>12902800</id><snippet>import sys</snippet></ROW><ROW><id>12902800</id><snippet>print sys.path</snippet></ROW><ROW><id>12902800</id><snippet>pip-2.7</snippet></ROW><ROW><id>12902800</id><snippet>easy_install</snippet></ROW><ROW><id>12902800</id><snippet>easy_install-2.7</snippet></ROW><ROW><id>12902801</id><snippet>from openpyxl.cell import coordinate_from_string, column_index_from_string
xy = coordinate_from_string('A4') # returns ('A',4)
col = column_index_from_string(xy[0]) # returns 1
row = xy[1]
</snippet></ROW><ROW><id>12902828</id><snippet>for url_key in URLDict:
    URL = URLDict[url_key]

    sourcepage = urllib.urlopen(URL)
    sourcetext = sourcepage.read()
</snippet></ROW><ROW><id>12902828</id><snippet>URLDict[url_key]</snippet></ROW><ROW><id>12902828</id><snippet>key</snippet></ROW><ROW><id>12902828</id><snippet>url_key</snippet></ROW><ROW><id>12902828</id><snippet>print url_key
</snippet></ROW><ROW><id>12902828</id><snippet>OTX2</snippet></ROW><ROW><id>12902974</id><snippet>dict(((x[0], x[1]), x) for x in L).values()
</snippet></ROW><ROW><id>12902974</id><snippet>{(x[0], x[1]): x for x in L}.values()
</snippet></ROW><ROW><id>12902974</id><snippet>(x[0], x[1])</snippet></ROW><ROW><id>12902974</id><snippet>tuple(x[:2])</snippet></ROW><ROW><id>12902985</id><snippet>zip</snippet></ROW><ROW><id>12902985</id><snippet>itertools.product</snippet></ROW><ROW><id>12902985</id><snippet>itertools.chain</snippet></ROW><ROW><id>12902985</id><snippet>In [103]: data = [['AB', 'BS, BT'], ['AH', 'AH'], ['AS', 'AS, GS']]

In [104]: [list(itertools.product([d[0]], d[1].split(','))) for d in data]
Out[104]: [[('AB', 'BS'), ('AB', ' BT')], [('AH', 'AH')], [('AS', 'AS'), ('AS', ' GS')]]

In [105]: list(itertools.chain.from_iterable([list(itertools.product([d[0]], d[1].split(','))) for d in data]))
Out[105]: [('AB', 'BS'), ('AB', ' BT'), ('AH', 'AH'), ('AS', 'AS'), ('AS', ' GS')]
</snippet></ROW><ROW><id>12903015</id><snippet>yourList = myList + [40]
</snippet></ROW><ROW><id>12903015</id><snippet>myList</snippet></ROW><ROW><id>12903015</id><snippet>myList</snippet></ROW><ROW><id>12903015</id><snippet>.append()</snippet></ROW><ROW><id>12903015</id><snippet>yourList</snippet></ROW><ROW><id>12903015</id><snippet>myList</snippet></ROW><ROW><id>12903334</id><snippet>i + i</snippet></ROW><ROW><id>12903334</id><snippet>i + 1</snippet></ROW><ROW><id>12903334</id><snippet>result[i+i][0]=0
</snippet></ROW><ROW><id>12903334</id><snippet>i // 2 + 1</snippet></ROW><ROW><id>12903482</id><snippet>re_type = type(re.match('', ''))
</snippet></ROW><ROW><id>12903482</id><snippet>def func(result):
   if result:
      # do stuff...
</snippet></ROW><ROW><id>12903482</id><snippet>def func(result):
    try:
        for group in result.groups():
            # handle match group
    except AttributeError:
       # Looks like this wasn't a real match object
</snippet></ROW><ROW><id>12903540</id><snippet>setUp()</snippet></ROW><ROW><id>12903540</id><snippet>skipTest(classname)</snippet></ROW><ROW><id>12903540</id><snippet>    def setUp(self):
        # set some stuff up
        self.environment_is_clean()

    def environment_is_clean(self):
        try:
            # A failing test
            assert 0 == 1
        except Exception as e:
            print "Test environment is not clean!"
            self.skipTest(MyTestCase)
</snippet></ROW><ROW><id>12903567</id><snippet>In [55]: m = arange(2**6).reshape([2]*6)

In [56]: m.shape
Out[56]: (2, 2, 2, 2, 2, 2)

In [57]: m[:2,:2,:2,0,0,0]
Out[57]: 
array([[[ 0,  8],
        [16, 24]],

       [[32, 40],
        [48, 56]]])

In [58]: m[s_[:2, :2, :2] + (0,)*(n-3)]
Out[58]: 
array([[[ 0,  8],
        [16, 24]],

       [[32, 40],
        [48, 56]]])
</snippet></ROW><ROW><id>12903567</id><snippet>In [69]: m[(s_[:2, :2, :2] + (0,)*m.ndim)[:m.ndim]]
Out[69]: 
array([[[ 0,  8],
        [16, 24]],

       [[32, 40],
        [48, 56]]])
</snippet></ROW><ROW><id>12903694</id><snippet>__cmp__</snippet></ROW><ROW><id>12903694</id><snippet>__cmp__()</snippet></ROW><ROW><id>12903694</id><snippet>__eq__()</snippet></ROW><ROW><id>12903694</id><snippet>__ne__()</snippet></ROW><ROW><id>12903694</id><snippet>__cmp__</snippet></ROW><ROW><id>12903694</id><snippet>__cmp__</snippet></ROW><ROW><id>12903694</id><snippet>id(obj)</snippet></ROW><ROW><id>12903782</id><snippet>class Point3D:

    def __init__(self, x = 0, y = 0, z = 0):
        self.x, self.y, self.z = float(x), float(y), float(z)

 ...

    def project(self, win_width, win_height, fov, viewer_distance, perspective):
        """ 
        Transforms this 3D point to 2D using a perspective projection. 
        """
        if perspective:
            factor = fov / (viewer_distance + self.z)
        else:
            factor = fov / viewer_distance
        x = self.x * factor + win_width / 2
        y = -self.y * factor + win_height / 2
        return Point3D(x, y, self.z)
</snippet></ROW><ROW><id>12904228</id><snippet>import email.Header
text, encoding = email.Header.decode_header('=?utf-8?Q?Subject?=')[0]
</snippet></ROW><ROW><id>12904228</id><snippet>email.Header</snippet></ROW><ROW><id>12904315</id><snippet>import base64
my_enc = base64.b64encode(""" 
def hello():
     print 'hello world!'
hello() """)

exec(base64.b64decode(my_enc))
</snippet></ROW><ROW><id>12904663</id><snippet>    Pattern p = Pattern.compile("John\\s+Doe", Pattern.MULTILINE);
    Matcher m = p.matcher("I am looking for John \nDoe, I am.");        
    System.out.println(m.find());
</snippet></ROW><ROW><id>12904663</id><snippet>pcregrep</snippet></ROW><ROW><id>12904806</id><snippet>prefix</snippet></ROW><ROW><id>12904833</id><snippet>for m in range(month):
    balance = (balance - payment)*(1 + MonthlyInterestRate)
</snippet></ROW><ROW><id>12905246</id><snippet>&gt;&gt;&gt; sorted(t, key=lambda k: len(t[k]))
['rand_key_3', 'rand_key_1', 'rand_key_2', 'rk5']
</snippet></ROW><ROW><id>12905246</id><snippet>&gt;&gt;&gt; for sorted_key in sorted(t, key=lambda k: len(t[k]), reverse=True):
...     print sorted_key, t[sorted_key]

rk5 [1, 100, 3, 4, 3, 3]
rand_key_2 [13, 23]
rand_key_3 [1]
rand_key_1 ['x']
</snippet></ROW><ROW><id>12905374</id><snippet>x</snippet></ROW><ROW><id>12905374</id><snippet>&gt;&gt;&gt; a = b = []
&gt;&gt;&gt; a += [5]
&gt;&gt;&gt; a
[5]
&gt;&gt;&gt; b
[5]
&gt;&gt;&gt; a = a + [5]
&gt;&gt;&gt; a
[5, 5]
&gt;&gt;&gt; b
[5]
</snippet></ROW><ROW><id>12905374</id><snippet>+</snippet></ROW><ROW><id>12905374</id><snippet>__add__</snippet></ROW><ROW><id>12905374</id><snippet>+=</snippet></ROW><ROW><id>12905374</id><snippet>__iadd__</snippet></ROW><ROW><id>12905374</id><snippet>self</snippet></ROW><ROW><id>12905458</id><snippet>elev</snippet></ROW><ROW><id>12905458</id><snippet>azim</snippet></ROW><ROW><id>12905458</id><snippet>    from mpl_toolkits.mplot3d import Axes3D
    ax = Axes3D(fig)
    ax.scatter(xx,yy,zz, marker='o', s=20, c="goldenrod", alpha=0.6)
    for ii in xrange(0,360,1):
        ax.view_init(elev=10., azim=ii)
        savefig("movie"%ii+".png")
</snippet></ROW><ROW><id>12905481</id><snippet>import numpy as np
from scipy import optimize
from multiprocessing import Pool

def square(x, a=1):
    return [np.sum(x**2 + a), 2*x]

def minimize(args):
    f,x,a = args
    res = optimize.minimize(f, x, method = 'BFGS', jac = True, args = [a])
    return res.x

# your a values
a = np.arange(1,11)

# initial guess for all the x values
x = np.empty(len(a))
x[:] = 25

args = [(square,a[i],x[i]) for i in range(10)]
p = Pool(4)
print p.map(minimize,args)
</snippet></ROW><ROW><id>12905550</id><snippet>copy</snippet></ROW><ROW><id>12905550</id><snippet>import copy</snippet></ROW><ROW><id>12905550</id><snippet>deepcopy</snippet></ROW><ROW><id>12905550</id><snippet>bool</snippet></ROW><ROW><id>12905550</id><snippet>copy.copy(List)</snippet></ROW><ROW><id>12905550</id><snippet>list(List)</snippet></ROW><ROW><id>12905550</id><snippet>List[:]</snippet></ROW><ROW><id>12905550</id><snippet>getStartState</snippet></ROW><ROW><id>12905550</id><snippet>def getStartState(self):
    return (self.startingPosition[0], self.startingPosition[1],
            tuple(self.cornerList))
</snippet></ROW><ROW><id>12905554</id><snippet>in</snippet></ROW><ROW><id>12905554</id><snippet>not in</snippet></ROW><ROW><id>12905554</id><snippet>__contains__</snippet></ROW><ROW><id>12905554</id><snippet>in</snippet></ROW><ROW><id>12905554</id><snippet>not in</snippet></ROW><ROW><id>12905554</id><snippet>O(n)</snippet></ROW><ROW><id>12905592</id><snippet>iter()</snippet></ROW><ROW><id>12905592</id><snippet>ThreadPool</snippet></ROW><ROW><id>12905592</id><snippet>pool.iter()</snippet></ROW><ROW><id>12905592</id><snippet>pool.iter()</snippet></ROW><ROW><id>12905592</id><snippet>import time
from threadpool import ThreadPool
pool = ThreadPool(max_threads=25, catch_returns=True)

# decorate any functions you need to aggregate
# if you're pulling a function from an outside source
# you can still say 'func = pool(func)' or 'pool(func)()
@pool
def data(ID, start):
    for i in xrange(start, start+4):
        yield ID, i
        time.sleep(1)

# each of these calls will spawn a thread and return immediately
# make sure you do either pool.finish() or pool.iter()
# otherwise your program will exit before the threads finish
data("generator 1", 5)
data("generator 2", 10)
data("generator 3", 64)

for value in pool.iter():
    # this will print the generators' return values as they yield
    print value
</snippet></ROW><ROW><id>12905800</id><snippet>1;5;7;6;
3;8;1;1;
</snippet></ROW><ROW><id>12905800</id><snippet>valuelist=[]
for line_str in read_file:
     for cell in line_str.split(";"):
         valuelist.append(int(cell))
print(max(valuelist))
print(min(valuelist))
</snippet></ROW><ROW><id>12905838</id><snippet>try :
    if my_array[i][j] : #Checks if the array contains something not empty
        if isinstance(my_array[i][j], YourObjectType) :
            print "We have a type YourObjectType at position %d, %d" % (i, j)
except : 
    print "Ouch, nothing in the position %d,%d" % (i, j)
</snippet></ROW><ROW><id>12905850</id><snippet>'B'</snippet></ROW><ROW><id>12905850</id><snippet>driver.find_element_by_id("IndexControl1")</snippet></ROW><ROW><id>12905850</id><snippet>IndexControl1</snippet></ROW><ROW><id>12905850</id><snippet>id</snippet></ROW><ROW><id>12905850</id><snippet>alphabet = driver.find_element_by_id("IndexControl1")
link_b = alphabet.find_element_by_link_text("B")
</snippet></ROW><ROW><id>12905850</id><snippet>http://www.lw.com/people?searchIndex=B&amp;esmode=1</snippet></ROW><ROW><id>12905850</id><snippet>NoSuchElementException</snippet></ROW><ROW><id>12905850</id><snippet>NoSuchElementException</snippet></ROW><ROW><id>12906014</id><snippet>setdefault()</snippet></ROW><ROW><id>12906014</id><snippet>dic.setdefault(key,[]).append(value)
</snippet></ROW><ROW><id>12906014</id><snippet>    setdefault(...)
        D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D
</snippet></ROW><ROW><id>12906044</id><snippet>csv</snippet></ROW><ROW><id>12906044</id><snippet>file = r"http://finance.yahoo.com/d/quotes.csv?s=MSFT&amp;f=snl1"

import urllib
text = urllib.urlopen(file).read()

&gt;&gt;&gt; print text 
... "MSFT","Microsoft Corpora",29.51
</snippet></ROW><ROW><id>12906235</id><snippet>cell</snippet></ROW><ROW><id>12906235</id><snippet>id(mlist[i].possibles)</snippet></ROW><ROW><id>12906235</id><snippet>i</snippet></ROW><ROW><id>12906235</id><snippet>def __init__(self, value):
    self.possibles = [ "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
</snippet></ROW><ROW><id>12906338</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>12906456</id><snippet>datetime</snippet></ROW><ROW><id>12906456</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime
&lt;module 'datetime' from '/usr/lib/python2.6/lib-dynload/datetime.so'&gt;
&gt;&gt;&gt; datetime.datetime(2001,5,1)
datetime.datetime(2001, 5, 1, 0, 0)
</snippet></ROW><ROW><id>12906456</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime
&lt;type 'datetime.datetime'&gt;
&gt;&gt;&gt; datetime.datetime(2001,5,1) # You shouldn't expect this to work 
                                # as you imported the type, not the module
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'datetime.datetime' has no attribute 'datetime'
&gt;&gt;&gt; datetime(2001,5,1)
datetime.datetime(2001, 5, 1, 0, 0)
</snippet></ROW><ROW><id>12906456</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>12906569</id><snippet>else</snippet></ROW><ROW><id>12906569</id><snippet>else</snippet></ROW><ROW><id>12906569</id><snippet>elif</snippet></ROW><ROW><id>12906605</id><snippet>socket</snippet></ROW><ROW><id>12906605</id><snippet>timeout</snippet></ROW><ROW><id>12906605</id><snippet>mysocket</snippet></ROW><ROW><id>12906605</id><snippet>socket.socket</snippet></ROW><ROW><id>12906605</id><snippet>timeout</snippet></ROW><ROW><id>12906605</id><snippet>except timeout:
    print 'Request timed out!'
    mySocket.close()
</snippet></ROW><ROW><id>12906605</id><snippet>import *</snippet></ROW><ROW><id>12906638</id><snippet>#version 120
</snippet></ROW><ROW><id>12906638</id><snippet>texture2D</snippet></ROW><ROW><id>12906638</id><snippet>(0, 0, 0, 1)</snippet></ROW><ROW><id>12906638</id><snippet>(0, 0, 0, 0)</snippet></ROW><ROW><id>12906638</id><snippet>GL_LINK_STATUS</snippet></ROW><ROW><id>12906638</id><snippet>glGetProgramiv</snippet></ROW><ROW><id>12906638</id><snippet>GL_LINK_STATUS</snippet></ROW><ROW><id>12906638</id><snippet>0</snippet></ROW><ROW><id>12906708</id><snippet>&gt;&gt;&gt; df = pandas.DataFrame([[2, 3, 5]], columns=["A", "B", "C"])
&gt;&gt;&gt; df
   A  B  C
0  2  3  5
&gt;&gt;&gt; df.to_csv('someCSV.csv')
&gt;&gt;&gt; df**0.5
          A         B         C
0  1.414214  1.732051  2.236068
&gt;&gt;&gt; (df**0.5).to_csv('someCSV2.csv')
</snippet></ROW><ROW><id>12906711</id><snippet>print zip(*[x, y])
</snippet></ROW><ROW><id>12906711</id><snippet>print zip(x,y)
</snippet></ROW><ROW><id>12906711</id><snippet>print zip( a[0], b[0] )
print zip( a[1], b[1] )
</snippet></ROW><ROW><id>12906711</id><snippet>map</snippet></ROW><ROW><id>12906711</id><snippet>map(zip,a,b) #[[(1, 10), (2, 11), (3, 12)], [(4, 13), (5, 14), (6, 15)]]
</snippet></ROW><ROW><id>12906966</id><snippet>eg.textbox</snippet></ROW><ROW><id>12906966</id><snippet>filename = eg.filesavebox(msg=None
                        , title='Save Pair List'
                        , default="pairs.txt"
                        , filetypes=['*.txt']
                        )

with open(filename, 'wt') as output:
    output.write(str(pList)+'\n')
</snippet></ROW><ROW><id>12906966</id><snippet>with open(filename, 'wt') as output:
    for pair in pList:
        output.write(pair+'\n')
</snippet></ROW><ROW><id>12906966</id><snippet>with</snippet></ROW><ROW><id>12907171</id><snippet>for key, value in signatures.iteritems():
    if value is not None:
        mod_time, hash = value[1:] 
</snippet></ROW><ROW><id>12907341</id><snippet>hasattr()</snippet></ROW><ROW><id>12907341</id><snippet>if hasattr(self.model, 'documents'):
    doStuff(self.model.documents)
</snippet></ROW><ROW><id>12907341</id><snippet>try:
    doStuff(self.model.documents)
except AttributeError:
    otherStuff()
</snippet></ROW><ROW><id>12907402</id><snippet>if len(y) == 4:
    x = int(y[3]) + int([2]) + int(y[1]) + int([0])
    y = str(x)

if len(y) == 3:
    x = int([2]) + int(y[1]) + int([0])
    y = str(x)

if len(y) == 2:
    x = int(y[1]) + int([0])
    y = str(x) 

answer = int(y) 
</snippet></ROW><ROW><id>12907402</id><snippet>x = int(yearString) 

d3 = x // 1000
x %= 1000

d2 = x // 100
x %= 100

d1 = x // 10
d0 = x % 10

answer = d3 + d2 + d1 + d0
</snippet></ROW><ROW><id>12907402</id><snippet>y = int(yearString)
x = 0  # we will accumulate the sum in x
while y != 0:
    x += y % 10  # add one digit
    y //= 10  # discard one digit
    if y == 0 and x &gt; 10:
        # We have pulled out all the digits from y, but x has
        # multiple digits.  Start over so we can sum the digits
        # from x.
        y = x
        x = 0

answer = x
</snippet></ROW><ROW><id>12907566</id><snippet>pip</snippet></ROW><ROW><id>12907566</id><snippet>pip</snippet></ROW><ROW><id>12907566</id><snippet>pip</snippet></ROW><ROW><id>12907566</id><snippet>curl http://python-distribute.org/distribute_setup.py | python</snippet></ROW><ROW><id>12907566</id><snippet>curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python</snippet></ROW><ROW><id>12907566</id><snippet>pip install numpy</snippet></ROW><ROW><id>12907566</id><snippet>Unable to find vcvarsall.bat</snippet></ROW><ROW><id>12907566</id><snippet>gcc exited with status code 1</snippet></ROW><ROW><id>12907566</id><snippet>easy_install http://www.lfd.uci.edu/~gohlke/pythonlibs/2kgjgnai/numpy-MKL-1.6.2.win-amd64-py2.6.exe
</snippet></ROW><ROW><id>12907566</id><snippet>import numpy</snippet></ROW><ROW><id>12907698</id><snippet>scheduler.enter</snippet></ROW><ROW><id>12907698</id><snippet>cancel</snippet></ROW><ROW><id>12907698</id><snippet>from stocktrace.util import settings
from stocktrace.parse.sinaparser import getMyStock   
import time, os, sys, sched

class Monitor(object):
    def __init__(self):
        self.schedule = sched.scheduler(time.time, time.sleep)
        self.interval = settings.POLLING_INTERVAL
        self._running = False

    def periodic(self, action, actionargs=()):
        if self._running:
            self.event = self.scheduler.enter(self.interval, 1, self.periodic, (action, actionargs))
            action(*actionargs)

    def start(self):
        self._running = True
        self.periodic(getMyStock)
        self.schedule.run( )

    def stop(self):
        self._running = False
        if self.schedule and self.event:
            self.schedule.cancel(self.event)
</snippet></ROW><ROW><id>12908131</id><snippet>SubmitField</snippet></ROW><ROW><id>12908131</id><snippet>SubmitField</snippet></ROW><ROW><id>12908131</id><snippet>BooleanField</snippet></ROW><ROW><id>12908131</id><snippet>class SubmitField(BooleanField):
    """
    Represents an ``&lt;input type="submit"&gt;``.  This allows checking if a given
    submit button has been pressed.
    """
    widget = widgets.SubmitInput()
</snippet></ROW><ROW><id>12908131</id><snippet>class SubmitInput(Input):
    """
    Renders a submit button.

    The field's label is used as the text of the submit button instead of the
    data on the field.
    """
    input_type = 'submit'

    def __call__(self, field, **kwargs): 
        kwargs.setdefault('value', field.label.text)
        return super(SubmitInput, self).__call__(field, **kwargs)
</snippet></ROW><ROW><id>12908345</id><snippet>&gt;&gt;&gt; 'abc'.count('')
4
</snippet></ROW><ROW><id>12908345</id><snippet>count</snippet></ROW><ROW><id>12908345</id><snippet>len(abc)</snippet></ROW><ROW><id>12908345</id><snippet>def valid_letter_sequence(abc):
    return not (set(abc) - set('AEIOU'))
</snippet></ROW><ROW><id>12908393</id><snippet>Procfile</snippet></ROW><ROW><id>12908393</id><snippet>web: python main.py -i json-rpc
</snippet></ROW><ROW><id>12908393</id><snippet>virtualenv</snippet></ROW><ROW><id>12908393</id><snippet>requirements.txt</snippet></ROW><ROW><id>12908393</id><snippet>pip freeze &gt; requirements.txt</snippet></ROW><ROW><id>12908393</id><snippet>git add .</snippet></ROW><ROW><id>12908393</id><snippet>git commit -m "added requirements.txt"</snippet></ROW><ROW><id>12908527</id><snippet>input_string</snippet></ROW><ROW><id>12908527</id><snippet>name = re.search(r"(?&lt;=name\=\')[\w\.]+?(?=\')", input_string).group(0)
versionName = re.search(r"(?&lt;=versionName\=\')\d+?\.\d+?(?=\')", input_string).group(0)
permissions = re.findall(r'(?&lt;=android\.permission\.)[A-Z_]+(?=\')', input_string)
</snippet></ROW><ROW><id>12908527</id><snippet>(?&lt;=name\=\')</snippet></ROW><ROW><id>12908527</id><snippet>name='</snippet></ROW><ROW><id>12908527</id><snippet>\</snippet></ROW><ROW><id>12908527</id><snippet>=</snippet></ROW><ROW><id>12908527</id><snippet>'</snippet></ROW><ROW><id>12908527</id><snippet>=</snippet></ROW><ROW><id>12908527</id><snippet>name='</snippet></ROW><ROW><id>12908527</id><snippet>[\w\.]+?</snippet></ROW><ROW><id>12908527</id><snippet>\w</snippet></ROW><ROW><id>12908527</id><snippet>\.</snippet></ROW><ROW><id>12908527</id><snippet>.</snippet></ROW><ROW><id>12908527</id><snippet>[]</snippet></ROW><ROW><id>12908527</id><snippet>_</snippet></ROW><ROW><id>12908527</id><snippet>.</snippet></ROW><ROW><id>12908527</id><snippet>+</snippet></ROW><ROW><id>12908527</id><snippet>[\w\.]</snippet></ROW><ROW><id>12908527</id><snippet>?</snippet></ROW><ROW><id>12908527</id><snippet>+</snippet></ROW><ROW><id>12908527</id><snippet>[\w\.]</snippet></ROW><ROW><id>12908527</id><snippet>(?=\')</snippet></ROW><ROW><id>12908527</id><snippet>'</snippet></ROW><ROW><id>12908527</id><snippet>\</snippet></ROW><ROW><id>12908527</id><snippet>'</snippet></ROW><ROW><id>12908527</id><snippet>'</snippet></ROW><ROW><id>12909109</id><snippet>modelform</snippet></ROW><ROW><id>12909109</id><snippet>Meta</snippet></ROW><ROW><id>12909109</id><snippet>class MyModelForm(ModelForm):
    class Meta:
        model = MyModel
        widgets = {
            'description': Textarea(attrs={'rows': 4, 'cols': 40}),
        }
</snippet></ROW><ROW><id>12909136</id><snippet>obj</snippet></ROW><ROW><id>12909136</id><snippet>None</snippet></ROW><ROW><id>12909136</id><snippet>self &lt; obj</snippet></ROW><ROW><id>12909136</id><snippet>obj1 &lt; None</snippet></ROW><ROW><id>12909136</id><snippet>True</snippet></ROW><ROW><id>12909136</id><snippet>obj1 &gt; None</snippet></ROW><ROW><id>12909136</id><snippet>false</snippet></ROW><ROW><id>12909479</id><snippet>paramiko</snippet></ROW><ROW><id>12909479</id><snippet>SFTPClient</snippet></ROW><ROW><id>12909479</id><snippet>import paramiko

source = r'C:\Somedir\somefile.txt'
dest = r'/home/user/file.txt'
hostname = 'linux.server.com'
port = 22 # default port for SSH
username = 'user'
password = 'secret'

try:
    t = paramiko.Transport((hostname, port))
    t.connect(username=username, password=password)
    sftp = paramiko.SFTPClient.from_transport(t)
    sftp.put(source, dest)
finally:
    t.close()
</snippet></ROW><ROW><id>12909879</id><snippet>fb_re = re.compile(r'www.facebook.com([^"]+)')
</snippet></ROW><ROW><id>12909879</id><snippet>results = fb_re.findall(url)
</snippet></ROW><ROW><id>12909879</id><snippet>()</snippet></ROW><ROW><id>12909879</id><snippet>[]</snippet></ROW><ROW><id>12909879</id><snippet>^</snippet></ROW><ROW><id>12909879</id><snippet>"</snippet></ROW><ROW><id>12909879</id><snippet>"</snippet></ROW><ROW><id>12909879</id><snippet>fb_re = re.compile(r'www.facebook.com(\S+)')
</snippet></ROW><ROW><id>12909879</id><snippet>fb_re = re.compile(r'www.facebook.com(\S+)\.\s')
</snippet></ROW><ROW><id>12909879</id><snippet>.</snippet></ROW><ROW><id>12909879</id><snippet>/some.other</snippet></ROW><ROW><id>12909879</id><snippet>/some.other.</snippet></ROW><ROW><id>12909879</id><snippet>.</snippet></ROW><ROW><id>12909902</id><snippet>&gt;&gt;&gt; '0123456'[:3]
'012'
&gt;&gt;&gt; '0123456'[:3:-1]
'654'
&gt;&gt;&gt; '0123456'[3:]
'3456'
&gt;&gt;&gt; '0123456'[3::-1]
'3210'
</snippet></ROW><ROW><id>12911024</id><snippet>xmlstr = """&lt;TopoDefs&gt;
  &lt;Device Name="SNB" LogicalType="CORE"
          IdCode="0x03886A21" Mask="0xf0000000"&gt;
    &lt;Variable name="A0" value="0x52001321" type="GREEN" /&gt;
    &lt;Variable name="A1" value="0x51001321" type="GREEN" /&gt;
    &lt;Variable name="A2" value="0x03001321" type="GREEN" /&gt;
    &lt;Variable name="A3" value="0x14001321" type="GREEN" /&gt;
    &lt;Variable name="B0" value="0x5A001321" type="BLUE" /&gt;
    &lt;Variable name="B1" value="0x51001321" type="BLUE" /&gt;
    &lt;Variable name="B2" value="0x04001321" type="BLUE" /&gt;
    &lt;Variable name="B3" value="0x05001321" type="BLUE" /&gt;
  &lt;/Device&gt;
&lt;/TopoDefs&gt;"""

import xml.etree.ElementTree as ET
document = ET.fromstring(xmlstr)

for dev in document.iter('Device'):
    for var in dev.iter('Variable'):
        var.set('value', 'new_value')

print ET.tostring(document)
</snippet></ROW><ROW><id>12911040</id><snippet>out.strip()</snippet></ROW><ROW><id>12911089</id><snippet>'\x81\x12\xC0\x00\x01\x05'</snippet></ROW><ROW><id>12911110</id><snippet>pip -e</snippet></ROW><ROW><id>12911110</id><snippet>virtualenv</snippet></ROW><ROW><id>12911172</id><snippet>absolute_url()</snippet></ROW><ROW><id>12911172</id><snippet>request/getURL</snippet></ROW><ROW><id>12911172</id><snippet>&lt;form method="post" tal:attributes="action view/absolute_url" &gt;
    &lt;input type="hidden" name="filename" value="" tal:attributes="value item/filename" /&gt;
    &lt;input type="submit" name="form.action.convert" value="Convert" /&gt; 
&lt;/form&gt;
</snippet></ROW><ROW><id>12911172</id><snippet>filename</snippet></ROW><ROW><id>12911172</id><snippet>__init__</snippet></ROW><ROW><id>12911172</id><snippet>BrowserView</snippet></ROW><ROW><id>12911172</id><snippet>def __call__(self):
    if 'form.action.convert' in self.request.form: 
        self.convert_document()
</snippet></ROW><ROW><id>12911172</id><snippet>convert_document</snippet></ROW><ROW><id>12911172</id><snippet>self.context</snippet></ROW><ROW><id>12911172</id><snippet>self.request.form['filename']</snippet></ROW><ROW><id>12911172</id><snippet>self.request.form['filename']</snippet></ROW><ROW><id>12911172</id><snippet>get(..., '')</snippet></ROW><ROW><id>12911172</id><snippet>__call__</snippet></ROW><ROW><id>12911172</id><snippet>__init__</snippet></ROW><ROW><id>12911172</id><snippet>redirect</snippet></ROW><ROW><id>12911172</id><snippet>self.request</snippet></ROW><ROW><id>12911172</id><snippet>return self.request.response.redirect(self.context.absolute_url())
</snippet></ROW><ROW><id>12911172</id><snippet>__call__</snippet></ROW><ROW><id>12911172</id><snippet>BrowserView</snippet></ROW><ROW><id>12911172</id><snippet>class Html(BrowserView):
    def __call__(self):
        if 'form.action.convert' in self.request:
            self.convert_document()
            return self.request.response.redirect(self.context.absolute_url())
        return self.index()

    def convert_document(self):
       """ Do something """
       context = self.context
       filename = self.request.form['filename']
       # Do something with the context and filename
</snippet></ROW><ROW><id>12911259</id><snippet>thread = Thread(target=self.counterr)
thread.start()
</snippet></ROW><ROW><id>12911259</id><snippet>QThread</snippet></ROW><ROW><id>12911429</id><snippet>IIntIds</snippet></ROW><ROW><id>12911429</id><snippet>from zope.component import getUtility
from zope.intid.interfaces import IIntIds

intidutil = getUtility(IIntIds)
object = intidutil.getObject(id)
</snippet></ROW><ROW><id>12911429</id><snippet>.queryObject()</snippet></ROW><ROW><id>12911429</id><snippet>default</snippet></ROW><ROW><id>12911429</id><snippet>None</snippet></ROW><ROW><id>12911511</id><snippet>def Type_Check(correct_type):
    def new_function(old_function):
        def another_newfunction(arg):
            if(isinstance(arg, correct_type)):
                return old_function(arg)
            else:
                print "Bad Type"
        return another_newfunction
    return new_function
</snippet></ROW><ROW><id>12911519</id><snippet>relevance = forms.MultipleChoiceField(choices=mychoices, widget=forms.CheckboxSelectMultiple)
</snippet></ROW><ROW><id>12911519</id><snippet>choices = User.objects.filter(category__name='city').values_list('id', 'first_name')
</snippet></ROW><ROW><id>12911519</id><snippet>(1, 'Mark')
(2, 'Jack')
...
</snippet></ROW><ROW><id>12911617</id><snippet>LIMIT %s OFFSET %s</snippet></ROW><ROW><id>12911948</id><snippet>#read from a file
with open("path/to/file", "rb") as read_file:
    contents = read_file.read()
#write to a file
with open("path/to/file", "wb") as write_file:
    write_file.write(contents)
</snippet></ROW><ROW><id>12911948</id><snippet>import socket

TCP_IP = '127.0.0.1'
TCP_PORT = 5005
BUFFER_SIZE = 1024
MESSAGE = "Hello, World!"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
s.send(MESSAGE)
data = s.recv(BUFFER_SIZE)
s.close()

print "received data:", data
</snippet></ROW><ROW><id>12912127</id><snippet>def adopt(parent_id,child_id):
    parent = DBSession.query(Item).get(parent_id)
    child  = DBSession.query(Item).get(child_id)
    parent.children.append(child)
</snippet></ROW><ROW><id>12912408</id><snippet>from matplotlib.dates import DateFormatter
formatter = DateFormatter('%Y-%m-%d %H:%M:%S')
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
</snippet></ROW><ROW><id>12912423</id><snippet>&gt;&gt;&gt; hstr
'81 12 C0 00 01 05'
&gt;&gt;&gt; hex_series
'81\\x12\\xC0\\x00\\x01\\x05'
&gt;&gt;&gt; hex_series_caps
'81\\x12\\xc0\\x00\\x01\\x05'
</snippet></ROW><ROW><id>12912423</id><snippet>"\\x"</snippet></ROW><ROW><id>12912423</id><snippet>x</snippet></ROW><ROW><id>12912423</id><snippet>'\x63'</snippet></ROW><ROW><id>12912423</id><snippet>'c'</snippet></ROW><ROW><id>12912423</id><snippet>&gt;&gt;&gt; '\x63'
'c'
&gt;&gt;&gt; '\\' + 'x63'
'\\x63'
</snippet></ROW><ROW><id>12912423</id><snippet>import base64
data = base64.b16decode(hstr.replace(' ', ''))
print hex(crc16(data))
</snippet></ROW><ROW><id>12913064</id><snippet>Image.show()</snippet></ROW><ROW><id>12913064</id><snippet>xv &lt;temp-image-file-pil-creates&gt;</snippet></ROW><ROW><id>12913064</id><snippet>xv</snippet></ROW><ROW><id>12913182</id><snippet>pip freeze &gt; reuirements.txt</snippet></ROW><ROW><id>12913182</id><snippet>venv\Scripts\activate.bat</snippet></ROW><ROW><id>12913182</id><snippet>venv\Scripts\activate.ps1</snippet></ROW><ROW><id>12913182</id><snippet>sudo</snippet></ROW><ROW><id>12913182</id><snippet>sudo bash
source venv/bin/activate
pip install Flask
</snippet></ROW><ROW><id>12913182</id><snippet>source venv/bin/activate
pip install Flask
</snippet></ROW><ROW><id>12913336</id><snippet>itertools.product()</snippet></ROW><ROW><id>12913336</id><snippet>&gt;&gt;&gt; l = [['1','2','3'],['a','b','c'],['x','y','z']]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product(*l))
[('1', 'a', 'x'), ('1', 'a', 'y'), ('1', 'a', 'z'), ('1', 'b', 'x'), 
 ('1', 'b', 'y'), ('1', 'b', 'z'), ('1', 'c', 'x'), ('1', 'c', 'y'), 
 ('1', 'c', 'z'), ('2', 'a', 'x'), ('2', 'a', 'y'), ('2', 'a', 'z'), 
 ('2', 'b', 'x'), ('2', 'b', 'y'), ('2', 'b', 'z'), ('2', 'c', 'x'), 
 ('2', 'c', 'y'), ('2', 'c', 'z'), ('3', 'a', 'x'), ('3', 'a', 'y'), 
 ('3', 'a', 'z'), ('3', 'b', 'x'), ('3', 'b', 'y'), ('3', 'b', 'z'), 
 ('3', 'c', 'x'), ('3', 'c', 'y'), ('3', 'c', 'z')]
</snippet></ROW><ROW><id>12913336</id><snippet>&gt;&gt;&gt; for i in range(len(l)):
...     print(list(itertools.product(*l[:i+1])))
...
[('1',), ('2',), ('3',)]
[('1', 'a'), ('1', 'b'), ('1', 'c'), ('2', 'a'), ('2', 'b'), ('2', 'c'), 
 ('3', 'a'), ('3', 'b'), ('3', 'c')]
[('1', 'a', 'x'), ('1', 'a', 'y'), ('1', 'a', 'z'), ('1', 'b', 'x'), 
 ('1', 'b', 'y'), ('1', 'b', 'z'), ('1', 'c', 'x'), ('1', 'c', 'y'), 
 ('1', 'c', 'z'), ('2', 'a', 'x'), ('2', 'a', 'y'), ('2', 'a', 'z'), 
 ('2', 'b', 'x'), ('2', 'b', 'y'), ('2', 'b', 'z'), ('2', 'c', 'x'), 
 ('2', 'c', 'y'), ('2', 'c', 'z'), ('3', 'a', 'x'), ('3', 'a', 'y'), 
 ('3', 'a', 'z'), ('3', 'b', 'x'), ('3', 'b', 'y'), ('3', 'b', 'z'), 
 ('3', 'c', 'x'), ('3', 'c', 'y'), ('3', 'c', 'z')]
</snippet></ROW><ROW><id>12913336</id><snippet>&gt;&gt;&gt; result = []
&gt;&gt;&gt; for i in range(len(l)):
...     result.extend(list(itertools.product(*l[:i+1])))
...
&gt;&gt;&gt; result
[('1',), ('2',), ('3',), ('1', 'a'), ('1', 'b'), ('1', 'c'), ('2', 'a'), 
 ('2', 'b'), ('2', 'c'), ('3', 'a'), ('3', 'b'), ('3', 'c'), ('1', 'a', 'x'), 
 ('1', 'a', 'y'), ('1', 'a', 'z'), ('1', 'b', 'x'), ('1', 'b', 'y'), 
 ('1', 'b', 'z'), ('1', 'c', 'x'), ('1', 'c', 'y'), ('1', 'c', 'z'), 
 ('2', 'a', 'x'), ('2', 'a', 'y'), ('2', 'a', 'z'), ('2', 'b', 'x'), 
 ('2', 'b', 'y'), ('2', 'b', 'z'), ('2', 'c', 'x'), ('2', 'c', 'y'), 
 ('2', 'c', 'z'), ('3', 'a', 'x'), ('3', 'a', 'y'), ('3', 'a', 'z'), 
 ('3', 'b', 'x'), ('3', 'b', 'y'), ('3', 'b', 'z'), ('3', 'c', 'x'), 
 ('3', 'c', 'y'), ('3', 'c', 'z')]
</snippet></ROW><ROW><id>12913336</id><snippet>&gt;&gt;&gt; sorted(result)
[('1',), ('1', 'a'), ('1', 'a', 'x'), ('1', 'a', 'y'), ('1', 'a', 'z'), 
 ('1', 'b'), ('1', 'b', 'x'), ('1', 'b', 'y'), ('1', 'b', 'z'), ('1', 'c'), 
 ('1', 'c', 'x'), ('1', 'c', 'y'), ('1', 'c', 'z'), ('2',), ('2', 'a'), 
 ('2', 'a', 'x'), ('2', 'a', 'y'), ('2', 'a', 'z'), ('2', 'b'), ('2', 'b', 'x'), 
 ('2', 'b', 'y'), ('2', 'b', 'z'), ('2', 'c'), ('2', 'c', 'x'), ('2', 'c', 'y'), 
 ('2', 'c', 'z'), ('3',), ('3', 'a'), ('3', 'a', 'x'), ('3', 'a', 'y'), 
 ('3', 'a', 'z'), ('3', 'b'), ('3', 'b', 'x'), ('3', 'b', 'y'), ('3', 'b', 'z'), 
 ('3', 'c'), ('3', 'c', 'x'), ('3', 'c', 'y'), ('3', 'c', 'z')]
</snippet></ROW><ROW><id>12913571</id><snippet>del</snippet></ROW><ROW><id>12913571</id><snippet>2</snippet></ROW><ROW><id>12913571</id><snippet>a[1]</snippet></ROW><ROW><id>12913571</id><snippet>b</snippet></ROW><ROW><id>12913571</id><snippet>a[1]</snippet></ROW><ROW><id>12913571</id><snippet>2</snippet></ROW><ROW><id>12913571</id><snippet>a[1]</snippet></ROW><ROW><id>12913571</id><snippet>b</snippet></ROW><ROW><id>12913571</id><snippet>2</snippet></ROW><ROW><id>12913571</id><snippet>del</snippet></ROW><ROW><id>12913656</id><snippet>&lt;VirtualHost *&gt;
....
LogLevel debug
ErrorLog /var/log/apache/mysite/error__log.txt
CustomLog /var/log/apache/mysite/custom_log.txt combined
....
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>12913670</id><snippet>&lt;script type="text/javascript"&gt;
window.onload = function() {
    for (var i = 0; i &lt; document.forms.length; i++) {
        var oForm = document.forms[i];
        oForm.onsubmit = function() {
            for (var j = 0; j &lt; this.elements.length; j++) {
                var element = this.elements[j];
                if (element.type === "text" &amp;&amp; element.value === "")
                    element.disabled = true;
            }
        };
    }
};​
&lt;/script&gt;
</snippet></ROW><ROW><id>12913967</id><snippet>[Ljava.lang.Object;@1ba9f7</snippet></ROW><ROW><id>12913967</id><snippet>Arrays.asList(mylist)</snippet></ROW><ROW><id>12913967</id><snippet>for (Object obj: myArray)
{ 
   System.out.println(obj);
}
</snippet></ROW><ROW><id>12914132</id><snippet>java -jar selenium-server-standalone-&lt;version-number&gt;.jar
</snippet></ROW><ROW><id>12914362</id><snippet>regex = re.compile(r'ORA-16252: unable to extend segment by \d+ in tablespace')
if regex.match(s):
    ...
</snippet></ROW><ROW><id>12915206</id><snippet>do_calculation</snippet></ROW><ROW><id>12915206</id><snippet>def do_calculation(data):
    np.random.seed()
    rand=np.random.randint(10)
    print data, rand
    return data * 2
</snippet></ROW><ROW><id>12915546</id><snippet>pos.txt</snippet></ROW><ROW><id>12915546</id><snippet>neg.txt</snippet></ROW><ROW><id>12915546</id><snippet>train_samples = {}

with file('pos.txt', 'rt') as f:
    for line in f.readlines():
        train_samples[line] = 'pos'
</snippet></ROW><ROW><id>12915546</id><snippet>train_samples</snippet></ROW><ROW><id>12915817</id><snippet>myDict = {'111, A': 4, '112, A': 3, '111, B': 10} # input

# keep track of the first half of the composite keys that you've already handled
# This is used to avoid redundant printing
done = set()

for key in myDict:
    # first half of your composite key (eg. '111')
    # I'll be using '111' to explain the rest of the code
    prefix = key.split(',')[0]

    if prefix not in done: # if you haven't already printed out the stuff for '111'
        print prefix # print '111'
        done.add(prefix) # add '111' to done, so that you don't print it out again

        # for all keys in myDict that are of the form "111,X" where X can be anything (e.g. A)
        for k in [k for k in myDict if k.split(',')[0]==prefix]:

            # print a &lt;tab&gt; and the suffix (in our example, "A") and the count value (in myDict, this value is 4)
            print '\t', k.split(',')[1], myDict[k]
</snippet></ROW><ROW><id>12915817</id><snippet>111
     B 10
     A 4
112
     A 3
</snippet></ROW><ROW><id>12915817</id><snippet>for k in [k for k in myDict if k.split(',')[0]==prefix]:</snippet></ROW><ROW><id>12915817</id><snippet>for k in …</snippet></ROW><ROW><id>12915817</id><snippet>[k for k in myDict if k.split(',')[0]==prefix]</snippet></ROW><ROW><id>12915817</id><snippet>myList = []
for k in myDict:
    if k.split(',')[0]==prefix:
        myList.append(k)
</snippet></ROW><ROW><id>12915817</id><snippet>for k in myList:
</snippet></ROW><ROW><id>12915817</id><snippet>for k in myDict</snippet></ROW><ROW><id>12915817</id><snippet>dict</snippet></ROW><ROW><id>12915817</id><snippet>for k in myDict.keys()</snippet></ROW><ROW><id>12915817</id><snippet>myDict.keys()</snippet></ROW><ROW><id>12915817</id><snippet>myDict</snippet></ROW><ROW><id>12915817</id><snippet>for k in myDict</snippet></ROW><ROW><id>12915817</id><snippet>myDict</snippet></ROW><ROW><id>12916319</id><snippet>amd64</snippet></ROW><ROW><id>12916319</id><snippet>lxml</snippet></ROW><ROW><id>12916319</id><snippet>pyxml</snippet></ROW><ROW><id>12916372</id><snippet>with Timeout(2, False):
    node_message = NodeMessage.recv(active_socket)
</snippet></ROW><ROW><id>12916372</id><snippet>class MessageContext(object):
    node_message = None

messageContext = MessageContext()  //shared memmory between greenlets

...

def get_next_message(active_socket)
    messageContext.node_message = NodeMessage.recv(active_socket)

with Timeout(2, False):
     ..putting the actual receving of a message in its own greenlet
     ..makes TimeOut failover/Timeout work again..

    gevent.spawn(get_next_message, active_socket).job()

node_message = messageContext.node_message
</snippet></ROW><ROW><id>12916966</id><snippet>s = r'\x5f\x63\x6c\x6f\x73\x65\x28'
s.replace(r'\x', ' ').lstrip()
# '5f 63 6c 6f 73 65 28'

# or
s[2:].replace(r'\x', ' ')
</snippet></ROW><ROW><id>12917054</id><snippet>settings = {
    "xsrf_cookies": False,
}
</snippet></ROW><ROW><id>12917054</id><snippet> &lt;form method="post" action="/register"&gt;
     &lt;input name="user_name" value="test@test.com"/&gt;
     &lt;input name="password" type="password"/&gt;
     &lt;input type="submit" value="submit"/&gt;
{% raw xsrf_form_html() %}
 &lt;/form&gt;
</snippet></ROW><ROW><id>12917054</id><snippet>  def get(self):
        loader = template.Loader("resources")
        page_contents = loader.load('register_page.html').generate()
        self.write(page_contents)
</snippet></ROW><ROW><id>12917054</id><snippet>  def get(self):
     self.render("../resources/register_page.html")
</snippet></ROW><ROW><id>12917054</id><snippet>  def get(self):
     self.render("register_page.html")
</snippet></ROW><ROW><id>12917342</id><snippet>x</snippet></ROW><ROW><id>12917342</id><snippet>x</snippet></ROW><ROW><id>12917342</id><snippet>x = Int('x')
s = Solver()
s.add(x &lt;= x)
print s.check()
m = s.model()
print m.evaluate(x)
print m.evaluate(x, model_completion=True)
print m
</snippet></ROW><ROW><id>12917443</id><snippet>reinterpret_cast</snippet></ROW><ROW><id>12917443</id><snippet>dynamic_cast</snippet></ROW><ROW><id>12917443</id><snippet>getUnsignedNumber</snippet></ROW><ROW><id>12917443</id><snippet>getSignedNumber</snippet></ROW><ROW><id>12917604</id><snippet>codecs</snippet></ROW><ROW><id>12917604</id><snippet>codecs.encode(b'\x12', 'hex')
</snippet></ROW><ROW><id>12917624</id><snippet>with open("datafile") as f:
    for line in f:  #Line is a string
        #split the string on whitespace, return a list of numbers 
        # (as strings)
        numbers_str = line.split()
        #convert numbers to floats
        numbers_float = [float(x) for x in numbers_str]  #map(float,numbers_str) works too
</snippet></ROW><ROW><id>12917624</id><snippet>with open('datafile') as f:
    for line in f:
        numbers_float = map(float, line.split())
        #work with numbers_float here
</snippet></ROW><ROW><id>12917624</id><snippet>def function(x,y,z):
    return x+y+z
</snippet></ROW><ROW><id>12917624</id><snippet>with open('datafile') as f:
    for line in f:
        numbers_float = map(float, line.split())
        print function(numbers_float[0],numbers_float[1],numbers_float[2])
        #shorthand:  print function(*numbers_float)
</snippet></ROW><ROW><id>12917656</id><snippet>mylist = []
while True:
    try:
        input = int(raw_input("add a number: "))
    except ValueError:
        print "please only input integers, input 0 to quit"
        continue
    if input == 0
        break
    else: 
        mylist.append(int(input))
</snippet></ROW><ROW><id>12917656</id><snippet>mylist</snippet></ROW><ROW><id>12917656</id><snippet>0</snippet></ROW><ROW><id>12918238</id><snippet>dir()</snippet></ROW><ROW><id>12918238</id><snippet>locals()</snippet></ROW><ROW><id>12918238</id><snippet>dir()</snippet></ROW><ROW><id>12918238</id><snippet>locals()</snippet></ROW><ROW><id>12918238</id><snippet>dir(...)
    dir([object]) -&gt; list of strings

    If called without an argument, return the names in the current scope.


locals(...)
    locals() -&gt; dictionary

    Update and return a dictionary containing the current scope's local variables.
</snippet></ROW><ROW><id>12918238</id><snippet>&gt;&gt;&gt; type(locals())
&lt;type 'dict'&gt;
&gt;&gt;&gt; type(dir())
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>12918238</id><snippet>locals()</snippet></ROW><ROW><id>12918238</id><snippet>In [2]: locals()['a']=2

In [3]: a
Out[3]: 2
</snippet></ROW><ROW><id>12918238</id><snippet>dir()</snippet></ROW><ROW><id>12918238</id><snippet>In [7]: dir()[-2]
Out[7]: 'a'

In [8]: dir()[-2]=10

In [9]: dir()[-2]
Out[9]: 'a'

In [10]: a
Out[10]: 2
</snippet></ROW><ROW><id>12918343</id><snippet>ARCHFLAGS='-arch x86_64' python setup.py install</snippet></ROW><ROW><id>12919174</id><snippet>Boost.Python</snippet></ROW><ROW><id>12919174</id><snippet>lvalue</snippet></ROW><ROW><id>12919174</id><snippet>def f(x):
  x = 1

y = 2
f(y)
print(y) # Prints 2
</snippet></ROW><ROW><id>12919174</id><snippet>x</snippet></ROW><ROW><id>12919174</id><snippet>f</snippet></ROW><ROW><id>12919174</id><snippet>void f(int &amp;x) {
  x = 1;
}

void main() {
  int y = 2;
  f(y);
  cout &lt;&lt; y &lt;&lt; endl; // Prints 1.
}
</snippet></ROW><ROW><id>12919174</id><snippet>CSomething.getParams</snippet></ROW><ROW><id>12919174</id><snippet>one, two = 0, 0
one, two = CSomething.getParams(one, two)
print(one, two)
</snippet></ROW><ROW><id>12919174</id><snippet>CSomething.getParams</snippet></ROW><ROW><id>12919174</id><snippet>class GPParameter:
  def __init__(self, one, two):
    self.one = one
    self.two = two

p = GPParameter(0, 0)
CSomething.getParams(p)
print(p.one, p.two)
</snippet></ROW><ROW><id>12919319</id><snippet>d1 = {'Bob': 1, 'Mary': 2, 'Sue': 3, 'George': 4}
d2 = {'Bob': 101, 'Sue': 102, 'Jill': 103, 'Isaac': 104, 'George': 105}
{k: v for k, v in d1.items() if k in d2}
# {'Bob': 1, 'Sue': 3, 'George': 4}
</snippet></ROW><ROW><id>12919319</id><snippet>d2.update(d1)
print d2
# {'Sue': 3, 'Mary': 2, 'Jill': 103, 'Isaac': 104, 'Bob': 1, 'George': 4}
</snippet></ROW><ROW><id>12919319</id><snippet>el1 = ['Bob', 'Mary', 'Sue', 'George']
el2 = ['Bob', 'Sue', 'Jill', 'Isaac', 'George']
dict( (val, idx) for idx, val in enumerate(d1, start=1) if val in set(el2) )
#{'Bob': 1, 'Sue': 3, 'George': 4}
</snippet></ROW><ROW><id>12919319</id><snippet>dict</snippet></ROW><ROW><id>12919319</id><snippet>zip</snippet></ROW><ROW><id>12919319</id><snippet>keys = ['Bob', 'Mary', 'Sue', 'George']  
vals = [1, 2, 3, 4]
dict( zip(keys, vals) )
# {'Bob': 1, 'Mary': 2, 'Sue': 3, 'George': 4}
</snippet></ROW><ROW><id>12919344</id><snippet>printPattern(n+1,k, rep)
</snippet></ROW><ROW><id>12919344</id><snippet>def printPattern(n,k,rep =0):
    'prints a pattern of stars'
    if n == k:
        print ('{}{}'.format(' '*rep,'*'*n))
    elif n%2 == 0:
        rep+=1
        print ('{}{}'.format(' '*rep,'*'*n))
        printPattern(n+1,k, rep)
    else:
        rep+=1
        print ('{}*'.format(' '*rep))
        printPattern(n+1,k, rep)
</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>bar()</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>foo()</snippet></ROW><ROW><id>12919351</id><snippet>foo()</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>bar()</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>foo()</snippet></ROW><ROW><id>12919351</id><snippet>foo()</snippet></ROW><ROW><id>12919351</id><snippet>bar()</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>bar()</snippet></ROW><ROW><id>12919351</id><snippet>x</snippet></ROW><ROW><id>12919351</id><snippet>&gt;&gt;&gt; x = 42
&gt;&gt;&gt; def foo():
...   global x
...   def baz():
...     print(x)
...     print(locals())
...   baz()
... 
&gt;&gt;&gt; foo()
42
{}
</snippet></ROW><ROW><id>12919437</id><snippet>import spynner

def content_ready(browser):
    if 'id="feedback-' in browser.html:
        return True

br = spynner.Browser()
br.load("http://www.venere.com/it/hotel/roma/hotel-ferrari/#reviews", wait_callback=content_ready)

with open("test.html", "w") as hf:
    hf.write(br.html.encode("utf-8"))
</snippet></ROW><ROW><id>12920005</id><snippet>from .. import drawtools
</snippet></ROW><ROW><id>12920094</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>12920094</id><snippet>print</snippet></ROW><ROW><id>12920247</id><snippet>Generator</snippet></ROW><ROW><id>12920247</id><snippet>Generator Expression</snippet></ROW><ROW><id>12920247</id><snippet>List Comprehension</snippet></ROW><ROW><id>12920247</id><snippet>square brackets</snippet></ROW><ROW><id>12920247</id><snippet>brackets</snippet></ROW><ROW><id>12920247</id><snippet>list</snippet></ROW><ROW><id>12920247</id><snippet>next()</snippet></ROW><ROW><id>12920247</id><snippet>generator</snippet></ROW><ROW><id>12920247</id><snippet>yield</snippet></ROW><ROW><id>12920247</id><snippet>List Comprehension</snippet></ROW><ROW><id>12920247</id><snippet>[x * x for x in range(10)]
</snippet></ROW><ROW><id>12920247</id><snippet>[x * x for x in range(10) if x % 2 != 0]
</snippet></ROW><ROW><id>12920247</id><snippet>numbers</snippet></ROW><ROW><id>12920247</id><snippet>Generators</snippet></ROW><ROW><id>12920247</id><snippet>yield</snippet></ROW><ROW><id>12920247</id><snippet>def city_generator():
    yield("Konstanz")
    yield("Zurich")
    yield("Schaffhausen")
    yield("Stuttgart")

&gt;&gt;&gt; x = city_generator()
&gt;&gt;&gt; x.next()
Konstanz
&gt;&gt;&gt; x.next()
Zurich
&gt;&gt;&gt; x.next()
Schaffhausen
&gt;&gt;&gt; x.next()
Stuttgart
&gt;&gt;&gt; x.next()
Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>12920247</id><snippet>next()</snippet></ROW><ROW><id>12920247</id><snippet>yield()</snippet></ROW><ROW><id>12920247</id><snippet>generator</snippet></ROW><ROW><id>12920247</id><snippet>StopIteration</snippet></ROW><ROW><id>12920280</id><snippet>stream</snippet></ROW><ROW><id>12920280</id><snippet>write</snippet></ROW><ROW><id>12920280</id><snippet>write</snippet></ROW><ROW><id>12920280</id><snippet>import logging

class LogList(list):
   def write(self,data):
       self.append(data)

LL = LogList()
logging.basicConfig(stream = LL,level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.error('Wow, this is bad')
logging.warning('And this, too')
logging.debug('foobar')
logging.warning('baz')

for line in sorted(LL):
   print line[:-1]
</snippet></ROW><ROW><id>12920280</id><snippet>levels = {'DEBUG':0,'INFO':1,'WARNING':2,'ERROR':3}
LL.sort(key = lambda x: levels[x.split(':')[0]])
</snippet></ROW><ROW><id>12920479</id><snippet>def RandomSource(N,x0,x1,y0,y1,c0,c1):
    randSources = np.random.random((N,3))
    # print to double-check agruments of the function
    print 'This are scaling values %s %s %s %s %s %s %s' % (N,x0,x1,y0,y1,c0,c1)
    # below should scale a whole matrix
    #[x0 + x*(x1-x0) for x in randSources[:,0]]
    randSources[:,0] = map(lambda x: x0 + x*(x1-x0), randSources[:,0])

    randSources[:,1] = [y0 + y*(y1-y0) for y in randSources[:,1]]
    randSources[:,2] = [c0 + c*(c1-c0) for c in randSources[:,2]]
    return randSources
</snippet></ROW><ROW><id>12920479</id><snippet>randSources[:,1] = ...</snippet></ROW><ROW><id>12920479</id><snippet>&gt;&gt;&gt; l = [1, 2, 3, 4, 5]
&gt;&gt;&gt; [i*2 for i in l]
[2, 4, 6, 8, 10]
&gt;&gt;&gt; l
[1, 2, 3, 4, 5]
&gt;&gt;&gt; l = [i*2 for i in l]
&gt;&gt;&gt; l
[2, 4, 6, 8, 10]
</snippet></ROW><ROW><id>12920610</id><snippet>for product in file1[:]:
    spt = product.split(",")
    for line in spt:
        if line[:3] in test_group:
            x = test.append(product)
            y = file1.remove(product)
</snippet></ROW><ROW><id>12921014</id><snippet>sort filepath | uniq -c</snippet></ROW><ROW><id>12921014</id><snippet>import collections
with open('path/to/file') as f:
    counts = collections.Counter(f)
    outfile = open('path/to/outfile', 'w')
    for line,occ in counts.iteritems():
        outfile.write("%s repeat %d\n" %(line.strip(), occ))
    outfile.close()
</snippet></ROW><ROW><id>12921014</id><snippet>i</snippet></ROW><ROW><id>12921014</id><snippet>j</snippet></ROW><ROW><id>12921014</id><snippet>i</snippet></ROW><ROW><id>12921014</id><snippet>j</snippet></ROW><ROW><id>12921014</id><snippet>v1
v1
v1
v2
v2
v3
v1
</snippet></ROW><ROW><id>12921014</id><snippet>v1 repeat 3
v2 repeat 2
v3
v1

with open('infilepath') as infile:
    outfile = open('outfilepath', 'w')
    curr = infile.readline().strip()
    count = 1
    for line in infile:
        if line.strip() == curr:
            count += 1
        else:
            outfile.write(curr)
            if count-1:
                outfile.write(" repeat %d\n" %count)
            else:
                outfile.write("\n")
            curr = line.strip()
            count = 1
    outfile.write(curr)
    if count-1:
        outfile.write(" repeat %d\n" %count)
    outfile.close()
</snippet></ROW><ROW><id>12921014</id><snippet>uniq -c infilepath &gt; outfilepath</snippet></ROW><ROW><id>12921110</id><snippet>update()</snippet></ROW><ROW><id>12921110</id><snippet>In [27]: dic={1: {1:2}}

In [28]: dic[1].update({2:3})

In [29]: dic
Out[29]: {1: {1: 2, 2: 3}}
</snippet></ROW><ROW><id>12921209</id><snippet>plt.xticks</snippet></ROW><ROW><id>12921209</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

cos = np.cos
pi = np.pi

# This is not necessary if `text.usetex : True` is already set in `matplotlibrc`.    
mpl.rc('text', usetex = True)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
t = np.linspace(0.0, 2*pi, 100)
s = cos(t)
plt.plot(t, s)

plt.xticks([0, pi/2, pi, 3*pi/2, 2*pi],
           ['$0$', r'$\frac{\pi}{2}$', r'$\pi$', r'$\frac{3\pi}{2}$', r'$2\pi$'])
plt.show()
</snippet></ROW><ROW><id>12921262</id><snippet>''.join()</snippet></ROW><ROW><id>12921262</id><snippet>.findAll('tr')</snippet></ROW><ROW><id>12921262</id><snippet>tr</snippet></ROW><ROW><id>12921262</id><snippet>''.join()</snippet></ROW><ROW><id>12921262</id><snippet>td</snippet></ROW><ROW><id>12921262</id><snippet>tr</snippet></ROW><ROW><id>12921262</id><snippet>text_list = []
for row in table:
    table_row = row('tr')
    for table_data in table_row:
        td = table_data('td')
        for td_contents in td:
            content = td_contents.contents[0]
            text_list.append(content)
text = ' '.join(str(x) for x in text_list)
</snippet></ROW><ROW><id>12921262</id><snippet>text</snippet></ROW><ROW><id>12921262</id><snippet>text_list</snippet></ROW><ROW><id>12921262</id><snippet>text =</snippet></ROW><ROW><id>12921266</id><snippet>.append()</snippet></ROW><ROW><id>12921266</id><snippet>def append(self, newitem):
    self.chromosomes.append(newitem)
</snippet></ROW><ROW><id>12921358</id><snippet>portal_factory</snippet></ROW><ROW><id>12921358</id><snippet>factorytool.xml</snippet></ROW><ROW><id>12921358</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;object name="portal_factory"&gt;
 &lt;factorytypes&gt;
  &lt;type portal_type="YourTypeName" /&gt;
 &lt;factorytypes&gt;
&lt;/object&gt;
</snippet></ROW><ROW><id>12921358</id><snippet>_at_rename_after_creation = True 
</snippet></ROW><ROW><id>12921390</id><snippet>id</snippet></ROW><ROW><id>12921390</id><snippet>import unittest

class TestClass(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        print "setup"

    def test_01_create_acc(self):
        print id(self)

    def test_02_check_account(self):
        print id(self)

unittest.main()
</snippet></ROW><ROW><id>12921390</id><snippet>setup
4300479824
.4300479888
</snippet></ROW><ROW><id>12921390</id><snippet>setup</snippet></ROW><ROW><id>12921872</id><snippet>import datetime
import time

def getA():
  import random
  return random.random()

def getB():
  return .01

checkTime = datetime.timedelta(minutes=10)
checkIntervalInSecs = .5

c = False
timeToStop = datetime.datetime.now() + checkTime
while(datetime.datetime.now() &lt; timeToStop):
  if getA() &lt; getB():
    c = True
    break
  time.sleep(checkIntervalInSecs)

print c
</snippet></ROW><ROW><id>12921884</id><snippet>__init__</snippet></ROW><ROW><id>12921884</id><snippet>def __init__(self):
    self.do_map = dict(this=self.do_this, that=self.do_that)
</snippet></ROW><ROW><id>12921884</id><snippet>class Foo(object):
    do_map = dict(this='do_this', that='do_that')

    def my_func(self, item, value):
        if item in do_map:
            getattr(self, do_map[item])(value)
</snippet></ROW><ROW><id>12921889</id><snippet>openssl x509 -inform pem -in mycert.pem -pubkey -noout &gt; publickey.pem
</snippet></ROW><ROW><id>12921889</id><snippet>RSA.importKey</snippet></ROW><ROW><id>12921889</id><snippet>publickey.pem</snippet></ROW><ROW><id>12921889</id><snippet>from Crypto.Util.asn1 import DerSequence
from Crypto.PublicKey import RSA
from binascii import a2b_base64

# Convert from PEM to DER
pem = open("mycert.pem").read()
lines = pem.replace(" ",'').split()
der = a2b_base64(''.join(lines[1:-1]))

# Extract subjectPublicKeyInfo field from X.509 certificate (see RFC3280)
cert = DerSequence()
cert.decode(der)
tbsCertificate = DerSequence()
tbsCertificate.decode(cert[0])
subjectPublicKeyInfo = tbsCertificate[6]

# Initialize RSA key
rsa_key = RSA.importKey(subjectPublicKeyInfo)
</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>x([3.2,6,7.8,1,3,2.5])</snippet></ROW><ROW><id>12921949</id><snippet>x(numberlist)</snippet></ROW><ROW><id>12921949</id><snippet>x</snippet></ROW><ROW><id>12921949</id><snippet>numberlist</snippet></ROW><ROW><id>12921949</id><snippet>mylist</snippet></ROW><ROW><id>12921949</id><snippet>def x(mylist):
    for num in mylist:
        if num &gt; 4:
            print(num)
        else :
            print(num + 5)
numberlist = [3.2,6,7.8,1,3,2.5]
print x(numberlist)
</snippet></ROW><ROW><id>12921999</id><snippet>python.exe</snippet></ROW><ROW><id>12921999</id><snippet>PYTHON PATH</snippet></ROW><ROW><id>12922131</id><snippet>os.system()</snippet></ROW><ROW><id>12922131</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>12922354</id><snippet>$ brew install portaudio
==&gt; Downloading http://www.portaudio.com/archives/pa_stable_v19_20111121.tgz
######################################################################## 100.0%
==&gt; Downloading patches
######################################################################## 100.0%
==&gt; Patching patching file include/pa_mac_core.h
==&gt; ./configure --prefix=/usr/local/Cellar/portaudio/19.20111121 --enable-mac-universal=no
==&gt; make install /usr/local/Cellar/portaudio/19.20111121: 8 files, 308K, built in 14 seconds
</snippet></ROW><ROW><id>12922730</id><snippet>x &lt;= 3</snippet></ROW><ROW><id>12922730</id><snippet>boolean</snippet></ROW><ROW><id>12922730</id><snippet>int</snippet></ROW><ROW><id>12922730</id><snippet>False</snippet></ROW><ROW><id>12922730</id><snippet>0</snippet></ROW><ROW><id>12922730</id><snippet>x[0] += 3
</snippet></ROW><ROW><id>12922730</id><snippet>&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; isinstance(False, int)
True
</snippet></ROW><ROW><id>12922730</id><snippet>dis.dis()</snippet></ROW><ROW><id>12922730</id><snippet>SETUP_LOOP</snippet></ROW><ROW><id>12922730</id><snippet>x</snippet></ROW><ROW><id>12922730</id><snippet>&gt;&gt;&gt; def foo(): x[x &lt;= 3]+=3
... 
&gt;&gt;&gt; dis.dis(foo)
  1           0 LOAD_GLOBAL              0 (x)
              3 LOAD_GLOBAL              0 (x)
              6 LOAD_CONST               1 (3)
              9 COMPARE_OP               1 (&lt;=)
             12 DUP_TOPX                 2
             15 BINARY_SUBSCR       
             16 LOAD_CONST               1 (3)
             19 INPLACE_ADD         
             20 ROT_THREE           
             21 STORE_SUBSCR        
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>12922733</id><snippet>l = [5.6, 7.8, 8.9, 13.4]
</snippet></ROW><ROW><id>12922733</id><snippet>l1 = [item for sublist in [list(itertools.repeat(k,25)) for k in l] for item in sublist]
</snippet></ROW><ROW><id>12922733</id><snippet>l2 = map(lambda x: x / 25., l1)
</snippet></ROW><ROW><id>12922733</id><snippet>def partition(lst, n):
    division = len(lst) / float(n)
    return [ lst[int(round(division * i)): int(round(division * (i + 1)))] for i in xrange(n) ]
</snippet></ROW><ROW><id>12922733</id><snippet>new_len = 2
</snippet></ROW><ROW><id>12922733</id><snippet>l3 = partition(l2, new_len)
</snippet></ROW><ROW><id>12922733</id><snippet>l4 = map(sum, l3)
</snippet></ROW><ROW><id>12922733</id><snippet>l5 = map(lambda x: x * new_len / float(len(l)), l4)
</snippet></ROW><ROW><id>12922733</id><snippet>print l5
</snippet></ROW><ROW><id>12923057</id><snippet>directory = 'C:/Users/Geekman2/Documents/Tests/'
...
def AddDirTo(filename)
     return directory + filename
</snippet></ROW><ROW><id>12923057</id><snippet>box1 = AddDirTo('box1.txt') #note: you did close box1's quote on your question
cupcake = Button(donut,text = "Box #1", command = open(box1))
</snippet></ROW><ROW><id>12923057</id><snippet>directory = 'C:/Users/Geekman2/Documents/Tests/'
extension = '.txt'
...
def AddDirTo(filename):
     return directory + filename + extension
...
box1 = AddDirTo('box1') #note: you did close box1's quote on your question
cupcake = Button(donut,text = "Box #1", command = open(box1))
</snippet></ROW><ROW><id>12923057</id><snippet>directory</snippet></ROW><ROW><id>12923057</id><snippet>extension</snippet></ROW><ROW><id>12923087</id><snippet>a,b = (1, 2)  #The RHS here is a tuple, but it could be a list, generator, etc.
print a #1
print b #2
</snippet></ROW><ROW><id>12923087</id><snippet>a,b,*rest = range(30) 
print(a) #0
print(b) #1
print(rest == list(range(2,30))) #True
</snippet></ROW><ROW><id>12923314</id><snippet>import zmq
import time
import sys
import threading

SOCKET_NAME = "tcp://127.0.0.1:8000"
#SOCKET_NAME = "inproc://mysocket"

def dealerRoutine(context):
    socket = context.socket(zmq.DEALER)
    socket.bind(SOCKET_NAME)
    time.sleep(1)
    socket.send("", zmq.SNDMORE)
    socket.send("hello")
    socket.send("", zmq.SNDMORE)
    socket.send("hello")
    print socket.recv()
    print socket.recv()
    socket.close()


def workerRoutine(context):
    socket = context.socket(zmq.REP)
    socket.connect(SOCKET_NAME)
    s = socket.recv()
    print s
    socket.send("world")

context = zmq.Context()

workers = []
for i in range(0, 2):
    worker = threading.Thread(target=workerRoutine, args=([context]))
    workers.append(worker) 
    worker.start()

dealerRoutine(context)

for worker in workers:
    worker.terminated = True

context.term()
</snippet></ROW><ROW><id>12923315</id><snippet>max(dic,key=lambda x:len(dic[x]))</snippet></ROW><ROW><id>12923389</id><snippet>beautifulsoup4</snippet></ROW><ROW><id>12923389</id><snippet>pip</snippet></ROW><ROW><id>12923389</id><snippet>easy_install</snippet></ROW><ROW><id>12923389</id><snippet>from bs4 import BeautifulSoup</snippet></ROW><ROW><id>12923404</id><snippet>minMonPay = minimumMonthlyPayment
monInt = monthlyInterest
</snippet></ROW><ROW><id>12923404</id><snippet>minMonPay = minimumMonthlyPayment(previousBalance)
monInt = monthlyInterest(monthlyInterestRate)
</snippet></ROW><ROW><id>12923404</id><snippet>def minimumMonthlyPayment(previousbalance):
    return (previousbalance * monthlyPaymentRate)
</snippet></ROW><ROW><id>12923404</id><snippet># OLD CODE
def minimumMonthlyPayment(previousbalance):
    return (previousbalance * monthlyPaymentRate)
def monthlyInterest(monthlyInterestRate):
    return (1 + monthlyInterestRate)
minMonPay = minimumMonthlyPayment
monInt = monthlyInterest

# NEW CODE
minMonPay = previousbalance * monthlyPaymentRate
monInt = 1 + monthlyInterestRate
</snippet></ROW><ROW><id>12923404</id><snippet># OLD CODE
print ('Minimum monthly payment: $ ' (round(minimumMonthlyPayment, 2)))

# NEW CODE
print ('Minimum monthly payment: $ ' (round(minMonPay, 2)))
</snippet></ROW><ROW><id>12923480</id><snippet>&gt;&gt;&gt; L = [4, 10, 4, 2, 9, 5, 4]
&gt;&gt;&gt; [i for i,x in enumerate(L) if x==4]
[0, 2, 6]
</snippet></ROW><ROW><id>12923480</id><snippet>enumerate(L)</snippet></ROW><ROW><id>12923480</id><snippet>L</snippet></ROW><ROW><id>12923480</id><snippet>(index, value)</snippet></ROW><ROW><id>12923480</id><snippet>L</snippet></ROW><ROW><id>12923480</id><snippet>i</snippet></ROW><ROW><id>12923480</id><snippet>x</snippet></ROW><ROW><id>12923480</id><snippet>4</snippet></ROW><ROW><id>12923681</id><snippet>book_objects = [
    &lt;Book: Harry Potter and the Philosopher's Stone&gt;, 
    &lt;Book: Harry Potter and the Chamber of Secrets&gt;,
    &lt;Book: Harry Potter and the Prisoner of Azkaban&gt;
]

jk_rowling = Author.objects.get(name='J. K. Rowling')

jk_rowling.books.add(*book_objects)   # &lt;---------------

jk_rowling.save()
</snippet></ROW><ROW><id>12923752</id><snippet>&gt;&gt;&gt; C = sorted(A + B)
&gt;&gt;&gt; def avg(x):
        return sum(x) / len(x)

&gt;&gt;&gt; [[avg(i) for i in zip(*y)] for x,y in 
     itertools.groupby(C, operator.itemgetter(0,1))]
[[1.0, 2.0, 16.666666666666668], [3.0, 4.0, 5.0], [6.0, 7.0, 9.0]]
</snippet></ROW><ROW><id>12923752</id><snippet>[list(y) for x,y in itertools.groupby(C, operator.itemgetter(0,1))]
</snippet></ROW><ROW><id>12924002</id><snippet>string_to_insert = sys.argv[1]
file_to_put_string_in = sys.argv[2]
</snippet></ROW><ROW><id>12924002</id><snippet>string_to_insert</snippet></ROW><ROW><id>12924002</id><snippet>file_to_put_string_in</snippet></ROW><ROW><id>12924002</id><snippet>dostuff.py "Hello World 1" "Hello World 2" hello world three 
</snippet></ROW><ROW><id>12924002</id><snippet>sys.argv[0] = dostuff.py (might be a full path, depending on the OS)
sys.argv[1] = Hello World 1
sys.argv[2] = Hello World 2 
sys.argv[3] = hello 
sys.argv[4] = world 
sys.argv[5] = three 
</snippet></ROW><ROW><id>12924005</id><snippet>datetime</snippet></ROW><ROW><id>12924005</id><snippet>datetime.date</snippet></ROW><ROW><id>12924005</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>12924005</id><snippet>&gt;&gt;&gt; birthdate_str = raw_input('Enter your birthday (yyyy-mm-dd): ')
Enter your birthday (yyyy-mm-dd): 1981-08-04
&gt;&gt;&gt; birthdatetime = datetime.datetime.strptime(birthdate_str, '%Y-%m-%d')
&gt;&gt;&gt; birthdate = birthdatetime.date()  # convert from datetime to just date
&gt;&gt;&gt; age = datetime.date.today() - birthdate
&gt;&gt;&gt; age
datetime.timedelta(11397)
</snippet></ROW><ROW><id>12924005</id><snippet>age</snippet></ROW><ROW><id>12924005</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>12924005</id><snippet>age.days</snippet></ROW><ROW><id>12924005</id><snippet>&gt;&gt;&gt; int(age.days / 365.24)
31
</snippet></ROW><ROW><id>12924020</id><snippet>word[1:]+word[0]
</snippet></ROW><ROW><id>12924087</id><snippet>class quantizer:
    def __init__(self, total, limit):
        self.total = total
        self.limit = limit
        self.index = float(0)
        self.step = float(total) / float(limit)
    def __iter__(self):
        return self
    def next(self):
        if self.index &gt;= self.total:
            raise StopIteration
        result = int(round(self.index))
        self.index += self.step
        return result
</snippet></ROW><ROW><id>12924087</id><snippet>def quantize(total, limit):
    i, step = 0.0, float(total) / float(limit)
    while i &lt; total:
        yield int(round(i))
        i += step
</snippet></ROW><ROW><id>12924087</id><snippet>&gt;&gt;&gt; for frame in quantize(25, 10):
...     print frame
... 

0
3
5
8
10
13
15
18
20
23
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12924326</id><snippet>from web import form


# field validators
username_required = form.Validator("Username not provided", bool)
password_required = form.Validator("Password not provided", bool)
password_length = form.Validator("Password length should be minimum 7 characters", lambda p: p is None or len(p) &gt;= 7)

# form validators
login_details_required = form.Validator("Please Enter Login Details", lambda f: f["username"] or f["password"])

def check_login(f):
    # check for login here
    return False
valid_credentials = form.Validator("Invalid username or password", check_login)

login_form = form.Form(
    form.Textbox('username', username_required),
    form.Password('password', password_required, password_length, description="Password"),
    form.Button('Login'),
    validators=[login_details_required, valid_credentials],
)


my_form = login_form()
if not my_form.validates(dict(username="", password="small")):
    print my_form.render_css()

if not my_form.validates(dict(username="notnull", password="just-enough")):
    print my_form.render_css()
</snippet></ROW><ROW><id>12924326</id><snippet>login_details_required</snippet></ROW><ROW><id>12924503</id><snippet>overwritten the same file</snippet></ROW><ROW><id>12924503</id><snippet>try creating a new one</snippet></ROW><ROW><id>12924503</id><snippet>with</snippet></ROW><ROW><id>12924503</id><snippet>lines = ""

with open('D:\File.txt') as file:
    for line in file:
        lines += line.strip() + ";\n"

file = open('D:\File.txt', "w+")
file.writelines(lines)

file.flush()
</snippet></ROW><ROW><id>12924503</id><snippet>fileinput</snippet></ROW><ROW><id>12924503</id><snippet>import fileinput

for line in fileinput.input('D:\File.txt', inplace = True):
    print line.strip() + ";"
</snippet></ROW><ROW><id>12924646</id><snippet>Axes.get_shared_y_axes()</snippet></ROW><ROW><id>12924646</id><snippet>from numpy.random import rand
import matplotlib
matplotlib.use('gtkagg')
import matplotlib.pyplot as plt

# create all axes we need
ax0 = plt.subplot(211)
ax1 = ax0.twinx()
ax2 = plt.subplot(212)
ax3 = ax2.twinx()

# share the secondary axes
ax1.get_shared_y_axes().join(ax1, ax3)

ax0.plot(rand(1) * rand(10),'r')
ax1.plot(10*rand(1) * rand(10),'b')
ax2.plot(3*rand(1) * rand(10),'g')
ax3.plot(10*rand(1) * rand(10),'y')
plt.show()
</snippet></ROW><ROW><id>12924751</id><snippet>reactor.run(installSignalHandlers=False)</snippet></ROW><ROW><id>12924803</id><snippet>self.</snippet></ROW><ROW><id>12924803</id><snippet>__init__</snippet></ROW><ROW><id>12924803</id><snippet>&gt;&gt;&gt; class foo:
...     def fun(self):
...             self.heh=3
... 
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.heh 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: foo instance has no attribute 'heh'
&gt;&gt;&gt; f.fun()
&gt;&gt;&gt; f.heh
3
</snippet></ROW><ROW><id>12924803</id><snippet>__init__</snippet></ROW><ROW><id>12924803</id><snippet>class MyClass:
    classVar = "I'm a class var."
    def __init__(self):
        self.instanceVar = "I'm an instance var."
    def fun(self):
        methodVar = "I'm a method var; I cannot be accessed outside of this method."
        self.instanceVar2 = "I'm another instance var, set outside of __init__."
</snippet></ROW><ROW><id>12924803</id><snippet>sing_me_a_song</snippet></ROW><ROW><id>12924803</id><snippet>Song</snippet></ROW><ROW><id>12924924</id><snippet>&gt;&gt;&gt; tmp = [1,2,3,4,5]
&gt;&gt;&gt; for elem in tmp:
...     tmp.remove(elem)
... 
&gt;&gt;&gt; tmp
[2, 4]
</snippet></ROW><ROW><id>12924924</id><snippet>&gt;&gt;&gt; tmp = [1,2,3,4,5]
&gt;&gt;&gt; for elem in tmp:
...     print elem, tmp
...     tmp.remove(elem)
...     print elem, tmp
... 
1 [1, 2, 3, 4, 5]
1 [2, 3, 4, 5]
3 [2, 3, 4, 5]
3 [2, 4, 5]
5 [2, 4, 5]
5 [2, 4]
</snippet></ROW><ROW><id>12925062</id><snippet>pprint(dict(defaultdict))</snippet></ROW><ROW><id>12925075</id><snippet>setattr()</snippet></ROW><ROW><id>12925075</id><snippet>class foo(object):
    allowedattrs = ['eric', 'john', 'michael']

    def __init__(self):
        self.eric = 0
        self.john = 0
        self.michael = 0
        self.switchdict = {'Eric':self.eric, 'John':self.john, 'Michael':self.michael}

    def update(self, whattoupdate, value):
        key = whattoupdate.lower()
        if key not in self.allowedattrs:
            raise AttributeError(whattoupdate)
        setattr(self, key, getattr(self, key) + value)

f = foo()
f.update('john', 5)
f.update('john', 4)
print f.john
</snippet></ROW><ROW><id>12925075</id><snippet>defaultdict</snippet></ROW><ROW><id>12925075</id><snippet>from collections import defaultdict

class foo(object):
    allowedattrs = ['eric', 'john', 'michael']

    def __init__(self):
        self.values = defaultdict(int)

    def update(self, whattoupdate, value):
        self.values[whattoupdate] += value

f = foo()
f.update('john', 5)
f.update('john', 4)
print f.values['john']
</snippet></ROW><ROW><id>12925250</id><snippet>def sift(keys, values):
    answer = collections.defaultdict(list)
    kvs = zip(keys, values)
    for k,v in kvs:
        answer[k].append(v)
    return [answer[k] for k in sorted(answer)]

In [205]: keys = [0, 0, 1, 2, 1, 3,  3,   1]

In [206]: values = [2, 2, 2, 2, 2, 3, 13, 113]

In [207]: sift(keys,values)
Out[207]: [[2, 2], [2, 2, 113], [2], [3, 13]]
</snippet></ROW><ROW><id>12925250</id><snippet>dict</snippet></ROW><ROW><id>12925250</id><snippet>answer[k].append(v)</snippet></ROW><ROW><id>12925250</id><snippet>append</snippet></ROW><ROW><id>12925250</id><snippet>list</snippet></ROW><ROW><id>12925250</id><snippet>answer[k]</snippet></ROW><ROW><id>12925250</id><snippet>dict</snippet></ROW><ROW><id>12925250</id><snippet>append</snippet></ROW><ROW><id>12925250</id><snippet>KeyError</snippet></ROW><ROW><id>12925250</id><snippet>In [212]: d = {}

In [213]: d[1] = []

In [214]: d
Out[214]: {1: []}

In [215]: d[1].append('one')

In [216]: d[1]
Out[216]: ['one']

In [217]: d
Out[217]: {1: ['one']}

In [218]: d[2].append('two')
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/Users/USER/&lt;ipython-input-218-cc58f739eefa&gt; in &lt;module&gt;()
----&gt; 1 d[2].append('two')

KeyError: 2
</snippet></ROW><ROW><id>12925250</id><snippet>answer = collections.defaultdict(list)</snippet></ROW><ROW><id>12925250</id><snippet>answer = collections.defaultdict(int)</snippet></ROW><ROW><id>12925250</id><snippet>int</snippet></ROW><ROW><id>12925250</id><snippet>append</snippet></ROW><ROW><id>12925250</id><snippet>zip</snippet></ROW><ROW><id>12925250</id><snippet>list</snippet></ROW><ROW><id>12925250</id><snippet>iterable</snippet></ROW><ROW><id>12925250</id><snippet>list1</snippet></ROW><ROW><id>12925250</id><snippet>list2</snippet></ROW><ROW><id>12925250</id><snippet>i</snippet></ROW><ROW><id>12925250</id><snippet>list1[i]</snippet></ROW><ROW><id>12925250</id><snippet>list2[i]</snippet></ROW><ROW><id>12925250</id><snippet>list1</snippet></ROW><ROW><id>12925250</id><snippet>list2</snippet></ROW><ROW><id>12925250</id><snippet>len(zip(list1, list2))</snippet></ROW><ROW><id>12925250</id><snippet>len(list1)</snippet></ROW><ROW><id>12925250</id><snippet>len(list2)</snippet></ROW><ROW><id>12925250</id><snippet>min(len(list1), len(list2))</snippet></ROW><ROW><id>12925250</id><snippet>keys</snippet></ROW><ROW><id>12925250</id><snippet>values</snippet></ROW><ROW><id>12925250</id><snippet>keys</snippet></ROW><ROW><id>12925250</id><snippet>values</snippet></ROW><ROW><id>12925250</id><snippet>defaultdict</snippet></ROW><ROW><id>12925250</id><snippet>answer = {}
kvs = zip(keys, values)
for k,v, in kvs:
    if k in answer:
        answer[k].append(v)
    else:
        answer[k] = [v]
</snippet></ROW><ROW><id>12925250</id><snippet>dict</snippet></ROW><ROW><id>12925250</id><snippet>dict</snippet></ROW><ROW><id>12925250</id><snippet>keys</snippet></ROW><ROW><id>12925250</id><snippet>int</snippet></ROW><ROW><id>12925250</id><snippet>answer</snippet></ROW><ROW><id>12925250</id><snippet>answer</snippet></ROW><ROW><id>12925250</id><snippet>sorted(answer)</snippet></ROW><ROW><id>12925250</id><snippet>answer</snippet></ROW><ROW><id>12925291</id><snippet>getmember</snippet></ROW><ROW><id>12925351</id><snippet>-</snippet></ROW><ROW><id>12925351</id><snippet>\-</snippet></ROW><ROW><id>12925351</id><snippet>"^[\w-,\s]+\.[A-Za-z]{3}$"</snippet></ROW><ROW><id>12925351</id><snippet>/dev/fd0</snippet></ROW><ROW><id>12925351</id><snippet>~/comm.pipe</snippet></ROW><ROW><id>12925351</id><snippet>~/images/test</snippet></ROW><ROW><id>12925351</id><snippet>os.path</snippet></ROW><ROW><id>12925435</id><snippet>float</snippet></ROW><ROW><id>12925435</id><snippet>try:
    amount_per_month = float( raw_input('What is the monthly cost?') )
except (ValueError, TypeError) as e:
    pass # wasn't valid
</snippet></ROW><ROW><id>12925435</id><snippet>TypeError</snippet></ROW><ROW><id>12925435</id><snippet>float( [1, 2, 3] )</snippet></ROW><ROW><id>12925542</id><snippet>print</snippet></ROW><ROW><id>12925870</id><snippet>computeBill</snippet></ROW><ROW><id>12925870</id><snippet>0</snippet></ROW><ROW><id>12925870</id><snippet>def computeBill(food):
    total = 0
    for item in food:
        stock_count = stock[item]
        if stock_count == 0:
            raise ValueError("item %s is out of stock" % item)
        tot = prices[item] * stock_count
        print item, tot
        total += tot
    return total
</snippet></ROW><ROW><id>12925870</id><snippet>-1</snippet></ROW><ROW><id>12925870</id><snippet>        if stock_count == 0:
            return -1
</snippet></ROW><ROW><id>12926120</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>12926120</id><snippet>su -</snippet></ROW><ROW><id>12926397</id><snippet>secString = 'sec_%02d' % (title)
</snippet></ROW><ROW><id>12926397</id><snippet>%</snippet></ROW><ROW><id>12926397</id><snippet>%02d</snippet></ROW><ROW><id>12926397</id><snippet>title</snippet></ROW><ROW><id>12926397</id><snippet>title</snippet></ROW><ROW><id>12926397</id><snippet>0</snippet></ROW><ROW><id>12926397</id><snippet>09</snippet></ROW><ROW><id>12926397</id><snippet>titleCitations = [c for c in cEdges if secString in c[0]]
</snippet></ROW><ROW><id>12926397</id><snippet>cEdges</snippet></ROW><ROW><id>12926397</id><snippet>sec_XY</snippet></ROW><ROW><id>12926397</id><snippet>intraCitations = [c for c in titleCitations if secString in c[1]]
</snippet></ROW><ROW><id>12926397</id><snippet>sec_XY</snippet></ROW><ROW><id>12926397</id><snippet>intraCitations</snippet></ROW><ROW><id>12926397</id><snippet>cEdges</snippet></ROW><ROW><id>12926397</id><snippet>sec_XY</snippet></ROW><ROW><id>12926611</id><snippet>class BulkInsertManager(models.Manager):
    def _bulk_insert_or_update(self, create_fields, update_fields, values):

        from django.db import connection, transaction
        cursor = connection.cursor()

        db_table = self.model._meta.db_table

        values_sql = []
        values_data =[]

        for value_lists in values:
            values_sql.append( "(%s)" % (','.join([ "%s" for i in range(len(value_lists))]),) )
            values_data.extend(value_lists)

        base_sql = "INSERT INTO %s (%s) VALUES " % (db_table, ",".join(create_fields))

        on_duplicates = []

        for field in update_fields:
            on_duplicates.append(field + "=VALUES(" + field +")")

        sql = "%s %s ON DUPLICATE KEY UPDATE %s" % (base_sql, ", ".join(values_sql), ",".join(on_duplicates))

        cursor.executemany(sql, [values_data])
        transaction.commit_unless_managed()
</snippet></ROW><ROW><id>12926611</id><snippet>class User_Friend(models.Model):
    objects = BulkInsertManager() # assign a custom manager to handle bulk insert

    id = models.CharField(max_length=255)
    user = models.ForeignKey(User, null=False, blank=False)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    city = models.CharField(max_length=50, null=True, blank=True)
    province = models.CharField(max_length=50, null=True, blank=True)
    country =  models.CharField(max_length=30, null=True, blank=True)
</snippet></ROW><ROW><id>12926611</id><snippet>def save_user_friends(user, friends):
    user_friends = []
    for friend in friends:

        create_fields = ['id', 'user_id', 'first_name', 'last_name', 'city', 'province', 'country']
        update_fields = ['first_name', 'last_name', 'city', 'province', 'country']

        user_friends.append(
            [
                str(user.id), 
                str(friend['id']),
                friend['first_name'],
                friend['last_name'],
                friend['city'],
                friend['province'],
                friend['country'],
            ]
        )

    User_Friend.objects._bulk_insert_or_update(create_fields, update_fields, user_friends)
</snippet></ROW><ROW><id>12926647</id><snippet>ary</snippet></ROW><ROW><id>12926647</id><snippet>ary[d]</snippet></ROW><ROW><id>12926647</id><snippet>ary[d],ary[e]=ary[e],ary[d]</snippet></ROW><ROW><id>12926647</id><snippet>ary[d] = ary[e]; ary[e] = ary[e]</snippet></ROW><ROW><id>12926647</id><snippet>ary[d]</snippet></ROW><ROW><id>12926647</id><snippet>d</snippet></ROW><ROW><id>12926647</id><snippet>ary</snippet></ROW><ROW><id>12926647</id><snippet>ary[[d,e]] = ary[[e,d]]
</snippet></ROW><ROW><id>12926740</id><snippet>request.add_header("Authorization", "BoxAuth api_key="+apikey+"&amp;auth_token="+auth_token)
</snippet></ROW><ROW><id>12926989</id><snippet>return_index</snippet></ROW><ROW><id>12927026</id><snippet>UserProfile</snippet></ROW><ROW><id>12927026</id><snippet>mainsite</snippet></ROW><ROW><id>12927026</id><snippet>User</snippet></ROW><ROW><id>12927026</id><snippet>OneToOne(...)</snippet></ROW><ROW><id>12927026</id><snippet>Business</snippet></ROW><ROW><id>12927026</id><snippet>Student</snippet></ROW><ROW><id>12927026</id><snippet>OneToOne</snippet></ROW><ROW><id>12927026</id><snippet>UserProfile</snippet></ROW><ROW><id>12927026</id><snippet>UserProfile</snippet></ROW><ROW><id>12927026</id><snippet>UserProfile</snippet></ROW><ROW><id>12927026</id><snippet>save()</snippet></ROW><ROW><id>12927026</id><snippet>Business</snippet></ROW><ROW><id>12927026</id><snippet>Student</snippet></ROW><ROW><id>12927026</id><snippet>UserProfile</snippet></ROW><ROW><id>12927026</id><snippet>__unicode__()</snippet></ROW><ROW><id>12927322</id><snippet>.key()</snippet></ROW><ROW><id>12927322</id><snippet>{{block.key}}</snippet></ROW><ROW><id>12927322</id><snippet>{{block.key()}}</snippet></ROW><ROW><id>12927871</id><snippet>reindex</snippet></ROW><ROW><id>12927871</id><snippet>ff.index = range</snippet></ROW><ROW><id>12927871</id><snippet>In [132]: ints
Out[132]: Int64Index([201201, 201201, 201201, ..., 203905, 203905, 203905])

In [133]: conv = lambda x: datetime.strptime(str(x), '%Y%m')

In [134]: dates = [conv(x) for x in ints]

In [135]: %timeit [conv(x) for x in ints]
1 loops, best of 3: 222 ms per loop
</snippet></ROW><ROW><id>12927871</id><snippet>In [144]: years = (ints // 100).astype(object)

In [145]: months = (ints % 100).astype(object)

In [146]: days = np.ones(len(years), dtype=object)

In [147]: import pandas.lib as lib

In [148]: %timeit Index(lib.try_parse_year_month_day(years, months, days))
100 loops, best of 3: 5.47 ms per loop
</snippet></ROW><ROW><id>12927871</id><snippet>ints</snippet></ROW><ROW><id>12927878</id><snippet>.listen(1337, '0.0.0.0');</snippet></ROW><ROW><id>12927885</id><snippet>pip</snippet></ROW><ROW><id>12927885</id><snippet>yum</snippet></ROW><ROW><id>12927885</id><snippet>yum</snippet></ROW><ROW><id>12927886</id><snippet>geom_tile</snippet></ROW><ROW><id>12927886</id><snippet>ggplot2</snippet></ROW><ROW><id>12927886</id><snippet>require(ggplot2); theme_set(theme_bw())
require(plyr)
dat = data.frame(expand.grid(x = 1:10, y = 1:10),
                 z = sample(LETTERS[1:3], size = 100, replace = TRUE))
</snippet></ROW><ROW><id>12927886</id><snippet>x</snippet></ROW><ROW><id>12927886</id><snippet>x</snippet></ROW><ROW><id>12927886</id><snippet>dat</snippet></ROW><ROW><id>12927886</id><snippet>y</snippet></ROW><ROW><id>12927886</id><snippet>y</snippet></ROW><ROW><id>12927886</id><snippet>z</snippet></ROW><ROW><id>12927886</id><snippet>p = ggplot(dat, aes(x = x, y = y, fill = z)) + geom_tile() 
print(p)
</snippet></ROW><ROW><id>12927886</id><snippet>ggplot2</snippet></ROW><ROW><id>12927886</id><snippet>p + coord_polar()
</snippet></ROW><ROW><id>12927886</id><snippet>dat</snippet></ROW><ROW><id>12928828</id><snippet>from gi.repository import GLib, GObject

counter = 0

def callback(*args):
    global counter
    counter += 1
    print 'callback called', counter
    if counter &gt; 10:
        print 'last call'
        return False

    return True

def terminate(*args):
    print 'Bye bye'
    loop.quit()

GObject.timeout_add(100, callback)
GObject.timeout_add(3000, terminate)
loop = GLib.MainLoop()
loop.run()
</snippet></ROW><ROW><id>12928828</id><snippet>False</snippet></ROW><ROW><id>12928828</id><snippet>True</snippet></ROW><ROW><id>12928828</id><snippet>callback</snippet></ROW><ROW><id>12928828</id><snippet>terminate</snippet></ROW><ROW><id>12928828</id><snippet>import gobject, glib, gtk

counter = 0

def callback(*args):
    global counter
    counter += 1
    print 'callback called', counter
    if counter &gt; 10:
        print 'last call'
        return False

    return True

def terminate(*args):
    print 'Bye bye'
    loop.quit()

gobject.timeout_add(100, callback)
gobject.timeout_add(3000, terminate)
loop = glib.MainLoop()
loop.run()
</snippet></ROW><ROW><id>12928834</id><snippet>werkzeug.cache</snippet></ROW><ROW><id>12928834</id><snippet>werkzeug.cache</snippet></ROW><ROW><id>12928920</id><snippet>^\/[/.a-zA-Z0-9-]+$
</snippet></ROW><ROW><id>12928987</id><snippet>ifilter</snippet></ROW><ROW><id>12928987</id><snippet>islice</snippet></ROW><ROW><id>12928987</id><snippet>&gt;&gt;&gt; list(itertools.islice(itertools.ifilter(lambda n: n % 2 == 0, lst), 1))
[8]
</snippet></ROW><ROW><id>12928987</id><snippet>next</snippet></ROW><ROW><id>12928987</id><snippet>islice</snippet></ROW><ROW><id>12928987</id><snippet>def find(pred, iterable):
    return next(itertools.ifilter(pred, iterable), None)
</snippet></ROW><ROW><id>12928987</id><snippet>None</snippet></ROW><ROW><id>12928987</id><snippet>&gt;&gt;&gt; next((x for x in lst if x % 2 == 0), None)
8
</snippet></ROW><ROW><id>12929311</id><snippet>r'[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?'
</snippet></ROW><ROW><id>12929608</id><snippet>/usr/local/python3.2.3/bin/python3 -V</snippet></ROW><ROW><id>12929608</id><snippet>/usr/local/python3.2.3/bin/python3 ext.py</snippet></ROW><ROW><id>12929682</id><snippet>inp.encode("hex")</snippet></ROW><ROW><id>12929682</id><snippet>"A"</snippet></ROW><ROW><id>12929682</id><snippet>"A".encode("hex")</snippet></ROW><ROW><id>12929682</id><snippet>"41"</snippet></ROW><ROW><id>12929682</id><snippet>0x41 != "41"</snippet></ROW><ROW><id>12929682</id><snippet>if '\xff' == inp:
    ....
</snippet></ROW><ROW><id>12929682</id><snippet>inp</snippet></ROW><ROW><id>12929682</id><snippet>ord()</snippet></ROW><ROW><id>12929682</id><snippet>if 0xff == ord(inp):
    ....
</snippet></ROW><ROW><id>12929794</id><snippet>from tokenizer import shunting_yard
rpn = shunting_yard('=IF(AND(LEN(R[-2]C[-1])&gt;0,R[-1]C),WriteCurve(OFFSET(R16C6, 0,0,R9C7,R10C7),R15C6,R10C3, R8C3),"NONE")')
print(rpn)
deque([&lt;tokenizer.RangeNode object at 0x2b7b1f5d7850&gt;, &lt;tokenizer.FunctionNode object at 0x2b7b1f5d7950&gt;, &lt;tokenizer.ASTNode object at 0x2b7b1f5d7990&gt;, &lt;tokenizer.ASTNode object at 0x2b7b1f5d79d0&gt;, &lt;tokenizer.RangeNode object at 0x2b7b1f5d7a10&gt;, &lt;tokenizer.FunctionNode object at 0x2b7b1f5d7a50&gt;, &lt;tokenizer.RangeNode object at 0x2b7b1f5d7a90&gt;, &lt;tokenizer.ASTNode object at 0x2b7b1f5d7ad0&gt;, &lt;tokenizer.ASTNode object at 0x2b7b1f5d7b10&gt;, &lt;tokenizer.RangeNode object at 0x2b7b1f5d7b50&gt;, &lt;tokenizer.RangeNode object at 0x2b7b1f5d7b90&gt;, &lt;tokenizer.FunctionNode object at 0x2b7b1f5d7bd0&gt;, &lt;tokenizer.RangeNode object at 0x2b7b1f5d7c10&gt;, &lt;tokenizer.RangeNode object at 0x2b7b22efc450&gt;, &lt;tokenizer.RangeNode object at 0x2b7b22efc510&gt;, &lt;tokenizer.FunctionNode object at 0x2b7b22efc410&gt;, &lt;tokenizer.ASTNode object at 0x2b7b22eff110&gt;, &lt;tokenizer.FunctionNode object at 0x2b7b22eff150&gt;])
</snippet></ROW><ROW><id>12929794</id><snippet>def rpn_to_ast(rpn):
    stack = []
    for n in rpn:
        num_args = (2 if n.token.ttype == "operator-infix" else
                    1 if n.token.ttype.startswith('operator') else
                    n.num_args if n.token.ttype == 'function' else 0)
        n.args = [stack.pop() for _ in range(num_args)][::-1]
        stack.append(n)
    return stack[0]
</snippet></ROW><ROW><id>12929794</id><snippet>def walk(ast):
    yield ast
    for arg in getattr(ast, 'args', []):
        for node in walk(arg):
            yield node

write_curve = next(node for node in walk(rpn_to_ast(rpn)) if node.token.ttype == 'function' and node.token.tvalue == 'WriteCurve')
print(write_curve.args[2].token.tvalue)
R10C3
</snippet></ROW><ROW><id>12929843</id><snippet>   import lxml.builder as lb
   from lxml import etree

y=lb.E.Title(lb.E.s(name="hello",adress="abcdef"),
             lb.E.s(name="",adress=""),
             rollid="1", mainid="1",teamid="1")

print etree.tostring(y, pretty_print=True)

&gt;&gt;&gt; 
&lt;Title teamid="1" rollid="1" mainid="1"&gt;
  &lt;s adress="abcdef" name="hello"/&gt;
  &lt;s adress="" name=""/&gt;
&lt;/Title&gt;
</snippet></ROW><ROW><id>12930136</id><snippet>str</snippet></ROW><ROW><id>12930136</id><snippet>unicode</snippet></ROW><ROW><id>12930136</id><snippet>basestring</snippet></ROW><ROW><id>12930136</id><snippet>str</snippet></ROW><ROW><id>12930136</id><snippet>bytes</snippet></ROW><ROW><id>12930136</id><snippet>def myfunc(arg):
    listarg = arg if not isinstance(arg, basestring) else [arg]
    print listarg

&gt;&gt;&gt; myfunc(bar)
['foo', 'bar']
&gt;&gt;&gt; myfunc(foo)
['bar']

&gt;&gt;&gt; print sys.version
2.7.2 (default, Jun 20 2012, 16:23:33) 
</snippet></ROW><ROW><id>12930212</id><snippet>msvfw32.dll</snippet></ROW><ROW><id>12930212</id><snippet>msacm32.dll</snippet></ROW><ROW><id>12930212</id><snippet>avicap32.dll</snippet></ROW><ROW><id>12930212</id><snippet>avifil32.dll</snippet></ROW><ROW><id>12930462</id><snippet>import glob
files = glob.glob('*.txt')
for file in files:
    # this will remove the .txt extension and keep the "aN" 
    first_part = file[:-4]
    # find the matching directory
    dir = glob.glob('%s_*/' % first_part)[0]
    os.rename(file, os.path.join(dir, file))
</snippet></ROW><ROW><id>12930720</id><snippet>user : {
    name : 'Alex Black'
    email : 'alex@example.com'
    token : {
        value : 'some_random_token'     # subject for indexing
        expires : '00.00.00.18.11.2012' # use MongoDB date here
    }
}
</snippet></ROW><ROW><id>12930720</id><snippet>Users</snippet></ROW><ROW><id>12930720</id><snippet>UnregisteredUsers</snippet></ROW><ROW><id>12930720</id><snippet>UnregisteredUsers</snippet></ROW><ROW><id>12930720</id><snippet>user</snippet></ROW><ROW><id>12930720</id><snippet>UnregisteredUsers</snippet></ROW><ROW><id>12930720</id><snippet>Users</snippet></ROW><ROW><id>12930743</id><snippet>==example</snippet></ROW><ROW><id>12930743</id><snippet>''.join([chr(int(x,16)) for x in tx.split()])
</snippet></ROW><ROW><id>12930899</id><snippet>import os
import shutil

from tempfile import mkstemp

class CachedFileObject(object):

    def __init__(self, cache_dir="/tmp"):
        self.cache_dir = cache_dir
        self.local_file = None
        self.local_path = None
        self.remote_path = None
        self.mode = None

    def open(self, path, mode="r", buffering=-1):
        if self.local_file and not self.local_file.closed:
            raise ValueError("Already open")
        fd, self.local_path = mkstemp(dir=self.cache_dir)
        os.close(fd)
        try:
            if "r" in mode and not os.path.exists(path):
                raise ValueError("No such remote file")
            if os.path.exists(path):
                # have remote file
                self._cache_remote(path, self.local_path)
            self.local_file = open(self.local_path, mode=mode, buffering=buffering)
            self.mode = mode
            self.remote_path = path
        except Exception as e:
            os.unlink(self.local_path)
            raise

        return self

    def close(self):
        self.local_file.close()
        try:
            if set("wa+").intersection(set(self.mode)):
                # have writes, sync file back to remote side
                self._sync_remote(self.remote_path, self.local_path)
        finally:
            os.unlink(self.local_path)

    def _cache_remote(self, remote_path, local_path):
        # simple cp
        shutil.copy(remote_path, local_path)

    def _sync_remote(self, remote_path, local_path):
        shutil.copy(local_path, remote_path)

    def __getattr__(self, attr):
        if self.local_file is not None:
            return getattr(self.local_file, attr)
        else:
            raise ValueError("File is not opened")
</snippet></ROW><ROW><id>12930899</id><snippet>f = CachedFileObject(cache_dir="/your/tmp/dir")
f.open("/path/to/remote/file")
# ..your f.read()'s here..
f.close()
</snippet></ROW><ROW><id>12931022</id><snippet>SystemExit</snippet></ROW><ROW><id>12931022</id><snippet>exited = None
try:
     function1(argv)
except SystemExit, e:
     # don't exit just yet
     exited = e
function2(argv)

# If function 2 *did not* exit, there was a legitimate reason
# re-raise the SystemExit exception
if exited is not None:
    raise exited
</snippet></ROW><ROW><id>12931022</id><snippet>function1</snippet></ROW><ROW><id>12931022</id><snippet>-h</snippet></ROW><ROW><id>12931022</id><snippet>function2</snippet></ROW><ROW><id>12931022</id><snippet>SystemExit</snippet></ROW><ROW><id>12931022</id><snippet>except SystemExit, e:</snippet></ROW><ROW><id>12931022</id><snippet>e</snippet></ROW><ROW><id>12931022</id><snippet>except</snippet></ROW><ROW><id>12931022</id><snippet>except</snippet></ROW><ROW><id>12931022</id><snippet>exited</snippet></ROW><ROW><id>12931022</id><snippet>except</snippet></ROW><ROW><id>12931022</id><snippet>-h</snippet></ROW><ROW><id>12931022</id><snippet>function1</snippet></ROW><ROW><id>12931022</id><snippet>add_help=False</snippet></ROW><ROW><id>12931688</id><snippet>WSGIPythonPath</snippet></ROW><ROW><id>12931735</id><snippet>matplotlib</snippet></ROW><ROW><id>12931735</id><snippet>scipy.integrate.odeint</snippet></ROW><ROW><id>12931735</id><snippet>matplotlib.axes.streamplot</snippet></ROW><ROW><id>12931797</id><snippet>*</snippet></ROW><ROW><id>12931797</id><snippet>E.body()</snippet></ROW><ROW><id>12931797</id><snippet>...
    E.body(
        *func()
    )
</snippet></ROW><ROW><id>12931797</id><snippet>func()</snippet></ROW><ROW><id>12931797</id><snippet>def func(count):
    result = []
    for i in xrange(count):
        result.append(E("p", "text", key="value"))
    return result
</snippet></ROW><ROW><id>12932163</id><snippet>exps= []
        if location.expRefs != []:
            for future in [Record.get_by_id_async(ref) for ref in location.expRefs]:
                records.append(future.get_result())
</snippet></ROW><ROW><id>12932782</id><snippet>os.path.isfile</snippet></ROW><ROW><id>12932782</id><snippet>if os.path.isfile(db):
</snippet></ROW><ROW><id>12932782</id><snippet>sqlite3.connect</snippet></ROW><ROW><id>12933048</id><snippet>In [27]: A
Out[27]: 
array([[0, 1, 2, 3, 4, 5, 6],
       [4, 5, 6, 7, 4, 5, 6]])

In [28]: A[:, [1,3,4,5]]
Out[28]: 
array([[1, 3, 4, 5],
       [5, 7, 4, 5]])

In [29]: A[:, r_[1, 3:6]]
Out[29]: 
array([[1, 3, 4, 5],
       [5, 7, 4, 5]])

In [37]: A[1:, r_[1, 3:6]]
Out[37]: array([[5, 7, 4, 5]])
</snippet></ROW><ROW><id>12933048</id><snippet>r_</snippet></ROW><ROW><id>12933048</id><snippet>In [30]: r_[1, 3:6]
Out[30]: array([1, 3, 4, 5])
</snippet></ROW><ROW><id>12933612</id><snippet>re.match</snippet></ROW><ROW><id>12933612</id><snippet>re.search</snippet></ROW><ROW><id>12933612</id><snippet>test = re.search(regex, input)</snippet></ROW><ROW><id>12933612</id><snippet>test.group(1)</snippet></ROW><ROW><id>12933612</id><snippet>input</snippet></ROW><ROW><id>12933612</id><snippet>import sys
import re
import csv

input = 'foo blah 38902462986.328946239846'

reader = csv.reader(open('test.csv','rb'), delimiter=',', quotechar="\"")
for row in reader:
    value = row[0]
    if value in input:
        regex = row[2]
        test = re.search(regex, input)
        print input[test.start():test.end()]
</snippet></ROW><ROW><id>12933612</id><snippet>38902462986.328946239846
</snippet></ROW><ROW><id>12933636</id><snippet>import csv, glob, sys

from collections import defaultdict

files = [open(f) for f in glob.glob('user./[1-29].csv')]
#files = [open('input1','r')]
counts = defaultdict(int)

for f in files:
    r = csv.reader(f)
    for line in r:
        for num in line:
            counts[int(num)] += 1

for key,val in sorted(counts.items()):
    print key, val
</snippet></ROW><ROW><id>12933670</id><snippet>password= raw_input('What is the password? ')
correctPassword= 'Secret'

while password != correctPassword:
    password = raw_input ('Enter password again ')

print "Success"
</snippet></ROW><ROW><id>12933670</id><snippet>password</snippet></ROW><ROW><id>12933766</id><snippet>import struct

def invert(x):
    return "".join(chr(ord(c) ^ 255) for c in x)

def tobin(x):
    if x &gt;= 0.0:
        return struct.pack('&gt;d', -x)
    else:
        return invert(struct.pack('&gt;d', x))

data = [-100.0, -2.0, -.9, -.1, 0.0, .1, .9, 2.0, 100.0]

print sorted(data, key=tobin)
# [-100.0, -2.0, -0.9, -0.1, 0.0, 0.1, 0.9, 2.0, 100.0]
</snippet></ROW><ROW><id>12933766</id><snippet>function serialize(n) {
  var buffer = new Buffer(8);
  var l = buffer.length;
  if (n &gt;= 0) {
    buffer.writeDoubleBE(-n, 0);
  } else {
    buffer.writeDoubleBE(n, 0);
    for (var i = 0; i &lt; l; i++) buffer[i] = ~buffer[i];
  }
  return buffer
}

function deserialize(buffer) {
  var l = buffer.length;
  // 0x80 is the most significant byte of the representation of
  // the first positive number(Number.MIN_VALUE)
  if (buffer[0] &gt;= 0x80) { 
    return -buffer.readDoubleBE(0);
  } else {
    for (var i = 0; i &lt; l; i++) buffer[i] = ~buffer[i];
    return buffer.readDoubleBE(0);
  }
}
</snippet></ROW><ROW><id>12934023</id><snippet>print [vertex.label for vertex in x]
</snippet></ROW><ROW><id>12934023</id><snippet>__repr__</snippet></ROW><ROW><id>12934023</id><snippet>def __repr__(self):
    return str(self)
</snippet></ROW><ROW><id>12934101</id><snippet>DictReader.fieldnames</snippet></ROW><ROW><id>12934101</id><snippet>class MyDictReader(DictReader):

    @property
    def fieldnames(self):
        return [field.strip().lower() for field in super(MyDictReader, self).fieldnames]
</snippet></ROW><ROW><id>12934223</id><snippet>if myItem in list:
    # do something
</snippet></ROW><ROW><id>12934223</id><snippet>if myItem not in list:
    # do something
</snippet></ROW><ROW><id>12934472</id><snippet>glob.glob()</snippet></ROW><ROW><id>12934472</id><snippet>cmd = "bash -c 'grep -L killed /dir/dumps/*MAC-66.log'"
</snippet></ROW><ROW><id>12934472</id><snippet>subprocess</snippet></ROW><ROW><id>12934481</id><snippet>inspect</snippet></ROW><ROW><id>12934481</id><snippet>#file a.py

import inspect
def my_func():
    dad_name = inspect.stack()[1][1]
    if inspect.getmodulename(dad_name) == 'b':   #or whatever check on the filename
         print 'You are module b!'
    elif inspect.getmodulename(dad_name) == 'c':
         print 'You are module c!'
    else:
         print 'You are not b nor c!'

#file b.py
import a

a.my_func()

#file c.py

import a
a.my_func()

#file d.py
import a
a.my_func()
</snippet></ROW><ROW><id>12934481</id><snippet>$ python b.py
You are module b!
$ python c.py
You are module c!
$ python d.py
You are not b nor c!
</snippet></ROW><ROW><id>12934481</id><snippet>#file a.py
def my_func(whichmod=None):
    if whichmod == 'b':
         print 'You are module b!'
    elif whichmod == 'c':
         print 'You are module c!'
    else:
         print 'You are not B nor C!'

#files b.py/c.py
import a
a.my_func(whichmod='b')   # or 'c' in module c

#file d.py
import a
a.my_func()
</snippet></ROW><ROW><id>12934545</id><snippet>def blocks(filename):
    title, block = '', None
    with open(filename) as fp:
        for line in fp:
            if '{' in line:
                block = line
            elif block is not None:
                block += line
            else:
                title = line
            if '}' in line:
                yield title, block
                title, block = '', None
</snippet></ROW><ROW><id>12934545</id><snippet>for title, block in blocks('input.txt'):
    if 'solid' not in block:
        print title, block
</snippet></ROW><ROW><id>12934757</id><snippet>id</snippet></ROW><ROW><id>12934757</id><snippet>idValue = values['criteria'][0]['id']
</snippet></ROW><ROW><id>12934757</id><snippet>import json
jsonFile = open('your_filename.json', 'r')
values = json.load(jsonFile)
jsonFile.close()
</snippet></ROW><ROW><id>12934757</id><snippet>import urllib, json
f = urllib.urlopen("http://domain/path/jsonPage")
values = json.load(f)
f.close()
</snippet></ROW><ROW><id>12934757</id><snippet>for criteria in values['criteria']:
    for key, value in criteria.iteritems():
        print key, 'is:', value
    print ''
</snippet></ROW><ROW><id>12934872</id><snippet>&gt;&gt;&gt; bytes=b'\x10\x11\x12\x13'
&gt;&gt;&gt; import struct
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('a,=struct.unpack("&lt;I", bytes)', 'from __main__ import struct, bytes')
0.16049504280090332
&gt;&gt;&gt; timeit.timeit('a=struct.unpack("&lt;I", bytes)[0]', 'from __main__ import struct, bytes')
0.1881420612335205
&gt;&gt;&gt; timeit.timeit('sum(bytes[i] &lt;&lt; (i*8) for i in range(4))', 'from __main__ import bytes')
1.2574431896209717
</snippet></ROW><ROW><id>12934872</id><snippet>struct</snippet></ROW><ROW><id>12934872</id><snippet>[0]</snippet></ROW><ROW><id>12934872</id><snippet>sum</snippet></ROW><ROW><id>12934872</id><snippet>5 + 2</snippet></ROW><ROW><id>12934872</id><snippet>__add__</snippet></ROW><ROW><id>12934872</id><snippet>struck.unpack</snippet></ROW><ROW><id>12934872</id><snippet>sum</snippet></ROW><ROW><id>12934872</id><snippet>sum</snippet></ROW><ROW><id>12934872</id><snippet>#python2
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; L = ['1', '2', '3'] * 5
&gt;&gt;&gt; timeit.timeit('map(int, L)', 'from __main__ import L')
5.549130916595459
&gt;&gt;&gt; timeit.timeit('[int(x) for x in L]', 'from __main__ import L')
6.402460098266602
</snippet></ROW><ROW><id>12934872</id><snippet>map</snippet></ROW><ROW><id>12934872</id><snippet>giacomo@jack-laptop:~$ python2
Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; bytes='\x10\x11\x12\x13'
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('sum(bytes[i] &lt;&lt; (i*8) for i in range(4))', 'from __main__ import bytes')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/timeit.py", line 230, in timeit
    return Timer(stmt, setup, timer).timeit(number)
  File "/usr/lib/python2.7/timeit.py", line 195, in timeit
    timing = self.inner(it, self.timer)
  File "&lt;timeit-src&gt;", line 6, in inner
  File "&lt;timeit-src&gt;", line 6, in &lt;genexpr&gt;
TypeError: unsupported operand type(s) for &lt;&lt;: 'str' and 'int'
</snippet></ROW><ROW><id>12935120</id><snippet>*</snippet></ROW><ROW><id>12935120</id><snippet>supervisorctl restart tapjoy:*
</snippet></ROW><ROW><id>12935120</id><snippet>*</snippet></ROW><ROW><id>12935120</id><snippet>\*</snippet></ROW><ROW><id>12935196</id><snippet>image[10:30, 10:30] = 1</snippet></ROW><ROW><id>12935356</id><snippet>Foo.f</snippet></ROW><ROW><id>12935356</id><snippet>Foo().f</snippet></ROW><ROW><id>12935356</id><snippet>__func__</snippet></ROW><ROW><id>12935356</id><snippet>Foo.f</snippet></ROW><ROW><id>12935356</id><snippet>Foo().f</snippet></ROW><ROW><id>12935356</id><snippet>__get__</snippet></ROW><ROW><id>12935356</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def f(self): pass
... 
&gt;&gt;&gt; Foo.f
&lt;unbound method Foo.f&gt;
&gt;&gt;&gt; Foo().f
&lt;bound method Foo.f of &lt;__main__.Foo object at 0x11046bc10&gt;&gt;
&gt;&gt;&gt; Foo.__dict__['f']
&lt;function f at 0x110450230&gt;
&gt;&gt;&gt; Foo.f.__func__
&lt;function f at 0x110450230&gt;
&gt;&gt;&gt; Foo.f.__func__.__get__(Foo(), Foo)
&lt;bound method Foo.f of &lt;__main__.Foo object at 0x11046bc50&gt;&gt;
&gt;&gt;&gt; Foo.f.__func__.__get__(None, Foo)
&lt;unbound method Foo.f&gt;
</snippet></ROW><ROW><id>12935562</id><snippet>len(list1) &gt;= len(list2)</snippet></ROW><ROW><id>12935562</id><snippet>len(list2)</snippet></ROW><ROW><id>12935562</id><snippet>list1</snippet></ROW><ROW><id>12935562</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list1=['a','b','c']
&gt;&gt;&gt; list2=[1,2]
&gt;&gt;&gt; [zip(x,list2) for x in itertools.permutations(list1,len(list2))]
[[('a', 1), ('b', 2)], [('a', 1), ('c', 2)], [('b', 1), ('a', 2)], [('b', 1), ('c', 2)], [('c', 1), ('a', 2)], [('c', 1), ('b', 2)]]
</snippet></ROW><ROW><id>12935993</id><snippet>double</snippet></ROW><ROW><id>12935993</id><snippet>mantissa * 2^exponent</snippet></ROW><ROW><id>12935993</id><snippet>2^exponent</snippet></ROW><ROW><id>12935993</id><snippet>gwt-math</snippet></ROW><ROW><id>12935993</id><snippet>Big.js</snippet></ROW><ROW><id>12936175</id><snippet>"=?utf-8?q?Abschlags=C3=A4nderung?="
</snippet></ROW><ROW><id>12936175</id><snippet>=?utf-8?q?=22Abschlags=C3=A4nderung=22?=
</snippet></ROW><ROW><id>12936175</id><snippet>"</snippet></ROW><ROW><id>12936175</id><snippet>=22</snippet></ROW><ROW><id>12936175</id><snippet>"</snippet></ROW><ROW><id>12936175</id><snippet>=?utf-8?q?=22?=</snippet></ROW><ROW><id>12936175</id><snippet>&gt;&gt;&gt; email.Header.decode_header('=?utf-8?q?=22?= =?utf-8?q?Abschlags=C3=A4nderung?= =?utf-8?q?=22?=')
[('"Abschlags\xc3\xa4nderung"', 'utf-8')]
</snippet></ROW><ROW><id>12936217</id><snippet>result.append[word]
</snippet></ROW><ROW><id>12936217</id><snippet>word</snippet></ROW><ROW><id>12936217</id><snippet>append</snippet></ROW><ROW><id>12936276</id><snippet>from itertools import groupby
import operator
#input
l = [['Cautus  B.V.', 'plein 92', '1129008', '10', 'AVB', 'Geachte mevrouw Daa', 'Mevrouw C.P. Daa'] ,
['Cautus  B.V.', 'Wei 9-11', '1019123', '10', 'AVB', 'Geachte mevrouw Daa', 'Mevrouw C.P. Daa'] ,
['Cautus  B.V.', 'plein 92', '1129008', '10', 'BEDR', 'Geachte mevrouw Daa', 'Mevrouw C.P. Daa'] ,
['Cautus  B.V.', 'Wei 9-11', '1019123', '10', 'BEDR', 'Geachte mevrouw Daa', 'Mevrouw C.P. Daa'] ,
['De company', 'tiellaan 42', 'KD0022232', '13', 'AVB', 'Geachte heer Tigch', 'De heer I. Tigch'] ,
['De company', 'tiellaan 42', 'KD0022232', '13', 'DAS', 'Geachte heer Tigch', 'De heer I. Tigch'] ,
['Slever ', 'klopt 42', 'KD2220115', '17', 'AVB', 'Geachte heer Slever', 'De heer T. Slever']]
#script
sortkey = operator.itemgetter(1,4)
l_clean = sorted(l,key=sortkey)

l_final = [(k, list(v)) for k,v in groupby(l_clean, key = operator.itemgetter(1))]

for k,v in l_final:
   info_rest = v[0][:4]+v[0][5:]
   info_combine = map(operator.itemgetter(4),v) 
   print k,info_combine,info_rest
</snippet></ROW><ROW><id>12936276</id><snippet>groupby</snippet></ROW><ROW><id>12936378</id><snippet>files = glob.glob('*')
d = {}
for f in files:
    d[f] = {}
</snippet></ROW><ROW><id>12936378</id><snippet>file1</snippet></ROW><ROW><id>12936378</id><snippet>file1_dict = d['file1']</snippet></ROW><ROW><id>12936378</id><snippet>d['file1']['data1']</snippet></ROW><ROW><id>12936518</id><snippet>def make_happiness_table(filename="word-happiness.csv"):
   ''' make_happiness_table: string -&gt; dict
      creates a dictionary of happiness scores from the given file '''

   return {}
</snippet></ROW><ROW><id>12936696</id><snippet>PchipInterpolator</snippet></ROW><ROW><id>12936696</id><snippet>pchip</snippet></ROW><ROW><id>12936696</id><snippet>import numpy as np
from scipy.interpolate import pchip
import matplotlib.pyplot as plt


# Data to be interpolated.
x = np.arange(10.0)
y = np.array([5.0, 10.0, 20.0, 15.0, 13.0, 22.0, 20.0, 15.0, 12.0, 16.0])

# Create the interpolator.
interp = pchip(x, y)

# Dense x for the smooth curve.
xx = np.linspace(0, 9.0, 101)

# Plot it all.
plt.plot(xx, interp(xx))
plt.plot(x, y, 'bo')
plt.ylim(0, 25)
plt.grid(True)
plt.show()
</snippet></ROW><ROW><id>12936754</id><snippet>&lt;div id="sortparam" &gt;

&lt;%
    k = 1
    a=99
%&gt;
&lt;ul  class="ui-sortable" id="sorpara"&gt;
    % for k in a:
        &lt;% 
        c='inputp'+k+'_id' 
        %&gt;
        % if c in urld['kwargs'] :

&lt;li id="inputp${k}_id" class="ui-state-default"&gt;&lt;span class="ui-icon ui-icon-arrowthick-2-n-s"&gt;&lt;/span&gt;${urld['kwargs']['${c}']}&lt;/li&gt;

        %     endif
        % endfor
  &lt;/ul&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>12936758</id><snippet>def setup_cookie():
    # try/except to read the cookie
    return cookie

def headers(cookie):
    # print a set-cookie header if needed
    return "SetCookie: etc"

def page_content(cookie):
    # maybe you want to alter the page content with a regex or something based on the cookie value
    return html

cookie = setup_cookie()
print headers( cookie )
print ""
print page_content( cookie )
</snippet></ROW><ROW><id>12937142</id><snippet>{</snippet></ROW><ROW><id>12937142</id><snippet>subprocess</snippet></ROW><ROW><id>12937142</id><snippet>import subprocess
p = subprocess.Popen(['dir'],stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
stdout,stderr = p.communicate()
</snippet></ROW><ROW><id>12937142</id><snippet>shell=True</snippet></ROW><ROW><id>12937224</id><snippet>r''</snippet></ROW><ROW><id>12937224</id><snippet>type(u'abc')
</snippet></ROW><ROW><id>12937224</id><snippet>&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>12937224</id><snippet>api.fql(...)</snippet></ROW><ROW><id>12937299</id><snippet>class LI(list):
    def append(self, *args):
        self.extend(args)
</snippet></ROW><ROW><id>12937299</id><snippet>a = LI()
a.append(1,2,3,4)
a.append(5)
</snippet></ROW><ROW><id>12937299</id><snippet>class LI(list):
    def append(self, item):
        list.append(self,item)
        list.append(self,item)
</snippet></ROW><ROW><id>12937299</id><snippet>extend</snippet></ROW><ROW><id>12937299</id><snippet>append</snippet></ROW><ROW><id>12937299</id><snippet>a = list()
a.extend((1,2,3,4))
a.append(5)
</snippet></ROW><ROW><id>12937299</id><snippet>a = list()
item = 1
a.extend((item,item))
</snippet></ROW><ROW><id>12937647</id><snippet>class User(webapp2.RequestHandler):
  def get(self):
    un = self.request.get('un')
    pw = self.request.get('pw')
    self.response.headers['Content-Type'] = 'text/plain'
    self.response.write('Yey!' + un + ' ' + pw)
</snippet></ROW><ROW><id>12937713</id><snippet>try:
   import ModuleName
except ImportError:
   print 'Error, Module ModuleName is required'
</snippet></ROW><ROW><id>12937713</id><snippet>call</snippet></ROW><ROW><id>12937713</id><snippet>subprocess</snippet></ROW><ROW><id>12937713</id><snippet>os.system()</snippet></ROW><ROW><id>12937827</id><snippet>with open('file') as f:
    seen = set()
    for line in f:
        line_lower = line.lower()
        if line_lower in seen:
            print(line)
        else:
            seen.add(line_lower)
</snippet></ROW><ROW><id>12937893</id><snippet>ctypes</snippet></ROW><ROW><id>12938229</id><snippet>def preserve_output(f):
    def wrap(input, output):
        if not os.path.isfile(output):
            f(input, output)
    return wrap

@preserve_output
def task1(input, output):
    ...

@preserve_output
def task2(input, output):
    ...

task1('input', 'output_1')
task2('output_1', 'output_2')
task3('output_2', 'output_3') etc
</snippet></ROW><ROW><id>12938398</id><snippet>pip install -i http://pypi.testrun.org -U pytest
</snippet></ROW><ROW><id>12938405</id><snippet>class BiDict(dict):
  """Bidirectional Dictionary - setting 'key' to 'value' also
     sets 'value' to 'key' (so don't use overlapping mappings)
  """

  def __init__(self, *args):
    super(BiDict, self).__init__(*args)

    # After regular dict initialization, loop over any items
    # and add their reverse.  Note that we can't use any of the
    # iter* methods here since we're adding items in the body
    # of the loop.
    for key in self.keys():
      super(BiDict, self).__setitem__(self[key], key);


  def __setitem__(self, key, val):
    # If the key has an old value, delete its reverse
    if key in self:
      super(BiDict, self).__delitem__(self[key])

    # Then add both forward and reverse for the new value
    super(BiDict, self).__setitem__(key, val);
    super(BiDict, self).__setitem__(val, key);

  def __delitem__(self, key):
    # delete both directions
    if key in self:
      super(BiDict, self).__delitem__(self[key]);
      super(BiDict, self).__delitem__(key);
</snippet></ROW><ROW><id>12938405</id><snippet>&gt;&gt;&gt; from bidict import BiDict
&gt;&gt;&gt; d = BiDict({'a':1,'b':2})
&gt;&gt;&gt; d['a']
1
&gt;&gt;&gt; d[2]
'b'
&gt;&gt;&gt; d['c']=3
&gt;&gt;&gt; d[3]
'c'
&gt;&gt;&gt; del d['a']
&gt;&gt;&gt; d['a']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'a'
&gt;&gt;&gt; d[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 1
</snippet></ROW><ROW><id>12938642</id><snippet>ssl.reddit.com</snippet></ROW><ROW><id>12938642</id><snippet>import requests
# Login                                                                                                
client = requests.session(headers={'User-Agent': 'Requests test'})
data = {'user': 'USERNAME', 'passwd': 'PASSWORD', 'api_type': 'json'}
r = client.post('https://ssl.reddit.com/api/login', data=data)
modhash = r.json['json']['data']['modhash']

# Vote                                                                                                 
data = {'id': 't3_11mr32', 'dir': '1', 'uh': modhash, 'api_type': 'json'}
r = client.post('http://www.reddit.com/api/vote', data=data)
print r.status_code  # Should be 200                                                                   
print r.json  # Should be {}
</snippet></ROW><ROW><id>12938807</id><snippet>WHERE
                TRIGGER LIKE '%(package)s%'
</snippet></ROW><ROW><id>12938807</id><snippet>WHERE
                TRIGGER LIKE '%(package)s%%'
</snippet></ROW><ROW><id>12938807</id><snippet>WHERE
                TRIGGER LIKE '%(package)s'
</snippet></ROW><ROW><id>12938816</id><snippet>perm</snippet></ROW><ROW><id>12938816</id><snippet>perm == 0</snippet></ROW><ROW><id>12938816</id><snippet>print type(perm)
</snippet></ROW><ROW><id>12938816</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>12938989</id><snippet>__init__()</snippet></ROW><ROW><id>12938989</id><snippet>atoms</snippet></ROW><ROW><id>12938989</id><snippet>C.setdata('something')</snippet></ROW><ROW><id>12938989</id><snippet>C.atoms</snippet></ROW><ROW><id>12938989</id><snippet>&gt;&gt;&gt; C = Residues()
&gt;&gt;&gt; C.atoms.append('thing')

Traceback (most recent call last):
  File "&lt;pyshell#84&gt;", line 1, in &lt;module&gt;
    B.atoms.append('thing')
AttributeError: Residues instance has no attribute 'atoms'

&gt;&gt;&gt; C.setdata('something')
&gt;&gt;&gt; C.atoms.append('thing')   # now it works
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12938989</id><snippet>atoms</snippet></ROW><ROW><id>12938989</id><snippet>def __init__(self):
    self.atoms = []
</snippet></ROW><ROW><id>12938996</id><snippet>decimal</snippet></ROW><ROW><id>12938996</id><snippet>&gt;&gt;&gt; decimal.getcontext().prec = 2
&gt;&gt;&gt; decimal.Decimal(1)/decimal.Decimal(3)
Decimal('0.33')
</snippet></ROW><ROW><id>12939196</id><snippet>In [7]: for i in Averages:
        print(" ".join([str(i)]*3)+"\n")
   ...:  
   ...:  
200 200 200

300 300 300
</snippet></ROW><ROW><id>12939358</id><snippet>eval</snippet></ROW><ROW><id>12939358</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; operation = "10/2*6 + math.sqrt(42)"
&gt;&gt;&gt; eval(operation)
36.48074069840786
</snippet></ROW><ROW><id>12939521</id><snippet>lxml</snippet></ROW><ROW><id>12939521</id><snippet>from lxml import etree as ET


&gt;&gt;&gt; root = ET.fromstring('&lt;TopoDefs&gt;&lt;Device Name="SNB" LogicalType="CORE" IdCode="0x03886A21" Mask="0xf0000000"&gt;&lt;Variable name="A0" value="0x52001321" type="GREEN" /&gt;&lt;Variable name="A1" value="0x51001321" type="GREEN" /&gt;&lt;Variable name="A2" value="0x03001321" type="GREEN" /&gt;&lt;Variable name="A3" value="0x14001321" type="GREEN" /&gt;&lt;Variable name="B0" value="0x5A001321" type="BLUE" /&gt;&lt;Variable name="B1" value="0x51001321" type="BLUE" /&gt;&lt;Variable name="B2" value="0x04001321" type="BLUE" /&gt;&lt;Variable name="B3" value="0x05001321" type="BLUE" /&gt;&lt;/Device&gt;&lt;/TopoDefs&gt;')
&gt;&gt;&gt; root.xpath('.//Variable[@name="A0"]')[0].attrib['value']='test'
&gt;&gt;&gt; print ET.tostring(root,pretty_print=True)
&lt;TopoDefs&gt;
  &lt;Device Name="SNB" LogicalType="CORE" IdCode="0x03886A21" Mask="0xf0000000"&gt;
    &lt;Variable name="A0" value="test" type="GREEN"/&gt;
    &lt;Variable name="A1" value="0x51001321" type="GREEN"/&gt;
    &lt;Variable name="A2" value="0x03001321" type="GREEN"/&gt;
    &lt;Variable name="A3" value="0x14001321" type="GREEN"/&gt;
    &lt;Variable name="B0" value="0x5A001321" type="BLUE"/&gt;
    &lt;Variable name="B1" value="0x51001321" type="BLUE"/&gt;
    &lt;Variable name="B2" value="0x04001321" type="BLUE"/&gt;
    &lt;Variable name="B3" value="0x05001321" type="BLUE"/&gt;
  &lt;/Device&gt;
&lt;/TopoDefs&gt;
</snippet></ROW><ROW><id>12939521</id><snippet>Variables</snippet></ROW><ROW><id>12939521</id><snippet>&gt;&gt;&gt; for i in root.xpath('.//Variable'):
...     i.attrib['value']='CHANGE'
...     
&gt;&gt;&gt; print ET.tostring(root,pretty_print=True)
&lt;TopoDefs&gt;
  &lt;Device Name="SNB" LogicalType="CORE" IdCode="0x03886A21" Mask="0xf0000000"&gt;
    &lt;Variable name="A0" value="CHANGE" type="GREEN"/&gt;
    &lt;Variable name="A1" value="CHANGE" type="GREEN"/&gt;
    &lt;Variable name="A2" value="CHANGE" type="GREEN"/&gt;
    &lt;Variable name="A3" value="CHANGE" type="GREEN"/&gt;
    &lt;Variable name="B0" value="CHANGE" type="BLUE"/&gt;
    &lt;Variable name="B1" value="CHANGE" type="BLUE"/&gt;
    &lt;Variable name="B2" value="CHANGE" type="BLUE"/&gt;
    &lt;Variable name="B3" value="CHANGE" type="BLUE"/&gt;
  &lt;/Device&gt;
&lt;/TopoDefs&gt;
</snippet></ROW><ROW><id>12939566</id><snippet>property([fget[, fset[, fdel[, doc]]]])</snippet></ROW><ROW><id>12939566</id><snippet>object</snippet></ROW><ROW><id>12939566</id><snippet>class Test1(object):
    # your code

class Test2(object):
    def __init__(self):
        self._val = 0

    @property
    def val(self):
        return self._val

    @val.setter
    def val(self,newVal): # should be named as property
        self._val = newVal

    def __str__(self):
        return "Value: {}".format(self.val)
</snippet></ROW><ROW><id>12939566</id><snippet>&gt;&gt;&gt; verify(Test1())

Check with Test1
('Value check:', 0)
('Value after a.val = 5 is:', 5)
('The actual value is:', 5)
</snippet></ROW><ROW><id>12939648</id><snippet>class UdevWrapper:
    def udevadm_trigger(self):
        call(['/sbin/udevadm', 'trigger', '--action=change'])
</snippet></ROW><ROW><id>12939648</id><snippet>@patch.object(utils.UdevWrapper,'udevadm_trigger')
def test_trigger_called(self,mock_udevadm_trigger):
    mock_udevadm_trigger.return_value = True

    # name changed for clarity
    ClassWhereTriggerCalled.func()
    assert mock_udevadm_trigger.called
</snippet></ROW><ROW><id>12940002</id><snippet>pip freeze
</snippet></ROW><ROW><id>12940019</id><snippet>def fun1(self,paint,a,b):
    do something ...
def fun2(self,paint,a,b):
    do something ...
def fun3(self,paint,a,b):
    do something .... 

self.fun = [self.fun1,self.fun2,self.fun3]

def paintEvent(self,event=None):
    for i in range (1,3):
       self.fun[i](self,paint,a,b)
</snippet></ROW><ROW><id>12940041</id><snippet>
def my_def (my_val=my_val):
    query = Session.query(Table1, Table2).\
            filter(Table1.c1.in_(some_val)).\
            filter(Table1.c2 == 113).\
            filter(Table2.c3 == val1).\
            filter(Table1.c4 == val2).\
            filter(Table2.c5 == val5)
    if my_val:
        query = query.filter(Table1.c6 == my_val)
    return query.all()&lt;/p&gt;

&lt;p&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>12940107</id><snippet>class Geolocation(Base):
    __tablename__ = "geolocation"
    id = Column(Integer, primary_key=True)
    latitude = Column(Float)
    longitude = Column(Float)
    elevation = Column(Float)         # Meters
    # Relationships
    person = relationship('Pin', uselist=False, backref="geolocation")

    def __init__(self, latitude, longitude, elevation):
        self.latitude = latitude
        self.longitude = longitude
        self.elevation = elevation

    def __repr__(self):
        return '&lt;Geolocation %s, %s&gt;' % (self.latitude, self.longitude)


class Pin(Base):
    __tablename__ = 'pin'
    id = Column(Integer, primary_key=True)
    geolocation_id = Column(Integer, ForeignKey('geolocation.id'), unique=True, nullable=False)  # True one to one relationship (Implicit child)
    type = Column('type', String(50))              # discriminator
    __mapper_args__ = {'polymorphic_on': type}

    def __init__(self, geolocation_id):
        self.geolocation_id = geolocation_id


class User(Pin):
    __tablename__ = 'user'
    id = Column(Integer, ForeignKey('pin.id'), primary_key=True)
    __mapper_args__ = {'polymorphic_identity': 'user',
                       'inherit_condition': (id == Pin.id)}
    user_id = Column(Integer, autoincrement=True, primary_key=True, unique=True)
    username = Column(String(80), unique=True)
    password_hash = Column(String(120))
    salt = Column(String(120))
    posts = relationship('Posting', primaryjoin="(User.user_id==Posting.user_id)", backref=backref('user'), lazy='dynamic')   #One User to many Postings.

    def __init__(self, username, password_hash, salt, geo_id):
        super(User, self).__init__(geo_id)
        self.username = username
        self.password_hash = password_hash
        self.salt = salt

    def __repr__(self):
        return '&lt;User %s&gt;' % (self.username)


class Posting(Pin):
    __tablename__ = 'posting'
    id = Column(Integer, ForeignKey('pin.id'), primary_key=True)
    __mapper_args__ = {'polymorphic_identity': 'posting',
                        'inherit_condition': (id == Pin.id)}
    posting_id = Column(Integer, autoincrement=True, primary_key=True, unique=True)
    creation_time = Column(DateTime)
    expiration_time = Column(DateTime)
    user_id = Column(Integer, ForeignKey('user.user_id'))              # One User to many Postings

    def __init__(self, creation_time, expiration_time, user_id, geo_id):
        super(Posting, self).__init__(geo_id)
        # For now, require creation time to be passed in. May make this default to current time.
        self.creation_time = creation_time
        self.expiration_time = expiration_time
        self.user_id = user_id

    def __repr__(self):
        #TODO come up with a better representation
        return '&lt;Post %s&gt;' % (self.creation_time)
</snippet></ROW><ROW><id>12940410</id><snippet>for i in xrange(0, len(list)):
    if i % 2 == 0:
        list[i] += 1
</snippet></ROW><ROW><id>12940469</id><snippet>from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('weeks', nargs='+', type=int, help='weeks numbers')
args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>12940469</id><snippet>$ python your_script.py 1 2 3
</snippet></ROW><ROW><id>12940469</id><snippet>Namespace(weeks=[1, 2, 3])
</snippet></ROW><ROW><id>12940469</id><snippet>'weekly_1_2_3'</snippet></ROW><ROW><id>12940469</id><snippet>args.weeks</snippet></ROW><ROW><id>12940469</id><snippet>result = 'weekly_' + '_'.join(map(str, args.weeks))
</snippet></ROW><ROW><id>12940469</id><snippet>'weekly_1_2_3_4'</snippet></ROW><ROW><id>12940469</id><snippet>1 2 3 4</snippet></ROW><ROW><id>12940529</id><snippet>list comprehension</snippet></ROW><ROW><id>12940529</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; L=[['a','b'],['foo','bar'],['spam','eggs'],['b','c'],['spam','bar']]
&gt;&gt;&gt; S=Counter(chain(*L))
&gt;&gt;&gt; S
Counter({'b': 2, 'bar': 2, 'spam': 2, 'a': 1, 'c': 1, 'eggs': 1, 'foo': 1})

&gt;&gt;&gt; [[y for y in x if S[y]!=1] for x in L]
[['b'], ['bar'], ['spam'], ['b'], ['spam', 'bar']]
</snippet></ROW><ROW><id>12940529</id><snippet>R</snippet></ROW><ROW><id>12940529</id><snippet>&gt;&gt;&gt; L=[['a','b'],['foo','bar'],['spam','eggs'],['b','c'],['spam','bar']]
&gt;&gt;&gt; R={'a','foo'}
&gt;&gt;&gt; [[y for y in x if y not in R] for x in L]
[['b'], ['bar'], ['spam', 'eggs'], ['b', 'c'], ['spam', 'bar']]
</snippet></ROW><ROW><id>12940913</id><snippet>sys.stdin</snippet></ROW><ROW><id>12940913</id><snippet>f = open('path/to/file')
N = int(f.readline().strip())
A = []
while len(A) &lt; N:
    A.extend(int(i) for i in f.readline().strip().split())
</snippet></ROW><ROW><id>12941217</id><snippet>compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated

if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]

suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | exec_stmt | assert_stmt)
</snippet></ROW><ROW><id>12941217</id><snippet>suite</snippet></ROW><ROW><id>12941217</id><snippet>compound_stmt</snippet></ROW><ROW><id>12941217</id><snippet>if True: try:
  # do something
except:
  # handle
foo()
</snippet></ROW><ROW><id>12941217</id><snippet>except</snippet></ROW><ROW><id>12941217</id><snippet>if</snippet></ROW><ROW><id>12941217</id><snippet>foo</snippet></ROW><ROW><id>12941217</id><snippet>if</snippet></ROW><ROW><id>12941217</id><snippet>suite: compound_stmt</snippet></ROW><ROW><id>12941311</id><snippet>from logging import *</snippet></ROW><ROW><id>12941311</id><snippet>commonlogging</snippet></ROW><ROW><id>12941311</id><snippet>&gt;&gt;&gt; with open('mylogging.py', 'w') as f:
...     f.write('''from logging import *
... my_customization = "it works"''')
...
&gt;&gt;&gt; import mylogging
&gt;&gt;&gt; print mylogging.my_customization
it works
&gt;&gt;&gt; help(mylogging.log)
Help on function log in module logging:

log(level, msg, *args, **kwargs)
    Log 'msg % args' with the integer severity 'level' on the root logger.
</snippet></ROW><ROW><id>12941348</id><snippet>Traceback (most recent call last):
  File "main.py", line 12, in &lt;module&gt;
    usernames = getUsernames(locations, gh)
  File "/home/ciembor/projekty/github-rank/functions.py", line 39, in getUsernames
    for user in result:
  File "/usr/lib/python2.7/site-packages/PyGithub-1.8.0-py2.7.egg/github/PaginatedList.py", line 33, in __iter__
    newElements = self.__grow()
  ...
</snippet></ROW><ROW><id>12941348</id><snippet>for user in result:</snippet></ROW><ROW><id>12941348</id><snippet>getResult</snippet></ROW><ROW><id>12941348</id><snippet>getUsernames</snippet></ROW><ROW><id>12941348</id><snippet>try</snippet></ROW><ROW><id>12941348</id><snippet>except</snippet></ROW><ROW><id>12941375</id><snippet>python -c 'print open("text_file.txt").read().replace("example","replaced_example")'
</snippet></ROW><ROW><id>12941375</id><snippet>sed</snippet></ROW><ROW><id>12941375</id><snippet>sed -e 's/example/replace_example/g' text_file.txt
</snippet></ROW><ROW><id>12941388</id><snippet>not in</snippet></ROW><ROW><id>12941388</id><snippet>In [25]: def func():
    'e' not in 'bee'
   ....:     
   ....:     

In [27]: def func1():
    not 'e' in 'bee'
   ....:     
   ....:     
In [29]: dis.dis(func)
  2           0 LOAD_CONST               1 ('e')
              3 LOAD_CONST               2 ('bee')
              6 COMPARE_OP               7 (not in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        

In [30]: dis.dis(func1)
  2           0 LOAD_CONST               1 ('e')
              3 LOAD_CONST               2 ('bee')
              6 COMPARE_OP               7 (not in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE  
</snippet></ROW><ROW><id>12941482</id><snippet>class Tester(BlogHandler):
    def get(self):
        global visits
        logout = users.create_logout_url(self.request.uri)
        user = users.get_current_user()

        if user:
            currentregistereduser = None
            user_db_qry = User.query(User.theid == user.federated_identity())
            user_db_list = user_db_qry.fetch(1)
            # Check to see if the query returned anything at all - if so, assign
            # the value to currentregistereduser; it not, it will remain None
            if user_db_list:
              currentregistereduser = user_db_list[0]

            if currentregistereduser:
                if not currentregistereduser.username:
                    self.redirect("/profile")
                else:
                    self.render("tester.html", user=user, logout=logout)

        # Assuming the code continues here...
</snippet></ROW><ROW><id>12941698</id><snippet>BigIntegerField</snippet></ROW><ROW><id>12941698</id><snippet>PositiveIntegerField</snippet></ROW><ROW><id>12941698</id><snippet>forwards</snippet></ROW><ROW><id>12941698</id><snippet>db.alter_column('table_name', 'column', self.gf('django.db.models.fields.BigIntegerField'))
</snippet></ROW><ROW><id>12941775</id><snippet>class MyClass</snippet></ROW><ROW><id>12941775</id><snippet>MyClass.my_var</snippet></ROW><ROW><id>12941775</id><snippet>self.my_var</snippet></ROW><ROW><id>12941775</id><snippet>my_var = 'global'
class MyClass(object):
   my_var = 'class' 
   def __init__(self):
      print my_var #global
      print MyClass.my_var #class
      print self.my_var #class -- Only since we haven't set this attribute on the instance
      self.my_var = 'instance' #set instance attribute.
      print self.my_var #instance
      print MyClass.my_var #class
</snippet></ROW><ROW><id>12942108</id><snippet>{% if ... %}</snippet></ROW><ROW><id>12942108</id><snippet>{ % end %}</snippet></ROW><ROW><id>12942108</id><snippet>if</snippet></ROW><ROW><id>12942108</id><snippet>&lt;script &gt;</snippet></ROW><ROW><id>12942108</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>12942108</id><snippet>if</snippet></ROW><ROW><id>12942108</id><snippet>for</snippet></ROW><ROW><id>12942108</id><snippet>{{...}}</snippet></ROW><ROW><id>12942108</id><snippet>enabled</snippet></ROW><ROW><id>12942108</id><snippet>var enabled = True;</snippet></ROW><ROW><id>12942108</id><snippet>{{ &lt;expr&gt;  }}</snippet></ROW><ROW><id>12942108</id><snippet>myvar = "bla"</snippet></ROW><ROW><id>12942108</id><snippet>var myvar = {{ myvar }}</snippet></ROW><ROW><id>12942108</id><snippet>var myvar = bla</snippet></ROW><ROW><id>12942108</id><snippet>bla</snippet></ROW><ROW><id>12942108</id><snippet>var myvar="{{ myvar }}"</snippet></ROW><ROW><id>12942108</id><snippet>myvar = '"%s"' % "bla"</snippet></ROW><ROW><id>12942416</id><snippet>for i, line in enumerate(filein):
    try:
        chrom,cuff,exon,start,end,dot,sign,dots,gene,tranid,exonid,rest = line.split('\t',11)
    except ValueError:
        print "ValueError on line", i+1
        print "line", repr(line)
        raise
</snippet></ROW><ROW><id>12942416</id><snippet>&gt;&gt;&gt; for i, line in enumerate(urllib.urlopen('http://dl.dropbox.com/u/108419362/file.gtf')):
...     if line.count('\t') &lt; 11:
...         print i+1, repr(line)
...         break
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12942437</id><snippet>SELECT count(*) AS count_1
FROM "table"
</snippet></ROW><ROW><id>12942437</id><snippet>from sqlalchemy import select, func, Integer, Table, Column, MetaData

metadata = MetaData()

table = Table("table", metadata,
              Column('primary_key', Integer),
              Column('other_column', Integer)  # just to illustrate
             )   

print select([func.count()]).select_from(table)
</snippet></ROW><ROW><id>12942437</id><snippet>Query</snippet></ROW><ROW><id>12942437</id><snippet>count()</snippet></ROW><ROW><id>12942437</id><snippet>from sqlalchemy import func

class BaseQuery(Query):
    def count_star(self):
        count_query = (self.statement.with_only_columns([func.count()])
                       .order_by(None))
        return self.session.execute(count_query).scalar()
</snippet></ROW><ROW><id>12942437</id><snippet>order_by(None)</snippet></ROW><ROW><id>12942437</id><snippet>count(*)</snippet></ROW><ROW><id>12942437</id><snippet>filter</snippet></ROW><ROW><id>12942437</id><snippet>join</snippet></ROW><ROW><id>12942530</id><snippet>python</snippet></ROW><ROW><id>12942530</id><snippet>help(&lt;graph's module name&gt;)</snippet></ROW><ROW><id>12942530</id><snippet>FILE</snippet></ROW><ROW><id>12942530</id><snippet>import numpy
help(numpy)

# Returned documentation containing:
# FILE
# /usr/lib/python2.7/dist-packages/numpy/__init__.py
</snippet></ROW><ROW><id>12942530</id><snippet>import my_module # A module I just created that contains the "Line" class
help(my_module)

# Returned documentation containing:
# FILE
# /home/&lt;my user name&gt;/Programming/Python/my_module.py
</snippet></ROW><ROW><id>12942629</id><snippet>class Deco(object):
    config = {'message': 'hello'}

    def __init__(self, func=None, **kwargs):
         if kwargs:
             self.config = kwargs
         if func is not None:
             self._decorate(func)

    def _decorate(self, func):
        self.func = func
        functools.wraps(func)(self)

    def __call__(self, *args, **kwargs):
        if not hasattr(self, "func"):
            self._decorate(func)
            return self
        print self.config['message']
        return self.func(*args, **kwargs)
</snippet></ROW><ROW><id>12942798</id><snippet>org.apache.hadoop.mapred</snippet></ROW><ROW><id>12942798</id><snippet>org.apache.hadoop.mapreduce</snippet></ROW><ROW><id>12942798</id><snippet>InputFormat</snippet></ROW><ROW><id>12942798</id><snippet>com.twitter.elephantbird.mapreduce.input.LzoTextInputFormat</snippet></ROW><ROW><id>12942798</id><snippet>com.twitter.elephantbird.mapred.input.DeprecatedLzoTextInputFormat</snippet></ROW><ROW><id>12942807</id><snippet>T</snippet></ROW><ROW><id>12942807</id><snippet>a</snippet></ROW><ROW><id>12942807</id><snippet>t</snippet></ROW><ROW><id>12942807</id><snippet>&gt;&gt;&gt; 'T' &lt; 'a' &lt; 't'
True
</snippet></ROW><ROW><id>12942807</id><snippet>&gt;&gt;&gt; "apple" &gt; "a"
True
</snippet></ROW><ROW><id>12942807</id><snippet>11.1</snippet></ROW><ROW><id>12942807</id><snippet>'11.1'</snippet></ROW><ROW><id>12942807</id><snippet>'str' &gt; 'float'</snippet></ROW><ROW><id>12943175</id><snippet>from apscheduler.scheduler import Scheduler

schedule = Scheduler()
jobs = schedule.get_jobs() #jobs is a list of apscheduler jobs
jobs_kwargs = map(lambda k: k.kwargs, jobs)
</snippet></ROW><ROW><id>12943180</id><snippet>try: App.run() finally: cleanup()</snippet></ROW><ROW><id>12943180</id><snippet>import sys
from subprocess import call

rc = call([sys.executable, 'path/to/run_app.py'])
cleanup()
</snippet></ROW><ROW><id>12943180</id><snippet>-c</snippet></ROW><ROW><id>12943180</id><snippet>rc = call([sys.executable, '-c', '''import sys
print(sys.argv)
'''])
</snippet></ROW><ROW><id>12943180</id><snippet>preexec_fn=os.setsid</snippet></ROW><ROW><id>12943180</id><snippet>()</snippet></ROW><ROW><id>12943180</id><snippet>shell=True</snippet></ROW><ROW><id>12943180</id><snippet>import multiprocessing as mp

if __name__=="__main__":
   p = mp.Process(target=App.run)
   p.start()
   p.join()
   cleanup()
</snippet></ROW><ROW><id>12943214</id><snippet>from scipy.optimize import minimize
import numpy as np

def f(coord,x,y,r):
    return np.sum( ((coord[0] - x)**2) + ((coord[1] - y)**2) - (r**2) )

x = np.array([0,   2,  0])
y = np.array([0,   0,  2])
r = np.array([.88, 1, .75])

# initial (bad) guess at (x,y) values
initial_guess = np.array([100,100])

res = minimize(f,initial_guess,args = [x,y,r])
</snippet></ROW><ROW><id>12943214</id><snippet>&gt;&gt;&gt; print res.x
[ 0.66666666  0.66666666]
</snippet></ROW><ROW><id>12943214</id><snippet>def f2(coord,args):
    x,y,r = args
    # notice that we're returning a vector of dimension 3
    return ((coord[0]-x)**2) + ((coord[1] - y)**2) - (r**2)
</snippet></ROW><ROW><id>12943214</id><snippet>from scipy.optimize import leastsq
res = leastsq(f2,initial_guess,args = [x,y,r])
</snippet></ROW><ROW><id>12943214</id><snippet>&gt;&gt;&gt; print res[0]
&gt;&gt;&gt; [ 0.77961518  0.85811473]
</snippet></ROW><ROW><id>12943214</id><snippet>minimize</snippet></ROW><ROW><id>12943214</id><snippet>def f(coord,x,y,r):
    vec = ((coord[0]-x)**2) + ((coord[1] - y)**2) - (r**2)
    # return the sum of the squares of the vector
    return np.sum(vec**2)
</snippet></ROW><ROW><id>12943214</id><snippet>&gt;&gt;&gt; print res.x
&gt;&gt;&gt; [ 0.77958326  0.8580965 ]
</snippet></ROW><ROW><id>12943214</id><snippet>args</snippet></ROW><ROW><id>12943214</id><snippet>leastsq</snippet></ROW><ROW><id>12943214</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>12943214</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>12943214</id><snippet>scipy.optimize</snippet></ROW><ROW><id>12943481</id><snippet>dates="""\
16th February 2011
4th April 2009
31st December 2007"""

import re
import time

for date in dates.splitlines():
    p=re.findall(r'(\d+)\w\w (\w+) (\d\d\d\d)',date)
    d=time.strptime(' '.join(p[0]),'%d %B %Y')
    iso=time.strftime('%Y%m%d',d)
    print "{0:&gt;20} =&gt;{1:&gt;30} =&gt;{2:&gt;15}".format(date,p,iso)
</snippet></ROW><ROW><id>12943481</id><snippet>  16th February 2011 =&gt;  [('16', 'February', '2011')] =&gt;       20110216
      4th April 2009 =&gt;      [('4', 'April', '2009')] =&gt;       20090404
  31st December 2007 =&gt;  [('31', 'December', '2007')] =&gt;       20071231
</snippet></ROW><ROW><id>12943510</id><snippet>Hero.__init__(self.name, None)
</snippet></ROW><ROW><id>12943510</id><snippet>TypeError: __init__() takes exactly 3 arguments (2 given)</snippet></ROW><ROW><id>12943902</id><snippet>ratings</snippet></ROW><ROW><id>12943902</id><snippet>from ratings.models import Ratings</snippet></ROW><ROW><id>12943966</id><snippet>import numpy as np
orig_color = (0, 0, 0)
replacement_color = (r, g, b)

data[(data == orig_color).all(axis = -1)] = replacement_color
</snippet></ROW><ROW><id>12944014</id><snippet>while True:
    print inst.ask('channel')
    time.sleep(1)
</snippet></ROW><ROW><id>12944014</id><snippet>import matplotlib
matplotlib.use('TkAgg')  # this has to go before the other imports
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import Tkinter as Tk
import visa

# set up a PyVISA instrument and a list for the data
data = []
keithley = visa.instrument('GPIB0::whatever')

# make a Tkinter window
root = Tk.Tk()

# add a matplotlib figure to the Tk window
fig = Figure()
ax = fig.add_subplot(111)
canv = FigureCanvasTkAgg(fig, master=root)
canv.show()
canv.get_tk_widget().pack(fill='both', expand=True)

# a function that is called periodically by the event loop
def plot_update():
    # add a new number to the data
    data.append(keithley.ask('SCPI:COMM:AND?'))

    # replot the data in the Tk window
    ax.clear()
    ax.plot(data)
    fig.tight_layout()
    canv.draw()

    # wait a second before the next plot
    root.after(1000, plot_update)

root.after(1000, plot_update)
root.mainloop()
</snippet></ROW><ROW><id>12944035</id><snippet>json</snippet></ROW><ROW><id>12944035</id><snippet>indent</snippet></ROW><ROW><id>12944035</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt;
&gt;&gt;&gt; your_json = '["foo", {"bar":["baz", null, 1.0, 2]}]'
&gt;&gt;&gt; parsed = json.loads(your_json)
&gt;&gt;&gt; print json.dumps(parsed, indent=4, sort_keys=True)
[
    "foo", 
    {
        "bar": [
            "baz", 
            null, 
            1.0, 
            2
        ]
    }
]
</snippet></ROW><ROW><id>12944035</id><snippet>json.load</snippet></ROW><ROW><id>12944035</id><snippet>with open('filename.txt', 'r') as handle:
    parsed = json.load(handle)
</snippet></ROW><ROW><id>12944142</id><snippet>/proc/&lt;pid&gt;/fd</snippet></ROW><ROW><id>12944142</id><snippet>fsync(8)</snippet></ROW><ROW><id>12944142</id><snippet>fread</snippet></ROW><ROW><id>12944142</id><snippet>fwrite</snippet></ROW><ROW><id>12944142</id><snippet>dup</snippet></ROW><ROW><id>12944142</id><snippet>close</snippet></ROW><ROW><id>12944142</id><snippet>fsync</snippet></ROW><ROW><id>12944142</id><snippet>sync</snippet></ROW><ROW><id>12944142</id><snippet>fsync</snippet></ROW><ROW><id>12944156</id><snippet>virtualenv</snippet></ROW><ROW><id>12944156</id><snippet>requirements.txt</snippet></ROW><ROW><id>12944156</id><snippet>virtualenv</snippet></ROW><ROW><id>12944156</id><snippet>virtualenv</snippet></ROW><ROW><id>12944156</id><snippet>python setup.py develop</snippet></ROW><ROW><id>12944156</id><snippet>virtualenv</snippet></ROW><ROW><id>12944246</id><snippet>for n in range(3,int(a ** 0.5) + 1): 
    if a % n == 0: return False
    if a % n != 0: return True  # This if condition is not needed
</snippet></ROW><ROW><id>12944246</id><snippet>n</snippet></ROW><ROW><id>12944246</id><snippet>n</snippet></ROW><ROW><id>12944246</id><snippet>return True</snippet></ROW><ROW><id>12944246</id><snippet>prime()</snippet></ROW><ROW><id>12944246</id><snippet>def prime(a):
    if a &lt; 2: return False
    if a % 2 == 0: return False
    if a == 3 or a == 5 or a == 7: return True
    for n in range(3,int(a ** 0.5) + 1): 
        if a % n == 0: return False

    return True
</snippet></ROW><ROW><id>12944269</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>12944269</id><snippet>display.update(rectangle=endRect)</snippet></ROW><ROW><id>12944269</id><snippet>screen.blit()</snippet></ROW><ROW><id>12944528</id><snippet>print</snippet></ROW><ROW><id>12944528</id><snippet>grep</snippet></ROW><ROW><id>12944528</id><snippet>print</snippet></ROW><ROW><id>12944528</id><snippet>addons</snippet></ROW><ROW><id>12944528</id><snippet>#</snippet></ROW><ROW><id>12944528</id><snippet>print</snippet></ROW><ROW><id>12944601</id><snippet>brew install freetype
brew install libpng
brew link freetype
pip install git+https://github.com/matplotlib/matplotlib.git#egg=matplotlib-dev
</snippet></ROW><ROW><id>12944610</id><snippet>$ mkdir env
$ mkdir pyenv
$ mkdir dep
</snippet></ROW><ROW><id>12944610</id><snippet>$ cd dep
$ wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
$ wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py
</snippet></ROW><ROW><id>12944610</id><snippet>pyenv</snippet></ROW><ROW><id>12944610</id><snippet>make clean</snippet></ROW><ROW><id>12944610</id><snippet>$ tar -xzvf Python-2.7.3.tgz
$ cd Python-2.7.3
$ make clean
$ ./configure --prefix=/path/to/pyenv
$ make &amp;&amp; make install
$ cd ../../
$ ls
dep    env    pyenv
</snippet></ROW><ROW><id>12944610</id><snippet>$ dep/virtualenv.py --python=/path/to/pyenv/bin/python --verbose env
</snippet></ROW><ROW><id>12944610</id><snippet>env/include/</snippet></ROW><ROW><id>12944610</id><snippet>$ ls -l env/include/
$ cd !$
$ rm python2.7
$ ln -s ../../pyenv/include/python2.7 python2.7
$ cd ../../
</snippet></ROW><ROW><id>12944610</id><snippet>$ ls -l env/lib/python2.7/
$ cd !$
$ ln -sf ../../../pyenv/lib/python2.7/UserDict.py UserDict.py
[...repeat until all symbolic links are relative...]
$ cd ../../../
</snippet></ROW><ROW><id>12944610</id><snippet>$ python --version
Python 2.7.1
$ source env/bin/activate
(env)
$ python --version
Python 2.7.3
</snippet></ROW><ROW><id>12944677</id><snippet>import wx

class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Programmatic binding of accelerators in wxPython", size=(450,150))

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        bindings = [
                  (wx.ACCEL_CTRL,  wx.WXK_UP, 'up'),
                  (wx.ACCEL_CTRL,  wx.WXK_DOWN, 'down'),
                  (wx.ACCEL_CTRL,  wx.WXK_LEFT, 'left'),
                  (wx.ACCEL_CTRL,  wx.WXK_RIGHT, 'right'),
                  ]


        accelEntries = []

        for binding in bindings:
            eventId = wx.NewId()
            accelEntries.append( (binding[0], binding[1], eventId) )

            self.Bind(wx.EVT_MENU, lambda evt, temp=binding[2]: self.on_move(evt, temp), id=eventId)

        accelTable  = wx.AcceleratorTable(accelEntries)
        self.SetAcceleratorTable(accelTable )
     #----------------------------------------------------------------------

    def on_move(self, Event, direction):
        print "You pressed CTRL+"+direction

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>12944677</id><snippet>import wx

class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial", size=(500,500))

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        bindings = [
                  (wx.ACCEL_CTRL,  wx.WXK_UP, self.on_move_up),
                  (wx.ACCEL_CTRL,  wx.WXK_DOWN, self.on_move_down),
                  (wx.ACCEL_CTRL,  wx.WXK_LEFT, self.on_move_left),
                  (wx.ACCEL_CTRL,  wx.WXK_RIGHT, self.on_move_right),
                  ]


        accelEntries = []

        for binding in bindings:
            eventId = wx.NewId()
            accelEntries.append( (binding[0], binding[1], eventId) )

            self.Bind(wx.EVT_MENU, binding[2], id=eventId)

        accelTable  = wx.AcceleratorTable(accelEntries)
        self.SetAcceleratorTable(accelTable )
     #----------------------------------------------------------------------
    def on_move_up(self, event):
        print "You pressed CTRL+up"
    def on_move_down(self, event):
        print "You pressed CTRL+down"
    def on_move_left(self, event):
        print "You pressed CTRL+left"
    def on_move_right(self, event):
        print "You pressed CTRL+right"

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>12944761</id><snippet>if yon == 0:
    choice = eg.boolbox("Was my guess..." , 'High or Low?' , ('High' , 'Low')
</snippet></ROW><ROW><id>12944761</id><snippet>choice = eg.boolbox("Was my guess..." , 'High or Low?' , ('High' , 'Low'))
</snippet></ROW><ROW><id>12944761</id><snippet>else:</snippet></ROW><ROW><id>12944761</id><snippet>else:
    eg.msgbox("Enter valid input!","Lets start again from the last step")
    continue
</snippet></ROW><ROW><id>12944761</id><snippet>if</snippet></ROW><ROW><id>12944761</id><snippet>    if yon == 0:
        choice = eg.boolbox("Was my guess..." , 'High or Low?' , ('High' , 'Low')
    if choice == 0:
        minimum = middle
        middle = int(round(float(maximum+minimum)/2))
    elif choice == 1:
        maximum = middle
        middle = int(round(float(maximum+minimum)/2))
    else:
        eg.msgbox"Enter valid input!";"Lets start again from the last step"
        continue
</snippet></ROW><ROW><id>12944761</id><snippet>if-elif-else</snippet></ROW><ROW><id>12944761</id><snippet>if yon == 0:
    choice = eg.boolbox("Was my guess..." , 'High or Low?' , ('High' , 'Low')
    if choice == 0:
        minimum = middle
        middle = int(round(float(maximum+minimum)/2))
    elif choice == 1:
        maximum = middle
        middle = int(round(float(maximum+minimum)/2))
    else:
        eg.msgbox"Enter valid input!";"Lets start again from the last step"
        continue
</snippet></ROW><ROW><id>12944792</id><snippet>x = [8., 9.5, 7.8, 4.2, -7.7, -5.4, 3.2]
y = [8.9, 2.0, 4.8, -4.2, 2.7, -3.4, -5.9]

def mean(x):
    return sum(x) / len(x)

def cov(x, y):
    x_mean = mean(x)
    y_mean = mean(y)
    data = [(x[i] - x_mean) * (y[i] - y_mean)
            for i in range(len(x))]
    return sum(data) / (len(data) - 1)

print cov(x, y)
</snippet></ROW><ROW><id>12944904</id><snippet>itertools.cycle</snippet></ROW><ROW><id>12944904</id><snippet>import itertools

a = [1, 2, 3]

for element in itertools.cycle(a):
    print element

# -&gt; 1 2 3 1 2 3 1 2 3 1 2 3 ...
</snippet></ROW><ROW><id>12944939</id><snippet>::=</snippet></ROW><ROW><id>12944939</id><snippet>assert_stmt</snippet></ROW><ROW><id>12944939</id><snippet>assert_stmt ::= "assert" expression ["," expression]
</snippet></ROW><ROW><id>12944939</id><snippet>assert (2 + 2 == 4), "The world is ending!"
</snippet></ROW><ROW><id>12944939</id><snippet>assert</snippet></ROW><ROW><id>12944939</id><snippet>expression</snippet></ROW><ROW><id>12944939</id><snippet>[]</snippet></ROW><ROW><id>12944939</id><snippet>expression ["," expression]</snippet></ROW><ROW><id>12944997</id><snippet>&gt;&gt;&gt; a1 = a
&gt;&gt;&gt; a = u"maçã"
&gt;&gt;&gt; for norm in ('NFC', 'NFKC', 'NFD','NFKD'):
...    b = unicodedata.normalize(norm, a)
...    print b, len(b)
... 
maçã 4
maçã 4
maçã 6
maçã 6
</snippet></ROW><ROW><id>12945130</id><snippet>&gt;&gt;&gt; today = datetime.datetime.now()
&gt;&gt;&gt; next_year = datetime.datetime(year=today.year+1, month=1, day=1)
&gt;&gt;&gt; next_year
datetime.datetime(2013, 1, 1, 0, 0)
</snippet></ROW><ROW><id>12945218</id><snippet>import urllib
from bs4 import BeautifulSoup as Soup

base_url = "http://www.galactanet.com/oneoff/theegg_mod.html"

url = (base_url)
content = urllib.urlopen(url)
soup = Soup(content)
# print soup.original_encoding
theegg_text = soup.get_text().encode("windows-1252")

f = open("somefile.txt", "w")
f.write(theegg_text);
f.close()
</snippet></ROW><ROW><id>12945293</id><snippet>Cookie</snippet></ROW><ROW><id>12945293</id><snippet>Set-Cookie</snippet></ROW><ROW><id>12945293</id><snippet>cookies = page.headers.get('set-cookie')</snippet></ROW><ROW><id>12945293</id><snippet>page = urlfetch.Fetch(
  url = url,
  headers = headers,
  follow_redirects = False)
cookies = []
while page.status_code == 302:
  url = page.headers.get('location')
  if page.headers.get('set-cookie'):
    cookies.extend(page.header_msg.getheaders('set-cookie'))
  headers['cookie'] = '; '.join(cookies)
  page = urlfetch.Fetch(
    url = url,
    method = urlfetch.GET,
    headers = headers,
    follow_redirects = False)
if page.status_code == 200 and page.content:
  self.response.out.write(page.content)
</snippet></ROW><ROW><id>12945293</id><snippet>Location</snippet></ROW><ROW><id>12945293</id><snippet>url</snippet></ROW><ROW><id>12945293</id><snippet>Set-Cookie</snippet></ROW><ROW><id>12945293</id><snippet>Set-Cookie</snippet></ROW><ROW><id>12945421</id><snippet>self.world.attachRigidBody(np.node())
model = loader.loadModel('models/box.egg')
model.setPos(-0.5,-0.5,-0.5)                   # &lt;- Add this line
model.reparentTo(np)
</snippet></ROW><ROW><id>12945421</id><snippet>model.setTexture(tex, 1)
</snippet></ROW><ROW><id>12945421</id><snippet>model.setTexture(tex)
</snippet></ROW><ROW><id>12945477</id><snippet>import BaseHTTPServer

class MyHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
        def do_GET(self):
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write("&lt;html&gt;&lt;body&gt;You accessed path: {}&lt;/body&gt;&lt;/html&gt;".format(self.path))

BaseHTTPServer.HTTPServer(('', 80), MyHTTPRequestHandler).serve_forever()
</snippet></ROW><ROW><id>12945477</id><snippet>MyHTTPRequestHandler</snippet></ROW><ROW><id>12945477</id><snippet>self.path</snippet></ROW><ROW><id>12945477</id><snippet>subprocess</snippet></ROW><ROW><id>12945477</id><snippet>subprocess.Popen(["echo", "test"]).communicate()</snippet></ROW><ROW><id>12945586</id><snippet>Tk</snippet></ROW><ROW><id>12945586</id><snippet>StringVar</snippet></ROW><ROW><id>12945586</id><snippet>donut = Tk()</snippet></ROW><ROW><id>12945613</id><snippet>if n== 1 or 2 or 3 or 5 or 7:
</snippet></ROW><ROW><id>12945613</id><snippet>if n == 1 or n == 2 or n == 3 or n == 5 or n == 7:
</snippet></ROW><ROW><id>12945613</id><snippet>if n in (1, 2, 3, 5, 7):
</snippet></ROW><ROW><id>12945783</id><snippet>&gt;&gt;&gt; print now_utc - past
0:01:59.999976
</snippet></ROW><ROW><id>12945783</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>12946015</id><snippet>[x[0] for x in t if x[0] &lt; EPS]
</snippet></ROW><ROW><id>12946024</id><snippet>import cv2
import numpy as np

# create video capture
cap = cv2.VideoCapture(0)

while(1):

    # read the frames
    _,frame = cap.read()

    # smooth it
    frame = cv2.blur(frame,(3,3))

    # convert to hsv and find range of colors
    hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    thresh = cv2.inRange(hsv,np.array((0, 80, 80)), np.array((20, 255, 255)))
    thresh2 = thresh.copy()

    # find contours in the threshold image
    contours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)

    # finding contour with maximum area and store it as best_cnt
    max_area = 0
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area &gt; max_area:
            max_area = area
            best_cnt = cnt

    # finding centroids of best_cnt and draw a circle there
    M = cv2.moments(best_cnt)
    cx,cy = int(M['m10']/M['m00']), int(M['m01']/M['m00'])
    cv2.circle(frame,(cx,cy),5,255,-1)

    # Show it, if key pressed is 'Esc', exit the loop
    cv2.imshow('frame',frame)
    cv2.imshow('thresh',thresh2)
    if cv2.waitKey(33)== 27:
        break

# Clean up everything before leaving
cv2.destroyAllWindows()
cap.release()
</snippet></ROW><ROW><id>12946252</id><snippet>&gt;&gt;&gt; 0b01
1
&gt;&gt;&gt; 0b10
2
&gt;&gt;&gt; 0b11
3
&gt;&gt;&gt; 0b01 + 0b10
3
</snippet></ROW><ROW><id>12946391</id><snippet>&gt;&gt;&gt; nums = [[155, 155, 155],
...         [222, 222, 222]]

&gt;&gt;&gt; for pixels in nums:
...    print([255 - rgb for rgb in pixels])

&gt;&gt;&gt; [100, 100, 100]
&gt;&gt;&gt; [33, 33, 33]
</snippet></ROW><ROW><id>12946391</id><snippet>print</snippet></ROW><ROW><id>12946391</id><snippet>f = open('path/to/file', 'w')
for pixels in nums:
    f.write(', '.join(str(255 - rgb) for rgb in pixels) +'\n')
f.close()
</snippet></ROW><ROW><id>12946399</id><snippet>from urllib import urlencode

base_url = "http://en.wikipedia.org/w/api.php?"

arguments = dict(action="query",
                 meta="globaluserinfo",
                 guiuser="$cammer",
                 guiprop="groups|merged|unattached",
                 format="json")
url = base_url + urlencode(arguments)
</snippet></ROW><ROW><id>12946399</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.quote("$cammer")
'%24cammer'
</snippet></ROW><ROW><id>12946399</id><snippet>r['guiprop'] = urllib.quote(u'groups|merged|unattached')
r['guiuser'] = urllib.quote(u'$cammer')
</snippet></ROW><ROW><id>12946537</id><snippet>#!/bin/bash
# download latest virtualenv.py
wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py

# create a bootstrap virtual environment in ./venv directory
python3 virtualenv.py venv
</snippet></ROW><ROW><id>12946537</id><snippet>$ . ./venv/bin/activate
</snippet></ROW><ROW><id>12946537</id><snippet>pip</snippet></ROW><ROW><id>12946537</id><snippet>easy_install</snippet></ROW><ROW><id>12946537</id><snippet>virtualenv-3.x</snippet></ROW><ROW><id>12946537</id><snippet>pip install</snippet></ROW><ROW><id>12946537</id><snippet>workon/mkvirtualenv/rmvirtualenv</snippet></ROW><ROW><id>12946603</id><snippet>/api/v1/wine/1/</snippet></ROW><ROW><id>12946603</id><snippet>/api/v1/wine/</snippet></ROW><ROW><id>12946709</id><snippet>import Sampcov as samp
samp.x
samp.y
samp.mean(samp.x)
samp.cov(samp.x,samp.y)
</snippet></ROW><ROW><id>12946720</id><snippet>n</snippet></ROW><ROW><id>12946720</id><snippet>count1</snippet></ROW><ROW><id>12946720</id><snippet>count1</snippet></ROW><ROW><id>12946720</id><snippet>n</snippet></ROW><ROW><id>12946969</id><snippet>listb_iter = iter(ListB)
item_b = next(listb_iter) #we're assuming that ListB as at least one item.
for item_a in ListA:
    if ...: #condition to move on to the next item in ListB
        try:
            item_b = next(listb_iter)
        except StopIteration:
            #went through all of ListB

    #other logic
</snippet></ROW><ROW><id>12947246</id><snippet>subprocess</snippet></ROW><ROW><id>12947246</id><snippet>close_fds</snippet></ROW><ROW><id>12947246</id><snippet>Popen</snippet></ROW><ROW><id>12947246</id><snippet>stdin</snippet></ROW><ROW><id>12947246</id><snippet>stdout</snippet></ROW><ROW><id>12947246</id><snippet>stderr</snippet></ROW><ROW><id>12947617</id><snippet>stock</snippet></ROW><ROW><id>12947617</id><snippet>    url="http://finance.yahoo.com/d/quotes.csv?s="+stock+"&amp;f=snl1"
</snippet></ROW><ROW><id>12947617</id><snippet>/stock?s=whatever
</snippet></ROW><ROW><id>12947617</id><snippet>request.form</snippet></ROW><ROW><id>12947617</id><snippet>stock</snippet></ROW><ROW><id>12947617</id><snippet>home_search</snippet></ROW><ROW><id>12947617</id><snippet>home_search</snippet></ROW><ROW><id>12947617</id><snippet>/stock</snippet></ROW><ROW><id>12947652</id><snippet>GameScreen.initialize_game()</snippet></ROW><ROW><id>12947652</id><snippet>hero=Rogue()</snippet></ROW><ROW><id>12947652</id><snippet>Rogue</snippet></ROW><ROW><id>12947652</id><snippet>rogue</snippet></ROW><ROW><id>12947652</id><snippet>__init__</snippet></ROW><ROW><id>12947652</id><snippet>Rogue</snippet></ROW><ROW><id>12947652</id><snippet>rogue</snippet></ROW><ROW><id>12947652</id><snippet>hero=Mage</snippet></ROW><ROW><id>12947652</id><snippet>hero=Barbarian</snippet></ROW><ROW><id>12947652</id><snippet>hero=Rogue()</snippet></ROW><ROW><id>12947652</id><snippet>hero=Rogue("MyRogueName")</snippet></ROW><ROW><id>12947652</id><snippet>initialize_game</snippet></ROW><ROW><id>12947652</id><snippet>__init__</snippet></ROW><ROW><id>12947652</id><snippet>self</snippet></ROW><ROW><id>12947652</id><snippet>&gt;&gt;&gt; class MyClass:
...     def __init__(self):
...             self.foo = 'foo'
... 
&gt;&gt;&gt; myObj = MyClass()
</snippet></ROW><ROW><id>12947652</id><snippet>myObj</snippet></ROW><ROW><id>12947652</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>12947652</id><snippet>self</snippet></ROW><ROW><id>12947652</id><snippet>self</snippet></ROW><ROW><id>12948430</id><snippet>related_name</snippet></ROW><ROW><id>12948430</id><snippet>user = request.user.twitteruser
</snippet></ROW><ROW><id>12948519</id><snippet>list()</snippet></ROW><ROW><id>12948519</id><snippet>list(bin(10)[2:])
</snippet></ROW><ROW><id>12948600</id><snippet>sqlite3</snippet></ROW><ROW><id>12948600</id><snippet>% sqlite3 &lt; enwiki-latest-categorylinks.sql
Error: near line 1: near "unsigned": syntax error
</snippet></ROW><ROW><id>12948780</id><snippet>__iter__</snippet></ROW><ROW><id>12948780</id><snippet>iter(self.env)</snippet></ROW><ROW><id>12948780</id><snippet>__iter__</snippet></ROW><ROW><id>12948780</id><snippet>self</snippet></ROW><ROW><id>12948780</id><snippet>def iter_column_row():
    for i in range(self.getColumnCount()):
        for j in range(self.getRowCount()):
            yield self.env[j][i]
</snippet></ROW><ROW><id>12948781</id><snippet>s2</snippet></ROW><ROW><id>12948781</id><snippet>s1.find(s2, s1.find(s2) + 1)
</snippet></ROW><ROW><id>12948922</id><snippet>In [2]: df = pd.DataFrame(np.random.randn(10, 2), columns=['A', 'B'])

In [3]: df
Out[3]:
          A         B
0 -0.938196  2.220319
1 -0.022503  0.564602
2  0.033094 -0.717969
3  2.466486  1.229651
4 -0.641596 -1.016921
5  0.094125  1.531526
6  0.579631  1.398635
7 -0.854799 -0.930904
8 -1.177894 -1.501657
9  0.341655 -0.917243

In [4]: df.sort(columns='A', inplace=True)
Out[4]:
          A         B
8 -1.177894 -1.501657
0 -0.938196  2.220319
7 -0.854799 -0.930904
4 -0.641596 -1.016921
1 -0.022503  0.564602
2  0.033094 -0.717969
5  0.094125  1.531526
9  0.341655 -0.917243
6  0.579631  1.398635
3  2.466486  1.229651

In [5]: df['A'].plot(use_index=False)
Out[5]: &lt;matplotlib.axes.AxesSubplot at 0xb56ac6c&gt;
</snippet></ROW><ROW><id>12949068</id><snippet>type(x)</snippet></ROW><ROW><id>12949068</id><snippet>type</snippet></ROW><ROW><id>12949068</id><snippet>type(x) == datetime.timedelta

# or, the better Python practice

isinstance(x, datetime.timedelta)
</snippet></ROW><ROW><id>12949346</id><snippet>$def</snippet></ROW><ROW><id>12949346</id><snippet>$def with (name)
&lt;em&gt;Hello&lt;/em&gt;, world!
</snippet></ROW><ROW><id>12949553</id><snippet>yerr= numpy.vstack([[0]*len(std), std])</snippet></ROW><ROW><id>12949553</id><snippet>for j in range(set_count):
    tmp_accum = numpy.zeros(len(props[0]))
    for k in range(len(props)):
        ax1.bar(ind + j*b_width, props[k][set_label==j], width=b_width, color=color_sets[j][k], bottom=tmp_accum[set_label==j],label=labels[k])
        ax1.errorbar(ind + j*b_width +(1+k)*0.01, props[k][set_label==j]+tmp_accum[set_label==j],yerr= numpy.vstack([[0]*1, std_devs[k][j]]), ecolor="black",elinewidth =3)
        tmp_accum += props[k]
</snippet></ROW><ROW><id>12949837</id><snippet>import re

i = open("in.txt")
o = open("out.txt", "w")

for line in i:
    if re.search("ENTRY|VERSION", line):
       o.write(line)

o.close()
i.close()
</snippet></ROW><ROW><id>12949837</id><snippet>import re

with open("in.txt") as i, open("out.txt", "w") as o:
    for line in i:
        if re.search("ENTRY|VERSION", line):
           o.write(line)
</snippet></ROW><ROW><id>12949837</id><snippet>sed</snippet></ROW><ROW><id>12949837</id><snippet>$ sed -e '/ENTRY/d' -e '/VERSION/d' &lt; in.txt &gt; out.txt
</snippet></ROW><ROW><id>12949966</id><snippet>import sys 
from PySide.QtCore import QUrl, QSize
from PySide.QtGui import QApplication, QMainWindow, QWidget
from PySide.QtWebKit import QWebView


class Browser(QMainWindow):

    def __init__(self):
        QMainWindow.__init__(self)
        self.resize(300, 300)
        self.web_view = QWebView()
        self.setCentralWidget(self.web_view)

        self.web_view.loadFinished.connect(self._load_finished)

    def _load_finished(self):
        frame = self.web_view.page().mainFrame()
        self.web_view.page().setViewportSize(frame.contentsSize())
        self.resize(frame.contentsSize())
        html_data = frame.toHtml()


if __name__ == '__main__': 
    app = QApplication(sys.argv) 
    browser = Browser() 
    r = QUrl("http://www.yahoo.com")
    browser.web_view.load(r)
    browser.show()
    app.exec_()
</snippet></ROW><ROW><id>12950071</id><snippet>{% show_more %}
</snippet></ROW><ROW><id>12950071</id><snippet>&lt;script type="text/javascript" charset="utf-8"&gt;
    var endless_on_scroll_margin = 20;
&lt;/script&gt;
</snippet></ROW><ROW><id>12950269</id><snippet>#!/usr/bin/python
import os
PROCNAME = "file1.py"
pids = []
for proc_data in os.popen('/bin/ps -eo pid,comm,args'):
    bits = proc_data.strip().split()
    (pid, comm ) = bits[0:2]
    args = " ".join( bits[3:] )
    if args == PROCNAME:
        pids.append( pid )

print pids
</snippet></ROW><ROW><id>12950269</id><snippet>    pid = bits[0]
    comm_and_args = " ".join( bits[1:] )
</snippet></ROW><ROW><id>12950683</id><snippet>x</snippet></ROW><ROW><id>12950683</id><snippet>x+5</snippet></ROW><ROW><id>12950683</id><snippet>&gt;&gt;&gt; def foo(x, y)
...   return x + y
...
&gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; map(lambda x: foo(x, 5), l)
[6, 7, 8, 9]
</snippet></ROW><ROW><id>12951168</id><snippet>from optparse import OptionParser
[...]
parser = OptionParser()
parser.add_option("-f", "--file", dest="filename",
                  help="write report to FILE", metavar="FILE")
parser.add_option("-q", "--quiet",
                  action="store_false", dest="verbose", default=True,
                  help="don't print status messages to stdout")

(options, args) = parser.parse_args()
</snippet></ROW><ROW><id>12951168</id><snippet>usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser(usage=usage)
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", default=True,
                  help="make lots of noise [default]")
parser.add_option("-q", "--quiet",
                  action="store_false", dest="verbose",
                  help="be vewwy quiet (I'm hunting wabbits)")
parser.add_option("-f", "--filename",
                  metavar="FILE", help="write output to FILE")
parser.add_option("-m", "--mode",
                  default="intermediate",
                  help="interaction mode: novice, intermediate, "
                       "or expert [default: %default]")
</snippet></ROW><ROW><id>12951321</id><snippet>argument</snippet></ROW><ROW><id>12951321</id><snippet>a = 5</snippet></ROW><ROW><id>12951321</id><snippet>func(positional_args, keyword_args,
                     *tuple_grp_nonkw_args, **dict_grp_kw_args)
</snippet></ROW><ROW><id>12951321</id><snippet>non-keyword</snippet></ROW><ROW><id>12951321</id><snippet>tuple</snippet></ROW><ROW><id>12951321</id><snippet>w.record(*yourvalues)
</snippet></ROW><ROW><id>12951321</id><snippet>keyword</snippet></ROW><ROW><id>12951321</id><snippet>dictionary</snippet></ROW><ROW><id>12951321</id><snippet>**kwarg</snippet></ROW><ROW><id>12951321</id><snippet>**kwarg</snippet></ROW><ROW><id>12951321</id><snippet>// nkwarg takes a list
// kwarg takes a dictionary
def foo(arg, defaultarg = 5, *nkwarg, **kwarg):
    print arg
    print defaultarg
    print nkwarg
    print kwarg


foo("hello", ["how", "are", "you"], a = 3, b = 4)
</snippet></ROW><ROW><id>12951321</id><snippet>hello
5
(['how', 'are', 'you'],)
{'a': 3, 'b': 4}
</snippet></ROW><ROW><id>12951465</id><snippet>indent</snippet></ROW><ROW><id>12951465</id><snippet>dumps()</snippet></ROW><ROW><id>12951465</id><snippet>print json.dumps(..., indent=4)
</snippet></ROW><ROW><id>12951465</id><snippet>out = "[\n\t" + ",\n\t".join([json.dumps(row) for row in reader]) + "\n]"
</snippet></ROW><ROW><id>12951465</id><snippet>[
    {"id": 1, "name": "foo", ...},
    {"id": 2, "name": "bar", ...},
    ...
]
</snippet></ROW><ROW><id>12951478</id><snippet>split()</snippet></ROW><ROW><id>12951478</id><snippet>with open('log.txt', 'rb') as f:
    mylist = map(str.strip, f)
</snippet></ROW><ROW><id>12951478</id><snippet>map()</snippet></ROW><ROW><id>12951478</id><snippet>list()</snippet></ROW><ROW><id>12951557</id><snippet>import os
import zipfile
import StringIO

from django.http import HttpResponse


def getfiles(request):
    # Files (local path) to put in the .zip
    # FIXME: Change this (get paths from DB etc)
    filenames = ["/tmp/file1.txt", "/tmp/file2.txt"]

    # Folder name in ZIP archive which contains the above files
    # E.g [thearchive.zip]/somefiles/file2.txt
    # FIXME: Set this to something better
    zip_subdir = "somefiles"
    zip_filename = "%s.zip" % zip_subdir

    # Open StringIO to grab in-memory ZIP contents
    s = StringIO.StringIO()

    # The zip compressor
    zf = zipfile.ZipFile(s, "w")

    for fpath in filenames:
        # Calculate path for file in zip
        fdir, fname = os.path.split(fpath)
        zip_path = os.path.join(zip_subdir, fname)

        # Add file, at correct path
        zf.write(fpath, zip_path)

    # Must close zip for all contents to be written
    zf.close()

    # Grab ZIP file from in-memory, make response with correct MIME-type
    resp = HttpResponse(s.getvalue(), mimetype = "application/x-zip-compressed")
    # ..and correct content-disposition
    resp['Content-Disposition'] = 'attachment; filename=%s' % zip_filename

    return resp
</snippet></ROW><ROW><id>12951804</id><snippet>sort(1)</snippet></ROW><ROW><id>12951804</id><snippet>sort --field-separator=, --key=2,2 --unique &lt; file
</snippet></ROW><ROW><id>12951804</id><snippet>csv</snippet></ROW><ROW><id>12951804</id><snippet>seenKeys = set()
for row in reader:
    if row[1] in seenKeys: continue

    seenKeys.add( row[1] )
    print ', '.join(row)
</snippet></ROW><ROW><id>12952398</id><snippet>object.__new__</snippet></ROW><ROW><id>12952483</id><snippet>enumerate()</snippet></ROW><ROW><id>12952483</id><snippet>def find_sublists(seq, sublist):
    length = len(sublist)
    for index, value in enumerate(seq):
        if value == sublist[0] and seq[index:index+length] == sublist:
            yield index
</snippet></ROW><ROW><id>12952483</id><snippet>yield</snippet></ROW><ROW><id>12952483</id><snippet>list</snippet></ROW><ROW><id>12952483</id><snippet>&gt;&gt;&gt; list(find_sublists([-1, 1, -1, -1, -1, 1, -1], [1, -1]))
[1, 5]
</snippet></ROW><ROW><id>12952593</id><snippet>patch</snippet></ROW><ROW><id>12952593</id><snippet>patch -p1 &lt; 7621f33286b9.patch
</snippet></ROW><ROW><id>12952770</id><snippet>mod_wsgi</snippet></ROW><ROW><id>12952770</id><snippet>mod_python</snippet></ROW><ROW><id>12952770</id><snippet>mod_wsgi</snippet></ROW><ROW><id>12952949</id><snippet>l10n_multilang</snippet></ROW><ROW><id>12952949</id><snippet>spoken_languages</snippet></ROW><ROW><id>12952949</id><snippet>spoken_languages</snippet></ROW><ROW><id>12952949</id><snippet>code</snippet></ROW><ROW><id>12952949</id><snippet>&lt;field name="spoken_languages"&gt;fr_FR;de_DE&lt;/field&gt;</snippet></ROW><ROW><id>12952949</id><snippet>l10n_xx.pot</snippet></ROW><ROW><id>12952949</id><snippet>l10n_xx/i18n/</snippet></ROW><ROW><id>12952949</id><snippet>l10n_xx.pot</snippet></ROW><ROW><id>12952949</id><snippet>fr.po</snippet></ROW><ROW><id>12953088</id><snippet>pattern</snippet></ROW><ROW><id>12953088</id><snippet>find</snippet></ROW><ROW><id>12953088</id><snippet>if pattern.find(volume_name) != -1:
</snippet></ROW><ROW><id>12953203</id><snippet>from itertools import combinations
list(combinations(el, 2))
# [(20, 17), (20, 33), (20, 3001), (17, 33), (17, 3001), (33, 3001)]
</snippet></ROW><ROW><id>12953203</id><snippet>def combinations(iterable, r):
    # combinations('ABCD', 2) --&gt; AB AC AD BC BD CD
    # combinations(range(4), 3) --&gt; 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r &gt; n:
        return
    indices = range(r)
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
</snippet></ROW><ROW><id>12953279</id><snippet>X_Max = float('-inf')
X_Min = float('+inf')
Y_Max = float('-inf')
Y_Min = float('+inf')

for p in lasfile.File(inFile,None,'r'):
    X_Max = max(X_Max, p.x)
    X_Min = min(X_Min, p.x)
    Y_Max = max(Y_Max, p.y)
    Y_Min = min(Y_Min, p.y)
</snippet></ROW><ROW><id>12953279</id><snippet>File()</snippet></ROW><ROW><id>12953279</id><snippet>p</snippet></ROW><ROW><id>12953279</id><snippet>points = ((p.x,p.y) for p in lasfile.File(inFile,None,'r'))

X_Max = float('-inf')
X_Min = float('+inf')
Y_Max = float('-inf')
Y_Min = float('+inf')

for p in points:
    X_Max = max(X_Max, p.x)
    X_Min = min(X_Min, p.x)
    Y_Max = max(Y_Max, p.y)
    Y_Min = min(Y_Min, p.y)
</snippet></ROW><ROW><id>12953279</id><snippet>lasfile.File()</snippet></ROW><ROW><id>12953509</id><snippet>for s in sat:
    if(s[4]&gt;0):
        ax.plot(s[2], s[1],color='green', marker='s', markersize=5)
    else:
        ax.plot(s[2], s[1],color='gray', marker='s', markersize=5)
</snippet></ROW><ROW><id>12953509</id><snippet>for (PRN, E, Az, Ss, Used) in sat:
    if(Used&gt;0):
        ax.plot(Ss, Az,color='green', marker='s', markersize=5)
    else:
        ax.plot(Ss, Az,color='gray', marker='s', markersize=5)
</snippet></ROW><ROW><id>12953533</id><snippet>reactor.run</snippet></ROW><ROW><id>12953533</id><snippet>reactor</snippet></ROW><ROW><id>12953787</id><snippet>plt.*</snippet></ROW><ROW><id>12953787</id><snippet>plt.subplot</snippet></ROW><ROW><id>12953787</id><snippet>Axes</snippet></ROW><ROW><id>12953787</id><snippet>def applyPlotStyle():
    plt.xlabel('Size')
    plt.ylabel('Time(s)');
    plt.title('Matrix multiplication')

    plt.xticks(range(100), rotation=30, size='small')
    plt.grid(True)

plt.subplot(211)
applyPlotStyle()
plt.plot(xl, serial_full, 'r--')
plt.plot(xl, acc, 'bs')
plt.plot(xl, cublas, 'g^')

plt.subplot(212)
applyPlotStyle()
plt.yscale('log')
plt.plot(xl, serial_full, 'r--')
plt.plot(xl, acc, 'bs')
plt.plot(xl, cublas, 'g^')
</snippet></ROW><ROW><id>12953787</id><snippet>def applyPlotStyle():
    plt.xlabel('Size')
    plt.ylabel('Time(s)');
    plt.title('Matrix multiplication')

    plt.xticks(range(100), rotation=30, size='small')
    plt.grid(True)

def plotSeries():
    applyPlotStyle()
    plt.plot(xl, serial_full, 'r--')
    plt.plot(xl, acc, 'bs')
    plt.plot(xl, cublas, 'g^')

plt.subplot(211)
plotSeries()

plt.subplot(212)
plt.yscale('log')
plotSeries()
</snippet></ROW><ROW><id>12953787</id><snippet>suptitle</snippet></ROW><ROW><id>12953787</id><snippet>xlabel</snippet></ROW><ROW><id>12953787</id><snippet>def applyPlotStyle():
    plt.ylabel('Time(s)');

    plt.xticks(range(100), rotation=30, size='small')
    plt.grid(True)

def plotSeries():
    applyPlotStyle()
    plt.plot(xl, serial_full, 'r--')
    plt.plot(xl, acc, 'bs')
    plt.plot(xl, cublas, 'g^')

plt.suptitle('Matrix multiplication')
plt.subplot(211)
plotSeries()

plt.subplot(212)
plt.yscale('log')
plt.xlabel('Size')
plotSeries()

plt.show()
</snippet></ROW><ROW><id>12953916</id><snippet>r"\""</snippet></ROW><ROW><id>12953916</id><snippet>'\'</snippet></ROW><ROW><id>12953916</id><snippet>In [9]: a=r'\\'

In [10]: b=r'\\\'
  File "&lt;ipython-input-10-9f86439e68a3&gt;", line 1
    b=r'\\\'
             ^
SyntaxError: EOL while scanning string literal


In [11]: a
Out[11]: '\\\\'
</snippet></ROW><ROW><id>12954318</id><snippet>subprocess.call(['java', '-jar', 'file.jar', '-option', 'valueForThisOption', '-option', 'valueForThisOption', 'pathToFile'])
</snippet></ROW><ROW><id>12954484</id><snippet>class A():
    def __init__(self):
        self.var1 = 12
        self.var2 = C()

    def start(self):
        self.var1=11
        B(self)             # pass this instance into the initialisation of B

class B():
    def __init__(self, a):
        self.a = a          # save reference to the A() instance

    def doSomething(self):
        varXX = self.a.var2 
</snippet></ROW><ROW><id>12954688</id><snippet>os.path.join</snippet></ROW><ROW><id>12954688</id><snippet>new_vol = os.path.join('/','VolumeData', volume_name)
</snippet></ROW><ROW><id>12954688</id><snippet>find</snippet></ROW><ROW><id>12954688</id><snippet>if new_vol in p1:
</snippet></ROW><ROW><id>12955035</id><snippet>pts = np.array(pts)  #Skip if pts is a numpy array already
lp = len(pts)
arr = np.zeros((lp,lp,lp,3))
arr[:,:,:,0] = pts[:,None,None]  #None is the same as np.newaxis
arr[:,:,:,1] = pts[None,:,None]
arr[:,:,:,2] = pts[None,None,:]
</snippet></ROW><ROW><id>12955035</id><snippet>import numpy as np
import timeit

def meth1(pts):
   pts = np.array(pts)  #Skip if pts is a numpy array already
   lp = len(pts)
   arr = np.zeros((lp,lp,lp,3))
   arr[:,:,:,0] = pts[:,None,None]  #None is the same as np.newaxis
   arr[:,:,:,1] = pts[None,:,None]
   arr[:,:,:,2] = pts[None,None,:]
   return arr

def meth2(pts):
   lp = len(pts)
   N = lp
   arr = np.zeros((lp,lp,lp,3))
   for i in xrange(0, N):
      for j in xrange(0, N):
         for k in xrange(0, N):
            arr[i,j,k,0] = pts[i]
            arr[i,j,k,1] = pts[j]
            arr[i,j,k,2] = pts[k]

   return arr

pts = range(10)
a1 = meth1(pts)
a2 = meth2(pts)

print np.all(a1 == a2)

NREPEAT = 10000
print timeit.timeit('meth1(pts)','from __main__ import meth1,pts',number=NREPEAT)
print timeit.timeit('meth2(pts)','from __main__ import meth2,pts',number=NREPEAT)
</snippet></ROW><ROW><id>12955035</id><snippet>True
0.873255968094   #my way
11.4249279499    #original
</snippet></ROW><ROW><id>12955663</id><snippet>userInput = ''
while len(userInput) != 1:
    userInput = raw_input(':')
guessInLower = userInput.lower()
</snippet></ROW><ROW><id>12955663</id><snippet>while True:
    userInput = raw_input(':')
    if len(userInput) == 1:
        break
    print 'Please enter only one character'
guessInLower = userInput.lower()
</snippet></ROW><ROW><id>12955663</id><snippet>import string

while True:
    userInput = raw_input(':')
    if len(userInput) == 1:
        if userInput in string.letters:
            break
        print 'Please enter only letters'
    else:
        print 'Please enter only one character'
guessInLower = userInput.lower()
</snippet></ROW><ROW><id>12956036</id><snippet>typedef double (*function_ptr)(double, double);

double add_together(double a, double b) {
    return a + b;
}

class Function {
public:
    Function(int ni, function_ptr act) {
        num_inputs = ni;
        action = act;
    }
protected:
    int num_inputs;
    function_ptr action;
};

Function f(2,add_together);
</snippet></ROW><ROW><id>12956036</id><snippet>num_inputs</snippet></ROW><ROW><id>12956036</id><snippet>action</snippet></ROW><ROW><id>12956471</id><snippet>FLAGS = gflags.FLAGS</snippet></ROW><ROW><id>12956471</id><snippet>FLAGS</snippet></ROW><ROW><id>12956471</id><snippet>argv</snippet></ROW><ROW><id>12956471</id><snippet>FLAGS</snippet></ROW><ROW><id>12956471</id><snippet># From samples/analytics/sample_utils.py in the google-api-python-client source

def process_flags(argv):
  """Uses the command-line flags to set the logging level.

  Args:
    argv: List of command line arguments passed to the python script.
  """

  # Let the gflags module process the command-line arguments.
  try:
    argv = FLAGS(argv)
  except gflags.FlagsError, e:
    print '%s\nUsage: %s ARGS\n%s' % (e, argv[0], FLAGS)
    sys.exit(1)

  # Set the logging according to the command-line flag.
  logging.getLogger().setLevel(getattr(logging, FLAGS.logging_level))
</snippet></ROW><ROW><id>12956860</id><snippet>"hunger"</snippet></ROW><ROW><id>12956860</id><snippet>KeyError</snippet></ROW><ROW><id>12956860</id><snippet>make_happiness_table</snippet></ROW><ROW><id>12956860</id><snippet>{}</snippet></ROW><ROW><id>12956860</id><snippet>def make_happiness_table(filename):
    with open(filename) as f:
         d = dict( line.split(',') for line in f )
         #Alternative if you find it more easy to understand
         #d = {}
         #for line in f:
         #    key,value = line.split(',')
         #    d[key] = value
    return d
</snippet></ROW><ROW><id>12957363</id><snippet>def convert_bool(col):
    if str(col).title() ==  "True": #check for nan
        return "YES"
    elif str(col).title() == "False":
        return "NO"
    else:
        return col
pandas.read_csv(file_in, converters={"C3": lambda x:convert_bool(x)})
</snippet></ROW><ROW><id>12957478</id><snippet>In [50]: dict1
Out[50]: {1: True, 2: False}

In [51]: dict2
Out[51]: {1: False, 2: True}
</snippet></ROW><ROW><id>12957478</id><snippet>In [43]: a = '\n'.join(['%s:%s' % (key, value) for (key, value) in sorted(dict1.items())])
In [44]: b = '\n'.join(['%s:%s' % (key, value) for (key, value) in sorted(dict2.items())])
In [45]: print a
1:True
2:False
In [46]: print b
1:False
2:True
In [47]: for diffs in difflib.unified_diff(a.splitlines(), b.splitlines(), fromfile='dict1', tofile='dict2'):
    print diffs
</snippet></ROW><ROW><id>12957478</id><snippet>--- dict1

+++ dict2

@@ -1,2 +1,2 @@

-1:True
-2:False
+1:False
+2:True
</snippet></ROW><ROW><id>12957799</id><snippet>with</snippet></ROW><ROW><id>12957799</id><snippet>with open("file.txt") as f:
    for line in f:
        # do something with line
</snippet></ROW><ROW><id>12957799</id><snippet>with open("file.txt") as f:
    lines = list(f)
# do something with lines
</snippet></ROW><ROW><id>12957885</id><snippet>CV_HOUGH_GRADIENT</snippet></ROW><ROW><id>12957885</id><snippet>cv</snippet></ROW><ROW><id>12957885</id><snippet>import cv2.cv
</snippet></ROW><ROW><id>12957885</id><snippet>circles = cv2.HoughCircles(gray,cv.CV_HOUGH_GRADIENT)
</snippet></ROW><ROW><id>12957963</id><snippet>def make_happiness_table(filename):
   with open(filename) as f:
      d = dict()
      for line in f:
         word,score,std = line.split() #splits on any consecutive runs of whitspace
         d[word]=score,std # May want to make floats:  `d[word] = float(score),float(std)`
   return d
</snippet></ROW><ROW><id>12957963</id><snippet>word</snippet></ROW><ROW><id>12957963</id><snippet>tab</snippet></ROW><ROW><id>12957963</id><snippet>str.rsplit</snippet></ROW><ROW><id>12957963</id><snippet>word,score,std = line.rsplit(None,2)</snippet></ROW><ROW><id>12957963</id><snippet>csv</snippet></ROW><ROW><id>12957963</id><snippet>csv</snippet></ROW><ROW><id>12957963</id><snippet>"this is field 0" "this is field 1" "this is field 2"
</snippet></ROW><ROW><id>12957963</id><snippet>str.split</snippet></ROW><ROW><id>12957963</id><snippet>make_happiness_table</snippet></ROW><ROW><id>12957963</id><snippet>open</snippet></ROW><ROW><id>12957963</id><snippet>close</snippet></ROW><ROW><id>12957963</id><snippet>theFile</snippet></ROW><ROW><id>12957988</id><snippet>brew install portaudio</snippet></ROW><ROW><id>12957988</id><snippet>easy_intall pyaudio</snippet></ROW><ROW><id>12958437</id><snippet>Vec.__init__</snippet></ROW><ROW><id>12958437</id><snippet>__new__</snippet></ROW><ROW><id>12958437</id><snippet>__new__</snippet></ROW><ROW><id>12958437</id><snippet>Vec.__init__</snippet></ROW><ROW><id>12958437</id><snippet>class A(object):
    def __new__(cls, param):
        return B.__new__(cls, param + 100)
class B(A):
    def __new__(cls, param):
        b = object.__new__(B)
        b.__init__(param)
        return b
    def __init__(self, param):
        if hasattr(self, 'param'):
            print "skipping __init__", self
            return
        self.param = param
print A(5).param
</snippet></ROW><ROW><id>12958534</id><snippet>pylab.fill_between()</snippet></ROW><ROW><id>12958534</id><snippet>from matplotlib import pyplot as pl
import numpy as np

x = np.linspace(0, 30, 30)
y = np.sin(x/6*np.pi)
error = np.random.normal(0.1, 0.02, size=y.shape)
y += np.random.normal(0, 0.1, size=y.shape)

pl.plot(x, y, 'k-')
pl.fill_between(x, y-error, y+error)
pl.show()
</snippet></ROW><ROW><id>12958571</id><snippet>class PowerDict(dict):
    # http://stackoverflow.com/a/3405143/190597 (gnibbler)
    def __init__(self, parent = None, key = None):
        self.parent = parent
        self.key = key
    def __missing__(self, key):
        self[key] = PowerDict(self, key)
        return self[key]
    def append(self, item):
        self.parent[self.key] = [item]
    def __setitem__(self, key, val):
        dict.__setitem__(self, key, val)
        try:
            val.parent = self
            val.key = key
        except AttributeError:
            pass

a = PowerDict()
a['1']['2'] = 3
print(a)

b = PowerDict()
b['1']['2'].append(3)
b['1']['2'].append(4)
print(b)

a['1']['2'] = b
a['1']['2'].append(5)
print(a['1']['2'])
</snippet></ROW><ROW><id>12958571</id><snippet>{'1': {'2': 3}}
{'1': {'2': [3, 4]}}
[5]
</snippet></ROW><ROW><id>12958754</id><snippet>app_iter</snippet></ROW><ROW><id>12958754</id><snippet>for line in file</snippet></ROW><ROW><id>12958754</id><snippet>pyramid.response.FileResponse</snippet></ROW><ROW><id>12958754</id><snippet>response = FileResponse('/some/path/to/a/file.txt')
response.headers['Content-Disposition'] = ...
</snippet></ROW><ROW><id>12958754</id><snippet>app_iter</snippet></ROW><ROW><id>12958754</id><snippet>pyramid.response.FileIter</snippet></ROW><ROW><id>12958754</id><snippet>close</snippet></ROW><ROW><id>12958754</id><snippet>response.app_iter = open(...)</snippet></ROW><ROW><id>12958754</id><snippet>FileResponse</snippet></ROW><ROW><id>12958754</id><snippet>FileIter</snippet></ROW><ROW><id>12958754</id><snippet>close</snippet></ROW><ROW><id>12958754</id><snippet>FileResponse</snippet></ROW><ROW><id>12958754</id><snippet>environ['wsgi.file_wrapper']</snippet></ROW><ROW><id>12958754</id><snippet>FileResponse</snippet></ROW><ROW><id>12958754</id><snippet>FileResponse</snippet></ROW><ROW><id>12958754</id><snippet>FileIter</snippet></ROW><ROW><id>12958791</id><snippet>&amp;</snippet></ROW><ROW><id>12958807</id><snippet>\D</snippet></ROW><ROW><id>12958807</id><snippet>'.*\d'
</snippet></ROW><ROW><id>12958839</id><snippet>text</snippet></ROW><ROW><id>12958839</id><snippet>transform=ax.transAxes</snippet></ROW><ROW><id>12958839</id><snippet>data = range(1,10);
fig = figure()
for i in range(6):
    ax = fig.add_subplot(2,3,i)

    ax.text(.5,0.90,'centered title',
        horizontalalignment='center',
        transform=ax.transAxes)

    ax.plot(data)
show()
</snippet></ROW><ROW><id>12959075</id><snippet>norm.fit</snippet></ROW><ROW><id>12959075</id><snippet># Load data
import numpy as np
from pylab import *
data1 = loadtxt("TEMP_2")
a = data1[:,1]

# Fit data into normal distribution
from scipy.stats import norm
mean, stdev = norm.fit(a)

# Plot normal distribution
import matplotlib.mlab as mlab
x = np.linspace(min(a), max(a), 100)
plot(x, mlab.normpdf(x, mean, stdev))
show()
</snippet></ROW><ROW><id>12959075</id><snippet>plot.show()</snippet></ROW><ROW><id>12959075</id><snippet>plt.hist(a, len(data1), normed=True,)
</snippet></ROW><ROW><id>12959096</id><snippet>group()</snippet></ROW><ROW><id>12959096</id><snippet>def dashrepl(matchobj):
    return matchobj.group(0) + ' '
</snippet></ROW><ROW><id>12959096</id><snippet>repl</snippet></ROW><ROW><id>12959096</id><snippet>repl</snippet></ROW><ROW><id>12959096</id><snippet>repl</snippet></ROW><ROW><id>12959375</id><snippet>ModelResource</snippet></ROW><ROW><id>12959375</id><snippet>Resource</snippet></ROW><ROW><id>12959375</id><snippet>ModelResource</snippet></ROW><ROW><id>12959431</id><snippet>lambda</snippet></ROW><ROW><id>12959431</id><snippet>functools.partial</snippet></ROW><ROW><id>12959431</id><snippet>partial</snippet></ROW><ROW><id>12959431</id><snippet>def</snippet></ROW><ROW><id>12959431</id><snippet>map(partial(foo, y=yval), xs)
</snippet></ROW><ROW><id>12959431</id><snippet>lambda</snippet></ROW><ROW><id>12959431</id><snippet>lambda</snippet></ROW><ROW><id>12959431</id><snippet>partial</snippet></ROW><ROW><id>12959431</id><snippet>class foobar:
    def __init__(self, yval):
        self.__yval = yval
    def __call__(self, x):
        return foo(x, self.__yval)
</snippet></ROW><ROW><id>12959490</id><snippet>#build a sample dataframe
a=['P_1']*9
b=[106,106,106,135,135,135,17,17,17]
c = np.random.randint(1,100,9)
df = pandas.DataFrame(data=zip(a,b,c), columns=['sample','detector','cq'])

#add a repetition number column
df['rep_num']=[1,2,3]*( len(df)/3 )

#Convert to a multi-indexed DF
df_multi = df.set_index(['sample','detector','rep_num'])

#--------------Resulting Dataframe---------------------

                             cq
sample detector rep_num    
P_1    106      1        97
                2        83
                3        81
       135      1        46
                2        92
                3        89
       17       1        58
                2        26
                3        75
</snippet></ROW><ROW><id>12959500</id><snippet># query = obj.template_query - dont need this
query = {}
query['name'] = 'sam'
query['age'] = '23'
obj.queries.append(query)

query2 = {} #obj.template_query-dont need this
query2['name'] = 'dj'
query2['age'] = '19'
obj.queries.append(query2)
</snippet></ROW><ROW><id>12959500</id><snippet>&gt;&gt;&gt; q = {'a':1}
&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst.append(q)
&gt;&gt;&gt; q['a']=2
&gt;&gt;&gt; lst
[{'a': 2}]
&gt;&gt;&gt; lst.append(q)
&gt;&gt;&gt; lst
[{'a': 2}, {'a': 2}]
</snippet></ROW><ROW><id>12959500</id><snippet>class MyOwnClass:
  # a template dict
  @property
  def template_query():
      return {'name':'default','age':-1}
</snippet></ROW><ROW><id>12959500</id><snippet>obj.template_query</snippet></ROW><ROW><id>12959554</id><snippet>for tag in soup():
    for attribute in ["class", "id", "name", "style"]:
        del tag[attribute]
</snippet></ROW><ROW><id>12959554</id><snippet>extract()</snippet></ROW><ROW><id>12959554</id><snippet>decompose()</snippet></ROW><ROW><id>12959554</id><snippet>[tag.decompose() for tag in soup("script")]
</snippet></ROW><ROW><id>12959670</id><snippet>PixelArray</snippet></ROW><ROW><id>12959670</id><snippet>PixelArray()</snippet></ROW><ROW><id>12959670</id><snippet>pxarray = pygame.PixelArray(surface)
</snippet></ROW><ROW><id>12959670</id><snippet>PixelArray</snippet></ROW><ROW><id>12959670</id><snippet>Pixels can be manipulated using integer values or color tuples.

  pxarray[x][y] = 0xFF00FF
  pxarray[x][y] = (255, 0, 255)
</snippet></ROW><ROW><id>12959670</id><snippet>While it is possible to assign both, integer color values and RGB(A) color tuples, 
the PixelArray will only use integers for the color representation.
</snippet></ROW><ROW><id>12959670</id><snippet>Surface.map_rgb()</snippet></ROW><ROW><id>12959670</id><snippet>PixelArray</snippet></ROW><ROW><id>12959670</id><snippet>if pxarray[0][0] == surface.map_rgb((0, 0, 255)):
  ...
</snippet></ROW><ROW><id>12959734</id><snippet>Widget</snippet></ROW><ROW><id>12959734</id><snippet>class Widget:
    def __init__(self):
        self.x = 1

    def sleep(self):
        os.sleep(self.x)
</snippet></ROW><ROW><id>12959734</id><snippet>Widget.sleep</snippet></ROW><ROW><id>12959734</id><snippet>self</snippet></ROW><ROW><id>12959870</id><snippet>findall()</snippet></ROW><ROW><id>12959870</id><snippet>search()</snippet></ROW><ROW><id>12959870</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'^(?:(?:(?!exclude).)*(?=test)*)$', "/this/test").group(0)
'/this/test'
</snippet></ROW><ROW><id>12959870</id><snippet>findall()</snippet></ROW><ROW><id>12959870</id><snippet>&gt;&gt;&gt; re.search(r'^(?:(?:(?!exclude).)*(?=test)*)$', "/this/foo").group(0)
'/this/foo'
</snippet></ROW><ROW><id>12959870</id><snippet>*</snippet></ROW><ROW><id>12959870</id><snippet>(?=test)*</snippet></ROW><ROW><id>12959870</id><snippet>*</snippet></ROW><ROW><id>12959870</id><snippet>exclude</snippet></ROW><ROW><id>12959870</id><snippet>test</snippet></ROW><ROW><id>12959870</id><snippet>excludexx</snippet></ROW><ROW><id>12959870</id><snippet>yyytest</snippet></ROW><ROW><id>12959870</id><snippet>r'^(?=.*/test\b)(?!.*/exclude\b)(?:/\w+)+$'
</snippet></ROW><ROW><id>12959870</id><snippet>&gt;&gt;&gt; re.search(r'^(?=.*/test\b)(?!.*/exclude\b)(?:/\w+)+$', '/this/test').group()
'/this/test'
&gt;&gt;&gt; re.search(r'^(?=.*/test\b)(?!.*/exclude\b)(?:/\w+)+$', '/this/foo').group()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'group'
</snippet></ROW><ROW><id>12959870</id><snippet>/test</snippet></ROW><ROW><id>12959870</id><snippet>r'^(?:/(?!test\b|exclude\b)\w+)*/test\b'
</snippet></ROW><ROW><id>12959870</id><snippet>(?:/(?!test\b|exclude\b)\w+)*</snippet></ROW><ROW><id>12959870</id><snippet>/test</snippet></ROW><ROW><id>12959870</id><snippet>/exclude</snippet></ROW><ROW><id>12959995</id><snippet># to hold your variables
holder_dict = {}

# read the file:
with open("/path/to/file.csv", 'r') as csv_read:
    for line in csv_read.readlines():
        word, score, std = line.split('\t')
        if word in holder_dict.keys():
            holder_dict[word][0] += [float(score)]
            holder_dict[word][1] += [std]
        else:
            holder_dict[word] = [[float(score)],[std]]

# get average score
for word in holder_dict.keys():
    average_score = sum(holder_dict[word][0])/len(holder_dict[word][0])
    print "average score for word: %s is %.3f" % (word, average_score)
</snippet></ROW><ROW><id>12959997</id><snippet>_csv</snippet></ROW><ROW><id>12959997</id><snippet>csv</snippet></ROW><ROW><id>12959997</id><snippet>Modules/_csv.c</snippet></ROW><ROW><id>12959997</id><snippet>&gt;&gt;&gt; import _csv
&gt;&gt;&gt; _csv
&lt;module '_csv' from '/usr/lib/python2.6/lib-dynload/_csv.so'&gt;
</snippet></ROW><ROW><id>12960093</id><snippet>keyset = set()
for k in d:
    keyset.update(d[k])

for k in d:
    for kk in keyset:
        d[k].setdefault(kk, 0)
</snippet></ROW><ROW><id>12960129</id><snippet>'\x00r\x00e\x00s'.decode('utf-16-be') # produces u'res'
</snippet></ROW><ROW><id>12960129</id><snippet>$ python -c "print ''.join(['00', '72', '00', '65', '00', '73', '00', '2f', '00', '64', '00', '72',    '00', '61', '00', '77', '00', '61', '00', '62', '00', '6c', '00', '65', '00', '2f', '00', '61', '00', '62', '00', '6f', '00', '75', '00', '74', '00', '2e', '00', '70', '00', '6e', '00', '67', '00', '00', '00', '00']).decode('hex').decode('utf-16-be').rstrip('\0')" | grep about
res/drawable/about.png
</snippet></ROW><ROW><id>12960156</id><snippet>def create_A(arg1=None, arg2=None):
    kargs = {}
    if arg1 is not None: kargs['arg1'] = arg1
    if arg1 is not None: kargs['arg2'] = arg2
    return A(**kargs)
</snippet></ROW><ROW><id>12960156</id><snippet>def create_A(**kargs):
    return A(**kargs)
</snippet></ROW><ROW><id>12960300</id><snippet>import twiggy as twg

twg.quickSetup()

logs = {
    'user1': twg.log.fields(user='user1'),
    'user2': twg.log.fields(user='user2')
}
</snippet></ROW><ROW><id>12960300</id><snippet>import mylog

mylog.logs['user1'].error("Start script")
</snippet></ROW><ROW><id>12960344</id><snippet>import string,cgi,time, urlparse
from os import curdir, sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
#import pri

class MyHandler(BaseHTTPRequestHandler):

    # our servers current set ip address that clients should look for.
    server_address = "0.0.0.0"

    def do_GET(self):
    qs = {}
    path = self.path
    if '?' in path:
        path, tmp = path.split('?', 1)
        qs = urlparse.parse_qs(tmp)
        MyHandler.server_address = qs['up_address']
        print 'new server address: ', MyHandler.server_address


def main():
    try:
        server = HTTPServer(('', 8080), MyHandler)
        print 'started httpserver...'
        server.serve_forever()
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12960354</id><snippet>&lt;Location /admin&gt;
    Order Deny, Allow
    Deny from all
    Allow from 127.0.0.1
&lt;/Location&gt;
</snippet></ROW><ROW><id>12960729</id><snippet>from selenium import webdriver</snippet></ROW><ROW><id>12960729</id><snippet>html= browser.find_element_by_xpath(".//html")</snippet></ROW><ROW><id>12960729</id><snippet>html.text</snippet></ROW><ROW><id>12960729</id><snippet>.text</snippet></ROW><ROW><id>12960729</id><snippet>element</snippet></ROW><ROW><id>12960729</id><snippet>element</snippet></ROW><ROW><id>12960729</id><snippet>html</snippet></ROW><ROW><id>12960839</id><snippet>getter</snippet></ROW><ROW><id>12960839</id><snippet>property</snippet></ROW><ROW><id>12960839</id><snippet>self</snippet></ROW><ROW><id>12960839</id><snippet>attr</snippet></ROW><ROW><id>12960839</id><snippet>lambda self: val</snippet></ROW><ROW><id>12960839</id><snippet>lambda</snippet></ROW><ROW><id>12960839</id><snippet>val</snippet></ROW><ROW><id>12960839</id><snippet>def getter(val):
    return lambda self: val

for attr, val in enums.iteritems():
    setattr(t, attr, property(getter(val), err_func, err_func))
</snippet></ROW><ROW><id>12960897</id><snippet>.text</snippet></ROW><ROW><id>12960897</id><snippet>p = BeautifulSoup(r.content, from_encoding=r.encoding)
</snippet></ROW><ROW><id>12960897</id><snippet>r.content</snippet></ROW><ROW><id>12960897</id><snippet>r.encoding</snippet></ROW><ROW><id>12960962</id><snippet>d = {x: 1 for x in d}
</snippet></ROW><ROW><id>12960962</id><snippet>d</snippet></ROW><ROW><id>12960962</id><snippet>d</snippet></ROW><ROW><id>12960962</id><snippet>1</snippet></ROW><ROW><id>12961055</id><snippet>a =</snippet></ROW><ROW><id>12961055</id><snippet>a</snippet></ROW><ROW><id>12961055</id><snippet>a</snippet></ROW><ROW><id>12961055</id><snippet>nditer</snippet></ROW><ROW><id>12961055</id><snippet>a1</snippet></ROW><ROW><id>12961055</id><snippet>a2</snippet></ROW><ROW><id>12961055</id><snippet>a</snippet></ROW><ROW><id>12961055</id><snippet>a</snippet></ROW><ROW><id>12961055</id><snippet>a[()] =</snippet></ROW><ROW><id>12961055</id><snippet>for a1, a2, a in it:
    a[()] = a1 if -a1 &lt; a2 else a2
</snippet></ROW><ROW><id>12961055</id><snippet>np.where</snippet></ROW><ROW><id>12961055</id><snippet>import numpy as np
arr1 = - np.random.random((2,2))
arr2 = np.random.random((2,2))
arr = np.where(-arr1 &lt; arr2, arr1, arr2)
</snippet></ROW><ROW><id>12961138</id><snippet>install_requires</snippet></ROW><ROW><id>12961138</id><snippet>setup(
    # ... basic data here ...
    install_requires='pytz&gt;=2012f', # distutils ignores it with a warning, pip uses it
    # ... some other data here ...
)
</snippet></ROW><ROW><id>12961297</id><snippet>list_of_files = ...
</snippet></ROW><ROW><id>12961297</id><snippet>def file_open_button(filename):
    b = Button(donut, text = 'open {0}'.format(filename), command = lambda: openfile(filename))
    return b
</snippet></ROW><ROW><id>12961297</id><snippet>for f in list_of_files:
    button = file_open_button(f)
    button.pack()
</snippet></ROW><ROW><id>12961297</id><snippet>lambda</snippet></ROW><ROW><id>12961297</id><snippet>def foo(x):
    return x*x

bar = lambda x: x*x
</snippet></ROW><ROW><id>12961297</id><snippet>foo(x) == bar(x)</snippet></ROW><ROW><id>12961297</id><snippet>True</snippet></ROW><ROW><id>12961528</id><snippet>In [19]: from numpy import ma

In [20]: data
Out[20]: 
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

In [21]: M
Out[21]: 
array([[0, 1, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [1, 1, 0, 1, 1],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0]])

In [22]: mdata = ma.masked_array(data, mask=~M.astype(bool))

In [23]: mdata
Out[23]: 
masked_array(data =
 [[-- 1 -- -- --]
 [5 6 7 8 9]
 [10 11 -- 13 14]
 [-- -- 17 -- --]
 [-- -- -- -- --]],
             mask =
 [[ True False  True  True  True]
 [False False False False False]
 [False False  True False False]
 [ True  True False  True  True]
 [ True  True  True  True  True]],
       fill_value = 999999)


In [24]: mdata.std(axis=0)
Out[24]: 
masked_array(data = [2.5 4.08248290464 5.0 2.5 2.5],
             mask = [False False False False False],
       fill_value = 999999)
</snippet></ROW><ROW><id>12961770</id><snippet>request</snippet></ROW><ROW><id>12961770</id><snippet>self.request</snippet></ROW><ROW><id>12961770</id><snippet>@app.route('/user/&lt;username&gt;')
def show_user_profile(username):
    # show the user profile for that user
    return 'User %s' % username
</snippet></ROW><ROW><id>12961894</id><snippet>print "*HTML* The test file is found at &lt;a href=testfile.txt&gt;this location&lt;/a&gt;"
</snippet></ROW><ROW><id>12961990</id><snippet>parser.has_option</snippet></ROW><ROW><id>12961990</id><snippet>add_option</snippet></ROW><ROW><id>12961990</id><snippet>from optparse import OptionParser

parser = OptionParser()

parser.add_option("-t","--TIMEOUT", dest="timeout", type="int",  help="timeout in seconds")

options, args = parser.parse_args()
if options.timeout is not None and options.timeout &lt;= 0:
    print "Timeout if specified must be greater than zero"
    sys.exit(CLI_ERROR)
</snippet></ROW><ROW><id>12962014</id><snippet>choices</snippet></ROW><ROW><id>12962014</id><snippet>class ChoiceList(object):
    def __iter__(self):
        yield ("home", "Home")
        yield ("opponent", get_weekly_opponent_name())

team = fields.ChoiceField(choices=ChoiceList())
</snippet></ROW><ROW><id>12962035</id><snippet>for i in A.shape[0]:
    for j in A.shape[1]:
        if i == j:
            A[i,j] = -5
</snippet></ROW><ROW><id>12962035</id><snippet>numpy.fill_diagonal(array, value)</snippet></ROW><ROW><id>12962288</id><snippet>note = int(play[0])
if note &gt; 37 and note &lt; 32767:
    winsound.Beep(note, int(duration*2000))
else:
    print("error in input")
</snippet></ROW><ROW><id>12962414</id><snippet>&lt;form action="/result1" method="post"&gt;
</snippet></ROW><ROW><id>12962414</id><snippet>&lt;form action="/result2 method="post"&gt;
    &lt;input id="toCalender " type="submit" name="toCalendar" value="In kalender plaatsen"&gt;
    &lt;br&gt;
    &lt;b&gt;Uitvoer incorrect? Klik dan op onderstaande knop om foutmeldings-email te sturen.&lt;/b&gt;
    &lt;input id="errorMail" type="submit" name="errorMail" value="Uitvoer incorrect!"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>12962501</id><snippet>def block_reverse(lst, blocksize):
    for i in range(blocksize-1, len(lst), blocksize):
        if i&lt;blocksize:
            lst[:blocksize]=lst[blocksize-1::-1]
        else:
            lst[i-blocksize+1:i+1] = lst[i:i-blocksize:-1]

m=[[4,4,4],[5,5,5],[6,6,6],[7,7,7]]
block_reverse(m, 2)
print m
</snippet></ROW><ROW><id>12962635</id><snippet>import keyring

keyring.set_password('your_application_name', username, password)
</snippet></ROW><ROW><id>12962635</id><snippet>keyring</snippet></ROW><ROW><id>12962635</id><snippet>get_password('your_application_name', username)</snippet></ROW><ROW><id>12962854</id><snippet>TestCase.shortDescription()</snippet></ROW><ROW><id>12962854</id><snippet>class MyTests(unittest.TestCase):
    #  ....
    def shortDescription(self):
        return None
</snippet></ROW><ROW><id>12962854</id><snippet>None</snippet></ROW><ROW><id>12962854</id><snippet>self._testMethodDoc</snippet></ROW><ROW><id>12962864</id><snippet>groupby</snippet></ROW><ROW><id>12962864</id><snippet>last()</snippet></ROW><ROW><id>12962864</id><snippet>In [279]: s
Out[279]: 
a    1
b    2
b    3
b    4
e    5

In [280]: grouped = s.groupby(level=0)

In [281]: grouped.first()
Out[281]: 
a    1
b    2
e    5

In [282]: grouped.last()
Out[282]: 
a    1
b    4
e    5
</snippet></ROW><ROW><id>12962890</id><snippet>def score(key_str,dct):
    keys = key_str.split()
    v = sum(dct[key] for key in keys)
    return float(v)/len(keys)
</snippet></ROW><ROW><id>12963061</id><snippet>os.path.isdir(os.path.join(path, dirContent))
</snippet></ROW><ROW><id>12963064</id><snippet>urls = (
    '/', "home.Home"
)
</snippet></ROW><ROW><id>12963364</id><snippet>d = {1: {'AA': {'a': 100, 'b': 1, 'c': 45}},
     2: {'AA': {'c': 2}},
     3: {'BB': {'d': 122, 'a': 4, 't': 22, 'r': 23, 'w': 12}},
     4: {'CC': {'y': 12, 'g': 15, 'b': 500}}}

def sortkey(x):
   num,d1 = x
   key,d2 = d1.items()[0] #Some may prefer `next(d.iteritems())`
   return len(d2),max(d2.values())

exactly_how_you_want_it = [([k] + v.keys() + v.values()) for k,v in 
                           sorted(d.items(),reverse=True,key=sortkey)]

for item in exactly_how_you_want_it:
   print item
</snippet></ROW><ROW><id>12963364</id><snippet>[3, 'BB', {'a': 4, 'r': 23, 'd': 122, 'w': 12, 't': 22}]
[4, 'CC', {'y': 12, 'b': 500, 'g': 15}]
[1, 'AA', {'a': 100, 'c': 45, 'b': 1}]
[2, 'AA', {'c': 2}]
</snippet></ROW><ROW><id>12963514</id><snippet>a = {k:v for (k, v) in a.items() if any(k.startswith(k2) for k2 in b)}
</snippet></ROW><ROW><id>12963514</id><snippet>def matches(key1, d2):
    for key2 in d2:
        if key1.startswith(key2):
            return True
    return False

c = {}
for key in a:
  if not matches(key, b):
    c[key] = a[key]
a = c
</snippet></ROW><ROW><id>12963514</id><snippet>a</snippet></ROW><ROW><id>12963514</id><snippet>b</snippet></ROW><ROW><id>12963514</id><snippet>k</snippet></ROW><ROW><id>12963514</id><snippet>b</snippet></ROW><ROW><id>12963514</id><snippet>k</snippet></ROW><ROW><id>12963514</id><snippet>b</snippet></ROW><ROW><id>12963514</id><snippet>b</snippet></ROW><ROW><id>12963514</id><snippet>sorted(b.keys())</snippet></ROW><ROW><id>12963514</id><snippet>a</snippet></ROW><ROW><id>12963716</id><snippet>zona</snippet></ROW><ROW><id>12963716</id><snippet>None</snippet></ROW><ROW><id>12963716</id><snippet>{ 'variable_name' : value }</snippet></ROW><ROW><id>12963716</id><snippet>request.vars</snippet></ROW><ROW><id>12963716</id><snippet>dataType: 'string',</snippet></ROW><ROW><id>12963716</id><snippet>data</snippet></ROW><ROW><id>12963716</id><snippet>{ 'zona' : selectedVal }</snippet></ROW><ROW><id>12963716</id><snippet>request.vars['zona']</snippet></ROW><ROW><id>12963735</id><snippet>while self.__class__.objects.filter(...):
    pass
</snippet></ROW><ROW><id>12963837</id><snippet>  request(params)</snippet></ROW><ROW><id>12963837</id><snippet> self.request(params)</snippet></ROW><ROW><id>12964314</id><snippet>front_back</snippet></ROW><ROW><id>12964314</id><snippet>if letsDebug == 4:</snippet></ROW><ROW><id>12964314</id><snippet>return endString</snippet></ROW><ROW><id>12964314</id><snippet>else</snippet></ROW><ROW><id>12964314</id><snippet>if statBravo == 'even':</snippet></ROW><ROW><id>12964471</id><snippet>return</snippet></ROW><ROW><id>12964471</id><snippet>def run():
    sum_ = 0
    for i in range(11):
        sum_ += i
    return sum_
</snippet></ROW><ROW><id>12964603</id><snippet>findNumber</snippet></ROW><ROW><id>12964603</id><snippet>self.findNumber(k)</snippet></ROW><ROW><id>12964603</id><snippet> def nameList(self):
        list = self.book.keys()
        list.sort()
        for k in list:
            print k, self.findNumber(k)
</snippet></ROW><ROW><id>12964662</id><snippet>tests/NAME_tests.py
</snippet></ROW><ROW><id>12964662</id><snippet>NAME_tests.py</snippet></ROW><ROW><id>12964662</id><snippet>tests</snippet></ROW><ROW><id>12964662</id><snippet>setup.py
NAME/
    __init__.py
bin/
docs/
tests/
    NAME_tests.py
    __init__.py
</snippet></ROW><ROW><id>12964701</id><snippet>for k in ResListA:
    for n in ResListB:
        for m in k.atoms:
            for z in n.atoms:
                coordDist = distance.distance(m.atoms, z.atoms)
</snippet></ROW><ROW><id>12964701</id><snippet>distance.distance</snippet></ROW><ROW><id>12964701</id><snippet>coordDist</snippet></ROW><ROW><id>12964701</id><snippet>min()</snippet></ROW><ROW><id>12964995</id><snippet>from Foundation import *
from ScriptingBridge import *

iTunes = SBApplication.applicationWithBundleIdentifier_("com.apple.iTunes")
p = {'name':'Testing'}
playlist = iTunes.classForScriptingClass_("playlist").alloc().initWithProperties_(p)
iTunes.sources()[0].playlists().insertObject_atIndex_(playlist, 0)
</snippet></ROW><ROW><id>12964995</id><snippet>SBApplication</snippet></ROW><ROW><id>12964995</id><snippet>iTunesPlaylist</snippet></ROW><ROW><id>12964995</id><snippet>SBObject</snippet></ROW><ROW><id>12964995</id><snippet>ITApplication</snippet></ROW><ROW><id>12964995</id><snippet>iTunesPlaylist</snippet></ROW><ROW><id>12964995</id><snippet>playlist</snippet></ROW><ROW><id>12964995</id><snippet>classForScriptingClass_</snippet></ROW><ROW><id>12964995</id><snippet>iTunesPlaylist</snippet></ROW><ROW><id>12964995</id><snippet>iTunesPlaylist()</snippet></ROW><ROW><id>12964995</id><snippet>iTunesPlaylist.alloc().init()</snippet></ROW><ROW><id>12964995</id><snippet>initWithProperties_(p)</snippet></ROW><ROW><id>12964995</id><snippet>playlist</snippet></ROW><ROW><id>12964995</id><snippet>type</snippet></ROW><ROW><id>12964995</id><snippet>repr</snippet></ROW><ROW><id>12964995</id><snippet>SBElementArray</snippet></ROW><ROW><id>12964995</id><snippet>from appscript import *

iTunes = app('iTunes')
p = {'name':'Testing'}
playlist = iTunes.make(new=k.playlist, with_properties=p)
</snippet></ROW><ROW><id>12964995</id><snippet>tell application "iTunes"
    make new playlist with properties {name:"Testing4"}
end tell
</snippet></ROW><ROW><id>12965086</id><snippet>descendant-or-self</snippet></ROW><ROW><id>12965086</id><snippet>&gt;&gt;&gt; doc.xpath('//p[1]/descendant-or-self::text()')
['\n    ', ' Open Box Price:', '$1079.99', '\n    ']
&gt;&gt;&gt; doc.xpath('//p[2]/descendant-or-self::text()')
['\n    Regular Price: ', '$1499.98', '\n    ']
</snippet></ROW><ROW><id>12965086</id><snippet>lxml.html</snippet></ROW><ROW><id>12965086</id><snippet>text_content()</snippet></ROW><ROW><id>12965086</id><snippet>paras = doc.xpath('//p'): # or findall etc...
for para in paras:
    print para.text_content()
</snippet></ROW><ROW><id>12965185</id><snippet>def one_tag(request, tag):
    #http://site_name/tag/tag_name
    posts = Post.objects.order_by('-published').filter(tags__name=tag.lower())
    return render_to_response('blog/one_tag.html', 
                              {'posts':posts, 'tag':tag,},
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12965185</id><snippet>def media_url(request):
    from django.conf import settings
    return {'media_url': settings.MEDIA_URL}
</snippet></ROW><ROW><id>12965273</id><snippet>subprocess.communicate()</snippet></ROW><ROW><id>12965273</id><snippet>def communicate(self, input=None):
    ...
    # Optimization: If we are only using one pipe, or no pipe at
    # all, using select() or threads is unnecessary.
    if [self.stdin, self.stdout, self.stderr].count(None) &gt;= 2:
        stdout = None
        stderr = None
        if self.stdin:
            if input:
                self.stdin.write(input)
            self.stdin.close()
        elif self.stdout:
            stdout = self.stdout.read()
            self.stdout.close()
        elif self.stderr:
            stderr = self.stderr.read()
            self.stderr.close()
        self.wait()
        return (stdout, stderr)

    return self._communicate(input)
</snippet></ROW><ROW><id>12965273</id><snippet>communicate</snippet></ROW><ROW><id>12965273</id><snippet>stdout</snippet></ROW><ROW><id>12965273</id><snippet>stderr</snippet></ROW><ROW><id>12965273</id><snippet>wait()</snippet></ROW><ROW><id>12965273</id><snippet>PIPE</snippet></ROW><ROW><id>12965273</id><snippet>_communicate()</snippet></ROW><ROW><id>12965273</id><snippet>def _communicate(self, input):
    stdout = None # Return
    stderr = None # Return

    if self.stdout:
        stdout = []
        stdout_thread = threading.Thread(target=self._readerthread,
                                         args=(self.stdout, stdout))
        stdout_thread.setDaemon(True)
        stdout_thread.start()
    if self.stderr:
        stderr = []
        stderr_thread = threading.Thread(target=self._readerthread,
                                         args=(self.stderr, stderr))
        stderr_thread.setDaemon(True)
        stderr_thread.start()

    if self.stdin:
        if input is not None:
            self.stdin.write(input)
        self.stdin.close()

    if self.stdout:
        stdout_thread.join()
    if self.stderr:
        stderr_thread.join()

    # All data exchanged.  Translate lists into strings.
    if stdout is not None:
        stdout = stdout[0]
    if stderr is not None:
        stderr = stderr[0]

    # Translate newlines, if requested.  We cannot let the file
    # object do the translation: It is based on stdio, which is
    # impossible to combine with select (unless forcing no
    # buffering).
    if self.universal_newlines and hasattr(file, 'newlines'):
        if stdout:
            stdout = self._translate_newlines(stdout)
        if stderr:
            stderr = self._translate_newlines(stderr)

    self.wait()
    return (stdout, stderr)
</snippet></ROW><ROW><id>12965273</id><snippet>wait()</snippet></ROW><ROW><id>12965273</id><snippet>from subprocess import communicate
from subprocess import wait
</snippet></ROW><ROW><id>12965273</id><snippet>Popen</snippet></ROW><ROW><id>12965788</id><snippet>datetime</snippet></ROW><ROW><id>12965788</id><snippet>from datetime import datetime

dt = datetime(2012, 10, 18)
print dt.timetuple()
# time.struct_time(tm_year=2012, tm_mon=10, tm_mday=18, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=292, tm_isdst=-1)
</snippet></ROW><ROW><id>12965788</id><snippet>from datetime import timedelta
print datetime(2012, 1, 1) + timedelta(days=291)
# datetime.datetime(2012, 10, 18, 0, 0)
</snippet></ROW><ROW><id>12965831</id><snippet>import xml.etree.ElementTree as ET
data = '''\
&lt;node1&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
&lt;/node1&gt;
'''
doc = ET.fromstring(data)
e = doc.find('node2/[@a1="x2"]')
doc.remove(e)
print(ET.tostring(doc))
# &lt;node1&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
# &lt;/node1&gt;
</snippet></ROW><ROW><id>12966012</id><snippet>a = '1'
b = '21'

els = ['a', 'b', '3', '4', '5', '64']
print [vars().get(el, el) for el in els]
# ['1', '21', '3', '4', '5', '64']
</snippet></ROW><ROW><id>12966115</id><snippet>views.py</snippet></ROW><ROW><id>12966115</id><snippet>from django.http import HttpResponce 
</snippet></ROW><ROW><id>12966115</id><snippet>HttpResponse</snippet></ROW><ROW><id>12966115</id><snippet>from django.http import HttpResponse 
</snippet></ROW><ROW><id>12966238</id><snippet>eventD = MyDict({'rrule_end':None})
</snippet></ROW><ROW><id>12966345</id><snippet>pkgutil.walk_packages</snippet></ROW><ROW><id>12966345</id><snippet>from distutils.core import setup
from pkgutil import walk_packages

import mypackage

def find_packages(path=__path__, prefix=""):
    yield prefix
    prefix = prefix + "."
    for _, name, ispkg in walk_packages(path, prefix):
        if ispkg:
            yield name

setup(
    # ... snip ...
    packages = list(find_packages(mypackage.__path__, mypackage.__name__)),
    # ... snip ...
)
</snippet></ROW><ROW><id>12966358</id><snippet>def tup2float(tup):
    return float('.'.join(str(x) for x in tup))
</snippet></ROW><ROW><id>12966358</id><snippet>&gt;&gt;&gt; tup2float((1,2))
1.2
&gt;&gt;&gt; tup2float((2,3))
2.3
&gt;&gt;&gt; tup2float((2,30))
2.3
&gt;&gt;&gt; tup2float((2,32))
2.32
</snippet></ROW><ROW><id>12966420</id><snippet>import json

json_data = open('data.json')
jdata = json.load(json_data)

def printKeyVals(data, indent=0):
    if isinstance(data, list):
        print
        for item in data:
            printKeyVals(item, indent+1)
    elif isinstance(data, dict):
        print
        for k, v in data.iteritems():
            print "    " * indent, k + ":",
            printKeyVals(v, indent + 1)
    else:
        print data
</snippet></ROW><ROW><id>12966420</id><snippet> node:

         status:
             direction: N
             speed: 90
         ip: 172.20.0.1
         ts: 12387
         coord:
             lat: -9.8257
             lon: 65.0880
             dist: 12
         hid: 213
         id: 12387
</snippet></ROW><ROW><id>12966420</id><snippet>import pprint
pprint.pprint(jdata)
</snippet></ROW><ROW><id>12966536</id><snippet>import string

table = string.maketrans(string.ascii_letters, '^'*len(string.ascii_letters))

def blah(r):
    return r.translate(table)
</snippet></ROW><ROW><id>12966536</id><snippet>re.sub</snippet></ROW><ROW><id>12966536</id><snippet>import re

def blah(r):
    return re.sub(r'[a-zA-Z]', r'^', r)
</snippet></ROW><ROW><id>12966688</id><snippet>max_length = 30
for i in xrange(0, len(emails), max_length):
    current_array = emails[i:i+max_length]
    # query this array
</snippet></ROW><ROW><id>12966853</id><snippet>from lxml import etree
from StringIO import StringIO

tree = etree.parse(StringIO('''&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
 &lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "eggs"&gt; ]&gt;
  &lt;root&gt;
   &lt;a&gt;&amp;tasty;&lt;/a&gt;
 &lt;/root&gt;
'''))

docinfo = tree.docinfo
print etree.tostring(tree, xml_declaration=True, encoding=docinfo.encoding)
</snippet></ROW><ROW><id>12966853</id><snippet>tostring</snippet></ROW><ROW><id>12966853</id><snippet>DOCTYPE</snippet></ROW><ROW><id>12966853</id><snippet>Element</snippet></ROW><ROW><id>12966853</id><snippet>fromstring</snippet></ROW><ROW><id>12966853</id><snippet>parse</snippet></ROW><ROW><id>12966853</id><snippet>fromstring</snippet></ROW><ROW><id>12966853</id><snippet>Element</snippet></ROW><ROW><id>12966853</id><snippet>ElementTree</snippet></ROW><ROW><id>12966853</id><snippet>from lxml import etree
from StringIO import StringIO

xml_str = '''&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
 &lt;!DOCTYPE root SYSTEM "test" [ &lt;!ENTITY tasty "eggs"&gt; ]&gt;
  &lt;root&gt;
   &lt;a&gt;&amp;tasty;&lt;/a&gt;
 &lt;/root&gt;
'''

# get the ElementTree using parse
parse_tree = etree.parse(StringIO(xml_str))
encoding = parse_tree.docinfo.encoding
result = etree.tostring(parse_tree, xml_declaration=True, encoding=encoding)
print "%s\nparse ElementTree:\n%s\n" % ('-'*20, result)

# get the ElementTree using fromstring
fromstring_tree = etree.fromstring(xml_str).getroottree()
encoding = fromstring_tree.docinfo.encoding
result = etree.tostring(fromstring_tree, xml_declaration=True, encoding=encoding)
print "%s\nfromstring ElementTree:\n%s\n" % ('-'*20, result)

# DOCTYPE is lost, and no access to encoding
fromstring_element = etree.fromstring(xml_str)
result = etree.tostring(fromstring_element, xml_declaration=True)
print "%s\nfromstring Element:\n%s\n" % ('-'*20, result)
</snippet></ROW><ROW><id>12966853</id><snippet>--------------------
parse ElementTree:
&lt;?xml version='1.0' encoding='iso-8859-1'?&gt;
&lt;!DOCTYPE root SYSTEM "test" [
&lt;!ENTITY tasty "eggs"&gt;
]&gt;
&lt;root&gt;
   &lt;a&gt;eggs&lt;/a&gt;
 &lt;/root&gt;

--------------------
fromstring ElementTree:
&lt;?xml version='1.0' encoding='iso-8859-1'?&gt;
&lt;!DOCTYPE root SYSTEM "test" [
&lt;!ENTITY tasty "eggs"&gt;
]&gt;
&lt;root&gt;
   &lt;a&gt;eggs&lt;/a&gt;
 &lt;/root&gt;

--------------------
fromstring Element:
&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;root&gt;
   &lt;a&gt;eggs&lt;/a&gt;
 &lt;/root&gt;
</snippet></ROW><ROW><id>12966997</id><snippet>[(an expression involving x) for x in someList if (some condition)]
</snippet></ROW><ROW><id>12966997</id><snippet>condition</snippet></ROW><ROW><id>12966997</id><snippet>(expression involving x)</snippet></ROW><ROW><id>12966997</id><snippet>&gt;&gt;&gt; myList = [1,"hello",5.4,"world"]
&gt;&gt;&gt; [elem for elem in myList if type(elem)==str]
['hello', 'world']
</snippet></ROW><ROW><id>12966997</id><snippet>if</snippet></ROW><ROW><id>12966997</id><snippet>expression involving x</snippet></ROW><ROW><id>12966997</id><snippet>x</snippet></ROW><ROW><id>12966997</id><snippet>expression involving x</snippet></ROW><ROW><id>12966997</id><snippet>x</snippet></ROW><ROW><id>12966997</id><snippet>0</snippet></ROW><ROW><id>12966997</id><snippet>&gt;&gt;&gt; [0 for letter in "Matthew"]
[0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>12967160</id><snippet>max</snippet></ROW><ROW><id>12967160</id><snippet>count, best = max((compareGenes(k, target), k) for k in genes)
</snippet></ROW><ROW><id>12967160</id><snippet>key</snippet></ROW><ROW><id>12967160</id><snippet>max</snippet></ROW><ROW><id>12967160</id><snippet>best = max(genes, key=lambda k: compareGenes(k, target))
</snippet></ROW><ROW><id>12967461</id><snippet>Node</snippet></ROW><ROW><id>12967461</id><snippet>Node/Parent/Children</snippet></ROW><ROW><id>12967461</id><snippet>Widget</snippet></ROW><ROW><id>12967461</id><snippet>Node</snippet></ROW><ROW><id>12967461</id><snippet>parent</snippet></ROW><ROW><id>12967527</id><snippet>result, data = mail.search(None, "ALL")
</snippet></ROW><ROW><id>12967527</id><snippet>result, data = mail.search(None, '(TO "johndoe@gmail.com")')
</snippet></ROW><ROW><id>12967679</id><snippet>def noofways(firstnumchosen, sum, numofnum):
    global count
    # don't set count to 0 here
    if sum&lt;0:
        return 
    if sum==0 and not(numofnum==0):
        return
    if sum==0 and numofnum==0:
       count+=1
       return
    if numofnum&lt;=0:
       return
    if firstnumchosen&gt;sum:
       return
    noofways(firstnumchosen+1,sum,numofnum)
    noofways(firstnumchosen+1,sum-firstnumchosen,numofnum-1)

# set count to 0 here
count = 0
res=noofways(1,8,3);
print count
</snippet></ROW><ROW><id>12967761</id><snippet>def download_finished(reply):
    try:
        with open('filename.ext', 'wb') as downloaded_file:
            downloaded_file.write(reply.readAll())
    except Exception:
        pass

    b.manager.finished.disconnect(download_finished)

download_url = spynner.QUrl(url)
request = spynner.QNetworkRequest(download_url)

# requires: from PyQt4.QtCore import QByteArray
request.setRawHeader('Accept', QByteArray(
    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'))

b.manager.finished.connect(download_finished)
reply = b.manager.get(request)
b.wait_requests(1)
</snippet></ROW><ROW><id>12967877</id><snippet>Content-Disposition</snippet></ROW><ROW><id>12967877</id><snippet>Content-Disposition: attachment
</snippet></ROW><ROW><id>12967877</id><snippet>Content-Disposition: attachment; filename=foo.pdf
</snippet></ROW><ROW><id>12967877</id><snippet>X-Accel-Redirect</snippet></ROW><ROW><id>12968345</id><snippet>icon = QtGui.QIcon('blah.png')
self.tray_icon = QtGui.QSystemTrayIcon(self)
self.tray_icon.setIcon(icon)
self.tray_icon.setVisible(True)
self.tray_icon.show()
</snippet></ROW><ROW><id>12968345</id><snippet>icon = QtGui.QIcon('blah.png')
self.setWindowIcon(icon)
</snippet></ROW><ROW><id>12969305</id><snippet>hex()</snippet></ROW><ROW><id>12969305</id><snippet>"0x%02x" % int('00000000', 2)
</snippet></ROW><ROW><id>12969550</id><snippet>template.read()</snippet></ROW><ROW><id>12969550</id><snippet>template(name='John')</snippet></ROW><ROW><id>12969550</id><snippet>print template(name='John')
</snippet></ROW><ROW><id>12969708</id><snippet>from pexpect import spawn
import time
import datetime

KEY_UP = '\x1b[A'
KEY_DOWN = '\x1b[B'
KEY_RIGHT = '\x1b[C'
KEY_LEFT = '\x1b[D'
KEY_ESCAPE = '\x1b'
KEY_BACKSPACE = '\x7f'

child = spawn('elinks http://python.org')
print 'waiting for python.org to load'
child.expect('Python')
time.sleep(0.1)
print 'doing selenium search'
child.sendline('/advanced search')
child.sendline(KEY_UP * 2)
child.sendline('selenium')
child.sendline('')
print 'waiting for search results'
child.expect('Google Search')
time.sleep(0.1)
print 'saving html'
child.send(KEY_ESCAPE)  # bring up menu
child.send(KEY_DOWN + 's')  # select save as in menu
child.send(KEY_BACKSPACE * 100) # remove any file name already in input box
file = './saved_' + datetime.datetime.now().strftime('%H%M%S') + '.html'
child.sendline(file)
#child.interact() #uncomment to interact with elinks, good for debugging
print 'quiting'
child.sendline('q')
child.wait()
</snippet></ROW><ROW><id>12969710</id><snippet>from BeautifulSoup import BeautifulSoup as bs

your_string = """&lt;test name1="" name2="" name3="0.0.0.0" name4="Linux"&gt;&lt;/test&gt;"""

soup = bs(your_string)
res = soup.findAll('test')
for i in res:
    print i.get('name4')
</snippet></ROW><ROW><id>12969710</id><snippet>from BeautifulSoup import BeautifulSoup as bs

your_string = """&lt;test name1="" name2="" name3="0.0.0.0" name4="Linux"&gt;&lt;/test&gt;"""

soup = bs(your_string)
s = soup.test
s['name4'] = 'Ubuntu'
print soup
</snippet></ROW><ROW><id>12969748</id><snippet>li[1]</snippet></ROW><ROW><id>12969748</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '/dev/vg10/lv11:cp:99'
&gt;&gt;&gt; m = re.search('/vg(?P&lt;vg&gt;\d+)/lv(?P&lt;lv&gt;\d+):\w+:(?P&lt;number&gt;\d+)', s)
&gt;&gt;&gt; print m.groupdict()
{'lv': '11', 'number': '99', 'vg': '10'}
</snippet></ROW><ROW><id>12969793</id><snippet>numpy.diff</snippet></ROW><ROW><id>12969793</id><snippet>def heat(D,u0,q,tdim): 
    xdim = np.size(u0) 
    Z = np.zeros([xdim,tdim]) 
    Z[:,0]=u0; 

    for i in range(1,tdim): 
        Z[1:-1,i]=Z[1:-1,i-1] + D*q*np.diff(Z[:,i-1], 2)

    return Z
</snippet></ROW><ROW><id>12969839</id><snippet>DJANGO_SETTINGS</snippet></ROW><ROW><id>12969839</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>12969839</id><snippet>make html</snippet></ROW><ROW><id>12969839</id><snippet>export PYTHONPATH=&lt;path to root of source&gt;
export DJANGO_SETTINGS_MODULE=myproject.settings
</snippet></ROW><ROW><id>12969839</id><snippet>conf.py</snippet></ROW><ROW><id>12969839</id><snippet>sys.path.append('&lt;path to root of source&gt;')
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
</snippet></ROW><ROW><id>12969935</id><snippet>def main():
    # main code block

if sys.argv[1] == '--help' or sys.argv[1] == '-help' or \
    sys.argv[1] == '-h' or sys.argv[1] == '--h':
    print "Help text"
else:
    main()
</snippet></ROW><ROW><id>12970277</id><snippet>"goodTime99"</snippet></ROW><ROW><id>12970277</id><snippet>value = ["python:guru-age20", "is_it_possible_time100:goodTime99","hmm_hope_no_onecanansswer"]
if any("goodTime99" in s for s in value):
    # found it
</snippet></ROW><ROW><id>12970277</id><snippet>&gt;&gt;&gt; next((i for i, s in enumerate(value) if "goodTime991" in s), -1)
1
</snippet></ROW><ROW><id>12970277</id><snippet>def find_first_substring(lst, substring):
    return next((i for i, s in enumerate(lst) if substring in s), -1)

&gt;&gt;&gt; find_first_substring(value, "goodTime99")
1
</snippet></ROW><ROW><id>12970301</id><snippet>lib/pool.py</snippet></ROW><ROW><id>12970301</id><snippet>psycopg2.pool.AbstractConnectionPool</snippet></ROW><ROW><id>12970301</id><snippet>dict</snippet></ROW><ROW><id>12970301</id><snippet>_used</snippet></ROW><ROW><id>12970301</id><snippet>key</snippet></ROW><ROW><id>12970301</id><snippet>getconn</snippet></ROW><ROW><id>12970301</id><snippet>putconn</snippet></ROW><ROW><id>12970301</id><snippet>key</snippet></ROW><ROW><id>12970301</id><snippet>None</snippet></ROW><ROW><id>12970301</id><snippet>id</snippet></ROW><ROW><id>12970301</id><snippet>key</snippet></ROW><ROW><id>12970301</id><snippet>psycopg2.pool.PersistentConnectionPool</snippet></ROW><ROW><id>12970396</id><snippet>%02X</snippet></ROW><ROW><id>12970396</id><snippet>&gt;&gt;&gt; print '%02X' % 0x05
05
&gt;&gt;&gt; for i in [0x05, 0x06, 0x40, 0xFD, 0x05]:
...     print '%02X' % i,
...
05 06 40 FD 05
</snippet></ROW><ROW><id>12970396</id><snippet>&gt;&gt;&gt; ' '.join(['%02X' % i for i in [0x05, 0x06, 0x40, 0xFD, 0x05]])
'05 06 40 FD 05'
</snippet></ROW><ROW><id>12970460</id><snippet>import csv

class DictReaderInsensitive(csv.DictReader):
    # This class overrides the csv.fieldnames property.
    # All fieldnames are without white space and in lower case

    @property
    def fieldnames(self):
        return [field.strip().lower() for field in super(DictReaderInsensitive, self).fieldnames]

    def __next__(self):
        # get the result from the original __next__, but store it in DictInsensitive

        dInsensitive = DictInsensitive()
        dOriginal = super(DictReaderInsensitive, self).__next__()

        # store all pairs from the old dict in the new, custom one
        for key, value in dOriginal.items():
            dInsensitive[key] = value

        return dInsensitive

class DictInsensitive(dict):
    # This class overrides the __getitem__ method to automatically strip() and lower() the input key

    def __getitem__(self, key):
        return dict.__getitem__(self, key.strip().lower())
</snippet></ROW><ROW><id>12970460</id><snippet>csvDict = DictReaderInsensitive(open('csv-file.csv', 'rU'))

for lineDict in csvDict:
    print(lineDict[' Column_A']) # or
    print(lineDict['Column_A']) # or
    print(lineDict[' column_a']) # all returns the same
</snippet></ROW><ROW><id>12970633</id><snippet>comm = 'python2.6 file.py "%s" "%s" &amp;' % (mylist, nbre)
</snippet></ROW><ROW><id>12970633</id><snippet>mylist</snippet></ROW><ROW><id>12970633</id><snippet>nbre</snippet></ROW><ROW><id>12970633</id><snippet>subprocess</snippet></ROW><ROW><id>12970651</id><snippet>get_all_addresses works</snippet></ROW><ROW><id>12970651</id><snippet>addrs = conn.get_all_addresses()
for a in addrs:
    print a.public_ip
</snippet></ROW><ROW><id>12970832</id><snippet>&gt;&gt;&gt; set(ListOne) - set(ListZero)
set(['Seven', 'Six', 'Five'])

&gt;&gt;&gt; Excess = list(set(ListOne)-set(ListZero))
['Seven', 'Six', 'Five']
</snippet></ROW><ROW><id>12970832</id><snippet>&gt;&gt;&gt; ExcessList = ["{0} [{1}]".format(name, index) for index, name in enumerate(Excess,1)]
['Seven [1]', 'Six [2]', 'Five [3]']

&gt;&gt;&gt; Name = raw_input("Please choose which number you wish to use: {} \n".format(', '.join(ExcessList)))
</snippet></ROW><ROW><id>12970832</id><snippet>try:
    Selected = Excess[int(Name)-1]
    print "Your choice is: {}".format(Selected)
Except: 
    print "Invalid input"
</snippet></ROW><ROW><id>12970832</id><snippet>enumerate</snippet></ROW><ROW><id>12970832</id><snippet>list</snippet></ROW><ROW><id>12970832</id><snippet>set</snippet></ROW><ROW><id>12970987</id><snippet>import json
# ... you read here from the file
data = '''{
  "Code" : "Success",
  "LastUpdated" : "2012-10-19T08:52:10Z"
}'''
result = json.loads(data)
print result['Code']
</snippet></ROW><ROW><id>12970987</id><snippet>"LastUpdated" : "2012-10-19T08:52:10Z"</snippet></ROW><ROW><id>12971567</id><snippet>def isWordGuessed(secretWord, lettersGuessed):
    return set(secretWord) &lt;= set(lettersGuessed)
</snippet></ROW><ROW><id>12971650</id><snippet> sorter = np.argsort(idtopick, kind='mergesort') # you need stable sorting
 sorted_ids = idtopick[sorter]
 positions = np.searchsorted(sorted_ids, idtolook)
 positions = sorter[positions]
</snippet></ROW><ROW><id>12971650</id><snippet>idtolook</snippet></ROW><ROW><id>12971650</id><snippet>idtopick</snippet></ROW><ROW><id>12971650</id><snippet> c = np.concatenate((idtopick, idtolook))
 sorter = np.argsort(c, kind='mergesort')
 #reverse = np.argsort(sorter) # The next two lines are this, but faster:
 reverse = np.empty_like(sorter)
 reverse[sorter] = np.arange(len(sorter))
 positions = sorter[reverse[-len(idtolook):]-1]
</snippet></ROW><ROW><id>12971697</id><snippet>None</snippet></ROW><ROW><id>12971697</id><snippet>&gt;&gt;&gt; None &lt; None
False

&gt;&gt;&gt; None &lt; "abc"
True

&gt;&gt;&gt; None &lt; ""
True
</snippet></ROW><ROW><id>12971697</id><snippet>NoneType</snippet></ROW><ROW><id>12971697</id><snippet>&gt;&gt;&gt; None &lt; "abc"
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: NoneType() &lt; str()
</snippet></ROW><ROW><id>12971697</id><snippet>None</snippet></ROW><ROW><id>12971697</id><snippet>""</snippet></ROW><ROW><id>12971697</id><snippet>my_list_sortable = [(x or "") for x in my_list]
</snippet></ROW><ROW><id>12971697</id><snippet>sort</snippet></ROW><ROW><id>12971697</id><snippet>key</snippet></ROW><ROW><id>12971697</id><snippet>def nonesorter(a):
    if not a:
        return ""
    return a

my_list.sort(key=nonesorter)
</snippet></ROW><ROW><id>12971977</id><snippet>__new__</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>Singleton</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>A = Singleton('A', (object,), &lt;the dict&gt;)
</snippet></ROW><ROW><id>12971977</id><snippet>&lt;the dict&gt;</snippet></ROW><ROW><id>12971977</id><snippet>__module__</snippet></ROW><ROW><id>12971977</id><snippet>__metaclass__</snippet></ROW><ROW><id>12971977</id><snippet>__init__</snippet></ROW><ROW><id>12971977</id><snippet>Singleton</snippet></ROW><ROW><id>12971977</id><snippet>super(Singleton, self).__call__(*args, **kwargs)</snippet></ROW><ROW><id>12971977</id><snippet>__new__</snippet></ROW><ROW><id>12971977</id><snippet>.__init__</snippet></ROW><ROW><id>12971977</id><snippet>calling __init__ of Singleton class &lt;class '__main__.A'&gt;
args:  ('A', (&lt;type 'object'&gt;,), {'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'&gt;, '__init__': &lt;function __init__ at 0x01F9F7B0&gt;})
kwargs:  {}
</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>a = A(10)
</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>A</snippet></ROW><ROW><id>12971977</id><snippet>Singleton</snippet></ROW><ROW><id>12971977</id><snippet>Singleton.__call__</snippet></ROW><ROW><id>12971977</id><snippet>running __call__ of Singleton &lt;class '__main__.A'&gt;
args:  (10,)
kwargs:  {}
</snippet></ROW><ROW><id>12971977</id><snippet>Singleton.__call__</snippet></ROW><ROW><id>12971977</id><snippet>type.__call__</snippet></ROW><ROW><id>12971977</id><snippet>A.__new__</snippet></ROW><ROW><id>12971977</id><snippet>A.__init__</snippet></ROW><ROW><id>12971977</id><snippet>in __init__ of A:   &lt;__main__.A object at 0x01FA7A10&gt;
self.a:  10
</snippet></ROW><ROW><id>12971977</id><snippet>b = A(20)
</snippet></ROW><ROW><id>12971977</id><snippet>Singleton.__call__</snippet></ROW><ROW><id>12971977</id><snippet>running __call__ of Singleton &lt;class '__main__.A'&gt;
args:  (20,)
kwargs:  {}
</snippet></ROW><ROW><id>12971977</id><snippet>super</snippet></ROW><ROW><id>12972076</id><snippet>sort(matches, key=lambda x: x.real_start, reverse=True)
</snippet></ROW><ROW><id>12972502</id><snippet>&lt;Properties&gt;
&lt;Pages&gt;CountValue&lt;/Pages&gt;
</snippet></ROW><ROW><id>12972502</id><snippet>&lt;office:document-meta&gt;
    &lt;office:meta&gt;
        &lt;meta:document-statistic meta:page-count="CountValue"&gt;
</snippet></ROW><ROW><id>12972689</id><snippet>foo(arg)</snippet></ROW><ROW><id>12972689</id><snippet>foo(myObj)</snippet></ROW><ROW><id>12972689</id><snippet>foo(arg)</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>PyObject</snippet></ROW><ROW><id>12972689</id><snippet>foo(arg)</snippet></ROW><ROW><id>12972689</id><snippet>#ifndef ABC_HPP
#define ABC_HPP

#include &lt;Python.h&gt;
#include &lt;string&gt;

class ABC
{
  // Other declarations 
    ABC();
    ABC(const std::string&amp; someConfigFile);
    virtual ~ABC();
    PyObject* doSomething(PyObject* image); // We want our python code to be able to call this function to do some processing using OpenCV and return the result.
  // Other declarations
};

#endif
</snippet></ROW><ROW><id>12972689</id><snippet>#include "abc.hpp"
#include "my_cpp_library.h" // This is what we want to make available in python. It uses OpenCV to perform some processing.

#include "numpy/ndarrayobject.h"
#include "opencv2/core/core.hpp"

// The following conversion functions are taken from OpenCV's cv2.cpp file inside modules/python/src2 folder.
static PyObject* opencv_error = 0;

static int failmsg(const char *fmt, ...)
{
    char str[1000];

    va_list ap;
    va_start(ap, fmt);
    vsnprintf(str, sizeof(str), fmt, ap);
    va_end(ap);

    PyErr_SetString(PyExc_TypeError, str);
    return 0;
}

class PyAllowThreads
{
public:
    PyAllowThreads() : _state(PyEval_SaveThread()) {}
    ~PyAllowThreads()
    {
        PyEval_RestoreThread(_state);
    }
private:
    PyThreadState* _state;
};

class PyEnsureGIL
{
public:
    PyEnsureGIL() : _state(PyGILState_Ensure()) {}
    ~PyEnsureGIL()
    {
        PyGILState_Release(_state);
    }
private:
    PyGILState_STATE _state;
};

#define ERRWRAP2(expr) \
try \
{ \
    PyAllowThreads allowThreads; \
    expr; \
} \
catch (const cv::Exception &amp;e) \
{ \
    PyErr_SetString(opencv_error, e.what()); \
    return 0; \
}

using namespace cv;

static PyObject* failmsgp(const char *fmt, ...)
{
  char str[1000];

  va_list ap;
  va_start(ap, fmt);
  vsnprintf(str, sizeof(str), fmt, ap);
  va_end(ap);

  PyErr_SetString(PyExc_TypeError, str);
  return 0;
}

static size_t REFCOUNT_OFFSET = (size_t)&amp;(((PyObject*)0)-&gt;ob_refcnt) +
    (0x12345678 != *(const size_t*)"\x78\x56\x34\x12\0\0\0\0\0")*sizeof(int);

static inline PyObject* pyObjectFromRefcount(const int* refcount)
{
    return (PyObject*)((size_t)refcount - REFCOUNT_OFFSET);
}

static inline int* refcountFromPyObject(const PyObject* obj)
{
    return (int*)((size_t)obj + REFCOUNT_OFFSET);
}

class NumpyAllocator : public MatAllocator
{
public:
    NumpyAllocator() {}
    ~NumpyAllocator() {}

    void allocate(int dims, const int* sizes, int type, int*&amp; refcount,
                  uchar*&amp; datastart, uchar*&amp; data, size_t* step)
    {
        PyEnsureGIL gil;

        int depth = CV_MAT_DEPTH(type);
        int cn = CV_MAT_CN(type);
        const int f = (int)(sizeof(size_t)/8);
        int typenum = depth == CV_8U ? NPY_UBYTE : depth == CV_8S ? NPY_BYTE :
                      depth == CV_16U ? NPY_USHORT : depth == CV_16S ? NPY_SHORT :
                      depth == CV_32S ? NPY_INT : depth == CV_32F ? NPY_FLOAT :
                      depth == CV_64F ? NPY_DOUBLE : f*NPY_ULONGLONG + (f^1)*NPY_UINT;
        int i;
        npy_intp _sizes[CV_MAX_DIM+1];
        for( i = 0; i &lt; dims; i++ )
        {
            _sizes[i] = sizes[i];
        }

        if( cn &gt; 1 )
        {
            /*if( _sizes[dims-1] == 1 )
                _sizes[dims-1] = cn;
            else*/
                _sizes[dims++] = cn;
        }

        PyObject* o = PyArray_SimpleNew(dims, _sizes, typenum);

        if(!o)
        {
            CV_Error_(CV_StsError, ("The numpy array of typenum=%d, ndims=%d can not be created", typenum, dims));
        }
        refcount = refcountFromPyObject(o);

        npy_intp* _strides = PyArray_STRIDES(o);
        for( i = 0; i &lt; dims - (cn &gt; 1); i++ )
            step[i] = (size_t)_strides[i];
        datastart = data = (uchar*)PyArray_DATA(o);
    }

    void deallocate(int* refcount, uchar*, uchar*)
    {
        PyEnsureGIL gil;
        if( !refcount )
            return;
        PyObject* o = pyObjectFromRefcount(refcount);
        Py_INCREF(o);
        Py_DECREF(o);
    }
};

NumpyAllocator g_numpyAllocator;

enum { ARG_NONE = 0, ARG_MAT = 1, ARG_SCALAR = 2 };

static int pyopencv_to(const PyObject* o, Mat&amp; m, const char* name = "&lt;unknown&gt;", bool allowND=true)
{
    //NumpyAllocator g_numpyAllocator;
    if(!o || o == Py_None)
    {
        if( !m.data )
            m.allocator = &amp;g_numpyAllocator;
        return true;
    }

    if( !PyArray_Check(o) )
    {
        failmsg("%s is not a numpy array", name);
        return false;
    }

    int typenum = PyArray_TYPE(o);
    int type = typenum == NPY_UBYTE ? CV_8U : typenum == NPY_BYTE ? CV_8S :
               typenum == NPY_USHORT ? CV_16U : typenum == NPY_SHORT ? CV_16S :
               typenum == NPY_INT || typenum == NPY_LONG ? CV_32S :
               typenum == NPY_FLOAT ? CV_32F :
               typenum == NPY_DOUBLE ? CV_64F : -1;

    if( type &lt; 0 )
    {
        failmsg("%s data type = %d is not supported", name, typenum);
        return false;
    }

    int ndims = PyArray_NDIM(o);
    if(ndims &gt;= CV_MAX_DIM)
    {
        failmsg("%s dimensionality (=%d) is too high", name, ndims);
        return false;
    }

    int size[CV_MAX_DIM+1];
    size_t step[CV_MAX_DIM+1], elemsize = CV_ELEM_SIZE1(type);
    const npy_intp* _sizes = PyArray_DIMS(o);
    const npy_intp* _strides = PyArray_STRIDES(o);
    bool transposed = false;

    for(int i = 0; i &lt; ndims; i++)
    {
        size[i] = (int)_sizes[i];
        step[i] = (size_t)_strides[i];
    }

    if( ndims == 0 || step[ndims-1] &gt; elemsize ) {
        size[ndims] = 1;
        step[ndims] = elemsize;
        ndims++;
    }

    if( ndims &gt;= 2 &amp;&amp; step[0] &lt; step[1] )
    {
        std::swap(size[0], size[1]);
        std::swap(step[0], step[1]);
        transposed = true;
    }

    if( ndims == 3 &amp;&amp; size[2] &lt;= CV_CN_MAX &amp;&amp; step[1] == elemsize*size[2] )
    {
        ndims--;
        type |= CV_MAKETYPE(0, size[2]);
    }

    if( ndims &gt; 2 &amp;&amp; !allowND )
    {
        failmsg("%s has more than 2 dimensions", name);
        return false;
    }

    m = Mat(ndims, size, type, PyArray_DATA(o), step);

    if( m.data )
    {
        m.refcount = refcountFromPyObject(o);
        m.addref(); // protect the original numpy array from deallocation
                    // (since Mat destructor will decrement the reference counter)
    };
    m.allocator = &amp;g_numpyAllocator;

    if( transposed )
    {
        Mat tmp;
        tmp.allocator = &amp;g_numpyAllocator;
        transpose(m, tmp);
        m = tmp;
    }
    return true;
}

static PyObject* pyopencv_from(const Mat&amp; m)
{
    if( !m.data )
        Py_RETURN_NONE;
    Mat temp, *p = (Mat*)&amp;m;
    if(!p-&gt;refcount || p-&gt;allocator != &amp;g_numpyAllocator)
    {
        temp.allocator = &amp;g_numpyAllocator;
        m.copyTo(temp);
        p = &amp;temp;
    }
    p-&gt;addref();
    return pyObjectFromRefcount(p-&gt;refcount);
}

ABC::ABC() {}
ABC::~ABC() {}
// Note the import_array() from NumPy must be called else you will experience segmentation faults.
ABC::ABC(const std::string &amp;someConfigFile)
{
  // Initialization code. Possibly store someConfigFile etc.
  import_array(); // This is a function from NumPy that MUST be called.
  // Do other stuff
}

// The conversions functions above are taken from OpenCV. The following function is 
// what we define to access the C++ code we are interested in.
PyObject* ABC::doSomething(PyObject* image)
{
    cv::Mat cvImage;
    pyopencv_to(image, cvImage); // From OpenCV's source

    MyCPPClass obj; // Some object from the C++ library.
    cv::Mat processedImage = obj.process(cvImage);

    return pyopencv_from(processedImage); // From OpenCV's source
}
</snippet></ROW><ROW><id>12972689</id><snippet>#include &lt;string&gt;    
#include&lt;boost/python.hpp&gt;
#include "abc.hpp"

using namespace boost::python;

BOOST_PYTHON_MODULE(pysomemodule)
{
    class_&lt;ABC&gt;("ABC", init&lt;const std::string &amp;&gt;())
      .def(init&lt;const std::string &amp;&gt;())
      .def("doSomething", &amp;ABC::doSomething) // doSomething is the method in class ABC you wish to expose. One line for each method (or function depending on how you structure your code). Note: You don't have to expose everything in the library, just the ones you wish to make available to python.
    ;
}
</snippet></ROW><ROW><id>12972689</id><snippet>PYTHON_VERSION = 2.7
PYTHON_INCLUDE = /usr/include/python$(PYTHON_VERSION)

# location of the Boost Python include files and library
BOOST_INC = /usr/local/include/boost
BOOST_LIB = /usr/local/lib

OPENCV_LIB = `pkg-config --libs opencv`
OPENCV_CFLAGS = `pkg-config --cflags opencv`

MY_CPP_LIB = lib_my_cpp_library.so

TARGET = pysomemodule
SRC = pysomemodule.cpp abc.cpp
OBJ = pysomemodule.o abc.o

$(TARGET).so: $(OBJ)
    g++ -shared $(OBJ) -L$(BOOST_LIB) -lboost_python -L/usr/lib/python$(PYTHON_VERSION)/config -lpython$(PYTHON_VERSION) -o $(TARGET).so $(OPENCV_LIB) $(MY_CPP_LIB)

$(OBJ): $(SRC)
    g++ -I$(PYTHON_INCLUDE) -I$(BOOST_INC) $(OPENCV_CFLAGS) -fPIC -c $(SRC)

clean:
    rm -f $(OBJ)
    rm -f $(TARGET).so
</snippet></ROW><ROW><id>12972689</id><snippet>import pysomemodule

foo = pysomemodule.ABC("config.txt") # This will create an instance of ABC
</snippet></ROW><ROW><id>12972689</id><snippet>processedImage = foo.doSomething(image) # Where the argument "image" is a OpenCV numpy image.
</snippet></ROW><ROW><id>12972741</id><snippet>SETNX</snippet></ROW><ROW><id>12972741</id><snippet>WATCH</snippet></ROW><ROW><id>12972741</id><snippet>MULTI</snippet></ROW><ROW><id>12972741</id><snippet>EXEC</snippet></ROW><ROW><id>12972741</id><snippet>MULTI</snippet></ROW><ROW><id>12972741</id><snippet>EXEC</snippet></ROW><ROW><id>12972810</id><snippet>import re
urString = "/dev/vg10/lv10:cp:99"
Matches = re.findall("vg[0-9]*", mv)
print Matches
</snippet></ROW><ROW><id>12972810</id><snippet>In [445]: Matches
Out[445]: ['vg10']

In [446]: int(*re.findall(r'[0-9]+', Matches[0]))
Out[446]: 10
</snippet></ROW><ROW><id>12973514</id><snippet>import redis

POOL = redis.ConnectionPool(host='10.0.0.1', port=6379, db=0)

def getVariable(variable_name):
    my_server = redis.Redis(connection_pool=POOL)
    response = my_server.get(variable_name)
    return response

def setVariable(variable_name, variable_value):
    my_server = redis.Redis(connection_pool=POOL)
    my_server.set(variable_name, variable_value)
</snippet></ROW><ROW><id>12974010</id><snippet>import calendar
from datetime import datetime

In [367]: len([1 for i in calendar.monthcalendar(datetime.now().year,
                                  datetime.now().month) if i[6] != 0])
Out[367]: 4
</snippet></ROW><ROW><id>12974013</id><snippet>np.all</snippet></ROW><ROW><id>12974013</id><snippet>np.any</snippet></ROW><ROW><id>12974013</id><snippet>.all</snippet></ROW><ROW><id>12974013</id><snippet>np.all</snippet></ROW><ROW><id>12974091</id><snippet>a = zcat_output.split('\n\n')
a.pop(len(a)-1)
c = dict()
for x in [x.splitlines() for x in a]:
    pkg = ""
    for y in [y for y in x if y.startswith('Package:') or y.startswith('Version:')]:
        z = y.split(':')
        if z[0] == 'Package':
            pkg = z[1].strip()
        else:
            c[pkg] = {z[0]: z[1].strip()}

print c.get('whois')
</snippet></ROW><ROW><id>12974091</id><snippet>{'Version': '5.0.10'}
</snippet></ROW><ROW><id>12974301</id><snippet>res = ",".join([ stemmer.stem(kw) for kw in 'numpang wifi stop gadget shopping'.split(" ")])
</snippet></ROW><ROW><id>12974301</id><snippet>Stemming algorithms attempt to automatically remove suffixes (and in some
cases prefixes) in order to find the "root word" or stem of a given word. This
is useful in various natural language processing scenarios, such as search.
</snippet></ROW><ROW><id>12974437</id><snippet>klantgegevens</snippet></ROW><ROW><id>12974437</id><snippet>&gt;&gt;&gt; klantgegevens
['Slever klopt 42', 'Slever ', ['AVB'], 'klopt 42', 'KD2220115', '17', 'Geachte heer Slever', 'De heer T. Slever', 'info@company.com']
&gt;&gt;&gt; list(klantgegevens[0])
['S', 'l', 'e', 'v', 'e', 'r', ' ', 'k', 'l', 'o', 'p', 't', ' ', '4', '2']
</snippet></ROW><ROW><id>12974437</id><snippet>klantgegevens</snippet></ROW><ROW><id>12974437</id><snippet>import csv
with open('export.csv', 'w') as f:
    writer = csv.writer(f)
    for k,v in l_final:
       info_rest = v[0][:5]+v[0][5:]
       info_combine = map(operator.itemgetter(5),v)
       uniekid = k
       verz = info_combine
       naam = info_rest[0]
       risicoadr = info_rest[2]
       polisnummer = info_rest[3]
       relatienummer = info_rest[4]
       aanhef = info_rest[6]
       contactpersoon = info_rest[7]
       emailadr = info_rest[8]
       klantgegevens = [uniekid,naam,verz,risicoadr,polisnummer,relatienummer,aanhef,contactpersoon,emailadr,]
       writer.writerow(klantgegevens)
</snippet></ROW><ROW><id>12974437</id><snippet>klantgegevens</snippet></ROW><ROW><id>12974437</id><snippet>results = []    
for k,v in l_final:
    # processing
    klantgegevens = [uniekid,naam,verz,risicoadr,polisnummer,relatienummer,aanhef,contactpersoon,emailadr,]
    results.append(klantgegevens)
</snippet></ROW><ROW><id>12974437</id><snippet>import csv
with open('export.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerows(results)
</snippet></ROW><ROW><id>12975073</id><snippet>import csv

with open('your_csv.csv') as f:
  f.readline() # these are headings should remove them
  csv_reader = csv.reader(f, delimiter='\t')
  for line_list in csv_reader:
     # line_list is a list of each row of your csv       
     # line_list[0] Contains 'Name' data   'Napolean'
     # line_list[1] Cotinas Address 'Preston, Idaho'
     # line_list[2] Contains skills 'Bowhunting, Computer Hacking, Drawing Unicorns'
     skills_list = [x.strip() for x in line_list[2].split(',')]
     for skill in skills_list:
        #line_list[0]   line_list[1],   skill


        Napoleon     Preston, Idaho          Bowhunting
        Napoleon     Preston, Idaho          Computer Hacking
        Napoleon     Preston, Idaho          Drawing Unicorns
</snippet></ROW><ROW><id>12975094</id><snippet>set_inconsistent(False)</snippet></ROW><ROW><id>12975130</id><snippet>dict</snippet></ROW><ROW><id>12975130</id><snippet>defaultdict</snippet></ROW><ROW><id>12975130</id><snippet>from collections import defaultdict
dictionary_name = defaultdict(list)
dictionary_name[(year,month,day)].append(data)
#your way would be:  `dictionary_name[year][month][day].append(data)`
</snippet></ROW><ROW><id>12975130</id><snippet>defaultdict</snippet></ROW><ROW><id>12975130</id><snippet>itertools.product</snippet></ROW><ROW><id>12975130</id><snippet>dictionary_name = dict( ( k,[] ) for k in it.product(years,months,days) )
</snippet></ROW><ROW><id>12975130</id><snippet>dictionary_name = { k:[] for k in it.product(years,months,days) }  #py2.7+
</snippet></ROW><ROW><id>12975201</id><snippet> # 72 hours starting with midnight Jan 1st, 2011
 In [1073]: rng = date_range(’1/1/2011’, periods=72, freq=’H’)
</snippet></ROW><ROW><id>12975375</id><snippet>lxml</snippet></ROW><ROW><id>12975375</id><snippet>cElementTree</snippet></ROW><ROW><id>12975375</id><snippet>from lxml import etree
xml_str = "&lt;parent&gt;&lt;child&gt;text&lt;/child&gt;&lt;child&gt;other text&lt;/child&gt;&lt;/parent&gt;"
root = etree.fromstring(xml_str)
print etree.tostring(root, pretty_print=True)
</snippet></ROW><ROW><id>12975516</id><snippet>index</snippet></ROW><ROW><id>12975516</id><snippet>a[index(a,'foo')]
</snippet></ROW><ROW><id>12975516</id><snippet>foo</snippet></ROW><ROW><id>12975679</id><snippet>.dat</snippet></ROW><ROW><id>12975679</id><snippet>#! /usr/bin/python

from contextlib import contextmanager
from itertools import imap, izip
from glob import iglob
from math import sqrt
from sys import exit

@contextmanager
def multi_file_manager(files, mode='rt'):
    files = [open(file, mode) for file in files]
    yield files
    for file in files:
        file.close()

# generator function to read and yield each value from a file
def read_values(file):
    for line in file:
        for value in imap(float, line.split()): # might only need 'int' here
            yield value

# enumerate multiple (egual length) iterables at the same time
def multi_enumerate(start, *iterables):
    return ((n,)+t for n, t in enumerate(izip(*iterables), start)) # returns gen expr

with multi_file_manager(iglob("*.dat")) as files:
    num_files = len(files)
    if num_files &lt; 1:
        print 'no *.dat files found to process'
        exit(1)

    # determine number of rows and cols from first file
    temp = []
    for line in files[0]:
        temp.append(line.split())
    num_rows = len(temp)
    num_cols = len(temp[0])
    files[0].seek(0)  # rewind first file
    print '{} files, each {} rows x {} cols\n'.format(num_files, num_rows, num_cols)
    del temp  # no longer needed

    means = []  # reset
    sigmas = []  # standard deviations
    generators = [read_values(file) for file in files]
    for j in xrange(num_rows):  # main loop
        for i in xrange(num_cols):
            values = map(next, generators)  # next cell value from each file
            mean = float(sum(values)) / num_files
            means.append(mean)
            means_diff_sq = imap(lambda value: (value-mean)**2, values)
            sigma = sqrt(sum(means_diff_sq) / num_files)
            sigmas.append(sigma)

    print 'average (and standard deviation) of values:'
    with open('means.txt', 'wt') as averages:
        for i,mean,sigma in multi_enumerate(0, means, sigmas):
            print '{} ({})'.format(mean, sigma),
            averages.write('{})'.format(mean))
            if i % num_cols != num_cols-1:
                 averages.write(' ')  # delimiter between values on line
            else:
                print  # newline
                averages.write('\n')
</snippet></ROW><ROW><id>12975986</id><snippet>run()</snippet></ROW><ROW><id>12975986</id><snippet>pygame</snippet></ROW><ROW><id>12975986</id><snippet>ESC</snippet></ROW><ROW><id>12976508</id><snippet>from Queue import Queue
from threading import Thread

def worker():
    while True:
        fruit = fruit_queue.get()
        print 'A fruit: ' + fruit
        fruit_queue.task_done()

def main():
    fruits = ['apple', 'orange', 'kiwi', 'banana', 'plum',
              'grape', 'mango', 'cherry', 'lime', 'lemon']

    print 'Printing fruits...'

    for i in range(2):
        t = Thread(target=worker)
        t.daemon = True
        t.start()

    for fruit in fruits:
        fruit_queue.put(fruit)

    fruit_queue.join()
    print 'Finished!'

if __name__ == '__main__':
    fruit_queue = Queue()   
    main()
</snippet></ROW><ROW><id>12976590</id><snippet>In [15]: df
Out[15]: 
   L                  TS         V
0  A 2000-01-01 00:00:00  0.752035
1  A 2000-01-01 04:00:00 -1.047444
2  A 2000-01-01 08:00:00  1.177557
3  B 2000-01-01 12:00:00  0.394590
4  B 2000-01-01 16:00:00  1.835067
5  B 2000-01-01 20:00:00 -0.768274
6  C 2000-01-02 00:00:00 -0.564037
7  C 2000-01-02 04:00:00 -2.644367
8  C 2000-01-02 08:00:00 -0.571187
9  C 2000-01-02 12:00:00  1.618557

In [16]: df.TS.astype(object).min()
Out[16]: datetime.datetime(2000, 1, 1, 0, 0)

In [17]: df.TS.astype(object).max()
Out[17]: datetime.datetime(2000, 1, 2, 12, 0)
</snippet></ROW><ROW><id>12976976</id><snippet>v4l2://</snippet></ROW><ROW><id>12976976</id><snippet>"/dev/my_custom_name"</snippet></ROW><ROW><id>12976976</id><snippet>"v4l2:///dev/my_custom_name"</snippet></ROW><ROW><id>12977081</id><snippet>def flatten(iterable):
   out = []
   for i in iterable:
      if hasattr(i,'__iter__'):
         out.extend(flatten(i))
      else:
         out.append(i)
   return out

l=['a',['b',['c']] ]   
print flatten(l)
</snippet></ROW><ROW><id>12977081</id><snippet>mylist[0]</snippet></ROW><ROW><id>12977342</id><snippet>fruit = 'banana'
colour = 'yellow'
q.put((fruit, colour))
</snippet></ROW><ROW><id>12977669</id><snippet>import sys
import code

preloaded_modules = dict(sys=sys)

code.interact(local=preloaded_modules)
</snippet></ROW><ROW><id>12977669</id><snippet>sys</snippet></ROW><ROW><id>12977669</id><snippet>preloaded_modules</snippet></ROW><ROW><id>12977778</id><snippet>exec()</snippet></ROW><ROW><id>12977778</id><snippet>exec()</snippet></ROW><ROW><id>12977778</id><snippet>compile()</snippet></ROW><ROW><id>12977778</id><snippet>code = compile(file_contents, '/your/filename.py', 'exec')
exec(code, mod.__dict__)
</snippet></ROW><ROW><id>12977945</id><snippet>type=</snippet></ROW><ROW><id>12977945</id><snippet>ArgumentTypeError</snippet></ROW><ROW><id>12977945</id><snippet>import argparse

def textfile(value):
    if not value.endswith('.txt'):
        raise argparse.ArgumentTypeError(
            'argument filename must be of type *.txt')
    return value
</snippet></ROW><ROW><id>12977945</id><snippet>parser.add_argument('filename', ..., type=textfile)
</snippet></ROW><ROW><id>12977971</id><snippet>import web

urls = ( '/upload', 'index')

class index:
    def PUT(self):
        datta = web.data()
        with open("another.xml", "w") as f:
            f.write(datta)
        return "hello"

if __name__ == "__main__":
    app = web.application(urls, globals())
    app.run()
</snippet></ROW><ROW><id>12977971</id><snippet>curl -T somexml.xml http://0.0.0.0:8080/upload
</snippet></ROW><ROW><id>12978206</id><snippet>scipy</snippet></ROW><ROW><id>12978206</id><snippet>as_strided</snippet></ROW><ROW><id>12978206</id><snippet>rot_filters</snippet></ROW><ROW><id>12978206</id><snippet>windows</snippet></ROW><ROW><id>12978206</id><snippet>scipy</snippet></ROW><ROW><id>12978206</id><snippet>import numpy as np
from scipy import ndimage
from numpy.lib import stride_tricks

# pass in `as_strided` as a default arg to save a global lookup
def rotation_matrix2(section, _as_strided=stride_tricks.as_strided):
    section = section.reshape(5, 5)  # sqrt(section.size), sqrt(section.size)
    windows_shape = (3, 3, 3, 3)     # 5 - 3 + 1, 5 - 3 + 1, 3, 3
    windows_strides = section.strides + section.strides
    windows = _as_strided(section, windows_shape, windows_strides)
    rot_filters = windows.reshape(9, 9)
    return rot_filters[rot_filters.std(1).argmin(),:].mean()

def get_rotation_smooth(im, _rm=rotation_matrix2, **kwargs):
    return ndimage.filters.generic_filter(im, _rm, size=5, **kwargs)

if __name__ == '__main__':
    import matplotlib.pyplot as plt
    from scipy.misc import lena
    im = lena()
    im2 = get_rotation_smooth(im)
    #plt.gray()      # Uncomment these lines for
    #plt.imshow(im2) # demo purposes.
    #plt.show()
</snippet></ROW><ROW><id>12978206</id><snippet>rotation_matrix2</snippet></ROW><ROW><id>12978206</id><snippet>windows</snippet></ROW><ROW><id>12978206</id><snippet>def windows(a, w, _as_strided=stride_tricks.as_strided):
    windows_shape = tuple(sa - sw + 1 for sa, sw in zip(a.shape, w))
    windows_shape += w
    windows_strides = a.strides + a.strides
    return _as_strided(a, windows_shape, windows_strides)

def rotation_matrix1(section, _windows=windows):
    rot_filters = windows(section.reshape(5, 5), (3, 3)).reshape(9, 9)
    return rot_filters[rot_filters.std(1).argmin(),:].mean()
</snippet></ROW><ROW><id>12978206</id><snippet>windows</snippet></ROW><ROW><id>12978206</id><snippet>    windows_shape = tuple(sa - sw + 1 for sa, sw in zip(a.shape, w))
</snippet></ROW><ROW><id>12978206</id><snippet>windows</snippet></ROW><ROW><id>12978206</id><snippet>    windows_shape += w
</snippet></ROW><ROW><id>12978206</id><snippet>    windows_strides = a.strides + a.strides
</snippet></ROW><ROW><id>12978206</id><snippet>    return _as_strided(a, windows_shape, windows_strides)
</snippet></ROW><ROW><id>12978238</id><snippet>grsim</snippet></ROW><ROW><id>12978238</id><snippet>if not (isinstance(aut_list, list) and len(aut_list) &gt; 0 and
        isinstance(aut_trans_dict, dict) and
        isinstance(env_states, list) and len(env_states) &gt; 0 and
        isinstance(num_it, int) and isinstance(deterministic_env, bool) and
        isinstance(graph_vis, bool) and isinstance(destfile, str) and
        (label_vars == None or isinstance(label_vars, list)) and
        isinstance(delay, int) and isinstance(vis_depth, int)):
    raise TypeError("Invalid arguments to grsim")
</snippet></ROW><ROW><id>12978238</id><snippet>graph_vis</snippet></ROW><ROW><id>12978238</id><snippet>raw_input</snippet></ROW><ROW><id>12978238</id><snippet>graph_vis = raw_input
</snippet></ROW><ROW><id>12978238</id><snippet>documentation</snippet></ROW><ROW><id>12978238</id><snippet>grsim.grsim(aut_list, aut_trans_dict={}, env_states=[{}], num_it=20, deterministic_env=True, graph_vis=False, destfile='sim_graph.gexf', label_vars=None, delay=2, vis_depth=3)</snippet></ROW><ROW><id>12978625</id><snippet>from google.appengine.ext import ndb

class PhoneUser(ndb.Model):
  number = ndb.StringProperty()
  user = ndb.KeyProperty()

class User(ndb.Model):
  pass

u = User()
u.put()

p = PhoneUser(id='123-456-7890', number='123-456-7890', user=u.key)
p.put()

u2 = User()
u2.put()

p2 = PhoneUser(id='555-555-5555', number='555-555-5555', user=u2.key)

result =  ndb.get_multi([ndb.Key(PhoneUser, '123-456-7890'), ndb.Key(PhoneUser, '555-555-5555')])
</snippet></ROW><ROW><id>12978761</id><snippet>queue = [(Xi, Xk) for Xi in csp.vars
                  for Xk in csp.neighbors[Xi]]
</snippet></ROW><ROW><id>12978761</id><snippet>queue = [(Xi, Xk) for Xi in csp.vars
                      for Xk in csp.neighbors[Xi]]
</snippet></ROW><ROW><id>12978761</id><snippet>queue = [(Xi, Xk) for Xi in csp.vars
                      if condition_one()
                          for Xk in csp.neighbors[Xi]
                              if condition_two()
                                  ... ]
</snippet></ROW><ROW><id>12978822</id><snippet>str[3..-1]
</snippet></ROW><ROW><id>12978893</id><snippet>def worker():
    w = Database_connection()
    sql = "select stars from galaxy"
    for result in  w.db_call(sql, "x", "x", "x", "x"):
        if result:
            jobs = []
            startTime = datetime.now()
            for i in range(1):
               p = multiprocessing.Process(target=worker)
               jobs.append(p)
               p.start()
            print "Runtime: " + str(datetime.now()-startTime)
</snippet></ROW><ROW><id>12978919</id><snippet>multiprocessing</snippet></ROW><ROW><id>12979204</id><snippet>int32</snippet></ROW><ROW><id>12979204</id><snippet>event = prg.test( queue, (10,1), None, a_dev, np.int32(b))
</snippet></ROW><ROW><id>12979304</id><snippet>def SysInfo():
  oldstdout = sys.stdout
  sys.stdout = open("sysinfo.txt","w")
  psutil.test()
  sys.stdout.close()
  sys.stdout = oldstdout
SysInfo()
</snippet></ROW><ROW><id>12979345</id><snippet>def is_match(puzzle,view):
    return all(p == v for p,v in zip(puzzle,view) if v != '^' )
</snippet></ROW><ROW><id>12979345</id><snippet>puzzle</snippet></ROW><ROW><id>12979345</id><snippet>view</snippet></ROW><ROW><id>12979345</id><snippet>p</snippet></ROW><ROW><id>12979345</id><snippet>v</snippet></ROW><ROW><id>12979345</id><snippet>zip</snippet></ROW><ROW><id>12979345</id><snippet>v</snippet></ROW><ROW><id>12979345</id><snippet>'^'</snippet></ROW><ROW><id>12979345</id><snippet>p</snippet></ROW><ROW><id>12979345</id><snippet>puzzle</snippet></ROW><ROW><id>12979345</id><snippet>False</snippet></ROW><ROW><id>12979345</id><snippet>True</snippet></ROW><ROW><id>12979440</id><snippet># Average price across all objects.
&gt;&gt;&gt; from django.db.models import Avg
&gt;&gt;&gt; Result.objects.all().aggregate(Avg('score'))
{'score__avg': 34.35}
</snippet></ROW><ROW><id>12979523</id><snippet>SELECT COUNT(*) FROM Table WHERE user_name = Tom
</snippet></ROW><ROW><id>12979523</id><snippet>user_name</snippet></ROW><ROW><id>12979523</id><snippet>Tom</snippet></ROW><ROW><id>12979523</id><snippet>SELECT COUNT(*) FROM Table WHERE user_name = 'Tom'
</snippet></ROW><ROW><id>12979523</id><snippet>cursor = conn.cursor()
cursor.execute('SELECT COUNT(*) FROM Table WHERE user_name = %s', user_name)
</snippet></ROW><ROW><id>12979523</id><snippet>cursor = conn.cursor()
query = 'SELECT COUNT(*) FROM %s WHERE user_name = %%s' % table_name
cursor.execute(query, user_name)
</snippet></ROW><ROW><id>12979572</id><snippet>__slots__</snippet></ROW><ROW><id>12979572</id><snippet>TypeError</snippet></ROW><ROW><id>12979572</id><snippet>__dict__</snippet></ROW><ROW><id>12979572</id><snippet>class Named(object):
    """Named object mix-in. Not useable directly."""
    def __setattr__(self, name, value):
        if hasattr(self, name):
            raise AttributeError(
                "%r object attribute %r is read-only" %
                (self.__class__.__name__, name))
        else:
            raise AttributeError(
                "Cannot add attribute %r to %r object" %
                (name, self.__class__.__name__))

    def __new__(cls, name, *args):
        self = super(Named, cls).__new__(cls, *args)
        super(Named, self).__setattr__('_name', name)
        return self

    def __str__(self):  # override string conversion to be name
        return self._name

    __repr__ = __str__

class NamedInt(Named, int):
    """NamedInt class. Constructor will return a NamedLong if value is big."""
    def __new__(cls, name, *args):
        value = int(*args) # will raise an exception on invalid arguments
        if isinstance(value, int):
            return super(NamedInt, cls).__new__(cls, name, value)
        elif isinstance(value, long):
            return NamedLong(name, value)

class NamedLong(Named, long):
    """Nothing to see here."""
    pass
</snippet></ROW><ROW><id>12979725</id><snippet>inspect.getmembers(itertools.islice)
</snippet></ROW><ROW><id>12979725</id><snippet>islice</snippet></ROW><ROW><id>12979845</id><snippet>id</snippet></ROW><ROW><id>12979845</id><snippet>__hash__</snippet></ROW><ROW><id>12979845</id><snippet>xx</snippet></ROW><ROW><id>12979845</id><snippet>yy</snippet></ROW><ROW><id>12979845</id><snippet>__hash__</snippet></ROW><ROW><id>12979845</id><snippet>__hash__</snippet></ROW><ROW><id>12979845</id><snippet>class T(object):
    #&lt;snip&gt; ...

    def __hash__(self):
        return hash(self.value)

    #... &lt;/snip&gt;
</snippet></ROW><ROW><id>12979845</id><snippet>self.value</snippet></ROW><ROW><id>12979845</id><snippet>id</snippet></ROW><ROW><id>12979845</id><snippet>xx</snippet></ROW><ROW><id>12979845</id><snippet>id</snippet></ROW><ROW><id>12979845</id><snippet>xx.issubset(yy)</snippet></ROW><ROW><id>12979845</id><snippet>xx</snippet></ROW><ROW><id>12979845</id><snippet>yy</snippet></ROW><ROW><id>12979845</id><snippet>yy</snippet></ROW><ROW><id>12979845</id><snippet>xx-(yy-xx) == xx</snippet></ROW><ROW><id>12979845</id><snippet>(yy - xx)</snippet></ROW><ROW><id>12979845</id><snippet>xx</snippet></ROW><ROW><id>12979845</id><snippet>yy</snippet></ROW><ROW><id>12979845</id><snippet>id</snippet></ROW><ROW><id>12979845</id><snippet>xx - set([]) == xx
</snippet></ROW><ROW><id>12979845</id><snippet>True</snippet></ROW><ROW><id>12979878</id><snippet>#!/usr/bin/python
import sys
from xml_util import XMLReader

def main():

    try:
        xml = XMLReader('test.xml')
        x = xml.getitem('numbers/x')
    print x
        return 0
    except:
        return -1


if __name__ == '__main__':
    sys.exit(main())
</snippet></ROW><ROW><id>12979878</id><snippet>__init__.py</snippet></ROW><ROW><id>12979878</id><snippet>xml_util.XMLReader</snippet></ROW><ROW><id>12979878</id><snippet>from util.xml_util import XMLReader</snippet></ROW><ROW><id>12979913</id><snippet>u''</snippet></ROW><ROW><id>12979913</id><snippet>\u4e25</snippet></ROW><ROW><id>12979913</id><snippet>&gt;&gt;&gt; len(u'\u42e5')
1
&gt;&gt;&gt; len(u'\U00010123')
2
</snippet></ROW><ROW><id>12979913</id><snippet>é</snippet></ROW><ROW><id>12979913</id><snippet>normalize</snippet></ROW><ROW><id>12979913</id><snippet>&gt;&gt;&gt; import unicodedata as ud
&gt;&gt;&gt; ud.name(u'\xe9')
'LATIN SMALL LETTER E WITH ACUTE'
&gt;&gt;&gt; ud.normalize('NFD',u'\xe9')
u'e\u0301'
&gt;&gt;&gt; ud.normalize('NFC',u'e\u0301')
u'\xe9'
</snippet></ROW><ROW><id>12979913</id><snippet>严</snippet></ROW><ROW><id>12979913</id><snippet>&gt;&gt;&gt; u'严'.encode('utf8')
'\xe4\xb8\xa5'
&gt;&gt;&gt; u'严'.encode('gbk')
'\xd1\xcf'
</snippet></ROW><ROW><id>12979913</id><snippet>cp1252</snippet></ROW><ROW><id>12979913</id><snippet>Chinese(PRC)</snippet></ROW><ROW><id>12979913</id><snippet>ANSI</snippet></ROW><ROW><id>12979913</id><snippet>Chinese(PRC)</snippet></ROW><ROW><id>12979913</id><snippet>Chinese(PRC)</snippet></ROW><ROW><id>12979913</id><snippet>UTF-8</snippet></ROW><ROW><id>12979913</id><snippet>&gt;&gt;&gt; u'严'.encode('utf8').decode(
'\xe4\xb8\xa5'
&gt;&gt;&gt; '\xe4\xb8'.decode('gbk')
u'\u6d93'
&gt;&gt;&gt; print '\xe4\xb8'.decode('gbk')
涓
</snippet></ROW><ROW><id>12979913</id><snippet>\xa5</snippet></ROW><ROW><id>12979913</id><snippet>&gt;&gt;&gt; u'严'.encode('utf8').decode('gbk')
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'gbk' codec can't decode byte 0xa5 in position 2: incomplete multibyte sequence
</snippet></ROW><ROW><id>12979958</id><snippet>import datetime
found_datetimes = []
DATE_FORMAT = "%Y-%m-%d"

for item in lista:
    if isinstance(item, datetime.datetime):
        found_datetimes.append(datetime.datetime.strftime(item, DATE_FORMAT))

print found_datetimes
</snippet></ROW><ROW><id>12980120</id><snippet>&lt;childN&gt;</snippet></ROW><ROW><id>12980120</id><snippet>def getText(nodelist):
    rc = []
    for outer in nodelist:
        for node in outer.childNodes:
            if node.nodeType == node.TEXT_NODE:
                rc.append(node.data)
            else:
                print "not text: "+ node.toxml()

    return ''.join(rc)
</snippet></ROW><ROW><id>12980300</id><snippet>import mechanize
import cookielib
import lxml.html as lh
import time  

br = mechanize.Browser()
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)
br.set_handle_equiv(True)
br.set_handle_gzip(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]

while True:
    r = br.open('https://news.google.com/')
    html = r.read()
    doc=lh.fromstring(html)
    for i in doc.xpath('.//*[@class="esc-lead-article-title"]'):
        print i.text_content()
    time.sleep(1800)
</snippet></ROW><ROW><id>12980439</id><snippet>import random

EASY = 'E'
HARD = 'H'
PRIORITY_CONSONANTS = 'tnrslhdcmpfgybwvkqxjz'
EASY_CONSONANTS = '' # what should be here?

def guess_letters(unguessed_consonants, difficulty_level):
    if difficulty_level == EASY:
        search_set = EASY_CONSONANTS
    elif difficulty_level == HARD:
        search_set = PRIORITY_CONSONANTS

    for con in unguessed_consonants:
        if con in search_set:
             return con
</snippet></ROW><ROW><id>12980439</id><snippet>    for con in search_set:
        if con in unguessed_consonants:
             return con
</snippet></ROW><ROW><id>12980575</id><snippet>track.duplicateTo_(newPlaylist)
</snippet></ROW><ROW><id>12980575</id><snippet>iTunes.add_to_</snippet></ROW><ROW><id>12980575</id><snippet>add</snippet></ROW><ROW><id>12980575</id><snippet>duplicate</snippet></ROW><ROW><id>12980575</id><snippet>track.location()</snippet></ROW><ROW><id>12980575</id><snippet>add</snippet></ROW><ROW><id>12980575</id><snippet>copy</snippet></ROW><ROW><id>12980575</id><snippet>duplicate</snippet></ROW><ROW><id>12980575</id><snippet>move</snippet></ROW><ROW><id>12980575</id><snippet>duplicate</snippet></ROW><ROW><id>12980575</id><snippet>tell application "iTunes" to duplicate theTrack to thePlaylist</snippet></ROW><ROW><id>12980575</id><snippet>tell theTrack to duplicate to thePlaylist</snippet></ROW><ROW><id>12980575</id><snippet>duplicate</snippet></ROW><ROW><id>12980575</id><snippet>dir(iTunes)</snippet></ROW><ROW><id>12980575</id><snippet>dir(track)</snippet></ROW><ROW><id>12980575</id><snippet>add_to_</snippet></ROW><ROW><id>12980575</id><snippet>iTunes.add(track, to=newPlaylist)</snippet></ROW><ROW><id>12980575</id><snippet>add theTrack to newPlaylist</snippet></ROW><ROW><id>12980826</id><snippet>from __future__ import print_function

from pyparsing import CharsNotIn, Group, LineEnd, OneOrMore, Word, ZeroOrMore
from pyparsing import delimitedList, nums 

SPACE_CHARS = ' \t'
word = CharsNotIn(SPACE_CHARS)
space = Word(SPACE_CHARS, exact=1)
label = delimitedList(word, delim=space, combine=True)
# an alternative contruction for 'label' could be:
# label = Combine(word + ZeroOrMore(space + word))
value = Word(nums)
line = label('label') + Group(OneOrMore(value))('values') + LineEnd().suppress()

text = """
string                     0            1           10
string with white space    0            10          30
string9 with number 9      10           20          50
string_ with underline     10           50          1
(string with parentese)    50           20          100
""".strip()

print('input text:\n', text, '\nparsed text:\n', sep='\n')
for line_tokens, start_location, end_location in line.scanString(text):
    print(line_tokens.dump())
</snippet></ROW><ROW><id>12980826</id><snippet>input text:

string                     0            1           10
string with white space    0            10          30
string9 with number 9      10           20          50
string_ with underline     10           50          1
(string with parentese)    50           20          100

parsed text:

['string', ['0', '1', '10']]
- label: string
- values: ['0', '1', '10']
['string with white space', ['0', '10', '30']]
- label: string with white space
- values: ['0', '10', '30']
['string9 with number 9', ['10', '20', '50']]
- label: string9 with number 9
- values: ['10', '20', '50']
['string_ with underline', ['10', '50', '1']]
- label: string_ with underline
- values: ['10', '50', '1']
['(string with parentese)', ['50', '20', '100']]
- label: (string with parentese)
- values: ['50', '20', '100']
</snippet></ROW><ROW><id>12980826</id><snippet>label</snippet></ROW><ROW><id>12980826</id><snippet>values</snippet></ROW><ROW><id>12980826</id><snippet>dict</snippet></ROW><ROW><id>12980826</id><snippet>{label: values.asList() for label, values in line.searchString(text)}
</snippet></ROW><ROW><id>12980826</id><snippet>line</snippet></ROW><ROW><id>12980826</id><snippet>text</snippet></ROW><ROW><id>12980826</id><snippet>{'(string with parentese)': ['50', '20', '100'],
 'string': ['0', '1', '10'],
 'string with white space': ['0', '10', '30'],
 'string9 with number 9': ['10', '20', '50'],
 'string_ with underline': ['10', '50', '1']}
</snippet></ROW><ROW><id>12980880</id><snippet>sys._getframe(NUM)</snippet></ROW><ROW><id>12980880</id><snippet>f_lineno</snippet></ROW><ROW><id>12980880</id><snippet>f_code.co_filename</snippet></ROW><ROW><id>12980992</id><snippet>ssh someServer python -u pythonToExecute.py $1 $2 $3
</snippet></ROW><ROW><id>12981215</id><snippet>json.loads(urlobject.read().decode("utf-8"))
</snippet></ROW><ROW><id>12981215</id><snippet>json.load(urlobject)
</snippet></ROW><ROW><id>12981215</id><snippet>def returnJSONQuestion(questionId):
    """return the json question for given question id"""

    url = 'http://answers.yahooapis.com/AnswersService/V1/getQuestion?appid=APPIDREMOVED8&amp;question_id={0}&amp;output=json'
    format_url = url.format(questionId)
    try:
        request = urllib2.Request(format_url)

        # Try to get the data and json.load it 5 times, then give up
        tries = 5
        while tries &gt;= 0:
            try:
                urlobject = urllib2.urlopen(request)
                jsondata = json.load(urlobject)
                print jsondata
                return jsondata
            except:
                if tries == 0:
                    # If we keep failing, raise the exception for the outer exception
                    # handling to deal with
                    raise
                else:
                    # Wait a few seconds before retrying and hope the problem goes away
                    time.sleep(3) 
                    tries -= 1
                    continue

    except urllib2.HTTPError, e:
        print e.code
        logging.exception("Exception")
        raise
    except urllib2.URLError, e:
        print e.reason
        logging.exception("Exception")
        raise
    except(json.decoder.JSONDecodeError,ValueError):
        print 'Question ID ' + questionId + ' Decode JSON has failed'
        logging.info("This qid didn't work " + questionId)
        raise
</snippet></ROW><ROW><id>12981231</id><snippet>@connection.register
class BlogPost(Document):
    __collection__ = 'blog_posts'
    __database__ = 'blog'
    structure = {...}

&gt;&gt;&gt; bp = connection.BlogPost()
</snippet></ROW><ROW><id>12981231</id><snippet>connection</snippet></ROW><ROW><id>12981231</id><snippet>user = User()</snippet></ROW><ROW><id>12981231</id><snippet>connection</snippet></ROW><ROW><id>12981231</id><snippet>user = connection.User()</snippet></ROW><ROW><id>12981340</id><snippet>plt.axis([-0.5, numrots-1 + 0.5, -2, maxval + 2])</snippet></ROW><ROW><id>12981340</id><snippet>matplotlib</snippet></ROW><ROW><id>12981340</id><snippet>pyplot</snippet></ROW><ROW><id>12981340</id><snippet>pyplot</snippet></ROW><ROW><id>12981340</id><snippet>slider</snippet></ROW><ROW><id>12981340</id><snippet>import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

from numpy import uint8
from numpy import uint16
from numpy import uint32
from numpy import uint64

def sizeof(x):
    return 2 ** [uint8, uint16, uint32, uint64].index(x)

def rot(x, i):
    return type(x)((x &gt;&gt; i) | (x &lt;&lt; (sizeof(type(x))*8 - i))) 

def plotShifts(x):
    fig = plt.figure() # make a new figure
    ax = fig.add_axes([0.15, 0.2, 0.65, 0.7]) # add data axes
    origType = type(x)
    maxval = type(x)(-1)

    numrots = sizeof(type(x)) * 8
    vals = [rot(x, type(x)(i)) for i in range(numrots)]

    print vals
    print maxval
    l, = ax.plot(range(numrots), vals, 'ro') # plot to data axes

    axcolor = 'lightgoldenrodyellow'
    inputax = fig.add_axes([0.15, 0.05, 0.65, 0.03], axisbg=axcolor)
    inputsl = Slider(inputax, 'Input', 0, maxval, valinit=0, valfmt="%d")

    def update(x):
        vals = [rot(origType(x), origType(i)) for i in range(numrots)]
        l.set_ydata(vals)
        plt.draw()
    inputsl.on_changed(update)

    ax.set_ylim([-2,maxval +2]) # set ylim on data axes
    ax.set_xlim([-.5,numrots-1+.05]) # set xlim on data axes


    return inputsl

sldr = plotShifts(uint8(1))
plt.show()
</snippet></ROW><ROW><id>12981449</id><snippet>array[x, y, z]</snippet></ROW><ROW><id>12981449</id><snippet>array[x][y][z]</snippet></ROW><ROW><id>12981449</id><snippet>c[200:, 200:, 200:]</snippet></ROW><ROW><id>12981449</id><snippet>c[200:][200:][200:]</snippet></ROW><ROW><id>12981574</id><snippet>findAll</snippet></ROW><ROW><id>12981574</id><snippet>for elem in res.findAll('a'):
    print elem
</snippet></ROW><ROW><id>12981574</id><snippet>.find()</snippet></ROW><ROW><id>12981574</id><snippet>res</snippet></ROW><ROW><id>12981574</id><snippet>for elem in res.findAll('a')[:3]:
    print elem
</snippet></ROW><ROW><id>12981650</id><snippet>           print(roll)
            if (roll == temp):
</snippet></ROW><ROW><id>12981650</id><snippet>if</snippet></ROW><ROW><id>12981650</id><snippet>print</snippet></ROW><ROW><id>12981731</id><snippet>if elem in list</snippet></ROW><ROW><id>12981731</id><snippet>&gt;&gt;&gt; if 1 in [1,2,3,4,5]:
...     print 'found 1'
... 
found 1
</snippet></ROW><ROW><id>12981907</id><snippet>lambda x, m: aDict[x] if (len(aDict[x])==m) else False
</snippet></ROW><ROW><id>12981932</id><snippet>response = response.replace('http://website-a.com', 'http://website-b.com')</snippet></ROW><ROW><id>12982160</id><snippet>child.send("\033[A")  # up
child.send("\033[B")  # down
</snippet></ROW><ROW><id>12982471</id><snippet>csv</snippet></ROW><ROW><id>12982471</id><snippet>import csv

with open("zonechilds.csv", "rb") as fp:
    reader = csv.reader(fp, delimiter=";")
    data = [tuple(line) for line in reader]
</snippet></ROW><ROW><id>12982471</id><snippet>&gt;&gt;&gt; for ip, location, zone, dns in data:
...     print ip, location, zone, dns
... 
200.35.126.30 dnscan01.mnc0004.mcc02de.gprs View_Blackberry DNSCAN01
0.0.0.0 lac.rac.prueba View_Blackberry DNSCAN01
200.35.126.29 dnscan02.mnc0004.mcc02de.gprs View_Blackberry DNSCAN01 
127.0.0.1 localhost.mnc0004.mcc02de.gprs View_Blackberry DNSCAN01
</snippet></ROW><ROW><id>12982539</id><snippet>communicate</snippet></ROW><ROW><id>12982539</id><snippet>child.communicate("1\n1\n")</snippet></ROW><ROW><id>12982539</id><snippet>child = subprocess.Popen("./test.py", stdin=subprocess.PIPE)         

child.stdin.write("1\n")                                                       
child.stdin.write("1\n")
</snippet></ROW><ROW><id>12982753</id><snippet>res = soup.find('span')['title']</snippet></ROW><ROW><id>12982753</id><snippet>res = soup.find('span')
title = res['title']
</snippet></ROW><ROW><id>12982753</id><snippet>res</snippet></ROW><ROW><id>12982753</id><snippet>.find</snippet></ROW><ROW><id>12982849</id><snippet>x</snippet></ROW><ROW><id>12982849</id><snippet>y</snippet></ROW><ROW><id>12982849</id><snippet>def distance(a, b):
    """ 
    Returns distance between `a` and `b`.
    `a` and `b` should have `x` and `y` attributes.
    """

    return math.sqrt((a.x-b.x)**2 + (a.y-b.y)**2)
</snippet></ROW><ROW><id>12982900</id><snippet>obj1, obj2, obj3 = ndb.get_multi([key1, key2, key3])
</snippet></ROW><ROW><id>12982900</id><snippet>filter(None, list)
</snippet></ROW><ROW><id>12982948</id><snippet>&gt;&gt;&gt; s = "-5.65500020981,6.88999986649,-0.454999923706,1,,,-5.65500020981,6.95499992371,-0.454999923706,1,,,"
&gt;&gt;&gt; def getValues(s):
...     output = []
...     while s:
...         # get the three values you want, discard the 3 commas, and the 
...         # remainder of the string
...         v1, v2, v3, _, _, _, s = s.split(',', 6)
...         output.append("%s %s %s" % (v1, v2, v3))
...         
...     return output
&gt;&gt;&gt; getValues(s)
['-5.65500020981 6.88999986649 -0.454999923706', '-5.65500020981 6.95499992371 -0.454999923706']
</snippet></ROW><ROW><id>12982948</id><snippet>&gt;&gt;&gt; def getValuesGen(s):
...     while s:
...         v1, v2, v3, _, _, _, s = s.split(',', 6)
...         yield "%s %s %s" % (v1, v2, v3)
&gt;&gt;&gt; for v in getValuesGen(s):
...     print v
...     
... 
-5.65500020981 6.88999986649 -0.454999923706
-5.65500020981 6.95499992371 -0.454999923706
</snippet></ROW><ROW><id>12982948</id><snippet>,,,</snippet></ROW><ROW><id>12982948</id><snippet>&gt;&gt;&gt; def getValues(s):
...     # split your long string into a list of chunked strings
...     strList = s.split(",,,")
...     for chunk in strList:
...         if chunk:
...         # ...then just parse apart each individual set of data values
...             vals = chunk.split(',')
...             yield "%s %s %s" % (vals[0], vals[1], vals[2])
&gt;&gt;&gt; for v in getValues(s10):
...     print v
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
-5.1  6.8  -0.454
</snippet></ROW><ROW><id>12982949</id><snippet>self.win.saveScreenshot(Filename)</snippet></ROW><ROW><id>12982949</id><snippet>file_name = Filename('whatever.png')) 
self.win.saveScreenshot(file_name) 
</snippet></ROW><ROW><id>12982949</id><snippet>object.setColor(r,g,b,a)</snippet></ROW><ROW><id>12982961</id><snippet># Keeps track of the last "seen" day
lastday=0

# Default 1st day if missing
if 1 not in monthvalues:
  monthvalues[1] = 1.23 #you need a default

# Default 31st day if missing
if 31 not in monthvalues:
  monthvalues[31] = 1.23 #you need a default
</snippet></ROW><ROW><id>12982961</id><snippet># Loop from 1 to 31
for thisday in range(1,32):

  # If we do not encounter thisday in the monthvalues, then skip and keep looping
  if thisday not in monthvalues:
    continue

  # How far ago was the last day seen?
  gap = thisday - lastday

  # If the last day was more than 1 ago, it means there is at least one day amis
  if gap &gt; 1:

    # This is the amount of the last "seen" day
    last_amt = monthvalues[lastday]

    # this is the difference between the current day and the last day
    diff = monthvalues[thisday] - last_amt

    # This is how much you want to interpolate per day in-between
    amt_per_day = diff/gap

    # there is a gap of missing days, let's fill them
    # Start at 1 because we start at the day after the last seen day
    for n in range(1, gap):

      # Fill the missing days with an interpolated value
      monthvalues[lastday+n] = last_amt + amt_per_day * n

  # For the next iteration of the loop, this is the last seen day.
  lastday = thisday
</snippet></ROW><ROW><id>12983387</id><snippet>all(y == first for first in gen for y in gen)
</snippet></ROW><ROW><id>12983387</id><snippet>&gt;&gt;&gt; def test(*args):
...     for a in args:
...         print a,
...         yield a
... 
&gt;&gt;&gt; g = test(1,1,1,1,1,1,1)
&gt;&gt;&gt; print all(a == x for a in g for x in g)
1 1 1 1 1 1 1 True
&gt;&gt;&gt; g = test(1,1,1,2,1,1,1)
&gt;&gt;&gt; print all(a == x for a in g for x in g)
1 1 1 2 False
</snippet></ROW><ROW><id>12983510</id><snippet>plot</snippet></ROW><ROW><id>12983510</id><snippet>0..N-1</snippet></ROW><ROW><id>12983510</id><snippet>p5 = axScatter.plot((0, 1), "r--")
</snippet></ROW><ROW><id>12983510</id><snippet>import numpy as np
import matplotlib.pyplot as plt 

# create some data
xy = np.random.rand(4, 2)
xy_line = (0, 1)

# set up figure and ax
fig, ax = plt.subplots(figsize=(8,8))

# create the scatter plots
ax.scatter(xy[:, 0], xy[:, 1], c='blue')
for point, name in zip(xy, 'ABCD'):
    ax.annotate(name, xy=point, xytext=(0, -10), textcoords='offset points',
                color='blue', ha='center', va='center')
ax.scatter([0], [1], c='black', s=60)
ax.annotate('Perfect Classification', xy=(0, 1), xytext=(0.1, 0.9),
            arrowprops=dict(arrowstyle='-&gt;'))

# create the line
ax.plot(xy_line, 'r--', label='Random guess')
ax.annotate('Better', xy=(0.3, 0.3), xytext=(0.2, 0.4),
            arrowprops=dict(arrowstyle='&lt;-'), ha='center', va='center')
ax.annotate('Worse', xy=(0.3, 0.3), xytext=(0.4, 0.2),
            arrowprops=dict(arrowstyle='&lt;-'), ha='center', va='center')
# add labels, legend and make it nicer
ax.set_xlabel('FPR or (1 - specificity)')
ax.set_ylabel('TPR or sensitivity')
ax.set_title('ROC Space')
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.legend()
plt.tight_layout()
plt.savefig('scatter_line.png', dpi=80)
</snippet></ROW><ROW><id>12983651</id><snippet>bson</snippet></ROW><ROW><id>12983651</id><snippet>pymongo</snippet></ROW><ROW><id>12983651</id><snippet>pymongo</snippet></ROW><ROW><id>12983651</id><snippet>pymongo</snippet></ROW><ROW><id>12983651</id><snippet>bson</snippet></ROW><ROW><id>12983651</id><snippet>bson</snippet></ROW><ROW><id>12984028</id><snippet>total</snippet></ROW><ROW><id>12984028</id><snippet>get_sine_length</snippet></ROW><ROW><id>12984028</id><snippet>get_sine_length</snippet></ROW><ROW><id>12984028</id><snippet>import</snippet></ROW><ROW><id>12984028</id><snippet>get_sine_length</snippet></ROW><ROW><id>12984028</id><snippet>stopping.py</snippet></ROW><ROW><id>12984028</id><snippet>def someFunc():</snippet></ROW><ROW><id>12984028</id><snippet>&gt;&gt;&gt; def func():
...     localVar = "I disappear as soon as func() is finished running."
... 
&gt;&gt;&gt; print localVar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'localVar' is not defined
&gt;&gt;&gt; func()
&gt;&gt;&gt; print localVar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'localVar' is not defined
</snippet></ROW><ROW><id>12984112</id><snippet>import numpy as np

# Demo data.
x = np.array([[1,2,3],
              [2,0,0],
              [1,2,3],
              [3,2,2],
              [2,0,0],
              [2,1,2],
              [3,2,1],
              [2,0,0]])

# View each row as a structure, with field names 'a', 'b' and 'c'.
dt = np.dtype([('a', x.dtype), ('b', x.dtype), ('c', x.dtype)])
y = x.view(dtype=dt).squeeze()

# Now np.unique can be used.  See the `unique` docstring for
# a description of the options.  You might not need `idx` or `inv`.
u, idx, inv = np.unique(y, return_index=True, return_inverse=True)

print "Unique vectors"
print u
</snippet></ROW><ROW><id>12984157</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>12984157</id><snippet>from django_tables2 import *
</snippet></ROW><ROW><id>12984164</id><snippet>ch_a</snippet></ROW><ROW><id>12984164</id><snippet>ch_e</snippet></ROW><ROW><id>12984164</id><snippet>vowels = {
    'a': 0,
    'e': 0,
    'i': 0,
    'o': 0,
    'u': 0
}

vowel_array = ['a', 'o', 'u']

for vowel in vowels.keys():
    if vowel in vowel_array:
        vowels[vowel] += 1

print vowels
</snippet></ROW><ROW><id>12984164</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt;
&gt;&gt;&gt; letters = 'i am a sentence'
&gt;&gt;&gt; Counter(letters)
Counter({' ': 3, 'e': 3, 'a': 2, 'n': 2, 'c': 1, 'i': 1, 'm': 1, 's': 1, 't': 1})
</snippet></ROW><ROW><id>12984221</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>12984221</id><snippet>sh</snippet></ROW><ROW><id>12984221</id><snippet>bash</snippet></ROW><ROW><id>12984221</id><snippet>#!/bin/sh
python myFile.py data.txt
</snippet></ROW><ROW><id>12984418</id><snippet>{% load url from future %}</snippet></ROW><ROW><id>12984418</id><snippet>'</snippet></ROW><ROW><id>12984418</id><snippet>{% url entry 1 %}
</snippet></ROW><ROW><id>12984485</id><snippet>process.env.PORT</snippet></ROW><ROW><id>12984485</id><snippet>process.env.IP</snippet></ROW><ROW><id>12984485</id><snippet>os.environ["PORT"]</snippet></ROW><ROW><id>12984485</id><snippet>os.environ["IP"]</snippet></ROW><ROW><id>12984485</id><snippet>reactor.listenTCP(int(os.environ["PORT"]), site, interface=os.environ["IP"])
</snippet></ROW><ROW><id>12984638</id><snippet>connection.commit()
</snippet></ROW><ROW><id>12984717</id><snippet>authenticate</snippet></ROW><ROW><id>12984717</id><snippet>db.authenticate([USER], [PASSWORD])
</snippet></ROW><ROW><id>12984722</id><snippet>sudo easy_install netifaces
</snippet></ROW><ROW><id>12984722</id><snippet>&gt;&gt;&gt; import netifaces
&gt;&gt;&gt; netifaces.interfaces()
</snippet></ROW><ROW><id>12985127</id><snippet>func([]) =&gt; nothing
func([x, ...]) =&gt; do_stuff(x), func([...])
</snippet></ROW><ROW><id>12985127</id><snippet>def rec_list(l):
    if not l: return # empty list case
    # process l[0]
    return rec_list(l[1:])
</snippet></ROW><ROW><id>12985127</id><snippet>l[1:]</snippet></ROW><ROW><id>12985127</id><snippet>def rev_list(l):
    if not l: return []
    return rev_list(l[1:]) + [l[0]]
</snippet></ROW><ROW><id>12985127</id><snippet>l[::-1]</snippet></ROW><ROW><id>12985268</id><snippet>item</snippet></ROW><ROW><id>12985268</id><snippet>item</snippet></ROW><ROW><id>12985268</id><snippet>[1:]</snippet></ROW><ROW><id>12985268</id><snippet>[:-1]</snippet></ROW><ROW><id>12985268</id><snippet>def lstIndex(lst, item):
    if len(lst) == 0:
        return -1
    elif lst[-1] == item:
        return len(lst) - 1
    else:
        return lstIndex(lst[0:-1], item)
</snippet></ROW><ROW><id>12985268</id><snippet>the_list = [1,2,3,4,5,2]
print lstIndex(the_list, 2)
print lstIndex(the_list, 1)
print lstIndex(the_list, 3)
print lstIndex(the_list, 4)
print lstIndex(the_list, 5)
print lstIndex(the_list, 6)
print lstIndex(the_list, 0)
</snippet></ROW><ROW><id>12985308</id><snippet>def</snippet></ROW><ROW><id>12985308</id><snippet>class Foo(object):
    def method(self, bar):
        def inner(magic):
            class Madness(object):
                def __init__(inself, foo): inself.foo = foo
            return Madness(magic)
        return inner(bar)
</snippet></ROW><ROW><id>12985459</id><snippet>import re

s = re.sub('[^0-9a-zA-Z]+', '*', s)
</snippet></ROW><ROW><id>12985459</id><snippet>&gt;&gt;&gt; re.sub('[^0-9a-zA-Z]+', '*', 'h^&amp;ell`.,|o w]{+orld')
'h*ell*o*w*orld'
</snippet></ROW><ROW><id>12985525</id><snippet>float</snippet></ROW><ROW><id>12985525</id><snippet>a = a.astype('float')
a /= a[2]
</snippet></ROW><ROW><id>12985556</id><snippet>kw = len(s)
k = int(s)
</snippet></ROW><ROW><id>12985556</id><snippet>format</snippet></ROW><ROW><id>12985556</id><snippet>print '{:0{width}}'.format(k, width=kw) # prints 0000120000210000
</snippet></ROW><ROW><id>12985579</id><snippet>i = 0
count = 0
while i &lt; len(S):
    if S[i] == 'a':
        count += 1
    i += 1
print count
</snippet></ROW><ROW><id>12986049</id><snippet>L:local
E:enclosing
G:global
B:built-in
</snippet></ROW><ROW><id>12986049</id><snippet>E</snippet></ROW><ROW><id>12986049</id><snippet>class A:
    def meth(self):
        foo=1
        bar=2
        def func():
            foo=2     # if you place this statement below the print statement then you'll get
                      # UnboundLocalError: local variable 'foo' referenced before assignment
            print foo,bar
        func()    
        print (foo) #meth's foo is unchanged
a=A()
a.meth()
</snippet></ROW><ROW><id>12986049</id><snippet>2 2 
1
</snippet></ROW><ROW><id>12986049</id><snippet>nonlocal</snippet></ROW><ROW><id>12986049</id><snippet>class A:
    def meth(self):
        foo=1
        bar=2
        def func():
            nonlocal foo,bar             
            print (foo,bar)
            foo=2               #changes meth's foo to 2
        func()    
        print (foo)
a=A()
a.meth()
</snippet></ROW><ROW><id>12986049</id><snippet>1 2
2
</snippet></ROW><ROW><id>12986115</id><snippet>def func(my_list, z):

    if z == len(my_list):
        return something
    else:
        # do something else
        return func(my_list, z+1)

z = someValue
print func(my_list, z)    
</snippet></ROW><ROW><id>12986115</id><snippet>list</snippet></ROW><ROW><id>12986225</id><snippet>31</snippet></ROW><ROW><id>12986225</id><snippet>asasa1311</snippet></ROW><ROW><id>12986225</id><snippet>&gt;&gt;&gt; e = ["2311","1441","31","233122"]
&gt;&gt;&gt; r = ["asasa2311","dadewr1441","app"]
&gt;&gt;&gt; [eelem for relem in r for eelem in e if eelem in relem]
['2311', '31', '1441']
</snippet></ROW><ROW><id>12986225</id><snippet>&gt;&gt;&gt; e = ["2311","1441","31","233122"]
&gt;&gt;&gt; r = ["asasa2311","dadewr1441","app"]
&gt;&gt;&gt; [eelem for relem in r for eelem in e if relem.endswith(eelem)]
['2311', '1441']
</snippet></ROW><ROW><id>12986225</id><snippet>&gt;&gt;&gt; e = ["2311","1441","31","233122"]
&gt;&gt;&gt; r = ["asasa2311","dadewr1441","app"]
&gt;&gt;&gt; [eelem for eelem in e if any(r if eelem in relem else False for relem in r)]
['2311', '1441', '31']
</snippet></ROW><ROW><id>12986225</id><snippet>in</snippet></ROW><ROW><id>12986225</id><snippet>&gt;&gt;&gt; [eelem for eelem in e if any(eelem in relem for relem in r)]
['2311', '1441', '31']
</snippet></ROW><ROW><id>12986462</id><snippet>multipart/form-data</snippet></ROW><ROW><id>12986462</id><snippet>#!/usr/bin/env python
import requests # $ pip install requests

file = 'file content as a file object or string'
r = requests.post('http://example.com/SomeName/action.php',
                  files={'file': ('filename.txt', file)},
                  data={'str1': 'string1', 'str2': 'string2'})
print(r.text) # response
</snippet></ROW><ROW><id>12986462</id><snippet>requests.post</snippet></ROW><ROW><id>12986462</id><snippet>POST /SomeName/action.php HTTP/1.1
Host: example.com
Content-Length: 449
Content-Type: multipart/form-data; boundary=f27f8ef67cac403aaaf433f83742bd64
Accept-Encoding: identity, deflate, compress, gzip
Accept: */*

--f27f8ef67cac403aaaf433f83742bd64
Content-Disposition: form-data; name="str2"
Content-Type: text/plain

string2
--f27f8ef67cac403aaaf433f83742bd64
Content-Disposition: form-data; name="str1"
Content-Type: text/plain

string1
--f27f8ef67cac403aaaf433f83742bd64
Content-Disposition: form-data; name="file"; filename="filename.txt"
Content-Type: text/plain

file content as a file object or string
--f27f8ef67cac403aaaf433f83742bd64--
</snippet></ROW><ROW><id>12986462</id><snippet>httplib</snippet></ROW><ROW><id>12986462</id><snippet>#!/usr/bin/env python
import urllib
import requests # $ pip install requests

params = {'str1': 'string1', 'str2': 'string2', 'filename': 'filename.txt'}
file = 'file content as a file object or string, etc'    
url = 'http://example.com/SomeName/action.php?' + urllib.urlencode(params)
r = requests.post(url, data=file, headers={'Content-Type': 'text/plain'})
print(r.text) # response
</snippet></ROW><ROW><id>12986462</id><snippet>POST /SomeName/action.php?str2=string2&amp;str1=string1&amp;filename=filename.txt HTTP/1.1
Host: example.com
Content-Length: 39
Content-Type: text/plain
Accept-Encoding: identity, deflate, compress, gzip
Accept: */*

file content as a file object or string
</snippet></ROW><ROW><id>12986462</id><snippet>httplib</snippet></ROW><ROW><id>12986580</id><snippet>indices</snippet></ROW><ROW><id>12986580</id><snippet>xrange</snippet></ROW><ROW><id>12986580</id><snippet>def __delitem__(self, item):
    if isinstance(item, slice):
        for i in xrange(*item.indices(len(self.l))):
            print i
    else:
        print operator.index(item)
</snippet></ROW><ROW><id>12986580</id><snippet>slice.indices</snippet></ROW><ROW><id>12986580</id><snippet>list.__delitem__</snippet></ROW><ROW><id>12986580</id><snippet>del self.l[i]</snippet></ROW><ROW><id>12986580</id><snippet>operator.index</snippet></ROW><ROW><id>12986580</id><snippet>__delitem__</snippet></ROW><ROW><id>12986944</id><snippet>&lt;DeleteItems tal:repeat="deletions tdelete_list"&gt;</snippet></ROW><ROW><id>12986944</id><snippet>tdelete_list</snippet></ROW><ROW><id>12986944</id><snippet>deletions</snippet></ROW><ROW><id>12986944</id><snippet>deletions</snippet></ROW><ROW><id>12986944</id><snippet>repeat.</snippet></ROW><ROW><id>12986944</id><snippet>&lt;Deleteuser tal:repeat="delete deletions" &gt;

    &lt;Name tal:content="delete.Name"&gt;&lt;/Name&gt;
    &lt;Sirname tal:content="delete.Sirname"&gt;&lt;/Sirname&gt;
     &lt;Friends&gt;
          &lt;Friend tal:repeat="friend delete.Friends"&gt;
                   &lt;Value tal:content="friend"&gt;&lt;/Value&gt;
           &lt;/Friend&gt;
     &lt;/Friends&gt;

&lt;/Deleteuser&gt;
</snippet></ROW><ROW><id>12986944</id><snippet>repeat.deletions</snippet></ROW><ROW><id>12986944</id><snippet>first</snippet></ROW><ROW><id>12986944</id><snippet>last</snippet></ROW><ROW><id>12986944</id><snippet>odd</snippet></ROW><ROW><id>12986944</id><snippet>even</snippet></ROW><ROW><id>12987022</id><snippet>In [6]: a=[[0 for _ in range(rows)] for _ in range(cols)]

In [7]: a[2][1]=a[2][1]+5

In [8]: a
Out[8]: [[0, 0, 0], [0, 0, 0], [0, 5, 0], [0, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>12987022</id><snippet>In [11]: a=[[0] * (rows)] * (cols) 

In [12]: [id(x) for x in a]
Out[12]: [172862444, 172862444, 172862444, 172862444, 172862444] #same id(), i.e same object
</snippet></ROW><ROW><id>12987032</id><snippet>for x in (y for y in items if y &gt; 10):
    ....
</snippet></ROW><ROW><id>12987229</id><snippet>sorted(trial_list, key=trial_dict.get)
</snippet></ROW><ROW><id>12987229</id><snippet>sorted(trial_list, key=lambda x: trial_dict[x])
</snippet></ROW><ROW><id>12987518</id><snippet>my_menu_object.delete(index1, index2=None)
</snippet></ROW><ROW><id>12987788</id><snippet>enumerate()</snippet></ROW><ROW><id>12987788</id><snippet>for i, item in enumerate(items):
     print i, item
</snippet></ROW><ROW><id>12987788</id><snippet>range()</snippet></ROW><ROW><id>12987788</id><snippet>for i in range(len(items)):
     print i
</snippet></ROW><ROW><id>12987788</id><snippet>xrange()</snippet></ROW><ROW><id>12987788</id><snippet>range()</snippet></ROW><ROW><id>12987788</id><snippet>i</snippet></ROW><ROW><id>12987788</id><snippet>1</snippet></ROW><ROW><id>12987788</id><snippet>&gt;&gt;&gt; list(range(0, 5, 2))
[0, 2, 4]
&gt;&gt;&gt; list(range(4, -1, -1))
[4, 3, 2, 1, 0]
</snippet></ROW><ROW><id>12987788</id><snippet>itertools</snippet></ROW><ROW><id>12987788</id><snippet>reversed()</snippet></ROW><ROW><id>12987788</id><snippet>&gt;&gt;&gt; menu = ['spam', 'ham', 'eggs', 'bacon', 'sausage', 'onions']
&gt;&gt;&gt; # Reversed sequence
&gt;&gt;&gt; for dish in reversed(menu):
...     print(dish)
... 
onions
sausage
bacon
eggs
ham
spam
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; # Only every third
&gt;&gt;&gt; for dish in itertools.islice(menu, None, None, 3):
...     print(dish)
... 
spam
bacon
&gt;&gt;&gt; # In groups of 4
&gt;&gt;&gt; for dish in itertools.izip_longest(*([iter(menu)] * 4)):
...     print(dish)
... 
('spam', 'ham', 'eggs', 'bacon')
('sausage', 'onions', None, None)
</snippet></ROW><ROW><id>12987857</id><snippet>$ python
&gt;&gt;&gt; import py_compile
&gt;&gt;&gt; py_compile.compile('server.py')
&gt;&gt;&gt; ^D
$ python ./server.pyc
</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>k-1</snippet></ROW><ROW><id>12987884</id><snippet>n-1</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>    subset(n - 1, k - 1)
</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>#n</snippet></ROW><ROW><id>12987884</id><snippet>n - 1</snippet></ROW><ROW><id>12987884</id><snippet>    subset(n - 1, k)
</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>if k == 0:
    return 1
if n == k:
    return 1
</snippet></ROW><ROW><id>12987884</id><snippet>n &lt; k</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>n = k</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>subset(n - 1, k)</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>n = k</snippet></ROW><ROW><id>12987884</id><snippet>1</snippet></ROW><ROW><id>12987884</id><snippet>n</snippet></ROW><ROW><id>12987884</id><snippet>n = k</snippet></ROW><ROW><id>12987884</id><snippet>k</snippet></ROW><ROW><id>12987884</id><snippet>k = 0</snippet></ROW><ROW><id>12987916</id><snippet>pylab</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib.pylab</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib</snippet></ROW><ROW><id>12987916</id><snippet>numpy</snippet></ROW><ROW><id>12987916</id><snippet>np</snippet></ROW><ROW><id>12987916</id><snippet>scipy</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib</snippet></ROW><ROW><id>12987916</id><snippet>ipython --pylab</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib.pylab</snippet></ROW><ROW><id>12987916</id><snippet>numpy</snippet></ROW><ROW><id>12987916</id><snippet>np</snippet></ROW><ROW><id>12987916</id><snippet>matplotlib</snippet></ROW><ROW><id>12987916</id><snippet>mpl</snippet></ROW><ROW><id>12988156</id><snippet>lambda p: p &lt; T</snippet></ROW><ROW><id>12988156</id><snippet>thresholdedImage.getbbox()</snippet></ROW><ROW><id>12988264</id><snippet>all()</snippet></ROW><ROW><id>12988264</id><snippet>builtins</snippet></ROW><ROW><id>12988264</id><snippet>from builtins import all
</snippet></ROW><ROW><id>12988264</id><snippet>pylab</snippet></ROW><ROW><id>12988264</id><snippet>pylab.all()</snippet></ROW><ROW><id>12988264</id><snippet>import builtins

...

builtins.all()
</snippet></ROW><ROW><id>12988264</id><snippet>import pylab</snippet></ROW><ROW><id>12988264</id><snippet>from pylab import *</snippet></ROW><ROW><id>12988264</id><snippet>pylab</snippet></ROW><ROW><id>12988264</id><snippet>import * from ...</snippet></ROW><ROW><id>12988264</id><snippet>__builtin__</snippet></ROW><ROW><id>12988334</id><snippet>x1</snippet></ROW><ROW><id>12988334</id><snippet>x2</snippet></ROW><ROW><id>12988334</id><snippet>z</snippet></ROW><ROW><id>12988334</id><snippet>for</snippet></ROW><ROW><id>12988334</id><snippet>while</snippet></ROW><ROW><id>12988334</id><snippet>x1 = float(raw_input ('Δωστε το χ1 οπου αρχιζει η μετρηση του ολοκληρωματος \n ')) #greek letters
x2 = float(raw_input ('Δωστε χ2 οπου θελετε να ολοκληρωνεται η μετρηση \n '))
N = int(raw_input('Δωστε τον αριθμο n που θα ειναι το πληθος \n των τραπεζιων που θα χρησιμοπιουνται στη προσσεγγιση  \n '))
z = (x2-x1)/N
x = x1
while x &lt; x2:
    print (z*(f(x)+f(x+z))/2)
    x += z
</snippet></ROW><ROW><id>12988416</id><snippet>&gt;&gt;&gt; d = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}
&gt;&gt;&gt; d1 = dict(d.items()[len(d)/2:])
&gt;&gt;&gt; d2 = dict(d.items()[:len(d)/2])
&gt;&gt;&gt; print d1
{'key1': 1, 'key5': 5, 'key4': 4}
&gt;&gt;&gt; print d2
{'key3': 3, 'key2': 2}
</snippet></ROW><ROW><id>12988610</id><snippet>b = [[1,2,3],[4,5,6],[1,4,5], [4,7,8]]

def create_dict_2(a):
    my_dict = {}
    for index, sublist in enumerate(a):
        for ele in sublist:
            if not ele in my_dict:
                my_dict[ele] = index
    return my_dict
</snippet></ROW><ROW><id>12988610</id><snippet>&gt;&gt;&gt; my_dict = create_dict(b)
&gt;&gt;&gt; my_dict[4]
1
&gt;&gt;&gt; my_dict[5]
1
&gt;&gt;&gt; my_dict[1]
0
&gt;&gt;&gt; my_dict[7]
3
</snippet></ROW><ROW><id>12988662</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; stuff = '[["hiya"]]'
&gt;&gt;&gt; js = json.loads(stuff)
&gt;&gt;&gt; str(js[0][0])
'hiya'
</snippet></ROW><ROW><id>12988793</id><snippet>gpg --homedir SOMEDIR</snippet></ROW><ROW><id>12988841</id><snippet>fuzzy</snippet></ROW><ROW><id>12988841</id><snippet>True</snippet></ROW><ROW><id>12988841</id><snippet>default</snippet></ROW><ROW><id>12988841</id><snippet>fuzzy</snippet></ROW><ROW><id>12988841</id><snippet>False</snippet></ROW><ROW><id>12988849</id><snippet>try:
    pos = my_list.index('pear')
    print my_list[pos + 1]
    # orange
except IndexError as e:
    pass # original value didn't exist or was end of list, so what's +1 mean?
</snippet></ROW><ROW><id>12988849</id><snippet>from itertools import tee
fst, snd = tee(iter(my_list))
next(snd, None)
d = dict(zip(fst, snd))
</snippet></ROW><ROW><id>12989113</id><snippet>import traceback, sys

class C:
    def __init__(self):
        try:
            raise StopIteration
        except StopIteration:
            tb = sys.exc_info()[2]
            stack = traceback.extract_stack(tb.tb_frame)
            f = stack[-2]
            print "I was called from %s %s (%s:%s)" % (f[2], f[3], f[0], f[1])

class A:
    def __init__(self):
        self.c = C()

def foo():
    A()
    return C()

def main():
    C()
    foo()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12989113</id><snippet>I was called from main C() (test.py:22)
I was called from __init__ self.c = C() (test.py:15)
I was called from foo return C() (test.py:19)
</snippet></ROW><ROW><id>12989206</id><snippet>class Test(object):
    def __init__(self):
        self.a = (1,2,3,4,5,6,7,8,9)
        self.b = (10,20,30,40,50,60,70,80,90)
        self.c = (-1,-2,-3,-4,-5,-6,-7,-8,-9)

    def iter_over(self, *args):
        items = [getattr(self, arg) for arg in args]
        return zip(*items)

t = Test()
for a, c in t.iter_over('a', 'c'):
    print a, c

1 -1
2 -2
3 -3
4 -4
5 -5
6 -6
7 -7
8 -8
9 -9
</snippet></ROW><ROW><id>12989206</id><snippet>for items in t.iter_over('c', 'b', 'a'):
    print items[1] # will be b (or 2nd passed above) etc...
</snippet></ROW><ROW><id>12989308</id><snippet>str.decode('string_escape')</snippet></ROW><ROW><id>12989308</id><snippet>&gt;&gt;&gt; '\\t'.decode('string_escape')
'\t'
</snippet></ROW><ROW><id>12989308</id><snippet>unicode_escape</snippet></ROW><ROW><id>12989308</id><snippet>&gt;&gt;&gt; '\\t'.encode().decode('unicode_escape')
'\t'
</snippet></ROW><ROW><id>12989308</id><snippet>&gt;&gt;&gt; '\\t\\n\\u2665'.encode().decode('unicode_escape')
'\t\n♥'
</snippet></ROW><ROW><id>12989335</id><snippet>Grid</snippet></ROW><ROW><id>12989335</id><snippet>Overlay</snippet></ROW><ROW><id>12989411</id><snippet>blogs</snippet></ROW><ROW><id>12989411</id><snippet>import re
# Sample input for the following code.
blogs = ["This is a blog.","This is another blog.","Cats? Cats are awesome."]
# This is a list that will contain dictionaries counting the wordcounts for each blog
wordcount = []
# This is a list of all unique words in all blogs.
wordlist = []
# Consider each blog sequentially
for blog in blogs:
    # Remove all the non-alphanumeric, non-whitespace characters,
    # and then split the string at all whitespace after converting to lowercase.
    # eg: "That's not mine." -&gt; "Thats not mine" -&gt; ["thats","not","mine"]
    words = re.sub("\s+"," ",re.sub("[^\w\s]","",blog)).lower().split(" ")
    # Add a new dictionary to the list. As it is at the end,
    # it can be referred to by wordcount[-1]
    wordcount.append({})
    # Consider each word in the list generated above.
    for word in words:
        # If that word has been encountered before, increment the count
        if word in wordcount[-1]: wordcount[-1][word]+=1
        # Else, create a new entry in the dictionary
        else: wordcount[-1][word]=1
        # If it is not already in the list of unique words, add it.
        if word not in wordlist: wordlist.append(word)

# We now have wordlist, which has a unique list of all words in all blogs.
# and wordcount, which contains len(blogs) dictionaries, containing word counts.
# Matrix is the table that you need of wordcounts. The number of rows will be
# equal to the number of unique words, and the number of columns = no. of blogs.
matrix = []
# Consider each word in the unique list of words (corresponding to each row)
for word in wordlist:
    # Add as many columns as there are blogs, all initialized to zero.
    matrix.append([0]*len(wordcount))
    # Consider each blog one by one
    for i in range(len(wordcount)):
        # Check if the currently selected word appears in that blog
        if word in wordcount[i]:
            # If yes, increment the counter for that blog/column
            matrix[-1][i]+=wordcount[i][word]

# For printing matrix, first generate the column headings
temp = "\t"
for i in range(len(blogs)):
    temp+="Blog "+str(i+1)+"\t"

print temp
# Then generate each row, with the word at the starting, and tabs between numbers.

for i in range(len(matrix)):
    temp = wordlist[i]+"\t"
    for j in matrix[i]: temp += str(j)+"\t"
    print temp
</snippet></ROW><ROW><id>12989411</id><snippet>matrix[i][j]</snippet></ROW><ROW><id>12989411</id><snippet>wordlist[i]</snippet></ROW><ROW><id>12989411</id><snippet>blogs[j]</snippet></ROW><ROW><id>12989545</id><snippet>for filename in filenames:
    for line in open(filename):
        if any(word in line for word in words):
            pass # do something
</snippet></ROW><ROW><id>12989545</id><snippet>words</snippet></ROW><ROW><id>12989624</id><snippet>import csv
with open('output.csv', 'wb') as fout:
    csvout = csv.writer(fout)
    for row in a['rows']:
        csvout.writerow( [row['id']] + row['cell'] )
</snippet></ROW><ROW><id>12989726</id><snippet>var=input("Enter a number between 1 to 10:")
</snippet></ROW><ROW><id>12989726</id><snippet>var</snippet></ROW><ROW><id>12989726</id><snippet>input</snippet></ROW><ROW><id>12989726</id><snippet>raw_input</snippet></ROW><ROW><id>12989726</id><snippet>var = int( input("...") )</snippet></ROW><ROW><id>12989726</id><snippet>in</snippet></ROW><ROW><id>12989726</id><snippet>if var in (1, 2, 3, 4, 5):
    pass
elif var in (6, 7, 8):
    pass
else:
    pass
</snippet></ROW><ROW><id>12989726</id><snippet>if 1 &lt;= var &lt;= 5:
    pass
</snippet></ROW><ROW><id>12989755</id><snippet>CookieMiddleware.py</snippet></ROW><ROW><id>12989755</id><snippet>user = authenticate(token=token)
request.user = user
login(request, user)
</snippet></ROW><ROW><id>12989755</id><snippet>user</snippet></ROW><ROW><id>12989755</id><snippet>None</snippet></ROW><ROW><id>12989755</id><snippet>if request.user:
    login(request, request.user)
</snippet></ROW><ROW><id>12989904</id><snippet>&gt;&gt;&gt; set([1,2,3]).difference([2,3])
set([1])
</snippet></ROW><ROW><id>12989904</id><snippet>misspelled_word_list = list( set(sentence_list).difference(words) )
</snippet></ROW><ROW><id>12989904</id><snippet>for</snippet></ROW><ROW><id>12989904</id><snippet>misspelled_word_list = []
for word in sentence_list:
    if (not word in misspelled_word_list) and (not word in words):
        misspelled_word_list.append(word)
</snippet></ROW><ROW><id>12989904</id><snippet>sentence_list</snippet></ROW><ROW><id>12989904</id><snippet>words</snippet></ROW><ROW><id>12989920</id><snippet>In [20]: df
Out[20]: 
First     A                             B                         
Second  foo       bar       baz       foo       bar       baz     
Third   dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat
0         7    2    9    3    3    0    5    9    8    2    0    6
1         1    4    1    7    2    3    2    3    1    0    4    0
2         6    5    0    6    6    1    5    1    7    4    3    6
3         4    8    1    9    0    3    9    2    3    1    5    9
4         6    1    1    5    1    2    2    6    3    7    2    1

In [21]: rdf = df.stack(['First', 'Third'])

In [22]: rdf['new'] = rdf.foo + rdf.bar

In [23]: rdf
Out[23]: 
Second         bar  baz  foo  new
  First Third                    
0 A     cat      3    0    2    5
        dog      9    3    7   16
  B     cat      2    6    9   11
        dog      8    0    5   13
1 A     cat      7    3    4   11
        dog      1    2    1    2
  B     cat      0    0    3    3
        dog      1    4    2    3
2 A     cat      6    1    5   11
        dog      0    6    6    6
  B     cat      4    6    1    5
        dog      7    3    5   12
3 A     cat      9    3    8   17
        dog      1    0    4    5
  B     cat      1    9    2    3
        dog      3    5    9   12
4 A     cat      5    2    1    6
        dog      1    1    6    7
  B     cat      7    1    6   13
        dog      3    2    2    5

In [24]: rdf.unstack(['First', 'Third'])
Out[24]: 
Second  bar                 baz                 foo                 new               
First     A         B         A         B         A         B         A         B     
Third   cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog
0         3    9    2    8    0    3    6    0    2    7    9    5    5   16   11   13
1         7    1    0    1    3    2    0    4    4    1    3    2   11    2    3    3
2         6    0    4    7    1    6    6    3    5    6    1    5   11    6    5   12
3         9    1    1    3    3    0    9    5    8    4    2    9   17    5    3   12
4         5    1    7    3    2    1    1    2    1    6    6    2    6    7   13    5
</snippet></ROW><ROW><id>12989920</id><snippet>In [28]: rdf.unstack(['First', 'Third']).reorder_levels(['First', 'Second', 'Third'], axis=1).sortlevel(0, axis=1)
Out[28]: 
First     A                                       B                                   
Second  bar       baz       foo       new       bar       baz       foo       new     
Third   cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog  cat  dog
0         3    9    0    3    2    7    5   16    2    8    6    0    9    5   11   13
1         7    1    3    2    4    1   11    2    0    1    0    4    3    2    3    3
2         6    0    1    6    5    6   11    6    4    7    6    3    1    5    5   12
3         9    1    3    0    8    4   17    5    1    3    9    5    2    9    3   12
4         5    1    2    1    1    6    6    7    7    3    1    2    6    2   13    5
</snippet></ROW><ROW><id>12989923</id><snippet>time</snippet></ROW><ROW><id>12989923</id><snippet>if</snippet></ROW><ROW><id>12989923</id><snippet>        time = params[4]
</snippet></ROW><ROW><id>12989923</id><snippet>if</snippet></ROW><ROW><id>12989923</id><snippet>time</snippet></ROW><ROW><id>12990079</id><snippet>pdftk</snippet></ROW><ROW><id>12990079</id><snippet>12.84 0 Td(S)Tj
0.08736 Tc
9 0 Td(e)Tj
0.06816 Tc
0.5 g
7.55999 0 Td(qu)Tj
0.08736 Tc
1 g
16.5599 0 Td(e)Tj
0.06816 Tc
7.55999 0 Td(n)Tj
0.08736 Tc
8.27996 0 Td(c)Tj
-0.03264 Tc
0.13632 Tw
7.55999 0 Td(e )Tj
0.06816 Tc
0 Tw
</snippet></ROW><ROW><id>12990079</id><snippet>pdftk</snippet></ROW><ROW><id>12990079</id><snippet>INDEX R obj
&lt;&lt;
COMMANDS OR DATA
&gt;&gt;
[ stream 
STREAM OF TEXT
endstream ]
endobj
</snippet></ROW><ROW><id>12990079</id><snippet>/Length</snippet></ROW><ROW><id>12990079</id><snippet>/Length</snippet></ROW><ROW><id>12990079</id><snippet>pdftk</snippet></ROW><ROW><id>12990079</id><snippet>Tj</snippet></ROW><ROW><id>12990079</id><snippet>9.95999 0 Td(Hello, world)Tj
</snippet></ROW><ROW><id>12990079</id><snippet>1 g             # Sets color to black (1 in colorspace Gray)
1 0 0 rg        # Sets color to red (1,0,0 in colorspace RGB)
</snippet></ROW><ROW><id>12990079</id><snippet>Tj</snippet></ROW><ROW><id>12990079</id><snippet>RG</snippet></ROW><ROW><id>12990079</id><snippet>Length</snippet></ROW><ROW><id>12990113</id><snippet>import stat#needed for file stat
def remShut(*args):
    func, path, _ = args #onerror returns a tuple containing function, path and     exception info
    os.chmod(path, stat.S_IWRITE)
    os.remove(path)
</snippet></ROW><ROW><id>12990113</id><snippet>import shutil

shutil.rmtree(desiredpath, onerror = remShut)
</snippet></ROW><ROW><id>12990202</id><snippet>import thread, threading

def longjob():
    try:
        # do your job
        while True:
            print '*', 
    except KeyboardInterrupt:
        # do your cleanup
        print 'ok, giving up'

def terminate():
    print 'sorry, pal'
    thread.interrupt_main()

time_limit = 5  # terminate in 5 seconds
threading.Timer(time_limit, terminate).start()
longjob()
</snippet></ROW><ROW><id>12990202</id><snippet>time_limit</snippet></ROW><ROW><id>12990268</id><snippet>wstr_length</snippet></ROW><ROW><id>12990421</id><snippet>QRectF</snippet></ROW><ROW><id>12990421</id><snippet>height()</snippet></ROW><ROW><id>12990421</id><snippet>width()</snippet></ROW><ROW><id>12990421</id><snippet>br = self.svgItem.boundingRect()
w = br.width()
h = br.height()
</snippet></ROW><ROW><id>12990455</id><snippet>x</snippet></ROW><ROW><id>12990455</id><snippet>def evaluate(x, y):
    result = 0
    for i in x:
        result += i * (y**i)
    return result
</snippet></ROW><ROW><id>12990455</id><snippet>&gt;&gt;&gt; x = [3, 2]
&gt;&gt;&gt; for i in x:
...     print i
...
3
2
&gt;&gt;&gt; for i in x:
...     print x[i]
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>12990455</id><snippet>i</snippet></ROW><ROW><id>12990455</id><snippet>x</snippet></ROW><ROW><id>12990455</id><snippet>enumerate()</snippet></ROW><ROW><id>12990455</id><snippet>def evaluate(x, y):
    result = 0
    for i, value in enumerate(x):
        result += value * (y**i)
    return result
</snippet></ROW><ROW><id>12990463</id><snippet>x='iamonlywhoknock BREAKINGBAD\n'.split(" ")
mydict={x[0]:x[1]}
</snippet></ROW><ROW><id>12990584</id><snippet>full_string = 'xxxxxbxxxxx'
if any(s in full_string for s in ('a', 'b')):  
    print 'found'
</snippet></ROW><ROW><id>12990584</id><snippet>import re

full_string = 'xxxxxbxxxxx'
if re.search('a|b', full_string):  
    print 'found'
</snippet></ROW><ROW><id>12990628</id><snippet>string.lower().split()</snippet></ROW><ROW><id>12990628</id><snippet>word,score,std</snippet></ROW><ROW><id>12990628</id><snippet>string</snippet></ROW><ROW><id>12990628</id><snippet>a, b, c = "a b c".split()  # works, 3-item list
a, b, c = "a b".split()  # doesn't work, 2-item list
a, b, c = "a b c d".split()  # doesn't work, 4-item list
</snippet></ROW><ROW><id>12990748</id><snippet>__init__.py</snippet></ROW><ROW><id>12990807</id><snippet>list_a</snippet></ROW><ROW><id>12990807</id><snippet>other_b</snippet></ROW><ROW><id>12990807</id><snippet>def my_comp(my_list, other_list):
    other_cop = other_list[:]
    for x in my_list:
        try:
            other_cop.remove(x)
        except ValueError:
            pass
    return other_cop
</snippet></ROW><ROW><id>12990807</id><snippet>other_list</snippet></ROW><ROW><id>12990807</id><snippet>my_list</snippet></ROW><ROW><id>12990807</id><snippet>other_list</snippet></ROW><ROW><id>12990807</id><snippet>remove</snippet></ROW><ROW><id>12990807</id><snippet>ValueError</snippet></ROW><ROW><id>12990823</id><snippet>-P</snippet></ROW><ROW><id>12990823</id><snippet>make_names.pl</snippet></ROW><ROW><id>12990829</id><snippet>$.post('/django/url/to/your/view', {idToDelete: 'value'}, function(response) {
  // callback
});
</snippet></ROW><ROW><id>12990839</id><snippet>Invite.objects.values_list('email_address', flat=True)</snippet></ROW><ROW><id>12990839</id><snippet>email_address</snippet></ROW><ROW><id>12990839</id><snippet>Invite</snippet></ROW><ROW><id>12990839</id><snippet>all</snippet></ROW><ROW><id>12990839</id><snippet>Invite</snippet></ROW><ROW><id>12990839</id><snippet>InviteForm</snippet></ROW><ROW><id>12990839</id><snippet>ModelForm</snippet></ROW><ROW><id>12990839</id><snippet>Invite</snippet></ROW><ROW><id>12990839</id><snippet>ModelForm.save</snippet></ROW><ROW><id>12990839</id><snippet>invite = form.save()
send_mail(Subject,message.render(Context()),from_email,[invite.email_address])
</snippet></ROW><ROW><id>12990839</id><snippet>send_mail</snippet></ROW><ROW><id>12990839</id><snippet>[invite.email_address]</snippet></ROW><ROW><id>12990839</id><snippet>invite.email_address</snippet></ROW><ROW><id>12990880</id><snippet>fromtimestamp</snippet></ROW><ROW><id>12990880</id><snippet>import datetime, pytz, time

utc = pytz.utc
class DateTime:
    def __init__(self, timezone, epoch):
        self.timezone = timezone
        self.epoch = epoch
        timezoneobject = pytz.timezone(timezone)
        self.datetime = datetime.datetime.fromtimestamp(self.epoch, timezoneobject)

    def hour(self):
        return self.datetime.hour

if __name__=='__main__':
    epoch = time.time()
    dt = DateTime('America/Los_Angeles',epoch)
    print dt.hour()
    dt = DateTime('America/New_York',epoch)
    print dt.hour()
</snippet></ROW><ROW><id>12990880</id><snippet>10
13
</snippet></ROW><ROW><id>12990880</id><snippet>DateTime</snippet></ROW><ROW><id>12990880</id><snippet>datetime</snippet></ROW><ROW><id>12990880</id><snippet>datetime</snippet></ROW><ROW><id>12990969</id><snippet>__radd__(self, other)</snippet></ROW><ROW><id>12990969</id><snippet>+</snippet></ROW><ROW><id>12991131</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# first data set
X1 = np.linspace(0,1,203)
Y1 = np.sin(X1)

# second data set
X2 = np.linspace(0, 0.5, 1532)
Y2 = np.cos(X2)

# get interpolated values of Y1 evaluated at X2
Y1_interp = np.interp(X2, X1, Y1)

# plot interpolated Y1 vs Y2
plt.plot(Y1_interp, Y2)
plt.show()
</snippet></ROW><ROW><id>12991182</id><snippet>for</snippet></ROW><ROW><id>12991182</id><snippet>&gt;&gt;&gt; # Measure some strings:
... words = ['cat', 'window', 'defenestrate']
&gt;&gt;&gt; for w in words:
...     print w, len(w)
...
cat 3
window 6
defenestrate 12
</snippet></ROW><ROW><id>12991182</id><snippet>len</snippet></ROW><ROW><id>12991182</id><snippet>w</snippet></ROW><ROW><id>12991182</id><snippet>len</snippet></ROW><ROW><id>12991182</id><snippet>traveler</snippet></ROW><ROW><id>12991182</id><snippet>go</snippet></ROW><ROW><id>12991182</id><snippet>traveler</snippet></ROW><ROW><id>12991263</id><snippet>import urllib2
from bs4 import BeautifulSoup
response = urllib2.urlopen("http://fantasy.premierleague.com/entry/38861/event-history/8/")
html = response.read()
tablestart = html.find('&lt;!-- pitch view --&gt;') + 19
print tablestart
tableend = html.find('&lt;!-- end ismPitch --&gt;')
print tableend
html = html[tablestart:tableend]
soup = BeautifulSoup(html)
</snippet></ROW><ROW><id>12991263</id><snippet>55594
92366
</snippet></ROW><ROW><id>12991325</id><snippet>struct.unpack()</snippet></ROW><ROW><id>12991325</id><snippet>import struct

def int32(some_bytes):
    return struct.unpack("i", some_bytes)[0]

def int16(some_bytes):
    return struct.unpack("h", some_bytes)[0]
</snippet></ROW><ROW><id>12991325</id><snippet>i</snippet></ROW><ROW><id>12991325</id><snippet>h</snippet></ROW><ROW><id>12991325</id><snippet>I</snippet></ROW><ROW><id>12991325</id><snippet>H</snippet></ROW><ROW><id>12991404</id><snippet>dll_excludes = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', 'tcl84.dll',
                'tk84.dll','MSVCP90.dll']

setup(
    data_files = data_files,
    options = {"py2exe": {"compressed": 2,
                          "optimize": 2,
                          "includes": includes,
                          "excludes": excludes,
                          "packages": packages,
                          "dll_excludes": dll_excludes,
                          "bundle_files": 1,
                          "dist_dir": "dist",
                          "xref": False,
                          "skip_archive": False,
                          "ascii": False,
                          "custom_boot_script": '',
                         }
              },
    zipfile = None,
    windows = [filename]
    )
</snippet></ROW><ROW><id>12991706</id><snippet>from itertools import product
for i in product([0,1], repeat=5): 
    print i
</snippet></ROW><ROW><id>12991706</id><snippet>(0, 0, 0, 0, 0)
(0, 0, 0, 0, 1)
(0, 0, 0, 1, 0)
(0, 0, 0, 1, 1)
(0, 0, 1, 0, 0)
etc...
</snippet></ROW><ROW><id>12991740</id><snippet>config</snippet></ROW><ROW><id>12991740</id><snippet>itemconfig</snippet></ROW><ROW><id>12991740</id><snippet>i = w.create_line(xy, fill="red")

w.coords(i, new_xy) # change coordinates
w.itemconfig(i, fill="blue") # change color
</snippet></ROW><ROW><id>12991913</id><snippet>class Terminal(object)
    def __init__(self, component, node = None):
        self.component = component
        self.node = node

    def connect(self, node):
        node.add_terminal(self)
        self.node = node

    def disconnect(self):
        self.node.remove_terminal(self)
        self.node = None       

class Component(object):
    def __init__(self):
       self._positive = Terminal(self)

    @property
    def positive(self):
        return self._positive

    @positive.setter
    def positive(self, node):
        self._positive.connect(node)

    @positive.deleter
    def positive(self):
        self._positive.disconnect()
</snippet></ROW><ROW><id>12991913</id><snippet>c = Component()
n = Node()

c.positive = n # at this point c.positive.connect(n) thus
               # n.add_terminal(c.positive) is called 
del c.positive # at this point positive is "disconnected" 
               # from the node and vise-versa.
# or disconnect explicitly
c.positive.disconnect()
</snippet></ROW><ROW><id>12991959</id><snippet>with</snippet></ROW><ROW><id>12991959</id><snippet>read()</snippet></ROW><ROW><id>12991959</id><snippet>with open(filename, 'rb') as f:
    while True:
        buffer = f.read(buffer_size)
        if not buffer:
            break
        print buffer  # and do other stuff with it
</snippet></ROW><ROW><id>12992032</id><snippet>def stretch_to(l, n):
    out = [None] * n
    m = len(l)
    for i, x in enumerate(l):
        out[i*(n-1)//(m-1)] = x

    return out
</snippet></ROW><ROW><id>12992032</id><snippet>&gt;&gt;&gt; stretch_to(range(8), 20)
[0, None, 1, None, None, 2, None, None, 3, None, 4, None, None, 5, None, None, 6, None, None, 7]
</snippet></ROW><ROW><id>12992212</id><snippet>my_dict[key] = my_dict.get(key, 0) + num
</snippet></ROW><ROW><id>12992294</id><snippet>preg_replace</snippet></ROW><ROW><id>12992294</id><snippet>/</snippet></ROW><ROW><id>12992294</id><snippet>/i</snippet></ROW><ROW><id>12992294</id><snippet>re</snippet></ROW><ROW><id>12992294</id><snippet>(?flag)</snippet></ROW><ROW><id>12992294</id><snippet>flag</snippet></ROW><ROW><id>12992294</id><snippet>preg_replace</snippet></ROW><ROW><id>12992294</id><snippet>$N</snippet></ROW><ROW><id>12992294</id><snippet>re</snippet></ROW><ROW><id>12992294</id><snippet>\N</snippet></ROW><ROW><id>12992294</id><snippet>/^((shop\.)|(store\.)|(The\s))/i</snippet></ROW><ROW><id>12992294</id><snippet>r'(?i)^((shop\.)|(store\.)|(The\s))'</snippet></ROW><ROW><id>12992683</id><snippet>d.values()</snippet></ROW><ROW><id>12992683</id><snippet>[v[0] for v in d.values()]</snippet></ROW><ROW><id>12992683</id><snippet>sum([v[0] for v in d.values()]) / float(len(d))
</snippet></ROW><ROW><id>12992683</id><snippet>sum(v[0] for v in d.values()) / float(len(d))
</snippet></ROW><ROW><id>12992907</id><snippet>gui = minidom.parse("path to xml").getElementsByTagName('gui')[0]
gui.getElementsByTagName('object')[0].toxml()
</snippet></ROW><ROW><id>12992930</id><snippet>if str(test_url) not in [str(url) for url in list_of_urls]
</snippet></ROW><ROW><id>12992930</id><snippet>__cmp__</snippet></ROW><ROW><id>12992930</id><snippet>__eq__</snippet></ROW><ROW><id>12992930</id><snippet>__ne__</snippet></ROW><ROW><id>12992930</id><snippet>__hash__</snippet></ROW><ROW><id>12992930</id><snippet>set</snippet></ROW><ROW><id>12993247</id><snippet>access_type</snippet></ROW><ROW><id>12993247</id><snippet>offline</snippet></ROW><ROW><id>12993262</id><snippet>pattern = re.compile(r'([a-zA-Z]+)([0-9.]+)')
</snippet></ROW><ROW><id>12993342</id><snippet>&gt;&gt;&gt; d = {"Age": 20, "Nickname": "Jim", "Name": "Fred", "Height": 180}
&gt;&gt;&gt; d.keys()
['Age', 'Nickname', 'Name', 'Height']
</snippet></ROW><ROW><id>12993342</id><snippet>&gt;&gt;&gt; for k in d:
...     print k
... 
Age
Nickname
Name
Height
</snippet></ROW><ROW><id>12993343</id><snippet>import sys

for cnt,v in enumerate(range(250,755,5)):
    if cnt%15==14:
        sys.stdout.write("%d\n" % v)
    else:
        sys.stdout.write("%d " % v)
</snippet></ROW><ROW><id>12993424</id><snippet>def score(s, d):
    included = [d[word][0] for word in d if word in s]
    return sum(included) / float(len(included))
</snippet></ROW><ROW><id>12993691</id><snippet>import thread, time

def takes_a_while():

    def print_status():
        while True:
            print i   # print current i every two seconds
            time.sleep(2)

    status_thread = thread.start_new_thread(print_status, ())
    for i in xrange(10000000):
        print '*',
        time.sleep(0.1)
    status_thread.exit()

takes_a_while()
</snippet></ROW><ROW><id>12993841</id><snippet>int4</snippet></ROW><ROW><id>12993953</id><snippet>inv(K)</snippet></ROW><ROW><id>12993953</id><snippet>P</snippet></ROW><ROW><id>12993953</id><snippet>t = dot(linalg.inv(K), P[:,3])
</snippet></ROW><ROW><id>12993953</id><snippet>P[:,3]</snippet></ROW><ROW><id>12993953</id><snippet>t</snippet></ROW><ROW><id>12993953</id><snippet>P = [KR | Kt]</snippet></ROW><ROW><id>12993953</id><snippet>Kt</snippet></ROW><ROW><id>12993953</id><snippet>inv(K) * Kt = t</snippet></ROW><ROW><id>12993953</id><snippet>P[:,:3]</snippet></ROW><ROW><id>12993953</id><snippet>K</snippet></ROW><ROW><id>12993953</id><snippet>R</snippet></ROW><ROW><id>12993953</id><snippet>P = [KR | Kt]</snippet></ROW><ROW><id>12993953</id><snippet>R</snippet></ROW><ROW><id>12993953</id><snippet>R</snippet></ROW><ROW><id>12993953</id><snippet>K</snippet></ROW><ROW><id>12993953</id><snippet>K</snippet></ROW><ROW><id>12993953</id><snippet>K</snippet></ROW><ROW><id>12993953</id><snippet>t</snippet></ROW><ROW><id>12994132</id><snippet>csrf_exempt</snippet></ROW><ROW><id>12994132</id><snippet>dispatch</snippet></ROW><ROW><id>12994132</id><snippet>condition</snippet></ROW><ROW><id>12994132</id><snippet>self</snippet></ROW><ROW><id>12994132</id><snippet>f = ViewClass.as_view()
f = condition(...)(f)
</snippet></ROW><ROW><id>12994132</id><snippet>condition</snippet></ROW><ROW><id>12994132</id><snippet>as_view</snippet></ROW><ROW><id>12994132</id><snippet>dispatch</snippet></ROW><ROW><id>12994132</id><snippet>def dispatch(self, request, *args, **kwargs):
    @condition(...)
    def _dispatch(request, *args, **kwargs):
        return super(ViewClass, self).dispatch(request, *args, **kwargs)
    return _dispatch(request, *args, **kwargs)
</snippet></ROW><ROW><id>12994207</id><snippet>new_file</snippet></ROW><ROW><id>12994207</id><snippet>new_file</snippet></ROW><ROW><id>12994207</id><snippet>N = 1000
with open('/tmp/out', 'w') as f:
    result = []
    for x in range(10**7):
        result.append('Hi\n')
        if len(result) &gt;= N:
            f.write(''.join(result))
            result = []
</snippet></ROW><ROW><id>12994207</id><snippet>time test.py</snippet></ROW><ROW><id>12994207</id><snippet>N</snippet></ROW><ROW><id>12994207</id><snippet>|      N | time (sec) |
|      1 |      5.879 |
|     10 |      2.781 |
|    100 |      2.417 |
|   1000 |      2.325 |
|  10000 |      2.299 |
| 100000 |      2.309 |
</snippet></ROW><ROW><id>12994252</id><snippet>self.clamp()</snippet></ROW><ROW><id>12994252</id><snippet>v2.clamp()</snippet></ROW><ROW><id>12994252</id><snippet>global name 'clamp' is not defined</snippet></ROW><ROW><id>12994252</id><snippet>class clamp(object):
    pass
</snippet></ROW><ROW><id>12994252</id><snippet>clamp="I am a variable!"
</snippet></ROW><ROW><id>12994252</id><snippet>def clamp():
    print "I am clamp in a function!"
</snippet></ROW><ROW><id>12994290</id><snippet>polls.objects.all()</snippet></ROW><ROW><id>12994290</id><snippet>.all()</snippet></ROW><ROW><id>12994290</id><snippet>&gt;&gt;&gt; from votes.models import polls
&gt;&gt;&gt; poll = polls.objects.all()[2]
&gt;&gt;&gt; poll.title = 'best album'
&gt;&gt;&gt; poll.title
'best album'
&gt;&gt;&gt; another_copy_of_poll = polls.objects.all()[2]
&gt;&gt;&gt; another_copy_of_poll.title
u'best band'
&gt;&gt;&gt; another_copy_of_poll.save()
</snippet></ROW><ROW><id>12994290</id><snippet>&gt;&gt;&gt; from votes.models import polls
&gt;&gt;&gt; poll = polls.objects.all()[2]
&gt;&gt;&gt; poll.title = 'best album'
&gt;&gt;&gt; poll.title
'best band'
&gt;&gt;&gt; poll.save()
</snippet></ROW><ROW><id>12994333</id><snippet>x = [0]*3</snippet></ROW><ROW><id>12994333</id><snippet>[x]*4</snippet></ROW><ROW><id>12994333</id><snippet>x</snippet></ROW><ROW><id>12994333</id><snippet>x</snippet></ROW><ROW><id>12994333</id><snippet>In [193]: a = [[0]*3 for i in range(4)]
</snippet></ROW><ROW><id>12994333</id><snippet>In [194]: a[0][0] = 1

In [195]: a
Out[195]: [[1, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>12994375</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\[*?)', r'\1', 'x[[[y')
'x[[[y'
</snippet></ROW><ROW><id>12994375</id><snippet>'\1'</snippet></ROW><ROW><id>12994375</id><snippet>\1</snippet></ROW><ROW><id>12994375</id><snippet>'\\1'</snippet></ROW><ROW><id>12994375</id><snippet>r'\1'</snippet></ROW><ROW><id>12994391</id><snippet>module = __import__(modname)</snippet></ROW><ROW><id>12994391</id><snippet>module = imp.load_source("__inspected__", path)</snippet></ROW><ROW><id>12994392</id><snippet>one</snippet></ROW><ROW><id>12994392</id><snippet>int('one')</snippet></ROW><ROW><id>12994392</id><snippet>comp_number = random.randrange(0,1)
...
if equation == 0:
    print('Hallo!')
    return 'Computer draws' + comp_number
else:
    return 'Computer draws 0'
</snippet></ROW><ROW><id>12994392</id><snippet>else</snippet></ROW><ROW><id>12994392</id><snippet>comp_number</snippet></ROW><ROW><id>12994392</id><snippet>rand.randrange</snippet></ROW><ROW><id>12994392</id><snippet>choice(range(start, stop, step))</snippet></ROW><ROW><id>12994392</id><snippet>randrange(0,1)</snippet></ROW><ROW><id>12994392</id><snippet>randrange(0,2)</snippet></ROW><ROW><id>12994392</id><snippet>0</snippet></ROW><ROW><id>12994392</id><snippet>1</snippet></ROW><ROW><id>12994392</id><snippet>random.randint(0,1)</snippet></ROW><ROW><id>12994392</id><snippet>0</snippet></ROW><ROW><id>12994392</id><snippet>1</snippet></ROW><ROW><id>12994527</id><snippet>with open(DATA_FILENAME, mode='r', encoding='utf-8') as f:
    json.dump([], f)
</snippet></ROW><ROW><id>12994527</id><snippet>with open(DATA_FILENAME, mode='w', encoding='utf-8') as feedsjson:
    entry = {'name': args.name, 'url': args.url}
    feeds.append(entry)
    json.dump(feeds, feedsjson)
</snippet></ROW><ROW><id>12994527</id><snippet>add</snippet></ROW><ROW><id>12994586</id><snippet>formset</snippet></ROW><ROW><id>12994586</id><snippet>ModelForm</snippet></ROW><ROW><id>12994586</id><snippet>django.forms.models.modelform_factory</snippet></ROW><ROW><id>12994586</id><snippet>&gt;&gt;&gt; from django.forms.models import modelformset_factory
&gt;&gt;&gt; AuthorFormSet = modelformset_factory(Author)
</snippet></ROW><ROW><id>12994656</id><snippet>def bres():
     with open('one.txt') as f:
      x=f.readline().split()
     with open('two.txt') as f:
      cc=f.readline().split()
      ela=set(x)
      elamou=set(cc)
      print elamou&amp;ela
bres()
</snippet></ROW><ROW><id>12994711</id><snippet>ncols = 12
nrows = 8
matrix = [[0] * ncols for i in range(nrows)]
matrix[2][0] = 5 
</snippet></ROW><ROW><id>12994711</id><snippet>matrix</snippet></ROW><ROW><id>12994711</id><snippet>[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>12994711</id><snippet>int_NumbOfColumns</snippet></ROW><ROW><id>12994711</id><snippet>ncols</snippet></ROW><ROW><id>12994711</id><snippet>column_count</snippet></ROW><ROW><id>12994711</id><snippet>matrix = [[0] * ncols for i in range(nrows)]
</snippet></ROW><ROW><id>12994711</id><snippet>matrix = []
for i in range(nrows):
    matrix.append([0] * ncols)
</snippet></ROW><ROW><id>12995085</id><snippet>inspect</snippet></ROW><ROW><id>12995085</id><snippet>class Test(object):
    def a(self):
        pass
    def b(self):
        pass


&gt;&gt;&gt;&gt;inspect.getmembers(Test, inspect.ismethod)
[('a', &lt;unbound method Test.a&gt;), ('b', &lt;unbound method Test.b&gt;)]
&gt;&gt;&gt;&gt;len(_)
2
</snippet></ROW><ROW><id>12995085</id><snippet>import foo
import inspect

for a,b in inspect.getmembers(foo, inspect.isclass):
    print a 
    print len(inspect.getmembers(b, inspect.ismethod))
</snippet></ROW><ROW><id>12995193</id><snippet>class Parent(models.Model):
...

class Child(models.Model):
     parent = models.ForeignKey(Parent)
</snippet></ROW><ROW><id>12995193</id><snippet>Parent.objects.filter(child__in = Childrens.objects.all())
</snippet></ROW><ROW><id>12995273</id><snippet>from multiprocessing import Pool

p = Pool()

def do_inner(outer, limit):
    for inner in xrange(outer, limit):
        sim(outer, inner, ...)

def foo():
    p.map(do_inner, xrange(limit))

foo()
</snippet></ROW><ROW><id>12995273</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12995341</id><snippet>doc.getElementsByTagName('entertainment')[0].getElementsByTagName('title')[0].toxml()
</snippet></ROW><ROW><id>12995346</id><snippet>def hello(x):
    global SHOULD_REPEAT
    print "hello"
    if SHOULD_REPEAT:
        root.after(10, hello) # wait 10ms then repeat
</snippet></ROW><ROW><id>12995368</id><snippet>textfile.write("""
def a_procedure():
    window = Tk()
""")
</snippet></ROW><ROW><id>12995450</id><snippet>(0 to stop)</snippet></ROW><ROW><id>12995450</id><snippet>def gcd(a, b):
   while b != 0:
        c = a % b
        a, b = b, c  # tuple assignment FTW!
        if b == 0:
            break
   return a

while True:
    m = int(input("First number (0 to stop): "))
    if m == 0:
        break
    n = int(input("Second number: "))
    print("The greatest common divisor of {0} and {1} is {2}".format(n, m, abs(gcd(m, n))))
</snippet></ROW><ROW><id>12995544</id><snippet>GET</snippet></ROW><ROW><id>12995544</id><snippet>nytimes.com/api/?MY_API_KEY
</snippet></ROW><ROW><id>12995544</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>12995544</id><snippet>data</snippet></ROW><ROW><id>12995544</id><snippet>POST</snippet></ROW><ROW><id>12995544</id><snippet>nytimes.com/api/
</snippet></ROW><ROW><id>12995544</id><snippet>urllib2</snippet></ROW><ROW><id>12995544</id><snippet>Requests</snippet></ROW><ROW><id>12995544</id><snippet>import requests

api_key = {'api-key': os.environ['NYT_EVENT_LISTING_API_KEY']}
resp = requests.get(url, params=api_key)
print resp.text
print resp.json
</snippet></ROW><ROW><id>12995544</id><snippet>GET</snippet></ROW><ROW><id>12995544</id><snippet>POST</snippet></ROW><ROW><id>12995619</id><snippet>md5</snippet></ROW><ROW><id>12995619</id><snippet>md5</snippet></ROW><ROW><id>12995619</id><snippet>md5</snippet></ROW><ROW><id>12995619</id><snippet>md5</snippet></ROW><ROW><id>12995619</id><snippet>echo -n "robots" | md5sum</snippet></ROW><ROW><id>12995619</id><snippet>27f5e15b6af3223f1176293cd015771d</snippet></ROW><ROW><id>12995619</id><snippet>echo</snippet></ROW><ROW><id>12995619</id><snippet>-n</snippet></ROW><ROW><id>12995619</id><snippet>md5sum -s "robots"</snippet></ROW><ROW><id>12995619</id><snippet>md5 -s "robots"</snippet></ROW><ROW><id>12995619</id><snippet>echo</snippet></ROW><ROW><id>12995619</id><snippet>echo</snippet></ROW><ROW><id>12995619</id><snippet>' '</snippet></ROW><ROW><id>12995619</id><snippet>\n</snippet></ROW><ROW><id>12995678</id><snippet>while</snippet></ROW><ROW><id>12995678</id><snippet>os.path.basename(sourcePath)</snippet></ROW><ROW><id>12995678</id><snippet>True</snippet></ROW><ROW><id>12995678</id><snippet>if</snippet></ROW><ROW><id>12995678</id><snippet>if not os.path.basename(sourcePath)</snippet></ROW><ROW><id>12995678</id><snippet>True</snippet></ROW><ROW><id>12995678</id><snippet>sourcePath = jobPath

# This is executed until os.path.basename(sourcePath) is evaluated as true-ish:
while os.path.basename(sourcePath):
    if os.path.basename(os.path.dirname(sourcePath)).lower() == category.lower():
        break
    else:
        sourcePath = os.path.dirname(sourcePath)

# Then script skips to the remaining part, because os.path.basename(sourcePath)
# has been evaluated as false-ish (see above)

# And then it checks, whether os.path.basename(sourcePath) is false-ish (it is!)
if not os.path.basename(sourcePath):
    print "Error: The download path couldn't be properly determined"
    sys.exit()
</snippet></ROW><ROW><id>12995678</id><snippet>while</snippet></ROW><ROW><id>12995678</id><snippet>break</snippet></ROW><ROW><id>12995678</id><snippet>while</snippet></ROW><ROW><id>12995678</id><snippet>os.path.basename(sourcePath)</snippet></ROW><ROW><id>12995678</id><snippet>while</snippet></ROW><ROW><id>12995678</id><snippet>not os.path.basename(sourcePath)</snippet></ROW><ROW><id>12995678</id><snippet>RuntimeError: maximum recursion depth exceeded</snippet></ROW><ROW><id>12995815</id><snippet>function path = solve_maze(img_file)
  %% Init data
  img = imread(img_file);
  img = rgb2gray(img);
  maze = img &gt; 0;
  start = [985 398];
  finish = [26 399];

  %% Init BFS
  n = numel(maze);
  Q = zeros(n, 2);
  M = zeros([size(maze) 2]);
  front = 0;
  back = 1;

  function push(p, d)
    q = p + d;
    if maze(q(1), q(2)) &amp;&amp; M(q(1), q(2), 1) == 0
      front = front + 1;
      Q(front, :) = q;
      M(q(1), q(2), :) = reshape(p, [1 1 2]);
    end
  end

  push(start, [0 0]);

  d = [0 1; 0 -1; 1 0; -1 0];

  %% Run BFS
  while back &lt;= front
    p = Q(back, :);
    back = back + 1;
    for i = 1:4
      push(p, d(i, :));
    end
  end

  %% Extracting path
  path = finish;
  while true
    q = path(end, :);
    p = reshape(M(q(1), q(2), :), 1, 2);
    path(end + 1, :) = p;
    if isequal(p, start) 
      break;
    end
  end
end
</snippet></ROW><ROW><id>12995898</id><snippet>def extend(base, *others):
    [base + o for o in others] if others else [base]
</snippet></ROW><ROW><id>12995898</id><snippet> extend("project", "/debian", *extend("/usr", *(extend("/bin") + extend("/usr", "/applications", "/icons", "/share"))))
</snippet></ROW><ROW><id>12995898</id><snippet>def commasplit(s):
    start = 0
    level = 0
    for i, c in enumerate(s):
        if c == '{':
            level += 1
        elif c == '}':
            level -= 1
        elif c == ',' and level == 0:
            yield s[start:i]
            start = i+1
    yield s[start:]

def split(s):
    import re
    found = False
    for m in re.finditer("(\{.*\})",s):
        found = True
        for p in commasplit(s[m.start() + 1:m.end() - 1]):
            for i in split(p):
                yield s[:m.start()] + i + s[m.end():]
    if not found:
        yield s

cs = "a,b,c,{d,e,f},g"
print list(commasplit(cs)) # -&gt; seems to work

s = "project/{DEBIAN,usr/{bin,usr/{applications,icons,share}},computer}"
print s
for n, i in enumerate(split(s)): print n, i # -&gt;  as well.
</snippet></ROW><ROW><id>12995923</id><snippet>from django.utils.translation import gettext as _
</snippet></ROW><ROW><id>12995923</id><snippet>Django</snippet></ROW><ROW><id>12995923</id><snippet>python</snippet></ROW><ROW><id>12996094</id><snippet>numpy.where</snippet></ROW><ROW><id>12996094</id><snippet>&gt;&gt;&gt; data
array([[1, 8],
       [3, 4]])
&gt;&gt;&gt; numpy.where( data &gt; 3 )
(array([0, 1]), array([1, 1]))
</snippet></ROW><ROW><id>12996094</id><snippet>&gt;&gt;&gt; data[ numpy.where( data &gt; 3 ) ]
array([8, 4])
</snippet></ROW><ROW><id>12996097</id><snippet>xlrd</snippet></ROW><ROW><id>12996127</id><snippet>undefined</snippet></ROW><ROW><id>12996127</id><snippet>Template</snippet></ROW><ROW><id>12996127</id><snippet>&gt;&gt;&gt; from jinja2 import Template, DebugUndefined
&gt;&gt;&gt; template = Template("{{ var1 }}-{{ var2 }}", undefined=DebugUndefined)
&gt;&gt;&gt; rendered1 = template.render(var1=5) # "5-{{ var2 }}"
&gt;&gt;&gt; print(rendered1)
5-{{ var2 }}
&gt;&gt;&gt; rendered2 = Template(rendered1).render(var2=6) # "5-6"
&gt;&gt;&gt; print(rendered2)
5-6
</snippet></ROW><ROW><id>12996237</id><snippet>Data=[]</snippet></ROW><ROW><id>12996237</id><snippet>Data[0]</snippet></ROW><ROW><id>12996237</id><snippet>IndexError</snippet></ROW><ROW><id>12996237</id><snippet>Data=''.split()

Data[0]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;ipython-input-686-0792b03cbbdf&gt; in &lt;module&gt;()
----&gt; 1 Data[0]

IndexError: list index out of range
</snippet></ROW><ROW><id>12996237</id><snippet>Data</snippet></ROW><ROW><id>12996237</id><snippet>IndexError</snippet></ROW><ROW><id>12996237</id><snippet>f=open('file','r')
temp = []
for row in f.readlines():
    Data = row.split()
    try:
        temp.append(float(Data[0]))
    except IndexError:
        print Data
</snippet></ROW><ROW><id>12996237</id><snippet>with</snippet></ROW><ROW><id>12996237</id><snippet>readlines()</snippet></ROW><ROW><id>12996237</id><snippet>with open(file,'r') as f:        
     for row in f:
         Data = row.split()
         try:
            print Data[0]
         except IndexError:
            print 'You have an empty row'
</snippet></ROW><ROW><id>12996237</id><snippet>import csv
with open('file.csv', 'rb') as f:
    reader = csv.reader(f, delimiter=' ')
    print [row[0] for row in reader if len(row)]
&gt;&gt;&gt; 
['16', '17', '18', '20', '21', '22', '24', '25', '26']
</snippet></ROW><ROW><id>12996328</id><snippet>len(inspect.getsourcelines(a)[0])
</snippet></ROW><ROW><id>12996334</id><snippet>getheaders</snippet></ROW><ROW><id>12996334</id><snippet>get_all</snippet></ROW><ROW><id>12996412</id><snippet>word</snippet></ROW><ROW><id>12996412</id><snippet>word</snippet></ROW><ROW><id>12996412</id><snippet>word_ok = True
dictionary=open("dictionary.txt", encoding="latin2").read().lower().split()
a=raw_input("Competitor 1, letter a:")
b=raw_input("Competitor 2, letter b:")
word=a+b

while word_ok:
        word_ok = False
        for dict_word in dictionary:
            if dict_word.startswith(word):
                word_ok = True
                break
        if word_ok:                                
            a=raw_input("Competitor 1, letter a:")
            word=word+a
            b=raw_input("Competitor 2, letter b:")
            word=word+b
        else:
            break

print("There is no such word" ,word, "in dictionary!")
</snippet></ROW><ROW><id>12996412</id><snippet>encoding</snippet></ROW><ROW><id>12996412</id><snippet>open()</snippet></ROW><ROW><id>12996412</id><snippet>codecs.open()</snippet></ROW><ROW><id>12996412</id><snippet>while</snippet></ROW><ROW><id>12996412</id><snippet>import codecs

dictionary = codecs.open('dictionary.txt','r',encoding='latin2').read().lower().split()

# Word we will build
word = ''

while True:
    letter = raw_input("C1: ")
    word = word + letter
    if not any(known_word.startswith(word) for known_word in dictionary):
        break

    letter = raw_input("C2: ")
    word = word + letter
    if not any(known_word.startswith(word) for known_word in dictionary):
        break

print "There is no such word", word, "in dictionary!"
</snippet></ROW><ROW><id>12996556</id><snippet>django.core.context_processors.request
</snippet></ROW><ROW><id>12996702</id><snippet>request.raw_post_data
</snippet></ROW><ROW><id>12996702</id><snippet>request.POST</snippet></ROW><ROW><id>12996702</id><snippet>request.body</snippet></ROW><ROW><id>12996702</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>12996702</id><snippet>import json

if request.method == "POST":
    data = json.loads(request.raw_post_data)
    print data
</snippet></ROW><ROW><id>12996992</id><snippet>from django.utils.html import strip_tags

template_values = {
     'company_id': company.id
}
template_file = os.path.join(os.path.dirname(__file__), 'templates/email.html')
html = template.render(template_file, template_values)

plain_text = strip_tags(html)
</snippet></ROW><ROW><id>12997198</id><snippet>package_dir = {'': 'src'},
</snippet></ROW><ROW><id>12997237</id><snippet>stdout</snippet></ROW><ROW><id>12997237</id><snippet>stderr</snippet></ROW><ROW><id>12997237</id><snippet>import sys
print "This is " + sys.argv[0]
sys.stdout.flush()
</snippet></ROW><ROW><id>12997334</id><snippet>False</snippet></ROW><ROW><id>12997334</id><snippet>'A' == False</snippet></ROW><ROW><id>12997334</id><snippet>&gt;&gt;&gt; l = []
&gt;&gt;&gt; l is True
False
&gt;&gt;&gt; l is False
False
&gt;&gt;&gt; l == True
False
&gt;&gt;&gt; l == False
False
&gt;&gt;&gt; bool(l) == False
True
</snippet></ROW><ROW><id>12997334</id><snippet>False == False</snippet></ROW><ROW><id>12997334</id><snippet>2 == 2</snippet></ROW><ROW><id>12997334</id><snippet>'A' == 'A'</snippet></ROW><ROW><id>12997334</id><snippet>if l:</snippet></ROW><ROW><id>12997334</id><snippet>False</snippet></ROW><ROW><id>12997334</id><snippet>None</snippet></ROW><ROW><id>12997334</id><snippet>False</snippet></ROW><ROW><id>12997334</id><snippet>''</snippet></ROW><ROW><id>12997334</id><snippet>[]</snippet></ROW><ROW><id>12997334</id><snippet>()</snippet></ROW><ROW><id>12997334</id><snippet>0</snippet></ROW><ROW><id>12997334</id><snippet>0.0</snippet></ROW><ROW><id>12997334</id><snippet>{}</snippet></ROW><ROW><id>12997334</id><snippet>len()</snippet></ROW><ROW><id>12997334</id><snippet>0</snippet></ROW><ROW><id>12997334</id><snippet>&gt;&gt;&gt; def foo():
...   pass
...
&gt;&gt;&gt; bool(foo)
True
</snippet></ROW><ROW><id>12997334</id><snippet>None</snippet></ROW><ROW><id>12997334</id><snippet>&gt;&gt;&gt; def bar():
...   x = 1+1
...
&gt;&gt;&gt; bool(bar)
True
&gt;&gt;&gt; bool(bar())
False
</snippet></ROW><ROW><id>12997337</id><snippet>numpy.array</snippet></ROW><ROW><id>12997337</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]])
array([[ 0.29889882,  0.84955019,  0.52989055,  0.57220576,  0.16841406]])
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; ar = np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]])
&gt;&gt;&gt; ar[:, random.randint(0,4)]
array([ 0.29889882])
&gt;&gt;&gt; ar[:, random.randint(0,4)]
array([ 0.52989055])
</snippet></ROW><ROW><id>12997510</id><snippet>logging-linux.conf</snippet></ROW><ROW><id>12997510</id><snippet>logging-win.conf</snippet></ROW><ROW><id>12997510</id><snippet>FileHandler</snippet></ROW><ROW><id>12997879</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; doc = ET.parse("rgpost.xml")
&gt;&gt;&gt; root = doc.getroot() # &lt;--- this is the new line
&gt;&gt;&gt; root
&lt;Element 'volume' at 0x1004d8f10&gt;
&gt;&gt;&gt; root.keys()
['operation', 'type', 'name']
&gt;&gt;&gt; root.attrib["name"]
'sp'
&gt;&gt;&gt; root.get("name")
'sp'
</snippet></ROW><ROW><id>12998531</id><snippet>tick_params</snippet></ROW><ROW><id>12998531</id><snippet>from matplotlib import pyplot as plt
plt.plot(range(10))
plt.tick_params(\
    axis='x',          # changes apply to the x-axis
    which='both',      # both major and minor ticks are affected
    bottom='off',      # ticks along the bottom edge are off
    top='off',         # ticks along the top edge are off
    labelbottom='off') # labels along the bottom edge are off
plt.show()
plt.savefig('plot')
plt.clf()
</snippet></ROW><ROW><id>12998890</id><snippet>chain</snippet></ROW><ROW><id>12998890</id><snippet>itertools</snippet></ROW><ROW><id>12998890</id><snippet>''.join(chain(sequence, [obj]))
</snippet></ROW><ROW><id>12998890</id><snippet>list</snippet></ROW><ROW><id>12998890</id><snippet>obj</snippet></ROW><ROW><id>12998890</id><snippet>''.join(chain(sequence, repeat(obj,1)))
</snippet></ROW><ROW><id>12998890</id><snippet>[obj]</snippet></ROW><ROW><id>12998890</id><snippet>repeat</snippet></ROW><ROW><id>12998890</id><snippet>list</snippet></ROW><ROW><id>12998924</id><snippet>streamhandler = logging.StreamHandler()
streamhandler.setFormatter(formatter)
memoryhandler = logging.handlers.MemoryHandler(1024*10, logging.DEBUG, streamhandler)
logger.addHandler(memoryhandler)
</snippet></ROW><ROW><id>12998924</id><snippet>logger.addHandler</snippet></ROW><ROW><id>12998984</id><snippet>GdkRGBA color;
GtkStyleContext *style =
    gtk_widget_get_style_context(iconview);
gtk_style_context_get_background_color
    (style, GTK_STATE_FLAG_SELECTED, &amp;color);
</snippet></ROW><ROW><id>12998984</id><snippet>context = self.iconview.get_style_context()
color = context.get_background_color(Gtk.StateFlags.SELECTED)
</snippet></ROW><ROW><id>12998984</id><snippet>GtkStyle</snippet></ROW><ROW><id>12998984</id><snippet>GtkStyleContext</snippet></ROW><ROW><id>12999019</id><snippet>self.value</snippet></ROW><ROW><id>12999019</id><snippet>self.__dict__</snippet></ROW><ROW><id>12999019</id><snippet>class Wrapper:
    def __init__(self, value):
        self.__dict__['value'] = value

    def __setattr__(self, name, value):
        setattr(self.value, name, value)
</snippet></ROW><ROW><id>12999019</id><snippet>object.__setattr__</snippet></ROW><ROW><id>12999019</id><snippet>class Wrapper(object):
    def __init__(self, value):
        object.__setattr__(self, 'value', value)

    def __setattr__(self, name, value):
        setattr(self.value, name, value)
</snippet></ROW><ROW><id>12999087</id><snippet>print</snippet></ROW><ROW><id>12999087</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>12999087</id><snippet>setattr</snippet></ROW><ROW><id>12999087</id><snippet>print</snippet></ROW><ROW><id>12999087</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>12999087</id><snippet>print</snippet></ROW><ROW><id>12999087</id><snippet>print</snippet></ROW><ROW><id>12999121</id><snippet>&lt;!ELEMENT a EMPTY&gt;
&lt;!ATTLIST a xmlns:sru CDATA #IMPLIED&gt;
</snippet></ROW><ROW><id>12999123</id><snippet>file.txt</snippet></ROW><ROW><id>12999123</id><snippet>UTF-8 without BOM</snippet></ROW><ROW><id>12999123</id><snippet># encoding: utf-8
import codecs
with codecs.open('file.txt','wb',encoding='utf-8-sig') as f:
    f.write(u'abc莹')
</snippet></ROW><ROW><id>12999123</id><snippet>file.txt</snippet></ROW><ROW><id>12999123</id><snippet>gbk</snippet></ROW><ROW><id>12999123</id><snippet>cp936</snippet></ROW><ROW><id>12999244</id><snippet>User.update</snippet></ROW><ROW><id>12999244</id><snippet>User</snippet></ROW><ROW><id>12999244</id><snippet>user = DBSession.query(User).filter_by(email=email).first()
if user:
    user.password = new_password
</snippet></ROW><ROW><id>12999445</id><snippet>python /users/gcameron/Desktop/map/colorize_svg.py</snippet></ROW><ROW><id>12999445</id><snippet>python</snippet></ROW><ROW><id>12999445</id><snippet>#! /bin/python</snippet></ROW><ROW><id>12999445</id><snippet>#! /path/to/python</snippet></ROW><ROW><id>12999445</id><snippet>/users/gcameron/Desktop/map/colorize_svg.py</snippet></ROW><ROW><id>12999614</id><snippet>regex = re.compile("(aa|bb)+")
</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>aaxaabbxaa</snippet></ROW><ROW><id>12999614</id><snippet>aa,bb,aa</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>x</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>x</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>aa,bb,aa</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>+</snippet></ROW><ROW><id>12999614</id><snippet>aa</snippet></ROW><ROW><id>12999614</id><snippet>bb</snippet></ROW><ROW><id>12999614</id><snippet>regex = re.compile("(aa|bb)")
</snippet></ROW><ROW><id>12999656</id><snippet>runsnake.py</snippet></ROW><ROW><id>12999656</id><snippet>virtualenv</snippet></ROW><ROW><id>12999656</id><snippet>runsnake.py</snippet></ROW><ROW><id>12999656</id><snippet>--no-site-packages</snippet></ROW><ROW><id>12999656</id><snippet>pip freeze</snippet></ROW><ROW><id>12999656</id><snippet>wxPython</snippet></ROW><ROW><id>12999656</id><snippet>virtualenv</snippet></ROW><ROW><id>12999656</id><snippet>virtualenv</snippet></ROW><ROW><id>12999656</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>12999656</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>12999656</id><snippet>python runsnake.py</snippet></ROW><ROW><id>12999730</id><snippet>    #!/usr/bin/env python

    #################################################################################################
    #
    #  createtestcasewithsteps.py -- Create a TestCase, add Test Steps
    #
    USAGE = """
    Usage: createtestcasewithsteps.py
    """
    #################################################################################################

    import sys, os
    from pyral import Rally, rallySettings

    my_server      = "rally1.rallydev.com"
    my_user        = "user@company.com"
    my_password    = "password"
    my_workspace   = "My Workspace"
    my_project     = "My Project"

    rally = Rally(my_server, my_user, my_password, workspace=my_workspace, project=my_project)
    rally.enableLogging('createtestcasewithsteps.log')

    # For a TestCase: Name, Method, Type are required;
    # Workspace cannot be specified in the JSON, it defaults to 
    # the logged in account's Workspace setting
    # The TestCase can optionally be associated to a WorkProduct
    # Project and WorkProduct must be object refs to relevant Rally Entity instances.
    # In this example the WorkProduct is a Defect.

    target_project = rally.getProject()
    target_defect_id = "DE4"
    target_defect   = rally.get('Defect', query='FormattedID = %s' % target_defect_id, instance=True)

    testcase_fields = {
             "Project"     : target_project.ref,
             "WorkProduct" : target_defect.ref,
             "Name"        : "Data Import Automated Test 01",
             "Method"      : "Automated",
             "Type"        : "Regression"
           }

    print "Creating Test Case ..."
    testcase = rally.put('TestCase', testcase_fields)
    print "Created  TestCase: %s   OID: %s" % (testcase.FormattedID, testcase.oid)

    # Add Test Case Steps
    #
    for i in range(3):

        input="Step Input for Step: "+str(i)
        expected_result="Expected Result for Step: "+str(i)

        testcasestep_fields = {
            "TestCase"          : testcase.ref,
            "StepIndex"         : i,
            "Input"             : input,
            "ExpectedResult"    : expected_result
        }

        testcasestep = rally.put('TestCaseStep', testcasestep_fields)
        print "===&gt; Created  TestCaseStep: %s   OID: %s" % (testcasestep.StepIndex, testcasestep.oid)
</snippet></ROW><ROW><id>12999874</id><snippet>'''</snippet></ROW><ROW><id>12999874</id><snippet>"""</snippet></ROW><ROW><id>12999874</id><snippet>'''font-size:12px;fill-rule:nonzero;stroke:#FFFFFF;stroke-opacity:1;
stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none;stroke-linecap:butt;
marker-start:none;stroke-linejoin:bevel;fill:'''
</snippet></ROW><ROW><id>12999936</id><snippet>reduce</snippet></ROW><ROW><id>12999936</id><snippet>f = lambda x, y: (x[0]+x[1]) + (y[0]+y[1])
</snippet></ROW><ROW><id>12999936</id><snippet>f</snippet></ROW><ROW><id>12999936</id><snippet>f</snippet></ROW><ROW><id>12999936</id><snippet>f</snippet></ROW><ROW><id>12999936</id><snippet>int</snippet></ROW><ROW><id>12999936</id><snippet>&gt;&gt;&gt; nums = [(1, 0), (2, 5), (3, 10)]
&gt;&gt;&gt; reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), nums)
(6, 15)
</snippet></ROW><ROW><id>12999936</id><snippet>int</snippet></ROW><ROW><id>12999936</id><snippet>initializer</snippet></ROW><ROW><id>12999936</id><snippet>reduce</snippet></ROW><ROW><id>12999936</id><snippet>int</snippet></ROW><ROW><id>12999936</id><snippet>&gt;&gt;&gt; nums = [(1, 0), (2, 5), (3, 10)]
&gt;&gt;&gt; reduce(lambda acc, y: acc + y[0] + y[1], nums, 0)
21
</snippet></ROW><ROW><id>12999951</id><snippet>&gt;&gt;&gt; all(x in 'tomato' for x in ['t','o','m','a'])
True
&gt;&gt;&gt; all(x in 'potato' for x in ['t','o','m','a'])
False
</snippet></ROW><ROW><id>12999975</id><snippet>600851475143</snippet></ROW><ROW><id>12999975</id><snippet>oddNumbers</snippet></ROW><ROW><id>12999975</id><snippet>600851475143 / 2</snippet></ROW><ROW><id>12999975</id><snippet>odd_list</snippet></ROW><ROW><id>12999975</id><snippet>odd_list = xrange(1, number+1, 2)
</snippet></ROW><ROW><id>13000276</id><snippet>bs4</snippet></ROW><ROW><id>13000276</id><snippet>easy_install</snippet></ROW><ROW><id>13000276</id><snippet>pip</snippet></ROW><ROW><id>13000276</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>13000441</id><snippet>MPI_Sendrecv</snippet></ROW><ROW><id>13000480</id><snippet>open('/users/gcameron/Desktop/map/data.csv')
</snippet></ROW><ROW><id>13000926</id><snippet>&gt;&gt;&gt; b[0:2,0:2] = a
&gt;&gt;&gt; b
array([[ 1.,  2.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 2.,  3.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13000926</id><snippet> +---+---+---+---+---+
 | H | e | l | p | A |
 +---+---+---+---+---+
 0   1   2   3   4   5
-5  -4  -3  -2  -1
</snippet></ROW><ROW><id>13001064</id><snippet>def filetodic():
    d={}
    f = open("file.txt")
    for line in f:
        key  = line.split()
        d[key[0]]= ' '.join(key[1:])
    return d

print filetodic()
</snippet></ROW><ROW><id>13001121</id><snippet>[3942 7236
 4756 8611]
</snippet></ROW><ROW><id>13001153</id><snippet># start redis_call in a background greenlet
g = gevent.spawn(redis_call)

# wait for up to 90 seconds for redis_call to complete
g.join(90)

# if g has finished, kill() is a no-op
# if g is still running, kill() will interrupt it (by raising GreenletExit in it)
# by default, kill() waits for greenlet to exit (which might never happen, 
# if redis_call caught GreenletExit and ignored it). You can also do g.kill(block=False) to
# avoid waiting for killing to complete 
g.kill()
</snippet></ROW><ROW><id>13001328</id><snippet>platform = cl.get_platforms()
my_gpu_devices = platform[0].get_devices(device_type=cl.device_type.GPU)
ctx = cl.Context(devices=my_gpu_devices)
</snippet></ROW><ROW><id>13001328</id><snippet>my_gpu_devices</snippet></ROW><ROW><id>13001328</id><snippet>my_gpu_devices = [platform[0].get_devices(device_type=cl.device_type.GPU)[0]]
</snippet></ROW><ROW><id>13001428</id><snippet>prime_sum</snippet></ROW><ROW><id>13001432</id><snippet>import fileinput

input = fileinput.input()
for line in input:
    for j in range(int(line)):
        solve(*[int(i) for i in input.next().split()])
</snippet></ROW><ROW><id>13001432</id><snippet>import sys

for line in sys.stdin:
    for j in range(int(line)):
        solve(*[int(i) for i in sys.stdin.next().split()])
</snippet></ROW><ROW><id>13001755</id><snippet>def moveCircle(self, event):
    dif = { 
                    "Up":(0,-5),
                    "Down":(0,5),
                    "Left":(-5,0),
                    "Right":(5,0),
            }   
    self.moveCanvas(*(dif[event.keysym]))
    self.canvas.update

def moveCanvas(self, xdif, ydif):
    self.canvas.move("circle", xdif, ydif)
    self.canvas.move("text", xdif, ydif)
    self.x1 += xdif
    self.x2 += xdif
    self.y1 += ydif
    self.y2 += ydif
</snippet></ROW><ROW><id>13001910</id><snippet>T</snippet></ROW><ROW><id>13001910</id><snippet>R</snippet></ROW><ROW><id>13001910</id><snippet>ndimage.affine_transform</snippet></ROW><ROW><id>13001910</id><snippet>T</snippet></ROW><ROW><id>13001910</id><snippet>linalg.inv(R)</snippet></ROW><ROW><id>13001942</id><snippet>twitter</snippet></ROW><ROW><id>13001952</id><snippet>Wrapper</snippet></ROW><ROW><id>13001952</id><snippet>Foo</snippet></ROW><ROW><id>13001952</id><snippet>class Wrapper:
    def __new__(self, wrapped):
        cls = type(wrapped)
        new_type = type(cls.__name__ + '_wrapped', (Wrapper, cls), {})
        return object.__new__(new_type)

    def __init__(self, wrapped):
        self._wrapped = wrapped
    def __getattr__(self, name):
        return getattr(self._wrapped, name)
</snippet></ROW><ROW><id>13001952</id><snippet>&gt;&gt;&gt; foo = Wrapper(Foo(-1))
&gt;&gt;&gt; abs(foo)
1
&gt;&gt;&gt; type(foo)
&lt;class '__main__.Foo_wrapped'&gt;
</snippet></ROW><ROW><id>13001952</id><snippet>object.__getattr__</snippet></ROW><ROW><id>13001952</id><snippet>__setattr__</snippet></ROW><ROW><id>13001952</id><snippet>__init__</snippet></ROW><ROW><id>13001952</id><snippet>__getattr__</snippet></ROW><ROW><id>13001967</id><snippet>__hash__(myNewMyClassObj)</snippet></ROW><ROW><id>13001967</id><snippet>myNewMyClassObj</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>__hash__</snippet></ROW><ROW><id>13001967</id><snippet>__hash__</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>myNewMyClassObj in dict_</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>__hash__</snippet></ROW><ROW><id>13001967</id><snippet>dict_</snippet></ROW><ROW><id>13001967</id><snippet>MyClass</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>__eq__</snippet></ROW><ROW><id>13001967</id><snippet>dict</snippet></ROW><ROW><id>13001967</id><snippet>O(1)</snippet></ROW><ROW><id>13002055</id><snippet>Preferences &gt; Browse Packages &gt; User</snippet></ROW><ROW><id>13002055</id><snippet>import sublime, sublime_plugin

class PositionListener(sublime_plugin.EventListener):
  def on_selection_modified(self,view):
    text = "Position: "
    sels = view.sel()
    for s in sels:
        text += str(s.begin())
        if not s.empty():
            text += "-" + str(s.end()) + " "
    view.set_status('exact_pos', text)
</snippet></ROW><ROW><id>13002165</id><snippet>&gt;&gt;&gt; def print_list_matrix(lst, row_num):
...     for i in range(row_num):
...         print ' '.join(lst[i::row_num])
... 
&gt;&gt;&gt; print_list_matrix(lst, 3)
v1 v4 v7 v10 v13
v2 v5 v8 v11 v14
v3 v6 v9 v12
&gt;&gt;&gt; print_list_matrix(lst, 4)
v1 v5 v9 v13
v2 v6 v10 v14
v3 v7 v11
v4 v8 v12
</snippet></ROW><ROW><id>13002172</id><snippet>backref</snippet></ROW><ROW><id>13002172</id><snippet>attribute_mapped_collection</snippet></ROW><ROW><id>13002172</id><snippet>from sqlalchemy import Column, ForeignKey, Integer, String, Table, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import backref, relationship, sessionmaker
from sqlalchemy.orm.collections import attribute_mapped_collection


Base = declarative_base()


class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, primary_key=True)


a_b_association_table = Table(
    'a_b_association', Base.metadata,
    Column('a_id', Integer, ForeignKey('a.id')),
    Column('b_id', Integer, ForeignKey('b.id'))
)


class B(Base):
    __tablename__ = 'b'

    id = Column(String, primary_key=True)

    a_instances = relationship(
        A,
        backref = backref(
            'b_instances',
            collection_class = attribute_mapped_collection('id'),
        ),
        secondary = a_b_association_table,
        collection_class = attribute_mapped_collection('id'),
    )


engine = create_engine('sqlite://')
Base.metadata.bind = engine
Base.metadata.create_all()

Session = sessionmaker(bind=engine)

session = Session()

a1, a2, a3 = A(id=1), A(id=2), A(id=3)
b1, b2, b3 = B(id='a'), B(id='b'), B(id='c')

session.add_all([a1, a2, a3, b1, b2, b3])
session.flush()

print(a1.b_instances)
print(b1.a_instances)
a1.b_instances[b1.id] = b1
a1.b_instances[b2.id] = b2
b1.a_instances[a1.id] = a1
b1.a_instances[a2.id] = a2
session.flush()
session.expunge_all()
a1 = session.query(A).get(1)
b1 = session.query(B).get('a')
print(a1.b_instances)
print(b1.a_instances)
</snippet></ROW><ROW><id>13002172</id><snippet>{}
{}
{u'a': &lt;__main__.B object at 0x2816490&gt;, u'b': &lt;__main__.B object at 0x28b0350&gt;}
{1: &lt;__main__.A object at 0x28ac9d0&gt;, 2: &lt;__main__.A object at 0x28b0650&gt;}
</snippet></ROW><ROW><id>13002178</id><snippet>sorted</snippet></ROW><ROW><id>13002178</id><snippet>join</snippet></ROW><ROW><id>13002178</id><snippet>'/'.join</snippet></ROW><ROW><id>13002178</id><snippet>join</snippet></ROW><ROW><id>13002178</id><snippet>/</snippet></ROW><ROW><id>13002178</id><snippet>+</snippet></ROW><ROW><id>13002178</id><snippet>tname</snippet></ROW><ROW><id>13002178</id><snippet>writerow</snippet></ROW><ROW><id>13002178</id><snippet>csv.reader</snippet></ROW><ROW><id>13002178</id><snippet>csv.writer</snippet></ROW><ROW><id>13002178</id><snippet>import csv
fi = open('xgroup.csv')
fo = open('xgroup3.csv', 'w')
w = csv.writer(fo)
r = csv.reader(fi)
li = 0
print "Opened reader and writer"
for row in r:
    gname = '/'.join(row[1:])
    sname = '/'.join(sorted(row[1:]))
    tname = '/'.join([row[1]]+sorted(row[2:]))
    w.writerow([row[0], gname, sname, tname]+row[1:])
    li += 1
fi.close()
fo.close()
print "Closed reader and writer after",li,"lines"
</snippet></ROW><ROW><id>13002178</id><snippet>xgroup.csv</snippet></ROW><ROW><id>13002178</id><snippet>unique-ID,person_1,person,_2,person_3,person_4,...,person_20
12,Tom,Sally,Mike
16,Joe,Mike
5,Joe,Sally
1,Sally,Mike,Tom
6,Sally,Tom,Mike
2,Jared,Joe,Mike,John,...,Carl
</snippet></ROW><ROW><id>13002178</id><snippet>Opened reader and writer</snippet></ROW><ROW><id>13002178</id><snippet>Closed reader and writer after 7 lines</snippet></ROW><ROW><id>13002178</id><snippet>xgroup3.csv</snippet></ROW><ROW><id>13002178</id><snippet>unique-ID,person_1/person/_2/person_3/person_4/.../person_20,.../_2/person/person_1/person_20/person_3/person_4,person_1/.../_2/person/person_20/person_3/person_4,person_1,person,_2,person_3,person_4,...,person_20
12,Tom/Sally/Mike,Mike/Sally/Tom,Tom/Mike/Sally,Tom,Sally,Mike
16,Joe/Mike,Joe/Mike,Joe/Mike,Joe,Mike
5,Joe/Sally,Joe/Sally,Joe/Sally,Joe,Sally
1,Sally/Mike/Tom,Mike/Sally/Tom,Sally/Mike/Tom,Sally,Mike,Tom
6,Sally/Tom/Mike,Mike/Sally/Tom,Sally/Mike/Tom,Sally,Tom,Mike
2,Jared/Joe/Mike/John/.../Carl,.../Carl/Jared/Joe/John/Mike,Jared/.../Carl/Joe/John/Mike,Jared,Joe,Mike,John,...,Carl
</snippet></ROW><ROW><id>13002178</id><snippet>5,Joe,Sally,,,,,
</snippet></ROW><ROW><id>13002178</id><snippet>5,Joe,Sally
</snippet></ROW><ROW><id>13002178</id><snippet>5,Joe/Sally/////,/////Joe/Sally,Joe//////Sally,Joe,Sally,,,,,
</snippet></ROW><ROW><id>13002178</id><snippet>5,Joe/Sally,Joe/Sally,Joe/Sally,Joe,Sally
</snippet></ROW><ROW><id>13002178</id><snippet>row=['5', 'Joe', 'Sally', '', '', '', '', '']</snippet></ROW><ROW><id>13002178</id><snippet>'/'.join(row[1:])</snippet></ROW><ROW><id>13002178</id><snippet>'Joe/Sally/////'</snippet></ROW><ROW><id>13002178</id><snippet>'/'.join(filter(lambda x: x, row[1:]))</snippet></ROW><ROW><id>13002178</id><snippet>'/'.join(x for x in row[1:] if x)</snippet></ROW><ROW><id>13002178</id><snippet>'/'.join(filter(len, row[1:]))</snippet></ROW><ROW><id>13002178</id><snippet>'Joe/Sally'</snippet></ROW><ROW><id>13002310</id><snippet>imagePlanes</snippet></ROW><ROW><id>13002310</id><snippet>shape</snippet></ROW><ROW><id>13002310</id><snippet>imageName</snippet></ROW><ROW><id>13002310</id><snippet>imagePlane</snippet></ROW><ROW><id>13002310</id><snippet>camera</snippet></ROW><ROW><id>13002310</id><snippet>imageName</snippet></ROW><ROW><id>13002310</id><snippet>imagePlane</snippet></ROW><ROW><id>13002310</id><snippet>transform</snippet></ROW><ROW><id>13002310</id><snippet>camera</snippet></ROW><ROW><id>13002310</id><snippet>imageName</snippet></ROW><ROW><id>13002310</id><snippet>imagePlanes</snippet></ROW><ROW><id>13002310</id><snippet>import maya.cmds as cmds 

def connectedImgPlanes(dagNode):
    # if we have camera transform then go to camera shape 
    if cmds.nodeType(dagNode) == 'transform':
        dagNode = cmds.listRelatives(dagNode, s=True, c=True)[0]
    if cmds.nodeType(dagNode) != 'camera': 
        cmds.error("%s is not a camera node" %dagNode)

    # get all the imageplane nodes connected to image plane
    sourceConnections = cmds.listConnections(dagNode + '.imagePlane', source = True, type = 'imagePlane') or []

    # collect all the 'imageName(s)' into a list and return it
    imageNames = []
    for lc in sourceConnections:
       atribVal=cmds.getAttr(lc+".imageName")
       imageNames.append(atribVal)
    return imageNames
</snippet></ROW><ROW><id>13002451</id><snippet>for</snippet></ROW><ROW><id>13002451</id><snippet>GET_ITER</snippet></ROW><ROW><id>13002451</id><snippet>FOR_ITER</snippet></ROW><ROW><id>13002451</id><snippet>FOR_ITER</snippet></ROW><ROW><id>13002451</id><snippet>StopIteration</snippet></ROW><ROW><id>13002451</id><snippet>tp_iternext</snippet></ROW><ROW><id>13002451</id><snippet>NULL</snippet></ROW><ROW><id>13002451</id><snippet>for</snippet></ROW><ROW><id>13002451</id><snippet>line</snippet></ROW><ROW><id>13002591</id><snippet>config.add_route('path::a', 'path/a')
config.add_route('path::b', 'path/b')
</snippet></ROW><ROW><id>13002591</id><snippet>class ViewClass(handlerClass):
    @view_config(renderer="/path.mako",route_name="path::a")
    @view_config(renderer="/path.mako",route_name="path::b")
    def path(self):
        return {'project':'MyApp'}
</snippet></ROW><ROW><id>13002722</id><snippet>itertools</snippet></ROW><ROW><id>13002722</id><snippet>list</snippet></ROW><ROW><id>13002722</id><snippet>tabulate</snippet></ROW><ROW><id>13002722</id><snippet>def tabulate(function, start=0):
    "Return function(0), function(1), ..."
    return imap(function, count(start))
</snippet></ROW><ROW><id>13002722</id><snippet>def tabulate(function, start=0):
    i = start
    while True:
        yield function(i)
        i += 1
</snippet></ROW><ROW><id>13002722</id><snippet>chain(sequence, [obj])</snippet></ROW><ROW><id>13002722</id><snippet>chain(sequence, (obj,))</snippet></ROW><ROW><id>13002722</id><snippet>python -m timeit</snippet></ROW><ROW><id>13002722</id><snippet>repeat(foo, 1)</snippet></ROW><ROW><id>13002722</id><snippet>[foo]</snippet></ROW><ROW><id>13002882</id><snippet>entryBox = tk.Entry(mainWindow, textvariable=v).grid(column=0, row=1)
</snippet></ROW><ROW><id>13002882</id><snippet>None</snippet></ROW><ROW><id>13002882</id><snippet>entryBox</snippet></ROW><ROW><id>13002882</id><snippet>tk.Entry(mainWindow, textvariable=v)</snippet></ROW><ROW><id>13002882</id><snippet>grid</snippet></ROW><ROW><id>13002882</id><snippet>entryBox</snippet></ROW><ROW><id>13002894</id><snippet>$ /usr/bin/ssh root@localhost -t 'sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches'
$ /usr/bin/time python2.4 myscript.py 'cat big_file'
timeout
done
0.01user 0.63system 0:05.16elapsed 12%CPU 

$ /usr/bin/ssh root@localhost -t 'sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches'
$ /usr/bin/time cat big_file &gt;/dev/null
0.02user 0.82system 0:09.93elapsed 8%CPU
</snippet></ROW><ROW><id>13002894</id><snippet>$ /usr/bin/time python2.4 myscript.py 'while : ; do sleep 1; done'
timeout
done
0.02user 0.00system 0:05.03elapsed 0%CPU
</snippet></ROW><ROW><id>13002894</id><snippet>time.time()</snippet></ROW><ROW><id>13002894</id><snippet>time.clock()</snippet></ROW><ROW><id>13002894</id><snippet>time.monotonic()</snippet></ROW><ROW><id>13002894</id><snippet>ctypes</snippet></ROW><ROW><id>13002894</id><snippet>#!/usr/bin/env python2.4
import os
import signal
import sys
import tempfile
import time
from subprocess import Popen

class TimeoutExpired(Exception):
    pass

def wait(process, timeout, _sleep_time=.1):
    for _ in xrange(int(timeout * 1. / _sleep_time + .5)):
        time.sleep(_sleep_time)  # NOTE: assume it doesn't wake up earlier
        if process.poll() is not None:
            return process.wait()
    raise TimeoutExpired  # NOTE: timeout precision is not very good

f = tempfile.TemporaryFile() 
p = Popen(["/bin/bash", "-c", sys.argv[1]], stdout=f, preexec_fn=os.setsid,
          close_fds=True)
try:
    wait(p, timeout=5)
except TimeoutExpired:
    print &gt;&gt;sys.stderr, "timeout"
    os.killpg(os.getpgid(p.pid), signal.SIGKILL)
    p.wait()
else:
    f.seek(0)
    for line in f:
        print line,
f.close()  # delete it
print &gt;&gt;sys.stderr, "done"
</snippet></ROW><ROW><id>13002907</id><snippet>print len(k.staff_job_categories.all())</snippet></ROW><ROW><id>13002907</id><snippet>0</snippet></ROW><ROW><id>13002907</id><snippet>1</snippet></ROW><ROW><id>13002907</id><snippet>0</snippet></ROW><ROW><id>13002907</id><snippet>1</snippet></ROW><ROW><id>13002907</id><snippet>staff = Staff.objects.all().order_by('person__full_name')
for k in staff:
    categories = k.staff_job_categories.all()
    if len(categories) &lt; 2:
        continue
    categ = categories[1]
    if categ.name == unicode("xxx","utf-8"):
        t = categ.name
</snippet></ROW><ROW><id>13003019</id><snippet>key:5</snippet></ROW><ROW><id>13003019</id><snippet>In [56]: class Test1:
   ....:        x=set()
   ....:    y={}
   ....: 

In [57]: hamster=Test1()

In [58]: chinchilla=Test1()

In [59]: hamster.x.add('hi')  # now both sets in both instances have 'hi'

In [60]: hamster.y['key']=5

In [62]: hamster.x,chinchilla.x
Out[62]: (set(['hi']), set(['hi']))

In [63]: hamster.y,chinchilla.y
Out[63]: ({'key': 5}, {'key': 5})
</snippet></ROW><ROW><id>13003019</id><snippet>In [65]: Test1.x
Out[65]: set(['hi'])

In [66]: Test1.y
Out[66]: {'key': 5}
</snippet></ROW><ROW><id>13003019</id><snippet>In [71]: class Test1():
    def __init__(self):
        self.x=set()
        self.y={}
   ....:         
   ....:         

In [75]: hamster=Test1()

In [76]: chinchilla=Test1()

In [77]: hamster.x.add('hi')

In [78]: chinchilla.x.add('bye')

In [79]: hamster.x
Out[79]: set(['hi'])

In [81]: chinchilla.x
Out[81]: set(['bye'])


In [82]: hamster.y['key']=5

In [83]: hamster.y,chinchilla.y
Out[83]: ({'key': 5}, {})
</snippet></ROW><ROW><id>13003175</id><snippet>print()</snippet></ROW><ROW><id>13003175</id><snippet>In [3]: from __future__ import print_function

In [4]: print("Hello","World", sep="***")
Hello***World
</snippet></ROW><ROW><id>13003338</id><snippet>import json

json.dumps({'image_base64':  
    base64.b64encode(file(image_filename).read())})
</snippet></ROW><ROW><id>13003346</id><snippet>dest in smaller.keys()</snippet></ROW><ROW><id>13003346</id><snippet>dest not in smaller.keys()</snippet></ROW><ROW><id>13003346</id><snippet>False</snippet></ROW><ROW><id>13003346</id><snippet>True</snippet></ROW><ROW><id>13003346</id><snippet>if (dest not in smaller.keys()):
</snippet></ROW><ROW><id>13003346</id><snippet>in</snippet></ROW><ROW><id>13003346</id><snippet>not in</snippet></ROW><ROW><id>13003396</id><snippet>@classmethod</snippet></ROW><ROW><id>13003396</id><snippet>@classmethod</snippet></ROW><ROW><id>13003440</id><snippet>tornado.web.Application</snippet></ROW><ROW><id>13003440</id><snippet>ui_methods</snippet></ROW><ROW><id>13003440</id><snippet>def trim_string(data):
    return data[0:20]
</snippet></ROW><ROW><id>13003440</id><snippet>import tornado.ioloop
import tornado.web

import ui_methods

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.render("main.html")


urls = [(r"/", MainHandler)]
application = tornado.web.Application(urls, ui_methods=ui_methods)

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>13003440</id><snippet>....
{{ trim_string('a string that is too long............') }}
....
</snippet></ROW><ROW><id>13003522</id><snippet>def get_columns(table_name, cursor):
    cursor.execute('pragma table_info(%s)' % table_name)
    return [row[1] for row in cursor]

conn = sqlite3.connect('test.db')
columns = get_columns('test_table',conn.cursor())
</snippet></ROW><ROW><id>13003522</id><snippet>def prepend(column, reference, prefix, cursor):
    query = '''
        UPDATE %s
        SET %s = 'prefix' || %s
        WHERE %s IN (SELECT %s FROM %s)
    ''' % (table, column, column, column, reference, table)
    cursor.execute(query)

reference = 'field1'
[prepend('test_table', column, reference, '555', conn.cursor()) 
    for column in columns 
    if column != reference]
</snippet></ROW><ROW><id>13003539</id><snippet>import os
def crawl(fname):
    with open(fname, "r") as infile:
        print("Visiting {}".format(fname))
        if os.stat(fname).st_size:
            lines = infile.read().splitlines()
            for line in lines:
                crawl(line)
</snippet></ROW><ROW><id>13003653</id><snippet>n</snippet></ROW><ROW><id>13003653</id><snippet>def pascalLine(n):
    newValue=1
    row = [newValue]
    for i in range (n):
          newValue = (newValue * (n-i)) / ( i + 1 )
          row.append(newValue)
  print(row)
  print()
</snippet></ROW><ROW><id>13003683</id><snippet>melt</snippet></ROW><ROW><id>13003683</id><snippet>pandas.core.reshape</snippet></ROW><ROW><id>13003683</id><snippet>In [52]: melted = reshape.melt(df, id_vars=['DateTime', 'ColumnName'])

In [53]: melted.set_index(['DateTime', 'ColumnName', 'variable']).value.unstack([1, 2])
Out[53]: 
ColumnName                  Percent_Used  Current_Count      Max  Percent_Used  Current_Count      Max  Percent_Used  Current_Count      Max
variable                             Min            Min      Min           Avg            Avg      Avg           Max            Max      Max
DateTime                                                                                                                                    
2012-10-14 11:29:23.810000            24         254503  1048576            24         254503  1048576            24         254503  1048576
2012-10-14 11:34:23.813000            24         254116  1048576            24         254116  1048576            24         254116  1048576
</snippet></ROW><ROW><id>13003775</id><snippet>np.array</snippet></ROW><ROW><id>13003775</id><snippet>reshape</snippet></ROW><ROW><id>13003775</id><snippet>&gt;&gt;&gt; np.array([[[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]]]).reshape((4,4))
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
</snippet></ROW><ROW><id>13003815</id><snippet>import collections
import string
c = collections.defaultdict(collections.Counter)
speaker = None

with open('/tmp/spam.txt') as f:
  for line in f:
    if not line.strip():
      # we're on an empty line, the last guy has finished blabbing
      speaker = None
      continue
    if line.count(' ') == 0 and line.strip().endswith(':'):
      # a new guy is talking now, you might want to refine this event
      speaker = line.strip()[:-1]
      continue
    c[speaker].update(x.strip(string.punctuation).lower() for x in line.split())
</snippet></ROW><ROW><id>13003815</id><snippet>In [1]: run /tmp/spam.py

In [2]: c.keys()
Out[2]: [None, 'Abraham', 'Gregory', 'Sampson']

In [3]: c['Gregory'].most_common(10)
Out[3]: 
[('the', 7),
 ('thou', 6),
 ('to', 6),
 ('of', 4),
 ('and', 4),
 ('art', 3),
 ('is', 3),
 ('it', 3),
 ('no', 3),
 ('i', 3)]
</snippet></ROW><ROW><id>13003841</id><snippet>{{ tags|join(' ') }}
</snippet></ROW><ROW><id>13003874</id><snippet>ditto</snippet></ROW><ROW><id>13003874</id><snippet>ditto --rsrc --arch i386 dist/MyApp.app dist/MyApp-32.app
</snippet></ROW><ROW><id>13003874</id><snippet>MyApp-32.app</snippet></ROW><ROW><id>13003874</id><snippet>ditto</snippet></ROW><ROW><id>13003956</id><snippet>x, y = (image &gt; limit).nonzero()
vals = image[x, y]
</snippet></ROW><ROW><id>13004054</id><snippet>a[np.arange(4)[:, None], shifts[:, None] + np.arange(10)]
</snippet></ROW><ROW><id>13004054</id><snippet>i, j = np.ogrid[:4, :10]
a[i, shifts[:, None]+j]
</snippet></ROW><ROW><id>13004128</id><snippet>owner = ForeignKey(User)
</snippet></ROW><ROW><id>13004128</id><snippet>class User:
    ...
    tracks = ManyToManyField(Track) 
</snippet></ROW><ROW><id>13004382</id><snippet>@classmethod #if this is a classmethod
def retrieve(self, curs, condition=None):
        if condition:
           curs.execute("SELECT * FROM {0} WHERE {1}".format(self.table,condition)
        else:
           curs.execute("SELECT * FROM {0}".format(self.table)
        for row in curs.fetchall():
            yield DataRow(row)
</snippet></ROW><ROW><id>13004382</id><snippet>my_users = build_row("users",["username","password","avatar"])
my_users = my_users()  #if you need to operate on an instance.... but class method would be better
#users is the name of a table already in our database, whose columns are username,password, and avatar
db=sqlite3.connect("some_database.sql")
for user in my_users.retrieve(db.cursor(),"username='bob'"):
    print user #something like users_record({'username':'bob','password':'123%gw','avatar':None)
    print user.username #bob
    print user.avatar #None
    print user.password #whatever
    print user.blah #Error!!!!
</snippet></ROW><ROW><id>13004448</id><snippet>1e23</snippet></ROW><ROW><id>13004448</id><snippet>10**23</snippet></ROW><ROW><id>13004571</id><snippet>py_compile</snippet></ROW><ROW><id>13004571</id><snippet>$ python3 -mpy_compile your_script.py
</snippet></ROW><ROW><id>13004571</id><snippet>cfile</snippet></ROW><ROW><id>13004571</id><snippet>py_compile.compile()</snippet></ROW><ROW><id>13004571</id><snippet>&gt;&gt;&gt; def f(o):
...     with o:
...         pass
...
&gt;&gt;&gt; import dis   
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (o)
              3 SETUP_WITH               5 (to 11)
              6 POP_TOP             

  3           7 POP_BLOCK           
              8 LOAD_CONST               0 (None)
        &gt;&gt;   11 WITH_CLEANUP        
             12 END_FINALLY         
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
</snippet></ROW><ROW><id>13004571</id><snippet>$ python -c 'import some_module'
</snippet></ROW><ROW><id>13004581</id><snippet>match.end()</snippet></ROW><ROW><id>13004581</id><snippet>.*x</snippet></ROW><ROW><id>13004581</id><snippet>x</snippet></ROW><ROW><id>13004590</id><snippet>Characters = [Percy, Annabeth, Leo, Chuck, Sarah]
</snippet></ROW><ROW><id>13004590</id><snippet>Percy</snippet></ROW><ROW><id>13004590</id><snippet>percy_result = Characters[0]()
</snippet></ROW><ROW><id>13004759</id><snippet>&gt;&gt;&gt; for row in input_file:
...     print row
1,2,3,...
4,5,6,...
etc.
&gt;&gt;&gt; for row in input_file:
...     print row
&gt;&gt;&gt; # Nothing gets printed, the file is consumed
</snippet></ROW><ROW><id>13004759</id><snippet>min</snippet></ROW><ROW><id>13004759</id><snippet>max</snippet></ROW><ROW><id>13004759</id><snippet>maxima = [float('-inf')] * 13
minima = [float('inf')] * 13
with open('names.csv') as input_file:
    for row in input_file:
        for col, value in row.split(','):
            value = float(value)
            maxima[col] = max(maxima[col], value)
            minima[col] = min(minima[col], value)

# This gets the value you called ``l``
combined_max_and_min = zip(maxima, minima)
</snippet></ROW><ROW><id>13004947</id><snippet>    # Add a Picture ID from a different user to test the restriction that an album cannot be re-ordered if any pictures do not belong to the specified user.
    picture_ids.append(pictures2[0].id)
    print "%s:%s:%s" % (album2.id, pictures2[0].id, pictures2[0].weight)
    picture_weights[pictures[2].id] = pictures2[0].weight
</snippet></ROW><ROW><id>13004947</id><snippet>pictures[2].id</snippet></ROW><ROW><id>13004947</id><snippet>5701L</snippet></ROW><ROW><id>13004947</id><snippet>    picture_weights[pictures2[0].id] = pictures2[0].weight
</snippet></ROW><ROW><id>13005392</id><snippet>zip -r - csv | uuencode | mail -s "csv zips for $(date)" foo@bar.com</snippet></ROW><ROW><id>13005392</id><snippet>cd</snippet></ROW><ROW><id>13005392</id><snippet>csv</snippet></ROW><ROW><id>13005392</id><snippet>/home/foo/csv</snippet></ROW><ROW><id>13005392</id><snippet>cd /home/foo &amp;&amp; zip -r csv | uuencode | mail -s "csv zips for $(date)" foo@bar.com</snippet></ROW><ROW><id>13005404</id><snippet>for</snippet></ROW><ROW><id>13005404</id><snippet>child.text
</snippet></ROW><ROW><id>13005404</id><snippet>root[0].text
</snippet></ROW><ROW><id>13005431</id><snippet># this needs to be there unconditionally.
import contract
contract.checkmod(__name__)

if __name__ == '__main__':
   import doctest, GA
   doctest.testmod(GA)
</snippet></ROW><ROW><id>13005431</id><snippet>import GA</snippet></ROW><ROW><id>13005431</id><snippet>contract.checkmod()</snippet></ROW><ROW><id>13005431</id><snippet>if __name__ == '__main__':
   import contract
   contract.checkmod(__name__)
   import doctest, GA
   doctest.testmod(GA)
</snippet></ROW><ROW><id>13005499</id><snippet>json</snippet></ROW><ROW><id>13005499</id><snippet>simplejson</snippet></ROW><ROW><id>13005499</id><snippet>simplejson</snippet></ROW><ROW><id>13005499</id><snippet>simplejson</snippet></ROW><ROW><id>13005499</id><snippet>json</snippet></ROW><ROW><id>13005609</id><snippet>&gt;&gt;&gt; dict((x[0], (x[1], x[2])) for x in names[1:])
{'A104': ('Ann', 'Lee'), 'A102': ('Jane', 'Smith'), 'A103': ('Mark', 'Twain'), 'A101': ('Mark', 'Smith')}
&gt;&gt;&gt; dict((x[2], (x[0], x[1])) for x in names[1:])
{'Twain': ('A103', 'Mark'), 'Smith': ('A102', 'Jane'), 'Lee': ('A104', 'Ann')}
</snippet></ROW><ROW><id>13005712</id><snippet>gzip</snippet></ROW><ROW><id>13005712</id><snippet>StringIO</snippet></ROW><ROW><id>13005712</id><snippet>url = urllib2.urlopen('http://api.stackoverflow.com/1.1/badges/name')
zippedContents = url.read()
sio = StringIO.StringIO(zippedContents)
gz = gzip.GzipFile(fileobj=sio)
print gz.read()
</snippet></ROW><ROW><id>13005845</id><snippet>(command1|command2|command3).+;</snippet></ROW><ROW><id>13005845</id><snippet>+</snippet></ROW><ROW><id>13005845</id><snippet>?</snippet></ROW><ROW><id>13005845</id><snippet>(command1|command2|command3).+?;</snippet></ROW><ROW><id>13005845</id><snippet>*</snippet></ROW><ROW><id>13005845</id><snippet>?</snippet></ROW><ROW><id>13006171</id><snippet>d = {}
d[list_x.pop(1)] = list_x
</snippet></ROW><ROW><id>13006317</id><snippet>$.ajax({
  type: 'POST',
  url: 'http://localhost:8000/trial/',
  data: data2, // without stringifying
  success: function(res) { }
});
</snippet></ROW><ROW><id>13006317</id><snippet>data2 = {crave: "romana", uid: "100", access_token: "AAA"}
$.post('http://localhost:8000/trial/', data2, function(res) { });
</snippet></ROW><ROW><id>13006551</id><snippet>data = ('(Laughter flower)', {'laughter': (8.5, 0.9313), 'flower': (7.88, 1.1718), 
'the':(4.98, 0.9145), 'puppy':(7.58, 1.4581), 'died':(1.56, 1.198), 'laugh': 
(9.5, 0.1),'flow': (2.3, 0.51)})

# Unpack for naming
keys, vals = data
# Assume () and first and last
look_for = keys[1:-1].lower().split()
# Get relevant numbers
nums = [vals[k][0] for k in look_for]
# Print average
print sum(nums) / len(nums)
</snippet></ROW><ROW><id>13006551</id><snippet>def somefunc(keys, dct):
    vals = [dct[k][0] for k in keys]
    return sum(vals) / float(len(vals))
</snippet></ROW><ROW><id>13006551</id><snippet>some_string = '(laughter flower)'
keys = some_string[1:-1].lower().split()
print somefunc(keys, some_dict)
</snippet></ROW><ROW><id>13007057</id><snippet>for values in stripped_header: 
    volume_axis += [int(values)] * 100
</snippet></ROW><ROW><id>13007057</id><snippet>from itertools import repeat
for values in stripped_header:
    volume_axis += repeat(int(values), 100)
</snippet></ROW><ROW><id>13007431</id><snippet>&gt;&gt;&gt; test = lambda f: f(lambda x: x + 1)(0)
&gt;&gt;&gt; z = lambda f: lambda x: x
&gt;&gt;&gt; test(z)
0
&gt;&gt;&gt; succ = lambda n: lambda f: lambda x: f(n(f)(x))
&gt;&gt;&gt; _1 = succ(z)
&gt;&gt;&gt; test(_1)
1
&gt;&gt;&gt; _2 = succ(_1)
&gt;&gt;&gt; test(_2)
2
&gt;&gt;&gt; plus = lambda m: lambda n: lambda f: lambda x: m(f)(n(f)(x))
&gt;&gt;&gt; _3 = plus(_1)(_2)
&gt;&gt;&gt; test(_3)
3
&gt;&gt;&gt; mult = lambda m: lambda n: lambda f: lambda x: m(n(f))(x)
&gt;&gt;&gt; _6 = mult(_2)(_3)
&gt;&gt;&gt; test(_6)
6
&gt;&gt;&gt; _5 = plus(_2)(_3)
&gt;&gt;&gt; _25 = mult(_5)(_5)
&gt;&gt;&gt; _4 = plus(_2)(_2)
&gt;&gt;&gt; _100 = mult(_25)(_4)
&gt;&gt;&gt; test(_100)
100
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13007661</id><snippet>Selenium</snippet></ROW><ROW><id>13007661</id><snippet>from selenium import webdriver
import time

browser=webdriver.Chrome()
browser.get('http://www.vliz.be/vmdcdata/mangroves/aphia.php?p=browser&amp;id=235301&amp;expand=true#ct')

while True:
      try:
          elem=browser.find_elements_by_xpath('.//*[@src="http://www.marinespecies.org/images/aphia/pnode.gif" or @src="http://www.marinespecies.org/images/aphia/plastnode.gif"]')[1]
          elem.click()
          time.sleep(2)
      except:
          break

content=browser.page_source
</snippet></ROW><ROW><id>13007681</id><snippet>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; def prbs():
...     while True:
...         yield choice([False, True])
</snippet></ROW><ROW><id>13008016</id><snippet>from PySide.QtCore import QByteArray, QUrl
from PySide.QtGui import QApplication  
from PySide.QtWebKit import QWebView, QWebPage 
from PySide.QtNetwork import QNetworkAccessManager, QNetworkRequest, QNetworkReply


class Browser(object):

    def __init__(self):
        self.network_manager = QNetworkAccessManager()
        self.network_manager.createRequest = self._create_request
        self.network_manager.finished.connect(self._request_finished)

        self.web_page = QWebPage()
        self.web_page.setNetworkAccessManager(self.network_manager)

        self.web_view = QWebView()
        self.web_view.setPage(self.web_page)

    def _create_request(self, operation, request, data):
        print data.readAll()
        reply = QNetworkAccessManager.createRequest(self.network_manager,
                                                    operation,
                                                    request,
                                                    data)
        return reply

    def _request_finished(self, reply):
        if not reply.error() == QNetworkReply.NoError:
            # request probably failed
            print reply.error()
            print reply.errorString()

    def _make_request(self, url):
        request = QNetworkRequest()
        request.setUrl(QUrl(url))
        return request

    def _urlencode_post_data(self, post_data):
        post_params = QUrl()
        for (key, value) in post_data.items():
            post_params.addQueryItem(key, unicode(value))

        return post_params.encodedQuery()

    def perform(self, url, method='GET', post_data=dict()):
        request = self._make_request(url)

        if method == 'GET':
            self.web_view.load(request)
        else:
            encoded_data = self._urlencode_post_data(post_data)
            request.setRawHeader('Content-Type',
                                 QByteArray('application/x-www-form-urlencoded'))
            self.web_view.load(request,
                               QNetworkAccessManager.PostOperation,
                               encoded_data)

if __name__ == '__main__':
    app = QApplication([])
    browser = Browser()
    browser.perform('http://www.python.org', 'POST', {'test': 'value', 'anothername': 'gfdgfd'})
    app.exec_()
</snippet></ROW><ROW><id>13008269</id><snippet>from kivy.properties import NumericProperty
</snippet></ROW><ROW><id>13008269</id><snippet>r = NumericProperty(0)
</snippet></ROW><ROW><id>13008269</id><snippet>class CircleWidget(Widget):</snippet></ROW><ROW><id>13008269</id><snippet>Builder.load_file</snippet></ROW><ROW><id>13008664</id><snippet>dwg = svgwrite.Drawing('myDrawing.svg', size=('170mm', '130mm'), viewBox=('0 0 170 130'))

dwg.add(dwg.line(start=(30, 30), end=(50,50)))

dwg.save()
</snippet></ROW><ROW><id>13008664</id><snippet>&lt;?xml version="1.0" encoding="utf-8" ?&gt;

&lt;svg baseProfile="full" height="130mm" version="1.1" viewBox="0 0 170 130" width="170mm"
xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;defs /&gt;&lt;line x1="30" x2="50" y1="30" y2="50" /&gt;     &lt;/svg&gt;
</snippet></ROW><ROW><id>13008770</id><snippet>$ python pairing_strings.py 
total time:  2.09194397926
$ pypy pairing_strings.py 
total time:  0.764246940613
</snippet></ROW><ROW><id>13008770</id><snippet>$ pypy pairing_strings.py 
total time:  0.763386964798
</snippet></ROW><ROW><id>13008770</id><snippet>$ pypy pairing_strings.py 
total time:  0.888827085495
</snippet></ROW><ROW><id>13008770</id><snippet>$ pypy pairing_strings.py 
total time:  0.615751981735
</snippet></ROW><ROW><id>13008770</id><snippet>$ pypy pairing_strings.py 
total time:  0.423738002777 
</snippet></ROW><ROW><id>13008770</id><snippet>def test():
    import time
    def m_int(s, memo={}):
        if s in memo:
            return memo[s]
        else:
            retval = memo[s] = int(s)
            return retval
    data = get_data()
    all_point_sets = []
    time_start = time.time()
    for xs, ys in data:
        point_set = []
        # Convert points from strings to integers
        y_iter = iter(ys.split(","))
        curr_points = [Point(m_int(i), m_int(next(y_iter))) for i in xs.split(",")]
        all_point_sets.append(curr_points)
    time_end = time.time()
    print "total time: ", (time_end - time_start)
</snippet></ROW><ROW><id>13009300</id><snippet>ping</snippet></ROW><ROW><id>13009300</id><snippet>import subprocess

proc = subprocess.Popen(['ping', '-t', 'google.com'], shell=True)

raw_input("&lt;RETURN&gt; to terminate")
proc.terminate()

raw_input("&lt;RETURN&gt; to end")
</snippet></ROW><ROW><id>13009300</id><snippet>proc.terminate()</snippet></ROW><ROW><id>13009300</id><snippet>ping</snippet></ROW><ROW><id>13009300</id><snippet>shell=False</snippet></ROW><ROW><id>13009300</id><snippet>ping</snippet></ROW><ROW><id>13009300</id><snippet>sleep</snippet></ROW><ROW><id>13009300</id><snippet>python -c "import subprocess,time;proc = subprocess.Popen(['ping','-t', 'google.com'], shell=True);time.sleep(1);proc.terminate()"
</snippet></ROW><ROW><id>13009866</id><snippet>def findOccurences(s, ch):
    return [i for i, letter in enumerate(s) if letter == ch]


findOccurrences(yourString, "|")
</snippet></ROW><ROW><id>13010572</id><snippet>a = array.array('i',(0 for _ in xrange(10)))
</snippet></ROW><ROW><id>13010572</id><snippet>import ctypes
intArray10 = ctypes.c_int * 10
myArray = intArray10(*(0 for _ in xrange(10)))
</snippet></ROW><ROW><id>13010675</id><snippet>work_dim</snippet></ROW><ROW><id>13010675</id><snippet>global_work_offset</snippet></ROW><ROW><id>13010675</id><snippet>global_size</snippet></ROW><ROW><id>13010675</id><snippet>local_size</snippet></ROW><ROW><id>13010675</id><snippet>global_offset</snippet></ROW><ROW><id>13011006</id><snippet>mydictionary = {
    1: [4, "ABC Mammal"],
    2: [8, "Mammal 123"],
    3: [15, "Bird (Not a Mammal)"]
}

mydictionary = {key: ([value[0], value[1].strip('Mammal')] if 'Mammal' in value[1] else value) for key, value in mydictionary.iteritems()}
print mydictionary
</snippet></ROW><ROW><id>13011006</id><snippet>{1: [4, 'ABC '], 2: [8, ' 123'], 3: [15, 'Bird (Not a Mammal)']}
</snippet></ROW><ROW><id>13011165</id><snippet>def init(self, parent):
</snippet></ROW><ROW><id>13011165</id><snippet>def __init__(self, parent):
</snippet></ROW><ROW><id>13011165</id><snippet>object.__init__</snippet></ROW><ROW><id>13011467</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>13011467</id><snippet>fillvalue</snippet></ROW><ROW><id>13011467</id><snippet>0</snippet></ROW><ROW><id>13011467</id><snippet>In [6]: [sum(x) for x in itertools.izip_longest(*lists,fillvalue=0)]
Out[6]: [6, 5, 4]
</snippet></ROW><ROW><id>13011467</id><snippet>In [27]: ml=max(map(len,lists))

In [28]: ml       #length of the longest list in lists
Out[28]: 3

In [29]: [sum(x) for x in zip(*map(lambda x:x+[0]*ml if len(x)&lt;ml else x,lists))]
Out[29]: [6, 5, 4]
</snippet></ROW><ROW><id>13011965</id><snippet>def pipeinto(data, *prog):
    import subprocess
    sp = subprocess.Popen(prog, stdin=subprocess.PIPE)
    sp.stdin.write(str(data))
    sp.stdin.close()
    return sp
</snippet></ROW><ROW><id>13011965</id><snippet>pipeinto("\n".join(sys.modules.keys()), "gedit")
</snippet></ROW><ROW><id>13012209</id><snippet>class Object():
    def __init__(self, size):
        self.__len__ = lambda: size


&gt;&gt;&gt; len(Object(3))
3
</snippet></ROW><ROW><id>13012209</id><snippet>__len__</snippet></ROW><ROW><id>13012222</id><snippet>s = """|[nothing detected] www.neopets.com/
\t|status: (referer=http://www.google.com)saved 55189 bytes /fetch_d4cd213a56276ca726ddd437a1e75f1024ab7799
\t\t|file: fetch_d4cd213a56276ca726ddd437a1e75f1024ab7799: 55189 bytes
\t\t|file: decoding_367af53b4963986ecdeb9c09ce1a405b5b1ecd91: 68 bytes
\t\t|[nothing detected] (script) images.neopets.com/js/common.js?v=6
\t\t\t|status: (referer=http://www.google.com)saved 1523 bytes /fetch_8eeadcc08d4cb48c02dedf18648510b75190d1d7failure: [Errno 13] Permission denied: '/tmp/tmpsha1_8d7fb3ff1ef087c7ea2bf044dee294735a76ed4b.js'
\t\t|file: fetch_8eeadcc08d4cb48c02dedf18648510b75190d1d7: 1523 bytes""".splitlines()

class MyList(list):
    def __init__(self, parent):
        self.parent = parent
        list.__init__(self)

top = current = MyList(None)
ntab_old = 0
for line in s:
    ntab = line.count('\t') #may need to be more robust to get tabs only at beginning
    if(ntab_old &gt; ntab):
        #go up ntab_old - ntab levels.
        for _ in range(ntab_old - ntab):
            current = current.parent
    elif(ntab_old &lt; ntab):
        #increased indentation means we want a new list
        current.append(MyList(current))
        current = current[-1]
    current.append(line)
    ntab_old = ntab

print top
</snippet></ROW><ROW><id>13012295</id><snippet>key=lambda my_instace: long(''.join(["%02X" % long(i) for i in my_instance.ip.split('.')]), 16))
</snippet></ROW><ROW><id>13012645</id><snippet>import os, subprocess
env = os.environ.copy()
env['LC_ALL'] = 'C'
subprocess.check_call(['sshfs', 'HOST:~/SRC', '~/DST'], env = env)
</snippet></ROW><ROW><id>13012983</id><snippet>graph = pydot.Dot(graph_type='graph')
graph.add_node(pydot.Node('literal_0_0', label='0'))
graph.add_node(pydot.Node('literal_0_1', label='0'))
graph.add_node(pydot.Node('literal_1_0', label='1'))
graph.add_node(pydot.Node('literal_1_1', label='1'))
</snippet></ROW><ROW><id>13012983</id><snippet>edge = pydot.Edge("a_2&gt;10", "literal_0_0")
graph.add_edge(edge)
edge = pydot.Edge("a_2&gt;10", "literal_1_0")
graph.add_edge(edge)
edge = pydot.Edge("a_3&gt;-7", "literal_0_1")
graph.add_edge(edge)
edge = pydot.Edge("a_3&gt;-7", "literal_1_1")
graph.add_edge(edge)
</snippet></ROW><ROW><id>13013059</id><snippet>workspace/nodepy/</snippet></ROW><ROW><id>13013059</id><snippet>workspace</snippet></ROW><ROW><id>13013082</id><snippet>WindowCommand</snippet></ROW><ROW><id>13013082</id><snippet>run_command</snippet></ROW><ROW><id>13013082</id><snippet>check_urls</snippet></ROW><ROW><id>13013082</id><snippet>window = sublime.active_window()
window.show_quick_panel(messages, None, sublime.MONOSPACE_FONT)
</snippet></ROW><ROW><id>13013082</id><snippet>import sublime
import sublime_plugin
import urllib2

class CheckUrlsCommand(sublime_plugin.TextCommand):

   def run(self, edit):
      urls = []
      selections = self.view.sel()
      for selection in selections:
         urls.append(self.view.substr(selection))

      messages = self.validate_urls(urls)
      window = sublime.active_window()
      window.show_quick_panel(messages, None, sublime.MONOSPACE_FONT)

   def validate_urls(self, urls):
      messages = []
      for url in urls:
         try:
            request = urllib2.Request(url, headers={ "User-Agent" : "Sublime URL Checker" }) 
            response = urllib2.urlopen(request, timeout=3)
            message = '"%s" is a valid URL.' % url
         except Exception as (e):
            message = '"%s" is an invalid URL.' % url

         messages.append(message)

      return messages
</snippet></ROW><ROW><id>13013106</id><snippet>collective.recipe.template</snippet></ROW><ROW><id>13013173</id><snippet>APSME-RESET.Request</snippet></ROW><ROW><id>13013173</id><snippet>APSME-REST.Confirm</snippet></ROW><ROW><id>13013173</id><snippet>NLME-Reset.Request</snippet></ROW><ROW><id>13013173</id><snippet>NLME-Reset.Confirm</snippet></ROW><ROW><id>13013317</id><snippet>a(1:5,:)</snippet></ROW><ROW><id>13013317</id><snippet>a[0:5] or a[:5] or a[0:5,:]</snippet></ROW><ROW><id>13013317</id><snippet>Year_Data = [ [datmat.data(i,j) for j in range (4,38) ] for i in range(j,j+2) ]</snippet></ROW><ROW><id>13013317</id><snippet>for i in range(runs) :
    datamat = numpy.genfromtxt('data.txt',delimiter=' ', newline ='\n' ) 
    // Adapt the previous line to the format of your txt file
    // at this point you should have a numpy.array object with the right shape
    Limits_Area= numpy.array( [1,261,522,784,1045,1305,1565,1827,2088,2349,2610,2871,3131,3158] )
    for k in range(2000):
        for j in range(13):
            Year_Data = datmat[ Limits_Area(j):Limits_Area(j+1)-1 , 4:37 ]
            etc etc ...
</snippet></ROW><ROW><id>13013548</id><snippet>groupby</snippet></ROW><ROW><id>13013548</id><snippet>counts = dataframe.groupby(level=["Sample", "Detector"])
counts = counts.size().unique()

if counts.size != 1:
    raise ValueError("Detectors not equal for all samples")
</snippet></ROW><ROW><id>13013678</id><snippet>012</snippet></ROW><ROW><id>13013678</id><snippet>012</snippet></ROW><ROW><id>13013678</id><snippet>a = 012 + 013
</snippet></ROW><ROW><id>13013678</id><snippet>a = 25</snippet></ROW><ROW><id>13013678</id><snippet>a = 21</snippet></ROW><ROW><id>13013790</id><snippet>try:
    #code that you expect errors from

except KeyError, NameError:
    #exception code

except:
    #Of course, you can also do a naked except to catch all
    #exceptions,
    #But if you're forced to do this, you're probably
    #doing something wrong. This is bad coding style.
</snippet></ROW><ROW><id>13013790</id><snippet>try:
    #Code to try
except (KeyError, NameError) as e:
    #Code to execute in either case
    if isinstance(e, KeyError):
        #code to execute if error is KeyError
    else:
        #code to execute if error is NameError
</snippet></ROW><ROW><id>13013812</id><snippet>.strip()</snippet></ROW><ROW><id>13013812</id><snippet>.strip()</snippet></ROW><ROW><id>13013812</id><snippet> foo \t bar \n
foo\tbar\n
</snippet></ROW><ROW><id>13014040</id><snippet>multiprocessing</snippet></ROW><ROW><id>13014201</id><snippet>import</snippet></ROW><ROW><id>13014201</id><snippet>from foo import Foo, FooError, BarError</snippet></ROW><ROW><id>13014201</id><snippet>ValueError</snippet></ROW><ROW><id>13014201</id><snippet>TypeError</snippet></ROW><ROW><id>13014201</id><snippet>class ParseError(Exception):
    def __init__(self, parser_input, line, column):
        self.input = parse_input
        self.line = line
        self.column = column

    def __str__(self):
        # format the exception message, showing the offending part of
        # self.input and what the parser was expecting.
</snippet></ROW><ROW><id>13014223</id><snippet>string</snippet></ROW><ROW><id>13014223</id><snippet>int</snippet></ROW><ROW><id>13014223</id><snippet>first = int(self.e1.get())
</snippet></ROW><ROW><id>13014289</id><snippet>&gt;&gt;&gt; a = u'与'
&gt;&gt;&gt; a
u'\u4e0e'
</snippet></ROW><ROW><id>13014289</id><snippet># -*- coding: utf8 -*-
</snippet></ROW><ROW><id>13014433</id><snippet>a = np.empty((241*481,3))
</snippet></ROW><ROW><id>13014433</id><snippet>for i,fname in enumerate(('inputFile.csv','lat.csv','lon.csv')):
    with open(fname) as f:
        data = np.fromfile(f,sep=',')
        a[:,i] = data.ravel()
</snippet></ROW><ROW><id>13014433</id><snippet>np.ndarrays</snippet></ROW><ROW><id>13014433</id><snippet>alist = []
for fname in ('inputFile.csv','lat.csv','lon.csv'):
    with open(fname) as f:
        data = np.fromfile(f,sep=',')
        alist.append( data.ravel() )
a = np.array(alist).T
</snippet></ROW><ROW><id>13014650</id><snippet>for x, y in itertools.izip(l, l[1:]): print x, y
</snippet></ROW><ROW><id>13014658</id><snippet>match1 = reg1.search(s)
</snippet></ROW><ROW><id>13014658</id><snippet>match</snippet></ROW><ROW><id>13014729</id><snippet>Rectangle</snippet></ROW><ROW><id>13014729</id><snippet>plt.gca</snippet></ROW><ROW><id>13014729</id><snippet>add_patch</snippet></ROW><ROW><id>13014729</id><snippet>Rectangle</snippet></ROW><ROW><id>13014729</id><snippet>someX, someY = 2, 3
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((someX - .5, someY - .5), 1, 1, facecolor="grey"))
</snippet></ROW><ROW><id>13015058</id><snippet>timeit</snippet></ROW><ROW><id>13015058</id><snippet>from operator import itemgetter
x = n = o = u = 0
items = itemgetter('a','n','o','u')
for entry in indata:
    A,N,O,U = items(entry)
    x += A*N  # n - number of data points
    n += N
    o += O    #don't know what you're doing with O or U, but I'll leave them
    u += U

average = int(round(x / n)), n, o, u
</snippet></ROW><ROW><id>13015058</id><snippet>entry['n']</snippet></ROW><ROW><id>13015078</id><snippet>error: could not create '/usr/local/lib/python2.7/dist-packages/flask': Permission denied</snippet></ROW><ROW><id>13015078</id><snippet>sudo</snippet></ROW><ROW><id>13015078</id><snippet>$ virtualenv flask_env
$ source flask_env/bin/activate
(flask_env) $ pip install Flask
</snippet></ROW><ROW><id>13015078</id><snippet>sudo apt-get install python-virtualenv</snippet></ROW><ROW><id>13015267</id><snippet>with</snippet></ROW><ROW><id>13015267</id><snippet>with</snippet></ROW><ROW><id>13015267</id><snippet>with</snippet></ROW><ROW><id>13015337</id><snippet>d = collections.OrderedDict(el.split(':') for el in your_list)
</snippet></ROW><ROW><id>13015337</id><snippet>OrderedDict( (k, int(v)) for k, v in (el.split(':') for el in your_list))
</snippet></ROW><ROW><id>13015610</id><snippet>from collections import defaultdict

ri = [('123', 'abc', 'def'),('123', 'efg', 'hij'),('456', 'klm','nop')]
response_items = defaultdict(list)
for r in ri:
    response_items[r[0]].append(r[1:])
print response_items
</snippet></ROW><ROW><id>13015610</id><snippet>defaultdict(&lt;type 'list'&gt;, {'123': [('abc', 'def'), ('efg', 'hij')],
                            '456': [('klm', 'nop')]})
</snippet></ROW><ROW><id>13015610</id><snippet>defaultdict(&lt;type 'list'&gt;, {'123': ['abc', 'def', 'efg', 'hij'],
                            '456': ['klm', 'nop']})
</snippet></ROW><ROW><id>13015610</id><snippet>response_items[r[0]].extend(r[1:])</snippet></ROW><ROW><id>13015822</id><snippet>points = zip(x_list, y_list)
</snippet></ROW><ROW><id>13015822</id><snippet>points = list(set(points))
</snippet></ROW><ROW><id>13015897</id><snippet>import os 
import glob
import collections

dirpath = r"C:\Python32\test"
os.chdir(dirpath)
cnt = collections.Counter()
for filename in glob.glob("*"):
    name, ext = os.path.splitext(filename)
    cnt[ext] += 1
print(cnt)
</snippet></ROW><ROW><id>13016066</id><snippet>scatter</snippet></ROW><ROW><id>13016066</id><snippet>mTuple = [arg for arg in args]</snippet></ROW><ROW><id>13016066</id><snippet>list</snippet></ROW><ROW><id>13016066</id><snippet>mTuple = list(args)</snippet></ROW><ROW><id>13016066</id><snippet>import itertools

def covnersion_Anim(xPos,trueVal,*args):
    mTuple = args
    plt_bulk_lst = []
    plt_head_lst = []
    color_list = ['Green','Blue','Orchid','Cyan','Goldenrod','Salmon','Orange','Violet','Magenta']
    f = plt.figure(figsize =(17,8))
    ax = plt.gca()
    ax.set_xlim([min(xPos),max(xPos)])
    ax.set_ylim([0,1])
    ms = 5
    for j,c in zip(range(len(mTuple)),itertools.cycle(color_list)):
        plt_bulk_lst.append(ax.plot([],[],color=c,ms=ms,marker='x',linestyle='none')[0])
        plt_head_lst.append(ax.plot([xPos[0]],[mTuple[j][0]],color='Dark'+c,ms=ms,marker='o',linestyle='none')[0])
    real_plt, = plot([],[],color='red')

    for j in range(1,len(xPos)):
        print j
        for hd_plt,blk_plt,m in zip(plt_head_lst,plt_bulk_lst,mTuple):
            hd_plt.set_xdata([xPos[j]])
            hd_plt.set_ydata([m[j]])

            blk_plt.set_ydata(m[:j])
            blk_plt.set_xdata(xPos[:j])

            real_plt.set_xdata(xPos[:j])
            real_plt.set_ydata(trueVal[:j])

        plt.pause(1)

    return f
covnersion_Anim(range(12),rand(12),rand(12),rand(12),rand(12))
</snippet></ROW><ROW><id>13016200</id><snippet>sorted({x for v in content.itervalues() for x in v})
</snippet></ROW><ROW><id>13016335</id><snippet>os.listdir()</snippet></ROW><ROW><id>13016335</id><snippet>os.walk()</snippet></ROW><ROW><id>13016335</id><snippet>def clean_dir(directory):

    os.chdir(directory)

    for filename in os.listdir(directory):
        clean_file(filename)

def clean_file(filename):

    tag_black_list = ['iframe', 'script']
    tag_white_list = ['p','div']
    attr_white_list = {'*': ['title']}

    with open(filename, 'r') as fhandle:
        text = BeautifulSoup(fhandle)
        text.encode("utf-8")

        # Step one, with BeautifulSoup: Remove tags in tag_black_list, destroy contents.
        [s.decompose() for s in text(tag_black_list)]
        pretty = (text.prettify())

        # Step two, with Bleach: Remove tags and attributes not in whitelists, leave tag contents.
        cleaned = bleach.clean(pretty, strip="TRUE", attributes=attr_white_list, tags=tag_white_list)

        # this appends -cleaned to the file; 
        # relies on the file having a '.'
        dot_pos = filename.rfind('.')
        cleaned_filename = '{0}-cleaned{1}'.format(filename[:dot_pos], filename[dot_pos:])

        with open(cleaned_filename, 'w') as fout:
            fout.write(cleaned.encode("utf-8"))

    print "Done"
</snippet></ROW><ROW><id>13016335</id><snippet>clean_dir('/posts')</snippet></ROW><ROW><id>13016335</id><snippet>-cleaned</snippet></ROW><ROW><id>13016335</id><snippet>with</snippet></ROW><ROW><id>13016530</id><snippet>import csv
from openpyxl import Workbook
from openpyxl.cell import get_column_letter

f = open(r'C:\Users\Asus\Desktop\herp.csv')

csv.register_dialect('colons', delimiter=':')

reader = csv.reader(f, dialect='colons')

wb = Workbook()
dest_filename = r"C:\Users\Asus\Desktop\herp.xlsx"

ws = wb.worksheets[0]
ws.title = "A Snazzy Title"

for row_index, row in enumerate(reader):
    for column_index, cell in enumerate(row):
        column_letter = get_column_letter((column_index + 1))
        ws.cell('%s%s'%(column_letter, (row_index + 1))).value = cell

wb.save(filename = dest_filename)
</snippet></ROW><ROW><id>13016613</id><snippet>x = ( "a" #foo
      "b" #bar
    )
</snippet></ROW><ROW><id>13016613</id><snippet>([{</snippet></ROW><ROW><id>13016613</id><snippet>+</snippet></ROW><ROW><id>13016625</id><snippet>from xml.dom.minidom import parse

dom1 = parse("test.xml")

for node in dom1.getElementsByTagName('t'):
    print node.childNodes[0].nodeValue
</snippet></ROW><ROW><id>13016788</id><snippet>.filter()</snippet></ROW><ROW><id>13016788</id><snippet>#returns all ModelX objects related to root nodes
ModelX.objects.filter(fieldX__level=0)

#first: get descendants of root node with id=1 (it can be any field lookups)
#second: get all ModelX nodes, related to previously founded nodes
nodes = ModelY.object.get(level=0, id=1).get_descendants()
ModelX.objects.filter(fieldX__in=nodes)
</snippet></ROW><ROW><id>13016849</id><snippet>from setuptools.command import easy_install
easy_install.main( ["pythonModule"] )
</snippet></ROW><ROW><id>13016933</id><snippet>set()</snippet></ROW><ROW><id>13016933</id><snippet>sorted()</snippet></ROW><ROW><id>13016933</id><snippet>",".join()</snippet></ROW><ROW><id>13016933</id><snippet>In [109]: strs="1534423543"

In [110]: ",".join(sorted(set(strs)))
Out[110]: '1,2,3,4,5'
</snippet></ROW><ROW><id>13017090</id><snippet>print list(map(id, initiate(4)))
# [42283920, 42283920, 42283920, 42283920]
</snippet></ROW><ROW><id>13017090</id><snippet>def initiate(n):
    return [ {'num': i, 'blah': 0, 'doubleblah': 0} for i in range(n) ]
</snippet></ROW><ROW><id>13017114</id><snippet>import sqlite3
conn = sqlite3.connect("test.sqlite")

data = ("a", None)
conn.execute('INSERT INTO "foo" VALUES(' + ','.join("?" * len(data)) + ')', data)

list(conn.execute("SELECT * FROM foo"))      # -&gt; [("a", None)]
</snippet></ROW><ROW><id>13017254</id><snippet>dict</snippet></ROW><ROW><id>13017254</id><snippet>dict_i_wanted = todos.dict()
</snippet></ROW><ROW><id>13017254</id><snippet>dict_i_wanted = dict(todos)</snippet></ROW><ROW><id>13017254</id><snippet>def __iter__(self):
    return self.dict().iteritems()
</snippet></ROW><ROW><id>13017270</id><snippet>firstArray</snippet></ROW><ROW><id>13017270</id><snippet>secondArray</snippet></ROW><ROW><id>13017270</id><snippet>abbrevDict = {country: abbrev for abbrev, country in firstArray}
thirdArray = [[key, abbrevDict[country]] for key, country in secondArray]
</snippet></ROW><ROW><id>13017270</id><snippet>abbrevDict</snippet></ROW><ROW><id>13017270</id><snippet>abbrevDict = dict((country, abbrev) for abbrev, country in firstArray)
</snippet></ROW><ROW><id>13017270</id><snippet>abbrevDict = dict(map(reversed, firstArray))
</snippet></ROW><ROW><id>13017307</id><snippet>yield</snippet></ROW><ROW><id>13017307</id><snippet>yield (n,) + tuple(map(next, iterators))
</snippet></ROW><ROW><id>13017307</id><snippet>izip</snippet></ROW><ROW><id>13017307</id><snippet>enumerate</snippet></ROW><ROW><id>13017307</id><snippet>from itertools import izip

def multi_enumerate(*iterables):
    return ((n,) + t for n, t in enumerate(izip(*iterables)))
</snippet></ROW><ROW><id>13017722</id><snippet>shuffle</snippet></ROW><ROW><id>13017722</id><snippet>Characters</snippet></ROW><ROW><id>13017722</id><snippet>Characters = [Percy,Annabeth,Leo,Chuck,Sarah]
random.shuffle(Characters)
</snippet></ROW><ROW><id>13017722</id><snippet>pop</snippet></ROW><ROW><id>13017722</id><snippet>def callback():
    try:
       C = Characters.pop()  #popping the last one is more efficient than the first.
    except IndexError:
       return None

    return C()
</snippet></ROW><ROW><id>13017722</id><snippet>Characters</snippet></ROW><ROW><id>13017722</id><snippet> random.shuffle(Characters)
 Characters_save = Characters[:]

 def reset_characters():
     Characters[:] = Characters_save[:]
</snippet></ROW><ROW><id>13018102</id><snippet>zlib</snippet></ROW><ROW><id>13018102</id><snippet>zlib</snippet></ROW><ROW><id>13018267</id><snippet>read()</snippet></ROW><ROW><id>13018267</id><snippet>inWaiting()</snippet></ROW><ROW><id>13018267</id><snippet>#Modified code from main loop: 
s = serial.Serial(5)

#Modified code from thread reading the serial port
while 1:
  tdata = s.read()           # Wait forever for anything
  time.sleep(1)              # Sleep (or inWaiting() doesn't give the correct value)
  data_left = s.inWaiting()  # Get the number of characters ready to be read
  tdata += s.read(data_left) # Do the read and combine it with the first character

  ... #Rest of the code
</snippet></ROW><ROW><id>13018283</id><snippet>__str__</snippet></ROW><ROW><id>13018283</id><snippet>&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; class Foo(object):
...     def __str__(self):
...        return "The random number is: {0}".format(randint(0,10))
... 
&gt;&gt;&gt; a = [Foo()]
&gt;&gt;&gt; print a[0]
The random number is: 8
&gt;&gt;&gt; print a[0]
The random number is: 10
&gt;&gt;&gt; print a[0]
The random number is: 5 
</snippet></ROW><ROW><id>13018283</id><snippet>a = ["The some sweet string: {func1}",
     "Another {func2} different string {func3}"]

for item in a:
   print item.format(func1=func1(),func2=func2(),func3=func3())
</snippet></ROW><ROW><id>13018495</id><snippet>management</snippet></ROW><ROW><id>13018495</id><snippet>commands</snippet></ROW><ROW><id>13018495</id><snippet>__init__.py</snippet></ROW><ROW><id>13018495</id><snippet>commands</snippet></ROW><ROW><id>13018495</id><snippet>__init__.py</snippet></ROW><ROW><id>13018495</id><snippet>refresh.py</snippet></ROW><ROW><id>13018495</id><snippet># refresh.py

from django.core.management.base import BaseCommand, CommandError
from main.models import * # You may want to import your models in order to use  
                          # them in your cron job.

class Command(BaseCommand):
    help = 'Posts popular threads'

    def handle(self, *args, **options):
    # Code to refresh cache
</snippet></ROW><ROW><id>13018496</id><snippet>periodindex</snippet></ROW><ROW><id>13018496</id><snippet>from pandas.tseries.offsets import *

In [164]: s
Out[164]: 
2012-01-20   -1.266376
2012-07-31   -0.865573

In [165]: s.index=s.index+MonthEnd(n=0)

In [166]: s
Out[166]: 
2012-01-31   -1.266376
2012-07-31   -0.865573
</snippet></ROW><ROW><id>13018548</id><snippet>import itertools
keys = itertools.islice(the_list, 0, None, 2)
vals = itertools.islice(the_list, 1, None, 2)
the_dict = dict(itertools.izip(keys, vals))
</snippet></ROW><ROW><id>13018548</id><snippet>zip</snippet></ROW><ROW><id>13018548</id><snippet>the_dict = dict(zip(*[iter(the_list)]*2))
</snippet></ROW><ROW><id>13018548</id><snippet>the_dict = dict(zip(the_list[::2],the_list[1::2]))
</snippet></ROW><ROW><id>13018548</id><snippet>In [1]: from itertools import islice, izip

In [2]: the_list = range(1000000)

In [3]: %timeit dict(izip(islice(the_list,0,None,2), islice(the_list,1,None,2)))
10 loops, best of 3: 62.8 ms per loop

In [4]: %timeit dict(zip(the_list[::2], the_list[1::2]))
1 loops, best of 3: 112 ms per loop

In [5]: %timeit dict(zip(*[iter(the_list)]*2))
1 loops, best of 3: 105 ms per loop

In [6]: %timeit dict(izip(the_list[::2], the_list[1::2]))
10 loops, best of 3: 70.8 ms per loop

In [7]: %timeit dict(izip(*[iter(the_list)]*2))      # &lt;-- WINNER
10 loops, best of 3: 52.2 ms per loop
</snippet></ROW><ROW><id>13018779</id><snippet>tkFileDialog.askdirectory(initialdir='.')</snippet></ROW><ROW><id>13018800</id><snippet>import matplotlib.pyplot as plt
import numpy as np
sin, cos = np.sin, np.cos

fig = plt.figure(frameon = False)
fig.set_size_inches(5, 8)
ax = plt.Axes(fig, [0., 0., 1., 1.], )
ax.set_axis_off()
fig.add_axes(ax)

x = np.linspace(-4, 4, 20)
y = np.linspace(-4, 4, 20)
X, Y = np.meshgrid(x, y)
deg = np.arctan(Y**3-3*Y-X)
plt.quiver(X, Y, cos(deg), sin(deg), pivot = 'tail', units = 'dots', color = 'red', )
plt.savefig('/tmp/test.png', dpi = 200)
</snippet></ROW><ROW><id>13018800</id><snippet>fig.set_size_inches(5, 8)
</snippet></ROW><ROW><id>13018800</id><snippet>plt.savefig('/tmp/test.png', dpi = 200)
</snippet></ROW><ROW><id>13018878</id><snippet>OUTPUTi</snippet></ROW><ROW><id>13018878</id><snippet>i</snippet></ROW><ROW><id>13018878</id><snippet>    TOTALXML = len(glob.glob(os.path.join(path, '*.xml')))
    print TOTALXML
    OUTPUT = []

    for XMLFile in glob.glob(os.path.join(path, '*.xml')):
        xmldoc = parse(XMLFile)
        order_number = xmldoc.getElementsByTagName('Extrinsic')[0].firstChild.data
        order_name = xmldoc.getElementsByTagName('DeliverTo')[0].firstChild.data
        street1 = xmldoc.getElementsByTagName('Street1')[0].firstChild.data
        state = xmldoc.getElementsByTagName('State')[0].firstChild.data
        zip_code = xmldoc.getElementsByTagName('PostalCode')[0].firstChild.data
        OUTPUT.append(order_number+' '+order_name+' '+street1+' '+state+' '+zip_code)
        print OUTPUT[-1]

    OUTPUT = ''.join(OUTPUT)
    return (OUTPUT, """&lt;br&gt;&lt;br&gt;&lt;a href="/exit"&gt;Quit&lt;/a&gt;""")
</snippet></ROW><ROW><id>13019051</id><snippet>&lt;i</snippet></ROW><ROW><id>13019051</id><snippet>&gt;i</snippet></ROW><ROW><id>13019342</id><snippet>re.escape</snippet></ROW><ROW><id>13019342</id><snippet>var1</snippet></ROW><ROW><id>13019342</id><snippet>var2</snippet></ROW><ROW><id>13019342</id><snippet>var1 = r'\\some\String\to\Match'
var2 = re.escape('\\\\some\\String\\')
pattern = re.compile(var2 + '(.*)', re.IGNORECASE)
found = pattern.match(var1)
</snippet></ROW><ROW><id>13019342</id><snippet>r'\\some\String\to\Match'</snippet></ROW><ROW><id>13019342</id><snippet>var2</snippet></ROW><ROW><id>13019454</id><snippet>in</snippet></ROW><ROW><id>13019454</id><snippet>select pk from table where array_column NOT IN(paramstring);
</snippet></ROW><ROW><id>13019454</id><snippet>select([the_table.c.pk]).where(text("array_column @&gt; ARRAY[:element_value]"))).params(element_value='paramstring')
</snippet></ROW><ROW><id>13019685</id><snippet>System.out.println("Key is..." + bytesToHex(keyBytes) + "\n");
// ...
SecretKeySpec macKey = new SecretKeySpec(keyBytes, "RAW");
</snippet></ROW><ROW><id>13019685</id><snippet>k = "3132333435363738393031323334353637383930"
</snippet></ROW><ROW><id>13019685</id><snippet>raw_key = k.decode('hex')
</snippet></ROW><ROW><id>13020012</id><snippet>import re

mult = {'h': 60*60, 'mn': 60}
res = sum(int(num) * mult.get(val, 1) for num, val in re.findall('(\d+)(\w+)', '1h 34mn 2s'))
# 5642
</snippet></ROW><ROW><id>13020013</id><snippet>apt-get install libxml2-dev libxslt-dev
</snippet></ROW><ROW><id>13020013</id><snippet>libxml/xmlversion.h: No such file or directory</snippet></ROW><ROW><id>13020027</id><snippet>BDay()</snippet></ROW><ROW><id>13020027</id><snippet>from pandas.tseries.offsets import *

In [185]: s
Out[185]: 
2011-01-01   -0.011629
2011-01-02   -0.089666
2011-01-03   -1.314430
2011-01-04   -1.867307
2011-01-05    0.779609
2011-01-06    0.588950
2011-01-07   -2.505803
2011-01-08    0.800262
2011-01-09    0.376406
2011-01-10   -0.469988
Freq: D

In [186]: s.asfreq(BDay())
Out[186]: 
2011-01-03   -1.314430
2011-01-04   -1.867307
2011-01-05    0.779609
2011-01-06    0.588950
2011-01-07   -2.505803
2011-01-10   -0.469988
Freq: B
</snippet></ROW><ROW><id>13020027</id><snippet>In [187]: x=datetime(2011, 1, 5)

In [188]: y=datetime(2011, 1, 9)

In [189]: s.ix[x:y]
Out[189]: 
2011-01-05    0.779609
2011-01-06    0.588950
2011-01-07   -2.505803
2011-01-08    0.800262
2011-01-09    0.376406
Freq: D

In [190]: s.ix[x:y].asfreq(BDay())
Out[190]: 
2011-01-05    0.779609
2011-01-06    0.588950
2011-01-07   -2.505803
Freq: B
</snippet></ROW><ROW><id>13020027</id><snippet>count()</snippet></ROW><ROW><id>13020027</id><snippet>In [191]: s.ix[x:y].asfreq(BDay()).count()
Out[191]: 3
</snippet></ROW><ROW><id>13020133</id><snippet>from xml.dom.minidom import parse, parseString
import os, glob, re
import cherrypy
class Root(object):
    def index(self):
        path = 'C:\Vestigo\XML'

        TOTALXML = len(glob.glob(os.path.join(path, '*.xml')))
        print TOTALXML
        i = 0

        for XMLFile in glob.glob(os.path.join(path, '*.xml')):
            xmldoc = parse(XMLFile)
            order_number = xmldoc.getElementsByTagName('Extrinsic')[0].firstChild.data
            order_name = xmldoc.getElementsByTagName('DeliverTo')[0].firstChild.data
            street1 = xmldoc.getElementsByTagName('Street1')[0].firstChild.data
            state = xmldoc.getElementsByTagName('State')[0].firstChild.data
            zip_code = xmldoc.getElementsByTagName('PostalCode')[0].firstChild.data
            OUTPUTi = order_number+' '+order_name+' '+street1+' '+state+' '+zip_code
            i += 1
            print OUTPUTi
        return (OUTPUTi, """&lt;br&gt;&lt;br&gt;&lt;a href="/exit"&gt;Quit&lt;/a&gt;""")
    index.exposed = True

    def exit(self):
        raise SystemExit(0)
    exit.exposed = True

def start():
    import webbrowser
    cherrypy.tree.mount(Root(), '/')
    cherrypy.engine.start_with_callback(
        webbrowser.open,
        ('http://localhost:8080/',),
        )
    cherrypy.engine.block()

if __name__=='__main__':
    start()
</snippet></ROW><ROW><id>13020322</id><snippet>instance:
     Id: i-aaaaaaaa
     environment: us-east
     serverId: someServer
     awsHostname: ip-someip
     serverName: somewebsite.com
     ipAddr: 192.168.0.1
     roles: [webserver,php]
</snippet></ROW><ROW><id>13020322</id><snippet>yaml.load(...)</snippet></ROW><ROW><id>13020322</id><snippet>{'instance': {'environment': 'us-east', 'roles': ['webserver', 'php'], 'awsHostname': 'ip-someip', 'serverName': 'somewebsite.com', 'ipAddr': '192.168.0.1', 'serverId': 'someServer', 'Id': 'i-aaaaaaaa'}}
</snippet></ROW><ROW><id>13020322</id><snippet>&gt;&gt;&gt; for key, value in yaml.load(open('test.txt'))['instance'].iteritems():
    print key, value


environment us-east
roles ['webserver', 'php']
awsHostname ip-someip
serverName somewebsite.com
ipAddr 192.168.0.1
serverId someServer
Id i-aaaaaaaa
</snippet></ROW><ROW><id>13020486</id><snippet>In [82]: import datetime as dt
In [85]: now = dt.datetime.now()

In [129]: event_date = dt.date(2012,10,22)    
In [155]: event_date = dt.datetime(event_date.year, event_date.month, event_date.day)

In [130]: event_time = dt.timedelta(seconds = 28800)    
In [131]: event = event_date + event_time  

In [132]: elapsed = now - event
Out[132]: datetime.timedelta(0, 35008, 781476)    
In [133]: elapsed.total_seconds()
Out[133]: 35008.781476    
In [134]: elapsed.total_seconds() // 60
Out[134]: 583.0
</snippet></ROW><ROW><id>13020486</id><snippet>total_seconds</snippet></ROW><ROW><id>13020486</id><snippet>In [149]: (elapsed.days*24*60*60+elapsed.seconds+elapsed.microseconds/1e6)//60
Out[149]: 583.0
</snippet></ROW><ROW><id>13020558</id><snippet>choices</snippet></ROW><ROW><id>13020558</id><snippet>POST</snippet></ROW><ROW><id>13020558</id><snippet>AVAILABLE_CHOICES = [('1','1'),('2','2')]
DEFAULT_CHOICES = []

class MyForm(Form):
    assigned = SelectMultipleField('Assigned', choices=DEFAULT_CHOICES)
    available = SelectMultipleField('Available', choices=AVAILABLE_CHOICES)

@app.view("/myview", methods=['GET','POST'])
def myview():
    form = MyForm(request.form)
    if request.method == 'POST':
        form.assigned.choices = AVAILABLE_CHOICES
        if form.validate():
            return render_template("success.html")
        else:
            form.assigned.choices = DEFAULT_CHOICES

    return render_template("index.html", form=form)
</snippet></ROW><ROW><id>13020701</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13020701</id><snippet>&gt;&gt;&gt; from itertools import groupby,islice
&gt;&gt;&gt; a = ['a', 'a', 'b', 'c', 'c', 'c', 'b']

&gt;&gt;&gt; [list(g) for k,g in groupby(a)]
[['a', 'a'], ['b'], ['c', 'c', 'c'], ['b']] 

&gt;&gt;&gt; [k for k,g in groupby(a) if len(list(g))&gt;=2]
['a', 'c']
</snippet></ROW><ROW><id>13020701</id><snippet>islice()</snippet></ROW><ROW><id>13020701</id><snippet>&gt;&gt;&gt; [k for k,g in groupby(a) if len(list(islice(g,0,2)))==2]
&gt;&gt;&gt; ['a', 'c']
</snippet></ROW><ROW><id>13020701</id><snippet>zip()</snippet></ROW><ROW><id>13020701</id><snippet>izip()</snippet></ROW><ROW><id>13020701</id><snippet>In [198]: set(x[0] for x in izip(a,a[1:]) if x[0]==x[1])
Out[198]: set(['a', 'c'])

In [199]: set(x[0] for x in zip(a,a[1:]) if x[0]==x[1])
Out[199]: set(['a', 'c'])
</snippet></ROW><ROW><id>13020701</id><snippet>timeit</snippet></ROW><ROW><id>13020701</id><snippet>from itertools import *

a='aaaabbbccccddddefgggghhhhhiiiiiijjjkkklllmnooooooppppppppqqqqqqsssstuuvv'

def grp_isl():
    [k for k,g in groupby(a) if len(list(islice(g,0,2)))==2]

def grpby():
    [k for k,g in groupby(a) if len(list(g))&gt;=2]

def chn():
    set(x[1] for x in chain(izip(*([iter(a)] * 2)), izip(*([iter(a[1:])] * 2))) if x[0] == x[1])

def dread():
    set(a[i] for i in range(1, len(a)) if a[i] == a[i-1])

def xdread():
    set(a[i] for i in xrange(1, len(a)) if a[i] == a[i-1])

def inrow():
    inRow = []
    last = None
    for x in a:
        if last == x and (len(inRow) == 0 or inRow[-1] != x):
            inRow.append(last)
        last = x

def zipp():
    set(x[0] for x in zip(a,a[1:]) if x[0]==x[1])

def izipp():
    set(x[0] for x in izip(a,a[1:]) if x[0]==x[1])

if __name__=="__main__":
    import timeit
    print "islice",timeit.timeit("grp_isl()", setup="from __main__ import grp_isl")
    print "grpby",timeit.timeit("grpby()", setup="from __main__ import grpby")
    print "dread",timeit.timeit("dread()", setup="from __main__ import dread")
    print "xdread",timeit.timeit("xdread()", setup="from __main__ import xdread")
    print "chain",timeit.timeit("chn()", setup="from __main__ import chn")
    print "inrow",timeit.timeit("inrow()", setup="from __main__ import inrow")
    print "zip",timeit.timeit("zipp()", setup="from __main__ import zipp")
    print "izip",timeit.timeit("izipp()", setup="from __main__ import izipp")
</snippet></ROW><ROW><id>13020701</id><snippet>islice 39.9123107277
grpby 30.1204478987
dread 17.8041124706
xdread 15.3691785568
chain 17.4777339702
inrow 11.8577565327           
zip 16.6348844045
izip 15.1468557105
</snippet></ROW><ROW><id>13020785</id><snippet>country_timezones</snippet></ROW><ROW><id>13020785</id><snippet>pytz</snippet></ROW><ROW><id>13020785</id><snippet>from pytz import country_timezones

timezone_country = {}
for countrycode in country_timezones:
    timezones = country_timezones[countrycode]
    for timezone in timezones:
        timezone_country[timezone] = countrycode
</snippet></ROW><ROW><id>13020785</id><snippet>&gt;&gt;&gt; timezone_country['Europe/Zurich']
u'CH'
</snippet></ROW><ROW><id>13020921</id><snippet>def sign(key, msg):
  return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).hexdigest()
</snippet></ROW><ROW><id>13020921</id><snippet>def sign(key, msg):
  return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()
</snippet></ROW><ROW><id>13021327</id><snippet>_resolve_class</snippet></ROW><ROW><id>13021327</id><snippet>exec</snippet></ROW><ROW><id>13021327</id><snippet>_resolve_class</snippet></ROW><ROW><id>13021327</id><snippet>exec</snippet></ROW><ROW><id>13021327</id><snippet>__import__</snippet></ROW><ROW><id>13021327</id><snippet>help(__import__)</snippet></ROW><ROW><id>13021327</id><snippet>def _resolve_class(self, class_path):
    modulepath, classname = class_path.rsplit('.', 1)
    module = __import__(modulepath, fromlist=[classname])
    return getattr(module, classname)
</snippet></ROW><ROW><id>13021327</id><snippet>rsplit</snippet></ROW><ROW><id>13021361</id><snippet>user.save()
</snippet></ROW><ROW><id>13021384</id><snippet>sort unique_id
tempfile original
save "`original'"
clear
insheet using group_fix.csv, comma
sort unique_id
merge unique_id using "`original'"
</snippet></ROW><ROW><id>13021384</id><snippet> save "`original'"
</snippet></ROW><ROW><id>13021436</id><snippet>numpy.int64</snippet></ROW><ROW><id>13021436</id><snippet>int</snippet></ROW><ROW><id>13021436</id><snippet>numpy.int64</snippet></ROW><ROW><id>13021436</id><snippet>int</snippet></ROW><ROW><id>13021436</id><snippet># round to int and convert to int    
xx = map(int, np.rint(x).astype(int)) 
yy = map(int, np.rint(y).astype(int))
</snippet></ROW><ROW><id>13021436</id><snippet>type</snippet></ROW><ROW><id>13021436</id><snippet>&gt;&gt;&gt; a = np.array([[1.3, 403.2], [1.0, 0.3]])
&gt;&gt;&gt; b = np.rint(a).astype(int)
&gt;&gt;&gt; b.dtype
 dtype('int64')
&gt;&gt;&gt; type(b[0, 0])
 numpy.int64
&gt;&gt;&gt; type(int(b[0, 0]))
 int
</snippet></ROW><ROW><id>13021492</id><snippet>from src import package
import functools

def testTimingOfFunc(f):
    time = timeit.timeit(functools.partial(package.func, f))
</snippet></ROW><ROW><id>13021524</id><snippet>zip()</snippet></ROW><ROW><id>13021524</id><snippet>In [114]: file1 = ['file1,product1,-1000.56', 'file1,product2,500.43']

In [115]: file2 = ['file2,product1,-1001.37', 'file2,product2,511.99']

In [116]: for f1,f2 in zip(file1,file2):
    spl1=f1.split(',')     #returns something like ['file1', 'product2', '500.43']
    spl2=f2.split(',')     #returns something like ['file2', 'product2', '511.99']

    diff=abs(float(spl1[-1])-float(spl2[-1]))  ##use abs() to find the difference

    if diff&gt;5:  
        print " ".join(spl1)                    #use print() as you're on py 3.x 
        print " ".join(spl2)                    #join the lists by " " 
        print "${0}".format(diff)
   .....:         
   .....:         
file1 product2 500.43
file2 product2 511.99
$11.56
</snippet></ROW><ROW><id>13021640</id><snippet>TypeError: not all arguments converted during string formatting</snippet></ROW><ROW><id>13021640</id><snippet>cursor.executemany(...)</snippet></ROW><ROW><id>13021640</id><snippet>cursor.execute(...)</snippet></ROW><ROW><id>13021640</id><snippet>db.commit()</snippet></ROW><ROW><id>13021797</id><snippet>.get_loc()</snippet></ROW><ROW><id>13021797</id><snippet>In [45]: df = DataFrame({"pear": [1,2,3], "apple": [2,3,4], "orange": [3,4,5]})

In [46]: df.columns
Out[46]: Index([apple, orange, pear], dtype=object)

In [47]: df.columns.get_loc("pear")
Out[47]: 2
</snippet></ROW><ROW><id>13021797</id><snippet>df["pear"]</snippet></ROW><ROW><id>13021797</id><snippet>df[["apple", "orange"]]</snippet></ROW><ROW><id>13021797</id><snippet>df.columns.isin(["orange", "pear"])</snippet></ROW><ROW><id>13021820</id><snippet># OS X Lion Support
if platform.mac_ver()[0].startswith("10.7"):
extra_link_args += ["-framework", "AudioUnit"]
</snippet></ROW><ROW><id>13021820</id><snippet>if platform.mac_ver()[0].startswith("10.7"):
</snippet></ROW><ROW><id>13021820</id><snippet>if platform.mac_ver()[0].startswith("10.7") or platform.mac_ver()[0].startswith("10.8"):
</snippet></ROW><ROW><id>13021820</id><snippet>&gt; python ~/a.py 
a
&gt; cat ~/a.py 
import pjsua

test = "a"
print test
</snippet></ROW><ROW><id>13021842</id><snippet>run()</snippet></ROW><ROW><id>13021842</id><snippet>args</snippet></ROW><ROW><id>13021842</id><snippet>Process(target=bottle.run, kwargs=dict(host='0.0.0.0', port=8080))
</snippet></ROW><ROW><id>13022023</id><snippet>print ("\n".join(map(str, c.most_common(10))))
</snippet></ROW><ROW><id>13022023</id><snippet>print ("\n".join("{}: {}".format(k,v) for k,v in c.most_common(10)))
</snippet></ROW><ROW><id>13022042</id><snippet>os.popen(cmd)
</snippet></ROW><ROW><id>13022042</id><snippet>proc = subprocess.Popen('./scriptname', shell = True, 
                       cwd = tests)
proc.communicate()
</snippet></ROW><ROW><id>13022140</id><snippet>None</snippet></ROW><ROW><id>13022140</id><snippet>def computeRoot(poly, x_0, epsilon):
    x = x_0
    iter = 0
    list = []
    polyStart = poly[:]
    while abs(evaluatePoly(poly, x)) &gt;= epsilon:
        poly = polyStart[:]
        l = evaluatePoly(poly,x)
        if abs(l) &lt; epsilon:
            list.append(x)
            list.append(iter)
            return list
        else:
            poly = polyStart[:]
            d = computeDeriv(poly)
            dn = evaluatePoly(d, x)
            x = (x - (l/dn))
            iter = iter + 1
</snippet></ROW><ROW><id>13022140</id><snippet>return</snippet></ROW><ROW><id>13022140</id><snippet>abs(evaluatePoly(poly, x)) &gt;= epsilon</snippet></ROW><ROW><id>13022140</id><snippet>False</snippet></ROW><ROW><id>13022140</id><snippet>while</snippet></ROW><ROW><id>13022140</id><snippet>None</snippet></ROW><ROW><id>13022140</id><snippet>return</snippet></ROW><ROW><id>13022140</id><snippet>None</snippet></ROW><ROW><id>13022140</id><snippet>return</snippet></ROW><ROW><id>13022154</id><snippet>class Individual:
    def append(self, chrom):
        """
            post[self]:
                __old__.self is self
                len(__old__.self.chromosomes)+1 == len(self.chromosomes)
                self.chromosomes[-1] == chrom
        """
        self.chromosomes.append(chrom)
</snippet></ROW><ROW><id>13022413</id><snippet> p = Parameterize(source, 256, 128)
 res = p.usefull_attribute
</snippet></ROW><ROW><id>13022413</id><snippet>dir(p)</snippet></ROW><ROW><id>13022413</id><snippet>help(p)</snippet></ROW><ROW><id>13022570</id><snippet>HelpFormatter</snippet></ROW><ROW><id>13022570</id><snippet>HelpFormatter</snippet></ROW><ROW><id>13022781</id><snippet>data = root.findall('data/METAR')
</snippet></ROW><ROW><id>13022866</id><snippet>dummy = "beans"
newdummy = ""
for i in xrange(len(dummy)):
    newdummy += chr(ord(dummy[i])+5)
dummy = newdummy
print(dummy)
</snippet></ROW><ROW><id>13022866</id><snippet>dummy = ''.join(chr(ord(c) + 5) for c in dummy)
print(dummy)
</snippet></ROW><ROW><id>13022977</id><snippet>find_all</snippet></ROW><ROW><id>13022977</id><snippet>findAll</snippet></ROW><ROW><id>13022977</id><snippet>sp</snippet></ROW><ROW><id>13022977</id><snippet>In [1]: import urllib2

In [2]: from bs4 import BeautifulSoup

In [3]: response = urllib2.urlopen('http://www.directmirror.com/files/0GR7ZPCY')

In [4]: html = response.read()

In [5]: sp = BeautifulSoup(html)

In [6]: ll = sp.find_all('a')

In [7]: ll
Out[7]:
[&lt;a class="twitter-share-button" data-count="vertical" data-via="DirectMirror" href="http://twitter.com/share"&gt;Tweet&lt;/a&gt;,
 &lt;a href="/"&gt;&lt;img alt="logo" border="0" src="/images/logo2.png"/&gt;&lt;/a&gt;,
 &lt;a href="/register.php" style="color:#ffffff"&gt;Register&lt;/a&gt;,
 &lt;a href="/login.php" style="color:#ffffff"&gt;Login&lt;/a&gt;,
 # Continues...
</snippet></ROW><ROW><id>13023045</id><snippet>sys.modules</snippet></ROW><ROW><id>13023095</id><snippet>a = [1, 2, 3]
b = a # b refers to a

a[0] = 3
print b # prints [3, 2, 3]
</snippet></ROW><ROW><id>13023095</id><snippet>b = b[:]
</snippet></ROW><ROW><id>13023140</id><snippet>re_fn = re.compile('(?P&lt;T&gt;[a-zA-Z0-9]{3,4})_(?P&lt;M&gt;[a-zA-Z0-9]{3,4})_(?P&lt;Dt&gt;[0-9]{10})_(?P&lt;H&gt;[0-9]{3}).csv')
</snippet></ROW><ROW><id>13023140</id><snippet>groups = re_fn.match(fileName).groupdict()
# do stuff with groups['T'], groups['M'], groups['Dt'], groups['H']
</snippet></ROW><ROW><id>13023176</id><snippet>In [2]: firstDict={'ERITREA': 'ER', 'LAOS': 'LA', 'PORTUGAL': 'PT', "D'IVOIRE": 'CI', 'MONTENEGRO': 'ME', 'NEW CALEDONIA': 'NC', 'SVALBARD AND JAN MAYEN': 'SJ', 'BAHAMAS': 'BS', 'TOGO': 'TG', 'CROATIA': 'HR', 'LUXEMBOURG': 'LU', 'GHANA': 'GH'}

In [3]: result =({'count': 1L, 'country': 'Eritrea'}, {'count': 1L, 'country': 'Togo'}, {'count': 1L, 'country': 'Sierra Leone'}, {'count': 3L, 'country': 'Bahamas'}, {'count': 1L, 'country': 'Ghana'})

In [4]: resdict = {r['country'].upper():r['count'] for r in result}

In [5]: mainRes = {abbrev:resdict.get(country,0) for country, abbrev in firstDict.items()}

In [6]: mainRes
Out[6]: 
{'BS': 3L,
 'CI': 0,
 'ER': 1L,
 'GH': 1L,
 'HR': 0,
 'LA': 0,
 'LU': 0,
 'ME': 0,
 'NC': 0,
 'PT': 0,
 'SJ': 0,
 'TG': 1L}
</snippet></ROW><ROW><id>13023176</id><snippet>In [13]: resdict = dict((r['country'].upper(), r['count']) for r in result)

In [14]: mainRes = dict( (abbrev, resdict.get(country,0)) for country, abbrev in firstDict.items())
</snippet></ROW><ROW><id>13023204</id><snippet>printPattern(0)</snippet></ROW><ROW><id>13023204</id><snippet>printPattern(n)</snippet></ROW><ROW><id>13023204</id><snippet>n&gt;=1</snippet></ROW><ROW><id>13023204</id><snippet>*</snippet></ROW><ROW><id>13023204</id><snippet>printPattern(n-1)</snippet></ROW><ROW><id>13023204</id><snippet>!</snippet></ROW><ROW><id>13023268</id><snippet>lonlat</snippet></ROW><ROW><id>13023268</id><snippet>distance</snippet></ROW><ROW><id>13023268</id><snippet>def haversine_pairwise(phi, lam):

    dphi = phi[1:]-phi[:-1]
    dlam = lam[1:]-lam[:-1]

    # r is assumed to be a known constant
    return r*(0.5*(1-cos(dphi)) + cos(phi[1:])*cos(phi[:-1])*0.5*(1-cos(dlam)))
</snippet></ROW><ROW><id>13023268</id><snippet>cumsum</snippet></ROW><ROW><id>13023426</id><snippet>S(x) = 1^2 + 2^2 + ... x^2
</snippet></ROW><ROW><id>13023426</id><snippet>S(x) = (1^2 + 2^2 + ...(x-1)^2 )+ x^2

S(x) = S(x-1) + x^2. 
</snippet></ROW><ROW><id>13023426</id><snippet>def sumSquares(n):
        return sumSquares(n-1)+ n*n
</snippet></ROW><ROW><id>13023426</id><snippet>def sumSquares(n):
    assert n&gt;=0
    if (n == 0):
        return 0
    else:
        return sumSquares(n-1)+ n*n
</snippet></ROW><ROW><id>13023453</id><snippet>NOT_SET = object()

def some_function(arg=NOT_SET):
    if arg is NOT_SET:
        # the user didn't pass in a value for 'arg'
     else:
        # the user passed in a value for 'arg'
</snippet></ROW><ROW><id>13023453</id><snippet>if</snippet></ROW><ROW><id>13023453</id><snippet>None</snippet></ROW><ROW><id>13023526</id><snippet>Dict2['var1']</snippet></ROW><ROW><id>13023526</id><snippet>Dict2['var1']['result']</snippet></ROW><ROW><id>13023526</id><snippet>Dict1['var1'] = {'value':20, 'result':None}
Dict1['var2'] = {'value':30, 'result':None}
Dict2['var1'] = {'value':23, 'result':None}
Dict2['var2'] = {'value':26, 'result':None}


if Dict1['var1']['value']  &lt; Dict2['var1']['value']:
    Dict2['var1']['result'] = True
</snippet></ROW><ROW><id>13023619</id><snippet>_NOT_SET = object()

def some_function(some_arg=_NOT_SET):
    if some_arg is _NOT_SET:
        # ...
</snippet></ROW><ROW><id>13023619</id><snippet>is</snippet></ROW><ROW><id>13023879</id><snippet>StringVar.get() # Return value of variable as string.
</snippet></ROW><ROW><id>13023879</id><snippet>StringVar.__str__() # Return the name of the variable in Tcl.
</snippet></ROW><ROW><id>13023879</id><snippet>file_name = url.get().split('/')[-1]
</snippet></ROW><ROW><id>13023938</id><snippet>def avg(l):
    if l:
        return sum(l)/len(l)
    return 0

def score(s, d):
    return avg([d.get(x,[0])[0] for x in s.lower().split()])
</snippet></ROW><ROW><id>13023938</id><snippet>s</snippet></ROW><ROW><id>13023938</id><snippet>d</snippet></ROW><ROW><id>13023938</id><snippet>def score(s, d):
    return avg([d[x][0] for x in s.lower().split() if x in d])
</snippet></ROW><ROW><id>13024040</id><snippet>"%(bench)s_serial" % {'bench':'umpalumpa'}
</snippet></ROW><ROW><id>13024040</id><snippet>s</snippet></ROW><ROW><id>13024040</id><snippet>"umpalumpa_serial"</snippet></ROW><ROW><id>13024040</id><snippet>%</snippet></ROW><ROW><id>13024059</id><snippet>Tk()</snippet></ROW><ROW><id>13024059</id><snippet>Toplevel</snippet></ROW><ROW><id>13024059</id><snippet>Toplevel</snippet></ROW><ROW><id>13024059</id><snippet>game</snippet></ROW><ROW><id>13024059</id><snippet>ImageTk.PhotoImage</snippet></ROW><ROW><id>13024059</id><snippet>image1</snippet></ROW><ROW><id>13024215</id><snippet>repr</snippet></ROW><ROW><id>13024215</id><snippet>&gt;&gt;&gt; a=r"""&lt;h2&gt;&lt;a href=\"/accurate-data/210-0023.prd?pageLevel=&amp;skuId=210-0023\"&gt;more-accurate-data&lt;/a&gt;&lt;/h2&gt;"""
&gt;&gt;&gt; print repr(a)
'&lt;h2&gt;&lt;a href=\\"/accurate-data/210-0023.prd?pageLevel=&amp;skuId=210-0023\\"&gt;more-accurate-data&lt;/a&gt;&lt;/h2&gt;'
</snippet></ROW><ROW><id>13024215</id><snippet>&gt;&gt;&gt; regex = re.compile(r"""&lt;h2&gt;&lt;a href=\\"/accurate(.*?)\\"&gt;""")
&gt;&gt;&gt; regex.match(a)
&lt;_sre.SRE_Match object at 0x20fbf30&gt;
</snippet></ROW><ROW><id>13024215</id><snippet>repr</snippet></ROW><ROW><id>13024551</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def unpack_or_index(t=(0, 1)):
...     _, x = t
...     x = t[1]
... 
&gt;&gt;&gt; dis.dis(unpack_or_index)
  2           0 LOAD_FAST                0 (t)
              3 UNPACK_SEQUENCE          2
              6 STORE_FAST               1 (_)
              9 STORE_FAST               2 (x)

  3          12 LOAD_FAST                0 (t)
             15 LOAD_CONST               1 (1)
             18 BINARY_SUBSCR       
             19 STORE_FAST               2 (x)
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>13024551</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>13024551</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>13024551</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>13024551</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>13024551</id><snippet>        if (PyTuple_CheckExact(v) &amp;&amp;
            PyTuple_GET_SIZE(v) == oparg) {
            PyObject **items = \
                ((PyTupleObject *)v)-&gt;ob_item;
            while (oparg--) {
                w = items[oparg];
                Py_INCREF(w);
                PUSH(w);
            }
            Py_DECREF(v);
            continue;
        } // followed by an "else if" statement for a list with similar code
</snippet></ROW><ROW><id>13024551</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>13024551</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>13024551</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>13024573</id><snippet>signal.SIGINT</snippet></ROW><ROW><id>13024603</id><snippet>screencapture</snippet></ROW><ROW><id>13024603</id><snippet>$ time screencapture -t png /tmp/test.png
real        0m0.235s
user        0m0.191s
sys         0m0.016s
$ time screencapture -t tiff /tmp/test.tiff
real        0m0.079s
user        0m0.028s
sys         0m0.026s
</snippet></ROW><ROW><id>13024603</id><snippet>CGWindowListCreateImage</snippet></ROW><ROW><id>13024603</id><snippet>Quartz.CoreGraphics</snippet></ROW><ROW><id>13024603</id><snippet>CGDataProviderCopyData</snippet></ROW><ROW><id>13024603</id><snippet>ScreenPixel.pixel</snippet></ROW><ROW><id>13024603</id><snippet>0.01ms * 1650*1050</snippet></ROW><ROW><id>13024603</id><snippet>struct.unpack_from</snippet></ROW><ROW><id>13024603</id><snippet>import time
import struct

import Quartz.CoreGraphics as CG


class ScreenPixel(object):
    """Captures the screen using CoreGraphics, and provides access to
    the pixel values.
    """

    def capture(self, region = None):
        """region should be a CGRect, something like:

        &gt;&gt;&gt; import Quartz.CoreGraphics as CG
        &gt;&gt;&gt; region = CG.CGRectMake(0, 0, 100, 100)
        &gt;&gt;&gt; sp = ScreenPixel()
        &gt;&gt;&gt; sp.capture(region=region)

        The default region is CG.CGRectInfinite (captures the full screen)
        """

        if region is None:
            region = CG.CGRectInfinite
        else:
            # TODO: Odd widths cause the image to warp. This is likely
            # caused by offset calculation in ScreenPixel.pixel, and
            # could could modified to allow odd-widths
            if region.size.width % 2 &gt; 0:
                emsg = "Capture region width should be even (was %s)" % (
                    region.size.width)
                raise ValueError(emsg)

        # Create screenshot as CGImage
        image = CG.CGWindowListCreateImage(
            region,
            CG.kCGWindowListOptionOnScreenOnly,
            CG.kCGNullWindowID,
            CG.kCGWindowImageDefault)

        # Intermediate step, get pixel data as CGDataProvider
        prov = CG.CGImageGetDataProvider(image)

        # Copy data out of CGDataProvider, becomes string of bytes
        self._data = CG.CGDataProviderCopyData(prov)

        # Get width/height of image
        self.width = CG.CGImageGetWidth(image)
        self.height = CG.CGImageGetHeight(image)

    def pixel(self, x, y):
        """Get pixel value at given (x,y) screen coordinates

        Must call capture first.
        """

        # Pixel data is unsigned char (8bit unsigned integer),
        # and there are for (blue,green,red,alpha)
        data_format = "BBBB"

        # Calculate offset, based on
        # http://www.markj.net/iphone-uiimage-pixel-color/
        offset = 4 * ((self.width*int(round(y))) + int(round(x)))

        # Unpack data from string into Python'y integers
        b, g, r, a = struct.unpack_from(data_format, self._data, offset=offset)

        # Return BGRA as RGBA
        return (r, g, b, a)


if __name__ == '__main__':
    # Timer helper-function
    import contextlib

    @contextlib.contextmanager
    def timer(msg):
        start = time.time()
        yield
        end = time.time()
        print "%s: %.02fms" % (msg, (end-start)*1000)


    # Example usage
    sp = ScreenPixel()

    with timer("Capture"):
        # Take screenshot (takes about 70ms for me)
        sp.capture()

    with timer("Query"):
        # Get pixel value (takes about 0.01ms)
        print sp.width, sp.height
        print sp.pixel(0, 0)


    # To verify screen-cap code is correct, save all pixels to PNG,
    # using http://the.taoofmac.com/space/projects/PNGCanvas

    from pngcanvas import PNGCanvas
    c = PNGCanvas(sp.width, sp.height)
    for x in range(sp.width):
        for y in range(sp.height):
            c.point(x, y, color = sp.pixel(x, y))

    with open("test.png", "wb") as f:
        f.write(c.dump())
</snippet></ROW><ROW><id>13024716</id><snippet>inspect</snippet></ROW><ROW><id>13024716</id><snippet>import inspect
inspect.getargspec(func).args
</snippet></ROW><ROW><id>13024716</id><snippet>['name']
</snippet></ROW><ROW><id>13024969</id><snippet>ord('z')</snippet></ROW><ROW><id>13024969</id><snippet>ord('a')</snippet></ROW><ROW><id>13024969</id><snippet>for i in range(ord('z') - ord('a') + 1): # equivalent to range(26); i.e. 0-25
    print chr(((i+2) % 26) + ord('a')) # results in 2+97 'c', 3+97 'd', etc.
</snippet></ROW><ROW><id>13024969</id><snippet>i+2</snippet></ROW><ROW><id>13024969</id><snippet>i</snippet></ROW><ROW><id>13024969</id><snippet>ord('a')</snippet></ROW><ROW><id>13024969</id><snippet>% 97</snippet></ROW><ROW><id>13024969</id><snippet>- 97</snippet></ROW><ROW><id>13024969</id><snippet>print chr(((i+2) - 97) + 97 )
</snippet></ROW><ROW><id>13024969</id><snippet>print chr((i+2) - 97 + 97)
</snippet></ROW><ROW><id>13024969</id><snippet>print chr(i+2)</snippet></ROW><ROW><id>13025817</id><snippet>for element in my_hash_dict:     
    for y in element:
        do something with y ...
</snippet></ROW><ROW><id>13025967</id><snippet>MyModel</snippet></ROW><ROW><id>13025967</id><snippet>_auto_now</snippet></ROW><ROW><id>13025967</id><snippet>timestamp</snippet></ROW><ROW><id>13025967</id><snippet>def testMyModelFilter(self):
  # Change the auto_now parameter to False
  MyModel.timestamp._auto_now = False

  # Test as usual...
  test1 = MyModel()
  test1.timestamp = datetime.datetime.now() - datetime.timedelta(hours=2)
  test1.put()
  test2 = MyModel()
  test2.timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
  test2.put()

  hour_ago = datetime.datetime.now() - datetime.timedelta(hours=1)
  fetched = MyModel.query().filter(MyModel.timestamp &lt; hour_ago).fetch(
      None, keys_only=True)
</snippet></ROW><ROW><id>13026312</id><snippet>$ ipython --pylab=inline
</snippet></ROW><ROW><id>13026312</id><snippet>In[x]: %pylab inline 
</snippet></ROW><ROW><id>13026571</id><snippet>x = a
y = b
foo(x, y)
</snippet></ROW><ROW><id>13026571</id><snippet>x</snippet></ROW><ROW><id>13026571</id><snippet>y</snippet></ROW><ROW><id>13026571</id><snippet>x</snippet></ROW><ROW><id>13026571</id><snippet>y</snippet></ROW><ROW><id>13026775</id><snippet>os.replace()</snippet></ROW><ROW><id>13026775</id><snippet># MOVEFILE_REPLACE_EXISTING = 0x1; MOVEFILE_WRITE_THROUGH = 0x8
ctypes.windll.kernel32.MoveFileExW(src, dst, 0x1)
</snippet></ROW><ROW><id>13026775</id><snippet>atomicfile.atomic_rename()</snippet></ROW><ROW><id>13026797</id><snippet>HOST</snippet></ROW><ROW><id>13026797</id><snippet>0.0.0.0</snippet></ROW><ROW><id>13026865</id><snippet>f</snippet></ROW><ROW><id>13026865</id><snippet>f</snippet></ROW><ROW><id>13026865</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# some data
a = np.sort(np.random.randn(10, 10))

# use the default 'jet' colour map for showing the difference later
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.imshow(a, cmap=cm.get_cmap('jet'))
fig.savefig('map1.png')

# let's use jet and modify the alpha channel
# you would use your own colour map specified by f
my_cmap = cm.get_cmap('jet')

# this is a hack to get at the _lut array, which stores RGBA vals
my_cmap._init()

# use some made-up alphas, you would use the ones specified by f
alphas = np.abs(np.linspace(-1.0, 1.0, my_cmap.N))

# overwrite the alpha channel of the jet colour map
my_cmap._lut[:-3,-1] = alphas

# plot data with our modified colour map
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.imshow(a, cmap=my_cmap)
fig.savefig('map2.png')
</snippet></ROW><ROW><id>13026865</id><snippet>map1.png</snippet></ROW><ROW><id>13026865</id><snippet>map2.png</snippet></ROW><ROW><id>13026874</id><snippet>option_list</snippet></ROW><ROW><id>13026874</id><snippet>&gt;&gt;&gt; print parser.option_list
[&lt;Option at 0x7f938c8243f8: -h/--help&gt;, &lt;Option at 0x7f938c82b3f8: -t/--output-format&gt;]
</snippet></ROW><ROW><id>13026874</id><snippet>for group in parser.option_groups:
    option_list += tuple(group.option_list)
option_list += tuple(parser.option_list)
</snippet></ROW><ROW><id>13026874</id><snippet>option_list</snippet></ROW><ROW><id>13026874</id><snippet>option_groups</snippet></ROW><ROW><id>13026874</id><snippet>dir(parser)</snippet></ROW><ROW><id>13026891</id><snippet>noot</snippet></ROW><ROW><id>13026891</id><snippet>app noot</snippet></ROW><ROW><id>13026891</id><snippet>&gt;&gt;&gt; sNgrams = '|'.join(('\s+'.join(re.escape(gram) 
...                    for gram in nGram.split())) 
...                    for nGram in reversed(sorted(aNgrams, key=len)))
&gt;&gt;&gt; sNgrams
'aap\\s+noot|noot|aap'
&gt;&gt;&gt; reNgrams = re.compile(r"(?&lt;!\w)(?=(" + sNgrams + r")(?!\w))",
...                         flags=re.UNICODE|re.IGNORECASE)
&gt;&gt;&gt; reNgrams.findall(doc)
['aap noot', 'noot']
</snippet></ROW><ROW><id>13026891</id><snippet>aap</snippet></ROW><ROW><id>13026891</id><snippet>aap noot</snippet></ROW><ROW><id>13026901</id><snippet>./test.py 'http://www.google.co.in/imgres?hl=en&amp;sa=X&amp;biw=1600&amp;bih=729&amp;tbm=isch&amp;prmd=imvns&amp;tbnid=5FSY1KAB4T48vM:&amp;imgrefurl=http://www.freeganita.com/en/mdlife/4_4.htm&amp;docid=x4Z8mIMpa8FS9M&amp;imgurl=http://www.freeganita.com/en/mdlife/4_4_files/image007.jpg&amp;w=581&amp;h=260&amp;ei=MFaGUMnDHYXSrQfp5YGoDA&amp;zoom=1&amp;iact=hc&amp;vpx=439&amp;vpy=132&amp;dur=1059&amp;hovh=150&amp;hovw=336&amp;tx=71&amp;ty=171&amp;sig=100962344983266552479&amp;page=1&amp;tbnh=123&amp;tbnw=276&amp;start=0&amp;ndsp=28&amp;ved=1t:429,r:2,s:0,i:89'
</snippet></ROW><ROW><id>13026947</id><snippet>repr</snippet></ROW><ROW><id>13026947</id><snippet>datetime</snippet></ROW><ROW><id>13026947</id><snippet>&gt;&gt;&gt; r = datetime.datetime(*time.strptime(s, "%Y-%m-%d %H:%M:%S")[:6])
&gt;&gt;&gt; r.year
2010
</snippet></ROW><ROW><id>13027045</id><snippet>self.generate_pdf_file(str_report_name,
                str_report_format,
                str(lst_main_heading),
                str(lst_header),
                str(lst_report_header),
                str(lst_page_header),
                str(lst_footer),
                str(lst_report_footer),
                str(lst_page_footer),
                str(lst_report_data),
                bln_show_column_heading,
                str(lst_col_title))
</snippet></ROW><ROW><id>13027045</id><snippet>@ladonize(str,str,str,str,str,str,str,str,str,str,str,str, rtype=str)
def generate_pdf_print(self, str_report_name,str_report_format,lst_main_heading, lst_header, lst_report_header, lst_page_header, lst_footer, lst_report_footer, lst_page_footer, lst_report_data, bln_show_column_heading, lst_col_title, **args):
</snippet></ROW><ROW><id>13027045</id><snippet>def generate_pdf_print(self,db,
                            str_report_name = 'OPENING BALANCE REPORT',
                            str_report_format = 'GENERAL',
                            lst_main_heading = [],
                            lst_header = [],
                            lst_report_header = [],
                            lst_page_header = [],
                            lst_footer = [],
                            lst_report_footer = [],
                            lst_page_footer = [],
                            lst_report_data = [],
                            bln_show_column_heading = True,
                            lst_col_title = [],
                            int_count_blocks_of_data_in_print = 1,
                            str_pdf_theme = 'Default'
                            ):

    lst_main_heading = eval(lst_main_heading) 
    lst_header = eval(lst_header)
    lst_report_header = eval(lst_report_header) 
    lst_page_header = eval(lst_page_header) 
    lst_footer = eval(lst_footer)
    lst_page_footer = eval(lst_page_footer)
    lst_report_footer = eval(lst_report_footer) 
    lst_report_data = eval(lst_report_data) 
    bln_show_column_heading = True
    lst_col_title = eval(lst_col_title) 
</snippet></ROW><ROW><id>13027157</id><snippet>t</snippet></ROW><ROW><id>13027157</id><snippet>main</snippet></ROW><ROW><id>13027164</id><snippet>for myobj in self.get_queryset():
     myobj.dict1 = mydict1
</snippet></ROW><ROW><id>13027284</id><snippet>arg[0]</snippet></ROW><ROW><id>13027284</id><snippet>arg</snippet></ROW><ROW><id>13027284</id><snippet>sys.argv</snippet></ROW><ROW><id>13027284</id><snippet>[0]</snippet></ROW><ROW><id>13027284</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>13027362</id><snippet>line(len)</snippet></ROW><ROW><id>13027362</id><snippet>len(line)</snippet></ROW><ROW><id>13027362</id><snippet>with open("x.txt") as f:
    for line_no, line in enumerate(f):
        # Remember not to count the newline character
        if len(line.strip()) != 32:
            print line_no, line
</snippet></ROW><ROW><id>13027362</id><snippet>with open("outfile.txt", "w") as out:
    with open("x.txt") as f:
        for line_no, line in enumerate(f):
            if len(line.strip()) == 32:
                out.write(line)
            else:
                print "Removing line {0}".format(line_no)
</snippet></ROW><ROW><id>13027362</id><snippet>x.txt</snippet></ROW><ROW><id>13027701</id><snippet>request.args</snippet></ROW><ROW><id>13027701</id><snippet>request.read()</snippet></ROW><ROW><id>13027773</id><snippet>len(args)==3</snippet></ROW><ROW><id>13027773</id><snippet>args==3</snippet></ROW><ROW><id>13027773</id><snippet>if len(args)==3:
</snippet></ROW><ROW><id>13027773</id><snippet>args==3</snippet></ROW><ROW><id>13027773</id><snippet>args</snippet></ROW><ROW><id>13027773</id><snippet>myfunc(3)</snippet></ROW><ROW><id>13027773</id><snippet>(3,)==3</snippet></ROW><ROW><id>13027773</id><snippet>False</snippet></ROW><ROW><id>13027878</id><snippet>import pandas as pd
import matplotlib.pyplot as plt
from StringIO import StringIO

data = """\
        a       b       c       d       e
alpha   5.51    0.60    -0.12   26.90   76284.53
beta    3.39    0.94    -0.17   -0.20   -0.20
gamma   7.98    3.34    -1.41   7.74    28394.93
delta   2.29    1.24    0.40    0.29    0.28
"""

df = pd.read_csv(StringIO(data), sep='\s+')

f, axis = plt.subplots(2, 1, sharex=True)
df.plot(kind='bar', ax=axis[0])
df.plot(kind='bar', ax=axis[1])
axis[0].set_ylim(20000, 80000)
axis[1].set_ylim(-2, 30)
axis[1].legend().set_visible(False)

axis[0].spines['bottom'].set_visible(False)
axis[1].spines['top'].set_visible(False)
axis[0].xaxis.tick_top()
axis[0].tick_params(labeltop='off')
axis[1].xaxis.tick_bottom()
d = .015
kwargs = dict(transform=axis[0].transAxes, color='k', clip_on=False)
axis[0].plot((-d,+d),(-d,+d), **kwargs)
axis[0].plot((1-d,1+d),(-d,+d), **kwargs)
kwargs.update(transform=axis[1].transAxes)
axis[1].plot((-d,+d),(1-d,1+d), **kwargs)
axis[1].plot((1-d,1+d),(1-d,1+d), **kwargs)
plt.show()
</snippet></ROW><ROW><id>13028140</id><snippet>my_str.split()</snippet></ROW><ROW><id>13028140</id><snippet>' '</snippet></ROW><ROW><id>13028140</id><snippet>&gt;&gt;&gt; ' 1 2 3 4  '.split(None, 2)
['1', '2', '3 4  ']
&gt;&gt;&gt; ' 1 2 3 4  '.split(None, 1)
['1', '2 3 4  ']
</snippet></ROW><ROW><id>13028272</id><snippet>Trans.lang_name.match(str_to_match)
</snippet></ROW><ROW><id>13028272</id><snippet>str_to_match</snippet></ROW><ROW><id>13028272</id><snippet>Trans</snippet></ROW><ROW><id>13028272</id><snippet>trans</snippet></ROW><ROW><id>13028272</id><snippet>'MATCH(trans.lang_name) AGAINST (%s IN BOOLEAN MODE)' % str_to_match
</snippet></ROW><ROW><id>13029042</id><snippet>value_counts()</snippet></ROW><ROW><id>13029042</id><snippet>Nan</snippet></ROW><ROW><id>13029042</id><snippet>        one       two     three
a  0.196508 -0.465768 -0.710062
b       NaN       NaN       NaN
c  0.532602  1.835499  0.465047
d       NaN       NaN       NaN
e  0.175336 -0.471934 -1.517812
f -2.392756 -0.021330 -0.239647
g       NaN       NaN       NaN
h -0.612554  0.238613 -1.060184

df2['one'].value_counts()

 0.532602    1
 0.196508    1
 0.175336    1
-0.612554    1
-2.392756    1
</snippet></ROW><ROW><id>13029098</id><snippet>In [19]: b = a[s]

In [20]: b[b &gt; 0]
Out[20]: array([2, 3, 4])
</snippet></ROW><ROW><id>13029425</id><snippet>()</snippet></ROW><ROW><id>13029425</id><snippet>b.pages()</snippet></ROW><ROW><id>13029425</id><snippet>_tmp = b.pages
_tmp()
</snippet></ROW><ROW><id>13029425</id><snippet>__call__</snippet></ROW><ROW><id>13029738</id><snippet>- url: /ckeditor
  static_dir: static/ckeditor
</snippet></ROW><ROW><id>13030449</id><snippet>UNIQUE</snippet></ROW><ROW><id>13030449</id><snippet>executemany</snippet></ROW><ROW><id>13030449</id><snippet>SELECT</snippet></ROW><ROW><id>13030449</id><snippet>ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>13030449</id><snippet>executemany</snippet></ROW><ROW><id>13030449</id><snippet>rows</snippet></ROW><ROW><id>13030462</id><snippet>gevent</snippet></ROW><ROW><id>13030462</id><snippet>socketio</snippet></ROW><ROW><id>13030462</id><snippet>gevent</snippet></ROW><ROW><id>13030462</id><snippet>socketio</snippet></ROW><ROW><id>13030549</id><snippet>__new__()</snippet></ROW><ROW><id>13030549</id><snippet>class Foo(object):
    def __new__(cls, value=True):
        if cls != Foo:
            return super(Foo, cls).__new__(cls)
        elif value:
            return super(Foo, cls).__new__(Bar)
        else:
            return super(Foo, cls).__new__(Zoo)

class Bar(Foo):
    pass

class Zoo(Foo):
    pass

z = Foo(True)  # instance of Bar() class
</snippet></ROW><ROW><id>13030824</id><snippet>newM2 = self.z - self.H*self.xp</snippet></ROW><ROW><id>13030824</id><snippet>newM2 = self.z() - self.H*self.xp</snippet></ROW><ROW><id>13031164</id><snippet>import re
import sys
import fileinput


md5_checker = re.compile("^[a-fA-F0-9]{32}$")

for line in fileinput.input():
    if md5_checker.match(line):
        sys.stdout.write(line)
    else:
        sys.stderr.write("INVALID: %s" % line)
</snippet></ROW><ROW><id>13031164</id><snippet>$ cat testfile.txt 
0cc175b9c0f1b6a831c399e269772661
92eb5ffee6ae2fec3ad71c777531578f
asdf
0cc175b9c0f1b6a831c399e269772661
92eb5ffee6ae2fec3ad71c777531578f

$ python ~/Desktop/md5_checker.py testfile.txt &gt; cleaned.txt
INVALID: asdf

$ cat cleaned.txt 
0cc175b9c0f1b6a831c399e269772661
92eb5ffee6ae2fec3ad71c777531578f
0cc175b9c0f1b6a831c399e269772661
92eb5ffee6ae2fec3ad71c777531578f
</snippet></ROW><ROW><id>13031164</id><snippet>md5_checker testfile.txt &gt; testfile.txt</snippet></ROW><ROW><id>13031216</id><snippet>as_json</snippet></ROW><ROW><id>13031216</id><snippet>class AnalysisInput(models.Model):
    input_user = models.CharField(max_length=45)
    input_title = models.CharField(max_length=45)
    input_date = models.DateTimeField()
    input_link = models.CharField(max_length=100)

    def as_json(self):
        return dict(
            input_id=self.id, input_user=self.input_user,
            input_title=self.input_title, 
            input_date=self.input_date.isoformat(),
            input_link=self.input_link)
</snippet></ROW><ROW><id>13031216</id><snippet># one result
return HttpResponse(json.dumps(result.as_json()), mimetype="application/json")

# a list of results
results = [ob.as_json() for ob in resultset]
return HttpResponse(json.dumps(results), mimetype="application/json")
</snippet></ROW><ROW><id>13031436</id><snippet>wx.CallLater(numberOfMilliSecs, myFunction, arg1, arg2)
</snippet></ROW><ROW><id>13031471</id><snippet>import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt


df2 = pd.DataFrame( [  0.4 , 1.9 ] )
df2.plot(kind='bar', yerr = [ [0.1,3.0] , [3.0,0.1]]  )

plt.show()
</snippet></ROW><ROW><id>13031591</id><snippet>ts_mi.unstack().shift(2, freq='D').stack()
</snippet></ROW><ROW><id>13031591</id><snippet>utils.side_by_side(ts_mi, ts_mi.unstack().shift(2, freq='D').stack())
2012-01-01  0    0.481555    2012-01-03  0    0.481555
            1    0.000628                1    0.000628
            2    2.509266                2    2.509266
            3    0.021571                3    0.021571
            4   -0.539981                4   -0.539981
2012-01-02  0   -1.465450    2012-01-04  0   -1.465450
            1    0.815251                1    0.815251
            2   -1.489051                2   -1.489051
            3    0.639746                3    0.639746
            4   -0.176939                4   -0.176939
2012-01-03  0   -0.441842    2012-01-05  0   -0.441842
            1   -0.792810                1   -0.792810
            2   -0.802665                2   -0.802665
            3    1.922190                3    1.922190
            4    0.165446                4    0.165446
...                          ...                      
</snippet></ROW><ROW><id>13031591</id><snippet>df.unstack()</snippet></ROW><ROW><id>13031591</id><snippet>df.stack()</snippet></ROW><ROW><id>13031591</id><snippet>def side_by_side(*objs, **kwds):
    from pandas.core.common import adjoin
    space = kwds.get('space', 4)
    reprs = [repr(obj).split('\n') for obj in objs]
    print adjoin(space, *reprs)
</snippet></ROW><ROW><id>13031653</id><snippet>datetime</snippet></ROW><ROW><id>13031653</id><snippet>import datetime
adate = datetime.datetime.strptime("23.10.2012", "%d.%m.%Y").date()
adate + datetime.timedelta(days=30)
</snippet></ROW><ROW><id>13031653</id><snippet>python-dateutil</snippet></ROW><ROW><id>13031653</id><snippet>from dateutil.relativedelta import relativedelta
adate + relativedelta(months=1)
</snippet></ROW><ROW><id>13031653</id><snippet>relativedelta</snippet></ROW><ROW><id>13031905</id><snippet>cols = [float(x) for x in line.split()]
c28, c31 = cols[27], cols[30]
</snippet></ROW><ROW><id>13031905</id><snippet>with open('&lt;file name here&gt;') as source_file:
    for line in source_file:
        cols = [float(x) for x in line.split()]
        c28, c31 = cols[27], cols[30]
</snippet></ROW><ROW><id>13031991</id><snippet>pyparsing</snippet></ROW><ROW><id>13031991</id><snippet>_trim_arity</snippet></ROW><ROW><id>13031991</id><snippet>setParseAction(func)</snippet></ROW><ROW><id>13031991</id><snippet>if not _PY3K:                                                                                                                                                               
    def _trim_arity(func, maxargs=2):                                                                                                                                                 
        limit = [0]                                                                                                                                                                   
        def wrapper(*args):                                                                                                                                                           
            while 1:                                                                                                                                                                  
                try:                                                                                                                                                                  
                    return func(*args[limit[0]:])                                                                                                                                     
                except TypeError:                                                                                                                                                     
                    if limit[0] &lt;= maxargs:                                                                                                                                           
                        limit[0] += 1                                                                                                                                                 
                        continue                                                                                                                                                      
                    raise                                                                                                                                                             
        return wrapper                                                                                                                                                                
    else:                                                                                                                                                                                 
        def _trim_arity(func, maxargs=2):                                                                                                                                                 
            limit = maxargs                                                                                                                                                             
            def wrapper(*args):                                                                                                                                                                                                                                                                                                             
                #~ nonlocal limit                                                                                                                                                         
                while 1:                                                                                                                                                                  
                    try:                                                                                                                                                                  
                        return func(*args[limit:])                                                                                                                                        
                    except TypeError:                                                                                                                                                     
                        if limit:                                                                                                                                                         
                            limit -= 1                                                                                                                                                    
                            continue                                                                                                                                                      
                        raise                                                                                                                                                             
            return wrapper   
</snippet></ROW><ROW><id>13031991</id><snippet>if not _PY3K and False:                                                                                                                                                               
    def _trim_arity(func, maxargs=2):                                                                                                                                                 
        limit = [0]                                                                                                                                                                   
        def wrapper(*args):                                                                                                                                                           
            while 1:                                                                                                                                                                  
                try:                                                                                                                                                                  
                    return func(*args[limit[0]:])                                                                                                                                     
                except TypeError:                                                                                                                                                     
                    if limit[0] &lt;= maxargs:                                                                                                                                           
                        limit[0] += 1                                                                                                                                                 
                        continue                                                                                                                                                      
                    raise                                                                                                                                                             
        return wrapper                                                                                                                                                                
    else:                                                                                                                                                                                 
        def _trim_arity(func, maxargs=2):                                                                                                                                                 
            # limit = maxargs                                                                                                                                                             
            def wrapper(*args):                                                                                                                                                           
                limit = maxargs                                                                                                                                                           
                #~ nonlocal limit                                                                                                                                                         
                while 1:                                                                                                                                                                  
                    try:                                                                                                                                                                  
                        return func(*args[limit:])                                                                                                                                        
                    except TypeError:                                                                                                                                                     
                        if limit:                                                                                                                                                         
                            limit -= 1                                                                                                                                                    
                            continue                                                                                                                                                      
                        raise                                                                                                                                                             
            return wrapper   
</snippet></ROW><ROW><id>13031991</id><snippet>trunk</snippet></ROW><ROW><id>13032066</id><snippet>numpy</snippet></ROW><ROW><id>13032066</id><snippet>numpy.loadtxt('tarfile.txt', usecols=range(1,8))</snippet></ROW><ROW><id>13032066</id><snippet>numpy</snippet></ROW><ROW><id>13032323</id><snippet>/users/{id}</snippet></ROW><ROW><id>13032323</id><snippet>/users</snippet></ROW><ROW><id>13032323</id><snippet>@resource(collection_path='/users', path='/users/{id}')
</snippet></ROW><ROW><id>13032323</id><snippet>resource</snippet></ROW><ROW><id>13032323</id><snippet>Service</snippet></ROW><ROW><id>13032323</id><snippet>Service</snippet></ROW><ROW><id>13032323</id><snippet>client = Service(name='client', path='/api/clients/{id}', description="Client")
</snippet></ROW><ROW><id>13032338</id><snippet>import glob
res = [f for f in glob.glob("*.txt") if "abc" in f or "123" in f or "a1b" in f]
for f in res:
    print f
</snippet></ROW><ROW><id>13032338</id><snippet>glob</snippet></ROW><ROW><id>13032338</id><snippet>import os
import re
res = [f for f in os.listdir() if re.search(r'(abc|123|a1b).*\.txt$', f)]
for f in res:
    print f
</snippet></ROW><ROW><id>13032338</id><snippet>list</snippet></ROW><ROW><id>13032338</id><snippet>list</snippet></ROW><ROW><id>13032410</id><snippet>{% for id in ProductTypefeatureentryList %}
   &lt;label for="{{id.Name}}"&gt;{{id.Name}}&lt;/label&gt;
   &lt;input class="required" id="{{id.Name}}" type="text"name="{{id.Name}}" /&gt;
{% endfor %}
</snippet></ROW><ROW><id>13032410</id><snippet>validateForm()</snippet></ROW><ROW><id>13032410</id><snippet>$('.required').each(function () {
    if (this.value === '') {
        // form is invalid
    }
});
</snippet></ROW><ROW><id>13032470</id><snippet>Comment</snippet></ROW><ROW><id>13032470</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>13032470</id><snippet>GenericForeignKeyField</snippet></ROW><ROW><id>13032470</id><snippet>null=True</snippet></ROW><ROW><id>13032470</id><snippet>GenericForeignKeyField</snippet></ROW><ROW><id>13032470</id><snippet>{"comment":"sdfsdfsdf", "content_object": "/api/v1/blog_item/1/"}</snippet></ROW><ROW><id>13032474</id><snippet>filter (lambda a: a != value_to_remove, my_array)</snippet></ROW><ROW><id>13032474</id><snippet>&gt;&gt;&gt; my_array = ["abc", "def", "xyz", "abc", "pop", "abc"]
&gt;&gt;&gt; filter (lambda a: a != "abc", my_array)
['def', 'xyz', 'pop']
</snippet></ROW><ROW><id>13032528</id><snippet>In [61]: df
Out[61]:
     A       B
1  abc     463
6  abc    4341
0  abc   13123
3  def      45
2  def    1231
5  def    4839
4  def  142131

In [62]: df['C'] =  df.groupby('A')['A'].transform(lambda x: pd.Series(range(1, len(x)+1), index=x.index))

In [63]: df
Out[63]:
     A       B  C
1  abc     463  1
6  abc    4341  2
0  abc   13123  3
3  def      45  1
2  def    1231  2
5  def    4839  3
4  def  142131  4
</snippet></ROW><ROW><id>13032600</id><snippet>In [14]: lis=[
['name1','value2','something','else'],
['name2','value3','something','else'],
['name3','value4','something','else'],
['name4','value4','something','else'],
['name5','value5','something','else'],
['name6','value2','something','else']
]

In [22]: dic={}

In [23]: for x in lis:
    dic.setdefault(x[1],[]).append([x[0]]+x[2:])
   ....:     
   ....:     

In [25]: dic
Out[25]: 
{'value2': [['name1', 'something', 'else'], ['name6', 'something', 'else']],
 'value3': [['name2', 'something', 'else']],
 'value4': [['name3', 'something', 'else'], ['name4', 'something', 'else']],
 'value5': [['name5', 'something', 'else']]}

In [27]: [[y[0]]+[x]+y[1:] for x in dic for y in dic[x][:2]]
Out[27]: 
[['name5', 'value5', 'something', 'else'],
 ['name3', 'value4', 'something', 'else'],
 ['name4', 'value4', 'something', 'else'],
 ['name2', 'value3', 'something', 'else'],
 ['name1', 'value2', 'something', 'else'],
 ['name6', 'value2', 'something', 'else']]
</snippet></ROW><ROW><id>13032698</id><snippet># Retrieve root nodes and their immediate children only
SomeModel.tree.filter(level__lte=1)
</snippet></ROW><ROW><id>13032745</id><snippet>&lt;METAR&gt;
  &lt;!-- snip --&gt;
  &lt;sky_condition sky_cover="FEW" cloud_base_ft_agl="2000"/&gt;
  &lt;sky_condition sky_cover="BKN" cloud_base_ft_agl="18000"/&gt;
&lt;/METAR&gt;
</snippet></ROW><ROW><id>13032745</id><snippet>attrib</snippet></ROW><ROW><id>13032745</id><snippet>data = root.findall('data/METAR')
for sky in data.findall('sky_condition'):
    print "Sky Condition: {0} at {1} ft AGL".format(
        sky.attrib['sky_cover'],
        sky.attrib['cloud_base_ft_agl']
      )
</snippet></ROW><ROW><id>13032769</id><snippet>elif run_test_case(cases.split()):</snippet></ROW><ROW><id>13032769</id><snippet>run_test_case</snippet></ROW><ROW><id>13032769</id><snippet>elif</snippet></ROW><ROW><id>13032769</id><snippet>elif</snippet></ROW><ROW><id>13032769</id><snippet>continue</snippet></ROW><ROW><id>13032769</id><snippet>True</snippet></ROW><ROW><id>13032769</id><snippet>run_test_case</snippet></ROW><ROW><id>13032769</id><snippet>return True</snippet></ROW><ROW><id>13032769</id><snippet>if</snippet></ROW><ROW><id>13032769</id><snippet>elif</snippet></ROW><ROW><id>13032769</id><snippet>True</snippet></ROW><ROW><id>13032769</id><snippet>False</snippet></ROW><ROW><id>13032769</id><snippet>None</snippet></ROW><ROW><id>13032929</id><snippet>AuthAlreadyAssociated</snippet></ROW><ROW><id>13032929</id><snippet>social_auth.middleware.SocialAuthExceptionMiddleware</snippet></ROW><ROW><id>13032929</id><snippet>process_exception()</snippet></ROW><ROW><id>13032929</id><snippet>social_auth.backend.pipeline.social.social_auth_user</snippet></ROW><ROW><id>13032992</id><snippet>from collections import defaultdict
with open('test.dat') as f:
    data = defaultdict( lambda:([],[]))
    header = f.readline()
    for line in f:
        col1,col2,col3,col4 = line.split()
        col3_data,col4_data = data[(col1,col2)]  #data[frozenset((col1,col2))] if order doesn't matter
        col3_data.append(col3)
        col4_data.append(col4)
</snippet></ROW><ROW><id>13032992</id><snippet>','</snippet></ROW><ROW><id>13032992</id><snippet>set</snippet></ROW><ROW><id>13032992</id><snippet>sorted</snippet></ROW><ROW><id>13032992</id><snippet>with open('outfile.dat','w') as f:
   f.write(header)
   #If you used a frozenset in the first part, you might want to do something like:
   #for k in sorted(map(sorted,data.keys())):
   for k in sorted(data.keys()):
       col1,col2 = k
       col3_data,col4_data = data[k]
       col3_data = ','.join(col3_data) #join the list
       col3_data = set(int(x) for x in col3_data.split(',')) #make unique integers
       col3_str = ','.join(map(str,sorted(col3_data)))       #sort, convert to strings and join with ','
       col4_data = ','.join(col4_data)  #join the list
       col4_data = sorted(set(col4_data.split(',')))  #make unique and sort
       f.write('{0}\t{1}\t{2}\t{3}\n'.format(col1,col2,col3_str,','.join(col4_data)))
</snippet></ROW><ROW><id>13033054</id><snippet>  #Compute log-likelihood 
  #NLTK Naive bayes classifier prob_classify func gives logprob(class) + logprob(doc|class))
  #for labeled data, sum logprobs output by the classifier for the label
  #for unlabeled data, sum logprobs output by the classifier for each label

  log_lh = sum([C.prob_classify(ftdic).prob(label) for (ftdic,label) in labeled_data])
  log_lh += sum([C.prob_classify(ftdic).prob(label) for (ftdic,ignore) in unlabeled_data for label in l_freqdist_act.samples()])
</snippet></ROW><ROW><id>13033054</id><snippet>logprob(class) + logprob(doc|class)</snippet></ROW><ROW><id>13033054</id><snippet>prob</snippet></ROW><ROW><id>13033054</id><snippet>logprob</snippet></ROW><ROW><id>13033224</id><snippet>lis = [1,2,1,'a',4,2,3,3,5,'a',2]
dic={}
index=0
for item in lis:
    if item in dic:
        dic[item]+=[index]
        index+=1
    else:
        dic[item]=[index] 
        index+=1
print dic   
</snippet></ROW><ROW><id>13033224</id><snippet>{'a': [3, 9], 1: [0, 2], 2: [1, 5, 10], 3: [6, 7], 4: [4], 5: [8]}
</snippet></ROW><ROW><id>13033475</id><snippet>GetSize</snippet></ROW><ROW><id>13033475</id><snippet>cv</snippet></ROW><ROW><id>13033475</id><snippet>width, height = cv.GetSize(src)
</snippet></ROW><ROW><id>13033791</id><snippet>prefetch_related</snippet></ROW><ROW><id>13033791</id><snippet>Publisher.objects.filter(city='NY').prefetch_related('book_set')
</snippet></ROW><ROW><id>13033805</id><snippet>shuffle</snippet></ROW><ROW><id>13033805</id><snippet>import random
letters = list(still_to_scramble)
random.shuffle(letters)
scrambled = ''.join(letters)
</snippet></ROW><ROW><id>13033805</id><snippet>&gt;&gt;&gt; s
'$123abc$'
&gt;&gt;&gt; first_letter = s[0]
&gt;&gt;&gt; last_letter = s[-1]
&gt;&gt;&gt; middle_parts = list(s[1:-1])
&gt;&gt;&gt; random.shuffle(middle_parts)
&gt;&gt;&gt; ''.join(middle_parts)
'b3a2c1'
</snippet></ROW><ROW><id>13033805</id><snippet>&gt;&gt;&gt; middle_parts_random = random.shuffle(middle_parts)
</snippet></ROW><ROW><id>13033805</id><snippet>shuffle</snippet></ROW><ROW><id>13033805</id><snippet>None</snippet></ROW><ROW><id>13033805</id><snippet>&gt;&gt;&gt; middle_parts_random = random.shuffle(middle_parts)
&gt;&gt;&gt; middle_parts_random # Huh? nothing is printed!
&gt;&gt;&gt; middle_parts_random == None # Ah, that's why. Darn you in-place methods!
True
</snippet></ROW><ROW><id>13034238</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import *

class MyWindow(QWidget):
    def __init__(self, parent=None):
        super(QWidget, self).__init__(parent)

        self.hbox = QHBoxLayout(self)
        self.myButtons = QDialogButtonBox(self)
        self.hbox.addWidget(self.myButtons)
        button = self.myButtons.addButton(QDialogButtonBox.Open)

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    translator = QTranslator()
    print translator.load("qt_ru", QLibraryInfo.location(QLibraryInfo.TranslationsPath))
    app.installTranslator(translator)
    ui = MyWindow()
    ui.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13034248</id><snippet>class UserFollowing(models.Model):
    user = models.ForeignKey(User, related_name='following')
    following = models.ForeignKey(User, related_name='followed_by')
</snippet></ROW><ROW><id>13034248</id><snippet>user = User.objects.get(...)
user.following.all() # all users this user is following
user.followed_by.all() # all users who follow this user
</snippet></ROW><ROW><id>13034248</id><snippet>class ArticleLike(models.Model):
    article = models.ForeignKey(Article, related_name='likes')
    like = models.ForeignKey(User, related_name='articles_like')

Article.objects.get(...).likes.all()

User.objects.get(...).articles_like.all()
</snippet></ROW><ROW><id>13034317</id><snippet>set_verbose</snippet></ROW><ROW><id>13034317</id><snippet>setUp</snippet></ROW><ROW><id>13034405</id><snippet>key_name</snippet></ROW><ROW><id>13034405</id><snippet>User</snippet></ROW><ROW><id>13034405</id><snippet>memcache.get_multi([phone_number1, phone_number2 ... ])
db.get([number1_not_found_in_memcache, number2_not_found_in_memcache])

memcache.set_multi("all_number_found_in_db")
</snippet></ROW><ROW><id>13034405</id><snippet>class Number(db.Model):
    number_prefix = db.StringProperty()
    numbers = db.StringListProperty(indexed = False)

# check number 01234567, 032123124
numbers = Number.get(["01", "03'])

# check 01234567 in number[0].numbers ?
# check 032123124 in number[1].numbers ?
</snippet></ROW><ROW><id>13034441</id><snippet>linestyle='-'
</snippet></ROW><ROW><id>13034441</id><snippet>x</snippet></ROW><ROW><id>13034441</id><snippet>linestyle</snippet></ROW><ROW><id>13034441</id><snippet>pl.plot(np.array(XsavedArr[:,0]),np.array(XsavedArr[:,1]),
        'x-',label = 'Xsaved')
</snippet></ROW><ROW><id>13034518</id><snippet>json</snippet></ROW><ROW><id>13034518</id><snippet>import json
data = ["string", "string2", True, 20]
string_variable = json.dumps(data)
#
# now pass string_variable through drag and drop
#
returned = json.loads(string_variable)
</snippet></ROW><ROW><id>13034518</id><snippet>json</snippet></ROW><ROW><id>13034651</id><snippet>pytz</snippet></ROW><ROW><id>13034904</id><snippet>root     24806  0.1  1.8  51404 31328 ?        Sl   Oct19   9:25 ../../.env/bin/python manage.py celeryd -f /var/log/myapp/celeryd.log -l WARNING --pidfile /var/run/celeryd.pid -B --scheduler djcelery.schedulers.DatabaseScheduler
root     24900  0.1  1.6  51404 28592 ?        S    Oct19   6:02 ../../.env/bin/python manage.py celeryd -f /var/log/myapp/celeryd.log -l WARNING --pidfile /var/run/celeryd.pid -B --scheduler djcelery.schedulers.DatabaseScheduler
root     24901  0.3  9.4 183232 161948 ?       S    Oct19  22:32 ../../.env/bin/python manage.py celeryd -f /var/log/myapp/celeryd.log -l WARNING --pidfile /var/run/celeryd.pid -B --scheduler djcelery.schedulers.DatabaseScheduler
</snippet></ROW><ROW><id>13034908</id><snippet>myList</snippet></ROW><ROW><id>13034908</id><snippet>globals.py</snippet></ROW><ROW><id>13034908</id><snippet># globals.py

def init():
    global myList
    myList = []
</snippet></ROW><ROW><id>13034908</id><snippet># subfile.py

import globals

def stuff():
    globals.myList.append('hey')
</snippet></ROW><ROW><id>13034908</id><snippet># main.py

import globals
import subfile

globals.init()          # Call only once
subfile.stuff()         # Do stuff with global var
print globals.myList[0] # Check the result
</snippet></ROW><ROW><id>13035008</id><snippet>float(x.strip('\x00'))</snippet></ROW><ROW><id>13035397</id><snippet>cur.callproc('test', (data,))</snippet></ROW><ROW><id>13035397</id><snippet>&gt;&gt;&gt; a = 'hello'
&gt;&gt;&gt; len(a) # just a
5
&gt;&gt;&gt; len( (a) ) # still just a
5
&gt;&gt;&gt; len( (a,) ) # single element tuple containing a
1
</snippet></ROW><ROW><id>13035485</id><snippet>virtualenv</snippet></ROW><ROW><id>13035485</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13035485</id><snippet>virtualenv</snippet></ROW><ROW><id>13035611</id><snippet>csv</snippet></ROW><ROW><id>13035611</id><snippet>by_hotel</snippet></ROW><ROW><id>13035611</id><snippet>import csv

with open('csv_data.csv') as fin:
    csvin = csv.DictReader(fin)
    headers = csvin.fieldnames
    by_hotel = {row['Hotel']: row for row in csvin}

print by_hotel['sutton']['excellent']
# 489
</snippet></ROW><ROW><id>13035611</id><snippet>print [hotel['sutton'][fname] for fname in headers]
</snippet></ROW><ROW><id>13036049</id><snippet>os.path.splitext</snippet></ROW><ROW><id>13036514</id><snippet>:</snippet></ROW><ROW><id>13036514</id><snippet>def index():
</snippet></ROW><ROW><id>13036547</id><snippet>GeneratorsCommand</snippet></ROW><ROW><id>13036547</id><snippet>RailsQuick.sublime-commands</snippet></ROW><ROW><id>13036547</id><snippet>rails_quick_generators</snippet></ROW><ROW><id>13036552</id><snippet>b = Button(text="-&gt;", command=self.moveFile(selection))
</snippet></ROW><ROW><id>13036552</id><snippet>b = Button(text="-&gt;", command=lambda:self.moveFile(fileList.curselection()))
</snippet></ROW><ROW><id>13036552</id><snippet>self.moveFile</snippet></ROW><ROW><id>13036552</id><snippet>command</snippet></ROW><ROW><id>13036552</id><snippet>self.movefile</snippet></ROW><ROW><id>13036552</id><snippet>lambda</snippet></ROW><ROW><id>13036552</id><snippet>mainloop</snippet></ROW><ROW><id>13036558</id><snippet>set((remove_version(filepath) for filepath in iter_file(dic1))) == set((remove_version(filepath) for filepath in iter_file(dic2)))
</snippet></ROW><ROW><id>13036626</id><snippet>with open('path/to/file.gif') as f:
  img_content = f.read()
</snippet></ROW><ROW><id>13036626</id><snippet>self.response.content_type = 'image/gif'
self.response.write(img_content)
</snippet></ROW><ROW><id>13037008</id><snippet>modulus(%)</snippet></ROW><ROW><id>13037008</id><snippet>&gt;&gt;&gt; def check_str(value):
        mid = len(value) / 2
        return True if value[:mid] == value[mid:] else False

&gt;&gt;&gt; check_str("abab")
True
&gt;&gt;&gt; check_str("abb")
False
&gt;&gt;&gt; check_str("aaba")
False
</snippet></ROW><ROW><id>13037379</id><snippet>trim()</snippet></ROW><ROW><id>13037379</id><snippet>strip()</snippet></ROW><ROW><id>13037379</id><snippet>u's '.encode('utf-16').strip().decode('utf-16')</snippet></ROW><ROW><id>13037379</id><snippet>file = fs.readFileSync argv.file, "binary"
</snippet></ROW><ROW><id>13037425</id><snippet>calendar</snippet></ROW><ROW><id>13037425</id><snippet>def formatmonthname(self, theyear, themonth, width, withyear=True):
    with TimeEncoding(self.locale) as encoding:
        s = month_name[themonth]
        if encoding is not None:
            s = s.decode(encoding)
        if withyear:
            s = "%s %r" % (s, theyear)
        return s.center(width)
</snippet></ROW><ROW><id>13037425</id><snippet>TimeEncoding</snippet></ROW><ROW><id>13037425</id><snippet>month_name</snippet></ROW><ROW><id>13037425</id><snippet>calendar</snippet></ROW><ROW><id>13037425</id><snippet>from calendar import TimeEncoding, month_name

def get_month_name(month_no, locale):
    with TimeEncoding(locale) as encoding:
        s = month_name[month_no]
        if encoding is not None:
            s = s.decode(encoding)
        return s

print get_month_name(3, "nb_NO.UTF-8")
</snippet></ROW><ROW><id>13037425</id><snippet>month_name[3]</snippet></ROW><ROW><id>13037425</id><snippet>TimeEncoding</snippet></ROW><ROW><id>13037425</id><snippet>day_name</snippet></ROW><ROW><id>13037425</id><snippet>day_abbr</snippet></ROW><ROW><id>13037425</id><snippet>from calendar import TimeEncoding, day_name, day_abbr

def get_day_name(day_no, locale, short=False):
    with TimeEncoding(locale) as encoding:
        if short:
            s = day_abbr[day_no]
        else:
            s = day_name[day_no]
        if encoding is not None:
            s = s.decode(encoding)
        return s
</snippet></ROW><ROW><id>13037450</id><snippet>@classmethod
def foo(cls):
    print(cls.foo_string)
</snippet></ROW><ROW><id>13037450</id><snippet>@staticmethod
def foo():
    print(Foo.foo_string)
</snippet></ROW><ROW><id>13037479</id><snippet>itemgetter</snippet></ROW><ROW><id>13037479</id><snippet>from operator import itemgetter
def header_parse(line,order_dict):
    header_info = line.split(',')
    indices = [None] * len(header_info)
    for i,col_name in enumerate(header_info):
        indices[order_dict[col_name]] = i
    return indices

def fix(fname,foutname):
    with open(fname) as f,open(foutname,'w') as fout:
        #Assume first line is a "header" and gives the order to use for the
        #rest of the file
        line = f.readline()
        order_dict = dict((name,i) for i,name in enumerate(line.strip().split(',')))
        reorder_magic = itemgetter(*header_parse(line.strip(),order_dict))
        for line in f:
            if line.startswith('Column'):  #somehow determine if this is a "header"
                reorder_magic = itemgetter(*header_parse(line.strip(),order_dict))
            else:
                fout.write(','.join(reorder_magic(line.strip().split(','))) + '\n')

if __name__ == '__main__':
    import sys
    fix(sys.argv[1],sys.argv[2])
</snippet></ROW><ROW><id>13037479</id><snippet>python fixscript.py badfile goodfile
</snippet></ROW><ROW><id>13037514</id><snippet>string.format</snippet></ROW><ROW><id>13037514</id><snippet>string.Formatter</snippet></ROW><ROW><id>13037514</id><snippet>parse()</snippet></ROW><ROW><id>13037514</id><snippet>&gt;&gt;&gt; from string import Formatter
&gt;&gt;&gt; [i[1] for i in Formatter().parse('Hello {1} {foo}')]
['1', 'foo']
</snippet></ROW><ROW><id>13037599</id><snippet>def divide(num, den, prec):
    a = (num*10**prec) // den
    s = str(a).zfill(prec+1)
    return s[0:-prec] + "." + s[-prec:]
</snippet></ROW><ROW><id>13037599</id><snippet>.zfill()</snippet></ROW><ROW><id>13037599</id><snippet>&gt;&gt;&gt; divide(2,7,1000)
'0.28571428571428571428571428571428571428571428571428571428571428571428571428571
42857142857142857142857142857142857142857142857142857142857142857142857142857142
85714285714285714285714285714285714285714285714285714285714285714285714285714285
71428571428571428571428571428571428571428571428571428571428571428571428571428571
42857142857142857142857142857142857142857142857142857142857142857142857142857142
85714285714285714285714285714285714285714285714285714285714285714285714285714285
71428571428571428571428571428571428571428571428571428571428571428571428571428571
42857142857142857142857142857142857142857142857142857142857142857142857142857142
85714285714285714285714285714285714285714285714285714285714285714285714285714285
71428571428571428571428571428571428571428571428571428571428571428571428571428571
42857142857142857142857142857142857142857142857142857142857142857142857142857142
85714285714285714285714285714285714285714285714285714285714285714285714285714285
7142857142857142857142857142857142857142857'
</snippet></ROW><ROW><id>13037599</id><snippet>divide(2,3,2)</snippet></ROW><ROW><id>13037599</id><snippet>0.66</snippet></ROW><ROW><id>13037599</id><snippet>0.67</snippet></ROW><ROW><id>13037656</id><snippet>heroku config:add BASE_IRI=http://silly-name-1234.herokuapp.com</snippet></ROW><ROW><id>13037656</id><snippet>os.environ.get('BASE_IRI', 'localhost')</snippet></ROW><ROW><id>13037656</id><snippet>settings.py</snippet></ROW><ROW><id>13038004</id><snippet>for x in source:
    matrix.append(rows)
</snippet></ROW><ROW><id>13038004</id><snippet>&gt;&gt; rows = ['a','b','c']
&gt;&gt;&gt; matrix = [rows[:] for _ in range(len(rows))]
&gt;&gt;&gt; matrix
[['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]
&gt;&gt;&gt; matrix[1][1]=' '
&gt;&gt;&gt; matrix
[['a', 'b', 'c'], ['a', ' ', 'c'], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>13038066</id><snippet>myList</snippet></ROW><ROW><id>13038066</id><snippet>myList = [('a', 1), ('b', 2)]
heapify(myList)
</snippet></ROW><ROW><id>13038499</id><snippet>\d*\.?\d+(?:[Ee][+-]?\d+)?
</snippet></ROW><ROW><id>13038499</id><snippet>e</snippet></ROW><ROW><id>13038499</id><snippet>E</snippet></ROW><ROW><id>13038499</id><snippet>+</snippet></ROW><ROW><id>13038499</id><snippet>-</snippet></ROW><ROW><id>13038499</id><snippet>e</snippet></ROW><ROW><id>13038499</id><snippet>E</snippet></ROW><ROW><id>13038499</id><snippet>\b</snippet></ROW><ROW><id>13038499</id><snippet>pattern = r"\d*\.?\d+(?:[Ee][+-]?\d+)?"
</snippet></ROW><ROW><id>13038827</id><snippet>for i in range(10):
  callbacks.append(lambda x = i : x)
</snippet></ROW><ROW><id>13038845</id><snippet>sentence = [] 
</snippet></ROW><ROW><id>13038845</id><snippet>elif newword in stopsentence:
</snippet></ROW><ROW><id>13038845</id><snippet>while paragraphs &lt; maxparagraphs: # start outer loop, until maxparagraphs is reached
    w1 = stopword
    w2 = stopword
    stopsentence = (".", "!", "?",)
    sentence = []
    sentencecount = 0 # reset the inner 'while' loop counter to zero
    maxsentences = random.randrange(1,5) # random sentences per paragraph

    while sentencecount &lt; maxsentences: # start inner loop, until maxsentences is reached
        newword = random.choice(table[(w1, w2)]) # random word from word table
        if newword == stopword: sys.exit()
        elif newword in stopsentence:
            print ("%s%s" % (" ".join(sentence), newword), end=" ")
            sentence = [] # I have to be here to make the new sentence start as an empty list!!!
            sentencecount += 1 # increment the sentence counter
        else:
            sentence.append(newword)
        w1, w2 = w2, newword
    print (paragraphsep) # newline space
    paragraphs = paragraphs + 1 # increment the paragraph counter
</snippet></ROW><ROW><id>13038845</id><snippet>"""
    from:  http://code.activestate.com/recipes/194364-the-markov-chain-algorithm/?in=lang-python
"""

import random;
import sys;

stopword = "\n" # Since we split on whitespace, this can never be a word
stopsentence = (".", "!", "?",) # Cause a "new sentence" if found at the end of a word
sentencesep  = "\n" #String used to seperate sentences


# GENERATE TABLE
w1 = stopword
w2 = stopword
table = {}

for line in sys.stdin:
    for word in line.split():
        if word[-1] in stopsentence:
            table.setdefault( (w1, w2), [] ).append(word[0:-1])
            w1, w2 = w2, word[0:-1]
            word = word[-1]
        table.setdefault( (w1, w2), [] ).append(word)
        w1, w2 = w2, word
# Mark the end of the file
table.setdefault( (w1, w2), [] ).append(stopword)

# GENERATE SENTENCE OUTPUT
maxsentences  = 20

w1 = stopword
w2 = stopword
sentencecount = 0
sentence = []
paragraphsep == "\n\n"
count = random.randrange(1,5)

while sentencecount &lt; maxsentences:
    newword = random.choice(table[(w1, w2)])
    if newword == stopword: sys.exit()
    if newword in stopsentence:
        print ("%s%s" % (" ".join(sentence), newword), end=" ")
        sentence = []
        sentencecount += 1
        count -= 1
        if count == 0:
            count = random.randrange(1,5)
            print (paragraphsep)
    else:
        sentence.append(newword)
    w1, w2 = w2, newword
</snippet></ROW><ROW><id>13038849</id><snippet>sorted(dict.keys())</snippet></ROW><ROW><id>13038849</id><snippet>for k in ke:
    print k, dict[k]
</snippet></ROW><ROW><id>13038867</id><snippet>scrapy crawl &lt;spidername&gt; -o &lt;filename&gt; -t xml</snippet></ROW><ROW><id>13039085</id><snippet>In [11]: lis=[(1, 'Cat', 200, 3.2), (4, 'Dog', 204, 4.1), (2, 'Rabbit', 519, 2.0)]

In [12]: lis=map(list,lis) #convert tuples to list


In [13]: lis       #now lis is list of lists instead of list of tuples
Out[13]: 
[[1, 'Cat', 200, 3.2000000000000002],
 [4, 'Dog', 204, 4.0999999999999996],
 [2, 'Rabbit', 519, 2.0]]

#use enumerate() for indexes, no need of manual indexing

In [14]: for i,x in enumerate(lis):
    x.insert(-1,i)                #insert at -1 not -2
   ....:     
   ....:     

In [15]: lis
Out[15]: 
[[1, 'Cat', 200, 0, 3.2000000000000002],
 [4, 'Dog', 204, 1, 4.0999999999999996],
 [2, 'Rabbit', 519, 2, 2.0]]
</snippet></ROW><ROW><id>13039182</id><snippet>Individual</snippet></ROW><ROW><id>13039182</id><snippet>pop[0]</snippet></ROW><ROW><id>13039182</id><snippet>Instance</snippet></ROW><ROW><id>13039182</id><snippet>isinstance</snippet></ROW><ROW><id>13039182</id><snippet>pop[0].__class__ is Individual</snippet></ROW><ROW><id>13039182</id><snippet>reload</snippet></ROW><ROW><id>13039182</id><snippet>python bla</snippet></ROW><ROW><id>13039182</id><snippet>import bla</snippet></ROW><ROW><id>13039182</id><snippet>Genetic</snippet></ROW><ROW><id>13039182</id><snippet>individual</snippet></ROW><ROW><id>13039182</id><snippet>individual.Individual</snippet></ROW><ROW><id>13039182</id><snippet>Genetic</snippet></ROW><ROW><id>13039182</id><snippet>Genetic.individual</snippet></ROW><ROW><id>13039182</id><snippet>Genetic.individual.Individual</snippet></ROW><ROW><id>13039182</id><snippet>import Genetic.individual</snippet></ROW><ROW><id>13039182</id><snippet>import individual</snippet></ROW><ROW><id>13039182</id><snippet>import Genetic.individual as individual</snippet></ROW><ROW><id>13039182</id><snippet>isinstance</snippet></ROW><ROW><id>13039230</id><snippet>max()</snippet></ROW><ROW><id>13039230</id><snippet>In [22]: lis=[(840, 32), (841, 3), (842, 4), (843, 4), (844, 6), (845, 6), (846, 12), (847, 6), (848, 10), (849, 4)]

In [23]: max(lis,key=lambda x:x[1])
Out[23]: (840, 32)
</snippet></ROW><ROW><id>13039230</id><snippet>In [24]: import operator 

In [25]: max(lis,key=operator.itemgetter(1))
Out[25]: (840, 32)
</snippet></ROW><ROW><id>13039831</id><snippet>&lt;?php
require("class.php");
$obj=new module();

$det=$obj-&gt;get_url();

$batch_size = 40;

function curlTest2($urls) {
    clearstatcache();
    $batch_size = count($urls);

    $return = '';

    echo "&lt;br/&gt;&lt;br/&gt;Batch:";
    foreach ($urls as &amp;$url)
    {
        echo "&lt;br/&gt;".$url;
        if(substr($url,0,4)!="http") $url = "http://".$url;
        $url = "https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;num=-1&amp;q=".$url;
    }

    $userAgent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)';

    $chs = array();

    for ($i = 0; $i &lt; $batch_size; $i++)
    {
        $ch = curl_init();
        array_push($chs, $ch);
    }

    for ($i = 0; $i &lt; $batch_size; $i++)
    {
        curl_setopt($chs[$i], CURLOPT_HEADER, 1);
        curl_setopt($chs[$i], CURLOPT_NOBODY, 1);
        curl_setopt($chs[$i], CURLOPT_USERAGENT, $userAgent);
        curl_setopt($chs[$i], CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($chs[$i], CURLOPT_CONNECTTIMEOUT, 15);
        curl_setopt($chs[$i], CURLOPT_FAILONERROR, 1);
        curl_setopt($chs[$i], CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($chs[$i], CURLOPT_URL, $urls[$i]);
    }

    $mh = curl_multi_init();

    for ($i = 0; $i &lt; $batch_size; $i++)
    {
        curl_multi_add_handle($mh, $chs[$i]);
    }

    $active = null;
    //execute the handles
    do {
        $mrc = curl_multi_exec($mh, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active &amp;&amp; $mrc == CURLM_OK) {
        if (curl_multi_select($mh) != -1) {
            do {
                $mrc = curl_multi_exec($mh, $active);
            } while ($mrc == CURLM_CALL_MULTI_PERFORM);
        }
    }

    //close the handles
    for ($i = 0; $i &lt; $batch_size; $i++)
    {
        curl_multi_remove_handle($mh, $chs[$i]);
    }

    curl_multi_close($mh);
}

$startTime = time();
$urls = array();

foreach($det as $key=&gt;$value){
    array_push($urls, $value['url']);

    if (count($urls) == $batch_size)
    {
        curlTest2($urls);
        $urls = array();
    }
}

echo "&lt;br/&gt;&lt;br/&gt;Time: ".(time() - $startTime)."sec";
?&gt;
</snippet></ROW><ROW><id>13040058</id><snippet>filen = 'filename.txt'
x = loadtxt(fn,unpack=True,usecols=[0]) 
y = loadtxt(fn,unpack=True,usecols=[1])

n = ma.masked_where(gradient(y) &lt; 0, y)
p = ma.masked_where(gradient(y) &gt; 0, y)

pylab.plot(x,n,'r',x,p,'g')
</snippet></ROW><ROW><id>13040745</id><snippet>import datetime</snippet></ROW><ROW><id>13040745</id><snippet>year</snippet></ROW><ROW><id>13040745</id><snippet>string</snippet></ROW><ROW><id>13040745</id><snippet>date</snippet></ROW><ROW><id>13040745</id><snippet># This is the first modification - importing the library
import datetime
import gviz_api

# page_template stays the same
# ...

def main():
  # Creating the data
  # Here we change the type of column "year" to "date"
  description = {"year": ("date", "Year"),
                 "sales": ("number", "Sales"),
                 "expenses": ("number", "Expenses")}

  # Here we switch out the string dates with an actual Python datetime.date
  # The conversion happens in the the subsequent functions, giving you a 
  # date that is usable in the JS
  data = [{"year": datetime.date(2007,3,7), "sales": 1000, "expenses": 300},
          {"year": datetime.date(2009,6,11), "sales": 1200, "expenses": 400},
          {"year": datetime.date(2009,3,1), "sales": 1300, "expenses": 500},
          {"year": datetime.date(2010,8,6), "sales": 1401, "expenses": 600},
          {"year": datetime.date(2011,7,13), "sales": 1500, "expenses": 800}]
  # Loading it into gviz_api.DataTable
  data_table = gviz_api.DataTable(description)
  data_table.LoadData(data)

  # Creating a JavaScript code string
  jscode = data_table.ToJSCode("jscode_data",
                               columns_order=("year", "sales", "expenses"),
                               order_by="year")
  # Creating a JSon string
  json = data_table.ToJSon(columns_order=("year", "sales", "expenses"),
                           order_by="year")

  # Putting the JS code and JSon string into the template
  print "Content-type: text/html"
  print
  print page_template % vars()


if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>13040754</id><snippet>In [1]: import numpy as np
In [2]: import pandas as pd
In [3]: from datetime import datetime
In [4]: dates = [datetime(2011, 1, 2), datetime(2011, 1, 5), datetime(2011, 1, 7), datetime(2011, 1, 8), datetime(2011, 1, 10), datetime(2011, 1, 12)]

In [5]: ts = pd.Series(np.random.randn(6), index=dates)

In [6]: ts
Out[6]: 
2011-01-02   -0.412335
2011-01-05   -0.809092
2011-01-07   -0.442320
2011-01-08   -0.337281
2011-01-10    0.522765
2011-01-12    1.559876
</snippet></ROW><ROW><id>13040754</id><snippet>In [9]: ts[datetime(2011, 1, 8):]
Out[9]: 
2011-01-08   -0.337281
2011-01-10    0.522765
2011-01-12    1.559876
</snippet></ROW><ROW><id>13040754</id><snippet>In [10]: ts[datetime(2011, 1, 8):][0]
Out[10]: -0.33728079849770815
</snippet></ROW><ROW><id>13040754</id><snippet>In [21]: ts2 = ts[datetime(2011, 1, 8):]
In [23]: ts2[0] = 99
</snippet></ROW><ROW><id>13040754</id><snippet>In [24]: ts
Out[24]: 
2011-01-02    -0.412335
2011-01-05    -0.809092
2011-01-07    -0.442320
2011-01-08    99.000000
2011-01-10     0.522765
2011-01-12     1.559876
</snippet></ROW><ROW><id>13040754</id><snippet>In [25]: ts3 = ts.truncate(before='2011-01-08')

In [26]: ts3  
Out[26]: 
2011-01-08    99.000000
2011-01-10     0.522765
2011-01-12     1.559876
</snippet></ROW><ROW><id>13040754</id><snippet>In [27]: ts3[1] = 99

In [28]: ts3
Out[28]: 
2011-01-08    99.000000
2011-01-10    99.000000
2011-01-12     1.559876

In [29]: ts                #The january 10th value will be unchanged. 
Out[29]: 
2011-01-02    -0.412335
2011-01-05    -0.809092
2011-01-07    -0.442320
2011-01-08    99.000000
2011-01-10     0.522765
2011-01-12     1.559876
</snippet></ROW><ROW><id>13040797</id><snippet>result.ashx</snippet></ROW><ROW><id>13040797</id><snippet>inlibrary:false
noext:false
debug:
lastquery:publisher:"sonzogno" ex-Everything-7.0:"1700-1943"
lsi:user
uilang:en
searchmode:assoc
hardsort:def
skin:harvard
rctx:AAMAAAABAAAAAwAAABJ/AAAHaGFydmFyZDJwdWJsaXNoZXI6InNvbnpvZ25vIiBleC1FdmVyeXRoaW5nLTcuMDoiMTcwMC0xOTQzIjJwdWJsaXNoZXI6InNvbnpvZ25vIiBleC1FdmVyeXRoaW5nLTcuMDoiMTcwMC0xOTQzIhJzb256b2dubyAxNzAwLTE5NDMAAAAAA25hdgR1c2VyAAAAA2RlZgpyZXN1bHRsaXN0BWFzc29jBQAAAAAAAAACZW4AAP////9AEAAAAAAAAAIAAAAGY19vdmVyATEEaV9mawAAAAAA
c_over:1
curpage:3
concept:sonzogno 1700-1943
branch:
ref:
i_fk:
mxdk:-1
q:publisher:"sonzogno" ex-Everything-7.0:"1700-1943"
si:user
cs:resultlist
cmd:nav
</snippet></ROW><ROW><id>13040797</id><snippet>curpage</snippet></ROW><ROW><id>13040797</id><snippet>params = urllib.urlencode({"curpage": NUMBER})
urllib2.urlopen(YOUR_PAGE, params) 
</snippet></ROW><ROW><id>13040849</id><snippet>threads</snippet></ROW><ROW><id>13040849</id><snippet>gevent</snippet></ROW><ROW><id>13040849</id><snippet>gevent.sleep()</snippet></ROW><ROW><id>13040849</id><snippet>semaphore.wait()</snippet></ROW><ROW><id>13040849</id><snippet>cv.wait()</snippet></ROW><ROW><id>13040849</id><snippet>cv.notify_all()</snippet></ROW><ROW><id>13040849</id><snippet>def wait_on_cv(x):
    cv.acquire()
    print 'acquired ', x
    cv.wait()
    ....
</snippet></ROW><ROW><id>13040849</id><snippet>...
threads = [ gevent.spawn(wait_on_cv, x) for x in range(10) ]
gevent.sleep()  # Trigger a context switch
...
</snippet></ROW><ROW><id>13040849</id><snippet>gevent</snippet></ROW><ROW><id>13040849</id><snippet>cv.wait()</snippet></ROW><ROW><id>13040849</id><snippet>cv.notify_all()</snippet></ROW><ROW><id>13040881</id><snippet>__add__</snippet></ROW><ROW><id>13040881</id><snippet>__sub__</snippet></ROW><ROW><id>13040881</id><snippet>class P(object):
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat

    def __sub__(self, other):
        dist = ((other.lon - self.lon)**2 + (other.lat - self.lat)**2)**0.5
        return dist
</snippet></ROW><ROW><id>13040881</id><snippet>class P(object):
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat

    def __sub__(self, other):
        dist = ((other[0] - self[0])**2 + (other[1] - self[1])**2)**0.5
        return dist

    def __getitem__(self, key):
        if key == 0:
            return self.lon
        elif key == 1:
            return self.lat
        else:
            raise IndexError

    def __setitem__(self, key, value):
        if key == 0:
            self.lon = value
        elif key == 1:
            self.lat = value
        else:
            raise IndexError
</snippet></ROW><ROW><id>13040909</id><snippet>#!/usr/bin/env python
import socket
s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW)
s.bind(("ethX", 0))

blocksize = 100;
with open('filename.txt') as fh:
    while True:
        block = fh.read(blocksize)
        if block == "": break  #EOF
        s.send(block)
</snippet></ROW><ROW><id>13040909</id><snippet>ethX</snippet></ROW><ROW><id>13040909</id><snippet>eth1</snippet></ROW><ROW><id>13040909</id><snippet>eth2</snippet></ROW><ROW><id>13040909</id><snippet>wlan1</snippet></ROW><ROW><id>13040909</id><snippet>blocksize</snippet></ROW><ROW><id>13040909</id><snippet>while</snippet></ROW><ROW><id>13040909</id><snippet>send</snippet></ROW><ROW><id>13040909</id><snippet>while</snippet></ROW><ROW><id>13041016</id><snippet>VER</snippet></ROW><ROW><id>13041016</id><snippet>.+?</snippet></ROW><ROW><id>13041016</id><snippet>?</snippet></ROW><ROW><id>13041016</id><snippet>.+</snippet></ROW><ROW><id>13041016</id><snippet>....VER</snippet></ROW><ROW><id>13041016</id><snippet>.+?</snippet></ROW><ROW><id>13041016</id><snippet>.+</snippet></ROW><ROW><id>13041016</id><snippet>[^"]</snippet></ROW><ROW><id>13041016</id><snippet>.+</snippet></ROW><ROW><id>13041016</id><snippet>re.findall(r'\"(\b[^"]+)(?&lt;!VER)\b\"',text)
</snippet></ROW><ROW><id>13041016</id><snippet>&gt;&gt;&gt; text='"GameVER": ["GM435615-IQR", "LG-QR435", "HG145-IR9", "WUT828-PQR10"] "VERIZON": ["GKSL42375834-45", "DG-67498", "GF4564", "HFJ-88.8.98"]'
&gt;&gt;&gt; re.findall(r'\"(\b[^"]+)(?&lt;!VER)\b\"',text)
['GM435615-IQR', 'LG-QR435', 'HG145-IR9', 'WUT828-PQR10', 'VERIZON', 'GKSL42375834-45', 'DG-67498', 'GF4564', 'HFJ-88.8.98']
</snippet></ROW><ROW><id>13041101</id><snippet>bin</snippet></ROW><ROW><id>13041101</id><snippet>.heroku/venv/bin</snippet></ROW><ROW><id>13041101</id><snippet>heroku config</snippet></ROW><ROW><id>13041101</id><snippet>.heroku/venv/bin</snippet></ROW><ROW><id>13041101</id><snippet>bin/gunicorn_django</snippet></ROW><ROW><id>13041119</id><snippet>nltk.tokenize.wordpunct_tokenize</snippet></ROW><ROW><id>13041155</id><snippet>In [12]: import networkx as nx

In [13]: G=nx.gnp_random_graph(1000,0.01,directed=True)

In [14]: %timeit nx.pagerank(G,tol=1e-10)
10 loops, best of 3: 157 ms per loop

In [15]: %timeit nx.pagerank_scipy(G,tol=1e-10)
100 loops, best of 3: 14 ms per loop

In [16]: %timeit nx.pagerank(G)
10 loops, best of 3: 137 ms per loop
</snippet></ROW><ROW><id>13041204</id><snippet>data = csv.DictReader(open(f), delimiter="\t", fieldnames=fieldnames)
sorted_data = sorted(data, key=operator.itemgetter(col_name))
for name, entries in itertools.groupby(data, key=operator.itemgetter(col_name)):
    pass # whatever
</snippet></ROW><ROW><id>13041204</id><snippet>defaultdict</snippet></ROW><ROW><id>13041204</id><snippet>from collections import defaultdict
name_entries = defaultdict(list)
for row in data:
    name_entries[row[col_name]].append(row)
</snippet></ROW><ROW><id>13041698</id><snippet>data = {blah blah}
objects = list(my_queryset())
for object in objects:
    object.data = data
return objects
</snippet></ROW><ROW><id>13041722</id><snippet>__hash__</snippet></ROW><ROW><id>13041722</id><snippet>&gt;&gt;&gt; class HashableBytearray(bytearray):
...     def __hash__(self):
...         return hash(str(self))
... 
&gt;&gt;&gt; h = HashableBytearray('abcd')
&gt;&gt;&gt; hash(h)
-2835746963027601024
&gt;&gt;&gt; h[2] = 'z'
&gt;&gt;&gt; hash(h)
-2835746963002600949
</snippet></ROW><ROW><id>13041722</id><snippet>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; hb1 = HashableBytearray('abcd')
&gt;&gt;&gt; hb2 = HashableBytearray('abcd')
&gt;&gt;&gt; d[hb1] = 0
&gt;&gt;&gt; d[hb2] = 1
&gt;&gt;&gt; d
{bytearray(b'abcd'): 1}
</snippet></ROW><ROW><id>13041722</id><snippet>hb1</snippet></ROW><ROW><id>13041722</id><snippet>&gt;&gt;&gt; hb1[2] = 'z'
&gt;&gt;&gt; d[hb2] = 2
&gt;&gt;&gt; d
{bytearray(b'abzd'): 1, bytearray(b'abcd'): 2}
</snippet></ROW><ROW><id>13041722</id><snippet>hb2</snippet></ROW><ROW><id>13041722</id><snippet>d</snippet></ROW><ROW><id>13041722</id><snippet>'abcd'</snippet></ROW><ROW><id>13041722</id><snippet>bytearray</snippet></ROW><ROW><id>13041722</id><snippet>buffer</snippet></ROW><ROW><id>13041722</id><snippet>&gt;&gt;&gt; a, b, c = bytearray('abcd'), bytearray('abcd'), bytearray('abzd')
&gt;&gt;&gt; a_buf, b_buf, c_buf = buffer(a), buffer(b), buffer(c)
&gt;&gt;&gt; d = {b_buf:1, c_buf:2}
&gt;&gt;&gt; b[2] = 'z'
&gt;&gt;&gt; d[a_buf] = 0
</snippet></ROW><ROW><id>13041722</id><snippet>&gt;&gt;&gt; d
{&lt;read-only buffer for 0x1004a2300, size -1, offset 0 at 0x100499cb0&gt;: 1, 
 &lt;read-only buffer for 0x1004a2420, size -1, offset 0 at 0x100499cf0&gt;: 0, 
 &lt;read-only buffer for 0x1004a22d0, size -1, offset 0 at 0x100499c70&gt;: 2}
</snippet></ROW><ROW><id>13041741</id><snippet>r_server.lpush(...)</snippet></ROW><ROW><id>13041741</id><snippet>get</snippet></ROW><ROW><id>13041741</id><snippet>rs.blpop()</snippet></ROW><ROW><id>13041741</id><snippet>get()</snippet></ROW><ROW><id>13041781</id><snippet>i, j = (i, j) if i &lt; j else (j, i) # make sure i &lt; j
s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]
</snippet></ROW><ROW><id>13041781</id><snippet>import timeit
import types

N = 10000
R = 3
SUFFIX = '_test'
SUFFIX_LEN = len(SUFFIX)

def setup():
    import random
    global s, i, j
    s = 'abcdefghijklmnopqrstuvwxyz'
    i = random.randrange(len(s))
    while True:
        j = random.randrange(len(s))
        if i != j: break

def swapchars_martineau(s, i, j):
    i, j = (i, j) if i &lt; j else (j, i) # make sure i &lt; j
    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]

def swapchars_martineau_test():
    global s, i, j
    swapchars_martineau(s, i, j)

def swapchars_clements(text, fst, snd):
    ba = bytearray(text)
    ba[fst], ba[snd] = ba[snd], ba[fst]
    return str(ba)

def swapchars_clements_test():
    global s, i, j
    swapchars_clements(s, i, j)

# find all the functions named *SUFFIX in the global namespace
funcs = tuple(value for id,value in globals().items()
            if id.endswith(SUFFIX) and type(value) is types.FunctionType)

# run the timing tests and collect results
timings = [(f.func_name[:-SUFFIX_LEN],
            min(timeit.repeat(f, setup=setup, repeat=R, number=N))
           ) for f in funcs]
timings.sort(key=lambda x: x[1])  # sort by speed
fastest = timings[0][1]  # time fastest one took to run
longest = max(len(t[0]) for t in timings) # len of longest func name (w/o suffix)

print 'fastest to slowest *_test() function timings:\n' \
      ' {:,d} chars, {:,d} timeit calls, best of {:d}\n'.format(len(s), N, R)

def times_slower(speed, fastest):
    return speed/fastest - 1.0

for i in timings:
    print "{0:&gt;{width}}{suffix}() : {1:.4f} ({2:.2f} times slower)".format(
                i[0], i[1], times_slower(i[1], fastest), width=longest, suffix=SUFFIX)
</snippet></ROW><ROW><id>13041781</id><snippet>format()</snippet></ROW><ROW><id>13041781</id><snippet>n = int(s)
len_s = len(s)
ord_0 = ord('0')
di = ord(s[i])-ord_0
dj = ord(s[j])-ord_0
pi = 10**(len_s-(i+1))
pj = 10**(len_s-(j+1))
s = '{:0{width}d}'.format(n + (dj-di)*pi + (di-dj)*pj, width=len_s)
</snippet></ROW><ROW><id>13041896</id><snippet>findtext</snippet></ROW><ROW><id>13041896</id><snippet>''</snippet></ROW><ROW><id>13041896</id><snippet>print "Wind Gust: ", meta.findtext('wind_gust_kt', '')
</snippet></ROW><ROW><id>13042026</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
import numpy   # &lt;&lt; New line

ext_modules = [Extension("test_ext", ["test_ext.pyx"])]

setup(
    name = 'test',
    cmdclass = {'build_ext': build_ext},
    include_dirs = [numpy.get_include()], # &lt;&lt; New line
    ext_modules = ext_modules
)
</snippet></ROW><ROW><id>13042034</id><snippet>mysql&gt; create table `index` (url varchar(50));
Query OK, 0 rows affected (0.05 sec)

mysql&gt; insert into index(url) values ('http://www.google.com');
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'index(url) values ('http://www.google.com')' at line 1

mysql&gt; insert into `index`(url) values ('http://www.google.com');
Query OK, 1 row affected (0.00 sec)
</snippet></ROW><ROW><id>13042034</id><snippet>index</snippet></ROW><ROW><id>13042034</id><snippet>cursor.execute("""INSERT INTO `index`(url) VALUES(%s)""", (url,))
</snippet></ROW><ROW><id>13042034</id><snippet>url = mdb.escape_string("http://www.google.com")
</snippet></ROW><ROW><id>13042034</id><snippet>cursor.execute("""INSERT INTO index(url) VALUES(%s)""", (url,))
</snippet></ROW><ROW><id>13042034</id><snippet>cursor.execute</snippet></ROW><ROW><id>13042034</id><snippet>mdb.escape_string</snippet></ROW><ROW><id>13042034</id><snippet>url</snippet></ROW><ROW><id>13042034</id><snippet>In [105]: MySQLdb.escape_string("That's all folks")
Out[105]: "That\\'s all folks"

In [106]: MySQLdb.escape_string(MySQLdb.escape_string("That's all folks"))
Out[106]: "That\\\\\\'s all folks"
</snippet></ROW><ROW><id>13042285</id><snippet>dict</snippet></ROW><ROW><id>13042687</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; l = [['hotel','good','bad'],['hilton',1,2],['ramada',3,4]]
&gt;&gt;&gt; a = np.array(l) # convert to a numpy array to make multi-dimensional slicing possible
&gt;&gt;&gt; a
array([['hotel', 'good', 'bad'],
       ['hilton', '1', '2'],
       ['ramada', '3', '4']], 
      dtype='|S4')
&gt;&gt;&gt; a[1:,1:] # exclude the first row and the first column
array([['1', '2'],
       ['3', '4']], 
      dtype='|S4')
&gt;&gt;&gt; a[1:,1:].astype(np.float32) # convert to float
array([[ 1.,  2.],
       [ 3.,  4.]], dtype=float32)
</snippet></ROW><ROW><id>13042687</id><snippet>astype</snippet></ROW><ROW><id>13042687</id><snippet>&gt;&gt;&gt; l = [['hotel','good','bad'],['hilton',1,2],['ramada',3,4]]
&gt;&gt;&gt; np.array(l)[1:,1:].astype(np.float32)
array([[ 1.,  2.],
       [ 3.,  4.]], dtype=float32)
</snippet></ROW><ROW><id>13042687</id><snippet>ValueError</snippet></ROW><ROW><id>13042687</id><snippet>new_list</snippet></ROW><ROW><id>13042687</id><snippet>&gt;&gt;&gt; [len(x) for x in new_list]
[9, 9, 9, 9, 9, 9, 9, 9, 9, 8]
</snippet></ROW><ROW><id>13042687</id><snippet>numpy.array</snippet></ROW><ROW><id>13042687</id><snippet>dtype</snippet></ROW><ROW><id>13042687</id><snippet>object</snippet></ROW><ROW><id>13042687</id><snippet>astype</snippet></ROW><ROW><id>13042687</id><snippet>float32</snippet></ROW><ROW><id>13042689</id><snippet>import re, os

def grep(regex, base_dir):
    compiled_regex = re.compile(regex, re.DOTALL)
    matches = list()
    for filename in os.listdir(base_dir):
        full_filename = os.path.join(base_dir, filename)
        if not os.path.isfile(full_filename):
            continue
        with open(os.path.join(base_dir, filename)) as fh:
            content = fh.read()
            if compiled_regex.search(content):
                matches.append(full_filename)
    return matches

print grep(" dojo.require(..*) ", ".")
</snippet></ROW><ROW><id>13042727</id><snippet>f.write(str(i) + '\n')</snippet></ROW><ROW><id>13042741</id><snippet>airodump = subprocess.Popen(['airodump-ng', '-w', 'outputfilename', 'mon0'],
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
time.sleep(secs)
airodump.terminate()
return_code = airodump.wait()
</snippet></ROW><ROW><id>13042741</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>13043268</id><snippet>every 10 minutes from 07:00 to 15:00</snippet></ROW><ROW><id>13043268</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.datetime.today()
&gt;&gt;&gt; today.weekday()
1
</snippet></ROW><ROW><id>13043268</id><snippet>0</snippet></ROW><ROW><id>13043268</id><snippet>1</snippet></ROW><ROW><id>13043268</id><snippet>in (5, 6)</snippet></ROW><ROW><id>13043300</id><snippet>class PlayList(models.Model):
    playlist = models.CharField(max_length=2000)

class UserProfile(models.Model):
    # do you want each `User` to only have one `UserProfile`? If so then OneToOne
    # primary keys are automatically formed by django
    # how django handles profiles: https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users
    user = models.ForeignKey(User)

    def __unicode__(self):
        return self.User

class UserPlayList(models.Model):
    # don't capitalise attributes, if you haven't seen PEP8 before, do now: http://www.python.org/dev/peps/pep-0008/
    profile = models.ForeignKey(User)
    playlist = models.ForeignKey(PlayList)

class Video(models.Model):
    video_url = models.URLField(max_length=200, null=True, blank=True, help_text="Link to video")

    def __unicode__(self):
        return self.video_url

class VideoPlayList(models.Model):
    video = models.ForeignKey(Video)
    play_list = models.ForeignKey(UserPlayList)
</snippet></ROW><ROW><id>13043507</id><snippet>A.__new__()</snippet></ROW><ROW><id>13043507</id><snippet>a</snippet></ROW><ROW><id>13043507</id><snippet>class A(object):</snippet></ROW><ROW><id>13043507</id><snippet>class A:</snippet></ROW><ROW><id>13043507</id><snippet>class A:</snippet></ROW><ROW><id>13043507</id><snippet>__new__</snippet></ROW><ROW><id>13043507</id><snippet>object.__new__()</snippet></ROW><ROW><id>13043507</id><snippet>a</snippet></ROW><ROW><id>13043507</id><snippet>a = A()</snippet></ROW><ROW><id>13043507</id><snippet>A()</snippet></ROW><ROW><id>13043507</id><snippet>A.__call__</snippet></ROW><ROW><id>13043507</id><snippet>object.__new__(cls, *args, **kwargs)</snippet></ROW><ROW><id>13043507</id><snippet>cls=A</snippet></ROW><ROW><id>13043507</id><snippet>a</snippet></ROW><ROW><id>13043507</id><snippet>__init__(self)</snippet></ROW><ROW><id>13043507</id><snippet>__new__</snippet></ROW><ROW><id>13043507</id><snippet>__init__</snippet></ROW><ROW><id>13043507</id><snippet>class A(object):

    def __new__(cls, *args, **kwargs):
        print cls, args, kwargs

    def __init__(self):
        self.x = 'init!'
        print self.x


In : a = A()
&lt;class '__main__.A'&gt; () {}

# note that "init!" has not appeared here because __new__ didn't return an
# new instance
</snippet></ROW><ROW><id>13043507</id><snippet>object.__new__</snippet></ROW><ROW><id>13043507</id><snippet>__new__</snippet></ROW><ROW><id>13043507</id><snippet>__init__</snippet></ROW><ROW><id>13043507</id><snippet>class A(object):

    def __new__(cls, *args, **kwargs):
        print cls, args, kwargs
        return object.__new__(cls, args, kwargs)

    def __init__(self):
        self.x = 'init!'
        print self.x

In : a = A()
&lt;class '__main__.A'&gt; () {}
init!
</snippet></ROW><ROW><id>13043507</id><snippet>a</snippet></ROW><ROW><id>13043507</id><snippet>__init__()</snippet></ROW><ROW><id>13043507</id><snippet>class A(object):
    def __init__(self):
        self.x = "init!"
        print self.x

In : a = object.__new__(A)

In : a
Out: &lt;__main__.A at 0x103466450&gt;

In : a.__dict__
Out: {}


In : aa = A()
init!

In : aa
Out: &lt;__main__.A at 0x1033ddf50&gt;

In : aa.__dict__
Out: {'x': 'init!'}
</snippet></ROW><ROW><id>13043507</id><snippet>class</snippet></ROW><ROW><id>13043507</id><snippet>object</snippet></ROW><ROW><id>13043507</id><snippet>class Hello(object):
    pass
&gt;&gt;&gt; Hello.__class__
&lt;type 'type'&gt;
</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>type(type)</snippet></ROW><ROW><id>13043507</id><snippet>__call__</snippet></ROW><ROW><id>13043507</id><snippet>()</snippet></ROW><ROW><id>13043507</id><snippet>&gt;&gt;&gt; h = hello()
&gt;&gt;&gt; type(h)
&lt;class '__main__.Hello'&gt;
&gt;&gt;&gt; type(int('1'))
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>13043507</id><snippet>[1,2,3]</snippet></ROW><ROW><id>13043507</id><snippet>type(my_obj)</snippet></ROW><ROW><id>13043507</id><snippet>my_object.__class__</snippet></ROW><ROW><id>13043507</id><snippet>class</snippet></ROW><ROW><id>13043507</id><snippet>type(cls_name, parent_class_tuple, attr_dict)</snippet></ROW><ROW><id>13043507</id><snippet>type('Hello', (object,), {})
</snippet></ROW><ROW><id>13043507</id><snippet>Hello</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>__class__</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>            instantiate             instantiate
metaclass   --------------&gt; class   ----------------&gt;    instance
            type.__new__()          object.__new__()
</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>type.__call__()</snippet></ROW><ROW><id>13043507</id><snippet>type.__new__()</snippet></ROW><ROW><id>13043507</id><snippet>type.__init__()</snippet></ROW><ROW><id>13043507</id><snippet>type.__init__()</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>class MyMeta(type):
    def __new__(meta, name, bases, dct):
        # do something
        return super(MyMeta, meta).__new__(meta, name, bases, dct)
    def __init__(cls, name, bases, dct):
        # do something
        super(MyMeta, cls).__init__(name, bases, dct)
</snippet></ROW><ROW><id>13043507</id><snippet>MyMeta</snippet></ROW><ROW><id>13043507</id><snippet>type</snippet></ROW><ROW><id>13043507</id><snippet>MyClass = MyMeta('MyClass', (object, ), {'x': 1})
</snippet></ROW><ROW><id>13043507</id><snippet>__metaclass__</snippet></ROW><ROW><id>13043507</id><snippet>class MyClass(object):
    __metaclass__ = MyMeta
    x = 1
</snippet></ROW><ROW><id>13043765</id><snippet>myModule/__init__.py</snippet></ROW><ROW><id>13043765</id><snippet>"""
The mod module
"""
</snippet></ROW><ROW><id>13043765</id><snippet>myModule/*.py</snippet></ROW><ROW><id>13043765</id><snippet>pydoc myModule.thefilename
</snippet></ROW><ROW><id>13044229</id><snippet>arg5</snippet></ROW><ROW><id>13044229</id><snippet>g</snippet></ROW><ROW><id>13044229</id><snippet>assert</snippet></ROW><ROW><id>13044229</id><snippet>raise AssertionError("while loop should have returned early")</snippet></ROW><ROW><id>13044295</id><snippet>yum install python-devel
</snippet></ROW><ROW><id>13044946</id><snippet>magic_dict</snippet></ROW><ROW><id>13044946</id><snippet>magic_dict = {
    "\x1f\x8b\x08": "gz",
    "\x42\x5a\x68": "bz2",
    "\x50\x4b\x03\x04": "zip"
    }

max_len = max(len(x) for x in magic_dict)

def file_type(filename):
    with open(filename) as f:
        file_start = f.read(max_len)
    for magic, filetype in magic_dict.items():
        if file_start.startswith(magic):
            return filetype
    return "no match"
</snippet></ROW><ROW><id>13045119</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>13045119</id><snippet>In [2]: lis=['pear', 'apple', 'grape', 'apple', 'peach','pear',
             'banana', 'peach', 'apple']

In [3]: dic={}

In [4]: for i,x in enumerate(lis):
   ...:     dic.setdefault(x,[]).append(i)
   ...:     
   ...:     

In [5]: dic
Out[5]: 
{'apple': [1, 3, 8],
 'banana': [6],
 'grape': [2],
 'peach': [4, 7],
 'pear': [0, 5]}
</snippet></ROW><ROW><id>13045119</id><snippet>defaultdict()</snippet></ROW><ROW><id>13045119</id><snippet>In [6]: from collections import defaultdict

In [7]: d=defaultdict(list)

In [8]: for i,x in enumerate(lis):
   ...:     d[x].append(i)
   ...:     
   ...:     

In [9]: d
Out[9]: defaultdict(&lt;type 'list'&gt;, {'grape': [2], 'pear': [0, 5],
        'apple': [1, 3, 8], 'peach': [4, 7], 'banana': [6]})
</snippet></ROW><ROW><id>13045119</id><snippet>timeit</snippet></ROW><ROW><id>13045119</id><snippet>In [27]: def setd():
   ....:     dic={}
   ....:     for i,x in enumerate(lis):
   ....:         dic.setdefault(x,[]).append(i)
   ....:         
   ....:         

In [28]: def ddict():
   ....:     d=defaultdict(list)
   ....:     for i,x in enumerate(lis):
   ....:         d[x].append(i)
   ....:         
   ....:         


In [53]: %timeit setd()
100000 loops, best of 3: 9.57 us per loop

In [54]: %timeit ddict()
100000 loops, best of 3: 10.5 us per loop
</snippet></ROW><ROW><id>13045311</id><snippet>def myc_rb_e2f(np.ndarray[double,ndim=1]y, double t, np.ndarray[double, ndim=1] k, np.ndarray[double, ndim=1] d):
</snippet></ROW><ROW><id>13045311</id><snippet>[pkerp@plastilin so]$ time python run_numpy.py

real    0m47.572s
user    0m45.702s
sys     0m0.049s

[pkerp@plastilin so]$ time python run_cython1.py

real    1m14.851s
user    1m12.308s
sys     0m0.135s

[pkerp@plastilin so]$ time python run_cython2.py

real    0m15.774s
user    0m14.115s
sys     0m0.105s
</snippet></ROW><ROW><id>13045311</id><snippet>myc_rb_e2f</snippet></ROW><ROW><id>13045311</id><snippet>main</snippet></ROW><ROW><id>13045311</id><snippet>[pkerp@plastilin so]$ time python run_cython3.py

real    0m6.165s
user    0m4.818s
sys     0m0.152s
</snippet></ROW><ROW><id>13045311</id><snippet>cimport numpy as np
import numpy as np
from numpy import *
import pylab as pl
from pylab import * 
from scipy import integrate

def myc_rb_e2f(np.ndarray[double,ndim=1]y, double t, np.ndarray[double, ndim=1] k, np.ndarray[double, ndim=1] d, np.ndarray[double, ndim=1] res):

    cdef double S = 0.01
    if t &gt; 300.0:
        S = 5.0
    #if t &gt; 400
        #S = 0.01

    cdef double t1 = k[0]*S/(k[7]+S)
    cdef double t2 = k[1]*(y[0]/(k[14]+y[0]))*(y[1]/(k[15]+y[1]))
    cdef double t3 = k[5]*y[0]/(k[14]+y[0])
    cdef double t4 = k[11]*y[2]*y[6]/(k[16]+y[6])
    cdef double t5 = k[12]*y[3]*y[6]/(k[17]+y[6])
    cdef double t6 = k[2]*y[0]/(k[14]+y[0])
    cdef double t7 = k[3]*S/(k[7]+S)
    cdef double t8 = k[6]*y[1]/(k[15]+y[1])
    cdef double t9 = k[13]*y[5]/(k[18]+y[5])
    cdef double t10 = k[9]*y[2]*y[4]/(k[16]+y[4])
    cdef double t11 = k[10]*y[3]*y[4]/(k[17]+y[4])

    cdef double dM = t1-d[0]*y[0]
    cdef double dE = t2+t3+t4+t5-k[8]*y[4]*y[1]-d[1]*y[1]
    cdef double dCD = t6+t7-d[2]*y[2]
    cdef double dCE = t8-d[3]*y[3]
    cdef double dR = k[4]+t9-k[8]*y[4]*y[1]-t10-t11-d[4]*y[4]
    cdef double dRP = t10+t11+t4+t5-t9-d[5]*y[5]
    cdef double dRE = k[8]*y[4]*y[1]-t4-t5-d[6]*y[6]

    res[0] = dM
    res[1] = dE
    res[2] = dCD
    res[3] = dCE
    res[4] = dR
    res[5] = dRP
    res[6] = dRE

    return res


def main():
    cdef np.ndarray[double,ndim=1] t = np.zeros(467)
    cdef np.ndarray[double,ndim=1] results = np.zeros(7)
    t = np.linspace(0.,3000.,467.)
    # Initial concentrations of [M,E,CD,CE,R,RP,RE]
    cdef np.ndarray[double,ndim=1] y0 = np.array([0.,0.,0.,0.,0.4,0.,0.25])
    cdef np.ndarray[double,ndim=2] E_simulated = np.zeros([467,554])
    cdef np.ndarray[double,ndim=2] r = np.zeros([467,7])
    cdef np.ndarray[double,ndim=1] E_avg = np.zeros([467])
    cdef np.ndarray[double,ndim=1] k = np.zeros([19])
    cdef np.ndarray[double,ndim=1] d = np.zeros([7])
    cdef int i
    for i in range (0,554):
        k[0] = 1.+0.1*randn(1)
        k[1] = 0.15+0.05*randn(1)
        k[2] = 0.2+0.05*randn(1)
        k[3] = 0.2+0.05*randn(1)
        k[4] = 0.35+0.05*randn(1)
        k[5] = 0.001+0.0001*randn(1)
        k[6] = 0.5+0.05*randn(1)
        k[7] = 0.3+0.05*randn(1)
        k[8] = 30.+5.*randn(1)
        k[9] = 18.+3.*randn(1)
        k[10] = 18.+3.*randn(1)
        k[11] = 18.+3.*randn(1)
        k[12] = 18.+3.*randn(1)
        k[13] = 3.6+0.5*randn(1)
        k[14] = 0.15+0.05*randn(1)
        k[15] = 0.15+0.05*randn(1)
        k[16] = 0.92+0.1*randn(1)
        k[17] = 0.92+0.1*randn(1)
        k[18] = 0.01+0.001*randn(1)
        d[0] = 0.7+0.05*randn(1)
        d[1] = 0.25+0.025*randn(1)
        d[2] = 1.5+0.05*randn(1)
        d[3] = 1.5+0.05*randn(1)
        d[4] = 0.06+0.01*randn(1)
        d[5] = 0.06+0.01*randn(1)
        d[6] = 0.03+0.005*randn(1)
        r = integrate.odeint(myc_rb_e2f,y0,t,args=(k,d,results))
        E_simulated[:,i] = r[:,1]
    for i in range(0,467):
        E_avg[i] = sum(E_simulated[i,:])/554.
    #pl.plot(t,E_avg,'-ro')
    #pl.show()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13045561</id><snippet>ap, = ax1.plot(X,Y)</snippet></ROW><ROW><id>13045561</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(111)
V = 10
X = range (V)
char = 'a'
leg = []
legp = []
for i in range (0,5):
    Y = np.random.randn(V)
    ap = ax1.plot(X,Y)
    legp.append(ap)
    char = chr(ord(char)+1)
    leg.append(char)
fig.legend(legp,leg)
plt.show()
</snippet></ROW><ROW><id>13045573</id><snippet>self.model.__name__
</snippet></ROW><ROW><id>13045633</id><snippet>vector&lt;int&gt; x = ...;
vector&lt;int&gt; y = ...;
x.insert(x.end(), y.begin(), y.end()); // append y to x
</snippet></ROW><ROW><id>13045700</id><snippet>sudoPassword = 'mypass'
command = 'mount -t vboxsf myfolder /home/myuser/myfolder'
p = os.system('echo %s|sudo -S %s' % (sudoPassword, command))
</snippet></ROW><ROW><id>13045700</id><snippet>os.popen("sudo -S %s"%(command), 'w').write('mypass')</snippet></ROW><ROW><id>13045745</id><snippet>for s in dir(settings):
    print s, ':', getattr(settings, s)
</snippet></ROW><ROW><id>13046335</id><snippet>form_valid</snippet></ROW><ROW><id>13046335</id><snippet>ProcessFormView</snippet></ROW><ROW><id>13046335</id><snippet>def post(self, request, *args, **kwargs):
    form_class = self.get_form_class()
    form = self.get_form(form_class)
    if form.is_valid():
        return self.form_valid(form)
</snippet></ROW><ROW><id>13046335</id><snippet>self.get_form(form_class)</snippet></ROW><ROW><id>13046335</id><snippet>form_valid</snippet></ROW><ROW><id>13046335</id><snippet>ModelFormMixin</snippet></ROW><ROW><id>13046335</id><snippet>CreateView</snippet></ROW><ROW><id>13046335</id><snippet>form_valid</snippet></ROW><ROW><id>13046348</id><snippet>\x08</snippet></ROW><ROW><id>13046348</id><snippet>recover</snippet></ROW><ROW><id>13046348</id><snippet>from lxml import etree
parser = etree.XMLParser(recover=True)
etree.fromstring(xmlstring, parser=parser)
</snippet></ROW><ROW><id>13046387</id><snippet>query = "SELECT table1, table2, table3 FROM `db`-tables;"
self.clickcursor.execute(query)
results = self.clickcursor.fetchall()
for item in results:
  print(item)     #this is the strange line that I need!
  self.data.append(item)
self.clickcnx.close()
</snippet></ROW><ROW><id>13046410</id><snippet>class index:
    form = web.form.Form(form.Dropdown(name='option',args=[]))

    def GET(self):
            dbresult = db.select('test')
            options = db.select('test',what='name',group='name')
            form = self.form()
            form.option.args = [(o.name, o.name) for o in options]
            return render.index(dbresult,form)
</snippet></ROW><ROW><id>13046410</id><snippet>(o.name, o.name)</snippet></ROW><ROW><id>13046410</id><snippet>[o.name for o in options]</snippet></ROW><ROW><id>13046897</id><snippet>file</snippet></ROW><ROW><id>13046897</id><snippet>"r"</snippet></ROW><ROW><id>13046897</id><snippet>import csv

with open(r"C:\Users\me\Desktop\file-2.csv") as f:
     reader = csv.reader(f, delimiter=',', quotechar='"')
     for row in reader:
        if row:
            some=row[1]
</snippet></ROW><ROW><id>13047414</id><snippet>max()</snippet></ROW><ROW><id>13047414</id><snippet>str.split()</snippet></ROW><ROW><id>13047414</id><snippet>&gt;&gt;&gt; strs= "abbbd cdda cbaa"
&gt;&gt;&gt; max(strs.split(),key=lambda x:x.count("b"))
'abbbd'
</snippet></ROW><ROW><id>13047419</id><snippet>dataValues</snippet></ROW><ROW><id>13047419</id><snippet>ImportDialog</snippet></ROW><ROW><id>13047419</id><snippet>confirmOK</snippet></ROW><ROW><id>13047921</id><snippet>worker</snippet></ROW><ROW><id>13047921</id><snippet>self.worker</snippet></ROW><ROW><id>13047921</id><snippet>worker</snippet></ROW><ROW><id>13047921</id><snippet>syncThread.start()</snippet></ROW><ROW><id>13048031</id><snippet>item = LISTBOX.insert(END, line)
LISTBOX.itemconfigure(item, background="blue")
</snippet></ROW><ROW><id>13048047</id><snippet>timeit</snippet></ROW><ROW><id>13048047</id><snippet>from copy import *

a=range(1000)

def cop():
    b=copy(a)

def func1():
    b=list(a)

def slice():
    b=a[:]

def slice_len():
    b=a[0:len(a)]



if __name__=="__main__":
    import timeit
    print "copy(a)",timeit.timeit("cop()", setup="from __main__ import cop")
    print "list(a)",timeit.timeit("func1()", setup="from __main__ import func1")
    print "a[:]",timeit.timeit("slice()", setup="from __main__ import slice")
    print "a[0:len(a)]",timeit.timeit("slice_len()", setup="from __main__ import slice_len")
</snippet></ROW><ROW><id>13048047</id><snippet>copy(a) 3.98940896988
list(a) 2.54542589188
a[:] 1.96630120277                   #winner
a[0:len(a)] 10.5431251526
</snippet></ROW><ROW><id>13048047</id><snippet>a[0:len(a)]</snippet></ROW><ROW><id>13048047</id><snippet>In [19]: dis.dis(func1)
  2           0 LOAD_GLOBAL              0 (range)
              3 LOAD_CONST               1 (100000)
              6 CALL_FUNCTION            1
              9 STORE_FAST               0 (a)

  3          12 LOAD_FAST                0 (a)
             15 SLICE+0             
             16 STORE_FAST               1 (b)
             19 LOAD_CONST               0 (None)
             22 RETURN_VALUE        

In [20]: dis.dis(func2)
  2           0 LOAD_GLOBAL              0 (range)
              3 LOAD_CONST               1 (100000)
              6 CALL_FUNCTION            1
              9 STORE_FAST               0 (a)

  3          12 LOAD_FAST                0 (a)    #same up to here
             15 LOAD_CONST               2 (0)    #loads 0
             18 LOAD_GLOBAL              1 (len) # loads the builtin len(),
                                                 # so it might take some lookup time
             21 LOAD_FAST                0 (a)
             24 CALL_FUNCTION            1         
             27 SLICE+3             
             28 STORE_FAST               1 (b)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE        
</snippet></ROW><ROW><id>13048354</id><snippet>trailing</snippet></ROW><ROW><id>13048354</id><snippet>print 'You chose the number: ',
P(x)
</snippet></ROW><ROW><id>13048601</id><snippet>self.fileListSorted</snippet></ROW><ROW><id>13048601</id><snippet>fileListSorted</snippet></ROW><ROW><id>13048601</id><snippet>self.fileListSorted</snippet></ROW><ROW><id>13048601</id><snippet>global fileListSorted
</snippet></ROW><ROW><id>13048601</id><snippet>moveFile</snippet></ROW><ROW><id>13048601</id><snippet>fileListSorted</snippet></ROW><ROW><id>13048601</id><snippet>ListBox</snippet></ROW><ROW><id>13048601</id><snippet>insert</snippet></ROW><ROW><id>13048601</id><snippet>moveFiles</snippet></ROW><ROW><id>13048817</id><snippet>name</snippet></ROW><ROW><id>13048817</id><snippet>for</snippet></ROW><ROW><id>13048817</id><snippet>print(k, name)</snippet></ROW><ROW><id>13048980</id><snippet>top</snippet></ROW><ROW><id>13048980</id><snippet>id thatusername</snippet></ROW><ROW><id>13049047</id><snippet>&gt;&gt;&gt; p = "\((?:\S*,\s+)?(\S*)\)"
&gt;&gt;&gt; s = "The cert pegol (Cmzia, CZP) some words (6-mp) and (5-ASA)"
&gt;&gt;&gt; re.findall(p,s)
['CZP', '6-mp', '5-ASA']
</snippet></ROW><ROW><id>13049047</id><snippet>&gt;&gt;&gt; p = "\((?:\S*,\s+)?(\S*[A-Z-0-9]\S*)\)"
</snippet></ROW><ROW><id>13049325</id><snippet>from rpy2.robjects.vectors import IntVector
r.lines(x, IntVector(y) - 500, col = "green")
</snippet></ROW><ROW><id>13049389</id><snippet>lambda</snippet></ROW><ROW><id>13049389</id><snippet>functools.partial</snippet></ROW><ROW><id>13049389</id><snippet>import threading
def func1(a,b):
    def func2():
        def func4():
            return func3(a,b)
        return threading.Thread(target=func4)
    return func2

func2=func1(a,b)
func2()
</snippet></ROW><ROW><id>13049670</id><snippet>%25s</snippet></ROW><ROW><id>13049868</id><snippet>findall</snippet></ROW><ROW><id>13049868</id><snippet>&gt;&gt;&gt; regex = re.compile(r"Date of death.*?([0-9][0-9]? [A-z]+ [0-9]{4})", re.DOTALL)
&gt;&gt;&gt; print regex.findall(stri)
['27 January 1756']
</snippet></ROW><ROW><id>13049870</id><snippet>import numpy as np


a = np.array([[[1,2,3],4],[[4,5,6],5]])
b = a[:,0]

c = np.vstack(b)
print c.shape # (2,3)
</snippet></ROW><ROW><id>13049870</id><snippet>a</snippet></ROW><ROW><id>13049870</id><snippet>   b = np.array([ line for line in a[:,0]])
   print b.shape #(2,3)
</snippet></ROW><ROW><id>13049979</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>13049979</id><snippet>retcode = call(...)</snippet></ROW><ROW><id>13050181</id><snippet>In [67]: strs="PRODUCTNAME600COUPON50"

In [68]: re.findall(r'\d+',strs)
Out[68]: ['600', '50']
</snippet></ROW><ROW><id>13050181</id><snippet>In [69]: map(int,re.findall(r'\d+',strs))
Out[69]: [600, 50]
</snippet></ROW><ROW><id>13050450</id><snippet>matrix</snippet></ROW><ROW><id>13050450</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>13050450</id><snippet>matrix.sum(axis=1)</snippet></ROW><ROW><id>13050450</id><snippet>&gt;&gt;&gt; matrix = np.asarray([[ 47,  43,  51,  81,  54,  81,  52,  54,  31,  46],
  [ 35,  21,  30,  16,  37,  11,  35,  30,  39,  37],
  [  8,  17,  11,   2,   5,   4,  11,   9,  17,  10],
  [  5,   9,   4,   0,   1,   1,   0,   3,   9,   3],
  [  2,   7,   2,   0,   0,   0,   0,   1,   2,   1],
  [215, 149, 299, 199, 159, 325, 179, 249, 249, 199],
  [ 27,  49,  24,   4,  21,   8,  35,  15,  45,  25],
  [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]])

&gt;&gt;&gt; print matrix.sum(axis=1)
[ 540  291   94   35   15 2222  253 1000]
</snippet></ROW><ROW><id>13050450</id><snippet>&gt;&gt;&gt; row_sums = matrix.sum(axis=1)
&gt;&gt;&gt; rows_0_through_4_sums = row_sums[:5]
&gt;&gt;&gt; print rows_0_through_4_sums
[540 291  94  35  15]
</snippet></ROW><ROW><id>13050450</id><snippet>&gt;&gt;&gt; rows_0_through_4 = matrix[:5,:]
&gt;&gt;&gt; print rows_0_through_4.sum(axis=1)
[540 291  94  35  15]
</snippet></ROW><ROW><id>13051157</id><snippet>if any(t&lt;0 for t in x): #if any of the solutions in x are negative
    p=np.where(x==min(x)) # find the most negative solution, p is the position
    #now store the A coefficiants of the extinct species in the Afreeze list
    Afreeze.append(A[p])
</snippet></ROW><ROW><id>13051157</id><snippet>Afreeze</snippet></ROW><ROW><id>13051157</id><snippet>Afreeze</snippet></ROW><ROW><id>13051157</id><snippet>Sav</snippet></ROW><ROW><id>13051157</id><snippet>Svar</snippet></ROW><ROW><id>13051157</id><snippet>plt.plot()</snippet></ROW><ROW><id>13051157</id><snippet>if any(t&lt;0 for t in x): 
    p=np.where(x==min(x))
    Afreeze.append(A[p][0])
</snippet></ROW><ROW><id>13051157</id><snippet>print</snippet></ROW><ROW><id>13051157</id><snippet>Afreeze</snippet></ROW><ROW><id>13051157</id><snippet>random.random()</snippet></ROW><ROW><id>13051283</id><snippet>In [34]: import numpy as np

In [35]: a = np.array([1,4,1,np.nan,2,np.nan])

In [36]: a*0 + np.nan_to_num(a).cumsum()
Out[36]: array([  1.,   5.,   6.,  nan,   8.,  nan])
</snippet></ROW><ROW><id>13051336</id><snippet>r==g==b</snippet></ROW><ROW><id>13051336</id><snippet>from PIL import Image

im = Image.open("g.bmp")       # The input image. Should be greyscale
out = open("out.txt", "wb")    # The output.

data = im.getdata()            # This will create a generator that yields
                               # the value of the rbg values consecutively. If
                               # g.bmp is a 2x2 image of four rgb(12, 12, 12) pixels, 
                               # list(data) should be 
                               # [(12,12,12), (12,12,12), (12,12,12), (12,12,12)]

for i in data:                   # Here we iterate through the pixels.
    if i[0] &lt; 10:                # If r==b==g, we only really 
                                 # need one pixel (i[0] or "r")

        out.write(str(i[0])+" ") # if the pixel is valid, we'll write the value. So for
                                 # rgb(4, 4, 4), we'll output the string "4"
    else:
        out.write("X ")          # Otherwise, it does not meet the requirements, so
                                 # we'll output "X"
</snippet></ROW><ROW><id>13051336</id><snippet>r==g==b</snippet></ROW><ROW><id>13051336</id><snippet>if sum(i) &lt;= 30: # Equivalent to sum(i)/float(len(i)) &lt;= 10 if we know the length is 3
</snippet></ROW><ROW><id>13051336</id><snippet>im.getdata()</snippet></ROW><ROW><id>13051336</id><snippet>rgb(15, 15, 15)</snippet></ROW><ROW><id>13051336</id><snippet>list(data)</snippet></ROW><ROW><id>13051336</id><snippet>[4, 4, 4, 4]</snippet></ROW><ROW><id>13051336</id><snippet>[(4, 4, 4), (4, 4, 4), (4, 4, 4), (4, 4, 4)]</snippet></ROW><ROW><id>13051336</id><snippet>i</snippet></ROW><ROW><id>13051336</id><snippet>i[0]</snippet></ROW><ROW><id>13051720</id><snippet>from Crypto.Cipher import AES
import base64
import os
# the block size for the cipher object; must be 16, 24, or 32 for AES
BLOCK_SIZE = 32
BLOCK_SZ = 14

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
secret = "332SECRETabc1234"
iv = "HELLOWORLD123456"
cipher=AES.new(key=secret,mode=AES.MODE_CBC,IV=iv)
my_text_to_encode = "password"
encoded = EncodeAES(cipher, my_text_to_encode)
print 'Encrypted string:', encoded
</snippet></ROW><ROW><id>13051720</id><snippet>&lt;?php
$enc = "x3OZjCAL944N/awRHSrmRBy9P4VLTptbkFdEl2Ao8gk=";
$secret = "332SECRETabc1234"; // same secret as python
$iv="HELLOWORLD123456";  // same iv as python
$padding = "{";  //same padding as python
function decrypt_data($data, $iv, $key) {
    $cypher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');

    if(is_null($iv)) {
        $ivlen = mcrypt_enc_get_iv_size($cypher);
        $iv = substr($data, 0, $ivlen);
        $data = substr($data, $ivlen);
    }

    // initialize encryption handle
    if (mcrypt_generic_init($cypher, $key, $iv) != -1) {
            // decrypt
            $decrypted = mdecrypt_generic($cypher, $data);

            // clean up
            mcrypt_generic_deinit($cypher);
            mcrypt_module_close($cypher);

            return $decrypted;
    }

    return false;
}



$res = decrypt_data(base64_decode($enc), $iv, $secret);
print rtrim($res,$padding);
?&gt;
</snippet></ROW><ROW><id>13051822</id><snippet>allfiles = [join(root,f) for root,dirs,files in walk(root) for f in files]
</snippet></ROW><ROW><id>13051822</id><snippet>for</snippet></ROW><ROW><id>13051822</id><snippet>for</snippet></ROW><ROW><id>13051822</id><snippet>if</snippet></ROW><ROW><id>13051822</id><snippet>for</snippet></ROW><ROW><id>13051822</id><snippet>if</snippet></ROW><ROW><id>13051822</id><snippet>allfiles = []
for root, dirs, files in walk(root):
    for f in files:
        allfiles.append(f)
</snippet></ROW><ROW><id>13051972</id><snippet>gen.Task</snippet></ROW><ROW><id>13051972</id><snippet>gen.Task</snippet></ROW><ROW><id>13051972</id><snippet>callback()</snippet></ROW><ROW><id>13051972</id><snippet>import os
import threading
import tornado.options
import tornado.ioloop
import tornado.httpserver
import tornado.httpclient
import tornado.web
from tornado import gen
from tornado.web import asynchronous

tornado.options.define('port', type=int, default=9000, help='server port number (default: 9000)')
tornado.options.define('debug', type=bool, default=False, help='run in debug mode with autoreload (default: False)')

class Worker(threading.Thread):
   def __init__(self, callback=None, *args, **kwargs):
        super(Worker, self).__init__(*args, **kwargs)
        self.callback = callback

   def run(self):
        import time
        time.sleep(10)
        self.callback('DONE')

class Application(tornado.web.Application):
    def __init__(self):
        handlers = [
            (r"/", IndexHandler),
            (r"/thread", ThreadHandler),
        ]
        settings = dict(
            static_path = os.path.join(os.path.dirname(__file__), "static"),
            template_path = os.path.join(os.path.dirname(__file__), "templates"),
            debug = tornado.options.options.debug,
        )
        tornado.web.Application.__init__(self, handlers, **settings)

class IndexHandler(tornado.web.RequestHandler):
    client = tornado.httpclient.AsyncHTTPClient()

    @asynchronous
    @gen.engine
    def get(self):
        response = yield gen.Task(self.client.fetch, "http://google.com")

        self.finish("Google's homepage is %d bytes long" % len(response.body))

class ThreadHandler(tornado.web.RequestHandler):
    @asynchronous
    def get(self):
        Worker(self.worker_done).start()

    def worker_done(self, value):
        self.finish(value)

def main():
    tornado.options.parse_command_line()
    http_server = tornado.httpserver.HTTPServer(Application())
    http_server.listen(tornado.options.options.port)
    tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13052373</id><snippet>def f(group):
    row = group.irow(0)
    return DataFrame({'class': [row['class']] * row['count']})
df.groupby('class', group_keys=False).apply(f)
</snippet></ROW><ROW><id>13052373</id><snippet>In [25]: df.groupby('class', group_keys=False).apply(f)
Out[25]: 
  class
0     A
0     C
1     C
</snippet></ROW><ROW><id>13052493</id><snippet>servicers.conf</snippet></ROW><ROW><id>13052493</id><snippet>fname = file_name.strip()
if fname:
    sourcefile = os.path.join(...)
    ...
</snippet></ROW><ROW><id>13052532</id><snippet># Before main loop
human_files = ["human1.png", "human2.png"]
human_sprites = [pygame.image.load(filename).convert_alpha() for filename in human_files]
human1_index = 0

...

# During main loop
if (human1_position.left &lt;= 555):
    human1_position = human1_position.move(2, 0)  # move first human
    human1_index = (human_index + 1) % len(human_sprites) # change sprite
else:
    move = STOP
    human1_index = 0
human1 = human_sprites[human1_index]
screen.blit(human1, human1_position)
pygame.display.update()
</snippet></ROW><ROW><id>13052555</id><snippet>dict</snippet></ROW><ROW><id>13052555</id><snippet>by_color = {}
for obj in color_values:
    by_color.setdefault(obj['color'], []).append(obj['score'])
color_values = [{'score': float(sum(value)) / len(value), 'color': key}
                for key, value in by_color.items()]
</snippet></ROW><ROW><id>13052764</id><snippet>for-else</snippet></ROW><ROW><id>13052764</id><snippet>for i in a</snippet></ROW><ROW><id>13052764</id><snippet>range(len(a))</snippet></ROW><ROW><id>13052764</id><snippet>a = [['jimmy', '25', 'pancakes'], ['tom', '23', 'brownies'], ['harry', '21', 'cookies']]
for i in a:
    if (i[1] == '25' or i[1] == '26'):
        print 'yes'
else:
    print 'Not found'
</snippet></ROW><ROW><id>13052764</id><snippet>yes
Not found
</snippet></ROW><ROW><id>13052764</id><snippet>any()</snippet></ROW><ROW><id>13052764</id><snippet>In [200]: if any((i[1]=='25' or i[1]=='26') for i in a):
    print 'yes'
else:    
    print 'not Found'
   .....: 


yes

In [204]: if any((i[1]=='20' or i[1]=='26') for i in a):
    print 'yes'
else:    
    print 'not Found'
   .....: 


not Found
</snippet></ROW><ROW><id>13052799</id><snippet>a=design_list.values_list('date_submitted', flat=True)
</snippet></ROW><ROW><id>13052799</id><snippet>[datetime.datetime(2012, 10, 21, 13, 56, 24), datetime.datetime(2012, 10, 21, 10, 33, 58), 
</snippet></ROW><ROW><id>13052964</id><snippet>import os

os.chmod(path, mode)
csvFile = open('&lt;fullpath&gt;/results.csv','wt')
csvFile.write(someResults)
csvFile.close()
</snippet></ROW><ROW><id>13052964</id><snippet>mode</snippet></ROW><ROW><id>13052964</id><snippet>0777</snippet></ROW><ROW><id>13052964</id><snippet>777</snippet></ROW><ROW><id>13052999</id><snippet>   If salt is a character string starting with the characters "$id$" followed by
   a string terminated by "$":

          $id$salt$encrypted

   then instead of using the DES machine, id identifies the encryption method
   used and this then determines how the rest of the password string is
   interpreted.  The following values of id are supported:

          ID  | Method
          ---------------------------------------------------------
          1   | MD5
          2a  | Blowfish (not in mainline glibc; added in some
              | Linux distributions)
          5   | SHA-256 (since glibc 2.7)
          6   | SHA-512 (since glibc 2.7)
</snippet></ROW><ROW><id>13052999</id><snippet>$1$VFvON1xK$SboCDZGBieKF1ns2GBfY50' ('test', encrypted with salt=VFvON1xK)


1                       == MD5
VFvON1xK                == Salt
SboCDZGBieKF1ns2GBfY50  == Hashed password
</snippet></ROW><ROW><id>13052999</id><snippet>from passlib.hash import md5_crypt
hash = md5_crypt.encrypt("test",salt="VFvON1xK")
print hash
</snippet></ROW><ROW><id>13052999</id><snippet>$1$VFvON1xK$SboCDZGBieKF1ns2GBfY50
</snippet></ROW><ROW><id>13053014</id><snippet>if len(sys.argv) == 1:
   raise EmptyArgs('Specify at least 1 argument')
</snippet></ROW><ROW><id>13053014</id><snippet>if len(sys.argv) == 1:
   raise EmptyArgs, ('Specify at least 1 argument',)
</snippet></ROW><ROW><id>13053014</id><snippet>if len(sys.argv) == 1:
   raise EmptyArgs, 'Specify at least 1 argument'
</snippet></ROW><ROW><id>13053014</id><snippet>raise</snippet></ROW><ROW><id>13053014</id><snippet>if len(sys.argv) == 1:
   raise EmptyArgs, ('Specify at least 1 argument',), traceback_object
</snippet></ROW><ROW><id>13053014</id><snippet>raise</snippet></ROW><ROW><id>13053014</id><snippet>raise ValueError('message')</snippet></ROW><ROW><id>13053014</id><snippet>raise ValueError, 'message'</snippet></ROW><ROW><id>13053314</id><snippet>seek</snippet></ROW><ROW><id>13053381</id><snippet>import numpy as np
ax0.yaxis.set_ticks(np.arange(70000,80000,2500))
</snippet></ROW><ROW><id>13053545</id><snippet>from PIL import Image, ImageDraw
im = Image.new('RGBA', (400, 400), (0, 255, 0, 0)) 
draw = ImageDraw.Draw(im) 
draw.line((100,200, 150,300), fill=128)
im.show()
</snippet></ROW><ROW><id>13053545</id><snippet>ImageDraw</snippet></ROW><ROW><id>13053545</id><snippet>draw.polygon((10, 10, 200, 200,195, 205, 5, 15), fill=(255,255,255))
</snippet></ROW><ROW><id>13053545</id><snippet>draw.line((100,200, 150, 300), fill=128, width=3)
</snippet></ROW><ROW><id>13053610</id><snippet>arr = np.zeros((n,n))
for i,(t,e,b) in enumerate(g):
    arr[i,np.array(t) - 1] = e
</snippet></ROW><ROW><id>13053610</id><snippet>g</snippet></ROW><ROW><id>13053610</id><snippet>(ti, ei, bi)</snippet></ROW><ROW><id>13053999</id><snippet>listobject.c</snippet></ROW><ROW><id>13053999</id><snippet>list_methods()</snippet></ROW><ROW><id>13053999</id><snippet>PyList_Type</snippet></ROW><ROW><id>13053999</id><snippet>__getitem__</snippet></ROW><ROW><id>13053999</id><snippet>__setitem__</snippet></ROW><ROW><id>13053999</id><snippet>PyList_Type</snippet></ROW><ROW><id>13053999</id><snippet>list_as_sequence</snippet></ROW><ROW><id>13053999</id><snippet>tp_as_sequence</snippet></ROW><ROW><id>13053999</id><snippet>PyList_Type</snippet></ROW><ROW><id>13053999</id><snippet>list_item</snippet></ROW><ROW><id>13053999</id><snippet>__getitem__</snippet></ROW><ROW><id>13053999</id><snippet>__setitem__</snippet></ROW><ROW><id>13053999</id><snippet>list_ass_item</snippet></ROW><ROW><id>13053999</id><snippet>list_as_mapping</snippet></ROW><ROW><id>13053999</id><snippet>list_subscript</snippet></ROW><ROW><id>13053999</id><snippet>list_ass_subscript</snippet></ROW><ROW><id>13054109</id><snippet>iter()</snippet></ROW><ROW><id>13054109</id><snippet>for</snippet></ROW><ROW><id>13054229</id><snippet>conditions = {
      key1: value1,
      key2: value2,
    }
</snippet></ROW><ROW><id>13054229</id><snippet>my_value = conditions[my_key]
</snippet></ROW><ROW><id>13054381</id><snippet>argparse</snippet></ROW><ROW><id>13054381</id><snippet>sys.argv</snippet></ROW><ROW><id>13054381</id><snippet>optparse</snippet></ROW><ROW><id>13054570</id><snippet>__new__</snippet></ROW><ROW><id>13054570</id><snippet>&gt;&gt;&gt; class Page(object):
...     cache = []
...     """ Return cached object """
...     @classmethod
...     def __getCache(cls, title):
...         for o in Page.cache:
...             if o.__searchTerm == title or o.title == title:
...                 return o
...         return None
...     """ Initilize the class and start processing """
...     def __new__(cls, title, api=None):
...         o = cls.__getCache(title)
...         if o:
...             return o
...         page = super(Page, cls).__new__(cls)
...         cls.cache.append(page)
...         page.title = title
...         page.api = api
...         page.__searchTerm = title
...         # ...etc
...         return page
... 
&gt;&gt;&gt; a = Page('test')
&gt;&gt;&gt; b = Page('test')
&gt;&gt;&gt; 
&gt;&gt;&gt; print a.title # works
test
&gt;&gt;&gt; print b.title
test
&gt;&gt;&gt; 
&gt;&gt;&gt; assert a is b
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13054570</id><snippet>__init__</snippet></ROW><ROW><id>13054570</id><snippet>&gt;&gt;&gt; class Page(object):
...     cache = []
...     @classmethod
...     def __getCache(cls, title):
...         """ Return cached object """
...         for o in Page.cache:
...             if o.__searchTerm == title or o.title == title:
...                 return o
...         return None
...     def __new__(cls, title, *args, **kwargs):
...         """ Initilize the class and start processing """
...         existing = cls.__getCache(title)
...         if existing:
...             return existing
...         page = super(Page, cls).__new__(cls)
...         return page
...     def __init__(self, title, api=None):
...         if self in self.cache:
...             return
...         self.cache.append(self)
...         self.title = title
...         self.api = api
...         self.__searchTerm = title
...         # ...etc
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; a = Page('test')
&gt;&gt;&gt; b = Page('test')
&gt;&gt;&gt; 
&gt;&gt;&gt; print a.title # works
test
&gt;&gt;&gt; print b.title
test
&gt;&gt;&gt; assert a is b
&gt;&gt;&gt; assert a.cache is Page.cache
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13054583</id><snippet>expected = re.compile(r'session \d+: running task(s)')
str = "session 1234567890: running(s)"
re.match(expected, str)
</snippet></ROW><ROW><id>13054583</id><snippet>'('</snippet></ROW><ROW><id>13054583</id><snippet>')'</snippet></ROW><ROW><id>13054583</id><snippet>expected = re.compile(r'session \d+: running task\(s\)')
str= "session 1234567890: running(s)"
re.match(expected, str)
</snippet></ROW><ROW><id>13054748</id><snippet>def make_scrapy_command_class(base_class):
    class ScrapyCommand(base_class):
        # your methods here
        pass

    return ScrapyCommand

ScrapyCommand = make_command_class(someotherapp.crawl.OtherCommand)
</snippet></ROW><ROW><id>13055021</id><snippet>.__doc__</snippet></ROW><ROW><id>13055021</id><snippet>In [14]: import itertools

In [15]: print itertools.__doc__
Functional tools for creating and using iterators..........

In [18]: print itertools.permutations.__doc__
permutations(iterable[, r]) --&gt; permutations object

Return successive r-length permutations of elements in the iterable.

permutations(range(3), 2) --&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
</snippet></ROW><ROW><id>13055021</id><snippet>help()</snippet></ROW><ROW><id>13055021</id><snippet>__doc__</snippet></ROW><ROW><id>13055021</id><snippet>def myfunc():
    """
    this is some info on myfunc

    """
    foo=2
    bar=3


In [4]: help(so27.myfunc)


In [5]: import foo

In [6]: print foo.myfunc.__doc__

     this is some info on func

In [7]: help(foo.myfunc)


Help on function myfunc in module foo:

myfunc()
    this is some info on func
</snippet></ROW><ROW><id>13055334</id><snippet>--no-site-packages</snippet></ROW><ROW><id>13055334</id><snippet>$ virtualenv $PATH_TO_VIRTUALENV
</snippet></ROW><ROW><id>13055334</id><snippet>--system-site-packages</snippet></ROW><ROW><id>13055334</id><snippet>$ virtualenv --no-site-packages $PATH_TO_VIRTUALENV
</snippet></ROW><ROW><id>13055334</id><snippet>$PATH_TO_VIRTUALENV</snippet></ROW><ROW><id>13055362</id><snippet>named_param</snippet></ROW><ROW><id>13055362</id><snippet>None</snippet></ROW><ROW><id>13055412</id><snippet>from pyvirtualdisplay import Display
from selenium import webdriver

display = Display(visible=0, size=(1024, 768))
display.start()

driver= webdriver.Firefox()
actions = webdriver.ActionChains(driver)
driver.get("http://www.somewebsite.com/")

&lt;---some code---&gt;

driver.close()
display.stop()
</snippet></ROW><ROW><id>13055444</id><snippet>import urllib2, sys
from BeautifulSoup import BeautifulSoup

site= "http://en.wikipedia.org/wiki/StackOverflow"
hdr = {'User-Agent': 'Mozilla/5.0'}
req = urllib2.Request(site,headers=hdr)
page = urllib2.urlopen(req)
soup = BeautifulSoup(page)
print soup
</snippet></ROW><ROW><id>13055520</id><snippet>import tarfile

tar = tarfile.open("exampleTar.tgz","r")

print(tar.getnames())
</snippet></ROW><ROW><id>13055593</id><snippet>self.fileList</snippet></ROW><ROW><id>13055593</id><snippet>fileListSorted</snippet></ROW><ROW><id>13055593</id><snippet>directoryContents</snippet></ROW><ROW><id>13055593</id><snippet>global fileList
fileList = Listbox(yscrollcommand = scrollbar.set)
...
</snippet></ROW><ROW><id>13055593</id><snippet>fileList</snippet></ROW><ROW><id>13055593</id><snippet>self.fileList</snippet></ROW><ROW><id>13055593</id><snippet>global fileList</snippet></ROW><ROW><id>13055593</id><snippet>fileList</snippet></ROW><ROW><id>13055593</id><snippet>insertName = self.fileList[insertValue]
</snippet></ROW><ROW><id>13055593</id><snippet>insertName = self.fileList.get(insertValue)
</snippet></ROW><ROW><id>13055593</id><snippet>fileList</snippet></ROW><ROW><id>13055593</id><snippet>self.fileList['background']</snippet></ROW><ROW><id>13055593</id><snippet>get(0,END)</snippet></ROW><ROW><id>13055684</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; f = lambda x : x * np.cos(x-4)
</snippet></ROW><ROW><id>13055684</id><snippet>fsolve</snippet></ROW><ROW><id>13055684</id><snippet>&gt;&gt;&gt; x = np.array([0.0, -0.75])
&gt;&gt;&gt; fsolve(f,x)
array([ 0.        , -0.71238898])
</snippet></ROW><ROW><id>13055815</id><snippet>bind</snippet></ROW><ROW><id>13055815</id><snippet>command</snippet></ROW><ROW><id>13055815</id><snippet>callback()</snippet></ROW><ROW><id>13055815</id><snippet>grid_forget()</snippet></ROW><ROW><id>13055815</id><snippet>def callback_and_hide(button):
    callback()
    button.grid_forget()

Button2 = Button(master,text='click me',command=lambda: callback_and_hide(Button2))
</snippet></ROW><ROW><id>13056021</id><snippet>os.listdir()</snippet></ROW><ROW><id>13056021</id><snippet>.txt</snippet></ROW><ROW><id>13056021</id><snippet>for filename in os.listdir("."):
    with open(filename) as csv_file:
        for row in csv.reader(csv_file):
            d['Order %s' % row[1]] = {'tag': row[1], 'prodcode': row[2], 'qty': row[3]}
</snippet></ROW><ROW><id>13056021</id><snippet>with</snippet></ROW><ROW><id>13056021</id><snippet>with</snippet></ROW><ROW><id>13056060</id><snippet>int</snippet></ROW><ROW><id>13056060</id><snippet>100</snippet></ROW><ROW><id>13056060</id><snippet>#!/usr/bin/env python
from functools import reduce

def gcd(a, b):
    """Greatest common divisor (factor)."""
    while b: # Euclid's algorithm
        a, b = b, a % b
    return a

def lcm(*args):
    """Least common multiple."""
    # lcm(a, b, c) == lcm(lcm(a, b), c)
    return reduce(lambda a, b: a * b // gcd(a, b), args)

def f(n):
    """Smallest positive number evenly divisible by all numbers from 1
       to n including.
    """
    return lcm(*range(1, n + 1))

print(f(10)) # -&gt; 2520
print(f(50)) # -&gt; 3099044504245996706400
</snippet></ROW><ROW><id>13056060</id><snippet>#!/usr/bin/env python
import timeit
from functools import partial

def measure():
    for n in [10, 50, 100]:
        print("%d: %5.2f microseconds" % (n, timeit.timeit(partial(f, n),
                                                           number=1000*1000)))
measure()
</snippet></ROW><ROW><id>13056137</id><snippet>def parse(x):
    operators = set('+-*/')
    op_out = []    #This holds the operators that are found in the string (left to right)
    num_out = []   #this holds the non-operators that are found in the string (left to right)
    buff = []
    for c in x:  #examine 1 character at a time
        if c in operators:  
            #found an operator.  Everything we've accumulated in `buff` is 
            #a single "number". Join it together and put it in `num_out`.
            num_out.append(''.join(buff))
            buff = []
            op_out.append(c)
        else:
            #not an operator.  Just accumulate this character in buff.
            buff.append(c)
    num_out.append(''.join(buff))
    return num_out,op_out

print parse('3/2*15')
</snippet></ROW><ROW><id>13056137</id><snippet>import operator
def my_eval(nums,ops):

    nums = list(nums)
    ops = list(ops)
    operator_order = ('*/','+-')  #precedence from left to right.  operators at same index have same precendece.
                                  #map operators to functions.
    op_dict = {'*':operator.mul,
               '/':operator.div,
               '+':operator.add,
               '-':operator.sub}
    Value = None
    for op in operator_order:                   #Loop over precedence levels
        while any(o in ops for o in op):        #Operator with this precedence level exists
            idx,oo = next((i,o) for i,o in enumerate(ops) if o in op) #Next operator with this precedence         
            ops.pop(idx)                        #remove this operator from the operator list
            values = map(float,nums[idx:idx+2]) #here I just assume float for everything
            value = op_dict[oo](*values)
            nums[idx:idx+2] = [value]           #clear out those indices

    return nums[0]

print my_eval(*parse('3/2*15'))
</snippet></ROW><ROW><id>13056292</id><snippet>set</snippet></ROW><ROW><id>13056292</id><snippet>s</snippet></ROW><ROW><id>13056292</id><snippet>t</snippet></ROW><ROW><id>13056292</id><snippet>r = s.symmetric_difference(t)</snippet></ROW><ROW><id>13056292</id><snippet>r</snippet></ROW><ROW><id>13057009</id><snippet>t1</snippet></ROW><ROW><id>13057009</id><snippet>&gt;&gt;&gt; print str(q1)
SELECT t3.id AS t3_id 
FROM tbl AS t3, tbl AS t1 
WHERE t3.id &lt; t1.id ORDER BY t3.id DESC
 LIMIT ? OFFSET ?
&gt;&gt;&gt; print str(q1.correlate(t1))
SELECT t3.id AS t3_id 
FROM tbl AS t3 
WHERE t3.id &lt; t1.id ORDER BY t3.id DESC
 LIMIT ? OFFSET ?
</snippet></ROW><ROW><id>13057009</id><snippet>tbl AS t1</snippet></ROW><ROW><id>13057009</id><snippet>.correlate()</snippet></ROW><ROW><id>13057009</id><snippet>t1</snippet></ROW><ROW><id>13057009</id><snippet>&gt;&gt;&gt; q1 = session.query(t3.c.id).filter(t3.c.id &lt; t1.c.id).order_by(t3.c.id.desc()).\
...              limit(1).correlate(t1)
&gt;&gt;&gt; q2 = session.query(t2.c.id).filter(t2.c.id == q1, t1.c.id.in_([4, 8]))
&gt;&gt;&gt; q3 = session.query(table).filter(
...                                or_(table.c.id.in_(q2), table.c.id.in_([0, 8])))
&gt;&gt;&gt; print list(q3)
2012-10-24 22:16:22,239 INFO sqlalchemy.engine.base.Engine SELECT tbl.id AS tbl_id 
FROM tbl 
WHERE tbl.id IN (SELECT t2.id AS t2_id 
FROM tbl AS t2, tbl AS t1 
WHERE t2.id = (SELECT t3.id AS t3_id 
FROM tbl AS t3 
WHERE t3.id &lt; t1.id ORDER BY t3.id DESC
 LIMIT ? OFFSET ?) AND t1.id IN (?, ?)) OR tbl.id IN (?, ?)
2012-10-24 22:16:22,239 INFO sqlalchemy.engine.base.Engine (1, 0, 4, 8, 0, 8)
[(0,), (2,), (6,), (8,)]
</snippet></ROW><ROW><id>13057117</id><snippet>python --version</snippet></ROW><ROW><id>13057195</id><snippet>"</snippet></ROW><ROW><id>13057195</id><snippet>[^\"]+</snippet></ROW><ROW><id>13057195</id><snippet>\</snippet></ROW><ROW><id>13057195</id><snippet>https</snippet></ROW><ROW><id>13057195</id><snippet>page.findall(r'"(http[^"]+)"')
</snippet></ROW><ROW><id>13057256</id><snippet># Open the file
file = open('log_file.csv')
# readlines() will return the data as a list of strings, one for each line
log_data = file.readlines()
# close the log file
file.close()
</snippet></ROW><ROW><id>13057256</id><snippet>results = {}
</snippet></ROW><ROW><id>13057256</id><snippet>for entry in log_data:
    entry_data = entry.split(',')
    # We are going to have a separate entry for each source ip
    # If we haven't already seen this ip, we need to make an entry for it
    if entry_data[2] not in results:
        results[entry_data[2]] = {'total':0}
    # Now check to see if we've seen the protocol for this ip before
    # If we haven't, add a new entry set to 0
    if entry_data[4] not in results[entry_data[2]]:
         results[entry_data[2]][entry_data[4]] = 0
    # Now we increment the count for this protocol
    results[entry_data[2]][entry_data[4]] += 1
    # And we increment the total count
    results[entry_data[2]]['total'] += 1
</snippet></ROW><ROW><id>13057256</id><snippet>for ip in results:
    # Here we're printing a string with placeholders. the {0}, {1} and {2} will be filled
    # in by the call to format
    print "from: IP {0} Protocol Count: {1})".format(
        ip,
        # And finally create the value for the protocol counts with another format call
        # The square braces with the for statement inside create a list with one entry
        # for each entry, in this case, one entry for each protocol
        # We use ' '.join to join each of the counts with a string
        ' '.join(["({0}: {1})".format(protocol, results[ip][protocol] for protocol in results[ip])]))
</snippet></ROW><ROW><id>13057284</id><snippet>sys._getframe().f_code.co_names
</snippet></ROW><ROW><id>13057566</id><snippet>KMeans</snippet></ROW><ROW><id>13057566</id><snippet>fit_transform</snippet></ROW><ROW><id>13057566</id><snippet>transform</snippet></ROW><ROW><id>13057566</id><snippet>fit</snippet></ROW><ROW><id>13057566</id><snippet>fit_transform</snippet></ROW><ROW><id>13057566</id><snippet>transform</snippet></ROW><ROW><id>13057566</id><snippet>Pipeline</snippet></ROW><ROW><id>13057592</id><snippet>shape = (N,)</snippet></ROW><ROW><id>13057592</id><snippet>&gt;&gt;&gt; col_sig_1byN = np.zeros(shape=(1,6), dtype=int)
&gt;&gt;&gt; col_sig_N = np.zeros(shape=(6,), dtype=int)
&gt;&gt;&gt; print col_sig_1byN
[[0 0 0 0 0 0]]
&gt;&gt;&gt; print col_sig_N
[0 0 0 0 0 0]
</snippet></ROW><ROW><id>13057592</id><snippet>col_sig_N</snippet></ROW><ROW><id>13057592</id><snippet>col_sig_N[p]</snippet></ROW><ROW><id>13057592</id><snippet>col_sig_1byN</snippet></ROW><ROW><id>13057592</id><snippet>col_sig_1byN[0,p]</snippet></ROW><ROW><id>13057592</id><snippet>[x,y]</snippet></ROW><ROW><id>13057592</id><snippet>[x,:]</snippet></ROW><ROW><id>13057592</id><snippet>[:,y]</snippet></ROW><ROW><id>13057618</id><snippet>__init__.py</snippet></ROW><ROW><id>13057618</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13057618</id><snippet>ex47.game</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057618</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057618</id><snippet>ex47 
    bin/
    docs/
    ex47/
        __init__.py
        game.py
    tests/
        __init__.py
        game_tests.py
    setup.py
</snippet></ROW><ROW><id>13057618</id><snippet>nosetests tests
</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057618</id><snippet>__init__.py</snippet></ROW><ROW><id>13057618</id><snippet>ex47</snippet></ROW><ROW><id>13057807</id><snippet>@app.route("/savedimages/&lt;picture&gt;")
def display_picture(picture):
    return "The picture is: {}".format(picture)
</snippet></ROW><ROW><id>13057807</id><snippet>flask.send_file</snippet></ROW><ROW><id>13057807</id><snippet>file_name = werkzeug.security.safe_join("/path/to/savedimages", picture)
return send_file(file_name)
</snippet></ROW><ROW><id>13058179</id><snippet>lambda</snippet></ROW><ROW><id>13058179</id><snippet>lambda x: y</snippet></ROW><ROW><id>13058179</id><snippet>def my_function(x): return y</snippet></ROW><ROW><id>13058179</id><snippet>lambda</snippet></ROW><ROW><id>13058179</id><snippet>def foo(bar):
    return boz().addCallback(lambda result: qux(bar, result))
</snippet></ROW><ROW><id>13058179</id><snippet>lambda</snippet></ROW><ROW><id>13058179</id><snippet>def foo(bar):
    def callback_for_boz(result):
        return qux(bar, result)
    return boz().addCallback(callback_for_boz)
</snippet></ROW><ROW><id>13058179</id><snippet>reactor.run()</snippet></ROW><ROW><id>13058179</id><snippet>reactor.run()</snippet></ROW><ROW><id>13058179</id><snippet>connectTCP</snippet></ROW><ROW><id>13058179</id><snippet>listenTCP</snippet></ROW><ROW><id>13058386</id><snippet>{"type": "image"}</snippet></ROW><ROW><id>13058386</id><snippet>comments</snippet></ROW><ROW><id>13058386</id><snippet>p = db.people.find({"some": "condition", "comments.type": "image"})
</snippet></ROW><ROW><id>13058386</id><snippet>p = list(db.people.find({"some": "condition"})

# A little verbose, but...
image_p = [item for item in p
           if any(comment['type'] == 'image'
                  for comment in item['comments'])]

...
</snippet></ROW><ROW><id>13058423</id><snippet>def label(self, index, *args): 
    """ 
    Label each axes one at a time 
    args are of the form &lt;label 1&gt;,...,&lt;label n&gt; 
    APIPARAM: chxl 
    """ 
    self.data['labels'].append( 
        str( '%s:|%s' % \ 
            ( index, '|'.join( map( str,args ) ) ) 
        ).replace( 'None', '' ) 
    ) 
    return self.parent 
</snippet></ROW><ROW><id>13058423</id><snippet>self.data[ 'labels' ]</snippet></ROW><ROW><id>13058423</id><snippet>append()</snippet></ROW><ROW><id>13058423</id><snippet>xxx:|yyy</snippet></ROW><ROW><id>13058423</id><snippet>xxx</snippet></ROW><ROW><id>13058423</id><snippet>index</snippet></ROW><ROW><id>13058423</id><snippet>yyy</snippet></ROW><ROW><id>13058423</id><snippet>map(str,args)</snippet></ROW><ROW><id>13058423</id><snippet>|</snippet></ROW><ROW><id>13058423</id><snippet>join(...)</snippet></ROW><ROW><id>13058423</id><snippet>a|b|None|c</snippet></ROW><ROW><id>13058423</id><snippet>None</snippet></ROW><ROW><id>13058423</id><snippet>*args</snippet></ROW><ROW><id>13058423</id><snippet>args</snippet></ROW><ROW><id>13058423</id><snippet>*args</snippet></ROW><ROW><id>13058423</id><snippet>args</snippet></ROW><ROW><id>13058423</id><snippet>**kwargs</snippet></ROW><ROW><id>13058423</id><snippet>foo = bar</snippet></ROW><ROW><id>13058423</id><snippet>foo</snippet></ROW><ROW><id>13058423</id><snippet>bar</snippet></ROW><ROW><id>13058423</id><snippet>bar</snippet></ROW><ROW><id>13058423</id><snippet>args</snippet></ROW><ROW><id>13058423</id><snippet>kwargs</snippet></ROW><ROW><id>13058423</id><snippet>*potatoes</snippet></ROW><ROW><id>13058423</id><snippet>**potatoes</snippet></ROW><ROW><id>13058423</id><snippet>args</snippet></ROW><ROW><id>13058423</id><snippet>kwargs</snippet></ROW><ROW><id>13058423</id><snippet>**kw</snippet></ROW><ROW><id>13058423</id><snippet>**kwargs</snippet></ROW><ROW><id>13058423</id><snippet>def add_party_quests( *quests ):
    for guest in quests:
        do_some_processing( guest )
</snippet></ROW><ROW><id>13058423</id><snippet>add_party_guests( 'John' )
add_party_guests( 'Beth', 'Tim', 'Fred' )
</snippet></ROW><ROW><id>13058450</id><snippet>soup = BeautifulSoup(page)
anchors = soup.findAll('a')
for anchor in anchors:
  anchor.replaceWithChildren()
</snippet></ROW><ROW><id>13058461</id><snippet>class UserModel(ndb.Model):
  ...

user_model_entity = UserModel(id='some_string', ...)
</snippet></ROW><ROW><id>13058697</id><snippet>def getwebsafe(r,g,b):
  rw = 51 * ((int(r)+25)//51)
  gw = 51 * ((int(g)+25)//51)
  bw = 51 * ((int(b)+25)//51)
  return (rw,gw,bw)
</snippet></ROW><ROW><id>13058697</id><snippet>def getwebsafe(colour):
  return [51*((int(c)+25)//51) for c in colour]
</snippet></ROW><ROW><id>13058767</id><snippet>atexit.register(some_function)</snippet></ROW><ROW><id>13058767</id><snippet>@atexit.register</snippet></ROW><ROW><id>13058767</id><snippet>import atexit
@atexit.register
def save_cache():
    print 'save cache'
</snippet></ROW><ROW><id>13058767</id><snippet>import atexit
def save_cache():
    print 'save cache'
atexit.register(save_cache)
</snippet></ROW><ROW><id>13058802</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = 2
&gt;&gt;&gt; print b
1
</snippet></ROW><ROW><id>13058802</id><snippet>&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a[0] = 2
&gt;&gt;&gt; print b
[2]
</snippet></ROW><ROW><id>13058802</id><snippet>4 * [0]</snippet></ROW><ROW><id>13058802</id><snippet>[0]</snippet></ROW><ROW><id>13058802</id><snippet>&gt;&gt;&gt; a = 4 * [0]
&gt;&gt;&gt; a
[0, 0, 0, 0]
&gt;&gt;&gt; [id(v) for v in a]
[33302480, 33302480, 33302480, 33302480]
&gt;&gt;&gt; a[0] = 1
&gt;&gt;&gt; a
[1, 0, 0, 0]
</snippet></ROW><ROW><id>13058802</id><snippet>&gt;&gt;&gt; a[0][0] = 1
&gt;&gt;&gt; a
[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
</snippet></ROW><ROW><id>13058802</id><snippet>&gt;&gt;&gt; some_list = [(4 * [0]) for _ in range(4)]
</snippet></ROW><ROW><id>13058950</id><snippet>b</snippet></ROW><ROW><id>13058950</id><snippet>a</snippet></ROW><ROW><id>13058950</id><snippet>b</snippet></ROW><ROW><id>13058950</id><snippet>a</snippet></ROW><ROW><id>13058950</id><snippet>a</snippet></ROW><ROW><id>13058950</id><snippet>indices = random.sample(range(len(a)), k)   # k &lt; N
b = a[indices]
</snippet></ROW><ROW><id>13059037</id><snippet>sudo apt-get install python-imaging  python-dev libjpeg8 libjpeg8-dev libfreetype6 libfreetype6-dev
</snippet></ROW><ROW><id>13059037</id><snippet>pip uninstall PIL</snippet></ROW><ROW><id>13059037</id><snippet>pip install pillow</snippet></ROW><ROW><id>13059063</id><snippet>find_all(self, name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs) 

    Extracts a list of Tag objects that match the given
    criteria.  You can specify the name of the Tag and any
    attributes you want the Tag to have.

    The value of a key-value pair in the 'attrs' map can be a
    string, a list of strings, a regular expression object, or a
    callable that takes a string and returns whether or not the
    string matches for some custom definition of 'matches'. The
    same is true of the tag name.
</snippet></ROW><ROW><id>13059063</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; text = ''.join('&lt;table class="class{}"&gt;&lt;/table&gt;'.format(i) for i in range(10))
&gt;&gt;&gt; soup = BeautifulSoup(text)
&gt;&gt;&gt; 
&gt;&gt;&gt; soup.find_all("table", {"class": ["class1", "class7"]})
[&lt;table class="class1"&gt;&lt;/table&gt;, &lt;table class="class7"&gt;&lt;/table&gt;]
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.find_all("table", {"class": re.compile("class[17]")})
[&lt;table class="class1"&gt;&lt;/table&gt;, &lt;table class="class7"&gt;&lt;/table&gt;]
&gt;&gt;&gt; 
&gt;&gt;&gt; soup.find_all("table", {"class": lambda x: 3*int(x[-1])**2-24*int(x[-1])+17 == -4})
[&lt;table class="class1"&gt;&lt;/table&gt;, &lt;table class="class7"&gt;&lt;/table&gt;]
</snippet></ROW><ROW><id>13059172</id><snippet>re.match</snippet></ROW><ROW><id>13059172</id><snippet>re.search</snippet></ROW><ROW><id>13059371</id><snippet>alist = [ (('john', 37), 8), (('john', 37), 8) ]
sum(1 for x in alist if x[1] == 8)
</snippet></ROW><ROW><id>13059371</id><snippet>id</snippet></ROW><ROW><id>13059371</id><snippet>id == 8</snippet></ROW><ROW><id>13059371</id><snippet>sum(x[1] == 8 for x in alist)
</snippet></ROW><ROW><id>13059371</id><snippet>x[1] == 8</snippet></ROW><ROW><id>13059371</id><snippet>True</snippet></ROW><ROW><id>13059371</id><snippet>1</snippet></ROW><ROW><id>13059371</id><snippet>False</snippet></ROW><ROW><id>13059371</id><snippet>0</snippet></ROW><ROW><id>13059464</id><snippet>export FOO</snippet></ROW><ROW><id>13059464</id><snippet>export FOO_BAR_BAZ</snippet></ROW><ROW><id>13059504</id><snippet>def app_path():
    """Returns the base application path."""
    if hasattr(sys, 'frozen'):
        # Handles PyInstaller
        return os.path.dirname(sys.executable)
    return os.path.dirname(__file__)
</snippet></ROW><ROW><id>13059602</id><snippet>def palindrome(num):
    return str(num) == str(num)[::-1]
</snippet></ROW><ROW><id>13059755</id><snippet>card = balanced.Card(**card_payload)  # this could also just be a URI from a card tokenized with balanced.js
account = balanced.Account.query.filter(email_address = emailAddress).one()
account.add_card(card.uri)
</snippet></ROW><ROW><id>13059755</id><snippet>cards = account.cards
# some magic here to select the correct card (e.g. prompt user for which card)
card = magic_card_selection(cards)
debit = account.debit(amount_in_cents, source_uri=card.uri)
</snippet></ROW><ROW><id>13059755</id><snippet>cards = account.cards
for card in cards:
    # display as you like, the card object has the following attributes:
    print card.__dict__.keys()
   ['expiration_month', 'account', 'hash', 'name', 'expiration_year', 'created_at', 'brand', 'uri', 'card_type', 'is_valid', 'meta', 'last_four', 'id']
</snippet></ROW><ROW><id>13059755</id><snippet>import balanced


key = balanced.APIKey().save()
balanced.configure(key.secret)
balanced.Marketplace().save()

buyer = balanced.Account(email_address='buyer@example.org').save()

# add a new card
card = balanced.Marketplace.my_marketplace.create_card(
    name='First card',
    card_number='5105105105105100',
    expiration_month='12',
    expiration_year='2020',
    security_code='123',
)

buyer.add_card(card.uri)

# add another valid card 
card = balanced.Marketplace.my_marketplace.create_card(
    name='Second card',
    card_number='5105105105105100',
    expiration_month='12',
    expiration_year='2020',
    security_code='123',
)

buyer.add_card(card.uri)

amount_in_cents = 100  # $1.00

first_card = buyer.cards[0]
second_card = buyer.cards[1]

# charge a specific card
debit = buyer.debit(amount_in_cents, source_uri=first_card.uri)
debit2 = buyer.debit(amount_in_cents, source_uri=second_card.uri)

assert debit.source.uri == first_card.uri
assert debit2.source.uri == second_card.uri

# show all attributes on an object
print first_card.__dict__.keys()
</snippet></ROW><ROW><id>13059945</id><snippet>re_texts = [re.compile('textblock1'), re.compile('textblock2'), re.compile('textblock3')]

if all(r.search(text) for r in re_texts):
    # all matches found
</snippet></ROW><ROW><id>13059975</id><snippet>Proxy</snippet></ROW><ROW><id>13059975</id><snippet>function defaultDict(map, default) {
    return function(key) {
        if (key in map)
            return map[key];
        if (typeof default == "function")
            return default(key);
        return default;
    };
}

var a = defaultDict({cat: 1}, 0);
console.log(a('cat')); // 1
console.log(a('dog')); // 0
</snippet></ROW><ROW><id>13060260</id><snippet>er is defined for something as simple as:

class Char(object):
    # these start as class attributes, 
    # but whenever they are assigned to with a "self.var = bla" in
    # a method, an instance attribute starts existing
    x, y = 0,0
    vx, vy = 0,0

    def update(self):
        self.x += self.vx
        self.y += self.vy
</snippet></ROW><ROW><id>13060260</id><snippet>def mainloop():
   while True:
       ...
       obj.update()
       if obj.getRect().colliderect(world[ID].getRect()): # don't do "== True" in `if's - it is just silly
             # take character back to the precious position
             obj.x -= obj.vx
             obj.y -= obj.vy
             # zero out velocities to make it stop:
             obj.vx = obj.vy = 0
</snippet></ROW><ROW><id>13060260</id><snippet>for</snippet></ROW><ROW><id>13060278</id><snippet>[^a-zA-Z]</snippet></ROW><ROW><id>13060278</id><snippet>re.sub(r'[^a-zA-Z]', '', mystring)
</snippet></ROW><ROW><id>13060278</id><snippet>a-zA-Z</snippet></ROW><ROW><id>13060278</id><snippet>^</snippet></ROW><ROW><id>13060289</id><snippet>root.mainloop()</snippet></ROW><ROW><id>13060289</id><snippet>#GUI

#from Tkinter import *
from Tkinter import *
#to create a root window 
root = Tk()
w = Label(root, text="Hello, world!")
w.pack()
root.mainloop()
</snippet></ROW><ROW><id>13060292</id><snippet>'{"a": {"c": "C", "b": "B"}, "c": {}, "b": {"e": "E", "d": "D"}}'
</snippet></ROW><ROW><id>13060292</id><snippet>{"a"</snippet></ROW><ROW><id>13060292</id><snippet>{</snippet></ROW><ROW><id>13060292</id><snippet>"b": "B"</snippet></ROW><ROW><id>13060292</id><snippet>"c": "C"</snippet></ROW><ROW><id>13060369</id><snippet>datetime</snippet></ROW><ROW><id>13060369</id><snippet>import datetime
date_str = input("Date: ")
try:
    date = datetime.datetime.strptime(date_str,'%m/%d/%Y')
except ValueError:
    print ("Bad date")
</snippet></ROW><ROW><id>13060369</id><snippet>def parse_date(date_str):
    pieces = date_str.split('/')
    try:
        for piece in pieces:
           assert int(piece) &gt; 0
    except (ValueError,AssertionError):
        print ("Bad Date")
    else:
        print ("Good date")

parse_date('01/x1/2010')   #Bad Date
parse_date('01/-1/2010')   #Bad Date
parse_date('01/01/2010')   #Good date
</snippet></ROW><ROW><id>13060501</id><snippet>soup = bs4.BeautifulSoup(html, "lxml")
spans = soup.findAll("span", attrs = {"class": "new"})
regex = re.compile('.*do something at.*')
desired_tags = [span for span in spans if regex.match(span.text)]
</snippet></ROW><ROW><id>13060519</id><snippet>numpy.ptp</snippet></ROW><ROW><id>13060519</id><snippet>max - min</snippet></ROW><ROW><id>13060592</id><snippet>pylab.gci</snippet></ROW><ROW><id>13060592</id><snippet>get_clim</snippet></ROW><ROW><id>13060592</id><snippet>vmin, vmax = plt.gci().get_clim()
</snippet></ROW><ROW><id>13060644</id><snippet>class</snippet></ROW><ROW><id>13060644</id><snippet>Class</snippet></ROW><ROW><id>13060644</id><snippet>c</snippet></ROW><ROW><id>13060644</id><snippet>:</snippet></ROW><ROW><id>13060644</id><snippet>def __add__(self,other):
                      #^ NEED THIS
</snippet></ROW><ROW><id>13060777</id><snippet>key={'a':['stuff','more stuff','even more stuff'],'b':['test2','test3']}
for k in key:
    for val in key[k]:
        #do stuff with values in the key
</snippet></ROW><ROW><id>13060980</id><snippet>K_max = 20
K_min = 0
L_max = 20
L_min = 0
ax = plt.subplot(111)
x_offset = 7 # tune these
y_offset = 7 # tune these
plt.setp(ax, 'frame_on', False)
ax.set_ylim([0, (K_max-K_min +1)*y_offset ])
ax.set_xlim([0, (L_max - L_min+1)*x_offset])
ax.set_xticks([])
ax.set_yticks([])
ax.grid('off')



for k in np.arange(K_min, K_max + 1):
    for l in np.arange(L_min, L_max + 1):
        ax.plot(np.arange(5) + l*x_offset, 5+rand(5) + k*y_offset,
                'r-o', ms=1, mew=0, mfc='r')
        ax.plot(np.arange(5) + l*x_offset, 3+rand(5) + k*y_offset,
                'b-o', ms=1, mew=0, mfc='b')
        ax.annotate('K={},L={}'.format(k, l), (2.5+ (k)*x_offset,l*y_offset), size=3,ha='center')
plt.savefig(os.path.join(os.getcwd(), 'plot-average.pdf'))

print 'Final plot created.'
</snippet></ROW><ROW><id>13060980</id><snippet>axes</snippet></ROW><ROW><id>13061033</id><snippet>import nltk.corpus as corpus

def mark_sentence(row):
    if row[-1] == '.':
        row[-1] = '&lt;/s&gt;'
    else:
        row.append('&lt;/s&gt;')
    return ['&lt;s&gt;'] + row

news = corpus.brown.sents(categories = 'editorial')
for row in news[:5]:
    print(mark_sentence(row))
</snippet></ROW><ROW><id>13061033</id><snippet>['&lt;s&gt;', 'Assembly', 'session', 'brought', 'much', 'good', '&lt;/s&gt;']
['&lt;s&gt;', 'The', 'General', 'Assembly', ',', 'which', 'adjourns', 'today', ',', 'has', 'performed', 'in', 'an', 'atmosphere', 'of', 'crisis', 'and', 'struggle', 'from', 'the', 'day', 'it', 'convened', '&lt;/s&gt;']
['&lt;s&gt;', 'It', 'was', 'faced', 'immediately', 'with', 'a', 'showdown', 'on', 'the', 'schools', ',', 'an', 'issue', 'which', 'was', 'met', 'squarely', 'in', 'conjunction', 'with', 'the', 'governor', 'with', 'a', 'decision', 'not', 'to', 'risk', 'abandoning', 'public', 'education', '&lt;/s&gt;']
['&lt;s&gt;', 'There', 'followed', 'the', 'historic', 'appropriations', 'and', 'budget', 'fight', ',', 'in', 'which', 'the', 'General', 'Assembly', 'decided', 'to', 'tackle', 'executive', 'powers', '&lt;/s&gt;']
['&lt;s&gt;', 'The', 'final', 'decision', 'went', 'to', 'the', 'executive', 'but', 'a', 'way', 'has', 'been', 'opened', 'for', 'strengthening', 'budgeting', 'procedures', 'and', 'to', 'provide', 'legislators', 'information', 'they', 'need', '&lt;/s&gt;']
</snippet></ROW><ROW><id>13061091</id><snippet>\N{unicode character name}</snippet></ROW><ROW><id>13061091</id><snippet>'\N{BLACK SPADE SUIT}'
</snippet></ROW><ROW><id>13061162</id><snippet>import</snippet></ROW><ROW><id>13061162</id><snippet>def exec1func():
    from exec2 import exec2func
    exec2func()
</snippet></ROW><ROW><id>13061162</id><snippet>imp.load_source</snippet></ROW><ROW><id>13061162</id><snippet>import imp

def exec1func():
    exec2 = imp.load_source('exec2', 'c:/python27/exec2.py')
    exec2.exec2func()
</snippet></ROW><ROW><id>13061250</id><snippet>twos</snippet></ROW><ROW><id>13061250</id><snippet>twos = (y == 2).nonzero()[0]
</snippet></ROW><ROW><id>13061250</id><snippet>(y == 2)</snippet></ROW><ROW><id>13061250</id><snippet>y == 2</snippet></ROW><ROW><id>13061250</id><snippet>True</snippet></ROW><ROW><id>13061250</id><snippet>False</snippet></ROW><ROW><id>13061250</id><snippet>.</snippet></ROW><ROW><id>13061250</id><snippet>In [133]: A='lorem ipsum'
# pressed Tab
In [134]: A.
A.capitalize  A.endswith    A.isalnum     A.istitle     A.lstrip      A.rjust       A.splitlines  A.translate
A.center      A.expandtabs  A.isalpha     A.isupper     A.partition   A.rpartition  A.startswith  A.upper
A.count       A.find        A.isdigit     A.join        A.replace     A.rsplit      A.strip       A.zfill
A.decode      A.format      A.islower     A.ljust       A.rfind       A.rstrip      A.swapcase    
A.encode      A.index       A.isspace     A.lower       A.rindex      A.split       A.title       
</snippet></ROW><ROW><id>13061250</id><snippet>dir(someObject)</snippet></ROW><ROW><id>13061250</id><snippet>In [134]: dir(A)
Out[134]: 
['__add__',
 '__class__',
 '__contains__',
 '__delattr__',
 '__doc__',
 '__eq__',
  .... snipped...
 'startswith',
 'strip',
 'swapcase',
 'title',
 'translate',
 'upper',
 'zfill']
</snippet></ROW><ROW><id>13061337</id><snippet>lxml</snippet></ROW><ROW><id>13061337</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>13061337</id><snippet># find every &lt;li&gt; in the &lt;ul&gt; under div with class div_class
raw_html = raw_string.xpath("//div[@class='div_class']/ul/li")
for item in raw_html:
    print(item.text.strip())
</snippet></ROW><ROW><id>13061337</id><snippet>I'm a title. Parse me
I'm a title. Parse me
I'm a title. Parse me
I'm a title. Parse me
</snippet></ROW><ROW><id>13061402</id><snippet>cur.execute("INSERT INTO public.test VALUES (%s)", (psycopg2.Binary(data),))
</snippet></ROW><ROW><id>13061435</id><snippet>db.foo.find({
    $and: [
        {"timestamp" : { $lte: 1000112}},
        {"timestamp" : { $gte: 1000165}}
    ] 
})
</snippet></ROW><ROW><id>13061491</id><snippet>def binP(N, p, x1, x2):
    p = float(p)
    q = p/(1-p)
    k = 0.0
    v = 1.0
    s = 0.0
    tot = 0.0

    while(k&lt;=N):
            tot += v
            if(k &gt;= x1 and k &lt;= x2):
                    s += v
            if(tot &gt; 10**30):
                    s = s/10**30
                    tot = tot/10**30
                    v = v/10**30
            k += 1
            v = v*q*(N+1-k)/k
    return s/tot

def calcBin(vx, vN, vCL = 95):
    '''
    Calculate the exact confidence interval for a binomial proportion

    Usage:
    &gt;&gt;&gt; calcBin(13,100)    
    (0.07107391357421874, 0.21204372406005856)
    &gt;&gt;&gt; calcBin(4,7)   
    (0.18405151367187494, 0.9010086059570312)
    ''' 
    vx = float(vx)
    vN = float(vN)
    #Set the confidence bounds
    vTU = (100 - float(vCL))/2
    vTL = vTU

    vP = vx/vN
    if(vx==0):
            dl = 0.0
    else:
            v = vP/2
            vsL = 0
            vsH = vP
            p = vTL/100

            while((vsH-vsL) &gt; 10**-5):
                    if(binP(vN, v, vx, vN) &gt; p):
                            vsH = v
                            v = (vsL+v)/2
                    else:
                            vsL = v
                            v = (v+vsH)/2
            dl = v

    if(vx==vN):
            ul = 1.0
    else:
            v = (1+vP)/2
            vsL =vP
            vsH = 1
            p = vTU/100
            while((vsH-vsL) &gt; 10**-5):
                    if(binP(vN, v, 0, vx) &lt; p):
                            vsH = v
                            v = (vsL+v)/2
                    else:
                            vsL = v
                            v = (v+vsH)/2
            ul = v
    return (dl, ul)
</snippet></ROW><ROW><id>13061515</id><snippet>myfuncion</snippet></ROW><ROW><id>13061750</id><snippet>shutil</snippet></ROW><ROW><id>13061750</id><snippet>SSH/SFTP</snippet></ROW><ROW><id>13061750</id><snippet>rsync</snippet></ROW><ROW><id>13061753</id><snippet>&lt;Item&gt;</snippet></ROW><ROW><id>13061753</id><snippet>import sys
import csv

from BeautifulSoup import BeautifulSoup as Soup

doc = Soup(xml_string)
data = []
cols = set()
for item in doc.findAll('item'):
    d = {}
    for sub in item:
        if hasattr(sub, 'name'):
            d[sub.name] = sub.text
    data.append(d)
    cols = cols.union(d.keys())

cw = csv.writer(sys.stdout)
cw.writerow(cols)
for row in data:
    cw.writerow([row.get(k, 'N/A') for k in cols])
</snippet></ROW><ROW><id>13062023</id><snippet>groups = Group_members.objects.filter(Q(profile=profile.id),~Q(group__in=group_id)
</snippet></ROW><ROW><id>13062023</id><snippet>groups = Group_members.objects.filter(profile=profile.id)
</snippet></ROW><ROW><id>13062023</id><snippet>groupId = [x.group.id for x in groups if x.group.id not in group_id]
</snippet></ROW><ROW><id>13062058</id><snippet>Popen</snippet></ROW><ROW><id>13062058</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>13062058</id><snippet>bytearray</snippet></ROW><ROW><id>13062058</id><snippet>np.frombuffer</snippet></ROW><ROW><id>13062058</id><snippet>proc.stdout.read()</snippet></ROW><ROW><id>13062058</id><snippet>check_output()</snippet></ROW><ROW><id>13062058</id><snippet>data</snippet></ROW><ROW><id>13062058</id><snippet>proc.stdout.readinto(data)</snippet></ROW><ROW><id>13062058</id><snippet>data</snippet></ROW><ROW><id>13062058</id><snippet>len(data)</snippet></ROW><ROW><id>13062058</id><snippet>data</snippet></ROW><ROW><id>13062058</id><snippet>data = bytearray(2**32) # 4 GiB
n = proc.stdout.readinto(data)
if n &lt; len(data):
    data[n:] = ''        
else:
    data += proc.stdout.read()
</snippet></ROW><ROW><id>13062058</id><snippet>ndarray</snippet></ROW><ROW><id>13062058</id><snippet>ndata</snippet></ROW><ROW><id>13062058</id><snippet>buf = np.getbuffer(ndata)</snippet></ROW><ROW><id>13062058</id><snippet>readinto(buf)</snippet></ROW><ROW><id>13062058</id><snippet>bytearray</snippet></ROW><ROW><id>13062058</id><snippet>np.ndarray</snippet></ROW><ROW><id>13062058</id><snippet>&gt;&gt;&gt; data = bytearray('\x01')
&gt;&gt;&gt; ndata = np.frombuffer(data, np.int8)
&gt;&gt;&gt; ndata
array([1], dtype=int8)
&gt;&gt;&gt; ndata[0] = 2
&gt;&gt;&gt; data
bytearray(b'\x02')
</snippet></ROW><ROW><id>13062119</id><snippet>In : classes = []

In : cls_name = 'BaseCls1'

In : classes.append(type(cls_name, (object, ), {'x': 1}))

In : classes[0].x
Out: 1

In : classes[0].__bases__
Out: (object,)

# two ways to create subclass out of BaseCls1

In : class SubCls1(classes[0]):
   :     x = 2
   :
In : SubCls1.x
Out: 2

In : SubCls1.__bases__
Out: (__main__.BaseCls1,)


In : SubCls2 = type('SubCls2', (classes[0],), {'x': 2})

In : SubCls2.x
Out: 2

In : SubCls2.__bases__
Out: (__main__.BaseCls1,)
</snippet></ROW><ROW><id>13062244</id><snippet>a is b</snippet></ROW><ROW><id>13062244</id><snippet>a is b</snippet></ROW><ROW><id>13062244</id><snippet>ktr is ptr</snippet></ROW><ROW><id>13062244</id><snippet>a="poi"
b="poi"
print a is b  # Prints 'True'

ktr = "today is a fine day"
ptr = "today is a fine day"
print ktr is ptr  # Prints 'True'
</snippet></ROW><ROW><id>13062244</id><snippet>a="p" + "oi"
b="po" + "i"
print a is b  # Oddly enough, prints 'True'

ktr = "today is" + " a fine day"
ptr = "today is a f" + "ine day"
print ktr is ptr  # Prints 'False'
</snippet></ROW><ROW><id>13062244</id><snippet>a is b</snippet></ROW><ROW><id>13062263</id><snippet>Momoko</snippet></ROW><ROW><id>13062263</id><snippet>psycopg2</snippet></ROW><ROW><id>13062263</id><snippet>mysql</snippet></ROW><ROW><id>13062307</id><snippet>from django.utils.timezone import utc
utcnow = datetime.utcnow().replace(tzinfo=utc)
</snippet></ROW><ROW><id>13062357</id><snippet>dict</snippet></ROW><ROW><id>13062357</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13062357</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = {'Gears of war 3': 6, 'Batman': 5, 'gears of war 3': 4, 'Rocksmith': 5, 'Madden': 3}

&gt;&gt;&gt; od = OrderedDict(sorted(d.items(), key=lambda x:x[1], reverse=True))
&gt;&gt;&gt; od
OrderedDict([('Gears of war 3', 6), ('Batman', 5), ('gears of war 3', 4), ('Rocksmith', 5), ('Madden', 3)])

&gt;&gt;&gt; od.keys()
['Gears of war 3', 'Batman', 'gears of war 3', 'Rocksmith', 'Madden']
&gt;&gt;&gt; od.values()
[6, 5, 4, 5, 3]
&gt;&gt;&gt; od['Batman']
5
</snippet></ROW><ROW><id>13062357</id><snippet>{
  "count": 24,
  "top 5": [
    {"Gears of war 3": 6},
    {"Batman": 5},
    {"Rocksmith": 5},
    {"gears of war 3": 4},
    {"Madden": 3}
  ]
}
</snippet></ROW><ROW><id>13062357</id><snippet>d</snippet></ROW><ROW><id>13062357</id><snippet>&gt;&gt;&gt; l = sorted(d.items(), key=lambda x:x[1], reverse=True)
&gt;&gt;&gt; l
[('Gears of war 3', 6), ('Batman', 5), ('Rocksmith', 5), ('gears of war 3', 4), ('Madden', 3)]
</snippet></ROW><ROW><id>13062357</id><snippet>l</snippet></ROW><ROW><id>13062357</id><snippet>m['top5']</snippet></ROW><ROW><id>13062357</id><snippet>m["Top 5"]= l
k = json.dumps(m)
</snippet></ROW><ROW><id>13062410</id><snippet>In [13]: df
Out[13]:
  ORG1  ORG2
0    A  ESBL
1    B     P
2    C     Q
3    D     R
4    E  ESBL

In [14]: cond = df.ORG2 == 'ESBL'

In [15]: df.ORG1[cond] = df.ORG2[cond]

In [16]: df
Out[16]:
   ORG1  ORG2
0  ESBL  ESBL
1     B     P
2     C     Q
3     D     R
4  ESBL  ESBL
</snippet></ROW><ROW><id>13062504</id><snippet>import scipy.misc</snippet></ROW><ROW><id>13062504</id><snippet>from scipy import misc</snippet></ROW><ROW><id>13062542</id><snippet>p1</snippet></ROW><ROW><id>13062542</id><snippet>&gt;&gt;&gt; p1.is_valid
False
&gt;&gt;&gt; p2.is_valid
True
</snippet></ROW><ROW><id>13062542</id><snippet>&gt;&gt;&gt; list(p1.exterior.coords)
[(35.004100000000001, -88.195499999999996), (34.991799999999998, -85.606800000000007), (32.840400000000002, -85.175600000000003), (32.259300000000003, -84.892700000000005), (32.153500000000001, -85.034199999999998), (31.794699999999999, -85.135800000000003), (31.52, -85.043800000000005), (31.3384, -85.083600000000004), (31.209299999999999, -85.106999999999999), (31.002300000000002, -84.994399999999999), (30.9953, -87.600899999999996), (30.942299999999999, -87.592600000000004), (30.853899999999999, -87.625600000000006), (30.674499999999998, -87.407200000000003), (30.4404, -87.368799999999993), (30.1463, -87.524000000000001), (30.154599999999999, -88.386399999999995), (31.893899999999999, -88.474299999999999), (34.893799999999999, -88.102099999999993), (34.947899999999997, -88.1721), (34.910699999999999, -88.146100000000004), (35.004100000000001, -88.195499999999996)]
</snippet></ROW><ROW><id>13062542</id><snippet>&gt;&gt;&gt; p1.exterior.type
'LinearRing'
&gt;&gt;&gt; p1.exterior.is_valid
False
</snippet></ROW><ROW><id>13062542</id><snippet>&gt;&gt;&gt; l1 = LineString(p1.exterior.coords)
&gt;&gt;&gt; l1.is_simple
False
</snippet></ROW><ROW><id>13062542</id><snippet>&gt;&gt;&gt; import cgpolyencode
&gt;&gt;&gt; encoder = cgpolyencode.GPolyEncoder()
&gt;&gt;&gt; encoder.encode((y, x) for x, y in p1.exterior.coords)
{'points': 'svstEzthyOzkAkrxNfecL_fsAznpBcgv@ftSjsZnaeA~yRzst@_~P~mb@vwFzeXfqCvlg@w~Tvj@ra|NfjI{r@ngPfmEf`b@_ti@bvl@_oFbmx@~h]{r@~lgDsurIjdPk|hQgugAaqIntLlgFoaDwfQvsH', 'numLevels': 18, 'zoomFactor': 2, 'levels': 'PPLMKMKGKPNIKLMNPLLKJP'}
</snippet></ROW><ROW><id>13062593</id><snippet>items()</snippet></ROW><ROW><id>13062593</id><snippet>(key, value)</snippet></ROW><ROW><id>13062593</id><snippet>' '</snippet></ROW><ROW><id>13062593</id><snippet>' ' &lt; 'a'</snippet></ROW><ROW><id>13062593</id><snippet>' ' &lt; 'b'</snippet></ROW><ROW><id>13062593</id><snippet>min(x.items(), key=lambda a: a[1])</snippet></ROW><ROW><id>13062877</id><snippet>item == 0
starting n == 2
removing 4
removing 6
removing 8
removing 10
removing 12
removing 14
removing 16
removing 18
removing 20
removing 22
removing 24
</snippet></ROW><ROW><id>13062877</id><snippet>item == 1
starting n == 3
removing 6 (but 6 is not in the list, because it has already been removed)
ValueError
</snippet></ROW><ROW><id>13062877</id><snippet>item == 1</snippet></ROW><ROW><id>13062877</id><snippet>n == numbers[1] == 3</snippet></ROW><ROW><id>13062877</id><snippet>n += numbers[1]</snippet></ROW><ROW><id>13062877</id><snippet>n == 6</snippet></ROW><ROW><id>13063061</id><snippet>import string
chars = string.lowercase + string.uppercase

def identifier(x, chars):
    output = []
    base = len(chars)
    while x:
        output.append(chars[x % base])
        x /= base
    return ''.join(reversed(output))

print identifier(1, chars)
</snippet></ROW><ROW><id>13063102</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>13063102</id><snippet>airodump = subprocess.Popen(..., stdout=open("/dev/null", "w"), stderr=open("/dev/null", "w"))
</snippet></ROW><ROW><id>13063102</id><snippet>import os
airodump = subprocess.Popen(..., stdout=open(os.devnull, "w"), stderr=open(os.devnull, "w"))
</snippet></ROW><ROW><id>13063153</id><snippet>itertools</snippet></ROW><ROW><id>13063153</id><snippet>from itertools import combinations

t = [(1,2), (3,4), (5,6)]

for i in combinations(t, 2):
    print i
</snippet></ROW><ROW><id>13063153</id><snippet>(1, 2) (3, 4) # 1st with 2nd
(1, 2) (5, 6) # 1st with 3rd
(3, 4) (5, 6) # 2nd with 3rd
</snippet></ROW><ROW><id>13063255</id><snippet>def nearbin(bin):
    ...

def main(args):
    parser = argparse.ArgumentParser(...)
    ...
    args = parser.parse_args(args)

    nearbin(args.bin)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>13063255</id><snippet>./script.py -bin 20</snippet></ROW><ROW><id>13063255</id><snippet>main("-bin 20".split())</snippet></ROW><ROW><id>13063255</id><snippet>nearbin(20)</snippet></ROW><ROW><id>13063325</id><snippet> ('rock', 'Rock'),
 ('hip-hop', 'Hip-Hop'),
</snippet></ROW><ROW><id>13063407</id><snippet>class PbsObjectUpdate(UpdateView):
    @property
    def model_name(self):
        return self.model.__name__
</snippet></ROW><ROW><id>13063407</id><snippet>PbsObjectUpdate().model_name</snippet></ROW><ROW><id>13063414</id><snippet>complex.h</snippet></ROW><ROW><id>13063414</id><snippet>fftw.h</snippet></ROW><ROW><id>13063414</id><snippet>fftw_complex</snippet></ROW><ROW><id>13063414</id><snippet>a.data_as(ctypes.c_void_p)</snippet></ROW><ROW><id>13063414</id><snippet>a</snippet></ROW><ROW><id>13063414</id><snippet>order='C'</snippet></ROW><ROW><id>13063610</id><snippet>from boto.s3.connection import S3Connection

conn = S3Connection('your-access-key','your-secret-key')
bucket = conn.get_bucket('bucket')
for key in bucket.list():
    try:
        res = key.get_contents_to_filename(key.name)
    except:
        logging.info(key.name+":"+"FAILED")
</snippet></ROW><ROW><id>13063716</id><snippet>d2 = {k: f(v) for k, v in d1.items()}
</snippet></ROW><ROW><id>13063716</id><snippet>d2 = {}
for k, v in d1.items():
    d2[k] = f(v)
</snippet></ROW><ROW><id>13063716</id><snippet>d2 = dict((k, f(v)) for k, v in d1.items())
</snippet></ROW><ROW><id>13063764</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>13063764</id><snippet>__getattr__()</snippet></ROW><ROW><id>13063764</id><snippet>__getattribute__()</snippet></ROW><ROW><id>13063764</id><snippet>__getattribute__(self,
  name)</snippet></ROW><ROW><id>13063764</id><snippet>__getattribute__</snippet></ROW><ROW><id>13063764</id><snippet>.</snippet></ROW><ROW><id>13063764</id><snippet>hasattr</snippet></ROW><ROW><id>13063769</id><snippet>mapreduce</snippet></ROW><ROW><id>13063769</id><snippet>riak_object</snippet></ROW><ROW><id>13063769</id><snippet>riak_object.py</snippet></ROW><ROW><id>13063769</id><snippet>mapreduce</snippet></ROW><ROW><id>13063769</id><snippet>RiakObject</snippet></ROW><ROW><id>13063769</id><snippet>riak_object</snippet></ROW><ROW><id>13063914</id><snippet>postBody = self.request.get('body')    
postBody = postBody.encode('iso-8859-1')
DEBUG = os.environ['SERVER_SOFTWARE'].startswith('Dev')
if DEBUG:
    r.body = postBody
else:
    postBody += "=" * ((4 - len(postBody) % 4) % 4)
    b64 = base64.urlsafe_b64decode(postBody)
</snippet></ROW><ROW><id>13063914</id><snippet>'ascii' codec can't decode byte 0xe5 in position 5: ordinal not in range(128)
</snippet></ROW><ROW><id>13063924</id><snippet>message</snippet></ROW><ROW><id>13063924</id><snippet>args</snippet></ROW><ROW><id>13063924</id><snippet>BaseException.message</snippet></ROW><ROW><id>13063924</id><snippet>BaseException.args[0] if BaseException.args else None</snippet></ROW><ROW><id>13063924</id><snippet>message</snippet></ROW><ROW><id>13063924</id><snippet>args</snippet></ROW><ROW><id>13063924</id><snippet>args[0]</snippet></ROW><ROW><id>13063924</id><snippet>()</snippet></ROW><ROW><id>13063924</id><snippet>raise</snippet></ROW><ROW><id>13063924</id><snippet>except</snippet></ROW><ROW><id>13063924</id><snippet>raise</snippet></ROW><ROW><id>13063924</id><snippet>except</snippet></ROW><ROW><id>13063924</id><snippet>try:
  raise MyException('Out of cheese error', 42)
except Exception as x:
  print x.args
</snippet></ROW><ROW><id>13063924</id><snippet>('Out of cheese error', 42)</snippet></ROW><ROW><id>13063924</id><snippet>print x.message</snippet></ROW><ROW><id>13063924</id><snippet>'Out of cheese error'</snippet></ROW><ROW><id>13063924</id><snippet>class BaseException(object):
  def __init__(self, *args):
    self.args = args
</snippet></ROW><ROW><id>13064594</id><snippet>reloader=True</snippet></ROW><ROW><id>13064594</id><snippet>run</snippet></ROW><ROW><id>13064631</id><snippet>listeners = [component1, component2, component3]
eventqueue.add(InitEvent())
while True:
    event = eventqueue.pop()
    for listener in listeners:
        listener.handle_event(event)
</snippet></ROW><ROW><id>13064631</id><snippet>eventqueue</snippet></ROW><ROW><id>13064631</id><snippet>Event()</snippet></ROW><ROW><id>13064631</id><snippet>threading.(R)Lock</snippet></ROW><ROW><id>13064631</id><snippet>.pop()</snippet></ROW><ROW><id>13064631</id><snippet>.fire()</snippet></ROW><ROW><id>13064894</id><snippet>import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--bucket', dest='bucketname', action='store')
    parser.add_argument('-f', '--folder', dest='folder', action='store')
    args = parser.parse_args('-b foo'.split())
    print args
    args = parser.parse_args('-b foo -f /foo'.split())
    print args
</snippet></ROW><ROW><id>13064894</id><snippet>&gt; Namespace(bucketname='foo', folder=None)
&gt; Namespace(bucketname='foo', folder='/foo')
</snippet></ROW><ROW><id>13064894</id><snippet>import sys
import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--bucket', dest='bucketname', action='store')
    parser.add_argument('-f', '--folder', dest='folder', action='store')
    args = parser.parse_args()
    s3 = get_files()
    s3.foldername = args.folder
    s3.download_files()
</snippet></ROW><ROW><id>13064894</id><snippet>script.py --help</snippet></ROW><ROW><id>13064894</id><snippet>usage: script.py [-h] [-b BUCKETNAME] [-f FOLDER]

optional arguments:
  -h, --help            show this help message and exit
  -b BUCKETNAME, --bucket BUCKETNAME
  -f FOLDER, --folder FOLDE
</snippet></ROW><ROW><id>13065056</id><snippet>del i</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>__foo__</snippet></ROW><ROW><id>13065056</id><snippet>__del__</snippet></ROW><ROW><id>13065056</id><snippet>tree.removeItemWidget(i, 0)
</snippet></ROW><ROW><id>13065056</id><snippet>QTreeWidget</snippet></ROW><ROW><id>13065056</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>13065056</id><snippet>setItemWidget</snippet></ROW><ROW><id>13065056</id><snippet>addTopLevelItem</snippet></ROW><ROW><id>13065056</id><snippet>takeTopLevelItem</snippet></ROW><ROW><id>13065056</id><snippet>tree.takeTopLevelItem(tree.indexOfTopLevelItem(i))
</snippet></ROW><ROW><id>13065056</id><snippet>tree.clear()</snippet></ROW><ROW><id>13065439</id><snippet>number_of_read_lengths = {}

number_of_read_lengths[14,3] = "Your value"
</snippet></ROW><ROW><id>13065977</id><snippet>map</snippet></ROW><ROW><id>13065977</id><snippet>import numpy as np
from multiprocessing import Pool

def myhdf(date):
    year    = date[0:4]
    month   = date[4:6]
    day     = date[6:8]
    rootdir = 'data/mydata/'
    filename = 'no2track'+year+month+day
    records = read_my_hdf(rootdir,filename)
    if records.size:
        return np.mean(records)

dates = ['20080105','20080106','20080107','20080108','20080109']

pool = Pool(len(dates))
results = pool.map(myhdf,dates)
results = [ result for result in results if result ]
results = np.array(results)
</snippet></ROW><ROW><id>13066407</id><snippet>function_call = fn + lpar + expr + rpar
</snippet></ROW><ROW><id>13066407</id><snippet>expr = Forward()
identifier = Word(alphas+'_', alphanums+'_')
expr = Forward()
function_call = Group(identifier + LPAR + Group(expr) + RPAR)

unop = oneOf("+ -")
binop = oneOf("+ - * / %")
operand = Group(Optional(unop) + (function_call | number | identifier))
binexpr = operand + binop + operand

expr &lt;&lt; (binexpr | operand)

bnf = expr
</snippet></ROW><ROW><id>13066407</id><snippet>def test(s):
    exprtokens = bnf.parseString(s,parseAll=True)
    print exprtokens

test("10")
test("10+20")
test("avg(10)")
test("avg(+10)")
test("column_1+8")
test("avg(column_1+10)+10")
</snippet></ROW><ROW><id>13066407</id><snippet>[['10']]
[['10'], '+', ['20']]
[[['avg', [['10']]]]]
[[['avg', [['+', '10']]]]]
[['column_1'], '+', ['8']]
[[['avg', [['column_1'], '+', ['10']]]], '+', ['10']]
</snippet></ROW><ROW><id>13066407</id><snippet>fn(a op b)</snippet></ROW><ROW><id>13066407</id><snippet>fn(a) op fn(b)</snippet></ROW><ROW><id>13066407</id><snippet>fn(a)</snippet></ROW><ROW><id>13066407</id><snippet>def distribute_function(tokens):
    # unpack function name and arguments
    fname, args = tokens[0]

    # if args contains an expression, expand it
    if len(args) &gt; 1:
        ret = ParseResults([])
        for i,a in enumerate(args):
            if i % 2 == 0:
                # even args are operands to be wrapped in the function
                ret += ParseResults([ParseResults([fname,ParseResults([a])])])
            else:
                # odd args are operators, just add them to the results
                ret += ParseResults([a])
        return ParseResults([ret])
function_call.setParseAction(distribute_function)        
</snippet></ROW><ROW><id>13066407</id><snippet>[['10']]
[['10'], '+', ['20']]
[[['avg', [['10']]]]]
[[['avg', [['+', '10']]]]]
[['column_1'], '+', ['8']]
[[[['avg', [['column_1']]], '+', ['avg', [['10']]]]], '+', ['10']]
</snippet></ROW><ROW><id>13066407</id><snippet>fna(fnb(3+2)+fnc(4+9))</snippet></ROW><ROW><id>13066690</id><snippet>*args</snippet></ROW><ROW><id>13066690</id><snippet>*args</snippet></ROW><ROW><id>13066690</id><snippet>index</snippet></ROW><ROW><id>13066690</id><snippet>label()</snippet></ROW><ROW><id>13066690</id><snippet>chart.axes.label( 0, 'date 1', 'date 2', 'date 3', ... )
</snippet></ROW><ROW><id>13066690</id><snippet>0</snippet></ROW><ROW><id>13066961</id><snippet>os.makedirs</snippet></ROW><ROW><id>13066961</id><snippet>shutil.copy</snippet></ROW><ROW><id>13066961</id><snippet>target_dir = os.path.expanduser('~/a/long/long/path')
os.makedirs(target_dir)
shutil.copy('resources/foo.bar', os.path.join(target_dir, 'foo_bar'))
</snippet></ROW><ROW><id>13067086</id><snippet>CGIHTTPRequestHandler</snippet></ROW><ROW><id>13067086</id><snippet>.htaccess</snippet></ROW><ROW><id>13067086</id><snippet>CGIHTTPRequestHandler.cgi_directories</snippet></ROW><ROW><id>13067086</id><snippet>test.py</snippet></ROW><ROW><id>13067086</id><snippet>cgi-bin</snippet></ROW><ROW><id>13067086</id><snippet>htbin</snippet></ROW><ROW><id>13067086</id><snippet>#!/usr/bin/env python3

from http.server import CGIHTTPRequestHandler, HTTPServer

handler = CGIHTTPRequestHandler
handler.cgi_directories = ['/cgi-bin', '/htbin']  # this is the default
server = HTTPServer(('localhost', 8123), handler)
server.serve_forever()
</snippet></ROW><ROW><id>13067086</id><snippet>#!/usr/bin/env python3
print('Content-type: text/html\n')
print('&lt;title&gt;Hello World&lt;/title&gt;')
</snippet></ROW><ROW><id>13067086</id><snippet>|- cgiserver.py
|- cgi-bin/
   ` test.py
</snippet></ROW><ROW><id>13067086</id><snippet>python3 cgiserver.py</snippet></ROW><ROW><id>13067086</id><snippet>localhost:8123/cgi-bin/test.py</snippet></ROW><ROW><id>13067290</id><snippet>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
</snippet></ROW><ROW><id>13067290</id><snippet>import os
from django.conf.settings import PROJECT_ROOT

file_ = open(os.path.join(PROJECT_ROOT, 'filename'))
</snippet></ROW><ROW><id>13067652</id><snippet>print max(node.y for node in path.nodes)
</snippet></ROW><ROW><id>13067749</id><snippet>inotifywait</snippet></ROW><ROW><id>13067749</id><snippet>$ inotifywait -c -m -e modify -e create -e attrib  path/to/cgi-bin/ \ 
| while read pth; do
    chmod +x "$(echo $pth | awk -F, '{print $1$3}')"
done
</snippet></ROW><ROW><id>13067749</id><snippet>while /bin/true; do sleep 5 &amp;&amp; chmod 755 path/to/cgi-bin/*.py; done</snippet></ROW><ROW><id>13067749</id><snippet>CGIHTTPRequestHandler</snippet></ROW><ROW><id>13067749</id><snippet>is_executable()</snippet></ROW><ROW><id>13067894</id><snippet>[url]</snippet></ROW><ROW><id>13067894</id><snippet>u</snippet></ROW><ROW><id>13067894</id><snippet>r</snippet></ROW><ROW><id>13067894</id><snippet>l</snippet></ROW><ROW><id>13067894</id><snippet>(?:url)</snippet></ROW><ROW><id>13067894</id><snippet>[url]</snippet></ROW><ROW><id>13067894</id><snippet>\s*(?:url)?\(r?["|\'](?P&lt;pattern&gt;[^\'"]+)["|\'],\s*["|\'](?P&lt;view&gt;[^\'"]+)["|\']\),
</snippet></ROW><ROW><id>13068033</id><snippet>import os
import re
import win32api

def find_file(root_folder, rex):
    for root,dirs,files in os.walk(root_folder):
        for f in files:
            result = rex.search(f)
                if result:
                    print os.path.join(root,f)
                    break                         #if you want to find only one


def find_file_in_all_drives(file_name):
    #create a regular expression for the file
    rex = re.compile(file_name)
    for drive in win32api.GetLogicalDriveStrings().split('\000')[:-1]:
        find_file( drive, rex )


find_file_in_all_drivers( 'myfile\.doc' )
</snippet></ROW><ROW><id>13068104</id><snippet>self</snippet></ROW><ROW><id>13068104</id><snippet>self.gif1 = PhotoImage(file='1.gif')
self.canvas.create_image(0, 0, image=self.gif1, anchor=NW)
</snippet></ROW><ROW><id>13068104</id><snippet>gif1</snippet></ROW><ROW><id>13068104</id><snippet>self</snippet></ROW><ROW><id>13068104</id><snippet>PhotoImage</snippet></ROW><ROW><id>13068104</id><snippet>__init__</snippet></ROW><ROW><id>13068104</id><snippet>self</snippet></ROW><ROW><id>13068104</id><snippet>global</snippet></ROW><ROW><id>13068104</id><snippet>dict</snippet></ROW><ROW><id>13068175</id><snippet>import collections

ordered_d = collections.OrderedDict([('banana', 3),('apple',4),('pear', 1),('orange', 2)])
for k in ordered_d.keys():
    print k
</snippet></ROW><ROW><id>13068175</id><snippet>banana
apple
pear
orange
</snippet></ROW><ROW><id>13068250</id><snippet>self.StyleSetFont(wx.stc.STC_STYLE_DEFAULT,font)
</snippet></ROW><ROW><id>13068250</id><snippet>self.StyleSetFont(wx.stc.STC_STYLE_LINENUMBER,font)
</snippet></ROW><ROW><id>13068618</id><snippet>&gt;&gt;&gt; [c_dir + "\\" if not c_dir.endswith("\\") else c_dir for c_dir in (met_dir, out_dir)]
['D:\\09052012\\run\\fout\\', 'D:\\inpassingstest\\test_cmd\\']
</snippet></ROW><ROW><id>13068618</id><snippet>met_dir, out_dir = [...]
</snippet></ROW><ROW><id>13068618</id><snippet>str.endswith()</snippet></ROW><ROW><id>13068991</id><snippet>help(data.xs)</snippet></ROW><ROW><id>13068991</id><snippet>xs arg copy=False</snippet></ROW><ROW><id>13069037</id><snippet>"Traor\u00e9"</snippet></ROW><ROW><id>13069037</id><snippet>é</snippet></ROW><ROW><id>13069037</id><snippet>r = requests.get(url)
print(json.dumps(json.loads(r.content)['Item']['LastName']))
# -&gt; "Traor\u00e9" -&gt; Traoré
</snippet></ROW><ROW><id>13069037</id><snippet>r.json</snippet></ROW><ROW><id>13069037</id><snippet>r.text</snippet></ROW><ROW><id>13069037</id><snippet>requests</snippet></ROW><ROW><id>13069037</id><snippet>"Traor\u0102\u0160"</snippet></ROW><ROW><id>13069037</id><snippet>       00 00 00 xx  UTF-32BE
       00 xx 00 xx  UTF-16BE
       xx 00 00 00  UTF-32LE
       xx 00 xx 00  UTF-16LE
       xx xx xx xx  UTF-8
</snippet></ROW><ROW><id>13069037</id><snippet>r.content</snippet></ROW><ROW><id>13069037</id><snippet>json.loads</snippet></ROW><ROW><id>13069037</id><snippet>Content-Type</snippet></ROW><ROW><id>13069037</id><snippet>requests</snippet></ROW><ROW><id>13069255</id><snippet>PhoneNumber</snippet></ROW><ROW><id>13069255</id><snippet>User</snippet></ROW><ROW><id>13069416</id><snippet>settimeout()</snippet></ROW><ROW><id>13069416</id><snippet>connect()</snippet></ROW><ROW><id>13069416</id><snippet>create_connection()</snippet></ROW><ROW><id>13069416</id><snippet>with open(resultslocation + f2name, 'r') as f2, open(resultslocation + f3name, 'w') as f3:
    hits = f2.read()
    list = re.findall(r'name = (.+).', hits)
    for items in list:
        ip_addresses = socket.gethostbyname(items)
        with open(resultslocation + f4name, 'r') as f4:
            for items in f4:
                ports = int(items)
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.settimeout(1.0) # Set a timeout (value in seconds).
                try:
                    s.connect((ip_addresses, ports))
                    s.shutdown(2)
                    print 'port', ports, 'on', ip_addresses, 'is open'
                except:
                    # This will alse catch the timeout exception.
                    print 'port', ports, 'on', ip_addresses, 'is closed'
</snippet></ROW><ROW><id>13069441</id><snippet>true</snippet></ROW><ROW><id>13069441</id><snippet>false</snippet></ROW><ROW><id>13069441</id><snippet>for (...) {
    if (...) {
       return ...;
    }
}
return null; // Or false, or whatever
</snippet></ROW><ROW><id>13069652</id><snippet>IPython</snippet></ROW><ROW><id>13069835</id><snippet>object()</snippet></ROW><ROW><id>13069835</id><snippet>gc</snippet></ROW><ROW><id>13069835</id><snippet>import gc


def run():
    return 1

s = run()
print len(gc.get_referrers(s))  # prints a rather big number, 41 in my case

obj = object()
print len(gc.get_referrers(obj))  # prints 1

lst = [obj]
print len(gc.get_referrers(obj))  # prints 2

lst = []
print len(gc.get_referrers(obj))  # prints 1 again
</snippet></ROW><ROW><id>13069835</id><snippet>_Py_NewReference</snippet></ROW><ROW><id>13069835</id><snippet>Py_INCREF(op)</snippet></ROW><ROW><id>13069835</id><snippet>Py_DECREF(op)</snippet></ROW><ROW><id>13070169</id><snippet>old_hdr = pkt[Raw]</snippet></ROW><ROW><id>13070169</id><snippet>old_hdr = pkt[TCP].payload</snippet></ROW><ROW><id>13070169</id><snippet>new_hdr = 'New Header: value'
hdr = old_hdr.split('\r\n') # This is a crappy hack. Parsing HTTP headers
hdr.insert(new_hdr, 2)      # is a [solved problem][1].
send_hdr = '\r\n'.join(hdr)
pkt[TCP].payload = send_hdr
</snippet></ROW><ROW><id>13070169</id><snippet>del pkt[TCP].chksum
</snippet></ROW><ROW><id>13070440</id><snippet>created</snippet></ROW><ROW><id>13070454</id><snippet>QAbstractProxyModel</snippet></ROW><ROW><id>13070454</id><snippet>QSqlTableModel</snippet></ROW><ROW><id>13070454</id><snippet>class Model(QtSql.QSqlTableModel):
    def __init__(self, parent=None):
        super(Model, self).__init__(parent)
        self.setEditStrategy(QtSql.QSqlTableModel.OnFieldChange)

        self.setTable("test")
        self.select()


    def columnCount(self, parent=QtCore.QModelIndex()):
        # this is probably obvious
        # since we are adding a virtual column, we need one more column
        return super(Model, self).columnCount()+1


    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole and index.column()==2:
            # 2nd column is our virtual column.
            # if we are there, we need to calculate and return the value
            # we take the first two columns, get the data, turn it to integer and sum them
            # [0] at the end is necessary because pyqt returns value and a bool
            # http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qvariant.html#toInt
            return sum(self.data(self.index(index.row(), i)).toInt()[0] for i in range(2))
        if index.column() &gt; 2:
            # if we are past 2nd column, we need to shift it to left by one
            # to get the real value
            index = self.index(index.row(), index.column()-1)
        # get the value from base implementation
        return super(Model, self).data(index, role)


    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):
        # this is similar to `data`
        if section==2 and orientation==QtCore.Qt.Horizontal and role==QtCore.Qt.DisplayRole:
            return 'Sum'
        if section &gt; 2 and orientation==QtCore.Qt.Horizontal:
            section -= 1
        return super(Model, self).headerData(section, orientation, role)


    def flags(self, index):
        # since 2nd column is virtual, it doesn't make sense for it to be Editable
        # other columns can be Editable (default for QSqlTableModel)
        if index.column()==2:
            return QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
        return QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable


    def setData(self, index, data, role):
        # similar to data.
        # we need to be careful when setting data (after edit)
        # if column is after 2, it is actually the column before that
        if index.column() &gt; 2:
            index = self.index(index.row(), index.column()-1)
        return super(Model, self).setData(index, data, role)
</snippet></ROW><ROW><id>13070475</id><snippet>sphinx-quickstart</snippet></ROW><ROW><id>13070475</id><snippet>conf.py</snippet></ROW><ROW><id>13070475</id><snippet>extensions = []
</snippet></ROW><ROW><id>13070475</id><snippet>extensions = ['sphinx.ext.pngmath']
</snippet></ROW><ROW><id>13070475</id><snippet>.. foo documentation master file, created by
   sphinx-quickstart on Thu Oct 25 11:04:31 2012.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to foo's documentation!
===============================

Contents:

.. toctree::
   :maxdepth: 2

This is the first chapter
=========================

Instead, I am doing multi-line stuff, often like eqnarray in LaTeX:

.. math::
    DividendYield &amp;=&amp; \frac{DVT(t)}{CurrentMarketCap} \\
    Avg_Assets &amp;=&amp; \biggl( A/B \biggr) \textrm { when B is not zero...}
</snippet></ROW><ROW><id>13070475</id><snippet>\chapter{This is the first chapter}
\label{index:welcome-to-foo-s-documentation}\label{index:this-is-the-first-chapter}
Instead, I am doing multi-line stuff, often like eqnarray in LaTeX:
\begin{gather}
\begin{split}DividendYield &amp;=&amp; \frac{DVT(t)}{CurrentMarketCap} \\
Avg_Assets &amp;=&amp; \biggl( A/B \biggr) \textrm { when B is not zero...}\end{split}\notag\\\begin{split}\end{split}\notag
\end{gather}
</snippet></ROW><ROW><id>13070475</id><snippet>\end{gather}</snippet></ROW><ROW><id>13070475</id><snippet>Extra alignment tab has been changed to \cr.</snippet></ROW><ROW><id>13070475</id><snippet>split</snippet></ROW><ROW><id>13070475</id><snippet>eqnarray</snippet></ROW><ROW><id>13070475</id><snippet>Average_Assets</snippet></ROW><ROW><id>13070475</id><snippet>\begin{gather}\begin{split}</snippet></ROW><ROW><id>13070475</id><snippet>\end{split}\notag\\\begin{split}\end{split}\notag\end{gather}</snippet></ROW><ROW><id>13070475</id><snippet>MathJax</snippet></ROW><ROW><id>13070475</id><snippet>jsMath</snippet></ROW><ROW><id>13070475</id><snippet>pngmath</snippet></ROW><ROW><id>13070475</id><snippet>\Biggl</snippet></ROW><ROW><id>13070505</id><snippet>sorted(range(len(a)), key=lambda i: a[i])[-2:]
</snippet></ROW><ROW><id>13070505</id><snippet>sorted(range(len(a)), key=lambda i: a[i], reverse=True)[:2]
</snippet></ROW><ROW><id>13070505</id><snippet>zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]
</snippet></ROW><ROW><id>13070505</id><snippet>zip(*heapq.nlargest(2, enumerate(a), key=operator.itemgetter(1)))[0]
</snippet></ROW><ROW><id>13070680</id><snippet>findall</snippet></ROW><ROW><id>13070680</id><snippet>'Hello, locally local test local.'.split().count('local')
</snippet></ROW><ROW><id>13070680</id><snippet>re.sub(r'\blocal([\b\s])', r'we\1', s)
</snippet></ROW><ROW><id>13070741</id><snippet>\documentclass[12pt,notitlepage]{report}
\pagestyle{plain}

\usepackage[top=30mm, bottom=30mm, paperwidth=170mm, paperheight=220mm]{geometry}
\usepackage[dvips]{graphicx}

\begin{document}

\centering
\includegraphics[height=60mm]{myfig.eps}

\vspace{10mm}

\includegraphics[height=60mm]{myfig.eps}

\end{document}
</snippet></ROW><ROW><id>13071040</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>13071040</id><snippet>&gt;&gt;&gt; ast.literal_eval("[16.859,-17.1135,46.6351]")
[16.859, -17.1135, 46.6351]
</snippet></ROW><ROW><id>13071040</id><snippet>def literal_eval_to_array(literal):
    return np.array(ast.literal_eval(literal))
</snippet></ROW><ROW><id>13071040</id><snippet>literal_eval_to_array()</snippet></ROW><ROW><id>13071040</id><snippet>type_key</snippet></ROW><ROW><id>13071119</id><snippet>numpy.random.hypergeometric</snippet></ROW><ROW><id>13071119</id><snippet>ngood &lt; 1</snippet></ROW><ROW><id>13071119</id><snippet>nbad &lt; 1</snippet></ROW><ROW><id>13071119</id><snippet>nsample &lt; 1</snippet></ROW><ROW><id>13071119</id><snippet>def weighted_sample_histogram(frequencies, k, random=numpy.random):
    """ Given a sequence of absolute frequencies [w_0, w_1, ..., w_n-1],
    return a generator [s_0, s_1, ..., s_n-1] where the number s_i gives the
    absolute frequency of drawing the index i from an urn in which that index is
    represented by w_i balls, when drawing k balls without replacement. """
    W = sum(frequencies)
    if k &gt; W:
        raise ValueError("Sum of absolute frequencies less than number of samples")
    for frequency in frequencies:
        if k &lt; 1 or frequency &lt; 1:
            yield 0
        else:
            W -= frequency
            if W &lt; 1:
                good = k
            else:
                good = random.hypergeometric(frequency, W, k)
            k -= good
            yield good
    raise StopIteration
</snippet></ROW><ROW><id>13071123</id><snippet>j</snippet></ROW><ROW><id>13071123</id><snippet>&gt;&gt;&gt; networks = [["  kjhk  ", "kjhk  "], ["kjhkj   ", "   jkh"]]
&gt;&gt;&gt; result = [[s.strip() for s in inner] for inner in networks]
&gt;&gt;&gt; result
[['kjhk', 'kjhk'], ['kjhkj', 'jkh']]
</snippet></ROW><ROW><id>13071375</id><snippet>root = Tk()
root.title("Lazy Button 2")
root.geometry("500x500")
app = Application(root)

root.mainloop()code here
</snippet></ROW><ROW><id>13071375</id><snippet>from Tkinter import * 

class Application(Frame):
      """A GUI application with three button"""

     #create a class variable from the root (master):called by the constructor
     def _init_(self, master):
          self.master = master

     #simple button construction
     # create a button with chosen arguments
     # pack it after the creation not in the middle or before

     def create_widgets(self):
          #"""Create three buttons"""
          #Create first button
          btn1 = Button(self.master, text = "I do nothing")
          btn1.pack()

          #Create second button
          btn2 = Button(self.master, text = "T do nothing as well")
          btn2.pack()

         #Create third button
         btn3=Button(self.master, text = "I do nothing as well as well")
         btn3.pack()

  #must be outside class definition but probably due to stackoverlow
  root = Tk()
  root.title("Lazy Button 2")
  root.geometry("500x500")
  app = Application(root)
  #call the method
  app.create_widgets()
  root.mainloop()
</snippet></ROW><ROW><id>13071375</id><snippet>root = Tk()
root.title("Lazy Button 2")
root.geometry("500x500")
app = Application(root).create_widgets()  #creates and invokes
root.mainloop()
</snippet></ROW><ROW><id>13071375</id><snippet>def __init__(self,master):
    self.master = master
    self.create_widgets()
</snippet></ROW><ROW><id>13071375</id><snippet>root = Tk()
root.title("Lazy Button 2")
root.geometry("500x500")
app = Application(root)
root.mainloop()
</snippet></ROW><ROW><id>13071375</id><snippet>from Tkinter import * 

class Application(Frame):
"""A GUI application with three button"""

def __init__(self,master):
    self.master = master
    self.create_widgets()



def create_widgets(self):
    #"""Create three buttons"""
    #Create first buttom
    btn1 = Button(self.master, text = "I do nothing")
    btn1.pack()

    #Create second button
    btn2 = Button(self.master, text = "T do nothing as well")
    btn2.pack()

    #Create third button
    btn3=Button(self.master, text = "I do nothing as well as well")
    btn3.pack()

root = Tk()
root.title("Lazy Button 2")
root.geometry("500x500")
app = Application(root)
root.mainloop()
</snippet></ROW><ROW><id>13071388</id><snippet>{% macro icon(site, title="") %}
    &lt;img src="{{ url_for('static', filename='icons/%s.png' % site) }}" alt="{{ title }}" class="img-icon"&gt;
{% endmacro %}
</snippet></ROW><ROW><id>13071467</id><snippet>import numpy as np
xi = np.arange(len(x))
yi = np.arange(len(y))
Xi, Yi = np.meshgrid(xi, yi)
</snippet></ROW><ROW><id>13071467</id><snippet>('folder1', 'folderA'), ('folder1', 'folderB')...</snippet></ROW><ROW><id>13071467</id><snippet>Z = np.zeros(Xi.shape)
for i in xi:
    for j in xj:
        xy_pair = (xi[i], yi[j])
        Z[j,i] = calcZ(xy_pair)
</snippet></ROW><ROW><id>13071467</id><snippet>calcZ</snippet></ROW><ROW><id>13071467</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1, projection='3d')

# ... plot some stuff ...

ax.set_xticks(xi)
ax.set_yticks(yi)
ax.set_xticklabels(x)
ax.set_yticklabels(y)

plt.show()
</snippet></ROW><ROW><id>13071471</id><snippet>transaction.commit()</snippet></ROW><ROW><id>13071471</id><snippet>pyramid_tm</snippet></ROW><ROW><id>13071471</id><snippet>zope.sqlalchemy</snippet></ROW><ROW><id>13071471</id><snippet>DBSession</snippet></ROW><ROW><id>13071471</id><snippet>zope.sqlalchemy.ZopeTransactionExtension</snippet></ROW><ROW><id>13071471</id><snippet>DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))

# ...

def main(global_conf, **settings):
    config = Configurator(...)
    config.include('pyramid_tm')
    # ...
</snippet></ROW><ROW><id>13071471</id><snippet>DBSession.flush()</snippet></ROW><ROW><id>13071471</id><snippet>ZopeTransactionExtension</snippet></ROW><ROW><id>13071471</id><snippet>import transaction

with transaction.manager:
    # do tons of database stuff
</snippet></ROW><ROW><id>13071613</id><snippet>def ceil_dt(dt):
    #how many secs have passed this hour
    nsecs = dt.minute*60+dt.second+dt.microsecond*1e-6  
    #number of seconds to next quarter hour mark
    #Non-analytic (brute force is fun) way:  
    #   delta = next(x for x in xrange(0,3601,900) if x&gt;=nsecs) - nsecs
    #anlytic (ARGV BATMAN!, what is going on with that expression) way:
    delta = (nsecs//900)*900+900-nsecs
    #time + number of seconds to quarter hour mark.
    return dt + datetime.timedelta(seconds=delta)
</snippet></ROW><ROW><id>13071613</id><snippet>delta</snippet></ROW><ROW><id>13071613</id><snippet>(nsecs//900)*900</snippet></ROW><ROW><id>13071613</id><snippet>dt</snippet></ROW><ROW><id>13071613</id><snippet>dt</snippet></ROW><ROW><id>13071761</id><snippet>import os
import smtplib
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart


def SendMail(ImgFileName):
    img_data = open(ImgFileName, 'rb').read()
    msg = MIMEMultipart()
    msg['Subject'] = 'subject'
    msg['From'] = 'e@mail.cc'
    msg['To'] = 'e@mail.cc'

    text = MIMEText("test")
    msg.attach(text)
    image = MIMEImage(img_data, name=os.path.basename(ImgFileName))
    msg.attach(image)

    s = smtplib.SMTP(Server, Port)
    s.ehlo()
    s.starttls()
    s.ehlo()
    s.login(UserName, UserPassword)
    s.sendmail(From, To, msg.as_string())
    s.quit()
</snippet></ROW><ROW><id>13072095</id><snippet>g_lis t= None
def pdfToList(inFile):
    global g_list
    if g_list is None:
       #Do all kinds of stuff with inFile and set g_list once
       g_list = inFile

    return g_list
</snippet></ROW><ROW><id>13072095</id><snippet>pdfToList</snippet></ROW><ROW><id>13072095</id><snippet>g_list</snippet></ROW><ROW><id>13072235</id><snippet>*args</snippet></ROW><ROW><id>13072235</id><snippet>def f(*args):
    theSum = 0
    for arg in args:
        theSum += arg
    return theSum

print f(1,2,3,4)
</snippet></ROW><ROW><id>13072246</id><snippet>cefclient.app</snippet></ROW><ROW><id>13072246</id><snippet>Contents/MacOS/executable_name</snippet></ROW><ROW><id>13072246</id><snippet>subprocess.Popen([os.getcwd()+"/cef/cefclient.app/Content/MacOS/executable_name",
                  "--url=http://127.0.0.1:8100"])
</snippet></ROW><ROW><id>13072314</id><snippet>$^</snippet></ROW><ROW><id>13072314</id><snippet>$</snippet></ROW><ROW><id>13072314</id><snippet>^</snippet></ROW><ROW><id>13072314</id><snippet>$</snippet></ROW><ROW><id>13072314</id><snippet>^</snippet></ROW><ROW><id>13072314</id><snippet>^\s{3}\(([AEINPRSTUW]{3})\s(\d{1,3}.\d{2,5})\)$(\r\n?|\n)^\s{3}(http+\S{1,100})$
</snippet></ROW><ROW><id>13072314</id><snippet>\s{3}</snippet></ROW><ROW><id>13072314</id><snippet>.</snippet></ROW><ROW><id>13072314</id><snippet>^\s{3}\(([AEINPRSTUW]{3})\s(\d{1,3}\D\d{2,5})\)$(\r\n?|\n)^\s{3}(http+\S{1,100})$
</snippet></ROW><ROW><id>13072314</id><snippet>\s</snippet></ROW><ROW><id>13072314</id><snippet>\S</snippet></ROW><ROW><id>13072314</id><snippet>\s</snippet></ROW><ROW><id>13072314</id><snippet>\S</snippet></ROW><ROW><id>13072314</id><snippet>^\s*\(([AEINPRSTUW]{3})\s(\d{1,3}\D\d{2,5})\)$(\r\n?|\n)^\s*(http+\S{1,100})$
</snippet></ROW><ROW><id>13072314</id><snippet>^\s*\(([AEINPRSTUW]{3})\s(\d{1,3}\D\d{2,5})\)(\r\n?|\n)\s*(http+\S{1,100})$
</snippet></ROW><ROW><id>13072583</id><snippet>\s</snippet></ROW><ROW><id>13072583</id><snippet>[.\s]</snippet></ROW><ROW><id>13072583</id><snippet>.</snippet></ROW><ROW><id>13072583</id><snippet>[\s\S]</snippet></ROW><ROW><id>13072583</id><snippet>require\\(\\s*\\[[\\S\\s]*\\]\\)
</snippet></ROW><ROW><id>13072583</id><snippet>require([</snippet></ROW><ROW><id>13072583</id><snippet>])</snippet></ROW><ROW><id>13072583</id><snippet>]</snippet></ROW><ROW><id>13072583</id><snippet>require</snippet></ROW><ROW><id>13072583</id><snippet>]</snippet></ROW><ROW><id>13072583</id><snippet>require\\(\\s*\\[[^]]*\\]\\)
</snippet></ROW><ROW><id>13072686</id><snippet>pivot</snippet></ROW><ROW><id>13072686</id><snippet>df.pivot(index='date', columns='variable', values='value')
</snippet></ROW><ROW><id>13072746</id><snippet>def main():
n=1
i=1
flag=True
num1=eval(input("Enter number"))
while i&lt;9:
    n=n+1
    num2=eval(input("Enter number", n))
    i+=1
    if num2&lt;num1:
        flag=False
    num1=num2
if flag==True:
    print("yes")
else:
    print("no")
main()
</snippet></ROW><ROW><id>13072942</id><snippet>numpy</snippet></ROW><ROW><id>13072942</id><snippet>&gt;&gt;&gt; a = numpy.arange(2 * 2 * 2 * 2).reshape(2, 2, 2, 2)
&gt;&gt;&gt; a[:,0,:,0] * a[:,1,:,1] - a[:,1,:,0] * a[:,0,:,1]
array([[-4, -4],
       [-4, -4]])
&gt;&gt;&gt; a = numpy.arange(2 * 3 * 2 * 3).reshape(2, 3, 2, 3)
&gt;&gt;&gt; a[:,0,:,0] * a[:,1,:,1] * a[:,2,:,2] + \
    a[:,0,:,1] * a[:,1,:,2] * a[:,2,:,0] + \
    a[:,0,:,2] * a[:,1,:,0] * a[:,2,:,1] - \
    a[:,0,:,0] * a[:,1,:,2] * a[:,2,:,1] - \
    a[:,0,:,1] * a[:,1,:,0] * a[:,2,:,2] - \
    a[:,0,:,2] * a[:,1,:,1] * a[:,2,:,0]
array([[0, 0],
       [0, 0]])
</snippet></ROW><ROW><id>13072988</id><snippet>u</snippet></ROW><ROW><id>13072988</id><snippet>text_factory</snippet></ROW><ROW><id>13072988</id><snippet>str</snippet></ROW><ROW><id>13073027</id><snippet>j</snippet></ROW><ROW><id>13073027</id><snippet>1</snippet></ROW><ROW><id>13073027</id><snippet>while (i&lt;=3):
    print("i",i)
    j=1 &lt;-- This re-initializes the value of `j`
    while (j&lt;3):
        print("j",j)
        j=j+1
    i=i+1
</snippet></ROW><ROW><id>13073197</id><snippet>networkx</snippet></ROW><ROW><id>13073240</id><snippet>tostring</snippet></ROW><ROW><id>13073240</id><snippet>import lxml.etree as ET

csvData = [['foo bar', 'baz quux'],['bing bang', 'bim bop', 'bip burp'],]
csvFile = 'rowboat'
name = csvFile[:-4]
root = ET.Element('csv_data')
for num, tags in enumerate(csvData):
    row = ET.SubElement(root, '{f}-{n}'.format(f = name, n = num))
    for text in tags:
        text = text.replace(' ', '_')
        tag = ET.SubElement(row, text)
        tag.text = text

print(ET.tostring(root, pretty_print = True))
</snippet></ROW><ROW><id>13073240</id><snippet>&lt;csv_data&gt;
  &lt;row-0&gt;
    &lt;foo_bar&gt;foo_bar&lt;/foo_bar&gt;
    &lt;baz_quux&gt;baz_quux&lt;/baz_quux&gt;
  &lt;/row-0&gt;
  &lt;row-1&gt;
    &lt;bing_bang&gt;bing_bang&lt;/bing_bang&gt;
    &lt;bim_bop&gt;bim_bop&lt;/bim_bop&gt;
    &lt;bip_burp&gt;bip_burp&lt;/bip_burp&gt;
  &lt;/row-1&gt;
&lt;/csv_data&gt;
</snippet></ROW><ROW><id>13073240</id><snippet>for i in range(len(tags)):
    # do stuff with tags[i]
</snippet></ROW><ROW><id>13073240</id><snippet>for tag in tags:
</snippet></ROW><ROW><id>13073240</id><snippet>tags</snippet></ROW><ROW><id>13073240</id><snippet>num = 0
for tags in csvData:
    num += 1
</snippet></ROW><ROW><id>13073240</id><snippet>for num, tags in enumerate(csvData):
</snippet></ROW><ROW><id>13073240</id><snippet>'        ' + '&lt;' + tags[i] + '&gt;' \
                         + row[i] + '&lt;/' + tags[i] + '&gt;' + "\n"
</snippet></ROW><ROW><id>13073240</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>13073240</id><snippet>lxml.etree</snippet></ROW><ROW><id>13073350</id><snippet>import mock

def mocked_get_now(timezone):
    dt = datetime.datetime(2012, 1, 1, 10, 10, 10)
    return timezone.localize(dt)

@mock.patch('path.to.your.models.MyClass.get_now', mock.Mock(side_effect=mocked_get_now))
def your_test(self):
    # Within this test, `MyClass.get_now()` is a mock that'll return a predictable
    # timezone-aware datetime object, set to 2012-01-01 10:10:10.
</snippet></ROW><ROW><id>13073350</id><snippet>mocked_get_now</snippet></ROW><ROW><id>13073350</id><snippet>get_now</snippet></ROW><ROW><id>13073350</id><snippet>get_now</snippet></ROW><ROW><id>13073350</id><snippet>mock</snippet></ROW><ROW><id>13073350</id><snippet>mocked_get_now</snippet></ROW><ROW><id>13073350</id><snippet>get_now</snippet></ROW><ROW><id>13073533</id><snippet>pyparsing</snippet></ROW><ROW><id>13073533</id><snippet># Parse for a name with an optional surname
# Note that pyparsing is built to accept "john doe" or "john        doe"
name = Word(alphas) + Optional(Word(alphas))
</snippet></ROW><ROW><id>13073533</id><snippet># Parses a row of a name and an age
row = Group(name) + Word(nums)
</snippet></ROW><ROW><id>13073533</id><snippet>([(['john', 'doe'], {}), '25'], {})</snippet></ROW><ROW><id>13073533</id><snippet>for line in input_string.splitlines():
    results = row.parseString(line)
    # Do something with results...
</snippet></ROW><ROW><id>13073623</id><snippet>data</snippet></ROW><ROW><id>13073623</id><snippet>[a-b for a, b in zip(data[key1], data[key2])]
</snippet></ROW><ROW><id>13073623</id><snippet>data[key1]</snippet></ROW><ROW><id>13073623</id><snippet>data[key2]</snippet></ROW><ROW><id>13073623</id><snippet>  all_props_templist = [prop1_list[i],prop2_list[i],prop3_list[i],prop4_list[i],prop5_list[i],prop6_list[i],prop7_list[i],prop8_list[i],prop9_list[i],prop10_list[i],prop11_list[i],prop12_list[i],prop13_list[i]] 
</snippet></ROW><ROW><id>13073623</id><snippet>all_props_templist = [prop_list[j][i] for j in range(13)]
</snippet></ROW><ROW><id>13073823</id><snippet>from pyparsing import *

data = '''
asdkjh                  1      120   203
kajshd                  230   2309  2309
Activated Attempts      230   2309  2309
Activated Attempts      230   2309  2309
aksjdh                               300
'''

eventParser = Group(Word(alphas) + Optional(Word(alphas)))
rowParser = Group(eventParser + delimitedList(Word(nums),White(" ")))
tableParser = ZeroOrMore(rowParser)

def getValue(attemptsList, term):
    value = 0
    for attempt in attemptsList:
        if ' '.join(attempt[0]) == term:
            value += int(attempt[1])
    return value

attempts = getValue(tableParser.parseString(data), "Activated Attempts")
print attempts
</snippet></ROW><ROW><id>13073906</id><snippet>    pdata = [p.z] + [getattr(p, pattr[key]) for key in parse]
    pdata = map(float, pdata)
    w.record(*pdata)
</snippet></ROW><ROW><id>13073906</id><snippet>for key in parse</snippet></ROW><ROW><id>13073906</id><snippet>parse</snippet></ROW><ROW><id>13073906</id><snippet>parse = 'irn'</snippet></ROW><ROW><id>13073906</id><snippet>i</snippet></ROW><ROW><id>13073906</id><snippet>r</snippet></ROW><ROW><id>13073906</id><snippet>n</snippet></ROW><ROW><id>13073906</id><snippet>pattr</snippet></ROW><ROW><id>13073906</id><snippet>pattr[key]</snippet></ROW><ROW><id>13073906</id><snippet>pattr['i']</snippet></ROW><ROW><id>13073906</id><snippet>"intensity"</snippet></ROW><ROW><id>13073906</id><snippet>getattr(p, pattr[key])</snippet></ROW><ROW><id>13073906</id><snippet>pattr[key]</snippet></ROW><ROW><id>13073906</id><snippet>p</snippet></ROW><ROW><id>13073906</id><snippet>getattr(p, "intensity")</snippet></ROW><ROW><id>13073906</id><snippet>p.intensity</snippet></ROW><ROW><id>13073906</id><snippet>pattr[key]</snippet></ROW><ROW><id>13073906</id><snippet>*</snippet></ROW><ROW><id>13073906</id><snippet>w.record(*pdata)</snippet></ROW><ROW><id>13073906</id><snippet>pdata</snippet></ROW><ROW><id>13073906</id><snippet>w.record</snippet></ROW><ROW><id>13073906</id><snippet>w.record(*[1,2,3])</snippet></ROW><ROW><id>13073906</id><snippet>w.record(1,2,3)</snippet></ROW><ROW><id>13073906</id><snippet>import shapefile
from liblas import file as lasfile

pattr = {
    "i": 'intensity',
    "r": 'return_number',
    "n": 'number_of_returns',
    "s": 'scan_direction',
    "e": 'flightline_edge',
    "c": 'classification',
    "a": 'scan_angle',
    }

wattr = {
    "i": 'Intensity',
    "r": 'Return',
    "n": 'NumberRet',
    "s": 'ScanDir',
    "e": 'FlightEdge',
    "c": 'Class',
    "a": 'ScanAngle',
    }

def LAS2SHP(inFile, outFile=None, parse = 'irnseca'):
    w = shapefile.Writer(shapefile.POINT)
    w.field('Z','C','10')
    for key in parse:
        w.field(wattr[key],'C','10')
    for p in lasfile.File(inFile,None,'r'):
        w.point(p.x,p.y)
        pdata = [p.z] + [getattr(p, pattr[key]) for key in parse]
        pdata = map(float, pdata)
        w.record(*pdata)       
    if outFile == None:
        inFile_path, inFile_name_ext = os.path.split(os.path.abspath(inFile))
        inFile_name = os.path.splitext(inFile_name_ext)[0]
        w.save("{0}\\{1}.shp".format(inFile_path,inFile_name))
    else:
        w.save(outFile)
</snippet></ROW><ROW><id>13073997</id><snippet>110</snippet></ROW><ROW><id>13073997</id><snippet>101</snippet></ROW><ROW><id>13073997</id><snippet>110
101
=== (^ xor)
011
</snippet></ROW><ROW><id>13073997</id><snippet>011</snippet></ROW><ROW><id>13074385</id><snippet>__unicode__</snippet></ROW><ROW><id>13074385</id><snippet>unicode()</snippet></ROW><ROW><id>13074385</id><snippet>__unicode__</snippet></ROW><ROW><id>13074385</id><snippet>class CampCon(models.Model):
    campsite = models.ForeignKey(CampSite)
    trip = models.ForeignKey('Trip')
    Date = models.DateField()
    user = models.ForeignKey(User)
    overall_review = models.TextField()
    facilities_review = models.IntegerField()
    things_to_do = models.IntegerField()
    privacy = models.IntegerField()
    beauty = models.IntegerField()
    overall_rating = models.IntegerField()

    def __unicode__(self):
        return unicode(self.campsite)

class ImageDB(models.Model):
    campsite = models.ForeignKey(CampSite)
    user = models.ForeignKey(User)
    description = models.CharField(max_length=200)
    image = models.ImageField(upload_to='/home/bobby/Pictures/CampThat')
    date_uploaded = models.DateField()
    date_taken = models.DateField()
    trip = models.ForeignKey('Trip')
    activity = models.ForeignKey(Activities)

    def __unicode__(self):
        return unicode(self.campsite)
</snippet></ROW><ROW><id>13074385</id><snippet>CampSite.__unicode__</snippet></ROW><ROW><id>13074385</id><snippet>campsite.name</snippet></ROW><ROW><id>13074419</id><snippet>dirname</snippet></ROW><ROW><id>13074419</id><snippet>os.walk()</snippet></ROW><ROW><id>13074419</id><snippet>dirname = os.path.join(dirpath,dirname)</snippet></ROW><ROW><id>13074419</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>13074419</id><snippet>file</snippet></ROW><ROW><id>13074419</id><snippet>grass.*</snippet></ROW><ROW><id>13074419</id><snippet>os.walk()</snippet></ROW><ROW><id>13074419</id><snippet>def import_tifs(dirpath):
  for dirpath, dirname, filenames in os.walk(dirpath):
    # Iterate through the files in the current dir returned by walk()
    for tif_file in filenames:
      # If the suffix is '.TIF', process
      if tif_file.upper().endswith('.tif'):
        # This will contain the full path to your file
        full_path = os.path.join(dirpath, tif_file)

        # tif_file will already contain the name, so you can call from here
        grass.message('Importing %s -&gt; %s@%s...' % (full_path, tif_file, dirpath))

        grass.run_command('r.in.gdal',
                          flags = 'o',
                          input = full_path,
                          output = tif_file,
                          quiet = True,
                          overwrite = True)
</snippet></ROW><ROW><id>13074495</id><snippet>import sys, traceback

def outer(b):
    def inner(b):
        return [0,2,99][b]
    return "abcd"[inner(b)]

# "abcd"[[0,2,99][1]] =&gt; "abcd"[2] =&gt; "c"
print(outer(1))

try:
    # "abcd"[[0,2,99][2]] =&gt; "abcd"[99] =&gt; IndexError
    print(outer(2))
except IndexError:
    fname = traceback.extract_tb(sys.exc_info()[2])[-1][2]
    print("Exception from: {}".format(fname))

try:
    # "abcd"[[0,2,99][3]] =&gt; IndexError
    print(outer(3))
except IndexError:
    fname = traceback.extract_tb(sys.exc_info()[2])[-1][2]
    print("Exception from: {}".format(fname))
</snippet></ROW><ROW><id>13074495</id><snippet>c
Exception from: outer
Exception from: inner
</snippet></ROW><ROW><id>13074597</id><snippet>import cv2
import numpy as np
import cv           #the old cv interface

img1_square_corners = np.float32([[253,211], [563,211], [563,519],[253,519]])
img2_quad_corners = np.float32([[234,197], [520,169], [715,483], [81,472]])

h, mask = cv2.findHomography(img1_square_corners, img2_quad_corners)
im = cv2.imread("image1.png")
</snippet></ROW><ROW><id>13074597</id><snippet>out_2 = cv.fromarray(np.zeros((3000,3000,3),np.uint8))
</snippet></ROW><ROW><id>13074597</id><snippet>cv</snippet></ROW><ROW><id>13074597</id><snippet>cv2</snippet></ROW><ROW><id>13074597</id><snippet>cv.WarpPerspective(cv.fromarray(im), out_2, cv.fromarray(h))
cv.ShowImage("test", out_2)
cv.SaveImage("result.png", out_2)
cv2.waitKey()
</snippet></ROW><ROW><id>13074836</id><snippet># Remixed from: http://www.dabeaz.com/coroutines/cosax.py
# Don't shy away from reading http://www.dabeaz.com/coroutines/ if the stuff below
# seems weird.

from xml.sax import ContentHandler, parse
from collections import namedtuple

ElementStart = namedtuple('ElementStart', 'name attrs')
ElementEnd = namedtuple('ElementEnd', 'name')

class LazySax(ContentHandler):
    def __init__(self, target):
        self.target = target
    def startElement(self, name, attrs):
        self.target.send(ElementStart(name, attrs._attrs))
    def endElement(self, name):
        self.target.send(ElementEnd(name))

def pull_tuples(tuples):
    while True:
        event = yield
        if isinstance(event, ElementStart) and event.name == 'vehicle':
            vid = event.attrs['id']
            edges = None
            while True:
                event = yield
                if isinstance(event, ElementStart) and event.name == 'route':
                    edges = event.attrs['edges']
                elif isinstance(event, ElementEnd) and event.name == 'vehicle':
                    tuples.append((vid, edges))
                    break
</snippet></ROW><ROW><id>13074836</id><snippet>vehicles.xml</snippet></ROW><ROW><id>13074836</id><snippet>&lt;root&gt;
 &lt;foo /&gt;
 &lt;bar&gt;
  &lt;!-- This block will be skipped. Try that with regex (please DON'T!).
  &lt;vehicle id="1292441" depart="26060.00"&gt;
      &lt;route edges="24449167#2 27659684#1 24686876#1"/&gt;
  &lt;/vehicle&gt;
  --&gt;
  &lt;vehicle id="1292442" depart="26060.00"&gt;
      &lt;route edges="24449167#2 27659684#1 24686876#1"/&gt;
  &lt;/vehicle&gt;
 &lt;/bar&gt;
 &lt;vehicle id="1292443" depart="26060.00"&gt;
      &lt;route edges="34449167#2 37659684#1 34686876#1"/&gt;
 &lt;/vehicle&gt;
 &lt;vehicle id="1292444" depart="26060.00"&gt;
      &lt;route edges="44449167#2 47659684#1 44686876#1"/&gt;
 &lt;/vehicle&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>13074836</id><snippet>results = []
puller = pull_tuples(results); puller.next()
with open('vehicles.xml') as f:
    parse(f, LazySax(puller))
for result in results:
    print result
</snippet></ROW><ROW><id>13074836</id><snippet>(u'1292442', u'24449167#2 27659684#1 24686876#1')
(u'1292443', u'34449167#2 37659684#1 34686876#1')
(u'1292444', u'44449167#2 47659684#1 44686876#1')
</snippet></ROW><ROW><id>13074920</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

url = "http://www.samhsa.gov/data/NSDUH/2k10State/NSDUHsae2010/NSDUHsaeAppC2010.htm"
soup = BeautifulSoup(urllib2.urlopen(url).read())

for row in soup.findAll('table')[0].tbody.findAll('tr'):
    first_column = row.findAll('th')[0].contents
    third_column = row.findAll('td')[2].contents
    print first_column, third_column
</snippet></ROW><ROW><id>13075071</id><snippet>import sys

class Context(object):
    def __enter__(self):
        try:
            raise Exception("Oops in __enter__")
        except:
            # Swallow exception if __exit__ returns a True value
            if self.__exit__(*sys.exc_info()):
                pass
            else:
                raise


    def __exit__(self, e_typ, e_val, trcbak):
        print "Now it's running"


with Context():
    pass
</snippet></ROW><ROW><id>13075071</id><snippet>__enter__</snippet></ROW><ROW><id>13075071</id><snippet>class Context(object):
    def __init__(self):
        self.enter_ok = True

    def __enter__(self):
        try:
            raise Exception("Oops in __enter__")
        except:
            if self.__exit__(*sys.exc_info()):
                self.enter_ok = False
            else:
                raise
        return self

    def __exit__(self, e_typ, e_val, trcbak):
        print "Now this runs twice"
        return True


with Context() as c:
    if c.enter_ok:
        print "Only runs if enter succeeded"

print "Execution continues"
</snippet></ROW><ROW><id>13075071</id><snippet>__enter__</snippet></ROW><ROW><id>13075071</id><snippet>self.enter_ok</snippet></ROW><ROW><id>13075071</id><snippet>__exit__</snippet></ROW><ROW><id>13075071</id><snippet>return False</snippet></ROW><ROW><id>13075071</id><snippet>True</snippet></ROW><ROW><id>13075096</id><snippet>None</snippet></ROW><ROW><id>13075096</id><snippet>Ellipsis</snippet></ROW><ROW><id>13075096</id><snippet>class Example(object): #inherit from object.  It's just a good idea.
   def __init__(self, data = None):
      self.data = self.default_data() if data is None else data

   def default_data(self):  #probably need `self` here, unless this is a @staticmethod ...
      # ....
      return something
</snippet></ROW><ROW><id>13075096</id><snippet>object()</snippet></ROW><ROW><id>13075096</id><snippet>SENTINEL = object()
class Example(object):
   def __init__(self, data = SENTINEL):
      self.data = self.default_data() if data is SENTINEL else data
</snippet></ROW><ROW><id>13075096</id><snippet>None</snippet></ROW><ROW><id>13075096</id><snippet>None</snippet></ROW><ROW><id>13075448</id><snippet>i</snippet></ROW><ROW><id>13075448</id><snippet>os.rename(directory + "/" + filename, directory + "/" + str(self.files.index(filename)) + ". " + newfile)
</snippet></ROW><ROW><id>13075448</id><snippet>os.listdir</snippet></ROW><ROW><id>13075485</id><snippet>add_help=False</snippet></ROW><ROW><id>13075485</id><snippet>action="help"</snippet></ROW><ROW><id>13075485</id><snippet>metavar</snippet></ROW><ROW><id>13075485</id><snippet>action="store_true"</snippet></ROW><ROW><id>13075485</id><snippet>import argparse

parser = argparse.ArgumentParser(prog="LS.py",
                                 usage="%(prog)s [options] [paths...]\nThe paths are optional; if not given . is used.",
                                 add_help=False)

group = parser.add_argument_group("Options")

group.add_argument("-h", "--help", action="help", help="show this help message and exit")
group.add_argument("-path", default=".", help=argparse.SUPPRESS)
group.add_argument("-m", "--modified", action="store_true",
                    help="show last modified date/time")
group.add_argument("-o", "--order", nargs=1, default="name",
                    help="sort order (n[ame], m[odified], s[ize])\n[default: name]")
group.add_argument("-r", "--recursive", action="store_true",
                    help="recurse into subdirectories")
group.add_argument("-s", "--sizes", action="store_true",
                   help="show sizes")

args = parser.parse_args()
</snippet></ROW><ROW><id>13075485</id><snippet>Options:
  -h, --help            show this help message and exit
  -m, --modified        show last modified date/time
  -o ORDER, --order ORDER
                        sort order (n[ame], m[odified], s[ize]) [default:
                        name]
  -r, --recursive       recurse into subdirectories
  -s, --sizes           show sizes
</snippet></ROW></DATA>